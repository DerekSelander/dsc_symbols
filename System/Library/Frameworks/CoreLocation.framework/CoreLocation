|| __DATA.__objc_data _OBJC_CLASS_$_CLBBTimeFreqTransferCallbackAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLBeacon
|| __DATA.__objc_data _OBJC_CLASS_$_CLBeaconIdentityConstraint
|| __DATA.__objc_data _OBJC_CLASS_$_CLClientTypesPrivate
|| __DATA.__objc_data _OBJC_CLASS_$_CLEmergencyEnablementAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLEmergencyLocationSelector
|| __DATA.__objc_data _OBJC_CLASS_$_CLEmergencyLocationSelectorConfig
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryAbsoluteWildConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryAccelerometerOrientationModeConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryAccelerometerSlopeModeConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryConnectionMaterial
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryFirmwareUpdateManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryFirmwareVersion
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryRangingManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessorySoundSequence
|| __DATA.__objc_data _OBJC_CLASS_$_CLFindMyAccessoryWildConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CLFloor
|| __DATA.__objc_data _OBJC_CLASS_$_CLGnssDisablementAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLHarvester
|| __DATA.__objc_data _OBJC_CLASS_$_CLHeading
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationIndependenceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationManagerRoutine
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationSmoother
|| __DATA.__objc_data _OBJC_CLASS_$_CLPair
|| __DATA.__objc_data _OBJC_CLASS_$_CLPlatformInfoPrivate
|| __DATA.__objc_data _OBJC_CLASS_$_CLRacingRouteManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLRacingRouteParameters
|| __DATA.__objc_data _OBJC_CLASS_$_CLRacingRoutePerformanceResults
|| __DATA.__objc_data _OBJC_CLASS_$_CLRacingRouteState
|| __DATA.__objc_data _OBJC_CLASS_$_CLRacingRouteVariables
|| __DATA.__objc_data _OBJC_CLASS_$_CLReductiveFilterOptions
|| __DATA.__objc_data _OBJC_CLASS_$_CLReductiveFilterSuite
|| __DATA.__objc_data _OBJC_CLASS_$_CLRegulatoryConfig
|| __DATA.__objc_data _OBJC_CLASS_$_CLRouteBoundingBox
|| __DATA.__objc_data _OBJC_CLASS_$_CLRoutePoint
|| __DATA.__objc_data _OBJC_CLASS_$_CLSimulationManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLVehicleHeading
|| __DATA.__objc_data _OBJC_CLASS_$_CLVehicleSpeed
|| __DATA.__objc_data _OBJC_CLASS_$_CLVisit
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeading
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeadingEstimation
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeadingSupplInfo
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLLocation
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLLocationCoordinate
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLMapRoadSegment
|| __DATA.__objc_data _OBJC_CLASS_$__CLMicroLocationClusterIdAndClusterData
|| __DATA.__objc_data _OBJC_CLASS_$__CLMicroLocationSourceIdAndSourceData
|| __DATA.__objc_data _OBJC_CLASS_$__CLMicroLocationSourcesStatisticsResult
|| __DATA.__objc_data _OBJC_CLASS_$__CLPolygonalRegion
|| __DATA.__objc_data _OBJC_CLASS_$__CLRangingPeer
|| __DATA.__objc_data _OBJC_CLASS_$__CLRangingPeerDistance
|| __DATA.__objc_data _OBJC_CLASS_$__CLSignificantRegion
|| __DATA.__objc_data _OBJC_CLASS_$__CLVIOEstimation
|| __DATA.__objc_data _OBJC_CLASS_$__CLVLLocalizationDebugInfo
|| __DATA.__objc_data _OBJC_CLASS_$__CLVLLocalizationMaps488Details
|| __DATA.__objc_data _OBJC_CLASS_$__CLVLLocalizationResult
|| __DATA.__objc_data _OBJC_CLASS_$__CLVertex
|| __DATA.__objc_data _OBJC_METACLASS_$_CLBBTimeFreqTransferCallbackAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLBeacon
|| __DATA.__objc_data _OBJC_METACLASS_$_CLBeaconIdentityConstraint
|| __DATA.__objc_data _OBJC_METACLASS_$_CLClientTypesPrivate
|| __DATA.__objc_data _OBJC_METACLASS_$_CLEmergencyEnablementAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLEmergencyLocationSelector
|| __DATA.__objc_data _OBJC_METACLASS_$_CLEmergencyLocationSelectorConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryAbsoluteWildConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryAccelerometerOrientationModeConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryAccelerometerSlopeModeConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryConnectionMaterial
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryFirmwareUpdateManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryFirmwareVersion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryRangingManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessorySoundSequence
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFindMyAccessoryWildConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFloor
|| __DATA.__objc_data _OBJC_METACLASS_$_CLGnssDisablementAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLHarvester
|| __DATA.__objc_data _OBJC_METACLASS_$_CLHeading
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationIndependenceAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationManagerRoutine
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationSmoother
|| __DATA.__objc_data _OBJC_METACLASS_$_CLPair
|| __DATA.__objc_data _OBJC_METACLASS_$_CLPlatformInfoPrivate
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRacingRouteManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRacingRouteParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRacingRoutePerformanceResults
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRacingRouteState
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRacingRouteVariables
|| __DATA.__objc_data _OBJC_METACLASS_$_CLReductiveFilterOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_CLReductiveFilterSuite
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRegulatoryConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRouteBoundingBox
|| __DATA.__objc_data _OBJC_METACLASS_$_CLRoutePoint
|| __DATA.__objc_data _OBJC_METACLASS_$_CLSimulationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVehicleHeading
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVehicleSpeed
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVisit
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeading
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeadingEstimation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeadingSupplInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLLocation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLLocationCoordinate
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLMapRoadSegment
|| __DATA.__objc_data _OBJC_METACLASS_$__CLMicroLocationClusterIdAndClusterData
|| __DATA.__objc_data _OBJC_METACLASS_$__CLMicroLocationSourceIdAndSourceData
|| __DATA.__objc_data _OBJC_METACLASS_$__CLMicroLocationSourcesStatisticsResult
|| __DATA.__objc_data _OBJC_METACLASS_$__CLPolygonalRegion
|| __DATA.__objc_data _OBJC_METACLASS_$__CLRangingPeer
|| __DATA.__objc_data _OBJC_METACLASS_$__CLRangingPeerDistance
|| __DATA.__objc_data _OBJC_METACLASS_$__CLSignificantRegion
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVIOEstimation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVLLocalizationDebugInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVLLocalizationMaps488Details
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVLLocalizationResult
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVertex
|| __DATA_CONST.__const _CLAppResetChangedNotification
|| __DATA_CONST.__const _CLAppStatusChangedNotification
|| __DATA_CONST.__const _CLAuthorizationStatusChangedNotification
|| __DATA_CONST.__const _CLBeaconRegionAnyIdentifier
|| __DATA_CONST.__const _CLDaemonStartedNotification
|| __DATA_CONST.__const _CLGnssBandsChangedNotification
|| __DATA_CONST.__const _CLLocationPushServiceErrorDomain
|| __DATA_CONST.__const _CLShouldDisplayStatusBarIconChangedNotification
|| __DATA_CONST.__const _CLTechStatusChangedNotification
|| __DATA_CONST.__const _UTDegradationReasonSignificantLocationsOffKey
|| __DATA_CONST.__const _UTDegradationReasonWifiOffKey
|| __DATA_CONST.__const _UTDisableReasonAirplaneModeOnKey
|| __DATA_CONST.__const _UTDisableReasonBTOffKey
|| __DATA_CONST.__const _UTDisableReasonFindMyDeletedKey
|| __DATA_CONST.__const _UTDisableReasonLocationServicesOffKey
|| __DATA_CONST.__const _UTDisableReasonTrackingNotificationsDisallowedKey
|| __DATA_CONST.__const _UTEnablementStatusKey
|| __DATA_CONST.__const _kCLCommonLocationAlwaysAndWhenInUseUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationAlwaysUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationDefaultAccuracyReducedKey
|| __DATA_CONST.__const _kCLCommonLocationInterestZonesKey
|| __DATA_CONST.__const _kCLCommonLocationTemporaryUsageDescriptionDictionaryKey
|| __DATA_CONST.__const _kCLCommonLocationUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationWhenInUseUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationWildernessSafetyUsageDescriptionDictionaryKey
|| __DATA_CONST.__const _kCLCommonNSWidgetWantsLocationKey
|| __DATA_CONST.__const _kCLCommonWKRunsIndependentlyOfCompanionAppKey
|| __DATA_CONST.__const _kCLCommonWKWatchOnlyKey
|| __DATA_CONST.__const _kCLErrorDomain
|| __DATA_CONST.__const _kCLErrorDomainPrivate
|| __DATA_CONST.__const _kCLErrorUserInfoAlternateRegionKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLBeaconRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLCircularRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLGeocoder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLInUseAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationGnssOdometerInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationMatchInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationSourceInformation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLPlacemark
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLStateTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CLLocationFusionInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CLLocationGroundAltitude
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CLPlaceInference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLBeaconRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLCircularRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLGeocoder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLInUseAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationGnssOdometerInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationMatchInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationSourceInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLPlacemark
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLStateTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CLLocationFusionInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CLLocationGroundAltitude
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CLPlaceInference
|| __TEXT.__const _CLLocationDistanceMax
|| __TEXT.__const _CLTimeIntervalMax
|| __TEXT.__const _kCLClientDistanceFilterNone
|| __TEXT.__const _kCLClientHeadingFilterNone
|| __TEXT.__const _kCLDistanceFilterNone
|| __TEXT.__const _kCLHeadingFilterNone
|| __TEXT.__const _kCLLocationAccuracyAggressivePrecisionReduction
|| __TEXT.__const _kCLLocationAccuracyBest
|| __TEXT.__const _kCLLocationAccuracyBestForNavigation
|| __TEXT.__const _kCLLocationAccuracyBystander
|| __TEXT.__const _kCLLocationAccuracyBystanderPreLoiOverride
|| __TEXT.__const _kCLLocationAccuracyE911CallInviteHigh
|| __TEXT.__const _kCLLocationAccuracyE911CallInviteLow
|| __TEXT.__const _kCLLocationAccuracyHundredMeters
|| __TEXT.__const _kCLLocationAccuracyKilometer
|| __TEXT.__const _kCLLocationAccuracyLeech
|| __TEXT.__const _kCLLocationAccuracyNearestTenMeters
|| __TEXT.__const _kCLLocationAccuracyPrecisionLimitation
|| __TEXT.__const _kCLLocationAccuracyReduced
|| __TEXT.__const _kCLLocationAccuracyRhythmicNonWaking
|| __TEXT.__const _kCLLocationAccuracyRhythmicWaking
|| __TEXT.__const _kCLLocationAccuracyThreeKilometers
|| __TEXT.__const _kCLLocationCoordinate2DInvalid
|| __TEXT.__const _kCLLocationIntegrityHigh
|| __TEXT.__const _kCLLocationIntegrityLow
|| __TEXT.__const _kCLLocationIntegrityMedium
|| __TEXT.__const _kCLLocationIntegrityNone
|| __TEXT.__const _kCLPolygonalRegionMaxVertices
|| __TEXT.__const _kCLPolygonalRegionMinVertices
|| __TEXT.__const _kInvalidMacAddress
|| __TEXT.__text _CLApplyArchivedAuthorizationDecisions
|| __TEXT.__text _CLClientCreateIso6709Notation
|| __TEXT.__text _CLClientCreateWithBundleIdentifierAndPath
|| __TEXT.__text _CLClientCreateWithBundleIdentifierAndPathOnSilo
|| __TEXT.__text _CLClientCreateWithBundleIdentifierAndPathWithWebsiteOnSilo
|| __TEXT.__text _CLClientDisplayStats
|| __TEXT.__text _CLClientGetAuthorizationStatus
|| __TEXT.__text _CLClientGetAuthorizationStatusAndCorrectiveCompensation
|| __TEXT.__text _CLClientGetClientDictionary
|| __TEXT.__text _CLClientGetDistanceCoordinates
|| __TEXT.__text _CLClientGetDistanceHighPrecision
|| __TEXT.__text _CLClientGetError
|| __TEXT.__text _CLClientGetGroundAltitudeAtLocation
|| __TEXT.__text _CLClientGetHeading
|| __TEXT.__text _CLClientGetLocation
|| __TEXT.__text _CLClientGetTypeID
|| __TEXT.__text _CLClientInvalidate
|| __TEXT.__text _CLClientIsAuthorizationPromptMapDisplayEnabled
|| __TEXT.__text _CLClientIsHeadingAvailable
|| __TEXT.__text _CLClientIsLocationServicesAvailable
|| __TEXT.__text _CLClientIsLocationServicesEnabled
|| __TEXT.__text _CLClientIsValid
|| __TEXT.__text _CLClientLog
|| __TEXT.__text _CLClientLogDump
|| __TEXT.__text _CLClientMarkAsHavingReceivedLocation
|| __TEXT.__text _CLClientPopulateRegionFromInfo
|| __TEXT.__text _CLClientRequestAuthorization
|| __TEXT.__text _CLClientRequestTemporaryPrecise
|| __TEXT.__text _CLClientRetrieveAuthorizationStatus
|| __TEXT.__text _CLClientRetrieveAuthorizationStatusForIdentity
|| __TEXT.__text _CLClientRetrieveIncidentalUseMode
|| __TEXT.__text _CLClientRetrieveLocation
|| __TEXT.__text _CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations
|| __TEXT.__text _CLClientRetrievePrecisionPermission
|| __TEXT.__text _CLClientSetAllowsMapCorrection
|| __TEXT.__text _CLClientSetAutomaticPromptingEnabled
|| __TEXT.__text _CLClientSetCallback
|| __TEXT.__text _CLClientSetMatchInfoEnabled
|| __TEXT.__text _CLClientSetProxyForRemoteClient
|| __TEXT.__text _CLClientSetShowLocationPrompt
|| __TEXT.__text _CLClientShowHeadingCalibration
|| __TEXT.__text _CLClientShutdownDaemon
|| __TEXT.__text _CLClientStartHeadingUpdates
|| __TEXT.__text _CLClientStartLocationUpdates
|| __TEXT.__text _CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations
|| __TEXT.__text _CLClientStartVehicleHeadingUpdates
|| __TEXT.__text _CLClientStartVehicleSpeedUpdates
|| __TEXT.__text _CLClientStopHeadingUpdates
|| __TEXT.__text _CLClientStopLocationUpdates
|| __TEXT.__text _CLClientStopVehicleHeadingUpdates
|| __TEXT.__text _CLClientStopVehicleSpeedUpdates
|| __TEXT.__text _CLClientUpdateARSessionState
|| __TEXT.__text _CLClientUpdateVIOEstimation
|| __TEXT.__text _CLClientUpdateVLLocalizationResult
|| __TEXT.__text _CLCopyActiveClientsUsingLocation
|| __TEXT.__text _CLCopyAppsUsingLocation
|| __TEXT.__text _CLCopyGnssBandsInUse
|| __TEXT.__text _CLCopyMicroLocationInternalVersion
|| __TEXT.__text _CLCopyNearbyAssetSettings
|| __TEXT.__text _CLCopyNearbyAssetSettingsOfAccessoryFile
|| __TEXT.__text _CLCopyTechnologiesInUse
|| __TEXT.__text _CLCopyZaxisStats
|| __TEXT.__text _CLDeleteCurrentEmergencyLocationAsset
|| __TEXT.__text _CLGenerateRoadSegmentId
|| __TEXT.__text _CLGetAccessoryMotionSensorLogs
|| __TEXT.__text _CLGetAccessoryPASCDTransmissionState
|| __TEXT.__text _CLGetAccessoryTypeBitSet
|| __TEXT.__text _CLGetArchivedAuthorizationDecisions
|| __TEXT.__text _CLGetClientTransientAuthorizationInfo
|| __TEXT.__text _CLGetControlPlaneStatusReport
|| __TEXT.__text _CLGetEmergencyLocationSettingsVersionInfo
|| __TEXT.__text _CLGetLocationDefault
|| __TEXT.__text _CLGetMotionSensorLogs
|| __TEXT.__text _CLGetOdometryBatchedLocations
|| __TEXT.__text _CLGetPipelinedCache
|| __TEXT.__text _CLGetStatusBarIconState
|| __TEXT.__text _CLGetUncertaintyScaleFactors
|| __TEXT.__text _CLInternalPerformMigration
|| __TEXT.__text _CLLocationCoordinate2DGetDistanceFrom
|| __TEXT.__text _CLLocationCoordinate2DIsValid
|| __TEXT.__text _CLLocationCoordinate2DMake
|| __TEXT.__text _CLPassKitNotifyPayment
|| __TEXT.__text _CLPingDaemon
|| __TEXT.__text _CLSetClientTransientAuthorizationInfo
|| __TEXT.__text _CLSetLocationDefault
|| __TEXT.__text _CLSetMapMatchingRouteHint
|| __TEXT.__text _CLSetRouteHintsForMapMatching
|| __TEXT.__text _CLShouldDisplayEEDUI
|| __TEXT.__text _CLStartStopAdvertisingBeacon
|| __TEXT.__text _CLWeatherNotifyForecast
|| __TEXT.__text __CLLinkedOnOrAfter
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBluetooth: _CBAdvertisementDataAppleBeaconKey
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCreate
__ CoreFoundation: _CFBundleGetIdentifier
__ CoreFoundation: _CFBundleGetMainBundle
__ CoreFoundation: _CFBundleGetValueForInfoDictionaryKey
__ CoreFoundation: _CFCopyHomeDirectoryURLForUser
__ CoreFoundation: _CFCopyUserName
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveAllValues
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetDomain
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFGetUserName
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateDeepCopy
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFPropertyListWrite
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithCStringNoCopy
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetBytes
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFURLCopyFileSystemPath
__ CoreFoundation: _CFURLCreateWithFileSystemPath
__ CoreFoundation: _CFWriteStreamClose
__ CoreFoundation: _CFWriteStreamCopyProperty
__ CoreFoundation: _CFWriteStreamCreateWithAllocatedBuffers
__ CoreFoundation: _CFWriteStreamOpen
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: __CFBundleCreateUnique
__ CoreFoundation: __CFCopyServerVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFExecutableLinkedOnOrAfter
__ CoreFoundation: __CFIsDeallocating
__ CoreFoundation: __CFMZEnabled
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: __kCFSystemVersionProductNameKey
__ CoreFoundation: __kCFSystemVersionProductVersionKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFAllocatorNull
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleVersionKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFStreamPropertyDataWritten
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtensionContext
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSExtensionContext
__ GeoServices: _GEOErrorDomain
__ GeoServices: _OBJC_CLASS_$_GEOCoarseLocationMetadata
__ GeoServices: _OBJC_CLASS_$_GEOGeographicMetadataRequester
__ GeoServices: _OBJC_CLASS_$_GEOLocation
__ GeoServices: _OBJC_CLASS_$_GEOMapItemStorage
__ GeoServices: _OBJC_CLASS_$_GEOMapRegion
__ GeoServices: _OBJC_CLASS_$_GEOMapService
__ IOKit: _IOObjectRelease
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMainPortDefault
__ LocationSupport: _OBJC_CLASS_$_CLDispatchSilo
__ LocationSupport: _OBJC_CLASS_$_CLRunLoopSilo
__ LocationSupport: _OBJC_CLASS_$_CLServiceVendor
__ LocationSupport: _OBJC_CLASS_$_CLSilo
__ LocationSupport: __ZN18CLConnectionClient11sendMessageENSt3__110shared_ptrI19CLConnectionMessageEEU13block_pointerFvS3_E
__ LocationSupport: __ZN18CLConnectionClient11sendMessageENSt3__110shared_ptrI19CLConnectionMessageEEb
__ LocationSupport: __ZN18CLConnectionClient15sendMessageSyncENSt3__110shared_ptrI19CLConnectionMessageEEb
__ LocationSupport: __ZN18CLConnectionClient18sendCachedMessagesEv
__ LocationSupport: __ZN18CLConnectionClient20setHandlerForMessageERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvNS0_10shared_ptrI19CLConnectionMessageEEE
__ LocationSupport: __ZN18CLConnectionClient22setInterruptionHandlerEU13block_pointerFvvE
__ LocationSupport: __ZN18CLConnectionClient24setDefaultMessageHandlerEU13block_pointerFvNSt3__110shared_ptrI19CLConnectionMessageEEE
__ LocationSupport: __ZN18CLConnectionClient25sendMessageWithCompletionENSt3__110shared_ptrI19CLConnectionMessageEEU13block_pointerFvS3_E
__ LocationSupport: __ZN18CLConnectionClient33setRequireManualCachedMessageSendEb
__ LocationSupport: __ZN18CLConnectionClient5startEv
__ LocationSupport: __ZN18CLConnectionClientC1ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPU28objcproto17OS_dispatch_queue8NSObject
__ LocationSupport: __ZN18CLConnectionClientD1Ev
__ LocationSupport: __ZN19CLConnectionMessageC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ LocationSupport: __ZN19CLConnectionMessageC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPU25objcproto14NSSecureCoding11objc_object
__ LocationSupport: __ZN19CLConnectionMessageD1Ev
__ LocationSupport: __ZNK19CLConnectionMessage13getDictionaryEv
__ LocationSupport: __ZNK19CLConnectionMessage22getDictionaryOfClassesEP5NSSet
__ LocationSupport: __ZNK19CLConnectionMessage4nameEv
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGIsDeviceOfType
__ libMobileGestalt.dylib: _MGIsDeviceOneOfType
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __NSGetExecutablePath
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___cxa_atexit
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dyld_get_image_header
__ libSystem.B.dylib: __dyld_get_image_name
__ libSystem.B.dylib: __dyld_image_count
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _asin
__ libSystem.B.dylib: _atan
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _backtrace
__ libSystem.B.dylib: _basename
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _cos
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_set_finalizer_f
__ libSystem.B.dylib: _dispatch_set_qos_class_fallback
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_workloop_create_inactive
__ libSystem.B.dylib: _dladdr
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _ether_ntoa
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _feof
__ libSystem.B.dylib: _fflush
__ libSystem.B.dylib: _fgetpos
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _fputc
__ libSystem.B.dylib: _fputs
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _funopen
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _getgid
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getpwnam
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _lchmod
__ libSystem.B.dylib: _lchown
__ libSystem.B.dylib: _lstat
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _perror
__ libSystem.B.dylib: _pthread_main_np
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_mutexattr_destroy
__ libSystem.B.dylib: _pthread_mutexattr_init
__ libSystem.B.dylib: _pthread_mutexattr_settype
__ libSystem.B.dylib: _pthread_self
__ libSystem.B.dylib: _rename
__ libSystem.B.dylib: _sandbox_check
__ libSystem.B.dylib: _setvbuf
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _sleep
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _syslog
__ libSystem.B.dylib: _tan
__ libSystem.B.dylib: _unlink
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _vproc_swap_integer
__ libSystem.B.dylib: _vsnprintf
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libSystem.B.dylib: _xpc_string_create
__ libbz2.1.0.dylib: _BZ2_bzWrite
__ libbz2.1.0.dylib: _BZ2_bzWriteClose
__ libbz2.1.0.dylib: _BZ2_bzWriteOpen
__ libc++.1.dylib: __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc
__ libc++.1.dylib: __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm
__ libc++.1.dylib: __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt3__112__next_primeEm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__119__shared_weak_count14__release_weakEv
__ libc++.1.dylib: __ZNSt3__119__shared_weak_countD2Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__119__shared_weak_countE
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv121__vmi_class_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_pure_virtual
__ libc++.1.dylib: ___cxa_rethrow
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libenergytrace.dylib: _entr_act_begin
__ libenergytrace.dylib: _entr_act_end
__ libenergytrace.dylib: _entr_act_modify
__ libenergytrace.dylib: _entr_act_set
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _object_getClassName
__ libobjc.A.dylib: _sel_getName
__ libxml2.2.dylib: _xmlBufferContent
__ libxml2.2.dylib: _xmlBufferCreate
__ libxml2.2.dylib: _xmlBufferFree
__ libxml2.2.dylib: _xmlBufferLength
__ libxml2.2.dylib: _xmlFreeTextWriter
__ libxml2.2.dylib: _xmlNewTextWriterMemory
__ libxml2.2.dylib: _xmlTextWriterFlush
__ libxml2.2.dylib: _xmlTextWriterWriteBase64
_CLLocationManagerRoutineProxy : NSObject <CLLocationManagerRoutineClientInterface>
 @property  NSXPCConnection *connection
 @property  id delegate
 @property  CLLocationManagerRoutine *locationManagerRoutine
 @property  BOOL updating
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_CLLocationManagerRoutineProxy updating]
  -[_CLLocationManagerRoutineProxy didUpdateLocations:]
  -[_CLLocationManagerRoutineProxy setUpdating:]
  -[_CLLocationManagerRoutineProxy setLocationManagerRoutine:]
  -[_CLLocationManagerRoutineProxy createConnection]
  -[_CLLocationManagerRoutineProxy setDelegate:]
  -[_CLLocationManagerRoutineProxy delegate]
  -[_CLLocationManagerRoutineProxy dealloc]
  -[_CLLocationManagerRoutineProxy didUpdateLocations:withReply:]
  -[_CLLocationManagerRoutineProxy connection]
  -[_CLLocationManagerRoutineProxy locationManagerRoutine]
  -[_CLLocationManagerRoutineProxy setConnection:]
  -[_CLLocationManagerRoutineProxy initWithQueue:locationManagerRoutine:]


CLLocationManagerRoutine : NSObject
 @property  _CLLocationManagerRoutineProxy *locationManagerRoutineProxy
 @property  <CLLocationManagerDelegate> *delegate

  // instance methods
  -[CLLocationManagerRoutine setDelegate:]
  -[CLLocationManagerRoutine locationManagerRoutineProxy]
  -[CLLocationManagerRoutine delegate]
  -[CLLocationManagerRoutine stopUpdatingLocation]
  -[CLLocationManagerRoutine dealloc]
  -[CLLocationManagerRoutine startUpdatingLocation]
  -[CLLocationManagerRoutine initWithQueue:]
  -[CLLocationManagerRoutine setLocationManagerRoutineProxy:]
  -[CLLocationManagerRoutine init]


CLEmergencyEnablementAssertion : CLAssertion
  // class methods
  +[CLEmergencyEnablementAssertion newAssertionForBundleIdentifier:withReason:]
  +[CLEmergencyEnablementAssertion newAssertionForBundle:withReason:]
  +[CLEmergencyEnablementAssertion newAssertionWithReason:]


CLFindMyAccessoryConnectionMaterial : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *address
 @property  NSData *ltk
 @property  NSNumber *primaryIndex
 @property  NSNumber *secondaryIndex

  // class methods
  +[CLFindMyAccessoryConnectionMaterial supportsSecureCoding]

  // instance methods
  -[CLFindMyAccessoryConnectionMaterial encodeWithCoder:]
  -[CLFindMyAccessoryConnectionMaterial dealloc]
  -[CLFindMyAccessoryConnectionMaterial address]
  -[CLFindMyAccessoryConnectionMaterial copyWithZone:]
  -[CLFindMyAccessoryConnectionMaterial isEqual:]
  -[CLFindMyAccessoryConnectionMaterial init]
  -[CLFindMyAccessoryConnectionMaterial initWithCoder:]
  -[CLFindMyAccessoryConnectionMaterial initWithAddress:ltk:]
  -[CLFindMyAccessoryConnectionMaterial initWithAddress:ltk:primaryIndex:secondaryIndex:]
  -[CLFindMyAccessoryConnectionMaterial isEqualToMaterial:]
  -[CLFindMyAccessoryConnectionMaterial dictionaryDescription]
  -[CLFindMyAccessoryConnectionMaterial ltk]
  -[CLFindMyAccessoryConnectionMaterial primaryIndex]
  -[CLFindMyAccessoryConnectionMaterial secondaryIndex]


CLLocationManagerStateTracker : CLStateTracker
 @property  double distanceFilter
 @property  double desiredAccuracy
 @property  BOOL updatingLocation
 @property  BOOL requestingLocation
 @property  BOOL requestingRanging
 @property  BOOL updatingRanging
 @property  BOOL updatingHeading
 @property  double headingFilter
 @property  BOOL allowsLocationPrompts
 @property  BOOL allowsAlteredAccessoryLocations
 @property  BOOL dynamicAccuracyReductionEnabled
 @property  BOOL previousAuthorizationStatusValid
 @property  int previousAuthorizationStatus
 @property  BOOL limitsPrecision
 @property  long long activityType
 @property  int pausesLocationUpdatesAutomatically
 @property  BOOL paused
 @property  BOOL allowsBackgroundLocationUpdates
 @property  BOOL showsBackgroundLocationIndicator
 @property  BOOL allowsMapCorrection
 @property  BOOL batchingLocation
 @property  BOOL updatingVehicleSpeed
 @property  BOOL updatingVehicleHeading
 @property  BOOL matchInfoEnabled
 @property  BOOL groundAltitudeEnabled
 @property  BOOL fusionInfoEnabled
 @property  BOOL courtesyPromptNeeded
 @property  BOOL isAuthorizedForWidgetUpdates

  // class methods
  +[CLLocationManagerStateTracker trackerStateTypeName]
  +[CLLocationManagerStateTracker trackerStateSize]

  // instance methods
  -[CLLocationManagerStateTracker distanceFilter]
  -[CLLocationManagerStateTracker updateState:]
  -[CLLocationManagerStateTracker setFusionInfoEnabled:]
  -[CLLocationManagerStateTracker fusionInfoEnabled]
  -[CLLocationManagerStateTracker matchInfoEnabled]
  -[CLLocationManagerStateTracker desiredAccuracy]
  -[CLLocationManagerStateTracker setPausesLocationUpdatesAutomatically:]
  -[CLLocationManagerStateTracker dynamicAccuracyReductionEnabled]
  -[CLLocationManagerStateTracker setUpdatingHeading:]
  -[CLLocationManagerStateTracker identifier]
  -[CLLocationManagerStateTracker setAllowsMapCorrection:]
  -[CLLocationManagerStateTracker updatingHeading]
  -[CLLocationManagerStateTracker setActivityType:]
  -[CLLocationManagerStateTracker allowsAlteredAccessoryLocations]
  -[CLLocationManagerStateTracker initInSilo:withIdentifier:state:]
  -[CLLocationManagerStateTracker setAllowsBackgroundLocationUpdates:]
  -[CLLocationManagerStateTracker updatingLocation]
  -[CLLocationManagerStateTracker setPreviousAuthorizationStatusValid:]
  -[CLLocationManagerStateTracker allowsBackgroundLocationUpdates]
  -[CLLocationManagerStateTracker initInSilo:withIdentifier:]
  -[CLLocationManagerStateTracker setDistanceFilter:]
  -[CLLocationManagerStateTracker initWithQueue:identifier:state:]
  -[CLLocationManagerStateTracker dumpState:withSize:hints:]
  -[CLLocationManagerStateTracker updatingVehicleHeading]
  -[CLLocationManagerStateTracker setRequestingRanging:]
  -[CLLocationManagerStateTracker setPaused:]
  -[CLLocationManagerStateTracker setDesiredAccuracy:]
  -[CLLocationManagerStateTracker dealloc]
  -[CLLocationManagerStateTracker limitsPrecision]
  -[CLLocationManagerStateTracker allowsLocationPrompts]
  -[CLLocationManagerStateTracker activityType]
  -[CLLocationManagerStateTracker setPreviousAuthorizationStatus:]
  -[CLLocationManagerStateTracker setGroundAltitudeEnabled:]
  -[CLLocationManagerStateTracker showsBackgroundLocationIndicator]
  -[CLLocationManagerStateTracker previousAuthorizationStatus]
  -[CLLocationManagerStateTracker paused]
  -[CLLocationManagerStateTracker setShowsBackgroundLocationIndicator:]
  -[CLLocationManagerStateTracker groundAltitudeEnabled]
  -[CLLocationManagerStateTracker updatingVehicleSpeed]
  -[CLLocationManagerStateTracker isAuthorizedForWidgetUpdates]
  -[CLLocationManagerStateTracker setDynamicAccuracyReductionEnabled:]
  -[CLLocationManagerStateTracker batchingLocation]
  -[CLLocationManagerStateTracker setMatchInfoEnabled:]
  -[CLLocationManagerStateTracker setUpdatingVehicleHeading:]
  -[CLLocationManagerStateTracker setRequestingLocation:]
  -[CLLocationManagerStateTracker allowsMapCorrection]
  -[CLLocationManagerStateTracker requestingRanging]
  -[CLLocationManagerStateTracker setUpdatingLocation:]
  -[CLLocationManagerStateTracker setCourtesyPromptNeeded:]
  -[CLLocationManagerStateTracker pausesLocationUpdatesAutomatically]
  -[CLLocationManagerStateTracker setHeadingFilter:]
  -[CLLocationManagerStateTracker headingFilter]
  -[CLLocationManagerStateTracker initWithQueue:identifier:]
  -[CLLocationManagerStateTracker setLimitsPrecision:]
  -[CLLocationManagerStateTracker previousAuthorizationStatusValid]
  -[CLLocationManagerStateTracker updatingRanging]
  -[CLLocationManagerStateTracker setAllowsAlteredAccessoryLocations:]
  -[CLLocationManagerStateTracker setAllowsLocationPrompts:]
  -[CLLocationManagerStateTracker courtesyPromptNeeded]
  -[CLLocationManagerStateTracker setUpdatingRanging:]
  -[CLLocationManagerStateTracker setUpdatingVehicleSpeed:]
  -[CLLocationManagerStateTracker setBatchingLocation:]
  -[CLLocationManagerStateTracker requestingLocation]
  -[CLLocationManagerStateTracker setIsAuthorizedForWidgetUpdates:]


CLLocationManagerInternal : NSObject
 @property  NSMutableSet *rangedRegions
 @property  NSMutableSet *rangedConstraints
 @property  <CLLocationManagerDelegate> *delegate
 @property  CLLocationManager *manager

  // instance methods
  -[CLLocationManagerInternal setPausesLocationUpdatesAutomatically:]
  -[CLLocationManagerInternal setAllowsBackgroundLocationUpdates:]
  -[CLLocationManagerInternal setManager:]
  -[CLLocationManagerInternal setDelegate:]
  -[CLLocationManagerInternal rangedRegions]
  -[CLLocationManagerInternal allowsBackgroundLocationUpdates]
  -[CLLocationManagerInternal initWithInfo:bundleIdentifier:bundlePath:websiteIdentifier:delegate:silo:]
  -[CLLocationManagerInternal delegate]
  -[CLLocationManagerInternal dealloc]
  -[CLLocationManagerInternal .cxx_destruct]
  -[CLLocationManagerInternal showsBackgroundLocationIndicator]
  -[CLLocationManagerInternal setShowsBackgroundLocationIndicator:]
  -[CLLocationManagerInternal rangedConstraints]
  -[CLLocationManagerInternal cancelLingeringRangingRequest]
  -[CLLocationManagerInternal PausesLocationUpdatesAutomatically]
  -[CLLocationManagerInternal manager]
  -[CLLocationManagerInternal performCourtesyPromptIfNeeded]
  -[CLLocationManagerInternal invalidate]
  -[CLLocationManagerInternal hasLingeringRangingRequest]
  -[CLLocationManagerInternal stopUpdatingLocationAutoPaused]
  -[CLLocationManagerInternal cancelRangingRequest]
  -[CLLocationManagerInternal cancelLocationRequest]


CLLocationManager : NSObject
 @property  BOOL matchInfoEnabled
 @property  BOOL _groundAltitudeEnabled
 @property  BOOL privateMode
 @property  BOOL locationServicesAvailable
 @property  BOOL locationServicesApproved
 @property  double expectedGpsUpdateInterval
 @property  BOOL supportInfo
 @property  ^{__CLClient=} internalClient
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  BOOL dynamicAccuracyReductionEnabled
 @property  BOOL allowsAlteredAccessoryLocations
 @property  BOOL _limitsPrecision
 @property  int _authorizationStatus
 @property  BOOL authorizedForPreciseLocation
 @property  int authorizationStatus
 @property  long long accuracyAuthorization
 @property  BOOL authorizedForWidgetUpdates
 @property  <CLLocationManagerDelegate> *delegate
 @property  BOOL locationServicesEnabled
 @property  NSString *purpose
 @property  long long activityType
 @property  double distanceFilter
 @property  double desiredAccuracy
 @property  BOOL pausesLocationUpdatesAutomatically
 @property  BOOL allowsBackgroundLocationUpdates
 @property  BOOL showsBackgroundLocationIndicator
 @property  CLLocation *location
 @property  BOOL headingAvailable
 @property  double headingFilter
 @property  int headingOrientation
 @property  CLHeading *heading
 @property  double maximumRegionMonitoringDistance
 @property  NSSet *monitoredRegions
 @property  NSSet *rangedRegions
 @property  NSSet *rangedBeaconConstraints

  // class methods
  +[CLLocationManager _authorizationStatus]
  +[CLLocationManager setAuthorizationPromptMapDisplayEnabled:]
  +[CLLocationManager authorizationStatus]
  +[CLLocationManager shutdownDaemon]
  +[CLLocationManager locationServicesEnabled]
  +[CLLocationManager sharedManager]
  +[CLLocationManager authorizationStatusForBundle:]
  +[CLLocationManager headingAvailable]
  +[CLLocationManager authorizationStatusForBundleIdentifier:]
  +[CLLocationManager setLocationServicesEnabled:]
  +[CLLocationManager updateCorrectiveCompensationChoiceForOutstandingPrompt:]
  +[CLLocationManager mapCorrectionAvailable]
  +[CLLocationManager resetLocationAuthorizationForBundleId:orBundlePath:]
  +[CLLocationManager locationServicesEnabled:]
  +[CLLocationManager authorizationPromptMapDisplayEnabled]
  +[CLLocationManager significantLocationChangeMonitoringAvailable]
  +[CLLocationManager isMonitoringAvailableForClass:]
  +[CLLocationManager regionMonitoringAvailable]
  +[CLLocationManager regionMonitoringEnabled]
  +[CLLocationManager isRangingAvailable]
  +[CLLocationManager _checkAndExerciseAuthorizationForBundleID:error:]
  +[CLLocationManager _checkAndExerciseAuthorizationForBundle:error:]
  +[CLLocationManager deferredLocationUpdatesAvailable]
  +[CLLocationManager isPeerRangingAvailable]
  +[CLLocationManager metadataForHomekitAccessoryControlEventWithUUID:stateString:serviceUUID:serviceType:characteristicType:serviceGroupUUID:source:roomUUID:]
  +[CLLocationManager metadataForHomekitActionSetEventWithUUID:name:type:clientName:source:homeName:]
  +[CLLocationManager metadataForMicroLocationTruthTagEventWithTagUUID:]
  +[CLLocationManager activeLocationClientsWithInfo]
  +[CLLocationManager userLocationClientsWithInfo]
  +[CLLocationManager _archivedAuthorizationDecisionsWithError:]
  +[CLLocationManager _applyArchivedAuthorizationDecisions:]
  +[CLLocationManager _authorizationStatusForBundleIdentifier:bundlePath:]
  +[CLLocationManager authorizationStatusForBundlePath:]
  +[CLLocationManager setAuthorizationStatus:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatus:forBundlePath:]
  +[CLLocationManager setAuthorizationStatus:forBundle:]
  +[CLLocationManager setAuthorizationStatusByType:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatusByType:forBundlePath:]
  +[CLLocationManager setAuthorizationStatusByType:forBundle:]
  +[CLLocationManager setAuthorizationStatusByType:withCorrectiveCompensation:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatusByType:withCorrectiveCompensation:forBundle:]
  +[CLLocationManager setIncidentalUseMode:forBundle:]
  +[CLLocationManager setIncidentalUseMode:forBundleIdentifier:]
  +[CLLocationManager getIncidentalUseMode:forBundle:]
  +[CLLocationManager getIncidentalUseMode:forBundleIdentifier:]
  +[CLLocationManager setLocationButtonUseMode:forBundle:]
  +[CLLocationManager setLocationButtonUseMode:forBundleIdentifier:]
  +[CLLocationManager registerCircularInterestZoneWithId:latitue:longitude:radius:serviceMaskOperator:provenanceType:forBundleIdentifier:error:]
  +[CLLocationManager registerCircularInterestZoneWithId:latitue:longitude:radius:serviceMaskOperator:provenanceType:forBundle:error:]
  +[CLLocationManager registerPhenolicInterestZoneWithId:phenolicLocation:serviceMaskOperator:provenanceType:forBundleIdentifier:error:]
  +[CLLocationManager registerPhenolicInterestZoneWithId:phenolicLocation:serviceMaskOperator:provenanceType:forBundle:error:]
  +[CLLocationManager setAuthorizationStatus:withCorrectiveCompensation:forInterestZoneWithId:registeredForBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatus:withCorrectiveCompensation:forInterestZoneWithId:registeredForBundle:]
  +[CLLocationManager setRelevance:forInterestZoneWithId:registeredForBundleIdentifier:error:]
  +[CLLocationManager setRelevance:forInterestZoneWithId:registeredForBundle:error:]
  +[CLLocationManager deleteInterestZoneWithId:registeredForBundleIdentifier:error:]
  +[CLLocationManager deleteInterestZoneWithId:registeredForBundle:error:]
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundleIdentifier:]
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundle:]
  +[CLLocationManager grantTemporaryAuthorizationUsingLocationButtonToClientWithAuditToken:voiceInteractionEnabled:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forBundleIdentifier:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forBundle:]
  +[CLLocationManager setDefaultEffectiveBundleIdentifier:]
  +[CLLocationManager setDefaultEffectiveBundle:]
  +[CLLocationManager dumpLogsWithMessage:]
  +[CLLocationManager dumpDiagnosticFilesWithHandler:]
  +[CLLocationManager bundleSupported:]
  +[CLLocationManager advertiseAsBeacon:withPower:]
  +[CLLocationManager _getClientTransientAuthorizationInfoForBundleId:error:]
  +[CLLocationManager _getClientTransientAuthorizationInfoForBundlePath:error:]
  +[CLLocationManager _setClientTransientAuthorizationInfoForBundleId:data:]
  +[CLLocationManager _setClientTransientAuthorizationInfoForBundlePath:data:]
  +[CLLocationManager setStatusBarIconEnabled:forLocationEntityClass:]
  +[CLLocationManager isStatusBarIconEnabledForLocationEntityClass:]
  +[CLLocationManager primaryEntityClassForLocationDictionary:]
  +[CLLocationManager entityClassesForLocationDictionary:]
  +[CLLocationManager isLocationActiveForLocationDictionary:]
  +[CLLocationManager activeLocationServiceTypesForLocationDictionary:]
  +[CLLocationManager dateLocationLastUsedForLocationDictionary:]
  +[CLLocationManager hasUsedBackgroundLocationServices:]
  +[CLLocationManager isEntityAuthorizedForLocationDictionary:]
  +[CLLocationManager entityAuthorizationForLocationDictionary:]
  +[CLLocationManager allowableAuthorizationForLocationDictionary:]
  +[CLLocationManager correctiveCompensationStatusForLocationDictionary:]
  +[CLLocationManager incidentalUseModeForLocationDictionary:]
  +[CLLocationManager interestZonesIdentifierListForLocationDictionary:]
  +[CLLocationManager interestZoneDictionaryIdentifiedById:forLocationDictionary:]
  +[CLLocationManager isInterestZoneReleventForLocationDictionary:]
  +[CLLocationManager setEntityAuthorized:forLocationDictionary:]
  +[CLLocationManager setEntityAuthorization:forLocationDictionary:]
  +[CLLocationManager setEntityAuthorization:withCorrectiveCompensation:forLocationDictionary:]
  +[CLLocationManager setEntityAuthorization:withCorrectiveCompensationType:forLocationDictionary:]
  +[CLLocationManager backgroundIndicatorEnabledForLocationDictionary:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forLocationDictionary:]

  // instance methods
  -[CLLocationManager distanceFilter]
  -[CLLocationManager dismissHeadingCalibrationDisplay]
  -[CLLocationManager requestWhenInUseAuthorization]
  -[CLLocationManager requestWhenInUseAuthorizationWithPrompt]
  -[CLLocationManager setLocationServicesPreferencesDialogEnabled:]
  -[CLLocationManager supportInfo]
  -[CLLocationManager accuracyAuthorization]
  -[CLLocationManager isLocationServicesPreferencesDialogEnabled]
  -[CLLocationManager desiredAccuracy]
  -[CLLocationManager stopUpdatingVehicleHeading]
  -[CLLocationManager setPausesLocationUpdatesAutomatically:]
  -[CLLocationManager onClientEventPlaceInferenceError:]
  -[CLLocationManager setPurpose:]
  -[CLLocationManager onClientEventRegionState:]
  -[CLLocationManager startUpdatingHeading]
  -[CLLocationManager initWithWebsiteIdentifier:]
  -[CLLocationManager startTranscriptSessionWithCompletion:]
  -[CLLocationManager startMonitoringVisits]
  -[CLLocationManager setHeadingOrientation:]
  -[CLLocationManager stopAppStatusUpdates]
  -[CLLocationManager heading]
  -[CLLocationManager _requestTemporaryFullAccuracyWithUsageDescription:completion:]
  -[CLLocationManager setActivityType:]
  -[CLLocationManager allowsAlteredAccessoryLocations]
  -[CLLocationManager onClientEventRegionResponseDelayed:]
  -[CLLocationManager _limitsPrecision]
  -[CLLocationManager respondToRangingFromPeers:timeoutSeconds:]
  -[CLLocationManager locationServicesAvailable]
  -[CLLocationManager requestLocation]
  -[CLLocationManager _updateVIOEstimation:]
  -[CLLocationManager setAllowsBackgroundLocationUpdates:]
  -[CLLocationManager stopRangingFromPeers:]
  -[CLLocationManager resumeLocationUpdates]
  -[CLLocationManager _authorizationStatus]
  -[CLLocationManager setDelegate:]
  -[CLLocationManager rangedRegions]
  -[CLLocationManager startRangingFromPeers:]
  -[CLLocationManager isDynamicAccuracyReductionEnabled]
  -[CLLocationManager maximumRegionMonitoringDistance]
  -[CLLocationManager requestMicroLocationRecordingScanWithAdditionalInformation:]
  -[CLLocationManager stopMonitoringLocationPushes]
  -[CLLocationManager allowsBackgroundLocationUpdates]
  -[CLLocationManager setDistanceFilter:]
  -[CLLocationManager startMonitoringLocationPushesWithCompletion:]
  -[CLLocationManager setSupportInfo:]
  -[CLLocationManager allowDeferredLocationUpdatesUntilTraveled:timeout:]
  -[CLLocationManager onClientEventHeading:]
  -[CLLocationManager onClientEventLocationUnavailable:]
  -[CLLocationManager privateMode]
  -[CLLocationManager markAsHavingReceivedLocation]
  -[CLLocationManager _fetchContinuousPlaceInferencesWithFidelityPolicy:handler:]
  -[CLLocationManager delegate]
  -[CLLocationManager stopTechStatusUpdates]
  -[CLLocationManager stopUpdatingLocation]
  -[CLLocationManager _groundAltitudeAtLocation:]
  -[CLLocationManager purpose]
  -[CLLocationManager registerAsLocationClient]
  -[CLLocationManager onDidBecomeActive:]
  -[CLLocationManager requestTemporaryFullAccuracyAuthorizationWithPurposeKey:completion:]
  -[CLLocationManager setDesiredAccuracy:]
  -[CLLocationManager isMatchInfoEnabled]
  -[CLLocationManager dealloc]
  -[CLLocationManager requestTemporaryPreciseLocationAuthorizationWithPurposeKey:completion:]
  -[CLLocationManager donateMicroLocationTruthTagWithTagUUID:correspondingToTriggerUUID:handler:]
  -[CLLocationManager initWithWebsiteIdentifier:delegate:onQueue:]
  -[CLLocationManager startRangingToPeers:intervalSeconds:]
  -[CLLocationManager initWithEffectiveBundleIdentifier:]
  -[CLLocationManager startUpdatingVehicleHeading]
  -[CLLocationManager onClientEventRangingError:]
  -[CLLocationManager onClientEventSignificantLocationVisitStateRequest:]
  -[CLLocationManager rangedBeaconConstraints]
  -[CLLocationManager activityType]
  -[CLLocationManager authorizationStatus]
  -[CLLocationManager onClientEventRegionError:]
  -[CLLocationManager onClientEventAutopauseStatus:]
  -[CLLocationManager setPrivateMode:]
  -[CLLocationManager startUpdatingVehicleSpeed]
  -[CLLocationManager showsBackgroundLocationIndicator]
  -[CLLocationManager internalClient]
  -[CLLocationManager onClientEventVehicleSpeed:]
  -[CLLocationManager onClientEventPeerRangingError:]
  -[CLLocationManager stopUpdatingVehicleSpeed]
  -[CLLocationManager stopMonitoringVisits]
  -[CLLocationManager startMonitoringForRegion:desiredAccuracy:]
  -[CLLocationManager expectedGpsUpdateInterval]
  -[CLLocationManager initWithEffectiveBundleIdentifier:bundlePath:websiteIdentifier:delegate:silo:]
  -[CLLocationManager donateMicroLocationTruthTagWithTagUUID:forRecordingEventsBetweenDate:andDate:handler:]
  -[CLLocationManager setShowsBackgroundLocationIndicator:]
  -[CLLocationManager initWithEffectiveBundlePath:limitingBundleIdentifier:delegate:onQueue:]
  -[CLLocationManager onClientEventError:]
  -[CLLocationManager onClientEventSignificantLocationVisit:]
  -[CLLocationManager stopUpdatingHeading]
  -[CLLocationManager initWithEffectiveBundle:delegate:onQueue:]
  -[CLLocationManager stopRangingToPeers:]
  -[CLLocationManager monitoredRegions]
  -[CLLocationManager purgeMicroLocationSemiSupervisedData]
  -[CLLocationManager _fetchPlaceInferencesWithFidelityPolicy:handler:]
  -[CLLocationManager endTranscriptSession]
  -[CLLocationManager initWithIdentifier:]
  -[CLLocationManager initWithEffectiveBundle:limitingBundleIdentifier:delegate:onQueue:]
  -[CLLocationManager headingOrientation]
  -[CLLocationManager onClientEventPeerRangingRequestProcessed:]
  -[CLLocationManager startMonitoringForRegion:]
  -[CLLocationManager onRangingRequestTimeout]
  -[CLLocationManager isAuthorizedForWidgetUpdates]
  -[CLLocationManager setDynamicAccuracyReductionEnabled:]
  -[CLLocationManager _setGroundAltitudeEnabled:]
  -[CLLocationManager startRangingBeaconsSatisfyingConstraint:]
  -[CLLocationManager stopMonitoringForRegion:]
  -[CLLocationManager _requestTemporaryFullAccuracyWithUsageDescription:]
  -[CLLocationManager onClientEventBatch:]
  -[CLLocationManager requestRangingToPeers:timeoutSeconds:]
  -[CLLocationManager initWithEffectiveBundle:]
  -[CLLocationManager _updateVLLocalizationResult:]
  -[CLLocationManager requestCurrentMicroLocationWithAdditionalInformation:]
  -[CLLocationManager setMatchInfoEnabled:]
  -[CLLocationManager locationServicesEnabled]
  -[CLLocationManager onClientEventPeerRanging:]
  -[CLLocationManager startUpdatingLocation]
  -[CLLocationManager initWithEffectiveBundlePath:delegate:onQueue:]
  -[CLLocationManager appsUsingLocation]
  -[CLLocationManager setIsActuallyAWatchKitExtension:]
  -[CLLocationManager onClientEventAuthStatus:]
  -[CLLocationManager initWithEffectiveBundlePath:]
  -[CLLocationManager onLocationRequestTimeout]
  -[CLLocationManager disallowDeferredLocationUpdates]
  -[CLLocationManager onClientEventHeadingCalibration:]
  -[CLLocationManager _isGroundAltitudeEnabled]
  -[CLLocationManager requestAlwaysAuthorization]
  -[CLLocationManager _requestVisitState]
  -[CLLocationManager startTranscriptSession]
  -[CLLocationManager requestHistoricalLocationsWithPurposeKey:sampleCount:completionHandler:]
  -[CLLocationManager appLocationInfo]
  -[CLLocationManager onClientEventRegionSetupCompleted:]
  -[CLLocationManager pauseLocationUpdates:]
  -[CLLocationManager requestTemporaryPreciseLocationAuthorizationWithPurposeKey:]
  -[CLLocationManager startRangingBeaconsInRegion:]
  -[CLLocationManager requestMicroLocationRecordingScanWithAdditionalInformation:shouldForceRecording:]
  -[CLLocationManager stopMonitoringSignificantLocationChanges]
  -[CLLocationManager callPlaceInferenceHandlerWithResult:error:]
  -[CLLocationManager pausesLocationUpdatesAutomatically]
  -[CLLocationManager endTranscriptSessionWithCompletion:]
  -[CLLocationManager getMicroLocationInternalVersion]
  -[CLLocationManager setHeadingFilter:]
  -[CLLocationManager requestStateForRegion:]
  -[CLLocationManager headingFilter]
  -[CLLocationManager isAuthorizedForPreciseLocation]
  -[CLLocationManager stopRangingBeaconsSatisfyingConstraint:]
  -[CLLocationManager _fetchEstimatedLocationAtDate:handler:]
  -[CLLocationManager onClientEventInterrupted:]
  -[CLLocationManager initWithEffectiveBundleIdentifier:delegate:onQueue:]
  -[CLLocationManager startUpdatingLocationWithPrompt]
  -[CLLocationManager _isFusionInfoEnabled]
  -[CLLocationManager location]
  -[CLLocationManager headingAvailable]
  -[CLLocationManager onClientEventNoLocationWatchdog:]
  -[CLLocationManager _initWithDelegate:onQueue:]
  -[CLLocationManager fetchTranscriptLocationsWithRadius:sampleCount:center:completionHandler:]
  -[CLLocationManager resetApps]
  -[CLLocationManager _zAxisStatistics]
  -[CLLocationManager changeFencesStateMatchingHandoffTags:forDeviceID:completion:]
  -[CLLocationManager onClientEventPlaceInferenceResult:]
  -[CLLocationManager _startPlaceInferencesCommonLogic:handler:]
  -[CLLocationManager getRecordingTriggerUUIDAndRequestMicroLocationRecordingScanWithAdditionalInformation:shouldForceRecording:handler:]
  -[CLLocationManager appsUsingLocationWithDetails]
  -[CLLocationManager locationServicesApproved]
  -[CLLocationManager startTechStatusUpdates]
  -[CLLocationManager startAppStatusUpdates]
  -[CLLocationManager stopRangingBeaconsInRegion:]
  -[CLLocationManager setAllowsAlteredAccessoryLocations:]
  -[CLLocationManager _updateARSessionState:]
  -[CLLocationManager _startLeechingVisits]
  -[CLLocationManager _startMonitoringSignificantLocationChangesOfDistance:withPowerBudget:]
  -[CLLocationManager exportMicroLocationDatabaseTablesWithCompletion:]
  -[CLLocationManager _stopFetchingContinuousPlaceInferences]
  -[CLLocationManager requestTemporaryFullAccuracyAuthorizationWithPurposeKey:]
  -[CLLocationManager startMonitoringSignificantLocationChanges]
  -[CLLocationManager onClientEventVehicleHeading:]
  -[CLLocationManager onClientEventRanging:]
  -[CLLocationManager init]
  -[CLLocationManager onClientEventRegion:]
  -[CLLocationManager onClientEventLocation:forceMapMatching:type:]
  -[CLLocationManager onClientEvent:supportInfo:]
  -[CLLocationManager requestMicroLocationStaticSourcesStatisticsWithCompletion:]
  -[CLLocationManager _setFusionInfoEnabled:]
  -[CLLocationManager technologiesInUse]


_CLLocationGroundAltitude : NSObject <NSCopying, NSSecureCoding>
 @property  double estimate
 @property  double uncertainty
 @property  double undulation
 @property  int undulationModel
 @property  double altitude
 @property  BOOL isAltitudeWgs84Available
 @property  double altitudeWgs84
 @property  double uncertaintyWgs84

  // class methods
  +[_CLLocationGroundAltitude supportsSecureCoding]

  // instance methods
  -[_CLLocationGroundAltitude altitude]
  -[_CLLocationGroundAltitude initWithEstimate:uncertainty:undulation:undulationModel:]
  -[_CLLocationGroundAltitude uncertainty]
  -[_CLLocationGroundAltitude encodeWithCoder:]
  -[_CLLocationGroundAltitude estimate]
  -[_CLLocationGroundAltitude initWithEstimate:uncertainty:]
  -[_CLLocationGroundAltitude isAltitudeWgs84Available]
  -[_CLLocationGroundAltitude copyWithZone:]
  -[_CLLocationGroundAltitude uncertaintyWgs84]
  -[_CLLocationGroundAltitude undulationModel]
  -[_CLLocationGroundAltitude altitudeWgs84]
  -[_CLLocationGroundAltitude undulation]
  -[_CLLocationGroundAltitude initWithCoder:]


_CLLocationSmootherProxy : NSObject <CLLocationSmootherClientInterface>
 @property  NSXPCConnection *connection
 @property  <CLLocationSmootherDelegate> *delegate
 @property  CLLocationSmoother *locationManagerSmoother
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_CLLocationSmootherProxy createConnection]
  -[_CLLocationSmootherProxy setDelegate:]
  -[_CLLocationSmootherProxy delegate]
  -[_CLLocationSmootherProxy dealloc]
  -[_CLLocationSmootherProxy connection]
  -[_CLLocationSmootherProxy setConnection:]
  -[_CLLocationSmootherProxy didSmoothLocations:ofType:]
  -[_CLLocationSmootherProxy initWithCLLocationSmoother:]
  -[_CLLocationSmootherProxy locationManagerSmoother]
  -[_CLLocationSmootherProxy setLocationManagerSmoother:]


CLLocationSmoother : NSObject
 @property  _CLLocationSmootherProxy *locationManagerSmootherProxy
 @property  <CLLocationManagerDelegateInternal> *delegate

  // instance methods
  -[CLLocationSmoother setDelegate:]
  -[CLLocationSmoother delegate]
  -[CLLocationSmoother dealloc]
  -[CLLocationSmoother locationManagerSmootherProxy]
  -[CLLocationSmoother smoothLocations:]
  -[CLLocationSmoother smoothLocations:handler:]
  -[CLLocationSmoother smoothLocations:workoutActivityType:handler:]


CLFindMyAccessoryAccelerometerSlopeModeConfiguration : NSObject <NSSecureCoding>
 @property  float threshold
 @property  unsigned char sampleCount
 @property  unsigned char sampleRate

  // class methods
  +[CLFindMyAccessoryAccelerometerSlopeModeConfiguration supportsSecureCoding]
  +[CLFindMyAccessoryAccelerometerSlopeModeConfiguration minimumSampleCount]
  +[CLFindMyAccessoryAccelerometerSlopeModeConfiguration maximumSampleCount]
  +[CLFindMyAccessoryAccelerometerSlopeModeConfiguration minimumThreshold]
  +[CLFindMyAccessoryAccelerometerSlopeModeConfiguration maximumThreshold]

  // instance methods
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration threshold]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration encodeWithCoder:]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration setSampleCount:]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration sampleRate]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration sampleCount]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration setThreshold:]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration initWithCoder:]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration setSampleRate:]
  -[CLFindMyAccessoryAccelerometerSlopeModeConfiguration initWithThreshold:sampleCount:sampleRate:]


CLFindMyAccessoryAccelerometerOrientationModeConfiguration : NSObject <NSSecureCoding>
 @property  unsigned int threshold
 @property  unsigned short sleepDuration_ms

  // class methods
  +[CLFindMyAccessoryAccelerometerOrientationModeConfiguration supportsSecureCoding]

  // instance methods
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration threshold]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration encodeWithCoder:]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration setThreshold:]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration initWithCoder:]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration initWithThreshold:sleepDuration:]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration sleepDuration_ms]
  -[CLFindMyAccessoryAccelerometerOrientationModeConfiguration setSleepDuration_ms:]


CLGnssDisablementAssertion : NSObject
  // class methods
  +[CLGnssDisablementAssertion newAssertionForBundleIdentifier:withReason:callbackQueue:completionHandler:]
  +[CLGnssDisablementAssertion newAssertionForBundle:withReason:callbackQueue:completionHandler:]

  // instance methods
  -[CLGnssDisablementAssertion .cxx_construct]
  -[CLGnssDisablementAssertion dealloc]
  -[CLGnssDisablementAssertion .cxx_destruct]
  -[CLGnssDisablementAssertion invalidate]
  -[CLGnssDisablementAssertion initWithRegistrationMessageName:messagePayload:callbackQueue:completionHandler:]


CLLocationMatchInfoInternal : NSObject <NSCopying>
  // instance methods
  -[CLLocationMatchInfoInternal dealloc]
  -[CLLocationMatchInfoInternal initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]
  -[CLLocationMatchInfoInternal copyWithZone:]


CLLocationMatchInfo : NSObject <NSCopying, NSSecureCoding>
 @property  long long matchQuality
 @property  {CLLocationCoordinate2D=dd} matchCoordinate
 @property  double matchCourse
 @property  int matchFormOfWay
 @property  int matchRoadClass
 @property  BOOL matchShifted
 @property  NSData *matchDataArray

  // class methods
  +[CLLocationMatchInfo supportsSecureCoding]

  // instance methods
  -[CLLocationMatchInfo encodeWithCoder:]
  -[CLLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:]
  -[CLLocationMatchInfo matchCoordinate]
  -[CLLocationMatchInfo dealloc]
  -[CLLocationMatchInfo matchRoadClass]
  -[CLLocationMatchInfo matchCourse]
  -[CLLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]
  -[CLLocationMatchInfo matchQuality]
  -[CLLocationMatchInfo matchDataArray]
  -[CLLocationMatchInfo isMatchShifted]
  -[CLLocationMatchInfo shortDescription]
  -[CLLocationMatchInfo copyWithZone:]
  -[CLLocationMatchInfo matchFormOfWay]
  -[CLLocationMatchInfo initWithCoder:]


CLFindMyAccessoryRangingManager : NSObject
 @property  <CLFindMyAccessoryRangingManagerDelegate> *delegate

  // instance methods
  -[CLFindMyAccessoryRangingManager initWithDelegate:delegateQueue:]
  -[CLFindMyAccessoryRangingManager setDelegate:]
  -[CLFindMyAccessoryRangingManager delegate]
  -[CLFindMyAccessoryRangingManager .cxx_construct]
  -[CLFindMyAccessoryRangingManager .cxx_destruct]
  -[CLFindMyAccessoryRangingManager handleMessage:]
  -[CLFindMyAccessoryRangingManager handleInterruption]
  -[CLFindMyAccessoryRangingManager init]
  -[CLFindMyAccessoryRangingManager connectToDevice:]
  -[CLFindMyAccessoryRangingManager disconnectFromDevice:]
  -[CLFindMyAccessoryRangingManager initRoseWithParameters:onDevice:]
  -[CLFindMyAccessoryRangingManager stopRoseWithParameters:onDevice:]
  -[CLFindMyAccessoryRangingManager setRoseRangingParameters:onDevice:]
  -[CLFindMyAccessoryRangingManager prepareForStartRangingOnDevice:]
  -[CLFindMyAccessoryRangingManager startRangingWithParameters:onDevice:]
  -[CLFindMyAccessoryRangingManager stopRangingOnDevice:]
  -[CLFindMyAccessoryRangingManager startEventCounterOnDevice:]
  -[CLFindMyAccessoryRangingManager stopEventCounterOnDevice:]
  -[CLFindMyAccessoryRangingManager fetchFirmwareVersionFromDevice:]


CLLocationPushServiceExtensionHostContext : CLLocationPushServiceExtensionContext <CLLocationPushServiceExtensionHostXPCInterface>

CLFindMyAccessoryManager : NSObject
 @property  <CLFindMyAccessoryManagerDelegate> *delegate

  // class methods
  +[CLFindMyAccessoryManager errorFromFragmentationStatus:]
  +[CLFindMyAccessoryManager checkAvailabilityForPairedOwnerInformationControlPointMessages:messageName:]

  // instance methods
  -[CLFindMyAccessoryManager sendMessage:]
  -[CLFindMyAccessoryManager initWithDelegate:delegateQueue:]
  -[CLFindMyAccessoryManager setDelegate:]
  -[CLFindMyAccessoryManager delegate]
  -[CLFindMyAccessoryManager .cxx_construct]
  -[CLFindMyAccessoryManager dealloc]
  -[CLFindMyAccessoryManager .cxx_destruct]
  -[CLFindMyAccessoryManager handleMessage:]
  -[CLFindMyAccessoryManager handleInterruption]
  -[CLFindMyAccessoryManager init]
  -[CLFindMyAccessoryManager stopRangingOnDevice:]
  -[CLFindMyAccessoryManager fetchFirmwareVersionFromDevice:]
  -[CLFindMyAccessoryManager initAccumulator]
  -[CLFindMyAccessoryManager sendMessage:withPayload:]
  -[CLFindMyAccessoryManager connectDevice:]
  -[CLFindMyAccessoryManager disconnectDevice:]
  -[CLFindMyAccessoryManager fetchConnectionStateForDevice:]
  -[CLFindMyAccessoryManager startPlayingSoundSequence:onDevice:]
  -[CLFindMyAccessoryManager startPlayingUnauthorizedSoundOnDevice:]
  -[CLFindMyAccessoryManager startPlayingUnauthorizedSoundSequence:onDevice:]
  -[CLFindMyAccessoryManager stopPlayingSoundOnDevice:]
  -[CLFindMyAccessoryManager stopPlayingUnauthorizedSoundOnDevice:]
  -[CLFindMyAccessoryManager getMultiStatusFromDevice:]
  -[CLFindMyAccessoryManager getMultiPartStatusFromDevice:]
  -[CLFindMyAccessoryManager dumpLogDataOfType:fromDevice:]
  -[CLFindMyAccessoryManager induceCrashOnDevice:]
  -[CLFindMyAccessoryManager unpairFromDevice:]
  -[CLFindMyAccessoryManager unpairFromDeviceWithAddress:]
  -[CLFindMyAccessoryManager setNearOwnerTimeout:onDevice:]
  -[CLFindMyAccessoryManager setDeviceType:onDevice:]
  -[CLFindMyAccessoryManager setObfuscatedIdentifier:onDevice:]
  -[CLFindMyAccessoryManager setWildConfiguration:onDevice:]
  -[CLFindMyAccessoryManager rollWildKeyOnDevice:]
  -[CLFindMyAccessoryManager setKeyRollInterval:onDevice:]
  -[CLFindMyAccessoryManager setBatteryStatus:forDevice:]
  -[CLFindMyAccessoryManager fetchBatteryStatusForDevice:]
  -[CLFindMyAccessoryManager fetchUserStatsWithPersistence:fromDevice:]
  -[CLFindMyAccessoryManager scanForNearbyOwner]
  -[CLFindMyAccessoryManager scanForHELE]
  -[CLFindMyAccessoryManager scanForNearbyDevicesLong]
  -[CLFindMyAccessoryManager stopScanForNearbyDevicesLong]
  -[CLFindMyAccessoryManager setAccelerometerSlopeModeConfiguration:forDevice:]
  -[CLFindMyAccessoryManager fetchAccelerometerSlopeModeConfigurationForDevice:]
  -[CLFindMyAccessoryManager setAccelerometerOrientationModeConfiguration:forDevice:]
  -[CLFindMyAccessoryManager fetchAccelerometerOrientationModeConfigurationForDevice:]
  -[CLFindMyAccessoryManager setUnauthorizedPlaySoundRateLimit:forDevice:]
  -[CLFindMyAccessoryManager fetchTxPower:]
  -[CLFindMyAccessoryManager fetchTxPowerFromDevice:asOwner:]
  -[CLFindMyAccessoryManager startAggressiveAdvertisingOnDevice:withTimeout:]
  -[CLFindMyAccessoryManager stopAggressiveAdvertisingOnDevice:]
  -[CLFindMyAccessoryManager startUnauthorizedAggressiveAdvertisingOnDevice:]
  -[CLFindMyAccessoryManager setHawkeyeTestMode:forDevice:]
  -[CLFindMyAccessoryManager setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:separatedUTBackoffTimeoutSeconds:forDevice:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISProductData:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISManufacturerName:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISModelName:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISModelColorCode:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISAccessoryCategory:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISAccessoryCapabilities:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISFindMyVersion:]
  -[CLFindMyAccessoryManager fetchHawkeyeAISBatteryType:]
  -[CLFindMyAccessoryManager fetchHawkeyeSerialNumber:]
  -[CLFindMyAccessoryManager fetchHawkeyeCurrentPrimaryKey:]
  -[CLFindMyAccessoryManager fetchHawkeyeiCloudIdentifier:]
  -[CLFindMyAccessoryManager startMonitoringForAvengerAdvertisementsForBTFinding]
  -[CLFindMyAccessoryManager stopMonitoringForAvengerAdvertisementsForBTFinding]
  -[CLFindMyAccessoryManager performAggressiveScanForSeparationAlerts]
  -[CLFindMyAccessoryManager performLongAggressiveScanForSeparationAlerts]
  -[CLFindMyAccessoryManager stopLongAggressiveScanForSeparationAlerts]
  -[CLFindMyAccessoryManager performAggressiveScanForTrackingAvoidance]
  -[CLFindMyAccessoryManager performHELEScanForTrackingAvoidance]
  -[CLFindMyAccessoryManager performAggressiveScanForDurianService]
  -[CLFindMyAccessoryManager fetchStatusOfUTEnablementRequirements]
  -[CLFindMyAccessoryManager initRangingOnDevice:macAddress:]
  -[CLFindMyAccessoryManager deinitRangingOnDevice:]
  -[CLFindMyAccessoryManager configureRangingOnDevice:macAddress:countryCode:uwbChannel:acqPreamble:trackingPreamble:interval:]
  -[CLFindMyAccessoryManager prepareRangingOnDevice:]
  -[CLFindMyAccessoryManager startRangingOnDevice:targetEventCounter:]
  -[CLFindMyAccessoryManager startEventCounterForDevice:]
  -[CLFindMyAccessoryManager stopEventCounterForDevice:]


CLRegulatoryConfig : NSObject
  // instance methods
  -[CLRegulatoryConfig addConfigForIsoList:config:error:]
  -[CLRegulatoryConfig initWithQueue:defaultConfig:]
  -[CLRegulatoryConfig fetchInfoForLocation:withReply:]
  -[CLRegulatoryConfig .cxx_construct]
  -[CLRegulatoryConfig .cxx_destruct]
  -[CLRegulatoryConfig addConfigForRegionList:config:error:]
  -[CLRegulatoryConfig fetchConfigForLocation:withReply:]
  -[CLRegulatoryConfig setExtendedBorderDetection:withExtendedDistance:]


CLClientTypesPrivate : NSObject
  // class methods
  +[CLClientTypesPrivate defaultCLClientLocationPrivate]


CLReductiveFilterSuite : NSObject
  // class methods
  +[CLReductiveFilterSuite rangeForReductiveFilterOptions:]
  +[CLReductiveFilterSuite rangeForTransmitPower:]
  +[CLReductiveFilterSuite filterOutliers:]
  +[CLReductiveFilterSuite filterOutliers:options:]
  +[CLReductiveFilterSuite deriveLocationFromLocations:]
  +[CLReductiveFilterSuite deriveLocationFromLocations:options:]
  +[CLReductiveFilterSuite applyFilterToLocationObservations:options:]
  +[CLReductiveFilterSuite applyFilterToLocationTrace:options:]


CLHeadingInternal : NSObject <NSCopying>
  // instance methods
  -[CLHeadingInternal initWithClientHeading:]
  -[CLHeadingInternal copyWithZone:]


CLHeading : NSObject <NSCopying, NSSecureCoding>
 @property  double magneticHeading
 @property  double trueHeading
 @property  double headingAccuracy
 @property  double x
 @property  double y
 @property  double z
 @property  NSDate *timestamp

  // class methods
  +[CLHeading supportsSecureCoding]

  // instance methods
  -[CLHeading z]
  -[CLHeading x]
  -[CLHeading y]
  -[CLHeading encodeWithCoder:]
  -[CLHeading dealloc]
  -[CLHeading initWithClientHeading:]
  -[CLHeading shortDescription]
  -[CLHeading copyWithZone:]
  -[CLHeading timestamp]
  -[CLHeading headingAccuracy]
  -[CLHeading initWithCoder:]
  -[CLHeading magneticHeading]
  -[CLHeading trueHeading]


CLLocationGnssOdometerInfo : NSObject <NSCopying, NSSecureCoding>
 @property  double odometer
 @property  double deltaDistance
 @property  double deltaDistanceAccuracy

  // class methods
  +[CLLocationGnssOdometerInfo supportsSecureCoding]

  // instance methods
  -[CLLocationGnssOdometerInfo encodeWithCoder:]
  -[CLLocationGnssOdometerInfo deltaDistanceAccuracy]
  -[CLLocationGnssOdometerInfo initWithOdometer:deltaDistance:deltaDistanceAccuracy:]
  -[CLLocationGnssOdometerInfo deltaDistance]
  -[CLLocationGnssOdometerInfo copyWithZone:]
  -[CLLocationGnssOdometerInfo odometer]
  -[CLLocationGnssOdometerInfo initWithCoder:]


_CLLocationFusionInfo : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL coordinateFused
 @property  BOOL coordinateFusedWithVL
 @property  {?=dd} coordinate
 @property  double horizontalAccuracy
 @property  int referenceFrame
 @property  double altitude
 @property  double verticalAccuracy
 @property  double course
 @property  double courseAccuracy

  // class methods
  +[_CLLocationFusionInfo supportsSecureCoding]

  // instance methods
  -[_CLLocationFusionInfo horizontalAccuracy]
  -[_CLLocationFusionInfo altitude]
  -[_CLLocationFusionInfo course]
  -[_CLLocationFusionInfo initWithCoordinateFused:coordinateFusedWithVL:coordinate:horizontalAccuracy:referenceFrame:altitude:verticalAccuracy:course:courseAccuracy:]
  -[_CLLocationFusionInfo isCoordinateFused]
  -[_CLLocationFusionInfo coordinate]
  -[_CLLocationFusionInfo isCoordinateFusedWithVL]
  -[_CLLocationFusionInfo encodeWithCoder:]
  -[_CLLocationFusionInfo referenceFrame]
  -[_CLLocationFusionInfo verticalAccuracy]
  -[_CLLocationFusionInfo copyWithZone:]
  -[_CLLocationFusionInfo courseAccuracy]
  -[_CLLocationFusionInfo init]
  -[_CLLocationFusionInfo initWithCoder:]


CLBBTimeFreqTransferCallbackAssertion : NSObject
  // class methods
  +[CLBBTimeFreqTransferCallbackAssertion newAssertionForBundleIdentifier:withReason:withCallbackQueue:andBlock:]
  +[CLBBTimeFreqTransferCallbackAssertion newAssertionForBundle:withReason:withCallbackQueue:andBlock:]

  // instance methods
  -[CLBBTimeFreqTransferCallbackAssertion dealloc]
  -[CLBBTimeFreqTransferCallbackAssertion invalidate]
  -[CLBBTimeFreqTransferCallbackAssertion initWithRegistrationMessageName:messageDictionary:dispatchQueue:codeBlock:]


CLInUseAssertion : CLAssertion
  // class methods
  +[CLInUseAssertion newAssertionForBundleIdentifier:bundlePath:reason:level:]
  +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:]
  +[CLInUseAssertion newAssertionForBundle:withReason:]
  +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:level:]
  +[CLInUseAssertion newAssertionForBundle:withReason:level:]


CLRegion : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *deviceId
 @property  NSString *handoffTag
 @property  NSString *onBehalfOfBundleId
 @property  BOOL conservativeEntry
 @property  int referenceFrame
 @property  BOOL emergency
 @property  int type
 @property  {CLLocationCoordinate2D=dd} center
 @property  double radius
 @property  NSString *identifier
 @property  BOOL notifyOnEntry
 @property  BOOL notifyOnExit

  // class methods
  +[CLRegion supportsSecureCoding]

  // instance methods
  -[CLRegion deviceId]
  -[CLRegion radius]
  -[CLRegion identifier]
  -[CLRegion center]
  -[CLRegion encodeWithCoder:]
  -[CLRegion type]
  -[CLRegion dealloc]
  -[CLRegion setReferenceFrame:]
  -[CLRegion referenceFrame]
  -[CLRegion initWithIdentifier:]
  -[CLRegion setType:]
  -[CLRegion containsCoordinate:]
  -[CLRegion copyWithZone:]
  -[CLRegion isEqual:]
  -[CLRegion initWithCoder:]
  -[CLRegion setNotifyOnEntry:]
  -[CLRegion setNotifyOnExit:]
  -[CLRegion initWithClientRegion:]
  -[CLRegion initCircularRegionWithCenter:radius:identifier:]
  -[CLRegion initWithIdentifier:andRegionType:]
  -[CLRegion initWithIdentifier:onBehalfOf:regionType:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:]
  -[CLRegion initWithIdentifier:onBehalfOf:regionType:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:]
  -[CLRegion notifyOnEntry]
  -[CLRegion notifyOnExit]
  -[CLRegion handoffTag]
  -[CLRegion onBehalfOfBundleId]
  -[CLRegion setOnBehalfOfBundleId:]
  -[CLRegion conservativeEntry]
  -[CLRegion setConservativeEntry:]
  -[CLRegion emergency]
  -[CLRegion setEmergency:]


CLClientManagerAuthorizationContext : NSObject
 @property  unsigned long staticServiceMask
 @property  unsigned long effectiveServiceMask
 @property  unsigned long provisionalServiceMask
 @property  int transientAwareRegistrationResult
 @property  int registrationResult
 @property  BOOL authorizedForWidgetUpdates
 @property  int inUseLevel

  // instance methods
  -[CLClientManagerAuthorizationContext effectiveServiceMask]
  -[CLClientManagerAuthorizationContext provisionalServiceMask]
  -[CLClientManagerAuthorizationContext authorizedForWidgetUpdates]
  -[CLClientManagerAuthorizationContext isAuthorizedForServiceTypeMask:]
  -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:authorizedForWidgetUpdates:]
  -[CLClientManagerAuthorizationContext staticServiceMask]
  -[CLClientManagerAuthorizationContext authorizationContextByANDingServiceMaskTuple:]
  -[CLClientManagerAuthorizationContext transientAwareRegistrationResult]
  -[CLClientManagerAuthorizationContext inUseLevelIsAtLeast:]
  -[CLClientManagerAuthorizationContext isNonProvisionallyAuthorizedForServiceType:]
  -[CLClientManagerAuthorizationContext isAuthorizedForServiceType:]
  -[CLClientManagerAuthorizationContext inUseLevel]
  -[CLClientManagerAuthorizationContext isEqual:]
  -[CLClientManagerAuthorizationContext isNonProvisionallyAuthorizedForServiceTypeMask:]
  -[CLClientManagerAuthorizationContext registrationResult]


CLFindMyAccessoryAbsoluteWildConfiguration : NSObject <NSSecureCoding>
 @property  NSDate *desiredKeyRollDate
 @property  unsigned int nextWildIndex

  // class methods
  +[CLFindMyAccessoryAbsoluteWildConfiguration supportsSecureCoding]

  // instance methods
  -[CLFindMyAccessoryAbsoluteWildConfiguration encodeWithCoder:]
  -[CLFindMyAccessoryAbsoluteWildConfiguration dealloc]
  -[CLFindMyAccessoryAbsoluteWildConfiguration init]
  -[CLFindMyAccessoryAbsoluteWildConfiguration initWithCoder:]
  -[CLFindMyAccessoryAbsoluteWildConfiguration initWithDesiredNextKeyRollDate:nextWildIndex:]
  -[CLFindMyAccessoryAbsoluteWildConfiguration encodeConfiguration]
  -[CLFindMyAccessoryAbsoluteWildConfiguration desiredKeyRollDate]
  -[CLFindMyAccessoryAbsoluteWildConfiguration nextWildIndex]


CLPlatformInfoPrivate : NSObject
  // class methods
  +[CLPlatformInfoPrivate supportsWifi2]


CLCircularRegion : CLRegion
 @property  {CLLocationCoordinate2D=dd} geoCenter
 @property  double geoRadius
 @property  int geoReferenceFrame
 @property  BOOL isLowPower
 @property  double desiredAccuracy
 @property  BOOL allowMonitoringWhileNearby
 @property  {CLLocationCoordinate2D=dd} center
 @property  double radius

  // class methods
  +[CLCircularRegion supportsSecureCoding]

  // instance methods
  -[CLCircularRegion desiredAccuracy]
  -[CLCircularRegion radius]
  -[CLCircularRegion initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:]
  -[CLCircularRegion center]
  -[CLCircularRegion encodeWithCoder:]
  -[CLCircularRegion geoCenter]
  -[CLCircularRegion initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:]
  -[CLCircularRegion setReferenceFrame:]
  -[CLCircularRegion initNearbyAllowedWithCenter:radius:identifier:]
  -[CLCircularRegion referenceFrame]
  -[CLCircularRegion geoRadius]
  -[CLCircularRegion initLegacyObjectWithCoder:]
  -[CLCircularRegion initWithCenter:radius:identifier:]
  -[CLCircularRegion initWithCenter:radius:identifier:nearbyAllowed:]
  -[CLCircularRegion isLowPower]
  -[CLCircularRegion containsCoordinate:]
  -[CLCircularRegion allowMonitoringWhileNearby]
  -[CLCircularRegion initWithCenter:radius:identifier:onBehalfOfBundleId:]
  -[CLCircularRegion setGeoReferenceFrame:]
  -[CLCircularRegion copyWithZone:]
  -[CLCircularRegion initForLowPowerWithCenter:radius:identifier:]
  -[CLCircularRegion geoReferenceFrame]
  -[CLCircularRegion isEqual:]
  -[CLCircularRegion initWithCoder:]


CLBeaconRegion : CLRegion
 @property  int definitionMask
 @property  CLBeaconIdentityConstraint *beaconIdentityConstraint
 @property  NSUUID *UUID
 @property  NSUUID *proximityUUID
 @property  NSNumber *major
 @property  NSNumber *minor
 @property  BOOL notifyEntryStateOnDisplay

  // class methods
  +[CLBeaconRegion supportsSecureCoding]
  +[CLBeaconRegion any]

  // instance methods
  -[CLBeaconRegion encodeWithCoder:]
  -[CLBeaconRegion dealloc]
  -[CLBeaconRegion minor]
  -[CLBeaconRegion UUID]
  -[CLBeaconRegion initWithIdentifier:]
  -[CLBeaconRegion major]
  -[CLBeaconRegion copyWithZone:]
  -[CLBeaconRegion isEqual:]
  -[CLBeaconRegion init]
  -[CLBeaconRegion initWithCoder:]
  -[CLBeaconRegion proximityUUID]
  -[CLBeaconRegion setGutsWithProximityUUID:major:minor:notifyOnDisplay:]
  -[CLBeaconRegion initWithProximityUUID:identifier:]
  -[CLBeaconRegion initWithUUID:identifier:]
  -[CLBeaconRegion initWithProximityUUID:major:identifier:]
  -[CLBeaconRegion initWithUUID:major:identifier:]
  -[CLBeaconRegion initWithProximityUUID:major:minor:identifier:]
  -[CLBeaconRegion initWithUUID:major:minor:identifier:]
  -[CLBeaconRegion initWithUUID:major:minor:identifier:notifyEntryStateOnDisplay:]
  -[CLBeaconRegion initWithBeaconIdentityConstraint:identifier:]
  -[CLBeaconRegion _measuredPowerForDevice]
  -[CLBeaconRegion peripheralDataWithMeasuredPower:]
  -[CLBeaconRegion beaconIdentityConstraint]
  -[CLBeaconRegion notifyEntryStateOnDisplay]
  -[CLBeaconRegion setNotifyEntryStateOnDisplay:]
  -[CLBeaconRegion definitionMask]


CLBeaconInternal : NSObject

CLBeacon : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  NSUUID *UUID
 @property  NSUUID *proximityUUID
 @property  NSNumber *major
 @property  NSNumber *minor
 @property  long long proximity
 @property  double accuracy
 @property  long long rssi

  // class methods
  +[CLBeacon supportsSecureCoding]

  // instance methods
  -[CLBeacon encodeWithCoder:]
  -[CLBeacon rssi]
  -[CLBeacon dealloc]
  -[CLBeacon setReferenceFrame:]
  -[CLBeacon referenceFrame]
  -[CLBeacon minor]
  -[CLBeacon UUID]
  -[CLBeacon proximity]
  -[CLBeacon major]
  -[CLBeacon copyWithZone:]
  -[CLBeacon timestamp]
  -[CLBeacon accuracy]
  -[CLBeacon initWithCoder:]
  -[CLBeacon proximityUUID]
  -[CLBeacon initWithProximityUUID:major:minor:proximity:accuracy:rssi:]
  -[CLBeacon initWithUUID:major:minor:proximity:accuracy:rssi:timestamp:]


_CLVLLocalizationResult : NSObject <NSCopying, NSSecureCoding>
 @property  double timestamp
 @property  {?=d} location
 @property  {?=[4]} transform
 @property  {?=[6[6f]]} covariance
 @property  float confidence
 @property  _CLVLLocalizationDebugInfo *debugInfo

  // class methods
  +[_CLVLLocalizationResult supportsSecureCoding]

  // instance methods
  -[_CLVLLocalizationResult confidence]
  -[_CLVLLocalizationResult setTimestamp:]
  -[_CLVLLocalizationResult encodeWithCoder:]
  -[_CLVLLocalizationResult dealloc]
  -[_CLVLLocalizationResult setLocation:]
  -[_CLVLLocalizationResult setTransform:]
  -[_CLVLLocalizationResult copyWithZone:]
  -[_CLVLLocalizationResult timestamp]
  -[_CLVLLocalizationResult debugInfo]
  -[_CLVLLocalizationResult location]
  -[_CLVLLocalizationResult setConfidence:]
  -[_CLVLLocalizationResult transform]
  -[_CLVLLocalizationResult initWithCoder:]
  -[_CLVLLocalizationResult initWithTimestamp:localizationResult:]
  -[_CLVLLocalizationResult descriptionWithMemberIndent:endIndent:]
  -[_CLVLLocalizationResult covariance]
  -[_CLVLLocalizationResult setCovariance:]
  -[_CLVLLocalizationResult setDebugInfo:]


CLSimulationManager : NSObject
 @property  NSXPCConnection *connection
 @property  <CLSimulationXPCServerInterface> *daemonProxy
 @property  unsigned char locationDeliveryBehavior
 @property  double locationDistance
 @property  double locationInterval
 @property  double locationSpeed
 @property  unsigned char locationRepeatBehavior

  // instance methods
  -[CLSimulationManager daemonProxy]
  -[CLSimulationManager connection]
  -[CLSimulationManager flush]
  -[CLSimulationManager init]
  -[CLSimulationManager setConnection:]
  -[CLSimulationManager startLocationSimulation]
  -[CLSimulationManager stopLocationSimulation]
  -[CLSimulationManager clearSimulatedLocations]
  -[CLSimulationManager setLocationDeliveryBehavior:]
  -[CLSimulationManager setLocationRepeatBehavior:]
  -[CLSimulationManager setLocationInterval:]
  -[CLSimulationManager simulateVisit:]
  -[CLSimulationManager simulateSignificantLocationChange:]
  -[CLSimulationManager simulateFenceWithBundleID:andFenceID:eventType:atLocation:]
  -[CLSimulationManager simulateBeaconWithProximityUUID:major:minor:eventType:]
  -[CLSimulationManager scenariosPath]
  -[CLSimulationManager availableScenarios]
  -[CLSimulationManager localizedNameForScenario:]
  -[CLSimulationManager selectScenario:]
  -[CLSimulationManager loadScenarioFromURL:]
  -[CLSimulationManager setLocationDistance:]
  -[CLSimulationManager setLocationSpeed:]
  -[CLSimulationManager appendSimulatedLocation:]
  -[CLSimulationManager getFencesForBundleID:withHandler:]
  -[CLSimulationManager clearSimulatedCells]
  -[CLSimulationManager setSimulatedCell:]
  -[CLSimulationManager startCellSimulation]
  -[CLSimulationManager stopCellSimulation]
  -[CLSimulationManager setSimulatedCellRegistrationStatus:]
  -[CLSimulationManager setWifiScanResults:]
  -[CLSimulationManager startWifiSimulation]
  -[CLSimulationManager stopWifiSimulation]
  -[CLSimulationManager setSimulatedWifiPower:]
  -[CLSimulationManager locationDeliveryBehavior]
  -[CLSimulationManager locationDistance]
  -[CLSimulationManager locationInterval]
  -[CLSimulationManager locationSpeed]
  -[CLSimulationManager locationRepeatBehavior]


CLBeaconIdentityConstraint : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSNumber *major
 @property  NSNumber *minor

  // class methods
  +[CLBeaconIdentityConstraint supportsSecureCoding]
  +[CLBeaconIdentityConstraint any]

  // instance methods
  -[CLBeaconIdentityConstraint encodeWithCoder:]
  -[CLBeaconIdentityConstraint dealloc]
  -[CLBeaconIdentityConstraint setUUID:]
  -[CLBeaconIdentityConstraint minor]
  -[CLBeaconIdentityConstraint UUID]
  -[CLBeaconIdentityConstraint initWithUUID:]
  -[CLBeaconIdentityConstraint major]
  -[CLBeaconIdentityConstraint copyWithZone:]
  -[CLBeaconIdentityConstraint isEqual:]
  -[CLBeaconIdentityConstraint init]
  -[CLBeaconIdentityConstraint initWithCoder:]
  -[CLBeaconIdentityConstraint initWithUUID:major:]
  -[CLBeaconIdentityConstraint initWithUUID:major:minor:]
  -[CLBeaconIdentityConstraint _initWithUUID:major:minor:]


CLLocationPushServiceExtensionContext : NSExtensionContext
  // class methods
  +[CLLocationPushServiceExtensionContext _extensionAuxiliaryHostProtocol]
  +[CLLocationPushServiceExtensionContext _extensionAuxiliaryVendorProtocol]


CLVehicleHeadingInternal : NSObject <NSCopying>
  // instance methods
  -[CLVehicleHeadingInternal copyWithZone:]
  -[CLVehicleHeadingInternal initWithClientVehicleHeading:]


CLVehicleHeading : NSObject <NSCopying, NSSecureCoding>
 @property  double trueHeading
 @property  NSDate *timestamp

  // class methods
  +[CLVehicleHeading supportsSecureCoding]

  // instance methods
  -[CLVehicleHeading encodeWithCoder:]
  -[CLVehicleHeading dealloc]
  -[CLVehicleHeading shortDescription]
  -[CLVehicleHeading copyWithZone:]
  -[CLVehicleHeading timestamp]
  -[CLVehicleHeading initWithCoder:]
  -[CLVehicleHeading trueHeading]
  -[CLVehicleHeading initWithClientVehicleHeading:]


CLVehicleSpeedInternal : NSObject <NSCopying>
  // instance methods
  -[CLVehicleSpeedInternal copyWithZone:]
  -[CLVehicleSpeedInternal initWithClientVehicleSpeed:]


CLVehicleSpeed : NSObject <NSCopying, NSSecureCoding>
 @property  double speed
 @property  NSDate *timestamp

  // class methods
  +[CLVehicleSpeed supportsSecureCoding]

  // instance methods
  -[CLVehicleSpeed encodeWithCoder:]
  -[CLVehicleSpeed dealloc]
  -[CLVehicleSpeed speed]
  -[CLVehicleSpeed shortDescription]
  -[CLVehicleSpeed copyWithZone:]
  -[CLVehicleSpeed timestamp]
  -[CLVehicleSpeed initWithCoder:]
  -[CLVehicleSpeed initWithClientVehicleSpeed:]


CLVisit : NSObject <NSSecureCoding, NSCopying>
 @property  BOOL hasArrivalDate
 @property  BOOL hasDepartureDate
 @property  NSDate *detectionDate
 @property  _CLPlaceInference *_placeInference
 @property  NSDate *arrivalDate
 @property  NSDate *departureDate
 @property  {CLLocationCoordinate2D=dd} coordinate
 @property  double horizontalAccuracy

  // class methods
  +[CLVisit supportsSecureCoding]

  // instance methods
  -[CLVisit horizontalAccuracy]
  -[CLVisit hasArrivalDate]
  -[CLVisit hasDepartureDate]
  -[CLVisit coordinate]
  -[CLVisit encodeWithCoder:]
  -[CLVisit dealloc]
  -[CLVisit departureDate]
  -[CLVisit copyWithZone:]
  -[CLVisit arrivalDate]
  -[CLVisit detectionDate]
  -[CLVisit initWithCoder:]
  -[CLVisit _placeInference]
  -[CLVisit initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:]
  -[CLVisit initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:]


CLGeocoderInternal : NSObject
 @property  CLSilo *responseSilo

  // instance methods
  -[CLGeocoderInternal setResponseSilo:]
  -[CLGeocoderInternal dealloc]
  -[CLGeocoderInternal responseSilo]
  -[CLGeocoderInternal init]


CLGeocoder : NSObject
 @property  CLSilo *_responseSilo
 @property  BOOL geocoding

  // class methods
  +[CLGeocoder _timeZoneAtLocation:]
  +[CLGeocoder hydrateGeoMapItemLocallyFromHandle:completionHandler:]

  // instance methods
  -[CLGeocoder geocodePostalAddress:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:heading:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:preferredLocale:heading:localResultsOnly:completionHandler:]
  -[CLGeocoder dealloc]
  -[CLGeocoder _notifyPartialResult:]
  -[CLGeocoder geocodeAddressDictionary:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:localResultsOnly:completionHandler:]
  -[CLGeocoder geocodeAddressString:completionHandler:]
  -[CLGeocoder _notifyResult:error:]
  -[CLGeocoder cancelGeocode]
  -[CLGeocoder _ticket:didReturnGeoMapItems:]
  -[CLGeocoder reverseGeocodeLocation:completionHandler:]
  -[CLGeocoder _notifyError:]
  -[CLGeocoder _responseSilo]
  -[CLGeocoder _ticket:didReturnError:]
  -[CLGeocoder geocodeAddressString:inRegion:preferredLocale:completionHandler:]
  -[CLGeocoder _notifyCancel]
  -[CLGeocoder geocodePostalAddress:preferredLocale:completionHandler:]
  -[CLGeocoder _setResponseSilo:]
  -[CLGeocoder _ticket:didReturnError:partialResultForLocation:]
  -[CLGeocoder _ensureMainThreadExecutionContextForBlock:]
  -[CLGeocoder geocodeAddressString:inRegion:completionHandler:]
  -[CLGeocoder _notifyNoResult]
  -[CLGeocoder isGeocoding]
  -[CLGeocoder geocodeAddressDictionary:preferredLocale:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:preferredLocale:completionHandler:]
  -[CLGeocoder init]
  -[CLGeocoder _notifyResult:]
  -[CLGeocoder reverseGeocodeLocation:heading:localResultsOnly:completionHandler:]


CLLocationInternalClient : NSObject
  // class methods
  +[CLLocationInternalClient sharedServiceClient]

  // instance methods
  -[CLLocationInternalClient performMigration]
  -[CLLocationInternalClient configure:]
  -[CLLocationInternalClient shouldDisplayEEDUI]
  -[CLLocationInternalClient getLocationServicesEnabled:]
  -[CLLocationInternalClient setAuthorizationStatusByType:withCorrectiveCompensation:andZoneIdentifier:andSubIdentityIdentifier:forBundleID:orBundlePath:]
  -[CLLocationInternalClient copyMonitoredRegionsForBundleIdentifier:orBundlePath:]
  -[CLLocationInternalClient clearLocationAuthorizations]
  -[CLLocationInternalClient getGyroCalibrationDatabaseBiasFit:atTemperature:]
  -[CLLocationInternalClient copyZaxisStats]
  -[CLLocationInternalClient getLocationDefaultForKey:]
  -[CLLocationInternalClient copyNearbyAssetSettingsOfAccessoryFile:]
  -[CLLocationInternalClient timeZoneAtLocation:]
  -[CLLocationInternalClient copyMicroLocationInternalVersion]
  -[CLLocationInternalClient registerPhenolicInterestZoneWithId:phenolicLocation:serviceMaskOperator:provenanceType:forBundleId:orBundlePath:error:]
  -[CLLocationInternalClient pingDaemon]
  -[CLLocationInternalClient compassCalibrationDatabaseSetBias:magneticField:level:magnitude:inclination:]
  -[CLLocationInternalClient getPipelinedCache]
  -[CLLocationInternalClient setAuthorizationPromptMapDisplayEnabled:]
  -[CLLocationInternalClient getGyroCalibrationDatabaseNumTemperatures:]
  -[CLLocationInternalClient getAuthorizationPromptMapDisplayEnabled:]
  -[CLLocationInternalClient getPrivateMode]
  -[CLLocationInternalClient getStatusBarIconEnabled:forEntityClass:]
  -[CLLocationInternalClient modifyOrSetAuthorizationTime:forBundleID:orBundlePath:]
  -[CLLocationInternalClient compassCalibrationDatabaseGetBias:magneticField:acceleration:]
  -[CLLocationInternalClient setPrivateMode:]
  -[CLLocationInternalClient gyroCalibrationDatabaseSupportsMiniCalibration:]
  -[CLLocationInternalClient getEmergencyLocationSettingsCompatibilityVersion:andContentVersion:]
  -[CLLocationInternalClient copyLastLog]
  -[CLLocationInternalClient connection]
  -[CLLocationInternalClient copyActivityAlarms]
  -[CLLocationInternalClient setTemporaryAuthorizationGranted:forBundleID:orBundlePath:orAuditToken:byLocationButton:voiceInteractionEnabled:]
  -[CLLocationInternalClient gyroCalibrationDatabaseWipe]
  -[CLLocationInternalClient copyNearbyAssetSettings]
  -[CLLocationInternalClient applyArchivedAuthorizationDecisions:]
  -[CLLocationInternalClient getAuthorizationStatus:forBundleID:orBundlePath:]
  -[CLLocationInternalClient shutdownDaemon]
  -[CLLocationInternalClient getPrecisionPermission:forBundleID:orBundlePath:]
  -[CLLocationInternalClient setTemporaryAuthorizationStatusForBundleId:orBundlePath:statusData:]
  -[CLLocationInternalClient copyAppsUsingLocation]
  -[CLLocationInternalClient setLocationDefaultForKey:value:]
  -[CLLocationInternalClient getGestureServiceEnabled:]
  -[CLLocationInternalClient getStatusBarIconState]
  -[CLLocationInternalClient setIncidentalUseMode:forBundleID:orBundlePath:]
  -[CLLocationInternalClient getAccessoryPASCDTransmissionState]
  -[CLLocationInternalClient checkAndExerciseAuthorizationForBundleID:orBundlePath:services:error:]
  -[CLLocationInternalClient getArchivedAuthorizationDecisionsWithError:]
  -[CLLocationInternalClient notifyWeatherForecast:airQualityConditions:hourlyForecasts:dailyForecasts:latitude:longitude:]
  -[CLLocationInternalClient setLocationButtonUseMode:forBundleID:orBundlePath:]
  -[CLLocationInternalClient copyActiveClientsUsingLocation]
  -[CLLocationInternalClient deleteInterestZoneWithId:registeredForBundleId:orBundlePath:error:]
  -[CLLocationInternalClient setBackgroundIndicatorForBundleID:orBundlePath:enabled:]
  -[CLLocationInternalClient notifyPassKitPayment:transaction:info:]
  -[CLLocationInternalClient setMapMatchingRouteHint:count:routingType:stepType:]
  -[CLLocationInternalClient getGroundAltitudeForBundleID:orBundlePath:location:groundAltitude:]
  -[CLLocationInternalClient startStopAdvertisingBeacon:power:]
  -[CLLocationInternalClient getOdometryBatchedLocations]
  -[CLLocationInternalClient getIncidentalUseMode:forBundleID:orBundlePath:]
  -[CLLocationInternalClient setGestureServiceEnabled:]
  -[CLLocationInternalClient clearLocationAuthorizationForBundleId:orBundlePath:]
  -[CLLocationInternalClient setAuthorizationStatus:withCorrectiveCompensation:forBundleID:orBundlePath:]
  -[CLLocationInternalClient deleteCurrentEmergencyLocationAsset]
  -[CLLocationInternalClient copyGnssBandsInUse]
  -[CLLocationInternalClient getAccessoryMotionSensorLogs]
  -[CLLocationInternalClient getAuthorizationStatusForApp:withAuditToken:]
  -[CLLocationInternalClient displayStatistics]
  -[CLLocationInternalClient getAccessoryTypeBitSet]
  -[CLLocationInternalClient getTemporaryAuthorizationStatusForBundleId:orBundlePath:error:]
  -[CLLocationInternalClient triggerExpiredAuthorizationPurgeOnClientManager]
  -[CLLocationInternalClient setLocationServicesEnabled:]
  -[CLLocationInternalClient getMotionSensorLogs]
  -[CLLocationInternalClient getLocationForBundleID:orBundlePath:dynamicAccuracyReductionEnabled:allowsAlteredAccessoryLocations:location:]
  -[CLLocationInternalClient setRelevance:forInterestZoneWithId:registeredForBundleId:orBundlePath:error:]
  -[CLLocationInternalClient registerCircularInterestZoneWithId:latitude:longitude:radius:serviceMaskOperator:provenanceType:forBundleId:orBundlePath:error:]
  -[CLLocationInternalClient dumpLogs:]
  -[CLLocationInternalClient timeSyncMachTimeStamp:oscarTimeStamp:]
  -[CLLocationInternalClient copyTechnologiesInUse]
  -[CLLocationInternalClient insertGyroCalibrationDatabaseBiasEstimateIfValid:temperature:variance:timestamp:]
  -[CLLocationInternalClient getControlPlaneStatusReportClear:startTime:endTime:latitude:longitude:altitude:accuracy:status:]
  -[CLLocationInternalClient setStatusBarIconEnabled:forEntityClass:]
  -[CLLocationInternalClient synchronousRemoteObject]
  -[CLLocationInternalClient updateCorrectiveCompensationChoiceForOutstandingPrompt:]


CLPlacemarkInternal : NSObject
  // instance methods
  -[CLPlacemarkInternal init]


CLPlacemark : NSObject <NSCopying, NSSecureCoding>
 @property  CNPostalAddress *postalAddress
 @property  CLLocation *location
 @property  CLRegion *region
 @property  NSTimeZone *timeZone
 @property  NSDictionary *addressDictionary
 @property  NSString *name
 @property  NSString *thoroughfare
 @property  NSString *subThoroughfare
 @property  NSString *locality
 @property  NSString *subLocality
 @property  NSString *administrativeArea
 @property  NSString *subAdministrativeArea
 @property  NSString *postalCode
 @property  NSString *ISOcountryCode
 @property  NSString *country
 @property  NSString *inlandWater
 @property  NSString *ocean
 @property  NSArray *areasOfInterest

  // class methods
  +[CLPlacemark supportsSecureCoding]
  +[CLPlacemark placemarkWithGEOMapItem:]
  +[CLPlacemark _cLMapItemSourceFromRLMapItemSource:]

  // instance methods
  -[CLPlacemark postalCode]
  -[CLPlacemark timeZone]
  -[CLPlacemark subLocality]
  -[CLPlacemark encodeWithCoder:]
  -[CLPlacemark dealloc]
  -[CLPlacemark addressDictionary]
  -[CLPlacemark initWithPlacemark:]
  -[CLPlacemark areasOfInterest]
  -[CLPlacemark thoroughfare]
  -[CLPlacemark ocean]
  -[CLPlacemark copyWithZone:]
  -[CLPlacemark region]
  -[CLPlacemark name]
  -[CLPlacemark administrativeArea]
  -[CLPlacemark location]
  -[CLPlacemark subAdministrativeArea]
  -[CLPlacemark country]
  -[CLPlacemark locality]
  -[CLPlacemark inlandWater]
  -[CLPlacemark subThoroughfare]
  -[CLPlacemark initWithCoder:]
  -[CLPlacemark _geoMapItem]
  -[CLPlacemark postalAddress]
  -[CLPlacemark formattedAddressLines]
  -[CLPlacemark fullThoroughfare]
  -[CLPlacemark ISOcountryCode]
  -[CLPlacemark initWithLocation:addressDictionary:region:areasOfInterest:]
  -[CLPlacemark _initWithRTMapItem:location:]
  -[CLPlacemark _geoMapItemHandle]
  -[CLPlacemark mecardAddress]
  -[CLPlacemark _initWithGeoMapItem:]
  -[CLPlacemark initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:]
  -[CLPlacemark fetchFormattedAddress:queue:]


CLReductiveFilterOptions : NSObject
 @property  double biasRateInMeasurement
 @property  double applyRangeEstimation
 @property  unsigned long beaconType
 @property  double transmitPower

  // instance methods
  -[CLReductiveFilterOptions init]
  -[CLReductiveFilterOptions initWithBeaconType:]
  -[CLReductiveFilterOptions initWithBeaconType:transmitPower:]
  -[CLReductiveFilterOptions beaconType]
  -[CLReductiveFilterOptions transmitPower]
  -[CLReductiveFilterOptions biasRateInMeasurement]
  -[CLReductiveFilterOptions setBiasRateInMeasurement:]
  -[CLReductiveFilterOptions applyRangeEstimation]
  -[CLReductiveFilterOptions setApplyRangeEstimation:]


CLLocationPushServiceExtensionRemoteContext : CLLocationPushServiceExtensionContext <CLLocationPushServiceExtensionRemoteXPCInterface>
  // instance methods
  -[CLLocationPushServiceExtensionRemoteContext initWithInputItems:listenerEndpoint:contextUUID:]
  -[CLLocationPushServiceExtensionRemoteContext didReceiveLocationPushPayload:reply:]
  -[CLLocationPushServiceExtensionRemoteContext serviceExtensionWillTerminate]
  -[CLLocationPushServiceExtensionRemoteContext serviceExtensionPerformCleanup]


_CLVertex : NSObject <NSCopying, NSSecureCoding>
 @property  {CLLocationCoordinate2D=dd} coordinate

  // class methods
  +[_CLVertex supportsSecureCoding]

  // instance methods
  -[_CLVertex initWithCoordinate:]
  -[_CLVertex coordinate]
  -[_CLVertex encodeWithCoder:]
  -[_CLVertex dealloc]
  -[_CLVertex copyWithZone:]
  -[_CLVertex isEqual:]
  -[_CLVertex initWithCoder:]
  -[_CLVertex initWithClientCoordinate:]
  -[_CLVertex getDistanceFrom:]


_CLPolygonalRegion : CLRegion
 @property  NSArray *vertices
 @property  int geoReferenceFrame
 @property  BOOL allowMonitoringWhileNearby

  // class methods
  +[_CLPolygonalRegion supportsSecureCoding]

  // instance methods
  -[_CLPolygonalRegion encodeWithCoder:]
  -[_CLPolygonalRegion dealloc]
  -[_CLPolygonalRegion containsCoordinate:]
  -[_CLPolygonalRegion allowMonitoringWhileNearby]
  -[_CLPolygonalRegion setGeoReferenceFrame:]
  -[_CLPolygonalRegion copyWithZone:]
  -[_CLPolygonalRegion geoReferenceFrame]
  -[_CLPolygonalRegion initWithCoder:]
  -[_CLPolygonalRegion initWithVertices:identifier:]
  -[_CLPolygonalRegion initNearbyAllowedWithVertices:identifier:]
  -[_CLPolygonalRegion containsCoordinate:withDistanceToBorder:]
  -[_CLPolygonalRegion pointInPolygonWithCoordinate:withDistanceToBorder:]
  -[_CLPolygonalRegion vertices]


CLHarvester : NSObject
  // instance methods
  -[CLHarvester connect]
  -[CLHarvester dealloc]
  -[CLHarvester submitSample:]
  -[CLHarvester currentStateDictionary]


CLFindMyAccessoryFirmwareVersion : NSObject
 @property  NSString *vanBurenVersion
 @property  NSString *rtKitVersion
 @property  NSString *specificationVersion
 @property  unsigned long roseAPVersion
 @property  unsigned long roseDSPVersion
 @property  unsigned long hardwareVersion
 @property  unsigned long calibrationDataVersion

  // instance methods
  -[CLFindMyAccessoryFirmwareVersion hardwareVersion]
  -[CLFindMyAccessoryFirmwareVersion initWithBytes:length:]
  -[CLFindMyAccessoryFirmwareVersion dealloc]
  -[CLFindMyAccessoryFirmwareVersion initWithData:]
  -[CLFindMyAccessoryFirmwareVersion vanBurenVersion]
  -[CLFindMyAccessoryFirmwareVersion rtKitVersion]
  -[CLFindMyAccessoryFirmwareVersion specificationVersion]
  -[CLFindMyAccessoryFirmwareVersion roseAPVersion]
  -[CLFindMyAccessoryFirmwareVersion roseDSPVersion]
  -[CLFindMyAccessoryFirmwareVersion calibrationDataVersion]


CLStateTracker : NSObject
 @property  ^v identifier

  // class methods
  +[CLStateTracker trackerStateTypeName]
  +[CLStateTracker trackerStateSize]

  // instance methods
  -[CLStateTracker identifier]
  -[CLStateTracker dumpState:withSize:hints:]
  -[CLStateTracker dealloc]
  -[CLStateTracker initWithQueue:]


CLFindMyAccessoryFirmwareUpdateManager : NSObject
 @property  <CLFindMyAccessoryFirmwareUpdateDelegate> *delegate

  // instance methods
  -[CLFindMyAccessoryFirmwareUpdateManager initWithDelegate:delegateQueue:]
  -[CLFindMyAccessoryFirmwareUpdateManager setDelegate:]
  -[CLFindMyAccessoryFirmwareUpdateManager delegate]
  -[CLFindMyAccessoryFirmwareUpdateManager .cxx_construct]
  -[CLFindMyAccessoryFirmwareUpdateManager .cxx_destruct]
  -[CLFindMyAccessoryFirmwareUpdateManager handleMessage:]
  -[CLFindMyAccessoryFirmwareUpdateManager handleInterruption]
  -[CLFindMyAccessoryFirmwareUpdateManager init]
  -[CLFindMyAccessoryFirmwareUpdateManager getPersonalizationInfoForDevice:]
  -[CLFindMyAccessoryFirmwareUpdateManager updateFirmwareForDevice:withAssetURL:]
  -[CLFindMyAccessoryFirmwareUpdateManager abortFirmwareUpdateForDevice:]
  -[CLFindMyAccessoryFirmwareUpdateManager useLocalFirmwareAssetFromURL:forProductGroup:forProductNumber:withSandboxExtension:]
  -[CLFindMyAccessoryFirmwareUpdateManager useDefaultFirmwareAssetSourceForProductGroup:andProductNumber:]
  -[CLFindMyAccessoryFirmwareUpdateManager fetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:]


CLRacingRoutePerformanceResults : NSObject
 @property  double timeAhead_s
 @property  double currentDistance_m
 @property  double referenceDistance_m
 @property  double currentAveragePace_s_per_m
 @property  double totalOverlapDistance_m
 @property  unsigned long state

  // instance methods
  -[CLRacingRoutePerformanceResults state]
  -[CLRacingRoutePerformanceResults initWithTimeAhead:currentDistance:referenceDistance:currentAveragePace:totalOverlapDistance:state:]
  -[CLRacingRoutePerformanceResults timeAhead_s]
  -[CLRacingRoutePerformanceResults currentDistance_m]
  -[CLRacingRoutePerformanceResults referenceDistance_m]
  -[CLRacingRoutePerformanceResults currentAveragePace_s_per_m]
  -[CLRacingRoutePerformanceResults totalOverlapDistance_m]


_CLPlaceInference : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned long userType
 @property  unsigned long placeType
 @property  CLPlacemark *placemark
 @property  CLLocation *referenceLocation
 @property  double confidence
 @property  NSString *preferredName
 @property  NSUUID *_loiIdentifier

  // class methods
  +[_CLPlaceInference supportsSecureCoding]
  +[_CLPlaceInference _placeInferencePlaceTypeFromRTPlaceType:]
  +[_CLPlaceInference _userSpecificPlaceTypeFromRTUserType:]

  // instance methods
  -[_CLPlaceInference confidence]
  -[_CLPlaceInference userType]
  -[_CLPlaceInference encodeWithCoder:]
  -[_CLPlaceInference dealloc]
  -[_CLPlaceInference placeType]
  -[_CLPlaceInference referenceLocation]
  -[_CLPlaceInference copyWithZone:]
  -[_CLPlaceInference preferredName]
  -[_CLPlaceInference initWithCoder:]
  -[_CLPlaceInference placemark]
  -[_CLPlaceInference _initWithRTPlaceInference:]
  -[_CLPlaceInference initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:]
  -[_CLPlaceInference _loiIdentifier]


_CLSignificantRegion : CLCircularRegion
  // class methods
  +[_CLSignificantRegion supportsSecureCoding]

  // instance methods
  -[_CLSignificantRegion encodeWithCoder:]
  -[_CLSignificantRegion initWithCenter:radius:referenceFrame:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:]
  -[_CLSignificantRegion initWithCenter:radius:identifier:]
  -[_CLSignificantRegion copyWithZone:]
  -[_CLSignificantRegion initWithCenter:radius:identifier:onBehalfOfBundleId:referenceFrame:]
  -[_CLSignificantRegion initWithCoder:]


CLPair : NSObject <NSCopying, NSSecureCoding>
 @property  int first
 @property  int second

  // class methods
  +[CLPair supportsSecureCoding]

  // instance methods
  -[CLPair second]
  -[CLPair encodeWithCoder:]
  -[CLPair initWithFirst:second:]
  -[CLPair first]
  -[CLPair copyWithZone:]
  -[CLPair initWithCoder:]


CLRouteBoundingBox : NSObject <NSCopying, NSSecureCoding>
 @property  double minLatitude
 @property  double maxLatitude
 @property  double minLongitude
 @property  double maxLongitude
 @property  int nRows
 @property  int nColumns

  // class methods
  +[CLRouteBoundingBox supportsSecureCoding]

  // instance methods
  -[CLRouteBoundingBox encodeWithCoder:]
  -[CLRouteBoundingBox copyWithZone:]
  -[CLRouteBoundingBox initWithCoder:]
  -[CLRouteBoundingBox initWithMinLatitude:maxLatitude:minLongitude:maxLongitude:nRows:nColumns:]
  -[CLRouteBoundingBox minLatitude]
  -[CLRouteBoundingBox maxLatitude]
  -[CLRouteBoundingBox minLongitude]
  -[CLRouteBoundingBox maxLongitude]
  -[CLRouteBoundingBox nRows]
  -[CLRouteBoundingBox nColumns]


CLRacingRouteState : NSObject <NSCopying, NSSecureCoding>
 @property  double latitude
 @property  double longitude
 @property  double altitude
 @property  double odometer
 @property  double timestamp
 @property  double timeSinceStart
 @property  double offRouteTime
 @property  double distanceSinceStart
 @property  double offRouteDistance
 @property  double averagePace
 @property  double distanceAlongReference

  // class methods
  +[CLRacingRouteState supportsSecureCoding]

  // instance methods
  -[CLRacingRouteState altitude]
  -[CLRacingRouteState latitude]
  -[CLRacingRouteState encodeWithCoder:]
  -[CLRacingRouteState longitude]
  -[CLRacingRouteState copyWithZone:]
  -[CLRacingRouteState timestamp]
  -[CLRacingRouteState odometer]
  -[CLRacingRouteState timeSinceStart]
  -[CLRacingRouteState initWithCoder:]
  -[CLRacingRouteState initWithLatitude:longitude:altitude:odometer:timestamp:timeSinceStart:offRouteTime:distanceSinceStart:offRouteDistance:averagePace:distanceAlongReference:]
  -[CLRacingRouteState offRouteTime]
  -[CLRacingRouteState distanceSinceStart]
  -[CLRacingRouteState offRouteDistance]
  -[CLRacingRouteState averagePace]
  -[CLRacingRouteState distanceAlongReference]


CLRacingRouteVariables : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL raceStartPointDetected
 @property  BOOL raceEndPointDetected
 @property  BOOL userIsOffRoute
 @property  BOOL projectedOnNearestPoint
 @property  BOOL raceSessionExpired
 @property  BOOL rollingBufferReachedEndOfReferenceRoute
 @property  BOOL routeConfigurationSuccessful
 @property  BOOL racingRouteAnalyticsSent
 @property  BOOL prematureRaceEndDetected
 @property  BOOL referenceRouteTotalLengthDetermined
 @property  BOOL locationPointIsOutsideOfAcceptedRange
 @property  BOOL locationPointNotMatched
 @property  int routePointsBufferSize
 @property  int numberOfRoutePointsToAdd
 @property  int offRouteGraceDuration
 @property  int matchedPointCounter
 @property  int referenceRouteDataPointCounter
 @property  int currentRouteDataPointCounter
 @property  int offRouteDataPointCounter
 @property  int inutileDataPointCounter
 @property  int rollingBufferUpdateCounter
 @property  int lastMatchedPointIndex
 @property  int lastMatchedPointIndexOnReferenceRoute
 @property  int rollingBufferStartIndexOnReferenceRoute
 @property  int matrixCellIndexForLastMatchedPoint
 @property  double referenceRouteTotalLength
 @property  double timestampOfLastMatchedPointOnReferenceRoute
 @property  double registeredTimeAtThresholdDistance
 @property  double endOfRaceTimeThreshold
 @property  double nearestNeighborMaximumAcceptedDistance

  // class methods
  +[CLRacingRouteVariables supportsSecureCoding]

  // instance methods
  -[CLRacingRouteVariables encodeWithCoder:]
  -[CLRacingRouteVariables copyWithZone:]
  -[CLRacingRouteVariables initWithCoder:]
  -[CLRacingRouteVariables initWithRaceStartPointDetected:raceEndPointDetected:userIsOffRoute:projectedOnNearestPoint:raceSessionExpired:rollingBufferReachedEndOfReferenceRoute:routeConfigurationSuccessful:racingRouteAnalyticsSent:prematureRaceEndDetected:referenceRouteTotalLengthDetermined:locationPointIsOutsideOfAcceptedRange:locationPointNotMatched:routePointsBufferSize:numberOfRoutePointsToAdd:offRouteGraceDuration:matchedPointCounter:referenceRouteDataPointCounter:currentRouteDataPointCounter:offRouteDataPointCounter:inutileDataPointCounter:rollingBufferUpdateCounter:lastMatchedPointIndex:lastMatchedPointIndexOnReferenceRoute:rollingBufferStartIndexOnReferenceRoute:matrixCellIndexForLastMatchedPoint:referenceRouteTotalLength:timestampOfLastMatchedPointOnReferenceRoute:registeredTimeAtThresholdDistance:endOfRaceTimeThreshold:nearestNeighborMaximumAcceptedDistance:]
  -[CLRacingRouteVariables raceStartPointDetected]
  -[CLRacingRouteVariables raceEndPointDetected]
  -[CLRacingRouteVariables userIsOffRoute]
  -[CLRacingRouteVariables projectedOnNearestPoint]
  -[CLRacingRouteVariables raceSessionExpired]
  -[CLRacingRouteVariables rollingBufferReachedEndOfReferenceRoute]
  -[CLRacingRouteVariables routeConfigurationSuccessful]
  -[CLRacingRouteVariables racingRouteAnalyticsSent]
  -[CLRacingRouteVariables prematureRaceEndDetected]
  -[CLRacingRouteVariables referenceRouteTotalLengthDetermined]
  -[CLRacingRouteVariables locationPointIsOutsideOfAcceptedRange]
  -[CLRacingRouteVariables locationPointNotMatched]
  -[CLRacingRouteVariables routePointsBufferSize]
  -[CLRacingRouteVariables numberOfRoutePointsToAdd]
  -[CLRacingRouteVariables offRouteGraceDuration]
  -[CLRacingRouteVariables matchedPointCounter]
  -[CLRacingRouteVariables referenceRouteDataPointCounter]
  -[CLRacingRouteVariables currentRouteDataPointCounter]
  -[CLRacingRouteVariables offRouteDataPointCounter]
  -[CLRacingRouteVariables inutileDataPointCounter]
  -[CLRacingRouteVariables rollingBufferUpdateCounter]
  -[CLRacingRouteVariables lastMatchedPointIndex]
  -[CLRacingRouteVariables lastMatchedPointIndexOnReferenceRoute]
  -[CLRacingRouteVariables rollingBufferStartIndexOnReferenceRoute]
  -[CLRacingRouteVariables matrixCellIndexForLastMatchedPoint]
  -[CLRacingRouteVariables referenceRouteTotalLength]
  -[CLRacingRouteVariables timestampOfLastMatchedPointOnReferenceRoute]
  -[CLRacingRouteVariables registeredTimeAtThresholdDistance]
  -[CLRacingRouteVariables endOfRaceTimeThreshold]
  -[CLRacingRouteVariables nearestNeighborMaximumAcceptedDistance]


CLRacingRouteParameters : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *routeMatrixIndexVec
 @property  CLRacingRouteVariables *racingRouteVariables
 @property  CLRacingRouteState *startPointOnCurrentRoute
 @property  CLRacingRouteState *startPointOnReferenceRoute
 @property  CLRacingRouteState *lastOnRouteDataPoint
 @property  CLRacingRouteState *lastProjectedDataPoint
 @property  CLRouteBoundingBox *routeBoundingBox

  // class methods
  +[CLRacingRouteParameters supportsSecureCoding]

  // instance methods
  -[CLRacingRouteParameters encodeWithCoder:]
  -[CLRacingRouteParameters copyWithZone:]
  -[CLRacingRouteParameters initWithCoder:]
  -[CLRacingRouteParameters initWithRouteMatrixIndexVec:racingRouteVariables:startPointOnCurrentRoute:startPointOnReferenceRoute:lastOnRouteDataPoint:lastProjectedDataPoint:routeBoundingBox:]
  -[CLRacingRouteParameters routeMatrixIndexVec]
  -[CLRacingRouteParameters racingRouteVariables]
  -[CLRacingRouteParameters startPointOnCurrentRoute]
  -[CLRacingRouteParameters startPointOnReferenceRoute]
  -[CLRacingRouteParameters lastOnRouteDataPoint]
  -[CLRacingRouteParameters lastProjectedDataPoint]
  -[CLRacingRouteParameters routeBoundingBox]


CLFindMyAccessoryWildConfiguration : NSObject <NSSecureCoding>
 @property  NSDate *desiredKeyRollDate
 @property  unsigned int keyRollInterval
 @property  unsigned short keysRemaining
 @property  unsigned short keyCount

  // class methods
  +[CLFindMyAccessoryWildConfiguration supportsSecureCoding]

  // instance methods
  -[CLFindMyAccessoryWildConfiguration encodeWithCoder:]
  -[CLFindMyAccessoryWildConfiguration dealloc]
  -[CLFindMyAccessoryWildConfiguration init]
  -[CLFindMyAccessoryWildConfiguration initWithCoder:]
  -[CLFindMyAccessoryWildConfiguration encodeConfiguration]
  -[CLFindMyAccessoryWildConfiguration desiredKeyRollDate]
  -[CLFindMyAccessoryWildConfiguration initWithDesiredNextKeyRollDate:keyRollInterval:keysRemainingInWildPeriod:wildPeriodKeyCount:]
  -[CLFindMyAccessoryWildConfiguration keyRollInterval]
  -[CLFindMyAccessoryWildConfiguration keysRemaining]
  -[CLFindMyAccessoryWildConfiguration keyCount]


CLLocationInternal : NSObject
  // instance methods
  -[CLLocationInternal dealloc]
  -[CLLocationInternal initWithClientLocation:clientLocationPrivate:coarseMetaData:]
  -[CLLocationInternal initWithClientLocation:coarseMetaData:]
  -[CLLocationInternal initWithClientLocation:]
  -[CLLocationInternal initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:fusionInfo:rawHorizontalAccuracy:rawAltitude:rawVerticalAccuracy:rawCourseAccuracy:positionContextStateType:probabilityPositionContextStateIndoor:probabilityPositionContextStateOutdoor:gnssOdometerInfo:]
  -[CLLocationInternal initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:fusionInfo:rawHorizontalAccuracy:rawAltitude:rawVerticalAccuracy:rawCourseAccuracy:positionContextStateType:probabilityPositionContextStateIndoor:probabilityPositionContextStateOutdoor:gnssOdometerInfo:coarseMetaData:]
  -[CLLocationInternal copyWithZone:]
  -[CLLocationInternal initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:]
  -[CLLocationInternal initWithClientLocation:clientLocationPrivate:]


CLFloor : NSObject <NSCopying, NSSecureCoding>
 @property  long long level

  // class methods
  +[CLFloor supportsSecureCoding]

  // instance methods
  -[CLFloor encodeWithCoder:]
  -[CLFloor initWithLevel:]
  -[CLFloor copyWithZone:]
  -[CLFloor level]
  -[CLFloor initWithCoder:]


CLLocationSourceInformation : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL isSimulatedBySoftware
 @property  BOOL isProducedByAccessory

  // class methods
  +[CLLocationSourceInformation supportsSecureCoding]

  // instance methods
  -[CLLocationSourceInformation initWithSoftwareSimulationState:andExternalAccessoryState:]
  -[CLLocationSourceInformation encodeWithCoder:]
  -[CLLocationSourceInformation copyWithZone:]
  -[CLLocationSourceInformation isSimulatedBySoftware]
  -[CLLocationSourceInformation isProducedByAccessory]
  -[CLLocationSourceInformation initWithCoder:]


CLLocation : NSObject <NSCopying, NSSecureCoding>
 @property  CLLocationMatchInfo *matchInfo
 @property  _CLLocationGroundAltitude *_groundAltitude
 @property  _CLLocationFusionInfo *_fusionInfo
 @property  CLLocationGnssOdometerInfo *gnssOdometerInfo
 @property  {?=i{?=dd}ddddddddidi{?=dd}diIiiidB} clientLocation
 @property  NSString *iso6709Notation
 @property  int type
 @property  NSData *coarseMetaData
 @property  int referenceFrame
 @property  {CLLocationCoordinate2D=dd} rawCoordinate
 @property  double rawHorizontalAccuracy
 @property  double rawAltitude
 @property  double rawVerticalAccuracy
 @property  double rawCourse
 @property  double rawCourseAccuracy
 @property  unsigned int integrity
 @property  double trustedTimestamp
 @property  BOOL isAltitudeWgs84Available
 @property  double altitudeWgs84
 @property  BOOL coordinateFused
 @property  BOOL coordinateFusedWithVL
 @property  int signalEnvironmentType
 @property  int positionContextState
 @property  double probabilityPositionContextStateIndoor
 @property  double probabilityPositionContextStateOutdoor
 @property  {CLLocationCoordinate2D=dd} coordinate
 @property  double altitude
 @property  double ellipsoidalAltitude
 @property  double horizontalAccuracy
 @property  double verticalAccuracy
 @property  double course
 @property  double courseAccuracy
 @property  double speed
 @property  double speedAccuracy
 @property  NSDate *timestamp
 @property  CLFloor *floor
 @property  CLLocationSourceInformation *sourceInformation

  // class methods
  +[CLLocation supportsSecureCoding]

  // instance methods
  -[CLLocation horizontalAccuracy]
  -[CLLocation setHorizontalAccuracy:]
  -[CLLocation altitude]
  -[CLLocation course]
  -[CLLocation initWithLatitude:longitude:]
  -[CLLocation isCoordinateFused]
  -[CLLocation coordinate]
  -[CLLocation isCoordinateFusedWithVL]
  -[CLLocation encodeWithCoder:]
  -[CLLocation type]
  -[CLLocation jsonObject]
  -[CLLocation dealloc]
  -[CLLocation setReferenceFrame:]
  -[CLLocation isAltitudeWgs84Available]
  -[CLLocation initWithClientLocation:clientLocationPrivate:coarseMetaData:]
  -[CLLocation initWithClientLocation:coarseMetaData:]
  -[CLLocation referenceFrame]
  -[CLLocation verticalAccuracy]
  -[CLLocation speed]
  -[CLLocation initWithClientLocation:]
  -[CLLocation speedAccuracy]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:fusionInfo:rawHorizontalAccuracy:rawAltitude:rawVerticalAccuracy:rawCourseAccuracy:positionContextStateType:probabilityPositionContextStateIndoor:probabilityPositionContextStateOutdoor:gnssOdometerInfo:coarseMetaData:]
  -[CLLocation shortDescription]
  -[CLLocation copyWithZone:]
  -[CLLocation timestamp]
  -[CLLocation distanceFromLocation:]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:]
  -[CLLocation courseAccuracy]
  -[CLLocation initWithClientLocation:clientLocationPrivate:]
  -[CLLocation altitudeWgs84]
  -[CLLocation init]
  -[CLLocation matchInfo]
  -[CLLocation initWithCoder:]
  -[CLLocation _groundAltitude]
  -[CLLocation rawCoordinate]
  -[CLLocation rawCourse]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:]
  -[CLLocation initWithClientLocation:matchInfo:]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:]
  -[CLLocation snapToResolution:]
  -[CLLocation floor]
  -[CLLocation clientLocation]
  -[CLLocation coarseMetaData]
  -[CLLocation propagateLocationToTime:]
  -[CLLocation unmatch]
  -[CLLocation _initWithRTLocation:]
  -[CLLocation getDistanceFrom:]
  -[CLLocation _initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:floor:sourceParams:]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:sourceInfo:]
  -[CLLocation rawAltitude]
  -[CLLocation ellipsoidalAltitude]
  -[CLLocation rawHorizontalAccuracy]
  -[CLLocation rawVerticalAccuracy]
  -[CLLocation rawCourseAccuracy]
  -[CLLocation integrity]
  -[CLLocation trustedTimestamp]
  -[CLLocation signalEnvironmentType]
  -[CLLocation positionContextState]
  -[CLLocation probabilityPositionContextStateIndoor]
  -[CLLocation probabilityPositionContextStateOutdoor]
  -[CLLocation sourceInformation]
  -[CLLocation iso6709Notation]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:fusionInfo:rawHorizontalAccuracy:rawCourseAccuracy:coarseMetaData:]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:]
  -[CLLocation _fusionInfo]
  -[CLLocation gnssOdometerInfo]


CLEmergencyLocationUsabilityCriteria : NSObject
 @property  BOOL vuncCheckRequiredForUsability
 @property  BOOL altitudeStitchingEnabled
 @property  double maxUsableAge
 @property  double maxUsableHunc
 @property  double maxUsableVunc
 @property  unsigned int minUsableIntegrity

  // instance methods
  -[CLEmergencyLocationUsabilityCriteria init]
  -[CLEmergencyLocationUsabilityCriteria printUsabilityCriteria:]
  -[CLEmergencyLocationUsabilityCriteria vuncCheckRequiredForUsability]
  -[CLEmergencyLocationUsabilityCriteria setVuncCheckRequiredForUsability:]
  -[CLEmergencyLocationUsabilityCriteria altitudeStitchingEnabled]
  -[CLEmergencyLocationUsabilityCriteria setAltitudeStitchingEnabled:]
  -[CLEmergencyLocationUsabilityCriteria maxUsableAge]
  -[CLEmergencyLocationUsabilityCriteria setMaxUsableAge:]
  -[CLEmergencyLocationUsabilityCriteria maxUsableHunc]
  -[CLEmergencyLocationUsabilityCriteria setMaxUsableHunc:]
  -[CLEmergencyLocationUsabilityCriteria maxUsableVunc]
  -[CLEmergencyLocationUsabilityCriteria setMaxUsableVunc:]
  -[CLEmergencyLocationUsabilityCriteria minUsableIntegrity]
  -[CLEmergencyLocationUsabilityCriteria setMinUsableIntegrity:]


CLEmergencyLocationSelectorConfig : NSObject
 @property  long long feature
 @property  BOOL firstUpdateEnabled
 @property  double firstUpdateTimeout
 @property  BOOL periodicUpdatesEnabled
 @property  CLEmergencyLocationUsabilityCriteria *firstLocationUsabilityCriteria
 @property  double firstLocationMaxEarlyReturnHunc
 @property  double firstLocationMaxEarlyReturnVunc
 @property  CLEmergencyLocationUsabilityCriteria *locationUpdateUsabilityCriteria
 @property  double locationUpdateHuncReductionToSendEarly
 @property  double locationUpdateVuncReductionToSendEarly
 @property  double locationUpdateDistanceMovedToSendEarly
 @property  double locationUpdateChangeInAltitudeToSendEarly
 @property  BOOL firstLocationEarlyReturnEnabled
 @property  double firstLocationTimeout
 @property  double locationUpdateTimeout
 @property  double locationUpdateMinDelay

  // class methods
  +[CLEmergencyLocationSelectorConfig featureString:]

  // instance methods
  -[CLEmergencyLocationSelectorConfig setFeature:]
  -[CLEmergencyLocationSelectorConfig feature]
  -[CLEmergencyLocationSelectorConfig dealloc]
  -[CLEmergencyLocationSelectorConfig initForFeature:withUpdatesEnabled:]
  -[CLEmergencyLocationSelectorConfig setDefaultsForSIP]
  -[CLEmergencyLocationSelectorConfig printConfiguration]
  -[CLEmergencyLocationSelectorConfig firstLocationEarlyReturnEnabled]
  -[CLEmergencyLocationSelectorConfig setFirstLocationEarlyReturnEnabled:]
  -[CLEmergencyLocationSelectorConfig firstLocationTimeout]
  -[CLEmergencyLocationSelectorConfig setFirstLocationTimeout:]
  -[CLEmergencyLocationSelectorConfig locationUpdateTimeout]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateTimeout:]
  -[CLEmergencyLocationSelectorConfig locationUpdateMinDelay]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateMinDelay:]
  -[CLEmergencyLocationSelectorConfig firstUpdateEnabled]
  -[CLEmergencyLocationSelectorConfig setFirstUpdateEnabled:]
  -[CLEmergencyLocationSelectorConfig firstUpdateTimeout]
  -[CLEmergencyLocationSelectorConfig setFirstUpdateTimeout:]
  -[CLEmergencyLocationSelectorConfig periodicUpdatesEnabled]
  -[CLEmergencyLocationSelectorConfig setPeriodicUpdatesEnabled:]
  -[CLEmergencyLocationSelectorConfig firstLocationUsabilityCriteria]
  -[CLEmergencyLocationSelectorConfig setFirstLocationUsabilityCriteria:]
  -[CLEmergencyLocationSelectorConfig firstLocationMaxEarlyReturnHunc]
  -[CLEmergencyLocationSelectorConfig setFirstLocationMaxEarlyReturnHunc:]
  -[CLEmergencyLocationSelectorConfig firstLocationMaxEarlyReturnVunc]
  -[CLEmergencyLocationSelectorConfig setFirstLocationMaxEarlyReturnVunc:]
  -[CLEmergencyLocationSelectorConfig locationUpdateUsabilityCriteria]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateUsabilityCriteria:]
  -[CLEmergencyLocationSelectorConfig locationUpdateHuncReductionToSendEarly]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateHuncReductionToSendEarly:]
  -[CLEmergencyLocationSelectorConfig locationUpdateVuncReductionToSendEarly]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateVuncReductionToSendEarly:]
  -[CLEmergencyLocationSelectorConfig locationUpdateDistanceMovedToSendEarly]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateDistanceMovedToSendEarly:]
  -[CLEmergencyLocationSelectorConfig locationUpdateChangeInAltitudeToSendEarly]
  -[CLEmergencyLocationSelectorConfig setLocationUpdateChangeInAltitudeToSendEarly:]


CLEmergencyLocationSelector : NSObject <CLLocationManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CLEmergencyLocationSelector dealloc]
  -[CLEmergencyLocationSelector stopSession]
  -[CLEmergencyLocationSelector locationManager:didUpdateLocations:]
  -[CLEmergencyLocationSelector initWithConfig:bundle:delegate:queue:]


CLAssertion : NSObject
  // instance methods
  -[CLAssertion dealloc]
  -[CLAssertion invalidate]
  -[CLAssertion initWithRegistrationMessageName:messageDictionary:]


CLFindMyAccessorySoundSequence : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *encodedSequence
 @property  unsigned long type

  // class methods
  +[CLFindMyAccessorySoundSequence supportsSecureCoding]
  +[CLFindMyAccessorySoundSequence defaultSequence]
  +[CLFindMyAccessorySoundSequence shortSequence]
  +[CLFindMyAccessorySoundSequence rangingSequence]

  // instance methods
  -[CLFindMyAccessorySoundSequence encodeWithCoder:]
  -[CLFindMyAccessorySoundSequence type]
  -[CLFindMyAccessorySoundSequence dealloc]
  -[CLFindMyAccessorySoundSequence initWithType:]
  -[CLFindMyAccessorySoundSequence copyWithZone:]
  -[CLFindMyAccessorySoundSequence init]
  -[CLFindMyAccessorySoundSequence initWithCoder:]
  -[CLFindMyAccessorySoundSequence initWithType:encodedSequence:]
  -[CLFindMyAccessorySoundSequence addSoundBlockWithAsset:loopCount:duration:]
  -[CLFindMyAccessorySoundSequence encodedSequence]


CLRoutePoint : NSObject <NSCopying, NSSecureCoding>
 @property  double latitude_deg
 @property  double longitude_deg
 @property  double altitude_m
 @property  double odometer_m
 @property  double timestamp_s
 @property  int signalEnvironmentType

  // class methods
  +[CLRoutePoint supportsSecureCoding]

  // instance methods
  -[CLRoutePoint encodeWithCoder:]
  -[CLRoutePoint timestamp_s]
  -[CLRoutePoint copyWithZone:]
  -[CLRoutePoint isEqual:]
  -[CLRoutePoint initWithCoder:]
  -[CLRoutePoint signalEnvironmentType]
  -[CLRoutePoint initWithLatitude:longitude:altitude:odometer:timestamp:signalEnvironmentType:]
  -[CLRoutePoint latitude_deg]
  -[CLRoutePoint longitude_deg]
  -[CLRoutePoint altitude_m]
  -[CLRoutePoint odometer_m]


CLRacingRouteManager : NSObject
  // instance methods
  -[CLRacingRouteManager .cxx_construct]
  -[CLRacingRouteManager reset]
  -[CLRacingRouteManager .cxx_destruct]
  -[CLRacingRouteManager numberOfRoutePointsToAdd]
  -[CLRacingRouteManager configureWithWorkoutActivityType:bufferSize:offRouteGraceDurationInSec:]
  -[CLRacingRouteManager addRoutePoints:]
  -[CLRacingRouteManager advanceToPoint:]
  -[CLRacingRouteManager getRaceParameters]
  -[CLRacingRouteManager setRaceParameters:]
  -[CLRacingRouteManager recoverRaceAtTimestamp]


_CLRangingPeerInternal : NSObject <NSCopying>
  // instance methods
  -[_CLRangingPeerInternal dealloc]
  -[_CLRangingPeerInternal copyWithZone:]
  -[_CLRangingPeerInternal initWithMacAddressAsUInt:secureRangingKeyID:]


_CLRangingPeerDistanceInternal : NSObject <NSCopying>
  // instance methods
  -[_CLRangingPeerDistanceInternal dealloc]
  -[_CLRangingPeerDistanceInternal copyWithZone:]
  -[_CLRangingPeerDistanceInternal initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:]


_CLRangingPeer : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long macAddress
 @property  NSData *secureRangingKeyID

  // class methods
  +[_CLRangingPeer supportsSecureCoding]
  +[_CLRangingPeer uintMacAddressFromString:]
  +[_CLRangingPeer hexStringMacAddressFromUInt:]

  // instance methods
  -[_CLRangingPeer macAddress]
  -[_CLRangingPeer encodeWithCoder:]
  -[_CLRangingPeer dealloc]
  -[_CLRangingPeer copyWithZone:]
  -[_CLRangingPeer isEqual:]
  -[_CLRangingPeer init]
  -[_CLRangingPeer initWithCoder:]
  -[_CLRangingPeer initWithMacAddressAsUInt:secureRangingKeyID:]
  -[_CLRangingPeer initWithMacAddressAsString:secureRangingKeyID:]
  -[_CLRangingPeer initWithMacAddressAsData:secureRangingKeyID:]
  -[_CLRangingPeer secureRangingKeyID]
  -[_CLRangingPeer getMacAddressAsString]
  -[_CLRangingPeer isEqualToPeer:]


_CLRangingPeerDistance : NSObject <NSCopying, NSSecureCoding>
 @property  _CLRangingPeer *peer
 @property  NSDate *timestamp
 @property  NSDate *date
 @property  NSNumber *distanceMeters
 @property  NSNumber *accuracyMeters
 @property  BOOL initiator
 @property  BOOL shouldUnlock

  // class methods
  +[_CLRangingPeerDistance supportsSecureCoding]

  // instance methods
  -[_CLRangingPeerDistance encodeWithCoder:]
  -[_CLRangingPeerDistance dealloc]
  -[_CLRangingPeerDistance date]
  -[_CLRangingPeerDistance peer]
  -[_CLRangingPeerDistance copyWithZone:]
  -[_CLRangingPeerDistance timestamp]
  -[_CLRangingPeerDistance initiator]
  -[_CLRangingPeerDistance init]
  -[_CLRangingPeerDistance initWithCoder:]
  -[_CLRangingPeerDistance distanceMeters]
  -[_CLRangingPeerDistance isInitiator]
  -[_CLRangingPeerDistance initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:]
  -[_CLRangingPeerDistance initWithPeer:timestamp:distanceMeters:accuracyMeters:initiator:]
  -[_CLRangingPeerDistance initWithPeer:date:distanceMeters:accuracyMeters:initiator:]
  -[_CLRangingPeerDistance accuracyMeters]
  -[_CLRangingPeerDistance shouldUnlock]


CLLocationIndependenceAssertion : CLAssertion
  // class methods
  +[CLLocationIndependenceAssertion newAssertionWithReason:]


_CLVLLocalizationMaps488Details : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long inliersCount
 @property  ^f points2D
 @property  ^d points3D
 @property  ^i inlierIndices
 @property  ^d slamOrigin
 @property  unsigned long slamTracksCount
 @property  ^f slamTracks
 @property  unsigned long descriptorDimension
 @property  char * slamTrackDescriptors
 @property  ^s slamTrackObservations
 @property  unsigned long totalObservationsCount
 @property  ^f slamTracks2D
 @property  ^s slamTrackImageIndices
 @property  unsigned long frameCount
 @property  ^i perFrameVioStatusCodes
 @property  ^f perFrameVioPoses
 @property  ^f perFrameCalibrationMatrices
 @property  ^f perFrameDistortion
 @property  ^d resultPoseRotation
 @property  ^d resultPoseTranslation

  // class methods
  +[_CLVLLocalizationMaps488Details supportsSecureCoding]

  // instance methods
  -[_CLVLLocalizationMaps488Details frameCount]
  -[_CLVLLocalizationMaps488Details encodeWithCoder:]
  -[_CLVLLocalizationMaps488Details dealloc]
  -[_CLVLLocalizationMaps488Details copyWithZone:]
  -[_CLVLLocalizationMaps488Details initWithCoder:]
  -[_CLVLLocalizationMaps488Details descriptionWithMemberIndent:endIndent:]
  -[_CLVLLocalizationMaps488Details resetInliers]
  -[_CLVLLocalizationMaps488Details resetSlamTracks]
  -[_CLVLLocalizationMaps488Details resetFrames]
  -[_CLVLLocalizationMaps488Details setInliersCount:points2D:points3D:inlierIndices:]
  -[_CLVLLocalizationMaps488Details setSlamTracksCount:slamTracks:descriptorDimension:slamTrackDescriptors:slamTrackObservations:slamTracks2D:slamTrackImageIndices:]
  -[_CLVLLocalizationMaps488Details setFrameCount:perFrameVioStatusCodes:perFrameVioPoses:perFrameCalibrationMatrices:perFrameDistortion:]
  -[_CLVLLocalizationMaps488Details slamOrigin]
  -[_CLVLLocalizationMaps488Details setSlamOrigin:]
  -[_CLVLLocalizationMaps488Details resultPoseRotation]
  -[_CLVLLocalizationMaps488Details setResultPoseRotation:]
  -[_CLVLLocalizationMaps488Details resultPoseTranslation]
  -[_CLVLLocalizationMaps488Details setResultPoseTranslation:]
  -[_CLVLLocalizationMaps488Details inliersCount]
  -[_CLVLLocalizationMaps488Details points2D]
  -[_CLVLLocalizationMaps488Details points3D]
  -[_CLVLLocalizationMaps488Details inlierIndices]
  -[_CLVLLocalizationMaps488Details slamTracksCount]
  -[_CLVLLocalizationMaps488Details slamTracks]
  -[_CLVLLocalizationMaps488Details descriptorDimension]
  -[_CLVLLocalizationMaps488Details slamTrackDescriptors]
  -[_CLVLLocalizationMaps488Details slamTrackObservations]
  -[_CLVLLocalizationMaps488Details totalObservationsCount]
  -[_CLVLLocalizationMaps488Details slamTracks2D]
  -[_CLVLLocalizationMaps488Details slamTrackImageIndices]
  -[_CLVLLocalizationMaps488Details perFrameVioStatusCodes]
  -[_CLVLLocalizationMaps488Details perFrameVioPoses]
  -[_CLVLLocalizationMaps488Details perFrameCalibrationMatrices]
  -[_CLVLLocalizationMaps488Details perFrameDistortion]


_CLLSLLocationCoordinate : NSObject <NSCopying, NSSecureCoding>
 @property  double latitude
 @property  double longitude

  // class methods
  +[_CLLSLLocationCoordinate supportsSecureCoding]

  // instance methods
  -[_CLLSLLocationCoordinate latitude]
  -[_CLLSLLocationCoordinate initWithLatitude:longitude:]
  -[_CLLSLLocationCoordinate initWithCoordinate:]
  -[_CLLSLLocationCoordinate setLatitude:]
  -[_CLLSLLocationCoordinate encodeWithCoder:]
  -[_CLLSLLocationCoordinate setLongitude:]
  -[_CLLSLLocationCoordinate longitude]
  -[_CLLSLLocationCoordinate copyWithZone:]
  -[_CLLSLLocationCoordinate initWithCoder:]


_CLLSLLocation : NSObject <NSCopying, NSSecureCoding>
 @property  _CLLSLLocationCoordinate *coordinate
 @property  double altitude
 @property  double timestamp

  // class methods
  +[_CLLSLLocation supportsSecureCoding]

  // instance methods
  -[_CLLSLLocation altitude]
  -[_CLLSLLocation setAltitude:]
  -[_CLLSLLocation initWithLatitude:longitude:]
  -[_CLLSLLocation setTimestamp:]
  -[_CLLSLLocation initWithCoordinate:]
  -[_CLLSLLocation coordinate]
  -[_CLLSLLocation encodeWithCoder:]
  -[_CLLSLLocation dealloc]
  -[_CLLSLLocation copyWithZone:]
  -[_CLLSLLocation timestamp]
  -[_CLLSLLocation setCoordinate:]
  -[_CLLSLLocation initWithCoder:]
  -[_CLLSLLocation descriptionWithMemberIndent:endIndent:]
  -[_CLLSLLocation initWithLatitude:longitude:altitude:timetamp:]
  -[_CLLSLLocation initWithCoordinate:altitude:timetamp:]


_CLLSLMapRoadSegment : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long roadID
 @property  NSArray *polylines

  // class methods
  +[_CLLSLMapRoadSegment supportsSecureCoding]

  // instance methods
  -[_CLLSLMapRoadSegment encodeWithCoder:]
  -[_CLLSLMapRoadSegment dealloc]
  -[_CLLSLMapRoadSegment polylines]
  -[_CLLSLMapRoadSegment copyWithZone:]
  -[_CLLSLMapRoadSegment initWithCoder:]
  -[_CLLSLMapRoadSegment roadID]
  -[_CLLSLMapRoadSegment setRoadID:]
  -[_CLLSLMapRoadSegment descriptionWithMemberIndent:endIndent:]
  -[_CLLSLMapRoadSegment setPolylines:]


_CLLSLHeadingSupplInfo : NSObject <NSCopying, NSSecureCoding>
 @property  _CLLSLMapRoadSegment *roadSegment

  // class methods
  +[_CLLSLHeadingSupplInfo supportsSecureCoding]

  // instance methods
  -[_CLLSLHeadingSupplInfo encodeWithCoder:]
  -[_CLLSLHeadingSupplInfo dealloc]
  -[_CLLSLHeadingSupplInfo copyWithZone:]
  -[_CLLSLHeadingSupplInfo initWithCoder:]
  -[_CLLSLHeadingSupplInfo descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeadingSupplInfo roadSegment]
  -[_CLLSLHeadingSupplInfo setRoadSegment:]


_CLLSLHeading : NSObject <NSCopying, NSSecureCoding>
 @property  double timestamp
 @property  {?=[3]} rotationFromGlobalToDeviceFrame
 @property  {?=[3]} rotationFromGlobalToCameraFrame
 @property  void rotationalAccuracyInRadians
 @property  double confidence
 @property  unsigned long globalReferenceFrame
 @property  _CLLSLLocation *location
 @property  _CLLSLHeadingSupplInfo *supplemantaryInfo

  // class methods
  +[_CLLSLHeading supportsSecureCoding]

  // instance methods
  -[_CLLSLHeading confidence]
  -[_CLLSLHeading setTimestamp:]
  -[_CLLSLHeading encodeWithCoder:]
  -[_CLLSLHeading dealloc]
  -[_CLLSLHeading setLocation:]
  -[_CLLSLHeading copyWithZone:]
  -[_CLLSLHeading timestamp]
  -[_CLLSLHeading location]
  -[_CLLSLHeading setConfidence:]
  -[_CLLSLHeading initWithCoder:]
  -[_CLLSLHeading descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeading rotationFromGlobalToDeviceFrame]
  -[_CLLSLHeading setRotationFromGlobalToDeviceFrame:]
  -[_CLLSLHeading rotationFromGlobalToCameraFrame]
  -[_CLLSLHeading setRotationFromGlobalToCameraFrame:]
  -[_CLLSLHeading rotationalAccuracyInRadians]
  -[_CLLSLHeading setRotationalAccuracyInRadians:]
  -[_CLLSLHeading globalReferenceFrame]
  -[_CLLSLHeading setGlobalReferenceFrame:]
  -[_CLLSLHeading supplemantaryInfo]
  -[_CLLSLHeading setSupplemantaryInfo:]


_CLLSLHeadingEstimation : NSObject <NSCopying, NSSecureCoding>
 @property  int status
 @property  NSArray *headings

  // class methods
  +[_CLLSLHeadingEstimation supportsSecureCoding]

  // instance methods
  -[_CLLSLHeadingEstimation encodeWithCoder:]
  -[_CLLSLHeadingEstimation status]
  -[_CLLSLHeadingEstimation dealloc]
  -[_CLLSLHeadingEstimation setStatus:]
  -[_CLLSLHeadingEstimation copyWithZone:]
  -[_CLLSLHeadingEstimation initWithCoder:]
  -[_CLLSLHeadingEstimation descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeadingEstimation headings]
  -[_CLLSLHeadingEstimation setHeadings:]


_CLMicroLocationClusterIdAndClusterData : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *clusterIdentifier
 @property  double meanBLEReceivedSignalStrength
 @property  double meanUWBRange

  // class methods
  +[_CLMicroLocationClusterIdAndClusterData supportsSecureCoding]

  // instance methods
  -[_CLMicroLocationClusterIdAndClusterData clusterIdentifier]
  -[_CLMicroLocationClusterIdAndClusterData encodeWithCoder:]
  -[_CLMicroLocationClusterIdAndClusterData dealloc]
  -[_CLMicroLocationClusterIdAndClusterData copyWithZone:]
  -[_CLMicroLocationClusterIdAndClusterData initWithCoder:]
  -[_CLMicroLocationClusterIdAndClusterData initWithClusterIdentifier:meanBleRssi:meanUwbRange:]
  -[_CLMicroLocationClusterIdAndClusterData meanBLEReceivedSignalStrength]
  -[_CLMicroLocationClusterIdAndClusterData meanUWBRange]


_CLMicroLocationSourceIdAndSourceData : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *sourceIdsIdentifier
 @property  NSArray *sourceData

  // class methods
  +[_CLMicroLocationSourceIdAndSourceData supportsSecureCoding]

  // instance methods
  -[_CLMicroLocationSourceIdAndSourceData encodeWithCoder:]
  -[_CLMicroLocationSourceIdAndSourceData dealloc]
  -[_CLMicroLocationSourceIdAndSourceData copyWithZone:]
  -[_CLMicroLocationSourceIdAndSourceData initWithCoder:]
  -[_CLMicroLocationSourceIdAndSourceData initWithSourceIdsIdentifier:sourceData:]
  -[_CLMicroLocationSourceIdAndSourceData sourceIdsIdentifier]
  -[_CLMicroLocationSourceIdAndSourceData sourceData]


_CLMicroLocationSourcesStatisticsResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *sourcesData

  // class methods
  +[_CLMicroLocationSourcesStatisticsResult supportsSecureCoding]

  // instance methods
  -[_CLMicroLocationSourcesStatisticsResult encodeWithCoder:]
  -[_CLMicroLocationSourcesStatisticsResult dealloc]
  -[_CLMicroLocationSourcesStatisticsResult copyWithZone:]
  -[_CLMicroLocationSourcesStatisticsResult initWithCoder:]
  -[_CLMicroLocationSourcesStatisticsResult initWithSourcesData:]
  -[_CLMicroLocationSourcesStatisticsResult sourcesData]


_CLVIOEstimation : NSObject <NSCopying, NSSecureCoding>
 @property  int trackingState
 @property  double originTimestamp
 @property  double timestamp
 @property  {?=QCCCCCCCCCCC} inertialStateInfo
 @property  NSData *inertialState
 @property  {?=QCCCCCCCCCCC} inertialCovarianceInfo
 @property  NSData *inertialCovariance
 @property  {?=[4]} cameraPose
 @property  {?=[3]} cameraIntrinsics
 @property  {CGSize=dd} cameraImageResolution

  // class methods
  +[_CLVIOEstimation supportsSecureCoding]

  // instance methods
  -[_CLVIOEstimation setTimestamp:]
  -[_CLVIOEstimation encodeWithCoder:]
  -[_CLVIOEstimation dealloc]
  -[_CLVIOEstimation copyWithZone:]
  -[_CLVIOEstimation timestamp]
  -[_CLVIOEstimation initWithCoder:]
  -[_CLVIOEstimation descriptionWithMemberIndent:endIndent:]
  -[_CLVIOEstimation trackingState]
  -[_CLVIOEstimation setTrackingState:]
  -[_CLVIOEstimation originTimestamp]
  -[_CLVIOEstimation setOriginTimestamp:]
  -[_CLVIOEstimation inertialStateInfo]
  -[_CLVIOEstimation setInertialStateInfo:]
  -[_CLVIOEstimation inertialState]
  -[_CLVIOEstimation setInertialState:]
  -[_CLVIOEstimation inertialCovarianceInfo]
  -[_CLVIOEstimation setInertialCovarianceInfo:]
  -[_CLVIOEstimation inertialCovariance]
  -[_CLVIOEstimation setInertialCovariance:]
  -[_CLVIOEstimation cameraPose]
  -[_CLVIOEstimation setCameraPose:]
  -[_CLVIOEstimation cameraIntrinsics]
  -[_CLVIOEstimation setCameraIntrinsics:]
  -[_CLVIOEstimation cameraImageResolution]
  -[_CLVIOEstimation setCameraImageResolution:]


CLFindMyAccessoryFragmentAccumulator : NSObject
 @property  NSMutableDictionary *uuidToData
 @property  unsigned long maxBytesPerUUID

  // class methods
  +[CLFindMyAccessoryFragmentAccumulator convertDataStatusToString:]

  // instance methods
  -[CLFindMyAccessoryFragmentAccumulator dealloc]
  -[CLFindMyAccessoryFragmentAccumulator dataForUUID:]
  -[CLFindMyAccessoryFragmentAccumulator initWithMaxBytesPerUUID:]
  -[CLFindMyAccessoryFragmentAccumulator clearForUUID:]
  -[CLFindMyAccessoryFragmentAccumulator getDataStatusForUUID:]
  -[CLFindMyAccessoryFragmentAccumulator appendData:forUUID:]
  -[CLFindMyAccessoryFragmentAccumulator uuidToData]
  -[CLFindMyAccessoryFragmentAccumulator setUuidToData:]
  -[CLFindMyAccessoryFragmentAccumulator maxBytesPerUUID]
  -[CLFindMyAccessoryFragmentAccumulator setMaxBytesPerUUID:]


_CLVLLocalizationDebugInfo : NSObject <NSCopying, NSSecureCoding>
 @property  _CLVLLocalizationMaps488Details *maps488Details

  // class methods
  +[_CLVLLocalizationDebugInfo supportsSecureCoding]

  // instance methods
  -[_CLVLLocalizationDebugInfo encodeWithCoder:]
  -[_CLVLLocalizationDebugInfo dealloc]
  -[_CLVLLocalizationDebugInfo copyWithZone:]
  -[_CLVLLocalizationDebugInfo initWithCoder:]
  -[_CLVLLocalizationDebugInfo descriptionWithMemberIndent:endIndent:]
  -[_CLVLLocalizationDebugInfo initWithVLLocalizationDebugInfo:]
  -[_CLVLLocalizationDebugInfo maps488Details]
  -[_CLVLLocalizationDebugInfo setMaps488Details:]


GEOMapRegion(CLGeocoderExtras)
	// instance methods
	-[GEOMapRegion(CLGeocoderExtras) _initWithCircularRegion:]

GEOLocation(CLGeocoderExtras)
	// instance methods
	-[GEOLocation(CLGeocoderExtras) _initWithCLClientLocation:]

NSValue(NSValueCoreLocationExtensions)
	// class methods
	+[NSValue(NSValueCoreLocationExtensions) valueWithCLLocationCoordinate2D:]

01 00 0700 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLDispatchSilo 
01 00 0700 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLRunLoopSilo 
01 00 0700 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLServiceVendor 
01 00 0700 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLSilo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCoarseLocationMetadata 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOGeographicMetadataRequester 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocation 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapItemStorage 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapService 
01 00 0640 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionContext 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
