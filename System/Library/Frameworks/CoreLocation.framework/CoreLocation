|| __DATA.__objc_data _OBJC_CLASS_$_CLAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLBeacon
|| __DATA.__objc_data _OBJC_CLASS_$_CLBeaconIdentityConstraint
|| __DATA.__objc_data _OBJC_CLASS_$_CLEmergencyEnablementAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLFloor
|| __DATA.__objc_data _OBJC_CLASS_$_CLHarvester
|| __DATA.__objc_data _OBJC_CLASS_$_CLHeading
|| __DATA.__objc_data _OBJC_CLASS_$_CLInUseAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationIndependenceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationManagerRoutine
|| __DATA.__objc_data _OBJC_CLASS_$_CLLocationSmoother
|| __DATA.__objc_data _OBJC_CLASS_$_CLSimulationManager
|| __DATA.__objc_data _OBJC_CLASS_$_CLVehicleHeading
|| __DATA.__objc_data _OBJC_CLASS_$_CLVehicleSpeed
|| __DATA.__objc_data _OBJC_CLASS_$_CLVisit
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeading
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeadingEstimation
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLHeadingSupplInfo
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLLocation
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLLocationCoordinate
|| __DATA.__objc_data _OBJC_CLASS_$__CLLSLMapRoadSegment
|| __DATA.__objc_data _OBJC_CLASS_$__CLPolygonalRegion
|| __DATA.__objc_data _OBJC_CLASS_$__CLRangingPeer
|| __DATA.__objc_data _OBJC_CLASS_$__CLRangingPeerDistance
|| __DATA.__objc_data _OBJC_CLASS_$__CLVIOEstimation
|| __DATA.__objc_data _OBJC_CLASS_$__CLVertex
|| __DATA.__objc_data _OBJC_METACLASS_$_CLAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLBeacon
|| __DATA.__objc_data _OBJC_METACLASS_$_CLBeaconIdentityConstraint
|| __DATA.__objc_data _OBJC_METACLASS_$_CLEmergencyEnablementAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLFloor
|| __DATA.__objc_data _OBJC_METACLASS_$_CLHarvester
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationIndependenceAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationManagerRoutine
|| __DATA.__objc_data _OBJC_METACLASS_$_CLLocationSmoother
|| __DATA.__objc_data _OBJC_METACLASS_$_CLSimulationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVehicleHeading
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVehicleSpeed
|| __DATA.__objc_data _OBJC_METACLASS_$_CLVisit
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeading
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeadingEstimation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLHeadingSupplInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLLocation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLLocationCoordinate
|| __DATA.__objc_data _OBJC_METACLASS_$__CLLSLMapRoadSegment
|| __DATA.__objc_data _OBJC_METACLASS_$__CLPolygonalRegion
|| __DATA.__objc_data _OBJC_METACLASS_$__CLRangingPeer
|| __DATA.__objc_data _OBJC_METACLASS_$__CLRangingPeerDistance
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVIOEstimation
|| __DATA.__objc_data _OBJC_METACLASS_$__CLVertex
|| __DATA_CONST.__const _CLAppResetChangedNotification
|| __DATA_CONST.__const _CLAppStatusChangedNotification
|| __DATA_CONST.__const _CLAuthorizationStatusChangedNotification
|| __DATA_CONST.__const _CLBeaconRegionAnyIdentifier
|| __DATA_CONST.__const _CLDaemonStartedNotification
|| __DATA_CONST.__const _CLShouldDisplayStatusBarIconChangedNotification
|| __DATA_CONST.__const _CLTechStatusChangedNotification
|| __DATA_CONST.__const _kCLCommonLocationAlwaysAndWhenInUseUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationAlwaysUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonLocationWhenInUseUsageDescriptionKey
|| __DATA_CONST.__const _kCLCommonWKRunsIndependentlyOfCompanionAppKey
|| __DATA_CONST.__const _kCLCommonWKWatchOnlyKey
|| __DATA_CONST.__const _kCLErrorDomain
|| __DATA_CONST.__const _kCLErrorDomainPrivate
|| __DATA_CONST.__const _kCLErrorUserInfoAlternateRegionKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLBeaconRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLCircularRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLGeocoder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLLocationMatchInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLPlacemark
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLRegion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CLStateTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CLLocationGroundAltitude
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__CLPlaceInference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLBeaconRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLCircularRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLGeocoder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLHeading
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLInUseAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLLocationMatchInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLPlacemark
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLRegion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CLStateTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CLLocationGroundAltitude
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__CLPlaceInference
|| __TEXT.__const _CLLocationDistanceMax
|| __TEXT.__const _CLTimeIntervalMax
|| __TEXT.__const _kCLClientDistanceFilterNone
|| __TEXT.__const _kCLClientHeadingFilterNone
|| __TEXT.__const _kCLDistanceFilterNone
|| __TEXT.__const _kCLHeadingFilterNone
|| __TEXT.__const _kCLLocationAccuracyBest
|| __TEXT.__const _kCLLocationAccuracyBestForNavigation
|| __TEXT.__const _kCLLocationAccuracyBystander
|| __TEXT.__const _kCLLocationAccuracyE911CallInviteHigh
|| __TEXT.__const _kCLLocationAccuracyE911CallInviteLow
|| __TEXT.__const _kCLLocationAccuracyHundredMeters
|| __TEXT.__const _kCLLocationAccuracyKilometer
|| __TEXT.__const _kCLLocationAccuracyLeech
|| __TEXT.__const _kCLLocationAccuracyNearestTenMeters
|| __TEXT.__const _kCLLocationAccuracyThreeKilometers
|| __TEXT.__const _kCLLocationCoordinate2DInvalid
|| __TEXT.__const _kCLLocationIntegrityHigh
|| __TEXT.__const _kCLLocationIntegrityLow
|| __TEXT.__const _kCLLocationIntegrityMedium
|| __TEXT.__const _kCLLocationIntegrityNone
|| __TEXT.__const _kCLPolygonalRegionMaxVertices
|| __TEXT.__const _kCLPolygonalRegionMinVertices
|| __TEXT.__const _kInvalidMacAddress
|| __TEXT.__text _CLApplyArchivedAuthorizationDecisions
|| __TEXT.__text _CLClientCreateIso6709Notation
|| __TEXT.__text _CLClientCreateWithBundleIdentifierAndPath
|| __TEXT.__text _CLClientCreateWithBundleIdentifierAndPathOnSilo
|| __TEXT.__text _CLClientDisplayStats
|| __TEXT.__text _CLClientGetAuthorizationStatus
|| __TEXT.__text _CLClientGetDistanceCoordinates
|| __TEXT.__text _CLClientGetDistanceHighPrecision
|| __TEXT.__text _CLClientGetError
|| __TEXT.__text _CLClientGetHeading
|| __TEXT.__text _CLClientGetLocation
|| __TEXT.__text _CLClientGetTypeID
|| __TEXT.__text _CLClientInvalidate
|| __TEXT.__text _CLClientIsAuthorizationPromptMapDisplayEnabled
|| __TEXT.__text _CLClientIsHeadingAvailable
|| __TEXT.__text _CLClientIsLocationServicesAvailable
|| __TEXT.__text _CLClientIsLocationServicesEnabled
|| __TEXT.__text _CLClientIsValid
|| __TEXT.__text _CLClientLog
|| __TEXT.__text _CLClientLogDump
|| __TEXT.__text _CLClientMarkAsHavingReceivedLocation
|| __TEXT.__text _CLClientRequestAuthorization
|| __TEXT.__text _CLClientRetrieveAuthorizationStatus
|| __TEXT.__text _CLClientRetrieveLocation
|| __TEXT.__text _CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations
|| __TEXT.__text _CLClientSetAllowsMapCorrection
|| __TEXT.__text _CLClientSetCallback
|| __TEXT.__text _CLClientSetProxyForRemoteClient
|| __TEXT.__text _CLClientSetShowLocationPrompt
|| __TEXT.__text _CLClientShowHeadingCalibration
|| __TEXT.__text _CLClientShutdownDaemon
|| __TEXT.__text _CLClientStartHeadingUpdates
|| __TEXT.__text _CLClientStartLocationUpdates
|| __TEXT.__text _CLClientStartLocationUpdatesWithDynamicAccuracyReductionAndAlteredAccessoryLocations
|| __TEXT.__text _CLClientStartVehicleHeadingUpdates
|| __TEXT.__text _CLClientStartVehicleSpeedUpdates
|| __TEXT.__text _CLClientStopHeadingUpdates
|| __TEXT.__text _CLClientStopLocationUpdates
|| __TEXT.__text _CLClientStopVehicleHeadingUpdates
|| __TEXT.__text _CLClientStopVehicleSpeedUpdates
|| __TEXT.__text _CLClientUpdateARSessionState
|| __TEXT.__text _CLClientUpdateLSLHeadingEstimation
|| __TEXT.__text _CLClientUpdateVIOEstimation
|| __TEXT.__text _CLCopyAppsUsingLocation
|| __TEXT.__text _CLCopyNearbyAssetSettings
|| __TEXT.__text _CLCopyTechnologiesInUse
|| __TEXT.__text _CLDeleteCurrentEmergencyLocationAsset
|| __TEXT.__text _CLGenerateRoadSegmentId
|| __TEXT.__text _CLGetAccessoryMotionSensorLogs
|| __TEXT.__text _CLGetArchivedAuthorizationDecisions
|| __TEXT.__text _CLGetControlPlaneStatusReport
|| __TEXT.__text _CLGetEmergencyLocationSettingsVersionInfo
|| __TEXT.__text _CLGetLocationDefault
|| __TEXT.__text _CLGetMotionSensorLogs
|| __TEXT.__text _CLGetPipelinedCache
|| __TEXT.__text _CLGetStatusBarIconState
|| __TEXT.__text _CLInternalPerformMigration
|| __TEXT.__text _CLLocationCoordinate2DGetDistanceFrom
|| __TEXT.__text _CLLocationCoordinate2DIsValid
|| __TEXT.__text _CLLocationCoordinate2DMake
|| __TEXT.__text _CLPassKitNotifyPayment
|| __TEXT.__text _CLPingDaemon
|| __TEXT.__text _CLSetLocationDefault
|| __TEXT.__text _CLSetMapMatchingRouteHint
|| __TEXT.__text _CLSetRouteHintsForMapMatching
|| __TEXT.__text _CLStartStopAdvertisingBeacon
|| __TEXT.__text _CLWeatherNotifyForecast
__ CoreBluetooth: _CBAdvertisementDataAppleBeaconKey
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCreate
__ CoreFoundation: _CFBundleGetIdentifier
__ CoreFoundation: _CFBundleGetMainBundle
__ CoreFoundation: _CFBundleGetValueForInfoDictionaryKey
__ CoreFoundation: _CFCopyHomeDirectoryURLForUser
__ CoreFoundation: _CFCopyUserName
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveAllValues
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetDomain
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFGetUserName
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFPropertyListWrite
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFStringCreateByCombiningStrings
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithCStringNoCopy
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetBytes
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFURLCopyFileSystemPath
__ CoreFoundation: _CFURLCreateWithFileSystemPath
__ CoreFoundation: _CFWriteStreamClose
__ CoreFoundation: _CFWriteStreamCopyProperty
__ CoreFoundation: _CFWriteStreamCreateWithAllocatedBuffers
__ CoreFoundation: _CFWriteStreamOpen
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: __CFCopyServerVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFExecutableLinkedOnOrAfter
__ CoreFoundation: __CFIsDeallocating
__ CoreFoundation: __CFMZEnabled
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: __kCFSystemVersionProductNameKey
__ CoreFoundation: __kCFSystemVersionProductVersionKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFAllocatorNull
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleVersionKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFStreamPropertyDataWritten
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ GeoServices: _GEOErrorDomain
__ GeoServices: _OBJC_CLASS_$_GEOLocation
__ GeoServices: _OBJC_CLASS_$_GEOMapItemStorage
__ GeoServices: _OBJC_CLASS_$_GEOMapRegion
__ GeoServices: _OBJC_CLASS_$_GEOMapService
__ IOKit: _IOObjectRelease
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IORegistryEntryFromPath
__ IOKit: _IORegistryEntryGetProperty
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMasterPortDefault
__ LocationSupport: _OBJC_CLASS_$_CLDispatchSilo
__ LocationSupport: _OBJC_CLASS_$_CLRunLoopSilo
__ LocationSupport: _OBJC_CLASS_$_CLSilo
__ LocationSupport: __ZN18CLConnectionClient11sendMessageENSt3__110shared_ptrI19CLConnectionMessageEEb
__ LocationSupport: __ZN18CLConnectionClient18sendCachedMessagesEv
__ LocationSupport: __ZN18CLConnectionClient20setHandlerForMessageERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEU13block_pointerFvNS0_10shared_ptrI19CLConnectionMessageEEE
__ LocationSupport: __ZN18CLConnectionClient22setInterruptionHandlerEU13block_pointerFvvE
__ LocationSupport: __ZN18CLConnectionClient24setDefaultMessageHandlerEU13block_pointerFvNSt3__110shared_ptrI19CLConnectionMessageEEE
__ LocationSupport: __ZN18CLConnectionClient33setRequireManualCachedMessageSendEb
__ LocationSupport: __ZN18CLConnectionClient5startEv
__ LocationSupport: __ZN18CLConnectionClientC1ENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPU28objcproto17OS_dispatch_queue8NSObject
__ LocationSupport: __ZN18CLConnectionClientD1Ev
__ LocationSupport: __ZN19CLConnectionMessageC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPU25objcproto14NSSecureCoding11objc_object
__ LocationSupport: __ZN19CLConnectionMessageD1Ev
__ LocationSupport: __ZNK19CLConnectionMessage13getDictionaryEv
__ LocationSupport: __ZNK19CLConnectionMessage22getDictionaryOfClassesEP5NSSet
__ LocationSupport: __ZNK19CLConnectionMessage4nameEv
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGIsDeviceOfType
__ libMobileGestalt.dylib: _MGIsDeviceOneOfType
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __NSGetExecutablePath
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___cxa_atexit
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dyld_get_image_header
__ libSystem.B.dylib: __dyld_get_image_name
__ libSystem.B.dylib: __dyld_image_count
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _asin
__ libSystem.B.dylib: _atan
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _backtrace
__ libSystem.B.dylib: _basename
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _cos
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_current_queue
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_set_finalizer_f
__ libSystem.B.dylib: _dispatch_set_qos_class_fallback
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_workloop_create_inactive
__ libSystem.B.dylib: _dladdr
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _ether_ntoa
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _feof
__ libSystem.B.dylib: _fflush
__ libSystem.B.dylib: _fgetpos
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _fputc
__ libSystem.B.dylib: _fputs
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _funopen
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _getgid
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getpwnam
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _lchmod
__ libSystem.B.dylib: _lchown
__ libSystem.B.dylib: _lstat
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _perror
__ libSystem.B.dylib: _pthread_mutex_destroy
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_mutexattr_destroy
__ libSystem.B.dylib: _pthread_mutexattr_init
__ libSystem.B.dylib: _pthread_mutexattr_settype
__ libSystem.B.dylib: _pthread_self
__ libSystem.B.dylib: _rename
__ libSystem.B.dylib: _sandbox_check
__ libSystem.B.dylib: _setvbuf
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _sleep
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlcpy
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _syslog
__ libSystem.B.dylib: _tan
__ libSystem.B.dylib: _unlink
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _vproc_swap_integer
__ libSystem.B.dylib: _vsnprintf
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libSystem.B.dylib: _xpc_string_create
__ libSystem.B.dylib: dyld_stub_binder
__ libbz2.1.0.dylib: _BZ2_bzWrite
__ libbz2.1.0.dylib: _BZ2_bzWriteClose
__ libbz2.1.0.dylib: _BZ2_bzWriteOpen
__ libc++.1.dylib: __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm
__ libc++.1.dylib: __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__119__shared_weak_count14__release_weakEv
__ libc++.1.dylib: __ZNSt3__119__shared_weak_countD2Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__119__shared_weak_countE
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv121__vmi_class_type_infoE
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_pure_virtual
__ libc++.1.dylib: ___cxa_rethrow
__ libc++.1.dylib: ___gxx_personality_v0
__ libenergytrace.dylib: _entr_act_begin
__ libenergytrace.dylib: _entr_act_end
__ libenergytrace.dylib: _entr_act_modify
__ libenergytrace.dylib: _entr_act_set
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _object_getClassName
__ libobjc.A.dylib: _sel_getName
__ libxml2.2.dylib: _xmlBufferContent
__ libxml2.2.dylib: _xmlBufferCreate
__ libxml2.2.dylib: _xmlBufferFree
__ libxml2.2.dylib: _xmlBufferLength
__ libxml2.2.dylib: _xmlFreeTextWriter
__ libxml2.2.dylib: _xmlNewTextWriterMemory
__ libxml2.2.dylib: _xmlTextWriterFlush
__ libxml2.2.dylib: _xmlTextWriterWriteBase64
_CLLocationManagerRoutineProxy : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <CLLocationManagerRoutineClientInterface>
 @property  NSXPCConnection *connection
 @property  <CLLocationManagerDelegate> *delegate
 @property  CLLocationManagerRoutine *locationManagerRoutine
 @property  BOOL updating
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_CLLocationManagerRoutineProxy dealloc]
  -[_CLLocationManagerRoutineProxy delegate]
  -[_CLLocationManagerRoutineProxy setDelegate:]
  -[_CLLocationManagerRoutineProxy connection]
  -[_CLLocationManagerRoutineProxy setConnection:]
  -[_CLLocationManagerRoutineProxy createConnection]
  -[_CLLocationManagerRoutineProxy setLocationManagerRoutine:]
  -[_CLLocationManagerRoutineProxy locationManagerRoutine]
  -[_CLLocationManagerRoutineProxy didUpdateLocations:]
  -[_CLLocationManagerRoutineProxy updating]
  -[_CLLocationManagerRoutineProxy initWithQueue:locationManagerRoutine:]
  -[_CLLocationManagerRoutineProxy setUpdating:]


CLLocationManagerRoutine : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  _CLLocationManagerRoutineProxy *locationManagerRoutineProxy
 @property  <CLLocationManagerDelegate> *delegate

  // instance methods
  -[CLLocationManagerRoutine init]
  -[CLLocationManagerRoutine dealloc]
  -[CLLocationManagerRoutine delegate]
  -[CLLocationManagerRoutine setDelegate:]
  -[CLLocationManagerRoutine initWithQueue:]
  -[CLLocationManagerRoutine startUpdatingLocation]
  -[CLLocationManagerRoutine stopUpdatingLocation]
  -[CLLocationManagerRoutine locationManagerRoutineProxy]
  -[CLLocationManagerRoutine setLocationManagerRoutineProxy:]


CLEmergencyEnablementAssertion : CLAssertion
  // class methods
  +[CLEmergencyEnablementAssertion newAssertionWithReason:]
  +[CLEmergencyEnablementAssertion newAssertionForBundleIdentifier:withReason:]
  +[CLEmergencyEnablementAssertion newAssertionForBundle:withReason:]


CLLocationManagerStateTracker : CLStateTracker
 @property  double distanceFilter
 @property  double desiredAccuracy
 @property  BOOL updatingLocation
 @property  BOOL requestingLocation
 @property  BOOL requestingRanging
 @property  BOOL updatingRanging
 @property  BOOL updatingHeading
 @property  double headingFilter
 @property  BOOL allowsLocationPrompts
 @property  BOOL allowsAlteredAccessoryLocations
 @property  BOOL dynamicAccuracyReductionEnabled
 @property  BOOL previousAuthorizationStatusValid
 @property  int previousAuthorizationStatus
 @property  long long activityType
 @property  int pausesLocationUpdatesAutomatically
 @property  BOOL paused
 @property  BOOL allowsBackgroundLocationUpdates
 @property  BOOL showsBackgroundLocationIndicator
 @property  BOOL allowsMapCorrection
 @property  BOOL batchingLocation
 @property  BOOL updatingVehicleSpeed
 @property  BOOL updatingVehicleHeading
 @property  BOOL matchInfoEnabled
 @property  BOOL groundAltitudeEnabled
 @property  BOOL courtesyPromptNeeded

  // class methods
  +[CLLocationManagerStateTracker trackerStateSize]
  +[CLLocationManagerStateTracker trackerStateTypeName]

  // instance methods
  -[CLLocationManagerStateTracker dealloc]
  -[CLLocationManagerStateTracker identifier]
  -[CLLocationManagerStateTracker activityType]
  -[CLLocationManagerStateTracker initInSilo:withIdentifier:state:]
  -[CLLocationManagerStateTracker initWithQueue:identifier:state:]
  -[CLLocationManagerStateTracker initInSilo:withIdentifier:]
  -[CLLocationManagerStateTracker initWithQueue:identifier:]
  -[CLLocationManagerStateTracker distanceFilter]
  -[CLLocationManagerStateTracker setDistanceFilter:]
  -[CLLocationManagerStateTracker desiredAccuracy]
  -[CLLocationManagerStateTracker setDesiredAccuracy:]
  -[CLLocationManagerStateTracker updatingLocation]
  -[CLLocationManagerStateTracker setUpdatingLocation:]
  -[CLLocationManagerStateTracker requestingLocation]
  -[CLLocationManagerStateTracker setRequestingLocation:]
  -[CLLocationManagerStateTracker requestingRanging]
  -[CLLocationManagerStateTracker setRequestingRanging:]
  -[CLLocationManagerStateTracker updatingRanging]
  -[CLLocationManagerStateTracker setUpdatingRanging:]
  -[CLLocationManagerStateTracker updatingHeading]
  -[CLLocationManagerStateTracker setUpdatingHeading:]
  -[CLLocationManagerStateTracker headingFilter]
  -[CLLocationManagerStateTracker setHeadingFilter:]
  -[CLLocationManagerStateTracker allowsLocationPrompts]
  -[CLLocationManagerStateTracker setAllowsLocationPrompts:]
  -[CLLocationManagerStateTracker allowsAlteredAccessoryLocations]
  -[CLLocationManagerStateTracker setAllowsAlteredAccessoryLocations:]
  -[CLLocationManagerStateTracker dynamicAccuracyReductionEnabled]
  -[CLLocationManagerStateTracker setDynamicAccuracyReductionEnabled:]
  -[CLLocationManagerStateTracker previousAuthorizationStatusValid]
  -[CLLocationManagerStateTracker setPreviousAuthorizationStatusValid:]
  -[CLLocationManagerStateTracker previousAuthorizationStatus]
  -[CLLocationManagerStateTracker setPreviousAuthorizationStatus:]
  -[CLLocationManagerStateTracker setActivityType:]
  -[CLLocationManagerStateTracker pausesLocationUpdatesAutomatically]
  -[CLLocationManagerStateTracker setPausesLocationUpdatesAutomatically:]
  -[CLLocationManagerStateTracker paused]
  -[CLLocationManagerStateTracker setPaused:]
  -[CLLocationManagerStateTracker allowsBackgroundLocationUpdates]
  -[CLLocationManagerStateTracker setAllowsBackgroundLocationUpdates:]
  -[CLLocationManagerStateTracker showsBackgroundLocationIndicator]
  -[CLLocationManagerStateTracker setShowsBackgroundLocationIndicator:]
  -[CLLocationManagerStateTracker allowsMapCorrection]
  -[CLLocationManagerStateTracker setAllowsMapCorrection:]
  -[CLLocationManagerStateTracker batchingLocation]
  -[CLLocationManagerStateTracker setBatchingLocation:]
  -[CLLocationManagerStateTracker updatingVehicleSpeed]
  -[CLLocationManagerStateTracker setUpdatingVehicleSpeed:]
  -[CLLocationManagerStateTracker updatingVehicleHeading]
  -[CLLocationManagerStateTracker setUpdatingVehicleHeading:]
  -[CLLocationManagerStateTracker matchInfoEnabled]
  -[CLLocationManagerStateTracker setMatchInfoEnabled:]
  -[CLLocationManagerStateTracker groundAltitudeEnabled]
  -[CLLocationManagerStateTracker setGroundAltitudeEnabled:]
  -[CLLocationManagerStateTracker courtesyPromptNeeded]
  -[CLLocationManagerStateTracker setCourtesyPromptNeeded:]
  -[CLLocationManagerStateTracker updateState:]
  -[CLLocationManagerStateTracker dumpState:withSize:hints:]


CLLocationManagerInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  NSMutableSet *rangedRegions
 @property  NSMutableSet *rangedConstraints
 @property  <CLLocationManagerDelegate> *delegate
 @property  CLLocationManager *manager

  // instance methods
  -[CLLocationManagerInternal dealloc]
  -[CLLocationManagerInternal invalidate]
  -[CLLocationManagerInternal delegate]
  -[CLLocationManagerInternal setDelegate:]
  -[CLLocationManagerInternal .cxx_destruct]
  -[CLLocationManagerInternal manager]
  -[CLLocationManagerInternal setPausesLocationUpdatesAutomatically:]
  -[CLLocationManagerInternal allowsBackgroundLocationUpdates]
  -[CLLocationManagerInternal setAllowsBackgroundLocationUpdates:]
  -[CLLocationManagerInternal showsBackgroundLocationIndicator]
  -[CLLocationManagerInternal setShowsBackgroundLocationIndicator:]
  -[CLLocationManagerInternal hasLingeringRangingRequest]
  -[CLLocationManagerInternal cancelRangingRequest]
  -[CLLocationManagerInternal initWithInfo:bundleIdentifier:bundle:delegate:silo:]
  -[CLLocationManagerInternal PausesLocationUpdatesAutomatically]
  -[CLLocationManagerInternal stopUpdatingLocationAutoPaused]
  -[CLLocationManagerInternal cancelLocationRequest]
  -[CLLocationManagerInternal cancelLingeringRangingRequest]
  -[CLLocationManagerInternal performCourtesyPromptIfNeeded]
  -[CLLocationManagerInternal rangedRegions]
  -[CLLocationManagerInternal rangedConstraints]
  -[CLLocationManagerInternal setManager:]


CLLocationManager : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  BOOL matchInfoEnabled
 @property  BOOL privateMode
 @property  BOOL locationServicesAvailable
 @property  BOOL locationServicesApproved
 @property  double expectedGpsUpdateInterval
 @property  BOOL supportInfo
 @property  ^{__CLClient=} internalClient
 @property  BOOL locationServicesPreferencesDialogEnabled
 @property  BOOL dynamicAccuracyReductionEnabled
 @property  BOOL allowsAlteredAccessoryLocations
 @property  <CLLocationManagerDelegate> *delegate
 @property  BOOL locationServicesEnabled
 @property  NSString *purpose
 @property  long long activityType
 @property  double distanceFilter
 @property  double desiredAccuracy
 @property  BOOL pausesLocationUpdatesAutomatically
 @property  BOOL allowsBackgroundLocationUpdates
 @property  BOOL showsBackgroundLocationIndicator
 @property  CLLocation *location
 @property  BOOL headingAvailable
 @property  double headingFilter
 @property  int headingOrientation
 @property  CLHeading *heading
 @property  double maximumRegionMonitoringDistance
 @property  NSSet *monitoredRegions
 @property  NSSet *rangedRegions
 @property  NSSet *rangedBeaconConstraints

  // class methods
  +[CLLocationManager sharedManager]
  +[CLLocationManager locationServicesEnabled]
  +[CLLocationManager _authorizationStatus]
  +[CLLocationManager _authorizationStatusForBundleIdentifier:bundle:]
  +[CLLocationManager locationServicesEnabled:]
  +[CLLocationManager setLocationServicesEnabled:]
  +[CLLocationManager setAuthorizationPromptMapDisplayEnabled:]
  +[CLLocationManager authorizationPromptMapDisplayEnabled]
  +[CLLocationManager headingAvailable]
  +[CLLocationManager significantLocationChangeMonitoringAvailable]
  +[CLLocationManager isMonitoringAvailableForClass:]
  +[CLLocationManager regionMonitoringAvailable]
  +[CLLocationManager regionMonitoringEnabled]
  +[CLLocationManager isRangingAvailable]
  +[CLLocationManager mapCorrectionAvailable]
  +[CLLocationManager _checkAndExerciseAuthorizationForBundleID:error:]
  +[CLLocationManager _checkAndExerciseAuthorizationForBundle:error:]
  +[CLLocationManager deferredLocationUpdatesAvailable]
  +[CLLocationManager isPeerRangingAvailable]
  +[CLLocationManager _archivedAuthorizationDecisionsWithError:]
  +[CLLocationManager _applyArchivedAuthorizationDecisions:]
  +[CLLocationManager authorizationStatusForBundleIdentifier:]
  +[CLLocationManager authorizationStatusForBundle:]
  +[CLLocationManager authorizationStatus]
  +[CLLocationManager setAuthorizationStatus:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatus:forBundle:]
  +[CLLocationManager setAuthorizationStatusByType:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatusByType:forBundle:]
  +[CLLocationManager setAuthorizationStatusByType:withCorrectiveCompensation:forBundleIdentifier:]
  +[CLLocationManager setAuthorizationStatusByType:withCorrectiveCompensation:forBundle:]
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundleIdentifier:]
  +[CLLocationManager setTemporaryAuthorizationGranted:forBundle:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forBundleIdentifier:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forBundle:]
  +[CLLocationManager setDefaultEffectiveBundleIdentifier:]
  +[CLLocationManager setDefaultEffectiveBundle:]
  +[CLLocationManager dumpLogsWithMessage:]
  +[CLLocationManager dumpDiagnosticFilesWithHandler:]
  +[CLLocationManager shutdownDaemon]
  +[CLLocationManager bundleSupported:]
  +[CLLocationManager advertiseAsBeacon:withPower:]
  +[CLLocationManager primaryEntityClassForLocationDictionary:]
  +[CLLocationManager activeLocationServiceTypesForLocationDictionary:]
  +[CLLocationManager isEntityAuthorizedForLocationDictionary:]
  +[CLLocationManager entityAuthorizationForLocationDictionary:]
  +[CLLocationManager setEntityAuthorization:withCorrectiveCompensation:forLocationDictionary:]
  +[CLLocationManager setStatusBarIconEnabled:forLocationEntityClass:]
  +[CLLocationManager isStatusBarIconEnabledForLocationEntityClass:]
  +[CLLocationManager entityClassesForLocationDictionary:]
  +[CLLocationManager isLocationActiveForLocationDictionary:]
  +[CLLocationManager dateLocationLastUsedForLocationDictionary:]
  +[CLLocationManager hasUsedBackgroundLocationServices:]
  +[CLLocationManager allowableAuthorizationForLocationDictionary:]
  +[CLLocationManager correctiveCompensationStatusForLocationDictionary:]
  +[CLLocationManager setEntityAuthorized:forLocationDictionary:]
  +[CLLocationManager setEntityAuthorization:forLocationDictionary:]
  +[CLLocationManager backgroundIndicatorEnabledForLocationDictionary:]
  +[CLLocationManager setBackgroundIndicatorEnabled:forLocationDictionary:]

  // instance methods
  -[CLLocationManager init]
  -[CLLocationManager dealloc]
  -[CLLocationManager delegate]
  -[CLLocationManager setDelegate:]
  -[CLLocationManager activityType]
  -[CLLocationManager location]
  -[CLLocationManager startUpdatingLocation]
  -[CLLocationManager stopUpdatingLocation]
  -[CLLocationManager distanceFilter]
  -[CLLocationManager setDistanceFilter:]
  -[CLLocationManager desiredAccuracy]
  -[CLLocationManager setDesiredAccuracy:]
  -[CLLocationManager headingFilter]
  -[CLLocationManager setHeadingFilter:]
  -[CLLocationManager allowsAlteredAccessoryLocations]
  -[CLLocationManager setAllowsAlteredAccessoryLocations:]
  -[CLLocationManager setDynamicAccuracyReductionEnabled:]
  -[CLLocationManager setActivityType:]
  -[CLLocationManager pausesLocationUpdatesAutomatically]
  -[CLLocationManager setPausesLocationUpdatesAutomatically:]
  -[CLLocationManager allowsBackgroundLocationUpdates]
  -[CLLocationManager setAllowsBackgroundLocationUpdates:]
  -[CLLocationManager showsBackgroundLocationIndicator]
  -[CLLocationManager setShowsBackgroundLocationIndicator:]
  -[CLLocationManager setMatchInfoEnabled:]
  -[CLLocationManager rangedRegions]
  -[CLLocationManager onClientEvent:supportInfo:]
  -[CLLocationManager onDidBecomeActive:]
  -[CLLocationManager initWithEffectiveBundleIdentifier:bundle:delegate:silo:]
  -[CLLocationManager locationServicesEnabled]
  -[CLLocationManager onLocationRequestTimeout]
  -[CLLocationManager startUpdatingHeading]
  -[CLLocationManager startMonitoringForRegion:]
  -[CLLocationManager onRangingRequestTimeout]
  -[CLLocationManager onClientEventAuthStatus:]
  -[CLLocationManager onClientEventLocation:forceMapMatching:type:]
  -[CLLocationManager onClientEventLocationUnavailable:]
  -[CLLocationManager onClientEventHeading:]
  -[CLLocationManager onClientEventHeadingCalibration:]
  -[CLLocationManager onClientEventError:]
  -[CLLocationManager onClientEventRegion:]
  -[CLLocationManager onClientEventRegionState:]
  -[CLLocationManager onClientEventRegionError:]
  -[CLLocationManager onClientEventRanging:]
  -[CLLocationManager onClientEventRangingError:]
  -[CLLocationManager onClientEventPeerRanging:]
  -[CLLocationManager onClientEventPeerRangingRequestProcessed:]
  -[CLLocationManager onClientEventPeerRangingError:]
  -[CLLocationManager onClientEventRegionResponseDelayed:]
  -[CLLocationManager onClientEventRegionSetupCompleted:]
  -[CLLocationManager onClientEventAutopauseStatus:]
  -[CLLocationManager onClientEventBatch:]
  -[CLLocationManager onClientEventInterrupted:]
  -[CLLocationManager onClientEventVehicleSpeed:]
  -[CLLocationManager onClientEventVehicleHeading:]
  -[CLLocationManager onClientEventSignificantLocationVisit:]
  -[CLLocationManager onClientEventPlaceInferenceError:]
  -[CLLocationManager onClientEventPlaceInferenceResult:]
  -[CLLocationManager callPlaceInferenceHandlerWithResult:error:]
  -[CLLocationManager resumeLocationUpdates]
  -[CLLocationManager pauseLocationUpdates:]
  -[CLLocationManager requestWhenInUseAuthorization]
  -[CLLocationManager headingAvailable]
  -[CLLocationManager initWithEffectiveBundleIdentifier:]
  -[CLLocationManager initWithEffectiveBundleIdentifier:delegate:onQueue:]
  -[CLLocationManager initWithEffectiveBundle:]
  -[CLLocationManager initWithEffectiveBundle:delegate:onQueue:]
  -[CLLocationManager _initWithDelegate:onQueue:]
  -[CLLocationManager locationServicesAvailable]
  -[CLLocationManager locationServicesApproved]
  -[CLLocationManager expectedGpsUpdateInterval]
  -[CLLocationManager setSupportInfo:]
  -[CLLocationManager supportInfo]
  -[CLLocationManager internalClient]
  -[CLLocationManager setPrivateMode:]
  -[CLLocationManager privateMode]
  -[CLLocationManager setPurpose:]
  -[CLLocationManager purpose]
  -[CLLocationManager markAsHavingReceivedLocation]
  -[CLLocationManager startUpdatingLocationWithPrompt]
  -[CLLocationManager requestLocation]
  -[CLLocationManager allowDeferredLocationUpdatesUntilTraveled:timeout:]
  -[CLLocationManager disallowDeferredLocationUpdates]
  -[CLLocationManager setHeadingOrientation:]
  -[CLLocationManager headingOrientation]
  -[CLLocationManager heading]
  -[CLLocationManager stopUpdatingHeading]
  -[CLLocationManager dismissHeadingCalibrationDisplay]
  -[CLLocationManager startAppStatusUpdates]
  -[CLLocationManager stopAppStatusUpdates]
  -[CLLocationManager startTechStatusUpdates]
  -[CLLocationManager stopTechStatusUpdates]
  -[CLLocationManager startMonitoringSignificantLocationChanges]
  -[CLLocationManager _startMonitoringSignificantLocationChangesOfDistance:withPowerBudget:]
  -[CLLocationManager stopMonitoringSignificantLocationChanges]
  -[CLLocationManager startMonitoringForRegion:desiredAccuracy:]
  -[CLLocationManager stopMonitoringForRegion:]
  -[CLLocationManager requestStateForRegion:]
  -[CLLocationManager maximumRegionMonitoringDistance]
  -[CLLocationManager monitoredRegions]
  -[CLLocationManager startRangingBeaconsInRegion:]
  -[CLLocationManager stopRangingBeaconsInRegion:]
  -[CLLocationManager startRangingBeaconsSatisfyingConstraint:]
  -[CLLocationManager stopRangingBeaconsSatisfyingConstraint:]
  -[CLLocationManager rangedBeaconConstraints]
  -[CLLocationManager requestRangingToPeers:timeoutSeconds:]
  -[CLLocationManager respondToRangingFromPeers:timeoutSeconds:]
  -[CLLocationManager startRangingToPeers:intervalSeconds:]
  -[CLLocationManager stopRangingToPeers:]
  -[CLLocationManager startRangingFromPeers:]
  -[CLLocationManager stopRangingFromPeers:]
  -[CLLocationManager resetApps]
  -[CLLocationManager appsUsingLocation]
  -[CLLocationManager appsUsingLocationWithDetails]
  -[CLLocationManager technologiesInUse]
  -[CLLocationManager requestWhenInUseAuthorizationWithPrompt]
  -[CLLocationManager requestAlwaysAuthorization]
  -[CLLocationManager isLocationServicesPreferencesDialogEnabled]
  -[CLLocationManager setLocationServicesPreferencesDialogEnabled:]
  -[CLLocationManager isDynamicAccuracyReductionEnabled]
  -[CLLocationManager registerAsLocationClient]
  -[CLLocationManager setIsActuallyAWatchKitExtension:]
  -[CLLocationManager startUpdatingVehicleSpeed]
  -[CLLocationManager stopUpdatingVehicleSpeed]
  -[CLLocationManager startUpdatingVehicleHeading]
  -[CLLocationManager stopUpdatingVehicleHeading]
  -[CLLocationManager isMatchInfoEnabled]
  -[CLLocationManager _isGroundAltitudeEnabled]
  -[CLLocationManager _setGroundAltitudeEnabled:]
  -[CLLocationManager startMonitoringVisits]
  -[CLLocationManager stopMonitoringVisits]
  -[CLLocationManager _startLeechingVisits]
  -[CLLocationManager _fetchPlaceInferencesWithFidelityPolicy:handler:]
  -[CLLocationManager _updateLSLHeadingEstimation:]
  -[CLLocationManager _updateARSessionState:]
  -[CLLocationManager _updateVIOEstimation:]


_CLLocationGroundAltitude : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double estimate
 @property  double uncertainty

  // class methods
  +[_CLLocationGroundAltitude supportsSecureCoding]

  // instance methods
  -[_CLLocationGroundAltitude copyWithZone:]
  -[_CLLocationGroundAltitude encodeWithCoder:]
  -[_CLLocationGroundAltitude initWithCoder:]
  -[_CLLocationGroundAltitude initWithEstimate:uncertainty:]
  -[_CLLocationGroundAltitude estimate]
  -[_CLLocationGroundAltitude uncertainty]


_CLLocationSmootherProxy : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <CLLocationSmootherClientInterface>
 @property  NSXPCConnection *connection
 @property  <CLLocationSmootherDelegate> *delegate
 @property  CLLocationSmoother *locationManagerSmoother
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_CLLocationSmootherProxy dealloc]
  -[_CLLocationSmootherProxy delegate]
  -[_CLLocationSmootherProxy setDelegate:]
  -[_CLLocationSmootherProxy connection]
  -[_CLLocationSmootherProxy setConnection:]
  -[_CLLocationSmootherProxy createConnection]
  -[_CLLocationSmootherProxy setLocationManagerSmoother:]
  -[_CLLocationSmootherProxy locationManagerSmoother]
  -[_CLLocationSmootherProxy didSmoothLocations:ofType:]
  -[_CLLocationSmootherProxy initWithCLLocationSmoother:]


CLLocationSmoother : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  _CLLocationSmootherProxy *locationManagerSmootherProxy
 @property  <CLLocationManagerDelegateInternal> *delegate

  // instance methods
  -[CLLocationSmoother dealloc]
  -[CLLocationSmoother delegate]
  -[CLLocationSmoother setDelegate:]
  -[CLLocationSmoother smoothLocations:handler:]
  -[CLLocationSmoother locationManagerSmootherProxy]
  -[CLLocationSmoother smoothLocations:]


CLLocationMatchInfoInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[CLLocationMatchInfoInternal dealloc]
  -[CLLocationMatchInfoInternal copyWithZone:]
  -[CLLocationMatchInfoInternal initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]


CLLocationMatchInfo : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  long long matchQuality
 @property  {CLLocationCoordinate2D=dd} matchCoordinate
 @property  double matchCourse
 @property  int matchFormOfWay
 @property  int matchRoadClass
 @property  BOOL matchShifted
 @property  NSData *matchDataArray

  // class methods
  +[CLLocationMatchInfo supportsSecureCoding]

  // instance methods
  -[CLLocationMatchInfo dealloc]
  -[CLLocationMatchInfo copyWithZone:]
  -[CLLocationMatchInfo encodeWithCoder:]
  -[CLLocationMatchInfo initWithCoder:]
  -[CLLocationMatchInfo shortDescription]
  -[CLLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:matchDataArray:]
  -[CLLocationMatchInfo initWithMatchQuality:matchCoordinate:matchCourse:matchFormOfWay:matchRoadClass:matchShifted:]
  -[CLLocationMatchInfo matchQuality]
  -[CLLocationMatchInfo matchCoordinate]
  -[CLLocationMatchInfo matchCourse]
  -[CLLocationMatchInfo matchFormOfWay]
  -[CLLocationMatchInfo matchRoadClass]
  -[CLLocationMatchInfo isMatchShifted]
  -[CLLocationMatchInfo matchDataArray]


CLHeadingInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[CLHeadingInternal copyWithZone:]
  -[CLHeadingInternal initWithClientHeading:]


CLHeading : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double magneticHeading
 @property  double trueHeading
 @property  double headingAccuracy
 @property  double x
 @property  double y
 @property  double z
 @property  NSDate *timestamp

  // class methods
  +[CLHeading supportsSecureCoding]

  // instance methods
  -[CLHeading dealloc]
  -[CLHeading copyWithZone:]
  -[CLHeading encodeWithCoder:]
  -[CLHeading initWithCoder:]
  -[CLHeading timestamp]
  -[CLHeading shortDescription]
  -[CLHeading initWithClientHeading:]
  -[CLHeading magneticHeading]
  -[CLHeading trueHeading]
  -[CLHeading headingAccuracy]
  -[CLHeading x]
  -[CLHeading y]
  -[CLHeading z]


CLInUseAssertion : CLAssertion
  // class methods
  +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:]
  +[CLInUseAssertion newAssertionForBundle:withReason:]
  +[CLInUseAssertion newAssertionForBundleIdentifier:bundlePath:reason:level:]
  +[CLInUseAssertion newAssertionForBundleIdentifier:withReason:level:]
  +[CLInUseAssertion newAssertionForBundle:withReason:level:]


CLRegionInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth

CLRegion : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  {?=[512c][512c]iBBBB(?={?=[512c]SSiB}{?={?=dd}ddiB}{?=[101{?=dd}]iiB})} clientRegion
 @property  NSString *onBehalfOfBundleId
 @property  BOOL conservativeEntry
 @property  int referenceFrame
 @property  BOOL emergency
 @property  {CLLocationCoordinate2D=dd} center
 @property  double radius
 @property  NSString *identifier
 @property  BOOL notifyOnEntry
 @property  BOOL notifyOnExit

  // class methods
  +[CLRegion supportsSecureCoding]

  // instance methods
  -[CLRegion dealloc]
  -[CLRegion isEqual:]
  -[CLRegion copyWithZone:]
  -[CLRegion encodeWithCoder:]
  -[CLRegion initWithCoder:]
  -[CLRegion identifier]
  -[CLRegion initWithIdentifier:]
  -[CLRegion center]
  -[CLRegion radius]
  -[CLRegion clientRegion]
  -[CLRegion initWithClientRegion:]
  -[CLRegion onBehalfOfBundleId]
  -[CLRegion initCircularRegionWithCenter:radius:identifier:]
  -[CLRegion _initWithCoder:]
  -[CLRegion _encodeWithCoder:]
  -[CLRegion referenceFrame]
  -[CLRegion setReferenceFrame:]
  -[CLRegion setOnBehalfOfBundleId:]
  -[CLRegion notifyOnEntry]
  -[CLRegion setNotifyOnEntry:]
  -[CLRegion notifyOnExit]
  -[CLRegion setNotifyOnExit:]
  -[CLRegion containsCoordinate:]
  -[CLRegion setConservativeEntry:]
  -[CLRegion conservativeEntry]
  -[CLRegion setEmergency:]
  -[CLRegion emergency]


CLCircularRegion : CLRegion
 @property  {CLLocationCoordinate2D=dd} center
 @property  double radius

  // class methods
  +[CLCircularRegion supportsSecureCoding]

  // instance methods
  -[CLCircularRegion encodeWithCoder:]
  -[CLCircularRegion initWithCoder:]
  -[CLCircularRegion center]
  -[CLCircularRegion radius]
  -[CLCircularRegion containsCoordinate:]
  -[CLCircularRegion initWithCenter:radius:identifier:]
  -[CLCircularRegion initNearbyAllowedWithCenter:radius:identifier:]


CLBeaconRegion : CLRegion
 @property  CLBeaconIdentityConstraint *beaconIdentityConstraint
 @property  NSUUID *UUID
 @property  NSUUID *proximityUUID
 @property  NSNumber *major
 @property  NSNumber *minor
 @property  BOOL notifyEntryStateOnDisplay

  // class methods
  +[CLBeaconRegion supportsSecureCoding]
  +[CLBeaconRegion any]

  // instance methods
  -[CLBeaconRegion init]
  -[CLBeaconRegion encodeWithCoder:]
  -[CLBeaconRegion initWithCoder:]
  -[CLBeaconRegion initWithIdentifier:]
  -[CLBeaconRegion UUID]
  -[CLBeaconRegion initWithBeaconIdentityConstraint:identifier:]
  -[CLBeaconRegion beaconIdentityConstraint]
  -[CLBeaconRegion setGutsWithProximityUUID:major:minor:notifyOnDisplay:]
  -[CLBeaconRegion initWithUUID:identifier:]
  -[CLBeaconRegion initWithUUID:major:identifier:]
  -[CLBeaconRegion initWithUUID:major:minor:identifier:]
  -[CLBeaconRegion major]
  -[CLBeaconRegion minor]
  -[CLBeaconRegion _measuredPowerForDevice]
  -[CLBeaconRegion proximityUUID]
  -[CLBeaconRegion initWithProximityUUID:identifier:]
  -[CLBeaconRegion initWithProximityUUID:major:identifier:]
  -[CLBeaconRegion initWithProximityUUID:major:minor:identifier:]
  -[CLBeaconRegion peripheralDataWithMeasuredPower:]
  -[CLBeaconRegion notifyEntryStateOnDisplay]
  -[CLBeaconRegion setNotifyEntryStateOnDisplay:]


CLBeaconInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth

CLBeacon : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  NSUUID *UUID
 @property  NSUUID *proximityUUID
 @property  NSNumber *major
 @property  NSNumber *minor
 @property  long long proximity
 @property  double accuracy
 @property  long long rssi

  // class methods
  +[CLBeacon supportsSecureCoding]

  // instance methods
  -[CLBeacon dealloc]
  -[CLBeacon copyWithZone:]
  -[CLBeacon encodeWithCoder:]
  -[CLBeacon initWithCoder:]
  -[CLBeacon UUID]
  -[CLBeacon timestamp]
  -[CLBeacon initWithUUID:major:minor:proximity:accuracy:rssi:timestamp:]
  -[CLBeacon major]
  -[CLBeacon minor]
  -[CLBeacon proximityUUID]
  -[CLBeacon proximity]
  -[CLBeacon accuracy]
  -[CLBeacon rssi]
  -[CLBeacon initWithProximityUUID:major:minor:proximity:accuracy:rssi:]


CLSimulationManager : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  NSXPCConnection *connection
 @property  <CLSimulationXPCServerInterface> *daemonProxy
 @property  unsigned char locationDeliveryBehavior
 @property  double locationDistance
 @property  double locationInterval
 @property  double locationSpeed
 @property  unsigned char locationRepeatBehavior

  // instance methods
  -[CLSimulationManager init]
  -[CLSimulationManager connection]
  -[CLSimulationManager setConnection:]
  -[CLSimulationManager flush]
  -[CLSimulationManager scenariosPath]
  -[CLSimulationManager loadScenarioFromURL:]
  -[CLSimulationManager daemonProxy]
  -[CLSimulationManager setLocationDeliveryBehavior:]
  -[CLSimulationManager setLocationInterval:]
  -[CLSimulationManager setLocationRepeatBehavior:]
  -[CLSimulationManager clearSimulatedLocations]
  -[CLSimulationManager startLocationSimulation]
  -[CLSimulationManager stopLocationSimulation]
  -[CLSimulationManager simulateVisit:]
  -[CLSimulationManager simulateSignificantLocationChange:]
  -[CLSimulationManager simulateFenceWithBundleID:andFenceID:eventType:atLocation:]
  -[CLSimulationManager simulateBeaconWithProximityUUID:major:minor:eventType:]
  -[CLSimulationManager availableScenarios]
  -[CLSimulationManager localizedNameForScenario:]
  -[CLSimulationManager selectScenario:]
  -[CLSimulationManager setLocationDistance:]
  -[CLSimulationManager setLocationSpeed:]
  -[CLSimulationManager appendSimulatedLocation:]
  -[CLSimulationManager getFencesForBundleID:withHandler:]
  -[CLSimulationManager clearSimulatedCells]
  -[CLSimulationManager setSimulatedCell:]
  -[CLSimulationManager startCellSimulation]
  -[CLSimulationManager stopCellSimulation]
  -[CLSimulationManager setSimulatedCellRegistrationStatus:]
  -[CLSimulationManager setWifiScanResults:]
  -[CLSimulationManager startWifiSimulation]
  -[CLSimulationManager stopWifiSimulation]
  -[CLSimulationManager setSimulatedWifiPower:]
  -[CLSimulationManager locationDeliveryBehavior]
  -[CLSimulationManager locationDistance]
  -[CLSimulationManager locationInterval]
  -[CLSimulationManager locationSpeed]
  -[CLSimulationManager locationRepeatBehavior]


CLBeaconIdentityConstraint : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSNumber *major
 @property  NSNumber *minor

  // class methods
  +[CLBeaconIdentityConstraint supportsSecureCoding]
  +[CLBeaconIdentityConstraint any]

  // instance methods
  -[CLBeaconIdentityConstraint init]
  -[CLBeaconIdentityConstraint dealloc]
  -[CLBeaconIdentityConstraint isEqual:]
  -[CLBeaconIdentityConstraint copyWithZone:]
  -[CLBeaconIdentityConstraint encodeWithCoder:]
  -[CLBeaconIdentityConstraint initWithCoder:]
  -[CLBeaconIdentityConstraint UUID]
  -[CLBeaconIdentityConstraint setUUID:]
  -[CLBeaconIdentityConstraint major]
  -[CLBeaconIdentityConstraint minor]
  -[CLBeaconIdentityConstraint _initWithUUID:major:minor:]
  -[CLBeaconIdentityConstraint initWithUUID:]
  -[CLBeaconIdentityConstraint initWithUUID:major:]
  -[CLBeaconIdentityConstraint initWithUUID:major:minor:]


CLVehicleHeadingInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[CLVehicleHeadingInternal copyWithZone:]
  -[CLVehicleHeadingInternal initWithClientVehicleHeading:]


CLVehicleHeading : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double trueHeading
 @property  NSDate *timestamp

  // class methods
  +[CLVehicleHeading supportsSecureCoding]

  // instance methods
  -[CLVehicleHeading dealloc]
  -[CLVehicleHeading copyWithZone:]
  -[CLVehicleHeading encodeWithCoder:]
  -[CLVehicleHeading initWithCoder:]
  -[CLVehicleHeading timestamp]
  -[CLVehicleHeading shortDescription]
  -[CLVehicleHeading initWithClientVehicleHeading:]
  -[CLVehicleHeading trueHeading]


CLVehicleSpeedInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[CLVehicleSpeedInternal copyWithZone:]
  -[CLVehicleSpeedInternal initWithClientVehicleSpeed:]


CLVehicleSpeed : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double speed
 @property  NSDate *timestamp

  // class methods
  +[CLVehicleSpeed supportsSecureCoding]

  // instance methods
  -[CLVehicleSpeed dealloc]
  -[CLVehicleSpeed copyWithZone:]
  -[CLVehicleSpeed encodeWithCoder:]
  -[CLVehicleSpeed initWithCoder:]
  -[CLVehicleSpeed timestamp]
  -[CLVehicleSpeed shortDescription]
  -[CLVehicleSpeed speed]
  -[CLVehicleSpeed initWithClientVehicleSpeed:]


CLVisit : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSSecureCoding, NSCopying>
 @property  BOOL hasArrivalDate
 @property  BOOL hasDepartureDate
 @property  NSDate *detectionDate
 @property  NSDate *arrivalDate
 @property  NSDate *departureDate
 @property  {CLLocationCoordinate2D=dd} coordinate
 @property  double horizontalAccuracy

  // class methods
  +[CLVisit supportsSecureCoding]

  // instance methods
  -[CLVisit dealloc]
  -[CLVisit copyWithZone:]
  -[CLVisit encodeWithCoder:]
  -[CLVisit initWithCoder:]
  -[CLVisit coordinate]
  -[CLVisit initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:]
  -[CLVisit horizontalAccuracy]
  -[CLVisit arrivalDate]
  -[CLVisit departureDate]
  -[CLVisit detectionDate]
  -[CLVisit hasArrivalDate]
  -[CLVisit hasDepartureDate]


CLGeocoderInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  CLSilo *responseSilo

  // instance methods
  -[CLGeocoderInternal init]
  -[CLGeocoderInternal dealloc]
  -[CLGeocoderInternal responseSilo]
  -[CLGeocoderInternal setResponseSilo:]


CLGeocoder : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  CLSilo *_responseSilo
 @property  BOOL geocoding

  // class methods
  +[CLGeocoder _timeZoneAtLocation:]

  // instance methods
  -[CLGeocoder init]
  -[CLGeocoder dealloc]
  -[CLGeocoder _setResponseSilo:]
  -[CLGeocoder reverseGeocodeLocation:completionHandler:]
  -[CLGeocoder _responseSilo]
  -[CLGeocoder reverseGeocodeLocation:preferredLocale:heading:localResultsOnly:completionHandler:]
  -[CLGeocoder isGeocoding]
  -[CLGeocoder _notifyNoResult]
  -[CLGeocoder _ticket:didReturnError:partialResultForLocation:]
  -[CLGeocoder _ticket:didReturnGeoMapItems:]
  -[CLGeocoder _ensureMainThreadExecutionContextForBlock:]
  -[CLGeocoder geocodeAddressDictionary:preferredLocale:completionHandler:]
  -[CLGeocoder _ticket:didReturnError:]
  -[CLGeocoder geocodeAddressString:inRegion:preferredLocale:completionHandler:]
  -[CLGeocoder _notifyCancel]
  -[CLGeocoder _notifyResult:]
  -[CLGeocoder _notifyError:]
  -[CLGeocoder _notifyResult:error:]
  -[CLGeocoder reverseGeocodeLocation:localResultsOnly:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:preferredLocale:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:heading:completionHandler:]
  -[CLGeocoder reverseGeocodeLocation:heading:localResultsOnly:completionHandler:]
  -[CLGeocoder geocodeAddressDictionary:completionHandler:]
  -[CLGeocoder geocodeAddressString:completionHandler:]
  -[CLGeocoder geocodeAddressString:inRegion:completionHandler:]
  -[CLGeocoder cancelGeocode]
  -[CLGeocoder _notifyPartialResult:]
  -[CLGeocoder geocodePostalAddress:preferredLocale:completionHandler:]
  -[CLGeocoder geocodePostalAddress:completionHandler:]


CLLocationInternalClient : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
  // class methods
  +[CLLocationInternalClient sharedServiceClient]

  // instance methods
  -[CLLocationInternalClient setLocationServicesEnabled:]
  -[CLLocationInternalClient setAuthorizationPromptMapDisplayEnabled:]
  -[CLLocationInternalClient shutdownDaemon]
  -[CLLocationInternalClient setPrivateMode:]
  -[CLLocationInternalClient notifyPassKitPayment:transaction:info:]
  -[CLLocationInternalClient notifyWeatherForecast:airQualityConditions:hourlyForecasts:dailyForecasts:latitude:longitude:]
  -[CLLocationInternalClient synchronousRemoteObject]
  -[CLLocationInternalClient setAuthorizationStatus:withCorrectiveCompensation:forBundleID:orBundlePath:]
  -[CLLocationInternalClient clearLocationAuthorizations]
  -[CLLocationInternalClient getArchivedAuthorizationDecisionsWithError:]
  -[CLLocationInternalClient applyArchivedAuthorizationDecisions:]
  -[CLLocationInternalClient copyAppsUsingLocation]
  -[CLLocationInternalClient copyTechnologiesInUse]
  -[CLLocationInternalClient setLocationDefaultForKey:value:]
  -[CLLocationInternalClient getLocationDefaultForKey:]
  -[CLLocationInternalClient timeZoneAtLocation:]
  -[CLLocationInternalClient getPrivateMode]
  -[CLLocationInternalClient pingDaemon]
  -[CLLocationInternalClient getLocationServicesEnabled:]
  -[CLLocationInternalClient getAuthorizationPromptMapDisplayEnabled:]
  -[CLLocationInternalClient setGestureServiceEnabled:]
  -[CLLocationInternalClient getGestureServiceEnabled:]
  -[CLLocationInternalClient getAuthorizationStatus:forBundleID:orBundlePath:]
  -[CLLocationInternalClient performMigration]
  -[CLLocationInternalClient displayStatistics]
  -[CLLocationInternalClient dumpLogs:]
  -[CLLocationInternalClient copyMonitoredRegionsForBundleIdentifier:orBundlePath:]
  -[CLLocationInternalClient checkAndExerciseAuthorizationForBundleID:orBundlePath:services:error:]
  -[CLLocationInternalClient getLocationForBundleID:orBundlePath:dynamicAccuracyReductionEnabled:allowsAlteredAccessoryLocations:location:]
  -[CLLocationInternalClient setMapMatchingRouteHint:count:routingType:]
  -[CLLocationInternalClient copyLastLog]
  -[CLLocationInternalClient setStatusBarIconEnabled:forEntityClass:]
  -[CLLocationInternalClient getStatusBarIconEnabled:forEntityClass:]
  -[CLLocationInternalClient getStatusBarIconState]
  -[CLLocationInternalClient getPipelinedCache]
  -[CLLocationInternalClient startStopAdvertisingBeacon:power:]
  -[CLLocationInternalClient getGyroCalibrationDatabaseBiasFit:atTemperature:]
  -[CLLocationInternalClient insertGyroCalibrationDatabaseBiasEstimateIfValid:temperature:variance:timestamp:]
  -[CLLocationInternalClient gyroCalibrationDatabaseWipe]
  -[CLLocationInternalClient getGyroCalibrationDatabaseNumTemperatures:]
  -[CLLocationInternalClient compassCalibrationDatabaseGetBias:magneticField:acceleration:]
  -[CLLocationInternalClient compassCalibrationDatabaseSetBias:magneticField:level:magnitude:inclination:]
  -[CLLocationInternalClient configure:]
  -[CLLocationInternalClient getControlPlaneStatusReportClear:startTime:endTime:latitude:longitude:altitude:accuracy:status:]
  -[CLLocationInternalClient getEmergencyLocationSettingsCompatibilityVersion:andContentVersion:]
  -[CLLocationInternalClient deleteCurrentEmergencyLocationAsset]
  -[CLLocationInternalClient copyNearbyAssetSettings]
  -[CLLocationInternalClient getMotionSensorLogs]
  -[CLLocationInternalClient getAccessoryMotionSensorLogs]
  -[CLLocationInternalClient copyActivityAlarms]
  -[CLLocationInternalClient setAuthorizationStatusByType:withCorrectiveCompensation:forBundleID:orBundlePath:]
  -[CLLocationInternalClient setTemporaryAuthorizationGranted:forBundleID:orBundlePath:]
  -[CLLocationInternalClient setBackgroundIndicatorForBundleID:orBundlePath:enabled:]
  -[CLLocationInternalClient gyroCalibrationDatabaseSupportsMiniCalibration:]
  -[CLLocationInternalClient timeSyncMachTimeStamp:oscarTimeStamp:]


CLPlacemarkInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
  // instance methods
  -[CLPlacemarkInternal init]


CLPlacemark : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  CNPostalAddress *postalAddress
 @property  CLLocation *location
 @property  CLRegion *region
 @property  NSTimeZone *timeZone
 @property  NSDictionary *addressDictionary
 @property  NSString *name
 @property  NSString *thoroughfare
 @property  NSString *subThoroughfare
 @property  NSString *locality
 @property  NSString *subLocality
 @property  NSString *administrativeArea
 @property  NSString *subAdministrativeArea
 @property  NSString *postalCode
 @property  NSString *ISOcountryCode
 @property  NSString *country
 @property  NSString *inlandWater
 @property  NSString *ocean
 @property  NSArray *areasOfInterest

  // class methods
  +[CLPlacemark supportsSecureCoding]
  +[CLPlacemark placemarkWithGEOMapItem:]

  // instance methods
  -[CLPlacemark dealloc]
  -[CLPlacemark name]
  -[CLPlacemark copyWithZone:]
  -[CLPlacemark encodeWithCoder:]
  -[CLPlacemark initWithCoder:]
  -[CLPlacemark timeZone]
  -[CLPlacemark location]
  -[CLPlacemark region]
  -[CLPlacemark subThoroughfare]
  -[CLPlacemark thoroughfare]
  -[CLPlacemark postalCode]
  -[CLPlacemark country]
  -[CLPlacemark subLocality]
  -[CLPlacemark subAdministrativeArea]
  -[CLPlacemark addressDictionary]
  -[CLPlacemark areasOfInterest]
  -[CLPlacemark _initWithGeoMapItem:]
  -[CLPlacemark initWithLocation:addressDictionary:region:areasOfInterest:]
  -[CLPlacemark initWithPlacemark:]
  -[CLPlacemark formattedAddressLines]
  -[CLPlacemark locality]
  -[CLPlacemark administrativeArea]
  -[CLPlacemark ISOcountryCode]
  -[CLPlacemark fullThoroughfare]
  -[CLPlacemark inlandWater]
  -[CLPlacemark ocean]
  -[CLPlacemark _geoMapItem]
  -[CLPlacemark postalAddress]


_CLVertex : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  {CLLocationCoordinate2D=dd} coordinate

  // class methods
  +[_CLVertex supportsSecureCoding]

  // instance methods
  -[_CLVertex dealloc]
  -[_CLVertex isEqual:]
  -[_CLVertex copyWithZone:]
  -[_CLVertex encodeWithCoder:]
  -[_CLVertex initWithCoder:]
  -[_CLVertex coordinate]
  -[_CLVertex initWithCoordinate:]
  -[_CLVertex getDistanceFrom:]


_CLPolygonalRegion : CLRegion
 @property  NSArray *vertices

  // class methods
  +[_CLPolygonalRegion supportsSecureCoding]

  // instance methods
  -[_CLPolygonalRegion dealloc]
  -[_CLPolygonalRegion encodeWithCoder:]
  -[_CLPolygonalRegion initWithCoder:]
  -[_CLPolygonalRegion vertices]
  -[_CLPolygonalRegion initWithVertices:identifier:]
  -[_CLPolygonalRegion initNearbyAllowedWithVertices:identifier:]


CLHarvester : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
  // instance methods
  -[CLHarvester dealloc]
  -[CLHarvester submitSample:]
  -[CLHarvester connect]
  -[CLHarvester currentStateDictionary]


CLStateTracker : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
 @property  ^v identifier

  // class methods
  +[CLStateTracker trackerStateSize]
  +[CLStateTracker trackerStateTypeName]

  // instance methods
  -[CLStateTracker dealloc]
  -[CLStateTracker identifier]
  -[CLStateTracker initWithQueue:]
  -[CLStateTracker dumpState:withSize:hints:]


_CLPlaceInference : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSSecureCoding, NSCopying>
 @property  unsigned long userType
 @property  unsigned long placeType
 @property  CLPlacemark *placemark
 @property  CLLocation *referenceLocation
 @property  double confidence
 @property  NSString *preferredName

  // class methods
  +[_CLPlaceInference supportsSecureCoding]

  // instance methods
  -[_CLPlaceInference dealloc]
  -[_CLPlaceInference copyWithZone:]
  -[_CLPlaceInference encodeWithCoder:]
  -[_CLPlaceInference initWithCoder:]
  -[_CLPlaceInference confidence]
  -[_CLPlaceInference userType]
  -[_CLPlaceInference initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:]
  -[_CLPlaceInference referenceLocation]
  -[_CLPlaceInference placeType]
  -[_CLPlaceInference placemark]
  -[_CLPlaceInference preferredName]


CLLocationInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
  // instance methods
  -[CLLocationInternal dealloc]
  -[CLLocationInternal copyWithZone:]
  -[CLLocationInternal initWithClientLocation:]
  -[CLLocationInternal initWithClientLocation:clientLocationPrivate:]
  -[CLLocationInternal initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:]


CLFloor : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  long long level

  // class methods
  +[CLFloor supportsSecureCoding]

  // instance methods
  -[CLFloor copyWithZone:]
  -[CLFloor encodeWithCoder:]
  -[CLFloor initWithCoder:]
  -[CLFloor level]
  -[CLFloor initWithLevel:]


CLLocation : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  CLLocationMatchInfo *matchInfo
 @property  _CLLocationGroundAltitude *_groundAltitude
 @property  {?=i{?=dd}ddddddddidi{?=dd}diIiii} clientLocation
 @property  NSString *iso6709Notation
 @property  int type
 @property  int referenceFrame
 @property  {CLLocationCoordinate2D=dd} rawCoordinate
 @property  double rawCourse
 @property  unsigned int integrity
 @property  double trustedTimestamp
 @property  double speedAccuracy
 @property  {CLLocationCoordinate2D=dd} coordinate
 @property  double altitude
 @property  double horizontalAccuracy
 @property  double verticalAccuracy
 @property  double course
 @property  double speed
 @property  NSDate *timestamp
 @property  CLFloor *floor

  // class methods
  +[CLLocation supportsSecureCoding]
  +[CLLocation locationByReductivelyFilteringLocations:]

  // instance methods
  -[CLLocation init]
  -[CLLocation dealloc]
  -[CLLocation copyWithZone:]
  -[CLLocation type]
  -[CLLocation encodeWithCoder:]
  -[CLLocation initWithCoder:]
  -[CLLocation coordinate]
  -[CLLocation timestamp]
  -[CLLocation distanceFromLocation:]
  -[CLLocation shortDescription]
  -[CLLocation speed]
  -[CLLocation initWithClientLocation:]
  -[CLLocation unmatch]
  -[CLLocation clientLocation]
  -[CLLocation initWithClientLocation:clientLocationPrivate:]
  -[CLLocation referenceFrame]
  -[CLLocation setReferenceFrame:]
  -[CLLocation horizontalAccuracy]
  -[CLLocation setHorizontalAccuracy:]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:]
  -[CLLocation getDistanceFrom:]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:groundAltitude:]
  -[CLLocation initWithLatitude:longitude:]
  -[CLLocation _initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:floor:]
  -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:]
  -[CLLocation jsonObject]
  -[CLLocation rawCoordinate]
  -[CLLocation altitude]
  -[CLLocation verticalAccuracy]
  -[CLLocation speedAccuracy]
  -[CLLocation course]
  -[CLLocation rawCourse]
  -[CLLocation integrity]
  -[CLLocation trustedTimestamp]
  -[CLLocation signalEnvironmentType]
  -[CLLocation floor]
  -[CLLocation snapToResolution:]
  -[CLLocation propagateLocationToTime:]
  -[CLLocation iso6709Notation]
  -[CLLocation initWithClientLocation:matchInfo:trustedTimestamp:]
  -[CLLocation initWithClientLocation:matchInfo:]
  -[CLLocation matchInfo]
  -[CLLocation _groundAltitude]


CLAssertion : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth
  // instance methods
  -[CLAssertion dealloc]
  -[CLAssertion invalidate]
  -[CLAssertion initWithRegistrationMessageName:messageDictionary:]


_CLRangingPeerInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[_CLRangingPeerInternal dealloc]
  -[_CLRangingPeerInternal copyWithZone:]
  -[_CLRangingPeerInternal initWithMacAddressAsUInt:secureRangingKeyID:]


_CLRangingPeerDistanceInternal : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying>
  // instance methods
  -[_CLRangingPeerDistanceInternal dealloc]
  -[_CLRangingPeerDistanceInternal copyWithZone:]
  -[_CLRangingPeerDistanceInternal initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:]


_CLRangingPeer : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  unsigned long macAddress
 @property  NSData *secureRangingKeyID

  // class methods
  +[_CLRangingPeer supportsSecureCoding]
  +[_CLRangingPeer uintMacAddressFromString:]
  +[_CLRangingPeer hexStringMacAddressFromUInt:]

  // instance methods
  -[_CLRangingPeer init]
  -[_CLRangingPeer dealloc]
  -[_CLRangingPeer isEqual:]
  -[_CLRangingPeer copyWithZone:]
  -[_CLRangingPeer encodeWithCoder:]
  -[_CLRangingPeer initWithCoder:]
  -[_CLRangingPeer initWithMacAddressAsUInt:secureRangingKeyID:]
  -[_CLRangingPeer initWithMacAddressAsString:secureRangingKeyID:]
  -[_CLRangingPeer macAddress]
  -[_CLRangingPeer getMacAddressAsString]
  -[_CLRangingPeer secureRangingKeyID]
  -[_CLRangingPeer isEqualToPeer:]
  -[_CLRangingPeer initWithMacAddressAsData:secureRangingKeyID:]


_CLRangingPeerDistance : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  _CLRangingPeer *peer
 @property  NSDate *timestamp
 @property  NSDate *date
 @property  NSNumber *distanceMeters
 @property  NSNumber *accuracyMeters
 @property  BOOL initiator
 @property  BOOL shouldUnlock

  // class methods
  +[_CLRangingPeerDistance supportsSecureCoding]

  // instance methods
  -[_CLRangingPeerDistance init]
  -[_CLRangingPeerDistance dealloc]
  -[_CLRangingPeerDistance copyWithZone:]
  -[_CLRangingPeerDistance encodeWithCoder:]
  -[_CLRangingPeerDistance initWithCoder:]
  -[_CLRangingPeerDistance date]
  -[_CLRangingPeerDistance timestamp]
  -[_CLRangingPeerDistance isInitiator]
  -[_CLRangingPeerDistance peer]
  -[_CLRangingPeerDistance initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:]
  -[_CLRangingPeerDistance initWithPeer:date:distanceMeters:accuracyMeters:initiator:]
  -[_CLRangingPeerDistance initWithPeer:timestamp:distanceMeters:accuracyMeters:initiator:]
  -[_CLRangingPeerDistance distanceMeters]
  -[_CLRangingPeerDistance accuracyMeters]
  -[_CLRangingPeerDistance shouldUnlock]
  -[_CLRangingPeerDistance initiator]


CLLocationIndependenceAssertion : CLAssertion
  // class methods
  +[CLLocationIndependenceAssertion newAssertionWithReason:]


_CLLSLLocationCoordinate : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double latitude
 @property  double longitude

  // class methods
  +[_CLLSLLocationCoordinate supportsSecureCoding]

  // instance methods
  -[_CLLSLLocationCoordinate copyWithZone:]
  -[_CLLSLLocationCoordinate encodeWithCoder:]
  -[_CLLSLLocationCoordinate initWithCoder:]
  -[_CLLSLLocationCoordinate latitude]
  -[_CLLSLLocationCoordinate longitude]
  -[_CLLSLLocationCoordinate setLongitude:]
  -[_CLLSLLocationCoordinate setLatitude:]
  -[_CLLSLLocationCoordinate initWithCoordinate:]
  -[_CLLSLLocationCoordinate initWithLatitude:longitude:]


_CLLSLLocation : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  _CLLSLLocationCoordinate *coordinate
 @property  double altitude
 @property  double timestamp

  // class methods
  +[_CLLSLLocation supportsSecureCoding]

  // instance methods
  -[_CLLSLLocation dealloc]
  -[_CLLSLLocation copyWithZone:]
  -[_CLLSLLocation encodeWithCoder:]
  -[_CLLSLLocation initWithCoder:]
  -[_CLLSLLocation coordinate]
  -[_CLLSLLocation timestamp]
  -[_CLLSLLocation setTimestamp:]
  -[_CLLSLLocation setAltitude:]
  -[_CLLSLLocation initWithCoordinate:]
  -[_CLLSLLocation initWithLatitude:longitude:]
  -[_CLLSLLocation altitude]
  -[_CLLSLLocation initWithCoordinate:altitude:timetamp:]
  -[_CLLSLLocation descriptionWithMemberIndent:endIndent:]
  -[_CLLSLLocation initWithLatitude:longitude:altitude:timetamp:]
  -[_CLLSLLocation setCoordinate:]


_CLLSLMapRoadSegment : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  unsigned long roadID
 @property  NSArray *polylines

  // class methods
  +[_CLLSLMapRoadSegment supportsSecureCoding]

  // instance methods
  -[_CLLSLMapRoadSegment dealloc]
  -[_CLLSLMapRoadSegment copyWithZone:]
  -[_CLLSLMapRoadSegment encodeWithCoder:]
  -[_CLLSLMapRoadSegment initWithCoder:]
  -[_CLLSLMapRoadSegment descriptionWithMemberIndent:endIndent:]
  -[_CLLSLMapRoadSegment polylines]
  -[_CLLSLMapRoadSegment roadID]
  -[_CLLSLMapRoadSegment setRoadID:]
  -[_CLLSLMapRoadSegment setPolylines:]


_CLLSLHeadingSupplInfo : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  _CLLSLMapRoadSegment *roadSegment

  // class methods
  +[_CLLSLHeadingSupplInfo supportsSecureCoding]

  // instance methods
  -[_CLLSLHeadingSupplInfo dealloc]
  -[_CLLSLHeadingSupplInfo copyWithZone:]
  -[_CLLSLHeadingSupplInfo encodeWithCoder:]
  -[_CLLSLHeadingSupplInfo initWithCoder:]
  -[_CLLSLHeadingSupplInfo descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeadingSupplInfo roadSegment]
  -[_CLLSLHeadingSupplInfo setRoadSegment:]


_CLLSLHeading : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  double timestamp
 @property  {?=[3]} rotationFromGlobalToDeviceFrame
 @property  {?=[3]} rotationFromGlobalToCameraFrame
 @property  void rotationalAccuracyInRadians
 @property  double confidence
 @property  unsigned long globalReferenceFrame
 @property  _CLLSLLocation *location
 @property  _CLLSLHeadingSupplInfo *supplemantaryInfo

  // class methods
  +[_CLLSLHeading supportsSecureCoding]

  // instance methods
  -[_CLLSLHeading dealloc]
  -[_CLLSLHeading copyWithZone:]
  -[_CLLSLHeading encodeWithCoder:]
  -[_CLLSLHeading initWithCoder:]
  -[_CLLSLHeading confidence]
  -[_CLLSLHeading timestamp]
  -[_CLLSLHeading location]
  -[_CLLSLHeading setTimestamp:]
  -[_CLLSLHeading setConfidence:]
  -[_CLLSLHeading descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeading rotationFromGlobalToDeviceFrame]
  -[_CLLSLHeading rotationFromGlobalToCameraFrame]
  -[_CLLSLHeading rotationalAccuracyInRadians]
  -[_CLLSLHeading globalReferenceFrame]
  -[_CLLSLHeading supplemantaryInfo]
  -[_CLLSLHeading setRotationFromGlobalToDeviceFrame:]
  -[_CLLSLHeading setRotationFromGlobalToCameraFrame:]
  -[_CLLSLHeading setRotationalAccuracyInRadians:]
  -[_CLLSLHeading setGlobalReferenceFrame:]
  -[_CLLSLHeading setLocation:]
  -[_CLLSLHeading setSupplemantaryInfo:]


_CLLSLHeadingEstimation : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  int status
 @property  NSArray *headings

  // class methods
  +[_CLLSLHeadingEstimation supportsSecureCoding]

  // instance methods
  -[_CLLSLHeadingEstimation dealloc]
  -[_CLLSLHeadingEstimation copyWithZone:]
  -[_CLLSLHeadingEstimation encodeWithCoder:]
  -[_CLLSLHeadingEstimation initWithCoder:]
  -[_CLLSLHeadingEstimation status]
  -[_CLLSLHeadingEstimation setStatus:]
  -[_CLLSLHeadingEstimation descriptionWithMemberIndent:endIndent:]
  -[_CLLSLHeadingEstimation headings]
  -[_CLLSLHeadingEstimation setHeadings:]


_CLVIOEstimation : NSObject /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth <NSCopying, NSSecureCoding>
 @property  int trackingState
 @property  double originTimestamp
 @property  double timestamp
 @property  {?=QCCCCCCCCCCC} inertialStateInfo
 @property  NSData *inertialState
 @property  {?=QCCCCCCCCCCC} inertialCovarianceInfo
 @property  NSData *inertialCovariance
 @property  {?=[4]} cameraPose
 @property  {?=[3]} cameraIntrinsics
 @property  {CGSize=dd} cameraImageResolution

  // class methods
  +[_CLVIOEstimation supportsSecureCoding]

  // instance methods
  -[_CLVIOEstimation dealloc]
  -[_CLVIOEstimation copyWithZone:]
  -[_CLVIOEstimation encodeWithCoder:]
  -[_CLVIOEstimation initWithCoder:]
  -[_CLVIOEstimation timestamp]
  -[_CLVIOEstimation setTimestamp:]
  -[_CLVIOEstimation descriptionWithMemberIndent:endIndent:]
  -[_CLVIOEstimation trackingState]
  -[_CLVIOEstimation originTimestamp]
  -[_CLVIOEstimation inertialStateInfo]
  -[_CLVIOEstimation inertialState]
  -[_CLVIOEstimation inertialCovarianceInfo]
  -[_CLVIOEstimation inertialCovariance]
  -[_CLVIOEstimation cameraPose]
  -[_CLVIOEstimation cameraIntrinsics]
  -[_CLVIOEstimation cameraImageResolution]
  -[_CLVIOEstimation setTrackingState:]
  -[_CLVIOEstimation setOriginTimestamp:]
  -[_CLVIOEstimation setInertialStateInfo:]
  -[_CLVIOEstimation setInertialState:]
  -[_CLVIOEstimation setInertialCovarianceInfo:]
  -[_CLVIOEstimation setInertialCovariance:]
  -[_CLVIOEstimation setCameraPose:]
  -[_CLVIOEstimation setCameraIntrinsics:]
  -[_CLVIOEstimation setCameraImageResolution:]


GEOMapRegion(CLGeocoderExtras)
	// instance methods
	-[GEOMapRegion(CLGeocoderExtras) _initWithCLRegion:]

GEOLocation(CLGeocoderExtras)
	// instance methods
	-[GEOLocation(CLGeocoderExtras) _initWithCLClientLocation:]

01 00 0400 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLDispatchSilo 
01 00 0400 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLRunLoopSilo 
01 00 0400 /System/Library/PrivateFrameworks/LocationSupport.framework/LocationSupport: CLSilo 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOLocation 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapItemStorage 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapRegion 
01 00 0200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOMapService 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0500 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
