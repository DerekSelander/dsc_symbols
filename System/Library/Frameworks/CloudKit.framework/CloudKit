|| __DATA.__data _CKCNContactEmailAddressesKey
|| __DATA.__data _CKCNContactPhoneNumbersKey
|| __DATA.__data _kCKOperationCallbackQueueName
|| __DATA.__data _kCloudKitKillSwitch
|| __DATA.__objc_data _OBJC_CLASS_$_CKAcceptSharesOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKAccountOverrideInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CKAggregateZonePCSOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKArchiveRecordsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetCopyInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetDownloadPreauthorization
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetRepairOperationUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetRepairScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetRereferenceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetReuploadExpectedProperties
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetTransferOptions
|| __DATA.__objc_data _OBJC_CLASS_$_CKAssetUploadRequestMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_CKAutoBugCaptureMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_CKBlockingAsyncQueue
|| __DATA.__objc_data _OBJC_CLASS_$_CKCodeFunctionInvokeOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKCompleteParticipantVettingOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKContactsSupport
|| __DATA.__objc_data _OBJC_CLASS_$_CKDCancelToken
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPDate
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPLocationCoordinate
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPRecordFieldValueEncryptedValue
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPRecordIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPRecordReference
|| __DATA.__objc_data _OBJC_CLASS_$_CKDPRecordZoneIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_CKDatabaseNotification
|| __DATA.__objc_data _OBJC_CLASS_$_CKDeviceToDeviceShareInvitationToken
|| __DATA.__objc_data _OBJC_CLASS_$_CKDiscoverAllContactsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKDiscoverAllUserIdentitiesOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKDiscoverUserIdentitiesOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKDiscoverUserInfosOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedDate
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedDateArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedDouble
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedDoubleArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedEmptyArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedLocation
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedLocationArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedLongLong
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedLongLongArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedReference
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedString
|| __DATA.__objc_data _OBJC_CLASS_$_CKEncryptedStringArray
|| __DATA.__objc_data _OBJC_CLASS_$_CKException
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchArchivedRecordsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchArchivedRecordsOptions
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchNotificationChangesOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchRecordChangesOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchRecordVersionsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchRecordZoneChangesOptions
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchRecordsAssetInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchShareMetadataOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchShareParticipantKeyOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchShareParticipantsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchSubscriptionsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchUserQuotaOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchWebAuthTokenOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchWhitelistedBundleIDsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKFetchWhitelistedBundleIDsOperationResult
|| __DATA.__objc_data _OBJC_CLASS_$_CKInitiateParticipantVettingOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKLocationSortDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CKMarkAssetBrokenOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKMarkNotificationsReadOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKModifyBadgeOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKModifyRecordAccessOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKModifyWebSharingOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKNotificationListener
|| __DATA.__objc_data _OBJC_CLASS_$_CKObject
|| __DATA.__objc_data _OBJC_CLASS_$_CKOperationGroupSystemImposedInfoConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CKOperationMMCSRequestOptions
|| __DATA.__objc_data _OBJC_CLASS_$_CKPackageDB
|| __DATA.__objc_data _OBJC_CLASS_$_CKPackageItem
|| __DATA.__objc_data _OBJC_CLASS_$_CKPackageSection
|| __DATA.__objc_data _OBJC_CLASS_$_CKPackageUploadRequestMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_CKPublicKey
|| __DATA.__objc_data _OBJC_CLASS_$_CKPublishAssetsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKQuerySubscription
|| __DATA.__objc_data _OBJC_CLASS_$_CKRecordGraph
|| __DATA.__objc_data _OBJC_CLASS_$_CKRepairAssetsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKRepairZonePCSOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKSQLite
|| __DATA.__objc_data _OBJC_CLASS_$_CKSQLitePool
|| __DATA.__objc_data _OBJC_CLASS_$_CKSQLiteStatementEnumerator
|| __DATA.__objc_data _OBJC_CLASS_$_CKScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_CKSchedulerActivity
|| __DATA.__objc_data _OBJC_CLASS_$_CKSignatureGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_CKStreamingAssetAppendContext
|| __DATA.__objc_data _OBJC_CLASS_$_CKSyncEngine
|| __DATA.__objc_data _OBJC_CLASS_$_CKSyncEngineBatch
|| __DATA.__objc_data _OBJC_CLASS_$_CKSyncEngineMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_CKSyncEngineRecordModification
|| __DATA.__objc_data _OBJC_CLASS_$_CKSyncRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_CKUploadRequestConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CKUploadRequestManager
|| __DATA.__objc_data _OBJC_CLASS_$_CKUploadRequestManagerStateMachine
|| __DATA.__objc_data _OBJC_CLASS_$_CKUploadRequestMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_CKUploadRequestPersistentStore
|| __DATA.__objc_data _OBJC_CLASS_$_CKUserNotificationUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAcceptSharesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAccountOverrideInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAggregateZonePCSOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKArchiveRecordsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetCopyInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetDownloadPreauthorization
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetRepairOperationUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetRepairScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetRereferenceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetReuploadExpectedProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetTransferOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAssetUploadRequestMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_CKAutoBugCaptureMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_CKBlockingAsyncQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_CKCodeFunctionInvokeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKCompleteParticipantVettingOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKContactsSupport
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDCancelToken
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPDate
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPLocationCoordinate
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPRecordFieldValueEncryptedValue
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPRecordIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPRecordReference
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDPRecordZoneIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDatabaseNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDeviceToDeviceShareInvitationToken
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDiscoverAllContactsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDiscoverAllUserIdentitiesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDiscoverUserIdentitiesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKDiscoverUserInfosOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedDate
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedDateArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedDouble
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedDoubleArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedEmptyArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedLocation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedLocationArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedLongLong
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedLongLongArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedReference
|| __DATA.__objc_data _OBJC_METACLASS_$_CKEncryptedStringArray
|| __DATA.__objc_data _OBJC_METACLASS_$_CKException
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchArchivedRecordsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchArchivedRecordsOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchNotificationChangesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchRecordChangesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchRecordVersionsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchRecordZoneChangesOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchRecordsAssetInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchShareMetadataOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchShareParticipantKeyOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchShareParticipantsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchSubscriptionsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchUserQuotaOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchWebAuthTokenOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchWhitelistedBundleIDsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKFetchWhitelistedBundleIDsOperationResult
|| __DATA.__objc_data _OBJC_METACLASS_$_CKInitiateParticipantVettingOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKLocationSortDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CKMarkAssetBrokenOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKMarkNotificationsReadOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKModifyBadgeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKModifyRecordAccessOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKModifyWebSharingOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKNotificationListener
|| __DATA.__objc_data _OBJC_METACLASS_$_CKObject
|| __DATA.__objc_data _OBJC_METACLASS_$_CKOperationGroupSystemImposedInfoConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPackageDB
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPackageItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPackageSection
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPackageUploadRequestMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPublicKey
|| __DATA.__objc_data _OBJC_METACLASS_$_CKPublishAssetsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKQuerySubscription
|| __DATA.__objc_data _OBJC_METACLASS_$_CKRecordGraph
|| __DATA.__objc_data _OBJC_METACLASS_$_CKRepairAssetsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKRepairZonePCSOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSQLite
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSQLitePool
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSQLiteStatementEnumerator
|| __DATA.__objc_data _OBJC_METACLASS_$_CKScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSchedulerActivity
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSignatureGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_CKStreamingAssetAppendContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSyncEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSyncEngineBatch
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSyncEngineMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSyncEngineRecordModification
|| __DATA.__objc_data _OBJC_METACLASS_$_CKSyncRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUploadRequestConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUploadRequestManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUploadRequestManagerStateMachine
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUploadRequestMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUploadRequestPersistentStore
|| __DATA.__objc_data _OBJC_METACLASS_$_CKUserNotificationUtilities
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPDate._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPDate._time
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPIdentifier._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPIdentifier._name
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPIdentifier._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._altitude
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._course
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._horizontalAccuracy
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._latitude
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._longitude
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._speed
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPLocationCoordinate._verticalAccuracy
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._dateListValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._dateValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._doubleListValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._doubleValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._locationListValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._locationValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._referenceValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._signedListValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._signedValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._stringListValues
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordFieldValueEncryptedValue._stringValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordIdentifier._value
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordIdentifier._zoneIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordReference._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordReference._recordIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordReference._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordZoneIdentifier._ownerIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CKDPRecordZoneIdentifier._value
|| __DATA_CONST.__const _CKAPSEnvironmentEntitlementString
|| __DATA_CONST.__const _CKAccountChangedNotification
|| __DATA_CONST.__const _CKActivitySharingContainerIdentifier
|| __DATA_CONST.__const _CKAllTokensKey
|| __DATA_CONST.__const _CKAssetRepairContainerFormat
|| __DATA_CONST.__const _CKAssetRepairMissingAssetOrPackageRecordFieldHasRecovered
|| __DATA_CONST.__const _CKAssetRepairMissingAssetOrPackageRecordFieldRecoveredByDevice
|| __DATA_CONST.__const _CKAssetRepairMissingAssetOrPackageRecordFieldUnrecoverableDevices
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldAffectedRecordName
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldAffectedRecordType
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldFieldName
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldFileSignature
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldListIndex
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldReferenceSignature
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordFieldZone
|| __DATA_CONST.__const _CKAssetRepairMissingAssetRecordType
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldAffectedRecordName
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldAffectedRecordType
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldFieldName
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldFileSignatures
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldReferenceSignatures
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordFieldZone
|| __DATA_CONST.__const _CKAssetRepairMissingPackageRecordType
|| __DATA_CONST.__const _CKAssetRepairPushProxyFormat
|| __DATA_CONST.__const _CKAssetRepairZoneName
|| __DATA_CONST.__const _CKBackupContainerIdentifierPrefix
|| __DATA_CONST.__const _CKBluetoothContainerIdentifier
|| __DATA_CONST.__const _CKBookmarksContainerIdentifier
|| __DATA_CONST.__const _CKChainPrivateKeyFieldName
|| __DATA_CONST.__const _CKClientLogCollectionBotEmail
|| __DATA_CONST.__const _CKCloudDocsContainerIdentifier
|| __DATA_CONST.__const _CKCloudDocsShareURLSlug
|| __DATA_CONST.__const _CKCloudDocsUnitTestContainerIdentifier
|| __DATA_CONST.__const _CKCloudPhotosContainerIdentifier
|| __DATA_CONST.__const _CKCloudPhotosUnitTestContainerIdentifier
|| __DATA_CONST.__const _CKContainerIDKey
|| __DATA_CONST.__const _CKCurrentUserDefaultName
|| __DATA_CONST.__const _CKDHTTPHeaders
|| __DATA_CONST.__const _CKDiscretionaryMachServiceName
|| __DATA_CONST.__const _CKEncryptedPublicSharingKeyFieldName
|| __DATA_CONST.__const _CKErrorAccountPrimaryEmailKey
|| __DATA_CONST.__const _CKErrorDescriptionKey
|| __DATA_CONST.__const _CKErrorDisabledAppLocalizedName
|| __DATA_CONST.__const _CKErrorDomain
|| __DATA_CONST.__const _CKErrorNotFoundItemIDKey
|| __DATA_CONST.__const _CKErrorRetryAfterKey
|| __DATA_CONST.__const _CKErrorServerDescriptionKey
|| __DATA_CONST.__const _CKErrorShouldThrottleClient
|| __DATA_CONST.__const _CKExtensionErrorPayloadKey
|| __DATA_CONST.__const _CKGenericShareURLSlug
|| __DATA_CONST.__const _CKHealthContainerIdentifier
|| __DATA_CONST.__const _CKHomeKitContainerIdentifier
|| __DATA_CONST.__const _CKIdentityUpdateNotification
|| __DATA_CONST.__const _CKInternalErrorDomain
|| __DATA_CONST.__const _CKInternalUnderlyingHTTPStatusKey
|| __DATA_CONST.__const _CKKeyboardServicesContainerIdentifier
|| __DATA_CONST.__const _CKKeychainSyncContainerIdentifer
|| __DATA_CONST.__const _CKKeynoteShareURLSlug
|| __DATA_CONST.__const _CKMailDropContainerIdentifier
|| __DATA_CONST.__const _CKMessagesContainerIdentifer
|| __DATA_CONST.__const _CKModifyRecordAccessOperationAccessGrantedKey
|| __DATA_CONST.__const _CKModifyRecordAccessOperationAccessRevokedKey
|| __DATA_CONST.__const _CKModifyRecordAccessOperationAccessTokenKey
|| __DATA_CONST.__const _CKModifyRecordAccessOperationActionKey
|| __DATA_CONST.__const _CKModifyRecordAccessOperationReferenceIdentifierKey
|| __DATA_CONST.__const _CKNewsContainerIdentifierPrefix
|| __DATA_CONST.__const _CKNotesContainerIdentifierPrefix
|| __DATA_CONST.__const _CKNotesShareURLSlug
|| __DATA_CONST.__const _CKNumbersShareURLSlug
|| __DATA_CONST.__const _CKOwnerDefaultName
|| __DATA_CONST.__const _CKPagesShareURLSlug
|| __DATA_CONST.__const _CKPartialErrorsByItemIDKey
|| __DATA_CONST.__const _CKPhotosShareURLSlug
|| __DATA_CONST.__const _CKPushEnvironmentServerPreferred
|| __DATA_CONST.__const _CKRawhideContainerIdentifierPrefix
|| __DATA_CONST.__const _CKRawhideKeyRollingContainerIdentifier
|| __DATA_CONST.__const _CKRecordAccessGrantedKey
|| __DATA_CONST.__const _CKRecordAccessKey
|| __DATA_CONST.__const _CKRecordChangedErrorAncestorRecordKey
|| __DATA_CONST.__const _CKRecordChangedErrorClientRecordKey
|| __DATA_CONST.__const _CKRecordChangedErrorServerRecordKey
|| __DATA_CONST.__const _CKRecordCreationDateKey
|| __DATA_CONST.__const _CKRecordCreatorUserRecordIDKey
|| __DATA_CONST.__const _CKRecordETagKey
|| __DATA_CONST.__const _CKRecordLastModifiedUserRecordIDKey
|| __DATA_CONST.__const _CKRecordModificationDateKey
|| __DATA_CONST.__const _CKRecordNameZoneWideShare
|| __DATA_CONST.__const _CKRecordParentKey
|| __DATA_CONST.__const _CKRecordRecordIDKey
|| __DATA_CONST.__const _CKRecordShareIDKey
|| __DATA_CONST.__const _CKRecordShareInfoKey
|| __DATA_CONST.__const _CKRecordShareKey
|| __DATA_CONST.__const _CKRecordTypeShare
|| __DATA_CONST.__const _CKRecordTypeUserRecord
|| __DATA_CONST.__const _CKRecordZoneDefaultName
|| __DATA_CONST.__const _CKRemindersContainerIdentifier
|| __DATA_CONST.__const _CKRemindersShareURLSlug
|| __DATA_CONST.__const _CKRequestUUID
|| __DATA_CONST.__const _CKSafariBookmarksContainerIdentifier
|| __DATA_CONST.__const _CKShareDaemonPrefix
|| __DATA_CONST.__const _CKShareThumbnailImageDataKey
|| __DATA_CONST.__const _CKShareTitleKey
|| __DATA_CONST.__const _CKShareTypeKey
|| __DATA_CONST.__const _CKSharingdContainerIdentifier
|| __DATA_CONST.__const _CKSiriContainerIdentifierPrefix
|| __DATA_CONST.__const _CKSocialGamingContainerIdentifier
|| __DATA_CONST.__const _CKTTYCallHistoryContainerIdentifier
|| __DATA_CONST.__const _CKUploadRequestManagerResponseActionErrorUserInfoKey
|| __DATA_CONST.__const _CKUploadRequestManagerResponseActionRetryUserInfoKey
|| __DATA_CONST.__const _CKVettingURLSlug
|| __DATA_CONST.__const _CKWalletContainerIdentifierPrefix
|| __DATA_CONST.__const _CKWebSharingBaseTokenKey
|| __DATA_CONST.__const _CKWebSharingIsReadOnly
|| __DATA_CONST.__const _CKWebSharingIsShared
|| __DATA_CONST.__const _CKWebSharingOperationShareActionKey
|| __DATA_CONST.__const _CKWebSharingOperationShareBaseTokenKey
|| __DATA_CONST.__const _CKWebSharingOperationSharingKeyKey
|| __DATA_CONST.__const _CKWebSharingOperationWasSharedKey
|| __DATA_CONST.__const _CKWebSharingOperationWasUnsharedKey
|| __DATA_CONST.__const _CKWebSharingProtectionDataKey
|| __DATA_CONST.__const _CKiADContainerIdentifier
|| __DATA_CONST.__const _kCKAPSConnectionInitiateEntitlementKey
|| __DATA_CONST.__const _kCKAccountChangedNotificationKey
|| __DATA_CONST.__const _kCKAllowAccessDuringBuddyEntitlementKey
|| __DATA_CONST.__const _kCKAllowAccountDetailAccess
|| __DATA_CONST.__const _kCKAllowCustomAccountsKey
|| __DATA_CONST.__const _kCKAllowDeviceIdentifierKey
|| __DATA_CONST.__const _kCKAllowFakeEntitlementsKey
|| __DATA_CONST.__const _kCKAllowLightweightPCSEntitlementKey
|| __DATA_CONST.__const _kCKAllowMasqueradingEntitlementKey
|| __DATA_CONST.__const _kCKAllowPackagesKey
|| __DATA_CONST.__const _kCKAllowProtectionDataEntitlementKey
|| __DATA_CONST.__const _kCKAllowSetEnvironmentEntitlementKey
|| __DATA_CONST.__const _kCKAllowUnverifiedAccountEntitlementKey
|| __DATA_CONST.__const _kCKAllowZoneProtectionDataEntitlementKey
|| __DATA_CONST.__const _kCKAnonymousAccountKey
|| __DATA_CONST.__const _kCKAssetChunkLength
|| __DATA_CONST.__const _kCKAssociatedApplicationIdentifierKey
|| __DATA_CONST.__const _kCKBehaviorOptionConfigBaseURLKey
|| __DATA_CONST.__const _kCKBehaviorOptionSetupBaseURLKey
|| __DATA_CONST.__const _kCKBehaviorOptionsChangedKeysKey
|| __DATA_CONST.__const _kCKBehaviorOptionsChangedKeysNotification
|| __DATA_CONST.__const _kCKCDBShareResourceProvider
|| __DATA_CONST.__const _kCKCloudKitSystemServiceKey
|| __DATA_CONST.__const _kCKCloudServicesCloudKitServiceEntitlementKey
|| __DATA_CONST.__const _kCKCloudServicesEntitlementKey
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackInitialResponseReceived
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackRecordFetchCommand
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackRecordFetchCompletion
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackRecordFetchProgress
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackReplaceLocalSerializations
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackReplaceWireSerializations
|| __DATA_CONST.__const _kCKCodeFunctionInvokeOperationCallbackTypeKey
|| __DATA_CONST.__const _kCKConfigBaseURLString
|| __DATA_CONST.__const _kCKContainerEnvironmentEntitlementKey
|| __DATA_CONST.__const _kCKContainerEnvironmentOverridesEntitlementKey
|| __DATA_CONST.__const _kCKContainerEnvironmentProduction
|| __DATA_CONST.__const _kCKContainerEnvironmentSandbox
|| __DATA_CONST.__const _kCKDProtobufContentType
|| __DATA_CONST.__const _kCKDarkWakeEnabledEntitlementKey
|| __DATA_CONST.__const _kCKDefaultShareURLDisplayedHostname
|| __DATA_CONST.__const _kCKDefaultShareURLFullHostname
|| __DATA_CONST.__const _kCKDeviceIDUserDefaultsKey
|| __DATA_CONST.__const _kCKDisplaysSystemAcceptPromptEntitlementKey
|| __DATA_CONST.__const _kCKExplicitCodeOperationURLEntitlementKey
|| __DATA_CONST.__const _kCKFetchRecordsOperationCallbackCommand
|| __DATA_CONST.__const _kCKFetchRecordsOperationCallbackCompletion
|| __DATA_CONST.__const _kCKFetchRecordsOperationCallbackKey
|| __DATA_CONST.__const _kCKFetchRecordsOperationCallbackProgress
|| __DATA_CONST.__const _kCKIdentityUpdateNotificationKey
|| __DATA_CONST.__const _kCKKeychainDomain
|| __DATA_CONST.__const _kCKMachServiceName
|| __DATA_CONST.__const _kCKModifyRecordsOperationCallbackCompletion
|| __DATA_CONST.__const _kCKModifyRecordsOperationCallbackKey
|| __DATA_CONST.__const _kCKModifyRecordsOperationCallbackProgress
|| __DATA_CONST.__const _kCKModifyRecordsOperationCallbackUploadCompletion
|| __DATA_CONST.__const _kCKNonLegacySharingURLEntitlementKey
|| __DATA_CONST.__const _kCKNotificationAPSAlertActionLocalizationKey
|| __DATA_CONST.__const _kCKNotificationAPSAlertBodyKey
|| __DATA_CONST.__const _kCKNotificationAPSAlertLaunchImageKey
|| __DATA_CONST.__const _kCKNotificationAPSAlertLocalizationArgsKey
|| __DATA_CONST.__const _kCKNotificationAPSAlertLocalizationKey
|| __DATA_CONST.__const _kCKNotificationAPSSubtitleLocalizationArgsKey
|| __DATA_CONST.__const _kCKNotificationAPSSubtitleLocalizationKey
|| __DATA_CONST.__const _kCKNotificationAPSTitleLocalizationArgsKey
|| __DATA_CONST.__const _kCKNotificationAPSTitleLocalizationKey
|| __DATA_CONST.__const _kCKNotificationCKKey
|| __DATA_CONST.__const _kCKOperationCheckpointLongLivedOpPersistedKey
|| __DATA_CONST.__const _kCKOperationCheckpointSystemDidImposeInfoKey
|| __DATA_CONST.__const _kCKOperationCheckpointSystemImposedInfoKey
|| __DATA_CONST.__const _kCKOperationProgressArchivedRecordStatusKey
|| __DATA_CONST.__const _kCKOperationProgressArrayIndexKey
|| __DATA_CONST.__const _kCKOperationProgressAssetArrayIndexKey
|| __DATA_CONST.__const _kCKOperationProgressAssetKey
|| __DATA_CONST.__const _kCKOperationProgressAssetPaddedSizeKey
|| __DATA_CONST.__const _kCKOperationProgressAssetSignatureKey
|| __DATA_CONST.__const _kCKOperationProgressAssetSizeKey
|| __DATA_CONST.__const _kCKOperationProgressAssetUploadReceiptExpirationKey
|| __DATA_CONST.__const _kCKOperationProgressAssetUploadReceiptKey
|| __DATA_CONST.__const _kCKOperationProgressAssetUploadedKey
|| __DATA_CONST.__const _kCKOperationProgressClearAssetKeyKey
|| __DATA_CONST.__const _kCKOperationProgressClientArrayKey
|| __DATA_CONST.__const _kCKOperationProgressClientChangeTokenDataKey
|| __DATA_CONST.__const _kCKOperationProgressCommandKey
|| __DATA_CONST.__const _kCKOperationProgressCreationDateKey
|| __DATA_CONST.__const _kCKOperationProgressDataKey
|| __DATA_CONST.__const _kCKOperationProgressDatabaseChangesStatusKey
|| __DATA_CONST.__const _kCKOperationProgressDeletedKey
|| __DATA_CONST.__const _kCKOperationProgressDeserializedRecordsKey
|| __DATA_CONST.__const _kCKOperationProgressETagKey
|| __DATA_CONST.__const _kCKOperationProgressErrorKey
|| __DATA_CONST.__const _kCKOperationProgressFetchInfoKey
|| __DATA_CONST.__const _kCKOperationProgressFileContentKey
|| __DATA_CONST.__const _kCKOperationProgressModificationDateKey
|| __DATA_CONST.__const _kCKOperationProgressNotificationKey
|| __DATA_CONST.__const _kCKOperationProgressOffsetKey
|| __DATA_CONST.__const _kCKOperationProgressOperationKey
|| __DATA_CONST.__const _kCKOperationProgressPCSKeyIDKey
|| __DATA_CONST.__const _kCKOperationProgressParticipantKey
|| __DATA_CONST.__const _kCKOperationProgressParticipantKeyKey
|| __DATA_CONST.__const _kCKOperationProgressPercentageKey
|| __DATA_CONST.__const _kCKOperationProgressProtectionDataKey
|| __DATA_CONST.__const _kCKOperationProgressProtectionDiagnosticsKey
|| __DATA_CONST.__const _kCKOperationProgressQueryCursorKey
|| __DATA_CONST.__const _kCKOperationProgressQuotaAvailableKey
|| __DATA_CONST.__const _kCKOperationProgressRecordChangesPendingArchivedRecordsKey
|| __DATA_CONST.__const _kCKOperationProgressRecordChangesStatusKey
|| __DATA_CONST.__const _kCKOperationProgressRecordIDKey
|| __DATA_CONST.__const _kCKOperationProgressRecordIDsInFlightKey
|| __DATA_CONST.__const _kCKOperationProgressRecordKey
|| __DATA_CONST.__const _kCKOperationProgressRecordKeyKey
|| __DATA_CONST.__const _kCKOperationProgressRecordTypeKey
|| __DATA_CONST.__const _kCKOperationProgressRecordVersionsKey
|| __DATA_CONST.__const _kCKOperationProgressRecordZoneKey
|| __DATA_CONST.__const _kCKOperationProgressReferenceSignatureKey
|| __DATA_CONST.__const _kCKOperationProgressResponseSerializedRequestKey
|| __DATA_CONST.__const _kCKOperationProgressResponseWireSerializationsKey
|| __DATA_CONST.__const _kCKOperationProgressSerializedResponseKey
|| __DATA_CONST.__const _kCKOperationProgressServerChangeTokenKey
|| __DATA_CONST.__const _kCKOperationProgressServerRecordKey
|| __DATA_CONST.__const _kCKOperationProgressShareKey
|| __DATA_CONST.__const _kCKOperationProgressShareMetadataKey
|| __DATA_CONST.__const _kCKOperationProgressShareURLKey
|| __DATA_CONST.__const _kCKOperationProgressSubscriptionKey
|| __DATA_CONST.__const _kCKOperationProgressSyncClientInfoKey
|| __DATA_CONST.__const _kCKOperationProgressSyncClientProgressKey
|| __DATA_CONST.__const _kCKOperationProgressUserIdentityKey
|| __DATA_CONST.__const _kCKOperationProgressWireEnvelopesKey
|| __DATA_CONST.__const _kCKOperationProgressWireSerializationsKey
|| __DATA_CONST.__const _kCKOperationProgressWrappedAssetKeyKey
|| __DATA_CONST.__const _kCKOperationProgressWriteKey
|| __DATA_CONST.__const _kCKOperationProgressZoneIDKey
|| __DATA_CONST.__const _kCKOperationProgressZoneWasDeletedKey
|| __DATA_CONST.__const _kCKOperationProgressZoneWasPurgedKey
|| __DATA_CONST.__const _kCKOperationProgressZoneishPCSKeyIDKey
|| __DATA_CONST.__const _kCKOperationStatisticsRequestInfoKey
|| __DATA_CONST.__const _kCKOutOfProcessUIEntitlementKey
|| __DATA_CONST.__const _kCKPCSServiceNameForContainerMapEntitlementKey
|| __DATA_CONST.__const _kCKPackageClientDirectoryName
|| __DATA_CONST.__const _kCKPackageDaemonDirectoryName
|| __DATA_CONST.__const _kCKPackageGCInfoArchiverInfo
|| __DATA_CONST.__const _kCKPackageGCInfoPackageID
|| __DATA_CONST.__const _kCKParticipantPIIEntitlementKey
|| __DATA_CONST.__const _kCKPrefixEntitlementKey
|| __DATA_CONST.__const _kCKPropertiesDescriptionKey
|| __DATA_CONST.__const _kCKPropertiesDescriptionValue
|| __DATA_CONST.__const _kCKPublishAssetsOperationCallbackCompletion
|| __DATA_CONST.__const _kCKPublishAssetsOperationCallbackKey
|| __DATA_CONST.__const _kCKSPIWhitelistEntitlementKey
|| __DATA_CONST.__const _kCKSetupBaseURLString
|| __DATA_CONST.__const _kCKShouldUseGeneratedDeviceIDUserDefaultsKey
|| __DATA_CONST.__const _kCKStatusReportNotificationKey
|| __DATA_CONST.__const _kCKSupportServiceEntitlementKey
|| __DATA_CONST.__const _kCKSyncRequestOperationCallbackKey
|| __DATA_CONST.__const _kCKSyncRequestOperationClientArrayCallback
|| __DATA_CONST.__const _kCKSyncRequestOperationClientSyncCompletedCallback
|| __DATA_CONST.__const _kCKSyncRequestOperationClientSyncProgressedCallback
|| __DATA_CONST.__const _kCKSyncRequestOperationClientSyncStartedCallback
|| __DATA_CONST.__const _kCKUserManagerMachServiceName
|| __DATA_CONST.__const _kCKVFSOpenByIDKey
|| __DATA_CONST.__objc_const _OBJC_EHTYPE_$_CKException
|| __DATA_DIRTY.__common _ck_log_facility_ck
|| __DATA_DIRTY.__common _ck_log_facility_ckdd
|| __DATA_DIRTY.__common _ck_log_facility_data_repair
|| __DATA_DIRTY.__common _ck_log_facility_engine
|| __DATA_DIRTY.__common _ck_log_facility_logstats
|| __DATA_DIRTY.__common _ck_log_facility_mmcs
|| __DATA_DIRTY.__common _ck_log_facility_notification_listener
|| __DATA_DIRTY.__common _ck_log_facility_op
|| __DATA_DIRTY.__common _ck_log_facility_pcs
|| __DATA_DIRTY.__common _ck_log_facility_request
|| __DATA_DIRTY.__common _ck_log_facility_scheduler
|| __DATA_DIRTY.__common _ck_log_facility_sql
|| __DATA_DIRTY.__common _ck_log_facility_status
|| __DATA_DIRTY.__common _ck_log_facility_traffic_binary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKAcceptSharesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKAccountInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKAggregateZonePCSOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKApplicationPermissionGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKArchiveRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKArchivedAnchoredPackage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKAssetReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKBehaviorOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKCodeFunctionInvokeOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKCompleteParticipantVettingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKContainerID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKContainerOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKContainerSetupInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDatabase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDatabaseOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDatabaseOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDatabaseSubscription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDiscoverUserIdentitiesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDiscoveredUserInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKDiscretionaryOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKEncryptedData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKEncryptedRecordValueStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKEventMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchArchivedRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchDatabaseChangesOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchDatabaseChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchDatabaseChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchNotificationChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchNotificationChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordVersionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordZoneChangesConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordZoneChangesOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordZoneChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordZonesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordsOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchShareMetadataOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchShareParticipantKeyOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchShareParticipantsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchSubscriptionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchUserQuotaOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchWebAuthTokenOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFetchWebAuthTokenOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFileMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFileOpenInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFileOpenResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKFlowControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKInitiateParticipantVettingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKInternalError
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKMarkAssetBrokenOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKMarkNotificationsReadOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyBadgeOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyRecordAccessOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyRecordZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyRecordZonesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyRecordsOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifySubscriptionsOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifySubscriptionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKModifyWebSharingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKNotificationID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKNotificationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKObjCClass
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKObjCProperty
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKObjCType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationCallbackManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationFlowControlManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationGroupSystemImposedInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKPCSDiagnosticInformation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKPackage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKPlaceholderOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKPrettyError
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKPublishAssetsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQueryCursor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQueryNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQueryOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQueryOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKQueryOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordValueStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordZoneID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordZoneNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRecordZoneSubscription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRepairAssetsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRepairZonePCSOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKRequestInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKServerChangeToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKShare
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKShareMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKShareParticipant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKStreamingAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKSubscription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKSyncingClientInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKUserIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKUserIdentityLookupInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CKZonePCSDiagnosticInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKAcceptSharesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKAccountInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKAggregateZonePCSOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKApplicationPermissionGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKArchiveRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKArchivedAnchoredPackage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKAssetReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKBehaviorOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKCodeFunctionInvokeOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKCompleteParticipantVettingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKContainerID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKContainerOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKContainerSetupInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDatabase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDatabaseOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDatabaseOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDatabaseSubscription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDiscoverUserIdentitiesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDiscoveredUserInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKDiscretionaryOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKEncryptedData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKEncryptedRecordValueStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKEncryptedString
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKEventMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchArchivedRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchDatabaseChangesOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchDatabaseChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchDatabaseChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchNotificationChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchNotificationChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordChangesOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordVersionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordZoneChangesConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordZoneChangesOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordZoneChangesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordZonesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordsOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchShareMetadataOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchShareParticipantKeyOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchShareParticipantsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchSubscriptionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchUserQuotaOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchWebAuthTokenOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFetchWebAuthTokenOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFileMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFileOpenInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFileOpenResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKFlowControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKInitiateParticipantVettingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKInternalError
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKMarkAssetBrokenOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKMarkNotificationsReadOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyBadgeOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyRecordAccessOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyRecordZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyRecordZonesOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyRecordsOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyRecordsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifySubscriptionsOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifySubscriptionsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKModifyWebSharingOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKNotification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKNotificationID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKNotificationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKObjCClass
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKObjCProperty
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKObjCType
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationCallbackManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationFlowControlManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationGroupSystemImposedInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationMMCSRequestOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKPCSDiagnosticInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKPackage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKPlaceholderOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKPrettyError
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKPublishAssetsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQueryCursor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQueryNotification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQueryOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQueryOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKQueryOperationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordValueStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordZoneID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordZoneNotification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRecordZoneSubscription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRepairAssetsOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRepairZonePCSOperationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKRequestInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKServerChangeToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKShare
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKShareMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKShareParticipant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKStreamingAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKSubscription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKSyncingClientInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKUserIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKUserIdentityLookupInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CKZonePCSDiagnosticInformation
|| __TEXT.__const _CKQueryOperationMaximumResults
|| __TEXT.__const _CKReferenceActionValidate
|| __TEXT.__text _CKAbsoluteHostTime
|| __TEXT.__text _CKAcceptablePredicateValueClasses
|| __TEXT.__text _CKAcceptableValueClasses
|| __TEXT.__text _CKAllClientEntitlementKeys
|| __TEXT.__text _CKAppIdentifierFromTeamAppTuple
|| __TEXT.__text _CKAutoBugCaptureReasonToString
|| __TEXT.__text _CKBoolFromCKTernary
|| __TEXT.__text _CKBuildVersion
|| __TEXT.__text _CKCFArrayForEach
|| __TEXT.__text _CKCFDictionaryForEach
|| __TEXT.__text _CKCanRetryForError
|| __TEXT.__text _CKContainerEnvironmentFromString
|| __TEXT.__text _CKContainerEnvironmentString
|| __TEXT.__text _CKContainerIdentifierIsAppleInternal
|| __TEXT.__text _CKCreateDirectoryAtPath
|| __TEXT.__text _CKCreateDirectoryAtPathWithAttributes
|| __TEXT.__text _CKCreateGUID
|| __TEXT.__text _CKCurrentProcessIsDaemon
|| __TEXT.__text _CKCurrentQueueIsMainQueue
|| __TEXT.__text _CKCurrentQueueQualityOfService
|| __TEXT.__text _CKCurrentThreadQualityOfService
|| __TEXT.__text _CKDPDateReadFrom
|| __TEXT.__text _CKDPIdentifierReadFrom
|| __TEXT.__text _CKDPLocationCoordinateReadFrom
|| __TEXT.__text _CKDPRecordFieldValueEncryptedValueReadFrom
|| __TEXT.__text _CKDPRecordIdentifierReadFrom
|| __TEXT.__text _CKDPRecordReferenceReadFrom
|| __TEXT.__text _CKDPRecordZoneIdentifierReadFrom
|| __TEXT.__text _CKDatabaseScopeFromString
|| __TEXT.__text _CKDatabaseScopeString
|| __TEXT.__text _CKDatasAreBothNilOrEqual
|| __TEXT.__text _CKDeviceID
|| __TEXT.__text _CKEarliestStartDateAfterError
|| __TEXT.__text _CKErrorChainFromError
|| __TEXT.__text _CKErrorChainStringFromError
|| __TEXT.__text _CKErrorCodeForInternalErrorCode
|| __TEXT.__text _CKErrorCodeForNSURLErrorCode
|| __TEXT.__text _CKErrorIsCode
|| __TEXT.__text _CKFetchAPSEnvironmentFromServerOrEntitlements
|| __TEXT.__text _CKGetCurrentActivities
|| __TEXT.__text _CKGetGlobalQueue
|| __TEXT.__text _CKGetHomeDir
|| __TEXT.__text _CKGetHomeDirRealPath
|| __TEXT.__text _CKGetRealPath
|| __TEXT.__text _CKHexCharFromBytes
|| __TEXT.__text _CKIndexedArrayKey
|| __TEXT.__text _CKIsPCSError
|| __TEXT.__text _CKIsRunningInCloudD
|| __TEXT.__text _CKIsRunningInTestHost
|| __TEXT.__text _CKIsValidOperationForScope
|| __TEXT.__text _CKLinkCheck0fd6bdf95f2efb6e65813fd4cd0f5d9af656d08a
|| __TEXT.__text _CKLinkCheck5dbf91c3fd1d871f0bcfe60afeb451e3e708d350
|| __TEXT.__text _CKLinkCheck908c3403f5370f9fc0f790c790ce4de0669132c0
|| __TEXT.__text _CKLinkCheck92e3e8f8ec1a906754afb22d87eb36301b4f6760
|| __TEXT.__text _CKMainBundleIsAppleExecutable
|| __TEXT.__text _CKNSIndexSet_enumerateInverseRangesInRange_options_usingBlock
|| __TEXT.__text _CKNSIndexSet_indexSetWithInverseIndexSet
|| __TEXT.__text _CKNSQualityOfServiceFromQoSClass
|| __TEXT.__text _CKOperationGroupTransferSizeForBytes
|| __TEXT.__text _CKOperationLoggableProgressArguments
|| __TEXT.__text _CKOperationProgressCallbackClasses
|| __TEXT.__text _CKPIDIsStillAlive
|| __TEXT.__text _CKProcessIndexedArrayKey
|| __TEXT.__text _CKProductName
|| __TEXT.__text _CKProductType
|| __TEXT.__text _CKProductVersion
|| __TEXT.__text _CKQoSClassFromNSQualityOfService
|| __TEXT.__text _CKQoSIsBackground
|| __TEXT.__text _CKQualityOfServiceOrdering
|| __TEXT.__text _CKRetryAfterSecondsForError
|| __TEXT.__text _CKSDKVersion
|| __TEXT.__text _CKSQLiteJournalSuffixes
|| __TEXT.__text _CKServerEnvironmentFromString
|| __TEXT.__text _CKShareURLSlugForiWorkShareTitle
|| __TEXT.__text _CKSharingContainerSlugForContainerID
|| __TEXT.__text _CKShortRandomID
|| __TEXT.__text _CKShouldUseNewPredicateValidation
|| __TEXT.__text _CKShouldWrapErrorFetchingRecords
|| __TEXT.__text _CKStringForDiscretionaryNetworkBehavior
|| __TEXT.__text _CKStringForNetworkServiceType
|| __TEXT.__text _CKStringForQOS
|| __TEXT.__text _CKStringForTransferSize
|| __TEXT.__text _CKStringForXPCActivityState
|| __TEXT.__text _CKStringFromAccountChangeType
|| __TEXT.__text _CKStringFromAccountStatus
|| __TEXT.__text _CKStringFromApplicationPermissionStatus
|| __TEXT.__text _CKStringFromCKMMCSEncryptionSupport
|| __TEXT.__text _CKStringFromCapabilities
|| __TEXT.__text _CKStringFromDeviceToDeviceEncryptionStatus
|| __TEXT.__text _CKStringFromParticipantAcceptanceStatus
|| __TEXT.__text _CKStringFromParticipantInvitationTokenStatus
|| __TEXT.__text _CKStringFromParticipantPermission
|| __TEXT.__text _CKStringFromParticipantRole
|| __TEXT.__text _CKStringFromPartition
|| __TEXT.__text _CKStringFromServerEnvironment
|| __TEXT.__text _CKStringFromShareParticipantVisibility
|| __TEXT.__text _CKStringWithArray
|| __TEXT.__text _CKStringWithBytes
|| __TEXT.__text _CKStringWithData
|| __TEXT.__text _CKStringWithDate
|| __TEXT.__text _CKStringWithDictionary
|| __TEXT.__text _CKStringWithLimitedArray
|| __TEXT.__text _CKStringWithNibbles
|| __TEXT.__text _CKStringWithObject
|| __TEXT.__text _CKStringWithSet
|| __TEXT.__text _CKStringsAreBothNilOrEqual
|| __TEXT.__text _CKSyncEngineRecordModificationTypeOpposite
|| __TEXT.__text _CKTabIndentAtDepth
|| __TEXT.__text _CKTernaryFromBOOL
|| __TEXT.__text _CKTopLevelUnderlyingErrorCodes
|| __TEXT.__text _CKTriggerAutoBugCaptureWithFormatSignature
|| __TEXT.__text _CKTriggerClientSideAutoBugCaptureWithFormatSignature
|| __TEXT.__text _CKValidSharingURLHostnames
|| __TEXT.__text _CKValidateIndexedArrayKeys
|| __TEXT.__text _CKValidateKeyName
|| __TEXT.__text _CKValidateRecordArrayValue
|| __TEXT.__text _CKValueIsAcceptableClass
|| __TEXT.__text _CKValueIsAcceptablePredicateClass
|| __TEXT.__text _CKWarnForIncorrectServiceIdentity
|| __TEXT.__text _CKWarnForInvalidApplicationIdentifier
|| __TEXT.__text _CKWeakLinkClass
|| __TEXT.__text _CKWeakLinkSymbol
|| __TEXT.__text _CKXPCSuitableError
|| __TEXT.__text _NSTimeIntervalToClosestXPCActivityInterval
|| __TEXT.__text __CKCheckArgument
|| __TEXT.__text __CKSimulateCrash
|| __TEXT.__text _ck_call_or_dispatch_async_if_not_key
|| __TEXT.__text _ck_call_or_dispatch_sync_if_not_key
|| __TEXT.__text _ck_log_asl_level_to_type
|| __TEXT.__text _ck_log_facilities_initailize_static
|| __TEXT.__text _ck_log_get_asl_level
|| __TEXT.__text _mmapFileAtPath
|| __TEXT.__text _mmapFileDescriptor
|| __TEXT.__text _setCKIsRunningInCloudD
|| __TEXT.__text _setCKIsRunningInTestHost
|| __TEXT.__text _stringForCKErrorCode
__ Accounts: _ACAccountPropertyPersonaIdentifier
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ ApplePushService: _APSEnvironmentDevelopment
__ ApplePushService: _APSEnvironmentProduction
__ ApplePushService: _OBJC_CLASS_$_APSConnection
__ C2: _OBJC_CLASS_$_C2RequestManager
__ C2: _OBJC_CLASS_$_C2RequestOptions
__ CoreAnalytics: _AnalyticsSendEvent
__ CoreFoundation: _CFAllocatorCreate
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateWithBytesNoCopy
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopCopyCurrentMode
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFStringGetFileSystemRepresentation
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _NSURLContentAccessDateKey
__ CoreFoundation: _NSURLContentModificationDateKey
__ CoreFoundation: _NSURLFileProtectionNone
__ CoreFoundation: _NSURLFileSizeKey
__ CoreFoundation: _NSURLVolumeIdentifierKey
__ CoreFoundation: _NSURLVolumeSupportsFileCloningKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSEnumerator
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: _OBJC_METACLASS_$_NSEnumerator
__ CoreFoundation: _OBJC_METACLASS_$_NSException
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFErrorDebugDescriptionKey
__ CoreFoundation: _kCFErrorDescriptionKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreLocation: _CLLocationCoordinate2DMake
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreServices: _OBJC_CLASS_$_LSBundleProxy
__ CoreUtils: _OBJC_CLASS_$_CUState
__ CoreUtils: _OBJC_CLASS_$_CUStateEvent
__ CoreUtils: _OBJC_CLASS_$_CUStateMachine
__ CrashReporterSupport: _SimulateCrash
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSFilePathErrorKey
__ Foundation: _NSFileProtectionCompleteUntilFirstUserAuthentication
__ Foundation: _NSFileProtectionKey
__ Foundation: _NSFileSize
__ Foundation: _NSFileSystemFreeSize
__ Foundation: _NSFileSystemSize
__ Foundation: _NSHomeDirectory
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSURLErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSComparisonPredicate
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExpression
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponents
__ Foundation: _OBJC_CLASS_$_NSPersonNameComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSError
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ Foundation: _OBJC_METACLASS_$_NSSortDescriptor
__ MobileKeyBag: _MKBBackupClose
__ MobileKeyBag: _MKBBackupGetFileDescriptors
__ MobileKeyBag: _MKBBackupOpen
__ MobileKeyBag: _MKBBackupSize
__ ProtectedCloudStorage: _PCSCloudKitShareTokenCopyDecryptedData
__ ProtectedCloudStorage: _PCSCloudKitShareTokenCopyEncryptedData
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ ProtocolBuffer: _PBRepeatedDoubleAdd
__ ProtocolBuffer: _PBRepeatedDoubleClear
__ ProtocolBuffer: _PBRepeatedDoubleCopy
__ ProtocolBuffer: _PBRepeatedDoubleHash
__ ProtocolBuffer: _PBRepeatedDoubleIsEqual
__ ProtocolBuffer: _PBRepeatedDoubleNSArray
__ ProtocolBuffer: _PBRepeatedDoubleSet
__ ProtocolBuffer: _PBRepeatedInt64Add
__ ProtocolBuffer: _PBRepeatedInt64Clear
__ ProtocolBuffer: _PBRepeatedInt64Copy
__ ProtocolBuffer: _PBRepeatedInt64Hash
__ ProtocolBuffer: _PBRepeatedInt64IsEqual
__ ProtocolBuffer: _PBRepeatedInt64NSArray
__ ProtocolBuffer: _PBRepeatedInt64Set
__ PushKit: _OBJC_CLASS_$_PKPushRegistry
__ PushKit: _PKPushTypeUserNotifications
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ SymptomDiagnosticReporter: _OBJC_CLASS_$_SDRDiagnosticReporter
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureEffectiveProcess
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureSubTypeContext
__ SystemConfiguration: _SCNetworkReachabilityCreateWithName
__ SystemConfiguration: _SCNetworkReachabilityGetFlags
__ SystemConfiguration: _SCNetworkReachabilitySetCallback
__ SystemConfiguration: _SCNetworkReachabilitySetDispatchQueue
__ UserManagement: _OBJC_CLASS_$_UMUserManager
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _CC_MD5
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _XPC_ACTIVITY_ALLOW_BATTERY
__ libSystem.B.dylib: _XPC_ACTIVITY_CHECK_IN
__ libSystem.B.dylib: _XPC_ACTIVITY_DELAY
__ libSystem.B.dylib: _XPC_ACTIVITY_GRACE_PERIOD
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_15_MIN
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_1_DAY
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_1_HOUR
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_1_MIN
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_30_MIN
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_4_HOURS
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_5_MIN
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_7_DAYS
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_8_HOURS
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_SIZE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_MAINTENANCE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_UTILITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRES_BUDDY_COMPLETE
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_activity_none
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_voucher
__ libSystem.B.dylib: _dispatch_block_create_with_voucher_and_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_initially_inactive
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _fgetattrlist
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _log2
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _openbyid_np
__ libSystem.B.dylib: _os_activity_get_active
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _proc_pidinfo
__ libSystem.B.dylib: _qos_class_self
__ libSystem.B.dylib: _realpath$DARWIN_EXTSN
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _sleep
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _voucher_adopt
__ libSystem.B.dylib: _voucher_copy
__ libSystem.B.dylib: _xpc_activity_add_eligibility_changed_handler
__ libSystem.B.dylib: _xpc_activity_copy_criteria
__ libSystem.B.dylib: _xpc_activity_copy_identifier
__ libSystem.B.dylib: _xpc_activity_get_state
__ libSystem.B.dylib: _xpc_activity_register
__ libSystem.B.dylib: _xpc_activity_remove_eligibility_changed_handler
__ libSystem.B.dylib: _xpc_activity_set_criteria
__ libSystem.B.dylib: _xpc_activity_set_state
__ libSystem.B.dylib: _xpc_activity_should_defer
__ libSystem.B.dylib: _xpc_activity_unregister
__ libSystem.B.dylib: _xpc_bool_create
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_copy
__ libSystem.B.dylib: _xpc_copy_entitlement_for_self
__ libSystem.B.dylib: _xpc_copy_entitlement_for_token
__ libSystem.B.dylib: _xpc_copy_short_description
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_dictionary
__ libSystem.B.dylib: _xpc_dictionary_get_double
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_double
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_equal
__ libSystem.B.dylib: _xpc_generate_audit_token
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_conformsToProtocol
__ libobjc.A.dylib: _class_copyPropertyList
__ libobjc.A.dylib: _class_getSuperclass
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_ehtype_vtable
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_getProtocol
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _object_getClassName
__ libobjc.A.dylib: _property_copyAttributeList
__ libobjc.A.dylib: _property_getName
__ libsqlite3.dylib: __sqlite3_db_clone
__ libsqlite3.dylib: _sqlite3_bind_blob
__ libsqlite3.dylib: _sqlite3_bind_double
__ libsqlite3.dylib: _sqlite3_bind_int
__ libsqlite3.dylib: _sqlite3_bind_int64
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_busy_timeout
__ libsqlite3.dylib: _sqlite3_changes
__ libsqlite3.dylib: _sqlite3_clear_bindings
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_count
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int
__ libsqlite3.dylib: _sqlite3_column_int64
__ libsqlite3.dylib: _sqlite3_column_name
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_errcode
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_exec
__ libsqlite3.dylib: _sqlite3_extended_errcode
__ libsqlite3.dylib: _sqlite3_extended_result_codes
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_step
__ libsqlite3.dylib: _sqlite3_trace_v2
__ libsqlite3.dylib: _sqlite3_wal_checkpoint_v2
CKFlowControl : NSObject /usr/lib/libSystem.B.dylib
 @property  NSError *lastReportableError
 @property  double budget
 @property  NSDate *lastRegeneration
 @property  unsigned long budgetCap
 @property  double regenerationPerSecond
 @property  double maximumThrottleTime

  // class methods
  +[CKFlowControl flowControlWithBudgetCap:withMaximumThrottleTime:andRegenerationPerSecond:]

  // instance methods
  -[CKFlowControl .cxx_destruct]
  -[CKFlowControl setBudgetCap:]
  -[CKFlowControl setBudget:]
  -[CKFlowControl setRegenerationPerSecond:]
  -[CKFlowControl setMaximumThrottleTime:]
  -[CKFlowControl setLastRegeneration:]
  -[CKFlowControl initWithBudgetCap:withMaximumThrottleTime:andRegenerationPerSecond:]
  -[CKFlowControl regenerate]
  -[CKFlowControl budget]
  -[CKFlowControl _secondsUntilBudgetLimitationRemovedNoRegen]
  -[CKFlowControl budgetCap]
  -[CKFlowControl regenerationPerSecond]
  -[CKFlowControl maximumThrottleTime]
  -[CKFlowControl lastRegeneration]
  -[CKFlowControl setLastReportableError:]
  -[CKFlowControl expendWithCost:reportableError:]
  -[CKFlowControl CKPropertiesDescription]
  -[CKFlowControl secondsUntilBudgetLimitationRemoved]
  -[CKFlowControl isLimited]
  -[CKFlowControl attemptBudgetedExpenditureWithCost:]
  -[CKFlowControl lastReportableError]


CKRecordZoneID : NSObject /usr/lib/libSystem.B.dylib <CKXPCSuitableString, CKSQLiteItem, NSSecureCoding, NSCopying>
 @property  NSString *zoneName
 @property  NSString *ownerName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKRecordZoneID supportsSecureCoding]
  +[CKRecordZoneID cachedRecordZoneIDWithName:ownerName:]

  // instance methods
  -[CKRecordZoneID init]
  -[CKRecordZoneID isEqual:]
  -[CKRecordZoneID copyWithZone:]
  -[CKRecordZoneID encodeWithCoder:]
  -[CKRecordZoneID initWithCoder:]
  -[CKRecordZoneID .cxx_destruct]
  -[CKRecordZoneID initWithZoneName:ownerName:]
  -[CKRecordZoneID zoneName]
  -[CKRecordZoneID ownerName]
  -[CKRecordZoneID CKPropertiesDescription]
  -[CKRecordZoneID _initWithZoneName:ownerName:]
  -[CKRecordZoneID ckShortDescription]
  -[CKRecordZoneID sqliteRepresentation]
  -[CKRecordZoneID initWithSqliteRepresentation:]
  -[CKRecordZoneID CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKRecordZoneID CKPropertiesDescriptionWithProperties:]
  -[CKRecordZoneID compareToRecordZoneID:]
  -[CKRecordZoneID isDefaultRecordZoneID]
  -[CKRecordZoneID CKXPCSuitableString]


CKRepairAssetsOperation : CKDatabaseOperation
 @property  NSArray *assets
 @property  NSArray *packages
 @property  NSArray *assetMetadata
 @property  NSArray *packageMetadata
 @property  NSArray *unavailableAssets
 @property  NSArray *unavailablePackages
 @property  NSMutableDictionary *perItemErrorsByRecordID
 @property  CKUploadRequestConfiguration *uploadRequestConfiguration
 @property  CKUploadRequestConfiguration *resolvedUploadRequestConfiguration
 @property  @? repairAssetsCompletionBlock

  // instance methods
  -[CKRepairAssetsOperation .cxx_destruct]
  -[CKRepairAssetsOperation uploadRequestConfiguration]
  -[CKRepairAssetsOperation assets]
  -[CKRepairAssetsOperation setAssets:]
  -[CKRepairAssetsOperation packages]
  -[CKRepairAssetsOperation setPackages:]
  -[CKRepairAssetsOperation assetMetadata]
  -[CKRepairAssetsOperation setAssetMetadata:]
  -[CKRepairAssetsOperation packageMetadata]
  -[CKRepairAssetsOperation setPackageMetadata:]
  -[CKRepairAssetsOperation unavailableAssets]
  -[CKRepairAssetsOperation setUnavailableAssets:]
  -[CKRepairAssetsOperation unavailablePackages]
  -[CKRepairAssetsOperation setUnavailablePackages:]
  -[CKRepairAssetsOperation resolvedUploadRequestConfiguration]
  -[CKRepairAssetsOperation setUploadRequestConfiguration:]
  -[CKRepairAssetsOperation fillOutOperationInfo:]
  -[CKRepairAssetsOperation fillFromOperationInfo:]
  -[CKRepairAssetsOperation hasCKOperationCallbacksSet]
  -[CKRepairAssetsOperation repairAssetsCompletionBlock]
  -[CKRepairAssetsOperation CKOperationShouldRun:]
  -[CKRepairAssetsOperation perItemErrorsByRecordID]
  -[CKRepairAssetsOperation setRepairAssetsCompletionBlock:]
  -[CKRepairAssetsOperation _finishOnCallbackQueueWithError:]
  -[CKRepairAssetsOperation initWithAssets:packages:assetMetadata:packageMetadata:unavailableAssets:unavailablePackages:]
  -[CKRepairAssetsOperation activityCreate]
  -[CKRepairAssetsOperation performCKOperation]
  -[CKRepairAssetsOperation _handleProgressCallback:]
  -[CKRepairAssetsOperation includedMetadata]
  -[CKRepairAssetsOperation setPerItemErrorsByRecordID:]


CKRepairAssetsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  CKUploadRequestConfiguration *uploadRequestConfiguration
 @property  NSArray *assets
 @property  NSArray *packages
 @property  NSArray *assetMetadata
 @property  NSArray *packageMetadata
 @property  NSArray *unavailableAssets
 @property  NSArray *unavailablePackages

  // class methods
  +[CKRepairAssetsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKRepairAssetsOperationInfo encodeWithCoder:]
  -[CKRepairAssetsOperationInfo initWithCoder:]
  -[CKRepairAssetsOperationInfo .cxx_destruct]
  -[CKRepairAssetsOperationInfo uploadRequestConfiguration]
  -[CKRepairAssetsOperationInfo assets]
  -[CKRepairAssetsOperationInfo setAssets:]
  -[CKRepairAssetsOperationInfo packages]
  -[CKRepairAssetsOperationInfo setPackages:]
  -[CKRepairAssetsOperationInfo assetMetadata]
  -[CKRepairAssetsOperationInfo setAssetMetadata:]
  -[CKRepairAssetsOperationInfo packageMetadata]
  -[CKRepairAssetsOperationInfo setPackageMetadata:]
  -[CKRepairAssetsOperationInfo unavailableAssets]
  -[CKRepairAssetsOperationInfo setUnavailableAssets:]
  -[CKRepairAssetsOperationInfo unavailablePackages]
  -[CKRepairAssetsOperationInfo setUnavailablePackages:]
  -[CKRepairAssetsOperationInfo setUploadRequestConfiguration:]


CKDPRecordFieldValueEncryptedValue : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasSignedValue
 @property  long long signedValue
 @property  BOOL hasDoubleValue
 @property  double doubleValue
 @property  BOOL hasDateValue
 @property  CKDPDate *dateValue
 @property  BOOL hasStringValue
 @property  NSString *stringValue
 @property  BOOL hasLocationValue
 @property  CKDPLocationCoordinate *locationValue
 @property  BOOL hasReferenceValue
 @property  CKDPRecordReference *referenceValue
 @property  unsigned long signedListValuesCount
 @property  ^q signedListValues
 @property  unsigned long doubleListValuesCount
 @property  ^d doubleListValues
 @property  NSMutableArray *dateListValues
 @property  NSMutableArray *stringListValues
 @property  NSMutableArray *locationListValues

  // class methods
  +[CKDPRecordFieldValueEncryptedValue dateListValueType]
  +[CKDPRecordFieldValueEncryptedValue stringListValueType]
  +[CKDPRecordFieldValueEncryptedValue locationListValueType]

  // instance methods
  -[CKDPRecordFieldValueEncryptedValue doubleValue]
  -[CKDPRecordFieldValueEncryptedValue dealloc]
  -[CKDPRecordFieldValueEncryptedValue isEqual:]
  -[CKDPRecordFieldValueEncryptedValue copyWithZone:]
  -[CKDPRecordFieldValueEncryptedValue stringValue]
  -[CKDPRecordFieldValueEncryptedValue .cxx_destruct]
  -[CKDPRecordFieldValueEncryptedValue dictionaryRepresentation]
  -[CKDPRecordFieldValueEncryptedValue writeTo:]
  -[CKDPRecordFieldValueEncryptedValue setStringValue:]
  -[CKDPRecordFieldValueEncryptedValue mergeFrom:]
  -[CKDPRecordFieldValueEncryptedValue readFrom:]
  -[CKDPRecordFieldValueEncryptedValue copyTo:]
  -[CKDPRecordFieldValueEncryptedValue hasStringValue]
  -[CKDPRecordFieldValueEncryptedValue setDoubleValue:]
  -[CKDPRecordFieldValueEncryptedValue setHasDoubleValue:]
  -[CKDPRecordFieldValueEncryptedValue hasDoubleValue]
  -[CKDPRecordFieldValueEncryptedValue setDateValue:]
  -[CKDPRecordFieldValueEncryptedValue hasDateValue]
  -[CKDPRecordFieldValueEncryptedValue dateValue]
  -[CKDPRecordFieldValueEncryptedValue addDateListValue:]
  -[CKDPRecordFieldValueEncryptedValue addStringListValue:]
  -[CKDPRecordFieldValueEncryptedValue addLocationListValue:]
  -[CKDPRecordFieldValueEncryptedValue setLocationValue:]
  -[CKDPRecordFieldValueEncryptedValue setReferenceValue:]
  -[CKDPRecordFieldValueEncryptedValue signedListValuesCount]
  -[CKDPRecordFieldValueEncryptedValue clearSignedListValues]
  -[CKDPRecordFieldValueEncryptedValue signedListValueAtIndex:]
  -[CKDPRecordFieldValueEncryptedValue addSignedListValue:]
  -[CKDPRecordFieldValueEncryptedValue doubleListValuesCount]
  -[CKDPRecordFieldValueEncryptedValue clearDoubleListValues]
  -[CKDPRecordFieldValueEncryptedValue doubleListValueAtIndex:]
  -[CKDPRecordFieldValueEncryptedValue addDoubleListValue:]
  -[CKDPRecordFieldValueEncryptedValue dateListValuesCount]
  -[CKDPRecordFieldValueEncryptedValue clearDateListValues]
  -[CKDPRecordFieldValueEncryptedValue dateListValueAtIndex:]
  -[CKDPRecordFieldValueEncryptedValue stringListValuesCount]
  -[CKDPRecordFieldValueEncryptedValue clearStringListValues]
  -[CKDPRecordFieldValueEncryptedValue stringListValueAtIndex:]
  -[CKDPRecordFieldValueEncryptedValue locationListValuesCount]
  -[CKDPRecordFieldValueEncryptedValue clearLocationListValues]
  -[CKDPRecordFieldValueEncryptedValue locationListValueAtIndex:]
  -[CKDPRecordFieldValueEncryptedValue setSignedValue:]
  -[CKDPRecordFieldValueEncryptedValue setHasSignedValue:]
  -[CKDPRecordFieldValueEncryptedValue hasSignedValue]
  -[CKDPRecordFieldValueEncryptedValue hasLocationValue]
  -[CKDPRecordFieldValueEncryptedValue hasReferenceValue]
  -[CKDPRecordFieldValueEncryptedValue signedListValues]
  -[CKDPRecordFieldValueEncryptedValue setSignedListValues:count:]
  -[CKDPRecordFieldValueEncryptedValue doubleListValues]
  -[CKDPRecordFieldValueEncryptedValue setDoubleListValues:count:]
  -[CKDPRecordFieldValueEncryptedValue signedValue]
  -[CKDPRecordFieldValueEncryptedValue locationValue]
  -[CKDPRecordFieldValueEncryptedValue referenceValue]
  -[CKDPRecordFieldValueEncryptedValue dateListValues]
  -[CKDPRecordFieldValueEncryptedValue setDateListValues:]
  -[CKDPRecordFieldValueEncryptedValue stringListValues]
  -[CKDPRecordFieldValueEncryptedValue setStringListValues:]
  -[CKDPRecordFieldValueEncryptedValue locationListValues]
  -[CKDPRecordFieldValueEncryptedValue setLocationListValues:]


CKUserNotificationUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[CKUserNotificationUtilities showUserNotification:withCompletionBlock:]


CKUploadRequestPersistentStore : NSObject /usr/lib/libSystem.B.dylib
 @property  NSURL *databaseURL
 @property  BOOL firstInvocation
 @property  NSObject<OS_dispatch_queue> *stateQueue

  // class methods
  +[CKUploadRequestPersistentStore repairRecordToMetadata:]

  // instance methods
  -[CKUploadRequestPersistentStore .cxx_destruct]
  -[CKUploadRequestPersistentStore unarchivedObjectOfClass:fromData:error:]
  -[CKUploadRequestPersistentStore currentUser]
  -[CKUploadRequestPersistentStore setLastFetchDate:]
  -[CKUploadRequestPersistentStore lastFetchDate]
  -[CKUploadRequestPersistentStore readDatabase:async:withCompletionHandler:]
  -[CKUploadRequestPersistentStore sortedDelayedSyncRecordsForDatabase:]
  -[CKUploadRequestPersistentStore delayedSyncRecordNamesAfterDate:]
  -[CKUploadRequestPersistentStore delayedSyncDateForRecord:]
  -[CKUploadRequestPersistentStore readWriteDatabase:async:withCompletionHandler:]
  -[CKUploadRequestPersistentStore stateQueue]
  -[CKUploadRequestPersistentStore databaseURL]
  -[CKUploadRequestPersistentStore firstInvocation]
  -[CKUploadRequestPersistentStore setFirstInvocation:]
  -[CKUploadRequestPersistentStore initWithDatabaseURL:]
  -[CKUploadRequestPersistentStore assetRepairMetadata]
  -[CKUploadRequestPersistentStore packageRepairMetadata]
  -[CKUploadRequestPersistentStore metadataForRecordName:]
  -[CKUploadRequestPersistentStore delayedSyncRecordNamesBeforeAndIncludingDate:]
  -[CKUploadRequestPersistentStore earliestDelayedSyncDateAfterDate:]
  -[CKUploadRequestPersistentStore delayedSyncCountForRecordName:]
  -[CKUploadRequestPersistentStore syncEngineMetadata]
  -[CKUploadRequestPersistentStore setCurrentUser:]
  -[CKUploadRequestPersistentStore persistRepairRecord:]
  -[CKUploadRequestPersistentStore deleteRepairRecord:]
  -[CKUploadRequestPersistentStore clearRepairRecords]
  -[CKUploadRequestPersistentStore persistDelayedSyncForRecordName:withDate:increasingCount:]
  -[CKUploadRequestPersistentStore deleteDelayedSyncForRecordName:]
  -[CKUploadRequestPersistentStore clearDelayedSyncRecords]
  -[CKUploadRequestPersistentStore markRecordNameUnrecoverable:]
  -[CKUploadRequestPersistentStore persistSyncEngineMetadata:]
  -[CKUploadRequestPersistentStore clearDatabase]
  -[CKUploadRequestPersistentStore deleteDatabase]
  -[CKUploadRequestPersistentStore allData]
  -[CKUploadRequestPersistentStore setDatabaseURL:]
  -[CKUploadRequestPersistentStore setStateQueue:]


CKMarkAssetBrokenOperation : CKDatabaseOperation
 @property  CKRecordID *recordID
 @property  NSString *field
 @property  long long listIndex
 @property  CKRecordID *repairRecordID
 @property  CKUploadRequestConfiguration *uploadRequestConfiguration
 @property  CKUploadRequestConfiguration *resolvedUploadRequestConfiguration
 @property  @? markAssetBrokenCompletionBlock
 @property  BOOL touchRepairZone
 @property  BOOL bypassPCSEncryptionForTouchRepairZone
 @property  BOOL simulateCorruptAsset
 @property  BOOL writeRepairRecord

  // instance methods
  -[CKMarkAssetBrokenOperation .cxx_destruct]
  -[CKMarkAssetBrokenOperation recordID]
  -[CKMarkAssetBrokenOperation field]
  -[CKMarkAssetBrokenOperation setRecordID:]
  -[CKMarkAssetBrokenOperation uploadRequestConfiguration]
  -[CKMarkAssetBrokenOperation resolvedUploadRequestConfiguration]
  -[CKMarkAssetBrokenOperation setUploadRequestConfiguration:]
  -[CKMarkAssetBrokenOperation fillOutOperationInfo:]
  -[CKMarkAssetBrokenOperation fillFromOperationInfo:]
  -[CKMarkAssetBrokenOperation hasCKOperationCallbacksSet]
  -[CKMarkAssetBrokenOperation listIndex]
  -[CKMarkAssetBrokenOperation CKOperationShouldRun:]
  -[CKMarkAssetBrokenOperation _finishOnCallbackQueueWithError:]
  -[CKMarkAssetBrokenOperation activityCreate]
  -[CKMarkAssetBrokenOperation performCKOperation]
  -[CKMarkAssetBrokenOperation _handleProgressCallback:]
  -[CKMarkAssetBrokenOperation setListIndex:]
  -[CKMarkAssetBrokenOperation initWithRecordID:field:]
  -[CKMarkAssetBrokenOperation setTouchRepairZone:]
  -[CKMarkAssetBrokenOperation initWithRecordID:field:listIndex:]
  -[CKMarkAssetBrokenOperation setField:]
  -[CKMarkAssetBrokenOperation touchRepairZone]
  -[CKMarkAssetBrokenOperation simulateCorruptAsset]
  -[CKMarkAssetBrokenOperation setSimulateCorruptAsset:]
  -[CKMarkAssetBrokenOperation bypassPCSEncryptionForTouchRepairZone]
  -[CKMarkAssetBrokenOperation setBypassPCSEncryptionForTouchRepairZone:]
  -[CKMarkAssetBrokenOperation writeRepairRecord]
  -[CKMarkAssetBrokenOperation setWriteRepairRecord:]
  -[CKMarkAssetBrokenOperation markAssetBrokenCompletionBlock]
  -[CKMarkAssetBrokenOperation setRepairRecordID:]
  -[CKMarkAssetBrokenOperation repairRecordID]
  -[CKMarkAssetBrokenOperation setMarkAssetBrokenCompletionBlock:]
  -[CKMarkAssetBrokenOperation initWithNoRecord]


CKMarkAssetBrokenOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  CKUploadRequestConfiguration *uploadRequestConfiguration
 @property  CKRecordID *recordID
 @property  NSString *field
 @property  long long listIndex
 @property  BOOL touchRepairZone
 @property  BOOL bypassPCSEncryptionForTouchRepairZone
 @property  BOOL simulateCorruptAsset
 @property  BOOL writeRepairRecord

  // class methods
  +[CKMarkAssetBrokenOperationInfo supportsSecureCoding]

  // instance methods
  -[CKMarkAssetBrokenOperationInfo encodeWithCoder:]
  -[CKMarkAssetBrokenOperationInfo initWithCoder:]
  -[CKMarkAssetBrokenOperationInfo .cxx_destruct]
  -[CKMarkAssetBrokenOperationInfo recordID]
  -[CKMarkAssetBrokenOperationInfo field]
  -[CKMarkAssetBrokenOperationInfo setRecordID:]
  -[CKMarkAssetBrokenOperationInfo uploadRequestConfiguration]
  -[CKMarkAssetBrokenOperationInfo setUploadRequestConfiguration:]
  -[CKMarkAssetBrokenOperationInfo listIndex]
  -[CKMarkAssetBrokenOperationInfo setListIndex:]
  -[CKMarkAssetBrokenOperationInfo setTouchRepairZone:]
  -[CKMarkAssetBrokenOperationInfo setField:]
  -[CKMarkAssetBrokenOperationInfo touchRepairZone]
  -[CKMarkAssetBrokenOperationInfo simulateCorruptAsset]
  -[CKMarkAssetBrokenOperationInfo setSimulateCorruptAsset:]
  -[CKMarkAssetBrokenOperationInfo bypassPCSEncryptionForTouchRepairZone]
  -[CKMarkAssetBrokenOperationInfo setBypassPCSEncryptionForTouchRepairZone:]
  -[CKMarkAssetBrokenOperationInfo writeRepairRecord]
  -[CKMarkAssetBrokenOperationInfo setWriteRepairRecord:]


CKLogFacilityWrapper : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_os_log> *facility
 @property  NSString *facilityName

  // instance methods
  -[CKLogFacilityWrapper .cxx_destruct]
  -[CKLogFacilityWrapper initWithFacility:facilityName:]
  -[CKLogFacilityWrapper facility]
  -[CKLogFacilityWrapper facilityName]


CKModifyRecordZonesOperation : CKDatabaseOperation
 @property  NSMutableArray *savedRecordZones
 @property  NSMutableArray *deletedRecordZoneIDs
 @property  NSMutableDictionary *recordZonesByZoneIDs
 @property  NSMutableDictionary *recordZoneErrors
 @property  BOOL markZonesAsUserPurged
 @property  NSArray *recordZonesToSave
 @property  NSArray *recordZoneIDsToDelete
 @property  @? modifyRecordZonesCompletionBlock

  // instance methods
  -[CKModifyRecordZonesOperation init]
  -[CKModifyRecordZonesOperation .cxx_destruct]
  -[CKModifyRecordZonesOperation initWithRecordZonesToSave:recordZoneIDsToDelete:]
  -[CKModifyRecordZonesOperation setModifyRecordZonesCompletionBlock:]
  -[CKModifyRecordZonesOperation deletedRecordZoneIDs]
  -[CKModifyRecordZonesOperation setMarkZonesAsUserPurged:]
  -[CKModifyRecordZonesOperation fillOutOperationInfo:]
  -[CKModifyRecordZonesOperation fillFromOperationInfo:]
  -[CKModifyRecordZonesOperation hasCKOperationCallbacksSet]
  -[CKModifyRecordZonesOperation CKOperationShouldRun:]
  -[CKModifyRecordZonesOperation _finishOnCallbackQueueWithError:]
  -[CKModifyRecordZonesOperation activityCreate]
  -[CKModifyRecordZonesOperation performCKOperation]
  -[CKModifyRecordZonesOperation _handleProgressCallback:]
  -[CKModifyRecordZonesOperation recordZonesToSave]
  -[CKModifyRecordZonesOperation setRecordZonesToSave:]
  -[CKModifyRecordZonesOperation recordZoneIDsToDelete]
  -[CKModifyRecordZonesOperation setRecordZoneIDsToDelete:]
  -[CKModifyRecordZonesOperation markZonesAsUserPurged]
  -[CKModifyRecordZonesOperation modifyRecordZonesCompletionBlock]
  -[CKModifyRecordZonesOperation recordZonesByZoneIDs]
  -[CKModifyRecordZonesOperation recordZoneErrors]
  -[CKModifyRecordZonesOperation savedRecordZones]
  -[CKModifyRecordZonesOperation setSavedRecordZones:]
  -[CKModifyRecordZonesOperation setDeletedRecordZoneIDs:]
  -[CKModifyRecordZonesOperation setRecordZonesByZoneIDs:]
  -[CKModifyRecordZonesOperation setRecordZoneErrors:]


CKModifyRecordZonesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordZonesToSave
 @property  NSArray *recordZoneIDsToDelete
 @property  BOOL allowDefaultZoneSave
 @property  BOOL markZonesAsUserPurged
 @property  long long maxZoneSaveAttempts
 @property  BOOL dontFetchFromServer

  // class methods
  +[CKModifyRecordZonesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifyRecordZonesOperationInfo encodeWithCoder:]
  -[CKModifyRecordZonesOperationInfo initWithCoder:]
  -[CKModifyRecordZonesOperationInfo .cxx_destruct]
  -[CKModifyRecordZonesOperationInfo setMarkZonesAsUserPurged:]
  -[CKModifyRecordZonesOperationInfo recordZonesToSave]
  -[CKModifyRecordZonesOperationInfo setRecordZonesToSave:]
  -[CKModifyRecordZonesOperationInfo recordZoneIDsToDelete]
  -[CKModifyRecordZonesOperationInfo setRecordZoneIDsToDelete:]
  -[CKModifyRecordZonesOperationInfo markZonesAsUserPurged]
  -[CKModifyRecordZonesOperationInfo maxZoneSaveAttempts]
  -[CKModifyRecordZonesOperationInfo dontFetchFromServer]
  -[CKModifyRecordZonesOperationInfo allowDefaultZoneSave]
  -[CKModifyRecordZonesOperationInfo setAllowDefaultZoneSave:]
  -[CKModifyRecordZonesOperationInfo setMaxZoneSaveAttempts:]
  -[CKModifyRecordZonesOperationInfo setDontFetchFromServer:]


CKDiscoverAllContactsOperation : CKOperation
 @property  NSMutableArray *discoveredUserInfos
 @property  @? discoverAllContactsCompletionBlock

  // instance methods
  -[CKDiscoverAllContactsOperation init]
  -[CKDiscoverAllContactsOperation .cxx_destruct]
  -[CKDiscoverAllContactsOperation hasCKOperationCallbacksSet]
  -[CKDiscoverAllContactsOperation CKOperationShouldRun:]
  -[CKDiscoverAllContactsOperation _finishOnCallbackQueueWithError:]
  -[CKDiscoverAllContactsOperation activityCreate]
  -[CKDiscoverAllContactsOperation performCKOperation]
  -[CKDiscoverAllContactsOperation _handleProgressCallback:]
  -[CKDiscoverAllContactsOperation discoverAllContactsCompletionBlock]
  -[CKDiscoverAllContactsOperation discoveredUserInfos]
  -[CKDiscoverAllContactsOperation setDiscoverAllContactsCompletionBlock:]
  -[CKDiscoverAllContactsOperation operationInfoClass]
  -[CKDiscoverAllContactsOperation setDiscoveredUserInfos:]


CKContainerSetupInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKContainerID *containerID
 @property  NSString *sourceApplicationBundleIdentifier
 @property  CKAccountOverrideInfo *accountInfoOverride
 @property  BOOL captureResponseHTTPHeaders
 @property  BOOL wantsSiloedContext
 @property  BOOL useZoneWidePCS
 @property  NSDictionary *fakeEntitlements
 @property  BOOL holdAllOperations
 @property  BOOL returnPCSMetadata
 @property  unsigned long mmcsEncryptionSupport
 @property  NSString *containerEncryptionServiceName
 @property  BOOL bypassPCSEncryption
 @property  BOOL forceEnableReadOnlyManatee
 @property  unsigned int clientSDKVersion
 @property  BOOL masqueradeAsThirdPartyApp
 @property  NSString *personaIdentifier

  // class methods
  +[CKContainerSetupInfo supportsSecureCoding]

  // instance methods
  -[CKContainerSetupInfo copyWithZone:]
  -[CKContainerSetupInfo encodeWithCoder:]
  -[CKContainerSetupInfo initWithCoder:]
  -[CKContainerSetupInfo .cxx_destruct]
  -[CKContainerSetupInfo setUseZoneWidePCS:]
  -[CKContainerSetupInfo personaIdentifier]
  -[CKContainerSetupInfo containerID]
  -[CKContainerSetupInfo returnPCSMetadata]
  -[CKContainerSetupInfo sourceApplicationBundleIdentifier]
  -[CKContainerSetupInfo accountInfoOverride]
  -[CKContainerSetupInfo captureResponseHTTPHeaders]
  -[CKContainerSetupInfo wantsSiloedContext]
  -[CKContainerSetupInfo useZoneWidePCS]
  -[CKContainerSetupInfo fakeEntitlements]
  -[CKContainerSetupInfo holdAllOperations]
  -[CKContainerSetupInfo mmcsEncryptionSupport]
  -[CKContainerSetupInfo containerEncryptionServiceName]
  -[CKContainerSetupInfo bypassPCSEncryption]
  -[CKContainerSetupInfo forceEnableReadOnlyManatee]
  -[CKContainerSetupInfo clientSDKVersion]
  -[CKContainerSetupInfo masqueradeAsThirdPartyApp]
  -[CKContainerSetupInfo setContainerID:]
  -[CKContainerSetupInfo setSourceApplicationBundleIdentifier:]
  -[CKContainerSetupInfo setAccountInfoOverride:]
  -[CKContainerSetupInfo setCaptureResponseHTTPHeaders:]
  -[CKContainerSetupInfo setWantsSiloedContext:]
  -[CKContainerSetupInfo setFakeEntitlements:]
  -[CKContainerSetupInfo setHoldAllOperations:]
  -[CKContainerSetupInfo setReturnPCSMetadata:]
  -[CKContainerSetupInfo setMmcsEncryptionSupport:]
  -[CKContainerSetupInfo setContainerEncryptionServiceName:]
  -[CKContainerSetupInfo setBypassPCSEncryption:]
  -[CKContainerSetupInfo setForceEnableReadOnlyManatee:]
  -[CKContainerSetupInfo setClientSDKVersion:]
  -[CKContainerSetupInfo setMasqueradeAsThirdPartyApp:]
  -[CKContainerSetupInfo setPersonaIdentifier:]


CKContainerOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *personaIdentifier
 @property  BOOL captureResponseHTTPHeaders
 @property  BOOL useZoneWidePCS
 @property  BOOL wantsSiloedContext
 @property  CKAccountOverrideInfo *accountInfoOverride
 @property  BOOL returnPCSMetadata
 @property  unsigned long mmcsEncryptionSupport
 @property  NSString *encryptionServiceName
 @property  BOOL bypassPCSEncryption
 @property  BOOL enforceNamedOperationGroups
 @property  BOOL forceEnableReadOnlyManatee
 @property  CKUploadRequestConfiguration *uploadRequestConfiguration

  // class methods
  +[CKContainerOptions supportsSecureCoding]

  // instance methods
  -[CKContainerOptions init]
  -[CKContainerOptions encodeWithCoder:]
  -[CKContainerOptions initWithCoder:]
  -[CKContainerOptions .cxx_destruct]
  -[CKContainerOptions setUseZoneWidePCS:]
  -[CKContainerOptions personaIdentifier]
  -[CKContainerOptions uploadRequestConfiguration]
  -[CKContainerOptions setUploadRequestConfiguration:]
  -[CKContainerOptions returnPCSMetadata]
  -[CKContainerOptions accountInfoOverride]
  -[CKContainerOptions captureResponseHTTPHeaders]
  -[CKContainerOptions wantsSiloedContext]
  -[CKContainerOptions useZoneWidePCS]
  -[CKContainerOptions mmcsEncryptionSupport]
  -[CKContainerOptions bypassPCSEncryption]
  -[CKContainerOptions forceEnableReadOnlyManatee]
  -[CKContainerOptions setAccountInfoOverride:]
  -[CKContainerOptions setCaptureResponseHTTPHeaders:]
  -[CKContainerOptions setWantsSiloedContext:]
  -[CKContainerOptions setReturnPCSMetadata:]
  -[CKContainerOptions setMmcsEncryptionSupport:]
  -[CKContainerOptions setBypassPCSEncryption:]
  -[CKContainerOptions setForceEnableReadOnlyManatee:]
  -[CKContainerOptions setPersonaIdentifier:]
  -[CKContainerOptions encryptionServiceName]
  -[CKContainerOptions enforceNamedOperationGroups]
  -[CKContainerOptions setUseMMCSEncryptionV2:]
  -[CKContainerOptions setEncryptionServiceName:]
  -[CKContainerOptions setEnforceNamedOperationGroups:]


CKAccountInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  BOOL supportsDeviceToDeviceEncryption
 @property  long long deviceToDeviceEncryptionAvailability
 @property  long long accountStatus
 @property  long long accountPartition
 @property  BOOL hasValidCredentials

  // class methods
  +[CKAccountInfo supportsSecureCoding]

  // instance methods
  -[CKAccountInfo init]
  -[CKAccountInfo isEqual:]
  -[CKAccountInfo encodeWithCoder:]
  -[CKAccountInfo initWithCoder:]
  -[CKAccountInfo supportsDeviceToDeviceEncryption]
  -[CKAccountInfo accountStatus]
  -[CKAccountInfo CKPropertiesDescription]
  -[CKAccountInfo accountPartition]
  -[CKAccountInfo deviceToDeviceEncryptionAvailability]
  -[CKAccountInfo hasValidCredentials]
  -[CKAccountInfo setDeviceToDeviceEncryptionAvailability:]
  -[CKAccountInfo setSupportsDeviceToDeviceEncryption:]
  -[CKAccountInfo setAccountStatus:]
  -[CKAccountInfo setAccountPartition:]
  -[CKAccountInfo setHasValidCredentials:]


CKContainerXPCProxy : NSObject /usr/lib/libSystem.B.dylib <CKXPCClient, CKXPCDiscretionaryClient>
 @property  CKContainer *container
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKContainerXPCProxy container]
  -[CKContainerXPCProxy setContainer:]
  -[CKContainerXPCProxy .cxx_destruct]
  -[CKContainerXPCProxy initWithContainer:]
  -[CKContainerXPCProxy discretionarySuspensionForOperationID:]
  -[CKContainerXPCProxy handleOperationProgress:forOperationWithID:reply:]
  -[CKContainerXPCProxy handleOperationStatistics:forOperationWithID:]
  -[CKContainerXPCProxy handleOperationCompletion:forOperationWithID:]
  -[CKContainerXPCProxy handleOperationCheckpoint:forOperationWithID:]
  -[CKContainerXPCProxy openFileWithOpenInfo:reply:]
  -[CKContainerXPCProxy getFileMetadataWithFileHandle:openInfo:reply:]
  -[CKContainerXPCProxy readBytesOfInMemoryAssetContentWithUUID:offset:length:reply:]
  -[CKContainerXPCProxy consumeSandboxExtensions:reply:]
  -[CKContainerXPCProxy handleOperationProgress:forOperationWithID:]


CKContainer : NSObject /usr/lib/libSystem.B.dylib <CKXPCClient, CKXPCDiscretionaryClient>
 @property  NSString *primaryIdentifier
 @property  CKUploadRequestManager *uploadRequestManager
 @property  CKContainerID *containerID
 @property  CKRecordID *containerScopedUserID
 @property  CKRecordID *orgAdminUserID
 @property  CKContainerOptions *options
 @property  CKDatabase *privateCloudDatabase
 @property  CKDatabase *publicCloudDatabase
 @property  CKDatabase *sharedCloudDatabase
 @property  CKDatabase *organizationCloudDatabase
 @property  NSXPCConnection *xpcConnection
 @property  BOOL hasValidConnection
 @property  NSXPCConnection *discretionaryXPCConnection
 @property  BOOL hasValidDiscretionaryXPCConnection
 @property  NSOperationQueue *convenienceOperationQueue
 @property  NSOperationQueue *throttlingOperationQueue
 @property  NSOperationQueue *backgroundThrottlingOperationQueue
 @property  NSOperationQueue *discretionaryThrottlingOperationQueue
 @property  CKOperationCallbackManager *callbackManager
 @property  CKOperationFlowControlManager *flowControlManager
 @property  int statusReportToken
 @property  int killSwitchToken
 @property  int identityUpdateToken
 @property  NSMutableArray *sandboxExtensionHandles
 @property  CKContainerSetupInfo *cachedSetupInfo
 @property  BOOL hasCachedSetupInfo
 @property  NSMapTable *assetsByUUID
 @property  NSMutableDictionary *fakeInstanceEntitlements
 @property  NSNumber *fakeDeviceToDeviceEncryptionAvailability
 @property  unsigned long stateHandle
 @property  NSObject<OS_dispatch_queue> *underlyingDispatchQueue
 @property  NSString *personaIdentifier
 @property  BOOL captureResponseHTTPHeaders
 @property  BOOL wantsSiloedContext
 @property  CKAccountOverrideInfo *accountInfoOverride
 @property  NSString *containerIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKContainer containerWithIdentifier:]
  +[CKContainer _checkSelfCloudServicesEntitlement]
  +[CKContainer sharedAccountStore]
  +[CKContainer accountChangeNotificationRegistrationQueue]
  +[CKContainer _checkSelfContainerIdentifier]
  +[CKContainer _untrustedDatabaseEnvironment]
  +[CKContainer containerIDForContainerIdentifier:environment:]
  +[CKContainer containerIDForContainerIdentifier:]
  +[CKContainer sharedOutstandingOperations]
  +[CKContainer sharedCompletedLongLivedOperationIDs]
  +[CKContainer fakeClassEntitlements]
  +[CKContainer _untrustedEntitlementForKey:]
  +[CKContainer _untrustedApplicationBundleID]
  +[CKContainer getBehaviorOptionForKey:isContainerOption:completionHandler:]
  +[CKContainer defaultContainer]
  +[CKContainer registerOutstandingOperationWithID:]
  +[CKContainer unregisterOutstandingOperationWithID:]
  +[CKContainer registerCompletedLongLivedOperationWithID:]
  +[CKContainer setFakeClassEntitlement:forKey:]
  +[CKContainer clearFakeClassEntitlementForKey:]
  +[CKContainer uploadRequestFetchAllNotificationName]

  // instance methods
  -[CKContainer dealloc]
  -[CKContainer options]
  -[CKContainer addOperation:]
  -[CKContainer .cxx_destruct]
  -[CKContainer setOptions:]
  -[CKContainer xpcConnection]
  -[CKContainer setXpcConnection:]
  -[CKContainer containerIdentifier]
  -[CKContainer accountInfoWithCompletionHandler:]
  -[CKContainer privateCloudDatabase]
  -[CKContainer initWithContainerID:options:]
  -[CKContainer submitEventMetric:]
  -[CKContainer personaIdentifier]
  -[CKContainer containerID]
  -[CKContainer setupInfo]
  -[CKContainer accountStatusWithCompletionHandler:]
  -[CKContainer fetchUserRecordIDWithCompletionHandler:]
  -[CKContainer CKPropertiesDescription]
  -[CKContainer trackAssets:]
  -[CKContainer sourceApplicationBundleIdentifier]
  -[CKContainer accountInfoOverride]
  -[CKContainer captureResponseHTTPHeaders]
  -[CKContainer wantsSiloedContext]
  -[CKContainer holdAllOperations]
  -[CKContainer masqueradeAsThirdPartyApp]
  -[CKContainer setContainerID:]
  -[CKContainer setSourceApplicationBundleIdentifier:]
  -[CKContainer setAccountInfoOverride:]
  -[CKContainer setCaptureResponseHTTPHeaders:]
  -[CKContainer setWantsSiloedContext:]
  -[CKContainer setHoldAllOperations:]
  -[CKContainer setMasqueradeAsThirdPartyApp:]
  -[CKContainer setPersonaIdentifier:]
  -[CKContainer discretionarySuspensionForOperationID:]
  -[CKContainer handleOperationProgress:forOperationWithID:reply:]
  -[CKContainer handleOperationStatistics:forOperationWithID:]
  -[CKContainer handleOperationCompletion:forOperationWithID:]
  -[CKContainer handleOperationCheckpoint:forOperationWithID:]
  -[CKContainer openFileWithOpenInfo:reply:]
  -[CKContainer getFileMetadataWithFileHandle:openInfo:reply:]
  -[CKContainer readBytesOfInMemoryAssetContentWithUUID:offset:length:reply:]
  -[CKContainer consumeSandboxExtensions:reply:]
  -[CKContainer handleOperationProgress:forOperationWithID:]
  -[CKContainer _initWithContainerIdentifier:]
  -[CKContainer registerForAccountChangeNotifications]
  -[CKContainer setContainerScopedUserID:]
  -[CKContainer setOrgAdminUserID:]
  -[CKContainer CKStatusReportArray]
  -[CKContainer _setupWithContainerID:options:]
  -[CKContainer _optionsFromContainerSetupInfo:]
  -[CKContainer discretionaryXPCConnection]
  -[CKContainer sandboxExtensionHandles]
  -[CKContainer _cleanupSandboxExtensionHandles:]
  -[CKContainer stateHandle]
  -[CKContainer unregisterForAccountChangeNotifications]
  -[CKContainer sourceApplicationSecondaryIdentifier]
  -[CKContainer _containerSetupInfoFromOptions:]
  -[CKContainer _resolvedFakeEntitlements]
  -[CKContainer fakeInstanceEntitlements]
  -[CKContainer _untrustedEntitlementForKey:]
  -[CKContainer publicCloudDatabase]
  -[CKContainer sharedCloudDatabase]
  -[CKContainer organizationCloudDatabase]
  -[CKContainer dumpAllClientsStatusReportToFileHandle:completionHandler:]
  -[CKContainer dumpDaemonStatusReportToFileHandle:completionHandler:]
  -[CKContainer accountsDidGrantAccessToBundleID:containerIdentifiers:]
  -[CKContainer accountsWillDeleteAccount:completionHandler:]
  -[CKContainer accountWithID:changedWithChangeType:]
  -[CKContainer wipeAllCachesAndDie]
  -[CKContainer clearContextFromMetadataCache]
  -[CKContainer clearPILSCacheForLookupInfos:]
  -[CKContainer updatePushTokens]
  -[CKContainer flushOperationMetricsToPowerLog]
  -[CKContainer triggerAutoBugCaptureSnapshot]
  -[CKContainer hasValidConnection]
  -[CKContainer _prepareForDaemonLaunch]
  -[CKContainer setHasValidConnection:]
  -[CKContainer callbackManager]
  -[CKContainer flowControlManager]
  -[CKContainer _CKXPCInterface]
  -[CKContainer _CKXPCExportedInterface]
  -[CKContainer hasValidDiscretionaryXPCConnection]
  -[CKContainer setDiscretionaryXPCConnection:]
  -[CKContainer setHasValidDiscretionaryXPCConnection:]
  -[CKContainer daemonSynchronous:withErrorHandler:]
  -[CKContainer connectionWithError:]
  -[CKContainer discretionaryXPCConnectionWithError:]
  -[CKContainer findTrackedAssetByUUID:]
  -[CKContainer convenienceOperationQueue]
  -[CKContainer daemonWithErrorHandler:]
  -[CKContainer serverPreferredPushEnvironmentSynchronous:withCompletionHandler:]
  -[CKContainer discretionaryDaemonWithErrorHandler:]
  -[CKContainer _submitEventMetric:completionHandler:]
  -[CKContainer throttlingOperationQueue]
  -[CKContainer assetsByUUID]
  -[CKContainer setAssetsByUUID:]
  -[CKContainer _allStatusReports]
  -[CKContainer _initWithContainerIdentifier:environment:]
  -[CKContainer initWithContainerSetupInfo:]
  -[CKContainer initWithContainerID:]
  -[CKContainer initWithContainerID:accountInfoOverride:]
  -[CKContainer databaseWithDatabaseScope:]
  -[CKContainer synchronousDaemonWithErrorHandler:]
  -[CKContainer _scheduleConvenienceOperation:]
  -[CKContainer statusGroupsForApplicationPermission:completionHandler:]
  -[CKContainer accountsDidRevokeAccessToBundleID:containerIdentifiers:]
  -[CKContainer setApplicationPermission:enabled:completionHandler:]
  -[CKContainer resetAllApplicationPermissionsWithCompletionHandler:]
  -[CKContainer tossConfigWithCompletionHandler:]
  -[CKContainer serverPreferredPushEnvironmentWithCompletionHandler:]
  -[CKContainer serverPreferredPushEnvironmentWithError:]
  -[CKContainer setFakeError:forNextRequestOfClassName:]
  -[CKContainer setFakeResponseOperationResult:forNextRequestOfClassName:forItemID:withLifetime:]
  -[CKContainer wipeAllCachedLongLivedProxiesWithCompletionHandler:]
  -[CKContainer clearPCSCachesForKnownContextsWithCompletionHandler:]
  -[CKContainer getOutstandingOperationCountWithCompletionHandler:]
  -[CKContainer fetchCurrentUserBoundaryKeyWithCompletionHandler:]
  -[CKContainer queueDiscretionaryOperation:completionHandler:]
  -[CKContainer finishDiscretionaryOperation:]
  -[CKContainer setFakeEntitlement:forKey:]
  -[CKContainer setSourceApplicationSecondaryIdentifier:]
  -[CKContainer dataclassEnabled:completionHandler:]
  -[CKContainer fetchServerEnvironment:]
  -[CKContainer fetchCurrentDeviceIDWithCompletionHandler:]
  -[CKContainer fetchFullNameAndPrimaryEmailOnAccountWithCompletionHandler:]
  -[CKContainer fetchFullNameAndFormattedUsernameOfAccountWithCompletionHandler:]
  -[CKContainer submitEventMetric:completionHandler:]
  -[CKContainer deviceCountWithCompletionHandler:]
  -[CKContainer fetchFrameworkCachesDirectoryWithCompletionHandler:]
  -[CKContainer dumpDaemonStatusReport]
  -[CKContainer containerScopedUserID]
  -[CKContainer orgAdminUserID]
  -[CKContainer setPrivateCloudDatabase:]
  -[CKContainer setPublicCloudDatabase:]
  -[CKContainer setSharedCloudDatabase:]
  -[CKContainer setOrganizationCloudDatabase:]
  -[CKContainer setConvenienceOperationQueue:]
  -[CKContainer setThrottlingOperationQueue:]
  -[CKContainer backgroundThrottlingOperationQueue]
  -[CKContainer setBackgroundThrottlingOperationQueue:]
  -[CKContainer discretionaryThrottlingOperationQueue]
  -[CKContainer setDiscretionaryThrottlingOperationQueue:]
  -[CKContainer setCallbackManager:]
  -[CKContainer setFlowControlManager:]
  -[CKContainer statusReportToken]
  -[CKContainer setStatusReportToken:]
  -[CKContainer killSwitchToken]
  -[CKContainer setKillSwitchToken:]
  -[CKContainer identityUpdateToken]
  -[CKContainer setIdentityUpdateToken:]
  -[CKContainer setSandboxExtensionHandles:]
  -[CKContainer cachedSetupInfo]
  -[CKContainer setCachedSetupInfo:]
  -[CKContainer hasCachedSetupInfo]
  -[CKContainer setHasCachedSetupInfo:]
  -[CKContainer setFakeInstanceEntitlements:]
  -[CKContainer fakeDeviceToDeviceEncryptionAvailability]
  -[CKContainer setFakeDeviceToDeviceEncryptionAvailability:]
  -[CKContainer setStateHandle:]
  -[CKContainer underlyingDispatchQueue]
  -[CKContainer setUnderlyingDispatchQueue:]
  -[CKContainer _importantUserRecordIDOfType:]
  -[CKContainer _setImportantUserRecordID:ofType:]
  -[CKContainer _fetchImportantUserRecordIDOfType:completionHandler:]
  -[CKContainer _discoverUserIdentityWithLookupInfo:completionHandler:]
  -[CKContainer fetchOrgAdminUserRecordIDWithCompletionHandler:]
  -[CKContainer discoverAllIdentitiesWithCompletionHandler:]
  -[CKContainer discoverUserIdentityWithEmailAddress:completionHandler:]
  -[CKContainer discoverUserIdentityWithPhoneNumber:completionHandler:]
  -[CKContainer discoverUserIdentityWithUserRecordID:completionHandler:]
  -[CKContainer discoverAllContactUserInfosWithCompletionHandler:]
  -[CKContainer discoverUserInfoWithEmailAddress:completionHandler:]
  -[CKContainer discoverUserInfoWithUserRecordID:completionHandler:]
  -[CKContainer fetchShareParticipantWithLookupInfo:completionHandler:]
  -[CKContainer fetchShareParticipantWithEmailAddress:completionHandler:]
  -[CKContainer fetchShareParticipantWithPhoneNumber:completionHandler:]
  -[CKContainer fetchShareParticipantWithUserRecordID:completionHandler:]
  -[CKContainer fetchShareMetadataWithURL:completionHandler:]
  -[CKContainer acceptShareMetadata:completionHandler:]
  -[CKContainer decryptPersonalInfoOnShare:completionHandler:]
  -[CKContainer getNewWebSharingIdentity:]
  -[CKContainer getNewWebSharingIdentityDataWithCompletionHandler:]
  -[CKContainer fetchXPCCriteriaWithCompletionHandler:]
  -[CKContainer _fetchLongLivedOperationsWithIDs:completionHandler:]
  -[CKContainer statusForApplicationPermission:completionHandler:]
  -[CKContainer requestApplicationPermission:completionHandler:]
  -[CKContainer fetchAllLongLivedOperationIDsWithCompletionHandler:]
  -[CKContainer fetchLongLivedOperationWithID:completionHandler:]
  -[CKContainer registerForAssetUploadRequests:machServiceName:]
  -[CKContainer uploadRequestManager]
  -[CKContainer registerForPackageUploadRequests:machServiceName:]
  -[CKContainer manuallyTriggerUploadRequests]
  -[CKContainer registerForAssetUploadRequests:]
  -[CKContainer registerForPackageUploadRequests:]
  -[CKContainer unregisterFromUploadRequests]
  -[CKContainer unregisterFromUploadRequestsWithMachServiceName:]
  -[CKContainer cancelUploadRequests]
  -[CKContainer primaryIdentifier]
  -[CKContainer registerForAssetRequests:packageRequests:machServiceName:]


CKSyncEngineBatch : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL atomic
 @property  NSArray *recordsToSave
 @property  NSArray *recordIDsToDelete

  // instance methods
  -[CKSyncEngineBatch .cxx_destruct]
  -[CKSyncEngineBatch initWithRecordsToSave:recordIDsToDelete:]
  -[CKSyncEngineBatch setAtomic:]
  -[CKSyncEngineBatch CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKSyncEngineBatch recordsToSave]
  -[CKSyncEngineBatch recordIDsToDelete]
  -[CKSyncEngineBatch isAtomic]


CKArchiveRecordsOperation : CKDatabaseOperation
 @property  NSMutableDictionary *perItemErrors
 @property  NSArray *recordIDs
 @property  @? recordArchivedBlock
 @property  @? archiveRecordsCompletionBlock

  // instance methods
  -[CKArchiveRecordsOperation init]
  -[CKArchiveRecordsOperation .cxx_destruct]
  -[CKArchiveRecordsOperation setRecordIDs:]
  -[CKArchiveRecordsOperation fillOutOperationInfo:]
  -[CKArchiveRecordsOperation fillFromOperationInfo:]
  -[CKArchiveRecordsOperation hasCKOperationCallbacksSet]
  -[CKArchiveRecordsOperation CKOperationShouldRun:]
  -[CKArchiveRecordsOperation _finishOnCallbackQueueWithError:]
  -[CKArchiveRecordsOperation activityCreate]
  -[CKArchiveRecordsOperation performCKOperation]
  -[CKArchiveRecordsOperation _handleProgressCallback:]
  -[CKArchiveRecordsOperation recordIDs]
  -[CKArchiveRecordsOperation recordArchivedBlock]
  -[CKArchiveRecordsOperation archiveRecordsCompletionBlock]
  -[CKArchiveRecordsOperation perItemErrors]
  -[CKArchiveRecordsOperation setArchiveRecordsCompletionBlock:]
  -[CKArchiveRecordsOperation setRecordArchivedBlock:]
  -[CKArchiveRecordsOperation initWithRecordIDs:]
  -[CKArchiveRecordsOperation setPerItemErrors:]


CKArchiveRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDs

  // class methods
  +[CKArchiveRecordsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKArchiveRecordsOperationInfo encodeWithCoder:]
  -[CKArchiveRecordsOperationInfo initWithCoder:]
  -[CKArchiveRecordsOperationInfo .cxx_destruct]
  -[CKArchiveRecordsOperationInfo setRecordIDs:]
  -[CKArchiveRecordsOperationInfo recordIDs]


CKQuery : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  NSPredicate *predicate
 @property  NSString *recordType
 @property  NSArray *sortDescriptors

  // class methods
  +[CKQuery supportsSecureCoding]

  // instance methods
  -[CKQuery init]
  -[CKQuery copyWithZone:]
  -[CKQuery encodeWithCoder:]
  -[CKQuery initWithCoder:]
  -[CKQuery .cxx_destruct]
  -[CKQuery setPredicate:]
  -[CKQuery predicate]
  -[CKQuery sortDescriptors]
  -[CKQuery setSortDescriptors:]
  -[CKQuery recordType]
  -[CKQuery initWithRecordType:predicate:]
  -[CKQuery CKPropertiesDescription]
  -[CKQuery setRecordType:]


CKNotificationListener : NSObject /usr/lib/libSystem.B.dylib <APSConnectionDelegate, PKPushRegistryDelegate>
 @property  NSMutableDictionary *subscriptionInfos
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSOperationQueue *operationQueue
 @property  PKPushRegistry *pushRegistry
 @property  NSString *apsEnvironment
 @property  APSConnection *apsConnection
 @property  NSString *machServiceName
 @property  unsigned long strategy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKNotificationListener suggestedStrategy]

  // instance methods
  -[CKNotificationListener init]
  -[CKNotificationListener setQueue:]
  -[CKNotificationListener queue]
  -[CKNotificationListener .cxx_destruct]
  -[CKNotificationListener operationQueue]
  -[CKNotificationListener setOperationQueue:]
  -[CKNotificationListener initWithMachServiceName:]
  -[CKNotificationListener callbackQueue]
  -[CKNotificationListener connection:didReceivePublicToken:]
  -[CKNotificationListener connection:didReceiveIncomingMessage:]
  -[CKNotificationListener connection:didChangeConnectedStatus:]
  -[CKNotificationListener connectionDidReconnect:]
  -[CKNotificationListener setCallbackQueue:]
  -[CKNotificationListener setMachServiceName:]
  -[CKNotificationListener machServiceName]
  -[CKNotificationListener pushRegistry:didUpdatePushCredentials:forType:]
  -[CKNotificationListener pushRegistry:didReceiveIncomingPushWithPayload:forType:withCompletionHandler:]
  -[CKNotificationListener registerForSubscription:inDatabase:handler:]
  -[CKNotificationListener unregisterForSubscriptionWithID:inDatabase:]
  -[CKNotificationListener strategy]
  -[CKNotificationListener setStrategy:]
  -[CKNotificationListener initWithStrategy:]
  -[CKNotificationListener initWithStrategy:machServiceName:]
  -[CKNotificationListener checkConfiguration]
  -[CKNotificationListener apsEnvironment]
  -[CKNotificationListener hasAPSConnectionInitiateEntitlement]
  -[CKNotificationListener apsConnection]
  -[CKNotificationListener uniqueKeyForSubscriptionID:inDatabase:]
  -[CKNotificationListener subscriptionInfos]
  -[CKNotificationListener updatePushNotificationListeners]
  -[CKNotificationListener updateAPSConnection]
  -[CKNotificationListener updatePKPushRegistry]
  -[CKNotificationListener setApsConnection:]
  -[CKNotificationListener registerForMachServiceAPSConnectionNotifications]
  -[CKNotificationListener handlePushNotificationWithPayload:]
  -[CKNotificationListener pushRegistry]
  -[CKNotificationListener setPushRegistry:]
  -[CKNotificationListener hasInitializedAPSConnection]
  -[CKNotificationListener isRegisteredForSubscriptionWithID:inDatabase:]
  -[CKNotificationListener setSubscriptionInfos:]


CKSubscriptionInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  CKSubscription *subscription
 @property  CKDatabase *database
 @property  CKContainer *container
 @property  @? handler

  // instance methods
  -[CKSubscriptionInfo isEqual:]
  -[CKSubscriptionInfo handler]
  -[CKSubscriptionInfo container]
  -[CKSubscriptionInfo setContainer:]
  -[CKSubscriptionInfo .cxx_destruct]
  -[CKSubscriptionInfo setHandler:]
  -[CKSubscriptionInfo setDatabase:]
  -[CKSubscriptionInfo database]
  -[CKSubscriptionInfo subscription]
  -[CKSubscriptionInfo setSubscription:]


CKRepairZonePCSOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *zoneIDs

  // class methods
  +[CKRepairZonePCSOperationInfo supportsSecureCoding]

  // instance methods
  -[CKRepairZonePCSOperationInfo encodeWithCoder:]
  -[CKRepairZonePCSOperationInfo initWithCoder:]
  -[CKRepairZonePCSOperationInfo .cxx_destruct]
  -[CKRepairZonePCSOperationInfo zoneIDs]
  -[CKRepairZonePCSOperationInfo setZoneIDs:]


CKRepairZonePCSOperation : CKDatabaseOperation
 @property  NSArray *zoneIDs
 @property  @? zoneRepairedBlock

  // instance methods
  -[CKRepairZonePCSOperation .cxx_destruct]
  -[CKRepairZonePCSOperation fillOutOperationInfo:]
  -[CKRepairZonePCSOperation fillFromOperationInfo:]
  -[CKRepairZonePCSOperation hasCKOperationCallbacksSet]
  -[CKRepairZonePCSOperation activityCreate]
  -[CKRepairZonePCSOperation performCKOperation]
  -[CKRepairZonePCSOperation _handleProgressCallback:]
  -[CKRepairZonePCSOperation zoneIDs]
  -[CKRepairZonePCSOperation setZoneIDs:]
  -[CKRepairZonePCSOperation zoneRepairedBlock]
  -[CKRepairZonePCSOperation initWithZoneIDsToRepair:]
  -[CKRepairZonePCSOperation setZoneRepairedBlock:]


CKDPRecordReference : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasRecordIdentifier
 @property  CKDPRecordIdentifier *recordIdentifier

  // instance methods
  -[CKDPRecordReference isEqual:]
  -[CKDPRecordReference copyWithZone:]
  -[CKDPRecordReference type]
  -[CKDPRecordReference setType:]
  -[CKDPRecordReference .cxx_destruct]
  -[CKDPRecordReference dictionaryRepresentation]
  -[CKDPRecordReference writeTo:]
  -[CKDPRecordReference mergeFrom:]
  -[CKDPRecordReference readFrom:]
  -[CKDPRecordReference copyTo:]
  -[CKDPRecordReference typeAsString:]
  -[CKDPRecordReference StringAsType:]
  -[CKDPRecordReference setRecordIdentifier:]
  -[CKDPRecordReference setHasType:]
  -[CKDPRecordReference hasType]
  -[CKDPRecordReference hasRecordIdentifier]
  -[CKDPRecordReference recordIdentifier]


CKException : NSException
  // instance methods
  -[CKException error]
  -[CKException errorCode]
  -[CKException initWithName:format:]
  -[CKException initWithCode:format:]
  -[CKException initWithCode:format:args:]
  -[CKException initWithName:format:args:]


CKSQLitePool : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableArray *dbs
 @property  NSObject<OS_dispatch_queue> *queue
 @property  BOOL drainScheduled
 @property  @? factory
 @property  BOOL traced

  // instance methods
  -[CKSQLitePool setQueue:]
  -[CKSQLitePool queue]
  -[CKSQLitePool .cxx_destruct]
  -[CKSQLitePool traced]
  -[CKSQLitePool setTraced:]
  -[CKSQLitePool factory]
  -[CKSQLitePool performWithDatabase:]
  -[CKSQLitePool initWithFactory:queueAttr:]
  -[CKSQLitePool dbs]
  -[CKSQLitePool _openDatabaseWithError:]
  -[CKSQLitePool _acquireDatabaseWithError:]
  -[CKSQLitePool _scheduleDrain]
  -[CKSQLitePool _closeDatabase:]
  -[CKSQLitePool releaseDatabase:]
  -[CKSQLitePool performWithDatabase:error:]
  -[CKSQLitePool _drain]
  -[CKSQLitePool initWithFactory:]
  -[CKSQLitePool acquireDatabase:]
  -[CKSQLitePool acquireDatabaseWithError:]
  -[CKSQLitePool closeAll]
  -[CKSQLitePool setDbs:]
  -[CKSQLitePool drainScheduled]
  -[CKSQLitePool setDrainScheduled:]


CKAutoBugCaptureMetadata : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *procName
 @property  CKContainerID *containerID
 @property  NSError *errorPayload
 @property  long long reason

  // instance methods
  -[CKAutoBugCaptureMetadata reason]
  -[CKAutoBugCaptureMetadata .cxx_destruct]
  -[CKAutoBugCaptureMetadata setReason:]
  -[CKAutoBugCaptureMetadata containerID]
  -[CKAutoBugCaptureMetadata setContainerID:]
  -[CKAutoBugCaptureMetadata procName]
  -[CKAutoBugCaptureMetadata setProcName:]
  -[CKAutoBugCaptureMetadata errorPayload]
  -[CKAutoBugCaptureMetadata setErrorPayload:]


CKDCancelToken : NSObject /usr/lib/libSystem.B.dylib <CKDCancelling>
 @property  @? cancelAction

  // instance methods
  -[CKDCancelToken .cxx_destruct]
  -[CKDCancelToken cancel]
  -[CKDCancelToken isCancelled]
  -[CKDCancelToken setCancelAction:]
  -[CKDCancelToken cancelAction]


CKFetchRecordZonesOperation : CKDatabaseOperation
 @property  NSArray *recordZones
 @property  NSMutableDictionary *recordZonesByZoneID
 @property  NSMutableDictionary *recordZoneErrors
 @property  NSError *fetchAllRecordZonesError
 @property  BOOL isFetchAllRecordZonesOperation
 @property  BOOL ignorePCSFailures
 @property  NSArray *recordZoneIDs
 @property  @? fetchRecordZonesCompletionBlock

  // class methods
  +[CKFetchRecordZonesOperation fetchAllRecordZonesOperation]

  // instance methods
  -[CKFetchRecordZonesOperation init]
  -[CKFetchRecordZonesOperation .cxx_destruct]
  -[CKFetchRecordZonesOperation setFetchRecordZonesCompletionBlock:]
  -[CKFetchRecordZonesOperation recordZones]
  -[CKFetchRecordZonesOperation fillOutOperationInfo:]
  -[CKFetchRecordZonesOperation fillFromOperationInfo:]
  -[CKFetchRecordZonesOperation hasCKOperationCallbacksSet]
  -[CKFetchRecordZonesOperation CKOperationShouldRun:]
  -[CKFetchRecordZonesOperation _finishOnCallbackQueueWithError:]
  -[CKFetchRecordZonesOperation activityCreate]
  -[CKFetchRecordZonesOperation performCKOperation]
  -[CKFetchRecordZonesOperation _handleProgressCallback:]
  -[CKFetchRecordZonesOperation recordZoneErrors]
  -[CKFetchRecordZonesOperation setRecordZoneErrors:]
  -[CKFetchRecordZonesOperation setIsFetchAllRecordZonesOperation:]
  -[CKFetchRecordZonesOperation recordZoneIDs]
  -[CKFetchRecordZonesOperation setRecordZoneIDs:]
  -[CKFetchRecordZonesOperation isFetchAllRecordZonesOperation]
  -[CKFetchRecordZonesOperation ignorePCSFailures]
  -[CKFetchRecordZonesOperation setIgnorePCSFailures:]
  -[CKFetchRecordZonesOperation fetchRecordZonesCompletionBlock]
  -[CKFetchRecordZonesOperation setFetchAllRecordZonesError:]
  -[CKFetchRecordZonesOperation recordZonesByZoneID]
  -[CKFetchRecordZonesOperation fetchAllRecordZonesError]
  -[CKFetchRecordZonesOperation initWithRecordZoneIDs:]
  -[CKFetchRecordZonesOperation setRecordZones:]
  -[CKFetchRecordZonesOperation setRecordZonesByZoneID:]


CKFetchRecordZonesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordZoneIDs
 @property  BOOL isFetchAllRecordZonesOperation
 @property  BOOL ignorePCSFailures

  // class methods
  +[CKFetchRecordZonesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchRecordZonesOperationInfo encodeWithCoder:]
  -[CKFetchRecordZonesOperationInfo initWithCoder:]
  -[CKFetchRecordZonesOperationInfo .cxx_destruct]
  -[CKFetchRecordZonesOperationInfo setIsFetchAllRecordZonesOperation:]
  -[CKFetchRecordZonesOperationInfo recordZoneIDs]
  -[CKFetchRecordZonesOperationInfo setRecordZoneIDs:]
  -[CKFetchRecordZonesOperationInfo isFetchAllRecordZonesOperation]
  -[CKFetchRecordZonesOperationInfo ignorePCSFailures]
  -[CKFetchRecordZonesOperationInfo setIgnorePCSFailures:]


CKScheduler : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSMutableDictionary *xpcActivitiesByCKActivityIdentifier
 @property  NSMutableDictionary *handlersByCKActivityIdentifier
 @property  NSNumber *fakeDeviceCount

  // class methods
  +[CKScheduler sharedScheduler]
  +[CKScheduler shouldReportAnalyticsForActivity:]
  +[CKScheduler baseCoreAnalyticsEventPayloadForActivity:]
  +[CKScheduler xpcActivityIdentifierForCKActivityIdentifier:]
  +[CKScheduler activityFromXPCActivity:]
  +[CKScheduler xpcActivityPriorityForPriority:deviceCount:]
  +[CKScheduler gracePeriodForPriority:deviceCount:]
  +[CKScheduler shouldReportAnalyticsForContainerIdentifier:]
  +[CKScheduler identifierWithImmediateInvocationForIdentifier:]

  // instance methods
  -[CKScheduler init]
  -[CKScheduler setQueue:]
  -[CKScheduler queue]
  -[CKScheduler .cxx_destruct]
  -[CKScheduler _init]
  -[CKScheduler callbackQueue]
  -[CKScheduler setCallbackQueue:]
  -[CKScheduler submitActivity:]
  -[CKScheduler registerActivityIdentifier:handler:]
  -[CKScheduler unregisterActivityIdentifier:]
  -[CKScheduler _submitActivity:withCriteria:]
  -[CKScheduler getSuggestedXPCActivityCriteriaForActivity:completionHandler:]
  -[CKScheduler handlersByCKActivityIdentifier]
  -[CKScheduler xpcActivitiesByCKActivityIdentifier]
  -[CKScheduler registerXPCActivityWithCKActivityIdentifier:criteria:]
  -[CKScheduler runActivityWithIdentifier:xpcActivity:]
  -[CKScheduler populateCriteria:withAdditionalCriteriaFromActivity:]
  -[CKScheduler getDeviceCountForActivity:completionHandler:]
  -[CKScheduler fakeDeviceCount]
  -[CKScheduler xpcActivityForActivityWithIdentifier:]
  -[CKScheduler hasPendingActivityWithActivityIdentifier:]
  -[CKScheduler activityForActivityIdentifier:]
  -[CKScheduler currentPriorityForActivityIdentifier:]
  -[CKScheduler performAsyncOnQueue:]
  -[CKScheduler setXpcActivitiesByCKActivityIdentifier:]
  -[CKScheduler setHandlersByCKActivityIdentifier:]
  -[CKScheduler setFakeDeviceCount:]


CKDiscoverAllUserIdentitiesOperation : CKOperation
 @property  NSMutableDictionary *identityToContactIdentifiers
 @property  @? userIdentityDiscoveredBlock
 @property  @? discoverAllUserIdentitiesCompletionBlock

  // instance methods
  -[CKDiscoverAllUserIdentitiesOperation init]
  -[CKDiscoverAllUserIdentitiesOperation .cxx_destruct]
  -[CKDiscoverAllUserIdentitiesOperation CKOperationShouldRun:]
  -[CKDiscoverAllUserIdentitiesOperation _finishOnCallbackQueueWithError:]
  -[CKDiscoverAllUserIdentitiesOperation activityCreate]
  -[CKDiscoverAllUserIdentitiesOperation performCKOperation]
  -[CKDiscoverAllUserIdentitiesOperation _handleProgressCallback:]
  -[CKDiscoverAllUserIdentitiesOperation operationInfoClass]
  -[CKDiscoverAllUserIdentitiesOperation setUserIdentityDiscoveredBlock:]
  -[CKDiscoverAllUserIdentitiesOperation setDiscoverAllUserIdentitiesCompletionBlock:]
  -[CKDiscoverAllUserIdentitiesOperation discoverAllUserIdentitiesCompletionBlock]
  -[CKDiscoverAllUserIdentitiesOperation identityToContactIdentifiers]
  -[CKDiscoverAllUserIdentitiesOperation userIdentityDiscoveredBlock]
  -[CKDiscoverAllUserIdentitiesOperation setIdentityToContactIdentifiers:]


CKZonePCSDiagnosticInformation : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  BOOL wasRepaired
 @property  int pcsStatus
 @property  NSString *pcsDiagnosticString
 @property  NSError *pcsError

  // class methods
  +[CKZonePCSDiagnosticInformation supportsSecureCoding]

  // instance methods
  -[CKZonePCSDiagnosticInformation encodeWithCoder:]
  -[CKZonePCSDiagnosticInformation initWithCoder:]
  -[CKZonePCSDiagnosticInformation .cxx_destruct]
  -[CKZonePCSDiagnosticInformation pcsStatus]
  -[CKZonePCSDiagnosticInformation wasRepaired]
  -[CKZonePCSDiagnosticInformation pcsDiagnosticString]
  -[CKZonePCSDiagnosticInformation pcsError]
  -[CKZonePCSDiagnosticInformation setWasRepaired:]
  -[CKZonePCSDiagnosticInformation setPcsStatus:]
  -[CKZonePCSDiagnosticInformation setPcsDiagnosticString:]
  -[CKZonePCSDiagnosticInformation setPcsError:]


CKPCSDiagnosticInformation : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *identityInfo
 @property  NSString *serviceIdentityInfo
 @property  NSMutableDictionary *pcsInfoByZoneID
 @property  NSMutableArray *notFoundZoneIDs

  // class methods
  +[CKPCSDiagnosticInformation supportsSecureCoding]

  // instance methods
  -[CKPCSDiagnosticInformation init]
  -[CKPCSDiagnosticInformation encodeWithCoder:]
  -[CKPCSDiagnosticInformation initWithCoder:]
  -[CKPCSDiagnosticInformation .cxx_destruct]
  -[CKPCSDiagnosticInformation identityInfo]
  -[CKPCSDiagnosticInformation serviceIdentityInfo]
  -[CKPCSDiagnosticInformation pcsInfoByZoneID]
  -[CKPCSDiagnosticInformation notFoundZoneIDs]
  -[CKPCSDiagnosticInformation setIdentityInfo:]
  -[CKPCSDiagnosticInformation setServiceIdentityInfo:]
  -[CKPCSDiagnosticInformation setPcsInfoByZoneID:]
  -[CKPCSDiagnosticInformation setNotFoundZoneIDs:]


CKFetchShareMetadataOperation : CKOperation
 @property  NSMutableDictionary *errorsByURL
 @property  NSMutableSet *packagesToDestroy
 @property  NSDictionary *shareInvitationTokensByShareURL
 @property  NSArray *shareURLs
 @property  BOOL shouldFetchRootRecord
 @property  NSArray *rootRecordDesiredKeys
 @property  @? perShareMetadataBlock
 @property  @? fetchShareMetadataCompletionBlock

  // instance methods
  -[CKFetchShareMetadataOperation init]
  -[CKFetchShareMetadataOperation .cxx_destruct]
  -[CKFetchShareMetadataOperation fillOutOperationInfo:]
  -[CKFetchShareMetadataOperation fillFromOperationInfo:]
  -[CKFetchShareMetadataOperation hasCKOperationCallbacksSet]
  -[CKFetchShareMetadataOperation CKOperationShouldRun:]
  -[CKFetchShareMetadataOperation _finishOnCallbackQueueWithError:]
  -[CKFetchShareMetadataOperation activityCreate]
  -[CKFetchShareMetadataOperation performCKOperation]
  -[CKFetchShareMetadataOperation _handleProgressCallback:]
  -[CKFetchShareMetadataOperation initWithShareURLs:]
  -[CKFetchShareMetadataOperation setPerShareMetadataBlock:]
  -[CKFetchShareMetadataOperation setFetchShareMetadataCompletionBlock:]
  -[CKFetchShareMetadataOperation shareURLs]
  -[CKFetchShareMetadataOperation shouldFetchRootRecord]
  -[CKFetchShareMetadataOperation setShouldFetchRootRecord:]
  -[CKFetchShareMetadataOperation rootRecordDesiredKeys]
  -[CKFetchShareMetadataOperation setRootRecordDesiredKeys:]
  -[CKFetchShareMetadataOperation shareInvitationTokensByShareURL]
  -[CKFetchShareMetadataOperation setShareInvitationTokensByShareURL:]
  -[CKFetchShareMetadataOperation setShareURLs:]
  -[CKFetchShareMetadataOperation perShareMetadataBlock]
  -[CKFetchShareMetadataOperation fetchShareMetadataCompletionBlock]
  -[CKFetchShareMetadataOperation packagesToDestroy]
  -[CKFetchShareMetadataOperation claimPackagesInRecord:error:]
  -[CKFetchShareMetadataOperation errorsByURL]
  -[CKFetchShareMetadataOperation initWithShareURLs:invitationTokensByShareURL:]
  -[CKFetchShareMetadataOperation setErrorsByURL:]
  -[CKFetchShareMetadataOperation setPackagesToDestroy:]


CKFetchShareMetadataOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  NSArray *shareURLsToFetch
 @property  BOOL shouldFetchRootRecord
 @property  NSArray *rootRecordDesiredKeys
 @property  NSDictionary *shareInvitationTokensByShareURL

  // class methods
  +[CKFetchShareMetadataOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchShareMetadataOperationInfo encodeWithCoder:]
  -[CKFetchShareMetadataOperationInfo initWithCoder:]
  -[CKFetchShareMetadataOperationInfo .cxx_destruct]
  -[CKFetchShareMetadataOperationInfo setShareURLsToFetch:]
  -[CKFetchShareMetadataOperationInfo shouldFetchRootRecord]
  -[CKFetchShareMetadataOperationInfo setShouldFetchRootRecord:]
  -[CKFetchShareMetadataOperationInfo rootRecordDesiredKeys]
  -[CKFetchShareMetadataOperationInfo setRootRecordDesiredKeys:]
  -[CKFetchShareMetadataOperationInfo shareInvitationTokensByShareURL]
  -[CKFetchShareMetadataOperationInfo setShareInvitationTokensByShareURL:]
  -[CKFetchShareMetadataOperationInfo shareURLsToFetch]


CKSyncingClientInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *displayName
 @property  NSString *bundleIdentifier

  // class methods
  +[CKSyncingClientInfo supportsSecureCoding]

  // instance methods
  -[CKSyncingClientInfo encodeWithCoder:]
  -[CKSyncingClientInfo initWithCoder:]
  -[CKSyncingClientInfo .cxx_destruct]
  -[CKSyncingClientInfo bundleIdentifier]
  -[CKSyncingClientInfo displayName]
  -[CKSyncingClientInfo setBundleIdentifier:]
  -[CKSyncingClientInfo setDisplayName:]


CKSyncRequestOperation : CKOperation
 @property  @? willBeginSyncRequestWithClientsBlock
 @property  @? clientSyncStartedBlock
 @property  @? clientSyncProgressedBlock
 @property  @? clientSyncCompletedBlock
 @property  @? syncRequestCompletionBlock

  // instance methods
  -[CKSyncRequestOperation .cxx_destruct]
  -[CKSyncRequestOperation _finishOnCallbackQueueWithError:]
  -[CKSyncRequestOperation activityCreate]
  -[CKSyncRequestOperation performCKOperation]
  -[CKSyncRequestOperation _handleProgressCallback:]
  -[CKSyncRequestOperation operationInfoClass]
  -[CKSyncRequestOperation willBeginSyncRequestWithClientsBlock]
  -[CKSyncRequestOperation clientSyncStartedBlock]
  -[CKSyncRequestOperation clientSyncProgressedBlock]
  -[CKSyncRequestOperation clientSyncCompletedBlock]
  -[CKSyncRequestOperation syncRequestCompletionBlock]
  -[CKSyncRequestOperation setSyncRequestCompletionBlock:]
  -[CKSyncRequestOperation setClientSyncStartedBlock:]
  -[CKSyncRequestOperation setClientSyncProgressedBlock:]
  -[CKSyncRequestOperation setClientSyncCompletedBlock:]
  -[CKSyncRequestOperation setWillBeginSyncRequestWithClientsBlock:]


CKModifyWebSharingOperation : CKDatabaseOperation
 @property  NSArray *recordIDsToShare
 @property  NSArray *recordIDsToUnshare
 @property  NSMutableDictionary *recordErrors
 @property  NSMutableArray *sharedRecordIDs
 @property  NSMutableArray *unsharedRecordIDs
 @property  NSArray *recordIDsToShareReadWrite
 @property  @? recordSharedBlock
 @property  @? recordUnsharedBlock
 @property  @? webShareRecordsCompletionBlock

  // instance methods
  -[CKModifyWebSharingOperation .cxx_destruct]
  -[CKModifyWebSharingOperation fillOutOperationInfo:]
  -[CKModifyWebSharingOperation fillFromOperationInfo:]
  -[CKModifyWebSharingOperation hasCKOperationCallbacksSet]
  -[CKModifyWebSharingOperation CKOperationShouldRun:]
  -[CKModifyWebSharingOperation _finishOnCallbackQueueWithError:]
  -[CKModifyWebSharingOperation activityCreate]
  -[CKModifyWebSharingOperation performCKOperation]
  -[CKModifyWebSharingOperation _handleProgressCallback:]
  -[CKModifyWebSharingOperation recordIDsToShare]
  -[CKModifyWebSharingOperation setRecordIDsToShare:]
  -[CKModifyWebSharingOperation recordIDsToUnshare]
  -[CKModifyWebSharingOperation setRecordIDsToUnshare:]
  -[CKModifyWebSharingOperation recordIDsToShareReadWrite]
  -[CKModifyWebSharingOperation setRecordIDsToShareReadWrite:]
  -[CKModifyWebSharingOperation recordSharedBlock]
  -[CKModifyWebSharingOperation recordUnsharedBlock]
  -[CKModifyWebSharingOperation webShareRecordsCompletionBlock]
  -[CKModifyWebSharingOperation recordErrors]
  -[CKModifyWebSharingOperation sharedRecordIDs]
  -[CKModifyWebSharingOperation unsharedRecordIDs]
  -[CKModifyWebSharingOperation setWebShareRecordsCompletionBlock:]
  -[CKModifyWebSharingOperation setRecordSharedBlock:]
  -[CKModifyWebSharingOperation setRecordUnsharedBlock:]
  -[CKModifyWebSharingOperation initWithRecordIDsToWebShare:recordIDsToUnshare:]
  -[CKModifyWebSharingOperation setRecordErrors:]
  -[CKModifyWebSharingOperation setSharedRecordIDs:]
  -[CKModifyWebSharingOperation setUnsharedRecordIDs:]


CKModifyWebSharingOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDsToShare
 @property  NSArray *recordIDsToUnshare
 @property  NSArray *recordIDsToShareReadWrite

  // class methods
  +[CKModifyWebSharingOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifyWebSharingOperationInfo encodeWithCoder:]
  -[CKModifyWebSharingOperationInfo initWithCoder:]
  -[CKModifyWebSharingOperationInfo .cxx_destruct]
  -[CKModifyWebSharingOperationInfo recordIDsToShare]
  -[CKModifyWebSharingOperationInfo setRecordIDsToShare:]
  -[CKModifyWebSharingOperationInfo recordIDsToUnshare]
  -[CKModifyWebSharingOperationInfo setRecordIDsToUnshare:]
  -[CKModifyWebSharingOperationInfo recordIDsToShareReadWrite]
  -[CKModifyWebSharingOperationInfo setRecordIDsToShareReadWrite:]


CKContainerID : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  NSString *containerIdentifier
 @property  long long environment

  // class methods
  +[CKContainerID supportsSecureCoding]

  // instance methods
  -[CKContainerID isEqual:]
  -[CKContainerID copyWithZone:]
  -[CKContainerID encodeWithCoder:]
  -[CKContainerID initWithCoder:]
  -[CKContainerID .cxx_destruct]
  -[CKContainerID dictionaryRepresentation]
  -[CKContainerID environment]
  -[CKContainerID containerIdentifier]
  -[CKContainerID initWithContainerIdentifier:environment:]
  -[CKContainerID initWithDictionaryRepresentation:]
  -[CKContainerID CKPropertiesDescription]


CKLegacyPredicateValidator : CKPredicateValidator
  // instance methods
  -[CKLegacyPredicateValidator validate:]
  -[CKLegacyPredicateValidator validate:error:]
  -[CKLegacyPredicateValidator validateCompoundPredicate:]
  -[CKLegacyPredicateValidator validateComparisonPredicate:]
  -[CKLegacyPredicateValidator validateFullTextSearchPredicate:]
  -[CKLegacyPredicateValidator validateNearPredicate:]
  -[CKLegacyPredicateValidator validateContainsPredicate:]
  -[CKLegacyPredicateValidator validateInPredicate:]
  -[CKLegacyPredicateValidator validateContainsAnyPredicate:]
  -[CKLegacyPredicateValidator validateContainsAllInPredicate:]
  -[CKLegacyPredicateValidator validateBeginsWithPredicate:]
  -[CKLegacyPredicateValidator validateBetweenPredicate:]
  -[CKLegacyPredicateValidator validateBasicOperatorPredicate:]
  -[CKLegacyPredicateValidator _comparisonOptionForString:]


CKSQLite : NSObject /usr/lib/libSystem.B.dylib
 @property  ^{sqlite3=} db
 @property  unsigned long openCount
 @property  BOOL corrupt
 @property  NSMutableDictionary *statementsBySQL
 @property  NSDateFormatter *dateFormatter
 @property  NSString *path
 @property  NSString *schema
 @property  NSString *schemaVersion
 @property  NSString *objectClassPrefix
 @property  int userVersion
 @property  long long synchronousMode
 @property  BOOL isOpen
 @property  BOOL hasMigrated
 @property  BOOL shouldVacuum
 @property  BOOL traced
 @property  <CKSQLiteDelegate> *delegate

  // instance methods
  -[CKSQLite dealloc]
  -[CKSQLite open]
  -[CKSQLite close]
  -[CKSQLite delegate]
  -[CKSQLite setDelegate:]
  -[CKSQLite propertyForKey:]
  -[CKSQLite setProperty:forKey:]
  -[CKSQLite .cxx_destruct]
  -[CKSQLite path]
  -[CKSQLite remove]
  -[CKSQLite changes]
  -[CKSQLite schema]
  -[CKSQLite end]
  -[CKSQLite initWithPath:schema:]
  -[CKSQLite userVersion]
  -[CKSQLite _synchronousModeString]
  -[CKSQLite _createSchemaHash]
  -[CKSQLite isOpen]
  -[CKSQLite openWithError:]
  -[CKSQLite begin]
  -[CKSQLite rollback]
  -[CKSQLite analyze]
  -[CKSQLite vacuum]
  -[CKSQLite lastInsertRowID]
  -[CKSQLite executeSQL:]
  -[CKSQLite executeSQL:arguments:]
  -[CKSQLite statementForSQL:]
  -[CKSQLite removeAllStatements]
  -[CKSQLite allTableNames]
  -[CKSQLite dropAllTables]
  -[CKSQLite dateFormatter]
  -[CKSQLite datePropertyForKey:]
  -[CKSQLite setDateProperty:forKey:]
  -[CKSQLite removePropertyForKey:]
  -[CKSQLite creationDate]
  -[CKSQLite columnNamesForTable:]
  -[CKSQLite select:from:]
  -[CKSQLite select:from:where:bindings:]
  -[CKSQLite select:from:where:bindings:orderBy:limit:block:]
  -[CKSQLite selectFrom:where:bindings:orderBy:limit:block:]
  -[CKSQLite selectFrom:where:bindings:limit:]
  -[CKSQLite update:set:where:bindings:limit:]
  -[CKSQLite selectAllFrom:where:bindings:]
  -[CKSQLite selectCountFrom:where:bindings:]
  -[CKSQLite insertOrReplaceInto:values:]
  -[CKSQLite deleteFrom:matchingValues:]
  -[CKSQLite deleteFrom:where:bindings:]
  -[CKSQLite _tableNameForClass:]
  -[CKSQLite dbUserVersion]
  -[CKSQLite schemaVersion]
  -[CKSQLite objectClassPrefix]
  -[CKSQLite setObjectClassPrefix:]
  -[CKSQLite setUserVersion:]
  -[CKSQLite synchronousMode]
  -[CKSQLite setSynchronousMode:]
  -[CKSQLite hasMigrated]
  -[CKSQLite traced]
  -[CKSQLite setTraced:]
  -[CKSQLite db]
  -[CKSQLite setDb:]
  -[CKSQLite openCount]
  -[CKSQLite setOpenCount:]
  -[CKSQLite corrupt]
  -[CKSQLite setCorrupt:]
  -[CKSQLite statementsBySQL]
  -[CKSQLite setDateFormatter:]
  -[CKSQLite shouldVacuum]
  -[CKSQLite _periodicVacuum]
  -[CKSQLite raise:]
  -[CKSQLite select:from:where:bindings:orderBy:]
  -[CKSQLite selectAllObjectsOfClass:where:bindings:]
  -[CKSQLite _boxedPropertyDictionary:forObjCClass:]
  -[CKSQLite selectAllObjectsOfClass:where:bindings:limit:]
  -[CKSQLite _boxedValue:forObjcCProperty:]
  -[CKSQLite upsertInto:values:onConflict:doUpdate:where:]
  -[CKSQLite insertOrReplaceObject:]
  -[CKSQLite deleteExactObject:]
  -[CKSQLite deleteAllObjectsOfClass:where:bindings:]
  -[CKSQLite selectAllObjectsOfClass:]
  -[CKSQLite selectAllObjectsOfClass:where:bindings:orderBy:limit:block:]
  -[CKSQLite selectObjectOfClass:where:bindings:]
  -[CKSQLite updateAllObjectsOfClass:set:where:bindings:]
  -[CKSQLite setShouldVacuum:]


CKSQLiteError : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[CKSQLiteError raise:code:extended:]
  +[CKSQLiteError IOERR_READ:]
  +[CKSQLiteError IOERR_SHORT_READ:]
  +[CKSQLiteError IOERR_WRITE:]
  +[CKSQLiteError IOERR_FSYNC:]
  +[CKSQLiteError IOERR_DIR_FSYNC:]
  +[CKSQLiteError IOERR_TRUNCATE:]
  +[CKSQLiteError IOERR_FSTAT:]
  +[CKSQLiteError IOERR_UNLOCK:]
  +[CKSQLiteError IOERR_RDLOCK:]
  +[CKSQLiteError IOERR_DELETE:]
  +[CKSQLiteError IOERR_BLOCKED:]
  +[CKSQLiteError IOERR_NOMEM:]
  +[CKSQLiteError IOERR_ACCESS:]
  +[CKSQLiteError IOERR_CHECKRESERVEDLOCK:]
  +[CKSQLiteError IOERR_LOCK:]
  +[CKSQLiteError IOERR_CLOSE:]
  +[CKSQLiteError IOERR_DIR_CLOSE:]
  +[CKSQLiteError IOERR_SHMOPEN:]
  +[CKSQLiteError IOERR_SHMSIZE:]
  +[CKSQLiteError IOERR_SHMLOCK:]
  +[CKSQLiteError IOERR_SHMMAP:]
  +[CKSQLiteError IOERR_SEEK:]
  +[CKSQLiteError IOERR_DELETE_NOENT:]
  +[CKSQLiteError IOERR_MMAP:]
  +[CKSQLiteError IOERR_GETTEMPPATH:]
  +[CKSQLiteError IOERR_CONVPATH:]
  +[CKSQLiteError LOCKED_SHAREDCACHE:]
  +[CKSQLiteError BUSY_RECOVERY:]
  +[CKSQLiteError BUSY_SNAPSHOT:]
  +[CKSQLiteError CANTOPEN_NOTEMPDIR:]
  +[CKSQLiteError CANTOPEN_ISDIR:]
  +[CKSQLiteError CANTOPEN_FULLPATH:]
  +[CKSQLiteError CANTOPEN_CONVPATH:]
  +[CKSQLiteError CORRUPT_VTAB:]
  +[CKSQLiteError READONLY_RECOVERY:]
  +[CKSQLiteError READONLY_CANTLOCK:]
  +[CKSQLiteError READONLY_ROLLBACK:]
  +[CKSQLiteError READONLY_DBMOVED:]
  +[CKSQLiteError ABORT_ROLLBACK:]
  +[CKSQLiteError CONSTRAINT_CHECK:]
  +[CKSQLiteError CONSTRAINT_COMMITHOOK:]
  +[CKSQLiteError CONSTRAINT_FOREIGNKEY:]
  +[CKSQLiteError CONSTRAINT_FUNCTION:]
  +[CKSQLiteError CONSTRAINT_NOTNULL:]
  +[CKSQLiteError CONSTRAINT_PRIMARYKEY:]
  +[CKSQLiteError CONSTRAINT_TRIGGER:]
  +[CKSQLiteError CONSTRAINT_UNIQUE:]
  +[CKSQLiteError CONSTRAINT_VTAB:]
  +[CKSQLiteError CONSTRAINT_ROWID:]
  +[CKSQLiteError NOTICE_RECOVER_WAL:]
  +[CKSQLiteError NOTICE_RECOVER_ROLLBACK:]
  +[CKSQLiteError ERROR:]
  +[CKSQLiteError INTERNAL:]
  +[CKSQLiteError PERM:]
  +[CKSQLiteError ABORT:]
  +[CKSQLiteError BUSY:]
  +[CKSQLiteError LOCKED:]
  +[CKSQLiteError NOMEM:]
  +[CKSQLiteError READONLY:]
  +[CKSQLiteError INTERRUPT:]
  +[CKSQLiteError IOERR:]
  +[CKSQLiteError CORRUPT:]
  +[CKSQLiteError NOTFOUND:]
  +[CKSQLiteError FULL:]
  +[CKSQLiteError CANTOPEN:]
  +[CKSQLiteError PROTOCOL:]
  +[CKSQLiteError SCHEMA:]
  +[CKSQLiteError TOOBIG:]
  +[CKSQLiteError CONSTRAINT:]
  +[CKSQLiteError MISMATCH:]
  +[CKSQLiteError MISUSE:]
  +[CKSQLiteError RANGE:]
  +[CKSQLiteError NOTADB:]


CKAccountOverrideInfo : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSString *accountID
 @property  NSString *email
 @property  NSString *password
 @property  NSString *secondEmail
 @property  BOOL isUnitTestingAccount
 @property  BOOL accountWantsPushRegistration
 @property  BOOL accountWantsFlowControl
 @property  NSDictionary *accountPropertyOverrides
 @property  NSDictionary *overridesByDataclass

  // class methods
  +[CKAccountOverrideInfo supportsSecureCoding]

  // instance methods
  -[CKAccountOverrideInfo isEqual:]
  -[CKAccountOverrideInfo copyWithZone:]
  -[CKAccountOverrideInfo encodeWithCoder:]
  -[CKAccountOverrideInfo initWithCoder:]
  -[CKAccountOverrideInfo password]
  -[CKAccountOverrideInfo .cxx_destruct]
  -[CKAccountOverrideInfo email]
  -[CKAccountOverrideInfo accountID]
  -[CKAccountOverrideInfo initWithAccountID:]
  -[CKAccountOverrideInfo CKPropertiesDescription]
  -[CKAccountOverrideInfo isUnitTestingAccount]
  -[CKAccountOverrideInfo initWithEmail:password:]
  -[CKAccountOverrideInfo secondEmail]
  -[CKAccountOverrideInfo accountWantsPushRegistration]
  -[CKAccountOverrideInfo accountWantsFlowControl]
  -[CKAccountOverrideInfo accountPropertyOverrides]
  -[CKAccountOverrideInfo overridesByDataclass]
  -[CKAccountOverrideInfo setAccountID:]
  -[CKAccountOverrideInfo setIsUnitTestingAccount:]
  -[CKAccountOverrideInfo setAccountWantsPushRegistration:]
  -[CKAccountOverrideInfo setSecondEmail:]
  -[CKAccountOverrideInfo setAccountWantsFlowControl:]
  -[CKAccountOverrideInfo setAccountPropertyOverrides:]
  -[CKAccountOverrideInfo setOverridesByDataclass:]
  -[CKAccountOverrideInfo initAnonymousAccount]


CKUserIdentity : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKUserIdentityLookupInfo *lookupInfo
 @property  NSPersonNameComponents *nameComponents
 @property  CKRecordID *userRecordID
 @property  NSArray *contactIdentifiers
 @property  BOOL hasiCloudAccount
 @property  BOOL isCached
 @property  NSData *publicSharingKey
 @property  unsigned long publicKeyVersion
 @property  NSData *outOfNetworkPrivateKey
 @property  NSData *encryptedPersonalInfo
 @property  NSString *firstName
 @property  NSString *lastName

  // class methods
  +[CKUserIdentity supportsSecureCoding]

  // instance methods
  -[CKUserIdentity isEqual:]
  -[CKUserIdentity copyWithZone:]
  -[CKUserIdentity encodeWithCoder:]
  -[CKUserIdentity initWithCoder:]
  -[CKUserIdentity .cxx_destruct]
  -[CKUserIdentity _init]
  -[CKUserIdentity ckShortDescription]
  -[CKUserIdentity CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKUserIdentity nameComponents]
  -[CKUserIdentity userRecordID]
  -[CKUserIdentity initWithUserRecordID:]
  -[CKUserIdentity contactIdentifiers]
  -[CKUserIdentity setContactIdentifiers:]
  -[CKUserIdentity setUserRecordID:]
  -[CKUserIdentity hasiCloudAccount]
  -[CKUserIdentity publicSharingKey]
  -[CKUserIdentity outOfNetworkPrivateKey]
  -[CKUserIdentity lookupInfo]
  -[CKUserIdentity setLookupInfo:]
  -[CKUserIdentity setNameComponents:]
  -[CKUserIdentity setHasiCloudAccount:]
  -[CKUserIdentity setPublicSharingKey:]
  -[CKUserIdentity setOutOfNetworkPrivateKey:]
  -[CKUserIdentity encryptedPersonalInfo]
  -[CKUserIdentity setEncryptedPersonalInfo:]
  -[CKUserIdentity publicKeyVersion]
  -[CKUserIdentity setPublicKeyVersion:]
  -[CKUserIdentity isEquivalentToUserIdentity:]
  -[CKUserIdentity isCached]
  -[CKUserIdentity setIsCached:]
  -[CKUserIdentity isOutOfNetwork]
  -[CKUserIdentity isEquivalentToUserIdentityOrPublicKey:]
  -[CKUserIdentity firstName]
  -[CKUserIdentity lastName]


CKSyncEngine : NSObject /usr/lib/libSystem.B.dylib
 @property  CKDatabase *database
 @property  CKSyncEngineMetadata *metadata
 @property  unsigned long lastNotifiedMetadataChangeCount
 @property  CKNotificationListener *notificationListener
 @property  NSOperationQueue *operationQueue
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *batchCreationQueue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  unsigned long maxRecordCountPerBatch
 @property  unsigned long maxRecordBytesPerBatch
 @property  unsigned long maxZoneCountPerBatch
 @property  BOOL waitingForIdentityUpdate
 @property  BOOL waitingForHSA2
 @property  long long lastKnownAccountStatus
 @property  BOOL useUniqueActivityIdentifiers
 @property  BOOL ignoringSystemConditions
 @property  long long priorityForFetches
 @property  long long priorityForModifications
 @property  BOOL skipRetryOnOperationError
 @property  BOOL automaticSyncingDisabled
 @property  <CKSyncEngineDataSource> *dataSource

  // class methods
  +[CKSyncEngine supportedDatabaseScopes]
  +[CKSyncEngine activityIdentifierWithName:database:ignoringSystemConditions:uniquenessPointer:]
  +[CKSyncEngine earliestStartDateAfterError:]
  +[CKSyncEngine fetchChangesActivityIdentifierInDatabase:ignoringSystemConditions:]
  +[CKSyncEngine modifyPendingChangesActivityIdentifierInDatabase:ignoringSystemConditions:]
  +[CKSyncEngine saveSubscriptionActivityIdentifierInDatabase:ignoringSystemConditions:]
  +[CKSyncEngine unregisterActivitiesWithDatabase:ignoringSystemConditions:]
  +[CKSyncEngine shouldDeferAfterError:]

  // instance methods
  -[CKSyncEngine init]
  -[CKSyncEngine dealloc]
  -[CKSyncEngine setQueue:]
  -[CKSyncEngine queue]
  -[CKSyncEngine .cxx_destruct]
  -[CKSyncEngine operationQueue]
  -[CKSyncEngine setOperationQueue:]
  -[CKSyncEngine setDatabase:]
  -[CKSyncEngine callbackQueue]
  -[CKSyncEngine database]
  -[CKSyncEngine setMetadata:]
  -[CKSyncEngine metadata]
  -[CKSyncEngine setCallbackQueue:]
  -[CKSyncEngine dataSource]
  -[CKSyncEngine databaseSubscription]
  -[CKSyncEngine notificationListener]
  -[CKSyncEngine setNotificationListener:]
  -[CKSyncEngine initWithDatabase:dataSource:metadata:machServiceName:]
  -[CKSyncEngine initWithDatabase:dataSource:metadata:machServiceName:priorityForFetches:priorityForModifications:]
  -[CKSyncEngine commonInitWithDatabase:dataSource:metadata:machServiceName:useUniqueActivityIdentifiers:disableAutomaticSyncing:priorityForFetches:priorityForModifications:]
  -[CKSyncEngine initWithDatabase:dataSource:metadata:machServiceName:ignoringSystemConditions:useUniqueActivityIdentifiers:disableAutomaticSyncing:]
  -[CKSyncEngine registerSchedulerActivities]
  -[CKSyncEngine registerForSubscriptions]
  -[CKSyncEngine accountChangedNotification:]
  -[CKSyncEngine scheduleInitialWorkIfNecessary]
  -[CKSyncEngine ignoringSystemConditions]
  -[CKSyncEngine useUniqueActivityIdentifiers]
  -[CKSyncEngine activityIdentifierWithName:]
  -[CKSyncEngine lastNotifiedMetadataChangeCount]
  -[CKSyncEngine setLastNotifiedMetadataChangeCount:]
  -[CKSyncEngine scheduleModifyPendingChangesIfNecessaryWithEarliestStartDate:]
  -[CKSyncEngine notifyDataSourceForUnserializedMetadataIfNecessary]
  -[CKSyncEngine defaultOperationConfiguration]
  -[CKSyncEngine _modifyPendingChangesWithOperationGroup:completionHandler:]
  -[CKSyncEngine __modifyPendingChangesWithOperationGroup:completionHandler:]
  -[CKSyncEngine ensureAccountAvailableWithCompletionHandler:]
  -[CKSyncEngine addOperationsToModifyZonesIfNecessaryInOperationGroup:]
  -[CKSyncEngine existingOperationsToModifyZones]
  -[CKSyncEngine existingOperationToModifyRecordBatchesIncludingExecutingOperations:]
  -[CKSyncEngine newOperationToModifyRecordBatchesWithOperationGroup:]
  -[CKSyncEngine existingOperationToFetchChangesIncludingExecutingOperations:]
  -[CKSyncEngine nextBatchOfRecordsToModify]
  -[CKSyncEngine modifyRecordBatchesOperation:perRecordProgressForRecord:progress:]
  -[CKSyncEngine modifyRecordBatchesOperation:perRecordSaveCompletionForRecord:inBatch:error:]
  -[CKSyncEngine modifyRecordBatchesOperation:completedBatch:withSavedRecords:deletedRecordIDs:error:]
  -[CKSyncEngine modifyRecordBatchesOperation:completedWithError:]
  -[CKSyncEngine shouldRetryAfterError:]
  -[CKSyncEngine modifyRecordBatchesOperation:perDeleteRecordIDCompletion:inBatch:error:]
  -[CKSyncEngine updateReadinessStateFromError:]
  -[CKSyncEngine _hasPendingModifications]
  -[CKSyncEngine maxZoneCountPerBatch]
  -[CKSyncEngine newOperationToModifyZonesToSave:zoneIDsToDelete:inOperationGroup:]
  -[CKSyncEngine batchCreationQueue]
  -[CKSyncEngine nextBatchOfRecordsToModifyWithCustomBatching]
  -[CKSyncEngine nextBatchOfRecordsToModifyDefaultBehavior]
  -[CKSyncEngine maxRecordBytesPerBatch]
  -[CKSyncEngine maxRecordCountPerBatch]
  -[CKSyncEngine _fetchChangesWithOperationGroup:completionHandler:]
  -[CKSyncEngine __fetchChangesWithOperationGroup:completionHandler:]
  -[CKSyncEngine newOperationToFetchChangesWithOperationGroup:]
  -[CKSyncEngine fetchChangesOperation:recordZoneWithIDChanged:]
  -[CKSyncEngine fetchChangesOperation:recordZoneWithIDWasPurged:]
  -[CKSyncEngine fetchChangesOperation:recordZoneWithIDWasDeleted:]
  -[CKSyncEngine fetchChangesOperation:databaseChangeTokenUpdated:]
  -[CKSyncEngine fetchChangesOperation:completedFetchingDatabaseChangesWithError:]
  -[CKSyncEngine shouldFetchChangesForZoneID:]
  -[CKSyncEngine fetchChangesOperation:recordChanged:]
  -[CKSyncEngine fetchChangesOperation:recordWithIDWasDeleted:recordType:]
  -[CKSyncEngine fetchChangesOperation:updatedServerChangeToken:clientChangeToken:forRecordZoneID:]
  -[CKSyncEngine fetchChangesOperation:completedFetchingChangesForRecordZoneID:serverChangeToken:clientChangeToken:error:]
  -[CKSyncEngine fetchChangesOperation:completedWithError:]
  -[CKSyncEngine scheduleFetchChangesIfNecessaryWithEarliestStartDate:]
  -[CKSyncEngine didReceiveDatabaseNotification:]
  -[CKSyncEngine saveSubscriptionIfNecessaryWithOperationGroup:completionHandler:]
  -[CKSyncEngine _saveSubscriptionIfNecessaryWithOperationGroup:completionHandler:]
  -[CKSyncEngine scheduleSaveSubscriptionIfNecessaryWithEarliestStartDate:]
  -[CKSyncEngine fetchChangesActivityIdentifier]
  -[CKSyncEngine performFetchChangesActivity:completionHandler:]
  -[CKSyncEngine modifyPendingChangesActivityIdentifier]
  -[CKSyncEngine performModifyPendingChangesActivity:completionHandler:]
  -[CKSyncEngine saveSubscriptionActivityIdentifier]
  -[CKSyncEngine performSaveSubscriptionActivity:completionHandler:]
  -[CKSyncEngine isAutomaticSyncingDisabled]
  -[CKSyncEngine isWaitingForIdentityUpdate]
  -[CKSyncEngine isWaitingForHSA2]
  -[CKSyncEngine lastKnownAccountStatus]
  -[CKSyncEngine isReadyToSubmitSchedulerActivity]
  -[CKSyncEngine priorityForModifications]
  -[CKSyncEngine submitActivityIfNecessaryWithIdentifier:earliestStartDate:priority:]
  -[CKSyncEngine priorityForFetches]
  -[CKSyncEngine updateAccountInfoAndScheduleWorkIfNecessaryWithCompletionHandler:]
  -[CKSyncEngine skipRetryOnOperationError]
  -[CKSyncEngine setLastKnownAccountStatus:]
  -[CKSyncEngine startWaitingForIdentityUpdateIfNecessary]
  -[CKSyncEngine startWaitingForHSA2IfNecessary]
  -[CKSyncEngine setWaitingForIdentityUpdate:]
  -[CKSyncEngine identityUpdateNotification:]
  -[CKSyncEngine setWaitingForHSA2:]
  -[CKSyncEngine updateAccountInfoWithCompletionHandler:]
  -[CKSyncEngine initWithDatabase:dataSource:metadata:]
  -[CKSyncEngine initWithDatabase:dataSource:metadata:useUniqueActivityIdentifiers:disableAutomaticSyncing:]
  -[CKSyncEngine setAutomaticSyncingDisabled:]
  -[CKSyncEngine addRecordIDsToSave:recordIDsToDelete:]
  -[CKSyncEngine addRecordZonesToSave:recordZoneIDsToDelete:]
  -[CKSyncEngine modifyPendingChangesWithCompletionHandler:]
  -[CKSyncEngine numberOfModifyPendingRecordsOperations]
  -[CKSyncEngine hasPendingModifications]
  -[CKSyncEngine fetchChangesWithCompletionHandler:]
  -[CKSyncEngine saveSubscriptionIfNecessaryWithCompletionHandler:]
  -[CKSyncEngine unregisterActivities]
  -[CKSyncEngine hasSchedulerActivityWithIdentifier:]
  -[CKSyncEngine setBatchCreationQueue:]
  -[CKSyncEngine setMaxRecordCountPerBatch:]
  -[CKSyncEngine setMaxRecordBytesPerBatch:]
  -[CKSyncEngine setMaxZoneCountPerBatch:]
  -[CKSyncEngine setUseUniqueActivityIdentifiers:]
  -[CKSyncEngine setPriorityForFetches:]
  -[CKSyncEngine setPriorityForModifications:]
  -[CKSyncEngine setSkipRetryOnOperationError:]


CKFetchDatabaseChangesOperation : CKDatabaseOperation
 @property  CKServerChangeToken *serverChangeToken
 @property  long long status
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  BOOL fetchAllChanges
 @property  @? recordZoneWithIDChangedBlock
 @property  @? recordZoneWithIDWasDeletedBlock
 @property  @? recordZoneWithIDWasPurgedBlock
 @property  @? changeTokenUpdatedBlock
 @property  @? fetchDatabaseChangesCompletionBlock

  // instance methods
  -[CKFetchDatabaseChangesOperation init]
  -[CKFetchDatabaseChangesOperation .cxx_destruct]
  -[CKFetchDatabaseChangesOperation status]
  -[CKFetchDatabaseChangesOperation setPreviousServerChangeToken:]
  -[CKFetchDatabaseChangesOperation setFetchAllChanges:]
  -[CKFetchDatabaseChangesOperation initWithPreviousServerChangeToken:]
  -[CKFetchDatabaseChangesOperation setRecordZoneWithIDChangedBlock:]
  -[CKFetchDatabaseChangesOperation setRecordZoneWithIDWasDeletedBlock:]
  -[CKFetchDatabaseChangesOperation setChangeTokenUpdatedBlock:]
  -[CKFetchDatabaseChangesOperation setFetchDatabaseChangesCompletionBlock:]
  -[CKFetchDatabaseChangesOperation setResultsLimit:]
  -[CKFetchDatabaseChangesOperation setStatus:]
  -[CKFetchDatabaseChangesOperation setRecordZoneWithIDWasPurgedBlock:]
  -[CKFetchDatabaseChangesOperation fillOutOperationInfo:]
  -[CKFetchDatabaseChangesOperation fillFromOperationInfo:]
  -[CKFetchDatabaseChangesOperation hasCKOperationCallbacksSet]
  -[CKFetchDatabaseChangesOperation _finishOnCallbackQueueWithError:]
  -[CKFetchDatabaseChangesOperation activityCreate]
  -[CKFetchDatabaseChangesOperation performCKOperation]
  -[CKFetchDatabaseChangesOperation _handleProgressCallback:]
  -[CKFetchDatabaseChangesOperation previousServerChangeToken]
  -[CKFetchDatabaseChangesOperation resultsLimit]
  -[CKFetchDatabaseChangesOperation fetchAllChanges]
  -[CKFetchDatabaseChangesOperation recordZoneWithIDChangedBlock]
  -[CKFetchDatabaseChangesOperation recordZoneWithIDWasDeletedBlock]
  -[CKFetchDatabaseChangesOperation fetchDatabaseChangesCompletionBlock]
  -[CKFetchDatabaseChangesOperation changeTokenUpdatedBlock]
  -[CKFetchDatabaseChangesOperation recordZoneWithIDWasPurgedBlock]
  -[CKFetchDatabaseChangesOperation serverChangeToken]
  -[CKFetchDatabaseChangesOperation setServerChangeToken:]
  -[CKFetchDatabaseChangesOperation _handleCompletionCallback:]


CKFetchDatabaseChangesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  BOOL fetchAllChanges

  // class methods
  +[CKFetchDatabaseChangesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchDatabaseChangesOperationInfo encodeWithCoder:]
  -[CKFetchDatabaseChangesOperationInfo initWithCoder:]
  -[CKFetchDatabaseChangesOperationInfo .cxx_destruct]
  -[CKFetchDatabaseChangesOperationInfo setPreviousServerChangeToken:]
  -[CKFetchDatabaseChangesOperationInfo setFetchAllChanges:]
  -[CKFetchDatabaseChangesOperationInfo setResultsLimit:]
  -[CKFetchDatabaseChangesOperationInfo previousServerChangeToken]
  -[CKFetchDatabaseChangesOperationInfo resultsLimit]
  -[CKFetchDatabaseChangesOperationInfo fetchAllChanges]


CKFetchDatabaseChangesOperationResult : CKOperationResult <NSSecureCoding>
 @property  CKServerChangeToken *serverChangeToken
 @property  NSNumber *status

  // class methods
  +[CKFetchDatabaseChangesOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchDatabaseChangesOperationResult encodeWithCoder:]
  -[CKFetchDatabaseChangesOperationResult initWithCoder:]
  -[CKFetchDatabaseChangesOperationResult .cxx_destruct]
  -[CKFetchDatabaseChangesOperationResult status]
  -[CKFetchDatabaseChangesOperationResult setStatus:]
  -[CKFetchDatabaseChangesOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchDatabaseChangesOperationResult serverChangeToken]
  -[CKFetchDatabaseChangesOperationResult setServerChangeToken:]


CKOperationFlowControlInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  NSError *lastError
 @property  NSDate *flowControlEndDate

  // class methods
  +[CKOperationFlowControlInfo flowControlInfoWithEndDate:error:]

  // instance methods
  -[CKOperationFlowControlInfo .cxx_destruct]
  -[CKOperationFlowControlInfo setFlowControlEndDate:]
  -[CKOperationFlowControlInfo setLastError:]
  -[CKOperationFlowControlInfo lastError]
  -[CKOperationFlowControlInfo flowControlEndDate]


CKOperationFlowControlManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *flowControlledOperationKeys

  // instance methods
  -[CKOperationFlowControlManager init]
  -[CKOperationFlowControlManager .cxx_destruct]
  -[CKOperationFlowControlManager CKStatusReportArray]
  -[CKOperationFlowControlManager unlimitAllOperations]
  -[CKOperationFlowControlManager flowControlledOperationKeys]
  -[CKOperationFlowControlManager isOperationLimited:outLimitError:]
  -[CKOperationFlowControlManager secondsUntilUnlimited:]
  -[CKOperationFlowControlManager limitOperation:retryAfter:error:]


CKPackageDB : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[CKPackageDB copySQLiteFileAtPath:toPath:timeout:error:]
  +[CKPackageDB moveSQLiteFileAtPath:toPath:timeout:error:]


CKPackageSection : NSObject /usr/lib/libSystem.B.dylib
 @property  long long index
 @property  NSData *signature
 @property  unsigned long size

  // instance methods
  -[CKPackageSection .cxx_destruct]
  -[CKPackageSection size]
  -[CKPackageSection index]
  -[CKPackageSection setSize:]
  -[CKPackageSection signature]
  -[CKPackageSection CKPropertiesDescription]
  -[CKPackageSection initWithIndex:signature:size:]


CKDPRecordZoneIdentifier : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasValue
 @property  CKDPIdentifier *value
 @property  BOOL hasOwnerIdentifier
 @property  CKDPIdentifier *ownerIdentifier

  // instance methods
  -[CKDPRecordZoneIdentifier isEqual:]
  -[CKDPRecordZoneIdentifier copyWithZone:]
  -[CKDPRecordZoneIdentifier .cxx_destruct]
  -[CKDPRecordZoneIdentifier value]
  -[CKDPRecordZoneIdentifier setValue:]
  -[CKDPRecordZoneIdentifier dictionaryRepresentation]
  -[CKDPRecordZoneIdentifier writeTo:]
  -[CKDPRecordZoneIdentifier mergeFrom:]
  -[CKDPRecordZoneIdentifier readFrom:]
  -[CKDPRecordZoneIdentifier copyTo:]
  -[CKDPRecordZoneIdentifier setOwnerIdentifier:]
  -[CKDPRecordZoneIdentifier hasValue]
  -[CKDPRecordZoneIdentifier hasOwnerIdentifier]
  -[CKDPRecordZoneIdentifier ownerIdentifier]


CKApplicationPermissionGroup : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSArray *containerIDs
 @property  NSArray *applicationBundleIDs
 @property  unsigned long enabledPermissions

  // class methods
  +[CKApplicationPermissionGroup supportsSecureCoding]

  // instance methods
  -[CKApplicationPermissionGroup encodeWithCoder:]
  -[CKApplicationPermissionGroup initWithCoder:]
  -[CKApplicationPermissionGroup .cxx_destruct]
  -[CKApplicationPermissionGroup CKPropertiesDescription]
  -[CKApplicationPermissionGroup setContainerIDs:]
  -[CKApplicationPermissionGroup setApplicationBundleIDs:]
  -[CKApplicationPermissionGroup setEnabledPermissions:]
  -[CKApplicationPermissionGroup containerIDs]
  -[CKApplicationPermissionGroup applicationBundleIDs]
  -[CKApplicationPermissionGroup enabledPermissions]


CKUploadRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  CKUploadRequestManagerInternals *internals
 @property  CKSyncEngine *repairZoneSyncEngine
 @property  CKContainer *repairContainer
 @property  CKUploadRequestPersistentStore *database
 @property  @? assetRequestCallback
 @property  @? packageRequestCallback
 @property  NSString *machServiceName
 @property  NSString *activityIdentifierForSchedulingRepairs

  // class methods
  +[CKUploadRequestManager recurringFetchPeriod]
  +[CKUploadRequestManager tryAgainLaterRetryTime]
  +[CKUploadRequestManager retryableErrorRetryTime]
  +[CKUploadRequestManager cancelledErrorRetryTime]
  +[CKUploadRequestManager retryableErrorMaxRetryCount]
  +[CKUploadRequestManager activityIdentifierForSchedulingRepairsInContainer:]

  // instance methods
  -[CKUploadRequestManager dealloc]
  -[CKUploadRequestManager .cxx_destruct]
  -[CKUploadRequestManager cancelAllOperations]
  -[CKUploadRequestManager database]
  -[CKUploadRequestManager setMachServiceName:]
  -[CKUploadRequestManager machServiceName]
  -[CKUploadRequestManager unregister]
  -[CKUploadRequestManager setAssetRequestCallback:]
  -[CKUploadRequestManager registerForItemRequests]
  -[CKUploadRequestManager setPackageRequestCallback:]
  -[CKUploadRequestManager manuallyTriggerUploadRequests]
  -[CKUploadRequestManager initWithContainer:repairContainerOverrides:ignoringSystemConditions:]
  -[CKUploadRequestManager assetRequestCallback]
  -[CKUploadRequestManager packageRequestCallback]
  -[CKUploadRequestManager initWithContainer:repairContainerOverrides:]
  -[CKUploadRequestManager internals]
  -[CKUploadRequestManager activityIdentifierForSchedulingRepairs]
  -[CKUploadRequestManager repairZoneSyncEngine]
  -[CKUploadRequestManager repairContainer]
  -[CKUploadRequestManager fetchServerChanges:]
  -[CKUploadRequestManager scheduleOrInvokeRepairsNow]
  -[CKUploadRequestManager setCallback:forOverridePoint:]


CKUploadRequestManagerInternals : NSObject /usr/lib/libSystem.B.dylib <CKAssetRepairSchedulerDelegate, CKSyncEngineDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  CKContainer *container
 @property  CKContainer *repairContainer
 @property  CKUploadRequestConfiguration *repairContainerOverrides
 @property  CKUploadRequestManagerStateMachine *stateMachine
 @property  CKSyncEngine *repairZoneSyncEngine
 @property  NSString *assignedMachServiceName
 @property  BOOL hasRegisteredActivity
 @property  CKAssetRepairScheduler *repairProcessor
 @property  CKUploadRequestPersistentStore *database
 @property  NSString *deviceID
 @property  NSString *cachesDirectory
 @property  ^{__SCNetworkReachability=} reachability
 @property  <NSObject> *accountChangeObserver
 @property  @? scheduledAccountStatusCheck
 @property  int fetchAllToken
 @property  @? repairActivityHandler
 @property  CKSchedulerActivity *observedRepairActivity
 @property  CKUploadRequestManagerResponseActionThrottler *responseActionThrottler
 @property  NSObject<OS_dispatch_queue> *stateMachineQueue
 @property  NSObject<OS_dispatch_queue> *stateQueue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSMutableDictionary *callbackForOverridePoint
 @property  BOOL ignoringSystemConditions
 @property  @? assetRequestCallback
 @property  @? packageRequestCallback
 @property  NSString *machServiceName
 @property  NSString *activityIdentifierForSchedulingRepairs

  // instance methods
  -[CKUploadRequestManagerInternals container]
  -[CKUploadRequestManagerInternals setContainer:]
  -[CKUploadRequestManagerInternals .cxx_destruct]
  -[CKUploadRequestManagerInternals observeValueForKeyPath:ofObject:change:context:]
  -[CKUploadRequestManagerInternals setDatabase:]
  -[CKUploadRequestManagerInternals callbackQueue]
  -[CKUploadRequestManagerInternals database]
  -[CKUploadRequestManagerInternals deviceID]
  -[CKUploadRequestManagerInternals setDeviceID:]
  -[CKUploadRequestManagerInternals setCallbackQueue:]
  -[CKUploadRequestManagerInternals setMachServiceName:]
  -[CKUploadRequestManagerInternals machServiceName]
  -[CKUploadRequestManagerInternals cachesDirectory]
  -[CKUploadRequestManagerInternals stateMachine]
  -[CKUploadRequestManagerInternals setStateMachine:]
  -[CKUploadRequestManagerInternals stateQueue]
  -[CKUploadRequestManagerInternals setStateQueue:]
  -[CKUploadRequestManagerInternals setAssetRequestCallback:]
  -[CKUploadRequestManagerInternals setPackageRequestCallback:]
  -[CKUploadRequestManagerInternals manuallyTriggerUploadRequests]
  -[CKUploadRequestManagerInternals initWithContainer:repairContainerOverrides:ignoringSystemConditions:]
  -[CKUploadRequestManagerInternals assetRequestCallback]
  -[CKUploadRequestManagerInternals packageRequestCallback]
  -[CKUploadRequestManagerInternals ignoringSystemConditions]
  -[CKUploadRequestManagerInternals syncEngine:didUpdateMetadata:]
  -[CKUploadRequestManagerInternals syncEngine:didSaveRecord:]
  -[CKUploadRequestManagerInternals syncEngine:failedToSaveRecord:error:]
  -[CKUploadRequestManagerInternals syncEngine:didDeleteRecordWithID:]
  -[CKUploadRequestManagerInternals syncEngine:failedToDeleteRecordWithID:error:]
  -[CKUploadRequestManagerInternals syncEngine:recordToSaveForRecordID:]
  -[CKUploadRequestManagerInternals syncEngine:zoneWithIDChanged:]
  -[CKUploadRequestManagerInternals syncEngine:zoneWithIDWasPurged:]
  -[CKUploadRequestManagerInternals syncEngine:zoneWithIDWasDeleted:]
  -[CKUploadRequestManagerInternals syncEngine:didFetchRecord:]
  -[CKUploadRequestManagerInternals syncEngine:recordWithIDWasDeleted:recordType:]
  -[CKUploadRequestManagerInternals dispatchEvent:synchronously:]
  -[CKUploadRequestManagerInternals initWithContainer:repairContainerOverrides:]
  -[CKUploadRequestManagerInternals activityIdentifierForSchedulingRepairs]
  -[CKUploadRequestManagerInternals repairZoneSyncEngine]
  -[CKUploadRequestManagerInternals repairContainer]
  -[CKUploadRequestManagerInternals fetchServerChanges:]
  -[CKUploadRequestManagerInternals scheduleOrInvokeRepairsNow]
  -[CKUploadRequestManagerInternals setCallback:forOverridePoint:]
  -[CKUploadRequestManagerInternals commonInitWithContainer:repairContainerOverrides:]
  -[CKUploadRequestManagerInternals assignedMachServiceName]
  -[CKUploadRequestManagerInternals repairContainerOverrides]
  -[CKUploadRequestManagerInternals repairZoneID]
  -[CKUploadRequestManagerInternals stateMachineQueue]
  -[CKUploadRequestManagerInternals createStateMachine]
  -[CKUploadRequestManagerInternals dispatchEvent:]
  -[CKUploadRequestManagerInternals callbackForOverridePoint]
  -[CKUploadRequestManagerInternals setCallbackForOverridePoint:]
  -[CKUploadRequestManagerInternals setRepairActivityHandler:]
  -[CKUploadRequestManagerInternals createDatabase]
  -[CKUploadRequestManagerInternals invokeCallbackForOverridePoint:withError:onCallbackQueue:]
  -[CKUploadRequestManagerInternals setRepairContainer:]
  -[CKUploadRequestManagerInternals setRepairContainerOverrides:]
  -[CKUploadRequestManagerInternals setRepairZoneSyncEngine:]
  -[CKUploadRequestManagerInternals setAssignedMachServiceName:]
  -[CKUploadRequestManagerInternals hasRegisteredActivity]
  -[CKUploadRequestManagerInternals setHasRegisteredActivity:]
  -[CKUploadRequestManagerInternals repairProcessor]
  -[CKUploadRequestManagerInternals setRepairProcessor:]
  -[CKUploadRequestManagerInternals setCachesDirectory:]
  -[CKUploadRequestManagerInternals reachability]
  -[CKUploadRequestManagerInternals setReachability:]
  -[CKUploadRequestManagerInternals accountChangeObserver]
  -[CKUploadRequestManagerInternals setAccountChangeObserver:]
  -[CKUploadRequestManagerInternals scheduledAccountStatusCheck]
  -[CKUploadRequestManagerInternals setScheduledAccountStatusCheck:]
  -[CKUploadRequestManagerInternals fetchAllToken]
  -[CKUploadRequestManagerInternals setFetchAllToken:]
  -[CKUploadRequestManagerInternals repairActivityHandler]
  -[CKUploadRequestManagerInternals observedRepairActivity]
  -[CKUploadRequestManagerInternals setObservedRepairActivity:]
  -[CKUploadRequestManagerInternals responseActionThrottler]
  -[CKUploadRequestManagerInternals setResponseActionThrottler:]
  -[CKUploadRequestManagerInternals setStateMachineQueue:]
  -[CKUploadRequestManagerInternals scheduleRecordRepair:withDelay:increasingCount:]
  -[CKUploadRequestManagerInternals canPerformFunction:]
  -[CKUploadRequestManagerInternals assetRepairScheduler:completedRequestWithMetadata:result:]
  -[CKUploadRequestManagerInternals assetRepairScheduler:completedRepairWithMetadata:error:]
  -[CKUploadRequestManagerInternals assetRepairScheduler:preparingRepairWithOperation:]
  -[CKUploadRequestManagerInternals assetRepairSchedulerAllRequestsComplete:]
  -[CKUploadRequestManagerInternals isRepairRecordActionable:]
  -[CKUploadRequestManagerInternals scheduleRepairsWithDelay:]
  -[CKUploadRequestManagerInternals performRepairs]
  -[CKUploadRequestManagerInternals nextRepairDateForDate:]
  -[CKUploadRequestManagerInternals repairableAssetsForDate:]
  -[CKUploadRequestManagerInternals respondToStateMachineAction:isRetry:]
  -[CKUploadRequestManagerInternals respondToStateMachineChangeState:enter:]
  -[CKUploadRequestManagerInternals registerForRepairScheduler]
  -[CKUploadRequestManagerInternals openSyncEngine]
  -[CKUploadRequestManagerInternals closeSyncEngine]
  -[CKUploadRequestManagerInternals cancelScheduledEvent]
  -[CKUploadRequestManagerInternals checkNetworkReachability]
  -[CKUploadRequestManagerInternals registerForNetworkReachability]
  -[CKUploadRequestManagerInternals unregisterFromNetworkReachability]
  -[CKUploadRequestManagerInternals fetchRepairContainerMetadata]
  -[CKUploadRequestManagerInternals checkAccountStatus]
  -[CKUploadRequestManagerInternals checkAccountID]
  -[CKUploadRequestManagerInternals registerForAccountNotifications]
  -[CKUploadRequestManagerInternals unregisterFromAccountNotifications]
  -[CKUploadRequestManagerInternals finishSchedulerCallbackWithDeferral:]
  -[CKUploadRequestManagerInternals scheduleRecurringFetch]
  -[CKUploadRequestManagerInternals scheduleNextSync]
  -[CKUploadRequestManagerInternals registerForFetchAllNotifications]
  -[CKUploadRequestManagerInternals unregisterFromFetchAllNotifications]


CKUploadRequestManagerResponseActionThrottlerMetadata : NSObject /usr/lib/libSystem.B.dylib
 @property  double lastRunTime
 @property  long long repeatCount

  // instance methods
  -[CKUploadRequestManagerResponseActionThrottlerMetadata setRepeatCount:]
  -[CKUploadRequestManagerResponseActionThrottlerMetadata repeatCount]
  -[CKUploadRequestManagerResponseActionThrottlerMetadata lastRunTime]
  -[CKUploadRequestManagerResponseActionThrottlerMetadata setLastRunTime:]


CKUploadRequestManagerResponseActionThrottler : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *responseActionToMetadata
 @property  double throttlePeriod
 @property  long long minimumThrottleCount
 @property  double maximumThrottleTime
 @property  double minimumRetryTime
 @property  NSSet *actionsToThrottle

  // class methods
  +[CKUploadRequestManagerResponseActionThrottler currentTime]
  +[CKUploadRequestManagerResponseActionThrottler sleep:]

  // instance methods
  -[CKUploadRequestManagerResponseActionThrottler init]
  -[CKUploadRequestManagerResponseActionThrottler .cxx_destruct]
  -[CKUploadRequestManagerResponseActionThrottler setMaximumThrottleTime:]
  -[CKUploadRequestManagerResponseActionThrottler maximumThrottleTime]
  -[CKUploadRequestManagerResponseActionThrottler setActionsToThrottle:]
  -[CKUploadRequestManagerResponseActionThrottler gateResponseAction:isRetry:]
  -[CKUploadRequestManagerResponseActionThrottler gateResponseAction:isRetry:currentTime:]
  -[CKUploadRequestManagerResponseActionThrottler responseActionToMetadata]
  -[CKUploadRequestManagerResponseActionThrottler throttlePeriod]
  -[CKUploadRequestManagerResponseActionThrottler actionsToThrottle]
  -[CKUploadRequestManagerResponseActionThrottler throttleTimeForCount:isRetry:]
  -[CKUploadRequestManagerResponseActionThrottler minimumThrottleCount]
  -[CKUploadRequestManagerResponseActionThrottler minimumRetryTime]
  -[CKUploadRequestManagerResponseActionThrottler setThrottlePeriod:]
  -[CKUploadRequestManagerResponseActionThrottler setMinimumThrottleCount:]
  -[CKUploadRequestManagerResponseActionThrottler setMinimumRetryTime:]
  -[CKUploadRequestManagerResponseActionThrottler setResponseActionToMetadata:]


CKMarkNotificationsReadOperation : CKOperation
 @property  NSMutableArray *notificationIDsMarkedRead
 @property  NSMutableDictionary *errorsByNotificationID
 @property  NSArray *notificationIDs
 @property  @? markNotificationsReadCompletionBlock

  // instance methods
  -[CKMarkNotificationsReadOperation init]
  -[CKMarkNotificationsReadOperation .cxx_destruct]
  -[CKMarkNotificationsReadOperation fillOutOperationInfo:]
  -[CKMarkNotificationsReadOperation fillFromOperationInfo:]
  -[CKMarkNotificationsReadOperation hasCKOperationCallbacksSet]
  -[CKMarkNotificationsReadOperation CKOperationShouldRun:]
  -[CKMarkNotificationsReadOperation _finishOnCallbackQueueWithError:]
  -[CKMarkNotificationsReadOperation activityCreate]
  -[CKMarkNotificationsReadOperation performCKOperation]
  -[CKMarkNotificationsReadOperation _handleProgressCallback:]
  -[CKMarkNotificationsReadOperation notificationIDs]
  -[CKMarkNotificationsReadOperation setNotificationIDs:]
  -[CKMarkNotificationsReadOperation errorsByNotificationID]
  -[CKMarkNotificationsReadOperation setErrorsByNotificationID:]
  -[CKMarkNotificationsReadOperation notificationIDsMarkedRead]
  -[CKMarkNotificationsReadOperation setNotificationIDsMarkedRead:]
  -[CKMarkNotificationsReadOperation markNotificationsReadCompletionBlock]
  -[CKMarkNotificationsReadOperation setMarkNotificationsReadCompletionBlock:]
  -[CKMarkNotificationsReadOperation initWithNotificationIDsToMarkRead:]


CKMarkNotificationsReadOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  NSArray *notificationIDs

  // class methods
  +[CKMarkNotificationsReadOperationInfo supportsSecureCoding]

  // instance methods
  -[CKMarkNotificationsReadOperationInfo encodeWithCoder:]
  -[CKMarkNotificationsReadOperationInfo initWithCoder:]
  -[CKMarkNotificationsReadOperationInfo .cxx_destruct]
  -[CKMarkNotificationsReadOperationInfo notificationIDs]
  -[CKMarkNotificationsReadOperationInfo setNotificationIDs:]


CKFetchArchivedRecordsOperation : CKDatabaseOperation
 @property  NSMutableDictionary *statusByZoneID
 @property  BOOL shouldFetchAssetContents
 @property  NSMutableDictionary *perItemErrors
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey
 @property  NSArray *recordZoneIDs
 @property  NSDictionary *configurationsByRecordZoneID
 @property  BOOL fetchAllChanges
 @property  @? recordFetchedBlock
 @property  @? recordZoneChangeTokensUpdatedBlock
 @property  @? recordZoneFetchCompletionBlock
 @property  @? fetchArchivedRecordsCompletionBlock

  // instance methods
  -[CKFetchArchivedRecordsOperation init]
  -[CKFetchArchivedRecordsOperation .cxx_destruct]
  -[CKFetchArchivedRecordsOperation setFetchAllChanges:]
  -[CKFetchArchivedRecordsOperation setRecordZoneFetchCompletionBlock:]
  -[CKFetchArchivedRecordsOperation setRecordFetchedBlock:]
  -[CKFetchArchivedRecordsOperation initWithRecordZoneIDs:configurationsByRecordZoneID:]
  -[CKFetchArchivedRecordsOperation setRecordZoneChangeTokensUpdatedBlock:]
  -[CKFetchArchivedRecordsOperation fillOutOperationInfo:]
  -[CKFetchArchivedRecordsOperation fillFromOperationInfo:]
  -[CKFetchArchivedRecordsOperation hasCKOperationCallbacksSet]
  -[CKFetchArchivedRecordsOperation CKOperationShouldRun:]
  -[CKFetchArchivedRecordsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchArchivedRecordsOperation activityCreate]
  -[CKFetchArchivedRecordsOperation performCKOperation]
  -[CKFetchArchivedRecordsOperation _handleProgressCallback:]
  -[CKFetchArchivedRecordsOperation perItemErrors]
  -[CKFetchArchivedRecordsOperation setPerItemErrors:]
  -[CKFetchArchivedRecordsOperation recordZoneIDs]
  -[CKFetchArchivedRecordsOperation setRecordZoneIDs:]
  -[CKFetchArchivedRecordsOperation fetchAllChanges]
  -[CKFetchArchivedRecordsOperation statusByZoneID]
  -[CKFetchArchivedRecordsOperation configurationsByRecordZoneID]
  -[CKFetchArchivedRecordsOperation setConfigurationsByRecordZoneID:]
  -[CKFetchArchivedRecordsOperation shouldFetchAssetContents]
  -[CKFetchArchivedRecordsOperation setShouldFetchAssetContents:]
  -[CKFetchArchivedRecordsOperation assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchArchivedRecordsOperation setAssetTransferOptionsByRecordTypeAndKey:]
  -[CKFetchArchivedRecordsOperation recordFetchedBlock]
  -[CKFetchArchivedRecordsOperation recordZoneChangeTokensUpdatedBlock]
  -[CKFetchArchivedRecordsOperation recordZoneFetchCompletionBlock]
  -[CKFetchArchivedRecordsOperation fetchArchivedRecordsCompletionBlock]
  -[CKFetchArchivedRecordsOperation setFetchArchivedRecordsCompletionBlock:]
  -[CKFetchArchivedRecordsOperation recordZoneArchivesStatusByZoneID]
  -[CKFetchArchivedRecordsOperation setStatusByZoneID:]


CKFetchArchivedRecordsOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKServerChangeToken *previousServerChangeToken

  // class methods
  +[CKFetchArchivedRecordsOptions supportsSecureCoding]

  // instance methods
  -[CKFetchArchivedRecordsOptions copyWithZone:]
  -[CKFetchArchivedRecordsOptions encodeWithCoder:]
  -[CKFetchArchivedRecordsOptions initWithCoder:]
  -[CKFetchArchivedRecordsOptions .cxx_destruct]
  -[CKFetchArchivedRecordsOptions setPreviousServerChangeToken:]
  -[CKFetchArchivedRecordsOptions previousServerChangeToken]


CKFetchArchivedRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordZoneIDs
 @property  NSDictionary *configurationsByRecordZoneID
 @property  BOOL shouldFetchAssetContents
 @property  BOOL fetchAllChanges
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey

  // class methods
  +[CKFetchArchivedRecordsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchArchivedRecordsOperationInfo encodeWithCoder:]
  -[CKFetchArchivedRecordsOperationInfo initWithCoder:]
  -[CKFetchArchivedRecordsOperationInfo .cxx_destruct]
  -[CKFetchArchivedRecordsOperationInfo setFetchAllChanges:]
  -[CKFetchArchivedRecordsOperationInfo recordZoneIDs]
  -[CKFetchArchivedRecordsOperationInfo setRecordZoneIDs:]
  -[CKFetchArchivedRecordsOperationInfo fetchAllChanges]
  -[CKFetchArchivedRecordsOperationInfo configurationsByRecordZoneID]
  -[CKFetchArchivedRecordsOperationInfo setConfigurationsByRecordZoneID:]
  -[CKFetchArchivedRecordsOperationInfo shouldFetchAssetContents]
  -[CKFetchArchivedRecordsOperationInfo setShouldFetchAssetContents:]
  -[CKFetchArchivedRecordsOperationInfo assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchArchivedRecordsOperationInfo setAssetTransferOptionsByRecordTypeAndKey:]


CKDPStreamingAssetFooter : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  int status
 @property  NSData *md5

  // instance methods
  -[CKDPStreamingAssetFooter isEqual:]
  -[CKDPStreamingAssetFooter copyWithZone:]
  -[CKDPStreamingAssetFooter .cxx_destruct]
  -[CKDPStreamingAssetFooter dictionaryRepresentation]
  -[CKDPStreamingAssetFooter status]
  -[CKDPStreamingAssetFooter writeTo:]
  -[CKDPStreamingAssetFooter mergeFrom:]
  -[CKDPStreamingAssetFooter readFrom:]
  -[CKDPStreamingAssetFooter copyTo:]
  -[CKDPStreamingAssetFooter setStatus:]
  -[CKDPStreamingAssetFooter statusAsString:]
  -[CKDPStreamingAssetFooter setMd5:]
  -[CKDPStreamingAssetFooter StringAsStatus:]
  -[CKDPStreamingAssetFooter md5]


CKRecordValueStore : NSObject /usr/lib/libSystem.B.dylib <CKRecordKeyValueSetting, NSCopying, NSSecureCoding>
 @property  BOOL trackChanges
 @property  CKRecord *record
 @property  NSMutableDictionary *values
 @property  NSMutableDictionary *originalValues
 @property  NSMutableSet *changedKeysSet
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKRecordValueStore supportsSecureCoding]

  // instance methods
  -[CKRecordValueStore copyWithZone:]
  -[CKRecordValueStore allKeys]
  -[CKRecordValueStore setValue:forKey:]
  -[CKRecordValueStore objectForKey:]
  -[CKRecordValueStore encodeWithCoder:]
  -[CKRecordValueStore initWithCoder:]
  -[CKRecordValueStore setValues:]
  -[CKRecordValueStore values]
  -[CKRecordValueStore objectForKeyedSubscript:]
  -[CKRecordValueStore setObject:forKey:]
  -[CKRecordValueStore .cxx_destruct]
  -[CKRecordValueStore setObject:forKeyedSubscript:]
  -[CKRecordValueStore valueForKey:]
  -[CKRecordValueStore setNilValueForKey:]
  -[CKRecordValueStore recordID]
  -[CKRecordValueStore record]
  -[CKRecordValueStore _validateRecordKey:]
  -[CKRecordValueStore _validateKeyUniquenessForKey:]
  -[CKRecordValueStore _validateRecordValue:]
  -[CKRecordValueStore setObjectNoValidate:forKey:]
  -[CKRecordValueStore _sanitizeRecordValue:]
  -[CKRecordValueStore trackChanges]
  -[CKRecordValueStore changedKeysSet]
  -[CKRecordValueStore checkPropertiesWithModifiedPropertiesOnly:includingAllArrayItems:withValueCheckBlock:]
  -[CKRecordValueStore changedKeys]
  -[CKRecordValueStore initWithRecord:]
  -[CKRecordValueStore originalValues]
  -[CKRecordValueStore setOriginalValues:]
  -[CKRecordValueStore setChangedKeysSet:]
  -[CKRecordValueStore setTrackChanges:]
  -[CKRecordValueStore resetChangedKeys]
  -[CKRecordValueStore checkProperties:withValueCheckBlock:]
  -[CKRecordValueStore setRecord:]


CKEncryptedRecordValueStore : CKRecordValueStore
  // instance methods
  -[CKEncryptedRecordValueStore objectForKeyedSubscript:]
  -[CKEncryptedRecordValueStore setObject:forKey:]
  -[CKEncryptedRecordValueStore setObject:forKeyedSubscript:]
  -[CKEncryptedRecordValueStore setCompatibilityModeObjectNoValidate:forKey:]
  -[CKEncryptedRecordValueStore _validatePlainTextSizeOnEncryptedData:forKey:]


CKRecord : NSObject /usr/lib/libSystem.B.dylib <CKRecordKeyValueSetting, NSSecureCoding, NSCopying>
 @property  CKContainerID *containerID
 @property  CKReference *share
 @property  CKReference *previousShare
 @property  BOOL hasUpdatedShare
 @property  CKReference *previousParent
 @property  BOOL hasUpdatedParent
 @property  CKEncryptedData *chainPrivateKey
 @property  CKEncryptedData *mutableEncryptedPSK
 @property  NSData *chainProtectionInfo
 @property  NSData *chainParentPublicKeyID
 @property  NSArray *tombstonedPublicKeyIDs
 @property  NSString *privateToken
 @property  NSURL *mutableURL
 @property  unsigned long assetCount
 @property  unsigned long assetDiskSize
 @property  NSString *recordType
 @property  CKRecordID *recordID
 @property  CKRecordValueStore *valueStore
 @property  CKEncryptedRecordValueStore *encryptedValueStore
 @property  NSDictionary *values
 @property  NSDictionary *originalValues
 @property  NSSet *changedKeysSet
 @property  BOOL trackChanges
 @property  NSDate *creationDate
 @property  NSDate *modificationDate
 @property  CKRecordID *creatorUserRecordID
 @property  CKRecordID *lastModifiedUserRecordID
 @property  NSString *modifiedByDevice
 @property  NSString *etag
 @property  NSArray *conflictLoserEtags
 @property  BOOL knownToServer
 @property  BOOL containsAssetValues
 @property  BOOL containsPackageValues
 @property  BOOL hasPropertiesRequiringEncryption
 @property  BOOL hasModifiedPropertiesRequiringEncryption
 @property  BOOL hasPropertiesRequiringDecryption
 @property  BOOL hasEncryptedData
 @property  BOOL hasModifiedEncryptedData
 @property  BOOL wasCached
 @property  BOOL serializeProtectionData
 @property  NSData *zoneishKeyID
 @property  NSData *protectionData
 @property  NSString *previousProtectionEtag
 @property  NSString *protectionEtag
 @property  NSString *zoneProtectionEtag
 @property  NSString *shareEtag
 @property  NSString *routingKey
 @property  NSString *baseToken
 @property  NSString *shortToken
 @property  NSString *fullToken
 @property  NSData *shortSharingTokenData
 @property  NSData *shortSharingTokenHashData
 @property  NSData *encryptedFullTokenData
 @property  <CKRecordKeyValueSetting> *encryptedValuesByKey
 @property  <CKRecordKeyValueSetting> *valuesByKey
 @property  BOOL wantsPublicSharingKey
 @property  NSData *encryptedPublicSharingKey
 @property  CKEncryptedData *mutableEncryptedPublicSharingKey
 @property  NSData *mutableEncryptedPublicSharingKeyData
 @property  BOOL wantsChainPCS
 @property  NSURL *URL
 @property  NSURL *uncachedURL
 @property  NSString *displayedHostname
 @property  BOOL useLightweightPCS
 @property  unsigned long size
 @property  long long permission
 @property  BOOL hasChainPCS
 @property  NSDictionary *pluginFields
 @property  NSString *previousProtectionEtagFromUnitTest
 @property  NSData *pcsKeyID
 @property  NSString *recordChangeTag
 @property  CKReference *parent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKRecord supportsSecureCoding]
  +[CKRecord accessInstanceVariablesDirectly]
  +[CKRecord fullTokenFromBaseToken:privateToken:]
  +[CKRecord encryptFullToken:shortSharingTokenData:]
  +[CKRecord decryptFullToken:shortSharingTokenData:]
  +[CKRecord shareURLWithShortToken:shareTitle:shareType:containerID:displayedHostname:]
  +[CKRecord recordWithDuplicatedPackagesOfRecord:error:]
  +[CKRecord keyForListField:withIndexRange:]
  +[CKRecord keyForInsertingIntoListField:atIndex:]
  +[CKRecord keyForAppendingToListField:]
  +[CKRecord keyForFetchingItems:atEndOfListField:]

  // instance methods
  -[CKRecord init]
  -[CKRecord copyWithZone:]
  -[CKRecord parent]
  -[CKRecord allKeys]
  -[CKRecord setValue:forKey:]
  -[CKRecord setParent:]
  -[CKRecord objectForKey:]
  -[CKRecord encodeWithCoder:]
  -[CKRecord initWithCoder:]
  -[CKRecord values]
  -[CKRecord allValues]
  -[CKRecord objectForKeyedSubscript:]
  -[CKRecord setObject:forKey:]
  -[CKRecord .cxx_destruct]
  -[CKRecord setObject:forKeyedSubscript:]
  -[CKRecord size]
  -[CKRecord valueForKey:]
  -[CKRecord setNilValueForKey:]
  -[CKRecord URL]
  -[CKRecord etag]
  -[CKRecord modificationDate]
  -[CKRecord creationDate]
  -[CKRecord recordType]
  -[CKRecord recordID]
  -[CKRecord encryptedValuesByKey]
  -[CKRecord valuesByKey]
  -[CKRecord setCreationDate:]
  -[CKRecord initWithRecordType:recordID:]
  -[CKRecord setModificationDate:]
  -[CKRecord share]
  -[CKRecord containerID]
  -[CKRecord setShare:]
  -[CKRecord setRecordID:]
  -[CKRecord setEtag:]
  -[CKRecord baseToken]
  -[CKRecord setBaseToken:]
  -[CKRecord encryptedValueStore]
  -[CKRecord encodeSystemFieldsWithCoder:]
  -[CKRecord initWithRecordType:zoneID:]
  -[CKRecord CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKRecord pcsKeyID]
  -[CKRecord setPcsKeyID:]
  -[CKRecord zoneishKeyID]
  -[CKRecord setZoneishKeyID:]
  -[CKRecord setContainerID:]
  -[CKRecord setRecordType:]
  -[CKRecord CKAssignToContainerWithID:]
  -[CKRecord claimPackagesWithSuccessBlock:failureBlock:completionBlock:]
  -[CKRecord setObjectNoValidate:forKey:]
  -[CKRecord trackChanges]
  -[CKRecord changedKeysSet]
  -[CKRecord changedKeys]
  -[CKRecord valueStore]
  -[CKRecord originalValues]
  -[CKRecord setChangedKeysSet:]
  -[CKRecord setTrackChanges:]
  -[CKRecord resetChangedKeys]
  -[CKRecord _validateRecordName:]
  -[CKRecord _validateRecordType:]
  -[CKRecord _initSkippingValidationWithRecordType:recordID:]
  -[CKRecord setValueStore:]
  -[CKRecord setEncryptedValueStore:]
  -[CKRecord creatorUserRecordID]
  -[CKRecord setCreatorUserRecordID:]
  -[CKRecord lastModifiedUserRecordID]
  -[CKRecord setLastModifiedUserRecordID:]
  -[CKRecord modifiedByDevice]
  -[CKRecord setModifiedByDevice:]
  -[CKRecord conflictLoserEtags]
  -[CKRecord setConflictLoserEtags:]
  -[CKRecord isKnownToServer]
  -[CKRecord setKnownToServer:]
  -[CKRecord wasCached]
  -[CKRecord setWasCached:]
  -[CKRecord serializeProtectionData]
  -[CKRecord setSerializeProtectionData:]
  -[CKRecord protectionData]
  -[CKRecord setProtectionData:]
  -[CKRecord previousProtectionEtag]
  -[CKRecord setPreviousProtectionEtag:]
  -[CKRecord protectionEtag]
  -[CKRecord setProtectionEtag:]
  -[CKRecord zoneProtectionEtag]
  -[CKRecord setZoneProtectionEtag:]
  -[CKRecord shareEtag]
  -[CKRecord setShareEtag:]
  -[CKRecord useLightweightPCS]
  -[CKRecord setUseLightweightPCS:]
  -[CKRecord wantsPublicSharingKey]
  -[CKRecord routingKey]
  -[CKRecord setRoutingKey:]
  -[CKRecord mutableEncryptedPSK]
  -[CKRecord setMutableEncryptedPSK:]
  -[CKRecord displayedHostname]
  -[CKRecord setDisplayedHostname:]
  -[CKRecord mutableURL]
  -[CKRecord setMutableURL:]
  -[CKRecord previousShare]
  -[CKRecord hasUpdatedShare]
  -[CKRecord previousParent]
  -[CKRecord hasUpdatedParent]
  -[CKRecord chainPrivateKey]
  -[CKRecord setChainPrivateKey:]
  -[CKRecord chainProtectionInfo]
  -[CKRecord setChainProtectionInfo:]
  -[CKRecord chainParentPublicKeyID]
  -[CKRecord setChainParentPublicKeyID:]
  -[CKRecord wantsChainPCS]
  -[CKRecord setWantsChainPCS:]
  -[CKRecord tombstonedPublicKeyIDs]
  -[CKRecord setTombstonedPublicKeyIDs:]
  -[CKRecord pluginFields]
  -[CKRecord setPluginFields:]
  -[CKRecord privateToken]
  -[CKRecord fullToken]
  -[CKRecord shortSharingTokenData]
  -[CKRecord shortSharingToken]
  -[CKRecord shortToken]
  -[CKRecord uncachedURL]
  -[CKRecord permission]
  -[CKRecord recordChangeTag]
  -[CKRecord _sizeOfRecordID:]
  -[CKRecord _sizeOfRecordValue:forKey:]
  -[CKRecord hasPropertiesRequiringEncryption]
  -[CKRecord _allStrings]
  -[CKRecord _valueIsUsingCKEncryptedData:]
  -[CKRecord initWithRecordType:]
  -[CKRecord copyWithOriginalValues]
  -[CKRecord setMutableEncryptedPublicSharingKey:]
  -[CKRecord mutableEncryptedPublicSharingKey]
  -[CKRecord setMutableEncryptedPublicSharingKeyData:]
  -[CKRecord mutableEncryptedPublicSharingKeyData]
  -[CKRecord encryptedPublicSharingKey]
  -[CKRecord shortSharingTokenHashData]
  -[CKRecord encryptedFullTokenData]
  -[CKRecord decryptFullToken:]
  -[CKRecord canHostServerURLInfo]
  -[CKRecord hasChainPCS]
  -[CKRecord allTokens]
  -[CKRecord _checkProperties:encryptedStore:withValueCheckBlock:]
  -[CKRecord containsAssetValues]
  -[CKRecord containsPackageValues]
  -[CKRecord hasModifiedPropertiesRequiringEncryption]
  -[CKRecord hasPropertiesRequiringDecryption]
  -[CKRecord hasEncryptedData]
  -[CKRecord hasModifiedEncryptedData]
  -[CKRecord setParentReferenceFromRecord:]
  -[CKRecord setParentReferenceFromRecordID:]
  -[CKRecord assetCount]
  -[CKRecord assetDiskSize]
  -[CKRecord setStreamingAssetRequestOptions:]
  -[CKRecord releasePackages]
  -[CKRecord removePackages]
  -[CKRecord setPreviousShare:]
  -[CKRecord setHasUpdatedShare:]
  -[CKRecord setPreviousParent:]
  -[CKRecord setHasUpdatedParent:]
  -[CKRecord setWantsPublicSharingKey:]
  -[CKRecord setPermission:]
  -[CKRecord previousProtectionEtagFromUnitTest]
  -[CKRecord setPreviousProtectionEtagFromUnitTest:]


CKContactsSupport : NSObject /usr/lib/libSystem.B.dylib
 @property  Class CKCNContactStore
 @property  Class CKCNContactFetchRequest
 @property  Class CKCNPhoneNumber
 @property  Class CKCNContact
 @property  Class CKCNMutableContact

  // class methods
  +[CKContactsSupport sharedInstance]

  // instance methods
  -[CKContactsSupport CKCNMutableContact]
  -[CKContactsSupport CKCNContactStore]
  -[CKContactsSupport CKCNContactFetchRequest]
  -[CKContactsSupport CKCNPhoneNumber]
  -[CKContactsSupport CKCNContact]


CKFileOpenInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *UUID
 @property  NSString *path
 @property  NSNumber *deviceID
 @property  NSNumber *fileID
 @property  NSNumber *generationID
 @property  BOOL shouldReadRawEncryptedData
 @property  NSFileHandle *clientOpenedFileHandle

  // class methods
  +[CKFileOpenInfo supportsSecureCoding]

  // instance methods
  -[CKFileOpenInfo encodeWithCoder:]
  -[CKFileOpenInfo initWithCoder:]
  -[CKFileOpenInfo .cxx_destruct]
  -[CKFileOpenInfo path]
  -[CKFileOpenInfo UUID]
  -[CKFileOpenInfo setUUID:]
  -[CKFileOpenInfo setPath:]
  -[CKFileOpenInfo deviceID]
  -[CKFileOpenInfo setDeviceID:]
  -[CKFileOpenInfo CKPropertiesDescription]
  -[CKFileOpenInfo shouldReadRawEncryptedData]
  -[CKFileOpenInfo fileID]
  -[CKFileOpenInfo generationID]
  -[CKFileOpenInfo setFileID:]
  -[CKFileOpenInfo setGenerationID:]
  -[CKFileOpenInfo setShouldReadRawEncryptedData:]
  -[CKFileOpenInfo clientOpenedFileHandle]
  -[CKFileOpenInfo setClientOpenedFileHandle:]


CKFileOpenResult : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  ^{_mkbbackupref=} handle
 @property  NSFileHandle *fileHandle
 @property  NSFileHandle *encryptedFileHandle
 @property  NSNumber *fileSize

  // class methods
  +[CKFileOpenResult supportsSecureCoding]

  // instance methods
  -[CKFileOpenResult dealloc]
  -[CKFileOpenResult encodeWithCoder:]
  -[CKFileOpenResult initWithCoder:]
  -[CKFileOpenResult .cxx_destruct]
  -[CKFileOpenResult handle]
  -[CKFileOpenResult fileSize]
  -[CKFileOpenResult fileHandle]
  -[CKFileOpenResult setHandle:]
  -[CKFileOpenResult setFileSize:]
  -[CKFileOpenResult setFileHandle:]
  -[CKFileOpenResult initWithMobileKeyBagHandle:path:error:]
  -[CKFileOpenResult encryptedFileHandle]
  -[CKFileOpenResult setEncryptedFileHandle:]


CKFileMetadata : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSNumber *deviceID
 @property  NSNumber *fileID
 @property  NSNumber *generationID
 @property  NSNumber *modTimeInSeconds
 @property  NSNumber *fileSize

  // class methods
  +[CKFileMetadata supportsSecureCoding]

  // instance methods
  -[CKFileMetadata encodeWithCoder:]
  -[CKFileMetadata initWithCoder:]
  -[CKFileMetadata .cxx_destruct]
  -[CKFileMetadata fileSize]
  -[CKFileMetadata deviceID]
  -[CKFileMetadata setDeviceID:]
  -[CKFileMetadata setFileSize:]
  -[CKFileMetadata fileID]
  -[CKFileMetadata generationID]
  -[CKFileMetadata setFileID:]
  -[CKFileMetadata setGenerationID:]
  -[CKFileMetadata modTimeInSeconds]
  -[CKFileMetadata setModTimeInSeconds:]


CKAssetTransferOptions : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSNumber *sparseAware
 @property  NSNumber *shouldFetchAssetContent
 @property  NSNumber *shouldFetchAssetContentInMemory
 @property  NSNumber *useMMCSEncryptionV2

  // class methods
  +[CKAssetTransferOptions supportsSecureCoding]

  // instance methods
  -[CKAssetTransferOptions copyWithZone:]
  -[CKAssetTransferOptions encodeWithCoder:]
  -[CKAssetTransferOptions initWithCoder:]
  -[CKAssetTransferOptions .cxx_destruct]
  -[CKAssetTransferOptions CKPropertiesDescription]
  -[CKAssetTransferOptions setUseMMCSEncryptionV2:]
  -[CKAssetTransferOptions sparseAware]
  -[CKAssetTransferOptions shouldFetchAssetContent]
  -[CKAssetTransferOptions shouldFetchAssetContentInMemory]
  -[CKAssetTransferOptions useMMCSEncryptionV2]
  -[CKAssetTransferOptions setSparseAware:]
  -[CKAssetTransferOptions setShouldFetchAssetContent:]
  -[CKAssetTransferOptions setShouldFetchAssetContentInMemory:]


CKAssetReuploadExpectedProperties : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSData *fileSignature
 @property  NSData *referenceSignature
 @property  NSData *assetKey

  // class methods
  +[CKAssetReuploadExpectedProperties supportsSecureCoding]

  // instance methods
  -[CKAssetReuploadExpectedProperties copyWithZone:]
  -[CKAssetReuploadExpectedProperties encodeWithCoder:]
  -[CKAssetReuploadExpectedProperties initWithCoder:]
  -[CKAssetReuploadExpectedProperties .cxx_destruct]
  -[CKAssetReuploadExpectedProperties CKPropertiesDescription]
  -[CKAssetReuploadExpectedProperties fileSignature]
  -[CKAssetReuploadExpectedProperties referenceSignature]
  -[CKAssetReuploadExpectedProperties assetKey]
  -[CKAssetReuploadExpectedProperties setFileSignature:]
  -[CKAssetReuploadExpectedProperties setReferenceSignature:]
  -[CKAssetReuploadExpectedProperties setAssetKey:]


CKAssetCopyInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSData *fileSignature
 @property  NSData *referenceSignature
 @property  NSData *assetKey
 @property  NSURL *assetURL
 @property  NSString *senderID

  // class methods
  +[CKAssetCopyInfo supportsSecureCoding]

  // instance methods
  -[CKAssetCopyInfo encodeWithCoder:]
  -[CKAssetCopyInfo initWithCoder:]
  -[CKAssetCopyInfo .cxx_destruct]
  -[CKAssetCopyInfo senderID]
  -[CKAssetCopyInfo CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKAssetCopyInfo fileSignature]
  -[CKAssetCopyInfo referenceSignature]
  -[CKAssetCopyInfo assetKey]
  -[CKAssetCopyInfo setFileSignature:]
  -[CKAssetCopyInfo setReferenceSignature:]
  -[CKAssetCopyInfo setAssetKey:]
  -[CKAssetCopyInfo assetURL]
  -[CKAssetCopyInfo setAssetURL:]
  -[CKAssetCopyInfo setSenderID:]


CKAssetRereferenceInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  CKRecordZoneID *sourceZoneID
 @property  NSURL *contentBaseURL
 @property  NSString *owner
 @property  NSString *requestor
 @property  NSData *assetKey
 @property  NSData *referenceSignature
 @property  NSString *downloadToken
 @property  unsigned long downloadTokenExpiration
 @property  NSError *error
 @property  NSString *destinationFieldName

  // instance methods
  -[CKAssetRereferenceInfo .cxx_destruct]
  -[CKAssetRereferenceInfo setOwner:]
  -[CKAssetRereferenceInfo error]
  -[CKAssetRereferenceInfo setError:]
  -[CKAssetRereferenceInfo owner]
  -[CKAssetRereferenceInfo downloadToken]
  -[CKAssetRereferenceInfo CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKAssetRereferenceInfo referenceSignature]
  -[CKAssetRereferenceInfo assetKey]
  -[CKAssetRereferenceInfo setReferenceSignature:]
  -[CKAssetRereferenceInfo setAssetKey:]
  -[CKAssetRereferenceInfo contentBaseURL]
  -[CKAssetRereferenceInfo requestor]
  -[CKAssetRereferenceInfo downloadTokenExpiration]
  -[CKAssetRereferenceInfo setDownloadToken:]
  -[CKAssetRereferenceInfo setDownloadTokenExpiration:]
  -[CKAssetRereferenceInfo setContentBaseURL:]
  -[CKAssetRereferenceInfo setRequestor:]
  -[CKAssetRereferenceInfo initWithSourceZoneID:]
  -[CKAssetRereferenceInfo clearRecordFetchProperties]
  -[CKAssetRereferenceInfo validateAndSetRecordFetchPropertiesWithAsset:assetReference:useEncryption:useClearAssetEncryption:]
  -[CKAssetRereferenceInfo sourceZoneID]
  -[CKAssetRereferenceInfo setSourceZoneID:]
  -[CKAssetRereferenceInfo destinationFieldName]
  -[CKAssetRereferenceInfo setDestinationFieldName:]


CKAssetReference : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  long long databaseScope
 @property  CKRecordID *recordID
 @property  NSString *fieldName
 @property  NSData *fileSignature

  // class methods
  +[CKAssetReference supportsSecureCoding]

  // instance methods
  -[CKAssetReference isEqual:]
  -[CKAssetReference copyWithZone:]
  -[CKAssetReference encodeWithCoder:]
  -[CKAssetReference initWithCoder:]
  -[CKAssetReference .cxx_destruct]
  -[CKAssetReference recordID]
  -[CKAssetReference databaseScope]
  -[CKAssetReference setDatabaseScope:]
  -[CKAssetReference CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKAssetReference fieldName]
  -[CKAssetReference fileSignature]
  -[CKAssetReference initWithExistingRecordID:databaseScope:fieldName:fileSignature:]


CKAsset : NSObject /usr/lib/libSystem.B.dylib <CKRecordValue, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *downloadURLTemplate
 @property  CKRecord *record
 @property  NSString *recordKey
 @property  NSURL *contentBaseURL
 @property  NSString *owner
 @property  NSString *requestor
 @property  NSString *authToken
 @property  CKAssetDownloadPreauthorization *downloadPreauthorization
 @property  NSString *downloadBaseURL
 @property  unsigned long downloadTokenExpiration
 @property  NSData *boundaryKey
 @property  NSFileHandle *clientOpenedFileHandle
 @property  NSURL *constructedAssetDownloadURL
 @property  NSString *constructedAssetDownloadURLTemplate
 @property  unsigned long constructedAssetEstimatedSize
 @property  BOOL isConstructedAsset
 @property  NSURL *realPathURL
 @property  NSData *signature
 @property  unsigned long size
 @property  unsigned long paddedFileSize
 @property  NSNumber *deviceID
 @property  NSNumber *fileID
 @property  NSNumber *generationCountToSave
 @property  NSURL *fileURL
 @property  NSURL *nullableFileURL
 @property  NSData *assetContent
 @property  NSString *itemTypeHint
 @property  BOOL shouldReadAssetContentUsingClientProxy
 @property  CKAssetCopyInfo *assetCopyInfo
 @property  NSString *assetHandleUUID
 @property  NSString *UUID
 @property  NSURL *downloadURL
 @property  NSDate *downloadURLExpiration
 @property  NSData *assetKey
 @property  NSData *wrappedAssetKey
 @property  NSData *clearAssetKey
 @property  NSData *referenceSignature
 @property  NSString *uploadReceipt
 @property  double uploadReceiptExpiration
 @property  long long storageGroupingPolicy
 @property  BOOL wasCached
 @property  BOOL hasSize
 @property  BOOL uploaded
 @property  BOOL downloaded
 @property  BOOL shouldReadRawEncryptedData
 @property  CKAssetTransferOptions *assetTransferOptions
 @property  long long arrayIndex
 @property  CKRecordID *recordID
 @property  BOOL isRereferencedAssetUpload
 @property  CKAssetRereferenceInfo *assetRereferenceInfo
 @property  CKAssetReference *assetReference
 @property  NSDictionary *assetChunkerOptions
 @property  long long uploadRank

  // class methods
  +[CKAsset supportsSecureCoding]
  +[CKAsset openWithOpenInfo:error:]
  +[CKAsset getFileMetadataWithFileHandle:openInfo:error:]
  +[CKAsset errorCodeFromPOSIXCode:]
  +[CKAsset openToReadRawEncryptedDataWithOpenInfo:error:]
  +[CKAsset _openUnencryptedWithOpenInfo:genCountCheck:error:]
  +[CKAsset _expandTemplateURL:fieldValues:]
  +[CKAsset assetWithFileURL:]
  +[CKAsset getFileSizeWithOpenInfo:error:]
  +[CKAsset getFileMetadataAtPath:error:]
  +[CKAsset _canonicalizeTemplateURL:]

  // instance methods
  -[CKAsset init]
  -[CKAsset encodeWithCoder:]
  -[CKAsset initWithCoder:]
  -[CKAsset .cxx_destruct]
  -[CKAsset size]
  -[CKAsset setOwner:]
  -[CKAsset initWithFileDescriptor:]
  -[CKAsset UUID]
  -[CKAsset setUUID:]
  -[CKAsset fileURL]
  -[CKAsset setFileURL:]
  -[CKAsset owner]
  -[CKAsset openWithError:]
  -[CKAsset setSize:]
  -[CKAsset deviceID]
  -[CKAsset recordID]
  -[CKAsset signature]
  -[CKAsset initWithFileURL:]
  -[CKAsset setRecordID:]
  -[CKAsset CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKAsset shouldReadRawEncryptedData]
  -[CKAsset shouldReadAssetContentUsingClientProxy]
  -[CKAsset assetContent]
  -[CKAsset record]
  -[CKAsset setRecord:]
  -[CKAsset wasCached]
  -[CKAsset setWasCached:]
  -[CKAsset fileID]
  -[CKAsset setShouldReadRawEncryptedData:]
  -[CKAsset clientOpenedFileHandle]
  -[CKAsset setClientOpenedFileHandle:]
  -[CKAsset referenceSignature]
  -[CKAsset assetKey]
  -[CKAsset setReferenceSignature:]
  -[CKAsset setAssetKey:]
  -[CKAsset contentBaseURL]
  -[CKAsset requestor]
  -[CKAsset downloadTokenExpiration]
  -[CKAsset setDownloadTokenExpiration:]
  -[CKAsset authToken]
  -[CKAsset clearAssetKey]
  -[CKAsset setContentBaseURL:]
  -[CKAsset setRequestor:]
  -[CKAsset _initBare]
  -[CKAsset initWithFileURL:signature:]
  -[CKAsset constructedAssetDownloadURLTemplate]
  -[CKAsset arrayIndex]
  -[CKAsset hasSize]
  -[CKAsset isConstructedAsset]
  -[CKAsset constructedAssetEstimatedSize]
  -[CKAsset recordKey]
  -[CKAsset generationCountToSave]
  -[CKAsset uploadRank]
  -[CKAsset uploadReceipt]
  -[CKAsset uploadReceiptExpiration]
  -[CKAsset wrappedAssetKey]
  -[CKAsset assetCopyInfo]
  -[CKAsset downloadPreauthorization]
  -[CKAsset uploaded]
  -[CKAsset downloaded]
  -[CKAsset downloadURLTemplate]
  -[CKAsset downloadURLExpiration]
  -[CKAsset storageGroupingPolicy]
  -[CKAsset downloadURLWithFileName:]
  -[CKAsset realPathURL]
  -[CKAsset initWithFileURL:signature:assetHandleUUID:]
  -[CKAsset initWithAssetReference:]
  -[CKAsset initWithDeviceID:fileID:generationID:]
  -[CKAsset initWithCopyInfo:fileURL:]
  -[CKAsset initWithAssetContent:itemTypeHint:]
  -[CKAsset assetHandleUUID]
  -[CKAsset isRereferencedAssetUpload]
  -[CKAsset downloadURL]
  -[CKAsset nullableFileURL]
  -[CKAsset setNullableFileURL:]
  -[CKAsset setDownloadURLTemplate:]
  -[CKAsset setRecordKey:]
  -[CKAsset setAuthToken:]
  -[CKAsset setDownloadPreauthorization:]
  -[CKAsset downloadBaseURL]
  -[CKAsset setDownloadBaseURL:]
  -[CKAsset boundaryKey]
  -[CKAsset setBoundaryKey:]
  -[CKAsset constructedAssetDownloadURL]
  -[CKAsset setConstructedAssetDownloadURL:]
  -[CKAsset setConstructedAssetDownloadURLTemplate:]
  -[CKAsset setConstructedAssetEstimatedSize:]
  -[CKAsset setRealPathURL:]
  -[CKAsset setSignature:]
  -[CKAsset paddedFileSize]
  -[CKAsset setPaddedFileSize:]
  -[CKAsset setGenerationCountToSave:]
  -[CKAsset setAssetContent:]
  -[CKAsset itemTypeHint]
  -[CKAsset setItemTypeHint:]
  -[CKAsset setAssetCopyInfo:]
  -[CKAsset setDownloadURLExpiration:]
  -[CKAsset setWrappedAssetKey:]
  -[CKAsset setClearAssetKey:]
  -[CKAsset setUploadReceipt:]
  -[CKAsset setUploadReceiptExpiration:]
  -[CKAsset setStorageGroupingPolicy:]
  -[CKAsset setHasSize:]
  -[CKAsset setUploaded:]
  -[CKAsset setDownloaded:]
  -[CKAsset assetTransferOptions]
  -[CKAsset setAssetTransferOptions:]
  -[CKAsset setArrayIndex:]
  -[CKAsset assetRereferenceInfo]
  -[CKAsset setAssetRereferenceInfo:]
  -[CKAsset assetReference]
  -[CKAsset setAssetReference:]
  -[CKAsset assetChunkerOptions]
  -[CKAsset setAssetChunkerOptions:]
  -[CKAsset setUploadRank:]


CKSchedulerActivity : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *identifier
 @property  CKContainer *container
 @property  CKContainerID *containerID
 @property  long long priority
 @property  NSDictionary *additionalXPCActivityCriteria
 @property  BOOL shouldDefer
 @property  NSObject<OS_xpc_object> *xpcActivity
 @property  unsigned long expectedTransferSizeBytes
 @property  NSDate *earliestStartDate

  // instance methods
  -[CKSchedulerActivity container]
  -[CKSchedulerActivity setContainer:]
  -[CKSchedulerActivity .cxx_destruct]
  -[CKSchedulerActivity identifier]
  -[CKSchedulerActivity setIdentifier:]
  -[CKSchedulerActivity shouldDefer]
  -[CKSchedulerActivity priority]
  -[CKSchedulerActivity setPriority:]
  -[CKSchedulerActivity xpcActivity]
  -[CKSchedulerActivity setXpcActivity:]
  -[CKSchedulerActivity containerID]
  -[CKSchedulerActivity initWithIdentifier:container:priority:]
  -[CKSchedulerActivity setAdditionalXPCActivityCriteria:]
  -[CKSchedulerActivity additionalXPCActivityCriteria]
  -[CKSchedulerActivity CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKSchedulerActivity setContainerID:]
  -[CKSchedulerActivity setShouldDefer:]
  -[CKSchedulerActivity earliestStartDate]
  -[CKSchedulerActivity expectedTransferSizeBytes]
  -[CKSchedulerActivity initWithIdentifier:containerID:priority:]
  -[CKSchedulerActivity setExpectedTransferSizeBytes:]
  -[CKSchedulerActivity setEarliestStartDate:]


CKDiscretionaryOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCoding>
 @property  NSString *sourceApplicationBundleId
 @property  NSString *secondarySourceAppplicationBundleId
 @property  double timeoutIntervalForResource
 @property  BOOL allowsExpensiveAccess
 @property  unsigned long discretionaryNetworkBehavior

  // class methods
  +[CKDiscretionaryOptions supportsSecureCoding]

  // instance methods
  -[CKDiscretionaryOptions encodeWithCoder:]
  -[CKDiscretionaryOptions initWithCoder:]
  -[CKDiscretionaryOptions .cxx_destruct]
  -[CKDiscretionaryOptions setTimeoutIntervalForResource:]
  -[CKDiscretionaryOptions setDiscretionaryNetworkBehavior:]
  -[CKDiscretionaryOptions timeoutIntervalForResource]
  -[CKDiscretionaryOptions setAllowsExpensiveAccess:]
  -[CKDiscretionaryOptions sourceApplicationBundleId]
  -[CKDiscretionaryOptions setSourceApplicationBundleId:]
  -[CKDiscretionaryOptions secondarySourceAppplicationBundleId]
  -[CKDiscretionaryOptions setSecondarySourceAppplicationBundleId:]
  -[CKDiscretionaryOptions allowsExpensiveAccess]
  -[CKDiscretionaryOptions discretionaryNetworkBehavior]


CKDPRecordIdentifier : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasValue
 @property  CKDPIdentifier *value
 @property  BOOL hasZoneIdentifier
 @property  CKDPRecordZoneIdentifier *zoneIdentifier

  // instance methods
  -[CKDPRecordIdentifier isEqual:]
  -[CKDPRecordIdentifier copyWithZone:]
  -[CKDPRecordIdentifier .cxx_destruct]
  -[CKDPRecordIdentifier value]
  -[CKDPRecordIdentifier setValue:]
  -[CKDPRecordIdentifier dictionaryRepresentation]
  -[CKDPRecordIdentifier writeTo:]
  -[CKDPRecordIdentifier mergeFrom:]
  -[CKDPRecordIdentifier readFrom:]
  -[CKDPRecordIdentifier copyTo:]
  -[CKDPRecordIdentifier hasValue]
  -[CKDPRecordIdentifier setZoneIdentifier:]
  -[CKDPRecordIdentifier hasZoneIdentifier]
  -[CKDPRecordIdentifier zoneIdentifier]


CKUserIdentityLookupInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  NSString *emailAddress
 @property  CKRecordID *userRecordID
 @property  NSString *phoneNumber
 @property  BOOL shouldReportMissingIdentity
 @property  NSData *encryptedPersonalInfo

  // class methods
  +[CKUserIdentityLookupInfo supportsSecureCoding]
  +[CKUserIdentityLookupInfo lookupInfosWithEmails:]
  +[CKUserIdentityLookupInfo lookupInfosWithRecordIDs:]
  +[CKUserIdentityLookupInfo lookupInfosWithPhoneNumbers:]

  // instance methods
  -[CKUserIdentityLookupInfo isEqual:]
  -[CKUserIdentityLookupInfo copyWithZone:]
  -[CKUserIdentityLookupInfo encodeWithCoder:]
  -[CKUserIdentityLookupInfo initWithCoder:]
  -[CKUserIdentityLookupInfo .cxx_destruct]
  -[CKUserIdentityLookupInfo phoneNumber]
  -[CKUserIdentityLookupInfo setPhoneNumber:]
  -[CKUserIdentityLookupInfo emailAddress]
  -[CKUserIdentityLookupInfo setEmailAddress:]
  -[CKUserIdentityLookupInfo CKPropertiesDescription]
  -[CKUserIdentityLookupInfo ckShortDescription]
  -[CKUserIdentityLookupInfo CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKUserIdentityLookupInfo userRecordID]
  -[CKUserIdentityLookupInfo lookupValue]
  -[CKUserIdentityLookupInfo initWithEmailAddress:]
  -[CKUserIdentityLookupInfo initWithPhoneNumber:]
  -[CKUserIdentityLookupInfo initWithUserRecordID:]
  -[CKUserIdentityLookupInfo setUserRecordID:]
  -[CKUserIdentityLookupInfo encryptedPersonalInfo]
  -[CKUserIdentityLookupInfo setEncryptedPersonalInfo:]
  -[CKUserIdentityLookupInfo shouldReportMissingIdentity]
  -[CKUserIdentityLookupInfo lookupField]
  -[CKUserIdentityLookupInfo _stripPersonalInfo]
  -[CKUserIdentityLookupInfo setShouldReportMissingIdentity:]


CKDeviceToDeviceShareInvitationToken : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSData *sharingInvitationData
 @property  NSURL *shareURL

  // class methods
  +[CKDeviceToDeviceShareInvitationToken supportsSecureCoding]

  // instance methods
  -[CKDeviceToDeviceShareInvitationToken init]
  -[CKDeviceToDeviceShareInvitationToken isEqual:]
  -[CKDeviceToDeviceShareInvitationToken copyWithZone:]
  -[CKDeviceToDeviceShareInvitationToken encodeWithCoder:]
  -[CKDeviceToDeviceShareInvitationToken initWithCoder:]
  -[CKDeviceToDeviceShareInvitationToken .cxx_destruct]
  -[CKDeviceToDeviceShareInvitationToken CKPropertiesDescription]
  -[CKDeviceToDeviceShareInvitationToken initWithSharingInvitationData:shareURL:]
  -[CKDeviceToDeviceShareInvitationToken sharingInvitationData]
  -[CKDeviceToDeviceShareInvitationToken shareURL]
  -[CKDeviceToDeviceShareInvitationToken initWithSharingInvitationData:]
  -[CKDeviceToDeviceShareInvitationToken setSharingInvitationData:]
  -[CKDeviceToDeviceShareInvitationToken setShareURL:]


CKShare : CKRecord <NSCopying, NSSecureCoding>
 @property  NSMutableSet *addedParticipantIDs
 @property  NSMutableSet *removedParticipantIDs
 @property  NSMutableArray *lastFetchedParticipants
 @property  BOOL encodeAllowsReadOnlyParticipantsToSeeEachOther
 @property  CKContainerID *containerID
 @property  CKRecordID *rootRecordID
 @property  NSMutableArray *allParticipants
 @property  NSData *publicSharingIdentity
 @property  NSData *invitedProtectionData
 @property  NSString *invitedProtectionEtag
 @property  NSString *previousInvitedProtectionEtag
 @property  NSData *publicProtectionData
 @property  NSString *publicProtectionEtag
 @property  NSString *previousPublicProtectionEtag
 @property  NSURL *mutableURL
 @property  BOOL isZoneWideShare
 @property  long long participantVisibility
 @property  BOOL allowsAnonymousPublicAccess
 @property  NSArray *invitedKeysToRemove
 @property  BOOL serializePersonalInfo
 @property  CKShareID *shareID
 @property  BOOL allowsReadOnlyParticipantsToSeeEachOther
 @property  long long publicPermission
 @property  NSURL *URL
 @property  NSArray *participants
 @property  CKShareParticipant *owner
 @property  CKShareParticipant *currentUserParticipant

  // class methods
  +[CKShare supportsSecureCoding]

  // instance methods
  -[CKShare init]
  -[CKShare copyWithZone:]
  -[CKShare initWithCoder:]
  -[CKShare .cxx_destruct]
  -[CKShare owner]
  -[CKShare initWithRecordType:recordID:]
  -[CKShare containerID]
  -[CKShare participants]
  -[CKShare setPublicPermission:]
  -[CKShare publicSharingIdentity]
  -[CKShare setPublicSharingIdentity:]
  -[CKShare initWithRecordZoneID:]
  -[CKShare encodeSystemFieldsWithCoder:]
  -[CKShare initWithRecordType:zoneID:]
  -[CKShare CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKShare setContainerID:]
  -[CKShare CKAssignToContainerWithID:]
  -[CKShare initWithRecordType:]
  -[CKShare copyWithOriginalValues]
  -[CKShare encryptedPublicSharingKey]
  -[CKShare canHostServerURLInfo]
  -[CKShare hasEncryptedData]
  -[CKShare setWantsPublicSharingKey:]
  -[CKShare _stripPersonalInfo]
  -[CKShare shareURL]
  -[CKShare initWithRootRecord:shareID:]
  -[CKShare _commonCKShareInit]
  -[CKShare _addOwnerParticipant]
  -[CKShare _addParticipantBypassingChecks:]
  -[CKShare removedParticipantIDs]
  -[CKShare currentUserParticipant]
  -[CKShare _removePendingPrivateAndAdminParticipants]
  -[CKShare _removeAllParticipants]
  -[CKShare _setPublicPermissionNoSideEffects:]
  -[CKShare setParticipantVisibility:]
  -[CKShare participantVisibility]
  -[CKShare rootRecordID]
  -[CKShare setRootRecordID:]
  -[CKShare allowsAnonymousPublicAccess]
  -[CKShare setAllowsAnonymousPublicAccess:]
  -[CKShare publicPermission]
  -[CKShare setAllParticipants:]
  -[CKShare allParticipants]
  -[CKShare setLastFetchedParticipants:]
  -[CKShare lastFetchedParticipants]
  -[CKShare addedParticipantIDs]
  -[CKShare setAddedParticipantIDs:]
  -[CKShare setRemovedParticipantIDs:]
  -[CKShare invitedKeysToRemove]
  -[CKShare setInvitedKeysToRemove:]
  -[CKShare invitedProtectionData]
  -[CKShare setInvitedProtectionData:]
  -[CKShare invitedProtectionEtag]
  -[CKShare setInvitedProtectionEtag:]
  -[CKShare previousInvitedProtectionEtag]
  -[CKShare setPreviousInvitedProtectionEtag:]
  -[CKShare publicProtectionData]
  -[CKShare setPublicProtectionData:]
  -[CKShare publicProtectionEtag]
  -[CKShare setPublicProtectionEtag:]
  -[CKShare previousPublicProtectionEtag]
  -[CKShare setPreviousPublicProtectionEtag:]
  -[CKShare serializePersonalInfo]
  -[CKShare setSerializePersonalInfo:]
  -[CKShare allowsReadOnlyParticipantsToSeeEachOther]
  -[CKShare isZoneWideShare]
  -[CKShare _knownParticipantEqualToParticipant:]
  -[CKShare _removeParticipantBypassingChecks:]
  -[CKShare _participantArray:containsEquivalentWithPermissionsParticipant:]
  -[CKShare _participantArray:isEquivalentToArray:]
  -[CKShare addedParticipants]
  -[CKShare removedParticipants]
  -[CKShare resetFetchedParticipants]
  -[CKShare registerFetchedParticipant:]
  -[CKShare clearModifiedParticipants]
  -[CKShare addParticipant:]
  -[CKShare encodeAllowsReadOnlyParticipantsToSeeEachOther]
  -[CKShare initWithRootRecord:]
  -[CKShare _initWithShareRecordID:]
  -[CKShare setAllowsReadOnlyParticipantsToSeeEachOther:]
  -[CKShare removeParticipant:]
  -[CKShare updateFromServerShare:]
  -[CKShare _addParticipantEmails:phoneNumbers:asReadWrite:inContainer:completionHandler:]
  -[CKShare _copyWithoutPersonalInfo]
  -[CKShare _getDecryptedShareInContainer:completionHandler:]
  -[CKShare setEncodeAllowsReadOnlyParticipantsToSeeEachOther:]
  -[CKShare shareID]
  -[CKShare setShareID:]


CKBehaviorOptions : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *cachedPrefs
 @property  NSObject<OS_dispatch_queue> *cachedPrefsQueue
 @property  int mcToken
 @property  int ckToken
 @property  BOOL didReadAutomatedDeviceGroup
 @property  NSString *automatedDeviceGroup
 @property  NSUserDefaults *automatedDeviceGroupDefaults

  // class methods
  +[CKBehaviorOptions sharedOptions]

  // instance methods
  -[CKBehaviorOptions dealloc]
  -[CKBehaviorOptions .cxx_destruct]
  -[CKBehaviorOptions _init]
  -[CKBehaviorOptions observeValueForKeyPath:ofObject:change:context:]
  -[CKBehaviorOptions productVersion]
  -[CKBehaviorOptions buildVersion]
  -[CKBehaviorOptions isAppleInternalInstall]
  -[CKBehaviorOptions forceUploadRequestActivitiesToRunImmediately]
  -[CKBehaviorOptions ignoreUploadRequestPushNotifications]
  -[CKBehaviorOptions cachedPrefsQueue]
  -[CKBehaviorOptions cachedPrefs]
  -[CKBehaviorOptions _behaviorOptionForKey:]
  -[CKBehaviorOptions _startListeningForNotifications]
  -[CKBehaviorOptions _getStringOptionLockedForKey:defaultValue:]
  -[CKBehaviorOptions _behaviorContainerOptionForKey:]
  -[CKBehaviorOptions _getIntOptionForKey:defaultValue:]
  -[CKBehaviorOptions _setPref:forKey:]
  -[CKBehaviorOptions _getBoolOptionForKey:defaultValue:]
  -[CKBehaviorOptions _getDoubleOptionForKey:defaultValue:]
  -[CKBehaviorOptions _getStringOptionForKey:defaultValue:]
  -[CKBehaviorOptions _urlForKey:defaultURLString:]
  -[CKBehaviorOptions _getArrayOptionForKey:defaultValue:]
  -[CKBehaviorOptions _buildIsOverridden]
  -[CKBehaviorOptions setDidReadAutomatedDeviceGroup:]
  -[CKBehaviorOptions didReadAutomatedDeviceGroup]
  -[CKBehaviorOptions automatedDeviceGroupDefaults]
  -[CKBehaviorOptions cachedRecordExpiryTime]
  -[CKBehaviorOptions setCachedRecordExpiryTime:]
  -[CKBehaviorOptions recordCacheSizeLimit]
  -[CKBehaviorOptions highPriorityURLDelegates]
  -[CKBehaviorOptions operationTimeout]
  -[CKBehaviorOptions setOperationTimeout:]
  -[CKBehaviorOptions trafficLogMaximumDataSize]
  -[CKBehaviorOptions trafficLogQueueWidth]
  -[CKBehaviorOptions setTrafficLogMaximumDataSize:]
  -[CKBehaviorOptions CKCtlPrompt]
  -[CKBehaviorOptions setCKCtlPrompt:]
  -[CKBehaviorOptions CFNetworkLogging]
  -[CKBehaviorOptions setCFNetworkLogging:]
  -[CKBehaviorOptions disableCaching]
  -[CKBehaviorOptions setDisableCaching:]
  -[CKBehaviorOptions shouldProfileSQL]
  -[CKBehaviorOptions setShouldProfileSQL:]
  -[CKBehaviorOptions compressRequests]
  -[CKBehaviorOptions setCompressRequests:]
  -[CKBehaviorOptions useModTimeInAssetCacheEviction]
  -[CKBehaviorOptions setModTimeInAssetCacheEviction:]
  -[CKBehaviorOptions sendDebugHeader]
  -[CKBehaviorOptions setLogTrafficToTextFile:]
  -[CKBehaviorOptions logTrafficToTextFile]
  -[CKBehaviorOptions setLogTraffic:]
  -[CKBehaviorOptions logTraffic]
  -[CKBehaviorOptions pipelineFetchAllChangesRequests]
  -[CKBehaviorOptions setSendDebugHeader:]
  -[CKBehaviorOptions clientThrottleQueueWidth]
  -[CKBehaviorOptions configBaseURL]
  -[CKBehaviorOptions setConfigBaseURL:]
  -[CKBehaviorOptions setupBaseURL]
  -[CKBehaviorOptions setSetupBaseURL:]
  -[CKBehaviorOptions customCloudDBBaseURL]
  -[CKBehaviorOptions setCustomCloudDBBaseURL:]
  -[CKBehaviorOptions customShareServiceBaseURL]
  -[CKBehaviorOptions setCustomShareServiceBaseURL:]
  -[CKBehaviorOptions customDeviceServiceBaseURL]
  -[CKBehaviorOptions setCustomDeviceServiceBaseURL:]
  -[CKBehaviorOptions customCodeServiceBaseURL]
  -[CKBehaviorOptions setCustomCodeServiceBaseURL:]
  -[CKBehaviorOptions customMetricsServiceBaseURL]
  -[CKBehaviorOptions setCustomMetricsServiceBaseURL:]
  -[CKBehaviorOptions primaryAccountEmailOverride]
  -[CKBehaviorOptions setPrimaryAccountEmailOverride:]
  -[CKBehaviorOptions primaryAccountPasswordOverride]
  -[CKBehaviorOptions setPrimaryAccountPasswordOverride:]
  -[CKBehaviorOptions setTestRunIDHeader:]
  -[CKBehaviorOptions testRunIDHeader]
  -[CKBehaviorOptions otherAccountsWithDefaultValue:]
  -[CKBehaviorOptions evictRecentAssets]
  -[CKBehaviorOptions assetEvictionGracePeriodWithDefaultValue:]
  -[CKBehaviorOptions assetEvictionGracePeriodOnHighWatermarkWithDefaultValue:]
  -[CKBehaviorOptions maxPackageDownloadsPerBatchWithDefaultValue:]
  -[CKBehaviorOptions maxPackageUploadsPerBatchWithDefaultValue:]
  -[CKBehaviorOptions packageGCGracePeriod]
  -[CKBehaviorOptions packageGCPeriod]
  -[CKBehaviorOptions sandboxCloudD]
  -[CKBehaviorOptions PCSCacheSize]
  -[CKBehaviorOptions PCSCacheMinTime]
  -[CKBehaviorOptions PCSRetryCount]
  -[CKBehaviorOptions longlivedOperationThrottlingRetryCount]
  -[CKBehaviorOptions longlivedOperationMaxRetryCount]
  -[CKBehaviorOptions setOptimisticPCS:]
  -[CKBehaviorOptions optimisticPCS]
  -[CKBehaviorOptions setUseEncryption:]
  -[CKBehaviorOptions useEncryption]
  -[CKBehaviorOptions setUseStingray:]
  -[CKBehaviorOptions useStingray]
  -[CKBehaviorOptions setUsePreauth:]
  -[CKBehaviorOptions usePreauth]
  -[CKBehaviorOptions rollRecordPCSMasterKeys]
  -[CKBehaviorOptions setRollRecordPCSMasterKeys:]
  -[CKBehaviorOptions rollRecordMasterKeysOnUnshare]
  -[CKBehaviorOptions setRollRecordMasterKeysOnUnshare:]
  -[CKBehaviorOptions rollZonePCSIdentities]
  -[CKBehaviorOptions setRollZonePCSIdentities:]
  -[CKBehaviorOptions rollZoneSharingKeys]
  -[CKBehaviorOptions setRollZoneSharingKeys:]
  -[CKBehaviorOptions useEnhancedPCSEncryptionContext]
  -[CKBehaviorOptions setUseEnhancedPCSEncryptionContext:]
  -[CKBehaviorOptions containerIDToForceFatalManateeZoneDecryptionFailure]
  -[CKBehaviorOptions setContainerIDToForceFatalManateeZoneDecryptionFailure:]
  -[CKBehaviorOptions maxRecordPCSMasterKeyRolls]
  -[CKBehaviorOptions productName]
  -[CKBehaviorOptions setProductName:]
  -[CKBehaviorOptions setProductVersion:]
  -[CKBehaviorOptions setBuildVersion:]
  -[CKBehaviorOptions flowControlBudget]
  -[CKBehaviorOptions flowControlRegeneration]
  -[CKBehaviorOptions flowControlBudgetOverride]
  -[CKBehaviorOptions flowControlRegenerationOverride]
  -[CKBehaviorOptions maxBatchSize]
  -[CKBehaviorOptions allowExpiredDNSBehavior]
  -[CKBehaviorOptions shouldDecryptRecordsBeforeSave]
  -[CKBehaviorOptions defaultRetryAfter]
  -[CKBehaviorOptions maximumThrottleSeconds]
  -[CKBehaviorOptions maximumQueuedFetchWaitTime]
  -[CKBehaviorOptions maximumWaitAfterFetchRequest]
  -[CKBehaviorOptions publicIdentitiesExpirationTimeout]
  -[CKBehaviorOptions vettedEmailsTestFormat]
  -[CKBehaviorOptions backgroundSessionConnectionPoolLimitWithDefaultValue:]
  -[CKBehaviorOptions enableMMCSMetricsWithDefaultValue:]
  -[CKBehaviorOptions sqlBatchCount]
  -[CKBehaviorOptions setSqlBatchCount:]
  -[CKBehaviorOptions sqlBatchTime]
  -[CKBehaviorOptions setSqlBatchTime:]
  -[CKBehaviorOptions savedErrorCount]
  -[CKBehaviorOptions recentProxiesToSave]
  -[CKBehaviorOptions maxRecentProxyAge]
  -[CKBehaviorOptions shareAcceptorRetrievingDialogDelay]
  -[CKBehaviorOptions shareAcceptorRetrievingDialogMinPeriod]
  -[CKBehaviorOptions automatedDeviceGroup]
  -[CKBehaviorOptions minTTRPromptInterval]
  -[CKBehaviorOptions recordNamesForFakingDecryptionFailure]
  -[CKBehaviorOptions setIgnoreUploadRequestPushNotifications:]
  -[CKBehaviorOptions setForceUploadRequestActivitiesToRunImmediately:]
  -[CKBehaviorOptions deviceCountOverride]
  -[CKBehaviorOptions setDeviceCountOverride:]
  -[CKBehaviorOptions setCachedPrefs:]
  -[CKBehaviorOptions setCachedPrefsQueue:]
  -[CKBehaviorOptions mcToken]
  -[CKBehaviorOptions setMcToken:]
  -[CKBehaviorOptions ckToken]
  -[CKBehaviorOptions setCkToken:]
  -[CKBehaviorOptions setAutomatedDeviceGroup:]
  -[CKBehaviorOptions setAutomatedDeviceGroupDefaults:]


CKPlaceholderOperation : NSOperation /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  NSDate *startDate
 @property  NSString *sectionID
 @property  id context
 @property  NSString *operationID
 @property  @? daemonInvokeBlock
 @property  BOOL finishInvoked
 @property  BOOL isExecuting
 @property  BOOL isFinished

  // instance methods
  -[CKPlaceholderOperation .cxx_destruct]
  -[CKPlaceholderOperation start]
  -[CKPlaceholderOperation main]
  -[CKPlaceholderOperation startDate]
  -[CKPlaceholderOperation isFinished]
  -[CKPlaceholderOperation isExecuting]
  -[CKPlaceholderOperation isConcurrent]
  -[CKPlaceholderOperation context]
  -[CKPlaceholderOperation finish]
  -[CKPlaceholderOperation setContext:]
  -[CKPlaceholderOperation setStartDate:]
  -[CKPlaceholderOperation setIsFinished:]
  -[CKPlaceholderOperation sectionID]
  -[CKPlaceholderOperation setSectionID:]
  -[CKPlaceholderOperation operationID]
  -[CKPlaceholderOperation CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKPlaceholderOperation setIsExecuting:]
  -[CKPlaceholderOperation _setIsExecuting:]
  -[CKPlaceholderOperation _setIsFinished:]
  -[CKPlaceholderOperation initWithOperation:daemonInvocationBlock:]
  -[CKPlaceholderOperation daemonInvokeBlock]
  -[CKPlaceholderOperation finishInvoked]
  -[CKPlaceholderOperation setFinishInvoked:]


CKOperation : NSOperation /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  NSObject<OS_dispatch_source> *timeoutSource
 @property  BOOL isOutstandingOperation
 @property  BOOL usesBackgroundSession
 @property  NSMutableArray *savedRequestUUIDs
 @property  NSMutableDictionary *savedResponseHTTPHeadersByRequestUUID
 @property  NSMutableDictionary *savedW3CNavigationTimingByRequestUUID
 @property  CKEventMetric *operationMetric
 @property  BOOL runningDiscretionaryOperation
 @property  BOOL failedToScheduleDiscretionaryOperation
 @property  ^{_xpc_activity_eligibility_changed_handler_s=} xpcActivityEligibilityChangedHandler
 @property  unsigned long duetPreClearedMode
 @property  unsigned long discretionaryWhenBackgroundedState
 @property  unsigned long systemScheduler
 @property  CKDiscretionaryOptions *discretionaryOptions
 @property  NSError *cancelError
 @property  CKOperationConfiguration *resolvedConfiguration
 @property  CKPlaceholderOperation *placeholderOperation
 @property  NSString *operationID
 @property  BOOL isExecuting
 @property  BOOL isFinished
 @property  BOOL isFinishingOnCallbackQueue
 @property  NSError *error
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  BOOL clouddConnectionInterrupted
 @property  BOOL isDiscretionarySuspended
 @property  NSString *sectionID
 @property  NSString *parentSectionID
 @property  id context
 @property  CKOperationInfo *operationInfo
 @property  CKOperationMetrics *metrics
 @property  @? requestCompletedBlock
 @property  BOOL queueHasStarted
 @property  NSString *sourceApplicationBundleIdentifier
 @property  NSString *sourceApplicationSecondaryIdentifier
 @property  BOOL preferAnonymousRequests
 @property  BOOL allowsBackgroundNetworking
 @property  NSDictionary *additionalRequestHTTPHeaders
 @property  NSArray *requestUUIDs
 @property  NSDictionary *responseHTTPHeadersByRequestUUID
 @property  NSDictionary *w3cNavigationTimingByRequestUUID
 @property  NSString *deviceIdentifier
 @property  CKOperationMMCSRequestOptions *MMCSRequestOptions
 @property  NSObject<OS_os_activity> *osActivity
 @property  id clientVoucher
 @property  NSString *flowControlKey
 @property  CKOperationConfiguration *configuration
 @property  CKOperationGroup *group
 @property  @? longLivedOperationWasPersistedBlock

  // instance methods
  -[CKOperation init]
  -[CKOperation dealloc]
  -[CKOperation container]
  -[CKOperation setContainer:]
  -[CKOperation .cxx_destruct]
  -[CKOperation setGroup:]
  -[CKOperation error]
  -[CKOperation cancel]
  -[CKOperation start]
  -[CKOperation main]
  -[CKOperation setError:]
  -[CKOperation qualityOfService]
  -[CKOperation setQualityOfService:]
  -[CKOperation isFinished]
  -[CKOperation isExecuting]
  -[CKOperation isConcurrent]
  -[CKOperation setCompletionBlock:]
  -[CKOperation context]
  -[CKOperation callbackQueue]
  -[CKOperation setTimeoutIntervalForResource:]
  -[CKOperation _start]
  -[CKOperation deviceIdentifier]
  -[CKOperation finishWithError:]
  -[CKOperation setDeviceIdentifier:]
  -[CKOperation setAllowsCellularAccess:]
  -[CKOperation setConfiguration:]
  -[CKOperation group]
  -[CKOperation metrics]
  -[CKOperation configuration]
  -[CKOperation timeoutIntervalForResource]
  -[CKOperation setTimeoutIntervalForRequest:]
  -[CKOperation setCallbackQueue:]
  -[CKOperation setIsFinished:]
  -[CKOperation setMetrics:]
  -[CKOperation cancelWithError:]
  -[CKOperation allowsCellularAccess]
  -[CKOperation timeoutIntervalForRequest]
  -[CKOperation sectionID]
  -[CKOperation setSectionID:]
  -[CKOperation operationID]
  -[CKOperation CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKOperation queueHasStarted]
  -[CKOperation fillOutOperationInfo:]
  -[CKOperation fillFromOperationInfo:]
  -[CKOperation hasCKOperationCallbacksSet]
  -[CKOperation CKOperationShouldRun:]
  -[CKOperation daemon]
  -[CKOperation operationInfo]
  -[CKOperation _finishOnCallbackQueueWithError:]
  -[CKOperation activityCreate]
  -[CKOperation performCKOperation]
  -[CKOperation _handleProgressCallback:]
  -[CKOperation resolvedConfiguration]
  -[CKOperation isLongLived]
  -[CKOperation operationInfoClass]
  -[CKOperation sourceApplicationBundleIdentifier]
  -[CKOperation setSourceApplicationBundleIdentifier:]
  -[CKOperation sourceApplicationSecondaryIdentifier]
  -[CKOperation discretionaryOptions]
  -[CKOperation setSourceApplicationSecondaryIdentifier:]
  -[CKOperation operationClass]
  -[CKOperation _handleCompletionCallback:]
  -[CKOperation flowControlKey]
  -[CKOperation setIsExecuting:]
  -[CKOperation _setIsExecuting:]
  -[CKOperation _setIsFinished:]
  -[CKOperation setQueueHasStarted:]
  -[CKOperation isOutstandingOperation]
  -[CKOperation osActivity]
  -[CKOperation cancelError]
  -[CKOperation operationMetric]
  -[CKOperation cancelWithUnderlyingError:]
  -[CKOperation setSystemScheduler:]
  -[CKOperation setDuetPreClearedMode:]
  -[CKOperation setXpcActivityEligibilityChangedHandler:]
  -[CKOperation _wantsFlowControl]
  -[CKOperation _handleProgressCallback:completion:]
  -[CKOperation requestCompletedBlock]
  -[CKOperation setSavedRequestUUIDs:]
  -[CKOperation setSavedResponseHTTPHeadersByRequestUUID:]
  -[CKOperation setSavedW3CNavigationTimingByRequestUUID:]
  -[CKOperation savedRequestUUIDs]
  -[CKOperation savedResponseHTTPHeadersByRequestUUID]
  -[CKOperation savedW3CNavigationTimingByRequestUUID]
  -[CKOperation setRequestCompletedBlock:]
  -[CKOperation _handleStatisticsCallback:]
  -[CKOperation _handleCheckpointCallback:]
  -[CKOperation failedToScheduleDiscretionaryOperation]
  -[CKOperation runningDiscretionaryOperation]
  -[CKOperation setRunningDiscretionaryOperation:]
  -[CKOperation setPlaceholderOperation:]
  -[CKOperation duetPreClearedMode]
  -[CKOperation usesBackgroundSession]
  -[CKOperation _handleDiscretionarySuspensionCallback]
  -[CKOperation setDiscretionaryWhenBackgroundedState:]
  -[CKOperation setFailedToScheduleDiscretionaryOperation:]
  -[CKOperation placeholderOperation]
  -[CKOperation setOperationID:]
  -[CKOperation discretionaryWhenBackgroundedState]
  -[CKOperation systemScheduler]
  -[CKOperation setIsOutstandingOperation:]
  -[CKOperation MMCSRequestOptions]
  -[CKOperation setMMCSRequestOptions:]
  -[CKOperation setLongLived:]
  -[CKOperation parentSectionID]
  -[CKOperation setCancelError:]
  -[CKOperation _cancelDaemonOperation]
  -[CKOperation _finishInternalOnCallbackQueueWithError:]
  -[CKOperation setIsDiscretionarySuspended:]
  -[CKOperation timeoutSource]
  -[CKOperation setTimeoutSource:]
  -[CKOperation _uninstallTimeoutSource]
  -[CKOperation _findBestThrottleError:]
  -[CKOperation _installTimeoutSource]
  -[CKOperation _handleRemoteProxyFailureWithError:]
  -[CKOperation longLivedOperationWasPersistedBlock]
  -[CKOperation setClouddConnectionInterrupted:]
  -[CKOperation processOperationResult:]
  -[CKOperation setLongLivedOperationWasPersistedBlock:]
  -[CKOperation preferAnonymousRequests]
  -[CKOperation setPreferAnonymousRequests:]
  -[CKOperation allowsBackgroundNetworking]
  -[CKOperation setAllowsBackgroundNetworking:]
  -[CKOperation additionalRequestHTTPHeaders]
  -[CKOperation setAdditionalRequestHTTPHeaders:]
  -[CKOperation requestUUIDs]
  -[CKOperation responseHTTPHeadersByRequestUUID]
  -[CKOperation w3cNavigationTimingByRequestUUID]
  -[CKOperation setUsesBackgroundSession:]
  -[CKOperation xpcActivityEligibilityChangedHandler]
  -[CKOperation isFinishingOnCallbackQueue]
  -[CKOperation clouddConnectionInterrupted]
  -[CKOperation isDiscretionarySuspended]
  -[CKOperation setOsActivity:]
  -[CKOperation clientVoucher]
  -[CKOperation setClientVoucher:]


CKOperationConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  BOOL hasContainer
 @property  BOOL hasAllowsCellularAccess
 @property  BOOL hasLongLived
 @property  BOOL hasTimeoutIntervalForRequest
 @property  BOOL hasTimeoutIntervalForResource
 @property  BOOL hasAutomaticallyRetryNetworkFailures
 @property  BOOL hasDiscretionaryNetworkBehavior
 @property  BOOL hasXPCActivity
 @property  BOOL hasXPCActivityAutomaticallyDefer
 @property  BOOL hasSchedulerActivity
 @property  BOOL hasDiscretionarySchedulingForEntireOperation
 @property  BOOL hasPreferAnonymousRequests
 @property  BOOL hasAllowsBackgroundNetworking
 @property  BOOL hasSourceApplicationBundleIdentifier
 @property  BOOL hasSourceApplicationSecondaryIdentifier
 @property  BOOL hasAdditionalRequestHTTPHeaders
 @property  BOOL hasShouldSkipZonePCSUpdate
 @property  BOOL hasIsCloudKitSupportOperation
 @property  BOOL xpcActivityAutomaticallyDefer
 @property  BOOL discretionarySchedulingForEntireOperation
 @property  BOOL automaticallyRetryNetworkFailures
 @property  NSObject<OS_xpc_object> *xpcActivity
 @property  CKSchedulerActivity *schedulerActivity
 @property  unsigned long discretionaryNetworkBehavior
 @property  BOOL preferAnonymousRequests
 @property  NSString *sourceApplicationBundleIdentifier
 @property  NSString *sourceApplicationSecondaryIdentifier
 @property  NSDictionary *additionalRequestHTTPHeaders
 @property  BOOL hasQualityOfService
 @property  BOOL shouldSkipZonePCSUpdate
 @property  BOOL allowsBackgroundNetworking
 @property  BOOL isCloudKitSupportOperation
 @property  CKContainer *container
 @property  long long qualityOfService
 @property  BOOL allowsCellularAccess
 @property  BOOL longLived
 @property  double timeoutIntervalForRequest
 @property  double timeoutIntervalForResource

  // class methods
  +[CKOperationConfiguration supportsSecureCoding]

  // instance methods
  -[CKOperationConfiguration init]
  -[CKOperationConfiguration copyWithZone:]
  -[CKOperationConfiguration container]
  -[CKOperationConfiguration setContainer:]
  -[CKOperationConfiguration encodeWithCoder:]
  -[CKOperationConfiguration initWithCoder:]
  -[CKOperationConfiguration .cxx_destruct]
  -[CKOperationConfiguration qualityOfService]
  -[CKOperationConfiguration setQualityOfService:]
  -[CKOperationConfiguration setTimeoutIntervalForResource:]
  -[CKOperationConfiguration xpcActivity]
  -[CKOperationConfiguration setXpcActivity:]
  -[CKOperationConfiguration setAutomaticallyRetryNetworkFailures:]
  -[CKOperationConfiguration setAllowsCellularAccess:]
  -[CKOperationConfiguration setDiscretionaryNetworkBehavior:]
  -[CKOperationConfiguration timeoutIntervalForResource]
  -[CKOperationConfiguration setTimeoutIntervalForRequest:]
  -[CKOperationConfiguration allowsCellularAccess]
  -[CKOperationConfiguration timeoutIntervalForRequest]
  -[CKOperationConfiguration CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKOperationConfiguration isLongLived]
  -[CKOperationConfiguration sourceApplicationBundleIdentifier]
  -[CKOperationConfiguration setSourceApplicationBundleIdentifier:]
  -[CKOperationConfiguration sourceApplicationSecondaryIdentifier]
  -[CKOperationConfiguration setSourceApplicationSecondaryIdentifier:]
  -[CKOperationConfiguration setSchedulerActivity:]
  -[CKOperationConfiguration discretionaryNetworkBehavior]
  -[CKOperationConfiguration xpcActivityAutomaticallyDefer]
  -[CKOperationConfiguration discretionarySchedulingForEntireOperation]
  -[CKOperationConfiguration automaticallyRetryNetworkFailures]
  -[CKOperationConfiguration setLongLived:]
  -[CKOperationConfiguration resolveAgainstGenericConfiguration:]
  -[CKOperationConfiguration hasQualityOfService]
  -[CKOperationConfiguration preferAnonymousRequests]
  -[CKOperationConfiguration setPreferAnonymousRequests:]
  -[CKOperationConfiguration allowsBackgroundNetworking]
  -[CKOperationConfiguration setAllowsBackgroundNetworking:]
  -[CKOperationConfiguration additionalRequestHTTPHeaders]
  -[CKOperationConfiguration setAdditionalRequestHTTPHeaders:]
  -[CKOperationConfiguration hasContainer]
  -[CKOperationConfiguration setQualityOfServiceWithoutQoSChecks:]
  -[CKOperationConfiguration hasAllowsCellularAccess]
  -[CKOperationConfiguration hasLongLived]
  -[CKOperationConfiguration hasTimeoutIntervalForRequest]
  -[CKOperationConfiguration hasTimeoutIntervalForResource]
  -[CKOperationConfiguration hasAutomaticallyRetryNetworkFailures]
  -[CKOperationConfiguration hasDiscretionaryNetworkBehavior]
  -[CKOperationConfiguration hasSchedulerActivity]
  -[CKOperationConfiguration schedulerActivity]
  -[CKOperationConfiguration hasXPCActivity]
  -[CKOperationConfiguration hasXPCActivityAutomaticallyDefer]
  -[CKOperationConfiguration setXpcActivityAutomaticallyDefer:]
  -[CKOperationConfiguration hasDiscretionarySchedulingForEntireOperation]
  -[CKOperationConfiguration setDiscretionarySchedulingForEntireOperation:]
  -[CKOperationConfiguration hasPreferAnonymousRequests]
  -[CKOperationConfiguration hasAllowsBackgroundNetworking]
  -[CKOperationConfiguration hasSourceApplicationBundleIdentifier]
  -[CKOperationConfiguration hasSourceApplicationSecondaryIdentifier]
  -[CKOperationConfiguration hasAdditionalRequestHTTPHeaders]
  -[CKOperationConfiguration hasShouldSkipZonePCSUpdate]
  -[CKOperationConfiguration shouldSkipZonePCSUpdate]
  -[CKOperationConfiguration setShouldSkipZonePCSUpdate:]
  -[CKOperationConfiguration isCloudKitSupportOperation]
  -[CKOperationConfiguration hasIsCloudKitSupportOperation]
  -[CKOperationConfiguration setIsCloudKitSupportOperation:]
  -[CKOperationConfiguration setHasContainer:]
  -[CKOperationConfiguration setHasQualityOfService:]
  -[CKOperationConfiguration setHasAllowsCellularAccess:]
  -[CKOperationConfiguration setHasLongLived:]
  -[CKOperationConfiguration setHasTimeoutIntervalForRequest:]
  -[CKOperationConfiguration setHasTimeoutIntervalForResource:]
  -[CKOperationConfiguration setHasAutomaticallyRetryNetworkFailures:]
  -[CKOperationConfiguration setHasDiscretionaryNetworkBehavior:]
  -[CKOperationConfiguration setHasXPCActivity:]
  -[CKOperationConfiguration setHasXPCActivityAutomaticallyDefer:]
  -[CKOperationConfiguration setHasSchedulerActivity:]
  -[CKOperationConfiguration setHasDiscretionarySchedulingForEntireOperation:]
  -[CKOperationConfiguration setHasPreferAnonymousRequests:]
  -[CKOperationConfiguration setHasShouldSkipZonePCSUpdate:]
  -[CKOperationConfiguration setHasIsCloudKitSupportOperation:]
  -[CKOperationConfiguration setHasAllowsBackgroundNetworking:]
  -[CKOperationConfiguration setHasSourceApplicationBundleIdentifier:]
  -[CKOperationConfiguration setHasSourceApplicationSecondaryIdentifier:]
  -[CKOperationConfiguration setHasAdditionalRequestHTTPHeaders:]
  -[CKOperationConfiguration setAutomaticallyRetryNetworkFailuresIfNotSet:]


CKOperationInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  unsigned long duetPreClearedMode
 @property  unsigned long discretionaryWhenBackgroundedState
 @property  unsigned long systemScheduler
 @property  NSString *operationID
 @property  NSString *name
 @property  NSString *parentSectionID
 @property  BOOL isLongLived
 @property  BOOL isOutstandingOperation
 @property  CKContainerSetupInfo *setupInfo
 @property  NSString *operationClass
 @property  NSString *deviceIdentifier
 @property  CKOperationMMCSRequestOptions *MMCSRequestOptions
 @property  CKOperationGroup *group
 @property  CKOperationConfiguration *perOpConfiguration
 @property  unsigned int clientSDKVersion
 @property  id parentOperation
 @property  BOOL allowsCellularAccess
 @property  long long qualityOfService
 @property  NSString *sourceApplicationBundleIdentifier
 @property  NSString *sourceApplicationSecondaryIdentifier
 @property  BOOL automaticallyRetryNetworkFailures
 @property  unsigned long discretionaryNetworkBehavior
 @property  BOOL preferAnonymousRequests
 @property  BOOL allowsBackgroundNetworking
 @property  double timeoutIntervalForRequest
 @property  double timeoutIntervalForResource
 @property  NSDictionary *additionalRequestHTTPHeaders
 @property  NSString *authPromptReason
 @property  BOOL shouldSkipZonePCSUpdate
 @property  BOOL isCloudKitSupportOperation
 @property  BOOL wantsRequestStatistics
 @property  CKOperationConfiguration *resolvedConfiguration

  // class methods
  +[CKOperationInfo supportsSecureCoding]

  // instance methods
  -[CKOperationInfo init]
  -[CKOperationInfo name]
  -[CKOperationInfo copyWithZone:]
  -[CKOperationInfo encodeWithCoder:]
  -[CKOperationInfo initWithCoder:]
  -[CKOperationInfo .cxx_destruct]
  -[CKOperationInfo setName:]
  -[CKOperationInfo setGroup:]
  -[CKOperationInfo qualityOfService]
  -[CKOperationInfo deviceIdentifier]
  -[CKOperationInfo setDeviceIdentifier:]
  -[CKOperationInfo group]
  -[CKOperationInfo timeoutIntervalForResource]
  -[CKOperationInfo allowsCellularAccess]
  -[CKOperationInfo timeoutIntervalForRequest]
  -[CKOperationInfo setupInfo]
  -[CKOperationInfo operationID]
  -[CKOperationInfo resolvedConfiguration]
  -[CKOperationInfo isLongLived]
  -[CKOperationInfo sourceApplicationBundleIdentifier]
  -[CKOperationInfo clientSDKVersion]
  -[CKOperationInfo setClientSDKVersion:]
  -[CKOperationInfo sourceApplicationSecondaryIdentifier]
  -[CKOperationInfo perOpConfiguration]
  -[CKOperationInfo operationClass]
  -[CKOperationInfo discretionaryNetworkBehavior]
  -[CKOperationInfo isOutstandingOperation]
  -[CKOperationInfo setSystemScheduler:]
  -[CKOperationInfo setDuetPreClearedMode:]
  -[CKOperationInfo duetPreClearedMode]
  -[CKOperationInfo automaticallyRetryNetworkFailures]
  -[CKOperationInfo setDiscretionaryWhenBackgroundedState:]
  -[CKOperationInfo setPerOpConfiguration:]
  -[CKOperationInfo setOperationID:]
  -[CKOperationInfo discretionaryWhenBackgroundedState]
  -[CKOperationInfo systemScheduler]
  -[CKOperationInfo setIsLongLived:]
  -[CKOperationInfo setParentSectionID:]
  -[CKOperationInfo setOperationClass:]
  -[CKOperationInfo setIsOutstandingOperation:]
  -[CKOperationInfo MMCSRequestOptions]
  -[CKOperationInfo setMMCSRequestOptions:]
  -[CKOperationInfo setWantsRequestStatistics:]
  -[CKOperationInfo setSetupInfo:]
  -[CKOperationInfo parentSectionID]
  -[CKOperationInfo preferAnonymousRequests]
  -[CKOperationInfo allowsBackgroundNetworking]
  -[CKOperationInfo additionalRequestHTTPHeaders]
  -[CKOperationInfo shouldSkipZonePCSUpdate]
  -[CKOperationInfo isCloudKitSupportOperation]
  -[CKOperationInfo parentOperation]
  -[CKOperationInfo setParentOperation:]
  -[CKOperationInfo wantsRequestStatistics]
  -[CKOperationInfo authPromptReason]
  -[CKOperationInfo takeValuesFrom:]


CKOperationResult : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *operationID
 @property  NSError *error
 @property  CKOperationMetrics *metrics

  // class methods
  +[CKOperationResult supportsSecureCoding]

  // instance methods
  -[CKOperationResult encodeWithCoder:]
  -[CKOperationResult initWithCoder:]
  -[CKOperationResult .cxx_destruct]
  -[CKOperationResult error]
  -[CKOperationResult setError:]
  -[CKOperationResult metrics]
  -[CKOperationResult setMetrics:]
  -[CKOperationResult operationID]
  -[CKOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKOperationResult setOperationID:]


CKOperationMMCSRequestOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  BOOL resumableContainerLimpMode
 @property  BOOL chunkingLibraryCorruptionMode

  // class methods
  +[CKOperationMMCSRequestOptions supportsSecureCoding]

  // instance methods
  -[CKOperationMMCSRequestOptions encodeWithCoder:]
  -[CKOperationMMCSRequestOptions initWithCoder:]
  -[CKOperationMMCSRequestOptions resumableContainerLimpMode]
  -[CKOperationMMCSRequestOptions setResumableContainerLimpMode:]
  -[CKOperationMMCSRequestOptions chunkingLibraryCorruptionMode]
  -[CKOperationMMCSRequestOptions setChunkingLibraryCorruptionMode:]


CKDatabaseOperation : CKOperation
 @property  CKDatabase *database

  // instance methods
  -[CKDatabaseOperation .cxx_destruct]
  -[CKDatabaseOperation setDatabase:]
  -[CKDatabaseOperation database]
  -[CKDatabaseOperation fillOutOperationInfo:]
  -[CKDatabaseOperation fillFromOperationInfo:]
  -[CKDatabaseOperation CKOperationShouldRun:]
  -[CKDatabaseOperation flowControlKey]


CKDatabaseOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  long long databaseScope

  // class methods
  +[CKDatabaseOperationInfo supportsSecureCoding]

  // instance methods
  -[CKDatabaseOperationInfo encodeWithCoder:]
  -[CKDatabaseOperationInfo initWithCoder:]
  -[CKDatabaseOperationInfo databaseScope]
  -[CKDatabaseOperationInfo setDatabaseScope:]
  -[CKDatabaseOperationInfo activityCreate]
  -[CKDatabaseOperationInfo takeValuesFrom:]


CKObjCClass : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *propertiesByName
 @property  NSArray *sortedProperties
 @property  Class handle
 @property  NSString *name

  // class methods
  +[CKObjCClass classForHandle:]
  +[CKObjCClass classForObject:]

  // instance methods
  -[CKObjCClass name]
  -[CKObjCClass .cxx_destruct]
  -[CKObjCClass handle]
  -[CKObjCClass propertiesByName]
  -[CKObjCClass initWithHandle:]
  -[CKObjCClass propertyForName:]
  -[CKObjCClass allProperties]
  -[CKObjCClass sortedProperties]


CKAssetRepairScheduler : NSObject /usr/lib/libSystem.B.dylib
 @property  CKContainer *container
 @property  CKUploadRequestConfiguration *repairContainerOverrides
 @property  NSURL *temporaryAssetDirectory
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSOperationQueue *requestOperationQueue
 @property  NSOperationQueue *uploadOperationQueue
 @property  NSObject<OS_dispatch_source> *uploadPendingRequestTimer
 @property  NSObject<OS_dispatch_source> *uploadSuspensionTimer
 @property  NSMutableDictionary *remainingAssetsToRequestCallbacks
 @property  NSMutableDictionary *assetCache
 @property  NSSet *remainingAssets
 @property  NSSet *confirmedAvailableAssets
 @property  NSMutableSet *confirmedMissingAssets
 @property  NSMutableSet *assetsBeingRequested
 @property  NSMutableSet *assetsBeingUploaded
 @property  NSMutableDictionary *retryCountForAssets
 @property  <CKAssetRepairSchedulerDelegate> *delegate

  // class methods
  +[CKAssetRepairScheduler repairBatchSizeLimit]
  +[CKAssetRepairScheduler assetSizeEstimate]
  +[CKAssetRepairScheduler nameForEvent:]
  +[CKAssetRepairScheduler estimatedSizeForAssetOrPackage:]
  +[CKAssetRepairScheduler repairBatchCountLimit]
  +[CKAssetRepairScheduler requestTimeout]
  +[CKAssetRepairScheduler cacheCountLimit]
  +[CKAssetRepairScheduler cacheSizeLimit]
  +[CKAssetRepairScheduler defaultSuspensionTime]
  +[CKAssetRepairScheduler repairRetryCount]
  +[CKAssetRepairScheduler canCopyFromFileURL:toDirectoryURL:]
  +[CKAssetRepairScheduler packageSizeEstimate]
  +[CKAssetRepairScheduler remainingCapacityAtURL:error:]
  +[CKAssetRepairScheduler diskSpaceBuffer]

  // instance methods
  -[CKAssetRepairScheduler dealloc]
  -[CKAssetRepairScheduler container]
  -[CKAssetRepairScheduler setContainer:]
  -[CKAssetRepairScheduler delegate]
  -[CKAssetRepairScheduler setDelegate:]
  -[CKAssetRepairScheduler .cxx_destruct]
  -[CKAssetRepairScheduler cancelAllOperations]
  -[CKAssetRepairScheduler callbackQueue]
  -[CKAssetRepairScheduler setCallbackQueue:]
  -[CKAssetRepairScheduler initWithContainer:repairContainerOverrides:]
  -[CKAssetRepairScheduler repairContainerOverrides]
  -[CKAssetRepairScheduler setRepairContainerOverrides:]
  -[CKAssetRepairScheduler removeUploadRequestWithRecordID:]
  -[CKAssetRepairScheduler hasPendingWork]
  -[CKAssetRepairScheduler addUploadRequestsWithMetadata:requestBlocks:]
  -[CKAssetRepairScheduler clearAssetCache]
  -[CKAssetRepairScheduler internalQueue]
  -[CKAssetRepairScheduler uploadOperationQueue]
  -[CKAssetRepairScheduler remainingAssetsToRequestCallbacks]
  -[CKAssetRepairScheduler tickle]
  -[CKAssetRepairScheduler remainingAssets]
  -[CKAssetRepairScheduler allRemainingRequestableAssets]
  -[CKAssetRepairScheduler retryCountForAssets]
  -[CKAssetRepairScheduler assetsBeingRequested]
  -[CKAssetRepairScheduler requestOperationQueue]
  -[CKAssetRepairScheduler assetsBeingUploaded]
  -[CKAssetRepairScheduler assetCache]
  -[CKAssetRepairScheduler respondToEvent:withObject:]
  -[CKAssetRepairScheduler uploadPendingRequestTimer]
  -[CKAssetRepairScheduler setUploadPendingRequestTimer:]
  -[CKAssetRepairScheduler allRemainingUploadableAssets]
  -[CKAssetRepairScheduler cacheSize]
  -[CKAssetRepairScheduler cacheCount]
  -[CKAssetRepairScheduler scheduleRequestsWithMaxCount:]
  -[CKAssetRepairScheduler scheduleUploadBatch]
  -[CKAssetRepairScheduler uploadSuspensionTimer]
  -[CKAssetRepairScheduler setUploadSuspensionTimer:]
  -[CKAssetRepairScheduler confirmedMissingAssets]
  -[CKAssetRepairScheduler scheduleClearAssetCache]
  -[CKAssetRepairScheduler cacheAsset:withMetadata:]
  -[CKAssetRepairScheduler removeAssetFromCacheWithMetadata:]
  -[CKAssetRepairScheduler temporaryAssetDirectory]
  -[CKAssetRepairScheduler clonedAsset:withError:]
  -[CKAssetRepairScheduler confirmedAvailableAssets]
  -[CKAssetRepairScheduler setTemporaryAssetDirectory:]
  -[CKAssetRepairScheduler setInternalQueue:]
  -[CKAssetRepairScheduler setRequestOperationQueue:]
  -[CKAssetRepairScheduler setUploadOperationQueue:]
  -[CKAssetRepairScheduler setRemainingAssetsToRequestCallbacks:]
  -[CKAssetRepairScheduler setAssetCache:]
  -[CKAssetRepairScheduler setConfirmedMissingAssets:]
  -[CKAssetRepairScheduler setAssetsBeingRequested:]
  -[CKAssetRepairScheduler setAssetsBeingUploaded:]
  -[CKAssetRepairScheduler setRetryCountForAssets:]


CKRequestAssetOperation : NSOperation /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  CKUploadRequestMetadata *metadata
 @property  @? requestCallback
 @property  long long state
 @property  @? assetRequestCompletionBlock

  // instance methods
  -[CKRequestAssetOperation .cxx_destruct]
  -[CKRequestAssetOperation start]
  -[CKRequestAssetOperation isFinished]
  -[CKRequestAssetOperation isExecuting]
  -[CKRequestAssetOperation isAsynchronous]
  -[CKRequestAssetOperation state]
  -[CKRequestAssetOperation setState:]
  -[CKRequestAssetOperation setMetadata:]
  -[CKRequestAssetOperation metadata]
  -[CKRequestAssetOperation initWithAssetMetadata:requestCallback:]
  -[CKRequestAssetOperation setAssetRequestCompletionBlock:]
  -[CKRequestAssetOperation requestCallback]
  -[CKRequestAssetOperation assetRequestCompletionBlock]
  -[CKRequestAssetOperation setRequestCallback:]


CKQueryOperation : CKDatabaseOperation
 @property  CKQueryCursor *resultsCursor
 @property  BOOL shouldFetchAssetContent
 @property  BOOL fetchAllResults
 @property  NSDictionary *assetTransferOptionsByKey
 @property  @? queryCursorFetchedBlock
 @property  CKQuery *query
 @property  CKQueryCursor *cursor
 @property  CKRecordZoneID *zoneID
 @property  unsigned long resultsLimit
 @property  NSArray *desiredKeys
 @property  @? recordFetchedBlock
 @property  @? queryCompletionBlock

  // instance methods
  -[CKQueryOperation init]
  -[CKQueryOperation query]
  -[CKQueryOperation .cxx_destruct]
  -[CKQueryOperation cursor]
  -[CKQueryOperation setQuery:]
  -[CKQueryOperation zoneID]
  -[CKQueryOperation initWithQuery:]
  -[CKQueryOperation setResultsLimit:]
  -[CKQueryOperation setZoneID:]
  -[CKQueryOperation setRecordFetchedBlock:]
  -[CKQueryOperation setQueryCompletionBlock:]
  -[CKQueryOperation setDesiredKeys:]
  -[CKQueryOperation setCursor:]
  -[CKQueryOperation fillOutOperationInfo:]
  -[CKQueryOperation fillFromOperationInfo:]
  -[CKQueryOperation hasCKOperationCallbacksSet]
  -[CKQueryOperation CKOperationShouldRun:]
  -[CKQueryOperation _finishOnCallbackQueueWithError:]
  -[CKQueryOperation activityCreate]
  -[CKQueryOperation performCKOperation]
  -[CKQueryOperation _handleProgressCallback:]
  -[CKQueryOperation resultsLimit]
  -[CKQueryOperation _handleCompletionCallback:]
  -[CKQueryOperation recordFetchedBlock]
  -[CKQueryOperation shouldFetchAssetContent]
  -[CKQueryOperation setShouldFetchAssetContent:]
  -[CKQueryOperation queryCursorFetchedBlock]
  -[CKQueryOperation queryCompletionBlock]
  -[CKQueryOperation setResultsCursor:]
  -[CKQueryOperation resultsCursor]
  -[CKQueryOperation setQueryCursorFetchedBlock:]
  -[CKQueryOperation desiredKeys]
  -[CKQueryOperation assetTransferOptionsByKey]
  -[CKQueryOperation setAssetTransferOptionsByKey:]
  -[CKQueryOperation fetchAllResults]
  -[CKQueryOperation setFetchAllResults:]
  -[CKQueryOperation initWithCursor:]


CKQueryOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  CKQuery *query
 @property  CKRecordZoneID *zoneID
 @property  CKQueryCursor *cursor
 @property  unsigned long resultsLimit
 @property  NSArray *desiredKeys
 @property  BOOL shouldFetchAssetContent
 @property  BOOL fetchAllResults
 @property  NSDictionary *assetTransferOptionsByKey

  // class methods
  +[CKQueryOperationInfo supportsSecureCoding]

  // instance methods
  -[CKQueryOperationInfo encodeWithCoder:]
  -[CKQueryOperationInfo initWithCoder:]
  -[CKQueryOperationInfo query]
  -[CKQueryOperationInfo .cxx_destruct]
  -[CKQueryOperationInfo cursor]
  -[CKQueryOperationInfo setQuery:]
  -[CKQueryOperationInfo zoneID]
  -[CKQueryOperationInfo setResultsLimit:]
  -[CKQueryOperationInfo setZoneID:]
  -[CKQueryOperationInfo setDesiredKeys:]
  -[CKQueryOperationInfo setCursor:]
  -[CKQueryOperationInfo resultsLimit]
  -[CKQueryOperationInfo shouldFetchAssetContent]
  -[CKQueryOperationInfo setShouldFetchAssetContent:]
  -[CKQueryOperationInfo desiredKeys]
  -[CKQueryOperationInfo assetTransferOptionsByKey]
  -[CKQueryOperationInfo setAssetTransferOptionsByKey:]
  -[CKQueryOperationInfo fetchAllResults]
  -[CKQueryOperationInfo setFetchAllResults:]


CKQueryOperationResult : CKOperationResult <NSSecureCoding>
 @property  CKQueryCursor *cursor

  // class methods
  +[CKQueryOperationResult supportsSecureCoding]

  // instance methods
  -[CKQueryOperationResult encodeWithCoder:]
  -[CKQueryOperationResult initWithCoder:]
  -[CKQueryOperationResult .cxx_destruct]
  -[CKQueryOperationResult cursor]
  -[CKQueryOperationResult setCursor:]
  -[CKQueryOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]


CKQueryCursor : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSData *data
 @property  CKRecordZoneID *zoneID

  // class methods
  +[CKQueryCursor supportsSecureCoding]

  // instance methods
  -[CKQueryCursor init]
  -[CKQueryCursor copyWithZone:]
  -[CKQueryCursor encodeWithCoder:]
  -[CKQueryCursor initWithCoder:]
  -[CKQueryCursor .cxx_destruct]
  -[CKQueryCursor data]
  -[CKQueryCursor setData:]
  -[CKQueryCursor zoneID]
  -[CKQueryCursor setZoneID:]
  -[CKQueryCursor CKPropertiesDescription]
  -[CKQueryCursor initWithData:zoneID:]


CKUploadRequestManagerStateMachine : NSObject /usr/lib/libSystem.B.dylib
 @property  CUStateMachine *stateMachine
 @property  CUStateEvent *eventCausingTransition
 @property  @? internalActionHandler
 @property  @? actionHandler
 @property  @? enterStateHandler
 @property  @? exitStateHandler

  // class methods
  +[CKUploadRequestManagerStateMachine nameFromFunction:]
  +[CKUploadRequestManagerStateMachine nameFromResponseAction:]
  +[CKUploadRequestManagerStateMachine nameFromStateEvent:]
  +[CKUploadRequestManagerStateMachine nameFromState:]

  // instance methods
  -[CKUploadRequestManagerStateMachine dealloc]
  -[CKUploadRequestManagerStateMachine .cxx_destruct]
  -[CKUploadRequestManagerStateMachine start]
  -[CKUploadRequestManagerStateMachine setActionHandler:]
  -[CKUploadRequestManagerStateMachine actionHandler]
  -[CKUploadRequestManagerStateMachine stateMachine]
  -[CKUploadRequestManagerStateMachine setStateMachine:]
  -[CKUploadRequestManagerStateMachine createStateMachine]
  -[CKUploadRequestManagerStateMachine dispatchEvent:]
  -[CKUploadRequestManagerStateMachine canPerformFunction:]
  -[CKUploadRequestManagerStateMachine initWithActionHandler:]
  -[CKUploadRequestManagerStateMachine setEnterStateHandler:]
  -[CKUploadRequestManagerStateMachine setExitStateHandler:]
  -[CKUploadRequestManagerStateMachine eventHandlerForState:withEnterBlock:exitBlock:eventBlock:]
  -[CKUploadRequestManagerStateMachine transitionToState:withEvent:]
  -[CKUploadRequestManagerStateMachine dispatchEvent:userInfo:]
  -[CKUploadRequestManagerStateMachine setInternalActionHandler:]
  -[CKUploadRequestManagerStateMachine internalActionHandler]
  -[CKUploadRequestManagerStateMachine setEventCausingTransition:]
  -[CKUploadRequestManagerStateMachine eventCausingTransition]
  -[CKUploadRequestManagerStateMachine enterStateHandler]
  -[CKUploadRequestManagerStateMachine exitStateHandler]


CKShareParticipant : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  long long mutableInvitationTokenStatus
 @property  CKUserIdentity *userIdentity
 @property  NSString *participantID
 @property  CKRecordID *shareRecordID
 @property  BOOL isCurrentUser
 @property  BOOL isOrgAdminUser
 @property  NSString *inviterID
 @property  long long acceptanceStatus
 @property  long long originalParticipantRole
 @property  long long originalAcceptanceStatus
 @property  long long originalPermission
 @property  BOOL createdInProcess
 @property  BOOL acceptedInProcess
 @property  NSData *protectionInfo
 @property  NSData *protectionInfoPublicKey
 @property  NSData *encryptedPersonalInfo
 @property  CKDeviceToDeviceShareInvitationToken *invitationToken
 @property  long long invitationTokenStatus
 @property  BOOL wantsNewInvitationToken
 @property  long long role
 @property  long long type
 @property  long long permission

  // class methods
  +[CKShareParticipant supportsSecureCoding]

  // instance methods
  -[CKShareParticipant isEqual:]
  -[CKShareParticipant copyWithZone:]
  -[CKShareParticipant type]
  -[CKShareParticipant setType:]
  -[CKShareParticipant encodeWithCoder:]
  -[CKShareParticipant initWithCoder:]
  -[CKShareParticipant role]
  -[CKShareParticipant .cxx_destruct]
  -[CKShareParticipant _init]
  -[CKShareParticipant participantID]
  -[CKShareParticipant setParticipantID:]
  -[CKShareParticipant CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKShareParticipant encryptedPersonalInfo]
  -[CKShareParticipant setEncryptedPersonalInfo:]
  -[CKShareParticipant permission]
  -[CKShareParticipant setPermission:]
  -[CKShareParticipant _stripPersonalInfo]
  -[CKShareParticipant _initWithUserIdentity:]
  -[CKShareParticipant setIsCurrentUser:]
  -[CKShareParticipant setAcceptanceStatus:]
  -[CKShareParticipant acceptanceStatus]
  -[CKShareParticipant isCurrentUser]
  -[CKShareParticipant userIdentity]
  -[CKShareParticipant shareRecordID]
  -[CKShareParticipant setShareRecordID:]
  -[CKShareParticipant isOrgAdminUser]
  -[CKShareParticipant setIsOrgAdminUser:]
  -[CKShareParticipant inviterID]
  -[CKShareParticipant setInviterID:]
  -[CKShareParticipant setRole:]
  -[CKShareParticipant originalParticipantRole]
  -[CKShareParticipant setOriginalParticipantRole:]
  -[CKShareParticipant originalAcceptanceStatus]
  -[CKShareParticipant setOriginalAcceptanceStatus:]
  -[CKShareParticipant originalPermission]
  -[CKShareParticipant setOriginalPermission:]
  -[CKShareParticipant protectionInfo]
  -[CKShareParticipant setProtectionInfo:]
  -[CKShareParticipant invitationToken]
  -[CKShareParticipant setInvitationToken:]
  -[CKShareParticipant protectionInfoPublicKey]
  -[CKShareParticipant setProtectionInfoPublicKey:]
  -[CKShareParticipant wantsNewInvitationToken]
  -[CKShareParticipant setWantsNewInvitationToken:]
  -[CKShareParticipant mutableInvitationTokenStatus]
  -[CKShareParticipant setMutableInvitationTokenStatus:]
  -[CKShareParticipant invitationTokenStatus]
  -[CKShareParticipant createdInProcess]
  -[CKShareParticipant acceptedInProcess]
  -[CKShareParticipant unifiedContactsInStore:keysToFetch:error:]
  -[CKShareParticipant setUserIdentity:]
  -[CKShareParticipant setCreatedInProcess:]
  -[CKShareParticipant setAcceptedInProcess:]


CKDiscoveredUserInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKRecordID *userRecordID
 @property  NSString *firstName
 @property  NSString *lastName
 @property  CNContact *displayContact

  // class methods
  +[CKDiscoveredUserInfo supportsSecureCoding]

  // instance methods
  -[CKDiscoveredUserInfo isEqual:]
  -[CKDiscoveredUserInfo copyWithZone:]
  -[CKDiscoveredUserInfo encodeWithCoder:]
  -[CKDiscoveredUserInfo initWithCoder:]
  -[CKDiscoveredUserInfo .cxx_destruct]
  -[CKDiscoveredUserInfo CKPropertiesDescription]
  -[CKDiscoveredUserInfo userRecordID]
  -[CKDiscoveredUserInfo initWithUserRecordID:displayContact:]
  -[CKDiscoveredUserInfo firstName]
  -[CKDiscoveredUserInfo lastName]
  -[CKDiscoveredUserInfo displayContact]


CKRecordGraphNode : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableSet *edges
 @property  NSMutableSet *indegrees
 @property  unsigned long indegree
 @property  CKRecord *record

  // instance methods
  -[CKRecordGraphNode init]
  -[CKRecordGraphNode isEqual:]
  -[CKRecordGraphNode .cxx_destruct]
  -[CKRecordGraphNode edges]
  -[CKRecordGraphNode setEdges:]
  -[CKRecordGraphNode CKPropertiesDescription]
  -[CKRecordGraphNode record]
  -[CKRecordGraphNode setRecord:]
  -[CKRecordGraphNode indegrees]
  -[CKRecordGraphNode indegree]


CKRecordGraph : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableArray *nodes
 @property  NSArray *sortedRecords

  // class methods
  +[CKRecordGraph topologicallySortRecords:withError:]

  // instance methods
  -[CKRecordGraph init]
  -[CKRecordGraph .cxx_destruct]
  -[CKRecordGraph nodes]
  -[CKRecordGraph setNodes:]
  -[CKRecordGraph setSortedRecords:]
  -[CKRecordGraph sortedRecords]
  -[CKRecordGraph addRecords:error:]
  -[CKRecordGraph recordsByTopologicalSortWithError:]


CKFetchNotificationChangesOperation : CKOperation
 @property  CKServerChangeToken *resultServerChangeToken
 @property  BOOL moreComing
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  @? notificationChangedBlock
 @property  @? fetchNotificationChangesCompletionBlock

  // instance methods
  -[CKFetchNotificationChangesOperation init]
  -[CKFetchNotificationChangesOperation .cxx_destruct]
  -[CKFetchNotificationChangesOperation setPreviousServerChangeToken:]
  -[CKFetchNotificationChangesOperation initWithPreviousServerChangeToken:]
  -[CKFetchNotificationChangesOperation setResultsLimit:]
  -[CKFetchNotificationChangesOperation moreComing]
  -[CKFetchNotificationChangesOperation setMoreComing:]
  -[CKFetchNotificationChangesOperation fillOutOperationInfo:]
  -[CKFetchNotificationChangesOperation fillFromOperationInfo:]
  -[CKFetchNotificationChangesOperation hasCKOperationCallbacksSet]
  -[CKFetchNotificationChangesOperation _finishOnCallbackQueueWithError:]
  -[CKFetchNotificationChangesOperation activityCreate]
  -[CKFetchNotificationChangesOperation performCKOperation]
  -[CKFetchNotificationChangesOperation _handleProgressCallback:]
  -[CKFetchNotificationChangesOperation previousServerChangeToken]
  -[CKFetchNotificationChangesOperation resultsLimit]
  -[CKFetchNotificationChangesOperation _handleCompletionCallback:]
  -[CKFetchNotificationChangesOperation notificationChangedBlock]
  -[CKFetchNotificationChangesOperation fetchNotificationChangesCompletionBlock]
  -[CKFetchNotificationChangesOperation setResultServerChangeToken:]
  -[CKFetchNotificationChangesOperation resultServerChangeToken]
  -[CKFetchNotificationChangesOperation setFetchNotificationChangesCompletionBlock:]
  -[CKFetchNotificationChangesOperation setNotificationChangedBlock:]


CKFetchNotificationChangesOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  BOOL wantsChanges

  // class methods
  +[CKFetchNotificationChangesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchNotificationChangesOperationInfo encodeWithCoder:]
  -[CKFetchNotificationChangesOperationInfo initWithCoder:]
  -[CKFetchNotificationChangesOperationInfo .cxx_destruct]
  -[CKFetchNotificationChangesOperationInfo setPreviousServerChangeToken:]
  -[CKFetchNotificationChangesOperationInfo setResultsLimit:]
  -[CKFetchNotificationChangesOperationInfo previousServerChangeToken]
  -[CKFetchNotificationChangesOperationInfo resultsLimit]
  -[CKFetchNotificationChangesOperationInfo setWantsChanges:]
  -[CKFetchNotificationChangesOperationInfo wantsChanges]


CKFetchNotificationChangesOperationResult : CKOperationResult <NSSecureCoding>
 @property  CKServerChangeToken *serverChangeToken
 @property  BOOL moreComing

  // class methods
  +[CKFetchNotificationChangesOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchNotificationChangesOperationResult encodeWithCoder:]
  -[CKFetchNotificationChangesOperationResult initWithCoder:]
  -[CKFetchNotificationChangesOperationResult .cxx_destruct]
  -[CKFetchNotificationChangesOperationResult moreComing]
  -[CKFetchNotificationChangesOperationResult setMoreComing:]
  -[CKFetchNotificationChangesOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchNotificationChangesOperationResult serverChangeToken]
  -[CKFetchNotificationChangesOperationResult setServerChangeToken:]


CKFetchWebAuthTokenOperation : CKDatabaseOperation
 @property  NSString *webAuthToken
 @property  NSString *APIToken
 @property  @? fetchWebAuthTokenCompletionBlock

  // instance methods
  -[CKFetchWebAuthTokenOperation init]
  -[CKFetchWebAuthTokenOperation .cxx_destruct]
  -[CKFetchWebAuthTokenOperation fillOutOperationInfo:]
  -[CKFetchWebAuthTokenOperation fillFromOperationInfo:]
  -[CKFetchWebAuthTokenOperation hasCKOperationCallbacksSet]
  -[CKFetchWebAuthTokenOperation CKOperationShouldRun:]
  -[CKFetchWebAuthTokenOperation _finishOnCallbackQueueWithError:]
  -[CKFetchWebAuthTokenOperation activityCreate]
  -[CKFetchWebAuthTokenOperation performCKOperation]
  -[CKFetchWebAuthTokenOperation operationInfoClass]
  -[CKFetchWebAuthTokenOperation _handleCompletionCallback:]
  -[CKFetchWebAuthTokenOperation APIToken]
  -[CKFetchWebAuthTokenOperation fetchWebAuthTokenCompletionBlock]
  -[CKFetchWebAuthTokenOperation setAPIToken:]
  -[CKFetchWebAuthTokenOperation webAuthToken]
  -[CKFetchWebAuthTokenOperation setWebAuthToken:]
  -[CKFetchWebAuthTokenOperation setFetchWebAuthTokenCompletionBlock:]
  -[CKFetchWebAuthTokenOperation initWithAPIToken:]


CKFetchWebAuthTokenOperationResult : CKOperationResult <NSSecureCoding>
 @property  NSString *webAuthToken

  // class methods
  +[CKFetchWebAuthTokenOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchWebAuthTokenOperationResult copyWithZone:]
  -[CKFetchWebAuthTokenOperationResult encodeWithCoder:]
  -[CKFetchWebAuthTokenOperationResult initWithCoder:]
  -[CKFetchWebAuthTokenOperationResult .cxx_destruct]
  -[CKFetchWebAuthTokenOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchWebAuthTokenOperationResult webAuthToken]
  -[CKFetchWebAuthTokenOperationResult setWebAuthToken:]


CKFetchWebAuthTokenOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSString *APIToken

  // class methods
  +[CKFetchWebAuthTokenOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchWebAuthTokenOperationInfo encodeWithCoder:]
  -[CKFetchWebAuthTokenOperationInfo initWithCoder:]
  -[CKFetchWebAuthTokenOperationInfo .cxx_destruct]
  -[CKFetchWebAuthTokenOperationInfo APIToken]
  -[CKFetchWebAuthTokenOperationInfo setAPIToken:]


CKFetchRecordVersionsOperation : CKDatabaseOperation
 @property  NSMutableDictionary *recordErrors
 @property  BOOL isDeleted
 @property  BOOL shouldFetchAssetContent
 @property  NSArray *recordIDs
 @property  NSArray *desiredKeys
 @property  NSString *minimumVersionETag
 @property  @? fetchRecordVersionsProgressBlock
 @property  @? fetchRecordVersionsCompletionBlock

  // instance methods
  -[CKFetchRecordVersionsOperation .cxx_destruct]
  -[CKFetchRecordVersionsOperation setDesiredKeys:]
  -[CKFetchRecordVersionsOperation isDeleted]
  -[CKFetchRecordVersionsOperation setRecordIDs:]
  -[CKFetchRecordVersionsOperation fillOutOperationInfo:]
  -[CKFetchRecordVersionsOperation fillFromOperationInfo:]
  -[CKFetchRecordVersionsOperation hasCKOperationCallbacksSet]
  -[CKFetchRecordVersionsOperation CKOperationShouldRun:]
  -[CKFetchRecordVersionsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchRecordVersionsOperation activityCreate]
  -[CKFetchRecordVersionsOperation performCKOperation]
  -[CKFetchRecordVersionsOperation _handleProgressCallback:]
  -[CKFetchRecordVersionsOperation recordIDs]
  -[CKFetchRecordVersionsOperation initWithRecordIDs:]
  -[CKFetchRecordVersionsOperation recordErrors]
  -[CKFetchRecordVersionsOperation setRecordErrors:]
  -[CKFetchRecordVersionsOperation shouldFetchAssetContent]
  -[CKFetchRecordVersionsOperation setShouldFetchAssetContent:]
  -[CKFetchRecordVersionsOperation desiredKeys]
  -[CKFetchRecordVersionsOperation minimumVersionETag]
  -[CKFetchRecordVersionsOperation setMinimumVersionETag:]
  -[CKFetchRecordVersionsOperation fetchRecordVersionsProgressBlock]
  -[CKFetchRecordVersionsOperation fetchRecordVersionsCompletionBlock]
  -[CKFetchRecordVersionsOperation setFetchRecordVersionsCompletionBlock:]
  -[CKFetchRecordVersionsOperation setFetchRecordVersionsProgressBlock:]
  -[CKFetchRecordVersionsOperation setIsDeleted:]


CKFetchRecordVersionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDs
 @property  NSArray *desiredKeys
 @property  NSString *minimumVersionETag
 @property  BOOL shouldFetchAssetContent

  // class methods
  +[CKFetchRecordVersionsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchRecordVersionsOperationInfo encodeWithCoder:]
  -[CKFetchRecordVersionsOperationInfo initWithCoder:]
  -[CKFetchRecordVersionsOperationInfo .cxx_destruct]
  -[CKFetchRecordVersionsOperationInfo setDesiredKeys:]
  -[CKFetchRecordVersionsOperationInfo setRecordIDs:]
  -[CKFetchRecordVersionsOperationInfo recordIDs]
  -[CKFetchRecordVersionsOperationInfo shouldFetchAssetContent]
  -[CKFetchRecordVersionsOperationInfo setShouldFetchAssetContent:]
  -[CKFetchRecordVersionsOperationInfo desiredKeys]
  -[CKFetchRecordVersionsOperationInfo minimumVersionETag]
  -[CKFetchRecordVersionsOperationInfo setMinimumVersionETag:]


CKInitiateParticipantVettingOperation : CKOperation
 @property  CKShareMetadata *shareMetadata
 @property  NSString *participantID
 @property  NSString *address
 @property  @? participantVettingInitiatedBlock
 @property  @? participantVettingInitiationCompletionBlock

  // instance methods
  -[CKInitiateParticipantVettingOperation .cxx_destruct]
  -[CKInitiateParticipantVettingOperation address]
  -[CKInitiateParticipantVettingOperation shareMetadata]
  -[CKInitiateParticipantVettingOperation participantID]
  -[CKInitiateParticipantVettingOperation setParticipantID:]
  -[CKInitiateParticipantVettingOperation setAddress:]
  -[CKInitiateParticipantVettingOperation fillOutOperationInfo:]
  -[CKInitiateParticipantVettingOperation fillFromOperationInfo:]
  -[CKInitiateParticipantVettingOperation CKOperationShouldRun:]
  -[CKInitiateParticipantVettingOperation _finishOnCallbackQueueWithError:]
  -[CKInitiateParticipantVettingOperation performCKOperation]
  -[CKInitiateParticipantVettingOperation _handleProgressCallback:]
  -[CKInitiateParticipantVettingOperation operationInfoClass]
  -[CKInitiateParticipantVettingOperation setShareMetadata:]
  -[CKInitiateParticipantVettingOperation setParticipantVettingInitiatedBlock:]
  -[CKInitiateParticipantVettingOperation initWithShareMetadata:participantID:address:]
  -[CKInitiateParticipantVettingOperation retryTimes:container:participantVettingInitiatedBlock:participantVettingInitiationCompletionBlock:]
  -[CKInitiateParticipantVettingOperation setParticipantVettingInitiationCompletionBlock:]
  -[CKInitiateParticipantVettingOperation participantVettingInitiatedBlock]
  -[CKInitiateParticipantVettingOperation participantVettingInitiationCompletionBlock]


CKInitiateParticipantVettingOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  CKShareMetadata *shareMetadata
 @property  NSString *participantID
 @property  NSString *address

  // class methods
  +[CKInitiateParticipantVettingOperationInfo supportsSecureCoding]

  // instance methods
  -[CKInitiateParticipantVettingOperationInfo encodeWithCoder:]
  -[CKInitiateParticipantVettingOperationInfo initWithCoder:]
  -[CKInitiateParticipantVettingOperationInfo .cxx_destruct]
  -[CKInitiateParticipantVettingOperationInfo address]
  -[CKInitiateParticipantVettingOperationInfo shareMetadata]
  -[CKInitiateParticipantVettingOperationInfo participantID]
  -[CKInitiateParticipantVettingOperationInfo setParticipantID:]
  -[CKInitiateParticipantVettingOperationInfo setAddress:]
  -[CKInitiateParticipantVettingOperationInfo setShareMetadata:]


CKStreamingAssetAppendContext : NSObject /usr/lib/libSystem.B.dylib <C2RequestDelegate>
 @property  CKStreamingAsset *streamingAsset
 @property  NSObject<OS_dispatch_queue> *appendQueue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  BOOL appending
 @property  BOOL currentAppendCancelled
 @property  unsigned long currentSegmentLength
 @property  NSURLSessionDataTask *dataTask
 @property  NSString *requestUUID
 @property  NSObject<OS_os_activity> *osActivity
 @property  @? completionHandler
 @property  BOOL fakeMissingUploadReceipt
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKStreamingAssetAppendContext requestToAppendSegmentData:uploadURL:requestUUID:offset:]

  // instance methods
  -[CKStreamingAssetAppendContext init]
  -[CKStreamingAssetAppendContext .cxx_destruct]
  -[CKStreamingAssetAppendContext callbackQueue]
  -[CKStreamingAssetAppendContext abort]
  -[CKStreamingAssetAppendContext URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:]
  -[CKStreamingAssetAppendContext URLSession:task:needNewBodyStream:]
  -[CKStreamingAssetAppendContext URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:]
  -[CKStreamingAssetAppendContext URLSession:task:didCompleteWithError:]
  -[CKStreamingAssetAppendContext URLSession:dataTask:didReceiveData:]
  -[CKStreamingAssetAppendContext URLSession:dataTask:didReceiveResponse:completionHandler:]
  -[CKStreamingAssetAppendContext setCallbackQueue:]
  -[CKStreamingAssetAppendContext completionHandler]
  -[CKStreamingAssetAppendContext setCompletionHandler:]
  -[CKStreamingAssetAppendContext URLSession:task:_willSendRequestForEstablishedConnection:completionHandler:]
  -[CKStreamingAssetAppendContext URLSession:_taskIsWaitingForConnection:]
  -[CKStreamingAssetAppendContext URLSession:task:_conditionalRequirementsChanged:]
  -[CKStreamingAssetAppendContext URLSession:_willRetryBackgroundDataTask:withError:]
  -[CKStreamingAssetAppendContext CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKStreamingAssetAppendContext osActivity]
  -[CKStreamingAssetAppendContext requestUUID]
  -[CKStreamingAssetAppendContext setOsActivity:]
  -[CKStreamingAssetAppendContext streamingAsset]
  -[CKStreamingAssetAppendContext dataTask]
  -[CKStreamingAssetAppendContext appendSegmentWithData:newStreamingAsset:error:]
  -[CKStreamingAssetAppendContext appendSegmentWithData:completionHandler:]
  -[CKStreamingAssetAppendContext appendQueue]
  -[CKStreamingAssetAppendContext isAppending]
  -[CKStreamingAssetAppendContext setAppending:]
  -[CKStreamingAssetAppendContext setCurrentAppendCancelled:]
  -[CKStreamingAssetAppendContext setCurrentSegmentLength:]
  -[CKStreamingAssetAppendContext setDataTask:]
  -[CKStreamingAssetAppendContext setRequestUUID:]
  -[CKStreamingAssetAppendContext isCurrentAppendCancelled]
  -[CKStreamingAssetAppendContext fakeMissingUploadReceipt]
  -[CKStreamingAssetAppendContext currentSegmentLength]
  -[CKStreamingAssetAppendContext initWithStreamingAsset:]
  -[CKStreamingAssetAppendContext appendSegmentWithData:error:]
  -[CKStreamingAssetAppendContext setStreamingAsset:]
  -[CKStreamingAssetAppendContext setAppendQueue:]
  -[CKStreamingAssetAppendContext setFakeMissingUploadReceipt:]


CKDPDate : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasTime
 @property  double time

  // instance methods
  -[CKDPDate isEqual:]
  -[CKDPDate copyWithZone:]
  -[CKDPDate dictionaryRepresentation]
  -[CKDPDate time]
  -[CKDPDate writeTo:]
  -[CKDPDate setTime:]
  -[CKDPDate mergeFrom:]
  -[CKDPDate readFrom:]
  -[CKDPDate copyTo:]
  -[CKDPDate setHasTime:]
  -[CKDPDate hasTime]


CKAggregateZonePCSOperation : CKDatabaseOperation
 @property  NSArray *sourceZoneIDs
 @property  CKRecordZone *targetZone
 @property  @? aggregateZonePCSCompletionBlock

  // instance methods
  -[CKAggregateZonePCSOperation init]
  -[CKAggregateZonePCSOperation .cxx_destruct]
  -[CKAggregateZonePCSOperation fillOutOperationInfo:]
  -[CKAggregateZonePCSOperation fillFromOperationInfo:]
  -[CKAggregateZonePCSOperation hasCKOperationCallbacksSet]
  -[CKAggregateZonePCSOperation CKOperationShouldRun:]
  -[CKAggregateZonePCSOperation _finishOnCallbackQueueWithError:]
  -[CKAggregateZonePCSOperation activityCreate]
  -[CKAggregateZonePCSOperation performCKOperation]
  -[CKAggregateZonePCSOperation sourceZoneIDs]
  -[CKAggregateZonePCSOperation setSourceZoneIDs:]
  -[CKAggregateZonePCSOperation targetZone]
  -[CKAggregateZonePCSOperation setTargetZone:]
  -[CKAggregateZonePCSOperation aggregateZonePCSCompletionBlock]
  -[CKAggregateZonePCSOperation setAggregateZonePCSCompletionBlock:]
  -[CKAggregateZonePCSOperation initWithSourceZoneIDs:targetZone:]


CKAggregateZonePCSOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *sourceZoneIDs
 @property  CKRecordZone *targetZone

  // class methods
  +[CKAggregateZonePCSOperationInfo supportsSecureCoding]

  // instance methods
  -[CKAggregateZonePCSOperationInfo encodeWithCoder:]
  -[CKAggregateZonePCSOperationInfo initWithCoder:]
  -[CKAggregateZonePCSOperationInfo .cxx_destruct]
  -[CKAggregateZonePCSOperationInfo sourceZoneIDs]
  -[CKAggregateZonePCSOperationInfo setSourceZoneIDs:]
  -[CKAggregateZonePCSOperationInfo targetZone]
  -[CKAggregateZonePCSOperationInfo setTargetZone:]


CKMetric : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSDate *startDate
 @property  double duration
 @property  double queueing
 @property  double executing
 @property  unsigned long bytesUploaded
 @property  unsigned long bytesDownloaded
 @property  unsigned long connections
 @property  unsigned long connectionsCreated

  // class methods
  +[CKMetric supportsSecureCoding]

  // instance methods
  -[CKMetric copyWithZone:]
  -[CKMetric encodeWithCoder:]
  -[CKMetric initWithCoder:]
  -[CKMetric .cxx_destruct]
  -[CKMetric startDate]
  -[CKMetric duration]
  -[CKMetric setStartDate:]
  -[CKMetric setDuration:]
  -[CKMetric bytesDownloaded]
  -[CKMetric setExecuting:]
  -[CKMetric CKPropertiesDescription]
  -[CKMetric bytesUploaded]
  -[CKMetric queueing]
  -[CKMetric executing]
  -[CKMetric connections]
  -[CKMetric connectionsCreated]
  -[CKMetric setQueueing:]
  -[CKMetric setBytesUploaded:]
  -[CKMetric setBytesDownloaded:]
  -[CKMetric setConnections:]
  -[CKMetric setConnectionsCreated:]
  -[CKMetric unionMetric:]


CKOperationMetrics : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  CKMetric *cloudKitMetrics
 @property  CKMetric *MMCSMetrics

  // class methods
  +[CKOperationMetrics supportsSecureCoding]

  // instance methods
  -[CKOperationMetrics copyWithZone:]
  -[CKOperationMetrics encodeWithCoder:]
  -[CKOperationMetrics initWithCoder:]
  -[CKOperationMetrics .cxx_destruct]
  -[CKOperationMetrics dictionaryRepresentation]
  -[CKOperationMetrics cloudKitMetrics]
  -[CKOperationMetrics CKPropertiesDescription]
  -[CKOperationMetrics MMCSMetrics]
  -[CKOperationMetrics setCloudKitMetrics:]
  -[CKOperationMetrics setMMCSMetrics:]
  -[CKOperationMetrics unionMetrics:]


CKPackageItem : NSObject /usr/lib/libSystem.B.dylib
 @property  long long packageIndex
 @property  NSURL *fileURL
 @property  unsigned long itemID
 @property  NSData *signature
 @property  long long size
 @property  long long offset
 @property  int sectionIndex
 @property  NSNumber *deviceID
 @property  NSNumber *fileID
 @property  NSNumber *generationID
 @property  NSData *wrappedAssetKey
 @property  NSString *itemTypeHint

  // instance methods
  -[CKPackageItem .cxx_destruct]
  -[CKPackageItem size]
  -[CKPackageItem fileURL]
  -[CKPackageItem setFileURL:]
  -[CKPackageItem itemID]
  -[CKPackageItem setOffset:]
  -[CKPackageItem setSize:]
  -[CKPackageItem deviceID]
  -[CKPackageItem setDeviceID:]
  -[CKPackageItem offset]
  -[CKPackageItem setItemID:]
  -[CKPackageItem signature]
  -[CKPackageItem initWithFileURL:]
  -[CKPackageItem CKPropertiesDescription]
  -[CKPackageItem fileID]
  -[CKPackageItem generationID]
  -[CKPackageItem setFileID:]
  -[CKPackageItem setGenerationID:]
  -[CKPackageItem wrappedAssetKey]
  -[CKPackageItem initWithDeviceID:fileID:generationID:]
  -[CKPackageItem setSignature:]
  -[CKPackageItem itemTypeHint]
  -[CKPackageItem setItemTypeHint:]
  -[CKPackageItem setWrappedAssetKey:]
  -[CKPackageItem sectionIndex]
  -[CKPackageItem packageIndex]
  -[CKPackageItem setPackageIndex:]
  -[CKPackageItem setSectionIndex:]


CKFetchRecordChangesOperation : CKDatabaseOperation
 @property  CKServerChangeToken *resultServerChangeToken
 @property  NSData *resultClientChangeTokenData
 @property  long long status
 @property  BOOL shouldFetchAssetContents
 @property  BOOL fetchAllChanges
 @property  NSMutableDictionary *recordErrors
 @property  @? serverChangeTokenFetchedBlock
 @property  @? changeTokensUpdatedBlock
 @property  CKRecordZoneID *recordZoneID
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  NSArray *desiredKeys
 @property  @? recordChangedBlock
 @property  @? recordWithIDWasDeletedBlock
 @property  BOOL moreComing
 @property  @? fetchRecordChangesCompletionBlock

  // instance methods
  -[CKFetchRecordChangesOperation init]
  -[CKFetchRecordChangesOperation .cxx_destruct]
  -[CKFetchRecordChangesOperation status]
  -[CKFetchRecordChangesOperation setPreviousServerChangeToken:]
  -[CKFetchRecordChangesOperation setFetchAllChanges:]
  -[CKFetchRecordChangesOperation setRecordChangedBlock:]
  -[CKFetchRecordChangesOperation setRecordWithIDWasDeletedBlock:]
  -[CKFetchRecordChangesOperation setResultsLimit:]
  -[CKFetchRecordChangesOperation setDesiredKeys:]
  -[CKFetchRecordChangesOperation setStatus:]
  -[CKFetchRecordChangesOperation moreComing]
  -[CKFetchRecordChangesOperation fillOutOperationInfo:]
  -[CKFetchRecordChangesOperation fillFromOperationInfo:]
  -[CKFetchRecordChangesOperation hasCKOperationCallbacksSet]
  -[CKFetchRecordChangesOperation CKOperationShouldRun:]
  -[CKFetchRecordChangesOperation _finishOnCallbackQueueWithError:]
  -[CKFetchRecordChangesOperation activityCreate]
  -[CKFetchRecordChangesOperation performCKOperation]
  -[CKFetchRecordChangesOperation _handleProgressCallback:]
  -[CKFetchRecordChangesOperation operationInfoClass]
  -[CKFetchRecordChangesOperation recordErrors]
  -[CKFetchRecordChangesOperation setRecordErrors:]
  -[CKFetchRecordChangesOperation previousServerChangeToken]
  -[CKFetchRecordChangesOperation resultsLimit]
  -[CKFetchRecordChangesOperation fetchAllChanges]
  -[CKFetchRecordChangesOperation _handleCompletionCallback:]
  -[CKFetchRecordChangesOperation shouldFetchAssetContents]
  -[CKFetchRecordChangesOperation setShouldFetchAssetContents:]
  -[CKFetchRecordChangesOperation setRecordZoneID:]
  -[CKFetchRecordChangesOperation desiredKeys]
  -[CKFetchRecordChangesOperation setResultServerChangeToken:]
  -[CKFetchRecordChangesOperation resultServerChangeToken]
  -[CKFetchRecordChangesOperation recordZoneID]
  -[CKFetchRecordChangesOperation changeTypesFromSetCallbacks]
  -[CKFetchRecordChangesOperation recordChangedBlock]
  -[CKFetchRecordChangesOperation recordWithIDWasDeletedBlock]
  -[CKFetchRecordChangesOperation serverChangeTokenFetchedBlock]
  -[CKFetchRecordChangesOperation changeTokensUpdatedBlock]
  -[CKFetchRecordChangesOperation fetchRecordChangesCompletionBlock]
  -[CKFetchRecordChangesOperation setResultClientChangeTokenData:]
  -[CKFetchRecordChangesOperation resultClientChangeTokenData]
  -[CKFetchRecordChangesOperation setFetchRecordChangesCompletionBlock:]
  -[CKFetchRecordChangesOperation initWithRecordZoneID:previousServerChangeToken:]
  -[CKFetchRecordChangesOperation setServerChangeTokenFetchedBlock:]
  -[CKFetchRecordChangesOperation setChangeTokensUpdatedBlock:]


CKFetchRecordChangesOperationResult : CKOperationResult <NSSecureCoding>
 @property  CKServerChangeToken *serverChangeToken
 @property  NSData *clientChangeTokenData
 @property  NSNumber *status

  // class methods
  +[CKFetchRecordChangesOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchRecordChangesOperationResult encodeWithCoder:]
  -[CKFetchRecordChangesOperationResult initWithCoder:]
  -[CKFetchRecordChangesOperationResult .cxx_destruct]
  -[CKFetchRecordChangesOperationResult status]
  -[CKFetchRecordChangesOperationResult setStatus:]
  -[CKFetchRecordChangesOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchRecordChangesOperationResult serverChangeToken]
  -[CKFetchRecordChangesOperationResult setServerChangeToken:]
  -[CKFetchRecordChangesOperationResult clientChangeTokenData]
  -[CKFetchRecordChangesOperationResult setClientChangeTokenData:]


CKNotificationID : NSObject /usr/lib/libSystem.B.dylib <CKXPCSuitableString, NSCopying, NSSecureCoding>
 @property  NSString *notificationUUID

  // class methods
  +[CKNotificationID supportsSecureCoding]

  // instance methods
  -[CKNotificationID isEqual:]
  -[CKNotificationID copyWithZone:]
  -[CKNotificationID encodeWithCoder:]
  -[CKNotificationID initWithCoder:]
  -[CKNotificationID .cxx_destruct]
  -[CKNotificationID CKPropertiesDescription]
  -[CKNotificationID setNotificationUUID:]
  -[CKNotificationID notificationUUID]
  -[CKNotificationID CKXPCSuitableString]


CKNotification : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  long long notificationType
 @property  CKNotificationID *notificationID
 @property  NSString *containerIdentifier
 @property  CKRecordID *subscriptionOwnerUserRecordID
 @property  BOOL isPruned
 @property  NSString *alertBody
 @property  NSString *alertLocalizationKey
 @property  NSArray *alertLocalizationArgs
 @property  NSString *title
 @property  NSString *titleLocalizationKey
 @property  NSArray *titleLocalizationArgs
 @property  NSString *subtitle
 @property  NSString *subtitleLocalizationKey
 @property  NSArray *subtitleLocalizationArgs
 @property  NSString *alertActionLocalizationKey
 @property  NSString *alertLaunchImage
 @property  NSNumber *badge
 @property  NSString *soundName
 @property  NSString *subscriptionID
 @property  NSString *category

  // class methods
  +[CKNotification supportsSecureCoding]
  +[CKNotification notificationFromRemoteNotificationDictionary:]
  +[CKNotification _realNotificationFromRemoteNotificationDictionary:]

  // instance methods
  -[CKNotification init]
  -[CKNotification encodeWithCoder:]
  -[CKNotification initWithCoder:]
  -[CKNotification .cxx_destruct]
  -[CKNotification category]
  -[CKNotification setCategory:]
  -[CKNotification title]
  -[CKNotification setTitle:]
  -[CKNotification isRead]
  -[CKNotification setBadge:]
  -[CKNotification subtitle]
  -[CKNotification containerIdentifier]
  -[CKNotification setContainerIdentifier:]
  -[CKNotification setSubtitle:]
  -[CKNotification setAlertBody:]
  -[CKNotification setAlertLaunchImage:]
  -[CKNotification setSoundName:]
  -[CKNotification alertBody]
  -[CKNotification alertLaunchImage]
  -[CKNotification soundName]
  -[CKNotification badge]
  -[CKNotification subscriptionID]
  -[CKNotification CKPropertiesDescription]
  -[CKNotification _initBare]
  -[CKNotification initWithRemoteNotificationDictionary:]
  -[CKNotification setNotificationType:]
  -[CKNotification setNotificationID:]
  -[CKNotification setIsPruned:]
  -[CKNotification setSubscriptionOwnerUserRecordID:]
  -[CKNotification setAlertLocalizationKey:]
  -[CKNotification setAlertLocalizationArgs:]
  -[CKNotification setTitleLocalizationKey:]
  -[CKNotification setTitleLocalizationArgs:]
  -[CKNotification setSubtitleLocalizationKey:]
  -[CKNotification setSubtitleLocalizationArgs:]
  -[CKNotification setAlertActionLocalizationKey:]
  -[CKNotification setSubscriptionID:]
  -[CKNotification notificationID]
  -[CKNotification notificationType]
  -[CKNotification subscriptionOwnerUserRecordID]
  -[CKNotification isPruned]
  -[CKNotification alertLocalizationKey]
  -[CKNotification alertLocalizationArgs]
  -[CKNotification titleLocalizationKey]
  -[CKNotification titleLocalizationArgs]
  -[CKNotification subtitleLocalizationKey]
  -[CKNotification subtitleLocalizationArgs]
  -[CKNotification alertActionLocalizationKey]


CKQueryNotification : CKNotification <NSSecureCoding>
 @property  long long queryNotificationReason
 @property  NSDictionary *recordFields
 @property  CKRecordID *recordID
 @property  long long databaseScope
 @property  BOOL isPublicDatabase

  // class methods
  +[CKQueryNotification supportsSecureCoding]

  // instance methods
  -[CKQueryNotification encodeWithCoder:]
  -[CKQueryNotification initWithCoder:]
  -[CKQueryNotification .cxx_destruct]
  -[CKQueryNotification recordID]
  -[CKQueryNotification setRecordID:]
  -[CKQueryNotification databaseScope]
  -[CKQueryNotification setDatabaseScope:]
  -[CKQueryNotification CKPropertiesDescription]
  -[CKQueryNotification initWithRemoteNotificationDictionary:]
  -[CKQueryNotification setQueryNotificationReason:]
  -[CKQueryNotification setRecordFields:]
  -[CKQueryNotification queryNotificationReason]
  -[CKQueryNotification recordFields]
  -[CKQueryNotification isPublicDatabase]


CKRecordZoneNotification : CKNotification <NSSecureCoding>
 @property  CKRecordZoneID *recordZoneID
 @property  long long databaseScope

  // class methods
  +[CKRecordZoneNotification supportsSecureCoding]

  // instance methods
  -[CKRecordZoneNotification encodeWithCoder:]
  -[CKRecordZoneNotification initWithCoder:]
  -[CKRecordZoneNotification .cxx_destruct]
  -[CKRecordZoneNotification databaseScope]
  -[CKRecordZoneNotification setDatabaseScope:]
  -[CKRecordZoneNotification CKPropertiesDescription]
  -[CKRecordZoneNotification initWithRemoteNotificationDictionary:]
  -[CKRecordZoneNotification setRecordZoneID:]
  -[CKRecordZoneNotification recordZoneID]


CKDatabaseNotification : CKNotification <NSSecureCoding>
 @property  long long databaseScope

  // class methods
  +[CKDatabaseNotification supportsSecureCoding]

  // instance methods
  -[CKDatabaseNotification encodeWithCoder:]
  -[CKDatabaseNotification initWithCoder:]
  -[CKDatabaseNotification databaseScope]
  -[CKDatabaseNotification setDatabaseScope:]
  -[CKDatabaseNotification CKPropertiesDescription]
  -[CKDatabaseNotification initWithRemoteNotificationDictionary:]


CKDatabase : NSObject /usr/lib/libSystem.B.dylib
 @property  CKContainer *container
 @property  long long scope
 @property  NSOperationQueue *operationQueue
 @property  NSObject<OS_dispatch_queue> *underlyingDispatchQueue
 @property  long long databaseScope

  // instance methods
  -[CKDatabase init]
  -[CKDatabase container]
  -[CKDatabase setContainer:]
  -[CKDatabase addOperation:]
  -[CKDatabase .cxx_destruct]
  -[CKDatabase operationQueue]
  -[CKDatabase scope]
  -[CKDatabase databaseScope]
  -[CKDatabase CKPropertiesDescription]
  -[CKDatabase _initWithContainer:scope:]
  -[CKDatabase CKStatusReportArray]
  -[CKDatabase daemonWithErrorHandler:]
  -[CKDatabase underlyingDispatchQueue]
  -[CKDatabase setUnderlyingDispatchQueue:]
  -[CKDatabase clearAssetCache]
  -[CKDatabase countAssetCacheItems]
  -[CKDatabase showAssetCache]
  -[CKDatabase clearRecordCache]
  -[CKDatabase clearAuthTokensForRecordWithID:]
  -[CKDatabase getPCSDiagnosticsForZonesWithCompletionHandler:]
  -[CKDatabase getCorruptRecordsForAllZonesWithCompletionHandler:]
  -[CKDatabase clearCachesWithOptions:completionHandler:]
  -[CKDatabase clearCacheEntriesForRecord:completionHandler:]
  -[CKDatabase clearCacheEntriesForZone:completionHandler:]
  -[CKDatabase _scheduleOperation:]
  -[CKDatabase fetchRecordWithID:completionHandler:]
  -[CKDatabase saveRecord:completionHandler:]
  -[CKDatabase deleteRecordWithID:completionHandler:]
  -[CKDatabase performQuery:inZoneWithID:completionHandler:]
  -[CKDatabase fetchAllRecordZonesWithCompletionHandler:]
  -[CKDatabase fetchRecordZoneWithID:completionHandler:]
  -[CKDatabase saveRecordZone:completionHandler:]
  -[CKDatabase deleteRecordZoneWithID:completionHandler:]
  -[CKDatabase saveSubscription:completionHandler:]
  -[CKDatabase deleteSubscriptionWithID:completionHandler:]
  -[CKDatabase fetchSubscriptionWithID:completionHandler:]
  -[CKDatabase fetchAllSubscriptionsWithCompletionHandler:]


CKAcceptSharesOperation : CKOperation
 @property  NSMutableDictionary *errorsByShareURL
 @property  NSMutableDictionary *shareMetadatasByShareURL
 @property  NSArray *shareMetadatas
 @property  @? perShareCompletionBlock
 @property  @? acceptSharesCompletionBlock

  // instance methods
  -[CKAcceptSharesOperation init]
  -[CKAcceptSharesOperation .cxx_destruct]
  -[CKAcceptSharesOperation fillOutOperationInfo:]
  -[CKAcceptSharesOperation fillFromOperationInfo:]
  -[CKAcceptSharesOperation hasCKOperationCallbacksSet]
  -[CKAcceptSharesOperation CKOperationShouldRun:]
  -[CKAcceptSharesOperation _finishOnCallbackQueueWithError:]
  -[CKAcceptSharesOperation activityCreate]
  -[CKAcceptSharesOperation performCKOperation]
  -[CKAcceptSharesOperation _handleProgressCallback:]
  -[CKAcceptSharesOperation initWithShareMetadatas:]
  -[CKAcceptSharesOperation setPerShareCompletionBlock:]
  -[CKAcceptSharesOperation setAcceptSharesCompletionBlock:]
  -[CKAcceptSharesOperation setShareMetadatas:]
  -[CKAcceptSharesOperation shareMetadatas]
  -[CKAcceptSharesOperation perShareCompletionBlock]
  -[CKAcceptSharesOperation acceptSharesCompletionBlock]
  -[CKAcceptSharesOperation shareMetadatasByShareURL]
  -[CKAcceptSharesOperation errorsByShareURL]
  -[CKAcceptSharesOperation setErrorsByShareURL:]
  -[CKAcceptSharesOperation setShareMetadatasByShareURL:]


CKAcceptSharesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *shareMetadatasToAccept

  // class methods
  +[CKAcceptSharesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKAcceptSharesOperationInfo encodeWithCoder:]
  -[CKAcceptSharesOperationInfo initWithCoder:]
  -[CKAcceptSharesOperationInfo .cxx_destruct]
  -[CKAcceptSharesOperationInfo databaseScope]
  -[CKAcceptSharesOperationInfo setShareMetadatasToAccept:]
  -[CKAcceptSharesOperationInfo shareMetadatasToAccept]


CKReference : NSObject /usr/lib/libSystem.B.dylib <CKRecordValue, NSSecureCoding, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  CKRecordID *recordID
 @property  unsigned long referenceAction

  // class methods
  +[CKReference supportsSecureCoding]
  +[CKReference ckReferenceActionForCKDPRecordReferenceType:]
  +[CKReference ckdpReferenceTypeForCKReferenceAction:]

  // instance methods
  -[CKReference init]
  -[CKReference isEqual:]
  -[CKReference copyWithZone:]
  -[CKReference encodeWithCoder:]
  -[CKReference initWithCoder:]
  -[CKReference .cxx_destruct]
  -[CKReference recordID]
  -[CKReference setRecordID:]
  -[CKReference CKPropertiesDescription]
  -[CKReference ckShortDescription]
  -[CKReference CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKReference referenceAction]
  -[CKReference initWithRecord:action:]
  -[CKReference initWithRecordID:action:]
  -[CKReference _initBare]


CKFetchShareParticipantKeyOperation : CKDatabaseOperation
 @property  NSArray *shareIDs
 @property  NSMutableDictionary *errorsByShareID
 @property  NSDictionary *baseTokensByShareID
 @property  NSDictionary *childRecordIDsByShareID
 @property  @? shareParticipantKeyFetchedBlock
 @property  @? shareParticipantKeyCompletionBlock

  // instance methods
  -[CKFetchShareParticipantKeyOperation .cxx_destruct]
  -[CKFetchShareParticipantKeyOperation fillOutOperationInfo:]
  -[CKFetchShareParticipantKeyOperation fillFromOperationInfo:]
  -[CKFetchShareParticipantKeyOperation hasCKOperationCallbacksSet]
  -[CKFetchShareParticipantKeyOperation CKOperationShouldRun:]
  -[CKFetchShareParticipantKeyOperation _finishOnCallbackQueueWithError:]
  -[CKFetchShareParticipantKeyOperation activityCreate]
  -[CKFetchShareParticipantKeyOperation performCKOperation]
  -[CKFetchShareParticipantKeyOperation _handleProgressCallback:]
  -[CKFetchShareParticipantKeyOperation operationInfoClass]
  -[CKFetchShareParticipantKeyOperation shareIDs]
  -[CKFetchShareParticipantKeyOperation setShareIDs:]
  -[CKFetchShareParticipantKeyOperation baseTokensByShareID]
  -[CKFetchShareParticipantKeyOperation setBaseTokensByShareID:]
  -[CKFetchShareParticipantKeyOperation childRecordIDsByShareID]
  -[CKFetchShareParticipantKeyOperation setChildRecordIDsByShareID:]
  -[CKFetchShareParticipantKeyOperation shareParticipantKeyFetchedBlock]
  -[CKFetchShareParticipantKeyOperation shareParticipantKeyCompletionBlock]
  -[CKFetchShareParticipantKeyOperation errorsByShareID]
  -[CKFetchShareParticipantKeyOperation setShareParticipantKeyCompletionBlock:]
  -[CKFetchShareParticipantKeyOperation setShareParticipantKeyFetchedBlock:]
  -[CKFetchShareParticipantKeyOperation initWithShareIDs:]
  -[CKFetchShareParticipantKeyOperation setErrorsByShareID:]


CKFetchShareParticipantKeyOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSDictionary *baseTokensByShareID
 @property  NSDictionary *childRecordIDsByShareID
 @property  NSArray *shareIDs

  // class methods
  +[CKFetchShareParticipantKeyOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchShareParticipantKeyOperationInfo encodeWithCoder:]
  -[CKFetchShareParticipantKeyOperationInfo initWithCoder:]
  -[CKFetchShareParticipantKeyOperationInfo .cxx_destruct]
  -[CKFetchShareParticipantKeyOperationInfo shareIDs]
  -[CKFetchShareParticipantKeyOperationInfo setShareIDs:]
  -[CKFetchShareParticipantKeyOperationInfo baseTokensByShareID]
  -[CKFetchShareParticipantKeyOperationInfo setBaseTokensByShareID:]
  -[CKFetchShareParticipantKeyOperationInfo childRecordIDsByShareID]
  -[CKFetchShareParticipantKeyOperationInfo setChildRecordIDsByShareID:]


CKAPSMachServiceConnectionKey : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *environmentName
 @property  NSString *namedDelegatePort

  // instance methods
  -[CKAPSMachServiceConnectionKey isEqual:]
  -[CKAPSMachServiceConnectionKey copyWithZone:]
  -[CKAPSMachServiceConnectionKey .cxx_destruct]
  -[CKAPSMachServiceConnectionKey initWithEnvironmentName:namedDelegatePort:]
  -[CKAPSMachServiceConnectionKey environmentName]
  -[CKAPSMachServiceConnectionKey namedDelegatePort]
  -[CKAPSMachServiceConnectionKey setEnvironmentName:]
  -[CKAPSMachServiceConnectionKey setNamedDelegatePort:]


CKAPSMachServiceConnectionDelegate : NSObject /usr/lib/libSystem.B.dylib <APSConnectionDelegate>
 @property  APSConnection *connection
 @property  CKAPSMachServiceConnectionKey *key
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKAPSMachServiceConnectionDelegate key]
  -[CKAPSMachServiceConnectionDelegate .cxx_destruct]
  -[CKAPSMachServiceConnectionDelegate setKey:]
  -[CKAPSMachServiceConnectionDelegate connection]
  -[CKAPSMachServiceConnectionDelegate setConnection:]
  -[CKAPSMachServiceConnectionDelegate connection:didReceivePublicToken:]
  -[CKAPSMachServiceConnectionDelegate connection:didReceiveIncomingMessage:]
  -[CKAPSMachServiceConnectionDelegate connection:didReceiveToken:forTopic:identifier:]
  -[CKAPSMachServiceConnectionDelegate connection:didReceiveMessageForTopic:userInfo:]
  -[CKAPSMachServiceConnectionDelegate connection:didSendOutgoingMessage:]
  -[CKAPSMachServiceConnectionDelegate connection:didFailToSendOutgoingMessage:error:]
  -[CKAPSMachServiceConnectionDelegate connection:didChangeConnectedStatus:]
  -[CKAPSMachServiceConnectionDelegate connectionDidReconnect:]
  -[CKAPSMachServiceConnectionDelegate initWithConnection:key:]


CKOperationGroup : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  CKOperationGroupSystemImposedInfo *systemImposedInfo
 @property  NSNumber *quantityNumber
 @property  NSString *authPromptReason
 @property  long long approximateSendBytes
 @property  long long approximateReceiveBytes
 @property  NSString *operationGroupID
 @property  CKOperationConfiguration *defaultConfiguration
 @property  NSString *name
 @property  unsigned long quantity
 @property  long long expectedSendSize
 @property  long long expectedReceiveSize

  // class methods
  +[CKOperationGroup supportsSecureCoding]

  // instance methods
  -[CKOperationGroup init]
  -[CKOperationGroup name]
  -[CKOperationGroup encodeWithCoder:]
  -[CKOperationGroup initWithCoder:]
  -[CKOperationGroup .cxx_destruct]
  -[CKOperationGroup setName:]
  -[CKOperationGroup defaultConfiguration]
  -[CKOperationGroup CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKOperationGroup setDefaultConfiguration:]
  -[CKOperationGroup setSystemImposedInfo:]
  -[CKOperationGroup authPromptReason]
  -[CKOperationGroup quantityNumber]
  -[CKOperationGroup setQuantityNumber:]
  -[CKOperationGroup systemImposedInfo]
  -[CKOperationGroup expectedSendSize]
  -[CKOperationGroup expectedReceiveSize]
  -[CKOperationGroup _approximateBytesForTransferSize:]
  -[CKOperationGroup operationGroupID]
  -[CKOperationGroup quantity]
  -[CKOperationGroup setQuantity:]
  -[CKOperationGroup setExpectedSendSize:]
  -[CKOperationGroup setExpectedReceiveSize:]
  -[CKOperationGroup approximateSendBytes]
  -[CKOperationGroup approximateReceiveBytes]
  -[CKOperationGroup resolvedNetworkServiceTypeForConfig:]
  -[CKOperationGroup setAuthPromptReason:]


CKOperationGroupSystemImposedInfoConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  BOOL isUplink
 @property  BOOL allowsCellularAccess

  // class methods
  +[CKOperationGroupSystemImposedInfoConfiguration supportsSecureCoding]

  // instance methods
  -[CKOperationGroupSystemImposedInfoConfiguration isEqual:]
  -[CKOperationGroupSystemImposedInfoConfiguration copyWithZone:]
  -[CKOperationGroupSystemImposedInfoConfiguration encodeWithCoder:]
  -[CKOperationGroupSystemImposedInfoConfiguration initWithCoder:]
  -[CKOperationGroupSystemImposedInfoConfiguration setAllowsCellularAccess:]
  -[CKOperationGroupSystemImposedInfoConfiguration allowsCellularAccess]
  -[CKOperationGroupSystemImposedInfoConfiguration isUplink]
  -[CKOperationGroupSystemImposedInfoConfiguration setIsUplink:]


CKOperationGroupSystemImposedInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSDictionary *networkServiceTypePerConfig
 @property  long long expectedSendSize
 @property  long long expectedReceiveSize

  // class methods
  +[CKOperationGroupSystemImposedInfo supportsSecureCoding]

  // instance methods
  -[CKOperationGroupSystemImposedInfo encodeWithCoder:]
  -[CKOperationGroupSystemImposedInfo initWithCoder:]
  -[CKOperationGroupSystemImposedInfo .cxx_destruct]
  -[CKOperationGroupSystemImposedInfo expectedSendSize]
  -[CKOperationGroupSystemImposedInfo expectedReceiveSize]
  -[CKOperationGroupSystemImposedInfo networkServiceTypePerConfig]
  -[CKOperationGroupSystemImposedInfo setExpectedSendSize:]
  -[CKOperationGroupSystemImposedInfo setExpectedReceiveSize:]
  -[CKOperationGroupSystemImposedInfo setNetworkServiceTypePerConfig:]


CKPublicKey : NSObject /usr/lib/libSystem.B.dylib
 @property  NSData *publicKey
 @property  long long version
 @property  NSDate *expiration
 @property  NSData *certData

  // instance methods
  -[CKPublicKey .cxx_destruct]
  -[CKPublicKey version]
  -[CKPublicKey publicKey]
  -[CKPublicKey expiration]
  -[CKPublicKey initWithPublicKey:version:expiration:certificateData:]
  -[CKPublicKey hasExpired]
  -[CKPublicKey certData]


CKDPLocationCoordinate : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasLatitude
 @property  double latitude
 @property  BOOL hasLongitude
 @property  double longitude
 @property  BOOL hasHorizontalAccuracy
 @property  double horizontalAccuracy
 @property  BOOL hasAltitude
 @property  double altitude
 @property  BOOL hasVerticalAccuracy
 @property  double verticalAccuracy
 @property  BOOL hasCourse
 @property  double course
 @property  BOOL hasSpeed
 @property  double speed
 @property  BOOL hasTimestamp
 @property  CKDPDate *timestamp

  // instance methods
  -[CKDPLocationCoordinate isEqual:]
  -[CKDPLocationCoordinate copyWithZone:]
  -[CKDPLocationCoordinate .cxx_destruct]
  -[CKDPLocationCoordinate dictionaryRepresentation]
  -[CKDPLocationCoordinate timestamp]
  -[CKDPLocationCoordinate hasTimestamp]
  -[CKDPLocationCoordinate setTimestamp:]
  -[CKDPLocationCoordinate writeTo:]
  -[CKDPLocationCoordinate latitude]
  -[CKDPLocationCoordinate longitude]
  -[CKDPLocationCoordinate mergeFrom:]
  -[CKDPLocationCoordinate readFrom:]
  -[CKDPLocationCoordinate copyTo:]
  -[CKDPLocationCoordinate setLongitude:]
  -[CKDPLocationCoordinate setLatitude:]
  -[CKDPLocationCoordinate speed]
  -[CKDPLocationCoordinate setSpeed:]
  -[CKDPLocationCoordinate horizontalAccuracy]
  -[CKDPLocationCoordinate setAltitude:]
  -[CKDPLocationCoordinate setHorizontalAccuracy:]
  -[CKDPLocationCoordinate setVerticalAccuracy:]
  -[CKDPLocationCoordinate setCourse:]
  -[CKDPLocationCoordinate altitude]
  -[CKDPLocationCoordinate verticalAccuracy]
  -[CKDPLocationCoordinate course]
  -[CKDPLocationCoordinate setHasLatitude:]
  -[CKDPLocationCoordinate hasLatitude]
  -[CKDPLocationCoordinate setHasLongitude:]
  -[CKDPLocationCoordinate hasLongitude]
  -[CKDPLocationCoordinate setHasHorizontalAccuracy:]
  -[CKDPLocationCoordinate hasHorizontalAccuracy]
  -[CKDPLocationCoordinate setHasAltitude:]
  -[CKDPLocationCoordinate hasAltitude]
  -[CKDPLocationCoordinate setHasVerticalAccuracy:]
  -[CKDPLocationCoordinate hasVerticalAccuracy]
  -[CKDPLocationCoordinate setHasCourse:]
  -[CKDPLocationCoordinate hasCourse]
  -[CKDPLocationCoordinate setHasSpeed:]
  -[CKDPLocationCoordinate hasSpeed]


CKDPIdentifier : PBCodable /System/Library/Frameworks/PushKit.framework/PushKit <NSCopying>
 @property  BOOL hasName
 @property  NSString *name
 @property  BOOL hasType
 @property  int type

  // instance methods
  -[CKDPIdentifier isEqual:]
  -[CKDPIdentifier name]
  -[CKDPIdentifier copyWithZone:]
  -[CKDPIdentifier type]
  -[CKDPIdentifier setType:]
  -[CKDPIdentifier .cxx_destruct]
  -[CKDPIdentifier setName:]
  -[CKDPIdentifier dictionaryRepresentation]
  -[CKDPIdentifier writeTo:]
  -[CKDPIdentifier mergeFrom:]
  -[CKDPIdentifier readFrom:]
  -[CKDPIdentifier copyTo:]
  -[CKDPIdentifier typeAsString:]
  -[CKDPIdentifier StringAsType:]
  -[CKDPIdentifier hasName]
  -[CKDPIdentifier setHasType:]
  -[CKDPIdentifier hasType]


CKSyncEngineFetchChangesOperation : NSOperation /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  NSError *error
 @property  NSOperationQueue *operationQueue
 @property  BOOL isExecuting
 @property  BOOL isFinished
 @property  CKDatabase *database
 @property  CKServerChangeToken *previousDatabaseServerChangeToken
 @property  CKOperationGroup *group
 @property  @? recordZoneWithIDChangedBlock
 @property  @? recordZoneWithIDWasDeletedBlock
 @property  @? recordZoneWithIDWasPurgedBlock
 @property  @? databaseChangeTokenUpdatedBlock
 @property  @? fetchDatabaseChangesCompletionBlock
 @property  @? recordZoneChangesConfigurationBlock
 @property  @? recordChangedBlock
 @property  @? recordWithIDWasDeletedBlock
 @property  @? recordZoneChangeTokensUpdatedBlock
 @property  @? recordZoneFetchCompletionBlock
 @property  @? willEnqueueOperationBlock
 @property  @? fetchChangesCompletionBlock

  // instance methods
  -[CKSyncEngineFetchChangesOperation init]
  -[CKSyncEngineFetchChangesOperation .cxx_destruct]
  -[CKSyncEngineFetchChangesOperation setGroup:]
  -[CKSyncEngineFetchChangesOperation error]
  -[CKSyncEngineFetchChangesOperation cancel]
  -[CKSyncEngineFetchChangesOperation operationQueue]
  -[CKSyncEngineFetchChangesOperation setOperationQueue:]
  -[CKSyncEngineFetchChangesOperation start]
  -[CKSyncEngineFetchChangesOperation setError:]
  -[CKSyncEngineFetchChangesOperation isFinished]
  -[CKSyncEngineFetchChangesOperation isExecuting]
  -[CKSyncEngineFetchChangesOperation isAsynchronous]
  -[CKSyncEngineFetchChangesOperation database]
  -[CKSyncEngineFetchChangesOperation finishWithError:]
  -[CKSyncEngineFetchChangesOperation setRecordChangedBlock:]
  -[CKSyncEngineFetchChangesOperation setRecordWithIDWasDeletedBlock:]
  -[CKSyncEngineFetchChangesOperation setRecordZoneFetchCompletionBlock:]
  -[CKSyncEngineFetchChangesOperation group]
  -[CKSyncEngineFetchChangesOperation setRecordZoneWithIDChangedBlock:]
  -[CKSyncEngineFetchChangesOperation setRecordZoneWithIDWasDeletedBlock:]
  -[CKSyncEngineFetchChangesOperation setFetchDatabaseChangesCompletionBlock:]
  -[CKSyncEngineFetchChangesOperation setIsFinished:]
  -[CKSyncEngineFetchChangesOperation setRecordZoneWithIDWasPurgedBlock:]
  -[CKSyncEngineFetchChangesOperation setRecordZoneChangeTokensUpdatedBlock:]
  -[CKSyncEngineFetchChangesOperation initWithDatabase:]
  -[CKSyncEngineFetchChangesOperation setWillEnqueueOperationBlock:]
  -[CKSyncEngineFetchChangesOperation setPreviousDatabaseServerChangeToken:]
  -[CKSyncEngineFetchChangesOperation setDatabaseChangeTokenUpdatedBlock:]
  -[CKSyncEngineFetchChangesOperation setRecordZoneChangesConfigurationBlock:]
  -[CKSyncEngineFetchChangesOperation setFetchChangesCompletionBlock:]
  -[CKSyncEngineFetchChangesOperation recordZoneWithIDChangedBlock]
  -[CKSyncEngineFetchChangesOperation recordZoneWithIDWasDeletedBlock]
  -[CKSyncEngineFetchChangesOperation fetchDatabaseChangesCompletionBlock]
  -[CKSyncEngineFetchChangesOperation recordZoneWithIDWasPurgedBlock]
  -[CKSyncEngineFetchChangesOperation recordZoneChangeTokensUpdatedBlock]
  -[CKSyncEngineFetchChangesOperation recordZoneFetchCompletionBlock]
  -[CKSyncEngineFetchChangesOperation setIsExecuting:]
  -[CKSyncEngineFetchChangesOperation recordChangedBlock]
  -[CKSyncEngineFetchChangesOperation recordWithIDWasDeletedBlock]
  -[CKSyncEngineFetchChangesOperation cancelledError]
  -[CKSyncEngineFetchChangesOperation fetchChangesCompletionBlock]
  -[CKSyncEngineFetchChangesOperation previousDatabaseServerChangeToken]
  -[CKSyncEngineFetchChangesOperation databaseChangeTokenUpdatedBlock]
  -[CKSyncEngineFetchChangesOperation recordZoneChangesConfigurationBlock]
  -[CKSyncEngineFetchChangesOperation willEnqueueOperationBlock]


CKEncryptedData : NSObject /usr/lib/libSystem.B.dylib <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSData *data
 @property  NSData *encryptedData
 @property  BOOL needsEncryption
 @property  BOOL needsDecryption
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKEncryptedData supportsSecureCoding]

  // instance methods
  -[CKEncryptedData init]
  -[CKEncryptedData isEqual:]
  -[CKEncryptedData copyWithZone:]
  -[CKEncryptedData encodeWithCoder:]
  -[CKEncryptedData initWithCoder:]
  -[CKEncryptedData initWithData:]
  -[CKEncryptedData .cxx_destruct]
  -[CKEncryptedData data]
  -[CKEncryptedData value]
  -[CKEncryptedData setData:]
  -[CKEncryptedData initWithValue:]
  -[CKEncryptedData CKPropertiesDescription]
  -[CKEncryptedData CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKEncryptedData encryptedData]
  -[CKEncryptedData needsDecryption]
  -[CKEncryptedData initWithEncryptedData:]
  -[CKEncryptedData needsEncryption]
  -[CKEncryptedData setEncryptedData:]


CKEncryptedString : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSString *string
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedString string]
  -[CKEncryptedString initWithString:]
  -[CKEncryptedString value]


CKEncryptedLongLong : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  long long longLongValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedLongLong longLongValue]
  -[CKEncryptedLongLong initWithLongLong:]
  -[CKEncryptedLongLong value]


CKEncryptedDouble : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  double doubleValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedDouble doubleValue]
  -[CKEncryptedDouble initWithDouble:]
  -[CKEncryptedDouble value]


CKEncryptedDate : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedDate date]
  -[CKEncryptedDate initWithDate:]
  -[CKEncryptedDate value]


CKEncryptedReference : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  CKReference *reference
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedReference value]
  -[CKEncryptedReference initWithReference:]
  -[CKEncryptedReference _pReferenceFromReference:]
  -[CKEncryptedReference _referenceFromPReference:]
  -[CKEncryptedReference reference]
  -[CKEncryptedReference _recordIDFromPRecordIdentifier:]


CKEncryptedLocation : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  CLLocation *location
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedLocation value]
  -[CKEncryptedLocation location]
  -[CKEncryptedLocation initWithLocation:]


CKEncryptedStringArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSArray *stringArray
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedStringArray value]
  -[CKEncryptedStringArray initWithStringArray:]
  -[CKEncryptedStringArray stringArray]


CKEncryptedDoubleArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSArray *doubleArray
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedDoubleArray value]
  -[CKEncryptedDoubleArray initWithDoubleArray:]
  -[CKEncryptedDoubleArray doubleArray]


CKEncryptedLongLongArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSArray *longLongArray
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedLongLongArray value]
  -[CKEncryptedLongLongArray initWithLongLongArray:]
  -[CKEncryptedLongLongArray longLongArray]


CKEncryptedDateArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSArray *dateArray
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedDateArray value]
  -[CKEncryptedDateArray initWithDateArray:]
  -[CKEncryptedDateArray dateArray]


CKEncryptedLocationArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  NSArray *locationArray
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedLocationArray value]
  -[CKEncryptedLocationArray initWithLocationArray:]
  -[CKEncryptedLocationArray locationArray]


CKEncryptedEmptyArray : CKEncryptedData <CKRecordValue, NSCopying, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKEncryptedEmptyArray value]


CKSQLiteStatementEnumerator : NSEnumerator
 @property  CKSQLiteStatement *statement
 @property  @? block
 @property  BOOL closed

  // instance methods
  -[CKSQLiteStatementEnumerator dealloc]
  -[CKSQLiteStatementEnumerator nextObject]
  -[CKSQLiteStatementEnumerator close]
  -[CKSQLiteStatementEnumerator .cxx_destruct]
  -[CKSQLiteStatementEnumerator block]
  -[CKSQLiteStatementEnumerator closed]
  -[CKSQLiteStatementEnumerator setBlock:]
  -[CKSQLiteStatementEnumerator statement]
  -[CKSQLiteStatementEnumerator setStatement:]
  -[CKSQLiteStatementEnumerator setClosed:]
  -[CKSQLiteStatementEnumerator initWithStatement:block:]


CKSyncEngineModifyRecordBatchesOperation : NSOperation /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  NSError *error
 @property  NSOperationQueue *operationQueue
 @property  BOOL isExecuting
 @property  BOOL isFinished
 @property  CKDatabase *database
 @property  CKOperationGroup *group
 @property  @? populateNextBatchBlock
 @property  @? perRecordProgressBlock
 @property  @? perRecordSaveCompletionBlock
 @property  @? batchCompletionBlock
 @property  @? modifyRecordBatchesCompletionBlock
 @property  @? willEnqueueOperationBlock

  // instance methods
  -[CKSyncEngineModifyRecordBatchesOperation init]
  -[CKSyncEngineModifyRecordBatchesOperation .cxx_destruct]
  -[CKSyncEngineModifyRecordBatchesOperation setGroup:]
  -[CKSyncEngineModifyRecordBatchesOperation error]
  -[CKSyncEngineModifyRecordBatchesOperation cancel]
  -[CKSyncEngineModifyRecordBatchesOperation operationQueue]
  -[CKSyncEngineModifyRecordBatchesOperation setOperationQueue:]
  -[CKSyncEngineModifyRecordBatchesOperation start]
  -[CKSyncEngineModifyRecordBatchesOperation setError:]
  -[CKSyncEngineModifyRecordBatchesOperation isFinished]
  -[CKSyncEngineModifyRecordBatchesOperation isExecuting]
  -[CKSyncEngineModifyRecordBatchesOperation isAsynchronous]
  -[CKSyncEngineModifyRecordBatchesOperation database]
  -[CKSyncEngineModifyRecordBatchesOperation finishWithError:]
  -[CKSyncEngineModifyRecordBatchesOperation group]
  -[CKSyncEngineModifyRecordBatchesOperation setIsFinished:]
  -[CKSyncEngineModifyRecordBatchesOperation setPerRecordProgressBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation initWithDatabase:]
  -[CKSyncEngineModifyRecordBatchesOperation setPopulateNextBatchBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation setPerRecordSaveCompletionBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation setBatchCompletionBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation setModifyRecordBatchesCompletionBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation setWillEnqueueOperationBlock:]
  -[CKSyncEngineModifyRecordBatchesOperation setIsExecuting:]
  -[CKSyncEngineModifyRecordBatchesOperation cancelledError]
  -[CKSyncEngineModifyRecordBatchesOperation willEnqueueOperationBlock]
  -[CKSyncEngineModifyRecordBatchesOperation addNextModifyOperationOrFinishIfNoRemainingWork]
  -[CKSyncEngineModifyRecordBatchesOperation modifyRecordBatchesCompletionBlock]
  -[CKSyncEngineModifyRecordBatchesOperation populateNextBatchBlock]
  -[CKSyncEngineModifyRecordBatchesOperation operationToModifyBatch:]
  -[CKSyncEngineModifyRecordBatchesOperation perRecordProgressBlock]
  -[CKSyncEngineModifyRecordBatchesOperation perRecordSaveCompletionBlock]
  -[CKSyncEngineModifyRecordBatchesOperation batchCompletionBlock]


CKObjCProperty : NSObject /usr/lib/libSystem.B.dylib
 @property  Class classHandle
 @property  CKObjCType *type
 @property  NSString *name
 @property  unsigned long flags
 @property  SEL getterSelector
 @property  NSString *getterSelectorName
 @property  NSMethodSignature *getterMethodSignature
 @property  SEL setterSelector
 @property  NSString *setterSelectorName
 @property  NSMethodSignature *setterMethodSignature
 @property  NSString *instanceVariableName

  // instance methods
  -[CKObjCProperty name]
  -[CKObjCProperty type]
  -[CKObjCProperty compare:]
  -[CKObjCProperty .cxx_destruct]
  -[CKObjCProperty flags]
  -[CKObjCProperty getFromObject:]
  -[CKObjCProperty initWithClass:property:]
  -[CKObjCProperty compareToProperty:]
  -[CKObjCProperty setValue:onObject:]
  -[CKObjCProperty classHandle]
  -[CKObjCProperty getterSelector]
  -[CKObjCProperty getterSelectorName]
  -[CKObjCProperty getterMethodSignature]
  -[CKObjCProperty setterSelector]
  -[CKObjCProperty setterSelectorName]
  -[CKObjCProperty setterMethodSignature]
  -[CKObjCProperty instanceVariableName]


CKQuerySubscription : CKSubscription <NSSecureCoding, NSCopying>
 @property  NSString *recordType
 @property  NSPredicate *predicate
 @property  CKRecordZoneID *zoneID
 @property  unsigned long querySubscriptionOptions

  // instance methods
  -[CKQuerySubscription copyWithZone:]
  -[CKQuerySubscription initWithRecordType:predicate:subscriptionID:options:]
  -[CKQuerySubscription querySubscriptionOptions]
  -[CKQuerySubscription initWithRecordType:predicate:options:]


CKRecordZoneSubscription : CKSubscription <NSSecureCoding, NSCopying>
 @property  CKRecordZoneID *zoneID
 @property  NSString *recordType

  // instance methods
  -[CKRecordZoneSubscription copyWithZone:]
  -[CKRecordZoneSubscription initWithZoneID:]
  -[CKRecordZoneSubscription initWithZoneID:subscriptionID:]


CKDatabaseSubscription : CKSubscription <NSSecureCoding, NSCopying>
 @property  NSString *recordType

  // class methods
  +[CKDatabaseSubscription new]

  // instance methods
  -[CKDatabaseSubscription init]
  -[CKDatabaseSubscription copyWithZone:]
  -[CKDatabaseSubscription initWithSubscriptionID:]


CKSubscription : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKRecordZoneID *zoneID
 @property  NSString *recordType
 @property  NSPredicate *predicate
 @property  NSString *subscriptionID
 @property  long long subscriptionType
 @property  unsigned long subscriptionOptions
 @property  CKNotificationInfo *notificationInfo

  // class methods
  +[CKSubscription supportsSecureCoding]

  // instance methods
  -[CKSubscription init]
  -[CKSubscription isEqual:]
  -[CKSubscription copyWithZone:]
  -[CKSubscription encodeWithCoder:]
  -[CKSubscription initWithCoder:]
  -[CKSubscription .cxx_destruct]
  -[CKSubscription setPredicate:]
  -[CKSubscription predicate]
  -[CKSubscription zoneID]
  -[CKSubscription recordType]
  -[CKSubscription setNotificationInfo:]
  -[CKSubscription setZoneID:]
  -[CKSubscription notificationInfo]
  -[CKSubscription subscriptionID]
  -[CKSubscription CKPropertiesDescription]
  -[CKSubscription setRecordType:]
  -[CKSubscription _initBare]
  -[CKSubscription setSubscriptionID:]
  -[CKSubscription _initWithRecordType:predicate:subscriptionID:options:]
  -[CKSubscription initWithRecordType:predicate:subscriptionID:options:]
  -[CKSubscription _subscriptionOptions]
  -[CKSubscription initWithRecordType:predicate:options:]
  -[CKSubscription _initWithZoneID:subscriptionID:options:]
  -[CKSubscription _initWithSubscriptionType:subscriptionID:options:]
  -[CKSubscription subscriptionType]
  -[CKSubscription subscriptionOptions]
  -[CKSubscription _validateSubscriptionOptions:]
  -[CKSubscription initWithZoneID:options:]
  -[CKSubscription initWithZoneID:subscriptionID:options:]
  -[CKSubscription setSubscriptionOptions:]
  -[CKSubscription setSubscriptionType:]


CKNotificationInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  NSString *alertBody
 @property  NSString *alertLocalizationKey
 @property  NSArray *alertLocalizationArgs
 @property  NSString *title
 @property  NSString *titleLocalizationKey
 @property  NSArray *titleLocalizationArgs
 @property  NSString *subtitle
 @property  NSString *subtitleLocalizationKey
 @property  NSArray *subtitleLocalizationArgs
 @property  NSString *alertActionLocalizationKey
 @property  NSString *alertLaunchImage
 @property  NSString *soundName
 @property  NSArray *desiredKeys
 @property  BOOL shouldBadge
 @property  BOOL shouldSendContentAvailable
 @property  BOOL shouldSendMutableContent
 @property  NSString *category
 @property  NSString *collapseIDKey

  // class methods
  +[CKNotificationInfo supportsSecureCoding]
  +[CKNotificationInfo notificationInfo]

  // instance methods
  -[CKNotificationInfo isEqual:]
  -[CKNotificationInfo copyWithZone:]
  -[CKNotificationInfo encodeWithCoder:]
  -[CKNotificationInfo initWithCoder:]
  -[CKNotificationInfo .cxx_destruct]
  -[CKNotificationInfo category]
  -[CKNotificationInfo setCategory:]
  -[CKNotificationInfo title]
  -[CKNotificationInfo setTitle:]
  -[CKNotificationInfo subtitle]
  -[CKNotificationInfo setShouldSendContentAvailable:]
  -[CKNotificationInfo setDesiredKeys:]
  -[CKNotificationInfo setSubtitle:]
  -[CKNotificationInfo setAlertBody:]
  -[CKNotificationInfo setAlertLaunchImage:]
  -[CKNotificationInfo setSoundName:]
  -[CKNotificationInfo alertBody]
  -[CKNotificationInfo alertLaunchImage]
  -[CKNotificationInfo soundName]
  -[CKNotificationInfo setAlertLocalizationKey:]
  -[CKNotificationInfo setAlertLocalizationArgs:]
  -[CKNotificationInfo setTitleLocalizationKey:]
  -[CKNotificationInfo setTitleLocalizationArgs:]
  -[CKNotificationInfo setSubtitleLocalizationKey:]
  -[CKNotificationInfo setSubtitleLocalizationArgs:]
  -[CKNotificationInfo setAlertActionLocalizationKey:]
  -[CKNotificationInfo desiredKeys]
  -[CKNotificationInfo alertLocalizationKey]
  -[CKNotificationInfo alertLocalizationArgs]
  -[CKNotificationInfo titleLocalizationKey]
  -[CKNotificationInfo titleLocalizationArgs]
  -[CKNotificationInfo subtitleLocalizationKey]
  -[CKNotificationInfo subtitleLocalizationArgs]
  -[CKNotificationInfo alertActionLocalizationKey]
  -[CKNotificationInfo shouldBadge]
  -[CKNotificationInfo shouldSendContentAvailable]
  -[CKNotificationInfo shouldSendMutableContent]
  -[CKNotificationInfo collapseIDKey]
  -[CKNotificationInfo _setAlertBodyNoValidate:]
  -[CKNotificationInfo _setAlertLocalizationKeyNoValidate:]
  -[CKNotificationInfo _setAlertLocalizationArgsNoValidate:]
  -[CKNotificationInfo _setTitleNoValidate:]
  -[CKNotificationInfo _setTitleLocalizationKeyNoValidate:]
  -[CKNotificationInfo _setTitleLocalizationArgsNoValidate:]
  -[CKNotificationInfo _setSubtitleNoValidate:]
  -[CKNotificationInfo _setSubtitleLocalizationKeyNoValidate:]
  -[CKNotificationInfo _setSubtitleLocalizationArgsNoValidate:]
  -[CKNotificationInfo _setAlertActionLocalizationKeyNoValidate:]
  -[CKNotificationInfo _setAlertLaunchImageNoValidate:]
  -[CKNotificationInfo _setSoundNameNoValidate:]
  -[CKNotificationInfo _setShouldBadgeNoValidate:]
  -[CKNotificationInfo _setShouldSendContentAvailableNoValidate:]
  -[CKNotificationInfo _setShouldSendMutableContentNoValidate:]
  -[CKNotificationInfo _setCategoryNoValidate:]
  -[CKNotificationInfo setCollapseIDKey:]
  -[CKNotificationInfo setShouldBadge:]
  -[CKNotificationInfo setShouldSendMutableContent:]


CKModifySubscriptionsOperation : CKDatabaseOperation
 @property  NSMutableArray *savedSubscriptions
 @property  NSMutableArray *deletedSubscriptionIDs
 @property  NSMutableDictionary *subscriptionsBySubscriptionIDs
 @property  NSMutableDictionary *subscriptionErrors
 @property  NSArray *subscriptionsToSave
 @property  NSArray *subscriptionIDsToDelete
 @property  @? modifySubscriptionsCompletionBlock

  // instance methods
  -[CKModifySubscriptionsOperation init]
  -[CKModifySubscriptionsOperation .cxx_destruct]
  -[CKModifySubscriptionsOperation setSubscriptionsToSave:]
  -[CKModifySubscriptionsOperation setModifySubscriptionsCompletionBlock:]
  -[CKModifySubscriptionsOperation initWithSubscriptionsToSave:subscriptionIDsToDelete:]
  -[CKModifySubscriptionsOperation fillOutOperationInfo:]
  -[CKModifySubscriptionsOperation fillFromOperationInfo:]
  -[CKModifySubscriptionsOperation hasCKOperationCallbacksSet]
  -[CKModifySubscriptionsOperation CKOperationShouldRun:]
  -[CKModifySubscriptionsOperation _finishOnCallbackQueueWithError:]
  -[CKModifySubscriptionsOperation activityCreate]
  -[CKModifySubscriptionsOperation performCKOperation]
  -[CKModifySubscriptionsOperation _handleProgressCallback:]
  -[CKModifySubscriptionsOperation subscriptionsToSave]
  -[CKModifySubscriptionsOperation subscriptionIDsToDelete]
  -[CKModifySubscriptionsOperation setSubscriptionIDsToDelete:]
  -[CKModifySubscriptionsOperation modifySubscriptionsCompletionBlock]
  -[CKModifySubscriptionsOperation subscriptionsBySubscriptionIDs]
  -[CKModifySubscriptionsOperation subscriptionErrors]
  -[CKModifySubscriptionsOperation deletedSubscriptionIDs]
  -[CKModifySubscriptionsOperation savedSubscriptions]
  -[CKModifySubscriptionsOperation setSavedSubscriptions:]
  -[CKModifySubscriptionsOperation setDeletedSubscriptionIDs:]
  -[CKModifySubscriptionsOperation setSubscriptionsBySubscriptionIDs:]
  -[CKModifySubscriptionsOperation setSubscriptionErrors:]


CKModifySubscriptionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *subscriptionsToSave
 @property  NSArray *subscriptionIDsToDelete

  // class methods
  +[CKModifySubscriptionsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifySubscriptionsOperationInfo encodeWithCoder:]
  -[CKModifySubscriptionsOperationInfo initWithCoder:]
  -[CKModifySubscriptionsOperationInfo .cxx_destruct]
  -[CKModifySubscriptionsOperationInfo setSubscriptionsToSave:]
  -[CKModifySubscriptionsOperationInfo subscriptionsToSave]
  -[CKModifySubscriptionsOperationInfo subscriptionIDsToDelete]
  -[CKModifySubscriptionsOperationInfo setSubscriptionIDsToDelete:]


CKFetchRecordZoneChangesOperation : CKDatabaseOperation
 @property  NSDictionary *optionsByRecordZoneID
 @property  NSMutableDictionary *statusByZoneID
 @property  NSMutableSet *zoneIDsWithPendingArchivedRecords
 @property  BOOL shouldFetchAssetContents
 @property  NSMutableDictionary *perItemErrors
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey
 @property  @? perRecordChangeCompletionBlock
 @property  BOOL shouldReportAllPerItemFailures
 @property  NSArray *recordZoneIDs
 @property  NSDictionary *configurationsByRecordZoneID
 @property  BOOL fetchAllChanges
 @property  @? recordChangedBlock
 @property  @? recordWithIDWasDeletedBlock
 @property  @? recordZoneChangeTokensUpdatedBlock
 @property  @? recordZoneFetchCompletionBlock
 @property  @? fetchRecordZoneChangesCompletionBlock

  // instance methods
  -[CKFetchRecordZoneChangesOperation init]
  -[CKFetchRecordZoneChangesOperation .cxx_destruct]
  -[CKFetchRecordZoneChangesOperation initWithRecordZoneIDs:optionsByRecordZoneID:]
  -[CKFetchRecordZoneChangesOperation setFetchAllChanges:]
  -[CKFetchRecordZoneChangesOperation setRecordChangedBlock:]
  -[CKFetchRecordZoneChangesOperation setRecordWithIDWasDeletedBlock:]
  -[CKFetchRecordZoneChangesOperation setRecordZoneFetchCompletionBlock:]
  -[CKFetchRecordZoneChangesOperation setFetchRecordZoneChangesCompletionBlock:]
  -[CKFetchRecordZoneChangesOperation initWithRecordZoneIDs:configurationsByRecordZoneID:]
  -[CKFetchRecordZoneChangesOperation setRecordZoneChangeTokensUpdatedBlock:]
  -[CKFetchRecordZoneChangesOperation fillOutOperationInfo:]
  -[CKFetchRecordZoneChangesOperation fillFromOperationInfo:]
  -[CKFetchRecordZoneChangesOperation hasCKOperationCallbacksSet]
  -[CKFetchRecordZoneChangesOperation CKOperationShouldRun:]
  -[CKFetchRecordZoneChangesOperation _finishOnCallbackQueueWithError:]
  -[CKFetchRecordZoneChangesOperation activityCreate]
  -[CKFetchRecordZoneChangesOperation performCKOperation]
  -[CKFetchRecordZoneChangesOperation _handleProgressCallback:]
  -[CKFetchRecordZoneChangesOperation perItemErrors]
  -[CKFetchRecordZoneChangesOperation setPerItemErrors:]
  -[CKFetchRecordZoneChangesOperation recordZoneIDs]
  -[CKFetchRecordZoneChangesOperation setRecordZoneIDs:]
  -[CKFetchRecordZoneChangesOperation fetchAllChanges]
  -[CKFetchRecordZoneChangesOperation statusByZoneID]
  -[CKFetchRecordZoneChangesOperation configurationsByRecordZoneID]
  -[CKFetchRecordZoneChangesOperation setConfigurationsByRecordZoneID:]
  -[CKFetchRecordZoneChangesOperation shouldFetchAssetContents]
  -[CKFetchRecordZoneChangesOperation setShouldFetchAssetContents:]
  -[CKFetchRecordZoneChangesOperation assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchRecordZoneChangesOperation setAssetTransferOptionsByRecordTypeAndKey:]
  -[CKFetchRecordZoneChangesOperation recordZoneChangeTokensUpdatedBlock]
  -[CKFetchRecordZoneChangesOperation recordZoneFetchCompletionBlock]
  -[CKFetchRecordZoneChangesOperation setStatusByZoneID:]
  -[CKFetchRecordZoneChangesOperation changeTypesFromSetCallbacks]
  -[CKFetchRecordZoneChangesOperation recordChangedBlock]
  -[CKFetchRecordZoneChangesOperation recordWithIDWasDeletedBlock]
  -[CKFetchRecordZoneChangesOperation setShouldReportAllPerItemFailures:]
  -[CKFetchRecordZoneChangesOperation zoneIDsWithPendingArchivedRecords]
  -[CKFetchRecordZoneChangesOperation shouldReportAllPerItemFailures]
  -[CKFetchRecordZoneChangesOperation perRecordChangeCompletionBlock]
  -[CKFetchRecordZoneChangesOperation fetchRecordZoneChangesCompletionBlock]
  -[CKFetchRecordZoneChangesOperation partialFailureForItemsInZone:]
  -[CKFetchRecordZoneChangesOperation setPerRecordChangeCompletionBlock:]
  -[CKFetchRecordZoneChangesOperation recordZoneChangesStatusByZoneID]
  -[CKFetchRecordZoneChangesOperation recordZoneIDsWithPendingArchivedRecords]
  -[CKFetchRecordZoneChangesOperation setZoneIDsWithPendingArchivedRecords:]
  -[CKFetchRecordZoneChangesOperation optionsByRecordZoneID]
  -[CKFetchRecordZoneChangesOperation setOptionsByRecordZoneID:]


CKFetchRecordZoneChangesOptions : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  BOOL fetchNewestChangesFirst
 @property  BOOL fetchChangesMadeByThisDevice
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  NSArray *desiredKeys

  // class methods
  +[CKFetchRecordZoneChangesOptions supportsSecureCoding]

  // instance methods
  -[CKFetchRecordZoneChangesOptions init]
  -[CKFetchRecordZoneChangesOptions copyWithZone:]
  -[CKFetchRecordZoneChangesOptions encodeWithCoder:]
  -[CKFetchRecordZoneChangesOptions initWithCoder:]
  -[CKFetchRecordZoneChangesOptions .cxx_destruct]
  -[CKFetchRecordZoneChangesOptions setPreviousServerChangeToken:]
  -[CKFetchRecordZoneChangesOptions setResultsLimit:]
  -[CKFetchRecordZoneChangesOptions setDesiredKeys:]
  -[CKFetchRecordZoneChangesOptions previousServerChangeToken]
  -[CKFetchRecordZoneChangesOptions resultsLimit]
  -[CKFetchRecordZoneChangesOptions desiredKeys]
  -[CKFetchRecordZoneChangesOptions fetchNewestChangesFirst]
  -[CKFetchRecordZoneChangesOptions setFetchNewestChangesFirst:]
  -[CKFetchRecordZoneChangesOptions fetchChangesMadeByThisDevice]
  -[CKFetchRecordZoneChangesOptions setFetchChangesMadeByThisDevice:]
  -[CKFetchRecordZoneChangesOptions initWithZoneConfiguration:]
  -[CKFetchRecordZoneChangesOptions zoneConfiguration]


CKFetchRecordZoneChangesConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  BOOL fetchNewestChangesFirst
 @property  BOOL fetchChangesMadeByThisDevice
 @property  CKServerChangeToken *previousServerChangeToken
 @property  unsigned long resultsLimit
 @property  NSArray *desiredKeys

  // class methods
  +[CKFetchRecordZoneChangesConfiguration supportsSecureCoding]

  // instance methods
  -[CKFetchRecordZoneChangesConfiguration init]
  -[CKFetchRecordZoneChangesConfiguration copyWithZone:]
  -[CKFetchRecordZoneChangesConfiguration encodeWithCoder:]
  -[CKFetchRecordZoneChangesConfiguration initWithCoder:]
  -[CKFetchRecordZoneChangesConfiguration .cxx_destruct]
  -[CKFetchRecordZoneChangesConfiguration setPreviousServerChangeToken:]
  -[CKFetchRecordZoneChangesConfiguration setResultsLimit:]
  -[CKFetchRecordZoneChangesConfiguration setDesiredKeys:]
  -[CKFetchRecordZoneChangesConfiguration CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchRecordZoneChangesConfiguration previousServerChangeToken]
  -[CKFetchRecordZoneChangesConfiguration resultsLimit]
  -[CKFetchRecordZoneChangesConfiguration desiredKeys]
  -[CKFetchRecordZoneChangesConfiguration fetchNewestChangesFirst]
  -[CKFetchRecordZoneChangesConfiguration setFetchNewestChangesFirst:]
  -[CKFetchRecordZoneChangesConfiguration fetchChangesMadeByThisDevice]
  -[CKFetchRecordZoneChangesConfiguration setFetchChangesMadeByThisDevice:]


CKFetchRecordZoneChangesOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordZoneIDs
 @property  NSDictionary *configurationsByRecordZoneID
 @property  BOOL shouldFetchAssetContents
 @property  long long changeTypes
 @property  BOOL fetchAllChanges
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey
 @property  BOOL shouldReportAllPerItemFailures
 @property  BOOL forcePCSDecryptionAttempt

  // class methods
  +[CKFetchRecordZoneChangesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchRecordZoneChangesOperationInfo encodeWithCoder:]
  -[CKFetchRecordZoneChangesOperationInfo initWithCoder:]
  -[CKFetchRecordZoneChangesOperationInfo .cxx_destruct]
  -[CKFetchRecordZoneChangesOperationInfo setFetchAllChanges:]
  -[CKFetchRecordZoneChangesOperationInfo recordZoneIDs]
  -[CKFetchRecordZoneChangesOperationInfo setRecordZoneIDs:]
  -[CKFetchRecordZoneChangesOperationInfo fetchAllChanges]
  -[CKFetchRecordZoneChangesOperationInfo configurationsByRecordZoneID]
  -[CKFetchRecordZoneChangesOperationInfo setConfigurationsByRecordZoneID:]
  -[CKFetchRecordZoneChangesOperationInfo shouldFetchAssetContents]
  -[CKFetchRecordZoneChangesOperationInfo setShouldFetchAssetContents:]
  -[CKFetchRecordZoneChangesOperationInfo assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchRecordZoneChangesOperationInfo setAssetTransferOptionsByRecordTypeAndKey:]
  -[CKFetchRecordZoneChangesOperationInfo setChangeTypes:]
  -[CKFetchRecordZoneChangesOperationInfo setShouldReportAllPerItemFailures:]
  -[CKFetchRecordZoneChangesOperationInfo shouldReportAllPerItemFailures]
  -[CKFetchRecordZoneChangesOperationInfo changeTypes]
  -[CKFetchRecordZoneChangesOperationInfo forcePCSDecryptionAttempt]
  -[CKFetchRecordZoneChangesOperationInfo setForcePCSDecryptionAttempt:]


CKModifyRecordsOperation : CKDatabaseOperation
 @property  NSMutableArray *savedRecords
 @property  NSMutableArray *deletedRecordIDs
 @property  NSMutableDictionary *recordsByRecordIDs
 @property  NSMutableDictionary *recordErrors
 @property  NSMutableDictionary *assetsByRecordIDAndRecordKey
 @property  BOOL shouldReportRecordsInFlight
 @property  NSMutableSet *packagesToDestroy
 @property  BOOL shouldOnlySaveAssetContent
 @property  BOOL markAsParticipantNeedsNewInvitationToken
 @property  NSDictionary *recordIDsToDeleteToEtags
 @property  NSDictionary *conflictLosersToResolveByRecordID
 @property  NSDictionary *pluginFieldsForRecordDeletesByID
 @property  @? recordsInFlightBlock
 @property  NSDictionary *assetUUIDToExpectedProperties
 @property  NSDictionary *packageUUIDToExpectedProperties
 @property  NSArray *recordsToSave
 @property  NSArray *recordIDsToDelete
 @property  long long savePolicy
 @property  NSData *clientChangeTokenData
 @property  BOOL atomic
 @property  @? perRecordProgressBlock
 @property  @? perRecordCompletionBlock
 @property  @? modifyRecordsCompletionBlock

  // instance methods
  -[CKModifyRecordsOperation init]
  -[CKModifyRecordsOperation .cxx_destruct]
  -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]
  -[CKModifyRecordsOperation setSavePolicy:]
  -[CKModifyRecordsOperation setAtomic:]
  -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:]
  -[CKModifyRecordsOperation deletedRecordIDs]
  -[CKModifyRecordsOperation setPerRecordProgressBlock:]
  -[CKModifyRecordsOperation setPerRecordCompletionBlock:]
  -[CKModifyRecordsOperation fillOutOperationInfo:]
  -[CKModifyRecordsOperation fillFromOperationInfo:]
  -[CKModifyRecordsOperation hasCKOperationCallbacksSet]
  -[CKModifyRecordsOperation CKOperationShouldRun:]
  -[CKModifyRecordsOperation _finishOnCallbackQueueWithError:]
  -[CKModifyRecordsOperation activityCreate]
  -[CKModifyRecordsOperation performCKOperation]
  -[CKModifyRecordsOperation _handleProgressCallback:]
  -[CKModifyRecordsOperation recordsToSave]
  -[CKModifyRecordsOperation recordIDsToDelete]
  -[CKModifyRecordsOperation packagesToDestroy]
  -[CKModifyRecordsOperation claimPackagesInRecord:error:]
  -[CKModifyRecordsOperation setPackagesToDestroy:]
  -[CKModifyRecordsOperation recordErrors]
  -[CKModifyRecordsOperation setRecordErrors:]
  -[CKModifyRecordsOperation clientChangeTokenData]
  -[CKModifyRecordsOperation setClientChangeTokenData:]
  -[CKModifyRecordsOperation perRecordProgressBlock]
  -[CKModifyRecordsOperation setRecordsToSave:]
  -[CKModifyRecordsOperation setRecordIDsToDelete:]
  -[CKModifyRecordsOperation savePolicy]
  -[CKModifyRecordsOperation shouldOnlySaveAssetContent]
  -[CKModifyRecordsOperation setShouldOnlySaveAssetContent:]
  -[CKModifyRecordsOperation recordIDsToDeleteToEtags]
  -[CKModifyRecordsOperation setRecordIDsToDeleteToEtags:]
  -[CKModifyRecordsOperation atomic]
  -[CKModifyRecordsOperation conflictLosersToResolveByRecordID]
  -[CKModifyRecordsOperation setConflictLosersToResolveByRecordID:]
  -[CKModifyRecordsOperation pluginFieldsForRecordDeletesByID]
  -[CKModifyRecordsOperation setPluginFieldsForRecordDeletesByID:]
  -[CKModifyRecordsOperation recordsInFlightBlock]
  -[CKModifyRecordsOperation setShouldReportRecordsInFlight:]
  -[CKModifyRecordsOperation assetUUIDToExpectedProperties]
  -[CKModifyRecordsOperation setAssetUUIDToExpectedProperties:]
  -[CKModifyRecordsOperation packageUUIDToExpectedProperties]
  -[CKModifyRecordsOperation setPackageUUIDToExpectedProperties:]
  -[CKModifyRecordsOperation markAsParticipantNeedsNewInvitationToken]
  -[CKModifyRecordsOperation setMarkAsParticipantNeedsNewInvitationToken:]
  -[CKModifyRecordsOperation perRecordCompletionBlock]
  -[CKModifyRecordsOperation modifyRecordsCompletionBlock]
  -[CKModifyRecordsOperation destroyPackagesInRecords:]
  -[CKModifyRecordsOperation recordsByRecordIDs]
  -[CKModifyRecordsOperation _trackAssetsToUpload]
  -[CKModifyRecordsOperation assetsByRecordIDAndRecordKey]
  -[CKModifyRecordsOperation copyStreamingAssetServerFieldsFromServerRecord:toRecord:]
  -[CKModifyRecordsOperation savedRecords]
  -[CKModifyRecordsOperation setRecordsInFlightBlock:]
  -[CKModifyRecordsOperation destroyPackages:]
  -[CKModifyRecordsOperation setSavedRecords:]
  -[CKModifyRecordsOperation setDeletedRecordIDs:]
  -[CKModifyRecordsOperation setRecordsByRecordIDs:]
  -[CKModifyRecordsOperation setAssetsByRecordIDAndRecordKey:]
  -[CKModifyRecordsOperation shouldReportRecordsInFlight]


CKModifyRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordsToSave
 @property  NSArray *recordIDsToDelete
 @property  NSData *clientChangeTokenData
 @property  BOOL atomic
 @property  long long savePolicy
 @property  BOOL shouldOnlySaveAssetContent
 @property  NSDictionary *recordIDsToDeleteToEtags
 @property  NSDictionary *conflictLosersToResolveByRecordID
 @property  NSDictionary *pluginFieldsForRecordDeletesByID
 @property  BOOL shouldReportRecordsInFlight
 @property  NSDictionary *assetUUIDToExpectedProperties
 @property  NSDictionary *packageUUIDToExpectedProperties
 @property  BOOL originatingFromDaemon
 @property  BOOL markAsParticipantNeedsNewInvitationToken
 @property  BOOL shouldSkipPCSRetryBehavior

  // class methods
  +[CKModifyRecordsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifyRecordsOperationInfo encodeWithCoder:]
  -[CKModifyRecordsOperationInfo initWithCoder:]
  -[CKModifyRecordsOperationInfo .cxx_destruct]
  -[CKModifyRecordsOperationInfo setSavePolicy:]
  -[CKModifyRecordsOperationInfo setAtomic:]
  -[CKModifyRecordsOperationInfo recordsToSave]
  -[CKModifyRecordsOperationInfo recordIDsToDelete]
  -[CKModifyRecordsOperationInfo clientChangeTokenData]
  -[CKModifyRecordsOperationInfo setClientChangeTokenData:]
  -[CKModifyRecordsOperationInfo setRecordsToSave:]
  -[CKModifyRecordsOperationInfo setRecordIDsToDelete:]
  -[CKModifyRecordsOperationInfo savePolicy]
  -[CKModifyRecordsOperationInfo shouldOnlySaveAssetContent]
  -[CKModifyRecordsOperationInfo setShouldOnlySaveAssetContent:]
  -[CKModifyRecordsOperationInfo recordIDsToDeleteToEtags]
  -[CKModifyRecordsOperationInfo setRecordIDsToDeleteToEtags:]
  -[CKModifyRecordsOperationInfo atomic]
  -[CKModifyRecordsOperationInfo conflictLosersToResolveByRecordID]
  -[CKModifyRecordsOperationInfo setConflictLosersToResolveByRecordID:]
  -[CKModifyRecordsOperationInfo pluginFieldsForRecordDeletesByID]
  -[CKModifyRecordsOperationInfo setPluginFieldsForRecordDeletesByID:]
  -[CKModifyRecordsOperationInfo setShouldReportRecordsInFlight:]
  -[CKModifyRecordsOperationInfo assetUUIDToExpectedProperties]
  -[CKModifyRecordsOperationInfo setAssetUUIDToExpectedProperties:]
  -[CKModifyRecordsOperationInfo packageUUIDToExpectedProperties]
  -[CKModifyRecordsOperationInfo setPackageUUIDToExpectedProperties:]
  -[CKModifyRecordsOperationInfo markAsParticipantNeedsNewInvitationToken]
  -[CKModifyRecordsOperationInfo setMarkAsParticipantNeedsNewInvitationToken:]
  -[CKModifyRecordsOperationInfo shouldReportRecordsInFlight]
  -[CKModifyRecordsOperationInfo originatingFromDaemon]
  -[CKModifyRecordsOperationInfo setOriginatingFromDaemon:]
  -[CKModifyRecordsOperationInfo shouldSkipPCSRetryBehavior]
  -[CKModifyRecordsOperationInfo setShouldSkipPCSRetryBehavior:]


CKAssetDownloadPreauthorization : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *responseUUID
 @property  NSDictionary *contentResponseHeaders
 @property  NSData *contentResponseBody

  // instance methods
  -[CKAssetDownloadPreauthorization isEqual:]
  -[CKAssetDownloadPreauthorization copyWithZone:]
  -[CKAssetDownloadPreauthorization .cxx_destruct]
  -[CKAssetDownloadPreauthorization responseUUID]
  -[CKAssetDownloadPreauthorization initWithResponseUUID:contentResponseHeaders:contentResponseBody:]
  -[CKAssetDownloadPreauthorization setResponseUUID:]
  -[CKAssetDownloadPreauthorization contentResponseHeaders]
  -[CKAssetDownloadPreauthorization setContentResponseHeaders:]
  -[CKAssetDownloadPreauthorization contentResponseBody]
  -[CKAssetDownloadPreauthorization setContentResponseBody:]


CKSignatureGenerator : NSObject /usr/lib/libSystem.B.dylib
 @property  ^v generator
 @property  BOOL valid

  // class methods
  +[CKSignatureGenerator isValidSignature:]
  +[CKSignatureGenerator signatureWithFileDescriptor:error:]
  +[CKSignatureGenerator isValidV2Signature:]
  +[CKSignatureGenerator signatureForStreamingAsset]

  // instance methods
  -[CKSignatureGenerator init]
  -[CKSignatureGenerator dealloc]
  -[CKSignatureGenerator isValid]
  -[CKSignatureGenerator updateWithData:]
  -[CKSignatureGenerator _newSignatureByFinishingGenerator]
  -[CKSignatureGenerator setValid:]
  -[CKSignatureGenerator generator]
  -[CKSignatureGenerator updateWithBytes:length:]
  -[CKSignatureGenerator dataByFinishingSignature]
  -[CKSignatureGenerator setGenerator:]


CKSQLiteStatement : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableArray *temporaryBoundObjects
 @property  CKSQLite *SQLite
 @property  NSString *SQL
 @property  ^{sqlite3_stmt=} handle
 @property  BOOL reset

  // instance methods
  -[CKSQLiteStatement objectAtIndex:]
  -[CKSQLiteStatement allObjects]
  -[CKSQLiteStatement .cxx_destruct]
  -[CKSQLiteStatement handle]
  -[CKSQLiteStatement reset]
  -[CKSQLiteStatement initWithSQLite:SQL:handle:]
  -[CKSQLiteStatement finalizeStatement]
  -[CKSQLiteStatement resetAfterStepError]
  -[CKSQLiteStatement step]
  -[CKSQLiteStatement bindInt:atIndex:]
  -[CKSQLiteStatement bindInt64:atIndex:]
  -[CKSQLiteStatement bindDouble:atIndex:]
  -[CKSQLiteStatement bindBlob:atIndex:]
  -[CKSQLiteStatement bindText:atIndex:]
  -[CKSQLiteStatement bindNullAtIndex:]
  -[CKSQLiteStatement retainedTemporaryBoundObject:]
  -[CKSQLiteStatement bindValue:atIndex:]
  -[CKSQLiteStatement bindValues:]
  -[CKSQLiteStatement columnCount]
  -[CKSQLiteStatement columnTypeAtIndex:]
  -[CKSQLiteStatement columnNameAtIndex:]
  -[CKSQLiteStatement intAtIndex:]
  -[CKSQLiteStatement int64AtIndex:]
  -[CKSQLiteStatement doubleAtIndex:]
  -[CKSQLiteStatement blobAtIndex:]
  -[CKSQLiteStatement textAtIndex:]
  -[CKSQLiteStatement allObjectsByColumnName]
  -[CKSQLiteStatement SQLite]
  -[CKSQLiteStatement SQL]
  -[CKSQLiteStatement isReset]
  -[CKSQLiteStatement setReset:]
  -[CKSQLiteStatement temporaryBoundObjects]
  -[CKSQLiteStatement setTemporaryBoundObjects:]


CKAssetRepairOperationUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[CKAssetRepairOperationUtilities createRepairContainerFromContainer:withOverrides:]
  +[CKAssetRepairOperationUtilities repairErrorShouldBeMarkedAsBroken:]
  +[CKAssetRepairOperationUtilities errorShouldTriggerNetworkReachabilityEvent:]
  +[CKAssetRepairOperationUtilities errorIsRetriableInNearFuture:]
  +[CKAssetRepairOperationUtilities createRepairOperationGroupWithName:]
  +[CKAssetRepairOperationUtilities createRepairContainerFromContainer:]
  +[CKAssetRepairOperationUtilities clearRepairZoneForDatabase:withRepairContainerOverrides:completionHandler:]
  +[CKAssetRepairOperationUtilities repairRecordFromRecord:field:listIndex:repairZoneID:]
  +[CKAssetRepairOperationUtilities uploadRequestMetadataFromRepairRecord:]


CKUploadRequestConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  NSString *containerIdentifier
 @property  NSString *sourceApplicationBundleID
 @property  CKRecordZoneID *repairZoneID

  // class methods
  +[CKUploadRequestConfiguration supportsSecureCoding]
  +[CKUploadRequestConfiguration resolvedConfigurationWithBaseContainer:overrides:]
  +[CKUploadRequestConfiguration configurationFromBaseContainer:]

  // instance methods
  -[CKUploadRequestConfiguration copyWithZone:]
  -[CKUploadRequestConfiguration encodeWithCoder:]
  -[CKUploadRequestConfiguration initWithCoder:]
  -[CKUploadRequestConfiguration .cxx_destruct]
  -[CKUploadRequestConfiguration containerIdentifier]
  -[CKUploadRequestConfiguration setContainerIdentifier:]
  -[CKUploadRequestConfiguration repairZoneID]
  -[CKUploadRequestConfiguration sourceApplicationBundleID]
  -[CKUploadRequestConfiguration setSourceApplicationBundleID:]
  -[CKUploadRequestConfiguration setRepairZoneID:]
  -[CKUploadRequestConfiguration initFromBaseContainer:]


CKPublishAssetsOperation : CKDatabaseOperation
 @property  NSArray *recordIDs
 @property  NSMutableDictionary *perItemErrorsByRecordID
 @property  NSDictionary *fileNamesByAssetFieldNames
 @property  unsigned long requestedTTL
 @property  unsigned long URLOptions
 @property  @? assetPublishedBlock
 @property  @? publishAssetCompletionBlock

  // instance methods
  -[CKPublishAssetsOperation .cxx_destruct]
  -[CKPublishAssetsOperation setRecordIDs:]
  -[CKPublishAssetsOperation fillOutOperationInfo:]
  -[CKPublishAssetsOperation fillFromOperationInfo:]
  -[CKPublishAssetsOperation hasCKOperationCallbacksSet]
  -[CKPublishAssetsOperation CKOperationShouldRun:]
  -[CKPublishAssetsOperation perItemErrorsByRecordID]
  -[CKPublishAssetsOperation _finishOnCallbackQueueWithError:]
  -[CKPublishAssetsOperation activityCreate]
  -[CKPublishAssetsOperation performCKOperation]
  -[CKPublishAssetsOperation _handleProgressCallback:]
  -[CKPublishAssetsOperation setPerItemErrorsByRecordID:]
  -[CKPublishAssetsOperation recordIDs]
  -[CKPublishAssetsOperation initWithRecordIDs:]
  -[CKPublishAssetsOperation fileNamesByAssetFieldNames]
  -[CKPublishAssetsOperation setFileNamesByAssetFieldNames:]
  -[CKPublishAssetsOperation requestedTTL]
  -[CKPublishAssetsOperation setRequestedTTL:]
  -[CKPublishAssetsOperation URLOptions]
  -[CKPublishAssetsOperation setURLOptions:]
  -[CKPublishAssetsOperation assetPublishedBlock]
  -[CKPublishAssetsOperation publishAssetCompletionBlock]
  -[CKPublishAssetsOperation setPublishAssetCompletionBlock:]
  -[CKPublishAssetsOperation setAssetPublishedBlock:]


CKPublishAssetsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDs
 @property  NSDictionary *fileNamesByAssetFieldNames
 @property  unsigned long requestedTTL
 @property  unsigned long URLOptions

  // class methods
  +[CKPublishAssetsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKPublishAssetsOperationInfo encodeWithCoder:]
  -[CKPublishAssetsOperationInfo initWithCoder:]
  -[CKPublishAssetsOperationInfo .cxx_destruct]
  -[CKPublishAssetsOperationInfo setRecordIDs:]
  -[CKPublishAssetsOperationInfo recordIDs]
  -[CKPublishAssetsOperationInfo fileNamesByAssetFieldNames]
  -[CKPublishAssetsOperationInfo setFileNamesByAssetFieldNames:]
  -[CKPublishAssetsOperationInfo requestedTTL]
  -[CKPublishAssetsOperationInfo setRequestedTTL:]
  -[CKPublishAssetsOperationInfo URLOptions]
  -[CKPublishAssetsOperationInfo setURLOptions:]


CKCompleteParticipantVettingOperation : CKOperation
 @property  NSError *verificationError
 @property  NSString *vettingToken
 @property  NSString *vettingEmail
 @property  NSString *vettingPhone
 @property  NSString *routingKey
 @property  NSData *encryptedKey
 @property  NSString *baseToken
 @property  NSString *displayedHostname
 @property  NSURL *reconstructedShareURL
 @property  CKShareMetadata *shareMetadata
 @property  @? completeParticipantVettingCompletionBlock

  // instance methods
  -[CKCompleteParticipantVettingOperation init]
  -[CKCompleteParticipantVettingOperation .cxx_destruct]
  -[CKCompleteParticipantVettingOperation shareMetadata]
  -[CKCompleteParticipantVettingOperation baseToken]
  -[CKCompleteParticipantVettingOperation setBaseToken:]
  -[CKCompleteParticipantVettingOperation fillOutOperationInfo:]
  -[CKCompleteParticipantVettingOperation fillFromOperationInfo:]
  -[CKCompleteParticipantVettingOperation CKOperationShouldRun:]
  -[CKCompleteParticipantVettingOperation _finishOnCallbackQueueWithError:]
  -[CKCompleteParticipantVettingOperation activityCreate]
  -[CKCompleteParticipantVettingOperation performCKOperation]
  -[CKCompleteParticipantVettingOperation _handleProgressCallback:]
  -[CKCompleteParticipantVettingOperation routingKey]
  -[CKCompleteParticipantVettingOperation setRoutingKey:]
  -[CKCompleteParticipantVettingOperation displayedHostname]
  -[CKCompleteParticipantVettingOperation setDisplayedHostname:]
  -[CKCompleteParticipantVettingOperation setShareMetadata:]
  -[CKCompleteParticipantVettingOperation vettingToken]
  -[CKCompleteParticipantVettingOperation setVettingToken:]
  -[CKCompleteParticipantVettingOperation vettingEmail]
  -[CKCompleteParticipantVettingOperation setVettingEmail:]
  -[CKCompleteParticipantVettingOperation vettingPhone]
  -[CKCompleteParticipantVettingOperation setVettingPhone:]
  -[CKCompleteParticipantVettingOperation encryptedKey]
  -[CKCompleteParticipantVettingOperation setEncryptedKey:]
  -[CKCompleteParticipantVettingOperation setReconstructedShareURL:]
  -[CKCompleteParticipantVettingOperation setVerificationError:]
  -[CKCompleteParticipantVettingOperation verificationError]
  -[CKCompleteParticipantVettingOperation completeParticipantVettingCompletionBlock]
  -[CKCompleteParticipantVettingOperation reconstructedShareURL]
  -[CKCompleteParticipantVettingOperation initWithVettingToken:vettingRecord:displayedHostname:]
  -[CKCompleteParticipantVettingOperation setCompleteParticipantVettingCompletionBlock:]


CKCompleteParticipantVettingOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  NSString *vettingToken
 @property  NSString *vettingEmail
 @property  NSString *vettingPhone
 @property  NSString *routingKey
 @property  NSData *encryptedKey
 @property  NSString *baseToken
 @property  NSString *displayedHostname

  // class methods
  +[CKCompleteParticipantVettingOperationInfo supportsSecureCoding]

  // instance methods
  -[CKCompleteParticipantVettingOperationInfo encodeWithCoder:]
  -[CKCompleteParticipantVettingOperationInfo initWithCoder:]
  -[CKCompleteParticipantVettingOperationInfo .cxx_destruct]
  -[CKCompleteParticipantVettingOperationInfo baseToken]
  -[CKCompleteParticipantVettingOperationInfo setBaseToken:]
  -[CKCompleteParticipantVettingOperationInfo routingKey]
  -[CKCompleteParticipantVettingOperationInfo setRoutingKey:]
  -[CKCompleteParticipantVettingOperationInfo displayedHostname]
  -[CKCompleteParticipantVettingOperationInfo setDisplayedHostname:]
  -[CKCompleteParticipantVettingOperationInfo vettingToken]
  -[CKCompleteParticipantVettingOperationInfo setVettingToken:]
  -[CKCompleteParticipantVettingOperationInfo vettingEmail]
  -[CKCompleteParticipantVettingOperationInfo setVettingEmail:]
  -[CKCompleteParticipantVettingOperationInfo vettingPhone]
  -[CKCompleteParticipantVettingOperationInfo setVettingPhone:]
  -[CKCompleteParticipantVettingOperationInfo encryptedKey]
  -[CKCompleteParticipantVettingOperationInfo setEncryptedKey:]


CKFetchSubscriptionsOperation : CKDatabaseOperation
 @property  NSArray *subscriptions
 @property  NSMutableDictionary *subscriptionsBySubscriptionID
 @property  NSMutableDictionary *subscriptionErrors
 @property  BOOL isFetchAllSubscriptionsOperation
 @property  NSArray *subscriptionIDs
 @property  @? fetchSubscriptionCompletionBlock

  // class methods
  +[CKFetchSubscriptionsOperation fetchAllSubscriptionsOperation]

  // instance methods
  -[CKFetchSubscriptionsOperation init]
  -[CKFetchSubscriptionsOperation .cxx_destruct]
  -[CKFetchSubscriptionsOperation subscriptions]
  -[CKFetchSubscriptionsOperation setSubscriptions:]
  -[CKFetchSubscriptionsOperation fillOutOperationInfo:]
  -[CKFetchSubscriptionsOperation fillFromOperationInfo:]
  -[CKFetchSubscriptionsOperation hasCKOperationCallbacksSet]
  -[CKFetchSubscriptionsOperation CKOperationShouldRun:]
  -[CKFetchSubscriptionsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchSubscriptionsOperation activityCreate]
  -[CKFetchSubscriptionsOperation performCKOperation]
  -[CKFetchSubscriptionsOperation _handleProgressCallback:]
  -[CKFetchSubscriptionsOperation initWithSubscriptionIDs:]
  -[CKFetchSubscriptionsOperation setFetchSubscriptionCompletionBlock:]
  -[CKFetchSubscriptionsOperation subscriptionErrors]
  -[CKFetchSubscriptionsOperation setSubscriptionErrors:]
  -[CKFetchSubscriptionsOperation setIsFetchAllSubscriptionsOperation:]
  -[CKFetchSubscriptionsOperation subscriptionIDs]
  -[CKFetchSubscriptionsOperation setSubscriptionIDs:]
  -[CKFetchSubscriptionsOperation isFetchAllSubscriptionsOperation]
  -[CKFetchSubscriptionsOperation fetchSubscriptionCompletionBlock]
  -[CKFetchSubscriptionsOperation subscriptionsBySubscriptionID]
  -[CKFetchSubscriptionsOperation setSubscriptionsBySubscriptionID:]


CKFetchSubscriptionsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *subscriptionIDs
 @property  BOOL isFetchAllSubscriptionsOperation

  // class methods
  +[CKFetchSubscriptionsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchSubscriptionsOperationInfo encodeWithCoder:]
  -[CKFetchSubscriptionsOperationInfo initWithCoder:]
  -[CKFetchSubscriptionsOperationInfo .cxx_destruct]
  -[CKFetchSubscriptionsOperationInfo setIsFetchAllSubscriptionsOperation:]
  -[CKFetchSubscriptionsOperationInfo subscriptionIDs]
  -[CKFetchSubscriptionsOperationInfo setSubscriptionIDs:]
  -[CKFetchSubscriptionsOperationInfo isFetchAllSubscriptionsOperation]


CKLocationSortDescriptor : NSSortDescriptor /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration <NSSecureCoding>
 @property  CLLocation *relativeLocation

  // class methods
  +[CKLocationSortDescriptor supportsSecureCoding]

  // instance methods
  -[CKLocationSortDescriptor copyWithZone:]
  -[CKLocationSortDescriptor encodeWithCoder:]
  -[CKLocationSortDescriptor initWithCoder:]
  -[CKLocationSortDescriptor .cxx_destruct]
  -[CKLocationSortDescriptor compareObject:toObject:]
  -[CKLocationSortDescriptor CKPropertiesDescription]
  -[CKLocationSortDescriptor relativeLocation]
  -[CKLocationSortDescriptor setRelativeLocation:]
  -[CKLocationSortDescriptor initWithKey:relativeLocation:]


CKFetchRecordsAssetInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  NSError *error
 @property  NSMutableData *assetContent
 @property  NSMutableIndexSet *byteRanges

  // instance methods
  -[CKFetchRecordsAssetInfo init]
  -[CKFetchRecordsAssetInfo .cxx_destruct]
  -[CKFetchRecordsAssetInfo error]
  -[CKFetchRecordsAssetInfo setError:]
  -[CKFetchRecordsAssetInfo isContiguous]
  -[CKFetchRecordsAssetInfo assetContent]
  -[CKFetchRecordsAssetInfo setAssetContent:]
  -[CKFetchRecordsAssetInfo writeData:atOffset:]
  -[CKFetchRecordsAssetInfo assetContentWithError:expectedSignature:]
  -[CKFetchRecordsAssetInfo byteRanges]
  -[CKFetchRecordsAssetInfo setByteRanges:]


CKFetchRecordsOperation : CKDatabaseOperation
 @property  NSMutableSet *packagesToDestroy
 @property  BOOL shouldFetchAssetContent
 @property  BOOL shouldFetchAssetContentInMemory
 @property  BOOL dropInMemoryAssetContentASAP
 @property  NSMutableDictionary *assetInfoByArrayIndexByRecordKeyByRecordID
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey
 @property  NSMutableDictionary *recordIDsToRecords
 @property  NSMutableDictionary *recordErrors
 @property  NSDictionary *desiredPackageFileIndices
 @property  BOOL isFetchCurrentUserOperation
 @property  NSDictionary *recordIDsToETags
 @property  NSDictionary *recordIDsToVersionETags
 @property  NSDictionary *webSharingIdentityDataByRecordID
 @property  NSArray *recordIDs
 @property  NSArray *desiredKeys
 @property  @? perRecordProgressBlock
 @property  @? perRecordCompletionBlock
 @property  @? fetchRecordsCompletionBlock

  // class methods
  +[CKFetchRecordsOperation fetchCurrentUserRecordOperation]

  // instance methods
  -[CKFetchRecordsOperation init]
  -[CKFetchRecordsOperation .cxx_destruct]
  -[CKFetchRecordsOperation setDesiredKeys:]
  -[CKFetchRecordsOperation setRecordIDs:]
  -[CKFetchRecordsOperation setPerRecordProgressBlock:]
  -[CKFetchRecordsOperation setPerRecordCompletionBlock:]
  -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:]
  -[CKFetchRecordsOperation fillOutOperationInfo:]
  -[CKFetchRecordsOperation fillFromOperationInfo:]
  -[CKFetchRecordsOperation hasCKOperationCallbacksSet]
  -[CKFetchRecordsOperation CKOperationShouldRun:]
  -[CKFetchRecordsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchRecordsOperation activityCreate]
  -[CKFetchRecordsOperation performCKOperation]
  -[CKFetchRecordsOperation _handleProgressCallback:]
  -[CKFetchRecordsOperation recordIDs]
  -[CKFetchRecordsOperation initWithRecordIDs:]
  -[CKFetchRecordsOperation packagesToDestroy]
  -[CKFetchRecordsOperation claimPackagesInRecord:error:]
  -[CKFetchRecordsOperation setPackagesToDestroy:]
  -[CKFetchRecordsOperation recordErrors]
  -[CKFetchRecordsOperation setRecordErrors:]
  -[CKFetchRecordsOperation assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchRecordsOperation setAssetTransferOptionsByRecordTypeAndKey:]
  -[CKFetchRecordsOperation shouldFetchAssetContent]
  -[CKFetchRecordsOperation shouldFetchAssetContentInMemory]
  -[CKFetchRecordsOperation setShouldFetchAssetContent:]
  -[CKFetchRecordsOperation setShouldFetchAssetContentInMemory:]
  -[CKFetchRecordsOperation desiredKeys]
  -[CKFetchRecordsOperation perRecordProgressBlock]
  -[CKFetchRecordsOperation perRecordCompletionBlock]
  -[CKFetchRecordsOperation setIsFetchCurrentUserOperation:]
  -[CKFetchRecordsOperation isFetchCurrentUserOperation]
  -[CKFetchRecordsOperation recordIDsToETags]
  -[CKFetchRecordsOperation setRecordIDsToETags:]
  -[CKFetchRecordsOperation recordIDsToVersionETags]
  -[CKFetchRecordsOperation setRecordIDsToVersionETags:]
  -[CKFetchRecordsOperation desiredPackageFileIndices]
  -[CKFetchRecordsOperation setDesiredPackageFileIndices:]
  -[CKFetchRecordsOperation dropInMemoryAssetContentASAP]
  -[CKFetchRecordsOperation setDropInMemoryAssetContentASAP:]
  -[CKFetchRecordsOperation webSharingIdentityDataByRecordID]
  -[CKFetchRecordsOperation setWebSharingIdentityDataByRecordID:]
  -[CKFetchRecordsOperation fetchRecordsCompletionBlock]
  -[CKFetchRecordsOperation recordIDsToRecords]
  -[CKFetchRecordsOperation assetInfoForRecordID:recordKey:arrayIndex:]
  -[CKFetchRecordsOperation assetInfoByArrayIndexByRecordKeyByRecordID]
  -[CKFetchRecordsOperation setAssetInfoByArrayIndexByRecordKeyByRecordID:]
  -[CKFetchRecordsOperation setRecordIDsToRecords:]


CKFetchRecordsOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDs
 @property  BOOL isFetchCurrentUserOperation
 @property  NSArray *desiredKeys
 @property  NSDictionary *recordIDsToETags
 @property  NSDictionary *recordIDsToVersionETags
 @property  NSDictionary *desiredPackageFileIndices
 @property  BOOL shouldFetchAssetContent
 @property  BOOL shouldFetchAssetContentInMemory
 @property  BOOL dropInMemoryAssetContentASAP
 @property  NSDictionary *assetTransferOptionsByRecordTypeAndKey
 @property  NSSet *assetFieldNamesToPublishURLs
 @property  unsigned long requestedTTL
 @property  unsigned long URLOptions
 @property  NSDictionary *webSharingIdentityDataByRecordID

  // class methods
  +[CKFetchRecordsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchRecordsOperationInfo encodeWithCoder:]
  -[CKFetchRecordsOperationInfo initWithCoder:]
  -[CKFetchRecordsOperationInfo .cxx_destruct]
  -[CKFetchRecordsOperationInfo setDesiredKeys:]
  -[CKFetchRecordsOperationInfo setRecordIDs:]
  -[CKFetchRecordsOperationInfo recordIDs]
  -[CKFetchRecordsOperationInfo assetTransferOptionsByRecordTypeAndKey]
  -[CKFetchRecordsOperationInfo setAssetTransferOptionsByRecordTypeAndKey:]
  -[CKFetchRecordsOperationInfo shouldFetchAssetContent]
  -[CKFetchRecordsOperationInfo shouldFetchAssetContentInMemory]
  -[CKFetchRecordsOperationInfo setShouldFetchAssetContent:]
  -[CKFetchRecordsOperationInfo setShouldFetchAssetContentInMemory:]
  -[CKFetchRecordsOperationInfo desiredKeys]
  -[CKFetchRecordsOperationInfo requestedTTL]
  -[CKFetchRecordsOperationInfo setRequestedTTL:]
  -[CKFetchRecordsOperationInfo URLOptions]
  -[CKFetchRecordsOperationInfo setURLOptions:]
  -[CKFetchRecordsOperationInfo setIsFetchCurrentUserOperation:]
  -[CKFetchRecordsOperationInfo isFetchCurrentUserOperation]
  -[CKFetchRecordsOperationInfo recordIDsToETags]
  -[CKFetchRecordsOperationInfo setRecordIDsToETags:]
  -[CKFetchRecordsOperationInfo recordIDsToVersionETags]
  -[CKFetchRecordsOperationInfo setRecordIDsToVersionETags:]
  -[CKFetchRecordsOperationInfo desiredPackageFileIndices]
  -[CKFetchRecordsOperationInfo setDesiredPackageFileIndices:]
  -[CKFetchRecordsOperationInfo dropInMemoryAssetContentASAP]
  -[CKFetchRecordsOperationInfo setDropInMemoryAssetContentASAP:]
  -[CKFetchRecordsOperationInfo webSharingIdentityDataByRecordID]
  -[CKFetchRecordsOperationInfo setWebSharingIdentityDataByRecordID:]
  -[CKFetchRecordsOperationInfo assetFieldNamesToPublishURLs]
  -[CKFetchRecordsOperationInfo setAssetFieldNamesToPublishURLs:]


CKPredicateValidatorInstance : NSObject /usr/lib/libSystem.B.dylib <CKObjectValidating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKPredicateValidatorInstance validate:error:]


CKRecursivePredicateValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *validator

  // instance methods
  -[CKRecursivePredicateValidator .cxx_destruct]
  -[CKRecursivePredicateValidator CKPropertiesDescription]
  -[CKRecursivePredicateValidator validate:error:]
  -[CKRecursivePredicateValidator initWithValidator:]
  -[CKRecursivePredicateValidator setValidator:]
  -[CKRecursivePredicateValidator validator]


CKAnyPredicateValidator : CKPredicateValidatorInstance
 @property  NSArray *validators

  // instance methods
  -[CKAnyPredicateValidator .cxx_destruct]
  -[CKAnyPredicateValidator CKPropertiesDescription]
  -[CKAnyPredicateValidator validate:error:]
  -[CKAnyPredicateValidator setValidators:]
  -[CKAnyPredicateValidator initWithValidators:]
  -[CKAnyPredicateValidator validators]


CKAllPredicateValidator : CKPredicateValidatorInstance
 @property  NSArray *validators

  // instance methods
  -[CKAllPredicateValidator .cxx_destruct]
  -[CKAllPredicateValidator CKPropertiesDescription]
  -[CKAllPredicateValidator validate:error:]
  -[CKAllPredicateValidator setValidators:]
  -[CKAllPredicateValidator initWithValidators:]
  -[CKAllPredicateValidator validators]


CKCompoundTypePredicateValidator : CKPredicateValidatorInstance
 @property  unsigned long type

  // instance methods
  -[CKCompoundTypePredicateValidator type]
  -[CKCompoundTypePredicateValidator setType:]
  -[CKCompoundTypePredicateValidator initWithType:]
  -[CKCompoundTypePredicateValidator CKPropertiesDescription]
  -[CKCompoundTypePredicateValidator validate:error:]


CKTruePredicateValidator : CKPredicateValidatorInstance
  // instance methods
  -[CKTruePredicateValidator validate:error:]


CKCompoundSubpredicateValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *validator

  // instance methods
  -[CKCompoundSubpredicateValidator .cxx_destruct]
  -[CKCompoundSubpredicateValidator CKPropertiesDescription]
  -[CKCompoundSubpredicateValidator validate:error:]
  -[CKCompoundSubpredicateValidator initWithValidator:]
  -[CKCompoundSubpredicateValidator setValidator:]
  -[CKCompoundSubpredicateValidator validator]


CKFlipFlopPredicateValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *validator

  // instance methods
  -[CKFlipFlopPredicateValidator .cxx_destruct]
  -[CKFlipFlopPredicateValidator CKPropertiesDescription]
  -[CKFlipFlopPredicateValidator validate:error:]
  -[CKFlipFlopPredicateValidator initWithValidator:]
  -[CKFlipFlopPredicateValidator setValidator:]
  -[CKFlipFlopPredicateValidator validator]


CKComparisonPredicateValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *modifierValidator
 @property  <CKObjectValidating> *leftExpressionValidator
 @property  <CKObjectValidating> *operatorValidator
 @property  <CKObjectValidating> *optionsValidator
 @property  <CKObjectValidating> *rightExpressionValidator

  // instance methods
  -[CKComparisonPredicateValidator .cxx_destruct]
  -[CKComparisonPredicateValidator CKPropertiesDescription]
  -[CKComparisonPredicateValidator validate:error:]
  -[CKComparisonPredicateValidator setModifierValidator:]
  -[CKComparisonPredicateValidator setLeftExpressionValidator:]
  -[CKComparisonPredicateValidator setOperatorValidator:]
  -[CKComparisonPredicateValidator setOptionsValidator:]
  -[CKComparisonPredicateValidator setRightExpressionValidator:]
  -[CKComparisonPredicateValidator modifierValidator]
  -[CKComparisonPredicateValidator leftExpressionValidator]
  -[CKComparisonPredicateValidator operatorValidator]
  -[CKComparisonPredicateValidator optionsValidator]
  -[CKComparisonPredicateValidator rightExpressionValidator]


CKComparisonOperatorValidator : CKPredicateValidatorInstance
 @property  unsigned long operatorType

  // instance methods
  -[CKComparisonOperatorValidator operatorType]
  -[CKComparisonOperatorValidator initWithOperatorType:]
  -[CKComparisonOperatorValidator CKPropertiesDescription]
  -[CKComparisonOperatorValidator validate:error:]
  -[CKComparisonOperatorValidator setOperatorType:]


CKComparisonModifierValidator : CKPredicateValidatorInstance
 @property  unsigned long modifier

  // instance methods
  -[CKComparisonModifierValidator modifier]
  -[CKComparisonModifierValidator CKPropertiesDescription]
  -[CKComparisonModifierValidator validate:error:]
  -[CKComparisonModifierValidator initWithModifier:]
  -[CKComparisonModifierValidator setModifier:]


CKComparisonOptionsValidator : CKPredicateValidatorInstance
 @property  unsigned long options

  // instance methods
  -[CKComparisonOptionsValidator options]
  -[CKComparisonOptionsValidator initWithOptions:]
  -[CKComparisonOptionsValidator setOptions:]
  -[CKComparisonOptionsValidator CKPropertiesDescription]
  -[CKComparisonOptionsValidator validate:error:]


CKConstantValueExpressionValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *validator

  // instance methods
  -[CKConstantValueExpressionValidator .cxx_destruct]
  -[CKConstantValueExpressionValidator CKPropertiesDescription]
  -[CKConstantValueExpressionValidator validate:error:]
  -[CKConstantValueExpressionValidator initWithValidator:]
  -[CKConstantValueExpressionValidator setValidator:]
  -[CKConstantValueExpressionValidator validator]


CKKeyPathExpressionValidator : CKPredicateValidatorInstance
 @property  <CKObjectValidating> *validator

  // instance methods
  -[CKKeyPathExpressionValidator .cxx_destruct]
  -[CKKeyPathExpressionValidator CKPropertiesDescription]
  -[CKKeyPathExpressionValidator validate:error:]
  -[CKKeyPathExpressionValidator initWithValidator:]
  -[CKKeyPathExpressionValidator setValidator:]
  -[CKKeyPathExpressionValidator validator]


CKAggregateExpressionValidator : CKPredicateValidatorInstance
 @property  NSArray *subExpressionValidators

  // instance methods
  -[CKAggregateExpressionValidator .cxx_destruct]
  -[CKAggregateExpressionValidator CKPropertiesDescription]
  -[CKAggregateExpressionValidator validate:error:]
  -[CKAggregateExpressionValidator initWithValidators:]
  -[CKAggregateExpressionValidator setSubExpressionValidators:]
  -[CKAggregateExpressionValidator subExpressionValidators]


CKFunctionExpressionValidator : CKPredicateValidatorInstance
 @property  NSString *functionName
 @property  NSArray *argumentValidators

  // instance methods
  -[CKFunctionExpressionValidator .cxx_destruct]
  -[CKFunctionExpressionValidator functionName]
  -[CKFunctionExpressionValidator setFunctionName:]
  -[CKFunctionExpressionValidator CKPropertiesDescription]
  -[CKFunctionExpressionValidator validate:error:]
  -[CKFunctionExpressionValidator initWithFunctionName:validators:]
  -[CKFunctionExpressionValidator setArgumentValidators:]
  -[CKFunctionExpressionValidator argumentValidators]


CKEvaluatedObjectExpressionValidator : CKPredicateValidatorInstance
  // instance methods
  -[CKEvaluatedObjectExpressionValidator validate:error:]


CKKindOfClassValidator : CKPredicateValidatorInstance
 @property  Class parentClass

  // instance methods
  -[CKKindOfClassValidator .cxx_destruct]
  -[CKKindOfClassValidator initWithClass:]
  -[CKKindOfClassValidator CKPropertiesDescription]
  -[CKKindOfClassValidator validate:error:]
  -[CKKindOfClassValidator setParentClass:]
  -[CKKindOfClassValidator parentClass]


CKKindOfCollectionClassValidator : CKPredicateValidatorInstance
  // instance methods
  -[CKKindOfCollectionClassValidator validate:error:]


CKStringValueValidator : CKPredicateValidatorInstance
 @property  NSString *value

  // instance methods
  -[CKStringValueValidator .cxx_destruct]
  -[CKStringValueValidator value]
  -[CKStringValueValidator setValue:]
  -[CKStringValueValidator initWithValue:]
  -[CKStringValueValidator CKPropertiesDescription]
  -[CKStringValueValidator validate:error:]


CKCustomBlockValidator : CKPredicateValidatorInstance
 @property  @? block

  // instance methods
  -[CKCustomBlockValidator .cxx_destruct]
  -[CKCustomBlockValidator block]
  -[CKCustomBlockValidator initWithBlock:]
  -[CKCustomBlockValidator setBlock:]
  -[CKCustomBlockValidator validate:error:]


CKTrueValidator : CKPredicateValidatorInstance
  // instance methods
  -[CKTrueValidator validate:error:]


CKNilValidator : CKPredicateValidatorInstance
  // instance methods
  -[CKNilValidator validate:error:]


CKDeclarativePredicateValidator : CKPredicateValidator
  // instance methods
  -[CKDeclarativePredicateValidator init]
  -[CKDeclarativePredicateValidator .cxx_destruct]
  -[CKDeclarativePredicateValidator validate:error:]


CKRequestInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *requestUUID
 @property  NSDictionary *responseHTTPHeaders
 @property  NSDictionary *w3cNavigationTiming

  // class methods
  +[CKRequestInfo supportsSecureCoding]

  // instance methods
  -[CKRequestInfo encodeWithCoder:]
  -[CKRequestInfo initWithCoder:]
  -[CKRequestInfo .cxx_destruct]
  -[CKRequestInfo requestUUID]
  -[CKRequestInfo responseHTTPHeaders]
  -[CKRequestInfo w3cNavigationTiming]
  -[CKRequestInfo initWithRequestUUID:responseHTTPHeaders:w3cTiming:]


CKBlockingAsyncQueue : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long width
 @property  unsigned int qosClass
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_semaphore> *queueSema

  // instance methods
  -[CKBlockingAsyncQueue setQueue:]
  -[CKBlockingAsyncQueue queue]
  -[CKBlockingAsyncQueue .cxx_destruct]
  -[CKBlockingAsyncQueue performBlock:]
  -[CKBlockingAsyncQueue initWithWidth:]
  -[CKBlockingAsyncQueue width]
  -[CKBlockingAsyncQueue setWidth:]
  -[CKBlockingAsyncQueue qosClass]
  -[CKBlockingAsyncQueue initWithWidth:qosClass:]
  -[CKBlockingAsyncQueue queueSema]
  -[CKBlockingAsyncQueue performBarrierBlock:]
  -[CKBlockingAsyncQueue setQosClass:]
  -[CKBlockingAsyncQueue setQueueSema:]


CKCodeFunctionInvokeOperation : CKDatabaseOperation
 @property  NSString *serviceName
 @property  NSString *functionName
 @property  NSData *serializedRequest
 @property  BOOL local
 @property  NSURL *explicitBaseURL
 @property  BOOL shouldFetchAssetContentInMemory
 @property  NSData *serializedResponse
 @property  NSError *responseError
 @property  @? functionInvokeCompletionBlock
 @property  @? perRecordProgressBlock

  // instance methods
  -[CKCodeFunctionInvokeOperation .cxx_destruct]
  -[CKCodeFunctionInvokeOperation serviceName]
  -[CKCodeFunctionInvokeOperation setServiceName:]
  -[CKCodeFunctionInvokeOperation functionName]
  -[CKCodeFunctionInvokeOperation setPerRecordProgressBlock:]
  -[CKCodeFunctionInvokeOperation setFunctionName:]
  -[CKCodeFunctionInvokeOperation fillOutOperationInfo:]
  -[CKCodeFunctionInvokeOperation fillFromOperationInfo:]
  -[CKCodeFunctionInvokeOperation hasCKOperationCallbacksSet]
  -[CKCodeFunctionInvokeOperation CKOperationShouldRun:]
  -[CKCodeFunctionInvokeOperation _finishOnCallbackQueueWithError:]
  -[CKCodeFunctionInvokeOperation activityCreate]
  -[CKCodeFunctionInvokeOperation performCKOperation]
  -[CKCodeFunctionInvokeOperation shouldFetchAssetContentInMemory]
  -[CKCodeFunctionInvokeOperation setShouldFetchAssetContentInMemory:]
  -[CKCodeFunctionInvokeOperation _handleProgressCallback:completion:]
  -[CKCodeFunctionInvokeOperation perRecordProgressBlock]
  -[CKCodeFunctionInvokeOperation initWithServiceName:functionName:serializedRequest:local:]
  -[CKCodeFunctionInvokeOperation initWithServiceName:functionName:serializedRequest:]
  -[CKCodeFunctionInvokeOperation local]
  -[CKCodeFunctionInvokeOperation setLocal:]
  -[CKCodeFunctionInvokeOperation functionInvokeCompletionBlock]
  -[CKCodeFunctionInvokeOperation serializedRequest]
  -[CKCodeFunctionInvokeOperation setSerializedResponse:]
  -[CKCodeFunctionInvokeOperation setResponseError:]
  -[CKCodeFunctionInvokeOperation responseError]
  -[CKCodeFunctionInvokeOperation serializedResponse]
  -[CKCodeFunctionInvokeOperation setFunctionInvokeCompletionBlock:]
  -[CKCodeFunctionInvokeOperation explicitBaseURL]
  -[CKCodeFunctionInvokeOperation initWithServiceName:functionName:serializedParameters:local:]
  -[CKCodeFunctionInvokeOperation initWithServiceName:functionName:serializedParameters:]
  -[CKCodeFunctionInvokeOperation setSerializedRequest:]
  -[CKCodeFunctionInvokeOperation setExplicitBaseURL:]


CKCodeFunctionInvokeOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSString *serviceName
 @property  NSString *functionName
 @property  NSArray *requestLocalSerializations
 @property  NSArray *requestLocalEnvelopes
 @property  NSData *permittedRemoteMeasurement
 @property  NSURL *explicitBaseURL
 @property  BOOL local
 @property  BOOL shouldFetchAssetContentInMemory

  // class methods
  +[CKCodeFunctionInvokeOperationInfo supportsSecureCoding]

  // instance methods
  -[CKCodeFunctionInvokeOperationInfo encodeWithCoder:]
  -[CKCodeFunctionInvokeOperationInfo initWithCoder:]
  -[CKCodeFunctionInvokeOperationInfo .cxx_destruct]
  -[CKCodeFunctionInvokeOperationInfo serviceName]
  -[CKCodeFunctionInvokeOperationInfo setServiceName:]
  -[CKCodeFunctionInvokeOperationInfo functionName]
  -[CKCodeFunctionInvokeOperationInfo setFunctionName:]
  -[CKCodeFunctionInvokeOperationInfo shouldFetchAssetContentInMemory]
  -[CKCodeFunctionInvokeOperationInfo setShouldFetchAssetContentInMemory:]
  -[CKCodeFunctionInvokeOperationInfo local]
  -[CKCodeFunctionInvokeOperationInfo setLocal:]
  -[CKCodeFunctionInvokeOperationInfo explicitBaseURL]
  -[CKCodeFunctionInvokeOperationInfo setExplicitBaseURL:]
  -[CKCodeFunctionInvokeOperationInfo requestLocalSerializations]
  -[CKCodeFunctionInvokeOperationInfo requestLocalEnvelopes]
  -[CKCodeFunctionInvokeOperationInfo permittedRemoteMeasurement]
  -[CKCodeFunctionInvokeOperationInfo setRequestLocalSerializations:]
  -[CKCodeFunctionInvokeOperationInfo setRequestLocalEnvelopes:]
  -[CKCodeFunctionInvokeOperationInfo setPermittedRemoteMeasurement:]


CKModifyRecordAccessOperation : CKDatabaseOperation
 @property  NSArray *recordIDsToGrant
 @property  NSArray *recordIDsToRevoke
 @property  NSMutableDictionary *recordErrors
 @property  NSMutableArray *grantedRecordIDs
 @property  NSMutableArray *revokedRecordIDs
 @property  @? recordAccessGrantedBlock
 @property  @? recordAccessRevokedBlock
 @property  @? recordAccessCompletionBlock

  // instance methods
  -[CKModifyRecordAccessOperation .cxx_destruct]
  -[CKModifyRecordAccessOperation fillOutOperationInfo:]
  -[CKModifyRecordAccessOperation fillFromOperationInfo:]
  -[CKModifyRecordAccessOperation hasCKOperationCallbacksSet]
  -[CKModifyRecordAccessOperation CKOperationShouldRun:]
  -[CKModifyRecordAccessOperation _finishOnCallbackQueueWithError:]
  -[CKModifyRecordAccessOperation activityCreate]
  -[CKModifyRecordAccessOperation performCKOperation]
  -[CKModifyRecordAccessOperation _handleProgressCallback:]
  -[CKModifyRecordAccessOperation recordErrors]
  -[CKModifyRecordAccessOperation setRecordErrors:]
  -[CKModifyRecordAccessOperation recordIDsToGrant]
  -[CKModifyRecordAccessOperation setRecordIDsToGrant:]
  -[CKModifyRecordAccessOperation recordIDsToRevoke]
  -[CKModifyRecordAccessOperation setRecordIDsToRevoke:]
  -[CKModifyRecordAccessOperation recordAccessGrantedBlock]
  -[CKModifyRecordAccessOperation recordAccessRevokedBlock]
  -[CKModifyRecordAccessOperation recordAccessCompletionBlock]
  -[CKModifyRecordAccessOperation grantedRecordIDs]
  -[CKModifyRecordAccessOperation revokedRecordIDs]
  -[CKModifyRecordAccessOperation setRecordAccessCompletionBlock:]
  -[CKModifyRecordAccessOperation setRecordAccessGrantedBlock:]
  -[CKModifyRecordAccessOperation setRecordAccessRevokedBlock:]
  -[CKModifyRecordAccessOperation initWithRecordIDsToGrantAccess:recordIDsToRevokeAccess:]
  -[CKModifyRecordAccessOperation setGrantedRecordIDs:]
  -[CKModifyRecordAccessOperation setRevokedRecordIDs:]


CKModifyRecordAccessOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  NSArray *recordIDsToGrant
 @property  NSArray *recordIDsToRevoke

  // class methods
  +[CKModifyRecordAccessOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifyRecordAccessOperationInfo encodeWithCoder:]
  -[CKModifyRecordAccessOperationInfo initWithCoder:]
  -[CKModifyRecordAccessOperationInfo .cxx_destruct]
  -[CKModifyRecordAccessOperationInfo recordIDsToGrant]
  -[CKModifyRecordAccessOperationInfo setRecordIDsToGrant:]
  -[CKModifyRecordAccessOperationInfo recordIDsToRevoke]
  -[CKModifyRecordAccessOperationInfo setRecordIDsToRevoke:]


CKShareMetadata : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  long long environment
 @property  NSData *protectedFullToken
 @property  NSData *publicToken
 @property  NSString *baseToken
 @property  NSData *privateToken
 @property  CKRecordZone *sharedZone
 @property  CKShareParticipant *callingParticipant
 @property  NSString *containerIdentifier
 @property  CKShare *share
 @property  long long participantRole
 @property  long long participantStatus
 @property  long long participantPermission
 @property  CKUserIdentity *ownerIdentity
 @property  NSArray *outOfNetworkMatches
 @property  CKRecordID *rootRecordID
 @property  CKRecord *rootRecord
 @property  NSArray *sharedItemHierarchyIDs
 @property  NSString *rootRecordType
 @property  BOOL acceptedInProcess
 @property  NSData *encryptedData
 @property  CKDeviceToDeviceShareInvitationToken *invitationToken
 @property  long long participantType

  // class methods
  +[CKShareMetadata supportsSecureCoding]

  // instance methods
  -[CKShareMetadata init]
  -[CKShareMetadata isEqual:]
  -[CKShareMetadata copyWithZone:]
  -[CKShareMetadata encodeWithCoder:]
  -[CKShareMetadata initWithCoder:]
  -[CKShareMetadata .cxx_destruct]
  -[CKShareMetadata environment]
  -[CKShareMetadata setEnvironment:]
  -[CKShareMetadata containerIdentifier]
  -[CKShareMetadata setContainerIdentifier:]
  -[CKShareMetadata share]
  -[CKShareMetadata setShare:]
  -[CKShareMetadata baseToken]
  -[CKShareMetadata ckShortDescription]
  -[CKShareMetadata CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKShareMetadata encryptedData]
  -[CKShareMetadata CKAssignToContainerWithID:]
  -[CKShareMetadata rootRecord]
  -[CKShareMetadata setRootRecord:]
  -[CKShareMetadata privateToken]
  -[CKShareMetadata rootRecordID]
  -[CKShareMetadata setRootRecordID:]
  -[CKShareMetadata invitationToken]
  -[CKShareMetadata setInvitationToken:]
  -[CKShareMetadata acceptedInProcess]
  -[CKShareMetadata setAcceptedInProcess:]
  -[CKShareMetadata setEncryptedData:]
  -[CKShareMetadata publicToken]
  -[CKShareMetadata participantRole]
  -[CKShareMetadata participantStatus]
  -[CKShareMetadata participantPermission]
  -[CKShareMetadata ownerIdentity]
  -[CKShareMetadata sharedItemHierarchyIDs]
  -[CKShareMetadata callingParticipant]
  -[CKShareMetadata rootRecordType]
  -[CKShareMetadata setRootRecordType:]
  -[CKShareMetadata setSharedItemHierarchyIDs:]
  -[CKShareMetadata setCallingParticipant:]
  -[CKShareMetadata setParticipantRole:]
  -[CKShareMetadata setParticipantStatus:]
  -[CKShareMetadata setParticipantPermission:]
  -[CKShareMetadata setOwnerIdentity:]
  -[CKShareMetadata protectedFullToken]
  -[CKShareMetadata setProtectedFullToken:]
  -[CKShareMetadata setPublicToken:]
  -[CKShareMetadata setPrivateToken:]
  -[CKShareMetadata outOfNetworkMatches]
  -[CKShareMetadata setOutOfNetworkMatches:]
  -[CKShareMetadata sharedZone]
  -[CKShareMetadata setSharedZone:]
  -[CKShareMetadata participantType]


CKDiscoverUserInfosOperation : CKOperation
 @property  NSMutableDictionary *emailsToUserInfos
 @property  NSMutableDictionary *userRecordIDsToUserInfos
 @property  NSArray *emailAddresses
 @property  NSArray *userRecordIDs
 @property  @? discoverUserInfosCompletionBlock

  // instance methods
  -[CKDiscoverUserInfosOperation init]
  -[CKDiscoverUserInfosOperation .cxx_destruct]
  -[CKDiscoverUserInfosOperation fillOutOperationInfo:]
  -[CKDiscoverUserInfosOperation fillFromOperationInfo:]
  -[CKDiscoverUserInfosOperation hasCKOperationCallbacksSet]
  -[CKDiscoverUserInfosOperation CKOperationShouldRun:]
  -[CKDiscoverUserInfosOperation _finishOnCallbackQueueWithError:]
  -[CKDiscoverUserInfosOperation performCKOperation]
  -[CKDiscoverUserInfosOperation _handleProgressCallback:]
  -[CKDiscoverUserInfosOperation operationInfoClass]
  -[CKDiscoverUserInfosOperation initWithEmailAddresses:userRecordIDs:]
  -[CKDiscoverUserInfosOperation setDiscoverUserInfosCompletionBlock:]
  -[CKDiscoverUserInfosOperation emailAddresses]
  -[CKDiscoverUserInfosOperation userRecordIDs]
  -[CKDiscoverUserInfosOperation setEmailAddresses:]
  -[CKDiscoverUserInfosOperation setUserRecordIDs:]
  -[CKDiscoverUserInfosOperation discoverUserInfosCompletionBlock]
  -[CKDiscoverUserInfosOperation emailsToUserInfos]
  -[CKDiscoverUserInfosOperation userRecordIDsToUserInfos]
  -[CKDiscoverUserInfosOperation setEmailsToUserInfos:]
  -[CKDiscoverUserInfosOperation setUserRecordIDsToUserInfos:]


CKPackageDBDelegate : NSObject /usr/lib/libSystem.B.dylib <CKSQLiteDelegate>
 @property  int userVersion

  // instance methods
  -[CKPackageDBDelegate userVersion]
  -[CKPackageDBDelegate migrateDatabase:fromVersion:]


CKPackage : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, CKRecordValue>
 @property  long long state
 @property  NSData *archiverInfo
 @property  CKSQLite *sqlite
 @property  unsigned long nextItemIndex
 @property  BOOL open
 @property  BOOL transaction
 @property  NSObject<OS_dispatch_queue> *queue
 @property  ^{_OpaquePCSShareProtection=} recordPCS
 @property  NSString *UUID
 @property  unsigned long size
 @property  BOOL wasCached
 @property  BOOL uploaded
 @property  BOOL downloaded
 @property  BOOL hasSize
 @property  BOOL shouldReadRawEncryptedData
 @property  long long storageGroupingPolicy
 @property  long long uploadRank
 @property  long long packageID
 @property  NSArray *assets
 @property  CKRecord *record
 @property  NSString *recordKey
 @property  NSString *databaseBasePath
 @property  NSData *signature
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKPackage supportsSecureCoding]
  +[CKPackage packageWithPackage:error:]
  +[CKPackage packageWithError:]
  +[CKPackage packageInDaemonWithBasePath:error:]
  +[CKPackage packageProcessBasePath]
  +[CKPackage packageInClientWithBasePath:error:]
  +[CKPackage stagingPathSuffixForCloudKitCachesDirectoryWithBundleIdentifier:]
  +[CKPackage _packageDatabaseDirectoryWithBasePath:state:]
  +[CKPackage _packagesBasePathForBundleID:]
  +[CKPackage _packageDatabasePathWithBasePath:UUID:state:]
  +[CKPackage _createPackageDBWithPath:]
  +[CKPackage clientPackageDatabaseDirectory]
  +[CKPackage destroyClientPackageWithDatabaseBasePath:UUID:]
  +[CKPackage gcPackagesInDirectory:dbInUseBlock:]

  // instance methods
  -[CKPackage init]
  -[CKPackage dealloc]
  -[CKPackage setQueue:]
  -[CKPackage queue]
  -[CKPackage encodeWithCoder:]
  -[CKPackage initWithCoder:]
  -[CKPackage open]
  -[CKPackage close]
  -[CKPackage .cxx_destruct]
  -[CKPackage size]
  -[CKPackage state]
  -[CKPackage UUID]
  -[CKPackage setUUID:]
  -[CKPackage beginTransaction]
  -[CKPackage endTransaction]
  -[CKPackage setState:]
  -[CKPackage isOpen]
  -[CKPackage openWithError:]
  -[CKPackage setSize:]
  -[CKPackage setTransaction:]
  -[CKPackage signature]
  -[CKPackage addItem:]
  -[CKPackage itemCount]
  -[CKPackage CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKPackage assets]
  -[CKPackage setAssets:]
  -[CKPackage removeDB]
  -[CKPackage shouldReadRawEncryptedData]
  -[CKPackage record]
  -[CKPackage setRecord:]
  -[CKPackage wasCached]
  -[CKPackage setWasCached:]
  -[CKPackage databaseBasePath]
  -[CKPackage sectionCount]
  -[CKPackage releaseDB]
  -[CKPackage claimOwnershipWithError:]
  -[CKPackage setShouldReadRawEncryptedData:]
  -[CKPackage hasSize]
  -[CKPackage recordKey]
  -[CKPackage uploadRank]
  -[CKPackage uploaded]
  -[CKPackage downloaded]
  -[CKPackage storageGroupingPolicy]
  -[CKPackage setRecordKey:]
  -[CKPackage setSignature:]
  -[CKPackage setStorageGroupingPolicy:]
  -[CKPackage setHasSize:]
  -[CKPackage setUploaded:]
  -[CKPackage setDownloaded:]
  -[CKPackage setUploadRank:]
  -[CKPackage itemAtIndex:]
  -[CKPackage itemEnumerator]
  -[CKPackage clonedPackageInDaemonWithBasePath:filesDuplicatedIntoDirectory:error:]
  -[CKPackage removeDBAndDeleteFilesWithError:]
  -[CKPackage _initWithBasePath:UUID:]
  -[CKPackage _packageDatabasePath]
  -[CKPackage packageID]
  -[CKPackage setPackageID:]
  -[CKPackage prepareDBWithError:]
  -[CKPackage handleChangeStateAction:]
  -[CKPackage archiverInfo]
  -[CKPackage handleChangeStateAction:error:]
  -[CKPackage _packageDatabasePathWithState:]
  -[CKPackage movePackagesDatabaseInDirection:error:]
  -[CKPackage sqliteOrRaise]
  -[CKPackage setDatabaseBasePath:]
  -[CKPackage releaseDBWithRemove:]
  -[CKPackage _locked_openWithError:]
  -[CKPackage setSqlite:]
  -[CKPackage sqlite]
  -[CKPackage setOpen:]
  -[CKPackage inTransaction]
  -[CKPackage _itemWithColumnsByName:]
  -[CKPackage _itemOrNilAtIndex:]
  -[CKPackage _locked_open]
  -[CKPackage _locked_beginTransaction]
  -[CKPackage _locked_endTransaction]
  -[CKPackage initUnreachablePackageWithUUID:]
  -[CKPackage setArchiverInfo:error:]
  -[CKPackage setRecordPCS:]
  -[CKPackage itemEnumeratorForSectionAtIndex:]
  -[CKPackage updateItemAtIndex:withSignature:size:itemID:sectionIndex:]
  -[CKPackage updateItemAtIndex:withFileURL:]
  -[CKPackage updateItemsAtIndexes:fileURLs:]
  -[CKPackage sectionAtIndex:]
  -[CKPackage addSection:]
  -[CKPackage earliestUploadReceiptExpiration]
  -[CKPackage recordPCS]
  -[CKPackage setArchiverInfo:]
  -[CKPackage nextItemIndex]
  -[CKPackage setNextItemIndex:]


CKArchivedAnchoredPackage : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *anchorPath
 @property  NSString *packagePath
 @property  NSString *UUID

  // class methods
  +[CKArchivedAnchoredPackage supportsSecureCoding]

  // instance methods
  -[CKArchivedAnchoredPackage encodeWithCoder:]
  -[CKArchivedAnchoredPackage initWithCoder:]
  -[CKArchivedAnchoredPackage .cxx_destruct]
  -[CKArchivedAnchoredPackage awakeAfterUsingCoder:]
  -[CKArchivedAnchoredPackage UUID]
  -[CKArchivedAnchoredPackage setUUID:]
  -[CKArchivedAnchoredPackage anchorPath]
  -[CKArchivedAnchoredPackage packagePath]
  -[CKArchivedAnchoredPackage setAnchorPath:]
  -[CKArchivedAnchoredPackage setPackagePath:]


CKObjCType : NSObject /usr/lib/libSystem.B.dylib
 @property  long long code
 @property  NSString *encoding
 @property  NSString *name
 @property  NSString *className
 @property  unsigned long size
 @property  unsigned long flags
 @property  BOOL number
 @property  BOOL integerNumber
 @property  BOOL floatingPointNumber
 @property  BOOL object

  // class methods
  +[CKObjCType typeForEncoding:]
  +[CKObjCType typeForValue:]

  // instance methods
  -[CKObjCType name]
  -[CKObjCType code]
  -[CKObjCType .cxx_destruct]
  -[CKObjCType flags]
  -[CKObjCType size]
  -[CKObjCType initWithCode:encoding:name:className:size:flags:]
  -[CKObjCType isNumber]
  -[CKObjCType isIntegerNumber]
  -[CKObjCType isFloatingPointNumber]
  -[CKObjCType isObject]
  -[CKObjCType objectWithBytes:]
  -[CKObjCType getBytes:forObject:]
  -[CKObjCType encoding]
  -[CKObjCType className]


CKModifyBadgeOperation : CKOperation
 @property  unsigned long badgeValue
 @property  @? modifyBadgeCompletionBlock

  // instance methods
  -[CKModifyBadgeOperation init]
  -[CKModifyBadgeOperation .cxx_destruct]
  -[CKModifyBadgeOperation setBadgeValue:]
  -[CKModifyBadgeOperation badgeValue]
  -[CKModifyBadgeOperation fillOutOperationInfo:]
  -[CKModifyBadgeOperation fillFromOperationInfo:]
  -[CKModifyBadgeOperation hasCKOperationCallbacksSet]
  -[CKModifyBadgeOperation _finishOnCallbackQueueWithError:]
  -[CKModifyBadgeOperation activityCreate]
  -[CKModifyBadgeOperation performCKOperation]
  -[CKModifyBadgeOperation modifyBadgeCompletionBlock]
  -[CKModifyBadgeOperation setModifyBadgeCompletionBlock:]
  -[CKModifyBadgeOperation initWithBadgeValue:]


CKModifyBadgeOperationInfo : CKDatabaseOperationInfo <NSSecureCoding>
 @property  unsigned long badgeValue

  // class methods
  +[CKModifyBadgeOperationInfo supportsSecureCoding]

  // instance methods
  -[CKModifyBadgeOperationInfo encodeWithCoder:]
  -[CKModifyBadgeOperationInfo initWithCoder:]
  -[CKModifyBadgeOperationInfo setBadgeValue:]
  -[CKModifyBadgeOperationInfo badgeValue]


CKUploadRequestMetadata : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKRecordID *repairZoneRecordID
 @property  long long databaseScope
 @property  CKRecordID *recordID
 @property  NSString *recordType
 @property  NSString *fieldName

  // class methods
  +[CKUploadRequestMetadata supportsSecureCoding]

  // instance methods
  -[CKUploadRequestMetadata isEqual:]
  -[CKUploadRequestMetadata copyWithZone:]
  -[CKUploadRequestMetadata encodeWithCoder:]
  -[CKUploadRequestMetadata initWithCoder:]
  -[CKUploadRequestMetadata .cxx_destruct]
  -[CKUploadRequestMetadata recordType]
  -[CKUploadRequestMetadata recordID]
  -[CKUploadRequestMetadata databaseScope]
  -[CKUploadRequestMetadata CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKUploadRequestMetadata fieldName]
  -[CKUploadRequestMetadata repairZoneRecordID]
  -[CKUploadRequestMetadata initWithRepairZoneRecordID:databaseScope:recordID:recordType:fieldName:]


CKAssetUploadRequestMetadata : CKUploadRequestMetadata <NSSecureCoding>
 @property  NSData *referenceSignature
 @property  long long listIndex
 @property  NSData *fileSignature

  // class methods
  +[CKAssetUploadRequestMetadata supportsSecureCoding]

  // instance methods
  -[CKAssetUploadRequestMetadata isEqual:]
  -[CKAssetUploadRequestMetadata copyWithZone:]
  -[CKAssetUploadRequestMetadata encodeWithCoder:]
  -[CKAssetUploadRequestMetadata initWithCoder:]
  -[CKAssetUploadRequestMetadata .cxx_destruct]
  -[CKAssetUploadRequestMetadata CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKAssetUploadRequestMetadata listIndex]
  -[CKAssetUploadRequestMetadata initWithRepairZoneRecordID:databaseScope:recordID:recordType:fieldName:fileSignature:referenceSignature:]
  -[CKAssetUploadRequestMetadata setListIndex:]
  -[CKAssetUploadRequestMetadata fileSignature]
  -[CKAssetUploadRequestMetadata referenceSignature]
  -[CKAssetUploadRequestMetadata initWithRepairZoneRecordID:databaseScope:recordID:recordType:fieldName:]


CKPackageUploadRequestMetadata : CKUploadRequestMetadata <NSSecureCoding>
 @property  NSArray *referenceSignatures
 @property  NSArray *fileSignatures

  // class methods
  +[CKPackageUploadRequestMetadata supportsSecureCoding]

  // instance methods
  -[CKPackageUploadRequestMetadata isEqual:]
  -[CKPackageUploadRequestMetadata copyWithZone:]
  -[CKPackageUploadRequestMetadata encodeWithCoder:]
  -[CKPackageUploadRequestMetadata initWithCoder:]
  -[CKPackageUploadRequestMetadata .cxx_destruct]
  -[CKPackageUploadRequestMetadata initWithRepairZoneRecordID:databaseScope:recordID:recordType:fieldName:fileSignatures:referenceSignatures:]
  -[CKPackageUploadRequestMetadata initWithRepairZoneRecordID:databaseScope:recordID:recordType:fieldName:]
  -[CKPackageUploadRequestMetadata fileSignatures]
  -[CKPackageUploadRequestMetadata referenceSignatures]


CKPredicateValidator : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[CKPredicateValidator allocWithZone:]
  +[CKPredicateValidator sharedValidator]

  // instance methods
  -[CKPredicateValidator validate:error:]


CKPrettyError : NSError /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
  // class methods
  +[CKPrettyError _errorDomain]
  +[CKPrettyError errorWithCode:format:]
  +[CKPrettyError errorWithCode:userInfo:format:]
  +[CKPrettyError errorWithCode:error:URL:format:]
  +[CKPrettyError errorWithCode:error:format:]
  +[CKPrettyError itemErrorFromError:forID:]
  +[CKPrettyError errorWithCode:path:format:]
  +[CKPrettyError errorWithDomain:code:format:]
  +[CKPrettyError errorWithCode:userInfo:error:path:URL:description:]
  +[CKPrettyError dictionaryRepresentationForError:]
  +[CKPrettyError errorWithDictionaryRepresentation:]
  +[CKPrettyError secureCodableError:]
  +[CKPrettyError descriptionForError:paths:]
  +[CKPrettyError descriptionForError:]
  +[CKPrettyError isError:withCode:]
  +[CKPrettyError isError:withCodes:]
  +[CKPrettyError sanitizedError:]
  +[CKPrettyError errorWithCode:userInfo:error:format:]
  +[CKPrettyError errorWithCode:URL:format:]
  +[CKPrettyError errorWithCode:error:path:format:]
  +[CKPrettyError errorWithDomain:code:path:format:]

  // instance methods
  -[CKPrettyError encodeWithCoder:]
  -[CKPrettyError CKPartialErrorDescription]


CKInternalError : CKPrettyError
  // class methods
  +[CKInternalError _errorDomain]


CKSyncEngineMetadata : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableSet *zoneIDsNeedingToFetchChangesSet
 @property  NSMutableDictionary *serverChangeTokensByZoneID
 @property  NSMutableDictionary *zonesToSaveDictionary
 @property  NSMutableOrderedSet *zoneIDsToDeleteSet
 @property  NSMutableOrderedSet *pendingModificationsSet
 @property  NSMutableOrderedSet *inFlightModificationsSet
 @property  unsigned long internalChangeCount
 @property  NSMutableOrderedSet *fakeRecordIDsToSaveForSerializationTests
 @property  NSMutableOrderedSet *fakeRecordIDsToDeleteForSerializationTests
 @property  unsigned long changeCount
 @property  BOOL needsToFetchDatabaseChanges
 @property  CKServerChangeToken *serverChangeTokenForDatabase
 @property  BOOL needsToSaveDatabaseSubscription
 @property  NSArray *zoneIDsNeedingToFetchChanges
 @property  NSArray *zonesToSave
 @property  NSArray *zoneIDsToDelete
 @property  NSArray *pendingRecordModifications
 @property  NSArray *inFlightRecordModifications

  // class methods
  +[CKSyncEngineMetadata supportsSecureCoding]

  // instance methods
  -[CKSyncEngineMetadata init]
  -[CKSyncEngineMetadata setQueue:]
  -[CKSyncEngineMetadata queue]
  -[CKSyncEngineMetadata encodeWithCoder:]
  -[CKSyncEngineMetadata initWithCoder:]
  -[CKSyncEngineMetadata initWithData:]
  -[CKSyncEngineMetadata .cxx_destruct]
  -[CKSyncEngineMetadata changeCount]
  -[CKSyncEngineMetadata commonInit]
  -[CKSyncEngineMetadata CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKSyncEngineMetadata recordIDsToDelete]
  -[CKSyncEngineMetadata setNeedsToFetchDatabaseChanges:]
  -[CKSyncEngineMetadata setNeedsToSaveDatabaseSubscription:]
  -[CKSyncEngineMetadata inFlightRecordModifications]
  -[CKSyncEngineMetadata markRecordModifications:inFlight:]
  -[CKSyncEngineMetadata getDataRepresentation:]
  -[CKSyncEngineMetadata addPendingRecordModifications:]
  -[CKSyncEngineMetadata setNeedsToSave:zones:]
  -[CKSyncEngineMetadata setNeedsToDelete:zoneIDs:]
  -[CKSyncEngineMetadata removeInFlightRecordModifications:]
  -[CKSyncEngineMetadata pendingRecordModifications]
  -[CKSyncEngineMetadata zonesToSave]
  -[CKSyncEngineMetadata zoneIDsToDelete]
  -[CKSyncEngineMetadata removePendingRecordModifications:]
  -[CKSyncEngineMetadata serverChangeTokenForDatabase]
  -[CKSyncEngineMetadata zoneIDsNeedingToFetchChanges]
  -[CKSyncEngineMetadata serverChangeTokenForRecordZoneID:]
  -[CKSyncEngineMetadata setNeedsToFetchChanges:forRecordZoneID:]
  -[CKSyncEngineMetadata setServerChangeToken:forRecordZoneID:]
  -[CKSyncEngineMetadata setServerChangeTokenForDatabase:]
  -[CKSyncEngineMetadata needsToSaveDatabaseSubscription]
  -[CKSyncEngineMetadata needsToFetchDatabaseChanges]
  -[CKSyncEngineMetadata zoneIDsNeedingToFetchChangesSet]
  -[CKSyncEngineMetadata serverChangeTokensByZoneID]
  -[CKSyncEngineMetadata pendingModificationsSet]
  -[CKSyncEngineMetadata inFlightModificationsSet]
  -[CKSyncEngineMetadata internalChangeCount]
  -[CKSyncEngineMetadata setInternalChangeCount:]
  -[CKSyncEngineMetadata pendingRecordIDsWithModificationType:]
  -[CKSyncEngineMetadata zonesToSaveDictionary]
  -[CKSyncEngineMetadata zoneIDsToDeleteSet]
  -[CKSyncEngineMetadata recordIDsToSave]
  -[CKSyncEngineMetadata needsToFetchChangesForZoneID:]
  -[CKSyncEngineMetadata needsToSaveZone:]
  -[CKSyncEngineMetadata needsToDeleteZoneID:]
  -[CKSyncEngineMetadata setZoneIDsNeedingToFetchChangesSet:]
  -[CKSyncEngineMetadata setServerChangeTokensByZoneID:]
  -[CKSyncEngineMetadata setZonesToSaveDictionary:]
  -[CKSyncEngineMetadata setZoneIDsToDeleteSet:]
  -[CKSyncEngineMetadata setPendingModificationsSet:]
  -[CKSyncEngineMetadata setInFlightModificationsSet:]
  -[CKSyncEngineMetadata fakeRecordIDsToSaveForSerializationTests]
  -[CKSyncEngineMetadata setFakeRecordIDsToSaveForSerializationTests:]
  -[CKSyncEngineMetadata fakeRecordIDsToDeleteForSerializationTests]
  -[CKSyncEngineMetadata setFakeRecordIDsToDeleteForSerializationTests:]


CKSyncEngineRecordModification : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKRecordID *recordID
 @property  long long type

  // class methods
  +[CKSyncEngineRecordModification supportsSecureCoding]
  +[CKSyncEngineRecordModification recordModificationsWithOppositeTypeFromRecordModifications:]

  // instance methods
  -[CKSyncEngineRecordModification isEqual:]
  -[CKSyncEngineRecordModification copyWithZone:]
  -[CKSyncEngineRecordModification type]
  -[CKSyncEngineRecordModification encodeWithCoder:]
  -[CKSyncEngineRecordModification initWithCoder:]
  -[CKSyncEngineRecordModification .cxx_destruct]
  -[CKSyncEngineRecordModification recordID]
  -[CKSyncEngineRecordModification CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKSyncEngineRecordModification initWithRecordID:type:]
  -[CKSyncEngineRecordModification oppositeTypeModification]


CKRecordID : NSObject /usr/lib/libSystem.B.dylib <CKXPCSuitableString, CKSQLiteItem, NSSecureCoding, NSCopying>
 @property  NSString *recordName
 @property  CKRecordZoneID *zoneID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CKRecordID supportsSecureCoding]
  +[CKRecordID isValidRecordName:outError:]

  // instance methods
  -[CKRecordID init]
  -[CKRecordID isEqual:]
  -[CKRecordID copyWithZone:]
  -[CKRecordID encodeWithCoder:]
  -[CKRecordID initWithCoder:]
  -[CKRecordID .cxx_destruct]
  -[CKRecordID zoneID]
  -[CKRecordID recordName]
  -[CKRecordID setZoneID:]
  -[CKRecordID initWithRecordName:zoneID:]
  -[CKRecordID setRecordName:]
  -[CKRecordID CKPropertiesDescription]
  -[CKRecordID ckShortDescription]
  -[CKRecordID sqliteRepresentation]
  -[CKRecordID initWithSqliteRepresentation:]
  -[CKRecordID CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKRecordID CKPropertiesDescriptionWithProperties:]
  -[CKRecordID initWithRecordName:]
  -[CKRecordID CKXPCSuitableString]
  -[CKRecordID compareToRecordID:]


CKRecordZone : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding, NSCopying>
 @property  CKContainerID *containerID
 @property  CKReference *share
 @property  CKRecordZoneID *zoneID
 @property  unsigned long capabilities
 @property  int deviceCount
 @property  NSData *currentServerContinuationToken
 @property  CKServerChangeToken *currentServerChangeToken
 @property  NSData *clientChangeToken
 @property  NSData *protectionData
 @property  NSString *protectionEtag
 @property  NSData *zoneishProtectionData
 @property  BOOL needsZoneishPCSRolled
 @property  BOOL zoneKeyRollAllowed
 @property  NSDate *zonePCSModificationDate
 @property  NSString *zonePCSLastModifierDevice
 @property  NSData *pcsKeyID
 @property  NSData *zoneishKeyID
 @property  NSString *previousProtectionEtag
 @property  long long assetQuotaUsage
 @property  long long metadataQuotaUsage
 @property  BOOL serializeProtectionData
 @property  NSArray *invitedKeysToRemove

  // class methods
  +[CKRecordZone supportsSecureCoding]
  +[CKRecordZone defaultRecordZone]

  // instance methods
  -[CKRecordZone copyWithZone:]
  -[CKRecordZone encodeWithCoder:]
  -[CKRecordZone initWithCoder:]
  -[CKRecordZone .cxx_destruct]
  -[CKRecordZone initWithZoneName:]
  -[CKRecordZone zoneID]
  -[CKRecordZone initWithZoneID:]
  -[CKRecordZone currentServerChangeToken]
  -[CKRecordZone setZoneID:]
  -[CKRecordZone share]
  -[CKRecordZone containerID]
  -[CKRecordZone setShare:]
  -[CKRecordZone capabilities]
  -[CKRecordZone CKPropertiesDescription]
  -[CKRecordZone CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKRecordZone pcsKeyID]
  -[CKRecordZone setPcsKeyID:]
  -[CKRecordZone zoneishKeyID]
  -[CKRecordZone setZoneishKeyID:]
  -[CKRecordZone setCapabilities:]
  -[CKRecordZone setContainerID:]
  -[CKRecordZone CKAssignToContainerWithID:]
  -[CKRecordZone serializeProtectionData]
  -[CKRecordZone setSerializeProtectionData:]
  -[CKRecordZone protectionData]
  -[CKRecordZone setProtectionData:]
  -[CKRecordZone previousProtectionEtag]
  -[CKRecordZone setPreviousProtectionEtag:]
  -[CKRecordZone protectionEtag]
  -[CKRecordZone setProtectionEtag:]
  -[CKRecordZone invitedKeysToRemove]
  -[CKRecordZone setInvitedKeysToRemove:]
  -[CKRecordZone _initZoneWithIdentifier:capabilities:]
  -[CKRecordZone deviceCount]
  -[CKRecordZone setDeviceCount:]
  -[CKRecordZone clientChangeToken]
  -[CKRecordZone setClientChangeToken:]
  -[CKRecordZone setCurrentServerChangeToken:]
  -[CKRecordZone assetQuotaUsage]
  -[CKRecordZone setAssetQuotaUsage:]
  -[CKRecordZone metadataQuotaUsage]
  -[CKRecordZone setMetadataQuotaUsage:]
  -[CKRecordZone zoneishProtectionData]
  -[CKRecordZone setZoneishProtectionData:]
  -[CKRecordZone zoneKeyRollAllowed]
  -[CKRecordZone setZoneKeyRollAllowed:]
  -[CKRecordZone currentServerContinuationToken]
  -[CKRecordZone needsZoneishPCSRolled]
  -[CKRecordZone setNeedsZoneishPCSRolled:]
  -[CKRecordZone zonePCSModificationDate]
  -[CKRecordZone setZonePCSModificationDate:]
  -[CKRecordZone zonePCSLastModifierDevice]
  -[CKRecordZone setZonePCSLastModifierDevice:]


CKStreamingAsset : NSObject /usr/lib/libSystem.B.dylib <CKRecordValue, NSSecureCoding, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSData *fileSignature
 @property  NSData *referenceSignature
 @property  NSString *owner
 @property  unsigned long expectedSizeBytes
 @property  NSURL *uploadURL
 @property  NSDate *uploadURLExpirationDate
 @property  unsigned long reservedSize
 @property  C2RequestOptions *requestOptions
 @property  NSURL *downloadURL
 @property  NSDate *downloadURLExpirationDate
 @property  unsigned long size
 @property  BOOL hasSize
 @property  NSString *uploadReceipt
 @property  unsigned long bytesUploaded
 @property  unsigned long bytesUpperBound
 @property  NSURL *contentDownloadURL
 @property  NSDate *contentDownloadURLExpirationDate

  // class methods
  +[CKStreamingAsset supportsSecureCoding]

  // instance methods
  -[CKStreamingAsset init]
  -[CKStreamingAsset copyWithZone:]
  -[CKStreamingAsset encodeWithCoder:]
  -[CKStreamingAsset initWithCoder:]
  -[CKStreamingAsset .cxx_destruct]
  -[CKStreamingAsset size]
  -[CKStreamingAsset setOwner:]
  -[CKStreamingAsset owner]
  -[CKStreamingAsset setSize:]
  -[CKStreamingAsset setUploadURL:]
  -[CKStreamingAsset uploadURL]
  -[CKStreamingAsset CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKStreamingAsset setRequestOptions:]
  -[CKStreamingAsset fileSignature]
  -[CKStreamingAsset referenceSignature]
  -[CKStreamingAsset setFileSignature:]
  -[CKStreamingAsset setReferenceSignature:]
  -[CKStreamingAsset _initBare]
  -[CKStreamingAsset hasSize]
  -[CKStreamingAsset uploadReceipt]
  -[CKStreamingAsset downloadURL]
  -[CKStreamingAsset setUploadReceipt:]
  -[CKStreamingAsset setHasSize:]
  -[CKStreamingAsset bytesUploaded]
  -[CKStreamingAsset requestOptions]
  -[CKStreamingAsset copyServerFieldsFromStreamingAsset:]
  -[CKStreamingAsset uploadURLExpirationDate]
  -[CKStreamingAsset setUploadURLExpirationDate:]
  -[CKStreamingAsset setDownloadURL:]
  -[CKStreamingAsset downloadURLExpirationDate]
  -[CKStreamingAsset setDownloadURLExpirationDate:]
  -[CKStreamingAsset expectedSizeBytes]
  -[CKStreamingAsset setExpectedSizeBytes:]
  -[CKStreamingAsset reservedSize]
  -[CKStreamingAsset setReservedSize:]
  -[CKStreamingAsset initWithExpectedSizeBytes:]
  -[CKStreamingAsset contentDownloadURL]
  -[CKStreamingAsset contentDownloadURLExpirationDate]
  -[CKStreamingAsset bytesUpperBound]


CKFetchShareParticipantsOperation : CKOperation
 @property  NSMutableSet *discoveredUserIdentities
 @property  NSMutableDictionary *lookupErrors
 @property  NSArray *userIdentityLookupInfos
 @property  @? shareParticipantFetchedBlock
 @property  @? fetchShareParticipantsCompletionBlock

  // instance methods
  -[CKFetchShareParticipantsOperation init]
  -[CKFetchShareParticipantsOperation .cxx_destruct]
  -[CKFetchShareParticipantsOperation fillOutOperationInfo:]
  -[CKFetchShareParticipantsOperation fillFromOperationInfo:]
  -[CKFetchShareParticipantsOperation hasCKOperationCallbacksSet]
  -[CKFetchShareParticipantsOperation CKOperationShouldRun:]
  -[CKFetchShareParticipantsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchShareParticipantsOperation activityCreate]
  -[CKFetchShareParticipantsOperation performCKOperation]
  -[CKFetchShareParticipantsOperation _handleProgressCallback:]
  -[CKFetchShareParticipantsOperation initWithUserIdentityLookupInfos:]
  -[CKFetchShareParticipantsOperation setShareParticipantFetchedBlock:]
  -[CKFetchShareParticipantsOperation setFetchShareParticipantsCompletionBlock:]
  -[CKFetchShareParticipantsOperation setUserIdentityLookupInfos:]
  -[CKFetchShareParticipantsOperation userIdentityLookupInfos]
  -[CKFetchShareParticipantsOperation shareParticipantFetchedBlock]
  -[CKFetchShareParticipantsOperation fetchShareParticipantsCompletionBlock]
  -[CKFetchShareParticipantsOperation discoveredUserIdentities]
  -[CKFetchShareParticipantsOperation lookupErrors]
  -[CKFetchShareParticipantsOperation setDiscoveredUserIdentities:]
  -[CKFetchShareParticipantsOperation setLookupErrors:]


CKFetchShareParticipantsOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  NSArray *userIdentityLookupInfos

  // class methods
  +[CKFetchShareParticipantsOperationInfo supportsSecureCoding]

  // instance methods
  -[CKFetchShareParticipantsOperationInfo encodeWithCoder:]
  -[CKFetchShareParticipantsOperationInfo initWithCoder:]
  -[CKFetchShareParticipantsOperationInfo .cxx_destruct]
  -[CKFetchShareParticipantsOperationInfo setUserIdentityLookupInfos:]
  -[CKFetchShareParticipantsOperationInfo userIdentityLookupInfos]


CKFetchUserQuotaOperation : CKDatabaseOperation
 @property  unsigned long quotaAvailable
 @property  @? fetchUserQuotaCompletionBlock

  // instance methods
  -[CKFetchUserQuotaOperation init]
  -[CKFetchUserQuotaOperation .cxx_destruct]
  -[CKFetchUserQuotaOperation hasCKOperationCallbacksSet]
  -[CKFetchUserQuotaOperation _finishOnCallbackQueueWithError:]
  -[CKFetchUserQuotaOperation activityCreate]
  -[CKFetchUserQuotaOperation performCKOperation]
  -[CKFetchUserQuotaOperation operationInfoClass]
  -[CKFetchUserQuotaOperation _handleCompletionCallback:]
  -[CKFetchUserQuotaOperation fetchUserQuotaCompletionBlock]
  -[CKFetchUserQuotaOperation quotaAvailable]
  -[CKFetchUserQuotaOperation setQuotaAvailable:]
  -[CKFetchUserQuotaOperation setFetchUserQuotaCompletionBlock:]


CKFetchUserQuotaOperationResult : CKOperationResult <NSSecureCoding>
 @property  unsigned long quotaAvailable

  // class methods
  +[CKFetchUserQuotaOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchUserQuotaOperationResult copyWithZone:]
  -[CKFetchUserQuotaOperationResult encodeWithCoder:]
  -[CKFetchUserQuotaOperationResult initWithCoder:]
  -[CKFetchUserQuotaOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchUserQuotaOperationResult quotaAvailable]
  -[CKFetchUserQuotaOperationResult setQuotaAvailable:]


CKFetchWhitelistedBundleIDsOperation : CKOperation
 @property  NSArray *bundleIDs
 @property  @? fetchWhitelistedBundleIDsCompletionBlock

  // instance methods
  -[CKFetchWhitelistedBundleIDsOperation .cxx_destruct]
  -[CKFetchWhitelistedBundleIDsOperation bundleIDs]
  -[CKFetchWhitelistedBundleIDsOperation hasCKOperationCallbacksSet]
  -[CKFetchWhitelistedBundleIDsOperation _finishOnCallbackQueueWithError:]
  -[CKFetchWhitelistedBundleIDsOperation activityCreate]
  -[CKFetchWhitelistedBundleIDsOperation performCKOperation]
  -[CKFetchWhitelistedBundleIDsOperation operationInfoClass]
  -[CKFetchWhitelistedBundleIDsOperation _handleCompletionCallback:]
  -[CKFetchWhitelistedBundleIDsOperation fetchWhitelistedBundleIDsCompletionBlock]
  -[CKFetchWhitelistedBundleIDsOperation setBundleIDs:]
  -[CKFetchWhitelistedBundleIDsOperation setFetchWhitelistedBundleIDsCompletionBlock:]


CKFetchWhitelistedBundleIDsOperationResult : CKOperationResult <NSSecureCoding>
 @property  NSArray *bundleIDs

  // class methods
  +[CKFetchWhitelistedBundleIDsOperationResult supportsSecureCoding]

  // instance methods
  -[CKFetchWhitelistedBundleIDsOperationResult copyWithZone:]
  -[CKFetchWhitelistedBundleIDsOperationResult encodeWithCoder:]
  -[CKFetchWhitelistedBundleIDsOperationResult initWithCoder:]
  -[CKFetchWhitelistedBundleIDsOperationResult .cxx_destruct]
  -[CKFetchWhitelistedBundleIDsOperationResult bundleIDs]
  -[CKFetchWhitelistedBundleIDsOperationResult CKDescriptionPropertiesWithPublic:private:shouldExpand:]
  -[CKFetchWhitelistedBundleIDsOperationResult setBundleIDs:]


CKServerChangeToken : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSData *data

  // class methods
  +[CKServerChangeToken supportsSecureCoding]

  // instance methods
  -[CKServerChangeToken init]
  -[CKServerChangeToken isEqual:]
  -[CKServerChangeToken copyWithZone:]
  -[CKServerChangeToken encodeWithCoder:]
  -[CKServerChangeToken initWithCoder:]
  -[CKServerChangeToken initWithData:]
  -[CKServerChangeToken .cxx_destruct]
  -[CKServerChangeToken data]
  -[CKServerChangeToken setData:]
  -[CKServerChangeToken CKPropertiesDescription]


CKEventMetric : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  BOOL hasBeenSubmitted
 @property  NSUUID *metricUUID
 @property  BOOL inferredAllowsCellular
 @property  BOOL inferredPreferAnonymousRequests
 @property  NSString *inferredSourceApplicationBundleIdentifier
 @property  NSString *inferredSourceApplicationSecondaryIdentifier
 @property  NSMutableDictionary *attributes
 @property  NSMutableDictionary *associatedOperations
 @property  NSMutableDictionary *associatedOperationGroups
 @property  BOOL isCKInternalMetric
 @property  BOOL isPushTriggerFired
 @property  NSString *eventName
 @property  NSDate *startTime
 @property  NSDate *endTime

  // class methods
  +[CKEventMetric supportsSecureCoding]

  // instance methods
  -[CKEventMetric encodeWithCoder:]
  -[CKEventMetric initWithCoder:]
  -[CKEventMetric .cxx_destruct]
  -[CKEventMetric setObject:forKeyedSubscript:]
  -[CKEventMetric attributes]
  -[CKEventMetric eventName]
  -[CKEventMetric initWithEventName:]
  -[CKEventMetric associateWithCompletedOperation:]
  -[CKEventMetric setMetricValue:forKey:]
  -[CKEventMetric startTime]
  -[CKEventMetric endTime]
  -[CKEventMetric setEndTime:]
  -[CKEventMetric setStartTime:]
  -[CKEventMetric generateEventMetricInfo]
  -[CKEventMetric metricUUID]
  -[CKEventMetric setIsCKInternalMetric:]
  -[CKEventMetric initWithEventName:atTime:]
  -[CKEventMetric hasBeenSubmitted]
  -[CKEventMetric inferredAllowsCellular]
  -[CKEventMetric setInferredAllowsCellular:]
  -[CKEventMetric inferredPreferAnonymousRequests]
  -[CKEventMetric setInferredPreferAnonymousRequests:]
  -[CKEventMetric associatedOperations]
  -[CKEventMetric setInferredSourceApplicationBundleIdentifier:]
  -[CKEventMetric setInferredSourceApplicationSecondaryIdentifier:]
  -[CKEventMetric associatedOperationGroups]
  -[CKEventMetric setHasBeenSubmitted:]
  -[CKEventMetric inferredSourceApplicationBundleIdentifier]
  -[CKEventMetric inferredSourceApplicationSecondaryIdentifier]
  -[CKEventMetric isCKInternalMetric]
  -[CKEventMetric isPushTriggerFired]
  -[CKEventMetric setIsPushTriggerFired:]


CKEventOperationInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *operationID
 @property  NSString *operationType
 @property  NSString *operationGroupID

  // class methods
  +[CKEventOperationInfo supportsSecureCoding]

  // instance methods
  -[CKEventOperationInfo encodeWithCoder:]
  -[CKEventOperationInfo initWithCoder:]
  -[CKEventOperationInfo .cxx_destruct]
  -[CKEventOperationInfo operationType]
  -[CKEventOperationInfo operationID]
  -[CKEventOperationInfo operationGroupID]
  -[CKEventOperationInfo initWithOperation:]


CKEventOperationGroupInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSString *operationGroupID
 @property  NSString *operationGroupName

  // class methods
  +[CKEventOperationGroupInfo supportsSecureCoding]

  // instance methods
  -[CKEventOperationGroupInfo encodeWithCoder:]
  -[CKEventOperationGroupInfo initWithCoder:]
  -[CKEventOperationGroupInfo .cxx_destruct]
  -[CKEventOperationGroupInfo operationGroupID]
  -[CKEventOperationGroupInfo initWithOperationGroup:]
  -[CKEventOperationGroupInfo operationGroupName]


CKEventMetricInfo : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  NSUUID *metricUUID
 @property  BOOL isCKInternalMetric
 @property  BOOL isPushTriggerFired
 @property  BOOL allowsCellularAccess
 @property  BOOL preferAnonymousRequests
 @property  NSString *sourceApplicationBundleIdentifier
 @property  NSString *sourceApplicationSecondaryIdentifier
 @property  NSString *eventName
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  NSDictionary *attributes
 @property  NSMutableDictionary *associatedOperations
 @property  NSMutableDictionary *associatedOperationGroups

  // class methods
  +[CKEventMetricInfo supportsSecureCoding]

  // instance methods
  -[CKEventMetricInfo encodeWithCoder:]
  -[CKEventMetricInfo initWithCoder:]
  -[CKEventMetricInfo .cxx_destruct]
  -[CKEventMetricInfo attributes]
  -[CKEventMetricInfo eventName]
  -[CKEventMetricInfo startTime]
  -[CKEventMetricInfo endTime]
  -[CKEventMetricInfo allowsCellularAccess]
  -[CKEventMetricInfo sourceApplicationBundleIdentifier]
  -[CKEventMetricInfo sourceApplicationSecondaryIdentifier]
  -[CKEventMetricInfo metricUUID]
  -[CKEventMetricInfo preferAnonymousRequests]
  -[CKEventMetricInfo associatedOperations]
  -[CKEventMetricInfo associatedOperationGroups]
  -[CKEventMetricInfo initWithEventMetric:]
  -[CKEventMetricInfo isCKInternalMetric]
  -[CKEventMetricInfo isPushTriggerFired]


CKOperationCallbackManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *progressCallbacks
 @property  NSMutableDictionary *statisticsCallbacks
 @property  NSMutableDictionary *commandCallbacks
 @property  NSMutableDictionary *completionCallbacks
 @property  NSMutableDictionary *checkpointCallbacks
 @property  NSMutableDictionary *discretionarySuspensionCallbacks
 @property  NSMapTable *operationsByID

  // instance methods
  -[CKOperationCallbackManager init]
  -[CKOperationCallbackManager .cxx_destruct]
  -[CKOperationCallbackManager handleOperationProgress:forOperationWithID:reply:]
  -[CKOperationCallbackManager handleOperationStatistics:forOperationWithID:]
  -[CKOperationCallbackManager handleOperationCompletion:forOperationWithID:]
  -[CKOperationCallbackManager handleOperationCheckpoint:forOperationWithID:]
  -[CKOperationCallbackManager removeAllCallbacks]
  -[CKOperationCallbackManager handleDiscretionarySuspensionForOperationWithID:]
  -[CKOperationCallbackManager registerProgressCallback:forOperation:]
  -[CKOperationCallbackManager registerStatisticsCallback:forOperation:]
  -[CKOperationCallbackManager registerCompletionCallback:forOperation:]
  -[CKOperationCallbackManager registerCheckpointCallback:forOperation:]
  -[CKOperationCallbackManager registerSuspensionCallback:forDiscretionaryOperation:]
  -[CKOperationCallbackManager unregisterAllCallbacksForOperation:]
  -[CKOperationCallbackManager operationsByID]
  -[CKOperationCallbackManager progressCallbacks]
  -[CKOperationCallbackManager statisticsCallbacks]
  -[CKOperationCallbackManager commandCallbacks]
  -[CKOperationCallbackManager completionCallbacks]
  -[CKOperationCallbackManager checkpointCallbacks]
  -[CKOperationCallbackManager discretionarySuspensionCallbacks]
  -[CKOperationCallbackManager _performCallbackForOperation:callback:errorCallback:]
  -[CKOperationCallbackManager registerCommandCallback:forOperation:]
  -[CKOperationCallbackManager setProgressCallbacks:]
  -[CKOperationCallbackManager setStatisticsCallbacks:]
  -[CKOperationCallbackManager setCommandCallbacks:]
  -[CKOperationCallbackManager setCompletionCallbacks:]
  -[CKOperationCallbackManager setCheckpointCallbacks:]
  -[CKOperationCallbackManager setDiscretionarySuspensionCallbacks:]
  -[CKOperationCallbackManager setOperationsByID:]


CKObject : NSObject /usr/lib/libSystem.B.dylib <CKPropertyCoding>
 @property  CKObjCClass *objcClass
 @property  NSSet *propertyNamesNotToEncode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CKObject isEqual:]
  -[CKObject dictionaryPropertyEncoding]
  -[CKObject initWithPropertyDictionary:]
  -[CKObject objcClass]
  -[CKObject propertyNamesNotToEncode]


CKDiscoverUserIdentitiesOperation : CKOperation
 @property  NSArray *userIdentityLookupInfos
 @property  @? userIdentityDiscoveredBlock
 @property  @? discoverUserIdentitiesCompletionBlock

  // instance methods
  -[CKDiscoverUserIdentitiesOperation init]
  -[CKDiscoverUserIdentitiesOperation .cxx_destruct]
  -[CKDiscoverUserIdentitiesOperation fillOutOperationInfo:]
  -[CKDiscoverUserIdentitiesOperation fillFromOperationInfo:]
  -[CKDiscoverUserIdentitiesOperation CKOperationShouldRun:]
  -[CKDiscoverUserIdentitiesOperation _finishOnCallbackQueueWithError:]
  -[CKDiscoverUserIdentitiesOperation performCKOperation]
  -[CKDiscoverUserIdentitiesOperation _handleProgressCallback:]
  -[CKDiscoverUserIdentitiesOperation operationInfoClass]
  -[CKDiscoverUserIdentitiesOperation setUserIdentityDiscoveredBlock:]
  -[CKDiscoverUserIdentitiesOperation initWithUserIdentityLookupInfos:]
  -[CKDiscoverUserIdentitiesOperation setDiscoverUserIdentitiesCompletionBlock:]
  -[CKDiscoverUserIdentitiesOperation userIdentityDiscoveredBlock]
  -[CKDiscoverUserIdentitiesOperation setUserIdentityLookupInfos:]
  -[CKDiscoverUserIdentitiesOperation userIdentityLookupInfos]
  -[CKDiscoverUserIdentitiesOperation discoverUserIdentitiesCompletionBlock]


CKDiscoverUserIdentitiesOperationInfo : CKOperationInfo <NSSecureCoding>
 @property  NSArray *userIdentityLookupInfos

  // class methods
  +[CKDiscoverUserIdentitiesOperationInfo supportsSecureCoding]

  // instance methods
  -[CKDiscoverUserIdentitiesOperationInfo encodeWithCoder:]
  -[CKDiscoverUserIdentitiesOperationInfo initWithCoder:]
  -[CKDiscoverUserIdentitiesOperationInfo .cxx_destruct]
  -[CKDiscoverUserIdentitiesOperationInfo activityCreate]
  -[CKDiscoverUserIdentitiesOperationInfo setUserIdentityLookupInfos:]
  -[CKDiscoverUserIdentitiesOperationInfo userIdentityLookupInfos]


NSString(CKUtilsAdditions)
	// instance methods
	-[NSString(CKUtilsAdditions) ckShortDescription]
	-[NSString(CKUtilsAdditions) CKSanitizedPath]
	-[NSString(CKUtilsAdditions) CKSafeStringForURLWithCharsToBeEscaped:]
	-[NSString(CKUtilsAdditions) CKSafeStringForPathComponent]
	-[NSString(CKUtilsAdditions) CKSafeHashStringForPathComponent]
	-[NSString(CKUtilsAdditions) CKSafeStringForURLPathComponent]
	-[NSString(CKUtilsAdditions) CKMangledDocumentNameForURLFragment]
	-[NSString(CKUtilsAdditions) CKUnmangledDocumentNameFromURLFragment]
	-[NSString(CKUtilsAdditions) CKSHA256]
	-[NSString(CKUtilsAdditions) CKNilIfLengthZero]
	-[NSString(CKUtilsAdditions) CKBase64EncodedURLSafeString]
	-[NSString(CKUtilsAdditions) CKBase64DecodedString]
	-[NSString(CKUtilsAdditions) _CKDPIdentifierWithType:]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_Raw]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_Record]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_User]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_Device]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_Subscription]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_ShareId]
	-[NSString(CKUtilsAdditions) CKDPIdentifier_Zone]

NSData(CKUtilsAdditions)
	// class methods
	+[NSData(CKUtilsAdditions) CKDataWithHexString:stringIsUppercase:]
	+[NSData(CKUtilsAdditions) CKDataWithHexString:]
	+[NSData(CKUtilsAdditions) CKDataFromBase64URLSafeString:]

	// instance methods
	-[NSData(CKUtilsAdditions) CKUppercaseHexStringWithoutSpaces]
	-[NSData(CKUtilsAdditions) CKHexString]
	-[NSData(CKUtilsAdditions) CKLowercaseHexStringWithoutSpaces]
	-[NSData(CKUtilsAdditions) CKDescriptionPropertiesWithPublic:private:shouldExpand:]
	-[NSData(CKUtilsAdditions) CKBase64URLSafeString]
	-[NSData(CKUtilsAdditions) CKSHA256]
	-[NSData(CKUtilsAdditions) hashedDescription]

NSURL(CKUtilsAdditions)
	// class methods
	+[NSURL(CKUtilsAdditions) databaseRPCURLWithCodeServicesURL:inEnvironment:]

	// instance methods
	-[NSURL(CKUtilsAdditions) CKSharingURLSubscheme]
	-[NSURL(CKUtilsAdditions) CKXPCSuitableString]

NSMutableSet(CKUtilsAdditions)
	// instance methods
	-[NSMutableSet(CKUtilsAdditions) CKSynchronizedAddIfAbsent:]
	-[NSMutableSet(CKUtilsAdditions) CKSynchronizedRemoveObject:]

NSMutableDictionary(CKUtilsAdditions)
	// instance methods
	-[NSMutableDictionary(CKUtilsAdditions) CKAddPropertySafelyForKey:value:]
	-[NSMutableDictionary(CKUtilsAdditions) CKSynchronizedSetIfAbsentObject:forKey:]
	-[NSMutableDictionary(CKUtilsAdditions) CKSynchronizedRemoveObjectForKey:]

NSDictionary(CKUtilsAdditions)
	// instance methods
	-[NSDictionary(CKUtilsAdditions) CKDescriptionPropertiesWithPublic:private:shouldExpand:]
	-[NSDictionary(CKUtilsAdditions) CKFirstUrlForKeys:]
	-[NSDictionary(CKUtilsAdditions) CKAssignToContainerWithID:]

NSError(CKUtilsAdditions)
	// class methods
	+[NSError(CKUtilsAdditions) CKErrorWithPOSIXCode:]
	+[NSError(CKUtilsAdditions) CKErrorFromErrno]

	// instance methods
	-[NSError(CKUtilsAdditions) CKDescriptionPropertiesWithPublic:private:shouldExpand:]
	-[NSError(CKUtilsAdditions) CKClientSuitableError]
	-[NSError(CKUtilsAdditions) CKIsPOSIXErrorCode:]
	-[NSError(CKUtilsAdditions) CKHasTopLevelUnderlyingError]
	-[NSError(CKUtilsAdditions) isComparisonError]
	-[NSError(CKUtilsAdditions) CKClientSuitableUnderlyingError]
	-[NSError(CKUtilsAdditions) CKIsCKError]
	-[NSError(CKUtilsAdditions) CKHasCKErrorInChildChain]
	-[NSError(CKUtilsAdditions) CKIsNotFoundError]

NSObject(CKPropertiesDescription)
	// class methods
	+[NSObject(CKPropertiesDescription) CKSQLiteClassName]

	// instance methods
	-[NSObject(CKPropertiesDescription) CKDescription]
	-[NSObject(CKPropertiesDescription) CKPropertiesDescription]
	-[NSObject(CKPropertiesDescription) CKDescriptionPropertiesWithPublic:private:shouldExpand:]
	-[NSObject(CKPropertiesDescription) CKPropertiesDescriptionStringFromProperties:]
	-[NSObject(CKPropertiesDescription) CKStatusReport]
	-[NSObject(CKPropertiesDescription) hashedDescription]
	-[NSObject(CKPropertiesDescription) CKAssignToContainerWithID:]

NSArray(CKPropertiesDescription)
	// instance methods
	-[NSArray(CKPropertiesDescription) CKDescriptionPropertiesWithPublic:private:shouldExpand:]
	-[NSArray(CKPropertiesDescription) CKAssignToContainerWithID:]
	-[NSArray(CKPropertiesDescription) CKComponentsAndSubcomponentsJoinedByString:]

NSOrderedSet(CKPropertiesDescription)
	// instance methods
	-[NSOrderedSet(CKPropertiesDescription) CKDescriptionPropertiesWithPublic:private:shouldExpand:]

CLLocation(CKPropertiesDescription)
	// class methods
	+[CLLocation(CKPropertiesDescription) CKDPLocationCoordinateFromCLLocation:]
	+[CLLocation(CKPropertiesDescription) CKLocationFromPLocationCoordinate:]

	// instance methods
	-[CLLocation(CKPropertiesDescription) CKDescriptionPropertiesWithPublic:private:shouldExpand:]

NSPersonNameComponents(CKPropertiesDescription)
	// instance methods
	-[NSPersonNameComponents(CKPropertiesDescription) CKDescriptionPropertiesWithPublic:private:shouldExpand:]

NSSet(CKAssignToContainer)
	// instance methods
	-[NSSet(CKAssignToContainer) CKAssignToContainerWithID:]

NSExpression(Validation)
	// instance methods
	-[NSExpression(Validation) CKExpressionValue]

NSNumber(CKRecordValue)
NSDate(CKRecordValue)
APSConnection(CKAPSMachServiceConnection)
	// class methods
	+[APSConnection(CKAPSMachServiceConnection) ck_singletonConnectionForEnvironmentName:namedDelegatePort:]

01 00 0500 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 0700 /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService: APSConnection 
01 00 0800 /System/Library/PrivateFrameworks/C2.framework/C2: C2RequestManager 
01 00 0800 /System/Library/PrivateFrameworks/C2.framework/C2: C2RequestOptions 
01 00 0a00 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 1300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUState 
01 00 1300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUStateEvent 
01 00 1300 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUStateMachine 
01 00 0b00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleProxy 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSComparisonPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSEnumerator 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExpression 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1400 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponents 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPersonNameComponentsFormatter 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1600 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 1000 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 1100 /System/Library/Frameworks/PushKit.framework/PushKit: PKPushRegistry 
01 00 0300 /System/Library/PrivateFrameworks/SymptomDiagnosticReporter.framework/SymptomDiagnosticReporter: SDRDiagnosticReporter 
01 00 0400 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserManager 
