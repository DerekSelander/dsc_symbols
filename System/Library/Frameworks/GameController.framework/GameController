|| __DATA.__common _s_cbDelegate
|| __DATA.__common _s_cbDelegateQueue
|| __DATA.__common _s_mbDelegate
|| __DATA.__common _s_sfDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerAxisInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerButtonInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerCBDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerDirectionPad
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerElement
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerMBDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerSFDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerTouchpad
|| __DATA.__objc_data _OBJC_CLASS_$_GCEventViewController
|| __DATA.__objc_data _OBJC_CLASS_$_GCExtendedGamepad
|| __DATA.__objc_data _OBJC_CLASS_$_GCExtendedGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCGamepad
|| __DATA.__objc_data _OBJC_CLASS_$_GCGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCMicroGamepad
|| __DATA.__objc_data _OBJC_CLASS_$_GCMicroGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCMotion
|| __DATA.__objc_data _OBJC_CLASS_$_GCStereoAR
|| __DATA.__objc_data _OBJC_CLASS_$__GCController
|| __DATA.__objc_data _OBJC_METACLASS_$_GCAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerAxisInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerButtonInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerCBDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerDirectionPad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerElement
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerMBDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerSFDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerTouchpad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCEventViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_GCExtendedGamepad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCExtendedGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCGamepad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMicroGamepad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMicroGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMotion
|| __DATA.__objc_data _OBJC_METACLASS_$_GCStereoAR
|| __DATA.__objc_data _OBJC_METACLASS_$__GCController
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._centralManager
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._connectedPeripherals
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._foundPeripherals
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._discoveryAgent
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._pairingAgent
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._session
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._timer
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerSFDelegate._activity
|| __DATA_CONST.__const _GCControllerDidConnectNotification
|| __DATA_CONST.__const _GCControllerDidDisconnectNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCController
|| __TEXT.__const _GCControllerButtonInputPressedThreshold
|| __TEXT.__const _GCCurrentExtendedGamepadSnapshotDataVersion
|| __TEXT.__const _GCCurrentMicroGamepadSnapshotDataVersion
|| __TEXT.__text _ADLogControllerConnect
|| __TEXT.__text _ControllerClassForService
|| __TEXT.__text _GCControllerManagerInit
|| __TEXT.__text _GCControllerManagerInitXPC
|| __TEXT.__text _GCExtendedGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCExtendedGamepadSnapshotDataFromNSData
|| __TEXT.__text _GCGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCMicroGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCMicroGamepadSnapshotDataFromNSData
|| __TEXT.__text _HIDControllerClassForVendorAndProduct
|| __TEXT.__text _NSDataFromGCExtendedGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCExtendedGamepadSnapshotData
|| __TEXT.__text _NSDataFromGCGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCMicroGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCMicroGamepadSnapshotData
|| __TEXT.__text _USBControllerClassForVendorAndProduct
|| __TEXT.__text _VendorNameForATVProfile
|| __TEXT.__text __GCHIDEventCallback
|| __TEXT.__text _clamp
|| __TEXT.__text _currentProcessHasEntitlement
|| __TEXT.__text _doesDescriptorConformToSpec
|| __TEXT.__text _elementRangesMatch
|| __TEXT.__text _gc_isInternalBuild
|| __TEXT.__text _getGCHIDLogger
|| __TEXT.__text _getInterfaceNumberForDevice
|| __TEXT.__text _isDeviceAppleB239Digitizer
|| __TEXT.__text _isDeviceAppleControlCenterRemote
|| __TEXT.__text _isDeviceAppleEmbeddedBluetoothButtons
|| __TEXT.__text _isDeviceAppleSiriRemote
|| __TEXT.__text _isDeviceDualShock4
|| __TEXT.__text _isDeviceMFiAuthenticated
|| __TEXT.__text _isDeviceMotionLite
|| __TEXT.__text _isDeviceStereoARController
|| __TEXT.__text _isDeviceXboxOne
|| __TEXT.__text _serviceMatchesUsageAndUsagePage
|| __TEXT.__text _setControllerForElementsWithObject
|| __TEXT.__text _threadRunLoopSourceCallback
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AggregateDictionary: _ADClientSetValueForScalarKey
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBluetooth: _CBCentralManagerOptionShowPowerAlertKey
__ CoreBluetooth: _CBCentralManagerScanOptionAllowDuplicatesKey
__ CoreBluetooth: _CBConnectPeripheralOptionNotifyOnDisconnectionKey
__ CoreBluetooth: _OBJC_CLASS_$_CBCentralManager
__ CoreBluetooth: _OBJC_CLASS_$_CBUUID
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRun
__ CoreFoundation: _CFRunLoopSourceCreate
__ CoreFoundation: _CFRunLoopSourceSignal
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreGraphics: _CGPointZero
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _NSClassFromString
__ Foundation: _NSLog
__ Foundation: _NSLogv
__ Foundation: _NSStringFromClass
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ GraphicsServices: _GSEventResetIdleTimer
__ IOKit: _IOHIDDeviceGetService
__ IOKit: _IOHIDDeviceSetReport
__ IOKit: _IOHIDElementGetLogicalMax
__ IOKit: _IOHIDElementGetLogicalMin
__ IOKit: _IOHIDElementGetPhysicalMax
__ IOKit: _IOHIDElementGetPhysicalMin
__ IOKit: _IOHIDElementGetReportCount
__ IOKit: _IOHIDElementGetReportSize
__ IOKit: _IOHIDEventGetChildren
__ IOKit: _IOHIDEventGetDoubleValue
__ IOKit: _IOHIDEventGetFloatValue
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetSenderID
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOHIDEventSystemClientCopyServices
__ IOKit: _IOHIDEventSystemClientCreateWithType
__ IOKit: _IOHIDEventSystemClientRegisterDeviceMatchingBlock
__ IOKit: _IOHIDEventSystemClientRegisterEventCallback
__ IOKit: _IOHIDEventSystemClientScheduleWithDispatchQueue
__ IOKit: _IOHIDEventSystemClientSetMatchingMultiple
__ IOKit: _IOHIDEventSystemClientUnregisterDeviceMatchingBlock
__ IOKit: _IOHIDEventSystemClientUnscheduleFromDispatchQueue
__ IOKit: _IOHIDServiceClientConformsTo
__ IOKit: _IOHIDServiceClientCopyProperty
__ IOKit: _IOHIDServiceClientGetRegistryID
__ IOKit: _IOHIDServiceClientRegisterRemovalBlock
__ IOKit: _IOHIDServiceClientSetElementValue
__ IOKit: _IOHIDServiceClientSetProperty
__ IOKit: _IOHIDValueGetElement
__ IOKit: _IOHIDValueGetIntegerValue
__ IOKit: _IOHIDValueGetScaledValue
__ IOKit: _IORegistryEntrySearchCFProperty
__ MobileBluetooth: _BTDeviceConnectServices
__ MobileBluetooth: _BTDeviceGetDeviceClass
__ MobileBluetooth: _BTDeviceGetDeviceType
__ MobileBluetooth: _BTDiscoveryAgentCreate
__ MobileBluetooth: _BTDiscoveryAgentDestroy
__ MobileBluetooth: _BTDiscoveryAgentStartScan
__ MobileBluetooth: _BTDiscoveryAgentStopScan
__ MobileBluetooth: _BTPairingAgentAcceptSSP
__ MobileBluetooth: _BTPairingAgentCreate
__ MobileBluetooth: _BTPairingAgentDestroy
__ MobileBluetooth: _BTPairingAgentStart
__ MobileBluetooth: _BTPairingAgentStop
__ MobileBluetooth: _BTSessionAttachWithQueue
__ MobileBluetooth: _BTSessionDetachWithQueue
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidFinishLaunchingNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIApplicationWillTerminateNotification
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _gethostname
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _pthread_set_qos_class_self_np
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_copy_entitlement_for_self
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_copyPropertyList
__ libobjc.A.dylib: _class_getSuperclass
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _property_copyAttributeList
__ libobjc.A.dylib: _property_getName
_GCMFiGamepadControllerProfile : GCGamepad <_GCACHomeButtonDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCMFiGamepadControllerProfile name]
  -[_GCMFiGamepadControllerProfile initWithCoder:]
  -[_GCMFiGamepadControllerProfile .cxx_destruct]
  -[_GCMFiGamepadControllerProfile setPlayerIndex:]
  -[_GCMFiGamepadControllerProfile initWithController:]
  -[_GCMFiGamepadControllerProfile toggleSuspendResume]
  -[_GCMFiGamepadControllerProfile menuButton]


_GCStereoARCustomMotionProfile : GCMotion
  // instance methods
  -[_GCStereoARCustomMotionProfile initWithController:]
  -[_GCStereoARCustomMotionProfile _setForwardQuaternion:]
  -[_GCStereoARCustomMotionProfile hasAttitudeAndRotationRate]
  -[_GCStereoARCustomMotionProfile _setAttitudeWithControllerUpdate:]


GCAnalytics : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[GCAnalytics instance]

  // instance methods
  -[GCAnalytics init]
  -[GCAnalytics dealloc]
  -[GCAnalytics .cxx_destruct]
  -[GCAnalytics getBundleID]
  -[GCAnalytics sendInputsPressedEvent:]
  -[GCAnalytics runInputPollTimer]
  -[GCAnalytics checkMultipleControllers]
  -[GCAnalytics publishController:]
  -[GCAnalytics unpublishController:]
  -[GCAnalytics onSiriMotionEnabled]


GCGamepadSnapshot : GCGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCGamepadSnapshot init]
  -[GCGamepadSnapshot .cxx_destruct]
  -[GCGamepadSnapshot initWithController:snapshotData:]
  -[GCGamepadSnapshot setSnapshotData:]
  -[GCGamepadSnapshot snapshotData]
  -[GCGamepadSnapshot initWithSnapshotData:]


GCMotion : NSObject /usr/lib/libSystem.B.dylib
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  {?=ddd} gravity
 @property  {?=ddd} userAcceleration
 @property  BOOL hasAttitudeAndRotationRate
 @property  {GCQuaternion=dddd} attitude
 @property  {?=ddd} rotationRate

  // instance methods
  -[GCMotion .cxx_destruct]
  -[GCMotion gravity]
  -[GCMotion controller]
  -[GCMotion setGravity:]
  -[GCMotion attitude]
  -[GCMotion _tilt]
  -[GCMotion _tip]
  -[GCMotion setValueChangedHandler:]
  -[GCMotion userAcceleration]
  -[GCMotion rotationRate]
  -[GCMotion initWithController:]
  -[GCMotion setRotationRate:]
  -[GCMotion setUserAcceleration:]
  -[GCMotion setAttitude:]
  -[GCMotion _setCompassEnabled:]
  -[GCMotion _setAttitude:]
  -[GCMotion hasAttitudeAndRotationRate]
  -[GCMotion valueChangedHandler]
  -[GCMotion _setMotionLite:]
  -[GCMotion isEmulatedMicroGamepad]
  -[GCMotion _setGravity:]
  -[GCMotion _setUserAcceleration:]
  -[GCMotion _setRotationRate:]
  -[GCMotion _startDeviceMotionUpdates]
  -[GCMotion _stopDeviceMotionUpdates]
  -[GCMotion _isUpdatingDeviceMotion]
  -[GCMotion setStateFromMotion:]
  -[GCMotion _pauseMotionUpdates:]


GCExtendedGamepadSnapshot : GCExtendedGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCExtendedGamepadSnapshot init]
  -[GCExtendedGamepadSnapshot .cxx_destruct]
  -[GCExtendedGamepadSnapshot initWithController:snapshotData:]
  -[GCExtendedGamepadSnapshot setSnapshotData:]
  -[GCExtendedGamepadSnapshot snapshotData]
  -[GCExtendedGamepadSnapshot initWithSnapshotData:]


_GCControllerAxisButtonInput : GCControllerButtonInput
 @property  GCControllerAxisInput *axis
 @property  BOOL positive

  // instance methods
  -[_GCControllerAxisButtonInput .cxx_destruct]
  -[_GCControllerAxisButtonInput value]
  -[_GCControllerAxisButtonInput collection]
  -[_GCControllerAxisButtonInput axis]
  -[_GCControllerAxisButtonInput setAxis:]
  -[_GCControllerAxisButtonInput _setValue:]
  -[_GCControllerAxisButtonInput isPositive]
  -[_GCControllerAxisButtonInput isAnalog]
  -[_GCControllerAxisButtonInput _setValueFromAxisButton:queue:]
  -[_GCControllerAxisButtonInput _setValue:queue:]
  -[_GCControllerAxisButtonInput initWithAxis:positive:]
  -[_GCControllerAxisButtonInput _setValueFromAxisButton:]


_GCControllerManager : NSObject /usr/lib/libSystem.B.dylib <GameControllerClientProtocol>
 @property  BOOL isAppInBackground
 @property  ^{__IOHIDManager=} hidManager
 @property  @? logger
 @property  NSXPCConnection *connection
 @property  <GameControllerDaemon> *remote
 @property  BOOL idleTimerNeedsReset
 @property  NSThread *hidInputThread
 @property  ^{__CFRunLoop=} hidInputThreadRunLoop
 @property  ^{__CFRunLoopSource=} hidThreadRunLoopSource
 @property  NSMutableArray *hidThreadExecutionBlocks
 @property  GCController *firstMicroGamepad
 @property  NSObject<OS_dispatch_queue> *controllersQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCControllerManager sharedInstance]

  // instance methods
  -[_GCControllerManager init]
  -[_GCControllerManager dealloc]
  -[_GCControllerManager open]
  -[_GCControllerManager .cxx_destruct]
  -[_GCControllerManager connection]
  -[_GCControllerManager setConnection:]
  -[_GCControllerManager logger]
  -[_GCControllerManager remote]
  -[_GCControllerManager setLogger:]
  -[_GCControllerManager controllers]
  -[_GCControllerManager setRemote:]
  -[_GCControllerManager addController:]
  -[_GCControllerManager removeController:]
  -[_GCControllerManager controllerWithUDID:setData:]
  -[_GCControllerManager controllerWithUDID:setValue:forElement:]
  -[_GCControllerManager microControllerWithDigitizerX:withY:withTimeStamp:touchDown:]
  -[_GCControllerManager microControllerWithUDID:setDigitizerX:digitizerY:withTimeStamp:touchDown:]
  -[_GCControllerManager replyConnectedHosts:]
  -[_GCControllerManager publishController:]
  -[_GCControllerManager unpublishController:]
  -[_GCControllerManager startIdleWatchTimer]
  -[_GCControllerManager CBApplicationWillResignActive]
  -[_GCControllerManager CBApplicationDidBecomeActive]
  -[_GCControllerManager launchHIDInputThread]
  -[_GCControllerManager stopHIDDeviceMonitor]
  -[_GCControllerManager updateControllerWithEvent:]
  -[_GCControllerManager addControllerWithServiceRef:]
  -[_GCControllerManager startHIDDeviceMonitor]
  -[_GCControllerManager removeControllerWithServiceRef:]
  -[_GCControllerManager removeController:registryID:]
  -[_GCControllerManager setIdleTimerNeedsReset:]
  -[_GCControllerManager hidThreadExecutionBlocks]
  -[_GCControllerManager threadHIDInputOnMain:]
  -[_GCControllerManager stopHIDEventMonitor]
  -[_GCControllerManager async_HIDBlock:]
  -[_GCControllerManager addConnectedDevices]
  -[_GCControllerManager startHIDEventMonitor]
  -[_GCControllerManager updateIdleTimer:]
  -[_GCControllerManager combineSiriRemoteHIDDevicesWithNewController:existingController:]
  -[_GCControllerManager logController:]
  -[_GCControllerManager shouldStoreController:]
  -[_GCControllerManager storeController:]
  -[_GCControllerManager firstMicroGamepad]
  -[_GCControllerManager setFirstMicroGamepad:]
  -[_GCControllerManager controllerWithUDID:setValue0:setValue1:setValue2:setValue3:forElement:]
  -[_GCControllerManager addControllerForAppStoreRemote:]
  -[_GCControllerManager starSessionWillBegin]
  -[_GCControllerManager starSessionDidEnd]
  -[_GCControllerManager threadHIDInputOffMain:]
  -[_GCControllerManager requestConnectedHostsWithHandler:]
  -[_GCControllerManager isExistingController:]
  -[_GCControllerManager controller:setValue:forElement:]
  -[_GCControllerManager isPhysicalB239:]
  -[_GCControllerManager removeCoalescedControllerComponent:]
  -[_GCControllerManager isAppInBackground]
  -[_GCControllerManager hidManager]
  -[_GCControllerManager setHidManager:]
  -[_GCControllerManager idleTimerNeedsReset]
  -[_GCControllerManager hidInputThread]
  -[_GCControllerManager hidInputThreadRunLoop]
  -[_GCControllerManager hidThreadRunLoopSource]
  -[_GCControllerManager controllersQueue]


GCControllerSFDelegate : NSObject /usr/lib/libSystem.B.dylib <NSUserActivityDelegate>
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCControllerSFDelegate .cxx_destruct]
  -[GCControllerSFDelegate userActivityWasContinued:]
  -[GCControllerSFDelegate completionHandler]
  -[GCControllerSFDelegate setCompletionHandler:]
  -[GCControllerSFDelegate startScan]
  -[GCControllerSFDelegate fireCompletionHandler]


GCControllerTouchpad : GCControllerElement
 @property  GCControllerDirectionPad *touchSurface
 @property  GCControllerButtonInput *button
 @property  @? touchDown
 @property  @? touchMoved
 @property  @? touchUp
 @property  long long touchState
 @property  BOOL reportsAbsoluteTouchSurfaceValues

  // instance methods
  -[GCControllerTouchpad encodeWithCoder:]
  -[GCControllerTouchpad initWithCoder:]
  -[GCControllerTouchpad .cxx_destruct]
  -[GCControllerTouchpad button]
  -[GCControllerTouchpad touchDown]
  -[GCControllerTouchpad setTouchDown:]
  -[GCControllerTouchpad touchState]
  -[GCControllerTouchpad touchUp]
  -[GCControllerTouchpad initWithDescriptionName:]
  -[GCControllerTouchpad distanceBetweenCGPoint:andCGPoint:]
  -[GCControllerTouchpad mulCGPoint:byScalar:]
  -[GCControllerTouchpad normalizeCGPoint:]
  -[GCControllerTouchpad scaleCGPoint:toLength:]
  -[GCControllerTouchpad addCGPoint:toPoint:]
  -[GCControllerTouchpad magnitudeForCGPoint:]
  -[GCControllerTouchpad subCGPoint:fromPoint:]
  -[GCControllerTouchpad clampPoint:toLength:]
  -[GCControllerTouchpad touchMoved]
  -[GCControllerTouchpad determineTouchStateWithDigitizerX:digitizerY:timeStamp:touchDown:]
  -[GCControllerTouchpad calculateRelativePositionWithDigitizerX:digitizerY:timeStamp:touchDown:]
  -[GCControllerTouchpad reportDigitizerChange:]
  -[GCControllerTouchpad touchSurface]
  -[GCControllerTouchpad setValueForXAxis:yAxis:touchDown:pressed:]
  -[GCControllerTouchpad setDigitizerX:digitizerY:timeStamp:touchDown:queue:]
  -[GCControllerTouchpad setValue:yAxis:touchDown:]
  -[GCControllerTouchpad setTouchMoved:]
  -[GCControllerTouchpad setTouchUp:]
  -[GCControllerTouchpad setTouchSurface:]
  -[GCControllerTouchpad reportsAbsoluteTouchSurfaceValues]
  -[GCControllerTouchpad setReportsAbsoluteTouchSurfaceValues:]


_GCMFiExtendedGamepadControllerProfile : GCExtendedGamepad <_GCACHomeButtonDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCMFiExtendedGamepadControllerProfile name]
  -[_GCMFiExtendedGamepadControllerProfile initWithCoder:]
  -[_GCMFiExtendedGamepadControllerProfile .cxx_destruct]
  -[_GCMFiExtendedGamepadControllerProfile setPlayerIndex:]
  -[_GCMFiExtendedGamepadControllerProfile initWithController:]
  -[_GCMFiExtendedGamepadControllerProfile toggleSuspendResume]
  -[_GCMFiExtendedGamepadControllerProfile menuButton]
  -[_GCMFiExtendedGamepadControllerProfile determineControllerCapabilities:initInfo:]


GCController : NSObject /usr/lib/libSystem.B.dylib
 @property  @? __deprecated_controllerPausedHandler
 @property  NSString *vendorName
 @property  NSString *productCategory
 @property  NSString *debugName
 @property  <GCNamedProfile> *profile
 @property  NSMutableArray *hidServices
 @property  unsigned int service
 @property  NSString *physicalDeviceUniqueID
 @property  BOOL physicalDeviceUsesCompass
 @property  unsigned long deviceHash
 @property  BOOL forwarded
 @property  BOOL allHIDDevicesConnected
 @property  BOOL published
 @property  GCStereoAR *stereoAR
 @property  @? controllerPausedHandler
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  BOOL attachedToDevice
 @property  BOOL snapshot
 @property  long long playerIndex
 @property  GCGamepad *gamepad
 @property  GCMicroGamepad *microGamepad
 @property  GCExtendedGamepad *extendedGamepad
 @property  GCMotion *motion

  // class methods
  +[GCController supportsSecureCoding]
  +[GCController controllers]
  +[GCController __daemon__appDidEnterBackground]
  +[GCController __daemon__appWillEnterForeground]
  +[GCController controllerWithMicroGamepad]
  +[GCController controllerWithExtendedGamepad]
  +[GCController controllerWithStereoAR]
  +[GCController _startWirelessControllerDiscoveryWithCompanions:btClassic:btle:completionHandler:]
  +[GCController __open__]
  +[GCController __openXPC__]
  +[GCController __openXPC_and_CBApplicationDidBecomeActive__]
  +[GCController __setLogger__:]
  +[GCController __daemon__startBonjourService]
  +[GCController __daemon__setUserActivityUserInfo:]
  +[GCController __daemon__requestConnectedHostUpdatesWithHandler:]
  +[GCController __daemon__addController:]
  +[GCController __daemon__removeController:]
  +[GCController __daemon__controllerWithUDID:setValue:forElement:]
  +[GCController startWirelessControllerDiscoveryWithCompletionHandler:]
  +[GCController stopWirelessControllerDiscovery]

  // instance methods
  -[GCController dealloc]
  -[GCController encodeWithCoder:]
  -[GCController initWithCoder:]
  -[GCController .cxx_destruct]
  -[GCController vendorName]
  -[GCController profile]
  -[GCController setProfile:]
  -[GCController service]
  -[GCController initWithProfile:]
  -[GCController debugName]
  -[GCController setDebugName:]
  -[GCController setHandlerQueue:]
  -[GCController isSnapshot]
  -[GCController sampleRate]
  -[GCController setService:]
  -[GCController capture]
  -[GCController handlerQueue]
  -[GCController setPlayerIndex:]
  -[GCController extendedGamepad]
  -[GCController gamepad]
  -[GCController physicalDeviceUniqueID]
  -[GCController isPublished]
  -[GCController setPublished:]
  -[GCController setVendorName:]
  -[GCController setForwarded:]
  -[GCController playerIndex]
  -[GCController motion]
  -[GCController deviceHash]
  -[GCController hidServices]
  -[GCController __deprecated_controllerPausedHandler]
  -[GCController supportsMotionLite]
  -[GCController microGamepad]
  -[GCController stereoAR]
  -[GCController productCategory]
  -[GCController isAttachedToDevice]
  -[GCController physicalDeviceUsesCompass]
  -[GCController isForwarded]
  -[GCController initWithServiceRef:]
  -[GCController removeServiceRef:]
  -[GCController areAllHIDDevicesConnected]
  -[GCController setPhysicalDeviceUsesCompass:]
  -[GCController addServiceRefs:]
  -[GCController clearServiceRef]
  -[GCController setPhysicalDeviceUniqueID:]
  -[GCController setAllHIDDevicesConnected:]
  -[GCController setControllerPausedHandler:]
  -[GCController controllerPausedHandler]
  -[GCController set__deprecated_controllerPausedHandler:]
  -[GCController displayTrueSiriRemoteName]
  -[GCController hasServiceRef:]
  -[GCController _setSnapshot:]
  -[GCController isEqualToController:]
  -[GCController createInputBufferForDevice:withSize:]
  -[GCController setProductCategory:]
  -[GCController setHidServices:]
  -[GCController setDeviceHash:]


_GCController : GCController <NSSecureCoding>
  // class methods
  +[_GCController supportsSecureCoding]


_GCACHomeButton : GCControllerButtonInput
  // instance methods
  -[_GCACHomeButton .cxx_destruct]
  -[_GCACHomeButton initWithDelegate:]
  -[_GCACHomeButton _setValue:queue:]


GCEventViewController : UIViewController /System/Library/Frameworks/CoreServices.framework/CoreServices
 @property  BOOL controllerUserInteractionEnabled

  // instance methods
  -[GCEventViewController controllerUserInteractionEnabled]
  -[GCEventViewController setControllerUserInteractionEnabled:]


_GCAppleTVRemoteControllerProfile : GCMicroGamepad <_GCACHomeButtonDelegate, DigitizerValueChangedDelegate>
 @property  unsigned long owner
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCControllerDirectionPad *dpad

  // class methods
  +[_GCAppleTVRemoteControllerProfile updateDevice:withButtonDebounceTime:withDelay:]

  // instance methods
  -[_GCAppleTVRemoteControllerProfile name]
  -[_GCAppleTVRemoteControllerProfile .cxx_destruct]
  -[_GCAppleTVRemoteControllerProfile setOwner:]
  -[_GCAppleTVRemoteControllerProfile owner]
  -[_GCAppleTVRemoteControllerProfile setAllowsRotation:]
  -[_GCAppleTVRemoteControllerProfile sampleRate]
  -[_GCAppleTVRemoteControllerProfile setPlayerIndex:]
  -[_GCAppleTVRemoteControllerProfile initWithController:]
  -[_GCAppleTVRemoteControllerProfile initWithController:dpadFlippedY:]
  -[_GCAppleTVRemoteControllerProfile toggleSuspendResume]
  -[_GCAppleTVRemoteControllerProfile menuButton]
  -[_GCAppleTVRemoteControllerProfile appWillResignActive]
  -[_GCAppleTVRemoteControllerProfile appDidBecomeActive]
  -[_GCAppleTVRemoteControllerProfile digitizerTouchEvent:x:y:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile digitizerTouchUp:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile setDpad:x:y:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile getPositionInSlidingWindowForRealX:realY:outXInWindow:outYInWindow:]
  -[_GCAppleTVRemoteControllerProfile initCommon:]
  -[_GCAppleTVRemoteControllerProfile processOrientationData:]
  -[_GCAppleTVRemoteControllerProfile ownershipClaimingElementsZero]
  -[_GCAppleTVRemoteControllerProfile handleReport:data:]


GCControllerAxisInput : GCControllerElement
 @property  float value
 @property  GCControllerButtonInput *positive
 @property  GCControllerButtonInput *negative
 @property  BOOL flipped
 @property  @? valueChangedHandler

  // instance methods
  -[GCControllerAxisInput .cxx_destruct]
  -[GCControllerAxisInput value]
  -[GCControllerAxisInput setValue:]
  -[GCControllerAxisInput setFlipped:]
  -[GCControllerAxisInput isFlipped]
  -[GCControllerAxisInput _setValue:]
  -[GCControllerAxisInput setValueChangedHandler:]
  -[GCControllerAxisInput setNegative:]
  -[GCControllerAxisInput negative]
  -[GCControllerAxisInput getAndResetTimesPressed]
  -[GCControllerAxisInput isAnalog]
  -[GCControllerAxisInput valueChangedHandler]
  -[GCControllerAxisInput _setValue:queue:]
  -[GCControllerAxisInput initWithCollection:flipped:]
  -[GCControllerAxisInput positive]
  -[GCControllerAxisInput setPositive:]


_GCXboxOneSControllerProfile : GCExtendedGamepad <_GCACHomeButtonDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCXboxOneSControllerProfile name]
  -[_GCXboxOneSControllerProfile initWithCoder:]
  -[_GCXboxOneSControllerProfile .cxx_destruct]
  -[_GCXboxOneSControllerProfile setPlayerIndex:]
  -[_GCXboxOneSControllerProfile initWithController:]
  -[_GCXboxOneSControllerProfile toggleSuspendResume]
  -[_GCXboxOneSControllerProfile menuButton]
  -[_GCXboxOneSControllerProfile productCategory]
  -[_GCXboxOneSControllerProfile setHapticMotor:frequency:]
  -[_GCXboxOneSControllerProfile setEnableTimeForHaptics:]
  -[_GCXboxOneSControllerProfile triggerHapticsForDuration:]


GCExtendedGamepad : NSObject /usr/lib/libSystem.B.dylib
 @property  GCControllerButtonInput *_buttonHome
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonB
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonY
 @property  GCControllerButtonInput *buttonMenu
 @property  GCControllerButtonInput *buttonOptions
 @property  GCControllerDirectionPad *leftThumbstick
 @property  GCControllerDirectionPad *rightThumbstick
 @property  GCControllerButtonInput *leftShoulder
 @property  GCControllerButtonInput *rightShoulder
 @property  GCControllerButtonInput *leftTrigger
 @property  GCControllerButtonInput *rightTrigger
 @property  GCControllerButtonInput *leftThumbstickButton
 @property  GCControllerButtonInput *rightThumbstickButton

  // class methods
  +[GCExtendedGamepad supportsSecureCoding]

  // instance methods
  -[GCExtendedGamepad name]
  -[GCExtendedGamepad encodeWithCoder:]
  -[GCExtendedGamepad initWithCoder:]
  -[GCExtendedGamepad .cxx_destruct]
  -[GCExtendedGamepad setController:]
  -[GCExtendedGamepad controller]
  -[GCExtendedGamepad handleEvent:]
  -[GCExtendedGamepad allowsRotation]
  -[GCExtendedGamepad setAllowsRotation:]
  -[GCExtendedGamepad saveSnapshot]
  -[GCExtendedGamepad setPlayerIndex:]
  -[GCExtendedGamepad setValueChangedHandler:]
  -[GCExtendedGamepad buttonA]
  -[GCExtendedGamepad buttonB]
  -[GCExtendedGamepad buttonX]
  -[GCExtendedGamepad buttonY]
  -[GCExtendedGamepad leftShoulder]
  -[GCExtendedGamepad rightShoulder]
  -[GCExtendedGamepad leftTrigger]
  -[GCExtendedGamepad rightTrigger]
  -[GCExtendedGamepad leftThumbstick]
  -[GCExtendedGamepad rightThumbstick]
  -[GCExtendedGamepad dpad]
  -[GCExtendedGamepad initWithController:]
  -[GCExtendedGamepad _motion]
  -[GCExtendedGamepad button2]
  -[GCExtendedGamepad buttonMenu]
  -[GCExtendedGamepad buttonOptions]
  -[GCExtendedGamepad leftThumbstickButton]
  -[GCExtendedGamepad rightThumbstickButton]
  -[GCExtendedGamepad productCategory]
  -[GCExtendedGamepad setDpad:x:y:]
  -[GCExtendedGamepad setButton:value:]
  -[GCExtendedGamepad valueChangedHandler]
  -[GCExtendedGamepad initWithController:initInfo:]
  -[GCExtendedGamepad isBluetoothAndUSBMirrored]
  -[GCExtendedGamepad set_motion:]
  -[GCExtendedGamepad setButton:pressed:]
  -[GCExtendedGamepad setStateFromExtendedGamepad:]
  -[GCExtendedGamepad reportsAbsoluteDpadValues]
  -[GCExtendedGamepad setHapticMotor:frequency:]
  -[GCExtendedGamepad setEnableTimeForHaptics:]
  -[GCExtendedGamepad initAuxiliaryButtonsWithInitInfo:]
  -[GCExtendedGamepad setControllerForElements]
  -[GCExtendedGamepad _buttonHome]
  -[GCExtendedGamepad button0]
  -[GCExtendedGamepad button1]
  -[GCExtendedGamepad button3]
  -[GCExtendedGamepad setReportsAbsoluteDpadValues:]
  -[GCExtendedGamepad setLightbarColorWithRed:green:blue:]
  -[GCExtendedGamepad set_buttonHome:]


_GCAppleTVRemoteMotionProfile : GCMotion
  // instance methods
  -[_GCAppleTVRemoteMotionProfile .cxx_destruct]
  -[_GCAppleTVRemoteMotionProfile gravity]
  -[_GCAppleTVRemoteMotionProfile controller]
  -[_GCAppleTVRemoteMotionProfile attitude]
  -[_GCAppleTVRemoteMotionProfile _tilt]
  -[_GCAppleTVRemoteMotionProfile _tip]
  -[_GCAppleTVRemoteMotionProfile setValueChangedHandler:]
  -[_GCAppleTVRemoteMotionProfile userAcceleration]
  -[_GCAppleTVRemoteMotionProfile rotationRate]
  -[_GCAppleTVRemoteMotionProfile initWithController:]
  -[_GCAppleTVRemoteMotionProfile _setCompassEnabled:]
  -[_GCAppleTVRemoteMotionProfile _setAttitude:]
  -[_GCAppleTVRemoteMotionProfile hasAttitudeAndRotationRate]
  -[_GCAppleTVRemoteMotionProfile valueChangedHandler]
  -[_GCAppleTVRemoteMotionProfile _setMotionLite:]
  -[_GCAppleTVRemoteMotionProfile isEmulatedMicroGamepad]
  -[_GCAppleTVRemoteMotionProfile _setGravity:]
  -[_GCAppleTVRemoteMotionProfile _setUserAcceleration:]
  -[_GCAppleTVRemoteMotionProfile _setRotationRate:]
  -[_GCAppleTVRemoteMotionProfile _startDeviceMotionUpdates]
  -[_GCAppleTVRemoteMotionProfile _stopDeviceMotionUpdates]
  -[_GCAppleTVRemoteMotionProfile _isUpdatingDeviceMotion]
  -[_GCAppleTVRemoteMotionProfile _pauseMotionUpdates:]
  -[_GCAppleTVRemoteMotionProfile setInternalValueChangedHandler:]
  -[_GCAppleTVRemoteMotionProfile internalValueChangedHandler]
  -[_GCAppleTVRemoteMotionProfile _motionLiteFusedHandler]
  -[_GCAppleTVRemoteMotionProfile _startDeviceMotionUpdatesHelper]
  -[_GCAppleTVRemoteMotionProfile _stopDeviceMotionUpdatesHelper]


GCControllerMBDelegate : NSObject /usr/lib/libSystem.B.dylib
 @property  @? completionHandler

  // instance methods
  -[GCControllerMBDelegate dealloc]
  -[GCControllerMBDelegate .cxx_destruct]
  -[GCControllerMBDelegate completionHandler]
  -[GCControllerMBDelegate setCompletionHandler:]
  -[GCControllerMBDelegate stopScan]
  -[GCControllerMBDelegate startScan]
  -[GCControllerMBDelegate fireCompletionHandler]
  -[GCControllerMBDelegate scanTimeout:]


GCControllerButtonInput : GCControllerElement
 @property  BOOL nonAnalog
 @property  @? valueChangedHandler
 @property  @? pressedChangedHandler
 @property  float value
 @property  BOOL pressed

  // instance methods
  -[GCControllerButtonInput .cxx_destruct]
  -[GCControllerButtonInput value]
  -[GCControllerButtonInput setValue:]
  -[GCControllerButtonInput isPressed]
  -[GCControllerButtonInput _setValue:]
  -[GCControllerButtonInput setValueChangedHandler:]
  -[GCControllerButtonInput getAndResetTimesPressed]
  -[GCControllerButtonInput isAnalog]
  -[GCControllerButtonInput valueChangedHandler]
  -[GCControllerButtonInput _setValue:queue:]
  -[GCControllerButtonInput initWithDescriptionName:]
  -[GCControllerButtonInput setNonAnalog:]
  -[GCControllerButtonInput nonAnalog]
  -[GCControllerButtonInput pressedChangedHandler]
  -[GCControllerButtonInput setPressedChangedHandler:]


_GCCControllerHIDServiceInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  ^{__IOHIDServiceClient=} service
 @property  NSData *inputData
 @property  BOOL isPreallocatedSiriRemote

  // instance methods
  -[_GCCControllerHIDServiceInfo dealloc]
  -[_GCCControllerHIDServiceInfo name]
  -[_GCCControllerHIDServiceInfo .cxx_destruct]
  -[_GCCControllerHIDServiceInfo registryID]
  -[_GCCControllerHIDServiceInfo service]
  -[_GCCControllerHIDServiceInfo initWithService:]
  -[_GCCControllerHIDServiceInfo inputData]
  -[_GCCControllerHIDServiceInfo setInputData:]
  -[_GCCControllerHIDServiceInfo isPreallocatedSiriRemote]
  -[_GCCControllerHIDServiceInfo setIsPreallocatedSiriRemote:]


_GCStereoARCustomControllerProfile : GCStereoAR <_GCACHomeButtonDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCStereoARCustomControllerProfile name]
  -[_GCStereoARCustomControllerProfile initWithCoder:]
  -[_GCStereoARCustomControllerProfile .cxx_destruct]
  -[_GCStereoARCustomControllerProfile setPlayerIndex:]
  -[_GCStereoARCustomControllerProfile initWithController:]
  -[_GCStereoARCustomControllerProfile setAttitude:]
  -[_GCStereoARCustomControllerProfile toggleSuspendResume]
  -[_GCStereoARCustomControllerProfile menuButton]
  -[_GCStereoARCustomControllerProfile setAttitudeWithControllerUpdate:]
  -[_GCStereoARCustomControllerProfile setForwardQuaternion:]
  -[_GCStereoARCustomControllerProfile setControllerAttitude:]


GCStereoAR : NSObject /usr/lib/libSystem.B.dylib
 @property  @? arcHandler
 @property  GCControllerButtonInput *systemButton
 @property  GCControllerButtonInput *triggerButton
 @property  GCControllerButtonInput *touchpadButton
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerTouchpad *touchpad

  // class methods
  +[GCStereoAR supportsSecureCoding]

  // instance methods
  -[GCStereoAR encodeWithCoder:]
  -[GCStereoAR initWithCoder:]
  -[GCStereoAR .cxx_destruct]
  -[GCStereoAR setController:]
  -[GCStereoAR controller]
  -[GCStereoAR handleEvent:]
  -[GCStereoAR initCommon]
  -[GCStereoAR setValueChangedHandler:]
  -[GCStereoAR initWithController:]
  -[GCStereoAR setAttitude:]
  -[GCStereoAR _motion]
  -[GCStereoAR productCategory]
  -[GCStereoAR valueChangedHandler]
  -[GCStereoAR isBluetoothAndUSBMirrored]
  -[GCStereoAR set_motion:]
  -[GCStereoAR setStateFromStereoAR:]
  -[GCStereoAR setControllerForElements]
  -[GCStereoAR setAttitudeWithControllerUpdate:]
  -[GCStereoAR setForwardQuaternion:]
  -[GCStereoAR setControllerAttitude:]
  -[GCStereoAR arcHandler]
  -[GCStereoAR setDigitizerX:digitizerY:timeStamp:touchDown:]
  -[GCStereoAR handleMotionEvent:]
  -[GCStereoAR touchpad]
  -[GCStereoAR touchpadButton]
  -[GCStereoAR triggerButton]
  -[GCStereoAR systemButton]
  -[GCStereoAR controllerReportedAttitude]
  -[GCStereoAR setArcHandler:]
  -[GCStereoAR setSystemButton:]
  -[GCStereoAR setTriggerButton:]
  -[GCStereoAR setTouchpadButton:]


GCMicroGamepadSnapshot : GCMicroGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCMicroGamepadSnapshot init]
  -[GCMicroGamepadSnapshot .cxx_destruct]
  -[GCMicroGamepadSnapshot initWithController:snapshotData:]
  -[GCMicroGamepadSnapshot setSnapshotData:]
  -[GCMicroGamepadSnapshot snapshotData]
  -[GCMicroGamepadSnapshot initWithSnapshotData:]
  -[GCMicroGamepadSnapshot supportsDpadTaps]


_GCSonyDualShock4ControllerProfile : GCExtendedGamepad <_GCACHomeButtonDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCSonyDualShock4ControllerProfile name]
  -[_GCSonyDualShock4ControllerProfile initWithCoder:]
  -[_GCSonyDualShock4ControllerProfile .cxx_destruct]
  -[_GCSonyDualShock4ControllerProfile setPlayerIndex:]
  -[_GCSonyDualShock4ControllerProfile initWithController:]
  -[_GCSonyDualShock4ControllerProfile toggleSuspendResume]
  -[_GCSonyDualShock4ControllerProfile menuButton]
  -[_GCSonyDualShock4ControllerProfile productCategory]
  -[_GCSonyDualShock4ControllerProfile isBluetoothAndUSBMirrored]
  -[_GCSonyDualShock4ControllerProfile setHapticMotor:frequency:]
  -[_GCSonyDualShock4ControllerProfile setEnableTimeForHaptics:]
  -[_GCSonyDualShock4ControllerProfile triggerHapticsForDuration:]
  -[_GCSonyDualShock4ControllerProfile setLightbarColorWithRed:green:blue:]
  -[_GCSonyDualShock4ControllerProfile triggerHaptics]


GCGamepad : NSObject /usr/lib/libSystem.B.dylib
 @property  GCController *controller
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonB
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonY
 @property  GCControllerButtonInput *leftShoulder
 @property  GCControllerButtonInput *rightShoulder
 @property  GCControllerButtonInput *buttonMenu
 @property  @? valueChangedHandler

  // class methods
  +[GCGamepad supportsSecureCoding]

  // instance methods
  -[GCGamepad init]
  -[GCGamepad name]
  -[GCGamepad encodeWithCoder:]
  -[GCGamepad initWithCoder:]
  -[GCGamepad .cxx_destruct]
  -[GCGamepad setController:]
  -[GCGamepad controller]
  -[GCGamepad handleEvent:]
  -[GCGamepad allowsRotation]
  -[GCGamepad setAllowsRotation:]
  -[GCGamepad saveSnapshot]
  -[GCGamepad setPlayerIndex:]
  -[GCGamepad setValueChangedHandler:]
  -[GCGamepad buttonA]
  -[GCGamepad buttonB]
  -[GCGamepad buttonX]
  -[GCGamepad buttonY]
  -[GCGamepad leftShoulder]
  -[GCGamepad rightShoulder]
  -[GCGamepad dpad]
  -[GCGamepad initWithController:]
  -[GCGamepad setLeftShoulder:]
  -[GCGamepad setRightShoulder:]
  -[GCGamepad _motion]
  -[GCGamepad button2]
  -[GCGamepad initWithController:dpadFlippedY:]
  -[GCGamepad buttonMenu]
  -[GCGamepad productCategory]
  -[GCGamepad setDpad:x:y:]
  -[GCGamepad setButton:value:]
  -[GCGamepad valueChangedHandler]
  -[GCGamepad isBluetoothAndUSBMirrored]
  -[GCGamepad set_motion:]
  -[GCGamepad setButton:pressed:]
  -[GCGamepad reportsAbsoluteDpadValues]
  -[GCGamepad setControllerForElements]
  -[GCGamepad button0]
  -[GCGamepad button1]
  -[GCGamepad button3]
  -[GCGamepad setReportsAbsoluteDpadValues:]
  -[GCGamepad setButtonA:]
  -[GCGamepad setButtonB:]
  -[GCGamepad setButtonX:]
  -[GCGamepad setButtonY:]
  -[GCGamepad setDpad:]
  -[GCGamepad setButtonMenu:]


GCMicroGamepad : NSObject /usr/lib/libSystem.B.dylib
 @property  long long deviceType
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonMenu
 @property  BOOL reportsAbsoluteDpadValues
 @property  BOOL allowsRotation

  // class methods
  +[GCMicroGamepad supportsSecureCoding]

  // instance methods
  -[GCMicroGamepad init]
  -[GCMicroGamepad name]
  -[GCMicroGamepad encodeWithCoder:]
  -[GCMicroGamepad initWithCoder:]
  -[GCMicroGamepad .cxx_destruct]
  -[GCMicroGamepad deviceType]
  -[GCMicroGamepad setController:]
  -[GCMicroGamepad controller]
  -[GCMicroGamepad handleEvent:]
  -[GCMicroGamepad allowsRotation]
  -[GCMicroGamepad setAllowsRotation:]
  -[GCMicroGamepad setDeviceType:]
  -[GCMicroGamepad saveSnapshot]
  -[GCMicroGamepad setPlayerIndex:]
  -[GCMicroGamepad setValueChangedHandler:]
  -[GCMicroGamepad buttonA]
  -[GCMicroGamepad buttonB]
  -[GCMicroGamepad buttonX]
  -[GCMicroGamepad dpad]
  -[GCMicroGamepad initWithController:]
  -[GCMicroGamepad _motion]
  -[GCMicroGamepad initWithController:dpadFlippedY:]
  -[GCMicroGamepad buttonMenu]
  -[GCMicroGamepad productCategory]
  -[GCMicroGamepad setDpad:x:y:]
  -[GCMicroGamepad setButton:value:]
  -[GCMicroGamepad valueChangedHandler]
  -[GCMicroGamepad isBluetoothAndUSBMirrored]
  -[GCMicroGamepad set_motion:]
  -[GCMicroGamepad setButton:pressed:]
  -[GCMicroGamepad setStateFromMicroGamepad:]
  -[GCMicroGamepad reportsAbsoluteDpadValues]
  -[GCMicroGamepad setControllerForElements]
  -[GCMicroGamepad button0]
  -[GCMicroGamepad button1]
  -[GCMicroGamepad setReportsAbsoluteDpadValues:]
  -[GCMicroGamepad supportsDpadTaps]
  -[GCMicroGamepad microControllerWithDigitizerX:digitizerY:timestamp:touchDown:]


GCControllerElement : NSObject /usr/lib/libSystem.B.dylib
 @property  GCController *controller
 @property  GCControllerElement *collection
 @property  BOOL analog

  // instance methods
  -[GCControllerElement .cxx_destruct]
  -[GCControllerElement value]
  -[GCControllerElement collection]
  -[GCControllerElement setController:]
  -[GCControllerElement controller]
  -[GCControllerElement _setValue:]
  -[GCControllerElement setCollection:]
  -[GCControllerElement getAndResetTimesPressed]
  -[GCControllerElement isAnalog]
  -[GCControllerElement _setValue:queue:]


GCControllerCBDelegate : NSObject /usr/lib/libSystem.B.dylib <CBCentralManagerDelegate, CBPeripheralDelegate>
 @property  CBCentralManager *centralManager
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCControllerCBDelegate init]
  -[GCControllerCBDelegate .cxx_destruct]
  -[GCControllerCBDelegate completionHandler]
  -[GCControllerCBDelegate setCompletionHandler:]
  -[GCControllerCBDelegate peripheral:didDiscoverServices:]
  -[GCControllerCBDelegate peripheral:didDiscoverIncludedServicesForService:error:]
  -[GCControllerCBDelegate peripheral:didDiscoverCharacteristicsForService:error:]
  -[GCControllerCBDelegate peripheral:didUpdateValueForCharacteristic:error:]
  -[GCControllerCBDelegate peripheral:didDiscoverDescriptorsForCharacteristic:error:]
  -[GCControllerCBDelegate peripheral:didUpdateValueForDescriptor:error:]
  -[GCControllerCBDelegate centralManager:didDiscoverPeripheral:advertisementData:RSSI:]
  -[GCControllerCBDelegate centralManager:didConnectPeripheral:]
  -[GCControllerCBDelegate centralManager:didFailToConnectPeripheral:error:]
  -[GCControllerCBDelegate centralManager:didDisconnectPeripheral:error:]
  -[GCControllerCBDelegate centralManagerDidUpdateState:]
  -[GCControllerCBDelegate stopScan]
  -[GCControllerCBDelegate centralManager:didRetrievePeripherals:]
  -[GCControllerCBDelegate centralManager:didRetrieveConnectedPeripherals:]
  -[GCControllerCBDelegate startScan]
  -[GCControllerCBDelegate fireCompletionHandler]
  -[GCControllerCBDelegate setCentralManager:]
  -[GCControllerCBDelegate startScanWithTimeout:]
  -[GCControllerCBDelegate centralManager]


GCControllerDirectionPad : GCControllerElement
 @property  GCControllerAxisInput *xAxis
 @property  GCControllerAxisInput *yAxis
 @property  BOOL nonAnalog
 @property  @? valueChangedHandler
 @property  GCControllerButtonInput *up
 @property  GCControllerButtonInput *down
 @property  GCControllerButtonInput *left
 @property  GCControllerButtonInput *right

  // instance methods
  -[GCControllerDirectionPad .cxx_destruct]
  -[GCControllerDirectionPad left]
  -[GCControllerDirectionPad right]
  -[GCControllerDirectionPad setValueChangedHandler:]
  -[GCControllerDirectionPad xAxis]
  -[GCControllerDirectionPad yAxis]
  -[GCControllerDirectionPad up]
  -[GCControllerDirectionPad getAndResetTimesPressed]
  -[GCControllerDirectionPad isAnalog]
  -[GCControllerDirectionPad valueChangedHandler]
  -[GCControllerDirectionPad down]
  -[GCControllerDirectionPad initWithFlippedY:digital:descriptionName:]
  -[GCControllerDirectionPad setNonAnalog:]
  -[GCControllerDirectionPad _fireValueChangedWithQueue:]
  -[GCControllerDirectionPad initWithFlippedY:digital:]
  -[GCControllerDirectionPad nonAnalog]
  -[GCControllerDirectionPad _fireValueChanged]
  -[GCControllerDirectionPad setValueForXAxis:yAxis:]
  -[GCControllerDirectionPad setXAxis:]
  -[GCControllerDirectionPad setYAxis:]


01 00 0c00 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBCentralManager 
01 00 0c00 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBUUID 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0f00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0600 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0500 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0500 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
