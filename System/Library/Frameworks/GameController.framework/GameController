|| __DATA.__common _s_cbDelegate
|| __DATA.__common _s_cbDelegateQueue
|| __DATA.__common _s_mbDelegate
|| __DATA.__common _s_sfDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_GCColor
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerAxisInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerButtonInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerCBDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerDirectionPad
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerElement
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerElementSettings
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerMBDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerSFDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_GCControllerTouchpad
|| __DATA.__objc_data _OBJC_CLASS_$_GCDeviceConfigurationEvaluator
|| __DATA.__objc_data _OBJC_CLASS_$_GCDeviceCursor
|| __DATA.__objc_data _OBJC_CLASS_$_GCDeviceHaptics
|| __DATA.__objc_data _OBJC_CLASS_$_GCDualShockGamepad
|| __DATA.__objc_data _OBJC_CLASS_$_GCEventViewController
|| __DATA.__objc_data _OBJC_CLASS_$_GCExtendedGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCGamepadUserDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_GCHapticActuator
|| __DATA.__objc_data _OBJC_CLASS_$_GCHapticCapabilities
|| __DATA.__objc_data _OBJC_CLASS_$_GCHapticCapabilityGraph
|| __DATA.__objc_data _OBJC_CLASS_$_GCHapticCapabilityGraphNode
|| __DATA.__objc_data _OBJC_CLASS_$_GCKeyboard
|| __DATA.__objc_data _OBJC_CLASS_$_GCKeyboardInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCLocalPlayerIndicator
|| __DATA.__objc_data _OBJC_CLASS_$_GCMicroGamepadSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_GCMotion
|| __DATA.__objc_data _OBJC_CLASS_$_GCMouse
|| __DATA.__objc_data _OBJC_CLASS_$_GCMouseInput
|| __DATA.__objc_data _OBJC_CLASS_$_GCNotificationManager
|| __DATA.__objc_data _OBJC_CLASS_$_GCNotificationOptions
|| __DATA.__objc_data _OBJC_CLASS_$_GCProductInformation
|| __DATA.__objc_data _OBJC_CLASS_$_GCReplayNotificationOptions
|| __DATA.__objc_data _OBJC_CLASS_$_GCXboxGamepad
|| __DATA.__objc_data _OBJC_CLASS_$__GCCControllerHIDServiceInfo
|| __DATA.__objc_data _OBJC_CLASS_$__GCCControllerHIDServiceInfoDescription
|| __DATA.__objc_data _OBJC_CLASS_$__GCCControllerManagerDescription
|| __DATA.__objc_data _OBJC_CLASS_$__GCController
|| __DATA.__objc_data _OBJC_CLASS_$__GCControllerComponentDescription
|| __DATA.__objc_data _OBJC_CLASS_$__GCControllerGestureAwareButtonInput
|| __DATA.__objc_data _OBJC_CLASS_$__GCDefaultLogicalDevice
|| __DATA.__objc_data _OBJC_CLASS_$__GCDeviceConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$__GCDriverClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$__GCGamepadEventGamepadHIDAdapterDescription
|| __DATA.__objc_data _OBJC_CLASS_$__GCGamepadEventImpl
|| __DATA.__objc_data _OBJC_CLASS_$__GCHapticEvent
|| __DATA.__objc_data _OBJC_CLASS_$__GCHapticServerManager
|| __DATA.__objc_data _OBJC_CLASS_$__GCImplicitIPCObjectDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_GCAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_GCColor
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerAxisInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerButtonInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerCBDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerDirectionPad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerElement
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerElementSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerMBDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerSFDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_GCControllerTouchpad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCDeviceConfigurationEvaluator
|| __DATA.__objc_data _OBJC_METACLASS_$_GCDeviceCursor
|| __DATA.__objc_data _OBJC_METACLASS_$_GCDeviceHaptics
|| __DATA.__objc_data _OBJC_METACLASS_$_GCDualShockGamepad
|| __DATA.__objc_data _OBJC_METACLASS_$_GCEventViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_GCExtendedGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCGamepadUserDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_GCHapticActuator
|| __DATA.__objc_data _OBJC_METACLASS_$_GCHapticCapabilities
|| __DATA.__objc_data _OBJC_METACLASS_$_GCHapticCapabilityGraph
|| __DATA.__objc_data _OBJC_METACLASS_$_GCHapticCapabilityGraphNode
|| __DATA.__objc_data _OBJC_METACLASS_$_GCKeyboard
|| __DATA.__objc_data _OBJC_METACLASS_$_GCKeyboardInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCLocalPlayerIndicator
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMicroGamepadSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMotion
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMouse
|| __DATA.__objc_data _OBJC_METACLASS_$_GCMouseInput
|| __DATA.__objc_data _OBJC_METACLASS_$_GCNotificationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_GCNotificationOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_GCProductInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_GCReplayNotificationOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_GCXboxGamepad
|| __DATA.__objc_data _OBJC_METACLASS_$__GCCControllerHIDServiceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__GCCControllerHIDServiceInfoDescription
|| __DATA.__objc_data _OBJC_METACLASS_$__GCCControllerManagerDescription
|| __DATA.__objc_data _OBJC_METACLASS_$__GCController
|| __DATA.__objc_data _OBJC_METACLASS_$__GCControllerComponentDescription
|| __DATA.__objc_data _OBJC_METACLASS_$__GCControllerGestureAwareButtonInput
|| __DATA.__objc_data _OBJC_METACLASS_$__GCDefaultLogicalDevice
|| __DATA.__objc_data _OBJC_METACLASS_$__GCDeviceConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$__GCDriverClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$__GCGamepadEventGamepadHIDAdapterDescription
|| __DATA.__objc_data _OBJC_METACLASS_$__GCGamepadEventImpl
|| __DATA.__objc_data _OBJC_METACLASS_$__GCHapticEvent
|| __DATA.__objc_data _OBJC_METACLASS_$__GCHapticServerManager
|| __DATA.__objc_data _OBJC_METACLASS_$__GCImplicitIPCObjectDescription
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._centralManager
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._connectedPeripherals
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerCBDelegate._foundPeripherals
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._discoveryAgent
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._pairingAgent
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._session
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerMBDelegate._timer
|| __DATA.__objc_ivar _OBJC_IVAR_$_GCControllerSFDelegate._activity
|| __DATA.__objc_ivar _OBJC_IVAR_$__GCDeviceConfiguration._attributes
|| __DATA.__objc_ivar _OBJC_IVAR_$__GCDeviceConfiguration._identifier
|| __DATA_CONST.__const _GCControllerDidBecomeCurrentNotification
|| __DATA_CONST.__const _GCControllerDidConnectNotification
|| __DATA_CONST.__const _GCControllerDidDisconnectNotification
|| __DATA_CONST.__const _GCControllerDidStopBeingCurrentNotification
|| __DATA_CONST.__const _GCExtendedGamepadDidBecomeCurrentNotification
|| __DATA_CONST.__const _GCExtendedGamepadDidStopBeingCurrentNotification
|| __DATA_CONST.__const _GCHapticsLocalityAll
|| __DATA_CONST.__const _GCHapticsLocalityDefault
|| __DATA_CONST.__const _GCHapticsLocalityHandles
|| __DATA_CONST.__const _GCHapticsLocalityLeftHandle
|| __DATA_CONST.__const _GCHapticsLocalityLeftTrigger
|| __DATA_CONST.__const _GCHapticsLocalityRightHandle
|| __DATA_CONST.__const _GCHapticsLocalityRightTrigger
|| __DATA_CONST.__const _GCHapticsLocalityTriggers
|| __DATA_CONST.__const _GCInputButtonA
|| __DATA_CONST.__const _GCInputButtonB
|| __DATA_CONST.__const _GCInputButtonHome
|| __DATA_CONST.__const _GCInputButtonMenu
|| __DATA_CONST.__const _GCInputButtonOptions
|| __DATA_CONST.__const _GCInputButtonShare
|| __DATA_CONST.__const _GCInputButtonX
|| __DATA_CONST.__const _GCInputButtonY
|| __DATA_CONST.__const _GCInputDirectionPad
|| __DATA_CONST.__const _GCInputDualShockTouchpadButton
|| __DATA_CONST.__const _GCInputDualShockTouchpadOne
|| __DATA_CONST.__const _GCInputDualShockTouchpadTwo
|| __DATA_CONST.__const _GCInputLeftShoulder
|| __DATA_CONST.__const _GCInputLeftThumbstick
|| __DATA_CONST.__const _GCInputLeftThumbstickButton
|| __DATA_CONST.__const _GCInputLeftTrigger
|| __DATA_CONST.__const _GCInputRightShoulder
|| __DATA_CONST.__const _GCInputRightThumbstick
|| __DATA_CONST.__const _GCInputRightThumbstickButton
|| __DATA_CONST.__const _GCInputRightTrigger
|| __DATA_CONST.__const _GCInputXboxPaddleFour
|| __DATA_CONST.__const _GCInputXboxPaddleOne
|| __DATA_CONST.__const _GCInputXboxPaddleThree
|| __DATA_CONST.__const _GCInputXboxPaddleTwo
|| __DATA_CONST.__const _GCKeyA
|| __DATA_CONST.__const _GCKeyApplication
|| __DATA_CONST.__const _GCKeyB
|| __DATA_CONST.__const _GCKeyBackslash
|| __DATA_CONST.__const _GCKeyC
|| __DATA_CONST.__const _GCKeyCapsLock
|| __DATA_CONST.__const _GCKeyCloseBracket
|| __DATA_CONST.__const _GCKeyComma
|| __DATA_CONST.__const _GCKeyD
|| __DATA_CONST.__const _GCKeyDeleteForward
|| __DATA_CONST.__const _GCKeyDeleteOrBackspace
|| __DATA_CONST.__const _GCKeyDownArrow
|| __DATA_CONST.__const _GCKeyE
|| __DATA_CONST.__const _GCKeyEight
|| __DATA_CONST.__const _GCKeyEnd
|| __DATA_CONST.__const _GCKeyEqualSign
|| __DATA_CONST.__const _GCKeyEscape
|| __DATA_CONST.__const _GCKeyF
|| __DATA_CONST.__const _GCKeyF1
|| __DATA_CONST.__const _GCKeyF10
|| __DATA_CONST.__const _GCKeyF11
|| __DATA_CONST.__const _GCKeyF12
|| __DATA_CONST.__const _GCKeyF2
|| __DATA_CONST.__const _GCKeyF3
|| __DATA_CONST.__const _GCKeyF4
|| __DATA_CONST.__const _GCKeyF5
|| __DATA_CONST.__const _GCKeyF6
|| __DATA_CONST.__const _GCKeyF7
|| __DATA_CONST.__const _GCKeyF8
|| __DATA_CONST.__const _GCKeyF9
|| __DATA_CONST.__const _GCKeyFive
|| __DATA_CONST.__const _GCKeyFour
|| __DATA_CONST.__const _GCKeyG
|| __DATA_CONST.__const _GCKeyGraveAccentAndTilde
|| __DATA_CONST.__const _GCKeyH
|| __DATA_CONST.__const _GCKeyHome
|| __DATA_CONST.__const _GCKeyHyphen
|| __DATA_CONST.__const _GCKeyI
|| __DATA_CONST.__const _GCKeyInsert
|| __DATA_CONST.__const _GCKeyInternational1
|| __DATA_CONST.__const _GCKeyInternational2
|| __DATA_CONST.__const _GCKeyInternational3
|| __DATA_CONST.__const _GCKeyInternational4
|| __DATA_CONST.__const _GCKeyInternational5
|| __DATA_CONST.__const _GCKeyInternational6
|| __DATA_CONST.__const _GCKeyInternational7
|| __DATA_CONST.__const _GCKeyInternational8
|| __DATA_CONST.__const _GCKeyInternational9
|| __DATA_CONST.__const _GCKeyJ
|| __DATA_CONST.__const _GCKeyK
|| __DATA_CONST.__const _GCKeyKeypad0
|| __DATA_CONST.__const _GCKeyKeypad1
|| __DATA_CONST.__const _GCKeyKeypad2
|| __DATA_CONST.__const _GCKeyKeypad3
|| __DATA_CONST.__const _GCKeyKeypad4
|| __DATA_CONST.__const _GCKeyKeypad5
|| __DATA_CONST.__const _GCKeyKeypad6
|| __DATA_CONST.__const _GCKeyKeypad7
|| __DATA_CONST.__const _GCKeyKeypad8
|| __DATA_CONST.__const _GCKeyKeypad9
|| __DATA_CONST.__const _GCKeyKeypadAsterisk
|| __DATA_CONST.__const _GCKeyKeypadEnter
|| __DATA_CONST.__const _GCKeyKeypadEqualSign
|| __DATA_CONST.__const _GCKeyKeypadHyphen
|| __DATA_CONST.__const _GCKeyKeypadNumLock
|| __DATA_CONST.__const _GCKeyKeypadPeriod
|| __DATA_CONST.__const _GCKeyKeypadPlus
|| __DATA_CONST.__const _GCKeyKeypadSlash
|| __DATA_CONST.__const _GCKeyL
|| __DATA_CONST.__const _GCKeyLANG1
|| __DATA_CONST.__const _GCKeyLANG2
|| __DATA_CONST.__const _GCKeyLANG3
|| __DATA_CONST.__const _GCKeyLANG4
|| __DATA_CONST.__const _GCKeyLANG5
|| __DATA_CONST.__const _GCKeyLANG6
|| __DATA_CONST.__const _GCKeyLANG7
|| __DATA_CONST.__const _GCKeyLANG8
|| __DATA_CONST.__const _GCKeyLANG9
|| __DATA_CONST.__const _GCKeyLeftAlt
|| __DATA_CONST.__const _GCKeyLeftArrow
|| __DATA_CONST.__const _GCKeyLeftControl
|| __DATA_CONST.__const _GCKeyLeftGUI
|| __DATA_CONST.__const _GCKeyLeftShift
|| __DATA_CONST.__const _GCKeyM
|| __DATA_CONST.__const _GCKeyN
|| __DATA_CONST.__const _GCKeyNine
|| __DATA_CONST.__const _GCKeyNonUSBackslash
|| __DATA_CONST.__const _GCKeyNonUSPound
|| __DATA_CONST.__const _GCKeyO
|| __DATA_CONST.__const _GCKeyOne
|| __DATA_CONST.__const _GCKeyOpenBracket
|| __DATA_CONST.__const _GCKeyP
|| __DATA_CONST.__const _GCKeyPageDown
|| __DATA_CONST.__const _GCKeyPageUp
|| __DATA_CONST.__const _GCKeyPause
|| __DATA_CONST.__const _GCKeyPeriod
|| __DATA_CONST.__const _GCKeyPower
|| __DATA_CONST.__const _GCKeyPrintScreen
|| __DATA_CONST.__const _GCKeyQ
|| __DATA_CONST.__const _GCKeyQuote
|| __DATA_CONST.__const _GCKeyR
|| __DATA_CONST.__const _GCKeyReturnOrEnter
|| __DATA_CONST.__const _GCKeyRightAlt
|| __DATA_CONST.__const _GCKeyRightArrow
|| __DATA_CONST.__const _GCKeyRightControl
|| __DATA_CONST.__const _GCKeyRightGUI
|| __DATA_CONST.__const _GCKeyRightShift
|| __DATA_CONST.__const _GCKeyS
|| __DATA_CONST.__const _GCKeyScrollLock
|| __DATA_CONST.__const _GCKeySemicolon
|| __DATA_CONST.__const _GCKeySeven
|| __DATA_CONST.__const _GCKeySix
|| __DATA_CONST.__const _GCKeySlash
|| __DATA_CONST.__const _GCKeySpacebar
|| __DATA_CONST.__const _GCKeyT
|| __DATA_CONST.__const _GCKeyTab
|| __DATA_CONST.__const _GCKeyThree
|| __DATA_CONST.__const _GCKeyTwo
|| __DATA_CONST.__const _GCKeyU
|| __DATA_CONST.__const _GCKeyUpArrow
|| __DATA_CONST.__const _GCKeyV
|| __DATA_CONST.__const _GCKeyW
|| __DATA_CONST.__const _GCKeyX
|| __DATA_CONST.__const _GCKeyY
|| __DATA_CONST.__const _GCKeyZ
|| __DATA_CONST.__const _GCKeyZero
|| __DATA_CONST.__const _GCKeyboardDidConnectNotification
|| __DATA_CONST.__const _GCKeyboardDidDisconnectNotification
|| __DATA_CONST.__const _GCLogicalDeviceWasRegisteredNotification
|| __DATA_CONST.__const _GCLogicalDeviceWasUnregisteredNotification
|| __DATA_CONST.__const _GCMicroGamepadDidBecomeCurrentNotification
|| __DATA_CONST.__const _GCMicroGamepadDidStopBeingCurrentNotification
|| __DATA_CONST.__const _GCMouseDidBecomeCurrentNotification
|| __DATA_CONST.__const _GCMouseDidConnectNotification
|| __DATA_CONST.__const _GCMouseDidDisconnectNotification
|| __DATA_CONST.__const _GCMouseDidStopBeingCurrentNotification
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreHighPriority
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreLowPriority
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreMediumPriority
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreNoMatch
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreVeryHighPriority
|| __DATA_CONST.__const _GCPhysicalDeviceProbeScoreVeryLowPriority
|| __DATA_CONST.__const _GCPhysicalDeviceWasRegisteredNotification
|| __DATA_CONST.__const _GCPhysicalDeviceWasUnregisteredNotification
|| __DATA_CONST.__const _kGCControllerSettingsMetaSettingsExistKey
|| __DATA_CONST.__const _kGCSettingsCustomizedElementsKey
|| __DATA_CONST.__const _kGCSettingsDefaultBundleIdentifier
|| __DATA_CONST.__const _kGCSettingsElementInvertHorizontallyKey
|| __DATA_CONST.__const _kGCSettingsElementInvertSwapAxesKey
|| __DATA_CONST.__const _kGCSettingsElementInvertVerticallyKey
|| __DATA_CONST.__const _kGCSettingsElementMappingKeyKey
|| __DATA_CONST.__const _kGCSettingsMetaSettingsExistKey
|| __DATA_CONST.__const _kGCSettingsMetaSuiteSuffix
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCControllerSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCDeviceBattery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCDeviceLight
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCExtendedGamepad
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCFrontmostApplicationObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCGamepad
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCKeyboardAndMouseEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCKeyboardAndMouseManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCKeyboardEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCLightbarColor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCMicroGamepad
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCMouseEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_GCPhysicalInputProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCAppClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCAppClientProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCAppServerConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCControllerDescription
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCControllerManagerAppClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCControllerManagerServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCHIDEventSubject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCIPCRemoteOutgoingConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCIPCRemoteProcess
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__GCObservation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCControllerSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCDeviceBattery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCDeviceLight
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCExtendedGamepad
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCFrontmostApplicationObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCGamepad
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCKeyboardAndMouseEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCKeyboardAndMouseManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCKeyboardEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCLightbarColor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCMicroGamepad
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCMouseEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_GCPhysicalInputProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCAppClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCAppClientProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCAppServerConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCControllerDescription
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCControllerManagerAppClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCControllerManagerServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCHIDEventSubject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCIPCRemoteOutgoingConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCIPCRemoteProcess
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__GCObservation
|| __TEXT.__const _GCControllerButtonInputPressedThreshold
|| __TEXT.__const _GCCurrentExtendedGamepadSnapshotDataVersion
|| __TEXT.__const _GCCurrentMicroGamepadSnapshotDataVersion
|| __TEXT.__const _GCHapticDurationInfinite
|| __TEXT.__const _GCKeyCodeApplication
|| __TEXT.__const _GCKeyCodeBackslash
|| __TEXT.__const _GCKeyCodeCapsLock
|| __TEXT.__const _GCKeyCodeCloseBracket
|| __TEXT.__const _GCKeyCodeComma
|| __TEXT.__const _GCKeyCodeDeleteForward
|| __TEXT.__const _GCKeyCodeDeleteOrBackspace
|| __TEXT.__const _GCKeyCodeDownArrow
|| __TEXT.__const _GCKeyCodeEight
|| __TEXT.__const _GCKeyCodeEnd
|| __TEXT.__const _GCKeyCodeEqualSign
|| __TEXT.__const _GCKeyCodeEscape
|| __TEXT.__const _GCKeyCodeF1
|| __TEXT.__const _GCKeyCodeF10
|| __TEXT.__const _GCKeyCodeF11
|| __TEXT.__const _GCKeyCodeF12
|| __TEXT.__const _GCKeyCodeF2
|| __TEXT.__const _GCKeyCodeF3
|| __TEXT.__const _GCKeyCodeF4
|| __TEXT.__const _GCKeyCodeF5
|| __TEXT.__const _GCKeyCodeF6
|| __TEXT.__const _GCKeyCodeF7
|| __TEXT.__const _GCKeyCodeF8
|| __TEXT.__const _GCKeyCodeF9
|| __TEXT.__const _GCKeyCodeFive
|| __TEXT.__const _GCKeyCodeFour
|| __TEXT.__const _GCKeyCodeGraveAccentAndTilde
|| __TEXT.__const _GCKeyCodeHome
|| __TEXT.__const _GCKeyCodeHyphen
|| __TEXT.__const _GCKeyCodeInsert
|| __TEXT.__const _GCKeyCodeInternational1
|| __TEXT.__const _GCKeyCodeInternational2
|| __TEXT.__const _GCKeyCodeInternational3
|| __TEXT.__const _GCKeyCodeInternational4
|| __TEXT.__const _GCKeyCodeInternational5
|| __TEXT.__const _GCKeyCodeInternational6
|| __TEXT.__const _GCKeyCodeInternational7
|| __TEXT.__const _GCKeyCodeInternational8
|| __TEXT.__const _GCKeyCodeInternational9
|| __TEXT.__const _GCKeyCodeKeyA
|| __TEXT.__const _GCKeyCodeKeyB
|| __TEXT.__const _GCKeyCodeKeyC
|| __TEXT.__const _GCKeyCodeKeyD
|| __TEXT.__const _GCKeyCodeKeyE
|| __TEXT.__const _GCKeyCodeKeyF
|| __TEXT.__const _GCKeyCodeKeyG
|| __TEXT.__const _GCKeyCodeKeyH
|| __TEXT.__const _GCKeyCodeKeyI
|| __TEXT.__const _GCKeyCodeKeyJ
|| __TEXT.__const _GCKeyCodeKeyK
|| __TEXT.__const _GCKeyCodeKeyL
|| __TEXT.__const _GCKeyCodeKeyM
|| __TEXT.__const _GCKeyCodeKeyN
|| __TEXT.__const _GCKeyCodeKeyO
|| __TEXT.__const _GCKeyCodeKeyP
|| __TEXT.__const _GCKeyCodeKeyQ
|| __TEXT.__const _GCKeyCodeKeyR
|| __TEXT.__const _GCKeyCodeKeyS
|| __TEXT.__const _GCKeyCodeKeyT
|| __TEXT.__const _GCKeyCodeKeyU
|| __TEXT.__const _GCKeyCodeKeyV
|| __TEXT.__const _GCKeyCodeKeyW
|| __TEXT.__const _GCKeyCodeKeyX
|| __TEXT.__const _GCKeyCodeKeyY
|| __TEXT.__const _GCKeyCodeKeyZ
|| __TEXT.__const _GCKeyCodeKeypad0
|| __TEXT.__const _GCKeyCodeKeypad1
|| __TEXT.__const _GCKeyCodeKeypad2
|| __TEXT.__const _GCKeyCodeKeypad3
|| __TEXT.__const _GCKeyCodeKeypad4
|| __TEXT.__const _GCKeyCodeKeypad5
|| __TEXT.__const _GCKeyCodeKeypad6
|| __TEXT.__const _GCKeyCodeKeypad7
|| __TEXT.__const _GCKeyCodeKeypad8
|| __TEXT.__const _GCKeyCodeKeypad9
|| __TEXT.__const _GCKeyCodeKeypadAsterisk
|| __TEXT.__const _GCKeyCodeKeypadEnter
|| __TEXT.__const _GCKeyCodeKeypadEqualSign
|| __TEXT.__const _GCKeyCodeKeypadHyphen
|| __TEXT.__const _GCKeyCodeKeypadNumLock
|| __TEXT.__const _GCKeyCodeKeypadPeriod
|| __TEXT.__const _GCKeyCodeKeypadPlus
|| __TEXT.__const _GCKeyCodeKeypadSlash
|| __TEXT.__const _GCKeyCodeLANG1
|| __TEXT.__const _GCKeyCodeLANG2
|| __TEXT.__const _GCKeyCodeLANG3
|| __TEXT.__const _GCKeyCodeLANG4
|| __TEXT.__const _GCKeyCodeLANG5
|| __TEXT.__const _GCKeyCodeLANG6
|| __TEXT.__const _GCKeyCodeLANG7
|| __TEXT.__const _GCKeyCodeLANG8
|| __TEXT.__const _GCKeyCodeLANG9
|| __TEXT.__const _GCKeyCodeLeftAlt
|| __TEXT.__const _GCKeyCodeLeftArrow
|| __TEXT.__const _GCKeyCodeLeftControl
|| __TEXT.__const _GCKeyCodeLeftGUI
|| __TEXT.__const _GCKeyCodeLeftShift
|| __TEXT.__const _GCKeyCodeNine
|| __TEXT.__const _GCKeyCodeNonUSBackslash
|| __TEXT.__const _GCKeyCodeNonUSPound
|| __TEXT.__const _GCKeyCodeOne
|| __TEXT.__const _GCKeyCodeOpenBracket
|| __TEXT.__const _GCKeyCodePageDown
|| __TEXT.__const _GCKeyCodePageUp
|| __TEXT.__const _GCKeyCodePause
|| __TEXT.__const _GCKeyCodePeriod
|| __TEXT.__const _GCKeyCodePower
|| __TEXT.__const _GCKeyCodePrintScreen
|| __TEXT.__const _GCKeyCodeQuote
|| __TEXT.__const _GCKeyCodeReturnOrEnter
|| __TEXT.__const _GCKeyCodeRightAlt
|| __TEXT.__const _GCKeyCodeRightArrow
|| __TEXT.__const _GCKeyCodeRightControl
|| __TEXT.__const _GCKeyCodeRightGUI
|| __TEXT.__const _GCKeyCodeRightShift
|| __TEXT.__const _GCKeyCodeScrollLock
|| __TEXT.__const _GCKeyCodeSemicolon
|| __TEXT.__const _GCKeyCodeSeven
|| __TEXT.__const _GCKeyCodeSix
|| __TEXT.__const _GCKeyCodeSlash
|| __TEXT.__const _GCKeyCodeSpacebar
|| __TEXT.__const _GCKeyCodeTab
|| __TEXT.__const _GCKeyCodeThree
|| __TEXT.__const _GCKeyCodeTwo
|| __TEXT.__const _GCKeyCodeUpArrow
|| __TEXT.__const _GCKeyCodeZero
|| __TEXT.__text _ControllerClassForService
|| __TEXT.__text _GCAppClientInterface
|| __TEXT.__text _GCAppServerInterface
|| __TEXT.__text _GCBundleWithPID
|| __TEXT.__text _GCControllerManagerEnsureXPCRemote
|| __TEXT.__text _GCControllerManagerInit
|| __TEXT.__text _GCControllerManagerInitXPC
|| __TEXT.__text _GCCurrentProcessLinkedOnAfter
|| __TEXT.__text _GCExtendedGamepadInitInfoMake
|| __TEXT.__text _GCExtendedGamepadInitInfoPopulateNames
|| __TEXT.__text _GCExtendedGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCExtendedGamepadSnapshotDataFromNSData
|| __TEXT.__text _GCGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCHapticClientInterface
|| __TEXT.__text _GCHapticServerInterface
|| __TEXT.__text _GCMicroGamepadSnapShotDataV100FromNSData
|| __TEXT.__text _GCMicroGamepadSnapshotDataFromNSData
|| __TEXT.__text _GCOverrideCurrentProcessLinkedOn
|| __TEXT.__text _HIDControllerClassForVendorAndProduct
|| __TEXT.__text _NSDataFromGCExtendedGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCExtendedGamepadSnapshotData
|| __TEXT.__text _NSDataFromGCGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCMicroGamepadSnapShotDataV100
|| __TEXT.__text _NSDataFromGCMicroGamepadSnapshotData
|| __TEXT.__text _USBControllerClassForVendorAndProduct
|| __TEXT.__text _VendorNameForATVProfile
|| __TEXT.__text __GCConvertStringToLocalizedString
|| __TEXT.__text __publishCustomController
|| __TEXT.__text __unpublishCustomController
|| __TEXT.__text _allCodes
|| __TEXT.__text _clamp
|| __TEXT.__text _currentProcessBundleIdentifier
|| __TEXT.__text _currentProcessHasEntitlement
|| __TEXT.__text _currentProcessIsGameControllerDaemon
|| __TEXT.__text _doesDescriptorConformToSpec
|| __TEXT.__text _elementRangesMatch
|| __TEXT.__text _gc_isInternalBuild
|| __TEXT.__text _getGCDLogger
|| __TEXT.__text _getGCHIDLogger
|| __TEXT.__text _getGCHapticsLogger
|| __TEXT.__text _getGCLogger
|| __TEXT.__text _getGCSettingsLogger
|| __TEXT.__text _getInterfaceNumberForDevice
|| __TEXT.__text _hexStringFromByteArray
|| __TEXT.__text _isDeviceAppleB239Digitizer
|| __TEXT.__text _isDeviceAppleControlCenterRemote
|| __TEXT.__text _isDeviceAppleEmbeddedBluetoothButtons
|| __TEXT.__text _isDeviceAppleSiriRemote
|| __TEXT.__text _isDeviceDualShock4
|| __TEXT.__text _isDeviceKeyboard
|| __TEXT.__text _isDeviceMFiAuthenticated
|| __TEXT.__text _isDeviceMFiGamepadCompliantForDeviceRef
|| __TEXT.__text _isDeviceMFiGamepadCompliantForServiceClientRef
|| __TEXT.__text _isDeviceMotionLite
|| __TEXT.__text _isDeviceMouse
|| __TEXT.__text _isDeviceXboxOne
|| __TEXT.__text _loadNSDictionaryFromJSON
|| __TEXT.__text _nameForKeyCode
|| __TEXT.__text _serviceMatchesUsageAndUsagePage
|| __TEXT.__text _setGCHIDLoggerCategory
|| __TEXT.__text _threadRunLoopSourceCallback
__ AssertionServices: _BKSApplicationStateDisplayIDKey
__ AssertionServices: _BKSApplicationStateKey
__ AssertionServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ BackBoardServices: _BKSHIDEventGetPointerAttributes
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBluetooth: _CBCentralManagerOptionShowPowerAlertKey
__ CoreBluetooth: _CBCentralManagerScanOptionAllowDuplicatesKey
__ CoreBluetooth: _CBConnectPeripheralOptionNotifyOnDisconnectionKey
__ CoreBluetooth: _OBJC_CLASS_$_CBCentralManager
__ CoreBluetooth: _OBJC_CLASS_$_CBUUID
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRun
__ CoreFoundation: _CFRunLoopSourceCreate
__ CoreFoundation: _CFRunLoopSourceSignal
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFBundleCopyBundleURLForExecutableURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreHaptics: _OBJC_CLASS_$_CHHapticEngine
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSLogv
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ IOKit: _IOHIDDeviceCopyMatchingElements
__ IOKit: _IOHIDDeviceGetService
__ IOKit: _IOHIDDeviceSetReport
__ IOKit: _IOHIDElementGetLogicalMax
__ IOKit: _IOHIDElementGetLogicalMin
__ IOKit: _IOHIDElementGetPhysicalMax
__ IOKit: _IOHIDElementGetPhysicalMin
__ IOKit: _IOHIDElementGetReportCount
__ IOKit: _IOHIDElementGetReportSize
__ IOKit: _IOHIDElementGetUsage
__ IOKit: _IOHIDElementGetUsagePage
__ IOKit: _IOHIDEventGetChildren
__ IOKit: _IOHIDEventGetDataValue
__ IOKit: _IOHIDEventGetDoubleValue
__ IOKit: _IOHIDEventGetFloatValue
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetSenderID
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOHIDEventSystemClientActivate
__ IOKit: _IOHIDEventSystemClientCancel
__ IOKit: _IOHIDEventSystemClientCopyServices
__ IOKit: _IOHIDEventSystemClientCreateWithType
__ IOKit: _IOHIDEventSystemClientRegisterDeviceMatchingBlock
__ IOKit: _IOHIDEventSystemClientRegisterEventCallback
__ IOKit: _IOHIDEventSystemClientSetCancelHandler
__ IOKit: _IOHIDEventSystemClientSetDispatchQueue
__ IOKit: _IOHIDEventSystemClientSetMatchingMultiple
__ IOKit: _IOHIDServiceClientConformsTo
__ IOKit: _IOHIDServiceClientCopyProperty
__ IOKit: _IOHIDServiceClientGetRegistryID
__ IOKit: _IOHIDServiceClientRegisterRemovalBlock
__ IOKit: _IOHIDServiceClientSetElementValue
__ IOKit: _IOHIDValueGetElement
__ IOKit: _IOHIDValueGetIntegerValue
__ IOKit: _IOHIDValueGetScaledValue
__ IOKit: _IORegistryEntrySearchCFProperty
__ MobileBluetooth: _BTDeviceConnectServices
__ MobileBluetooth: _BTDeviceGetDeviceClass
__ MobileBluetooth: _BTDeviceGetDeviceType
__ MobileBluetooth: _BTDiscoveryAgentCreate
__ MobileBluetooth: _BTDiscoveryAgentDestroy
__ MobileBluetooth: _BTDiscoveryAgentStartScan
__ MobileBluetooth: _BTDiscoveryAgentStopScan
__ MobileBluetooth: _BTPairingAgentAcceptSSP
__ MobileBluetooth: _BTPairingAgentCreate
__ MobileBluetooth: _BTPairingAgentDestroy
__ MobileBluetooth: _BTPairingAgentStart
__ MobileBluetooth: _BTPairingAgentStop
__ MobileBluetooth: _BTSessionAttachWithQueue
__ MobileBluetooth: _BTSessionDetachWithQueue
__ ReplayKit: _OBJC_CLASS_$_RPScreenRecorder
__ ScreenshotServices: _OBJC_CLASS_$_SSUIService
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidFinishLaunchingNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIApplicationWillTerminateNotification
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotificationCategory
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: _APP_SANDBOX_READ_WRITE
__ libSystem.B.dylib: _SANDBOX_EXTENSION_DEFAULT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_activity_initiate
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_workloop_create_inactive
__ libSystem.B.dylib: _dyld_get_active_platform
__ libSystem.B.dylib: _dyld_get_base_platform
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _ftruncate
__ libSystem.B.dylib: _gethostname
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_make_memory_entry_64
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _nanosleep
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _pthread_set_qos_class_self_np
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _sandbox_extension_release
__ libSystem.B.dylib: _shm_open
__ libSystem.B.dylib: _shm_unlink
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _vm_map
__ libSystem.B.dylib: _vm_page_size
__ libSystem.B.dylib: _vsyslog
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_copy_entitlement_for_self
__ libSystem.B.dylib: _xpc_null_create
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_shmem_create
__ libSystem.B.dylib: _xpc_shmem_map
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZNSt9bad_allocC1Ev
__ libc++.1.dylib: __ZNSt9bad_allocD1Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTISt9bad_alloc
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
GCDualShockGamepad : GCExtendedGamepad
 @property  GCControllerButtonInput *touchpadButton
 @property  GCControllerDirectionPad *touchpadPrimary
 @property  GCControllerDirectionPad *touchpadSecondary

  // class methods
  +[GCDualShockGamepad supportsSecureCoding]

  // instance methods
  -[GCDualShockGamepad .cxx_destruct]
  -[GCDualShockGamepad initWithIdentifier:]
  -[GCDualShockGamepad initWithController:]
  -[GCDualShockGamepad initWithCoder:]
  -[GCDualShockGamepad initializeExtraControllerElements]
  -[GCDualShockGamepad isBluetoothAndUSBMirrored]
  -[GCDualShockGamepad touchpadButton]
  -[GCDualShockGamepad touchpadPrimary]
  -[GCDualShockGamepad touchpadSecondary]


_GCControllerManagerServer : _GCControllerManager <GCPhysicalDeviceRegistry, GCLogicalDeviceRegistry, GCDeviceRegistry, GCDeviceConfigurationRegistry>
 @property  NSSet *activeControllerDevices
 @property  <GCDeviceConfigurationRegistry> *deviceConfigurationRegistry
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCControllerManagerServer _onqueue_refreshControllers]
  -[_GCControllerManagerServer _onqueue_unregisterLogicalDevice:]
  -[_GCControllerManagerServer _onqueue_registerPhysicalDevice:]
  -[_GCControllerManagerServer _hidqueue_popPendingDriverConnectionsForRegistryID:]
  -[_GCControllerManagerServer init]
  -[_GCControllerManagerServer logicalDevices]
  -[_GCControllerManagerServer removeConfigurationWithIdentifier:]
  -[_GCControllerManagerServer .cxx_destruct]
  -[_GCControllerManagerServer acceptIncomingDriverConnection:]
  -[_GCControllerManagerServer activeControllerDevices]
  -[_GCControllerManagerServer updateConfiguration:]
  -[_GCControllerManagerServer deviceManager:deviceDidConnect:]
  -[_GCControllerManagerServer onHIDDeviceRemoved:]
  -[_GCControllerManagerServer onHIDDeviceAdded:]
  -[_GCControllerManagerServer configurationWithIdentifier:]
  -[_GCControllerManagerServer addConfiguration:replaceExisting:]
  -[_GCControllerManagerServer refreshActiveConfigurationsWithCompletion:]
  -[_GCControllerManagerServer deviceManager:deviceDidDisconnect:]
  -[_GCControllerManagerServer setActiveControllerDevices:]
  -[_GCControllerManagerServer hasConfigurationWithIdentifier:]
  -[_GCControllerManagerServer deviceConfigurationRegistry]
  -[_GCControllerManagerServer driverCheckIn]
  -[_GCControllerManagerServer refreshActiveConfigurations]
  -[_GCControllerManagerServer _hidqueue_pushPendingDriverConnection:forRegistryID:]
  -[_GCControllerManagerServer initWithControllerProfiles:]
  -[_GCControllerManagerServer _onqueue_refreshLogicalDevices]
  -[_GCControllerManagerServer _onqueue_unregisterPhysicalDevice:]
  -[_GCControllerManagerServer _onqueue_registerLogicalDevice:]


_GCHapticSyntheticCommand : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned short type
 @property  double time
 @property  unsigned long channelID
 @property  unsigned long sequenceID
 @property  unsigned long eventID
 @property  unsigned long paramID
 @property  unsigned long serverID
 @property  unsigned short command
 @property  float value
 @property  _GCHapticParameterCurve *parameterCurve
 @property  _GCHapticTokenAndParams *tokenAndParams

  // instance methods
  -[_GCHapticSyntheticCommand channelID]
  -[_GCHapticSyntheticCommand command]
  -[_GCHapticSyntheticCommand .cxx_destruct]
  -[_GCHapticSyntheticCommand time]
  -[_GCHapticSyntheticCommand eventID]
  -[_GCHapticSyntheticCommand type]
  -[_GCHapticSyntheticCommand cancel]
  -[_GCHapticSyntheticCommand parameterCurve]
  -[_GCHapticSyntheticCommand sequenceID]
  -[_GCHapticSyntheticCommand serverID]
  -[_GCHapticSyntheticCommand value]
  -[_GCHapticSyntheticCommand paramID]
  -[_GCHapticSyntheticCommand preprocessCommand:]
  -[_GCHapticSyntheticCommand initWithHapticCommand:]
  -[_GCHapticSyntheticCommand tokenAndParams]


_GCMFiGamepadControllerProfile : GCGamepad
  // instance methods
  -[_GCMFiGamepadControllerProfile setPlayerIndex:]
  -[_GCMFiGamepadControllerProfile name]


_GCIPCRemoteIncomingConnection : _GCIPCRemoteConnection <_GCIPCIncomingConnection>
 @property  <_GCIPCProcess> *process
 @property  BOOL invalid

  // class methods
  +[_GCIPCRemoteIncomingConnection sharedConnectionWorkloop]

  // instance methods
  -[_GCIPCRemoteIncomingConnection process]
  -[_GCIPCRemoteIncomingConnection valueForEntitlement:]
  -[_GCIPCRemoteIncomingConnection .cxx_destruct]
  -[_GCIPCRemoteIncomingConnection initWithConnection:]
  -[_GCIPCRemoteIncomingConnection initWithConnection:fromProcess:]
  -[_GCIPCRemoteIncomingConnection remoteProxy]
  -[_GCIPCRemoteIncomingConnection remoteProxyWithErrorHandler:]
  -[_GCIPCRemoteIncomingConnection synchronousRemoteProxyWithErrorHandler:]


GCDeviceBattery : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  float batteryLevel
 @property  long long batteryState

  // class methods
  +[GCDeviceBattery supportsSecureCoding]

  // instance methods
  -[GCDeviceBattery batteryLevel]
  -[GCDeviceBattery _setBatteryState:]
  -[GCDeviceBattery _setBatteryLevel:]
  -[GCDeviceBattery encodeWithCoder:]
  -[GCDeviceBattery setBatteryLevel:]
  -[GCDeviceBattery isEqual:]
  -[GCDeviceBattery setBatteryState:]
  -[GCDeviceBattery batteryState]
  -[GCDeviceBattery initWithCoder:]
  -[GCDeviceBattery initWithLevel:batteryState:]
  -[GCDeviceBattery initWithLevel:isCharging:]


GCMouse : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, GCDeviceLegacy, GCDevice>
 @property  GCController *proxyController
 @property  GCPhysicalInputProfile<GCNamedProfile> *profile
 @property  NSString *uniqueIdentifier
 @property  NSArray *hidServices
 @property  unsigned int service
 @property  NSString *physicalDeviceUniqueID
 @property  unsigned long deviceHash
 @property  NSString *debugName
 @property  BOOL forwarded
 @property  BOOL allHIDDevicesConnected
 @property  BOOL published
 @property  NSString *productCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCController *proxyController
 @property  GCMouseInput *mouseInput
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  NSString *vendorName
 @property  NSString *productCategory
 @property  GCPhysicalInputProfile *physicalInputProfile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCMouse supportsSecureCoding]
  +[GCMouse mice]
  +[GCMouse current]

  // instance methods
  -[GCMouse debugName]
  -[GCMouse setUniqueIdentifier:]
  -[GCMouse handlerQueue]
  -[GCMouse vendorName]
  -[GCMouse deviceHash]
  -[GCMouse isPublished]
  -[GCMouse .cxx_destruct]
  -[GCMouse setHandlerQueue:]
  -[GCMouse encodeWithCoder:]
  -[GCMouse uniqueIdentifier]
  -[GCMouse service]
  -[GCMouse setVendorName:]
  -[GCMouse setPublished:]
  -[GCMouse handleEvent:]
  -[GCMouse physicalDeviceUniqueID]
  -[GCMouse setDebugName:]
  -[GCMouse setForwarded:]
  -[GCMouse profile]
  -[GCMouse setProfile:]
  -[GCMouse sampleRate]
  -[GCMouse initWithCoder:]
  -[GCMouse productCategory]
  -[GCMouse isForwarded]
  -[GCMouse hidServices]
  -[GCMouse physicalInputProfile]
  -[GCMouse mouseInput]
  -[GCMouse setProxyController:]
  -[GCMouse proxyController]
  -[GCMouse proxyController]
  -[GCMouse initWithServiceRef:]
  -[GCMouse setPhysicalDeviceUniqueID:]
  -[GCMouse areAllHIDDevicesConnected]
  -[GCMouse setAllHIDDevicesConnected:]
  -[GCMouse _legacy_vendorName]
  -[GCMouse _legacy_productCategory]
  -[GCMouse _legacy_isEqualToController:]
  -[GCMouse _legacy_description]
  -[GCMouse createInputBufferForDevice:withSize:]
  -[GCMouse addServiceRefsWithDevice:]
  -[GCMouse addServiceRef:]
  -[GCMouse hasServiceRef:]
  -[GCMouse removeServiceRef:]
  -[GCMouse clearServiceRef]
  -[GCMouse supportsMotionLite]
  -[GCMouse _legacy_playerIndex]
  -[GCMouse _legacy_setPlayerIndex:]
  -[GCMouse _legacy_physicalInputProfileName]
  -[GCMouse _legacy_physicalInputProfile]
  -[GCMouse _legacy_isAttachedToDevice]


GCDeviceConfigurationEvaluator : NSObject /usr/lib/libc++.1.dylib
 @property  NSSet *configurationsIN
 @property  NSDictionary *deviceManagersIN
 @property  NSDictionary *physicalDevicesIN
 @property  NSSet *viableConfigurationsOUT
 @property  NSDictionary *deviceOwnersOUT

  // instance methods
  -[GCDeviceConfigurationEvaluator evaluate]
  -[GCDeviceConfigurationEvaluator .cxx_destruct]
  -[GCDeviceConfigurationEvaluator setConfigurationsIN:]
  -[GCDeviceConfigurationEvaluator setDeviceManagersIN:]
  -[GCDeviceConfigurationEvaluator setPhysicalDevicesIN:]
  -[GCDeviceConfigurationEvaluator viableConfigurationsOUT]
  -[GCDeviceConfigurationEvaluator configurationsIN]
  -[GCDeviceConfigurationEvaluator physicalDevicesIN]
  -[GCDeviceConfigurationEvaluator deviceManagersIN]
  -[GCDeviceConfigurationEvaluator viableConfigurations:deviceOwners:]
  -[GCDeviceConfigurationEvaluator deviceOwnersOUT]


_GCMotionEventHIDAdapter : NSObject /usr/lib/libc++.1.dylib <_GCMotionEventSource>
 @property  <_GCHIDEventSource> *HIDEventSource
 @property  id HIDEventObservation
 @property  NSArray *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCMotionEventHIDAdapter init]
  -[_GCMotionEventHIDAdapter setObservers:]
  -[_GCMotionEventHIDAdapter dealloc]
  -[_GCMotionEventHIDAdapter .cxx_destruct]
  -[_GCMotionEventHIDAdapter observers]
  -[_GCMotionEventHIDAdapter observeMotionEvents:]
  -[_GCMotionEventHIDAdapter initWithSource:service:]
  -[_GCMotionEventHIDAdapter HIDEventSource]
  -[_GCMotionEventHIDAdapter setHIDEventSource:]
  -[_GCMotionEventHIDAdapter HIDEventObservation]
  -[_GCMotionEventHIDAdapter setHIDEventObservation:]


_GCMotionEventHIDAdapterDescription : NSObject /usr/lib/libc++.1.dylib <_GCMotionEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCMotionEventHIDAdapterDescription supportsSecureCoding]

  // instance methods
  -[_GCMotionEventHIDAdapterDescription init]
  -[_GCMotionEventHIDAdapterDescription .cxx_destruct]
  -[_GCMotionEventHIDAdapterDescription encodeWithCoder:]
  -[_GCMotionEventHIDAdapterDescription initWithCoder:]
  -[_GCMotionEventHIDAdapterDescription initWithSource:service:]
  -[_GCMotionEventHIDAdapterDescription materializeWithContext:]


_GCAppClientConnection : _GCIPCRemoteIncomingConnection
 @property  <_GCAppServerInterface> *server

  // instance methods
  -[_GCAppClientConnection server]
  -[_GCAppClientConnection setServer:]
  -[_GCAppClientConnection initWithConnection:fromProcess:]


_GCAppServerConnection : _GCIPCRemoteOutgoingConnection
 @property  <_GCAppClientInterface> *client

  // instance methods
  -[_GCAppServerConnection setClient:]
  -[_GCAppServerConnection client]
  -[_GCAppServerConnection init]
  -[_GCAppServerConnection initWithMachServiceName:]


GCAnalytics : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[GCAnalytics instance]

  // instance methods
  -[GCAnalytics init]
  -[GCAnalytics dealloc]
  -[GCAnalytics .cxx_destruct]
  -[GCAnalytics getBundleID]
  -[GCAnalytics sendInputsPressedEvent:]
  -[GCAnalytics runInputPollTimer]
  -[GCAnalytics checkMultipleControllers]
  -[GCAnalytics publishController:]
  -[GCAnalytics unpublishController:]
  -[GCAnalytics onSiriMotionEnabled]
  -[GCAnalytics sendSettingsEnteredEvent]
  -[GCAnalytics sendSettingsCustomizationsToggledEventForBundleID:productCategory:toggledOn:]
  -[GCAnalytics sendSettingsCustomizationsResetEventForBundleID:productCategory:]
  -[GCAnalytics sendSettingsButtonCustomizedEventForBundleID:productCategory:button:]
  -[GCAnalytics sendSettingsIdentifyControllerEventForProductCategory:]
  -[GCAnalytics sendSettingsDevicesEventForTotalCustomizedControllersCount:]
  -[GCAnalytics sendSettingsCustomizedAppsEventForTotalCustomizedAppsCount:]
  -[GCAnalytics sendHapticsEngineCreatedEventForBundleID:productCategory:hapticsLocality:]
  -[GCAnalytics sendHapticsClientDestroyedEventForBundleID:productCategory:totalPlayers:sessionTotalDuration:sessionActiveDuration:terminationReason:]
  -[GCAnalytics sendHapticsPlayerDestroyedEventForBundleID:productCategory:totalEventsProcessed:transientEventsProcessed:continuousEventsProcessed:parameterCurvesProcessed:sessionTotalDuration:sessionActiveDuration:]
  -[GCAnalytics sendHapticsErrorRaisedEventFromSource:productCategory:errorType:]


_GCHIDEventSubject : NSObject /usr/lib/libc++.1.dylib <_GCHIDEventSource>
 @property  BOOL stopped
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCHIDEventSubject init]
  -[_GCHIDEventSubject isStopped]
  -[_GCHIDEventSubject .cxx_destruct]
  -[_GCHIDEventSubject setStopped:]
  -[_GCHIDEventSubject observeHIDEvents:forService:]
  -[_GCHIDEventSubject observeHIDEvents:]
  -[_GCHIDEventSubject publishHIDEvent:]


GCMouseInput : GCPhysicalInputProfile
 @property  @? mouseMovedHandler
 @property  GCDeviceCursor *scroll
 @property  GCControllerButtonInput *leftButton
 @property  GCControllerButtonInput *rightButton
 @property  GCControllerButtonInput *middleButton
 @property  NSArray *auxiliaryButtons

  // instance methods
  -[GCMouseInput leftButton]
  -[GCMouseInput .cxx_destruct]
  -[GCMouseInput name]
  -[GCMouseInput appDidBecomeActive]
  -[GCMouseInput scroll]
  -[GCMouseInput handleEvent:]
  -[GCMouseInput rightButton]
  -[GCMouseInput middleButton]
  -[GCMouseInput initWithController:]
  -[GCMouseInput productCategory]
  -[GCMouseInput appWillResignActive]
  -[GCMouseInput _handleEventImpl:]
  -[GCMouseInput shouldAcceptMouseEvents]
  -[GCMouseInput _handleEventRec:]
  -[GCMouseInput _handleDigitizerEvent:]
  -[GCMouseInput _handlePointerEvent:]
  -[GCMouseInput _handleButtonEvent:]
  -[GCMouseInput _handleScrollEvent:]
  -[GCMouseInput _fireMouseMovedWithQueue:deltaX:deltaY:]
  -[GCMouseInput auxiliaryButtons]
  -[GCMouseInput _mouseButtons]
  -[GCMouseInput mouseMovedHandler]
  -[GCMouseInput setMouseMovedHandler:]


GCGamepadSnapshot : GCGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCGamepadSnapshot init]
  -[GCGamepadSnapshot .cxx_destruct]
  -[GCGamepadSnapshot snapshotData]
  -[GCGamepadSnapshot initWithController:snapshotData:]
  -[GCGamepadSnapshot setSnapshotData:]
  -[GCGamepadSnapshot initWithSnapshotData:]


GCMotion : NSObject /usr/lib/libc++.1.dylib <_GCMotionEventSink, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  BOOL sensorsRequireManualActivation
 @property  BOOL sensorsActive
 @property  BOOL hasGravityAndUserAcceleration
 @property  {?=ddd} gravity
 @property  {?=ddd} userAcceleration
 @property  {?=ddd} acceleration
 @property  BOOL hasAttitudeAndRotationRate
 @property  BOOL hasAttitude
 @property  BOOL hasRotationRate
 @property  {GCQuaternion=dddd} attitude
 @property  {?=ddd} rotationRate

  // class methods
  +[GCMotion supportsSecureCoding]

  // instance methods
  -[GCMotion attitude]
  -[GCMotion _tip]
  -[GCMotion _tilt]
  -[GCMotion setUserAcceleration:]
  -[GCMotion setAttitude:]
  -[GCMotion setAcceleration:]
  -[GCMotion .cxx_destruct]
  -[GCMotion _setCompassEnabled:]
  -[GCMotion initWithIdentifier:]
  -[GCMotion setRotationRate:]
  -[GCMotion gravity]
  -[GCMotion encodeWithCoder:]
  -[GCMotion identifier]
  -[GCMotion rotationRate]
  -[GCMotion hasAttitude]
  -[GCMotion userAcceleration]
  -[GCMotion setValueChangedHandler:]
  -[GCMotion acceleration]
  -[GCMotion controller]
  -[GCMotion setGravity:]
  -[GCMotion setController:]
  -[GCMotion initWithController:]
  -[GCMotion initWithCoder:]
  -[GCMotion valueChangedHandler]
  -[GCMotion setSensorsActive:]
  -[GCMotion sensorsActive]
  -[GCMotion hasGravityAndUserAcceleration]
  -[GCMotion _setAttitude:]
  -[GCMotion _setRotationRate:]
  -[GCMotion sensorsRequireManualActivation]
  -[GCMotion _setMotionLite:]
  -[GCMotion _setHasAttitude:]
  -[GCMotion hasRotationRate]
  -[GCMotion _setHasRotationRate:]
  -[GCMotion hasAttitudeAndRotationRate]
  -[GCMotion isEmulatedMicroGamepad]
  -[GCMotion _setGravity:]
  -[GCMotion _setUserAcceleration:]
  -[GCMotion _setAcceleration:]
  -[GCMotion _startDeviceMotionUpdates]
  -[GCMotion _stopDeviceMotionUpdates]
  -[GCMotion _isUpdatingDeviceMotion]
  -[GCMotion setStateFromMotion:]
  -[GCMotion _pauseMotionUpdates:]
  -[GCMotion setMotionEventSource:]


GCHapticCapabilities : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, GCDeviceHapticCapabilityInfo>
 @property  GCHapticCapabilityGraph *capabilityGraph
 @property  NSArray *hapticEngines
 @property  BOOL initialized
 @property  GCDeviceHaptics *deviceHaptics
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCHapticCapabilities supportsSecureCoding]

  // instance methods
  -[GCHapticCapabilities init]
  -[GCHapticCapabilities .cxx_destruct]
  -[GCHapticCapabilities initialized]
  -[GCHapticCapabilities encodeWithCoder:]
  -[GCHapticCapabilities identifier]
  -[GCHapticCapabilities setController:]
  -[GCHapticCapabilities initWithCoder:]
  -[GCHapticCapabilities initWithIdentifier:hapticEnginesInfo:hapticCapabilityGraph:]
  -[GCHapticCapabilities initializeHapticEngines]
  -[GCHapticCapabilities removeHapticEngines]
  -[GCHapticCapabilities deviceHaptics]
  -[GCHapticCapabilities hapticEngines]
  -[GCHapticCapabilities capabilityGraph]
  -[GCHapticCapabilities setHapticEngines:]


_GCKeyboardEventHIDAdapter : NSObject /usr/lib/libc++.1.dylib <_GCKeyboardEventSource>
 @property  <_GCHIDEventSource> *HIDEventSource
 @property  id HIDEventObservation
 @property  NSArray *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCKeyboardEventHIDAdapter init]
  -[_GCKeyboardEventHIDAdapter setObservers:]
  -[_GCKeyboardEventHIDAdapter dealloc]
  -[_GCKeyboardEventHIDAdapter .cxx_destruct]
  -[_GCKeyboardEventHIDAdapter observers]
  -[_GCKeyboardEventHIDAdapter initWithSource:service:]
  -[_GCKeyboardEventHIDAdapter HIDEventSource]
  -[_GCKeyboardEventHIDAdapter setHIDEventSource:]
  -[_GCKeyboardEventHIDAdapter HIDEventObservation]
  -[_GCKeyboardEventHIDAdapter setHIDEventObservation:]
  -[_GCKeyboardEventHIDAdapter observeKeyboardEvents:]


_GCKeyboardEventHIDAdapterDescription : NSObject /usr/lib/libc++.1.dylib <_GCKeyboardEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCKeyboardEventHIDAdapterDescription supportsSecureCoding]

  // instance methods
  -[_GCKeyboardEventHIDAdapterDescription init]
  -[_GCKeyboardEventHIDAdapterDescription .cxx_destruct]
  -[_GCKeyboardEventHIDAdapterDescription encodeWithCoder:]
  -[_GCKeyboardEventHIDAdapterDescription initWithCoder:]
  -[_GCKeyboardEventHIDAdapterDescription initWithSource:service:]
  -[_GCKeyboardEventHIDAdapterDescription materializeWithContext:]


GCMotionXPCProxyClientEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointClient, GCControllerMotionConfigurableSensors, GCMotionXPCProxyRemoteClientEndpointInterface>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL sensorsActive

  // instance methods
  -[GCMotionXPCProxyClientEndpoint invalidateConnection]
  -[GCMotionXPCProxyClientEndpoint init]
  -[GCMotionXPCProxyClientEndpoint .cxx_destruct]
  -[GCMotionXPCProxyClientEndpoint identifier]
  -[GCMotionXPCProxyClientEndpoint setController:]
  -[GCMotionXPCProxyClientEndpoint setSensorsActive:]
  -[GCMotionXPCProxyClientEndpoint sensorsActive]
  -[GCMotionXPCProxyClientEndpoint refreshSensorsActive]
  -[GCMotionXPCProxyClientEndpoint newSensorsActive:]
  -[GCMotionXPCProxyClientEndpoint _remoteEndpointSetSensorsActive:]
  -[GCMotionXPCProxyClientEndpoint fetchObjectIdentifierWithReply:]
  -[GCMotionXPCProxyClientEndpoint initWithIdentifier:initialSensorsActive:]
  -[GCMotionXPCProxyClientEndpoint setRemoteEndpoint:connection:]


GCMotionXPCProxyServerEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointServer, GCMotionXPCProxyRemoteServerEndpointInterface>
 @property  <_GCControllerComponentDescription> *receiverDescription
 @property  <GCMotionXPCProxyServerEndpointDelegate> *delegate
 @property  id userInfo
 @property  BOOL sensorsActive
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCMotionXPCProxyServerEndpoint invalidateConnection]
  -[GCMotionXPCProxyServerEndpoint setUserInfo:]
  -[GCMotionXPCProxyServerEndpoint .cxx_destruct]
  -[GCMotionXPCProxyServerEndpoint identifier]
  -[GCMotionXPCProxyServerEndpoint userInfo]
  -[GCMotionXPCProxyServerEndpoint setDelegate:]
  -[GCMotionXPCProxyServerEndpoint delegate]
  -[GCMotionXPCProxyServerEndpoint setSensorsActive:]
  -[GCMotionXPCProxyServerEndpoint sensorsActive]
  -[GCMotionXPCProxyServerEndpoint newSensorsActive:]
  -[GCMotionXPCProxyServerEndpoint fetchSensorsActiveWithReply:]
  -[GCMotionXPCProxyServerEndpoint fetchObjectIdentifierWithReply:]
  -[GCMotionXPCProxyServerEndpoint initWithIdentifier:initialValue:]
  -[GCMotionXPCProxyServerEndpoint acceptClient:onConnection:error:]
  -[GCMotionXPCProxyServerEndpoint initWithInitialValue:]
  -[GCMotionXPCProxyServerEndpoint receiverDescription]
  -[GCMotionXPCProxyServerEndpoint invalidateClient]


GCMotionXPCProxyClientEndpointDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCMotionXPCProxyClientEndpointDescription supportsSecureCoding]

  // instance methods
  -[GCMotionXPCProxyClientEndpointDescription init]
  -[GCMotionXPCProxyClientEndpointDescription .cxx_destruct]
  -[GCMotionXPCProxyClientEndpointDescription encodeWithCoder:]
  -[GCMotionXPCProxyClientEndpointDescription identifier]
  -[GCMotionXPCProxyClientEndpointDescription initWithCoder:]
  -[GCMotionXPCProxyClientEndpointDescription materializeWithContext:]
  -[GCMotionXPCProxyClientEndpointDescription initWithIdentifier:initialSensorsActive:]


_GCHapticLogicalDevice : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_GCHapticLogicalDevice .cxx_destruct]
  -[_GCHapticLogicalDevice initWithIdentifier:clientConnection:]
  -[_GCHapticLogicalDevice registerHapticClient:]
  -[_GCHapticLogicalDevice unregisterHapticClient:]
  -[_GCHapticLogicalDevice hasClients]
  -[_GCHapticLogicalDevice stopAllHaptics]


GCExtendedGamepadSnapshot : GCExtendedGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCExtendedGamepadSnapshot init]
  -[GCExtendedGamepadSnapshot .cxx_destruct]
  -[GCExtendedGamepadSnapshot snapshotData]
  -[GCExtendedGamepadSnapshot initWithController:snapshotData:]
  -[GCExtendedGamepadSnapshot setSnapshotData:]
  -[GCExtendedGamepadSnapshot initWithSnapshotData:]


_GCControllerAxisButtonInput : GCControllerButtonInput
 @property  GCControllerAxisInput *axis
 @property  BOOL positive

  // instance methods
  -[_GCControllerAxisButtonInput collection]
  -[_GCControllerAxisButtonInput axis]
  -[_GCControllerAxisButtonInput setAxis:]
  -[_GCControllerAxisButtonInput .cxx_destruct]
  -[_GCControllerAxisButtonInput _setValue:]
  -[_GCControllerAxisButtonInput value]
  -[_GCControllerAxisButtonInput isAnalog]
  -[_GCControllerAxisButtonInput _setValue:queue:]
  -[_GCControllerAxisButtonInput _setValueFromAxisButton:queue:]
  -[_GCControllerAxisButtonInput _commitPendingValueOnQueue:]
  -[_GCControllerAxisButtonInput initWithAxis:positive:]
  -[_GCControllerAxisButtonInput _setValueFromAxisButton:]
  -[_GCControllerAxisButtonInput _setPendingValue:]
  -[_GCControllerAxisButtonInput isPositive]


_GCControllerManager : NSObject /usr/lib/libc++.1.dylib <_GCImplicitIPCObject, _GCIPCObjectRegistry, _GCIPCServiceRegistry, _GCIPCObjectMaterializationContext, GameControllerClientProtocol, _GCHIDEventSource>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCIPCObjectRegistry> *IPCObjectRegistry
 @property  <_GCIPCServiceRegistry> *IPCServiceRegistry
 @property  BOOL isAppInBackground
 @property  ^{__IOHIDManager=} hidManager
 @property  @? logger
 @property  NSXPCConnection *connection
 @property  NSXPCConnection *daemonConnection
 @property  NSObject<GCRemoteDaemonProxy> *remote
 @property  BOOL gameControllerActive
 @property  NSThread *hidInputThread
 @property  ^{__CFRunLoop=} hidInputThreadRunLoop
 @property  ^{__CFRunLoopSource=} hidThreadRunLoopSource
 @property  NSMutableArray *hidThreadExecutionBlocks
 @property  GCController *firstMicroGamepad
 @property  GCController *currentController
 @property  GCMicroGamepad *currentMicroGamepad
 @property  GCExtendedGamepad *currentExtendedGamepad
 @property  GCMouse *currentMouse
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *controllersQueue
 @property  NSObject<OS_dispatch_queue> *hidSystemPropertyQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCControllerManager sharedInstance]
  +[_GCControllerManager initialize]

  // instance methods
  -[_GCControllerManager currentController]
  -[_GCControllerManager init]
  -[_GCControllerManager controllers]
  -[_GCControllerManager setCurrentMicroGamepad:]
  -[_GCControllerManager currentExtendedGamepad]
  -[_GCControllerManager CBApplicationDidBecomeActive]
  -[_GCControllerManager dealloc]
  -[_GCControllerManager remote]
  -[_GCControllerManager addController:]
  -[_GCControllerManager removeController:]
  -[_GCControllerManager controllerWithUDID:setData:]
  -[_GCControllerManager controllerWithUDID:setValue:forElement:]
  -[_GCControllerManager microControllerWithDigitizerX:withY:withTimeStamp:touchDown:]
  -[_GCControllerManager .cxx_destruct]
  -[_GCControllerManager microControllerWithUDID:setDigitizerX:digitizerY:withTimeStamp:touchDown:]
  -[_GCControllerManager IPCServiceRegistry]
  -[_GCControllerManager onScreenshotTriggeredWithController:]
  -[_GCControllerManager mice]
  -[_GCControllerManager setRemote:]
  -[_GCControllerManager setCurrentExtendedGamepad:]
  -[_GCControllerManager IPCObjectRegistry]
  -[_GCControllerManager identifier]
  -[_GCControllerManager open]
  -[_GCControllerManager setConnection:]
  -[_GCControllerManager onHIDDeviceRemoved:]
  -[_GCControllerManager currentMicroGamepad]
  -[_GCControllerManager onHIDDeviceAdded:]
  -[_GCControllerManager setCurrentController:]
  -[_GCControllerManager serviceClientForIPCService:]
  -[_GCControllerManager logger]
  -[_GCControllerManager onVideoRecordingToggledWithController:]
  -[_GCControllerManager connection]
  -[_GCControllerManager setLogger:]
  -[_GCControllerManager updateCurrentControllerAndProfileForUnpublishedController:]
  -[_GCControllerManager daemonConnection]
  -[_GCControllerManager setupHIDMonitor:]
  -[_GCControllerManager controllersQueue]
  -[_GCControllerManager registerIPCObject:]
  -[_GCControllerManager currentMouse]
  -[_GCControllerManager setCurrentMouse:]
  -[_GCControllerManager observeHIDEvents:forService:]
  -[_GCControllerManager observeHIDEvents:]
  -[_GCControllerManager _legacy_init]
  -[_GCControllerManager _legacy_dealloc]
  -[_GCControllerManager _legacy_makeHIDEventSource:]
  -[_GCControllerManager HIDDeviceMatchingAttributes]
  -[_GCControllerManager _legacy_removeControllerWithServiceRef:]
  -[_GCControllerManager _legacy_addControllerWithServiceRef:]
  -[_GCControllerManager makeHIDEventSource:]
  -[_GCControllerManager _legacy_startHIDDeviceMonitor]
  -[_GCControllerManager teardownHIDMonitor:]
  -[_GCControllerManager hidSystemPropertyQueue]
  -[_GCControllerManager IPCObjectWithIdentifier:]
  -[_GCControllerManager _legacy_controllers]
  -[_GCControllerManager _legacy_mice]
  -[_GCControllerManager async_HIDBlock:]
  -[_GCControllerManager coalescedKeyboard]
  -[_GCControllerManager launchHIDInputThread]
  -[_GCControllerManager _legacy_stopHIDDeviceMonitor]
  -[_GCControllerManager hidThreadExecutionBlocks]
  -[_GCControllerManager threadHIDInputOnMain:]
  -[_GCControllerManager _legacy_stopHIDEventMonitor]
  -[_GCControllerManager _legacy_startHIDEventMonitor]
  -[_GCControllerManager updateIdleTimer:]
  -[_GCControllerManager _legacy_updateControllerWithEvent:]
  -[_GCControllerManager combineSiriRemoteHIDDevicesWithNewController:existingController:]
  -[_GCControllerManager shouldStoreController:]
  -[_GCControllerManager storeController:]
  -[_GCControllerManager _legacy_publishController:]
  -[_GCControllerManager removeController:registryID:]
  -[_GCControllerManager _queue_removeController:registryID:]
  -[_GCControllerManager _legacy_unpublishController:]
  -[_GCControllerManager _legacy_coalescedKeyboard]
  -[_GCControllerManager setGameControllerActive:]
  -[_GCControllerManager firstMicroGamepad]
  -[_GCControllerManager setFirstMicroGamepad:]
  -[_GCControllerManager hidInputThread]
  -[_GCControllerManager hidInputThreadRunLoop]
  -[_GCControllerManager hidThreadRunLoopSource]
  -[_GCControllerManager threadHIDInputOffMain:]
  -[_GCControllerManager setDaemonConnection:]
  -[_GCControllerManager isAppInBackground]
  -[_GCControllerManager CBApplicationWillResignActive]
  -[_GCControllerManager gameControllerActive]
  -[_GCControllerManager startIdleWatchTimer]
  -[_GCControllerManager hidManager]
  -[_GCControllerManager setHidManager:]
  -[_GCControllerManager isExistingController:]
  -[_GCControllerManager isPhysicalB239:]
  -[_GCControllerManager removeCoalescedControllerComponent:]
  -[_GCControllerManager addControllerForAppStoreRemote:]
  -[_GCControllerManager controller:setValue:forElement:]
  -[_GCControllerManager controllerWithUDID:setValue0:setValue1:setValue2:setValue3:forElement:]


_GCCControllerManagerDescription : _GCImplicitIPCObjectDescription <_GCHIDEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCCControllerManagerDescription init]
  -[_GCCControllerManagerDescription materializeWithContext:]
  -[_GCCControllerManagerDescription initWithControllerManager:]


GCControllerSFDelegate : NSObject /usr/lib/libc++.1.dylib <NSUserActivityDelegate>
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCControllerSFDelegate .cxx_destruct]
  -[GCControllerSFDelegate startScan]
  -[GCControllerSFDelegate fireCompletionHandler]
  -[GCControllerSFDelegate userActivityWasContinued:]
  -[GCControllerSFDelegate completionHandler]
  -[GCControllerSFDelegate setCompletionHandler:]


_GCHapticParameterCurve : NSObject /usr/lib/libc++.1.dylib
 @property  NSMutableArray *curve

  // instance methods
  -[_GCHapticParameterCurve curve]
  -[_GCHapticParameterCurve setCurve:]
  -[_GCHapticParameterCurve .cxx_destruct]
  -[_GCHapticParameterCurve initWithHapticCommand:]


GCLocalPlayerIndicator : NSObject /usr/lib/libc++.1.dylib <GCControllerPlayerIndicator>
 @property  <GCControllerPlayerIndicator> *systemPlayerIndicatorProxy
 @property  long long playerIndex
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCLocalPlayerIndicator setPlayerIndex:]
  -[GCLocalPlayerIndicator playerIndex]
  -[GCLocalPlayerIndicator .cxx_destruct]
  -[GCLocalPlayerIndicator identifier]
  -[GCLocalPlayerIndicator setController:]
  -[GCLocalPlayerIndicator initWithInitialValue:systemPlayerIndicatorProxy:]
  -[GCLocalPlayerIndicator systemPlayerIndicatorProxy]


_GCHapticEvent : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned long identifier
 @property  long long type
 @property  long long subtype
 @property  double startTime
 @property  double intensity
 @property  double sharpness
 @property  BOOL stopped
 @property  BOOL transientBeganAsContinuousEvent

  // class methods
  +[_GCHapticEvent supportsSecureCoding]

  // instance methods
  -[_GCHapticEvent setStartTime:]
  -[_GCHapticEvent subtype]
  -[_GCHapticEvent stopped]
  -[_GCHapticEvent setSubtype:]
  -[_GCHapticEvent setIntensity:]
  -[_GCHapticEvent setType:]
  -[_GCHapticEvent setIdentifier:]
  -[_GCHapticEvent encodeWithCoder:]
  -[_GCHapticEvent identifier]
  -[_GCHapticEvent type]
  -[_GCHapticEvent sharpness]
  -[_GCHapticEvent setSharpness:]
  -[_GCHapticEvent intensity]
  -[_GCHapticEvent setStopped:]
  -[_GCHapticEvent initWithCoder:]
  -[_GCHapticEvent startTime]
  -[_GCHapticEvent valueForNoteParam:inParameters:]
  -[_GCHapticEvent evaluateDeviceNoteParams:]
  -[_GCHapticEvent initWithSyntheticCommand:]
  -[_GCHapticEvent transientBeganAsContinuousEvent]
  -[_GCHapticEvent setTransientBeganAsContinuousEvent:]


GCHapticMotor : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding>
 @property  NSMutableArray *queuedTransients
 @property  NSString *name
 @property  int index
 @property  unsigned long features
 @property  float frequency
 @property  float amplitude

  // class methods
  +[GCHapticMotor supportsSecureCoding]

  // instance methods
  -[GCHapticMotor copyWithZone:]
  -[GCHapticMotor frequency]
  -[GCHapticMotor setFrequency:]
  -[GCHapticMotor index]
  -[GCHapticMotor amplitude]
  -[GCHapticMotor init]
  -[GCHapticMotor features]
  -[GCHapticMotor .cxx_destruct]
  -[GCHapticMotor name]
  -[GCHapticMotor encodeWithCoder:]
  -[GCHapticMotor initWithIndex:]
  -[GCHapticMotor setAmplitude:]
  -[GCHapticMotor initWithCoder:]
  -[GCHapticMotor initWithIndex:name:features:frequency:amplitude:]
  -[GCHapticMotor initWithIndex:name:features:]
  -[GCHapticMotor initWithIndex:name:]
  -[GCHapticMotor applyValuesFrom:]
  -[GCHapticMotor enqueueHapticTransientEvent:]
  -[GCHapticMotor drainQueuedTransients]
  -[GCHapticMotor queuedTransients]
  -[GCHapticMotor setQueuedTransients:]


_GCDevicePIDVIDMatchingFilter : NSObject /usr/lib/libc++.1.dylib <_GCDeviceMatchingFilter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCDevicePIDVIDMatchingFilter .cxx_destruct]
  -[_GCDevicePIDVIDMatchingFilter identifier]
  -[_GCDevicePIDVIDMatchingFilter match:]
  -[_GCDevicePIDVIDMatchingFilter initWithVendorID:productIDs:]


_GCDevicePrimaryUsageMatchingFilter : NSObject /usr/lib/libc++.1.dylib <_GCDeviceMatchingFilter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCDevicePrimaryUsageMatchingFilter .cxx_destruct]
  -[_GCDevicePrimaryUsageMatchingFilter identifier]
  -[_GCDevicePrimaryUsageMatchingFilter match:]
  -[_GCDevicePrimaryUsageMatchingFilter initWithPrimaryUsagePage:PrimaryUsage:]


_GCDefaultDeviceManager : NSObject /usr/lib/libc++.1.dylib <_GCPhysicalDeviceManager, _GCLogicalDeviceManager>
 @property  <GCPhysicalDeviceRegistry><GCLogicalDeviceRegistry> *deviceRegistry
 @property  <_GCDefaultDeviceManagerDelegate> *delegate
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCDefaultDeviceManager _onqueue_registerDefaultConfigurationForDevice:]
  -[_GCDefaultDeviceManager deviceRegistry]
  -[_GCDefaultDeviceManager .cxx_destruct]
  -[_GCDefaultDeviceManager matchHIDDevice:]
  -[_GCDefaultDeviceManager identifier]
  -[_GCDefaultDeviceManager claimHIDDevice:]
  -[_GCDefaultDeviceManager makeDeviceWithConfiguration:dependencies:]
  -[_GCDefaultDeviceManager acceptDriverConnection:forHIDDevice:]
  -[_GCDefaultDeviceManager setDelegate:]
  -[_GCDefaultDeviceManager initWithIdentifier:matchingFilter:probeScore:]
  -[_GCDefaultDeviceManager delegate]
  -[_GCDefaultDeviceManager relinquishHIDDevice:]
  -[_GCDefaultDeviceManager setDeviceRegistry:]


_GCHapticPlayer : NSObject /usr/lib/libc++.1.dylib
 @property  int totalEventsProcessed
 @property  int transientEventsProcessed
 @property  int continuousEventsProcessed
 @property  int parameterCurvesProcessed
 @property  double totalLifetimeInSeconds
 @property  double activeLifetimeInSeconds
 @property  NSString *bundleIdentifier
 @property  NSString *controllerProductCategory
 @property  int totalEventsProcessed
 @property  int transientEventsProcessed
 @property  int continuousEventsProcessed
 @property  int parameterCurvesProcessed
 @property  double totalLifetimeInSeconds
 @property  NSArray *actuators
 @property  _GCHapticLogicalDevice *hapticLogicalDevice
 @property  NSNumber *identifier
 @property  float continuousIntensity
 @property  float continuousSharpness
 @property  BOOL retainedByClient

  // instance methods
  -[_GCHapticPlayer dealloc]
  -[_GCHapticPlayer isMuted]
  -[_GCHapticPlayer .cxx_destruct]
  -[_GCHapticPlayer teardown]
  -[_GCHapticPlayer clearParameters]
  -[_GCHapticPlayer identifier]
  -[_GCHapticPlayer bundleIdentifier]
  -[_GCHapticPlayer handleCommand:]
  -[_GCHapticPlayer actuators]
  -[_GCHapticPlayer hasProcessedActiveEventsThisSlice]
  -[_GCHapticPlayer hasScheduledCommands]
  -[_GCHapticPlayer isMutedForReason:]
  -[_GCHapticPlayer setMute:forReason:]
  -[_GCHapticPlayer controllerProductCategory]
  -[_GCHapticPlayer totalEventsProcessed]
  -[_GCHapticPlayer totalEventsProcessed]
  -[_GCHapticPlayer transientEventsProcessed]
  -[_GCHapticPlayer transientEventsProcessed]
  -[_GCHapticPlayer continuousEventsProcessed]
  -[_GCHapticPlayer continuousEventsProcessed]
  -[_GCHapticPlayer parameterCurvesProcessed]
  -[_GCHapticPlayer parameterCurvesProcessed]
  -[_GCHapticPlayer totalLifetimeInSeconds]
  -[_GCHapticPlayer totalLifetimeInSeconds]
  -[_GCHapticPlayer activeLifetimeInSeconds]
  -[_GCHapticPlayer initWithIdentifier:actuators:client:]
  -[_GCHapticPlayer transientsEnqueuedSinceLastQuery]
  -[_GCHapticPlayer processSliceForLogicalDevice:startTime:endTime:]
  -[_GCHapticPlayer continuousIntensity]
  -[_GCHapticPlayer continuousSharpness]
  -[_GCHapticPlayer hasProcessedActiveEventsAfterTime:]
  -[_GCHapticPlayer hasScheduledEventsByTime:]
  -[_GCHapticPlayer isActiveAtTime:]
  -[_GCHapticPlayer setRetainedByClient:]
  -[_GCHapticPlayer scheduleCommand:]
  -[_GCHapticPlayer hapticLogicalDevice]
  -[_GCHapticPlayer setHapticLogicalDevice:]
  -[_GCHapticPlayer isRetainedByClient]
  -[_GCHapticPlayer setTotalEventsProcessed:]
  -[_GCHapticPlayer setTransientEventsProcessed:]
  -[_GCHapticPlayer setContinuousEventsProcessed:]
  -[_GCHapticPlayer setParameterCurvesProcessed:]
  -[_GCHapticPlayer setTotalLifetimeInSeconds:]


GCControllerTouchpad : GCControllerElement
 @property  GCControllerDirectionPad *touchSurface
 @property  GCControllerButtonInput *button
 @property  @? touchDown
 @property  @? touchMoved
 @property  @? touchUp
 @property  long long touchState
 @property  BOOL reportsAbsoluteTouchSurfaceValues

  // instance methods
  -[GCControllerTouchpad .cxx_destruct]
  -[GCControllerTouchpad encodeWithCoder:]
  -[GCControllerTouchpad touchState]
  -[GCControllerTouchpad touchDown]
  -[GCControllerTouchpad touchUp]
  -[GCControllerTouchpad button]
  -[GCControllerTouchpad setTouchDown:]
  -[GCControllerTouchpad initWithCoder:]
  -[GCControllerTouchpad initWithDescriptionName:]
  -[GCControllerTouchpad distanceBetweenCGPoint:andCGPoint:]
  -[GCControllerTouchpad mulCGPoint:byScalar:]
  -[GCControllerTouchpad normalizeCGPoint:]
  -[GCControllerTouchpad scaleCGPoint:toLength:]
  -[GCControllerTouchpad addCGPoint:toPoint:]
  -[GCControllerTouchpad magnitudeForCGPoint:]
  -[GCControllerTouchpad subCGPoint:fromPoint:]
  -[GCControllerTouchpad clampPoint:toLength:]
  -[GCControllerTouchpad touchMoved]
  -[GCControllerTouchpad determineTouchStateWithDigitizerX:digitizerY:touchDown:]
  -[GCControllerTouchpad calculateRelativePositionWithDigitizerX:digitizerY:touchDown:]
  -[GCControllerTouchpad reportDigitizerChange:]
  -[GCControllerTouchpad touchSurface]
  -[GCControllerTouchpad setDigitizerX:digitizerY:touchDown:queue:]
  -[GCControllerTouchpad setValueForXAxis:yAxis:touchDown:buttonValue:]
  -[GCControllerTouchpad setTouchMoved:]
  -[GCControllerTouchpad setTouchUp:]
  -[GCControllerTouchpad setTouchSurface:]
  -[GCControllerTouchpad reportsAbsoluteTouchSurfaceValues]
  -[GCControllerTouchpad setReportsAbsoluteTouchSurfaceValues:]


GCController : NSObject /usr/lib/libc++.1.dylib <_GCIPCObject, NSSecureCoding, GCDeviceLegacy, GCDevice>
 @property  @? __deprecated_controllerPausedHandler
 @property  BOOL componentBased
 @property  NSArray *components
 @property  <GCControllerMotionConfigurableSensors> *motionConfigurableSensors
 @property  GCControllerSettings *settings
 @property  GCControllerSettings *settingsForBundleID
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCPhysicalInputProfile<GCNamedProfile> *profile
 @property  NSString *uniqueIdentifier
 @property  NSArray *hidServices
 @property  unsigned int service
 @property  NSString *physicalDeviceUniqueID
 @property  BOOL physicalDeviceUsesCompass
 @property  BOOL bluetoothAndUSBMirrored
 @property  unsigned long deviceHash
 @property  NSString *debugName
 @property  BOOL forwarded
 @property  BOOL allHIDDevicesConnected
 @property  BOOL published
 @property  NSString *productCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NSCopying><NSObject><NSSecureCoding> *identifier
 @property  NSArray *components
 @property  @? controllerPausedHandler
 @property  BOOL attachedToDevice
 @property  BOOL snapshot
 @property  long long playerIndex
 @property  GCDeviceBattery *battery
 @property  GCGamepad *gamepad
 @property  GCMicroGamepad *microGamepad
 @property  GCExtendedGamepad *extendedGamepad
 @property  GCMotion *motion
 @property  GCDeviceLight *light
 @property  GCDeviceHaptics *haptics
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  NSString *vendorName
 @property  NSString *productCategory
 @property  GCPhysicalInputProfile *physicalInputProfile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCController supportsSecureCoding]
  +[GCController __setLogger__:]
  +[GCController controllers]
  +[GCController _startWirelessControllerDiscoveryWithCompanions:btClassic:btle:completionHandler:]
  +[GCController startWirelessControllerDiscoveryWithCompletionHandler:]
  +[GCController __open__]
  +[GCController controllerWithMicroGamepad]
  +[GCController __openXPC__]
  +[GCController stopWirelessControllerDiscovery]
  +[GCController __daemon__appWillEnterForeground]
  +[GCController __daemon__appDidEnterBackground]
  +[GCController __openXPC_and_CBApplicationDidBecomeActive__]
  +[GCController controllerWithExtendedGamepad]
  +[GCController current]

  // instance methods
  -[GCController debugName]
  -[GCController setUniqueIdentifier:]
  -[GCController initWithProfile:]
  -[GCController motion]
  -[GCController removeComponent:]
  -[GCController handlerQueue]
  -[GCController setPlayerIndex:]
  -[GCController playerIndex]
  -[GCController setService:]
  -[GCController vendorName]
  -[GCController light]
  -[GCController deviceHash]
  -[GCController isPublished]
  -[GCController dealloc]
  -[GCController components]
  -[GCController .cxx_destruct]
  -[GCController gamepad]
  -[GCController setComponents:]
  -[GCController setHandlerQueue:]
  -[GCController encodeWithCoder:]
  -[GCController identifier]
  -[GCController uniqueIdentifier]
  -[GCController isSnapshot]
  -[GCController capture]
  -[GCController service]
  -[GCController setVendorName:]
  -[GCController settings]
  -[GCController setPublished:]
  -[GCController handleEvent:]
  -[GCController physicalDeviceUniqueID]
  -[GCController extendedGamepad]
  -[GCController setDebugName:]
  -[GCController setForwarded:]
  -[GCController initWithComponents:]
  -[GCController battery]
  -[GCController haptics]
  -[GCController profile]
  -[GCController setProfile:]
  -[GCController sampleRate]
  -[GCController addComponent:]
  -[GCController initWithCoder:]
  -[GCController productCategory]
  -[GCController isForwarded]
  -[GCController isBluetoothAndUSBMirrored]
  -[GCController hidServices]
  -[GCController _legacy_mouse]
  -[GCController physicalInputProfile]
  -[GCController isProxyController]
  -[GCController initWithServiceRef:]
  -[GCController setIsProxyController:]
  -[GCController setPhysicalDeviceUniqueID:]
  -[GCController areAllHIDDevicesConnected]
  -[GCController setAllHIDDevicesConnected:]
  -[GCController _legacy_vendorName]
  -[GCController _legacy_productCategory]
  -[GCController _legacy_isEqualToController:]
  -[GCController _legacy_description]
  -[GCController createInputBufferForDevice:withSize:]
  -[GCController addServiceRefsWithDevice:]
  -[GCController addServiceRef:]
  -[GCController hasServiceRef:]
  -[GCController removeServiceRef:]
  -[GCController clearServiceRef]
  -[GCController supportsMotionLite]
  -[GCController _legacy_playerIndex]
  -[GCController _legacy_setPlayerIndex:]
  -[GCController _legacy_physicalInputProfileName]
  -[GCController _legacy_physicalInputProfile]
  -[GCController _legacy_isAttachedToDevice]
  -[GCController microGamepad]
  -[GCController physicalInputProfileName]
  -[GCController isAttachedToDevice]
  -[GCController physicalDeviceUsesCompass]
  -[GCController motionConfigurableSensors]
  -[GCController initializeHapticEngines]
  -[GCController removeHapticEngines]
  -[GCController hapticEngines]
  -[GCController setControllerPausedHandler:]
  -[GCController controllerPausedHandler]
  -[GCController set__deprecated_controllerPausedHandler:]
  -[GCController __deprecated_controllerPausedHandler]
  -[GCController initWithIdentifier:components:]
  -[GCController settingsForBundleID]
  -[GCController isComponentBased]
  -[GCController _legacy_batteryStatus]
  -[GCController _legacy_extendedGamepad]
  -[GCController _legacy_gamepad]
  -[GCController _legacy_microGamepad]
  -[GCController _legacy_motion]
  -[GCController _setSnapshot:]
  -[GCController isEqualToController:]
  -[GCController _becomeCurrent]
  -[GCController controllerSettings]
  -[GCController setPhysicalDeviceUsesCompass:]
  -[GCController displayTrueSiriRemoteName]
  -[GCController initWithProfileClass:services:]
  -[GCController setHidServices:]
  -[GCController setDeviceHash:]
  -[GCController addServiceRefs:]
  -[GCController _legacy_keyboard]


_GCControllerDescription : NSObject /usr/lib/libc++.1.dylib <_GCUpdatableIPCObjectDescription>
 @property  <NSCopying><NSObject><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCControllerDescription supportsSecureCoding]

  // instance methods
  -[_GCControllerDescription redactedDescription]
  -[_GCControllerDescription init]
  -[_GCControllerDescription isEqualToDescription:]
  -[_GCControllerDescription .cxx_destruct]
  -[_GCControllerDescription encodeWithCoder:]
  -[_GCControllerDescription identifier]
  -[_GCControllerDescription isEqual:]
  -[_GCControllerDescription initWithCoder:]
  -[_GCControllerDescription materializeWithContext:]
  -[_GCControllerDescription initWithIdentifier:components:]
  -[_GCControllerDescription update:withContext:]


_GCController : GCController <NSSecureCoding>
  // class methods
  +[_GCController supportsSecureCoding]


GCEventViewController : UIViewController /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices
 @property  BOOL controllerUserInteractionEnabled

  // instance methods
  -[GCEventViewController controllerUserInteractionEnabled]
  -[GCEventViewController setControllerUserInteractionEnabled:]


_GCDriverClientConnection : _GCIPCRemoteIncomingConnection <_GCDeviceDriverConnection>
 @property  <_GCDriverServerInterface> *exportedObject
 @property  BOOL invalid

  // instance methods
  -[_GCDriverClientConnection setExportedObject:]
  -[_GCDriverClientConnection exportedObject]
  -[_GCDriverClientConnection initWithConnection:fromProcess:]
  -[_GCDriverClientConnection connectToDeviceService:withClient:reply:]


GCHapticCapabilityGraphNode : NSObject /usr/lib/libc++.1.dylib <GCJSONRepresentable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSMutableArray *children
 @property  NSMutableArray *actuators
 @property  NSString *label
 @property  BOOL exposed

  // instance methods
  -[GCHapticCapabilityGraphNode children]
  -[GCHapticCapabilityGraphNode addChild:]
  -[GCHapticCapabilityGraphNode jsonDictionaryRepresentation]
  -[GCHapticCapabilityGraphNode .cxx_destruct]
  -[GCHapticCapabilityGraphNode label]
  -[GCHapticCapabilityGraphNode setChildren:]
  -[GCHapticCapabilityGraphNode initWithJSONDictionaryRepresentation:]
  -[GCHapticCapabilityGraphNode actuators]
  -[GCHapticCapabilityGraphNode isExposed]
  -[GCHapticCapabilityGraphNode setActuators:]
  -[GCHapticCapabilityGraphNode addActuator:]


_GCControllerComponentDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription, _GCUpdatableIPCObjectDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCControllerComponentDescription supportsSecureCoding]

  // instance methods
  -[_GCControllerComponentDescription redactedDescription]
  -[_GCControllerComponentDescription init]
  -[_GCControllerComponentDescription .cxx_destruct]
  -[_GCControllerComponentDescription encodeWithCoder:]
  -[_GCControllerComponentDescription identifier]
  -[_GCControllerComponentDescription initWithComponent:]
  -[_GCControllerComponentDescription initWithCoder:]
  -[_GCControllerComponentDescription materializeWithContext:]
  -[_GCControllerComponentDescription update:withContext:]
  -[_GCControllerComponentDescription initWithComponent:bindings:]
  -[_GCControllerComponentDescription _applyBinding:toComponent:]


_GCAppleTVRemoteControllerProfile : GCMicroGamepad <DigitizerValueChangedDelegate>
 @property  unsigned long owner
 @property  GCControllerDirectionPad *dpad
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCAppleTVRemoteControllerProfile updateDevice:withButtonDebounceTime:withDelay:]

  // instance methods
  -[_GCAppleTVRemoteControllerProfile setOwner:]
  -[_GCAppleTVRemoteControllerProfile owner]
  -[_GCAppleTVRemoteControllerProfile .cxx_destruct]
  -[_GCAppleTVRemoteControllerProfile name]
  -[_GCAppleTVRemoteControllerProfile setAllowsRotation:]
  -[_GCAppleTVRemoteControllerProfile initWithController:]
  -[_GCAppleTVRemoteControllerProfile sampleRate]
  -[_GCAppleTVRemoteControllerProfile setDpad:x:y:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile getPositionInSlidingWindowForRealX:realY:outXInWindow:outYInWindow:]
  -[_GCAppleTVRemoteControllerProfile initCommon:]
  -[_GCAppleTVRemoteControllerProfile processOrientationData:]
  -[_GCAppleTVRemoteControllerProfile digitizerTouchEvent:x:y:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile digitizerTouchUp:timestamp:forceSkipDpadRotation:]
  -[_GCAppleTVRemoteControllerProfile ownershipClaimingElementsZero]
  -[_GCAppleTVRemoteControllerProfile handleReport:data:]


GCControllerAxisInput : GCControllerElement
 @property  float value
 @property  GCControllerButtonInput *positive
 @property  GCControllerButtonInput *negative
 @property  BOOL horizontal
 @property  @? valueChangedHandler

  // instance methods
  -[GCControllerAxisInput maxValue]
  -[GCControllerAxisInput .cxx_destruct]
  -[GCControllerAxisInput initWithCollection:]
  -[GCControllerAxisInput _setValue:]
  -[GCControllerAxisInput negative]
  -[GCControllerAxisInput setValue:]
  -[GCControllerAxisInput minValue]
  -[GCControllerAxisInput setValueChangedHandler:]
  -[GCControllerAxisInput value]
  -[GCControllerAxisInput setHorizontal:]
  -[GCControllerAxisInput setNegative:]
  -[GCControllerAxisInput isHorizontal]
  -[GCControllerAxisInput setPositive:]
  -[GCControllerAxisInput positive]
  -[GCControllerAxisInput isAnalog]
  -[GCControllerAxisInput _setValue:queue:]
  -[GCControllerAxisInput valueChangedHandler]
  -[GCControllerAxisInput getAndResetTimesPressed]
  -[GCControllerAxisInput initWithCollection:horizontal:]
  -[GCControllerAxisInput setMinValue:andMaxValue:]


_GCKeyboardEventImpl : NSObject /usr/lib/libc++.1.dylib <_GCKeyboardEvent>
 @property  long long usagePage
 @property  long long usage
 @property  long long down
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCKeyboardEventImpl copyWithZone:]
  -[_GCKeyboardEventImpl down]
  -[_GCKeyboardEventImpl setUsagePage:]
  -[_GCKeyboardEventImpl usage]
  -[_GCKeyboardEventImpl initWithKeyboardEvent:]
  -[_GCKeyboardEventImpl setUsage:]
  -[_GCKeyboardEventImpl usagePage]
  -[_GCKeyboardEventImpl setDown:]


_GCSetValueEvent : NSObject /usr/lib/libc++.1.dylib

_GCControllerGestureAwareButtonInput : GCControllerButtonInput
 @property  long long actualSystemGestureState
 @property  float longPressInterval
 @property  float multiPressInterval
 @property  int requiredMultiPressCount
 @property  @? longPressHandler
 @property  @? multiPressHandler

  // instance methods
  -[_GCControllerGestureAwareButtonInput longPressInterval]
  -[_GCControllerGestureAwareButtonInput setLongPressInterval:]
  -[_GCControllerGestureAwareButtonInput .cxx_destruct]
  -[_GCControllerGestureAwareButtonInput setValue:]
  -[_GCControllerGestureAwareButtonInput setEnabled:]
  -[_GCControllerGestureAwareButtonInput _setValue:queue:]
  -[_GCControllerGestureAwareButtonInput _commitPendingValueOnQueue:]
  -[_GCControllerGestureAwareButtonInput initWithDescriptionName:]
  -[_GCControllerGestureAwareButtonInput actualSystemGestureState]
  -[_GCControllerGestureAwareButtonInput registerSetValueEvent:queue:]
  -[_GCControllerGestureAwareButtonInput __onqueue_executeMultiPressRecognizerForEvent:queue:]
  -[_GCControllerGestureAwareButtonInput __onqueue_forwardEvent:queue:]
  -[_GCControllerGestureAwareButtonInput __onqueue_executeLongPressRecognizerForEvent:queue:]
  -[_GCControllerGestureAwareButtonInput multiPressInterval]
  -[_GCControllerGestureAwareButtonInput setActualSystemGestureState:]
  -[_GCControllerGestureAwareButtonInput muteLongPress:]
  -[_GCControllerGestureAwareButtonInput muteMultiPress:]
  -[_GCControllerGestureAwareButtonInput setMultiPressInterval:]
  -[_GCControllerGestureAwareButtonInput requiredMultiPressCount]
  -[_GCControllerGestureAwareButtonInput setRequiredMultiPressCount:]
  -[_GCControllerGestureAwareButtonInput longPressHandler]
  -[_GCControllerGestureAwareButtonInput setLongPressHandler:]
  -[_GCControllerGestureAwareButtonInput multiPressHandler]
  -[_GCControllerGestureAwareButtonInput setMultiPressHandler:]


_GCHapticDynamicParameter : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned int type
 @property  double value

  // instance methods
  -[_GCHapticDynamicParameter initWithType:value:]
  -[_GCHapticDynamicParameter type]
  -[_GCHapticDynamicParameter setValue:]
  -[_GCHapticDynamicParameter value]


GCXboxGamepad : GCExtendedGamepad
 @property  long long type
 @property  GCControllerButtonInput *buttonShare
 @property  GCControllerButtonInput *paddleButton1
 @property  GCControllerButtonInput *paddleButton2
 @property  GCControllerButtonInput *paddleButton3
 @property  GCControllerButtonInput *paddleButton4

  // class methods
  +[GCXboxGamepad supportsSecureCoding]

  // instance methods
  -[GCXboxGamepad setType:]
  -[GCXboxGamepad .cxx_destruct]
  -[GCXboxGamepad initWithIdentifier:]
  -[GCXboxGamepad encodeWithCoder:]
  -[GCXboxGamepad type]
  -[GCXboxGamepad initWithController:]
  -[GCXboxGamepad initWithCoder:]
  -[GCXboxGamepad initializeExtraControllerElements]
  -[GCXboxGamepad paddleButton1]
  -[GCXboxGamepad paddleButton2]
  -[GCXboxGamepad paddleButton3]
  -[GCXboxGamepad paddleButton4]
  -[GCXboxGamepad buttonShare]
  -[GCXboxGamepad setButtonShare:]


GCHapticCapabilityGraph : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, GCJSONRepresentable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSMutableDictionary *nodes
 @property  NSMutableSet *exposedCapabilities
 @property  NSMutableSet *exposedLeafCapabilities
 @property  NSMutableSet *allCapabilities
 @property  NSMutableSet *allLeafCapabilities

  // class methods
  +[GCHapticCapabilityGraph supportsSecureCoding]

  // instance methods
  -[GCHapticCapabilityGraph jsonDictionaryRepresentation]
  -[GCHapticCapabilityGraph .cxx_destruct]
  -[GCHapticCapabilityGraph encodeWithCoder:]
  -[GCHapticCapabilityGraph setNodes:]
  -[GCHapticCapabilityGraph nodes]
  -[GCHapticCapabilityGraph initWithCoder:]
  -[GCHapticCapabilityGraph allCapabilities]
  -[GCHapticCapabilityGraph initWithJSONDictionaryRepresentation:]
  -[GCHapticCapabilityGraph exposedCapabilities]
  -[GCHapticCapabilityGraph setExposedCapabilities:]
  -[GCHapticCapabilityGraph exposedLeafCapabilities]
  -[GCHapticCapabilityGraph setExposedLeafCapabilities:]
  -[GCHapticCapabilityGraph setAllCapabilities:]
  -[GCHapticCapabilityGraph allLeafCapabilities]
  -[GCHapticCapabilityGraph setAllLeafCapabilities:]
  -[GCHapticCapabilityGraph actuatorsForNode:]


GCKeyboardAndMouseEventObserver : NSObject /usr/lib/libc++.1.dylib <GCKeyboardEventObserverDelegate, GCMouseEventObserverDelegate, GCFrontmostApplicationObserverDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCKeyboardAndMouseEventObserver clientRemoved:]
  -[GCKeyboardAndMouseEventObserver initWithFilter:]
  -[GCKeyboardAndMouseEventObserver onMouseEvent:]
  -[GCKeyboardAndMouseEventObserver .cxx_destruct]
  -[GCKeyboardAndMouseEventObserver onFrontmostApplicationChanged:]
  -[GCKeyboardAndMouseEventObserver onKeyboardEvent:]
  -[GCKeyboardAndMouseEventObserver clientAdded:]


_GCMicrosoftXboxControllerProfile : NSObject /usr/lib/libc++.1.dylib <_GCControllerProfile>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCMicrosoftXboxControllerProfile physicalDeviceGetHapticCapabilities:]
  +[_GCMicrosoftXboxControllerProfile logicalDeviceControllerProductCategory:]
  +[_GCMicrosoftXboxControllerProfile deviceManager:prepareLogicalDevice:]
  +[_GCMicrosoftXboxControllerProfile physicalDeviceGetHapticCapabilityGraph:]
  +[_GCMicrosoftXboxControllerProfile physicalDevice:getBatteryWithReply:]
  +[_GCMicrosoftXboxControllerProfile deviceManager]
  +[_GCMicrosoftXboxControllerProfile deviceManager:willPublishPhysicalDevice:]
  +[_GCMicrosoftXboxControllerProfile logicalDevice:makeControllerPhysicalInputProfileWithIdentifier:]
  +[_GCMicrosoftXboxControllerProfile logicalDevice:determinePhysicalInputType:]


GCHapticActuator : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, GCJSONRepresentable, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *label
 @property  long long type
 @property  unsigned long index

  // class methods
  +[GCHapticActuator supportsSecureCoding]

  // instance methods
  -[GCHapticActuator copyWithZone:]
  -[GCHapticActuator index]
  -[GCHapticActuator setIndex:]
  -[GCHapticActuator jsonDictionaryRepresentation]
  -[GCHapticActuator setType:]
  -[GCHapticActuator .cxx_destruct]
  -[GCHapticActuator label]
  -[GCHapticActuator encodeWithCoder:]
  -[GCHapticActuator type]
  -[GCHapticActuator setLabel:]
  -[GCHapticActuator initWithCoder:]
  -[GCHapticActuator initWithJSONDictionaryRepresentation:]
  -[GCHapticActuator initWithLabel:type:index:]


GCExtendedGamepad : GCPhysicalInputProfile <_GCGamepadEventSink, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCControllerButtonInput *button0
 @property  GCControllerButtonInput *button1
 @property  GCControllerButtonInput *button2
 @property  GCControllerButtonInput *button3
 @property  GCControllerButtonInput *_buttonHome
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonB
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonY
 @property  GCControllerButtonInput *buttonMenu
 @property  GCControllerButtonInput *buttonOptions
 @property  GCControllerButtonInput *buttonHome
 @property  GCControllerDirectionPad *leftThumbstick
 @property  GCControllerDirectionPad *rightThumbstick
 @property  GCControllerButtonInput *leftShoulder
 @property  GCControllerButtonInput *rightShoulder
 @property  GCControllerButtonInput *leftTrigger
 @property  GCControllerButtonInput *rightTrigger
 @property  GCControllerButtonInput *leftThumbstickButton
 @property  GCControllerButtonInput *rightThumbstickButton

  // class methods
  +[GCExtendedGamepad supportsSecureCoding]
  +[GCExtendedGamepad _current]

  // instance methods
  -[GCExtendedGamepad dpad]
  -[GCExtendedGamepad leftShoulder]
  -[GCExtendedGamepad rightShoulder]
  -[GCExtendedGamepad leftTrigger]
  -[GCExtendedGamepad rightTrigger]
  -[GCExtendedGamepad initWithInfo:]
  -[GCExtendedGamepad .cxx_destruct]
  -[GCExtendedGamepad name]
  -[GCExtendedGamepad buttonA]
  -[GCExtendedGamepad setAllowsRotation:]
  -[GCExtendedGamepad initWithIdentifier:]
  -[GCExtendedGamepad buttonB]
  -[GCExtendedGamepad buttonX]
  -[GCExtendedGamepad buttonY]
  -[GCExtendedGamepad encodeWithCoder:]
  -[GCExtendedGamepad saveSnapshot]
  -[GCExtendedGamepad buttonOptions]
  -[GCExtendedGamepad buttonMenu]
  -[GCExtendedGamepad buttonHome]
  -[GCExtendedGamepad button2]
  -[GCExtendedGamepad handleEvent:]
  -[GCExtendedGamepad setValueChangedHandler:]
  -[GCExtendedGamepad leftThumbstickButton]
  -[GCExtendedGamepad rightThumbstickButton]
  -[GCExtendedGamepad leftThumbstick]
  -[GCExtendedGamepad rightThumbstick]
  -[GCExtendedGamepad button0]
  -[GCExtendedGamepad button1]
  -[GCExtendedGamepad button3]
  -[GCExtendedGamepad allowsRotation]
  -[GCExtendedGamepad initWithController:]
  -[GCExtendedGamepad initWithCoder:]
  -[GCExtendedGamepad productCategory]
  -[GCExtendedGamepad initWithController:initInfo:]
  -[GCExtendedGamepad valueChangedHandler]
  -[GCExtendedGamepad setGamepadEventSource:]
  -[GCExtendedGamepad reportsAbsoluteDpadValues]
  -[GCExtendedGamepad _triggerValueChangedHandlerForElement:queue:]
  -[GCExtendedGamepad initWithIdentifier:info:]
  -[GCExtendedGamepad initAuxiliaryButtonsWithInitInfo:]
  -[GCExtendedGamepad setElementValuesFromExtendedGamepad:]
  -[GCExtendedGamepad _buttonHome]
  -[GCExtendedGamepad setStateFromExtendedGamepad:]
  -[GCExtendedGamepad setReportsAbsoluteDpadValues:]


GCLightXPCProxyClientEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointClient, GCDeviceLightComponent, GCLightXPCProxyRemoteClientEndpointInterface>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCDeviceLight *light

  // instance methods
  -[GCLightXPCProxyClientEndpoint invalidateConnection]
  -[GCLightXPCProxyClientEndpoint init]
  -[GCLightXPCProxyClientEndpoint light]
  -[GCLightXPCProxyClientEndpoint .cxx_destruct]
  -[GCLightXPCProxyClientEndpoint identifier]
  -[GCLightXPCProxyClientEndpoint observeValueForKeyPath:ofObject:change:context:]
  -[GCLightXPCProxyClientEndpoint setController:]
  -[GCLightXPCProxyClientEndpoint fetchObjectIdentifierWithReply:]
  -[GCLightXPCProxyClientEndpoint setRemoteEndpoint:connection:]
  -[GCLightXPCProxyClientEndpoint observeChangesForLight:]
  -[GCLightXPCProxyClientEndpoint refreshLight]
  -[GCLightXPCProxyClientEndpoint newLight:]
  -[GCLightXPCProxyClientEndpoint stopObservingChangesForLight:]
  -[GCLightXPCProxyClientEndpoint _remoteEndpointHasSetLight:]
  -[GCLightXPCProxyClientEndpoint initWithIdentifier:initialLight:]


GCLightXPCProxyServerEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointServer, GCLightXPCProxyRemoteServerEndpointInterface>
 @property  <_GCControllerComponentDescription> *receiverDescription
 @property  <GCLightXPCProxyServerEndpointDelegate> *delegate
 @property  id userInfo
 @property  GCDeviceLight *light
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCLightXPCProxyServerEndpoint invalidateConnection]
  -[GCLightXPCProxyServerEndpoint setUserInfo:]
  -[GCLightXPCProxyServerEndpoint light]
  -[GCLightXPCProxyServerEndpoint .cxx_destruct]
  -[GCLightXPCProxyServerEndpoint identifier]
  -[GCLightXPCProxyServerEndpoint userInfo]
  -[GCLightXPCProxyServerEndpoint setDelegate:]
  -[GCLightXPCProxyServerEndpoint delegate]
  -[GCLightXPCProxyServerEndpoint setLight:]
  -[GCLightXPCProxyServerEndpoint fetchObjectIdentifierWithReply:]
  -[GCLightXPCProxyServerEndpoint initWithIdentifier:initialValue:]
  -[GCLightXPCProxyServerEndpoint acceptClient:onConnection:error:]
  -[GCLightXPCProxyServerEndpoint initWithInitialValue:]
  -[GCLightXPCProxyServerEndpoint receiverDescription]
  -[GCLightXPCProxyServerEndpoint invalidateClient]
  -[GCLightXPCProxyServerEndpoint newLight:]
  -[GCLightXPCProxyServerEndpoint fetchLightWithReply:]


GCLightXPCProxyClientEndpointDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCLightXPCProxyClientEndpointDescription supportsSecureCoding]

  // instance methods
  -[GCLightXPCProxyClientEndpointDescription init]
  -[GCLightXPCProxyClientEndpointDescription .cxx_destruct]
  -[GCLightXPCProxyClientEndpointDescription encodeWithCoder:]
  -[GCLightXPCProxyClientEndpointDescription identifier]
  -[GCLightXPCProxyClientEndpointDescription initWithCoder:]
  -[GCLightXPCProxyClientEndpointDescription materializeWithContext:]
  -[GCLightXPCProxyClientEndpointDescription initWithIdentifier:initialLight:]


_GCAssertingProfile : NSObject /usr/lib/libc++.1.dylib <GCNamedProfile>
 @property  NSString *name
 @property  GCMotion *_motion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCAssertingProfile setPlayerIndex:]
  -[_GCAssertingProfile _motion]
  -[_GCAssertingProfile name]
  -[_GCAssertingProfile appDidBecomeActive]
  -[_GCAssertingProfile handleEvent:]
  -[_GCAssertingProfile setController:]
  -[_GCAssertingProfile initWithController:]
  -[_GCAssertingProfile sampleRate]
  -[_GCAssertingProfile productCategory]
  -[_GCAssertingProfile valueChangedHandler]
  -[_GCAssertingProfile setButton:value:]
  -[_GCAssertingProfile set_motion:]
  -[_GCAssertingProfile appWillResignActive]
  -[_GCAssertingProfile setDpad:x:y:]
  -[_GCAssertingProfile setButton:pressed:]


_GCDefaultLogicalDevice : NSObject /usr/lib/libc++.1.dylib <_GCDeviceControllerProviding, _GCDeviceSettingsComponent, GCPlayerIndicatorXPCProxyServerEndpointDelegate, GCLightXPCProxyServerEndpointDelegate, GCMotionXPCProxyServerEndpointDelegate, GCBatteryXPCProxyServerEndpointDelegate, GCSettingsXPCProxyServerEndpointDelegate, _GCLogicalDevice>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCDefaultLogicalDeviceDelegate> *delegate
 @property  _GCDeviceConfiguration *configuration
 @property  <_GCPhysicalDevice> *underlyingDevice
 @property  NSSet *underlyingDevices
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  <_GCDeviceManager> *manager
 @property  NSSet *components
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCDefaultLogicalDevice redactedDescription]
  -[_GCDefaultLogicalDevice defaultSettings]
  -[_GCDefaultLogicalDevice init]
  -[_GCDefaultLogicalDevice propertyForKey:]
  -[_GCDefaultLogicalDevice components]
  -[_GCDefaultLogicalDevice .cxx_destruct]
  -[_GCDefaultLogicalDevice identifier]
  -[_GCDefaultLogicalDevice _addClient:]
  -[_GCDefaultLogicalDevice manager]
  -[_GCDefaultLogicalDevice _removeClient:]
  -[_GCDefaultLogicalDevice configuration]
  -[_GCDefaultLogicalDevice setDelegate:]
  -[_GCDefaultLogicalDevice delegate]
  -[_GCDefaultLogicalDevice underlyingDevice]
  -[_GCDefaultLogicalDevice makeControllerForClient:]
  -[_GCDefaultLogicalDevice activateLogical]
  -[_GCDefaultLogicalDevice underlyingDevices]
  -[_GCDefaultLogicalDevice motionXPCProxyServerEndpoint:didReceiveSensorsActiveChange:]
  -[_GCDefaultLogicalDevice initWithPhysicalDevice:configuration:manager:]
  -[_GCDefaultLogicalDevice lightXPCProxyServerEndpoint:didReceiveLightChange:]
  -[_GCDefaultLogicalDevice settingsForBundleIdentifier:]
  -[_GCDefaultLogicalDevice playerIndicatorXPCProxyServerEndpoint:didReceivePlayerIndexChange:]


GCKeyboardEventData : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned short keyCode
 @property  BOOL pressed
 @property  unsigned long senderID

  // class methods
  +[GCKeyboardEventData supportsSecureCoding]

  // instance methods
  -[GCKeyboardEventData setSenderID:]
  -[GCKeyboardEventData setPressed:]
  -[GCKeyboardEventData pressed]
  -[GCKeyboardEventData senderID]
  -[GCKeyboardEventData encodeWithCoder:]
  -[GCKeyboardEventData keyCode]
  -[GCKeyboardEventData initWithCoder:]
  -[GCKeyboardEventData setKeyCode:]


GCKeyboardEventObserver : NSObject /usr/lib/libc++.1.dylib
 @property  <GCKeyboardEventObserverDelegate> *delegate

  // instance methods
  -[GCKeyboardEventObserver initWithDelegate:]
  -[GCKeyboardEventObserver dealloc]
  -[GCKeyboardEventObserver .cxx_destruct]
  -[GCKeyboardEventObserver setDelegate:]
  -[GCKeyboardEventObserver delegate]


_GCDefaultPhysicalDevice : NSObject /usr/lib/libc++.1.dylib <_GCDeviceGamepadComponent, _GCDeviceMotionComponent, _GCDevicePlayerIndexIndicatorComponent, _GCDeviceLightComponent, _GCDeviceBatteryComponent, GCBatteryServiceClientInterface, _GCDeviceHapticCapabilitiesComponent, _GCPhysicalDevice>
 @property  <_GCGamepadEventSourceDescription> *gamepadEventSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? deviceMotionServiceConnectedHandler
 @property  <_GCMotionEventSourceDescription> *motionEventSource
 @property  BOOL sensorsActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long indicatedPlayerIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? deviceLightServiceConnectedHandler
 @property  GCDeviceLight *light
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? deviceBatteryServiceConnectedHandler
 @property  @? deviceBatteryComponentBatteryUpdatedHandler
 @property  GCDeviceBattery *battery
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *hapticEngines
 @property  GCHapticCapabilityGraph *hapticCapabilityGraph
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCDefaultPhysicalDeviceDelegate> *delegate
 @property  <GCLightServiceServerInterface> *lightServiceServer
 @property  <GCMotionServiceServerInterface> *motionServiceServer
 @property  <GCBatteryServiceServerInterface> *batteryServiceServer
 @property  _GCCControllerHIDServiceInfo *serviceInfo
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  <_GCDeviceManager> *manager
 @property  NSSet *components
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCDefaultPhysicalDevice identifierForService:]

  // instance methods
  -[_GCDefaultPhysicalDevice redactedDescription]
  -[_GCDefaultPhysicalDevice init]
  -[_GCDefaultPhysicalDevice propertyForKey:]
  -[_GCDefaultPhysicalDevice conformsToProtocol:]
  -[_GCDefaultPhysicalDevice light]
  -[_GCDefaultPhysicalDevice components]
  -[_GCDefaultPhysicalDevice .cxx_destruct]
  -[_GCDefaultPhysicalDevice identifier]
  -[_GCDefaultPhysicalDevice manager]
  -[_GCDefaultPhysicalDevice serviceInfo]
  -[_GCDefaultPhysicalDevice battery]
  -[_GCDefaultPhysicalDevice setDelegate:]
  -[_GCDefaultPhysicalDevice delegate]
  -[_GCDefaultPhysicalDevice setLight:]
  -[_GCDefaultPhysicalDevice setSensorsActive:]
  -[_GCDefaultPhysicalDevice sensorsActive]
  -[_GCDefaultPhysicalDevice hapticEngines]
  -[_GCDefaultPhysicalDevice driverConnection]
  -[_GCDefaultPhysicalDevice initWithHIDDevice:manager:]
  -[_GCDefaultPhysicalDevice setDriverConnection:]
  -[_GCDefaultPhysicalDevice batteryServiceServer]
  -[_GCDefaultPhysicalDevice indicatedPlayerIndex]
  -[_GCDefaultPhysicalDevice setIndicatedPlayerIndex:]
  -[_GCDefaultPhysicalDevice deviceLightServiceConnectedHandler]
  -[_GCDefaultPhysicalDevice setDeviceLightServiceConnectedHandler:]
  -[_GCDefaultPhysicalDevice deviceMotionServiceConnectedHandler]
  -[_GCDefaultPhysicalDevice setDeviceMotionServiceConnectedHandler:]
  -[_GCDefaultPhysicalDevice motionEventSource]
  -[_GCDefaultPhysicalDevice deviceBatteryServiceConnectedHandler]
  -[_GCDefaultPhysicalDevice setDeviceBatteryServiceConnectedHandler:]
  -[_GCDefaultPhysicalDevice deviceBatteryComponentBatteryUpdatedHandler]
  -[_GCDefaultPhysicalDevice setDeviceBatteryComponentBatteryUpdatedHandler:]
  -[_GCDefaultPhysicalDevice gamepadEventSource]
  -[_GCDefaultPhysicalDevice hapticCapabilityGraph]
  -[_GCDefaultPhysicalDevice supportsGamepad]
  -[_GCDefaultPhysicalDevice supportsPlayerIndicator]
  -[_GCDefaultPhysicalDevice supportsLight]
  -[_GCDefaultPhysicalDevice supportsHapticCapabilities]
  -[_GCDefaultPhysicalDevice supportsMotion]
  -[_GCDefaultPhysicalDevice supportsBattery]
  -[_GCDefaultPhysicalDevice lightServiceServer]
  -[_GCDefaultPhysicalDevice motionServiceServer]
  -[_GCDefaultPhysicalDevice updateBattery:isCharging:]


_GCHIDEventUIKitClient : _GCHIDEventSubject
  // instance methods
  -[_GCHIDEventUIKitClient init]
  -[_GCHIDEventUIKitClient dealloc]
  -[_GCHIDEventUIKitClient initWithQueue:]


GCSettingsXPCProxyClientEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointClient, GCControllerSettingsComponent, GCSettingsXPCProxyRemoteClientEndpointInterface>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? changedHandler
 @property  GCControllerSettings *settingsForBundleID
 @property  GCControllerSettings *settingsDefault

  // instance methods
  -[GCSettingsXPCProxyClientEndpoint invalidateConnection]
  -[GCSettingsXPCProxyClientEndpoint init]
  -[GCSettingsXPCProxyClientEndpoint changedHandler]
  -[GCSettingsXPCProxyClientEndpoint setChangedHandler:]
  -[GCSettingsXPCProxyClientEndpoint .cxx_destruct]
  -[GCSettingsXPCProxyClientEndpoint identifier]
  -[GCSettingsXPCProxyClientEndpoint setController:]
  -[GCSettingsXPCProxyClientEndpoint fetchObjectIdentifierWithReply:]
  -[GCSettingsXPCProxyClientEndpoint setRemoteEndpoint:connection:]
  -[GCSettingsXPCProxyClientEndpoint settingsForBundleID]
  -[GCSettingsXPCProxyClientEndpoint settingsDefault]
  -[GCSettingsXPCProxyClientEndpoint initWithIdentifier:initialValueForBundleID:defaultSettings:]
  -[GCSettingsXPCProxyClientEndpoint refreshSettings]
  -[GCSettingsXPCProxyClientEndpoint _remoteEndpointHasSetSettingsForBundleID:defaultSettings:]
  -[GCSettingsXPCProxyClientEndpoint newSettingsForBundleID:defaultSettings:]
  -[GCSettingsXPCProxyClientEndpoint observeChangesForSettings:]
  -[GCSettingsXPCProxyClientEndpoint stopObservingChangesForSettings:]


GCSettingsXPCProxyServerEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointServer, GCSettingsXPCProxyRemoteServerEndpointInterface>
 @property  <_GCControllerComponentDescription> *receiverDescription
 @property  <GCSettingsXPCProxyServerEndpointDelegate> *delegate
 @property  id userInfo
 @property  GCControllerSettings *settingsForBundleID
 @property  GCControllerSettings *settingsDefault
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCSettingsXPCProxyServerEndpoint invalidateConnection]
  -[GCSettingsXPCProxyServerEndpoint setUserInfo:]
  -[GCSettingsXPCProxyServerEndpoint .cxx_destruct]
  -[GCSettingsXPCProxyServerEndpoint identifier]
  -[GCSettingsXPCProxyServerEndpoint userInfo]
  -[GCSettingsXPCProxyServerEndpoint setDelegate:]
  -[GCSettingsXPCProxyServerEndpoint delegate]
  -[GCSettingsXPCProxyServerEndpoint fetchObjectIdentifierWithReply:]
  -[GCSettingsXPCProxyServerEndpoint acceptClient:onConnection:error:]
  -[GCSettingsXPCProxyServerEndpoint receiverDescription]
  -[GCSettingsXPCProxyServerEndpoint invalidateClient]
  -[GCSettingsXPCProxyServerEndpoint settingsForBundleID]
  -[GCSettingsXPCProxyServerEndpoint settingsDefault]
  -[GCSettingsXPCProxyServerEndpoint setSettingsDefault:]
  -[GCSettingsXPCProxyServerEndpoint initWithIdentifier:initialValueForBundleID:defaultSettings:]
  -[GCSettingsXPCProxyServerEndpoint setSettingsForBundleID:]
  -[GCSettingsXPCProxyServerEndpoint fetchSettingsWithReply:]
  -[GCSettingsXPCProxyServerEndpoint initWithInitialValueForBundleID:defaultSettings:]


GCSettingsXPCProxyClientEndpointDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCSettingsXPCProxyClientEndpointDescription supportsSecureCoding]

  // instance methods
  -[GCSettingsXPCProxyClientEndpointDescription init]
  -[GCSettingsXPCProxyClientEndpointDescription .cxx_destruct]
  -[GCSettingsXPCProxyClientEndpointDescription encodeWithCoder:]
  -[GCSettingsXPCProxyClientEndpointDescription identifier]
  -[GCSettingsXPCProxyClientEndpointDescription initWithCoder:]
  -[GCSettingsXPCProxyClientEndpointDescription materializeWithContext:]
  -[GCSettingsXPCProxyClientEndpointDescription initWithIdentifier:initialValueForBundleID:defaultSettings:]


_GCAppleTVRemoteMotionProfile : GCMotion
  // instance methods
  -[_GCAppleTVRemoteMotionProfile attitude]
  -[_GCAppleTVRemoteMotionProfile _tip]
  -[_GCAppleTVRemoteMotionProfile _tilt]
  -[_GCAppleTVRemoteMotionProfile .cxx_destruct]
  -[_GCAppleTVRemoteMotionProfile _setCompassEnabled:]
  -[_GCAppleTVRemoteMotionProfile gravity]
  -[_GCAppleTVRemoteMotionProfile rotationRate]
  -[_GCAppleTVRemoteMotionProfile hasAttitude]
  -[_GCAppleTVRemoteMotionProfile userAcceleration]
  -[_GCAppleTVRemoteMotionProfile setValueChangedHandler:]
  -[_GCAppleTVRemoteMotionProfile controller]
  -[_GCAppleTVRemoteMotionProfile initWithController:]
  -[_GCAppleTVRemoteMotionProfile valueChangedHandler]
  -[_GCAppleTVRemoteMotionProfile hasGravityAndUserAcceleration]
  -[_GCAppleTVRemoteMotionProfile _setAttitude:]
  -[_GCAppleTVRemoteMotionProfile _setRotationRate:]
  -[_GCAppleTVRemoteMotionProfile _setMotionLite:]
  -[_GCAppleTVRemoteMotionProfile hasRotationRate]
  -[_GCAppleTVRemoteMotionProfile hasAttitudeAndRotationRate]
  -[_GCAppleTVRemoteMotionProfile isEmulatedMicroGamepad]
  -[_GCAppleTVRemoteMotionProfile _setGravity:]
  -[_GCAppleTVRemoteMotionProfile _setUserAcceleration:]
  -[_GCAppleTVRemoteMotionProfile _startDeviceMotionUpdates]
  -[_GCAppleTVRemoteMotionProfile _stopDeviceMotionUpdates]
  -[_GCAppleTVRemoteMotionProfile _isUpdatingDeviceMotion]
  -[_GCAppleTVRemoteMotionProfile _pauseMotionUpdates:]
  -[_GCAppleTVRemoteMotionProfile setInternalValueChangedHandler:]
  -[_GCAppleTVRemoteMotionProfile internalValueChangedHandler]
  -[_GCAppleTVRemoteMotionProfile _motionLiteFusedHandler]
  -[_GCAppleTVRemoteMotionProfile _startDeviceMotionUpdatesHelper]
  -[_GCAppleTVRemoteMotionProfile _stopDeviceMotionUpdatesHelper]


_GCSonyDualShockControllerProfile : NSObject /usr/lib/libc++.1.dylib <_GCControllerProfile>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCSonyDualShockControllerProfile physicalDeviceGetHapticCapabilities:]
  +[_GCSonyDualShockControllerProfile physicalDevice:getLightWithReply:]
  +[_GCSonyDualShockControllerProfile logicalDeviceControllerProductCategory:]
  +[_GCSonyDualShockControllerProfile deviceManager:prepareLogicalDevice:]
  +[_GCSonyDualShockControllerProfile physicalDevice:getSensorsEnabledWithReply:]
  +[_GCSonyDualShockControllerProfile physicalDevice:setSensorsActive:]
  +[_GCSonyDualShockControllerProfile physicalDeviceGetHapticCapabilityGraph:]
  +[_GCSonyDualShockControllerProfile physicalDevice:getBatteryWithReply:]
  +[_GCSonyDualShockControllerProfile deviceManager]
  +[_GCSonyDualShockControllerProfile deviceManager:willPublishPhysicalDevice:]
  +[_GCSonyDualShockControllerProfile logicalDevice:makeControllerMotionWithIdentifier:]
  +[_GCSonyDualShockControllerProfile physicalDevice:setLight:]
  +[_GCSonyDualShockControllerProfile logicalDevice:makeControllerPhysicalInputProfileWithIdentifier:]
  +[_GCSonyDualShockControllerProfile physicalDeviceSupportsMotion:]


GCProductInformation : NSObject /usr/lib/libc++.1.dylib <GCControllerProductInfo, NSSecureCoding>
 @property  NSString *productCategory
 @property  NSString *vendorName
 @property  NSNumber *attachedToDevice
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCProductInformation supportsSecureCoding]

  // instance methods
  -[GCProductInformation init]
  -[GCProductInformation vendorName]
  -[GCProductInformation .cxx_destruct]
  -[GCProductInformation initWithIdentifier:]
  -[GCProductInformation encodeWithCoder:]
  -[GCProductInformation identifier]
  -[GCProductInformation setVendorName:]
  -[GCProductInformation setController:]
  -[GCProductInformation initWithCoder:]
  -[GCProductInformation productCategory]
  -[GCProductInformation setProductCategory:]
  -[GCProductInformation isAttachedToDevice]
  -[GCProductInformation setAttachedToDevice:]


_GCIPCRemoteOutgoingConnection : _GCIPCRemoteConnection <_GCIPCOutgoingConnection>
 @property  BOOL invalid

  // class methods
  +[_GCIPCRemoteOutgoingConnection sharedConnectionWorkloop]

  // instance methods
  -[_GCIPCRemoteOutgoingConnection redactedDescription]
  -[_GCIPCRemoteOutgoingConnection initWithConnection:]
  -[_GCIPCRemoteOutgoingConnection remoteProxy]
  -[_GCIPCRemoteOutgoingConnection remoteProxyWithErrorHandler:]
  -[_GCIPCRemoteOutgoingConnection synchronousRemoteProxyWithErrorHandler:]


_GCGamepadEventGamepadHIDAdapter : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSource>
 @property  <_GCHIDEventSource> *HIDEventSource
 @property  id HIDEventObservation
 @property  NSArray *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCGamepadEventGamepadHIDAdapter init]
  -[_GCGamepadEventGamepadHIDAdapter setObservers:]
  -[_GCGamepadEventGamepadHIDAdapter dealloc]
  -[_GCGamepadEventGamepadHIDAdapter .cxx_destruct]
  -[_GCGamepadEventGamepadHIDAdapter observers]
  -[_GCGamepadEventGamepadHIDAdapter initWithSource:service:]
  -[_GCGamepadEventGamepadHIDAdapter HIDEventSource]
  -[_GCGamepadEventGamepadHIDAdapter setHIDEventSource:]
  -[_GCGamepadEventGamepadHIDAdapter HIDEventObservation]
  -[_GCGamepadEventGamepadHIDAdapter setHIDEventObservation:]
  -[_GCGamepadEventGamepadHIDAdapter observeGamepadEvents:]


_GCGamepadEventGamepadHIDAdapterDescription : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCGamepadEventGamepadHIDAdapterDescription supportsSecureCoding]

  // instance methods
  -[_GCGamepadEventGamepadHIDAdapterDescription init]
  -[_GCGamepadEventGamepadHIDAdapterDescription .cxx_destruct]
  -[_GCGamepadEventGamepadHIDAdapterDescription encodeWithCoder:]
  -[_GCGamepadEventGamepadHIDAdapterDescription initWithCoder:]
  -[_GCGamepadEventGamepadHIDAdapterDescription initWithSource:service:]
  -[_GCGamepadEventGamepadHIDAdapterDescription materializeWithContext:]


_GCControllerManagerAppClient : _GCControllerManager <GCControllerServiceRemoteClientInterface, GCPlayerIndicatorXPCProxyServiceClient, GCPlayerIndicatorXPCProxyServiceRemoteClientInterface, GCLightXPCProxyServiceClient, GCLightXPCProxyServiceRemoteClientInterface, GCMotionXPCProxyServiceClient, GCMotionXPCProxyServiceRemoteClientInterface, GCBatteryXPCProxyServiceClient, GCBatteryXPCProxyServiceRemoteClientInterface, GCSettingsXPCProxyServiceClient, GCSettingsXPCProxyServiceRemoteClientInterface, _GCAppClientInterface>
 @property  <_GCIPCEndpointConnection> *playerIndicatorXPCProxyServiceConnection
 @property  <GCPlayerIndicatorXPCProxyServiceRemoteServerInterface> *playerIndicatorXPCProxyServiceRemoteServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCIPCEndpointConnection> *lightXPCProxyServiceConnection
 @property  <GCLightXPCProxyServiceRemoteServerInterface> *lightXPCProxyServiceRemoteServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCIPCEndpointConnection> *motionXPCProxyServiceConnection
 @property  <GCMotionXPCProxyServiceRemoteServerInterface> *motionXPCProxyServiceRemoteServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCIPCEndpointConnection> *batteryXPCProxyServiceConnection
 @property  <GCBatteryXPCProxyServiceRemoteServerInterface> *batteryXPCProxyServiceRemoteServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_GCIPCEndpointConnection> *settingsXPCProxyServiceConnection
 @property  <GCSettingsXPCProxyServiceRemoteServerInterface> *settingsXPCProxyServiceRemoteServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCControllerManagerAppClient _connectToDaemon]
  -[_GCControllerManagerAppClient _mostRecentlyActiveMicroGamepadIgnoring:]
  -[_GCControllerManagerAppClient _onqueue_addPendingController:]
  -[_GCControllerManagerAppClient currentController]
  -[_GCControllerManagerAppClient init]
  -[_GCControllerManagerAppClient isVideoRecordingAllowedForController:]
  -[_GCControllerManagerAppClient controllers]
  -[_GCControllerManagerAppClient setCurrentMicroGamepad:]
  -[_GCControllerManagerAppClient handleKeyboardEventAsFrontmostApp:]
  -[_GCControllerManagerAppClient currentExtendedGamepad]
  -[_GCControllerManagerAppClient CBApplicationDidBecomeActive]
  -[_GCControllerManagerAppClient playerIndicatorXPCProxyServiceRemoteServer]
  -[_GCControllerManagerAppClient _containsPublishedController:]
  -[_GCControllerManagerAppClient .cxx_destruct]
  -[_GCControllerManagerAppClient onScreenshotTriggeredWithController:]
  -[_GCControllerManagerAppClient mice]
  -[_GCControllerManagerAppClient _onqueue_unpublishController:]
  -[_GCControllerManagerAppClient setCurrentExtendedGamepad:]
  -[_GCControllerManagerAppClient open]
  -[_GCControllerManagerAppClient onHIDDeviceRemoved:]
  -[_GCControllerManagerAppClient currentMicroGamepad]
  -[_GCControllerManagerAppClient _mostRecentlyActiveControllerIgnoring:]
  -[_GCControllerManagerAppClient settingsXPCProxyServiceConnection]
  -[_GCControllerManagerAppClient isScreenShotAllowedForController:]
  -[_GCControllerManagerAppClient _onqueue_refreshPublishedControllers]
  -[_GCControllerManagerAppClient playerIndicatorXPCProxyServiceConnection]
  -[_GCControllerManagerAppClient onHIDDeviceAdded:]
  -[_GCControllerManagerAppClient settingsXPCProxyServiceRemoteServer]
  -[_GCControllerManagerAppClient _setCurrentMicroGamepad:]
  -[_GCControllerManagerAppClient unpublishControllersWithIdentifiers:]
  -[_GCControllerManagerAppClient setCurrentController:]
  -[_GCControllerManagerAppClient motionXPCProxyServiceConnection]
  -[_GCControllerManagerAppClient motionXPCProxyServiceRemoteServer]
  -[_GCControllerManagerAppClient _setCurrentController:]
  -[_GCControllerManagerAppClient batteryXPCProxyServiceConnection]
  -[_GCControllerManagerAppClient lightXPCProxyServiceConnection]
  -[_GCControllerManagerAppClient serviceClientForIPCService:]
  -[_GCControllerManagerAppClient batteryXPCProxyServiceRemoteServer]
  -[_GCControllerManagerAppClient publishControllers:]
  -[_GCControllerManagerAppClient handleMouseEventAsFrontmostApp:]
  -[_GCControllerManagerAppClient onVideoRecordingToggledWithController:]
  -[_GCControllerManagerAppClient _resumeDaemonConnection]
  -[_GCControllerManagerAppClient _setCurrentExtendedGamepad:]
  -[_GCControllerManagerAppClient lightXPCProxyServiceRemoteServer]
  -[_GCControllerManagerAppClient _mostRecentlyActiveExtendedGamepadIgnoring:]
  -[_GCControllerManagerAppClient _onqueue_publishController:]
  -[_GCControllerManagerAppClient updateCurrentControllerAndProfileForUnpublishedController:]
  -[_GCControllerManagerAppClient refreshControllers]


_GCMotionEventImpl : NSObject /usr/lib/libc++.1.dylib <_GCMotionEvent>
 @property  BOOL hasGyro
 @property  double gyroPitch
 @property  double gyroYaw
 @property  double gyroRoll
 @property  BOOL hasAccelerometer
 @property  double accelerometerX
 @property  double accelerometerY
 @property  double accelerometerZ
 @property  BOOL hasAttitude
 @property  double attitudeW
 @property  double attitudeX
 @property  double attitudeY
 @property  double attitudeZ
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCMotionEventImpl copyWithZone:]
  -[_GCMotionEventImpl hasAttitude]
  -[_GCMotionEventImpl hasGyro]
  -[_GCMotionEventImpl gyroYaw]
  -[_GCMotionEventImpl setHasGyro:]
  -[_GCMotionEventImpl setGyroPitch:]
  -[_GCMotionEventImpl setGyroYaw:]
  -[_GCMotionEventImpl setGyroRoll:]
  -[_GCMotionEventImpl setHasAccelerometer:]
  -[_GCMotionEventImpl setAccelerometerX:]
  -[_GCMotionEventImpl setAccelerometerY:]
  -[_GCMotionEventImpl setAccelerometerZ:]
  -[_GCMotionEventImpl setHasAttitude:]
  -[_GCMotionEventImpl setAttitudeX:]
  -[_GCMotionEventImpl setAttitudeY:]
  -[_GCMotionEventImpl setAttitudeZ:]
  -[_GCMotionEventImpl setAttitudeW:]
  -[_GCMotionEventImpl gyroPitch]
  -[_GCMotionEventImpl gyroRoll]
  -[_GCMotionEventImpl hasAccelerometer]
  -[_GCMotionEventImpl accelerometerX]
  -[_GCMotionEventImpl accelerometerY]
  -[_GCMotionEventImpl accelerometerZ]
  -[_GCMotionEventImpl attitudeW]
  -[_GCMotionEventImpl attitudeX]
  -[_GCMotionEventImpl attitudeY]
  -[_GCMotionEventImpl attitudeZ]
  -[_GCMotionEventImpl initWithMotionEvent:]


_GCGamepadEventImpl : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEvent>
 @property  float dpadUpValue
 @property  float dpadDownValue
 @property  float dpadLeftValue
 @property  float dpadRightValue
 @property  float buttonAValue
 @property  float buttonBValue
 @property  float buttonXValue
 @property  float buttonYValue
 @property  float buttonLeftShoulder
 @property  float buttonRightShoulder
 @property  float leftThumbstickUp
 @property  float leftThumbstickDown
 @property  float leftThumbstickLeft
 @property  float leftThumbstickRight
 @property  float rightThumbstickUp
 @property  float rightThumbstickDown
 @property  float rightThumbstickLeft
 @property  float rightThumbstickRight
 @property  float leftTrigger
 @property  float rightTrigger
 @property  float leftThumbstickButton
 @property  float rightThumbstickButton
 @property  float buttonHome
 @property  float buttonMenu
 @property  float buttonOptions
 @property  float buttonSpecial0
 @property  float buttonSpecial1
 @property  float buttonSpecial2
 @property  float buttonSpecial3
 @property  float buttonSpecial4
 @property  float buttonSpecial5
 @property  float buttonSpecial6
 @property  float buttonSpecial7
 @property  float buttonSpecial8
 @property  float buttonSpecial9
 @property  float buttonSpecial10
 @property  float buttonSpecial11
 @property  float buttonSpecial12
 @property  float buttonSpecial13
 @property  float buttonSpecial14
 @property  float buttonSpecial15
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCGamepadEventImpl copyWithZone:]
  -[_GCGamepadEventImpl setLeftTrigger:]
  -[_GCGamepadEventImpl leftTrigger]
  -[_GCGamepadEventImpl setRightTrigger:]
  -[_GCGamepadEventImpl rightTrigger]
  -[_GCGamepadEventImpl buttonOptions]
  -[_GCGamepadEventImpl buttonMenu]
  -[_GCGamepadEventImpl buttonHome]
  -[_GCGamepadEventImpl leftThumbstickButton]
  -[_GCGamepadEventImpl rightThumbstickButton]
  -[_GCGamepadEventImpl setButtonMenu:]
  -[_GCGamepadEventImpl hasValidValueForElement:]
  -[_GCGamepadEventImpl floatValueForElement:]
  -[_GCGamepadEventImpl dpadUpValue]
  -[_GCGamepadEventImpl setDpadUpValue:]
  -[_GCGamepadEventImpl dpadDownValue]
  -[_GCGamepadEventImpl setDpadDownValue:]
  -[_GCGamepadEventImpl dpadLeftValue]
  -[_GCGamepadEventImpl setDpadLeftValue:]
  -[_GCGamepadEventImpl dpadRightValue]
  -[_GCGamepadEventImpl setDpadRightValue:]
  -[_GCGamepadEventImpl buttonAValue]
  -[_GCGamepadEventImpl setButtonAValue:]
  -[_GCGamepadEventImpl buttonBValue]
  -[_GCGamepadEventImpl setButtonBValue:]
  -[_GCGamepadEventImpl buttonXValue]
  -[_GCGamepadEventImpl setButtonXValue:]
  -[_GCGamepadEventImpl buttonYValue]
  -[_GCGamepadEventImpl setButtonYValue:]
  -[_GCGamepadEventImpl buttonLeftShoulder]
  -[_GCGamepadEventImpl setButtonLeftShoulder:]
  -[_GCGamepadEventImpl buttonRightShoulder]
  -[_GCGamepadEventImpl setButtonRightShoulder:]
  -[_GCGamepadEventImpl leftThumbstickUp]
  -[_GCGamepadEventImpl setLeftThumbstickUp:]
  -[_GCGamepadEventImpl leftThumbstickDown]
  -[_GCGamepadEventImpl setLeftThumbstickDown:]
  -[_GCGamepadEventImpl leftThumbstickLeft]
  -[_GCGamepadEventImpl setLeftThumbstickLeft:]
  -[_GCGamepadEventImpl leftThumbstickRight]
  -[_GCGamepadEventImpl setLeftThumbstickRight:]
  -[_GCGamepadEventImpl rightThumbstickUp]
  -[_GCGamepadEventImpl setRightThumbstickUp:]
  -[_GCGamepadEventImpl rightThumbstickDown]
  -[_GCGamepadEventImpl setRightThumbstickDown:]
  -[_GCGamepadEventImpl rightThumbstickLeft]
  -[_GCGamepadEventImpl setRightThumbstickLeft:]
  -[_GCGamepadEventImpl rightThumbstickRight]
  -[_GCGamepadEventImpl setRightThumbstickRight:]
  -[_GCGamepadEventImpl setLeftThumbstickButton:]
  -[_GCGamepadEventImpl setRightThumbstickButton:]
  -[_GCGamepadEventImpl setButtonHome:]
  -[_GCGamepadEventImpl setButtonOptions:]
  -[_GCGamepadEventImpl buttonSpecial0]
  -[_GCGamepadEventImpl setButtonSpecial0:]
  -[_GCGamepadEventImpl buttonSpecial1]
  -[_GCGamepadEventImpl setButtonSpecial1:]
  -[_GCGamepadEventImpl buttonSpecial2]
  -[_GCGamepadEventImpl setButtonSpecial2:]
  -[_GCGamepadEventImpl buttonSpecial3]
  -[_GCGamepadEventImpl setButtonSpecial3:]
  -[_GCGamepadEventImpl buttonSpecial4]
  -[_GCGamepadEventImpl setButtonSpecial4:]
  -[_GCGamepadEventImpl buttonSpecial5]
  -[_GCGamepadEventImpl setButtonSpecial5:]
  -[_GCGamepadEventImpl buttonSpecial6]
  -[_GCGamepadEventImpl setButtonSpecial6:]
  -[_GCGamepadEventImpl buttonSpecial7]
  -[_GCGamepadEventImpl setButtonSpecial7:]
  -[_GCGamepadEventImpl buttonSpecial8]
  -[_GCGamepadEventImpl setButtonSpecial8:]
  -[_GCGamepadEventImpl buttonSpecial9]
  -[_GCGamepadEventImpl setButtonSpecial9:]
  -[_GCGamepadEventImpl buttonSpecial10]
  -[_GCGamepadEventImpl setButtonSpecial10:]
  -[_GCGamepadEventImpl buttonSpecial11]
  -[_GCGamepadEventImpl setButtonSpecial11:]
  -[_GCGamepadEventImpl buttonSpecial12]
  -[_GCGamepadEventImpl setButtonSpecial12:]
  -[_GCGamepadEventImpl buttonSpecial13]
  -[_GCGamepadEventImpl setButtonSpecial13:]
  -[_GCGamepadEventImpl buttonSpecial14]
  -[_GCGamepadEventImpl setButtonSpecial14:]
  -[_GCGamepadEventImpl buttonSpecial15]
  -[_GCGamepadEventImpl setButtonSpecial15:]
  -[_GCGamepadEventImpl initWithGameControllerInputs:validMask:]
  -[_GCGamepadEventImpl initWithGamepadEvent:]


_GCGamepadEventHID : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEvent>
 @property  ^{__IOHIDEvent=} event
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCGamepadEventHID copyWithZone:]
  -[_GCGamepadEventHID dealloc]
  -[_GCGamepadEventHID event]
  -[_GCGamepadEventHID initWithHIDEvent:]
  -[_GCGamepadEventHID hasValidValueForElement:]
  -[_GCGamepadEventHID floatValueForElement:]


_GCHIDEventIOKitClient : _GCHIDEventSubject
  // instance methods
  -[_GCHIDEventIOKitClient init]
  -[_GCHIDEventIOKitClient dealloc]
  -[_GCHIDEventIOKitClient initWithClient:queue:]


GCControllerMBDelegate : NSObject /usr/lib/libc++.1.dylib
 @property  @? completionHandler

  // instance methods
  -[GCControllerMBDelegate stopScan]
  -[GCControllerMBDelegate dealloc]
  -[GCControllerMBDelegate .cxx_destruct]
  -[GCControllerMBDelegate startScan]
  -[GCControllerMBDelegate fireCompletionHandler]
  -[GCControllerMBDelegate completionHandler]
  -[GCControllerMBDelegate setCompletionHandler:]
  -[GCControllerMBDelegate scanTimeout:]


GCControllerButtonInput : GCControllerElement
 @property  BOOL touchedAndValueDistinct
 @property  BOOL nonAnalog
 @property  float deadzone
 @property  @? valueChangedHandler
 @property  @? pressedChangedHandler
 @property  @? touchedChangedHandler
 @property  float value
 @property  BOOL pressed
 @property  BOOL touched

  // instance methods
  -[GCControllerButtonInput .cxx_destruct]
  -[GCControllerButtonInput _setValue:]
  -[GCControllerButtonInput setValue:]
  -[GCControllerButtonInput setValueChangedHandler:]
  -[GCControllerButtonInput isPressed]
  -[GCControllerButtonInput value]
  -[GCControllerButtonInput isAnalog]
  -[GCControllerButtonInput _setValue:queue:]
  -[GCControllerButtonInput valueChangedHandler]
  -[GCControllerButtonInput getAndResetTimesPressed]
  -[GCControllerButtonInput initWithDescriptionName:]
  -[GCControllerButtonInput setNonAnalog:]
  -[GCControllerButtonInput deadzone]
  -[GCControllerButtonInput nonAnalog]
  -[GCControllerButtonInput _setTouched:queue:]
  -[GCControllerButtonInput _setTouched:]
  -[GCControllerButtonInput setDeadzone:]
  -[GCControllerButtonInput pressedChangedHandler]
  -[GCControllerButtonInput setPressedChangedHandler:]
  -[GCControllerButtonInput touchedChangedHandler]
  -[GCControllerButtonInput setTouchedChangedHandler:]
  -[GCControllerButtonInput isTouched]
  -[GCControllerButtonInput areTouchedAndValueDistinct]
  -[GCControllerButtonInput setTouchedAndValueDistinct:]


_GCCControllerHIDServiceInfo : NSObject /usr/lib/libc++.1.dylib <_GCImplicitIPCObject, NSCopying>
 @property  NSData *inputData
 @property  BOOL isPreallocatedSiriRemote
 @property  ^{__IOHIDServiceClient=} service
 @property  NSNumber *registryID
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCCControllerHIDServiceInfo initWithService:]
  -[_GCCControllerHIDServiceInfo redactedDescription]
  -[_GCCControllerHIDServiceInfo copyWithZone:]
  -[_GCCControllerHIDServiceInfo init]
  -[_GCCControllerHIDServiceInfo dealloc]
  -[_GCCControllerHIDServiceInfo .cxx_destruct]
  -[_GCCControllerHIDServiceInfo name]
  -[_GCCControllerHIDServiceInfo registryID]
  -[_GCCControllerHIDServiceInfo identifier]
  -[_GCCControllerHIDServiceInfo service]
  -[_GCCControllerHIDServiceInfo isEqual:]
  -[_GCCControllerHIDServiceInfo inputData]
  -[_GCCControllerHIDServiceInfo setInputData:]
  -[_GCCControllerHIDServiceInfo isEqualToHIDServiceInfo:]
  -[_GCCControllerHIDServiceInfo isPreallocatedSiriRemote]
  -[_GCCControllerHIDServiceInfo setIsPreallocatedSiriRemote:]


_GCCControllerHIDServiceInfoDescription : _GCImplicitIPCObjectDescription
  // instance methods
  -[_GCCControllerHIDServiceInfoDescription materializeWithContext:]
  -[_GCCControllerHIDServiceInfoDescription initWithServiceInfo:]


_GCIPCRemoteConnection : NSObject /usr/lib/libc++.1.dylib <_GCIPCConnection>
 @property  NSXPCConnection *connection
 @property  NSArray *interruptionHandlers
 @property  NSArray *invalidationHandlers
 @property  BOOL invalid

  // instance methods
  -[_GCIPCRemoteConnection redactedDescription]
  -[_GCIPCRemoteConnection suspend]
  -[_GCIPCRemoteConnection isInvalid]
  -[_GCIPCRemoteConnection init]
  -[_GCIPCRemoteConnection resume]
  -[_GCIPCRemoteConnection .cxx_destruct]
  -[_GCIPCRemoteConnection setInvalidationHandlers:]
  -[_GCIPCRemoteConnection setConnection:]
  -[_GCIPCRemoteConnection initWithConnection:]
  -[_GCIPCRemoteConnection addInterruptionHandler:]
  -[_GCIPCRemoteConnection scheduleSendBarrierBlock:]
  -[_GCIPCRemoteConnection isEqual:]
  -[_GCIPCRemoteConnection invalidationHandlers]
  -[_GCIPCRemoteConnection connection]
  -[_GCIPCRemoteConnection invalidate]
  -[_GCIPCRemoteConnection interruptionHandlers]
  -[_GCIPCRemoteConnection addInvalidationHandler:]
  -[_GCIPCRemoteConnection remoteProxy]
  -[_GCIPCRemoteConnection remoteProxyWithErrorHandler:]
  -[_GCIPCRemoteConnection synchronousRemoteProxyWithErrorHandler:]
  -[_GCIPCRemoteConnection setInterruptionHandlers:]
  -[_GCIPCRemoteConnection isEqualToConnection:]


GCControllerMetaDefaultsObserver : NSObject /usr/lib/libc++.1.dylib
 @property  NSUserDefaults *metaDefaults

  // instance methods
  -[GCControllerMetaDefaultsObserver init]
  -[GCControllerMetaDefaultsObserver dealloc]
  -[GCControllerMetaDefaultsObserver .cxx_destruct]
  -[GCControllerMetaDefaultsObserver observeValueForKeyPath:ofObject:change:context:]
  -[GCControllerMetaDefaultsObserver metaDefaults]


GCControllerSettings : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL customized
 @property  unsigned long settingsID
 @property  <NSCopying><NSObject><NSSecureCoding> *uniqueIdentifier
 @property  NSString *bundleIdentifier
 @property  NSDictionary *elementMappings
 @property  BOOL hapticsEnabled
 @property  BOOL screenShotEnabled
 @property  BOOL videoRecordingEnabled
 @property  BOOL customizationsEnabled
 @property  BOOL serialized
 @property  @? settingsChangedHandler

  // class methods
  +[GCControllerSettings controllerSettingsCustomizedChangedHandlers]
  +[GCControllerSettings supportsSecureCoding]
  +[GCControllerSettings settingsCustomizedForController:forBundleIdentifier:]
  +[GCControllerSettings settingsCustomizedForBundleIdentifier:]
  +[GCControllerSettings settingsDispatchQueue]
  +[GCControllerSettings setSettingsExist:forBundleIdentifier:]
  +[GCControllerSettings unregisterSettingsCustomizedHandlerForController:forKey:]
  +[GCControllerSettings unregisterSettingsCustomizedHandlerForKey:]
  +[GCControllerSettings registerSettingsCustomizedHandler:forController:forKey:]
  +[GCControllerSettings setSettingsExist:forController:forBundleIdentifier:]
  +[GCControllerSettings settingsCustomizedChangedHandlers]
  +[GCControllerSettings metaDefaults]
  +[GCControllerSettings registerSettingsCustomizedHandler:forKey:]

  // instance methods
  -[GCControllerSettings settingsID]
  -[GCControllerSettings setSerialized:]
  -[GCControllerSettings dealloc]
  -[GCControllerSettings .cxx_destruct]
  -[GCControllerSettings defaultValues]
  -[GCControllerSettings serialized]
  -[GCControllerSettings encodeWithCoder:]
  -[GCControllerSettings uniqueIdentifier]
  -[GCControllerSettings setVideoRecordingEnabled:]
  -[GCControllerSettings hapticsEnabled]
  -[GCControllerSettings observeValueForKeyPath:ofObject:change:context:]
  -[GCControllerSettings videoRecordingEnabled]
  -[GCControllerSettings bundleIdentifier]
  -[GCControllerSettings setSettingsID:]
  -[GCControllerSettings setHapticsEnabled:]
  -[GCControllerSettings initWithCoder:]
  -[GCControllerSettings setSettingsChangedHandler:]
  -[GCControllerSettings initWithBundleIdentifier:forControllerIdentifier:]
  -[GCControllerSettings _updateControllerReference:]
  -[GCControllerSettings customizationsEnabled]
  -[GCControllerSettings screenShotEnabled]
  -[GCControllerSettings initWithBundleIdentifier:forController:]
  -[GCControllerSettings registerForSettingsCustomized]
  -[GCControllerSettings initializeUserDefaults]
  -[GCControllerSettings mappingKeyForElement:]
  -[GCControllerSettings setCustomized:]
  -[GCControllerSettings unregisterForSettingsCustomized]
  -[GCControllerSettings initializeElementMappings]
  -[GCControllerSettings saveBool:forKey:]
  -[GCControllerSettings staticDefaultValues]
  -[GCControllerSettings suiteNameForBundleIdentifier:]
  -[GCControllerSettings observeDefaultsKeyPaths:]
  -[GCControllerSettings populateElementSettings]
  -[GCControllerSettings observeDefaultsKeyPath:options:context:]
  -[GCControllerSettings mappingForElement:]
  -[GCControllerSettings saveObject:forKey:]
  -[GCControllerSettings deleteObjectForKey:]
  -[GCControllerSettings elementSettingForKey:]
  -[GCControllerSettings refreshSettingsExist]
  -[GCControllerSettings initForController:]
  -[GCControllerSettings setScreenShotEnabled:]
  -[GCControllerSettings setCustomizationsEnabled:]
  -[GCControllerSettings mappingForButton:]
  -[GCControllerSettings mappingForDirectionPad:]
  -[GCControllerSettings mappingForTouchpad:]
  -[GCControllerSettings setMappingForElement:toElement:]
  -[GCControllerSettings settingsForElement:]
  -[GCControllerSettings eraseAllSettings]
  -[GCControllerSettings restoreElementMappingToDefault]
  -[GCControllerSettings elementMappings]
  -[GCControllerSettings customized]
  -[GCControllerSettings settingsChangedHandler]


_GCObservation : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_GCObservation dealloc]
  -[_GCObservation .cxx_destruct]
  -[_GCObservation initWithCleanupHandler:]


GCMicroGamepadSnapshot : GCMicroGamepad
 @property  NSData *snapshotData

  // instance methods
  -[GCMicroGamepadSnapshot init]
  -[GCMicroGamepadSnapshot .cxx_destruct]
  -[GCMicroGamepadSnapshot snapshotData]
  -[GCMicroGamepadSnapshot initWithController:snapshotData:]
  -[GCMicroGamepadSnapshot setSnapshotData:]
  -[GCMicroGamepadSnapshot initWithSnapshotData:]
  -[GCMicroGamepadSnapshot supportsDpadTaps]


_GCAppClientProxy : NSObject /usr/lib/libc++.1.dylib <_GCDeviceClient, GCControllerServiceRemoteServerInterface, GCPlayerIndicatorXPCProxyServiceRemoteServerInterface, GCLightXPCProxyServiceRemoteServerInterface, GCMotionXPCProxyServiceRemoteServerInterface, GCBatteryXPCProxyServiceRemoteServerInterface, GCSettingsXPCProxyServiceRemoteServerInterface, _GCAppServerInterface>
 @property  BOOL invalid
 @property  NSString *bundleIdentifier
 @property  <_GCIPCObjectRegistry> *IPCObjectRegistry
 @property  <_GCIPCServiceRegistry> *IPCServiceRegistry
 @property  NSArray *invalidationHandlers

  // class methods
  +[_GCAppClientProxy clientProxyWithConnection:server:]

  // instance methods
  -[_GCAppClientProxy redactedDescription]
  -[_GCAppClientProxy playerIndicatorXPCProxyServiceClientEndpointConnect:reply:]
  -[_GCAppClientProxy onVideoRecordingStart:]
  -[_GCAppClientProxy isInvalid]
  -[_GCAppClientProxy connectToBatteryXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy init]
  -[_GCAppClientProxy fetchControllerDescriptionsWithReply:]
  -[_GCAppClientProxy dealloc]
  -[_GCAppClientProxy .cxx_destruct]
  -[_GCAppClientProxy IPCServiceRegistry]
  -[_GCAppClientProxy lightXPCProxyServiceClientEndpointConnect:reply:]
  -[_GCAppClientProxy IPCObjectRegistry]
  -[_GCAppClientProxy setInvalidationHandlers:]
  -[_GCAppClientProxy _invalidate]
  -[_GCAppClientProxy connectToLightXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy connectToControllerServiceWithClient:reply:]
  -[_GCAppClientProxy pingWithReply:]
  -[_GCAppClientProxy connectToSettingsXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy batteryXPCProxyServiceClientEndpointConnect:reply:]
  -[_GCAppClientProxy connectToMotionXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy takeScreenshotWithReply:]
  -[_GCAppClientProxy generateURLFor:optionalFolder:withReply:]
  -[_GCAppClientProxy observeValueForKeyPath:ofObject:change:context:]
  -[_GCAppClientProxy _initWithConnection:server:]
  -[_GCAppClientProxy invalidationHandlers]
  -[_GCAppClientProxy settingsXPCProxyServiceClientEndpointConnect:reply:]
  -[_GCAppClientProxy onVideoRecordingStopWithURL:reply:]
  -[_GCAppClientProxy bundleIdentifier]
  -[_GCAppClientProxy connectToPhotoVideoXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy connectToPlayerIndicatorXPCProxyServiceWithClient:reply:]
  -[_GCAppClientProxy addInvalidationHandler:]
  -[_GCAppClientProxy motionXPCProxyServiceClientEndpointConnect:reply:]


_GCGamepadEventFusionConfig : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned long sourceCount

  // class methods
  +[_GCGamepadEventFusionConfig supportsSecureCoding]

  // instance methods
  -[_GCGamepadEventFusionConfig init]
  -[_GCGamepadEventFusionConfig dealloc]
  -[_GCGamepadEventFusionConfig initWithSourceCount:]
  -[_GCGamepadEventFusionConfig sourceCount]
  -[_GCGamepadEventFusionConfig encodeWithCoder:]
  -[_GCGamepadEventFusionConfig initWithCoder:]
  -[_GCGamepadEventFusionConfig setPass:element:forSourceAtIndex:]
  -[_GCGamepadEventFusionConfig shouldPassElement:forSourceAtIndex:]
  -[_GCGamepadEventFusionConfig enumeratePassedElementsForSourceAtIndex:withBlock:]


_GCGamepadEventFusion : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSource>
 @property  NSArray *observations
 @property  NSArray *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCGamepadEventFusion init]
  -[_GCGamepadEventFusion setObservers:]
  -[_GCGamepadEventFusion dealloc]
  -[_GCGamepadEventFusion .cxx_destruct]
  -[_GCGamepadEventFusion observers]
  -[_GCGamepadEventFusion setObservations:]
  -[_GCGamepadEventFusion observations]
  -[_GCGamepadEventFusion observeGamepadEvents:]
  -[_GCGamepadEventFusion initWithConfiguration:sources:]


_GCGamepadEventFusionDescription : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCGamepadEventFusionDescription supportsSecureCoding]

  // instance methods
  -[_GCGamepadEventFusionDescription init]
  -[_GCGamepadEventFusionDescription .cxx_destruct]
  -[_GCGamepadEventFusionDescription encodeWithCoder:]
  -[_GCGamepadEventFusionDescription initWithCoder:]
  -[_GCGamepadEventFusionDescription materializeWithContext:]
  -[_GCGamepadEventFusionDescription initWithConfiguration:sources:]


GCKeyboard : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, GCDeviceLegacy, GCDevice>
 @property  GCController *proxyController
 @property  GCPhysicalInputProfile<GCNamedProfile> *profile
 @property  NSString *uniqueIdentifier
 @property  NSArray *hidServices
 @property  unsigned int service
 @property  NSString *physicalDeviceUniqueID
 @property  unsigned long deviceHash
 @property  NSString *debugName
 @property  BOOL forwarded
 @property  BOOL allHIDDevicesConnected
 @property  BOOL published
 @property  NSString *productCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCController *proxyController
 @property  GCKeyboardInput *keyboardInput
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  NSString *vendorName
 @property  NSString *productCategory
 @property  GCPhysicalInputProfile *physicalInputProfile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCKeyboard supportsSecureCoding]
  +[GCKeyboard __setLogger__:]
  +[GCKeyboard __open__]
  +[GCKeyboard __openXPC_and_CBApplicationDidBecomeActive__]
  +[GCKeyboard coalescedKeyboard]
  +[GCKeyboard keyboardWithKeyboardInput]

  // instance methods
  -[GCKeyboard debugName]
  -[GCKeyboard setUniqueIdentifier:]
  -[GCKeyboard handlerQueue]
  -[GCKeyboard vendorName]
  -[GCKeyboard keyboardInput]
  -[GCKeyboard deviceHash]
  -[GCKeyboard isPublished]
  -[GCKeyboard .cxx_destruct]
  -[GCKeyboard setHandlerQueue:]
  -[GCKeyboard encodeWithCoder:]
  -[GCKeyboard uniqueIdentifier]
  -[GCKeyboard service]
  -[GCKeyboard setVendorName:]
  -[GCKeyboard setPublished:]
  -[GCKeyboard handleEvent:]
  -[GCKeyboard physicalDeviceUniqueID]
  -[GCKeyboard setDebugName:]
  -[GCKeyboard setForwarded:]
  -[GCKeyboard profile]
  -[GCKeyboard setProfile:]
  -[GCKeyboard sampleRate]
  -[GCKeyboard initWithCoder:]
  -[GCKeyboard productCategory]
  -[GCKeyboard isForwarded]
  -[GCKeyboard hidServices]
  -[GCKeyboard physicalInputProfile]
  -[GCKeyboard setProxyController:]
  -[GCKeyboard proxyController]
  -[GCKeyboard proxyController]
  -[GCKeyboard initWithServiceRef:]
  -[GCKeyboard setPhysicalDeviceUniqueID:]
  -[GCKeyboard areAllHIDDevicesConnected]
  -[GCKeyboard setAllHIDDevicesConnected:]
  -[GCKeyboard _legacy_vendorName]
  -[GCKeyboard _legacy_productCategory]
  -[GCKeyboard _legacy_isEqualToController:]
  -[GCKeyboard _legacy_description]
  -[GCKeyboard createInputBufferForDevice:withSize:]
  -[GCKeyboard addServiceRefsWithDevice:]
  -[GCKeyboard addServiceRef:]
  -[GCKeyboard hasServiceRef:]
  -[GCKeyboard removeServiceRef:]
  -[GCKeyboard clearServiceRef]
  -[GCKeyboard supportsMotionLite]
  -[GCKeyboard _legacy_playerIndex]
  -[GCKeyboard _legacy_setPlayerIndex:]
  -[GCKeyboard _legacy_physicalInputProfileName]
  -[GCKeyboard _legacy_physicalInputProfile]
  -[GCKeyboard _legacy_isAttachedToDevice]
  -[GCKeyboard initWithProxyController:]


GCDeviceLight : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  GCColor *color

  // class methods
  +[GCDeviceLight supportsSecureCoding]

  // instance methods
  -[GCDeviceLight .cxx_destruct]
  -[GCDeviceLight initWithColor:]
  -[GCDeviceLight color]
  -[GCDeviceLight encodeWithCoder:]
  -[GCDeviceLight setColor:]
  -[GCDeviceLight initWithCoder:]


_GCGamepadEventKeyboardEventAdapterConfig : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
  // class methods
  +[_GCGamepadEventKeyboardEventAdapterConfig supportsSecureCoding]

  // instance methods
  -[_GCGamepadEventKeyboardEventAdapterConfig init]
  -[_GCGamepadEventKeyboardEventAdapterConfig encodeWithCoder:]
  -[_GCGamepadEventKeyboardEventAdapterConfig initWithCoder:]
  -[_GCGamepadEventKeyboardEventAdapterConfig mapUsagePage:usage:toGamepadElement:]
  -[_GCGamepadEventKeyboardEventAdapterConfig gamepadElementForUsagePage:usage:]


_GCGamepadEventKeyboardEventAdapter : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSource>
 @property  NSArray *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_GCGamepadEventKeyboardEventAdapter init]
  -[_GCGamepadEventKeyboardEventAdapter setObservers:]
  -[_GCGamepadEventKeyboardEventAdapter dealloc]
  -[_GCGamepadEventKeyboardEventAdapter .cxx_destruct]
  -[_GCGamepadEventKeyboardEventAdapter observers]
  -[_GCGamepadEventKeyboardEventAdapter observeGamepadEvents:]
  -[_GCGamepadEventKeyboardEventAdapter initWithConfiguration:source:]


_GCGamepadEventKeyboardEventAdapterDescription : NSObject /usr/lib/libc++.1.dylib <_GCGamepadEventSourceDescription>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCGamepadEventKeyboardEventAdapterDescription supportsSecureCoding]

  // instance methods
  -[_GCGamepadEventKeyboardEventAdapterDescription init]
  -[_GCGamepadEventKeyboardEventAdapterDescription .cxx_destruct]
  -[_GCGamepadEventKeyboardEventAdapterDescription encodeWithCoder:]
  -[_GCGamepadEventKeyboardEventAdapterDescription initWithCoder:]
  -[_GCGamepadEventKeyboardEventAdapterDescription materializeWithContext:]
  -[_GCGamepadEventKeyboardEventAdapterDescription initWithConfiguration:source:]


_GCHapticClientConnection : _GCIPCRemoteIncomingConnection
 @property  <CHHapticServerInterface> *server

  // instance methods
  -[_GCHapticClientConnection server]
  -[_GCHapticClientConnection setServer:]
  -[_GCHapticClientConnection initWithConnection:fromProcess:]


GCDeviceHaptics : NSObject /usr/lib/libc++.1.dylib
 @property  GCController *controller
 @property  GCHapticCapabilityGraph *capabilityGraph
 @property  NSMutableSet *supportedLocalities
 @property  GCController *controller

  // instance methods
  -[GCDeviceHaptics .cxx_destruct]
  -[GCDeviceHaptics controller]
  -[GCDeviceHaptics setController:]
  -[GCDeviceHaptics capabilityGraph]
  -[GCDeviceHaptics initWithCapabilityGraph:]
  -[GCDeviceHaptics createEngineWithLocality:]
  -[GCDeviceHaptics supportedLocalities]
  -[GCDeviceHaptics setSupportedLocalities:]


GCControllerElementSettings : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL customized
 @property  NSString *mappingKey
 @property  @? changedHandler
 @property  BOOL invertHorizontally
 @property  BOOL invertVertically
 @property  BOOL swapAxes

  // class methods
  +[GCControllerElementSettings supportsSecureCoding]

  // instance methods
  -[GCControllerElementSettings setDefaultValues]
  -[GCControllerElementSettings changedHandler]
  -[GCControllerElementSettings setChangedHandler:]
  -[GCControllerElementSettings .cxx_destruct]
  -[GCControllerElementSettings setDictionaryRepresentation:]
  -[GCControllerElementSettings encodeWithCoder:]
  -[GCControllerElementSettings dictionaryRepresentation]
  -[GCControllerElementSettings initWithCoder:]
  -[GCControllerElementSettings initWithElementKey:]
  -[GCControllerElementSettings mappingKey]
  -[GCControllerElementSettings isCustomized]
  -[GCControllerElementSettings setDictionaryRepresentation:fromCoder:]
  -[GCControllerElementSettings setInvertVertically:]
  -[GCControllerElementSettings setInvertHorizontally:]
  -[GCControllerElementSettings setSwapAxes:]
  -[GCControllerElementSettings invertHorizontally]
  -[GCControllerElementSettings invertVertically]
  -[GCControllerElementSettings swapAxes]


_GCIPCRemoteProcess : NSObject /usr/lib/libc++.1.dylib <_GCIPCProcess>
 @property  NSArray *connections
 @property  NSMutableSet *connectionInvalidationRegistrations
 @property  {?=[8I]} auditToken
 @property  int auditSessionIdentifier
 @property  int processIdentifier
 @property  unsigned int effectiveUserIdentifier
 @property  unsigned int effectiveGroupIdentifier
 @property  NSString *bundleIdentifier

  // instance methods
  -[_GCIPCRemoteProcess connections]
  -[_GCIPCRemoteProcess redactedDescription]
  -[_GCIPCRemoteProcess setConnections:]
  -[_GCIPCRemoteProcess auditToken]
  -[_GCIPCRemoteProcess init]
  -[_GCIPCRemoteProcess processIdentifier]
  -[_GCIPCRemoteProcess .cxx_destruct]
  -[_GCIPCRemoteProcess auditSessionIdentifier]
  -[_GCIPCRemoteProcess effectiveGroupIdentifier]
  -[_GCIPCRemoteProcess effectiveUserIdentifier]
  -[_GCIPCRemoteProcess initWithConnection:]
  -[_GCIPCRemoteProcess connectionInvalidationRegistrations]
  -[_GCIPCRemoteProcess setConnectionInvalidationRegistrations:]
  -[_GCIPCRemoteProcess addConnection:]
  -[_GCIPCRemoteProcess isEqual:]
  -[_GCIPCRemoteProcess bundleIdentifier]
  -[_GCIPCRemoteProcess isEqualToProcess:]


_GCImplicitIPCObjectDescription : NSObject /usr/lib/libc++.1.dylib <_GCIPCObjectDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCImplicitIPCObjectDescription supportsSecureCoding]

  // instance methods
  -[_GCImplicitIPCObjectDescription init]
  -[_GCImplicitIPCObjectDescription .cxx_destruct]
  -[_GCImplicitIPCObjectDescription initWithIdentifier:]
  -[_GCImplicitIPCObjectDescription encodeWithCoder:]
  -[_GCImplicitIPCObjectDescription identifier]
  -[_GCImplicitIPCObjectDescription initWithCoder:]
  -[_GCImplicitIPCObjectDescription materializeWithContext:]


GCKeyboardInput : GCPhysicalInputProfile
 @property  @? keyChangedHandler
 @property  BOOL anyKeyPressed

  // instance methods
  -[GCKeyboardInput commonInit]
  -[GCKeyboardInput handlerQueue]
  -[GCKeyboardInput init]
  -[GCKeyboardInput .cxx_destruct]
  -[GCKeyboardInput name]
  -[GCKeyboardInput appDidBecomeActive]
  -[GCKeyboardInput handleEvent:]
  -[GCKeyboardInput initWithController:]
  -[GCKeyboardInput productCategory]
  -[GCKeyboardInput appWillResignActive]
  -[GCKeyboardInput hasButton:]
  -[GCKeyboardInput buttonForKeyCode:]
  -[GCKeyboardInput setElementValuesFromKeyboardInput:]
  -[GCKeyboardInput shouldFilterInternalEvent:]
  -[GCKeyboardInput setKeyValue:down:]
  -[GCKeyboardInput isAnyKeyPressed]
  -[GCKeyboardInput setStateFromKeyboardInput:]
  -[GCKeyboardInput keyChangedHandler]
  -[GCKeyboardInput setKeyChangedHandler:]


GCNotificationOptions : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *title
 @property  NSString *body
 @property  NSString *categoryID
 @property  NSString *threadID
 @property  NSURL *defaultActionURL

  // instance methods
  -[GCNotificationOptions setCategoryID:]
  -[GCNotificationOptions .cxx_destruct]
  -[GCNotificationOptions setDefaultActionURL:]
  -[GCNotificationOptions setBody:]
  -[GCNotificationOptions setTitle:]
  -[GCNotificationOptions threadID]
  -[GCNotificationOptions defaultActionURL]
  -[GCNotificationOptions title]
  -[GCNotificationOptions body]
  -[GCNotificationOptions categoryID]
  -[GCNotificationOptions setThreadID:]


GCReplayNotificationOptions : GCNotificationOptions
  // instance methods
  -[GCReplayNotificationOptions initRecordingStart]


GCNotificationManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[GCNotificationManager sharedInstance]

  // instance methods
  -[GCNotificationManager init]
  -[GCNotificationManager .cxx_destruct]
  -[GCNotificationManager requestNotification:withReply:]
  -[GCNotificationManager requestNotificationImpl:withReply:]


GCLightbarColor : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  float red
 @property  float green
 @property  float blue
 @property  float alpha

  // class methods
  +[GCLightbarColor supportsSecureCoding]

  // instance methods
  -[GCLightbarColor blue]
  -[GCLightbarColor red]
  -[GCLightbarColor initWithRed:green:blue:alpha:]
  -[GCLightbarColor alpha]
  -[GCLightbarColor encodeWithCoder:]
  -[GCLightbarColor setGreen:]
  -[GCLightbarColor green]
  -[GCLightbarColor setBlue:]
  -[GCLightbarColor setRed:]
  -[GCLightbarColor setAlpha:]
  -[GCLightbarColor initWithCoder:]


GCGamepadUserDefaults : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  NSString *uniqueIdentifier
 @property  GCLightbarColor *lightbarColor

  // class methods
  +[GCGamepadUserDefaults supportsSecureCoding]
  +[GCGamepadUserDefaults nsUserDefaults]
  +[GCGamepadUserDefaults defaultsForControllerIdentifier:]

  // instance methods
  -[GCGamepadUserDefaults save]
  -[GCGamepadUserDefaults initWithUniqueIdentifier:]
  -[GCGamepadUserDefaults .cxx_destruct]
  -[GCGamepadUserDefaults encodeWithCoder:]
  -[GCGamepadUserDefaults uniqueIdentifier]
  -[GCGamepadUserDefaults initWithCoder:]
  -[GCGamepadUserDefaults lightbarColor]
  -[GCGamepadUserDefaults setLightbarColor:]


_GCHapticServerManager : NSObject /usr/lib/libc++.1.dylib
 @property  NSMutableDictionary *clients
 @property  BOOL activeEvents
 @property  NSObject<OS_dispatch_queue> *runloopQueue

  // class methods
  +[_GCHapticServerManager sharedInstance]

  // instance methods
  -[_GCHapticServerManager clients]
  -[_GCHapticServerManager init]
  -[_GCHapticServerManager .cxx_destruct]
  -[_GCHapticServerManager setClients:]
  -[_GCHapticServerManager notifyPlayerNoLongerRetained:]
  -[_GCHapticServerManager scheduleCommand:]
  -[_GCHapticServerManager logicalDeviceWasUnregistered:]
  -[_GCHapticServerManager removeHapticClient:]
  -[_GCHapticServerManager spawnInputThread]
  -[_GCHapticServerManager enterRunloop]
  -[_GCHapticServerManager readListCommand:client:renderTime:]
  -[_GCHapticServerManager setActiveEvents:]
  -[_GCHapticServerManager activeEvents]
  -[_GCHapticServerManager readClientDataForStartTime:endTime:]
  -[_GCHapticServerManager playersHaveImpendingCommandsForStartTime:endTime:]
  -[_GCHapticServerManager processScheduledCommandsForStartTime:endTime:]
  -[_GCHapticServerManager processActiveEventsForStartTime:endTime:]
  -[_GCHapticServerManager identifyCompletedClients]
  -[_GCHapticServerManager readParamCurveListCommand:client:]
  -[_GCHapticServerManager acceptNewConnection:fromHapticsEnabledApp:]
  -[_GCHapticServerManager hapticClientProxyInitialized:]
  -[_GCHapticServerManager __onqueue_reserveChannels:forClient:]
  -[_GCHapticServerManager runloopQueue]


_GCHapticClientProxy : NSObject /usr/lib/libc++.1.dylib <CHHapticServerInterface>
 @property  BOOL invalid
 @property  NSMutableDictionary *hapticPlayers
 @property  NSArray *invalidationHandlers
 @property  unsigned long clientID
 @property  NSString *bundleIdentifier
 @property  <NSCopying><NSObject><NSSecureCoding> *identifier
 @property  NSString *controllerProductCategory
 @property  NSArray *actuators
 @property  BOOL complete
 @property  BOOL mockClient
 @property  unsigned int applicationState
 @property  int totalPlayers
 @property  double totalLifetimeInSeconds
 @property  double activeLifetimeInSeconds

  // class methods
  +[_GCHapticClientProxy clientProxyWithConnection:server:clientID:]

  // instance methods
  -[_GCHapticClientProxy running]
  -[_GCHapticClientProxy complete]
  -[_GCHapticClientProxy clientID]
  -[_GCHapticClientProxy isInvalid]
  -[_GCHapticClientProxy init]
  -[_GCHapticClientProxy .cxx_construct]
  -[_GCHapticClientProxy dealloc]
  -[_GCHapticClientProxy setClientID:]
  -[_GCHapticClientProxy isMuted]
  -[_GCHapticClientProxy .cxx_destruct]
  -[_GCHapticClientProxy setComplete:]
  -[_GCHapticClientProxy prewarm:]
  -[_GCHapticClientProxy setInvalidationHandlers:]
  -[_GCHapticClientProxy identifier]
  -[_GCHapticClientProxy stopRunning]
  -[_GCHapticClientProxy stopRunning:]
  -[_GCHapticClientProxy loadHapticEvent:reply:]
  -[_GCHapticClientProxy createCustomAudioEvent:format:frames:options:reply:]
  -[_GCHapticClientProxy copyCustomAudioEvent:options:reply:]
  -[_GCHapticClientProxy startRunning:]
  -[_GCHapticClientProxy referenceCustomAudioEvent:reply:]
  -[_GCHapticClientProxy releaseCustomAudioEvent:reply:]
  -[_GCHapticClientProxy setBundleIdentifier:]
  -[_GCHapticClientProxy removeChannel:reply:]
  -[_GCHapticClientProxy requestChannels:reply:]
  -[_GCHapticClientProxy releaseChannels]
  -[_GCHapticClientProxy releaseClientResources]
  -[_GCHapticClientProxy setPlayerBehavior:reply:]
  -[_GCHapticClientProxy configureWithOptions:reply:]
  -[_GCHapticClientProxy allocateClientResources:]
  -[_GCHapticClientProxy queryCapabilities:reply:]
  -[_GCHapticClientProxy getHapticLatency:]
  -[_GCHapticClientProxy setChannelEventBehavior:behavior:reply:]
  -[_GCHapticClientProxy loadHapticSequenceFromData:reply:]
  -[_GCHapticClientProxy loadHapticSequenceFromEvents:reply:]
  -[_GCHapticClientProxy loadVibePattern:reply:]
  -[_GCHapticClientProxy prepareHapticSequence:reply:]
  -[_GCHapticClientProxy detachSequence:]
  -[_GCHapticClientProxy setSequenceEventBehavior:behavior:channelIndex:reply:]
  -[_GCHapticClientProxy debugExpectNotifyOnFinishAfter:reply:]
  -[_GCHapticClientProxy notifyClientOnStopWithReason:error:]
  -[_GCHapticClientProxy applicationState]
  -[_GCHapticClientProxy setApplicationState:]
  -[_GCHapticClientProxy observeValueForKeyPath:ofObject:change:context:]
  -[_GCHapticClientProxy invalidationHandlers]
  -[_GCHapticClientProxy stopPrewarm]
  -[_GCHapticClientProxy bundleIdentifier]
  -[_GCHapticClientProxy invalidate]
  -[_GCHapticClientProxy addInvalidationHandler:]
  -[_GCHapticClientProxy isMockClient]
  -[_GCHapticClientProxy actuators]
  -[_GCHapticClientProxy isMutedForReason:]
  -[_GCHapticClientProxy setMute:forReason:]
  -[_GCHapticClientProxy controllerProductCategory]
  -[_GCHapticClientProxy totalLifetimeInSeconds]
  -[_GCHapticClientProxy activeLifetimeInSeconds]
  -[_GCHapticClientProxy teardownAndReleaseChannels]
  -[_GCHapticClientProxy invalidateDueToControllerDisconnect]
  -[_GCHapticClientProxy stopping]
  -[_GCHapticClientProxy sharedMemory]
  -[_GCHapticClientProxy addActiveTime:]
  -[_GCHapticClientProxy _initWithConnection:server:clientID:]
  -[_GCHapticClientProxy totalPlayers]
  -[_GCHapticClientProxy refreshUserSettingForMuteHaptics]
  -[_GCHapticClientProxy notifyClientCompletedWithError:]
  -[_GCHapticClientProxy hapticPlayers]
  -[_GCHapticClientProxy setHapticPlayers:]
  -[_GCHapticClientProxy setMockClient:]
  -[_GCHapticClientProxy _configureActuatorsLegacyWithOptions:]
  -[_GCHapticClientProxy removeCustomAudioEvent:reply:]


FixedParameter : NSObject /usr/lib/libc++.1.dylib
 @property  int identifier
 @property  float value

  // instance methods
  -[FixedParameter initWithIdentifier:value:]
  -[FixedParameter identifier]
  -[FixedParameter value]


_GCHapticTokenAndParams : NSObject /usr/lib/libc++.1.dylib
 @property  NSMutableArray *params
 @property  unsigned long token

  // instance methods
  -[_GCHapticTokenAndParams params]
  -[_GCHapticTokenAndParams .cxx_destruct]
  -[_GCHapticTokenAndParams setParams:]
  -[_GCHapticTokenAndParams token]
  -[_GCHapticTokenAndParams initWithHapticCommand:]


GCGamepad : GCPhysicalInputProfile <_GCGamepadEventSink, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCControllerButtonInput *buttonMenu
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonB
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonY
 @property  GCControllerButtonInput *leftShoulder
 @property  GCControllerButtonInput *rightShoulder

  // class methods
  +[GCGamepad supportsSecureCoding]

  // instance methods
  -[GCGamepad dpad]
  -[GCGamepad leftShoulder]
  -[GCGamepad rightShoulder]
  -[GCGamepad .cxx_destruct]
  -[GCGamepad name]
  -[GCGamepad buttonA]
  -[GCGamepad setAllowsRotation:]
  -[GCGamepad initWithIdentifier:]
  -[GCGamepad buttonB]
  -[GCGamepad buttonX]
  -[GCGamepad buttonY]
  -[GCGamepad encodeWithCoder:]
  -[GCGamepad saveSnapshot]
  -[GCGamepad buttonMenu]
  -[GCGamepad button2]
  -[GCGamepad handleEvent:]
  -[GCGamepad setValueChangedHandler:]
  -[GCGamepad button0]
  -[GCGamepad button1]
  -[GCGamepad button3]
  -[GCGamepad allowsRotation]
  -[GCGamepad initWithCoder:]
  -[GCGamepad setButtonMenu:]
  -[GCGamepad productCategory]
  -[GCGamepad valueChangedHandler]
  -[GCGamepad setGamepadEventSource:]
  -[GCGamepad reportsAbsoluteDpadValues]
  -[GCGamepad _triggerValueChangedHandlerForElement:queue:]
  -[GCGamepad setReportsAbsoluteDpadValues:]


GCMicroGamepad : GCPhysicalInputProfile <NSSecureCoding>
 @property  long long deviceType
 @property  GCController *controller
 @property  @? valueChangedHandler
 @property  GCControllerDirectionPad *dpad
 @property  GCControllerButtonInput *buttonA
 @property  GCControllerButtonInput *buttonX
 @property  GCControllerButtonInput *buttonMenu
 @property  BOOL reportsAbsoluteDpadValues
 @property  BOOL allowsRotation

  // class methods
  +[GCMicroGamepad supportsSecureCoding]
  +[GCMicroGamepad _current]

  // instance methods
  -[GCMicroGamepad dpad]
  -[GCMicroGamepad setDeviceType:]
  -[GCMicroGamepad deviceType]
  -[GCMicroGamepad .cxx_destruct]
  -[GCMicroGamepad name]
  -[GCMicroGamepad buttonA]
  -[GCMicroGamepad setAllowsRotation:]
  -[GCMicroGamepad initWithIdentifier:]
  -[GCMicroGamepad buttonB]
  -[GCMicroGamepad buttonX]
  -[GCMicroGamepad encodeWithCoder:]
  -[GCMicroGamepad saveSnapshot]
  -[GCMicroGamepad buttonMenu]
  -[GCMicroGamepad handleEvent:]
  -[GCMicroGamepad setValueChangedHandler:]
  -[GCMicroGamepad button0]
  -[GCMicroGamepad button1]
  -[GCMicroGamepad allowsRotation]
  -[GCMicroGamepad initWithCoder:]
  -[GCMicroGamepad productCategory]
  -[GCMicroGamepad valueChangedHandler]
  -[GCMicroGamepad reportsAbsoluteDpadValues]
  -[GCMicroGamepad _triggerValueChangedHandlerForElement:queue:]
  -[GCMicroGamepad setLastEventTimestamp:]
  -[GCMicroGamepad setReportsAbsoluteDpadValues:]
  -[GCMicroGamepad supportsDpadTaps]
  -[GCMicroGamepad setStateFromMicroGamepad:]
  -[GCMicroGamepad microControllerWithDigitizerX:digitizerY:timestamp:touchDown:]


GCDeviceCursor : GCControllerDirectionPad
  // instance methods
  -[GCDeviceCursor frame]
  -[GCDeviceCursor setFrame:]
  -[GCDeviceCursor initWithDigital:descriptionName:]


GCFrontmostApplicationObserver : NSObject /usr/lib/libc++.1.dylib
 @property  <GCFrontmostApplicationObserverDelegate> *delegate

  // instance methods
  -[GCFrontmostApplicationObserver initWithDelegate:]
  -[GCFrontmostApplicationObserver .cxx_destruct]
  -[GCFrontmostApplicationObserver setDelegate:]
  -[GCFrontmostApplicationObserver delegate]


_GCDeviceConfiguration : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSDictionary *attributes
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long priority
 @property  BOOL transient
 @property  <NSObject><NSCopying><NSSecureCoding> *deviceIdentifier
 @property  NSSet *deviceDependencies
 @property  <NSObject><NSCopying><NSSecureCoding> *deviceBuilderIdentifier

  // class methods
  +[_GCDeviceConfiguration supportsSecureCoding]
  +[_GCDeviceConfiguration configurationWithIdentifier:priority:deviceIdentifier:deviceDependencies:deviceBuilder:]

  // instance methods
  -[_GCDeviceConfiguration redactedDescription]
  -[_GCDeviceConfiguration isTransient]
  -[_GCDeviceConfiguration copyWithZone:]
  -[_GCDeviceConfiguration init]
  -[_GCDeviceConfiguration deviceIdentifier]
  -[_GCDeviceConfiguration .cxx_destruct]
  -[_GCDeviceConfiguration attributes]
  -[_GCDeviceConfiguration encodeWithCoder:]
  -[_GCDeviceConfiguration identifier]
  -[_GCDeviceConfiguration valueForAttribute:]
  -[_GCDeviceConfiguration isEqual:]
  -[_GCDeviceConfiguration priority]
  -[_GCDeviceConfiguration isEqualToConfiguration:]
  -[_GCDeviceConfiguration mutableCopyWithZone:]
  -[_GCDeviceConfiguration initWithCoder:]
  -[_GCDeviceConfiguration deviceBuilderIdentifier]
  -[_GCDeviceConfiguration deviceDependencies]
  -[_GCDeviceConfiguration _initWithIdentifier:attributes:]


_GCMutableDeviceConfiguration : _GCDeviceConfiguration
 @property  unsigned long priority
 @property  BOOL transient
 @property  <NSObject><NSCopying><NSSecureCoding> *deviceIdentifier
 @property  NSSet *deviceDependencies
 @property  <NSObject><NSCopying><NSSecureCoding> *deviceBuilderIdentifier

  // instance methods
  -[_GCMutableDeviceConfiguration copyWithZone:]
  -[_GCMutableDeviceConfiguration setTransient:]
  -[_GCMutableDeviceConfiguration setDeviceIdentifier:]
  -[_GCMutableDeviceConfiguration setPriority:]
  -[_GCMutableDeviceConfiguration mutableCopyWithZone:]
  -[_GCMutableDeviceConfiguration _initWithIdentifier:attributes:]
  -[_GCMutableDeviceConfiguration setValue:forAttribute:]
  -[_GCMutableDeviceConfiguration setDeviceDependencies:]
  -[_GCMutableDeviceConfiguration setDeviceBuilderIdentifier:]


GCControllerElement : NSObject /usr/lib/libc++.1.dylib
 @property  GCController *controller
 @property  GCControllerElement *collection
 @property  BOOL updatePending
 @property  float pendingValue
 @property  NSMutableSet *aliases
 @property  NSString *primaryAlias
 @property  float deadzone
 @property  BOOL remappable
 @property  int remappingKey
 @property  BOOL mappableToSystemGestures
 @property  BOOL boundToSystemGesture
 @property  BOOL analog
 @property  long long preferredSystemGestureState
 @property  NSString *sfSymbolsName
 @property  NSString *localizedName
 @property  NSString *unmappedSfSymbolsName
 @property  NSString *unmappedLocalizedName

  // instance methods
  -[GCControllerElement collection]
  -[GCControllerElement setLocalizedName:]
  -[GCControllerElement setCollection:]
  -[GCControllerElement init]
  -[GCControllerElement .cxx_destruct]
  -[GCControllerElement localizedName]
  -[GCControllerElement aliases]
  -[GCControllerElement setAliases:]
  -[GCControllerElement _setValue:]
  -[GCControllerElement isEqual:]
  -[GCControllerElement controller]
  -[GCControllerElement value]
  -[GCControllerElement setController:]
  -[GCControllerElement isAnalog]
  -[GCControllerElement setRemappable:]
  -[GCControllerElement setUnmappedLocalizedName:]
  -[GCControllerElement setUnmappedSfSymbolsName:]
  -[GCControllerElement _setValue:queue:]
  -[GCControllerElement getAndResetTimesPressed]
  -[GCControllerElement primaryAlias]
  -[GCControllerElement setPrimaryAlias:]
  -[GCControllerElement updatePending]
  -[GCControllerElement setPendingValue:]
  -[GCControllerElement setUpdatePending:]
  -[GCControllerElement pendingValue]
  -[GCControllerElement _commitPendingValueOnQueue:]
  -[GCControllerElement _setPendingValue:]
  -[GCControllerElement setPreferredSystemGestureState:]
  -[GCControllerElement preferredSystemGestureState]
  -[GCControllerElement _resetPendingValue]
  -[GCControllerElement deadzone]
  -[GCControllerElement setBoundToSystemGesture:]
  -[GCControllerElement setDeadzone:]
  -[GCControllerElement remappable]
  -[GCControllerElement _setPendingValueIfChanged:]
  -[GCControllerElement isBoundToSystemGesture]
  -[GCControllerElement sfSymbolsName]
  -[GCControllerElement setSfSymbolsName:]
  -[GCControllerElement unmappedSfSymbolsName]
  -[GCControllerElement unmappedLocalizedName]
  -[GCControllerElement remappingKey]
  -[GCControllerElement setRemappingKey:]
  -[GCControllerElement mappableToSystemGestures]
  -[GCControllerElement setMappableToSystemGestures:]


GCPlayerIndicatorXPCProxyClientEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointClient, GCControllerPlayerIndicator, GCPlayerIndicatorXPCProxyRemoteClientEndpointInterface>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long playerIndex

  // instance methods
  -[GCPlayerIndicatorXPCProxyClientEndpoint invalidateConnection]
  -[GCPlayerIndicatorXPCProxyClientEndpoint init]
  -[GCPlayerIndicatorXPCProxyClientEndpoint setPlayerIndex:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint playerIndex]
  -[GCPlayerIndicatorXPCProxyClientEndpoint .cxx_destruct]
  -[GCPlayerIndicatorXPCProxyClientEndpoint identifier]
  -[GCPlayerIndicatorXPCProxyClientEndpoint setController:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint fetchObjectIdentifierWithReply:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint setRemoteEndpoint:connection:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint newPlayerIndex:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint refreshPlayerIndex]
  -[GCPlayerIndicatorXPCProxyClientEndpoint _remoteEndpointSetPlayerIndex:]
  -[GCPlayerIndicatorXPCProxyClientEndpoint initWithIdentifier:initialPlayerIndex:]


GCPlayerIndicatorXPCProxyServerEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointServer, GCPlayerIndicatorXPCProxyRemoteServerEndpointInterface>
 @property  <_GCControllerComponentDescription> *receiverDescription
 @property  <GCPlayerIndicatorXPCProxyServerEndpointDelegate> *delegate
 @property  id userInfo
 @property  long long playerIndex
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCPlayerIndicatorXPCProxyServerEndpoint invalidateConnection]
  -[GCPlayerIndicatorXPCProxyServerEndpoint setPlayerIndex:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint playerIndex]
  -[GCPlayerIndicatorXPCProxyServerEndpoint setUserInfo:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint .cxx_destruct]
  -[GCPlayerIndicatorXPCProxyServerEndpoint identifier]
  -[GCPlayerIndicatorXPCProxyServerEndpoint userInfo]
  -[GCPlayerIndicatorXPCProxyServerEndpoint setDelegate:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint delegate]
  -[GCPlayerIndicatorXPCProxyServerEndpoint fetchObjectIdentifierWithReply:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint initWithIdentifier:initialValue:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint acceptClient:onConnection:error:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint initWithInitialValue:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint receiverDescription]
  -[GCPlayerIndicatorXPCProxyServerEndpoint invalidateClient]
  -[GCPlayerIndicatorXPCProxyServerEndpoint newPlayerIndex:]
  -[GCPlayerIndicatorXPCProxyServerEndpoint fetchPlayerIndexWithReply:]


GCPlayerIndicatorXPCProxyClientEndpointDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCPlayerIndicatorXPCProxyClientEndpointDescription supportsSecureCoding]

  // instance methods
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription init]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription .cxx_destruct]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription encodeWithCoder:]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription identifier]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription initWithCoder:]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription materializeWithContext:]
  -[GCPlayerIndicatorXPCProxyClientEndpointDescription initWithIdentifier:initialPlayerIndex:]


GCKeyboardAndMouseManager : NSObject /usr/lib/libc++.1.dylib
 @property  NSObject<OS_dispatch_queue> *devicesQueue
 @property  GCKeyboard *coalescedKeyboard
 @property  GCMouse *currentMouse

  // instance methods
  -[GCKeyboardAndMouseManager handleKeyboardEventAsFrontmostApp:]
  -[GCKeyboardAndMouseManager .cxx_destruct]
  -[GCKeyboardAndMouseManager mice]
  -[GCKeyboardAndMouseManager initWithQueue:]
  -[GCKeyboardAndMouseManager handleMouseEventAsFrontmostApp:]
  -[GCKeyboardAndMouseManager handleHIDEvent:]
  -[GCKeyboardAndMouseManager currentMouse]
  -[GCKeyboardAndMouseManager setCurrentMouse:]
  -[GCKeyboardAndMouseManager coalescedKeyboard]
  -[GCKeyboardAndMouseManager addDeviceWithServiceRef:]
  -[GCKeyboardAndMouseManager removeDeviceWithServiceRef:]
  -[GCKeyboardAndMouseManager addKeyboard:]
  -[GCKeyboardAndMouseManager addMouse:]
  -[GCKeyboardAndMouseManager removeDevice:registryID:]
  -[GCKeyboardAndMouseManager updateCurrentMouseAfterDisconnecting:]
  -[GCKeyboardAndMouseManager unpublishDevice:withNotificationName:]
  -[GCKeyboardAndMouseManager devicesQueue]
  -[GCKeyboardAndMouseManager storeDevice:]
  -[GCKeyboardAndMouseManager publishDevice:withNotificationName:]
  -[GCKeyboardAndMouseManager updateCurrentDeviceAfterDisconnecting:]
  -[GCKeyboardAndMouseManager updateCurrentDevice:]
  -[GCKeyboardAndMouseManager _queue_removeDevice:registryID:]
  -[GCKeyboardAndMouseManager setDevicesQueue:]


GCControllerCBDelegate : NSObject /usr/lib/libc++.1.dylib <CBCentralManagerDelegate, CBPeripheralDelegate>
 @property  CBCentralManager *centralManager
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCControllerCBDelegate centralManager:didConnectPeripheral:]
  -[GCControllerCBDelegate centralManager:didFailToConnectPeripheral:error:]
  -[GCControllerCBDelegate init]
  -[GCControllerCBDelegate centralManager:didDisconnectPeripheral:error:]
  -[GCControllerCBDelegate stopScan]
  -[GCControllerCBDelegate centralManager]
  -[GCControllerCBDelegate .cxx_destruct]
  -[GCControllerCBDelegate centralManagerDidUpdateState:]
  -[GCControllerCBDelegate startScan]
  -[GCControllerCBDelegate setCentralManager:]
  -[GCControllerCBDelegate fireCompletionHandler]
  -[GCControllerCBDelegate centralManager:didRetrievePeripherals:]
  -[GCControllerCBDelegate centralManager:didRetrieveConnectedPeripherals:]
  -[GCControllerCBDelegate peripheral:didDiscoverServices:]
  -[GCControllerCBDelegate peripheral:didDiscoverIncludedServicesForService:error:]
  -[GCControllerCBDelegate peripheral:didDiscoverCharacteristicsForService:error:]
  -[GCControllerCBDelegate peripheral:didUpdateValueForCharacteristic:error:]
  -[GCControllerCBDelegate peripheral:didDiscoverDescriptorsForCharacteristic:error:]
  -[GCControllerCBDelegate peripheral:didUpdateValueForDescriptor:error:]
  -[GCControllerCBDelegate centralManager:didDiscoverPeripheral:advertisementData:RSSI:]
  -[GCControllerCBDelegate completionHandler]
  -[GCControllerCBDelegate setCompletionHandler:]
  -[GCControllerCBDelegate startScanWithTimeout:]


GCColor : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding>
 @property  float red
 @property  float green
 @property  float blue

  // class methods
  +[GCColor supportsSecureCoding]

  // instance methods
  -[GCColor blue]
  -[GCColor red]
  -[GCColor copyWithZone:]
  -[GCColor encodeWithCoder:]
  -[GCColor green]
  -[GCColor initWithRed:green:blue:]
  -[GCColor initWithCoder:]


GCControllerDirectionPad : GCControllerElement
 @property  GCControllerAxisInput *xAxis
 @property  GCControllerAxisInput *yAxis
 @property  BOOL nonAnalog
 @property  @? valueChangedHandler
 @property  GCControllerButtonInput *up
 @property  GCControllerButtonInput *down
 @property  GCControllerButtonInput *left
 @property  GCControllerButtonInput *right

  // instance methods
  -[GCControllerDirectionPad left]
  -[GCControllerDirectionPad down]
  -[GCControllerDirectionPad xAxis]
  -[GCControllerDirectionPad yAxis]
  -[GCControllerDirectionPad .cxx_destruct]
  -[GCControllerDirectionPad right]
  -[GCControllerDirectionPad setYAxis:]
  -[GCControllerDirectionPad setValueChangedHandler:]
  -[GCControllerDirectionPad up]
  -[GCControllerDirectionPad setXAxis:]
  -[GCControllerDirectionPad isAnalog]
  -[GCControllerDirectionPad valueChangedHandler]
  -[GCControllerDirectionPad getAndResetTimesPressed]
  -[GCControllerDirectionPad _commitPendingValueOnQueue:]
  -[GCControllerDirectionPad initWithDigital:descriptionName:]
  -[GCControllerDirectionPad setNonAnalog:]
  -[GCControllerDirectionPad _fireValueChangedWithQueue:]
  -[GCControllerDirectionPad nonAnalog]
  -[GCControllerDirectionPad initWithDigital:]
  -[GCControllerDirectionPad _fireValueChanged]
  -[GCControllerDirectionPad setValueForXAxis:yAxis:]


GCPhysicalInputProfile : NSObject /usr/lib/libc++.1.dylib <GCNamedProfile, GCControllerComponent>
 @property  NSString *name
 @property  GCMotion *_motion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCControllerSettings *bundleSettings
 @property  GCControllerSettings *defaultSettings
 @property  NSMutableDictionary *elements
 @property  NSMutableDictionary *buttons
 @property  NSMutableDictionary *axes
 @property  NSMutableDictionary *dpads
 @property  NSMutableSet *allElements
 @property  NSMutableSet *allButtons
 @property  NSMutableSet *allAxes
 @property  NSMutableSet *allDpads
 @property  double lastEventTimestamp
 @property  NSMutableSet *_topLevelElements
 @property  NSMutableSet *_topLevelButtons
 @property  NSMutableSet *_topLevelDirectionPads
 @property  NSMutableSet *_topLevelTouchpads
 @property  GCController *controller
 @property  <GCDevice> *device
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCPhysicalInputProfile setElements:]
  -[GCPhysicalInputProfile defaultSettings]
  -[GCPhysicalInputProfile axes]
  -[GCPhysicalInputProfile device]
  -[GCPhysicalInputProfile objectForKeyedSubscript:]
  -[GCPhysicalInputProfile init]
  -[GCPhysicalInputProfile setPlayerIndex:]
  -[GCPhysicalInputProfile elements]
  -[GCPhysicalInputProfile applySettings:]
  -[GCPhysicalInputProfile buttons]
  -[GCPhysicalInputProfile setButtons:]
  -[GCPhysicalInputProfile _motion]
  -[GCPhysicalInputProfile dpads]
  -[GCPhysicalInputProfile .cxx_destruct]
  -[GCPhysicalInputProfile name]
  -[GCPhysicalInputProfile initWithIdentifier:]
  -[GCPhysicalInputProfile identifier]
  -[GCPhysicalInputProfile appDidBecomeActive]
  -[GCPhysicalInputProfile capture]
  -[GCPhysicalInputProfile setDevice:]
  -[GCPhysicalInputProfile handleEvent:]
  -[GCPhysicalInputProfile controller]
  -[GCPhysicalInputProfile allAxes]
  -[GCPhysicalInputProfile setDefaultSettings:]
  -[GCPhysicalInputProfile setController:]
  -[GCPhysicalInputProfile initWithController:]
  -[GCPhysicalInputProfile sampleRate]
  -[GCPhysicalInputProfile productCategory]
  -[GCPhysicalInputProfile _buttonWithInfo:]
  -[GCPhysicalInputProfile _directionPadWithInfo:]
  -[GCPhysicalInputProfile isBluetoothAndUSBMirrored]
  -[GCPhysicalInputProfile valueChangedHandler]
  -[GCPhysicalInputProfile setButton:value:]
  -[GCPhysicalInputProfile set_motion:]
  -[GCPhysicalInputProfile appWillResignActive]
  -[GCPhysicalInputProfile setDpad:x:y:]
  -[GCPhysicalInputProfile setButton:pressed:]
  -[GCPhysicalInputProfile _cursorWithInfo:]
  -[GCPhysicalInputProfile _receivedEvent]
  -[GCPhysicalInputProfile setDefaultSettings:bundleSettings:]
  -[GCPhysicalInputProfile _triggerValueChangedHandlerForElement:queue:]
  -[GCPhysicalInputProfile setLastEventTimestamp:]
  -[GCPhysicalInputProfile remappedElementForIndex:]
  -[GCPhysicalInputProfile lastEventTimestamp]
  -[GCPhysicalInputProfile allElements]
  -[GCPhysicalInputProfile updateElementControllerReferences]
  -[GCPhysicalInputProfile allButtons]
  -[GCPhysicalInputProfile _topLevelButtons]
  -[GCPhysicalInputProfile _topLevelDirectionPads]
  -[GCPhysicalInputProfile _registerTopLevelDirectionPad:]
  -[GCPhysicalInputProfile _registerTopLevelButton:]
  -[GCPhysicalInputProfile _registerTouchpad:]
  -[GCPhysicalInputProfile _registerButton:]
  -[GCPhysicalInputProfile _registerDirectionPad:]
  -[GCPhysicalInputProfile _registerAxis:]
  -[GCPhysicalInputProfile allDpads]
  -[GCPhysicalInputProfile _touchpadWithInfo:]
  -[GCPhysicalInputProfile _registerTopLevelTouchpad:]
  -[GCPhysicalInputProfile setStateFromPhysicalInput:]
  -[GCPhysicalInputProfile setAxes:]
  -[GCPhysicalInputProfile setDpads:]
  -[GCPhysicalInputProfile setAllElements:]
  -[GCPhysicalInputProfile setAllButtons:]
  -[GCPhysicalInputProfile setAllAxes:]
  -[GCPhysicalInputProfile setAllDpads:]
  -[GCPhysicalInputProfile bundleSettings]
  -[GCPhysicalInputProfile setBundleSettings:]
  -[GCPhysicalInputProfile _topLevelElements]
  -[GCPhysicalInputProfile set_topLevelElements:]
  -[GCPhysicalInputProfile set_topLevelButtons:]
  -[GCPhysicalInputProfile set_topLevelDirectionPads:]
  -[GCPhysicalInputProfile _topLevelTouchpads]
  -[GCPhysicalInputProfile set_topLevelTouchpads:]


_GCExtendedMFiControllerProfile : NSObject /usr/lib/libc++.1.dylib <_GCControllerProfile>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_GCExtendedMFiControllerProfile logicalDeviceControllerProductCategory:]
  +[_GCExtendedMFiControllerProfile deviceManager:prepareLogicalDevice:]
  +[_GCExtendedMFiControllerProfile deviceManager]
  +[_GCExtendedMFiControllerProfile deviceManager:willPublishPhysicalDevice:]
  +[_GCExtendedMFiControllerProfile logicalDevice:makeControllerPhysicalInputProfileWithIdentifier:]
  +[_GCExtendedMFiControllerProfile physicalDeviceUsesACHomeForMenu:]
  +[_GCExtendedMFiControllerProfile physicalDeviceGetIndicatedPlayerIndex:]
  +[_GCExtendedMFiControllerProfile physicalDevice:setIndicatedPlayerIndex:]
  +[_GCExtendedMFiControllerProfile determineCapabilitiesWithServiceInfo:initInfo:]
  +[_GCExtendedMFiControllerProfile populateInitInfo:forLogicalDevice:]


GCBatteryXPCProxyClientEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointClient, GCDeviceBatteryComponent, GCBatteryXPCProxyRemoteClientEndpointInterface>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  GCDeviceBattery *battery

  // instance methods
  -[GCBatteryXPCProxyClientEndpoint invalidateConnection]
  -[GCBatteryXPCProxyClientEndpoint init]
  -[GCBatteryXPCProxyClientEndpoint .cxx_destruct]
  -[GCBatteryXPCProxyClientEndpoint identifier]
  -[GCBatteryXPCProxyClientEndpoint battery]
  -[GCBatteryXPCProxyClientEndpoint setController:]
  -[GCBatteryXPCProxyClientEndpoint fetchObjectIdentifierWithReply:]
  -[GCBatteryXPCProxyClientEndpoint setRemoteEndpoint:connection:]
  -[GCBatteryXPCProxyClientEndpoint refreshBattery]
  -[GCBatteryXPCProxyClientEndpoint _remoteEndpointHasSetBattery:]
  -[GCBatteryXPCProxyClientEndpoint newBattery:]
  -[GCBatteryXPCProxyClientEndpoint initWithIdentifier:initialBattery:]


GCBatteryXPCProxyServerEndpoint : NSObject /usr/lib/libc++.1.dylib <_GCIPCEndpointServer, GCBatteryXPCProxyRemoteServerEndpointInterface>
 @property  <_GCControllerComponentDescription> *receiverDescription
 @property  <GCBatteryXPCProxyServerEndpointDelegate> *delegate
 @property  id userInfo
 @property  GCDeviceBattery *battery
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[GCBatteryXPCProxyServerEndpoint invalidateConnection]
  -[GCBatteryXPCProxyServerEndpoint setUserInfo:]
  -[GCBatteryXPCProxyServerEndpoint .cxx_destruct]
  -[GCBatteryXPCProxyServerEndpoint identifier]
  -[GCBatteryXPCProxyServerEndpoint userInfo]
  -[GCBatteryXPCProxyServerEndpoint battery]
  -[GCBatteryXPCProxyServerEndpoint setDelegate:]
  -[GCBatteryXPCProxyServerEndpoint delegate]
  -[GCBatteryXPCProxyServerEndpoint fetchObjectIdentifierWithReply:]
  -[GCBatteryXPCProxyServerEndpoint initWithIdentifier:initialValue:]
  -[GCBatteryXPCProxyServerEndpoint acceptClient:onConnection:error:]
  -[GCBatteryXPCProxyServerEndpoint initWithInitialValue:]
  -[GCBatteryXPCProxyServerEndpoint receiverDescription]
  -[GCBatteryXPCProxyServerEndpoint invalidateClient]
  -[GCBatteryXPCProxyServerEndpoint setBattery:]
  -[GCBatteryXPCProxyServerEndpoint fetchBatteryWithReply:]


GCBatteryXPCProxyClientEndpointDescription : NSObject /usr/lib/libc++.1.dylib <_GCControllerComponentDescription>
 @property  <NSObject><NSCopying><NSSecureCoding> *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[GCBatteryXPCProxyClientEndpointDescription supportsSecureCoding]

  // instance methods
  -[GCBatteryXPCProxyClientEndpointDescription init]
  -[GCBatteryXPCProxyClientEndpointDescription .cxx_destruct]
  -[GCBatteryXPCProxyClientEndpointDescription encodeWithCoder:]
  -[GCBatteryXPCProxyClientEndpointDescription identifier]
  -[GCBatteryXPCProxyClientEndpointDescription initWithCoder:]
  -[GCBatteryXPCProxyClientEndpointDescription materializeWithContext:]
  -[GCBatteryXPCProxyClientEndpointDescription initWithIdentifier:initialBattery:]


GCMouseEventData : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  unsigned int type
 @property  unsigned short source
 @property  float deltaX
 @property  float deltaY
 @property  unsigned long buttonMask
 @property  unsigned long senderID

  // class methods
  +[GCMouseEventData supportsSecureCoding]

  // instance methods
  -[GCMouseEventData setSenderID:]
  -[GCMouseEventData senderID]
  -[GCMouseEventData setSource:]
  -[GCMouseEventData deltaX]
  -[GCMouseEventData deltaY]
  -[GCMouseEventData source]
  -[GCMouseEventData setType:]
  -[GCMouseEventData buttonMask]
  -[GCMouseEventData encodeWithCoder:]
  -[GCMouseEventData type]
  -[GCMouseEventData initWithCoder:]
  -[GCMouseEventData setDeltaX:]
  -[GCMouseEventData setDeltaY:]
  -[GCMouseEventData setButtonMask:]


GCMouseEventObserver : NSObject /usr/lib/libc++.1.dylib
 @property  <GCMouseEventObserverDelegate> *delegate

  // instance methods
  -[GCMouseEventObserver initWithDelegate:]
  -[GCMouseEventObserver dealloc]
  -[GCMouseEventObserver .cxx_destruct]
  -[GCMouseEventObserver setDelegate:]
  -[GCMouseEventObserver delegate]


(GC)
	// instance methods
	-[(GC) gc_setByRemovingObjectsFromSet:]

NSMutableSet(GC)
	// instance methods
	-[NSMutableSet(GC) gc_removeObjectsInArray:]

01 00 0400 /System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices: BKSApplicationStateMonitor 
01 00 0f00 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBCentralManager 
01 00 0f00 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBUUID 
01 00 0300 /System/Library/Frameworks/CoreHaptics.framework/CoreHaptics: CHHapticEngine 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1200 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0c00 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 1500 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0700 /System/Library/Frameworks/ReplayKit.framework/ReplayKit: RPScreenRecorder 
01 00 0b00 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSUIService 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0a00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationCategory 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 0200 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
