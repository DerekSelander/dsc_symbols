|| __DATA.__objc_data _OBJC_CLASS_$_SFAuthenticationSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFBlockBasedPopoverSourceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFBrowserDocumentTrackerInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SFContentBlockerManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFContentBlockerState
|| __DATA.__objc_data _OBJC_CLASS_$_SFFolderPickerList
|| __DATA.__objc_data _OBJC_CLASS_$_SFPrivacyReportOnboardingController
|| __DATA.__objc_data _OBJC_CLASS_$_SFPrivacyReportViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SFReaderAppearanceThemeSelector
|| __DATA.__objc_data _OBJC_CLASS_$_SFSafariViewControllerActivityButton
|| __DATA.__objc_data _OBJC_CLASS_$_SFSafariViewControllerConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SFSafariViewControllerPrewarmingToken
|| __DATA.__objc_data _OBJC_CLASS_$_SFWebExtensionPageMenuController
|| __DATA.__objc_data _OBJC_CLASS_$_SSReadingList
|| __DATA.__objc_data _OBJC_CLASS_$__SFAccountIconController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAccountManagerLockedView
|| __DATA.__objc_data _OBJC_CLASS_$__SFAccountManagerViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAccountPickerTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityExtensionItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemCustomizationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemProviderCollection
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAdaptivePreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAddBookmarkActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppAutoFillPasswordViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppPasswordSavingViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAuthenticationContext
|| __DATA.__objc_data _OBJC_CLASS_$__SFAutomationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBarHoverAssistant
|| __DATA.__objc_data _OBJC_CLASS_$__SFBarManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkTextEntryTableViewCell
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkTextEntryTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserSavedState
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserView
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserWindowSettings
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserWindowStateData
|| __DATA.__objc_data _OBJC_CLASS_$__SFCalendarEventDetector
|| __DATA.__objc_data _OBJC_CLASS_$__SFContactPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFContentBlockersPreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFCreditCardCaptureViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownload
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadCurrentPageActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadIconCache
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadStorageUsageMonitor
|| __DATA.__objc_data _OBJC_CLASS_$__SFDynamicBarAnimator
|| __DATA.__objc_data _OBJC_CLASS_$__SFExternalPasswordCredentialViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFFeatureAvailability
|| __DATA.__objc_data _OBJC_CLASS_$__SFFindOnPageUIActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFFindOnPageView
|| __DATA.__objc_data _OBJC_CLASS_$__SFFolderPickerItem
|| __DATA.__objc_data _OBJC_CLASS_$__SFFolderPickerTableViewCellLayoutManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFFormAutoFillInputSession
|| __DATA.__objc_data _OBJC_CLASS_$__SFFormDataController
|| __DATA.__objc_data _OBJC_CLASS_$__SFGeolocationPermissionManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFICSPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFImageActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFInjectedJavaScriptController
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkPreviewHeader
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkPreviewHelper
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkRedirectionResolver
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkWithPreviewActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFMailContentProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFManagedFeatureObserver
|| __DATA.__objc_data _OBJC_CLASS_$__SFMediaCaptureStatusBarManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFMicrodataExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationBarTheme
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationIntent
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationIntentBuilder
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationResult
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationUtilitiesManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageFormatMenuBadgeView
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageLoadErrorController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageZoomPreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordAuditingViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferenceDisplayInformation
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferenceNotifyingListController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencePopoverDisplayInformation
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesPopoverViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesUtilities
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesVendor
|| __DATA.__objc_data _OBJC_CLASS_$__SFPopoverPresentationDelegate
|| __DATA.__objc_data _OBJC_CLASS_$__SFPrintActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFPrintController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQRCodeDetectionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQRImagePreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocument
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentView
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentWriter
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderController
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderCustomProtocols
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderExtractedData
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderFontOptionsGroupController
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderWebProcessPlugInPageController
|| __DATA.__objc_data _OBJC_CLASS_$__SFRecentWebSearchesController
|| __DATA.__objc_data _OBJC_CLASS_$__SFReloadOptionsController
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSitePreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSiteQuirksManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSiteQuirksSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$__SFSafariDataSharingController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSafariSharingExtensionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSaveToFilesOperation
|| __DATA.__objc_data _OBJC_CLASS_$__SFSearchEngineController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSearchEngineInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SFSecIdentityPreferencesController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAlertController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$__SFSharablePasswordReceiver
|| __DATA.__objc_data _OBJC_CLASS_$__SFSharingLinkExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFSingleBookmarkNavigationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSyntheticClickContext
|| __DATA.__objc_data _OBJC_CLASS_$__SFTabStateData
|| __DATA.__objc_data _OBJC_CLASS_$__SFTelephonyNavigationMitigationPolicy
|| __DATA.__objc_data _OBJC_CLASS_$__SFTextSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SFTranslationTargetLocaleAlertController
|| __DATA.__objc_data _OBJC_CLASS_$__SFUIViewPopoverSourceInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SFURLTextPreviewView
|| __DATA.__objc_data _OBJC_CLASS_$__SFURLTextPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFUserActivityController
|| __DATA.__objc_data _OBJC_CLASS_$__SFUserMediaPermissionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebAppViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebArchiveActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebArchiveProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebClipMetadataFetcher
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebExtensionActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebView
|| __DATA.__objc_data _OBJC_CLASS_$__SSHistoryAccessSession
|| __DATA.__objc_data _OBJC_CLASS_$__SSURLCompletionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAuthenticationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBlockBasedPopoverSourceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBrowserDocumentTrackerInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SFContentBlockerManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFContentBlockerState
|| __DATA.__objc_data _OBJC_METACLASS_$_SFFolderPickerList
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPrivacyReportOnboardingController
|| __DATA.__objc_data _OBJC_METACLASS_$_SFPrivacyReportViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SFReaderAppearanceThemeSelector
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSafariViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSafariViewControllerActivityButton
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSafariViewControllerConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSafariViewControllerPrewarmingToken
|| __DATA.__objc_data _OBJC_METACLASS_$_SFWebExtensionPageMenuController
|| __DATA.__objc_data _OBJC_METACLASS_$_SSReadingList
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAccountIconController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAccountManagerLockedView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAccountManagerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAccountPickerTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityExtensionItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemCustomizationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemProviderCollection
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAdaptivePreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAddBookmarkActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAppAutoFillPasswordViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAppPasswordSavingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAuthenticationContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAutomationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBarHoverAssistant
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBarManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkTextEntryTableViewCell
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkTextEntryTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserSavedState
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserWindowSettings
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserWindowStateData
|| __DATA.__objc_data _OBJC_METACLASS_$__SFCalendarEventDetector
|| __DATA.__objc_data _OBJC_METACLASS_$__SFContactPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFContentBlockersPreferenceManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFCreditCardCaptureViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownload
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadCurrentPageActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadIconCache
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadStorageUsageMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDynamicBarAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$__SFExternalPasswordCredentialViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFeatureAvailability
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFindOnPageUIActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFindOnPageView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFolderPickerItem
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFolderPickerTableViewCellLayoutManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFormAutoFillInputSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFormDataController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFGeolocationPermissionManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFICSPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFImageActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFInjectedJavaScriptController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkPreviewHeader
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkPreviewHelper
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkRedirectionResolver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkWithPreviewActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFMailContentProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFManagedFeatureObserver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFMediaCaptureStatusBarManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFMicrodataExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationBarTheme
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationIntent
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationIntentBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationResult
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationUtilitiesManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageFormatMenuBadgeView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageLoadErrorController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageZoomPreferenceManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordAuditingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferenceDisplayInformation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferenceNotifyingListController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencePopoverDisplayInformation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesPopoverViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesVendor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPopoverPresentationDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPrintActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPrintController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQRCodeDetectionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQRImagePreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocument
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentWriter
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderCustomProtocols
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderExtractedData
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderFontOptionsGroupController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderWebProcessPlugInPageController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRecentWebSearchesController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReloadOptionsController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSitePreferenceManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSiteQuirksManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSiteQuirksSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSafariDataSharingController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSafariSharingExtensionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSaveToFilesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSearchEngineController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSearchEngineInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSecIdentityPreferencesController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAlertController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSharablePasswordReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSharingLinkExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSingleBookmarkNavigationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSyntheticClickContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTabStateData
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTelephonyNavigationMitigationPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTextSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTranslationTargetLocaleAlertController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUIViewPopoverSourceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SFURLTextPreviewView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFURLTextPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUserActivityController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUserMediaPermissionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebAppViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebArchiveActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebArchiveProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebClipMetadataFetcher
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebExtensionActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebView
|| __DATA.__objc_data _OBJC_METACLASS_$__SSHistoryAccessSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SSURLCompletionSession
|| __DATA.__objc_ivar _OBJC_IVAR_$__SFMediaCaptureStatusBarManager._hasStatusBarOverride
|| __DATA.__objc_ivar _OBJC_IVAR_$__SFMediaCaptureStatusBarManager._recordingDocument
|| __DATA_CONST.__const _SFAdditionalArgumentsKey
|| __DATA_CONST.__const _SFAggregateDAddedBookmarkInMemory
|| __DATA_CONST.__const _SFAggregateDFindOnPageActivityKey
|| __DATA_CONST.__const _SFAggregateDIconsInTabEnabledKey
|| __DATA_CONST.__const _SFAggregateDRequestDesktopSiteKey
|| __DATA_CONST.__const _SFAggregateDSafeBrowsingDisabledKey
|| __DATA_CONST.__const _SFAggregateDSelectedStartedFindOnPageKey
|| __DATA_CONST.__const _SFAggregateDSiteSpecificSearchEnabledKey
|| __DATA_CONST.__const _SFAggregateDSiteSpecificSearchProviderRemovedKey
|| __DATA_CONST.__const _SFAuthenticationErrorDomain
|| __DATA_CONST.__const _SFContentBlockerDidChangeDistributedNotification
|| __DATA_CONST.__const _SFContentBlockerErrorDomain
|| __DATA_CONST.__const _SFContentBlockerExtensionPointIdentifier
|| __DATA_CONST.__const _SFDownloadsUserActivityType
|| __DATA_CONST.__const _SFErrorDomain
|| __DATA_CONST.__const _SFExtensionMessageKey
|| __DATA_CONST.__const _SFMediaCaptureUserActivityType
|| __DATA_CONST.__const _SFRecentlyClosedTabsWereAddedNotification
|| __DATA_CONST.__const _SFRecentlyClosedTabsWereRemovedNotification
|| __DATA_CONST.__const _SFReloadUserActivityType
|| __DATA_CONST.__const _SFRemovedTabStateDataKey
|| __DATA_CONST.__const _SFToggleReaderUserActivityType
|| __DATA_CONST.__const _SSReadingListErrorDomain
|| __DATA_CONST.__const _WebExtensionActivityTypePrefix
|| __DATA_CONST.__const __SFAddBookmarkUIActivityType
|| __DATA_CONST.__const __SFAuthenticationContextDidInvalidateNotification
|| __DATA_CONST.__const __SFAuthenticationContextErrorDomain
|| __DATA_CONST.__const __SFAutomaticPasswordDismissedByUser
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewButtonPressedNotification
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewNotificationAutoFillContextProviderIdentifierUserInfoKey
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewNotificationInputViewControllerUserInfoKey
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewNotificationPressedButtonUserInfoKey
|| __DATA_CONST.__const __SFBookmarksUserActivityType
|| __DATA_CONST.__const __SFDeveloperPreferencesDidChangeNotification
|| __DATA_CONST.__const __SFDownloadDidChangeCompletedURLNotification
|| __DATA_CONST.__const __SFDownloadDidChangeNotification
|| __DATA_CONST.__const __SFDownloadDidStartNotification
|| __DATA_CONST.__const __SFDownloadDidStopNotification
|| __DATA_CONST.__const __SFDownloadManagerDidFinishLastDownloadNotification
|| __DATA_CONST.__const __SFDownloadManagerHasUnviewedDownloadsDidChangeNotification
|| __DATA_CONST.__const __SFDownloadManagerTotalProgressDidChangeNotification
|| __DATA_CONST.__const __SFDownloadStorageUsageMonitorDidChangeUsageNotification
|| __DATA_CONST.__const __SFDownloadsDidChangeNotification
|| __DATA_CONST.__const __SFFormMetadataFocusingForStreamlinedLogin
|| __DATA_CONST.__const __SFHighPrioritySecurityRecommendationCellReuseIdentifier
|| __DATA_CONST.__const __SFReaderExtractorErrorDomain
|| __DATA_CONST.__const __SFReaderPageGroupIdentifier
|| __DATA_CONST.__const __SFReaderURLScheme
|| __DATA_CONST.__const __SFReadingListUserActivityType
|| __DATA_CONST.__const __SFRequestDesktopSitePreferenceDidChangeDistributedNotification
|| __DATA_CONST.__const __SFSafariResourceScheme
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenBookmarksView
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenNewPrivateTab
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenNewTab
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenReadingListView
|| __DATA_CONST.__const __SFSafariStateActiveDocumentIndexKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowDatabaseIDKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowSceneIDKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentDisplayingStandaloneImageKey
|| __DATA_CONST.__const __SFSafariStateDocumentLastViewedTimeKey
|| __DATA_CONST.__const __SFSafariStateDocumentOrderIndexKey
|| __DATA_CONST.__const __SFSafariStateDocumentOwningBrowserWindowUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentReaderViewTopScrollOffsetKey
|| __DATA_CONST.__const __SFSafariStateDocumentReadingListBookmarkKey
|| __DATA_CONST.__const __SFSafariStateDocumentSourceApplicationBundleIdentifierKey
|| __DATA_CONST.__const __SFSafariStateDocumentTitleKey
|| __DATA_CONST.__const __SFSafariStateDocumentURLKey
|| __DATA_CONST.__const __SFSafariStateDocumentUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentUserVisibleURLKey
|| __DATA_CONST.__const __SFSafariStateDocumentUsesPrivateBrowsingStyleKey
|| __DATA_CONST.__const __SFSafariStateDocumentWasOpenedFromLinkKey
|| __DATA_CONST.__const __SFSafariStateDocumentsFileVersionKey
|| __DATA_CONST.__const __SFSafariStateDocumentsKey
|| __DATA_CONST.__const __SFSafariStatePrivateActiveDocumentIndexKey
|| __DATA_CONST.__const __SFSafariStatePrivateDocumentsKey
|| __DATA_CONST.__const __SFSearchEngineControllerDefaultSearchEngineDidChangeNotification
|| __DATA_CONST.__const __SFSearchEngineControllerInstanceDidFinishPopulatingSearchEnginesNotification
|| __DATA_CONST.__const __SFSearchEngineStringDefaultsKey
|| __DATA_CONST.__const __SFStandardSecurityRecommendationCellReuseIdentifier
|| __DATA_CONST.__const __SFTabStateSessionStateKey
|| __DATA_CONST.__const __SFTabStateShowingReaderKey
|| __DATA_CONST.__const __SFWebArchiveErrorDomain
|| __DATA_CONST.__const __SFWebArchiveMIMEType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFPageZoomStepperController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFReaderTextSizeStepperController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFSafariViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFAutoFillInputView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFAutomaticPasswordInputViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFBrowserContentViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFCrashBanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFDigitalHealthViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFFindOnPageToolbar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFFormAutoFillController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFFormMetadataController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFNavigationBar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFPageFormatMenuController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFToolbar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFWebProcessPlugIn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFWebProcessPlugInReaderEnabledPageController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFWebProcessSharingLinkExtractor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFPageZoomStepperController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFReaderTextSizeStepperController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFAutoFillInputView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFAutomaticPasswordInputViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFBrowserContentViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFCrashBanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFDigitalHealthViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFindOnPageToolbar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFormAutoFillController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFormMetadataController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFNavigationBar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFPageFormatMenuController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFToolbar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebProcessPlugIn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebProcessPlugInReaderEnabledPageController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebProcessSharingLinkExtractor
|| __TEXT.__const _SFMaximumRecentlyClosedTabCount
|| __TEXT.__const __SFAuthenticationContextInvalidatedError
|| __TEXT.__const __SFAuthenticationContextNoTimeout
|| __TEXT.__const __SFMailContentTypeNull
|| __TEXT.__text _SFDebugMenuEnabled
|| __TEXT.__text __SFAnalyticsValueForShortcutItemType
|| __TEXT.__text __SFContextInfoWithComment
|| __TEXT.__text __SFDeviceRegionCodeIsChina
|| __TEXT.__text __SFDeviceRegionCodeIsRussia
|| __TEXT.__text __SFDownloadingFileTypeFromUTIAndMIMEType
|| __TEXT.__text __SFIncrementAggdKey
|| __TEXT.__text __SFLocalizedTitleStringForShortcutItemType
|| __TEXT.__text __SFPopoverSourceInfoForViewController
|| __TEXT.__text __SFPopoverSourceInfoUnwrap
|| __TEXT.__text __SFPreferredLanguagesIncludesAnyLanguage
|| __TEXT.__text __SFPreferredMailContentTypeForActivityContentType
|| __TEXT.__text __SFRequestDesktopSiteActivitySourceJavaScriptString
|| __TEXT.__text __SFSetAggdKey
|| __TEXT.__text __SFSetAggdKeyAlways
|| __TEXT.__text __SFShouldShowChineseFeatures
|| __TEXT.__text __SFShouldShowLinkPreviews
|| __TEXT.__text __SFShouldShowRussianFeatures
|| __TEXT.__text __SFTypeIsExtractableArchive
|| __TEXT.__text __SFUIActionForToggleShowLinkPreviews
__ AVFoundation: _AVLayerVideoGravityResizeAspectFill
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVMetadataObjectTypeQRCode
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDevice
__ AVFoundation: _OBJC_CLASS_$_AVCaptureDeviceInput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureMetadataOutput
__ AVFoundation: _OBJC_CLASS_$_AVCaptureSession
__ AVFoundation: _OBJC_CLASS_$_AVCaptureVideoPreviewLayer
__ AppSupport: _CPGetDeviceRegionCode
__ AppSupport: _CPNetworkObserverReachable
__ AppSupport: _CPSharedResourcesDirectory
__ AppSupport: _OBJC_CLASS_$_CPAggregateDictionary
__ AppSupport: _OBJC_CLASS_$_CPNetworkObserver
__ AuthKit: _OBJC_CLASS_$_AKAuthorizationController
__ AuthenticationServices: _ASExtensionErrorDomain
__ AuthenticationServices: _ASExtensionLocalizedFailureReasonErrorKey
__ AuthenticationServices: _OBJC_CLASS_$_ASAccountAuthenticationModificationController
__ AuthenticationServices: _OBJC_CLASS_$_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest
__ AuthenticationServices: _OBJC_CLASS_$_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest
__ AuthenticationServices: _OBJC_CLASS_$_ASCredentialServiceIdentifier
__ AuthenticationServices: _OBJC_CLASS_$_ASPasswordCredential
__ AuthenticationServices: _OBJC_CLASS_$_ASPasswordCredentialIdentity
__ AuthenticationServices: _OBJC_CLASS_$_ASWebAuthenticationSession
__ AuthenticationServices: _OBJC_CLASS_$__ASAccountAuthenticationModificationExtensionManager
__ AuthenticationServices: _OBJC_CLASS_$__ASCredentialListViewController
__ AuthenticationServices: _OBJC_CLASS_$__ASIncomingCallObserver
__ AuthenticationServices: _OBJC_CLASS_$__ASPasswordCredentialAuthenticationViewController
__ BackBoardServices: _BKSApplicationStateAll
__ BackBoardServices: _BKSApplicationStateDisplayIDKey
__ BackBoardServices: _BKSApplicationStateKey
__ BackBoardServices: _BKSApplicationStateProcessIDKey
__ BackBoardServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeliveryManager
__ CFNetwork: _NSURLAuthenticationMethodClientCertificate
__ CFNetwork: _NSURLAuthenticationMethodDefault
__ CFNetwork: _NSURLAuthenticationMethodHTMLForm
__ CFNetwork: _NSURLAuthenticationMethodHTTPBasic
__ CFNetwork: _NSURLAuthenticationMethodHTTPDigest
__ CFNetwork: _NSURLAuthenticationMethodNTLM
__ CFNetwork: _NSURLAuthenticationMethodOAuth
__ CFNetwork: _NSURLAuthenticationMethodServerTrust
__ CFNetwork: _OBJC_CLASS_$_NSHTTPCookie
__ CFNetwork: _OBJC_CLASS_$_NSHTTPCookieStorage
__ CFNetwork: _OBJC_CLASS_$_NSHTTPURLResponse
__ CFNetwork: _OBJC_CLASS_$_NSURLCredential
__ CFNetwork: _OBJC_CLASS_$_NSURLCredentialStorage
__ CFNetwork: _OBJC_CLASS_$_NSURLProtectionSpace
__ CFNetwork: _OBJC_CLASS_$_NSURLRequest
__ CFNetwork: _OBJC_CLASS_$_NSURLResponse
__ CFNetwork: __kCFStreamErrorCodeKey
__ CFNetwork: _kCFStreamPropertySSLPeerTrust
__ Celestial: _AVSystemController_PIDToInheritApplicationStateFrom
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CertUI: _OBJC_CLASS_$_CertUIPrompt
__ CertUI: _OBJC_CLASS_$_CertUITrustManager
__ CertUI: _kCertUIServiceTypeHTTPS
__ CertUI: _kCertUITrustPromptOptionsAllowCertificateTrustKey
__ CertUI: _kCertUITrustPromptOptionsShowContinueKey
__ Contacts: _CNContactBirthdayKey
__ Contacts: _CNContactEmailAddressesKey
__ Contacts: _CNContactPhoneNumbersKey
__ Contacts: _CNContactPostalAddressesKey
__ Contacts: _CNContactUrlAddressesKey
__ Contacts: _CNLabelHome
__ Contacts: _CNLabelWork
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ Contacts: _OBJC_CLASS_$_CNContactVCardSerialization
__ Contacts: _OBJC_CLASS_$_CNLabeledValue
__ Contacts: _OBJC_CLASS_$_CNPostalAddressFormatter
__ ContactsUI: _OBJC_CLASS_$_CNContactViewController
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFStringTokenizerCreate
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleCountryCode
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLIsExcludedFromBackupKey
__ CoreFoundation: _NSURLTypeIdentifierKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleDisplayNameKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleNameKey
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextClearRect
__ CoreGraphics: _CGContextDrawImageFromRect
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextSetBlendMode
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreLocation: _OBJC_CLASS_$_CLInUseAssertion
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreServices: _LSDisableURLOverrides
__ CoreServices: _LSFileProviderStringKey
__ CoreServices: _LSOpenApplicationPayloadOptionsKey
__ CoreServices: _LSReferrerURLKey
__ CoreServices: _LSRequireOpenInPlaceKey
__ CoreServices: _OBJC_CLASS_$_LSAppLink
__ CoreServices: _OBJC_CLASS_$_LSApplicationExtensionRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSBundleRecord
__ CoreServices: _OBJC_CLASS_$_LSDocumentProxy
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ CoreServices: _UTTypeConformsTo
__ CoreServices: _UTTypeCopyDescription
__ CoreServices: _UTTypeCopyPreferredTagWithClass
__ CoreServices: _UTTypeCreatePreferredIdentifierForTag
__ CoreServices: _UTTypeEqual
__ CoreServices: _UTTypeIsDynamic
__ CoreServices: __LSHandlerRankOwner
__ CoreServices: __kUTTypePassBundle
__ CoreServices: __kUTTypePassData
__ CoreServices: _kUTTagClassFilenameExtension
__ CoreServices: _kUTTagClassMIMEType
__ CoreServices: _kUTTypeAudio
__ CoreServices: _kUTTypeBzip2Archive
__ CoreServices: _kUTTypeCalendarEvent
__ CoreServices: _kUTTypeContact
__ CoreServices: _kUTTypeData
__ CoreServices: _kUTTypeEmailMessage
__ CoreServices: _kUTTypeGNUZipArchive
__ CoreServices: _kUTTypeHTML
__ CoreServices: _kUTTypeImage
__ CoreServices: _kUTTypeMovie
__ CoreServices: _kUTTypePDF
__ CoreServices: _kUTTypePlainText
__ CoreServices: _kUTTypePropertyList
__ CoreServices: _kUTTypeText
__ CoreServices: _kUTTypeURL
__ CoreServices: _kUTTypeUTF8PlainText
__ CoreServices: _kUTTypeWebArchive
__ CoreServices: _kUTTypeZipArchive
__ CoreSuggestions: _OBJC_CLASS_$_SGSuggestionsService
__ CoreTelephony: _OBJC_CLASS_$_CTBundle
__ CoreTelephony: _OBJC_CLASS_$_CTXPCServiceSubscriptionContext
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreText: _CTFontDescriptorCreateWithAttributes
__ CoreText: _CTFontDescriptorMatchFontDescriptorsWithProgressHandler
__ CoreText: _CTLineCreateWithAttributedString
__ CoreText: _CTLineGetOffsetForStringIndex
__ CoreText: _CTTypesetterCreateWithAttributedString
__ CoreText: _CTTypesetterSuggestLineBreak
__ CoreText: _kCTFontDownloadableAttribute
__ CoreText: _kCTFontDownloadedAttribute
__ CoreText: _kCTFontFamilyNameAttribute
__ DeviceManagement: _OBJC_CLASS_$_DMFApplicationPolicyMonitor
__ DocumentManagerCore: _OBJC_CLASS_$_DOCDownloadImportManager
__ DocumentManagerCore: _OBJC_CLASS_$_DOCManagedPermission
__ FileProvider: _FPExtendBookmarkForDocumentURL
__ FileProvider: _FPUpdateLastUsedDate
__ FileProvider: _OBJC_CLASS_$_FPItemManager
__ FileProvider: _OBJC_CLASS_$_FPProviderDomain
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSExtensionJavaScriptFinalizeArgumentKey
__ Foundation: _NSExtensionJavaScriptPreprocessingResultsKey
__ Foundation: _NSExtensionPointName
__ Foundation: _NSFileSize
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSProgressFileOperationKindDownloading
__ Foundation: _NSStringFromClass
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSURLErrorFailingURLErrorKey
__ Foundation: _NSURLErrorFailingURLStringErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSUserActivityTypeBrowsingWeb
__ Foundation: _NSUserName
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSByteCountFormatter
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionItem
__ Foundation: _OBJC_CLASS_$_NSFileCoordinator
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSItemProvider
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSProxy
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSProxy
__ Foundation: __NSDictionaryOfVariableBindings
__ GraphicsServices: _GSCurrentEventTimestamp
__ GraphicsServices: _GSEventIsHardwareKeyboardAttached
__ JavaScriptCore: _JSContextGetGlobalContext
__ JavaScriptCore: _JSContextGetGlobalObject
__ JavaScriptCore: _JSContextGetGroup
__ JavaScriptCore: _JSRemoteInspectorSetParentProcessInformation
__ JavaScriptCore: _JSRemoteInspectorStart
__ JavaScriptCore: _JSScriptCreateReferencingImmortalASCIIText
__ JavaScriptCore: _JSScriptEvaluate
__ JavaScriptCore: _JSValueIsObject
__ JavaScriptCore: _JSValueIsString
__ JavaScriptCore: _OBJC_CLASS_$_JSContext
__ JavaScriptCore: _OBJC_CLASS_$_JSValue
__ LocalAuthentication: _LAErrorDomain
__ LocalAuthentication: _LAErrorSubcodeKey
__ LocalAuthentication: _OBJC_CLASS_$_LAContext
__ ManagedConfiguration: _MCEffectiveSettingsChangedNotification
__ ManagedConfiguration: _MCFeatureAllowedSafariPasswordAutoFillDomains
__ ManagedConfiguration: _MCFeaturePasswordAutoFillAllowed
__ ManagedConfiguration: _MCFeatureSafariAcceptCookies
__ ManagedConfiguration: _MCFeatureSafariAutoFillAllowed
__ ManagedConfiguration: _MCFeatureSafariFraudWarningForced
__ ManagedConfiguration: _MCFeatureSafariJavaScriptAllowed
__ ManagedConfiguration: _MCFeatureSafariPopUpsAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MapKit: _MKMapItemTypeIdentifier
__ MapKit: _OBJC_CLASS_$_MKMapItem
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHUDController
__ MobileIcons: _LICreateIconFromCachedBitmap
__ MobileSafari: _OBJC_CLASS_$_SFApplicationManifestFetcher
__ MobileSafari: _OBJC_CLASS_$_SFBannerTheme
__ MobileSafari: _OBJC_CLASS_$_SFBookmarksLockCoordinator
__ MobileSafari: _OBJC_CLASS_$_SFBrowserMenuProvider
__ MobileSafari: _OBJC_CLASS_$_SFDialog
__ MobileSafari: _OBJC_CLASS_$_SFDialogController
__ MobileSafari: _OBJC_CLASS_$_SFFeatureManager
__ MobileSafari: _OBJC_CLASS_$_SFManageWebExtensionsViewController
__ MobileSafari: _OBJC_CLASS_$_SFNavigationBarItem
__ MobileSafari: _OBJC_CLASS_$_SFNavigationBarToggleButton
__ MobileSafari: _OBJC_CLASS_$_SFOverlayProvider
__ MobileSafari: _OBJC_CLASS_$_SFPopoverSizingTableViewController
__ MobileSafari: _OBJC_CLASS_$_SFSystemAlert
__ MobileSafari: _OBJC_CLASS_$_SFThemeColorEffectView
__ MobileSafari: _OBJC_CLASS_$_SFURLLabel
__ MobileSafari: _OBJC_CLASS_$_SFUnifiedBarButton
__ MobileSafari: _OBJC_CLASS_$_SFUnifiedBarItem
__ MobileSafari: _OBJC_CLASS_$_SFUnifiedBarItemArrangement
__ MobileSafari: _OBJC_CLASS_$_SFUnifiedBarItemView
__ MobileSafari: _OBJC_CLASS_$_SFWebExtension
__ MobileSafari: _OBJC_CLASS_$_SFWebExtensionsController
__ MobileSafari: _OBJC_CLASS_$_SFWebFormAccessoryViewWrapper
__ MobileSafari: _OBJC_CLASS_$__SFBarTheme
__ MobileSafari: _OBJC_CLASS_$__SFCompressedBarButton
__ MobileSafari: _OBJC_CLASS_$__SFDimmingButton
__ MobileSafari: _OBJC_CLASS_$__SFFluidProgressView
__ MobileSafari: _OBJC_CLASS_$__SFSavedAccountTouchIconRequest
__ MobileSafari: _OBJC_CLASS_$__SFSiteIconView
__ MobileSafari: _OBJC_CLASS_$__SFSiteMetadataManager
__ MobileSafari: _OBJC_IVAR_$_SFWebExtensionsController._dialogController
__ MobileSafari: _OBJC_METACLASS_$_SFPopoverSizingTableViewController
__ MobileSafari: _OBJC_METACLASS_$_SFUnifiedBarItem
__ MobileSafari: _OBJC_METACLASS_$_SFUnifiedBarItemView
__ MobileSafari: _OBJC_METACLASS_$__SFBarTheme
__ MobileSafari: _SFAccessibilityTitleForBarItem
__ MobileSafari: _SFBarBackgroundAlphaForSquishTransformFactor
__ MobileSafari: _SFBarContentAlphaForSquishTransformFactor
__ MobileSafari: _SFBasicDialogActionXGlyph
__ MobileSafari: _SFCreateAppSuggestionBannerFromMetaTagContent
__ MobileSafari: _SFDataOwnerForWebViewInteraction
__ MobileSafari: _SFDefaultWebExtensionsPreferenceValues
__ MobileSafari: _SFDeferrableUpdateViewCanUpdateContents
__ MobileSafari: _SFDeferrableUpdateViewDidMoveToWindow
__ MobileSafari: _SFDeferrableUpdateViewShouldAttemptToUpdateContents
__ MobileSafari: _SFEnableCapsuleInCompactPadKey
__ MobileSafari: _SFEnableFormatMenuInUnifiedBarKey
__ MobileSafari: _SFEnableInterstellar
__ MobileSafari: _SFEnableStandaloneTabBarKey
__ MobileSafari: _SFEnableTabGroupSuggestions
__ MobileSafari: _SFFocusGroupIdentifierForOwner
__ MobileSafari: _SFPreferredCapsuleLayoutStyleKey
__ MobileSafari: _SFShouldHandleSelectionForPresses
__ MobileSafari: _SFStandardStatusBarHeight
__ MobileSafari: _SFSupportsPegasus
__ MobileSafari: _SFSystemImageNameForBarItem
__ MobileSafari: _SFSystemImageNameForTogglingMediaStateIcon
__ MobileSafari: _SFTintImage
__ MobileSafari: _SFTitleForTogglingMediaStateIcon
__ MobileSafari: _SFUnifiedBarShowRectangularTabsInSeparateBarKey
__ MobileSafari: _SFWebExtensionIdentifierToBaseURIMapBundleKey
__ MobileSafari: _SFWebExtensionIdentifierToWebExtensionDataMapBundleKey
__ MobileSafari: __SFAccessibilityIdentifierForBarItem
__ MobileSafari: __SFAllowMediaCaptureOnInsecureSites
__ MobileSafari: __SFApplePayDisclosureAllowedKey
__ MobileSafari: __SFApplicationNameForDesktopUserAgent
__ MobileSafari: __SFApplicationNameForUserAgent
__ MobileSafari: __SFAudioPlaybackRequiresUserActionKey
__ MobileSafari: __SFAutomaticallyArchiveReadingListItemsEnabledKey
__ MobileSafari: __SFAutoplayPlayingPauseQuirkEnabledKey
__ MobileSafari: __SFBackdropGroupNameForOwner
__ MobileSafari: __SFBarItemEnumerateCases
__ MobileSafari: __SFBarItemNull
__ MobileSafari: __SFCeilingFloatToPixels
__ MobileSafari: __SFClamp
__ MobileSafari: __SFContentBlockerStateURL
__ MobileSafari: __SFContentBlockerStoreURL
__ MobileSafari: __SFCustomUserAgentStringIfNeeded
__ MobileSafari: __SFDebugContentDispositionHeaderStartsDownloadsKey
__ MobileSafari: __SFDebugDownloadAttributeForcesDownloadsKey
__ MobileSafari: __SFDebugEnableDownloadsInSubframesKey
__ MobileSafari: __SFDebugPromptForDownloadsOnNavigationResponseKey
__ MobileSafari: __SFDeviceAlertStyle
__ MobileSafari: __SFDeviceIsPad
__ MobileSafari: __SFDeviceStatusBarHasNonTransparentBackground
__ MobileSafari: __SFDeviceSupportsDesktopSitesByDefault
__ MobileSafari: __SFDeviceSupportsHighQualityGraphics
__ MobileSafari: __SFDisableICECandidateFiltering
__ MobileSafari: __SFDownloadExpirationIntervalDefaultsKey
__ MobileSafari: __SFEnableDownloadImport
__ MobileSafari: __SFEnableEnumeratingAllNetworkInterfaces
__ MobileSafari: __SFEnableMockCaptureDevices
__ MobileSafari: __SFEnablePasswordManagerDemoModeKey
__ MobileSafari: __SFEqualWithEpsilon
__ MobileSafari: __SFFloorFloatToPixels
__ MobileSafari: __SFGreaterThanOrEqualWithEpsilon
__ MobileSafari: __SFIPhoneSafariUserAgentString
__ MobileSafari: __SFIconsInTabsEnabledKey
__ MobileSafari: __SFImageForMediaStateIcon
__ MobileSafari: __SFInlineMediaPlaybackRequiresPlaysInlineAttributeKey
__ MobileSafari: __SFInsetIsInvalid
__ MobileSafari: __SFInterpolate
__ MobileSafari: __SFInvisibleAutoplayNotPermittedKey
__ MobileSafari: __SFIsDarkTintStyle
__ MobileSafari: __SFIsPrivateTintStyle
__ MobileSafari: __SFJavaScriptCanOpenWindowsAutomaticallyDefaultsKey
__ MobileSafari: __SFJavaScriptEnabledDefaultsKey
__ MobileSafari: __SFLastUnviewedDownloadDateKey
__ MobileSafari: __SFLegacyEncryptedMediaAPIEnabledKey
__ MobileSafari: __SFMacSafariUserAgentString
__ MobileSafari: __SFMainContentUserGestureOverrideEnabledKey
__ MobileSafari: __SFMediaPlaybackAllowsInlineKey
__ MobileSafari: __SFMediaPlaybackRequiresUserActionKey
__ MobileSafari: __SFMediaSourceEnabledKey
__ MobileSafari: __SFMediaStateIconIsMuted
__ MobileSafari: __SFMediaStateIconMutedVariant
__ MobileSafari: __SFMobileDeviceIconForOrientation
__ MobileSafari: __SFOnePixel
__ MobileSafari: __SFOpenLinksInBackgroundDefaultsKey
__ MobileSafari: __SFPerDocumentAutoplayBehaviorQuirkEnabledKey
__ MobileSafari: __SFPrivateBrowsingDefaultsKey
__ MobileSafari: __SFReaderConfigurationDefaultsKey
__ MobileSafari: __SFReadingListFetcherScheduleBackgroundTasksImmediatelyKey
__ MobileSafari: __SFRoundEdgeInsetsToPixels
__ MobileSafari: __SFRoundFloatToPixels
__ MobileSafari: __SFRoundPointToPixels
__ MobileSafari: __SFRoundRectToPixels
__ MobileSafari: __SFSFAppContainerURL
__ MobileSafari: __SFSafariContainerPath
__ MobileSafari: __SFSafariContainerURL
__ MobileSafari: __SFSafariHighLevelDomainsAndPortsToUseOnlyAvailableIdentityWithoutPromptingSettingsKey
__ MobileSafari: __SFSafariIconLinkImage
__ MobileSafari: __SFSafariNonContaineredSettingsDirectoryPath
__ MobileSafari: __SFSafariPerSitePreferenceDidChangeNotification
__ MobileSafari: __SFSafariTestContentDirectoryPath
__ MobileSafari: __SFScreenScale
__ MobileSafari: __SFShouldCaptureAudioInUIProcessKey
__ MobileSafari: __SFSizeClassForWidth
__ MobileSafari: __SFToolbarContentSizeCategoryForPreferredCategory
__ MobileSafari: __SFVideoPlaybackRequiresUserActionKey
__ MobileSafari: __SFWarnAboutFraudulentWebsitesDefaultsKey
__ MobileSafari: __SFWebKitShowLinkPreviewsDefaultsKey
__ MobileSafari: __SFWebKitSiteSpecificHacksEnabledKey
__ MobileSafari: __SFWebKitWebAuthenticationDefaultsKey
__ MobileSafari: __SFWidthIsCompactSizeClass
__ MobileSafari: _kLastSelectedBookmarksFolderDefaultsKey
__ MobileSafari: _kSafariLastSelectedBookmarksFolderFavoritesFolder
__ OnBoardingKit: _OBJC_CLASS_$_OBBundle
__ OnBoardingKit: _OBJC_CLASS_$_OBPrivacyPresenter
__ PencilKit: _OBJC_CLASS_$_PKScribbleInteraction
__ PowerLog: _PLLogRegisteredEvent
__ PowerLog: _PLShouldLogRegisteredEvent
__ Preferences: _OBJC_CLASS_$_PSListController
__ Preferences: _OBJC_METACLASS_$_PSListController
__ Preferences: _PreferencesTableViewCellLeftPad
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CAFrameRateRangeMake
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _OBJC_CLASS_$_CAAnimationGroup
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _kCAAnimationAbsolute
__ QuartzCore: _kCAAnimationNonZero
__ QuartzCore: _kCAAnimationRelative
__ QuartzCore: _kCACornerCurveCircular
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFillModeBoth
__ QuartzCore: _kCAMediaTimingFunctionDefault
__ QuickLookThumbnailing: _OBJC_CLASS_$_QLThumbnailGenerationRequest
__ QuickLookThumbnailing: _OBJC_CLASS_$_QLThumbnailGenerator
__ SafariFoundation: _OBJC_CLASS_$_SFAppAutoFillOneTimeCodeProvider
__ SafariFoundation: _OBJC_CLASS_$_SFAutoFillFeatureManager
__ SafariFoundation: _OBJC_CLASS_$_SFAutoFillHelperProxy
__ SafariFoundation: _OBJC_CLASS_$_SFCredentialProviderExtensionHelperProxy
__ SafariFoundation: _OBJC_CLASS_$_SFCredentialProviderExtensionManager
__ SafariFoundation: _OBJC_CLASS_$_SFDomainAssociationUtilities
__ SafariFoundation: _OBJC_CLASS_$_SFPasswordCredentialIdentity
__ SafariFoundation: _OBJC_CLASS_$_SFSafariCredential
__ SafariFoundation: _OBJC_CLASS_$_SFSafariCredentialStore
__ SafariFoundation: _OBJC_CLASS_$_SFSharablePassword
__ SafariFoundation: _OBJC_CLASS_$_SFSharablePasswordReceiver
__ SafariFoundation: _OBJC_CLASS_$_SFSuggestedUserProvider
__ SafariFoundation: _SFAccountModificationExtensionSupportsStrongPasswordChange
__ SafariFoundation: _SFAccountModificationExtensionSupportsUpgradeToSignInWithApple
__ SafariFoundation: _SFAccountModificationPasswordGenerationRequirements
__ SafariFoundation: _SFAutoFillHelperErrorDomain
__ SafariSharedUI: _OBJC_CLASS_$_WBSAllowedLegacyTLSHostManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsLogger
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariActivatedHomeScreenQuickActionEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariAutoFillAuthenticationEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariAutoFillAuthenticationPreferenceEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariDidTerminateWebProcessBeforeNavigation
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariEnterTwoUpEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariTappedOnToolbarButtonEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariTwoFingerTappedOnLinkEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariUsingPrivateBrowsingEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerDismissedEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerPresentedFromHostAppEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerTappedOnToolbarButtonEvent
__ SafariSharedUI: _OBJC_CLASS_$_WBSAppLink
__ SafariSharedUI: _OBJC_CLASS_$_WBSAutoFillQuirksManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSAutomaticReaderActivationManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSBundleWebExtensionsController
__ SafariSharedUI: _OBJC_CLASS_$_WBSCache
__ SafariSharedUI: _OBJC_CLASS_$_WBSCertificateWarningPageContext
__ SafariSharedUI: _OBJC_CLASS_$_WBSCloudTab
__ SafariSharedUI: _OBJC_CLASS_$_WBSCoalescedAsynchronousWriter
__ SafariSharedUI: _OBJC_CLASS_$_WBSConfigurationDataTransformer
__ SafariSharedUI: _OBJC_CLASS_$_WBSContentBlockersPreferenceManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSCredentialMatch
__ SafariSharedUI: _OBJC_CLASS_$_WBSCredentialMatchCriteria
__ SafariSharedUI: _OBJC_CLASS_$_WBSCreditCardData
__ SafariSharedUI: _OBJC_CLASS_$_WBSDigitalHealthManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSFeatureAvailability
__ SafariSharedUI: _OBJC_CLASS_$_WBSFluidProgressController
__ SafariSharedUI: _OBJC_CLASS_$_WBSFluidProgressState
__ SafariSharedUI: _OBJC_CLASS_$_WBSFormAutoFillMetadataCorrector
__ SafariSharedUI: _OBJC_CLASS_$_WBSFormControlMetadata
__ SafariSharedUI: _OBJC_CLASS_$_WBSFormDataController
__ SafariSharedUI: _OBJC_CLASS_$_WBSFormMetadata
__ SafariSharedUI: _OBJC_CLASS_$_WBSFormMetadataController
__ SafariSharedUI: _OBJC_CLASS_$_WBSGeolocationPreferenceManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSHideMyEmailManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSHistory
__ SafariSharedUI: _OBJC_CLASS_$_WBSHistoryAccessSessionProxy
__ SafariSharedUI: _OBJC_CLASS_$_WBSImageUtilities
__ SafariSharedUI: _OBJC_CLASS_$_WBSMultiRoundAutoFillManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPageZoomPreferenceManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSParsecABGroupManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordAutoFillUtilities
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordBreachManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordGenerationManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordManagerURL
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordPickerHintStringGenerator
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordWarningHideMarker
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordWarningManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPasswordWarningStore
__ SafariSharedUI: _OBJC_CLASS_$_WBSPerSitePreference
__ SafariSharedUI: _OBJC_CLASS_$_WBSPerSitePreferenceManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPerSitePreferenceTimeout
__ SafariSharedUI: _OBJC_CLASS_$_WBSPerSitePreferencesSQLiteStore
__ SafariSharedUI: _OBJC_CLASS_$_WBSPermissionDialogThrottler
__ SafariSharedUI: _OBJC_CLASS_$_WBSPersistentPropertyListStore
__ SafariSharedUI: _OBJC_CLASS_$_WBSPrivacyProxyAvailabilityManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSPrivacyReportData
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderAvailabilityCheckResult
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderConfigurationManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderFontDownloadManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderFontManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderNavigationPolicyDecider
__ SafariSharedUI: _OBJC_CLASS_$_WBSReaderResources
__ SafariSharedUI: _OBJC_CLASS_$_WBSRecentWebSearchesController
__ SafariSharedUI: _OBJC_CLASS_$_WBSRecentlyUsedAutoFillSet
__ SafariSharedUI: _OBJC_CLASS_$_WBSRemotePlistController
__ SafariSharedUI: _OBJC_CLASS_$_WBSSQLiteDatabase
__ SafariSharedUI: _OBJC_CLASS_$_WBSSQLiteStatement
__ SafariSharedUI: _OBJC_CLASS_$_WBSSavedAccount
__ SafariSharedUI: _OBJC_CLASS_$_WBSSavedAccountChangeRequest
__ SafariSharedUI: _OBJC_CLASS_$_WBSSavedAccountStore
__ SafariSharedUI: _OBJC_CLASS_$_WBSScopeExitHandler
__ SafariSharedUI: _OBJC_CLASS_$_WBSSearchImpressionAnalyticsRecorder
__ SafariSharedUI: _OBJC_CLASS_$_WBSSearchProvider
__ SafariSharedUI: _OBJC_CLASS_$_WBSSecIdentitiesCache
__ SafariSharedUI: _OBJC_CLASS_$_WBSSingleCreditCardData
__ SafariSharedUI: _OBJC_CLASS_$_WBSSiriIntelligenceDonor
__ SafariSharedUI: _OBJC_CLASS_$_WBSTOTPGenerator
__ SafariSharedUI: _OBJC_CLASS_$_WBSTabDialogCancellationExemption
__ SafariSharedUI: _OBJC_CLASS_$_WBSTemplateIconMonogramGenerator
__ SafariSharedUI: _OBJC_CLASS_$_WBSThemeColorUtilities
__ SafariSharedUI: _OBJC_CLASS_$_WBSTouchIconCache
__ SafariSharedUI: _OBJC_CLASS_$_WBSTouchIconResponse
__ SafariSharedUI: _OBJC_CLASS_$_WBSTouchIconWebProcessPlugInPageController
__ SafariSharedUI: _OBJC_CLASS_$_WBSTranslationConsentAlertHelper
__ SafariSharedUI: _OBJC_CLASS_$_WBSTranslationContext
__ SafariSharedUI: _OBJC_CLASS_$_WBSURLCompletionSessionProxy
__ SafariSharedUI: _OBJC_CLASS_$_WBSURLSpoofingMitigator
__ SafariSharedUI: _OBJC_CLASS_$_WBSUserAgentQuirksManager
__ SafariSharedUI: _OBJC_CLASS_$_WBSUserMediaPermissionController
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebExtensionToolbarItem
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebExtensionURLSchemeHandler
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebExtensionUtilities
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebExtensionWebProcessPlugInPageController
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebExtensionsController
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebProcessPlugIn
__ SafariSharedUI: _OBJC_CLASS_$_WBSWebProcessPlugInPageController
__ SafariSharedUI: _OBJC_CLASS_$_WBSWellKnownURLResponseCodeReliabilityChecker
__ SafariSharedUI: _OBJC_IVAR_$_WBSAnalyticsLogger._analyticsSynchronizationQueue
__ SafariSharedUI: _OBJC_IVAR_$_WBSExtensionsController._delegate
__ SafariSharedUI: _OBJC_METACLASS_$_WBSConfigurationDataTransformer
__ SafariSharedUI: _OBJC_METACLASS_$_WBSContentBlockersPreferenceManager
__ SafariSharedUI: _OBJC_METACLASS_$_WBSFeatureAvailability
__ SafariSharedUI: _OBJC_METACLASS_$_WBSFormMetadataController
__ SafariSharedUI: _OBJC_METACLASS_$_WBSGeolocationPreferenceManager
__ SafariSharedUI: _OBJC_METACLASS_$_WBSHistoryAccessSessionProxy
__ SafariSharedUI: _OBJC_METACLASS_$_WBSPageZoomPreferenceManager
__ SafariSharedUI: _OBJC_METACLASS_$_WBSPerSitePreferenceManager
__ SafariSharedUI: _OBJC_METACLASS_$_WBSRecentWebSearchesController
__ SafariSharedUI: _OBJC_METACLASS_$_WBSSearchProvider
__ SafariSharedUI: _OBJC_METACLASS_$_WBSSingleCreditCardData
__ SafariSharedUI: _OBJC_METACLASS_$_WBSURLCompletionSessionProxy
__ SafariSharedUI: _OBJC_METACLASS_$_WBSUserMediaPermissionController
__ SafariSharedUI: _OBJC_METACLASS_$_WBSWebExtensionToolbarItem
__ SafariSharedUI: _OBJC_METACLASS_$_WBSWebProcessPlugIn
__ SafariSharedUI: _OBJC_METACLASS_$_WBSWebProcessPlugInPageController
__ SafariSharedUI: _WBSABProxyPropertyFullName
__ SafariSharedUI: _WBSAnalyticsLoginAutoFillProperty
__ SafariSharedUI: _WBSApplicationIdentifierFromAuditToken
__ SafariSharedUI: _WBSAuditTokenHasEntitlement
__ SafariSharedUI: _WBSCameraPreferenceIdentifier
__ SafariSharedUI: _WBSChromeExtensionURLScheme
__ SafariSharedUI: _WBSContentBlockersPreferenceIdentifier
__ SafariSharedUI: _WBSCreditCardTypeFromNumber
__ SafariSharedUI: _WBSCreditCardTypeLocalizedName
__ SafariSharedUI: _WBSDebugShowAPINameInExtensionAccessRequestsPreferenceKey
__ SafariSharedUI: _WBSDebugStubUnsupportedWebExtensionAPIsKey
__ SafariSharedUI: _WBSDisplayTextForCreditCardNumber
__ SafariSharedUI: _WBSDomainWithModifiedPageZoomPreferenceUserInfoKey
__ SafariSharedUI: _WBSDomainWithModifiedReaderPreferenceUserInfoKey
__ SafariSharedUI: _WBSExtensionEnabledStateDidChangeNotification
__ SafariSharedUI: _WBSExtensionStateExtensionRemovedDateKey
__ SafariSharedUI: _WBSExtensionsTelemetryNumberOfDisabledExtensions
__ SafariSharedUI: _WBSExtensionsTelemetryNumberOfDisabledWebExtensions
__ SafariSharedUI: _WBSExtensionsTelemetryNumberOfEnabledExtensions
__ SafariSharedUI: _WBSExtensionsTelemetryNumberOfEnabledWebExtensions
__ SafariSharedUI: _WBSFormAnnotationContactIDKey
__ SafariSharedUI: _WBSFormMetadataControlValueKey
__ SafariSharedUI: _WBSGeolocationPreferenceIdentifier
__ SafariSharedUI: _WBSHistoryDidRemoveHostnamesNotification
__ SafariSharedUI: _WBSHistoryItemsKey
__ SafariSharedUI: _WBSHistoryItemsWereRemovedNotification
__ SafariSharedUI: _WBSHistoryWasClearedNotification
__ SafariSharedUI: _WBSIsEqual
__ SafariSharedUI: _WBSLocalizedDeviceName
__ SafariSharedUI: _WBSLogWithDifferentialPrivacy
__ SafariSharedUI: _WBSMakeAccessibilityIdentifier
__ SafariSharedUI: _WBSMicrophonePreferenceIdentifier
__ SafariSharedUI: _WBSNTPTimeoutInterval
__ SafariSharedUI: _WBSNormalizedCreditCardNumber
__ SafariSharedUI: _WBSPageZoomFactorUserInfoKey
__ SafariSharedUI: _WBSPageZoomPreferenceDidChangeNotification
__ SafariSharedUI: _WBSPasswordManagerURLAllowKey
__ SafariSharedUI: _WBSPasswordManagerURLAllowShowingPasswordDetailIfLocalAuthenticationNotConfiguredKey
__ SafariSharedUI: _WBSPasswordManagerURLChangePasswordDomainKey
__ SafariSharedUI: _WBSPasswordManagerURLChangePasswordUserKey
__ SafariSharedUI: _WBSPasswordManagerURLDidAuthenticateKey
__ SafariSharedUI: _WBSPasswordManagerURLEncryptedPasswordDataKey
__ SafariSharedUI: _WBSPasswordManagerURLEncryptionKeyReferenceKey
__ SafariSharedUI: _WBSPasswordManagerURLSearchBundleIdentifierKey
__ SafariSharedUI: _WBSPasswordManagerURLSearchQueryKey
__ SafariSharedUI: _WBSPasswordManagerURLShowChangePasswordController
__ SafariSharedUI: _WBSPasswordManagerURLTrue
__ SafariSharedUI: _WBSPerSiteAutomaticReaderActivationPreferenceDidChangeNotification
__ SafariSharedUI: _WBSPerSitePreferenceNameAppInfoOverlay
__ SafariSharedUI: _WBSPerSitePreferenceNameRequestDesktopSite
__ SafariSharedUI: _WBSPrivacyProxyChangeNotification
__ SafariSharedUI: _WBSPrivacyProxyICloudSettingsLearnMoreURLString
__ SafariSharedUI: _WBSReaderFontDownloadDidBeginNotification
__ SafariSharedUI: _WBSReaderFontDownloadDidFailNotification
__ SafariSharedUI: _WBSReaderFontDownloadDidFinishNotification
__ SafariSharedUI: _WBSReaderFontDownloadNotificationUserInfoKey
__ SafariSharedUI: _WBSReaderFontDownloadProgressDidChangeNotification
__ SafariSharedUI: _WBSReaderOrTranslationLastActivatedKey
__ SafariSharedUI: _WBSReaderPreferenceIdentifier
__ SafariSharedUI: _WBSRecentlyUsedAutoFillSetDoNotFillIdentifier
__ SafariSharedUI: _WBSRemoteAutoFillQuirksLastUpdateTimePreferenceKey
__ SafariSharedUI: _WBSRequestDesktopSitePreferenceIdentifier
__ SafariSharedUI: _WBSRespondWithRandomDelay
__ SafariSharedUI: _WBSSafariExtensionStateEnabledKey
__ SafariSharedUI: _WBSSampledPageTopColorEnabledKey
__ SafariSharedUI: _WBSSavedAccountMaxNotesCharacterCount
__ SafariSharedUI: _WBSSavedAccountStoreDidChangeNotification
__ SafariSharedUI: _WBSSearchProviderBaiduTrackingCodeTemplateParameterValues
__ SafariSharedUI: _WBSSearchProviderDefinitionScriptingNameKey
__ SafariSharedUI: _WBSSearchProviderDefinitionSearchEngineIDKey
__ SafariSharedUI: _WBSSearchProviderDefinitionSearchEngineIdentifierKey
__ SafariSharedUI: _WBSSearchProviderDefinitionSearchURLTemplateKey
__ SafariSharedUI: _WBSSearchProviderDefinitionShortNameKey
__ SafariSharedUI: _WBSSearchProviderDefinitions
__ SafariSharedUI: _WBSSearchProviderIdentifierBaidu
__ SafariSharedUI: _WBSSearchProviderShortNameBaidu
__ SafariSharedUI: _WBSSearchProviderShortNameBing
__ SafariSharedUI: _WBSSearchProviderShortNameDuckDuckGo
__ SafariSharedUI: _WBSSearchProviderShortNameEcosia
__ SafariSharedUI: _WBSSearchProviderShortNameGoogle
__ SafariSharedUI: _WBSSearchProviderShortNameQihoo
__ SafariSharedUI: _WBSSearchProviderShortNameSogou
__ SafariSharedUI: _WBSSearchProviderShortNameYahoo
__ SafariSharedUI: _WBSSearchProviderShortNameYandex
__ SafariSharedUI: _WBSSecIdentityCopySSLClientAuthenticationChain
__ SafariSharedUI: _WBSTabOrderManagerDefaultPreferenceValues
__ SafariSharedUI: _WBSTouchIconWebViewConfigurationGroupIdentifier
__ SafariSharedUI: _WBSTranslationDetectionDidChangeNotificationName
__ SafariSharedUI: _WBSTranslationDetectionDidChangeNotificationNotificationLevelUserInfoKey
__ SafariSharedUI: _WBSTranslationDetectionDidChangeNotificationWebpageLanguageUserInfoKey
__ SafariSharedUI: _WBSTranslationStateDidChangeNotificationName
__ SafariSharedUI: _WBSWebExtensionTabIDNone
__ SafariSharedUI: _WBSWebExtensionURLScheme
__ SafariSharedUI: _WBSWebExtensionWebProcessPlugInPageGroupIdentifier
__ SafariSharedUI: _WBSWebProcessPlugInSearchEnginesForRedirectToSafeSearchKey
__ SafariSharedUI: _WBSWebsiteShouldStartWithReaderEnabledUserInfoKey
__ SafariSharedUI: _WBSZoomPreferenceIdentifier
__ SafariSharedUI: __WBSLocalizedString
__ SafariSharedUI: __ZN12SafariShared11JSUtilities20globalJSObjectByNameEPK15OpaqueJSContextPKc
__ SafariSharedUI: __ZN12SafariShared11JSUtilities20translateJSValueToNSEPK15OpaqueJSContextPK13OpaqueJSValue
__ SafariSharedUI: __ZN12SafariShared11JSUtilities25callJSMethodWithArgumentsEPK15OpaqueJSContextP13OpaqueJSValuePKcPKPKS4_m
__ SafariSharedUI: __ZN12SafariShared12JSController12staticValuesERN3WTF6VectorI13JSStaticValueLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE
__ SafariSharedUI: __ZN12SafariShared12JSController17scriptObjectReadyEPK15OpaqueJSContext
__ SafariSharedUI: __ZN12SafariShared12JSController29addScriptObjectToGlobalObjectEPK15OpaqueJSContext
__ SafariSharedUI: __ZN12SafariShared12JSControllerC2Ev
__ SafariSharedUI: __ZN12SafariShared12JSControllerD2Ev
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController13staticJSClassEv
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController14loadNewArticleEv
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController15staticFunctionsERN3WTF6VectorI16JSStaticFunctionLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController16scriptObjectNameEv
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController16setArticleLocaleEP8NSString
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController16setConfigurationEP12NSDictionary
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController17setReaderIsActiveEb
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController30evaluateLocalizedStringsScriptEPK15OpaqueJSContext
__ SafariSharedUI: __ZN12SafariShared18ReaderJSController33evaluateSharedUINormalWorldScriptEPK15OpaqueJSContext
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController12staticValuesERN3WTF6VectorI13JSStaticValueLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController13staticJSClassEv
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController14articleContentEv
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController15staticFunctionsERN3WTF6VectorI16JSStaticFunctionLm0ENS1_15CrashOnOverflowELm16ENS1_10FastMallocEEE
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController16scriptObjectNameEv
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController33collectReadingListItemInformationEv
__ SafariSharedUI: __ZN12SafariShared25ArticleFinderJSController41detectAvailabilityForUIProcessDrivenCheckEv
__ SafariSharedUI: __ZN12SafariShared25SuddenTerminationDisabler23enableSuddenTerminationEv
__ SafariSharedUI: __ZN12SafariShared25SuddenTerminationDisablerC1EP8NSString
__ SafariSharedUI: __ZN12SafariShared25TranslatedFileURLProtocol16registerProtocolEPKNS0_12ProtocolInfoE
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController13didFinishLoadEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController17clearAvailabilityEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController20configureProcessPoolEP13WKProcessPool
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController20prepareArticleFinderEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController21determineAvailabilityEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController21didFinishDocumentLoadEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController21originalArticleFinderEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController25checkAvailabilityIfNeededEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController27prepareToTransitionToReaderEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController28detectAvailabilityAfterDelayEdNS_34LoadEventTriggeringReaderDetectionE
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController30readerHasBeenActivatedRecentlyEP6NSDate
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController30setCanRunAvailabilityDetectionEb
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController32extractTextSamplesForTranslationEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController35checkTextSampleAvailabilityIfNeededEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController38extractCanonicalURLForSystemNoteTakingEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController38updateReaderOrTranslationLastActivatedEP13WKProcessPool
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityController45detectAvailabilityAfterSameDocumentNavigationEv
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityControllerC2Ev
__ SafariSharedUI: __ZN12SafariShared28ReaderAvailabilityControllerD2Ev
__ SafariSharedUI: __ZNK12SafariShared18ReaderJSController13reloadArticleEv
__ SafariSharedUI: __ZNK12SafariShared28ReaderAvailabilityController33originalArticleFinderJSControllerEv
__ SafariSharedUI: __ZTVN12SafariShared18ReaderJSControllerE
__ SafariSharedUI: _commandNameKey
__ SafariSharedUI: _defaultTranslationPreferenceValues
__ SafariSharedUI: _extensionComposedIdentifierKey
__ SafariSharedUI: _kMobileSafariChangedExtensionSettingsNotification
__ SafariSharedUI: _showInternalTranslationActions
__ SafariSharedUI: _webExtensionPointIdentifier
__ Security: _SecCertificateCopySubjectSummary
__ Security: _SecCertificateIsValid
__ Security: _SecIdentityCopyCertificate
__ Security: _SecIdentityGetTypeID
__ Security: _SecItemCopyMatching
__ Security: _SecPolicyCreateSSL
__ Security: _SecTrustCopyInfo
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustDeserialize
__ Security: _SecTrustEvaluateWithError
__ Security: _SecTrustGetCertificateAtIndex
__ Security: _SecTrustGetCertificateCount
__ Security: _SecTrustSerialize
__ Security: _kSecAttrAccessGroup
__ Security: _kSecClass
__ Security: _kSecClassIdentity
__ Security: _kSecMatchIssuers
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecReturnRef
__ Security: _kSecTrustInfoCompanyNameKey
__ Security: _kSecTrustInfoExtendedValidationKey
__ Security: _kSecTrustInfoRevocationKey
__ Security: _kSecValueRef
__ SoftLinking: __sl_dlopen
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesAssertion
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesCoordinator
__ SpringBoardServices: _SBSApplicationLaunchOptionBrowserReuseTabKey
__ TelephonyUtilities: _OBJC_CLASS_$_TUDialRequest
__ TelephonyUtilities: _OBJC_CLASS_$_TUJoinConversationRequest
__ TextInput: _OBJC_CLASS_$_TIAutofill
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSLinkAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _NSTrackingAttributeName
__ UIKit: _NSUnderlineStyleAttributeName
__ UIKit: _OBJC_CLASS_$_NSDataAsset
__ UIKit: _OBJC_CLASS_$_NSDiffableDataSourceSnapshot
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSTextAttachment
__ UIKit: _OBJC_CLASS_$_NSTextList
__ UIKit: _OBJC_CLASS_$_UIAction
__ UIKit: _OBJC_CLASS_$_UIActivity
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIActivityItemProvider
__ UIKit: _OBJC_CLASS_$_UIActivityViewController
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationExtensionActivity
__ UIKit: _OBJC_CLASS_$_UIAutofillExtrasSuggestion
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIButtonConfiguration
__ UIKit: _OBJC_CLASS_$_UICollectionView
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UICommand
__ UIKit: _OBJC_CLASS_$_UIContextMenuConfiguration
__ UIKit: _OBJC_CLASS_$_UIContextualAction
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UIDocumentBrowserViewController
__ UIKit: _OBJC_CLASS_$_UIDocumentInteractionController
__ UIKit: _OBJC_CLASS_$_UIDocumentPickerViewController
__ UIKit: _OBJC_CLASS_$_UIDragInteraction
__ UIKit: _OBJC_CLASS_$_UIDragItem
__ UIKit: _OBJC_CLASS_$_UIDragPreview
__ UIKit: _OBJC_CLASS_$_UIDragPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIDropInteraction
__ UIKit: _OBJC_CLASS_$_UIDropProposal
__ UIKit: _OBJC_CLASS_$_UIEventAttribution
__ UIKit: _OBJC_CLASS_$_UIFocusHaloEffect
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIFontMetrics
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIHoverGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIInputView
__ UIKit: _OBJC_CLASS_$_UIInputViewController
__ UIKit: _OBJC_CLASS_$_UIKBScreenTraits
__ UIKit: _OBJC_CLASS_$_UIKeyCommand
__ UIKit: _OBJC_CLASS_$_UIKeyboardImpl
__ UIKit: _OBJC_CLASS_$_UIKeyboardInputModeController
__ UIKit: _OBJC_CLASS_$_UIKeyboardLayout
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UILocalizedIndexedCollation
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIMenu
__ UIKit: _OBJC_CLASS_$_UIMenuController
__ UIKit: _OBJC_CLASS_$_UIMenuItem
__ UIKit: _OBJC_CLASS_$_UINavigationBar
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UINavigationItem
__ UIKit: _OBJC_CLASS_$_UIOpenInIBooksActivity
__ UIKit: _OBJC_CLASS_$_UIOpenURLAction
__ UIKit: _OBJC_CLASS_$_UIOpenURLContext
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPasteboard
__ UIKit: _OBJC_CLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_CLASS_$_UIPointerRegion
__ UIKit: _OBJC_CLASS_$_UIPointerShape
__ UIKit: _OBJC_CLASS_$_UIPointerStyle
__ UIKit: _OBJC_CLASS_$_UIPreviewAction
__ UIKit: _OBJC_CLASS_$_UIPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIPrintInfo
__ UIKit: _OBJC_CLASS_$_UIPrintInteractionController
__ UIKit: _OBJC_CLASS_$_UIPrintPageRenderer
__ UIKit: _OBJC_CLASS_$_UIProgressView
__ UIKit: _OBJC_CLASS_$_UIResponder
__ UIKit: _OBJC_CLASS_$_UISceneOpenURLOptions
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISearchBar
__ UIKit: _OBJC_CLASS_$_UISearchController
__ UIKit: _OBJC_CLASS_$_UISegmentedControl
__ UIKit: _OBJC_CLASS_$_UISelectionFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UISocialActivity
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UISwipeActionsConfiguration
__ UIKit: _OBJC_CLASS_$_UISwitch
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewCellLayoutManagerValue1
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITableViewDiffableDataSource
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedDragPreview
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UITextField
__ UIKit: _OBJC_CLASS_$_UITextSuggestion
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UIToolbar
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIVibrancyEffect
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWebClip
__ UIKit: _OBJC_CLASS_$_UIWebClipLinkTag
__ UIKit: _OBJC_CLASS_$_UIWebGeolocationPolicyDecider
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$__UIActivityItemCustomization
__ UIKit: _OBJC_CLASS_$__UIActivityItemCustomizationGroup
__ UIKit: _OBJC_CLASS_$__UIClickInteraction
__ UIKit: _OBJC_CLASS_$__UIContextualMenuGestureRecognizer
__ UIKit: _OBJC_CLASS_$__UIFallbackPresentationViewController
__ UIKit: _OBJC_CLASS_$__UIRemoteViewController
__ UIKit: _OBJC_CLASS_$__UISheetDetent
__ UIKit: _OBJC_CLASS_$__UISheetPresentationController
__ UIKit: _OBJC_METACLASS_$_UIActivity
__ UIKit: _OBJC_METACLASS_$_UIActivityItemProvider
__ UIKit: _OBJC_METACLASS_$_UIActivityViewController
__ UIKit: _OBJC_METACLASS_$_UIAlertAction
__ UIKit: _OBJC_METACLASS_$_UIAlertController
__ UIKit: _OBJC_METACLASS_$_UIApplicationExtensionActivity
__ UIKit: _OBJC_METACLASS_$_UIBarButtonItem
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UIInputView
__ UIKit: _OBJC_METACLASS_$_UIInputViewController
__ UIKit: _OBJC_METACLASS_$_UIKBScreenTraits
__ UIKit: _OBJC_METACLASS_$_UILabel
__ UIKit: _OBJC_METACLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UINavigationController
__ UIKit: _OBJC_METACLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_METACLASS_$_UIPrintPageRenderer
__ UIKit: _OBJC_METACLASS_$_UIResponder
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UISearchBar
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewCellLayoutManagerValue1
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UITableViewDiffableDataSource
__ UIKit: _OBJC_METACLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_METACLASS_$_UITextSuggestion
__ UIKit: _OBJC_METACLASS_$_UITextView
__ UIKit: _OBJC_METACLASS_$_UIToolbar
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIVisualEffectView
__ UIKit: _OBJC_METACLASS_$__UIRemoteViewController
__ UIKit: _UIActivityTypeAddToReadingList
__ UIKit: _UIActivityTypeAirDrop
__ UIKit: _UIActivityTypeCopyToPasteboard
__ UIKit: _UIActivityTypeMail
__ UIKit: _UIActivityTypeMarkupAsPDF
__ UIKit: _UIActivityTypeMessage
__ UIKit: _UIActivityTypeOpenInIBooks
__ UIKit: _UIActivityTypePrint
__ UIKit: _UIActivityTypeSaveToFiles
__ UIKit: _UIActivityTypeShare
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationLaunchOptionsSourceApplicationKey
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIApplicationWillTerminateNotification
__ UIKit: _UIContentSizeCategoryAccessibilityLarge
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryIsAccessibilityCategory
__ UIKit: _UIContentSizeCategoryLarge
__ UIKit: _UIContentSizeCategoryMedium
__ UIKit: _UIContentSizeCategoryNewValueKey
__ UIKit: _UIContentSizeCategoryUnspecified
__ UIKit: _UIDetectedPasteboardTypesAddressBarSearch
__ UIKit: _UIDetectedPasteboardTypesAddressBarURL
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsMax
__ UIKit: _UIEdgeInsetsSubtract
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCallout
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontTextStyleTitle1
__ UIKit: _UIFontTextStyleTitle2
__ UIKit: _UIFontTextStyleTitle3
__ UIKit: _UIFontWeightLight
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIKeyInputEscape
__ UIKit: _UIKeyboardAutomaticIsOnScreen
__ UIKit: _UIKeyboardFrameEndUserInfoKey
__ UIKit: _UIKeyboardGetDefaultInputModesForLanguage
__ UIKit: _UIKeyboardOrderOutAutomaticToDirectionWithDuration
__ UIKit: _UIKeyboardWillChangeFrameNotification
__ UIKit: _UIKeyboardWillHideNotification
__ UIKit: _UILayoutFittingCompressedSize
__ UIKit: _UILayoutFittingExpandedSize
__ UIKit: _UIMenuControllerWillHideMenuNotification
__ UIKit: _UIPasteboardOptionExpirationDate
__ UIKit: _UIPasteboardTypeAutomatic
__ UIKit: _UIPresentationControllerDismissalTransitionDidEndCompletedKey
__ UIKit: _UIPresentationControllerDismissalTransitionDidEndNotification
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRoundToViewScale
__ UIKit: _UISceneDidActivateNotification
__ UIKit: _UISceneDidEnterBackgroundNotification
__ UIKit: _UISceneWillDeactivateNotification
__ UIKit: _UISceneWillEnterForegroundNotification
__ UIKit: _UIScrollViewDecelerationRateNormal
__ UIKit: _UIStatusBarStyleFromUIWebClipStatusBarStyle
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ UIKit: _UIViewNoIntrinsicMetric
__ UIKit: _UIWebClipStatusBarStyleForMetaTagContent
__ UIKit: _WebClipStatusBarStyleMetaName
__ UIKit: __UIAccessibilityContentSizeCategoryImageAdjustingScaleFactorForTraitCollection
__ UIKit: ___UIApplicationLinkedOnOrAfter
__ UIKitServices: _OBJC_CLASS_$_UISClickAttribution
__ UniformTypeIdentifiers: _OBJC_CLASS_$_UTType
__ UniformTypeIdentifiers: __UTTypePassesData
__ WebBookmarks: _OBJC_CLASS_$_WBTabGroup
__ WebBookmarks: _OBJC_CLASS_$_WebBookmark
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarkCollection
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarkWebFilterSettings
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarksSettingsGateway
__ WebBookmarks: _WebBookmarksDidReloadNotification
__ WebKit: _OBJC_CLASS_$_WKBackForwardListItem
__ WebKit: _OBJC_CLASS_$_WKContentRuleListStore
__ WebKit: _OBJC_CLASS_$_WKDOMElement
__ WebKit: _OBJC_CLASS_$_WKFrameInfo
__ WebKit: _OBJC_CLASS_$_WKNavigationAction
__ WebKit: _OBJC_CLASS_$_WKNavigationResponse
__ WebKit: _OBJC_CLASS_$_WKPreferences
__ WebKit: _OBJC_CLASS_$_WKProcessPool
__ WebKit: _OBJC_CLASS_$_WKUserContentController
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInFrame
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInNodeHandle
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInScriptWorld
__ WebKit: _OBJC_CLASS_$_WKWebView
__ WebKit: _OBJC_CLASS_$_WKWebViewConfiguration
__ WebKit: _OBJC_CLASS_$_WKWebpagePreferences
__ WebKit: _OBJC_CLASS_$_WKWebsiteDataStore
__ WebKit: _OBJC_CLASS_$_WebEvent
__ WebKit: _OBJC_CLASS_$_WebSecurityOrigin
__ WebKit: _OBJC_CLASS_$_WebView
__ WebKit: _OBJC_CLASS_$__WKApplicationManifest
__ WebKit: _OBJC_CLASS_$__WKElementAction
__ WebKit: _OBJC_CLASS_$__WKFrameHandle
__ WebKit: _OBJC_CLASS_$__WKProcessPoolConfiguration
__ WebKit: _OBJC_CLASS_$__WKRemoteObjectInterface
__ WebKit: _OBJC_CLASS_$__WKWebsiteDataStoreConfiguration
__ WebKit: _OBJC_METACLASS_$_WKWebView
__ WebKit: _WKBundlePageIsUsingEphemeralSession
__ WebKit: _WKBundlePageSetUIClient
__ WebKit: _WKErrorDomain
__ WebKit: _WKStringGetMaximumUTF8CStringSize
__ WebKit: _WKStringGetUTF8CString
__ WebKit: _WebKitErrorDomain
__ WebKit: __WKLegacyErrorDomain
__ WebKit: __WKRecoveryAttempterErrorKey
__ WebUI: _OBJC_CLASS_$_WBUCreditCardDataController
__ WebUI: _OBJC_CLASS_$_WBUFormAutoFillPrompt
__ WebUI: _OBJC_CLASS_$_WBUFormDataController
__ WebUI: _OBJC_CLASS_$_WBUHistory
__ WebUI: _OBJC_CLASS_$_WebUIAlert
__ WebUI: _OBJC_METACLASS_$_WBUFormDataController
__ WebUI: _WBUABStreetKey
__ WebUI: _WBUPasswordGenerationPasswordAcceptedAggdKey
__ WebUI: _WBUPasswordGenerationPromptShownAggdKey
__ WebUI: _incrementAggdKey
__ WebUI: _webuiCookieAcceptPolicyPreferencesKey
__ WirelessDiagnostics: _AWDPostMetric
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _clock_gettime
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_program_minos_at_least
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _sandbox_check
__ libSystem.B.dylib: _setvbuf
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___gxx_personality_v0
__ libcompression.dylib: _compression_decode_buffer
__ libcompression.dylib: _compression_encode_buffer
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libsqlite3.dylib: _sqlite3_create_function_v2
__ libsqlite3.dylib: _sqlite3_result_text
_SFURLTextPreviewViewController : UIViewController
 @property  _SFURLTextPreviewView *previewView
 @property  NSURL *URL

  // instance methods
  -[_SFURLTextPreviewViewController previewView]
  -[_SFURLTextPreviewViewController viewWillLayoutSubviews]
  -[_SFURLTextPreviewViewController _linkActions]
  -[_SFURLTextPreviewViewController setURL:]
  -[_SFURLTextPreviewViewController .cxx_destruct]
  -[_SFURLTextPreviewViewController URL]
  -[_SFURLTextPreviewViewController setPreviewView:]
  -[_SFURLTextPreviewViewController loadView]
  -[_SFURLTextPreviewViewController _activatedElementInfo]
  -[_SFURLTextPreviewViewController initWithURL:]
  -[_SFURLTextPreviewViewController _setLinkActions:]
  -[_SFURLTextPreviewViewController _setActivatedElementInfo:]
  -[_SFURLTextPreviewViewController _previewHeader]


_SFAccountTableConfiguration : NSObject
 @property  BOOL shouldShowIcons
 @property  BOOL shouldShowSearchBar
 @property  BOOL supportsDelete
 @property  BOOL supportsShare

  // instance methods
  -[_SFAccountTableConfiguration supportsDelete]
  -[_SFAccountTableConfiguration shouldShowIcons]
  -[_SFAccountTableConfiguration setShouldShowIcons:]
  -[_SFAccountTableConfiguration shouldShowSearchBar]
  -[_SFAccountTableConfiguration setShouldShowSearchBar:]
  -[_SFAccountTableConfiguration setSupportsDelete:]
  -[_SFAccountTableConfiguration supportsShare]
  -[_SFAccountTableConfiguration setSupportsShare:]


SFAccountCellData : NSObject
 @property  WBSSavedAccount *savedAccount
 @property  WBSPasswordWarning *warning
 @property  NSString *highLevelDomain
 @property  NSString *searchPattern
 @property  BOOL savedAccountIsOnlySavedAccountForHighLevelDomain

  // class methods
  +[SFAccountCellData accountCellDataWithSavedAccount:warning:searchPattern:savedAccountIsOnlySavedAccountForHighLevelDomain:]

  // instance methods
  -[SFAccountCellData .cxx_destruct]
  -[SFAccountCellData isEqual:]
  -[SFAccountCellData warning]
  -[SFAccountCellData highLevelDomain]
  -[SFAccountCellData savedAccount]
  -[SFAccountCellData initWithSavedAccount:warning:searchPattern:savedAccountIsOnlySavedAccountForHighLevelDomain:]
  -[SFAccountCellData searchPattern]
  -[SFAccountCellData savedAccountIsOnlySavedAccountForHighLevelDomain]


_SFAccountTableViewController : UITableViewController <UISearchBarDelegate, UISearchControllerDelegate, UISearchResultsUpdating, SFAccountDetailViewControllerDelegate, _SFAccountIconControllerDelegate>
 @property  UISearchController *searchController
 @property  NSString *searchQuery
 @property  NSString *searchPattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  WBSSavedAccount *savedAccountToRemoveAfterCompletedUpgradeInDetailView

  // instance methods
  -[_SFAccountTableViewController searchQuery]
  -[_SFAccountTableViewController setSearchQuery:]
  -[_SFAccountTableViewController willPresentSearchController:]
  -[_SFAccountTableViewController tableView:willDisplayCell:forRowAtIndexPath:]
  -[_SFAccountTableViewController tableView:didEndDisplayingCell:forRowAtIndexPath:]
  -[_SFAccountTableViewController tableView:willPerformPreviewActionForMenuWithConfiguration:animator:]
  -[_SFAccountTableViewController willDismissSearchController:]
  -[_SFAccountTableViewController searchController]
  -[_SFAccountTableViewController setEditing:animated:]
  -[_SFAccountTableViewController setSearchController:]
  -[_SFAccountTableViewController tableView:previewForDismissingContextMenuWithConfiguration:]
  -[_SFAccountTableViewController updateSearchResultsForSearchController:]
  -[_SFAccountTableViewController tableView:previewForHighlightingContextMenuWithConfiguration:]
  -[_SFAccountTableViewController tableView:canPerformAction:forRowAtIndexPath:withSender:]
  -[_SFAccountTableViewController .cxx_destruct]
  -[_SFAccountTableViewController tableView:performAction:forRowAtIndexPath:withSender:]
  -[_SFAccountTableViewController viewDidLoad]
  -[_SFAccountTableViewController _sceneDidEnterBackground:]
  -[_SFAccountTableViewController _hasMarkedText]
  -[_SFAccountTableViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[_SFAccountTableViewController tableView:willBeginEditingRowAtIndexPath:]
  -[_SFAccountTableViewController viewWillDisappear:]
  -[_SFAccountTableViewController viewWillAppear:]
  -[_SFAccountTableViewController tableView:didEndEditingRowAtIndexPath:]
  -[_SFAccountTableViewController tableView:contextMenuConfigurationForRowAtIndexPath:point:]
  -[_SFAccountTableViewController viewDidDisappear:]
  -[_SFAccountTableViewController positionForBar:]
  -[_SFAccountTableViewController searchPattern]
  -[_SFAccountTableViewController _updateIconForDomain:forCell:]
  -[_SFAccountTableViewController shareSavedAccount:modalPresentationSourceView:]
  -[_SFAccountTableViewController handleContextMenuDeleteForIndexPath:]
  -[_SFAccountTableViewController _tableView:previewForIndexPath:]
  -[_SFAccountTableViewController searchPatternDidUpdate]
  -[_SFAccountTableViewController iconControllerForAccountDetailViewController:]
  -[_SFAccountTableViewController iconDidUpdateForDomain:iconController:]
  -[_SFAccountTableViewController initWithStyle:siteMetadataManager:configuration:]


SFPasswordPickerRemoteViewController : SFPasswordRemoteViewController <SFPasswordPickerRemoteViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordPickerRemoteViewController exportedInterface]
  +[SFPasswordPickerRemoteViewController serviceViewControllerInterface]
  +[SFPasswordPickerRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFPasswordPickerRemoteViewController _canShowWhileLocked]
  -[SFPasswordPickerRemoteViewController selectedCredential:]


_SFBookmarkTextEntryTableViewCell : UITableViewCell
 @property  UITextField *editableTextField

  // instance methods
  -[_SFBookmarkTextEntryTableViewCell layoutMarginsDidChange]
  -[_SFBookmarkTextEntryTableViewCell setSeparatorInset:]
  -[_SFBookmarkTextEntryTableViewCell updateConstraints]
  -[_SFBookmarkTextEntryTableViewCell .cxx_destruct]
  -[_SFBookmarkTextEntryTableViewCell editableTextField]
  -[_SFBookmarkTextEntryTableViewCell safeAreaInsetsDidChange]
  -[_SFBookmarkTextEntryTableViewCell initWithText:autocapitalizationType:autocorrectionType:]


_SFTelephonyNavigationMitigationPolicy : NSObject
 @property  <SFDialogPresenting> *dialogPresenter

  // class methods
  +[_SFTelephonyNavigationMitigationPolicy test_suspiciousClassificationExpirationDuration]

  // instance methods
  -[_SFTelephonyNavigationMitigationPolicy userDeclinedCallPrompt]
  -[_SFTelephonyNavigationMitigationPolicy handleNavigationToURL:completionHandler:]
  -[_SFTelephonyNavigationMitigationPolicy _handleInput:]
  -[_SFTelephonyNavigationMitigationPolicy .cxx_destruct]
  -[_SFTelephonyNavigationMitigationPolicy _checkIfSuspiciousClassificationHasExpiredAndTransitionIfNeeded]
  -[_SFTelephonyNavigationMitigationPolicy userAcceptedCallPrompt]
  -[_SFTelephonyNavigationMitigationPolicy policyAppliesToURL:]
  -[_SFTelephonyNavigationMitigationPolicy setDialogPresenter:]
  -[_SFTelephonyNavigationMitigationPolicy dialogPresenter]


SFAccountListSectionIdentifier : NSObject
 @property  unsigned long type
 @property  NSString *headerText
 @property  NSString *footerText

  // instance methods
  -[SFAccountListSectionIdentifier initWithType:]
  -[SFAccountListSectionIdentifier footerText]
  -[SFAccountListSectionIdentifier headerText]
  -[SFAccountListSectionIdentifier setType:]
  -[SFAccountListSectionIdentifier .cxx_destruct]
  -[SFAccountListSectionIdentifier setFooterText:]
  -[SFAccountListSectionIdentifier isEqual:]
  -[SFAccountListSectionIdentifier setHeaderText:]
  -[SFAccountListSectionIdentifier type]
  -[SFAccountListSectionIdentifier initWithType:headerText:footerText:]


_SFSyntheticClickContext : NSObject
 @property  WKWebView *webView
 @property  WKNavigationAction *navigationAction

  // instance methods
  -[_SFSyntheticClickContext webView]
  -[_SFSyntheticClickContext .cxx_destruct]
  -[_SFSyntheticClickContext initWithWebView:navigationAction:]
  -[_SFSyntheticClickContext navigationAction]


SFActionableSecurityRecommendationCellID : NSObject
 @property  id cellType

  // instance methods
  -[SFActionableSecurityRecommendationCellID .cxx_destruct]
  -[SFActionableSecurityRecommendationCellID cellType]
  -[SFActionableSecurityRecommendationCellID initWithCellType:]


SFPrintPageRenderer : UIPrintPageRenderer <UIPrintInteractionControllerDelegate>
 @property  NSString *URLString
 @property  UIPrintFormatter *contentFormatter
 @property  BOOL printFooter
 @property  <SFPrintPageRendererDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrintPageRenderer .cxx_destruct]
  -[SFPrintPageRenderer URLString]
  -[SFPrintPageRenderer setDelegate:]
  -[SFPrintPageRenderer init]
  -[SFPrintPageRenderer printInteractionControllerWillStartJob:]
  -[SFPrintPageRenderer printInteractionControllerDidFinishJob:]
  -[SFPrintPageRenderer drawFooterForPageAtIndex:inRect:]
  -[SFPrintPageRenderer setURLString:]
  -[SFPrintPageRenderer printInteractionControllerParentViewController:]
  -[SFPrintPageRenderer delegate]
  -[SFPrintPageRenderer setContentFormatter:]
  -[SFPrintPageRenderer contentFormatter]
  -[SFPrintPageRenderer printFooter]
  -[SFPrintPageRenderer setPrintFooter:]


_SFWebProcessPlugInPageController : WBSWebProcessPlugInPageController
  // class methods
  +[_SFWebProcessPlugInPageController pageControllerForBrowserContextController:]

  // instance methods
  -[_SFWebProcessPlugInPageController isNetworkReachable]
  -[_SFWebProcessPlugInPageController webProcessPlugInBrowserContextController:frame:willSendRequestForResource:request:redirectResponse:]


SSReadingList : NSObject
  // class methods
  +[SSReadingList supportsURL:]
  +[SSReadingList defaultReadingList]

  // instance methods
  -[SSReadingList addReadingListItemWithURL:title:previewText:error:]
  -[SSReadingList .cxx_destruct]
  -[SSReadingList init]
  -[SSReadingList _init]
  -[SSReadingList _addReadingListItemWithURL:title:previewText:]
  -[SSReadingList _setUpConnectionIfNeeded]


_SFFormAutoFillInputSession : NSObject
 @property  <_WKFocusedElementInfo> *focusedElementInfo
 @property  NSDictionary *autoFillInputSessionUserObject
 @property  <_WKFormInputSession> *formInputSession
 @property  SFFormAutoFillFrameHandle *frameHandle
 @property  WBSFormMetadata *formMetadata

  // instance methods
  -[_SFFormAutoFillInputSession .cxx_destruct]
  -[_SFFormAutoFillInputSession focusedElementInfo]
  -[_SFFormAutoFillInputSession formMetadata]
  -[_SFFormAutoFillInputSession _initWithFormInputSession:focusedElement:]
  -[_SFFormAutoFillInputSession _updateAutoFillInputSessionUserObject:]
  -[_SFFormAutoFillInputSession formInputSession]
  -[_SFFormAutoFillInputSession initWithFormInputSession:]
  -[_SFFormAutoFillInputSession initWithFocusedElement:]
  -[_SFFormAutoFillInputSession autoFillInputSessionByReplacingInputSessionUserObject:]
  -[_SFFormAutoFillInputSession autoFillInputSessionUserObject]
  -[_SFFormAutoFillInputSession frameHandle]


_SSURLCompletionSession : WBSURLCompletionSessionProxy

SFPrivacyReportViewController : UIViewController <SFPrivacyReportPrivacyProxyTipTableViewCellDelegate, UITableViewDelegatePrivate, _SFTableViewDiffableDataSourceDelegate, SFPrivacyReportExplanationTableViewCellDelegate, SFPrivacyReportGridViewDelegate, SFPrivacyReportDetailToggleTableViewCellDelegate>
 @property  NSString *domain
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrivacyReportViewController traitCollectionDidChange:]
  -[SFPrivacyReportViewController tableView:shouldDrawBottomSeparatorForSection:]
  -[SFPrivacyReportViewController .cxx_destruct]
  -[SFPrivacyReportViewController tableView:didSelectRowAtIndexPath:]
  -[SFPrivacyReportViewController viewDidLoad]
  -[SFPrivacyReportViewController domain]
  -[SFPrivacyReportViewController initWithNibName:bundle:]
  -[SFPrivacyReportViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SFPrivacyReportViewController _updateLayoutMargins]
  -[SFPrivacyReportViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SFPrivacyReportViewController initWithDomain:]
  -[SFPrivacyReportViewController tableView:shouldDrawTopSeparatorForSection:]
  -[SFPrivacyReportViewController tableView:editingStyleForRowAtIndexPath:]
  -[SFPrivacyReportViewController tableView:canFocusRowAtIndexPath:]
  -[SFPrivacyReportViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[SFPrivacyReportViewController _doneBarButtonItemAction:]
  -[SFPrivacyReportViewController _updateUsesInsetStyle]
  -[SFPrivacyReportViewController _createTableViewIfNeededLoadingReport:]
  -[SFPrivacyReportViewController _reloadDataLoadingReport:]
  -[SFPrivacyReportViewController _cellForRowWithIndexPath:itemIdentifier:]
  -[SFPrivacyReportViewController setNeedsUpdateRowHeight]
  -[SFPrivacyReportViewController _sectionTypeFromSectionIndex:]
  -[SFPrivacyReportViewController cellPrivacyProxyStateChanged:]
  -[SFPrivacyReportViewController cellPrivacyProxyUpsellDismissed:]
  -[SFPrivacyReportViewController dataSource:headerTextForSection:]
  -[SFPrivacyReportViewController cellDidToggleExpandDetailedExplanation:]
  -[SFPrivacyReportViewController gridViewDidUpdateContentSize:]
  -[SFPrivacyReportViewController cellDidToggleDetailType:]
  -[SFPrivacyReportViewController _privacyProxyTip:]


SFPrivacyReportItem : NSObject <NSCopying>
 @property  long long type
 @property  id userInfo

  // instance methods
  -[SFPrivacyReportItem initWithType:]
  -[SFPrivacyReportItem .cxx_destruct]
  -[SFPrivacyReportItem isEqual:]
  -[SFPrivacyReportItem initWithType:userInfo:]
  -[SFPrivacyReportItem type]
  -[SFPrivacyReportItem userInfo]
  -[SFPrivacyReportItem copyWithZone:]


SFSingleCreditCardData : WBSSingleCreditCardData <NSSecureCoding>
 @property  NSString *headerText
 @property  NSString *displayText

  // class methods
  +[SFSingleCreditCardData supportsSecureCoding]

  // instance methods
  -[SFSingleCreditCardData initWithCoder:]
  -[SFSingleCreditCardData headerText]
  -[SFSingleCreditCardData .cxx_destruct]
  -[SFSingleCreditCardData encodeWithCoder:]
  -[SFSingleCreditCardData displayText]
  -[SFSingleCreditCardData initWithHeaderText:displayText:type:value:]


SFFormsMetadataProvider : NSObject <WBSFormsMetadataProvider>
 @property  unsigned long formCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFFormsMetadataProvider .cxx_destruct]
  -[SFFormsMetadataProvider enumerateFormsUsingBlock:]
  -[SFFormsMetadataProvider formCount]
  -[SFFormsMetadataProvider initWithFrameHandleToFormsDictionary:]


_SFDigitalHealthViewController : UIViewController
 @property  <_SFDigitalHealthViewControllerDelegate> *digitalHealthViewControllerDelegate
 @property  double additionalVerticalSafeAreaMargin

  // instance methods
  -[_SFDigitalHealthViewController .cxx_destruct]
  -[_SFDigitalHealthViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFDigitalHealthViewController _blockingViewDidHide:]
  -[_SFDigitalHealthViewController _updateCurrentLockViewControllerInsetsHorizontalForSizeClass:]
  -[_SFDigitalHealthViewController showBlockingViewControllerForURL:withPolicy:animated:]
  -[_SFDigitalHealthViewController hideBlockingViewControllerWithCompletionHandler:]
  -[_SFDigitalHealthViewController setAdditionalVerticalSafeAreaMargin:]
  -[_SFDigitalHealthViewController digitalHealthViewControllerDelegate]
  -[_SFDigitalHealthViewController setDigitalHealthViewControllerDelegate:]
  -[_SFDigitalHealthViewController additionalVerticalSafeAreaMargin]


_SFAccountManagerViewController : _SFAccountTableViewController <PSStateRestoration, SFAddSavedAccountViewControllerDelegate, SFAccountDetailViewControllerDelegate, SFAccountTableViewCellDelegate, _SFSharedSiteMetadataManagerProvider, _SFTableViewDiffableDataSourceDelegate, SFCredentialProviderExtensionManagerObserver, _ASAccountAuthenticationModificationExtensionManagerObserver>
 @property  <_SFAccountManagerViewControllerDelegate> *delegate
 @property  WBSSavedAccount *savedAccountToRemoveAfterCompletedUpgradeInDetailView
 @property  BOOL showsAccountManagerLockedView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFAccountManagerViewController traitCollectionDidChange:]
  -[_SFAccountManagerViewController tableView:heightForHeaderInSection:]
  -[_SFAccountManagerViewController setEditing:animated:]
  -[_SFAccountManagerViewController tableView:shouldDrawBottomSeparatorForSection:]
  -[_SFAccountManagerViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]
  -[_SFAccountManagerViewController .cxx_destruct]
  -[_SFAccountManagerViewController tableView:willSelectRowAtIndexPath:]
  -[_SFAccountManagerViewController tableView:didDeselectRowAtIndexPath:]
  -[_SFAccountManagerViewController tableView:didSelectRowAtIndexPath:]
  -[_SFAccountManagerViewController viewDidLoad]
  -[_SFAccountManagerViewController tableView:shouldHaveFullLengthBottomSeparatorForSection:]
  -[_SFAccountManagerViewController setDelegate:]
  -[_SFAccountManagerViewController tableView:commitEditingStyle:forRowAtIndexPath:]
  -[_SFAccountManagerViewController credentialProviderExtensionManagerExtensionListDidChange:]
  -[_SFAccountManagerViewController tableView:viewForFooterInSection:]
  -[_SFAccountManagerViewController canBeShownFromSuspendedState]
  -[_SFAccountManagerViewController tableView:willDisplayFooterView:forSection:]
  -[_SFAccountManagerViewController tableView:willBeginEditingRowAtIndexPath:]
  -[_SFAccountManagerViewController viewWillDisappear:]
  -[_SFAccountManagerViewController navigationItem]
  -[_SFAccountManagerViewController viewWillAppear:]
  -[_SFAccountManagerViewController tableView:willDisplayHeaderView:forSection:]
  -[_SFAccountManagerViewController delegate]
  -[_SFAccountManagerViewController dealloc]
  -[_SFAccountManagerViewController tableView:shouldDrawTopSeparatorForSection:]
  -[_SFAccountManagerViewController tableView:shouldHaveFullLengthTopSeparatorForSection:]
  -[_SFAccountManagerViewController tableView:heightForFooterInSection:]
  -[_SFAccountManagerViewController tableView:didEndEditingRowAtIndexPath:]
  -[_SFAccountManagerViewController setToolbarItems:animated:]
  -[_SFAccountManagerViewController handleContextMenuDeleteForIndexPath:]
  -[_SFAccountManagerViewController searchPatternDidUpdate]
  -[_SFAccountManagerViewController passwordWarningManagerForAccountDetailViewController:]
  -[_SFAccountManagerViewController passwordGeneratorForAccountDetailViewController:]
  -[_SFAccountManagerViewController savedAccountToRemoveAfterCompletedUpgradeInDetailView]
  -[_SFAccountManagerViewController setSavedAccountToRemoveAfterCompletedUpgradeInDetailView:]
  -[_SFAccountManagerViewController dataSource:headerTextForSection:]
  -[_SFAccountManagerViewController sectionIndexTitlesForDataSource:]
  -[_SFAccountManagerViewController dataSource:sectionForSectionIndexTitle:atIndex:]
  -[_SFAccountManagerViewController dataSource:canEditRowAtIndexPath:]
  -[_SFAccountManagerViewController _managedConfigurationSettingsDidChange:]
  -[_SFAccountManagerViewController _savedAccountStoreDidChange]
  -[_SFAccountManagerViewController initWithSiteMetadataManager:autoFillQuirksManager:]
  -[_SFAccountManagerViewController _setUserInterfaceElementsEnabled:]
  -[_SFAccountManagerViewController _shouldShowSecurityRecommendationsItem]
  -[_SFAccountManagerViewController _updateSecurityRecommendationsSubtitleTextWithWarnings:]
  -[_SFAccountManagerViewController _reloadSecurityRecommendationsSection]
  -[_SFAccountManagerViewController _findAndRemoveEntryForCompletedDetailViewUpgrade]
  -[_SFAccountManagerViewController _configureNavigationBar]
  -[_SFAccountManagerViewController _configureTableView]
  -[_SFAccountManagerViewController _cellForIdentifier:tableView:indexPath:]
  -[_SFAccountManagerViewController _reloadSavedAccounts]
  -[_SFAccountManagerViewController _addNavigationBarItemTapped:]
  -[_SFAccountManagerViewController _editNavigationBarItemTapped:]
  -[_SFAccountManagerViewController _cancelNavigationBarItemTapped:]
  -[_SFAccountManagerViewController _deletePasswordActionTitle]
  -[_SFAccountManagerViewController _deleteButtonTapped:]
  -[_SFAccountManagerViewController _beginEditing]
  -[_SFAccountManagerViewController _cancelEditing]
  -[_SFAccountManagerViewController _updateToolbarItemsAnimated:]
  -[_SFAccountManagerViewController _canAddPasswords]
  -[_SFAccountManagerViewController _updateHeaderAndFooterViewsFloat]
  -[_SFAccountManagerViewController _reloadSavedAccountsAndTableViewData]
  -[_SFAccountManagerViewController savedAccountControllerForQuery:queryBundleID:authenticationRequirementsMet:]
  -[_SFAccountManagerViewController _sharablePasswordFromResourceDictionary:]
  -[_SFAccountManagerViewController _savePasswordIfPossibleAndGetController:]
  -[_SFAccountManagerViewController _presentInvalidOtpauthURLAlert]
  -[_SFAccountManagerViewController _presentDuplicateCodeGeneratorAlert]
  -[_SFAccountManagerViewController _showAlertForInvalidSharablePassword:]
  -[_SFAccountManagerViewController _showConflictAlertForSharablePassword:]
  -[_SFAccountManagerViewController _accountCellDataForUser:highLevelDomain:]
  -[_SFAccountManagerViewController _autoFillFeatureManager]
  -[_SFAccountManagerViewController _alertTitleToConfirmDeletingAccountForSelectedRow]
  -[_SFAccountManagerViewController _alertTitleToConfirmDeletingAccountsForSelectedRows]
  -[_SFAccountManagerViewController _deleteAccountsAtIndexPaths:]
  -[_SFAccountManagerViewController _updateDeleteButton]
  -[_SFAccountManagerViewController _passwordAutoFillCellStyle]
  -[_SFAccountManagerViewController _rightToolbarItem]
  -[_SFAccountManagerViewController _autoFillAllowListExists]
  -[_SFAccountManagerViewController _didSelectAutoFillCellAtIndexPath:inTableView:]
  -[_SFAccountManagerViewController _autoFillCellForTableView:cellData:]
  -[_SFAccountManagerViewController _sectionWithIndexIsConfigurationSection:]
  -[_SFAccountManagerViewController _shouldShowSectionHeaders]
  -[_SFAccountManagerViewController _indexOfFirstPasswordSection]
  -[_SFAccountManagerViewController _updateContentUnavailableView]
  -[_SFAccountManagerViewController _shouldShowAutoFillItem]
  -[_SFAccountManagerViewController _autoFillSectionIdentifier]
  -[_SFAccountManagerViewController _securityRecommendationsSectionIdentifier]
  -[_SFAccountManagerViewController _warningStyleForSecurityRecommendationsDrillInCell]
  -[_SFAccountManagerViewController _updateNavigationBarItems]
  -[_SFAccountManagerViewController _autoFillCellWithoutAccessoryForTableView:]
  -[_SFAccountManagerViewController _switchAutoFillCellForTableView:enabled:]
  -[_SFAccountManagerViewController _drillInAutoFillCellForTableView:]
  -[_SFAccountManagerViewController _autoFillSwitchValueChanged:]
  -[_SFAccountManagerViewController _passwordAutoFillIsEnabled]
  -[_SFAccountManagerViewController setPasswordAutoFillIsEnabled:]
  -[_SFAccountManagerViewController _setAccessibilityIdentifiersOnAccountCell:]
  -[_SFAccountManagerViewController _updateCredentialProviderExtensionStatus]
  -[_SFAccountManagerViewController addSavedAccountViewControllerDidFinish:withSavedAccount:]
  -[_SFAccountManagerViewController updateAccessibilityIdentifierForAccountCell:]
  -[_SFAccountManagerViewController newSharedSiteMetadataManager]
  -[_SFAccountManagerViewController initWithSiteMetadataManager:autoFillQuirksManager:persona:]
  -[_SFAccountManagerViewController additionalViewControllersToPushHandlingURLResourceDictionary:didAuthenticate:]
  -[_SFAccountManagerViewController viewControllerToPresentWithURLResourceDictionary:]
  -[_SFAccountManagerViewController showConflictAlertForSharablePasswordIfNecessary]
  -[_SFAccountManagerViewController setShowsAccountManagerLockedView:]
  -[_SFAccountManagerViewController updateUserAuthenticationState:]
  -[_SFAccountManagerViewController dataSource:editingStyleForRowAtIndexPath:]
  -[_SFAccountManagerViewController showsAccountManagerLockedView]


_SFWebProcessPlugIn : WBSWebProcessPlugIn
  // instance methods
  -[_SFWebProcessPlugIn pageControllerWithBrowserContextController:]
  -[_SFWebProcessPlugIn webProcessPlugIn:initializeWithObject:]
  -[_SFWebProcessPlugIn dealloc]
  -[_SFWebProcessPlugIn observeValueForKeyPath:ofObject:change:context:]
  -[_SFWebProcessPlugIn didCreatePageController:forBrowserContextController:]
  -[_SFWebProcessPlugIn willDestroyPageController:forBrowserContextController:]


_SFPageFormatMenuPrivacyReportController : NSObject <MCProfileConnectionObserver, _SFPageFormatMenuItemController>
 @property  <_SFBrowserDocument> *document
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _SFSettingsAlertItem *alertItem
 @property  <_SFPageFormatMenuItemControllerDelegate> *delegate

  // instance methods
  -[_SFPageFormatMenuPrivacyReportController profileConnectionDidReceiveRestrictionChangedNotification:userInfo:]
  -[_SFPageFormatMenuPrivacyReportController initWithDocument:]
  -[_SFPageFormatMenuPrivacyReportController document]
  -[_SFPageFormatMenuPrivacyReportController .cxx_destruct]
  -[_SFPageFormatMenuPrivacyReportController setDelegate:]
  -[_SFPageFormatMenuPrivacyReportController profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[_SFPageFormatMenuPrivacyReportController alertItem]
  -[_SFPageFormatMenuPrivacyReportController delegate]
  -[_SFPageFormatMenuPrivacyReportController dealloc]
  -[_SFPageFormatMenuPrivacyReportController _presentPromptToTurnOnTrackingProtection]
  -[_SFPageFormatMenuPrivacyReportController _presentPrivacyReport]
  -[_SFPageFormatMenuPrivacyReportController _dismissPromptIfTrackerProtectionEnabled]
  -[_SFPageFormatMenuPrivacyReportController _initializeManagedProfileConnection]


SFReaderViewController : UIViewController <WKUIDelegate>
 @property  WKWebView *readerWebView
 @property  _SFBrowserContentViewController *containerViewController
 @property  <SFReaderViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFReaderViewController containerViewController]
  -[SFReaderViewController setContainerViewController:]
  -[SFReaderViewController readerWebView]
  -[SFReaderViewController _webView:contextMenuForElement:willCommitWithAnimator:]
  -[SFReaderViewController .cxx_destruct]
  -[SFReaderViewController setDelegate:]
  -[SFReaderViewController delegate]
  -[SFReaderViewController _webView:contextMenuDidEndForElement:]
  -[SFReaderViewController _webView:contextMenuConfigurationForElement:completionHandler:]
  -[SFReaderViewController _webView:contextMenuWillPresentForElement:]
  -[SFReaderViewController loadView]
  -[SFReaderViewController initWithOriginalWebView:]


_SFPageLoadErrorController : NSObject <WBSCertificateWarningPageHandler>
 @property  <_SFPageLoadErrorControllerDelegate> *delegate
 @property  BOOL reloadingFailedRequest
 @property  NSURLRequest *failedRequest
 @property  unsigned long crashesSinceLastSuccessfulLoad
 @property  <SFDialogPresenting> *dialogPresenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPageLoadErrorController showErrorPageWithTitle:bodyText:forError:]
  -[_SFPageLoadErrorController _setFailedRequest:]
  -[_SFPageLoadErrorController clearCrashCountResetTimer]
  -[_SFPageLoadErrorController _dismissCertificateViewButtonTapped]
  -[_SFPageLoadErrorController _continueWithoutCredentialsUsingAlertContext:]
  -[_SFPageLoadErrorController addAlert:]
  -[_SFPageLoadErrorController handleClientCertificateAuthenticationChallenge:completionHandler:]
  -[_SFPageLoadErrorController visitInsecureWebsiteWithTemporaryBypass]
  -[_SFPageLoadErrorController _handleFrameLoadError:forURL:recoveryAttempter:]
  -[_SFPageLoadErrorController _resetCrashCountSoon]
  -[_SFPageLoadErrorController _loadCertificateWarningPageForContext:]
  -[_SFPageLoadErrorController _reachabilityChanged:]
  -[_SFPageLoadErrorController addAlertWithTitle:bodyText:]
  -[_SFPageLoadErrorController initWithWebView:]
  -[_SFPageLoadErrorController .cxx_destruct]
  -[_SFPageLoadErrorController addDisallowedFileURLAlert]
  -[_SFPageLoadErrorController handleFrameLoadError:]
  -[_SFPageLoadErrorController _clearCertificateWarningPageHandlerInterface]
  -[_SFPageLoadErrorController setDelegate:]
  -[_SFPageLoadErrorController handleSubframeCertificateError:]
  -[_SFPageLoadErrorController _handleCertificateError:forURL:isMainFrame:recoveryAttempter:completionHandler:]
  -[_SFPageLoadErrorController clearFailedRequest]
  -[_SFPageLoadErrorController addFormAlertWithTitle:decisionHandler:]
  -[_SFPageLoadErrorController showCertificateInformation]
  -[_SFPageLoadErrorController _showRepeatedWebProcessCrashError:URLString:]
  -[_SFPageLoadErrorController addDownloadFailedAlertWithDescription:]
  -[_SFPageLoadErrorController reloadAfterError]
  -[_SFPageLoadErrorController updateCrashesAndShowCrashError:URLString:]
  -[_SFPageLoadErrorController _continueAfterCertificateAlertWithURL:trust:recoveryAttempter:]
  -[_SFPageLoadErrorController scheduleResetCrashCount]
  -[_SFPageLoadErrorController _genericMessageForError:]
  -[_SFPageLoadErrorController _certificateWarningPagePresenterProxy]
  -[_SFPageLoadErrorController addDisallowedUseOfJavaScriptAlert]
  -[_SFPageLoadErrorController _cacheSecIdentityIfNeeded:forIdentityDomain:]
  -[_SFPageLoadErrorController webViewDidCommitErrorPagePreview:]
  -[_SFPageLoadErrorController showErrorPageWithTitle:bodyText:learnMoreLink:forError:]
  -[_SFPageLoadErrorController _titleForError:]
  -[_SFPageLoadErrorController delegate]
  -[_SFPageLoadErrorController setDialogPresenter:]
  -[_SFPageLoadErrorController openClockSettings]
  -[_SFPageLoadErrorController addInvalidURLAlert]
  -[_SFPageLoadErrorController reloadingFailedRequest]
  -[_SFPageLoadErrorController dialogPresenter]
  -[_SFPageLoadErrorController dealloc]
  -[_SFPageLoadErrorController goBackButtonClicked]
  -[_SFPageLoadErrorController invalidate]
  -[_SFPageLoadErrorController addDialog:]
  -[_SFPageLoadErrorController performAction:forAlert:]
  -[_SFPageLoadErrorController failedRequest]
  -[_SFPageLoadErrorController handleLegacyTLSWithFailingURL:clickThroughURL:authenticationChallenge:]
  -[_SFPageLoadErrorController addInvalidProfileAlert]
  -[_SFPageLoadErrorController _resetCrashCount:]
  -[_SFPageLoadErrorController visitInsecureWebsite]
  -[_SFPageLoadErrorController _setUpCertificateWarningPageHandlerInterface]
  -[_SFPageLoadErrorController crashesSinceLastSuccessfulLoad]
  -[_SFPageLoadErrorController _specializedMessageForError:URL:]


_SFWebsiteButton : UIButton
 @property  @? activationHandler

  // instance methods
  -[_SFWebsiteButton setActivationHandler:]
  -[_SFWebsiteButton .cxx_destruct]
  -[_SFWebsiteButton init]
  -[_SFWebsiteButton setTintColor:]
  -[_SFWebsiteButton _activate:]
  -[_SFWebsiteButton activationHandler]


SFAccountDetailViewController : UITableViewController <_ASAccountAuthenticationModificationExtensionManagerObserver, ASAccountAuthenticationModificationControllerDelegate, ASAccountAuthenticationModificationControllerPresentationContextProviding, SFAccountOtpauthQRCodeScannerViewControllerDelegate, UITextFieldDelegate, _SFTableViewDiffableDataSourceDelegate, SFSecurityRecommendationInfoCellDelegate, PSStateRestoration>
 @property  <SFAccountDetailViewControllerDelegate> *delegate
 @property  BOOL showsChangePasswordControllerOnAppearance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAccountDetailViewController textFieldShouldReturn:]
  -[SFAccountDetailViewController _updateMenuItems]
  -[SFAccountDetailViewController .cxx_destruct]
  -[SFAccountDetailViewController tableView:performAction:forRowAtIndexPath:withSender:]
  -[SFAccountDetailViewController tableView:didSelectRowAtIndexPath:]
  -[SFAccountDetailViewController viewDidLoad]
  -[SFAccountDetailViewController canBecomeFirstResponder]
  -[SFAccountDetailViewController setDelegate:]
  -[SFAccountDetailViewController viewDidAppear:]
  -[SFAccountDetailViewController tableView:shouldIndentWhileEditingRowAtIndexPath:]
  -[SFAccountDetailViewController textFieldDidEndEditing:]
  -[SFAccountDetailViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[SFAccountDetailViewController tableView:viewForFooterInSection:]
  -[SFAccountDetailViewController canBeShownFromSuspendedState]
  -[SFAccountDetailViewController viewWillDisappear:]
  -[SFAccountDetailViewController canPerformAction:withSender:]
  -[SFAccountDetailViewController viewWillAppear:]
  -[SFAccountDetailViewController delegate]
  -[SFAccountDetailViewController dealloc]
  -[SFAccountDetailViewController tableView:editingStyleForRowAtIndexPath:]
  -[SFAccountDetailViewController viewDidDisappear:]
  -[SFAccountDetailViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[SFAccountDetailViewController _allowEditing]
  -[SFAccountDetailViewController _passwordEvaluator]
  -[SFAccountDetailViewController _passwordAuditor]
  -[SFAccountDetailViewController _textFieldChanged:]
  -[SFAccountDetailViewController dataSource:commitEditingStyle:forItemIdentifier:]
  -[SFAccountDetailViewController dataSource:headerTextForSection:]
  -[SFAccountDetailViewController dataSource:footerTextForSection:]
  -[SFAccountDetailViewController dataSource:canEditRowAtIndexPath:]
  -[SFAccountDetailViewController initWithSavedAccount:passwordWarning:options:]
  -[SFAccountDetailViewController setShowsChangePasswordControllerOnAppearance:]
  -[SFAccountDetailViewController accountModificationExtensionManagerExtensionListDidChange:]
  -[SFAccountDetailViewController _passwordWarningManager]
  -[SFAccountDetailViewController _passwordGenerator]
  -[SFAccountDetailViewController _editBarButtonItemTapped:]
  -[SFAccountDetailViewController _shareBarButtonItemTapped:]
  -[SFAccountDetailViewController _cancelBarButtonItemTapped:]
  -[SFAccountDetailViewController _doneBarButtonItemTapped:]
  -[SFAccountDetailViewController _allowAuditing]
  -[SFAccountDetailViewController _accountStoreDidUpdate]
  -[SFAccountDetailViewController _updateCachedTOTPGenerators]
  -[SFAccountDetailViewController _willHideUIMenuController:]
  -[SFAccountDetailViewController _cellForIdentifier:indexPath:]
  -[SFAccountDetailViewController _updateWarningForSavedAccount]
  -[SFAccountDetailViewController _reloadDiffableDataSourceOnInternalQueueAnimated:]
  -[SFAccountDetailViewController _updateAccountModificationOptions]
  -[SFAccountDetailViewController _reloadDiffableDataSourceAnimated:]
  -[SFAccountDetailViewController _showChangePasswordSafariViewController]
  -[SFAccountDetailViewController _changePasswordURL]
  -[SFAccountDetailViewController _setEditing:animated:]
  -[SFAccountDetailViewController _removeNotesSection]
  -[SFAccountDetailViewController _cancelChangesAndFinishEditing]
  -[SFAccountDetailViewController _saveAccountAndFinishEditing]
  -[SFAccountDetailViewController _sharePasswordWithPopoverPresentationControllerConfiguration:]
  -[SFAccountDetailViewController _addNotesSection]
  -[SFAccountDetailViewController _updateAddButtonsInAccountOptionsSectionForSnapshot:]
  -[SFAccountDetailViewController _revealPasswordIfNecessary]
  -[SFAccountDetailViewController _stopTOTPTimer]
  -[SFAccountDetailViewController _itemTypeForIdentifier:]
  -[SFAccountDetailViewController _configureHeaderViewCell:]
  -[SFAccountDetailViewController _configureUserCell:]
  -[SFAccountDetailViewController _editableCellWithCell:]
  -[SFAccountDetailViewController _configurePasswordCell:]
  -[SFAccountDetailViewController _updateTOTPCell:generator:]
  -[SFAccountDetailViewController _startTOTPTimerIfNeeded]
  -[SFAccountDetailViewController _configureSecurityRecommendationInfoCell]
  -[SFAccountDetailViewController _savedAccountWebsiteCellForTableView:atIndexPath:]
  -[SFAccountDetailViewController _deleteCellForTableView:]
  -[SFAccountDetailViewController _completedUpgrade]
  -[SFAccountDetailViewController _shouldShowSecurityRecommendationSection]
  -[SFAccountDetailViewController _addAccountUpgradeItemsForSectionType:toSnapshot:]
  -[SFAccountDetailViewController _addTOTPGeneratorsToSnapshot:]
  -[SFAccountDetailViewController _subtitleStringForSignInWithAppleUpgrade]
  -[SFAccountDetailViewController _subtitleStringForStrongPasswordUpgrade]
  -[SFAccountDetailViewController _securityRecommendationSubtitleString]
  -[SFAccountDetailViewController _configureCell:withText:detailText:detailPlaceholderText:secureEntry:]
  -[SFAccountDetailViewController _securePasswordPlaceholderText:]
  -[SFAccountDetailViewController _setHighLyLegibleFontForDetailTextInCell:]
  -[SFAccountDetailViewController _lastModifiedDateString]
  -[SFAccountDetailViewController _shouldShowMenuForItemIdentifier:]
  -[SFAccountDetailViewController _openChangePasswordURLInWebBrowser]
  -[SFAccountDetailViewController _newSecretEntryAlertController]
  -[SFAccountDetailViewController _initiateUpgradeToSignInWithApple]
  -[SFAccountDetailViewController _initiateChangeToStrongPassword]
  -[SFAccountDetailViewController _showConfirmationToDeleteCredentialTypes:]
  -[SFAccountDetailViewController safari_copyUserName:]
  -[SFAccountDetailViewController safari_copyPassword:]
  -[SFAccountDetailViewController _sectionTypeForSection:]
  -[SFAccountDetailViewController _totpFooterStringWithGenerator:font:]
  -[SFAccountDetailViewController _addTOTPGenerator:]
  -[SFAccountDetailViewController safari_copyWebsite:]
  -[SFAccountDetailViewController safari_copyOneTimeCode:]
  -[SFAccountDetailViewController _formattedCodeFromGenerator:font:]
  -[SFAccountDetailViewController _deleteTOTPGenerator:]
  -[SFAccountDetailViewController _openURLInSafariViewController:shouldSupressPasswordUpdatePrompts:]
  -[SFAccountDetailViewController _shouldShowAccountOptionsHeader]
  -[SFAccountDetailViewController _deleteTOTPGeneratorWithConfirmation:]
  -[SFAccountDetailViewController _completedSignInWithAppleUpgrade]
  -[SFAccountDetailViewController _completedStrongPasswordUpgrade]
  -[SFAccountDetailViewController _hideSecurityRecommendation]
  -[SFAccountDetailViewController _presentHideSecurityRecommendationConfirmationAlert]
  -[SFAccountDetailViewController accountAuthenticationModificationController:didSuccessfullyCompleteRequest:withUserInfo:]
  -[SFAccountDetailViewController accountAuthenticationModificationController:didFailRequest:withError:]
  -[SFAccountDetailViewController presentationAnchorForAccountAuthenticationModificationController:]
  -[SFAccountDetailViewController QRCodeScannerViewController:didScanQRCodeWithURLValue:]
  -[SFAccountDetailViewController securityRecommendationInfoCellHideButtonPressed:]
  -[SFAccountDetailViewController _warningTitleForPassword]
  -[SFAccountDetailViewController safari_sharePassword:]
  -[SFAccountDetailViewController showsChangePasswordControllerOnAppearance]


_SFMultipleLineAlertActionView : UIView
 @property  UILabel *titleLabel
 @property  UILabel *detailLabel

  // instance methods
  -[_SFMultipleLineAlertActionView titleLabel]
  -[_SFMultipleLineAlertActionView .cxx_destruct]
  -[_SFMultipleLineAlertActionView tintColorDidChange]
  -[_SFMultipleLineAlertActionView initWithFrame:]
  -[_SFMultipleLineAlertActionView detailLabel]


_SFMultipleLineAlertActionViewController : UIViewController
  // instance methods
  -[_SFMultipleLineAlertActionViewController preferredContentSize]
  -[_SFMultipleLineAlertActionViewController .cxx_destruct]
  -[_SFMultipleLineAlertActionViewController loadView]
  -[_SFMultipleLineAlertActionViewController initWithTitle:detail:style:]


SFMultipleLineAlertAction : UIAlertAction
  // class methods
  +[SFMultipleLineAlertAction actionWithTitle:detail:style:handler:]
  +[SFMultipleLineAlertAction actionWithTitle:detail:handler:]


SFAuthenticationSession : NSObject <SFAuthenticationViewControllerPresentationDelegate, SFSafariViewControllerDelegateInternal>
 @property  <_SFAuthenticationSessionDelegate> *_delegate
 @property  BOOL prefersEphemeralWebBrowserSession
 @property  BOOL sessionStarted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAuthenticationSession _delegate]
  -[SFAuthenticationSession .cxx_destruct]
  -[SFAuthenticationSession cancel]
  -[SFAuthenticationSession start]
  -[SFAuthenticationSession dealloc]
  -[SFAuthenticationSession set_delegate:]
  -[SFAuthenticationSession initWithURL:callbackURLScheme:usingEphemeralSession:completionHandler:]
  -[SFAuthenticationSession _startRequestingFromWebAuthenticationSession:inWindow:dryRun:]
  -[SFAuthenticationSession presentingViewControllerForAuthenticationViewController:]
  -[SFAuthenticationSession safariViewControllerDidFinish:]
  -[SFAuthenticationSession safariViewController:didDecideCookieSharingForURL:shouldCancel:]
  -[SFAuthenticationSession safariViewController:hostApplicationOpenURL:]
  -[SFAuthenticationSession initWithURL:callbackURLScheme:completionHandler:]
  -[SFAuthenticationSession startASWebAuthenticationSessionInWindow:dryRun:]
  -[SFAuthenticationSession prefersEphemeralWebBrowserSession]
  -[SFAuthenticationSession setPrefersEphemeralWebBrowserSession:]
  -[SFAuthenticationSession isSessionStarted]
  -[SFAuthenticationSession setSessionStarted:]


_SFCreditCardCaptureViewController : UINavigationController <CRCameraReaderDelegate>
 @property  <_SFCreditCardCaptureViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFCreditCardCaptureViewController canCapture]

  // instance methods
  -[_SFCreditCardCaptureViewController .cxx_destruct]
  -[_SFCreditCardCaptureViewController viewDidAppear:]
  -[_SFCreditCardCaptureViewController init]
  -[_SFCreditCardCaptureViewController _cancel:]
  -[_SFCreditCardCaptureViewController cameraReaderDidCancel:]
  -[_SFCreditCardCaptureViewController cameraReaderDidEnd:]
  -[_SFCreditCardCaptureViewController cameraReader:didFailWithError:]
  -[_SFCreditCardCaptureViewController cameraReader:didRecognizeObjects:]


_SFTabStateData : NSObject
 @property  NSString *UUIDString
 @property  NSString *title
 @property  NSString *url
 @property  NSString *userVisibleURL
 @property  long long orderIndex
 @property  double lastViewedTime
 @property  long long readerViewTopScrollOffset
 @property  BOOL showingReader
 @property  BOOL displayingStandaloneImage
 @property  BOOL wasOpenedFromLink
 @property  BOOL privateBrowsing
 @property  NSData *sessionStateData
 @property  long long owningBrowserWindowDatabaseID
 @property  NSString *owningBrowserWindowUUIDString
 @property  BOOL skipUpdate
 @property  unsigned long uncompressedSessionStateDataSize
 @property  BOOL isSessionStateDataCompressed
 @property  NSData *compressedSessionStateData
 @property  BOOL skipSavingSessionState
 @property  int readingListBookmarkID

  // class methods
  +[_SFTabStateData uncompressedDataWithRawData:uncompressedSize:]

  // instance methods
  -[_SFTabStateData wasOpenedFromLink]
  -[_SFTabStateData setLastViewedTime:]
  -[_SFTabStateData toDictionary]
  -[_SFTabStateData UUIDString]
  -[_SFTabStateData setTitle:]
  -[_SFTabStateData url]
  -[_SFTabStateData privateBrowsing]
  -[_SFTabStateData .cxx_destruct]
  -[_SFTabStateData setUrl:]
  -[_SFTabStateData lastViewedTime]
  -[_SFTabStateData initWithSQLiteRow:]
  -[_SFTabStateData setShowingReader:]
  -[_SFTabStateData title]
  -[_SFTabStateData initWithDictionary:]
  -[_SFTabStateData readerViewTopScrollOffset]
  -[_SFTabStateData setWasOpenedFromLink:]
  -[_SFTabStateData setDisplayingStandaloneImage:]
  -[_SFTabStateData readingListBookmarkID]
  -[_SFTabStateData setUUIDString:]
  -[_SFTabStateData setReaderViewTopScrollOffset:]
  -[_SFTabStateData sessionStateData]
  -[_SFTabStateData displayingStandaloneImage]
  -[_SFTabStateData showingReader]
  -[_SFTabStateData isSessionStateDataCompressed]
  -[_SFTabStateData compressedSessionStateData]
  -[_SFTabStateData _uncompressSessionStateDataIfNeeded]
  -[_SFTabStateData userVisibleURL]
  -[_SFTabStateData setUserVisibleURL:]
  -[_SFTabStateData orderIndex]
  -[_SFTabStateData setOrderIndex:]
  -[_SFTabStateData setPrivateBrowsing:]
  -[_SFTabStateData setSessionStateData:]
  -[_SFTabStateData owningBrowserWindowDatabaseID]
  -[_SFTabStateData setOwningBrowserWindowDatabaseID:]
  -[_SFTabStateData owningBrowserWindowUUIDString]
  -[_SFTabStateData setOwningBrowserWindowUUIDString:]
  -[_SFTabStateData skipUpdate]
  -[_SFTabStateData setSkipUpdate:]
  -[_SFTabStateData uncompressedSessionStateDataSize]
  -[_SFTabStateData setUncompressedSessionStateDataSize:]
  -[_SFTabStateData skipSavingSessionState]
  -[_SFTabStateData setSkipSavingSessionState:]
  -[_SFTabStateData setReadingListBookmarkID:]


_SFWebArchiveActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFWebArchiveActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFWebArchiveActivityItemProvider .cxx_destruct]
  -[_SFWebArchiveActivityItemProvider item]
  -[_SFWebArchiveActivityItemProvider activityViewControllerLinkMetadata:]
  -[_SFWebArchiveActivityItemProvider _webArchiveItemProvider]
  -[_SFWebArchiveActivityItemProvider initWithWebArchiveProvider:]


_SFExternalPasswordCredentialViewController : _SFPasswordViewController <SFExternalPasswordCredentialRemoteViewControllerDelegate>
 @property  <_SFExternalPasswordCredentialViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFExternalPasswordCredentialViewController .cxx_destruct]
  -[_SFExternalPasswordCredentialViewController viewDidLoad]
  -[_SFExternalPasswordCredentialViewController _sceneDidEnterBackground:]
  -[_SFExternalPasswordCredentialViewController init]
  -[_SFExternalPasswordCredentialViewController autoFillWithExternalCredential:]
  -[_SFExternalPasswordCredentialViewController _remoteViewController]
  -[_SFExternalPasswordCredentialViewController dealloc]
  -[_SFExternalPasswordCredentialViewController _canShowWhileLocked]
  -[_SFExternalPasswordCredentialViewController _setUpServiceProxyIfNeeded]
  -[_SFExternalPasswordCredentialViewController presentExternalPasswordCredentialRemoteViewController:]
  -[_SFExternalPasswordCredentialViewController getCredentialForExternalCredential:completion:]
  -[_SFExternalPasswordCredentialViewController _connectToServiceWithCompletion:]


_SFSingleBookmarkNavigationController : UINavigationController <_SFBookmarkInfoViewControllerDelegate>
 @property  <_SFSingleBookmarkNavigationControllerDelegate> *bookmarkNavDelegate
 @property  @? addBookmarkAnalyticsHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSingleBookmarkNavigationController .cxx_destruct]
  -[_SFSingleBookmarkNavigationController initWithCollection:]
  -[_SFSingleBookmarkNavigationController dealloc]
  -[_SFSingleBookmarkNavigationController viewDidDisappear:]
  -[_SFSingleBookmarkNavigationController _lastSelectedFolder]
  -[_SFSingleBookmarkNavigationController _willResignActive]
  -[_SFSingleBookmarkNavigationController _didBecomeActive]
  -[_SFSingleBookmarkNavigationController _initWithBookmark:childBookmarks:inCollection:addingBookmark:toFavorites:]
  -[_SFSingleBookmarkNavigationController _releaseBookmarkLockIfNeeded]
  -[_SFSingleBookmarkNavigationController prepareForPresentationForAddingBookmark:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewController:didFinishWithResult:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewControllerShouldUseTranslucentAppearance:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewControllerCanSaveBookmarkChanges:]
  -[_SFSingleBookmarkNavigationController initWithBookmark:inCollection:]
  -[_SFSingleBookmarkNavigationController initWithFolderOfBookmarks:inCollection:]
  -[_SFSingleBookmarkNavigationController initForAddingToFavoritesInCollection:]
  -[_SFSingleBookmarkNavigationController addBookmarkWithTitle:address:parentBookmark:]
  -[_SFSingleBookmarkNavigationController bookmarkNavDelegate]
  -[_SFSingleBookmarkNavigationController setBookmarkNavDelegate:]
  -[_SFSingleBookmarkNavigationController addBookmarkAnalyticsHandler]
  -[_SFSingleBookmarkNavigationController setAddBookmarkAnalyticsHandler:]


SFDownloadStorageUsageMonitorEntry : NSObject
 @property  NSUUID *identifier
 @property  NSProgress *progress
 @property  id progressSubscriber
 @property  NSString *destinationPath
 @property  NSData *progressData
 @property  long long cachedUsage
 @property  <SFDownloadStorageUsageMonitorEntryDelegate> *delegate

  // instance methods
  -[SFDownloadStorageUsageMonitorEntry initWithIdentifier:]
  -[SFDownloadStorageUsageMonitorEntry .cxx_destruct]
  -[SFDownloadStorageUsageMonitorEntry setDelegate:]
  -[SFDownloadStorageUsageMonitorEntry progress]
  -[SFDownloadStorageUsageMonitorEntry updateWithDictionaryRepresentation:]
  -[SFDownloadStorageUsageMonitorEntry identifier]
  -[SFDownloadStorageUsageMonitorEntry progressSubscriber]
  -[SFDownloadStorageUsageMonitorEntry setProgressSubscriber:]
  -[SFDownloadStorageUsageMonitorEntry destinationPath]
  -[SFDownloadStorageUsageMonitorEntry delegate]
  -[SFDownloadStorageUsageMonitorEntry setProgress:]
  -[SFDownloadStorageUsageMonitorEntry observeValueForKeyPath:ofObject:change:context:]
  -[SFDownloadStorageUsageMonitorEntry setDestinationPath:]
  -[SFDownloadStorageUsageMonitorEntry _didLoseProgress:]
  -[SFDownloadStorageUsageMonitorEntry _didGainProgress:]
  -[SFDownloadStorageUsageMonitorEntry _updateProgressSubscriptionWithData:]
  -[SFDownloadStorageUsageMonitorEntry progressData]
  -[SFDownloadStorageUsageMonitorEntry setProgressData:]
  -[SFDownloadStorageUsageMonitorEntry cachedUsage]
  -[SFDownloadStorageUsageMonitorEntry setCachedUsage:]


_SFDownloadStorageUsageMonitor : NSObject <SFDownloadFileDelegate, SFDownloadStorageUsageMonitorEntryDelegate>
 @property  long long usage

  // instance methods
  -[_SFDownloadStorageUsageMonitor .cxx_destruct]
  -[_SFDownloadStorageUsageMonitor usage]
  -[_SFDownloadStorageUsageMonitor init]
  -[_SFDownloadStorageUsageMonitor entryDidChangeUsage:]
  -[_SFDownloadStorageUsageMonitor _reloadDownloadHistory]
  -[_SFDownloadStorageUsageMonitor downloadFileContentsDidChange:]
  -[_SFDownloadStorageUsageMonitor downloadFileWillBeDeleted:]
  -[_SFDownloadStorageUsageMonitor downloadFileDidChangeURL:]


SFFormAutoFillNode : NSObject <WBSFormAutoFillNode>
 @property  WKWebProcessPlugInNodeHandle *nodeHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutoFillNode autoFillNodeWithNodeHandle:]

  // instance methods
  -[SFFormAutoFillNode elementBounds]
  -[SFFormAutoFillNode htmlInputElementAutoFillButtonType]
  -[SFFormAutoFillNode htmlInputElementLastAutoFillButtonType]
  -[SFFormAutoFillNode .cxx_destruct]
  -[SFFormAutoFillNode nodeHandle]
  -[SFFormAutoFillNode setHTMLInputElementAutofilled:]
  -[SFFormAutoFillNode isHTMLInputElementUserEdited]
  -[SFFormAutoFillNode isHTMLTextAreaElementUserEdited]
  -[SFFormAutoFillNode setHTMLInputElementAutoFilledWithAutomaticStrongPassword:]
  -[SFFormAutoFillNode initWithNodeHandle:]
  -[SFFormAutoFillNode initWithJSWrapper:inContext:]


_SFBrowserView : UIView
 @property  SFNanoDomainContainerView *nanoDomainContainerView
 @property  UIView *contentContainerView
 @property  _SFToolbar *toolbar
 @property  _SFNavigationBar *navigationBar
 @property  double bottomBarOffset
 @property  double topBarHeight
 @property  WKWebView *currentWebView
 @property  unsigned long navigationBarBehavior
 @property  _SFLinkPreviewHeader *previewHeader
 @property  UIView *statusBarBackgroundView
 @property  UIView *scrollToTopView
 @property  BOOL shouldUseScrollToTopView
 @property  _SFCrashBanner *crashBanner
 @property  double crashBannerOffset
 @property  SFPinnableBanner *pinnableBanner
 @property  {CGPoint=dd} pinnableBannerOffset
 @property  SFPinnableBanner *appBannerPendingFirstPaint
 @property  BOOL hasReceivedTouchEvents
 @property  UIView *quickLookDocumentView
 @property  double minimalUITopOffset
 @property  <SFBrowserViewDelegate> *delegate
 @property  double unscaledWebViewWidth
 @property  {UIEdgeInsets=dddd} obscuredInsets
 @property  UIView *appInfoOverlay
 @property  BOOL isContentReadyForDisplay

  // instance methods
  -[_SFBrowserView hitTest:withEvent:]
  -[_SFBrowserView .cxx_destruct]
  -[_SFBrowserView navigationBar]
  -[_SFBrowserView layoutSubviews]
  -[_SFBrowserView setDelegate:]
  -[_SFBrowserView setStatusBarBackgroundView:]
  -[_SFBrowserView topBarHeight]
  -[_SFBrowserView toolbar]
  -[_SFBrowserView setToolbar:]
  -[_SFBrowserView setObscuredInsets:]
  -[_SFBrowserView bottomBarOffset]
  -[_SFBrowserView initWithFrame:]
  -[_SFBrowserView delegate]
  -[_SFBrowserView setNavigationBar:]
  -[_SFBrowserView contentContainerView]
  -[_SFBrowserView statusBarBackgroundView]
  -[_SFBrowserView currentWebView]
  -[_SFBrowserView obscuredInsets]
  -[_SFBrowserView previewScaleFactor]
  -[_SFBrowserView unscaledWebViewBounds]
  -[_SFBrowserView _scaleContentInset]
  -[_SFBrowserView previewHeader]
  -[_SFBrowserView setContentReadyForDisplay]
  -[_SFBrowserView setPreviewHeader:]
  -[_SFBrowserView updateDismissButtonStyle:]
  -[_SFBrowserView setBottomBarOffset:]
  -[_SFBrowserView setTopBarHeight:]
  -[_SFBrowserView addWebView:]
  -[_SFBrowserView updatePreviewHeaderWithURLString:]
  -[_SFBrowserView setShouldUseScrollToTopView:]
  -[_SFBrowserView setCrashBanner:]
  -[_SFBrowserView setCrashBannerOffset:]
  -[_SFBrowserView setPinnableBanner:]
  -[_SFBrowserView setPinnableBannerOffset:]
  -[_SFBrowserView setAppInfoOverlay:]
  -[_SFBrowserView setQuickLookDocumentView:]
  -[_SFBrowserView setMinimalUITopOffset:]
  -[_SFBrowserView setNanoDomainContainerView:]
  -[_SFBrowserView setUnscaledWebViewWidth:]
  -[_SFBrowserView isContentReadyForDisplay]
  -[_SFBrowserView navigationBarBehavior]
  -[_SFBrowserView setNavigationBarBehavior:]
  -[_SFBrowserView scrollToTopView]
  -[_SFBrowserView shouldUseScrollToTopView]
  -[_SFBrowserView crashBanner]
  -[_SFBrowserView crashBannerOffset]
  -[_SFBrowserView pinnableBanner]
  -[_SFBrowserView pinnableBannerOffset]
  -[_SFBrowserView appBannerPendingFirstPaint]
  -[_SFBrowserView setAppBannerPendingFirstPaint:]
  -[_SFBrowserView hasReceivedTouchEvents]
  -[_SFBrowserView quickLookDocumentView]
  -[_SFBrowserView minimalUITopOffset]
  -[_SFBrowserView unscaledWebViewWidth]
  -[_SFBrowserView appInfoOverlay]
  -[_SFBrowserView nanoDomainContainerView]


_SFAppPasswordSavingViewController : _SFPasswordViewController
  // instance methods
  -[_SFAppPasswordSavingViewController credentialsSubmittedForWebsiteURL:user:password:passwordIsAutoGenerated:completionHandler:]
  -[_SFAppPasswordSavingViewController .cxx_destruct]
  -[_SFAppPasswordSavingViewController viewDidLoad]
  -[_SFAppPasswordSavingViewController viewDidAppear:]
  -[_SFAppPasswordSavingViewController init]
  -[_SFAppPasswordSavingViewController _remoteViewController]
  -[_SFAppPasswordSavingViewController _setUpServiceProxyIfNeeded]
  -[_SFAppPasswordSavingViewController remoteViewControllerWillDismiss:]
  -[_SFAppPasswordSavingViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[_SFAppPasswordSavingViewController _connectToServiceWithCompletion:]


_SFActivityItemProviderCollection : NSObject
 @property  WKWebView *webView
 @property  _SFActivityItemProvider *standaloneImageProvider
 @property  _SFActivityItemProvider *webArchiveProvider
 @property  BOOL displayingDigitalHealthLockoutView
 @property  BOOL displayingStandaloneImage
 @property  BOOL displayingStandaloneMedia
 @property  _SFActivityItemProvider *linkProvider
 @property  _SFPrintActivityItemProvider *printProvider
 @property  _SFActivityItemProvider *javaScriptExtensionProvider
 @property  _SFActivityItemProvider *downloadProvider
 @property  _SFActivityItemProvider *documentProvider

  // instance methods
  -[_SFActivityItemProviderCollection webView]
  -[_SFActivityItemProviderCollection initWithWebView:]
  -[_SFActivityItemProviderCollection .cxx_destruct]
  -[_SFActivityItemProviderCollection setDisplayingStandaloneMedia:]
  -[_SFActivityItemProviderCollection setDisplayingStandaloneImage:]
  -[_SFActivityItemProviderCollection displayingStandaloneImage]
  -[_SFActivityItemProviderCollection linkProvider]
  -[_SFActivityItemProviderCollection javaScriptExtensionProvider]
  -[_SFActivityItemProviderCollection standaloneImageProvider]
  -[_SFActivityItemProviderCollection printProvider]
  -[_SFActivityItemProviderCollection downloadProvider]
  -[_SFActivityItemProviderCollection displayingDigitalHealthLockoutView]
  -[_SFActivityItemProviderCollection webArchiveProvider]
  -[_SFActivityItemProviderCollection documentProvider]
  -[_SFActivityItemProviderCollection activityItemProvidersWithCustomizationController:]
  -[_SFActivityItemProviderCollection setDisplayingDigitalHealthLockoutView:]
  -[_SFActivityItemProviderCollection displayingStandaloneMedia]
  -[_SFActivityItemProviderCollection setLinkProvider:]
  -[_SFActivityItemProviderCollection setPrintProvider:]
  -[_SFActivityItemProviderCollection setJavaScriptExtensionProvider:]
  -[_SFActivityItemProviderCollection setDownloadProvider:]
  -[_SFActivityItemProviderCollection setDocumentProvider:]


SFContentBlockerManager : NSObject
 @property  NSSet *extensions

  // class methods
  +[SFContentBlockerManager sharedManager]
  +[SFContentBlockerManager contentBlockerStore]
  +[SFContentBlockerManager _contentBlockerLoaderConnection]
  +[SFContentBlockerManager _loadContentBlockerWithIdentifier:completionHandler:]
  +[SFContentBlockerManager reloadContentBlockerWithIdentifier:completionHandler:]
  +[SFContentBlockerManager getStateOfContentBlockerWithIdentifier:completionHandler:]
  +[SFContentBlockerManager _createContentExtensionsDirectoryWithURL:]

  // instance methods
  -[SFContentBlockerManager _findNewExtensionsAdded:toExistingExtensions:]
  -[SFContentBlockerManager _noteRecompilationWasAttemptedForExtension:]
  -[SFContentBlockerManager _saveContentBlockerRecompilationInformation]
  -[SFContentBlockerManager .cxx_destruct]
  -[SFContentBlockerManager savePendingChangesBeforeTermination]
  -[SFContentBlockerManager displayNameForExtension:]
  -[SFContentBlockerManager _addContentRuleList:forWebExtension:]
  -[SFContentBlockerManager _removeAllContentRuleLists]
  -[SFContentBlockerManager init]
  -[SFContentBlockerManager _beginContentBlockerDiscovery]
  -[SFContentBlockerManager reloadUserContentControllerReadingStateFromDisk:]
  -[SFContentBlockerManager addContentRuleList:]
  -[SFContentBlockerManager _recompileEnabledContentBlockersIfNeeded:]
  -[SFContentBlockerManager addObserver:]
  -[SFContentBlockerManager extensions]
  -[SFContentBlockerManager extensionIsEnabled:]
  -[SFContentBlockerManager _loadDeclarativeNetRequestContentBlockers]
  -[SFContentBlockerManager _loadContentBlockerStateFromDisk]
  -[SFContentBlockerManager loadDeclarativeNetRequestContentBlockerWithIdentifier:rules:completionHandler:]
  -[SFContentBlockerManager _updateContentBlockerStateFromDiscoveredContentBlockers:]
  -[SFContentBlockerManager _loadContentBlockerRecompilationInformationIfNeeded]
  -[SFContentBlockerManager _contentBlockerEnabledStateDidChange:]
  -[SFContentBlockerManager removeObserver:]
  -[SFContentBlockerManager setExtension:isEnabled:byUserGesture:]
  -[SFContentBlockerManager _hasRecompilationBeenAttemptedForExtension:]
  -[SFContentBlockerManager informObserversThatContentBlockerManagerExtensionListDidChange]


_SFUserActivityController : NSObject
  // class methods
  +[_SFUserActivityController sharedActivityController]
  +[_SFUserActivityController searchableItemAttributesForDictionary:]


_SFWebArchiveProvider : NSObject <_SFQuickLookDocumentSource>
 @property  WKWebView *webView
 @property  NSString *suggestedFilenameWithExtension
 @property  NSString *suggestedFilenameWithoutExtension
 @property  BOOL canGenerateWebArchive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebArchiveProvider webView]
  -[_SFWebArchiveProvider initWithWebView:]
  -[_SFWebArchiveProvider .cxx_destruct]
  -[_SFWebArchiveProvider suggestedFileNameForQuickLookDocument:]
  -[_SFWebArchiveProvider dataForQuickLookDocument:]
  -[_SFWebArchiveProvider suggestedFileExtensionForQuickLookDocument:]
  -[_SFWebArchiveProvider canGenerateWebArchive]
  -[_SFWebArchiveProvider generateWebArchiveWithCompletionHandler:]
  -[_SFWebArchiveProvider suggestedFilenameWithExtension]
  -[_SFWebArchiveProvider suggestedFilenameWithoutExtension]
  -[_SFWebArchiveProvider _suggestedFilenameWithoutExtension]
  -[_SFWebArchiveProvider _webViewUTI]
  -[_SFWebArchiveProvider _quickLookDocument]


SFPageZoomStepperController : NSObject <_SFSettingsAlertStepperController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPageZoomStepperController .cxx_destruct]
  -[SFPageZoomStepperController dealloc]
  -[SFPageZoomStepperController _pageZoomChanged:]
  -[SFPageZoomStepperController _updateButtonsEnabledWithZoomFactor:]
  -[SFPageZoomStepperController _updateButtonsEnabledOnMainQueueWithZoomFactor:]
  -[SFPageZoomStepperController prepareStepper:]
  -[SFPageZoomStepperController incrementValue:]
  -[SFPageZoomStepperController decrementValue:]
  -[SFPageZoomStepperController resetValue:]
  -[SFPageZoomStepperController longestTextForButton:]
  -[SFPageZoomStepperController initWithDocument:preferenceManager:]


_SFURLTextPreviewView : UIView
 @property  NSURL *URL

  // instance methods
  -[_SFURLTextPreviewView setURL:]
  -[_SFURLTextPreviewView .cxx_destruct]
  -[_SFURLTextPreviewView URL]
  -[_SFURLTextPreviewView initWithURL:]


SFAccountPickerConfiguration : NSObject
 @property  NSString *prompt
 @property  NSArray *serviceNameHintStrings
 @property  NSArray *domainHintStrings
 @property  unsigned long minimumNumberOfCredentialsToShowLikelyMatchesSection
 @property  BOOL forUserNamesOnly
 @property  BOOL shouldShowIcons
 @property  BOOL shouldAllowAddingNewPasswords
 @property  BOOL shouldEnableAddingNewPasswordsIfPossible
 @property  NSString *addPasswordSuggestedDomain

  // instance methods
  -[SFAccountPickerConfiguration setPrompt:]
  -[SFAccountPickerConfiguration .cxx_destruct]
  -[SFAccountPickerConfiguration prompt]
  -[SFAccountPickerConfiguration shouldShowIcons]
  -[SFAccountPickerConfiguration setShouldShowIcons:]
  -[SFAccountPickerConfiguration setMinimumNumberOfCredentialsToShowLikelyMatchesSection:]
  -[SFAccountPickerConfiguration setServiceNameHintStrings:]
  -[SFAccountPickerConfiguration _managedConfigurationProfileAllowsAdd]
  -[SFAccountPickerConfiguration shouldAllowAddingNewPasswords]
  -[SFAccountPickerConfiguration serviceNameHintStrings]
  -[SFAccountPickerConfiguration domainHintStrings]
  -[SFAccountPickerConfiguration setDomainHintStrings:]
  -[SFAccountPickerConfiguration minimumNumberOfCredentialsToShowLikelyMatchesSection]
  -[SFAccountPickerConfiguration forUserNamesOnly]
  -[SFAccountPickerConfiguration setForUserNamesOnly:]
  -[SFAccountPickerConfiguration shouldEnableAddingNewPasswordsIfPossible]
  -[SFAccountPickerConfiguration setShouldEnableAddingNewPasswordsIfPossible:]
  -[SFAccountPickerConfiguration addPasswordSuggestedDomain]
  -[SFAccountPickerConfiguration setAddPasswordSuggestedDomain:]


SFContactAutoFillDetailViewController : UITableViewController
  // instance methods
  -[SFContactAutoFillDetailViewController tableView:numberOfRowsInSection:]
  -[SFContactAutoFillDetailViewController .cxx_destruct]
  -[SFContactAutoFillDetailViewController tableView:didSelectRowAtIndexPath:]
  -[SFContactAutoFillDetailViewController viewDidLoad]
  -[SFContactAutoFillDetailViewController tableView:cellForRowAtIndexPath:]
  -[SFContactAutoFillDetailViewController initWithPropertyValues:]


SFPrivacyReportDetailToggleTableViewCell : UITableViewCell
 @property  long long detailType
 @property  <SFPrivacyReportDetailToggleTableViewCellDelegate> *delegate
 @property  BOOL useCurrentWebsiteHeader

  // instance methods
  -[SFPrivacyReportDetailToggleTableViewCell _updateTitle]
  -[SFPrivacyReportDetailToggleTableViewCell .cxx_destruct]
  -[SFPrivacyReportDetailToggleTableViewCell setDelegate:]
  -[SFPrivacyReportDetailToggleTableViewCell delegate]
  -[SFPrivacyReportDetailToggleTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportDetailToggleTableViewCell detailType]
  -[SFPrivacyReportDetailToggleTableViewCell setDetailType:]
  -[SFPrivacyReportDetailToggleTableViewCell setUseCurrentWebsiteHeader:]
  -[SFPrivacyReportDetailToggleTableViewCell _addSegmentForDetailType:]
  -[SFPrivacyReportDetailToggleTableViewCell _selectDetailType:]
  -[SFPrivacyReportDetailToggleTableViewCell useCurrentWebsiteHeader]


_SFNavigationBarURLButtonBackgroundView : UIImageView
  // instance methods
  -[_SFNavigationBarURLButtonBackgroundView _shouldAnimatePropertyWithKey:]


_SFNavigationBarURLButton : UIButton <PKScribbleInteractionDelegate, PKScribbleInteractionElementSource, UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFNavigationBarURLButton setHighlighted:]
  -[_SFNavigationBarURLButton pasteAndGo:]
  -[_SFNavigationBarURLButton copy:]
  -[_SFNavigationBarURLButton pointMostlyInside:withEvent:]
  -[_SFNavigationBarURLButton _dismissMenu:]
  -[_SFNavigationBarURLButton .cxx_destruct]
  -[_SFNavigationBarURLButton canBecomeFirstResponder]
  -[_SFNavigationBarURLButton _scribbleInteraction:willBeginWritingInElement:]
  -[_SFNavigationBarURLButton _scribbleInteraction:shouldBeginAtLocation:]
  -[_SFNavigationBarURLButton _scribbleInteraction:didFinishWritingInElement:]
  -[_SFNavigationBarURLButton _scribbleInteraction:frameForElement:]
  -[_SFNavigationBarURLButton _scribbleInteraction:requestElementsInRect:completion:]
  -[_SFNavigationBarURLButton gestureRecognizer:shouldReceiveTouch:]
  -[_SFNavigationBarURLButton pasteAndSearch:]
  -[_SFNavigationBarURLButton canPerformAction:withSender:]
  -[_SFNavigationBarURLButton initWithFrame:]
  -[_SFNavigationBarURLButton _scribbleInteraction:focusElement:initialFocusSelectionReferencePoint:completion:]
  -[_SFNavigationBarURLButton dealloc]
  -[_SFNavigationBarURLButton _handleLongPress:]
  -[_SFNavigationBarURLButton _scribbleInteraction:focusWillTransformElement:]
  -[_SFNavigationBarURLButton _hover:]


_SFNavigationBarLabelsContainer : UIView
  // instance methods
  -[_SFNavigationBarLabelsContainer _shouldAnimatePropertyWithKey:]


_SFNavigationBar : UIView <UIGestureRecognizerDelegate, _SFFluidProgressViewDelegate, _SFNavigationBarURLButtonDelegate, _UIBasicAnimationFactory, UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private, _UIClickInteractionDelegate, SFNavigationBarItemObserver, _SFNavigationBarCommon>
 @property  SFNavigationBarItem *item
 @property  BOOL usesNarrowLayout
 @property  BOOL unifiedFieldShowsProgressView
 @property  _SFBarTheme *theme
 @property  _SFNavigationBarTheme *effectiveTheme
 @property  BOOL hasToolbar
 @property  BOOL controlsHidden
 @property  BOOL expanded
 @property  UITextField *textField
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} URLOutlineFrameInNavigationBarSpace
 @property  BOOL backdropGroupDisabled
 @property  NSString *backdropGroupName
 @property  <_SFNavigationBarDelegate> *delegate
 @property  double defaultHeight
 @property  double minimumHeight
 @property  double controlsAlpha
 @property  double contentUnderStatusBarHeight
 @property  BOOL suppressesBlur
 @property  BOOL usesFaintSeparator
 @property  double visualHeight
 @property  double maximumHeight
 @property  double minimumBackdropHeight
 @property  UIView *inputAccessoryView
 @property  {CGSize=dd} dismissButtonSize
 @property  double dismissButtonPadding
 @property  BOOL sendingBarMetricsChangeNotification
 @property  UIBlurEffect *backdropEffect
 @property  <_SFPopoverSourceInfo> *formatMenuButtonPopoverSourceInfo
 @property  <_SFPopoverSourceInfo> *reloadButtonPopoverSourceInfo
 @property  <_SFPopoverSourceInfo> *URLOutlinePopoverSourceInfo
 @property  NSArray *popoverPassthroughViews
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFNavigationBar initialize]
  +[_SFNavigationBar separatorHeight]
  +[_SFNavigationBar _metricsCategory]
  +[_SFNavigationBar estimatedDefaultHeightForStatusBarHeight:]
  +[_SFNavigationBar estimatedMinimumHeightForStatusBarHeight:]

  // instance methods
  -[_SFNavigationBar textField]
  -[_SFNavigationBar setItem:]
  -[_SFNavigationBar setBackdropGroupName:]
  -[_SFNavigationBar usesNarrowLayout]
  -[_SFNavigationBar backdropEffect]
  -[_SFNavigationBar hitTest:withEvent:]
  -[_SFNavigationBar theme]
  -[_SFNavigationBar newTextField]
  -[_SFNavigationBar _dropInteraction:dataOwnerForSession:]
  -[_SFNavigationBar inputAccessoryView]
  -[_SFNavigationBar setInputAccessoryView:]
  -[_SFNavigationBar isExpanded]
  -[_SFNavigationBar traitCollectionDidChange:]
  -[_SFNavigationBar defaultHeight]
  -[_SFNavigationBar .cxx_destruct]
  -[_SFNavigationBar clickInteractionShouldBegin:]
  -[_SFNavigationBar dragInteraction:previewForLiftingItem:session:]
  -[_SFNavigationBar layoutSubviews]
  -[_SFNavigationBar _timingFunctionForAnimation]
  -[_SFNavigationBar canBecomeFirstResponder]
  -[_SFNavigationBar maximumHeight]
  -[_SFNavigationBar dropInteraction:canHandleSession:]
  -[_SFNavigationBar tintColorDidChange]
  -[_SFNavigationBar clickInteractionDidClickUp:]
  -[_SFNavigationBar setDelegate:]
  -[_SFNavigationBar setMaximumHeight:]
  -[_SFNavigationBar dragInteraction:willAnimateLiftWithAnimator:session:]
  -[_SFNavigationBar item]
  -[_SFNavigationBar _cancelButtonTapped:]
  -[_SFNavigationBar clickInteractionDidClickDown:]
  -[_SFNavigationBar dragInteraction:itemsForBeginningSession:]
  -[_SFNavigationBar dropInteraction:sessionDidUpdate:]
  -[_SFNavigationBar placeholderHorizontalInset]
  -[_SFNavigationBar backdropGroupName]
  -[_SFNavigationBar setTheme:]
  -[_SFNavigationBar setExpanded:textFieldSelectionRange:]
  -[_SFNavigationBar dragInteraction:sessionWillBegin:]
  -[_SFNavigationBar _updateText]
  -[_SFNavigationBar initWithFrame:]
  -[_SFNavigationBar delegate]
  -[_SFNavigationBar _dragInteraction:dataOwnerForSession:]
  -[_SFNavigationBar setExpanded:]
  -[_SFNavigationBar setUsesNarrowLayout:]
  -[_SFNavigationBar dropInteraction:performDrop:]
  -[_SFNavigationBar dealloc]
  -[_SFNavigationBar containsBarItem:]
  -[_SFNavigationBar minimumHeight]
  -[_SFNavigationBar _dragInteraction:viewToSnapshotItem:]
  -[_SFNavigationBar setTextFieldPlaceHolderColor:]
  -[_SFNavigationBar _basicAnimationForView:withKeyPath:]
  -[_SFNavigationBar setContentUnderStatusBarHeight:]
  -[_SFNavigationBar setDismissButtonStyle:animated:]
  -[_SFNavigationBar navigationBarURLButtonDidReceiveCopyCommand:]
  -[_SFNavigationBar navigationBarURLButtonDidReceivePasteCommand:]
  -[_SFNavigationBar navigationBarURLButton:shouldShowMenuForGestureWithRecognizer:]
  -[_SFNavigationBar navigationBarURLButtonShouldCopy:]
  -[_SFNavigationBar navigationBarURLButtonShouldPaste:]
  -[_SFNavigationBar navigationBarURLButtonIsUsingNarrowLayout:]
  -[_SFNavigationBar navigationBarURLButtonBeginSuppressingPlaceholder:]
  -[_SFNavigationBar navigationBarURLButtonEndSuppressingPlaceholder:]
  -[_SFNavigationBar navigationBarURLButton:canWriteAtLocation:]
  -[_SFNavigationBar textFieldIsEditableForNavigationBarURLButton:]
  -[_SFNavigationBar textFieldForNavigationBarURLButton:]
  -[_SFNavigationBar navigationBarURLButtonDidRequestFocusForPencilInput:completionHandler:]
  -[_SFNavigationBar navigationBarURLButton:shouldAllowLongPressAtPoint:]
  -[_SFNavigationBar textForNavigationBarURLButton:]
  -[_SFNavigationBar clearEphemeralUI]
  -[_SFNavigationBar _updateShowsLockIcon]
  -[_SFNavigationBar _updateAvailabilityButtonVisibilityForType:animated:showAvailabilityText:adjustURLLabels:]
  -[_SFNavigationBar _updateSecurityWarningsVisibility]
  -[_SFNavigationBar hasToolbar]
  -[_SFNavigationBar _URLTapped:]
  -[_SFNavigationBar _placeholderText]
  -[_SFNavigationBar _mediaStateMuteButtonTapped:]
  -[_SFNavigationBar _reloadButtonPressed]
  -[_SFNavigationBar _stopButtonPressed]
  -[_SFNavigationBar _compressedBarTapped]
  -[_SFNavigationBar _dismissButtonTapped:]
  -[_SFNavigationBar initWithFrame:inputMode:]
  -[_SFNavigationBar _controlsAlpha]
  -[_SFNavigationBar _formatToggleButtonTapped:]
  -[_SFNavigationBar setExpanded:completionHandler:]
  -[_SFNavigationBar setExpanded:textFieldSelectionRange:completionHandler:]
  -[_SFNavigationBar URLOutlineFrameInNavigationBarSpace]
  -[_SFNavigationBar _hideAvailabilityLabelNow]
  -[_SFNavigationBar animateSafariIconLinkFromPoint:inView:]
  -[_SFNavigationBar animateLinkImage:fromRect:inView:toBarItem:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
  -[_SFNavigationBar popoverSourceInfoForBarItem:]
  -[_SFNavigationBar fluidProgressViewWillShowProgress:]
  -[_SFNavigationBar fluidProgressViewDidShowProgress:]
  -[_SFNavigationBar navigationBarItemDidUpdateText:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsLockIcon:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsSearchIndicator:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsStopReloadButtons:]
  -[_SFNavigationBar navigationBarItemDidUpdateStopReloadButtonShowsStop:]
  -[_SFNavigationBar navigationBarItemDidUpdateFormatButtonSelected:]
  -[_SFNavigationBar navigationBarItemDidUpdateOverrideBarStyleForSecurityWarning:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsPageFormatButton:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsReaderButton:]
  -[_SFNavigationBar navigationBarItemDidUpdateMediaStateIcon:]
  -[_SFNavigationBar navigationBarItemDidUpdateProgressView:]
  -[_SFNavigationBar navigationBarItemDidUpdateCustomPlaceholderText:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsTranslationIcon:]
  -[_SFNavigationBar navigationBarItemDidUpdateShowsTranslationButton:]
  -[_SFNavigationBar navigationBarItemDidUpdateSecurityAnnotation:]
  -[_SFNavigationBar urlOutlineFrameRelativeToView:]
  -[_SFNavigationBar popoverPassthroughViews]
  -[_SFNavigationBar formatMenuButtonPopoverSourceInfo]
  -[_SFNavigationBar URLOutlinePopoverSourceInfo]
  -[_SFNavigationBar setUnifiedFieldShowsProgressView:]
  -[_SFNavigationBar setDismissButtonHidden:]
  -[_SFNavigationBar dismissButtonSize]
  -[_SFNavigationBar dismissButtonPadding]
  -[_SFNavigationBar visualHeight]
  -[_SFNavigationBar setHasToolbar:]
  -[_SFNavigationBar setControlsHidden:]
  -[_SFNavigationBar setMinimumBackdropHeight:]
  -[_SFNavigationBar setSuppressesBlur:]
  -[_SFNavigationBar setUsesFaintSeparator:]
  -[_SFNavigationBar setBackdropGroupDisabled:]
  -[_SFNavigationBar reloadButtonPopoverSourceInfo]
  -[_SFNavigationBar unifiedFieldShowsProgressView]
  -[_SFNavigationBar effectiveTheme]
  -[_SFNavigationBar areControlsHidden]
  -[_SFNavigationBar isBackdropGroupDisabled]
  -[_SFNavigationBar contentUnderStatusBarHeight]
  -[_SFNavigationBar suppressesBlur]
  -[_SFNavigationBar usesFaintSeparator]
  -[_SFNavigationBar minimumBackdropHeight]
  -[_SFNavigationBar isSendingBarMetricsChangeNotification]


SFNavigationBarAccessoryButtonArrangement : NSObject
  // instance methods
  -[SFNavigationBarAccessoryButtonArrangement .cxx_destruct]


SFLinkPreviewHeaderContentView : UIButton
 @property  <SFLinkPreviewHeaderContentViewDelegate> *delegate
 @property  NSString *domain
 @property  BOOL previewEnabled

  // instance methods
  -[SFLinkPreviewHeaderContentView setDomain:]
  -[SFLinkPreviewHeaderContentView updateConstraints]
  -[SFLinkPreviewHeaderContentView .cxx_destruct]
  -[SFLinkPreviewHeaderContentView domain]
  -[SFLinkPreviewHeaderContentView setDelegate:]
  -[SFLinkPreviewHeaderContentView initWithFrame:]
  -[SFLinkPreviewHeaderContentView delegate]
  -[SFLinkPreviewHeaderContentView setPreviewEnabled:]
  -[SFLinkPreviewHeaderContentView _togglePreviewButtonPressed]
  -[SFLinkPreviewHeaderContentView isPreviewEnabled]
  -[SFLinkPreviewHeaderContentView _updateDomainWithHidePreviewActionConstraints]
  -[SFLinkPreviewHeaderContentView _updateSafariIconWithShowPreviewActionConstraints]


SFEditableTableViewCell : UITableViewCell
 @property  BOOL enabled
 @property  <SFEditableTableViewCellDelegate> *delegate

  // instance methods
  -[SFEditableTableViewCell copy:]
  -[SFEditableTableViewCell .cxx_destruct]
  -[SFEditableTableViewCell tintColorDidChange]
  -[SFEditableTableViewCell setDelegate:]
  -[SFEditableTableViewCell isEnabled]
  -[SFEditableTableViewCell canPerformAction:withSender:]
  -[SFEditableTableViewCell delegate]
  -[SFEditableTableViewCell setEnabled:]
  -[SFEditableTableViewCell initWithEnabledState:]
  -[SFEditableTableViewCell _updateTextFieldTextColor]


_SFAccountManagerAppearanceValues : NSObject
  // class methods
  +[_SFAccountManagerAppearanceValues titleFontForNarrowCell]
  +[_SFAccountManagerAppearanceValues subtitleFontForNarrowCell]
  +[_SFAccountManagerAppearanceValues titleFontForLargerCell]
  +[_SFAccountManagerAppearanceValues subtitleFontForLargerCell]
  +[_SFAccountManagerAppearanceValues titleFontForStackViewLabel]
  +[_SFAccountManagerAppearanceValues subtitleFontForStackViewLabel]


_SFRecentWebSearchesController : WBSRecentWebSearchesController
  // class methods
  +[_SFRecentWebSearchesController _maximumNumberOfSearchesToTrack]

  // instance methods
  -[_SFRecentWebSearchesController .cxx_destruct]
  -[_SFRecentWebSearchesController _removeLegacyRecentSearchesData]
  -[_SFRecentWebSearchesController _saveRecentSearchDictionaries:toUserDefaultsUsingKey:]
  -[_SFRecentWebSearchesController _recentSearchDictionariesFromUserDefaultsUsingKey:]
  -[_SFRecentWebSearchesController _migrateLegacyData]
  -[_SFRecentWebSearchesController initWithPathToLegacySearchesFile:]


SFPrivacyReportPrivacyProxyTipTableViewCell : UITableViewCell
 @property  BOOL usesInsetStyle
 @property  <SFPrivacyReportPrivacyProxyTipTableViewCellDelegate> *delegate

  // instance methods
  -[SFPrivacyReportPrivacyProxyTipTableViewCell .cxx_destruct]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell setDelegate:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _dismiss:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell prepareForReuse]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell delegate]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _notifyDelegateOfStateChange]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell setUsesInsetStyle:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _createContentViews]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _setPrivacyProxyStateToTrackersAndWebsites:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _setPrivacyProxyStateToTrackers:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _openICloudPrivateRelaySettingsToLearnMore:]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell _turnOnCrossSiteTrackingProtectionIfNeeded]
  -[SFPrivacyReportPrivacyProxyTipTableViewCell usesInsetStyle]


_SFCrashBanner : UIView
 @property  _SFBarTheme *theme
 @property  UIButton *closeButton
 @property  NSString *backdropGroupName
 @property  unsigned long type
 @property  NSString *bannerText
 @property  NSString *manuallyWrappedBannerText

  // instance methods
  -[_SFCrashBanner setBackdropGroupName:]
  -[_SFCrashBanner theme]
  -[_SFCrashBanner setType:]
  -[_SFCrashBanner .cxx_destruct]
  -[_SFCrashBanner layoutSubviews]
  -[_SFCrashBanner sizeThatFits:]
  -[_SFCrashBanner backdropGroupName]
  -[_SFCrashBanner setTheme:]
  -[_SFCrashBanner initWithFrame:]
  -[_SFCrashBanner type]
  -[_SFCrashBanner setCloseButton:]
  -[_SFCrashBanner closeButton]
  -[_SFCrashBanner bannerText]
  -[_SFCrashBanner _bannerTheme]
  -[_SFCrashBanner _shouldUseManuallyWrappedCrashMessageForWidth:]
  -[_SFCrashBanner _labelLayoutSizeForWidth:]
  -[_SFCrashBanner setTheme:animated:]
  -[_SFCrashBanner setBannerText:manuallyWrappedBannerText:]
  -[_SFCrashBanner manuallyWrappedBannerText]


_SFActivityViewController : UIActivityViewController <_SFActivityItemCustomizationDelegate>
 @property  NSString *currentExtensionIdentifier
 @property  _SFSafariSharingExtensionController *sharingExtensionController
 @property  <_SFActivityViewControllerDelegate> *delegate
 @property  _SFActivityItemCustomizationController *customizationController
 @property  long long provenance
 @property  NSURL *sharingURL
 @property  NSArray *activityItemProviders
 @property  _SFPrintController *printController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFActivityViewController activeWebPageExtensionItemForURL:withPreviewImageHandler:]

  // instance methods
  -[_SFActivityViewController sharingURL]
  -[_SFActivityViewController .cxx_destruct]
  -[_SFActivityViewController printController]
  -[_SFActivityViewController setDelegate:]
  -[_SFActivityViewController setSharingURL:]
  -[_SFActivityViewController provenance]
  -[_SFActivityViewController delegate]
  -[_SFActivityViewController dealloc]
  -[_SFActivityViewController _updateActivityItems:applicationActivities:]
  -[_SFActivityViewController _performActivity:]
  -[_SFActivityViewController _executeActivity]
  -[_SFActivityViewController _updateActivityItems:]
  -[_SFActivityViewController sharingExtensionController]
  -[_SFActivityViewController _prepareActivity:completion:]
  -[_SFActivityViewController setProvenance:]
  -[_SFActivityViewController initWithActivityItems:applicationActivities:sharingURL:sourceURL:]
  -[_SFActivityViewController _updatePrintControllerWithActivityItems:]
  -[_SFActivityViewController activityDidComplete:withReturnedItems:success:]
  -[_SFActivityViewController setCustomizationController:]
  -[_SFActivityViewController currentExtensionIdentifier]
  -[_SFActivityViewController _processJavaScriptFinalizeReturnedItems:forExtension:]
  -[_SFActivityViewController _containsProviderForDownloadActivityAndGetMIMEType:uti:]
  -[_SFActivityViewController activityItemProviders]
  -[_SFActivityViewController prepareJavaScriptExtensionItemForActivity:]
  -[_SFActivityViewController _preparePrint:completion:]
  -[_SFActivityViewController customizationController]
  -[_SFActivityViewController setCurrentExtensionIdentifier:]
  -[_SFActivityViewController _extensionItemForExtensionActivity:]
  -[_SFActivityViewController _javaScriptProcessingFileURLInExtension:]
  -[_SFActivityViewController customizationControllerCustomizationsDidChange:]
  -[_SFActivityViewController initWithActivityItemProviderCollection:applicationActivities:sharingURL:sourceURL:]
  -[_SFActivityViewController setSharingExtensionController:]
  -[_SFActivityViewController setPrintController:]


_SFReaderWebProcessPlugInPageController : _SFWebProcessPlugInPageController
 @property  _SFWebProcessPlugInReaderEnabledPageController *originalPageController

  // class methods
  +[_SFReaderWebProcessPlugInPageController readerPageControllerForContextHandle:]

  // instance methods
  -[_SFReaderWebProcessPlugInPageController .cxx_construct]
  -[_SFReaderWebProcessPlugInPageController .cxx_destruct]
  -[_SFReaderWebProcessPlugInPageController webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:]
  -[_SFReaderWebProcessPlugInPageController loadNewArticle]
  -[_SFReaderWebProcessPlugInPageController willDestroyBrowserContextController:]
  -[_SFReaderWebProcessPlugInPageController setReaderIsActive:]
  -[_SFReaderWebProcessPlugInPageController initWithPlugIn:contextController:]
  -[_SFReaderWebProcessPlugInPageController setConfiguration:]
  -[_SFReaderWebProcessPlugInPageController originalArticleFinder]
  -[_SFReaderWebProcessPlugInPageController _initializeReaderJSControllerForFrame:]
  -[_SFReaderWebProcessPlugInPageController reloadArticle]
  -[_SFReaderWebProcessPlugInPageController setArticleLocale:]
  -[_SFReaderWebProcessPlugInPageController isolatedWorldForNextPageDetection]
  -[_SFReaderWebProcessPlugInPageController collectReaderContentFromPrintAndMailingFrame]
  -[_SFReaderWebProcessPlugInPageController printingMailingFrame]
  -[_SFReaderWebProcessPlugInPageController originalPageController]
  -[_SFReaderWebProcessPlugInPageController setOriginalPageController:]


_SFAdaptivePreviewViewController : UIViewController <_SFLinkPreviewHeaderDelegate>
 @property  <_SFAdaptivePreviewViewControllerDelegate> *delegate
 @property  NSArray *linkActions
 @property  _WKActivatedElementInfo *activatedElementInfo
 @property  NSURL *URL
 @property  UIViewController *contentViewController
 @property  BOOL showingLinkPreview
 @property  {CGSize=dd} preferredDocumentContentSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFAdaptivePreviewViewController setURL:]
  -[_SFAdaptivePreviewViewController .cxx_destruct]
  -[_SFAdaptivePreviewViewController viewDidLoad]
  -[_SFAdaptivePreviewViewController setDelegate:]
  -[_SFAdaptivePreviewViewController _allowsUserInteractionWhenPreviewedInContextMenu]
  -[_SFAdaptivePreviewViewController contentViewController]
  -[_SFAdaptivePreviewViewController URL]
  -[_SFAdaptivePreviewViewController viewWillAppear:]
  -[_SFAdaptivePreviewViewController delegate]
  -[_SFAdaptivePreviewViewController _updatePreferredContentSize]
  -[_SFAdaptivePreviewViewController initWithURL:]
  -[_SFAdaptivePreviewViewController _removeViewController:]
  -[_SFAdaptivePreviewViewController setLinkPreviewEnabled:]
  -[_SFAdaptivePreviewViewController _setUpLinkPreviewViewControllerIfNeeded]
  -[_SFAdaptivePreviewViewController _setUpTextPreviewViewControllerIfNeeded]
  -[_SFAdaptivePreviewViewController _addViewFromViewController:]
  -[_SFAdaptivePreviewViewController linkPreviewHeader:didEnableLinkPreview:]
  -[_SFAdaptivePreviewViewController linkPreviewHeaderBoundsDidChange:]
  -[_SFAdaptivePreviewViewController showingLinkPreview]
  -[_SFAdaptivePreviewViewController setPreferredDocumentContentSize:]
  -[_SFAdaptivePreviewViewController linkActions]
  -[_SFAdaptivePreviewViewController setLinkActions:]
  -[_SFAdaptivePreviewViewController activatedElementInfo]
  -[_SFAdaptivePreviewViewController setActivatedElementInfo:]
  -[_SFAdaptivePreviewViewController preferredDocumentContentSize]


SFFormAutoFillFrameHandle : NSObject <NSCopying, NSSecureCoding, WBUFormAutoFillFrameHandle>
 @property  _WKFrameHandle *frameHandle
 @property  NSURL *webui_URL
 @property  ^{__SecTrust=} webui_serverTrust
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutoFillFrameHandle supportsSecureCoding]

  // instance methods
  -[SFFormAutoFillFrameHandle initWithCoder:]
  -[SFFormAutoFillFrameHandle .cxx_destruct]
  -[SFFormAutoFillFrameHandle isEqual:]
  -[SFFormAutoFillFrameHandle dealloc]
  -[SFFormAutoFillFrameHandle copyWithZone:]
  -[SFFormAutoFillFrameHandle encodeWithCoder:]
  -[SFFormAutoFillFrameHandle frameHandle]
  -[SFFormAutoFillFrameHandle initWithFrameHandle:URL:serverTrust:]
  -[SFFormAutoFillFrameHandle webui_URL]
  -[SFFormAutoFillFrameHandle webui_serverTrust]
  -[SFFormAutoFillFrameHandle initWithWebProcessPlugInFrame:]


_SFPrintController : NSObject <UIPrintInteractionControllerDelegate, SFPrintPageRendererDelegate>
 @property  WKWebView *webView
 @property  _SFReaderController *readerController
 @property  <SFDialogPresenting> *dialogPresenter
 @property  <_SFPrintControllerDelegate> *delegate
 @property  SFPrintPageRenderer *printRenderer
 @property  UIPrintInfo *printInfo
 @property  BOOL displayingPrintUI
 @property  NSString *suggestedPDFFileName
 @property  UIPrintInteractionController *printInteractionController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPrintController webView]
  -[_SFPrintController _preparePrintInteractionControllerForUsage:onlyIfLoaded:completion:]
  -[_SFPrintController printInteractionControllerDidFinish]
  -[_SFPrintController dismissPrintInteractionControllerAnimated:]
  -[_SFPrintController _shouldAllowBlockedPrintWithCompletionHandler:]
  -[_SFPrintController _shouldPrintWhileLoadingForUsage:completionHandler:]
  -[_SFPrintController .cxx_destruct]
  -[_SFPrintController resetPrintUISuppression]
  -[_SFPrintController _enqueuePrintItem:]
  -[_SFPrintController getPDFDataForUsage:withCompletion:]
  -[_SFPrintController _didFinishPrintingCurrentItemWithResult:fromPrintInteractionControllerCompletion:]
  -[_SFPrintController setDelegate:]
  -[_SFPrintController suggestedPDFFileName]
  -[_SFPrintController preparePrintInteractionControllerForUsage:completion:]
  -[_SFPrintController init]
  -[_SFPrintController _printCurrentItem]
  -[_SFPrintController updatePrintInfo]
  -[_SFPrintController printRenderer]
  -[_SFPrintController readerController]
  -[_SFPrintController printInfo]
  -[_SFPrintController clearQueue]
  -[_SFPrintController printInteractionControllerParentViewController:]
  -[_SFPrintController setUpPrintController]
  -[_SFPrintController delegate]
  -[_SFPrintController presentingViewControllerForPrintPageRenderer:]
  -[_SFPrintController printFrame:initiatedByWebContent:completion:]
  -[_SFPrintController setDialogPresenter:]
  -[_SFPrintController isDisplayingPrintUI]
  -[_SFPrintController dialogPresenter]
  -[_SFPrintController dealloc]
  -[_SFPrintController setWebView:]
  -[_SFPrintController printInteractionController]
  -[_SFPrintController _isContentManaged]
  -[_SFPrintController handleNextPrintRequest]
  -[_SFPrintController setReaderController:]
  -[_SFPrintController _dequeuePrintItem]


SFPrintQueueItem : NSObject
 @property  _WKFrameHandle *frameHandle
 @property  BOOL initiatedByWebContent

  // instance methods
  -[SFPrintQueueItem .cxx_destruct]
  -[SFPrintQueueItem dealloc]
  -[SFPrintQueueItem frameHandle]
  -[SFPrintQueueItem completeWithResult:]
  -[SFPrintQueueItem initWithFrameHandle:initiatedByWebContent:completionHandler:]
  -[SFPrintQueueItem initiatedByWebContent]


_SFContentBlockersPreferenceManager : WBSContentBlockersPreferenceManager <SFContentBlockerManagerObserver>
 @property  BOOL hasEnabledContentBlockers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFContentBlockersPreferenceManager invalidate]
  -[_SFContentBlockersPreferenceManager initWithPerSitePreferencesStore:]
  -[_SFContentBlockersPreferenceManager contentBlockerManagerExtensionListDidChange:]
  -[_SFContentBlockersPreferenceManager _checkForContentBlockers]
  -[_SFContentBlockersPreferenceManager hasEnabledContentBlockers]


SFLinkRedirectionViewController : SFSafariViewController <UIViewControllerTransitioningDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFLinkRedirectionViewController viewDidLoad]
  -[SFLinkRedirectionViewController initWithURL:]
  -[SFLinkRedirectionViewController setDefersAddingRemoteViewController:]
  -[SFLinkRedirectionViewController remoteViewController:didResolveRedirectionWithURL:appLink:]


SFPasswordBreachToggleCell : UITableViewCell
  // instance methods
  -[SFPasswordBreachToggleCell .cxx_destruct]
  -[SFPasswordBreachToggleCell _userToggledBreachDetection:]
  -[SFPasswordBreachToggleCell initWithReuseIdentifier:delegate:]
  -[SFPasswordBreachToggleCell setCurrentPasswordBreachState:]


_SFSearchEngineInfo : WBSSearchProvider
  // instance methods
  -[_SFSearchEngineInfo searchShouldUseSafeSearchTemplate]
  -[_SFSearchEngineInfo classForCoder]


SFPrivacyReportSubheaderTableViewCell : UITableViewCell
 @property  NSString *subheaderText

  // instance methods
  -[SFPrivacyReportSubheaderTableViewCell .cxx_destruct]
  -[SFPrivacyReportSubheaderTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportSubheaderTableViewCell setSubheaderText:]
  -[SFPrivacyReportSubheaderTableViewCell subheaderText]


_SFMediaCaptureStatusBarManager : NSObject <SBSStatusBarStyleOverridesCoordinatorDelegate>
 @property  BOOL recording
 @property  NSString *simplifiedURLString
 @property  NSString *statusString
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFMediaCaptureStatusBarManager sharedManager]

  // instance methods
  -[_SFMediaCaptureStatusBarManager isRecording]
  -[_SFMediaCaptureStatusBarManager .cxx_destruct]
  -[_SFMediaCaptureStatusBarManager activateApp]
  -[_SFMediaCaptureStatusBarManager statusString]
  -[_SFMediaCaptureStatusBarManager statusBarCoordinator:invalidatedRegistrationWithError:]
  -[_SFMediaCaptureStatusBarManager statusBarCoordinator:receivedTapWithContext:completionBlock:]
  -[_SFMediaCaptureStatusBarManager setRecordingDocument:]
  -[_SFMediaCaptureStatusBarManager _acquireStatusBarOverrideWithAudioOnly:]
  -[_SFMediaCaptureStatusBarManager _releaseStatusBarOverride]
  -[_SFMediaCaptureStatusBarManager _cleanUpStatusBarOverride]
  -[_SFMediaCaptureStatusBarManager overrideStyleForAudioOnly:]
  -[_SFMediaCaptureStatusBarManager _didInvalideStatusBarOverride]
  -[_SFMediaCaptureStatusBarManager _didAcquireStatusBarOverrideSuccessfully:]
  -[_SFMediaCaptureStatusBarManager recordingDocumentDidBeginMediaCapture:audioOnly:]
  -[_SFMediaCaptureStatusBarManager recordingDocumentDidEndMediaCapture:]
  -[_SFMediaCaptureStatusBarManager cancelStatusBarOverride]
  -[_SFMediaCaptureStatusBarManager _acquireStatusBarOverride]
  -[_SFMediaCaptureStatusBarManager simplifiedURLString]


_SFFormMetadataController : WBSFormMetadataController <WKWebProcessPlugInFormDelegatePrivate>
 @property  WKWebProcessPlugInScriptWorld *scriptWorld
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFFormMetadataController _observer]
  -[_SFFormMetadataController didFindSearchURLTemplateString:inFrame:pageController:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:textDidChangeInTextField:inFrame:initiatedByUserTyping:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willSubmitForm:toFrame:fromFrame:withValues:]
  -[_SFFormMetadataController .cxx_destruct]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willSendSubmitEventToForm:inFrame:targetFrame:values:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextControllerShouldNotifyOnFormChanges:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willBeginInputSessionForElement:inFrame:userIsInteracting:]
  -[_SFFormMetadataController initWithPageController:]
  -[_SFFormMetadataController dealloc]
  -[_SFFormMetadataController invalidate]
  -[_SFFormMetadataController formAutoFillNodeForJSWrapper:inContext:]
  -[_SFFormMetadataController autoFillFormInFrame:withValues:fillSynchronously:setAutoFilled:selectFieldAfterFilling:]
  -[_SFFormMetadataController autoFillFormInFrame:withValues:fillSynchronously:setAutoFilled:focusFieldAfterFilling:fieldToFocus:fieldsToObscure:submitForm:]
  -[_SFFormMetadataController clearScriptWorld]
  -[_SFFormMetadataController passwordFieldFocused:inFrame:isPasswordFieldForUserCredentials:]
  -[_SFFormMetadataController creditCardFieldFocused:inFrame:]
  -[_SFFormMetadataController usernameFieldFocused:fieldMetadata:inForm:inFrame:]
  -[_SFFormMetadataController fillForm:inFrame:withPassword:focusedFieldControlID:]
  -[_SFFormMetadataController focusFormForStreamlinedLogin:inFrame:]
  -[_SFFormMetadataController finishedAutoFillingForm:inFrame:shouldSubmit:]
  -[_SFFormMetadataController finishedAutoFillingOneTimeCodeInFrame:shouldSubmit:]
  -[_SFFormMetadataController clearField:inFrame:]
  -[_SFFormMetadataController shouldIncludeNonEmptyFields]
  -[_SFFormMetadataController removeAutomaticPasswordElementsInFrame:focusedPasswordControlUniqueID:passwordControlUniqueIDs:blurAfterRemoval:]
  -[_SFFormMetadataController removeAutomaticPasswordVisualTreatmentInFrame:passwordControlUniqueIDs:]
  -[_SFFormMetadataController _collectFormMetadataForPreFilling:]
  -[_SFFormMetadataController _collectFormMetadataWithRequestType:ignoreAutoFilledForms:completionHandler:]
  -[_SFFormMetadataController _formContainsAutoFilledElements:]
  -[_SFFormMetadataController _assistedNodeMetadataWithPasswordField:passwordFieldMetadata:formMetadata:inFrame:]
  -[_SFFormMetadataController _willNavigateFrameWithUnsubmittedForm:]
  -[_SFFormMetadataController scriptWorld]
  -[_SFFormMetadataController collectURLsForPreFilling]
  -[_SFFormMetadataController collectFormMetadataForPreFilling]
  -[_SFFormMetadataController collectFormMetadataForPageLevelAutoFill]
  -[_SFFormMetadataController collectMetadataForTextField:inFrame:completionHandler:]
  -[_SFFormMetadataController didStartProvisionalLoadForFrame:]
  -[_SFFormMetadataController didSameDocumentNavigation:inFrame:]


_SFTableViewDiffableDataSource : UITableViewDiffableDataSource
 @property  <_SFTableViewDiffableDataSourceDelegate> *delegate

  // instance methods
  -[_SFTableViewDiffableDataSource tableView:sectionForSectionIndexTitle:atIndex:]
  -[_SFTableViewDiffableDataSource sectionIndexTitlesForTableView:]
  -[_SFTableViewDiffableDataSource tableView:canEditRowAtIndexPath:]
  -[_SFTableViewDiffableDataSource tableView:titleForHeaderInSection:]
  -[_SFTableViewDiffableDataSource .cxx_destruct]
  -[_SFTableViewDiffableDataSource setDelegate:]
  -[_SFTableViewDiffableDataSource tableView:commitEditingStyle:forRowAtIndexPath:]
  -[_SFTableViewDiffableDataSource tableView:titleForFooterInSection:]
  -[_SFTableViewDiffableDataSource delegate]


_SFPerSitePreferenceNotifyingListController : PSListController
  // instance methods
  -[_SFPerSitePreferenceNotifyingListController init]
  -[_SFPerSitePreferenceNotifyingListController dealloc]
  -[_SFPerSitePreferenceNotifyingListController _didUpdatePerSitePreferenceNotificationReceived:]
  -[_SFPerSitePreferenceNotifyingListController perSitePreferenceValueDidChange]
  -[_SFPerSitePreferenceNotifyingListController notifyPerSitePreferenceValueDidChange]


SFBrowserDocumentTrackerInfo : NSObject
 @property  <_SFBrowserDocument> *document
 @property  NSSet *allowedKnownTrackingThirdParties
 @property  NSSet *preventedKnownTrackingThirdParties

  // class methods
  +[SFBrowserDocumentTrackerInfo trackingPreventionEnabled]

  // instance methods
  -[SFBrowserDocumentTrackerInfo initWithDocument:]
  -[SFBrowserDocumentTrackerInfo _resetKnownTrackingThirdParties]
  -[SFBrowserDocumentTrackerInfo document]
  -[SFBrowserDocumentTrackerInfo .cxx_destruct]
  -[SFBrowserDocumentTrackerInfo documentDidCommitNavigation]
  -[SFBrowserDocumentTrackerInfo allowedKnownTrackingThirdParties]
  -[SFBrowserDocumentTrackerInfo _updateKnownTrackingThirdPartiesWithCompletionHandler:]
  -[SFBrowserDocumentTrackerInfo _flushKnownTrackingThirdParties]
  -[SFBrowserDocumentTrackerInfo dealloc]
  -[SFBrowserDocumentTrackerInfo updateKnownTrackingThirdPartiesWithCompletionHandler:]
  -[SFBrowserDocumentTrackerInfo preventedKnownTrackingThirdParties]
  -[SFBrowserDocumentTrackerInfo observeValueForKeyPath:ofObject:change:context:]


SFPasswordAutoFillCellData : NSObject
 @property  long long style

  // instance methods
  -[SFPasswordAutoFillCellData setStyle:]
  -[SFPasswordAutoFillCellData isEqual:]
  -[SFPasswordAutoFillCellData initWithStyle:]
  -[SFPasswordAutoFillCellData style]


SFHostApplicationCustomActivity : _SFActivity
 @property  SFCustomActivityProxy *activityProxy

  // instance methods
  -[SFHostApplicationCustomActivity .cxx_destruct]
  -[SFHostApplicationCustomActivity activityType]
  -[SFHostApplicationCustomActivity canPerformWithActivityItems:]
  -[SFHostApplicationCustomActivity activityTitle]
  -[SFHostApplicationCustomActivity activityProxy]
  -[SFHostApplicationCustomActivity activityImage]
  -[SFHostApplicationCustomActivity initWithActivityProxy:]


_SFPerSitePreferencesVendor : NSObject
 @property  WBSAutomaticReaderActivationManager *automaticReaderActivationManager
 @property  _SFContentBlockersPreferenceManager *contentBlockersPreferenceManager
 @property  _SFUserMediaPermissionController *sharedUserMediaPermissionController
 @property  _SFRequestDesktopSitePreferenceManager *requestDesktopSitePreferenceManager
 @property  _SFGeolocationPermissionManager *sharedGeolocationPermissionManager
 @property  _SFPageZoomPreferenceManager *pageZoomPreferenceManager
 @property  _SFAppInfoOverlayPreferenceManager *appInfoOverlayPreferenceManager

  // instance methods
  -[_SFPerSitePreferencesVendor sharedGeolocationPermissionManager]
  -[_SFPerSitePreferencesVendor .cxx_destruct]
  -[_SFPerSitePreferencesVendor appInfoOverlayPreferenceManager]
  -[_SFPerSitePreferencesVendor automaticReaderActivationManager]
  -[_SFPerSitePreferencesVendor managerForPreference:]
  -[_SFPerSitePreferencesVendor sharedUserMediaPermissionController]
  -[_SFPerSitePreferencesVendor pageZoomPreferenceManager]
  -[_SFPerSitePreferencesVendor requestDesktopSitePreferenceManager]
  -[_SFPerSitePreferencesVendor dealloc]
  -[_SFPerSitePreferencesVendor contentBlockersPreferenceManager]


SFLocationManager : NSObject
  // class methods
  +[SFLocationManager setDefaultEffectiveBundleIdentifier:]
  +[SFLocationManager sharedLocationManager]

  // instance methods
  -[SFLocationManager .cxx_destruct]
  -[SFLocationManager init]
  -[SFLocationManager _handleApplicationStateChange:]
  -[SFLocationManager _setApplication:isForeground:]
  -[SFLocationManager _updateAssertion]
  -[SFLocationManager _updateApplicationsToMonitor]
  -[SFLocationManager addClientForApplication:]
  -[SFLocationManager removeClientForApplication:]


SFSafariViewControllerPrewarmingToken : NSObject <NSSecureCoding>
 @property  NSOrderedSet *URLs
 @property  unsigned long requestID
 @property  BOOL valid

  // class methods
  +[SFSafariViewControllerPrewarmingToken supportsSecureCoding]

  // instance methods
  -[SFSafariViewControllerPrewarmingToken requestID]
  -[SFSafariViewControllerPrewarmingToken initWithCoder:]
  -[SFSafariViewControllerPrewarmingToken isValid]
  -[SFSafariViewControllerPrewarmingToken .cxx_destruct]
  -[SFSafariViewControllerPrewarmingToken isEqual:]
  -[SFSafariViewControllerPrewarmingToken dealloc]
  -[SFSafariViewControllerPrewarmingToken invalidate]
  -[SFSafariViewControllerPrewarmingToken URLs]
  -[SFSafariViewControllerPrewarmingToken encodeWithCoder:]
  -[SFSafariViewControllerPrewarmingToken initWithURLs:]


_SFReaderController : NSObject <SFReaderEventsListener, SFReaderContext, WKNavigationDelegate, WKUIDelegatePrivate>
 @property  WKWebView *webView
 @property  WKWebView *readerWebView
 @property  <_SFReaderControllerDelegate> *delegate
 @property  BOOL readerAvailable
 @property  BOOL contentIsReady
 @property  <WKUIDelegatePrivate> *webViewUIDelegate
 @property  NSString *articleText
 @property  BOOL doesPageUseSearchEngineOptimizationMetadata
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long currentAppearance

  // instance methods
  -[_SFReaderController readerWebView]
  -[_SFReaderController _webView:contextMenuForElement:willCommitWithAnimator:]
  -[_SFReaderController isReaderAvailable]
  -[_SFReaderController webView]
  -[_SFReaderController _setUpReaderActivityListener]
  -[_SFReaderController _webView:dataInteractionOperationWasHandled:forSession:itemProviders:]
  -[_SFReaderController setReaderLanguageTag:]
  -[_SFReaderController readerControllerProxy]
  -[_SFReaderController webViewUIDelegate]
  -[_SFReaderController _webView:dataInteraction:sessionWillBegin:]
  -[_SFReaderController setReaderInitialTopScrollOffset:configuration:isViewingArchive:]
  -[_SFReaderController deactivateReaderNow:]
  -[_SFReaderController collectReadingListInfoWithBookmarkID:completionHandler:]
  -[_SFReaderController _webView:getAlternateURLFromImage:completionHandler:]
  -[_SFReaderController didDetermineAdditionalTextSamples:]
  -[_SFReaderController clearUnusedReaderResourcesSoon]
  -[_SFReaderController didCreateReaderWebView:]
  -[_SFReaderController didFinishPresentationUpdateAfterTransitioningToReader]
  -[_SFReaderController initWithWebView:]
  -[_SFReaderController .cxx_destruct]
  -[_SFReaderController setContentIsReady:]
  -[_SFReaderController didDetermineReaderAvailabilityForDynamicCheck:]
  -[_SFReaderController configurationManager]
  -[_SFReaderController readerURL]
  -[_SFReaderController didCollectReadingListItemInfo:bookmarkID:]
  -[_SFReaderController _saveConfigurationAndSendToWebProcess]
  -[_SFReaderController resetReaderTextSize]
  -[_SFReaderController setDelegate:]
  -[_SFReaderController didDetermineReaderAvailability:]
  -[_SFReaderController setReaderInitialTopScrollOffset:configuration:isViewingArchive:scrollOffsetDictionary:]
  -[_SFReaderController didPrepareReaderContentForPrinting:]
  -[_SFReaderController scrollPositionInformation]
  -[_SFReaderController owningWebViewDidCommitNavigation]
  -[_SFReaderController _webView:shouldIncludeAppLinkActionsForElement:]
  -[_SFReaderController isLoadingNextPage]
  -[_SFReaderController stopLoadingNextPage]
  -[_SFReaderController didCollectArticleContent:]
  -[_SFReaderController didSetReaderConfiguration:]
  -[_SFReaderController collectReaderContentForMailWithCompletion:]
  -[_SFReaderController readerTextWasExtracted:withMetadata:wasDeterminingAvailabilility:]
  -[_SFReaderController activateFont:]
  -[_SFReaderController setReaderFont:]
  -[_SFReaderController loadNewArticle]
  -[_SFReaderController activateReader]
  -[_SFReaderController didCollectReaderContentForMail:]
  -[_SFReaderController contentDidBecomeReadyWithArticleText:]
  -[_SFReaderController sendConfigurationToWebProcess]
  -[_SFReaderController checkReaderAvailability]
  -[_SFReaderController createArticleFinder]
  -[_SFReaderController _webView:dataInteraction:session:didEndWithOperation:]
  -[_SFReaderController clearAvailability]
  -[_SFReaderController _readerWebViewIsReady]
  -[_SFReaderController _webView:performDataInteractionOperationWithItemProviders:]
  -[_SFReaderController setWebViewUIDelegate:]
  -[_SFReaderController fontManager]
  -[_SFReaderController articleText]
  -[_SFReaderController setReaderTheme:forAppearance:]
  -[_SFReaderController _sendReaderAvailabilityNotificationForState:reason:]
  -[_SFReaderController setUpReaderWebViewIfNeededAndPerformBlock:]
  -[_SFReaderController setReaderAvailable:]
  -[_SFReaderController contentIsReady]
  -[_SFReaderController shouldCreateArticleFinder]
  -[_SFReaderController clearReaderWebView]
  -[_SFReaderController delegate]
  -[_SFReaderController _webView:contextMenuDidEndForElement:]
  -[_SFReaderController _updateJavaScriptEnabled]
  -[_SFReaderController increaseReaderTextSize]
  -[_SFReaderController _webView:willUpdateDataInteractionOperationToOperation:forSession:]
  -[_SFReaderController collectArticleContent]
  -[_SFReaderController webView:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFReaderController _collectReaderContentForMailWithCompletion:]
  -[_SFReaderController _webView:contextMenuConfigurationForElement:completionHandler:]
  -[_SFReaderController _webView:contextMenuWillPresentForElement:]
  -[_SFReaderController dealloc]
  -[_SFReaderController setReaderIsActive:]
  -[_SFReaderController _webView:actionsForElement:defaultActions:]
  -[_SFReaderController canIncreaseReaderTextSize]
  -[_SFReaderController _performActionsDelayedUntilReaderWebViewIsReadyDidTimeout:]
  -[_SFReaderController invalidate]
  -[_SFReaderController prepareReaderPrintingIFrameWithCompletion:]
  -[_SFReaderController decreaseReaderTextSize]
  -[_SFReaderController setDoesPageUseSearchEngineOptimizationMetadata:]
  -[_SFReaderController currentAppearance]
  -[_SFReaderController doesPageUseSearchEngineOptimizationMetadata]
  -[_SFReaderController observeValueForKeyPath:ofObject:change:context:]
  -[_SFReaderController _performActionsDelayedUntilReaderWebViewIsReady]
  -[_SFReaderController canDecreaseReaderTextSize]


SFToolbarContainer : UIView
  // instance methods
  -[SFToolbarContainer hitTest:withEvent:]
  -[SFToolbarContainer .cxx_destruct]
  -[SFToolbarContainer layoutSubviews]


SFBarRegistration : UIResponder <_SFBarRegistrationToken>
 @property  long long contentMode
 @property  long long state
 @property  unsigned long pageFormatItemState
 @property  UIButton *microphoneButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBarRegistration _itemReceivedTap:]
  -[SFBarRegistration updateArrangedUIBarButtonItemsIfNeeded]
  -[SFBarRegistration updateBarAnimated:]
  -[SFBarRegistration .cxx_destruct]
  -[SFBarRegistration _updateTitlesAndMenus]
  -[SFBarRegistration pulseBarItem:]
  -[SFBarRegistration _effectiveArrangedBarItems]
  -[SFBarRegistration _UIBarButtonItemForBarItem:]
  -[SFBarRegistration _arrangedBarItemsNeedUpdate]
  -[SFBarRegistration setBarItem:hidden:]
  -[SFBarRegistration _newBarButtonItemForSFBarItem:]
  -[SFBarRegistration setBarItem:selected:]
  -[SFBarRegistration _UIBarButtonItemsForArrangedBarItems:]
  -[SFBarRegistration popoverSourceInfoForItem:]
  -[SFBarRegistration setDownloadsItemProgress:]
  -[SFBarRegistration setCustomActivityImage:accessibilityLabel:]
  -[SFBarRegistration initWithBar:barManager:layout:persona:]
  -[SFBarRegistration _itemReceivedTouchDown:]
  -[SFBarRegistration canPerformAction:withSender:]
  -[SFBarRegistration setProgress:forBarItem:]
  -[SFBarRegistration setBarItem:enabled:]
  -[SFBarRegistration pulseDownloadsItem]
  -[SFBarRegistration _barItemForUIBarButtonItem:]
  -[SFBarRegistration _itemReceivedLongPress:]
  -[SFBarRegistration containsBarItem:]
  -[SFBarRegistration UIBarButtonItemForItem:]
  -[SFBarRegistration setBarItem:menu:]


_SFFormAutoFillController : NSObject <SFCredentialProviderExtensionManagerObserver, _SFAutoFillInputViewDelegate, SFFormMetadataObserver, _SFAuthenticationClient>
 @property  UIView<WBUFormAutoFillWebView> *webView
 @property  BOOL metadataCorrectionsEnabled
 @property  _SFAuthenticationContext *authenticationContext
 @property  SFAppAutoFillOneTimeCodeProvider *oneTimeCodeProvider
 @property  CNContact *lastFilledContact
 @property  WBSCreditCardData *lastFilledCreditCardData
 @property  NSSet *lastFilledCreditCardDataTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFFormAutoFillController _filterAndSortCredentialIdentities:pageURL:exactMatchesOnly:]
  +[_SFFormAutoFillController _getExternalLoginCredentialSuggestionsForDomains:completion:]
  +[_SFFormAutoFillController _getExternalLoginCredentialSuggestionsForDomains:pageURL:completion:]

  // instance methods
  -[_SFFormAutoFillController webView]
  -[_SFFormAutoFillController performPageLevelAutoFill]
  -[_SFFormAutoFillController automaticPasswordSheetDismissed]
  -[_SFFormAutoFillController willSubmitForm:inFrame:submissionHandler:]
  -[_SFFormAutoFillController didRemoveAutomaticStrongPasswordInForm:inputSessionUserObject:inFrame:]
  -[_SFFormAutoFillController annotateForm:inFrame:withValues:]
  -[_SFFormAutoFillController setLastFilledCreditCardData:]
  -[_SFFormAutoFillController didCollectFormMetadataForPageLevelAutoFill:atURL:]
  -[_SFFormAutoFillController fieldFocusedWithInputSession:]
  -[_SFFormAutoFillController oneTimeCodeProvider]
  -[_SFFormAutoFillController autoFillFormInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:fieldsToObscure:submitForm:]
  -[_SFFormAutoFillController authenticationMessageForContext:]
  -[_SFFormAutoFillController updateSuggestions]
  -[_SFFormAutoFillController _websiteForAuthenticationPrompt]
  -[_SFFormAutoFillController beginAutomaticPasswordInteractionWithInputSession:]
  -[_SFFormAutoFillController _beginAutomaticPasswordInteractionWithInputSession:generatedPassword:ignorePreviousDecision:]
  -[_SFFormAutoFillController autoFillDidFinishWithUpdatedFormMetadata:inFrame:shouldSubmit:]
  -[_SFFormAutoFillController didUpdateUnsubmittedForm:inFrame:]
  -[_SFFormAutoFillController textDidChangeInTextField:inForm:inFrame:]
  -[_SFFormAutoFillController .cxx_destruct]
  -[_SFFormAutoFillController autoFillForm:inFrame:withGeneratedPassword:]
  -[_SFFormAutoFillController autoFillOneTimeCodeFieldsInFrame:withValue:shouldSubmit:]
  -[_SFFormAutoFillController elementIsBeingFocusedForStreamlinedLogin:]
  -[_SFFormAutoFillController autoFill]
  -[_SFFormAutoFillController _simulatedWebEventForReturnKeyWithType:]
  -[_SFFormAutoFillController offerToSaveUnsubmittedFormDataIfNeeded]
  -[_SFFormAutoFillController setLastFilledCreditCardDataTypes:]
  -[_SFFormAutoFillController usernameFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController _addUniqueIDsOfAutoFilledForm:]
  -[_SFFormAutoFillController willNavigateFrame:withUnsubmittedForm:]
  -[_SFFormAutoFillController _removeUniqueIDsOfAutoFilledForm:]
  -[_SFFormAutoFillController suppressSoftwareKeyboardOnWebView:]
  -[_SFFormAutoFillController insertTextSuggestion:]
  -[_SFFormAutoFillController passcodePromptForContext:]
  -[_SFFormAutoFillController willSubmitFormValues:userObject:submissionHandler:]
  -[_SFFormAutoFillController automaticPasswordForPasswordField:inForm:isFrame:]
  -[_SFFormAutoFillController autoFillInputViewDidSelectUseKeyboard:]
  -[_SFFormAutoFillController didCollectURLsForPreFilling:atURL:]
  -[_SFFormAutoFillController prefillFormsSoonIfNeeded]
  -[_SFFormAutoFillController _prefillTimerFired:]
  -[_SFFormAutoFillController credentialProviderExtensionManagerExtensionListDidChange:]
  -[_SFFormAutoFillController displayMessageAsTitleForContext:]
  -[_SFFormAutoFillController didFillOneTimeCodeAndShouldSubmit:]
  -[_SFFormAutoFillController beginAutomaticPasswordInteractionWithInputSession:generatedPassword:]
  -[_SFFormAutoFillController removeAutomaticPasswordVisualTreatment]
  -[_SFFormAutoFillController _authenticateForAutoFillForHighLevelDomain:withCompletion:]
  -[_SFFormAutoFillController autoFillTextSuggestion:]
  -[_SFFormAutoFillController _fieldFocusedWithInputSession:]
  -[_SFFormAutoFillController _dismissKeyboardAndSimulateCarriageReturnKeyEvents:]
  -[_SFFormAutoFillController _didFocusSensitiveFormField]
  -[_SFFormAutoFillController passwordFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController didCollectFormMetadataForPreFilling:atURL:]
  -[_SFFormAutoFillController autoFillFormInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:submitForm:]
  -[_SFFormAutoFillController metadataCorrectionsEnabled]
  -[_SFFormAutoFillController _restoreInputAssistantItemsIfNecessary]
  -[_SFFormAutoFillController initWithWebView:delegate:]
  -[_SFFormAutoFillController didPerformPageLevelAutoFill:]
  -[_SFFormAutoFillController authenticateForAutoFillAuthenticationType:withCompletion:]
  -[_SFFormAutoFillController removeAutomaticPasswordButtonInitiatedByUser:]
  -[_SFFormAutoFillController dealloc]
  -[_SFFormAutoFillController _removeAutomaticPasswordButtonInitiatedByUser:removeVisualTreatmentOnly:]
  -[_SFFormAutoFillController invalidate]
  -[_SFFormAutoFillController lastFilledCreditCardData]
  -[_SFFormAutoFillController authenticationCustomUIProgressObserverForContext:]
  -[_SFFormAutoFillController prepareForShowingAutomaticStrongPasswordWithInputSession:]
  -[_SFFormAutoFillController fieldDidFocusWithInputSession:]
  -[_SFFormAutoFillController _showingAutoFillInputView]
  -[_SFFormAutoFillController didFillGeneratedPasswordInForm:inFrame:]
  -[_SFFormAutoFillController autoFillInputViewDidSelectMorePasswords:]
  -[_SFFormAutoFillController setFormControls:areAutoFilled:andClearField:inFrame:]
  -[_SFFormAutoFillController _preFillDisabledHosts]
  -[_SFFormAutoFillController textFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController _fieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController lastFilledContact]
  -[_SFFormAutoFillController fieldWillFocusWithInputSession:]
  -[_SFFormAutoFillController authenticationContext]
  -[_SFFormAutoFillController setLastFilledContact:]
  -[_SFFormAutoFillController shouldShowIconsInPasswordPicker]
  -[_SFFormAutoFillController fetchMetadataForTextField:inFrame:withCompletion:]
  -[_SFFormAutoFillController setMetadataCorrectionsEnabled:]
  -[_SFFormAutoFillController fillTextField:inFrame:withGeneratedPassword:]
  -[_SFFormAutoFillController lastFilledCreditCardDataTypes]
  -[_SFFormAutoFillController _hideInputAssistantItemsIfNecessary]


_SFActivityItemProvider : UIActivityItemProvider
 @property  NSURL *url
 @property  NSString *pageTitle
 @property  NSSet *excludedActivityTypes
 @property  @? thumbnailHandler
 @property  WKWebView *webView

  // instance methods
  -[_SFActivityItemProvider webView]
  -[_SFActivityItemProvider activityViewController:thumbnailImageForActivityType:suggestedSize:]
  -[_SFActivityItemProvider initWithPlaceholderItem:]
  -[_SFActivityItemProvider main]
  -[_SFActivityItemProvider url]
  -[_SFActivityItemProvider activityViewController:subjectForActivityType:]
  -[_SFActivityItemProvider setExcludedActivityTypes:]
  -[_SFActivityItemProvider .cxx_destruct]
  -[_SFActivityItemProvider activityViewController:itemForActivityType:]
  -[_SFActivityItemProvider item]
  -[_SFActivityItemProvider setUrl:]
  -[_SFActivityItemProvider pageTitle]
  -[_SFActivityItemProvider setWebView:]
  -[_SFActivityItemProvider setPageTitle:]
  -[_SFActivityItemProvider excludedActivityTypes]
  -[_SFActivityItemProvider initWithURL:pageTitle:webView:]
  -[_SFActivityItemProvider initWithPlaceholderItem:URL:pageTitle:webView:]
  -[_SFActivityItemProvider thumbnailHandler]
  -[_SFActivityItemProvider setThumbnailHandler:]


_SFActivityExtensionItemProvider : _SFActivityItemProvider
 @property  NSExtensionItem *extensionItem

  // instance methods
  -[_SFActivityExtensionItemProvider .cxx_destruct]
  -[_SFActivityExtensionItemProvider activityViewController:itemForActivityType:]
  -[_SFActivityExtensionItemProvider item]
  -[_SFActivityExtensionItemProvider _itemForActivityType:]
  -[_SFActivityExtensionItemProvider initWithExtensionItem:URL:pageTitle:webView:]
  -[_SFActivityExtensionItemProvider extensionItem]
  -[_SFActivityExtensionItemProvider setExtensionItem:]


SFPasswordRemoteViewController : _UIRemoteViewController <SFPasswordRemoteViewControllerProtocol>
 @property  <SFPasswordRemoteViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordRemoteViewController requestViewControllerWithConnectionHandler:]
  +[SFPasswordRemoteViewController exportedInterface]
  +[SFPasswordRemoteViewController shouldPropagateAppearanceCustomizations]
  +[SFPasswordRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFPasswordRemoteViewController viewServiceDidTerminateWithError:]
  -[SFPasswordRemoteViewController .cxx_destruct]
  -[SFPasswordRemoteViewController setDelegate:]
  -[SFPasswordRemoteViewController delegate]
  -[SFPasswordRemoteViewController willDismissServiceViewController]


_SFWebAppMediaCaptureStatusBarManager : _SFMediaCaptureStatusBarManager
  // instance methods
  -[_SFWebAppMediaCaptureStatusBarManager statusString]
  -[_SFWebAppMediaCaptureStatusBarManager overrideStyleForAudioOnly:]


SFPrivacyReportOnboardingController : NSObject
  // class methods
  +[SFPrivacyReportOnboardingController onboardingViewControllerWithCompletionHandler:]
  +[SFPrivacyReportOnboardingController _createEnableTrackerProtectionControllerWithCompletionHandler:]
  +[SFPrivacyReportOnboardingController _createEnableRecommendedProtectionControllerWithCompletionHandler:]


SFPrivacyReportTrackerDetailViewController : UITableViewController
  // instance methods
  -[SFPrivacyReportTrackerDetailViewController traitCollectionDidChange:]
  -[SFPrivacyReportTrackerDetailViewController tableView:numberOfRowsInSection:]
  -[SFPrivacyReportTrackerDetailViewController tableView:titleForHeaderInSection:]
  -[SFPrivacyReportTrackerDetailViewController .cxx_destruct]
  -[SFPrivacyReportTrackerDetailViewController viewDidLoad]
  -[SFPrivacyReportTrackerDetailViewController tableView:cellForRowAtIndexPath:]
  -[SFPrivacyReportTrackerDetailViewController initWithTracker:]
  -[SFPrivacyReportTrackerDetailViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SFPrivacyReportTrackerDetailViewController viewLayoutMarginsDidChange]
  -[SFPrivacyReportTrackerDetailViewController _updateHeaderSize]


_SFReaderExtractedData : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *title
 @property  NSString *author
 @property  NSString *publishedDate
 @property  NSData *body
 @property  NSURL *mainImageURL
 @property  NSURL *url

  // class methods
  +[_SFReaderExtractedData supportsSecureCoding]

  // instance methods
  -[_SFReaderExtractedData initWithCoder:]
  -[_SFReaderExtractedData body]
  -[_SFReaderExtractedData url]
  -[_SFReaderExtractedData .cxx_destruct]
  -[_SFReaderExtractedData author]
  -[_SFReaderExtractedData title]
  -[_SFReaderExtractedData copyWithZone:]
  -[_SFReaderExtractedData encodeWithCoder:]
  -[_SFReaderExtractedData _initWithAuthor:body:publishedDate:title:mainImageURL:url:]
  -[_SFReaderExtractedData initWithReaderContent:url:]
  -[_SFReaderExtractedData publishedDate]
  -[_SFReaderExtractedData mainImageURL]


_SFUserMediaPermissionController : WBSUserMediaPermissionController
  // instance methods
  -[_SFUserMediaPermissionController requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:dialogPresenter:]
  -[_SFUserMediaPermissionController _didRetrieveUserMediaPermission:forDevices:url:mainFrameURL:decisionHandler:dialogPresenter:]
  -[_SFUserMediaPermissionController savePendingChanges]
  -[_SFUserMediaPermissionController coalescedAsynchronousWriter:didFinishWritingData:]


SFAuthenticationViewController : SFSafariViewController <UIViewControllerTransitioningDelegate>
 @property  @? dismissCompletionHandler
 @property  <SFAuthenticationViewControllerPresentationDelegate> *presentationDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFAuthenticationViewController _supportsPrewarming]

  // instance methods
  -[SFAuthenticationViewController .cxx_destruct]
  -[SFAuthenticationViewController dismissViewControllerAnimated:completion:]
  -[SFAuthenticationViewController presentationDelegate]
  -[SFAuthenticationViewController dismissCompletionHandler]
  -[SFAuthenticationViewController setDismissCompletionHandler:]
  -[SFAuthenticationViewController setPresentationDelegate:]
  -[SFAuthenticationViewController initWithURL:callbackURLScheme:usingEphemeralSession:presentationContextWindow:]
  -[SFAuthenticationViewController setDefersAddingRemoteViewController:]
  -[SFAuthenticationViewController _presentViewController]
  -[SFAuthenticationViewController _restartServiceViewController]
  -[SFAuthenticationViewController remoteViewController:hostApplicationOpenURL:]
  -[SFAuthenticationViewController remoteViewController:didDecideCookieSharingForURL:shouldCancel:]


_SFAppInfoOverlayPreferenceManager : WBSPerSitePreferenceManager <WBSPerSitePreferenceManagerStorageDelegate, WBSPerSitePreferenceManagerDefaultsDelegate, WBSPerSitePreferenceBinaryToggleItemManager>
 @property  WBSPerSitePreference *appInfoOverlayPreference
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  WBSPerSitePreferencesSQLiteStore *perSitePreferencesStore

  // instance methods
  -[_SFAppInfoOverlayPreferenceManager _defaultPreferenceValue]
  -[_SFAppInfoOverlayPreferenceManager preferences]
  -[_SFAppInfoOverlayPreferenceManager .cxx_destruct]
  -[_SFAppInfoOverlayPreferenceManager perSitePreferencesStore]
  -[_SFAppInfoOverlayPreferenceManager preferenceNameForPreference:]
  -[_SFAppInfoOverlayPreferenceManager init]
  -[_SFAppInfoOverlayPreferenceManager valuesForPreference:]
  -[_SFAppInfoOverlayPreferenceManager defaultPreferenceValueForPreferenceIfNotCustomized:]
  -[_SFAppInfoOverlayPreferenceManager localizedStringForValue:inPreference:]
  -[_SFAppInfoOverlayPreferenceManager offValueForPreference:]
  -[_SFAppInfoOverlayPreferenceManager onValueForPreference:]
  -[_SFAppInfoOverlayPreferenceManager initWithPerSitePreferencesStore:]
  -[_SFAppInfoOverlayPreferenceManager appInfoOverlayPreference]
  -[_SFAppInfoOverlayPreferenceManager getAppInfoOverlayPreferenceForDomain:completionHandler:]
  -[_SFAppInfoOverlayPreferenceManager setAppInfoOverlayPreferenceForDomain:settings:completionHandler:]


SFAutoFillPasswordsTableViewCell : UITableViewCell
  // instance methods
  -[SFAutoFillPasswordsTableViewCell traitCollectionDidChange:]
  -[SFAutoFillPasswordsTableViewCell .cxx_destruct]
  -[SFAutoFillPasswordsTableViewCell initWithStyle:reuseIdentifier:]
  -[SFAutoFillPasswordsTableViewCell _configureTitleLabelFont:]


SFContactAutoFillPropertyValues : NSObject
 @property  long long selectedIndex
 @property  SFContactAutoFillValue *selectedValue
 @property  NSArray *values
 @property  NSString *property

  // instance methods
  -[SFContactAutoFillPropertyValues values]
  -[SFContactAutoFillPropertyValues property]
  -[SFContactAutoFillPropertyValues selectedIndex]
  -[SFContactAutoFillPropertyValues .cxx_destruct]
  -[SFContactAutoFillPropertyValues setSelectedIndex:]
  -[SFContactAutoFillPropertyValues initWithValues:property:]
  -[SFContactAutoFillPropertyValues selectedValue]


SFBrowserPersonaAnalyticsHelper : NSObject
  // instance methods
  -[SFBrowserPersonaAnalyticsHelper initWithPersona:]
  -[SFBrowserPersonaAnalyticsHelper didLongTapToolbarButton:]
  -[SFBrowserPersonaAnalyticsHelper didDismissWithMethod:]
  -[SFBrowserPersonaAnalyticsHelper didPresentFromHostApp:]


_SFToolbar : UIToolbar <_SFBarCommon, _SFBarRegistrationObserving>
 @property  long long placement
 @property  NSString *backdropGroupName
 @property  _SFBarTheme *theme
 @property  BOOL usesLegacyDarkBackdrop
 @property  <_SFBarRegistrationToken> *barRegistration
 @property  UIView *superviewOwningLayout
 @property  double baselineOffsetAdjustment
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFToolbar _deviceSupportsMinibars]

  // instance methods
  -[_SFToolbar setBackdropGroupName:]
  -[_SFToolbar placement]
  -[_SFToolbar theme]
  -[_SFToolbar setItems:animated:]
  -[_SFToolbar isMinibar]
  -[_SFToolbar .cxx_destruct]
  -[_SFToolbar layoutSubviews]
  -[_SFToolbar sizeThatFits:]
  -[_SFToolbar backdropGroupName]
  -[_SFToolbar setTheme:]
  -[_SFToolbar _contentMargin]
  -[_SFToolbar initWithPlacement:hideBackground:]
  -[_SFToolbar dealloc]
  -[_SFToolbar initWithPlacement:]
  -[_SFToolbar setSuperviewOwningLayout:]
  -[_SFToolbar baselineOffsetAdjustment]
  -[_SFToolbar animateSafariIconLinkFromPoint:inView:]
  -[_SFToolbar animateLinkImage:fromRect:inView:toBarItem:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
  -[_SFToolbar popoverSourceInfoForBarItem:]
  -[_SFToolbar barRegistration]
  -[_SFToolbar didChangeArrangedBarItems:]
  -[_SFToolbar _cancelLinkAnimations]
  -[_SFToolbar _updateBackgroundViewEffects]
  -[_SFToolbar didCompleteBarRegistrationWithToken:]
  -[_SFToolbar setUsesLegacyDarkBackdrop:]
  -[_SFToolbar usesLegacyDarkBackdrop]
  -[_SFToolbar setBarRegistration:]
  -[_SFToolbar superviewOwningLayout]


_SFTranslationTargetLocaleAlertController : UIAlertController <_SFTranslationTargetLocaleAlertControllerDelegate>
 @property  NSMutableDictionary *localeIdentifierToAlertActionMap
 @property  <_SFTranslationTargetLocaleAlertControllerDelegate> *delegate
 @property  @? analyticsHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFTranslationTargetLocaleAlertController translationAlertControllerWithDelegate:localeIdentifiers:]

  // instance methods
  -[_SFTranslationTargetLocaleAlertController .cxx_destruct]
  -[_SFTranslationTargetLocaleAlertController setDelegate:]
  -[_SFTranslationTargetLocaleAlertController delegate]
  -[_SFTranslationTargetLocaleAlertController _translationAvailabilityDidChange:]
  -[_SFTranslationTargetLocaleAlertController analyticsHandler]
  -[_SFTranslationTargetLocaleAlertController _setUpWithLocaleIdentifiers:]
  -[_SFTranslationTargetLocaleAlertController translationAlertController:didSelectLocale:]
  -[_SFTranslationTargetLocaleAlertController translationAlertController:validateTargetLocale:completionHandler:]
  -[_SFTranslationTargetLocaleAlertController translationAvailabilityDidChange]
  -[_SFTranslationTargetLocaleAlertController initWithTranslationContext:]
  -[_SFTranslationTargetLocaleAlertController configurePopoverWithSourceInfo:]
  -[_SFTranslationTargetLocaleAlertController setAnalyticsHandler:]
  -[_SFTranslationTargetLocaleAlertController localeIdentifierToAlertActionMap]
  -[_SFTranslationTargetLocaleAlertController setLocaleIdentifierToAlertActionMap:]


_SFTranslationTargetLocaleAlertActionContentViewController : UIViewController
  // instance methods
  -[_SFTranslationTargetLocaleAlertActionContentViewController traitCollectionDidChange:]
  -[_SFTranslationTargetLocaleAlertActionContentViewController initWithLocaleIdentifier:]
  -[_SFTranslationTargetLocaleAlertActionContentViewController .cxx_destruct]
  -[_SFTranslationTargetLocaleAlertActionContentViewController viewDidLoad]
  -[_SFTranslationTargetLocaleAlertActionContentViewController loadView]
  -[_SFTranslationTargetLocaleAlertActionContentViewController _updateVerticalPadding]


_SFTranslationTargetLocaleAlertActionContentView : UIView
 @property  UILabel *titleLabel

  // instance methods
  -[_SFTranslationTargetLocaleAlertActionContentView titleLabel]
  -[_SFTranslationTargetLocaleAlertActionContentView .cxx_destruct]
  -[_SFTranslationTargetLocaleAlertActionContentView setTitleLabel:]
  -[_SFTranslationTargetLocaleAlertActionContentView tintColorDidChange]


_SFContactPreviewViewController : UINavigationController
  // instance methods
  -[_SFContactPreviewViewController .cxx_destruct]
  -[_SFContactPreviewViewController _done:]
  -[_SFContactPreviewViewController viewWillDisappear:]
  -[_SFContactPreviewViewController dealloc]
  -[_SFContactPreviewViewController _presentActivityViewController:]
  -[_SFContactPreviewViewController initWithFilePath:sourceURL:deleteFileWhenDone:beforeDismissHandler:]


_SFOpenURLOperationDelegate : NSObject <LSOpenResourceOperationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenURLOperationDelegate openResourceOperationDidComplete:]
  -[_SFOpenURLOperationDelegate openResourceOperation:didFailWithError:]
  -[_SFOpenURLOperationDelegate openResourceOperation:didFinishCopyingResource:]
  -[_SFOpenURLOperationDelegate .cxx_destruct]
  -[_SFOpenURLOperationDelegate initWithCompletionHandler:]
  -[_SFOpenURLOperationDelegate _didFinishWithSuccess:]


SFSecurityRecommendationsCellData : NSObject
 @property  NSString *subtitleText
 @property  unsigned long numberOfWarnings
 @property  long long warningStyle

  // instance methods
  -[SFSecurityRecommendationsCellData .cxx_destruct]
  -[SFSecurityRecommendationsCellData subtitleText]
  -[SFSecurityRecommendationsCellData isEqual:]
  -[SFSecurityRecommendationsCellData setSubtitleText:]
  -[SFSecurityRecommendationsCellData warningStyle]
  -[SFSecurityRecommendationsCellData setWarningStyle:]
  -[SFSecurityRecommendationsCellData numberOfWarnings]
  -[SFSecurityRecommendationsCellData setNumberOfWarnings:]
  -[SFSecurityRecommendationsCellData initWithSubtitleText:numberOfWarnings:warningStyle:]
  -[SFSecurityRecommendationsCellData initWithLoadingSubtitle]


SFPrivacyReportGridView : UIView <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, SFPrivacyReportGridItemDelegate>
 @property  NSArray *itemViews
 @property  <SFPrivacyReportGridViewDelegate> *delegate
 @property  double interItemSpacing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrivacyReportGridView layoutMarginsDidChange]
  -[SFPrivacyReportGridView collectionView:cellForItemAtIndexPath:]
  -[SFPrivacyReportGridView collectionView:numberOfItemsInSection:]
  -[SFPrivacyReportGridView invalidateIntrinsicContentSize]
  -[SFPrivacyReportGridView collectionView:layout:sizeForItemAtIndexPath:]
  -[SFPrivacyReportGridView traitCollectionDidChange:]
  -[SFPrivacyReportGridView .cxx_destruct]
  -[SFPrivacyReportGridView layoutSubviews]
  -[SFPrivacyReportGridView setDelegate:]
  -[SFPrivacyReportGridView init]
  -[SFPrivacyReportGridView initWithFrame:]
  -[SFPrivacyReportGridView delegate]
  -[SFPrivacyReportGridView interItemSpacing]
  -[SFPrivacyReportGridView intrinsicContentSize]
  -[SFPrivacyReportGridView updateInterItemSpacing]
  -[SFPrivacyReportGridView didUpdateInterItemSpacing:]
  -[SFPrivacyReportGridView itemViewIsLineBreak:]
  -[SFPrivacyReportGridView itemViewCanUseCompactWidth:]
  -[SFPrivacyReportGridView _gridPositionForItemAtIndexPath:]
  -[SFPrivacyReportGridView _rebuildRowLayoutInfoIfNeeded]
  -[SFPrivacyReportGridView itemDidChangeContentSize:]
  -[SFPrivacyReportGridView itemViews]
  -[SFPrivacyReportGridView setItemViews:]


SFPrivacyReportGridItemCell : UICollectionViewCell
 @property  UIView *reportView

  // instance methods
  -[SFPrivacyReportGridItemCell .cxx_destruct]
  -[SFPrivacyReportGridItemCell setReportView:]
  -[SFPrivacyReportGridItemCell reportView]


SFPrivacyReportGridRowLayoutInfo : NSObject
 @property  long long row
 @property  {_NSRange=QQ} itemRange
 @property  double height

  // instance methods
  -[SFPrivacyReportGridRowLayoutInfo setHeight:]
  -[SFPrivacyReportGridRowLayoutInfo height]
  -[SFPrivacyReportGridRowLayoutInfo row]
  -[SFPrivacyReportGridRowLayoutInfo initWithRow:itemRange:]
  -[SFPrivacyReportGridRowLayoutInfo itemRange]


SFPrivacyReportGridTableViewCell : UITableViewCell
 @property  SFPrivacyReportGridView *gridView

  // instance methods
  -[SFPrivacyReportGridTableViewCell gridView]
  -[SFPrivacyReportGridTableViewCell .cxx_destruct]
  -[SFPrivacyReportGridTableViewCell setGridView:]
  -[SFPrivacyReportGridTableViewCell initWithStyle:reuseIdentifier:]


_SFWebAppServiceViewController : SFBrowserServiceViewController <SFWebAppServiceViewControllerProtocol, _SFMediaRecordingDocument>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL canOverrideStatusBar
 @property  BOOL audioOnly
 @property  NSString *URLString

  // class methods
  +[_SFWebAppServiceViewController _remoteViewControllerInterface]
  +[_SFWebAppServiceViewController _exportedInterface]

  // instance methods
  -[_SFWebAppServiceViewController muteMediaCapture]
  -[_SFWebAppServiceViewController audioOnly]
  -[_SFWebAppServiceViewController processPool]
  -[_SFWebAppServiceViewController preferredStatusBarStyle]
  -[_SFWebAppServiceViewController setNeedsStatusBarAppearanceUpdate]
  -[_SFWebAppServiceViewController .cxx_destruct]
  -[_SFWebAppServiceViewController URLString]
  -[_SFWebAppServiceViewController setMediaStateIcon:]
  -[_SFWebAppServiceViewController viewDidLoad]
  -[_SFWebAppServiceViewController websiteDataStore]
  -[_SFWebAppServiceViewController canOverrideStatusBar]
  -[_SFWebAppServiceViewController statusBarIndicatorTappedWithCompletionHandler:]
  -[_SFWebAppServiceViewController _persona]
  -[_SFWebAppServiceViewController dealloc]
  -[_SFWebAppServiceViewController canPrint]
  -[_SFWebAppServiceViewController webViewConfiguration]
  -[_SFWebAppServiceViewController _hostApplicationDidEnterBackground]
  -[_SFWebAppServiceViewController navigationBarDoneButtonWasTapped:]
  -[_SFWebAppServiceViewController loadWebAppWithIdentifier:]
  -[_SFWebAppServiceViewController webAppDidBecomeActive]
  -[_SFWebAppServiceViewController webAppWillResignActive]
  -[_SFWebAppServiceViewController _updateThemeColor]
  -[_SFWebAppServiceViewController webViewControllerDidChangeLoadingState:]
  -[_SFWebAppServiceViewController webViewControllerDidFirstVisuallyNonEmptyLayout:]
  -[_SFWebAppServiceViewController webViewController:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFWebAppServiceViewController _isURLOutOfManifestScope:]
  -[_SFWebAppServiceViewController _isURLOutOfLegacyScope:withLoginURLExempted:]
  -[_SFWebAppServiceViewController webViewController:didFailProvisionalNavigation:withError:]
  -[_SFWebAppServiceViewController _loadNextFallbackURL]
  -[_SFWebAppServiceViewController webViewController:didFinishNavigation:]
  -[_SFWebAppServiceViewController _fetchApplicationManifestIfNeeded]
  -[_SFWebAppServiceViewController _updateDisplayMode]
  -[_SFWebAppServiceViewController webViewControllerDidChangeURL:]
  -[_SFWebAppServiceViewController _isURLOutOfScope:withLoginURLExempted:]
  -[_SFWebAppServiceViewController _canonicalPageURL]
  -[_SFWebAppServiceViewController websiteDataStoreConfigurationWithWebClipIdentifier:]
  -[_SFWebAppServiceViewController _setCurrentWebViewController:]
  -[_SFWebAppServiceViewController _initialLoadFinishedWithSuccess:]
  -[_SFWebAppServiceViewController _clientIsWebApp]
  -[_SFWebAppServiceViewController _loadWebClipPageURL:]
  -[_SFWebAppServiceViewController _handleHostStateUpdate:]
  -[_SFWebAppServiceViewController webViewControllerDidUpdateThemeColor:]
  -[_SFWebAppServiceViewController _usesScrollToTopView]


_SFAutoFillInputViewButton : UIButton
  // instance methods
  -[_SFAutoFillInputViewButton layoutSubviews]


_SFAutoFillInputView : UIInputView
 @property  <_SFAutoFillInputViewDelegate> *delegate

  // instance methods
  -[_SFAutoFillInputView traitCollectionDidChange:]
  -[_SFAutoFillInputView updateConstraints]
  -[_SFAutoFillInputView .cxx_destruct]
  -[_SFAutoFillInputView setDelegate:]
  -[_SFAutoFillInputView delegate]
  -[_SFAutoFillInputView initWithHostString:credentialSource:suggestion:]
  -[_SFAutoFillInputView _updateDynamicConstraints]
  -[_SFAutoFillInputView _updateFillCredentialButtonLabelMetrics]
  -[_SFAutoFillInputView _fillCredential:]
  -[_SFAutoFillInputView _showStandardKeyboard:]
  -[_SFAutoFillInputView _showMorePasswords:]


SFPrivacyReportWebsiteDetailViewController : UITableViewController
  // instance methods
  -[SFPrivacyReportWebsiteDetailViewController tableView:numberOfRowsInSection:]
  -[SFPrivacyReportWebsiteDetailViewController tableView:titleForHeaderInSection:]
  -[SFPrivacyReportWebsiteDetailViewController .cxx_destruct]
  -[SFPrivacyReportWebsiteDetailViewController viewDidLoad]
  -[SFPrivacyReportWebsiteDetailViewController tableView:cellForRowAtIndexPath:]
  -[SFPrivacyReportWebsiteDetailViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SFPrivacyReportWebsiteDetailViewController initWithWebsite:]


_SFFindOnPageView : UIView <_SFFindOnPageToolbarDelegate, _WKFindDelegate, UIKeyInput>
 @property  NSString *findString
 @property  unsigned long numberOfFindMatches
 @property  long long highlightedMatchIndex
 @property  WKWebView *webView
 @property  <_SFFindOnPageViewDelegate> *delegate
 @property  BOOL usesNarrowLayout
 @property  BOOL shouldFocusTextField
 @property  BOOL isShowing
 @property  BOOL isFocused
 @property  BOOL shouldDisplayFindNextPreviousInDiscoverabilityHUD
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL hasText
 @property  long long autocapitalizationType
 @property  long long autocorrectionType
 @property  long long spellCheckingType
 @property  long long smartQuotesType
 @property  long long smartDashesType
 @property  long long smartInsertDeleteType
 @property  long long keyboardType
 @property  long long keyboardAppearance
 @property  long long returnKeyType
 @property  BOOL enablesReturnKeyAutomatically
 @property  BOOL secureTextEntry
 @property  NSString *textContentType
 @property  UITextInputPasswordRules *passwordRules

  // class methods
  +[_SFFindOnPageView _undefinedNumberOfMatches]
  +[_SFFindOnPageView _undefinedMatchIndex]
  +[_SFFindOnPageView _maximumNumberOfMatches]

  // instance methods
  -[_SFFindOnPageView done]
  -[_SFFindOnPageView previousFindResultKeyPressed]
  -[_SFFindOnPageView isFocused]
  -[_SFFindOnPageView usesNarrowLayout]
  -[_SFFindOnPageView webView]
  -[_SFFindOnPageView previous]
  -[_SFFindOnPageView next]
  -[_SFFindOnPageView _requiresKeyboardWhenFirstResponder]
  -[_SFFindOnPageView inputAccessoryView]
  -[_SFFindOnPageView didMoveToSuperview]
  -[_SFFindOnPageView isShowing]
  -[_SFFindOnPageView .cxx_destruct]
  -[_SFFindOnPageView canBecomeFirstResponder]
  -[_SFFindOnPageView highlightedMatchIndex]
  -[_SFFindOnPageView toolbar]
  -[_SFFindOnPageView _webView:didCountMatches:forString:]
  -[_SFFindOnPageView _webView:didFailToFindString:]
  -[_SFFindOnPageView _webView:didFindMatches:forString:withMatchIndex:]
  -[_SFFindOnPageView keyCommands]
  -[_SFFindOnPageView updateUI]
  -[_SFFindOnPageView cancelKeyPressed]
  -[_SFFindOnPageView canPerformAction:withSender:]
  -[_SFFindOnPageView initWithDelegate:]
  -[_SFFindOnPageView deleteBackward]
  -[_SFFindOnPageView delegate]
  -[_SFFindOnPageView setUsesNarrowLayout:]
  -[_SFFindOnPageView nextFindResultKeyPressed]
  -[_SFFindOnPageView insertText:]
  -[_SFFindOnPageView setWebView:]
  -[_SFFindOnPageView hasText]
  -[_SFFindOnPageView _wantsPriorityOverFocusUpdates]
  -[_SFFindOnPageView findTextField]
  -[_SFFindOnPageView _setFindingInWebViewIfNeeded]
  -[_SFFindOnPageView _selectAllIfNeeded]
  -[_SFFindOnPageView prepareFindOnPageWithString:]
  -[_SFFindOnPageView hideFindOnPage]
  -[_SFFindOnPageView prepareFindOnPage]
  -[_SFFindOnPageView _findOptions]
  -[_SFFindOnPageView dismissFindOnPage]
  -[_SFFindOnPageView textForToolbarLabel]
  -[_SFFindOnPageView updateSearchText:]
  -[_SFFindOnPageView hasMatches]
  -[_SFFindOnPageView matchLabelText]
  -[_SFFindOnPageView showFindOnPage]
  -[_SFFindOnPageView selectFindOnPageText]
  -[_SFFindOnPageView takeFindStringFromSelection]
  -[_SFFindOnPageView shouldDisplayFindNextPreviousInDiscoverabilityHUD]
  -[_SFFindOnPageView shouldFocusTextField]
  -[_SFFindOnPageView setShouldFocusTextField:]
  -[_SFFindOnPageView findString]
  -[_SFFindOnPageView setFindString:]
  -[_SFFindOnPageView numberOfFindMatches]
  -[_SFFindOnPageView setNumberOfFindMatches:]
  -[_SFFindOnPageView setHighlightedMatchIndex:]


_SFLinkPreviewHelper : NSObject <_SFAdaptivePreviewViewControllerDelegate>
 @property  _WKActivatedElementInfo *elementInfo
 @property  NSURL *url
 @property  WKWebView *webView
 @property  UIViewController *previewContentViewController
 @property  _SFLinkPreviewHeader *activeLinkPreviewHeader
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFLinkPreviewHelper initialize]
  +[_SFLinkPreviewHelper commitPreviewViewController:]
  +[_SFLinkPreviewHelper openInNewTabAnalyticsHandler]
  +[_SFLinkPreviewHelper setOpenInNewTabAnalyticsHandler:]
  +[_SFLinkPreviewHelper contextMenuConfigurationForWebView:elementInfo:handler:]
  +[_SFLinkPreviewHelper contextMenuContentPreviewForWebView:elementInfo:handler:]
  +[_SFLinkPreviewHelper linkPreviewHelperForWebView:]
  +[_SFLinkPreviewHelper invalidateLinkPreviewHelperForWebView:]
  +[_SFLinkPreviewHelper previewViewControllerWebView:url:handler:]

  // instance methods
  -[_SFLinkPreviewHelper webView]
  -[_SFLinkPreviewHelper url]
  -[_SFLinkPreviewHelper previewViewController]
  -[_SFLinkPreviewHelper .cxx_destruct]
  -[_SFLinkPreviewHelper dealloc]
  -[_SFLinkPreviewHelper invalidate]
  -[_SFLinkPreviewHelper previewViewControllerForURL:]
  -[_SFLinkPreviewHelper adaptivePreviewViewController:requestLinkPreviewViewControllerWithURL:]
  -[_SFLinkPreviewHelper headerViewHeightForAdaptivePreviewViewController:]
  -[_SFLinkPreviewHelper adaptivePreviewViewControllerWillDisableLinkPreview:]
  -[_SFLinkPreviewHelper initWithWebView:elementInfo:orURL:handler:]
  -[_SFLinkPreviewHelper makeContextMenuConfiguration]
  -[_SFLinkPreviewHelper commitPreviewViewController]
  -[_SFLinkPreviewHelper _previewViewControllerIsLinkPreview]
  -[_SFLinkPreviewHelper invalidateElementInfo]
  -[_SFLinkPreviewHelper menuWithSuggestedActions:]
  -[_SFLinkPreviewHelper makePreviewViewController]
  -[_SFLinkPreviewHelper menuElementsForSuggestedActions:]
  -[_SFLinkPreviewHelper activeLinkPreviewHeader]
  -[_SFLinkPreviewHelper openActionForSettingUpOneTimeCodeGeneratorWithExternalNavigationResult:]
  -[_SFLinkPreviewHelper openActionForRedirectToExternalNavigationResult:]
  -[_SFLinkPreviewHelper openActionForAlternateURL:]
  -[_SFLinkPreviewHelper openInNewTabActionForURL:preActionHandler:]
  -[_SFLinkPreviewHelper openInTabGroupActionForURL:shouldPerformActionHandler:]
  -[_SFLinkPreviewHelper openInNewWindowActionForURL:]
  -[_SFLinkPreviewHelper downloadActionForURL:]
  -[_SFLinkPreviewHelper openURL:forAction:withTabOrder:]
  -[_SFLinkPreviewHelper addToReadingListActionForURL:]
  -[_SFLinkPreviewHelper previewContentViewController]
  -[_SFLinkPreviewHelper elementInfo]
  -[_SFLinkPreviewHelper setActiveLinkPreviewHeader:]


SFSwitchTableViewCell : UITableViewCell
 @property  <SFSwitchTableViewCellDelegate> *delegate
 @property  BOOL switchOn

  // instance methods
  -[SFSwitchTableViewCell .cxx_destruct]
  -[SFSwitchTableViewCell setDelegate:]
  -[SFSwitchTableViewCell delegate]
  -[SFSwitchTableViewCell initWithReuseIdentifier:]
  -[SFSwitchTableViewCell _switchViewStateDidChange:]
  -[SFSwitchTableViewCell setSwitchOn:]
  -[SFSwitchTableViewCell isSwitchOn]


SFPrivacyReportExplanationTableViewCell : UITableViewCell <UITextViewDelegate>
 @property  BOOL expanded
 @property  <SFPrivacyReportExplanationTableViewCellDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrivacyReportExplanationTableViewCell isExpanded]
  -[SFPrivacyReportExplanationTableViewCell .cxx_destruct]
  -[SFPrivacyReportExplanationTableViewCell setDelegate:]
  -[SFPrivacyReportExplanationTableViewCell textView:shouldInteractWithURL:inRange:interaction:]
  -[SFPrivacyReportExplanationTableViewCell delegate]
  -[SFPrivacyReportExplanationTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportExplanationTableViewCell setExpanded:]
  -[SFPrivacyReportExplanationTableViewCell _separatorFrame]
  -[SFPrivacyReportExplanationTableViewCell privacyProxyStateChanged:]
  -[SFPrivacyReportExplanationTableViewCell _toggleExpanded:]


SFPrivacyReportIconView : UIView
 @property  CAGradientLayer *gradientLayer

  // class methods
  +[SFPrivacyReportIconView layerClass]

  // instance methods
  -[SFPrivacyReportIconView traitCollectionDidChange:]
  -[SFPrivacyReportIconView .cxx_destruct]
  -[SFPrivacyReportIconView _updateColors]
  -[SFPrivacyReportIconView initWithFrame:]
  -[SFPrivacyReportIconView _dynamicUserInterfaceTraitDidChange]
  -[SFPrivacyReportIconView gradientLayer]
  -[SFPrivacyReportIconView intrinsicContentSize]
  -[SFPrivacyReportIconView _updateSymbolConfiguration]


_SFManagedFeatureObserver : NSObject <MCProfileConnectionObserver>
 @property  BOOL authenticationRequiredToAutoFill
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFManagedFeatureObserver sharedObserver]

  // instance methods
  -[_SFManagedFeatureObserver .cxx_destruct]
  -[_SFManagedFeatureObserver init]
  -[_SFManagedFeatureObserver profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[_SFManagedFeatureObserver authenticationRequiredToAutoFill]
  -[_SFManagedFeatureObserver dealloc]
  -[_SFManagedFeatureObserver _isUserEnrolledInBiometricAuthentication]


SFBrowserServiceViewController : _SFBrowserContentViewController <_SFActivityDelegate, _SFLinkPreviewHeaderDelegate, SFServiceViewControllerProtocol>
 @property  SFSystemAlert *webAuthenticationDataSharingConfirmation
 @property  NSString *hostApplicationCallbackURLScheme
 @property  BOOL _isUsedForAuthentication
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBrowserServiceViewController _remoteViewControllerInterface]
  +[SFBrowserServiceViewController _exportedInterface]

  // instance methods
  -[SFBrowserServiceViewController loadURL:]
  -[SFBrowserServiceViewController processPool]
  -[SFBrowserServiceViewController .cxx_destruct]
  -[SFBrowserServiceViewController _dismiss]
  -[SFBrowserServiceViewController viewDidAppear:]
  -[SFBrowserServiceViewController initWithNibName:bundle:]
  -[SFBrowserServiceViewController viewWillDisappear:]
  -[SFBrowserServiceViewController setDisplayMode:]
  -[SFBrowserServiceViewController _persona]
  -[SFBrowserServiceViewController dealloc]
  -[SFBrowserServiceViewController viewDidDisappear:]
  -[SFBrowserServiceViewController prepareForDisplayWithCompletionHandler:]
  -[SFBrowserServiceViewController _willAppearInRemoteViewController]
  -[SFBrowserServiceViewController _hostApplicationDidEnterBackground]
  -[SFBrowserServiceViewController _hostApplicationWillEnterForeground]
  -[SFBrowserServiceViewController setDismissButtonStyle:]
  -[SFBrowserServiceViewController browserViewDidReceiveTouchEvent:]
  -[SFBrowserServiceViewController linkPreviewHeader:didEnableLinkPreview:]
  -[SFBrowserServiceViewController startResolveRedirectionForURL:]
  -[SFBrowserServiceViewController decideCookieSharingForURL:callbackURLScheme:]
  -[SFBrowserServiceViewController setPreferredBarTintColor:controlTintColor:]
  -[SFBrowserServiceViewController repostNotificationInViewService:]
  -[SFBrowserServiceViewController didFetchCustomActivities:excludedActivityTypes:]
  -[SFBrowserServiceViewController setIsRunningTransitionAnimation:]
  -[SFBrowserServiceViewController didDetectRemoteViewControllerViewIsHidden]
  -[SFBrowserServiceViewController didDetectUserInteractionFromHostApp]
  -[SFBrowserServiceViewController openCurrentURLInSafariFromPreviewAction]
  -[SFBrowserServiceViewController updateScrollViewIndicatorVerticalInsets:horizontalInsets:]
  -[SFBrowserServiceViewController didRequestShowLinkPreviews:]
  -[SFBrowserServiceViewController requestPrewarmingWithTokens:]
  -[SFBrowserServiceViewController invalidatePrewarmingTokenWithID:]
  -[SFBrowserServiceViewController addClickAttribution:]
  -[SFBrowserServiceViewController closeDatabasesOnBackgroundingOrDismissal]
  -[SFBrowserServiceViewController _analyticsHelper]
  -[SFBrowserServiceViewController _updateRemoteSwipeGestureState]
  -[SFBrowserServiceViewController processPoolConfiguration]
  -[SFBrowserServiceViewController _shouldAcceptMessage:]
  -[SFBrowserServiceViewController _trustedReportEndpoint]
  -[SFBrowserServiceViewController set_isUsedForAuthentication:]
  -[SFBrowserServiceViewController setHostApplicationCallbackURLScheme:]
  -[SFBrowserServiceViewController setWebAuthenticationDataSharingConfirmation:]
  -[SFBrowserServiceViewController _prewarmConnectionsToURLs:]
  -[SFBrowserServiceViewController _openCurrentURLInSafari]
  -[SFBrowserServiceViewController _webDataStoreRootURL]
  -[SFBrowserServiceViewController _websiteDataStoreURL]
  -[SFBrowserServiceViewController _ensureWebsiteDataStoreURL:cookieStoreURL:]
  -[SFBrowserServiceViewController _isUsedForAuthentication]
  -[SFBrowserServiceViewController _redirectToHostAppWithExpectedCallbackSchemeIfPossible:]
  -[SFBrowserServiceViewController _applicationPayloadForOpeningInSafari]
  -[SFBrowserServiceViewController webViewController:didReceiveServerRedirectForProvisionalNavigation:]
  -[SFBrowserServiceViewController webViewControllerDidCancelClientRedirect:]
  -[SFBrowserServiceViewController webViewController:willPerformClientRedirectToURL:withDelay:]
  -[SFBrowserServiceViewController webViewController:didStartProvisionalNavigation:]
  -[SFBrowserServiceViewController webViewController:didFinishDocumentLoadForNavigation:]
  -[SFBrowserServiceViewController webViewController:didChangeFullScreen:]
  -[SFBrowserServiceViewController webViewControllerWebProcessDidCrash:]
  -[SFBrowserServiceViewController _updateMaxVisibleHeightPercentageUserDriven:]
  -[SFBrowserServiceViewController safariActivity:didFinish:]
  -[SFBrowserServiceViewController _didResolveDestinationURL:pendingAppLinkCheck:]
  -[SFBrowserServiceViewController websiteDataStoreConfiguration]
  -[SFBrowserServiceViewController _getSafariDataSharingModeWithCompletion:]
  -[SFBrowserServiceViewController _fetchActivityViewControllerInfoForURL:title:completion:]
  -[SFBrowserServiceViewController _notifyInitialLoadDidFinish:]
  -[SFBrowserServiceViewController _redirectToHostAppWithNavigationResult:options:]
  -[SFBrowserServiceViewController _didLoadWebView]
  -[SFBrowserServiceViewController bundleIdentifierForProfileInstallation]
  -[SFBrowserServiceViewController _hostAppBundleId]
  -[SFBrowserServiceViewController _shouldReloadImmediatelyAfterPageLoadError]
  -[SFBrowserServiceViewController webAuthenticationDataSharingConfirmation]
  -[SFBrowserServiceViewController hostApplicationCallbackURLScheme]


_SFPerSitePreferenceDisplayInformation : NSObject
 @property  NSString *localizedSiteSpecificSettingsTitle
 @property  NSString *localizedAllWebsiteSettingsTitle
 @property  NSString *localizedClearAllSettingsPrompt
 @property  unsigned long displayOption

  // class methods
  +[_SFPerSitePreferenceDisplayInformation _buildMapIfNeeded]
  +[_SFPerSitePreferenceDisplayInformation displayInformationForPerSitePreference:]

  // instance methods
  -[_SFPerSitePreferenceDisplayInformation .cxx_destruct]
  -[_SFPerSitePreferenceDisplayInformation _initWithLocalizedSiteSpecificSettingsTitle:localizedAllWebsiteSettingsTitle:localizedClearAllSettingsPrompt:displayOption:]
  -[_SFPerSitePreferenceDisplayInformation localizedSiteSpecificSettingsTitle]
  -[_SFPerSitePreferenceDisplayInformation localizedAllWebsiteSettingsTitle]
  -[_SFPerSitePreferenceDisplayInformation localizedClearAllSettingsPrompt]
  -[_SFPerSitePreferenceDisplayInformation displayOption]


SFPasswordPickerServiceViewController : SFPasswordServiceViewController <SFCredentialProviderExtensionManagerObserver, _ASCredentialListViewControllerDelegate, _ASPasswordCredentialAuthenticationViewControllerDelegate, UIPresentationControllerDelegatePrivate, _SFAuthenticationClient, _SFAuthenticationContextDelegate, SFPasswordPickerServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordPickerServiceViewController _remoteViewControllerInterface]
  +[SFPasswordPickerServiceViewController _exportedInterface]

  // instance methods
  -[SFPasswordPickerServiceViewController presentationControllerDidDismiss:]
  -[SFPasswordPickerServiceViewController authenticationMessageForContext:]
  -[SFPasswordPickerServiceViewController .cxx_destruct]
  -[SFPasswordPickerServiceViewController _dismiss]
  -[SFPasswordPickerServiceViewController viewDidAppear:]
  -[SFPasswordPickerServiceViewController initWithNibName:bundle:]
  -[SFPasswordPickerServiceViewController passcodePromptForContext:]
  -[SFPasswordPickerServiceViewController credentialProviderExtensionManagerExtensionListDidChange:]
  -[SFPasswordPickerServiceViewController _context]
  -[SFPasswordPickerServiceViewController displayMessageAsTitleForContext:]
  -[SFPasswordPickerServiceViewController setWebViewURL:]
  -[SFPasswordPickerServiceViewController viewWillDisappear:]
  -[SFPasswordPickerServiceViewController setRemoteAppID:]
  -[SFPasswordPickerServiceViewController setRemoteLocalizedAppName:]
  -[SFPasswordPickerServiceViewController setRemoteUnlocalizedAppName:]
  -[SFPasswordPickerServiceViewController setExternallyVerifiedAndApprovedSharedWebCredentialsDomains:]
  -[SFPasswordPickerServiceViewController authenticateToPresentInPopover:completion:]
  -[SFPasswordPickerServiceViewController authenticationCustomUIProgressObserverForContext:]
  -[SFPasswordPickerServiceViewController setAuthenticationGracePeriod:]
  -[SFPasswordPickerServiceViewController _presentCredentialListForExtension:]
  -[SFPasswordPickerServiceViewController _authenticateAndSetPresentCredentialsHandlerWithCompletion:]
  -[SFPasswordPickerServiceViewController _sendCredentialToClientAndDismiss:]
  -[SFPasswordPickerServiceViewController _authenticateToViewOtherPasswordsWithCompletion:]
  -[SFPasswordPickerServiceViewController _fillCredential:needsAuthentication:]
  -[SFPasswordPickerServiceViewController _actionForPresentingPasswordManagerExtension:]
  -[SFPasswordPickerServiceViewController credentialListViewController:didFinishWithCredential:completion:]
  -[SFPasswordPickerServiceViewController presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFPasswordPickerServiceViewController passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFPasswordPickerServiceViewController contextRequiresSessionBasedAuthentication:]
  -[SFPasswordPickerServiceViewController contextShouldAllowPasscodeFallback:]
  -[SFPasswordPickerServiceViewController contextShouldAllowMultipleBiometricFailures:]


_SFAccountIconController : NSObject
 @property  <_SFAccountIconControllerDelegate> *delegate

  // class methods
  +[_SFAccountIconController tableViewIconSize]
  +[_SFAccountIconController _preferredIconSize]

  // instance methods
  -[_SFAccountIconController .cxx_destruct]
  -[_SFAccountIconController setDelegate:]
  -[_SFAccountIconController delegate]
  -[_SFAccountIconController initWithMetadataManager:]
  -[_SFAccountIconController clearIconFetchingState]
  -[_SFAccountIconController iconForDomain:]
  -[_SFAccountIconController backgroundColorForDomain:]
  -[_SFAccountIconController cachedIconForDomain:resizedToSize:]
  -[_SFAccountIconController _fetchTouchIconForDomain:]
  -[_SFAccountIconController _requestTouchIconForDomain:iconDownloadingEnabled:]
  -[_SFAccountIconController _checkForLocalVisitToDomain:withCompletion:]
  -[_SFAccountIconController _populateDomainToItemsWithCompletion:]
  -[_SFAccountIconController _fetchAppIconForDomain:]
  -[_SFAccountIconController _iconDidUpdateForDomain:]
  -[_SFAccountIconController _populateDomainToAppIDWithCompletion:]


_SFReaderFontOptionsGroupController : NSObject <_SFSettingsAlertOptionsGroupController>
 @property  <SFReaderContext> *readerContext
 @property  NSArray *values
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReaderFontOptionsGroupController readerContext]
  -[_SFReaderFontOptionsGroupController values]
  -[_SFReaderFontOptionsGroupController .cxx_destruct]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidFinish:]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidBegin:]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidFail:]
  -[_SFReaderFontOptionsGroupController _fontDownloadProgressDidChange:]
  -[_SFReaderFontOptionsGroupController _fontIsImmediatelyAvailable:]
  -[_SFReaderFontOptionsGroupController _attributedStringForReaderFont:]
  -[_SFReaderFontOptionsGroupController _fontForFontNotification:]
  -[_SFReaderFontOptionsGroupController _itemForNotification:]
  -[_SFReaderFontOptionsGroupController _downloadAccessoryForNotification:]
  -[_SFReaderFontOptionsGroupController prepareItem:forValue:]
  -[_SFReaderFontOptionsGroupController setSelectedValue:]
  -[_SFReaderFontOptionsGroupController attributedStringForValue:]
  -[_SFReaderFontOptionsGroupController textStyleForValue:]
  -[_SFReaderFontOptionsGroupController isSelectedValue:]
  -[_SFReaderFontOptionsGroupController initWithReaderContext:]


_SFReaderFontDownloadAccessory : UIView
 @property  UIButton *downloadButton
 @property  UIProgressView *progressView
 @property  BOOL downloading
 @property  @? tappedDownloadBlock

  // instance methods
  -[_SFReaderFontDownloadAccessory setDownloading:]
  -[_SFReaderFontDownloadAccessory viewForLastBaselineLayout]
  -[_SFReaderFontDownloadAccessory progressView]
  -[_SFReaderFontDownloadAccessory .cxx_destruct]
  -[_SFReaderFontDownloadAccessory isDownloading]
  -[_SFReaderFontDownloadAccessory initWithTappedDownloadBlock:]
  -[_SFReaderFontDownloadAccessory _tappedDownloadButton:]
  -[_SFReaderFontDownloadAccessory downloadButton]
  -[_SFReaderFontDownloadAccessory tappedDownloadBlock]
  -[_SFReaderFontDownloadAccessory setTappedDownloadBlock:]


_SFAutomationController : NSObject
 @property  BOOL allowsRemoteAutomation

  // class methods
  +[_SFAutomationController isSystemRemoteAutomationEnabled]

  // instance methods
  -[_SFAutomationController allowsRemoteAutomation]
  -[_SFAutomationController setAllowsRemoteAutomation:]


_SFQuickLookDocumentController : NSObject <_SFQuickLookDocumentViewDelegate>
 @property  UIView *documentView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFQuickLookDocumentController .cxx_destruct]
  -[_SFQuickLookDocumentController init]
  -[_SFQuickLookDocumentController documentView]
  -[_SFQuickLookDocumentController _updateActionButtons]
  -[_SFQuickLookDocumentController _supportedApplications]
  -[_SFQuickLookDocumentController _actionTitleForType:withActionCount:]
  -[_SFQuickLookDocumentController dataOwnerForQuickLookDocumentView:]
  -[_SFQuickLookDocumentController quickLookDocumentView:didSelectActionAtIndex:]
  -[_SFQuickLookDocumentController itemProviderForQuickLookDocumentView:]
  -[_SFQuickLookDocumentController updateWithQuickLookDocument:]
  -[_SFQuickLookDocumentController presentDocumentInteractionControllerFromSource:]


SFWebViewController : UIViewController <SFFormAutoFillControllerDelegate, WKNavigationDelegatePrivate, WKUIDelegatePrivate, SFDialogControllerDelegate, SFDialogViewControllerPresenting, _SFWebViewDelegate, _WKInputDelegate, _WKWebAuthenticationPanelDelegate, SFDialogPresenting>
 @property  WKWebView *webView
 @property  <SFWebViewControllerDelegate> *delegate
 @property  BOOL loading
 @property  BOOL didFirstVisuallyNonEmptyLayout
 @property  WKWebViewConfiguration *webViewConfiguration
 @property  SFDialogController *dialogController
 @property  _SFAuthenticationContext *autoFillAuthenticationContext
 @property  BOOL didFirstPaint
 @property  BOOL hasFocusedInputFieldOnCurrentPage
 @property  BOOL hasFormControlInteraction
 @property  NSUUID *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFWebViewController webView:didFinishNavigation:]
  -[SFWebViewController webView:didFailProvisionalNavigation:withError:]
  -[SFWebViewController sfWebViewDidChangeSafeAreaInsets:]
  -[SFWebViewController _webView:contextMenuForElement:willCommitWithAnimator:]
  -[SFWebViewController webView]
  -[SFWebViewController performPageLevelAutoFill]
  -[SFWebViewController presentViewController:animated:completion:]
  -[SFWebViewController UUID]
  -[SFWebViewController setLoading:]
  -[SFWebViewController webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:]
  -[SFWebViewController panel:dismissWebAuthenticationPanelWithResult:]
  -[SFWebViewController permissionDialogThrottler]
  -[SFWebViewController _webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:]
  -[SFWebViewController sfWebViewDidBecomeFirstResponder:]
  -[SFWebViewController webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:]
  -[SFWebViewController _webView:didNegotiateModernTLSForURL:]
  -[SFWebViewController _webView:willGoToBackForwardListItem:inPageCache:]
  -[SFWebViewController webView:didStartProvisionalNavigation:]
  -[SFWebViewController isLoading]
  -[SFWebViewController webView:didCommitNavigation:]
  -[SFWebViewController .cxx_destruct]
  -[SFWebViewController _webView:fileUploadPanelContentIsManagedWithInitiatingFrame:]
  -[SFWebViewController dialogController:dismissViewController:withAdditionalAnimations:]
  -[SFWebViewController webView:didReceiveServerRedirectForProvisionalNavigation:]
  -[SFWebViewController dialogController:presentViewController:withAdditionalAnimations:]
  -[SFWebViewController _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:]
  -[SFWebViewController formAutoFillControllerShouldDisableStreamlinedLogin:]
  -[SFWebViewController setDelegate:]
  -[SFWebViewController _webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:]
  -[SFWebViewController _webView:renderingProgressDidChange:]
  -[SFWebViewController _webView:willSubmitFormValues:userObject:submissionHandler:]
  -[SFWebViewController formAutoFillControllerDidFocusSensitiveFormField:]
  -[SFWebViewController _webView:decidePolicyForFocusedElement:]
  -[SFWebViewController panel:updateWebAuthenticationPanel:]
  -[SFWebViewController formAutoFillControllerDidUserDeclineAutomaticStrongPasswordForCurrentDomain:]
  -[SFWebViewController _webView:navigationDidFinishDocumentLoad:]
  -[SFWebViewController _webViewDidExitFullscreen:]
  -[SFWebViewController _webView:didStartInputSession:]
  -[SFWebViewController _webView:shouldIncludeAppLinkActionsForElement:]
  -[SFWebViewController _automaticPasswordInputViewNotification:]
  -[SFWebViewController panel:requestPINWithRemainingRetries:completionHandler:]
  -[SFWebViewController _webView:navigation:didSameDocumentNavigation:]
  -[SFWebViewController dialogController:presentationPolicyForDialog:]
  -[SFWebViewController webView:didReceiveAuthenticationChallenge:completionHandler:]
  -[SFWebViewController formAutoFillControllerURLForFormAutoFill:]
  -[SFWebViewController webView:didFailNavigation:withError:]
  -[SFWebViewController _webViewWillEndNavigationGesture:withNavigationToBackForwardListItem:]
  -[SFWebViewController _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]
  -[SFWebViewController _webView:willPerformClientRedirectToURL:delay:]
  -[SFWebViewController _webViewDidCancelClientRedirect:]
  -[SFWebViewController _webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:]
  -[SFWebViewController formAutoFillControllerGetAuthenticationForAutoFill:completion:]
  -[SFWebViewController _webView:dataOwnerForDropSession:]
  -[SFWebViewController _webView:insertTextSuggestion:inInputSession:]
  -[SFWebViewController _webViewAdditionalContextForStrongPasswordAssistance:]
  -[SFWebViewController dialogController:willPresentDialog:]
  -[SFWebViewController _webViewDidShowSafeBrowsingWarning:]
  -[SFWebViewController _webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:]
  -[SFWebViewController formAutoFillControllerShouldShowIconsInPasswordPicker:]
  -[SFWebViewController panel:selectAssertionResponse:source:completionHandler:]
  -[SFWebViewController sfWebViewDidEndFormControlInteraction:]
  -[SFWebViewController _webView:focusRequiresStrongPasswordAssistance:]
  -[SFWebViewController _webView:accessoryViewCustomButtonTappedInFormInputSession:]
  -[SFWebViewController formAutoFillControllerUserChoseToUseGeneratedPassword:]
  -[SFWebViewController delegate]
  -[SFWebViewController _webView:authenticationChallenge:shouldAllowLegacyTLS:]
  -[SFWebViewController _webView:contextMenuDidEndForElement:]
  -[SFWebViewController _presentingViewControllerForWebView:]
  -[SFWebViewController sfWebViewDidStartFormControlInteraction:]
  -[SFWebViewController _webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:]
  -[SFWebViewController didFirstVisuallyNonEmptyLayout]
  -[SFWebViewController _webView:didFinishLoadForQuickLookDocumentInMainFrame:]
  -[SFWebViewController _webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:]
  -[SFWebViewController _webViewWebProcessDidCrash:]
  -[SFWebViewController _webView:willStartInputSession:]
  -[SFWebViewController webView:decidePolicyForNavigationAction:preferences:decisionHandler:]
  -[SFWebViewController _webView:contextMenuConfigurationForElement:completionHandler:]
  -[SFWebViewController _webView:didChangeSafeAreaShouldAffectObscuredInsets:]
  -[SFWebViewController _webView:contextMenuWillPresentForElement:]
  -[SFWebViewController _webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:]
  -[SFWebViewController dealloc]
  -[SFWebViewController _webView:contextMenuContentPreviewForElement:]
  -[SFWebViewController invalidate]
  -[SFWebViewController webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:]
  -[SFWebViewController presentDialog:sender:]
  -[SFWebViewController _webView:mediaCaptureStateDidChange:]
  -[SFWebViewController dialogController]
  -[SFWebViewController loadView]
  -[SFWebViewController formAutoFillControllerCanPrefillForm:]
  -[SFWebViewController hasFormControlInteraction]
  -[SFWebViewController _webView:printFrame:]
  -[SFWebViewController observeValueForKeyPath:ofObject:change:context:]
  -[SFWebViewController _webViewDidEnterFullscreen:]
  -[SFWebViewController sfWebView:didStartDownload:]
  -[SFWebViewController webView:decidePolicyForNavigationResponse:decisionHandler:]
  -[SFWebViewController webViewDidClose:]
  -[SFWebViewController _webView:requestGeolocationAuthorizationForURL:frame:decisionHandler:]
  -[SFWebViewController webViewConfiguration]
  -[SFWebViewController _webView:dataOwnerForDragSession:]
  -[SFWebViewController setUUID:]
  -[SFWebViewController panel:decidePolicyForLocalAuthenticatorWithCompletionHandler:]
  -[SFWebViewController _webView:didPresentFocusedElementViewController:]
  -[SFWebViewController autoFillAuthenticationContext]
  -[SFWebViewController willActivateWebViewController]
  -[SFWebViewController _analyticsClient]
  -[SFWebViewController _userDeclinedAutomaticStrongPasswordForCurrentDomainOnTabWithUUID:]
  -[SFWebViewController sfWebViewCanPromptForAccountSecurityRecommendation]
  -[SFWebViewController initWithWebViewConfiguration:]
  -[SFWebViewController willBeginUserInitiatedNavigation]
  -[SFWebViewController didFirstPaint]
  -[SFWebViewController hasFocusedInputFieldOnCurrentPage]


_SFBrowserWindowSettings : NSObject
 @property  BOOL hasPrivateBrowsingWindow
 @property  BOOL invalidatesClosedWindows

  // class methods
  +[_SFBrowserWindowSettings settings]
  +[_SFBrowserWindowSettings setSharedSettings:]

  // instance methods
  -[_SFBrowserWindowSettings .cxx_destruct]
  -[_SFBrowserWindowSettings synchronize]
  -[_SFBrowserWindowSettings init]
  -[_SFBrowserWindowSettings hasPrivateBrowsingWindow]
  -[_SFBrowserWindowSettings _initializeSettingsDictionaryIfNeeded]
  -[_SFBrowserWindowSettings _numberForKey:windowUUID:]
  -[_SFBrowserWindowSettings _stringForKey:windowUUID:]
  -[_SFBrowserWindowSettings _boolValueForKey:windowUUID:]
  -[_SFBrowserWindowSettings _setBool:forKey:windowUUID:]
  -[_SFBrowserWindowSettings _blankSnapshotKeyForPrivateBrowsing:syncableTabGroupUUID:]
  -[_SFBrowserWindowSettings _setString:forKey:windowUUID:]
  -[_SFBrowserWindowSettings _synchronizeNow]
  -[_SFBrowserWindowSettings validateWindowSettingsWithUUIDs:]
  -[_SFBrowserWindowSettings privateBrowsingEnabledForWindowWithUUID:]
  -[_SFBrowserWindowSettings setPrivateBrowsingEnabled:forWindowWithUUID:]
  -[_SFBrowserWindowSettings activeDocumentIsValidForWindowWithUUID:]
  -[_SFBrowserWindowSettings setActiveDocumentIsValid:forWindowWithUUID:]
  -[_SFBrowserWindowSettings isShowingTabViewForWindowWithUUID:]
  -[_SFBrowserWindowSettings setIsShowingTabView:forWindowWithUUID:]
  -[_SFBrowserWindowSettings blankSnapshotGroupIdentifierForPrivateBrowsing:syncableTabGroupUUID:forWindowWithUUID:]
  -[_SFBrowserWindowSettings setBlankSnapshotGroupIdentifier:forPrivateBrowsing:syncableTabGroupUUID:forWindowWithUUID:]
  -[_SFBrowserWindowSettings removeWindowWithUUID:]
  -[_SFBrowserWindowSettings invalidatesClosedWindows]
  -[_SFBrowserWindowSettings setInvalidatesClosedWindows:]


SFContactAutoFillValue : NSObject
 @property  BOOL selected
 @property  NSString *label
 @property  NSString *displayValue
 @property  NSArray *matches

  // instance methods
  -[SFContactAutoFillValue selected]
  -[SFContactAutoFillValue label]
  -[SFContactAutoFillValue .cxx_destruct]
  -[SFContactAutoFillValue matches]
  -[SFContactAutoFillValue setSelected:]
  -[SFContactAutoFillValue displayValue]
  -[SFContactAutoFillValue initWithMatches:displayValue:label:]


_SFLinkWithPreviewActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFLinkWithPreviewActivityItemProvider .cxx_destruct]
  -[_SFLinkWithPreviewActivityItemProvider activityViewControllerLinkMetadata:]
  -[_SFLinkWithPreviewActivityItemProvider initWithPlaceholderItem:URL:pageTitle:webView:]
  -[_SFLinkWithPreviewActivityItemProvider loadLinkMetadata]


_SFPasswordViewController : UIViewController <SFPasswordRemoteViewControllerDelegate, SFQueueingServiceViewControllerProxyDelegate>
 @property  <_SFPasswordViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPasswordViewController childViewControllerForStatusBarHidden]
  -[_SFPasswordViewController childViewControllerForStatusBarStyle]
  -[_SFPasswordViewController .cxx_destruct]
  -[_SFPasswordViewController _addRemoteView]
  -[_SFPasswordViewController setDelegate:]
  -[_SFPasswordViewController init]
  -[_SFPasswordViewController _remoteViewController]
  -[_SFPasswordViewController delegate]
  -[_SFPasswordViewController _connectToService]
  -[_SFPasswordViewController childViewControllerForWhitePointAdaptivityStyle]
  -[_SFPasswordViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[_SFPasswordViewController childViewControllerForHomeIndicatorAutoHidden]
  -[_SFPasswordViewController _setUpServiceProxyIfNeeded]
  -[_SFPasswordViewController remoteViewControllerWillDismiss:]
  -[_SFPasswordViewController _addRemoteViewAsChild]
  -[_SFPasswordViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[_SFPasswordViewController _connectToServiceWithCompletion:]
  -[_SFPasswordViewController _dismissPasswordViewController]
  -[_SFPasswordViewController serviceProxyWillQueueInvocation:]


SFSaveToFilesActivity : _SFActivity <_SFSaveToFilesOperationDelegate>
 @property  BOOL supportsDownloads
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSaveToFilesActivity saveToFilesOperationSupportsDownloads:]
  -[SFSaveToFilesActivity .cxx_destruct]
  -[SFSaveToFilesActivity activityType]
  -[SFSaveToFilesActivity saveToFilesOperation:presentViewController:]
  -[SFSaveToFilesActivity _managesOwnPresentation]
  -[SFSaveToFilesActivity _presentActivityOnViewController:animated:completion:]
  -[SFSaveToFilesActivity _dismissActivityFromViewController:animated:completion:]
  -[SFSaveToFilesActivity saveToFilesOperation:didFinishWithSuccess:]
  -[SFSaveToFilesActivity initWithActivityItemProviderCollection:customizationController:]
  -[SFSaveToFilesActivity setSupportsDownloads:]
  -[SFSaveToFilesActivity customizationControllerForSaveToFilesOperation:]
  -[SFSaveToFilesActivity saveToFilesOperationShouldDismissViewControllerAfterCompletion:]
  -[SFSaveToFilesActivity supportsDownloads]


SFFormAutoFillMultipleLoginsAlertController : UIAlertController
 @property  BOOL cancelsWhenAppEntersBackground

  // class methods
  +[SFFormAutoFillMultipleLoginsAlertController alertControllerWithMatchesFromFormProtectionSpace:matchesFromOtherProtectionSpaces:externalCredentials:preferredStyle:formURL:completionHandler:]

  // instance methods
  -[SFFormAutoFillMultipleLoginsAlertController .cxx_destruct]
  -[SFFormAutoFillMultipleLoginsAlertController _sceneDidEnterBackground:]
  -[SFFormAutoFillMultipleLoginsAlertController viewWillDisappear:]
  -[SFFormAutoFillMultipleLoginsAlertController setCancelsWhenAppEntersBackground:]
  -[SFFormAutoFillMultipleLoginsAlertController cancelsWhenAppEntersBackground]


_SFAccountManagerLockedView : UIView
  // instance methods
  -[_SFAccountManagerLockedView didMoveToSuperview]
  -[_SFAccountManagerLockedView .cxx_destruct]
  -[_SFAccountManagerLockedView initWithFrame:]


SFPasswordSavingRemoteViewController : SFPasswordRemoteViewController
  // class methods
  +[SFPasswordSavingRemoteViewController serviceViewControllerInterface]
  +[SFPasswordSavingRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFPasswordSavingRemoteViewController .cxx_destruct]
  -[SFPasswordSavingRemoteViewController performUpgradeToSignInWithAppleForCredential:serviceIdentifier:]
  -[SFPasswordSavingRemoteViewController performUpgradeToStrongPasswordForCredential:serviceIdentifier:]
  -[SFPasswordSavingRemoteViewController accountAuthenticationModificationController:didSuccessfullyCompleteRequest:withUserInfo:]
  -[SFPasswordSavingRemoteViewController accountAuthenticationModificationController:didFailRequest:withError:]
  -[SFPasswordSavingRemoteViewController presentationAnchorForAccountAuthenticationModificationController:]
  -[SFPasswordSavingRemoteViewController _accountAuthenticationModificationController]


_SFURLLabelAccessoryItem : NSObject
 @property  UIImageView *view
 @property  UIImageView *squishedView
 @property  UIVisualEffectView *effectView
 @property  UIVisualEffectView *squishedEffectView
 @property  UIView *viewForLayout
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frame
 @property  double spacing
 @property  {CGSize=dd} size
 @property  BOOL centerAligned

  // instance methods
  -[_SFURLLabelAccessoryItem centerAligned]
  -[_SFURLLabelAccessoryItem setEffectView:]
  -[_SFURLLabelAccessoryItem setSquishedView:]
  -[_SFURLLabelAccessoryItem .cxx_destruct]
  -[_SFURLLabelAccessoryItem viewForLayout]
  -[_SFURLLabelAccessoryItem setFrame:]
  -[_SFURLLabelAccessoryItem spacing]
  -[_SFURLLabelAccessoryItem squishedEffectView]
  -[_SFURLLabelAccessoryItem setSquishedEffectView:]
  -[_SFURLLabelAccessoryItem effectView]
  -[_SFURLLabelAccessoryItem setCenterAligned:]
  -[_SFURLLabelAccessoryItem view]
  -[_SFURLLabelAccessoryItem setSize:]
  -[_SFURLLabelAccessoryItem setView:]
  -[_SFURLLabelAccessoryItem squishedView]
  -[_SFURLLabelAccessoryItem frame]
  -[_SFURLLabelAccessoryItem size]
  -[_SFURLLabelAccessoryItem setSpacing:]


SFAccountOtpauthQRCodeScannerViewController : UIViewController <AVCaptureMetadataOutputObjectsDelegate>
 @property  <SFAccountOtpauthQRCodeScannerViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAccountOtpauthQRCodeScannerViewController .cxx_destruct]
  -[SFAccountOtpauthQRCodeScannerViewController viewDidLoad]
  -[SFAccountOtpauthQRCodeScannerViewController setDelegate:]
  -[SFAccountOtpauthQRCodeScannerViewController _dismiss:]
  -[SFAccountOtpauthQRCodeScannerViewController viewWillDisappear:]
  -[SFAccountOtpauthQRCodeScannerViewController viewDidLayoutSubviews]
  -[SFAccountOtpauthQRCodeScannerViewController viewWillAppear:]
  -[SFAccountOtpauthQRCodeScannerViewController delegate]
  -[SFAccountOtpauthQRCodeScannerViewController captureOutput:didOutputMetadataObjects:fromConnection:]
  -[SFAccountOtpauthQRCodeScannerViewController _configureCaptureSession]


_SFWebViewUsageMonitor : NSObject
 @property  BOOL userInteracted
 @property  BOOL urlHasQueryString
 @property  BOOL urlHasIDFA
 @property  BOOL viewControllerViewIsHidden
 @property  BOOL shouldAudit
 @property  NSString *stringAsAuditKey

  // instance methods
  -[_SFWebViewUsageMonitor .cxx_destruct]
  -[_SFWebViewUsageMonitor auditUsageIfNeeded]
  -[_SFWebViewUsageMonitor initWithHostAppIdentifier:]
  -[_SFWebViewUsageMonitor userInteracted]
  -[_SFWebViewUsageMonitor setUserInteracted:]
  -[_SFWebViewUsageMonitor checkURL:]
  -[_SFWebViewUsageMonitor setViewControllerViewIsHidden:]
  -[_SFWebViewUsageMonitor urlHasQueryString]
  -[_SFWebViewUsageMonitor urlHasIDFA]
  -[_SFWebViewUsageMonitor viewControllerViewIsHidden]
  -[_SFWebViewUsageMonitor shouldAudit]
  -[_SFWebViewUsageMonitor stringAsAuditKey]
  -[_SFWebViewUsageMonitor setUrlHasIDFA:]
  -[_SFWebViewUsageMonitor setUrlHasQueryString:]


_SFCalendarEventDetector : NSObject
  // instance methods
  -[_SFCalendarEventDetector _service:didFindEventCandidateForURL:pageTitle:]
  -[_SFCalendarEventDetector initWithWebView:]
  -[_SFCalendarEventDetector .cxx_destruct]
  -[_SFCalendarEventDetector cancelCheckForConfirmationPage]
  -[_SFCalendarEventDetector _containsCalendarEventForPageWithSchemaOrgMarkup:]
  -[_SFCalendarEventDetector containsCalendarEventForPageWithSchemaOrgMarkup:]
  -[_SFCalendarEventDetector _foundCalendarEvents:]


_SFTextSuggestion : UITextSuggestion
 @property  long long textSuggestionType
 @property  SFAutoFillOneTimeCode *oneTimeCode
 @property  NSString *generatedPassword
 @property  NSString *username
 @property  NSURLCredential *urlCredential
 @property  BOOL submitForm
 @property  WBUAutoFillDisplayData *singleDisplayData
 @property  WBSCreditCardData *creditCardData
 @property  SFSingleCreditCardData *singleCreditCardData
 @property  SFPasswordCredentialIdentity *credentialIdentity
 @property  WBSHideMyEmailRecord *emailRecord

  // class methods
  +[_SFTextSuggestion textSuggestionWithOneTimeCode:]
  +[_SFTextSuggestion textSuggestionWithGeneratedPassword:]
  +[_SFTextSuggestion textSuggestionWithUsername:]
  +[_SFTextSuggestion textSuggestionWithURLCredential:submitForm:]
  +[_SFTextSuggestion textSuggestionWithSingleDisplayData:]
  +[_SFTextSuggestion textSuggestionWithCredentialIdentity:submitForm:]
  +[_SFTextSuggestion textSuggestionWithCreditCardData:]
  +[_SFTextSuggestion textSuggestionWithSingleCreditCardDataValue:]
  +[_SFTextSuggestion textSuggestionWithHideMyEmailRecord:]
  +[_SFTextSuggestion textSuggestionToProvisionHideMyEmailRecord]

  // instance methods
  -[_SFTextSuggestion .cxx_destruct]
  -[_SFTextSuggestion username]
  -[_SFTextSuggestion urlCredential]
  -[_SFTextSuggestion credentialIdentity]
  -[_SFTextSuggestion creditCardData]
  -[_SFTextSuggestion initWithTextSuggestionType:]
  -[_SFTextSuggestion textSuggestionType]
  -[_SFTextSuggestion oneTimeCode]
  -[_SFTextSuggestion generatedPassword]
  -[_SFTextSuggestion submitForm]
  -[_SFTextSuggestion singleDisplayData]
  -[_SFTextSuggestion singleCreditCardData]
  -[_SFTextSuggestion emailRecord]


_SFSafariViewControllerPrewarmingSession : NSObject <SFQueueingServiceViewControllerProxyDelegate, SFBrowserRemoteViewControllerDelegate>
 @property  SFBrowserRemoteViewController *remoteViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFSafariViewControllerPrewarmingSession sharedSession]
  +[_SFSafariViewControllerPrewarmingSession sharedSessionIfExists]
  +[_SFSafariViewControllerPrewarmingSession _sharedSessionCreateIfNeeded:]

  // instance methods
  -[_SFSafariViewControllerPrewarmingSession _resume]
  -[_SFSafariViewControllerPrewarmingSession restart]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController]
  -[_SFSafariViewControllerPrewarmingSession .cxx_destruct]
  -[_SFSafariViewControllerPrewarmingSession init]
  -[_SFSafariViewControllerPrewarmingSession _suspend]
  -[_SFSafariViewControllerPrewarmingSession _connectToService]
  -[_SFSafariViewControllerPrewarmingSession dealloc]
  -[_SFSafariViewControllerPrewarmingSession remoteViewControllerWillDismiss:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:viewServiceDidTerminateWithError:]
  -[_SFSafariViewControllerPrewarmingSession tokenWithIDDidInvalidate:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:hostApplicationOpenURL:]
  -[_SFSafariViewControllerPrewarmingSession serviceProxyWillQueueInvocation:]
  -[_SFSafariViewControllerPrewarmingSession _hasValidTokens]
  -[_SFSafariViewControllerPrewarmingSession _disconnectFromService]
  -[_SFSafariViewControllerPrewarmingSession _validTokens]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:didFinishInitialLoad:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewControllerDidLoadWebView:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:fetchActivityViewControllerInfoForURL:title:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:executeCustomActivityProxyID:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:setSwipeGestureEnabled:]
  -[_SFSafariViewControllerPrewarmingSession remoteViewController:initialLoadDidRedirectToURL:]
  -[_SFSafariViewControllerPrewarmingSession prewarmConnectionsToURLs:]


_SFSafariViewControllerPrewarmingRequestThrottler : NSObject
 @property  @? connectionHandler
 @property  double minimumRequestDelay
 @property  unsigned long maximumValidConnectionCount

  // instance methods
  -[_SFSafariViewControllerPrewarmingRequestThrottler suspend]
  -[_SFSafariViewControllerPrewarmingRequestThrottler .cxx_destruct]
  -[_SFSafariViewControllerPrewarmingRequestThrottler init]
  -[_SFSafariViewControllerPrewarmingRequestThrottler setConnectionHandler:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler resume]
  -[_SFSafariViewControllerPrewarmingRequestThrottler connectionHandler]
  -[_SFSafariViewControllerPrewarmingRequestThrottler dealloc]
  -[_SFSafariViewControllerPrewarmingRequestThrottler setMinimumRequestDelay:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler setMaximumValidConnectionCount:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler requestToken:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler invalidateTokenWithID:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _URLsToPrewarmForToken:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _didPrewarmToken:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _stopRequestTimer]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _startRequestTimer]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _performNextRequest]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _nextTokenToPrewarm]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _prewarmedURLsWithValidTokens]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _prewarmURLs:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler _didPartiallyPrewarmToken:]
  -[_SFSafariViewControllerPrewarmingRequestThrottler minimumRequestDelay]
  -[_SFSafariViewControllerPrewarmingRequestThrottler maximumValidConnectionCount]


SFFormAutocompleteState : NSObject <CNContactPickerDelegate, SFContactAutoFillViewControllerFiller, _SFCreditCardCaptureViewControllerDelegate, SFAppAutoFillOneTimeCodeProviderObserver, _ASCredentialListViewControllerDelegate, _ASPasswordCredentialAuthenticationViewControllerDelegate>
 @property  long long action
 @property  _SFFormAutoFillInputSession *inputSession
 @property  BOOL shouldOfferToAutoFillCreditCardData
 @property  NSString *titleOfAutoFillButton
 @property  WBSMultiRoundAutoFillManager *multiRoundAutoFillManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutocompleteState _getMatchesFromFormProtectionSpace:matchesFromOtherProtectionSpaces:withFormURL:credentialMatches:lastGeneratedPassword:currentUser:currentPassword:forUserNamesOnly:]
  +[SFFormAutocompleteState _shouldSaveCredentialsInProtectionSpace:]

  // instance methods
  -[SFFormAutocompleteState performPageLevelAutoFill]
  -[SFFormAutocompleteState oneTimeCodeProviderReceivedCode:]
  -[SFFormAutocompleteState updateSuggestions]
  -[SFFormAutocompleteState .cxx_destruct]
  -[SFFormAutocompleteState autoFill]
  -[SFFormAutocompleteState action]
  -[SFFormAutocompleteState _updateAutoFillButton]
  -[SFFormAutocompleteState autoFillTextSuggestion:]
  -[SFFormAutocompleteState dealloc]
  -[SFFormAutocompleteState invalidate]
  -[SFFormAutocompleteState contactPicker:didSelectContact:]
  -[SFFormAutocompleteState contactPickerDidCancel:]
  -[SFFormAutocompleteState _viewControllerToPresentFrom]
  -[SFFormAutocompleteState creditCardCaptureViewControllerDidCancel:]
  -[SFFormAutocompleteState creditCardCaptureViewController:didCaptureCreditCard:]
  -[SFFormAutocompleteState showAllPasswordsButtonTapped]
  -[SFFormAutocompleteState initWithFrame:form:textField:inputSession:autoFillController:]
  -[SFFormAutocompleteState titleOfAutoFillButton]
  -[SFFormAutocompleteState getTextSuggestionForStreamlinedAutoFillWithCredentialIdentity:completion:]
  -[SFFormAutocompleteState inputSession]
  -[SFFormAutocompleteState updateCachedFormMetadataAfterFilling:]
  -[SFFormAutocompleteState textDidChangeInFrame:form:textField:]
  -[SFFormAutocompleteState multiRoundAutoFillManager]
  -[SFFormAutocompleteState shouldOfferToAutoFillCreditCardData]
  -[SFFormAutocompleteState credentialListViewController:didFinishWithCredential:completion:]
  -[SFFormAutocompleteState presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFFormAutocompleteState passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFFormAutocompleteState _startHideMyEmailRecordUpdate]
  -[SFFormAutocompleteState _updateSuggestions:]
  -[SFFormAutocompleteState _shouldShowPasswordOptions]
  -[SFFormAutocompleteState _suggestLoginCredentialsShowingQuickTypeKey:]
  -[SFFormAutocompleteState _shouldOfferCreditCardDataAfterUserHasFilledCreditCardData:]
  -[SFFormAutocompleteState _showCreditCardDataSuggestionsAfterUserHasFilledCreditCardData]
  -[SFFormAutocompleteState _canAutoFillCreditCardData]
  -[SFFormAutocompleteState _updateCreditCardSuggestionsWithHandler:]
  -[SFFormAutocompleteState _suggestUsernamesForRegistrationIfPossible:]
  -[SFFormAutocompleteState _gatherAndShowAddressBookAutoFillSuggestionsWithCorrections]
  -[SFFormAutocompleteState _gatherAndShowAddressBookAutoFillSuggestions]
  -[SFFormAutocompleteState _correctedFormMetadata:]
  -[SFFormAutocompleteState _bestTextFieldMetadataForMetadata:]
  -[SFFormAutocompleteState _textDidChangeInForm:textField:]
  -[SFFormAutocompleteState _setUpMultiRoundAutoFillManagerIfNecessary]
  -[SFFormAutocompleteState _performAutoFill]
  -[SFFormAutocompleteState _autoFillCreditCardData]
  -[SFFormAutocompleteState _autoFillSingleCreditCardData:]
  -[SFFormAutocompleteState _captureCreditCardDataWithCameraAndFill]
  -[SFFormAutocompleteState _suggestPasswordForNewAccountOrChangePasswordForm]
  -[SFFormAutocompleteState _gatherFormValues]
  -[SFFormAutocompleteState _presentContactsAccessSettingsAlert]
  -[SFFormAutocompleteState _offerToAutoFillContact]
  -[SFFormAutocompleteState _gatherFormValuesWithCompletionHandler:]
  -[SFFormAutocompleteState _updateCreditCardAutoFillAction]
  -[SFFormAutocompleteState _shouldUsePasswordGenerationAssistanceForTextField]
  -[SFFormAutocompleteState _passwordGenerationAssistanceAction]
  -[SFFormAutocompleteState _textFieldIsEmptyPasswordField]
  -[SFFormAutocompleteState _shouldAllowExternalPasswordAutoFillOnURL:]
  -[SFFormAutocompleteState _actionForLoginForm]
  -[SFFormAutocompleteState _addHideMyEmailSuggestionsIfNecessary:hideMyEmailRecord:]
  -[SFFormAutocompleteState _shouldAllowGeneratedPassword]
  -[SFFormAutocompleteState _fillOneTimeCodeAfterAuthenticationIfNeeded:inFrame:shouldSubmit:]
  -[SFFormAutocompleteState _autoFillFormWithUsername:]
  -[SFFormAutocompleteState _fillCredentialAfterAuthenticationIfNeeded:setAsDefaultCredential:submitForm:]
  -[SFFormAutocompleteState _autoFillDisplayData:setAutoFilled:]
  -[SFFormAutocompleteState _fillPasswordCredentialIdentity:submitForm:]
  -[SFFormAutocompleteState _fillCreditCardDataAfterAuthenticationIfNeeded:]
  -[SFFormAutocompleteState _fillSingleCreditCardDataValue:creditCardDataType:]
  -[SFFormAutocompleteState _autoFillHideMyEmailRecord:]
  -[SFFormAutocompleteState _provisionHideMyEmailRecord]
  -[SFFormAutocompleteState _setUserAndPasswordFieldsAutoFilled:clearPasswordField:]
  -[SFFormAutocompleteState _presentViewController:presentingViewController:animated:completion:]
  -[SFFormAutocompleteState _cachedPotentialCredentialMatches]
  -[SFFormAutocompleteState _finishPageLevelAutoFillWithResult:]
  -[SFFormAutocompleteState _getLoginFormUser:password:userIsAutoFilled:passwordIsAutoFilled:]
  -[SFFormAutocompleteState externalCredentialIdentities]
  -[SFFormAutocompleteState _fillCredential:setAutoFilled:setAsDefaultCredential:focusFieldAfterFilling:submitForm:]
  -[SFFormAutocompleteState _actionForPresentingPasswordManagerExtension:completionHandler:]
  -[SFFormAutocompleteState _presentCredentialListForExtension:completionHandler:]
  -[SFFormAutocompleteState _textSuggestionForExternalCredentialIdentity:submitForm:]
  -[SFFormAutocompleteState _textSuggestionForCredentialDisplayData:submitForm:]
  -[SFFormAutocompleteState _getMatchingKeychainCredentialsIncludingCredentialsWithEmptyUsernames:withCompletion:]
  -[SFFormAutocompleteState _fetchPotentialCredentialMatchesWithCompletion:]
  -[SFFormAutocompleteState _offerToAutoFillFromPotentialCredentialMatches]
  -[SFFormAutocompleteState _hasMatchWithUser:password:]
  -[SFFormAutocompleteState _passwordGenerationAssistanceAutoFillButtonEnabled]
  -[SFFormAutocompleteState _generateAndSuggestPasswordWithCompletionHandler:]
  -[SFFormAutocompleteState _sortedSingleCreditCardDataArray:]
  -[SFFormAutocompleteState _fillCreditCardData:]
  -[SFFormAutocompleteState _textFieldLooksLikeCardSecurityCodeFieldButNotCardNumberOrCardholderField:]
  -[SFFormAutocompleteState _updateAutoFillActionToCaptureCreditCardAndFill]
  -[SFFormAutocompleteState _performPageLevelCredentialAutoFill]
  -[SFFormAutocompleteState _performPageLevelContactAutoFill]
  -[SFFormAutocompleteState _showPageLevelAutoFillNotAvailableAlertForResult:]
  -[SFFormAutocompleteState _titleForPageLevelAutoFillNotAvailableAlertForResult:]
  -[SFFormAutocompleteState _messageForPageLevelAutoFillNotAvailableAlertForResult:]
  -[SFFormAutocompleteState _suggestionsForAutoFillDisplayData:]
  -[SFFormAutocompleteState _hideMyEmailSuggestionForRecord:]
  -[SFFormAutocompleteState _hideMyEmailCreationSuggestion]
  -[SFFormAutocompleteState _autoFillWithSet:]
  -[SFFormAutocompleteState _switchToCustomInputViewWithMatches:contact:]
  -[SFFormAutocompleteState _showOtherContactOptions]
  -[SFFormAutocompleteState _setShowingKeyboardInputView:]
  -[SFFormAutocompleteState dismissCustomAutoFill]
  -[SFFormAutocompleteState _fillASPasswordCredential:needsAuthentication:setAutoFilled:submitForm:]
  -[SFFormAutocompleteState performAutoFillWithMatchSelections:doNotFill:contact:]
  -[SFFormAutocompleteState _offerToForgetSavedAccount:completionHandler:]
  -[SFFormAutocompleteState _getShouldOfferForgetPassword:savePassword:]


_SFPerSitePreferencePopoverDisplayInformation : NSObject
 @property  unsigned long displayOption
 @property  NSString *localizedDisplayName

  // class methods
  +[_SFPerSitePreferencePopoverDisplayInformation _buildMapIfNeeded]
  +[_SFPerSitePreferencePopoverDisplayInformation popoverDisplayInformationForPerSitePreference:]

  // instance methods
  -[_SFPerSitePreferencePopoverDisplayInformation localizedDisplayName]
  -[_SFPerSitePreferencePopoverDisplayInformation .cxx_destruct]
  -[_SFPerSitePreferencePopoverDisplayInformation displayOption]
  -[_SFPerSitePreferencePopoverDisplayInformation _initWithDisplayOption:localizedDisplayName:]


SFAccountDetailHeaderViewCell : UITableViewCell
  // instance methods
  -[SFAccountDetailHeaderViewCell .cxx_destruct]
  -[SFAccountDetailHeaderViewCell setMonogramBackgroundColor:]
  -[SFAccountDetailHeaderViewCell setIcon:]
  -[SFAccountDetailHeaderViewCell initWithStyle:reuseIdentifier:]
  -[SFAccountDetailHeaderViewCell setHighLevelDomain:]
  -[SFAccountDetailHeaderViewCell setLastModifiedDateString:]
  -[SFAccountDetailHeaderViewCell _hideMonogramIcon]
  -[SFAccountDetailHeaderViewCell _showMonogramIconWithBackgroundColor:]


SFEditableTextFieldTableViewCell : UITableViewCell
 @property  UITextField *editableTextField

  // instance methods
  -[SFEditableTextFieldTableViewCell .cxx_destruct]
  -[SFEditableTextFieldTableViewCell editableTextField]
  -[SFEditableTextFieldTableViewCell initWithStyle:reuseIdentifier:]
  -[SFEditableTextFieldTableViewCell setEditableTextField:]


SFWatchMetrics : NSObject
 @property  double minimumFontScaleFactor
 @property  double closeButtonTopToBaselineSpacing
 @property  double headerButtonFontPointSize
 @property  double headerButtonPadding

  // class methods
  +[SFWatchMetrics currentMetrics]

  // instance methods
  -[SFWatchMetrics init]
  -[SFWatchMetrics minimumFontScaleFactor]
  -[SFWatchMetrics closeButtonTopToBaselineSpacing]
  -[SFWatchMetrics headerButtonFontPointSize]
  -[SFWatchMetrics headerButtonPadding]


_SFTableLinkableFooterView : UITableViewHeaderFooterView <UITextViewDelegate>
 @property  <_SFTableLinkableFooterViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFTableLinkableFooterView traitCollectionDidChange:]
  -[_SFTableLinkableFooterView .cxx_destruct]
  -[_SFTableLinkableFooterView setDelegate:]
  -[_SFTableLinkableFooterView textView:shouldInteractWithURL:inRange:interaction:]
  -[_SFTableLinkableFooterView delegate]
  -[_SFTableLinkableFooterView initWithReuseIdentifier:]
  -[_SFTableLinkableFooterView _configureSubviewsAndConstraints]
  -[_SFTableLinkableFooterView _updateAttributedString]
  -[_SFTableLinkableFooterView setText:linkPlaceholderString:linkReplacementString:]


_SFDownloadsIconView : UIView
 @property  double iconScale
 @property  UIImage *circleImage
 @property  UIImage *arrowImage
 @property  BOOL suppressesPixelAlignment

  // instance methods
  -[_SFDownloadsIconView _setUp]
  -[_SFDownloadsIconView pulse]
  -[_SFDownloadsIconView .cxx_destruct]
  -[_SFDownloadsIconView layoutSubviews]
  -[_SFDownloadsIconView iconScale]
  -[_SFDownloadsIconView setIconScale:]
  -[_SFDownloadsIconView initWithFrame:]
  -[_SFDownloadsIconView intrinsicContentSize]
  -[_SFDownloadsIconView _setPulsing:]
  -[_SFDownloadsIconView _finishedPulsing]
  -[_SFDownloadsIconView _makeSpringAnimationWithDelay:offset:]
  -[_SFDownloadsIconView _updateSuppressesPixelAlignment]
  -[_SFDownloadsIconView arrowImage]
  -[_SFDownloadsIconView setArrowImage:]
  -[_SFDownloadsIconView circleImage]
  -[_SFDownloadsIconView setCircleImage:]
  -[_SFDownloadsIconView suppressesPixelAlignment]
  -[_SFDownloadsIconView setSuppressesPixelAlignment:]


_SFApplicationExtensionActivity : UIApplicationExtensionActivity
 @property  @? customCompletionHandler

  // instance methods
  -[_SFApplicationExtensionActivity .cxx_destruct]
  -[_SFApplicationExtensionActivity activityDidFinish:items:error:]
  -[_SFApplicationExtensionActivity customCompletionHandler]
  -[_SFApplicationExtensionActivity validateExtensionHasSameContainerAsHostApp:]
  -[_SFApplicationExtensionActivity setCustomCompletionHandler:]


SFUIBarButtonItemPopoverSourceInfo : NSObject <_SFPopoverSourceInfo>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} popoverSourceRect
 @property  UIView *popoverSourceView
 @property  BOOL shouldDismissIfSourceRemovedAfterRepositioning
 @property  BOOL shouldPassthroughSuperview
 @property  BOOL shouldHideArrow
 @property  unsigned long permittedArrowDirections
 @property  long long provenance
 @property  UIBarButtonItem *barButtonItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFUIBarButtonItemPopoverSourceInfo initWithItem:]
  -[SFUIBarButtonItemPopoverSourceInfo .cxx_destruct]
  -[SFUIBarButtonItemPopoverSourceInfo barButtonItem]


SFContactAutoFillViewController : UITableViewController
 @property  <SFContactAutoFillViewControllerFiller> *autoFiller

  // instance methods
  -[SFContactAutoFillViewController tableView:numberOfRowsInSection:]
  -[SFContactAutoFillViewController .cxx_destruct]
  -[SFContactAutoFillViewController tableView:didSelectRowAtIndexPath:]
  -[SFContactAutoFillViewController viewDidLoad]
  -[SFContactAutoFillViewController tableView:cellForRowAtIndexPath:]
  -[SFContactAutoFillViewController properties]
  -[SFContactAutoFillViewController canBecomeFirstResponder]
  -[SFContactAutoFillViewController autoFill:]
  -[SFContactAutoFillViewController viewWillAppear:]
  -[SFContactAutoFillViewController _cancel:]
  -[SFContactAutoFillViewController initWithMatches:contact:]
  -[SFContactAutoFillViewController setAutoFiller:]
  -[SFContactAutoFillViewController matchesForProperty:]
  -[SFContactAutoFillViewController valuesFromPropertyMatches:]
  -[SFContactAutoFillViewController _valueForProperty:identifier:]
  -[SFContactAutoFillViewController autoFiller]


_SFBookmarkInfoViewController : SFPopoverSizingTableViewController <_SFBookmarkInfoViewControllerDelegate, _SFBookmarkTextEntryTableViewControllerDelegate, UITableViewDataSource, UITableViewDelegate>
 @property  <_SFBookmarkInfoViewControllerDelegate> *delegate
 @property  WebBookmark *bookmark
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFBookmarkInfoViewController _bookmarksDidReload:]
  -[_SFBookmarkInfoViewController validateCommand:]
  -[_SFBookmarkInfoViewController bookmark]
  -[_SFBookmarkInfoViewController viewWillLayoutSubviews]
  -[_SFBookmarkInfoViewController didRotateFromInterfaceOrientation:]
  -[_SFBookmarkInfoViewController numberOfSectionsInTableView:]
  -[_SFBookmarkInfoViewController tableView:numberOfRowsInSection:]
  -[_SFBookmarkInfoViewController tableView:titleForHeaderInSection:]
  -[_SFBookmarkInfoViewController .cxx_destruct]
  -[_SFBookmarkInfoViewController tableView:willSelectRowAtIndexPath:]
  -[_SFBookmarkInfoViewController tableView:didSelectRowAtIndexPath:]
  -[_SFBookmarkInfoViewController setBookmark:]
  -[_SFBookmarkInfoViewController tableView:cellForRowAtIndexPath:]
  -[_SFBookmarkInfoViewController setDelegate:]
  -[_SFBookmarkInfoViewController viewDidAppear:]
  -[_SFBookmarkInfoViewController setParent:]
  -[_SFBookmarkInfoViewController cancelKeyPressed]
  -[_SFBookmarkInfoViewController viewWillDisappear:]
  -[_SFBookmarkInfoViewController viewDidLayoutSubviews]
  -[_SFBookmarkInfoViewController canPerformAction:withSender:]
  -[_SFBookmarkInfoViewController viewWillAppear:]
  -[_SFBookmarkInfoViewController cancel]
  -[_SFBookmarkInfoViewController delegate]
  -[_SFBookmarkInfoViewController dealloc]
  -[_SFBookmarkInfoViewController reloadData]
  -[_SFBookmarkInfoViewController saveChanges]
  -[_SFBookmarkInfoViewController saveKeyPressed]
  -[_SFBookmarkInfoViewController tableView:canFocusRowAtIndexPath:]
  -[_SFBookmarkInfoViewController loadView]
  -[_SFBookmarkInfoViewController _titleCell]
  -[_SFBookmarkInfoViewController initWithBookmark:childBookmarks:inCollection:addingBookmark:toFavorites:willBeDisplayedModally:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewController:didFinishWithResult:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewControllerShouldUseTranslucentAppearance:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewControllerCanSaveBookmarkChanges:]
  -[_SFBookmarkInfoViewController _saveButtonPressed]
  -[_SFBookmarkInfoViewController _canEditFieldsInCurrentViewController]
  -[_SFBookmarkInfoViewController _didBeginEditingTextField:]
  -[_SFBookmarkInfoViewController _didChangeEditingTextField:]
  -[_SFBookmarkInfoViewController _setFolderPickerExpanded:animated:]
  -[_SFBookmarkInfoViewController _removeActionsForTextFields]
  -[_SFBookmarkInfoViewController _addActionsForTextFields]
  -[_SFBookmarkInfoViewController _createCellsIfNeeded]
  -[_SFBookmarkInfoViewController updateBookmarkIcon]
  -[_SFBookmarkInfoViewController _reloadFolderInfoForced:]
  -[_SFBookmarkInfoViewController _updateCellValues]
  -[_SFBookmarkInfoViewController _centerForIconView]
  -[_SFBookmarkInfoViewController _cellInset]
  -[_SFBookmarkInfoViewController _updateSaveButton]
  -[_SFBookmarkInfoViewController canSaveChanges]
  -[_SFBookmarkInfoViewController initWithBookmark:inCollection:addingBookmark:]
  -[_SFBookmarkInfoViewController _isIndexPathForNewFolderRow:]
  -[_SFBookmarkInfoViewController _createNewFolder]
  -[_SFBookmarkInfoViewController _editField:]
  -[_SFBookmarkInfoViewController _numberOfExpandedFolderPickerRows]
  -[_SFBookmarkInfoViewController _cellForNewFolderRowWithTableView:]
  -[_SFBookmarkInfoViewController _cellForExpandedFolderAtIndex:withTableView:]
  -[_SFBookmarkInfoViewController _cellForParentBookmarkWithTableView:]
  -[_SFBookmarkInfoViewController _dequeueFolderPickerCellFromTableView:]
  -[_SFBookmarkInfoViewController _iconForViewCellGivenBookmark:]
  -[_SFBookmarkInfoViewController isEditingField]
  -[_SFBookmarkInfoViewController _returnWasPressedInTextField:]
  -[_SFBookmarkInfoViewController _valuesChanged]
  -[_SFBookmarkInfoViewController hasTranslucentAppearance]
  -[_SFBookmarkInfoViewController _updateIconViewFrame]
  -[_SFBookmarkInfoViewController updateTranslucentAppearance]
  -[_SFBookmarkInfoViewController backgroundColorUsingTranslucentAppearance:]
  -[_SFBookmarkInfoViewController bookmarkTextEntryTableViewController:dismissedWithText:]
  -[_SFBookmarkInfoViewController bookmarkTextEntryTableViewControllerShouldUseTranslucentAppearance:]
  -[_SFBookmarkInfoViewController titleCellHasText]


_SFWebAppViewController : _UIRemoteViewController <SFWebAppRemoteViewControllerProtocol>
 @property  <_SFWebAppViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFWebAppViewController requestViewControllerWithConnectionHandler:]
  +[_SFWebAppViewController exportedInterface]
  +[_SFWebAppViewController serviceViewControllerInterface]

  // instance methods
  -[_SFWebAppViewController viewServiceDidTerminateWithError:]
  -[_SFWebAppViewController .cxx_destruct]
  -[_SFWebAppViewController setDelegate:]
  -[_SFWebAppViewController initWithNibName:bundle:]
  -[_SFWebAppViewController delegate]
  -[_SFWebAppViewController willDismissServiceViewController]
  -[_SFWebAppViewController didLoadWebView]
  -[_SFWebAppViewController didFinishInitialLoad:]
  -[_SFWebAppViewController fetchActivityViewControllerInfoForURL:title:]
  -[_SFWebAppViewController executeCustomActivityProxyID:]
  -[_SFWebAppViewController setRemoteSwipeGestureEnabled:]
  -[_SFWebAppViewController willOpenURLInHostApplication:]
  -[_SFWebAppViewController didDecideCookieSharingForURL:shouldCancel:]
  -[_SFWebAppViewController initialLoadDidRedirectToURL:]
  -[_SFWebAppViewController didChangeFullScreen:]
  -[_SFWebAppViewController didResolveRedirectionWithURL:appLink:]
  -[_SFWebAppViewController didDecideShouldShowLinkPreviews:]
  -[_SFWebAppViewController willOpenCurrentPageInBrowser]
  -[_SFWebAppViewController didChangeLoadingState:]
  -[_SFWebAppViewController loadWebAppWithIdentifier:]
  -[_SFWebAppViewController _sf_sceneWillEnterForeground:]
  -[_SFWebAppViewController _sf_sceneDidEnterBackground:]
  -[_SFWebAppViewController _sf_sceneDidBecomeActive:]
  -[_SFWebAppViewController _sf_sceneWillResignActive:]


_SFICSPreviewViewController : UINavigationController <EKICSPreviewControllerDelegate>
 @property  @? beforeDismissHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFICSPreviewViewController icsPreviewControllerWantsDismissal:]
  -[_SFICSPreviewViewController .cxx_destruct]
  -[_SFICSPreviewViewController _done:]
  -[_SFICSPreviewViewController viewDidLoad]
  -[_SFICSPreviewViewController viewWillDisappear:]
  -[_SFICSPreviewViewController viewWillAppear:]
  -[_SFICSPreviewViewController popViewControllerAnimated:]
  -[_SFICSPreviewViewController navigationController:willShowViewController:animated:]
  -[_SFICSPreviewViewController _presentActivityViewController:]
  -[_SFICSPreviewViewController _updateNavigationBarItems]
  -[_SFICSPreviewViewController _ensureLeftBarButtonItemsIncludesActivityItem:]
  -[_SFICSPreviewViewController _ensureLeftBarButtonItemsIncludesDoneItem:]
  -[_SFICSPreviewViewController initWithFilePath:sourceURL:]
  -[_SFICSPreviewViewController beforeDismissHandler]
  -[_SFICSPreviewViewController setBeforeDismissHandler:]


SFAccountTableViewCell : UITableViewCell <SFAccountTableViewCell>
 @property  WBSSavedAccount *savedAccount
 @property  NSString *searchPattern
 @property  BOOL isIconMonogram
 @property  <SFAccountTableViewCellDelegate> *delegate
 @property  BOOL safari_hasOneTimeCodeGenerator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAccountTableViewCell .cxx_destruct]
  -[SFAccountTableViewCell setDelegate:]
  -[SFAccountTableViewCell setIcon:]
  -[SFAccountTableViewCell delegate]
  -[SFAccountTableViewCell initWithStyle:reuseIdentifier:]
  -[SFAccountTableViewCell savedAccount]
  -[SFAccountTableViewCell searchPattern]
  -[SFAccountTableViewCell safari_copyUserName]
  -[SFAccountTableViewCell safari_copyPassword]
  -[SFAccountTableViewCell showPlaceholderImageForDomain:backgroundColor:]
  -[SFAccountTableViewCell safari_hasOneTimeCodeGenerator]
  -[SFAccountTableViewCell safari_copyOneTimeCode]
  -[SFAccountTableViewCell setSavedAccount:searchPattern:emphasizeUserName:]
  -[SFAccountTableViewCell isIconMonogram]
  -[SFAccountTableViewCell _updateAccessibilityIdentifiers]
  -[SFAccountTableViewCell setSavedAccount:withWarnings:savedAccountIsOnlySavedAccountForHighLevelDomain:]


_SFActivity : UIActivity
 @property  <_SFActivityDelegate> *delegate

  // instance methods
  -[_SFActivity .cxx_destruct]
  -[_SFActivity activityDidFinish:]
  -[_SFActivity setDelegate:]
  -[_SFActivity delegate]


_SFRequestDesktopSitePreferenceManager : WBSPerSitePreferenceManager <WBSPerSitePreferenceManagerStorageDelegate, WBSPerSitePreferenceManagerDefaultsDelegate, WBSPerSitePreferenceBinaryToggleItemManager>
 @property  WBSPerSitePreference *requestDesktopSitePreference
 @property  BOOL clientPrefersMobileUserAgentByDefault
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  WBSPerSitePreferencesSQLiteStore *perSitePreferencesStore

  // instance methods
  -[_SFRequestDesktopSitePreferenceManager removeRequestDesktopSitePerSitePreferenceObserver:]
  -[_SFRequestDesktopSitePreferenceManager _defaultPreferenceValue]
  -[_SFRequestDesktopSitePreferenceManager _requestDesktopSitePerSitePreferenceDidChange:]
  -[_SFRequestDesktopSitePreferenceManager preferences]
  -[_SFRequestDesktopSitePreferenceManager setClientPrefersMobileUserAgentByDefault:]
  -[_SFRequestDesktopSitePreferenceManager .cxx_destruct]
  -[_SFRequestDesktopSitePreferenceManager perSitePreferencesStore]
  -[_SFRequestDesktopSitePreferenceManager preferenceNameForPreference:]
  -[_SFRequestDesktopSitePreferenceManager init]
  -[_SFRequestDesktopSitePreferenceManager valuesForPreference:]
  -[_SFRequestDesktopSitePreferenceManager addRequestDesktopSitePerSitePreferenceObserver:]
  -[_SFRequestDesktopSitePreferenceManager getRequestDesktopSitePreferenceForDomain:withTimeout:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager defaultPreferenceValueForPreferenceIfNotCustomized:]
  -[_SFRequestDesktopSitePreferenceManager getAllRequestDesktopSitePerSitePreferenceValues:]
  -[_SFRequestDesktopSitePreferenceManager didUpdatePreference:toValue:forDomain:]
  -[_SFRequestDesktopSitePreferenceManager clientPrefersMobileUserAgentByDefault]
  -[_SFRequestDesktopSitePreferenceManager localizedStringForValue:inPreference:]
  -[_SFRequestDesktopSitePreferenceManager initWithPerSitePreferencesStore:quirksManager:]
  -[_SFRequestDesktopSitePreferenceManager offValueForPreference:]
  -[_SFRequestDesktopSitePreferenceManager dealloc]
  -[_SFRequestDesktopSitePreferenceManager _notifyObserversOfPerSitePreferenceDefaultValueUpdate]
  -[_SFRequestDesktopSitePreferenceManager onValueForPreference:]
  -[_SFRequestDesktopSitePreferenceManager getDefaultPreferenceValueIfNotCustomizedForPreference:domain:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager _notifyObserversOfPerSitePreferenceDomainValuesUpdate]
  -[_SFRequestDesktopSitePreferenceManager getDefaultPreferenceValueForPreference:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager getAllDomainsConfiguredForPreference:usingBlock:]
  -[_SFRequestDesktopSitePreferenceManager getValueOfPreference:forDomain:withTimeout:usingBlock:]
  -[_SFRequestDesktopSitePreferenceManager requestDesktopSitePreference]


SFWebProcessPlugInPageExtensionController : NSObject
  // instance methods
  -[SFWebProcessPlugInPageExtensionController _setUpExtensionControllerInterface]
  -[SFWebProcessPlugInPageExtensionController .cxx_destruct]
  -[SFWebProcessPlugInPageExtensionController clearExtensionScriptWorlds]
  -[SFWebProcessPlugInPageExtensionController initWithBrowserContextController:]
  -[SFWebProcessPlugInPageExtensionController evaluateJavaScriptForSharingExtension:extraArguments:completionHandler:]
  -[SFWebProcessPlugInPageExtensionController prepareJavaScriptWorldForSharingExtension:javaScript:]
  -[SFWebProcessPlugInPageExtensionController _clearExtensionControllerInterface]
  -[SFWebProcessPlugInPageExtensionController dealloc]
  -[SFWebProcessPlugInPageExtensionController finalizeJavaScriptForSharingExtension:arguments:]


_SFReaderCustomProtocols : NSObject
  // class methods
  +[_SFReaderCustomProtocols readerUserInterfaceScriptForContext:]
  +[_SFReaderCustomProtocols registerReaderCustomProtocols]


_SFLinkPreviewHeader : UIView <SFLinkPreviewHeaderContentViewDelegate, _SFFluidProgressViewDelegate>
 @property  <_SFLinkPreviewHeaderDelegate> *delegate
 @property  NSString *domain
 @property  _SFFluidProgressView *progressView
 @property  BOOL linkPreviewEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFLinkPreviewHeader setDomain:]
  -[_SFLinkPreviewHeader defaultHeight]
  -[_SFLinkPreviewHeader progressView]
  -[_SFLinkPreviewHeader .cxx_destruct]
  -[_SFLinkPreviewHeader layoutSubviews]
  -[_SFLinkPreviewHeader domain]
  -[_SFLinkPreviewHeader setDelegate:]
  -[_SFLinkPreviewHeader setProgressView:]
  -[_SFLinkPreviewHeader delegate]
  -[_SFLinkPreviewHeader intrinsicContentSize]
  -[_SFLinkPreviewHeader initWithMinimumPreviewUI:]
  -[_SFLinkPreviewHeader setLinkPreviewEnabled:]
  -[_SFLinkPreviewHeader fluidProgressViewWillShowProgress:]
  -[_SFLinkPreviewHeader fluidProgressViewDidShowProgress:]
  -[_SFLinkPreviewHeader linkPreviewHeaderContentView:didEnableLinkPreview:]
  -[_SFLinkPreviewHeader isLinkPreviewEnabled]
  -[_SFLinkPreviewHeader linkPreviewEnabled]


SFBrowserRemoteViewController : _UIRemoteViewController <MPVolumeDisplaying, SFRemoteViewControllerProtocol>
 @property  <SFBrowserRemoteViewControllerDelegate> *delegate
 @property  UIWindowScene *windowSceneForVolumeDisplay
 @property  BOOL onScreenForVolumeDisplay
 @property  NSString *volumeAudioCategory
 @property  BOOL onScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBrowserRemoteViewController requestViewControllerWithConnectionHandler:]
  +[SFBrowserRemoteViewController exportedInterface]
  +[SFBrowserRemoteViewController serviceViewControllerInterface]
  +[SFBrowserRemoteViewController shouldPropagateAppearanceCustomizations]

  // instance methods
  -[SFBrowserRemoteViewController volumeAudioCategory]
  -[SFBrowserRemoteViewController viewServiceDidTerminateWithError:]
  -[SFBrowserRemoteViewController .cxx_destruct]
  -[SFBrowserRemoteViewController didMoveToParentViewController:]
  -[SFBrowserRemoteViewController setDelegate:]
  -[SFBrowserRemoteViewController initWithNibName:bundle:]
  -[SFBrowserRemoteViewController isOnScreenForVolumeDisplay]
  -[SFBrowserRemoteViewController willMoveToParentViewController:]
  -[SFBrowserRemoteViewController windowSceneForVolumeDisplay]
  -[SFBrowserRemoteViewController viewDidLayoutSubviews]
  -[SFBrowserRemoteViewController viewWillAppear:]
  -[SFBrowserRemoteViewController delegate]
  -[SFBrowserRemoteViewController willDismissServiceViewController]
  -[SFBrowserRemoteViewController didLoadWebView]
  -[SFBrowserRemoteViewController didFinishInitialLoad:]
  -[SFBrowserRemoteViewController fetchActivityViewControllerInfoForURL:title:]
  -[SFBrowserRemoteViewController executeCustomActivityProxyID:]
  -[SFBrowserRemoteViewController setRemoteSwipeGestureEnabled:]
  -[SFBrowserRemoteViewController willOpenURLInHostApplication:]
  -[SFBrowserRemoteViewController didDecideCookieSharingForURL:shouldCancel:]
  -[SFBrowserRemoteViewController initialLoadDidRedirectToURL:]
  -[SFBrowserRemoteViewController didChangeFullScreen:]
  -[SFBrowserRemoteViewController didResolveRedirectionWithURL:appLink:]
  -[SFBrowserRemoteViewController didDecideShouldShowLinkPreviews:]
  -[SFBrowserRemoteViewController willOpenCurrentPageInBrowser]
  -[SFBrowserRemoteViewController _sf_sceneWillEnterForeground:]
  -[SFBrowserRemoteViewController _sf_sceneDidEnterBackground:]
  -[SFBrowserRemoteViewController _determineVisibilityIfNeeded]


_SFRequestDesktopSiteQuirksSnapshotTransformer : WBSConfigurationDataTransformer
  // instance methods
  -[_SFRequestDesktopSiteQuirksSnapshotTransformer objectFromData:]


SFQueueingServiceViewControllerProxy : NSProxy
 @property  id target
 @property  <SFQueueingServiceViewControllerProxyDelegate> *delegate

  // instance methods
  -[SFQueueingServiceViewControllerProxy methodSignatureForSelector:]
  -[SFQueueingServiceViewControllerProxy .cxx_destruct]
  -[SFQueueingServiceViewControllerProxy setDelegate:]
  -[SFQueueingServiceViewControllerProxy initWithProtocol:]
  -[SFQueueingServiceViewControllerProxy forwardingTargetForSelector:]
  -[SFQueueingServiceViewControllerProxy setTarget:]
  -[SFQueueingServiceViewControllerProxy target]
  -[SFQueueingServiceViewControllerProxy delegate]
  -[SFQueueingServiceViewControllerProxy forwardInvocation:]


_SFBarHoverAssistant : NSObject <_SFDynamicBarAnimatorStateObserver>
 @property  UIView<_SFBarCommon> *bar
 @property  _SFDynamicBarAnimator *dynamicBarAnimator
 @property  UIView *containerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFBarHoverAssistant attachToBar:withAnimator:inContainerView:]

  // instance methods
  -[_SFBarHoverAssistant dynamicBarAnimator]
  -[_SFBarHoverAssistant dynamicBarAnimatorStateDidChange:]
  -[_SFBarHoverAssistant bar]
  -[_SFBarHoverAssistant initWithBar:withAnimator:inContainerView:]
  -[_SFBarHoverAssistant containerView]
  -[_SFBarHoverAssistant .cxx_destruct]
  -[_SFBarHoverAssistant _gestureIsOverBar]
  -[_SFBarHoverAssistant dealloc]
  -[_SFBarHoverAssistant dynamicBarAnimatorWillLeaveSteadyState:]
  -[_SFBarHoverAssistant _hover:]


SFPrivacyReportOverviewView : SFPrivacyReportGridView
 @property  BOOL usesInsetStyle

  // instance methods
  -[SFPrivacyReportOverviewView .cxx_destruct]
  -[SFPrivacyReportOverviewView interItemSpacing]
  -[SFPrivacyReportOverviewView setUsesInsetStyle:]
  -[SFPrivacyReportOverviewView initWithPrivacyReportDataProvider:]
  -[SFPrivacyReportOverviewView usesInsetStyle]
  -[SFPrivacyReportOverviewView itemViewIsLineBreak:]
  -[SFPrivacyReportOverviewView itemViewCanUseCompactWidth:]


SFPrivacyReportOverviewCellView : UIView <SFPrivacyReportGridItem>
 @property  double maxWidth
 @property  BOOL usesInsetStyle
 @property  <SFPrivacyReportGridItemDelegate> *delegate
 @property  unsigned long gridPosition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrivacyReportOverviewCellView willMoveToWindow:]
  -[SFPrivacyReportOverviewCellView maxWidth]
  -[SFPrivacyReportOverviewCellView .cxx_destruct]
  -[SFPrivacyReportOverviewCellView setDelegate:]
  -[SFPrivacyReportOverviewCellView initWithFrame:]
  -[SFPrivacyReportOverviewCellView delegate]
  -[SFPrivacyReportOverviewCellView _updateLayoutMargins]
  -[SFPrivacyReportOverviewCellView setMaxWidth:]
  -[SFPrivacyReportOverviewCellView setUsesInsetStyle:]
  -[SFPrivacyReportOverviewCellView usesInsetStyle]
  -[SFPrivacyReportOverviewCellView setGridPosition:]
  -[SFPrivacyReportOverviewCellView _updateHairlinesIfNeeded]
  -[SFPrivacyReportOverviewCellView gridPosition]


SFPrivacyReportOverviewCellContentView : SFPrivacyReportOverviewCellView
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel

  // instance methods
  -[SFPrivacyReportOverviewCellContentView titleLabel]
  -[SFPrivacyReportOverviewCellContentView .cxx_destruct]
  -[SFPrivacyReportOverviewCellContentView subtitleLabel]
  -[SFPrivacyReportOverviewCellContentView initWithFrame:]


SFDomainLabel : UIView
 @property  NSString *text
 @property  BOOL secure

  // instance methods
  -[SFDomainLabel _commonInit]
  -[SFDomainLabel initWithCoder:]
  -[SFDomainLabel isSecure]
  -[SFDomainLabel .cxx_destruct]
  -[SFDomainLabel initWithFrame:]
  -[SFDomainLabel text]
  -[SFDomainLabel setText:isSecure:]
  -[SFDomainLabel _makeAttributedString]
  -[SFDomainLabel initWithText:isSecure:]


_SFAutomaticPasswordInputViewController : UIInputViewController <SFAutomaticPasswordInputViewDelegate, SFAutomaticPasswordInputViewSizing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFAutomaticPasswordInputViewController inputViewControllerWithAutoFillContext:passwordRules:completion:]

  // instance methods
  -[_SFAutomaticPasswordInputViewController _currentKeyboardSize]
  -[_SFAutomaticPasswordInputViewController inputViewControllerDidSelectUseCustomPassword:]
  -[_SFAutomaticPasswordInputViewController _dismissKeyboard:]
  -[_SFAutomaticPasswordInputViewController .cxx_destruct]
  -[_SFAutomaticPasswordInputViewController initWithPassword:keyboardType:]
  -[_SFAutomaticPasswordInputViewController viewDidLoad]
  -[_SFAutomaticPasswordInputViewController _updateKeyboardMetricsAndInterfaceOrientationIfNeeded]
  -[_SFAutomaticPasswordInputViewController inputViewControllerDidSelectUseStrongPassword:]
  -[_SFAutomaticPasswordInputViewController dismissKeyboardPreservingFirstResponderIfNecessary]
  -[_SFAutomaticPasswordInputViewController _inputViewControllerShouldDirectlyInsertPassword]
  -[_SFAutomaticPasswordInputViewController intrinsicContentSizeForInputView:]
  -[_SFAutomaticPasswordInputViewController viewWillAppear:]
  -[_SFAutomaticPasswordInputViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFAutomaticPasswordInputViewController _updateKeyboardHeight]
  -[_SFAutomaticPasswordInputViewController _postButtonPressedNotificationForButton:]
  -[_SFAutomaticPasswordInputViewController viewDidDisappear:]


SFDownloadsBarButtonItemView : UIButton <UIPointerInteractionDelegate, SFDeferrableUpdateView>
 @property  UIBarButtonItem *barButtonItem
 @property  double progress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFDownloadsBarButtonItemView buttonWithBarButtonItem:]

  // instance methods
  -[SFDownloadsBarButtonItemView pointerInteraction:willEnterRegion:animator:]
  -[SFDownloadsBarButtonItemView traitCollectionDidChange:]
  -[SFDownloadsBarButtonItemView pointerInteraction:willExitRegion:animator:]
  -[SFDownloadsBarButtonItemView pulse]
  -[SFDownloadsBarButtonItemView _selectedIndicatorBounds]
  -[SFDownloadsBarButtonItemView .cxx_destruct]
  -[SFDownloadsBarButtonItemView barButtonItem]
  -[SFDownloadsBarButtonItemView layoutSubviews]
  -[SFDownloadsBarButtonItemView progress]
  -[SFDownloadsBarButtonItemView setBarButtonItem:]
  -[SFDownloadsBarButtonItemView pointInside:withEvent:]
  -[SFDownloadsBarButtonItemView didMoveToWindow]
  -[SFDownloadsBarButtonItemView deferrableUpdateViewState]
  -[SFDownloadsBarButtonItemView _buttonPressed]
  -[SFDownloadsBarButtonItemView setProgress:]
  -[SFDownloadsBarButtonItemView pointerInteraction:regionForRequest:defaultRegion:]
  -[SFDownloadsBarButtonItemView setEnabled:]
  -[SFDownloadsBarButtonItemView intrinsicContentSize]
  -[SFDownloadsBarButtonItemView updateContents]
  -[SFDownloadsBarButtonItemView _updateIcon]
  -[SFDownloadsBarButtonItemView _barButtonHitRect]
  -[SFDownloadsBarButtonItemView _installSubviews]


SFDownloadsBarButtonItem : UIBarButtonItem
 @property  double progress

  // instance methods
  -[SFDownloadsBarButtonItem pulse]
  -[SFDownloadsBarButtonItem .cxx_destruct]
  -[SFDownloadsBarButtonItem initWithTarget:action:]
  -[SFDownloadsBarButtonItem progress]
  -[SFDownloadsBarButtonItem setProgress:]
  -[SFDownloadsBarButtonItem setEnabled:]


_SFPerSitePreferencesPopoverViewController : UITableViewController <SFSwitchTableViewCellDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPerSitePreferencesPopoverViewController numberOfSectionsInTableView:]
  -[_SFPerSitePreferencesPopoverViewController tableView:numberOfRowsInSection:]
  -[_SFPerSitePreferencesPopoverViewController tableView:titleForHeaderInSection:]
  -[_SFPerSitePreferencesPopoverViewController .cxx_destruct]
  -[_SFPerSitePreferencesPopoverViewController _done:]
  -[_SFPerSitePreferencesPopoverViewController tableView:didSelectRowAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController tableView:cellForRowAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController viewDidLayoutSubviews]
  -[_SFPerSitePreferencesPopoverViewController tableView:canFocusRowAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController reloadPreferences]
  -[_SFPerSitePreferencesPopoverViewController switchTableViewCell:didChangeSwitchState:]
  -[_SFPerSitePreferencesPopoverViewController _initializePreferences]
  -[_SFPerSitePreferencesPopoverViewController _generalPageSection]
  -[_SFPerSitePreferencesPopoverViewController _securePageSection]
  -[_SFPerSitePreferencesPopoverViewController _indexPathForView:]
  -[_SFPerSitePreferencesPopoverViewController _preferenceRowIndexPathForCellAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController _preferenceAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController _setPreferenceValue:forPreference:]
  -[_SFPerSitePreferencesPopoverViewController _didRetrieveValue:forPreference:]
  -[_SFPerSitePreferencesPopoverViewController initWithBrowserDocument:perSitePreferencesVendor:]
  -[_SFPerSitePreferencesPopoverViewController _setPreferenceValueIndex:forView:]
  -[_SFPerSitePreferencesPopoverViewController safari_prefersHalfHeightSheetPresentationWithLoweredBar]


_SFPerSitePreferencesSection : NSObject
 @property  NSString *title
 @property  NSArray *preferences

  // instance methods
  -[_SFPerSitePreferencesSection preferences]
  -[_SFPerSitePreferencesSection .cxx_destruct]
  -[_SFPerSitePreferencesSection title]
  -[_SFPerSitePreferencesSection initWithTitle:preferences:]


SFExpandingTextView : UITextView
  // instance methods
  -[SFExpandingTextView setText:]
  -[SFExpandingTextView intrinsicContentSize]
  -[SFExpandingTextView initWithMaxHeight:]


SFAccountNoteTableViewCell : UITableViewCell <UITextViewDelegate>
 @property  UITextView *textView
 @property  @? textDidChange
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAccountNoteTableViewCell textDidChange]
  -[SFAccountNoteTableViewCell textView]
  -[SFAccountNoteTableViewCell setEditing:animated:]
  -[SFAccountNoteTableViewCell .cxx_destruct]
  -[SFAccountNoteTableViewCell setTextView:]
  -[SFAccountNoteTableViewCell initWithStyle:reuseIdentifier:]
  -[SFAccountNoteTableViewCell textViewDidChange:]
  -[SFAccountNoteTableViewCell textView:shouldChangeTextInRange:replacementText:]
  -[SFAccountNoteTableViewCell setTextDidChange:]
  -[SFAccountNoteTableViewCell _updateHeightConstraint]


_SFDownloadCurrentPageActivity : UIApplicationExtensionActivity
  // instance methods
  -[_SFDownloadCurrentPageActivity initWithWebView:]
  -[_SFDownloadCurrentPageActivity .cxx_destruct]
  -[_SFDownloadCurrentPageActivity canPerformWithActivityItems:]
  -[_SFDownloadCurrentPageActivity performActivity]
  -[_SFDownloadCurrentPageActivity prepareWithActivityItems:]
  -[_SFDownloadCurrentPageActivity _presentActivityOnViewController:animated:completion:]


SFCredentialDisplayData : NSObject
 @property  WBSCredentialMatch *match
 @property  NSString *detail
 @property  NSDate *creationDate

  // class methods
  +[SFCredentialDisplayData descriptionForPasswordWithUser:creationDate:]

  // instance methods
  -[SFCredentialDisplayData .cxx_destruct]
  -[SFCredentialDisplayData match]
  -[SFCredentialDisplayData creationDate]
  -[SFCredentialDisplayData detail]
  -[SFCredentialDisplayData initWithMatch:detail:creationDate:]


_SFDynamicBarAnimator : NSObject
 @property  long long state
 @property  long long targetState
 @property  double topBarHeight
 @property  double bottomBarOffset
 @property  BOOL sendingOutputsDidChange
 @property  BOOL trackingDrag
 @property  BOOL isInSteadyState
 @property  double minimumTopBarHeight
 @property  <_SFDynamicBarAnimatorDelegate> *delegate

  // instance methods
  -[_SFDynamicBarAnimator isTrackingDrag]
  -[_SFDynamicBarAnimator performBatchUpdates:]
  -[_SFDynamicBarAnimator _setInSteadyState:]
  -[_SFDynamicBarAnimator _constrainTopBarHeight:withMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator isSendingOutputsDidChange]
  -[_SFDynamicBarAnimator minimumTopBarHeight]
  -[_SFDynamicBarAnimator setTopBarHeight:forState:]
  -[_SFDynamicBarAnimator updateDraggingWithOffset:]
  -[_SFDynamicBarAnimator attemptTransitionToState:animated:]
  -[_SFDynamicBarAnimator _displayLinkFired:]
  -[_SFDynamicBarAnimator .cxx_destruct]
  -[_SFDynamicBarAnimator isInSteadyState]
  -[_SFDynamicBarAnimator setMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator _constrainTopBarHeight:]
  -[_SFDynamicBarAnimator endScrolling]
  -[_SFDynamicBarAnimator _canTransitionToState:withMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator setDelegate:]
  -[_SFDynamicBarAnimator init]
  -[_SFDynamicBarAnimator _updateDisplayLink]
  -[_SFDynamicBarAnimator topBarHeight]
  -[_SFDynamicBarAnimator _updateOutputs]
  -[_SFDynamicBarAnimator addObserver:]
  -[_SFDynamicBarAnimator state]
  -[_SFDynamicBarAnimator _endDraggingWithVelocity:]
  -[_SFDynamicBarAnimator canTransitionToState:]
  -[_SFDynamicBarAnimator targetState]
  -[_SFDynamicBarAnimator bottomBarOffset]
  -[_SFDynamicBarAnimator _moveBarsWithDelta:]
  -[_SFDynamicBarAnimator beginDraggingWithOffset:]
  -[_SFDynamicBarAnimator delegate]
  -[_SFDynamicBarAnimator endDraggingWithTargetOffset:velocity:]
  -[_SFDynamicBarAnimator setBottomBarOffset:forState:]
  -[_SFDynamicBarAnimator dealloc]
  -[_SFDynamicBarAnimator _transitionToSteadyState]
  -[_SFDynamicBarAnimator removeObserver:]
  -[_SFDynamicBarAnimator _bottomBarOffsetForTopBarHeight:]


SFReaderAppearanceThemeSelector : UIView
 @property  long long selectedTheme
 @property  @? selectedThemeChangedBlock

  // class methods
  +[SFReaderAppearanceThemeSelector requiredHeight]
  +[SFReaderAppearanceThemeSelector themeSelectorWithBlock:]

  // instance methods
  -[SFReaderAppearanceThemeSelector .cxx_destruct]
  -[SFReaderAppearanceThemeSelector initWithFrame:]
  -[SFReaderAppearanceThemeSelector setSelectedThemeChangedBlock:]
  -[SFReaderAppearanceThemeSelector _createThemeButtons]
  -[SFReaderAppearanceThemeSelector _updateSelectedTheme]
  -[SFReaderAppearanceThemeSelector _buttonForTheme:]
  -[SFReaderAppearanceThemeSelector _imageForTheme:selected:]
  -[SFReaderAppearanceThemeSelector _themeButtonAction:]
  -[SFReaderAppearanceThemeSelector _themeButtonImageWithFillColor:strokeColor:selected:]
  -[SFReaderAppearanceThemeSelector _themeForButton:]
  -[SFReaderAppearanceThemeSelector selectedTheme]
  -[SFReaderAppearanceThemeSelector setSelectedTheme:]
  -[SFReaderAppearanceThemeSelector _changeSelectionForTheme:selected:]
  -[SFReaderAppearanceThemeSelector selectedThemeChangedBlock]


SFReaderThemeButton : UIButton
  // instance methods
  -[SFReaderThemeButton focusEffect]
  -[SFReaderThemeButton canBecomeFocused]
  -[SFReaderThemeButton pressesBegan:withEvent:]


_SFDownloadActivityItemProvider : _SFActivityItemProvider <UIActivityItemApplicationExtensionSource>
 @property  _SFQuickLookDocument *quickLookDocument
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFDownloadActivityItemProvider quickLookDocument]
  -[_SFDownloadActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFDownloadActivityItemProvider .cxx_destruct]
  -[_SFDownloadActivityItemProvider setQuickLookDocument:]
  -[_SFDownloadActivityItemProvider item]
  -[_SFDownloadActivityItemProvider pageTitle]
  -[_SFDownloadActivityItemProvider activityViewControllerPlaceholderItem:]
  -[_SFDownloadActivityItemProvider activityViewControllerApplicationExtensionItem:]
  -[_SFDownloadActivityItemProvider initWithQuickLookDocument:URL:webView:]


_SFSettingsAlertItem : NSObject
 @property  UIView<SFSettingsAlertItemView> *view
 @property  id controller
 @property  @? viewConfigurationBlock
 @property  NSString *textStyle
 @property  @? handler
 @property  UIView *customView
 @property  NSArray *subItems
 @property  _SFSettingsAlertItem *group
 @property  long long type
 @property  long long actionType
 @property  NSString *title
 @property  NSAttributedString *attributedTitle
 @property  NSString *subtitle
 @property  UIColor *tintColor
 @property  UIImage *icon
 @property  BOOL enabled
 @property  BOOL showsIndicatorDot
 @property  NSString *accessibilityIdentifier
 @property  NSArray *componentsArrangement
 @property  UIView *badgeView
 @property  UIImageView *statusImageView

  // class methods
  +[_SFSettingsAlertItem buttonWithTitle:textStyle:icon:action:handler:]
  +[_SFSettingsAlertItem buttonWithAttributedTitle:textStyle:icon:action:handler:]
  +[_SFSettingsAlertItem singleLineButtonWithTitle:textStyle:icon:action:handler:]
  +[_SFSettingsAlertItem stepperWithController:action:handler:]
  +[_SFSettingsAlertItem optionsGroupWithTitle:action:subItemAction:controller:]
  +[_SFSettingsAlertItem itemWithCustomView:]

  // instance methods
  -[_SFSettingsAlertItem setController:]
  -[_SFSettingsAlertItem tintColor]
  -[_SFSettingsAlertItem textStyle]
  -[_SFSettingsAlertItem badgeView]
  -[_SFSettingsAlertItem icon]
  -[_SFSettingsAlertItem controller]
  -[_SFSettingsAlertItem setTitle:]
  -[_SFSettingsAlertItem setCustomView:]
  -[_SFSettingsAlertItem attributedTitle]
  -[_SFSettingsAlertItem .cxx_destruct]
  -[_SFSettingsAlertItem setBadgeView:]
  -[_SFSettingsAlertItem setSubtitle:]
  -[_SFSettingsAlertItem customView]
  -[_SFSettingsAlertItem enabled]
  -[_SFSettingsAlertItem view]
  -[_SFSettingsAlertItem statusImageView]
  -[_SFSettingsAlertItem setView:]
  -[_SFSettingsAlertItem setTextStyle:]
  -[_SFSettingsAlertItem actionType]
  -[_SFSettingsAlertItem setTintColor:]
  -[_SFSettingsAlertItem setIcon:]
  -[_SFSettingsAlertItem subtitle]
  -[_SFSettingsAlertItem accessibilityIdentifier]
  -[_SFSettingsAlertItem group]
  -[_SFSettingsAlertItem title]
  -[_SFSettingsAlertItem setAttributedTitle:]
  -[_SFSettingsAlertItem type]
  -[_SFSettingsAlertItem setAccessibilityIdentifier:]
  -[_SFSettingsAlertItem setHandler:]
  -[_SFSettingsAlertItem subItems]
  -[_SFSettingsAlertItem setEnabled:]
  -[_SFSettingsAlertItem handler]
  -[_SFSettingsAlertItem _updateButtonTitle]
  -[_SFSettingsAlertItem setStatusImageView:]
  -[_SFSettingsAlertItem initWithType:action:]
  -[_SFSettingsAlertItem _buttonCommonInitWithTextStyle:icon:handler:]
  -[_SFSettingsAlertItem updateOptionsGroupDetailLabel]
  -[_SFSettingsAlertItem setViewConfigurationBlock:]
  -[_SFSettingsAlertItem setSubItems:]
  -[_SFSettingsAlertItem setComponentsArrangement:]
  -[_SFSettingsAlertItem componentsArrangement]
  -[_SFSettingsAlertItem showsIndicatorDot]
  -[_SFSettingsAlertItem setShowsIndicatorDot:]
  -[_SFSettingsAlertItem viewConfigurationBlock]


_SFSettingsAlertController : UIViewController
 @property  _SFSettingsAlertContentController *_rootContentController
 @property  <_SFSettingsAlertControllerDelegate> *delegate
 @property  NSArray *items
 @property  long long provenance
 @property  BOOL usesReverseOrder
 @property  _SFSettingsAlertItem *focusedItem

  // instance methods
  -[_SFSettingsAlertController addItem:]
  -[_SFSettingsAlertController items]
  -[_SFSettingsAlertController .cxx_destruct]
  -[_SFSettingsAlertController viewDidLoad]
  -[_SFSettingsAlertController focusedItem]
  -[_SFSettingsAlertController setDelegate:]
  -[_SFSettingsAlertController initWithNibName:bundle:]
  -[_SFSettingsAlertController setPreferredContentSize:]
  -[_SFSettingsAlertController provenance]
  -[_SFSettingsAlertController delegate]
  -[_SFSettingsAlertController setFocusedItem:]
  -[_SFSettingsAlertController pushViewController:]
  -[_SFSettingsAlertController setProvenance:]
  -[_SFSettingsAlertController _pushSubItemsForGroup:]
  -[_SFSettingsAlertController _rootContentController]
  -[_SFSettingsAlertController setUsesReverseOrder:]
  -[_SFSettingsAlertController addDivider]
  -[_SFSettingsAlertController usesReverseOrder]


_SFSettingsAlertContentController : UIViewController <UIGestureRecognizerDelegate, SFSettingsAlertItemViewDelegate>
 @property  _SFSettingsAlertController *alertController
 @property  NSArray *items
 @property  BOOL usesReverseOrder
 @property  _SFSettingsAlertItem *focusedItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertContentController addItem:]
  -[_SFSettingsAlertContentController setAlertController:]
  -[_SFSettingsAlertContentController traitCollectionDidChange:]
  -[_SFSettingsAlertContentController alertController]
  -[_SFSettingsAlertContentController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[_SFSettingsAlertContentController items]
  -[_SFSettingsAlertContentController .cxx_destruct]
  -[_SFSettingsAlertContentController canBecomeFirstResponder]
  -[_SFSettingsAlertContentController focusedItem]
  -[_SFSettingsAlertContentController viewDidAppear:]
  -[_SFSettingsAlertContentController initWithNibName:bundle:]
  -[_SFSettingsAlertContentController gestureRecognizerShouldBegin:]
  -[_SFSettingsAlertContentController viewDidLayoutSubviews]
  -[_SFSettingsAlertContentController viewWillAppear:]
  -[_SFSettingsAlertContentController _updatePreferredContentSize]
  -[_SFSettingsAlertContentController loadView]
  -[_SFSettingsAlertContentController setFocusedItem:]
  -[_SFSettingsAlertContentController observeValueForKeyPath:ofObject:change:context:]
  -[_SFSettingsAlertContentController _scrollToBottomIfNeeded]
  -[_SFSettingsAlertContentController setUsesReverseOrder:]
  -[_SFSettingsAlertContentController addDivider]
  -[_SFSettingsAlertContentController usesReverseOrder]
  -[_SFSettingsAlertContentController _updateSeparators]
  -[_SFSettingsAlertContentController _addGroupSeparatorIfNeededBeforeItemAtIndex:]
  -[_SFSettingsAlertContentController _addViewForItem:]
  -[_SFSettingsAlertContentController _panRecognized:]
  -[_SFSettingsAlertContentController _updateFocusedItemConstraints]
  -[_SFSettingsAlertContentController _createViewForItem:]
  -[_SFSettingsAlertContentController _alignButtonImageView:]
  -[_SFSettingsAlertContentController _tappedItemView:]
  -[_SFSettingsAlertContentController _stepperValueChanged:]
  -[_SFSettingsAlertContentController alertItemViewContentSizeDidChange:]


_SFWebProcessPlugInReaderEnabledPageController : _SFWebProcessPlugInAutoFillPageController <SFReaderWebProcessControllerProtocol>
 @property  _SFReaderWebProcessPlugInPageController *readerPageController
 @property  NSDictionary *initalArticleScrollPositionAsDictionary
 @property  long long cachedReaderTopScrollOffset
 @property  NSDictionary *initialReaderConfiguration
 @property  BOOL viewingReadingListArchive
 @property  BOOL readerHasBeenActivatedRecently
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderInitialTopScrollOffset:configuration:isViewingArchive:]
  -[_SFWebProcessPlugInReaderEnabledPageController didDetermineAdditionalTextSamples:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didSameDocumentNavigation:forFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController .cxx_construct]
  -[_SFWebProcessPlugInReaderEnabledPageController didFinishPresentationUpdateAfterTransitioningToReader]
  -[_SFWebProcessPlugInReaderEnabledPageController .cxx_destruct]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didFinishLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController didDetermineReaderAvailability:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:willInjectUserScriptForFrame:inScriptWorld:]
  -[_SFWebProcessPlugInReaderEnabledPageController didSetReaderConfiguration:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didFinishDocumentLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:]
  -[_SFWebProcessPlugInReaderEnabledPageController activateFont:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didCommitLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController checkReaderAvailability]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:renderingProgressDidChange:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController willDestroyBrowserContextController:]
  -[_SFWebProcessPlugInReaderEnabledPageController collectArticleContent]
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderIsActive:]
  -[_SFWebProcessPlugInReaderEnabledPageController initWithPlugIn:contextController:]
  -[_SFWebProcessPlugInReaderEnabledPageController setConfiguration:]
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderPageController:]
  -[_SFWebProcessPlugInReaderEnabledPageController originalArticleFinder]
  -[_SFWebProcessPlugInReaderEnabledPageController setArticleLocale:]
  -[_SFWebProcessPlugInReaderEnabledPageController prepareToTransitionToReader]
  -[_SFWebProcessPlugInReaderEnabledPageController didCreateReaderPageContextHandle:]
  -[_SFWebProcessPlugInReaderEnabledPageController loadNewReaderArticle]
  -[_SFWebProcessPlugInReaderEnabledPageController setInitalArticleScrollPositionAsDictionary:]
  -[_SFWebProcessPlugInReaderEnabledPageController collectReadingListItemInfoWithBookmarkID:]
  -[_SFWebProcessPlugInReaderEnabledPageController collectReaderContentForMail]
  -[_SFWebProcessPlugInReaderEnabledPageController prepareReaderContentForPrinting]
  -[_SFWebProcessPlugInReaderEnabledPageController initialReaderConfiguration]
  -[_SFWebProcessPlugInReaderEnabledPageController isViewingReadingListArchive]
  -[_SFWebProcessPlugInReaderEnabledPageController readerContentDidBecomeReadyWithArticleText:]
  -[_SFWebProcessPlugInReaderEnabledPageController initalArticleScrollPositionAsDictionary]
  -[_SFWebProcessPlugInReaderEnabledPageController cachedReaderTopScrollOffset]
  -[_SFWebProcessPlugInReaderEnabledPageController setCachedReaderTopScrollOffset:]
  -[_SFWebProcessPlugInReaderEnabledPageController articleContentDidChange]
  -[_SFWebProcessPlugInReaderEnabledPageController readerTextWasExtracted:withMetadata:wasDeterminingAvailability:]
  -[_SFWebProcessPlugInReaderEnabledPageController _setUpReaderControllerInterface]
  -[_SFWebProcessPlugInReaderEnabledPageController _clearReaderControllerInterface]
  -[_SFWebProcessPlugInReaderEnabledPageController _setUpReaderActivityListenerProxy]
  -[_SFWebProcessPlugInReaderEnabledPageController _detectReaderAvailabilityAfterSameDocumentNavigation]
  -[_SFWebProcessPlugInReaderEnabledPageController readerHasBeenActivatedRecently]
  -[_SFWebProcessPlugInReaderEnabledPageController _detectAvailabilityAfterDelay:loadEvent:]
  -[_SFWebProcessPlugInReaderEnabledPageController _searchForSmartAppBannerMetaContent]
  -[_SFWebProcessPlugInReaderEnabledPageController _appBannerMetaTagObserverProxy]
  -[_SFWebProcessPlugInReaderEnabledPageController _appBannerMetaElementInHeaderElement:]
  -[_SFWebProcessPlugInReaderEnabledPageController readerPageController]


_SFBrowserConfiguration : NSObject
 @property  BOOL privateBrowsingEnabled
 @property  <UITraitEnvironment> *traitEnvironment
 @property  BOOL controlledByAutomation
 @property  BOOL allowsKeyboardCorrectionLearning
 @property  BOOL allowsRestoringEducationTabs
 @property  BOOL allowsSearchSuggestions
 @property  BOOL allowsSiteSpecificSearch
 @property  BOOL allowsSpeculativeLoading
 @property  BOOL allowsStreamlinedLogin
 @property  BOOL allowsUserActivityFeedback
 @property  BOOL usesPersistentDataStore
 @property  BOOL allowsSearchFeedback
 @property  BOOL allowsClosingLastTab
 @property  BOOL allowsPersistingTabState
 @property  BOOL allowsReopeningClosedTabs
 @property  long long barTintStyle
 @property  BOOL usesDarkTheme

  // instance methods
  -[_SFBrowserConfiguration isControlledByAutomation]
  -[_SFBrowserConfiguration allowsSearchFeedback]
  -[_SFBrowserConfiguration .cxx_destruct]
  -[_SFBrowserConfiguration initWithPrivateBrowsingEnabled:traitEnvironment:controlledByAutomation:]
  -[_SFBrowserConfiguration isPrivateBrowsingEnabled]
  -[_SFBrowserConfiguration usesDarkTheme]
  -[_SFBrowserConfiguration allowsSearchSuggestions]
  -[_SFBrowserConfiguration isEqual:]
  -[_SFBrowserConfiguration usesPersistentDataStore]
  -[_SFBrowserConfiguration allowsSpeculativeLoading]
  -[_SFBrowserConfiguration allowsPersistingTabState]
  -[_SFBrowserConfiguration allowsStreamlinedLogin]
  -[_SFBrowserConfiguration allowsSiteSpecificSearch]
  -[_SFBrowserConfiguration allowsKeyboardCorrectionLearning]
  -[_SFBrowserConfiguration allowsReopeningClosedTabs]
  -[_SFBrowserConfiguration barTintStyle]
  -[_SFBrowserConfiguration allowsUserActivityFeedback]
  -[_SFBrowserConfiguration traitEnvironment]
  -[_SFBrowserConfiguration allowsClosingLastTab]
  -[_SFBrowserConfiguration allowsRestoringEducationTabs]


_SFFindOnPageInputBar : UISearchBar
  // instance methods
  -[_SFFindOnPageInputBar contentCompressionResistancePriorityForAxis:]
  -[_SFFindOnPageInputBar initWithFrame:]
  -[_SFFindOnPageInputBar contentHuggingPriorityForAxis:]
  -[_SFFindOnPageInputBar intrinsicContentSize]


_SFFindOnPageToolbar : UIInputView <UISearchBarDelegate>
 @property  UITextField *inputField
 @property  NSString *searchText
 @property  BOOL usesNarrowLayout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFFindOnPageToolbar usesNarrowLayout]
  -[_SFFindOnPageToolbar _done]
  -[_SFFindOnPageToolbar next:]
  -[_SFFindOnPageToolbar searchBarTextDidBeginEditing:]
  -[_SFFindOnPageToolbar .cxx_destruct]
  -[_SFFindOnPageToolbar layoutSubviews]
  -[_SFFindOnPageToolbar searchText]
  -[_SFFindOnPageToolbar dismiss:]
  -[_SFFindOnPageToolbar setSearchText:]
  -[_SFFindOnPageToolbar searchBarSearchButtonClicked:]
  -[_SFFindOnPageToolbar updateUI]
  -[_SFFindOnPageToolbar searchBarTextDidEndEditing:]
  -[_SFFindOnPageToolbar initWithDelegate:]
  -[_SFFindOnPageToolbar safeAreaInsetsDidChange]
  -[_SFFindOnPageToolbar inputField]
  -[_SFFindOnPageToolbar setUsesNarrowLayout:]
  -[_SFFindOnPageToolbar previous:]
  -[_SFFindOnPageToolbar leftContentViewSize]
  -[_SFFindOnPageToolbar _keyboardWillChangeFrame:]
  -[_SFFindOnPageToolbar rightContentViewSize]
  -[_SFFindOnPageToolbar searchBar:textDidChange:]
  -[_SFFindOnPageToolbar searchBarShouldBeginEditing:]
  -[_SFFindOnPageToolbar intrinsicContentSize]
  -[_SFFindOnPageToolbar _accessoryViewHeight]
  -[_SFFindOnPageToolbar _toolbarFrame]
  -[_SFFindOnPageToolbar _initializeToolbarItems]
  -[_SFFindOnPageToolbar _toolbarVerticalInset]
  -[_SFFindOnPageToolbar _matchLabelText]
  -[_SFFindOnPageToolbar _updateEditing:]
  -[_SFFindOnPageToolbar _doUpdateSearchText]
  -[_SFFindOnPageToolbar _keyboardIsSplit]


SFBarButtonItemLongPressGestureRecognizer : UILongPressGestureRecognizer <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBarButtonItemLongPressGestureRecognizer gestureRecognizerTarget:longPressAction:touchDownAction:attachedToBarButtonItem:]

  // instance methods
  -[SFBarButtonItemLongPressGestureRecognizer _contentSizeCategoryDidChange:]
  -[SFBarButtonItemLongPressGestureRecognizer .cxx_destruct]
  -[SFBarButtonItemLongPressGestureRecognizer _invokeLongPressAction]
  -[SFBarButtonItemLongPressGestureRecognizer _updateMinimumPressDurationForContentSizeCategory:]
  -[SFBarButtonItemLongPressGestureRecognizer touchesBegan:withEvent:]
  -[SFBarButtonItemLongPressGestureRecognizer gestureRecognizerShouldBegin:]
  -[SFBarButtonItemLongPressGestureRecognizer longPress:]


_SFPageFormatMenuController : NSObject <_SFPageFormatMenuItemControllerDelegate, _SFSettingsAlertControllerDelegate>
 @property  <_SFBrowserContentController> *browserContentController
 @property  UIViewController *viewController
 @property  _SFSettingsAlertItem *readerAlertItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPageFormatMenuController presentModalViewController:completion:]
  -[_SFPageFormatMenuController viewController]
  -[_SFPageFormatMenuController .cxx_destruct]
  -[_SFPageFormatMenuController _translationAvailabilityDidChange:]
  -[_SFPageFormatMenuController dismissMenu]
  -[_SFPageFormatMenuController viewControllerForPresentationForItemController:]
  -[_SFPageFormatMenuController alertController:didAddItem:]
  -[_SFPageFormatMenuController _readerAvailabilityDidChange:]
  -[_SFPageFormatMenuController menuForOrientation:sourceInfo:]
  -[_SFPageFormatMenuController _readerTextSizeAlertItem]
  -[_SFPageFormatMenuController _pageZoomAlertItem]
  -[_SFPageFormatMenuController _readerAlertItem]
  -[_SFPageFormatMenuController _mediaStateAlertItem]
  -[_SFPageFormatMenuController _downloadsAlertItem]
  -[_SFPageFormatMenuController _buildTranslationAlertItemsWithSourceInfo:]
  -[_SFPageFormatMenuController _readerFontAlertItem]
  -[_SFPageFormatMenuController _readerThemeAlertItem]
  -[_SFPageFormatMenuController _canHideToolbar]
  -[_SFPageFormatMenuController _fullScreenAlertItem]
  -[_SFPageFormatMenuController _desktopMobileToggleAlertItemWithOrientation:]
  -[_SFPageFormatMenuController _canToggleContentBlockers]
  -[_SFPageFormatMenuController _contentBlockersToggleAlertItem]
  -[_SFPageFormatMenuController _sitePreferencesAlertItem]
  -[_SFPageFormatMenuController _manageWebExtensionsAlertItem]
  -[_SFPageFormatMenuController _canShowChangeSearchFieldPosition]
  -[_SFPageFormatMenuController _changeSearchFieldPositionAlertItem]
  -[_SFPageFormatMenuController browserContentController]
  -[_SFPageFormatMenuController _anchorInWindowCoordinatesForAlert:]
  -[_SFPageFormatMenuController _userFeedbackTranslationAlertItem]
  -[_SFPageFormatMenuController _hasStartedTranslation]
  -[_SFPageFormatMenuController _exitTranslationAlertItem]
  -[_SFPageFormatMenuController _internalTapToRadarTranslationAlertItem]
  -[_SFPageFormatMenuController _translateAlertItemForLocaleIdentifier:]
  -[_SFPageFormatMenuController initWithBrowserContentController:]
  -[_SFPageFormatMenuController presentMenuFromViewController:withSourceInfo:]
  -[_SFPageFormatMenuController readerAlertItem]


_SFActivityItemCustomizationController : NSObject <UIActivityViewControllerObjectManipulationDelegate>
 @property  <_SFActivityItemCustomizationDelegate> *delegate
 @property  long long selectedContentType
 @property  BOOL canShareAsLink
 @property  BOOL canPrint
 @property  BOOL canShareAsDownload
 @property  BOOL canShareAsWebArchive
 @property  BOOL canShareAsStandaloneImage
 @property  BOOL canShareAsPDF
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFActivityItemCustomizationController _allowedContentTypes]
  -[_SFActivityItemCustomizationController .cxx_destruct]
  -[_SFActivityItemCustomizationController setDelegate:]
  -[_SFActivityItemCustomizationController init]
  -[_SFActivityItemCustomizationController _customizationGroupsForActivityViewController:]
  -[_SFActivityItemCustomizationController _selectedIndex]
  -[_SFActivityItemCustomizationController delegate]
  -[_SFActivityItemCustomizationController canPrint]
  -[_SFActivityItemCustomizationController canShareAsLink]
  -[_SFActivityItemCustomizationController canShareAsStandaloneImage]
  -[_SFActivityItemCustomizationController canShareAsPDF]
  -[_SFActivityItemCustomizationController canShareAsDownload]
  -[_SFActivityItemCustomizationController canShareAsWebArchive]
  -[_SFActivityItemCustomizationController selectedContentType]
  -[_SFActivityItemCustomizationController _contentTypeForAllowedContentAtIndex:]
  -[_SFActivityItemCustomizationController _customizationsDidChange]
  -[_SFActivityItemCustomizationController _ensureSelectedContentTypeIsAllowed]


_SFPrintActivityItemProvider : _SFActivityItemProvider <UIActivityItemsSource>
 @property  _SFPrintController *printController
 @property  BOOL hasReservedPrintInteractionController
 @property  BOOL canVendPDFRepresentation
 @property  NSItemProvider *pdfItemProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPrintActivityItemProvider activityViewController:itemsForActivityType:]
  -[_SFPrintActivityItemProvider .cxx_destruct]
  -[_SFPrintActivityItemProvider printController]
  -[_SFPrintActivityItemProvider item]
  -[_SFPrintActivityItemProvider activityViewControllerLinkMetadata:]
  -[_SFPrintActivityItemProvider activityViewControllerPlaceholderItems:]
  -[_SFPrintActivityItemProvider setCanVendPDFRepresentation:]
  -[_SFPrintActivityItemProvider pdfItemProvider]
  -[_SFPrintActivityItemProvider initWithPrintController:webView:]
  -[_SFPrintActivityItemProvider hasReservedPrintInteractionController]
  -[_SFPrintActivityItemProvider canVendPDFRepresentation]


_SFReaderExtractor : NSObject <WKNavigationDelegate, _SFReaderControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReaderExtractor webView:didFinishNavigation:]
  -[_SFReaderExtractor _configuration]
  -[_SFReaderExtractor webView:didFailProvisionalNavigation:withError:]
  -[_SFReaderExtractor _processPool]
  -[_SFReaderExtractor .cxx_destruct]
  -[_SFReaderExtractor init]
  -[_SFReaderExtractor _invalidateTimers]
  -[_SFReaderExtractor webView:didFailNavigation:withError:]
  -[_SFReaderExtractor webView:decidePolicyForNavigationResponse:decisionHandler:]
  -[_SFReaderExtractor webViewWebContentProcessDidTerminate:]
  -[_SFReaderExtractor readerController:didCollectArticleContent:]
  -[_SFReaderExtractor _setUpReaderController]
  -[_SFReaderExtractor _finishWithContent:error:]
  -[_SFReaderExtractor _scheduleLoadingTimeout]
  -[_SFReaderExtractor _scheduleReaderDataExtractionTimeout]
  -[_SFReaderExtractor getExtractedDataForURL:withCompletion:]
  -[_SFReaderExtractor getExtractedDataForURL:withData:withCompletion:]


_SFNavigationIntent : NSObject
 @property  long long policy
 @property  BOOL shouldRelateToSourceTab
 @property  BOOL neverPromptWhenOpeningMultipleIntents
 @property  unsigned long type
 @property  WebBookmark *bookmark
 @property  WBSCloudTab *cloudTab
 @property  _SFTabStateData *recentlyClosedTabStateData
 @property  SLHighlight *highlight
 @property  NSURL *URL
 @property  NSString *text
 @property  NSArray *navigationIntents
 @property  BOOL opensInNewTab
 @property  BOOL opensInNewWindow
 @property  BOOL canUseExistingBlankTab
 @property  BOOL shouldOrderToForeground
 @property  BOOL shouldPromptBeforeHandling
 @property  NSDictionary *externalOptions
 @property  UIEventAttribution *eventAttribution
 @property  long long provenance
 @property  BOOL shouldDismissSidebarOnLoad
 @property  NSUUID *sourceTabUUID
 @property  NSUUID *sourceWindowUUID
 @property  _WKActivatedElementInfo *sourceElementInfo
 @property  NSString *privacyPreservingDescription
 @property  BOOL externalURLSourceApplicationIsSpotlight

  // class methods
  +[_SFNavigationIntent defaultTabOrder]

  // instance methods
  -[_SFNavigationIntent bookmark]
  -[_SFNavigationIntent highlight]
  -[_SFNavigationIntent .cxx_destruct]
  -[_SFNavigationIntent setPolicy:]
  -[_SFNavigationIntent policy]
  -[_SFNavigationIntent eventAttribution]
  -[_SFNavigationIntent URL]
  -[_SFNavigationIntent provenance]
  -[_SFNavigationIntent type]
  -[_SFNavigationIntent cloudTab]
  -[_SFNavigationIntent setHighlight:]
  -[_SFNavigationIntent text]
  -[_SFNavigationIntent privacyPreservingDescription]
  -[_SFNavigationIntent setNeverPromptWhenOpeningMultipleIntents:]
  -[_SFNavigationIntent setProvenance:]
  -[_SFNavigationIntent shouldRelateToSourceTab]
  -[_SFNavigationIntent recentlyClosedTabStateData]
  -[_SFNavigationIntent navigationIntents]
  -[_SFNavigationIntent canUseExistingBlankTab]
  -[_SFNavigationIntent opensInNewWindow]
  -[_SFNavigationIntent opensInNewTab]
  -[_SFNavigationIntent _initWithType:value:policy:]
  -[_SFNavigationIntent externalOptions]
  -[_SFNavigationIntent shouldOrderToForeground]
  -[_SFNavigationIntent externalURLSourceApplicationIsSpotlight]
  -[_SFNavigationIntent shouldPromptBeforeHandling]
  -[_SFNavigationIntent shouldDismissSidebarOnLoad]
  -[_SFNavigationIntent setShouldDismissSidebarOnLoad:]
  -[_SFNavigationIntent sourceTabUUID]
  -[_SFNavigationIntent setSourceTabUUID:]
  -[_SFNavigationIntent sourceWindowUUID]
  -[_SFNavigationIntent setSourceWindowUUID:]
  -[_SFNavigationIntent sourceElementInfo]
  -[_SFNavigationIntent setSourceElementInfo:]
  -[_SFNavigationIntent setShouldRelateToSourceTab:]
  -[_SFNavigationIntent neverPromptWhenOpeningMultipleIntents]


_SFSharablePasswordReceiver : NSObject
  // class methods
  +[_SFSharablePasswordReceiver openPasswordManagerURL:]


SFVibrantCellSelectionBackgroundView : UIVisualEffectView
  // instance methods
  -[SFVibrantCellSelectionBackgroundView traitCollectionDidChange:]
  -[SFVibrantCellSelectionBackgroundView initWithFrame:]
  -[SFVibrantCellSelectionBackgroundView _selectionEffect]


_SFPasswordAuditingViewController : _SFAccountTableViewController <SFPasswordBreachToggleCellDelegate, SFActionableSecurityRecommendationDataDelegate, SFAccountDetailViewControllerDelegate, _SFTableViewDiffableDataSourceDelegate, _ASAccountAuthenticationModificationExtensionManagerObserver, ASAccountAuthenticationModificationControllerDelegate, ASAccountAuthenticationModificationControllerPresentationContextProviding, _SFTableLinkableFooterViewDelegate, PSStateRestoration>
 @property  <_SFPasswordAuditingViewControllerDelegate> *delegate
 @property  WBSSavedAccount *savedAccountToRemoveAfterCompletedUpgradeInDetailView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFPasswordAuditingViewController securityRecommendationsViewControllerWithSiteMetadataManager:autoFillQuirksManager:passwordWarningManager:]
  +[_SFPasswordAuditingViewController hiddenSecurityRecommendationsViewControllerWithWarningData:siteMetadataManager:passwordWarningManager:]

  // instance methods
  -[_SFPasswordAuditingViewController traitCollectionDidChange:]
  -[_SFPasswordAuditingViewController .cxx_destruct]
  -[_SFPasswordAuditingViewController tableView:didSelectRowAtIndexPath:]
  -[_SFPasswordAuditingViewController viewDidLoad]
  -[_SFPasswordAuditingViewController setDelegate:]
  -[_SFPasswordAuditingViewController viewDidAppear:]
  -[_SFPasswordAuditingViewController tableView:viewForFooterInSection:]
  -[_SFPasswordAuditingViewController canBeShownFromSuspendedState]
  -[_SFPasswordAuditingViewController viewWillAppear:]
  -[_SFPasswordAuditingViewController delegate]
  -[_SFPasswordAuditingViewController tableView:heightForFooterInSection:]
  -[_SFPasswordAuditingViewController tableView:editingStyleForRowAtIndexPath:]
  -[_SFPasswordAuditingViewController tableView:contextMenuConfigurationForRowAtIndexPath:point:]
  -[_SFPasswordAuditingViewController viewDidDisappear:]
  -[_SFPasswordAuditingViewController _passwordGenerationManager]
  -[_SFPasswordAuditingViewController passwordWarningManagerForAccountDetailViewController:]
  -[_SFPasswordAuditingViewController passwordGeneratorForAccountDetailViewController:]
  -[_SFPasswordAuditingViewController accountDetailViewController:didHideWarning:]
  -[_SFPasswordAuditingViewController savedAccountToRemoveAfterCompletedUpgradeInDetailView]
  -[_SFPasswordAuditingViewController setSavedAccountToRemoveAfterCompletedUpgradeInDetailView:]
  -[_SFPasswordAuditingViewController dataSource:headerTextForSection:]
  -[_SFPasswordAuditingViewController accountModificationExtensionManagerExtensionListDidChange:]
  -[_SFPasswordAuditingViewController _accountStoreDidUpdate]
  -[_SFPasswordAuditingViewController _cellForIdentifier:indexPath:]
  -[_SFPasswordAuditingViewController _completedSignInWithAppleUpgrade]
  -[_SFPasswordAuditingViewController _completedStrongPasswordUpgrade]
  -[_SFPasswordAuditingViewController accountAuthenticationModificationController:didSuccessfullyCompleteRequest:withUserInfo:]
  -[_SFPasswordAuditingViewController accountAuthenticationModificationController:didFailRequest:withError:]
  -[_SFPasswordAuditingViewController presentationAnchorForAccountAuthenticationModificationController:]
  -[_SFPasswordAuditingViewController didSetPasswordBreachDetectionState:]
  -[_SFPasswordAuditingViewController linkableFooterViewDidInteractWithLink:]
  -[_SFPasswordAuditingViewController initWithPersona:siteMetadataManager:autoFillQuirksManager:passwordWarningManager:]
  -[_SFPasswordAuditingViewController _reloadTableViewDiffableDataSource]
  -[_SFPasswordAuditingViewController _findAndRemoveEntryForSavedAccount:]
  -[_SFPasswordAuditingViewController _addWarningToHiddenRecommendationData:]
  -[_SFPasswordAuditingViewController _addHiddenSecurityRecommendationsSectionIfNecessary]
  -[_SFPasswordAuditingViewController _reloadSavedAccountsForceUpdate:]
  -[_SFPasswordAuditingViewController _removeHideWarningMarkerForSavedAccount:]
  -[_SFPasswordAuditingViewController _hiddenSecurityRecommendationsCell]
  -[_SFPasswordAuditingViewController _configureSecurityRecommendationInformationCell:withActionableRecommendationData:]
  -[_SFPasswordAuditingViewController _standardRecommendationCellWithPasswordCellData:]
  -[_SFPasswordAuditingViewController _passwordBreachToggleCell]
  -[_SFPasswordAuditingViewController _resetHiddenSecurityRecommendationsCell]
  -[_SFPasswordAuditingViewController _reloadTableViewDiffableDataSourceOnInternalQueue]
  -[_SFPasswordAuditingViewController _reloadTableViewDiffableDataSourceOnInternalQueueForSecurityRecommendationsPersona]
  -[_SFPasswordAuditingViewController _reloadTableViewDiffableDataSourceOnInternalQueueForHiddenSecurityRecommendationsPersona]
  -[_SFPasswordAuditingViewController _resetHiddenSecurityRecommendations]
  -[_SFPasswordAuditingViewController _changePasswordOnWebsiteForActionableSecurityRecommendation:]
  -[_SFPasswordAuditingViewController _initiateChangeToStrongPasswordForActionableSecurityRecommendation:]
  -[_SFPasswordAuditingViewController _upgradeToSignInWithAppleForActionableSecurityRecommendation:]
  -[_SFPasswordAuditingViewController _removeAddressedActionableRecommendation:]
  -[_SFPasswordAuditingViewController _passwordBreachFooterView]
  -[_SFPasswordAuditingViewController _removeHideMarkerForWarning:]
  -[_SFPasswordAuditingViewController _warningStringForPasswordCellData:]
  -[_SFPasswordAuditingViewController _passwordBreachFooterTextForDeviceClass:]
  -[_SFPasswordAuditingViewController actionableSecurityRecommendationDataDidUpdate:]


SFWebProcessPlugInCertificateWarningController : NSObject <WBSCertificateWarningPagePresenter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFWebProcessPlugInCertificateWarningController certificateWarningPageLoaded]
  -[SFWebProcessPlugInCertificateWarningController visitInsecureWebsiteWithTemporaryBypass]
  -[SFWebProcessPlugInCertificateWarningController _certificateWarningPageHandlerProxy]
  -[SFWebProcessPlugInCertificateWarningController .cxx_destruct]
  -[SFWebProcessPlugInCertificateWarningController prepareCertificateWarningPage:]
  -[SFWebProcessPlugInCertificateWarningController showCertificateInformation]
  -[SFWebProcessPlugInCertificateWarningController injectCertificateWarningBindingsForFrame:inScriptWorld:]
  -[SFWebProcessPlugInCertificateWarningController initWithPageController:]
  -[SFWebProcessPlugInCertificateWarningController _setUpCertificateWarningPagePresenterInterface]
  -[SFWebProcessPlugInCertificateWarningController openClockSettings]
  -[SFWebProcessPlugInCertificateWarningController dealloc]
  -[SFWebProcessPlugInCertificateWarningController _clearCertificateWarningPagePresenterInterface]
  -[SFWebProcessPlugInCertificateWarningController goBackSelected]
  -[SFWebProcessPlugInCertificateWarningController visitInsecureWebsite]


SFCertificateWarningJSController : NSObject <SFCertificateWarningJSControllerMethods>
  // instance methods
  -[SFCertificateWarningJSController visitInsecureWebsiteWithTemporaryBypass]
  -[SFCertificateWarningJSController .cxx_destruct]
  -[SFCertificateWarningJSController showCertificateInformation]
  -[SFCertificateWarningJSController openClockSettings]
  -[SFCertificateWarningJSController goBackSelected]
  -[SFCertificateWarningJSController visitInsecureWebsite]
  -[SFCertificateWarningJSController initWithCertificateWarningController:]
  -[SFCertificateWarningJSController pageLoaded]


_SFSettingsAlertItemBackgroundView : UIView
 @property  long long mode

  // instance methods
  -[_SFSettingsAlertItemBackgroundView updateConstraints]
  -[_SFSettingsAlertItemBackgroundView .cxx_destruct]
  -[_SFSettingsAlertItemBackgroundView initWithFrame:]
  -[_SFSettingsAlertItemBackgroundView setMode:]
  -[_SFSettingsAlertItemBackgroundView mode]
  -[_SFSettingsAlertItemBackgroundView _highlightEffect]


_SFSettingsAlertControl : UIControl <SFSettingsAlertItemView>
 @property  _SFSettingsAlertItem *item
 @property  BOOL hidesSeparator
 @property  _SFSettingsAlertItemBackgroundView *backgroundView
 @property  long long defaultBackgroundMode
 @property  long long backgroundMode
 @property  <SFSettingsAlertItemViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertControl setHighlighted:]
  -[_SFSettingsAlertControl setItem:]
  -[_SFSettingsAlertControl .cxx_destruct]
  -[_SFSettingsAlertControl setDelegate:]
  -[_SFSettingsAlertControl item]
  -[_SFSettingsAlertControl initWithFrame:]
  -[_SFSettingsAlertControl delegate]
  -[_SFSettingsAlertControl _updateBackgroundView]
  -[_SFSettingsAlertControl backgroundMode]
  -[_SFSettingsAlertControl backgroundView]
  -[_SFSettingsAlertControl hidesSeparator]
  -[_SFSettingsAlertControl setDefaultBackgroundMode:]
  -[_SFSettingsAlertControl setHidesSeparator:]
  -[_SFSettingsAlertControl defaultBackgroundMode]


_SFSettingsAlertButton : _SFSettingsAlertControl <_SFSettingsAlertOptionsGroupItemConfiguration>
 @property  UILabel *textLabel
 @property  NSString *text
 @property  NSAttributedString *attributedText
 @property  NSString *detailText
 @property  NSString *textStyle
 @property  UIImage *image
 @property  UIImageView *imageView
 @property  UIView *accessoryView
 @property  UIImageView *statusImageView
 @property  UIView *trailingView
 @property  NSArray *componentsArrangement
 @property  BOOL limitToSingleLine
 @property  BOOL showsIndicatorDot
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertButton setAttributedText:]
  -[_SFSettingsAlertButton trailingView]
  -[_SFSettingsAlertButton hitTest:withEvent:]
  -[_SFSettingsAlertButton textStyle]
  -[_SFSettingsAlertButton attributedText]
  -[_SFSettingsAlertButton imageView]
  -[_SFSettingsAlertButton setText:]
  -[_SFSettingsAlertButton traitCollectionDidChange:]
  -[_SFSettingsAlertButton detailText]
  -[_SFSettingsAlertButton image]
  -[_SFSettingsAlertButton updateConstraints]
  -[_SFSettingsAlertButton .cxx_destruct]
  -[_SFSettingsAlertButton layoutSubviews]
  -[_SFSettingsAlertButton _updateTintColor]
  -[_SFSettingsAlertButton setDetailText:]
  -[_SFSettingsAlertButton statusImageView]
  -[_SFSettingsAlertButton setTextStyle:]
  -[_SFSettingsAlertButton setAccessoryView:]
  -[_SFSettingsAlertButton initWithFrame:]
  -[_SFSettingsAlertButton setImage:]
  -[_SFSettingsAlertButton canBecomeFocused]
  -[_SFSettingsAlertButton textLabel]
  -[_SFSettingsAlertButton endTrackingWithTouch:withEvent:]
  -[_SFSettingsAlertButton accessoryView]
  -[_SFSettingsAlertButton setEnabled:]
  -[_SFSettingsAlertButton text]
  -[_SFSettingsAlertButton pressesBegan:withEvent:]
  -[_SFSettingsAlertButton _hover:]
  -[_SFSettingsAlertButton didUpdateFocusInContext:withAnimationCoordinator:]
  -[_SFSettingsAlertButton _arrangedSubviews]
  -[_SFSettingsAlertButton setStatusImageView:]
  -[_SFSettingsAlertButton setComponentsArrangement:]
  -[_SFSettingsAlertButton componentsArrangement]
  -[_SFSettingsAlertButton showsIndicatorDot]
  -[_SFSettingsAlertButton setShowsIndicatorDot:]
  -[_SFSettingsAlertButton setLimitToSingleLine:]
  -[_SFSettingsAlertButton _didChangeContents]
  -[_SFSettingsAlertButton limitToSingleLine]


_SFSettingsAlertStepper : _SFSettingsAlertControl <_SFSettingsAlertStepperConfiguration>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertStepper hitTest:withEvent:]
  -[_SFSettingsAlertStepper .cxx_destruct]
  -[_SFSettingsAlertStepper initWithFrame:]
  -[_SFSettingsAlertStepper value]
  -[_SFSettingsAlertStepper _button:]
  -[_SFSettingsAlertStepper setImage:forButton:]
  -[_SFSettingsAlertStepper setText:forButton:]
  -[_SFSettingsAlertStepper setEnabled:forButton:]
  -[_SFSettingsAlertStepper initUsingResetButton:usingTopSeparator:]
  -[_SFSettingsAlertStepper _decrementTapped:]
  -[_SFSettingsAlertStepper _incrementTapped:]
  -[_SFSettingsAlertStepper _resetTapped:]


_SFSettingsAlertCustomViewContainer : UIView <SFSettingsAlertItemView>
 @property  UIView *contentView
 @property  _SFSettingsAlertItem *item
 @property  BOOL hidesSeparator
 @property  long long defaultBackgroundMode
 @property  long long backgroundMode
 @property  <SFSettingsAlertItemViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertCustomViewContainer setItem:]
  -[_SFSettingsAlertCustomViewContainer initWithContentView:]
  -[_SFSettingsAlertCustomViewContainer .cxx_destruct]
  -[_SFSettingsAlertCustomViewContainer contentView]
  -[_SFSettingsAlertCustomViewContainer setDelegate:]
  -[_SFSettingsAlertCustomViewContainer item]
  -[_SFSettingsAlertCustomViewContainer delegate]
  -[_SFSettingsAlertCustomViewContainer backgroundMode]
  -[_SFSettingsAlertCustomViewContainer hidesSeparator]
  -[_SFSettingsAlertCustomViewContainer setDefaultBackgroundMode:]
  -[_SFSettingsAlertCustomViewContainer setHidesSeparator:]
  -[_SFSettingsAlertCustomViewContainer defaultBackgroundMode]


_SFOptionsGroupDetailLabel : UILabel
  // instance methods
  -[_SFOptionsGroupDetailLabel setAttributedText:]
  -[_SFOptionsGroupDetailLabel traitCollectionDidChange:]
  -[_SFOptionsGroupDetailLabel layoutSubviews]


_SFNavigationIntentBuilder : NSObject
 @property  long long modifierFlags
 @property  long long navigationType
 @property  long long preferredTabOrder
 @property  BOOL prefersOpenInNewTab
 @property  BOOL prefersOpenInNewWindow
 @property  BOOL prefersRelationToSourceTab
 @property  unsigned long neverPromptWhenOpeningMultipleIntents

  // class methods
  +[_SFNavigationIntentBuilder builder]
  +[_SFNavigationIntentBuilder canCreateNavigationIntentForDropSession:]
  +[_SFNavigationIntentBuilder builderWithModifierFlags:]
  +[_SFNavigationIntentBuilder registerBookmarkCollectionFactory:]

  // instance methods
  -[_SFNavigationIntentBuilder modifierFlags]
  -[_SFNavigationIntentBuilder setNavigationType:]
  -[_SFNavigationIntentBuilder navigationType]
  -[_SFNavigationIntentBuilder setPreferredTabOrder:]
  -[_SFNavigationIntentBuilder setNeverPromptWhenOpeningMultipleIntents:]
  -[_SFNavigationIntentBuilder setPrefersOpenInNewTab:]
  -[_SFNavigationIntentBuilder navigationIntentWithBookmark:]
  -[_SFNavigationIntentBuilder navigationIntentWithText:]
  -[_SFNavigationIntentBuilder buildNavigationIntentForDropSession:completionHandler:]
  -[_SFNavigationIntentBuilder setPrefersOpenInNewWindow:]
  -[_SFNavigationIntentBuilder navigationIntentWithURL:]
  -[_SFNavigationIntentBuilder neverPromptWhenOpeningMultipleIntents]
  -[_SFNavigationIntentBuilder _initWithModifierFlags:]
  -[_SFNavigationIntentBuilder _navigationPolicy]
  -[_SFNavigationIntentBuilder _initializeNavigationIntentWithType:value:]
  -[_SFNavigationIntentBuilder navigationIntentWithMultipleIntents:]
  -[_SFNavigationIntentBuilder _navigationIntentWithItems:]
  -[_SFNavigationIntentBuilder _navigationIntentForMKMapItem:]
  -[_SFNavigationIntentBuilder navigationIntentWithRecentlyClosedTabStateData:]
  -[_SFNavigationIntentBuilder _navigationPolicyForStandardEvent]
  -[_SFNavigationIntentBuilder _navigationPolicyForNavigationEvent]
  -[_SFNavigationIntentBuilder _hasModifierFlag:]
  -[_SFNavigationIntentBuilder _modifiersEqualToModifierIgnoringCapsLock:]
  -[_SFNavigationIntentBuilder _navigationPolicyForCreatingNewTabOrWindow]
  -[_SFNavigationIntentBuilder _shouldOrderToForeground]
  -[_SFNavigationIntentBuilder navigationIntentWithCloudTab:]
  -[_SFNavigationIntentBuilder navigationIntentWithHistoryURL:]
  -[_SFNavigationIntentBuilder navigationIntentWithSearchText:]
  -[_SFNavigationIntentBuilder navigationIntentWithHighlight:]
  -[_SFNavigationIntentBuilder navigationIntentWithOpenURLContexts:]
  -[_SFNavigationIntentBuilder buildNavigationIntentForItemProviders:completionHandler:]
  -[_SFNavigationIntentBuilder preferredTabOrder]
  -[_SFNavigationIntentBuilder prefersOpenInNewTab]
  -[_SFNavigationIntentBuilder prefersOpenInNewWindow]
  -[_SFNavigationIntentBuilder prefersRelationToSourceTab]
  -[_SFNavigationIntentBuilder setPrefersRelationToSourceTab:]


SFSafariView : UIView
  // instance methods
  -[SFSafariView setTintColor:]
  -[SFSafariView didMoveToWindow]


SFSafariViewController : UIViewController <SFBrowserRemoteViewControllerDelegate, SFInteractiveDismissControllerDelegate, SFQueueingServiceViewControllerProxyDelegate, _SFLinkPreviewHeaderDelegate, _UIRemoteViewControllerContaining>
 @property  BOOL _showingLinkPreview
 @property  BOOL _showingLinkPreviewWithMinimalUI
 @property  NSArray *_previewActions
 @property  _WKActivatedElementInfo *_activatedElementInfo
 @property  SFQueueingServiceViewControllerProxy<SFServiceViewControllerProtocol> *serviceProxy
 @property  NSURL *initialURL
 @property  BOOL defersAddingRemoteViewController
 @property  <SFSafariViewControllerDelegate> *delegate
 @property  SFSafariViewControllerConfiguration *configuration
 @property  UIColor *preferredBarTintColor
 @property  UIColor *preferredControlTintColor
 @property  long long dismissButtonStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UIRemoteViewController *_containedRemoteViewController

  // class methods
  +[SFSafariViewController _preventsAppearanceProxyCustomization]
  +[SFSafariViewController _supportsPrewarming]
  +[SFSafariViewController prewarmConnectionsToURLs:]

  // instance methods
  -[SFSafariViewController _boundingPathMayHaveChangedForView:relativeToBoundsOriginOnly:]
  -[SFSafariViewController preferredBarTintColor]
  -[SFSafariViewController initWithCoder:]
  -[SFSafariViewController viewWillLayoutSubviews]
  -[SFSafariViewController traitCollectionDidChange:]
  -[SFSafariViewController childViewControllerForStatusBarStyle]
  -[SFSafariViewController configuration]
  -[SFSafariViewController .cxx_destruct]
  -[SFSafariViewController _addRemoteView]
  -[SFSafariViewController setDelegate:]
  -[SFSafariViewController initWithNibName:bundle:]
  -[SFSafariViewController preferredControlTintColor]
  -[SFSafariViewController _allowsUserInteractionWhenPreviewedInContextMenu]
  -[SFSafariViewController previewActionItems]
  -[SFSafariViewController viewWillDisappear:]
  -[SFSafariViewController setModalPresentationStyle:]
  -[SFSafariViewController setPreferredControlTintColor:]
  -[SFSafariViewController viewWillAppear:]
  -[SFSafariViewController setTransitioningDelegate:]
  -[SFSafariViewController delegate]
  -[SFSafariViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SFSafariViewController serviceProxy]
  -[SFSafariViewController _connectToService]
  -[SFSafariViewController initialURL]
  -[SFSafariViewController _containedRemoteViewController]
  -[SFSafariViewController dealloc]
  -[SFSafariViewController loadView]
  -[SFSafariViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SFSafariViewController _activatedElementInfo]
  -[SFSafariViewController initWithURL:]
  -[SFSafariViewController initWithURL:configuration:]
  -[SFSafariViewController _setActivatedElementInfo:]
  -[SFSafariViewController setDismissButtonStyle:]
  -[SFSafariViewController remoteViewControllerWillDismiss:]
  -[SFSafariViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[SFSafariViewController linkPreviewHeader:didEnableLinkPreview:]
  -[SFSafariViewController setDefersAddingRemoteViewController:]
  -[SFSafariViewController defersAddingRemoteViewController]
  -[SFSafariViewController _addRemoteViewControllerIfNeeded]
  -[SFSafariViewController dismissButtonStyle]
  -[SFSafariViewController _restartServiceViewController]
  -[SFSafariViewController remoteViewController:hostApplicationOpenURL:]
  -[SFSafariViewController setPreferredBarTintColor:]
  -[SFSafariViewController serviceProxyWillQueueInvocation:]
  -[SFSafariViewController remoteViewController:didFinishInitialLoad:]
  -[SFSafariViewController remoteViewControllerDidLoadWebView:]
  -[SFSafariViewController remoteViewController:fetchActivityViewControllerInfoForURL:title:]
  -[SFSafariViewController remoteViewController:executeCustomActivityProxyID:]
  -[SFSafariViewController remoteViewController:setSwipeGestureEnabled:]
  -[SFSafariViewController remoteViewController:initialLoadDidRedirectToURL:]
  -[SFSafariViewController remoteViewController:didDecideShouldShowLinkPreviews:]
  -[SFSafariViewController remoteViewControllerWillOpenCurrentPageInBrowser:]
  -[SFSafariViewController _setUpWithURL:configuration:]
  -[SFSafariViewController _didLoadRemoteViewController:]
  -[SFSafariViewController _addLaunchPlaceholderView]
  -[SFSafariViewController _showingLinkPreview]
  -[SFSafariViewController _showingLinkPreviewWithMinimalUI]
  -[SFSafariViewController _updateScrollViewIndicatorInsets]
  -[SFSafariViewController _forwardNotificationToViewService:]
  -[SFSafariViewController _setShowingLinkPreview:]
  -[SFSafariViewController _updatePreviewViewControllerWithLinkPreviewEnabled:animated:]
  -[SFSafariViewController _removeLaunchPlaceholderView]
  -[SFSafariViewController _removeRemoteViewController]
  -[SFSafariViewController _fetchCustomActivitiesForURL:title:]
  -[SFSafariViewController _fetchExcludedActivityTypesForURL:title:]
  -[SFSafariViewController _setEdgeSwipeDismissalEnabled:]
  -[SFSafariViewController interactiveDismissControllerDidBegin:]
  -[SFSafariViewController interactiveDismissControllerDidEnd:]
  -[SFSafariViewController interactiveDismissControllerDidCancel:]
  -[SFSafariViewController initWithURL:entersReaderIfAvailable:]
  -[SFSafariViewController _previewActions]
  -[SFSafariViewController _updateLinkPreviewHitTestView]
  -[SFSafariViewController _defaultPreviewActionItems]
  -[SFSafariViewController _setShowingLinkPreviewWithMinimalUI:]
  -[SFSafariViewController _setPreviewActions:]


_SFRequestDesktopSiteQuirksSnapshot : NSObject <WBSRemotePlistSnapshot>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFRequestDesktopSiteQuirksSnapshot initWithPlistData:error:]
  -[_SFRequestDesktopSiteQuirksSnapshot .cxx_destruct]
  -[_SFRequestDesktopSiteQuirksSnapshot plistDataWithFormat:]
  -[_SFRequestDesktopSiteQuirksSnapshot requestDesktopSiteSettingForDomain:]
  -[_SFRequestDesktopSiteQuirksSnapshot allRequestDesktopSiteQuirks]


SFNanoDomainContainerView : UIView
 @property  double maximumHeight
 @property  _SFBrowserView *browserView
 @property  @? platterTapAction

  // class methods
  +[SFNanoDomainContainerView defaultHeight]
  +[SFNanoDomainContainerView defaultTopOffset]
  +[SFNanoDomainContainerView defaultHeightInsideQuickboard]

  // instance methods
  -[SFNanoDomainContainerView .cxx_destruct]
  -[SFNanoDomainContainerView maximumHeight]
  -[SFNanoDomainContainerView setMaximumHeight:]
  -[SFNanoDomainContainerView setBrowserView:]
  -[SFNanoDomainContainerView browserView]
  -[SFNanoDomainContainerView updateWithDomain:isSecure:showsNotSecureAnotation:]
  -[SFNanoDomainContainerView platterTapAction]
  -[SFNanoDomainContainerView setPlatterTapAction:]


SFProcessDictionary : NSObject
 @property  unsigned long cacheCapacity

  // instance methods
  -[SFProcessDictionary .cxx_destruct]
  -[SFProcessDictionary init]
  -[SFProcessDictionary dealloc]
  -[SFProcessDictionary _handleApplicationStateUpdate:]
  -[SFProcessDictionary decrementReferenceForPID:]
  -[SFProcessDictionary incrementReferenceForPID:bundleIdentifier:valueCreationBlock:]
  -[SFProcessDictionary initWithCacheCapacity:]
  -[SFProcessDictionary _handleProcessTermination:]
  -[SFProcessDictionary _removeValueForPID:]
  -[SFProcessDictionary _updateInterestedApplications]
  -[SFProcessDictionary _removeUnreferencedObjectsIfNeeded]
  -[SFProcessDictionary cacheCapacity]


_SFNavigationUtilitiesManager : NSObject
 @property  _SFReloadOptionsController *reloadOptionsController
 @property  long long persona

  // class methods
  +[_SFNavigationUtilitiesManager _sharedUserAgentQuirksManager]

  // instance methods
  -[_SFNavigationUtilitiesManager setReloadOptionsController:]
  -[_SFNavigationUtilitiesManager .cxx_destruct]
  -[_SFNavigationUtilitiesManager initWithPerSitePreferencesVendor:]
  -[_SFNavigationUtilitiesManager setPersona:]
  -[_SFNavigationUtilitiesManager reloadOptionsController]
  -[_SFNavigationUtilitiesManager _shouldOverrideUserAgentSettingForFacebookAuthURL:]
  -[_SFNavigationUtilitiesManager _applyAutoplayQuirksToWebsitePolicies:desktopSiteSetting:]
  -[_SFNavigationUtilitiesManager websitePoliciesForURL:isForMainFrameNavigation:navigationType:completionHandler:]
  -[_SFNavigationUtilitiesManager persona]


SFBrowserStateSQLiteStore : NSObject
 @property  NSArray *browserWindows
 @property  NSArray *recentlyClosedWindows

  // instance methods
  -[SFBrowserStateSQLiteStore closeDatabase]
  -[SFBrowserStateSQLiteStore updateSceneID:]
  -[SFBrowserStateSQLiteStore _updateOrInsertTabStateWithData:]
  -[SFBrowserStateSQLiteStore updateBrowserWindowWithData:tabs:]
  -[SFBrowserStateSQLiteStore _createTableForTabs]
  -[SFBrowserStateSQLiteStore _insertTabStateWithData:]
  -[SFBrowserStateSQLiteStore _createTableForTabSession]
  -[SFBrowserStateSQLiteStore removeTabWithTabData:]
  -[SFBrowserStateSQLiteStore initWithDatabaseURL:]
  -[SFBrowserStateSQLiteStore _vacuum]
  -[SFBrowserStateSQLiteStore _updateBrowserWindowWithData:tabs:]
  -[SFBrowserStateSQLiteStore .cxx_destruct]
  -[SFBrowserStateSQLiteStore _saveBrowserWindowStateWithData:]
  -[SFBrowserStateSQLiteStore _checkDatabaseIntegrity]
  -[SFBrowserStateSQLiteStore _cacheUUIDForTabStateData:]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_4]
  -[SFBrowserStateSQLiteStore _mergeAllWindowsIfNeeded]
  -[SFBrowserStateSQLiteStore init]
  -[SFBrowserStateSQLiteStore _saveBrowserWindowStateWithDictionary:]
  -[SFBrowserStateSQLiteStore _readTabStatesWithBrowserWindowUUID:completion:]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_5]
  -[SFBrowserStateSQLiteStore _migrateToCurrentSchemaVersionIfNeeded]
  -[SFBrowserStateSQLiteStore deleteAllSavedStates]
  -[SFBrowserStateSQLiteStore _isDatabaseOpen]
  -[SFBrowserStateSQLiteStore tabStateDataForUUID:]
  -[SFBrowserStateSQLiteStore _openDatabaseAndCheckIntegrity:]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion:]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_2]
  -[SFBrowserStateSQLiteStore regenerateTabUUIDsForDeviceRestoration]
  -[SFBrowserStateSQLiteStore removeSavedSessionStateDataForTabsWithUUIDStrings:]
  -[SFBrowserStateSQLiteStore _migrateFromLegacyPlistWithPath:]
  -[SFBrowserStateSQLiteStore _regenerateTabUUIDsForDeviceRestoration]
  -[SFBrowserStateSQLiteStore mergeAllWindows]
  -[SFBrowserStateSQLiteStore _tabUUIDsInWindow:]
  -[SFBrowserStateSQLiteStore _setDatabaseID:browserWindow:]
  -[SFBrowserStateSQLiteStore _recoverFromDatabaseInconsistencyFromSchemaVersion3Migration]
  -[SFBrowserStateSQLiteStore _createFreshDatabaseSchema]
  -[SFBrowserStateSQLiteStore _removeSavedSessionStateDataForTabsWithUUIDStrings:]
  -[SFBrowserStateSQLiteStore _readSavedSessionStateDataForTabWithUUIDString:]
  -[SFBrowserStateSQLiteStore setSecureDeleteEnabled:]
  -[SFBrowserStateSQLiteStore _databaseIDForBrowserWindow:]
  -[SFBrowserStateSQLiteStore _updateTabStateWithData:]
  -[SFBrowserStateSQLiteStore _schemaVersion]
  -[SFBrowserStateSQLiteStore dealloc]
  -[SFBrowserStateSQLiteStore _closeDatabase]
  -[SFBrowserStateSQLiteStore _migrateFromLegacyPlistIfNeeded]
  -[SFBrowserStateSQLiteStore browserWindows]
  -[SFBrowserStateSQLiteStore checkPointWriteAheadLog]
  -[SFBrowserStateSQLiteStore _sqliteStatementForTabDeleting]
  -[SFBrowserStateSQLiteStore deleteAllRecentlyClosedWindows]
  -[SFBrowserStateSQLiteStore updateBrowserWindowStateWithDictionary:completion:]
  -[SFBrowserStateSQLiteStore _updateBrowserWindowStateWithDictionary:]
  -[SFBrowserStateSQLiteStore updateTabWithTabStateData:]
  -[SFBrowserStateSQLiteStore readSavedSessionStateDataForTabWithUUIDString:]
  -[SFBrowserStateSQLiteStore readTabStatesWithBrowserWindowUUID:completion:]
  -[SFBrowserStateSQLiteStore recentlyClosedWindows]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_3]
  -[SFBrowserStateSQLiteStore saveTabStateWithDictionary:]
  -[SFBrowserStateSQLiteStore tabStatesWithBrowserWindowUUID:]
  -[SFBrowserStateSQLiteStore _tabStateDataForUUID:]
  -[SFBrowserStateSQLiteStore _isTabStateCached:]
  -[SFBrowserStateSQLiteStore _setDatabaseSchemaVersion:]
  -[SFBrowserStateSQLiteStore deleteTabStateWithBrowserWindowUUID:andRemoveWindow:]


_SFBrowserWindowStateData : NSObject
 @property  long long databaseID
 @property  NSString *UUIDString
 @property  NSUUID *UUID
 @property  NSString *sceneID
 @property  long long type
 @property  long long activeDocumentIndex
 @property  long long activePrivateDocumentIndex
 @property  BOOL isActiveDocumentValid
 @property  BOOL isTabStateSuccessfullyLoaded
 @property  long long legacyPlistFileVersion
 @property  BOOL isInDatabase
 @property  BOOL needsQuickUpdate

  // instance methods
  -[_SFBrowserWindowStateData UUID]
  -[_SFBrowserWindowStateData UUIDString]
  -[_SFBrowserWindowStateData setType:]
  -[_SFBrowserWindowStateData setIsTabStateSuccessfullyLoaded:]
  -[_SFBrowserWindowStateData .cxx_destruct]
  -[_SFBrowserWindowStateData legacyPlistFileVersion]
  -[_SFBrowserWindowStateData dictionaryPresentation]
  -[_SFBrowserWindowStateData sceneID]
  -[_SFBrowserWindowStateData setLegacyPlistFileVersion:]
  -[_SFBrowserWindowStateData initWithDictionaryPresentation:]
  -[_SFBrowserWindowStateData setSceneID:]
  -[_SFBrowserWindowStateData isEqual:]
  -[_SFBrowserWindowStateData needsQuickUpdate]
  -[_SFBrowserWindowStateData initWithSQLiteRow:]
  -[_SFBrowserWindowStateData activeDocumentIndex]
  -[_SFBrowserWindowStateData isActiveDocumentValid]
  -[_SFBrowserWindowStateData initWithUUIDString:sceneID:]
  -[_SFBrowserWindowStateData setIsActiveDocumentValid:]
  -[_SFBrowserWindowStateData type]
  -[_SFBrowserWindowStateData setNeedsQuickUpdate:]
  -[_SFBrowserWindowStateData setActiveDocumentIndex:]
  -[_SFBrowserWindowStateData databaseID]
  -[_SFBrowserWindowStateData isTabStateSuccessfullyLoaded]
  -[_SFBrowserWindowStateData setDatabaseID:]
  -[_SFBrowserWindowStateData isInDatabase]
  -[_SFBrowserWindowStateData activePrivateDocumentIndex]
  -[_SFBrowserWindowStateData setUUIDString:]
  -[_SFBrowserWindowStateData setActivePrivateDocumentIndex:]
  -[_SFBrowserWindowStateData setUUID:]


_SFAppAutoFillPasswordViewController : _SFPasswordViewController
  // instance methods
  -[_SFAppAutoFillPasswordViewController .cxx_destruct]
  -[_SFAppAutoFillPasswordViewController viewDidLoad]
  -[_SFAppAutoFillPasswordViewController _sceneDidEnterBackground:]
  -[_SFAppAutoFillPasswordViewController setWebViewURL:]
  -[_SFAppAutoFillPasswordViewController setRemoteAppID:]
  -[_SFAppAutoFillPasswordViewController setRemoteLocalizedAppName:]
  -[_SFAppAutoFillPasswordViewController setRemoteUnlocalizedAppName:]
  -[_SFAppAutoFillPasswordViewController setExternallyVerifiedAndApprovedSharedWebCredentialsDomains:]
  -[_SFAppAutoFillPasswordViewController authenticateToPresentInPopover:completion:]
  -[_SFAppAutoFillPasswordViewController _remoteViewController]
  -[_SFAppAutoFillPasswordViewController _canShowWhileLocked]
  -[_SFAppAutoFillPasswordViewController setAuthenticationGracePeriod:]
  -[_SFAppAutoFillPasswordViewController remoteViewController:selectedCredential:]
  -[_SFAppAutoFillPasswordViewController _setUpServiceProxyIfNeeded]
  -[_SFAppAutoFillPasswordViewController _connectToServiceWithCompletion:]


_SFUIViewPopoverSourceInfo : NSObject <_SFPopoverSourceInfo>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} popoverSourceRect
 @property  UIView *popoverSourceView
 @property  BOOL shouldDismissIfSourceRemovedAfterRepositioning
 @property  BOOL shouldPassthroughSuperview
 @property  BOOL shouldHideArrow
 @property  unsigned long permittedArrowDirections
 @property  long long provenance
 @property  UIBarButtonItem *barButtonItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFUIViewPopoverSourceInfo initWithView:]
  -[_SFUIViewPopoverSourceInfo .cxx_destruct]
  -[_SFUIViewPopoverSourceInfo popoverSourceView]
  -[_SFUIViewPopoverSourceInfo permittedArrowDirections]
  -[_SFUIViewPopoverSourceInfo provenance]
  -[_SFUIViewPopoverSourceInfo setPermittedArrowDirections:]
  -[_SFUIViewPopoverSourceInfo popoverSourceRect]
  -[_SFUIViewPopoverSourceInfo setProvenance:]
  -[_SFUIViewPopoverSourceInfo shouldPassthroughSuperview]
  -[_SFUIViewPopoverSourceInfo setShouldPassthroughSuperview:]
  -[_SFUIViewPopoverSourceInfo shouldHideArrow]
  -[_SFUIViewPopoverSourceInfo setShouldHideArrow:]
  -[_SFUIViewPopoverSourceInfo initWithView:insets:]


_SFAuthenticationContext : NSObject <LAUIDelegate>
 @property  BOOL needsAuthentication
 @property  NSData *externalizedContext
 @property  <_SFAuthenticationContextDelegate> *delegate

  // instance methods
  -[_SFAuthenticationContext externalizedContext]
  -[_SFAuthenticationContext applicationWillEnterForeground]
  -[_SFAuthenticationContext invalidateClient:]
  -[_SFAuthenticationContext .cxx_destruct]
  -[_SFAuthenticationContext setDelegate:]
  -[_SFAuthenticationContext init]
  -[_SFAuthenticationContext needsAuthentication]
  -[_SFAuthenticationContext _authenticationContext]
  -[_SFAuthenticationContext delegate]
  -[_SFAuthenticationContext dealloc]
  -[_SFAuthenticationContext applicationDidEnterBackground]
  -[_SFAuthenticationContext event:params:reply:]
  -[_SFAuthenticationContext authenticateForClient:userInitiated:completion:]
  -[_SFAuthenticationContext _invalidateAuthentication]
  -[_SFAuthenticationContext _monotonicTimeIsWithinAuthenticationGracePeriod:]
  -[_SFAuthenticationContext _hasAuthenticationCapability:]
  -[_SFAuthenticationContext _processNextClientAwaitingAuthenticationUserInitiated:]
  -[_SFAuthenticationContext _contextRequiresSessionBasedAuthentication]
  -[_SFAuthenticationContext _evaluatePolicyForClient:userInitiated:reply:]
  -[_SFAuthenticationContext _contextShouldAllowPasscodeFallback]
  -[_SFAuthenticationContext _contextShouldAllowMultipleBiometricFailures]
  -[_SFAuthenticationContext _cancelOngoingAuthentication]
  -[_SFAuthenticationContext _canInvalidateAuthentication]
  -[_SFAuthenticationContext _cancelOngoingAndPendingAuthentications]
  -[_SFAuthenticationContext _handleTouchIDEventWithParameters:]
  -[_SFAuthenticationContext preemptOngoingAuthenticationWithPasccodeAuthentication]


_SFQRCodeDetectionController : NSObject
  // class methods
  +[_SFQRCodeDetectionController sharedController]

  // instance methods
  -[_SFQRCodeDetectionController .cxx_destruct]
  -[_SFQRCodeDetectionController init]
  -[_SFQRCodeDetectionController clearCachedElement:]
  -[_SFQRCodeDetectionController menuElementsForElementInfo:]
  -[_SFQRCodeDetectionController actionForElement:]
  -[_SFQRCodeDetectionController cacheElement:]
  -[_SFQRCodeDetectionController adjustedCopyActionForAction:elementInfo:]
  -[_SFQRCodeDetectionController getActionForImage:completion:]
  -[_SFQRCodeDetectionController getActionForImageSynchronously:userInfo:]
  -[_SFQRCodeDetectionController elementForAction:]


SFAutoFillAuthenticationUtilities : NSObject
  // class methods
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForLoggingInWithSavedAccountOnWebsite:]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForFillingSavedAccount]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForFillingTimeBasedOneTimeCode]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForFillingCreditCard]
  +[SFAutoFillAuthenticationUtilities passcodePromptForLoggingInWithSavedAccountOnWebsite:]
  +[SFAutoFillAuthenticationUtilities passcodePromptForFillingSavedAccount]
  +[SFAutoFillAuthenticationUtilities passcodePromptForFillingTimeBasedOneTimeCode]
  +[SFAutoFillAuthenticationUtilities passcodePromptForFillingCreditCard]
  +[SFAutoFillAuthenticationUtilities passcodePromptForViewingSavedAccounts]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForViewingSavedAccounts]


_SFFindOnPageUIActivity : _SFActivity
  // instance methods
  -[_SFFindOnPageUIActivity .cxx_destruct]
  -[_SFFindOnPageUIActivity _systemImageName]
  -[_SFFindOnPageUIActivity activityType]
  -[_SFFindOnPageUIActivity activityDidFinish:]
  -[_SFFindOnPageUIActivity canPerformWithActivityItems:]
  -[_SFFindOnPageUIActivity performActivity]
  -[_SFFindOnPageUIActivity activityTitle]
  -[_SFFindOnPageUIActivity initWithFindOnPageView:]


SFSafariLaunchPlaceholderView : UIView <UINavigationBarDelegate>
 @property  double topLayoutGuideInset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSafariLaunchPlaceholderView .cxx_destruct]
  -[SFSafariLaunchPlaceholderView layoutSubviews]
  -[SFSafariLaunchPlaceholderView initWithFrame:]
  -[SFSafariLaunchPlaceholderView positionForBar:]
  -[SFSafariLaunchPlaceholderView updateBarTintColor:]
  -[SFSafariLaunchPlaceholderView setTopLayoutGuideInset:]
  -[SFSafariLaunchPlaceholderView topLayoutGuideInset]


SFPasswordSavingServiceViewController : SFPasswordServiceViewController <_ASAccountAuthenticationModificationExtensionManagerObserver, _ASAccountAuthenticationModificationHostViewControllerDelegate, SFPasswordSavingServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordSavingServiceViewController _exportedInterface]

  // instance methods
  -[SFPasswordSavingServiceViewController credentialsSubmittedForWebsiteURL:user:password:passwordIsAutoGenerated:completionHandler:]
  -[SFPasswordSavingServiceViewController .cxx_destruct]
  -[SFPasswordSavingServiceViewController _dismiss]
  -[SFPasswordSavingServiceViewController initWithNibName:bundle:]
  -[SFPasswordSavingServiceViewController _initiateUpgradeToSignInWithApple]
  -[SFPasswordSavingServiceViewController _initiateChangeToStrongPassword]
  -[SFPasswordSavingServiceViewController showPromptWithToken:style:]
  -[SFPasswordSavingServiceViewController _saveCredential:]
  -[SFPasswordSavingServiceViewController _updateCredential:]
  -[SFPasswordSavingServiceViewController _checkIfWarningStoreAlreadyContainsCredentialWithCompletionHandler:]
  -[SFPasswordSavingServiceViewController _configureSecurityPromptActionsWithCompletionHandler:]
  -[SFPasswordSavingServiceViewController _showAccountModificationPrompt]
  -[SFPasswordSavingServiceViewController _titleStringForAccountModificationPrompt]
  -[SFPasswordSavingServiceViewController _messageStringForAccountModificationPrompt]
  -[SFPasswordSavingServiceViewController _addUpgradeToSignInWithAppleActionToPrompt]
  -[SFPasswordSavingServiceViewController _addChangeToStrongPasswordActionToPrompt]
  -[SFPasswordSavingServiceViewController _addChangePasswordOnWebsiteActionToPrompt]
  -[SFPasswordSavingServiceViewController _openPasswordManagerToChangePasswordOnWebsite]
  -[SFPasswordSavingServiceViewController _removeCredential:]


_SFMailContentProvider : NSObject <MFMailComposeViewControllerDelegate>
 @property  <_SFMailContentProviderDataSource> *dataSource
 @property  BOOL restrictAddingPDFContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFMailContentProvider setDataSource:]
  -[_SFMailContentProvider .cxx_destruct]
  -[_SFMailContentProvider dataSource]
  -[_SFMailContentProvider mailComposeController:didFinishWithResult:error:]
  -[_SFMailContentProvider _bestContentTypeForPreferredContentType:]
  -[_SFMailContentProvider _getReaderContentWithCompletionHandler:]
  -[_SFMailContentProvider _getPDFDataWithCompletionHandler:]
  -[_SFMailContentProvider prepareMailComposeViewController:withMailToURL:contentURL:preferredContentType:completionHandler:]
  -[_SFMailContentProvider _preferentiallyOrderedContentTypes]
  -[_SFMailContentProvider _canProvideContentType:]
  -[_SFMailContentProvider _preferentiallyOrderedAvailableContentTypes]
  -[_SFMailContentProvider _defaultPreferredContentType]
  -[_SFMailContentProvider getMailComposeViewControllerWithMailToURL:contentURL:preferredContentType:completionHandler:]
  -[_SFMailContentProvider _getWebArchiveDataWithCompletion:]
  -[_SFMailContentProvider restrictAddingPDFContent]
  -[_SFMailContentProvider setRestrictAddingPDFContent:]


_SFSettingsAuthentication : NSObject
  // class methods
  +[_SFSettingsAuthentication authenticateForSettings:allowAuthenticationReuse:completionHandler:]
  +[_SFSettingsAuthentication authenticationRequiresPasscode]
  +[_SFSettingsAuthentication pushSettingsAfterAuthentication:onBehalfOfViewController:resourceDictionary:completionHandler:]


_SFFolderPickerItem : NSObject
 @property  WebBookmark *bookmark
 @property  NSString *title
 @property  unsigned long depth

  // instance methods
  -[_SFFolderPickerItem bookmark]
  -[_SFFolderPickerItem .cxx_destruct]
  -[_SFFolderPickerItem depth]
  -[_SFFolderPickerItem title]
  -[_SFFolderPickerItem _initWithBookmark:depth:]


SFFolderPickerList : NSObject
  // instance methods
  -[SFFolderPickerList .cxx_destruct]
  -[SFFolderPickerList initWithBookmarkCollection:style:]
  -[SFFolderPickerList folderListItemsIgnoringIdentifiers:]
  -[SFFolderPickerList _appendFolderAndChildren:toArray:depth:ignoringIdentifiers:]
  -[SFFolderPickerList _appendChildrenOfFolder:toArray:depth:ignoringIdentifiers:]


_SFPageZoomPreferenceManager : WBSPageZoomPreferenceManager
  // class methods
  +[_SFPageZoomPreferenceManager sharedManager]

  // instance methods
  -[_SFPageZoomPreferenceManager removePreferenceValuesForDomains:fromPreference:completionHandler:]
  -[_SFPageZoomPreferenceManager dealloc]
  -[_SFPageZoomPreferenceManager _historyWasCleared:]
  -[_SFPageZoomPreferenceManager setValue:ofPreference:forDomain:completionHandler:]
  -[_SFPageZoomPreferenceManager setDefaultValue:ofPreference:completionHandler:]
  -[_SFPageZoomPreferenceManager initWithPerSitePreferencesStore:]
  -[_SFPageZoomPreferenceManager _didRemoveHostnames:]


SFPrivacyReportTrackingTableViewCell : UITableViewCell
 @property  UILabel *domainLabel
 @property  UILabel *domainDetailLabel
 @property  UILabel *countLabel
 @property  double count
 @property  double maxCount

  // instance methods
  -[SFPrivacyReportTrackingTableViewCell maxCount]
  -[SFPrivacyReportTrackingTableViewCell .cxx_destruct]
  -[SFPrivacyReportTrackingTableViewCell setMaxCount:]
  -[SFPrivacyReportTrackingTableViewCell count]
  -[SFPrivacyReportTrackingTableViewCell countLabel]
  -[SFPrivacyReportTrackingTableViewCell setCount:]
  -[SFPrivacyReportTrackingTableViewCell _updateCountViews]
  -[SFPrivacyReportTrackingTableViewCell initWithDetailLabel:reuseIdentifier:]
  -[SFPrivacyReportTrackingTableViewCell domainLabel]
  -[SFPrivacyReportTrackingTableViewCell domainDetailLabel]


SFPrivacyReportTrackerTableViewCell : SFPrivacyReportTrackingTableViewCell
 @property  WBSKnownTrackingThirdParty *tracker

  // instance methods
  -[SFPrivacyReportTrackerTableViewCell .cxx_destruct]
  -[SFPrivacyReportTrackerTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportTrackerTableViewCell tracker]
  -[SFPrivacyReportTrackerTableViewCell setTracker:]


SFPrivacyReportWebsiteTableViewCell : SFPrivacyReportTrackingTableViewCell
 @property  WBSTrackedFirstParty *website

  // instance methods
  -[SFPrivacyReportWebsiteTableViewCell .cxx_destruct]
  -[SFPrivacyReportWebsiteTableViewCell website]
  -[SFPrivacyReportWebsiteTableViewCell initWithStyle:reuseIdentifier:]
  -[SFPrivacyReportWebsiteTableViewCell setWebsite:]


SFPrivacyReportMeterBar : UIView
  // instance methods
  -[SFPrivacyReportMeterBar layoutSubviews]
  -[SFPrivacyReportMeterBar tintColorDidChange]
  -[SFPrivacyReportMeterBar initWithFrame:]
  -[SFPrivacyReportMeterBar intrinsicContentSize]


SFPrivacyReportExplanationDetailView : SFPrivacyReportGridView
 @property  BOOL usesInsetStyle

  // instance methods
  -[SFPrivacyReportExplanationDetailView initWithFrame:]
  -[SFPrivacyReportExplanationDetailView interItemSpacing]
  -[SFPrivacyReportExplanationDetailView setUsesInsetStyle:]
  -[SFPrivacyReportExplanationDetailView usesInsetStyle]


SFPrivacyReportExplanationDetailItemView : UIView <SFPrivacyReportGridItem, UITextViewDelegate>
 @property  UILabel *titleLabel
 @property  UITextView *bodyTextView
 @property  double titleLabelTopSpacing
 @property  double hairlineTopSpacing
 @property  BOOL usesInsetStyle
 @property  <SFPrivacyReportGridItemDelegate> *delegate
 @property  unsigned long gridPosition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFPrivacyReportExplanationDetailItemView titleLabel]
  -[SFPrivacyReportExplanationDetailItemView traitCollectionDidChange:]
  -[SFPrivacyReportExplanationDetailItemView .cxx_destruct]
  -[SFPrivacyReportExplanationDetailItemView setDelegate:]
  -[SFPrivacyReportExplanationDetailItemView textView:shouldInteractWithURL:inRange:interaction:]
  -[SFPrivacyReportExplanationDetailItemView initWithFrame:]
  -[SFPrivacyReportExplanationDetailItemView delegate]
  -[SFPrivacyReportExplanationDetailItemView setUsesInsetStyle:]
  -[SFPrivacyReportExplanationDetailItemView usesInsetStyle]
  -[SFPrivacyReportExplanationDetailItemView setGridPosition:]
  -[SFPrivacyReportExplanationDetailItemView gridPosition]
  -[SFPrivacyReportExplanationDetailItemView bodyTextView]
  -[SFPrivacyReportExplanationDetailItemView _updateTopSpacing]
  -[SFPrivacyReportExplanationDetailItemView _updateTopConstraints]
  -[SFPrivacyReportExplanationDetailItemView setTitleLabelTopSpacing:]
  -[SFPrivacyReportExplanationDetailItemView setHairlineTopSpacing:]
  -[SFPrivacyReportExplanationDetailItemView titleLabelTopSpacing]
  -[SFPrivacyReportExplanationDetailItemView hairlineTopSpacing]


_SFBrowserContentViewController : UIViewController <SFBrowserViewDelegate, SFReaderEnabledWebViewControllerDelegate, SFReaderViewControllerDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, _SFBarManagerDelegate, _SFDownloadDelegate, _SFDynamicBarAnimatorDelegate, _SFFindOnPageViewDelegate, _SFMailContentProviderDataSource, _SFNavigationBarDelegate, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFSingleBookmarkNavigationControllerDelegate, SFOverlayProviderDelegate, SFAppSuggestionBannerDelegate, WBSDigitalHealthManagerDelegate, PKAddPassesViewControllerDelegate, _SFLinkPreviewHandler, WBSWebExtensionCommandHandling, WBSTranslationConsentAlertHelperDelegate, WBSTranslationContextDelegate, _SFActivityItemCustomizationDelegate, _SFActivityViewControllerDelegate, _SFQuickLookDocumentSource, _SFSaveToFilesOperationDelegate, WBSWebExtensionTab, SFBrowserKeyCommandSafariViewControllerMethods, _SFBrowserContentController, _SFBrowserDocument>
 @property  _SFBrowserView *browserView
 @property  SFReaderEnabledWebViewController *rootWebViewController
 @property  SFReaderEnabledWebViewController *webViewController
 @property  WKPreferences *wkPreferences
 @property  NSArray *linkActions
 @property  _WKActivatedElementInfo *activatedElementInfo
 @property  BOOL remoteSwipeGestureEnabled
 @property  UIColor *preferredBarTintColor
 @property  UIColor *preferredControlTintColor
 @property  long long hostAppModalPresentationStyle
 @property  long long dismissButtonStyle
 @property  SFSafariViewControllerConfiguration *configuration
 @property  BOOL webViewLayoutUnderlapsStatusBar
 @property  BOOL canPrint
 @property  BOOL isBlockedByScreenTime
 @property  NSString *bundleIdentifierForProfileInstallation
 @property  BOOL _usesScrollToTopView
 @property  BOOL _isUsedForAuthentication
 @property  long long _persona
 @property  SFBrowserPersonaAnalyticsHelper *_analyticsHelper
 @property  NSString *_hostAppBundleId
 @property  BOOL _shouldReloadImmediatelyAfterPageLoadError
 @property  long long safariDataSharingMode
 @property  BOOL didNotifyInitialLoadFinish
 @property  BOOL isShowingErrorPage
 @property  BOOL viewDidAppearInHostApp
 @property  _SFNavigationUtilitiesManager *_navigationUtilitiesManager
 @property  WBSTranslationContext *translationContext
 @property  <_SFBrowserContentViewControllerDelegate> *delegate
 @property  long long displayMode
 @property  _SFReloadOptionsController *reloadOptionsController
 @property  _SFFindOnPageView *findOnPageView
 @property  WKWebView *webView
 @property  BOOL storeBannersAreDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double idForWebExtensions
 @property  WKWebView *webViewForExtensions
 @property  NSArray *webViewsThatCanReceiveMessages
 @property  double parentTabIDForWebExtensions
 @property  NSURL *urlForExtensions
 @property  NSURL *expectedOrCurrentURL
 @property  NSURL *expectedOrCurrentURLOrLastActiveURLIfCrashed
 @property  NSURL *pendingURLForWebExtensions
 @property  BOOL isLoadingComplete
 @property  BOOL isAudible
 @property  BOOL isMuted
 @property  BOOL isFrontmost
 @property  BOOL isPinnedTab
 @property  BOOL isPrivate
 @property  NSString *tabTitle
 @property  {CGSize=dd} tabViewSize
 @property  <WBSWebExtensionWindow> *webExtensionWindow
 @property  unsigned long changedPropertiesForOnUpdatedWebExtensionEvent
 @property  double zoomFactor
 @property  NSDictionary *extensionIdentifierToDynamicallyInjectedStyleSheets
 @property  <_SFBrowserDocument> *activeDocument
 @property  BOOL showingReader
 @property  BOOL keepBarsMinimized
 @property  BOOL hasUnviewedDownloads
 @property  unsigned long downloadsCount
 @property  <WBSWebExtensionTab> *activeTabForExtensions
 @property  BOOL hasDedicatedExtensionsButton
 @property  UIViewController *viewControllerToPresentFrom
 @property  _SFPerSitePreferencesVendor *perSitePreferencesVendor
 @property  _SFPageZoomPreferenceManager *pageZoomManager
 @property  BOOL supportsPrivacyReport
 @property  BOOL hasDedicatedMediaStateButton
 @property  BOOL hasDedicatedDownloadsToolbarItem
 @property  _SFWebView *activeWebView
 @property  <SFReaderContext> *readerContext
 @property  NSURL *URLForPerSitePreferences
 @property  BOOL wasLoadedWithContentBlockersEnabled
 @property  BOOL canHideToolbar
 @property  BOOL canChangeSearchFieldPosition
 @property  unsigned long mediaStateIcon
 @property  BOOL isSecure
 @property  SFBrowserDocumentTrackerInfo *trackerInfo

  // class methods
  +[_SFBrowserContentViewController createDefaultWebsiteDataStore]

  // instance methods
  -[_SFBrowserContentViewController perSitePreferencesVendor]
  -[_SFBrowserContentViewController urlForExtensions]
  -[_SFBrowserContentViewController webExtensionWindow]
  -[_SFBrowserContentViewController previousFindResultKeyPressed]
  -[_SFBrowserContentViewController isPinnedTab]
  -[_SFBrowserContentViewController goForward]
  -[_SFBrowserContentViewController canHideToolbar]
  -[_SFBrowserContentViewController reloadEnablingContentBlockers:]
  -[_SFBrowserContentViewController findKeyPressed]
  -[_SFBrowserContentViewController select]
  -[_SFBrowserContentViewController readerContext]
  -[_SFBrowserContentViewController hasFailedURL]
  -[_SFBrowserContentViewController navigationBarStopLoadingButtonWasTapped:]
  -[_SFBrowserContentViewController dynamicBarAnimatorStateDidChange:]
  -[_SFBrowserContentViewController loadURL:]
  -[_SFBrowserContentViewController navigateBackKeyPressed]
  -[_SFBrowserContentViewController pageZoomManager]
  -[_SFBrowserContentViewController reloadKeyPressed]
  -[_SFBrowserContentViewController isAudible]
  -[_SFBrowserContentViewController webViewForMailContentProvider:]
  -[_SFBrowserContentViewController findOnPageView]
  -[_SFBrowserContentViewController keepBarsMinimized]
  -[_SFBrowserContentViewController supportsPrivacyReport]
  -[_SFBrowserContentViewController activeDocument]
  -[_SFBrowserContentViewController unmute]
  -[_SFBrowserContentViewController overlayDidHide:]
  -[_SFBrowserContentViewController storeBannersAreDisabled]
  -[_SFBrowserContentViewController downloadDidStart:]
  -[_SFBrowserContentViewController mute]
  -[_SFBrowserContentViewController isFrontmost]
  -[_SFBrowserContentViewController shouldBlockAppSuggestionBanner:]
  -[_SFBrowserContentViewController presentModalViewController:completion:]
  -[_SFBrowserContentViewController processPool]
  -[_SFBrowserContentViewController preferredStatusBarStyle]
  -[_SFBrowserContentViewController validateCommand:]
  -[_SFBrowserContentViewController webView]
  -[_SFBrowserContentViewController presentViewController:animated:completion:]
  -[_SFBrowserContentViewController pageLoadErrorControllerIsInPreviewMode:]
  -[_SFBrowserContentViewController goBack]
  -[_SFBrowserContentViewController dynamicBarAnimatorOutputsDidChange:]
  -[_SFBrowserContentViewController setKeepBarsMinimized:]
  -[_SFBrowserContentViewController perSiteSettingsUIPresentSettings]
  -[_SFBrowserContentViewController estimatedProgress]
  -[_SFBrowserContentViewController prefersHomeIndicatorAutoHidden]
  -[_SFBrowserContentViewController isLoadingComplete]
  -[_SFBrowserContentViewController preferredBarTintColor]
  -[_SFBrowserContentViewController isPrivate]
  -[_SFBrowserContentViewController canChangeSearchFieldPosition]
  -[_SFBrowserContentViewController isMuted]
  -[_SFBrowserContentViewController reloadFromOrigin]
  -[_SFBrowserContentViewController increaseSize:]
  -[_SFBrowserContentViewController pageLoadErrorController:allowLegacyTLSConnectionForURL:navigateToURL:]
  -[_SFBrowserContentViewController pendingURLForWebExtensions]
  -[_SFBrowserContentViewController clearBadgeOnPageFormatMenu]
  -[_SFBrowserContentViewController printController:didCreatePrintInfo:]
  -[_SFBrowserContentViewController linkPreviewHelper:redirectToExternalNavigationResult:]
  -[_SFBrowserContentViewController hasUnviewedDownloads]
  -[_SFBrowserContentViewController quickLookDocument]
  -[_SFBrowserContentViewController linkPreviewHelper:previewViewControllerForURL:]
  -[_SFBrowserContentViewController activeWebView]
  -[_SFBrowserContentViewController _perSitePageZoomPreferenceDidChange:]
  -[_SFBrowserContentViewController setReloadOptionsController:]
  -[_SFBrowserContentViewController viewWillLayoutSubviews]
  -[_SFBrowserContentViewController stopLoading]
  -[_SFBrowserContentViewController displayMode]
  -[_SFBrowserContentViewController isSecure]
  -[_SFBrowserContentViewController _translationContextStateDidChange:]
  -[_SFBrowserContentViewController decreaseSize:]
  -[_SFBrowserContentViewController translationContext:showFeedbackConsentAlertWithCompletionHandler:]
  -[_SFBrowserContentViewController traitCollectionDidChange:]
  -[_SFBrowserContentViewController zoomFactor]
  -[_SFBrowserContentViewController _keyboardWillHide:]
  -[_SFBrowserContentViewController navigationBarCancelButtonWasTapped:]
  -[_SFBrowserContentViewController isShowingReader]
  -[_SFBrowserContentViewController autoFillFormKeyPressed]
  -[_SFBrowserContentViewController translationContext:showTranslationErrorAlertWithTitle:message:]
  -[_SFBrowserContentViewController translationContext:showFirstTimeConsentAlertWithCompletionHandler:]
  -[_SFBrowserContentViewController downloadDidFinish:]
  -[_SFBrowserContentViewController pageLoadErrorController:loadFailedRequestAfterError:]
  -[_SFBrowserContentViewController configuration]
  -[_SFBrowserContentViewController navigateForwardKeyPressed]
  -[_SFBrowserContentViewController _updateNavigationBar]
  -[_SFBrowserContentViewController setZoomFactor:]
  -[_SFBrowserContentViewController dynamicBarAnimatorWillEnterSteadyState:]
  -[_SFBrowserContentViewController progressState]
  -[_SFBrowserContentViewController navigationBarMetricsDidChange:]
  -[_SFBrowserContentViewController .cxx_destruct]
  -[_SFBrowserContentViewController scrollViewDidEndScrollingAnimation:]
  -[_SFBrowserContentViewController didMoveToParentViewController:]
  -[_SFBrowserContentViewController translationContextIsUsingPrivateBrowsing:]
  -[_SFBrowserContentViewController setMediaStateIcon:]
  -[_SFBrowserContentViewController _updateUserActivityTimerFired]
  -[_SFBrowserContentViewController printControllerPageIsLoading:]
  -[_SFBrowserContentViewController websiteDataStore]
  -[_SFBrowserContentViewController pageLoadErrorControllerClosePage:]
  -[_SFBrowserContentViewController _didCompleteScrolling]
  -[_SFBrowserContentViewController _dismiss]
  -[_SFBrowserContentViewController dynamicBarAnimator:canTransitionToState:byDraggingWithOffset:]
  -[_SFBrowserContentViewController canBecomeFirstResponder]
  -[_SFBrowserContentViewController _updateUI]
  -[_SFBrowserContentViewController scrollViewDidScrollToTop:]
  -[_SFBrowserContentViewController saveWebpageAlternativeKeyPressed]
  -[_SFBrowserContentViewController wasLoadedWithContentBlockersEnabled]
  -[_SFBrowserContentViewController dismissAppSuggestionBanner:]
  -[_SFBrowserContentViewController suggestedFileNameForQuickLookDocument:]
  -[_SFBrowserContentViewController setDelegate:]
  -[_SFBrowserContentViewController overrideTraitCollectionForChildViewController:]
  -[_SFBrowserContentViewController gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[_SFBrowserContentViewController expectedOrCurrentURL]
  -[_SFBrowserContentViewController initWithNibName:bundle:]
  -[_SFBrowserContentViewController becomeFirstResponder]
  -[_SFBrowserContentViewController changedPropertiesForOnUpdatedWebExtensionEvent]
  -[_SFBrowserContentViewController activeTabForExtensions]
  -[_SFBrowserContentViewController webViewForFindOnPageView:]
  -[_SFBrowserContentViewController hasDedicatedMediaStateButton]
  -[_SFBrowserContentViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[_SFBrowserContentViewController _updateUserActivity]
  -[_SFBrowserContentViewController tabViewSize]
  -[_SFBrowserContentViewController preferredControlTintColor]
  -[_SFBrowserContentViewController takeFindStringKeyPressed]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldHandleCertificateError:]
  -[_SFBrowserContentViewController translationContextWillRequestTranslatingWebpage:]
  -[_SFBrowserContentViewController tabTitle]
  -[_SFBrowserContentViewController mediaStateIcon]
  -[_SFBrowserContentViewController scrollViewDidEndDragging:willDecelerate:]
  -[_SFBrowserContentViewController hasDedicatedExtensionsButton]
  -[_SFBrowserContentViewController webViewForExtensions]
  -[_SFBrowserContentViewController idForWebExtensions]
  -[_SFBrowserContentViewController translationContext:shouldReportProgressInUnifiedField:]
  -[_SFBrowserContentViewController reloadOptionsController]
  -[_SFBrowserContentViewController translationContext]
  -[_SFBrowserContentViewController resetPageZoomLevelAndFontSize]
  -[_SFBrowserContentViewController scrollViewDidScroll:]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldPermanentlyAcceptCertificate:]
  -[_SFBrowserContentViewController addPassesViewControllerDidFinish:]
  -[_SFBrowserContentViewController presentingViewControllerForPrintController:]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonBecameUnavailable:]
  -[_SFBrowserContentViewController printControllerCanPresentPrintUI:]
  -[_SFBrowserContentViewController translationContextReloadPageInOriginalLanguage:]
  -[_SFBrowserContentViewController gestureRecognizerShouldBegin:]
  -[_SFBrowserContentViewController readerControllerForMailContentProvider:]
  -[_SFBrowserContentViewController saveToFilesOperation:presentViewController:]
  -[_SFBrowserContentViewController linkPreviewHelperWillDisableLinkPreview]
  -[_SFBrowserContentViewController toggleShowingReaderForUserAction]
  -[_SFBrowserContentViewController setAppSuggestionBanner:isPinned:]
  -[_SFBrowserContentViewController _hideNavigationBarGestureRecognized:]
  -[_SFBrowserContentViewController addBookmarkNavControllerCanSaveBookmarkChanges:]
  -[_SFBrowserContentViewController _goBack]
  -[_SFBrowserContentViewController downloadsCount]
  -[_SFBrowserContentViewController cancelKeyPressed]
  -[_SFBrowserContentViewController URLForPerSitePreferences]
  -[_SFBrowserContentViewController _hideCrashBanner]
  -[_SFBrowserContentViewController translationContextNeedsScrollHeightVisibilityUpdate:]
  -[_SFBrowserContentViewController printControllerForContentProvider:]
  -[_SFBrowserContentViewController viewDidLayoutSubviews]
  -[_SFBrowserContentViewController setPreferredControlTintColor:]
  -[_SFBrowserContentViewController gestureRecognizer:shouldReceiveTouch:]
  -[_SFBrowserContentViewController dataForQuickLookDocument:]
  -[_SFBrowserContentViewController canPerformAction:withSender:]
  -[_SFBrowserContentViewController toggleMediaStateMuted]
  -[_SFBrowserContentViewController scrollViewWillBeginDragging:]
  -[_SFBrowserContentViewController currentFluidProgressStateSource]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonWasTapped:]
  -[_SFBrowserContentViewController viewWillAppear:]
  -[_SFBrowserContentViewController scrollViewShouldScrollToTop:]
  -[_SFBrowserContentViewController navigationBarURLForSharing:]
  -[_SFBrowserContentViewController wkPreferences]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldReloadAfterError:]
  -[_SFBrowserContentViewController translationConsentAlertHelperViewControllerToPresentDetailsFrom:]
  -[_SFBrowserContentViewController visibilityWillChangeForFindOnPageView:]
  -[_SFBrowserContentViewController linkPreviewHelper:supportsAction:forURL:]
  -[_SFBrowserContentViewController linkPreviewHelper:didProduceNavigationIntent:forAction:]
  -[_SFBrowserContentViewController setDisplayMode:]
  -[_SFBrowserContentViewController isShowingErrorPage]
  -[_SFBrowserContentViewController clearFluidProgressState]
  -[_SFBrowserContentViewController delegate]
  -[_SFBrowserContentViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFBrowserContentViewController webExtensionKeyCommandPressed:]
  -[_SFBrowserContentViewController safariApplicationVersionForTranslationContext:]
  -[_SFBrowserContentViewController compressedNavigationBarWasTapped:]
  -[_SFBrowserContentViewController printControllerShouldPrintReader:]
  -[_SFBrowserContentViewController _persona]
  -[_SFBrowserContentViewController navigationBarMediaStateMuteButtonWasTapped:]
  -[_SFBrowserContentViewController fluidProgressRocketAnimationDidComplete]
  -[_SFBrowserContentViewController addBookmarkNavController:didFinishWithResult:bookmark:]
  -[_SFBrowserContentViewController toggleReaderKeyPressed]
  -[_SFBrowserContentViewController close]
  -[_SFBrowserContentViewController browserView]
  -[_SFBrowserContentViewController dynamicBarAnimator:minimumTopBarHeightForOffset:]
  -[_SFBrowserContentViewController pageLoadErrorController:presentViewController:]
  -[_SFBrowserContentViewController suggestedFileExtensionForQuickLookDocument:]
  -[_SFBrowserContentViewController dealloc]
  -[_SFBrowserContentViewController hasDedicatedDownloadsToolbarItem]
  -[_SFBrowserContentViewController linkPreviewHelper:commitPreviewViewControllerForAction:withTabOrder:]
  -[_SFBrowserContentViewController linkPreviewHelper:resultOfLoadingURL:]
  -[_SFBrowserContentViewController nextFindResultKeyPressed]
  -[_SFBrowserContentViewController browserPersonaForActivityViewController:]
  -[_SFBrowserContentViewController presentDownloadsViewController]
  -[_SFBrowserContentViewController readerViewIsVisibleForMailContentProvider:]
  -[_SFBrowserContentViewController pageLoadErrorControllerGetSecIdentityPreferencesController:]
  -[_SFBrowserContentViewController _perSiteAutomaticReaderActivationPreferenceDidChange:]
  -[_SFBrowserContentViewController extensionIdentifierToDynamicallyInjectedStyleSheets]
  -[_SFBrowserContentViewController setStoreBannersAreDisabled:]
  -[_SFBrowserContentViewController policyDidChangeForDigitalHealthManager:]
  -[_SFBrowserContentViewController pageLoadErrorController:setAllowsSpecificHTTPSCertificate:forHost:]
  -[_SFBrowserContentViewController _translationAvailabilityDidChange:]
  -[_SFBrowserContentViewController canPrint]
  -[_SFBrowserContentViewController saveKeyPressed]
  -[_SFBrowserContentViewController setExtensionIdentifierToDynamicallyInjectedStyleSheets:]
  -[_SFBrowserContentViewController viewControllerToPresentFrom]
  -[_SFBrowserContentViewController webViewsThatCanReceiveMessages]
  -[_SFBrowserContentViewController _closePreviewDocumentTimerFired:]
  -[_SFBrowserContentViewController navigationBarReloadButtonWasTapped:]
  -[_SFBrowserContentViewController loadView]
  -[_SFBrowserContentViewController emailCurrentPage]
  -[_SFBrowserContentViewController downloadDidFail:]
  -[_SFBrowserContentViewController loadRequest:]
  -[_SFBrowserContentViewController dynamicBarAnimatorWillLeaveSteadyState:]
  -[_SFBrowserContentViewController _setWebView:]
  -[_SFBrowserContentViewController navigationBarTranslateButtonWasTapped:]
  -[_SFBrowserContentViewController parentTabIDForWebExtensions]
  -[_SFBrowserContentViewController downloadDidReceiveResponse:]
  -[_SFBrowserContentViewController navigationBar:didCreateLeadingToolbar:trailingToolbar:]
  -[_SFBrowserContentViewController createFluidProgressState]
  -[_SFBrowserContentViewController scrollViewDidEndDecelerating:]
  -[_SFBrowserContentViewController _showBarsFromBottomBarTap:]
  -[_SFBrowserContentViewController barManager:didReceiveTapForBarItem:]
  -[_SFBrowserContentViewController observeValueForKeyPath:ofObject:change:context:]
  -[_SFBrowserContentViewController navigationBarReaderButtonWasTapped:]
  -[_SFBrowserContentViewController viewDidDisappear:]
  -[_SFBrowserContentViewController expectedOrCurrentURLOrLastActiveURLIfCrashed]
  -[_SFBrowserContentViewController saveToFilesOperation:didFinishWithSuccess:]
  -[_SFBrowserContentViewController webViewConfiguration]
  -[_SFBrowserContentViewController _invalidateEVOrganizationName]
  -[_SFBrowserContentViewController _EVOrganizationName]
  -[_SFBrowserContentViewController translationContext:urlForCurrentPageWithCompletionHandler:]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonStartedInteraction:]
  -[_SFBrowserContentViewController reloadFromOriginKeyPressed]
  -[_SFBrowserContentViewController setConfiguration:]
  -[_SFBrowserContentViewController reload]
  -[_SFBrowserContentViewController _invalidateUserActivity]
  -[_SFBrowserContentViewController contextMenuConfigurationForReaderViewController:element:completionHandler:]
  -[_SFBrowserContentViewController readerViewController:contextMenuWillPresentForElement:]
  -[_SFBrowserContentViewController readerViewController:contextMenuForElement:willCommitWithAnimator:]
  -[_SFBrowserContentViewController readerViewController:contextMenuDidEndForElement:]
  -[_SFBrowserContentViewController setDismissButtonStyle:]
  -[_SFBrowserContentViewController _currentWebView]
  -[_SFBrowserContentViewController navigationBarDoneButtonWasTapped:]
  -[_SFBrowserContentViewController activityViewController:prepareActivity:completion:]
  -[_SFBrowserContentViewController customizationControllerCustomizationsDidChange:]
  -[_SFBrowserContentViewController webViewForCustomizationController:]
  -[_SFBrowserContentViewController isContentObscuredByDigitalHealthForCustomizationController:]
  -[_SFBrowserContentViewController isDisplayingQuickLookDocumentForCustomizationController:]
  -[_SFBrowserContentViewController isReaderAvailableForCustomizationController:]
  -[_SFBrowserContentViewController isShowingReaderForCustomizationController:]
  -[_SFBrowserContentViewController linkActions]
  -[_SFBrowserContentViewController setLinkActions:]
  -[_SFBrowserContentViewController activatedElementInfo]
  -[_SFBrowserContentViewController setActivatedElementInfo:]
  -[_SFBrowserContentViewController dismissButtonStyle]
  -[_SFBrowserContentViewController setRemoteSwipeGestureEnabled:]
  -[_SFBrowserContentViewController setPreferredBarTintColor:]
  -[_SFBrowserContentViewController setHostAppModalPresentationStyle:]
  -[_SFBrowserContentViewController beginDigitalHealthTracking]
  -[_SFBrowserContentViewController stopDigitalHealthTrackingWithCompletionHandler:]
  -[_SFBrowserContentViewController setWebViewLayoutUnderlapsStatusBar:]
  -[_SFBrowserContentViewController webViewController]
  -[_SFBrowserContentViewController webViewControllerDidChangeLoadingState:]
  -[_SFBrowserContentViewController webViewControllerDidFirstVisuallyNonEmptyLayout:]
  -[_SFBrowserContentViewController _navigationUtilitiesManager]
  -[_SFBrowserContentViewController webViewController:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFBrowserContentViewController webViewController:didFailProvisionalNavigation:withError:]
  -[_SFBrowserContentViewController webViewController:didFinishNavigation:]
  -[_SFBrowserContentViewController webViewControllerDidChangeURL:]
  -[_SFBrowserContentViewController rootWebViewController]
  -[_SFBrowserContentViewController isBlockedByScreenTime]
  -[_SFBrowserContentViewController _setCurrentWebViewController:]
  -[_SFBrowserContentViewController newProcessPool]
  -[_SFBrowserContentViewController _initialLoadFinishedWithSuccess:]
  -[_SFBrowserContentViewController _goBackToOwnerWebView]
  -[_SFBrowserContentViewController setSafariDataSharingMode:]
  -[_SFBrowserContentViewController _usesScrollToTopView]
  -[_SFBrowserContentViewController _analyticsHelper]
  -[_SFBrowserContentViewController viewDidAppearInHostApp]
  -[_SFBrowserContentViewController setViewDidAppearInHostApp:]
  -[_SFBrowserContentViewController _updateRemoteSwipeGestureState]
  -[_SFBrowserContentViewController processPoolConfiguration]
  -[_SFBrowserContentViewController _updateScrollIndicatorVerticalInsets:horizontalInsets:]
  -[_SFBrowserContentViewController addTrustedEventAttribution:]
  -[_SFBrowserContentViewController _setUpWebViewControllerIfNeeded]
  -[_SFBrowserContentViewController decideDataSharingModeAndSetUpWebViewWithCompletionHandler:]
  -[_SFBrowserContentViewController _openCurrentURLInSafari]
  -[_SFBrowserContentViewController safariDataSharingMode]
  -[_SFBrowserContentViewController _isUsedForAuthentication]
  -[_SFBrowserContentViewController remoteSwipeGestureEnabled]
  -[_SFBrowserContentViewController _redirectToHostAppWithExpectedCallbackSchemeIfPossible:]
  -[_SFBrowserContentViewController _showBars]
  -[_SFBrowserContentViewController _applicationPayloadForOpeningInSafari]
  -[_SFBrowserContentViewController webViewController:didReceiveServerRedirectForProvisionalNavigation:]
  -[_SFBrowserContentViewController webViewControllerDidCancelClientRedirect:]
  -[_SFBrowserContentViewController webViewController:willPerformClientRedirectToURL:withDelay:]
  -[_SFBrowserContentViewController webViewController:didStartProvisionalNavigation:]
  -[_SFBrowserContentViewController webViewController:didFinishDocumentLoadForNavigation:]
  -[_SFBrowserContentViewController webViewController:didChangeFullScreen:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidCrash:]
  -[_SFBrowserContentViewController _updateMaxVisibleHeightPercentageUserDriven:]
  -[_SFBrowserContentViewController _didResolveDestinationURL:pendingAppLinkCheck:]
  -[_SFBrowserContentViewController websiteDataStoreConfiguration]
  -[_SFBrowserContentViewController _getSafariDataSharingModeWithCompletion:]
  -[_SFBrowserContentViewController _fetchActivityViewControllerInfoForURL:title:completion:]
  -[_SFBrowserContentViewController _notifyInitialLoadDidFinish:]
  -[_SFBrowserContentViewController _redirectToHostAppWithNavigationResult:options:]
  -[_SFBrowserContentViewController _didLoadWebView]
  -[_SFBrowserContentViewController bundleIdentifierForProfileInstallation]
  -[_SFBrowserContentViewController _hostAppBundleId]
  -[_SFBrowserContentViewController _shouldReloadImmediatelyAfterPageLoadError]
  -[_SFBrowserContentViewController presentingViewControllerForWebViewController:]
  -[_SFBrowserContentViewController webViewControllerDidChangeEstimatedProgress:]
  -[_SFBrowserContentViewController webViewControllerDidChangeHasOnlySecureContent:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidBecomeResponsive:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidBecomeUnresponsive:]
  -[_SFBrowserContentViewController webViewController:didCommitNavigation:]
  -[_SFBrowserContentViewController webViewController:didSameDocumentNavigation:ofType:]
  -[_SFBrowserContentViewController webViewController:authenticationChallenge:shouldAllowLegacyTLS:]
  -[_SFBrowserContentViewController authenticationChallengeDidNegotiateModernTLS:]
  -[_SFBrowserContentViewController webViewController:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]
  -[_SFBrowserContentViewController webViewController:willEndNavigationGestureToBackForwardListItem:]
  -[_SFBrowserContentViewController webViewController:didEndNavigationGestureToBackForwardListItem:]
  -[_SFBrowserContentViewController webViewController:willGoToBackForwardListItem:inPageCache:]
  -[_SFBrowserContentViewController webViewController:decidePolicyForNavigationResponse:decisionHandler:]
  -[_SFBrowserContentViewController webViewController:didFailNavigation:withError:]
  -[_SFBrowserContentViewController webViewControllerUpdateNavigationBar:]
  -[_SFBrowserContentViewController webViewControllerDidFirstPaint:]
  -[_SFBrowserContentViewController webViewController:didReceiveAuthenticationChallenge:completionHandler:]
  -[_SFBrowserContentViewController webViewController:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:]
  -[_SFBrowserContentViewController webViewController:didFinishLoadForQuickLookDocumentInMainFrame:]
  -[_SFBrowserContentViewController browserPersonaForWebViewController:]
  -[_SFBrowserContentViewController webViewController:webViewDidClose:]
  -[_SFBrowserContentViewController webViewController:createWebViewWithConfiguration:forNavigationAction:completionHandler:]
  -[_SFBrowserContentViewController webViewController:contextMenuConfigurationForElement:completionHandler:]
  -[_SFBrowserContentViewController webViewController:contextMenuWillPresentForElement:]
  -[_SFBrowserContentViewController webViewController:contextMenuContentPreviewForElement:]
  -[_SFBrowserContentViewController webViewController:contextMenuForElement:willCommitWithAnimator:]
  -[_SFBrowserContentViewController webViewController:contextMenuDidEndForElement:]
  -[_SFBrowserContentViewController webViewController:printFrame:]
  -[_SFBrowserContentViewController webViewControllerDidChangeSafeAreaShouldAffectObscuredInsets:]
  -[_SFBrowserContentViewController webViewController:mediaCaptureStateDidChange:]
  -[_SFBrowserContentViewController webViewController:presentationPolicyForDialog:]
  -[_SFBrowserContentViewController webViewControllerWillPresentJavaScriptDialog:]
  -[_SFBrowserContentViewController webViewControllerDidChangeSafeAreaInsets:]
  -[_SFBrowserContentViewController webViewController:didStartDownload:]
  -[_SFBrowserContentViewController webViewControllerCanPromptForAccountSecurityRecommendation:]
  -[_SFBrowserContentViewController _updateWebKitExperimentalFeatures]
  -[_SFBrowserContentViewController set_navigationUtilitiesManager:]
  -[_SFBrowserContentViewController _invalidateWebViewControllers]
  -[_SFBrowserContentViewController _updateTrackerProtectionPreferences]
  -[_SFBrowserContentViewController _setUpTopBarAndBottomBar]
  -[_SFBrowserContentViewController _updateStatusBarStyleForced:]
  -[_SFBrowserContentViewController _currentlyEditingText]
  -[_SFBrowserContentViewController _canShowPageFormatMenu]
  -[_SFBrowserContentViewController dismissSFSafariViewControllerKeyPressed]
  -[_SFBrowserContentViewController _canSaveWebpage]
  -[_SFBrowserContentViewController _setUpReloadOptionsControllerIfNeeded]
  -[_SFBrowserContentViewController _setUpCalendarEventDetectorIfNeeded]
  -[_SFBrowserContentViewController _setUpFindOnPageViewIfNeeded]
  -[_SFBrowserContentViewController _setUpToolbar]
  -[_SFBrowserContentViewController _setUpAnalyticsPersona]
  -[_SFBrowserContentViewController _setUpMenu]
  -[_SFBrowserContentViewController _cleanUpWebViewController:]
  -[_SFBrowserContentViewController _isPreviewing]
  -[_SFBrowserContentViewController _setSuppressingPreviewProgressAnimation:]
  -[_SFBrowserContentViewController _layOutBrowserViewForSizeTransition]
  -[_SFBrowserContentViewController _didCompleteViewSizeTransition]
  -[_SFBrowserContentViewController isSafariRestricted]
  -[_SFBrowserContentViewController _pushWebViewController:]
  -[_SFBrowserContentViewController _popWebViewController]
  -[_SFBrowserContentViewController _dismissTransientUIAnimated:]
  -[_SFBrowserContentViewController _shouldGoBackToOwnerWebView]
  -[_SFBrowserContentViewController _willBeginUserInitiatedNavigation]
  -[_SFBrowserContentViewController _updateDynamicBarGeometry]
  -[_SFBrowserContentViewController _updateBarTheme]
  -[_SFBrowserContentViewController _setUpInterfaceIfNeeded]
  -[_SFBrowserContentViewController _cancelPendingUpdateUserActivityTimer]
  -[_SFBrowserContentViewController _updateInterfaceFillsScreen]
  -[_SFBrowserContentViewController _updateUsesNarrowLayout]
  -[_SFBrowserContentViewController _updateScrollToTopView]
  -[_SFBrowserContentViewController _updateWebViewLayoutSize]
  -[_SFBrowserContentViewController _updateWebViewShrinkToFit]
  -[_SFBrowserContentViewController _updatePinnableBannerFrame]
  -[_SFBrowserContentViewController _updateCurrentScrollViewInsets]
  -[_SFBrowserContentViewController _safeAreaShouldAffectWebViewObscuredInsets]
  -[_SFBrowserContentViewController _effectiveWebViewSafeAreaInsets]
  -[_SFBrowserContentViewController _isSplitScreen]
  -[_SFBrowserContentViewController _maximumHeightObscuredByBottomBar]
  -[_SFBrowserContentViewController _canScrollToTopInView:]
  -[_SFBrowserContentViewController _scrollToTopFromScrollToTopView]
  -[_SFBrowserContentViewController _updateHomeIndicatorAutoHideState]
  -[_SFBrowserContentViewController _effectiveBarCollapsingEnabled]
  -[_SFBrowserContentViewController _offsetForDynamicBarAnimator]
  -[_SFBrowserContentViewController _setShowingReader:deactivationMode:animated:]
  -[_SFBrowserContentViewController _readerViewControllerNeedsSetUp]
  -[_SFBrowserContentViewController _updateUserActivitySoon]
  -[_SFBrowserContentViewController _setUpReaderViewController]
  -[_SFBrowserContentViewController _fallbackURLForWellKnownChangePasswordURL:]
  -[_SFBrowserContentViewController isPageEligibileToShowNotSecureWarning]
  -[_SFBrowserContentViewController didUpdateNavigationBarItem:]
  -[_SFBrowserContentViewController _updateBarItems]
  -[_SFBrowserContentViewController _updatePreviewLoadingUI]
  -[_SFBrowserContentViewController _setShowingCrashBanner:animated:]
  -[_SFBrowserContentViewController _updatePinnableBannerOffset]
  -[_SFBrowserContentViewController _updateAppInfoOverlayForBanner:]
  -[_SFBrowserContentViewController _showCrashBanner:animated:]
  -[_SFBrowserContentViewController _updateCrashBannerOffset]
  -[_SFBrowserContentViewController _itemProviderCollectionForSharingURL:title:]
  -[_SFBrowserContentViewController _fetchSharingURLWithCompletionHandler:]
  -[_SFBrowserContentViewController _canTranslateWebpages]
  -[_SFBrowserContentViewController setQuickLookDocumentForCurrentBackForwardListItem:]
  -[_SFBrowserContentViewController quickLookDocumentForCurrentBackForwardListItem]
  -[_SFBrowserContentViewController legacyTLSHostManager]
  -[_SFBrowserContentViewController _setShowingPinnableBanner:animated:]
  -[_SFBrowserContentViewController _hideReaderAnimated:deactivationMode:]
  -[_SFBrowserContentViewController _updatePageZoomWithPreference]
  -[_SFBrowserContentViewController _showQuickLookDocumentView]
  -[_SFBrowserContentViewController _hideQuickLookDocumentView]
  -[_SFBrowserContentViewController _updateDigitalHealthTracking]
  -[_SFBrowserContentViewController _showReaderAnimated:]
  -[_SFBrowserContentViewController _committedDomainForPreferences]
  -[_SFBrowserContentViewController _shouldAllowAutomaticReader]
  -[_SFBrowserContentViewController _cleanUpAfterRedirectToExternalApp]
  -[_SFBrowserContentViewController _redirectToExternalNavigationResult:fromOriginalRequest:promptPolicy:isMainFrame:userAction:]
  -[_SFBrowserContentViewController _completeRedirectToExternalNavigationResult:fromOriginalRequest:dialogResult:]
  -[_SFBrowserContentViewController _queueAlertForRedirectToExternalNavigationResult:fromOriginalRequest:isMainFrame:promptPolicy:userAction:]
  -[_SFBrowserContentViewController _didDecideNavigationPolicy:forNavigationAction:]
  -[_SFBrowserContentViewController _internalWebViewController:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFBrowserContentViewController _internalWebViewController:decidePolicyForNavigationAction:withResult:decisionHandler:]
  -[_SFBrowserContentViewController _determineResultOfLoadingRequest:inMainFrame:disallowRedirectToExternalApps:completionHandler:]
  -[_SFBrowserContentViewController _redirectToNewsIfNeededForRequest:isMainFrame:userAction:decisionHandler:]
  -[_SFBrowserContentViewController _didDecideNavigationPolicy:forNavigationResponse:]
  -[_SFBrowserContentViewController _quickLookDocumentForDownload:]
  -[_SFBrowserContentViewController _openNewWebViewIfNeededWithConfiguration:forNavigationAction:]
  -[_SFBrowserContentViewController _contextMenuConfigurationForWebView:element:]
  -[_SFBrowserContentViewController _willPresentContextMenu]
  -[_SFBrowserContentViewController _contextMenuContentPreviewForWebView:element:]
  -[_SFBrowserContentViewController _willCommitContextMenuForWebView:withAnimator:]
  -[_SFBrowserContentViewController _invalidatePreviewCloseTimer]
  -[_SFBrowserContentViewController resultOfLoadingRequest:inMainFrame:disallowRedirectToExternalApps:]
  -[_SFBrowserContentViewController updateBottombarOffset:topBarHeight:]
  -[_SFBrowserContentViewController _crashBannerDraggingOffsetForContentOffset:]
  -[_SFBrowserContentViewController _reloadFromOrigin:]
  -[_SFBrowserContentViewController _canShowDownloadWithoutPrompting:]
  -[_SFBrowserContentViewController _showDownload:]
  -[_SFBrowserContentViewController _showPassBookControllerForPasses:]
  -[_SFBrowserContentViewController _showGenericDownloadAlert]
  -[_SFBrowserContentViewController _showICSControllerForPath:sourceURL:]
  -[_SFBrowserContentViewController _mailContentProvider]
  -[_SFBrowserContentViewController handoffURL]
  -[_SFBrowserContentViewController _goForward]
  -[_SFBrowserContentViewController _presentSaveWebpageViewController]
  -[_SFBrowserContentViewController _emailCurrentPageWithPreferredContentType:]
  -[_SFBrowserContentViewController _increasePageZoomSetting]
  -[_SFBrowserContentViewController _decreasePageZoomSetting]
  -[_SFBrowserContentViewController _resetPageZoomSetting]
  -[_SFBrowserContentViewController _performClickActionForExtension:]
  -[_SFBrowserContentViewController _personaShouldUseScreenTime]
  -[_SFBrowserContentViewController _digitalHealthManager]
  -[_SFBrowserContentViewController _showDigitalHealthOverlayWithPolicy:]
  -[_SFBrowserContentViewController _hideDigitalHealthOverlay]
  -[_SFBrowserContentViewController _presentActivityViewController]
  -[_SFBrowserContentViewController _invokeCustomActivity]
  -[_SFBrowserContentViewController _canSaveWebpageForURL:]
  -[_SFBrowserContentViewController _presentTranslationConsentAlertWithType:completionHandler:]
  -[_SFBrowserContentViewController webViewControllerDidDetermineReaderAvailability:dueTo:]
  -[_SFBrowserContentViewController webViewController:didClickLinkInReaderWithRequest:]
  -[_SFBrowserContentViewController createReaderWebViewForWebViewController:]
  -[_SFBrowserContentViewController webViewController:didFindAppBannerWithContent:]
  -[_SFBrowserContentViewController webViewController:didExtractTextSamplesForTranslation:]
  -[_SFBrowserContentViewController setFindOnPageView:]
  -[_SFBrowserContentViewController hostAppModalPresentationStyle]
  -[_SFBrowserContentViewController webViewLayoutUnderlapsStatusBar]
  -[_SFBrowserContentViewController didNotifyInitialLoadFinish]
  -[_SFBrowserContentViewController setTranslationContext:]


_SFWebClipMetadataFetcher : NSObject
  // class methods
  +[_SFWebClipMetadataFetcher metadataFetcherScriptSource]

  // instance methods
  -[_SFWebClipMetadataFetcher .cxx_destruct]
  -[_SFWebClipMetadataFetcher initWithInjectedJavascriptController:]
  -[_SFWebClipMetadataFetcher fetchMetadataWithConsumer:]
  -[_SFWebClipMetadataFetcher _startFetchingMetadata]
  -[_SFWebClipMetadataFetcher _webClipLinkTagWithDictionary:]


SFAddSavedAccountViewController : UITableViewController <UITextFieldDelegate>
 @property  <SFAddSavedAccountViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAddSavedAccountViewController textFieldShouldReturn:]
  -[SFAddSavedAccountViewController textFieldDidBeginEditing:]
  -[SFAddSavedAccountViewController tableView:numberOfRowsInSection:]
  -[SFAddSavedAccountViewController .cxx_destruct]
  -[SFAddSavedAccountViewController viewDidLoad]
  -[SFAddSavedAccountViewController tableView:cellForRowAtIndexPath:]
  -[SFAddSavedAccountViewController setDelegate:]
  -[SFAddSavedAccountViewController viewDidAppear:]
  -[SFAddSavedAccountViewController init]
  -[SFAddSavedAccountViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SFAddSavedAccountViewController delegate]
  -[SFAddSavedAccountViewController _textFieldChanged:]
  -[SFAddSavedAccountViewController _cancelBarButtonItemTapped:]
  -[SFAddSavedAccountViewController _doneBarButtonItemTapped:]
  -[SFAddSavedAccountViewController _savePasswordAndDismiss]
  -[SFAddSavedAccountViewController _updateTextSuggestionsForTextField:]
  -[SFAddSavedAccountViewController _updateTextInputSuggestionsForUserNameField]
  -[SFAddSavedAccountViewController _updateTextInputSuggestionsForPasswordField]
  -[SFAddSavedAccountViewController initWithSuggestedDomain:]


_SFReloadOptionsController : NSObject <_SFRequestDesktopSitePerSitePreferenceObserver>
 @property  _SFInjectedJavaScriptController *activityJSController
 @property  BOOL loadedUsingDesktopUserAgent
 @property  BOOL tryUsingMobileIfPossible
 @property  long long effectiveContentMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReloadOptionsController effectiveContentMode]
  -[_SFReloadOptionsController _loadPerSitePreferences]
  -[_SFReloadOptionsController didMarkURLAsNeedingStandardUserAgent:]
  -[_SFReloadOptionsController activityJSController]
  -[_SFReloadOptionsController _overrideSettingIfNeeded:source:domain:completion:]
  -[_SFReloadOptionsController customNavigatorPlatformForSetting:]
  -[_SFReloadOptionsController .cxx_destruct]
  -[_SFReloadOptionsController logCompletedPageloadToDifferentialPrivacy:]
  -[_SFReloadOptionsController didSetRequestDesktopSiteDefaultValue:]
  -[_SFReloadOptionsController requestDesktopSiteWithURL:]
  -[_SFReloadOptionsController didMarkURLAsNeedingDesktopUserAgent:]
  -[_SFReloadOptionsController init]
  -[_SFReloadOptionsController initWithWebView:activityJSController:perSitePreferenceManager:]
  -[_SFReloadOptionsController customUserAgentForSetting:]
  -[_SFReloadOptionsController didUpdateRequestDesktopSiteDefaultValue:]
  -[_SFReloadOptionsController requestDesktopSite]
  -[_SFReloadOptionsController setEffectiveContentMode:]
  -[_SFReloadOptionsController customUserAgentSettingForMainFrameURL:withTimeout:completionHandler:]
  -[_SFReloadOptionsController setTryUsingMobileIfPossible:]
  -[_SFReloadOptionsController invalidate]
  -[_SFReloadOptionsController didUpdateRequestDesktopSitePerSitePreference:]
  -[_SFReloadOptionsController loadedUsingDesktopUserAgent]
  -[_SFReloadOptionsController didSetRequestDesktopSitePerSitePreferencesValues:]
  -[_SFReloadOptionsController _updateSettingSource:domain:]
  -[_SFReloadOptionsController tryUsingMobileIfPossible]
  -[_SFReloadOptionsController requestStandardSite]


_SFPageFormatMenuBadgeView : UIView
  // class methods
  +[_SFPageFormatMenuBadgeView defaultComponentsArrangement]

  // instance methods
  -[_SFPageFormatMenuBadgeView initWithText:]
  -[_SFPageFormatMenuBadgeView layoutSubviews]


SFReaderEnabledWebViewController : SFWebViewController <SFAppBannerMetaTagContentObserver, _SFReaderControllerDelegate, WKNavigationDelegatePrivate>
 @property  _SFReaderController *readerController
 @property  <SFReaderEnabledWebViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFReaderEnabledWebViewController readerController:didClickLinkRequestingNewWindowInReaderWithRequest:]
  -[SFReaderEnabledWebViewController traitCollectionDidChange:]
  -[SFReaderEnabledWebViewController webView:didCommitNavigation:]
  -[SFReaderEnabledWebViewController .cxx_destruct]
  -[SFReaderEnabledWebViewController createReaderWebViewForReaderController:]
  -[SFReaderEnabledWebViewController didFindAppBannerWithContent:]
  -[SFReaderEnabledWebViewController readerController:didDetermineReaderAvailability:dueTo:]
  -[SFReaderEnabledWebViewController readerController:didClickLinkInReaderWithRequest:]
  -[SFReaderEnabledWebViewController readerController]
  -[SFReaderEnabledWebViewController dealloc]
  -[SFReaderEnabledWebViewController invalidate]
  -[SFReaderEnabledWebViewController readerController:didDetermineAdditionalTextSamples:dueTo:]
  -[SFReaderEnabledWebViewController loadView]
  -[SFReaderEnabledWebViewController readerController:contentDidBecomeReadyWithDetectedLanguage:]
  -[SFReaderEnabledWebViewController setUpReaderWithReaderWebView:]
  -[SFReaderEnabledWebViewController _updateDarkModeEnabled]


_SFBrowserSavedState : NSObject
 @property  NSArray *browserWindows
 @property  NSArray *recentlyClosedTabs
 @property  BOOL secureDeleteEnabled
 @property  BOOL shouldBeUsedDuringTest

  // class methods
  +[_SFBrowserSavedState defaultBrowserStateDatabase]
  +[_SFBrowserSavedState inMemoryDatabase]
  +[_SFBrowserSavedState shouldMergeAllWindowsIfNeeded]
  +[_SFBrowserSavedState sharedBrowserSavedState]
  +[_SFBrowserSavedState setSharedBrowserSavedState:]
  +[_SFBrowserSavedState ephemeralSavedState]
  +[_SFBrowserSavedState setShouldMergeAllWindowsIfNeeded:]
  +[_SFBrowserSavedState defaultPPTBrowserStateDatabase]

  // instance methods
  -[_SFBrowserSavedState updateSceneID:]
  -[_SFBrowserSavedState initWithDatabaseURL:]
  -[_SFBrowserSavedState .cxx_destruct]
  -[_SFBrowserSavedState _historyItemsWereRemoved:]
  -[_SFBrowserSavedState tabStateDataForUUID:]
  -[_SFBrowserSavedState regenerateTabUUIDsForDeviceRestoration]
  -[_SFBrowserSavedState setSecureDeleteEnabled:]
  -[_SFBrowserSavedState dealloc]
  -[_SFBrowserSavedState browserWindows]
  -[_SFBrowserSavedState recentlyClosedTabs]
  -[_SFBrowserSavedState _readBrowserControllersSavedState]
  -[_SFBrowserSavedState _checkPointWriteAheadLogIfNeeded]
  -[_SFBrowserSavedState clearAllSavedStatesClosingDatabase:]
  -[_SFBrowserSavedState _readRecentlyClosedTabsStateIfNecessary]
  -[_SFBrowserSavedState updateBrowserWindowState:tabs:]
  -[_SFBrowserSavedState _removeRecentlyClosedTabStateData:]
  -[_SFBrowserSavedState _notifyThatRecentlyClosedTabsWereRemoved:]
  -[_SFBrowserSavedState removeTabsStateForBrowserControllerWithUUID:andRemoveWindow:]
  -[_SFBrowserSavedState removeTabStateWithTabData:]
  -[_SFBrowserSavedState setBrowserWindows:]
  -[_SFBrowserSavedState savedTabsStateForBrowserControllerWithUUID:]
  -[_SFBrowserSavedState saveTabsState:forBrowserControllerWithUUID:completion:]
  -[_SFBrowserSavedState setActiveDocumentIsValid:forBrowserControllerWithUUID:]
  -[_SFBrowserSavedState activeDocumentIsValidForBrowserControllerWithUUID:]
  -[_SFBrowserSavedState saveTabStateData:]
  -[_SFBrowserSavedState clearAllSavedStatesAndCloseDatabase]
  -[_SFBrowserSavedState readSavedSessionStateDataForTabWithUUID:]
  -[_SFBrowserSavedState addRecentlyClosedTabs:]
  -[_SFBrowserSavedState loadSessionStateDataAndRemoveRecentlyClosedTab:]
  -[_SFBrowserSavedState clearRecentlyClosedTabs]
  -[_SFBrowserSavedState removeRecentlyClosedTabWithStateData:]
  -[_SFBrowserSavedState setRecentlyClosedTabs:]
  -[_SFBrowserSavedState secureDeleteEnabled]
  -[_SFBrowserSavedState shouldBeUsedDuringTest]


_SFInjectedJavaScriptController : NSObject
  // instance methods
  -[_SFInjectedJavaScriptController initWithWebView:]
  -[_SFInjectedJavaScriptController .cxx_destruct]
  -[_SFInjectedJavaScriptController _webProcessActivityProxy]
  -[_SFInjectedJavaScriptController runJavaScriptForActivity:withScript:object:invokeMethod:completionHandler:]


SFPasswordServiceViewController : UIViewController
 @property  NSString *applicationIdentifier

  // class methods
  +[SFPasswordServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[SFPasswordServiceViewController applicationIdentifier]
  -[SFPasswordServiceViewController .cxx_destruct]
  -[SFPasswordServiceViewController _willAppearInRemoteViewController]


_SSHistoryAccessSession : WBSHistoryAccessSessionProxy

SFSecurityRecommendationInfoCell : UITableViewCell <SFAccountTableViewCell>
 @property  UIImage *icon
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  NSString *title
 @property  NSString *subtitle
 @property  WBSSavedAccount *savedAccount
 @property  <SFSecurityRecommendationInfoCellDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSecurityRecommendationInfoCell titleLabel]
  -[SFSecurityRecommendationInfoCell setSubtitleLabel:]
  -[SFSecurityRecommendationInfoCell icon]
  -[SFSecurityRecommendationInfoCell setTitle:]
  -[SFSecurityRecommendationInfoCell .cxx_destruct]
  -[SFSecurityRecommendationInfoCell setTitleLabel:]
  -[SFSecurityRecommendationInfoCell setSubtitle:]
  -[SFSecurityRecommendationInfoCell setDelegate:]
  -[SFSecurityRecommendationInfoCell subtitleLabel]
  -[SFSecurityRecommendationInfoCell setIcon:]
  -[SFSecurityRecommendationInfoCell subtitle]
  -[SFSecurityRecommendationInfoCell title]
  -[SFSecurityRecommendationInfoCell delegate]
  -[SFSecurityRecommendationInfoCell setSavedAccount:]
  -[SFSecurityRecommendationInfoCell savedAccount]
  -[SFSecurityRecommendationInfoCell _iconWidth]
  -[SFSecurityRecommendationInfoCell showPlaceholderImageForDomain:backgroundColor:]
  -[SFSecurityRecommendationInfoCell initWithConfiguration:reuseIdentifier:]
  -[SFSecurityRecommendationInfoCell showCheckmarkForDetailView]
  -[SFSecurityRecommendationInfoCell setShowsHideButton:]
  -[SFSecurityRecommendationInfoCell setShowsUpgradeCompletionCheckmark:]
  -[SFSecurityRecommendationInfoCell _createHideButton]
  -[SFSecurityRecommendationInfoCell _hideButtonPressed:]


_SFGeolocationPermissionManager : WBSGeolocationPreferenceManager
  // class methods
  +[_SFGeolocationPermissionManager sharedManager]

  // instance methods
  -[_SFGeolocationPermissionManager .cxx_destruct]
  -[_SFGeolocationPermissionManager requestPermissionForURL:frame:dialogPresenter:completionHandler:]
  -[_SFGeolocationPermissionManager _showDialogRequestingPermissionForURL:frame:dialogPresenter:completionHandler:]
  -[_SFGeolocationPermissionManager hasPreciseLocationPermission]


_SFQuickLookDocument : NSObject
 @property  LSDocumentProxy *documentProxy
 @property  NSString *savedPath
 @property  NSString *savedPathWithProperExtension
 @property  NSString *fileName
 @property  NSString *mimeType
 @property  NSString *uti
 @property  BOOL needsQuickLookDocumentView
 @property  NSURL *savedURLWithProperExtension
 @property  unsigned long fileSize
 @property  NSString *inferredUTI
 @property  NSString *localizedType
 @property  NSURL *sourceURL
 @property  BOOL shouldUnzipByUIDocumentInteractionController
 @property  <_SFQuickLookDocumentSource> *documentSource

  // class methods
  +[_SFQuickLookDocument _hasSuitableApplicationForOpeningDocument:]

  // instance methods
  -[_SFQuickLookDocument setSourceURL:]
  -[_SFQuickLookDocument documentProxy]
  -[_SFQuickLookDocument fileSize]
  -[_SFQuickLookDocument fileName]
  -[_SFQuickLookDocument .cxx_destruct]
  -[_SFQuickLookDocument setUti:]
  -[_SFQuickLookDocument documentSource]
  -[_SFQuickLookDocument mimeType]
  -[_SFQuickLookDocument setMimeType:]
  -[_SFQuickLookDocument setDocumentSource:]
  -[_SFQuickLookDocument sourceURL]
  -[_SFQuickLookDocument setFileName:]
  -[_SFQuickLookDocument dealloc]
  -[_SFQuickLookDocument uti]
  -[_SFQuickLookDocument savedURLWithProperExtension]
  -[_SFQuickLookDocument initWithFileName:mimeType:uti:needsQuickLookDocumentView:]
  -[_SFQuickLookDocument saveToFileIfNeeded]
  -[_SFQuickLookDocument shouldUnzipByUIDocumentInteractionController]
  -[_SFQuickLookDocument localizedType]
  -[_SFQuickLookDocument inferredUTI]
  -[_SFQuickLookDocument addQuickLookPrintSettingsToPrintInfo:]
  -[_SFQuickLookDocument setSavedPath:shouldDelete:]
  -[_SFQuickLookDocument _deleteSavedPathIfNecessary]
  -[_SFQuickLookDocument _deleteSavedPathWithProperExtensionIfNecessary]
  -[_SFQuickLookDocument savedPath]
  -[_SFQuickLookDocument savedPathWithProperExtension]
  -[_SFQuickLookDocument setDocumentProxy:]
  -[_SFQuickLookDocument setSavedPathWithProperExtension:shouldDelete:]
  -[_SFQuickLookDocument setSavedPath:]
  -[_SFQuickLookDocument setSavedPathWithProperExtension:]
  -[_SFQuickLookDocument setFileNameForPDFDocument:]
  -[_SFQuickLookDocument needsQuickLookDocumentView]


_SFOpenWithAppUIActivity : UIActivity <LSOpenResourceOperationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenWithAppUIActivity openResourceOperation:didFinishCopyingResource:]
  -[_SFOpenWithAppUIActivity .cxx_destruct]
  -[_SFOpenWithAppUIActivity activityType]
  -[_SFOpenWithAppUIActivity canPerformWithActivityItems:]
  -[_SFOpenWithAppUIActivity performActivity]
  -[_SFOpenWithAppUIActivity _activityImage]
  -[_SFOpenWithAppUIActivity activityTitle]
  -[_SFOpenWithAppUIActivity initWithApplicationIdentifier:andFilePath:]


_SFOpenInOtherAppActivityItemsSource : NSObject <UIActivityItemsSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenInOtherAppActivityItemsSource activityViewController:itemsForActivityType:]
  -[_SFOpenInOtherAppActivityItemsSource .cxx_destruct]
  -[_SFOpenInOtherAppActivityItemsSource activityViewControllerPlaceholderItems:]
  -[_SFOpenInOtherAppActivityItemsSource initWithFilePath:]


_SFOpenInOtherAppActivityViewController : _SFActivityViewController
 @property  NSString *filePath

  // class methods
  +[_SFOpenInOtherAppActivityViewController canOpenWithFilePath:UTI:sourceURL:]
  +[_SFOpenInOtherAppActivityViewController _applicationsForDocumentProxy:]
  +[_SFOpenInOtherAppActivityViewController _activityItemsForFilePath:UTI:sourceURL:]

  // instance methods
  -[_SFOpenInOtherAppActivityViewController filePath]
  -[_SFOpenInOtherAppActivityViewController .cxx_destruct]
  -[_SFOpenInOtherAppActivityViewController setFilePath:]
  -[_SFOpenInOtherAppActivityViewController _prepareActivity:]
  -[_SFOpenInOtherAppActivityViewController initWithFilePath:UTI:sourceURL:]


SFExternalPasswordCredentialServiceViewController : SFPasswordServiceViewController <SFCredentialProviderExtensionManagerObserver, _ASPasswordCredentialAuthenticationViewControllerDelegate, _SFAuthenticationClient, _SFAuthenticationContextDelegate, SFExternalPasswordCredentialServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFExternalPasswordCredentialServiceViewController _remoteViewControllerInterface]
  +[SFExternalPasswordCredentialServiceViewController _exportedInterface]

  // instance methods
  -[SFExternalPasswordCredentialServiceViewController authenticationMessageForContext:]
  -[SFExternalPasswordCredentialServiceViewController .cxx_destruct]
  -[SFExternalPasswordCredentialServiceViewController _dismiss]
  -[SFExternalPasswordCredentialServiceViewController initWithNibName:bundle:]
  -[SFExternalPasswordCredentialServiceViewController passcodePromptForContext:]
  -[SFExternalPasswordCredentialServiceViewController credentialProviderExtensionManagerExtensionListDidChange:]
  -[SFExternalPasswordCredentialServiceViewController displayMessageAsTitleForContext:]
  -[SFExternalPasswordCredentialServiceViewController _authenticationContext]
  -[SFExternalPasswordCredentialServiceViewController authenticationCustomUIProgressObserverForContext:]
  -[SFExternalPasswordCredentialServiceViewController autoFillWithCredentialIdentity:]
  -[SFExternalPasswordCredentialServiceViewController getCredentialForCredentialIdentity:completion:]
  -[SFExternalPasswordCredentialServiceViewController presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFExternalPasswordCredentialServiceViewController passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFExternalPasswordCredentialServiceViewController contextRequiresSessionBasedAuthentication:]
  -[SFExternalPasswordCredentialServiceViewController contextShouldAllowPasscodeFallback:]
  -[SFExternalPasswordCredentialServiceViewController contextShouldAllowMultipleBiometricFailures:]
  -[SFExternalPasswordCredentialServiceViewController _finishRequestToAutoFillCredential:extensionShowedUI:error:completion:]
  -[SFExternalPasswordCredentialServiceViewController _finishRequestToReturnCredential:extensionShowedUI:error:completion:]


_SFBrowserNavigationBar : _SFNavigationBar
  // class methods
  +[_SFBrowserNavigationBar _metricsCategory]

  // instance methods
  -[_SFBrowserNavigationBar newTextField]
  -[_SFBrowserNavigationBar placeholderHorizontalInset]


_SFFolderPickerTableViewCellLayoutManager : UITableViewCellLayoutManagerValue1
  // class methods
  +[_SFFolderPickerTableViewCellLayoutManager indentationWidth]

  // instance methods
  -[_SFFolderPickerTableViewCellLayoutManager _layoutMarginsForCell:]
  -[_SFFolderPickerTableViewCellLayoutManager textRectForCell:rowWidth:forSizing:]
  -[_SFFolderPickerTableViewCellLayoutManager layoutSubviewsOfCell:]


SFFormAutoFillFrame : NSObject <WBSFormAutoFillFrame>
 @property  WKWebProcessPlugInFrame *plugInFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutoFillFrame autoFillFrameWithWebProcessPlugInFrame:]

  // instance methods
  -[SFFormAutoFillFrame .cxx_destruct]
  -[SFFormAutoFillFrame containsAnyFormElements]
  -[SFFormAutoFillFrame isEqual:]
  -[SFFormAutoFillFrame committedURL]
  -[SFFormAutoFillFrame frameRef]
  -[SFFormAutoFillFrame jsContextForMetadataControllerScriptWorld]
  -[SFFormAutoFillFrame enumerateChildFramesUsingBlock:]
  -[SFFormAutoFillFrame pageMainFrame]
  -[SFFormAutoFillFrame jsWrapperInMetadataControllerScriptWorldForNode:]
  -[SFFormAutoFillFrame plugInFrame]
  -[SFFormAutoFillFrame initWithWebProcessPlugInFrame:]
  -[SFFormAutoFillFrame _pageContoller]
  -[SFFormAutoFillFrame _formMetadataController]


_SFSecIdentityPreferencesController : NSObject
  // class methods
  +[_SFSecIdentityPreferencesController sharedPersistentSecIdentityPreferencesController]
  +[_SFSecIdentityPreferencesController ephemeralSecIdentityPreferencesController]

  // instance methods
  -[_SFSecIdentityPreferencesController .cxx_destruct]
  -[_SFSecIdentityPreferencesController saveShouldUseOnlyAvailableIdentityWithoutPrompting:forDomainAndPort:]
  -[_SFSecIdentityPreferencesController shouldUseOnlyAvailableIdentityWithoutPromptingForDomainAndPort:]
  -[_SFSecIdentityPreferencesController _initUsingEphemeralStorage:]


_SFAccountPickerTableViewController : _SFAccountTableViewController <SFAccountDetailViewControllerDelegate, SFAddSavedAccountViewControllerDelegate, _SFTableLinkableFooterViewDelegate>
 @property  <_SFAccountPickerTableViewControllerDelegate> *delegate
 @property  SFAccountPickerConfiguration *configuration
 @property  WBSSavedAccount *savedAccountToRemoveAfterCompletedUpgradeInDetailView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFAccountPickerTableViewController numberOfSectionsInTableView:]
  -[_SFAccountPickerTableViewController configuration]
  -[_SFAccountPickerTableViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]
  -[_SFAccountPickerTableViewController tableView:numberOfRowsInSection:]
  -[_SFAccountPickerTableViewController tableView:titleForHeaderInSection:]
  -[_SFAccountPickerTableViewController tableView:canPerformAction:forRowAtIndexPath:withSender:]
  -[_SFAccountPickerTableViewController .cxx_destruct]
  -[_SFAccountPickerTableViewController tableView:didSelectRowAtIndexPath:]
  -[_SFAccountPickerTableViewController viewDidLoad]
  -[_SFAccountPickerTableViewController _accountStoreDidChange]
  -[_SFAccountPickerTableViewController tableView:cellForRowAtIndexPath:]
  -[_SFAccountPickerTableViewController tableView:accessoryButtonTappedForRowWithIndexPath:]
  -[_SFAccountPickerTableViewController setDelegate:]
  -[_SFAccountPickerTableViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[_SFAccountPickerTableViewController tableView:viewForFooterInSection:]
  -[_SFAccountPickerTableViewController viewWillDisappear:]
  -[_SFAccountPickerTableViewController initWithConfiguration:]
  -[_SFAccountPickerTableViewController viewWillAppear:]
  -[_SFAccountPickerTableViewController delegate]
  -[_SFAccountPickerTableViewController dealloc]
  -[_SFAccountPickerTableViewController _cancel]
  -[_SFAccountPickerTableViewController viewDidDisappear:]
  -[_SFAccountPickerTableViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[_SFAccountPickerTableViewController handleContextMenuDeleteForIndexPath:]
  -[_SFAccountPickerTableViewController searchPatternDidUpdate]
  -[_SFAccountPickerTableViewController _reloadSavedAccounts]
  -[_SFAccountPickerTableViewController _addNavigationBarItemTapped:]
  -[_SFAccountPickerTableViewController addSavedAccountViewControllerDidFinish:withSavedAccount:]
  -[_SFAccountPickerTableViewController linkableFooterViewDidInteractWithLink:]
  -[_SFAccountPickerTableViewController _updateMatchingPasswords]
  -[_SFAccountPickerTableViewController _deletePasswordAtIndexPath:]
  -[_SFAccountPickerTableViewController _presentAddPasswordViewController]
  -[_SFAccountPickerTableViewController _didPickSavedAccount:]
  -[_SFAccountPickerTableViewController _updateSections]
  -[_SFAccountPickerTableViewController _rowTypeForIndexPath:]
  -[_SFAccountPickerTableViewController _savedAccountForIndexPath:]
  -[_SFAccountPickerTableViewController _shouldShowPasswordsMatchingHintStringsSection]


_SFWebExtensionSettingsAlertItem : _SFSettingsAlertItem
 @property  WBSWebExtensionData *extension

  // class methods
  +[_SFWebExtensionSettingsAlertItem buttonWithTitle:textStyle:icon:extension:handler:]

  // instance methods
  -[_SFWebExtensionSettingsAlertItem .cxx_destruct]
  -[_SFWebExtensionSettingsAlertItem extension]


_SFWebExtensionPopupViewController : UIViewController <UIAdaptivePresentationControllerDelegate, UIPopoverPresentationControllerDelegate>
 @property  WKWebView *popupWebView
 @property  <WBSWebExtensionWindow> *window
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebExtensionPopupViewController presentationController:viewControllerForAdaptivePresentationStyle:]
  -[_SFWebExtensionPopupViewController _presentationController:prepareAdaptivePresentationController:]
  -[_SFWebExtensionPopupViewController .cxx_destruct]
  -[_SFWebExtensionPopupViewController dealloc]
  -[_SFWebExtensionPopupViewController adaptivePresentationStyleForPresentationController:traitCollection:]
  -[_SFWebExtensionPopupViewController window]
  -[_SFWebExtensionPopupViewController observeValueForKeyPath:ofObject:change:context:]
  -[_SFWebExtensionPopupViewController _dismissPopup]
  -[_SFWebExtensionPopupViewController _showExtensionPopupIfNeededAndUpdateContentSize]
  -[_SFWebExtensionPopupViewController _viewControllerDismissalTransitionDidEnd:]
  -[_SFWebExtensionPopupViewController disconnectFromWebExtension]
  -[_SFWebExtensionPopupViewController _contentSizeDidStabilize]
  -[_SFWebExtensionPopupViewController _displayPopup]
  -[_SFWebExtensionPopupViewController _updatePopoverContentSizeIfNecessary]
  -[_SFWebExtensionPopupViewController _updateDetentForSheetPresentationController:]
  -[_SFWebExtensionPopupViewController initWithPopupURL:webExtension:window:parentViewController:popoverSourceInfo:]
  -[_SFWebExtensionPopupViewController popupWebView]


_SFWebExtensionActivity : UIActivity
 @property  UIActivityViewController *parentViewController

  // instance methods
  -[_SFWebExtensionActivity .cxx_destruct]
  -[_SFWebExtensionActivity activityType]
  -[_SFWebExtensionActivity canPerformWithActivityItems:]
  -[_SFWebExtensionActivity performActivity]
  -[_SFWebExtensionActivity _activityImage]
  -[_SFWebExtensionActivity setParentViewController:]
  -[_SFWebExtensionActivity _managesOwnPresentation]
  -[_SFWebExtensionActivity _isEnabled]
  -[_SFWebExtensionActivity _isDisabled]
  -[_SFWebExtensionActivity parentViewController]
  -[_SFWebExtensionActivity activityTitle]
  -[_SFWebExtensionActivity _wantsOriginalImageColor]
  -[_SFWebExtensionActivity _activityBadgeText]
  -[_SFWebExtensionActivity _activityBadgeColor]
  -[_SFWebExtensionActivity _activityBadgeTextColor]
  -[_SFWebExtensionActivity _activityStatusImage]
  -[_SFWebExtensionActivity _activityStatusTintColor]
  -[_SFWebExtensionActivity _reloadActivitySoon]
  -[_SFWebExtensionActivity _reloadActivity]
  -[_SFWebExtensionActivity initWithPageMenuController:webExtension:tab:]


SFWebExtensionPageMenuController : WBSWebExtensionToolbarItem <WBSWebExtensionToolbarItemImplementation, WKUIDelegate>
 @property  <WBSWebExtensionWindow> *windowDisplayingPopupWebView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFWebExtensionPageMenuController badgeViewForText:]
  +[SFWebExtensionPageMenuController _imageViewForWarningTriangleImage:]

  // instance methods
  -[SFWebExtensionPageMenuController .cxx_destruct]
  -[SFWebExtensionPageMenuController initWithExtension:]
  -[SFWebExtensionPageMenuController webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:]
  -[SFWebExtensionPageMenuController webViewDidClose:]
  -[SFWebExtensionPageMenuController alertItemForTab:]
  -[SFWebExtensionPageMenuController dismissPopupImmediatelyIfNecessary]
  -[SFWebExtensionPageMenuController popupWebView]
  -[SFWebExtensionPageMenuController iconForTab:]
  -[SFWebExtensionPageMenuController performActionForTab:parentViewController:popoverSourceInfo:]
  -[SFWebExtensionPageMenuController shouldShowWarningTriangleImageForTab:]
  -[SFWebExtensionPageMenuController iconForTab:size:]
  -[SFWebExtensionPageMenuController _loadWebExtensionPopupURL:parentViewController:popoverSourceInfo:forTab:]
  -[SFWebExtensionPageMenuController _createTabWithURL:]
  -[SFWebExtensionPageMenuController didSetBadgeText:forTabWithIdentifier:]
  -[SFWebExtensionPageMenuController didSetEnabledState:forTabWithIdentifier:]
  -[SFWebExtensionPageMenuController didSetIcon:forTabWithIdentifier:]
  -[SFWebExtensionPageMenuController popupDidNavigateRequestingNewWindowToURL:]
  -[SFWebExtensionPageMenuController activityForTab:]
  -[SFWebExtensionPageMenuController windowDisplayingPopupWebView]
  -[SFWebExtensionPageMenuController showingExtensionPopup]
  -[SFWebExtensionPageMenuController webExtension]


_SFPerSitePreferencesUtilities : NSObject
  // class methods
  +[_SFPerSitePreferencesUtilities isBinaryPreferenceValueOn:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities preferenceValueForBoolValue:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities preferenceValueForPSSpecifierValue:specifier:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities specifierValueForSpecifier:preferenceValue:preference:preferenceManager:]


_SFSaveToFilesOperation : NSObject <UIDocumentPickerDelegate, _SFDownloadPlaceholderImporter>
 @property  <_SFSaveToFilesOperationDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSaveToFilesOperation .cxx_destruct]
  -[_SFSaveToFilesOperation setDelegate:]
  -[_SFSaveToFilesOperation delegate]
  -[_SFSaveToFilesOperation documentPickerWasCancelled:]
  -[_SFSaveToFilesOperation documentPicker:didPickDocumentsAtURLs:]
  -[_SFSaveToFilesOperation start]
  -[_SFSaveToFilesOperation dealloc]
  -[_SFSaveToFilesOperation initWithActivityItemProviderCollection:]
  -[_SFSaveToFilesOperation _showDocumentPickerForFileURL:sourceURL:willStartDownload:]
  -[_SFSaveToFilesOperation _finishWithURL:]
  -[_SFSaveToFilesOperation _copyFileData:]
  -[_SFSaveToFilesOperation _temporaryFileWithName:]
  -[_SFSaveToFilesOperation importPlaceholderForDownload:fromURL:completionHandler:]


_SFNavigationBarTheme : _SFBarTheme
 @property  long long platterOverrideUserInterfaceStyle
 @property  long long platterTextFieldOverrideUserInterfaceStyle
 @property  long long platterKeyboardOverrideAppearance
 @property  BOOL backdropIsExtreme
 @property  BOOL backdropIsRed
 @property  BOOL backdropIsGreen
 @property  UIColor *textColor
 @property  UIColor *secureTextColor
 @property  UIColor *warningTextColor
 @property  UIColor *annotationTextColor
 @property  UIColor *progressBarTintColor
 @property  BOOL platterBackdropIsDark
 @property  UIColor *platterTextColor
 @property  UIColor *platterSecureTextColor
 @property  UIColor *platterWarningTextColor
 @property  UIColor *platterAnnotationTextColor
 @property  UIColor *platterPlaceholderTextColor
 @property  UIColor *platterSelectionColor

  // instance methods
  -[_SFNavigationBarTheme initWithBarTintStyle:preferredBarTintColor:controlsTintColor:]
  -[_SFNavigationBarTheme progressBarTintColor]
  -[_SFNavigationBarTheme secureTextColor]
  -[_SFNavigationBarTheme platterSecureTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme platterTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme .cxx_destruct]
  -[_SFNavigationBarTheme textColor]
  -[_SFNavigationBarTheme platterPlaceholderTextColor]
  -[_SFNavigationBarTheme warningTextColor]
  -[_SFNavigationBarTheme platterKeyboardOverrideAppearance]
  -[_SFNavigationBarTheme _colorForPlatterTextColor:regularColor:withPlatterAlpha:]
  -[_SFNavigationBarTheme platterSelectionColor]
  -[_SFNavigationBarTheme annotationTextColor]
  -[_SFNavigationBarTheme annotationTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme platterTextColor]
  -[_SFNavigationBarTheme backdropIsExtreme]
  -[_SFNavigationBarTheme platterTextFieldOverrideUserInterfaceStyle]
  -[_SFNavigationBarTheme platterBackdropIsDark]
  -[_SFNavigationBarTheme backdropIsGreen]
  -[_SFNavigationBarTheme platterWarningTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme backdropIsRed]
  -[_SFNavigationBarTheme platterOverrideUserInterfaceStyle]
  -[_SFNavigationBarTheme URLAccessoryButtonTintColorForInputMode:]
  -[_SFNavigationBarTheme platterSecureTextColor]
  -[_SFNavigationBarTheme platterAnnotationTextColor]
  -[_SFNavigationBarTheme platterWarningTextColor]


SFDownloadFile : NSObject <NSFilePresenter>
 @property  <SFDownloadFileDelegate> *delegate
 @property  NSURL *URL
 @property  NSData *bookmarkData
 @property  NSURL *presentedItemURL
 @property  NSOperationQueue *presentedItemOperationQueue
 @property  NSURL *primaryPresentedItemURL
 @property  NSSet *observedPresentedItemUbiquityAttributes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDownloadFile _resume]
  -[SFDownloadFile presentedItemURL]
  -[SFDownloadFile accommodatePresentedItemDeletionWithCompletionHandler:]
  -[SFDownloadFile presentedItemOperationQueue]
  -[SFDownloadFile .cxx_destruct]
  -[SFDownloadFile bookmarkData]
  -[SFDownloadFile setDelegate:]
  -[SFDownloadFile presentedItemDidChange]
  -[SFDownloadFile _suspend]
  -[SFDownloadFile presentedItemDidMoveToURL:]
  -[SFDownloadFile URL]
  -[SFDownloadFile delegate]
  -[SFDownloadFile dealloc]
  -[SFDownloadFile invalidate]
  -[SFDownloadFile initWithURL:]
  -[SFDownloadFile initWithURL:bookmarkData:]
  -[SFDownloadFile initWithBookmarkData:]


SFTelephonyURLRequest : NSObject
 @property  NSString *successNotificationName
 @property  NSString *failureNotificationName
 @property  @? completionHandler

  // instance methods
  -[SFTelephonyURLRequest .cxx_destruct]
  -[SFTelephonyURLRequest initWithCompletionHandler:]
  -[SFTelephonyURLRequest setCompletionHandler:]
  -[SFTelephonyURLRequest completionHandler]
  -[SFTelephonyURLRequest successNotificationName]
  -[SFTelephonyURLRequest setSuccessNotificationName:]
  -[SFTelephonyURLRequest failureNotificationName]
  -[SFTelephonyURLRequest setFailureNotificationName:]


SFTelephonyURLHandler : NSObject
 @property  NSMutableSet *pendingRequests

  // class methods
  +[SFTelephonyURLHandler sharedInstance]

  // instance methods
  -[SFTelephonyURLHandler setPendingRequests:]
  -[SFTelephonyURLHandler pendingRequests]
  -[SFTelephonyURLHandler .cxx_destruct]
  -[SFTelephonyURLHandler init]
  -[SFTelephonyURLHandler openURLForDialRequest:withScene:completionHandler:]
  -[SFTelephonyURLHandler addObserverForRequest:]
  -[SFTelephonyURLHandler removeObserverForRequest:]


SFInteractiveDismissController : UIPercentDrivenInteractiveTransition <UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
 @property  unsigned long sampleCount
 @property  double totalDistance
 @property  double skipTimeStamp
 @property  double previousTimeStamp
 @property  double previousDisplacement
 @property  double previousVelocity
 @property  double previousAcceleration
 @property  double averageVelocity
 @property  double averageAcceleration
 @property  UIScreenEdgePanGestureRecognizer *edgeSwipeGestureRecognizer
 @property  UIViewController *viewControllerToBeDismissed
 @property  UIView *edgeSwipeView
 @property  <SFInteractiveDismissControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFInteractiveDismissController animationControllerForPresentedController:presentingController:sourceController:]
  -[SFInteractiveDismissController averageAcceleration]
  -[SFInteractiveDismissController setPreviousDisplacement:]
  -[SFInteractiveDismissController setPreviousVelocity:]
  -[SFInteractiveDismissController animationControllerForDismissedController:]
  -[SFInteractiveDismissController previousAcceleration]
  -[SFInteractiveDismissController setPreviousAcceleration:]
  -[SFInteractiveDismissController totalDistance]
  -[SFInteractiveDismissController setPreviousTimeStamp:]
  -[SFInteractiveDismissController _updateStatistics:firstSample:finalSample:]
  -[SFInteractiveDismissController popGesture:withRemainingDuration:shouldPopWithVelocity:]
  -[SFInteractiveDismissController previousDisplacement]
  -[SFInteractiveDismissController _translationCoefficient]
  -[SFInteractiveDismissController setSkipTimeStamp:]
  -[SFInteractiveDismissController interactionControllerForDismissal:]
  -[SFInteractiveDismissController skipTimeStamp]
  -[SFInteractiveDismissController edgeSwipeView]
  -[SFInteractiveDismissController previousVelocity]
  -[SFInteractiveDismissController setTotalDistance:]
  -[SFInteractiveDismissController setViewControllerToBeDismissed:]
  -[SFInteractiveDismissController previousTimeStamp]
  -[SFInteractiveDismissController setAverageAcceleration:]
  -[SFInteractiveDismissController setAverageVelocity:]
  -[SFInteractiveDismissController averageVelocity]
  -[SFInteractiveDismissController setSampleCount:]
  -[SFInteractiveDismissController sampleCount]
  -[SFInteractiveDismissController transitionDuration:]
  -[SFInteractiveDismissController .cxx_destruct]
  -[SFInteractiveDismissController startInteractiveTransition:]
  -[SFInteractiveDismissController cancelInteractiveTransition]
  -[SFInteractiveDismissController animateTransition:]
  -[SFInteractiveDismissController finishInteractiveTransition]
  -[SFInteractiveDismissController _percentComplete:]
  -[SFInteractiveDismissController setDelegate:]
  -[SFInteractiveDismissController swiped:]
  -[SFInteractiveDismissController _animateDismissalCompleteTransition]
  -[SFInteractiveDismissController init]
  -[SFInteractiveDismissController setEdgeSwipeView:]
  -[SFInteractiveDismissController _animateDismissalCancelTransition]
  -[SFInteractiveDismissController velocityForStatistics]
  -[SFInteractiveDismissController _dismissAnimateTransition:]
  -[SFInteractiveDismissController delegate]
  -[SFInteractiveDismissController viewControllerToBeDismissed]
  -[SFInteractiveDismissController _presentAnimateTransition:]
  -[SFInteractiveDismissController edgeSwipeGestureRecognizer]
  -[SFInteractiveDismissController translationForStatistics]


_SFLinkRedirectionResolver : NSObject <SFSafariViewControllerDelegateInternal>
 @property  SFSafariViewController *safariViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFLinkRedirectionResolver .cxx_destruct]
  -[_SFLinkRedirectionResolver safariViewController:didResolveRedirectionWithURL:appLink:]
  -[_SFLinkRedirectionResolver initWithURL:completionHandler:]
  -[_SFLinkRedirectionResolver safariViewController]


SFAccountPickerViewController : UINavigationController <_SFAccountPickerTableViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAccountPickerViewController .cxx_destruct]
  -[SFAccountPickerViewController _dismiss]
  -[SFAccountPickerViewController _appDidEnterBackground:]
  -[SFAccountPickerViewController dealloc]
  -[SFAccountPickerViewController initWithConfiguration:completionHandler:]
  -[SFAccountPickerViewController accountPickerTableViewControllerDidCancel:]
  -[SFAccountPickerViewController accountPickerTableViewController:didPickSavedAccount:]


_SFWebProcessPlugInAutoFillPageController : _SFWebProcessPlugInPageController <SFFormAutoFiller, SFInjectedJavaScriptWebProcessController>
 @property  _SFFormMetadataController *formMetadataController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebProcessPlugInAutoFillPageController annotateForm:inFrame:withValues:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didSameDocumentNavigation:forFrame:]
  -[_SFWebProcessPlugInAutoFillPageController .cxx_destruct]
  -[_SFWebProcessPlugInAutoFillPageController autoFillForm:inFrame:withGeneratedPassword:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillOneTimeCodeFieldsInFrame:withValue:shouldSubmit:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didRemoveFrameFromHierarchy:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didCommitLoadForFrame:]
  -[_SFWebProcessPlugInAutoFillPageController runJavaScriptForActivity:withScript:object:invokeMethod:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:]
  -[_SFWebProcessPlugInAutoFillPageController willDestroyBrowserContextController:]
  -[_SFWebProcessPlugInAutoFillPageController initWithPlugIn:contextController:]
  -[_SFWebProcessPlugInAutoFillPageController setFormControls:areAutoFilled:andClearField:inFrame:]
  -[_SFWebProcessPlugInAutoFillPageController fillTextField:inFrame:withGeneratedPassword:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormSynchronouslyInFrame:withValues:]
  -[_SFWebProcessPlugInAutoFillPageController focusFormForStreamlinedLogin:inFrame:]
  -[_SFWebProcessPlugInAutoFillPageController removeAutomaticPasswordVisualTreatmentInFrame:passwordControlUniqueIDs:]
  -[_SFWebProcessPlugInAutoFillPageController automaticPasswordSheetDimissedInFrame:focusedPasswordControlUniqueID:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:selectFieldAfterFilling:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:submitForm:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:fieldsToObscure:submitForm:]
  -[_SFWebProcessPlugInAutoFillPageController collectURLsForPrefillingAtURL:]
  -[_SFWebProcessPlugInAutoFillPageController collectFormMetadataForPrefillingAtURL:]
  -[_SFWebProcessPlugInAutoFillPageController collectMetadataForTextField:inFrame:atURL:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController collectFormMetadataForPageLevelAutoFillAtURL:]
  -[_SFWebProcessPlugInAutoFillPageController clearAutoFillMetadata]
  -[_SFWebProcessPlugInAutoFillPageController substitutePasswordElementsWithAutomaticPasswordElementsInFrame:formID:focusedPasswordControlUniqueID:passwordControlUniqueIDs:automaticPassword:blurAfterSubstitution:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController removeAutomaticPasswordElementsInFrame:focusedPasswordControlUniqueID:passwordControlUniqueIDs:]
  -[_SFWebProcessPlugInAutoFillPageController formMetadataController]
  -[_SFWebProcessPlugInAutoFillPageController setFormMetadataController:]


_SFDownloadIconCache : NSObject
  // instance methods
  -[_SFDownloadIconCache iconForSource:]
  -[_SFDownloadIconCache _didGenerateThumbnail:forSource:]
  -[_SFDownloadIconCache .cxx_destruct]
  -[_SFDownloadIconCache _generateThumbnailForURL:completionHandler:]
  -[_SFDownloadIconCache init]
  -[_SFDownloadIconCache _genericIconForUTI:]
  -[_SFDownloadIconCache _lookupGenericIconForType:]
  -[_SFDownloadIconCache _startThumbnailRequestForSource:reportGenericIcons:]
  -[_SFDownloadIconCache addObserver:]
  -[_SFDownloadIconCache removeObserver:]
  -[_SFDownloadIconCache regenerateIconForSource:]


SFExternalPasswordCredentialRemoteViewController : SFPasswordRemoteViewController <SFExternalPasswordCredentialRemoteViewControllerProtocol>
 @property  <SFExternalPasswordCredentialRemoteViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFExternalPasswordCredentialRemoteViewController exportedInterface]
  +[SFExternalPasswordCredentialRemoteViewController serviceViewControllerInterface]
  +[SFExternalPasswordCredentialRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFExternalPasswordCredentialRemoteViewController _canShowWhileLocked]
  -[SFExternalPasswordCredentialRemoteViewController presentExternalPasswordCredentialRemoteViewController]


SFReaderTextSizeStepperController : NSObject <_SFSettingsAlertStepperController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFReaderTextSizeStepperController .cxx_destruct]
  -[SFReaderTextSizeStepperController prepareStepper:]
  -[SFReaderTextSizeStepperController incrementValue:]
  -[SFReaderTextSizeStepperController decrementValue:]
  -[SFReaderTextSizeStepperController initWithReaderContext:]
  -[SFReaderTextSizeStepperController _updateStepperControls:]


_SFDownloadManager : NSObject <_SFDownloadDelegate>
 @property  NSDate *_lastUnviewedDownloadDate
 @property  NSURL *downloadsRootURL
 @property  <_SFDownloadDelegate> *extraDownloadDelegate
 @property  NSArray *downloads
 @property  _SFDownloadIconCache *iconCache
 @property  double totalProgress
 @property  BOOL hasUnviewedDownloads
 @property  unsigned long runningDownloadsCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownloadManager sharedManager]
  +[_SFDownloadManager defaultDownloadsHistoryURL]
  +[_SFDownloadManager downloadRepresentationsAtURL:]

  // instance methods
  -[_SFDownloadManager downloadDidStart:]
  -[_SFDownloadManager downloads]
  -[_SFDownloadManager _canExpireDownloadOnCompletion:]
  -[_SFDownloadManager iconCache]
  -[_SFDownloadManager _loadDownloadHistoryAsynchronous:]
  -[_SFDownloadManager hasUnviewedDownloads]
  -[_SFDownloadManager _setHasUnviewedDownloadsIfNeeded]
  -[_SFDownloadManager _containerDirectoryForDownload:]
  -[_SFDownloadManager shouldExcludeDownloadFromFileSystem:]
  -[_SFDownloadManager downloadDidFinish:]
  -[_SFDownloadManager totalProgress]
  -[_SFDownloadManager downloadContentsDidChange:]
  -[_SFDownloadManager _busyDownloads]
  -[_SFDownloadManager .cxx_destruct]
  -[_SFDownloadManager _removeDeletedDownloads]
  -[_SFDownloadManager setExtraDownloadDelegate:]
  -[_SFDownloadManager savePendingChangesBeforeTermination]
  -[_SFDownloadManager _lastUnviewedDownloadDate]
  -[_SFDownloadManager removeDownloads:]
  -[_SFDownloadManager initAsReadonly:]
  -[_SFDownloadManager _addDownload:]
  -[_SFDownloadManager downloadDidResume:]
  -[_SFDownloadManager downloadDidImportFileToDownloadsFolder:]
  -[_SFDownloadManager shouldExcludeDownloadFromList:]
  -[_SFDownloadManager removeDownloadsStartedAfterDate:]
  -[_SFDownloadManager didBeginViewingDownloads]
  -[_SFDownloadManager _setLastUnviewedDownloadDate:]
  -[_SFDownloadManager downloadsRootURL]
  -[_SFDownloadManager _noteDownloadsChanged]
  -[_SFDownloadManager deferAddingDownloadWhenStarted:]
  -[_SFDownloadManager runningDownloadsCount]
  -[_SFDownloadManager createDirectoryForDownload:completionHandler:]
  -[_SFDownloadManager _dataForPersistingToHistory]
  -[_SFDownloadManager reloadDownloadsSynchronously]
  -[_SFDownloadManager _removeOldDownloadsAndUpdateTimerIfNeeded]
  -[_SFDownloadManager getDownloadsWithCompletionHandler:]
  -[_SFDownloadManager downloadShouldImportPlaceholderToDownloadsFolder:]
  -[_SFDownloadManager didEndViewingDownloads]
  -[_SFDownloadManager _startUpdateTotalProgressTimerIfNeeded]
  -[_SFDownloadManager _updateTotalProgress:]
  -[_SFDownloadManager dealloc]
  -[_SFDownloadManager _calculateTotalProgress]
  -[_SFDownloadManager downloadShouldContinueAfterReceivingResponse:decisionHandler:]
  -[_SFDownloadManager downloadDidFail:]
  -[_SFDownloadManager extraDownloadDelegate]
  -[_SFDownloadManager downloadWillBeDeleted:]
  -[_SFDownloadManager downloadDidReceiveResponse:]
  -[_SFDownloadManager setHasUnviewedDownloads:]
  -[_SFDownloadManager observeValueForKeyPath:ofObject:change:context:]
  -[_SFDownloadManager _applicationDidEnterBackground:]
  -[_SFDownloadManager _loadDownloadHistory]


_SFSharingLinkExtractor : NSObject
  // instance methods
  -[_SFSharingLinkExtractor initWithWebView:]
  -[_SFSharingLinkExtractor .cxx_destruct]
  -[_SFSharingLinkExtractor fetchSharingLinkWithCompletionHandler:]


SFSafariViewControllerActivityButton : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL _fieldsAreValid
 @property  UIImage *templateImage
 @property  NSString *extensionIdentifier

  // class methods
  +[SFSafariViewControllerActivityButton supportsSecureCoding]

  // instance methods
  -[SFSafariViewControllerActivityButton initWithCoder:]
  -[SFSafariViewControllerActivityButton .cxx_destruct]
  -[SFSafariViewControllerActivityButton copyWithZone:]
  -[SFSafariViewControllerActivityButton extensionIdentifier]
  -[SFSafariViewControllerActivityButton encodeWithCoder:]
  -[SFSafariViewControllerActivityButton _fieldsAreValid]
  -[SFSafariViewControllerActivityButton templateImage]
  -[SFSafariViewControllerActivityButton initWithTemplateImage:extensionIdentifier:]


_SFBrowserDocumentActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFBrowserDocumentActivityItemProvider .cxx_destruct]
  -[_SFBrowserDocumentActivityItemProvider item]
  -[_SFBrowserDocumentActivityItemProvider initWithBrowserDocument:]


_SFSafariDataSharingController : NSObject
  // class methods
  +[_SFSafariDataSharingController sharedController]

  // instance methods
  -[_SFSafariDataSharingController .cxx_destruct]
  -[_SFSafariDataSharingController init]
  -[_SFSafariDataSharingController systemDataContainerURLWithAppBundleID:]
  -[_SFSafariDataSharingController checkInAppBundleIDIfNeeded:]
  -[_SFSafariDataSharingController _loadAppBundlesWithSeparateDataIfNeeded]
  -[_SFSafariDataSharingController clearAllWebsitesData]


_SFAddBookmarkActivity : _SFActivity <_SFSingleBookmarkNavigationControllerDelegate>
 @property  _SFSingleBookmarkNavigationController *bookmarkNavigationController

  // instance methods
  -[_SFAddBookmarkActivity activityViewController]
  -[_SFAddBookmarkActivity .cxx_destruct]
  -[_SFAddBookmarkActivity _systemImageName]
  -[_SFAddBookmarkActivity activityType]
  -[_SFAddBookmarkActivity canPerformWithActivityItems:]
  -[_SFAddBookmarkActivity addBookmarkNavControllerCanSaveBookmarkChanges:]
  -[_SFAddBookmarkActivity activityTitle]
  -[_SFAddBookmarkActivity addBookmarkNavController:didFinishWithResult:bookmark:]
  -[_SFAddBookmarkActivity _embeddedActivityViewController]
  -[_SFAddBookmarkActivity bookmarkNavigationController]


_SFDownloadDispatcher : NSObject <_WKDownloadDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownloadDispatcher sharedDownloadDispatcher]

  // instance methods
  -[_SFDownloadDispatcher setPendingDownload:forWebView:]
  -[_SFDownloadDispatcher startDownloadForCurrentURLFromWebView:]
  -[_SFDownloadDispatcher startDownloadFromWebView:URL:]
  -[_SFDownloadDispatcher _downloadDidCancel:]
  -[_SFDownloadDispatcher .cxx_destruct]
  -[_SFDownloadDispatcher downloadFromWKDownload:userInitiatedAction:]
  -[_SFDownloadDispatcher init]
  -[_SFDownloadDispatcher _downloadDidFinish:]
  -[_SFDownloadDispatcher _downloadDidStart:]
  -[_SFDownloadDispatcher _downloadProcessDidCrash:]
  -[_SFDownloadDispatcher _download:didFailWithError:]
  -[_SFDownloadDispatcher prepareForDownloadFromWebView:request:MIMEType:uti:userInitiatedAction:]
  -[_SFDownloadDispatcher _download:didReceiveResponse:]
  -[_SFDownloadDispatcher registerResumedDownload:]
  -[_SFDownloadDispatcher _download:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]
  -[_SFDownloadDispatcher _download:decideDestinationWithSuggestedFilename:completionHandler:]


_SFRequestDesktopSiteQuirksManager : NSObject
  // class methods
  +[_SFRequestDesktopSiteQuirksManager sharedManager]

  // instance methods
  -[_SFRequestDesktopSiteQuirksManager quirksValueForDomain:completionHandler:]
  -[_SFRequestDesktopSiteQuirksManager .cxx_destruct]
  -[_SFRequestDesktopSiteQuirksManager getAllQuirkValuesWithCompletionHandler:]
  -[_SFRequestDesktopSiteQuirksManager init]


_SFQuickLookDocumentWriter : NSObject
 @property  NSString *filePathAccessedOnDispatchQueue
 @property  _SFQuickLookDocument *quickLookDocument
 @property  BOOL hasFinishedWriting

  // instance methods
  -[_SFQuickLookDocumentWriter quickLookDocument]
  -[_SFQuickLookDocumentWriter .cxx_destruct]
  -[_SFQuickLookDocumentWriter initWithFileName:uti:]
  -[_SFQuickLookDocumentWriter writeDataAndClose:completionHandler:]
  -[_SFQuickLookDocumentWriter setFilePathAccessedOnDispatchQueue:]
  -[_SFQuickLookDocumentWriter filePathAccessedOnDispatchQueue]
  -[_SFQuickLookDocumentWriter hasFinishedWriting]


_SFNavigationResult : NSObject
 @property  BOOL appliesOneTimeUserInitiatedActionPolicy
 @property  LSApplicationProxy *externalApplication
 @property  long long externalApplicationCategory
 @property  BOOL isRedirectToAppleServices
 @property  long long type
 @property  NSURL *URL
 @property  WBSAppLink *appLink
 @property  BOOL loadWasUserDriven

  // class methods
  +[_SFNavigationResult resultOfLoadingRequest:isMainFrame:disallowRedirectToExternalApps:preferredApplicationBundleIdentifier:redirectDecisionHandler:]
  +[_SFNavigationResult determineResultOfLoadingRequest:isMainFrame:disallowRedirectToExternalApps:preferredApplicationBundleIdentifier:redirectDecisionHandler:completionHandler:]
  +[_SFNavigationResult resultWithAppLink:]
  +[_SFNavigationResult resultOfType:withURL:]
  +[_SFNavigationResult resultWithRedirectToExternalURL:preferredApplicationBundleIdentifier:]

  // instance methods
  -[_SFNavigationResult appLink]
  -[_SFNavigationResult .cxx_destruct]
  -[_SFNavigationResult URL]
  -[_SFNavigationResult type]
  -[_SFNavigationResult externalApplication]
  -[_SFNavigationResult appliesOneTimeUserInitiatedActionPolicy]
  -[_SFNavigationResult externalApplicationCategory]
  -[_SFNavigationResult shouldPromptWithPolicy:telephonyNavigationPolicy:userAction:inBackground:]
  -[_SFNavigationResult isRedirectToAppleServices]
  -[_SFNavigationResult _initWithType:URL:externalApplication:appLink:]
  -[_SFNavigationResult loadWasUserDriven]
  -[_SFNavigationResult setLoadWasUserDriven:]


_SFSearchEngineController : NSObject <WBSSearchProviderContext>
 @property  NSArray *engines
 @property  NSArray *enginesAvailableForUnifiedFieldSearching
 @property  NSArray *searchEngineNames
 @property  NSString *defaultSearchEngineName
 @property  _SFSearchEngineInfo *defaultSearchEngineIfPopulated
 @property  long long deviceType
 @property  NSString *countryCode
 @property  NSString *systemLanguage
 @property  NSDictionary *templateParameterValues
 @property  NSDictionary *carrierTemplateParameterValues
 @property  BOOL isChinaDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFSearchEngineController sharedInstance]
  +[_SFSearchEngineController sharedInstanceIfAvailable]
  +[_SFSearchEngineController _initializeSharedInstance]
  +[_SFSearchEngineController loadSystemLanguageProperties]
  +[_SFSearchEngineController _deviceRegionCodeIsChina]

  // instance methods
  -[_SFSearchEngineController searchEngineNames]
  -[_SFSearchEngineController reloadSearchEngines]
  -[_SFSearchEngineController _populateSearchEngines]
  -[_SFSearchEngineController deviceType]
  -[_SFSearchEngineController _setDefaultSearchEngine:]
  -[_SFSearchEngineController safeSearchRequestForSearchRequest:]
  -[_SFSearchEngineController _addAllWebSearchEngineInfosToArray:andAddUserVisibleWebSearchEngineInfosToArray:]
  -[_SFSearchEngineController templateParameterValues]
  -[_SFSearchEngineController countryCode]
  -[_SFSearchEngineController setDefaultSearchEngine:]
  -[_SFSearchEngineController defaultSearchEngine]
  -[_SFSearchEngineController .cxx_destruct]
  -[_SFSearchEngineController _postDefaultSearchEngineDidChange]
  -[_SFSearchEngineController _setEngines:defaultSearchEngineIndex:]
  -[_SFSearchEngineController engineInfoForScriptName:]
  -[_SFSearchEngineController init]
  -[_SFSearchEngineController enginesAvailableForUnifiedFieldSearching]
  -[_SFSearchEngineController isSearchProviderEnabled:]
  -[_SFSearchEngineController carrierTemplateParameterValues]
  -[_SFSearchEngineController _addSpecialSearchEnginesToArray:]
  -[_SFSearchEngineController _loadSystemPropertiesForSearchEngine:]
  -[_SFSearchEngineController isChinaDevice]
  -[_SFSearchEngineController _existingEngineInfoFor:]
  -[_SFSearchEngineController engines]
  -[_SFSearchEngineController defaultSearchEngineName]
  -[_SFSearchEngineController _getEngines:defaultSearchEngineIndex:]
  -[_SFSearchEngineController engineInfoFor:]
  -[_SFSearchEngineController systemLanguage]
  -[_SFSearchEngineController defaultSearchEngineIfPopulated]


SFBlockBasedPopoverSourceInfo : NSObject <_SFPopoverSourceInfo>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} popoverSourceRect
 @property  UIView *popoverSourceView
 @property  BOOL shouldDismissIfSourceRemovedAfterRepositioning
 @property  BOOL shouldPassthroughSuperview
 @property  BOOL shouldHideArrow
 @property  unsigned long permittedArrowDirections
 @property  long long provenance
 @property  UIBarButtonItem *barButtonItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBlockBasedPopoverSourceInfo .cxx_destruct]
  -[SFBlockBasedPopoverSourceInfo barButtonItem]
  -[SFBlockBasedPopoverSourceInfo popoverSourceView]
  -[SFBlockBasedPopoverSourceInfo permittedArrowDirections]
  -[SFBlockBasedPopoverSourceInfo provenance]
  -[SFBlockBasedPopoverSourceInfo popoverSourceRect]
  -[SFBlockBasedPopoverSourceInfo shouldPassthroughSuperview]
  -[SFBlockBasedPopoverSourceInfo shouldHideArrow]
  -[SFBlockBasedPopoverSourceInfo initWithSourceInfoProvider:]


SFNavigationBarMetrics : NSObject
  // instance methods
  -[SFNavigationBarMetrics .cxx_destruct]
  -[SFNavigationBarMetrics init]


_SFPopoverPresentationDelegate : NSObject <UIPopoverPresentationControllerDelegate>
 @property  BOOL popoverUsesAdaptivePresentationInCompact
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToURLOutlineInNavigationBar:usesAdaptivePresentationInCompact:]
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToReloadButtonInNavigationBar:]
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToURLOutlineInNavigationBar:]

  // instance methods
  -[_SFPopoverPresentationDelegate presentationControllerDidDismiss:]
  -[_SFPopoverPresentationDelegate presentationController:viewControllerForAdaptivePresentationStyle:]
  -[_SFPopoverPresentationDelegate popoverPresentationController:willRepositionPopoverToRect:inView:]
  -[_SFPopoverPresentationDelegate .cxx_destruct]
  -[_SFPopoverPresentationDelegate adaptivePresentationStyleForPresentationController:traitCollection:]
  -[_SFPopoverPresentationDelegate initWithSourceInfo:]
  -[_SFPopoverPresentationDelegate attachToPopoverPresentationController:]
  -[_SFPopoverPresentationDelegate setPopoverUsesAdaptivePresentationInCompact:]
  -[_SFPopoverPresentationDelegate updatePopoverPosition]
  -[_SFPopoverPresentationDelegate popoverUsesAdaptivePresentationInCompact]


_SFMicrodataExtractor : NSObject
  // class methods
  +[_SFMicrodataExtractor fetchDataWithJavaScriptController:completion:]


SFSafariViewControllerConfiguration : NSObject <NSSecureCoding, NSCopying>
 @property  long long _redirectNotificationBehavior
 @property  BOOL entersReaderIfAvailable
 @property  BOOL barCollapsingEnabled
 @property  SFSafariViewControllerActivityButton *activityButton
 @property  UIEventAttribution *eventAttribution

  // class methods
  +[SFSafariViewControllerConfiguration supportsSecureCoding]

  // instance methods
  -[SFSafariViewControllerConfiguration initWithCoder:]
  -[SFSafariViewControllerConfiguration .cxx_destruct]
  -[SFSafariViewControllerConfiguration init]
  -[SFSafariViewControllerConfiguration eventAttribution]
  -[SFSafariViewControllerConfiguration setEventAttribution:]
  -[SFSafariViewControllerConfiguration _isEphemeral]
  -[SFSafariViewControllerConfiguration copyWithZone:]
  -[SFSafariViewControllerConfiguration encodeWithCoder:]
  -[SFSafariViewControllerConfiguration _setPerformingAccountSecurityUpgrade:]
  -[SFSafariViewControllerConfiguration setEntersReaderIfAvailable:]
  -[SFSafariViewControllerConfiguration _setEphemeral:]
  -[SFSafariViewControllerConfiguration setBarCollapsingEnabled:]
  -[SFSafariViewControllerConfiguration _redirectNotificationBehavior]
  -[SFSafariViewControllerConfiguration barCollapsingEnabled]
  -[SFSafariViewControllerConfiguration activityButton]
  -[SFSafariViewControllerConfiguration entersReaderIfAvailable]
  -[SFSafariViewControllerConfiguration _isPerformingAccountSecurityUpgrade]
  -[SFSafariViewControllerConfiguration set_redirectNotificationBehavior:]
  -[SFSafariViewControllerConfiguration setActivityButton:]


_SFBookmarkTextEntryTableViewController : UITableViewController
  // instance methods
  -[_SFBookmarkTextEntryTableViewController tableView:numberOfRowsInSection:]
  -[_SFBookmarkTextEntryTableViewController .cxx_destruct]
  -[_SFBookmarkTextEntryTableViewController tableView:cellForRowAtIndexPath:]
  -[_SFBookmarkTextEntryTableViewController viewWillDisappear:]
  -[_SFBookmarkTextEntryTableViewController viewWillAppear:]
  -[_SFBookmarkTextEntryTableViewController dealloc]
  -[_SFBookmarkTextEntryTableViewController loadView]
  -[_SFBookmarkTextEntryTableViewController initWithBookmarkInfoViewField:text:autocapitalizationType:autocorrectionType:delegate:]
  -[_SFBookmarkTextEntryTableViewController _returnWasPressedInTextField:]


_SFWebView : WKWebView <SFDialogViewPresenting>
 @property  NSString *evOrganizationName
 @property  {UIEdgeInsets=dddd} hitTestInsets
 @property  long long navigationGesturePolicy
 @property  <_SFWebViewDelegate> *delegate
 @property  UIView *clippingView
 @property  double bottomBarHeightAboveKeyboard
 @property  BOOL obscuringContents
 @property  BOOL hasBeenInWindow
 @property  NSArray *callStackSymbolsForLastRemovalFromWindow
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebView evOrganizationName]
  -[_SFWebView hitTest:withEvent:]
  -[_SFWebView setPlaceholderImage:]
  -[_SFWebView setHitTestInsets:]
  -[_SFWebView inputAccessoryView]
  -[_SFWebView hasBeenInWindow]
  -[_SFWebView undoManager]
  -[_SFWebView _updateNavigationGesturesAllowed]
  -[_SFWebView scrollViewAtLocation:]
  -[_SFWebView setBottomBarHeightAboveKeyboard:]
  -[_SFWebView hitTestInsets]
  -[_SFWebView navigationGesturePolicy]
  -[_SFWebView _close]
  -[_SFWebView .cxx_destruct]
  -[_SFWebView webProcessIDForDialogController:]
  -[_SFWebView layoutSubviews]
  -[_SFWebView setDelegate:]
  -[_SFWebView didStartFormControlInteraction]
  -[_SFWebView becomeFirstResponder]
  -[_SFWebView dismissDialogView:withAdditionalAnimations:forDialogController:]
  -[_SFWebView isObscuringContents]
  -[_SFWebView _setObscuredInsets:]
  -[_SFWebView presentDialogView:withAdditionalAnimations:forDialogController:]
  -[_SFWebView setObscuringContents:]
  -[_SFWebView _isNavigationSwipeGestureRecognizer:]
  -[_SFWebView didEndFormControlInteraction]
  -[_SFWebView safeAreaInsetsDidChange]
  -[_SFWebView _enclosingViewForExposedRectComputation]
  -[_SFWebView delegate]
  -[_SFWebView bottomBarHeightAboveKeyboard]
  -[_SFWebView callStackSymbolsForLastRemovalFromWindow]
  -[_SFWebView didMoveToWindow]
  -[_SFWebView initWithFrame:configuration:]
  -[_SFWebView setNavigationGesturePolicy:]
  -[_SFWebView webui_canPromptForAccountSecurityRecommendation]
  -[_SFWebView setClippingView:]
  -[_SFWebView dealloc]
  -[_SFWebView setPlaceholderImage:offset:]
  -[_SFWebView setAllowsBackForwardNavigationGestures:]
  -[_SFWebView clippingView]
  -[_SFWebView setSuggestedFilenameForCurrentBackForwardListItem:]


_SFDropSession : NSObject
  // class methods
  +[_SFDropSession dropSession:loadObjectsUsingLocalObjectLoader:objectLoader:completionHandler:]
  +[_SFDropSession dropSession:containsItemsMatching:allowedTypeIdentifiers:allowedClasses:]


SFActionableSecurityRecommendationData : NSObject
 @property  SFAccountCellData *accountCellData
 @property  WBSPasswordWarning *warning
 @property  unsigned long eligibleAccountModificationActions
 @property  NSArray *items
 @property  NSExtension *extension
 @property  BOOL isUpgradeToSignInWithAppleAvailable
 @property  <SFActionableSecurityRecommendationDataDelegate> *delegate
 @property  BOOL didUpgradeToSignInWithApple
 @property  BOOL didUpgradeToStrongPassword

  // instance methods
  -[SFActionableSecurityRecommendationData items]
  -[SFActionableSecurityRecommendationData .cxx_destruct]
  -[SFActionableSecurityRecommendationData setDelegate:]
  -[SFActionableSecurityRecommendationData extension]
  -[SFActionableSecurityRecommendationData warning]
  -[SFActionableSecurityRecommendationData delegate]
  -[SFActionableSecurityRecommendationData accountCellData]
  -[SFActionableSecurityRecommendationData initWithAccountCellData:warning:delegate:]
  -[SFActionableSecurityRecommendationData cellForTableView:forCellType:]
  -[SFActionableSecurityRecommendationData setDidUpgradeToStrongPassword:]
  -[SFActionableSecurityRecommendationData didUpgradeToSignInWithApple]
  -[SFActionableSecurityRecommendationData didUpgradeToStrongPassword]
  -[SFActionableSecurityRecommendationData isUpgradeToSignInWithAppleAvailable]
  -[SFActionableSecurityRecommendationData setDidUpgradeToSignInWithApple:]
  -[SFActionableSecurityRecommendationData _fetchEligibleAccountModificationActionsForSavedAccount:]
  -[SFActionableSecurityRecommendationData eligibleAccountModificationActions]


SFContentBlockerState : NSObject <NSSecureCoding>
 @property  BOOL enabled

  // class methods
  +[SFContentBlockerState supportsSecureCoding]

  // instance methods
  -[SFContentBlockerState initWithCoder:]
  -[SFContentBlockerState isEnabled]
  -[SFContentBlockerState setEnabled:]
  -[SFContentBlockerState encodeWithCoder:]
  -[SFContentBlockerState initWithEnabledState:]


_SFImageActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFImageActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFImageActivityItemProvider initWithWebView:]
  -[_SFImageActivityItemProvider .cxx_destruct]
  -[_SFImageActivityItemProvider item]
  -[_SFImageActivityItemProvider _imageData]
  -[_SFImageActivityItemProvider activityViewControllerPlaceholderItem:]


_SFQuickLookDocumentView : UIScrollView <UIDragInteractionDelegate, UIDragInteractionDelegate_Private>
 @property  <_SFQuickLookDocumentViewDelegate> *quickLookDocumentViewDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFQuickLookDocumentView traitCollectionDidChange:]
  -[_SFQuickLookDocumentView .cxx_destruct]
  -[_SFQuickLookDocumentView dragInteraction:previewForLiftingItem:session:]
  -[_SFQuickLookDocumentView dragInteraction:itemsForBeginningSession:]
  -[_SFQuickLookDocumentView initWithFrame:]
  -[_SFQuickLookDocumentView _dragInteraction:dataOwnerForSession:]
  -[_SFQuickLookDocumentView _actionButtonTapped:]
  -[_SFQuickLookDocumentView setQuickLookDocumentViewDelegate:]
  -[_SFQuickLookDocumentView updateDocumentIcon:]
  -[_SFQuickLookDocumentView updateDocumentFileName:]
  -[_SFQuickLookDocumentView updateDocumentFileType:]
  -[_SFQuickLookDocumentView updateDocumentFileSize:]
  -[_SFQuickLookDocumentView updateActionTitles:]
  -[_SFQuickLookDocumentView frameForButtonAtIndex:]
  -[_SFQuickLookDocumentView _setUpLayoutConstraints]
  -[_SFQuickLookDocumentView _updatePropertiesDefinedByContentSizeCategory]
  -[_SFQuickLookDocumentView _configureOrientationBasedConstraints:]
  -[_SFQuickLookDocumentView quickLookDocumentViewDelegate]


_SFQuickLookDocumentInfoView : UIView
 @property  UIImageView *iconImageView
 @property  NSString *fileName
 @property  NSString *fileSize
 @property  NSString *fileType

  // instance methods
  -[_SFQuickLookDocumentInfoView fileSize]
  -[_SFQuickLookDocumentInfoView setFileSize:]
  -[_SFQuickLookDocumentInfoView fileName]
  -[_SFQuickLookDocumentInfoView traitCollectionDidChange:]
  -[_SFQuickLookDocumentInfoView setIconImageView:]
  -[_SFQuickLookDocumentInfoView .cxx_destruct]
  -[_SFQuickLookDocumentInfoView fileType]
  -[_SFQuickLookDocumentInfoView setFileType:]
  -[_SFQuickLookDocumentInfoView initWithFrame:]
  -[_SFQuickLookDocumentInfoView setFileName:]
  -[_SFQuickLookDocumentInfoView iconImageView]
  -[_SFQuickLookDocumentInfoView _updatePropertiesDefinedByContentSizeCategory]
  -[_SFQuickLookDocumentInfoView _configureOrientationBasedConstraints:]
  -[_SFQuickLookDocumentInfoView _updateDocumentSizeLabel]


_SFWebProcessSharingLinkExtractor : NSObject <_SFWebProcessSharingLinkExtractor>
  // instance methods
  -[_SFWebProcessSharingLinkExtractor _extractSharingLink]
  -[_SFWebProcessSharingLinkExtractor _extractCanonicalLinkWithInjectedObject:]
  -[_SFWebProcessSharingLinkExtractor .cxx_destruct]
  -[_SFWebProcessSharingLinkExtractor _extractDominantIFrameWithInjectedObject:]
  -[_SFWebProcessSharingLinkExtractor initWithPageController:]
  -[_SFWebProcessSharingLinkExtractor _withInjectedLinkExtractorObjectInFrame:callback:]
  -[_SFWebProcessSharingLinkExtractor _setUpRemoteInterface]
  -[_SFWebProcessSharingLinkExtractor _injectedLinkExtractorSourceString]
  -[_SFWebProcessSharingLinkExtractor fetchSharingLinkWithCompletionHandler:]


SFKBScreenTraits : UIKBScreenTraits
 @property  BOOL sf_isKeyboardMinorEdgeWidth

  // class methods
  +[SFKBScreenTraits traitsWithScreen:orientation:]

  // instance methods
  -[SFKBScreenTraits sf_isKeyboardMinorEdgeWidth]
  -[SFKBScreenTraits setSf_isKeyboardMinorEdgeWidth:]
  -[SFKBScreenTraits isKeyboardMinorEdgeWidth]


_SFKeyboardGeometry : NSObject
 @property  {CGSize=dd} sizeWithoutBar
 @property  {CGSize=dd} sizeWithBar

  // class methods
  +[_SFKeyboardGeometry keyboardGeometryForInterfaceOrientation:]
  +[_SFKeyboardGeometry _keyboardGeometryForCurrentDeviceWithInterfaceOrientation:]

  // instance methods
  -[_SFKeyboardGeometry sizeWithBar]
  -[_SFKeyboardGeometry sizeWithoutBar]
  -[_SFKeyboardGeometry _initWithSizeWithoutBar:sizeWithBar:]
  -[_SFKeyboardGeometry _initWithFallbackSizeForOrientation:]


_SFQRImagePreviewViewController : UIViewController
 @property  <BCSAction> *action

  // instance methods
  -[_SFQRImagePreviewViewController .cxx_destruct]
  -[_SFQRImagePreviewViewController action]
  -[_SFQRImagePreviewViewController loadView]
  -[_SFQRImagePreviewViewController initWithElementInfo:]
  -[_SFQRImagePreviewViewController _contentViewSubtitleWithAction:]


SFQRImageHeaderView : UIView
 @property  <BCSAction> *action

  // instance methods
  -[SFQRImageHeaderView traitCollectionDidChange:]
  -[SFQRImageHeaderView .cxx_destruct]
  -[SFQRImageHeaderView setAction:]
  -[SFQRImageHeaderView action]
  -[SFQRImageHeaderView _title]
  -[SFQRImageHeaderView _actionTypeString]


SFQRImageContentView : UIView
  // instance methods
  -[SFQRImageContentView sizeThatFits:]
  -[SFQRImageContentView initWithTitle:subtitle:]


_SFFormDataController : WBUFormDataController <_SFAuthenticationContextDelegate>
 @property  _SFAuthenticationContext *autoFillAuthenticationContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFFormDataController sharedController]

  // instance methods
  -[_SFFormDataController oneTimeCodeProvider]
  -[_SFFormDataController .cxx_destruct]
  -[_SFFormDataController initWithAggressiveKeychainCaching:]
  -[_SFFormDataController autoFillAuthenticationContext]
  -[_SFFormDataController invalidationTimeoutIfApplicationEntersBackgroundDuringAuthenticationForContext:]
  -[_SFFormDataController contextRequiresSessionBasedAuthentication:]
  -[_SFFormDataController contextShouldAllowPasscodeFallback:]
  -[_SFFormDataController contextShouldAllowMultipleBiometricFailures:]


SFContactAutoFillTableViewCell : UITableViewCell
 @property  BOOL usesDetailAppearance
 @property  BOOL checked

  // instance methods
  -[SFContactAutoFillTableViewCell checked]
  -[SFContactAutoFillTableViewCell .cxx_destruct]
  -[SFContactAutoFillTableViewCell setChecked:]
  -[SFContactAutoFillTableViewCell initWithStyle:reuseIdentifier:]
  -[SFContactAutoFillTableViewCell setUsesDetailAppearance:]
  -[SFContactAutoFillTableViewCell setValue:property:]
  -[SFContactAutoFillTableViewCell checkmarkButtonTapped:]
  -[SFContactAutoFillTableViewCell usesDetailAppearance]


_SFDownload : NSObject <SFDownloadFileDelegate, _WKDownloadDelegate, WBSFluidProgressStateSource>
 @property  _SFQuickLookDocument *quickLookDocument
 @property  NSURL *sourceURL
 @property  NSString *fileDownloadPath
 @property  long long fileType
 @property  _WKUserInitiatedAction *userInitiatedAction
 @property  NSString *uti
 @property  NSString *mimeType
 @property  NSURLResponse *response
 @property  NSUUID *identifier
 @property  _WKDownload *wkDownload
 @property  NSString *filename
 @property  NSString *filenameWithoutExtension
 @property  NSURL *completedFileURL
 @property  long long dataOwner
 @property  BOOL explicitlySaved
 @property  BOOL suppressesPrompt
 @property  long long bytesExpected
 @property  unsigned long bytesLoaded
 @property  double progress
 @property  long long state
 @property  BOOL idle
 @property  NSDate *dateAdded
 @property  NSDate *dateFinished
 @property  NSDictionary *dictionaryRepresentation
 @property  BOOL canResume
 @property  BOOL canReveal
 @property  WBSFluidProgressController *fluidProgressController
 @property  <_SFDownloadDelegate> *delegate
 @property  <_SFDownloadPlaceholderImporter> *placeholderImporter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownload provisionalDownloadWithMIMEType:request:response:filename:uti:userInitiatedAction:]
  +[_SFDownload downloadDestinationPathWithFilename:]

  // instance methods
  -[_SFDownload hasFailedURL]
  -[_SFDownload estimatedProgress]
  -[_SFDownload quickLookDocument]
  -[_SFDownload isIdle]
  -[_SFDownload progressState]
  -[_SFDownload _downloadDidCancel:]
  -[_SFDownload .cxx_destruct]
  -[_SFDownload filename]
  -[_SFDownload dictionaryRepresentation]
  -[_SFDownload dataOwner]
  -[_SFDownload reveal]
  -[_SFDownload setDelegate:]
  -[_SFDownload mimeType]
  -[_SFDownload expectedOrCurrentURL]
  -[_SFDownload setQuickLookDocument:]
  -[_SFDownload progress]
  -[_SFDownload fluidProgressController]
  -[_SFDownload init]
  -[_SFDownload fileType]
  -[_SFDownload sourceURL]
  -[_SFDownload _downloadDidFinish:]
  -[_SFDownload identifier]
  -[_SFDownload _downloadDidStart:]
  -[_SFDownload _downloadProcessDidCrash:]
  -[_SFDownload removeFromDisk]
  -[_SFDownload _download:didFailWithError:]
  -[_SFDownload state]
  -[_SFDownload setFluidProgressController:]
  -[_SFDownload response]
  -[_SFDownload _download:didReceiveResponse:]
  -[_SFDownload cancel]
  -[_SFDownload clearFluidProgressState]
  -[_SFDownload delegate]
  -[_SFDownload dealloc]
  -[_SFDownload dateAdded]
  -[_SFDownload uti]
  -[_SFDownload fileDownloadPath]
  -[_SFDownload _download:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]
  -[_SFDownload _download:decideDestinationWithSuggestedFilename:completionHandler:]
  -[_SFDownload createFluidProgressState]
  -[_SFDownload bytesLoaded]
  -[_SFDownload bytesExpected]
  -[_SFDownload userInitiatedAction]
  -[_SFDownload downloadFileContentsDidChange:]
  -[_SFDownload downloadFileWillBeDeleted:]
  -[_SFDownload downloadFileDidChangeURL:]
  -[_SFDownload setExplicitlySaved:]
  -[_SFDownload setPlaceholderImporter:]
  -[_SFDownload completedFileURL]
  -[_SFDownload initWithDictionaryRepresentation:didUpdateRepresentation:]
  -[_SFDownload removeDataAndPlaceholderFromDisk]
  -[_SFDownload dateFinished]
  -[_SFDownload explicitlySaved]
  -[_SFDownload canReveal]
  -[_SFDownload wkDownload]
  -[_SFDownload _reportUpdatedProgressTimerFired:]
  -[_SFDownload _reportUpdatedProgressNow]
  -[_SFDownload _cancelReportUpdatedProgressTimer]
  -[_SFDownload completedFileURL:]
  -[_SFDownload _createResumeData]
  -[_SFDownload _validateSandboxAccessToURL:]
  -[_SFDownload _didImportPlaceholderAtURL:completionHandler:]
  -[_SFDownload _notifyDelegateOfFinishedDownload]
  -[_SFDownload _didImportFileAtURL:completionHandler:]
  -[_SFDownload _didUpdateBytesLoaded]
  -[_SFDownload _reportUpdatedProgressSoon]
  -[_SFDownload _continueAfterDownloadConfirmation:destinationCompletionHandler:]
  -[_SFDownload _continueAfterDecidingFileDownloadPath:]
  -[_SFDownload _importPlaceholderIfNeeded:]
  -[_SFDownload _importCompleteDownloadIfNeeded]
  -[_SFDownload filenameWithoutExtension]
  -[_SFDownload canResume]
  -[_SFDownload resumeInProcessPool:]
  -[_SFDownload suppressesPrompt]
  -[_SFDownload setSuppressesPrompt:]
  -[_SFDownload placeholderImporter]


_SFSecurityRecommendationsDrillInTableViewCell : UITableViewCell
 @property  NSString *subtitleText
 @property  long long warningStyle
 @property  long long numberOfWarnings

  // instance methods
  -[_SFSecurityRecommendationsDrillInTableViewCell _commonInit]
  -[_SFSecurityRecommendationsDrillInTableViewCell traitCollectionDidChange:]
  -[_SFSecurityRecommendationsDrillInTableViewCell .cxx_destruct]
  -[_SFSecurityRecommendationsDrillInTableViewCell subtitleText]
  -[_SFSecurityRecommendationsDrillInTableViewCell setSubtitleText:]
  -[_SFSecurityRecommendationsDrillInTableViewCell initWithStyle:reuseIdentifier:]
  -[_SFSecurityRecommendationsDrillInTableViewCell warningStyle]
  -[_SFSecurityRecommendationsDrillInTableViewCell setWarningStyle:]
  -[_SFSecurityRecommendationsDrillInTableViewCell numberOfWarnings]
  -[_SFSecurityRecommendationsDrillInTableViewCell setNumberOfWarnings:]
  -[_SFSecurityRecommendationsDrillInTableViewCell _setDetailLabelText]
  -[_SFSecurityRecommendationsDrillInTableViewCell _updateDetailViewVisibilityForWarningStyle:]


SFDownloadsUnifiedBarItem : SFUnifiedBarItem
 @property  double progress

  // instance methods
  -[SFDownloadsUnifiedBarItem pulse]
  -[SFDownloadsUnifiedBarItem .cxx_destruct]
  -[SFDownloadsUnifiedBarItem progress]
  -[SFDownloadsUnifiedBarItem view]
  -[SFDownloadsUnifiedBarItem setProgress:]
  -[SFDownloadsUnifiedBarItem initWithAction:]


SFDownloadsUnifiedBarItemView : SFUnifiedBarItemView
 @property  double progress

  // instance methods
  -[SFDownloadsUnifiedBarItemView preferredWidth]
  -[SFDownloadsUnifiedBarItemView pulse]
  -[SFDownloadsUnifiedBarItemView .cxx_destruct]
  -[SFDownloadsUnifiedBarItemView progress]
  -[SFDownloadsUnifiedBarItemView init]
  -[SFDownloadsUnifiedBarItemView setProgress:]


_SFBarItemConfiguration : NSObject
 @property  BOOL enabled
 @property  BOOL hidden
 @property  BOOL selected
 @property  UIMenu *menu
 @property  NSString *title

  // instance methods
  -[_SFBarItemConfiguration menu]
  -[_SFBarItemConfiguration setMenu:]
  -[_SFBarItemConfiguration setTitle:]
  -[_SFBarItemConfiguration .cxx_destruct]
  -[_SFBarItemConfiguration isHidden]
  -[_SFBarItemConfiguration init]
  -[_SFBarItemConfiguration setSelected:]
  -[_SFBarItemConfiguration isSelected]
  -[_SFBarItemConfiguration isEnabled]
  -[_SFBarItemConfiguration title]
  -[_SFBarItemConfiguration setEnabled:]
  -[_SFBarItemConfiguration setHidden:]


_SFBarManager : NSObject
 @property  <_SFBarManagerDelegate> *delegate
 @property  long long contentMode
 @property  long long state
 @property  double downloadsItemProgress

  // instance methods
  -[_SFBarManager barRegistration:didReceiveLongPressForBarItem:]
  -[_SFBarManager _invalidateCoalescedUpdatesTimer]
  -[_SFBarManager .cxx_destruct]
  -[_SFBarManager visibleBarItemsNeedUpdate]
  -[_SFBarManager test_registrationForBar:]
  -[_SFBarManager _updateRegistrationWithToken:animated:]
  -[_SFBarManager _updateAllRegistrationsAnimated:]
  -[_SFBarManager setDownloadsItemNeedsLayout]
  -[_SFBarManager setDelegate:]
  -[_SFBarManager downloadsItemProgress]
  -[_SFBarManager setState:]
  -[_SFBarManager performCoalescedUpdates:]
  -[_SFBarManager isBarItemSelected:]
  -[_SFBarManager init]
  -[_SFBarManager contentMode]
  -[_SFBarManager setBarItem:hidden:]
  -[_SFBarManager setBarItem:selected:]
  -[_SFBarManager setBarItem:title:]
  -[_SFBarManager setDownloadsItemProgress:]
  -[_SFBarManager test_numberOfRegistrations]
  -[_SFBarManager frameForBarItem:inCoordinateSpace:]
  -[_SFBarManager setCustomActivityImage:accessibilityLabel:]
  -[_SFBarManager state]
  -[_SFBarManager barRegistration:canHandleLongPressForBarItem:]
  -[_SFBarManager registerUnifiedBar:withPersona:]
  -[_SFBarManager barRegistration:didReceiveTapForBarItem:]
  -[_SFBarManager performCoalescedUpdatesNowAnimated:]
  -[_SFBarManager setBarItem:enabled:]
  -[_SFBarManager pulseDownloadsItem]
  -[_SFBarManager barRegistration:didReceiveTouchDownForBarItem:]
  -[_SFBarManager isBarItemHidden:]
  -[_SFBarManager delegate]
  -[_SFBarManager registerBar:withToken:]
  -[_SFBarManager setContentMode:]
  -[_SFBarManager _updateAllRegistrations]
  -[_SFBarManager registerToolbar:withLayout:persona:]
  -[_SFBarManager setBarItem:menu:]
  -[_SFBarManager isBarItemEnabled:]
  -[_SFBarManager performCoalescedUpdatesAnimated:updates:]


SFAutomaticPasswordInputView : UIInputView
 @property  long long keyboardType
 @property  <SFAutomaticPasswordInputViewDelegate> *delegate
 @property  <SFAutomaticPasswordInputViewSizing> *inputViewSizing
 @property  BOOL shouldAllowSelfSizing

  // instance methods
  -[SFAutomaticPasswordInputView keyboardAppearance]
  -[SFAutomaticPasswordInputView keyboardType]
  -[SFAutomaticPasswordInputView allowsSelfSizing]
  -[SFAutomaticPasswordInputView .cxx_destruct]
  -[SFAutomaticPasswordInputView setDelegate:]
  -[SFAutomaticPasswordInputView setKeyboardAppearance:]
  -[SFAutomaticPasswordInputView delegate]
  -[SFAutomaticPasswordInputView intrinsicContentSize]
  -[SFAutomaticPasswordInputView initWithInputViewStyle:keyboardType:]
  -[SFAutomaticPasswordInputView setShouldAllowSelfSizing:]
  -[SFAutomaticPasswordInputView setInputViewSizing:]
  -[SFAutomaticPasswordInputView _useStrongPasswordButtonAction:]
  -[SFAutomaticPasswordInputView _useCustomPasswordButtonAction:]
  -[SFAutomaticPasswordInputView inputViewSizing]
  -[SFAutomaticPasswordInputView shouldAllowSelfSizing]


SFAutomaticPasswordScrollViewContentView : UIView
 @property  <SFAutomaticPasswordScrollViewContentViewLayoutObserver> *layoutObserver

  // instance methods
  -[SFAutomaticPasswordScrollViewContentView .cxx_destruct]
  -[SFAutomaticPasswordScrollViewContentView layoutSubviews]
  -[SFAutomaticPasswordScrollViewContentView layoutObserver]
  -[SFAutomaticPasswordScrollViewContentView setLayoutObserver:]


SFAutomaticPasswordExplanationView : UIView <_UIScrollViewLayoutObserver, SFAutomaticPasswordScrollViewContentViewLayoutObserver, UIScrollViewDelegate>
 @property  UILabel *explanationLabel
 @property  UILabel *passwordRetrievalExpalantionLabel
 @property  UIButton *useStrongPasswordButton
 @property  UIButton *useOtherPasswordButton
 @property  long long keyboardAppearance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAutomaticPasswordExplanationView keyboardAppearance]
  -[SFAutomaticPasswordExplanationView initWithKeyboardType:]
  -[SFAutomaticPasswordExplanationView updateConstraints]
  -[SFAutomaticPasswordExplanationView .cxx_destruct]
  -[SFAutomaticPasswordExplanationView layoutSubviews]
  -[SFAutomaticPasswordExplanationView setKeyboardAppearance:]
  -[SFAutomaticPasswordExplanationView scrollViewDidScroll:]
  -[SFAutomaticPasswordExplanationView safeAreaInsetsDidChange]
  -[SFAutomaticPasswordExplanationView systemLayoutSizeFittingSize:]
  -[SFAutomaticPasswordExplanationView _scrollViewDidLayoutSubviews:]
  -[SFAutomaticPasswordExplanationView _createSubviews]
  -[SFAutomaticPasswordExplanationView useStrongPasswordButton]
  -[SFAutomaticPasswordExplanationView useOtherPasswordButton]
  -[SFAutomaticPasswordExplanationView automaticPasswordScrollContentViewDidLayout:]
  -[SFAutomaticPasswordExplanationView _createLayoutConstraints]
  -[SFAutomaticPasswordExplanationView _updateStrongPasswordHeightConstraint]
  -[SFAutomaticPasswordExplanationView _updateWideAppearanceRequirement]
  -[SFAutomaticPasswordExplanationView _updateMaximumPadding]
  -[SFAutomaticPasswordExplanationView _updateContentLayoutGuideBottomConstraint]
  -[SFAutomaticPasswordExplanationView _updateUseCustomPasswordBaselineToBottomConstraint]
  -[SFAutomaticPasswordExplanationView _scrollViewNeedsShadow:]
  -[SFAutomaticPasswordExplanationView _updateShadowViewAlpha]
  -[SFAutomaticPasswordExplanationView explanationLabel]
  -[SFAutomaticPasswordExplanationView passwordRetrievalExpalantionLabel]


_SFFeatureAvailability : WBSFeatureAvailability
  // class methods
  +[_SFFeatureAvailability supportsCVV]
  +[_SFFeatureAvailability _shouldShowRussianFeatures]
  +[_SFFeatureAvailability _shouldShowChineseFeatures]
  +[_SFFeatureAvailability isTabBarAvailableForScreenSize:]


SFCustomActivityProxy : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *activityType
 @property  NSString *activityTitle
 @property  UIImage *activityImage
 @property  unsigned long activityProxyID

  // class methods
  +[SFCustomActivityProxy supportsSecureCoding]

  // instance methods
  -[SFCustomActivityProxy initWithCoder:]
  -[SFCustomActivityProxy .cxx_destruct]
  -[SFCustomActivityProxy activityType]
  -[SFCustomActivityProxy isEqual:]
  -[SFCustomActivityProxy initWithActivity:]
  -[SFCustomActivityProxy activityTitle]
  -[SFCustomActivityProxy copyWithZone:]
  -[SFCustomActivityProxy activityImage]
  -[SFCustomActivityProxy encodeWithCoder:]
  -[SFCustomActivityProxy activityProxyID]
  -[SFCustomActivityProxy activityTypeWithActivity:]
  -[SFCustomActivityProxy _initWithActivityType:title:image:proxyID:]


SFUnifiedBarRegistration : NSObject <_SFBarRegistrationToken>
 @property  long long contentMode
 @property  long long state
 @property  unsigned long pageFormatItemState
 @property  UIButton *microphoneButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFUnifiedBarRegistration _itemReceivedTap:]
  -[SFUnifiedBarRegistration updateBarAnimated:]
  -[SFUnifiedBarRegistration .cxx_destruct]
  -[SFUnifiedBarRegistration pulseBarItem:]
  -[SFUnifiedBarRegistration setState:]
  -[SFUnifiedBarRegistration contentMode]
  -[SFUnifiedBarRegistration setBarItem:hidden:]
  -[SFUnifiedBarRegistration _updateItems]
  -[SFUnifiedBarRegistration popoverSourceInfoForItem:]
  -[SFUnifiedBarRegistration state]
  -[SFUnifiedBarRegistration setProgress:forBarItem:]
  -[SFUnifiedBarRegistration setBarItem:enabled:]
  -[SFUnifiedBarRegistration setContentMode:]
  -[SFUnifiedBarRegistration containsBarItem:]
  -[SFUnifiedBarRegistration setBarItem:menu:]
  -[SFUnifiedBarRegistration viewForBarItem:]
  -[SFUnifiedBarRegistration setTitle:forBarItem:]
  -[SFUnifiedBarRegistration initWithBar:barManager:persona:]
  -[SFUnifiedBarRegistration _makeBarItemForSFBarItem:]
  -[SFUnifiedBarRegistration _imageForBarItem:]
  -[SFUnifiedBarRegistration unifiedBarItemForSFBarItem:]
  -[SFUnifiedBarRegistration _isBarItemHidden:]
  -[SFUnifiedBarRegistration _updateItemsIfNeeded]
  -[SFUnifiedBarRegistration _unifiedBarItemsForSFBarItems:]
  -[SFUnifiedBarRegistration _SFBarItemForUnifiedBarItem:]
  -[SFUnifiedBarRegistration _updateEnabledBarItems]
  -[SFUnifiedBarRegistration _setNeedsUpdateItems]


SFDismissButton : UIButton
  // instance methods
  -[SFDismissButton .cxx_destruct]
  -[SFDismissButton init]


_SFSafariSharingExtensionController : NSObject
  // instance methods
  -[_SFSafariSharingExtensionController initWithWebView:]
  -[_SFSafariSharingExtensionController .cxx_destruct]
  -[_SFSafariSharingExtensionController prepareJavaScriptWorldForSharingExtension:javaScript:]
  -[_SFSafariSharingExtensionController finalizeJavaScriptForSharingExtension:arguments:]
  -[_SFSafariSharingExtensionController runJavaScriptForSharingExtension:extraArguments:completion:]
  -[_SFSafariSharingExtensionController _extensionControllerProxy]


NSDistributedNotificationCenter(SafariServicesExtras)
	// class methods
	+[NSDistributedNotificationCenter(SafariServicesExtras) _sf_postPerSitePreferencesDidChangeDistributedNotification]

NSNotification(SafariServicesExtras)
	// instance methods
	-[NSNotification(SafariServicesExtras) _sf_perSitePreferenceNotificationWasSentFromAnotherProcess]

(TabDocumentExtras)
	// instance methods
	-[(TabDocumentExtras) failingURL]
	-[(TabDocumentExtras) _sf_recoverableByPageFormatMenu]

NSUserActivity(SafariServicesExtras)
	// class methods
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithNavigationIntent:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithMode:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithTabUUID:browserControllerUUID:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithRecentlyClosedTabUUID:browserControllerUUID:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityFromSceneConnectionOptions:]

	// instance methods
	-[NSUserActivity(SafariServicesExtras) sf_windowCreationNavigationIntentID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationNavigationIntent]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationTabUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationSourceBrowserControllerUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationRecentlyClosedTabUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationMode]
	-[NSUserActivity(SafariServicesExtras) _sf_invalidateWindowCreationData]

WebBookmark(SafariServicesExtras)
	// class methods
	+[WebBookmark(SafariServicesExtras) _sf_operationForDropSession:]
	+[WebBookmark(SafariServicesExtras) _sf_webBookmarksFromDropSession:completionHandler:]

	// instance methods
	-[WebBookmark(SafariServicesExtras) _sf_icon]
	-[WebBookmark(SafariServicesExtras) _sf_contextMenuUsingCollection:tabGroupProvider:withUserInfo:handler:]
	-[WebBookmark(SafariServicesExtras) _sf_iconKeyColor]
	-[WebBookmark(SafariServicesExtras) _sf_setIconKeyColor:]
	-[WebBookmark(SafariServicesExtras) _sf_contextMenuUsingCollection:withUserInfo:handler:]

UIWindowScene(SafariServicesExtras)
	// instance methods
	-[UIWindowScene(SafariServicesExtras) _sf_openFaceTimeMultiWayURL:completionHandler:]
	-[UIWindowScene(SafariServicesExtras) _sf_openTelURL:completionHandler:]

_WKProcessPoolConfiguration(SafariServicesExtras)
	// class methods
	+[_WKProcessPoolConfiguration(SafariServicesExtras) _sf_customClassesForParameterCoder]

NSUserDefaults(SafariServicesExtras)
	// class methods
	+[NSUserDefaults(SafariServicesExtras) _sf_safariDefaults]
	+[NSUserDefaults(SafariServicesExtras) _sf_sfAppDefaults]
	+[NSUserDefaults(SafariServicesExtras) _sf_safariSharedDefaults]

	// instance methods
	-[NSUserDefaults(SafariServicesExtras) _sf_passwordManagerIsInDemoMode]
	-[NSUserDefaults(SafariServicesExtras) _sf_stringForKey:defaultValue:]
	-[NSUserDefaults(SafariServicesExtras) _sf_dateForKey:]
	-[NSUserDefaults(SafariServicesExtras) _sf_registerSafariDefaults]
	-[NSUserDefaults(SafariServicesExtras) _sf_javaScriptEnabled]
	-[NSUserDefaults(SafariServicesExtras) _sf_javaScriptCanOpenWindowsAutomatically]
	-[NSUserDefaults(SafariServicesExtras) _sf_warnAboutFraudulentWebsites]
	-[NSUserDefaults(SafariServicesExtras) _sf_shouldAutomaticallyDownloadReadingListItems]
	-[NSUserDefaults(SafariServicesExtras) _sf_setShouldAutomaticallyDownloadReadingListItems:]

(SafariServicesExtras)
	// class methods
	+[(SafariServicesExtras) safari_readingListThumbnailImageDataWithCGImage:]

UIPasteboard(SafariServicesExtras)
	// instance methods
	-[UIPasteboard(SafariServicesExtras) safari_setSensitiveString:]
	-[UIPasteboard(SafariServicesExtras) safari_pasteAndNavigateMenuItem]
	-[UIPasteboard(SafariServicesExtras) safari_bestStringForPastingIntoURLField]
	-[UIPasteboard(SafariServicesExtras) safari_canPasteAndNavigate]
	-[UIPasteboard(SafariServicesExtras) safari_bestInputTypeForPastingIntoURLField]
	-[UIPasteboard(SafariServicesExtras) safari_pasteAndNavigateButtonTitle]
	-[UIPasteboard(SafariServicesExtras) safari_pasteAndNavigateCommand]

(ScreenTime)
	// class methods
	+[(ScreenTime) _sf_safeBrowsingPreferencesPlistPath]

	// instance methods
	-[(ScreenTime) sf_URLScheme]
	-[(ScreenTime) sf_stringByReplacingMarkupCharactersWithHTMLEntities]
	-[(ScreenTime) sf_stringByReplacingLastOccurrenceOfWhitespaceWithANonBreakingSpace]
	-[(ScreenTime) _sf_ensurePathExtension:]
	-[(ScreenTime) sf_lastPathComponentWithoutZipExtension]
	-[(ScreenTime) _sf_bestURLForUserTypedString]
	-[(ScreenTime) sf_isConfigProfileMIMEType]
	-[(ScreenTime) sf_isFeedScheme]
	-[(ScreenTime) sf_stringByAddingSoftBreaksBeforePeriods]

WKBackForwardListItem(SafariServicesExtras)
	// instance methods
	-[WKBackForwardListItem(SafariServicesExtras) _sf_quickLookDocument]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_setQuickLookDocument:]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_securityInfo]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_setSecurityInfo:]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_explicitSuggestedFilename]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_setExplicitSuggestedFilename:]

WBSSavedAccount(WebUIExtras)
	// instance methods
	-[WBSSavedAccount(WebUIExtras) _firstSiteMatchingSearchPattern:withTokenizer:]
	-[WBSSavedAccount(WebUIExtras) safari_getTitle:detail:forTableViewCell:withSearchPattern:emphasizeUserName:]

WKFrameInfo(SafariServicesExtras)
	// instance methods
	-[WKFrameInfo(SafariServicesExtras) _sf_titleForJavaScriptDialog]

LSApplicationWorkspace(SafariServicesExtras)
	// instance methods
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_openURL:withOptions:completionHandler:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_openURL:inApplication:withOptions:completionHandler:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_shouldOverrideiCloudSharingURL:withAppRedirectURL:referrerURL:loadedUsingDesktopUserAgent:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_tryOpeningURLInDefaultApp:isContentManaged:completionHandler:]

WKNavigationResponse(SafariServicesExtras)
	// instance methods
	-[WKNavigationResponse(SafariServicesExtras) _sf_explicitSuggestedFilename]
	-[WKNavigationResponse(SafariServicesExtras) _sf_allowReloadingInMainFrame]
	-[WKNavigationResponse(SafariServicesExtras) _sf_suggestedFilename]
	-[WKNavigationResponse(SafariServicesExtras) _sf_responsePolicy:uti:]

(SafariServicesExtras)
	// class methods
	+[(SafariServicesExtras) _sf_isRTL]

UIAction(SafariServicesExtras)
	// class methods
	+[UIAction(SafariServicesExtras) _sf_openInNewTabActionWithHandler:]
	+[UIAction(SafariServicesExtras) _sf_debugKillWebProcessActionForWebView:]

SFDialog(SafariServicesExtras)
	// class methods
	+[SFDialog(SafariServicesExtras) redirectDialogWithNavigationResult:promptPolicy:completionHandler:]
	+[SFDialog(SafariServicesExtras) downloadBlockedDialogWithFileType:initiatingURL:completionHandler:]
	+[SFDialog(SafariServicesExtras) allowDownloadDialogWithDownload:initiatingURL:allowViewAction:completionHandler:]

UIBlurEffect(SafariServicesExtras)
	// class methods
	+[UIBlurEffect(SafariServicesExtras) _sf_defaultPopoverBackgroundEffect]

UIScrollView(SafariServicesExtras)
	// class methods
	+[UIScrollView(SafariServicesExtras) _sf_baseInsetsForVerticalScrollIndicatorInScrollViewContainerView:]
	+[UIScrollView(SafariServicesExtras) _sf_baseInsetsForHorizontalScrollIndicatorInScrollViewContainerView:]
	+[UIScrollView(SafariServicesExtras) _sf_baseVerticalScrollIndicatorInsetsExtendFullHeight:]
	+[UIScrollView(SafariServicesExtras) _sf_baseHorizontalScrollIndicatorInsetsExtendFullWidth:]

	// instance methods
	-[UIScrollView(SafariServicesExtras) _sf_setContentInsetAdjustments:]
	-[UIScrollView(SafariServicesExtras) _sf_isScrolledToOrPastBottom]
	-[UIScrollView(SafariServicesExtras) _sf_isScrolledPastTop]
	-[UIScrollView(SafariServicesExtras) _sf_scrollIndicatorInsets]
	-[UIScrollView(SafariServicesExtras) _sf_setScrollIndicatorInsets:]

UIFont(SafariServicesExtras)
	// class methods
	+[UIFont(SafariServicesExtras) _sf_highLegibilityAlternateFont:]
	+[UIFont(SafariServicesExtras) _sf_preferredFontForTextStyle:symbolicTraits:]
	+[UIFont(SafariServicesExtras) _sf_preferredFontForTextStyle:attributes:]
	+[UIFont(SafariServicesExtras) _sf_preferredFontForTextStyle:weight:compatibleWithTraitCollection:]

UIViewController(AccountManagerExtras)
	// instance methods
	-[UIViewController(AccountManagerExtras) safari_checkForAbilityToOpenWebContentAndNotifyIfNecessary:]

NSURLResponse(SafariServicesExtras)
	// instance methods
	-[NSURLResponse(SafariServicesExtras) _sf_hasAttachmentWithFilename]
	-[NSURLResponse(SafariServicesExtras) sf_shouldDownloadDueToContentDisposition:]
	-[NSURLResponse(SafariServicesExtras) _sf_allowedToOverrideContentDispositionAttachment]
	-[NSURLResponse(SafariServicesExtras) sf_hasXMLAttachment]

UIBarButtonItem(SafariServicesExtras)
	// class methods
	+[UIBarButtonItem(SafariServicesExtras) _sf_longPressAllowableMovement]

	// instance methods
	-[UIBarButtonItem(SafariServicesExtras) _sf_setTarget:longPressAction:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_setTarget:touchDownAction:longPressAction:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_longPressEnabled]
	-[UIBarButtonItem(SafariServicesExtras) _sf_setLongPressEnabled:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_test_simulateLongPressInvocation]

WBTabGroup(SafariServicesExtras)
	// instance methods
	-[WBTabGroup(SafariServicesExtras) _sf_hasAttributedString]
	-[WBTabGroup(SafariServicesExtras) _sf_attributedString]
	-[WBTabGroup(SafariServicesExtras) _sf_validTabsCountForPasteboard]
	-[WBTabGroup(SafariServicesExtras) _sf_isOppositeTypeOfTabGroup:]

UITableViewCell(SafariServicesExtras)
	// instance methods
	-[UITableViewCell(SafariServicesExtras) sf_setUsesVibrantSelection:]

UIResponder(SafariServicesExtras)
	// instance methods
	-[UIResponder(SafariServicesExtras) sf_inResponderChain]

NSItemProvider(SafariServicesExtras)
	// class methods
	+[NSItemProvider(SafariServicesExtras) _sf_loadObjectsFromItemProviders:usingLoader:completionHandler:]

	// instance methods
	-[NSItemProvider(SafariServicesExtras) _sf_loadObjectOfClasses:completionHandler:]
	-[NSItemProvider(SafariServicesExtras) _sf_registerFileRepresentationForQuickLookDocument:]

UIWebClip(SafariServicesExtras)
	// instance methods
	-[UIWebClip(SafariServicesExtras) _sf_applicationManifest]
	-[UIWebClip(SafariServicesExtras) _sf_applicationManifestPath]
	-[UIWebClip(SafariServicesExtras) _sf_setApplicationManifest:]

NSHTTPCookie(SafariServicesExtras)
	// instance methods
	-[NSHTTPCookie(SafariServicesExtras) sf_matchesTopLevelDomain:]

SFWebExtension(SafariServicesExtras)
	// instance methods
	-[SFWebExtension(SafariServicesExtras) _loadToolbarItem]
	-[SFWebExtension(SafariServicesExtras) _unloadToolbarItem]
	-[SFWebExtension(SafariServicesExtras) _validateToolbarItemInAllWindows]

WKNavigationAction(SafariServicesExtras)
	// instance methods
	-[WKNavigationAction(SafariServicesExtras) _sf_setAllowsExternalRedirectWithoutPrompting:]
	-[WKNavigationAction(SafariServicesExtras) _sf_shouldAskAboutInsecureFormSubmission]
	-[WKNavigationAction(SafariServicesExtras) _sf_shouldPerformDownload]
	-[WKNavigationAction(SafariServicesExtras) _sf_allowsExternalRedirectWithoutPrompting]

WBSAppLink(SafariServicesExtras)
	// instance methods
	-[WBSAppLink(SafariServicesExtras) _sf_decideOpenStrategyAndCallCompletionHandlerOnMainThread:]

CertUITrustManager(SafariServicesExtras)
	// instance methods
	-[CertUITrustManager(SafariServicesExtras) userAllowsCertificateTrust:host:shouldPrompt:completionHandler:]

WKWebView(SafariServicesExtras)
	// instance methods
	-[WKWebView(SafariServicesExtras) _sf_securityInfo]
	-[WKWebView(SafariServicesExtras) _sf_setSecurityInfo:]
	-[WKWebView(SafariServicesExtras) _sf_suggestedFilename]
	-[WKWebView(SafariServicesExtras) _sf_saveUnsubmittedGeneratedPasswordAndRemoveFormMetadata]
	-[WKWebView(SafariServicesExtras) webui_presentingViewController]
	-[WKWebView(SafariServicesExtras) webui_lastGeneratedPasswordForCurrentBackForwardItem]
	-[WKWebView(SafariServicesExtras) webui_preventNavigationDuringAutoFillPrompt]
	-[WKWebView(SafariServicesExtras) webui_privateBrowsingEnabled]
	-[WKWebView(SafariServicesExtras) webui_removeFormMetadataForLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) _sf_effectiveViewToLayOut]
	-[WKWebView(SafariServicesExtras) webui_formMetadataForLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) webui_setFormMetadata:forLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) webui_setLastGeneratedPasswordForCurrentBackForwardItem:]
	-[WKWebView(SafariServicesExtras) _sf_applicationDidEnterBackgroundOrWillTerminate:]

SFWebExtensionsController(SafariServicesExtras)
	// instance methods
	-[SFWebExtensionsController(SafariServicesExtras) _presentingViewController]
	-[SFWebExtensionsController(SafariServicesExtras) dialogController:dismissViewController:withAdditionalAnimations:]
	-[SFWebExtensionsController(SafariServicesExtras) webProcessIDForDialogController:]
	-[SFWebExtensionsController(SafariServicesExtras) dialogController:presentViewController:withAdditionalAnimations:]
	-[SFWebExtensionsController(SafariServicesExtras) dismissDialogView:withAdditionalAnimations:forDialogController:]
	-[SFWebExtensionsController(SafariServicesExtras) presentDialogView:withAdditionalAnimations:forDialogController:]
	-[SFWebExtensionsController(SafariServicesExtras) _dialogController]
	-[SFWebExtensionsController(SafariServicesExtras) _createTabWithURL:inWindow:]
	-[SFWebExtensionsController(SafariServicesExtras) showAccessRequestDialogForExtension:domains:callingAPIName:showMoreOptionsForAlwaysAllow:includeDenyButton:responseBlock:]
	-[SFWebExtensionsController(SafariServicesExtras) showOptionsForExtension:requestingWebView:]
	-[SFWebExtensionsController(SafariServicesExtras) showAccessRequestDialogForExtension:URLs:callingAPIName:showMoreOptionsForAlwaysAllow:includeDenyButton:responseBlock:]
	-[SFWebExtensionsController(SafariServicesExtras) showAlwaysAllowConfirmationDialogForExtension:domains:includeDenyButton:responseBlock:]
	-[SFWebExtensionsController(SafariServicesExtras) showPromptForExtensionDisabledBecauseItDoesNotSupportThisVersionOfSafariWithMessage:extensionIdentifier:]
	-[SFWebExtensionsController(SafariServicesExtras) showPromptForBlocklistedExtension:extensionName:]
	-[SFWebExtensionsController(SafariServicesExtras) showPromptForExpiredExtension:extensionName:]
	-[SFWebExtensionsController(SafariServicesExtras) createNewTabFromBackgroundPageWithURL:]

SFOverlayProvider(SafariServicesExtras)
	// instance methods
	-[SFOverlayProvider(SafariServicesExtras) requestOverlayWithPreferencesVendor:completion:]
	-[SFOverlayProvider(SafariServicesExtras) _updateAppClipOverlayPreferenceHook]

(SafariServicesExtras)
	// class methods
	+[(SafariServicesExtras) _sf_canCreateURLsFromDropSession:]
	+[(SafariServicesExtras) _sf_urlsFromDragItems:completionHandler:]

	// instance methods
	-[(SafariServicesExtras) _sf_accessingSecurityScopedResource:]
	-[(SafariServicesExtras) sf_absoluteStringWithoutFragment]
	-[(SafariServicesExtras) sf_isFacetimeURL]
	-[(SafariServicesExtras) _sf_topLevelDomain]
	-[(SafariServicesExtras) _sf_isAppleOneURL]
	-[(SafariServicesExtras) sf_isOfflineReadingListURL]
	-[(SafariServicesExtras) sf_isAppleNewsURL]
	-[(SafariServicesExtras) _sf_highLevelDomainFromHostFallingBackToHostOrAbsoluteString]
	-[(SafariServicesExtras) sf_isWebSearchURL]
	-[(SafariServicesExtras) sf_isTestWebArchiveURL]

WBSAnalyticsLogger(_SFAnalyticsLogger)
	// instance methods
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didBeginDownloadWithMIMEType:uti:downloadType:promptType:browserPersona:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_authenticatedForAutoFillWithCategory:onPageLoad:status:error:client:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_longTappedOnSafariViewControllerToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_safariViewControllerDidDismissWithMethod:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_safariViewControllerDidPresentFromHostApp:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didPerformFormatMenuAction:provenance:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_enteredTwoUpUsingMethod:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_twoFingerTappedLinkWithOutcome:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_longTappedOnSafariToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_launchedOrResumedSafariWhileInPrivateBrowsing:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_reportAutoFillRequiresAuthenticationPreference:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_authenticatedForAutoFillWithCategory:onPageLoad:status:client:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_activatedHomeScreenQuickAction:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didTerminateWebProcessBeforeNavigationForReason:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didChooseIntervalFromAutomaticTabClosingFirstTimeExperiencePrompt:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_reportAutomaticTabClosingInterval:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didCloseTabsAutomaticallyWithCount:tabClosingInterval:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didAddFavoriteFromShareSheet]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_performExtensionsReportIfNecessary]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_reportCapsuleLayoutStyle:backgroundColorInTabBarEnabled:]

UIDragItem(SafariServicesExtras)
	// class methods
	+[UIDragItem(SafariServicesExtras) _sf_loadObjectsFromDragItems:usingLocalObjectLoader:objectLoader:completionHandler:]
	+[UIDragItem(SafariServicesExtras) _sf_itemWithTabStateData:userActivity:]
	+[UIDragItem(SafariServicesExtras) _sf_itemWithTabGroup:]

	// instance methods
	-[UIDragItem(SafariServicesExtras) _sf_localBookmark]
	-[UIDragItem(SafariServicesExtras) _sf_localURL]
	-[UIDragItem(SafariServicesExtras) _sf_tabStateData]
	-[UIDragItem(SafariServicesExtras) _sf_initWithBookmark:]
	-[UIDragItem(SafariServicesExtras) _sf_initWithSiriSuggestion:]
	-[UIDragItem(SafariServicesExtras) _sf_localTabGroup]

UIAlertAction(SafariServicesExtras)
	// class methods
	+[UIAlertAction(SafariServicesExtras) sf_actionWithContentViewController:style:handler:shouldDismissHandler:]

NSURLProtectionSpace(SafariServicesExtras)
	// instance methods
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_highLevelDomainAndPort]
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_identities]
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_canAuthenticate]

NSBundle(SafariServicesExtras)
	// class methods
	+[NSBundle(SafariServicesExtras) _sf_isSafariViewServiceBundle]
	+[NSBundle(SafariServicesExtras) _sf_isWebSheetApplicationBundle]
	+[NSBundle(SafariServicesExtras) _sf_safariServicesBundle]

01 00 1200 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAuthorizationController 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASAccountAuthenticationModificationController 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASCredentialServiceIdentifier 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASPasswordCredential 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASPasswordCredentialIdentity 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASWebAuthenticationSession 
01 00 1300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDevice 
01 00 1300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureDeviceInput 
01 00 1300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureMetadataOutput 
01 00 1300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureSession 
01 00 1300 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVCaptureVideoPreviewLayer 
01 00 1000 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 1800 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSApplicationStateMonitor 
01 00 1800 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeliveryManager 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimationGroup 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 3100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 2100 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLInUseAssertion 
01 00 2100 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactVCardSerialization 
01 00 0b00 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNContactViewController 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNLabeledValue 
01 00 2400 /System/Library/Frameworks/Contacts.framework/Contacts: CNPostalAddressFormatter 
01 00 2900 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: CPAggregateDictionary 
01 00 2900 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: CPNetworkObserver 
01 00 2f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTBundle 
01 00 2f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTXPCServiceSubscriptionContext 
01 00 0c00 /System/Library/PrivateFrameworks/CertUI.framework/CertUI: CertUIPrompt 
01 00 0c00 /System/Library/PrivateFrameworks/CertUI.framework/CertUI: CertUITrustManager 
01 00 2f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 1500 /System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement: DMFApplicationPolicyMonitor 
01 00 0500 /System/Library/PrivateFrameworks/DocumentManagerCore.framework/DocumentManagerCore: DOCDownloadImportManager 
01 00 0500 /System/Library/PrivateFrameworks/DocumentManagerCore.framework/DocumentManagerCore: DOCManagedPermission 
01 00 3b00 /System/Library/Frameworks/FileProvider.framework/FileProvider: FPItemManager 
01 00 3b00 /System/Library/Frameworks/FileProvider.framework/FileProvider: FPProviderDomain 
01 00 2e00 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSContext 
01 00 2e00 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSValue 
01 00 2200 /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication: LAContext 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSAppLink 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationExtensionRecord 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleRecord 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSDocumentProxy 
01 00 2600 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 1e00 /System/Library/Frameworks/MapKit.framework/MapKit: MKMapItem 
01 00 1d00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHUDController 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSByteCountFormatter 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSDataAsset 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSDiffableDataSourceSnapshot 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionItem 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileCoordinator 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPCookie 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPCookieStorage 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPURLResponse 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSItemProvider 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 3700 /usr/lib/libobjc.A.dylib: NSObject 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSParagraphStyle 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProxy 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSTextAttachment 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: NSTextList 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredential 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredentialStorage 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLProtectionSpace 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLRequest 
01 00 2a00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLResponse 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 2700 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 3a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 3600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0700 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBBundle 
01 00 0700 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBPrivacyPresenter 
01 00 0e00 /System/Library/Frameworks/PencilKit.framework/PencilKit: PKScribbleInteraction 
01 00 0800 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSListController 
01 00 0600 /System/Library/Frameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing: QLThumbnailGenerationRequest 
01 00 0600 /System/Library/Frameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing: QLThumbnailGenerator 
01 00 0f00 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesAssertion 
01 00 0f00 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesCoordinator 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFAppAutoFillOneTimeCodeProvider 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFApplicationManifestFetcher 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFAutoFillFeatureManager 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFAutoFillHelperProxy 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFBannerTheme 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFBookmarksLockCoordinator 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFBrowserMenuProvider 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFCredentialProviderExtensionHelperProxy 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFCredentialProviderExtensionManager 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFDialog 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFDialogController 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFDomainAssociationUtilities 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFFeatureManager 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFManageWebExtensionsViewController 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFNavigationBarItem 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFNavigationBarToggleButton 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFOverlayProvider 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFPasswordCredentialIdentity 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFPopoverSizingTableViewController 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSafariCredential 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSafariCredentialStore 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSharablePassword 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSharablePasswordReceiver 
01 00 1c00 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSuggestedUserProvider 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFSystemAlert 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFThemeColorEffectView 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFURLLabel 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFUnifiedBarButton 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFUnifiedBarItem 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFUnifiedBarItemArrangement 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFUnifiedBarItemView 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFWebExtension 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFWebExtensionsController 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: SFWebFormAccessoryViewWrapper 
01 00 0200 /System/Library/PrivateFrameworks/CoreSuggestions.framework/CoreSuggestions: SGSuggestionsService 
01 00 1f00 /System/Library/PrivateFrameworks/TextInput.framework/TextInput: TIAutofill 
01 00 2800 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUDialRequest 
01 00 2800 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUJoinConversationRequest 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIAction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivity 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityItemProvider 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationExtensionActivity 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIAutofillExtrasSuggestion 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIButtonConfiguration 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewFlowLayout 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UICommand 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextMenuConfiguration 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextualAction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentBrowserViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentInteractionController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentPickerViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragInteraction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragItem 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreview 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreviewParameters 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropInteraction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropProposal 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIEventAttribution 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIFocusHaloEffect 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontMetrics 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIHoverGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIInputView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIInputViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIKBScreenTraits 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyCommand 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardImpl 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardInputModeController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardLayout 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UILocalizedIndexedCollation 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenu 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenuController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenuItem 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationBar 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationItem 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenInIBooksActivity 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLAction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLContext 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPasteboard 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPercentDrivenInteractiveTransition 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerRegion 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerShape 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerStyle 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewAction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewParameters 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintInfo 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintInteractionController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintPageRenderer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIProgressView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIResponder 
01 00 1700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISClickAttribution 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneOpenURLOptions 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreenEdgePanGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISearchBar 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISearchController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISegmentedControl 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISelectionFeedbackGenerator 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISocialActivity 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeActionsConfiguration 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UISwitch 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCellLayoutManagerValue1 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewDiffableDataSource 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedDragPreview 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITextField 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITextSuggestion 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIToolbar 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIVibrancyEffect 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClip 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClipLinkTag 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebGeolocationPolicyDecider 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 2d00 /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers: UTType 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAllowedLegacyTLSHostManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsLogger 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariActivatedHomeScreenQuickActionEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariAutoFillAuthenticationEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariAutoFillAuthenticationPreferenceEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariDidTerminateWebProcessBeforeNavigation 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariEnterTwoUpEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariTappedOnToolbarButtonEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariTwoFingerTappedOnLinkEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariUsingPrivateBrowsingEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariViewControllerDismissedEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariViewControllerPresentedFromHostAppEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAnalyticsSafariViewControllerTappedOnToolbarButtonEvent 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAppLink 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAutoFillQuirksManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSAutomaticReaderActivationManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSBundleWebExtensionsController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCache 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCertificateWarningPageContext 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCloudTab 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCoalescedAsynchronousWriter 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSConfigurationDataTransformer 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSContentBlockersPreferenceManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCredentialMatch 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCredentialMatchCriteria 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSCreditCardData 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSDigitalHealthManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFeatureAvailability 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFluidProgressController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFluidProgressState 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFormAutoFillMetadataCorrector 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFormControlMetadata 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFormDataController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFormMetadata 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSFormMetadataController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSGeolocationPreferenceManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSHideMyEmailManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSHistory 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSHistoryAccessSessionProxy 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSImageUtilities 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSMultiRoundAutoFillManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPageZoomPreferenceManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSParsecABGroupManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordAutoFillUtilities 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordBreachManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordGenerationManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordManagerURL 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordPickerHintStringGenerator 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordWarningHideMarker 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordWarningManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPasswordWarningStore 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPerSitePreference 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPerSitePreferenceManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPerSitePreferenceTimeout 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPerSitePreferencesSQLiteStore 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPermissionDialogThrottler 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPersistentPropertyListStore 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPrivacyProxyAvailabilityManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSPrivacyReportData 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderAvailabilityCheckResult 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderConfigurationManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderFontDownloadManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderFontManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderNavigationPolicyDecider 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSReaderResources 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSRecentWebSearchesController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSRecentlyUsedAutoFillSet 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSRemotePlistController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSQLiteDatabase 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSQLiteStatement 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSavedAccount 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSavedAccountChangeRequest 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSavedAccountStore 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSScopeExitHandler 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSearchImpressionAnalyticsRecorder 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSearchProvider 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSecIdentitiesCache 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSingleCreditCardData 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSSiriIntelligenceDonor 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTOTPGenerator 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTabDialogCancellationExemption 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTemplateIconMonogramGenerator 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSThemeColorUtilities 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTouchIconCache 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTouchIconResponse 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTouchIconWebProcessPlugInPageController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTranslationConsentAlertHelper 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSTranslationContext 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSURLCompletionSessionProxy 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSURLSpoofingMitigator 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSUserAgentQuirksManager 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSUserMediaPermissionController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebExtensionToolbarItem 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebExtensionURLSchemeHandler 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebExtensionUtilities 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebExtensionWebProcessPlugInPageController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebExtensionsController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebProcessPlugIn 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWebProcessPlugInPageController 
01 00 1a00 /System/Library/PrivateFrameworks/SafariSharedUI.framework/SafariSharedUI: WBSWellKnownURLResponseCodeReliabilityChecker 
01 00 0a00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WBTabGroup 
01 00 3500 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUCreditCardDataController 
01 00 3500 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUFormAutoFillPrompt 
01 00 3500 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUFormDataController 
01 00 3500 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUHistory 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKBackForwardListItem 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKContentRuleListStore 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKDOMElement 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKFrameInfo 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKNavigationAction 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKNavigationResponse 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKPreferences 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKProcessPool 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKUserContentController 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInFrame 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInNodeHandle 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInScriptWorld 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebView 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebViewConfiguration 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebpagePreferences 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebsiteDataStore 
01 00 0a00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmark 
01 00 0a00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarkCollection 
01 00 0a00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarkWebFilterSettings 
01 00 0a00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarksSettingsGateway 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WebEvent 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WebSecurityOrigin 
01 00 3500 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WebUIAlert 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: WebView 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASAccountAuthenticationModificationExtensionManager 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASCredentialListViewController 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASIncomingCallObserver 
01 00 0400 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASPasswordCredentialAuthenticationViewController 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFBarTheme 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFCompressedBarButton 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFDimmingButton 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFFluidProgressView 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFSavedAccountTouchIconRequest 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFSiteIconView 
01 00 1600 /System/Library/PrivateFrameworks/MobileSafari.framework/MobileSafari: _SFSiteMetadataManager 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIActivityItemCustomization 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIActivityItemCustomizationGroup 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIClickInteraction 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIContextualMenuGestureRecognizer 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIFallbackPresentationViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteViewController 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UISheetDetent 
01 00 3400 /System/Library/Frameworks/UIKit.framework/UIKit: _UISheetPresentationController 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKApplicationManifest 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKElementAction 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKFrameHandle 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKProcessPoolConfiguration 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKRemoteObjectInterface 
01 00 3300 /System/Library/Frameworks/WebKit.framework/WebKit: _WKWebsiteDataStoreConfiguration 
