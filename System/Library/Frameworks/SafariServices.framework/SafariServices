|| __DATA.__objc_data _OBJC_CLASS_$_SFAuthenticationSession
|| __DATA.__objc_data _OBJC_CLASS_$_SFBlockBasedCAAnimationDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_SFContentBlockerManager
|| __DATA.__objc_data _OBJC_CLASS_$_SFContentBlockerState
|| __DATA.__objc_data _OBJC_CLASS_$_SFFolderPickerList
|| __DATA.__objc_data _OBJC_CLASS_$_SFSafariViewControllerConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SSReadingList
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityExtensionItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemCustomizationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityItemProviderCollection
|| __DATA.__objc_data _OBJC_CLASS_$__SFActivityViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAdaptivePreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAddBookmarkActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppAutoFillPasswordViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppPasswordSavingViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppleConnectExtensionManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFAppleConnectExtensionPageController
|| __DATA.__objc_data _OBJC_CLASS_$__SFAuthenticationContext
|| __DATA.__objc_data _OBJC_CLASS_$__SFAutomaticTabClosingUtilities
|| __DATA.__objc_data _OBJC_CLASS_$__SFAutomationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBarManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFBarTheme
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkTextEntryTableViewCell
|| __DATA.__objc_data _OBJC_CLASS_$__SFBookmarkTextEntryTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserKeyCommands
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserSavedState
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserView
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserWindowSettings
|| __DATA.__objc_data _OBJC_CLASS_$__SFBrowserWindowStateData
|| __DATA.__objc_data _OBJC_CLASS_$__SFCalendarEventDetector
|| __DATA.__objc_data _OBJC_CLASS_$__SFContactPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFContentBlockersPreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFCreditCardCaptureViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFDialog
|| __DATA.__objc_data _OBJC_CLASS_$__SFDigitalHealthViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFDimmingButton
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownload
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadCurrentPageActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadIconCache
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFDownloadStorageUsageMonitor
|| __DATA.__objc_data _OBJC_CLASS_$__SFDynamicBarAnimator
|| __DATA.__objc_data _OBJC_CLASS_$__SFEditablePasswordTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFExternalPasswordCredentialViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFFeatureAvailability
|| __DATA.__objc_data _OBJC_CLASS_$__SFFindOnPageToolbar
|| __DATA.__objc_data _OBJC_CLASS_$__SFFindOnPageUIActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFFindOnPageView
|| __DATA.__objc_data _OBJC_CLASS_$__SFFolderPickerItem
|| __DATA.__objc_data _OBJC_CLASS_$__SFFolderPickerTableViewCellLayoutManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFFormAutoFillInputSession
|| __DATA.__objc_data _OBJC_CLASS_$__SFFormDataController
|| __DATA.__objc_data _OBJC_CLASS_$__SFFormMetadataController
|| __DATA.__objc_data _OBJC_CLASS_$__SFGeolocationPermissionManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFICSPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFImageActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFInjectedJavaScriptController
|| __DATA.__objc_data _OBJC_CLASS_$__SFKillWebContentProcessUIActivity
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkPresentationIconCache
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkPreviewHeader
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkRedirectionResolver
|| __DATA.__objc_data _OBJC_CLASS_$__SFLinkWithPreviewActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFMailContentProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFManagedFeatureObserver
|| __DATA.__objc_data _OBJC_CLASS_$__SFMicrodataExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationBarItem
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationBarTheme
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationIntent
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationIntentBuilder
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationResult
|| __DATA.__objc_data _OBJC_CLASS_$__SFNavigationUtilitiesManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageFormatMenuController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageLoadErrorController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPageZoomPreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordAuditingViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordIconController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordPickerTableConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordPickerTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPasswordViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferenceDisplayInformation
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferenceNotifyingListController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencePopoverDisplayInformation
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesPopoverViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesUtilities
|| __DATA.__objc_data _OBJC_CLASS_$__SFPerSitePreferencesVendor
|| __DATA.__objc_data _OBJC_CLASS_$__SFPopoverPresentationDelegate
|| __DATA.__objc_data _OBJC_CLASS_$__SFPopoverSizingTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFPrintActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFPrintController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQRCodeDetectionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQRImagePreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocument
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentController
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentView
|| __DATA.__objc_data _OBJC_CLASS_$__SFQuickLookDocumentWriter
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderController
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderExtractedData
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFReaderWebProcessPlugInPageController
|| __DATA.__objc_data _OBJC_CLASS_$__SFRecentWebSearchesController
|| __DATA.__objc_data _OBJC_CLASS_$__SFReloadOptionsController
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSitePreferenceManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSiteQuirksManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFRequestDesktopSiteQuirksSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$__SFSafariDataSharingController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSafariSharingExtensionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSaveToFilesOperation
|| __DATA.__objc_data _OBJC_CLASS_$__SFSearchEngineController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSearchEngineInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SFSecIdentityPreferencesController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAlertController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$__SFSettingsAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$__SFSharablePasswordReceiver
|| __DATA.__objc_data _OBJC_CLASS_$__SFSharingLinkExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFSingleBookmarkNavigationController
|| __DATA.__objc_data _OBJC_CLASS_$__SFSiteIcon
|| __DATA.__objc_data _OBJC_CLASS_$__SFSiteIconView
|| __DATA.__objc_data _OBJC_CLASS_$__SFSiteMetadataManager
|| __DATA.__objc_data _OBJC_CLASS_$__SFStoreBannerTracker
|| __DATA.__objc_data _OBJC_CLASS_$__SFSyntheticClickContext
|| __DATA.__objc_data _OBJC_CLASS_$__SFTabStateData
|| __DATA.__objc_data _OBJC_CLASS_$__SFTextSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SFTouchIconFetchOperation
|| __DATA.__objc_data _OBJC_CLASS_$__SFUIViewPopoverSourceInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SFURLTextPreviewView
|| __DATA.__objc_data _OBJC_CLASS_$__SFURLTextPreviewViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFUserActivityController
|| __DATA.__objc_data _OBJC_CLASS_$__SFUserMediaPermissionController
|| __DATA.__objc_data _OBJC_CLASS_$__SFVibrantSeparatorView
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebAppServiceViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebAppViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebArchiveActivityItemProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebArchiveProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebClipMetadataFetcher
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebProcessPlugInReaderEnabledPageController
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebProcessSharingLinkExtractor
|| __DATA.__objc_data _OBJC_CLASS_$__SFWebView
|| __DATA.__objc_data _OBJC_CLASS_$__SSHistoryAccessSession
|| __DATA.__objc_data _OBJC_CLASS_$__SSURLCompletionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFAuthenticationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SFBlockBasedCAAnimationDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_SFContentBlockerManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SFContentBlockerState
|| __DATA.__objc_data _OBJC_METACLASS_$_SFFolderPickerList
|| __DATA.__objc_data _OBJC_METACLASS_$_SFSafariViewControllerConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SSReadingList
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityExtensionItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemCustomizationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityItemProviderCollection
|| __DATA.__objc_data _OBJC_METACLASS_$__SFActivityViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAdaptivePreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAddBookmarkActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAppAutoFillPasswordViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAppPasswordSavingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAppleConnectExtensionManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFApplicationManifestFetcher
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAuthenticationContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAutomaticTabClosingUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$__SFAutomationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBarManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBarTheme
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkTextEntryTableViewCell
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBookmarkTextEntryTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserKeyCommands
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserSavedState
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserWindowSettings
|| __DATA.__objc_data _OBJC_METACLASS_$__SFBrowserWindowStateData
|| __DATA.__objc_data _OBJC_METACLASS_$__SFCalendarEventDetector
|| __DATA.__objc_data _OBJC_METACLASS_$__SFContactPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFCreditCardCaptureViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDialog
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDigitalHealthViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDimmingButton
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownload
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadCurrentPageActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadIconCache
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFDownloadStorageUsageMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFEditablePasswordTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFExternalPasswordCredentialViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFeatureAvailability
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFindOnPageToolbar
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFindOnPageUIActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFindOnPageView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFolderPickerItem
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFolderPickerTableViewCellLayoutManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFormAutoFillInputSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SFFormDataController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFGeolocationPermissionManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFICSPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFImageActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFInjectedJavaScriptController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFKillWebContentProcessUIActivity
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkPresentationIconCache
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkPreviewHeader
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkRedirectionResolver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFLinkWithPreviewActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFMailContentProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFManagedFeatureObserver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFMicrodataExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationBarTheme
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationIntent
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationResult
|| __DATA.__objc_data _OBJC_METACLASS_$__SFNavigationUtilitiesManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageFormatMenuController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageLoadErrorController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPageZoomPreferenceManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordAuditingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordIconController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordPickerTableConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordPickerTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPasswordViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferenceDisplayInformation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferenceNotifyingListController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencePopoverDisplayInformation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesPopoverViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPopoverPresentationDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPopoverSizingTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFPrintActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQRCodeDetectionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQRImagePreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocument
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFQuickLookDocumentWriter
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderExtractedData
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReaderWebProcessPlugInPageController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRecentWebSearchesController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFReloadOptionsController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSiteQuirksManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSiteQuirksSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSafariDataSharingController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSafariSharingExtensionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSaveToFilesOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSearchEngineController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSearchEngineInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSecIdentityPreferencesController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAlertController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSettingsAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSharablePasswordReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSharingLinkExtractor
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSingleBookmarkNavigationController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSiteIcon
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSiteIconView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSiteMetadataManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SFStoreBannerTracker
|| __DATA.__objc_data _OBJC_METACLASS_$__SFSyntheticClickContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTelephonyNavigationMitigationPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTextSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SFTouchIconFetchOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUIViewPopoverSourceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SFURLTextPreviewView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFURLTextPreviewViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUserActivityController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFUserMediaPermissionController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFVibrantSeparatorView
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebAppServiceViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebAppViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebArchiveActivityItemProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebArchiveProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebClipMetadataFetcher
|| __DATA.__objc_data _OBJC_METACLASS_$__SFWebProcessPlugIn
|| __DATA.__objc_data _OBJC_METACLASS_$__SSHistoryAccessSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SSURLCompletionSession
|| __DATA_CONST.__const _SFAdditionalArgumentsKey
|| __DATA_CONST.__const _SFAggregateDAddedBookmarkInMemory
|| __DATA_CONST.__const _SFAggregateDFindOnPageActivityKey
|| __DATA_CONST.__const _SFAggregateDHistoryMigrationTimeKey
|| __DATA_CONST.__const _SFAggregateDIconsInTabEnabledKey
|| __DATA_CONST.__const _SFAggregateDRequestDesktopSiteKey
|| __DATA_CONST.__const _SFAggregateDSafeBrowsingDisabledKey
|| __DATA_CONST.__const _SFAggregateDSafeBrowsingWarningIgnoredKey
|| __DATA_CONST.__const _SFAggregateDSafeBrowsingWarningShownKey
|| __DATA_CONST.__const _SFAggregateDSelectedStartedFindOnPageKey
|| __DATA_CONST.__const _SFAggregateDSiteSpecificSearchEnabledKey
|| __DATA_CONST.__const _SFAggregateDSiteSpecificSearchProviderRemovedKey
|| __DATA_CONST.__const _SFAuthenticationErrorDomain
|| __DATA_CONST.__const _SFContentBlockerDidChangeDistributedNotification
|| __DATA_CONST.__const _SFContentBlockerErrorDomain
|| __DATA_CONST.__const _SFContentBlockerExtensionPointIdentifier
|| __DATA_CONST.__const _SFErrorDomain
|| __DATA_CONST.__const _SFRecentlyClosedTabsWereRemovedNotification
|| __DATA_CONST.__const _SFRemovedTabStateDataKey
|| __DATA_CONST.__const _SSReadingListErrorDomain
|| __DATA_CONST.__const __SFAddBookmarkUIActivityType
|| __DATA_CONST.__const __SFAllowMediaCaptureOnInsecureSites
|| __DATA_CONST.__const __SFAppleConnectExtensionEnabledKey
|| __DATA_CONST.__const __SFApplePayDisclosureAllowedKey
|| __DATA_CONST.__const __SFAudioPlaybackRequiresUserActionKey
|| __DATA_CONST.__const __SFAuthenticationContextDidInvalidateNotification
|| __DATA_CONST.__const __SFAuthenticationContextErrorDomain
|| __DATA_CONST.__const __SFAutomaticPasswordDismissedByUser
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewButtonPressedNotification
|| __DATA_CONST.__const __SFAutomaticPasswordInputViewNotificationPressedButtonUserInfoKey
|| __DATA_CONST.__const __SFAutomaticallyArchiveReadingListItemsEnabledKey
|| __DATA_CONST.__const __SFAutoplayPlayingPauseQuirkEnabledKey
|| __DATA_CONST.__const __SFBookmarksUserActivityType
|| __DATA_CONST.__const __SFCloseTabsAutomaticallyDefaultsKey
|| __DATA_CONST.__const __SFCloudDocsUIAddToICloudDriveActivityType
|| __DATA_CONST.__const __SFContentBlockersPerSitePreferenceDidChangeNotification
|| __DATA_CONST.__const __SFDebugContentDispositionHeaderStartsDownloadsKey
|| __DATA_CONST.__const __SFDebugDownloadAttributeForcesDownloadsKey
|| __DATA_CONST.__const __SFDebugEnableDownloadsInSubframesKey
|| __DATA_CONST.__const __SFDebugPromptForDownloadsOnNavigationResponseKey
|| __DATA_CONST.__const __SFDebugRenderWebContentLikeMacKey
|| __DATA_CONST.__const __SFDemoSiriSuggestionsKey
|| __DATA_CONST.__const __SFDeveloperPreferencesDidChangeNotification
|| __DATA_CONST.__const __SFDisableICECandidateFiltering
|| __DATA_CONST.__const __SFDomainWithModifiedContentBlockersPreferenceUserInfoKey
|| __DATA_CONST.__const __SFDownloadDidChangeCompletedURLNotification
|| __DATA_CONST.__const __SFDownloadDidChangeNotification
|| __DATA_CONST.__const __SFDownloadDidStartNotification
|| __DATA_CONST.__const __SFDownloadDidStopNotification
|| __DATA_CONST.__const __SFDownloadExpirationIntervalDefaultsKey
|| __DATA_CONST.__const __SFDownloadManagerDidFinishLastDownloadNotification
|| __DATA_CONST.__const __SFDownloadManagerTotalProgressDidChangeNotification
|| __DATA_CONST.__const __SFDownloadStorageUsageMonitorDidChangeUsageNotification
|| __DATA_CONST.__const __SFDownloadsDidChangeNotification
|| __DATA_CONST.__const __SFEnableDownloadImport
|| __DATA_CONST.__const __SFEnableEnumeratingAllNetworkInterfaces
|| __DATA_CONST.__const __SFEnableMediaCapture
|| __DATA_CONST.__const __SFEnableMockCaptureDevices
|| __DATA_CONST.__const __SFFormMetadataFocusingForStreamlinedLogin
|| __DATA_CONST.__const __SFHasCompletedReadingListArchivePreferenceMigrationKey
|| __DATA_CONST.__const __SFIconsInTabsEnabledKey
|| __DATA_CONST.__const __SFInlineMediaPlaybackRequiresPlaysInlineAttributeKey
|| __DATA_CONST.__const __SFInvisibleAutoplayNotPermittedKey
|| __DATA_CONST.__const __SFJavaScriptCanOpenWindowsAutomaticallyDefaultsKey
|| __DATA_CONST.__const __SFJavaScriptEnabledDefaultsKey
|| __DATA_CONST.__const __SFLegacyEncryptedMediaAPIEnabledKey
|| __DATA_CONST.__const __SFLowDataModeEnabledKey
|| __DATA_CONST.__const __SFMainContentUserGestureOverrideEnabledKey
|| __DATA_CONST.__const __SFMediaPlaybackAllowsInlineKey
|| __DATA_CONST.__const __SFMediaPlaybackRequiresUserActionKey
|| __DATA_CONST.__const __SFMediaSourceEnabledKey
|| __DATA_CONST.__const __SFNanoBlockAllCookiesEnabledKey
|| __DATA_CONST.__const __SFOfflineReadingListArchiveUsedDefaultsKey
|| __DATA_CONST.__const __SFOpenLinksInBackgroundDefaultsKey
|| __DATA_CONST.__const __SFPerDocumentAutoplayBehaviorQuirkEnabledKey
|| __DATA_CONST.__const __SFPrivateBrowsingDefaultsKey
|| __DATA_CONST.__const __SFReaderConfigurationDefaultsKey
|| __DATA_CONST.__const __SFReaderExtractorErrorDomain
|| __DATA_CONST.__const __SFReaderPageGroupIdentifier
|| __DATA_CONST.__const __SFReaderURLScheme
|| __DATA_CONST.__const __SFReadingListFetcherScheduleBackgroundTasksImmediatelyKey
|| __DATA_CONST.__const __SFReadingListUserActivityType
|| __DATA_CONST.__const __SFRequestDesktopSitePreferenceDidChangeDistributedNotification
|| __DATA_CONST.__const __SFSafariAlwaysRequestDesktopSiteSettingsKey
|| __DATA_CONST.__const __SFSafariHighLevelDomainsAndPortsToUseOnlyAvailableIdentityWithoutPromptingSettingsKey
|| __DATA_CONST.__const __SFSafariPerSitePreferenceDidChangeNotification
|| __DATA_CONST.__const __SFSafariResourceScheme
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenBookmarksView
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenNewPrivateTab
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenNewTab
|| __DATA_CONST.__const __SFSafariShortcutItemTypeOpenReadingListView
|| __DATA_CONST.__const __SFSafariStateActiveDocumentIndexKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowDatabaseIDKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowSceneIDKey
|| __DATA_CONST.__const __SFSafariStateBrowserWindowUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentDisplayingStandaloneImageKey
|| __DATA_CONST.__const __SFSafariStateDocumentLastViewedTimeKey
|| __DATA_CONST.__const __SFSafariStateDocumentOrderIndexKey
|| __DATA_CONST.__const __SFSafariStateDocumentOwningBrowserWindowUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentReaderViewTopScrollOffsetKey
|| __DATA_CONST.__const __SFSafariStateDocumentReadingListBookmarkKey
|| __DATA_CONST.__const __SFSafariStateDocumentSourceApplicationBundleIdentifierKey
|| __DATA_CONST.__const __SFSafariStateDocumentTitleKey
|| __DATA_CONST.__const __SFSafariStateDocumentURLKey
|| __DATA_CONST.__const __SFSafariStateDocumentUUIDKey
|| __DATA_CONST.__const __SFSafariStateDocumentUserVisibleURLKey
|| __DATA_CONST.__const __SFSafariStateDocumentUsesPrivateBrowsingStyleKey
|| __DATA_CONST.__const __SFSafariStateDocumentWasOpenedFromLinkKey
|| __DATA_CONST.__const __SFSafariStateDocumentsFileVersionKey
|| __DATA_CONST.__const __SFSafariStateDocumentsKey
|| __DATA_CONST.__const __SFSafariStatePrivateActiveDocumentIndexKey
|| __DATA_CONST.__const __SFSafariStatePrivateDocumentsKey
|| __DATA_CONST.__const __SFSearchEngineBaidu
|| __DATA_CONST.__const __SFSearchEngineBing
|| __DATA_CONST.__const __SFSearchEngineControllerInstanceDidFinishPopulatingSearchEnginesNotification
|| __DATA_CONST.__const __SFSearchEngineControllerSharedInstanceDidBecomeAvailableNotification
|| __DATA_CONST.__const __SFSearchEngineDuckDuckGo
|| __DATA_CONST.__const __SFSearchEngineGoogle
|| __DATA_CONST.__const __SFSearchEngineQihoo
|| __DATA_CONST.__const __SFSearchEngineSogou
|| __DATA_CONST.__const __SFSearchEngineStringDefaultsKey
|| __DATA_CONST.__const __SFSearchEngineYahoo
|| __DATA_CONST.__const __SFSearchEngineYandex
|| __DATA_CONST.__const __SFSearchProviderBaiduTrackingCodeiPadKey
|| __DATA_CONST.__const __SFSearchProviderBaiduTrackingCodeiPhoneKey
|| __DATA_CONST.__const __SFSearchProviderBaiduTrackingCodeiPodTouchKey
|| __DATA_CONST.__const __SFShouldCaptureAudioInUIProcessKey
|| __DATA_CONST.__const __SFTabStateSessionStateKey
|| __DATA_CONST.__const __SFTabStateShowingReaderKey
|| __DATA_CONST.__const __SFUserAgentDefaultsKey
|| __DATA_CONST.__const __SFVideoPlaybackRequiresUserActionKey
|| __DATA_CONST.__const __SFWarnAboutFraudulentWebsitesDefaultsKey
|| __DATA_CONST.__const __SFWebArchiveErrorDomain
|| __DATA_CONST.__const __SFWebArchiveMIMEType
|| __DATA_CONST.__const __SFWebKitShowLinkPreviewsDefaultsKey
|| __DATA_CONST.__const __SFWebKitSiteSpecificHacksEnabledKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SFSafariViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFApplicationManifestFetcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFAutoFillInputView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFAutomaticPasswordInputViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFBrowserContentViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFCrashBanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFDialogController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFDialogView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFFluidProgressView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFFormAutoFillController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFNavigationBar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFReaderCustomProtocols
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFTelephonyNavigationMitigationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFToolbar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SFWebProcessPlugIn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SFSafariViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFAppleConnectExtensionPageController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFAutoFillInputView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFAutomaticPasswordInputViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFBrowserContentViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFContentBlockersPreferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFCrashBanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFDialogController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFDialogView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFDownloadActivityItemProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFDynamicBarAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFluidProgressView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFormAutoFillController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFFormMetadataController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFNavigationBar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFNavigationBarItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFNavigationIntentBuilder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFPerSitePreferencesVendor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFPrintController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFReaderCustomProtocols
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFRequestDesktopSitePreferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFTabStateData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFToolbar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebProcessPlugInReaderEnabledPageController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebProcessSharingLinkExtractor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SFWebView
|| __TEXT.__const _SFMaximumRecentlyClosedTabCount
|| __TEXT.__const __SFAuthenticationContextInvalidatedError
|| __TEXT.__const __SFAuthenticationContextNoTimeout
|| __TEXT.__const __SFBarItemNull
|| __TEXT.__const __SFMailContentTypeNull
|| __TEXT.__const __SFMaximumWidthForCompactClass
|| __TEXT.__text _SFDeferrableUpdateViewCanUpdateContents
|| __TEXT.__text _SFDeferrableUpdateViewDidMoveToWindow
|| __TEXT.__text _SFDeferrableUpdateViewShouldAttemptToUpdateContents
|| __TEXT.__text __SFAnalyticsValueForShortcutItemType
|| __TEXT.__text __SFApplicationNameForDesktopUserAgent
|| __TEXT.__text __SFApplicationNameForUserAgent
|| __TEXT.__text __SFBackdropEffectForBarTintStyle
|| __TEXT.__text __SFBackdropGroupNameForOwner
|| __TEXT.__text __SFBarItemEnumerateCases
|| __TEXT.__text __SFCGPointsEqualWithEpsilon
|| __TEXT.__text __SFCGRectGrowToSize
|| __TEXT.__text __SFCGRectOfSizeAlignedWithinRect
|| __TEXT.__text __SFCeilingFloatToPixels
|| __TEXT.__text __SFClamp
|| __TEXT.__text __SFClampPercent
|| __TEXT.__text __SFContentBlockerStoreURL
|| __TEXT.__text __SFContinuousCornerRadiusMatchingRadiusWithInset
|| __TEXT.__text __SFCustomUserAgentStringIfNeeded
|| __TEXT.__text __SFDarkTintStyleForStyle
|| __TEXT.__text __SFDataOwnerForWebViewInteraction
|| __TEXT.__text __SFDeviceHasHomeButton
|| __TEXT.__text __SFDeviceHasRectangularScreen
|| __TEXT.__text __SFDeviceIsPad
|| __TEXT.__text __SFDeviceRegionCodeIsChina
|| __TEXT.__text __SFDeviceStatusBarHasNonTransparentBackground
|| __TEXT.__text __SFDeviceSupportsDesktopSitesByDefault
|| __TEXT.__text __SFDeviceSupportsHighQualityGraphics
|| __TEXT.__text __SFDownloadingFileTypeFromUTIAndMIMEType
|| __TEXT.__text __SFEqualWithEpsilon
|| __TEXT.__text __SFFloorFloatToPixels
|| __TEXT.__text __SFIPhoneSafariUserAgentString
|| __TEXT.__text __SFImageForMediaCaptureDeviceIcon
|| __TEXT.__text __SFIncrementAggdKey
|| __TEXT.__text __SFInsetIsInvalid
|| __TEXT.__text __SFInterpolate
|| __TEXT.__text __SFIsChinaDevice
|| __TEXT.__text __SFIsDarkTintStyle
|| __TEXT.__text __SFIsPrivateTintStyle
|| __TEXT.__text __SFLightTintStyleForStyle
|| __TEXT.__text __SFLocalizedTitleStringForShortcutItemType
|| __TEXT.__text __SFMacSafariUserAgentString
|| __TEXT.__text __SFMediaCaptureDeviceIconIsMuted
|| __TEXT.__text __SFOnePixel
|| __TEXT.__text __SFOpenURL
|| __TEXT.__text __SFPopoverSourceInfoUnwrap
|| __TEXT.__text __SFPreferredLanguagesIncludesAnyLanguage
|| __TEXT.__text __SFRequestDesktopSiteActivitySourceJavaScriptString
|| __TEXT.__text __SFResizableImageWithContinuousCurveCorners
|| __TEXT.__text __SFRoundEdgeInsetsToPixels
|| __TEXT.__text __SFRoundFloatToPixels
|| __TEXT.__text __SFRoundPointToPixels
|| __TEXT.__text __SFRoundRectToPixels
|| __TEXT.__text __SFRoundSizeToPixels
|| __TEXT.__text __SFSafariChromeUserAgentString
|| __TEXT.__text __SFSafariContainerPath
|| __TEXT.__text __SFSafariContainerURL
|| __TEXT.__text __SFSafariIconImageCacheDirectoryPath
|| __TEXT.__text __SFSafariIconLinkImage
|| __TEXT.__text __SFSafariNonContaineredSettingsDirectoryPath
|| __TEXT.__text __SFSafariPreferencesDomain
|| __TEXT.__text __SFSafariSavedStateDirectoryPath
|| __TEXT.__text __SFSafariSearchProviderDefinitions
|| __TEXT.__text __SFSafariTemporaryDirectoryPath
|| __TEXT.__text __SFSafariTestContentDirectoryPath
|| __TEXT.__text __SFScreenNativeScale
|| __TEXT.__text __SFScreenScale
|| __TEXT.__text __SFScreenshotServiceForScene
|| __TEXT.__text __SFSetAggdKey
|| __TEXT.__text __SFSetAggdKeyAlways
|| __TEXT.__text __SFShouldShowChineseFeatures
|| __TEXT.__text __SFShouldShowLinkPreviews
|| __TEXT.__text __SFShouldShowRussianFeatures
|| __TEXT.__text __SFSizeClassForWidth
|| __TEXT.__text __SFStatusBarHeight
|| __TEXT.__text __SFStatusBarIsHidden
|| __TEXT.__text __SFStatusBarStyle
|| __TEXT.__text __SFSupportsMultipleWindows
|| __TEXT.__text __SFTypeIsExtractableArchive
|| __TEXT.__text __SFUIActionForToggleShowLinkPreviews
|| __TEXT.__text __SFWidthIsCompactSizeClass
__ AppSupport: _CPGetDeviceRegionCode
__ AppSupport: _CPNetworkObserverReachable
__ AppSupport: _CPSharedResourcesDirectory
__ AppSupport: _OBJC_CLASS_$_CPAggregateDictionary
__ AppSupport: _OBJC_CLASS_$_CPNetworkObserver
__ AssertionServices: _BKSApplicationStateAll
__ AssertionServices: _BKSApplicationStateDisplayIDKey
__ AssertionServices: _BKSApplicationStateKey
__ AssertionServices: _BKSApplicationStateProcessIDKey
__ AssertionServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ AuthenticationServices: _ASExtensionErrorDomain
__ AuthenticationServices: _OBJC_CLASS_$_ASCredentialServiceIdentifier
__ AuthenticationServices: _OBJC_CLASS_$_ASPasswordCredentialIdentity
__ AuthenticationServices: _OBJC_CLASS_$_ASWebAuthenticationSession
__ AuthenticationServices: _OBJC_CLASS_$__ASCredentialListViewController
__ AuthenticationServices: _OBJC_CLASS_$__ASPasswordCredentialAuthenticationViewController
__ CFNetwork: _NSURLAuthenticationMethodClientCertificate
__ CFNetwork: _NSURLAuthenticationMethodDefault
__ CFNetwork: _NSURLAuthenticationMethodHTMLForm
__ CFNetwork: _NSURLAuthenticationMethodHTTPBasic
__ CFNetwork: _NSURLAuthenticationMethodHTTPDigest
__ CFNetwork: _NSURLAuthenticationMethodNTLM
__ CFNetwork: _NSURLAuthenticationMethodOAuth
__ CFNetwork: _NSURLAuthenticationMethodServerTrust
__ CFNetwork: _NSURLProtectionSpaceHTTPS
__ CFNetwork: _OBJC_CLASS_$_NSHTTPCookie
__ CFNetwork: _OBJC_CLASS_$_NSHTTPCookieStorage
__ CFNetwork: _OBJC_CLASS_$_NSHTTPURLResponse
__ CFNetwork: _OBJC_CLASS_$_NSURLCredential
__ CFNetwork: _OBJC_CLASS_$_NSURLCredentialStorage
__ CFNetwork: _OBJC_CLASS_$_NSURLProtectionSpace
__ CFNetwork: _OBJC_CLASS_$_NSURLRequest
__ CFNetwork: _OBJC_CLASS_$_NSURLResponse
__ CFNetwork: __kCFStreamErrorCodeKey
__ CFNetwork: _kCFStreamPropertySSLPeerTrust
__ CertUI: _OBJC_CLASS_$_CertUIPrompt
__ CertUI: _OBJC_CLASS_$_CertUITrustManager
__ CertUI: _kCertUIServiceTypeHTTPS
__ CertUI: _kCertUITrustPromptOptionsAllowCertificateTrustKey
__ CertUI: _kCertUITrustPromptOptionsShowContinueKey
__ Contacts: _CNContactBirthdayKey
__ Contacts: _CNContactEmailAddressesKey
__ Contacts: _CNContactPhoneNumbersKey
__ Contacts: _CNContactPostalAddressesKey
__ Contacts: _CNContactUrlAddressesKey
__ Contacts: _CNLabelHome
__ Contacts: _CNLabelWork
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactVCardSerialization
__ Contacts: _OBJC_CLASS_$_CNLabeledValue
__ Contacts: _OBJC_CLASS_$_CNPostalAddressFormatter
__ ContactsUI: _OBJC_CLASS_$_CNContactViewController
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFStringTokenizerCreate
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleCountryCode
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLIsExcludedFromBackupKey
__ CoreFoundation: _NSURLTypeIdentifierKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: __kCFBundleDisplayNameKey
__ CoreFoundation: __kCFBundleShortVersionStringKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextAddPath
__ CoreGraphics: _CGContextClearRect
__ CoreGraphics: _CGContextClip
__ CoreGraphics: _CGContextDrawImageFromRect
__ CoreGraphics: _CGContextDrawLinearGradient
__ CoreGraphics: _CGContextFillPath
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextSetBlendMode
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetRGBFillColor
__ CoreGraphics: _CGContextSetShadowWithColor
__ CoreGraphics: _CGGradientCreateWithColorComponents
__ CoreGraphics: _CGGradientRelease
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPathAddLineToPoint
__ CoreGraphics: _CGPathAddQuadCurveToPoint
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGPathCreateWithRoundedRect
__ CoreGraphics: _CGPathMoveToPoint
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreLocation: _OBJC_CLASS_$_CLInUseAssertion
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreRecognition: _CROutputTypeCreditCardCardholderName
__ CoreRecognition: _CROutputTypeCreditCardExpirationDate
__ CoreRecognition: _CROutputTypeCreditCardNumber
__ CoreRecognition: _OBJC_CLASS_$_CRCameraReader
__ CoreServices: _LSDisableURLOverrides
__ CoreServices: _LSFileProviderStringKey
__ CoreServices: _LSOpenApplicationPayloadOptionsKey
__ CoreServices: _LSReferrerURLKey
__ CoreServices: _LSRequireOpenInPlaceKey
__ CoreServices: _OBJC_CLASS_$_LSAppLink
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSDocumentProxy
__ CoreServices: _OBJC_CLASS_$_LSResourceProxy
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ CoreServices: _UTTypeConformsTo
__ CoreServices: _UTTypeCopyDescription
__ CoreServices: _UTTypeCopyPreferredTagWithClass
__ CoreServices: _UTTypeCreatePreferredIdentifierForTag
__ CoreServices: _UTTypeEqual
__ CoreServices: _UTTypeIsDynamic
__ CoreServices: __LSHandlerRankOwner
__ CoreServices: __kUTTypePassBundle
__ CoreServices: __kUTTypePassData
__ CoreServices: _kUTTagClassFilenameExtension
__ CoreServices: _kUTTagClassMIMEType
__ CoreServices: _kUTTypeAudio
__ CoreServices: _kUTTypeBzip2Archive
__ CoreServices: _kUTTypeCalendarEvent
__ CoreServices: _kUTTypeContact
__ CoreServices: _kUTTypeData
__ CoreServices: _kUTTypeEmailMessage
__ CoreServices: _kUTTypeGNUZipArchive
__ CoreServices: _kUTTypeHTML
__ CoreServices: _kUTTypeImage
__ CoreServices: _kUTTypeMovie
__ CoreServices: _kUTTypePDF
__ CoreServices: _kUTTypePlainText
__ CoreServices: _kUTTypePropertyList
__ CoreServices: _kUTTypeText
__ CoreServices: _kUTTypeURL
__ CoreServices: _kUTTypeUTF8PlainText
__ CoreServices: _kUTTypeWebArchive
__ CoreServices: _kUTTypeZipArchive
__ CoreSuggestions: _OBJC_CLASS_$_SGSuggestionsService
__ CoreTelephony: _OBJC_CLASS_$_CTBundle
__ CoreTelephony: _OBJC_CLASS_$_CTXPCServiceSubscriptionContext
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreText: _CTFontDescriptorCreateWithAttributes
__ CoreText: _CTFontDescriptorMatchFontDescriptorsWithProgressHandler
__ CoreText: _CTLineCreateWithAttributedString
__ CoreText: _CTLineGetOffsetForStringIndex
__ CoreText: _CTTypesetterCreateWithAttributedString
__ CoreText: _CTTypesetterSuggestLineBreak
__ CoreText: _kCTFontDownloadableAttribute
__ CoreText: _kCTFontDownloadedAttribute
__ CoreText: _kCTFontFamilyNameAttribute
__ CoreText: _kCTFontWeightLight
__ DocumentManagerCore: _OBJC_CLASS_$_DOCDownloadImportManager
__ DocumentManagerCore: _OBJC_CLASS_$_DOCManagedPermission
__ FileProvider: _FPExtendBookmarkForDocumentURL
__ FileProvider: _FPUpdateLastUsedDate
__ FileProvider: _OBJC_CLASS_$_FPItemManager
__ FileProvider: _OBJC_CLASS_$_FPProviderDomain
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSExtensionIdentifierName
__ Foundation: _NSExtensionJavaScriptFinalizeArgumentKey
__ Foundation: _NSExtensionJavaScriptPreprocessingResultsKey
__ Foundation: _NSExtensionPointName
__ Foundation: _NSFileSize
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSProgressFileOperationKindDownloading
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSURLErrorFailingURLErrorKey
__ Foundation: _NSURLErrorFailingURLStringErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSUserActivityTypeBrowsingWeb
__ Foundation: _NSUserName
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSByteCountFormatter
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionContext
__ Foundation: _OBJC_CLASS_$_NSExtensionItem
__ Foundation: _OBJC_CLASS_$_NSFileCoordinator
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSItemProvider
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSProxy
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSExtensionContext
__ Foundation: _OBJC_METACLASS_$_NSProxy
__ GraphicsServices: _GSCurrentEventTimestamp
__ GraphicsServices: _GSEventIsHardwareKeyboardAttached
__ JavaScriptCore: _JSContextGetGlobalContext
__ JavaScriptCore: _JSContextGetGlobalObject
__ JavaScriptCore: _JSContextGetGroup
__ JavaScriptCore: _JSRemoteInspectorSetParentProcessInformation
__ JavaScriptCore: _JSRemoteInspectorStart
__ JavaScriptCore: _JSScriptCreateReferencingImmortalASCIIText
__ JavaScriptCore: _JSScriptEvaluate
__ JavaScriptCore: _JSValueIsObject
__ JavaScriptCore: _JSValueIsString
__ JavaScriptCore: _OBJC_CLASS_$_JSContext
__ JavaScriptCore: _OBJC_CLASS_$_JSValue
__ LocalAuthentication: _LAErrorDomain
__ LocalAuthentication: _LAErrorSubcodeKey
__ LocalAuthentication: _OBJC_CLASS_$_LAContext
__ ManagedConfiguration: _MCFeatureSafariFraudWarningForced
__ ManagedConfiguration: _MCFeatureSafariJavaScriptAllowed
__ ManagedConfiguration: _MCFeatureSafariPopUpsAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MapKit: _MKMapItemTypeIdentifier
__ MapKit: _OBJC_CLASS_$_MKMapItem
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeHUDController
__ MobileIcons: _LICreateIconFromCachedBitmap
__ PlugInKit: _PKUserElectionAttribute
__ PowerLog: _PLLogRegisteredEvent
__ PowerLog: _PLShouldLogRegisteredEvent
__ Preferences: _OBJC_CLASS_$_PSListController
__ Preferences: _OBJC_METACLASS_$_PSListController
__ QuartzCore: _CAColorMatrixConcat
__ QuartzCore: _CAColorMatrixMakeBrightness
__ QuartzCore: _CAColorMatrixMakeColorSourceOver
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _CATransform3DRotate
__ QuartzCore: _CATransform3DScale
__ QuartzCore: _CATransform3DTranslate
__ QuartzCore: _OBJC_CLASS_$_CAAnimationGroup
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAPackage
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CAStateController
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _kCAAnimationAbsolute
__ QuartzCore: _kCAAnimationNonZero
__ QuartzCore: _kCAAnimationRelative
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFillModeBackwards
__ QuartzCore: _kCAFillModeBoth
__ QuartzCore: _kCAFilterDestOut
__ QuartzCore: _kCAFilterPlusD
__ QuartzCore: _kCALayerContentsSwizzleAAAA
__ QuartzCore: _kCAMediaTimingFunctionDefault
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ QuartzCore: _kCAMediaTimingFunctionLinear
__ QuartzCore: _kCAPackageTypeCAMLBundle
__ QuickLookThumbnailing: _OBJC_CLASS_$_QLThumbnailGenerationRequest
__ QuickLookThumbnailing: _OBJC_CLASS_$_QLThumbnailGenerator
__ SafariFoundation: _OBJC_CLASS_$_SFAutoFillFeatureManager
__ SafariFoundation: _OBJC_CLASS_$_SFAutoFillHelperProxy
__ SafariFoundation: _OBJC_CLASS_$_SFCredentialProviderExtensionHelperProxy
__ SafariFoundation: _OBJC_CLASS_$_SFCredentialProviderExtensionManager
__ SafariFoundation: _OBJC_CLASS_$_SFDomainAssociationUtilities
__ SafariFoundation: _OBJC_CLASS_$_SFPasswordCredentialIdentity
__ SafariFoundation: _OBJC_CLASS_$_SFSafariCredential
__ SafariFoundation: _OBJC_CLASS_$_SFSafariCredentialStore
__ SafariFoundation: _OBJC_CLASS_$_SFSuggestedUserProvider
__ SafariFoundation: _SFAutoFillHelperErrorDomain
__ Security: _SecCertificateCopySubjectSummary
__ Security: _SecIdentityCopyCertificate
__ Security: _SecIdentityGetTypeID
__ Security: _SecItemCopyMatching
__ Security: _SecPolicyCreateSSL
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateWithAuditToken
__ Security: _SecTrustCopyInfo
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustDeserialize
__ Security: _SecTrustEvaluate
__ Security: _SecTrustGetCertificateAtIndex
__ Security: _SecTrustGetCertificateCount
__ Security: _SecTrustSerialize
__ Security: _kSecAttrAccessGroup
__ Security: _kSecClass
__ Security: _kSecClassIdentity
__ Security: _kSecMatchIssuers
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecReturnRef
__ Security: _kSecTrustInfoCompanyNameKey
__ Security: _kSecTrustInfoExtendedValidationKey
__ Security: _kSecTrustInfoRevocationKey
__ Security: _kSecValueRef
__ TelephonyUtilities: _OBJC_CLASS_$_TUDialRequest
__ TextInput: _OBJC_CLASS_$_TIAutofill
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _OBJC_CLASS_$_NSParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSTextAttachment
__ UIKit: _OBJC_CLASS_$_UIAction
__ UIKit: _OBJC_CLASS_$_UIActivity
__ UIKit: _OBJC_CLASS_$_UIActivityItemProvider
__ UIKit: _OBJC_CLASS_$_UIActivityViewController
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationExtensionActivity
__ UIKit: _OBJC_CLASS_$_UIAutofillExtrasSuggestion
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIContextualAction
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIDocumentBrowserViewController
__ UIKit: _OBJC_CLASS_$_UIDocumentInteractionController
__ UIKit: _OBJC_CLASS_$_UIDocumentPickerViewController
__ UIKit: _OBJC_CLASS_$_UIDragInteraction
__ UIKit: _OBJC_CLASS_$_UIDragItem
__ UIKit: _OBJC_CLASS_$_UIDragPreview
__ UIKit: _OBJC_CLASS_$_UIDragPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIDropInteraction
__ UIKit: _OBJC_CLASS_$_UIDropProposal
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIFontMetrics
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRendererFormat
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIInputView
__ UIKit: _OBJC_CLASS_$_UIInputViewController
__ UIKit: _OBJC_CLASS_$_UIKBScreenTraits
__ UIKit: _OBJC_CLASS_$_UIKeyCommand
__ UIKit: _OBJC_CLASS_$_UIKeyboardImpl
__ UIKit: _OBJC_CLASS_$_UIKeyboardInputModeController
__ UIKit: _OBJC_CLASS_$_UIKeyboardLayout
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UILocalizedIndexedCollation
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIMenu
__ UIKit: _OBJC_CLASS_$_UIMenuController
__ UIKit: _OBJC_CLASS_$_UIMenuItem
__ UIKit: _OBJC_CLASS_$_UINavigationBar
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UINavigationItem
__ UIKit: _OBJC_CLASS_$_UIOpenInIBooksActivity
__ UIKit: _OBJC_CLASS_$_UIOpenURLAction
__ UIKit: _OBJC_CLASS_$_UIOpenURLContext
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPasteboard
__ UIKit: _OBJC_CLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_CLASS_$_UIPeripheralHost
__ UIKit: _OBJC_CLASS_$_UIPreviewAction
__ UIKit: _OBJC_CLASS_$_UIPreviewPresentationController
__ UIKit: _OBJC_CLASS_$_UIPrintInfo
__ UIKit: _OBJC_CLASS_$_UIPrintInteractionController
__ UIKit: _OBJC_CLASS_$_UIPrintPageRenderer
__ UIKit: _OBJC_CLASS_$_UIProgressView
__ UIKit: _OBJC_CLASS_$_UIResponder
__ UIKit: _OBJC_CLASS_$_UISceneOpenURLOptions
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISearchBar
__ UIKit: _OBJC_CLASS_$_UISearchController
__ UIKit: _OBJC_CLASS_$_UISelectionFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UISocialActivity
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UIStatusBarServer
__ UIKit: _OBJC_CLASS_$_UISwipeActionsConfiguration
__ UIKit: _OBJC_CLASS_$_UISwipeGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UISwitch
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewCellLayoutManagerValue1
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedDragPreview
__ UIKit: _OBJC_CLASS_$_UITextField
__ UIKit: _OBJC_CLASS_$_UITextSuggestion
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UIToolbar
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIVibrancyEffect
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWebClip
__ UIKit: _OBJC_CLASS_$_UIWebClipLinkTag
__ UIKit: _OBJC_CLASS_$_UIWebGeolocationPolicyDecider
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$__UIActivityItemCustomization
__ UIKit: _OBJC_CLASS_$__UIActivityItemCustomizationGroup
__ UIKit: _OBJC_CLASS_$__UIClickInteraction
__ UIKit: _OBJC_CLASS_$__UIFallbackPresentationViewController
__ UIKit: _OBJC_CLASS_$__UIRemoteViewController
__ UIKit: _OBJC_CLASS_$__UISheetPresentationController
__ UIKit: _OBJC_METACLASS_$_UIActivity
__ UIKit: _OBJC_METACLASS_$_UIActivityItemProvider
__ UIKit: _OBJC_METACLASS_$_UIActivityViewController
__ UIKit: _OBJC_METACLASS_$_UIAlertAction
__ UIKit: _OBJC_METACLASS_$_UIAlertController
__ UIKit: _OBJC_METACLASS_$_UIApplicationExtensionActivity
__ UIKit: _OBJC_METACLASS_$_UIBarButtonItem
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UIInputView
__ UIKit: _OBJC_METACLASS_$_UIInputViewController
__ UIKit: _OBJC_METACLASS_$_UIKBScreenTraits
__ UIKit: _OBJC_METACLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UINavigationController
__ UIKit: _OBJC_METACLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_METACLASS_$_UIResponder
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UISearchBar
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewCellLayoutManagerValue1
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UITextField
__ UIKit: _OBJC_METACLASS_$_UITextSuggestion
__ UIKit: _OBJC_METACLASS_$_UIToolbar
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIVisualEffectView
__ UIKit: _OBJC_METACLASS_$__UIRemoteViewController
__ UIKit: _UIActivityTypeAddToReadingList
__ UIKit: _UIActivityTypeAirDrop
__ UIKit: _UIActivityTypeCopyToPasteboard
__ UIKit: _UIActivityTypeMail
__ UIKit: _UIActivityTypeMarkupAsPDF
__ UIKit: _UIActivityTypeMessage
__ UIKit: _UIActivityTypeOpenInIBooks
__ UIKit: _UIActivityTypePrint
__ UIKit: _UIAnimationDragCoefficient
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationLaunchOptionsSourceApplicationKey
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIApplicationWillTerminateNotification
__ UIKit: _UIContentSizeCategoryAccessibilityLarge
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryIsAccessibilityCategory
__ UIKit: _UIContentSizeCategoryLarge
__ UIKit: _UIContentSizeCategoryMedium
__ UIKit: _UIContentSizeCategoryNewValueKey
__ UIKit: _UIContentSizeCategoryUnspecified
__ UIKit: _UICreateCGImageFromIOSurface
__ UIKit: _UIEdgeInsetsAdd
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsMax
__ UIKit: _UIEdgeInsetsSubtract
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontDescriptorTraitsAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCallout
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontTextStyleTitle1
__ UIKit: _UIFontTextStyleTitle2
__ UIKit: _UIFontTextStyleTitle3
__ UIKit: _UIFontWeightLight
__ UIKit: _UIFontWeightTrait
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIGraphicsPopContext
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIImageSymbolWeightForFontWeight
__ UIKit: _UIKeyInputEscape
__ UIKit: _UIKeyInputLeftArrow
__ UIKit: _UIKeyInputRightArrow
__ UIKit: _UIKeyboardAnimationCurveUserInfoKey
__ UIKit: _UIKeyboardAnimationDurationUserInfoKey
__ UIKit: _UIKeyboardAutomaticIsOnScreen
__ UIKit: _UIKeyboardFrameBeginUserInfoKey
__ UIKit: _UIKeyboardFrameEndUserInfoKey
__ UIKit: _UIKeyboardGetDefaultInputModesForLanguage
__ UIKit: _UIKeyboardOrderOutAutomaticToDirectionWithDuration
__ UIKit: _UIKeyboardPrivateWillChangeFrameNotification
__ UIKit: _UIKeyboardWillChangeFrameNotification
__ UIKit: _UILayoutFittingCompressedSize
__ UIKit: _UILayoutFittingExpandedSize
__ UIKit: _UIMenuControllerWillHideMenuNotification
__ UIKit: _UIPasteboardOptionExpirationDate
__ UIKit: _UIPasteboardTypeAutomatic
__ UIKit: _UIRectFill
__ UIKit: _UIRectFillUsingBlendMode
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRoundToViewScale
__ UIKit: _UISceneDidEnterBackgroundNotification
__ UIKit: _UISceneWillEnterForegroundNotification
__ UIKit: _UIScrollViewDecelerationRateNormal
__ UIKit: _UIStatusBarStyleFromUIWebClipStatusBarStyle
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ UIKit: _UIViewNoIntrinsicMetric
__ UIKit: __UIAccessibilityContentSizeCategoryImageAdjustingScaleFactorForTraitCollection
__ UIKit: __UIApplicationLinkedOnVersion
__ UIKit: ___UIApplicationLinkedOnOrAfter
__ WebBookmarks: _OBJC_CLASS_$_WebBookmark
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarkCollection
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarkWebFilterSettings
__ WebBookmarks: _OBJC_CLASS_$_WebBookmarksSettingsGateway
__ WebBookmarks: _WebBookmarksChangedFolderIDKey
__ WebBookmarks: _WebBookmarksDidReloadNotification
__ WebBookmarks: _WebBookmarksFolderContentsDidChangeNotification
__ WebKit: _OBJC_CLASS_$_WKBackForwardListItem
__ WebKit: _OBJC_CLASS_$_WKFrameInfo
__ WebKit: _OBJC_CLASS_$_WKNavigationAction
__ WebKit: _OBJC_CLASS_$_WKNavigationResponse
__ WebKit: _OBJC_CLASS_$_WKPreferences
__ WebKit: _OBJC_CLASS_$_WKProcessPool
__ WebKit: _OBJC_CLASS_$_WKUserContentController
__ WebKit: _OBJC_CLASS_$_WKUserScript
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInFrame
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInNodeHandle
__ WebKit: _OBJC_CLASS_$_WKWebProcessPlugInScriptWorld
__ WebKit: _OBJC_CLASS_$_WKWebView
__ WebKit: _OBJC_CLASS_$_WKWebViewConfiguration
__ WebKit: _OBJC_CLASS_$_WKWebpagePreferences
__ WebKit: _OBJC_CLASS_$_WKWebsiteDataStore
__ WebKit: _OBJC_CLASS_$_WebEvent
__ WebKit: _OBJC_CLASS_$_WebSecurityOrigin
__ WebKit: _OBJC_CLASS_$_WebView
__ WebKit: _OBJC_CLASS_$__WKApplicationManifest
__ WebKit: _OBJC_CLASS_$__WKElementAction
__ WebKit: _OBJC_CLASS_$__WKFrameHandle
__ WebKit: _OBJC_CLASS_$__WKProcessPoolConfiguration
__ WebKit: _OBJC_CLASS_$__WKRemoteObjectInterface
__ WebKit: _OBJC_CLASS_$__WKUserContentExtensionStore
__ WebKit: _OBJC_CLASS_$__WKUserContentWorld
__ WebKit: _OBJC_CLASS_$__WKWebsiteDataStoreConfiguration
__ WebKit: _OBJC_METACLASS_$_WKWebView
__ WebKit: _WebKitErrorDomain
__ WebKit: _WebThreadLock
__ WebKit: __WKLegacyErrorDomain
__ WebKit: __WKRecoveryAttempterErrorKey
__ WebKit: __WKUserContentExtensionsDomain
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsLogger
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariActivatedHomeScreenQuickActionEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariAutoFillAuthenticationEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariAutoFillAuthenticationPreferenceEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariDidTerminateWebProcessBeforeNavigation
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariEnterTwoUpEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariTappedOnToolbarButtonEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariTwoFingerTappedOnLinkEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariUsingPrivateBrowsingEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerDismissedEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerPresentedFromHostAppEvent
__ WebUI: _OBJC_CLASS_$_WBSAnalyticsSafariViewControllerTappedOnToolbarButtonEvent
__ WebUI: _OBJC_CLASS_$_WBSAppLink
__ WebUI: _OBJC_CLASS_$_WBSAutomaticReaderActivationManager
__ WebUI: _OBJC_CLASS_$_WBSBookmarkFolderTouchIconProvider
__ WebUI: _OBJC_CLASS_$_WBSCache
__ WebUI: _OBJC_CLASS_$_WBSCertificateWarningPageContext
__ WebUI: _OBJC_CLASS_$_WBSCloudTab
__ WebUI: _OBJC_CLASS_$_WBSCoalescedAsynchronousWriter
__ WebUI: _OBJC_CLASS_$_WBSConfigurationDataTransformer
__ WebUI: _OBJC_CLASS_$_WBSContentBlockersPreferenceManager
__ WebUI: _OBJC_CLASS_$_WBSCredentialMatch
__ WebUI: _OBJC_CLASS_$_WBSCredentialMatchCriteria
__ WebUI: _OBJC_CLASS_$_WBSCreditCardData
__ WebUI: _OBJC_CLASS_$_WBSDigitalHealthManager
__ WebUI: _OBJC_CLASS_$_WBSFaviconProvider
__ WebUI: _OBJC_CLASS_$_WBSFeatureAvailability
__ WebUI: _OBJC_CLASS_$_WBSFluidProgressController
__ WebUI: _OBJC_CLASS_$_WBSFluidProgressState
__ WebUI: _OBJC_CLASS_$_WBSFormAutoFillCorrectionsSQLiteStore
__ WebUI: _OBJC_CLASS_$_WBSFormAutoFillMetadataCorrector
__ WebUI: _OBJC_CLASS_$_WBSFormControlMetadata
__ WebUI: _OBJC_CLASS_$_WBSFormDataController
__ WebUI: _OBJC_CLASS_$_WBSFormMetadata
__ WebUI: _OBJC_CLASS_$_WBSFormMetadataController
__ WebUI: _OBJC_CLASS_$_WBSGeolocationPreferenceManager
__ WebUI: _OBJC_CLASS_$_WBSHistory
__ WebUI: _OBJC_CLASS_$_WBSHistoryAccessSessionProxy
__ WebUI: _OBJC_CLASS_$_WBSLeadImageCache
__ WebUI: _OBJC_CLASS_$_WBSMultiRoundAutoFillManager
__ WebUI: _OBJC_CLASS_$_WBSOneTimeCodeMonitor
__ WebUI: _OBJC_CLASS_$_WBSOpenSearchURLTemplate
__ WebUI: _OBJC_CLASS_$_WBSPageZoomPreferenceManager
__ WebUI: _OBJC_CLASS_$_WBSPasswordAutoFillUtilities
__ WebUI: _OBJC_CLASS_$_WBSPerSitePreference
__ WebUI: _OBJC_CLASS_$_WBSPerSitePreferenceManager
__ WebUI: _OBJC_CLASS_$_WBSPerSitePreferenceTimeout
__ WebUI: _OBJC_CLASS_$_WBSPerSitePreferencesSQLiteStore
__ WebUI: _OBJC_CLASS_$_WBSReaderConfigurationManager
__ WebUI: _OBJC_CLASS_$_WBSReaderFontDownloadManager
__ WebUI: _OBJC_CLASS_$_WBSReaderFontManager
__ WebUI: _OBJC_CLASS_$_WBSReaderNavigationPolicyDecider
__ WebUI: _OBJC_CLASS_$_WBSReaderResources
__ WebUI: _OBJC_CLASS_$_WBSRecentWebSearchesController
__ WebUI: _OBJC_CLASS_$_WBSRecentlyUsedAutoFillSet
__ WebUI: _OBJC_CLASS_$_WBSRemotePlistController
__ WebUI: _OBJC_CLASS_$_WBSSQLiteDatabase
__ WebUI: _OBJC_CLASS_$_WBSSQLiteStatement
__ WebUI: _OBJC_CLASS_$_WBSSavedPassword
__ WebUI: _OBJC_CLASS_$_WBSSavedPasswordAuditor
__ WebUI: _OBJC_CLASS_$_WBSSavedPasswordStore
__ WebUI: _OBJC_CLASS_$_WBSScopeExitHandler
__ WebUI: _OBJC_CLASS_$_WBSSearchImpressionAnalyticsRecorder
__ WebUI: _OBJC_CLASS_$_WBSSearchProvider
__ WebUI: _OBJC_CLASS_$_WBSSingleCreditCardData
__ WebUI: _OBJC_CLASS_$_WBSSiriIntelligenceDonor
__ WebUI: _OBJC_CLASS_$_WBSSiteMetadataImageCache
__ WebUI: _OBJC_CLASS_$_WBSSiteMetadataManager
__ WebUI: _OBJC_CLASS_$_WBSTabDialog
__ WebUI: _OBJC_CLASS_$_WBSTabDialogCancellationContext
__ WebUI: _OBJC_CLASS_$_WBSTabDialogCancellationExemption
__ WebUI: _OBJC_CLASS_$_WBSTabDialogManager
__ WebUI: _OBJC_CLASS_$_WBSTemplateIconMonogramConfiguration
__ WebUI: _OBJC_CLASS_$_WBSTemplateIconMonogramGenerator
__ WebUI: _OBJC_CLASS_$_WBSTouchIconCache
__ WebUI: _OBJC_CLASS_$_WBSTouchIconFetchOperation
__ WebUI: _OBJC_CLASS_$_WBSTouchIconRequest
__ WebUI: _OBJC_CLASS_$_WBSTouchIconResponse
__ WebUI: _OBJC_CLASS_$_WBSTouchIconWebProcessPlugInPageController
__ WebUI: _OBJC_CLASS_$_WBSURLCompletionSessionProxy
__ WebUI: _OBJC_CLASS_$_WBSURLSpoofingMitigator
__ WebUI: _OBJC_CLASS_$_WBSUserMediaPermissionController
__ WebUI: _OBJC_CLASS_$_WBSWebProcessPlugIn
__ WebUI: _OBJC_CLASS_$_WBSWebProcessPlugInPageController
__ WebUI: _OBJC_CLASS_$_WBUCreditCardDataController
__ WebUI: _OBJC_CLASS_$_WBUFeatureManager
__ WebUI: _OBJC_CLASS_$_WBUFormAutoFillPrompt
__ WebUI: _OBJC_CLASS_$_WBUFormDataController
__ WebUI: _OBJC_CLASS_$_WBUHistory
__ WebUI: _OBJC_CLASS_$_WBUPrintPageRenderer
__ WebUI: _OBJC_CLASS_$_WBUSheetController
__ WebUI: _OBJC_CLASS_$_WebUIAlert
__ WebUI: _OBJC_IVAR_$_WBSAnalyticsLogger._analyticsSynchronizationQueue
__ WebUI: _OBJC_METACLASS_$_WBSBookmarkFolderTouchIconProvider
__ WebUI: _OBJC_METACLASS_$_WBSConfigurationDataTransformer
__ WebUI: _OBJC_METACLASS_$_WBSContentBlockersPreferenceManager
__ WebUI: _OBJC_METACLASS_$_WBSFaviconProvider
__ WebUI: _OBJC_METACLASS_$_WBSFeatureAvailability
__ WebUI: _OBJC_METACLASS_$_WBSFormMetadataController
__ WebUI: _OBJC_METACLASS_$_WBSGeolocationPreferenceManager
__ WebUI: _OBJC_METACLASS_$_WBSHistoryAccessSessionProxy
__ WebUI: _OBJC_METACLASS_$_WBSPageZoomPreferenceManager
__ WebUI: _OBJC_METACLASS_$_WBSPerSitePreferenceManager
__ WebUI: _OBJC_METACLASS_$_WBSRecentWebSearchesController
__ WebUI: _OBJC_METACLASS_$_WBSSearchProvider
__ WebUI: _OBJC_METACLASS_$_WBSSingleCreditCardData
__ WebUI: _OBJC_METACLASS_$_WBSSiteMetadataManager
__ WebUI: _OBJC_METACLASS_$_WBSTouchIconCache
__ WebUI: _OBJC_METACLASS_$_WBSTouchIconFetchOperation
__ WebUI: _OBJC_METACLASS_$_WBSTouchIconRequest
__ WebUI: _OBJC_METACLASS_$_WBSURLCompletionSessionProxy
__ WebUI: _OBJC_METACLASS_$_WBSUserMediaPermissionController
__ WebUI: _OBJC_METACLASS_$_WBSWebProcessPlugIn
__ WebUI: _OBJC_METACLASS_$_WBSWebProcessPlugInPageController
__ WebUI: _OBJC_METACLASS_$_WBUFeatureManager
__ WebUI: _OBJC_METACLASS_$_WBUFormDataController
__ WebUI: _WBSABProxyPropertyFullName
__ WebUI: _WBSAnalyticsLoginAutoFillProperty
__ WebUI: _WBSAuditTokenHasEntitlement
__ WebUI: _WBSCameraPreferenceIdentifier
__ WebUI: _WBSContentBlockersPreferenceIdentifier
__ WebUI: _WBSCreditCardTypeFromNumber
__ WebUI: _WBSCreditCardTypeLocalizedName
__ WebUI: _WBSDomainWithModifiedPageZoomPreferenceUserInfoKey
__ WebUI: _WBSDomainWithModifiedReaderPreferenceUserInfoKey
__ WebUI: _WBSFormAnnotationContactIDKey
__ WebUI: _WBSFormMetadataControlValueKey
__ WebUI: _WBSGeolocationPreferenceIdentifier
__ WebUI: _WBSHistoryDidRemoveHostnamesNotification
__ WebUI: _WBSHistoryItemsKey
__ WebUI: _WBSHistoryItemsWereRemovedNotification
__ WebUI: _WBSHistoryWasClearedNotification
__ WebUI: _WBSIsEqual
__ WebUI: _WBSLogWithDifferentialPrivacy
__ WebUI: _WBSMicrophonePreferenceIdentifier
__ WebUI: _WBSNTPTimeoutInterval
__ WebUI: _WBSNormalizedCreditCardNumber
__ WebUI: _WBSPageZoomFactorUserInfoKey
__ WebUI: _WBSPageZoomPreferenceDidChangeNotification
__ WebUI: _WBSPasswordManagerURLDidAuthenticateKey
__ WebUI: _WBSPasswordManagerURLTrue
__ WebUI: _WBSPerSiteAutomaticReaderActivationPreferenceDidChangeNotification
__ WebUI: _WBSReaderFontDownloadDidBeginNotification
__ WebUI: _WBSReaderFontDownloadDidFailNotification
__ WebUI: _WBSReaderFontDownloadDidFinishNotification
__ WebUI: _WBSReaderFontDownloadNotificationUserInfoKey
__ WebUI: _WBSReaderFontDownloadProgressDidChangeNotification
__ WebUI: _WBSReaderPreferenceIdentifier
__ WebUI: _WBSRecentlyUsedAutoFillSetDoNotFillIdentifier
__ WebUI: _WBSRequestDesktopSitePreferenceIdentifier
__ WebUI: _WBSRespondWithRandomDelay
__ WebUI: _WBSSavedPasswordStoreDidChangeNotification
__ WebUI: _WBSShouldApplyBackingForDarkBackdropToImage
__ WebUI: _WBSTouchIconWebViewConfigurationGroupIdentifier
__ WebUI: _WBSUnifiedFieldInputTypeForString
__ WebUI: _WBSWebProcessPlugInSearchEnginesForRedirectToSafeSearchKey
__ WebUI: _WBSWebsiteShouldStartWithReaderEnabledUserInfoKey
__ WebUI: _WBSZoomPreferenceIdentifier
__ WebUI: _WBUABStreetKey
__ WebUI: _WBUPasswordGenerationPasswordAcceptedAggdKey
__ WebUI: _WBUPasswordGenerationPromptShownAggdKey
__ WebUI: __WBSLocalizedString
__ WebUI: __ZN12SafariShared11JSUtilities20globalJSObjectByNameEPK15OpaqueJSContextPKc
__ WebUI: __ZN12SafariShared11JSUtilities25callJSMethodWithArgumentsEPK15OpaqueJSContextP13OpaqueJSValuePKcPKPKS4_mNS0_21ReportExceptionsOrNotE
__ WebUI: __ZN12SafariShared12JSController12staticValuesERN3WTF6VectorI13JSStaticValueLm0ENS1_15CrashOnOverflowELm16EEE
__ WebUI: __ZN12SafariShared12JSController17scriptObjectReadyEPK15OpaqueJSContext
__ WebUI: __ZN12SafariShared12JSController29addScriptObjectToGlobalObjectEPK15OpaqueJSContext
__ WebUI: __ZN12SafariShared12JSControllerC2Ev
__ WebUI: __ZN12SafariShared12JSControllerD2Ev
__ WebUI: __ZN12SafariShared18ReaderJSController13staticJSClassEv
__ WebUI: __ZN12SafariShared18ReaderJSController14loadNewArticleEv
__ WebUI: __ZN12SafariShared18ReaderJSController15staticFunctionsERN3WTF6VectorI16JSStaticFunctionLm0ENS1_15CrashOnOverflowELm16EEE
__ WebUI: __ZN12SafariShared18ReaderJSController16scriptObjectNameEv
__ WebUI: __ZN12SafariShared18ReaderJSController16setConfigurationEP12NSDictionary
__ WebUI: __ZN12SafariShared18ReaderJSController17setReaderIsActiveEb
__ WebUI: __ZN12SafariShared18ReaderJSController30evaluateLocalizedStringsScriptEPK15OpaqueJSContext
__ WebUI: __ZN12SafariShared18ReaderJSController33evaluateSharedUINormalWorldScriptEPK15OpaqueJSContext
__ WebUI: __ZN12SafariShared25ArticleFinderJSController12staticValuesERN3WTF6VectorI13JSStaticValueLm0ENS1_15CrashOnOverflowELm16EEE
__ WebUI: __ZN12SafariShared25ArticleFinderJSController13staticJSClassEv
__ WebUI: __ZN12SafariShared25ArticleFinderJSController14articleContentEv
__ WebUI: __ZN12SafariShared25ArticleFinderJSController15staticFunctionsERN3WTF6VectorI16JSStaticFunctionLm0ENS1_15CrashOnOverflowELm16EEE
__ WebUI: __ZN12SafariShared25ArticleFinderJSController16scriptObjectNameEv
__ WebUI: __ZN12SafariShared25ArticleFinderJSController33collectReadingListItemInformationEv
__ WebUI: __ZN12SafariShared25ArticleFinderJSController41detectAvailabilityForUIProcessDrivenCheckEv
__ WebUI: __ZN12SafariShared25TranslatedFileURLProtocol16registerProtocolEPKNS0_12ProtocolInfoE
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController13didFinishLoadEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController17clearAvailabilityEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController20prepareArticleFinderEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController21determineAvailabilityEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController21didFinishDocumentLoadEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController21originalArticleFinderEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController25checkAvailabilityIfNeededEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController27prepareToTransitionToReaderEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController28detectAvailabilityAfterDelayEdNS_34LoadEventTriggeringReaderDetectionE
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController30setCanRunAvailabilityDetectionEb
__ WebUI: __ZN12SafariShared28ReaderAvailabilityController45detectAvailabilityAfterSameDocumentNavigationEv
__ WebUI: __ZN12SafariShared28ReaderAvailabilityControllerC2Ev
__ WebUI: __ZN12SafariShared28ReaderAvailabilityControllerD2Ev
__ WebUI: __ZNK12SafariShared18ReaderJSController13reloadArticleEv
__ WebUI: __ZNK12SafariShared28ReaderAvailabilityController33originalArticleFinderJSControllerEv
__ WebUI: __ZTVN12SafariShared18ReaderJSControllerE
__ WebUI: _incrementAggdKey
__ WebUI: _webuiCookieAcceptPolicyPreferencesKey
__ WirelessDiagnostics: _AWDPostMetric
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _clock_gettime
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_min_os_version
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _sandbox_check
__ libSystem.B.dylib: _sandbox_container_path_for_pid
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _xpc_array_append_value
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___gxx_personality_v0
__ libcompression.dylib: _compression_decode_buffer
__ libcompression.dylib: _compression_encode_buffer
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_getMethodDescription
_SFURLTextPreviewViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  _SFURLTextPreviewView *previewView
 @property  NSURL *URL

  // instance methods
  -[_SFURLTextPreviewViewController initWithURL:]
  -[_SFURLTextPreviewViewController .cxx_destruct]
  -[_SFURLTextPreviewViewController setURL:]
  -[_SFURLTextPreviewViewController URL]
  -[_SFURLTextPreviewViewController loadView]
  -[_SFURLTextPreviewViewController viewWillLayoutSubviews]
  -[_SFURLTextPreviewViewController previewActionItems]
  -[_SFURLTextPreviewViewController _linkActions]
  -[_SFURLTextPreviewViewController _activatedElementInfo]
  -[_SFURLTextPreviewViewController previewView]
  -[_SFURLTextPreviewViewController setPreviewView:]
  -[_SFURLTextPreviewViewController _setLinkActions:]
  -[_SFURLTextPreviewViewController _setActivatedElementInfo:]
  -[_SFURLTextPreviewViewController _previewHeader]


SFLinkRedirectionViewController : SFSafariViewController <UIViewControllerTransitioningDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFLinkRedirectionViewController initWithURL:]
  -[SFLinkRedirectionViewController viewDidLoad]
  -[SFLinkRedirectionViewController setDefersAddingRemoteViewController:]
  -[SFLinkRedirectionViewController remoteViewController:didResolveRedirectionWithURL:appLink:]


_SFPasswordTableConfiguration : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL shouldShowIcons
 @property  BOOL shouldShowSearchBar

  // instance methods
  -[_SFPasswordTableConfiguration shouldShowIcons]
  -[_SFPasswordTableConfiguration setShouldShowIcons:]
  -[_SFPasswordTableConfiguration shouldShowSearchBar]
  -[_SFPasswordTableConfiguration setShouldShowSearchBar:]


_SFPasswordTableViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UISearchBarDelegate, UISearchResultsUpdating, _SFPasswordIconControllerDelegate>
 @property  NSString *searchPattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPasswordTableViewController .cxx_destruct]
  -[_SFPasswordTableViewController viewWillDisappear:]
  -[_SFPasswordTableViewController viewDidAppear:]
  -[_SFPasswordTableViewController viewDidDisappear:]
  -[_SFPasswordTableViewController positionForBar:]
  -[_SFPasswordTableViewController setEditing:animated:]
  -[_SFPasswordTableViewController tableView:willDisplayCell:forRowAtIndexPath:]
  -[_SFPasswordTableViewController tableView:didEndDisplayingCell:forRowAtIndexPath:]
  -[_SFPasswordTableViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[_SFPasswordTableViewController tableView:canPerformAction:forRowAtIndexPath:withSender:]
  -[_SFPasswordTableViewController tableView:performAction:forRowAtIndexPath:withSender:]
  -[_SFPasswordTableViewController updateSearchResultsForSearchController:]
  -[_SFPasswordTableViewController _updateIconForDomain:forCell:]
  -[_SFPasswordTableViewController searchPatternDidUpdate]
  -[_SFPasswordTableViewController iconDidUpdateForDomain:iconController:]
  -[_SFPasswordTableViewController initWithStyle:siteMetadataManager:configuration:]
  -[_SFPasswordTableViewController searchPattern]


SFPasswordPickerRemoteViewController : SFPasswordRemoteViewController <SFPasswordPickerRemoteViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordPickerRemoteViewController exportedInterface]
  +[SFPasswordPickerRemoteViewController serviceViewControllerInterface]
  +[SFPasswordPickerRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFPasswordPickerRemoteViewController selectedCredential:]


_SFBookmarkTextEntryTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UITextField *editableTextField

  // instance methods
  -[_SFBookmarkTextEntryTableViewCell .cxx_destruct]
  -[_SFBookmarkTextEntryTableViewCell updateConstraints]
  -[_SFBookmarkTextEntryTableViewCell layoutMarginsDidChange]
  -[_SFBookmarkTextEntryTableViewCell safeAreaInsetsDidChange]
  -[_SFBookmarkTextEntryTableViewCell setSeparatorInset:]
  -[_SFBookmarkTextEntryTableViewCell editableTextField]
  -[_SFBookmarkTextEntryTableViewCell initWithText:autocapitalizationType:autocorrectionType:]


_SFTelephonyNavigationMitigationPolicy : NSObject /usr/lib/libc++.1.dylib
 @property  <_SFDialogPresenting> *dialogPresenter

  // class methods
  +[_SFTelephonyNavigationMitigationPolicy test_suspiciousClassificationExpirationDuration]

  // instance methods
  -[_SFTelephonyNavigationMitigationPolicy .cxx_destruct]
  -[_SFTelephonyNavigationMitigationPolicy _checkIfSuspiciousClassificationHasExpiredAndTransitionIfNeeded]
  -[_SFTelephonyNavigationMitigationPolicy _handleInput:]
  -[_SFTelephonyNavigationMitigationPolicy policyAppliesToURL:]
  -[_SFTelephonyNavigationMitigationPolicy handleNavigationToURL:completionHandler:]
  -[_SFTelephonyNavigationMitigationPolicy userAcceptedCallPrompt]
  -[_SFTelephonyNavigationMitigationPolicy userDeclinedCallPrompt]
  -[_SFTelephonyNavigationMitigationPolicy dialogPresenter]
  -[_SFTelephonyNavigationMitigationPolicy setDialogPresenter:]


_SFSyntheticClickContext : NSObject /usr/lib/libc++.1.dylib
 @property  WKWebView *webView
 @property  WKNavigationAction *navigationAction

  // instance methods
  -[_SFSyntheticClickContext .cxx_destruct]
  -[_SFSyntheticClickContext webView]
  -[_SFSyntheticClickContext initWithWebView:navigationAction:]
  -[_SFSyntheticClickContext navigationAction]


_SFWebProcessPlugInPageController : WBSWebProcessPlugInPageController /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFWebProcessPlugInPageController pageControllerForBrowserContextController:]

  // instance methods
  -[_SFWebProcessPlugInPageController isNetworkReachable]
  -[_SFWebProcessPlugInPageController webProcessPlugInBrowserContextController:frame:willSendRequestForResource:request:redirectResponse:]


SSReadingList : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SSReadingList supportsURL:]
  +[SSReadingList defaultReadingList]

  // instance methods
  -[SSReadingList init]
  -[SSReadingList dealloc]
  -[SSReadingList .cxx_destruct]
  -[SSReadingList _init]
  -[SSReadingList addReadingListItemWithURL:title:previewText:error:]
  -[SSReadingList _sendBatchedReadingListItems]
  -[SSReadingList _addReadingListItemWithURL:title:previewText:]


_SFFormAutoFillInputSession : NSObject /usr/lib/libc++.1.dylib
 @property  <_WKFocusedElementInfo> *focusedElementInfo
 @property  NSDictionary *autoFillInputSessionUserObject
 @property  <_WKFormInputSession> *formInputSession
 @property  SFFormAutoFillFrameHandle *frameHandle
 @property  WBSFormMetadata *formMetadata

  // instance methods
  -[_SFFormAutoFillInputSession .cxx_destruct]
  -[_SFFormAutoFillInputSession focusedElementInfo]
  -[_SFFormAutoFillInputSession _initWithFormInputSession:focusedElement:]
  -[_SFFormAutoFillInputSession _updateAutoFillInputSessionUserObject:]
  -[_SFFormAutoFillInputSession formInputSession]
  -[_SFFormAutoFillInputSession initWithFormInputSession:]
  -[_SFFormAutoFillInputSession initWithFocusedElement:]
  -[_SFFormAutoFillInputSession autoFillInputSessionByReplacingInputSessionUserObject:]
  -[_SFFormAutoFillInputSession autoFillInputSessionUserObject]
  -[_SFFormAutoFillInputSession frameHandle]
  -[_SFFormAutoFillInputSession formMetadata]


_SSURLCompletionSession : WBSURLCompletionSessionProxy /System/Library/Frameworks/Foundation.framework/Foundation

_SFFluidProgressView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <WBSFluidProgressControllerDelegate>
 @property  BOOL progressAnimationSuppressed
 @property  <_SFFluidProgressViewDelegate> *delegate
 @property  BOOL showingProgress
 @property  UIColor *progressBarFillColor
 @property  double cornerRadius
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFFluidProgressView defaultHeight]

  // instance methods
  -[_SFFluidProgressView delegate]
  -[_SFFluidProgressView setDelegate:]
  -[_SFFluidProgressView .cxx_destruct]
  -[_SFFluidProgressView initWithFrame:]
  -[_SFFluidProgressView setCornerRadius:]
  -[_SFFluidProgressView layoutSubviews]
  -[_SFFluidProgressView cornerRadius]
  -[_SFFluidProgressView _progressBarBoundsForValue:]
  -[_SFFluidProgressView _finishProgressBarWithDuration:]
  -[_SFFluidProgressView fluidProgressController:updateFluidProgressBar:]
  -[_SFFluidProgressView _animateUsingDefaultTiming:stepAnimationTime:options:animations:completion:]
  -[_SFFluidProgressView fluidProgressController:startFluidProgressBar:animateFillFade:]
  -[_SFFluidProgressView fluidProgressControllerFinishProgressBar:animateFillFade:]
  -[_SFFluidProgressView fluidProgressController:setProgressToCurrentPosition:]
  -[_SFFluidProgressView setProgressBarFillColor:]
  -[_SFFluidProgressView setProgressAnimationSuppressed:duringFluidProgressState:animated:]
  -[_SFFluidProgressView isShowingProgress]
  -[_SFFluidProgressView progressAnimationSuppressed]
  -[_SFFluidProgressView setProgressAnimationSuppressed:]
  -[_SFFluidProgressView progressBarFillColor]


SFSingleCreditCardData : WBSSingleCreditCardData /System/Library/Frameworks/Foundation.framework/Foundation
 @property  NSString *headerText
 @property  NSString *displayText

  // instance methods
  -[SFSingleCreditCardData .cxx_destruct]
  -[SFSingleCreditCardData displayText]
  -[SFSingleCreditCardData headerText]
  -[SFSingleCreditCardData initWithHeaderText:displayText:type:value:]


SFFormsMetadataProvider : NSObject /usr/lib/libc++.1.dylib <WBSFormsMetadataProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long formCount

  // instance methods
  -[SFFormsMetadataProvider .cxx_destruct]
  -[SFFormsMetadataProvider enumerateFormsUsingBlock:]
  -[SFFormsMetadataProvider formCount]
  -[SFFormsMetadataProvider initWithFrameHandleToFormsDictionary:]


_SFDigitalHealthViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <STLockoutViewControllerDelegate>
 @property  <_SFDigitalHealthViewControllerDelegate> *digitalHealthViewControllerDelegate
 @property  double additionalVerticalSafeAreaMargin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFDigitalHealthViewController .cxx_destruct]
  -[_SFDigitalHealthViewController viewDidLoad]
  -[_SFDigitalHealthViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFDigitalHealthViewController lockoutViewControllerDidFinishDismissing:]
  -[_SFDigitalHealthViewController _urlStringForLockOutGivenURL:]
  -[_SFDigitalHealthViewController _updateCurrentLockViewControllerInsetsHorizontalForSizeClass:]
  -[_SFDigitalHealthViewController showLockOutForURL:]
  -[_SFDigitalHealthViewController hideLockOutForURL:]
  -[_SFDigitalHealthViewController setAdditionalVerticalSafeAreaMargin:]
  -[_SFDigitalHealthViewController digitalHealthViewControllerDelegate]
  -[_SFDigitalHealthViewController setDigitalHealthViewControllerDelegate:]
  -[_SFDigitalHealthViewController additionalVerticalSafeAreaMargin]


_SFEditablePasswordTableViewController : _SFPasswordTableViewController <SFAddPasswordViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFEditablePasswordTableViewController .cxx_destruct]
  -[_SFEditablePasswordTableViewController viewWillAppear:]
  -[_SFEditablePasswordTableViewController viewWillDisappear:]
  -[_SFEditablePasswordTableViewController viewDidLoad]
  -[_SFEditablePasswordTableViewController tableView:numberOfRowsInSection:]
  -[_SFEditablePasswordTableViewController tableView:cellForRowAtIndexPath:]
  -[_SFEditablePasswordTableViewController numberOfSectionsInTableView:]
  -[_SFEditablePasswordTableViewController tableView:titleForHeaderInSection:]
  -[_SFEditablePasswordTableViewController sectionIndexTitlesForTableView:]
  -[_SFEditablePasswordTableViewController tableView:sectionForSectionIndexTitle:atIndex:]
  -[_SFEditablePasswordTableViewController tableView:commitEditingStyle:forRowAtIndexPath:]
  -[_SFEditablePasswordTableViewController setEditing:animated:]
  -[_SFEditablePasswordTableViewController tableView:didSelectRowAtIndexPath:]
  -[_SFEditablePasswordTableViewController tableView:didDeselectRowAtIndexPath:]
  -[_SFEditablePasswordTableViewController tableView:editingStyleForRowAtIndexPath:]
  -[_SFEditablePasswordTableViewController searchPatternDidUpdate]
  -[_SFEditablePasswordTableViewController _reloadPasswords]
  -[_SFEditablePasswordTableViewController _addBarButtonItemTapped:]
  -[_SFEditablePasswordTableViewController _editBarButtonItemTapped:]
  -[_SFEditablePasswordTableViewController _cancelBarButtonItemTapped:]
  -[_SFEditablePasswordTableViewController _deletePasswordActionTitle]
  -[_SFEditablePasswordTableViewController _deleteBarButtonItemTapped:]
  -[_SFEditablePasswordTableViewController _deletePasswordsAtIndexPaths:]
  -[_SFEditablePasswordTableViewController _updateDeleteButton]
  -[_SFEditablePasswordTableViewController _shouldShowSectionHeaders]
  -[_SFEditablePasswordTableViewController _passwordForIndexPath:]
  -[_SFEditablePasswordTableViewController _updateMatchingPasswords]
  -[_SFEditablePasswordTableViewController addPasswordViewControllerDidFinish:withSavedPassword:]
  -[_SFEditablePasswordTableViewController initWithSiteMetadataManager:autoFillQuirksManager:]


_SFWebProcessPlugIn : WBSWebProcessPlugIn /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFWebProcessPlugIn didCreatePageController:forBrowserContextController:]
  -[_SFWebProcessPlugIn willDestroyPageController:forBrowserContextController:]
  -[_SFWebProcessPlugIn pageControllerWithBrowserContextController:]


SFReaderViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <WKUIDelegate>
 @property  WKWebView *readerWebView
 @property  _SFBrowserContentViewController *containerViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFReaderViewController .cxx_destruct]
  -[SFReaderViewController loadView]
  -[SFReaderViewController _webView:previewViewControllerForURL:defaultActions:elementInfo:]
  -[SFReaderViewController _webView:commitPreviewedViewController:]
  -[SFReaderViewController initWithOriginalWebView:]
  -[SFReaderViewController readerWebView]
  -[SFReaderViewController containerViewController]
  -[SFReaderViewController setContainerViewController:]


_SFPageLoadErrorController : NSObject /usr/lib/libc++.1.dylib <WBSCertificateWarningPageHandler>
 @property  <_SFPageLoadErrorControllerDelegate> *delegate
 @property  BOOL reloadingFailedRequest
 @property  NSURLRequest *failedRequest
 @property  unsigned long crashesSinceLastSuccessfulLoad
 @property  <_SFDialogPresenting> *dialogPresenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPageLoadErrorController dealloc]
  -[_SFPageLoadErrorController invalidate]
  -[_SFPageLoadErrorController delegate]
  -[_SFPageLoadErrorController setDelegate:]
  -[_SFPageLoadErrorController .cxx_destruct]
  -[_SFPageLoadErrorController _reachabilityChanged:]
  -[_SFPageLoadErrorController addAlert:]
  -[_SFPageLoadErrorController initWithWebView:]
  -[_SFPageLoadErrorController dialogPresenter]
  -[_SFPageLoadErrorController setDialogPresenter:]
  -[_SFPageLoadErrorController _setUpCertificateWarningPageHandlerInterface]
  -[_SFPageLoadErrorController _clearCertificateWarningPageHandlerInterface]
  -[_SFPageLoadErrorController goBackButtonClicked]
  -[_SFPageLoadErrorController visitInsecureWebsite]
  -[_SFPageLoadErrorController visitInsecureWebsiteWithTemporaryBypass]
  -[_SFPageLoadErrorController showCertificateInformation]
  -[_SFPageLoadErrorController openClockSettings]
  -[_SFPageLoadErrorController performAction:forAlert:]
  -[_SFPageLoadErrorController addDialog:]
  -[_SFPageLoadErrorController _continueWithoutCredentialsUsingAlertContext:]
  -[_SFPageLoadErrorController showErrorPageWithTitle:bodyText:learnMoreLink:forError:]
  -[_SFPageLoadErrorController _certificateWarningPagePresenterProxy]
  -[_SFPageLoadErrorController _continueAfterCertificateAlertWithURL:trust:recoveryAttempter:]
  -[_SFPageLoadErrorController _loadCertificateWarningPageForContext:]
  -[_SFPageLoadErrorController reloadAfterError]
  -[_SFPageLoadErrorController _handleCertificateError:forURL:isMainFrame:recoveryAttempter:]
  -[_SFPageLoadErrorController clearFailedRequest]
  -[_SFPageLoadErrorController _specializedMessageForError:URL:]
  -[_SFPageLoadErrorController _genericMessageForError:]
  -[_SFPageLoadErrorController _titleForError:]
  -[_SFPageLoadErrorController addAlertWithTitle:bodyText:]
  -[_SFPageLoadErrorController _setFailedRequest:]
  -[_SFPageLoadErrorController _handleFrameLoadError:forURL:recoveryAttempter:]
  -[_SFPageLoadErrorController showErrorPageWithTitle:bodyText:forError:]
  -[_SFPageLoadErrorController clearCrashCountResetTimer]
  -[_SFPageLoadErrorController _resetCrashCount:]
  -[_SFPageLoadErrorController _showRepeatedWebProcessCrashError:URLString:]
  -[_SFPageLoadErrorController _resetCrashCountSoon]
  -[_SFPageLoadErrorController _dismissCertificateViewButtonTapped]
  -[_SFPageLoadErrorController addFormAlertWithTitle:decisionHandler:]
  -[_SFPageLoadErrorController addDisallowedUseOfJavaScriptAlert]
  -[_SFPageLoadErrorController addDisallowedFileURLAlert]
  -[_SFPageLoadErrorController handleFrameLoadError:]
  -[_SFPageLoadErrorController handleSubframeCertificateError:]
  -[_SFPageLoadErrorController handleClientCertificateAuthenticationChallenge:completionHandler:]
  -[_SFPageLoadErrorController addInvalidURLAlert]
  -[_SFPageLoadErrorController addInvalidProfileAlert]
  -[_SFPageLoadErrorController addDownloadFailedAlertWithDescription:]
  -[_SFPageLoadErrorController updateCrashesAndShowCrashError:URLString:]
  -[_SFPageLoadErrorController scheduleResetCrashCount]
  -[_SFPageLoadErrorController reloadingFailedRequest]
  -[_SFPageLoadErrorController failedRequest]
  -[_SFPageLoadErrorController crashesSinceLastSuccessfulLoad]


SFPasswordDetailViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFPasswordDetailViewControllerDelegate> *delegate

  // instance methods
  -[SFPasswordDetailViewController dealloc]
  -[SFPasswordDetailViewController delegate]
  -[SFPasswordDetailViewController setDelegate:]
  -[SFPasswordDetailViewController .cxx_destruct]
  -[SFPasswordDetailViewController canPerformAction:withSender:]
  -[SFPasswordDetailViewController canBecomeFirstResponder]
  -[SFPasswordDetailViewController tableView:numberOfRowsInSection:]
  -[SFPasswordDetailViewController tableView:cellForRowAtIndexPath:]
  -[SFPasswordDetailViewController numberOfSectionsInTableView:]
  -[SFPasswordDetailViewController tableView:titleForHeaderInSection:]
  -[SFPasswordDetailViewController tableView:titleForFooterInSection:]
  -[SFPasswordDetailViewController tableView:commitEditingStyle:forRowAtIndexPath:]
  -[SFPasswordDetailViewController setEditing:animated:]
  -[SFPasswordDetailViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[SFPasswordDetailViewController tableView:didSelectRowAtIndexPath:]
  -[SFPasswordDetailViewController tableView:editingStyleForRowAtIndexPath:]
  -[SFPasswordDetailViewController tableView:shouldIndentWhileEditingRowAtIndexPath:]
  -[SFPasswordDetailViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[SFPasswordDetailViewController tableView:canPerformAction:forRowAtIndexPath:withSender:]
  -[SFPasswordDetailViewController tableView:performAction:forRowAtIndexPath:withSender:]
  -[SFPasswordDetailViewController _appWillResignActive:]
  -[SFPasswordDetailViewController _allowEditing]
  -[SFPasswordDetailViewController _textFieldChanged:]
  -[SFPasswordDetailViewController _editBarButtonItemTapped:]
  -[SFPasswordDetailViewController _cancelBarButtonItemTapped:]
  -[SFPasswordDetailViewController initWithSavedPassword:type:]
  -[SFPasswordDetailViewController _doneBarButtonItemTapped:]
  -[SFPasswordDetailViewController _passwordStoreDidUpdate]
  -[SFPasswordDetailViewController _appDidBecomeActive:]
  -[SFPasswordDetailViewController _willHideUIMenuController:]
  -[SFPasswordDetailViewController _configureCell:withText:detailText:detailPlaceholderText:]
  -[SFPasswordDetailViewController _setHighLyLegibleFontForDetailTextInCell:]
  -[SFPasswordDetailViewController _editableCellWithCell:]
  -[SFPasswordDetailViewController _configureUserCell:]
  -[SFPasswordDetailViewController _configurePasswordCell:]
  -[SFPasswordDetailViewController _showChangePasswordSafariViewController]
  -[SFPasswordDetailViewController safari_copyUserName:]
  -[SFPasswordDetailViewController safari_copyPassword:]


_SFMultipleLineAlertActionView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UILabel *titleLabel
 @property  UILabel *detailLabel

  // instance methods
  -[_SFMultipleLineAlertActionView .cxx_destruct]
  -[_SFMultipleLineAlertActionView initWithFrame:]
  -[_SFMultipleLineAlertActionView titleLabel]
  -[_SFMultipleLineAlertActionView tintColorDidChange]
  -[_SFMultipleLineAlertActionView detailLabel]


_SFMultipleLineAlertActionViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFMultipleLineAlertActionViewController .cxx_destruct]
  -[_SFMultipleLineAlertActionViewController loadView]
  -[_SFMultipleLineAlertActionViewController preferredContentSize]
  -[_SFMultipleLineAlertActionViewController initWithTitle:detail:style:]


SFMultipleLineAlertAction : UIAlertAction /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // class methods
  +[SFMultipleLineAlertAction actionWithTitle:detail:style:handler:]
  +[SFMultipleLineAlertAction actionWithTitle:detail:handler:]


_SFKeyboardLayoutAlignmentView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL automaticKeyboardFrameTrackingDisabled

  // instance methods
  -[_SFKeyboardLayoutAlignmentView dealloc]
  -[_SFKeyboardLayoutAlignmentView .cxx_destruct]
  -[_SFKeyboardLayoutAlignmentView initWithFrame:]
  -[_SFKeyboardLayoutAlignmentView setAutomaticKeyboardFrameTrackingDisabled:]
  -[_SFKeyboardLayoutAlignmentView didMoveToWindow]
  -[_SFKeyboardLayoutAlignmentView willMoveToWindow:]
  -[_SFKeyboardLayoutAlignmentView _keyboardChanged:]
  -[_SFKeyboardLayoutAlignmentView _stopObservingKeyboardNotifications]
  -[_SFKeyboardLayoutAlignmentView _startObservingKeyboardNotificationsForScreen:]
  -[_SFKeyboardLayoutAlignmentView _frameInBoundsForKeyboardFrame:]
  -[_SFKeyboardLayoutAlignmentView _updateConstraintsToMatchKeyboardFrame:]
  -[_SFKeyboardLayoutAlignmentView _updateConstraintsForKeyboardNotification:]
  -[_SFKeyboardLayoutAlignmentView _removeConstraints]
  -[_SFKeyboardLayoutAlignmentView _matchInitialKeyboardFrame]
  -[_SFKeyboardLayoutAlignmentView automaticKeyboardFrameTrackingDisabled]
  -[_SFKeyboardLayoutAlignmentView _addConstraints]


SFAuthenticationSession : NSObject /usr/lib/libc++.1.dylib <SFAuthenticationViewControllerPresentationDelegate, SFSafariViewControllerDelegateInternal>
 @property  <_SFAuthenticationSessionDelegate> *_delegate
 @property  BOOL prefersEphemeralWebBrowserSession
 @property  BOOL sessionStarted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAuthenticationSession dealloc]
  -[SFAuthenticationSession .cxx_destruct]
  -[SFAuthenticationSession _delegate]
  -[SFAuthenticationSession cancel]
  -[SFAuthenticationSession start]
  -[SFAuthenticationSession set_delegate:]
  -[SFAuthenticationSession safariViewControllerDidFinish:]
  -[SFAuthenticationSession setSessionStarted:]
  -[SFAuthenticationSession initWithURL:callbackURLScheme:usingEphemeralSession:completionHandler:]
  -[SFAuthenticationSession _startRequestingFromWebAuthenticationSession:inWindow:]
  -[SFAuthenticationSession presentingViewControllerForAuthenticationViewController:]
  -[SFAuthenticationSession safariViewController:didDecideCookieSharingForURL:shouldCancel:]
  -[SFAuthenticationSession safariViewController:hostApplicationOpenURL:]
  -[SFAuthenticationSession initWithURL:callbackURLScheme:completionHandler:]
  -[SFAuthenticationSession startASWebAuthenticationSessionInWindow:]
  -[SFAuthenticationSession prefersEphemeralWebBrowserSession]
  -[SFAuthenticationSession setPrefersEphemeralWebBrowserSession:]
  -[SFAuthenticationSession isSessionStarted]


_SFCreditCardCaptureViewController : UINavigationController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <CRCameraReaderDelegate>
 @property  <_SFCreditCardCaptureViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFCreditCardCaptureViewController canCapture]

  // instance methods
  -[_SFCreditCardCaptureViewController init]
  -[_SFCreditCardCaptureViewController .cxx_destruct]
  -[_SFCreditCardCaptureViewController viewDidAppear:]
  -[_SFCreditCardCaptureViewController _cancel:]
  -[_SFCreditCardCaptureViewController cameraReaderDidCancel:]
  -[_SFCreditCardCaptureViewController cameraReader:didRecognizeObjects:]
  -[_SFCreditCardCaptureViewController cameraReaderDidEnd:]
  -[_SFCreditCardCaptureViewController cameraReader:didFailWithError:]


_SFAppleConnectExtensionContext : NSExtensionContext /usr/lib/libobjc.A.dylib <_SFAppleConnectExtensionVendorProtocol>
 @property  BOOL presentingExtensionUI

  // class methods
  +[_SFAppleConnectExtensionContext _extensionAuxiliaryHostProtocol]
  +[_SFAppleConnectExtensionContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[_SFAppleConnectExtensionContext .cxx_destruct]
  -[_SFAppleConnectExtensionContext _completeRequest]
  -[_SFAppleConnectExtensionContext _completeRequestAfterDelay]
  -[_SFAppleConnectExtensionContext messageReceivedWithName:userInfo:]
  -[_SFAppleConnectExtensionContext setPresentingExtensionUI:]
  -[_SFAppleConnectExtensionContext presentingExtensionUI]


_SFAppleConnectExtensionHostContext : NSExtensionContext /usr/lib/libobjc.A.dylib <_SFAppleConnectExtensionHostProtocol>
 @property  <_SFAppleConnectExtensionPageDelegate> *delegate
 @property  UIViewController *remoteViewController

  // class methods
  +[_SFAppleConnectExtensionHostContext _extensionAuxiliaryHostProtocol]
  +[_SFAppleConnectExtensionHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[_SFAppleConnectExtensionHostContext dealloc]
  -[_SFAppleConnectExtensionHostContext delegate]
  -[_SFAppleConnectExtensionHostContext setDelegate:]
  -[_SFAppleConnectExtensionHostContext .cxx_destruct]
  -[_SFAppleConnectExtensionHostContext remoteViewController]
  -[_SFAppleConnectExtensionHostContext setRemoteViewController:]
  -[_SFAppleConnectExtensionHostContext dispatchMessageToContentScriptWithName:userInfo:]
  -[_SFAppleConnectExtensionHostContext presentExtensionUI]
  -[_SFAppleConnectExtensionHostContext dismissExtensionUI]


_SFTabStateData : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *UUIDString
 @property  NSString *title
 @property  NSString *url
 @property  NSString *userVisibleURL
 @property  long long orderIndex
 @property  double lastViewedTime
 @property  long long readerViewTopScrollOffset
 @property  BOOL showingReader
 @property  BOOL displayingStandaloneImage
 @property  int readingListBookmarkID
 @property  BOOL wasOpenedFromLink
 @property  BOOL privateBrowsing
 @property  NSData *sessionStateData
 @property  long long owningBrowserWindowDatabaseID
 @property  NSString *owningBrowserWindowUUIDString
 @property  BOOL skipUpdate
 @property  unsigned long uncompressedSessionStateDataSize
 @property  BOOL isSessionStateDataCompressed
 @property  NSData *compressedSessionStateData
 @property  BOOL skipSavingSessionState

  // class methods
  +[_SFTabStateData uncompressedDataWithRawData:uncompressedSize:]

  // instance methods
  -[_SFTabStateData .cxx_destruct]
  -[_SFTabStateData initWithDictionary:]
  -[_SFTabStateData url]
  -[_SFTabStateData title]
  -[_SFTabStateData setTitle:]
  -[_SFTabStateData UUIDString]
  -[_SFTabStateData setUrl:]
  -[_SFTabStateData privateBrowsing]
  -[_SFTabStateData setUUIDString:]
  -[_SFTabStateData toDictionary]
  -[_SFTabStateData isSessionStateDataCompressed]
  -[_SFTabStateData initWithSQLiteRow:]
  -[_SFTabStateData compressedSessionStateData]
  -[_SFTabStateData _uncompressSessionStateDataIfNeeded]
  -[_SFTabStateData userVisibleURL]
  -[_SFTabStateData setUserVisibleURL:]
  -[_SFTabStateData orderIndex]
  -[_SFTabStateData setOrderIndex:]
  -[_SFTabStateData lastViewedTime]
  -[_SFTabStateData setLastViewedTime:]
  -[_SFTabStateData readerViewTopScrollOffset]
  -[_SFTabStateData setReaderViewTopScrollOffset:]
  -[_SFTabStateData showingReader]
  -[_SFTabStateData setShowingReader:]
  -[_SFTabStateData displayingStandaloneImage]
  -[_SFTabStateData setDisplayingStandaloneImage:]
  -[_SFTabStateData readingListBookmarkID]
  -[_SFTabStateData setReadingListBookmarkID:]
  -[_SFTabStateData wasOpenedFromLink]
  -[_SFTabStateData setWasOpenedFromLink:]
  -[_SFTabStateData setPrivateBrowsing:]
  -[_SFTabStateData sessionStateData]
  -[_SFTabStateData setSessionStateData:]
  -[_SFTabStateData owningBrowserWindowDatabaseID]
  -[_SFTabStateData setOwningBrowserWindowDatabaseID:]
  -[_SFTabStateData owningBrowserWindowUUIDString]
  -[_SFTabStateData setOwningBrowserWindowUUIDString:]
  -[_SFTabStateData skipUpdate]
  -[_SFTabStateData setSkipUpdate:]
  -[_SFTabStateData uncompressedSessionStateDataSize]
  -[_SFTabStateData setUncompressedSessionStateDataSize:]
  -[_SFTabStateData skipSavingSessionState]
  -[_SFTabStateData setSkipSavingSessionState:]


_SFWebArchiveActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFWebArchiveActivityItemProvider .cxx_destruct]
  -[_SFWebArchiveActivityItemProvider item]
  -[_SFWebArchiveActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFWebArchiveActivityItemProvider activityViewControllerLinkPresentationMetadata:]
  -[_SFWebArchiveActivityItemProvider _webArchiveItemProvider]
  -[_SFWebArchiveActivityItemProvider initWithWebArchiveProvider:]


_SFExternalPasswordCredentialViewController : _SFPasswordViewController <SFExternalPasswordCredentialRemoteViewControllerDelegate>
 @property  <_SFExternalPasswordCredentialViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFExternalPasswordCredentialViewController init]
  -[_SFExternalPasswordCredentialViewController dealloc]
  -[_SFExternalPasswordCredentialViewController .cxx_destruct]
  -[_SFExternalPasswordCredentialViewController viewDidLoad]
  -[_SFExternalPasswordCredentialViewController _remoteViewController]
  -[_SFExternalPasswordCredentialViewController autoFillWithExternalCredential:]
  -[_SFExternalPasswordCredentialViewController _setUpServiceProxyIfNeeded]
  -[_SFExternalPasswordCredentialViewController _sceneDidEnterBackground:]
  -[_SFExternalPasswordCredentialViewController presentExternalPasswordCredentialRemoteViewController:]
  -[_SFExternalPasswordCredentialViewController getCredentialForExternalCredential:completion:]
  -[_SFExternalPasswordCredentialViewController _connectToServiceWithCompletion:]


_SFSingleBookmarkNavigationController : UINavigationController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFBookmarkInfoViewControllerDelegate>
 @property  <_SFSingleBookmarkNavigationControllerDelegate> *bookmarkNavDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSingleBookmarkNavigationController .cxx_destruct]
  -[_SFSingleBookmarkNavigationController initWithCollection:]
  -[_SFSingleBookmarkNavigationController viewDidDisappear:]
  -[_SFSingleBookmarkNavigationController _lastSelectedFolder]
  -[_SFSingleBookmarkNavigationController _initWithBookmark:childBookmarks:inCollection:addingBookmark:toFavorites:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewController:didFinishWithResult:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewControllerShouldUseTranslucentAppearance:]
  -[_SFSingleBookmarkNavigationController bookmarkInfoViewControllerCanSaveBookmarkChanges:]
  -[_SFSingleBookmarkNavigationController initWithBookmark:inCollection:]
  -[_SFSingleBookmarkNavigationController initWithFolderOfBookmarks:inCollection:]
  -[_SFSingleBookmarkNavigationController initForAddingToFavoritesInCollection:]
  -[_SFSingleBookmarkNavigationController addBookmarkWithTitle:address:parentBookmark:]
  -[_SFSingleBookmarkNavigationController prepareForPresentationForAddingBookmark:]
  -[_SFSingleBookmarkNavigationController bookmarkNavDelegate]
  -[_SFSingleBookmarkNavigationController setBookmarkNavDelegate:]


SFDownloadStorageUsageMonitorEntry : NSObject /usr/lib/libc++.1.dylib
 @property  NSUUID *identifier
 @property  NSProgress *progress
 @property  id progressSubscriber
 @property  NSString *destinationPath
 @property  NSData *progressData
 @property  long long cachedUsage
 @property  <SFDownloadStorageUsageMonitorEntryDelegate> *delegate

  // instance methods
  -[SFDownloadStorageUsageMonitorEntry delegate]
  -[SFDownloadStorageUsageMonitorEntry setDelegate:]
  -[SFDownloadStorageUsageMonitorEntry .cxx_destruct]
  -[SFDownloadStorageUsageMonitorEntry identifier]
  -[SFDownloadStorageUsageMonitorEntry observeValueForKeyPath:ofObject:change:context:]
  -[SFDownloadStorageUsageMonitorEntry initWithIdentifier:]
  -[SFDownloadStorageUsageMonitorEntry progress]
  -[SFDownloadStorageUsageMonitorEntry setProgress:]
  -[SFDownloadStorageUsageMonitorEntry _didLoseProgress:]
  -[SFDownloadStorageUsageMonitorEntry _didGainProgress:]
  -[SFDownloadStorageUsageMonitorEntry _updateProgressSubscriptionWithData:]
  -[SFDownloadStorageUsageMonitorEntry updateWithDictionaryRepresentation:]
  -[SFDownloadStorageUsageMonitorEntry progressSubscriber]
  -[SFDownloadStorageUsageMonitorEntry setProgressSubscriber:]
  -[SFDownloadStorageUsageMonitorEntry destinationPath]
  -[SFDownloadStorageUsageMonitorEntry setDestinationPath:]
  -[SFDownloadStorageUsageMonitorEntry progressData]
  -[SFDownloadStorageUsageMonitorEntry setProgressData:]
  -[SFDownloadStorageUsageMonitorEntry cachedUsage]
  -[SFDownloadStorageUsageMonitorEntry setCachedUsage:]


_SFDownloadStorageUsageMonitor : NSObject /usr/lib/libc++.1.dylib <SFDownloadFileDelegate, SFDownloadStorageUsageMonitorEntryDelegate>
 @property  long long usage

  // instance methods
  -[_SFDownloadStorageUsageMonitor init]
  -[_SFDownloadStorageUsageMonitor .cxx_destruct]
  -[_SFDownloadStorageUsageMonitor usage]
  -[_SFDownloadStorageUsageMonitor entryDidChangeUsage:]
  -[_SFDownloadStorageUsageMonitor _reloadDownloadHistory]
  -[_SFDownloadStorageUsageMonitor downloadFileContentsDidChange:]
  -[_SFDownloadStorageUsageMonitor downloadFileWillBeDeleted:]
  -[_SFDownloadStorageUsageMonitor downloadFileDidChangeURL:]


SFFormAutoFillNode : NSObject /usr/lib/libc++.1.dylib <WBSFormAutoFillNode>
 @property  WKWebProcessPlugInNodeHandle *nodeHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutoFillNode autoFillNodeWithNodeHandle:]

  // instance methods
  -[SFFormAutoFillNode .cxx_destruct]
  -[SFFormAutoFillNode nodeHandle]
  -[SFFormAutoFillNode elementBounds]
  -[SFFormAutoFillNode htmlInputElementAutoFillButtonType]
  -[SFFormAutoFillNode htmlInputElementLastAutoFillButtonType]
  -[SFFormAutoFillNode initWithNodeHandle:]
  -[SFFormAutoFillNode initWithJSWrapper:inContext:]
  -[SFFormAutoFillNode setHTMLInputElementAutofilled:]
  -[SFFormAutoFillNode isHTMLInputElementUserEdited]
  -[SFFormAutoFillNode isHTMLTextAreaElementUserEdited]
  -[SFFormAutoFillNode setHTMLInputElementAutoFilledWithAutomaticStrongPassword:]


_SFBrowserView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIView *contentContainerView
 @property  _SFBrowserToolbar *toolbar
 @property  _SFNavigationBar *navigationBar
 @property  double bottomBarOffset
 @property  double topBarHeight
 @property  WKWebView *currentWebView
 @property  unsigned long navigationBarBehavior
 @property  _SFLinkPreviewHeader *previewHeader
 @property  UIView *statusBarBackgroundView
 @property  UIView *scrollToTopView
 @property  BOOL shouldUseScrollToTopView
 @property  _SFCrashBanner *crashBanner
 @property  double crashBannerOffset
 @property  BOOL hasReceivedTouchEvents
 @property  UIView *quickLookDocumentView
 @property  double minimalUITopOffset
 @property  <SFBrowserViewDelegate> *delegate

  // instance methods
  -[_SFBrowserView delegate]
  -[_SFBrowserView setDelegate:]
  -[_SFBrowserView .cxx_destruct]
  -[_SFBrowserView initWithFrame:]
  -[_SFBrowserView layoutSubviews]
  -[_SFBrowserView navigationBar]
  -[_SFBrowserView hitTest:withEvent:]
  -[_SFBrowserView setNavigationBar:]
  -[_SFBrowserView toolbar]
  -[_SFBrowserView setToolbar:]
  -[_SFBrowserView contentContainerView]
  -[_SFBrowserView previewHeader]
  -[_SFBrowserView setContentReadyForDisplay]
  -[_SFBrowserView setPreviewHeader:]
  -[_SFBrowserView setStatusBarBackgroundView:]
  -[_SFBrowserView updateDismissButtonStyle:]
  -[_SFBrowserView setBottomBarOffset:]
  -[_SFBrowserView setTopBarHeight:]
  -[_SFBrowserView addWebView:]
  -[_SFBrowserView updatePreviewHeader]
  -[_SFBrowserView setShouldUseScrollToTopView:]
  -[_SFBrowserView setCrashBanner:]
  -[_SFBrowserView setCrashBannerOffset:]
  -[_SFBrowserView setQuickLookDocumentView:]
  -[_SFBrowserView bottomBarOffset]
  -[_SFBrowserView topBarHeight]
  -[_SFBrowserView currentWebView]
  -[_SFBrowserView navigationBarBehavior]
  -[_SFBrowserView setNavigationBarBehavior:]
  -[_SFBrowserView statusBarBackgroundView]
  -[_SFBrowserView scrollToTopView]
  -[_SFBrowserView shouldUseScrollToTopView]
  -[_SFBrowserView crashBanner]
  -[_SFBrowserView crashBannerOffset]
  -[_SFBrowserView hasReceivedTouchEvents]
  -[_SFBrowserView quickLookDocumentView]
  -[_SFBrowserView minimalUITopOffset]
  -[_SFBrowserView setMinimalUITopOffset:]


_SFAppPasswordSavingViewController : _SFPasswordViewController
  // instance methods
  -[_SFAppPasswordSavingViewController init]
  -[_SFAppPasswordSavingViewController .cxx_destruct]
  -[_SFAppPasswordSavingViewController viewDidLoad]
  -[_SFAppPasswordSavingViewController viewDidAppear:]
  -[_SFAppPasswordSavingViewController _remoteViewController]
  -[_SFAppPasswordSavingViewController credentialsSubmittedForWebsiteURL:user:password:passwordIsAutoGenerated:completionHandler:]
  -[_SFAppPasswordSavingViewController _setUpServiceProxyIfNeeded]
  -[_SFAppPasswordSavingViewController remoteViewControllerWillDismiss:]
  -[_SFAppPasswordSavingViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[_SFAppPasswordSavingViewController _connectToServiceWithCompletion:]


_SFActivityItemProviderCollection : NSObject /usr/lib/libc++.1.dylib
 @property  WKWebView *webView
 @property  _SFActivityItemProvider *standaloneImageProvider
 @property  _SFActivityItemProvider *webArchiveProvider
 @property  BOOL displayingDigitalHealthLockoutView
 @property  BOOL displayingStandaloneImage
 @property  BOOL displayingStandaloneMedia
 @property  _SFActivityItemProvider *linkProvider
 @property  _SFPrintActivityItemProvider *printProvider
 @property  _SFActivityItemProvider *javaScriptExtensionProvider
 @property  _SFActivityItemProvider *downloadProvider

  // instance methods
  -[_SFActivityItemProviderCollection .cxx_destruct]
  -[_SFActivityItemProviderCollection webView]
  -[_SFActivityItemProviderCollection initWithWebView:]
  -[_SFActivityItemProviderCollection displayingStandaloneImage]
  -[_SFActivityItemProviderCollection setDisplayingStandaloneImage:]
  -[_SFActivityItemProviderCollection linkProvider]
  -[_SFActivityItemProviderCollection javaScriptExtensionProvider]
  -[_SFActivityItemProviderCollection standaloneImageProvider]
  -[_SFActivityItemProviderCollection printProvider]
  -[_SFActivityItemProviderCollection downloadProvider]
  -[_SFActivityItemProviderCollection displayingDigitalHealthLockoutView]
  -[_SFActivityItemProviderCollection webArchiveProvider]
  -[_SFActivityItemProviderCollection activityItemProvidersWithCustomizationController:]
  -[_SFActivityItemProviderCollection setDisplayingDigitalHealthLockoutView:]
  -[_SFActivityItemProviderCollection displayingStandaloneMedia]
  -[_SFActivityItemProviderCollection setDisplayingStandaloneMedia:]
  -[_SFActivityItemProviderCollection setLinkProvider:]
  -[_SFActivityItemProviderCollection setPrintProvider:]
  -[_SFActivityItemProviderCollection setJavaScriptExtensionProvider:]
  -[_SFActivityItemProviderCollection setDownloadProvider:]


SFContentBlockerManager : NSObject /usr/lib/libc++.1.dylib
 @property  NSSet *extensions
 @property  WKUserContentController *userContentController

  // class methods
  +[SFContentBlockerManager sharedManager]
  +[SFContentBlockerManager _contentBlockerLoaderConnection]
  +[SFContentBlockerManager reloadContentBlockerWithIdentifier:completionHandler:]
  +[SFContentBlockerManager getStateOfContentBlockerWithIdentifier:completionHandler:]
  +[SFContentBlockerManager contentBlockerStore]
  +[SFContentBlockerManager _createContentExtensionsDirectoryWithURL:]

  // instance methods
  -[SFContentBlockerManager init]
  -[SFContentBlockerManager .cxx_destruct]
  -[SFContentBlockerManager addObserver:]
  -[SFContentBlockerManager removeObserver:]
  -[SFContentBlockerManager extensions]
  -[SFContentBlockerManager userContentController]
  -[SFContentBlockerManager _loadContentBlockerWithIdentifier:completionHandler:]
  -[SFContentBlockerManager _beginContentBlockerDiscovery]
  -[SFContentBlockerManager _findNewExtensionsAdded:toExistingExtensions:]
  -[SFContentBlockerManager _recompileEnabledContentBlockersIfNeeded:]
  -[SFContentBlockerManager _saveContentBlockerRecompilationInformation]
  -[SFContentBlockerManager _loadContentBlockerRecompilationInformationIfNeeded]
  -[SFContentBlockerManager _hasRecompilationBeenAttemptedForExtension:]
  -[SFContentBlockerManager extensionIsEnabled:]
  -[SFContentBlockerManager _noteRecompilationWasAttemptedForExtension:]
  -[SFContentBlockerManager reloadUserContentController]
  -[SFContentBlockerManager setExtension:isEnabled:]
  -[SFContentBlockerManager displayNameForExtension:]


_SFUserActivityController : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFUserActivityController sharedActivityController]
  +[_SFUserActivityController searchableItemAttributesForDictionary:]


_SFAppleConnectExtensionManager : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL appleConnectExtensionInstalled

  // class methods
  +[_SFAppleConnectExtensionManager sharedManager]

  // instance methods
  -[_SFAppleConnectExtensionManager .cxx_destruct]
  -[_SFAppleConnectExtensionManager _loadAppleConnectExtension:]
  -[_SFAppleConnectExtensionManager _findAppleConnectExtension]
  -[_SFAppleConnectExtensionManager _startListeningForExtensionUpdates]
  -[_SFAppleConnectExtensionManager isAppleConnectExtensionInstalled]
  -[_SFAppleConnectExtensionManager loadAppleConnectExtensionWithUserContentController:]
  -[_SFAppleConnectExtensionManager appleConnectExtensionEnabledPreferenceChanged]
  -[_SFAppleConnectExtensionManager dispatchMessageToAppleConnectExtension:fromPageDelegate:userInfo:]


_SFWebArchiveProvider : NSObject /usr/lib/libc++.1.dylib <_SFQuickLookDocumentSource>
 @property  WKWebView *webView
 @property  NSString *suggestedFilenameWithExtension
 @property  NSString *suggestedFilenameWithoutExtension
 @property  BOOL canGenerateWebArchive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebArchiveProvider .cxx_destruct]
  -[_SFWebArchiveProvider webView]
  -[_SFWebArchiveProvider initWithWebView:]
  -[_SFWebArchiveProvider canGenerateWebArchive]
  -[_SFWebArchiveProvider generateWebArchiveWithCompletionHandler:]
  -[_SFWebArchiveProvider suggestedFilenameWithExtension]
  -[_SFWebArchiveProvider suggestedFilenameWithoutExtension]
  -[_SFWebArchiveProvider _suggestedFilenameWithoutExtension]
  -[_SFWebArchiveProvider _webViewUTI]
  -[_SFWebArchiveProvider _quickLookDocument]
  -[_SFWebArchiveProvider dataForQuickLookDocument:]
  -[_SFWebArchiveProvider suggestedFileNameForQuickLookDocument:]
  -[_SFWebArchiveProvider suggestedFileExtensionForQuickLookDocument:]


_SFKillWebContentProcessUIActivity : _SFActivity
 @property  <_SFKillWebContentProcessUIActivityDelegate> *webProcessDelegate

  // instance methods
  -[_SFKillWebContentProcessUIActivity .cxx_destruct]
  -[_SFKillWebContentProcessUIActivity activityType]
  -[_SFKillWebContentProcessUIActivity _systemImageName]
  -[_SFKillWebContentProcessUIActivity activityTitle]
  -[_SFKillWebContentProcessUIActivity canPerformWithActivityItems:]
  -[_SFKillWebContentProcessUIActivity performActivity]
  -[_SFKillWebContentProcessUIActivity webProcessDelegate]
  -[_SFKillWebContentProcessUIActivity setWebProcessDelegate:]


_SFURLTextPreviewView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  NSURL *URL

  // instance methods
  -[_SFURLTextPreviewView initWithURL:]
  -[_SFURLTextPreviewView .cxx_destruct]
  -[_SFURLTextPreviewView setURL:]
  -[_SFURLTextPreviewView URL]
  -[_SFURLTextPreviewView layoutSubviews]


_SFPasswordTouchIconCache : WBSTouchIconCache /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFPasswordTouchIconCache canHandleRequest:]
  -[_SFPasswordTouchIconCache _operationWithRequest:completionHandler:]


SFContactAutoFillDetailViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[SFContactAutoFillDetailViewController .cxx_destruct]
  -[SFContactAutoFillDetailViewController viewDidLoad]
  -[SFContactAutoFillDetailViewController tableView:numberOfRowsInSection:]
  -[SFContactAutoFillDetailViewController tableView:cellForRowAtIndexPath:]
  -[SFContactAutoFillDetailViewController tableView:didSelectRowAtIndexPath:]
  -[SFContactAutoFillDetailViewController initWithPropertyValues:]


_SFCompressedBarButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFCompressedBarButton .cxx_destruct]
  -[_SFCompressedBarButton initWithFrame:]
  -[_SFCompressedBarButton layoutSubviews]
  -[_SFCompressedBarButton setHighlighted:]


_SFNavigationBarURLButtonBackgroundView : UIImageView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFNavigationBarURLButtonBackgroundView _shouldAnimatePropertyWithKey:]


_SFNavigationBarURLButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIGestureRecognizerDelegate>
 @property  double backgroundAlphaFactor
 @property  _SFNavigationBarTheme *theme
 @property  <_SFNavigationBarURLButtonDelegate> *delegate
 @property  double urlOutlineCornerRadius
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFNavigationBarURLButton dealloc]
  -[_SFNavigationBarURLButton delegate]
  -[_SFNavigationBarURLButton setDelegate:]
  -[_SFNavigationBarURLButton .cxx_destruct]
  -[_SFNavigationBarURLButton initWithFrame:]
  -[_SFNavigationBarURLButton gestureRecognizer:shouldReceiveTouch:]
  -[_SFNavigationBarURLButton setHighlighted:]
  -[_SFNavigationBarURLButton canPerformAction:withSender:]
  -[_SFNavigationBarURLButton canBecomeFirstResponder]
  -[_SFNavigationBarURLButton pointMostlyInside:withEvent:]
  -[_SFNavigationBarURLButton copy:]
  -[_SFNavigationBarURLButton _handleLongPress:]
  -[_SFNavigationBarURLButton theme]
  -[_SFNavigationBarURLButton setTheme:]
  -[_SFNavigationBarURLButton _accessibilityQuickSpeakContent]
  -[_SFNavigationBarURLButton _dismissMenu:]
  -[_SFNavigationBarURLButton _updateEffectView]
  -[_SFNavigationBarURLButton _updateBackgroundImageAnimated:]
  -[_SFNavigationBarURLButton pasteAndNavigate:]
  -[_SFNavigationBarURLButton setURLOutlineCornerRadius:]
  -[_SFNavigationBarURLButton setBackgroundAlphaFactor:]
  -[_SFNavigationBarURLButton backgroundAlphaFactor]
  -[_SFNavigationBarURLButton urlOutlineCornerRadius]


_SFNavigationBarLabelsContainer : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL shouldAnimateBoundsChanges

  // instance methods
  -[_SFNavigationBarLabelsContainer _shouldAnimatePropertyWithKey:]
  -[_SFNavigationBarLabelsContainer shouldAnimateBoundsChanges]
  -[_SFNavigationBarLabelsContainer setShouldAnimateBoundsChanges:]


_SFNavigationBar : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIGestureRecognizerDelegate, _SFFluidProgressViewDelegate, _SFNavigationBarURLButtonDelegate, _UIBasicAnimationFactory, UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private, _UIClickInteractionDelegate, _SFBarCommon>
 @property  _SFNavigationBarItem *item
 @property  BOOL usesNarrowLayout
 @property  BOOL unifiedFieldShowsProgressView
 @property  _SFBarTheme *theme
 @property  _SFNavigationBarTheme *effectiveTheme
 @property  BOOL hasToolbar
 @property  BOOL controlsHidden
 @property  BOOL expanded
 @property  UITextField *textField
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} URLOutlineFrameInNavigationBarSpace
 @property  BOOL backdropGroupDisabled
 @property  NSString *backdropGroupName
 @property  <_SFNavigationBarDelegate> *delegate
 @property  double defaultHeight
 @property  double minimumHeight
 @property  double controlsAlpha
 @property  double contentUnderStatusBarHeight
 @property  BOOL suppressesBlur
 @property  double visualHeight
 @property  double maximumHeight
 @property  double minimumBackdropHeight
 @property  UIView *inputAccessoryView
 @property  {CGSize=dd} dismissButtonSize
 @property  double dismissButtonPadding
 @property  UIBlurEffect *backdropEffect
 @property  <_SFPopoverSourceInfo> *formatMenuButtonPopoverSourceInfo
 @property  <_SFPopoverSourceInfo> *reloadButtonPopoverSourceInfo
 @property  <_SFPopoverSourceInfo> *URLOutlinePopoverSourceInfo
 @property  NSArray *popoverPassthroughViews
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFNavigationBar initialize]
  +[_SFNavigationBar separatorHeight]
  +[_SFNavigationBar _metricsCategory]
  +[_SFNavigationBar estimatedDefaultHeightForStatusBarHeight:]
  +[_SFNavigationBar estimatedMinimumHeightForStatusBarHeight:]

  // instance methods
  -[_SFNavigationBar dealloc]
  -[_SFNavigationBar delegate]
  -[_SFNavigationBar setDelegate:]
  -[_SFNavigationBar .cxx_destruct]
  -[_SFNavigationBar item]
  -[_SFNavigationBar setItem:]
  -[_SFNavigationBar initWithFrame:]
  -[_SFNavigationBar traitCollectionDidChange:]
  -[_SFNavigationBar layoutSubviews]
  -[_SFNavigationBar textField]
  -[_SFNavigationBar tintColorDidChange]
  -[_SFNavigationBar inputAccessoryView]
  -[_SFNavigationBar setInputAccessoryView:]
  -[_SFNavigationBar canBecomeFirstResponder]
  -[_SFNavigationBar _basicAnimationForView:withKeyPath:]
  -[_SFNavigationBar _timingFunctionForAnimation]
  -[_SFNavigationBar _updateBackdropGroupName]
  -[_SFNavigationBar hitTest:withEvent:]
  -[_SFNavigationBar defaultHeight]
  -[_SFNavigationBar backdropGroupName]
  -[_SFNavigationBar setBackdropGroupName:]
  -[_SFNavigationBar minimumHeight]
  -[_SFNavigationBar dropInteraction:canHandleSession:]
  -[_SFNavigationBar dropInteraction:sessionDidUpdate:]
  -[_SFNavigationBar dropInteraction:performDrop:]
  -[_SFNavigationBar _dropInteraction:dataOwnerForSession:]
  -[_SFNavigationBar dragInteraction:itemsForBeginningSession:]
  -[_SFNavigationBar dragInteraction:previewForLiftingItem:session:]
  -[_SFNavigationBar dragInteraction:willAnimateLiftWithAnimator:session:]
  -[_SFNavigationBar dragInteraction:sessionWillBegin:]
  -[_SFNavigationBar _dragInteraction:viewToSnapshotItem:]
  -[_SFNavigationBar _dragInteraction:dataOwnerForSession:]
  -[_SFNavigationBar isExpanded]
  -[_SFNavigationBar _updateText]
  -[_SFNavigationBar clickInteractionDidClickUp:]
  -[_SFNavigationBar clickInteractionShouldBegin:]
  -[_SFNavigationBar clickInteractionDidClickDown:]
  -[_SFNavigationBar setExpanded:]
  -[_SFNavigationBar theme]
  -[_SFNavigationBar setTheme:]
  -[_SFNavigationBar _updateFonts]
  -[_SFNavigationBar _cancelButtonTapped:]
  -[_SFNavigationBar _updateTextColor]
  -[_SFNavigationBar fluidProgressViewDidShowProgress:]
  -[_SFNavigationBar fluidProgressViewWillShowProgress:]
  -[_SFNavigationBar setMaximumHeight:]
  -[_SFNavigationBar setContentUnderStatusBarHeight:]
  -[_SFNavigationBar setDismissButtonStyle:animated:]
  -[_SFNavigationBar navigationBarURLButtonDidReceiveCopyCommand:]
  -[_SFNavigationBar navigationBarURLButtonDidReceivePasteCommand:]
  -[_SFNavigationBar navigationBarURLButton:shouldShowMenuForGestureWithRecognizer:]
  -[_SFNavigationBar navigationBarURLButtonShouldCopy:]
  -[_SFNavigationBar navigationBarURLButtonShouldPaste:]
  -[_SFNavigationBar navigationBarURLButton:shouldAllowLongPressAtPoint:]
  -[_SFNavigationBar textForNavigationBarURLButton:]
  -[_SFNavigationBar clearEphemeralUI]
  -[_SFNavigationBar _updatePlaceholderText]
  -[_SFNavigationBar _updateShowsLockIcon]
  -[_SFNavigationBar _updateShowsSearchIndicator]
  -[_SFNavigationBar _updateAccessoryButtonsVisibility]
  -[_SFNavigationBar _updateMediaCaptureMuteButton]
  -[_SFNavigationBar _updateNavigationBarTrailingButtonType]
  -[_SFNavigationBar _updateLockIconHasEVCertificateTint]
  -[_SFNavigationBar _updateReaderButtonSelected]
  -[_SFNavigationBar _updateReaderButtonVisibilityAnimated:showAvailabilityText:adjustURLLabels:]
  -[_SFNavigationBar _updateNotSecureWarningsVisibility]
  -[_SFNavigationBar _updateProgressView]
  -[_SFNavigationBar _shouldUpdateBackdropStyleForTransitionFromItem:toItem:]
  -[_SFNavigationBar _updateEffectiveTheme]
  -[_SFNavigationBar _updateToolbarAndCancelButtonAlpha]
  -[_SFNavigationBar _editingLabelFont]
  -[_SFNavigationBar _editingScaleFactor]
  -[_SFNavigationBar _updateProgressViewCornerRadius]
  -[_SFNavigationBar _updateProgressViewFillColor]
  -[_SFNavigationBar _viewToInsertProgressBarIn]
  -[_SFNavigationBar _customButtonHorizontalPadding]
  -[_SFNavigationBar _didUpdateEffectiveTheme]
  -[_SFNavigationBar _updateSeparatorAlpha]
  -[_SFNavigationBar hasToolbar]
  -[_SFNavigationBar _updateAccessoryButtonsArrangement]
  -[_SFNavigationBar _URLLabelFont]
  -[_SFNavigationBar _updateTextMetrics]
  -[_SFNavigationBar _updateFillColorForProgressView:]
  -[_SFNavigationBar _updateURLOutlineCornerRadius]
  -[_SFNavigationBar _updateActiveURLLabelAccessory]
  -[_SFNavigationBar _updateControlTints]
  -[_SFNavigationBar _attributedStringNotSecureAnnotation]
  -[_SFNavigationBar _barMetricsDidChange]
  -[_SFNavigationBar _URLTapped:]
  -[_SFNavigationBar newTextField]
  -[_SFNavigationBar _placeholderText]
  -[_SFNavigationBar _fadeOutImageWithSize:opaquePoint:transparentPoint:leftCapWidth:topCapWidth:]
  -[_SFNavigationBar _mediaCaptureMuteButtonTapped:]
  -[_SFNavigationBar _reloadButtonPressed]
  -[_SFNavigationBar _dimmingButtonWithAction:]
  -[_SFNavigationBar _stopButtonPressed]
  -[_SFNavigationBar _configureNavigationBarTrailingButtonTintedImages]
  -[_SFNavigationBar _compressedBarTapped]
  -[_SFNavigationBar _dismissButtonTapped:]
  -[_SFNavigationBar initWithFrame:inputMode:]
  -[_SFNavigationBar _squishTransformFactor]
  -[_SFNavigationBar _controlsAlpha]
  -[_SFNavigationBar _formatToggleButtonTapped:]
  -[_SFNavigationBar _setUpFormatToggleButtonIfNeeded]
  -[_SFNavigationBar _navigationBarTrailingButtonWithType:]
  -[_SFNavigationBar _transitionFromView:toView:animated:]
  -[_SFNavigationBar _updateBackdropFrame]
  -[_SFNavigationBar _updateLockViewIfNeeded]
  -[_SFNavigationBar _backgroundAlphaFactorForSquishTransformFactor:]
  -[_SFNavigationBar _widthForAccessoryButtonType:]
  -[_SFNavigationBar _viewForAccessoryButtonType:]
  -[_SFNavigationBar _updateAccessoryButtonsAlpha]
  -[_SFNavigationBar _updateTextFieldFrame]
  -[_SFNavigationBar placeholderHorizontalInset]
  -[_SFNavigationBar _lockImageTintColorForSquishTransformFactor:]
  -[_SFNavigationBar _searchIndicatorColorForSquishTransformFactor:]
  -[_SFNavigationBar _minimumXForLabelOfWidth:centeredInOutlineOfWidth:leftAlignedToMinimumX:maximumX:]
  -[_SFNavigationBar _textFieldTopMargin]
  -[_SFNavigationBar _updateFakeViews]
  -[_SFNavigationBar _hideReaderAvailabilityLabelAnimated:]
  -[_SFNavigationBar _hitTestCandidateViews]
  -[_SFNavigationBar _cancelDelayedReaderAvailabilityAnimation]
  -[_SFNavigationBar _expandedURLLabelParagraphStyle]
  -[_SFNavigationBar _updateSearchIndicator]
  -[_SFNavigationBar _notSecureAnnotationColor]
  -[_SFNavigationBar _notSecureGrayColor]
  -[_SFNavigationBar setExpanded:textFieldSelectionRange:]
  -[_SFNavigationBar _hideReaderAvailabilityLabelNow]
  -[_SFNavigationBar _hideReaderAvailabilityLabelSoon]
  -[_SFNavigationBar _adjustLabelRectForLeadingButtonWithDelay:]
  -[_SFNavigationBar _mediaCaptureMuteButtonColor]
  -[_SFNavigationBar setTextFieldPlaceHolderColor:]
  -[_SFNavigationBar _EVCertLockAndTextColor:]
  -[_SFNavigationBar _notSecureWarningColor]
  -[_SFNavigationBar _toolbarForBarItem:]
  -[_SFNavigationBar animateSafariIconLinkFromPoint:inView:]
  -[_SFNavigationBar animateLinkImage:fromRect:inView:toBarItem:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
  -[_SFNavigationBar popoverSourceInfoForBarItem:]
  -[_SFNavigationBar containsBarItem:]
  -[_SFNavigationBar setUsesNarrowLayout:]
  -[_SFNavigationBar setUnifiedFieldShowsProgressView:]
  -[_SFNavigationBar setDismissButtonHidden:]
  -[_SFNavigationBar dismissButtonSize]
  -[_SFNavigationBar dismissButtonPadding]
  -[_SFNavigationBar visualHeight]
  -[_SFNavigationBar _newNavigationButtonWithImage:insets:action:]
  -[_SFNavigationBar setHasToolbar:]
  -[_SFNavigationBar setControlsHidden:]
  -[_SFNavigationBar setMinimumBackdropHeight:]
  -[_SFNavigationBar URLOutlineFrameInNavigationBarSpace]
  -[_SFNavigationBar _updateReaderButtonAndAvailabilityTextVisibility]
  -[_SFNavigationBar setSuppressesBlur:]
  -[_SFNavigationBar setBackdropGroupDisabled:]
  -[_SFNavigationBar _tintForWarningImage]
  -[_SFNavigationBar formatMenuButtonPopoverSourceInfo]
  -[_SFNavigationBar reloadButtonPopoverSourceInfo]
  -[_SFNavigationBar URLOutlinePopoverSourceInfo]
  -[_SFNavigationBar popoverPassthroughViews]
  -[_SFNavigationBar usesNarrowLayout]
  -[_SFNavigationBar unifiedFieldShowsProgressView]
  -[_SFNavigationBar effectiveTheme]
  -[_SFNavigationBar areControlsHidden]
  -[_SFNavigationBar isBackdropGroupDisabled]
  -[_SFNavigationBar contentUnderStatusBarHeight]
  -[_SFNavigationBar suppressesBlur]
  -[_SFNavigationBar maximumHeight]
  -[_SFNavigationBar minimumBackdropHeight]
  -[_SFNavigationBar backdropEffect]


SFNavigationBarMetrics : NSObject /usr/lib/libc++.1.dylib
 @property  double accessibilityImageScale
 @property  double urlOutlineCornerRadius
 @property  double defaultBarHeight
 @property  double minimumBarHeight
 @property  double urlContainerTop
 @property  double urlOutlineHeight
 @property  UIFont *defaultLabelFont
 @property  UIFont *defaultBoldFont
 @property  UIFont *narrowEditingLabelFont
 @property  double narrowEditingScaleFactor
 @property  double urlLabelVerticalOffset
 @property  double urlLabelAccessoryItemSquishedVerticalOffset
 @property  double urlLabelAccessoryLockItemVerticalOffset
 @property  double distanceFromLabelBaselineToURLOutlineBottom
 @property  UIImageSymbolConfiguration *accessoryImageSymbolConfiguration
 @property  UIImageSymbolConfiguration *squishedAccessoryImageSymbolConfiguration

  // instance methods
  -[SFNavigationBarMetrics init]
  -[SFNavigationBarMetrics .cxx_destruct]
  -[SFNavigationBarMetrics urlOutlineCornerRadius]
  -[SFNavigationBarMetrics updateForStatusBarHeight:]
  -[SFNavigationBarMetrics barHeightWithBarMetricsCategory:]
  -[SFNavigationBarMetrics minimumBarHeight]
  -[SFNavigationBarMetrics urlOutlineHeight]
  -[SFNavigationBarMetrics narrowEditingLabelFont]
  -[SFNavigationBarMetrics defaultLabelFont]
  -[SFNavigationBarMetrics narrowEditingScaleFactor]
  -[SFNavigationBarMetrics defaultBoldFont]
  -[SFNavigationBarMetrics updateForContentSizeCategory:]
  -[SFNavigationBarMetrics urlContainerTop]
  -[SFNavigationBarMetrics urlLabelVerticalOffset]
  -[SFNavigationBarMetrics squishHeightQuantizationOffsetWithBarMetricsCategory:]
  -[SFNavigationBarMetrics distanceFromLabelBaselineToURLOutlineBottom]
  -[SFNavigationBarMetrics accessoryImageSymbolConfiguration]
  -[SFNavigationBarMetrics squishedAccessoryImageSymbolConfiguration]
  -[SFNavigationBarMetrics _updateMetrics]
  -[SFNavigationBarMetrics _contentSizeCategoryWithPreferredCategory:]
  -[SFNavigationBarMetrics accessibilityImageScale]
  -[SFNavigationBarMetrics defaultBarHeight]
  -[SFNavigationBarMetrics urlLabelAccessoryItemSquishedVerticalOffset]
  -[SFNavigationBarMetrics urlLabelAccessoryLockItemVerticalOffset]


SFNavigationBarAccessoryButtonArrangement : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *trailingButtonTypes
 @property  NSArray *leadingButtonTypes

  // instance methods
  -[SFNavigationBarAccessoryButtonArrangement .cxx_destruct]
  -[SFNavigationBarAccessoryButtonArrangement initWithLeadingButtonTypes:trailingButtonTypes:]
  -[SFNavigationBarAccessoryButtonArrangement containsButtonType:]
  -[SFNavigationBarAccessoryButtonArrangement trailingButtonTypes]
  -[SFNavigationBarAccessoryButtonArrangement enumerateButtonTypesFromEdge:withLayoutDirection:usingBlock:]
  -[SFNavigationBarAccessoryButtonArrangement leadingButtonTypes]


SFLinkPreviewHeaderContentView : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFLinkPreviewHeaderContentViewDelegate> *delegate
 @property  NSString *domain
 @property  BOOL previewEnabled

  // instance methods
  -[SFLinkPreviewHeaderContentView domain]
  -[SFLinkPreviewHeaderContentView delegate]
  -[SFLinkPreviewHeaderContentView setDelegate:]
  -[SFLinkPreviewHeaderContentView .cxx_destruct]
  -[SFLinkPreviewHeaderContentView setDomain:]
  -[SFLinkPreviewHeaderContentView initWithFrame:]
  -[SFLinkPreviewHeaderContentView updateConstraints]
  -[SFLinkPreviewHeaderContentView setPreviewEnabled:]
  -[SFLinkPreviewHeaderContentView _togglePreviewButtonPressed]
  -[SFLinkPreviewHeaderContentView isPreviewEnabled]
  -[SFLinkPreviewHeaderContentView _updateDomainWithHidePreviewActionConstraints]
  -[SFLinkPreviewHeaderContentView _updateSafariIconWithShowPreviewActionConstraints]


SFEditableTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL enabled

  // instance methods
  -[SFEditableTableViewCell setEnabled:]
  -[SFEditableTableViewCell isEnabled]
  -[SFEditableTableViewCell tintColorDidChange]
  -[SFEditableTableViewCell initWithEnabledState:]
  -[SFEditableTableViewCell _updateTextFieldTextColor]


_SFBookmarkFolderTouchIconProvider : WBSBookmarkFolderTouchIconProvider /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFBookmarkFolderTouchIconProvider init]
  -[_SFBookmarkFolderTouchIconProvider .cxx_destruct]
  -[_SFBookmarkFolderTouchIconProvider canHandleRequest:]
  -[_SFBookmarkFolderTouchIconProvider backgroundColor]
  -[_SFBookmarkFolderTouchIconProvider _folderContentsDidChange:]
  -[_SFBookmarkFolderTouchIconProvider defaultFolderIconForRequest:]
  -[_SFBookmarkFolderTouchIconProvider bookmarkUUIDForRequest:]
  -[_SFBookmarkFolderTouchIconProvider displayableFolderContentsForRequest:]
  -[_SFBookmarkFolderTouchIconProvider touchIconRequestForBookmark:inFolderWithRequest:]


_SFRecentWebSearchesController : WBSRecentWebSearchesController /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFRecentWebSearchesController _maximumNumberOfSearchesToTrack]

  // instance methods
  -[_SFRecentWebSearchesController .cxx_destruct]
  -[_SFRecentWebSearchesController _removeLegacyRecentSearchesData]
  -[_SFRecentWebSearchesController initWithPathToLegacySearchesFile:]
  -[_SFRecentWebSearchesController _saveRecentSearchDictionaries:toUserDefaultsUsingKey:]
  -[_SFRecentWebSearchesController _recentSearchDictionariesFromUserDefaultsUsingKey:]
  -[_SFRecentWebSearchesController _migrateLegacyData]


_SFCrashBanner : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  _SFBarTheme *theme
 @property  UIButton *closeButton
 @property  NSString *backdropGroupName

  // instance methods
  -[_SFCrashBanner .cxx_destruct]
  -[_SFCrashBanner initWithFrame:]
  -[_SFCrashBanner sizeThatFits:]
  -[_SFCrashBanner layoutSubviews]
  -[_SFCrashBanner backdropGroupName]
  -[_SFCrashBanner setBackdropGroupName:]
  -[_SFCrashBanner theme]
  -[_SFCrashBanner setTheme:]
  -[_SFCrashBanner closeButton]
  -[_SFCrashBanner setCloseButton:]
  -[_SFCrashBanner _layoutCloseButton]
  -[_SFCrashBanner _shouldUseManuallyWrappedCrashMessageForWidth:]
  -[_SFCrashBanner _labelLayoutSizeForWidth:]


_SFActivityViewController : UIActivityViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFActivityItemCustomizationDelegate>
 @property  NSString *currentExtensionIdentifier
 @property  _SFSafariSharingExtensionController *sharingExtensionController
 @property  <_SFActivityViewControllerDelegate> *delegate
 @property  _SFActivityItemCustomizationController *customizationController
 @property  NSURL *sharingURL
 @property  NSArray *activityItemProviders
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFActivityViewController activeWebPageExtensionItemForURL:withPreviewImageHandler:]

  // instance methods
  -[_SFActivityViewController dealloc]
  -[_SFActivityViewController delegate]
  -[_SFActivityViewController setDelegate:]
  -[_SFActivityViewController .cxx_destruct]
  -[_SFActivityViewController _performActivity:]
  -[_SFActivityViewController _prepareActivity:completion:]
  -[_SFActivityViewController _executeActivity]
  -[_SFActivityViewController _updateActivityItems:]
  -[_SFActivityViewController sharingURL]
  -[_SFActivityViewController initWithActivityItems:applicationActivities:sharingURL:sourceURL:]
  -[_SFActivityViewController _updatePrintControllerWithActivityItems:]
  -[_SFActivityViewController activityDidComplete:withReturnedItems:success:]
  -[_SFActivityViewController setCustomizationController:]
  -[_SFActivityViewController currentExtensionIdentifier]
  -[_SFActivityViewController _processJavaScriptFinalizeReturnedItems:forExtension:]
  -[_SFActivityViewController _containsProviderForDownloadActivityAndGetMIMEType:uti:]
  -[_SFActivityViewController activityItemProviders]
  -[_SFActivityViewController prepareJavaScriptExtensionItemForActivity:]
  -[_SFActivityViewController _preparePrint:completion:]
  -[_SFActivityViewController customizationController]
  -[_SFActivityViewController setCurrentExtensionIdentifier:]
  -[_SFActivityViewController _extensionItemForExtensionActivity:]
  -[_SFActivityViewController _javaScriptProcessingFileURLInExtension:]
  -[_SFActivityViewController customizationControllerCustomizationsDidChange:]
  -[_SFActivityViewController initWithActivityItemProviderCollection:applicationActivities:sharingURL:sourceURL:]
  -[_SFActivityViewController sharingExtensionController]
  -[_SFActivityViewController setSharingExtensionController:]
  -[_SFActivityViewController setSharingURL:]


_SFReaderWebProcessPlugInPageController : _SFWebProcessPlugInPageController
 @property  _SFWebProcessPlugInReaderEnabledPageController *originalPageController

  // class methods
  +[_SFReaderWebProcessPlugInPageController readerPageControllerForContextHandle:]

  // instance methods
  -[_SFReaderWebProcessPlugInPageController .cxx_destruct]
  -[_SFReaderWebProcessPlugInPageController .cxx_construct]
  -[_SFReaderWebProcessPlugInPageController setConfiguration:]
  -[_SFReaderWebProcessPlugInPageController webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:]
  -[_SFReaderWebProcessPlugInPageController initWithPlugIn:contextController:]
  -[_SFReaderWebProcessPlugInPageController willDestroyBrowserContextController:]
  -[_SFReaderWebProcessPlugInPageController originalArticleFinder]
  -[_SFReaderWebProcessPlugInPageController _initializeReaderJSControllerForFrame:]
  -[_SFReaderWebProcessPlugInPageController loadNewArticle]
  -[_SFReaderWebProcessPlugInPageController reloadArticle]
  -[_SFReaderWebProcessPlugInPageController setReaderIsActive:]
  -[_SFReaderWebProcessPlugInPageController isolatedWorldForNextPageDetection]
  -[_SFReaderWebProcessPlugInPageController collectReaderContentFromPrintAndMailingFrame]
  -[_SFReaderWebProcessPlugInPageController printingMailingFrame]
  -[_SFReaderWebProcessPlugInPageController originalPageController]
  -[_SFReaderWebProcessPlugInPageController setOriginalPageController:]


_SFAdaptivePreviewViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFLinkPreviewHeaderDelegate>
 @property  <_SFAdaptivePreviewViewControllerDelegate> *delegate
 @property  NSArray *linkActions
 @property  _WKActivatedElementInfo *activatedElementInfo
 @property  NSURL *URL
 @property  UIViewController *contentViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFAdaptivePreviewViewController initWithURL:]
  -[_SFAdaptivePreviewViewController delegate]
  -[_SFAdaptivePreviewViewController setDelegate:]
  -[_SFAdaptivePreviewViewController .cxx_destruct]
  -[_SFAdaptivePreviewViewController setURL:]
  -[_SFAdaptivePreviewViewController URL]
  -[_SFAdaptivePreviewViewController viewDidLoad]
  -[_SFAdaptivePreviewViewController preferredContentSizeDidChangeForChildContentContainer:]
  -[_SFAdaptivePreviewViewController contentViewController]
  -[_SFAdaptivePreviewViewController viewDidLayoutSubviews]
  -[_SFAdaptivePreviewViewController _allowsUserInteractionWhenPreviewedInContextMenu]
  -[_SFAdaptivePreviewViewController previewActionItems]
  -[_SFAdaptivePreviewViewController setLinkPreviewEnabled:]
  -[_SFAdaptivePreviewViewController _setUpLinkPreviewViewControllerIfNeeded]
  -[_SFAdaptivePreviewViewController _setUpTextPreviewViewControllerIfNeeded]
  -[_SFAdaptivePreviewViewController _addViewFromViewController:]
  -[_SFAdaptivePreviewViewController _removeViewController:]
  -[_SFAdaptivePreviewViewController linkPreviewHeader:didEnableLinkPreview:]
  -[_SFAdaptivePreviewViewController linkActions]
  -[_SFAdaptivePreviewViewController setLinkActions:]
  -[_SFAdaptivePreviewViewController activatedElementInfo]
  -[_SFAdaptivePreviewViewController setActivatedElementInfo:]


SFFormAutoFillFrameHandle : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding, WBUFormAutoFillFrameHandle>
 @property  _WKFrameHandle *frameHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSURL *webui_URL
 @property  ^{__SecTrust=} webui_serverTrust

  // class methods
  +[SFFormAutoFillFrameHandle supportsSecureCoding]

  // instance methods
  -[SFFormAutoFillFrameHandle dealloc]
  -[SFFormAutoFillFrameHandle isEqual:]
  -[SFFormAutoFillFrameHandle copyWithZone:]
  -[SFFormAutoFillFrameHandle encodeWithCoder:]
  -[SFFormAutoFillFrameHandle initWithCoder:]
  -[SFFormAutoFillFrameHandle .cxx_destruct]
  -[SFFormAutoFillFrameHandle frameHandle]
  -[SFFormAutoFillFrameHandle initWithFrameHandle:URL:serverTrust:]
  -[SFFormAutoFillFrameHandle webui_URL]
  -[SFFormAutoFillFrameHandle webui_serverTrust]
  -[SFFormAutoFillFrameHandle initWithWebProcessPlugInFrame:]


_SFPrintController : NSObject /usr/lib/libc++.1.dylib <UIPrintInteractionControllerDelegate, WBUPrintPageRendererDelegate>
 @property  WKWebView *webView
 @property  _SFReaderController *readerController
 @property  <_SFDialogPresenting> *dialogPresenter
 @property  <_SFPrintControllerDelegate> *delegate
 @property  WBUPrintPageRenderer *printRenderer
 @property  UIPrintInfo *printInfo
 @property  NSString *suggestedPDFFileName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFPrintController isDisplayingPrintUI]

  // instance methods
  -[_SFPrintController init]
  -[_SFPrintController dealloc]
  -[_SFPrintController delegate]
  -[_SFPrintController setDelegate:]
  -[_SFPrintController .cxx_destruct]
  -[_SFPrintController webView]
  -[_SFPrintController printInfo]
  -[_SFPrintController printInteractionControllerParentViewController:]
  -[_SFPrintController setWebView:]
  -[_SFPrintController dialogPresenter]
  -[_SFPrintController setDialogPresenter:]
  -[_SFPrintController printInteractionControllerDidFinish]
  -[_SFPrintController preparePrintInteractionControllerForUsage:completion:]
  -[_SFPrintController clearQueue]
  -[_SFPrintController printRenderer]
  -[_SFPrintController _preparePrintInteractionControllerForUsage:onlyIfLoaded:completion:]
  -[_SFPrintController _shouldPrintWhileLoadingForUsage:completionHandler:]
  -[_SFPrintController updatePrintInfo]
  -[_SFPrintController _didFinishPrintingCurrentItemWithResult:fromPrintInteractionControllerCompletion:]
  -[_SFPrintController handleNextPrintRequest]
  -[_SFPrintController _enqueuePrintItem:]
  -[_SFPrintController reservePrintInteractionController]
  -[_SFPrintController _dequeuePrintItem]
  -[_SFPrintController _printCurrentItem]
  -[_SFPrintController _shouldAllowBlockedPrintWithCompletionHandler:]
  -[_SFPrintController presentingViewControllerForPrintPageRenderer:]
  -[_SFPrintController printFrame:initiatedByWebContent:completion:]
  -[_SFPrintController getPDFDataForUsage:withCompletion:]
  -[_SFPrintController resetPrintUISuppression]
  -[_SFPrintController suggestedPDFFileName]
  -[_SFPrintController readerController]
  -[_SFPrintController setReaderController:]


SFPrintQueueItem : NSObject /usr/lib/libc++.1.dylib
 @property  _WKFrameHandle *frameHandle
 @property  BOOL initiatedByWebContent

  // instance methods
  -[SFPrintQueueItem dealloc]
  -[SFPrintQueueItem .cxx_destruct]
  -[SFPrintQueueItem completeWithResult:]
  -[SFPrintQueueItem frameHandle]
  -[SFPrintQueueItem initWithFrameHandle:initiatedByWebContent:completionHandler:]
  -[SFPrintQueueItem initiatedByWebContent]


_SFContentBlockersPreferenceManager : WBSContentBlockersPreferenceManager /System/Library/Frameworks/Foundation.framework/Foundation <SFContentBlockerManagerObserver>
 @property  BOOL hasEnabledContentBlockers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFContentBlockersPreferenceManager dealloc]
  -[_SFContentBlockersPreferenceManager contentBlockerManagerExtensionListDidChange:]
  -[_SFContentBlockersPreferenceManager initWithPerSitePreferencesStore:]
  -[_SFContentBlockersPreferenceManager _checkForContentBlockers]
  -[_SFContentBlockersPreferenceManager didUpdatePreference:toValue:forDomain:]
  -[_SFContentBlockersPreferenceManager hasEnabledContentBlockers]


_SFSearchEngineInfo : WBSSearchProvider /System/Library/Frameworks/Foundation.framework/Foundation
 @property  int searchID
 @property  NSString *scriptName
 @property  NSString *displayName
 @property  int resultType
 @property  unsigned long endpointType

  // class methods
  +[_SFSearchEngineInfo _endpointTypeForShortName:]
  +[_SFSearchEngineInfo _resultTypeForShortName:]
  +[_SFSearchEngineInfo engineFromDictionary:withController:]
  +[_SFSearchEngineInfo shouldIncludeEngineFromDictionary:withController:]

  // instance methods
  -[_SFSearchEngineInfo classForCoder]
  -[_SFSearchEngineInfo .cxx_destruct]
  -[_SFSearchEngineInfo resultType]
  -[_SFSearchEngineInfo displayName]
  -[_SFSearchEngineInfo endpointType]
  -[_SFSearchEngineInfo initWithName:scriptName:searchID:searchTemplate:hostSuffixes:pathPrefixes:usesSearchTermsFromFragment:suggestionsTemplate:topLevelDomains:safeSearchSuffix:safeSearchURLQueryParameters:carrierInfo:controller:]
  -[_SFSearchEngineInfo searchShouldUseSafeSearchTemplate]
  -[_SFSearchEngineInfo searchID]
  -[_SFSearchEngineInfo scriptName]


_SFFormMetadataController : WBSFormMetadataController /System/Library/Frameworks/Foundation.framework/Foundation <WKWebProcessPlugInFormDelegatePrivate>
 @property  WKWebProcessPlugInScriptWorld *scriptWorld
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFFormMetadataController dealloc]
  -[_SFFormMetadataController invalidate]
  -[_SFFormMetadataController _observer]
  -[_SFFormMetadataController .cxx_destruct]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:textDidChangeInTextField:inFrame:initiatedByUserTyping:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willSubmitForm:toFrame:fromFrame:withValues:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willSendSubmitEventToForm:inFrame:targetFrame:values:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextControllerShouldNotifyOnFormChanges:]
  -[_SFFormMetadataController _webProcessPlugInBrowserContextController:willBeginInputSessionForElement:inFrame:userIsInteracting:]
  -[_SFFormMetadataController _collectFormMetadataForPreFilling:]
  -[_SFFormMetadataController _formContainsAutoFilledElements:]
  -[_SFFormMetadataController _assistedNodeMetadataWithPasswordField:passwordFieldMetadata:formMetadata:inFrame:]
  -[_SFFormMetadataController autoFillFormInFrame:withValues:fillSynchronously:setAutoFilled:focusFieldAfterFilling:fieldToFocus:submitForm:]
  -[_SFFormMetadataController fillForm:inFrame:withPassword:]
  -[_SFFormMetadataController removeAutomaticPasswordElementsInFrame:focusedPasswordControlUniqueID:passwordControlUniqueIDs:blurAfterRemoval:]
  -[_SFFormMetadataController removeAutomaticPasswordVisualTreatmentInFrame:passwordControlUniqueIDs:]
  -[_SFFormMetadataController clearField:inFrame:]
  -[_SFFormMetadataController focusFormForStreamlinedLogin:inFrame:]
  -[_SFFormMetadataController _willNavigateFrameWithUnsubmittedForm:]
  -[_SFFormMetadataController didFindSearchURLTemplateString:inFrame:pageController:]
  -[_SFFormMetadataController initWithPageController:]
  -[_SFFormMetadataController scriptWorld]
  -[_SFFormMetadataController collectURLsForPreFilling]
  -[_SFFormMetadataController collectFormMetadataForPreFilling]
  -[_SFFormMetadataController collectMetadataForTextField:inFrame:completionHandler:]
  -[_SFFormMetadataController clearScriptWorld]
  -[_SFFormMetadataController formAutoFillNodeForJSWrapper:inContext:]
  -[_SFFormMetadataController usernameFieldFocused:fieldMetadata:inForm:inFrame:]
  -[_SFFormMetadataController passwordFieldFocused:inFrame:isPasswordFieldForUserCredentials:]
  -[_SFFormMetadataController creditCardFieldFocused:inFrame:]
  -[_SFFormMetadataController autoFillFormInFrame:withValues:fillSynchronously:setAutoFilled:selectFieldAfterFilling:]
  -[_SFFormMetadataController finishedAutoFillingForm:inFrame:shouldSubmit:]
  -[_SFFormMetadataController didStartProvisionalLoadForFrame:]
  -[_SFFormMetadataController didSameDocumentNavigation:inFrame:]
  -[_SFFormMetadataController shouldIncludeNonEmptyFields]


SFBookmarkTouchIconRequest : WBSTouchIconRequest /System/Library/Frameworks/Foundation.framework/Foundation
 @property  WebBookmark *bookmark

  // class methods
  +[SFBookmarkTouchIconRequest requestWithBookmark:iconGenerationEnabled:]
  +[SFBookmarkTouchIconRequest requestWithBookmark:]

  // instance methods
  -[SFBookmarkTouchIconRequest .cxx_destruct]
  -[SFBookmarkTouchIconRequest uniqueIdentifier]
  -[SFBookmarkTouchIconRequest bookmark]
  -[SFBookmarkTouchIconRequest initWithBookmark:iconGenerationEnabled:]
  -[SFBookmarkTouchIconRequest initWithBookmark:]


_SFBrowserKeyCommands : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFBrowserKeyCommands _setUpKeyCommandsIfNecessaryForPersona:]
  +[_SFBrowserKeyCommands _localizedKeyCommandWithSelector:discoverabilityTitle:webInterceptable:]
  +[_SFBrowserKeyCommands localizedKeyCommandWithSelector:discoverabilityTitle:bundle:table:webInterceptable:]
  +[_SFBrowserKeyCommands unlocalizedKeyCommandWithSelector:input:modifierFlags:discoverabilityTitle:webInterceptable:]
  +[_SFBrowserKeyCommands _placeholderKeyCommandForCommand:]
  +[_SFBrowserKeyCommands unlocalizedKeyCommandWithSelector:input:modifierFlags:webInterceptable:]
  +[_SFBrowserKeyCommands _keyForSelectorString:bundle:table:]
  +[_SFBrowserKeyCommands _modifierFlagsForSelectorString:bundle:table:]
  +[_SFBrowserKeyCommands _boolForSelectorString:modifierString:bundle:table:]
  +[_SFBrowserKeyCommands browserKeyCommandsForPersona:shouldAddEditingCommands:]


_SFPerSitePreferenceNotifyingListController : PSListController /usr/lib/libMobileGestalt.dylib
  // instance methods
  -[_SFPerSitePreferenceNotifyingListController init]
  -[_SFPerSitePreferenceNotifyingListController dealloc]
  -[_SFPerSitePreferenceNotifyingListController _didUpdatePerSitePreferenceNotificationReceived:]
  -[_SFPerSitePreferenceNotifyingListController perSitePreferenceValueDidChange]
  -[_SFPerSitePreferenceNotifyingListController notifyPerSitePreferenceValueDidChange]


SFHostApplicationCustomActivity : _SFActivity
 @property  SFCustomActivityProxy *activityProxy

  // instance methods
  -[SFHostApplicationCustomActivity .cxx_destruct]
  -[SFHostApplicationCustomActivity activityType]
  -[SFHostApplicationCustomActivity activityProxy]
  -[SFHostApplicationCustomActivity activityTitle]
  -[SFHostApplicationCustomActivity canPerformWithActivityItems:]
  -[SFHostApplicationCustomActivity activityImage]
  -[SFHostApplicationCustomActivity initWithActivityProxy:]


_SFDimmingButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  double normalImageAlpha
 @property  double highlightedImageAlpha
 @property  double highlightAnimationDuration

  // instance methods
  -[_SFDimmingButton layoutSubviews]
  -[_SFDimmingButton setHighlighted:]
  -[_SFDimmingButton setNormalImageAlpha:]
  -[_SFDimmingButton setHighlightedImageAlpha:]
  -[_SFDimmingButton setHighlightAnimationDuration:]
  -[_SFDimmingButton _updateImageAlpha]
  -[_SFDimmingButton normalImageAlpha]
  -[_SFDimmingButton highlightedImageAlpha]
  -[_SFDimmingButton highlightAnimationDuration]


_SFStoreBannerTracker : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFStoreBannerTracker sharedTracker]

  // instance methods
  -[_SFStoreBannerTracker init]
  -[_SFStoreBannerTracker load]
  -[_SFStoreBannerTracker clear]
  -[_SFStoreBannerTracker .cxx_destruct]
  -[_SFStoreBannerTracker save]
  -[_SFStoreBannerTracker filePath]
  -[_SFStoreBannerTracker isProductBannerBlocked:completion:]
  -[_SFStoreBannerTracker blockProductBanner:]


_SFPerSitePreferencesVendor : NSObject /usr/lib/libc++.1.dylib
 @property  WBSAutomaticReaderActivationManager *automaticReaderActivationManager
 @property  _SFContentBlockersPreferenceManager *contentBlockersPreferenceManager
 @property  _SFUserMediaPermissionController *sharedUserMediaPermissionController
 @property  _SFRequestDesktopSitePreferenceManager *requestDesktopSitePreferenceManager
 @property  _SFGeolocationPermissionManager *sharedGeolocationPermissionManager
 @property  _SFPageZoomPreferenceManager *pageZoomPreferenceManager

  // instance methods
  -[_SFPerSitePreferencesVendor .cxx_destruct]
  -[_SFPerSitePreferencesVendor automaticReaderActivationManager]
  -[_SFPerSitePreferencesVendor contentBlockersPreferenceManager]
  -[_SFPerSitePreferencesVendor sharedUserMediaPermissionController]
  -[_SFPerSitePreferencesVendor sharedGeolocationPermissionManager]
  -[_SFPerSitePreferencesVendor requestDesktopSitePreferenceManager]
  -[_SFPerSitePreferencesVendor pageZoomPreferenceManager]
  -[_SFPerSitePreferencesVendor managerForPreference:]


_SFBrowserToolbar : _SFToolbar

SFLocationManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFLocationManager setDefaultEffectiveBundleIdentifier:]
  +[SFLocationManager sharedLocationManager]

  // instance methods
  -[SFLocationManager init]
  -[SFLocationManager .cxx_destruct]
  -[SFLocationManager _handleApplicationStateChange:]
  -[SFLocationManager _setApplication:isForeground:]
  -[SFLocationManager _updateAssertion]
  -[SFLocationManager _updateApplicationsToMonitor]
  -[SFLocationManager addClientForApplication:]
  -[SFLocationManager removeClientForApplication:]


_SFBarTheme : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL backdropIsDark
 @property  BOOL backdropIsTinted
 @property  unsigned long tintStyle
 @property  UIColor *controlsTintColor
 @property  UIColor *preferredBarTintColor
 @property  long long overrideUserInterfaceStyle
 @property  UIBlurEffect *backdropEffect
 @property  NSArray *backdropAdjustmentEffects
 @property  _SFBarTheme *fallbackTheme

  // class methods
  +[_SFBarTheme themeWithBarTintStyle:]
  +[_SFBarTheme themeWithTheme:]
  +[_SFBarTheme themeWithBarTintStyle:preferredBarTintColor:controlsTintColor:]

  // instance methods
  -[_SFBarTheme isEqual:]
  -[_SFBarTheme .cxx_destruct]
  -[_SFBarTheme overrideUserInterfaceStyle]
  -[_SFBarTheme tintStyle]
  -[_SFBarTheme fallbackTheme]
  -[_SFBarTheme controlsTintColor]
  -[_SFBarTheme backdropIsDark]
  -[_SFBarTheme applyBackdropEffectsToView:]
  -[_SFBarTheme preferredBarTintColor]
  -[_SFBarTheme backdropEffect]
  -[_SFBarTheme backdropIsTinted]
  -[_SFBarTheme initWithBarTintStyle:preferredBarTintColor:controlsTintColor:]
  -[_SFBarTheme backdropAdjustmentEffects]


_SFReaderController : NSObject /usr/lib/libc++.1.dylib <SFReaderEventsListener, SFReaderContext, WKNavigationDelegate, WKUIDelegatePrivate>
 @property  WKWebView *webView
 @property  WKWebView *readerWebView
 @property  <_SFReaderControllerDelegate> *delegate
 @property  BOOL readerAvailable
 @property  BOOL contentIsReady
 @property  <WKUIDelegatePrivate> *webViewUIDelegate
 @property  NSString *articleText
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReaderController dealloc]
  -[_SFReaderController invalidate]
  -[_SFReaderController delegate]
  -[_SFReaderController setDelegate:]
  -[_SFReaderController .cxx_destruct]
  -[_SFReaderController observeValueForKeyPath:ofObject:change:context:]
  -[_SFReaderController webView]
  -[_SFReaderController webView:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFReaderController initWithWebView:]
  -[_SFReaderController _webView:actionsForElement:defaultActions:]
  -[_SFReaderController _webView:getAlternateURLFromImage:completionHandler:]
  -[_SFReaderController webViewUIDelegate]
  -[_SFReaderController _webView:dataInteractionOperationWasHandled:forSession:itemProviders:]
  -[_SFReaderController _webView:dataInteraction:sessionWillBegin:]
  -[_SFReaderController _webView:dataInteraction:session:didEndWithOperation:]
  -[_SFReaderController _webView:willUpdateDataInteractionOperationToOperation:forSession:]
  -[_SFReaderController _webView:performDataInteractionOperationWithItemProviders:]
  -[_SFReaderController _webView:previewViewControllerForURL:defaultActions:elementInfo:]
  -[_SFReaderController _webView:commitPreviewedViewController:]
  -[_SFReaderController clearAvailability]
  -[_SFReaderController readerWebView]
  -[_SFReaderController loadNewArticle]
  -[_SFReaderController setReaderIsActive:]
  -[_SFReaderController isLoadingNextPage]
  -[_SFReaderController prepareReaderPrintingIFrameWithCompletion:]
  -[_SFReaderController _setUpReaderActivityListener]
  -[_SFReaderController _updateJavaScriptEnabled]
  -[_SFReaderController didDetermineReaderAvailability:dueToSameDocumentNavigation:]
  -[_SFReaderController didDetermineReaderAvailabilityForDynamicCheck:]
  -[_SFReaderController contentDidBecomeReadyWithDetectedLanguage:]
  -[_SFReaderController didSetReaderConfiguration:]
  -[_SFReaderController didCollectReadingListItemInfo:bookmarkID:]
  -[_SFReaderController didCollectReaderContentForMail:]
  -[_SFReaderController didPrepareReaderContentForPrinting:]
  -[_SFReaderController readerTextWasExtracted:withMetadata:wasDeterminingAvailabilility:]
  -[_SFReaderController didCollectArticleContent:]
  -[_SFReaderController setReaderInitialTopScrollOffset:configuration:isViewingArchive:]
  -[_SFReaderController activateFont:]
  -[_SFReaderController didFinishPresentationUpdateAfterTransitioningToReader]
  -[_SFReaderController checkReaderAvailability]
  -[_SFReaderController collectArticleContent]
  -[_SFReaderController setReaderInitialTopScrollOffset:configuration:isViewingArchive:scrollOffsetDictionary:]
  -[_SFReaderController readerControllerProxy]
  -[_SFReaderController setUpReaderWebViewIfNeededAndPerformBlock:]
  -[_SFReaderController _readerWebViewIsReady]
  -[_SFReaderController _performActionsDelayedUntilReaderWebViewIsReady]
  -[_SFReaderController _performActionsDelayedUntilReaderWebViewIsReadyDidTimeout:]
  -[_SFReaderController createArticleFinder]
  -[_SFReaderController _collectReaderContentForMailWithCompletion:]
  -[_SFReaderController _saveConfigurationAndSendToWebProcess]
  -[_SFReaderController sendConfigurationToWebProcess]
  -[_SFReaderController _sendReaderAvailabilityNotificationForReason:]
  -[_SFReaderController setReaderLanguageTag:]
  -[_SFReaderController isReaderAvailable]
  -[_SFReaderController stopLoadingNextPage]
  -[_SFReaderController clearReaderWebView]
  -[_SFReaderController shouldCreateArticleFinder]
  -[_SFReaderController activateReader]
  -[_SFReaderController deactivateReaderNow:]
  -[_SFReaderController scrollPositionInformation]
  -[_SFReaderController clearUnusedReaderResourcesSoon]
  -[_SFReaderController readerURL]
  -[_SFReaderController configurationManager]
  -[_SFReaderController fontManager]
  -[_SFReaderController collectReaderContentForMailWithCompletion:]
  -[_SFReaderController setReaderFont:]
  -[_SFReaderController setReaderTheme:forAppearance:]
  -[_SFReaderController canIncreaseReaderTextSize]
  -[_SFReaderController canDecreaseReaderTextSize]
  -[_SFReaderController increaseReaderTextSize]
  -[_SFReaderController decreaseReaderTextSize]
  -[_SFReaderController resetReaderTextSize]
  -[_SFReaderController collectReadingListInfoWithBookmarkID:completionHandler:]
  -[_SFReaderController didCreateReaderWebView:]
  -[_SFReaderController owningWebViewDidCommitNavigation]
  -[_SFReaderController setReaderAvailable:]
  -[_SFReaderController contentIsReady]
  -[_SFReaderController setContentIsReady:]
  -[_SFReaderController setWebViewUIDelegate:]
  -[_SFReaderController articleText]


SFToolbarContainer : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIToolbar *toolbar
 @property  double minimumWidth
 @property  {UIEdgeInsets=dddd} toolbarInsets

  // instance methods
  -[SFToolbarContainer .cxx_destruct]
  -[SFToolbarContainer layoutSubviews]
  -[SFToolbarContainer minimumWidth]
  -[SFToolbarContainer setMinimumWidth:]
  -[SFToolbarContainer hitTest:withEvent:]
  -[SFToolbarContainer initWithToolbar:]
  -[SFToolbarContainer toolbar]
  -[SFToolbarContainer setToolbarInsets:]
  -[SFToolbarContainer widthRangeUsingNarrowMetrics:]
  -[SFToolbarContainer toolbarInsets]


SFBarRegistration : UIResponder /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFBarRegistrationToken>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFBarRegistration .cxx_destruct]
  -[SFBarRegistration canPerformAction:withSender:]
  -[SFBarRegistration containsBarItem:]
  -[SFBarRegistration _newBarButtonItemForSFBarItem:]
  -[SFBarRegistration _itemReceivedLongPress:]
  -[SFBarRegistration _itemReceivedTouchDown:]
  -[SFBarRegistration _itemReceivedTap:]
  -[SFBarRegistration _barItemForUIBarButtonItem:]
  -[SFBarRegistration _UIBarButtonItemForBarItem:]
  -[SFBarRegistration _arrangedBarItemsNeedUpdate]
  -[SFBarRegistration _effectiveArrangedBarItems]
  -[SFBarRegistration _UIBarButtonItemsForArrangedBarItems:]
  -[SFBarRegistration updateArrangedUIBarButtonItemsIfNeeded]
  -[SFBarRegistration UIBarButtonItemForItem:]
  -[SFBarRegistration popoverSourceInfoForItem:]
  -[SFBarRegistration initWithBar:barManager:layout:persona:]
  -[SFBarRegistration setBookmarksItemSelected:]
  -[SFBarRegistration setDownloadsItemProgress:]
  -[SFBarRegistration pulseDownloadsItem]
  -[SFBarRegistration setBarItem:enabled:]
  -[SFBarRegistration setBarItem:hidden:]


_SFFormAutoFillController : NSObject /usr/lib/libc++.1.dylib <SFCredentialProviderExtensionManagerObserver, _SFAutoFillInputViewDelegate, SFFormMetadataObserver, _SFAuthenticationClient>
 @property  UIView<WBUFormAutoFillWebView> *webView
 @property  BOOL metadataCorrectionsEnabled
 @property  _SFAuthenticationContext *authenticationContext
 @property  WBSOneTimeCodeMonitor *oneTimeCodeMonitor
 @property  CNContact *lastFilledContact
 @property  WBSCreditCardData *lastFilledCreditCardData
 @property  NSSet *lastFilledCreditCardDataTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFFormAutoFillController _filterAndSortCredentialIdentities:pageURL:exactMatchesOnly:]
  +[_SFFormAutoFillController _getExternalLoginCredentialSuggestionsForDomains:completion:]
  +[_SFFormAutoFillController _getExternalLoginCredentialSuggestionsForDomains:pageURL:completion:]

  // instance methods
  -[_SFFormAutoFillController dealloc]
  -[_SFFormAutoFillController invalidate]
  -[_SFFormAutoFillController .cxx_destruct]
  -[_SFFormAutoFillController webView]
  -[_SFFormAutoFillController insertTextSuggestion:]
  -[_SFFormAutoFillController authenticationContext]
  -[_SFFormAutoFillController didCollectURLsForPreFilling:atURL:]
  -[_SFFormAutoFillController didCollectFormMetadataForPreFilling:atURL:ancestorFramesOfFormToPreFill:]
  -[_SFFormAutoFillController textDidChangeInTextField:inForm:inFrame:]
  -[_SFFormAutoFillController didFillGeneratedPasswordInForm:inFrame:]
  -[_SFFormAutoFillController willNavigateFrame:withUnsubmittedForm:]
  -[_SFFormAutoFillController autoFillDidFinishWithUpdatedFormMetadata:inFrame:shouldSubmit:]
  -[_SFFormAutoFillController didUpdateUnsubmittedForm:inFrame:]
  -[_SFFormAutoFillController didRemoveAutomaticStrongPasswordInForm:inputSessionUserObject:inFrame:]
  -[_SFFormAutoFillController autoFillForm:inFrame:withGeneratedPassword:]
  -[_SFFormAutoFillController annotateForm:inFrame:withValues:]
  -[_SFFormAutoFillController fillTextField:inFrame:withGeneratedPassword:]
  -[_SFFormAutoFillController setFormControls:areAutoFilled:andClearField:inFrame:]
  -[_SFFormAutoFillController autoFillOneTimeCodeFieldsInFrame:withValue:]
  -[_SFFormAutoFillController _prefillTimerFired:]
  -[_SFFormAutoFillController autoFill]
  -[_SFFormAutoFillController updateSuggestions]
  -[_SFFormAutoFillController _didFocusSensitiveFormField]
  -[_SFFormAutoFillController _fieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController _removeUniqueIDsOfAutoFilledForm:]
  -[_SFFormAutoFillController _restoreInputAssistantItemsIfNecessary]
  -[_SFFormAutoFillController usernameFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController passwordFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController textFieldFocused:inForm:inFrame:inputSession:]
  -[_SFFormAutoFillController elementIsBeingFocusedForStreamlinedLogin:]
  -[_SFFormAutoFillController _hideInputAssistantItemsIfNecessary]
  -[_SFFormAutoFillController _fieldFocusedWithInputSession:]
  -[_SFFormAutoFillController fieldWillFocusWithInputSession:]
  -[_SFFormAutoFillController fieldDidFocusWithInputSession:]
  -[_SFFormAutoFillController willSubmitForm:inFrame:submissionHandler:]
  -[_SFFormAutoFillController _preFillDisabledHosts]
  -[_SFFormAutoFillController _authenticateForAutoFillForHighLevelDomain:withCompletion:]
  -[_SFFormAutoFillController oneTimeCodeMonitor]
  -[_SFFormAutoFillController _showingAutoFillInputView]
  -[_SFFormAutoFillController _websiteForAuthenticationPrompt]
  -[_SFFormAutoFillController _addUniqueIDsOfAutoFilledForm:]
  -[_SFFormAutoFillController _simulateCarriageReturnKeyEvents]
  -[_SFFormAutoFillController _simulatedWebEventForReturnKeyWithType:]
  -[_SFFormAutoFillController _removeAutomaticPasswordButtonInitiatedByUser:removeVisualTreatmentOnly:]
  -[_SFFormAutoFillController _beginAutomaticPasswordInteractionWithInputSession:generatedPassword:ignorePreviousDecision:]
  -[_SFFormAutoFillController automaticPasswordForPasswordField:inForm:isFrame:]
  -[_SFFormAutoFillController credentialProviderExtensionManagerExtensionListDidChange:]
  -[_SFFormAutoFillController autoFillInputViewDidSelectUseKeyboard:]
  -[_SFFormAutoFillController autoFillInputViewDidSelectMorePasswords:]
  -[_SFFormAutoFillController authenticationCustomUIProgressObserverForContext:]
  -[_SFFormAutoFillController authenticationMessageForContext:]
  -[_SFFormAutoFillController passcodePromptForContext:]
  -[_SFFormAutoFillController displayMessageAsTitleForContext:]
  -[_SFFormAutoFillController initWithWebView:delegate:]
  -[_SFFormAutoFillController prefillFormsSoonIfNeeded]
  -[_SFFormAutoFillController offerToSaveUnsubmittedFormDataIfNeeded]
  -[_SFFormAutoFillController shouldShowIconsInPasswordPicker]
  -[_SFFormAutoFillController fetchMetadataForTextField:inFrame:withCompletion:]
  -[_SFFormAutoFillController autoFillFormInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:submitForm:]
  -[_SFFormAutoFillController fieldFocusedWithInputSession:]
  -[_SFFormAutoFillController willSubmitFormValues:userObject:submissionHandler:]
  -[_SFFormAutoFillController authenticateForAutoFillAuthenticationType:withCompletion:]
  -[_SFFormAutoFillController removeAutomaticPasswordVisualTreatment]
  -[_SFFormAutoFillController removeAutomaticPasswordButtonInitiatedByUser:]
  -[_SFFormAutoFillController automaticPasswordSheetDismissed]
  -[_SFFormAutoFillController prepareForShowingAutomaticStrongPasswordWithInputSession:]
  -[_SFFormAutoFillController beginAutomaticPasswordInteractionWithInputSession:generatedPassword:]
  -[_SFFormAutoFillController beginAutomaticPasswordInteractionWithInputSession:]
  -[_SFFormAutoFillController metadataCorrectionsEnabled]
  -[_SFFormAutoFillController setMetadataCorrectionsEnabled:]
  -[_SFFormAutoFillController lastFilledContact]
  -[_SFFormAutoFillController setLastFilledContact:]
  -[_SFFormAutoFillController lastFilledCreditCardData]
  -[_SFFormAutoFillController setLastFilledCreditCardData:]
  -[_SFFormAutoFillController lastFilledCreditCardDataTypes]
  -[_SFFormAutoFillController setLastFilledCreditCardDataTypes:]


SFDialogContentView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UITextFieldDelegate>
 @property  _SFDialogView *dialogView
 @property  NSArray *actions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFDialogContentView endEditing]
  -[SFDialogContentView initWithCoder:]
  -[SFDialogContentView .cxx_destruct]
  -[SFDialogContentView initWithFrame:]
  -[SFDialogContentView traitCollectionDidChange:]
  -[SFDialogContentView layoutSubviews]
  -[SFDialogContentView becomeFirstResponder]
  -[SFDialogContentView actions]
  -[SFDialogContentView updateConstraints]
  -[SFDialogContentView canPerformAction:withSender:]
  -[SFDialogContentView canBecomeFirstResponder]
  -[SFDialogContentView keyCommands]
  -[SFDialogContentView setTitleText:]
  -[SFDialogContentView textFieldShouldReturn:]
  -[SFDialogContentView setActions:]
  -[SFDialogContentView setMessageText:]
  -[SFDialogContentView didAppear]
  -[SFDialogContentView _actionTriggered:]
  -[SFDialogContentView setInputText:placeholder:]
  -[SFDialogContentView setPasswordText:placeholder:]
  -[SFDialogContentView _returnAction:]
  -[SFDialogContentView _optionReturnAction:]
  -[SFDialogContentView _escapeAction:]
  -[SFDialogContentView _focusInputTextField:]
  -[SFDialogContentView _desiredButtonsWidth]
  -[SFDialogContentView _updateActionButtons]
  -[SFDialogContentView _setText:placeholder:forTextField:]
  -[SFDialogContentView _usesLoginFormAppearance]
  -[SFDialogContentView _invokeDelegateWithSelectedIndex:]
  -[SFDialogContentView dialogView]
  -[SFDialogContentView setDialogView:]


_SFFaviconProvider : WBSFaviconProvider /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFFaviconProvider .cxx_destruct]
  -[_SFFaviconProvider initWithPersistenceBaseURL:persistenceName:preferredIconSize:atScale:allScales:isReadOnly:shouldCheckIntegrityWhenOpeningDatabaseBlock:]
  -[_SFFaviconProvider fallbackIconForRequest:]


_SFActivityItemProvider : UIActivityItemProvider /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  NSURL *url
 @property  NSString *pageTitle
 @property  NSSet *excludedActivityTypes
 @property  @? thumbnailHandler
 @property  WKWebView *webView

  // instance methods
  -[_SFActivityItemProvider .cxx_destruct]
  -[_SFActivityItemProvider item]
  -[_SFActivityItemProvider main]
  -[_SFActivityItemProvider url]
  -[_SFActivityItemProvider setUrl:]
  -[_SFActivityItemProvider webView]
  -[_SFActivityItemProvider activityViewControllerPlaceholderItem:]
  -[_SFActivityItemProvider activityViewController:itemForActivityType:]
  -[_SFActivityItemProvider activityViewController:subjectForActivityType:]
  -[_SFActivityItemProvider activityViewController:thumbnailImageForActivityType:suggestedSize:]
  -[_SFActivityItemProvider initWithPlaceholderItem:]
  -[_SFActivityItemProvider setWebView:]
  -[_SFActivityItemProvider setExcludedActivityTypes:]
  -[_SFActivityItemProvider excludedActivityTypes]
  -[_SFActivityItemProvider pageTitle]
  -[_SFActivityItemProvider setPageTitle:]
  -[_SFActivityItemProvider initWithURL:pageTitle:webView:]
  -[_SFActivityItemProvider initWithPlaceholderItem:URL:pageTitle:webView:]
  -[_SFActivityItemProvider thumbnailHandler]
  -[_SFActivityItemProvider setThumbnailHandler:]


_SFActivityExtensionItemProvider : _SFActivityItemProvider
 @property  NSExtensionItem *extensionItem

  // instance methods
  -[_SFActivityExtensionItemProvider .cxx_destruct]
  -[_SFActivityExtensionItemProvider item]
  -[_SFActivityExtensionItemProvider activityViewController:itemForActivityType:]
  -[_SFActivityExtensionItemProvider _itemForActivityType:]
  -[_SFActivityExtensionItemProvider initWithExtensionItem:URL:pageTitle:webView:]
  -[_SFActivityExtensionItemProvider extensionItem]
  -[_SFActivityExtensionItemProvider setExtensionItem:]


SFPasswordRemoteViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFPasswordRemoteViewControllerProtocol>
 @property  <SFPasswordRemoteViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordRemoteViewController exportedInterface]
  +[SFPasswordRemoteViewController passwordServiceViewControllerName]
  +[SFPasswordRemoteViewController requestViewControllerWithConnectionHandler:]

  // instance methods
  -[SFPasswordRemoteViewController delegate]
  -[SFPasswordRemoteViewController setDelegate:]
  -[SFPasswordRemoteViewController .cxx_destruct]
  -[SFPasswordRemoteViewController viewServiceDidTerminateWithError:]
  -[SFPasswordRemoteViewController willDismissServiceViewController]


_SFReaderExtractedData : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding>
 @property  NSString *title
 @property  NSString *author
 @property  NSString *publishedDate
 @property  NSData *body
 @property  NSURL *mainImageURL
 @property  NSURL *url

  // class methods
  +[_SFReaderExtractedData supportsSecureCoding]

  // instance methods
  -[_SFReaderExtractedData copyWithZone:]
  -[_SFReaderExtractedData encodeWithCoder:]
  -[_SFReaderExtractedData initWithCoder:]
  -[_SFReaderExtractedData .cxx_destruct]
  -[_SFReaderExtractedData url]
  -[_SFReaderExtractedData title]
  -[_SFReaderExtractedData author]
  -[_SFReaderExtractedData body]
  -[_SFReaderExtractedData _initWithAuthor:body:publishedDate:title:mainImageURL:url:]
  -[_SFReaderExtractedData initWithReaderContent:url:]
  -[_SFReaderExtractedData publishedDate]
  -[_SFReaderExtractedData mainImageURL]


_SFUserMediaPermissionController : WBSUserMediaPermissionController /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFUserMediaPermissionController savePendingChanges]
  -[_SFUserMediaPermissionController coalescedAsynchronousWriter:didFinishWritingData:]
  -[_SFUserMediaPermissionController requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:dialogPresenter:]


SFAuthenticationViewController : SFSafariViewController <UIViewControllerTransitioningDelegate>
 @property  @? dismissCompletionHandler
 @property  <SFAuthenticationViewControllerPresentationDelegate> *presentationDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAuthenticationViewController .cxx_destruct]
  -[SFAuthenticationViewController dismissViewControllerAnimated:completion:]
  -[SFAuthenticationViewController dismissCompletionHandler]
  -[SFAuthenticationViewController setDismissCompletionHandler:]
  -[SFAuthenticationViewController setPresentationDelegate:]
  -[SFAuthenticationViewController presentationDelegate]
  -[SFAuthenticationViewController setDefersAddingRemoteViewController:]
  -[SFAuthenticationViewController initWithURL:callbackURLScheme:usingEphemeralSession:presentationContextWindow:]
  -[SFAuthenticationViewController _presentViewController]
  -[SFAuthenticationViewController _restartServiceViewController]
  -[SFAuthenticationViewController remoteViewController:hostApplicationOpenURL:]
  -[SFAuthenticationViewController remoteViewController:didDecideCookieSharingForURL:shouldCancel:]


SFContactAutoFillPropertyValues : NSObject /usr/lib/libc++.1.dylib
 @property  long long selectedIndex
 @property  SFContactAutoFillValue *selectedValue
 @property  NSArray *values
 @property  NSString *property

  // instance methods
  -[SFContactAutoFillPropertyValues values]
  -[SFContactAutoFillPropertyValues .cxx_destruct]
  -[SFContactAutoFillPropertyValues selectedIndex]
  -[SFContactAutoFillPropertyValues setSelectedIndex:]
  -[SFContactAutoFillPropertyValues property]
  -[SFContactAutoFillPropertyValues initWithValues:property:]
  -[SFContactAutoFillPropertyValues selectedValue]


SFFeatureManager : WBUFeatureManager /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[SFFeatureManager sharedFeatureManager]


_SFPopoverSizingTableViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  long long minimumNumberOfRows
 @property  long long maximumNumberOfRows
 @property  double preferredContentWidth
 @property  BOOL hasTranslucentAppearance

  // class methods
  +[_SFPopoverSizingTableViewController initialize]
  +[_SFPopoverSizingTableViewController tableViewCellForSizeEstimation]

  // instance methods
  -[_SFPopoverSizingTableViewController .cxx_destruct]
  -[_SFPopoverSizingTableViewController traitCollectionDidChange:]
  -[_SFPopoverSizingTableViewController preferredContentSize]
  -[_SFPopoverSizingTableViewController willTransitionToTraitCollection:withTransitionCoordinator:]
  -[_SFPopoverSizingTableViewController viewWillAppear:]
  -[_SFPopoverSizingTableViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFPopoverSizingTableViewController willMoveToParentViewController:]
  -[_SFPopoverSizingTableViewController didMoveToParentViewController:]
  -[_SFPopoverSizingTableViewController viewDidLayoutSubviews]
  -[_SFPopoverSizingTableViewController viewDidAppear:]
  -[_SFPopoverSizingTableViewController keyCommands]
  -[_SFPopoverSizingTableViewController _backgroundBlurEffect]
  -[_SFPopoverSizingTableViewController tableViewSpacingForExtraSeparators:]
  -[_SFPopoverSizingTableViewController maximumNumberOfRows]
  -[_SFPopoverSizingTableViewController minimumNumberOfRows]
  -[_SFPopoverSizingTableViewController updatePreferredContentSize]
  -[_SFPopoverSizingTableViewController _updateTranslucentAppearanceIfNeeded]
  -[_SFPopoverSizingTableViewController _needsTranslucentAppearanceUpdate]
  -[_SFPopoverSizingTableViewController updateTranslucentAppearance]
  -[_SFPopoverSizingTableViewController hasTranslucentAppearance]
  -[_SFPopoverSizingTableViewController backgroundColorUsingTranslucentAppearance:]
  -[_SFPopoverSizingTableViewController cancelPopoverKeyPressed]
  -[_SFPopoverSizingTableViewController setPreferredContentWidth:]
  -[_SFPopoverSizingTableViewController preferredContentWidth]


SFBrowserPersonaAnalyticsHelper : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[SFBrowserPersonaAnalyticsHelper initWithPersona:]
  -[SFBrowserPersonaAnalyticsHelper didTapToolbarButton:]
  -[SFBrowserPersonaAnalyticsHelper didLongTapToolbarButton:]
  -[SFBrowserPersonaAnalyticsHelper didDismissWithMethod:]
  -[SFBrowserPersonaAnalyticsHelper didPresentFromHostApp:]


_SFToolbar : UIToolbar /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFBarCommon, _SFBarRegistrationObserving>
 @property  long long placement
 @property  NSString *backdropGroupName
 @property  _SFBarTheme *theme
 @property  BOOL usesLegacyDarkBackdrop
 @property  <_SFBarRegistrationToken> *barRegistration
 @property  UIView *superviewOwningLayout
 @property  double baselineOffsetAdjustment
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFToolbar dealloc]
  -[_SFToolbar .cxx_destruct]
  -[_SFToolbar sizeThatFits:]
  -[_SFToolbar layoutSubviews]
  -[_SFToolbar isMinibar]
  -[_SFToolbar backdropGroupName]
  -[_SFToolbar setBackdropGroupName:]
  -[_SFToolbar _contentMargin]
  -[_SFToolbar setItems:animated:]
  -[_SFToolbar placement]
  -[_SFToolbar theme]
  -[_SFToolbar setTheme:]
  -[_SFToolbar initWithPlacement:]
  -[_SFToolbar setSuperviewOwningLayout:]
  -[_SFToolbar baselineOffsetAdjustment]
  -[_SFToolbar animateSafariIconLinkFromPoint:inView:]
  -[_SFToolbar animateLinkImage:fromRect:inView:toBarItem:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
  -[_SFToolbar popoverSourceInfoForBarItem:]
  -[_SFToolbar barRegistration]
  -[_SFToolbar didChangeArrangedBarItems:]
  -[_SFToolbar _cancelLinkAnimations]
  -[_SFToolbar _updateBackgroundViewEffects]
  -[_SFToolbar didCompleteBarRegistrationWithToken:]
  -[_SFToolbar setUsesLegacyDarkBackdrop:]
  -[_SFToolbar usesLegacyDarkBackdrop]
  -[_SFToolbar setBarRegistration:]
  -[_SFToolbar superviewOwningLayout]


_SFContactPreviewViewController : UINavigationController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFContactPreviewViewController dealloc]
  -[_SFContactPreviewViewController .cxx_destruct]
  -[_SFContactPreviewViewController viewWillDisappear:]
  -[_SFContactPreviewViewController _presentActivityViewController:]
  -[_SFContactPreviewViewController _done:]
  -[_SFContactPreviewViewController initWithFilePath:sourceURL:deleteFileWhenDone:beforeDismissHandler:]


_SFOpenURLOperationDelegate : NSObject /usr/lib/libc++.1.dylib <LSOpenResourceOperationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenURLOperationDelegate .cxx_destruct]
  -[_SFOpenURLOperationDelegate openResourceOperation:didFailWithError:]
  -[_SFOpenURLOperationDelegate openResourceOperationDidComplete:]
  -[_SFOpenURLOperationDelegate openResourceOperation:didFinishCopyingResource:]
  -[_SFOpenURLOperationDelegate initWithCompletionHandler:]
  -[_SFOpenURLOperationDelegate _didFinishWithSuccess:]


_SFWebAppServiceViewController : SFBrowserServiceViewController <SFWebAppServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFWebAppServiceViewController _exportedInterface]
  +[_SFWebAppServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[_SFWebAppServiceViewController dealloc]
  -[_SFWebAppServiceViewController .cxx_destruct]
  -[_SFWebAppServiceViewController initWithNibName:bundle:]
  -[_SFWebAppServiceViewController viewDidLoad]
  -[_SFWebAppServiceViewController preferredStatusBarStyle]
  -[_SFWebAppServiceViewController setNeedsStatusBarAppearanceUpdate]
  -[_SFWebAppServiceViewController _hostApplicationDidEnterBackground]
  -[_SFWebAppServiceViewController processPool]
  -[_SFWebAppServiceViewController websiteDataStore]
  -[_SFWebAppServiceViewController canPrint]
  -[_SFWebAppServiceViewController navigationBarDoneButtonWasTapped:]
  -[_SFWebAppServiceViewController _persona]
  -[_SFWebAppServiceViewController loadWebAppWithIdentifier:]
  -[_SFWebAppServiceViewController webViewControllerDidChangeLoadingState:]
  -[_SFWebAppServiceViewController webViewControllerDidFirstVisuallyNonEmptyLayout:]
  -[_SFWebAppServiceViewController _isURLOutOfScope:withLoginURLExempted:]
  -[_SFWebAppServiceViewController _isURLOutOfManifestScope:]
  -[_SFWebAppServiceViewController _isURLOutOfLegacyScope:withLoginURLExempted:]
  -[_SFWebAppServiceViewController webViewController:didFailProvisionalNavigation:withError:]
  -[_SFWebAppServiceViewController _loadNextFallbackURL]
  -[_SFWebAppServiceViewController webViewController:didFinishNavigation:]
  -[_SFWebAppServiceViewController _updateDisplayMode]
  -[_SFWebAppServiceViewController webViewControllerDidChangeURL:]
  -[_SFWebAppServiceViewController websiteDataStoreConfiguration]
  -[_SFWebAppServiceViewController webViewConfiguration]
  -[_SFWebAppServiceViewController setWebViewController:]
  -[_SFWebAppServiceViewController _initialLoadFinishedWithSuccess:]
  -[_SFWebAppServiceViewController _clientIsWebApp]
  -[_SFWebAppServiceViewController _loadWebClipPageURL:]
  -[_SFWebAppServiceViewController _handleHostStateUpdate:]
  -[_SFWebAppServiceViewController webViewController:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFWebAppServiceViewController _usesScrollToTopView]


_SFAutoFillInputViewButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFAutoFillInputViewButton intrinsicContentSize]
  -[_SFAutoFillInputViewButton layoutSubviews]


_SFAutoFillInputView : UIInputView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <_SFAutoFillInputViewDelegate> *delegate

  // instance methods
  -[_SFAutoFillInputView delegate]
  -[_SFAutoFillInputView setDelegate:]
  -[_SFAutoFillInputView .cxx_destruct]
  -[_SFAutoFillInputView traitCollectionDidChange:]
  -[_SFAutoFillInputView updateConstraints]
  -[_SFAutoFillInputView initWithHostString:credentialSource:suggestion:]
  -[_SFAutoFillInputView _updateFillCredentialButtonLabelMetrics]
  -[_SFAutoFillInputView _fillCredential:]
  -[_SFAutoFillInputView _showStandardKeyboard:]
  -[_SFAutoFillInputView _showMorePasswords:]


_SFFindOnPageView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFFindOnPageToolbarDelegate, _WKFindDelegate, UIKeyInput>
 @property  NSString *findString
 @property  unsigned long numberOfFindMatches
 @property  long long highlightedMatchIndex
 @property  WKWebView *webView
 @property  <_SFFindOnPageViewDelegate> *delegate
 @property  BOOL usesNarrowLayout
 @property  BOOL shouldFocusTextField
 @property  BOOL isShowing
 @property  BOOL isFocused
 @property  BOOL shouldDisplayFindNextPreviousInDiscoverabilityHUD
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long autocapitalizationType
 @property  long long autocorrectionType
 @property  long long spellCheckingType
 @property  long long smartQuotesType
 @property  long long smartDashesType
 @property  long long smartInsertDeleteType
 @property  long long keyboardType
 @property  long long keyboardAppearance
 @property  long long returnKeyType
 @property  BOOL enablesReturnKeyAutomatically
 @property  BOOL secureTextEntry
 @property  NSString *textContentType
 @property  UITextInputPasswordRules *passwordRules
 @property  BOOL hasText

  // class methods
  +[_SFFindOnPageView _undefinedNumberOfMatches]
  +[_SFFindOnPageView _undefinedMatchIndex]
  +[_SFFindOnPageView _maximumNumberOfMatches]

  // instance methods
  -[_SFFindOnPageView delegate]
  -[_SFFindOnPageView .cxx_destruct]
  -[_SFFindOnPageView next]
  -[_SFFindOnPageView previous]
  -[_SFFindOnPageView initWithDelegate:]
  -[_SFFindOnPageView done]
  -[_SFFindOnPageView webView]
  -[_SFFindOnPageView isFocused]
  -[_SFFindOnPageView inputAccessoryView]
  -[_SFFindOnPageView canBecomeFirstResponder]
  -[_SFFindOnPageView didMoveToSuperview]
  -[_SFFindOnPageView deleteBackward]
  -[_SFFindOnPageView insertText:]
  -[_SFFindOnPageView toolbar]
  -[_SFFindOnPageView keyCommands]
  -[_SFFindOnPageView hasText]
  -[_SFFindOnPageView _requiresKeyboardWhenFirstResponder]
  -[_SFFindOnPageView isShowing]
  -[_SFFindOnPageView highlightedMatchIndex]
  -[_SFFindOnPageView setWebView:]
  -[_SFFindOnPageView _webView:didCountMatches:forString:]
  -[_SFFindOnPageView _webView:didFindMatches:forString:withMatchIndex:]
  -[_SFFindOnPageView _webView:didFailToFindString:]
  -[_SFFindOnPageView _dismiss:]
  -[_SFFindOnPageView setUsesNarrowLayout:]
  -[_SFFindOnPageView usesNarrowLayout]
  -[_SFFindOnPageView updateUI]
  -[_SFFindOnPageView findTextField]
  -[_SFFindOnPageView _setFindingInWebViewIfNeeded]
  -[_SFFindOnPageView _advance:]
  -[_SFFindOnPageView prepareFindOnPageWithString:]
  -[_SFFindOnPageView hideFindOnPage]
  -[_SFFindOnPageView prepareFindOnPage]
  -[_SFFindOnPageView _findOptions]
  -[_SFFindOnPageView dismissFindOnPage]
  -[_SFFindOnPageView textForToolbarLabel]
  -[_SFFindOnPageView updateSearchText:]
  -[_SFFindOnPageView hasMatches]
  -[_SFFindOnPageView matchLabelText]
  -[_SFFindOnPageView showFindOnPage]
  -[_SFFindOnPageView selectFindOnPageText]
  -[_SFFindOnPageView takeFindStringFromSelection]
  -[_SFFindOnPageView shouldDisplayFindNextPreviousInDiscoverabilityHUD]
  -[_SFFindOnPageView shouldFocusTextField]
  -[_SFFindOnPageView setShouldFocusTextField:]
  -[_SFFindOnPageView findString]
  -[_SFFindOnPageView setFindString:]
  -[_SFFindOnPageView numberOfFindMatches]
  -[_SFFindOnPageView setNumberOfFindMatches:]
  -[_SFFindOnPageView setHighlightedMatchIndex:]


_SFPasswordPickerHintStringGenerator : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFPasswordPickerHintStringGenerator getHintStringsForAppID:appNames:matchedSites:urlString:outServiceNameHintStrings:outDomainHintStrings:]


SFSwitchTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFSwitchTableViewCellDelegate> *delegate
 @property  BOOL switchOn

  // instance methods
  -[SFSwitchTableViewCell delegate]
  -[SFSwitchTableViewCell setDelegate:]
  -[SFSwitchTableViewCell .cxx_destruct]
  -[SFSwitchTableViewCell initWithReuseIdentifier:]
  -[SFSwitchTableViewCell _switchViewStateDidChange:]
  -[SFSwitchTableViewCell setSwitchOn:]
  -[SFSwitchTableViewCell isSwitchOn]


_SFPasswordTouchIconRequest : WBSTouchIconRequest /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFPasswordTouchIconRequest requestWithURL:minimumIconSize:maximumIconSize:iconDownloadingEnabled:]


_SFManagedFeatureObserver : NSObject /usr/lib/libc++.1.dylib <MCProfileConnectionObserver>
 @property  BOOL authenticationRequiredToAutoFill
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFManagedFeatureObserver sharedObserver]

  // instance methods
  -[_SFManagedFeatureObserver init]
  -[_SFManagedFeatureObserver dealloc]
  -[_SFManagedFeatureObserver .cxx_destruct]
  -[_SFManagedFeatureObserver profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[_SFManagedFeatureObserver authenticationRequiredToAutoFill]
  -[_SFManagedFeatureObserver _isUserEnrolledInBiometricAuthentication]


SFBrowserServiceViewController : _SFBrowserContentViewController <_SFActivityDelegate, _SFLinkPreviewHeaderDelegate, SFServiceViewControllerProtocol>
 @property  SFUserNotification *userNotification
 @property  NSString *hostApplicationCallbackURLScheme
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBrowserServiceViewController _exportedInterface]
  +[SFBrowserServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[SFBrowserServiceViewController dealloc]
  -[SFBrowserServiceViewController .cxx_destruct]
  -[SFBrowserServiceViewController initWithNibName:bundle:]
  -[SFBrowserServiceViewController viewWillDisappear:]
  -[SFBrowserServiceViewController viewDidAppear:]
  -[SFBrowserServiceViewController viewDidDisappear:]
  -[SFBrowserServiceViewController _dismiss]
  -[SFBrowserServiceViewController _willAppearInRemoteViewController]
  -[SFBrowserServiceViewController _hostApplicationDidEnterBackground]
  -[SFBrowserServiceViewController _hostApplicationWillEnterForeground]
  -[SFBrowserServiceViewController setDisplayMode:]
  -[SFBrowserServiceViewController processPool]
  -[SFBrowserServiceViewController loadURL:]
  -[SFBrowserServiceViewController _didLoadWebView]
  -[SFBrowserServiceViewController startResolveRedirectionForURL:]
  -[SFBrowserServiceViewController setDismissButtonStyle:]
  -[SFBrowserServiceViewController browserViewDidReceiveTouchEvent:]
  -[SFBrowserServiceViewController linkPreviewHeader:didEnableLinkPreview:]
  -[SFBrowserServiceViewController decideCookieSharingForURL:callbackURLScheme:]
  -[SFBrowserServiceViewController _persona]
  -[SFBrowserServiceViewController repostNotificationInViewService:]
  -[SFBrowserServiceViewController didFetchCustomActivities:excludedActivityTypes:]
  -[SFBrowserServiceViewController setIsRunningTransitionAnimation:]
  -[SFBrowserServiceViewController didDetectRemoteViewControllerViewIsHidden]
  -[SFBrowserServiceViewController didDetectUserInteractionFromHostApp]
  -[SFBrowserServiceViewController openCurrentURLInSafari]
  -[SFBrowserServiceViewController updateScrollViewIndicatorVerticalInsets:horizontalInsets:]
  -[SFBrowserServiceViewController didRequestShowLinkPreviews:]
  -[SFBrowserServiceViewController websiteDataStoreConfiguration]
  -[SFBrowserServiceViewController _closeDatabasesOnBackgroundingOrDismissal]
  -[SFBrowserServiceViewController _analyticsHelper]
  -[SFBrowserServiceViewController processPoolConfiguration]
  -[SFBrowserServiceViewController _websiteDataStoreURL]
  -[SFBrowserServiceViewController setHostApplicationCallbackURLScheme:]
  -[SFBrowserServiceViewController setUserNotification:]
  -[SFBrowserServiceViewController _webDataStoreRootURL]
  -[SFBrowserServiceViewController _ensureWebsiteDataStoreURL:cookieStoreURL:]
  -[SFBrowserServiceViewController _redirectToHostAppWithExpectedCallbackSchemeIfPossible:]
  -[SFBrowserServiceViewController _applicationPayloadForOpeningInSafari]
  -[SFBrowserServiceViewController webViewController:didReceiveServerRedirectForProvisionalNavigation:]
  -[SFBrowserServiceViewController webViewControllerDidCancelClientRedirect:]
  -[SFBrowserServiceViewController webViewController:willPerformClientRedirectToURL:withDelay:]
  -[SFBrowserServiceViewController webViewController:didStartProvisionalNavigation:]
  -[SFBrowserServiceViewController webViewController:didFinishDocumentLoadForNavigation:]
  -[SFBrowserServiceViewController webViewController:didChangeFullScreen:]
  -[SFBrowserServiceViewController webViewControllerWebProcessDidCrash:]
  -[SFBrowserServiceViewController safariActivity:didFinish:]
  -[SFBrowserServiceViewController _didResolveDestinationURL:pendingAppLinkCheck:]
  -[SFBrowserServiceViewController _getSafariDataSharingModeWithCompletion:]
  -[SFBrowserServiceViewController _fetchActivityViewControllerInfoForURL:title:completion:]
  -[SFBrowserServiceViewController _updateRemoteSwipeGestureState]
  -[SFBrowserServiceViewController _notifyInitialLoadDidFinish:]
  -[SFBrowserServiceViewController _redirectToHostAppWithNavigationResult:options:]
  -[SFBrowserServiceViewController _recordHostAppIdAndURLForTapToRadar:]
  -[SFBrowserServiceViewController bundleIdentifierForProfileInstallation]
  -[SFBrowserServiceViewController _hostAppBundleId]
  -[SFBrowserServiceViewController _shouldReloadImmediatelyAfterPageLoadError]
  -[SFBrowserServiceViewController userNotification]
  -[SFBrowserServiceViewController hostApplicationCallbackURLScheme]


SFUserNotification : NSObject /usr/lib/libc++.1.dylib
 @property  @? completionBlock

  // instance methods
  -[SFUserNotification dealloc]
  -[SFUserNotification .cxx_destruct]
  -[SFUserNotification cancel]
  -[SFUserNotification completionBlock]
  -[SFUserNotification setCompletionBlock:]
  -[SFUserNotification initWithDomain:appBundleID:]
  -[SFUserNotification scheduleWithCompletionBlock:]


_SFPerSitePreferenceDisplayInformation : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *localizedSiteSpecificSettingsTitle
 @property  NSString *localizedAllWebsiteSettingsTitle
 @property  NSString *localizedClearAllSettingsPrompt
 @property  unsigned long displayOption

  // class methods
  +[_SFPerSitePreferenceDisplayInformation _buildMapIfNeeded]
  +[_SFPerSitePreferenceDisplayInformation displayInformationForPerSitePreference:]

  // instance methods
  -[_SFPerSitePreferenceDisplayInformation .cxx_destruct]
  -[_SFPerSitePreferenceDisplayInformation _initWithLocalizedSiteSpecificSettingsTitle:localizedAllWebsiteSettingsTitle:localizedClearAllSettingsPrompt:displayOption:]
  -[_SFPerSitePreferenceDisplayInformation localizedSiteSpecificSettingsTitle]
  -[_SFPerSitePreferenceDisplayInformation localizedAllWebsiteSettingsTitle]
  -[_SFPerSitePreferenceDisplayInformation localizedClearAllSettingsPrompt]
  -[_SFPerSitePreferenceDisplayInformation displayOption]


SFPasswordPickerServiceViewController : SFPasswordServiceViewController <SFCredentialProviderExtensionManagerObserver, _ASCredentialListViewControllerDelegate, _ASPasswordCredentialAuthenticationViewControllerDelegate, _SFAuthenticationClient, _SFAuthenticationContextDelegate, UIPresentationControllerDelegatePrivate, SFPasswordPickerServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordPickerServiceViewController _exportedInterface]
  +[SFPasswordPickerServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[SFPasswordPickerServiceViewController .cxx_destruct]
  -[SFPasswordPickerServiceViewController _context]
  -[SFPasswordPickerServiceViewController initWithNibName:bundle:]
  -[SFPasswordPickerServiceViewController viewWillDisappear:]
  -[SFPasswordPickerServiceViewController presentationControllerDidDismiss:]
  -[SFPasswordPickerServiceViewController viewDidAppear:]
  -[SFPasswordPickerServiceViewController _dismiss]
  -[SFPasswordPickerServiceViewController setWebViewURL:]
  -[SFPasswordPickerServiceViewController setRemoteAppID:]
  -[SFPasswordPickerServiceViewController setRemoteLocalizedAppName:]
  -[SFPasswordPickerServiceViewController setRemoteUnlocalizedAppName:]
  -[SFPasswordPickerServiceViewController setExternallyVerifiedAndApprovedSharedWebCredentialsDomains:]
  -[SFPasswordPickerServiceViewController authenticateToPresentInPopover:completion:]
  -[SFPasswordPickerServiceViewController setAuthenticationGracePeriod:]
  -[SFPasswordPickerServiceViewController credentialProviderExtensionManagerExtensionListDidChange:]
  -[SFPasswordPickerServiceViewController authenticationCustomUIProgressObserverForContext:]
  -[SFPasswordPickerServiceViewController authenticationMessageForContext:]
  -[SFPasswordPickerServiceViewController passcodePromptForContext:]
  -[SFPasswordPickerServiceViewController displayMessageAsTitleForContext:]
  -[SFPasswordPickerServiceViewController _presentCredentialListForExtension:]
  -[SFPasswordPickerServiceViewController _authenticateAndSetPresentCredentialsHandlerWithCompletion:]
  -[SFPasswordPickerServiceViewController _sendCredentialToClientAndDismiss:]
  -[SFPasswordPickerServiceViewController _authenticateToViewOtherPasswordsWithCompletion:]
  -[SFPasswordPickerServiceViewController _fillCredential:needsAuthentication:]
  -[SFPasswordPickerServiceViewController _actionForPresentingPasswordManagerExtension:]
  -[SFPasswordPickerServiceViewController credentialListViewController:didFinishWithCredential:completion:]
  -[SFPasswordPickerServiceViewController presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFPasswordPickerServiceViewController passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFPasswordPickerServiceViewController contextRequiresSessionBasedAuthentication:]
  -[SFPasswordPickerServiceViewController contextShouldAllowPasscodeFallback:]
  -[SFPasswordPickerServiceViewController contextShouldAllowMultipleBiometricFailures:]


_SFPasswordIconController : NSObject /usr/lib/libc++.1.dylib
 @property  <_SFPasswordIconControllerDelegate> *delegate

  // class methods
  +[_SFPasswordIconController preferredIconSize]

  // instance methods
  -[_SFPasswordIconController delegate]
  -[_SFPasswordIconController setDelegate:]
  -[_SFPasswordIconController .cxx_destruct]
  -[_SFPasswordIconController initWithMetadataManager:]
  -[_SFPasswordIconController clearIconFetchingState]
  -[_SFPasswordIconController iconForDomain:]
  -[_SFPasswordIconController backgroundColorForDomain:]
  -[_SFPasswordIconController _fetchTouchIconForDomain:]
  -[_SFPasswordIconController _requestTouchIconForDomain:iconDownloadingEnabled:]
  -[_SFPasswordIconController _checkForLocalVisitToDomain:withCompletion:]
  -[_SFPasswordIconController _populateDomainToItemsWithCompletion:]
  -[_SFPasswordIconController _fetchAppIconForDomain:]
  -[_SFPasswordIconController _iconDidUpdateForDomain:]
  -[_SFPasswordIconController _populateDomainToAppIDWithCompletion:]


_SFReaderFontOptionsGroupController : NSObject /usr/lib/libc++.1.dylib <_SFSettingsAlertOptionsGroupController>
 @property  <SFReaderContext> *readerContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *values

  // instance methods
  -[_SFReaderFontOptionsGroupController values]
  -[_SFReaderFontOptionsGroupController .cxx_destruct]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidBegin:]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidFail:]
  -[_SFReaderFontOptionsGroupController _fontDownloadDidFinish:]
  -[_SFReaderFontOptionsGroupController _fontDownloadProgressDidChange:]
  -[_SFReaderFontOptionsGroupController _fontIsImmediatelyAvailable:]
  -[_SFReaderFontOptionsGroupController _attributedStringForReaderFont:]
  -[_SFReaderFontOptionsGroupController _fontForFontNotification:]
  -[_SFReaderFontOptionsGroupController _itemForNotification:]
  -[_SFReaderFontOptionsGroupController _downloadAccessoryForNotification:]
  -[_SFReaderFontOptionsGroupController prepareItem:forValue:]
  -[_SFReaderFontOptionsGroupController setSelectedValue:]
  -[_SFReaderFontOptionsGroupController attributedStringForValue:]
  -[_SFReaderFontOptionsGroupController textStyleForValue:]
  -[_SFReaderFontOptionsGroupController isSelectedValue:]
  -[_SFReaderFontOptionsGroupController initWithReaderContext:]
  -[_SFReaderFontOptionsGroupController readerContext]


_SFReaderFontDownloadAccessory : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIButton *downloadButton
 @property  UIProgressView *progressView
 @property  BOOL downloading
 @property  @? tappedDownloadBlock

  // instance methods
  -[_SFReaderFontDownloadAccessory .cxx_destruct]
  -[_SFReaderFontDownloadAccessory viewForLastBaselineLayout]
  -[_SFReaderFontDownloadAccessory isDownloading]
  -[_SFReaderFontDownloadAccessory setDownloading:]
  -[_SFReaderFontDownloadAccessory progressView]
  -[_SFReaderFontDownloadAccessory initWithTappedDownloadBlock:]
  -[_SFReaderFontDownloadAccessory _tappedDownloadButton:]
  -[_SFReaderFontDownloadAccessory downloadButton]
  -[_SFReaderFontDownloadAccessory tappedDownloadBlock]
  -[_SFReaderFontDownloadAccessory setTappedDownloadBlock:]


_SFAutomationController : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL allowsRemoteAutomation

  // instance methods
  -[_SFAutomationController allowsRemoteAutomation]
  -[_SFAutomationController setAllowsRemoteAutomation:]


_SFQuickLookDocumentController : NSObject /usr/lib/libc++.1.dylib <_SFQuickLookDocumentViewDelegate>
 @property  UIView *documentView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFQuickLookDocumentController init]
  -[_SFQuickLookDocumentController .cxx_destruct]
  -[_SFQuickLookDocumentController documentView]
  -[_SFQuickLookDocumentController _updateActionButtons]
  -[_SFQuickLookDocumentController _supportedApplications]
  -[_SFQuickLookDocumentController _actionTitleForType:withActionCount:]
  -[_SFQuickLookDocumentController dataOwnerForQuickLookDocumentView:]
  -[_SFQuickLookDocumentController quickLookDocumentView:didSelectActionAtIndex:]
  -[_SFQuickLookDocumentController itemProviderForQuickLookDocumentView:]
  -[_SFQuickLookDocumentController updateWithQuickLookDocument:]
  -[_SFQuickLookDocumentController presentDocumentInteractionControllerFromSource:]


SFWebViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFFormAutoFillControllerDelegate, WKNavigationDelegatePrivate, WKUIDelegatePrivate, _SFDialogControllerDelegate, _SFDialogViewControllerPresenting, _SFWebViewDelegate, _WKInputDelegate, _SFDialogPresenting>
 @property  WKWebView *webView
 @property  <SFWebViewControllerDelegate> *delegate
 @property  BOOL loading
 @property  BOOL didFirstVisuallyNonEmptyLayout
 @property  WKWebViewConfiguration *webViewConfiguration
 @property  _SFDialogController *dialogController
 @property  _SFAuthenticationContext *autoFillAuthenticationContext
 @property  BOOL hasFocusedInputFieldOnCurrentPage
 @property  BOOL hasFormControlInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFWebViewController dealloc]
  -[SFWebViewController delegate]
  -[SFWebViewController setDelegate:]
  -[SFWebViewController .cxx_destruct]
  -[SFWebViewController observeValueForKeyPath:ofObject:change:context:]
  -[SFWebViewController loadView]
  -[SFWebViewController webView]
  -[SFWebViewController presentViewController:animated:completion:]
  -[SFWebViewController _webView:dataOwnerForDragSession:]
  -[SFWebViewController _webView:dataOwnerForDropSession:]
  -[SFWebViewController didFirstVisuallyNonEmptyLayout]
  -[SFWebViewController isLoading]
  -[SFWebViewController webView:decidePolicyForNavigationAction:preferences:decisionHandler:]
  -[SFWebViewController webView:decidePolicyForNavigationResponse:decisionHandler:]
  -[SFWebViewController webView:didStartProvisionalNavigation:]
  -[SFWebViewController webView:didReceiveServerRedirectForProvisionalNavigation:]
  -[SFWebViewController webView:didFailProvisionalNavigation:withError:]
  -[SFWebViewController webView:didCommitNavigation:]
  -[SFWebViewController webView:didFinishNavigation:]
  -[SFWebViewController webView:didFailNavigation:withError:]
  -[SFWebViewController webView:didReceiveAuthenticationChallenge:completionHandler:]
  -[SFWebViewController _webView:didChangeSafeAreaShouldAffectObscuredInsets:]
  -[SFWebViewController _webView:willSubmitFormValues:userObject:submissionHandler:]
  -[SFWebViewController _webView:willPerformClientRedirectToURL:delay:]
  -[SFWebViewController _webViewDidCancelClientRedirect:]
  -[SFWebViewController _webView:navigationDidFinishDocumentLoad:]
  -[SFWebViewController _webView:navigation:didSameDocumentNavigation:]
  -[SFWebViewController _webView:renderingProgressDidChange:]
  -[SFWebViewController _webViewWebProcessDidCrash:]
  -[SFWebViewController _webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:]
  -[SFWebViewController _webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:]
  -[SFWebViewController _webView:didFinishLoadForQuickLookDocumentInMainFrame:]
  -[SFWebViewController _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]
  -[SFWebViewController _webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:]
  -[SFWebViewController webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:]
  -[SFWebViewController webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:]
  -[SFWebViewController webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:]
  -[SFWebViewController _webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:]
  -[SFWebViewController _webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:]
  -[SFWebViewController _webView:printFrame:]
  -[SFWebViewController webViewDidClose:]
  -[SFWebViewController _webViewDidEnterFullscreen:]
  -[SFWebViewController _webViewDidExitFullscreen:]
  -[SFWebViewController _webView:shouldIncludeAppLinkActionsForElement:]
  -[SFWebViewController _webView:actionsForElement:defaultActions:]
  -[SFWebViewController _presentingViewControllerForWebView:]
  -[SFWebViewController _webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:]
  -[SFWebViewController _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:]
  -[SFWebViewController _webView:mediaCaptureStateDidChange:]
  -[SFWebViewController _webView:requestGeolocationAuthorizationForURL:frame:decisionHandler:]
  -[SFWebViewController _webView:accessoryViewCustomButtonTappedInFormInputSession:]
  -[SFWebViewController _webView:insertTextSuggestion:inInputSession:]
  -[SFWebViewController _webView:decidePolicyForFocusedElement:]
  -[SFWebViewController _webView:focusRequiresStrongPasswordAssistance:]
  -[SFWebViewController _webView:willStartInputSession:]
  -[SFWebViewController _webView:didStartInputSession:]
  -[SFWebViewController _webView:previewViewControllerForURL:defaultActions:elementInfo:]
  -[SFWebViewController _webView:commitPreviewedViewController:]
  -[SFWebViewController setLoading:]
  -[SFWebViewController presentDialog:sender:]
  -[SFWebViewController formAutoFillControllerURLForFormAutoFill:]
  -[SFWebViewController formAutoFillControllerCanPrefillForm:]
  -[SFWebViewController formAutoFillControllerShouldShowIconsInPasswordPicker:]
  -[SFWebViewController autoFillAuthenticationContext]
  -[SFWebViewController formAutoFillControllerGetAuthenticationForAutoFill:completion:]
  -[SFWebViewController formAutoFillControllerShouldDisableStreamlinedLogin:]
  -[SFWebViewController formAutoFillControllerUserChoseToUseGeneratedPassword:]
  -[SFWebViewController formAutoFillControllerDidUserDeclineAutomaticStrongPasswordForCurrentDomain:]
  -[SFWebViewController formAutoFillControllerDidFocusSensitiveFormField:]
  -[SFWebViewController webViewConfiguration]
  -[SFWebViewController willActivateWebViewController]
  -[SFWebViewController _automaticPasswordInputViewNotification:]
  -[SFWebViewController _analyticsClient]
  -[SFWebViewController _userDeclinedAutomaticStrongPasswordForCurrentDomain]
  -[SFWebViewController _actionsForElement:defaultActions:isPreviewing:]
  -[SFWebViewController dialogController:presentationPolicyForDialog:]
  -[SFWebViewController dialogController:willPresentDialog:]
  -[SFWebViewController dialogController:presentViewController:withAdditionalAnimations:]
  -[SFWebViewController dialogController:dismissViewController:withAdditionalAnimations:]
  -[SFWebViewController sfWebViewDidChangeSafeAreaInsets:]
  -[SFWebViewController sfWebViewDidBecomeFirstResponder:]
  -[SFWebViewController sfWebViewDidStartFormControlInteraction:]
  -[SFWebViewController sfWebViewDidEndFormControlInteraction:]
  -[SFWebViewController sfWebView:didStartDownload:]
  -[SFWebViewController initWithWebViewConfiguration:]
  -[SFWebViewController willBeginUserInitiatedNavigation]
  -[SFWebViewController dialogController]
  -[SFWebViewController hasFocusedInputFieldOnCurrentPage]
  -[SFWebViewController hasFormControlInteraction]


_SFBrowserWindowSettings : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL hasPrivateBrowsingWindow
 @property  BOOL invalidatesClosedWindows

  // class methods
  +[_SFBrowserWindowSettings settings]
  +[_SFBrowserWindowSettings setSharedSettings:]

  // instance methods
  -[_SFBrowserWindowSettings init]
  -[_SFBrowserWindowSettings synchronize]
  -[_SFBrowserWindowSettings .cxx_destruct]
  -[_SFBrowserWindowSettings hasPrivateBrowsingWindow]
  -[_SFBrowserWindowSettings _initializeSettingsDictionaryIfNeeded]
  -[_SFBrowserWindowSettings _numberForKey:windowUUID:]
  -[_SFBrowserWindowSettings _stringForKey:windowUUID:]
  -[_SFBrowserWindowSettings _boolValueForKey:windowUUID:]
  -[_SFBrowserWindowSettings _setBool:forKey:windowUUID:]
  -[_SFBrowserWindowSettings _setString:forKey:windowUUID:]
  -[_SFBrowserWindowSettings _synchronizeNow]
  -[_SFBrowserWindowSettings validateWindowSettingsWithUUIDs:]
  -[_SFBrowserWindowSettings privateBrowsingEnabledForWindowWithUUID:]
  -[_SFBrowserWindowSettings setPrivateBrowsingEnabled:forWindowWithUUID:]
  -[_SFBrowserWindowSettings activeDocumentIsValidForWindowWithUUID:]
  -[_SFBrowserWindowSettings setActiveDocumentIsValid:forWindowWithUUID:]
  -[_SFBrowserWindowSettings isShowingTabViewForWindowWithUUID:]
  -[_SFBrowserWindowSettings setIsShowingTabView:forWindowWithUUID:]
  -[_SFBrowserWindowSettings blankSnapshotGroupIdentifierForPrivateBrowsing:forWindowWithUUID:]
  -[_SFBrowserWindowSettings setBlankSnapshotGroupIdentifier:forPrivateBrowsing:forWindowWithUUID:]
  -[_SFBrowserWindowSettings removeWindowWithUUID:]
  -[_SFBrowserWindowSettings invalidatesClosedWindows]
  -[_SFBrowserWindowSettings setInvalidatesClosedWindows:]


SFContactAutoFillValue : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL selected
 @property  NSString *label
 @property  NSString *displayValue
 @property  NSArray *matches

  // instance methods
  -[SFContactAutoFillValue .cxx_destruct]
  -[SFContactAutoFillValue label]
  -[SFContactAutoFillValue setSelected:]
  -[SFContactAutoFillValue selected]
  -[SFContactAutoFillValue displayValue]
  -[SFContactAutoFillValue matches]
  -[SFContactAutoFillValue initWithMatches:displayValue:label:]


_SFLinkWithPreviewActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFLinkWithPreviewActivityItemProvider activityViewControllerLinkPresentationMetadata:]


_SFPasswordViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFPasswordRemoteViewControllerDelegate, SFQueueingServiceViewControllerProxyDelegate>
 @property  <_SFPasswordViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPasswordViewController init]
  -[_SFPasswordViewController delegate]
  -[_SFPasswordViewController setDelegate:]
  -[_SFPasswordViewController .cxx_destruct]
  -[_SFPasswordViewController childViewControllerForStatusBarStyle]
  -[_SFPasswordViewController childViewControllerForStatusBarHidden]
  -[_SFPasswordViewController childViewControllerForWhitePointAdaptivityStyle]
  -[_SFPasswordViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[_SFPasswordViewController childViewControllerForHomeIndicatorAutoHidden]
  -[_SFPasswordViewController _remoteViewController]
  -[_SFPasswordViewController _addRemoteView]
  -[_SFPasswordViewController _setUpServiceProxyIfNeeded]
  -[_SFPasswordViewController remoteViewControllerWillDismiss:]
  -[_SFPasswordViewController _addRemoteViewAsChild]
  -[_SFPasswordViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[_SFPasswordViewController _connectToServiceWithCompletion:]
  -[_SFPasswordViewController _connectToService]
  -[_SFPasswordViewController _dismissPasswordViewController]
  -[_SFPasswordViewController serviceProxyWillQueueInvocation:]


SFSaveToFilesActivity : _SFActivity <_SFSaveToFilesOperationDelegate>
 @property  BOOL supportsDownloads
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSaveToFilesActivity .cxx_destruct]
  -[SFSaveToFilesActivity activityType]
  -[SFSaveToFilesActivity activityViewController]
  -[SFSaveToFilesActivity _presentActivityOnViewController:animated:completion:]
  -[SFSaveToFilesActivity initWithActivityItemProviderCollection:customizationController:]
  -[SFSaveToFilesActivity setSupportsDownloads:]
  -[SFSaveToFilesActivity saveToFilesOperation:presentViewController:]
  -[SFSaveToFilesActivity saveToFilesOperation:didFinishWithSuccess:]
  -[SFSaveToFilesActivity saveToFilesOperationSupportsDownloads:]
  -[SFSaveToFilesActivity customizationControllerForSaveToFilesOperation:]
  -[SFSaveToFilesActivity supportsDownloads]


SFFormAutoFillMultipleLoginsAlertController : UIAlertController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL cancelsWhenAppEntersBackground

  // class methods
  +[SFFormAutoFillMultipleLoginsAlertController alertControllerWithMatchesFromFormProtectionSpace:matchesFromOtherProtectionSpaces:externalCredentials:preferredStyle:formURL:completionHandler:]

  // instance methods
  -[SFFormAutoFillMultipleLoginsAlertController .cxx_destruct]
  -[SFFormAutoFillMultipleLoginsAlertController viewWillDisappear:]
  -[SFFormAutoFillMultipleLoginsAlertController _sceneDidEnterBackground:]
  -[SFFormAutoFillMultipleLoginsAlertController setCancelsWhenAppEntersBackground:]
  -[SFFormAutoFillMultipleLoginsAlertController cancelsWhenAppEntersBackground]


SFPasswordSavingRemoteViewController : SFPasswordRemoteViewController
  // class methods
  +[SFPasswordSavingRemoteViewController serviceViewControllerInterface]
  +[SFPasswordSavingRemoteViewController passwordServiceViewControllerName]


_SFURLLabelAccessoryItem : NSObject /usr/lib/libc++.1.dylib
 @property  UIImageView *view
 @property  UIImageView *squishedView
 @property  UIVisualEffectView *effectView
 @property  UIVisualEffectView *squishedEffectView
 @property  UIView *viewForLayout
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frame
 @property  double spacing
 @property  {CGSize=dd} size
 @property  BOOL centerAligned

  // instance methods
  -[_SFURLLabelAccessoryItem .cxx_destruct]
  -[_SFURLLabelAccessoryItem size]
  -[_SFURLLabelAccessoryItem spacing]
  -[_SFURLLabelAccessoryItem setSize:]
  -[_SFURLLabelAccessoryItem frame]
  -[_SFURLLabelAccessoryItem view]
  -[_SFURLLabelAccessoryItem setSpacing:]
  -[_SFURLLabelAccessoryItem setView:]
  -[_SFURLLabelAccessoryItem setFrame:]
  -[_SFURLLabelAccessoryItem effectView]
  -[_SFURLLabelAccessoryItem setEffectView:]
  -[_SFURLLabelAccessoryItem centerAligned]
  -[_SFURLLabelAccessoryItem squishedView]
  -[_SFURLLabelAccessoryItem squishedEffectView]
  -[_SFURLLabelAccessoryItem setSquishedView:]
  -[_SFURLLabelAccessoryItem setSquishedEffectView:]
  -[_SFURLLabelAccessoryItem viewForLayout]
  -[_SFURLLabelAccessoryItem setCenterAligned:]


_SFLinkPresentationIconCache : NSObject /usr/lib/libc++.1.dylib <WBSSiteMetadataProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <WBSSiteMetadataProviderDelegate> *providerDelegate
 @property  BOOL providesFavicons

  // instance methods
  -[_SFLinkPresentationIconCache dealloc]
  -[_SFLinkPresentationIconCache .cxx_destruct]
  -[_SFLinkPresentationIconCache canHandleRequest:]
  -[_SFLinkPresentationIconCache savePendingChangesBeforeTermination]
  -[_SFLinkPresentationIconCache imageForHost:]
  -[_SFLinkPresentationIconCache saveImage:forHost:]
  -[_SFLinkPresentationIconCache _historyItemsWereRemoved:]
  -[_SFLinkPresentationIconCache responseForRequest:willProvideUpdates:]
  -[_SFLinkPresentationIconCache prepareResponseForRequest:allowDelayedResponse:]
  -[_SFLinkPresentationIconCache providerDelegate]
  -[_SFLinkPresentationIconCache setProviderDelegate:]
  -[_SFLinkPresentationIconCache emptyCaches]
  -[_SFLinkPresentationIconCache purgeUnneededCacheEntries]
  -[_SFLinkPresentationIconCache initWithImageDirectoryURL:]


_SFWebViewUsageMonitor : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL userInteracted
 @property  BOOL urlHasQueryString
 @property  BOOL urlHasIDFA
 @property  BOOL viewControllerViewIsHidden
 @property  BOOL shouldAudit
 @property  NSString *stringAsAuditKey

  // instance methods
  -[_SFWebViewUsageMonitor .cxx_destruct]
  -[_SFWebViewUsageMonitor auditUsageIfNeeded]
  -[_SFWebViewUsageMonitor initWithHostAppIdentifier:]
  -[_SFWebViewUsageMonitor userInteracted]
  -[_SFWebViewUsageMonitor setUserInteracted:]
  -[_SFWebViewUsageMonitor checkURL:]
  -[_SFWebViewUsageMonitor setViewControllerViewIsHidden:]
  -[_SFWebViewUsageMonitor urlHasQueryString]
  -[_SFWebViewUsageMonitor urlHasIDFA]
  -[_SFWebViewUsageMonitor viewControllerViewIsHidden]
  -[_SFWebViewUsageMonitor shouldAudit]
  -[_SFWebViewUsageMonitor stringAsAuditKey]
  -[_SFWebViewUsageMonitor setUrlHasIDFA:]
  -[_SFWebViewUsageMonitor setUrlHasQueryString:]


_SFCalendarEventDetector : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFCalendarEventDetector .cxx_destruct]
  -[_SFCalendarEventDetector initWithWebView:]
  -[_SFCalendarEventDetector cancelCheckForConfirmationPage]
  -[_SFCalendarEventDetector _checkIfPageContainsCalendarEvent]
  -[_SFCalendarEventDetector _foundCalendarEvents:]
  -[_SFCalendarEventDetector checkIfPageContainsCalendarEvent]


_SFTextSuggestion : UITextSuggestion /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  @? fillHandler

  // instance methods
  -[_SFTextSuggestion .cxx_destruct]
  -[_SFTextSuggestion fillHandler]
  -[_SFTextSuggestion initWithFillHandler:]


SFFormAutocompleteState : NSObject /usr/lib/libc++.1.dylib <CNContactPickerDelegate, SFContactAutoFillViewControllerFiller, _SFCreditCardCaptureViewControllerDelegate, _ASCredentialListViewControllerDelegate, _ASPasswordCredentialAuthenticationViewControllerDelegate, WBSOneTimeCodeMonitorObserver>
 @property  long long action
 @property  _SFFormAutoFillInputSession *inputSession
 @property  BOOL shouldOfferToAutoFillCreditCardData
 @property  NSString *titleOfAutoFillButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutocompleteState _getMatchesFromFormProtectionSpace:matchesFromOtherProtectionSpaces:withFormURL:credentialMatches:lastGeneratedPassword:currentUser:currentPassword:forUserNamesOnly:]
  +[SFFormAutocompleteState _shouldSaveCredentialsInProtectionSpace:]

  // instance methods
  -[SFFormAutocompleteState dealloc]
  -[SFFormAutocompleteState invalidate]
  -[SFFormAutocompleteState .cxx_destruct]
  -[SFFormAutocompleteState action]
  -[SFFormAutocompleteState _updateAutoFillButton]
  -[SFFormAutocompleteState contactPickerDidCancel:]
  -[SFFormAutocompleteState contactPicker:didSelectContact:]
  -[SFFormAutocompleteState _viewControllerToPresentFrom]
  -[SFFormAutocompleteState creditCardCaptureViewControllerDidCancel:]
  -[SFFormAutocompleteState creditCardCaptureViewController:didCaptureCreditCard:]
  -[SFFormAutocompleteState autoFill]
  -[SFFormAutocompleteState showAllPasswordsButtonTapped]
  -[SFFormAutocompleteState updateSuggestions]
  -[SFFormAutocompleteState initWithFrame:form:textField:inputSession:autoFillController:]
  -[SFFormAutocompleteState titleOfAutoFillButton]
  -[SFFormAutocompleteState getTextSuggestionForStreamlinedAutoFillWithCredentialIdentity:completion:]
  -[SFFormAutocompleteState inputSession]
  -[SFFormAutocompleteState textDidChangeInFrame:form:textField:]
  -[SFFormAutocompleteState shouldOfferToAutoFillCreditCardData]
  -[SFFormAutocompleteState updateCachedFormMetadataAfterFilling:]
  -[SFFormAutocompleteState credentialListViewController:didFinishWithCredential:completion:]
  -[SFFormAutocompleteState presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFFormAutocompleteState passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFFormAutocompleteState _updateSuggestions:]
  -[SFFormAutocompleteState _shouldShowPasswordOptions]
  -[SFFormAutocompleteState _suggestLoginCredentialsShowingQuickTypeKey:]
  -[SFFormAutocompleteState _shouldOfferCreditCardDataAfterUserHasFilledCreditCardData:]
  -[SFFormAutocompleteState _showCreditCardDataSuggestionsAfterUserHasFilledCreditCardData]
  -[SFFormAutocompleteState _canAutoFillCreditCardData]
  -[SFFormAutocompleteState _fillCreditCardDataAfterAuthenticationIfNeeded:]
  -[SFFormAutocompleteState _displayTextForCreditCardNumber:]
  -[SFFormAutocompleteState _updateCreditCardSuggestionsWithHandler:]
  -[SFFormAutocompleteState _suggestUsernamesForRegistrationIfPossible:]
  -[SFFormAutocompleteState _gatherAndShowAddressBookAutoFillSuggestionsWithCorrections]
  -[SFFormAutocompleteState _gatherAndShowAddressBookAutoFillSuggestions]
  -[SFFormAutocompleteState _correctedFormMetadata:]
  -[SFFormAutocompleteState _bestTextFieldMetadataForMetadata:]
  -[SFFormAutocompleteState _textDidChangeInForm:textField:]
  -[SFFormAutocompleteState _setUpMultiRoundAutoFillManagerIfNecessary]
  -[SFFormAutocompleteState _performAutoFill]
  -[SFFormAutocompleteState _autoFillCreditCardData]
  -[SFFormAutocompleteState _autoFillSingleCreditCardData:]
  -[SFFormAutocompleteState _captureCreditCardDataWithCameraAndFill]
  -[SFFormAutocompleteState _suggestPasswordForNewAccountOrChangePasswordForm]
  -[SFFormAutocompleteState _offerToAutoFillContact]
  -[SFFormAutocompleteState _gatherFormValuesWithCompletionHandler:]
  -[SFFormAutocompleteState _updateCreditCardAutoFillAction]
  -[SFFormAutocompleteState _shouldUsePasswordGenerationAssistanceForTextField]
  -[SFFormAutocompleteState _passwordGenerationAssistanceAction]
  -[SFFormAutocompleteState _textFieldIsEmptyPasswordField]
  -[SFFormAutocompleteState _shouldAllowExternalPasswordAutoFillOnURL:]
  -[SFFormAutocompleteState _actionForLoginForm]
  -[SFFormAutocompleteState _shouldAllowGeneratedPassword]
  -[SFFormAutocompleteState _setUserAndPasswordFieldsAutoFilled:clearPasswordField:]
  -[SFFormAutocompleteState _presentViewController:presentingViewController:animated:completion:]
  -[SFFormAutocompleteState _cachedPotentialCredentialMatches]
  -[SFFormAutocompleteState _getLoginFormUser:password:userIsAutoFilled:passwordIsAutoFilled:]
  -[SFFormAutocompleteState externalCredentialIdentities]
  -[SFFormAutocompleteState _fillCredentialAfterAuthenticationIfNeeded:setAsDefaultCredential:submitForm:]
  -[SFFormAutocompleteState _fillPasswordCredentialIdentity:submitForm:]
  -[SFFormAutocompleteState _fillCredential:setAutoFilled:setAsDefaultCredential:focusFieldAfterFilling:submitForm:]
  -[SFFormAutocompleteState _actionForPresentingPasswordManagerExtension:completionHandler:]
  -[SFFormAutocompleteState _getShouldOfferForgetPassword:savePassword:]
  -[SFFormAutocompleteState _offerToForgetSavedPassword:completionHandler:]
  -[SFFormAutocompleteState _generateAndSuggestPasswordWithCompletionHandler:]
  -[SFFormAutocompleteState _presentCredentialListForExtension:completionHandler:]
  -[SFFormAutocompleteState _textSuggestionForExternalCredentialIdentity:submitForm:]
  -[SFFormAutocompleteState _textSuggestionForCredentialDisplayData:submitForm:]
  -[SFFormAutocompleteState _getMatchingKeychainCredentialsIncludingCredentialsWithEmptyUsernames:withCompletion:]
  -[SFFormAutocompleteState _fetchPotentialCredentialMatchesWithCompletion:]
  -[SFFormAutocompleteState _offerToAutoFillFromPotentialCredentialMatches]
  -[SFFormAutocompleteState _hasMatchWithUser:password:]
  -[SFFormAutocompleteState _passwordGenerationAssistanceAutoFillButtonEnabled]
  -[SFFormAutocompleteState _sortedSingleCreditCardDataArray:]
  -[SFFormAutocompleteState _fillSingleCreditCardDataValue:creditCardDataType:]
  -[SFFormAutocompleteState _fillCreditCardData:]
  -[SFFormAutocompleteState _textFieldLooksLikeCardSecurityCodeFieldButNotCardNumberOrCardholderField:]
  -[SFFormAutocompleteState _updateAutoFillActionToCaptureCreditCardAndFill]
  -[SFFormAutocompleteState _suggestionsForAutoFillDisplayData:]
  -[SFFormAutocompleteState _autoFillDisplayData:setAutoFilled:]
  -[SFFormAutocompleteState _autoFillWithSet:]
  -[SFFormAutocompleteState _switchToCustomInputViewWithMatches:contact:]
  -[SFFormAutocompleteState _showOtherContactOptions]
  -[SFFormAutocompleteState _setShowingKeyboardInputView:]
  -[SFFormAutocompleteState dismissCustomAutoFill]
  -[SFFormAutocompleteState _fillASPasswordCredential:needsAuthentication:setAutoFilled:submitForm:]
  -[SFFormAutocompleteState performAutoFillWithMatchSelections:doNotFill:contact:]
  -[SFFormAutocompleteState codesUpdatedForOneTimeCodeMonitor:]


_SFPerSitePreferencePopoverDisplayInformation : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long displayOption
 @property  NSString *localizedDisplayName

  // class methods
  +[_SFPerSitePreferencePopoverDisplayInformation _buildMapIfNeeded]
  +[_SFPerSitePreferencePopoverDisplayInformation popoverDisplayInformationForPerSitePreference:]

  // instance methods
  -[_SFPerSitePreferencePopoverDisplayInformation .cxx_destruct]
  -[_SFPerSitePreferencePopoverDisplayInformation localizedDisplayName]
  -[_SFPerSitePreferencePopoverDisplayInformation displayOption]
  -[_SFPerSitePreferencePopoverDisplayInformation _initWithDisplayOption:localizedDisplayName:]


SFUIBarButtonItemPopoverSourceInfo : NSObject /usr/lib/libc++.1.dylib <_SFPopoverSourceInfo>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} popoverSourceRect
 @property  UIView *popoverSourceView
 @property  UIBarButtonItem *barButtonItem

  // instance methods
  -[SFUIBarButtonItemPopoverSourceInfo .cxx_destruct]
  -[SFUIBarButtonItemPopoverSourceInfo initWithItem:]
  -[SFUIBarButtonItemPopoverSourceInfo barButtonItem]


SFContactAutoFillViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFContactAutoFillViewControllerFiller> *autoFiller

  // instance methods
  -[SFContactAutoFillViewController .cxx_destruct]
  -[SFContactAutoFillViewController properties]
  -[SFContactAutoFillViewController viewWillAppear:]
  -[SFContactAutoFillViewController viewDidLoad]
  -[SFContactAutoFillViewController canBecomeFirstResponder]
  -[SFContactAutoFillViewController tableView:numberOfRowsInSection:]
  -[SFContactAutoFillViewController tableView:cellForRowAtIndexPath:]
  -[SFContactAutoFillViewController tableView:didSelectRowAtIndexPath:]
  -[SFContactAutoFillViewController autoFill:]
  -[SFContactAutoFillViewController _cancel:]
  -[SFContactAutoFillViewController initWithMatches:contact:]
  -[SFContactAutoFillViewController setAutoFiller:]
  -[SFContactAutoFillViewController matchesForProperty:]
  -[SFContactAutoFillViewController valuesFromPropertyMatches:]
  -[SFContactAutoFillViewController _valueForProperty:identifier:]
  -[SFContactAutoFillViewController autoFiller]


_SFBookmarkInfoViewController : _SFPopoverSizingTableViewController <_SFBookmarkInfoViewControllerDelegate, _SFBookmarkTextEntryTableViewControllerDelegate, UITableViewDataSource, UITableViewDelegate>
 @property  <_SFBookmarkInfoViewControllerDelegate> *delegate
 @property  WebBookmark *bookmark
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFBookmarkInfoViewController dealloc]
  -[_SFBookmarkInfoViewController setParent:]
  -[_SFBookmarkInfoViewController delegate]
  -[_SFBookmarkInfoViewController setDelegate:]
  -[_SFBookmarkInfoViewController .cxx_destruct]
  -[_SFBookmarkInfoViewController cancel]
  -[_SFBookmarkInfoViewController bookmark]
  -[_SFBookmarkInfoViewController setBookmark:]
  -[_SFBookmarkInfoViewController loadView]
  -[_SFBookmarkInfoViewController viewWillAppear:]
  -[_SFBookmarkInfoViewController viewWillDisappear:]
  -[_SFBookmarkInfoViewController viewWillLayoutSubviews]
  -[_SFBookmarkInfoViewController reloadData]
  -[_SFBookmarkInfoViewController canPerformAction:withSender:]
  -[_SFBookmarkInfoViewController viewDidLayoutSubviews]
  -[_SFBookmarkInfoViewController viewDidAppear:]
  -[_SFBookmarkInfoViewController tableView:numberOfRowsInSection:]
  -[_SFBookmarkInfoViewController tableView:cellForRowAtIndexPath:]
  -[_SFBookmarkInfoViewController numberOfSectionsInTableView:]
  -[_SFBookmarkInfoViewController tableView:titleForHeaderInSection:]
  -[_SFBookmarkInfoViewController tableView:willSelectRowAtIndexPath:]
  -[_SFBookmarkInfoViewController tableView:didSelectRowAtIndexPath:]
  -[_SFBookmarkInfoViewController didRotateFromInterfaceOrientation:]
  -[_SFBookmarkInfoViewController keyCommands]
  -[_SFBookmarkInfoViewController saveChanges]
  -[_SFBookmarkInfoViewController _titleCell]
  -[_SFBookmarkInfoViewController initWithBookmark:childBookmarks:inCollection:addingBookmark:toFavorites:willBeDisplayedModally:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewController:didFinishWithResult:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewControllerShouldUseTranslucentAppearance:]
  -[_SFBookmarkInfoViewController bookmarkInfoViewControllerCanSaveBookmarkChanges:]
  -[_SFBookmarkInfoViewController updateTranslucentAppearance]
  -[_SFBookmarkInfoViewController hasTranslucentAppearance]
  -[_SFBookmarkInfoViewController backgroundColorUsingTranslucentAppearance:]
  -[_SFBookmarkInfoViewController cancelPopoverKeyPressed]
  -[_SFBookmarkInfoViewController _saveButtonPressed]
  -[_SFBookmarkInfoViewController _bookmarksDidReload:]
  -[_SFBookmarkInfoViewController _canEditFieldsInCurrentViewController]
  -[_SFBookmarkInfoViewController _didBeginEditingTextField:]
  -[_SFBookmarkInfoViewController _didChangeEditingTextField:]
  -[_SFBookmarkInfoViewController _setFolderPickerExpanded:animated:]
  -[_SFBookmarkInfoViewController _removeActionsForTextFields]
  -[_SFBookmarkInfoViewController _addActionsForTextFields]
  -[_SFBookmarkInfoViewController _createCellsIfNeeded]
  -[_SFBookmarkInfoViewController updateBookmarkIcon]
  -[_SFBookmarkInfoViewController _reloadFolderInfoForced:]
  -[_SFBookmarkInfoViewController _updateCellValues]
  -[_SFBookmarkInfoViewController _centerForIconView]
  -[_SFBookmarkInfoViewController _cellInset]
  -[_SFBookmarkInfoViewController _updateSaveButton]
  -[_SFBookmarkInfoViewController canSaveChanges]
  -[_SFBookmarkInfoViewController initWithBookmark:inCollection:addingBookmark:]
  -[_SFBookmarkInfoViewController _isIndexPathForNewFolderRow:]
  -[_SFBookmarkInfoViewController _createNewFolder]
  -[_SFBookmarkInfoViewController _editField:]
  -[_SFBookmarkInfoViewController _numberOfExpandedFolderPickerRows]
  -[_SFBookmarkInfoViewController _cellForNewFolderRowWithTableView:]
  -[_SFBookmarkInfoViewController _cellForExpandedFolderAtIndex:withTableView:]
  -[_SFBookmarkInfoViewController _cellForParentBookmarkWithTableView:]
  -[_SFBookmarkInfoViewController _dequeueFolderPickerCellFromTableView:]
  -[_SFBookmarkInfoViewController _iconForViewCellGivenBookmark:]
  -[_SFBookmarkInfoViewController isEditingField]
  -[_SFBookmarkInfoViewController _returnWasPressedInTextField:]
  -[_SFBookmarkInfoViewController _valuesChanged]
  -[_SFBookmarkInfoViewController _updateIconViewFrame]
  -[_SFBookmarkInfoViewController _saveBookmarkKeyPressed]
  -[_SFBookmarkInfoViewController bookmarkTextEntryTableViewController:dismissedWithText:]
  -[_SFBookmarkInfoViewController bookmarkTextEntryTableViewControllerShouldUseTranslucentAppearance:]
  -[_SFBookmarkInfoViewController titleCellHasText]


_SFWebAppViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFWebAppRemoteViewControllerProtocol>
 @property  <_SFWebAppViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFWebAppViewController exportedInterface]
  +[_SFWebAppViewController serviceViewControllerInterface]
  +[_SFWebAppViewController requestViewControllerWithConnectionHandler:]

  // instance methods
  -[_SFWebAppViewController delegate]
  -[_SFWebAppViewController setDelegate:]
  -[_SFWebAppViewController .cxx_destruct]
  -[_SFWebAppViewController initWithNibName:bundle:]
  -[_SFWebAppViewController viewServiceDidTerminateWithError:]
  -[_SFWebAppViewController willDismissServiceViewController]
  -[_SFWebAppViewController didLoadWebView]
  -[_SFWebAppViewController didFinishInitialLoad:]
  -[_SFWebAppViewController fetchActivityViewControllerInfoForURL:title:]
  -[_SFWebAppViewController executeCustomActivityProxyID:]
  -[_SFWebAppViewController setRemoteSwipeGestureEnabled:]
  -[_SFWebAppViewController willOpenURLInHostApplication:]
  -[_SFWebAppViewController didDecideCookieSharingForURL:shouldCancel:]
  -[_SFWebAppViewController initialLoadDidRedirectToURL:]
  -[_SFWebAppViewController didChangeFullScreen:]
  -[_SFWebAppViewController didResolveRedirectionWithURL:appLink:]
  -[_SFWebAppViewController didDecideShouldShowLinkPreviews:]
  -[_SFWebAppViewController didChangeLoadingState:]
  -[_SFWebAppViewController loadWebAppWithIdentifier:]


_SFICSPreviewViewController : UINavigationController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <EKICSPreviewControllerDelegate>
 @property  @? beforeDismissHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFICSPreviewViewController .cxx_destruct]
  -[_SFICSPreviewViewController viewWillAppear:]
  -[_SFICSPreviewViewController viewWillDisappear:]
  -[_SFICSPreviewViewController viewDidLoad]
  -[_SFICSPreviewViewController popViewControllerAnimated:]
  -[_SFICSPreviewViewController navigationController:willShowViewController:animated:]
  -[_SFICSPreviewViewController icsPreviewControllerWantsDismissal:]
  -[_SFICSPreviewViewController _presentActivityViewController:]
  -[_SFICSPreviewViewController _done:]
  -[_SFICSPreviewViewController _updateNavigationBarItems]
  -[_SFICSPreviewViewController _ensureLeftBarButtonItemsIncludesActivityItem:]
  -[_SFICSPreviewViewController _ensureLeftBarButtonItemsIncludesDoneItem:]
  -[_SFICSPreviewViewController initWithFilePath:sourceURL:]
  -[_SFICSPreviewViewController beforeDismissHandler]
  -[_SFICSPreviewViewController setBeforeDismissHandler:]


SFNavigationBarToggleButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIImage *image
 @property  BOOL drawsLightGlyph
 @property  double resizableBackgroundCornerRadius
 @property  BOOL usesInsetFromBackground
 @property  UIColor *glyphTintColor
 @property  BOOL highlightsBackground

  // class methods
  +[SFNavigationBarToggleButton glyphSize]
  +[SFNavigationBarToggleButton formatMenuImage]
  +[SFNavigationBarToggleButton readerImage]

  // instance methods
  -[SFNavigationBarToggleButton .cxx_destruct]
  -[SFNavigationBarToggleButton image]
  -[SFNavigationBarToggleButton setImage:]
  -[SFNavigationBarToggleButton layoutSubviews]
  -[SFNavigationBarToggleButton setHighlighted:]
  -[SFNavigationBarToggleButton setSelected:]
  -[SFNavigationBarToggleButton setGlyphTintColor:]
  -[SFNavigationBarToggleButton glyphTintColor]
  -[SFNavigationBarToggleButton setUsesInsetFromBackground:]
  -[SFNavigationBarToggleButton setResizableBackgroundCornerRadius:]
  -[SFNavigationBarToggleButton initWithImage:forInputMode:]
  -[SFNavigationBarToggleButton setHighlightsBackground:]
  -[SFNavigationBarToggleButton _updateDefaultStateImageView]
  -[SFNavigationBarToggleButton _updateSelectedStateView]
  -[SFNavigationBarToggleButton _effectiveHighlightsBackground]
  -[SFNavigationBarToggleButton _updateImageViews]
  -[SFNavigationBarToggleButton drawsLightGlyph]
  -[SFNavigationBarToggleButton setDrawsLightGlyph:]
  -[SFNavigationBarToggleButton resizableBackgroundCornerRadius]
  -[SFNavigationBarToggleButton usesInsetFromBackground]
  -[SFNavigationBarToggleButton highlightsBackground]


_SFSiteMetadataManager : WBSSiteMetadataManager /System/Library/Frameworks/Foundation.framework/Foundation
 @property  _SFFaviconProvider *faviconProvider
 @property  _SFPasswordTouchIconCache *passwordTouchIconCache
 @property  _SFTouchIconCache *touchIconCache
 @property  WBSLeadImageCache *leadImageCache
 @property  _SFLinkPresentationIconCache *linkPresentationIconCache

  // class methods
  +[_SFSiteMetadataManager sharedSiteMetadataManager]
  +[_SFSiteMetadataManager setSharedSiteMetadataManager:]
  +[_SFSiteMetadataManager setSharedSiteMetadataManagerProvider:]

  // instance methods
  -[_SFSiteMetadataManager .cxx_destruct]
  -[_SFSiteMetadataManager touchIconCache]
  -[_SFSiteMetadataManager linkPresentationIconCache]
  -[_SFSiteMetadataManager initWithInjectedBundleURL:imageCacheDirectoryURL:cacheIsReadOnly:metadataType:]
  -[_SFSiteMetadataManager scheduleLowPriorityRequestForBookmarks:]
  -[_SFSiteMetadataManager faviconProvider]
  -[_SFSiteMetadataManager passwordTouchIconCache]
  -[_SFSiteMetadataManager leadImageCache]


SFPasswordTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  WBSSavedPassword *savedPassword
 @property  NSString *searchPattern

  // instance methods
  -[SFPasswordTableViewCell .cxx_destruct]
  -[SFPasswordTableViewCell setIcon:]
  -[SFPasswordTableViewCell safari_copyUserName]
  -[SFPasswordTableViewCell safari_copyPassword]
  -[SFPasswordTableViewCell savedPassword]
  -[SFPasswordTableViewCell showPlaceholderImageForDomain:backgroundColor:]
  -[SFPasswordTableViewCell searchPattern]
  -[SFPasswordTableViewCell setSavedPassword:searchPattern:]


_SFActivity : UIActivity /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <_SFActivityDelegate> *delegate

  // instance methods
  -[_SFActivity delegate]
  -[_SFActivity setDelegate:]
  -[_SFActivity .cxx_destruct]
  -[_SFActivity activityDidFinish:]


_SFRequestDesktopSitePreferenceManager : WBSPerSitePreferenceManager /System/Library/Frameworks/Foundation.framework/Foundation <WBSPerSitePreferenceManagerStorageDelegate, WBSPerSitePreferenceManagerDefaultsDelegate, WBSPerSitePreferenceBinaryToggleItemManager>
 @property  WBSPerSitePreference *requestDesktopSitePreference
 @property  BOOL clientPrefersMobileUserAgentByDefault
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  WBSPerSitePreferencesSQLiteStore *perSitePreferencesStore

  // instance methods
  -[_SFRequestDesktopSitePreferenceManager init]
  -[_SFRequestDesktopSitePreferenceManager dealloc]
  -[_SFRequestDesktopSitePreferenceManager .cxx_destruct]
  -[_SFRequestDesktopSitePreferenceManager preferences]
  -[_SFRequestDesktopSitePreferenceManager didUpdatePreference:toValue:forDomain:]
  -[_SFRequestDesktopSitePreferenceManager initWithPerSitePreferencesStore:quirksManager:]
  -[_SFRequestDesktopSitePreferenceManager requestDesktopSitePreference]
  -[_SFRequestDesktopSitePreferenceManager _requestDesktopSitePerSitePreferenceDidChange:]
  -[_SFRequestDesktopSitePreferenceManager _defaultPreferenceValue]
  -[_SFRequestDesktopSitePreferenceManager getValueOfPreference:forDomain:withTimeout:usingBlock:]
  -[_SFRequestDesktopSitePreferenceManager getDefaultPreferenceValueIfNotCustomizedForPreference:domain:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager getAllDomainsConfiguredForPreference:usingBlock:]
  -[_SFRequestDesktopSitePreferenceManager _notifyObserversOfPerSitePreferenceDomainValuesUpdate]
  -[_SFRequestDesktopSitePreferenceManager _notifyObserversOfPerSitePreferenceDefaultValueUpdate]
  -[_SFRequestDesktopSitePreferenceManager getDefaultPreferenceValueForPreference:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager getAllRequestDesktopSitePerSitePreferenceValues:]
  -[_SFRequestDesktopSitePreferenceManager onValueForPreference:]
  -[_SFRequestDesktopSitePreferenceManager perSitePreferencesStore]
  -[_SFRequestDesktopSitePreferenceManager preferencesStoreKeyForPreference:]
  -[_SFRequestDesktopSitePreferenceManager defaultPreferenceValueForPreferenceIfNotCustomized:]
  -[_SFRequestDesktopSitePreferenceManager offValueForPreference:]
  -[_SFRequestDesktopSitePreferenceManager addRequestDesktopSitePerSitePreferenceObserver:]
  -[_SFRequestDesktopSitePreferenceManager removeRequestDesktopSitePerSitePreferenceObserver:]
  -[_SFRequestDesktopSitePreferenceManager getRequestDesktopSitePreferenceForDomain:withTimeout:completionHandler:]
  -[_SFRequestDesktopSitePreferenceManager valuesForPreference:]
  -[_SFRequestDesktopSitePreferenceManager localizedStringForValue:inPreference:]
  -[_SFRequestDesktopSitePreferenceManager setClientPrefersMobileUserAgentByDefault:]
  -[_SFRequestDesktopSitePreferenceManager clientPrefersMobileUserAgentByDefault]


SFBlockBasedCAAnimationDelegate : NSObject /usr/lib/libc++.1.dylib <CAAnimationDelegate>
 @property  @? animationDidStopBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBlockBasedCAAnimationDelegate animationDelegateWithDidStopBlock:]

  // instance methods
  -[SFBlockBasedCAAnimationDelegate .cxx_destruct]
  -[SFBlockBasedCAAnimationDelegate animationDidStop:finished:]
  -[SFBlockBasedCAAnimationDelegate animationDidStopBlock]
  -[SFBlockBasedCAAnimationDelegate setAnimationDidStopBlock:]
  -[SFBlockBasedCAAnimationDelegate associateLifetimeWithAnimation:]


SFWebProcessPlugInPageExtensionController : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[SFWebProcessPlugInPageExtensionController dealloc]
  -[SFWebProcessPlugInPageExtensionController .cxx_destruct]
  -[SFWebProcessPlugInPageExtensionController prepareJavaScriptWorldForSharingExtension:javaScript:]
  -[SFWebProcessPlugInPageExtensionController finalizeJavaScriptForSharingExtension:arguments:]
  -[SFWebProcessPlugInPageExtensionController _setUpExtensionControllerInterface]
  -[SFWebProcessPlugInPageExtensionController clearExtensionScriptWorlds]
  -[SFWebProcessPlugInPageExtensionController _clearExtensionControllerInterface]
  -[SFWebProcessPlugInPageExtensionController evaluateJavaScriptForSharingExtension:extraArguments:completionHandler:]
  -[SFWebProcessPlugInPageExtensionController initWithBrowserContextController:]


_SFReaderCustomProtocols : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFReaderCustomProtocols readerUserInterfaceScriptForContext:]
  +[_SFReaderCustomProtocols registerReaderCustomProtocols]


_SFLinkPreviewHeader : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFLinkPreviewHeaderContentViewDelegate, _SFFluidProgressViewDelegate>
 @property  <_SFLinkPreviewHeaderDelegate> *delegate
 @property  NSString *domain
 @property  _SFFluidProgressView *progressView
 @property  BOOL linkPreviewEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFLinkPreviewHeader domain]
  -[_SFLinkPreviewHeader delegate]
  -[_SFLinkPreviewHeader setDelegate:]
  -[_SFLinkPreviewHeader .cxx_destruct]
  -[_SFLinkPreviewHeader setDomain:]
  -[_SFLinkPreviewHeader layoutSubviews]
  -[_SFLinkPreviewHeader defaultHeight]
  -[_SFLinkPreviewHeader initWithMinimumPreviewUI:]
  -[_SFLinkPreviewHeader setLinkPreviewEnabled:]
  -[_SFLinkPreviewHeader fluidProgressViewDidShowProgress:]
  -[_SFLinkPreviewHeader fluidProgressViewWillShowProgress:]
  -[_SFLinkPreviewHeader progressView]
  -[_SFLinkPreviewHeader linkPreviewHeaderContentView:didEnableLinkPreview:]
  -[_SFLinkPreviewHeader isLinkPreviewEnabled]
  -[_SFLinkPreviewHeader linkPreviewEnabled]
  -[_SFLinkPreviewHeader setProgressView:]


SFBrowserRemoteViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <MPVolumeDisplaying, SFRemoteViewControllerProtocol>
 @property  <SFBrowserRemoteViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindowScene *windowSceneForVolumeDisplay
 @property  BOOL onScreenForVolumeDisplay
 @property  NSString *volumeAudioCategory
 @property  BOOL onScreen

  // class methods
  +[SFBrowserRemoteViewController exportedInterface]
  +[SFBrowserRemoteViewController serviceViewControllerInterface]
  +[SFBrowserRemoteViewController requestViewControllerWithConnectionHandler:]

  // instance methods
  -[SFBrowserRemoteViewController delegate]
  -[SFBrowserRemoteViewController setDelegate:]
  -[SFBrowserRemoteViewController .cxx_destruct]
  -[SFBrowserRemoteViewController willMoveToParentViewController:]
  -[SFBrowserRemoteViewController didMoveToParentViewController:]
  -[SFBrowserRemoteViewController viewServiceDidTerminateWithError:]
  -[SFBrowserRemoteViewController windowSceneForVolumeDisplay]
  -[SFBrowserRemoteViewController isOnScreenForVolumeDisplay]
  -[SFBrowserRemoteViewController volumeAudioCategory]
  -[SFBrowserRemoteViewController willDismissServiceViewController]
  -[SFBrowserRemoteViewController didLoadWebView]
  -[SFBrowserRemoteViewController didFinishInitialLoad:]
  -[SFBrowserRemoteViewController fetchActivityViewControllerInfoForURL:title:]
  -[SFBrowserRemoteViewController executeCustomActivityProxyID:]
  -[SFBrowserRemoteViewController setRemoteSwipeGestureEnabled:]
  -[SFBrowserRemoteViewController willOpenURLInHostApplication:]
  -[SFBrowserRemoteViewController didDecideCookieSharingForURL:shouldCancel:]
  -[SFBrowserRemoteViewController initialLoadDidRedirectToURL:]
  -[SFBrowserRemoteViewController didChangeFullScreen:]
  -[SFBrowserRemoteViewController didResolveRedirectionWithURL:appLink:]
  -[SFBrowserRemoteViewController didDecideShouldShowLinkPreviews:]


_SFRequestDesktopSiteQuirksSnapshotTransformer : WBSConfigurationDataTransformer /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[_SFRequestDesktopSiteQuirksSnapshotTransformer objectFromData:]


SFQueueingServiceViewControllerProxy : NSProxy /usr/lib/libobjc.A.dylib
 @property  id target
 @property  <SFQueueingServiceViewControllerProxyDelegate> *delegate

  // instance methods
  -[SFQueueingServiceViewControllerProxy methodSignatureForSelector:]
  -[SFQueueingServiceViewControllerProxy forwardInvocation:]
  -[SFQueueingServiceViewControllerProxy forwardingTargetForSelector:]
  -[SFQueueingServiceViewControllerProxy delegate]
  -[SFQueueingServiceViewControllerProxy setDelegate:]
  -[SFQueueingServiceViewControllerProxy .cxx_destruct]
  -[SFQueueingServiceViewControllerProxy setTarget:]
  -[SFQueueingServiceViewControllerProxy target]
  -[SFQueueingServiceViewControllerProxy initWithProtocol:]


_SFAutomaticPasswordInputViewController : UIInputViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFAutomaticPasswordInputViewDelegate, SFAutomaticPasswordInputViewSizing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFAutomaticPasswordInputViewController inputViewControllerWithAutoFillContext:passwordRules:completion:]

  // instance methods
  -[_SFAutomaticPasswordInputViewController .cxx_destruct]
  -[_SFAutomaticPasswordInputViewController viewWillAppear:]
  -[_SFAutomaticPasswordInputViewController viewDidLoad]
  -[_SFAutomaticPasswordInputViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFAutomaticPasswordInputViewController viewDidDisappear:]
  -[_SFAutomaticPasswordInputViewController initWithPassword:keyboardType:]
  -[_SFAutomaticPasswordInputViewController _updateKeyboardHeight]
  -[_SFAutomaticPasswordInputViewController _inputViewControllerShouldDirectlyInsertPassword]
  -[_SFAutomaticPasswordInputViewController _dismissKeyboard:]
  -[_SFAutomaticPasswordInputViewController _updateKeyboardMetricsAndInterfaceOrientationIfNeeded]
  -[_SFAutomaticPasswordInputViewController _currentKeyboardSize]
  -[_SFAutomaticPasswordInputViewController _postButtonPressedNotificationForButton:]
  -[_SFAutomaticPasswordInputViewController inputViewControllerDidSelectUseStrongPassword:]
  -[_SFAutomaticPasswordInputViewController inputViewControllerDidSelectUseCustomPassword:]
  -[_SFAutomaticPasswordInputViewController intrinsicContentSizeForInputView:]


_SFAutomaticTabClosingUtilities : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFAutomaticTabClosingUtilities settingsTitleForAutomaticTabClosingInterval:]
  +[_SFAutomaticTabClosingUtilities userHasPreferenceForAutomaticTabClosingInterval]
  +[_SFAutomaticTabClosingUtilities automaticTabClosingInterval]
  +[_SFAutomaticTabClosingUtilities setAutomaticTabClosingInterval:]
  +[_SFAutomaticTabClosingUtilities resetAutomaticTabClosingIntervalPreference]
  +[_SFAutomaticTabClosingUtilities analyticsTitleForAutomaticTabClosingInterval:]
  +[_SFAutomaticTabClosingUtilities promptTitleForAutomaticTabClosingInterval:]
  +[_SFAutomaticTabClosingUtilities timeIntervalForAutomaticTabClosingInterval:]


SFDownloadsBarButtonItemView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFDeferrableUpdateView, CAStateControllerDelegate>
  // instance methods
  -[SFDownloadsBarButtonItemView setEnabled:]
  -[SFDownloadsBarButtonItemView .cxx_destruct]
  -[SFDownloadsBarButtonItemView setProgress:]
  -[SFDownloadsBarButtonItemView intrinsicContentSize]
  -[SFDownloadsBarButtonItemView layoutSubviews]
  -[SFDownloadsBarButtonItemView tintColorDidChange]
  -[SFDownloadsBarButtonItemView didMoveToWindow]
  -[SFDownloadsBarButtonItemView initWithBarButtonItem:]
  -[SFDownloadsBarButtonItemView _dynamicUserInterfaceTraitDidChange]
  -[SFDownloadsBarButtonItemView stateController:transitionDidStop:completed:]
  -[SFDownloadsBarButtonItemView pulse]
  -[SFDownloadsBarButtonItemView _buttonPressed]
  -[SFDownloadsBarButtonItemView updateContents]
  -[SFDownloadsBarButtonItemView deferrableUpdateViewState]


SFDownloadsBarButtonItem : UIBarButtonItem /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  double progress

  // instance methods
  -[SFDownloadsBarButtonItem setEnabled:]
  -[SFDownloadsBarButtonItem .cxx_destruct]
  -[SFDownloadsBarButtonItem progress]
  -[SFDownloadsBarButtonItem setProgress:]
  -[SFDownloadsBarButtonItem initWithTarget:action:]
  -[SFDownloadsBarButtonItem pulse]


_SFPerSitePreferencesPopoverViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFSwitchTableViewCellDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPerSitePreferencesPopoverViewController .cxx_destruct]
  -[_SFPerSitePreferencesPopoverViewController viewDidLayoutSubviews]
  -[_SFPerSitePreferencesPopoverViewController tableView:numberOfRowsInSection:]
  -[_SFPerSitePreferencesPopoverViewController tableView:cellForRowAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController numberOfSectionsInTableView:]
  -[_SFPerSitePreferencesPopoverViewController tableView:titleForHeaderInSection:]
  -[_SFPerSitePreferencesPopoverViewController tableView:didSelectRowAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController _done:]
  -[_SFPerSitePreferencesPopoverViewController switchTableViewCell:didChangeSwitchState:]
  -[_SFPerSitePreferencesPopoverViewController _initializePreferences]
  -[_SFPerSitePreferencesPopoverViewController _generalPageSection]
  -[_SFPerSitePreferencesPopoverViewController _securePageSection]
  -[_SFPerSitePreferencesPopoverViewController _indexPathForView:]
  -[_SFPerSitePreferencesPopoverViewController _preferenceRowIndexPathForCellAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController _preferenceAtIndexPath:]
  -[_SFPerSitePreferencesPopoverViewController _setPreferenceValue:forPreference:]
  -[_SFPerSitePreferencesPopoverViewController _didRetrieveValue:forPreference:]
  -[_SFPerSitePreferencesPopoverViewController initWithDomain:shouldShowSecurePreferences:perSitePreferencesVendor:]
  -[_SFPerSitePreferencesPopoverViewController reloadPreferences]
  -[_SFPerSitePreferencesPopoverViewController _setPreferenceValueIndex:forView:]


_SFPerSitePreferencesSection : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *title
 @property  NSArray *preferences

  // instance methods
  -[_SFPerSitePreferencesSection .cxx_destruct]
  -[_SFPerSitePreferencesSection title]
  -[_SFPerSitePreferencesSection preferences]
  -[_SFPerSitePreferencesSection initWithTitle:preferences:]


SFDialogAction : NSObject /usr/lib/libc++.1.dylib
 @property  long long activatingKeyboardShortcut
 @property  long long actionType
 @property  NSString *title

  // class methods
  +[SFDialogAction actionWithTitle:activatingKeyboardShortcut:type:]

  // instance methods
  -[SFDialogAction .cxx_destruct]
  -[SFDialogAction title]
  -[SFDialogAction actionType]
  -[SFDialogAction activatingKeyboardShortcut]
  -[SFDialogAction initWithTitle:activatingKeyboardShortcut:type:]


_SFDownloadCurrentPageActivity : UIApplicationExtensionActivity /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFDownloadCurrentPageActivity .cxx_destruct]
  -[_SFDownloadCurrentPageActivity initWithWebView:]
  -[_SFDownloadCurrentPageActivity canPerformWithActivityItems:]
  -[_SFDownloadCurrentPageActivity prepareWithActivityItems:]
  -[_SFDownloadCurrentPageActivity performActivity]
  -[_SFDownloadCurrentPageActivity _presentActivityOnViewController:animated:completion:]


SFCredentialDisplayData : NSObject /usr/lib/libc++.1.dylib
 @property  WBSCredentialMatch *match
 @property  NSString *detail
 @property  NSDate *creationDate

  // class methods
  +[SFCredentialDisplayData descriptionForPasswordWithUser:creationDate:]

  // instance methods
  -[SFCredentialDisplayData .cxx_destruct]
  -[SFCredentialDisplayData creationDate]
  -[SFCredentialDisplayData detail]
  -[SFCredentialDisplayData match]
  -[SFCredentialDisplayData initWithMatch:detail:creationDate:]


_SFWebProcessPlugInAppleConnectExtensionController : NSObject /usr/lib/libc++.1.dylib <_SFAppleConnectExtensionMessageReceiver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebProcessPlugInAppleConnectExtensionController invalidate]
  -[_SFWebProcessPlugInAppleConnectExtensionController .cxx_destruct]
  -[_SFWebProcessPlugInAppleConnectExtensionController dispatchMessageToContentScriptWithName:userInfo:]
  -[_SFWebProcessPlugInAppleConnectExtensionController initWithPageController:]
  -[_SFWebProcessPlugInAppleConnectExtensionController dispatchMessageFromContentScript:userInfo:]
  -[_SFWebProcessPlugInAppleConnectExtensionController _appleConnectExtensionContentScriptMessageReceiver]
  -[_SFWebProcessPlugInAppleConnectExtensionController injectAppleConnectBindingsForFrame:inScriptWorld:]


SFAppleConnectExtensionJSController : NSObject /usr/lib/libc++.1.dylib <SFAppleConnectExtensionJSControllerMethods>
  // instance methods
  -[SFAppleConnectExtensionJSController .cxx_destruct]
  -[SFAppleConnectExtensionJSController initWithAppleConnectExtensionController:]
  -[SFAppleConnectExtensionJSController dispatchMessage:userInfo:]


_SFDynamicBarAnimator : NSObject /usr/lib/libc++.1.dylib
 @property  long long state
 @property  long long targetState
 @property  double topBarHeight
 @property  double bottomBarOffset
 @property  BOOL sendingOutputsDidChange
 @property  BOOL trackingDrag
 @property  double minimumTopBarHeight
 @property  <_SFDynamicBarAnimatorDelegate> *delegate

  // instance methods
  -[_SFDynamicBarAnimator init]
  -[_SFDynamicBarAnimator dealloc]
  -[_SFDynamicBarAnimator delegate]
  -[_SFDynamicBarAnimator setDelegate:]
  -[_SFDynamicBarAnimator .cxx_destruct]
  -[_SFDynamicBarAnimator state]
  -[_SFDynamicBarAnimator _displayLinkFired:]
  -[_SFDynamicBarAnimator targetState]
  -[_SFDynamicBarAnimator isTrackingDrag]
  -[_SFDynamicBarAnimator _updateOutputs]
  -[_SFDynamicBarAnimator performBatchUpdates:]
  -[_SFDynamicBarAnimator bottomBarOffset]
  -[_SFDynamicBarAnimator topBarHeight]
  -[_SFDynamicBarAnimator canTransitionToState:]
  -[_SFDynamicBarAnimator attemptTransitionToState:animated:]
  -[_SFDynamicBarAnimator _constrainTopBarHeight:]
  -[_SFDynamicBarAnimator _updateDisplayLink]
  -[_SFDynamicBarAnimator _bottomBarOffsetForTopBarHeight:]
  -[_SFDynamicBarAnimator _setInSteadyState:]
  -[_SFDynamicBarAnimator _transitionToSteadyState]
  -[_SFDynamicBarAnimator _canTransitionToState:withMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator _constrainTopBarHeight:withMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator _moveBarsWithDelta:]
  -[_SFDynamicBarAnimator _endDraggingWithVelocity:]
  -[_SFDynamicBarAnimator beginDraggingWithOffset:]
  -[_SFDynamicBarAnimator updateDraggingWithOffset:]
  -[_SFDynamicBarAnimator endDraggingWithTargetOffset:velocity:]
  -[_SFDynamicBarAnimator endScrolling]
  -[_SFDynamicBarAnimator setTopBarHeight:forState:]
  -[_SFDynamicBarAnimator setBottomBarOffset:forState:]
  -[_SFDynamicBarAnimator setMinimumTopBarHeight:]
  -[_SFDynamicBarAnimator isSendingOutputsDidChange]
  -[_SFDynamicBarAnimator minimumTopBarHeight]


SFReaderAppearanceThemeSelector : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  long long selectedTheme
 @property  @? selectedThemeChangedBlock

  // class methods
  +[SFReaderAppearanceThemeSelector requiredHeight]
  +[SFReaderAppearanceThemeSelector themeSelectorWithBlock:]

  // instance methods
  -[SFReaderAppearanceThemeSelector .cxx_destruct]
  -[SFReaderAppearanceThemeSelector initWithFrame:]
  -[SFReaderAppearanceThemeSelector setSelectedThemeChangedBlock:]
  -[SFReaderAppearanceThemeSelector _createThemeButtons]
  -[SFReaderAppearanceThemeSelector _updateSelectedTheme]
  -[SFReaderAppearanceThemeSelector _buttonForTheme:]
  -[SFReaderAppearanceThemeSelector _imageForTheme:selected:]
  -[SFReaderAppearanceThemeSelector _themeButtonAction:]
  -[SFReaderAppearanceThemeSelector _themeButtonImageWithFillColor:strokeColor:selected:]
  -[SFReaderAppearanceThemeSelector _themeForButton:]
  -[SFReaderAppearanceThemeSelector selectedTheme]
  -[SFReaderAppearanceThemeSelector setSelectedTheme:]
  -[SFReaderAppearanceThemeSelector _changeSelectionForTheme:selected:]
  -[SFReaderAppearanceThemeSelector selectedThemeChangedBlock]


_SFDownloadActivityItemProvider : _SFActivityItemProvider <UIActivityItemApplicationExtensionSource>
 @property  _SFQuickLookDocument *quickLookDocument
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFDownloadActivityItemProvider .cxx_destruct]
  -[_SFDownloadActivityItemProvider item]
  -[_SFDownloadActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFDownloadActivityItemProvider activityViewControllerApplicationExtensionItem:]
  -[_SFDownloadActivityItemProvider pageTitle]
  -[_SFDownloadActivityItemProvider quickLookDocument]
  -[_SFDownloadActivityItemProvider initWithQuickLookDocument:URL:webView:]
  -[_SFDownloadActivityItemProvider setQuickLookDocument:]


_SFSettingsAlertItem : NSObject /usr/lib/libc++.1.dylib
 @property  UIView<SFSettingsAlertItemView> *view
 @property  id controller
 @property  @? viewConfigurationBlock
 @property  NSString *title
 @property  NSAttributedString *attributedTitle
 @property  NSString *textStyle
 @property  UIImage *icon
 @property  @? handler
 @property  UIView *customView
 @property  NSArray *subItems
 @property  _SFSettingsAlertItem *group
 @property  long long type
 @property  BOOL enabled

  // class methods
  +[_SFSettingsAlertItem buttonWithAttributedTitle:textStyle:icon:handler:]
  +[_SFSettingsAlertItem buttonWithTitle:textStyle:icon:handler:]
  +[_SFSettingsAlertItem stepperWithController:handler:]
  +[_SFSettingsAlertItem optionsGroupWithTitle:controller:]
  +[_SFSettingsAlertItem itemWithCustomView:]

  // instance methods
  -[_SFSettingsAlertItem handler]
  -[_SFSettingsAlertItem type]
  -[_SFSettingsAlertItem enabled]
  -[_SFSettingsAlertItem setEnabled:]
  -[_SFSettingsAlertItem .cxx_destruct]
  -[_SFSettingsAlertItem setHandler:]
  -[_SFSettingsAlertItem setAttributedTitle:]
  -[_SFSettingsAlertItem attributedTitle]
  -[_SFSettingsAlertItem title]
  -[_SFSettingsAlertItem setTitle:]
  -[_SFSettingsAlertItem initWithType:]
  -[_SFSettingsAlertItem group]
  -[_SFSettingsAlertItem view]
  -[_SFSettingsAlertItem setView:]
  -[_SFSettingsAlertItem setTextStyle:]
  -[_SFSettingsAlertItem textStyle]
  -[_SFSettingsAlertItem setCustomView:]
  -[_SFSettingsAlertItem customView]
  -[_SFSettingsAlertItem icon]
  -[_SFSettingsAlertItem setIcon:]
  -[_SFSettingsAlertItem setController:]
  -[_SFSettingsAlertItem controller]
  -[_SFSettingsAlertItem subItems]
  -[_SFSettingsAlertItem updateOptionsGroupDetailLabel]
  -[_SFSettingsAlertItem setViewConfigurationBlock:]
  -[_SFSettingsAlertItem setSubItems:]
  -[_SFSettingsAlertItem viewConfigurationBlock]


_SFSettingsAlertController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  _SFSettingsAlertContentController *_rootContentController
 @property  NSArray *items
 @property  _SFSettingsAlertItem *focusedItem

  // instance methods
  -[_SFSettingsAlertController .cxx_destruct]
  -[_SFSettingsAlertController items]
  -[_SFSettingsAlertController addItem:]
  -[_SFSettingsAlertController initWithNibName:bundle:]
  -[_SFSettingsAlertController viewDidLoad]
  -[_SFSettingsAlertController setPreferredContentSize:]
  -[_SFSettingsAlertController focusedItem]
  -[_SFSettingsAlertController _pushSubItemsForGroup:]
  -[_SFSettingsAlertController _rootContentController]
  -[_SFSettingsAlertController addDivider]
  -[_SFSettingsAlertController setFocusedItem:]


_SFSettingsAlertContentController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIGestureRecognizerDelegate>
 @property  NSArray *items
 @property  _SFSettingsAlertItem *focusedItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertContentController .cxx_destruct]
  -[_SFSettingsAlertContentController observeValueForKeyPath:ofObject:change:context:]
  -[_SFSettingsAlertContentController items]
  -[_SFSettingsAlertContentController addItem:]
  -[_SFSettingsAlertContentController loadView]
  -[_SFSettingsAlertContentController gestureRecognizerShouldBegin:]
  -[_SFSettingsAlertContentController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[_SFSettingsAlertContentController _alertController]
  -[_SFSettingsAlertContentController initWithNibName:bundle:]
  -[_SFSettingsAlertContentController viewWillAppear:]
  -[_SFSettingsAlertContentController _updatePreferredContentSize]
  -[_SFSettingsAlertContentController focusedItem]
  -[_SFSettingsAlertContentController addDivider]
  -[_SFSettingsAlertContentController setFocusedItem:]
  -[_SFSettingsAlertContentController _updateSeparators]
  -[_SFSettingsAlertContentController _addGroupSeparatorIfNeededBeforeItemAtIndex:]
  -[_SFSettingsAlertContentController _addViewForItem:]
  -[_SFSettingsAlertContentController _panRecognized:]
  -[_SFSettingsAlertContentController _updateFocusedItemConstraints]
  -[_SFSettingsAlertContentController _createViewForItem:]
  -[_SFSettingsAlertContentController _alignButtonImageView:]
  -[_SFSettingsAlertContentController _tappedItemView:]
  -[_SFSettingsAlertContentController _stepperValueChanged:]


_SFWebProcessPlugInReaderEnabledPageController : _SFWebProcessPlugInAutoFillPageController <SFReaderWebProcessControllerProtocol>
 @property  _SFReaderWebProcessPlugInPageController *readerPageController
 @property  NSDictionary *initalArticleScrollPositionAsDictionary
 @property  long long cachedReaderTopScrollOffset
 @property  NSDictionary *initialReaderConfiguration
 @property  BOOL viewingReadingListArchive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebProcessPlugInReaderEnabledPageController .cxx_destruct]
  -[_SFWebProcessPlugInReaderEnabledPageController .cxx_construct]
  -[_SFWebProcessPlugInReaderEnabledPageController setConfiguration:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didCommitLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didFinishDocumentLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didSameDocumentNavigation:forFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:didFinishLoadForFrame:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:globalObjectIsAvailableForFrame:inScriptWorld:]
  -[_SFWebProcessPlugInReaderEnabledPageController webProcessPlugInBrowserContextController:renderingProgressDidChange:]
  -[_SFWebProcessPlugInReaderEnabledPageController initWithPlugIn:contextController:]
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderPageController:]
  -[_SFWebProcessPlugInReaderEnabledPageController willDestroyBrowserContextController:]
  -[_SFWebProcessPlugInReaderEnabledPageController originalArticleFinder]
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderIsActive:]
  -[_SFWebProcessPlugInReaderEnabledPageController didDetermineReaderAvailability:dueToSameDocumentNavigation:]
  -[_SFWebProcessPlugInReaderEnabledPageController didSetReaderConfiguration:]
  -[_SFWebProcessPlugInReaderEnabledPageController prepareToTransitionToReader]
  -[_SFWebProcessPlugInReaderEnabledPageController didCreateReaderPageContextHandle:]
  -[_SFWebProcessPlugInReaderEnabledPageController loadNewReaderArticle]
  -[_SFWebProcessPlugInReaderEnabledPageController setReaderInitialTopScrollOffset:configuration:isViewingArchive:]
  -[_SFWebProcessPlugInReaderEnabledPageController setInitalArticleScrollPositionAsDictionary:]
  -[_SFWebProcessPlugInReaderEnabledPageController collectReadingListItemInfoWithBookmarkID:]
  -[_SFWebProcessPlugInReaderEnabledPageController collectReaderContentForMail]
  -[_SFWebProcessPlugInReaderEnabledPageController activateFont:]
  -[_SFWebProcessPlugInReaderEnabledPageController prepareReaderContentForPrinting]
  -[_SFWebProcessPlugInReaderEnabledPageController didFinishPresentationUpdateAfterTransitioningToReader]
  -[_SFWebProcessPlugInReaderEnabledPageController checkReaderAvailability]
  -[_SFWebProcessPlugInReaderEnabledPageController collectArticleContent]
  -[_SFWebProcessPlugInReaderEnabledPageController initialReaderConfiguration]
  -[_SFWebProcessPlugInReaderEnabledPageController isViewingReadingListArchive]
  -[_SFWebProcessPlugInReaderEnabledPageController readerContentDidBecomeReadyWithDetectedLanguage:]
  -[_SFWebProcessPlugInReaderEnabledPageController initalArticleScrollPositionAsDictionary]
  -[_SFWebProcessPlugInReaderEnabledPageController cachedReaderTopScrollOffset]
  -[_SFWebProcessPlugInReaderEnabledPageController setCachedReaderTopScrollOffset:]
  -[_SFWebProcessPlugInReaderEnabledPageController articleContentDidChange]
  -[_SFWebProcessPlugInReaderEnabledPageController readerTextWasExtracted:withMetadata:wasDeterminingAvailability:]
  -[_SFWebProcessPlugInReaderEnabledPageController _setUpReaderControllerInterface]
  -[_SFWebProcessPlugInReaderEnabledPageController _clearReaderControllerInterface]
  -[_SFWebProcessPlugInReaderEnabledPageController _setUpReaderActivityListenerProxy]
  -[_SFWebProcessPlugInReaderEnabledPageController _detectReaderAvailabilityAfterSameDocumentNavigation]
  -[_SFWebProcessPlugInReaderEnabledPageController _detectAvailabilityAfterDelay:loadEvent:]
  -[_SFWebProcessPlugInReaderEnabledPageController readerPageController]


_SFBrowserConfiguration : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL privateBrowsingEnabled
 @property  <UITraitEnvironment> *traitEnvironment
 @property  BOOL controlledByAutomation
 @property  BOOL allowsKeyboardCorrectionLearning
 @property  BOOL allowsRestoringEducationTabs
 @property  BOOL allowsSearchSuggestions
 @property  BOOL allowsSiteSpecificSearch
 @property  BOOL allowsSpeculativeLoading
 @property  BOOL allowsStreamlinedLogin
 @property  BOOL allowsUserActivityFeedback
 @property  BOOL usesPersistentDataStore
 @property  BOOL allowsSearchFeedback
 @property  BOOL allowsClosingLastTab
 @property  BOOL allowsPersistingTabState
 @property  BOOL allowsReopeningClosedTabs
 @property  unsigned long barTintStyle
 @property  BOOL usesDarkTheme

  // instance methods
  -[_SFBrowserConfiguration isEqual:]
  -[_SFBrowserConfiguration .cxx_destruct]
  -[_SFBrowserConfiguration usesDarkTheme]
  -[_SFBrowserConfiguration barTintStyle]
  -[_SFBrowserConfiguration initWithPrivateBrowsingEnabled:traitEnvironment:controlledByAutomation:]
  -[_SFBrowserConfiguration isPrivateBrowsingEnabled]
  -[_SFBrowserConfiguration isControlledByAutomation]
  -[_SFBrowserConfiguration allowsKeyboardCorrectionLearning]
  -[_SFBrowserConfiguration allowsSearchSuggestions]
  -[_SFBrowserConfiguration allowsSiteSpecificSearch]
  -[_SFBrowserConfiguration allowsSpeculativeLoading]
  -[_SFBrowserConfiguration allowsStreamlinedLogin]
  -[_SFBrowserConfiguration allowsUserActivityFeedback]
  -[_SFBrowserConfiguration usesPersistentDataStore]
  -[_SFBrowserConfiguration allowsRestoringEducationTabs]
  -[_SFBrowserConfiguration allowsSearchFeedback]
  -[_SFBrowserConfiguration allowsClosingLastTab]
  -[_SFBrowserConfiguration allowsPersistingTabState]
  -[_SFBrowserConfiguration allowsReopeningClosedTabs]
  -[_SFBrowserConfiguration traitEnvironment]


_SFFindOnPageInputBar : UISearchBar /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFFindOnPageInputBar intrinsicContentSize]
  -[_SFFindOnPageInputBar initWithFrame:]
  -[_SFFindOnPageInputBar contentCompressionResistancePriorityForAxis:]
  -[_SFFindOnPageInputBar contentHuggingPriorityForAxis:]


_SFFindOnPageToolbar : UIInputView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UISearchBarDelegate>
 @property  UITextField *inputField
 @property  NSString *searchText
 @property  BOOL usesNarrowLayout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFFindOnPageToolbar .cxx_destruct]
  -[_SFFindOnPageToolbar initWithDelegate:]
  -[_SFFindOnPageToolbar _done]
  -[_SFFindOnPageToolbar intrinsicContentSize]
  -[_SFFindOnPageToolbar layoutSubviews]
  -[_SFFindOnPageToolbar leftContentViewSize]
  -[_SFFindOnPageToolbar rightContentViewSize]
  -[_SFFindOnPageToolbar safeAreaInsetsDidChange]
  -[_SFFindOnPageToolbar searchBar:textDidChange:]
  -[_SFFindOnPageToolbar searchBarShouldBeginEditing:]
  -[_SFFindOnPageToolbar searchBarTextDidBeginEditing:]
  -[_SFFindOnPageToolbar searchBarTextDidEndEditing:]
  -[_SFFindOnPageToolbar searchBarSearchButtonClicked:]
  -[_SFFindOnPageToolbar searchText]
  -[_SFFindOnPageToolbar setSearchText:]
  -[_SFFindOnPageToolbar _keyboardWillChangeFrame:]
  -[_SFFindOnPageToolbar setUsesNarrowLayout:]
  -[_SFFindOnPageToolbar usesNarrowLayout]
  -[_SFFindOnPageToolbar updateUI]
  -[_SFFindOnPageToolbar inputField]
  -[_SFFindOnPageToolbar dismiss:]
  -[_SFFindOnPageToolbar previous:]
  -[_SFFindOnPageToolbar next:]
  -[_SFFindOnPageToolbar _accessoryViewHeight]
  -[_SFFindOnPageToolbar _toolbarFrame]
  -[_SFFindOnPageToolbar _initializeToolbarItems]
  -[_SFFindOnPageToolbar _toolbarVerticalInset]
  -[_SFFindOnPageToolbar _matchLabelText]
  -[_SFFindOnPageToolbar _updateEditing:]
  -[_SFFindOnPageToolbar _doUpdateSearchText]
  -[_SFFindOnPageToolbar _keyboardIsSplit]


SFBarButtonItemLongPressGestureRecognizer : UILongPressGestureRecognizer /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFBarButtonItemLongPressGestureRecognizer gestureRecognizerTarget:longPressAction:touchDownAction:attachedToBarButtonItem:]

  // instance methods
  -[SFBarButtonItemLongPressGestureRecognizer .cxx_destruct]
  -[SFBarButtonItemLongPressGestureRecognizer gestureRecognizerShouldBegin:]
  -[SFBarButtonItemLongPressGestureRecognizer touchesBegan:withEvent:]
  -[SFBarButtonItemLongPressGestureRecognizer _contentSizeCategoryDidChange:]
  -[SFBarButtonItemLongPressGestureRecognizer longPress:]
  -[SFBarButtonItemLongPressGestureRecognizer _updateMinimumPressDurationForContentSizeCategory:]
  -[SFBarButtonItemLongPressGestureRecognizer _invokeLongPressAction]


_SFLinkRedirectionResolver : NSObject /usr/lib/libc++.1.dylib <SFSafariViewControllerDelegateInternal>
 @property  SFSafariViewController *safariViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFLinkRedirectionResolver .cxx_destruct]
  -[_SFLinkRedirectionResolver safariViewController:didResolveRedirectionWithURL:appLink:]
  -[_SFLinkRedirectionResolver initWithURL:completionHandler:]
  -[_SFLinkRedirectionResolver safariViewController]


_SFPageFormatMenuController : NSObject /usr/lib/libc++.1.dylib
 @property  <_SFBrowserContentController> *browserContentController
 @property  UIViewController *viewController

  // instance methods
  -[_SFPageFormatMenuController .cxx_destruct]
  -[_SFPageFormatMenuController viewController]
  -[_SFPageFormatMenuController _readerAvailabilityDidChange:]
  -[_SFPageFormatMenuController _readerTextSizeAlertItem]
  -[_SFPageFormatMenuController _pageZoomAlertItem]
  -[_SFPageFormatMenuController _readerAlertItem]
  -[_SFPageFormatMenuController _readerFontAlertItem]
  -[_SFPageFormatMenuController _readerThemeAlertItem]
  -[_SFPageFormatMenuController _canHideToolbar]
  -[_SFPageFormatMenuController _fullScreenAlertItem]
  -[_SFPageFormatMenuController _desktopMobileToggleAlertItem]
  -[_SFPageFormatMenuController _canToggleContentBlockers]
  -[_SFPageFormatMenuController _contentBlockersToggleAlertItem]
  -[_SFPageFormatMenuController _sitePreferencesAlertItem]
  -[_SFPageFormatMenuController browserContentController]
  -[_SFPageFormatMenuController initWithBrowserContentController:]
  -[_SFPageFormatMenuController presentMenuFromViewController:withSourceInfo:]


_SFPageZoomStepperController : NSObject /usr/lib/libc++.1.dylib <_SFSettingsAlertStepperController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPageZoomStepperController dealloc]
  -[_SFPageZoomStepperController .cxx_destruct]
  -[_SFPageZoomStepperController resetValue:]
  -[_SFPageZoomStepperController prepareStepper:]
  -[_SFPageZoomStepperController incrementValue:]
  -[_SFPageZoomStepperController decrementValue:]
  -[_SFPageZoomStepperController initWithDocument:preferenceManager:]
  -[_SFPageZoomStepperController _pageZoomChanged:]
  -[_SFPageZoomStepperController _updateButtonsEnabledWithZoomFactor:]
  -[_SFPageZoomStepperController _updateButtonsEnabledOnMainQueueWithZoomFactor:]


_SFReaderTextSizeStepperController : NSObject /usr/lib/libc++.1.dylib <_SFSettingsAlertStepperController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReaderTextSizeStepperController .cxx_destruct]
  -[_SFReaderTextSizeStepperController initWithReaderContext:]
  -[_SFReaderTextSizeStepperController prepareStepper:]
  -[_SFReaderTextSizeStepperController incrementValue:]
  -[_SFReaderTextSizeStepperController decrementValue:]
  -[_SFReaderTextSizeStepperController _updateStepperControls:]


_SFSiteIconView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  WebBookmark *bookmark
 @property  UIImage *leadingImage
 @property  UIImage *image
 @property  <_SFSiteIconViewUpdateObserver> *updateObserver
 @property  BOOL shouldUseModernStyling
 @property  BOOL shouldShowDropShadow

  // instance methods
  -[_SFSiteIconView dealloc]
  -[_SFSiteIconView .cxx_destruct]
  -[_SFSiteIconView image]
  -[_SFSiteIconView bookmark]
  -[_SFSiteIconView setBookmark:]
  -[_SFSiteIconView _setState:]
  -[_SFSiteIconView initWithFrame:]
  -[_SFSiteIconView layoutSubviews]
  -[_SFSiteIconView setLeadingImage:]
  -[_SFSiteIconView leadingImage]
  -[_SFSiteIconView updateBookmarkData]
  -[_SFSiteIconView _cancelTouchIconRequest]
  -[_SFSiteIconView _effectiveBackgroundColor]
  -[_SFSiteIconView _updateMonogramLabelSizeAndFont]
  -[_SFSiteIconView _imageFrame]
  -[_SFSiteIconView _setSiteIcon:withBackgroundColor:]
  -[_SFSiteIconView _displayDefaultFolderIcon]
  -[_SFSiteIconView _updateSiteIconViewWithTouchIconResponse:]
  -[_SFSiteIconView _tintedFolderImage]
  -[_SFSiteIconView _setGlyph:withBackgroundColor:]
  -[_SFSiteIconView _setMonogramWithString:backgroundColor:]
  -[_SFSiteIconView _setImage:withBackgroundColor:]
  -[_SFSiteIconView _monogramFontSize]
  -[_SFSiteIconView _inferredIconSize]
  -[_SFSiteIconView setShouldUseModernStyling:]
  -[_SFSiteIconView setShouldShowDropShadow:]
  -[_SFSiteIconView updateObserver]
  -[_SFSiteIconView setUpdateObserver:]
  -[_SFSiteIconView shouldUseModernStyling]
  -[_SFSiteIconView shouldShowDropShadow]


_SFHairlineBorderView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIColor *borderColor

  // instance methods
  -[_SFHairlineBorderView .cxx_destruct]
  -[_SFHairlineBorderView setBorderColor:]
  -[_SFHairlineBorderView initWithFrame:]
  -[_SFHairlineBorderView layoutSubviews]
  -[_SFHairlineBorderView borderColor]


_SFNavigationBarItem : NSObject /usr/lib/libc++.1.dylib
 @property  _SFNavigationBar *navigationBar
 @property  NSString *text
 @property  NSString *textWhenExpanded
 @property  unsigned long startIndexOfTextInExpandedText
 @property  NSString *customPlaceholderText
 @property  BOOL showsLockIcon
 @property  BOOL showsSearchIndicator
 @property  BOOL showsStopReloadButtons
 @property  BOOL stopReloadButtonShowsStop
 @property  BOOL textHasEVCertificateTint
 @property  BOOL lockIconHasEVCertificateTint
 @property  BOOL showsPageFormatButton
 @property  BOOL readerButtonSelected
 @property  BOOL showsReaderButton
 @property  BOOL showsReaderAvailabilityText
 @property  BOOL overrideBarStyleForSecurityWarning
 @property  _SFFluidProgressView *progressView
 @property  unsigned long mediaCaptureDeviceIcon
 @property  BOOL showsNotSecureAnnotation
 @property  BOOL hasFocusedSensitiveFieldOnCurrentPage

  // instance methods
  -[_SFNavigationBarItem init]
  -[_SFNavigationBarItem .cxx_destruct]
  -[_SFNavigationBarItem text]
  -[_SFNavigationBarItem navigationBar]
  -[_SFNavigationBarItem _setNavigationBar:]
  -[_SFNavigationBarItem overrideBarStyleForSecurityWarning]
  -[_SFNavigationBarItem showsPageFormatButton]
  -[_SFNavigationBarItem mediaCaptureDeviceIcon]
  -[_SFNavigationBarItem stopReloadButtonShowsStop]
  -[_SFNavigationBarItem showsStopReloadButtons]
  -[_SFNavigationBarItem progressView]
  -[_SFNavigationBarItem showsNotSecureAnnotation]
  -[_SFNavigationBarItem textWhenExpanded]
  -[_SFNavigationBarItem startIndexOfTextInExpandedText]
  -[_SFNavigationBarItem showsLockIcon]
  -[_SFNavigationBarItem showsSearchIndicator]
  -[_SFNavigationBarItem lockIconHasEVCertificateTint]
  -[_SFNavigationBarItem showsReaderButton]
  -[_SFNavigationBarItem showsReaderAvailabilityText]
  -[_SFNavigationBarItem readerButtonSelected]
  -[_SFNavigationBarItem textHasEVCertificateTint]
  -[_SFNavigationBarItem hasFocusedSensitiveFieldOnCurrentPage]
  -[_SFNavigationBarItem customPlaceholderText]
  -[_SFNavigationBarItem setProgressView:]
  -[_SFNavigationBarItem setShowsReaderButton:showsAvailabilityText:]
  -[_SFNavigationBarItem setText:textWhenExpanded:startIndex:]
  -[_SFNavigationBarItem setShowsLockIcon:]
  -[_SFNavigationBarItem setShowsSearchIndicator:]
  -[_SFNavigationBarItem setShowsStopReloadButtons:]
  -[_SFNavigationBarItem setStopReloadButtonShowsStop:]
  -[_SFNavigationBarItem setReaderButtonSelected:]
  -[_SFNavigationBarItem setOverrideBarStyleForSecurityWarning:]
  -[_SFNavigationBarItem setShowsPageFormatButton:]
  -[_SFNavigationBarItem setTextHasEVCertificateTint:]
  -[_SFNavigationBarItem setLockIconHasEVCertificateTint:]
  -[_SFNavigationBarItem setShowsReaderButton:]
  -[_SFNavigationBarItem setMediaCaptureDeviceIcon:]
  -[_SFNavigationBarItem setShowsNotSecureAnnotation:hasFocusedSensitiveField:]
  -[_SFNavigationBarItem setCustomPlaceholderText:]
  -[_SFNavigationBarItem setShowsNotSecureAnnotation:]
  -[_SFNavigationBarItem setHasFocusedSensitiveFieldOnCurrentPage:]


SFInformationalNavigationBarItem : _SFNavigationBarItem
  // instance methods
  -[SFInformationalNavigationBarItem init]
  -[SFInformationalNavigationBarItem setShowsReaderButton:showsAvailabilityText:]
  -[SFInformationalNavigationBarItem setShowsStopReloadButtons:]
  -[SFInformationalNavigationBarItem setShowsReaderButton:]


_SFActivityItemCustomizationController : NSObject /usr/lib/libc++.1.dylib <UIActivityViewControllerObjectManipulationDelegate>
 @property  <_SFActivityItemCustomizationDelegate> *delegate
 @property  long long selectedContentType
 @property  BOOL canShareAsLink
 @property  BOOL canPrint
 @property  BOOL canShareAsDownload
 @property  BOOL canShareAsWebArchive
 @property  BOOL canShareAsStandaloneImage
 @property  BOOL canShareAsPDF
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFActivityItemCustomizationController init]
  -[_SFActivityItemCustomizationController delegate]
  -[_SFActivityItemCustomizationController setDelegate:]
  -[_SFActivityItemCustomizationController .cxx_destruct]
  -[_SFActivityItemCustomizationController _selectedIndex]
  -[_SFActivityItemCustomizationController _customizationGroupsForActivityViewController:]
  -[_SFActivityItemCustomizationController _allowedContentTypes]
  -[_SFActivityItemCustomizationController canShareAsLink]
  -[_SFActivityItemCustomizationController canShareAsStandaloneImage]
  -[_SFActivityItemCustomizationController canPrint]
  -[_SFActivityItemCustomizationController canShareAsPDF]
  -[_SFActivityItemCustomizationController canShareAsDownload]
  -[_SFActivityItemCustomizationController canShareAsWebArchive]
  -[_SFActivityItemCustomizationController selectedContentType]
  -[_SFActivityItemCustomizationController _contentTypeForAllowedContentAtIndex:]
  -[_SFActivityItemCustomizationController _customizationsDidChange]
  -[_SFActivityItemCustomizationController _ensureSelectedContentTypeIsAllowed]


_SFPrintActivityItemProvider : _SFActivityItemProvider <UIActivityItemsSource>
 @property  _SFPrintController *printController
 @property  BOOL hasReservedPrintInteractionController
 @property  BOOL canVendPDFRepresentation
 @property  NSItemProvider *pdfItemProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPrintActivityItemProvider .cxx_destruct]
  -[_SFPrintActivityItemProvider item]
  -[_SFPrintActivityItemProvider activityViewControllerLinkPresentationMetadata:]
  -[_SFPrintActivityItemProvider activityViewControllerPlaceholderItems:]
  -[_SFPrintActivityItemProvider activityViewController:itemsForActivityType:]
  -[_SFPrintActivityItemProvider setCanVendPDFRepresentation:]
  -[_SFPrintActivityItemProvider printController]
  -[_SFPrintActivityItemProvider pdfItemProvider]
  -[_SFPrintActivityItemProvider initWithPrintController:webView:]
  -[_SFPrintActivityItemProvider hasReservedPrintInteractionController]
  -[_SFPrintActivityItemProvider canVendPDFRepresentation]


_SFReaderExtractor : NSObject /usr/lib/libc++.1.dylib <WKNavigationDelegate, _SFReaderControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReaderExtractor init]
  -[_SFReaderExtractor .cxx_destruct]
  -[_SFReaderExtractor _invalidateTimers]
  -[_SFReaderExtractor _configuration]
  -[_SFReaderExtractor webView:decidePolicyForNavigationResponse:decisionHandler:]
  -[_SFReaderExtractor webView:didFailProvisionalNavigation:withError:]
  -[_SFReaderExtractor webView:didFinishNavigation:]
  -[_SFReaderExtractor webView:didFailNavigation:withError:]
  -[_SFReaderExtractor webViewWebContentProcessDidTerminate:]
  -[_SFReaderExtractor _processPool]
  -[_SFReaderExtractor readerController:didCollectArticleContent:]
  -[_SFReaderExtractor _setUpReaderController]
  -[_SFReaderExtractor _finishWithContent:error:]
  -[_SFReaderExtractor _scheduleLoadingTimeout]
  -[_SFReaderExtractor _scheduleReaderDataExtractionTimeout]
  -[_SFReaderExtractor getExtractedDataForURL:withCompletion:]
  -[_SFReaderExtractor getExtractedDataForURL:withData:withCompletion:]


_SFNavigationIntent : NSObject /usr/lib/libc++.1.dylib
 @property  long long policy
 @property  BOOL shouldRelateToSourceTab
 @property  unsigned long type
 @property  WebBookmark *bookmark
 @property  WBSCloudTab *cloudTab
 @property  _SFTabStateData *recentlyClosedTabStateData
 @property  NSURL *URL
 @property  NSString *text
 @property  NSArray *navigationIntents
 @property  BOOL opensInNewTab
 @property  BOOL opensInNewWindow
 @property  BOOL canUseExistingBlankTab
 @property  BOOL shouldOrderToForeground
 @property  NSDictionary *externalOptions
 @property  BOOL isUnifiedFieldNavigation
 @property  NSUUID *sourceTabUUID
 @property  NSUUID *sourceWindowUUID
 @property  _WKActivatedElementInfo *sourceElementInfo
 @property  NSString *privacyPreservingDescription

  // instance methods
  -[_SFNavigationIntent type]
  -[_SFNavigationIntent .cxx_destruct]
  -[_SFNavigationIntent URL]
  -[_SFNavigationIntent text]
  -[_SFNavigationIntent policy]
  -[_SFNavigationIntent bookmark]
  -[_SFNavigationIntent setPolicy:]
  -[_SFNavigationIntent shouldRelateToSourceTab]
  -[_SFNavigationIntent cloudTab]
  -[_SFNavigationIntent recentlyClosedTabStateData]
  -[_SFNavigationIntent navigationIntents]
  -[_SFNavigationIntent canUseExistingBlankTab]
  -[_SFNavigationIntent opensInNewWindow]
  -[_SFNavigationIntent opensInNewTab]
  -[_SFNavigationIntent privacyPreservingDescription]
  -[_SFNavigationIntent _initWithType:value:policy:]
  -[_SFNavigationIntent externalOptions]
  -[_SFNavigationIntent shouldOrderToForeground]
  -[_SFNavigationIntent isUnifiedFieldNavigation]
  -[_SFNavigationIntent setIsUnifiedFieldNavigation:]
  -[_SFNavigationIntent sourceTabUUID]
  -[_SFNavigationIntent setSourceTabUUID:]
  -[_SFNavigationIntent sourceWindowUUID]
  -[_SFNavigationIntent setSourceWindowUUID:]
  -[_SFNavigationIntent sourceElementInfo]
  -[_SFNavigationIntent setSourceElementInfo:]
  -[_SFNavigationIntent setShouldRelateToSourceTab:]


_SFSharablePasswordReceiver : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFSharablePasswordReceiver openPasswordManagerURL:]


SFVibrantCellSelectionBackgroundView : UIVisualEffectView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[SFVibrantCellSelectionBackgroundView initWithFrame:]
  -[SFVibrantCellSelectionBackgroundView traitCollectionDidChange:]
  -[SFVibrantCellSelectionBackgroundView _selectionEffect]


_SFApplicationManifestFetcher : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFApplicationManifestFetcher .cxx_destruct]
  -[_SFApplicationManifestFetcher initWithWebView:]
  -[_SFApplicationManifestFetcher getApplicationManifestWithCompletionHandler:]


_SFPasswordAuditingViewController : _SFPasswordTableViewController <SFPasswordDetailViewControllerDelegate>
 @property  <_SFPasswordAuditingViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFPasswordAuditingViewController delegate]
  -[_SFPasswordAuditingViewController setDelegate:]
  -[_SFPasswordAuditingViewController .cxx_destruct]
  -[_SFPasswordAuditingViewController viewWillAppear:]
  -[_SFPasswordAuditingViewController viewDidLoad]
  -[_SFPasswordAuditingViewController tableView:numberOfRowsInSection:]
  -[_SFPasswordAuditingViewController tableView:cellForRowAtIndexPath:]
  -[_SFPasswordAuditingViewController numberOfSectionsInTableView:]
  -[_SFPasswordAuditingViewController tableView:titleForHeaderInSection:]
  -[_SFPasswordAuditingViewController tableView:didSelectRowAtIndexPath:]
  -[_SFPasswordAuditingViewController initWithSiteMetadataManager:autoFillQuirksManager:]
  -[_SFPasswordAuditingViewController passwordDetailViewControllerDidUpdate:]
  -[_SFPasswordAuditingViewController _reloadSavedPasswords]


SFWebProcessPlugInCertificateWarningController : NSObject /usr/lib/libc++.1.dylib <WBSCertificateWarningPagePresenter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFWebProcessPlugInCertificateWarningController dealloc]
  -[SFWebProcessPlugInCertificateWarningController .cxx_destruct]
  -[SFWebProcessPlugInCertificateWarningController visitInsecureWebsite]
  -[SFWebProcessPlugInCertificateWarningController visitInsecureWebsiteWithTemporaryBypass]
  -[SFWebProcessPlugInCertificateWarningController showCertificateInformation]
  -[SFWebProcessPlugInCertificateWarningController openClockSettings]
  -[SFWebProcessPlugInCertificateWarningController prepareCertificateWarningPage:]
  -[SFWebProcessPlugInCertificateWarningController initWithPageController:]
  -[SFWebProcessPlugInCertificateWarningController injectCertificateWarningBindingsForFrame:inScriptWorld:]
  -[SFWebProcessPlugInCertificateWarningController _setUpCertificateWarningPagePresenterInterface]
  -[SFWebProcessPlugInCertificateWarningController _clearCertificateWarningPagePresenterInterface]
  -[SFWebProcessPlugInCertificateWarningController _certificateWarningPageHandlerProxy]
  -[SFWebProcessPlugInCertificateWarningController certificateWarningPageLoaded]
  -[SFWebProcessPlugInCertificateWarningController goBackSelected]


SFCertificateWarningJSController : NSObject /usr/lib/libc++.1.dylib <SFCertificateWarningJSControllerMethods>
  // instance methods
  -[SFCertificateWarningJSController .cxx_destruct]
  -[SFCertificateWarningJSController visitInsecureWebsite]
  -[SFCertificateWarningJSController visitInsecureWebsiteWithTemporaryBypass]
  -[SFCertificateWarningJSController showCertificateInformation]
  -[SFCertificateWarningJSController openClockSettings]
  -[SFCertificateWarningJSController initWithCertificateWarningController:]
  -[SFCertificateWarningJSController goBackSelected]
  -[SFCertificateWarningJSController pageLoaded]


_SFSettingsAlertItemBackgroundView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  long long mode

  // instance methods
  -[_SFSettingsAlertItemBackgroundView .cxx_destruct]
  -[_SFSettingsAlertItemBackgroundView setMode:]
  -[_SFSettingsAlertItemBackgroundView mode]
  -[_SFSettingsAlertItemBackgroundView initWithFrame:]
  -[_SFSettingsAlertItemBackgroundView updateConstraints]
  -[_SFSettingsAlertItemBackgroundView _highlightEffect]


_SFSettingsAlertControl : UIControl /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFSettingsAlertItemView>
 @property  _SFSettingsAlertItem *item
 @property  BOOL hidesSeparator
 @property  _SFSettingsAlertItemBackgroundView *backgroundView
 @property  long long defaultBackgroundMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long backgroundMode

  // instance methods
  -[_SFSettingsAlertControl .cxx_destruct]
  -[_SFSettingsAlertControl item]
  -[_SFSettingsAlertControl setItem:]
  -[_SFSettingsAlertControl initWithFrame:]
  -[_SFSettingsAlertControl backgroundView]
  -[_SFSettingsAlertControl setHighlighted:]
  -[_SFSettingsAlertControl _updateBackgroundView]
  -[_SFSettingsAlertControl hidesSeparator]
  -[_SFSettingsAlertControl setHidesSeparator:]
  -[_SFSettingsAlertControl backgroundMode]
  -[_SFSettingsAlertControl setDefaultBackgroundMode:]
  -[_SFSettingsAlertControl defaultBackgroundMode]


_SFSettingsAlertButton : _SFSettingsAlertControl <_SFSettingsAlertOptionsGroupItemConfiguration>
 @property  UILabel *textLabel
 @property  NSString *text
 @property  NSAttributedString *attributedText
 @property  NSString *textStyle
 @property  UIImage *image
 @property  UIImageView *imageView
 @property  UIView *accessoryView
 @property  UIView *trailingView
 @property  NSArray *componentsArrangement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL enabled

  // instance methods
  -[_SFSettingsAlertButton setEnabled:]
  -[_SFSettingsAlertButton .cxx_destruct]
  -[_SFSettingsAlertButton image]
  -[_SFSettingsAlertButton setImage:]
  -[_SFSettingsAlertButton text]
  -[_SFSettingsAlertButton setText:]
  -[_SFSettingsAlertButton setTextStyle:]
  -[_SFSettingsAlertButton textStyle]
  -[_SFSettingsAlertButton initWithFrame:]
  -[_SFSettingsAlertButton traitCollectionDidChange:]
  -[_SFSettingsAlertButton layoutSubviews]
  -[_SFSettingsAlertButton imageView]
  -[_SFSettingsAlertButton updateConstraints]
  -[_SFSettingsAlertButton _updateTintColor]
  -[_SFSettingsAlertButton setAttributedText:]
  -[_SFSettingsAlertButton attributedText]
  -[_SFSettingsAlertButton hitTest:withEvent:]
  -[_SFSettingsAlertButton setAccessoryView:]
  -[_SFSettingsAlertButton accessoryView]
  -[_SFSettingsAlertButton textLabel]
  -[_SFSettingsAlertButton endTrackingWithTouch:withEvent:]
  -[_SFSettingsAlertButton trailingView]
  -[_SFSettingsAlertButton _arrangedSubviews]
  -[_SFSettingsAlertButton setComponentsArrangement:]
  -[_SFSettingsAlertButton componentsArrangement]


_SFSettingsAlertStepper : _SFSettingsAlertControl <_SFSettingsAlertStepperConfiguration>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSettingsAlertStepper .cxx_destruct]
  -[_SFSettingsAlertStepper value]
  -[_SFSettingsAlertStepper initWithFrame:]
  -[_SFSettingsAlertStepper hitTest:withEvent:]
  -[_SFSettingsAlertStepper initUsingResetButton:]
  -[_SFSettingsAlertStepper setImage:forButton:]
  -[_SFSettingsAlertStepper setText:forButton:]
  -[_SFSettingsAlertStepper setEnabled:forButton:]
  -[_SFSettingsAlertStepper _decrementTapped:]
  -[_SFSettingsAlertStepper _incrementTapped:]
  -[_SFSettingsAlertStepper _resetTapped:]
  -[_SFSettingsAlertStepper _button:]


_SFSettingsAlertCustomViewContainer : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFSettingsAlertItemView>
 @property  UIView *contentView
 @property  _SFSettingsAlertItem *item
 @property  BOOL hidesSeparator
 @property  long long defaultBackgroundMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long backgroundMode

  // instance methods
  -[_SFSettingsAlertCustomViewContainer .cxx_destruct]
  -[_SFSettingsAlertCustomViewContainer item]
  -[_SFSettingsAlertCustomViewContainer setItem:]
  -[_SFSettingsAlertCustomViewContainer contentView]
  -[_SFSettingsAlertCustomViewContainer initWithContentView:]
  -[_SFSettingsAlertCustomViewContainer hidesSeparator]
  -[_SFSettingsAlertCustomViewContainer setHidesSeparator:]
  -[_SFSettingsAlertCustomViewContainer backgroundMode]
  -[_SFSettingsAlertCustomViewContainer setDefaultBackgroundMode:]
  -[_SFSettingsAlertCustomViewContainer defaultBackgroundMode]


_SFNavigationIntentBuilder : NSObject /usr/lib/libc++.1.dylib
 @property  long long modifierFlags
 @property  long long navigationType
 @property  long long preferredTabOrder
 @property  BOOL prefersOpenInNewTab
 @property  BOOL prefersOpenInNewWindow
 @property  BOOL prefersRelationToSourceTab

  // class methods
  +[_SFNavigationIntentBuilder builder]
  +[_SFNavigationIntentBuilder canCreateNavigationIntentForDropSession:]
  +[_SFNavigationIntentBuilder builderWithModifierFlags:]
  +[_SFNavigationIntentBuilder registerBookmarkCollectionFactory:]

  // instance methods
  -[_SFNavigationIntentBuilder modifierFlags]
  -[_SFNavigationIntentBuilder navigationType]
  -[_SFNavigationIntentBuilder setNavigationType:]
  -[_SFNavigationIntentBuilder setPrefersOpenInNewTab:]
  -[_SFNavigationIntentBuilder navigationIntentWithBookmark:]
  -[_SFNavigationIntentBuilder navigationIntentWithText:]
  -[_SFNavigationIntentBuilder buildNavigationIntentForDropSession:completionHandler:]
  -[_SFNavigationIntentBuilder _initWithModifierFlags:]
  -[_SFNavigationIntentBuilder _navigationPolicy]
  -[_SFNavigationIntentBuilder _initializeNavigationIntentWithType:value:]
  -[_SFNavigationIntentBuilder navigationIntentWithMultipleIntents:]
  -[_SFNavigationIntentBuilder _navigationIntentWithItems:]
  -[_SFNavigationIntentBuilder _navigationIntentForMKMapItem:]
  -[_SFNavigationIntentBuilder navigationIntentWithRecentlyClosedTabStateData:]
  -[_SFNavigationIntentBuilder _navigationPolicyForStandardEvent]
  -[_SFNavigationIntentBuilder _navigationPolicyForNavigationEvent]
  -[_SFNavigationIntentBuilder _hasModifierFlag:]
  -[_SFNavigationIntentBuilder _modifiersEqualToModifierIgnoringCapsLock:]
  -[_SFNavigationIntentBuilder _navigationPolicyForCreatingNewTabOrWindow]
  -[_SFNavigationIntentBuilder _shouldOrderToForeground]
  -[_SFNavigationIntentBuilder navigationIntentWithCloudTab:]
  -[_SFNavigationIntentBuilder navigationIntentWithHistoryURL:]
  -[_SFNavigationIntentBuilder navigationIntentWithURL:]
  -[_SFNavigationIntentBuilder navigationIntentWithOpenURLContexts:]
  -[_SFNavigationIntentBuilder buildNavigationIntentForItemProviders:completionHandler:]
  -[_SFNavigationIntentBuilder preferredTabOrder]
  -[_SFNavigationIntentBuilder setPreferredTabOrder:]
  -[_SFNavigationIntentBuilder prefersOpenInNewTab]
  -[_SFNavigationIntentBuilder prefersOpenInNewWindow]
  -[_SFNavigationIntentBuilder setPrefersOpenInNewWindow:]
  -[_SFNavigationIntentBuilder prefersRelationToSourceTab]
  -[_SFNavigationIntentBuilder setPrefersRelationToSourceTab:]


SFSafariView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[SFSafariView setTintColor:]
  -[SFSafariView didMoveToWindow]


SFSafariViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFBrowserRemoteViewControllerDelegate, SFInteractiveDismissControllerDelegate, SFQueueingServiceViewControllerProxyDelegate, _SFLinkPreviewHeaderDelegate>
 @property  BOOL _showingLinkPreview
 @property  BOOL _showingLinkPreviewWithMinimalUI
 @property  NSArray *_previewActions
 @property  _WKActivatedElementInfo *_activatedElementInfo
 @property  SFQueueingServiceViewControllerProxy<SFServiceViewControllerProtocol> *serviceProxy
 @property  NSURL *initialURL
 @property  BOOL defersAddingRemoteViewController
 @property  <SFSafariViewControllerDelegate> *delegate
 @property  SFSafariViewControllerConfiguration *configuration
 @property  UIColor *preferredBarTintColor
 @property  UIColor *preferredControlTintColor
 @property  long long dismissButtonStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSafariViewController dealloc]
  -[SFSafariViewController initWithCoder:]
  -[SFSafariViewController initWithURL:]
  -[SFSafariViewController delegate]
  -[SFSafariViewController setDelegate:]
  -[SFSafariViewController .cxx_destruct]
  -[SFSafariViewController configuration]
  -[SFSafariViewController loadView]
  -[SFSafariViewController initWithNibName:bundle:]
  -[SFSafariViewController viewWillAppear:]
  -[SFSafariViewController viewWillDisappear:]
  -[SFSafariViewController viewWillLayoutSubviews]
  -[SFSafariViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SFSafariViewController setTransitioningDelegate:]
  -[SFSafariViewController setModalPresentationStyle:]
  -[SFSafariViewController childViewControllerForStatusBarStyle]
  -[SFSafariViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SFSafariViewController _allowsUserInteractionWhenPreviewedInContextMenu]
  -[SFSafariViewController previewActionItems]
  -[SFSafariViewController _boundingPathMayHaveChangedForView:relativeToBoundsOriginOnly:]
  -[SFSafariViewController serviceProxy]
  -[SFSafariViewController _activatedElementInfo]
  -[SFSafariViewController initialURL]
  -[SFSafariViewController _addRemoteView]
  -[SFSafariViewController _setActivatedElementInfo:]
  -[SFSafariViewController initWithURL:configuration:]
  -[SFSafariViewController setDismissButtonStyle:]
  -[SFSafariViewController setDefersAddingRemoteViewController:]
  -[SFSafariViewController defersAddingRemoteViewController]
  -[SFSafariViewController _addRemoteViewControllerIfNeeded]
  -[SFSafariViewController setPreferredControlTintColor:]
  -[SFSafariViewController remoteViewControllerWillDismiss:]
  -[SFSafariViewController remoteViewController:viewServiceDidTerminateWithError:]
  -[SFSafariViewController preferredBarTintColor]
  -[SFSafariViewController linkPreviewHeader:didEnableLinkPreview:]
  -[SFSafariViewController dismissButtonStyle]
  -[SFSafariViewController _restartServiceViewController]
  -[SFSafariViewController remoteViewController:hostApplicationOpenURL:]
  -[SFSafariViewController setPreferredBarTintColor:]
  -[SFSafariViewController _connectToService]
  -[SFSafariViewController serviceProxyWillQueueInvocation:]
  -[SFSafariViewController remoteViewControllerDidLoadWebView:]
  -[SFSafariViewController remoteViewController:setSwipeGestureEnabled:]
  -[SFSafariViewController remoteViewController:didFinishInitialLoad:]
  -[SFSafariViewController remoteViewController:fetchActivityViewControllerInfoForURL:title:]
  -[SFSafariViewController remoteViewController:executeCustomActivityProxyID:]
  -[SFSafariViewController remoteViewController:initialLoadDidRedirectToURL:]
  -[SFSafariViewController remoteViewController:didDecideShouldShowLinkPreviews:]
  -[SFSafariViewController _setUpWithURL:configuration:]
  -[SFSafariViewController _showingLinkPreview]
  -[SFSafariViewController _showingLinkPreviewWithMinimalUI]
  -[SFSafariViewController _updateScrollViewIndicatorInsets]
  -[SFSafariViewController _forwardNotificationToViewService:]
  -[SFSafariViewController _setShowingLinkPreview:]
  -[SFSafariViewController _updatePreviewViewControllerWithLinkPreviewEnabled:animated:]
  -[SFSafariViewController _removeRemoteViewController]
  -[SFSafariViewController _fetchCustomActivitiesForURL:title:]
  -[SFSafariViewController _fetchExcludedActivityTypesForURL:title:]
  -[SFSafariViewController _setEdgeSwipeDismissalEnabled:]
  -[SFSafariViewController interactiveDismissControllerDidBegin:]
  -[SFSafariViewController interactiveDismissControllerDidEnd:]
  -[SFSafariViewController interactiveDismissControllerDidCancel:]
  -[SFSafariViewController initWithURL:entersReaderIfAvailable:]
  -[SFSafariViewController preferredControlTintColor]
  -[SFSafariViewController _previewActions]
  -[SFSafariViewController _updateLinkPreviewHitTestView]
  -[SFSafariViewController _defaultPreviewActionItems]
  -[SFSafariViewController _setShowingLinkPreviewWithMinimalUI:]
  -[SFSafariViewController _setPreviewActions:]


_SFRequestDesktopSiteQuirksSnapshot : NSObject /usr/lib/libc++.1.dylib <WBSRemotePlistSnapshot>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFRequestDesktopSiteQuirksSnapshot .cxx_destruct]
  -[_SFRequestDesktopSiteQuirksSnapshot initWithPlistData:error:]
  -[_SFRequestDesktopSiteQuirksSnapshot plistDataWithFormat:]
  -[_SFRequestDesktopSiteQuirksSnapshot requestDesktopSiteSettingForDomain:]
  -[_SFRequestDesktopSiteQuirksSnapshot allRequestDesktopSiteQuirks]


SFProcessDictionary : NSObject /usr/lib/libc++.1.dylib
 @property  unsigned long cacheCapacity

  // instance methods
  -[SFProcessDictionary init]
  -[SFProcessDictionary dealloc]
  -[SFProcessDictionary .cxx_destruct]
  -[SFProcessDictionary decrementReferenceForPID:]
  -[SFProcessDictionary incrementReferenceForPID:bundleIdentifier:valueCreationBlock:]
  -[SFProcessDictionary initWithCacheCapacity:]
  -[SFProcessDictionary _handleApplicationStateUpdate:]
  -[SFProcessDictionary _handleProcessTermination:]
  -[SFProcessDictionary _removeValueForPID:]
  -[SFProcessDictionary _updateInterestedApplications]
  -[SFProcessDictionary _removeUnreferencedObjectsIfNeeded]
  -[SFProcessDictionary cacheCapacity]


_SFNavigationUtilitiesManager : NSObject /usr/lib/libc++.1.dylib
 @property  _SFReloadOptionsController *reloadOptionsController
 @property  unsigned long persona

  // instance methods
  -[_SFNavigationUtilitiesManager .cxx_destruct]
  -[_SFNavigationUtilitiesManager websitePoliciesForURL:isForMainFrameNavigation:navigationType:completionHandler:]
  -[_SFNavigationUtilitiesManager reloadOptionsController]
  -[_SFNavigationUtilitiesManager _applyAutoplayQuirksToWebsitePolicies:desktopSiteSetting:]
  -[_SFNavigationUtilitiesManager _shouldOverrideUserAgentSettingForFacebookAuthURL:]
  -[_SFNavigationUtilitiesManager initWithPerSitePreferencesVendor:]
  -[_SFNavigationUtilitiesManager setReloadOptionsController:]
  -[_SFNavigationUtilitiesManager persona]
  -[_SFNavigationUtilitiesManager setPersona:]


_SFDialog : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *additionalCancellationExemptions
 @property  BOOL canceledOnApplicationBackground
 @property  BOOL canceledOnProvisionalNavigation
 @property  BOOL canceledOnCommittedNavigation
 @property  BOOL completionHandlerBlocksWebProcess
 @property  long long presentationStyle
 @property  BOOL shouldIgnoreGlobalModalUIDisplayPolicy

  // class methods
  +[_SFDialog telephonyNavigationDialogWithCompletionHandler:]
  +[_SFDialog dialogWithWebUIAlert:completionHandler:]
  +[_SFDialog formSubmissionDialogWithMessage:completionHandler:]
  +[_SFDialog genericErrorDialogWithTitle:message:applicationModal:]
  +[_SFDialog pageLoadErrorWithMessage:]
  +[_SFDialog permanentlyAcceptCertificateDialogWithAcceptanceHandler:]
  +[_SFDialog continuePrintingDialogWithTitle:message:applicationModal:completionHandler:]
  +[_SFDialog printBlockedDialogWithCompletionHandler:]
  +[_SFDialog userMediaPermissionDialogWithHost:devices:completionHandler:]
  +[_SFDialog javaScriptAlertDialogWithMessage:completionHandler:]
  +[_SFDialog javaScriptConfirmDialogWithMessage:completionHandler:]
  +[_SFDialog javaScriptPromptDialogWithMessage:defaultText:completionHandler:]
  +[_SFDialog requestStorageAccessDialogForDomain:underCurrentDomain:completionHandler:]
  +[_SFDialog _dialogWithTitle:message:acceptAction:secondaryAction:cancelAction:applicationModal:completionHandler:]
  +[_SFDialog _dialogWithTitle:message:primaryAction:secondaryAction:applicationModal:completionHandler:]
  +[_SFDialog authenticationDialogWithAuthenticationChallenge:committedURL:completionHandler:]
  +[_SFDialog mailNavigationDialogWithCompletionHandler:]
  +[_SFDialog noFeedAppDialogWithCompletionHandler:]
  +[_SFDialog redirectDialogWithMessage:completionHandler:]
  +[_SFDialog downloadBlockedDialogWithFileType:initiatingURL:completionHandler:]
  +[_SFDialog blockedPopupWindowDialogWithCompletionHandler:]
  +[_SFDialog increaseDatabaseQuotaDialogForOrigin:newQuota:completionHandler:]
  +[_SFDialog increaseApplicationCacheQuotaDialogForOrigin:newQuota:completionHandler:]
  +[_SFDialog allowDownloadDialogWithDownload:initiatingURL:allowViewAction:completionHandler:]

  // instance methods
  -[_SFDialog presentationStyle]
  -[_SFDialog completeWithResponse:]
  -[_SFDialog completionHandlerBlocksWebProcess]
  -[_SFDialog didCompleteWithResponse:]
  -[_SFDialog canceledOnProvisionalNavigation]
  -[_SFDialog canceledOnCommittedNavigation]
  -[_SFDialog additionalCancellationExemptions]
  -[_SFDialog canceledOnApplicationBackground]
  -[_SFDialog newDialogViewRepresentation]
  -[_SFDialog newViewControllerRepresentationWithCompletionHandler:]
  -[_SFDialog shouldIgnoreGlobalModalUIDisplayPolicy]


SFBasicDialog : _SFDialog
 @property  @? completionHandler
 @property  NSString *title
 @property  NSString *message
 @property  NSString *defaultText
 @property  NSString *textPlaceholder
 @property  NSString *defaultPassword
 @property  NSString *passwordPlaceholder
 @property  NSArray *actions
 @property  BOOL alertControllerPresentsAsActionSheet
 @property  BOOL shouldHideWebContent
 @property  BOOL canceledOnProvisionalNavigation
 @property  BOOL canceledOnCommittedNavigation
 @property  BOOL canceledOnApplicationBackground
 @property  NSArray *additionalCancellationExemptions
 @property  BOOL completionHandlerBlocksWebProcess
 @property  long long presentationStyle

  // instance methods
  -[SFBasicDialog init]
  -[SFBasicDialog .cxx_destruct]
  -[SFBasicDialog title]
  -[SFBasicDialog setTitle:]
  -[SFBasicDialog message]
  -[SFBasicDialog setMessage:]
  -[SFBasicDialog completionHandler]
  -[SFBasicDialog setCompletionHandler:]
  -[SFBasicDialog actions]
  -[SFBasicDialog setPresentationStyle:]
  -[SFBasicDialog presentationStyle]
  -[SFBasicDialog setActions:]
  -[SFBasicDialog completionHandlerBlocksWebProcess]
  -[SFBasicDialog didCompleteWithResponse:]
  -[SFBasicDialog setTextPlaceholder:]
  -[SFBasicDialog setPasswordPlaceholder:]
  -[SFBasicDialog setShouldHideWebContent:]
  -[SFBasicDialog setCompletionHandlerBlocksWebProcess:]
  -[SFBasicDialog setDefaultText:]
  -[SFBasicDialog setCanceledOnProvisionalNavigation:]
  -[SFBasicDialog setAdditionalCancellationExemptions:]
  -[SFBasicDialog setAlertControllerPresentsAsActionSheet:]
  -[SFBasicDialog setCanceledOnApplicationBackground:]
  -[SFBasicDialog canceledOnProvisionalNavigation]
  -[SFBasicDialog canceledOnCommittedNavigation]
  -[SFBasicDialog additionalCancellationExemptions]
  -[SFBasicDialog canceledOnApplicationBackground]
  -[SFBasicDialog newDialogViewRepresentation]
  -[SFBasicDialog newViewControllerRepresentationWithCompletionHandler:]
  -[SFBasicDialog defaultText]
  -[SFBasicDialog textPlaceholder]
  -[SFBasicDialog defaultPassword]
  -[SFBasicDialog passwordPlaceholder]
  -[SFBasicDialog shouldHideWebContent]
  -[SFBasicDialog setCanceledOnCommittedNavigation:]
  -[SFBasicDialog setDefaultPassword:]
  -[SFBasicDialog alertControllerPresentsAsActionSheet]


SFWebUIDialog : _SFDialog
 @property  WebUIAlert *alert

  // instance methods
  -[SFWebUIDialog .cxx_destruct]
  -[SFWebUIDialog presentationStyle]
  -[SFWebUIDialog alert]
  -[SFWebUIDialog didCompleteWithResponse:]
  -[SFWebUIDialog initWithAlert:completionHandler:]
  -[SFWebUIDialog newViewControllerRepresentationWithCompletionHandler:]
  -[SFWebUIDialog shouldIgnoreGlobalModalUIDisplayPolicy]


SFBrowserStateSQLiteStore : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *browserWindows
 @property  NSArray *recentlyClosedWindows

  // instance methods
  -[SFBrowserStateSQLiteStore init]
  -[SFBrowserStateSQLiteStore dealloc]
  -[SFBrowserStateSQLiteStore .cxx_destruct]
  -[SFBrowserStateSQLiteStore _schemaVersion]
  -[SFBrowserStateSQLiteStore initWithDatabaseURL:]
  -[SFBrowserStateSQLiteStore closeDatabase]
  -[SFBrowserStateSQLiteStore _closeDatabase]
  -[SFBrowserStateSQLiteStore _openDatabaseAndCheckIntegrity:]
  -[SFBrowserStateSQLiteStore _isDatabaseOpen]
  -[SFBrowserStateSQLiteStore _checkDatabaseIntegrity]
  -[SFBrowserStateSQLiteStore _migrateToCurrentSchemaVersionIfNeeded]
  -[SFBrowserStateSQLiteStore _createFreshDatabaseSchema]
  -[SFBrowserStateSQLiteStore _migrateFromLegacyPlistIfNeeded]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion:]
  -[SFBrowserStateSQLiteStore _setDatabaseSchemaVersion:]
  -[SFBrowserStateSQLiteStore _migrateFromLegacyPlistWithPath:]
  -[SFBrowserStateSQLiteStore _updateBrowserWindowStateWithDictionary:]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_2]
  -[SFBrowserStateSQLiteStore _recoverFromDatabaseInconsistencyFromSchemaVersion3Migration]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_3]
  -[SFBrowserStateSQLiteStore _migrateToSchemaVersion_4]
  -[SFBrowserStateSQLiteStore _createTableForTabs]
  -[SFBrowserStateSQLiteStore _createTableForTabSession]
  -[SFBrowserStateSQLiteStore _mergeAllWindowsIfNeeded]
  -[SFBrowserStateSQLiteStore _setDatabaseID:browserWindow:]
  -[SFBrowserStateSQLiteStore _removeSavedSessionStateDataForTabsWithUUIDStrings:]
  -[SFBrowserStateSQLiteStore _updateTabStateWithData:]
  -[SFBrowserStateSQLiteStore _insertTabStateWithData:]
  -[SFBrowserStateSQLiteStore _tabStateDataForUUID:]
  -[SFBrowserStateSQLiteStore _readTabStatesWithBrowserWindowUUID:completion:]
  -[SFBrowserStateSQLiteStore _cacheUUIDForTabStateData:]
  -[SFBrowserStateSQLiteStore _saveBrowserWindowStateWithData:]
  -[SFBrowserStateSQLiteStore _databaseIDForBrowserWindow:]
  -[SFBrowserStateSQLiteStore _isTabStateCached:]
  -[SFBrowserStateSQLiteStore _saveBrowserWindowStateWithDictionary:]
  -[SFBrowserStateSQLiteStore _updateOrInsertTabStateWithData:]
  -[SFBrowserStateSQLiteStore _tabUUIDsInWindow:]
  -[SFBrowserStateSQLiteStore _sqliteStatementForTabDeleting]
  -[SFBrowserStateSQLiteStore _updateBrowserWindowWithData:tabs:]
  -[SFBrowserStateSQLiteStore _readSavedSessionStateDataForTabWithUUIDString:]
  -[SFBrowserStateSQLiteStore _vacuum]
  -[SFBrowserStateSQLiteStore mergeAllWindows]
  -[SFBrowserStateSQLiteStore updateSceneID:]
  -[SFBrowserStateSQLiteStore browserWindows]
  -[SFBrowserStateSQLiteStore recentlyClosedWindows]
  -[SFBrowserStateSQLiteStore deleteAllRecentlyClosedWindows]
  -[SFBrowserStateSQLiteStore removeSavedSessionStateDataForTabsWithUUIDStrings:]
  -[SFBrowserStateSQLiteStore saveTabStateWithDictionary:]
  -[SFBrowserStateSQLiteStore tabStateDataForUUID:]
  -[SFBrowserStateSQLiteStore readTabStatesWithBrowserWindowUUID:completion:]
  -[SFBrowserStateSQLiteStore tabStatesWithBrowserWindowUUID:]
  -[SFBrowserStateSQLiteStore updateBrowserWindowWithData:tabs:]
  -[SFBrowserStateSQLiteStore updateBrowserWindowStateWithDictionary:completion:]
  -[SFBrowserStateSQLiteStore readSavedSessionStateDataForTabWithUUIDString:]
  -[SFBrowserStateSQLiteStore deleteTabStateWithBrowserWindowUUID:andRemoveWindow:]
  -[SFBrowserStateSQLiteStore updateTabWithTabStateData:]
  -[SFBrowserStateSQLiteStore removeTabWithTabData:]
  -[SFBrowserStateSQLiteStore deleteAllSavedStates]
  -[SFBrowserStateSQLiteStore checkPointWriteAheadLog]
  -[SFBrowserStateSQLiteStore setSecureDeleteEnabled:]


_SFBrowserWindowStateData : NSObject /usr/lib/libc++.1.dylib
 @property  long long databaseID
 @property  NSString *UUIDString
 @property  NSUUID *UUID
 @property  long long type
 @property  long long activeDocumentIndex
 @property  long long activePrivateDocumentIndex
 @property  BOOL isActiveDocumentValid
 @property  BOOL isTabStateSuccessfullyLoaded
 @property  long long legacyPlistFileVersion
 @property  BOOL isInDatabase
 @property  BOOL needsQuickUpdate
 @property  NSString *sceneID

  // instance methods
  -[_SFBrowserWindowStateData isEqual:]
  -[_SFBrowserWindowStateData type]
  -[_SFBrowserWindowStateData setType:]
  -[_SFBrowserWindowStateData .cxx_destruct]
  -[_SFBrowserWindowStateData UUID]
  -[_SFBrowserWindowStateData setUUID:]
  -[_SFBrowserWindowStateData UUIDString]
  -[_SFBrowserWindowStateData sceneID]
  -[_SFBrowserWindowStateData setSceneID:]
  -[_SFBrowserWindowStateData setUUIDString:]
  -[_SFBrowserWindowStateData databaseID]
  -[_SFBrowserWindowStateData setDatabaseID:]
  -[_SFBrowserWindowStateData initWithSQLiteRow:]
  -[_SFBrowserWindowStateData initWithUUIDString:sceneID:]
  -[_SFBrowserWindowStateData dictionaryPresentation]
  -[_SFBrowserWindowStateData initWithDictionaryPresentation:]
  -[_SFBrowserWindowStateData activeDocumentIndex]
  -[_SFBrowserWindowStateData activePrivateDocumentIndex]
  -[_SFBrowserWindowStateData legacyPlistFileVersion]
  -[_SFBrowserWindowStateData needsQuickUpdate]
  -[_SFBrowserWindowStateData isInDatabase]
  -[_SFBrowserWindowStateData setActiveDocumentIndex:]
  -[_SFBrowserWindowStateData setActivePrivateDocumentIndex:]
  -[_SFBrowserWindowStateData isActiveDocumentValid]
  -[_SFBrowserWindowStateData setIsActiveDocumentValid:]
  -[_SFBrowserWindowStateData isTabStateSuccessfullyLoaded]
  -[_SFBrowserWindowStateData setIsTabStateSuccessfullyLoaded:]
  -[_SFBrowserWindowStateData setLegacyPlistFileVersion:]
  -[_SFBrowserWindowStateData setNeedsQuickUpdate:]


_SFAppAutoFillPasswordViewController : _SFPasswordViewController
  // instance methods
  -[_SFAppAutoFillPasswordViewController init]
  -[_SFAppAutoFillPasswordViewController .cxx_destruct]
  -[_SFAppAutoFillPasswordViewController viewDidLoad]
  -[_SFAppAutoFillPasswordViewController _remoteViewController]
  -[_SFAppAutoFillPasswordViewController setWebViewURL:]
  -[_SFAppAutoFillPasswordViewController setRemoteAppID:]
  -[_SFAppAutoFillPasswordViewController setRemoteLocalizedAppName:]
  -[_SFAppAutoFillPasswordViewController setRemoteUnlocalizedAppName:]
  -[_SFAppAutoFillPasswordViewController setExternallyVerifiedAndApprovedSharedWebCredentialsDomains:]
  -[_SFAppAutoFillPasswordViewController authenticateToPresentInPopover:completion:]
  -[_SFAppAutoFillPasswordViewController setAuthenticationGracePeriod:]
  -[_SFAppAutoFillPasswordViewController remoteViewController:selectedCredential:]
  -[_SFAppAutoFillPasswordViewController _setUpServiceProxyIfNeeded]
  -[_SFAppAutoFillPasswordViewController _sceneDidEnterBackground:]
  -[_SFAppAutoFillPasswordViewController _connectToServiceWithCompletion:]


_SFUIViewPopoverSourceInfo : NSObject /usr/lib/libc++.1.dylib <_SFPopoverSourceInfo>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} popoverSourceRect
 @property  UIView *popoverSourceView
 @property  UIBarButtonItem *barButtonItem

  // instance methods
  -[_SFUIViewPopoverSourceInfo .cxx_destruct]
  -[_SFUIViewPopoverSourceInfo initWithView:]
  -[_SFUIViewPopoverSourceInfo popoverSourceView]
  -[_SFUIViewPopoverSourceInfo popoverSourceRect]


_SFTouchIconFetchOperation : WBSTouchIconFetchOperation /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFTouchIconFetchOperation deviceIdealDefaultTouchIconURLsWithURL:]

  // instance methods
  -[_SFTouchIconFetchOperation webViewConfiguration]
  -[_SFTouchIconFetchOperation didCreateWebView]
  -[_SFTouchIconFetchOperation didFetchTouchIconURLs:andFaviconURLs:forURL:]


_SFAuthenticationContext : NSObject /usr/lib/libc++.1.dylib <LAUIDelegate>
 @property  BOOL needsAuthentication
 @property  NSData *externalizedContext
 @property  <_SFAuthenticationContextDelegate> *delegate

  // instance methods
  -[_SFAuthenticationContext init]
  -[_SFAuthenticationContext dealloc]
  -[_SFAuthenticationContext delegate]
  -[_SFAuthenticationContext setDelegate:]
  -[_SFAuthenticationContext .cxx_destruct]
  -[_SFAuthenticationContext externalizedContext]
  -[_SFAuthenticationContext _authenticationContext]
  -[_SFAuthenticationContext invalidateClient:]
  -[_SFAuthenticationContext applicationWillEnterForeground]
  -[_SFAuthenticationContext applicationDidEnterBackground]
  -[_SFAuthenticationContext needsAuthentication]
  -[_SFAuthenticationContext authenticateForClient:userInitiated:completion:]
  -[_SFAuthenticationContext _invalidateAuthentication]
  -[_SFAuthenticationContext _monotonicTimeIsWithinAuthenticationGracePeriod:]
  -[_SFAuthenticationContext _hasAuthenticationCapability:]
  -[_SFAuthenticationContext _processNextClientAwaitingAuthenticationUserInitiated:]
  -[_SFAuthenticationContext _contextRequiresSessionBasedAuthentication]
  -[_SFAuthenticationContext _evaluatePolicyForClient:userInitiated:reply:]
  -[_SFAuthenticationContext _contextShouldAllowPasscodeFallback]
  -[_SFAuthenticationContext _contextShouldAllowMultipleBiometricFailures]
  -[_SFAuthenticationContext _cancelOngoingAuthentication]
  -[_SFAuthenticationContext _canInvalidateAuthentication]
  -[_SFAuthenticationContext _cancelOngoingAndPendingAuthentications]
  -[_SFAuthenticationContext _handleTouchIDEventWithParameters:]
  -[_SFAuthenticationContext event:params:reply:]
  -[_SFAuthenticationContext preemptOngoingAuthenticationWithPasccodeAuthentication]


_SFQRCodeDetectionController : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFQRCodeDetectionController sharedController]

  // instance methods
  -[_SFQRCodeDetectionController init]
  -[_SFQRCodeDetectionController .cxx_destruct]
  -[_SFQRCodeDetectionController elementForAction:]
  -[_SFQRCodeDetectionController _actionPickerItemSupportCopyAction:]
  -[_SFQRCodeDetectionController actionForElement:]
  -[_SFQRCodeDetectionController getActionForImage:completion:]
  -[_SFQRCodeDetectionController getActionForImageSynchronously:userInfo:]
  -[_SFQRCodeDetectionController additionalWKElementActionFromElement:defaultActions:]
  -[_SFQRCodeDetectionController actionPickerItemsForAction:]
  -[_SFQRCodeDetectionController clearCachedElement:]
  -[_SFQRCodeDetectionController preparePickerItemsForActionIfNeeded:element:defaultAcitons:]
  -[_SFQRCodeDetectionController adjustedCopyActionForAction:element:]


SFAutoFillAuthenticationUtilities : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForLoggingInWithSavedPasswordOnWebsite:]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForFillingSavedPassword]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForFillingCreditCard]
  +[SFAutoFillAuthenticationUtilities passcodePromptForLoggingInWithSavedPasswordOnWebsite:]
  +[SFAutoFillAuthenticationUtilities passcodePromptForFillingSavedPassword]
  +[SFAutoFillAuthenticationUtilities passcodePromptForFillingCreditCard]
  +[SFAutoFillAuthenticationUtilities passcodePromptForViewingSavedPasswords]
  +[SFAutoFillAuthenticationUtilities customAuthenticationTitleForViewingSavedPasswords]


_SFFindOnPageUIActivity : _SFActivity
  // instance methods
  -[_SFFindOnPageUIActivity .cxx_destruct]
  -[_SFFindOnPageUIActivity activityType]
  -[_SFFindOnPageUIActivity _systemImageName]
  -[_SFFindOnPageUIActivity activityTitle]
  -[_SFFindOnPageUIActivity canPerformWithActivityItems:]
  -[_SFFindOnPageUIActivity activityDidFinish:]
  -[_SFFindOnPageUIActivity performActivity]
  -[_SFFindOnPageUIActivity initWithFindOnPageView:]


SFSafariLaunchPlaceholderView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UINavigationBarDelegate>
 @property  double topLayoutGuideInset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFSafariLaunchPlaceholderView .cxx_destruct]
  -[SFSafariLaunchPlaceholderView initWithFrame:]
  -[SFSafariLaunchPlaceholderView layoutSubviews]
  -[SFSafariLaunchPlaceholderView positionForBar:]
  -[SFSafariLaunchPlaceholderView updateBarTintColor:]
  -[SFSafariLaunchPlaceholderView setTopLayoutGuideInset:]
  -[SFSafariLaunchPlaceholderView topLayoutGuideInset]


SFPasswordSavingServiceViewController : SFPasswordServiceViewController <SFPasswordSavingServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordSavingServiceViewController _exportedInterface]

  // instance methods
  -[SFPasswordSavingServiceViewController .cxx_destruct]
  -[SFPasswordSavingServiceViewController _dismiss]
  -[SFPasswordSavingServiceViewController credentialsSubmittedForWebsiteURL:user:password:passwordIsAutoGenerated:completionHandler:]
  -[SFPasswordSavingServiceViewController showPromptWithToken:style:]
  -[SFPasswordSavingServiceViewController _saveCredential]
  -[SFPasswordSavingServiceViewController _updateCredential]


_SFSiteIcon : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFSiteIcon defaultSize]
  +[_SFSiteIcon cornerRadius]
  +[_SFSiteIcon minimumAcceptableSizeForDownloadedIcon]
  +[_SFSiteIcon defaultGlyph]
  +[_SFSiteIcon fontPointSizeForIconSize:]
  +[_SFSiteIcon sizeForIconSize:]
  +[_SFSiteIcon defaultIconKeyColor]
  +[_SFSiteIcon _defaultIconSize]
  +[_SFSiteIcon precompositedDefaultIcon]


_SFMailContentProvider : NSObject /usr/lib/libc++.1.dylib <MFMailComposeViewControllerDelegate>
 @property  <_SFMailContentProviderDataSource> *dataSource
 @property  BOOL restrictAddingPDFContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFMailContentProvider .cxx_destruct]
  -[_SFMailContentProvider dataSource]
  -[_SFMailContentProvider setDataSource:]
  -[_SFMailContentProvider mailComposeController:didFinishWithResult:error:]
  -[_SFMailContentProvider _bestContentTypeForPreferredContentType:]
  -[_SFMailContentProvider _getWebArchiveDataWithCompletion:]
  -[_SFMailContentProvider _getReaderContentWithCompletionHandler:]
  -[_SFMailContentProvider _getPDFDataWithCompletionHandler:]
  -[_SFMailContentProvider prepareMailComposeViewController:withMailToURL:contentURL:preferredContentType:completionHandler:]
  -[_SFMailContentProvider _preferentiallyOrderedContentTypes]
  -[_SFMailContentProvider _canProvideContentType:]
  -[_SFMailContentProvider _preferentiallyOrderedAvailableContentTypes]
  -[_SFMailContentProvider _defaultPreferredContentType]
  -[_SFMailContentProvider getMailComposeViewControllerWithMailToURL:contentURL:preferredContentType:completionHandler:]
  -[_SFMailContentProvider restrictAddingPDFContent]
  -[_SFMailContentProvider setRestrictAddingPDFContent:]


_SFSettingsAuthentication : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFSettingsAuthentication authenticateForSettings:allowAuthenticationReuse:completionHandler:]
  +[_SFSettingsAuthentication pushSettingsAfterAuthentication:onBehalfOfViewController:resourceDictionary:completionHandler:]


_SFFolderPickerItem : NSObject /usr/lib/libc++.1.dylib
 @property  WebBookmark *bookmark
 @property  NSString *title
 @property  unsigned long depth

  // instance methods
  -[_SFFolderPickerItem .cxx_destruct]
  -[_SFFolderPickerItem depth]
  -[_SFFolderPickerItem title]
  -[_SFFolderPickerItem bookmark]
  -[_SFFolderPickerItem _initWithBookmark:depth:]


SFFolderPickerList : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[SFFolderPickerList .cxx_destruct]
  -[SFFolderPickerList initWithBookmarkCollection:style:]
  -[SFFolderPickerList folderListItemsIgnoringIdentifiers:]
  -[SFFolderPickerList _appendFolderAndChildren:toArray:depth:ignoringIdentifiers:]
  -[SFFolderPickerList _appendChildrenOfFolder:toArray:depth:ignoringIdentifiers:]


_SFPageZoomPreferenceManager : WBSPageZoomPreferenceManager /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFPageZoomPreferenceManager sharedManager]

  // instance methods
  -[_SFPageZoomPreferenceManager dealloc]
  -[_SFPageZoomPreferenceManager initWithPerSitePreferencesStore:]
  -[_SFPageZoomPreferenceManager setValue:ofPreference:forDomain:completionHandler:]
  -[_SFPageZoomPreferenceManager _didRemoveHostnames:]
  -[_SFPageZoomPreferenceManager _historyWasCleared:]
  -[_SFPageZoomPreferenceManager setDefaultValue:ofPreference:completionHandler:]
  -[_SFPageZoomPreferenceManager removePreferenceValuesForDomains:fromPreference:completionHandler:]


_SFUnresponsiveWebProcessController : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL shouldIgnoreDidBecomeResponsive
 @property  BOOL supportsTapToRadar
 @property  UIViewController *activeBrowserContentViewController

  // class methods
  +[_SFUnresponsiveWebProcessController sharedController]

  // instance methods
  -[_SFUnresponsiveWebProcessController .cxx_destruct]
  -[_SFUnresponsiveWebProcessController setShouldIgnoreDidBecomeResponsive:]
  -[_SFUnresponsiveWebProcessController supportsTapToRadar]
  -[_SFUnresponsiveWebProcessController recordURLForTapToRadar:hostAppIdentifier:]
  -[_SFUnresponsiveWebProcessController _webProcessWatchdogTimerFired:]
  -[_SFUnresponsiveWebProcessController _promptTapToRadar:]
  -[_SFUnresponsiveWebProcessController _tapToRadar]
  -[_SFUnresponsiveWebProcessController unscheduleWatchdogTimer]
  -[_SFUnresponsiveWebProcessController scheduleWatchdogTimerForContentViewController:]
  -[_SFUnresponsiveWebProcessController shouldIgnoreDidBecomeResponsive]
  -[_SFUnresponsiveWebProcessController activeBrowserContentViewController]
  -[_SFUnresponsiveWebProcessController setActiveBrowserContentViewController:]


_SFBrowserContentViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <SFBrowserViewDelegate, SFReaderEnabledWebViewControllerDelegate, _SFAdaptivePreviewViewControllerDelegate, _SFAppleConnectExtensionUIDelegate, _SFBarManagerDelegate, _SFDownloadDelegate, _SFDynamicBarAnimatorDelegate, _SFFindOnPageViewDelegate, _SFMailContentProviderDataSource, _SFNavigationBarDelegate, _SFPageLoadErrorControllerDelegate, _SFPrintControllerDelegate, _SFSingleBookmarkNavigationControllerDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, WBSFluidProgressControllerWindowDelegate, WBSFluidProgressStateSource, WBSDigitalHealthManagerDelegate, _SFActivityItemCustomizationDelegate, _SFActivityViewControllerDelegate, _SFSaveToFilesOperationDelegate, _SFQuickLookDocumentSource, _SFBrowserKeyCommandSafariViewControllerMethods, _SFBrowserContentController, _SFBrowserDocument>
 @property  unsigned long mediaCaptureDeviceIcon
 @property  SFReaderEnabledWebViewController *rootWebViewController
 @property  SFReaderEnabledWebViewController *webViewController
 @property  WKPreferences *wkPreferences
 @property  NSArray *linkActions
 @property  _WKActivatedElementInfo *activatedElementInfo
 @property  BOOL remoteSwipeGestureEnabled
 @property  UIColor *preferredBarTintColor
 @property  UIColor *preferredControlTintColor
 @property  long long hostAppModalPresentationStyle
 @property  long long dismissButtonStyle
 @property  SFSafariViewControllerConfiguration *configuration
 @property  BOOL webViewLayoutUnderlapsStatusBar
 @property  BOOL canPrint
 @property  NSString *bundleIdentifierForProfileInstallation
 @property  BOOL _usesScrollToTopView
 @property  BOOL _isUsedForAuthentication
 @property  unsigned long _persona
 @property  SFBrowserPersonaAnalyticsHelper *_analyticsHelper
 @property  NSString *_hostAppBundleId
 @property  BOOL _shouldReloadImmediatelyAfterPageLoadError
 @property  long long safariDataSharingMode
 @property  BOOL didNotifyInitialLoadFinish
 @property  BOOL isShowingErrorPage
 @property  BOOL viewDidAppearInHostApp
 @property  _SFNavigationUtilitiesManager *_navigationUtilitiesManager
 @property  long long displayMode
 @property  _SFReloadOptionsController *reloadOptionsController
 @property  _SFFindOnPageView *findOnPageView
 @property  WKWebView *webView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <_SFBrowserDocument> *activeDocument
 @property  BOOL showingReader
 @property  BOOL keepBarsMinimized
 @property  _SFPerSitePreferencesVendor *perSitePreferencesVendor
 @property  _SFPageZoomPreferenceManager *pageZoomManager
 @property  <SFReaderContext> *readerContext
 @property  NSURL *URLForPerSitePreferences
 @property  BOOL wasLoadedWithContentBlockersEnabled
 @property  BOOL canHideToolbar

  // class methods
  +[_SFBrowserContentViewController createDefaultWebsiteDataStore]

  // instance methods
  -[_SFBrowserContentViewController dealloc]
  -[_SFBrowserContentViewController .cxx_destruct]
  -[_SFBrowserContentViewController observeValueForKeyPath:ofObject:change:context:]
  -[_SFBrowserContentViewController setConfiguration:]
  -[_SFBrowserContentViewController configuration]
  -[_SFBrowserContentViewController stopLoading]
  -[_SFBrowserContentViewController downloadDidFinish:]
  -[_SFBrowserContentViewController loadView]
  -[_SFBrowserContentViewController webView]
  -[_SFBrowserContentViewController gestureRecognizerShouldBegin:]
  -[_SFBrowserContentViewController gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[_SFBrowserContentViewController gestureRecognizer:shouldReceiveTouch:]
  -[_SFBrowserContentViewController presentViewController:animated:completion:]
  -[_SFBrowserContentViewController becomeFirstResponder]
  -[_SFBrowserContentViewController initWithNibName:bundle:]
  -[_SFBrowserContentViewController scrollViewDidScroll:]
  -[_SFBrowserContentViewController scrollViewWillBeginDragging:]
  -[_SFBrowserContentViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[_SFBrowserContentViewController scrollViewShouldScrollToTop:]
  -[_SFBrowserContentViewController viewWillAppear:]
  -[_SFBrowserContentViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SFBrowserContentViewController didMoveToParentViewController:]
  -[_SFBrowserContentViewController canPerformAction:withSender:]
  -[_SFBrowserContentViewController viewDidLayoutSubviews]
  -[_SFBrowserContentViewController viewDidAppear:]
  -[_SFBrowserContentViewController viewDidDisappear:]
  -[_SFBrowserContentViewController canBecomeFirstResponder]
  -[_SFBrowserContentViewController preferredStatusBarStyle]
  -[_SFBrowserContentViewController prefersHomeIndicatorAutoHidden]
  -[_SFBrowserContentViewController _dismiss]
  -[_SFBrowserContentViewController overrideTraitCollectionForChildViewController:]
  -[_SFBrowserContentViewController displayMode]
  -[_SFBrowserContentViewController keyCommands]
  -[_SFBrowserContentViewController previewActionItems]
  -[_SFBrowserContentViewController _isSecure]
  -[_SFBrowserContentViewController decreaseSize:]
  -[_SFBrowserContentViewController increaseSize:]
  -[_SFBrowserContentViewController loadRequest:]
  -[_SFBrowserContentViewController _setWebView:]
  -[_SFBrowserContentViewController setDisplayMode:]
  -[_SFBrowserContentViewController estimatedProgress]
  -[_SFBrowserContentViewController processPool]
  -[_SFBrowserContentViewController websiteDataStore]
  -[_SFBrowserContentViewController _invalidateEVOrganizationName]
  -[_SFBrowserContentViewController _EVOrganizationName]
  -[_SFBrowserContentViewController _updateNavigationBar]
  -[_SFBrowserContentViewController _updateUI]
  -[_SFBrowserContentViewController _updateUserActivity]
  -[_SFBrowserContentViewController _goForward]
  -[_SFBrowserContentViewController _goBack]
  -[_SFBrowserContentViewController activeDocument]
  -[_SFBrowserContentViewController _didLoadWebView]
  -[_SFBrowserContentViewController setDismissButtonStyle:]
  -[_SFBrowserContentViewController _previewViewControllerForURL:defaultActions:elementInfo:]
  -[_SFBrowserContentViewController _commitPreviewViewController:]
  -[_SFBrowserContentViewController pageLoadErrorController:setAllowsSpecificHTTPSCertificate:forHost:]
  -[_SFBrowserContentViewController pageLoadErrorControllerGetSecIdentityPreferencesController:]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldHandleCertificateError:]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldReloadAfterError:]
  -[_SFBrowserContentViewController pageLoadErrorController:loadFailedRequestAfterError:]
  -[_SFBrowserContentViewController pageLoadErrorControllerClosePage:]
  -[_SFBrowserContentViewController pageLoadErrorControllerShouldPermanentlyAcceptCertificate:]
  -[_SFBrowserContentViewController pageLoadErrorController:presentViewController:]
  -[_SFBrowserContentViewController setPreferredControlTintColor:]
  -[_SFBrowserContentViewController addBookmarkNavController:didFinishWithResult:bookmark:]
  -[_SFBrowserContentViewController addBookmarkNavControllerCanSaveBookmarkChanges:]
  -[_SFBrowserContentViewController _currentWebView]
  -[_SFBrowserContentViewController canPrint]
  -[_SFBrowserContentViewController dataForQuickLookDocument:]
  -[_SFBrowserContentViewController suggestedFileNameForQuickLookDocument:]
  -[_SFBrowserContentViewController suggestedFileExtensionForQuickLookDocument:]
  -[_SFBrowserContentViewController navigationBar:didCreateLeadingToolbar:trailingToolbar:]
  -[_SFBrowserContentViewController navigationBarMetricsDidChange:]
  -[_SFBrowserContentViewController navigationBarReloadButtonWasTapped:]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonStartedInteraction:]
  -[_SFBrowserContentViewController navigationBarReaderButtonWasTapped:]
  -[_SFBrowserContentViewController navigationBarStopLoadingButtonWasTapped:]
  -[_SFBrowserContentViewController compressedNavigationBarWasTapped:]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonWasTapped:]
  -[_SFBrowserContentViewController navigationBarMediaCaptureMuteButtonWasTapped:]
  -[_SFBrowserContentViewController navigationBarCancelButtonWasTapped:]
  -[_SFBrowserContentViewController navigationBarDoneButtonWasTapped:]
  -[_SFBrowserContentViewController mediaCaptureDeviceIcon]
  -[_SFBrowserContentViewController navigationBarFormatMenuButtonBecameUnavailable:]
  -[_SFBrowserContentViewController preferredBarTintColor]
  -[_SFBrowserContentViewController navigationBarURLForSharing:]
  -[_SFBrowserContentViewController browserPersonaForActivityViewController:]
  -[_SFBrowserContentViewController quickLookDocument]
  -[_SFBrowserContentViewController activityViewController:prepareActivity:completion:]
  -[_SFBrowserContentViewController customizationControllerCustomizationsDidChange:]
  -[_SFBrowserContentViewController webViewForCustomizationController:]
  -[_SFBrowserContentViewController isContentObscuredByDigitalHealthForCustomizationController:]
  -[_SFBrowserContentViewController isDisplayingQuickLookDocumentForCustomizationController:]
  -[_SFBrowserContentViewController isReaderAvailableForCustomizationController:]
  -[_SFBrowserContentViewController adaptivePreviewViewController:requestLinkPreviewViewControllerWithURL:]
  -[_SFBrowserContentViewController adaptivePreviewViewControlerWillDisableLinkPreview:]
  -[_SFBrowserContentViewController linkActions]
  -[_SFBrowserContentViewController setLinkActions:]
  -[_SFBrowserContentViewController activatedElementInfo]
  -[_SFBrowserContentViewController setActivatedElementInfo:]
  -[_SFBrowserContentViewController printControllerPageIsLoading:]
  -[_SFBrowserContentViewController printControllerShouldPrintReader:]
  -[_SFBrowserContentViewController printControllerCanPresentPrintUI:]
  -[_SFBrowserContentViewController printController:didCreatePrintInfo:]
  -[_SFBrowserContentViewController presentingViewControllerForPrintController:]
  -[_SFBrowserContentViewController navigateBackKeyPressed]
  -[_SFBrowserContentViewController navigateForwardKeyPressed]
  -[_SFBrowserContentViewController dismissSFSafariViewControllerKeyPressed]
  -[_SFBrowserContentViewController reloadKeyPressed]
  -[_SFBrowserContentViewController cancelKeyPressed]
  -[_SFBrowserContentViewController findKeyPressed]
  -[_SFBrowserContentViewController resetPageZoomLevelAndFontSize]
  -[_SFBrowserContentViewController toggleReaderKeyPressed]
  -[_SFBrowserContentViewController nextFindResultKeyPressed]
  -[_SFBrowserContentViewController previousFindResultKeyPressed]
  -[_SFBrowserContentViewController saveWebpageKeyPressed]
  -[_SFBrowserContentViewController saveWebpageAlternativeKeyPressed]
  -[_SFBrowserContentViewController takeFindStringKeyPressed]
  -[_SFBrowserContentViewController emailCurrentPage]
  -[_SFBrowserContentViewController reloadFromOriginKeyPressed]
  -[_SFBrowserContentViewController dismissButtonStyle]
  -[_SFBrowserContentViewController _persona]
  -[_SFBrowserContentViewController setRemoteSwipeGestureEnabled:]
  -[_SFBrowserContentViewController setPreferredBarTintColor:]
  -[_SFBrowserContentViewController setHostAppModalPresentationStyle:]
  -[_SFBrowserContentViewController wkPreferences]
  -[_SFBrowserContentViewController setWebViewLayoutUnderlapsStatusBar:]
  -[_SFBrowserContentViewController webViewControllerDidChangeLoadingState:]
  -[_SFBrowserContentViewController webViewControllerDidFirstVisuallyNonEmptyLayout:]
  -[_SFBrowserContentViewController _navigationUtilitiesManager]
  -[_SFBrowserContentViewController webViewController]
  -[_SFBrowserContentViewController webViewController:didFailProvisionalNavigation:withError:]
  -[_SFBrowserContentViewController webViewController:didFinishNavigation:]
  -[_SFBrowserContentViewController webViewControllerDidChangeURL:]
  -[_SFBrowserContentViewController rootWebViewController]
  -[_SFBrowserContentViewController websiteDataStoreConfiguration]
  -[_SFBrowserContentViewController webViewConfiguration]
  -[_SFBrowserContentViewController setWebViewController:]
  -[_SFBrowserContentViewController newProcessPool]
  -[_SFBrowserContentViewController _initialLoadFinishedWithSuccess:]
  -[_SFBrowserContentViewController _goBackToOwnerWebView]
  -[_SFBrowserContentViewController setSafariDataSharingMode:]
  -[_SFBrowserContentViewController webViewController:decidePolicyForNavigationAction:decisionHandler:]
  -[_SFBrowserContentViewController _usesScrollToTopView]
  -[_SFBrowserContentViewController visibilityWillChangeForFindOnPageView:]
  -[_SFBrowserContentViewController webViewForFindOnPageView:]
  -[_SFBrowserContentViewController _invalidateUserActivity]
  -[_SFBrowserContentViewController _analyticsHelper]
  -[_SFBrowserContentViewController setViewDidAppearInHostApp:]
  -[_SFBrowserContentViewController processPoolConfiguration]
  -[_SFBrowserContentViewController _updateScrollIndicatorVerticalInsets:horizontalInsets:]
  -[_SFBrowserContentViewController _didReceiveAllQueuedMessages]
  -[_SFBrowserContentViewController _setUpWebViewControllerIfNeeded]
  -[_SFBrowserContentViewController viewDidAppearInHostApp]
  -[_SFBrowserContentViewController isShowingErrorPage]
  -[_SFBrowserContentViewController _openCurrentURLInSafari]
  -[_SFBrowserContentViewController safariDataSharingMode]
  -[_SFBrowserContentViewController _isUsedForAuthentication]
  -[_SFBrowserContentViewController findOnPageView]
  -[_SFBrowserContentViewController remoteSwipeGestureEnabled]
  -[_SFBrowserContentViewController _redirectToHostAppWithExpectedCallbackSchemeIfPossible:]
  -[_SFBrowserContentViewController _showBars]
  -[_SFBrowserContentViewController _applicationPayloadForOpeningInSafari]
  -[_SFBrowserContentViewController webViewController:didReceiveServerRedirectForProvisionalNavigation:]
  -[_SFBrowserContentViewController webViewControllerDidCancelClientRedirect:]
  -[_SFBrowserContentViewController webViewController:willPerformClientRedirectToURL:withDelay:]
  -[_SFBrowserContentViewController webViewController:didStartProvisionalNavigation:]
  -[_SFBrowserContentViewController webViewController:didFinishDocumentLoadForNavigation:]
  -[_SFBrowserContentViewController webViewController:didChangeFullScreen:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidCrash:]
  -[_SFBrowserContentViewController _didResolveDestinationURL:pendingAppLinkCheck:]
  -[_SFBrowserContentViewController _getSafariDataSharingModeWithCompletion:]
  -[_SFBrowserContentViewController _fetchActivityViewControllerInfoForURL:title:completion:]
  -[_SFBrowserContentViewController _updateRemoteSwipeGestureState]
  -[_SFBrowserContentViewController _notifyInitialLoadDidFinish:]
  -[_SFBrowserContentViewController _redirectToHostAppWithNavigationResult:options:]
  -[_SFBrowserContentViewController _recordHostAppIdAndURLForTapToRadar:]
  -[_SFBrowserContentViewController bundleIdentifierForProfileInstallation]
  -[_SFBrowserContentViewController _hostAppBundleId]
  -[_SFBrowserContentViewController _shouldReloadImmediatelyAfterPageLoadError]
  -[_SFBrowserContentViewController readerContext]
  -[_SFBrowserContentViewController presentingViewControllerForWebViewController:]
  -[_SFBrowserContentViewController webViewControllerDidChangeEstimatedProgress:]
  -[_SFBrowserContentViewController webViewControllerDidChangeHasOnlySecureContent:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidBecomeResponsive:]
  -[_SFBrowserContentViewController webViewControllerWebProcessDidBecomeUnresponsive:]
  -[_SFBrowserContentViewController webViewController:didCommitNavigation:]
  -[_SFBrowserContentViewController webViewController:didSameDocumentNavigation:ofType:]
  -[_SFBrowserContentViewController webViewController:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]
  -[_SFBrowserContentViewController webViewController:didEndNavigationGestureToBackForwardListItem:]
  -[_SFBrowserContentViewController webViewController:decidePolicyForNavigationResponse:decisionHandler:]
  -[_SFBrowserContentViewController webViewController:didFailNavigation:withError:]
  -[_SFBrowserContentViewController webViewControllerUpdateNavigationBar:]
  -[_SFBrowserContentViewController webViewController:didReceiveAuthenticationChallenge:completionHandler:]
  -[_SFBrowserContentViewController webViewController:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:]
  -[_SFBrowserContentViewController webViewController:didFinishLoadForQuickLookDocumentInMainFrame:]
  -[_SFBrowserContentViewController browserPersonaForWebViewController:]
  -[_SFBrowserContentViewController webViewController:webViewDidClose:]
  -[_SFBrowserContentViewController webViewController:createWebViewWithConfiguration:forNavigationAction:completionHandler:]
  -[_SFBrowserContentViewController webViewController:previewViewControllerForURL:defaultActions:elementInfo:]
  -[_SFBrowserContentViewController webViewController:commitPreviewedViewController:]
  -[_SFBrowserContentViewController webViewController:printFrame:]
  -[_SFBrowserContentViewController webViewControllerDidChangeSafeAreaShouldAffectObscuredInsets:]
  -[_SFBrowserContentViewController webViewController:mediaCaptureStateDidChange:]
  -[_SFBrowserContentViewController webViewController:presentationPolicyForDialog:]
  -[_SFBrowserContentViewController webViewControllerWillPresentJavaScriptDialog:]
  -[_SFBrowserContentViewController webViewControllerDidChangeSafeAreaInsets:]
  -[_SFBrowserContentViewController webViewController:didStartDownload:]
  -[_SFBrowserContentViewController saveToFilesOperation:presentViewController:]
  -[_SFBrowserContentViewController saveToFilesOperation:didFinishWithSuccess:]
  -[_SFBrowserContentViewController dynamicBarAnimatorStateDidChange:]
  -[_SFBrowserContentViewController dynamicBarAnimatorOutputsDidChange:]
  -[_SFBrowserContentViewController dynamicBarAnimatorWillEnterSteadyState:]
  -[_SFBrowserContentViewController dynamicBarAnimatorWillLeaveSteadyState:]
  -[_SFBrowserContentViewController dynamicBarAnimator:canTransitionToState:byDraggingWithOffset:]
  -[_SFBrowserContentViewController dynamicBarAnimator:minimumTopBarHeightForOffset:]
  -[_SFBrowserContentViewController isShowingReader]
  -[_SFBrowserContentViewController toggleShowingReaderForUserAction]
  -[_SFBrowserContentViewController reloadOptionsController]
  -[_SFBrowserContentViewController setKeepBarsMinimized:]
  -[_SFBrowserContentViewController pageZoomManager]
  -[_SFBrowserContentViewController perSitePreferencesVendor]
  -[_SFBrowserContentViewController canHideToolbar]
  -[_SFBrowserContentViewController wasLoadedWithContentBlockersEnabled]
  -[_SFBrowserContentViewController reloadEnablingContentBlockers:]
  -[_SFBrowserContentViewController perSiteSettingsUIPresentSettings]
  -[_SFBrowserContentViewController URLForPerSitePreferences]
  -[_SFBrowserContentViewController setMediaCaptureDeviceIcon:]
  -[_SFBrowserContentViewController preferredControlTintColor]
  -[_SFBrowserContentViewController setReloadOptionsController:]
  -[_SFBrowserContentViewController webViewForMailContentProvider:]
  -[_SFBrowserContentViewController readerViewIsVisibleForMailContentProvider:]
  -[_SFBrowserContentViewController readerControllerForMailContentProvider:]
  -[_SFBrowserContentViewController set_navigationUtilitiesManager:]
  -[_SFBrowserContentViewController _perSiteAutomaticReaderActivationPreferenceDidChange:]
  -[_SFBrowserContentViewController _perSitePageZoomPreferenceDidChange:]
  -[_SFBrowserContentViewController _digitalHealthManager]
  -[_SFBrowserContentViewController _showBarsFromBottomBarTap:]
  -[_SFBrowserContentViewController _updateTrackerProtectionPreferences]
  -[_SFBrowserContentViewController _setUpTopBarAndBottomBar]
  -[_SFBrowserContentViewController _updateStatusBarStyleForced:]
  -[_SFBrowserContentViewController _canShowPageFormatMenu]
  -[_SFBrowserContentViewController _setUpReloadOptionsControllerIfNeeded]
  -[_SFBrowserContentViewController _setUpCalendarEventDetectorIfNeeded]
  -[_SFBrowserContentViewController _setUpFindOnPageViewIfNeeded]
  -[_SFBrowserContentViewController _setUpAppleConnectPageControllerIfNeeded]
  -[_SFBrowserContentViewController _setUpToolbar]
  -[_SFBrowserContentViewController _isPreviewing]
  -[_SFBrowserContentViewController _setSuppressingPreviewProgressAnimation:]
  -[_SFBrowserContentViewController isSafariRestricted]
  -[_SFBrowserContentViewController _dismissTransientUIAnimated:]
  -[_SFBrowserContentViewController _shouldGoBackToOwnerWebView]
  -[_SFBrowserContentViewController _hideNavigationBarGestureRecognized:]
  -[_SFBrowserContentViewController _updateDynamicBarGeometry]
  -[_SFBrowserContentViewController _updateBarTheme]
  -[_SFBrowserContentViewController _cancelPendingUpdateUserActivityTimer]
  -[_SFBrowserContentViewController _updateInterfaceFillsScreen]
  -[_SFBrowserContentViewController _updateUsesNarrowLayout]
  -[_SFBrowserContentViewController _updateScrollToTopView]
  -[_SFBrowserContentViewController _updateWebViewLayoutSize]
  -[_SFBrowserContentViewController _updateWebViewShrinkToFit]
  -[_SFBrowserContentViewController _updateCurrentScrollViewInsets]
  -[_SFBrowserContentViewController _viewWillTransitionToSize:]
  -[_SFBrowserContentViewController _viewDidTransitionToSize:]
  -[_SFBrowserContentViewController _safeAreaShouldAffectWebViewObscuredInsets]
  -[_SFBrowserContentViewController _effectiveWebViewSafeAreaInsets]
  -[_SFBrowserContentViewController _isSplitScreen]
  -[_SFBrowserContentViewController _maximumHeightObscuredByBottomBar]
  -[_SFBrowserContentViewController _canScrollToTopInView:]
  -[_SFBrowserContentViewController _scrollToTopFromScrollToTopView]
  -[_SFBrowserContentViewController _updateHomeIndicatorAutoHideState]
  -[_SFBrowserContentViewController _effectiveBarCollapsingEnabled]
  -[_SFBrowserContentViewController _offsetForDynamicBarAnimator]
  -[_SFBrowserContentViewController _setShowingReader:deactivationMode:animated:]
  -[_SFBrowserContentViewController _readerViewControllerNeedsSetUp]
  -[_SFBrowserContentViewController _updateUserActivitySoon]
  -[_SFBrowserContentViewController _setUpReaderViewController]
  -[_SFBrowserContentViewController isPageEligibileToShowNotSecureWarning]
  -[_SFBrowserContentViewController didUpdateNavigationBarItem:]
  -[_SFBrowserContentViewController _updateBarItems]
  -[_SFBrowserContentViewController _updatePreviewLoadingUI]
  -[_SFBrowserContentViewController _setShowingCrashBanner:animated:]
  -[_SFBrowserContentViewController _hideCrashBanner]
  -[_SFBrowserContentViewController _updateCrashBannerOffset]
  -[_SFBrowserContentViewController setQuickLookDocumentForCurrentBackForwardListItem:]
  -[_SFBrowserContentViewController quickLookDocumentForCurrentBackForwardListItem]
  -[_SFBrowserContentViewController _hideReaderAnimated:deactivationMode:]
  -[_SFBrowserContentViewController _updatePageZoomWithPreference]
  -[_SFBrowserContentViewController _showQuickLookDocumentView]
  -[_SFBrowserContentViewController _hideQuickLookDocumentView]
  -[_SFBrowserContentViewController _updateDigitalHealthTracking]
  -[_SFBrowserContentViewController _showReaderAnimated:]
  -[_SFBrowserContentViewController _committedDomainForPreferences]
  -[_SFBrowserContentViewController _shouldAllowAutomaticReader]
  -[_SFBrowserContentViewController _cleanUpAfterRedirectToExternalApp]
  -[_SFBrowserContentViewController _redirectToExternalNavigationResult:fromOriginalRequest:promptPolicy:isMainFrame:userAction:]
  -[_SFBrowserContentViewController _completeRedirectToExternalNavigationResult:fromOriginalRequest:userCancelled:]
  -[_SFBrowserContentViewController _queueAlertForRedirectToExternalNavigationResult:fromOriginalRequest:isMainFrame:promptPolicy:userAction:]
  -[_SFBrowserContentViewController _quickLookDocumentForDownload:]
  -[_SFBrowserContentViewController _openNewWebViewIfNeededWithConfiguration:forNavigationAction:]
  -[_SFBrowserContentViewController expectedOrCurrentURL]
  -[_SFBrowserContentViewController _linkPreviewActionsWithDefaultActions:]
  -[_SFBrowserContentViewController updateBottombarOffset:topBarHeight:]
  -[_SFBrowserContentViewController _crashBannerDraggingOffsetForContentOffset:]
  -[_SFBrowserContentViewController _reloadFromOrigin:]
  -[_SFBrowserContentViewController _canShowDownloadWithoutPrompting:]
  -[_SFBrowserContentViewController _showDownload:]
  -[_SFBrowserContentViewController _showPassBookControllerForPass:]
  -[_SFBrowserContentViewController _showGenericDownloadAlert]
  -[_SFBrowserContentViewController _showICSControllerForPath:sourceURL:]
  -[_SFBrowserContentViewController _itemProviderCollectionForSharingURL:title:]
  -[_SFBrowserContentViewController _fetchSharingURLWithCompletionHandler:]
  -[_SFBrowserContentViewController _mailContentProvider]
  -[_SFBrowserContentViewController _showPerSiteSettingsPopoverViewController]
  -[_SFBrowserContentViewController _updateUserActivityTimerFired]
  -[_SFBrowserContentViewController handoffURL]
  -[_SFBrowserContentViewController _presentSaveWebpageViewController]
  -[_SFBrowserContentViewController _emailCurrentPageWithPreferredContentType:]
  -[_SFBrowserContentViewController _increasePageZoomSetting]
  -[_SFBrowserContentViewController _decreasePageZoomSetting]
  -[_SFBrowserContentViewController _resetPageZoomSetting]
  -[_SFBrowserContentViewController _showDigitalHealthOverlay]
  -[_SFBrowserContentViewController _hideDigitalHealthOverlay]
  -[_SFBrowserContentViewController _presentActivityViewController]
  -[_SFBrowserContentViewController webViewControllerDidDetermineReaderAvailability:dueTo:]
  -[_SFBrowserContentViewController webViewController:didClickLinkInReaderWithRequest:]
  -[_SFBrowserContentViewController createReaderWebViewForWebViewController:]
  -[_SFBrowserContentViewController appleConnectExtensionPageController:presentViewController:]
  -[_SFBrowserContentViewController appleConnectExtensionPageController:dismissViewController:]
  -[_SFBrowserContentViewController barManager:didReceiveTapForBarItem:]
  -[_SFBrowserContentViewController downloadDidFail:]
  -[_SFBrowserContentViewController downloadDidStart:]
  -[_SFBrowserContentViewController downloadDidReceiveResponse:]
  -[_SFBrowserContentViewController printControllerForContentProvider:]
  -[_SFBrowserContentViewController fluidProgressRocketAnimationDidComplete]
  -[_SFBrowserContentViewController currentFluidProgressStateSource]
  -[_SFBrowserContentViewController createFluidProgressState]
  -[_SFBrowserContentViewController clearFluidProgressState]
  -[_SFBrowserContentViewController progressState]
  -[_SFBrowserContentViewController hasFailedURL]
  -[_SFBrowserContentViewController policyDidChangeForDigitalHealthManager:]
  -[_SFBrowserContentViewController keepBarsMinimized]
  -[_SFBrowserContentViewController setFindOnPageView:]
  -[_SFBrowserContentViewController hostAppModalPresentationStyle]
  -[_SFBrowserContentViewController webViewLayoutUnderlapsStatusBar]
  -[_SFBrowserContentViewController didNotifyInitialLoadFinish]


_SFWebClipMetadataFetcher : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFWebClipMetadataFetcher metadataFetcherScriptSource]

  // instance methods
  -[_SFWebClipMetadataFetcher .cxx_destruct]
  -[_SFWebClipMetadataFetcher _startFetchingMetadata]
  -[_SFWebClipMetadataFetcher _webClipLinkTagWithDictionary:]
  -[_SFWebClipMetadataFetcher initWithInjectedJavascriptController:]
  -[_SFWebClipMetadataFetcher fetchMetadataWithConsumer:]


SFAddPasswordViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFAddPasswordViewControllerDelegate> *delegate

  // instance methods
  -[SFAddPasswordViewController init]
  -[SFAddPasswordViewController delegate]
  -[SFAddPasswordViewController setDelegate:]
  -[SFAddPasswordViewController .cxx_destruct]
  -[SFAddPasswordViewController viewDidLoad]
  -[SFAddPasswordViewController tableView:numberOfRowsInSection:]
  -[SFAddPasswordViewController tableView:cellForRowAtIndexPath:]
  -[SFAddPasswordViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SFAddPasswordViewController _textFieldChanged:]
  -[SFAddPasswordViewController _cancelBarButtonItemTapped:]
  -[SFAddPasswordViewController _doneBarButtonItemTapped:]


_SFReloadOptionsController : NSObject /usr/lib/libc++.1.dylib <_SFRequestDesktopSitePerSitePreferenceObserver>
 @property  _SFInjectedJavaScriptController *activityJSController
 @property  BOOL loadedUsingDesktopUserAgent
 @property  BOOL tryUsingMobileIfPossible
 @property  long long effectiveContentMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFReloadOptionsController init]
  -[_SFReloadOptionsController invalidate]
  -[_SFReloadOptionsController .cxx_destruct]
  -[_SFReloadOptionsController effectiveContentMode]
  -[_SFReloadOptionsController didUpdateRequestDesktopSiteDefaultValue:]
  -[_SFReloadOptionsController didUpdateRequestDesktopSitePerSitePreference:]
  -[_SFReloadOptionsController loadedUsingDesktopUserAgent]
  -[_SFReloadOptionsController requestStandardSite]
  -[_SFReloadOptionsController requestDesktopSite]
  -[_SFReloadOptionsController customUserAgentSettingForMainFrameURL:withTimeout:completionHandler:]
  -[_SFReloadOptionsController initWithWebView:activityJSController:perSitePreferenceManager:]
  -[_SFReloadOptionsController setEffectiveContentMode:]
  -[_SFReloadOptionsController logCompletedPageloadToDifferentialPrivacy:]
  -[_SFReloadOptionsController requestDesktopSiteWithURL:]
  -[_SFReloadOptionsController _loadPerSitePreferences]
  -[_SFReloadOptionsController _updateSettingSource:domain:]
  -[_SFReloadOptionsController _overrideSettingIfNeeded:source:domain:completion:]
  -[_SFReloadOptionsController didMarkURLAsNeedingDesktopUserAgent:]
  -[_SFReloadOptionsController didMarkURLAsNeedingStandardUserAgent:]
  -[_SFReloadOptionsController customUserAgentForSetting:]
  -[_SFReloadOptionsController customNavigatorPlatformForSetting:]
  -[_SFReloadOptionsController activityJSController]
  -[_SFReloadOptionsController tryUsingMobileIfPossible]
  -[_SFReloadOptionsController setTryUsingMobileIfPossible:]


SFReaderEnabledWebViewController : SFWebViewController <_SFReaderControllerDelegate, WKNavigationDelegatePrivate>
 @property  _SFReaderController *readerController
 @property  <SFReaderEnabledWebViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFReaderEnabledWebViewController dealloc]
  -[SFReaderEnabledWebViewController .cxx_destruct]
  -[SFReaderEnabledWebViewController loadView]
  -[SFReaderEnabledWebViewController traitCollectionDidChange:]
  -[SFReaderEnabledWebViewController webView:didCommitNavigation:]
  -[SFReaderEnabledWebViewController readerController]
  -[SFReaderEnabledWebViewController createReaderWebViewForReaderController:]
  -[SFReaderEnabledWebViewController readerController:didDetermineReaderAvailability:dueTo:]
  -[SFReaderEnabledWebViewController readerController:contentDidBecomeReadyWithDetectedLanguage:]
  -[SFReaderEnabledWebViewController readerController:didClickLinkRequestingNewWindowInReaderWithRequest:]
  -[SFReaderEnabledWebViewController readerController:didClickLinkInReaderWithRequest:]
  -[SFReaderEnabledWebViewController setUpReaderWithReaderWebView:]
  -[SFReaderEnabledWebViewController _updateDarkModeEnabled]


_SFBrowserSavedState : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *browserWindows
 @property  NSArray *recentlyClosedTabs
 @property  BOOL secureDeleteEnabled

  // class methods
  +[_SFBrowserSavedState shouldMergeAllWindowsIfNeeded]
  +[_SFBrowserSavedState sharedBrowserSavedState]
  +[_SFBrowserSavedState setSharedBrowserSavedState:]
  +[_SFBrowserSavedState ephemeralSavedState]
  +[_SFBrowserSavedState setShouldMergeAllWindowsIfNeeded:]

  // instance methods
  -[_SFBrowserSavedState dealloc]
  -[_SFBrowserSavedState .cxx_destruct]
  -[_SFBrowserSavedState initWithInMemoryDatabase]
  -[_SFBrowserSavedState initWithDatabaseURL:]
  -[_SFBrowserSavedState _historyItemsWereRemoved:]
  -[_SFBrowserSavedState updateSceneID:]
  -[_SFBrowserSavedState browserWindows]
  -[_SFBrowserSavedState tabStateDataForUUID:]
  -[_SFBrowserSavedState setSecureDeleteEnabled:]
  -[_SFBrowserSavedState initWithDefaultBrowserStateDatabase]
  -[_SFBrowserSavedState _readBrowserControllersSavedState]
  -[_SFBrowserSavedState _checkPointWriteAheadLogIfNeeded]
  -[_SFBrowserSavedState clearAllSavedStatesClosingDatabase:]
  -[_SFBrowserSavedState updateBrowserWindowState:tabs:]
  -[_SFBrowserSavedState _removeRecentlyClosedTabStateData:]
  -[_SFBrowserSavedState _notifyThatRecentlyClosedTabsWereRemoved:]
  -[_SFBrowserSavedState _readRecentlyClosedTabsStateIfNecessary]
  -[_SFBrowserSavedState removeTabsStateForBrowserControllerWithUUID:andRemoveWindow:]
  -[_SFBrowserSavedState removeTabStateWithTabData:]
  -[_SFBrowserSavedState setBrowserWindows:]
  -[_SFBrowserSavedState savedTabsStateForBrowserControllerWithUUID:]
  -[_SFBrowserSavedState saveTabsState:forBrowserControllerWithUUID:completion:]
  -[_SFBrowserSavedState setActiveDocumentIsValid:forBrowserControllerWithUUID:]
  -[_SFBrowserSavedState activeDocumentIsValidForBrowserControllerWithUUID:]
  -[_SFBrowserSavedState saveTabStateData:]
  -[_SFBrowserSavedState clearAllSavedStatesAndCloseDatabase]
  -[_SFBrowserSavedState readSavedSessionStateDataForTabWithUUID:]
  -[_SFBrowserSavedState addRecentlyClosedTabs:]
  -[_SFBrowserSavedState loadSessionStateDataAndRemoveRecentlyClosedTab:]
  -[_SFBrowserSavedState clearRecentlyClosedTabs]
  -[_SFBrowserSavedState recentlyClosedTabs]
  -[_SFBrowserSavedState removeRecentlyClosedTabWithStateData:]
  -[_SFBrowserSavedState setRecentlyClosedTabs:]
  -[_SFBrowserSavedState secureDeleteEnabled]


_SFInjectedJavaScriptController : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFInjectedJavaScriptController .cxx_destruct]
  -[_SFInjectedJavaScriptController initWithWebView:]
  -[_SFInjectedJavaScriptController runJavaScriptForActivity:withScript:object:invokeMethod:completionHandler:]
  -[_SFInjectedJavaScriptController _webProcessActivityProxy]


SFPasswordAlertController : UIAlertController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // class methods
  +[SFPasswordAlertController _preventsAppearanceProxyCustomization]


SFPasswordServiceViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  NSString *applicationIdentifier

  // class methods
  +[SFPasswordServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[SFPasswordServiceViewController .cxx_destruct]
  -[SFPasswordServiceViewController applicationIdentifier]
  -[SFPasswordServiceViewController _willAppearInRemoteViewController]


_SSHistoryAccessSession : WBSHistoryAccessSessionProxy /System/Library/Frameworks/Foundation.framework/Foundation

_SFGeolocationPermissionManager : WBSGeolocationPreferenceManager /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFGeolocationPermissionManager sharedManager]

  // instance methods
  -[_SFGeolocationPermissionManager .cxx_destruct]
  -[_SFGeolocationPermissionManager requestPermissionForURL:frame:dialogPresenter:completionHandler:]
  -[_SFGeolocationPermissionManager _showDialogRequestingPermissionForURL:frame:dialogPresenter:completionHandler:]


_SFQuickLookDocument : NSObject /usr/lib/libc++.1.dylib
 @property  LSDocumentProxy *documentProxy
 @property  NSString *savedPath
 @property  NSString *savedPathWithProperExtension
 @property  NSString *fileName
 @property  NSString *mimeType
 @property  NSString *uti
 @property  BOOL needsQuickLookDocumentView
 @property  NSURL *savedURLWithProperExtension
 @property  unsigned long fileSize
 @property  NSString *inferredUTI
 @property  NSString *localizedType
 @property  NSURL *sourceURL
 @property  BOOL shouldUnzipByUIDocumentInteractionController
 @property  <_SFQuickLookDocumentSource> *documentSource

  // class methods
  +[_SFQuickLookDocument _hasSuitableApplicationForOpeningDocument:]

  // instance methods
  -[_SFQuickLookDocument dealloc]
  -[_SFQuickLookDocument .cxx_destruct]
  -[_SFQuickLookDocument fileSize]
  -[_SFQuickLookDocument documentProxy]
  -[_SFQuickLookDocument uti]
  -[_SFQuickLookDocument setUti:]
  -[_SFQuickLookDocument mimeType]
  -[_SFQuickLookDocument setMimeType:]
  -[_SFQuickLookDocument sourceURL]
  -[_SFQuickLookDocument setSourceURL:]
  -[_SFQuickLookDocument fileName]
  -[_SFQuickLookDocument setFileName:]
  -[_SFQuickLookDocument documentSource]
  -[_SFQuickLookDocument setDocumentSource:]
  -[_SFQuickLookDocument savedURLWithProperExtension]
  -[_SFQuickLookDocument initWithFileName:mimeType:uti:needsQuickLookDocumentView:]
  -[_SFQuickLookDocument saveToFileIfNeeded]
  -[_SFQuickLookDocument shouldUnzipByUIDocumentInteractionController]
  -[_SFQuickLookDocument localizedType]
  -[_SFQuickLookDocument inferredUTI]
  -[_SFQuickLookDocument addQuickLookPrintSettingsToPrintInfo:]
  -[_SFQuickLookDocument setSavedPath:shouldDelete:]
  -[_SFQuickLookDocument _deleteSavedPathIfNecessary]
  -[_SFQuickLookDocument _deleteSavedPathWithProperExtensionIfNecessary]
  -[_SFQuickLookDocument savedPath]
  -[_SFQuickLookDocument savedPathWithProperExtension]
  -[_SFQuickLookDocument setDocumentProxy:]
  -[_SFQuickLookDocument setSavedPathWithProperExtension:shouldDelete:]
  -[_SFQuickLookDocument setSavedPath:]
  -[_SFQuickLookDocument setSavedPathWithProperExtension:]
  -[_SFQuickLookDocument setFileNameForPDFDocument:]
  -[_SFQuickLookDocument needsQuickLookDocumentView]


_SFClass : NSObject /usr/lib/libc++.1.dylib

_SFOpenWithAppUIActivity : UIActivity /System/Library/PrivateFrameworks/WebUI.framework/WebUI <LSOpenResourceOperationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenWithAppUIActivity .cxx_destruct]
  -[_SFOpenWithAppUIActivity activityType]
  -[_SFOpenWithAppUIActivity openResourceOperation:didFinishCopyingResource:]
  -[_SFOpenWithAppUIActivity activityTitle]
  -[_SFOpenWithAppUIActivity canPerformWithActivityItems:]
  -[_SFOpenWithAppUIActivity _activityImage]
  -[_SFOpenWithAppUIActivity performActivity]
  -[_SFOpenWithAppUIActivity initWithApplicationIdentifier:andFilePath:]


_SFOpenInOtherAppActivityItemsSource : NSObject /usr/lib/libc++.1.dylib <UIActivityItemsSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFOpenInOtherAppActivityItemsSource .cxx_destruct]
  -[_SFOpenInOtherAppActivityItemsSource initWithFilePath:]
  -[_SFOpenInOtherAppActivityItemsSource activityViewControllerPlaceholderItems:]
  -[_SFOpenInOtherAppActivityItemsSource activityViewController:itemsForActivityType:]


_SFOpenInOtherAppActivityViewController : _SFActivityViewController
 @property  NSString *filePath

  // class methods
  +[_SFOpenInOtherAppActivityViewController canOpenWithFilePath:UTI:sourceURL:]
  +[_SFOpenInOtherAppActivityViewController _applicationsForDocumentProxy:]
  +[_SFOpenInOtherAppActivityViewController _activityItemsForFilePath:UTI:sourceURL:]

  // instance methods
  -[_SFOpenInOtherAppActivityViewController .cxx_destruct]
  -[_SFOpenInOtherAppActivityViewController setFilePath:]
  -[_SFOpenInOtherAppActivityViewController filePath]
  -[_SFOpenInOtherAppActivityViewController _prepareActivity:]
  -[_SFOpenInOtherAppActivityViewController initWithFilePath:UTI:sourceURL:]


SFExternalPasswordCredentialServiceViewController : SFPasswordServiceViewController <SFCredentialProviderExtensionManagerObserver, _ASPasswordCredentialAuthenticationViewControllerDelegate, _SFAuthenticationClient, _SFAuthenticationContextDelegate, SFExternalPasswordCredentialServiceViewControllerProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFExternalPasswordCredentialServiceViewController _exportedInterface]
  +[SFExternalPasswordCredentialServiceViewController _remoteViewControllerInterface]

  // instance methods
  -[SFExternalPasswordCredentialServiceViewController .cxx_destruct]
  -[SFExternalPasswordCredentialServiceViewController initWithNibName:bundle:]
  -[SFExternalPasswordCredentialServiceViewController _dismiss]
  -[SFExternalPasswordCredentialServiceViewController _authenticationContext]
  -[SFExternalPasswordCredentialServiceViewController autoFillWithCredentialIdentity:]
  -[SFExternalPasswordCredentialServiceViewController getCredentialForCredentialIdentity:completion:]
  -[SFExternalPasswordCredentialServiceViewController credentialProviderExtensionManagerExtensionListDidChange:]
  -[SFExternalPasswordCredentialServiceViewController authenticationCustomUIProgressObserverForContext:]
  -[SFExternalPasswordCredentialServiceViewController authenticationMessageForContext:]
  -[SFExternalPasswordCredentialServiceViewController passcodePromptForContext:]
  -[SFExternalPasswordCredentialServiceViewController displayMessageAsTitleForContext:]
  -[SFExternalPasswordCredentialServiceViewController presentUIForPasswordCredentialAuthenticationViewController:]
  -[SFExternalPasswordCredentialServiceViewController passwordCredentialAuthenticationViewController:didFinishWithCredential:error:completion:]
  -[SFExternalPasswordCredentialServiceViewController contextRequiresSessionBasedAuthentication:]
  -[SFExternalPasswordCredentialServiceViewController contextShouldAllowPasscodeFallback:]
  -[SFExternalPasswordCredentialServiceViewController contextShouldAllowMultipleBiometricFailures:]
  -[SFExternalPasswordCredentialServiceViewController _finishRequestToAutoFillCredential:extensionShowedUI:error:completion:]
  -[SFExternalPasswordCredentialServiceViewController _finishRequestToReturnCredential:extensionShowedUI:error:completion:]


_SFBrowserNavigationBar : _SFNavigationBar
  // class methods
  +[_SFBrowserNavigationBar _metricsCategory]

  // instance methods
  -[_SFBrowserNavigationBar newTextField]
  -[_SFBrowserNavigationBar placeholderHorizontalInset]


_SFDialogView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <_SFDialogViewDelegate> *delegate

  // instance methods
  -[_SFDialogView initWithCoder:]
  -[_SFDialogView delegate]
  -[_SFDialogView setDelegate:]
  -[_SFDialogView .cxx_destruct]
  -[_SFDialogView initWithFrame:]
  -[_SFDialogView becomeFirstResponder]
  -[_SFDialogView setTitleText:]
  -[_SFDialogView setMessageText:]
  -[_SFDialogView didAppear]
  -[_SFDialogView willDisappear]
  -[_SFDialogView setInputText:placeholder:]
  -[_SFDialogView setPasswordText:placeholder:]
  -[_SFDialogView setDialogActions:]
  -[_SFDialogView setUsesOpaqueAppearance:]
  -[_SFDialogView _keyboardDismissGesture:]
  -[_SFDialogView setObscuredInsets:]


_SFFolderPickerTableViewCellLayoutManager : UITableViewCellLayoutManagerValue1 /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // class methods
  +[_SFFolderPickerTableViewCellLayoutManager indentationWidth]

  // instance methods
  -[_SFFolderPickerTableViewCellLayoutManager layoutSubviewsOfCell:]
  -[_SFFolderPickerTableViewCellLayoutManager textRectForCell:rowWidth:forSizing:]
  -[_SFFolderPickerTableViewCellLayoutManager _layoutMarginsForCell:]


SFFormAutoFillFrame : NSObject /usr/lib/libc++.1.dylib <WBSFormAutoFillFrame>
 @property  WKWebProcessPlugInFrame *plugInFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFFormAutoFillFrame autoFillFrameWithWebProcessPlugInFrame:]

  // instance methods
  -[SFFormAutoFillFrame isEqual:]
  -[SFFormAutoFillFrame .cxx_destruct]
  -[SFFormAutoFillFrame committedURL]
  -[SFFormAutoFillFrame containsAnyFormElements]
  -[SFFormAutoFillFrame plugInFrame]
  -[SFFormAutoFillFrame initWithWebProcessPlugInFrame:]
  -[SFFormAutoFillFrame _pageContoller]
  -[SFFormAutoFillFrame _formMetadataController]
  -[SFFormAutoFillFrame frameRef]
  -[SFFormAutoFillFrame jsContextForMetadataControllerScriptWorld]
  -[SFFormAutoFillFrame jsWrapperInMetadataControllerScriptWorldForNode:]
  -[SFFormAutoFillFrame enumerateChildFramesUsingBlock:]
  -[SFFormAutoFillFrame pageMainFrame]


_SFDialogController : NSObject /usr/lib/libc++.1.dylib <_SFDialogViewDelegate>
 @property  <_SFDialogControllerDelegate> *delegate
 @property  <_SFDialogViewPresenting> *dialogPresenter
 @property  <_SFDialogViewControllerPresenting> *viewControllerPresenter
 @property  _SFDialog *presentedDialog
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDialogController applicationDidEnterBackground]

  // instance methods
  -[_SFDialogController init]
  -[_SFDialogController delegate]
  -[_SFDialogController setDelegate:]
  -[_SFDialogController .cxx_destruct]
  -[_SFDialogController dialogPresenter]
  -[_SFDialogController setDialogPresenter:]
  -[_SFDialogController dialogView:didSelectActionAtIndex:withInputText:passwordText:]
  -[_SFDialogController setViewControllerPresenter:]
  -[_SFDialogController owningWebViewWillBecomeActive]
  -[_SFDialogController owningTabWillClose]
  -[_SFDialogController owningWebViewWillNavigate]
  -[_SFDialogController owningWebViewDidCommitNavigationWithURL:]
  -[_SFDialogController owningWebViewDidChangeProcessID]
  -[_SFDialogController presentDialog:]
  -[_SFDialogController presentDialog:animateAlongsidePresentation:dismissal:]
  -[_SFDialogController presentedDialog]
  -[_SFDialogController cancelPresentedDialogIfNeeded]
  -[_SFDialogController _initWithDialogManager:]
  -[_SFDialogController _currentWebProcessID]
  -[_SFDialogController _presentDialog:forWebProcessID:withAdditionalAnimations:]
  -[_SFDialogController _dismissDialogWithAdditionalAnimations:]
  -[_SFDialogController _currentSlot]
  -[_SFDialogController _tabID]
  -[_SFDialogController _dismissCurrentDialogWithResponse:]
  -[_SFDialogController _isPresentingDialog]
  -[_SFDialogController presentNextDialogIfNeeded]
  -[_SFDialogController viewControllerPresenter]


_SFSecIdentityPreferencesController : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFSecIdentityPreferencesController sharedPersistentSecIdentityPreferencesController]
  +[_SFSecIdentityPreferencesController ephemeralSecIdentityPreferencesController]

  // instance methods
  -[_SFSecIdentityPreferencesController .cxx_destruct]
  -[_SFSecIdentityPreferencesController saveShouldUseOnlyAvailableIdentityWithoutPrompting:forDomainAndPort:]
  -[_SFSecIdentityPreferencesController shouldUseOnlyAvailableIdentityWithoutPromptingForDomainAndPort:]
  -[_SFSecIdentityPreferencesController _initUsingEphemeralStorage:]


_SFPasswordPickerTableConfiguration : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *prompt
 @property  NSArray *serviceNameHintStrings
 @property  NSArray *domainHintStrings
 @property  unsigned long minimumNumberOfCredentialsToShowLikelyMatchesSection
 @property  BOOL forUserNamesOnly
 @property  BOOL shouldShowIcons

  // instance methods
  -[_SFPasswordPickerTableConfiguration .cxx_destruct]
  -[_SFPasswordPickerTableConfiguration prompt]
  -[_SFPasswordPickerTableConfiguration setPrompt:]
  -[_SFPasswordPickerTableConfiguration shouldShowIcons]
  -[_SFPasswordPickerTableConfiguration setShouldShowIcons:]
  -[_SFPasswordPickerTableConfiguration serviceNameHintStrings]
  -[_SFPasswordPickerTableConfiguration setServiceNameHintStrings:]
  -[_SFPasswordPickerTableConfiguration domainHintStrings]
  -[_SFPasswordPickerTableConfiguration setDomainHintStrings:]
  -[_SFPasswordPickerTableConfiguration minimumNumberOfCredentialsToShowLikelyMatchesSection]
  -[_SFPasswordPickerTableConfiguration setMinimumNumberOfCredentialsToShowLikelyMatchesSection:]
  -[_SFPasswordPickerTableConfiguration forUserNamesOnly]
  -[_SFPasswordPickerTableConfiguration setForUserNamesOnly:]


_SFPasswordPickerTableViewController : _SFPasswordTableViewController
 @property  <_SFPasswordPickerTableViewControllerDelegate> *delegate
 @property  _SFPasswordPickerTableConfiguration *configuration

  // instance methods
  -[_SFPasswordPickerTableViewController delegate]
  -[_SFPasswordPickerTableViewController setDelegate:]
  -[_SFPasswordPickerTableViewController .cxx_destruct]
  -[_SFPasswordPickerTableViewController configuration]
  -[_SFPasswordPickerTableViewController initWithConfiguration:]
  -[_SFPasswordPickerTableViewController viewWillAppear:]
  -[_SFPasswordPickerTableViewController viewWillDisappear:]
  -[_SFPasswordPickerTableViewController viewDidLoad]
  -[_SFPasswordPickerTableViewController viewDidDisappear:]
  -[_SFPasswordPickerTableViewController tableView:numberOfRowsInSection:]
  -[_SFPasswordPickerTableViewController tableView:cellForRowAtIndexPath:]
  -[_SFPasswordPickerTableViewController numberOfSectionsInTableView:]
  -[_SFPasswordPickerTableViewController tableView:titleForHeaderInSection:]
  -[_SFPasswordPickerTableViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[_SFPasswordPickerTableViewController tableView:accessoryButtonTappedForRowWithIndexPath:]
  -[_SFPasswordPickerTableViewController tableView:didSelectRowAtIndexPath:]
  -[_SFPasswordPickerTableViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]
  -[_SFPasswordPickerTableViewController tableView:shouldShowMenuForRowAtIndexPath:]
  -[_SFPasswordPickerTableViewController tableView:canPerformAction:forRowAtIndexPath:withSender:]
  -[_SFPasswordPickerTableViewController _cancel]
  -[_SFPasswordPickerTableViewController searchPatternDidUpdate]
  -[_SFPasswordPickerTableViewController _passwordForIndexPath:]
  -[_SFPasswordPickerTableViewController _updateMatchingPasswords]
  -[_SFPasswordPickerTableViewController _updateSections]
  -[_SFPasswordPickerTableViewController _deletePasswordAtIndexPath:]


_SFPerSitePreferencesUtilities : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFPerSitePreferencesUtilities isBinaryPreferenceValueOn:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities preferenceValueForBoolValue:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities preferenceValueForPSSpecifierValue:specifier:preference:preferenceManager:]
  +[_SFPerSitePreferencesUtilities specifierValueForSpecifier:preferenceValue:preference:preferenceManager:]


_SFTouchIconCache : WBSTouchIconCache /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFTouchIconCache defaultBackgroundColor]
  +[_SFTouchIconCache _generateDefaultFavoritesIcon]
  +[_SFTouchIconCache _monogramConfiguration]

  // instance methods
  -[_SFTouchIconCache canHandleRequest:]
  -[_SFTouchIconCache _operationWithRequest:completionHandler:]


_SFAppleConnectExtensionPageController : NSObject /usr/lib/libc++.1.dylib <_SFAppleConnectExtensionContentScriptMessageReceiver, _SFAppleConnectExtensionPageDelegate>
 @property  <_SFAppleConnectExtensionUIDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFAppleConnectExtensionPageController invalidate]
  -[_SFAppleConnectExtensionPageController delegate]
  -[_SFAppleConnectExtensionPageController setDelegate:]
  -[_SFAppleConnectExtensionPageController .cxx_destruct]
  -[_SFAppleConnectExtensionPageController initWithWebView:]
  -[_SFAppleConnectExtensionPageController dismissExtensionViewController:]
  -[_SFAppleConnectExtensionPageController dispatchMessageToContentScriptWithName:userInfo:]
  -[_SFAppleConnectExtensionPageController presentExtensionViewController:]
  -[_SFAppleConnectExtensionPageController dispatchMessageFromContentScript:userInfo:]
  -[_SFAppleConnectExtensionPageController _appleConnectExtensionMessageReceiver]


_SFSaveToFilesOperation : NSObject /usr/lib/libc++.1.dylib <UIDocumentPickerDelegate, _SFDownloadPlaceholderImporter>
 @property  <_SFSaveToFilesOperationDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFSaveToFilesOperation dealloc]
  -[_SFSaveToFilesOperation delegate]
  -[_SFSaveToFilesOperation setDelegate:]
  -[_SFSaveToFilesOperation .cxx_destruct]
  -[_SFSaveToFilesOperation start]
  -[_SFSaveToFilesOperation documentPickerWasCancelled:]
  -[_SFSaveToFilesOperation documentPicker:didPickDocumentsAtURLs:]
  -[_SFSaveToFilesOperation initWithActivityItemProviderCollection:]
  -[_SFSaveToFilesOperation _showDocumentPickerForFileURL:sourceURL:]
  -[_SFSaveToFilesOperation _finishWithURL:]
  -[_SFSaveToFilesOperation _copyFileData:]
  -[_SFSaveToFilesOperation _suggestedFilenameFromWebView]
  -[_SFSaveToFilesOperation _temporaryFileWithName:]
  -[_SFSaveToFilesOperation importPlaceholderForDownload:fromURL:completionHandler:]


_SFNavigationBarTheme : _SFBarTheme
 @property  long long platterOverrideUserInterfaceStyle
 @property  long long platterTextFieldOverrideUserInterfaceStyle
 @property  long long platterKeyboardOverrideAppearance
 @property  BOOL backdropIsExtreme
 @property  BOOL backdropIsRed
 @property  BOOL backdropIsGreen
 @property  UIColor *textColor
 @property  UIColor *secureTextColor
 @property  UIColor *warningTextColor
 @property  UIColor *annotationTextColor
 @property  UIColor *progressBarTintColor
 @property  BOOL platterBackdropIsDark
 @property  UIColor *platterTextColor
 @property  UIColor *platterSecureTextColor
 @property  UIColor *platterWarningTextColor
 @property  UIColor *platterAnnotationTextColor
 @property  UIColor *platterPlaceholderTextColor
 @property  UIColor *platterSelectionColor
 @property  UIColor *platterProgressBarTintColor

  // instance methods
  -[_SFNavigationBarTheme .cxx_destruct]
  -[_SFNavigationBarTheme textColor]
  -[_SFNavigationBarTheme platterOverrideUserInterfaceStyle]
  -[_SFNavigationBarTheme URLAccessoryButtonTintColorForInputMode:]
  -[_SFNavigationBarTheme platterBackdropIsDark]
  -[_SFNavigationBarTheme platterProgressBarTintColor]
  -[_SFNavigationBarTheme progressBarTintColor]
  -[_SFNavigationBarTheme backdropIsRed]
  -[_SFNavigationBarTheme platterPlaceholderTextColor]
  -[_SFNavigationBarTheme platterTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme platterTextFieldOverrideUserInterfaceStyle]
  -[_SFNavigationBarTheme platterKeyboardOverrideAppearance]
  -[_SFNavigationBarTheme annotationTextColor]
  -[_SFNavigationBarTheme backdropIsExtreme]
  -[_SFNavigationBarTheme annotationTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme platterWarningTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme platterSecureTextColorForPlatterAlpha:]
  -[_SFNavigationBarTheme initWithBarTintStyle:preferredBarTintColor:controlsTintColor:]
  -[_SFNavigationBarTheme _colorForPlatterTextColor:regularColor:withPlatterAlpha:]
  -[_SFNavigationBarTheme backdropIsGreen]
  -[_SFNavigationBarTheme secureTextColor]
  -[_SFNavigationBarTheme warningTextColor]
  -[_SFNavigationBarTheme platterTextColor]
  -[_SFNavigationBarTheme platterSecureTextColor]
  -[_SFNavigationBarTheme platterWarningTextColor]
  -[_SFNavigationBarTheme platterAnnotationTextColor]
  -[_SFNavigationBarTheme platterSelectionColor]


SFDownloadFile : NSObject /usr/lib/libc++.1.dylib <NSFilePresenter>
 @property  <SFDownloadFileDelegate> *delegate
 @property  NSURL *URL
 @property  NSData *bookmarkData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSURL *presentedItemURL
 @property  NSOperationQueue *presentedItemOperationQueue
 @property  NSURL *primaryPresentedItemURL
 @property  NSSet *observedPresentedItemUbiquityAttributes

  // instance methods
  -[SFDownloadFile dealloc]
  -[SFDownloadFile _suspend]
  -[SFDownloadFile _resume]
  -[SFDownloadFile invalidate]
  -[SFDownloadFile initWithURL:]
  -[SFDownloadFile delegate]
  -[SFDownloadFile setDelegate:]
  -[SFDownloadFile .cxx_destruct]
  -[SFDownloadFile URL]
  -[SFDownloadFile presentedItemURL]
  -[SFDownloadFile presentedItemOperationQueue]
  -[SFDownloadFile accommodatePresentedItemDeletionWithCompletionHandler:]
  -[SFDownloadFile presentedItemDidChange]
  -[SFDownloadFile presentedItemDidMoveToURL:]
  -[SFDownloadFile bookmarkData]
  -[SFDownloadFile initWithURL:bookmarkData:]
  -[SFDownloadFile initWithBookmarkData:]


SFTelephonyURLRequest : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *successNotificationName
 @property  NSString *failureNotificationName
 @property  @? completionHandler

  // instance methods
  -[SFTelephonyURLRequest .cxx_destruct]
  -[SFTelephonyURLRequest completionHandler]
  -[SFTelephonyURLRequest setCompletionHandler:]
  -[SFTelephonyURLRequest initWithCompletionHandler:]
  -[SFTelephonyURLRequest successNotificationName]
  -[SFTelephonyURLRequest setSuccessNotificationName:]
  -[SFTelephonyURLRequest failureNotificationName]
  -[SFTelephonyURLRequest setFailureNotificationName:]


SFTelephonyURLHandler : NSObject /usr/lib/libc++.1.dylib
 @property  NSMutableSet *pendingRequests

  // class methods
  +[SFTelephonyURLHandler sharedInstance]

  // instance methods
  -[SFTelephonyURLHandler init]
  -[SFTelephonyURLHandler .cxx_destruct]
  -[SFTelephonyURLHandler pendingRequests]
  -[SFTelephonyURLHandler setPendingRequests:]
  -[SFTelephonyURLHandler openURLForDialRequest:withScene:completionHandler:]
  -[SFTelephonyURLHandler addObserverForRequest:]
  -[SFTelephonyURLHandler removeObserverForRequest:]


SFInteractiveDismissController : UIPercentDrivenInteractiveTransition /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
 @property  unsigned long sampleCount
 @property  double totalDistance
 @property  double skipTimeStamp
 @property  double previousTimeStamp
 @property  double previousDisplacement
 @property  double previousVelocity
 @property  double previousAcceleration
 @property  double averageVelocity
 @property  double averageAcceleration
 @property  UIScreenEdgePanGestureRecognizer *edgeSwipeGestureRecognizer
 @property  UIViewController *viewControllerToBeDismissed
 @property  UIView *edgeSwipeView
 @property  <SFInteractiveDismissControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFInteractiveDismissController init]
  -[SFInteractiveDismissController delegate]
  -[SFInteractiveDismissController setDelegate:]
  -[SFInteractiveDismissController .cxx_destruct]
  -[SFInteractiveDismissController sampleCount]
  -[SFInteractiveDismissController setSampleCount:]
  -[SFInteractiveDismissController transitionDuration:]
  -[SFInteractiveDismissController animateTransition:]
  -[SFInteractiveDismissController startInteractiveTransition:]
  -[SFInteractiveDismissController cancelInteractiveTransition]
  -[SFInteractiveDismissController finishInteractiveTransition]
  -[SFInteractiveDismissController animationControllerForPresentedController:presentingController:sourceController:]
  -[SFInteractiveDismissController animationControllerForDismissedController:]
  -[SFInteractiveDismissController interactionControllerForDismissal:]
  -[SFInteractiveDismissController _translationCoefficient]
  -[SFInteractiveDismissController _updateStatistics:firstSample:finalSample:]
  -[SFInteractiveDismissController popGesture:withRemainingDuration:shouldPopWithVelocity:]
  -[SFInteractiveDismissController totalDistance]
  -[SFInteractiveDismissController setTotalDistance:]
  -[SFInteractiveDismissController skipTimeStamp]
  -[SFInteractiveDismissController setSkipTimeStamp:]
  -[SFInteractiveDismissController previousTimeStamp]
  -[SFInteractiveDismissController setPreviousTimeStamp:]
  -[SFInteractiveDismissController previousDisplacement]
  -[SFInteractiveDismissController setPreviousDisplacement:]
  -[SFInteractiveDismissController previousVelocity]
  -[SFInteractiveDismissController setPreviousVelocity:]
  -[SFInteractiveDismissController previousAcceleration]
  -[SFInteractiveDismissController setPreviousAcceleration:]
  -[SFInteractiveDismissController averageVelocity]
  -[SFInteractiveDismissController setAverageVelocity:]
  -[SFInteractiveDismissController averageAcceleration]
  -[SFInteractiveDismissController setAverageAcceleration:]
  -[SFInteractiveDismissController setViewControllerToBeDismissed:]
  -[SFInteractiveDismissController edgeSwipeView]
  -[SFInteractiveDismissController setEdgeSwipeView:]
  -[SFInteractiveDismissController swiped:]
  -[SFInteractiveDismissController _animateDismissalCancelTransition]
  -[SFInteractiveDismissController _animateDismissalCompleteTransition]
  -[SFInteractiveDismissController _percentComplete:]
  -[SFInteractiveDismissController translationForStatistics]
  -[SFInteractiveDismissController velocityForStatistics]
  -[SFInteractiveDismissController _presentAnimateTransition:]
  -[SFInteractiveDismissController _dismissAnimateTransition:]
  -[SFInteractiveDismissController edgeSwipeGestureRecognizer]
  -[SFInteractiveDismissController viewControllerToBeDismissed]


SFPasswordPickerViewController : UINavigationController /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_SFPasswordPickerTableViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFPasswordPickerViewController _preventsAppearanceProxyCustomization]

  // instance methods
  -[SFPasswordPickerViewController dealloc]
  -[SFPasswordPickerViewController .cxx_destruct]
  -[SFPasswordPickerViewController _appDidEnterBackground:]
  -[SFPasswordPickerViewController initWithPrompt:forUserNamesOnly:appNames:appID:matchedSites:urlString:minimumNumberOfCredentialsToShowLikelyMatchesSection:shouldShowIcons:completionHandler:]
  -[SFPasswordPickerViewController passwordPickerTableViewControllerDidCancel:]
  -[SFPasswordPickerViewController passwordPickerTableViewController:didPickSavedPassword:]


_SFWebProcessPlugInAutoFillPageController : _SFWebProcessPlugInPageController <SFFormAutoFiller, SFInjectedJavaScriptWebProcessController>
 @property  _SFFormMetadataController *formMetadataController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebProcessPlugInAutoFillPageController .cxx_destruct]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didStartProvisionalLoadForFrame:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didCommitLoadForFrame:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didSameDocumentNavigation:forFrame:]
  -[_SFWebProcessPlugInAutoFillPageController webProcessPlugInBrowserContextController:didRemoveFrameFromHierarchy:]
  -[_SFWebProcessPlugInAutoFillPageController initWithPlugIn:contextController:]
  -[_SFWebProcessPlugInAutoFillPageController willDestroyBrowserContextController:]
  -[_SFWebProcessPlugInAutoFillPageController removeAutomaticPasswordVisualTreatmentInFrame:passwordControlUniqueIDs:]
  -[_SFWebProcessPlugInAutoFillPageController focusFormForStreamlinedLogin:inFrame:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:selectFieldAfterFilling:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormAsynchronouslyInFrame:withValues:setAutoFilled:focusFieldAfterFilling:fieldToFocus:submitForm:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillFormSynchronouslyInFrame:withValues:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillForm:inFrame:withGeneratedPassword:]
  -[_SFWebProcessPlugInAutoFillPageController annotateForm:inFrame:withValues:]
  -[_SFWebProcessPlugInAutoFillPageController fillTextField:inFrame:withGeneratedPassword:]
  -[_SFWebProcessPlugInAutoFillPageController setFormControls:areAutoFilled:andClearField:inFrame:]
  -[_SFWebProcessPlugInAutoFillPageController autoFillOneTimeCodeFieldsInFrame:withValue:]
  -[_SFWebProcessPlugInAutoFillPageController collectURLsForPrefillingAtURL:]
  -[_SFWebProcessPlugInAutoFillPageController collectFormMetadataForPrefillingAtURL:]
  -[_SFWebProcessPlugInAutoFillPageController collectMetadataForTextField:inFrame:atURL:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController clearAutoFillMetadata]
  -[_SFWebProcessPlugInAutoFillPageController substitutePasswordElementsWithAutomaticPasswordElementsInFrame:formID:focusedPasswordControlUniqueID:passwordControlUniqueIDs:automaticPassword:blurAfterSubstitution:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController removeAutomaticPasswordElementsInFrame:focusedPasswordControlUniqueID:passwordControlUniqueIDs:]
  -[_SFWebProcessPlugInAutoFillPageController automaticPasswordSheetDimissedInFrame:focusedPasswordControlUniqueID:]
  -[_SFWebProcessPlugInAutoFillPageController runJavaScriptForActivity:withScript:object:invokeMethod:completionHandler:]
  -[_SFWebProcessPlugInAutoFillPageController formMetadataController]
  -[_SFWebProcessPlugInAutoFillPageController setFormMetadataController:]


_SFDownloadIconCache : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFDownloadIconCache init]
  -[_SFDownloadIconCache .cxx_destruct]
  -[_SFDownloadIconCache addObserver:]
  -[_SFDownloadIconCache removeObserver:]
  -[_SFDownloadIconCache _startThumbnailRequestForSource:reportGenericIcons:]
  -[_SFDownloadIconCache _genericIconForUTI:]
  -[_SFDownloadIconCache _lookupGenericIconForType:]
  -[_SFDownloadIconCache _didGenerateThumbnail:forSource:]
  -[_SFDownloadIconCache _generateThumbnailForURL:completionHandler:]
  -[_SFDownloadIconCache iconForSource:]
  -[_SFDownloadIconCache regenerateIconForSource:]


SFExternalPasswordCredentialRemoteViewController : SFPasswordRemoteViewController <SFExternalPasswordCredentialRemoteViewControllerProtocol>
 @property  <SFExternalPasswordCredentialRemoteViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SFExternalPasswordCredentialRemoteViewController exportedInterface]
  +[SFExternalPasswordCredentialRemoteViewController serviceViewControllerInterface]
  +[SFExternalPasswordCredentialRemoteViewController passwordServiceViewControllerName]

  // instance methods
  -[SFExternalPasswordCredentialRemoteViewController presentExternalPasswordCredentialRemoteViewController]


_SFDownloadManager : NSObject /usr/lib/libc++.1.dylib <_SFDownloadDelegate>
 @property  NSURL *downloadsRootURL
 @property  <_SFDownloadDelegate> *extraDownloadDelegate
 @property  NSArray *downloads
 @property  _SFDownloadIconCache *iconCache
 @property  double totalProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownloadManager sharedManager]
  +[_SFDownloadManager defaultDownloadsHistoryURL]
  +[_SFDownloadManager downloadRepresentationsAtURL:]

  // instance methods
  -[_SFDownloadManager dealloc]
  -[_SFDownloadManager .cxx_destruct]
  -[_SFDownloadManager observeValueForKeyPath:ofObject:change:context:]
  -[_SFDownloadManager downloadDidFinish:]
  -[_SFDownloadManager _applicationDidEnterBackground:]
  -[_SFDownloadManager iconCache]
  -[_SFDownloadManager downloads]
  -[_SFDownloadManager totalProgress]
  -[_SFDownloadManager savePendingChangesBeforeTermination]
  -[_SFDownloadManager downloadDidFail:]
  -[_SFDownloadManager downloadDidStart:]
  -[_SFDownloadManager downloadShouldImportPlaceholderToDownloadsFolder:]
  -[_SFDownloadManager downloadDidImportFileToDownloadsFolder:]
  -[_SFDownloadManager downloadDidReceiveResponse:]
  -[_SFDownloadManager downloadDidResume:]
  -[_SFDownloadManager createDirectoryForDownload:completionHandler:]
  -[_SFDownloadManager downloadShouldContinueAfterReceivingResponse:decisionHandler:]
  -[_SFDownloadManager downloadContentsDidChange:]
  -[_SFDownloadManager downloadWillBeDeleted:]
  -[_SFDownloadManager removeDownloads:]
  -[_SFDownloadManager _dataForPersistingToHistory]
  -[_SFDownloadManager _loadDownloadHistory]
  -[_SFDownloadManager initAsReadonly:]
  -[_SFDownloadManager _removeOldDownloadsAndUpdateTimerIfNeeded]
  -[_SFDownloadManager getDownloadsWithCompletionHandler:]
  -[_SFDownloadManager _busyDownloads]
  -[_SFDownloadManager _removeDeletedDownloads]
  -[_SFDownloadManager _startUpdateTotalProgressTimerIfNeeded]
  -[_SFDownloadManager _noteDownloadsChanged]
  -[_SFDownloadManager shouldExcludeDownloadFromFileSystem:]
  -[_SFDownloadManager _updateTotalProgress:]
  -[_SFDownloadManager _calculateTotalProgress]
  -[_SFDownloadManager _addDownload:]
  -[_SFDownloadManager _containerDirectoryForDownload:]
  -[_SFDownloadManager removeDownloadsStartedAfterDate:]
  -[_SFDownloadManager deferAddingDownloadWhenStarted:]
  -[_SFDownloadManager downloadsRootURL]
  -[_SFDownloadManager extraDownloadDelegate]
  -[_SFDownloadManager setExtraDownloadDelegate:]


_SFSharingLinkExtractor : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFSharingLinkExtractor .cxx_destruct]
  -[_SFSharingLinkExtractor initWithWebView:]
  -[_SFSharingLinkExtractor fetchSharingLinkWithCompletionHandler:]


_SFSafariDataSharingController : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFSafariDataSharingController sharedController]

  // instance methods
  -[_SFSafariDataSharingController init]
  -[_SFSafariDataSharingController .cxx_destruct]
  -[_SFSafariDataSharingController systemDataContainerURLWithAppBundleID:]
  -[_SFSafariDataSharingController checkInAppBundleIDIfNeeded:]
  -[_SFSafariDataSharingController _loadAppBundlesWithSeparateDataIfNeeded]
  -[_SFSafariDataSharingController clearAllWebsitesData]


_SFAddBookmarkActivity : _SFActivity <_SFSingleBookmarkNavigationControllerDelegate>
 @property  _SFSingleBookmarkNavigationController *bookmarkNavigationController

  // instance methods
  -[_SFAddBookmarkActivity .cxx_destruct]
  -[_SFAddBookmarkActivity activityType]
  -[_SFAddBookmarkActivity _systemImageName]
  -[_SFAddBookmarkActivity activityTitle]
  -[_SFAddBookmarkActivity canPerformWithActivityItems:]
  -[_SFAddBookmarkActivity activityViewController]
  -[_SFAddBookmarkActivity _embeddedActivityViewController]
  -[_SFAddBookmarkActivity addBookmarkNavController:didFinishWithResult:bookmark:]
  -[_SFAddBookmarkActivity addBookmarkNavControllerCanSaveBookmarkChanges:]
  -[_SFAddBookmarkActivity bookmarkNavigationController]


_SFDownloadDispatcher : NSObject /usr/lib/libc++.1.dylib <_WKDownloadDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownloadDispatcher sharedDownloadDispatcher]

  // instance methods
  -[_SFDownloadDispatcher init]
  -[_SFDownloadDispatcher .cxx_destruct]
  -[_SFDownloadDispatcher _downloadDidStart:]
  -[_SFDownloadDispatcher _download:didReceiveResponse:]
  -[_SFDownloadDispatcher _download:didReceiveData:]
  -[_SFDownloadDispatcher _download:decideDestinationWithSuggestedFilename:completionHandler:]
  -[_SFDownloadDispatcher _downloadDidFinish:]
  -[_SFDownloadDispatcher _download:didFailWithError:]
  -[_SFDownloadDispatcher _downloadDidCancel:]
  -[_SFDownloadDispatcher _downloadProcessDidCrash:]
  -[_SFDownloadDispatcher setPendingDownload:forWebView:]
  -[_SFDownloadDispatcher downloadFromWKDownload:userInitiatedAction:]
  -[_SFDownloadDispatcher startDownloadFromWebView:URL:]
  -[_SFDownloadDispatcher prepareForDownloadFromWebView:request:MIMEType:uti:userInitiatedAction:]
  -[_SFDownloadDispatcher registerResumedDownload:]


_SFRequestDesktopSiteQuirksManager : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFRequestDesktopSiteQuirksManager sharedManager]

  // instance methods
  -[_SFRequestDesktopSiteQuirksManager init]
  -[_SFRequestDesktopSiteQuirksManager .cxx_destruct]
  -[_SFRequestDesktopSiteQuirksManager getAllQuirkValuesWithCompletionHandler:]
  -[_SFRequestDesktopSiteQuirksManager quirksValueForDomain:completionHandler:]


_SFQuickLookDocumentWriter : NSObject /usr/lib/libc++.1.dylib
 @property  NSString *filePathAccessedOnDispatchQueue
 @property  _SFQuickLookDocument *quickLookDocument
 @property  BOOL hasFinishedWriting

  // instance methods
  -[_SFQuickLookDocumentWriter .cxx_destruct]
  -[_SFQuickLookDocumentWriter quickLookDocument]
  -[_SFQuickLookDocumentWriter initWithFileName:uti:]
  -[_SFQuickLookDocumentWriter writeDataAndClose:completionHandler:]
  -[_SFQuickLookDocumentWriter setFilePathAccessedOnDispatchQueue:]
  -[_SFQuickLookDocumentWriter filePathAccessedOnDispatchQueue]
  -[_SFQuickLookDocumentWriter hasFinishedWriting]


_SFNavigationResult : NSObject /usr/lib/libc++.1.dylib
 @property  BOOL appliesOneTimeUserInitiatedActionPolicy
 @property  LSApplicationProxy *externalApplication
 @property  long long externalApplicationCategory
 @property  BOOL isRedirectToAppleServices
 @property  long long type
 @property  NSURL *URL
 @property  WBSAppLink *appLink
 @property  BOOL loadWasUserDriven

  // class methods
  +[_SFNavigationResult resultOfLoadingRequest:isMainFrame:disallowRedirectToExternalApps:preferredApplicationBundleIdentifier:redirectDecisionHandler:]
  +[_SFNavigationResult resultOfType:withURL:]
  +[_SFNavigationResult resultWithRedirectToExternalURL:preferredApplicationBundleIdentifier:]
  +[_SFNavigationResult resultWithAppLink:]

  // instance methods
  -[_SFNavigationResult type]
  -[_SFNavigationResult .cxx_destruct]
  -[_SFNavigationResult URL]
  -[_SFNavigationResult appLink]
  -[_SFNavigationResult externalApplication]
  -[_SFNavigationResult appliesOneTimeUserInitiatedActionPolicy]
  -[_SFNavigationResult externalApplicationCategory]
  -[_SFNavigationResult shouldPromptWithPolicy:telephonyNavigationPolicy:userAction:inBackground:]
  -[_SFNavigationResult isRedirectToAppleServices]
  -[_SFNavigationResult _initWithType:URL:externalApplication:appLink:]
  -[_SFNavigationResult loadWasUserDriven]
  -[_SFNavigationResult setLoadWasUserDriven:]


_SFSearchEngineController : NSObject /usr/lib/libc++.1.dylib
 @property  NSArray *engines
 @property  NSArray *enginesAvailableForUnifiedFieldSearching
 @property  NSArray *searchEngineNames
 @property  NSString *defaultSearchEngineName
 @property  NSString *countryCode
 @property  NSDictionary *templateParameterValues
 @property  NSDictionary *carrierTemplateParameterValues

  // class methods
  +[_SFSearchEngineController sharedInstance]
  +[_SFSearchEngineController _initializeSharedInstance]
  +[_SFSearchEngineController _deviceRegionCodeIsChina]
  +[_SFSearchEngineController loadSystemLanguageProperties]
  +[_SFSearchEngineController sharedInstanceIfAvailable]

  // instance methods
  -[_SFSearchEngineController init]
  -[_SFSearchEngineController .cxx_destruct]
  -[_SFSearchEngineController countryCode]
  -[_SFSearchEngineController engines]
  -[_SFSearchEngineController templateParameterValues]
  -[_SFSearchEngineController carrierTemplateParameterValues]
  -[_SFSearchEngineController _populateSearchEngines]
  -[_SFSearchEngineController _setEngines:defaultSearchEngineIndex:]
  -[_SFSearchEngineController _loadSystemProperties]
  -[_SFSearchEngineController _addAllWebSearchEngineInfosToArray:andAddUserVisibleWebSearchEngineInfosToArray:]
  -[_SFSearchEngineController _addSpecialSearchEnginesToArray:]
  -[_SFSearchEngineController _setDefaultSearchEngine:]
  -[_SFSearchEngineController _getEngines:defaultSearchEngineIndex:]
  -[_SFSearchEngineController defaultSearchEngine]
  -[_SFSearchEngineController _existingEngineInfoFor:]
  -[_SFSearchEngineController reloadSearchEngines]
  -[_SFSearchEngineController setDefaultSearchEngine:]
  -[_SFSearchEngineController engineInfoFor:]
  -[_SFSearchEngineController engineInfoForScriptName:]
  -[_SFSearchEngineController safeSearchRequestForSearchRequest:]
  -[_SFSearchEngineController enginesAvailableForUnifiedFieldSearching]
  -[_SFSearchEngineController searchEngineNames]
  -[_SFSearchEngineController defaultSearchEngineName]


_SFSafariPage : NSObject /usr/lib/libc++.1.dylib
 @property  _SFAppleConnectExtensionContext *_extensionContext

  // instance methods
  -[_SFSafariPage .cxx_destruct]
  -[_SFSafariPage _extensionContext]
  -[_SFSafariPage _remoteObjectProxy]
  -[_SFSafariPage _initWithExtensionContext:]
  -[_SFSafariPage presentExtensionUI]
  -[_SFSafariPage dismissExtensionUI]
  -[_SFSafariPage dispatchMessageToScriptWithName:userInfo:]


_SFPopoverPresentationDelegate : NSObject /usr/lib/libc++.1.dylib <UIPopoverPresentationControllerDelegate>
 @property  BOOL popoverUsesAdaptivePresentationInCompact
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToURLOutlineInNavigationBar:usesAdaptivePresentationInCompact:]
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToReloadButtonInNavigationBar:]
  +[_SFPopoverPresentationDelegate attachDelegateToPopoverPresentationController:anchoredToURLOutlineInNavigationBar:]

  // instance methods
  -[_SFPopoverPresentationDelegate .cxx_destruct]
  -[_SFPopoverPresentationDelegate adaptivePresentationStyleForPresentationController:traitCollection:]
  -[_SFPopoverPresentationDelegate presentationController:viewControllerForAdaptivePresentationStyle:]
  -[_SFPopoverPresentationDelegate popoverPresentationControllerDidDismissPopover:]
  -[_SFPopoverPresentationDelegate popoverPresentationController:willRepositionPopoverToRect:inView:]
  -[_SFPopoverPresentationDelegate initWithSourceInfo:]
  -[_SFPopoverPresentationDelegate setPopoverUsesAdaptivePresentationInCompact:]
  -[_SFPopoverPresentationDelegate attachToPopoverPresentationController:]
  -[_SFPopoverPresentationDelegate updatePopoverPosition]
  -[_SFPopoverPresentationDelegate popoverUsesAdaptivePresentationInCompact]


_SFMicrodataExtractor : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFMicrodataExtractor fetchDataWithJavaScriptController:completion:]


SFSafariViewControllerConfiguration : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding, NSCopying>
 @property  long long _redirectNotificationBehavior
 @property  BOOL entersReaderIfAvailable
 @property  BOOL barCollapsingEnabled

  // class methods
  +[SFSafariViewControllerConfiguration supportsSecureCoding]

  // instance methods
  -[SFSafariViewControllerConfiguration init]
  -[SFSafariViewControllerConfiguration copyWithZone:]
  -[SFSafariViewControllerConfiguration encodeWithCoder:]
  -[SFSafariViewControllerConfiguration initWithCoder:]
  -[SFSafariViewControllerConfiguration _isEphemeral]
  -[SFSafariViewControllerConfiguration setEntersReaderIfAvailable:]
  -[SFSafariViewControllerConfiguration _setEphemeral:]
  -[SFSafariViewControllerConfiguration setBarCollapsingEnabled:]
  -[SFSafariViewControllerConfiguration _redirectNotificationBehavior]
  -[SFSafariViewControllerConfiguration barCollapsingEnabled]
  -[SFSafariViewControllerConfiguration entersReaderIfAvailable]
  -[SFSafariViewControllerConfiguration set_redirectNotificationBehavior:]


_SFBookmarkTextEntryTableViewController : UITableViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFBookmarkTextEntryTableViewController dealloc]
  -[_SFBookmarkTextEntryTableViewController .cxx_destruct]
  -[_SFBookmarkTextEntryTableViewController loadView]
  -[_SFBookmarkTextEntryTableViewController viewWillAppear:]
  -[_SFBookmarkTextEntryTableViewController viewWillDisappear:]
  -[_SFBookmarkTextEntryTableViewController tableView:numberOfRowsInSection:]
  -[_SFBookmarkTextEntryTableViewController tableView:cellForRowAtIndexPath:]
  -[_SFBookmarkTextEntryTableViewController initWithBookmarkInfoViewField:text:autocapitalizationType:autocorrectionType:delegate:]
  -[_SFBookmarkTextEntryTableViewController _returnWasPressedInTextField:]


_SFWebView : WKWebView /System/Library/Frameworks/UIKit.framework/UIKit <_SFDialogViewPresenting, _SFKillWebContentProcessUIActivityDelegate>
 @property  NSString *evOrganizationName
 @property  {UIEdgeInsets=dddd} hitTestInsets
 @property  long long navigationGesturePolicy
 @property  <_SFWebViewDelegate> *delegate
 @property  UIView *clippingView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFWebView dealloc]
  -[_SFWebView delegate]
  -[_SFWebView setDelegate:]
  -[_SFWebView .cxx_destruct]
  -[_SFWebView layoutSubviews]
  -[_SFWebView becomeFirstResponder]
  -[_SFWebView safeAreaInsetsDidChange]
  -[_SFWebView hitTest:withEvent:]
  -[_SFWebView initWithFrame:configuration:]
  -[_SFWebView hitTestInsets]
  -[_SFWebView setHitTestInsets:]
  -[_SFWebView setPlaceholderImage:]
  -[_SFWebView _close]
  -[_SFWebView setAllowsBackForwardNavigationGestures:]
  -[_SFWebView _enclosingViewForExposedRectComputation]
  -[_SFWebView _setObscuredInsets:]
  -[_SFWebView didStartFormControlInteraction]
  -[_SFWebView didEndFormControlInteraction]
  -[_SFWebView safariKillWebContentProcessUIActivityKillWebProcess:]
  -[_SFWebView setNavigationGesturePolicy:]
  -[_SFWebView evOrganizationName]
  -[_SFWebView webProcessIDForDialogController:]
  -[_SFWebView presentDialogView:withAdditionalAnimations:forDialogController:]
  -[_SFWebView dismissDialogView:withAdditionalAnimations:forDialogController:]
  -[_SFWebView _updateNavigationGesturesAllowed]
  -[_SFWebView setPlaceholderImage:offset:]
  -[_SFWebView navigationGesturePolicy]
  -[_SFWebView clippingView]
  -[_SFWebView setClippingView:]


_SFDropSession : NSObject /usr/lib/libc++.1.dylib
  // class methods
  +[_SFDropSession dropSession:loadObjectsUsingLocalObjectLoader:objectLoader:completionHandler:]
  +[_SFDropSession dropSession:containsItemsMatching:allowedTypeIdentifiers:allowedClasses:]


SFContentBlockerState : NSObject /usr/lib/libc++.1.dylib <NSSecureCoding>
 @property  BOOL enabled

  // class methods
  +[SFContentBlockerState supportsSecureCoding]

  // instance methods
  -[SFContentBlockerState setEnabled:]
  -[SFContentBlockerState encodeWithCoder:]
  -[SFContentBlockerState initWithCoder:]
  -[SFContentBlockerState isEnabled]
  -[SFContentBlockerState initWithEnabledState:]


_SFImageActivityItemProvider : _SFActivityItemProvider
  // instance methods
  -[_SFImageActivityItemProvider .cxx_destruct]
  -[_SFImageActivityItemProvider item]
  -[_SFImageActivityItemProvider activityViewController:dataTypeIdentifierForActivityType:]
  -[_SFImageActivityItemProvider _imageData]
  -[_SFImageActivityItemProvider initWithWebView:]


SFDialogTextView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  {UIEdgeInsets=dddd} contentInsets

  // instance methods
  -[SFDialogTextView initWithCoder:]
  -[SFDialogTextView .cxx_destruct]
  -[SFDialogTextView setTitle:]
  -[SFDialogTextView setMessage:]
  -[SFDialogTextView intrinsicContentSize]
  -[SFDialogTextView initWithFrame:]
  -[SFDialogTextView layoutSubviews]
  -[SFDialogTextView contentInsets]
  -[SFDialogTextView setContentInsets:]
  -[SFDialogTextView flashScrollIndicators]
  -[SFDialogTextView _updateText]
  -[SFDialogTextView setPreferredMaxLayoutWidth:]
  -[SFDialogTextView _updateFontStyling]
  -[SFDialogTextView _updateTextContainerInset]


SFDialogTextField : UITextField /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  unsigned long stackPosition

  // instance methods
  -[SFDialogTextField initWithFrame:]
  -[SFDialogTextField layoutSubviews]
  -[SFDialogTextField textRectForBounds:]
  -[SFDialogTextField editingRectForBounds:]
  -[SFDialogTextField _placeholderColor]
  -[SFDialogTextField setStackPosition:]
  -[SFDialogTextField stackPosition]


_SFQuickLookDocumentView : UIScrollView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <UIDragInteractionDelegate, UIDragInteractionDelegate_Private>
 @property  <_SFQuickLookDocumentViewDelegate> *quickLookDocumentViewDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SFQuickLookDocumentView .cxx_destruct]
  -[_SFQuickLookDocumentView initWithFrame:]
  -[_SFQuickLookDocumentView traitCollectionDidChange:]
  -[_SFQuickLookDocumentView dragInteraction:itemsForBeginningSession:]
  -[_SFQuickLookDocumentView dragInteraction:previewForLiftingItem:session:]
  -[_SFQuickLookDocumentView _dragInteraction:dataOwnerForSession:]
  -[_SFQuickLookDocumentView _actionButtonTapped:]
  -[_SFQuickLookDocumentView setQuickLookDocumentViewDelegate:]
  -[_SFQuickLookDocumentView updateDocumentIcon:]
  -[_SFQuickLookDocumentView updateDocumentFileName:]
  -[_SFQuickLookDocumentView updateDocumentFileType:]
  -[_SFQuickLookDocumentView updateDocumentFileSize:]
  -[_SFQuickLookDocumentView updateActionTitles:]
  -[_SFQuickLookDocumentView frameForButtonAtIndex:]
  -[_SFQuickLookDocumentView _setUpLayoutConstraints]
  -[_SFQuickLookDocumentView _updatePropertiesDefinedByContentSizeCategory]
  -[_SFQuickLookDocumentView _configureOrientationBasedConstraints:]
  -[_SFQuickLookDocumentView quickLookDocumentViewDelegate]


_SFQuickLookDocumentInfoView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  UIImageView *iconImageView
 @property  NSString *fileName
 @property  NSString *fileSize
 @property  NSString *fileType

  // instance methods
  -[_SFQuickLookDocumentInfoView .cxx_destruct]
  -[_SFQuickLookDocumentInfoView fileSize]
  -[_SFQuickLookDocumentInfoView fileType]
  -[_SFQuickLookDocumentInfoView setFileType:]
  -[_SFQuickLookDocumentInfoView initWithFrame:]
  -[_SFQuickLookDocumentInfoView traitCollectionDidChange:]
  -[_SFQuickLookDocumentInfoView setFileSize:]
  -[_SFQuickLookDocumentInfoView iconImageView]
  -[_SFQuickLookDocumentInfoView setIconImageView:]
  -[_SFQuickLookDocumentInfoView fileName]
  -[_SFQuickLookDocumentInfoView setFileName:]
  -[_SFQuickLookDocumentInfoView _updatePropertiesDefinedByContentSizeCategory]
  -[_SFQuickLookDocumentInfoView _configureOrientationBasedConstraints:]
  -[_SFQuickLookDocumentInfoView _updateDocumentSizeLabel]


_SFWebProcessSharingLinkExtractor : NSObject /usr/lib/libc++.1.dylib <_SFWebProcessSharingLinkExtractor>
  // instance methods
  -[_SFWebProcessSharingLinkExtractor .cxx_destruct]
  -[_SFWebProcessSharingLinkExtractor initWithPageController:]
  -[_SFWebProcessSharingLinkExtractor fetchSharingLinkWithCompletionHandler:]
  -[_SFWebProcessSharingLinkExtractor _setUpRemoteInterface]
  -[_SFWebProcessSharingLinkExtractor _injectedLinkExtractorSourceString]
  -[_SFWebProcessSharingLinkExtractor _extractSharingLink]
  -[_SFWebProcessSharingLinkExtractor _extractCanonicalLinkWithInjectedObject:]
  -[_SFWebProcessSharingLinkExtractor _extractDominantIFrameWithInjectedObject:]
  -[_SFWebProcessSharingLinkExtractor _withInjectedLinkExtractorObjectInFrame:callback:]


SFKBScreenTraits : UIKBScreenTraits /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL sf_isKeyboardMinorEdgeWidth

  // class methods
  +[SFKBScreenTraits traitsWithScreen:orientation:]

  // instance methods
  -[SFKBScreenTraits isKeyboardMinorEdgeWidth]
  -[SFKBScreenTraits sf_isKeyboardMinorEdgeWidth]
  -[SFKBScreenTraits setSf_isKeyboardMinorEdgeWidth:]


_SFKeyboardGeometry : NSObject /usr/lib/libc++.1.dylib
 @property  {CGSize=dd} sizeWithoutBar
 @property  {CGSize=dd} sizeWithBar

  // class methods
  +[_SFKeyboardGeometry keyboardGeometryForInterfaceOrientation:]
  +[_SFKeyboardGeometry _keyboardGeometryForCurrentDeviceWithInterfaceOrientation:]

  // instance methods
  -[_SFKeyboardGeometry sizeWithBar]
  -[_SFKeyboardGeometry sizeWithoutBar]
  -[_SFKeyboardGeometry _initWithSizeWithoutBar:sizeWithBar:]
  -[_SFKeyboardGeometry _initWithFallbackSizeForOrientation:]


_SFQRImagePreviewViewController : UIViewController /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFQRImagePreviewViewController .cxx_destruct]
  -[_SFQRImagePreviewViewController loadView]
  -[_SFQRImagePreviewViewController previewActionItems]
  -[_SFQRImagePreviewViewController _contentViewSubtitleWithAction:]
  -[_SFQRImagePreviewViewController initWithImage:defaultActions:elementInfo:]


SFQRImageHeaderView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <BCSAction> *action

  // instance methods
  -[SFQRImageHeaderView .cxx_destruct]
  -[SFQRImageHeaderView action]
  -[SFQRImageHeaderView _title]
  -[SFQRImageHeaderView traitCollectionDidChange:]
  -[SFQRImageHeaderView setAction:]
  -[SFQRImageHeaderView _actionTypeString]


SFQRImageContentView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[SFQRImageContentView sizeThatFits:]
  -[SFQRImageContentView initWithTitle:subtitle:]


_SFFormDataController : WBUFormDataController /System/Library/Frameworks/Foundation.framework/Foundation <_SFAuthenticationContextDelegate>
 @property  _SFAuthenticationContext *autoFillAuthenticationContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFFormDataController sharedController]

  // instance methods
  -[_SFFormDataController .cxx_destruct]
  -[_SFFormDataController autoFillAuthenticationContext]
  -[_SFFormDataController oneTimeCodeMonitor]
  -[_SFFormDataController invalidationTimeoutIfApplicationEntersBackgroundDuringAuthenticationForContext:]
  -[_SFFormDataController contextRequiresSessionBasedAuthentication:]
  -[_SFFormDataController contextShouldAllowPasscodeFallback:]
  -[_SFFormDataController contextShouldAllowMultipleBiometricFailures:]
  -[_SFFormDataController initWithAggressiveKeychainCaching:]


SFContactAutoFillTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  BOOL usesDetailAppearance
 @property  BOOL checked

  // instance methods
  -[SFContactAutoFillTableViewCell .cxx_destruct]
  -[SFContactAutoFillTableViewCell initWithStyle:reuseIdentifier:]
  -[SFContactAutoFillTableViewCell setChecked:]
  -[SFContactAutoFillTableViewCell checked]
  -[SFContactAutoFillTableViewCell setUsesDetailAppearance:]
  -[SFContactAutoFillTableViewCell setValue:property:]
  -[SFContactAutoFillTableViewCell checkmarkButtonTapped:]
  -[SFContactAutoFillTableViewCell usesDetailAppearance]


_SFDownload : NSObject /usr/lib/libc++.1.dylib <SFDownloadFileDelegate, _WKDownloadDelegate, WBSFluidProgressStateSource>
 @property  NSURL *sourceURL
 @property  NSString *fileDownloadPath
 @property  long long fileType
 @property  _WKUserInitiatedAction *userInitiatedAction
 @property  NSString *uti
 @property  NSString *mimeType
 @property  NSURLResponse *response
 @property  _SFQuickLookDocument *quickLookDocument
 @property  NSUUID *identifier
 @property  _WKDownload *wkDownload
 @property  NSString *filename
 @property  NSString *filenameWithoutExtension
 @property  NSURL *completedFileURL
 @property  BOOL explicitlySaved
 @property  BOOL suppressesPrompt
 @property  long long bytesExpected
 @property  unsigned long bytesLoaded
 @property  double progress
 @property  long long state
 @property  BOOL idle
 @property  NSDate *dateAdded
 @property  NSDate *dateFinished
 @property  NSDictionary *dictionaryRepresentation
 @property  BOOL canResume
 @property  BOOL canReveal
 @property  WBSFluidProgressController *fluidProgressController
 @property  <_SFDownloadDelegate> *delegate
 @property  <_SFDownloadPlaceholderImporter> *placeholderImporter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SFDownload provisionalDownloadWithMIMEType:request:response:filename:uti:userInitiatedAction:]
  +[_SFDownload downloadDestinationPathWithFilename:]

  // instance methods
  -[_SFDownload init]
  -[_SFDownload dealloc]
  -[_SFDownload delegate]
  -[_SFDownload setDelegate:]
  -[_SFDownload .cxx_destruct]
  -[_SFDownload identifier]
  -[_SFDownload cancel]
  -[_SFDownload fileType]
  -[_SFDownload dictionaryRepresentation]
  -[_SFDownload progress]
  -[_SFDownload state]
  -[_SFDownload filename]
  -[_SFDownload response]
  -[_SFDownload uti]
  -[_SFDownload mimeType]
  -[_SFDownload removeFromDisk]
  -[_SFDownload sourceURL]
  -[_SFDownload bytesLoaded]
  -[_SFDownload estimatedProgress]
  -[_SFDownload _downloadDidStart:]
  -[_SFDownload _download:didReceiveResponse:]
  -[_SFDownload _download:didReceiveData:]
  -[_SFDownload _download:decideDestinationWithSuggestedFilename:completionHandler:]
  -[_SFDownload _downloadDidFinish:]
  -[_SFDownload _download:didFailWithError:]
  -[_SFDownload _downloadDidCancel:]
  -[_SFDownload _downloadProcessDidCrash:]
  -[_SFDownload dateAdded]
  -[_SFDownload downloadFileContentsDidChange:]
  -[_SFDownload downloadFileWillBeDeleted:]
  -[_SFDownload downloadFileDidChangeURL:]
  -[_SFDownload quickLookDocument]
  -[_SFDownload setQuickLookDocument:]
  -[_SFDownload setFluidProgressController:]
  -[_SFDownload expectedOrCurrentURL]
  -[_SFDownload userInitiatedAction]
  -[_SFDownload fileDownloadPath]
  -[_SFDownload createFluidProgressState]
  -[_SFDownload clearFluidProgressState]
  -[_SFDownload progressState]
  -[_SFDownload hasFailedURL]
  -[_SFDownload setExplicitlySaved:]
  -[_SFDownload setPlaceholderImporter:]
  -[_SFDownload completedFileURL]
  -[_SFDownload initWithDictionaryRepresentation:didUpdateRepresentation:]
  -[_SFDownload removeDataAndPlaceholderFromDisk]
  -[_SFDownload dateFinished]
  -[_SFDownload explicitlySaved]
  -[_SFDownload bytesExpected]
  -[_SFDownload wkDownload]
  -[_SFDownload _reportUpdatedProgressTimerFired:]
  -[_SFDownload _reportUpdatedProgressNow]
  -[_SFDownload _cancelReportUpdatedProgressTimer]
  -[_SFDownload completedFileURL:]
  -[_SFDownload _createResumeData]
  -[_SFDownload _validateSandboxAccessToURL:]
  -[_SFDownload placeholderImporter]
  -[_SFDownload _didImportPlaceholderAtURL:completionHandler:]
  -[_SFDownload _notifyDelegateOfFinishedDownload]
  -[_SFDownload _didImportFileAtURL:completionHandler:]
  -[_SFDownload fluidProgressController]
  -[_SFDownload _didUpdateBytesLoaded]
  -[_SFDownload _reportUpdatedProgressSoon]
  -[_SFDownload _continueAfterDownloadConfirmation:destinationCompletionHandler:]
  -[_SFDownload _continueAfterDecidingFileDownloadPath:]
  -[_SFDownload _importPlaceholderIfNeeded:]
  -[_SFDownload _importCompleteDownloadIfNeeded]
  -[_SFDownload isIdle]
  -[_SFDownload filenameWithoutExtension]
  -[_SFDownload canResume]
  -[_SFDownload resumeInProcessPool:]
  -[_SFDownload canReveal]
  -[_SFDownload reveal]
  -[_SFDownload suppressesPrompt]
  -[_SFDownload setSuppressesPrompt:]


SFKillSafariViewServiceActivity : _SFActivity
  // instance methods
  -[SFKillSafariViewServiceActivity activityType]
  -[SFKillSafariViewServiceActivity _systemImageName]
  -[SFKillSafariViewServiceActivity activityTitle]
  -[SFKillSafariViewServiceActivity canPerformWithActivityItems:]
  -[SFKillSafariViewServiceActivity performActivity]


_SFBarManager : NSObject /usr/lib/libc++.1.dylib
 @property  <_SFBarManagerDelegate> *delegate
 @property  BOOL bookmarksItemSelected
 @property  double downloadsItemProgress

  // instance methods
  -[_SFBarManager init]
  -[_SFBarManager delegate]
  -[_SFBarManager setDelegate:]
  -[_SFBarManager .cxx_destruct]
  -[_SFBarManager barRegistration:canHandleLongPressForBarItem:]
  -[_SFBarManager barRegistration:didReceiveTouchDownForBarItem:]
  -[_SFBarManager barRegistration:didReceiveTapForBarItem:]
  -[_SFBarManager barRegistration:didReceiveLongPressForBarItem:]
  -[_SFBarManager setBookmarksItemSelected:]
  -[_SFBarManager setDownloadsItemProgress:]
  -[_SFBarManager pulseDownloadsItem]
  -[_SFBarManager setBarItem:enabled:]
  -[_SFBarManager setBarItem:hidden:]
  -[_SFBarManager registerToolbar:withLayout:persona:]
  -[_SFBarManager performCoalescedUpdates:]
  -[_SFBarManager _updateAllRegistrations]
  -[_SFBarManager _invalidateCoalescedUpdatesTimer]
  -[_SFBarManager _performCoalescedUpdatesNow]
  -[_SFBarManager _updateRegistration:]
  -[_SFBarManager isBarItemEnabled:]
  -[_SFBarManager isBarItemHidden:]
  -[_SFBarManager visibleBarItemsNeedUpdate]
  -[_SFBarManager setDownloadsItemNeedsLayout]
  -[_SFBarManager test_numberOfRegistrations]
  -[_SFBarManager test_registrationForBar:]
  -[_SFBarManager isBookmarksItemSelected]
  -[_SFBarManager downloadsItemProgress]


_SFVibrantSeparatorView : UIVisualEffectView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
  // instance methods
  -[_SFVibrantSeparatorView initWithFrame:]
  -[_SFVibrantSeparatorView traitCollectionDidChange:]


SFAutomaticPasswordInputView : UIInputView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  long long keyboardType
 @property  <SFAutomaticPasswordInputViewDelegate> *delegate
 @property  <SFAutomaticPasswordInputViewSizing> *inputViewSizing
 @property  BOOL shouldAllowSelfSizing
 @property  long long keyboardAppearance

  // instance methods
  -[SFAutomaticPasswordInputView delegate]
  -[SFAutomaticPasswordInputView setDelegate:]
  -[SFAutomaticPasswordInputView .cxx_destruct]
  -[SFAutomaticPasswordInputView keyboardType]
  -[SFAutomaticPasswordInputView intrinsicContentSize]
  -[SFAutomaticPasswordInputView setKeyboardAppearance:]
  -[SFAutomaticPasswordInputView keyboardAppearance]
  -[SFAutomaticPasswordInputView allowsSelfSizing]
  -[SFAutomaticPasswordInputView initWithInputViewStyle:keyboardType:]
  -[SFAutomaticPasswordInputView setShouldAllowSelfSizing:]
  -[SFAutomaticPasswordInputView setInputViewSizing:]
  -[SFAutomaticPasswordInputView _useStrongPasswordButtonAction:]
  -[SFAutomaticPasswordInputView _useCustomPasswordButtonAction:]
  -[SFAutomaticPasswordInputView inputViewSizing]
  -[SFAutomaticPasswordInputView shouldAllowSelfSizing]


SFAutomaticPasswordScrollViewContentView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  <SFAutomaticPasswordScrollViewContentViewLayoutObserver> *layoutObserver

  // instance methods
  -[SFAutomaticPasswordScrollViewContentView .cxx_destruct]
  -[SFAutomaticPasswordScrollViewContentView layoutSubviews]
  -[SFAutomaticPasswordScrollViewContentView layoutObserver]
  -[SFAutomaticPasswordScrollViewContentView setLayoutObserver:]


SFAutomaticPasswordExplanationView : UIView /System/Library/PrivateFrameworks/WebUI.framework/WebUI <_UIScrollViewLayoutObserver, SFAutomaticPasswordScrollViewContentViewLayoutObserver, UIScrollViewDelegate>
 @property  UILabel *explanationLabel
 @property  UILabel *passwordRetrievalExpalantionLabel
 @property  UIButton *useStrongPasswordButton
 @property  UIButton *useOtherPasswordButton
 @property  long long keyboardAppearance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SFAutomaticPasswordExplanationView .cxx_destruct]
  -[SFAutomaticPasswordExplanationView layoutSubviews]
  -[SFAutomaticPasswordExplanationView systemLayoutSizeFittingSize:]
  -[SFAutomaticPasswordExplanationView updateConstraints]
  -[SFAutomaticPasswordExplanationView scrollViewDidScroll:]
  -[SFAutomaticPasswordExplanationView safeAreaInsetsDidChange]
  -[SFAutomaticPasswordExplanationView setKeyboardAppearance:]
  -[SFAutomaticPasswordExplanationView keyboardAppearance]
  -[SFAutomaticPasswordExplanationView _scrollViewDidLayoutSubviews:]
  -[SFAutomaticPasswordExplanationView initWithKeyboardType:]
  -[SFAutomaticPasswordExplanationView _createSubviews]
  -[SFAutomaticPasswordExplanationView useStrongPasswordButton]
  -[SFAutomaticPasswordExplanationView useOtherPasswordButton]
  -[SFAutomaticPasswordExplanationView automaticPasswordScrollContentViewDidLayout:]
  -[SFAutomaticPasswordExplanationView _createLayoutConstraints]
  -[SFAutomaticPasswordExplanationView _updateTextAndButtonColor]
  -[SFAutomaticPasswordExplanationView _updateStrongPasswordHeightConstraint]
  -[SFAutomaticPasswordExplanationView _updateWideAppearanceRequirement]
  -[SFAutomaticPasswordExplanationView _updateMaximumPadding]
  -[SFAutomaticPasswordExplanationView _updateContentLayoutGuideBottomConstraint]
  -[SFAutomaticPasswordExplanationView _updateUseCustomPasswordBaselineToBottomConstraint]
  -[SFAutomaticPasswordExplanationView _scrollViewNeedsShadow:]
  -[SFAutomaticPasswordExplanationView _updateShadowViewAlpha]
  -[SFAutomaticPasswordExplanationView explanationLabel]
  -[SFAutomaticPasswordExplanationView passwordRetrievalExpalantionLabel]


_SFFeatureAvailability : WBSFeatureAvailability /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[_SFFeatureAvailability supportsCVV]
  +[_SFFeatureAvailability _shouldShowChineseFeatures]
  +[_SFFeatureAvailability isTabBarAvailableForScreenSize:]


SFCustomActivityProxy : NSObject /usr/lib/libc++.1.dylib <NSCopying, NSSecureCoding>
 @property  NSString *activityType
 @property  NSString *activityTitle
 @property  UIImage *activityImage
 @property  unsigned long activityProxyID

  // class methods
  +[SFCustomActivityProxy supportsSecureCoding]

  // instance methods
  -[SFCustomActivityProxy isEqual:]
  -[SFCustomActivityProxy copyWithZone:]
  -[SFCustomActivityProxy encodeWithCoder:]
  -[SFCustomActivityProxy initWithCoder:]
  -[SFCustomActivityProxy .cxx_destruct]
  -[SFCustomActivityProxy activityType]
  -[SFCustomActivityProxy activityTitle]
  -[SFCustomActivityProxy activityImage]
  -[SFCustomActivityProxy activityProxyID]
  -[SFCustomActivityProxy initWithActivity:]
  -[SFCustomActivityProxy activityTypeWithActivity:]
  -[SFCustomActivityProxy _initWithActivityType:title:image:proxyID:]


SFDismissButton : UIButton /System/Library/PrivateFrameworks/WebUI.framework/WebUI
 @property  long long style

  // instance methods
  -[SFDismissButton init]
  -[SFDismissButton style]
  -[SFDismissButton setStyle:]
  -[SFDismissButton _updateButtonStyle]
  -[SFDismissButton _titleForDismissButtonStyle:]


_SFSafariSharingExtensionController : NSObject /usr/lib/libc++.1.dylib
  // instance methods
  -[_SFSafariSharingExtensionController .cxx_destruct]
  -[_SFSafariSharingExtensionController initWithWebView:]
  -[_SFSafariSharingExtensionController prepareJavaScriptWorldForSharingExtension:javaScript:]
  -[_SFSafariSharingExtensionController runJavaScriptForSharingExtension:extraArguments:completion:]
  -[_SFSafariSharingExtensionController finalizeJavaScriptForSharingExtension:arguments:]
  -[_SFSafariSharingExtensionController _extensionControllerProxy]


UIVibrancyEffect(SafariServicesExtras)
	// class methods
	+[UIVibrancyEffect(SafariServicesExtras) _sf_effectWithStyle:forBarTintStyle:]

NSDistributedNotificationCenter(SafariServicesExtras)
	// class methods
	+[NSDistributedNotificationCenter(SafariServicesExtras) _sf_postPerSitePreferencesDidChangeDistributedNotification]

NSNotification(SafariServicesExtras)
	// instance methods
	-[NSNotification(SafariServicesExtras) _sf_perSitePreferenceNotificationWasSentFromAnotherProcess]

NSError(TabDocumentExtras)
	// instance methods
	-[NSError(TabDocumentExtras) failingURL]
	-[NSError(TabDocumentExtras) _sf_recoverableByPageFormatMenu]

NSUserActivity(SafariServicesExtras)
	// class methods
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithNavigationIntent:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithMode:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithTabUUID:browserControllerUUID:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationActivityWithRecentlyClosedTabUUID:browserControllerUUID:]
	+[NSUserActivity(SafariServicesExtras) _sf_windowCreationAcitivtyFromSceneConnectionOptions:]

	// instance methods
	-[NSUserActivity(SafariServicesExtras) sf_windowCreationNavigationIntentID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationNavigationIntent]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationTabUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationSourceBrowserControllerUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationRecentlyClosedTabUUID]
	-[NSUserActivity(SafariServicesExtras) _sf_windowCreationMode]
	-[NSUserActivity(SafariServicesExtras) _sf_invalidateWindowCreationData]

WebBookmark(SafariServicesExtras)
	// class methods
	+[WebBookmark(SafariServicesExtras) _sf_operationForDropSession:]
	+[WebBookmark(SafariServicesExtras) _sf_webBookmarksFromDropSession:completionHandler:]

	// instance methods
	-[WebBookmark(SafariServicesExtras) _sf_iconKeyColor]
	-[WebBookmark(SafariServicesExtras) _sf_setIconKeyColor:]
	-[WebBookmark(SafariServicesExtras) _sf_icon]
	-[WebBookmark(SafariServicesExtras) _sf_contextMenuUsingCollection:withUserInfo:handler:]

NSUserDefaults(SafariServicesExtras)
	// class methods
	+[NSUserDefaults(SafariServicesExtras) _sf_safariDefaults]

	// instance methods
	-[NSUserDefaults(SafariServicesExtras) _sf_stringForKey:defaultValue:]
	-[NSUserDefaults(SafariServicesExtras) _sf_dateForKey:]
	-[NSUserDefaults(SafariServicesExtras) _sf_registerSafariDefaults]
	-[NSUserDefaults(SafariServicesExtras) _sf_javaScriptEnabled]
	-[NSUserDefaults(SafariServicesExtras) _sf_javaScriptCanOpenWindowsAutomatically]
	-[NSUserDefaults(SafariServicesExtras) _sf_warnAboutFraudulentWebsites]
	-[NSUserDefaults(SafariServicesExtras) _sf_shouldAutomaticallyDownloadReadingListItems]
	-[NSUserDefaults(SafariServicesExtras) _sf_setShouldAutomaticallyDownloadReadingListItems:]

CALayer(SafariServicesExtras)
	// instance methods
	-[CALayer(SafariServicesExtras) _sf_copyAnimationsFromLayer:withBlock:]

NSData(SafariServicesExtras)
	// class methods
	+[NSData(SafariServicesExtras) safari_readingListThumbnailImageDataWithCGImage:]

UIViewController(SafariServicesExtras)
	// instance methods
	-[UIViewController(SafariServicesExtras) _sf_bottomUnsafeAreaFrameForToolbar]
	-[UIViewController(SafariServicesExtras) _sf_bottomUnsafeAreaFrame]
	-[UIViewController(SafariServicesExtras) _sf_viewControllerToPresentFrom]
	-[UIViewController(SafariServicesExtras) _sf_presentViewControllerOnTopOfPresentedViewController:animated:completion:]
	-[UIViewController(SafariServicesExtras) _sf_animateAlongsideTransitionOrPerform:]
	-[UIViewController(SafariServicesExtras) _sf_isMFMailComposeViewController]
	-[UIViewController(SafariServicesExtras) _sf_isPKAddPassesViewController]
	-[UIViewController(SafariServicesExtras) safari_isPresentedByActivityViewController]
	-[UIViewController(SafariServicesExtras) safari_wantsTransparentApplicationBackground]
	-[UIViewController(SafariServicesExtras) safari_isEventuallyPresentedByViewControllerClass:]
	-[UIViewController(SafariServicesExtras) safari_isHorizontallyConstrained]
	-[UIViewController(SafariServicesExtras) safari_isHorizontallyConstrainedFallingBackToRootViewControllerIfNecessary]
	-[UIViewController(SafariServicesExtras) safari_updateApplicationBackgroundStyle]
	-[UIViewController(SafariServicesExtras) safari_wantsDoneButtonInModalBookmarksPanel]
	-[UIViewController(SafariServicesExtras) safari_sheetPresentationController]

UIPasteboard(SafariServicesExtras)
	// instance methods
	-[UIPasteboard(SafariServicesExtras) safari_setSensitiveString:]
	-[UIPasteboard(SafariServicesExtras) safari_pasteAndNavigateButtonTitle]
	-[UIPasteboard(SafariServicesExtras) safari_bestStringForPastingIntoURLField]

NSString(ScreenTime)
	// class methods
	+[NSString(ScreenTime) _sf_safeBrowsingPreferencesPlistPath]

	// instance methods
	-[NSString(ScreenTime) _sf_bestURLForUserTypedString]
	-[NSString(ScreenTime) sf_URLScheme]
	-[NSString(ScreenTime) sf_stringByReplacingMarkupCharactersWithHTMLEntities]
	-[NSString(ScreenTime) sf_stringByReplacingLastOccurrenceOfWhitespaceWithANonBreakingSpace]
	-[NSString(ScreenTime) _sf_ensurePathExtension:]
	-[NSString(ScreenTime) sf_lastPathComponentWithoutZipExtension]
	-[NSString(ScreenTime) sf_isConfigProfileMIMEType]
	-[NSString(ScreenTime) sf_isFeedScheme]

UIColor(SafariServicesExtras)
	// class methods
	+[UIColor(SafariServicesExtras) _sf_labelColor]
	+[UIColor(SafariServicesExtras) _sf_browserSystemColor]
	+[UIColor(SafariServicesExtras) _sf_barHairlineShadowColor]
	+[UIColor(SafariServicesExtras) _sf_secondaryLabelColor]
	+[UIColor(SafariServicesExtras) _sf_folderTouchIconBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_separatorColor]
	+[UIColor(SafariServicesExtras) _sf_backgroundColor]
	+[UIColor(SafariServicesExtras) _sf_secondaryBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_tertiaryLabelColor]
	+[UIColor(SafariServicesExtras) _sf_defaultWebAppStatusBarBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_touchIconBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_colorNamed:]
	+[UIColor(SafariServicesExtras) _sf_defaultWebContentBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_defaultBookmarkFolderBackgroundColor]
	+[UIColor(SafariServicesExtras) _sf_automationBackgroundColor]

WKBackForwardListItem(SafariServicesExtras)
	// instance methods
	-[WKBackForwardListItem(SafariServicesExtras) _sf_quickLookDocument]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_setQuickLookDocument:]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_securityInfo]
	-[WKBackForwardListItem(SafariServicesExtras) _sf_setSecurityInfo:]

WBSSavedPassword(WebUIExtras)
	// instance methods
	-[WBSSavedPassword(WebUIExtras) _firstSiteMatchingSearchPattern:withTokenizer:]
	-[WBSSavedPassword(WebUIExtras) safari_getTitle:detail:forTableViewCell:withSearchPattern:warningImage:leftToRight:]

WKFrameInfo(SafariServicesExtras)
	// instance methods
	-[WKFrameInfo(SafariServicesExtras) _sf_titleForJavaScriptDialog]

LSApplicationWorkspace(SafariServicesExtras)
	// instance methods
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_openURL:inApplication:withOptions:completionHandler:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_openURL:withOptions:completionHandler:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_shouldOverrideiCloudSharingURL:withAppRedirectURL:referrerURL:loadedUsingDesktopUserAgent:]
	-[LSApplicationWorkspace(SafariServicesExtras) _sf_tryOpeningURLInDefaultApp:isContentManaged:completionHandler:]

WKNavigationResponse(SafariServicesExtras)
	// instance methods
	-[WKNavigationResponse(SafariServicesExtras) _sf_allowReloadingInMainFrame]
	-[WKNavigationResponse(SafariServicesExtras) _sf_suggestedFilename]
	-[WKNavigationResponse(SafariServicesExtras) _sf_responsePolicy:uti:]

NSLocale(SafariServicesExtras)
	// class methods
	+[NSLocale(SafariServicesExtras) _sf_isRTL]

UIDocumentInteractionController(_SFManagedSourceSupport)
	// class methods
	+[UIDocumentInteractionController(_SFManagedSourceSupport) _sf_interactionControllerWithDocumentURL:sourceURL:]

LSDocumentProxy(_SFManagedSourceSupport)
	// class methods
	+[LSDocumentProxy(_SFManagedSourceSupport) _sf_documentProxyForName:type:MIMEType:sourceURL:]

UIDocumentPickerViewController(_SFManagedSourceSupport)
	// class methods
	+[UIDocumentPickerViewController(_SFManagedSourceSupport) _sf_documentPickerViewControllerWithURL:inMode:sourceURL:]

UIBlurEffect(SafariServicesExtras)
	// class methods
	+[UIBlurEffect(SafariServicesExtras) _sf_defaultPopoverBackgroundEffect]

UIScrollView(SafariServicesExtras)
	// class methods
	+[UIScrollView(SafariServicesExtras) _sf_supportsPerAxisIndicatorInsets]
	+[UIScrollView(SafariServicesExtras) _sf_baseInsetsForVerticalScrollIndicatorInScrollViewContainerView:]
	+[UIScrollView(SafariServicesExtras) _sf_baseInsetsForHorizontalScrollIndicatorInScrollViewContainerView:]
	+[UIScrollView(SafariServicesExtras) _sf_baseVerticalScrollIndicatorInsetsExtendFullHeight:]
	+[UIScrollView(SafariServicesExtras) _sf_baseHorizontalScrollIndicatorInsetsExtendFullWidth:]

	// instance methods
	-[UIScrollView(SafariServicesExtras) _sf_isScrolledToOrPastBottom]
	-[UIScrollView(SafariServicesExtras) _sf_isScrolledPastTop]
	-[UIScrollView(SafariServicesExtras) _sf_setContentInsetAdjustments:]

UIImageSymbolConfiguration(SafariServicesExtras)
	// class methods
	+[UIImageSymbolConfiguration(SafariServicesExtras) _sf_staticConfigurationWithTextStyle:scale:]
	+[UIImageSymbolConfiguration(SafariServicesExtras) _sf_staticConfigurationWithTextStyle:scale:compatibleWithTraitCollection:]

NSURLResponse(SafariServicesExtras)
	// instance methods
	-[NSURLResponse(SafariServicesExtras) _sf_hasAttachmentWithFilename]
	-[NSURLResponse(SafariServicesExtras) sf_shouldDownloadDueToContentDisposition:]
	-[NSURLResponse(SafariServicesExtras) _sf_allowedToOverrideContentDispositionAttachment]
	-[NSURLResponse(SafariServicesExtras) sf_hasXMLAttachment]

UIBarButtonItem(SafariServicesExtras)
	// class methods
	+[UIBarButtonItem(SafariServicesExtras) _sf_longPressAllowableMovement]

	// instance methods
	-[UIBarButtonItem(SafariServicesExtras) _sf_setTarget:longPressAction:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_setTarget:touchDownAction:longPressAction:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_longPressEnabled]
	-[UIBarButtonItem(SafariServicesExtras) _sf_setLongPressEnabled:]
	-[UIBarButtonItem(SafariServicesExtras) _sf_test_simulateLongPressInvocation]

UITableViewCell(SafariServicesExtras)
	// instance methods
	-[UITableViewCell(SafariServicesExtras) sf_setUsesVibrantSelection:]

UIApplication(SafariServicesExtras)
	// instance methods
	-[UIApplication(SafariServicesExtras) _sf_currentKeyboardModifierFlags]

UIResponder(SafariServicesExtras)
	// instance methods
	-[UIResponder(SafariServicesExtras) sf_inResponderChain]

NSItemProvider(SafariServicesExtras)
	// class methods
	+[NSItemProvider(SafariServicesExtras) _sf_loadObjectsFromItemProviders:usingLoader:completionHandler:]

	// instance methods
	-[NSItemProvider(SafariServicesExtras) _sf_loadObjectOfClasses:completionHandler:]
	-[NSItemProvider(SafariServicesExtras) _sf_registerFileRepresentationForQuickLookDocument:]

UIWebClip(SafariServicesExtras)
	// instance methods
	-[UIWebClip(SafariServicesExtras) _sf_applicationManifest]
	-[UIWebClip(SafariServicesExtras) _sf_applicationManifestPath]
	-[UIWebClip(SafariServicesExtras) _sf_setApplicationManifest:]

UIWindowScene(SafariServicesExtras)
	// instance methods
	-[UIWindowScene(SafariServicesExtras) _sf_openTelURL:completionHandler:]

NSHTTPCookie(SafariServicesExtras)
	// instance methods
	-[NSHTTPCookie(SafariServicesExtras) sf_matchesTopLevelDomain:]

WKNavigationAction(SafariServicesExtras)
	// instance methods
	-[WKNavigationAction(SafariServicesExtras) _sf_shouldAskAboutInsecureFormSubmission]
	-[WKNavigationAction(SafariServicesExtras) _sf_shouldPerformDownload]

NSLayoutConstraint(SafariServicesExtras)
	// class methods
	+[NSLayoutConstraint(SafariServicesExtras) _sf_setConstraints:active:]

UIView(SafariGraphicsUtilities)
	// class methods
	+[UIView(SafariGraphicsUtilities) _sf_cancelLinkAnimationsOnWindow:]
	+[UIView(SafariGraphicsUtilities) _sf_animateLinkImage:withAnimation:fromPoint:inView:toRect:inView:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
	+[UIView(SafariGraphicsUtilities) _sf_animateLinkImage:withAnimation:fromRect:inView:toRect:inView:afterImageDisappearsBlock:afterDestinationLayerBouncesBlock:]
	+[UIView(SafariGraphicsUtilities) sf_animate:usingDefaultTimingWithOptions:animations:completion:]
	+[UIView(SafariGraphicsUtilities) _sf_performLinkAnimation:onView:]

	// instance methods
	-[UIView(SafariGraphicsUtilities) _sf_usesLeftToRightLayout]
	-[UIView(SafariGraphicsUtilities) _sf_bottomUnsafeAreaFrameForToolbar]
	-[UIView(SafariGraphicsUtilities) ss_setUntransformedFrame:]
	-[UIView(SafariGraphicsUtilities) ss_untransformedFrame]
	-[UIView(SafariGraphicsUtilities) _sf_bottomUnsafeAreaFrame]
	-[UIView(SafariGraphicsUtilities) _sf_firstAncestorViewOfClass:]
	-[UIView(SafariGraphicsUtilities) _sf_isFullScreenWidth]
	-[UIView(SafariGraphicsUtilities) _sf_isFullScreenHeight]
	-[UIView(SafariGraphicsUtilities) _sf_hasLandscapeAspectRatio]
	-[UIView(SafariGraphicsUtilities) _sf_safeAreaInsetsFlippedForLayoutDirectionality]
	-[UIView(SafariGraphicsUtilities) _sf_safeAreaBounds]
	-[UIView(SafariGraphicsUtilities) _sf_convertY:toCoordinateSpace:]
	-[UIView(SafariGraphicsUtilities) _sf_snapshotImageFromIOSurface]
	-[UIView(SafariGraphicsUtilities) _sf_setOrderedSubviews:count:]

UIImage(SFGraphicsUtilities)
	// class methods
	+[UIImage(SFGraphicsUtilities) _sf_fallbackFavicon]
	+[UIImage(SFGraphicsUtilities) ss_imageNamed:]
	+[UIImage(SFGraphicsUtilities) sf_imageFromMainBundleNamed:]
	+[UIImage(SFGraphicsUtilities) _sf_faviconFromSystemImageNamed:]
	+[UIImage(SFGraphicsUtilities) _sf_favoritesFavicon]

	// instance methods
	-[UIImage(SFGraphicsUtilities) _sf_resizeImageToSize:]
	-[UIImage(SFGraphicsUtilities) _sf_hasRegisteredFaviconForDarkUserInterfaceStyle]
	-[UIImage(SFGraphicsUtilities) _sf_shouldApplyBackingForDarkBackdrop]
	-[UIImage(SFGraphicsUtilities) _sf_isLaunchImageSizedForOrientation:includesStatusBar:]
	-[UIImage(SFGraphicsUtilities) _sf_imageByResizingWithAccessibilityScale:]
	-[UIImage(SFGraphicsUtilities) _sf_initWithCGImage:tabSnapshotEffectsVersion:]
	-[UIImage(SFGraphicsUtilities) _sf_tabSnapshotEffectsVersion]
	-[UIImage(SFGraphicsUtilities) _sf_registerFaviconForDarkUserInterfaceStyle]

CertUITrustManager(SafariServicesExtras)
	// instance methods
	-[CertUITrustManager(SafariServicesExtras) userAllowsCertificateTrust:host:shouldPrompt:]

WKWebView(SafariServicesExtras)
	// instance methods
	-[WKWebView(SafariServicesExtras) _sf_securityInfo]
	-[WKWebView(SafariServicesExtras) _sf_setSecurityInfo:]
	-[WKWebView(SafariServicesExtras) _sf_saveUnsubmittedGeneratedPasswordAndRemoveFormMetadata]
	-[WKWebView(SafariServicesExtras) webui_presentingViewController]
	-[WKWebView(SafariServicesExtras) webui_lastGeneratedPasswordForCurrentBackForwardItem]
	-[WKWebView(SafariServicesExtras) webui_preventNavigationDuringAutoFillPrompt]
	-[WKWebView(SafariServicesExtras) webui_privateBrowsingEnabled]
	-[WKWebView(SafariServicesExtras) webui_removeFormMetadataForLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) _sf_effectiveViewToLayOut]
	-[WKWebView(SafariServicesExtras) webui_formMetadataForLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) webui_setFormMetadata:forLastPasswordGenerationOrSubmitEventInFrame:]
	-[WKWebView(SafariServicesExtras) webui_setLastGeneratedPasswordForCurrentBackForwardItem:]
	-[WKWebView(SafariServicesExtras) _sf_applicationDidEnterBackgroundOrWillTerminate:]

NSURL(SafariServicesExtras)
	// class methods
	+[NSURL(SafariServicesExtras) _sf_canCreateURLsFromDropSession:]
	+[NSURL(SafariServicesExtras) _sf_urlsFromDragItems:completionHandler:]

	// instance methods
	-[NSURL(SafariServicesExtras) _sf_accessingSecurityScopedResource:]
	-[NSURL(SafariServicesExtras) sf_absoluteStringWithoutFragment]
	-[NSURL(SafariServicesExtras) _sf_topLevelDomain]
	-[NSURL(SafariServicesExtras) sf_isOfflineReadingListURL]
	-[NSURL(SafariServicesExtras) _sf_highLevelDomainFromHostFallingBackToHostOrAbsoluteString]
	-[NSURL(SafariServicesExtras) sf_isWebSearchURL]
	-[NSURL(SafariServicesExtras) sf_isTestWebArchiveURL]
	-[NSURL(SafariServicesExtras) sf_isFacetimeURL]

UITraitCollection(SafariServicesExtras)
	// class methods
	+[UITraitCollection(SafariServicesExtras) _sf_traitCollectionWithBackgroundBlurEffect:]

	// instance methods
	-[UITraitCollection(SafariServicesExtras) _sf_backgroundBlurEffect]

WBSAnalyticsLogger(_SFAnalyticsLogger)
	// instance methods
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didBeginDownloadWithMIMEType:uti:downloadType:promptType:browserPersona:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_authenticatedForAutoFillWithCategory:onPageLoad:status:error:client:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_tappedOnSafariViewControllerToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_longTappedOnSafariViewControllerToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_safariViewControllerDidDismissWithMethod:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_safariViewControllerDidPresentFromHostApp:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_enteredTwoUpUsingMethod:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_twoFingerTappedLinkWithOutcome:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_tappedOnSafariToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_longTappedOnSafariToolbarButton:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_launchedOrResumedSafariWhileInPrivateBrowsing:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_reportAutoFillRequiresAuthenticationPreference:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_authenticatedForAutoFillWithCategory:onPageLoad:status:client:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_activatedHomeScreenQuickAction:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didTerminateWebProcessBeforeNavigationForReason:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didChooseIntervalFromAutomaticTabClosingFirstTimeExperiencePrompt:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_reportAutomaticTabClosingInterval:]
	-[WBSAnalyticsLogger(_SFAnalyticsLogger) _sf_didCloseTabsAutomaticallyWithCount:tabClosingInterval:]

UIDragItem(SafariServicesExtras)
	// class methods
	+[UIDragItem(SafariServicesExtras) _sf_loadObjectsFromDragItems:usingLocalObjectLoader:objectLoader:completionHandler:]
	+[UIDragItem(SafariServicesExtras) _sf_itemWithTabStateData:userActivity:]

	// instance methods
	-[UIDragItem(SafariServicesExtras) _sf_localBookmark]
	-[UIDragItem(SafariServicesExtras) _sf_localURL]
	-[UIDragItem(SafariServicesExtras) _sf_tabStateData]
	-[UIDragItem(SafariServicesExtras) _sf_initWithBookmark:]
	-[UIDragItem(SafariServicesExtras) _sf_initWithSiriSuggestion:]

NSURLProtectionSpace(SafariServicesExtras)
	// instance methods
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_highLevelDomainAndPort]
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_identities]
	-[NSURLProtectionSpace(SafariServicesExtras) _sf_canAuthenticate]

NSBundle(SafariServicesExtras)
	// class methods
	+[NSBundle(SafariServicesExtras) _sf_safariServicesBundle]

01 00 0500 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASCredentialServiceIdentifier 
01 00 0500 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASPasswordCredentialIdentity 
01 00 0500 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: ASWebAuthenticationSession 
01 00 1500 /System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices: BKSApplicationStateMonitor 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimationGroup 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPackage 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateController 
01 00 2500 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 1600 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLInUseAssertion 
01 00 1600 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 1900 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 1900 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 1900 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactVCardSerialization 
01 00 0c00 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNContactViewController 
01 00 1900 /System/Library/Frameworks/Contacts.framework/Contacts: CNLabeledValue 
01 00 1900 /System/Library/Frameworks/Contacts.framework/Contacts: CNPostalAddressFormatter 
01 00 1f00 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: CPAggregateDictionary 
01 00 1f00 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: CPNetworkObserver 
01 00 0600 /System/Library/PrivateFrameworks/CoreRecognition.framework/CoreRecognition: CRCameraReader 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTBundle 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTXPCServiceSubscriptionContext 
01 00 0d00 /System/Library/PrivateFrameworks/CertUI.framework/CertUI: CertUIPrompt 
01 00 0d00 /System/Library/PrivateFrameworks/CertUI.framework/CertUI: CertUITrustManager 
01 00 0f00 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 0700 /System/Library/PrivateFrameworks/DocumentManagerCore.framework/DocumentManagerCore: DOCDownloadImportManager 
01 00 0700 /System/Library/PrivateFrameworks/DocumentManagerCore.framework/DocumentManagerCore: DOCManagedPermission 
01 00 2f00 /System/Library/Frameworks/FileProvider.framework/FileProvider: FPItemManager 
01 00 2f00 /System/Library/Frameworks/FileProvider.framework/FileProvider: FPProviderDomain 
01 00 2300 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSContext 
01 00 2300 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSValue 
01 00 1700 /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication: LAContext 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSAppLink 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSDocumentProxy 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSResourceProxy 
01 00 1b00 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 1300 /System/Library/Frameworks/MapKit.framework/MapKit: MKMapItem 
01 00 1200 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeHUDController 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSByteCountFormatter 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionContext 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionItem 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileCoordinator 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPCookie 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPCookieStorage 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPURLResponse 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSItemProvider 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 2b00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: NSParagraphStyle 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProxy 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: NSTextAttachment 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredential 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredentialStorage 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLProtectionSpace 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLRequest 
01 00 2000 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLResponse 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 2e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 2a00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0900 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSListController 
01 00 0800 /System/Library/Frameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing: QLThumbnailGenerationRequest 
01 00 0800 /System/Library/Frameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing: QLThumbnailGenerator 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFAutoFillFeatureManager 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFAutoFillHelperProxy 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFCredentialProviderExtensionHelperProxy 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFCredentialProviderExtensionManager 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFDomainAssociationUtilities 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFPasswordCredentialIdentity 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSafariCredential 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSafariCredentialStore 
01 00 1100 /System/Library/PrivateFrameworks/SafariFoundation.framework/SafariFoundation: SFSuggestedUserProvider 
01 00 0200 /System/Library/PrivateFrameworks/CoreSuggestions.framework/CoreSuggestions: SGSuggestionsService 
01 00 1400 /System/Library/PrivateFrameworks/TextInput.framework/TextInput: TIAutofill 
01 00 1e00 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUDialRequest 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivity 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityItemProvider 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationExtensionActivity 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIAutofillExtrasSuggestion 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextualAction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentBrowserViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentInteractionController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDocumentPickerViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragInteraction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragItem 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreview 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreviewParameters 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropInteraction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropProposal 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontMetrics 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRendererFormat 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIInputView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIInputViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIKBScreenTraits 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyCommand 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardImpl 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardInputModeController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardLayout 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UILocalizedIndexedCollation 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenu 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenuController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenuItem 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationBar 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationItem 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenInIBooksActivity 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLAction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLContext 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPasteboard 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPercentDrivenInteractiveTransition 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPeripheralHost 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewAction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewPresentationController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintInfo 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintInteractionController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIPrintPageRenderer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIProgressView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIResponder 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneOpenURLOptions 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreenEdgePanGestureRecognizer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISearchBar 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISearchController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISelectionFeedbackGenerator 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISocialActivity 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarServer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeActionsConfiguration 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeGestureRecognizer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UISwitch 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCellLayoutManagerValue1 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedDragPreview 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITextField 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITextSuggestion 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIToolbar 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIVibrancyEffect 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClip 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClipLinkTag 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebGeolocationPolicyDecider 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsLogger 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariActivatedHomeScreenQuickActionEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariAutoFillAuthenticationEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariAutoFillAuthenticationPreferenceEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariDidTerminateWebProcessBeforeNavigation 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariEnterTwoUpEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariTappedOnToolbarButtonEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariTwoFingerTappedOnLinkEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariUsingPrivateBrowsingEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariViewControllerDismissedEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariViewControllerPresentedFromHostAppEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAnalyticsSafariViewControllerTappedOnToolbarButtonEvent 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAppLink 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSAutomaticReaderActivationManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSBookmarkFolderTouchIconProvider 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCache 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCertificateWarningPageContext 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCloudTab 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCoalescedAsynchronousWriter 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSConfigurationDataTransformer 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSContentBlockersPreferenceManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCredentialMatch 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCredentialMatchCriteria 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSCreditCardData 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSDigitalHealthManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFaviconProvider 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFeatureAvailability 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFluidProgressController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFluidProgressState 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormAutoFillCorrectionsSQLiteStore 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormAutoFillMetadataCorrector 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormControlMetadata 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormDataController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormMetadata 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSFormMetadataController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSGeolocationPreferenceManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSHistory 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSHistoryAccessSessionProxy 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSLeadImageCache 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSMultiRoundAutoFillManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSOneTimeCodeMonitor 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSOpenSearchURLTemplate 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPageZoomPreferenceManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPasswordAutoFillUtilities 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPerSitePreference 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPerSitePreferenceManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPerSitePreferenceTimeout 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSPerSitePreferencesSQLiteStore 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSReaderConfigurationManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSReaderFontDownloadManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSReaderFontManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSReaderNavigationPolicyDecider 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSReaderResources 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSRecentWebSearchesController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSRecentlyUsedAutoFillSet 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSRemotePlistController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSQLiteDatabase 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSQLiteStatement 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSavedPassword 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSavedPasswordAuditor 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSavedPasswordStore 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSScopeExitHandler 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSearchImpressionAnalyticsRecorder 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSearchProvider 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSingleCreditCardData 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSiriIntelligenceDonor 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSiteMetadataImageCache 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSSiteMetadataManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTabDialog 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTabDialogCancellationContext 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTabDialogCancellationExemption 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTabDialogManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTemplateIconMonogramConfiguration 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTemplateIconMonogramGenerator 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTouchIconCache 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTouchIconFetchOperation 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTouchIconRequest 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTouchIconResponse 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSTouchIconWebProcessPlugInPageController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSURLCompletionSessionProxy 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSURLSpoofingMitigator 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSUserMediaPermissionController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSWebProcessPlugIn 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBSWebProcessPlugInPageController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUCreditCardDataController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUFeatureManager 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUFormAutoFillPrompt 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUFormDataController 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUHistory 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUPrintPageRenderer 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WBUSheetController 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKBackForwardListItem 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKFrameInfo 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKNavigationAction 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKNavigationResponse 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKPreferences 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKProcessPool 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKUserContentController 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKUserScript 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInFrame 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInNodeHandle 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebProcessPlugInScriptWorld 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebView 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebViewConfiguration 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebpagePreferences 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WKWebsiteDataStore 
01 00 0b00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmark 
01 00 0b00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarkCollection 
01 00 0b00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarkWebFilterSettings 
01 00 0b00 /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks: WebBookmarksSettingsGateway 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WebEvent 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WebSecurityOrigin 
01 00 2900 /System/Library/PrivateFrameworks/WebUI.framework/WebUI: WebUIAlert 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: WebView 
01 00 0500 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASCredentialListViewController 
01 00 0500 /System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices: _ASPasswordCredentialAuthenticationViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UIActivityItemCustomization 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UIActivityItemCustomizationGroup 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UIClickInteraction 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UIFallbackPresentationViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteViewController 
01 00 2800 /System/Library/Frameworks/UIKit.framework/UIKit: _UISheetPresentationController 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKApplicationManifest 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKElementAction 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKFrameHandle 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKProcessPoolConfiguration 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKRemoteObjectInterface 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKUserContentExtensionStore 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKUserContentWorld 
01 00 2700 /System/Library/Frameworks/WebKit.framework/WebKit: _WKWebsiteDataStoreConfiguration 
