|| __DATA.__common _NENexusFlowCallbacks
|| __DATA.__common _NENexusFlowIdentifier
|| __DATA.__common _symptom_create
|| __DATA.__common _symptom_send
|| __DATA.__common _symptom_set_additional_qualifier
|| __DATA.__common _symptom_set_qualifier
|| __DATA.__data _IKEV2_SESSION_RXMT_BACKOFF
|| __DATA.__data _NEFilterProviderRemediationMapRemediationButtonTexts
|| __DATA.__data _NEFilterProviderRemediationMapRemediationURLs
|| __DATA.__data _NEIKEv2DH_curve25519
|| __DATA.__data _NEIKEv2DH_ecp256
|| __DATA.__data _NEIKEv2DH_ecp384
|| __DATA.__data _NEIKEv2DH_ecp521
|| __DATA.__data _NEIKEv2DH_modp1024
|| __DATA.__data _NEIKEv2DH_modp1536
|| __DATA.__data _NEIKEv2DH_modp2048
|| __DATA.__data _NEIKEv2DH_modp3072
|| __DATA.__data _NEIKEv2DH_modp4096
|| __DATA.__data _NEIKEv2DH_modp6144
|| __DATA.__data _NEIKEv2DH_modp768
|| __DATA.__data _NEIKEv2DH_modp8192
|| __DATA.__data _kNEHotspotHelperOptionDisplayName
|| __DATA.__objc_data _OBJC_CLASS_$_NEAOVPNException
|| __DATA.__objc_data _OBJC_CLASS_$_NEAOVPNNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEAccountIdentifiers
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentAppProxyExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentDNSProxyExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentFilterExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentPacketTunnelExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAgentTunnelExtension
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppInfo
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppInfoCache
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppProxyFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppProxyProviderManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppProxyTCPFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppProxyUDPFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppPushCallKitXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppPushManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppPushProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppSidecarPolicySession
|| __DATA.__objc_data _OBJC_CLASS_$_NEAppVPNNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEBundleProxy
|| __DATA.__objc_data _OBJC_CLASS_$_NEByteParser
|| __DATA.__objc_data _OBJC_CLASS_$_NEContentFilterNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSOverHTTPSSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSOverTLSSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSProxyManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSProxyProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSProxyProviderProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSQuery
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSResourceRecord
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSSettingsManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEDNSSettingsNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEEthernetTunnelNetworkSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEEthernetTunnelProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEEvaluateConnectionRule
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionAppProxyProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionAppProxyProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionAppPushProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionAppPushProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionDNSProxyProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionDNSProxyProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionPacketTunnelProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionPacketTunnelProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionTunnelProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEExtensionTunnelProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterAbsoluteVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterBlockPage
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterBrowserFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterControlExtensionProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterControlExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterControlProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterControlVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterDataExtensionProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterDataExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterDataSavedMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterDataVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterExtensionProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterNewFlowVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterPacketContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterPacketExtensionProviderContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterPacketExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterPacketInterpose
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterPacketProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterProviderConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterRemediationVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterReport
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterRule
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterSocketFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEFilterVerdict
|| __DATA.__objc_data _OBJC_CLASS_$_NEFlowMetaData
|| __DATA.__objc_data _OBJC_CLASS_$_NEFlowNexus
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotConfigurationHelper
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotConfigurationManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotEAPSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotHS20Settings
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotHelper
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotHelperCommand
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotHelperResponse
|| __DATA.__objc_data _OBJC_CLASS_$_NEHotspotNetwork
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ASN1DNIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AddressAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AddressIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AddressList
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AppVersionAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AuthPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2AuthenticationProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2CertificatePayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2CertificateRequestPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ChildSA
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ChildSAConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ChildSAPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ChildSAProposal
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ConfigPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ConfigurationAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ConfigurationMessage
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2CreateChildPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Crypto
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2CustomData
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2CustomPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DHKeys
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DHProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DNSDomainAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DeleteChildContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DeleteIKEContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2DeletePayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EAP
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EAPPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EAPProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ESPSPI
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EncryptedFragmentPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EncryptedPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2EncryptionProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2FQDNIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Helper
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKEAuthPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESA
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESAConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESAInitPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESAPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESAProposal
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IKESPI
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4AddressAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4DHCPAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4DNSAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4NetmaskAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4PCSCFAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv4SubnetAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv6AddressAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv6DHCPAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv6DNSAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv6PCSCFAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IPv6SubnetAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Identifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IdentifierPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2InformationalContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2InformationalPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2InitiatorIdentifierPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2InitiatorTrafficSelectorPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2InitiatorTransportIPv6Address
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2IntegrityProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2KeyExchangePayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2KeyIDIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Listener
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2MOBIKE
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2MOBIKEContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2NewChildContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2NoncePayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2NotifyPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2PRFProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Packet
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2PacketTunnelProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Payload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2PrivateNotify
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2RTT
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Rekey
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2RekeyChildContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2RekeyIKEContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2RequestContext
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ResponderIdentifierPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ResponderTrafficSelectorPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ResponderTransportIPv6Address
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2ResponseConfigPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2SPI
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Server
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Session
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2SessionConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2SignatureHashProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2StringAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2SubnetAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2SupportedAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2TrafficSelector
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2TrafficSelectorPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2Transport
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2TransportClient
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2UserFQDNIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2VendorData
|| __DATA.__objc_data _OBJC_CLASS_$_NEIKEv2VendorIDPayload
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPC
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPCWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPSecSA
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPSecSAKernelSession
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPSecSALocalSession
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPSecSASession
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPsecNexus
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPv4Route
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPv4Settings
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPv6Route
|| __DATA.__objc_data _OBJC_CLASS_$_NEIPv6Settings
|| __DATA.__objc_data _OBJC_CLASS_$_NEIdentityKeychainItem
|| __DATA.__objc_data _OBJC_CLASS_$_NEInternetNexus
|| __DATA.__objc_data _OBJC_CLASS_$_NEKeychainItem
|| __DATA.__objc_data _OBJC_CLASS_$_NEL2TPUserPreferences
|| __DATA.__objc_data _OBJC_CLASS_$_NELoopbackConnection
|| __DATA.__objc_data _OBJC_CLASS_$_NENetworkPropertiesCache
|| __DATA.__objc_data _OBJC_CLASS_$_NENetworkRule
|| __DATA.__objc_data _OBJC_CLASS_$_NENexus
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusBrowse
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusFlowAssignedProperties
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusFlowDivertFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusFlowManager
|| __DATA.__objc_data _OBJC_CLASS_$_NENexusPathFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEOnDemandRule
|| __DATA.__objc_data _OBJC_CLASS_$_NEOnDemandRuleConnect
|| __DATA.__objc_data _OBJC_CLASS_$_NEOnDemandRuleDisconnect
|| __DATA.__objc_data _OBJC_CLASS_$_NEOnDemandRuleEvaluateConnection
|| __DATA.__objc_data _OBJC_CLASS_$_NEOnDemandRuleIgnore
|| __DATA.__objc_data _OBJC_CLASS_$_NEPacket
|| __DATA.__objc_data _OBJC_CLASS_$_NEPacketTunnelFlow
|| __DATA.__objc_data _OBJC_CLASS_$_NEPacketTunnelNetworkSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NEPacketTunnelProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NEPathEvent
|| __DATA.__objc_data _OBJC_CLASS_$_NEPathEventObserver
|| __DATA.__objc_data _OBJC_CLASS_$_NEPerApp
|| __DATA.__objc_data _OBJC_CLASS_$_NEPolicyRouteRule
|| __DATA.__objc_data _OBJC_CLASS_$_NEPrivateLTENetwork
|| __DATA.__objc_data _OBJC_CLASS_$_NEProcessIdentity
|| __DATA.__objc_data _OBJC_CLASS_$_NEProfileIngestion
|| __DATA.__objc_data _OBJC_CLASS_$_NEProfilePayloadAOVPN
|| __DATA.__objc_data _OBJC_CLASS_$_NEProfilePayloadBase
|| __DATA.__objc_data _OBJC_CLASS_$_NEProfilePayloadBaseVPN
|| __DATA.__objc_data _OBJC_CLASS_$_NEProfilePayloadContentFilter
|| __DATA.__objc_data _OBJC_CLASS_$_NEProviderAppConfigurationClient
|| __DATA.__objc_data _OBJC_CLASS_$_NEProviderServer
|| __DATA.__objc_data _OBJC_CLASS_$_NEProviderXPCListener
|| __DATA.__objc_data _OBJC_CLASS_$_NEProvider_Subsystem
|| __DATA.__objc_data _OBJC_CLASS_$_NEProxyConfigurationNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEProxyServer
|| __DATA.__objc_data _OBJC_CLASS_$_NEProxySettings
|| __DATA.__objc_data _OBJC_CLASS_$_NETransparentProxyManager
|| __DATA.__objc_data _OBJC_CLASS_$_NETransparentProxyNetworkSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NETransparentProxyProvider
|| __DATA.__objc_data _OBJC_CLASS_$_NETrie
|| __DATA.__objc_data _OBJC_CLASS_$_NETunnelNetworkSettings
|| __DATA.__objc_data _OBJC_CLASS_$_NETunnelProviderManager
|| __DATA.__objc_data _OBJC_CLASS_$_NETunnelProviderSession
|| __DATA.__objc_data _OBJC_CLASS_$_NEUserNotification
|| __DATA.__objc_data _OBJC_CLASS_$_NEUtilConfigurationClient
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNConnectivityManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNConnectivitySession
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNIKEv1ProposalParameters
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNIKEv2SecurityAssociationParameters
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNManager
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNNetworkAgent
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolIKEv2
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolIPSec
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolL2TP
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolPPP
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolPPTP
|| __DATA.__objc_data _OBJC_CLASS_$_NEVPNProtocolPlugin
|| __DATA.__objc_data _OBJC_CLASS_$_NEVirtualInterfaceParameters
|| __DATA.__objc_data _OBJC_CLASS_$_NWTLSParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAOVPNException
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAOVPNNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAccountIdentifiers
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentAppProxyExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentDNSProxyExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentFilterExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentPacketTunnelExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAgentTunnelExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppInfoCache
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppProxyFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppProxyProviderManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppProxyTCPFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppProxyUDPFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppPushCallKitXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppPushManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppPushProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppSidecarPolicySession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEAppVPNNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEBundleProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_NEByteParser
|| __DATA.__objc_data _OBJC_METACLASS_$_NEContentFilterNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSOverHTTPSSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSOverTLSSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSProxyManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSProxyProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSProxyProviderProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSResourceRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSSettingsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEDNSSettingsNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEEthernetTunnelNetworkSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEEthernetTunnelProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEEvaluateConnectionRule
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionAppProxyProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionAppProxyProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionAppPushProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionAppPushProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionDNSProxyProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionDNSProxyProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionPacketTunnelProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionPacketTunnelProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionTunnelProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEExtensionTunnelProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterAbsoluteVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterBlockPage
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterBrowserFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterControlExtensionProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterControlExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterControlProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterControlVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterDataExtensionProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterDataExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterDataSavedMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterDataVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterExtensionProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterNewFlowVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterPacketContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterPacketExtensionProviderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterPacketExtensionProviderHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterPacketInterpose
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterPacketProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterProviderConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterRemediationVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterReport
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterRule
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterSocketFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFilterVerdict
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFlowMetaData
|| __DATA.__objc_data _OBJC_METACLASS_$_NEFlowNexus
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotConfigurationHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotConfigurationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotEAPSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotHS20Settings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotHelperCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotHelperResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_NEHotspotNetwork
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ASN1DNIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AddressAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AddressIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AddressList
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AppVersionAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AuthPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2AuthenticationProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2CertificatePayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2CertificateRequestPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ChildSA
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ChildSAConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ChildSAPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ChildSAProposal
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ConfigPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ConfigurationAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ConfigurationMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2CreateChildPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Crypto
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2CustomData
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2CustomPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DHKeys
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DHProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DNSDomainAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DeleteChildContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DeleteIKEContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2DeletePayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EAP
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EAPPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EAPProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ESPSPI
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EncryptedFragmentPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EncryptedPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2EncryptionProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2FQDNIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Helper
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKEAuthPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESA
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESAConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESAInitPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESAPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESAProposal
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IKESPI
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4AddressAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4DHCPAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4DNSAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4NetmaskAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4PCSCFAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv4SubnetAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv6AddressAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv6DHCPAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv6DNSAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv6PCSCFAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IPv6SubnetAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Identifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IdentifierPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2InformationalContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2InformationalPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2InitiatorIdentifierPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2InitiatorTrafficSelectorPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2InitiatorTransportIPv6Address
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2IntegrityProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2KeyExchangePayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2KeyIDIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Listener
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2MOBIKE
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2MOBIKEContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2NewChildContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2NoncePayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2NotifyPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2PRFProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Packet
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2PacketTunnelProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Payload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2PrivateNotify
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2RTT
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Rekey
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2RekeyChildContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2RekeyIKEContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2RequestContext
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ResponderIdentifierPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ResponderTrafficSelectorPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ResponderTransportIPv6Address
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2ResponseConfigPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2SPI
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Server
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Session
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2SessionConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2SignatureHashProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2StringAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2SubnetAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2SupportedAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2TrafficSelector
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2TrafficSelectorPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2Transport
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2TransportClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2UserFQDNIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2VendorData
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIKEv2VendorIDPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPC
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPCWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPSecSA
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPSecSAKernelSession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPSecSALocalSession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPSecSASession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPsecNexus
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPv4Route
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPv4Settings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPv6Route
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIPv6Settings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEIdentityKeychainItem
|| __DATA.__objc_data _OBJC_METACLASS_$_NEInternetNexus
|| __DATA.__objc_data _OBJC_METACLASS_$_NEKeychainItem
|| __DATA.__objc_data _OBJC_METACLASS_$_NEL2TPUserPreferences
|| __DATA.__objc_data _OBJC_METACLASS_$_NELoopbackConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_NENetworkPropertiesCache
|| __DATA.__objc_data _OBJC_METACLASS_$_NENetworkRule
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexus
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusBrowse
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusFlowAssignedProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusFlowDivertFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusFlowManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NENexusPathFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEOnDemandRule
|| __DATA.__objc_data _OBJC_METACLASS_$_NEOnDemandRuleConnect
|| __DATA.__objc_data _OBJC_METACLASS_$_NEOnDemandRuleDisconnect
|| __DATA.__objc_data _OBJC_METACLASS_$_NEOnDemandRuleEvaluateConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_NEOnDemandRuleIgnore
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPacket
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPacketTunnelFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPacketTunnelNetworkSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPacketTunnelProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPathEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPathEventObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPerApp
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPolicyRouteRule
|| __DATA.__objc_data _OBJC_METACLASS_$_NEPrivateLTENetwork
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProcessIdentity
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProfileIngestion
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProfilePayloadAOVPN
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProfilePayloadBase
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProfilePayloadBaseVPN
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProfilePayloadContentFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProviderAppConfigurationClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProviderServer
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProviderXPCListener
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProvider_Subsystem
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProxyConfigurationNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProxyServer
|| __DATA.__objc_data _OBJC_METACLASS_$_NEProxySettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NETransparentProxyManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NETransparentProxyNetworkSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NETransparentProxyProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_NETrie
|| __DATA.__objc_data _OBJC_METACLASS_$_NETunnelNetworkSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_NETunnelProviderManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NETunnelProviderSession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEUserNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_NEUtilConfigurationClient
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNConnectivityManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNConnectivitySession
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNIKEv1ProposalParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNIKEv2SecurityAssociationParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNManager
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNNetworkAgent
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolIKEv2
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolIPSec
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolL2TP
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolPPP
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolPPTP
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVPNProtocolPlugin
|| __DATA.__objc_data _OBJC_METACLASS_$_NEVirtualInterfaceParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_NWTLSParameters
|| __DATA.__objc_ivar _OBJC_IVAR_$_NEFilterBlockPage._organization
|| __DATA.__objc_ivar _OBJC_IVAR_$_NEFilterExtensionProviderContext._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_NELoopbackConnection._blobSizes
|| __DATA.__objc_ivar _OBJC_IVAR_$_NELoopbackConnection._currentInputFrames
|| __DATA.__objc_ivar _OBJC_IVAR_$_NELoopbackConnection._protocol
|| __DATA_CONST.__const _IKEv2ProviderDisconnectionErrorDomain
|| __DATA_CONST.__const _NEAppProxyErrorDomain
|| __DATA_CONST.__const _NEAppPushErrorDomain
|| __DATA_CONST.__const _NEDNSProxyConfigurationDidChangeNotification
|| __DATA_CONST.__const _NEDNSProxyErrorDomain
|| __DATA_CONST.__const _NEDNSSettingsConfigurationDidChangeNotification
|| __DATA_CONST.__const _NEDNSSettingsErrorDomain
|| __DATA_CONST.__const _NEFilterConfigurationDidChangeNotification
|| __DATA_CONST.__const _NEFilterErrorDomain
|| __DATA_CONST.__const _NEHotspotConfigurationErrorDomain
|| __DATA_CONST.__const _NEIKEv2ErrorDomain
|| __DATA_CONST.__const _NEIKEv2ProtocolErrorDomain
|| __DATA_CONST.__const _NETunnelProviderErrorDomain
|| __DATA_CONST.__const _NEVPNConfigurationChangeNotification
|| __DATA_CONST.__const _NEVPNConnectionErrorDomain
|| __DATA_CONST.__const _NEVPNConnectionStartOptionPassword
|| __DATA_CONST.__const _NEVPNConnectionStartOptionUsername
|| __DATA_CONST.__const _NEVPNErrorDomain
|| __DATA_CONST.__const _NEVPNStatusDidChangeNotification
|| __DATA_CONST.__const _kCFErrorDomainVPNTunnel
|| __DATA_CONST.__const _kNEAccountIdentifierMatchKey
|| __DATA_CONST.__const _kNEActionAllowValue
|| __DATA_CONST.__const _kNEActionDropValue
|| __DATA_CONST.__const _kNEActionKey
|| __DATA_CONST.__const _kNEActiveVPNKey
|| __DATA_CONST.__const _kNEAllowAllCaptiveNetworkPluginsKey
|| __DATA_CONST.__const _kNEAllowCaptiveWebSheetKey
|| __DATA_CONST.__const _kNEAllowCellularDataKey
|| __DATA_CONST.__const _kNEAllowRoamingCellularDataKey
|| __DATA_CONST.__const _kNEAllowedCaptiveNetworkPluginsKey
|| __DATA_CONST.__const _kNEAlwaysOnKey
|| __DATA_CONST.__const _kNEAppIdentifierMatchesKey
|| __DATA_CONST.__const _kNEAppPathKey
|| __DATA_CONST.__const _kNEAppRules
|| __DATA_CONST.__const _kNEApplicationExceptionsKey
|| __DATA_CONST.__const _kNEApplicationRulesKey
|| __DATA_CONST.__const _kNEAuthEAPPluginsKey
|| __DATA_CONST.__const _kNEAuthMethodCertificateValue
|| __DATA_CONST.__const _kNEAuthMethodExtendedValue
|| __DATA_CONST.__const _kNEAuthMethodNoneValue
|| __DATA_CONST.__const _kNEAuthMethodPasswordValue
|| __DATA_CONST.__const _kNEAuthMethodPromptValue
|| __DATA_CONST.__const _kNEAuthMethodSharedSecretValue
|| __DATA_CONST.__const _kNEAuthNameKey
|| __DATA_CONST.__const _kNEAuthPasswordKey
|| __DATA_CONST.__const _kNEAuthPasswordPluginTypeKey
|| __DATA_CONST.__const _kNEAuthProtocolEAPKRBValue
|| __DATA_CONST.__const _kNEAuthProtocolEAPRSAValue
|| __DATA_CONST.__const _kNEAuthProtocolEAPTLSValue
|| __DATA_CONST.__const _kNEAuthProtocolEAPValue
|| __DATA_CONST.__const _kNEAuthProtocolKey
|| __DATA_CONST.__const _kNEAuthProtocolTokenCard
|| __DATA_CONST.__const _kNEAuthenticationMethodKey
|| __DATA_CONST.__const _kNEBundleIdentifierKey
|| __DATA_CONST.__const _kNECCPEnabled
|| __DATA_CONST.__const _kNECCPMPPE128Enabled
|| __DATA_CONST.__const _kNECCPMPPE40Enabled
|| __DATA_CONST.__const _kNECFDisableDefaultDropKey
|| __DATA_CONST.__const _kNECFFilterBrowsersKey
|| __DATA_CONST.__const _kNECFFilterGradeKey
|| __DATA_CONST.__const _kNECFFilterPacketsKey
|| __DATA_CONST.__const _kNECFFilterSocketsKey
|| __DATA_CONST.__const _kNECFFilterTypeKey
|| __DATA_CONST.__const _kNECFFilterTypeValuePlugin
|| __DATA_CONST.__const _kNECFOrganizationKey
|| __DATA_CONST.__const _kNECFPasswordDescriptionValue
|| __DATA_CONST.__const _kNECFPluginBundleIDKey
|| __DATA_CONST.__const _kNECFPreserveExistingConnectionsKey
|| __DATA_CONST.__const _kNECFServerAddressKey
|| __DATA_CONST.__const _kNECalendarAgentDesignatedRequirement
|| __DATA_CONST.__const _kNECalendarAgentPath
|| __DATA_CONST.__const _kNECalendarAgentSigningIdentifier
|| __DATA_CONST.__const _kNECalendarDesignatedRequirement
|| __DATA_CONST.__const _kNECalendarDomainsPayloadKey
|| __DATA_CONST.__const _kNECalendarSigningIdentifier
|| __DATA_CONST.__const _kNECertificateDataKey
|| __DATA_CONST.__const _kNECertificatePassphraseKey
|| __DATA_CONST.__const _kNECommRemoteAddressKey
|| __DATA_CONST.__const _kNEContactsDesignatedRequirement
|| __DATA_CONST.__const _kNEContactsDomainsPayloadKey
|| __DATA_CONST.__const _kNEContactsSigningIdentifier
|| __DATA_CONST.__const _kNEContentFilterUUIDKey
|| __DATA_CONST.__const _kNEDNSDomainMatchKey
|| __DATA_CONST.__const _kNEDNSKey
|| __DATA_CONST.__const _kNEDNSProxyAppBundleIdentifierKey
|| __DATA_CONST.__const _kNEDNSProxyProviderBundleIdentifierKey
|| __DATA_CONST.__const _kNEDNSProxyProviderConfigurationKey
|| __DATA_CONST.__const _kNEDNSProxyUUIDKey
|| __DATA_CONST.__const _kNEDNSSettingsDNSSettingsKey
|| __DATA_CONST.__const _kNEDNSSettingsProhibitDisablementKey
|| __DATA_CONST.__const _kNEDataAccessDaemonPath
|| __DATA_CONST.__const _kNEDataAccessDaemonSigningIdentifier
|| __DATA_CONST.__const _kNEDesignatedRequirementKey
|| __DATA_CONST.__const _kNEDisconnectOnDemandEnabledKey
|| __DATA_CONST.__const _kNEDisconnectOnFastUserSwitch
|| __DATA_CONST.__const _kNEDisconnectOnIdle
|| __DATA_CONST.__const _kNEDisconnectOnIdleTimeOutKey
|| __DATA_CONST.__const _kNEDisconnectOnIdleTimer
|| __DATA_CONST.__const _kNEDisconnectOnLogout
|| __DATA_CONST.__const _kNEDisconnectOnSleep
|| __DATA_CONST.__const _kNEDisconnectOnWake
|| __DATA_CONST.__const _kNEDisconnectOnWakeTimer
|| __DATA_CONST.__const _kNEEnabledKey
|| __DATA_CONST.__const _kNEEncryptedIPSecSharedSecretKey
|| __DATA_CONST.__const _kNEEnforceRoutes
|| __DATA_CONST.__const _kNEExchangeSyncDesignatedRequirement
|| __DATA_CONST.__const _kNEExchangeSyncPath
|| __DATA_CONST.__const _kNEExchangeSyncSigningIdentifier
|| __DATA_CONST.__const _kNEExcludeLocalNetworks
|| __DATA_CONST.__const _kNEExcludedDomainsPayloadKey
|| __DATA_CONST.__const _kNEExecutableMatchKey
|| __DATA_CONST.__const _kNEExportedSharedSecretKey
|| __DATA_CONST.__const _kNEExtendedAuthEnabledKey
|| __DATA_CONST.__const _kNEExtensibleSSOProvider
|| __DATA_CONST.__const _kNEFilterDataProviderBundleIdentifierKey
|| __DATA_CONST.__const _kNEFilterDataProviderDesignatedRequirementKey
|| __DATA_CONST.__const _kNEFilterPacketProviderBundleIdentifierKey
|| __DATA_CONST.__const _kNEFilterPacketProviderDesignatedRequirementKey
|| __DATA_CONST.__const _kNEFlowPropertyAppRuleIdentifier
|| __DATA_CONST.__const _kNEFlowPropertyAppUnique
|| __DATA_CONST.__const _kNEFlowPropertyDestinationEndpoint
|| __DATA_CONST.__const _kNEFlowPropertyDestinationName
|| __DATA_CONST.__const _kNEFlowPropertyNetworkServiceType
|| __DATA_CONST.__const _kNEFlowPropertyType
|| __DATA_CONST.__const _kNEIKEv1DiffieHellmanGroupKey
|| __DATA_CONST.__const _kNEIKEv1EncryptionAlgorithm3DESValue
|| __DATA_CONST.__const _kNEIKEv1EncryptionAlgorithmAES256Value
|| __DATA_CONST.__const _kNEIKEv1EncryptionAlgorithmAESValue
|| __DATA_CONST.__const _kNEIKEv1EncryptionAlgorithmDESValue
|| __DATA_CONST.__const _kNEIKEv1EncryptionAlgorithmKey
|| __DATA_CONST.__const _kNEIKEv1ExchangeModeKey
|| __DATA_CONST.__const _kNEIKEv1IntegrityAlgorithmKey
|| __DATA_CONST.__const _kNEIKEv1IntegrityAlgorithmMD5Value
|| __DATA_CONST.__const _kNEIKEv1IntegrityAlgorithmSHA1Value
|| __DATA_CONST.__const _kNEIKEv1LifetimeKey
|| __DATA_CONST.__const _kNEIKEv1ProposalsKey
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeECDSA256Value
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeECDSA384Value
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeECDSA521Value
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeEd25519Value
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeKey
|| __DATA_CONST.__const _kNEIKEv2CertificateTypeRSAValue
|| __DATA_CONST.__const _kNEIKEv2ChildSAParametersKey
|| __DATA_CONST.__const _kNEIKEv2DeadPeerDetectionRateHighValue
|| __DATA_CONST.__const _kNEIKEv2DeadPeerDetectionRateKey
|| __DATA_CONST.__const _kNEIKEv2DeadPeerDetectionRateLowValue
|| __DATA_CONST.__const _kNEIKEv2DeadPeerDetectionRateMediumValue
|| __DATA_CONST.__const _kNEIKEv2DeadPeerDetectionRateNoneValue
|| __DATA_CONST.__const _kNEIKEv2DiffieHellmanGroupKey
|| __DATA_CONST.__const _kNEIKEv2DisableMOBIKEKey
|| __DATA_CONST.__const _kNEIKEv2DisableMOBIKERetryOnWakeKey
|| __DATA_CONST.__const _kNEIKEv2DisableRedirectKey
|| __DATA_CONST.__const _kNEIKEv2EnableCertificateRevocationCheckKey
|| __DATA_CONST.__const _kNEIKEv2EnableFallbackKey
|| __DATA_CONST.__const _kNEIKEv2EnablePFSKey
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithm3DESValue
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmAES128GCMValue
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmAES128Value
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmAES256GCMValue
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmAES256Value
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmChaCha20Poly1305Value
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmDESValue
|| __DATA_CONST.__const _kNEIKEv2EncryptionAlgorithmKey
|| __DATA_CONST.__const _kNEIKEv2IKESAParametersKey
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmKey
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmSHA160Value
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmSHA256Value
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmSHA384Value
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmSHA512Value
|| __DATA_CONST.__const _kNEIKEv2IntegrityAlgorithmSHA96Value
|| __DATA_CONST.__const _kNEIKEv2Key
|| __DATA_CONST.__const _kNEIKEv2LifeTimeInMinutesKey
|| __DATA_CONST.__const _kNEIKEv2MTUKey
|| __DATA_CONST.__const _kNEIKEv2NATKeepAliveIntervalKey
|| __DATA_CONST.__const _kNEIKEv2NATKeepAliveOffloadEnableKey
|| __DATA_CONST.__const _kNEIKEv2ServerCertificateCommonNameKey
|| __DATA_CONST.__const _kNEIKEv2ServerCertificateIssuerCommonNameKey
|| __DATA_CONST.__const _kNEIKEv2StrictCertificateRevocationCheckKey
|| __DATA_CONST.__const _kNEIKEv2TLSMaximumVersionKey
|| __DATA_CONST.__const _kNEIKEv2TLSMinimumVersionKey
|| __DATA_CONST.__const _kNEIKEv2TLSVersion1_0Value
|| __DATA_CONST.__const _kNEIKEv2TLSVersion1_1Value
|| __DATA_CONST.__const _kNEIKEv2TLSVersion1_2Value
|| __DATA_CONST.__const _kNEIKEv2UseConfigurationAttributeInternalIPSubnetKey
|| __DATA_CONST.__const _kNEIPConfigAutomaticValue
|| __DATA_CONST.__const _kNEIPConfigLinkLocalValue
|| __DATA_CONST.__const _kNEIPConfigManualValue
|| __DATA_CONST.__const _kNEIPConfigMethodKey
|| __DATA_CONST.__const _kNEIPConfigPPPValue
|| __DATA_CONST.__const _kNEIPSecIKEVersionKey
|| __DATA_CONST.__const _kNEIPSecKey
|| __DATA_CONST.__const _kNEIPSecLocalIdentifierKey
|| __DATA_CONST.__const _kNEIPSecLocalIdentifierTypeKey
|| __DATA_CONST.__const _kNEIPSecPasswordDescriptionValue
|| __DATA_CONST.__const _kNEIPSecPasswordServiceExtensionValue
|| __DATA_CONST.__const _kNEIPSecRemoteAddressKey
|| __DATA_CONST.__const _kNEIPSecRemoteIdentifierKey
|| __DATA_CONST.__const _kNEIPSecSharedSecretDescriptionValue
|| __DATA_CONST.__const _kNEIPSecSharedSecretKey
|| __DATA_CONST.__const _kNEIPSecXAuthMethodKey
|| __DATA_CONST.__const _kNEIPSecXAuthNameKey
|| __DATA_CONST.__const _kNEIPSecXAuthPasswordEncryptionKey
|| __DATA_CONST.__const _kNEIPSecXAuthPasswordKey
|| __DATA_CONST.__const _kNEIPSecXAuthPasswordRefKey
|| __DATA_CONST.__const _kNEIPv4Key
|| __DATA_CONST.__const _kNEIPv6Key
|| __DATA_CONST.__const _kNEIdentityCertificateKey
|| __DATA_CONST.__const _kNEIdentityDataPasswordKey
|| __DATA_CONST.__const _kNEIncludeAllNetworks
|| __DATA_CONST.__const _kNEInstallProfileOptionIsInstalledByMDM
|| __DATA_CONST.__const _kNEInterfaceValueCellular
|| __DATA_CONST.__const _kNEInterfaceValueWiFi
|| __DATA_CONST.__const _kNEInterfacesKey
|| __DATA_CONST.__const _kNEL2TPKey
|| __DATA_CONST.__const _kNELimitToProtocolsKey
|| __DATA_CONST.__const _kNELocalCertificateKey
|| __DATA_CONST.__const _kNEMailDaemonPath
|| __DATA_CONST.__const _kNEMailDaemonSigningIdentifier
|| __DATA_CONST.__const _kNEMailDesignatedRequirement
|| __DATA_CONST.__const _kNEMailDomainsPayloadKey
|| __DATA_CONST.__const _kNEMailSigningIdentifier
|| __DATA_CONST.__const _kNEMatchToolsKey
|| __DATA_CONST.__const _kNENoDivertDNSKey
|| __DATA_CONST.__const _kNENotesDesignatedRequirement
|| __DATA_CONST.__const _kNENotesSigningIdentifier
|| __DATA_CONST.__const _kNEOnDemandEnabledKey
|| __DATA_CONST.__const _kNEOnDemandMatchAppEnabledKey
|| __DATA_CONST.__const _kNEOnDemandRulesKey
|| __DATA_CONST.__const _kNEOnDemandSupportedKey
|| __DATA_CONST.__const _kNEOnDemandUserOverrideDisabledKey
|| __DATA_CONST.__const _kNEOverridePrimaryKey
|| __DATA_CONST.__const _kNEPPPKey
|| __DATA_CONST.__const _kNEPPPPasswordDescriptionValue
|| __DATA_CONST.__const _kNEPPTPKey
|| __DATA_CONST.__const _kNEPasswordKey
|| __DATA_CONST.__const _kNEPasswordReferenceKey
|| __DATA_CONST.__const _kNEPayloadCertificateFileNameKey
|| __DATA_CONST.__const _kNEPayloadCertificateHashKey
|| __DATA_CONST.__const _kNEPayloadCertificateIdentityUUIDKey
|| __DATA_CONST.__const _kNEPayloadCertificatePasswordKey
|| __DATA_CONST.__const _kNEPayloadCertificateRefForCellularKey
|| __DATA_CONST.__const _kNEPayloadCertificateRefForWiFiKey
|| __DATA_CONST.__const _kNEPayloadCertificateRefKey
|| __DATA_CONST.__const _kNEPayloadCertificateUUIDKey
|| __DATA_CONST.__const _kNEPayloadContentKey
|| __DATA_CONST.__const _kNEPayloadDescriptionKey
|| __DATA_CONST.__const _kNEPayloadDisplayNameKey
|| __DATA_CONST.__const _kNEPayloadIdentifierKey
|| __DATA_CONST.__const _kNEPayloadMachineCertificateRefKey
|| __DATA_CONST.__const _kNEPayloadOrganizationKey
|| __DATA_CONST.__const _kNEPayloadProfileSourceTypeDefault
|| __DATA_CONST.__const _kNEPayloadProfileSourceTypeKey
|| __DATA_CONST.__const _kNEPayloadProfileSourceTypeMDMPush
|| __DATA_CONST.__const _kNEPayloadRemovalDisallowedKey
|| __DATA_CONST.__const _kNEPayloadRootKey
|| __DATA_CONST.__const _kNEPayloadTypeKey
|| __DATA_CONST.__const _kNEPayloadUUIDKey
|| __DATA_CONST.__const _kNEPayloadVPNApplicationBundleID
|| __DATA_CONST.__const _kNEPayloadVersionKey
|| __DATA_CONST.__const _kNEPluginTypeKey
|| __DATA_CONST.__const _kNEProfilePayloadAlwaysOnVPNDomain
|| __DATA_CONST.__const _kNEProfilePayloadAppLayerVPNDomain
|| __DATA_CONST.__const _kNEProfilePayloadConfiguration
|| __DATA_CONST.__const _kNEProfilePayloadContentFilterDomain
|| __DATA_CONST.__const _kNEProfilePayloadDNSProxyManagedDomain
|| __DATA_CONST.__const _kNEProfilePayloadDNSSettingsManagedDomain
|| __DATA_CONST.__const _kNEProfilePayloadPathControllerDomain
|| __DATA_CONST.__const _kNEProfilePayloadTypeKey
|| __DATA_CONST.__const _kNEProfilePayloadVPNManagedDomain
|| __DATA_CONST.__const _kNEPromptForPINKey
|| __DATA_CONST.__const _kNEProtocolTypeIKEv2Value
|| __DATA_CONST.__const _kNEProtocolTypeKey
|| __DATA_CONST.__const _kNEProtocolTypePayloadKey
|| __DATA_CONST.__const _kNEProtocolUDPKey
|| __DATA_CONST.__const _kNEProviderBundleIdentifierKey
|| __DATA_CONST.__const _kNEProviderDesignatedRequirementKey
|| __DATA_CONST.__const _kNEProviderIdentifierKey
|| __DATA_CONST.__const _kNEProviderTypeAppProxyValue
|| __DATA_CONST.__const _kNEProviderTypeKey
|| __DATA_CONST.__const _kNEProviderTypePacketTunnelValue
|| __DATA_CONST.__const _kNEProxiesHTTPProxyAuthenticatedKey
|| __DATA_CONST.__const _kNEProxiesHTTPProxyPasswordKey
|| __DATA_CONST.__const _kNEProxiesHTTPProxyTypeAutomaticValue
|| __DATA_CONST.__const _kNEProxiesHTTPProxyTypeKey
|| __DATA_CONST.__const _kNEProxiesHTTPProxyTypeManualValue
|| __DATA_CONST.__const _kNEProxiesHTTPProxyTypeNoneValue
|| __DATA_CONST.__const _kNEProxiesHTTPProxyUsernameKey
|| __DATA_CONST.__const _kNEProxiesKey
|| __DATA_CONST.__const _kNERemindersDesignatedRequirement
|| __DATA_CONST.__const _kNERemindersSigningIdentifier
|| __DATA_CONST.__const _kNERemoteAddressKey
|| __DATA_CONST.__const _kNESMBDaemonPath
|| __DATA_CONST.__const _kNESMBDaemonSigningIdentifier
|| __DATA_CONST.__const _kNESMBDomainsPayloadKey
|| __DATA_CONST.__const _kNESafariAppNameKey
|| __DATA_CONST.__const _kNESafariDesignatedRequirement
|| __DATA_CONST.__const _kNESafariSigningIdentifier
|| __DATA_CONST.__const _kNEServiceExceptionsKey
|| __DATA_CONST.__const _kNEServiceNameKey
|| __DATA_CONST.__const _kNESharedSecretKey
|| __DATA_CONST.__const _kNESharedSecretReferenceKey
|| __DATA_CONST.__const _kNESharedSecretServiceExtensionValue
|| __DATA_CONST.__const _kNESigningIdentifierKey
|| __DATA_CONST.__const _kNETunnelConfigurationsKey
|| __DATA_CONST.__const _kNEUIToggleEnabledKey
|| __DATA_CONST.__const _kNEUserDefinedNameKey
|| __DATA_CONST.__const _kNEUserNameKey
|| __DATA_CONST.__const _kNEVPNKey
|| __DATA_CONST.__const _kNEVPNTypeIKEv2Value
|| __DATA_CONST.__const _kNEVPNTypeIPSecValue
|| __DATA_CONST.__const _kNEVPNTypeKey
|| __DATA_CONST.__const _kNEVPNTypeL2TPValue
|| __DATA_CONST.__const _kNEVPNTypePPTPValue
|| __DATA_CONST.__const _kNEVPNTypePluginValue
|| __DATA_CONST.__const _kNEVPNUUIDKey
|| __DATA_CONST.__const _kNEVendorConfigKey
|| __DATA_CONST.__const _kNEVerboseLogging
|| __DATA_CONST.__const _kNEWebappSigningIdentifier
|| __DATA_DIRTY.__common _CFARRAY_TYPE
|| __DATA_DIRTY.__common _CFBOOLEAN_TYPE
|| __DATA_DIRTY.__common _CFDATA_TYPE
|| __DATA_DIRTY.__common _CFDICTIONARY_TYPE
|| __DATA_DIRTY.__common _CFNUMBER_TYPE
|| __DATA_DIRTY.__common _CFSTRING_TYPE
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEAOVPN
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEAppProxyProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEAppProxyProviderContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEAppPush
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEAppRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEContentFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEDNSProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEDNSSettingsBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEFileHandleMaintainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEFilterSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEFlowDivertFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEHasher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NELaunchServices
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NENetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NENetworkAgentRegistrationFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPathController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPathControllerNetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPathRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPolicyCondition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPolicyResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPolicySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEPolicySessionFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEProcessInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEProfileIngestionPayloadInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NETunnelProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NETunnelProviderProtocol
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEVPN
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEVPNApp
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEVPNConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NEVPNProtocol
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEAOVPN
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEAppProxyProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEAppProxyProviderContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEAppPush
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEAppRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEContentFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEDNSProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEDNSSettingsBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEFileHandleMaintainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEFilterSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEFlowDivertFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEHasher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NELaunchServices
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NENetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NENetworkAgentRegistrationFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPathController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPathControllerNetworkAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPathRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPolicyCondition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPolicyResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPolicySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEPolicySessionFileHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEProcessInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEProfileIngestionPayloadInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NETunnelProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NETunnelProviderProtocol
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEVPN
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEVPNApp
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEVPNConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NEVPNProtocol
|| __TEXT.__const _g_cfil_flow_uuid_template
|| __TEXT.__const _g_provider_host_primary_neagent_instance_id
|| __TEXT.__const _kNEProfilePayloadTypeNone
|| __TEXT.__text _NEAddAddressToDictionary
|| __TEXT.__text _NEAddDataToDictionary
|| __TEXT.__text _NEAddDateToDictionary
|| __TEXT.__text _NEAddInt64ToDictionary
|| __TEXT.__text _NEAddIntToArray
|| __TEXT.__text _NEAddIntToDictionary
|| __TEXT.__text _NEAddPortToDictionary
|| __TEXT.__text _NEAddValueToIntKeyedDictionary
|| __TEXT.__text _NEAddressRangeIsContainedInAddressRange
|| __TEXT.__text _NEAppendIntToArray
|| __TEXT.__text _NEAuditTokenForPID
|| __TEXT.__text _NECertificateDateIsValid
|| __TEXT.__text _NECertificateStatusToString
|| __TEXT.__text _NECheckConfigurationUserUUID
|| __TEXT.__text _NECompareAddresses
|| __TEXT.__text _NECopyAuditPortForAuditToken
|| __TEXT.__text _NECopyBootstrapPortForPID
|| __TEXT.__text _NECopyConsoleUserUUID
|| __TEXT.__text _NECopyInterfaceAddress
|| __TEXT.__text _NECopySigningIdentifierForPID
|| __TEXT.__text _NECopySigningIdentifierForXPCMessage
|| __TEXT.__text _NECopySynthesizedIPv6Address
|| __TEXT.__text _NECopyUserUUIDFromEUID
|| __TEXT.__text _NECopyUserUUIDFromXPCEUID
|| __TEXT.__text _NECreateAddressDataFromString
|| __TEXT.__text _NECreateAddressString
|| __TEXT.__text _NECreateAddressStringFromBuffer
|| __TEXT.__text _NECreateAddressStringWithPort
|| __TEXT.__text _NECreateAddressStructDataFromString
|| __TEXT.__text _NECreateAddressStructFromString
|| __TEXT.__text _NECreateCStringFromCFString
|| __TEXT.__text _NECreateDataFromString
|| __TEXT.__text _NECreateDataWithEncodedCString
|| __TEXT.__text _NECreateIPv4AddressMaskStringFromPrefix
|| __TEXT.__text _NECreateIPv6AddressMaskStringFromPrefix
|| __TEXT.__text _NECreateIPv6SubnetAddressWithPrefix
|| __TEXT.__text _NECreateStringFromData
|| __TEXT.__text _NECreateTimerSource
|| __TEXT.__text _NEFlowAsyncDatagramsCopyNext
|| __TEXT.__text _NEFlowAsyncRead
|| __TEXT.__text _NEFlowCopyError
|| __TEXT.__text _NEFlowCopyProperty
|| __TEXT.__text _NEFlowDirectorCreate
|| __TEXT.__text _NEFlowDirectorDestroy
|| __TEXT.__text _NEFlowDirectorGetMaxSendSize
|| __TEXT.__text _NEFlowDirectorHandleMatchRulesResult
|| __TEXT.__text _NEFlowDirectorHandleNewControlSocket
|| __TEXT.__text _NEFlowDirectorSetDelegateInterface
|| __TEXT.__text _NEFlowDirectorSetMatchRulesCallback
|| __TEXT.__text _NEFlowDirectorSetMaxSendSize
|| __TEXT.__text _NEFlowDirectorSetNewFlowCallback
|| __TEXT.__text _NEFlowDirectorSetOpenControlSocketCallback
|| __TEXT.__text _NEFlowDirectorStart
|| __TEXT.__text _NEFlowGetFlowType
|| __TEXT.__text _NEFlowGetTypeID
|| __TEXT.__text _NEFlowOpen
|| __TEXT.__text _NEFlowReadClose
|| __TEXT.__text _NEFlowSetDispatchQueue
|| __TEXT.__text _NEFlowSetEventHandler
|| __TEXT.__text _NEFlowSetProperty
|| __TEXT.__text _NEFlowTLVAdd
|| __TEXT.__text _NEFlowTLVMsgCreate
|| __TEXT.__text _NEFlowTLVNext
|| __TEXT.__text _NEFlowWrite
|| __TEXT.__text _NEFlowWriteClose
|| __TEXT.__text _NEGIDForAuditToken
|| __TEXT.__text _NEGetAddressFamilyFromString
|| __TEXT.__text _NEGetBundleIdentifierFromAppID
|| __TEXT.__text _NEGetConsoleUserUID
|| __TEXT.__text _NEGetEntitlement
|| __TEXT.__text _NEGetIntFromArray
|| __TEXT.__text _NEGetIntFromDictionary
|| __TEXT.__text _NEGetInterfaceForAddress
|| __TEXT.__text _NEGetInterfaceType
|| __TEXT.__text _NEGetNullUUID
|| __TEXT.__text _NEGetPortFromAddress
|| __TEXT.__text _NEGetPrefixForAddressRange
|| __TEXT.__text _NEGetPrefixForAddressRangeStrings
|| __TEXT.__text _NEGetPrefixForIPv4NetmaskString
|| __TEXT.__text _NEGetPrefixForIPv6NetmaskString
|| __TEXT.__text _NEGetRootUUID
|| __TEXT.__text _NEGetSystemWakeTime
|| __TEXT.__text _NEGetValueFromIntArray
|| __TEXT.__text _NEGetValueFromIntKeyedDictionary
|| __TEXT.__text _NEGetValueWithType
|| __TEXT.__text _NEIKEv2AttributeTypeCreateString
|| __TEXT.__text _NEIKEv2AuthenticationMethodCreateString
|| __TEXT.__text _NEIKEv2CreateChildSAModeString
|| __TEXT.__text _NEIKEv2CreateError
|| __TEXT.__text _NEIKEv2CreateErrorAuthentication
|| __TEXT.__text _NEIKEv2CreateErrorCrypto
|| __TEXT.__text _NEIKEv2CreateErrorFailedToSend
|| __TEXT.__text _NEIKEv2CreateErrorInternal
|| __TEXT.__text _NEIKEv2CreateErrorPeerInvalidSyntax
|| __TEXT.__text _NEIKEv2CreateSessionStateString
|| __TEXT.__text _NEIKEv2DigitalSignatureAlgorithmCreateString
|| __TEXT.__text _NEIKEv2EncryptionTypeCreateString
|| __TEXT.__text _NEIKEv2EncryptionWireTypeCreateString
|| __TEXT.__text _NEIKEv2ErrorCreateString
|| __TEXT.__text _NEIKEv2HashTypeCreateString
|| __TEXT.__text _NEIKEv2RequestContextTypeString
|| __TEXT.__text _NEIKEv2TransportCopyNATTFramerDefinition
|| __TEXT.__text _NEIKEv2TransportCopyTCPFramerDefinition
|| __TEXT.__text _NEIPSecDBAddLarvalSA
|| __TEXT.__text _NEIPSecDBAddPolicy
|| __TEXT.__text _NEIPSecDBAddSA
|| __TEXT.__text _NEIPSecDBCopyPolicy
|| __TEXT.__text _NEIPSecDBCopyPolicyIDs
|| __TEXT.__text _NEIPSecDBCopySA
|| __TEXT.__text _NEIPSecDBCopySAIDs
|| __TEXT.__text _NEIPSecDBCreateSession
|| __TEXT.__text _NEIPSecDBCreateSessionWithSocket
|| __TEXT.__text _NEIPSecDBDeletePolicy
|| __TEXT.__text _NEIPSecDBDeleteSA
|| __TEXT.__text _NEIPSecDBFlushAll
|| __TEXT.__text _NEIPSecDBFlushPolicies
|| __TEXT.__text _NEIPSecDBFlushSAs
|| __TEXT.__text _NEIPSecDBGetSPIForSA
|| __TEXT.__text _NEIPSecDBInvalidateSession
|| __TEXT.__text _NEIPSecDBMigrateSA
|| __TEXT.__text _NEIPSecDBScheduleWithRunLoop
|| __TEXT.__text _NEIPSecDBSetDispatchQueue
|| __TEXT.__text _NEIPSecDBStartBlackHoleDetection
|| __TEXT.__text _NEIPSecDBStartIdleTimeout
|| __TEXT.__text _NEIPSecDBUnScheduleWithRunLoop
|| __TEXT.__text _NEIPSecDBUpdateSA
|| __TEXT.__text _NEIPSecIKEConnectionIsMobile
|| __TEXT.__text _NEIPSecIKECreateSession
|| __TEXT.__text _NEIPSecIKECreateSessionWithInterface
|| __TEXT.__text _NEIPSecIKECreateSessionWithInterfaceAndSocketHandlers
|| __TEXT.__text _NEIPSecIKECreateUserspaceSession
|| __TEXT.__text _NEIPSecIKEForceChildSARekey
|| __TEXT.__text _NEIPSecIKEForceIKESARekey
|| __TEXT.__text _NEIPSecIKEGetLocalAddress
|| __TEXT.__text _NEIPSecIKEGetRemoteAddress
|| __TEXT.__text _NEIPSecIKEInvalidateSession
|| __TEXT.__text _NEIPSecIKENotificationTypeCopyString
|| __TEXT.__text _NEIPSecIKESendDeadPeerDetectionPacket
|| __TEXT.__text _NEIPSecIKESendPrivateNotifyStatus
|| __TEXT.__text _NEIPSecIKESetDispatchQueue
|| __TEXT.__text _NEIPSecIKEStartChildSA
|| __TEXT.__text _NEIPSecIKEStartConnection
|| __TEXT.__text _NEIPSecIKEStartMOBIKE
|| __TEXT.__text _NEIPSecIKEStartMOBIKEReuseSocket
|| __TEXT.__text _NEIPSecIKEStopChildSA
|| __TEXT.__text _NEIPSecIKEStopConnection
|| __TEXT.__text _NEIPSecIKEUpdateIKESettings
|| __TEXT.__text _NEIPSecNotifyCodeCopyString
|| __TEXT.__text _NEIPSecNotifyReasonCopyString
|| __TEXT.__text _NEInChecksum
|| __TEXT.__text _NEInitCFTypes
|| __TEXT.__text _NEIsInterfaceCellular
|| __TEXT.__text _NEIsInterfaceWIFI
|| __TEXT.__text _NEIsValidCFType
|| __TEXT.__text _NEIsWildcardAddress
|| __TEXT.__text _NEKeychainCopyPersistentRef
|| __TEXT.__text _NEKeychainCopyValue
|| __TEXT.__text _NEKeychainRemoveValue
|| __TEXT.__text _NEKeychainRemoveWithPersistentID
|| __TEXT.__text _NEKeychainSetPKCS12Container
|| __TEXT.__text _NEKeychainSetValue
|| __TEXT.__text _NEMapIntegerToString
|| __TEXT.__text _NEMapStringToInteger
|| __TEXT.__text _NEPFKeyClose
|| __TEXT.__text _NEPFKeyOpen
|| __TEXT.__text _NEPFKeySend
|| __TEXT.__text _NEPFKeySendAdd
|| __TEXT.__text _NEPFKeySendDelete
|| __TEXT.__text _NEPFKeySendDeleteAll
|| __TEXT.__text _NEPFKeySendDump
|| __TEXT.__text _NEPFKeySendFlush
|| __TEXT.__text _NEPFKeySendGet
|| __TEXT.__text _NEPFKeySendGetSPI
|| __TEXT.__text _NEPFKeySendGetStats
|| __TEXT.__text _NEPFKeySendMigrate
|| __TEXT.__text _NEPFKeySendPromiscToggle
|| __TEXT.__text _NEPFKeySendRegister
|| __TEXT.__text _NEPFKeySendSPDAdd
|| __TEXT.__text _NEPFKeySendSPDDelete
|| __TEXT.__text _NEPFKeySendSPDDisable
|| __TEXT.__text _NEPFKeySendSPDDump
|| __TEXT.__text _NEPFKeySendSPDEnable
|| __TEXT.__text _NEPFKeySendSPDFlush
|| __TEXT.__text _NEPFKeySendSPDGet
|| __TEXT.__text _NEPFKeySendUpdate
|| __TEXT.__text _NEPIDByName
|| __TEXT.__text _NEPolicyAdd
|| __TEXT.__text _NEPolicyApply
|| __TEXT.__text _NEPolicyCopy
|| __TEXT.__text _NEPolicyCopyIDs
|| __TEXT.__text _NEPolicyCreateSession
|| __TEXT.__text _NEPolicyCreateSessionWithSocket
|| __TEXT.__text _NEPolicyDelete
|| __TEXT.__text _NEPolicyDeleteAll
|| __TEXT.__text _NEPolicyGetStringForLegacyNECPLevel
|| __TEXT.__text _NEPolicyLockSessionToProcess
|| __TEXT.__text _NEPolicyPersistDropAllFeature
|| __TEXT.__text _NEPolicyRegisterService
|| __TEXT.__text _NEPolicySessionDupSocket
|| __TEXT.__text _NEPolicySetDispatchQueue
|| __TEXT.__text _NEPolicySetDropPriorityLevel
|| __TEXT.__text _NEPolicySetLayer2DefaultDrop
|| __TEXT.__text _NEPolicySetSessionPriority
|| __TEXT.__text _NEPolicyUnregisterService
|| __TEXT.__text _NERemoveValueFromIntKeyedDictionary
|| __TEXT.__text _NERepeatingEventCreate
|| __TEXT.__text _NERepeatingEventGetIntervalInMilliseconds
|| __TEXT.__text _NERepeatingEventGetTimesFired
|| __TEXT.__text _NERepeatingEventRelease
|| __TEXT.__text _NEResourcesCopyAppTrackingDomainsPath
|| __TEXT.__text _NEResourcesCopyContentFilterExclusionList
|| __TEXT.__text _NEResourcesCopyDeviceLocalizedFormatString
|| __TEXT.__text _NEResourcesCopyDeviceLocalizedNSString
|| __TEXT.__text _NEResourcesCopyDevicePreferredLocalizations
|| __TEXT.__text _NEResourcesCopyLocalizedFormatString
|| __TEXT.__text _NEResourcesCopyLocalizedNSString
|| __TEXT.__text _NEResourcesCopyPreferredLanguages
|| __TEXT.__text _NEResourcesCopyTrustedApplicationPaths
|| __TEXT.__text _NEResourcesCopyVPNIconURL
|| __TEXT.__text _NEResourcesSetPreferredLanguages
|| __TEXT.__text _NESetValueIfPresent
|| __TEXT.__text _NEUIDForAuditToken
|| __TEXT.__text _NEVPNConfigurationConnectionStart
|| __TEXT.__text _NEVPNConfigurationConnectionStop
|| __TEXT.__text _NEVPNConfigurationCopy
|| __TEXT.__text _NEVPNConfigurationCopyAll
|| __TEXT.__text _NEVPNConfigurationCopyAppRule
|| __TEXT.__text _NEVPNConfigurationCopyAppRuleIDs
|| __TEXT.__text _NEVPNConfigurationCopyCertificate
|| __TEXT.__text _NEVPNConfigurationCopyIdentities
|| __TEXT.__text _NEVPNConfigurationCopyLastConnectionError
|| __TEXT.__text _NEVPNConfigurationCopyPersistentData
|| __TEXT.__text _NEVPNConfigurationCopyVendorData
|| __TEXT.__text _NEVPNConfigurationCreate
|| __TEXT.__text _NEVPNConfigurationEnableVPNType
|| __TEXT.__text _NEVPNConfigurationGetEnabled
|| __TEXT.__text _NEVPNConfigurationGetName
|| __TEXT.__text _NEVPNConfigurationGetStatus
|| __TEXT.__text _NEVPNConfigurationGetTunnelType
|| __TEXT.__text _NEVPNConfigurationIsVPNTypeEnabled
|| __TEXT.__text _NEVPNConfigurationRemove
|| __TEXT.__text _NEVPNConfigurationRemoveAppRule
|| __TEXT.__text _NEVPNConfigurationScheduleWithRunLoop
|| __TEXT.__text _NEVPNConfigurationSendMessage
|| __TEXT.__text _NEVPNConfigurationSet
|| __TEXT.__text _NEVPNConfigurationSetAppRule
|| __TEXT.__text _NEVPNConfigurationSetCallback
|| __TEXT.__text _NEVPNConfigurationSetEnabled
|| __TEXT.__text _NEVPNConfigurationSetMessageCallback
|| __TEXT.__text _NEVPNConfigurationSetName
|| __TEXT.__text _NEVPNConfigurationSetPersistentData
|| __TEXT.__text _NEVPNConfigurationSetVendorData
|| __TEXT.__text _NEVPNConfigurationUnscheduleFromRunLoop
|| __TEXT.__text _NEVPNConfigurationValidateCertificate
|| __TEXT.__text _NEVPNCopyLastError
|| __TEXT.__text _NEVirtualInterfaceAddAddress
|| __TEXT.__text _NEVirtualInterfaceAddAddressInternal
|| __TEXT.__text _NEVirtualInterfaceAddAddressWithLifetime
|| __TEXT.__text _NEVirtualInterfaceAddIPv4Route
|| __TEXT.__text _NEVirtualInterfaceAddIPv6Route
|| __TEXT.__text _NEVirtualInterfaceCopyAddresses
|| __TEXT.__text _NEVirtualInterfaceCopyDNSDomain
|| __TEXT.__text _NEVirtualInterfaceCopyDNSSearchDomains
|| __TEXT.__text _NEVirtualInterfaceCopyDNSServers
|| __TEXT.__text _NEVirtualInterfaceCopyDNSSupplementalMatchDomains
|| __TEXT.__text _NEVirtualInterfaceCopyDNSSupplementalMatchOrders
|| __TEXT.__text _NEVirtualInterfaceCopyDelegateInterfaceName
|| __TEXT.__text _NEVirtualInterfaceCopyIPStateDictionary
|| __TEXT.__text _NEVirtualInterfaceCopyIPv4Router
|| __TEXT.__text _NEVirtualInterfaceCopyIPv4Routes
|| __TEXT.__text _NEVirtualInterfaceCopyIPv6Router
|| __TEXT.__text _NEVirtualInterfaceCopyIPv6Routes
|| __TEXT.__text _NEVirtualInterfaceCopyName
|| __TEXT.__text _NEVirtualInterfaceCopyNexusInstances
|| __TEXT.__text _NEVirtualInterfaceCopyProxies
|| __TEXT.__text _NEVirtualInterfaceCopyRouteCacheFromRoutes
|| __TEXT.__text _NEVirtualInterfaceCopyRoutes
|| __TEXT.__text _NEVirtualInterfaceCopyStatistics
|| __TEXT.__text _NEVirtualInterfaceCopyVPNServerAddress
|| __TEXT.__text _NEVirtualInterfaceCreate
|| __TEXT.__text _NEVirtualInterfaceCreateChannel
|| __TEXT.__text _NEVirtualInterfaceCreateFromSocket
|| __TEXT.__text _NEVirtualInterfaceCreateFromSocketAndName
|| __TEXT.__text _NEVirtualInterfaceCreateNexus
|| __TEXT.__text _NEVirtualInterfaceCreateNexusExtended
|| __TEXT.__text _NEVirtualInterfaceCreateUserEthernet
|| __TEXT.__text _NEVirtualInterfaceCreateWithOptions
|| __TEXT.__text _NEVirtualInterfaceDidPublish
|| __TEXT.__text _NEVirtualInterfaceDisableChannel
|| __TEXT.__text _NEVirtualInterfaceDupSocket
|| __TEXT.__text _NEVirtualInterfaceEnableChannelAndGetNexusInstance
|| __TEXT.__text _NEVirtualInterfaceEnableFlowswitch
|| __TEXT.__text _NEVirtualInterfaceGetDNSSupplementalMatchDomainsNoSearch
|| __TEXT.__text _NEVirtualInterfaceGetIPv4ConfigurationMethod
|| __TEXT.__text _NEVirtualInterfaceGetIPv6ConfigurationMethod
|| __TEXT.__text _NEVirtualInterfaceGetIndex
|| __TEXT.__text _NEVirtualInterfaceGetMaxPendingPackets
|| __TEXT.__text _NEVirtualInterfaceGetReadAutomatically
|| __TEXT.__text _NEVirtualInterfaceGetType
|| __TEXT.__text _NEVirtualInterfaceInvalidate
|| __TEXT.__text _NEVirtualInterfaceIsPrimary
|| __TEXT.__text _NEVirtualInterfaceReadyToRead
|| __TEXT.__text _NEVirtualInterfaceReadyToReadMultiple
|| __TEXT.__text _NEVirtualInterfaceRemoveAddress
|| __TEXT.__text _NEVirtualInterfaceRemoveAllAddresses
|| __TEXT.__text _NEVirtualInterfaceRemoveAllRoutes
|| __TEXT.__text _NEVirtualInterfaceRemoveRoute
|| __TEXT.__text _NEVirtualInterfaceSetAsPrimary
|| __TEXT.__text _NEVirtualInterfaceSetDNSDomain
|| __TEXT.__text _NEVirtualInterfaceSetDNSPort
|| __TEXT.__text _NEVirtualInterfaceSetDNSSearchDomains
|| __TEXT.__text _NEVirtualInterfaceSetDNSServers
|| __TEXT.__text _NEVirtualInterfaceSetDNSServiceIdentifier
|| __TEXT.__text _NEVirtualInterfaceSetDNSSupplementalMatchDomains
|| __TEXT.__text _NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch
|| __TEXT.__text _NEVirtualInterfaceSetDNSSupplementalMatchOrders
|| __TEXT.__text _NEVirtualInterfaceSetDSCPMapping
|| __TEXT.__text _NEVirtualInterfaceSetDelegateInterface
|| __TEXT.__text _NEVirtualInterfaceSetIPv4ConfigurationMethod
|| __TEXT.__text _NEVirtualInterfaceSetIPv4Router
|| __TEXT.__text _NEVirtualInterfaceSetIPv6ConfigurationMethod
|| __TEXT.__text _NEVirtualInterfaceSetIPv6Router
|| __TEXT.__text _NEVirtualInterfaceSetMTU
|| __TEXT.__text _NEVirtualInterfaceSetMTUOverhead
|| __TEXT.__text _NEVirtualInterfaceSetMaxPendingPackets
|| __TEXT.__text _NEVirtualInterfaceSetOutputTrafficClass
|| __TEXT.__text _NEVirtualInterfaceSetProxies
|| __TEXT.__text _NEVirtualInterfaceSetRankLast
|| __TEXT.__text _NEVirtualInterfaceSetRankNever
|| __TEXT.__text _NEVirtualInterfaceSetRankPrimaryEligible
|| __TEXT.__text _NEVirtualInterfaceSetReadAutomatically
|| __TEXT.__text _NEVirtualInterfaceSetReadIPPacketHandler
|| __TEXT.__text _NEVirtualInterfaceSetReadIPPayloadHandler
|| __TEXT.__text _NEVirtualInterfaceSetReadMultipleIPPacketsHandler
|| __TEXT.__text _NEVirtualInterfaceSetReadMultipleIPPayloadsHandler
|| __TEXT.__text _NEVirtualInterfaceSetServiceID
|| __TEXT.__text _NEVirtualInterfaceSetServiceIndex
|| __TEXT.__text _NEVirtualInterfaceSetVPNServerAddress
|| __TEXT.__text _NEVirtualInterfaceUpdateAdHocService
|| __TEXT.__text _NEVirtualInterfaceUpdateAdHocServiceReturnChanges
|| __TEXT.__text _NEVirtualInterfaceWriteIPPacket
|| __TEXT.__text _NEVirtualInterfaceWriteIPPayload
|| __TEXT.__text _NEVirtualInterfaceWriteMultipleIPPackets
|| __TEXT.__text _NEVirtualInterfaceWriteMultipleIPPayloads
|| __TEXT.__text _NEVirtualInterfaceWriteMultipleIPPayloadsFromArray
|| __TEXT.__text _createEthernetAddressFromString
|| __TEXT.__text _inputNotification2String
|| __TEXT.__text _ipsec_check_keylen
|| __TEXT.__text _ipsec_check_keylen2
|| __TEXT.__text _ipsec_get_keylen
|| __TEXT.__text _isa_neclass
|| __TEXT.__text _isa_nsarray
|| __TEXT.__text _isa_nsdata
|| __TEXT.__text _isa_nsdictionary
|| __TEXT.__text _isa_nsnull
|| __TEXT.__text _isa_nsnumber
|| __TEXT.__text _isa_nsset
|| __TEXT.__text _isa_nsstring
|| __TEXT.__text _isa_nsurl
|| __TEXT.__text _isa_nsuuid
|| __TEXT.__text _myCFDataCreateMutableCopy
|| __TEXT.__text _myCFDataCreateMutableCopyOfData
|| __TEXT.__text _myCFDataCreateMutableFromString
|| __TEXT.__text _myCFDataReleaseReset
|| __TEXT.__text _myCFDataResetReplace
|| __TEXT.__text _myCFDataResetReplaceFromString
|| __TEXT.__text _myCFEqual
|| __TEXT.__text _myCFRelease
|| __TEXT.__text _myCFReplace
|| __TEXT.__text _myCFRetain
|| __TEXT.__text _neZeroOutNSData
|| __TEXT.__text _ne_loopback_protocol_get_id
|| __TEXT.__text _nw_utun_protocol_identifier
|| __TEXT.__text _pfkey_align
|| __TEXT.__text _pfkey_check
|| __TEXT.__text _pfkey_recv
|| __TEXT.__text _pfkey_recv_register
|| __TEXT.__text _pfkey_set_supported
|| __TEXT.__text _symptomReporterSuccessfullyLoaded
|| __TEXT.__text _trimURL
__ CaptiveNetwork: _CNNetworkCreateWithSSIDAndBSSID
__ CaptiveNetwork: _CNNetworkGetBSSID
__ CaptiveNetwork: _CNNetworkGetSSIDString
__ CaptiveNetwork: _CNNetworkGetSignalStrength
__ CaptiveNetwork: _CNNetworkIsChosenPlugin
__ CaptiveNetwork: _CNNetworkIsProtected
__ CaptiveNetwork: _CNNetworkSetCaptive
__ CaptiveNetwork: _CNNetworkSetConfidence
__ CaptiveNetwork: _CNNetworkSetPassword
__ CaptiveNetwork: _CNNetworkWasAutoJoined
__ CaptiveNetwork: _CNNetworkWasJustJoined
__ CaptiveNetwork: _CNPluginCommandCopyCurrentNetwork
__ CaptiveNetwork: _CNPluginCommandCopyNetworkList
__ CaptiveNetwork: _CNPluginCommandGetInterfaceName
__ CaptiveNetwork: _CNPluginCommandGetType
__ CaptiveNetwork: _CNPluginCopySupportedInterfaces
__ CaptiveNetwork: _CNPluginLogoffNetwork
__ CaptiveNetwork: _CNPluginRegister
__ CaptiveNetwork: _CNPluginResponseCreate
__ CaptiveNetwork: _CNPluginResponseDeliver
__ CaptiveNetwork: _CNPluginResponseSetNetwork
__ CaptiveNetwork: _CNPluginResponseSetNetworkList
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFAllocatorAllocate
__ CoreFoundation: _CFAllocatorDeallocate
__ CoreFoundation: _CFArrayAppendArray
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayContainsValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateCopy
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayCreateMutableCopy
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveAllValues
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizedStringForLocalization
__ CoreFoundation: _CFBundleCopyResourceURL
__ CoreFoundation: _CFBundleCreate
__ CoreFoundation: _CFBundleGetValueForInfoDictionaryKey
__ CoreFoundation: _CFCalendarCreateWithIdentifier
__ CoreFoundation: _CFCalendarDecomposeAbsoluteTime
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDataAppendBytes
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataCreateCopy
__ CoreFoundation: _CFDataCreateMutable
__ CoreFoundation: _CFDataCreateMutableCopy
__ CoreFoundation: _CFDataFind
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetMutableBytePtr
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDataReplaceBytes
__ CoreFoundation: _CFDateCompare
__ CoreFoundation: _CFDateCreate
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorCreate
__ CoreFoundation: _CFErrorGetCode
__ CoreFoundation: _CFErrorGetTypeID
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFStringAppendFormat
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateArrayBySeparatingStrings
__ CoreFoundation: _CFStringCreateByCombiningStrings
__ CoreFoundation: _CFStringCreateCopy
__ CoreFoundation: _CFStringCreateExternalRepresentation
__ CoreFoundation: _CFStringCreateFromExternalRepresentation
__ CoreFoundation: _CFStringCreateMutable
__ CoreFoundation: _CFStringCreateMutableCopy
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetCStringPtr
__ CoreFoundation: _CFStringGetIntValue
__ CoreFoundation: _CFStringGetLength
__ CoreFoundation: _CFStringGetMaximumSizeForEncoding
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFStringHasPrefix
__ CoreFoundation: _CFURLCreateFromFileSystemRepresentation
__ CoreFoundation: _CFURLGetFileSystemRepresentation
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateFromUUIDBytes
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _CFUUIDGetUUIDBytes
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _CFUserNotificationGetResponseValue
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleDisplayNameKey
__ CoreFoundation: _kCFAbsoluteTimeIntervalSince1970
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleNameKey
__ CoreFoundation: _kCFCopyStringDictionaryKeyCallBacks
__ CoreFoundation: _kCFErrorDomainPOSIX
__ CoreFoundation: _kCFGregorianCalendar
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreFoundation: _kCFUserNotificationTextFieldTitlesKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSBundleProxy
__ CoreServices: _OBJC_CLASS_$_LSPlugInKitProxy
__ EAP8021X: _EAPClientModuleAddBuiltinModule
__ EAP8021X: _EAPClientModuleLookup
__ EAP8021X: _EAPClientModulePluginFree
__ EAP8021X: _EAPClientModulePluginFreePacket
__ EAP8021X: _EAPClientModulePluginInit
__ EAP8021X: _EAPClientModulePluginMasterSessionKeyCopyBytes
__ EAP8021X: _EAPClientModulePluginProcess
__ EAP8021X: _EAPPacketIsValid
__ EAP8021X: _eapaka_introspect
__ EAP8021X: _eapgtc_introspect
__ EAP8021X: _eapmschapv2_introspect
__ EAP8021X: _eapsim_introspect
__ EAP8021X: _eaptls_introspect
__ EAP8021X: _peap_introspect
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSExtensionIdentifierName
__ Foundation: _NSExtensionPointName
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSURLAuthenticationMethodDefault
__ Foundation: _NSURLProtectionSpaceFTPProxy
__ Foundation: _NSURLProtectionSpaceHTTPProxy
__ Foundation: _NSURLProtectionSpaceHTTPSProxy
__ Foundation: _NSURLProtectionSpaceSOCKSProxy
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCoder
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionContext
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLCredential
__ Foundation: _OBJC_CLASS_$_NSURLCredentialStorage
__ Foundation: _OBJC_CLASS_$_NSURLProtectionSpace
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLResponse
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_CLASS_$_NSXPCListenerEndpoint
__ Foundation: _OBJC_CLASS_$__NSExtensionContextVendor
__ Foundation: _OBJC_METACLASS_$_NSCoder
__ Foundation: _OBJC_METACLASS_$_NSExtensionContext
__ Foundation: _OBJC_METACLASS_$_NSXPCListener
__ IOKit: _IOPMGetLastWakeTime
__ Network: _NWNetworkAgentStartOptionClientUUID
__ Network: _NWNetworkAgentStartOptionPID
__ Network: _NWNetworkAgentStartOptionProcessUUID
__ Network: _OBJC_CLASS_$_NWAddressEndpoint
__ Network: _OBJC_CLASS_$_NWEndpoint
__ Network: _OBJC_CLASS_$_NWHostEndpoint
__ Network: _OBJC_CLASS_$_NWInterface
__ Network: _OBJC_CLASS_$_NWNetworkAgentRegistration
__ Network: _OBJC_CLASS_$_NWParameters
__ Network: _OBJC_CLASS_$_NWPath
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ Network: _OBJC_CLASS_$_NWResolver
__ Network: _OBJC_CLASS_$_NWTCPConnection
__ Network: _OBJC_CLASS_$_NWUDPSession
__ Network: __nw_content_context_default_message
__ Network: __nw_parameters_configure_protocol_default_configuration
__ Network: __nw_parameters_configure_protocol_disable
__ Network: _network_config_cellular_blocked_observer_cancel
__ Network: _network_config_cellular_blocked_observer_create
__ Network: _network_config_cellular_failed_observer_create
__ Network: _network_config_wifi_blocked_observer_create
__ Network: _nw_array_append
__ Network: _nw_array_create
__ Network: _nw_channel_close
__ Network: _nw_channel_create_with_nexus
__ Network: _nw_channel_get_key
__ Network: _nw_channel_get_nexus_instance
__ Network: _nw_channel_get_protocol_handler
__ Network: _nw_connection_cancel
__ Network: _nw_connection_copy_connected_path
__ Network: _nw_connection_copy_endpoint
__ Network: _nw_connection_copy_parameters
__ Network: _nw_connection_create
__ Network: _nw_connection_create_with_connected_socket_and_parameters
__ Network: _nw_connection_receive_message
__ Network: _nw_connection_send
__ Network: _nw_connection_set_event_handler
__ Network: _nw_connection_set_queue
__ Network: _nw_connection_start
__ Network: _nw_context_copy_implicit_context
__ Network: _nw_context_get_globals_for_protocol
__ Network: _nw_endpoint_create_host
__ Network: _nw_error_get_error_code
__ Network: _nw_frame_array_append
__ Network: _nw_frame_array_first
__ Network: _nw_frame_array_foreach
__ Network: _nw_frame_array_init
__ Network: _nw_frame_array_is_empty
__ Network: _nw_frame_array_next
__ Network: _nw_frame_array_remove
__ Network: _nw_frame_array_unclaimed_length
__ Network: _nw_frame_claim
__ Network: _nw_frame_create
__ Network: _nw_frame_finalize
__ Network: _nw_frame_get_buffer
__ Network: _nw_frame_reset
__ Network: _nw_frame_unclaim
__ Network: _nw_frame_unclaimed_bytes
__ Network: _nw_frame_unclaimed_length
__ Network: _nw_framer_create_definition
__ Network: _nw_framer_create_options
__ Network: _nw_framer_deliver_input_no_copy
__ Network: _nw_framer_mark_failed_with_error
__ Network: _nw_framer_message_create
__ Network: _nw_framer_parse_input
__ Network: _nw_framer_set_input_handler
__ Network: _nw_framer_set_output_handler
__ Network: _nw_framer_write_output
__ Network: _nw_framer_write_output_no_copy
__ Network: _nw_interface_create_with_index
__ Network: _nw_interface_create_with_name
__ Network: _nw_interface_get_index
__ Network: _nw_interface_get_name
__ Network: _nw_interface_get_type
__ Network: _nw_interpose_cancel
__ Network: _nw_interpose_client_claim
__ Network: _nw_interpose_set_flow_event_handler
__ Network: _nw_interpose_start
__ Network: _nw_ip_options_set_local_address_preference
__ Network: _nw_listener_cancel
__ Network: _nw_listener_create
__ Network: _nw_listener_set_new_connection_handler
__ Network: _nw_listener_set_queue
__ Network: _nw_listener_start
__ Network: _nw_nat64_copy_prefixes
__ Network: _nw_nat64_extract_v4
__ Network: _nw_nat64_synthesize_v6
__ Network: _nw_nexus_bind_client_port
__ Network: _nw_nexus_close
__ Network: _nw_nexus_close_channel_and_instance
__ Network: _nw_nexus_create
__ Network: _nw_nexus_create_channel_to_new_instance
__ Network: _nw_parameters_copy_context
__ Network: _nw_parameters_copy_default_protocol_stack
__ Network: _nw_parameters_copy_local_address
__ Network: _nw_parameters_create_legacy_tcp_socket
__ Network: _nw_parameters_create_secure_tcp
__ Network: _nw_parameters_create_secure_udp
__ Network: _nw_parameters_get_ip_protocol
__ Network: _nw_parameters_get_tls
__ Network: _nw_parameters_require_interface
__ Network: _nw_parameters_set_data_mode
__ Network: _nw_parameters_set_indefinite
__ Network: _nw_parameters_set_local_address
__ Network: _nw_parameters_set_metadata
__ Network: _nw_path_copy_effective_local_endpoint
__ Network: _nw_path_copy_interface
__ Network: _nw_path_create_assign_message
__ Network: _nw_path_create_browse_result
__ Network: _nw_path_get_ipv4_network_signature
__ Network: _nw_path_get_ipv6_network_signature
__ Network: _nw_protocol_create
__ Network: _nw_protocol_register
__ Network: _nw_protocol_register_extended
__ Network: _nw_protocol_set_default_one_to_one_callbacks
__ Network: _nw_protocol_stack_copy_internet_protocol
__ Network: _nw_protocol_stack_prepend_application_protocol
__ Network: _nw_protocol_stack_set_transport_protocol
__ Network: _nw_protocols_are_equal
__ Network: _nw_queue_activate_source
__ Network: _nw_queue_cancel_source
__ Network: _nw_queue_context_async
__ Network: _nw_queue_context_async_if_needed
__ Network: _nw_queue_context_create_source
__ Network: _nw_queue_resume_source
__ Network: _nw_queue_suspend_source
__ Network: _nw_resolver_config_add_match_domain
__ Network: _nw_resolver_config_add_name_server
__ Network: _nw_resolver_config_add_search_domain
__ Network: _nw_resolver_config_copy_plist_data
__ Network: _nw_resolver_config_create
__ Network: _nw_resolver_config_set_class
__ Network: _nw_resolver_config_set_identifier
__ Network: _nw_resolver_config_set_identity_reference
__ Network: _nw_resolver_config_set_protocol
__ Network: _nw_resolver_config_set_provider_name
__ Network: _nw_resolver_config_set_provider_path
__ Network: _nw_udp_create_options
__ Security: _SecCertificateCopyCommonNames
__ Security: _SecCertificateCopyData
__ Security: _SecCertificateCopySHA256Digest
__ Security: _SecCertificateCopySubjectPublicKeyInfoSHA1Digest
__ Security: _SecCertificateCopySubjectSummary
__ Security: _SecCertificateCopySummaryProperties
__ Security: _SecCertificateCreateWithData
__ Security: _SecCertificateGetTypeID
__ Security: _SecCertificateNotValidAfter
__ Security: _SecCertificateNotValidBefore
__ Security: _SecCopyErrorMessageString
__ Security: _SecDHComputeKey
__ Security: _SecDHCreate
__ Security: _SecDHDestroy
__ Security: _SecDHGenerateKeypair
__ Security: _SecDHGetMaxKeyLength
__ Security: _SecIdentityCopyCertificate
__ Security: _SecIdentityCopyPrivateKey
__ Security: _SecIdentityGetTypeID
__ Security: _SecItemAdd
__ Security: _SecItemCopyMatching
__ Security: _SecItemDelete
__ Security: _SecItemUpdate
__ Security: _SecKeyCreateWithData
__ Security: _SecKeyRawSign
__ Security: _SecKeyRawVerify
__ Security: _SecPKCS12Import
__ Security: _SecPolicyCreateBasicX509
__ Security: _SecPolicyCreateRevocation
__ Security: _SecPolicyCreateWithProperties
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopySigningIdentifier
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskCreateWithAuditToken
__ Security: _SecTrustCopyProperties
__ Security: _SecTrustCopyPublicKey
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustEvaluate
__ Security: _SecTrustGetCertificateAtIndex
__ Security: _SecTrustGetCertificateCount
__ Security: _SecTrustSetAnchorCertificates
__ Security: _kSecAttrAccessGroup
__ Security: _kSecAttrAccessible
__ Security: _kSecAttrAccessibleAfterFirstUnlock
__ Security: _kSecAttrAccount
__ Security: _kSecAttrApplicationLabel
__ Security: _kSecAttrDescription
__ Security: _kSecAttrKeyClass
__ Security: _kSecAttrKeyClassPrivate
__ Security: _kSecAttrKeyClassPublic
__ Security: _kSecAttrKeyType
__ Security: _kSecAttrKeyTypeECSECPrimeRandom
__ Security: _kSecAttrKeyTypeRSA
__ Security: _kSecAttrLabel
__ Security: _kSecAttrPublicKeyHash
__ Security: _kSecAttrService
__ Security: _kSecClass
__ Security: _kSecClassCertificate
__ Security: _kSecClassGenericPassword
__ Security: _kSecClassIdentity
__ Security: _kSecClassKey
__ Security: _kSecImportExportPassphrase
__ Security: _kSecImportItemIdentity
__ Security: _kSecImportItemTrust
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecMatchLimitOne
__ Security: _kSecPolicyAppleIPsec
__ Security: _kSecPolicyName
__ Security: _kSecPropertyKeyType
__ Security: _kSecPropertyKeyValue
__ Security: _kSecRandomDefault
__ Security: _kSecReturnAttributes
__ Security: _kSecReturnData
__ Security: _kSecReturnPersistentRef
__ Security: _kSecReturnRef
__ Security: _kSecUseSystemKeychain
__ Security: _kSecValueData
__ Security: _kSecValuePersistentRef
__ Security: _kSecValueRef
__ SystemConfiguration: _SCCopyLastError
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreateWithOptions
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkServiceEntity
__ SystemConfiguration: _SCDynamicStoreSetMultiple
__ SystemConfiguration: _SCError
__ SystemConfiguration: _SCErrorString
__ SystemConfiguration: _SCNetworkConnectionCopyAllUserPreferences
__ SystemConfiguration: _SCNetworkConnectionCopyCurrentUserPreferences
__ SystemConfiguration: _SCNetworkConnectionCreateUserPreferences
__ SystemConfiguration: _SCNetworkConnectionCreateWithServiceID
__ SystemConfiguration: _SCNetworkInterfaceCreateWithInterface
__ SystemConfiguration: _SCNetworkInterfaceGetConfiguration
__ SystemConfiguration: _SCNetworkInterfaceGetExtendedConfiguration
__ SystemConfiguration: _SCNetworkInterfaceGetInterface
__ SystemConfiguration: _SCNetworkInterfaceGetInterfaceType
__ SystemConfiguration: _SCNetworkInterfaceSetConfiguration
__ SystemConfiguration: _SCNetworkInterfaceSetExtendedConfiguration
__ SystemConfiguration: _SCNetworkProtocolGetConfiguration
__ SystemConfiguration: _SCNetworkProtocolSetConfiguration
__ SystemConfiguration: _SCNetworkProtocolSetEnabled
__ SystemConfiguration: _SCNetworkProxiesCreateProxyAgentData
__ SystemConfiguration: _SCNetworkServiceAddProtocolType
__ SystemConfiguration: _SCNetworkServiceCopy
__ SystemConfiguration: _SCNetworkServiceCopyAll
__ SystemConfiguration: _SCNetworkServiceCopyExternalID
__ SystemConfiguration: _SCNetworkServiceCopyProtocol
__ SystemConfiguration: _SCNetworkServiceCreate
__ SystemConfiguration: _SCNetworkServiceEstablishDefaultConfiguration
__ SystemConfiguration: _SCNetworkServiceGetEnabled
__ SystemConfiguration: _SCNetworkServiceGetInterface
__ SystemConfiguration: _SCNetworkServiceGetName
__ SystemConfiguration: _SCNetworkServiceGetServiceID
__ SystemConfiguration: _SCNetworkServiceGetTypeID
__ SystemConfiguration: _SCNetworkServiceRemove
__ SystemConfiguration: _SCNetworkServiceSetEnabled
__ SystemConfiguration: _SCNetworkServiceSetName
__ SystemConfiguration: _SCNetworkServiceSetPrimaryRank
__ SystemConfiguration: _SCNetworkSetAddService
__ SystemConfiguration: _SCNetworkSetCopyCurrent
__ SystemConfiguration: _SCPreferencesApplyChanges
__ SystemConfiguration: _SCPreferencesCommitChanges
__ SystemConfiguration: _SCPreferencesCreate
__ SystemConfiguration: _SCPreferencesCreateWithAuthorization
__ SystemConfiguration: _SCPreferencesGetSignature
__ SystemConfiguration: _SCPreferencesGetValue
__ SystemConfiguration: _SCPreferencesLock
__ SystemConfiguration: _SCPreferencesUnlock
__ SystemConfiguration: _SCUserPreferencesCopyInterfaceTypeConfiguration
__ SystemConfiguration: _SCUserPreferencesCopyName
__ SystemConfiguration: _SCUserPreferencesCopyStartOptions
__ SystemConfiguration: _SCUserPreferencesGetUniqueID
__ SystemConfiguration: _SCUserPreferencesIsForced
__ SystemConfiguration: _SCUserPreferencesRemove
__ SystemConfiguration: _SCUserPreferencesSetCurrent
__ SystemConfiguration: _SCUserPreferencesSetInterfaceTypeConfiguration
__ SystemConfiguration: _SCUserPreferencesSetName
__ SystemConfiguration: __SCNetworkServiceCopyActive
__ SystemConfiguration: __SCNetworkServiceIsVPN
__ SystemConfiguration: __SCNetworkServiceSetServiceID
__ SystemConfiguration: __SCPreferencesSystemKeychainPasswordItemCopy
__ SystemConfiguration: __SCPreferencesSystemKeychainPasswordItemRemove
__ SystemConfiguration: _kCNNetworkInfoKeyBSSID
__ SystemConfiguration: _kCNNetworkInfoKeySSID
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCDynamicStoreUseSessionKeys
__ SystemConfiguration: _kSCEntNetDNS
__ SystemConfiguration: _kSCEntNetIPv4
__ SystemConfiguration: _kSCEntNetIPv6
__ SystemConfiguration: _kSCEntNetProxies
__ SystemConfiguration: _kSCEntNetVPN
__ SystemConfiguration: _kSCNetworkInterfaceIPv4
__ SystemConfiguration: _kSCNetworkInterfaceTypeIPSec
__ SystemConfiguration: _kSCNetworkInterfaceTypeL2TP
__ SystemConfiguration: _kSCNetworkInterfaceTypePPP
__ SystemConfiguration: _kSCNetworkInterfaceTypeVPN
__ SystemConfiguration: _kSCNetworkProtocolTypeDNS
__ SystemConfiguration: _kSCNetworkProtocolTypeIPv4
__ SystemConfiguration: _kSCNetworkProtocolTypeIPv6
__ SystemConfiguration: _kSCNetworkProtocolTypeProxies
__ SystemConfiguration: _kSCPropInterfaceName
__ SystemConfiguration: _kSCPropNetDNSConfirmedServiceID
__ SystemConfiguration: _kSCPropNetDNSDomainName
__ SystemConfiguration: _kSCPropNetDNSSearchDomains
__ SystemConfiguration: _kSCPropNetDNSServerAddresses
__ SystemConfiguration: _kSCPropNetDNSServerPort
__ SystemConfiguration: _kSCPropNetDNSServiceIdentifier
__ SystemConfiguration: _kSCPropNetDNSSupplementalMatchDomains
__ SystemConfiguration: _kSCPropNetDNSSupplementalMatchDomainsNoSearch
__ SystemConfiguration: _kSCPropNetDNSSupplementalMatchOrders
__ SystemConfiguration: _kSCPropNetIPSecAuthenticationMethod
__ SystemConfiguration: _kSCPropNetIPSecLocalCertificate
__ SystemConfiguration: _kSCPropNetIPSecLocalIdentifier
__ SystemConfiguration: _kSCPropNetIPSecLocalIdentifierType
__ SystemConfiguration: _kSCPropNetIPSecRemoteAddress
__ SystemConfiguration: _kSCPropNetIPSecSharedSecret
__ SystemConfiguration: _kSCPropNetIPSecSharedSecretEncryption
__ SystemConfiguration: _kSCPropNetIPSecXAuthEnabled
__ SystemConfiguration: _kSCPropNetIPSecXAuthName
__ SystemConfiguration: _kSCPropNetIPSecXAuthPassword
__ SystemConfiguration: _kSCPropNetIPSecXAuthPasswordEncryption
__ SystemConfiguration: _kSCPropNetIPv4AdditionalRoutes
__ SystemConfiguration: _kSCPropNetIPv4Addresses
__ SystemConfiguration: _kSCPropNetIPv4ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv4ExcludedRoutes
__ SystemConfiguration: _kSCPropNetIPv4IncludedRoutes
__ SystemConfiguration: _kSCPropNetIPv4RouteDestinationAddress
__ SystemConfiguration: _kSCPropNetIPv4RouteGatewayAddress
__ SystemConfiguration: _kSCPropNetIPv4RouteInterfaceName
__ SystemConfiguration: _kSCPropNetIPv4RouteSubnetMask
__ SystemConfiguration: _kSCPropNetIPv4Router
__ SystemConfiguration: _kSCPropNetIPv4SubnetMasks
__ SystemConfiguration: _kSCPropNetIPv6AdditionalRoutes
__ SystemConfiguration: _kSCPropNetIPv6Addresses
__ SystemConfiguration: _kSCPropNetIPv6ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv6ExcludedRoutes
__ SystemConfiguration: _kSCPropNetIPv6IncludedRoutes
__ SystemConfiguration: _kSCPropNetIPv6PrefixLength
__ SystemConfiguration: _kSCPropNetIPv6RouteDestinationAddress
__ SystemConfiguration: _kSCPropNetIPv6RouteGatewayAddress
__ SystemConfiguration: _kSCPropNetIPv6RouteInterfaceName
__ SystemConfiguration: _kSCPropNetIPv6RoutePrefixLength
__ SystemConfiguration: _kSCPropNetIPv6Router
__ SystemConfiguration: _kSCPropNetOverridePrimary
__ SystemConfiguration: _kSCPropNetPPPACSPEnabled
__ SystemConfiguration: _kSCPropNetPPPAuthEAPPlugins
__ SystemConfiguration: _kSCPropNetPPPAuthName
__ SystemConfiguration: _kSCPropNetPPPAuthPassword
__ SystemConfiguration: _kSCPropNetPPPAuthPasswordEncryption
__ SystemConfiguration: _kSCPropNetPPPAuthProtocol
__ SystemConfiguration: _kSCPropNetPPPCommDisplayTerminalWindow
__ SystemConfiguration: _kSCPropNetPPPCommRedialCount
__ SystemConfiguration: _kSCPropNetPPPCommRedialEnabled
__ SystemConfiguration: _kSCPropNetPPPCommRedialInterval
__ SystemConfiguration: _kSCPropNetPPPCommRemoteAddress
__ SystemConfiguration: _kSCPropNetPPPCommUseTerminalScript
__ SystemConfiguration: _kSCPropNetPPPDialOnDemand
__ SystemConfiguration: _kSCPropNetPPPIPCPCompressionVJ
__ SystemConfiguration: _kSCPropNetPPPIdleReminder
__ SystemConfiguration: _kSCPropNetPPPIdleReminderTimer
__ SystemConfiguration: _kSCPropNetPPPLCPEchoEnabled
__ SystemConfiguration: _kSCPropNetPPPLCPEchoFailure
__ SystemConfiguration: _kSCPropNetPPPLCPEchoInterval
__ SystemConfiguration: _kSCPropNetPPPVerboseLogging
__ SystemConfiguration: _kSCPropNetProxiesExceptionsList
__ SystemConfiguration: _kSCPropNetProxiesExcludeSimpleHostnames
__ SystemConfiguration: _kSCPropNetProxiesFTPEnable
__ SystemConfiguration: _kSCPropNetProxiesFTPPassive
__ SystemConfiguration: _kSCPropNetProxiesFTPPort
__ SystemConfiguration: _kSCPropNetProxiesFTPProxy
__ SystemConfiguration: _kSCPropNetProxiesGopherEnable
__ SystemConfiguration: _kSCPropNetProxiesGopherPort
__ SystemConfiguration: _kSCPropNetProxiesGopherProxy
__ SystemConfiguration: _kSCPropNetProxiesHTTPEnable
__ SystemConfiguration: _kSCPropNetProxiesHTTPPort
__ SystemConfiguration: _kSCPropNetProxiesHTTPProxy
__ SystemConfiguration: _kSCPropNetProxiesHTTPSEnable
__ SystemConfiguration: _kSCPropNetProxiesHTTPSPort
__ SystemConfiguration: _kSCPropNetProxiesHTTPSProxy
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoConfigEnable
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoConfigJavaScript
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoConfigURLString
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoDiscoveryEnable
__ SystemConfiguration: _kSCPropNetProxiesRTSPEnable
__ SystemConfiguration: _kSCPropNetProxiesRTSPPort
__ SystemConfiguration: _kSCPropNetProxiesRTSPProxy
__ SystemConfiguration: _kSCPropNetProxiesSOCKSEnable
__ SystemConfiguration: _kSCPropNetProxiesSOCKSPort
__ SystemConfiguration: _kSCPropNetProxiesSOCKSProxy
__ SystemConfiguration: _kSCPropNetProxiesSupplementalMatchDomains
__ SystemConfiguration: _kSCPropNetProxiesSupplementalMatchOrders
__ SystemConfiguration: _kSCPropNetServicePrimaryRank
__ SystemConfiguration: _kSCPropNetServiceServiceIndex
__ SystemConfiguration: _kSCPropNetVPNAppRules
__ SystemConfiguration: _kSCPropNetVPNAuthCredentialPassword
__ SystemConfiguration: _kSCPropNetVPNAuthName
__ SystemConfiguration: _kSCPropNetVPNAuthPassword
__ SystemConfiguration: _kSCPropNetVPNAuthPasswordEncryption
__ SystemConfiguration: _kSCPropNetVPNAuthPasswordPluginType
__ SystemConfiguration: _kSCPropNetVPNAuthenticationMethod
__ SystemConfiguration: _kSCPropNetVPNConnectTime
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnFastUserSwitch
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnIdle
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnIdleTimer
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnLogout
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnSleep
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnWake
__ SystemConfiguration: _kSCPropNetVPNDisconnectOnWakeTimer
__ SystemConfiguration: _kSCPropNetVPNLocalCertificate
__ SystemConfiguration: _kSCPropNetVPNLogfile
__ SystemConfiguration: _kSCPropNetVPNMTU
__ SystemConfiguration: _kSCPropNetVPNOnDemandEnabled
__ SystemConfiguration: _kSCPropNetVPNOnDemandMatchAppEnabled
__ SystemConfiguration: _kSCPropNetVPNOnDemandMatchDomainsAlways
__ SystemConfiguration: _kSCPropNetVPNOnDemandMatchDomainsNever
__ SystemConfiguration: _kSCPropNetVPNOnDemandMatchDomainsOnRetry
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleAction
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleActionParameters
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleActionParametersDomainAction
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleActionParametersDomains
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleActionParametersRequiredDNSServers
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleActionParametersRequiredURLStringProbe
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleDNSDomainMatch
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleDNSServerAddressMatch
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleInterfaceTypeMatch
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleSSIDMatch
__ SystemConfiguration: _kSCPropNetVPNOnDemandRuleURLStringProbe
__ SystemConfiguration: _kSCPropNetVPNOnDemandRules
__ SystemConfiguration: _kSCPropNetVPNOnDemandSuspended
__ SystemConfiguration: _kSCPropNetVPNPluginCapability
__ SystemConfiguration: _kSCPropNetVPNRemoteAddress
__ SystemConfiguration: _kSCPropNetVPNStatus
__ SystemConfiguration: _kSCPropNetVPNVerboseLogging
__ SystemConfiguration: _kSCValNetIPSecAuthenticationMethodCertificate
__ SystemConfiguration: _kSCValNetIPSecAuthenticationMethodSharedSecret
__ SystemConfiguration: _kSCValNetIPSecLocalIdentifierTypeKeyID
__ SystemConfiguration: _kSCValNetIPSecSharedSecretEncryptionKeychain
__ SystemConfiguration: _kSCValNetIPSecXAuthPasswordEncryptionKeychain
__ SystemConfiguration: _kSCValNetIPSecXAuthPasswordEncryptionPrompt
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodAutomatic
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodManual
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodPPP
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodAutomatic
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodLinkLocal
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodManual
__ SystemConfiguration: _kSCValNetPPPAuthPasswordEncryptionKeychain
__ SystemConfiguration: _kSCValNetPPPAuthProtocolEAP
__ SystemConfiguration: _kSCValNetServicePrimaryRankFirst
__ SystemConfiguration: _kSCValNetServicePrimaryRankLast
__ SystemConfiguration: _kSCValNetServicePrimaryRankNever
__ SystemConfiguration: _kSCValNetServicePrimaryRankScoped
__ SystemConfiguration: _kSCValNetVPNAppRuleAccountIdentifierMatch
__ SystemConfiguration: _kSCValNetVPNAppRuleDNSDomainMatch
__ SystemConfiguration: _kSCValNetVPNAppRuleExecutableMatch
__ SystemConfiguration: _kSCValNetVPNAppRuleExecutableSigningIdentifier
__ SystemConfiguration: _kSCValNetVPNAppRuleIdentifier
__ SystemConfiguration: _kSCValNetVPNAuthPasswordEncryptionKeychain
__ SystemConfiguration: _kSCValNetVPNAuthenticationMethodCertificate
__ SystemConfiguration: _kSCValNetVPNAuthenticationMethodPassword
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionAllow
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionConnect
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionDisconnect
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionEvaluateConnection
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionIgnore
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionParametersDomainActionConnectIfNeeded
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleActionParametersDomainActionNeverConnect
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleInterfaceTypeMatchEthernet
__ SystemConfiguration: _kSCValNetVPNOnDemandRuleInterfaceTypeMatchWiFi
__ SystemWake: _OBJC_CLASS_$_SWPreventSystemSleepAssertion
__ SystemWake: _OBJC_CLASS_$_SWWakingTimer
__ libSystem.B.dylib: _CCCrypt
__ libSystem.B.dylib: _CCHmac
__ libSystem.B.dylib: _CCRandomCopyBytes
__ libSystem.B.dylib: _CCRandomGenerateBytes
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _CC_SHA384
__ libSystem.B.dylib: _CC_SHA512
__ libSystem.B.dylib: _NEHelperCacheCopyAppUUIDMappingForUIDExtended
__ libSystem.B.dylib: _NEHelperCacheCopySigningIdentifierMapping
__ libSystem.B.dylib: _NEHelperCopyAggregatePathRules
__ libSystem.B.dylib: _NEHelperCopyAppInfo
__ libSystem.B.dylib: _NEHelperCopyCurrentNetworkAsync
__ libSystem.B.dylib: _NEHelperGetIKESocket
__ libSystem.B.dylib: _NEHelperGetKernelControlSocket
__ libSystem.B.dylib: _NEHelperGetKernelControlSocketExtended
__ libSystem.B.dylib: _NEHelperGetNECPSessionFD
__ libSystem.B.dylib: _NEHelperGetPFKeySocket
__ libSystem.B.dylib: _NEHelperInterfaceRemoveAddress
__ libSystem.B.dylib: _NEHelperInterfaceSetAddress
__ libSystem.B.dylib: _NEHelperInterfaceSetAddressWithLifetime
__ libSystem.B.dylib: _NEHelperInterfaceSetMTU
__ libSystem.B.dylib: _NEHelperInterfaceSetOption
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __DefaultRuneLocale
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___maskrune
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___stderrp
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: ___strncpy_chk
__ libSystem.B.dylib: __dispatch_data_empty
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_bool
__ libSystem.B.dylib: __xpc_type_connection
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_endpoint
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uint64
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _abort
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_buf
__ libSystem.B.dylib: _asprintf
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _ccaes_gcm_decrypt_mode
__ libSystem.B.dylib: _ccaes_gcm_encrypt_mode
__ libSystem.B.dylib: _ccchacha20poly1305_aad
__ libSystem.B.dylib: _ccchacha20poly1305_decrypt_oneshot
__ libSystem.B.dylib: _ccchacha20poly1305_encrypt
__ libSystem.B.dylib: _ccchacha20poly1305_finalize
__ libSystem.B.dylib: _ccchacha20poly1305_info
__ libSystem.B.dylib: _ccchacha20poly1305_init
__ libSystem.B.dylib: _ccchacha20poly1305_reset
__ libSystem.B.dylib: _ccchacha20poly1305_setnonce
__ libSystem.B.dylib: _cccurve25519
__ libSystem.B.dylib: _ccec_compute_key
__ libSystem.B.dylib: _ccec_cp_256
__ libSystem.B.dylib: _ccec_cp_384
__ libSystem.B.dylib: _ccec_cp_521
__ libSystem.B.dylib: _ccec_export_pub
__ libSystem.B.dylib: _ccec_generate_key
__ libSystem.B.dylib: _ccec_import_pub
__ libSystem.B.dylib: _cced25519_sign
__ libSystem.B.dylib: _cced25519_verify
__ libSystem.B.dylib: _ccgcm_aad
__ libSystem.B.dylib: _ccgcm_context_size
__ libSystem.B.dylib: _ccgcm_finalize
__ libSystem.B.dylib: _ccgcm_inc_iv
__ libSystem.B.dylib: _ccgcm_init
__ libSystem.B.dylib: _ccgcm_init_with_iv
__ libSystem.B.dylib: _ccgcm_reset
__ libSystem.B.dylib: _ccgcm_set_iv
__ libSystem.B.dylib: _ccgcm_update
__ libSystem.B.dylib: _ccrng
__ libSystem.B.dylib: _ccsha512_di
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _csr_check
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_data_create_concat
__ libSystem.B.dylib: _dispatch_data_get_size
__ libSystem.B.dylib: _dispatch_get_context
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_set_finalizer_f
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_get_handle
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_source_testcancel
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlclose
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dup
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeaddrinfo
__ libSystem.B.dylib: _freeifaddrs
__ libSystem.B.dylib: _getaddrinfo
__ libSystem.B.dylib: _getenv
__ libSystem.B.dylib: _geteuid
__ libSystem.B.dylib: _getifaddrs
__ libSystem.B.dylib: _getpeername
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getpwnam
__ libSystem.B.dylib: _getpwuid
__ libSystem.B.dylib: _getsockopt
__ libSystem.B.dylib: _getuid
__ libSystem.B.dylib: _host_info
__ libSystem.B.dylib: _if_indextoname
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _inet_pton
__ libSystem.B.dylib: _ioctl
__ libSystem.B.dylib: _kCCRandomDefault
__ libSystem.B.dylib: _lseek
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_error_string
__ libSystem.B.dylib: _mach_host_self
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _mbr_uid_to_uuid
__ libSystem.B.dylib: _mbr_uuid_to_id
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _memset_s
__ libSystem.B.dylib: _ne_log_large_obj
__ libSystem.B.dylib: _ne_log_obj
__ libSystem.B.dylib: _ne_trie_init
__ libSystem.B.dylib: _ne_trie_insert
__ libSystem.B.dylib: _ne_trie_search
__ libSystem.B.dylib: _necp_session_action
__ libSystem.B.dylib: _necp_session_open
__ libSystem.B.dylib: _nelog_is_debug_logging_enabled
__ libSystem.B.dylib: _nelog_is_extra_vpn_logging_enabled
__ libSystem.B.dylib: _nelog_is_info_logging_enabled
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_check
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_buflet_get_data_offset
__ libSystem.B.dylib: _os_buflet_get_object_address
__ libSystem.B.dylib: _os_channel_advance_slot
__ libSystem.B.dylib: _os_channel_attr_create
__ libSystem.B.dylib: _os_channel_attr_destroy
__ libSystem.B.dylib: _os_channel_attr_get
__ libSystem.B.dylib: _os_channel_attr_set
__ libSystem.B.dylib: _os_channel_attr_set_key
__ libSystem.B.dylib: _os_channel_available_slot_count
__ libSystem.B.dylib: _os_channel_create_extended
__ libSystem.B.dylib: _os_channel_destroy
__ libSystem.B.dylib: _os_channel_get_fd
__ libSystem.B.dylib: _os_channel_get_next_slot
__ libSystem.B.dylib: _os_channel_is_defunct
__ libSystem.B.dylib: _os_channel_packet_free
__ libSystem.B.dylib: _os_channel_read_attr
__ libSystem.B.dylib: _os_channel_rx_ring
__ libSystem.B.dylib: _os_channel_slot_attach_packet
__ libSystem.B.dylib: _os_channel_slot_detach_packet
__ libSystem.B.dylib: _os_channel_slot_get_packet
__ libSystem.B.dylib: _os_channel_sync
__ libSystem.B.dylib: _os_channel_tx_ring
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_packet_get_data_length
__ libSystem.B.dylib: _os_packet_get_next_buflet
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _proc_listallpids
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _proc_pidinfo
__ libSystem.B.dylib: _rb_tree_find_node
__ libSystem.B.dylib: _rb_tree_init
__ libSystem.B.dylib: _rb_tree_insert_node
__ libSystem.B.dylib: _rb_tree_iterate
__ libSystem.B.dylib: _rb_tree_remove_node
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _reallocf
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _recvmsg
__ libSystem.B.dylib: _recvmsg_x
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _sendmsg
__ libSystem.B.dylib: _sendmsg_x
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _sigaction
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strerror_r
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strtol
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _task_for_pid
__ libSystem.B.dylib: _task_info
__ libSystem.B.dylib: _time
__ libSystem.B.dylib: _timingsafe_bcmp
__ libSystem.B.dylib: _uuid_clear
__ libSystem.B.dylib: _uuid_compare
__ libSystem.B.dylib: _uuid_copy
__ libSystem.B.dylib: _uuid_is_null
__ libSystem.B.dylib: _uuid_unparse
__ libSystem.B.dylib: _write
__ libSystem.B.dylib: _xpc_array_append_value
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_array_get_string
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_copy_entitlement_value
__ libSystem.B.dylib: _xpc_connection_create
__ libSystem.B.dylib: _xpc_connection_create_from_endpoint
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_audit_token
__ libSystem.B.dylib: _xpc_connection_get_euid
__ libSystem.B.dylib: _xpc_connection_get_pid
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_copy_description
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_dup_fd
__ libSystem.B.dylib: _xpc_dictionary_get_array
__ libSystem.B.dylib: _xpc_dictionary_get_audit_token
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_data
__ libSystem.B.dylib: _xpc_dictionary_get_dictionary
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_remote_connection
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_uuid
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_send_reply
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_data
__ libSystem.B.dylib: _xpc_dictionary_set_fd
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_uuid
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_endpoint_create
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uint64_get_value
__ libSystem.B.dylib: _xpc_uuid_create
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libnetworkextension.dylib: _ne_copy_signing_identifier_for_pid
__ libnetworkextension.dylib: _ne_filter_copy_connection
__ libnetworkextension.dylib: _ne_filter_crypto_generate_client_key
__ libnetworkextension.dylib: _ne_filter_crypto_init_master
__ libnetworkextension.dylib: _ne_filter_crypto_validate_data
__ libnetworkextension.dylib: _ne_filter_get_definition
__ libnetworkextension.dylib: _ne_filter_request_connection
__ libnetworkextension.dylib: _ne_filter_send_message
__ libnetworkextension.dylib: _ne_filter_sign_data
__ libnetworkextension.dylib: _ne_get_configuration_generation
__ libnetworkextension.dylib: _ne_session_address_matches_subnets
__ libnetworkextension.dylib: _ne_session_cancel
__ libnetworkextension.dylib: _ne_session_create
__ libnetworkextension.dylib: _ne_session_disable_restrictions
__ libnetworkextension.dylib: _ne_session_establish_ipc
__ libnetworkextension.dylib: _ne_session_get_configuration_id
__ libnetworkextension.dylib: _ne_session_get_info
__ libnetworkextension.dylib: _ne_session_get_info2
__ libnetworkextension.dylib: _ne_session_get_status
__ libnetworkextension.dylib: _ne_session_release
__ libnetworkextension.dylib: _ne_session_set_event_handler
__ libnetworkextension.dylib: _ne_session_start
__ libnetworkextension.dylib: _ne_session_start_with_options
__ libnetworkextension.dylib: _ne_session_status_to_string
__ libnetworkextension.dylib: _ne_session_stop
__ libnetworkextension.dylib: _ne_session_stop_reason_to_string
__ libnetworkextension.dylib: _ne_session_type_to_string
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_getSuperclass
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x10
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x2
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x4
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x10
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x6
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
NETrie : NSObject
  // instance methods
  -[NETrie dealloc]
  -[NETrie searchWithString:]
  -[NETrie initWithDomains:reverse:partialSearchAllowed:partialSearchTerminator:]
  -[NETrie search:length:]


NENetworkRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL appliesToLoopback
 @property  NWHostEndpoint *matchRemoteEndpoint
 @property  unsigned long matchRemotePrefix
 @property  NWHostEndpoint *matchLocalNetwork
 @property  unsigned long matchLocalPrefix
 @property  long long matchProtocol
 @property  long long matchDirection

  // class methods
  +[NENetworkRule supportsSecureCoding]

  // instance methods
  -[NENetworkRule checkValidityAndCollectErrors:]
  -[NENetworkRule encodeWithCoder:]
  -[NENetworkRule .cxx_destruct]
  -[NENetworkRule descriptionWithIndent:options:]
  -[NENetworkRule copyWithZone:]
  -[NENetworkRule initWithCoder:]
  -[NENetworkRule initWithDestinationNetwork:prefix:protocol:]
  -[NENetworkRule initWithDestinationHost:protocol:]
  -[NENetworkRule initWithRemoteNetwork:remotePrefix:localNetwork:localPrefix:protocol:direction:]
  -[NENetworkRule matchRemoteEndpoint]
  -[NENetworkRule matchRemotePrefix]
  -[NENetworkRule matchLocalNetwork]
  -[NENetworkRule matchLocalPrefix]
  -[NENetworkRule matchProtocol]
  -[NENetworkRule matchDirection]
  -[NENetworkRule appliesToLoopback]


NEAOVPNException : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSString *serviceName
 @property  NSString *bundleIdentifier
 @property  NSArray *limitToProtocols
 @property  long long action

  // class methods
  +[NEAOVPNException supportsSecureCoding]

  // instance methods
  -[NEAOVPNException setServiceName:]
  -[NEAOVPNException checkValidityAndCollectErrors:]
  -[NEAOVPNException encodeWithCoder:]
  -[NEAOVPNException serviceName]
  -[NEAOVPNException .cxx_destruct]
  -[NEAOVPNException descriptionWithIndent:options:]
  -[NEAOVPNException action]
  -[NEAOVPNException setBundleIdentifier:]
  -[NEAOVPNException bundleIdentifier]
  -[NEAOVPNException copyWithZone:]
  -[NEAOVPNException setAction:]
  -[NEAOVPNException initWithCoder:]
  -[NEAOVPNException isLimitedToUDP]
  -[NEAOVPNException limitToProtocols]
  -[NEAOVPNException setLimitToProtocols:]


NEAOVPN : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enabled
 @property  BOOL toggleEnabled
 @property  BOOL allowCaptiveWebSheet
 @property  BOOL allowAllCaptiveNetworkPlugins
 @property  NSDictionary *interfaceProtocolMapping
 @property  NSString *activeInterfaceProtocolKey
 @property  NSDictionary *serviceExceptions
 @property  NSDictionary *applicationExceptions
 @property  NSDictionary *allowedCaptiveNetworkPlugins

  // class methods
  +[NEAOVPN supportsSecureCoding]

  // instance methods
  -[NEAOVPN checkValidityAndCollectErrors:]
  -[NEAOVPN encodeWithCoder:]
  -[NEAOVPN .cxx_destruct]
  -[NEAOVPN setEnabled:]
  -[NEAOVPN descriptionWithIndent:options:]
  -[NEAOVPN copyWithZone:]
  -[NEAOVPN setToggleEnabled:]
  -[NEAOVPN isEnabled]
  -[NEAOVPN initWithCoder:]
  -[NEAOVPN isToggleEnabled]
  -[NEAOVPN isAllowCaptiveWebSheet]
  -[NEAOVPN setAllowCaptiveWebSheet:]
  -[NEAOVPN isAllowAllCaptiveNetworkPlugins]
  -[NEAOVPN setAllowAllCaptiveNetworkPlugins:]
  -[NEAOVPN interfaceProtocolMapping]
  -[NEAOVPN setInterfaceProtocolMapping:]
  -[NEAOVPN activeInterfaceProtocolKey]
  -[NEAOVPN setActiveInterfaceProtocolKey:]
  -[NEAOVPN serviceExceptions]
  -[NEAOVPN setServiceExceptions:]
  -[NEAOVPN applicationExceptions]
  -[NEAOVPN setApplicationExceptions:]
  -[NEAOVPN allowedCaptiveNetworkPlugins]
  -[NEAOVPN setAllowedCaptiveNetworkPlugins:]


NEAppInfo : NSObject <NSSecureCoding, NSCopying>
  // class methods
  +[NEAppInfo supportsSecureCoding]

  // instance methods
  -[NEAppInfo encodeWithCoder:]
  -[NEAppInfo .cxx_destruct]
  -[NEAppInfo copyWithZone:]
  -[NEAppInfo initWithCoder:]


NEAppInfoCache : NSObject
  // instance methods
  -[NEAppInfoCache .cxx_destruct]
  -[NEAppInfoCache init]


NEAppProxyProvider : NETunnelProvider
 @property  unsigned long maxWriteSize

  // instance methods
  -[NEAppProxyProvider startProxyWithOptions:completionHandler:]
  -[NEAppProxyProvider stopProxyWithReason:completionHandler:]
  -[NEAppProxyProvider cancelProxyWithError:]
  -[NEAppProxyProvider handleNewFlow:]
  -[NEAppProxyProvider handleNewUDPFlow:initialRemoteEndpoint:]
  -[NEAppProxyProvider setMaxWriteSize:]
  -[NEAppProxyProvider maxWriteSize]


NETransparentProxyManager : NEVPNManager
  // class methods
  +[NETransparentProxyManager loadAllFromPreferencesWithCompletionHandler:]
  +[NETransparentProxyManager loadEverythingFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NETransparentProxyManager init]
  -[NETransparentProxyManager isProtocolTypeValid:]
  -[NETransparentProxyManager additionalSetup]
  -[NETransparentProxyManager loadFromPreferencesWithCompletionHandler:]


NEAppProxyProviderContainer : NSObject
 @property  NEAppProxyProvider *provider

  // instance methods
  -[NEAppProxyProviderContainer wake]
  -[NEAppProxyProviderContainer setConfiguration:]
  -[NEAppProxyProviderContainer setDelegateInterface:]
  -[NEAppProxyProviderContainer sleepWithCompletionHandler:]
  -[NEAppProxyProviderContainer .cxx_destruct]
  -[NEAppProxyProviderContainer startWithOptions:completionHandler:]
  -[NEAppProxyProviderContainer provider]
  -[NEAppProxyProviderContainer stop]
  -[NEAppProxyProviderContainer initWithDelegate:providerClass:]
  -[NEAppProxyProviderContainer observeValueForKeyPath:ofObject:change:context:]
  -[NEAppProxyProviderContainer setInitialFlowDivertControlSocket:]
  -[NEAppProxyProviderContainer handleAppMessage:completionHandler:]


NEAppProxyProviderManager : NETunnelProviderManager
  // class methods
  +[NEAppProxyProviderManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEAppProxyProviderManager init]


NEAppProxyFlow : NSObject
 @property  BOOL isBound
 @property  NSData *applicationData
 @property  NEFlowMetaData *metaData
 @property  NSObject<OS_nw_interface> *networkInterface
 @property  NSString *remoteHostname

  // instance methods
  -[NEAppProxyFlow metaData]
  -[NEAppProxyFlow dealloc]
  -[NEAppProxyFlow .cxx_destruct]
  -[NEAppProxyFlow setMetadata:]
  -[NEAppProxyFlow remoteHostname]
  -[NEAppProxyFlow applicationData]
  -[NEAppProxyFlow setApplicationData:]
  -[NEAppProxyFlow initWithNEFlow:queue:]
  -[NEAppProxyFlow openWithLocalEndpoint:completionHandler:]
  -[NEAppProxyFlow closeReadWithError:]
  -[NEAppProxyFlow closeWriteWithError:]
  -[NEAppProxyFlow networkInterface]
  -[NEAppProxyFlow setNetworkInterface:]
  -[NEAppProxyFlow isBound]
  -[NEAppProxyFlow setIsBound:]


NEAppProxyTCPFlow : NEAppProxyFlow
 @property  NWEndpoint *remoteEndpoint

  // instance methods
  -[NEAppProxyTCPFlow .cxx_destruct]
  -[NEAppProxyTCPFlow remoteEndpoint]
  -[NEAppProxyTCPFlow initWithNEFlow:queue:]
  -[NEAppProxyTCPFlow readDataWithCompletionHandler:]
  -[NEAppProxyTCPFlow writeData:withCompletionHandler:]


NEAppProxyUDPFlow : NEAppProxyFlow
 @property  NWEndpoint *localEndpoint

  // instance methods
  -[NEAppProxyUDPFlow .cxx_destruct]
  -[NEAppProxyUDPFlow localEndpoint]
  -[NEAppProxyUDPFlow readDatagramsWithCompletionHandler:]
  -[NEAppProxyUDPFlow initWithNEFlow:queue:]
  -[NEAppProxyUDPFlow openWithLocalEndpoint:completionHandler:]
  -[NEAppProxyUDPFlow writeDatagrams:sentByEndpoints:completionHandler:]


NEAppRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  BOOL noRestriction
 @property  NSArray *cachedMachOUUIDs
 @property  NSArray *matchAccountIdentifiers
 @property  BOOL noDivertDNS
 @property  NSString *matchSigningIdentifier
 @property  NSString *matchDesignatedRequirement
 @property  NSString *matchPath
 @property  NSArray *matchDomains
 @property  NSArray *matchTools

  // class methods
  +[NEAppRule supportsSecureCoding]

  // instance methods
  -[NEAppRule matchDomains]
  -[NEAppRule setNoDivertDNS:]
  -[NEAppRule setMatchTools:]
  -[NEAppRule setMatchPath:]
  -[NEAppRule matchSigningIdentifier]
  -[NEAppRule matchTools]
  -[NEAppRule overlapsWithRule:]
  -[NEAppRule copyLegacyDictionary]
  -[NEAppRule setMatchDomains:]
  -[NEAppRule signingIdentifierAllowed:domainsOrAccountsRequired:]
  -[NEAppRule setNoRestriction:]
  -[NEAppRule matchDesignatedRequirement]
  -[NEAppRule initFromLegacyDictionary:]
  -[NEAppRule setMatchAccountIdentifiers:]
  -[NEAppRule initWithSigningIdentifier:]
  -[NEAppRule matchAccountIdentifiers]
  -[NEAppRule cachedMachOUUIDs]
  -[NEAppRule matchPath]
  -[NEAppRule noDivertDNS]
  -[NEAppRule checkValidityAndCollectErrors:]
  -[NEAppRule setCachedMachOUUIDs:]
  -[NEAppRule encodeWithCoder:]
  -[NEAppRule dealloc]
  -[NEAppRule noRestriction]
  -[NEAppRule .cxx_destruct]
  -[NEAppRule descriptionWithIndent:options:]
  -[NEAppRule copyWithZone:]
  -[NEAppRule initWithCoder:]


NEConfiguration : NSObject <NEProfilePayloadHandlerDelegate, NEProfileIngestionPluginDelegate, NEConfigurationValidating, NSSecureCoding, NSCopying>
 @property  NSString *pluginType
 @property  long long grade
 @property  NSUUID *identifier
 @property  NSString *application
 @property  NSString *name
 @property  NSString *applicationName
 @property  NSString *applicationIdentifier
 @property  NSString *externalIdentifier
 @property  NEVPN *VPN
 @property  NEAOVPN *alwaysOnVPN
 @property  NEVPNApp *appVPN
 @property  NEContentFilter *contentFilter
 @property  NEProfileIngestionPayloadInfo *payloadInfo
 @property  NEPathController *pathController
 @property  NEDNSProxy *dnsProxy
 @property  NEDNSSettingsBundle *dnsSettings
 @property  NEAppPush *appPush

  // class methods
  +[NEConfiguration supportsSecureCoding]
  +[NEConfiguration configurationWithProfilePayload:grade:]
  +[NEConfiguration configurationWithProfilePayload:]

  // instance methods
  -[NEConfiguration grade]
  -[NEConfiguration setCertificates:]
  -[NEConfiguration setProfileInfo:]
  -[NEConfiguration application]
  -[NEConfiguration setMailDomains:accountIdentifiers:]
  -[NEConfiguration checkValidityAndCollectErrors:]
  -[NEConfiguration setMailDomains:]
  -[NEConfiguration setAlwaysOnVPN:]
  -[NEConfiguration identifier]
  -[NEConfiguration applicationIdentifier]
  -[NEConfiguration payloadInfo]
  -[NEConfiguration contentFilter]
  -[NEConfiguration setContentFilter:]
  -[NEConfiguration setApplicationIdentifier:]
  -[NEConfiguration encodeWithCoder:]
  -[NEConfiguration setCalendarDomains:accountIdentifiers:]
  -[NEConfiguration setExcludedDomains:]
  -[NEConfiguration applyOverrides]
  -[NEConfiguration setPerAppUUID:andSafariDomains:]
  -[NEConfiguration pluginType]
  -[NEConfiguration setApplicationName:]
  -[NEConfiguration externalIdentifier]
  -[NEConfiguration setPayloadInfoIdentity:]
  -[NEConfiguration .cxx_destruct]
  -[NEConfiguration getCertificates]
  -[NEConfiguration appVPN]
  -[NEConfiguration setDnsProxy:]
  -[NEConfiguration copyPasswordsFromSystemKeychain]
  -[NEConfiguration initWithName:grade:]
  -[NEConfiguration getPendingCertificateInfo:]
  -[NEConfiguration setDnsSettings:]
  -[NEConfiguration VPN]
  -[NEConfiguration appPush]
  -[NEConfiguration pathController]
  -[NEConfiguration setContactsDomains:]
  -[NEConfiguration setRestrictDomains:]
  -[NEConfiguration getPendingCertificateUUIDs:]
  -[NEConfiguration setApplication:]
  -[NEConfiguration getConfigurationIdentifier]
  -[NEConfiguration applicationName]
  -[NEConfiguration dnsSettings]
  -[NEConfiguration setName:]
  -[NEConfiguration setContactsDomains:accountIdentifiers:]
  -[NEConfiguration setPayloadInfo:]
  -[NEConfiguration generateSignature]
  -[NEConfiguration dnsProxy]
  -[NEConfiguration copyWithZone:]
  -[NEConfiguration setPayloadInfoCommon:payloadOrganization:]
  -[NEConfiguration setCalendarDomains:]
  -[NEConfiguration name]
  -[NEConfiguration setAppPush:]
  -[NEConfiguration setAppLayerVPNUUID:andSafariDomains:]
  -[NEConfiguration alwaysOnVPN]
  -[NEConfiguration setPerAppRuleSettings:withAppIdentifier:]
  -[NEConfiguration setVPN:]
  -[NEConfiguration setAssociatedDomains:]
  -[NEConfiguration isEqual:]
  -[NEConfiguration descriptionWithOptions:]
  -[NEConfiguration clearSystemKeychain]
  -[NEConfiguration setSMBDomains:]
  -[NEConfiguration setAppVPN:]
  -[NEConfiguration setPathController:]
  -[NEConfiguration initWithCoder:]
  -[NEConfiguration setExternalIdentifier:]


NEConfigurationManager : NSObject
 @property  BOOL hasVPNAPIEntitlement
 @property  NSUUID *userUUID
 @property  @? incomingMessageHandler
 @property  long long configurationChangeSource
 @property  NSString *pluginType

  // class methods
  +[NEConfigurationManager networkPrivacyConfigurationName]
  +[NEConfigurationManager sharedManagerForAllUsers]
  +[NEConfigurationManager sharedManager]

  // instance methods
  -[NEConfigurationManager removeConfiguration:withCompletionQueue:handler:]
  -[NEConfigurationManager hasVPNAPIEntitlement]
  -[NEConfigurationManager postGeneration]
  -[NEConfigurationManager syncConfigurationsWithSC:completionQueue:completionHandler:]
  -[NEConfigurationManager pluginType]
  -[NEConfigurationManager dealloc]
  -[NEConfigurationManager loadConfigurationWithID:withCompletionQueue:handler:]
  -[NEConfigurationManager userUUID]
  -[NEConfigurationManager initForAllUsers]
  -[NEConfigurationManager initSynchronous]
  -[NEConfigurationManager .cxx_destruct]
  -[NEConfigurationManager triggerLocalAuthenticationForConfigurationWithID:withCompletionQueue:handler:]
  -[NEConfigurationManager incomingMessageHandler]
  -[NEConfigurationManager copyIdentities:fromDomain:withCompletionQueue:handler:]
  -[NEConfigurationManager loadConfigurationsWithCompletionQueue:handler:]
  -[NEConfigurationManager loadConfigurations:withFilter:completionQueue:completionHandler:]
  -[NEConfigurationManager setIncomingMessageHandler:]
  -[NEConfigurationManager showLocalNetworkAlertForApp:withCompletionQueue:handler:]
  -[NEConfigurationManager handleApplicationsRemoved:completionQueue:withCompletionHandler:]
  -[NEConfigurationManager handleFileRemovedWithCompletionQueue:completionHandler:]
  -[NEConfigurationManager removeConfigurationFromDisk:completionQueue:completionHandler:]
  -[NEConfigurationManager upgradeLegacyPluginConfigurations:withUpgradeInfo:completionQueue:handler:]
  -[NEConfigurationManager loadLegacyPluginConfigurationsWithCompletionQueue:handler:]
  -[NEConfigurationManager loadConfigurationAndUserWithID:withCompletionQueue:handler:]
  -[NEConfigurationManager fetchClientListenerWithBundleID:completionQueue:handler:]
  -[NEConfigurationManager saveConfiguration:withCompletionQueue:handler:]
  -[NEConfigurationManager loadIndexWithFilter:completionQueue:handler:]
  -[NEConfigurationManager configurationChangeSource]
  -[NEConfigurationManager fetchUpgradeInfoForPluginType:completionQueue:handler:]
  -[NEConfigurationManager saveConfigurationToDisk:currentSignature:userUUID:isUpgrade:completionQueue:completionHandler:]
  -[NEConfigurationManager initWithPluginType:]
  -[NEConfigurationManager repopulateNetworkPrivacyConfigurationResetAll:]
  -[NEConfigurationManager setChangedQueue:andHandler:]
  -[NEConfigurationManager showLocalNetworkAlertForApp:withCompletionQueue:query:hasEntitlement:handler:]
  -[NEConfigurationManager setHasVPNAPIEntitlement:]
  -[NEConfigurationManager init]
  -[NEConfigurationManager setConfigurationChangeSource:]
  -[NEConfigurationManager copyCurrentIndexWithConfigurationIDsExpunged:]
  -[NEConfigurationManager getCurrentUserUUIDForConfigurationID:fromIndex:]


NEContentFilter : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enableManualMode
 @property  BOOL enabled
 @property  NEFilterProviderConfiguration *provider
 @property  NEPerApp *perApp
 @property  long long grade

  // class methods
  +[NEContentFilter supportsSecureCoding]

  // instance methods
  -[NEContentFilter grade]
  -[NEContentFilter checkValidityAndCollectErrors:]
  -[NEContentFilter encodeWithCoder:]
  -[NEContentFilter .cxx_destruct]
  -[NEContentFilter setGrade:]
  -[NEContentFilter setEnabled:]
  -[NEContentFilter provider]
  -[NEContentFilter descriptionWithIndent:options:]
  -[NEContentFilter copyWithZone:]
  -[NEContentFilter setProvider:]
  -[NEContentFilter init]
  -[NEContentFilter isEnabled]
  -[NEContentFilter initWithCoder:]
  -[NEContentFilter perApp]
  -[NEContentFilter setPerApp:]
  -[NEContentFilter enableManualMode]
  -[NEContentFilter setEnableManualMode:]


NEDNSProxy : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enabled
 @property  NEDNSProxyProviderProtocol *protocol
 @property  NEPerApp *perApp

  // class methods
  +[NEDNSProxy supportsSecureCoding]

  // instance methods
  -[NEDNSProxy checkValidityAndCollectErrors:]
  -[NEDNSProxy encodeWithCoder:]
  -[NEDNSProxy setProtocol:]
  -[NEDNSProxy .cxx_destruct]
  -[NEDNSProxy setEnabled:]
  -[NEDNSProxy descriptionWithIndent:options:]
  -[NEDNSProxy copyWithZone:]
  -[NEDNSProxy protocol]
  -[NEDNSProxy init]
  -[NEDNSProxy isEnabled]
  -[NEDNSProxy initWithCoder:]
  -[NEDNSProxy perApp]
  -[NEDNSProxy setPerApp:]


NEDNSProxyManager : NSObject <NEPrettyDescription>
 @property  NEConfiguration *configuration
 @property  NSUUID *identifier
 @property  <NEDNSProxyManagerDelegate> *delegate
 @property  NSString *appBundleIdentifier
 @property  BOOL isFromProfile
 @property  BOOL isFromMDM
 @property  NSString *localizedDescription
 @property  NEDNSProxyProviderProtocol *providerProtocol
 @property  BOOL enabled

  // class methods
  +[NEDNSProxyManager sharedManager]
  +[NEDNSProxyManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEDNSProxyManager appBundleIdentifier]
  -[NEDNSProxyManager localizedDescription]
  -[NEDNSProxyManager setConfiguration:]
  -[NEDNSProxyManager identifier]
  -[NEDNSProxyManager setDelegate:]
  -[NEDNSProxyManager delegate]
  -[NEDNSProxyManager configuration]
  -[NEDNSProxyManager dealloc]
  -[NEDNSProxyManager .cxx_destruct]
  -[NEDNSProxyManager setEnabled:]
  -[NEDNSProxyManager setLocalizedDescription:]
  -[NEDNSProxyManager descriptionWithIndent:options:]
  -[NEDNSProxyManager init]
  -[NEDNSProxyManager isEnabled]
  -[NEDNSProxyManager loadFromPreferencesWithCompletionHandler:]
  -[NEDNSProxyManager removeFromPreferencesWithCompletionHandler:]
  -[NEDNSProxyManager saveToPreferencesWithCompletionHandler:]
  -[NEDNSProxyManager providerProtocol]
  -[NEDNSProxyManager setProviderProtocol:]
  -[NEDNSProxyManager isFromProfile]
  -[NEDNSProxyManager isFromMDM]
  -[NEDNSProxyManager fetchStatusWithCompletionHandler:]


NEDNSProxyProvider : NEProvider
 @property  NSArray *systemDNSSettings

  // instance methods
  -[NEDNSProxyProvider .cxx_destruct]
  -[NEDNSProxyProvider startProxyWithOptions:completionHandler:]
  -[NEDNSProxyProvider stopProxyWithReason:completionHandler:]
  -[NEDNSProxyProvider cancelProxyWithError:]
  -[NEDNSProxyProvider handleNewFlow:]
  -[NEDNSProxyProvider handleNewUDPFlow:initialRemoteEndpoint:]
  -[NEDNSProxyProvider systemDNSSettings]
  -[NEDNSProxyProvider setSystemDNSSettings:]


NEDNSProxyProviderProtocol : NEVPNProtocol
 @property  NSString *pluginType
 @property  NSString *designatedRequirement
 @property  NSDictionary *providerConfiguration
 @property  NSString *providerBundleIdentifier

  // class methods
  +[NEDNSProxyProviderProtocol supportsSecureCoding]

  // instance methods
  -[NEDNSProxyProviderProtocol checkValidityAndCollectErrors:]
  -[NEDNSProxyProviderProtocol encodeWithCoder:]
  -[NEDNSProxyProviderProtocol pluginType]
  -[NEDNSProxyProviderProtocol .cxx_destruct]
  -[NEDNSProxyProviderProtocol descriptionWithIndent:options:]
  -[NEDNSProxyProviderProtocol copyWithZone:]
  -[NEDNSProxyProviderProtocol initWithPluginType:]
  -[NEDNSProxyProviderProtocol init]
  -[NEDNSProxyProviderProtocol initWithCoder:]
  -[NEDNSProxyProviderProtocol providerBundleIdentifier]
  -[NEDNSProxyProviderProtocol designatedRequirement]
  -[NEDNSProxyProviderProtocol providerConfiguration]
  -[NEDNSProxyProviderProtocol setProviderConfiguration:]
  -[NEDNSProxyProviderProtocol setProviderBundleIdentifier:]
  -[NEDNSProxyProviderProtocol setPluginType:]
  -[NEDNSProxyProviderProtocol setDesignatedRequirement:]


NEDNSSettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  BOOL useForAllDomains
 @property  long long dnsProtocol
 @property  NSArray *servers
 @property  NSArray *searchDomains
 @property  NSString *domainName
 @property  NSArray *matchDomains
 @property  BOOL matchDomainsNoSearch

  // class methods
  +[NEDNSSettings supportsSecureCoding]

  // instance methods
  -[NEDNSSettings matchDomains]
  -[NEDNSSettings copyLegacyDictionary]
  -[NEDNSSettings setMatchDomains:]
  -[NEDNSSettings initFromLegacyDictionary:]
  -[NEDNSSettings checkValidityAndCollectErrors:]
  -[NEDNSSettings encodeWithCoder:]
  -[NEDNSSettings setDomainName:]
  -[NEDNSSettings .cxx_destruct]
  -[NEDNSSettings setSearchDomains:]
  -[NEDNSSettings searchDomains]
  -[NEDNSSettings descriptionWithIndent:options:]
  -[NEDNSSettings domainName]
  -[NEDNSSettings copyWithZone:]
  -[NEDNSSettings initWithCoder:]
  -[NEDNSSettings dnsProtocol]
  -[NEDNSSettings initWithServers:]
  -[NEDNSSettings useForAllDomains]
  -[NEDNSSettings servers]
  -[NEDNSSettings matchDomainsNoSearch]
  -[NEDNSSettings setMatchDomainsNoSearch:]


NEDNSOverTLSSettings : NEDNSSettings
 @property  NSString *serverName
 @property  NSData *identityReference

  // class methods
  +[NEDNSOverTLSSettings supportsSecureCoding]

  // instance methods
  -[NEDNSOverTLSSettings initFromLegacyDictionary:]
  -[NEDNSOverTLSSettings encodeWithCoder:]
  -[NEDNSOverTLSSettings .cxx_destruct]
  -[NEDNSOverTLSSettings descriptionWithIndent:options:]
  -[NEDNSOverTLSSettings copyWithZone:]
  -[NEDNSOverTLSSettings isEqual:]
  -[NEDNSOverTLSSettings initWithCoder:]
  -[NEDNSOverTLSSettings dnsProtocol]
  -[NEDNSOverTLSSettings serverName]
  -[NEDNSOverTLSSettings setServerName:]
  -[NEDNSOverTLSSettings identityReference]
  -[NEDNSOverTLSSettings setIdentityReference:]


NEDNSOverHTTPSSettings : NEDNSSettings
 @property  NSURL *serverURL
 @property  NSData *identityReference

  // class methods
  +[NEDNSOverHTTPSSettings supportsSecureCoding]

  // instance methods
  -[NEDNSOverHTTPSSettings initFromLegacyDictionary:]
  -[NEDNSOverHTTPSSettings checkValidityAndCollectErrors:]
  -[NEDNSOverHTTPSSettings encodeWithCoder:]
  -[NEDNSOverHTTPSSettings .cxx_destruct]
  -[NEDNSOverHTTPSSettings descriptionWithIndent:options:]
  -[NEDNSOverHTTPSSettings copyWithZone:]
  -[NEDNSOverHTTPSSettings isEqual:]
  -[NEDNSOverHTTPSSettings initWithCoder:]
  -[NEDNSOverHTTPSSettings dnsProtocol]
  -[NEDNSOverHTTPSSettings serverURL]
  -[NEDNSOverHTTPSSettings identityReference]
  -[NEDNSOverHTTPSSettings setIdentityReference:]
  -[NEDNSOverHTTPSSettings setServerURL:]


NEExtensionAppProxyProviderContext : NEExtensionTunnelProviderContext <NEExtensionAppProxyProviderProtocol, NEExtensionAppProxyProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionAppProxyProviderContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionAppProxyProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionAppProxyProviderContext setDelegateInterface:]
  -[NEExtensionAppProxyProviderContext .cxx_destruct]
  -[NEExtensionAppProxyProviderContext startWithOptions:completionHandler:]
  -[NEExtensionAppProxyProviderContext setInitialFlowDivertControlSocket:]
  -[NEExtensionAppProxyProviderContext extensionPoint]
  -[NEExtensionAppProxyProviderContext cancelWithError:]
  -[NEExtensionAppProxyProviderContext stopWithReason:]
  -[NEExtensionAppProxyProviderContext openFlowDivertControlSocketWithCompletionHandler:]
  -[NEExtensionAppProxyProviderContext requiredProviderSuperClass]


NEDNSResourceRecord : NSObject
 @property  long long type
 @property  NSString *name
 @property  long long recordClass
 @property  unsigned long timeToLive
 @property  unsigned long dataLength
 @property  NSString *resourceString

  // instance methods
  -[NEDNSResourceRecord dataLength]
  -[NEDNSResourceRecord type]
  -[NEDNSResourceRecord timeToLive]
  -[NEDNSResourceRecord .cxx_destruct]
  -[NEDNSResourceRecord name]
  -[NEDNSResourceRecord recordClass]
  -[NEDNSResourceRecord resourceString]


NEDNSQuery : NSObject
 @property  NSString *name
 @property  long long recordType
 @property  long long recordClass
 @property  NSData *answerData

  // instance methods
  -[NEDNSQuery .cxx_destruct]
  -[NEDNSQuery recordType]
  -[NEDNSQuery name]
  -[NEDNSQuery recordClass]
  -[NEDNSQuery initWithName:recordType:recordClass:]
  -[NEDNSQuery answerData]
  -[NEDNSQuery setAnswerData:]


NEDNSPacket : NSObject
 @property  long long identifier
 @property  NSDate *timestamp
 @property  long long messageType
 @property  long long opCode
 @property  BOOL isAuthoritativeAnswer
 @property  BOOL isTruncated
 @property  BOOL isRecursionDesired
 @property  BOOL isRecursionAvailable
 @property  long long responseCode
 @property  NSString *responseCodeString
 @property  NSArray *queries
 @property  NSArray *answers
 @property  NSArray *authorities
 @property  NSArray *additionalRecords

  // class methods
  +[NEDNSPacket createDataWithQuery:]

  // instance methods
  -[NEDNSPacket queries]
  -[NEDNSPacket isTruncated]
  -[NEDNSPacket responseCode]
  -[NEDNSPacket identifier]
  -[NEDNSPacket .cxx_destruct]
  -[NEDNSPacket timestamp]
  -[NEDNSPacket messageType]
  -[NEDNSPacket answers]
  -[NEDNSPacket createResponse]
  -[NEDNSPacket initFromData:]
  -[NEDNSPacket responseCodeString]
  -[NEDNSPacket opCode]
  -[NEDNSPacket isAuthoritativeAnswer]
  -[NEDNSPacket isRecursionDesired]
  -[NEDNSPacket isRecursionAvailable]
  -[NEDNSPacket authorities]
  -[NEDNSPacket additionalRecords]


NEExtensionAppProxyProviderHostContext : NEExtensionTunnelProviderHostContext <NEExtensionAppProxyProviderProtocol, NEExtensionAppProxyProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionAppProxyProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionAppProxyProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionAppProxyProviderHostContext setDelegateInterface:]
  -[NEExtensionAppProxyProviderHostContext requiredEntitlement]
  -[NEExtensionAppProxyProviderHostContext setInitialFlowDivertControlSocket:]
  -[NEExtensionAppProxyProviderHostContext openFlowDivertControlSocketWithCompletionHandler:]


NEAgentDNSProxyExtension : NEAgentAppProxyExtension <NEDNSProxyPluginDriver>
  // instance methods
  -[NEAgentDNSProxyExtension setSystemDNSSettings:]
  -[NEAgentDNSProxyExtension driverInterface]


NEExtensionDNSProxyProviderContext : NEExtensionAppProxyProviderContext <NEExtensionDNSProxyProviderProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionDNSProxyProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionDNSProxyProviderContext extensionPoint]
  -[NEExtensionDNSProxyProviderContext setSystemDNSSettings:]
  -[NEExtensionDNSProxyProviderContext requiredProviderSuperClass]


NEExtensionDNSProxyProviderHostContext : NEExtensionAppProxyProviderHostContext <NEExtensionDNSProxyProviderProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionDNSProxyProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionDNSProxyProviderHostContext requiredEntitlement]
  -[NEExtensionDNSProxyProviderHostContext setSystemDNSSettings:]


NEExtensionPacketTunnelProviderContext : NEExtensionTunnelProviderContext <NEExtensionPacketTunnelProviderProtocol, NEExtensionPacketTunnelProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionPacketTunnelProviderContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionPacketTunnelProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionPacketTunnelProviderContext startWithOptions:completionHandler:]
  -[NEExtensionPacketTunnelProviderContext extensionPoint]
  -[NEExtensionPacketTunnelProviderContext dispose]
  -[NEExtensionPacketTunnelProviderContext stopWithReason:]
  -[NEExtensionPacketTunnelProviderContext setTunnelConfiguration:completionHandler:]
  -[NEExtensionPacketTunnelProviderContext requiredProviderSuperClass]
  -[NEExtensionPacketTunnelProviderContext setAppUUIDMap:]
  -[NEExtensionPacketTunnelProviderContext fetchVirtualInterfaceTypeWithCompletionHandler:]
  -[NEExtensionPacketTunnelProviderContext setupVirtualInterface:]
  -[NEExtensionPacketTunnelProviderContext requestSocket:interface:local:remote:completionHandler:]
  -[NEExtensionPacketTunnelProviderContext completeSession]


NEExtensionPacketTunnelProviderHostContext : NEExtensionTunnelProviderHostContext <NEExtensionPacketTunnelProviderProtocol, NEExtensionPacketTunnelProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionPacketTunnelProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionPacketTunnelProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionPacketTunnelProviderHostContext requiredEntitlement]
  -[NEExtensionPacketTunnelProviderHostContext validateWithCompletionHandler:]
  -[NEExtensionPacketTunnelProviderHostContext setAppUUIDMap:]
  -[NEExtensionPacketTunnelProviderHostContext fetchVirtualInterfaceTypeWithCompletionHandler:]
  -[NEExtensionPacketTunnelProviderHostContext setupVirtualInterface:]
  -[NEExtensionPacketTunnelProviderHostContext requestSocket:interface:local:remote:completionHandler:]


NEExtensionProviderContext : NSExtensionContext <NEExtensionProviderProtocol, NEExtensionProviderHostProtocol>
 @property  NSString *extensionPoint
 @property  Class requiredProviderSuperClass
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionProviderContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionProviderContext wake]
  -[NEExtensionProviderContext initWithProvider:]
  -[NEExtensionProviderContext sleepWithCompletionHandler:]
  -[NEExtensionProviderContext dealloc]
  -[NEExtensionProviderContext .cxx_destruct]
  -[NEExtensionProviderContext startWithOptions:completionHandler:]
  -[NEExtensionProviderContext _principalObject]
  -[NEExtensionProviderContext observeValueForKeyPath:ofObject:change:context:]
  -[NEExtensionProviderContext extensionPoint]
  -[NEExtensionProviderContext dispose]
  -[NEExtensionProviderContext cancelWithError:]
  -[NEExtensionProviderContext createWithCompletionHandler:]
  -[NEExtensionProviderContext setConfiguration:extensionIdentifier:]
  -[NEExtensionProviderContext stopWithReason:]
  -[NEExtensionProviderContext validateWithCompletionHandler:]
  -[NEExtensionProviderContext startedWithError:]
  -[NEExtensionProviderContext displayMessage:message:completionHandler:]
  -[NEExtensionProviderContext requiredProviderSuperClass]
  -[NEExtensionProviderContext completeSession]
  -[NEExtensionProviderContext dropProvider]


NEExtensionProviderHostContext : NSExtensionContext <NEExtensionProviderProtocol, NEExtensionProviderHostProtocol>
 @property  int requiredEntitlement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionProviderHostContext wake]
  -[NEExtensionProviderHostContext sleepWithCompletionHandler:]
  -[NEExtensionProviderHostContext requiredEntitlement]
  -[NEExtensionProviderHostContext .cxx_destruct]
  -[NEExtensionProviderHostContext startWithOptions:completionHandler:]
  -[NEExtensionProviderHostContext dispose]
  -[NEExtensionProviderHostContext createWithCompletionHandler:]
  -[NEExtensionProviderHostContext setConfiguration:extensionIdentifier:]
  -[NEExtensionProviderHostContext stopWithReason:]
  -[NEExtensionProviderHostContext validateWithCompletionHandler:]
  -[NEExtensionProviderHostContext startedWithError:]
  -[NEExtensionProviderHostContext displayMessage:message:completionHandler:]


NEExtensionTunnelProviderContext : NEExtensionProviderContext <NEExtensionTunnelProviderProtocol, NEExtensionTunnelProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionTunnelProviderContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionTunnelProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionTunnelProviderContext .cxx_destruct]
  -[NEExtensionTunnelProviderContext cancelWithError:]
  -[NEExtensionTunnelProviderContext setConfiguration:extensionIdentifier:]
  -[NEExtensionTunnelProviderContext establishIPCWithCompletionHandler:]
  -[NEExtensionTunnelProviderContext didSetReasserting:]
  -[NEExtensionTunnelProviderContext setTunnelConfiguration:completionHandler:]
  -[NEExtensionTunnelProviderContext handleIPCDetached]


NEExtensionTunnelProviderHostContext : NEExtensionProviderHostContext <NEExtensionTunnelProviderProtocol, NEExtensionTunnelProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionTunnelProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionTunnelProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionTunnelProviderHostContext establishIPCWithCompletionHandler:]
  -[NEExtensionTunnelProviderHostContext didSetReasserting:]
  -[NEExtensionTunnelProviderHostContext setTunnelConfiguration:completionHandler:]
  -[NEExtensionTunnelProviderHostContext handleIPCDetached]


NEFileHandle : NSObject
 @property  unsigned long type
 @property  NSObject<OS_xpc_object> *dictionary
 @property  BOOL launchOwnerWhenReadable
 @property  NSFileHandle *handle

  // instance methods
  -[NEFileHandle type]
  -[NEFileHandle launchOwnerWhenReadable]
  -[NEFileHandle handle]
  -[NEFileHandle .cxx_destruct]
  -[NEFileHandle initWithFileDescriptor:launchOwnerWhenReadable:]
  -[NEFileHandle initFromDictionary:]
  -[NEFileHandle dictionary]


NEPolicySessionFileHandle : NEFileHandle
 @property  NSString *name

  // instance methods
  -[NEPolicySessionFileHandle initWithPolicySession:name:]
  -[NEPolicySessionFileHandle type]
  -[NEPolicySessionFileHandle .cxx_destruct]
  -[NEPolicySessionFileHandle name]
  -[NEPolicySessionFileHandle initFromDictionary:]
  -[NEPolicySessionFileHandle initWithPolicySession:]
  -[NEPolicySessionFileHandle dictionary]


NEFlowDivertFileHandle : NEFileHandle
 @property  NSNumber *controlUnit
 @property  NSData *keyMaterial

  // instance methods
  -[NEFlowDivertFileHandle keyMaterial]
  -[NEFlowDivertFileHandle type]
  -[NEFlowDivertFileHandle controlUnit]
  -[NEFlowDivertFileHandle .cxx_destruct]
  -[NEFlowDivertFileHandle initFromDictionary:]
  -[NEFlowDivertFileHandle initFlowDivertControlSocketDisableAppMap:]
  -[NEFlowDivertFileHandle initFlowDivertControlSocket]
  -[NEFlowDivertFileHandle initFlowDivertDataSocket]
  -[NEFlowDivertFileHandle dictionary]


NENetworkAgentRegistrationFileHandle : NEFileHandle
 @property  NSNumber *sessionType
 @property  NSUUID *configurationIdentifier
 @property  NSUUID *agentUUID
 @property  NSString *name
 @property  unsigned long agentFlags

  // instance methods
  -[NENetworkAgentRegistrationFileHandle sessionType]
  -[NENetworkAgentRegistrationFileHandle agentUUID]
  -[NENetworkAgentRegistrationFileHandle setAgentFlags:]
  -[NENetworkAgentRegistrationFileHandle type]
  -[NENetworkAgentRegistrationFileHandle initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:]
  -[NENetworkAgentRegistrationFileHandle .cxx_destruct]
  -[NENetworkAgentRegistrationFileHandle initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:]
  -[NENetworkAgentRegistrationFileHandle name]
  -[NENetworkAgentRegistrationFileHandle initFromDictionary:]
  -[NENetworkAgentRegistrationFileHandle configurationIdentifier]
  -[NENetworkAgentRegistrationFileHandle agentFlags]
  -[NENetworkAgentRegistrationFileHandle dictionary]


NEFileHandleMaintainer : NSObject
 @property  NSString *eventName

  // class methods
  +[NEFileHandleMaintainer sharedMaintainer]

  // instance methods
  -[NEFileHandleMaintainer commit]
  -[NEFileHandleMaintainer removeFileHandleMatchingPredicate:]
  -[NEFileHandleMaintainer setEventName:]
  -[NEFileHandleMaintainer eventName]
  -[NEFileHandleMaintainer startOwnerModeWithEventName:handlesReceivedCallback:]
  -[NEFileHandleMaintainer createEvent]
  -[NEFileHandleMaintainer .cxx_destruct]
  -[NEFileHandleMaintainer iterateFileHandlesWithBlock:]
  -[NEFileHandleMaintainer setFileHandle:matchingPredicate:]
  -[NEFileHandleMaintainer setAuxiliaryData:forKey:]
  -[NEFileHandleMaintainer resetFileHandlesFromEvent:]
  -[NEFileHandleMaintainer copyAuxiliaryDataForKey:]
  -[NEFileHandleMaintainer init]


NEFilterBlockPage : NSObject
  // instance methods
  -[NEFilterBlockPage .cxx_destruct]
  -[NEFilterBlockPage init]


NEAppPush : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enabled
 @property  NSDictionary *providerConfiguration
 @property  NSArray *matchSSIDs
 @property  NSArray *matchPrivateLTENetworks
 @property  NSString *pluginType
 @property  NSString *providerBundleIdentifier

  // class methods
  +[NEAppPush supportsSecureCoding]

  // instance methods
  -[NEAppPush checkValidityAndCollectErrors:]
  -[NEAppPush encodeWithCoder:]
  -[NEAppPush pluginType]
  -[NEAppPush .cxx_destruct]
  -[NEAppPush setEnabled:]
  -[NEAppPush descriptionWithIndent:options:]
  -[NEAppPush copyWithZone:]
  -[NEAppPush init]
  -[NEAppPush isEnabled]
  -[NEAppPush initWithCoder:]
  -[NEAppPush providerBundleIdentifier]
  -[NEAppPush providerConfiguration]
  -[NEAppPush setProviderConfiguration:]
  -[NEAppPush setProviderBundleIdentifier:]
  -[NEAppPush setPluginType:]
  -[NEAppPush overlapsWithConfiguration:]
  -[NEAppPush matchSSIDs]
  -[NEAppPush setMatchSSIDs:]
  -[NEAppPush matchPrivateLTENetworks]
  -[NEAppPush setMatchPrivateLTENetworks:]


NEFilterControlExtensionProviderContext : NEFilterExtensionProviderContext <NEFilterControlExtensionProviderProtocol, NEFilterControlExtensionProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterControlExtensionProviderContext _extensionAuxiliaryHostProtocol]
  +[NEFilterControlExtensionProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterControlExtensionProviderContext dealloc]
  -[NEFilterControlExtensionProviderContext observeValueForKeyPath:ofObject:change:context:]
  -[NEFilterControlExtensionProviderContext extensionPoint]
  -[NEFilterControlExtensionProviderContext dispose]
  -[NEFilterControlExtensionProviderContext requiredProviderSuperClass]
  -[NEFilterControlExtensionProviderContext startFilterWithOptions:completionHandler:]
  -[NEFilterControlExtensionProviderContext handleNewFlow:completionHandler:]
  -[NEFilterControlExtensionProviderContext handleReport:]
  -[NEFilterControlExtensionProviderContext notifyRulesChanged]
  -[NEFilterControlExtensionProviderContext provideRemediationMap:]
  -[NEFilterControlExtensionProviderContext provideURLAppendStringMap:]


NEFilterControlExtensionProviderHostContext : NEFilterExtensionProviderHostContext <NEFilterControlExtensionProviderProtocol, NEFilterControlExtensionProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterControlExtensionProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEFilterControlExtensionProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterControlExtensionProviderHostContext handleNewFlow:completionHandler:]
  -[NEFilterControlExtensionProviderHostContext handleReport:]
  -[NEFilterControlExtensionProviderHostContext notifyRulesChanged]
  -[NEFilterControlExtensionProviderHostContext provideRemediationMap:]
  -[NEFilterControlExtensionProviderHostContext provideURLAppendStringMap:]


NEFilterControlProvider : NEFilterProvider <NSExtensionRequestHandling>
 @property  NSDictionary *remediationMap
 @property  NSDictionary *URLAppendStringMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEFilterControlProvider .cxx_destruct]
  -[NEFilterControlProvider handleNewFlow:completionHandler:]
  -[NEFilterControlProvider notifyRulesChanged]
  -[NEFilterControlProvider handleRemediationForFlow:completionHandler:]
  -[NEFilterControlProvider remediationMap]
  -[NEFilterControlProvider setRemediationMap:]
  -[NEFilterControlProvider URLAppendStringMap]
  -[NEFilterControlProvider setURLAppendStringMap:]


NEFilterDataExtensionProviderContext : NEFilterExtensionProviderContext <NEAppInfoCacheLookupDelegate, NEFilterDataExtensionProviderProtocol, NEFilterDataExtensionProviderHostProtocol>
 @property  NSDictionary *remediationMap
 @property  NSDictionary *URLAppendStringMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterDataExtensionProviderContext _extensionAuxiliaryHostProtocol]
  +[NEFilterDataExtensionProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterDataExtensionProviderContext .cxx_destruct]
  -[NEFilterDataExtensionProviderContext extensionPoint]
  -[NEFilterDataExtensionProviderContext stopWithReason:]
  -[NEFilterDataExtensionProviderContext requiredProviderSuperClass]
  -[NEFilterDataExtensionProviderContext startFilterWithOptions:completionHandler:]
  -[NEFilterDataExtensionProviderContext provideRemediationMap:]
  -[NEFilterDataExtensionProviderContext provideURLAppendStringMap:]
  -[NEFilterDataExtensionProviderContext remediationMap]
  -[NEFilterDataExtensionProviderContext URLAppendStringMap]
  -[NEFilterDataExtensionProviderContext fetchProviderConnectionWithCompletionHandler:]
  -[NEFilterDataExtensionProviderContext providerControlSocketFileHandle:]
  -[NEFilterDataExtensionProviderContext handleRulesChanged]
  -[NEFilterDataExtensionProviderContext report:]
  -[NEFilterDataExtensionProviderContext sendBrowserContentFilterServerRequest]
  -[NEFilterDataExtensionProviderContext sendSocketContentFilterRequest]
  -[NEFilterDataExtensionProviderContext fetchCurrentRulesForFlow:completionHandler:]
  -[NEFilterDataExtensionProviderContext applySettings:completionHandler:]
  -[NEFilterDataExtensionProviderContext fetchAppInfoForPID:UUID:bundleID:completionHandler:]
  -[NEFilterDataExtensionProviderContext resumeFlow:withVerdict:]
  -[NEFilterDataExtensionProviderContext updateFlow:withVerdict:forDirection:]
  -[NEFilterDataExtensionProviderContext handleClientMessage:filloutReply:completionHandler:]


NEFilterDataSavedMessageHandler : NSObject
  // instance methods
  -[NEFilterDataSavedMessageHandler .cxx_destruct]


NEFilterDataExtensionProviderHostContext : NEFilterExtensionProviderHostContext <NEFilterDataExtensionProviderProtocol, NEFilterDataExtensionProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterDataExtensionProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEFilterDataExtensionProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterDataExtensionProviderHostContext provideRemediationMap:]
  -[NEFilterDataExtensionProviderHostContext provideURLAppendStringMap:]
  -[NEFilterDataExtensionProviderHostContext fetchProviderConnectionWithCompletionHandler:]
  -[NEFilterDataExtensionProviderHostContext providerControlSocketFileHandle:]
  -[NEFilterDataExtensionProviderHostContext handleRulesChanged]
  -[NEFilterDataExtensionProviderHostContext report:]
  -[NEFilterDataExtensionProviderHostContext sendBrowserContentFilterServerRequest]
  -[NEFilterDataExtensionProviderHostContext sendSocketContentFilterRequest]
  -[NEFilterDataExtensionProviderHostContext fetchCurrentRulesForFlow:completionHandler:]
  -[NEFilterDataExtensionProviderHostContext applySettings:completionHandler:]
  -[NEFilterDataExtensionProviderHostContext getSourceAppInfo:completionHandler:]


NEExtensionAppPushProviderHostContext : NEExtensionProviderHostContext <NEExtensionAppPushProviderProtocol, NEExtensionAppPushProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionAppPushProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionAppPushProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionAppPushProviderHostContext requiredEntitlement]
  -[NEExtensionAppPushProviderHostContext setProviderConfiguration:]
  -[NEExtensionAppPushProviderHostContext startConnectionWithProviderConfig:completionHandler:]
  -[NEExtensionAppPushProviderHostContext stopWithReason:completionHandler:]
  -[NEExtensionAppPushProviderHostContext reportIncomingCall:]
  -[NEExtensionAppPushProviderHostContext sendOutgoingCallMessage:completionHandler:]
  -[NEExtensionAppPushProviderHostContext sendTimerEvent]


NEFilterDataProvider : NEFilterProvider <NSExtensionRequestHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEFilterDataProvider handleNewFlow:]
  -[NEFilterDataProvider handleRulesChanged]
  -[NEFilterDataProvider applySettings:completionHandler:]
  -[NEFilterDataProvider resumeFlow:withVerdict:]
  -[NEFilterDataProvider handleInboundDataFromFlow:readBytesStartOffset:readBytes:]
  -[NEFilterDataProvider handleOutboundDataFromFlow:readBytesStartOffset:readBytes:]
  -[NEFilterDataProvider handleInboundDataCompleteForFlow:]
  -[NEFilterDataProvider handleOutboundDataCompleteForFlow:]
  -[NEFilterDataProvider handleRemediationForFlow:]
  -[NEFilterDataProvider updateFlow:usingVerdict:forDirection:]


NEFilterExtensionProviderContext : NEExtensionProviderContext <NEFilterExtensionProviderProtocol, NEFilterExtensionProviderHostProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEFilterExtensionProviderContext .cxx_destruct]
  -[NEFilterExtensionProviderContext queue]
  -[NEFilterExtensionProviderContext setConfiguration:extensionIdentifier:]
  -[NEFilterExtensionProviderContext stopWithReason:]
  -[NEFilterExtensionProviderContext startFilterWithOptions:completionHandler:]


NEFilterExtensionProviderHostContext : NEExtensionProviderHostContext <NEFilterExtensionProviderProtocol, NEFilterExtensionProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterExtensionProviderHostContext _extensionAuxiliaryHostProtocol]
  +[NEFilterExtensionProviderHostContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterExtensionProviderHostContext requiredEntitlement]
  -[NEFilterExtensionProviderHostContext startFilterWithOptions:completionHandler:]


NEEthernetTunnelNetworkSettings : NEPacketTunnelNetworkSettings
 @property  NSString *ethernetAddress

  // class methods
  +[NEEthernetTunnelNetworkSettings supportsSecureCoding]

  // instance methods
  -[NEEthernetTunnelNetworkSettings checkValidityAndCollectErrors:]
  -[NEEthernetTunnelNetworkSettings encodeWithCoder:]
  -[NEEthernetTunnelNetworkSettings .cxx_destruct]
  -[NEEthernetTunnelNetworkSettings descriptionWithIndent:options:]
  -[NEEthernetTunnelNetworkSettings copyWithZone:]
  -[NEEthernetTunnelNetworkSettings initWithCoder:]
  -[NEEthernetTunnelNetworkSettings ethernetAddress]
  -[NEEthernetTunnelNetworkSettings initWithTunnelRemoteAddress:ethernetAddress:mtu:]
  -[NEEthernetTunnelNetworkSettings setEthernetAddress:]


NEFilterFlow : NSObject <NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSString *sourceAppIdentifier
 @property  NSString *sourceAppVersion
 @property  NSData *sourceAppUniqueIdentifier
 @property  NSURL *URL
 @property  long long direction
 @property  NSData *sourceAppAuditToken
 @property  unsigned long inBytes
 @property  unsigned long outBytes
 @property  NSData *crypto_signature
 @property  NSString *identifierString
 @property  NSUUID *identifier

  // class methods
  +[NEFilterFlow supportsSecureCoding]

  // instance methods
  -[NEFilterFlow setDirection:]
  -[NEFilterFlow identifier]
  -[NEFilterFlow encodeWithCoder:]
  -[NEFilterFlow identifierString]
  -[NEFilterFlow setURL:]
  -[NEFilterFlow .cxx_destruct]
  -[NEFilterFlow descriptionWithIndent:options:]
  -[NEFilterFlow direction]
  -[NEFilterFlow copyWithZone:]
  -[NEFilterFlow URL]
  -[NEFilterFlow init]
  -[NEFilterFlow initWithCoder:]
  -[NEFilterFlow sourceAppIdentifier]
  -[NEFilterFlow setSourceAppIdentifier:]
  -[NEFilterFlow initWithURL:sourceAppIdentifier:]
  -[NEFilterFlow createNewFlowReply:controlSocket:verdict:context:]
  -[NEFilterFlow createDataReply:controlSocket:direction:verdict:context:]
  -[NEFilterFlow createDataCompleteReply:controlSocket:direction:verdict:context:]
  -[NEFilterFlow sourceAppUniqueIdentifier]
  -[NEFilterFlow setSourceAppUniqueIdentifier:]
  -[NEFilterFlow sourceAppVersion]
  -[NEFilterFlow setSourceAppVersion:]
  -[NEFilterFlow sourceAppAuditToken]
  -[NEFilterFlow setSourceAppAuditToken:]
  -[NEFilterFlow inBytes]
  -[NEFilterFlow setInBytes:]
  -[NEFilterFlow outBytes]
  -[NEFilterFlow setOutBytes:]
  -[NEFilterFlow crypto_signature]
  -[NEFilterFlow setCrypto_signature:]


NEFilterBrowserFlow : NEFilterFlow <NSSecureCoding, NSCopying>
 @property  NSURLRequest *request
 @property  NSURLResponse *response
 @property  NSURL *parentURL

  // class methods
  +[NEFilterBrowserFlow supportsSecureCoding]

  // instance methods
  -[NEFilterBrowserFlow setRequest:]
  -[NEFilterBrowserFlow encodeWithCoder:]
  -[NEFilterBrowserFlow .cxx_destruct]
  -[NEFilterBrowserFlow descriptionWithIndent:options:]
  -[NEFilterBrowserFlow setResponse:]
  -[NEFilterBrowserFlow copyWithZone:]
  -[NEFilterBrowserFlow response]
  -[NEFilterBrowserFlow request]
  -[NEFilterBrowserFlow initWithCoder:]
  -[NEFilterBrowserFlow createNewFlowReply:controlSocket:verdict:context:]
  -[NEFilterBrowserFlow createDataReply:controlSocket:direction:verdict:context:]
  -[NEFilterBrowserFlow createDataCompleteReply:controlSocket:direction:verdict:context:]
  -[NEFilterBrowserFlow parentURL]
  -[NEFilterBrowserFlow setParentURL:]


NEFilterSocketFlow : NEFilterFlow <NSSecureCoding, NSCopying>
 @property  NWEndpoint *localEndpoint
 @property  NWEndpoint *remoteEndpoint
 @property  NSString *remoteHostname
 @property  int socketFamily
 @property  int socketType
 @property  int socketProtocol

  // class methods
  +[NEFilterSocketFlow supportsSecureCoding]

  // instance methods
  -[NEFilterSocketFlow identifier]
  -[NEFilterSocketFlow encodeWithCoder:]
  -[NEFilterSocketFlow identifierString]
  -[NEFilterSocketFlow .cxx_destruct]
  -[NEFilterSocketFlow descriptionWithIndent:options:]
  -[NEFilterSocketFlow copyWithZone:]
  -[NEFilterSocketFlow initWithCoder:]
  -[NEFilterSocketFlow remoteHostname]
  -[NEFilterSocketFlow localEndpoint]
  -[NEFilterSocketFlow setLocalEndpoint:]
  -[NEFilterSocketFlow remoteEndpoint]
  -[NEFilterSocketFlow createNewFlowReply:controlSocket:verdict:context:]
  -[NEFilterSocketFlow createDataReply:controlSocket:direction:verdict:context:]
  -[NEFilterSocketFlow createDataCompleteReply:controlSocket:direction:verdict:context:]
  -[NEFilterSocketFlow setRemoteEndpoint:]
  -[NEFilterSocketFlow setRemoteHostname:]
  -[NEFilterSocketFlow socketFamily]
  -[NEFilterSocketFlow setSocketFamily:]
  -[NEFilterSocketFlow socketType]
  -[NEFilterSocketFlow setSocketType:]
  -[NEFilterSocketFlow socketProtocol]
  -[NEFilterSocketFlow setSocketProtocol:]


NEFilterManager : NSObject <NEPrettyDescription>
 @property  NEConfiguration *configuration
 @property  NSUUID *identifier
 @property  <NEFilterManagerDelegate> *delegate
 @property  NSString *appBundleIdentifier
 @property  BOOL isFromProfile
 @property  BOOL isFromMDM
 @property  NSString *localizedDescription
 @property  NEFilterProviderConfiguration *providerConfiguration
 @property  BOOL enabled
 @property  long long grade

  // class methods
  +[NEFilterManager sharedManager]
  +[NEFilterManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEFilterManager appBundleIdentifier]
  -[NEFilterManager grade]
  -[NEFilterManager localizedDescription]
  -[NEFilterManager setConfiguration:]
  -[NEFilterManager identifier]
  -[NEFilterManager setDelegate:]
  -[NEFilterManager delegate]
  -[NEFilterManager configuration]
  -[NEFilterManager dealloc]
  -[NEFilterManager .cxx_destruct]
  -[NEFilterManager setGrade:]
  -[NEFilterManager setEnabled:]
  -[NEFilterManager setLocalizedDescription:]
  -[NEFilterManager descriptionWithIndent:options:]
  -[NEFilterManager init]
  -[NEFilterManager isEnabled]
  -[NEFilterManager loadFromPreferencesWithCompletionHandler:]
  -[NEFilterManager removeFromPreferencesWithCompletionHandler:]
  -[NEFilterManager saveToPreferencesWithCompletionHandler:]
  -[NEFilterManager isFromProfile]
  -[NEFilterManager isFromMDM]
  -[NEFilterManager fetchStatusWithCompletionHandler:]
  -[NEFilterManager providerConfiguration]
  -[NEFilterManager setProviderConfiguration:]


NEFilterProvider : NEProvider <NSExtensionRequestHandling>
 @property  NEFilterProviderConfiguration *filterConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEFilterProvider .cxx_destruct]
  -[NEFilterProvider handleReport:]
  -[NEFilterProvider startFilterWithCompletionHandler:]
  -[NEFilterProvider stopFilterWithReason:completionHandler:]
  -[NEFilterProvider filterConfiguration]
  -[NEFilterProvider setFilterConfiguration:]


NEFilterReport : NSObject <NSSecureCoding, NSCopying>
 @property  NEFilterFlow *flow
 @property  long long action
 @property  unsigned long bytesInboundCount
 @property  unsigned long bytesOutboundCount
 @property  long long event

  // class methods
  +[NEFilterReport supportsSecureCoding]

  // instance methods
  -[NEFilterReport encodeWithCoder:]
  -[NEFilterReport .cxx_destruct]
  -[NEFilterReport action]
  -[NEFilterReport copyWithZone:]
  -[NEFilterReport event]
  -[NEFilterReport setAction:]
  -[NEFilterReport init]
  -[NEFilterReport initWithCoder:]
  -[NEFilterReport flow]
  -[NEFilterReport setFlow:]
  -[NEFilterReport bytesInboundCount]
  -[NEFilterReport setBytesInboundCount:]
  -[NEFilterReport bytesOutboundCount]
  -[NEFilterReport setBytesOutboundCount:]


NEFilterProviderConfiguration : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSString *pluginType
 @property  NSString *dataProviderDesignatedRequirement
 @property  NSString *packetProviderDesignatedRequirement
 @property  BOOL disableDefaultDrop
 @property  BOOL preserveExistingConnections
 @property  NSURL *dataProviderURL
 @property  NSURL *packetProviderURL
 @property  BOOL filterBrowsers
 @property  BOOL filterSockets
 @property  BOOL filterPackets
 @property  NSDictionary *vendorConfiguration
 @property  NSString *serverAddress
 @property  NSString *username
 @property  NSString *organization
 @property  NSData *passwordReference
 @property  NSData *identityReference
 @property  NSString *filterDataProviderBundleIdentifier
 @property  NSString *filterPacketProviderBundleIdentifier

  // class methods
  +[NEFilterProviderConfiguration supportsSecureCoding]

  // instance methods
  -[NEFilterProviderConfiguration checkValidityAndCollectErrors:]
  -[NEFilterProviderConfiguration setUsername:]
  -[NEFilterProviderConfiguration encodeWithCoder:]
  -[NEFilterProviderConfiguration pluginType]
  -[NEFilterProviderConfiguration .cxx_destruct]
  -[NEFilterProviderConfiguration username]
  -[NEFilterProviderConfiguration descriptionWithIndent:options:]
  -[NEFilterProviderConfiguration organization]
  -[NEFilterProviderConfiguration copyWithZone:]
  -[NEFilterProviderConfiguration setOrganization:]
  -[NEFilterProviderConfiguration initWithCoder:]
  -[NEFilterProviderConfiguration serverAddress]
  -[NEFilterProviderConfiguration setServerAddress:]
  -[NEFilterProviderConfiguration setPluginType:]
  -[NEFilterProviderConfiguration identityReference]
  -[NEFilterProviderConfiguration setIdentityReference:]
  -[NEFilterProviderConfiguration filterBrowsers]
  -[NEFilterProviderConfiguration setFilterBrowsers:]
  -[NEFilterProviderConfiguration filterSockets]
  -[NEFilterProviderConfiguration setFilterSockets:]
  -[NEFilterProviderConfiguration filterPackets]
  -[NEFilterProviderConfiguration setFilterPackets:]
  -[NEFilterProviderConfiguration vendorConfiguration]
  -[NEFilterProviderConfiguration setVendorConfiguration:]
  -[NEFilterProviderConfiguration passwordReference]
  -[NEFilterProviderConfiguration setPasswordReference:]
  -[NEFilterProviderConfiguration filterDataProviderBundleIdentifier]
  -[NEFilterProviderConfiguration setFilterDataProviderBundleIdentifier:]
  -[NEFilterProviderConfiguration filterPacketProviderBundleIdentifier]
  -[NEFilterProviderConfiguration setFilterPacketProviderBundleIdentifier:]
  -[NEFilterProviderConfiguration dataProviderDesignatedRequirement]
  -[NEFilterProviderConfiguration setDataProviderDesignatedRequirement:]
  -[NEFilterProviderConfiguration packetProviderDesignatedRequirement]
  -[NEFilterProviderConfiguration setPacketProviderDesignatedRequirement:]
  -[NEFilterProviderConfiguration disableDefaultDrop]
  -[NEFilterProviderConfiguration setDisableDefaultDrop:]
  -[NEFilterProviderConfiguration preserveExistingConnections]
  -[NEFilterProviderConfiguration setPreserveExistingConnections:]
  -[NEFilterProviderConfiguration dataProviderURL]
  -[NEFilterProviderConfiguration setDataProviderURL:]
  -[NEFilterProviderConfiguration packetProviderURL]
  -[NEFilterProviderConfiguration setPacketProviderURL:]


NEFilterSource : NSObject
 @property  NSURL *url
 @property  long long status
 @property  long long direction
 @property  unsigned long socketIdentifier
 @property  NSString *sourceAppIdentifier
 @property  int sourceAppPid

  // class methods
  +[NEFilterSource filterRequired]

  // instance methods
  -[NEFilterSource setUrl:]
  -[NEFilterSource status]
  -[NEFilterSource .cxx_destruct]
  -[NEFilterSource direction]
  -[NEFilterSource url]
  -[NEFilterSource sourceAppIdentifier]
  -[NEFilterSource setSourceAppIdentifier:]
  -[NEFilterSource receivedResponse:decisionHandler:]
  -[NEFilterSource receivedData:decisionHandler:]
  -[NEFilterSource setSourceAppPid:]
  -[NEFilterSource finishedLoadingWithDecisionHandler:]
  -[NEFilterSource willSendRequest:decisionHandler:]
  -[NEFilterSource initWithDecisionQueue:]
  -[NEFilterSource remediateWithDecisionHandler:]
  -[NEFilterSource initWithURL:direction:socketIdentifier:]
  -[NEFilterSource addData:withCompletionQueue:completionHandler:]
  -[NEFilterSource dataCompleteWithCompletionQueue:completionHandler:]
  -[NEFilterSource socketIdentifier]
  -[NEFilterSource sourceAppPid]


NEFilterDataVerdict : NEFilterVerdict <NSSecureCoding, NSCopying>
 @property  unsigned long passBytes
 @property  unsigned long peekBytes
 @property  long long statisticsReportFrequency

  // class methods
  +[NEFilterDataVerdict supportsSecureCoding]
  +[NEFilterDataVerdict needRulesVerdict]
  +[NEFilterDataVerdict allowVerdict]
  +[NEFilterDataVerdict dropVerdict]
  +[NEFilterDataVerdict remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:]
  +[NEFilterDataVerdict dataVerdictWithPassBytes:peekBytes:]
  +[NEFilterDataVerdict pauseVerdict]

  // instance methods
  -[NEFilterDataVerdict encodeWithCoder:]
  -[NEFilterDataVerdict descriptionWithIndent:options:]
  -[NEFilterDataVerdict copyWithZone:]
  -[NEFilterDataVerdict initWithCoder:]
  -[NEFilterDataVerdict filterAction]
  -[NEFilterDataVerdict statisticsReportFrequency]
  -[NEFilterDataVerdict setStatisticsReportFrequency:]
  -[NEFilterDataVerdict passBytes]
  -[NEFilterDataVerdict setPassBytes:]
  -[NEFilterDataVerdict peekBytes]
  -[NEFilterDataVerdict setPeekBytes:]


NEFilterNewFlowVerdict : NEFilterVerdict <NSSecureCoding, NSCopying>
 @property  BOOL filterInbound
 @property  BOOL filterOutbound
 @property  unsigned long peekInboundBytes
 @property  unsigned long peekOutboundBytes
 @property  long long statisticsReportFrequency

  // class methods
  +[NEFilterNewFlowVerdict supportsSecureCoding]
  +[NEFilterNewFlowVerdict needRulesVerdict]
  +[NEFilterNewFlowVerdict allowVerdict]
  +[NEFilterNewFlowVerdict dropVerdict]
  +[NEFilterNewFlowVerdict remediateVerdictWithRemediationURLMapKey:remediationButtonTextMapKey:]
  +[NEFilterNewFlowVerdict pauseVerdict]
  +[NEFilterNewFlowVerdict URLAppendStringVerdictWithMapKey:]
  +[NEFilterNewFlowVerdict filterDataVerdictWithFilterInbound:peekInboundBytes:filterOutbound:peekOutboundBytes:]

  // instance methods
  -[NEFilterNewFlowVerdict encodeWithCoder:]
  -[NEFilterNewFlowVerdict descriptionWithIndent:options:]
  -[NEFilterNewFlowVerdict copyWithZone:]
  -[NEFilterNewFlowVerdict initWithCoder:]
  -[NEFilterNewFlowVerdict filterAction]
  -[NEFilterNewFlowVerdict statisticsReportFrequency]
  -[NEFilterNewFlowVerdict setStatisticsReportFrequency:]
  -[NEFilterNewFlowVerdict filterInbound]
  -[NEFilterNewFlowVerdict setFilterInbound:]
  -[NEFilterNewFlowVerdict filterOutbound]
  -[NEFilterNewFlowVerdict setFilterOutbound:]
  -[NEFilterNewFlowVerdict peekInboundBytes]
  -[NEFilterNewFlowVerdict setPeekInboundBytes:]
  -[NEFilterNewFlowVerdict peekOutboundBytes]
  -[NEFilterNewFlowVerdict setPeekOutboundBytes:]


NEFilterAbsoluteVerdict : NEFilterVerdict <NSSecureCoding, NSCopying>
 @property  unsigned long inboundPassOffset
 @property  unsigned long inboundPeekOffset
 @property  unsigned long outboundPassOffset
 @property  unsigned long outboundPeekOffset
 @property  long long statisticsReportFrequency

  // class methods
  +[NEFilterAbsoluteVerdict supportsSecureCoding]

  // instance methods
  -[NEFilterAbsoluteVerdict encodeWithCoder:]
  -[NEFilterAbsoluteVerdict descriptionWithIndent:options:]
  -[NEFilterAbsoluteVerdict copyWithZone:]
  -[NEFilterAbsoluteVerdict initWithCoder:]
  -[NEFilterAbsoluteVerdict filterAction]
  -[NEFilterAbsoluteVerdict statisticsReportFrequency]
  -[NEFilterAbsoluteVerdict setStatisticsReportFrequency:]
  -[NEFilterAbsoluteVerdict initWithDrop:inboundPassOffset:inboundPeekOffset:outboundPassOffset:outboundPeekOffset:]
  -[NEFilterAbsoluteVerdict inboundPassOffset]
  -[NEFilterAbsoluteVerdict setInboundPassOffset:]
  -[NEFilterAbsoluteVerdict inboundPeekOffset]
  -[NEFilterAbsoluteVerdict setInboundPeekOffset:]
  -[NEFilterAbsoluteVerdict outboundPassOffset]
  -[NEFilterAbsoluteVerdict setOutboundPassOffset:]
  -[NEFilterAbsoluteVerdict outboundPeekOffset]
  -[NEFilterAbsoluteVerdict setOutboundPeekOffset:]


NEFilterVerdict : NSObject <NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  long long filterAction
 @property  BOOL needRules
 @property  BOOL drop
 @property  BOOL shouldReport

  // class methods
  +[NEFilterVerdict supportsSecureCoding]

  // instance methods
  -[NEFilterVerdict encodeWithCoder:]
  -[NEFilterVerdict drop]
  -[NEFilterVerdict .cxx_destruct]
  -[NEFilterVerdict descriptionWithIndent:options:]
  -[NEFilterVerdict copyWithZone:]
  -[NEFilterVerdict initWithCoder:]
  -[NEFilterVerdict filterAction]
  -[NEFilterVerdict initWithDrop:remediate:]
  -[NEFilterVerdict shouldReport]
  -[NEFilterVerdict setShouldReport:]
  -[NEFilterVerdict needRules]
  -[NEFilterVerdict setNeedRules:]
  -[NEFilterVerdict setDrop:]


NEFilterControlVerdict : NEFilterNewFlowVerdict <NSSecureCoding, NSCopying>
  // class methods
  +[NEFilterControlVerdict supportsSecureCoding]
  +[NEFilterControlVerdict allowVerdictWithUpdateRules:]
  +[NEFilterControlVerdict dropVerdictWithUpdateRules:]
  +[NEFilterControlVerdict updateRules]

  // instance methods
  -[NEFilterControlVerdict encodeWithCoder:]
  -[NEFilterControlVerdict descriptionWithIndent:options:]
  -[NEFilterControlVerdict copyWithZone:]
  -[NEFilterControlVerdict init]
  -[NEFilterControlVerdict initWithCoder:]


NEFilterRemediationVerdict : NEFilterVerdict <NSSecureCoding, NSCopying>
  // class methods
  +[NEFilterRemediationVerdict needRulesVerdict]
  +[NEFilterRemediationVerdict allowVerdict]
  +[NEFilterRemediationVerdict dropVerdict]

  // instance methods
  -[NEFilterRemediationVerdict filterAction]


NEFlowMetaData : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL fastOpenRequested
 @property  BOOL multipathRequested
 @property  NSData *sourceAppUniqueIdentifier
 @property  NSString *sourceAppSigningIdentifier
 @property  NSData *sourceAppAuditToken
 @property  NSUUID *filterFlowIdentifier

  // class methods
  +[NEFlowMetaData supportsSecureCoding]

  // instance methods
  -[NEFlowMetaData encodeWithCoder:]
  -[NEFlowMetaData .cxx_destruct]
  -[NEFlowMetaData copyWithZone:]
  -[NEFlowMetaData initWithCoder:]
  -[NEFlowMetaData sourceAppUniqueIdentifier]
  -[NEFlowMetaData sourceAppAuditToken]
  -[NEFlowMetaData sourceAppSigningIdentifier]
  -[NEFlowMetaData filterFlowIdentifier]
  -[NEFlowMetaData fastOpenRequested]
  -[NEFlowMetaData multipathRequested]


NENexusFlowDivertFlow : NENexusFlow
  // instance methods
  -[NENexusFlowDivertFlow parameters]
  -[NENexusFlowDivertFlow clientIdentifier]
  -[NENexusFlowDivertFlow endpoint]
  -[NENexusFlowDivertFlow dealloc]
  -[NENexusFlowDivertFlow .cxx_destruct]


NEFlowNexus : NENexus
 @property  BOOL supportsBrowseRequests

  // instance methods
  -[NEFlowNexus dealloc]
  -[NEFlowNexus .cxx_destruct]
  -[NEFlowNexus supportsBrowseRequests]
  -[NEFlowNexus setDiscoveredEndpoints:forClient:]
  -[NEFlowNexus initWithName:delegate:]
  -[NEFlowNexus handleAssertFromClient:]
  -[NEFlowNexus handleUnassertFromClient:]
  -[NEFlowNexus setRemoteConnectionDirector:]
  -[NEFlowNexus setSupportsBrowseRequests:]


NEHasher : NSCoder
  // class methods
  +[NEHasher hashObject:withClassPrefixWhitelist:]
  +[NEHasher hashObject:]

  // instance methods
  -[NEHasher decodeInt64ForKey:]
  -[NEHasher decodeFloatForKey:]
  -[NEHasher encodeBool:forKey:]
  -[NEHasher decodeIntegerForKey:]
  -[NEHasher versionForClassName:]
  -[NEHasher decodeIntForKey:]
  -[NEHasher encodeFloat:forKey:]
  -[NEHasher decodeBoolForKey:]
  -[NEHasher decodeDoubleForKey:]
  -[NEHasher encodeInt:forKey:]
  -[NEHasher encodeValueOfObjCType:at:]
  -[NEHasher decodeObjectForKey:]
  -[NEHasher decodeInt32ForKey:]
  -[NEHasher encodeConditionalObject:forKey:]
  -[NEHasher encodeInt64:forKey:]
  -[NEHasher encodeDouble:forKey:]
  -[NEHasher decodeObjectOfClass:forKey:]
  -[NEHasher encodeInteger:forKey:]
  -[NEHasher encodeBytes:length:forKey:]
  -[NEHasher encodeBytes:length:]
  -[NEHasher encodeObject:forKey:]
  -[NEHasher allowsKeyedCoding]
  -[NEHasher encodeInt32:forKey:]
  -[NEHasher decodeObjectOfClasses:forKey:]
  -[NEHasher dealloc]
  -[NEHasher .cxx_destruct]
  -[NEHasher encodeDataObject:]
  -[NEHasher decodeValueOfObjCType:at:]
  -[NEHasher decodeBytesForKey:returnedLength:]
  -[NEHasher decodePropertyListForKey:]
  -[NEHasher containsValueForKey:]
  -[NEHasher decodeDataObject]
  -[NEHasher init]


NEAppPushManager : NSObject
 @property  BOOL active
 @property  NSArray *matchSSIDs
 @property  NSArray *matchPrivateLTENetworks
 @property  NSDictionary *providerConfiguration
 @property  NSString *providerBundleIdentifier
 @property  <NEAppPushDelegate> *delegate
 @property  NSString *localizedDescription
 @property  BOOL enabled

  // class methods
  +[NEAppPushManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEAppPushManager localizedDescription]
  -[NEAppPushManager setDelegate:]
  -[NEAppPushManager delegate]
  -[NEAppPushManager dealloc]
  -[NEAppPushManager isActive]
  -[NEAppPushManager .cxx_destruct]
  -[NEAppPushManager setEnabled:]
  -[NEAppPushManager setLocalizedDescription:]
  -[NEAppPushManager setActive:]
  -[NEAppPushManager init]
  -[NEAppPushManager isEnabled]
  -[NEAppPushManager providerBundleIdentifier]
  -[NEAppPushManager loadFromPreferencesWithCompletionHandler:]
  -[NEAppPushManager removeFromPreferencesWithCompletionHandler:]
  -[NEAppPushManager saveToPreferencesWithCompletionHandler:]
  -[NEAppPushManager providerConfiguration]
  -[NEAppPushManager setProviderConfiguration:]
  -[NEAppPushManager setProviderBundleIdentifier:]
  -[NEAppPushManager matchSSIDs]
  -[NEAppPushManager setMatchSSIDs:]
  -[NEAppPushManager matchPrivateLTENetworks]
  -[NEAppPushManager setMatchPrivateLTENetworks:]


NEPrivateLTENetwork : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *mobileCountryCode
 @property  NSString *mobileNetworkCode
 @property  NSString *trackingAreaCode

  // class methods
  +[NEPrivateLTENetwork supportsSecureCoding]

  // instance methods
  -[NEPrivateLTENetwork encodeWithCoder:]
  -[NEPrivateLTENetwork setMobileCountryCode:]
  -[NEPrivateLTENetwork .cxx_destruct]
  -[NEPrivateLTENetwork setMobileNetworkCode:]
  -[NEPrivateLTENetwork mobileNetworkCode]
  -[NEPrivateLTENetwork mobileCountryCode]
  -[NEPrivateLTENetwork copyWithZone:]
  -[NEPrivateLTENetwork initWithCoder:]
  -[NEPrivateLTENetwork trackingAreaCode]
  -[NEPrivateLTENetwork setTrackingAreaCode:]


NEHelper : NSObject
 @property  @? incomingMessageHandler
 @property  BOOL isSynchronous

  // instance methods
  -[NEHelper setIsSynchronous:]
  -[NEHelper initWithDelegateClassID:queue:]
  -[NEHelper initWithDelegateClassID:queue:additionalProperties:]
  -[NEHelper dealloc]
  -[NEHelper .cxx_destruct]
  -[NEHelper sendRequest:responseHandler:]
  -[NEHelper incomingMessageHandler]
  -[NEHelper setIncomingMessageHandler:]
  -[NEHelper isSynchronous]


NEL2TPUserPreferences : NSObject <NEConfigurationValidating>
 @property  NSString *identifier
 @property  NSString *name
 @property  NEVPNProtocolL2TP *settings
 @property  BOOL current
 @property  BOOL forced

  // instance methods
  -[NEL2TPUserPreferences checkValidityAndCollectErrors:]
  -[NEL2TPUserPreferences identifier]
  -[NEL2TPUserPreferences isCurrent]
  -[NEL2TPUserPreferences dealloc]
  -[NEL2TPUserPreferences .cxx_destruct]
  -[NEL2TPUserPreferences settings]
  -[NEL2TPUserPreferences setSettings:]
  -[NEL2TPUserPreferences setCurrent:]
  -[NEL2TPUserPreferences setName:]
  -[NEL2TPUserPreferences initWithConfiguration:]
  -[NEL2TPUserPreferences name]
  -[NEL2TPUserPreferences isForced]


NEHotspotConfigurationHelper : NSObject
  // instance methods
  -[NEHotspotConfigurationHelper .cxx_destruct]
  -[NEHotspotConfigurationHelper init]


NEDNSSettingsBundle : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enabled
 @property  NSArray *onDemandRules
 @property  NEDNSSettings *settings

  // class methods
  +[NEDNSSettingsBundle supportsSecureCoding]

  // instance methods
  -[NEDNSSettingsBundle checkValidityAndCollectErrors:]
  -[NEDNSSettingsBundle encodeWithCoder:]
  -[NEDNSSettingsBundle .cxx_destruct]
  -[NEDNSSettingsBundle setEnabled:]
  -[NEDNSSettingsBundle settings]
  -[NEDNSSettingsBundle descriptionWithIndent:options:]
  -[NEDNSSettingsBundle setSettings:]
  -[NEDNSSettingsBundle copyWithZone:]
  -[NEDNSSettingsBundle init]
  -[NEDNSSettingsBundle isEnabled]
  -[NEDNSSettingsBundle initWithCoder:]
  -[NEDNSSettingsBundle onDemandRules]
  -[NEDNSSettingsBundle setOnDemandRules:]


NEAgentTunnelExtension : NEAgentExtension <NEExtensionTunnelProviderHostDelegate, NEVPNPluginDriver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEAgentTunnelExtension managerInterface]
  -[NEAgentTunnelExtension disconnectWithReason:]
  -[NEAgentTunnelExtension connectWithParameters:]
  -[NEAgentTunnelExtension attachIPCWithCompletionHandler:]
  -[NEAgentTunnelExtension setAppUUIDMap:]
  -[NEAgentTunnelExtension driverInterface]
  -[NEAgentTunnelExtension extension:didStartWithError:]
  -[NEAgentTunnelExtension extension:didSetStatus:]
  -[NEAgentTunnelExtension extension:didSetTunnelConfiguration:completionHandler:]
  -[NEAgentTunnelExtension extensionDidDetachIPC:]
  -[NEAgentTunnelExtension extension:didRequestSocket:interface:local:remote:effectivePID:completionHandler:]
  -[NEAgentTunnelExtension handleCancel]
  -[NEAgentTunnelExtension handleAppsUninstalled:]
  -[NEAgentTunnelExtension handleAppsUpdateBegins:]
  -[NEAgentTunnelExtension handleAppsUpdateEnding:]
  -[NEAgentTunnelExtension handleAppsUpdateEnds:]
  -[NEAgentTunnelExtension handleExtensionStartedWithCompletionHandler:]
  -[NEAgentTunnelExtension sendExtensionFailed]


NEHotspotHS20Settings : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *domainName
 @property  BOOL roamingEnabled
 @property  NSArray *roamingConsortiumOIs
 @property  NSArray *naiRealmNames
 @property  NSArray *MCCAndMNCs

  // class methods
  +[NEHotspotHS20Settings supportsSecureCoding]

  // instance methods
  -[NEHotspotHS20Settings encodeWithCoder:]
  -[NEHotspotHS20Settings .cxx_destruct]
  -[NEHotspotHS20Settings domainName]
  -[NEHotspotHS20Settings copyWithZone:]
  -[NEHotspotHS20Settings initWithCoder:]
  -[NEHotspotHS20Settings isRoamingEnabled]
  -[NEHotspotHS20Settings setRoamingEnabled:]
  -[NEHotspotHS20Settings initWithDomainName:roamingEnabled:]
  -[NEHotspotHS20Settings roamingConsortiumOIs]
  -[NEHotspotHS20Settings setRoamingConsortiumOIs:]
  -[NEHotspotHS20Settings naiRealmNames]
  -[NEHotspotHS20Settings setNaiRealmNames:]
  -[NEHotspotHS20Settings MCCAndMNCs]
  -[NEHotspotHS20Settings setMCCAndMNCs:]


NEHotspotEAPSettings : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *clientTrustChainReference
 @property  NSData *identityReference
 @property  NSArray *trustedServerCertificateReferences
 @property  NSArray *supportedEAPTypes
 @property  NSString *username
 @property  NSString *outerIdentity
 @property  long long ttlsInnerAuthenticationType
 @property  NSString *password
 @property  NSArray *trustedServerNames
 @property  BOOL tlsClientCertificateRequired
 @property  long long preferredTLSVersion

  // class methods
  +[NEHotspotEAPSettings supportsSecureCoding]

  // instance methods
  -[NEHotspotEAPSettings setIdentity:]
  -[NEHotspotEAPSettings setUsername:]
  -[NEHotspotEAPSettings encodeWithCoder:]
  -[NEHotspotEAPSettings .cxx_destruct]
  -[NEHotspotEAPSettings username]
  -[NEHotspotEAPSettings password]
  -[NEHotspotEAPSettings copyWithZone:]
  -[NEHotspotEAPSettings setPassword:]
  -[NEHotspotEAPSettings initWithCoder:]
  -[NEHotspotEAPSettings identityReference]
  -[NEHotspotEAPSettings setIdentityReference:]
  -[NEHotspotEAPSettings setTrustedServerCertificates:]
  -[NEHotspotEAPSettings supportedEAPTypes]
  -[NEHotspotEAPSettings setSupportedEAPTypes:]
  -[NEHotspotEAPSettings outerIdentity]
  -[NEHotspotEAPSettings setOuterIdentity:]
  -[NEHotspotEAPSettings ttlsInnerAuthenticationType]
  -[NEHotspotEAPSettings setTtlsInnerAuthenticationType:]
  -[NEHotspotEAPSettings trustedServerNames]
  -[NEHotspotEAPSettings setTrustedServerNames:]
  -[NEHotspotEAPSettings isTLSClientCertificateRequired]
  -[NEHotspotEAPSettings setTlsClientCertificateRequired:]
  -[NEHotspotEAPSettings preferredTLSVersion]
  -[NEHotspotEAPSettings setPreferredTLSVersion:]
  -[NEHotspotEAPSettings clientTrustChainReference]
  -[NEHotspotEAPSettings setClientTrustChainReference:]
  -[NEHotspotEAPSettings trustedServerCertificateReferences]
  -[NEHotspotEAPSettings setTrustedServerCertificateReferences:]


NEHotspotConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  long long securityType
 @property  NSString *passphrase
 @property  NEHotspotEAPSettings *eapSettings
 @property  NEHotspotHS20Settings *hs20Settings
 @property  BOOL useSSIDPrefix
 @property  NSString *SSID
 @property  NSString *SSIDPrefix
 @property  BOOL joinOnce
 @property  NSNumber *lifeTimeInDays
 @property  BOOL hidden

  // class methods
  +[NEHotspotConfiguration supportsSecureCoding]

  // instance methods
  -[NEHotspotConfiguration SSID]
  -[NEHotspotConfiguration setSecurityType:]
  -[NEHotspotConfiguration validate]
  -[NEHotspotConfiguration securityType]
  -[NEHotspotConfiguration encodeWithCoder:]
  -[NEHotspotConfiguration .cxx_destruct]
  -[NEHotspotConfiguration hidden]
  -[NEHotspotConfiguration copyWithZone:]
  -[NEHotspotConfiguration setHidden:]
  -[NEHotspotConfiguration init]
  -[NEHotspotConfiguration initWithCoder:]
  -[NEHotspotConfiguration setPassphrase:]
  -[NEHotspotConfiguration passphrase]
  -[NEHotspotConfiguration initWithSSID:]
  -[NEHotspotConfiguration initWithSSID:passphrase:isWEP:]
  -[NEHotspotConfiguration initWithSSID:eapSettings:]
  -[NEHotspotConfiguration initWithHS20Settings:eapSettings:]
  -[NEHotspotConfiguration initWithSSIDPrefix:]
  -[NEHotspotConfiguration initWithSSIDPrefix:passphrase:isWEP:]
  -[NEHotspotConfiguration SSIDPrefix]
  -[NEHotspotConfiguration joinOnce]
  -[NEHotspotConfiguration setJoinOnce:]
  -[NEHotspotConfiguration lifeTimeInDays]
  -[NEHotspotConfiguration setLifeTimeInDays:]
  -[NEHotspotConfiguration eapSettings]
  -[NEHotspotConfiguration setEapSettings:]
  -[NEHotspotConfiguration hs20Settings]
  -[NEHotspotConfiguration setHs20Settings:]
  -[NEHotspotConfiguration useSSIDPrefix]
  -[NEHotspotConfiguration setUseSSIDPrefix:]


NEHotspotConfigurationManager : NSObject
  // class methods
  +[NEHotspotConfigurationManager sharedManager]

  // instance methods
  -[NEHotspotConfigurationManager applyConfiguration:completionHandler:]
  -[NEHotspotConfigurationManager removeConfigurationForSSID:]
  -[NEHotspotConfigurationManager removeConfigurationForHS20DomainName:]
  -[NEHotspotConfigurationManager getConfiguredSSIDsWithCompletionHandler:]


NEHotspotNetwork : NSObject
 @property  long long securityType
 @property  NSString *SSID
 @property  NSString *BSSID

  // class methods
  +[NEHotspotNetwork fetchCurrentWithCompletionHandler:]

  // instance methods
  -[NEHotspotNetwork SSID]
  -[NEHotspotNetwork setSecurityType:]
  -[NEHotspotNetwork securityType]
  -[NEHotspotNetwork dealloc]
  -[NEHotspotNetwork setPassword:]
  -[NEHotspotNetwork BSSID]
  -[NEHotspotNetwork setConfidence:]
  -[NEHotspotNetwork isSecure]
  -[NEHotspotNetwork signalStrength]
  -[NEHotspotNetwork didAutoJoin]
  -[NEHotspotNetwork didJustJoin]
  -[NEHotspotNetwork isChosenHelper]


NEHotspotHelperResponse : NSObject
  // instance methods
  -[NEHotspotHelperResponse setNetwork:]
  -[NEHotspotHelperResponse dealloc]
  -[NEHotspotHelperResponse setNetworkList:]
  -[NEHotspotHelperResponse deliver]


NEHotspotHelperCommand : NSObject
 @property  long long commandType
 @property  NEHotspotNetwork *network
 @property  NSArray *networkList

  // instance methods
  -[NEHotspotHelperCommand network]
  -[NEHotspotHelperCommand dealloc]
  -[NEHotspotHelperCommand commandType]
  -[NEHotspotHelperCommand networkList]
  -[NEHotspotHelperCommand createResponse:]
  -[NEHotspotHelperCommand createTCPConnection:]
  -[NEHotspotHelperCommand createUDPSession:]


NEHotspotHelper : NSObject
  // class methods
  +[NEHotspotHelper registerWithOptions:queue:handler:]
  +[NEHotspotHelper logoff:]
  +[NEHotspotHelper supportedNetworkInterfaces]


NETransparentProxyNetworkSettings : NETunnelNetworkSettings
 @property  BOOL isFullyTransparent
 @property  NSArray *includedNetworkRules
 @property  NSArray *excludedNetworkRules

  // class methods
  +[NETransparentProxyNetworkSettings supportsSecureCoding]

  // instance methods
  -[NETransparentProxyNetworkSettings checkValidityAndCollectErrors:]
  -[NETransparentProxyNetworkSettings encodeWithCoder:]
  -[NETransparentProxyNetworkSettings .cxx_destruct]
  -[NETransparentProxyNetworkSettings descriptionWithIndent:options:]
  -[NETransparentProxyNetworkSettings copyWithZone:]
  -[NETransparentProxyNetworkSettings initWithCoder:]
  -[NETransparentProxyNetworkSettings includedNetworkRules]
  -[NETransparentProxyNetworkSettings setIncludedNetworkRules:]
  -[NETransparentProxyNetworkSettings excludedNetworkRules]
  -[NETransparentProxyNetworkSettings setExcludedNetworkRules:]
  -[NETransparentProxyNetworkSettings isFullyTransparent]
  -[NETransparentProxyNetworkSettings setIsFullyTransparent:]


NEIKEv2ChildSA : NSObject
  // instance methods
  -[NEIKEv2ChildSA dealloc]
  -[NEIKEv2ChildSA .cxx_destruct]


NEIKEv2PrivateNotify : NSObject <NSCopying>
 @property  unsigned short notifyStatus
 @property  NSData *notifyData

  // instance methods
  -[NEIKEv2PrivateNotify .cxx_destruct]
  -[NEIKEv2PrivateNotify copyWithZone:]
  -[NEIKEv2PrivateNotify isEqual:]
  -[NEIKEv2PrivateNotify initWithNotifyStatus:notifyData:]
  -[NEIKEv2PrivateNotify notifyStatus]
  -[NEIKEv2PrivateNotify notifyData]


NEIKEv2SPI : NSObject
  // instance methods
  -[NEIKEv2SPI init]


NEIKEv2IKESPI : NEIKEv2SPI <NSCopying>
 @property  unsigned long value

  // instance methods
  -[NEIKEv2IKESPI initWithValue:]
  -[NEIKEv2IKESPI copyWithZone:]
  -[NEIKEv2IKESPI value]
  -[NEIKEv2IKESPI isEqual:]


NEIKEv2ESPSPI : NEIKEv2SPI <NSCopying>
 @property  unsigned int value

  // instance methods
  -[NEIKEv2ESPSPI initWithValue:]
  -[NEIKEv2ESPSPI copyWithZone:]
  -[NEIKEv2ESPSPI value]
  -[NEIKEv2ESPSPI isEqual:]


NEIKEv2SignatureHashProtocol : NSObject <NSCopying>
 @property  unsigned long hashType

  // instance methods
  -[NEIKEv2SignatureHashProtocol compare:]
  -[NEIKEv2SignatureHashProtocol copyWithZone:]
  -[NEIKEv2SignatureHashProtocol isEqual:]
  -[NEIKEv2SignatureHashProtocol hashType]
  -[NEIKEv2SignatureHashProtocol initWithHashType:]


NEIKEv2AuthenticationProtocol : NSObject <NSCopying>
 @property  unsigned long method
 @property  BOOL isCertificate
 @property  BOOL isDigitalSignature
 @property  unsigned long digitalSignatureAlgorithm

  // instance methods
  -[NEIKEv2AuthenticationProtocol method]
  -[NEIKEv2AuthenticationProtocol copyWithZone:]
  -[NEIKEv2AuthenticationProtocol isEqual:]
  -[NEIKEv2AuthenticationProtocol initWithMethod:]
  -[NEIKEv2AuthenticationProtocol initWithDigitalSignature:]
  -[NEIKEv2AuthenticationProtocol isCertificate]
  -[NEIKEv2AuthenticationProtocol isDigitalSignature]
  -[NEIKEv2AuthenticationProtocol digitalSignatureAlgorithm]


NEIKEv2EAPProtocol : NSObject <NSCopying>
 @property  unsigned long method
 @property  NSDictionary *properties

  // instance methods
  -[NEIKEv2EAPProtocol method]
  -[NEIKEv2EAPProtocol setProperties:]
  -[NEIKEv2EAPProtocol properties]
  -[NEIKEv2EAPProtocol .cxx_destruct]
  -[NEIKEv2EAPProtocol copyWithZone:]
  -[NEIKEv2EAPProtocol isEqual:]
  -[NEIKEv2EAPProtocol initWithMethod:]


NEIKEv2EncryptionProtocol : NSObject <NSCopying>
  // instance methods
  -[NEIKEv2EncryptionProtocol copyWithZone:]
  -[NEIKEv2EncryptionProtocol isEqual:]
  -[NEIKEv2EncryptionProtocol initWithEncryptionType:]


NEIKEv2PRFProtocol : NSObject <NSCopying>
 @property  unsigned long type

  // instance methods
  -[NEIKEv2PRFProtocol type]
  -[NEIKEv2PRFProtocol initWithType:]
  -[NEIKEv2PRFProtocol copyWithZone:]
  -[NEIKEv2PRFProtocol isEqual:]


NEIKEv2IntegrityProtocol : NSObject <NSCopying>
 @property  unsigned long type

  // instance methods
  -[NEIKEv2IntegrityProtocol type]
  -[NEIKEv2IntegrityProtocol initWithType:]
  -[NEIKEv2IntegrityProtocol copyWithZone:]
  -[NEIKEv2IntegrityProtocol isEqual:]


NEIKEv2DHProtocol : NSObject <NSCopying>
 @property  unsigned long group

  // instance methods
  -[NEIKEv2DHProtocol copyWithZone:]
  -[NEIKEv2DHProtocol group]
  -[NEIKEv2DHProtocol isEqual:]
  -[NEIKEv2DHProtocol initWithGroup:]


NEIKEv2IKESAProposal : NSObject <NEPrettyDescription, NSCopying>
 @property  NSArray *encryptionProtocols
 @property  NSArray *integrityProtocols
 @property  NSArray *prfProtocols
 @property  NSArray *dhProtocols
 @property  NSArray *eapProtocols
 @property  unsigned long lifetimeSeconds

  // instance methods
  -[NEIKEv2IKESAProposal .cxx_destruct]
  -[NEIKEv2IKESAProposal descriptionWithIndent:options:]
  -[NEIKEv2IKESAProposal copyWithZone:]
  -[NEIKEv2IKESAProposal init]
  -[NEIKEv2IKESAProposal encryptionProtocols]
  -[NEIKEv2IKESAProposal setEncryptionProtocols:]
  -[NEIKEv2IKESAProposal integrityProtocols]
  -[NEIKEv2IKESAProposal setIntegrityProtocols:]
  -[NEIKEv2IKESAProposal prfProtocols]
  -[NEIKEv2IKESAProposal setPrfProtocols:]
  -[NEIKEv2IKESAProposal dhProtocols]
  -[NEIKEv2IKESAProposal setDhProtocols:]
  -[NEIKEv2IKESAProposal eapProtocols]
  -[NEIKEv2IKESAProposal setEapProtocols:]
  -[NEIKEv2IKESAProposal lifetimeSeconds]
  -[NEIKEv2IKESAProposal setLifetimeSeconds:]


NEIKEv2ChildSAProposal : NSObject <NEPrettyDescription, NSCopying>
 @property  unsigned long protocol
 @property  NSArray *encryptionProtocols
 @property  NSArray *integrityProtocols
 @property  NSArray *dhProtocols
 @property  unsigned long lifetimeSeconds
 @property  BOOL opportunisticPFS

  // instance methods
  -[NEIKEv2ChildSAProposal setProtocol:]
  -[NEIKEv2ChildSAProposal .cxx_destruct]
  -[NEIKEv2ChildSAProposal descriptionWithIndent:options:]
  -[NEIKEv2ChildSAProposal copyWithZone:]
  -[NEIKEv2ChildSAProposal protocol]
  -[NEIKEv2ChildSAProposal init]
  -[NEIKEv2ChildSAProposal encryptionProtocols]
  -[NEIKEv2ChildSAProposal setEncryptionProtocols:]
  -[NEIKEv2ChildSAProposal integrityProtocols]
  -[NEIKEv2ChildSAProposal setIntegrityProtocols:]
  -[NEIKEv2ChildSAProposal dhProtocols]
  -[NEIKEv2ChildSAProposal setDhProtocols:]
  -[NEIKEv2ChildSAProposal lifetimeSeconds]
  -[NEIKEv2ChildSAProposal setLifetimeSeconds:]
  -[NEIKEv2ChildSAProposal opportunisticPFS]
  -[NEIKEv2ChildSAProposal setOpportunisticPFS:]


NEIKEv2TrafficSelector : NSObject <NSCopying>
 @property  NWAddressEndpoint *startAddress
 @property  NWAddressEndpoint *endAddress
 @property  unsigned short startPort
 @property  unsigned short endPort
 @property  unsigned char ipProtocol

  // class methods
  +[NEIKEv2TrafficSelector copyAllIPv6]
  +[NEIKEv2TrafficSelector copyAllIPv4]

  // instance methods
  -[NEIKEv2TrafficSelector startAddress]
  -[NEIKEv2TrafficSelector .cxx_destruct]
  -[NEIKEv2TrafficSelector ipProtocol]
  -[NEIKEv2TrafficSelector copyWithZone:]
  -[NEIKEv2TrafficSelector endAddress]
  -[NEIKEv2TrafficSelector init]
  -[NEIKEv2TrafficSelector setIpProtocol:]
  -[NEIKEv2TrafficSelector setStartAddress:]
  -[NEIKEv2TrafficSelector setEndAddress:]
  -[NEIKEv2TrafficSelector startPort]
  -[NEIKEv2TrafficSelector setStartPort:]
  -[NEIKEv2TrafficSelector endPort]
  -[NEIKEv2TrafficSelector setEndPort:]


NEIKEv2SessionConfiguration : NSObject <NEPrettyDescription, NSCopying>
 @property  NEIKEv2Identifier *localIdentifier
 @property  NEIKEv2Identifier *remoteIdentifier
 @property  BOOL initialContactDisabled
 @property  BOOL negotiateMOBIKE
 @property  NSArray *additionalMOBIKEAddresses
 @property  BOOL natTraversalKeepaliveDisabled
 @property  BOOL natTraversalKeepaliveEnabled
 @property  unsigned long natTraversalKeepaliveInterval
 @property  BOOL natTraversalKeepaliveOffloadEnabled
 @property  unsigned long natTraversalKeepaliveOffloadInterval
 @property  BOOL deadPeerDetectionEnabled
 @property  unsigned long deadPeerDetectionInterval
 @property  unsigned long deadPeerDetectionRetryIntervalMilliseconds
 @property  unsigned int deadPeerDetectionMaxRetryCount
 @property  unsigned int deadPeerDetectionMaxRetryCountBeforeReporting
 @property  unsigned long deadPeerDetectionReceiveIntervalTriggerReporting
 @property  unsigned int deadPeerDetectionReceiveMaxShortDPDBeforeReporting
 @property  BOOL idleTimeoutEnabled
 @property  unsigned long idleTimeoutSeconds
 @property  BOOL blackholeDetectionEnabled
 @property  NEIKEv2AuthenticationProtocol *authenticationProtocol
 @property  NEIKEv2AuthenticationProtocol *remoteAuthentication
 @property  NSString *localPrivateEAPIdentity
 @property  NSData *localEncryptedEAPIdentity
 @property  NSString *username
 @property  NSString *password
 @property  NSData *passwordReference
 @property  NSData *sharedSecret
 @property  NSData *sharedSecretReference
 @property  NSString *localCertificateName
 @property  NSData *localCertificateReference
 @property  NSString *remoteCertificateHostname
 @property  NSString *remoteCertificateAuthorityName
 @property  NSArray *remoteCertificateAuthorityReferences
 @property  NSData *remoteCertificateAuthorityHash
 @property  BOOL enableCertificateRevocationCheck
 @property  BOOL strictCertificateRevocationCheck
 @property  BOOL disableRemoteCertificateValidation
 @property  NSData *localPrivateKey
 @property  NSData *localPublicKey
 @property  NSData *remotePublicKey
 @property  NSString *tlsMinimumVersion
 @property  NSString *tlsMaximumVersion
 @property  NEIKEv2ConfigurationMessage *configurationRequest
 @property  NEIKEv2ConfigurationMessage *configurationReply
 @property  NSArray *customIKEAuthPayloads
 @property  NSArray *customIKEAuthVendorPayloads
 @property  NSArray *customIKEAuthPrivateNotifies
 @property  NSNumber *pduSessionID
 @property  NSString *IMEI
 @property  NSString *IMEISV

  // instance methods
  -[NEIKEv2SessionConfiguration localIdentifier]
  -[NEIKEv2SessionConfiguration setUsername:]
  -[NEIKEv2SessionConfiguration .cxx_destruct]
  -[NEIKEv2SessionConfiguration username]
  -[NEIKEv2SessionConfiguration descriptionWithIndent:options:]
  -[NEIKEv2SessionConfiguration setIMEI:]
  -[NEIKEv2SessionConfiguration password]
  -[NEIKEv2SessionConfiguration copyWithZone:]
  -[NEIKEv2SessionConfiguration setPassword:]
  -[NEIKEv2SessionConfiguration IMEI]
  -[NEIKEv2SessionConfiguration remoteIdentifier]
  -[NEIKEv2SessionConfiguration init]
  -[NEIKEv2SessionConfiguration passwordReference]
  -[NEIKEv2SessionConfiguration setPasswordReference:]
  -[NEIKEv2SessionConfiguration configurationRequest]
  -[NEIKEv2SessionConfiguration setConfigurationRequest:]
  -[NEIKEv2SessionConfiguration configurationReply]
  -[NEIKEv2SessionConfiguration setConfigurationReply:]
  -[NEIKEv2SessionConfiguration setLocalIdentifier:]
  -[NEIKEv2SessionConfiguration setRemoteIdentifier:]
  -[NEIKEv2SessionConfiguration initialContactDisabled]
  -[NEIKEv2SessionConfiguration setInitialContactDisabled:]
  -[NEIKEv2SessionConfiguration negotiateMOBIKE]
  -[NEIKEv2SessionConfiguration setNegotiateMOBIKE:]
  -[NEIKEv2SessionConfiguration additionalMOBIKEAddresses]
  -[NEIKEv2SessionConfiguration setAdditionalMOBIKEAddresses:]
  -[NEIKEv2SessionConfiguration natTraversalKeepaliveDisabled]
  -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveDisabled:]
  -[NEIKEv2SessionConfiguration natTraversalKeepaliveEnabled]
  -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveEnabled:]
  -[NEIKEv2SessionConfiguration natTraversalKeepaliveInterval]
  -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveInterval:]
  -[NEIKEv2SessionConfiguration natTraversalKeepaliveOffloadEnabled]
  -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadEnabled:]
  -[NEIKEv2SessionConfiguration natTraversalKeepaliveOffloadInterval]
  -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadInterval:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionEnabled]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionEnabled:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionInterval]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionInterval:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionRetryIntervalMilliseconds]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionRetryIntervalMilliseconds:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionMaxRetryCount]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCount:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionMaxRetryCountBeforeReporting]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCountBeforeReporting:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionReceiveIntervalTriggerReporting]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveIntervalTriggerReporting:]
  -[NEIKEv2SessionConfiguration deadPeerDetectionReceiveMaxShortDPDBeforeReporting]
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveMaxShortDPDBeforeReporting:]
  -[NEIKEv2SessionConfiguration idleTimeoutEnabled]
  -[NEIKEv2SessionConfiguration setIdleTimeoutEnabled:]
  -[NEIKEv2SessionConfiguration idleTimeoutSeconds]
  -[NEIKEv2SessionConfiguration setIdleTimeoutSeconds:]
  -[NEIKEv2SessionConfiguration blackholeDetectionEnabled]
  -[NEIKEv2SessionConfiguration setBlackholeDetectionEnabled:]
  -[NEIKEv2SessionConfiguration authenticationProtocol]
  -[NEIKEv2SessionConfiguration setAuthenticationProtocol:]
  -[NEIKEv2SessionConfiguration remoteAuthentication]
  -[NEIKEv2SessionConfiguration setRemoteAuthentication:]
  -[NEIKEv2SessionConfiguration localPrivateEAPIdentity]
  -[NEIKEv2SessionConfiguration setLocalPrivateEAPIdentity:]
  -[NEIKEv2SessionConfiguration localEncryptedEAPIdentity]
  -[NEIKEv2SessionConfiguration setLocalEncryptedEAPIdentity:]
  -[NEIKEv2SessionConfiguration sharedSecret]
  -[NEIKEv2SessionConfiguration setSharedSecret:]
  -[NEIKEv2SessionConfiguration sharedSecretReference]
  -[NEIKEv2SessionConfiguration setSharedSecretReference:]
  -[NEIKEv2SessionConfiguration localCertificateName]
  -[NEIKEv2SessionConfiguration setLocalCertificateName:]
  -[NEIKEv2SessionConfiguration localCertificateReference]
  -[NEIKEv2SessionConfiguration setLocalCertificateReference:]
  -[NEIKEv2SessionConfiguration remoteCertificateHostname]
  -[NEIKEv2SessionConfiguration setRemoteCertificateHostname:]
  -[NEIKEv2SessionConfiguration remoteCertificateAuthorityName]
  -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityName:]
  -[NEIKEv2SessionConfiguration remoteCertificateAuthorityReferences]
  -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityReferences:]
  -[NEIKEv2SessionConfiguration remoteCertificateAuthorityHash]
  -[NEIKEv2SessionConfiguration setRemoteCertificateAuthorityHash:]
  -[NEIKEv2SessionConfiguration enableCertificateRevocationCheck]
  -[NEIKEv2SessionConfiguration setEnableCertificateRevocationCheck:]
  -[NEIKEv2SessionConfiguration strictCertificateRevocationCheck]
  -[NEIKEv2SessionConfiguration setStrictCertificateRevocationCheck:]
  -[NEIKEv2SessionConfiguration disableRemoteCertificateValidation]
  -[NEIKEv2SessionConfiguration setDisableRemoteCertificateValidation:]
  -[NEIKEv2SessionConfiguration localPrivateKey]
  -[NEIKEv2SessionConfiguration setLocalPrivateKey:]
  -[NEIKEv2SessionConfiguration localPublicKey]
  -[NEIKEv2SessionConfiguration setLocalPublicKey:]
  -[NEIKEv2SessionConfiguration remotePublicKey]
  -[NEIKEv2SessionConfiguration setRemotePublicKey:]
  -[NEIKEv2SessionConfiguration tlsMinimumVersion]
  -[NEIKEv2SessionConfiguration setTlsMinimumVersion:]
  -[NEIKEv2SessionConfiguration tlsMaximumVersion]
  -[NEIKEv2SessionConfiguration setTlsMaximumVersion:]
  -[NEIKEv2SessionConfiguration customIKEAuthPayloads]
  -[NEIKEv2SessionConfiguration setCustomIKEAuthPayloads:]
  -[NEIKEv2SessionConfiguration customIKEAuthVendorPayloads]
  -[NEIKEv2SessionConfiguration setCustomIKEAuthVendorPayloads:]
  -[NEIKEv2SessionConfiguration customIKEAuthPrivateNotifies]
  -[NEIKEv2SessionConfiguration setCustomIKEAuthPrivateNotifies:]
  -[NEIKEv2SessionConfiguration pduSessionID]
  -[NEIKEv2SessionConfiguration setPduSessionID:]
  -[NEIKEv2SessionConfiguration IMEISV]
  -[NEIKEv2SessionConfiguration setIMEISV:]


NEIKEv2IKESAConfiguration : NSObject <NEPrettyDescription, NSCopying>
 @property  NWEndpoint *localEndpoint
 @property  NWEndpoint *remoteEndpoint
 @property  NSString *outgoingInterfaceName
 @property  BOOL randomizeLocalPort
 @property  BOOL serverMode
 @property  BOOL allowRedirect
 @property  BOOL disableSwitchToNATTPorts
 @property  BOOL allowTCPEncapsulation
 @property  BOOL useTLSForTCPEncapsulation
 @property  BOOL forceUDPEncapsulation
 @property  BOOL preferInitiatorProposalOrder
 @property  unsigned short tcpEncapsulationPort
 @property  unsigned int nonceSize
 @property  NWAddressEndpoint *redirectedFromServer
 @property  NSArray *proposals
 @property  NSArray *customIKESAInitPayloads
 @property  NSArray *customIKESAInitVendorPayloads
 @property  NSSet *extraSupportedSignatureHashes

  // instance methods
  -[NEIKEv2IKESAConfiguration .cxx_destruct]
  -[NEIKEv2IKESAConfiguration descriptionWithIndent:options:]
  -[NEIKEv2IKESAConfiguration copyWithZone:]
  -[NEIKEv2IKESAConfiguration init]
  -[NEIKEv2IKESAConfiguration localEndpoint]
  -[NEIKEv2IKESAConfiguration setLocalEndpoint:]
  -[NEIKEv2IKESAConfiguration remoteEndpoint]
  -[NEIKEv2IKESAConfiguration setRemoteEndpoint:]
  -[NEIKEv2IKESAConfiguration proposals]
  -[NEIKEv2IKESAConfiguration setProposals:]
  -[NEIKEv2IKESAConfiguration outgoingInterfaceName]
  -[NEIKEv2IKESAConfiguration setOutgoingInterfaceName:]
  -[NEIKEv2IKESAConfiguration randomizeLocalPort]
  -[NEIKEv2IKESAConfiguration setRandomizeLocalPort:]
  -[NEIKEv2IKESAConfiguration serverMode]
  -[NEIKEv2IKESAConfiguration setServerMode:]
  -[NEIKEv2IKESAConfiguration allowRedirect]
  -[NEIKEv2IKESAConfiguration setAllowRedirect:]
  -[NEIKEv2IKESAConfiguration disableSwitchToNATTPorts]
  -[NEIKEv2IKESAConfiguration setDisableSwitchToNATTPorts:]
  -[NEIKEv2IKESAConfiguration allowTCPEncapsulation]
  -[NEIKEv2IKESAConfiguration setAllowTCPEncapsulation:]
  -[NEIKEv2IKESAConfiguration useTLSForTCPEncapsulation]
  -[NEIKEv2IKESAConfiguration setUseTLSForTCPEncapsulation:]
  -[NEIKEv2IKESAConfiguration forceUDPEncapsulation]
  -[NEIKEv2IKESAConfiguration setForceUDPEncapsulation:]
  -[NEIKEv2IKESAConfiguration preferInitiatorProposalOrder]
  -[NEIKEv2IKESAConfiguration setPreferInitiatorProposalOrder:]
  -[NEIKEv2IKESAConfiguration tcpEncapsulationPort]
  -[NEIKEv2IKESAConfiguration setTcpEncapsulationPort:]
  -[NEIKEv2IKESAConfiguration nonceSize]
  -[NEIKEv2IKESAConfiguration setNonceSize:]
  -[NEIKEv2IKESAConfiguration redirectedFromServer]
  -[NEIKEv2IKESAConfiguration setRedirectedFromServer:]
  -[NEIKEv2IKESAConfiguration customIKESAInitPayloads]
  -[NEIKEv2IKESAConfiguration setCustomIKESAInitPayloads:]
  -[NEIKEv2IKESAConfiguration customIKESAInitVendorPayloads]
  -[NEIKEv2IKESAConfiguration setCustomIKESAInitVendorPayloads:]
  -[NEIKEv2IKESAConfiguration extraSupportedSignatureHashes]
  -[NEIKEv2IKESAConfiguration setExtraSupportedSignatureHashes:]


NEIKEv2ChildSAConfiguration : NSObject <NEPrettyDescription, NSCopying>
 @property  unsigned long mode
 @property  unsigned int replayWindowSize
 @property  BOOL sequencePerTrafficClass
 @property  BOOL preferInitiatorProposalOrder
 @property  NSArray *proposals
 @property  NSArray *localTrafficSelectors
 @property  NSArray *remoteTrafficSelectors

  // instance methods
  -[NEIKEv2ChildSAConfiguration mode]
  -[NEIKEv2ChildSAConfiguration .cxx_destruct]
  -[NEIKEv2ChildSAConfiguration descriptionWithIndent:options:]
  -[NEIKEv2ChildSAConfiguration setMode:]
  -[NEIKEv2ChildSAConfiguration copyWithZone:]
  -[NEIKEv2ChildSAConfiguration init]
  -[NEIKEv2ChildSAConfiguration proposals]
  -[NEIKEv2ChildSAConfiguration setProposals:]
  -[NEIKEv2ChildSAConfiguration preferInitiatorProposalOrder]
  -[NEIKEv2ChildSAConfiguration setPreferInitiatorProposalOrder:]
  -[NEIKEv2ChildSAConfiguration replayWindowSize]
  -[NEIKEv2ChildSAConfiguration setReplayWindowSize:]
  -[NEIKEv2ChildSAConfiguration sequencePerTrafficClass]
  -[NEIKEv2ChildSAConfiguration setSequencePerTrafficClass:]
  -[NEIKEv2ChildSAConfiguration localTrafficSelectors]
  -[NEIKEv2ChildSAConfiguration setLocalTrafficSelectors:]
  -[NEIKEv2ChildSAConfiguration remoteTrafficSelectors]
  -[NEIKEv2ChildSAConfiguration setRemoteTrafficSelectors:]


NEIKEv2Identifier : NSObject <NEPrettyDescription, NSCopying>
 @property  NSData *identifierData
 @property  NSString *stringValue
 @property  unsigned long identifierType

  // class methods
  +[NEIKEv2Identifier copyTypeDescription]
  +[NEIKEv2Identifier createIdentifierWithType:data:zone:]
  +[NEIKEv2Identifier createIdentifierWithType:data:]

  // instance methods
  -[NEIKEv2Identifier identifierType]
  -[NEIKEv2Identifier stringValue]
  -[NEIKEv2Identifier .cxx_destruct]
  -[NEIKEv2Identifier descriptionWithIndent:options:]
  -[NEIKEv2Identifier setIdentifierData:]
  -[NEIKEv2Identifier copyWithZone:]
  -[NEIKEv2Identifier identifierData]
  -[NEIKEv2Identifier isEqual:]
  -[NEIKEv2Identifier copyShortDescription]


NEIKEv2FQDNIdentifier : NEIKEv2Identifier
  // class methods
  +[NEIKEv2FQDNIdentifier copyTypeDescription]

  // instance methods
  -[NEIKEv2FQDNIdentifier identifierType]
  -[NEIKEv2FQDNIdentifier initWithFQDN:]


NEIKEv2UserFQDNIdentifier : NEIKEv2Identifier
  // class methods
  +[NEIKEv2UserFQDNIdentifier copyTypeDescription]

  // instance methods
  -[NEIKEv2UserFQDNIdentifier identifierType]
  -[NEIKEv2UserFQDNIdentifier initWithUserFQDN:]


NEIKEv2ASN1DNIdentifier : NEIKEv2Identifier
  // class methods
  +[NEIKEv2ASN1DNIdentifier copyTypeDescription]

  // instance methods
  -[NEIKEv2ASN1DNIdentifier identifierType]
  -[NEIKEv2ASN1DNIdentifier initWithData:]


NEIKEv2AddressIdentifier : NEIKEv2Identifier
 @property  NWAddressEndpoint *address

  // class methods
  +[NEIKEv2AddressIdentifier copyTypeDescription]

  // instance methods
  -[NEIKEv2AddressIdentifier identifierType]
  -[NEIKEv2AddressIdentifier stringValue]
  -[NEIKEv2AddressIdentifier .cxx_destruct]
  -[NEIKEv2AddressIdentifier address]
  -[NEIKEv2AddressIdentifier initWithAddress:]
  -[NEIKEv2AddressIdentifier identifierData]


NEIKEv2KeyIDIdentifier : NEIKEv2Identifier
  // class methods
  +[NEIKEv2KeyIDIdentifier copyTypeDescription]

  // instance methods
  -[NEIKEv2KeyIDIdentifier identifierType]
  -[NEIKEv2KeyIDIdentifier initWithKeyID:]
  -[NEIKEv2KeyIDIdentifier initWithKeyIDString:]


NEIKEv2CustomData : NSObject <NSCopying>
 @property  unsigned long customType
 @property  NSData *customData

  // instance methods
  -[NEIKEv2CustomData .cxx_destruct]
  -[NEIKEv2CustomData copyWithZone:]
  -[NEIKEv2CustomData customData]
  -[NEIKEv2CustomData setCustomData:]
  -[NEIKEv2CustomData customType]
  -[NEIKEv2CustomData setCustomType:]


NEIKEv2VendorData : NSObject <NSCopying>
 @property  NSData *vendorData

  // instance methods
  -[NEIKEv2VendorData vendorData]
  -[NEIKEv2VendorData .cxx_destruct]
  -[NEIKEv2VendorData setVendorData:]
  -[NEIKEv2VendorData copyWithZone:]


NEIKEv2ConfigurationAttribute : NSObject <NEPrettyDescription>
 @property  unsigned long attributeType
 @property  unsigned long valueType

  // class methods
  +[NEIKEv2ConfigurationAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2ConfigurationAttribute attributeType]
  -[NEIKEv2ConfigurationAttribute .cxx_destruct]
  -[NEIKEv2ConfigurationAttribute descriptionWithIndent:options:]
  -[NEIKEv2ConfigurationAttribute valueType]
  -[NEIKEv2ConfigurationAttribute attributeName]
  -[NEIKEv2ConfigurationAttribute initEmptyRequest]


NEIKEv2AddressAttribute : NEIKEv2ConfigurationAttribute <NSCopying>
 @property  NWAddressEndpoint *address

  // class methods
  +[NEIKEv2AddressAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2AddressAttribute attributeType]
  -[NEIKEv2AddressAttribute .cxx_destruct]
  -[NEIKEv2AddressAttribute descriptionWithIndent:options:]
  -[NEIKEv2AddressAttribute address]
  -[NEIKEv2AddressAttribute copyWithZone:]
  -[NEIKEv2AddressAttribute initWithAddress:]
  -[NEIKEv2AddressAttribute initCustomWithAttributeType:attributeName:addressValue:]


NEIKEv2SubnetAttribute : NEIKEv2ConfigurationAttribute <NSCopying>
 @property  NWAddressEndpoint *address
 @property  unsigned char prefix
 @property  unsigned int ipv4SubnetMask
 @property  NWAddressEndpoint *subnetMaskAddress

  // class methods
  +[NEIKEv2SubnetAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2SubnetAttribute attributeType]
  -[NEIKEv2SubnetAttribute .cxx_destruct]
  -[NEIKEv2SubnetAttribute descriptionWithIndent:options:]
  -[NEIKEv2SubnetAttribute address]
  -[NEIKEv2SubnetAttribute prefix]
  -[NEIKEv2SubnetAttribute copyWithZone:]
  -[NEIKEv2SubnetAttribute initWithAddress:prefix:]
  -[NEIKEv2SubnetAttribute initWithAddress:ipv4SubnetMask:]
  -[NEIKEv2SubnetAttribute initCustomWithAttributeType:attributeName:addressValue:prefix:]
  -[NEIKEv2SubnetAttribute initCustomWithAttributeType:attributeName:addressValue:ipv4SubnetMask:]
  -[NEIKEv2SubnetAttribute subnetMaskAddress]
  -[NEIKEv2SubnetAttribute ipv4SubnetMask]


NEIKEv2StringAttribute : NEIKEv2ConfigurationAttribute <NSCopying>
 @property  NSString *stringValue

  // class methods
  +[NEIKEv2StringAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2StringAttribute attributeType]
  -[NEIKEv2StringAttribute stringValue]
  -[NEIKEv2StringAttribute .cxx_destruct]
  -[NEIKEv2StringAttribute descriptionWithIndent:options:]
  -[NEIKEv2StringAttribute valueType]
  -[NEIKEv2StringAttribute copyWithZone:]
  -[NEIKEv2StringAttribute initWithStringValue:]
  -[NEIKEv2StringAttribute initCustomWithAttributeType:attributeName:stringValue:]


NEIKEv2IPv4AddressAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv4AddressAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4AddressAttribute attributeType]
  -[NEIKEv2IPv4AddressAttribute valueType]
  -[NEIKEv2IPv4AddressAttribute attributeName]


NEIKEv2IPv4DNSAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv4DNSAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4DNSAttribute attributeType]
  -[NEIKEv2IPv4DNSAttribute valueType]
  -[NEIKEv2IPv4DNSAttribute attributeName]


NEIKEv2IPv4DHCPAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv4DHCPAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4DHCPAttribute attributeType]
  -[NEIKEv2IPv4DHCPAttribute valueType]
  -[NEIKEv2IPv4DHCPAttribute attributeName]


NEIKEv2IPv4NetmaskAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv4NetmaskAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4NetmaskAttribute attributeType]
  -[NEIKEv2IPv4NetmaskAttribute valueType]
  -[NEIKEv2IPv4NetmaskAttribute attributeName]


NEIKEv2IPv4SubnetAttribute : NEIKEv2SubnetAttribute
  // class methods
  +[NEIKEv2IPv4SubnetAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4SubnetAttribute attributeType]
  -[NEIKEv2IPv4SubnetAttribute valueType]
  -[NEIKEv2IPv4SubnetAttribute attributeName]


NEIKEv2IPv6AddressAttribute : NEIKEv2SubnetAttribute
  // class methods
  +[NEIKEv2IPv6AddressAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv6AddressAttribute attributeType]
  -[NEIKEv2IPv6AddressAttribute valueType]
  -[NEIKEv2IPv6AddressAttribute attributeName]


NEIKEv2IPv6DNSAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv6DNSAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv6DNSAttribute attributeType]
  -[NEIKEv2IPv6DNSAttribute valueType]
  -[NEIKEv2IPv6DNSAttribute attributeName]


NEIKEv2IPv6DHCPAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv6DHCPAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv6DHCPAttribute attributeType]
  -[NEIKEv2IPv6DHCPAttribute valueType]
  -[NEIKEv2IPv6DHCPAttribute attributeName]


NEIKEv2IPv6SubnetAttribute : NEIKEv2SubnetAttribute
  // class methods
  +[NEIKEv2IPv6SubnetAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv6SubnetAttribute attributeType]
  -[NEIKEv2IPv6SubnetAttribute valueType]
  -[NEIKEv2IPv6SubnetAttribute attributeName]


NEIKEv2DNSDomainAttribute : NEIKEv2StringAttribute
  // class methods
  +[NEIKEv2DNSDomainAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2DNSDomainAttribute attributeType]
  -[NEIKEv2DNSDomainAttribute attributeName]


NEIKEv2AppVersionAttribute : NEIKEv2StringAttribute
  // class methods
  +[NEIKEv2AppVersionAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2AppVersionAttribute attributeType]
  -[NEIKEv2AppVersionAttribute attributeName]


NEIKEv2SupportedAttribute : NEIKEv2StringAttribute
  // class methods
  +[NEIKEv2SupportedAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2SupportedAttribute attributeType]
  -[NEIKEv2SupportedAttribute attributeName]


NEIKEv2IPv4PCSCFAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv4PCSCFAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv4PCSCFAttribute attributeType]
  -[NEIKEv2IPv4PCSCFAttribute valueType]
  -[NEIKEv2IPv4PCSCFAttribute attributeName]


NEIKEv2IPv6PCSCFAttribute : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2IPv6PCSCFAttribute copyTypeDescription]

  // instance methods
  -[NEIKEv2IPv6PCSCFAttribute attributeType]
  -[NEIKEv2IPv6PCSCFAttribute valueType]
  -[NEIKEv2IPv6PCSCFAttribute attributeName]


NEIKEv2InitiatorTransportIPv6Address : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2InitiatorTransportIPv6Address copyTypeDescription]

  // instance methods
  -[NEIKEv2InitiatorTransportIPv6Address attributeType]
  -[NEIKEv2InitiatorTransportIPv6Address valueType]
  -[NEIKEv2InitiatorTransportIPv6Address attributeName]


NEIKEv2ResponderTransportIPv6Address : NEIKEv2AddressAttribute
  // class methods
  +[NEIKEv2ResponderTransportIPv6Address copyTypeDescription]

  // instance methods
  -[NEIKEv2ResponderTransportIPv6Address attributeType]
  -[NEIKEv2ResponderTransportIPv6Address valueType]
  -[NEIKEv2ResponderTransportIPv6Address attributeName]


NEIKEv2ConfigurationMessage : NSObject <NEPrettyDescription, NSCopying>
  // instance methods
  -[NEIKEv2ConfigurationMessage .cxx_destruct]
  -[NEIKEv2ConfigurationMessage descriptionWithIndent:options:]
  -[NEIKEv2ConfigurationMessage copyWithZone:]
  -[NEIKEv2ConfigurationMessage initWithWithAttributes:]


NEIKEv2DHKeys : NSObject
  // instance methods
  -[NEIKEv2DHKeys dealloc]
  -[NEIKEv2DHKeys .cxx_destruct]


NEIKEv2Crypto : NSObject

NEIKEv2EAP : NSObject
  // instance methods
  -[NEIKEv2EAP dealloc]
  -[NEIKEv2EAP .cxx_destruct]
  -[NEIKEv2EAP init]


NEIKEv2IKESA : NSObject
  // instance methods
  -[NEIKEv2IKESA dealloc]
  -[NEIKEv2IKESA .cxx_destruct]


NEIKEv2Listener : NSObject <NEIKEv2TransportDelegate, NEIKEv2ConfigurationDelegate>
 @property  NSObject<OS_dispatch_queue> *listenerQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2Listener reportError:]
  -[NEIKEv2Listener dealloc]
  -[NEIKEv2Listener .cxx_destruct]
  -[NEIKEv2Listener cancel]
  -[NEIKEv2Listener receivePacket:]
  -[NEIKEv2Listener requestConfigurationForSession:sessionConfig:childConfig:validateAuthBlock:responseBlock:]
  -[NEIKEv2Listener sessionFailedBeforeRequestingConfiguration:]
  -[NEIKEv2Listener initWithListenerIKEConfig:saSession:listenerUDPPort:listenerInterface:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener initWithListenerIKEConfig:saSession:listenerUDPPort:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener initWithListenerIKEConfig:saSession:packetDelegate:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener initWithListenerIKEConfig:kernelSASessionName:listenerUDPPort:listenerInterface:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener initWithListenerIKEConfig:kernelSASessionName:listenerUDPPort:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener initWithListenerIKEConfig:kernelSASessionName:packetDelegate:listenerQueue:delegate:delegateQueue:]
  -[NEIKEv2Listener listenerQueue]


NEIKEv2Payload : NSObject <NEPrettyDescription>
 @property  BOOL hasRequiredFields
 @property  unsigned long type

  // class methods
  +[NEIKEv2Payload copyTypeDescription]

  // instance methods
  -[NEIKEv2Payload type]
  -[NEIKEv2Payload .cxx_destruct]
  -[NEIKEv2Payload descriptionWithIndent:options:]
  -[NEIKEv2Payload init]
  -[NEIKEv2Payload hasRequiredFields]
  -[NEIKEv2Payload generatePayloadData]
  -[NEIKEv2Payload parsePayloadData]


NEIKEv2CustomPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2CustomPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2CustomPayload type]
  -[NEIKEv2CustomPayload .cxx_destruct]
  -[NEIKEv2CustomPayload descriptionWithIndent:options:]
  -[NEIKEv2CustomPayload hasRequiredFields]
  -[NEIKEv2CustomPayload generatePayloadData]
  -[NEIKEv2CustomPayload parsePayloadData]


NEIKEv2EncryptedPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2EncryptedPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2EncryptedPayload type]
  -[NEIKEv2EncryptedPayload .cxx_destruct]
  -[NEIKEv2EncryptedPayload descriptionWithIndent:options:]
  -[NEIKEv2EncryptedPayload hasRequiredFields]
  -[NEIKEv2EncryptedPayload generatePayloadData]
  -[NEIKEv2EncryptedPayload parsePayloadData]


NEIKEv2EncryptedFragmentPayload : NEIKEv2EncryptedPayload
  // class methods
  +[NEIKEv2EncryptedFragmentPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2EncryptedFragmentPayload type]
  -[NEIKEv2EncryptedFragmentPayload hasRequiredFields]
  -[NEIKEv2EncryptedFragmentPayload parsePayloadData]


NEIKEv2IKESAPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2IKESAPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2IKESAPayload type]
  -[NEIKEv2IKESAPayload .cxx_destruct]
  -[NEIKEv2IKESAPayload descriptionWithIndent:options:]
  -[NEIKEv2IKESAPayload hasRequiredFields]
  -[NEIKEv2IKESAPayload generatePayloadData]
  -[NEIKEv2IKESAPayload parsePayloadData]


NEIKEv2ChildSAPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2ChildSAPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2ChildSAPayload type]
  -[NEIKEv2ChildSAPayload .cxx_destruct]
  -[NEIKEv2ChildSAPayload descriptionWithIndent:options:]
  -[NEIKEv2ChildSAPayload hasRequiredFields]
  -[NEIKEv2ChildSAPayload generatePayloadData]
  -[NEIKEv2ChildSAPayload parsePayloadData]


NEIKEv2KeyExchangePayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2KeyExchangePayload copyTypeDescription]

  // instance methods
  -[NEIKEv2KeyExchangePayload type]
  -[NEIKEv2KeyExchangePayload .cxx_destruct]
  -[NEIKEv2KeyExchangePayload descriptionWithIndent:options:]
  -[NEIKEv2KeyExchangePayload hasRequiredFields]
  -[NEIKEv2KeyExchangePayload generatePayloadData]
  -[NEIKEv2KeyExchangePayload parsePayloadData]


NEIKEv2IdentifierPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2IdentifierPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2IdentifierPayload .cxx_destruct]
  -[NEIKEv2IdentifierPayload descriptionWithIndent:options:]
  -[NEIKEv2IdentifierPayload hasRequiredFields]
  -[NEIKEv2IdentifierPayload generatePayloadData]
  -[NEIKEv2IdentifierPayload parsePayloadData]


NEIKEv2InitiatorIdentifierPayload : NEIKEv2IdentifierPayload
  // class methods
  +[NEIKEv2InitiatorIdentifierPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2InitiatorIdentifierPayload type]


NEIKEv2ResponderIdentifierPayload : NEIKEv2IdentifierPayload
  // class methods
  +[NEIKEv2ResponderIdentifierPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2ResponderIdentifierPayload type]


NEIKEv2NoncePayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2NoncePayload copyTypeDescription]

  // instance methods
  -[NEIKEv2NoncePayload type]
  -[NEIKEv2NoncePayload .cxx_destruct]
  -[NEIKEv2NoncePayload descriptionWithIndent:options:]
  -[NEIKEv2NoncePayload hasRequiredFields]
  -[NEIKEv2NoncePayload generatePayloadData]
  -[NEIKEv2NoncePayload parsePayloadData]


NEIKEv2VendorIDPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2VendorIDPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2VendorIDPayload type]
  -[NEIKEv2VendorIDPayload .cxx_destruct]
  -[NEIKEv2VendorIDPayload descriptionWithIndent:options:]
  -[NEIKEv2VendorIDPayload hasRequiredFields]
  -[NEIKEv2VendorIDPayload generatePayloadData]
  -[NEIKEv2VendorIDPayload parsePayloadData]


NEIKEv2CertificatePayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2CertificatePayload copyTypeDescription]

  // instance methods
  -[NEIKEv2CertificatePayload type]
  -[NEIKEv2CertificatePayload .cxx_destruct]
  -[NEIKEv2CertificatePayload descriptionWithIndent:options:]
  -[NEIKEv2CertificatePayload hasRequiredFields]
  -[NEIKEv2CertificatePayload generatePayloadData]
  -[NEIKEv2CertificatePayload parsePayloadData]


NEIKEv2CertificateRequestPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2CertificateRequestPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2CertificateRequestPayload type]
  -[NEIKEv2CertificateRequestPayload .cxx_destruct]
  -[NEIKEv2CertificateRequestPayload descriptionWithIndent:options:]
  -[NEIKEv2CertificateRequestPayload hasRequiredFields]
  -[NEIKEv2CertificateRequestPayload generatePayloadData]
  -[NEIKEv2CertificateRequestPayload parsePayloadData]


NEIKEv2AuthPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2AuthPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2AuthPayload type]
  -[NEIKEv2AuthPayload .cxx_destruct]
  -[NEIKEv2AuthPayload descriptionWithIndent:options:]
  -[NEIKEv2AuthPayload hasRequiredFields]
  -[NEIKEv2AuthPayload generatePayloadData]
  -[NEIKEv2AuthPayload parsePayloadData]


NEIKEv2EAPPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2EAPPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2EAPPayload type]
  -[NEIKEv2EAPPayload .cxx_destruct]
  -[NEIKEv2EAPPayload descriptionWithIndent:options:]
  -[NEIKEv2EAPPayload hasRequiredFields]
  -[NEIKEv2EAPPayload generatePayloadData]
  -[NEIKEv2EAPPayload parsePayloadData]


NEIKEv2DeletePayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2DeletePayload copyTypeDescription]

  // instance methods
  -[NEIKEv2DeletePayload type]
  -[NEIKEv2DeletePayload .cxx_destruct]
  -[NEIKEv2DeletePayload descriptionWithIndent:options:]
  -[NEIKEv2DeletePayload hasRequiredFields]
  -[NEIKEv2DeletePayload generatePayloadData]
  -[NEIKEv2DeletePayload parsePayloadData]


NEIKEv2NotifyPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2NotifyPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2NotifyPayload type]
  -[NEIKEv2NotifyPayload .cxx_destruct]
  -[NEIKEv2NotifyPayload descriptionWithIndent:options:]
  -[NEIKEv2NotifyPayload hasRequiredFields]
  -[NEIKEv2NotifyPayload generatePayloadData]
  -[NEIKEv2NotifyPayload parsePayloadData]


NEIKEv2TrafficSelectorPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2TrafficSelectorPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2TrafficSelectorPayload .cxx_destruct]
  -[NEIKEv2TrafficSelectorPayload descriptionWithIndent:options:]
  -[NEIKEv2TrafficSelectorPayload hasRequiredFields]
  -[NEIKEv2TrafficSelectorPayload generatePayloadData]
  -[NEIKEv2TrafficSelectorPayload parsePayloadData]


NEIKEv2InitiatorTrafficSelectorPayload : NEIKEv2TrafficSelectorPayload
  // class methods
  +[NEIKEv2InitiatorTrafficSelectorPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2InitiatorTrafficSelectorPayload type]


NEIKEv2ResponderTrafficSelectorPayload : NEIKEv2TrafficSelectorPayload
  // class methods
  +[NEIKEv2ResponderTrafficSelectorPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2ResponderTrafficSelectorPayload type]


NEIKEv2ConfigPayload : NEIKEv2Payload
  // class methods
  +[NEIKEv2ConfigPayload copyTypeDescription]

  // instance methods
  -[NEIKEv2ConfigPayload type]
  -[NEIKEv2ConfigPayload .cxx_destruct]
  -[NEIKEv2ConfigPayload descriptionWithIndent:options:]
  -[NEIKEv2ConfigPayload hasRequiredFields]
  -[NEIKEv2ConfigPayload generatePayloadData]
  -[NEIKEv2ConfigPayload parsePayloadData]


NEIKEv2ResponseConfigPayload : NEIKEv2ConfigPayload
  // instance methods
  -[NEIKEv2ResponseConfigPayload .cxx_destruct]
  -[NEIKEv2ResponseConfigPayload parsePayloadData]


NEIKEv2Packet : NSObject <NEPrettyDescription>
 @property  BOOL isFragmented
 @property  unsigned int fragmentNumber
 @property  unsigned int totalFragments

  // class methods
  +[NEIKEv2Packet copyTypeDescription]
  +[NEIKEv2Packet encryptPayloads]
  +[NEIKEv2Packet exchangeType]

  // instance methods
  -[NEIKEv2Packet .cxx_destruct]
  -[NEIKEv2Packet descriptionWithIndent:options:]
  -[NEIKEv2Packet copyShortDescription]
  -[NEIKEv2Packet gatherPayloads]
  -[NEIKEv2Packet filloutPayloads]
  -[NEIKEv2Packet isFragmented]
  -[NEIKEv2Packet fragmentNumber]
  -[NEIKEv2Packet totalFragments]


NEIKEv2IKESAInitPacket : NEIKEv2Packet
  // class methods
  +[NEIKEv2IKESAInitPacket copyTypeDescription]
  +[NEIKEv2IKESAInitPacket encryptPayloads]
  +[NEIKEv2IKESAInitPacket exchangeType]

  // instance methods
  -[NEIKEv2IKESAInitPacket .cxx_destruct]
  -[NEIKEv2IKESAInitPacket gatherPayloads]
  -[NEIKEv2IKESAInitPacket filloutPayloads]


NEIKEv2IKEAuthPacket : NEIKEv2Packet
  // class methods
  +[NEIKEv2IKEAuthPacket copyTypeDescription]
  +[NEIKEv2IKEAuthPacket exchangeType]

  // instance methods
  -[NEIKEv2IKEAuthPacket .cxx_destruct]
  -[NEIKEv2IKEAuthPacket gatherPayloads]
  -[NEIKEv2IKEAuthPacket filloutPayloads]


NEIKEv2CreateChildPacket : NEIKEv2Packet
  // class methods
  +[NEIKEv2CreateChildPacket copyTypeDescription]
  +[NEIKEv2CreateChildPacket exchangeType]

  // instance methods
  -[NEIKEv2CreateChildPacket .cxx_destruct]
  -[NEIKEv2CreateChildPacket gatherPayloads]
  -[NEIKEv2CreateChildPacket filloutPayloads]


NEIKEv2InformationalPacket : NEIKEv2Packet
  // class methods
  +[NEIKEv2InformationalPacket copyTypeDescription]
  +[NEIKEv2InformationalPacket exchangeType]

  // instance methods
  -[NEIKEv2InformationalPacket .cxx_destruct]
  -[NEIKEv2InformationalPacket gatherPayloads]
  -[NEIKEv2InformationalPacket filloutPayloads]


NEIKEv2PacketTunnelProvider : NEPacketTunnelProvider
  // instance methods
  -[NEIKEv2PacketTunnelProvider wake]
  -[NEIKEv2PacketTunnelProvider dealloc]
  -[NEIKEv2PacketTunnelProvider .cxx_destruct]
  -[NEIKEv2PacketTunnelProvider observeValueForKeyPath:ofObject:change:context:]
  -[NEIKEv2PacketTunnelProvider init]
  -[NEIKEv2PacketTunnelProvider setTunnelNetworkSettings:completionHandler:]
  -[NEIKEv2PacketTunnelProvider observerHelperHandler:ofObject:change:context:]
  -[NEIKEv2PacketTunnelProvider startTunnelWithOptions:completionHandler:]
  -[NEIKEv2PacketTunnelProvider stopTunnelWithReason:completionHandler:]


NEIKEv2Rekey : NSObject <NSObject>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2Rekey dealloc]
  -[NEIKEv2Rekey .cxx_destruct]


NEIKEv2AddressList : NSObject
  // instance methods
  -[NEIKEv2AddressList .cxx_destruct]


NEIKEv2Server : NSObject <NSObject>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2Server dealloc]
  -[NEIKEv2Server .cxx_destruct]


NEIKEv2MOBIKE : NSObject <NSObject>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2MOBIKE dealloc]
  -[NEIKEv2MOBIKE .cxx_destruct]


NEIKEv2Helper : NSObject

NELoopbackConnection : NSObject
  // instance methods
  -[NELoopbackConnection dealloc]
  -[NELoopbackConnection .cxx_destruct]


NEIKEv2Session : NSObject <NEIKEv2TransportDelegate, NEIPSecSASessionDelegate>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  unsigned long state
 @property  NEIKEv2ConfigurationMessage *assignedConfiguration
 @property  ^? clientCallback
 @property  ^v clientCallbackInfo
 @property  @? stateUpdateBlock
 @property  @? childStateUpdateBlock
 @property  @? configurationUpdateBlock
 @property  @? trafficSelectorUpdateBlock
 @property  @? additionalAddressesUpdateBlock
 @property  @? shortDPDEventBlock
 @property  @? redirectEventBlock
 @property  @? privateNotifyStatusEvent
 @property  BOOL peerAuthenticated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2Session updateConfiguration:]
  -[NEIKEv2Session setClientQueue:]
  -[NEIKEv2Session disconnect]
  -[NEIKEv2Session connect]
  -[NEIKEv2Session clientQueue]
  -[NEIKEv2Session reportError:]
  -[NEIKEv2Session state]
  -[NEIKEv2Session dealloc]
  -[NEIKEv2Session .cxx_destruct]
  -[NEIKEv2Session addChild:]
  -[NEIKEv2Session invalidate]
  -[NEIKEv2Session removeChild:]
  -[NEIKEv2Session receivePacket:]
  -[NEIKEv2Session expireSA:]
  -[NEIKEv2Session deleteSA:]
  -[NEIKEv2Session idleTimeoutSA:]
  -[NEIKEv2Session blackholeDetectedSA:]
  -[NEIKEv2Session initWithIKEConfig:firstChildConfig:sessionConfig:queue:ipsecInterface:ikeSocketHandler:saSession:packetDelegate:]
  -[NEIKEv2Session initWithIKEConfig:firstChildConfig:sessionConfig:queue:ipsecInterface:ikeSocketHandler:kernelSASessionName:packetDelegate:]
  -[NEIKEv2Session forceRekeyIKE]
  -[NEIKEv2Session forceRekeyChild:]
  -[NEIKEv2Session sendKeepaliveWithRetries:retryIntervalInMilliseconds:callbackQueue:callback:]
  -[NEIKEv2Session sendPrivateNotifies:maxRetries:retryIntervalInMilliseconds:callbackQueue:callback:]
  -[NEIKEv2Session sendMOBIKEWithRetries:retryInterval:interfaceName:invalidateTransport:resetEndpoint:callbackQueue:callback:]
  -[NEIKEv2Session peerAuthenticated]
  -[NEIKEv2Session invalidateWithCompletionHandler:completionHandler:]
  -[NEIKEv2Session checkSelectedIKEProposal:]
  -[NEIKEv2Session checkSelectedChildSAProposal:]
  -[NEIKEv2Session assignedConfiguration]
  -[NEIKEv2Session clientCallback]
  -[NEIKEv2Session setClientCallback:]
  -[NEIKEv2Session clientCallbackInfo]
  -[NEIKEv2Session setClientCallbackInfo:]
  -[NEIKEv2Session stateUpdateBlock]
  -[NEIKEv2Session setStateUpdateBlock:]
  -[NEIKEv2Session childStateUpdateBlock]
  -[NEIKEv2Session setChildStateUpdateBlock:]
  -[NEIKEv2Session configurationUpdateBlock]
  -[NEIKEv2Session setConfigurationUpdateBlock:]
  -[NEIKEv2Session trafficSelectorUpdateBlock]
  -[NEIKEv2Session setTrafficSelectorUpdateBlock:]
  -[NEIKEv2Session additionalAddressesUpdateBlock]
  -[NEIKEv2Session setAdditionalAddressesUpdateBlock:]
  -[NEIKEv2Session shortDPDEventBlock]
  -[NEIKEv2Session setShortDPDEventBlock:]
  -[NEIKEv2Session redirectEventBlock]
  -[NEIKEv2Session setRedirectEventBlock:]
  -[NEIKEv2Session privateNotifyStatusEvent]
  -[NEIKEv2Session setPrivateNotifyStatusEvent:]


NEIKEv2RequestContext : NSObject
  // instance methods
  -[NEIKEv2RequestContext dealloc]
  -[NEIKEv2RequestContext .cxx_destruct]
  -[NEIKEv2RequestContext initWithRequestType:]
  -[NEIKEv2RequestContext sendCallbackSuccess:session:]


NEIKEv2RekeyIKEContext : NEIKEv2RequestContext
  // instance methods


NEIKEv2RekeyChildContext : NEIKEv2RequestContext
  // instance methods


NEIKEv2InformationalContext : NEIKEv2RequestContext
  // instance methods
  -[NEIKEv2InformationalContext .cxx_destruct]
  -[NEIKEv2InformationalContext sendCallbackSuccess:session:]


NEIKEv2MOBIKEContext : NEIKEv2RequestContext
  // instance methods
  -[NEIKEv2MOBIKEContext .cxx_destruct]


NEIKEv2NewChildContext : NEIKEv2RequestContext
  // instance methods
  -[NEIKEv2NewChildContext .cxx_destruct]


NEIKEv2DeleteChildContext : NEIKEv2RequestContext
  // instance methods


NEIKEv2DeleteIKEContext : NEIKEv2RequestContext
  // instance methods
  -[NEIKEv2DeleteIKEContext .cxx_destruct]
  -[NEIKEv2DeleteIKEContext sendCallbackSuccess:session:]


NEIKEv2TransportClient : NSObject
  // instance methods
  -[NEIKEv2TransportClient .cxx_destruct]


NEIKEv2Transport : NSObject <NEIKEv2PacketReceiver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEIKEv2Transport dealloc]
  -[NEIKEv2Transport .cxx_destruct]
  -[NEIKEv2Transport init]
  -[NEIKEv2Transport receivePacketData:]


NEInternetNexus : NENexus
 @property  NWRemotePacketProxy *packetProxy
 @property  ^{NEVirtualInterface_s=} virtualInterface

  // instance methods
  -[NEInternetNexus dealloc]
  -[NEInternetNexus .cxx_destruct]
  -[NEInternetNexus initWithName:delegate:]
  -[NEInternetNexus initWithName:delegate:shouldCreateKernelChannel:]
  -[NEInternetNexus setDefaultInputHandler:]
  -[NEInternetNexus setRemotePacketProxy:]
  -[NEInternetNexus setUseFlowswitch:]
  -[NEInternetNexus packetProxy]
  -[NEInternetNexus setPacketProxy:]


NEIPC : NSObject
  // instance methods
  -[NEIPC .cxx_destruct]


NEAgentPacketTunnelExtension : NEAgentTunnelExtension
  // instance methods
  -[NEAgentPacketTunnelExtension setAppUUIDMap:]
  -[NEAgentPacketTunnelExtension extension:didSetTunnelConfiguration:completionHandler:]
  -[NEAgentPacketTunnelExtension handleExtensionStartedWithCompletionHandler:]


NEProcessInfo : NSObject
  // class methods
  +[NEProcessInfo copyDNSUUIDs]
  +[NEProcessInfo copyNEHelperUUIDs]
  +[NEProcessInfo clearUUIDCache]
  +[NEProcessInfo copyUUIDsForExecutable:]
  +[NEProcessInfo copyUUIDsForBundleID:uid:]
  +[NEProcessInfo is64bitCapable]

  // instance methods
  -[NEProcessInfo init]


NEIPsecNexus : NEInternetNexus
 @property  NSArray *nexusInstances

  // instance methods
  -[NEIPsecNexus .cxx_destruct]
  -[NEIPsecNexus initWithName:delegate:shouldCreateKernelChannel:]
  -[NEIPsecNexus setDefaultInputHandler:]
  -[NEIPsecNexus setRemotePacketProxy:]
  -[NEIPsecNexus initWithName:delegate:enableWithChannelCount:]
  -[NEIPsecNexus initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:]
  -[NEIPsecNexus initWithName:delegate:enableWithChannelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:execUUID:]
  -[NEIPsecNexus nexusInstances]
  -[NEIPsecNexus setNexusInstances:]


NEIPSecSA : NSObject <NEPrettyDescription, NSCopying>
 @property  unsigned int spi
 @property  int direction
 @property  int mode
 @property  int protocol
 @property  NWAddressEndpoint *localAddress
 @property  NWAddressEndpoint *remoteAddress
 @property  NSString *boundInterfaceName
 @property  NSString *tunnelInterfaceName
 @property  unsigned int replayWindowSize
 @property  unsigned long lifetimeSeconds
 @property  int encryptionAlgorithm
 @property  NSData *encryptionKey
 @property  int authenticationAlgorithm
 @property  NSData *authenticationKey
 @property  BOOL natTraversalEnabled
 @property  BOOL natDetectedOnPeer
 @property  BOOL natKeepaliveEnabled
 @property  BOOL natKeepaliveOffloadEnabled
 @property  unsigned long natKeepaliveIntervalSeconds
 @property  unsigned long natKeepaliveOffloadIntervalSeconds
 @property  unsigned short natTraversalPort
 @property  unsigned short natTraversalSrcPort
 @property  BOOL sequencePerTrafficClass

  // instance methods
  -[NEIPSecSA remoteAddress]
  -[NEIPSecSA dealloc]
  -[NEIPSecSA setProtocol:]
  -[NEIPSecSA mode]
  -[NEIPSecSA .cxx_destruct]
  -[NEIPSecSA encryptionKey]
  -[NEIPSecSA descriptionWithIndent:options:]
  -[NEIPSecSA setMode:]
  -[NEIPSecSA direction]
  -[NEIPSecSA copyWithZone:]
  -[NEIPSecSA invalidate]
  -[NEIPSecSA protocol]
  -[NEIPSecSA localAddress]
  -[NEIPSecSA setEncryptionKey:]
  -[NEIPSecSA setLocalAddress:]
  -[NEIPSecSA setRemoteAddress:]
  -[NEIPSecSA isEqual:]
  -[NEIPSecSA lifetimeSeconds]
  -[NEIPSecSA setLifetimeSeconds:]
  -[NEIPSecSA replayWindowSize]
  -[NEIPSecSA setReplayWindowSize:]
  -[NEIPSecSA sequencePerTrafficClass]
  -[NEIPSecSA setSequencePerTrafficClass:]
  -[NEIPSecSA initOutboundSAWithSPI:]
  -[NEIPSecSA initInboundSAWithSPI:]
  -[NEIPSecSA initInboundSA]
  -[NEIPSecSA spi]
  -[NEIPSecSA boundInterfaceName]
  -[NEIPSecSA setBoundInterfaceName:]
  -[NEIPSecSA tunnelInterfaceName]
  -[NEIPSecSA setTunnelInterfaceName:]
  -[NEIPSecSA encryptionAlgorithm]
  -[NEIPSecSA setEncryptionAlgorithm:]
  -[NEIPSecSA authenticationAlgorithm]
  -[NEIPSecSA setAuthenticationAlgorithm:]
  -[NEIPSecSA authenticationKey]
  -[NEIPSecSA setAuthenticationKey:]
  -[NEIPSecSA natTraversalEnabled]
  -[NEIPSecSA setNatTraversalEnabled:]
  -[NEIPSecSA natDetectedOnPeer]
  -[NEIPSecSA setNatDetectedOnPeer:]
  -[NEIPSecSA natKeepaliveEnabled]
  -[NEIPSecSA setNatKeepaliveEnabled:]
  -[NEIPSecSA natKeepaliveOffloadEnabled]
  -[NEIPSecSA setNatKeepaliveOffloadEnabled:]
  -[NEIPSecSA natKeepaliveIntervalSeconds]
  -[NEIPSecSA setNatKeepaliveIntervalSeconds:]
  -[NEIPSecSA natKeepaliveOffloadIntervalSeconds]
  -[NEIPSecSA setNatKeepaliveOffloadIntervalSeconds:]
  -[NEIPSecSA natTraversalPort]
  -[NEIPSecSA setNatTraversalPort:]
  -[NEIPSecSA natTraversalSrcPort]
  -[NEIPSecSA setNatTraversalSrcPort:]


NEIPSecSASession : NSObject
 @property  NSString *name
 @property  NSObject<NEIPSecSASessionDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSArray *securityAssociations

  // instance methods
  -[NEIPSecSASession setDelegate:]
  -[NEIPSecSASession delegate]
  -[NEIPSecSASession setDelegateQueue:]
  -[NEIPSecSASession dealloc]
  -[NEIPSecSASession .cxx_destruct]
  -[NEIPSecSASession delegateQueue]
  -[NEIPSecSASession invalidate]
  -[NEIPSecSASession name]
  -[NEIPSecSASession initWithName:delegate:]
  -[NEIPSecSASession copyEmptySASession]
  -[NEIPSecSASession removeAllSAs]
  -[NEIPSecSASession addLarvalSA:]
  -[NEIPSecSASession updateSA:]
  -[NEIPSecSASession addSA:]
  -[NEIPSecSASession removeSA:]
  -[NEIPSecSASession migrateSA:]
  -[NEIPSecSASession startIdleTimeout:incomingSA:outgoingSA:]
  -[NEIPSecSASession startBlackholeDetection:incomingSA:outgoingSA:]
  -[NEIPSecSASession securityAssociations]


NEIPSecSAKernelSession : NEIPSecSASession
  // instance methods
  -[NEIPSecSAKernelSession setDelegateQueue:]
  -[NEIPSecSAKernelSession dealloc]
  -[NEIPSecSAKernelSession invalidate]
  -[NEIPSecSAKernelSession initWithName:delegate:]
  -[NEIPSecSAKernelSession removeAllSAs]
  -[NEIPSecSAKernelSession addLarvalSA:]
  -[NEIPSecSAKernelSession updateSA:]
  -[NEIPSecSAKernelSession addSA:]
  -[NEIPSecSAKernelSession removeSA:]
  -[NEIPSecSAKernelSession migrateSA:]
  -[NEIPSecSAKernelSession startIdleTimeout:incomingSA:outgoingSA:]
  -[NEIPSecSAKernelSession startBlackholeDetection:incomingSA:outgoingSA:]
  -[NEIPSecSAKernelSession initWithName:delegate:pfkeySocket:]


NEIPSecSALocalSession : NEIPSecSASession
  // instance methods
  -[NEIPSecSALocalSession initWithName:delegate:]
  -[NEIPSecSALocalSession addLarvalSA:]


NEIPv4Route : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  NSString *destinationAddress
 @property  NSString *destinationSubnetMask
 @property  NSString *gatewayAddress

  // class methods
  +[NEIPv4Route supportsSecureCoding]
  +[NEIPv4Route defaultRoute]

  // instance methods
  -[NEIPv4Route copyLegacyDictionary]
  -[NEIPv4Route initFromLegacyDictionary:]
  -[NEIPv4Route checkValidityAndCollectErrors:]
  -[NEIPv4Route encodeWithCoder:]
  -[NEIPv4Route isDefaultRoute]
  -[NEIPv4Route .cxx_destruct]
  -[NEIPv4Route setGatewayAddress:]
  -[NEIPv4Route destinationAddress]
  -[NEIPv4Route descriptionWithIndent:options:]
  -[NEIPv4Route copyWithZone:]
  -[NEIPv4Route gatewayAddress]
  -[NEIPv4Route initWithCoder:]
  -[NEIPv4Route initWithDestinationAddress:subnetMask:]
  -[NEIPv4Route destinationSubnetMask]


NEIPv4Settings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  BOOL overridePrimary
 @property  long long configMethod
 @property  NSArray *addresses
 @property  NSArray *subnetMasks
 @property  NSString *router
 @property  NSArray *includedRoutes
 @property  NSArray *excludedRoutes

  // class methods
  +[NEIPv4Settings supportsSecureCoding]
  +[NEIPv4Settings settingsWithAutomaticAddressing]

  // instance methods
  -[NEIPv4Settings copyLegacyDictionary]
  -[NEIPv4Settings initFromLegacyDictionary:]
  -[NEIPv4Settings checkValidityAndCollectErrors:]
  -[NEIPv4Settings encodeWithCoder:]
  -[NEIPv4Settings .cxx_destruct]
  -[NEIPv4Settings descriptionWithIndent:options:]
  -[NEIPv4Settings copyWithZone:]
  -[NEIPv4Settings init]
  -[NEIPv4Settings initWithCoder:]
  -[NEIPv4Settings addresses]
  -[NEIPv4Settings initWithAddresses:subnetMasks:]
  -[NEIPv4Settings initWithConfigMethod:]
  -[NEIPv4Settings hasDefaultRoute]
  -[NEIPv4Settings subnetMasks]
  -[NEIPv4Settings router]
  -[NEIPv4Settings setRouter:]
  -[NEIPv4Settings includedRoutes]
  -[NEIPv4Settings setIncludedRoutes:]
  -[NEIPv4Settings excludedRoutes]
  -[NEIPv4Settings setExcludedRoutes:]
  -[NEIPv4Settings overridePrimary]
  -[NEIPv4Settings setOverridePrimary:]
  -[NEIPv4Settings configMethod]
  -[NEIPv4Settings setConfigMethod:]


NEIPv6Route : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  NSString *destinationAddress
 @property  NSNumber *destinationNetworkPrefixLength
 @property  NSString *gatewayAddress

  // class methods
  +[NEIPv6Route supportsSecureCoding]
  +[NEIPv6Route defaultRoute]

  // instance methods
  -[NEIPv6Route copyLegacyDictionary]
  -[NEIPv6Route initFromLegacyDictionary:]
  -[NEIPv6Route checkValidityAndCollectErrors:]
  -[NEIPv6Route encodeWithCoder:]
  -[NEIPv6Route isDefaultRoute]
  -[NEIPv6Route .cxx_destruct]
  -[NEIPv6Route setGatewayAddress:]
  -[NEIPv6Route destinationAddress]
  -[NEIPv6Route descriptionWithIndent:options:]
  -[NEIPv6Route copyWithZone:]
  -[NEIPv6Route gatewayAddress]
  -[NEIPv6Route initWithCoder:]
  -[NEIPv6Route initWithDestinationAddress:networkPrefixLength:]
  -[NEIPv6Route destinationNetworkPrefixLength]


NEIPv6Settings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  long long configMethod
 @property  NSString *router
 @property  NSArray *addresses
 @property  NSArray *networkPrefixLengths
 @property  NSArray *includedRoutes
 @property  NSArray *excludedRoutes

  // class methods
  +[NEIPv6Settings supportsSecureCoding]
  +[NEIPv6Settings settingsWithAutomaticAddressing]
  +[NEIPv6Settings settingsWithLinkLocalAddressing]

  // instance methods
  -[NEIPv6Settings copyLegacyDictionary]
  -[NEIPv6Settings initFromLegacyDictionary:]
  -[NEIPv6Settings checkValidityAndCollectErrors:]
  -[NEIPv6Settings encodeWithCoder:]
  -[NEIPv6Settings .cxx_destruct]
  -[NEIPv6Settings descriptionWithIndent:options:]
  -[NEIPv6Settings copyWithZone:]
  -[NEIPv6Settings init]
  -[NEIPv6Settings initWithCoder:]
  -[NEIPv6Settings addresses]
  -[NEIPv6Settings initWithConfigMethod:]
  -[NEIPv6Settings hasDefaultRoute]
  -[NEIPv6Settings router]
  -[NEIPv6Settings setRouter:]
  -[NEIPv6Settings includedRoutes]
  -[NEIPv6Settings setIncludedRoutes:]
  -[NEIPv6Settings excludedRoutes]
  -[NEIPv6Settings setExcludedRoutes:]
  -[NEIPv6Settings configMethod]
  -[NEIPv6Settings setConfigMethod:]
  -[NEIPv6Settings initWithAddresses:networkPrefixLengths:]
  -[NEIPv6Settings networkPrefixLengths]


NEKeychainItem : NSObject <NEPrettyDescription, NSCopying, NSSecureCoding>
 @property  long long domain
 @property  NSString *identifier
 @property  NSString *password
 @property  NSData *persistentReference
 @property  NSString *accessGroup

  // class methods
  +[NEKeychainItem supportsSecureCoding]

  // instance methods
  -[NEKeychainItem domain]
  -[NEKeychainItem identifier]
  -[NEKeychainItem remove]
  -[NEKeychainItem encodeWithCoder:]
  -[NEKeychainItem setAccessGroup:]
  -[NEKeychainItem .cxx_destruct]
  -[NEKeychainItem descriptionWithIndent:options:]
  -[NEKeychainItem setIdentifier:]
  -[NEKeychainItem password]
  -[NEKeychainItem copyWithZone:]
  -[NEKeychainItem setPassword:]
  -[NEKeychainItem setDomain:]
  -[NEKeychainItem accessGroup]
  -[NEKeychainItem initWithCoder:]
  -[NEKeychainItem initWithPassword:domain:]
  -[NEKeychainItem initWithIdentifier:domain:]
  -[NEKeychainItem initWithPersistentReference:domain:]
  -[NEKeychainItem initWithLegacyIdentifier:domain:]
  -[NEKeychainItem initWithPassword:domain:accessGroup:]
  -[NEKeychainItem initWithIdentifier:domain:accessGroup:]
  -[NEKeychainItem initWithPersistentReference:domain:accessGroup:]
  -[NEKeychainItem initWithLegacyIdentifier:domain:accessGroup:]
  -[NEKeychainItem persistentReference]
  -[NEKeychainItem setPersistentReference:]
  -[NEKeychainItem copyQueryWithReturnTypes:]
  -[NEKeychainItem copyPassword]
  -[NEKeychainItem syncUsingConfiguration:accountName:passwordType:identifierSuffix:]
  -[NEKeychainItem migrateFromPreferences:]


NEIdentityKeychainItem : NEKeychainItem
  // class methods
  +[NEIdentityKeychainItem copyIdentities:fromDomain:]
  +[NEIdentityKeychainItem importPKCS12Data:passphrase:]

  // instance methods
  -[NEIdentityKeychainItem sync]
  -[NEIdentityKeychainItem copyWithZone:]
  -[NEIdentityKeychainItem initWithPassword:domain:accessGroup:]
  -[NEIdentityKeychainItem copyQueryWithReturnTypes:]
  -[NEIdentityKeychainItem copyPassword]
  -[NEIdentityKeychainItem syncUsingConfiguration:accountName:passwordType:identifierSuffix:]


NEAgentExtension : NSObject <NEAgentSessionDelegate, NEExtensionProviderHostDelegate, NEPluginDriver>
 @property  <NEPluginManagerObjectFactory> *managerObjectFactory
 @property  NEExtensionProviderHostContext *sessionContext
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *pluginType
 @property  NSString *extensionIdentifier
 @property  NSXPCInterface *managerProtocol
 @property  NSXPCInterface *driverProtocol
 @property  BOOL appsUpdateStarted
 @property  BOOL appsUpdateEnding
 @property  NSObject<OS_dispatch_source> *sendFailedTimer
 @property  NSArray *uuids
 @property  NSXPCInterface *driverInterface
 @property  NSXPCInterface *managerInterface
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEAgentExtension updateConfiguration:]
  -[NEAgentExtension sleepWithCompletionHandler:]
  -[NEAgentExtension managerInterface]
  -[NEAgentExtension pluginType]
  -[NEAgentExtension dealloc]
  -[NEAgentExtension .cxx_destruct]
  -[NEAgentExtension setQueue:]
  -[NEAgentExtension uuids]
  -[NEAgentExtension queue]
  -[NEAgentExtension extensionIdentifier]
  -[NEAgentExtension wakeup]
  -[NEAgentExtension startWithConfiguration:completionHandler:]
  -[NEAgentExtension driverInterface]
  -[NEAgentExtension extension:didFailWithError:]
  -[NEAgentExtension extension:didStartWithError:]
  -[NEAgentExtension extensionDidStop:]
  -[NEAgentExtension handleCancel]
  -[NEAgentExtension handleAppsUninstalled:]
  -[NEAgentExtension handleAppsUpdateBegins:]
  -[NEAgentExtension handleAppsUpdateEnding:]
  -[NEAgentExtension handleAppsUpdateEnds:]
  -[NEAgentExtension handleExtensionStartedWithCompletionHandler:]
  -[NEAgentExtension sendExtensionFailed]
  -[NEAgentExtension initWithPluginType:pluginClass:pluginInfo:queue:factory:]
  -[NEAgentExtension handleInitWithCompletionHandler:]
  -[NEAgentExtension handleDisposeWithCompletionHandler:]
  -[NEAgentExtension initWithPluginType:pluginClass:pluginEndpoint:pluginProcessIdentity:queue:factory:]
  -[NEAgentExtension managerObjectFactory]
  -[NEAgentExtension sessionContext]
  -[NEAgentExtension setSessionContext:]
  -[NEAgentExtension managerProtocol]
  -[NEAgentExtension driverProtocol]
  -[NEAgentExtension appsUpdateStarted]
  -[NEAgentExtension setAppsUpdateStarted:]
  -[NEAgentExtension appsUpdateEnding]
  -[NEAgentExtension setAppsUpdateEnding:]
  -[NEAgentExtension sendFailedTimer]
  -[NEAgentExtension setSendFailedTimer:]


NEBundleProxy : NSObject <NSSecureCoding>
 @property  NSString *identifier
 @property  NSURL *url
 @property  NSArray *machOUUIDs
 @property  NSString *name
 @property  BOOL isWatchKitApp

  // class methods
  +[NEBundleProxy supportsSecureCoding]

  // instance methods
  -[NEBundleProxy initWithIdentifier:url:machOUUIDs:name:]
  -[NEBundleProxy identifier]
  -[NEBundleProxy encodeWithCoder:]
  -[NEBundleProxy .cxx_destruct]
  -[NEBundleProxy isWatchKitApp]
  -[NEBundleProxy name]
  -[NEBundleProxy url]
  -[NEBundleProxy machOUUIDs]
  -[NEBundleProxy setIsWatchKitApp:]
  -[NEBundleProxy initWithCoder:]


NELaunchServices : NSObject
  // class methods
  +[NELaunchServices bundleProxyForIdentifier:uid:plugins:]
  +[NELaunchServices pluginProxyWithIdentifier:type:pluginClass:extensionPoint:]
  +[NELaunchServices pluginClassToExtensionPoint:]
  +[NELaunchServices lookupIdentifier:plugins:]


NENetworkAgent : NSObject <NWNetworkAgent>
 @property  NSUUID *configurationUUID
 @property  NSString *configurationName
 @property  int sessionType
 @property  int lastStatus
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NENetworkAgent agentType]
  +[NENetworkAgent agentDomain]
  +[NENetworkAgent agentFromData:]

  // instance methods
  -[NENetworkAgent configurationName]
  -[NENetworkAgent sessionType]
  -[NENetworkAgent agentUUID]
  -[NENetworkAgent isVoluntary]
  -[NENetworkAgent isUserActivated]
  -[NENetworkAgent isKernelActivated]
  -[NENetworkAgent setAgentDescription:]
  -[NENetworkAgent setAgentUUID:]
  -[NENetworkAgent isActive]
  -[NENetworkAgent .cxx_destruct]
  -[NENetworkAgent setVoluntary:]
  -[NENetworkAgent setActive:]
  -[NENetworkAgent setKernelActivated:]
  -[NENetworkAgent copyAgentData]
  -[NENetworkAgent setConfigurationName:]
  -[NENetworkAgent setUserActivated:]
  -[NENetworkAgent agentDescription]
  -[NENetworkAgent startAgentWithOptions:]
  -[NENetworkAgent setStartHandler:]
  -[NENetworkAgent initWithConfigUUID:sessionType:name:]
  -[NENetworkAgent matchesFileHandle:]
  -[NENetworkAgent configurationUUID]
  -[NENetworkAgent lastStatus]
  -[NENetworkAgent setLastStatus:]


NEVPNNetworkAgent : NENetworkAgent
  // class methods
  +[NEVPNNetworkAgent agentType]


NEAppVPNNetworkAgent : NENetworkAgent
  // class methods
  +[NEAppVPNNetworkAgent agentType]


NEAOVPNNetworkAgent : NENetworkAgent
  // class methods
  +[NEAOVPNNetworkAgent agentType]


NEContentFilterNetworkAgent : NENetworkAgent
  // class methods
  +[NEContentFilterNetworkAgent agentType]


NEPathControllerNetworkAgent : NENetworkAgent
 @property  NSMutableArray *predictedInterfaceArray
 @property  NSMutableArray *advisoryInterfaceArray
 @property  NSString *advisoryAgentDomain
 @property  NSString *advisoryAgentType
 @property  BOOL weakAdvisory
 @property  BOOL noAdvisoryTimer
 @property  BOOL preferAdvisory
 @property  BOOL isForcedAdvisory

  // class methods
  +[NEPathControllerNetworkAgent agentType]
  +[NEPathControllerNetworkAgent agentFromData:]

  // instance methods
  -[NEPathControllerNetworkAgent setAdvisoryAgentType:]
  -[NEPathControllerNetworkAgent updateClientsImmediately]
  -[NEPathControllerNetworkAgent setAdvisoryAgentDomain:]
  -[NEPathControllerNetworkAgent advisoryAgentType]
  -[NEPathControllerNetworkAgent setAdvisoryInterfaceArray:]
  -[NEPathControllerNetworkAgent setUpdateClientsImmediately:]
  -[NEPathControllerNetworkAgent setNoAdvisoryTimer:]
  -[NEPathControllerNetworkAgent isForcedAdvisory]
  -[NEPathControllerNetworkAgent unassertAgentWithOptions:]
  -[NEPathControllerNetworkAgent .cxx_destruct]
  -[NEPathControllerNetworkAgent setUnassertHandler:]
  -[NEPathControllerNetworkAgent initWithAdvisoryInterface:advisoryMode:]
  -[NEPathControllerNetworkAgent setWeakAdvisory:]
  -[NEPathControllerNetworkAgent setIsForcedAdvisory:]
  -[NEPathControllerNetworkAgent setPredictedInterfaceArray:]
  -[NEPathControllerNetworkAgent predictedInterfaceArray]
  -[NEPathControllerNetworkAgent noAdvisoryTimer]
  -[NEPathControllerNetworkAgent advisoryAgentDomain]
  -[NEPathControllerNetworkAgent copyAgentData]
  -[NEPathControllerNetworkAgent advisoryInterfaceArray]
  -[NEPathControllerNetworkAgent assertAgentWithOptions:]
  -[NEPathControllerNetworkAgent weakAdvisory]
  -[NEPathControllerNetworkAgent initWithAdvisoryAgentDomain:agentType:advisoryMode:]
  -[NEPathControllerNetworkAgent preferAdvisory]
  -[NEPathControllerNetworkAgent setPreferAdvisory:]
  -[NEPathControllerNetworkAgent setAssertHandler:]


NEDNSSettingsNetworkAgent : NENetworkAgent
 @property  NEDNSSettings *settings

  // class methods
  +[NEDNSSettingsNetworkAgent agentType]
  +[NEDNSSettingsNetworkAgent agentDomain]
  +[NEDNSSettingsNetworkAgent agentFromData:]

  // instance methods
  -[NEDNSSettingsNetworkAgent .cxx_destruct]
  -[NEDNSSettingsNetworkAgent settings]
  -[NEDNSSettingsNetworkAgent setSettings:]
  -[NEDNSSettingsNetworkAgent copyAgentData]
  -[NEDNSSettingsNetworkAgent agentDescription]


NEProxyConfigurationNetworkAgent : NENetworkAgent
  // class methods
  +[NEProxyConfigurationNetworkAgent agentType]
  +[NEProxyConfigurationNetworkAgent agentDomain]
  +[NEProxyConfigurationNetworkAgent agentFromData:]

  // instance methods
  -[NEProxyConfigurationNetworkAgent .cxx_destruct]
  -[NEProxyConfigurationNetworkAgent copyAgentData]
  -[NEProxyConfigurationNetworkAgent agentDescription]
  -[NEProxyConfigurationNetworkAgent initWithProxyConfiguration:]


NEVPNConnectivitySession : NSObject
  // instance methods
  -[NEVPNConnectivitySession .cxx_destruct]


NEVPNConnectivityManager : NSObject <NEVPNConnectivitySessionDelegate>
 @property  unsigned long visibilityStyle
 @property  unsigned long connectivityState
 @property  <NEVPNConnectivityManagerDelegate> *delegate

  // instance methods
  -[NEVPNConnectivityManager setVisibilityStyle:]
  -[NEVPNConnectivityManager setDelegate:]
  -[NEVPNConnectivityManager delegate]
  -[NEVPNConnectivityManager visibilityStyle]
  -[NEVPNConnectivityManager sessionStatusDidChange:]
  -[NEVPNConnectivityManager dealloc]
  -[NEVPNConnectivityManager setConnectivityState:]
  -[NEVPNConnectivityManager .cxx_destruct]
  -[NEVPNConnectivityManager initWithDelegate:]
  -[NEVPNConnectivityManager toggleVPNConnectivity:]
  -[NEVPNConnectivityManager connectivityState]


NEDNSSettingsManager : NSObject <NEPrettyDescription>
 @property  NSUUID *identifier
 @property  <NEDNSSettingsManagerDelegate> *delegate
 @property  NSString *appBundleIdentifier
 @property  BOOL fromProfile
 @property  BOOL enabled
 @property  NSString *localizedDescription
 @property  NEDNSSettings *dnsSettings
 @property  NSArray *onDemandRules

  // class methods
  +[NEDNSSettingsManager sharedManager]
  +[NEDNSSettingsManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEDNSSettingsManager appBundleIdentifier]
  -[NEDNSSettingsManager localizedDescription]
  -[NEDNSSettingsManager identifier]
  -[NEDNSSettingsManager setDelegate:]
  -[NEDNSSettingsManager delegate]
  -[NEDNSSettingsManager .cxx_destruct]
  -[NEDNSSettingsManager setEnabled:]
  -[NEDNSSettingsManager setLocalizedDescription:]
  -[NEDNSSettingsManager descriptionWithIndent:options:]
  -[NEDNSSettingsManager setDnsSettings:]
  -[NEDNSSettingsManager dnsSettings]
  -[NEDNSSettingsManager init]
  -[NEDNSSettingsManager isEnabled]
  -[NEDNSSettingsManager loadFromPreferencesWithCompletionHandler:]
  -[NEDNSSettingsManager removeFromPreferencesWithCompletionHandler:]
  -[NEDNSSettingsManager saveToPreferencesWithCompletionHandler:]
  -[NEDNSSettingsManager isFromProfile]
  -[NEDNSSettingsManager fetchStatusWithCompletionHandler:]
  -[NEDNSSettingsManager onDemandRules]
  -[NEDNSSettingsManager setOnDemandRules:]


NENexusAgent : NSObject <NWNetworkAgent>
 @property  NSString *agentDescription
 @property  NSUUID *agentUUID
 @property  BOOL active
 @property  BOOL kernelActivated
 @property  BOOL userActivated
 @property  BOOL voluntary
 @property  BOOL specificUseOnly
 @property  BOOL networkProvider
 @property  BOOL nexusProvider
 @property  BOOL supportsListenRequests
 @property  BOOL supportsBrowseRequests
 @property  BOOL supportsResolveRequests
 @property  BOOL requiresAssert
 @property  BOOL updateClientsImmediately

  // class methods
  +[NENexusAgent agentType]
  +[NENexusAgent agentDomain]
  +[NENexusAgent agentFromData:]

  // instance methods
  -[NENexusAgent agentUUID]
  -[NENexusAgent isVoluntary]
  -[NENexusAgent isUserActivated]
  -[NENexusAgent isKernelActivated]
  -[NENexusAgent setAgentDescription:]
  -[NENexusAgent setAgentUUID:]
  -[NENexusAgent isActive]
  -[NENexusAgent unassertAgentWithOptions:]
  -[NENexusAgent .cxx_destruct]
  -[NENexusAgent setVoluntary:]
  -[NENexusAgent setActive:]
  -[NENexusAgent setKernelActivated:]
  -[NENexusAgent copyAgentData]
  -[NENexusAgent assertAgentWithOptions:]
  -[NENexusAgent setUserActivated:]
  -[NENexusAgent agentDescription]
  -[NENexusAgent setNetworkProvider:]
  -[NENexusAgent setNexusProvider:]
  -[NENexusAgent requestNexusWithOptions:]
  -[NENexusAgent closeNexusWithOptions:]
  -[NENexusAgent startAgentWithOptions:]
  -[NENexusAgent isSpecificUseOnly]
  -[NENexusAgent isNetworkProvider]
  -[NENexusAgent isNexusProvider]
  -[NENexusAgent supportsBrowseRequests]
  -[NENexusAgent setSpecificUseOnly:]
  -[NENexusAgent setSupportsBrowseRequests:]


NENexusFlowManager : NSObject
  // instance methods
  -[NENexusFlowManager dealloc]
  -[NENexusFlowManager .cxx_destruct]


NENexusFlowAssignedProperties : NSObject
 @property  NWEndpoint *localEndpoint

  // instance methods
  -[NENexusFlowAssignedProperties .cxx_destruct]
  -[NENexusFlowAssignedProperties localEndpoint]
  -[NENexusFlowAssignedProperties setLocalEndpoint:]


NENexusBrowse : NSObject
 @property  NWBrowseDescriptor *descriptor
 @property  NWParameters *parameters
 @property  NSUUID *clientIdentifier

  // instance methods
  -[NENexusBrowse setDescriptor:]
  -[NENexusBrowse setClientIdentifier:]
  -[NENexusBrowse parameters]
  -[NENexusBrowse descriptor]
  -[NENexusBrowse clientIdentifier]
  -[NENexusBrowse .cxx_destruct]
  -[NENexusBrowse setParameters:]


NENexusFlow : NSObject
 @property  ^{nw_protocol=[16C]^{nw_protocol_identifier}^{nw_protocol_callbacks}^{nw_protocol}^v^{nw_protocol}^v} protocol
 @property  unsigned long state
 @property  NWEndpoint *endpoint
 @property  NWParameters *parameters
 @property  NSUUID *clientIdentifier

  // instance methods
  -[NENexusFlow parameters]
  -[NENexusFlow clientIdentifier]
  -[NENexusFlow endpoint]
  -[NENexusFlow state]
  -[NENexusFlow dealloc]
  -[NENexusFlow setProtocol:]
  -[NENexusFlow .cxx_destruct]
  -[NENexusFlow protocol]
  -[NENexusFlow setState:]


NENexusPathFlow : NENexusFlow
  // instance methods
  -[NENexusPathFlow parameters]
  -[NENexusPathFlow clientIdentifier]
  -[NENexusPathFlow endpoint]
  -[NENexusPathFlow .cxx_destruct]


NENexus : NSObject <NENexusAgentDelegate>
 @property  BOOL asserted
 @property  ^{NEVirtualInterface_s=} virtualInterface
 @property  unsigned long level
 @property  NSString *name
 @property  NSString *interfaceName
 @property  unsigned long availability
 @property  NSArray *localAddresses
 @property  NSArray *dnsServerAddresses
 @property  unsigned long maximumTransmissionUnit
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NENexus interfaceName]
  -[NENexus dealloc]
  -[NENexus setAsserted:]
  -[NENexus .cxx_destruct]
  -[NENexus availability]
  -[NENexus setAvailability:]
  -[NENexus name]
  -[NENexus level]
  -[NENexus cancel]
  -[NENexus dnsServerAddresses]
  -[NENexus initWithName:delegate:]
  -[NENexus initWithLevel:name:virtualInterfaceType:delegate:channelCount:]
  -[NENexus handleAssertFromClient:]
  -[NENexus handleUnassertFromClient:]
  -[NENexus virtualInterface]
  -[NENexus initWithLevel:name:virtualInterfaceType:delegate:channelCount:netifRingSize:kernelPipeTxRingSize:kernelPipeRxRingSize:execUUID:]
  -[NENexus handleRequestNexusFromClient:]
  -[NENexus closeFlowWithClientIdentifier:]
  -[NENexus handleStartFromClient:]
  -[NENexus setLocalAddresses:]
  -[NENexus setDnsServerAddresses:]
  -[NENexus setMaximumTransmissionUnit:]
  -[NENexus isAsserted]
  -[NENexus localAddresses]
  -[NENexus maximumTransmissionUnit]
  -[NENexus setVirtualInterface:]


NEOnDemandRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  long long action
 @property  NSArray *DNSSearchDomainMatch
 @property  NSArray *DNSServerAddressMatch
 @property  long long interfaceTypeMatch
 @property  NSArray *SSIDMatch
 @property  NSURL *probeURL

  // class methods
  +[NEOnDemandRule supportsSecureCoding]

  // instance methods
  -[NEOnDemandRule copyLegacyDictionary]
  -[NEOnDemandRule initFromLegacyDictionary:]
  -[NEOnDemandRule checkValidityAndCollectErrors:]
  -[NEOnDemandRule initWithAction:]
  -[NEOnDemandRule setProbeURL:]
  -[NEOnDemandRule encodeWithCoder:]
  -[NEOnDemandRule probeURL]
  -[NEOnDemandRule .cxx_destruct]
  -[NEOnDemandRule descriptionWithIndent:options:]
  -[NEOnDemandRule action]
  -[NEOnDemandRule copyWithZone:]
  -[NEOnDemandRule isEqual:]
  -[NEOnDemandRule initWithCoder:]
  -[NEOnDemandRule DNSSearchDomainMatch]
  -[NEOnDemandRule setDNSSearchDomainMatch:]
  -[NEOnDemandRule DNSServerAddressMatch]
  -[NEOnDemandRule setDNSServerAddressMatch:]
  -[NEOnDemandRule interfaceTypeMatch]
  -[NEOnDemandRule setInterfaceTypeMatch:]
  -[NEOnDemandRule SSIDMatch]
  -[NEOnDemandRule setSSIDMatch:]


NEOnDemandRuleConnect : NEOnDemandRule
  // instance methods
  -[NEOnDemandRuleConnect copyWithZone:]
  -[NEOnDemandRuleConnect init]


NEOnDemandRuleDisconnect : NEOnDemandRule
  // instance methods
  -[NEOnDemandRuleDisconnect copyWithZone:]
  -[NEOnDemandRuleDisconnect init]


NEOnDemandRuleIgnore : NEOnDemandRule
  // instance methods
  -[NEOnDemandRuleIgnore copyWithZone:]
  -[NEOnDemandRuleIgnore init]


NEOnDemandRuleEvaluateConnection : NEOnDemandRule
 @property  NSArray *connectionRules

  // class methods
  +[NEOnDemandRuleEvaluateConnection supportsSecureCoding]

  // instance methods
  -[NEOnDemandRuleEvaluateConnection copyLegacyDictionary]
  -[NEOnDemandRuleEvaluateConnection initFromLegacyDictionary:]
  -[NEOnDemandRuleEvaluateConnection checkValidityAndCollectErrors:]
  -[NEOnDemandRuleEvaluateConnection encodeWithCoder:]
  -[NEOnDemandRuleEvaluateConnection .cxx_destruct]
  -[NEOnDemandRuleEvaluateConnection descriptionWithIndent:options:]
  -[NEOnDemandRuleEvaluateConnection copyWithZone:]
  -[NEOnDemandRuleEvaluateConnection isEqual:]
  -[NEOnDemandRuleEvaluateConnection init]
  -[NEOnDemandRuleEvaluateConnection initWithCoder:]
  -[NEOnDemandRuleEvaluateConnection connectionRules]
  -[NEOnDemandRuleEvaluateConnection setConnectionRules:]


NEEvaluateConnectionRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  long long action
 @property  NSArray *matchDomains
 @property  NSArray *useDNSServers
 @property  NSURL *probeURL

  // class methods
  +[NEEvaluateConnectionRule supportsSecureCoding]

  // instance methods
  -[NEEvaluateConnectionRule matchDomains]
  -[NEEvaluateConnectionRule copyLegacyDictionary]
  -[NEEvaluateConnectionRule initFromLegacyDictionary:]
  -[NEEvaluateConnectionRule checkValidityAndCollectErrors:]
  -[NEEvaluateConnectionRule setProbeURL:]
  -[NEEvaluateConnectionRule encodeWithCoder:]
  -[NEEvaluateConnectionRule probeURL]
  -[NEEvaluateConnectionRule .cxx_destruct]
  -[NEEvaluateConnectionRule descriptionWithIndent:options:]
  -[NEEvaluateConnectionRule action]
  -[NEEvaluateConnectionRule copyWithZone:]
  -[NEEvaluateConnectionRule isEqual:]
  -[NEEvaluateConnectionRule initWithCoder:]
  -[NEEvaluateConnectionRule initWithMatchDomains:andAction:]
  -[NEEvaluateConnectionRule useDNSServers]
  -[NEEvaluateConnectionRule setUseDNSServers:]


NEPacket : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *data
 @property  unsigned char protocolFamily
 @property  long long direction
 @property  NEFlowMetaData *metadata

  // class methods
  +[NEPacket supportsSecureCoding]

  // instance methods
  -[NEPacket encodeWithCoder:]
  -[NEPacket dealloc]
  -[NEPacket .cxx_destruct]
  -[NEPacket direction]
  -[NEPacket copyWithZone:]
  -[NEPacket metadata]
  -[NEPacket data]
  -[NEPacket initWithCoder:]
  -[NEPacket initWithData:protocolFamily:]
  -[NEPacket protocolFamily]


NEPacketTunnelFlow : NSObject
 @property  NSFileHandle *socket

  // instance methods
  -[NEPacketTunnelFlow dealloc]
  -[NEPacketTunnelFlow socket]
  -[NEPacketTunnelFlow .cxx_destruct]
  -[NEPacketTunnelFlow setSocket:]
  -[NEPacketTunnelFlow readPacketsWithCompletionHandler:]
  -[NEPacketTunnelFlow readPacketObjectsWithCompletionHandler:]
  -[NEPacketTunnelFlow writePackets:withProtocols:]
  -[NEPacketTunnelFlow writePacketObjects:]


NEAppPushProvider : NEProvider
 @property  NSDictionary *providerConfiguration

  // instance methods
  -[NEAppPushProvider .cxx_destruct]
  -[NEAppPushProvider start]
  -[NEAppPushProvider startWithCompletionHandler:]
  -[NEAppPushProvider init]
  -[NEAppPushProvider providerConfiguration]
  -[NEAppPushProvider setProviderConfiguration:]
  -[NEAppPushProvider stopWithReason:completionHandler:]
  -[NEAppPushProvider reportIncomingCallWithUserInfo:]
  -[NEAppPushProvider handleTimerEvent]


NEPacketTunnelNetworkSettings : NETunnelNetworkSettings
 @property  NEIPv4Settings *IPv4Settings
 @property  NEIPv6Settings *IPv6Settings
 @property  NSNumber *tunnelOverheadBytes
 @property  NSNumber *MTU

  // class methods
  +[NEPacketTunnelNetworkSettings supportsSecureCoding]

  // instance methods
  -[NEPacketTunnelNetworkSettings initFromLegacyDictionary:]
  -[NEPacketTunnelNetworkSettings checkValidityAndCollectErrors:]
  -[NEPacketTunnelNetworkSettings encodeWithCoder:]
  -[NEPacketTunnelNetworkSettings .cxx_destruct]
  -[NEPacketTunnelNetworkSettings descriptionWithIndent:options:]
  -[NEPacketTunnelNetworkSettings copyWithZone:]
  -[NEPacketTunnelNetworkSettings initWithCoder:]
  -[NEPacketTunnelNetworkSettings setMTU:]
  -[NEPacketTunnelNetworkSettings IPv4Settings]
  -[NEPacketTunnelNetworkSettings setIPv4Settings:]
  -[NEPacketTunnelNetworkSettings IPv6Settings]
  -[NEPacketTunnelNetworkSettings setIPv6Settings:]
  -[NEPacketTunnelNetworkSettings tunnelOverheadBytes]
  -[NEPacketTunnelNetworkSettings setTunnelOverheadBytes:]
  -[NEPacketTunnelNetworkSettings MTU]


NEPacketTunnelProvider : NETunnelProvider <NSExtensionRequestHandling>
 @property  NEPacketTunnelFlow *packetFlow
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEPacketTunnelProvider .cxx_destruct]
  -[NEPacketTunnelProvider init]
  -[NEPacketTunnelProvider requestSocket:interface:local:remote:completionHandler:]
  -[NEPacketTunnelProvider setTunnelNetworkSettings:completionHandler:]
  -[NEPacketTunnelProvider startTunnelWithOptions:completionHandler:]
  -[NEPacketTunnelProvider stopTunnelWithReason:completionHandler:]
  -[NEPacketTunnelProvider initWithVirtualInterfaceType:]
  -[NEPacketTunnelProvider createTCPConnectionThroughTunnelToEndpoint:enableTLS:TLSParameters:delegate:]
  -[NEPacketTunnelProvider createUDPSessionThroughTunnelToEndpoint:fromEndpoint:]
  -[NEPacketTunnelProvider cancelTunnelWithError:]
  -[NEPacketTunnelProvider packetFlow]
  -[NEPacketTunnelProvider setPacketFlow:]


NEFilterPacketInterpose : NSObject
  // instance methods
  -[NEFilterPacketInterpose dealloc]
  -[NEFilterPacketInterpose .cxx_destruct]


NEPathController : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  BOOL enabled
 @property  BOOL ignoreRouteRules
 @property  BOOL ignoreFallback
 @property  long long cellularFallbackFlags
 @property  NSArray *pathRules
 @property  BOOL hasNonDefaultRules

  // class methods
  +[NEPathController supportsSecureCoding]
  +[NEPathController copyAggregatePathRules]

  // instance methods
  -[NEPathController checkValidityAndCollectErrors:]
  -[NEPathController encodeWithCoder:]
  -[NEPathController removePathRuleBySigningIdentifier:]
  -[NEPathController .cxx_destruct]
  -[NEPathController ignoreFallback]
  -[NEPathController setEnabled:]
  -[NEPathController descriptionWithIndent:options:]
  -[NEPathController setCellularFallbackFlags:]
  -[NEPathController hasNonDefaultRules]
  -[NEPathController setIgnoreRouteRules:]
  -[NEPathController copyWithZone:]
  -[NEPathController copyPathRuleBySigningIdentifier:]
  -[NEPathController setPathRules:]
  -[NEPathController setIgnoreFallback:]
  -[NEPathController cellularFallbackFlags]
  -[NEPathController ignoreRouteRules]
  -[NEPathController copyPathRuleSigningIdentifiers]
  -[NEPathController isEnabled]
  -[NEPathController initWithCoder:]
  -[NEPathController pathRules]


NEPathEvent : NSObject
 @property  long long type
 @property  NSString *bundleID

  // instance methods
  -[NEPathEvent type]
  -[NEPathEvent .cxx_destruct]
  -[NEPathEvent bundleID]


NEPathEventObserver : NSObject
  // instance methods
  -[NEPathEventObserver dealloc]
  -[NEPathEventObserver initWithQueue:eventHandler:]
  -[NEPathEventObserver .cxx_destruct]
  -[NEPathEventObserver cancel]
  -[NEPathEventObserver init]


NEPathRule : NEAppRule <NEConfigurationValidating, NEPrettyDescription>
 @property  BOOL defaultPathRule
 @property  long long cellularBehavior
 @property  long long wifiBehavior
 @property  BOOL denyCellularFallback
 @property  BOOL denyMulticast
 @property  BOOL multicastPreferenceSet
 @property  BOOL isIdentifierExternal
 @property  BOOL denyAll

  // class methods
  +[NEPathRule supportsSecureCoding]

  // instance methods
  -[NEPathRule signingIdentifierAllowed:domainsOrAccountsRequired:]
  -[NEPathRule denyAll]
  -[NEPathRule encodeWithCoder:]
  -[NEPathRule isIdentifierExternal]
  -[NEPathRule setIsIdentifierExternal:]
  -[NEPathRule denyCellularFallback]
  -[NEPathRule .cxx_destruct]
  -[NEPathRule setMulticastPreferenceSet:]
  -[NEPathRule setCellularBehavior:]
  -[NEPathRule descriptionWithIndent:options:]
  -[NEPathRule isDefaultPathRule]
  -[NEPathRule setWifiBehavior:]
  -[NEPathRule initDefaultPathRule]
  -[NEPathRule supportsCellularBehavior:]
  -[NEPathRule addCellularBehavior:grade:]
  -[NEPathRule copyWithZone:]
  -[NEPathRule setDenyMulticast:]
  -[NEPathRule denyMulticast]
  -[NEPathRule setDenyAll:]
  -[NEPathRule wifiBehavior]
  -[NEPathRule cellularBehavior]
  -[NEPathRule setDenyCellularFallback:]
  -[NEPathRule isEqual:]
  -[NEPathRule addWiFiBehavior:grade:]
  -[NEPathRule multicastPreferenceSet]
  -[NEPathRule supportsWiFiBehavior:]
  -[NEPathRule initWithCoder:]


NEByteParser : NSObject <NSCopying>
  // instance methods
  -[NEByteParser .cxx_destruct]
  -[NEByteParser copyWithZone:]


NEEthernetTunnelProvider : NEPacketTunnelProvider
  // instance methods
  -[NEEthernetTunnelProvider init]
  -[NEEthernetTunnelProvider setTunnelNetworkSettings:completionHandler:]


NEVirtualInterfaceParameters : NSObject <NSSecureCoding>
 @property  NSFileHandle *controlSocket
 @property  NSString *name
 @property  ^v userEthernetController
 @property  long long type
 @property  unsigned long maxPendingPackets
 @property  NSData *ethernetAddress
 @property  NSNumber *mtu

  // class methods
  +[NEVirtualInterfaceParameters supportsSecureCoding]

  // instance methods
  -[NEVirtualInterfaceParameters mtu]
  -[NEVirtualInterfaceParameters encodeWithCoder:]
  -[NEVirtualInterfaceParameters type]
  -[NEVirtualInterfaceParameters dealloc]
  -[NEVirtualInterfaceParameters .cxx_destruct]
  -[NEVirtualInterfaceParameters setName:]
  -[NEVirtualInterfaceParameters name]
  -[NEVirtualInterfaceParameters initWithCoder:]
  -[NEVirtualInterfaceParameters ethernetAddress]
  -[NEVirtualInterfaceParameters initWithVirtualInterface:]
  -[NEVirtualInterfaceParameters initWithType:maxPendingPackets:ethernetAddress:mtu:]
  -[NEVirtualInterfaceParameters createVirtualInterfaceWithQueue:clientInfo:]
  -[NEVirtualInterfaceParameters controlSocket]
  -[NEVirtualInterfaceParameters setControlSocket:]
  -[NEVirtualInterfaceParameters userEthernetController]
  -[NEVirtualInterfaceParameters setUserEthernetController:]
  -[NEVirtualInterfaceParameters maxPendingPackets]


NEFilterPacketExtensionProviderContext : NEFilterExtensionProviderContext
  // class methods
  +[NEFilterPacketExtensionProviderContext _extensionAuxiliaryHostProtocol]
  +[NEFilterPacketExtensionProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEFilterPacketExtensionProviderContext dealloc]
  -[NEFilterPacketExtensionProviderContext .cxx_destruct]
  -[NEFilterPacketExtensionProviderContext extensionPoint]
  -[NEFilterPacketExtensionProviderContext stopWithReason:]
  -[NEFilterPacketExtensionProviderContext requiredProviderSuperClass]
  -[NEFilterPacketExtensionProviderContext startFilterWithOptions:completionHandler:]


NEAgentFilterExtension : NSObject <NEFilterExtensionProviderHostDelegate, NEAgentSessionDelegate, NEFilterPluginDriver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *uuids
 @property  NSXPCInterface *driverInterface
 @property  NSXPCInterface *managerInterface

  // class methods
  +[NEAgentFilterExtension authenticateFlowWithState:crypto_key:flow:salt:isKernelSocket:]

  // instance methods
  -[NEAgentFilterExtension updateConfiguration:]
  -[NEAgentFilterExtension sleepWithCompletionHandler:]
  -[NEAgentFilterExtension managerInterface]
  -[NEAgentFilterExtension dealloc]
  -[NEAgentFilterExtension .cxx_destruct]
  -[NEAgentFilterExtension uuids]
  -[NEAgentFilterExtension wakeup]
  -[NEAgentFilterExtension startWithConfiguration:completionHandler:]
  -[NEAgentFilterExtension driverInterface]
  -[NEAgentFilterExtension notifyRulesChanged]
  -[NEAgentFilterExtension provideRemediationMap:]
  -[NEAgentFilterExtension provideURLAppendStringMap:]
  -[NEAgentFilterExtension report:]
  -[NEAgentFilterExtension sendBrowserContentFilterServerRequest]
  -[NEAgentFilterExtension sendSocketContentFilterRequest]
  -[NEAgentFilterExtension fetchCurrentRulesForFlow:completionHandler:]
  -[NEAgentFilterExtension applySettings:completionHandler:]
  -[NEAgentFilterExtension extension:didFailWithError:]
  -[NEAgentFilterExtension extension:didStartWithError:]
  -[NEAgentFilterExtension extensionDidStop:]
  -[NEAgentFilterExtension handleCancel]
  -[NEAgentFilterExtension handleAppsUninstalled:]
  -[NEAgentFilterExtension handleAppsUpdateBegins:]
  -[NEAgentFilterExtension handleAppsUpdateEnding:]
  -[NEAgentFilterExtension handleAppsUpdateEnds:]
  -[NEAgentFilterExtension initWithPluginType:pluginClass:pluginInfo:queue:factory:]
  -[NEAgentFilterExtension handleInitWithCompletionHandler:]
  -[NEAgentFilterExtension handleDisposeWithCompletionHandler:]
  -[NEAgentFilterExtension initWithPluginType:pluginClass:pluginEndpoint:pluginProcessIdentity:queue:factory:]
  -[NEAgentFilterExtension startFilter]
  -[NEAgentFilterExtension getFilterClientConnectionWithCompletionHandler:completionHandler:]
  -[NEAgentFilterExtension createPacketChannelForExtension:completionHandler:]


NEPolicyCondition : NSObject <NEPrettyDescription>
 @property  long long conditionType
 @property  BOOL negative
 @property  BOOL exactMatch

  // class methods
  +[NEPolicyCondition flowLocalAddress:prefix:]
  +[NEPolicyCondition isSystemProxyConnection]
  +[NEPolicyCondition remoteAddressStart:end:]
  +[NEPolicyCondition isInbound]
  +[NEPolicyCondition clientProhibitsContrained]
  +[NEPolicyCondition effectivePID:]
  +[NEPolicyCondition trafficClassStart:end:]
  +[NEPolicyCondition clientProhibitsExpensive]
  +[NEPolicyCondition localNetworks]
  +[NEPolicyCondition flowLocalAddressStart:end:]
  +[NEPolicyCondition localAddress:prefix:]
  +[NEPolicyCondition ipProtocol:]
  +[NEPolicyCondition flowIPProtocol:]
  +[NEPolicyCondition schemeUsingPort:]
  +[NEPolicyCondition clientFlags:]
  +[NEPolicyCondition sdkVersion:minSDKVersion:platform:]
  +[NEPolicyCondition flowRemoteAddress:prefix:]
  +[NEPolicyCondition entitlement]
  +[NEPolicyCondition realApplication:]
  +[NEPolicyCondition platformBinary]
  +[NEPolicyCondition accountIdentifier:]
  +[NEPolicyCondition allInterfaces]
  +[NEPolicyCondition effectiveApplication:]
  +[NEPolicyCondition remoteAddress:prefix:]
  +[NEPolicyCondition delegateIsPlatformBinary]
  +[NEPolicyCondition scopedInterface:]
  +[NEPolicyCondition flowLocalAddressEmpty]
  +[NEPolicyCondition requiredAgentDomain:agentType:]
  +[NEPolicyCondition domain:]
  +[NEPolicyCondition fallbackTraffic]
  +[NEPolicyCondition allowsUnsafeSocketAccess]
  +[NEPolicyCondition isLoopback]
  +[NEPolicyCondition usesModernNetworkAPI]
  +[NEPolicyCondition isListener]
  +[NEPolicyCondition packetFilterTags:]
  +[NEPolicyCondition uid:]
  +[NEPolicyCondition customEntitlement:]
  +[NEPolicyCondition signingIdentifier:]
  +[NEPolicyCondition flowRemoteAddressEmpty]
  +[NEPolicyCondition domainFilter:]
  +[NEPolicyCondition hasSignedResult]
  +[NEPolicyCondition effectivePID:version:]
  +[NEPolicyCondition localAddressStart:end:]
  +[NEPolicyCondition flowRemoteAddressStart:end:]

  // instance methods
  -[NEPolicyCondition isNegative]
  -[NEPolicyCondition setNegative:]
  -[NEPolicyCondition .cxx_destruct]
  -[NEPolicyCondition descriptionWithIndent:options:]
  -[NEPolicyCondition exactMatch]
  -[NEPolicyCondition setExactMatch:]
  -[NEPolicyCondition setConditionType:]
  -[NEPolicyCondition conditionType]
  -[NEPolicyCondition init]


NEPolicyRouteRule : NSObject <NEPrettyDescription>
 @property  NSUUID *networkAgentUUID
 @property  unsigned int controlUnit

  // class methods
  +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:]
  +[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:]
  +[NEPolicyRouteRule routeRuleWithAction:forType:]

  // instance methods
  -[NEPolicyRouteRule controlUnit]
  -[NEPolicyRouteRule .cxx_destruct]
  -[NEPolicyRouteRule descriptionWithIndent:options:]
  -[NEPolicyRouteRule networkAgentUUID]
  -[NEPolicyRouteRule setNetworkAgentUUID:]
  -[NEPolicyRouteRule setControlUnit:]
  -[NEPolicyRouteRule init]


NEPolicyResult : NSObject <NEPrettyDescription>
 @property  long long resultType

  // class methods
  +[NEPolicyResult pass]
  +[NEPolicyResult scopeSocketToInterfaceName:]
  +[NEPolicyResult allowUnentitled]
  +[NEPolicyResult drop]
  +[NEPolicyResult divertSocketToControlUnit:]
  +[NEPolicyResult netAgentUUID:]
  +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]
  +[NEPolicyResult filterWithControlUnit:]
  +[NEPolicyResult removeNetworkAgentUUID:]
  +[NEPolicyResult routeRules:]
  +[NEPolicyResult passWithFlags:]
  +[NEPolicyResult dropWithFlags:]
  +[NEPolicyResult skipWithOrder:]
  +[NEPolicyResult scopeToDirectInterface]
  +[NEPolicyResult prohibitFilters]
  +[NEPolicyResult scopedNetworkAgent:]

  // instance methods
  -[NEPolicyResult setResultType:]
  -[NEPolicyResult .cxx_destruct]
  -[NEPolicyResult descriptionWithIndent:options:]
  -[NEPolicyResult resultType]
  -[NEPolicyResult init]


NEPolicy : NSObject <NEPrettyDescription>
  // instance methods
  -[NEPolicy .cxx_destruct]
  -[NEPolicy descriptionWithIndent:options:]
  -[NEPolicy initWithOrder:result:conditions:]
  -[NEPolicy init]


NEPolicySession : NSObject <NEPrettyDescription>
 @property  long long priority

  // instance methods
  -[NEPolicySession setPriority:]
  -[NEPolicySession removeAllPolicies]
  -[NEPolicySession apply]
  -[NEPolicySession initFromPrivilegedProcess]
  -[NEPolicySession dealloc]
  -[NEPolicySession unregisterServiceUUID:]
  -[NEPolicySession dupSocket]
  -[NEPolicySession addPolicy:storeLocally:]
  -[NEPolicySession .cxx_destruct]
  -[NEPolicySession initWithSessionName:]
  -[NEPolicySession descriptionWithIndent:options:]
  -[NEPolicySession policyWithID:]
  -[NEPolicySession removePolicyWithID:]
  -[NEPolicySession initWithSocket:]
  -[NEPolicySession addPolicy:]
  -[NEPolicySession dumpKernelPolicies]
  -[NEPolicySession registerServiceUUID:]
  -[NEPolicySession priority]
  -[NEPolicySession removeAllDomainFilters]
  -[NEPolicySession removeDomainFilterWithID:]
  -[NEPolicySession lockSessionToCurrentProcess]
  -[NEPolicySession addDomainFilterWithData:]
  -[NEPolicySession init]


NEAccountIdentifiers : NSObject
 @property  NSArray *mailAccountIdentifiers
 @property  NSArray *calendarAccountIdentifiers
 @property  NSArray *contactsAccountIdentifiers

  // instance methods
  -[NEAccountIdentifiers .cxx_destruct]
  -[NEAccountIdentifiers mailAccountIdentifiers]
  -[NEAccountIdentifiers setMailAccountIdentifiers:]
  -[NEAccountIdentifiers calendarAccountIdentifiers]
  -[NEAccountIdentifiers setCalendarAccountIdentifiers:]
  -[NEAccountIdentifiers contactsAccountIdentifiers]
  -[NEAccountIdentifiers setContactsAccountIdentifiers:]


NEProfileIngestion : NSObject <NEProfileIngestionDelegate>
 @property  NSString *clientName
 @property  NSString *payloadType
 @property  NEConfigurationManager *manager
 @property  NSMutableArray *currentConfigurations
 @property  NEConfiguration *ingestedConfiguration

  // class methods
  +[NEProfileIngestion getServiceIDForPayload:]
  +[NEProfileIngestion profileMigrationComplete]

  // instance methods
  -[NEProfileIngestion removeConfigurationWithIdentifier:]
  -[NEProfileIngestion dealloc]
  -[NEProfileIngestion .cxx_destruct]
  -[NEProfileIngestion manager]
  -[NEProfileIngestion initWithName:]
  -[NEProfileIngestion clientName]
  -[NEProfileIngestion removeConfiguration:]
  -[NEProfileIngestion payloadType]
  -[NEProfileIngestion initWithNameAndType:payloadType:]
  -[NEProfileIngestion loadConfigurationsForceReloadFromDisk]
  -[NEProfileIngestion findConfigurationByName:]
  -[NEProfileIngestion findConfigurationByPayloadUUID:]
  -[NEProfileIngestion findConfigurationByConfigurationID:]
  -[NEProfileIngestion createConfigurationFromPayload:payloadType:]
  -[NEProfileIngestion ingestedConfiguration]
  -[NEProfileIngestion saveIngestedConfiguration]
  -[NEProfileIngestion saveIngestedConfiguration:]
  -[NEProfileIngestion removeIngestedConfiguration]
  -[NEProfileIngestion setAsideConfigurationName:unsetAside:]
  -[NEProfileIngestion isInstalled:]
  -[NEProfileIngestion lockConfigurations]
  -[NEProfileIngestion unlockConfigurations]
  -[NEProfileIngestion enableDefaultService]
  -[NEProfileIngestion enableAlwaysOnVpn]
  -[NEProfileIngestion updateDefaultAfterAddingConfiguration]
  -[NEProfileIngestion updateDefaultAfterDeletingConfiguration]
  -[NEProfileIngestion copyManagedConfigurationIDs]
  -[NEProfileIngestion updateAppLayerVPNMappingRules:]
  -[NEProfileIngestion updatePerAppMappingRules:]
  -[NEProfileIngestion updateManagedAppRules:]
  -[NEProfileIngestion updateAccountIdentifiers:]
  -[NEProfileIngestion getCertificatesForConfigurationWithIdentifier:]
  -[NEProfileIngestion removeAllConfigurationsWithPayload:profile:]
  -[NEProfileIngestion currentConfigurations]
  -[NEProfileIngestion setCurrentConfigurations:]
  -[NEProfileIngestion setIngestedConfiguration:]


NEProfileIngestionPayloadInfo : NSObject <NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  NSString *payloadProtocolType
 @property  NSString *payloadUUID
 @property  NSString *payloadOrganization
 @property  NSString *profileOrganization
 @property  NSString *profileIdentifier
 @property  NSString *profileUUID
 @property  NSDate *profileIngestionDate
 @property  NSString *systemVersion
 @property  BOOL isSetAside
 @property  long long profileSource

  // class methods
  +[NEProfileIngestionPayloadInfo supportsSecureCoding]

  // instance methods
  -[NEProfileIngestionPayloadInfo setProfileIdentifier:]
  -[NEProfileIngestionPayloadInfo copyLegacyDictionary]
  -[NEProfileIngestionPayloadInfo initFromLegacyDictionary:]
  -[NEProfileIngestionPayloadInfo systemVersion]
  -[NEProfileIngestionPayloadInfo encodeWithCoder:]
  -[NEProfileIngestionPayloadInfo .cxx_destruct]
  -[NEProfileIngestionPayloadInfo profileIdentifier]
  -[NEProfileIngestionPayloadInfo descriptionWithIndent:options:]
  -[NEProfileIngestionPayloadInfo copyWithZone:]
  -[NEProfileIngestionPayloadInfo init]
  -[NEProfileIngestionPayloadInfo initWithCoder:]
  -[NEProfileIngestionPayloadInfo payloadUUID]
  -[NEProfileIngestionPayloadInfo setPayloadUUID:]
  -[NEProfileIngestionPayloadInfo payloadProtocolType]
  -[NEProfileIngestionPayloadInfo setPayloadProtocolType:]
  -[NEProfileIngestionPayloadInfo payloadOrganization]
  -[NEProfileIngestionPayloadInfo setPayloadOrganization:]
  -[NEProfileIngestionPayloadInfo profileOrganization]
  -[NEProfileIngestionPayloadInfo setProfileOrganization:]
  -[NEProfileIngestionPayloadInfo profileUUID]
  -[NEProfileIngestionPayloadInfo setProfileUUID:]
  -[NEProfileIngestionPayloadInfo profileIngestionDate]
  -[NEProfileIngestionPayloadInfo setProfileIngestionDate:]
  -[NEProfileIngestionPayloadInfo setSystemVersion:]
  -[NEProfileIngestionPayloadInfo isSetAside]
  -[NEProfileIngestionPayloadInfo setIsSetAside:]
  -[NEProfileIngestionPayloadInfo profileSource]
  -[NEProfileIngestionPayloadInfo setProfileSource:]


NEProfilePayloadAOVPN : NEProfilePayloadBase
  // instance methods
  -[NEProfilePayloadAOVPN validatePayload]


NEProfilePayloadBase : NSObject <NEProfilePayloadBaseDelegate>
 @property  NSDictionary *payloadAtom
 @property  NSMutableDictionary *pendingCertificates
 @property  NSDictionary *pluginUpgradeInfo

  // instance methods
  -[NEProfilePayloadBase initWithPayload:]
  -[NEProfilePayloadBase .cxx_destruct]
  -[NEProfilePayloadBase validatePayload]
  -[NEProfilePayloadBase getPreprocessedPayloadContents]
  -[NEProfilePayloadBase setPostprocessedPayloadContents:]
  -[NEProfilePayloadBase addCertificatePending:certificateTag:]
  -[NEProfilePayloadBase addCertificatePending:certificateTag:accessGroup:]
  -[NEProfilePayloadBase payloadAtom]
  -[NEProfilePayloadBase setPayloadAtom:]
  -[NEProfilePayloadBase pendingCertificates]
  -[NEProfilePayloadBase setPendingCertificates:]
  -[NEProfilePayloadBase pluginUpgradeInfo]
  -[NEProfilePayloadBase setPluginUpgradeInfo:]


NEAgentAppProxyExtension : NEAgentTunnelExtension <NEExtensionAppProxyProviderHostDelegate, NEFlowDivertPluginDriver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEAgentAppProxyExtension setDelegateInterface:]
  -[NEAgentAppProxyExtension managerInterface]
  -[NEAgentAppProxyExtension connectWithParameters:]
  -[NEAgentAppProxyExtension driverInterface]
  -[NEAgentAppProxyExtension extension:didRequestFlowDivertControlSocketWithCompletionHandler:]


NEAppSidecarPolicySession : NSObject
  // class methods
  +[NEAppSidecarPolicySession connectionIdentifier]

  // instance methods
  -[NEAppSidecarPolicySession .cxx_destruct]
  -[NEAppSidecarPolicySession init]
  -[NEAppSidecarPolicySession installPolicies]
  -[NEAppSidecarPolicySession uninstallPolicies]


NEProfilePayloadBaseVPN : NEProfilePayloadBase
  // instance methods
  -[NEProfilePayloadBaseVPN initWithPayload:]
  -[NEProfilePayloadBaseVPN .cxx_destruct]
  -[NEProfilePayloadBaseVPN validatePayload]
  -[NEProfilePayloadBaseVPN getPreprocessedPayloadContents]
  -[NEProfilePayloadBaseVPN setPostprocessedPayloadContents:]


NEProfilePayloadContentFilter : NEProfilePayloadBase
  // instance methods
  -[NEProfilePayloadContentFilter validatePayload]


NEProvider : NSObject <NSExtensionRequestHandling>
 @property  NWPath *defaultPath
 @property  NEExtensionProviderContext *context
 @property  NSString *appName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEProvider startSystemExtensionMode]
  +[NEProvider isRunningInProvider]
  +[NEProvider isNEProviderBundle:forExtensionPoint:]

  // instance methods
  -[NEProvider wake]
  -[NEProvider appName]
  -[NEProvider sleepWithCompletionHandler:]
  -[NEProvider defaultPath]
  -[NEProvider dealloc]
  -[NEProvider .cxx_destruct]
  -[NEProvider setAppName:]
  -[NEProvider setContext:]
  -[NEProvider context]
  -[NEProvider init]
  -[NEProvider beginRequestWithExtensionContext:]
  -[NEProvider observerHelperHandler:ofObject:change:context:]
  -[NEProvider initAllowUnentitled:]
  -[NEProvider setdefaultPathObserver:]
  -[NEProvider createTCPConnectionToEndpoint:enableTLS:TLSParameters:delegate:]
  -[NEProvider createUDPSessionToEndpoint:fromEndpoint:]
  -[NEProvider displayMessage:completionHandler:]
  -[NEProvider setDefaultPath:]


NEProvider_Subsystem : NSObject <PKModularService>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEProvider_Subsystem initForPlugInKit]


NEProviderAppConfigurationClient : NEUtilConfigurationClient <NSXPCListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NEProviderAppConfigurationClient .cxx_destruct]
  -[NEProviderAppConfigurationClient setEnabled:]
  -[NEProviderAppConfigurationClient isAlwaysOn]
  -[NEProviderAppConfigurationClient enabled]
  -[NEProviderAppConfigurationClient listener:shouldAcceptNewConnection:]
  -[NEProviderAppConfigurationClient filterConfiguration]
  -[NEProviderAppConfigurationClient onDemandRules]
  -[NEProviderAppConfigurationClient setOnDemandRules:]
  -[NEProviderAppConfigurationClient handleConfigChanged:]
  -[NEProviderAppConfigurationClient handleCommand:forConfigWithName:withParameters:completionHandler:]
  -[NEProviderAppConfigurationClient initWithClientName:]
  -[NEProviderAppConfigurationClient onDemandEnabled]
  -[NEProviderAppConfigurationClient setOnDemandEnabled:]
  -[NEProviderAppConfigurationClient protocolForParameters:]
  -[NEProviderAppConfigurationClient dnsProxyConfiguration]
  -[NEProviderAppConfigurationClient dnsSettingsBundle]
  -[NEProviderAppConfigurationClient createConfigurationWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient setProtocolWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient setPasswordWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient unsetPasswordWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient setSharedSecretWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient unsetSharedSecretWithParameters:errorStr:]
  -[NEProviderAppConfigurationClient setProviderTypeWithParameters:errorStr:]


NEProxySettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  BOOL useForAllDomains
 @property  BOOL autoProxyDiscovery
 @property  NSURL *proxyAutoConfigURL
 @property  NSString *proxyAutoConfigJavaScript
 @property  BOOL FTPEnabled
 @property  NEProxyServer *FTPServer
 @property  BOOL SOCKSEnabled
 @property  NEProxyServer *SOCKSServer
 @property  BOOL RTSPEnabled
 @property  NEProxyServer *RTSPServer
 @property  BOOL gopherEnabled
 @property  NEProxyServer *gopherServer
 @property  BOOL usePassiveFTP
 @property  NSArray *supplementalMatchDomains
 @property  NSArray *supplementalMatchOrders
 @property  BOOL enabled
 @property  BOOL autoProxyConfigurationEnabled
 @property  NSURL *proxyAutoConfigurationURL
 @property  NSString *proxyAutoConfigurationJavaScript
 @property  BOOL HTTPEnabled
 @property  NEProxyServer *HTTPServer
 @property  BOOL HTTPSEnabled
 @property  NEProxyServer *HTTPSServer
 @property  BOOL excludeSimpleHostnames
 @property  NSArray *exceptionList
 @property  NSArray *matchDomains

  // class methods
  +[NEProxySettings supportsSecureCoding]

  // instance methods
  -[NEProxySettings matchDomains]
  -[NEProxySettings copyLegacyDictionary]
  -[NEProxySettings setMatchDomains:]
  -[NEProxySettings initFromLegacyDictionary:]
  -[NEProxySettings checkValidityAndCollectErrors:]
  -[NEProxySettings encodeWithCoder:]
  -[NEProxySettings .cxx_destruct]
  -[NEProxySettings descriptionWithIndent:options:]
  -[NEProxySettings copyWithZone:]
  -[NEProxySettings enabled]
  -[NEProxySettings init]
  -[NEProxySettings initWithCoder:]
  -[NEProxySettings useForAllDomains]
  -[NEProxySettings copyPasswordsFromKeychain]
  -[NEProxySettings proxyAutoConfigurationURL]
  -[NEProxySettings setProxyAutoConfigurationURL:]
  -[NEProxySettings proxyAutoConfigurationJavaScript]
  -[NEProxySettings setProxyAutoConfigurationJavaScript:]
  -[NEProxySettings HTTPServer]
  -[NEProxySettings setHTTPServer:]
  -[NEProxySettings HTTPSServer]
  -[NEProxySettings setHTTPSServer:]
  -[NEProxySettings autoProxyConfigurationEnabled]
  -[NEProxySettings setAutoProxyConfigurationEnabled:]
  -[NEProxySettings HTTPEnabled]
  -[NEProxySettings setHTTPEnabled:]
  -[NEProxySettings HTTPSEnabled]
  -[NEProxySettings setHTTPSEnabled:]
  -[NEProxySettings excludeSimpleHostnames]
  -[NEProxySettings setExcludeSimpleHostnames:]
  -[NEProxySettings exceptionList]
  -[NEProxySettings setExceptionList:]
  -[NEProxySettings autoProxyDiscovery]
  -[NEProxySettings setAutoProxyDiscovery:]
  -[NEProxySettings proxyAutoConfigURL]
  -[NEProxySettings setProxyAutoConfigURL:]
  -[NEProxySettings proxyAutoConfigJavaScript]
  -[NEProxySettings setProxyAutoConfigJavaScript:]
  -[NEProxySettings FTPEnabled]
  -[NEProxySettings setFTPEnabled:]
  -[NEProxySettings FTPServer]
  -[NEProxySettings setFTPServer:]
  -[NEProxySettings SOCKSEnabled]
  -[NEProxySettings setSOCKSEnabled:]
  -[NEProxySettings SOCKSServer]
  -[NEProxySettings setSOCKSServer:]
  -[NEProxySettings RTSPEnabled]
  -[NEProxySettings setRTSPEnabled:]
  -[NEProxySettings RTSPServer]
  -[NEProxySettings setRTSPServer:]
  -[NEProxySettings gopherEnabled]
  -[NEProxySettings setGopherEnabled:]
  -[NEProxySettings gopherServer]
  -[NEProxySettings setGopherServer:]
  -[NEProxySettings usePassiveFTP]
  -[NEProxySettings setUsePassiveFTP:]
  -[NEProxySettings supplementalMatchDomains]
  -[NEProxySettings setSupplementalMatchDomains:]
  -[NEProxySettings supplementalMatchOrders]
  -[NEProxySettings setSupplementalMatchOrders:]


NEProxyServer : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  long long type
 @property  NSString *address
 @property  long long port
 @property  BOOL authenticationRequired
 @property  NSString *username
 @property  NSString *password

  // class methods
  +[NEProxyServer supportsSecureCoding]

  // instance methods
  -[NEProxyServer checkValidityAndCollectErrors:]
  -[NEProxyServer port]
  -[NEProxyServer setAuthenticationRequired:]
  -[NEProxyServer setUsername:]
  -[NEProxyServer encodeWithCoder:]
  -[NEProxyServer type]
  -[NEProxyServer .cxx_destruct]
  -[NEProxyServer username]
  -[NEProxyServer descriptionWithIndent:options:]
  -[NEProxyServer address]
  -[NEProxyServer setType:]
  -[NEProxyServer password]
  -[NEProxyServer copyWithZone:]
  -[NEProxyServer setPassword:]
  -[NEProxyServer initWithCoder:]
  -[NEProxyServer authenticationRequired]
  -[NEProxyServer copyPassword]
  -[NEProxyServer initWithAddress:port:]
  -[NEProxyServer initWithType:address:port:]


NEAppPushCallKitXPCClient : NSObject <CXNetworkExtensionVoIPXPCClient>
  // instance methods
  -[NEAppPushCallKitXPCClient dealloc]
  -[NEAppPushCallKitXPCClient .cxx_destruct]
  -[NEAppPushCallKitXPCClient init]
  -[NEAppPushCallKitXPCClient voipNetworkExtensionPayloadReceived:mustPostCall:withCompletionHandler:]
  -[NEAppPushCallKitXPCClient voipNetworkExtensionRegistrationFailed]


NETunnelNetworkSettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSString *tunnelRemoteAddress
 @property  NEDNSSettings *DNSSettings
 @property  NEProxySettings *proxySettings

  // class methods
  +[NETunnelNetworkSettings supportsSecureCoding]

  // instance methods
  -[NETunnelNetworkSettings initFromLegacyDictionary:]
  -[NETunnelNetworkSettings checkValidityAndCollectErrors:]
  -[NETunnelNetworkSettings encodeWithCoder:]
  -[NETunnelNetworkSettings .cxx_destruct]
  -[NETunnelNetworkSettings descriptionWithIndent:options:]
  -[NETunnelNetworkSettings copyWithZone:]
  -[NETunnelNetworkSettings initWithCoder:]
  -[NETunnelNetworkSettings proxySettings]
  -[NETunnelNetworkSettings initWithTunnelRemoteAddress:]
  -[NETunnelNetworkSettings tunnelRemoteAddress]
  -[NETunnelNetworkSettings DNSSettings]
  -[NETunnelNetworkSettings setDNSSettings:]
  -[NETunnelNetworkSettings setProxySettings:]


NEFilterRule : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NENetworkRule *networkRule
 @property  long long action

  // class methods
  +[NEFilterRule supportsSecureCoding]

  // instance methods
  -[NEFilterRule checkValidityAndCollectErrors:]
  -[NEFilterRule encodeWithCoder:]
  -[NEFilterRule .cxx_destruct]
  -[NEFilterRule descriptionWithIndent:options:]
  -[NEFilterRule action]
  -[NEFilterRule copyWithZone:]
  -[NEFilterRule initWithCoder:]
  -[NEFilterRule initWithNetworkRule:action:]
  -[NEFilterRule networkRule]


NETunnelProvider : NEProvider <NSExtensionRequestHandling>
 @property  NEVPNProtocol *protocolConfiguration
 @property  NSArray *appRules
 @property  long long routingMethod
 @property  BOOL reasserting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NETunnelProvider appRules]
  -[NETunnelProvider setAppRules:]
  -[NETunnelProvider .cxx_destruct]
  -[NETunnelProvider handleAppMessage:completionHandler:]
  -[NETunnelProvider setTunnelNetworkSettings:completionHandler:]
  -[NETunnelProvider reasserting]
  -[NETunnelProvider setReasserting:]
  -[NETunnelProvider routingMethod]
  -[NETunnelProvider protocolConfiguration]
  -[NETunnelProvider setProtocolConfiguration:]


NETunnelProviderManager : NEVPNManager
 @property  long long routingMethod
 @property  NSArray *safariDomains
 @property  NSArray *mailDomains
 @property  NSArray *calendarDomains
 @property  NSArray *contactsDomains
 @property  NSArray *appRules
 @property  NSArray *excludedDomains
 @property  NSArray *associatedDomains

  // class methods
  +[NETunnelProviderManager loadAllFromPreferencesWithCompletionHandler:]
  +[NETunnelProviderManager forPerAppVPN]

  // instance methods
  -[NETunnelProviderManager setMailDomains:]
  -[NETunnelProviderManager appRules]
  -[NETunnelProviderManager setAppRules:]
  -[NETunnelProviderManager setExcludedDomains:]
  -[NETunnelProviderManager .cxx_destruct]
  -[NETunnelProviderManager descriptionWithIndent:options:]
  -[NETunnelProviderManager setContactsDomains:]
  -[NETunnelProviderManager setCalendarDomains:]
  -[NETunnelProviderManager associatedDomains]
  -[NETunnelProviderManager setAssociatedDomains:]
  -[NETunnelProviderManager init]
  -[NETunnelProviderManager isProtocolTypeValid:]
  -[NETunnelProviderManager additionalSetup]
  -[NETunnelProviderManager loadFromPreferencesWithCompletionHandler:]
  -[NETunnelProviderManager routingMethod]
  -[NETunnelProviderManager initWithSessionType:tunnelType:]
  -[NETunnelProviderManager copyAppRules]
  -[NETunnelProviderManager safariDomains]
  -[NETunnelProviderManager setSafariDomains:]
  -[NETunnelProviderManager mailDomains]
  -[NETunnelProviderManager calendarDomains]
  -[NETunnelProviderManager contactsDomains]
  -[NETunnelProviderManager excludedDomains]


NETunnelProviderProtocol : NEVPNProtocol
 @property  NSString *pluginType
 @property  NSString *designatedRequirement
 @property  NSString *authenticationPluginType
 @property  NSDictionary *vendorInfo
 @property  long long authenticationMethod
 @property  int reassertTimeout
 @property  NSDictionary *providerConfiguration
 @property  NSString *providerBundleIdentifier

  // class methods
  +[NETunnelProviderProtocol supportsSecureCoding]
  +[NETunnelProviderProtocol isLegacyPluginType:]

  // instance methods
  -[NETunnelProviderProtocol copyLegacyDictionary]
  -[NETunnelProviderProtocol initFromLegacyDictionary:]
  -[NETunnelProviderProtocol checkValidityAndCollectErrors:]
  -[NETunnelProviderProtocol encodeWithCoder:]
  -[NETunnelProviderProtocol pluginType]
  -[NETunnelProviderProtocol .cxx_destruct]
  -[NETunnelProviderProtocol descriptionWithIndent:options:]
  -[NETunnelProviderProtocol copyWithZone:]
  -[NETunnelProviderProtocol initWithPluginType:]
  -[NETunnelProviderProtocol init]
  -[NETunnelProviderProtocol initWithCoder:]
  -[NETunnelProviderProtocol authenticationMethod]
  -[NETunnelProviderProtocol providerBundleIdentifier]
  -[NETunnelProviderProtocol designatedRequirement]
  -[NETunnelProviderProtocol providerConfiguration]
  -[NETunnelProviderProtocol setProviderConfiguration:]
  -[NETunnelProviderProtocol setProviderBundleIdentifier:]
  -[NETunnelProviderProtocol setPluginType:]
  -[NETunnelProviderProtocol setDesignatedRequirement:]
  -[NETunnelProviderProtocol setServiceProtocolsInService:]
  -[NETunnelProviderProtocol updateWithServiceProtocolsFromService:]
  -[NETunnelProviderProtocol copyPasswordsFromKeychainInDomain:]
  -[NETunnelProviderProtocol removeKeychainItemsInDomain:keepIdentity:]
  -[NETunnelProviderProtocol syncWithKeychainInDomain:configuration:suffix:]
  -[NETunnelProviderProtocol initFromLegacyDictionaryExtra:]
  -[NETunnelProviderProtocol createInterface]
  -[NETunnelProviderProtocol authenticationPluginType]
  -[NETunnelProviderProtocol setAuthenticationPluginType:]
  -[NETunnelProviderProtocol vendorInfo]
  -[NETunnelProviderProtocol setVendorInfo:]
  -[NETunnelProviderProtocol setAuthenticationMethod:]
  -[NETunnelProviderProtocol reassertTimeout]
  -[NETunnelProviderProtocol setReassertTimeout:]


NETunnelProviderSession : NEVPNConnection
  // instance methods
  -[NETunnelProviderSession startTunnelWithOptions:andReturnError:]
  -[NETunnelProviderSession stopTunnel]
  -[NETunnelProviderSession sendProviderMessage:returnError:responseHandler:]


NEIPCWrapper : NSObject
  // instance methods
  -[NEIPCWrapper .cxx_destruct]


NEFilterPacketExtensionProviderHostContext : NEFilterExtensionProviderHostContext <NEFilterExtensionProviderProtocol, NEFilterPacketExtensionProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEFilterPacketExtensionProviderHostContext _extensionAuxiliaryHostProtocol]

  // instance methods
  -[NEFilterPacketExtensionProviderHostContext createPacketChannelWithCompletionHandler:]


NENetworkPropertiesCache : NSObject
 @property  NSURL *cacheFileURL
 @property  NSString *keychainIdentifier

  // class methods
  +[NENetworkPropertiesCache sharedCache]

  // instance methods
  -[NENetworkPropertiesCache copyPropertiesForNetworkPath:]
  -[NENetworkPropertiesCache setProperties:forNetworkPath:]
  -[NENetworkPropertiesCache rotateEncryptionKey]
  -[NENetworkPropertiesCache setKeychainIdentifier:]
  -[NENetworkPropertiesCache keychainIdentifier]
  -[NENetworkPropertiesCache clear]
  -[NENetworkPropertiesCache .cxx_destruct]
  -[NENetworkPropertiesCache setCacheFileURL:]
  -[NENetworkPropertiesCache cacheFileURL]
  -[NENetworkPropertiesCache init]


NEFilterSettings : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSArray *rules
 @property  long long defaultAction

  // class methods
  +[NEFilterSettings supportsSecureCoding]

  // instance methods
  -[NEFilterSettings checkValidityAndCollectErrors:]
  -[NEFilterSettings encodeWithCoder:]
  -[NEFilterSettings .cxx_destruct]
  -[NEFilterSettings descriptionWithIndent:options:]
  -[NEFilterSettings rules]
  -[NEFilterSettings defaultAction]
  -[NEFilterSettings copyWithZone:]
  -[NEFilterSettings initWithCoder:]
  -[NEFilterSettings initWithRules:defaultAction:]


NEUserNotification : NSObject
  // class methods
  +[NEUserNotification cancelCurrentNotificationWithDefaultResponse:queue:completionHandler:]
  +[NEUserNotification shouldPromptForLocalAuthentication]
  +[NEUserNotification promptForLocalAuthenticationWithReason:completionQueue:completionHandler:]

  // instance methods
  -[NEUserNotification .cxx_destruct]
  -[NEUserNotification cancel]
  -[NEUserNotification initAndShowAlertWithHeader:message:alternateMessage:defaultMessage:noBoldDefault:callbackQueue:callbackHandler:]
  -[NEUserNotification initAndShowAuthenticationWithHeader:options:flags:callbackQueue:callbackHandler:]
  -[NEUserNotification initAndShowAddConfigurationsForApp:warningHeader:warning:callbackQueue:callbackHandler:]
  -[NEUserNotification initAndShowLocalNetworkAlertWithAppName:reasonString:callbackQueue:callbackHandler:]


NETransparentProxyProvider : NEAppProxyProvider
  // instance methods
  -[NETransparentProxyProvider setTunnelNetworkSettings:completionHandler:]


NEUtilConfigurationClient : NSObject <NEConfigurationCommandHandling>
 @property  BOOL enabled
 @property  BOOL onDemandEnabled
 @property  BOOL onDemandUserOverrideDisabled
 @property  BOOL disconnectOnDemandEnabled
 @property  NSArray *onDemandRules
 @property  BOOL isAlwaysOn
 @property  NEFilterProviderConfiguration *filterConfiguration
 @property  NEDNSProxyProviderProtocol *dnsProxyConfiguration
 @property  NEDNSSettingsBundle *dnsSettingsBundle
 @property  NEAppPush *appPush
 @property  NSString *clientName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEUtilConfigurationClient clientWithName:]
  +[NEUtilConfigurationClient removeClientWithName:]

  // instance methods
  -[NEUtilConfigurationClient dealloc]
  -[NEUtilConfigurationClient .cxx_destruct]
  -[NEUtilConfigurationClient setEnabled:]
  -[NEUtilConfigurationClient appPush]
  -[NEUtilConfigurationClient isAlwaysOn]
  -[NEUtilConfigurationClient enabled]
  -[NEUtilConfigurationClient clientName]
  -[NEUtilConfigurationClient filterConfiguration]
  -[NEUtilConfigurationClient onDemandRules]
  -[NEUtilConfigurationClient setOnDemandRules:]
  -[NEUtilConfigurationClient initInternalWithClientName:]
  -[NEUtilConfigurationClient handleCommand:forConfigWithName:withParameters:completionHandler:]
  -[NEUtilConfigurationClient initWithClientName:]
  -[NEUtilConfigurationClient onDemandEnabled]
  -[NEUtilConfigurationClient setOnDemandEnabled:]
  -[NEUtilConfigurationClient protocolForParameters:]
  -[NEUtilConfigurationClient dnsProxyConfiguration]
  -[NEUtilConfigurationClient dnsSettingsBundle]
  -[NEUtilConfigurationClient createConfigurationWithParameters:errorStr:]
  -[NEUtilConfigurationClient setProtocolWithParameters:errorStr:]
  -[NEUtilConfigurationClient setPasswordWithParameters:errorStr:]
  -[NEUtilConfigurationClient unsetPasswordWithParameters:errorStr:]
  -[NEUtilConfigurationClient setSharedSecretWithParameters:errorStr:]
  -[NEUtilConfigurationClient unsetSharedSecretWithParameters:errorStr:]
  -[NEUtilConfigurationClient setProviderTypeWithParameters:errorStr:]
  -[NEUtilConfigurationClient onDemandUserOverrideDisabled]
  -[NEUtilConfigurationClient setOnDemandUserOverrideDisabled:]
  -[NEUtilConfigurationClient disconnectOnDemandEnabled]
  -[NEUtilConfigurationClient setDisconnectOnDemandEnabled:]
  -[NEUtilConfigurationClient setFilterPluginWithParameters:errorStr:]
  -[NEUtilConfigurationClient unsetFilterPluginParameters:errorStr:]
  -[NEUtilConfigurationClient setDNSProxyWithParameters:errorStr:]
  -[NEUtilConfigurationClient unsetDNSProxyWithParameters:errorStr:]
  -[NEUtilConfigurationClient setCommonParameters:errorStr:]
  -[NEUtilConfigurationClient unsetCommonParameters:errorStr:]
  -[NEUtilConfigurationClient setIPSecParameters:errorStr:]
  -[NEUtilConfigurationClient unsetIPSecParameters:errorStr:]
  -[NEUtilConfigurationClient addOnDemandRuleWithParameters:errorStr:]
  -[NEUtilConfigurationClient removeOnDemandRuleWithParameters:errorStr:]
  -[NEUtilConfigurationClient setDNSParameters:errorStr:]
  -[NEUtilConfigurationClient unsetDNSParameters:errorStr:]
  -[NEUtilConfigurationClient setAppPushParameters:errorStr:]
  -[NEUtilConfigurationClient unsetAppPushParameters:errorStr:]
  -[NEUtilConfigurationClient setProxyParameters:errorStr:]
  -[NEUtilConfigurationClient unsetProxyParameters:errorStr:]
  -[NEUtilConfigurationClient setProxyServer:errorStr:]
  -[NEUtilConfigurationClient unsetProxyServer:errorStr:]


NEProcessIdentity : NSObject <NSSecureCoding>
 @property  int pid
 @property  int pidVersion
 @property  NSUUID *uuid
 @property  NSData *auditTokenData

  // class methods
  +[NEProcessIdentity supportsSecureCoding]

  // instance methods
  -[NEProcessIdentity encodeWithCoder:]
  -[NEProcessIdentity uuid]
  -[NEProcessIdentity .cxx_destruct]
  -[NEProcessIdentity auditTokenData]
  -[NEProcessIdentity pid]
  -[NEProcessIdentity initWithCoder:]
  -[NEProcessIdentity initFromXPCConnection:]
  -[NEProcessIdentity initFromXPCMessage:]
  -[NEProcessIdentity pidVersion]


NEExtensionAppPushProviderContext : NEExtensionProviderContext <NEExtensionAppPushProviderProtocol, NEExtensionAppPushProviderHostProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEExtensionAppPushProviderContext _extensionAuxiliaryHostProtocol]
  +[NEExtensionAppPushProviderContext _extensionAuxiliaryVendorProtocol]

  // instance methods
  -[NEExtensionAppPushProviderContext dealloc]
  -[NEExtensionAppPushProviderContext extensionPoint]
  -[NEExtensionAppPushProviderContext setProviderConfiguration:]
  -[NEExtensionAppPushProviderContext startConnectionWithProviderConfig:completionHandler:]
  -[NEExtensionAppPushProviderContext stopWithReason:completionHandler:]
  -[NEExtensionAppPushProviderContext reportIncomingCall:]
  -[NEExtensionAppPushProviderContext sendOutgoingCallMessage:completionHandler:]
  -[NEExtensionAppPushProviderContext sendTimerEvent]


NEVPN : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  NSArray *exceptionApps
 @property  BOOL enabled
 @property  BOOL onDemandEnabled
 @property  BOOL disconnectOnDemandEnabled
 @property  BOOL onDemandUserOverrideDisabled
 @property  NSArray *onDemandRules
 @property  NEVPNProtocol *protocol
 @property  long long tunnelType

  // class methods
  +[NEVPN supportsSecureCoding]

  // instance methods
  -[NEVPN copyLegacyDictionary]
  -[NEVPN initFromLegacyDictionary:]
  -[NEVPN checkValidityAndCollectErrors:]
  -[NEVPN encodeWithCoder:]
  -[NEVPN setProtocol:]
  -[NEVPN .cxx_destruct]
  -[NEVPN setEnabled:]
  -[NEVPN descriptionWithIndent:options:]
  -[NEVPN copyWithZone:]
  -[NEVPN protocol]
  -[NEVPN init]
  -[NEVPN isEnabled]
  -[NEVPN initWithCoder:]
  -[NEVPN onDemandRules]
  -[NEVPN setOnDemandRules:]
  -[NEVPN setOnDemandEnabled:]
  -[NEVPN setOnDemandUserOverrideDisabled:]
  -[NEVPN setDisconnectOnDemandEnabled:]
  -[NEVPN isOnDemandEnabled]
  -[NEVPN isDisconnectOnDemandEnabled]
  -[NEVPN isOnDemandUserOverrideDisabled]
  -[NEVPN tunnelType]
  -[NEVPN setTunnelType:]
  -[NEVPN exceptionApps]
  -[NEVPN setExceptionApps:]


NEVPNApp : NEVPN
 @property  NSArray *appRules
 @property  BOOL noRestriction
 @property  BOOL restrictDomains
 @property  NSArray *excludedDomains

  // class methods
  +[NEVPNApp supportsSecureCoding]

  // instance methods
  -[NEVPNApp copyLegacyDictionary]
  -[NEVPNApp setNoRestriction:]
  -[NEVPNApp initFromLegacyDictionary:]
  -[NEVPNApp checkValidityAndCollectErrors:]
  -[NEVPNApp appRules]
  -[NEVPNApp encodeWithCoder:]
  -[NEVPNApp setAppRules:]
  -[NEVPNApp setExcludedDomains:]
  -[NEVPNApp noRestriction]
  -[NEVPNApp .cxx_destruct]
  -[NEVPNApp descriptionWithIndent:options:]
  -[NEVPNApp setRestrictDomains:]
  -[NEVPNApp copyWithZone:]
  -[NEVPNApp init]
  -[NEVPNApp initWithCoder:]
  -[NEVPNApp excludedDomains]
  -[NEVPNApp copyAppRuleByID:]
  -[NEVPNApp copyAppRuleBySigningIdentifier:]
  -[NEVPNApp removeAppRuleByID:]
  -[NEVPNApp copyAppRuleIDs]
  -[NEVPNApp installSigningIdentifiersWithFlowDivertControlSocket:]
  -[NEVPNApp updateAppRulesForUID:]
  -[NEVPNApp restrictDomains]


NEProviderXPCListener : NSXPCListener
  // instance methods
  -[NEProviderXPCListener .cxx_destruct]


NEProviderServer : NSObject <NSXPCListenerDelegate>
 @property  NEExtensionProviderContext *firstContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NEProviderServer sharedServer]

  // instance methods
  -[NEProviderServer .cxx_destruct]
  -[NEProviderServer start]
  -[NEProviderServer listener:shouldAcceptNewConnection:]
  -[NEProviderServer generateProviderEndpointInfoInMessage:extensionPoint:]
  -[NEProviderServer firstContext]
  -[NEProviderServer removeProviderContext:]


NEVPNConnection : NSObject
 @property  BOOL installed
 @property  BOOL installNotify
 @property  NSError *lastDisconnectError
 @property  long long status
 @property  NSDate *connectedDate
 @property  NEVPNManager *manager

  // class methods
  +[NEVPNConnection createDisconnectErrorWithDomain:code:]
  +[NEVPNConnection createConnectionForEnabledEnterpriseConfiguration]
  +[NEVPNConnection createConnectionForEnabledEnterpriseConfigurationWithName:]

  // instance methods
  -[NEVPNConnection connectedDate]
  -[NEVPNConnection status]
  -[NEVPNConnection dealloc]
  -[NEVPNConnection .cxx_destruct]
  -[NEVPNConnection manager]
  -[NEVPNConnection installed]
  -[NEVPNConnection startVPNTunnelWithOptions:andReturnError:]
  -[NEVPNConnection stopVPNTunnel]
  -[NEVPNConnection startVPNTunnelAndReturnError:]
  -[NEVPNConnection fetchLastDisconnectErrorWithCompletionHandler:]
  -[NEVPNConnection fetchExtendedStatusWithCompletionHandler:]
  -[NEVPNConnection fetchStatisticsWithCompletionHandler:]
  -[NEVPNConnection setInstalled:]
  -[NEVPNConnection installNotify]
  -[NEVPNConnection setInstallNotify:]
  -[NEVPNConnection lastDisconnectError]


NEVPNManager : NSObject <NEPrettyDescription>
 @property  NEConfiguration *configuration
 @property  NSUUID *identifier
 @property  NSString *appBundleIdentifier
 @property  BOOL fromProfile
 @property  BOOL fromMDM
 @property  NSArray *onDemandRules
 @property  BOOL onDemandEnabled
 @property  NSString *localizedDescription
 @property  NEVPNProtocol *protocol
 @property  NEVPNProtocol *protocolConfiguration
 @property  NEVPNConnection *connection
 @property  BOOL enabled

  // class methods
  +[NEVPNManager create]
  +[NEVPNManager sharedManager]
  +[NEVPNManager loadAllFromPreferencesWithCompletionHandler:]

  // instance methods
  -[NEVPNManager appBundleIdentifier]
  -[NEVPNManager localizedDescription]
  -[NEVPNManager setConfiguration:]
  -[NEVPNManager identifier]
  -[NEVPNManager configuration]
  -[NEVPNManager setProtocol:]
  -[NEVPNManager .cxx_destruct]
  -[NEVPNManager setEnabled:]
  -[NEVPNManager connection]
  -[NEVPNManager setLocalizedDescription:]
  -[NEVPNManager descriptionWithIndent:options:]
  -[NEVPNManager protocol]
  -[NEVPNManager init]
  -[NEVPNManager isEnabled]
  -[NEVPNManager initWithGrade:connection:tunnelType:]
  -[NEVPNManager isProtocolTypeValid:]
  -[NEVPNManager additionalSetup]
  -[NEVPNManager loadFromPreferencesWithCompletionHandler:]
  -[NEVPNManager removeFromPreferencesWithCompletionHandler:]
  -[NEVPNManager saveToPreferencesWithCompletionHandler:]
  -[NEVPNManager isFromProfile]
  -[NEVPNManager isFromMDM]
  -[NEVPNManager onDemandRules]
  -[NEVPNManager setOnDemandRules:]
  -[NEVPNManager setOnDemandEnabled:]
  -[NEVPNManager protocolConfiguration]
  -[NEVPNManager setProtocolConfiguration:]
  -[NEVPNManager isOnDemandEnabled]
  -[NEVPNManager copyCurrentUserStartOptions]
  -[NEVPNManager createL2TPUserPreferencesWithName:]


NEVPNProtocol : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  long long type
 @property  BOOL disconnectOnWake
 @property  int disconnectOnWakeTimeout
 @property  NEKeychainItem *passwordKeychainItem
 @property  NSString *passwordEncryption
 @property  NSData *identityReferenceInternal
 @property  NSData *identityDataInternal
 @property  BOOL identityDataImported
 @property  NSData *identityDataHash
 @property  NEKeychainItem *identityDataPasswordKeychainItem
 @property  NEDNSSettings *DNSSettings
 @property  NSString *extensibleSSOProvider
 @property  BOOL disconnectOnIdle
 @property  int disconnectOnIdleTimeout
 @property  BOOL disconnectOnUserSwitch
 @property  BOOL disconnectOnLogout
 @property  NSString *serverAddress
 @property  NSString *username
 @property  NSData *passwordReference
 @property  NSData *identityReference
 @property  NSData *identityData
 @property  NSString *identityDataPassword
 @property  BOOL disconnectOnSleep
 @property  NEProxySettings *proxySettings
 @property  BOOL includeAllNetworks
 @property  BOOL excludeLocalNetworks
 @property  BOOL enforceRoutes

  // class methods
  +[NEVPNProtocol supportsSecureCoding]

  // instance methods
  -[NEVPNProtocol copyLegacyDictionary]
  -[NEVPNProtocol initFromLegacyDictionary:]
  -[NEVPNProtocol checkValidityAndCollectErrors:]
  -[NEVPNProtocol identifier]
  -[NEVPNProtocol setUsername:]
  -[NEVPNProtocol encodeWithCoder:]
  -[NEVPNProtocol type]
  -[NEVPNProtocol identityData]
  -[NEVPNProtocol .cxx_destruct]
  -[NEVPNProtocol initWithType:]
  -[NEVPNProtocol username]
  -[NEVPNProtocol descriptionWithIndent:options:]
  -[NEVPNProtocol setIdentifier:]
  -[NEVPNProtocol copyWithZone:]
  -[NEVPNProtocol initWithCoder:]
  -[NEVPNProtocol proxySettings]
  -[NEVPNProtocol setIdentityData:]
  -[NEVPNProtocol serverAddress]
  -[NEVPNProtocol setServerAddress:]
  -[NEVPNProtocol identityReference]
  -[NEVPNProtocol setIdentityReference:]
  -[NEVPNProtocol passwordReference]
  -[NEVPNProtocol setPasswordReference:]
  -[NEVPNProtocol DNSSettings]
  -[NEVPNProtocol setDNSSettings:]
  -[NEVPNProtocol setProxySettings:]
  -[NEVPNProtocol setServiceProtocolsInService:]
  -[NEVPNProtocol updateWithServiceProtocolsFromService:]
  -[NEVPNProtocol copyPasswordsFromKeychainInDomain:]
  -[NEVPNProtocol removeKeychainItemsInDomain:keepIdentity:]
  -[NEVPNProtocol syncWithKeychainInDomain:configuration:suffix:]
  -[NEVPNProtocol createInterface]
  -[NEVPNProtocol initWithProtocolIdentifier:]
  -[NEVPNProtocol addDisconnectOptions:]
  -[NEVPNProtocol initDisconnectOptions:]
  -[NEVPNProtocol setIdentityReferenceInternal:]
  -[NEVPNProtocol identityReferenceInternal]
  -[NEVPNProtocol syncWithKeychainInDomainCommon:]
  -[NEVPNProtocol needToUpdateKeychain]
  -[NEVPNProtocol migratePasswordsFromPreferences:]
  -[NEVPNProtocol identityDataPassword]
  -[NEVPNProtocol setIdentityDataPassword:]
  -[NEVPNProtocol disconnectOnSleep]
  -[NEVPNProtocol setDisconnectOnSleep:]
  -[NEVPNProtocol includeAllNetworks]
  -[NEVPNProtocol setIncludeAllNetworks:]
  -[NEVPNProtocol excludeLocalNetworks]
  -[NEVPNProtocol setExcludeLocalNetworks:]
  -[NEVPNProtocol enforceRoutes]
  -[NEVPNProtocol setEnforceRoutes:]
  -[NEVPNProtocol disconnectOnWake]
  -[NEVPNProtocol setDisconnectOnWake:]
  -[NEVPNProtocol disconnectOnWakeTimeout]
  -[NEVPNProtocol setDisconnectOnWakeTimeout:]
  -[NEVPNProtocol passwordKeychainItem]
  -[NEVPNProtocol setPasswordKeychainItem:]
  -[NEVPNProtocol passwordEncryption]
  -[NEVPNProtocol setPasswordEncryption:]
  -[NEVPNProtocol identityDataInternal]
  -[NEVPNProtocol setIdentityDataInternal:]
  -[NEVPNProtocol identityDataImported]
  -[NEVPNProtocol setIdentityDataImported:]
  -[NEVPNProtocol identityDataHash]
  -[NEVPNProtocol setIdentityDataHash:]
  -[NEVPNProtocol identityDataPasswordKeychainItem]
  -[NEVPNProtocol setIdentityDataPasswordKeychainItem:]
  -[NEVPNProtocol extensibleSSOProvider]
  -[NEVPNProtocol setExtensibleSSOProvider:]
  -[NEVPNProtocol disconnectOnIdle]
  -[NEVPNProtocol setDisconnectOnIdle:]
  -[NEVPNProtocol disconnectOnIdleTimeout]
  -[NEVPNProtocol setDisconnectOnIdleTimeout:]
  -[NEVPNProtocol disconnectOnUserSwitch]
  -[NEVPNProtocol setDisconnectOnUserSwitch:]
  -[NEVPNProtocol disconnectOnLogout]
  -[NEVPNProtocol setDisconnectOnLogout:]


NEIKEv2RTT : NSObject
  // instance methods
  -[NEIKEv2RTT init]


NEVPNIKEv2SecurityAssociationParameters : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  long long encryptionAlgorithm
 @property  long long integrityAlgorithm
 @property  long long diffieHellmanGroup
 @property  int lifetimeMinutes

  // class methods
  +[NEVPNIKEv2SecurityAssociationParameters supportsSecureCoding]

  // instance methods
  -[NEVPNIKEv2SecurityAssociationParameters checkValidityAndCollectErrors:]
  -[NEVPNIKEv2SecurityAssociationParameters encodeWithCoder:]
  -[NEVPNIKEv2SecurityAssociationParameters descriptionWithIndent:options:]
  -[NEVPNIKEv2SecurityAssociationParameters copyWithZone:]
  -[NEVPNIKEv2SecurityAssociationParameters init]
  -[NEVPNIKEv2SecurityAssociationParameters initWithCoder:]
  -[NEVPNIKEv2SecurityAssociationParameters encryptionAlgorithm]
  -[NEVPNIKEv2SecurityAssociationParameters setEncryptionAlgorithm:]
  -[NEVPNIKEv2SecurityAssociationParameters integrityAlgorithm]
  -[NEVPNIKEv2SecurityAssociationParameters setIntegrityAlgorithm:]
  -[NEVPNIKEv2SecurityAssociationParameters diffieHellmanGroup]
  -[NEVPNIKEv2SecurityAssociationParameters setDiffieHellmanGroup:]
  -[NEVPNIKEv2SecurityAssociationParameters lifetimeMinutes]
  -[NEVPNIKEv2SecurityAssociationParameters setLifetimeMinutes:]


NEVPNProtocolIKEv2 : NEVPNProtocolIPSec
 @property  NSString *pluginType
 @property  NSArray *IKESecurityAssociationParametersArray
 @property  NSArray *childSecurityAssociationParametersArray
 @property  NSString *providerBundleIdentifier
 @property  int natKeepAliveOffloadEnable
 @property  int natKeepAliveOffloadInterval
 @property  int disableMOBIKERetryOnWake
 @property  BOOL opportunisticPFS
 @property  long long tunnelKind
 @property  BOOL disableInitialContact
 @property  long long deadPeerDetectionRate
 @property  NSString *serverCertificateIssuerCommonName
 @property  NSString *serverCertificateCommonName
 @property  long long certificateType
 @property  BOOL useConfigurationAttributeInternalIPSubnet
 @property  NEVPNIKEv2SecurityAssociationParameters *IKESecurityAssociationParameters
 @property  NEVPNIKEv2SecurityAssociationParameters *childSecurityAssociationParameters
 @property  BOOL disableMOBIKE
 @property  BOOL disableRedirect
 @property  BOOL enablePFS
 @property  BOOL enableRevocationCheck
 @property  BOOL strictRevocationCheck
 @property  long long minimumTLSVersion
 @property  long long maximumTLSVersion
 @property  BOOL enableFallback
 @property  unsigned long mtu

  // class methods
  +[NEVPNProtocolIKEv2 supportsSecureCoding]

  // instance methods
  -[NEVPNProtocolIKEv2 copyLegacyDictionary]
  -[NEVPNProtocolIKEv2 checkValidityAndCollectErrors:]
  -[NEVPNProtocolIKEv2 mtu]
  -[NEVPNProtocolIKEv2 encodeWithCoder:]
  -[NEVPNProtocolIKEv2 pluginType]
  -[NEVPNProtocolIKEv2 .cxx_destruct]
  -[NEVPNProtocolIKEv2 descriptionWithIndent:options:]
  -[NEVPNProtocolIKEv2 copyWithZone:]
  -[NEVPNProtocolIKEv2 init]
  -[NEVPNProtocolIKEv2 initWithCoder:]
  -[NEVPNProtocolIKEv2 setMtu:]
  -[NEVPNProtocolIKEv2 providerBundleIdentifier]
  -[NEVPNProtocolIKEv2 setProviderBundleIdentifier:]
  -[NEVPNProtocolIKEv2 opportunisticPFS]
  -[NEVPNProtocolIKEv2 setOpportunisticPFS:]
  -[NEVPNProtocolIKEv2 deadPeerDetectionRate]
  -[NEVPNProtocolIKEv2 setDeadPeerDetectionRate:]
  -[NEVPNProtocolIKEv2 serverCertificateIssuerCommonName]
  -[NEVPNProtocolIKEv2 setServerCertificateIssuerCommonName:]
  -[NEVPNProtocolIKEv2 serverCertificateCommonName]
  -[NEVPNProtocolIKEv2 setServerCertificateCommonName:]
  -[NEVPNProtocolIKEv2 certificateType]
  -[NEVPNProtocolIKEv2 setCertificateType:]
  -[NEVPNProtocolIKEv2 useConfigurationAttributeInternalIPSubnet]
  -[NEVPNProtocolIKEv2 setUseConfigurationAttributeInternalIPSubnet:]
  -[NEVPNProtocolIKEv2 IKESecurityAssociationParameters]
  -[NEVPNProtocolIKEv2 childSecurityAssociationParameters]
  -[NEVPNProtocolIKEv2 disableMOBIKE]
  -[NEVPNProtocolIKEv2 setDisableMOBIKE:]
  -[NEVPNProtocolIKEv2 disableRedirect]
  -[NEVPNProtocolIKEv2 setDisableRedirect:]
  -[NEVPNProtocolIKEv2 enablePFS]
  -[NEVPNProtocolIKEv2 setEnablePFS:]
  -[NEVPNProtocolIKEv2 enableRevocationCheck]
  -[NEVPNProtocolIKEv2 setEnableRevocationCheck:]
  -[NEVPNProtocolIKEv2 strictRevocationCheck]
  -[NEVPNProtocolIKEv2 setStrictRevocationCheck:]
  -[NEVPNProtocolIKEv2 minimumTLSVersion]
  -[NEVPNProtocolIKEv2 setMinimumTLSVersion:]
  -[NEVPNProtocolIKEv2 maximumTLSVersion]
  -[NEVPNProtocolIKEv2 setMaximumTLSVersion:]
  -[NEVPNProtocolIKEv2 enableFallback]
  -[NEVPNProtocolIKEv2 setEnableFallback:]
  -[NEVPNProtocolIKEv2 IKESecurityAssociationParametersArray]
  -[NEVPNProtocolIKEv2 setIKESecurityAssociationParametersArray:]
  -[NEVPNProtocolIKEv2 childSecurityAssociationParametersArray]
  -[NEVPNProtocolIKEv2 setChildSecurityAssociationParametersArray:]
  -[NEVPNProtocolIKEv2 natKeepAliveOffloadEnable]
  -[NEVPNProtocolIKEv2 setNatKeepAliveOffloadEnable:]
  -[NEVPNProtocolIKEv2 natKeepAliveOffloadInterval]
  -[NEVPNProtocolIKEv2 setNatKeepAliveOffloadInterval:]
  -[NEVPNProtocolIKEv2 disableMOBIKERetryOnWake]
  -[NEVPNProtocolIKEv2 setDisableMOBIKERetryOnWake:]
  -[NEVPNProtocolIKEv2 tunnelKind]
  -[NEVPNProtocolIKEv2 setTunnelKind:]
  -[NEVPNProtocolIKEv2 disableInitialContact]
  -[NEVPNProtocolIKEv2 setDisableInitialContact:]


NEPerApp : NSObject <NEConfigurationValidating, NEPrettyDescription, NSSecureCoding, NSCopying>
 @property  NSArray *appRules
 @property  BOOL noRestriction
 @property  BOOL restrictDomains
 @property  NSArray *excludedDomains

  // class methods
  +[NEPerApp supportsSecureCoding]

  // instance methods
  -[NEPerApp setNoRestriction:]
  -[NEPerApp checkValidityAndCollectErrors:]
  -[NEPerApp appRules]
  -[NEPerApp encodeWithCoder:]
  -[NEPerApp setAppRules:]
  -[NEPerApp setExcludedDomains:]
  -[NEPerApp noRestriction]
  -[NEPerApp .cxx_destruct]
  -[NEPerApp descriptionWithIndent:options:]
  -[NEPerApp setRestrictDomains:]
  -[NEPerApp copyWithZone:]
  -[NEPerApp init]
  -[NEPerApp initWithCoder:]
  -[NEPerApp excludedDomains]
  -[NEPerApp copyAppRuleByID:]
  -[NEPerApp copyAppRuleBySigningIdentifier:]
  -[NEPerApp removeAppRuleByID:]
  -[NEPerApp copyAppRuleIDs]
  -[NEPerApp updateAppRulesForUID:]
  -[NEPerApp restrictDomains]
  -[NEPerApp copyCachedMachOUUIDs]


NEVPNIKEv1ProposalParameters : NSObject <NEConfigurationValidating, NEPrettyDescription, NEConfigurationLegacySupport, NSSecureCoding, NSCopying>
 @property  long long encryptionAlgorithm
 @property  long long integrityAlgorithm
 @property  int diffieHellmanGroup
 @property  int lifetimeSeconds

  // class methods
  +[NEVPNIKEv1ProposalParameters supportsSecureCoding]

  // instance methods
  -[NEVPNIKEv1ProposalParameters copyLegacyDictionary]
  -[NEVPNIKEv1ProposalParameters initFromLegacyDictionary:]
  -[NEVPNIKEv1ProposalParameters checkValidityAndCollectErrors:]
  -[NEVPNIKEv1ProposalParameters encodeWithCoder:]
  -[NEVPNIKEv1ProposalParameters descriptionWithIndent:options:]
  -[NEVPNIKEv1ProposalParameters copyWithZone:]
  -[NEVPNIKEv1ProposalParameters init]
  -[NEVPNIKEv1ProposalParameters initWithCoder:]
  -[NEVPNIKEv1ProposalParameters lifetimeSeconds]
  -[NEVPNIKEv1ProposalParameters setLifetimeSeconds:]
  -[NEVPNIKEv1ProposalParameters encryptionAlgorithm]
  -[NEVPNIKEv1ProposalParameters setEncryptionAlgorithm:]
  -[NEVPNIKEv1ProposalParameters integrityAlgorithm]
  -[NEVPNIKEv1ProposalParameters setIntegrityAlgorithm:]
  -[NEVPNIKEv1ProposalParameters diffieHellmanGroup]
  -[NEVPNIKEv1ProposalParameters setDiffieHellmanGroup:]


NEVPNProtocolIPSec : NEVPNProtocol
 @property  NEKeychainItem *sharedSecretKeychainItem
 @property  NSArray *legacyProposals
 @property  NSArray *legacyExchangeMode
 @property  BOOL extendedAuthPasswordPrompt
 @property  long long authenticationMethod
 @property  BOOL useExtendedAuthentication
 @property  NSData *sharedSecretReference
 @property  NSString *localIdentifier
 @property  NSString *remoteIdentifier

  // class methods
  +[NEVPNProtocolIPSec supportsSecureCoding]

  // instance methods
  -[NEVPNProtocolIPSec copyLegacyDictionary]
  -[NEVPNProtocolIPSec initFromLegacyDictionary:]
  -[NEVPNProtocolIPSec checkValidityAndCollectErrors:]
  -[NEVPNProtocolIPSec localIdentifier]
  -[NEVPNProtocolIPSec encodeWithCoder:]
  -[NEVPNProtocolIPSec .cxx_destruct]
  -[NEVPNProtocolIPSec initWithType:]
  -[NEVPNProtocolIPSec descriptionWithIndent:options:]
  -[NEVPNProtocolIPSec copyWithZone:]
  -[NEVPNProtocolIPSec remoteIdentifier]
  -[NEVPNProtocolIPSec init]
  -[NEVPNProtocolIPSec initWithCoder:]
  -[NEVPNProtocolIPSec authenticationMethod]
  -[NEVPNProtocolIPSec setLocalIdentifier:]
  -[NEVPNProtocolIPSec setRemoteIdentifier:]
  -[NEVPNProtocolIPSec sharedSecretReference]
  -[NEVPNProtocolIPSec setSharedSecretReference:]
  -[NEVPNProtocolIPSec removeKeychainItemsInDomain:keepIdentity:]
  -[NEVPNProtocolIPSec syncWithKeychainInDomain:configuration:suffix:]
  -[NEVPNProtocolIPSec createInterface]
  -[NEVPNProtocolIPSec setAuthenticationMethod:]
  -[NEVPNProtocolIPSec needToUpdateKeychain]
  -[NEVPNProtocolIPSec migratePasswordsFromPreferences:]
  -[NEVPNProtocolIPSec useExtendedAuthentication]
  -[NEVPNProtocolIPSec setUseExtendedAuthentication:]
  -[NEVPNProtocolIPSec sharedSecretKeychainItem]
  -[NEVPNProtocolIPSec setSharedSecretKeychainItem:]
  -[NEVPNProtocolIPSec legacyProposals]
  -[NEVPNProtocolIPSec setLegacyProposals:]
  -[NEVPNProtocolIPSec legacyExchangeMode]
  -[NEVPNProtocolIPSec setLegacyExchangeMode:]
  -[NEVPNProtocolIPSec extendedAuthPasswordPrompt]
  -[NEVPNProtocolIPSec setExtendedAuthPasswordPrompt:]


NEVPNProtocolL2TP : NEVPNProtocolPPP
 @property  long long machineAuthenticationMethod
 @property  NSData *sharedSecretReference
 @property  NEKeychainItem *sharedSecretKeychainItem
 @property  NSData *machineIdentityReference
 @property  NSString *localIdentifier
 @property  NSArray *userPreferences

  // class methods
  +[NEVPNProtocolL2TP supportsSecureCoding]

  // instance methods
  -[NEVPNProtocolL2TP checkValidityAndCollectErrors:]
  -[NEVPNProtocolL2TP localIdentifier]
  -[NEVPNProtocolL2TP setUserPreferences:]
  -[NEVPNProtocolL2TP encodeWithCoder:]
  -[NEVPNProtocolL2TP userPreferences]
  -[NEVPNProtocolL2TP .cxx_destruct]
  -[NEVPNProtocolL2TP descriptionWithIndent:options:]
  -[NEVPNProtocolL2TP copyWithZone:]
  -[NEVPNProtocolL2TP init]
  -[NEVPNProtocolL2TP initWithCoder:]
  -[NEVPNProtocolL2TP setLocalIdentifier:]
  -[NEVPNProtocolL2TP sharedSecretReference]
  -[NEVPNProtocolL2TP setSharedSecretReference:]
  -[NEVPNProtocolL2TP setServiceProtocolsInService:]
  -[NEVPNProtocolL2TP updateWithServiceProtocolsFromService:]
  -[NEVPNProtocolL2TP removeKeychainItemsInDomain:keepIdentity:]
  -[NEVPNProtocolL2TP syncWithKeychainInDomain:configuration:suffix:]
  -[NEVPNProtocolL2TP createInterface]
  -[NEVPNProtocolL2TP needToUpdateKeychain]
  -[NEVPNProtocolL2TP migratePasswordsFromPreferences:]
  -[NEVPNProtocolL2TP sharedSecretKeychainItem]
  -[NEVPNProtocolL2TP setSharedSecretKeychainItem:]
  -[NEVPNProtocolL2TP setMachineIdentityReference:]
  -[NEVPNProtocolL2TP machineIdentityReference]
  -[NEVPNProtocolL2TP copyLegacyIPSecDictionary]
  -[NEVPNProtocolL2TP setIPSecSettingsFromLegacyDictionary:]
  -[NEVPNProtocolL2TP machineAuthenticationMethod]
  -[NEVPNProtocolL2TP setMachineAuthenticationMethod:]


NEVPNProtocolPlugin : NEVPNProtocol
 @property  NSString *pluginType

  // instance methods
  -[NEVPNProtocolPlugin pluginType]
  -[NEVPNProtocolPlugin .cxx_destruct]


NEFilterPacketContext : NSObject
  // instance methods
  -[NEFilterPacketContext .cxx_destruct]


NEFilterPacketProvider : NEFilterProvider
 @property  @? packetHandler

  // instance methods
  -[NEFilterPacketProvider .cxx_destruct]
  -[NEFilterPacketProvider delayCurrentPacket:]
  -[NEFilterPacketProvider allowPacket:]
  -[NEFilterPacketProvider packetHandler]
  -[NEFilterPacketProvider setPacketHandler:]


NEVPNProtocolPPP : NEVPNProtocol
 @property  long long authenticationMethod
 @property  BOOL verboseLoggingEnabled
 @property  NEIPv4Settings *IPv4Settings
 @property  NEIPv6Settings *IPv6Settings

  // class methods
  +[NEVPNProtocolPPP supportsSecureCoding]

  // instance methods
  -[NEVPNProtocolPPP copyLegacyDictionary]
  -[NEVPNProtocolPPP initFromLegacyDictionary:]
  -[NEVPNProtocolPPP checkValidityAndCollectErrors:]
  -[NEVPNProtocolPPP encodeWithCoder:]
  -[NEVPNProtocolPPP .cxx_destruct]
  -[NEVPNProtocolPPP initWithType:]
  -[NEVPNProtocolPPP descriptionWithIndent:options:]
  -[NEVPNProtocolPPP copyWithZone:]
  -[NEVPNProtocolPPP initWithCoder:]
  -[NEVPNProtocolPPP authenticationMethod]
  -[NEVPNProtocolPPP IPv4Settings]
  -[NEVPNProtocolPPP setIPv4Settings:]
  -[NEVPNProtocolPPP IPv6Settings]
  -[NEVPNProtocolPPP setIPv6Settings:]
  -[NEVPNProtocolPPP setServiceProtocolsInService:]
  -[NEVPNProtocolPPP updateWithServiceProtocolsFromService:]
  -[NEVPNProtocolPPP setAuthenticationMethod:]
  -[NEVPNProtocolPPP copyLegacyDictionaryComplete:]
  -[NEVPNProtocolPPP verboseLoggingEnabled]
  -[NEVPNProtocolPPP setVerboseLoggingEnabled:]


NEVPNProtocolPPTP : NEVPNProtocolPPP
 @property  long long encryptionLevel

  // class methods
  +[NEVPNProtocolPPTP supportsSecureCoding]

  // instance methods
  -[NEVPNProtocolPPTP copyLegacyDictionary]
  -[NEVPNProtocolPPTP initFromLegacyDictionary:]
  -[NEVPNProtocolPPTP encodeWithCoder:]
  -[NEVPNProtocolPPTP descriptionWithIndent:options:]
  -[NEVPNProtocolPPTP copyWithZone:]
  -[NEVPNProtocolPPTP init]
  -[NEVPNProtocolPPTP initWithCoder:]
  -[NEVPNProtocolPPTP createInterface]
  -[NEVPNProtocolPPTP encryptionLevel]
  -[NEVPNProtocolPPTP setEncryptionLevel:]


NWTLSParameters : NSObject
 @property  NSData *TLSSessionID
 @property  NSSet *SSLCipherSuites
 @property  unsigned long minimumSSLProtocolVersion
 @property  unsigned long maximumSSLProtocolVersion

  // instance methods
  -[NWTLSParameters minimumSSLProtocolVersion]
  -[NWTLSParameters setMaximumSSLProtocolVersion:]
  -[NWTLSParameters .cxx_destruct]
  -[NWTLSParameters setMinimumSSLProtocolVersion:]
  -[NWTLSParameters SSLCipherSuites]
  -[NWTLSParameters TLSSessionID]
  -[NWTLSParameters setTLSSessionID:]
  -[NWTLSParameters setSSLCipherSuites:]
  -[NWTLSParameters maximumSSLProtocolVersion]


NSMutableURLRequest(NEHotspotHelper)
	// instance methods
	-[NSMutableURLRequest(NEHotspotHelper) bindToHotspotHelperCommand:]

NWAddressEndpoint(AddressType)
	// instance methods
	-[NWAddressEndpoint(AddressType) isWildcard]
	-[NWAddressEndpoint(AddressType) isLoopback]
	-[NWAddressEndpoint(AddressType) isLinkLocal]

<DEREK BUG Categories!>(NEPrettyPrint)
	// instance methods
	-[<DEREK BUG Categories!>(NEPrettyPrint) appendPrettyObject:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NEPrettyPrint) appendPrettyBOOL:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NEPrettyPrint) appendPrettyInt:withName:andIndent:options:]
	-[<DEREK BUG Categories!>(NEPrettyPrint) appendToStringAtColumnWithContent:column:content:appendAsNewLine:addNewLine:]

01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleProxy 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSPlugInKitProxy 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCoder 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionContext 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCredential 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCredentialStorage 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLProtectionSpace 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLResponse 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListenerEndpoint 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWAddressEndpoint 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWEndpoint 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWHostEndpoint 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWInterface 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWNetworkAgentRegistration 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWParameters 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWPath 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWResolver 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWTCPConnection 
01 00 0100 /System/Library/Frameworks/Network.framework/Network: NWUDPSession 
01 00 0b40 /System/Library/PrivateFrameworks/SystemWake.framework/SystemWake: SWPreventSystemSleepAssertion 
01 00 0b40 /System/Library/PrivateFrameworks/SystemWake.framework/SystemWake: SWWakingTimer 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: _NSExtensionContextVendor 
