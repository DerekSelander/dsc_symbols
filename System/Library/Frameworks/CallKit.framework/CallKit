|| __DATA.__data _CXCallDirectoryStoreExtensionsChangedNotification
|| __DATA.__objc_data _OBJC_CLASS_$_CXAbstractProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXAccount
|| __DATA.__objc_data _OBJC_CLASS_$_CXAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXAnswerCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallController
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallControllerHost
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryExtension
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryExtensionContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryExtensionManager
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryIdentificationEntry
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryLabeledPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryMutableLabeledPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryMutablePhoneNumberEntryData
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectorySanitizer
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryStoreExtension
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallDirectoryStoreIdentificationEntry
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallFailureContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallSource
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallSourceManager
|| __DATA.__objc_data _OBJC_CLASS_$_CXCallUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_CXEnableVideoCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXEndCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXExtensionCallSource
|| __DATA.__objc_data _OBJC_CLASS_$_CXExtensionProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXHandle
|| __DATA.__objc_data _OBJC_CLASS_$_CXHandoffContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXInProcessCallSource
|| __DATA.__objc_data _OBJC_CLASS_$_CXInProcessProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXJoinCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXJoinCallActivity
|| __DATA.__objc_data _OBJC_CLASS_$_CXJoinCallActivitySession
|| __DATA.__objc_data _OBJC_CLASS_$_CXLabeledHandle
|| __DATA.__objc_data _OBJC_CLASS_$_CXNetworkExtensionMessageController
|| __DATA.__objc_data _OBJC_CLASS_$_CXNetworkExtensionMessageControllerHost
|| __DATA.__objc_data _OBJC_CLASS_$_CXNotificationServiceExtensionVoIPXPCClient
|| __DATA.__objc_data _OBJC_CLASS_$_CXNotificationServiceExtensionVoIPXPCHost
|| __DATA.__objc_data _OBJC_CLASS_$_CXPlayDTMFCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXProviderConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_CXProviderExtensionContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXProviderExtensionHostContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXProviderExtensionVendorContext
|| __DATA.__objc_data _OBJC_CLASS_$_CXPullCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXRemoveVoicemailAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSandboxExtendedURL
|| __DATA.__objc_data _OBJC_CLASS_$_CXScreenShareAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_CXSendMMIOrUSSDCodeAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSenderIdentity
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetGroupCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetHeldCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetMutedCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetPlayedVoicemailAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetRelayingCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetScreenShareAttributesCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetSendingVideoCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetSharingScreenCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetTTYTypeCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetTrashedVoicemailAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetVideoPresentationSizeCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXSetVideoPresentationStateCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXStartCallAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXTransactionGroup
|| __DATA.__objc_data _OBJC_CLASS_$_CXTransactionManager
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemail
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailAction
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailController
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailControllerHost
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailObserver
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailSource
|| __DATA.__objc_data _OBJC_CLASS_$_CXVoicemailUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_CXXPCCallSource
|| __DATA.__objc_data _OBJC_CLASS_$_CXXPCProvider
|| __DATA.__objc_data _OBJC_CLASS_$_CXXPCVoicemailSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXAbstractProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXAccount
|| __DATA.__objc_data _OBJC_METACLASS_$_CXAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXAnswerCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallController
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallControllerHost
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryExtensionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryExtensionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryIdentificationEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryLabeledPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryMutableLabeledPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryMutablePhoneNumberEntryData
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryPhoneNumberEntryData
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectorySanitizer
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryStoreExtension
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallDirectoryStoreIdentificationEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallFailureContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallSourceManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CXCallUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_CXEnableVideoCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXEndCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXExtensionCallSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXExtensionProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXHandle
|| __DATA.__objc_data _OBJC_METACLASS_$_CXHandoffContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXInProcessCallSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXInProcessProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXJoinCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXJoinCallActivity
|| __DATA.__objc_data _OBJC_METACLASS_$_CXJoinCallActivitySession
|| __DATA.__objc_data _OBJC_METACLASS_$_CXLabeledHandle
|| __DATA.__objc_data _OBJC_METACLASS_$_CXNetworkExtensionMessageController
|| __DATA.__objc_data _OBJC_METACLASS_$_CXNetworkExtensionMessageControllerHost
|| __DATA.__objc_data _OBJC_METACLASS_$_CXNotificationServiceExtensionVoIPXPCClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CXNotificationServiceExtensionVoIPXPCHost
|| __DATA.__objc_data _OBJC_METACLASS_$_CXPlayDTMFCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXProviderConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_CXProviderExtensionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXProviderExtensionHostContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXProviderExtensionVendorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_CXPullCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXRemoveVoicemailAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSandboxExtendedURL
|| __DATA.__objc_data _OBJC_METACLASS_$_CXScreenShareAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSendMMIOrUSSDCodeAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSenderIdentity
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetGroupCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetHeldCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetMutedCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetPlayedVoicemailAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetRelayingCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetScreenShareAttributesCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetSendingVideoCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetSharingScreenCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetTTYTypeCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetTrashedVoicemailAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetVideoPresentationSizeCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXSetVideoPresentationStateCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXStartCallAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXTransactionGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_CXTransactionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemail
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailAction
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailController
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailControllerHost
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXVoicemailUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_CXXPCCallSource
|| __DATA.__objc_data _OBJC_METACLASS_$_CXXPCProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_CXXPCVoicemailSource
|| __DATA_CONST.__const _CXCallDirectoryDefaultHostBundleIdentifier
|| __DATA_CONST.__const _CXCallDirectoryDefaultHostServiceName
|| __DATA_CONST.__const _CXCallDirectoryMaintenanceHostBundleIdentifier
|| __DATA_CONST.__const _CXCallDirectoryMaintenanceHostServiceName
|| __DATA_CONST.__const _CXCallDirectoryManagerIdentificationEntriesChangedNotification
|| __DATA_CONST.__const _CXErrorDomain
|| __DATA_CONST.__const _CXErrorDomainCallDirectoryManager
|| __DATA_CONST.__const _CXErrorDomainCallDirectoryStore
|| __DATA_CONST.__const _CXErrorDomainIncomingCall
|| __DATA_CONST.__const _CXErrorDomainNotificationServiceExtension
|| __DATA_CONST.__const _CXErrorDomainRequestTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCall
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryHost
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryNSExtensionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryStoreMigrationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallDirectoryStoreMigrator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXCallObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CXTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCall
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryHost
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryNSExtensionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryStoreMigrationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallDirectoryStoreMigrator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXCallObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CXTransaction
|| __TEXT.__const _CXCallDirectoryStoreMigratorLatestSchemaVersion
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AssertionServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBundleIdentifierKey
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreServices: _OBJC_CLASS_$_LSApplicationExtensionRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSPlugInKitProxy
__ Foundation: _NSExtensionContainingAppName
__ Foundation: _NSExtensionIdentifierName
__ Foundation: _NSExtensionPointName
__ Foundation: _NSFileType
__ Foundation: _NSFileTypeSymbolicLink
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionContext
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSExtensionContext
__ PushKit: _PKPushIncomingCallReportedNotification
__ Security: _SecTaskCopySigningIdentifier
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskCreateWithAuditToken
__ TCC: _TCCAccessCheckAuditToken
__ TCC: _kTCCAccessCheckOptionPrompt
__ TCC: _kTCCServiceBluetoothAlways
__ libSystem.B.dylib: _APP_SANDBOX_READ
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_barrier
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_initially_inactive
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _mach_error_string
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_lock_with_options
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _proc_name
__ libSystem.B.dylib: _sandbox_check_by_audit_token
__ libSystem.B.dylib: _sandbox_extension_consume
__ libSystem.B.dylib: _sandbox_extension_issue_file
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strtoll
__ libSystem.B.dylib: _task_info
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libsqlite3.dylib: _sqlite3_bind_blob
__ libsqlite3.dylib: _sqlite3_bind_int64
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_busy_timeout
__ libsqlite3.dylib: _sqlite3_changes
__ libsqlite3.dylib: _sqlite3_clear_bindings
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_count
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int64
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_extended_errcode
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_sql
__ libsqlite3.dylib: _sqlite3_step
CXCallDirectoryNSExtensionManager : NSObject <LSApplicationWorkspaceObserverProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallDirectoryNSExtensionManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  id extensionMatchingContext
 @property  NSDictionary *extensions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallDirectoryNSExtensionManager baseExtensionMatchingAttributes]

  // instance methods
  -[CXCallDirectoryNSExtensionManager setDelegate:queue:]
  -[CXCallDirectoryNSExtensionManager delegateQueue]
  -[CXCallDirectoryNSExtensionManager setDelegateQueue:]
  -[CXCallDirectoryNSExtensionManager .cxx_destruct]
  -[CXCallDirectoryNSExtensionManager setDelegate:]
  -[CXCallDirectoryNSExtensionManager init]
  -[CXCallDirectoryNSExtensionManager setQueue:]
  -[CXCallDirectoryNSExtensionManager setExtensions:]
  -[CXCallDirectoryNSExtensionManager extensions]
  -[CXCallDirectoryNSExtensionManager extensionMatchingContext]
  -[CXCallDirectoryNSExtensionManager delegate]
  -[CXCallDirectoryNSExtensionManager beginMatchingExtensions]
  -[CXCallDirectoryNSExtensionManager queue]
  -[CXCallDirectoryNSExtensionManager setExtensionMatchingContext:]
  -[CXCallDirectoryNSExtensionManager dealloc]
  -[CXCallDirectoryNSExtensionManager pluginsDidInstall:]
  -[CXCallDirectoryNSExtensionManager _beginMatchingExtensionsIfNecessary]
  -[CXCallDirectoryNSExtensionManager _extensionForIdentifier:containingAppBundleURL:completion:]
  -[CXCallDirectoryNSExtensionManager extensionsWithCompletionHandler:]
  -[CXCallDirectoryNSExtensionManager extensionWithIdentifier:inContainingAppWithProcessIdentifier:completion:]


CXHandle : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  NSString *value

  // class methods
  +[CXHandle supportsSecureCoding]
  +[CXHandle stringForType:]

  // instance methods
  -[CXHandle initWithType:]
  -[CXHandle initWithCoder:]
  -[CXHandle isEqualToHandle:]
  -[CXHandle initWithType:value:]
  -[CXHandle setType:]
  -[CXHandle .cxx_destruct]
  -[CXHandle init]
  -[CXHandle isEqual:]
  -[CXHandle setValue:]
  -[CXHandle value]
  -[CXHandle type]
  -[CXHandle copyWithZone:]
  -[CXHandle encodeWithCoder:]


CXSetTrashedVoicemailAction : CXVoicemailAction
 @property  BOOL trashed

  // class methods
  +[CXSetTrashedVoicemailAction supportsSecureCoding]

  // instance methods
  -[CXSetTrashedVoicemailAction initWithCoder:]
  -[CXSetTrashedVoicemailAction setTrashed:]
  -[CXSetTrashedVoicemailAction customDescription]
  -[CXSetTrashedVoicemailAction isTrashed]
  -[CXSetTrashedVoicemailAction encodeWithCoder:]
  -[CXSetTrashedVoicemailAction updateSanitizedCopy:withZone:]
  -[CXSetTrashedVoicemailAction initWithVoicemailUUID:trashed:]


CXInProcessCallSource : CXCallSource
 @property  CXInProcessProvider *provider

  // instance methods
  -[CXInProcessCallSource setProvider:]
  -[CXInProcessCallSource localizedName]
  -[CXInProcessCallSource auditToken]
  -[CXInProcessCallSource bundleIdentifier]
  -[CXInProcessCallSource .cxx_destruct]
  -[CXInProcessCallSource bundleURL]
  -[CXInProcessCallSource isPermittedToUsePrivateAPI]
  -[CXInProcessCallSource processIdentifier]
  -[CXInProcessCallSource vendorProtocolDelegate]
  -[CXInProcessCallSource provider]
  -[CXInProcessCallSource isPermittedToUsePublicAPI]
  -[CXInProcessCallSource initWithIdentifier:bundleIdentifier:]


CXRemoveVoicemailAction : CXVoicemailAction
  // class methods
  +[CXRemoveVoicemailAction supportsSecureCoding]


CXPullCallAction : CXCallAction
 @property  NSDate *dateConnected
 @property  CXHandoffContext *handoffContext

  // class methods
  +[CXPullCallAction supportsSecureCoding]
  +[CXPullCallAction timeout]

  // instance methods
  -[CXPullCallAction initWithCoder:]
  -[CXPullCallAction fulfill]
  -[CXPullCallAction .cxx_destruct]
  -[CXPullCallAction customDescription]
  -[CXPullCallAction encodeWithCoder:]
  -[CXPullCallAction sanitizedCopyWithZone:]
  -[CXPullCallAction dateConnected]
  -[CXPullCallAction setDateConnected:]
  -[CXPullCallAction handoffContext]
  -[CXPullCallAction fulfillWithDateConnected:]
  -[CXPullCallAction updateAsFulfilledWithDateConnected:]
  -[CXPullCallAction updateCopy:withZone:]
  -[CXPullCallAction setHandoffContext:]


CXAction : NSObject <CXCopying, NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  long long state
 @property  long long failureReason
 @property  NSMutableString *customDescription
 @property  NSDate *commitDate
 @property  <CXActionDelegate> *delegate
 @property  BOOL complete
 @property  NSDate *timeoutDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXAction supportsSecureCoding]
  +[CXAction timeout]

  // instance methods
  -[CXAction setFailureReason:]
  -[CXAction UUID]
  -[CXAction fail]
  -[CXAction initWithCoder:]
  -[CXAction fulfill]
  -[CXAction .cxx_destruct]
  -[CXAction setDelegate:]
  -[CXAction setState:]
  -[CXAction init]
  -[CXAction customDescription]
  -[CXAction state]
  -[CXAction delegate]
  -[CXAction isComplete]
  -[CXAction copyWithZone:]
  -[CXAction sanitizedCopy]
  -[CXAction failureReason]
  -[CXAction encodeWithCoder:]
  -[CXAction setUUID:]
  -[CXAction sanitizedCopyWithZone:]
  -[CXAction updateSanitizedCopy:withZone:]
  -[CXAction updateAsFulfilled]
  -[CXAction updateCopy:withZone:]
  -[CXAction commitDate]
  -[CXAction updateAsFailedWithReason:]
  -[CXAction setCommitDate:]
  -[CXAction timeoutDate]


CXAnswerCallAction : CXCallAction
 @property  NSDate *dateConnected
 @property  BOOL downgradeToAudio
 @property  BOOL pauseVideoToStart

  // class methods
  +[CXAnswerCallAction supportsSecureCoding]
  +[CXAnswerCallAction timeout]

  // instance methods
  -[CXAnswerCallAction initWithCoder:]
  -[CXAnswerCallAction fulfill]
  -[CXAnswerCallAction .cxx_destruct]
  -[CXAnswerCallAction localLandscapeAspectRatio]
  -[CXAnswerCallAction localPortraitAspectRatio]
  -[CXAnswerCallAction setLocalPortraitAspectRatio:]
  -[CXAnswerCallAction setLocalLandscapeAspectRatio:]
  -[CXAnswerCallAction customDescription]
  -[CXAnswerCallAction encodeWithCoder:]
  -[CXAnswerCallAction dateConnected]
  -[CXAnswerCallAction pauseVideoToStart]
  -[CXAnswerCallAction downgradeToAudio]
  -[CXAnswerCallAction setPauseVideoToStart:]
  -[CXAnswerCallAction setDowngradeToAudio:]
  -[CXAnswerCallAction setDateConnected:]
  -[CXAnswerCallAction updateSanitizedCopy:withZone:]
  -[CXAnswerCallAction fulfillWithDateConnected:]
  -[CXAnswerCallAction updateAsFulfilledWithDateConnected:]
  -[CXAnswerCallAction updateCopy:withZone:]


CXCallDirectoryHost : NSObject <CXCallDirectoryManagerDefaultHostProtocol, CXCallDirectoryManagerMaintenanceHostProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallDirectoryHostDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallDirectoryHost setDelegate:queue:]
  -[CXCallDirectoryHost delegateQueue]
  -[CXCallDirectoryHost setDelegateQueue:]
  -[CXCallDirectoryHost _nsExtensionWithIdentifier:completion:]
  -[CXCallDirectoryHost .cxx_destruct]
  -[CXCallDirectoryHost launchCallDirectorySettingsWithReply:]
  -[CXCallDirectoryHost getEnabledStatusForExtensionWithIdentifier:reply:]
  -[CXCallDirectoryHost setDelegate:]
  -[CXCallDirectoryHost init]
  -[CXCallDirectoryHost setQueue:]
  -[CXCallDirectoryHost reloadExtensionWithIdentifier:reply:]
  -[CXCallDirectoryHost synchronizeExtensionsWithReply:]
  -[CXCallDirectoryHost compactStoreWithReply:]
  -[CXCallDirectoryHost setPrioritizedExtensionIdentifiers:reply:]
  -[CXCallDirectoryHost setEnabled:forExtensionWithIdentifier:reply:]
  -[CXCallDirectoryHost _connectionContainsCallDirectoryHostEntitlementCapability:]
  -[CXCallDirectoryHost getExtensionsWithReply:]
  -[CXCallDirectoryHost delegate]
  -[CXCallDirectoryHost queue]
  -[CXCallDirectoryHost prepareStoreIfNecessary]
  -[CXCallDirectoryHost performDelegateCallback:]
  -[CXCallDirectoryHost firstIdentificationEntriesForEnabledExtensionsWithPhoneNumbers:reply:]


CXSetSharingScreenCallAction : CXCallAction
 @property  BOOL sharingScreen
 @property  CXScreenShareAttributes *attributes

  // class methods
  +[CXSetSharingScreenCallAction supportsSecureCoding]

  // instance methods
  -[CXSetSharingScreenCallAction initWithCoder:]
  -[CXSetSharingScreenCallAction .cxx_destruct]
  -[CXSetSharingScreenCallAction customDescription]
  -[CXSetSharingScreenCallAction setAttributes:]
  -[CXSetSharingScreenCallAction attributes]
  -[CXSetSharingScreenCallAction encodeWithCoder:]
  -[CXSetSharingScreenCallAction isSharingScreen]
  -[CXSetSharingScreenCallAction setSharingScreen:]
  -[CXSetSharingScreenCallAction updateSanitizedCopy:withZone:]
  -[CXSetSharingScreenCallAction initWithCallUUID:sharingScreen:]


CXJoinCallActivitySession : NSObject <NSCopying, NSSecureCoding>
 @property  NSDate *timestamp
 @property  NSUUID *UUID
 @property  CXJoinCallActivity *activity
 @property  unsigned long state

  // class methods
  +[CXJoinCallActivitySession supportsSecureCoding]

  // instance methods
  -[CXJoinCallActivitySession setActivity:]
  -[CXJoinCallActivitySession UUID]
  -[CXJoinCallActivitySession initWithCoder:]
  -[CXJoinCallActivitySession .cxx_destruct]
  -[CXJoinCallActivitySession setState:]
  -[CXJoinCallActivitySession isEqual:]
  -[CXJoinCallActivitySession activity]
  -[CXJoinCallActivitySession state]
  -[CXJoinCallActivitySession initWithActivity:]
  -[CXJoinCallActivitySession timestamp]
  -[CXJoinCallActivitySession copyWithZone:]
  -[CXJoinCallActivitySession setTimestamp:]
  -[CXJoinCallActivitySession encodeWithCoder:]
  -[CXJoinCallActivitySession setUUID:]
  -[CXJoinCallActivitySession isEqualToJoinCallActivitySession:]


CXSenderIdentity : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  CXAccount *account
 @property  CXHandle *handle
 @property  NSString *localizedName
 @property  NSString *localizedShortName

  // class methods
  +[CXSenderIdentity supportsSecureCoding]
  +[CXSenderIdentity unarchivedObjectClasses]
  +[CXSenderIdentity unarchivedObjectFromData:error:]

  // instance methods
  -[CXSenderIdentity localizedShortName]
  -[CXSenderIdentity localizedName]
  -[CXSenderIdentity UUID]
  -[CXSenderIdentity initWithCoder:]
  -[CXSenderIdentity account]
  -[CXSenderIdentity archivedDataWithError:]
  -[CXSenderIdentity .cxx_destruct]
  -[CXSenderIdentity isEqual:]
  -[CXSenderIdentity handle]
  -[CXSenderIdentity copyWithZone:]
  -[CXSenderIdentity encodeWithCoder:]
  -[CXSenderIdentity isEqualToSenderIdentity:]
  -[CXSenderIdentity initWithUUID:account:]
  -[CXSenderIdentity initWithUUID:handle:localizedName:]


CXSendMMIOrUSSDCodeAction : CXAction
 @property  NSString *code
 @property  long long ttyType
 @property  NSUUID *senderIdentityUUID

  // class methods
  +[CXSendMMIOrUSSDCodeAction supportsSecureCoding]

  // instance methods
  -[CXSendMMIOrUSSDCodeAction setCode:]
  -[CXSendMMIOrUSSDCodeAction initWithCoder:]
  -[CXSendMMIOrUSSDCodeAction .cxx_destruct]
  -[CXSendMMIOrUSSDCodeAction ttyType]
  -[CXSendMMIOrUSSDCodeAction code]
  -[CXSendMMIOrUSSDCodeAction customDescription]
  -[CXSendMMIOrUSSDCodeAction setTtyType:]
  -[CXSendMMIOrUSSDCodeAction encodeWithCoder:]
  -[CXSendMMIOrUSSDCodeAction sanitizedCopyWithZone:]
  -[CXSendMMIOrUSSDCodeAction senderIdentityUUID]
  -[CXSendMMIOrUSSDCodeAction updateCopy:withZone:]
  -[CXSendMMIOrUSSDCodeAction setSenderIdentityUUID:]


CXSetHeldCallAction : CXCallAction
 @property  BOOL onHold

  // class methods
  +[CXSetHeldCallAction supportsSecureCoding]

  // instance methods
  -[CXSetHeldCallAction initWithCoder:]
  -[CXSetHeldCallAction customDescription]
  -[CXSetHeldCallAction isOnHold]
  -[CXSetHeldCallAction encodeWithCoder:]
  -[CXSetHeldCallAction setOnHold:]
  -[CXSetHeldCallAction updateSanitizedCopy:withZone:]
  -[CXSetHeldCallAction initWithCallUUID:onHold:]


CXProviderExtensionHostContext : CXProviderExtensionContext <CXProviderVendorProtocol, CXProviderHostProtocol>
 @property  <CXProviderHostProtocol> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXProviderExtensionHostContext .cxx_destruct]
  -[CXProviderExtensionHostContext remoteObjectProxyWithErrorHandler:]
  -[CXProviderExtensionHostContext remoteObjectProxy]
  -[CXProviderExtensionHostContext setDelegate:]
  -[CXProviderExtensionHostContext delegate]
  -[CXProviderExtensionHostContext actionCompleted:]
  -[CXProviderExtensionHostContext commitTransaction:]
  -[CXProviderExtensionHostContext handleActionTimeout:]
  -[CXProviderExtensionHostContext handleAudioSessionActivationStateChangedTo:]
  -[CXProviderExtensionHostContext registerWithConfiguration:]
  -[CXProviderExtensionHostContext reportNewIncomingCallWithUUID:update:reply:]
  -[CXProviderExtensionHostContext reportCallWithUUID:updated:]
  -[CXProviderExtensionHostContext reportOutgoingCallWithUUID:sentInvitationAtDate:]
  -[CXProviderExtensionHostContext reportOutgoingCallWithUUID:startedConnectingAtDate:]
  -[CXProviderExtensionHostContext reportOutgoingCallWithUUID:connectedAtDate:]
  -[CXProviderExtensionHostContext reportCallWithUUID:endedAtDate:privateReason:failureContext:]
  -[CXProviderExtensionHostContext reportAudioFinishedForCallWithUUID:]
  -[CXProviderExtensionHostContext reportCallWithUUID:changedFrequencyData:forDirection:]
  -[CXProviderExtensionHostContext reportCallWithUUID:changedMeterLevel:forDirection:]
  -[CXProviderExtensionHostContext reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:]
  -[CXProviderExtensionHostContext requestTransaction:reply:]


CXCallControllerHost : NSObject <NSXPCListenerDelegate, CXCallControllerHostConnectionDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallControllerHostDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSXPCListener *xpcListener
 @property  NSMutableDictionary *callUUIDToCallMap
 @property  NSMutableDictionary *callUUIDToPublicCallUUIDMap
 @property  NSMutableSet *connections
 @property  int clientsShouldConnectToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallControllerHost xpcListener]
  -[CXCallControllerHost setConnections:]
  -[CXCallControllerHost delegateQueue]
  -[CXCallControllerHost setDelegateQueue:]
  -[CXCallControllerHost clientsShouldConnectToken]
  -[CXCallControllerHost .cxx_destruct]
  -[CXCallControllerHost _performDelegateCallback:]
  -[CXCallControllerHost addOrUpdateCall:]
  -[CXCallControllerHost removeCall:]
  -[CXCallControllerHost setDelegate:]
  -[CXCallControllerHost init]
  -[CXCallControllerHost setQueue:]
  -[CXCallControllerHost connections]
  -[CXCallControllerHost delegate]
  -[CXCallControllerHost queue]
  -[CXCallControllerHost setXpcListener:]
  -[CXCallControllerHost dealloc]
  -[CXCallControllerHost listener:shouldAcceptNewConnection:]
  -[CXCallControllerHost callUUIDToCallMap]
  -[CXCallControllerHost callUUIDToPublicCallUUIDMap]
  -[CXCallControllerHost _sanitizedCallFromCall:forCallControllerHostConnection:]
  -[CXCallControllerHost _callsForCallControllerHostConnection:]
  -[CXCallControllerHost callControllerHostConnectionInvalidated:]
  -[CXCallControllerHost callControllerHostConnection:requestCalls:]
  -[CXCallControllerHost callControllerHostConnection:requestTransaction:completion:]
  -[CXCallControllerHost initWithCalls:delegate:queue:]
  -[CXCallControllerHost setCallUUIDToCallMap:]
  -[CXCallControllerHost setCallUUIDToPublicCallUUIDMap:]


CXVoicemailUpdate : NSObject <CXCopying, NSSecureCoding, NSCopying>
 @property  {CXVoicemailUpdateHasSet=b1b1b1b1b1} hasSet
 @property  NSUUID *UUID
 @property  NSUUID *voicemailUUID
 @property  CXHandle *sender
 @property  NSDate *dateReceived
 @property  NSURL *audioFileURL
 @property  BOOL played
 @property  BOOL trashed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXVoicemailUpdate supportsSecureCoding]

  // instance methods
  -[CXVoicemailUpdate setSender:]
  -[CXVoicemailUpdate UUID]
  -[CXVoicemailUpdate initWithCoder:]
  -[CXVoicemailUpdate isPlayed]
  -[CXVoicemailUpdate .cxx_destruct]
  -[CXVoicemailUpdate sender]
  -[CXVoicemailUpdate hasSet]
  -[CXVoicemailUpdate setAudioFileURL:]
  -[CXVoicemailUpdate setTrashed:]
  -[CXVoicemailUpdate audioFileURL]
  -[CXVoicemailUpdate isTrashed]
  -[CXVoicemailUpdate setDateReceived:]
  -[CXVoicemailUpdate copyWithZone:]
  -[CXVoicemailUpdate sanitizedCopy]
  -[CXVoicemailUpdate encodeWithCoder:]
  -[CXVoicemailUpdate setPlayed:]
  -[CXVoicemailUpdate dateReceived]
  -[CXVoicemailUpdate setUUID:]
  -[CXVoicemailUpdate sanitizedCopyWithZone:]
  -[CXVoicemailUpdate initWithVoicemailUUID:]
  -[CXVoicemailUpdate updateSanitizedCopy:withZone:]
  -[CXVoicemailUpdate updateCopy:withZone:]
  -[CXVoicemailUpdate voicemailUUID]
  -[CXVoicemailUpdate setHasSet:]


CXAbstractProvider : NSObject <CXActionDelegate, CXAbstractProviderVendorProtocol>
 @property  NSMutableArray *mutablePendingTransactions
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXAbstractProviderDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <CXAbstractProviderHostProtocol> *hostProtocolDelegate
 @property  NSArray *pendingTransactions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXAbstractProvider setDelegate:queue:]
  -[CXAbstractProvider delegateQueue]
  -[CXAbstractProvider setDelegateQueue:]
  -[CXAbstractProvider _performAction:]
  -[CXAbstractProvider .cxx_destruct]
  -[CXAbstractProvider _performDelegateCallback:]
  -[CXAbstractProvider setDelegate:]
  -[CXAbstractProvider init]
  -[CXAbstractProvider pendingTransactions]
  -[CXAbstractProvider delegate]
  -[CXAbstractProvider queue]
  -[CXAbstractProvider invalidate]
  -[CXAbstractProvider performDelegateCallback:]
  -[CXAbstractProvider actionCompleted:]
  -[CXAbstractProvider commitTransaction:]
  -[CXAbstractProvider handleActionTimeout:]
  -[CXAbstractProvider mutablePendingTransactions]
  -[CXAbstractProvider _handleConnectionInterruption]
  -[CXAbstractProvider _pendingActionWithUUID:]
  -[CXAbstractProvider hostProtocolDelegate]
  -[CXAbstractProvider _updatePendingTransactions]
  -[CXAbstractProvider sendProviderDidBegin]
  -[CXAbstractProvider handleConnectionInterruption]


CXCallDirectoryProvider : NSObject <NSExtensionRequestHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallDirectoryProvider beginRequestWithExtensionContext:]


CXTransaction : NSObject <CXCopying, NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSMutableOrderedSet *mutableActions
 @property  BOOL complete
 @property  NSArray *actions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXTransaction supportsSecureCoding]

  // instance methods
  -[CXTransaction UUID]
  -[CXTransaction addAction:]
  -[CXTransaction initWithCoder:]
  -[CXTransaction .cxx_destruct]
  -[CXTransaction actions]
  -[CXTransaction init]
  -[CXTransaction isComplete]
  -[CXTransaction copyWithZone:]
  -[CXTransaction sanitizedCopy]
  -[CXTransaction initWithActions:]
  -[CXTransaction encodeWithCoder:]
  -[CXTransaction initWithAction:]
  -[CXTransaction setUUID:]
  -[CXTransaction sanitizedCopyWithZone:]
  -[CXTransaction updateSanitizedCopy:withZone:]
  -[CXTransaction updateCopy:withZone:]
  -[CXTransaction mutableActions]
  -[CXTransaction allowedClassesForMutableActions]
  -[CXTransaction addActionsFromTransaction:]
  -[CXTransaction setMutableActions:]


CXProviderExtensionContext : NSExtensionContext
 @property  id remoteObjectProxy

  // class methods
  +[CXProviderExtensionContext _extensionAuxiliaryVendorProtocol]
  +[CXProviderExtensionContext _extensionAuxiliaryHostProtocol]

  // instance methods
  -[CXProviderExtensionContext remoteObjectProxyWithErrorHandler:]
  -[CXProviderExtensionContext remoteObjectProxy]


CXExtensionCallSource : CXCallSource
 @property  NSExtension *extension
 @property  <NSCopying> *requestIdentifier
 @property  CXProviderExtensionHostContext *extensionContext

  // instance methods
  -[CXExtensionCallSource setRequestIdentifier:]
  -[CXExtensionCallSource setExtension:]
  -[CXExtensionCallSource requestIdentifier]
  -[CXExtensionCallSource bundle]
  -[CXExtensionCallSource .cxx_destruct]
  -[CXExtensionCallSource extensionContext]
  -[CXExtensionCallSource init]
  -[CXExtensionCallSource extension]
  -[CXExtensionCallSource initWithExtension:]
  -[CXExtensionCallSource processIdentifier]
  -[CXExtensionCallSource setExtensionContext:]
  -[CXExtensionCallSource vendorProtocolDelegate]
  -[CXExtensionCallSource initWithExtensionIdentifier:]
  -[CXExtensionCallSource beginWithCompletionHandler:]


CXXPCCallSource : CXCallSource
 @property  NSXPCConnection *connection
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSSet *capabilities
 @property  BOOL hasVoIPBackgroundMode

  // instance methods
  -[CXXPCCallSource accessorLock]
  -[CXXPCCallSource localizedName]
  -[CXXPCCallSource auditToken]
  -[CXXPCCallSource isConnected]
  -[CXXPCCallSource bundleIdentifier]
  -[CXXPCCallSource capabilities]
  -[CXXPCCallSource .cxx_destruct]
  -[CXXPCCallSource setConnection:]
  -[CXXPCCallSource hasVoIPBackgroundMode]
  -[CXXPCCallSource bundleURL]
  -[CXXPCCallSource isPermittedToUsePrivateAPI]
  -[CXXPCCallSource init]
  -[CXXPCCallSource initWithConnection:]
  -[CXXPCCallSource connection]
  -[CXXPCCallSource isPermittedToUseBluetoothAccessories]
  -[CXXPCCallSource processIdentifier]
  -[CXXPCCallSource vendorProtocolDelegate]
  -[CXXPCCallSource dealloc]
  -[CXXPCCallSource isPermittedToUsePublicAPI]


CXCallSourceManager : NSObject <NSXPCListenerDelegate, CXCallSourceDelegate, CXTransactionManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallSourceManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSMutableDictionary *identifierToCallSource
 @property  CXTransactionManager *transactionManager
 @property  CXTransactionGroup *uncommittedTransactionGroup
 @property  NSXPCListener *xpcListener
 @property  NSArray *callSources
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallSourceManager initWithDelegate:queue:]
  -[CXCallSourceManager xpcListener]
  -[CXCallSourceManager failOutstandingActionsForCallWithUUID:]
  -[CXCallSourceManager callSource:reportedCallWithUUID:endedAtDate:privateReason:failureContext:]
  -[CXCallSourceManager delegateQueue]
  -[CXCallSourceManager callSource:reportedNewIncomingCallWithUUID:update:completion:]
  -[CXCallSourceManager callSources]
  -[CXCallSourceManager callSource:reportedCallWithUUID:updated:]
  -[CXCallSourceManager removeCallSource:]
  -[CXCallSourceManager .cxx_destruct]
  -[CXCallSourceManager addAction:toUncommittedTransactionForCallSource:]
  -[CXCallSourceManager _performDelegateCallback:]
  -[CXCallSourceManager callSource:reportedOutgoingCallWithUUID:connectedAtDate:]
  -[CXCallSourceManager transactionManager:transactionGroupCompleted:]
  -[CXCallSourceManager setUncommittedTransactionGroup:]
  -[CXCallSourceManager identifierToCallSource]
  -[CXCallSourceManager callSource:requestedTransaction:completion:]
  -[CXCallSourceManager callSource:reportedCallWithUUID:changedMeterLevel:forDirection:]
  -[CXCallSourceManager callSource:reportedOutgoingCallWithUUID:sentInvitationAtDate:]
  -[CXCallSourceManager callSource:reportedCallWithUUID:changedFrequencyData:forDirection:]
  -[CXCallSourceManager init]
  -[CXCallSourceManager callSource:reportedCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:]
  -[CXCallSourceManager callSourceWithIdentifier:]
  -[CXCallSourceManager callSource:reportedOutgoingCallWithUUID:startedConnectingAtDate:]
  -[CXCallSourceManager commitUncommittedTransactions]
  -[CXCallSourceManager addCallSource:]
  -[CXCallSourceManager callSourceConnectionEnded:]
  -[CXCallSourceManager callSource:registeredWithConfiguration:]
  -[CXCallSourceManager delegate]
  -[CXCallSourceManager callSource:reportedAudioFinishedForCallWithUUID:]
  -[CXCallSourceManager queue]
  -[CXCallSourceManager callSourceInvalidated:]
  -[CXCallSourceManager transactionManager]
  -[CXCallSourceManager listener:shouldAcceptNewConnection:]
  -[CXCallSourceManager transactionManager:actionTimedOut:forCallSource:]
  -[CXCallSourceManager commitTransaction:toCallSource:]
  -[CXCallSourceManager callSource:actionCompleted:]
  -[CXCallSourceManager performDelegateCallback:]
  -[CXCallSourceManager callSourceConnectionStarted:]
  -[CXCallSourceManager uncommittedTransactionGroup]


CXCallDirectoryLabeledPhoneNumberEntryData : NSObject <CXCallDirectoryEntryData, NSSecureCoding>
 @property  NSData *phoneNumberData
 @property  NSData *labelData
 @property  unsigned long count
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallDirectoryLabeledPhoneNumberEntryData supportsSecureCoding]

  // instance methods
  -[CXCallDirectoryLabeledPhoneNumberEntryData initWithCoder:]
  -[CXCallDirectoryLabeledPhoneNumberEntryData .cxx_destruct]
  -[CXCallDirectoryLabeledPhoneNumberEntryData count]
  -[CXCallDirectoryLabeledPhoneNumberEntryData init]
  -[CXCallDirectoryLabeledPhoneNumberEntryData encodeWithCoder:]
  -[CXCallDirectoryLabeledPhoneNumberEntryData phoneNumberData]
  -[CXCallDirectoryLabeledPhoneNumberEntryData labelData]
  -[CXCallDirectoryLabeledPhoneNumberEntryData phoneNumberAtIndex:]
  -[CXCallDirectoryLabeledPhoneNumberEntryData utf8LabelAtIndex:length:]
  -[CXCallDirectoryLabeledPhoneNumberEntryData setPhoneNumberData:]
  -[CXCallDirectoryLabeledPhoneNumberEntryData setLabelData:]


CXCallDirectoryMutableLabeledPhoneNumberEntryData : CXCallDirectoryLabeledPhoneNumberEntryData <NSCopying>
 @property  NSMutableData *mutablePhoneNumberData
 @property  NSMutableData *mutableLabelData
 @property  NSMutableDictionary *labelToLabelDataOffset

  // instance methods
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData initWithCapacity:]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData .cxx_destruct]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData init]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData copyWithZone:]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData mutablePhoneNumberData]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData mutableLabelData]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData appendPhoneNumber:label:]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData setMutablePhoneNumberData:]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData setMutableLabelData:]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData labelToLabelDataOffset]
  -[CXCallDirectoryMutableLabeledPhoneNumberEntryData setLabelToLabelDataOffset:]


CXCallDirectoryStore : NSObject
 @property  CXDatabase *database
 @property  BOOL temporary
 @property  long long lastAddBlockingEntriesCount
 @property  NSString *addBlockingEntriesInsertPhoneNumberBlockingEntrySQL
 @property  long long lastRemoveBlockingEntriesCount
 @property  NSString *removeBlockingEntriesSQL
 @property  long long lastAddIdentificationEntriesCount
 @property  NSString *addIdentificationEntriesInsertLabelsSQL
 @property  NSString *addIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL
 @property  long long lastAddPhoneNumbersCount
 @property  NSString *addPhoneNumbersSQL
 @property  long long lastRemoveIdentificationEntriesCount
 @property  NSString *removeIdentificationEntriesSQL
 @property  NSURL *url
 @property  long long schemaVersion
 @property  BOOL corrupt

  // class methods
  +[CXCallDirectoryStore initializeDatabaseIfNecessaryAtURL:usingTemplateAtURL:error:]
  +[CXCallDirectoryStore databaseTemplateURL]
  +[CXCallDirectoryStore databaseURLUsingTemporaryDirectory:error:]

  // instance methods
  -[CXCallDirectoryStore setTemporary:]
  -[CXCallDirectoryStore isTemporary]
  -[CXCallDirectoryStore _removeUnreferencedPhoneNumbersWithError:]
  -[CXCallDirectoryStore removeExtensionWithIdentifier:error:]
  -[CXCallDirectoryStore vacuumWithError:]
  -[CXCallDirectoryStore setDatabase:]
  -[CXCallDirectoryStore performTransactionWithBlock:error:]
  -[CXCallDirectoryStore isCorrupt]
  -[CXCallDirectoryStore addIdentificationEntryWithPhoneNumber:labelID:extensionID:error:]
  -[CXCallDirectoryStore firstIdentificationEntryForEnabledExtensionWithPhoneNumber:error:]
  -[CXCallDirectoryStore _removeUnreferencedLabelsWithError:]
  -[CXCallDirectoryStore containsBlockingEntryForEnabledExtensionWithPhoneNumberInArray:error:]
  -[CXCallDirectoryStore setRemoveBlockingEntriesSQL:]
  -[CXCallDirectoryStore firstIdentificationEntryForPhoneNumber:error:]
  -[CXCallDirectoryStore database]
  -[CXCallDirectoryStore removeUnreferencedRecordsWithError:]
  -[CXCallDirectoryStore url]
  -[CXCallDirectoryStore initForReadingAndWritingWithError:]
  -[CXCallDirectoryStore .cxx_destruct]
  -[CXCallDirectoryStore setAddBlockingEntriesInsertPhoneNumberBlockingEntrySQL:]
  -[CXCallDirectoryStore setLastAddBlockingEntriesCount:]
  -[CXCallDirectoryStore idForPhoneNumber:error:]
  -[CXCallDirectoryStore setLastRemoveIdentificationEntriesCount:]
  -[CXCallDirectoryStore schemaVersion]
  -[CXCallDirectoryStore _removeBlockingEntriesWithData:startIndex:count:extensionID:error:]
  -[CXCallDirectoryStore setAddIdentificationEntriesInsertLabelsSQL:]
  -[CXCallDirectoryStore removeIdentificationEntriesSQL]
  -[CXCallDirectoryStore _sqlValuesListPlaceholderStringWithNumberOfEntries:entryString:]
  -[CXCallDirectoryStore addExtensionWithIdentifier:error:]
  -[CXCallDirectoryStore _parseFirstIdentificationEntriesForSQL:bindings:handler:error:]
  -[CXCallDirectoryStore _firstIdentificationEntryForSQL:bindings:error:]
  -[CXCallDirectoryStore _parseIdentificationEntriesForSQL:bindings:handler:error:]
  -[CXCallDirectoryStore _findOrCreateIDForPhoneNumber:error:]
  -[CXCallDirectoryStore _firstIdentificationEntriesForSQL:bindings:error:]
  -[CXCallDirectoryStore setPrioritizedExtensionIdentifiers:error:]
  -[CXCallDirectoryStore addBlockingEntriesWithData:extensionID:error:]
  -[CXCallDirectoryStore lastRemoveIdentificationEntriesCount]
  -[CXCallDirectoryStore setRemoveIdentificationEntriesSQL:]
  -[CXCallDirectoryStore extensionWithIdentifier:error:]
  -[CXCallDirectoryStore removeIdentificationEntriesWithData:extensionID:error:]
  -[CXCallDirectoryStore init]
  -[CXCallDirectoryStore _addBlockingEntriesWithData:startIndex:count:extensionID:error:]
  -[CXCallDirectoryStore containsBlockingEntryForEnabledExtensionWithPhoneNumber:error:]
  -[CXCallDirectoryStore setState:forExtensionWithID:error:]
  -[CXCallDirectoryStore lastAddBlockingEntriesCount]
  -[CXCallDirectoryStore _removeIdentificationEntriesWithData:startIndex:count:extensionID:error:]
  -[CXCallDirectoryStore schemaVersionWithError:]
  -[CXCallDirectoryStore containsExtensionWithIdentifier:error:]
  -[CXCallDirectoryStore lastAddPhoneNumbersCount]
  -[CXCallDirectoryStore _sqlBindingsForPrioritizedExtensionIdentifiers:withPriorityOffset:]
  -[CXCallDirectoryStore lastAddIdentificationEntriesCount]
  -[CXCallDirectoryStore addExtensionWithIdentifier:priority:error:]
  -[CXCallDirectoryStore setState:forExtensionWithIdentifier:error:]
  -[CXCallDirectoryStore _sqlStringListPlaceholderStringWithNumberOfEntries:]
  -[CXCallDirectoryStore setStateForAllExtensions:error:]
  -[CXCallDirectoryStore firstIdentificationEntriesForEnabledExtensionsWithPhoneNumbers:error:]
  -[CXCallDirectoryStore setLastRemoveBlockingEntriesCount:]
  -[CXCallDirectoryStore initWithTemplateURL:readOnly:temporary:error:]
  -[CXCallDirectoryStore setAddIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL:]
  -[CXCallDirectoryStore prioritizedExtensionsWithError:]
  -[CXCallDirectoryStore idForExtensionWithIdentifier:error:]
  -[CXCallDirectoryStore _sqlCaseMappingPlaceholderStringWithKeyColumnName:defaultValue:numberOfPairs:]
  -[CXCallDirectoryStore addIdentificationEntriesInsertLabelsSQL]
  -[CXCallDirectoryStore containsBlockingEntryWithPhoneNumberInArray:error:]
  -[CXCallDirectoryStore addBlockingEntriesInsertPhoneNumberBlockingEntrySQL]
  -[CXCallDirectoryStore removeBlockingEntriesForExtensionWithID:error:]
  -[CXCallDirectoryStore prioritizedExtensionIdentifiersWithError:]
  -[CXCallDirectoryStore containsBlockingEntryWithPhoneNumber:error:]
  -[CXCallDirectoryStore setLastAddPhoneNumbersCount:]
  -[CXCallDirectoryStore _addIdentificationEntriesWithData:startIndex:count:extensionID:error:]
  -[CXCallDirectoryStore addIdentificationEntriesWithData:extensionID:error:]
  -[CXCallDirectoryStore setLastAddIdentificationEntriesCount:]
  -[CXCallDirectoryStore idForLabel:error:]
  -[CXCallDirectoryStore removeIdentificationEntriesForExtensionWithID:error:]
  -[CXCallDirectoryStore dealloc]
  -[CXCallDirectoryStore addLabel:error:]
  -[CXCallDirectoryStore removeBlockingEntriesWithData:extensionID:error:]
  -[CXCallDirectoryStore addPhoneNumbersSQL]
  -[CXCallDirectoryStore removeBlockingEntriesSQL]
  -[CXCallDirectoryStore initReadOnly:temporary:error:]
  -[CXCallDirectoryStore lastRemoveBlockingEntriesCount]
  -[CXCallDirectoryStore setStateLastModifiedDate:forExtensionWithID:error:]
  -[CXCallDirectoryStore addBlockingEntryWithPhoneNumber:extensionID:error:]
  -[CXCallDirectoryStore _containsBlockingEntryWithSQL:bindings:error:]
  -[CXCallDirectoryStore firstIdentificationEntriesForPhoneNumbers:error:]
  -[CXCallDirectoryStore initForReadingWithError:]
  -[CXCallDirectoryStore setAddPhoneNumbersSQL:]
  -[CXCallDirectoryStore addIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL]
  -[CXCallDirectoryStore _addPhoneNumbersWithEntryData:startIndex:count:error:]
  -[CXCallDirectoryStore _storeIdentificationEntryWithExtensionBundleID:localizedLabel:]


CXCallDirectoryExtensionHostContext : NSExtensionContext <CXCallDirectoryProviderHostProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallDirectoryProviderHostProtocol> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallDirectoryExtensionHostContext _extensionAuxiliaryVendorProtocol]
  +[CXCallDirectoryExtensionHostContext _extensionAuxiliaryHostProtocol]

  // instance methods
  -[CXCallDirectoryExtensionHostContext .cxx_destruct]
  -[CXCallDirectoryExtensionHostContext remoteObjectProxyWithErrorHandler:]
  -[CXCallDirectoryExtensionHostContext initWithInputItems:listenerEndpoint:contextUUID:]
  -[CXCallDirectoryExtensionHostContext setDelegate:]
  -[CXCallDirectoryExtensionHostContext activate]
  -[CXCallDirectoryExtensionHostContext delegate]
  -[CXCallDirectoryExtensionHostContext queue]
  -[CXCallDirectoryExtensionHostContext dealloc]
  -[CXCallDirectoryExtensionHostContext isIncrementalLoadingAllowed:]
  -[CXCallDirectoryExtensionHostContext addBlockingEntriesWithData:reply:]
  -[CXCallDirectoryExtensionHostContext removeBlockingEntriesWithData:reply:]
  -[CXCallDirectoryExtensionHostContext removeAllBlockingEntriesWithReply:]
  -[CXCallDirectoryExtensionHostContext addIdentificationEntriesWithData:reply:]
  -[CXCallDirectoryExtensionHostContext removeIdentificationEntriesWithData:reply:]
  -[CXCallDirectoryExtensionHostContext removeAllIdentificationEntriesWithReply:]
  -[CXCallDirectoryExtensionHostContext completeRequestWithReply:]
  -[CXCallDirectoryExtensionHostContext requestFailedWithError:completion:]


CXSetScreenShareAttributesCallAction : CXCallAction
 @property  CXScreenShareAttributes *attributes

  // class methods
  +[CXSetScreenShareAttributesCallAction supportsSecureCoding]

  // instance methods
  -[CXSetScreenShareAttributesCallAction initWithCoder:]
  -[CXSetScreenShareAttributesCallAction .cxx_destruct]
  -[CXSetScreenShareAttributesCallAction customDescription]
  -[CXSetScreenShareAttributesCallAction setAttributes:]
  -[CXSetScreenShareAttributesCallAction attributes]
  -[CXSetScreenShareAttributesCallAction encodeWithCoder:]
  -[CXSetScreenShareAttributesCallAction sanitizedCopyWithZone:]
  -[CXSetScreenShareAttributesCallAction updateCopy:withZone:]
  -[CXSetScreenShareAttributesCallAction initWithCallUUID:attributes:]


CXProviderExtensionVendorContext : CXProviderExtensionContext <CXProviderHostProtocol, CXProviderVendorProtocol>
 @property  <CXProviderExtensionVendorContextDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXProviderExtensionVendorContext .cxx_destruct]
  -[CXProviderExtensionVendorContext remoteObjectProxyWithErrorHandler:]
  -[CXProviderExtensionVendorContext remoteObjectProxy]
  -[CXProviderExtensionVendorContext setDelegate:]
  -[CXProviderExtensionVendorContext delegate]
  -[CXProviderExtensionVendorContext actionCompleted:]
  -[CXProviderExtensionVendorContext commitTransaction:]
  -[CXProviderExtensionVendorContext handleActionTimeout:]
  -[CXProviderExtensionVendorContext handleAudioSessionActivationStateChangedTo:]
  -[CXProviderExtensionVendorContext registerWithConfiguration:]
  -[CXProviderExtensionVendorContext reportNewIncomingCallWithUUID:update:reply:]
  -[CXProviderExtensionVendorContext reportCallWithUUID:updated:]
  -[CXProviderExtensionVendorContext reportOutgoingCallWithUUID:sentInvitationAtDate:]
  -[CXProviderExtensionVendorContext reportOutgoingCallWithUUID:startedConnectingAtDate:]
  -[CXProviderExtensionVendorContext reportOutgoingCallWithUUID:connectedAtDate:]
  -[CXProviderExtensionVendorContext reportCallWithUUID:endedAtDate:privateReason:failureContext:]
  -[CXProviderExtensionVendorContext reportAudioFinishedForCallWithUUID:]
  -[CXProviderExtensionVendorContext reportCallWithUUID:changedFrequencyData:forDirection:]
  -[CXProviderExtensionVendorContext reportCallWithUUID:changedMeterLevel:forDirection:]
  -[CXProviderExtensionVendorContext reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:]
  -[CXProviderExtensionVendorContext requestTransaction:reply:]


CXSetPlayedVoicemailAction : CXVoicemailAction
 @property  BOOL played

  // class methods
  +[CXSetPlayedVoicemailAction supportsSecureCoding]

  // instance methods
  -[CXSetPlayedVoicemailAction initWithCoder:]
  -[CXSetPlayedVoicemailAction isPlayed]
  -[CXSetPlayedVoicemailAction customDescription]
  -[CXSetPlayedVoicemailAction encodeWithCoder:]
  -[CXSetPlayedVoicemailAction setPlayed:]
  -[CXSetPlayedVoicemailAction updateSanitizedCopy:withZone:]
  -[CXSetPlayedVoicemailAction initWithVoicemailUUID:played:]


CXCallDirectoryStoreMigrator : NSObject
 @property  CXCallDirectoryStore *store
 @property  @? storeCreationBlock
 @property  @? retrieveExtensionBlock

  // instance methods
  -[CXCallDirectoryStoreMigrator performMigrationsWithError:]
  -[CXCallDirectoryStoreMigrator setRetrieveExtensionBlock:]
  -[CXCallDirectoryStoreMigrator .cxx_destruct]
  -[CXCallDirectoryStoreMigrator setStore:]
  -[CXCallDirectoryStoreMigrator storeCreationBlock]
  -[CXCallDirectoryStoreMigrator init]
  -[CXCallDirectoryStoreMigrator setStoreCreationBlock:]
  -[CXCallDirectoryStoreMigrator retrieveExtensionBlock]
  -[CXCallDirectoryStoreMigrator store]
  -[CXCallDirectoryStoreMigrator _performMigrationsStartingAtSchemaVersion:error:]


CXCallDirectoryStoreMigrationResult : NSObject
 @property  long long startingSchemaVersion
 @property  long long endingSchemaVersion
 @property  BOOL requiresExtensionDisablement
 @property  BOOL requiresExtensionSynchronization

  // instance methods
  -[CXCallDirectoryStoreMigrationResult setRequiresExtensionDisablement:]
  -[CXCallDirectoryStoreMigrationResult setEndingSchemaVersion:]
  -[CXCallDirectoryStoreMigrationResult endingSchemaVersion]
  -[CXCallDirectoryStoreMigrationResult startingSchemaVersion]
  -[CXCallDirectoryStoreMigrationResult setStartingSchemaVersion:]
  -[CXCallDirectoryStoreMigrationResult setRequiresExtensionSynchronization:]
  -[CXCallDirectoryStoreMigrationResult requiresExtensionDisablement]
  -[CXCallDirectoryStoreMigrationResult requiresExtensionSynchronization]


CXSetGroupCallAction : CXCallAction
 @property  NSUUID *callUUIDToGroupWith

  // class methods
  +[CXSetGroupCallAction supportsSecureCoding]

  // instance methods
  -[CXSetGroupCallAction initWithCoder:]
  -[CXSetGroupCallAction .cxx_destruct]
  -[CXSetGroupCallAction customDescription]
  -[CXSetGroupCallAction encodeWithCoder:]
  -[CXSetGroupCallAction updateSanitizedCopy:withZone:]
  -[CXSetGroupCallAction callUUIDToGroupWith]
  -[CXSetGroupCallAction setCallUUIDToGroupWith:]
  -[CXSetGroupCallAction initWithCallUUID:callUUIDToGroupWith:]


CXPlayDTMFCallAction : CXCallAction
 @property  NSString *digits
 @property  long long type

  // class methods
  +[CXPlayDTMFCallAction supportsSecureCoding]

  // instance methods
  -[CXPlayDTMFCallAction initWithCoder:]
  -[CXPlayDTMFCallAction setType:]
  -[CXPlayDTMFCallAction .cxx_destruct]
  -[CXPlayDTMFCallAction setDigits:]
  -[CXPlayDTMFCallAction digits]
  -[CXPlayDTMFCallAction customDescription]
  -[CXPlayDTMFCallAction type]
  -[CXPlayDTMFCallAction encodeWithCoder:]
  -[CXPlayDTMFCallAction updateSanitizedCopy:withZone:]
  -[CXPlayDTMFCallAction initWithCallUUID:digits:type:]


CXVoicemailObserverXPCClient : NSObject <CXVoicemailObserverDataSource>
 @property  NSMutableDictionary *mutableVoicemailUUIDToVoicemailMap
 @property  NSHashTable *delegates
 @property  NSXPCConnection *connection
 @property  int notifyToken
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSDictionary *voicemailUUIDToVoicemailMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXVoicemailObserverXPCClient sharedXPCClient]
  +[CXVoicemailObserverXPCClient sharedXPCClientSemaphore]
  +[CXVoicemailObserverXPCClient releaseSharedXPCClient]

  // instance methods
  -[CXVoicemailObserverXPCClient notifyToken]
  -[CXVoicemailObserverXPCClient removeDelegate:]
  -[CXVoicemailObserverXPCClient .cxx_destruct]
  -[CXVoicemailObserverXPCClient delegates]
  -[CXVoicemailObserverXPCClient setConnection:]
  -[CXVoicemailObserverXPCClient init]
  -[CXVoicemailObserverXPCClient connection]
  -[CXVoicemailObserverXPCClient _remoteObjectProxyWithErrorHandler:isSynchronous:]
  -[CXVoicemailObserverXPCClient _invalidate]
  -[CXVoicemailObserverXPCClient queue]
  -[CXVoicemailObserverXPCClient _init]
  -[CXVoicemailObserverXPCClient dealloc]
  -[CXVoicemailObserverXPCClient invalidate]
  -[CXVoicemailObserverXPCClient addDelegate:]
  -[CXVoicemailObserverXPCClient requestTransaction:completion:]
  -[CXVoicemailObserverXPCClient _requestVoicemails]
  -[CXVoicemailObserverXPCClient mutableVoicemailUUIDToVoicemailMap]
  -[CXVoicemailObserverXPCClient voicemailUUIDToVoicemailMap]
  -[CXVoicemailObserverXPCClient _addOrUpdateVoicemails:]
  -[CXVoicemailObserverXPCClient _removeVoicemails:]
  -[CXVoicemailObserverXPCClient addOrUpdateVoicemails:]
  -[CXVoicemailObserverXPCClient removeVoicemails:]


CXHandoffContext : NSObject <NSSecureCoding>
 @property  NSString *handoffIdentifier
 @property  BOOL outgoing
 @property  CXHandle *remoteHandle
 @property  NSDictionary *context
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[CXHandoffContext supportsSecureCoding]

  // instance methods
  -[CXHandoffContext isOutgoing]
  -[CXHandoffContext initWithCoder:]
  -[CXHandoffContext initWithDictionaryRepresentation:]
  -[CXHandoffContext .cxx_destruct]
  -[CXHandoffContext dictionaryRepresentation]
  -[CXHandoffContext init]
  -[CXHandoffContext isEqual:]
  -[CXHandoffContext setContext:]
  -[CXHandoffContext setOutgoing:]
  -[CXHandoffContext encodeWithCoder:]
  -[CXHandoffContext context]
  -[CXHandoffContext handoffIdentifier]
  -[CXHandoffContext remoteHandle]
  -[CXHandoffContext initWithHandoffIdentifier:]
  -[CXHandoffContext isEqualToHandoffContext:]
  -[CXHandoffContext setRemoteHandle:]


CXExtensionProvider : CXProvider <CXProviderExtensionVendorContextDelegate, NSExtensionRequestHandling>
 @property  CXProviderExtensionVendorContext *extensionContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXExtensionProvider .cxx_destruct]
  -[CXExtensionProvider extensionContext]
  -[CXExtensionProvider setExtensionContext:]
  -[CXExtensionProvider invalidate]
  -[CXExtensionProvider beginRequestWithExtensionContext:]
  -[CXExtensionProvider hostProtocolDelegate]
  -[CXExtensionProvider providerExtensionVendorContext:receivedCommittedTransaction:]
  -[CXExtensionProvider providerExtensionVendorContext:handledActionTimeout:]
  -[CXExtensionProvider providerExtensionVendorContext:handledAudioSessionActivationStateChangedTo:]
  -[CXExtensionProvider requiresProxyingAVAudioSessionState]


CXVoicemailObserver : NSObject <CXVoicemailObserverDataSourceDelegate>
 @property  <CXVoicemailObserverDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXVoicemailObserverDataSource> *dataSource
 @property  NSArray *voicemails
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXVoicemailObserver setDelegate:queue:]
  -[CXVoicemailObserver delegateQueue]
  -[CXVoicemailObserver setDelegateQueue:]
  -[CXVoicemailObserver .cxx_destruct]
  -[CXVoicemailObserver _performDelegateCallback:]
  -[CXVoicemailObserver setDelegate:]
  -[CXVoicemailObserver dataSource]
  -[CXVoicemailObserver init]
  -[CXVoicemailObserver delegate]
  -[CXVoicemailObserver queue]
  -[CXVoicemailObserver dealloc]
  -[CXVoicemailObserver voicemails]
  -[CXVoicemailObserver dataSourceVoicemailsChanged:]
  -[CXVoicemailObserver initWithDataSource:queue:]


CXNotificationServiceExtensionVoIPXPCClient : NSObject
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSXPCConnection *connection

  // instance methods
  -[CXNotificationServiceExtensionVoIPXPCClient accessorLock]
  -[CXNotificationServiceExtensionVoIPXPCClient .cxx_destruct]
  -[CXNotificationServiceExtensionVoIPXPCClient setConnection:]
  -[CXNotificationServiceExtensionVoIPXPCClient init]
  -[CXNotificationServiceExtensionVoIPXPCClient connection]
  -[CXNotificationServiceExtensionVoIPXPCClient dealloc]
  -[CXNotificationServiceExtensionVoIPXPCClient invalidate]
  -[CXNotificationServiceExtensionVoIPXPCClient taskHasEntitlement:]
  -[CXNotificationServiceExtensionVoIPXPCClient requestDidArriveFromExtensionPoint]
  -[CXNotificationServiceExtensionVoIPXPCClient requestApplicationLaunchForIncomingCall:completion:]


CXCallSource : NSObject <CXProviderHostProtocol, CXProviderVendorProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXProviderVendorProtocol> *vendorProtocolDelegate
 @property  BOOL connected
 @property  <CXCallSourceDelegate> *delegate
 @property  NSString *identifier
 @property  NSString *bundleIdentifier
 @property  NSURL *bundleURL
 @property  NSString *localizedName
 @property  int processIdentifier
 @property  {?=[8I]} auditToken
 @property  BOOL permittedToUsePublicAPI
 @property  BOOL permittedToUsePrivateAPI
 @property  BOOL permittedToUseBluetoothAccessories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallSource localizedName]
  -[CXCallSource auditToken]
  -[CXCallSource isConnected]
  -[CXCallSource bundleIdentifier]
  -[CXCallSource initWithIdentifier:]
  -[CXCallSource .cxx_destruct]
  -[CXCallSource setDelegate:]
  -[CXCallSource bundleURL]
  -[CXCallSource isPermittedToUsePrivateAPI]
  -[CXCallSource setQueue:]
  -[CXCallSource setConnected:]
  -[CXCallSource isPermittedToUseBluetoothAccessories]
  -[CXCallSource identifier]
  -[CXCallSource processIdentifier]
  -[CXCallSource delegate]
  -[CXCallSource vendorProtocolDelegate]
  -[CXCallSource queue]
  -[CXCallSource isPermittedToUsePublicAPI]
  -[CXCallSource actionCompleted:]
  -[CXCallSource commitTransaction:]
  -[CXCallSource handleActionTimeout:]
  -[CXCallSource handleAudioSessionActivationStateChangedTo:]
  -[CXCallSource registerWithConfiguration:]
  -[CXCallSource reportNewIncomingCallWithUUID:update:reply:]
  -[CXCallSource reportCallWithUUID:updated:]
  -[CXCallSource reportOutgoingCallWithUUID:sentInvitationAtDate:]
  -[CXCallSource reportOutgoingCallWithUUID:startedConnectingAtDate:]
  -[CXCallSource reportOutgoingCallWithUUID:connectedAtDate:]
  -[CXCallSource reportCallWithUUID:endedAtDate:privateReason:failureContext:]
  -[CXCallSource reportAudioFinishedForCallWithUUID:]
  -[CXCallSource reportCallWithUUID:changedFrequencyData:forDirection:]
  -[CXCallSource reportCallWithUUID:changedMeterLevel:forDirection:]
  -[CXCallSource reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:]
  -[CXCallSource requestTransaction:reply:]
  -[CXCallSource beginWithCompletionHandler:]
  -[CXCallSource reportCallWithUUID:updated:reply:]
  -[CXCallSource reportCallWithUUID:endedAtDate:privateReason:failureContext:reply:]
  -[CXCallSource reportOutgoingCallWithUUID:sentInvitationAtDate:reply:]
  -[CXCallSource reportOutgoingCallWithUUID:startedConnectingAtDate:reply:]
  -[CXCallSource reportOutgoingCallWithUUID:connectedAtDate:reply:]
  -[CXCallSource reportAudioFinishedForCallWithUUID:reply:]
  -[CXCallSource reportCallWithUUID:changedFrequencyData:forDirection:reply:]
  -[CXCallSource reportCallWithUUID:changedMeterLevel:forDirection:reply:]
  -[CXCallSource reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:reply:]
  -[CXCallSource actionCompleted:reply:]


CXVoicemailController : NSObject
 @property  NSObject<OS_dispatch_queue> *completionQueue
 @property  CXVoicemailObserver *voicemailObserver

  // instance methods
  -[CXVoicemailController completionQueue]
  -[CXVoicemailController .cxx_destruct]
  -[CXVoicemailController init]
  -[CXVoicemailController initWithQueue:]
  -[CXVoicemailController requestTransaction:completion:]
  -[CXVoicemailController _requestTransaction:completion:]
  -[CXVoicemailController requestTransactionWithActions:completion:]
  -[CXVoicemailController voicemailObserver]
  -[CXVoicemailController requestTransactionWithAction:completion:]


CXJoinCallAction : CXCallAction
 @property  NSUUID *groupUUID
 @property  NSDate *dateStarted
 @property  NSSet *remoteMembers
 @property  NSSet *otherInvitedHandles
 @property  CXHandle *callerID
 @property  BOOL videoEnabled
 @property  BOOL uplinkMuted
 @property  BOOL shouldSuppressInCallUI
 @property  BOOL wantsStagingArea
 @property  BOOL letMeIn
 @property  BOOL joiningConversationWithLink
 @property  NSString *pseudonym
 @property  NSData *publicKey
 @property  BOOL video
 @property  BOOL upgrade
 @property  NSUUID *upgradeSessionUUID
 @property  NSUUID *messagesGroupUUID
 @property  NSString *messagesGroupName
 @property  NSSet *remotePushTokens
 @property  CXJoinCallActivity *joinCallActivity
 @property  BOOL relay
 @property  NSString *conversationProviderIdentifier
 @property  NSDictionary *notificationStylesByHandleType

  // class methods
  +[CXJoinCallAction supportsSecureCoding]

  // instance methods
  -[CXJoinCallAction publicKey]
  -[CXJoinCallAction isVideo]
  -[CXJoinCallAction setCallerID:]
  -[CXJoinCallAction initWithCoder:]
  -[CXJoinCallAction setUplinkMuted:]
  -[CXJoinCallAction setVideo:]
  -[CXJoinCallAction callerID]
  -[CXJoinCallAction setGroupUUID:]
  -[CXJoinCallAction fulfill]
  -[CXJoinCallAction .cxx_destruct]
  -[CXJoinCallAction setVideoEnabled:]
  -[CXJoinCallAction isUplinkMuted]
  -[CXJoinCallAction pseudonym]
  -[CXJoinCallAction customDescription]
  -[CXJoinCallAction isRelay]
  -[CXJoinCallAction setPublicKey:]
  -[CXJoinCallAction setPseudonym:]
  -[CXJoinCallAction groupUUID]
  -[CXJoinCallAction encodeWithCoder:]
  -[CXJoinCallAction setRelay:]
  -[CXJoinCallAction isVideoEnabled]
  -[CXJoinCallAction sanitizedCopyWithZone:]
  -[CXJoinCallAction setRemoteMembers:]
  -[CXJoinCallAction setOtherInvitedHandles:]
  -[CXJoinCallAction messagesGroupName]
  -[CXJoinCallAction remoteMembers]
  -[CXJoinCallAction messagesGroupUUID]
  -[CXJoinCallAction otherInvitedHandles]
  -[CXJoinCallAction setMessagesGroupUUID:]
  -[CXJoinCallAction setMessagesGroupName:]
  -[CXJoinCallAction shouldSuppressInCallUI]
  -[CXJoinCallAction wantsStagingArea]
  -[CXJoinCallAction isJoiningConversationWithLink]
  -[CXJoinCallAction setShouldSuppressInCallUI:]
  -[CXJoinCallAction setWantsStagingArea:]
  -[CXJoinCallAction setJoiningConversationWithLink:]
  -[CXJoinCallAction notificationStylesByHandleType]
  -[CXJoinCallAction updateCopy:withZone:]
  -[CXJoinCallAction dateStarted]
  -[CXJoinCallAction isLetMeIn]
  -[CXJoinCallAction isUpgrade]
  -[CXJoinCallAction upgradeSessionUUID]
  -[CXJoinCallAction remotePushTokens]
  -[CXJoinCallAction joinCallActivity]
  -[CXJoinCallAction conversationProviderIdentifier]
  -[CXJoinCallAction fulfillWithDateStarted:]
  -[CXJoinCallAction updateAsFulfilledWithDateStarted:]
  -[CXJoinCallAction setDateStarted:]
  -[CXJoinCallAction setLetMeIn:]
  -[CXJoinCallAction setUpgrade:]
  -[CXJoinCallAction setUpgradeSessionUUID:]
  -[CXJoinCallAction setRemotePushTokens:]
  -[CXJoinCallAction setJoinCallActivity:]
  -[CXJoinCallAction setConversationProviderIdentifier:]
  -[CXJoinCallAction setNotificationStylesByHandleType:]
  -[CXJoinCallAction initWithCallUUID:groupUUID:]


CXScreenShareAttributes : NSObject <NSSecureCoding>
 @property  NSNumber *frameRate
 @property  NSNumber *displayID
 @property  BOOL windowed
 @property  NSUUID *windowUUID
 @property  long long deviceFamily
 @property  long long style
 @property  NSNumber *displayScale
 @property  NSNumber *scaleFactor
 @property  NSValue *originalResolution

  // class methods
  +[CXScreenShareAttributes supportsSecureCoding]

  // instance methods
  -[CXScreenShareAttributes scaleFactor]
  -[CXScreenShareAttributes displayID]
  -[CXScreenShareAttributes deviceFamily]
  -[CXScreenShareAttributes setScaleFactor:]
  -[CXScreenShareAttributes initWithCoder:]
  -[CXScreenShareAttributes displayScale]
  -[CXScreenShareAttributes .cxx_destruct]
  -[CXScreenShareAttributes setStyle:]
  -[CXScreenShareAttributes setDisplayScale:]
  -[CXScreenShareAttributes setFrameRate:]
  -[CXScreenShareAttributes setDisplayID:]
  -[CXScreenShareAttributes customDescription]
  -[CXScreenShareAttributes frameRate]
  -[CXScreenShareAttributes copyWithZone:]
  -[CXScreenShareAttributes style]
  -[CXScreenShareAttributes encodeWithCoder:]
  -[CXScreenShareAttributes windowUUID]
  -[CXScreenShareAttributes sanitizedCopyWithZone:]
  -[CXScreenShareAttributes setDeviceFamily:]
  -[CXScreenShareAttributes setOriginalResolution:]
  -[CXScreenShareAttributes isWindowed]
  -[CXScreenShareAttributes originalResolution]
  -[CXScreenShareAttributes setWindowed:]
  -[CXScreenShareAttributes setWindowUUID:]


CXVoicemailAction : CXAction
 @property  NSUUID *voicemailUUID

  // class methods
  +[CXVoicemailAction supportsSecureCoding]

  // instance methods
  -[CXVoicemailAction initWithCoder:]
  -[CXVoicemailAction .cxx_destruct]
  -[CXVoicemailAction customDescription]
  -[CXVoicemailAction copyWithZone:]
  -[CXVoicemailAction encodeWithCoder:]
  -[CXVoicemailAction sanitizedCopyWithZone:]
  -[CXVoicemailAction initWithVoicemailUUID:]
  -[CXVoicemailAction updateSanitizedCopy:withZone:]
  -[CXVoicemailAction voicemailUUID]
  -[CXVoicemailAction setVoicemailUUID:]


CXTransactionManager : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableSet *outstandingTransactionGroups
 @property  <CXTransactionManagerDelegate> *delegate

  // instance methods
  -[CXTransactionManager failOutstandingActionsForCallWithUUID:]
  -[CXTransactionManager .cxx_destruct]
  -[CXTransactionManager setDelegate:]
  -[CXTransactionManager init]
  -[CXTransactionManager setQueue:]
  -[CXTransactionManager initWithQueue:]
  -[CXTransactionManager delegate]
  -[CXTransactionManager queue]
  -[CXTransactionManager addOutstandingTransactionGroup:]
  -[CXTransactionManager updateWithCompletedAction:]
  -[CXTransactionManager outstandingTransactionGroups]
  -[CXTransactionManager _setUpTimeoutForAction:callSource:]
  -[CXTransactionManager _timeoutReachedForAction:callSource:]
  -[CXTransactionManager setOutstandingTransactionGroups:]


CXDatabase : NSObject
 @property  NSURL *url
 @property  ^{sqlite3=} database
 @property  NSMutableDictionary *sqlQueryToStatements
 @property  long long lastInsertedRowID
 @property  int countOfRecordsModifiedByLastQuery

  // instance methods
  -[CXDatabase executeSQL:error:]
  -[CXDatabase closeWithError:]
  -[CXDatabase vacuumWithError:]
  -[CXDatabase setDatabase:]
  -[CXDatabase lastInsertedRowID]
  -[CXDatabase commitTransactionWithError:]
  -[CXDatabase performTransactionWithBlock:error:]
  -[CXDatabase sqlQueryToStatements]
  -[CXDatabase countOfRecordsModifiedByLastQuery]
  -[CXDatabase database]
  -[CXDatabase url]
  -[CXDatabase executeSQL:withStatementPreparationBlock:error:]
  -[CXDatabase selectSQL:withBindings:expectedColumnCount:resultRowHandler:error:]
  -[CXDatabase initWithURL:readOnly:error:]
  -[CXDatabase enableForeignKeysWithError:]
  -[CXDatabase setBusyTimeout:error:]
  -[CXDatabase .cxx_destruct]
  -[CXDatabase setSqlQueryToStatements:]
  -[CXDatabase setUrl:]
  -[CXDatabase init]
  -[CXDatabase _statementForSQL:transient:error:]
  -[CXDatabase beginTransactionWithError:]
  -[CXDatabase executeSQL:withBindings:transient:error:]
  -[CXDatabase dealloc]
  -[CXDatabase executeSQL:withStatementPreparationBlock:transient:error:]
  -[CXDatabase rollbackTransactionWithError:]
  -[CXDatabase executeSQL:withBindings:error:]
  -[CXDatabase namesOfColumnsInTableWithName:error:]
  -[CXDatabase selectSQL:withBindings:expectedColumnCount:transient:resultRowHandler:error:]


CXCallFailureContext : NSObject <CXCopying, NSSecureCoding>
 @property  NSString *title
 @property  NSString *message
 @property  long long failureReason
 @property  long long providerErrorCode
 @property  long long providerEndedReason
 @property  BOOL hasWiFiSettingsRemediation
 @property  BOOL hasCellularSettingsRemediation
 @property  BOOL hasDateAndTimeSettingsRemediation
 @property  BOOL hasLocationSettingsRemediation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallFailureContext supportsSecureCoding]

  // instance methods
  -[CXCallFailureContext setFailureReason:]
  -[CXCallFailureContext initWithCoder:]
  -[CXCallFailureContext setTitle:]
  -[CXCallFailureContext .cxx_destruct]
  -[CXCallFailureContext setMessage:]
  -[CXCallFailureContext message]
  -[CXCallFailureContext title]
  -[CXCallFailureContext copyWithZone:]
  -[CXCallFailureContext sanitizedCopy]
  -[CXCallFailureContext failureReason]
  -[CXCallFailureContext encodeWithCoder:]
  -[CXCallFailureContext sanitizedCopyWithZone:]
  -[CXCallFailureContext updateSanitizedCopy:withZone:]
  -[CXCallFailureContext updateCopy:withZone:]
  -[CXCallFailureContext providerErrorCode]
  -[CXCallFailureContext providerEndedReason]
  -[CXCallFailureContext hasWiFiSettingsRemediation]
  -[CXCallFailureContext hasCellularSettingsRemediation]
  -[CXCallFailureContext hasDateAndTimeSettingsRemediation]
  -[CXCallFailureContext hasLocationSettingsRemediation]
  -[CXCallFailureContext setProviderErrorCode:]
  -[CXCallFailureContext setProviderEndedReason:]
  -[CXCallFailureContext setHasWiFiSettingsRemediation:]
  -[CXCallFailureContext setHasCellularSettingsRemediation:]
  -[CXCallFailureContext setHasDateAndTimeSettingsRemediation:]
  -[CXCallFailureContext setHasLocationSettingsRemediation:]


CXCallUpdate : NSObject <CXCopying, NSSecureCoding, NSCopying>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  {CXCallUpdateHasSet=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1} hasSet
 @property  NSUUID *UUID
 @property  BOOL blocked
 @property  BOOL emergency
 @property  BOOL failureExpected
 @property  BOOL usingBaseband
 @property  BOOL mayRequireBreakBeforeMake
 @property  long long ttyType
 @property  BOOL supportsTTYWithVoice
 @property  BOOL requiresInCallSounds
 @property  long long inCallSoundRegion
 @property  NSString *audioCategory
 @property  NSString *audioMode
 @property  long long audioInterruptionProvider
 @property  long long audioInterruptionOperationMode
 @property  long long verificationStatus
 @property  long long priority
 @property  NSString *crossDeviceIdentifier
 @property  CXAccount *account
 @property  NSString *announceProviderIdentifier
 @property  NSString *ISOCountryCode
 @property  NSUUID *localSenderIdentityUUID
 @property  NSUUID *localSenderIdentityAccountUUID
 @property  NSUUID *participantGroupUUID
 @property  NSSet *remoteParticipantHandles
 @property  NSSet *otherInvitedHandles
 @property  NSSet *activeRemoteParticipantHandles
 @property  CXHandoffContext *handoffContext
 @property  CXScreenShareAttributes *screenShareAttributes
 @property  NSDictionary *context
 @property  BOOL prefersExclusiveAccessToCellularNetwork
 @property  BOOL remoteUplinkMuted
 @property  BOOL shouldSuppressInCallUI
 @property  BOOL mutuallyExclusiveCall
 @property  unsigned long originatingUIType
 @property  long long junkConfidence
 @property  long long identificationCategory
 @property  BOOL supportsUnambiguousMultiPartyState
 @property  BOOL supportsAddCall
 @property  BOOL supportsSendingToVoicemail
 @property  long long videoStreamToken
 @property  BOOL requiresAuthentication
 @property  BOOL conversation
 @property  BOOL mixesVoiceWithMedia
 @property  BOOL mediaPlaybackOnExternalDevice
 @property  BOOL ignoresBluetoothDeviceUID
 @property  BOOL sharingScreen
 @property  BOOL oneToOneModeEnabled
 @property  long long bluetoothAudioFormat
 @property  CXHandle *remoteHandle
 @property  NSString *localizedCallerName
 @property  BOOL supportsHolding
 @property  BOOL supportsGrouping
 @property  BOOL supportsUngrouping
 @property  BOOL supportsDTMF
 @property  BOOL hasVideo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallUpdate callUpdateWithDefaultValuesSet]
  +[CXCallUpdate supportsSecureCoding]

  // instance methods
  -[CXCallUpdate blocked]
  -[CXCallUpdate accessorLock]
  -[CXCallUpdate setAudioCategory:]
  -[CXCallUpdate setMediaPlaybackOnExternalDevice:]
  -[CXCallUpdate audioCategory]
  -[CXCallUpdate isBlocked]
  -[CXCallUpdate UUID]
  -[CXCallUpdate setAccount:]
  -[CXCallUpdate initWithCoder:]
  -[CXCallUpdate account]
  -[CXCallUpdate verificationStatus]
  -[CXCallUpdate requiresAuthentication]
  -[CXCallUpdate .cxx_destruct]
  -[CXCallUpdate ttyType]
  -[CXCallUpdate hasSet]
  -[CXCallUpdate setPriority:]
  -[CXCallUpdate setLocalSenderIdentityUUID:]
  -[CXCallUpdate emergency]
  -[CXCallUpdate supportsGrouping]
  -[CXCallUpdate setEmergency:]
  -[CXCallUpdate init]
  -[CXCallUpdate setRequiresAuthentication:]
  -[CXCallUpdate setSupportsGrouping:]
  -[CXCallUpdate setVerificationStatus:]
  -[CXCallUpdate priority]
  -[CXCallUpdate setConversation:]
  -[CXCallUpdate setTTYType:]
  -[CXCallUpdate setContext:]
  -[CXCallUpdate conversation]
  -[CXCallUpdate setBlocked:]
  -[CXCallUpdate copyWithZone:]
  -[CXCallUpdate ISOCountryCode]
  -[CXCallUpdate sanitizedCopy]
  -[CXCallUpdate localizedCallerName]
  -[CXCallUpdate setLocalizedCallerName:]
  -[CXCallUpdate setISOCountryCode:]
  -[CXCallUpdate hasVideo]
  -[CXCallUpdate encodeWithCoder:]
  -[CXCallUpdate setUUID:]
  -[CXCallUpdate context]
  -[CXCallUpdate setHasVideo:]
  -[CXCallUpdate setJunkConfidence:]
  -[CXCallUpdate setParticipantGroupUUID:]
  -[CXCallUpdate setRemoteParticipantHandles:]
  -[CXCallUpdate junkConfidence]
  -[CXCallUpdate participantGroupUUID]
  -[CXCallUpdate remoteParticipantHandles]
  -[CXCallUpdate sanitizedCopyWithZone:]
  -[CXCallUpdate localSenderIdentityAccountUUID]
  -[CXCallUpdate setMixesVoiceWithMedia:]
  -[CXCallUpdate setOtherInvitedHandles:]
  -[CXCallUpdate otherInvitedHandles]
  -[CXCallUpdate isOneToOneModeEnabled]
  -[CXCallUpdate setOneToOneModeEnabled:]
  -[CXCallUpdate oneToOneModeEnabled]
  -[CXCallUpdate isConversation]
  -[CXCallUpdate isEmergency]
  -[CXCallUpdate shouldSuppressInCallUI]
  -[CXCallUpdate setShouldSuppressInCallUI:]
  -[CXCallUpdate originatingUIType]
  -[CXCallUpdate setOriginatingUIType:]
  -[CXCallUpdate supportsHolding]
  -[CXCallUpdate supportsUngrouping]
  -[CXCallUpdate supportsDTMF]
  -[CXCallUpdate supportsUnambiguousMultiPartyState]
  -[CXCallUpdate supportsAddCall]
  -[CXCallUpdate supportsSendingToVoicemail]
  -[CXCallUpdate setSupportsHolding:]
  -[CXCallUpdate setSupportsUngrouping:]
  -[CXCallUpdate setSupportsDTMF:]
  -[CXCallUpdate setSupportsUnambiguousMultiPartyState:]
  -[CXCallUpdate setSupportsAddCall:]
  -[CXCallUpdate setSupportsSendingToVoicemail:]
  -[CXCallUpdate localSenderIdentityUUID]
  -[CXCallUpdate setLocalSenderIdentityAccountUUID:]
  -[CXCallUpdate isUsingBaseband]
  -[CXCallUpdate isSharingScreen]
  -[CXCallUpdate isFailureExpected]
  -[CXCallUpdate audioMode]
  -[CXCallUpdate supportsTTYWithVoice]
  -[CXCallUpdate bluetoothAudioFormat]
  -[CXCallUpdate prefersExclusiveAccessToCellularNetwork]
  -[CXCallUpdate isRemoteUplinkMuted]
  -[CXCallUpdate videoStreamToken]
  -[CXCallUpdate mixesVoiceWithMedia]
  -[CXCallUpdate screenShareAttributes]
  -[CXCallUpdate announceProviderIdentifier]
  -[CXCallUpdate isMutuallyExclusiveCall]
  -[CXCallUpdate setSharingScreen:]
  -[CXCallUpdate setScreenShareAttributes:]
  -[CXCallUpdate setBluetoothAudioFormat:]
  -[CXCallUpdate setAnnounceProviderIdentifier:]
  -[CXCallUpdate setFailureExpected:]
  -[CXCallUpdate setUsingBaseband:]
  -[CXCallUpdate setSupportsTTYWithVoice:]
  -[CXCallUpdate setAudioMode:]
  -[CXCallUpdate setVideoStreamToken:]
  -[CXCallUpdate setPrefersExclusiveAccessToCellularNetwork:]
  -[CXCallUpdate setRemoteUplinkMuted:]
  -[CXCallUpdate setMutuallyExclusiveCall:]
  -[CXCallUpdate failureExpected]
  -[CXCallUpdate usingBaseband]
  -[CXCallUpdate sharingScreen]
  -[CXCallUpdate remoteUplinkMuted]
  -[CXCallUpdate mutuallyExclusiveCall]
  -[CXCallUpdate identificationCategory]
  -[CXCallUpdate mediaPlaybackOnExternalDevice]
  -[CXCallUpdate handoffContext]
  -[CXCallUpdate updateSanitizedCopy:withZone:]
  -[CXCallUpdate updateCopy:withZone:]
  -[CXCallUpdate setHandoffContext:]
  -[CXCallUpdate setHasSet:]
  -[CXCallUpdate remoteHandle]
  -[CXCallUpdate setRemoteHandle:]
  -[CXCallUpdate mayRequireBreakBeforeMake]
  -[CXCallUpdate audioInterruptionProvider]
  -[CXCallUpdate audioInterruptionOperationMode]
  -[CXCallUpdate requiresInCallSounds]
  -[CXCallUpdate inCallSoundRegion]
  -[CXCallUpdate crossDeviceIdentifier]
  -[CXCallUpdate activeRemoteParticipantHandles]
  -[CXCallUpdate ignoresBluetoothDeviceUID]
  -[CXCallUpdate setMayRequireBreakBeforeMake:]
  -[CXCallUpdate setAudioInterruptionProvider:]
  -[CXCallUpdate setAudioInterruptionOperationMode:]
  -[CXCallUpdate setRequiresInCallSounds:]
  -[CXCallUpdate setInCallSoundRegion:]
  -[CXCallUpdate setCrossDeviceIdentifier:]
  -[CXCallUpdate setActiveRemoteParticipantHandles:]
  -[CXCallUpdate setIdentificationCategory:]
  -[CXCallUpdate setIgnoresBluetoothDeviceUID:]
  -[CXCallUpdate updateWithUpdate:]


CXCallDirectoryStoreExtension : NSObject <NSSecureCoding>
 @property  NSString *identifier
 @property  long long primaryKey
 @property  long long priority
 @property  long long state
 @property  NSDate *stateLastModified

  // class methods
  +[CXCallDirectoryStoreExtension supportsSecureCoding]

  // instance methods
  -[CXCallDirectoryStoreExtension initWithCoder:]
  -[CXCallDirectoryStoreExtension .cxx_destruct]
  -[CXCallDirectoryStoreExtension setState:]
  -[CXCallDirectoryStoreExtension setPriority:]
  -[CXCallDirectoryStoreExtension identifier]
  -[CXCallDirectoryStoreExtension state]
  -[CXCallDirectoryStoreExtension priority]
  -[CXCallDirectoryStoreExtension primaryKey]
  -[CXCallDirectoryStoreExtension setIdentifier:]
  -[CXCallDirectoryStoreExtension encodeWithCoder:]
  -[CXCallDirectoryStoreExtension setPrimaryKey:]
  -[CXCallDirectoryStoreExtension setStateLastModified:]
  -[CXCallDirectoryStoreExtension stateLastModified]


CXVoicemailSource : NSObject <CXVoicemailProviderHostProtocol, CXVoicemailProviderVendorProtocol>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXVoicemailProviderVendorProtocol> *vendorProtocolDelegate
 @property  BOOL connected
 @property  <CXVoicemailSourceDelegate> *delegate
 @property  NSString *identifier
 @property  NSString *bundleIdentifier
 @property  NSURL *bundleURL
 @property  int processIdentifier
 @property  BOOL permittedToUsePrivateAPI
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXVoicemailSource bundle]
  -[CXVoicemailSource isConnected]
  -[CXVoicemailSource bundleIdentifier]
  -[CXVoicemailSource .cxx_destruct]
  -[CXVoicemailSource setDelegate:]
  -[CXVoicemailSource bundleURL]
  -[CXVoicemailSource isPermittedToUsePrivateAPI]
  -[CXVoicemailSource init]
  -[CXVoicemailSource setQueue:]
  -[CXVoicemailSource setConnected:]
  -[CXVoicemailSource identifier]
  -[CXVoicemailSource processIdentifier]
  -[CXVoicemailSource delegate]
  -[CXVoicemailSource vendorProtocolDelegate]
  -[CXVoicemailSource queue]
  -[CXVoicemailSource actionCompleted:]
  -[CXVoicemailSource commitTransaction:]
  -[CXVoicemailSource handleActionTimeout:]
  -[CXVoicemailSource registerWithConfiguration:]
  -[CXVoicemailSource requestTransaction:reply:]
  -[CXVoicemailSource beginWithCompletionHandler:]
  -[CXVoicemailSource reportNewVoicemailsWithUpdates:]
  -[CXVoicemailSource reportVoicemailsUpdated:]
  -[CXVoicemailSource reportVoicemailsRemovedWithUUIDs:]


CXSetRelayingCallAction : CXCallAction
 @property  BOOL relaying

  // class methods
  +[CXSetRelayingCallAction supportsSecureCoding]

  // instance methods
  -[CXSetRelayingCallAction initWithCoder:]
  -[CXSetRelayingCallAction customDescription]
  -[CXSetRelayingCallAction encodeWithCoder:]
  -[CXSetRelayingCallAction sanitizedCopyWithZone:]
  -[CXSetRelayingCallAction updateCopy:withZone:]
  -[CXSetRelayingCallAction isRelaying]
  -[CXSetRelayingCallAction setRelaying:]
  -[CXSetRelayingCallAction initWithCallUUID:relaying:]


CXStartCallAction : CXCallAction <CXVideoAspectRatioDescriptor>
 @property  NSDate *dateStarted
 @property  BOOL relay
 @property  BOOL upgrade
 @property  BOOL retry
 @property  BOOL emergency
 @property  BOOL voicemail
 @property  long long ttyType
 @property  NSUUID *localSenderIdentityUUID
 @property  BOOL shouldSuppressInCallUI
 @property  CXHandle *handle
 @property  NSString *contactIdentifier
 @property  BOOL video
 @property  {CGSize=dd} localLandscapeAspectRatio
 @property  {CGSize=dd} localPortraitAspectRatio
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXStartCallAction supportsSecureCoding]
  +[CXStartCallAction timeout]

  // instance methods
  -[CXStartCallAction setHandle:]
  -[CXStartCallAction isVideo]
  -[CXStartCallAction initWithCoder:]
  -[CXStartCallAction setVideo:]
  -[CXStartCallAction setContactIdentifier:]
  -[CXStartCallAction fulfill]
  -[CXStartCallAction .cxx_destruct]
  -[CXStartCallAction ttyType]
  -[CXStartCallAction contactIdentifier]
  -[CXStartCallAction setLocalSenderIdentityUUID:]
  -[CXStartCallAction localLandscapeAspectRatio]
  -[CXStartCallAction setEmergency:]
  -[CXStartCallAction localPortraitAspectRatio]
  -[CXStartCallAction isRetry]
  -[CXStartCallAction setLocalPortraitAspectRatio:]
  -[CXStartCallAction setLocalLandscapeAspectRatio:]
  -[CXStartCallAction customDescription]
  -[CXStartCallAction handle]
  -[CXStartCallAction isRelay]
  -[CXStartCallAction setTTYType:]
  -[CXStartCallAction encodeWithCoder:]
  -[CXStartCallAction setRelay:]
  -[CXStartCallAction isVoicemail]
  -[CXStartCallAction isEmergency]
  -[CXStartCallAction shouldSuppressInCallUI]
  -[CXStartCallAction setShouldSuppressInCallUI:]
  -[CXStartCallAction localSenderIdentityUUID]
  -[CXStartCallAction setVoicemail:]
  -[CXStartCallAction updateSanitizedCopy:withZone:]
  -[CXStartCallAction updateCopy:withZone:]
  -[CXStartCallAction dateStarted]
  -[CXStartCallAction isUpgrade]
  -[CXStartCallAction fulfillWithDateStarted:]
  -[CXStartCallAction updateAsFulfilledWithDateStarted:]
  -[CXStartCallAction setDateStarted:]
  -[CXStartCallAction setUpgrade:]
  -[CXStartCallAction initWithCallUUID:handle:]
  -[CXStartCallAction setRetry:]


CXLabeledHandle : NSObject <NSCopying, NSSecureCoding>
 @property  CXHandle *handle
 @property  NSString *label

  // class methods
  +[CXLabeledHandle supportsSecureCoding]

  // instance methods
  -[CXLabeledHandle label]
  -[CXLabeledHandle setHandle:]
  -[CXLabeledHandle initWithCoder:]
  -[CXLabeledHandle .cxx_destruct]
  -[CXLabeledHandle init]
  -[CXLabeledHandle isEqual:]
  -[CXLabeledHandle handle]
  -[CXLabeledHandle setLabel:]
  -[CXLabeledHandle copyWithZone:]
  -[CXLabeledHandle encodeWithCoder:]
  -[CXLabeledHandle isEqualToLabeledHandle:]
  -[CXLabeledHandle initWithHandle:label:]


CXAccount : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *UUID
 @property  NSString *accountDescription
 @property  NSString *shortLabel
 @property  CXHandle *handle
 @property  NSString *isoCountryCode
 @property  NSString *serviceName

  // class methods
  +[CXAccount supportsSecureCoding]
  +[CXAccount unarchivedObjectClasses]
  +[CXAccount unarchivedObjectFromData:error:]

  // instance methods
  -[CXAccount accountDescription]
  -[CXAccount shortLabel]
  -[CXAccount isoCountryCode]
  -[CXAccount UUID]
  -[CXAccount serviceName]
  -[CXAccount initWithCoder:]
  -[CXAccount archivedDataWithError:]
  -[CXAccount .cxx_destruct]
  -[CXAccount init]
  -[CXAccount isEqual:]
  -[CXAccount handle]
  -[CXAccount isEqualToAccount:]
  -[CXAccount copyWithZone:]
  -[CXAccount encodeWithCoder:]
  -[CXAccount initWithUUID:description:serviceName:isoCountryCode:handle:]
  -[CXAccount initWithUUID:description:serviceName:isoCountryCode:handle:shortLabel:]


CXSandboxExtendedURL : NSObject <NSSecureCoding, NSCopying>
 @property  NSURL *URL
 @property  NSString *sandboxExtensionToken
 @property  long long sandboxExtensionHandle

  // class methods
  +[CXSandboxExtendedURL supportsSecureCoding]

  // instance methods
  -[CXSandboxExtendedURL initWithCoder:]
  -[CXSandboxExtendedURL setURL:]
  -[CXSandboxExtendedURL sandboxExtensionHandle]
  -[CXSandboxExtendedURL .cxx_destruct]
  -[CXSandboxExtendedURL setSandboxExtensionHandle:]
  -[CXSandboxExtendedURL init]
  -[CXSandboxExtendedURL isEqual:]
  -[CXSandboxExtendedURL sandboxExtensionToken]
  -[CXSandboxExtendedURL URL]
  -[CXSandboxExtendedURL setSandboxExtensionToken:]
  -[CXSandboxExtendedURL copyWithZone:]
  -[CXSandboxExtendedURL encodeWithCoder:]
  -[CXSandboxExtendedURL initWithURL:]
  -[CXSandboxExtendedURL isEqualToSandboxExtendedURL:]


CXEnableVideoCallAction : CXCallAction <NSSecureCoding>
 @property  BOOL videoEnabled

  // class methods
  +[CXEnableVideoCallAction supportsSecureCoding]

  // instance methods
  -[CXEnableVideoCallAction initWithCoder:]
  -[CXEnableVideoCallAction setVideoEnabled:]
  -[CXEnableVideoCallAction customDescription]
  -[CXEnableVideoCallAction encodeWithCoder:]
  -[CXEnableVideoCallAction isVideoEnabled]
  -[CXEnableVideoCallAction sanitizedCopyWithZone:]
  -[CXEnableVideoCallAction updateCopy:withZone:]
  -[CXEnableVideoCallAction initWithCallUUID:videoEnabled:]


CXSetMutedCallAction : CXCallAction
 @property  BOOL muted

  // class methods
  +[CXSetMutedCallAction supportsSecureCoding]

  // instance methods
  -[CXSetMutedCallAction setMuted:]
  -[CXSetMutedCallAction isMuted]
  -[CXSetMutedCallAction initWithCoder:]
  -[CXSetMutedCallAction customDescription]
  -[CXSetMutedCallAction encodeWithCoder:]
  -[CXSetMutedCallAction updateSanitizedCopy:withZone:]
  -[CXSetMutedCallAction initWithCallUUID:muted:]


CXSetTTYTypeCallAction : CXCallAction
 @property  long long ttyType

  // class methods
  +[CXSetTTYTypeCallAction supportsSecureCoding]

  // instance methods
  -[CXSetTTYTypeCallAction initWithCoder:]
  -[CXSetTTYTypeCallAction ttyType]
  -[CXSetTTYTypeCallAction customDescription]
  -[CXSetTTYTypeCallAction setTtyType:]
  -[CXSetTTYTypeCallAction encodeWithCoder:]
  -[CXSetTTYTypeCallAction sanitizedCopyWithZone:]
  -[CXSetTTYTypeCallAction updateCopy:withZone:]
  -[CXSetTTYTypeCallAction initWithCallUUID:ttyType:]


CXXPCVoicemailSource : CXVoicemailSource
 @property  NSXPCConnection *connection
 @property  NSString *applicationIdentifier
 @property  NSString *bundleIdentifier
 @property  NSURL *bundleURL
 @property  NSSet *capabilities

  // instance methods
  -[CXXPCVoicemailSource applicationIdentifier]
  -[CXXPCVoicemailSource setCapabilities:]
  -[CXXPCVoicemailSource setApplicationIdentifier:]
  -[CXXPCVoicemailSource isConnected]
  -[CXXPCVoicemailSource bundleIdentifier]
  -[CXXPCVoicemailSource capabilities]
  -[CXXPCVoicemailSource .cxx_destruct]
  -[CXXPCVoicemailSource setConnection:]
  -[CXXPCVoicemailSource setBundleIdentifier:]
  -[CXXPCVoicemailSource bundleURL]
  -[CXXPCVoicemailSource isPermittedToUsePrivateAPI]
  -[CXXPCVoicemailSource init]
  -[CXXPCVoicemailSource initWithConnection:]
  -[CXXPCVoicemailSource connection]
  -[CXXPCVoicemailSource identifier]
  -[CXXPCVoicemailSource processIdentifier]
  -[CXXPCVoicemailSource vendorProtocolDelegate]
  -[CXXPCVoicemailSource dealloc]
  -[CXXPCVoicemailSource setBundleURL:]


CXCallDirectoryIdentificationEntry : NSObject <NSSecureCoding>
 @property  NSString *extensionIdentifier
 @property  NSString *localizedExtensionName
 @property  NSString *localizedExtensionContainingAppName
 @property  NSString *localizedLabel

  // class methods
  +[CXCallDirectoryIdentificationEntry supportsSecureCoding]

  // instance methods
  -[CXCallDirectoryIdentificationEntry initWithCoder:]
  -[CXCallDirectoryIdentificationEntry .cxx_destruct]
  -[CXCallDirectoryIdentificationEntry setLocalizedLabel:]
  -[CXCallDirectoryIdentificationEntry localizedLabel]
  -[CXCallDirectoryIdentificationEntry setExtensionIdentifier:]
  -[CXCallDirectoryIdentificationEntry extensionIdentifier]
  -[CXCallDirectoryIdentificationEntry encodeWithCoder:]
  -[CXCallDirectoryIdentificationEntry localizedExtensionContainingAppName]
  -[CXCallDirectoryIdentificationEntry localizedExtensionName]
  -[CXCallDirectoryIdentificationEntry setLocalizedExtensionName:]
  -[CXCallDirectoryIdentificationEntry setLocalizedExtensionContainingAppName:]


CXProvider : NSObject <CXActionDelegate, CXProviderVendorProtocol>
 @property  <CXProviderDelegate> *delegate
 @property  <CXProviderDelegatePrivate> *privateDelegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSObject<OS_dispatch_queue> *completionQueue
 @property  NSMutableArray *mutablePendingTransactions
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXProviderHostProtocol> *hostProtocolDelegate
 @property  BOOL requiresProxyingAVAudioSessionState
 @property  CXProviderConfiguration *configuration
 @property  NSArray *pendingTransactions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXProvider allocWithZone:]
  +[CXProvider reportNewIncomingVoIPPushPayload:completion:]

  // instance methods
  -[CXProvider setDelegate:queue:]
  -[CXProvider completionQueue]
  -[CXProvider delegateQueue]
  -[CXProvider setDelegateQueue:]
  -[CXProvider _performAction:]
  -[CXProvider configuration]
  -[CXProvider .cxx_destruct]
  -[CXProvider setCompletionQueue:]
  -[CXProvider _performDelegateCallback:]
  -[CXProvider setDelegate:]
  -[CXProvider init]
  -[CXProvider setQueue:]
  -[CXProvider pendingTransactions]
  -[CXProvider initWithConfiguration:]
  -[CXProvider delegate]
  -[CXProvider queue]
  -[CXProvider privateDelegate]
  -[CXProvider invalidate]
  -[CXProvider performDelegateCallback:]
  -[CXProvider requestTransaction:completion:]
  -[CXProvider setConfiguration:]
  -[CXProvider performCompletionBlock:]
  -[CXProvider actionCompleted:]
  -[CXProvider commitTransaction:]
  -[CXProvider handleActionTimeout:]
  -[CXProvider handleAudioSessionActivationStateChangedTo:]
  -[CXProvider reportCallWithUUID:updated:]
  -[CXProvider reportOutgoingCallWithUUID:sentInvitationAtDate:]
  -[CXProvider reportOutgoingCallWithUUID:startedConnectingAtDate:]
  -[CXProvider reportOutgoingCallWithUUID:connectedAtDate:]
  -[CXProvider reportCallWithUUID:endedAtDate:privateReason:failureContext:]
  -[CXProvider reportAudioFinishedForCallWithUUID:]
  -[CXProvider reportCallWithUUID:changedFrequencyData:forDirection:]
  -[CXProvider reportCallWithUUID:changedMeterLevel:forDirection:]
  -[CXProvider reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:]
  -[CXProvider mutablePendingTransactions]
  -[CXProvider _pendingActionWithUUID:]
  -[CXProvider hostProtocolDelegate]
  -[CXProvider _updatePendingTransactions]
  -[CXProvider sendProviderDidBegin]
  -[CXProvider handleConnectionInterruption]
  -[CXProvider reportNewIncomingCallWithUUID:update:completion:]
  -[CXProvider registerCurrentConfiguration]
  -[CXProvider requiresProxyingAVAudioSessionState]
  -[CXProvider handleMediaServicesWereResetNotification:]
  -[CXProvider reportCallWithUUID:endedAtDate:privateReason:]
  -[CXProvider pendingCallActionsOfClass:withCallUUID:]
  -[CXProvider reportCallWithUUID:endedAtDate:reason:]
  -[CXProvider reportCallWithUUID:failedAtDate:withContext:]
  -[CXProvider setMutablePendingTransactions:]


CXCallController : NSObject
 @property  NSObject<OS_dispatch_queue> *completionQueue
 @property  CXCallObserver *callObserver

  // instance methods
  -[CXCallController callObserver]
  -[CXCallController completionQueue]
  -[CXCallController .cxx_destruct]
  -[CXCallController init]
  -[CXCallController initWithQueue:]
  -[CXCallController setCallObserver:]
  -[CXCallController requestTransaction:completion:]
  -[CXCallController _requestTransaction:completion:]
  -[CXCallController requestTransactionWithActions:completion:]
  -[CXCallController requestTransactionWithAction:completion:]


CXCallObserverXPCClient : NSObject <CXCallObserverDataSource>
 @property  NSMutableDictionary *mutableCallUUIDToCallMap
 @property  NSHashTable *delegates
 @property  NSXPCConnection *connection
 @property  int clientsShouldConnectToken
 @property  BOOL clientsShouldConnect
 @property  NSObject<OS_dispatch_queue> *concurrentQueue
 @property  NSDictionary *callUUIDToCallMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallObserverXPCClient sharedXPCClient]
  +[CXCallObserverXPCClient sharedXPCClientSemaphore]
  +[CXCallObserverXPCClient releaseSharedXPCClient]

  // instance methods
  -[CXCallObserverXPCClient removeDelegate:]
  -[CXCallObserverXPCClient concurrentQueue]
  -[CXCallObserverXPCClient _addOrUpdateCall:]
  -[CXCallObserverXPCClient clientsShouldConnect]
  -[CXCallObserverXPCClient clientsShouldConnectToken]
  -[CXCallObserverXPCClient .cxx_destruct]
  -[CXCallObserverXPCClient addOrUpdateCall:]
  -[CXCallObserverXPCClient delegates]
  -[CXCallObserverXPCClient removeCall:]
  -[CXCallObserverXPCClient setClientsShouldConnect:]
  -[CXCallObserverXPCClient setConnection:]
  -[CXCallObserverXPCClient init]
  -[CXCallObserverXPCClient connection]
  -[CXCallObserverXPCClient _remoteObjectProxyWithErrorHandler:isSynchronous:]
  -[CXCallObserverXPCClient _removeCall:]
  -[CXCallObserverXPCClient _invalidate]
  -[CXCallObserverXPCClient setClientsShouldConnectToken:]
  -[CXCallObserverXPCClient _init]
  -[CXCallObserverXPCClient dealloc]
  -[CXCallObserverXPCClient _requestCalls]
  -[CXCallObserverXPCClient invalidate]
  -[CXCallObserverXPCClient callUUIDToCallMap]
  -[CXCallObserverXPCClient _markAllCallsAsEnded]
  -[CXCallObserverXPCClient mutableCallUUIDToCallMap]
  -[CXCallObserverXPCClient addDelegate:]
  -[CXCallObserverXPCClient requestTransaction:completion:]


CXSetSendingVideoCallAction : CXCallAction
 @property  BOOL sendingVideo

  // class methods
  +[CXSetSendingVideoCallAction supportsSecureCoding]

  // instance methods
  -[CXSetSendingVideoCallAction initWithCoder:]
  -[CXSetSendingVideoCallAction customDescription]
  -[CXSetSendingVideoCallAction encodeWithCoder:]
  -[CXSetSendingVideoCallAction sanitizedCopyWithZone:]
  -[CXSetSendingVideoCallAction isSendingVideo]
  -[CXSetSendingVideoCallAction updateCopy:withZone:]
  -[CXSetSendingVideoCallAction setSendingVideo:]
  -[CXSetSendingVideoCallAction initWithCallUUID:sendingVideo:]


CXVoicemailProvider : CXAbstractProvider <CXVoicemailProviderVendorProtocol>
 @property  <CXVoicemailProviderDelegate> *delegate
 @property  <CXVoicemailProviderHostProtocol> *hostProtocolDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXVoicemailProvider setDelegate:queue:]
  -[CXVoicemailProvider _performAction:]
  -[CXVoicemailProvider reportNewVoicemailsWithUpdates:]
  -[CXVoicemailProvider reportVoicemailsUpdated:]
  -[CXVoicemailProvider reportVoicemailsRemovedWithUUIDs:]
  -[CXVoicemailProvider pendingVoicemailActionsOfClass:withVoicemailUUID:]
  -[CXVoicemailProvider reportNewVoicemailWithUpdate:]
  -[CXVoicemailProvider reportVoicemailUpdated:]
  -[CXVoicemailProvider reportVoicemailRemovedWithUUID:]


CXCallDirectoryExtensionManager : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXCallDirectoryExtensionManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  CXCallDirectoryManager *manager
 @property  int storeExtensionsChangedNotifyToken

  // instance methods
  -[CXCallDirectoryExtensionManager setDelegate:queue:]
  -[CXCallDirectoryExtensionManager delegateQueue]
  -[CXCallDirectoryExtensionManager setDelegateQueue:]
  -[CXCallDirectoryExtensionManager .cxx_destruct]
  -[CXCallDirectoryExtensionManager setDelegate:]
  -[CXCallDirectoryExtensionManager init]
  -[CXCallDirectoryExtensionManager setQueue:]
  -[CXCallDirectoryExtensionManager manager]
  -[CXCallDirectoryExtensionManager delegate]
  -[CXCallDirectoryExtensionManager queue]
  -[CXCallDirectoryExtensionManager dealloc]
  -[CXCallDirectoryExtensionManager setPrioritizedExtensionIdentifiers:completionHandler:]
  -[CXCallDirectoryExtensionManager extensionsWithCompletionHandler:]
  -[CXCallDirectoryExtensionManager _extensionsChanged]
  -[CXCallDirectoryExtensionManager beginObservingExtensions]
  -[CXCallDirectoryExtensionManager setEnabled:forExtension:completion:]
  -[CXCallDirectoryExtensionManager storeExtensionsChangedNotifyToken]
  -[CXCallDirectoryExtensionManager setStoreExtensionsChangedNotifyToken:]


CXCallControllerHostConnection : NSObject <CXCallControllerHostProtocol, CXCallControllerVendorProtocol>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSXPCConnection *connection
 @property  BOOL hasVoIPBackgroundMode
 @property  NSString *applicationIdentifier
 @property  NSURL *bundleURL
 @property  NSSet *capabilities
 @property  <CXCallControllerVendorProtocol> *remoteObjectProxy
 @property  BOOL entitledForPublicAPI
 @property  BOOL entitledForPrivateAPI
 @property  <CXCallControllerHostConnectionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallControllerHostConnection applicationIdentifier]
  -[CXCallControllerHostConnection setCapabilities:]
  -[CXCallControllerHostConnection setSerialQueue:]
  -[CXCallControllerHostConnection setApplicationIdentifier:]
  -[CXCallControllerHostConnection capabilities]
  -[CXCallControllerHostConnection .cxx_destruct]
  -[CXCallControllerHostConnection addOrUpdateCall:]
  -[CXCallControllerHostConnection removeCall:]
  -[CXCallControllerHostConnection remoteObjectProxy]
  -[CXCallControllerHostConnection setConnection:]
  -[CXCallControllerHostConnection setDelegate:]
  -[CXCallControllerHostConnection hasVoIPBackgroundMode]
  -[CXCallControllerHostConnection bundleURL]
  -[CXCallControllerHostConnection serialQueue]
  -[CXCallControllerHostConnection isPermittedToUsePrivateAPI]
  -[CXCallControllerHostConnection init]
  -[CXCallControllerHostConnection connection]
  -[CXCallControllerHostConnection delegate]
  -[CXCallControllerHostConnection dealloc]
  -[CXCallControllerHostConnection setBundleURL:]
  -[CXCallControllerHostConnection isPermittedToUsePublicAPI]
  -[CXCallControllerHostConnection requestTransaction:reply:]
  -[CXCallControllerHostConnection initWithConnection:serialQueue:]
  -[CXCallControllerHostConnection requestCalls:]
  -[CXCallControllerHostConnection setHasVoIPBackgroundMode:]


CXCallDirectoryManager : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSXPCConnection *defaultConnection
 @property  NSXPCConnection *maintenanceConnection

  // class methods
  +[CXCallDirectoryManager sharedInstance]

  // instance methods
  -[CXCallDirectoryManager maintenanceConnectionRemoteObjectProxyWithErrorHandler:]
  -[CXCallDirectoryManager defaultConnectionRemoteObjectProxyWithErrorHandler:]
  -[CXCallDirectoryManager compactStoreWithCompletionHandler:]
  -[CXCallDirectoryManager defaultConnection]
  -[CXCallDirectoryManager .cxx_destruct]
  -[CXCallDirectoryManager setEnabled:forExtensionWithIdentifier:completionHandler:]
  -[CXCallDirectoryManager synchronizeExtensionsWithCompletionHandler:]
  -[CXCallDirectoryManager maintenanceConnection]
  -[CXCallDirectoryManager getExtensionsWithCompletionHandler:]
  -[CXCallDirectoryManager init]
  -[CXCallDirectoryManager setQueue:]
  -[CXCallDirectoryManager reloadExtensionWithIdentifier:completionHandler:]
  -[CXCallDirectoryManager getEnabledStatusForExtensionWithIdentifier:completionHandler:]
  -[CXCallDirectoryManager firstIdentificationEntriesForEnabledExtensionsWithPhoneNumbers:completionHandler:]
  -[CXCallDirectoryManager setDefaultConnection:]
  -[CXCallDirectoryManager queue]
  -[CXCallDirectoryManager dealloc]
  -[CXCallDirectoryManager firstIdentificationEntryForEnabledExtensionWithPhoneNumber:completionHandler:]
  -[CXCallDirectoryManager setMaintenanceConnection:]
  -[CXCallDirectoryManager openSettingsWithCompletionHandler:]
  -[CXCallDirectoryManager setPrioritizedExtensionIdentifiers:completionHandler:]


CXXPCProvider : CXProvider
 @property  NSXPCConnection *connection
 @property  int notifyToken

  // instance methods
  -[CXXPCProvider notifyToken]
  -[CXXPCProvider setNotifyToken:]
  -[CXXPCProvider .cxx_destruct]
  -[CXXPCProvider setConnection:]
  -[CXXPCProvider connection]
  -[CXXPCProvider initWithConfiguration:]
  -[CXXPCProvider dealloc]
  -[CXXPCProvider invalidate]
  -[CXXPCProvider hostProtocolDelegate]
  -[CXXPCProvider requiresProxyingAVAudioSessionState]


CXEndCallAction : CXCallAction
 @property  NSDate *dateEnded

  // class methods
  +[CXEndCallAction supportsSecureCoding]

  // instance methods
  -[CXEndCallAction initWithCoder:]
  -[CXEndCallAction fulfill]
  -[CXEndCallAction .cxx_destruct]
  -[CXEndCallAction customDescription]
  -[CXEndCallAction encodeWithCoder:]
  -[CXEndCallAction dateEnded]
  -[CXEndCallAction setDateEnded:]
  -[CXEndCallAction updateSanitizedCopy:withZone:]
  -[CXEndCallAction fulfillWithDateEnded:]
  -[CXEndCallAction updateAsFulfilledWithDateEnded:]


CXVoicemail : NSObject <NSSecureCoding, CXCopying>
 @property  NSUUID *UUID
 @property  CXHandle *sender
 @property  NSDate *dateReceived
 @property  NSURL *audioFileURL
 @property  BOOL played
 @property  BOOL trashed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXVoicemail supportsSecureCoding]

  // instance methods
  -[CXVoicemail setSender:]
  -[CXVoicemail UUID]
  -[CXVoicemail initWithCoder:]
  -[CXVoicemail isPlayed]
  -[CXVoicemail .cxx_destruct]
  -[CXVoicemail initWithUUID:]
  -[CXVoicemail sender]
  -[CXVoicemail init]
  -[CXVoicemail isEqual:]
  -[CXVoicemail setAudioFileURL:]
  -[CXVoicemail setTrashed:]
  -[CXVoicemail audioFileURL]
  -[CXVoicemail isTrashed]
  -[CXVoicemail setDateReceived:]
  -[CXVoicemail copyWithZone:]
  -[CXVoicemail sanitizedCopy]
  -[CXVoicemail encodeWithCoder:]
  -[CXVoicemail setPlayed:]
  -[CXVoicemail dateReceived]
  -[CXVoicemail sanitizedCopyWithZone:]
  -[CXVoicemail updateSanitizedCopy:withZone:]
  -[CXVoicemail updateCopy:withZone:]
  -[CXVoicemail isEqualToVoicemail:]


CXNetworkExtensionMessageControllerHost : NSObject <NSXPCListenerDelegate, CXNetworkExtensionMessageControllerHostConnectionDelegate>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSMutableSet *connections
 @property  NSMapTable *delegateToQueue
 @property  NSXPCListener *xpcListener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXNetworkExtensionMessageControllerHost removeDelegate:]
  -[CXNetworkExtensionMessageControllerHost accessorLock]
  -[CXNetworkExtensionMessageControllerHost addDelegate:queue:]
  -[CXNetworkExtensionMessageControllerHost xpcListener]
  -[CXNetworkExtensionMessageControllerHost .cxx_destruct]
  -[CXNetworkExtensionMessageControllerHost init]
  -[CXNetworkExtensionMessageControllerHost connections]
  -[CXNetworkExtensionMessageControllerHost delegateToQueue]
  -[CXNetworkExtensionMessageControllerHost listener:shouldAcceptNewConnection:]
  -[CXNetworkExtensionMessageControllerHost networkExtensionMessageControllerHostConnectionInvalidated:]
  -[CXNetworkExtensionMessageControllerHost networkExtensionMessageControllerHostConnection:didReceiveIncomingMessage:forBundleIdentifier:]


CXSetVideoPresentationSizeCallAction : CXCallAction
 @property  {CGSize=dd} videoPresentationSize

  // class methods
  +[CXSetVideoPresentationSizeCallAction supportsSecureCoding]

  // instance methods
  -[CXSetVideoPresentationSizeCallAction initWithCoder:]
  -[CXSetVideoPresentationSizeCallAction customDescription]
  -[CXSetVideoPresentationSizeCallAction encodeWithCoder:]
  -[CXSetVideoPresentationSizeCallAction sanitizedCopyWithZone:]
  -[CXSetVideoPresentationSizeCallAction updateCopy:withZone:]
  -[CXSetVideoPresentationSizeCallAction videoPresentationSize]
  -[CXSetVideoPresentationSizeCallAction setVideoPresentationSize:]
  -[CXSetVideoPresentationSizeCallAction initWithCallUUID:videoPresentationSize:]


CXSetVideoPresentationStateCallAction : CXCallAction
 @property  long long videoPresentationState

  // class methods
  +[CXSetVideoPresentationStateCallAction supportsSecureCoding]

  // instance methods
  -[CXSetVideoPresentationStateCallAction initWithCoder:]
  -[CXSetVideoPresentationStateCallAction customDescription]
  -[CXSetVideoPresentationStateCallAction encodeWithCoder:]
  -[CXSetVideoPresentationStateCallAction sanitizedCopyWithZone:]
  -[CXSetVideoPresentationStateCallAction updateCopy:withZone:]
  -[CXSetVideoPresentationStateCallAction videoPresentationState]
  -[CXSetVideoPresentationStateCallAction setVideoPresentationState:]
  -[CXSetVideoPresentationStateCallAction initWithCallUUID:videoPresentationState:]


CXVoicemailControllerHostConnection : NSObject <CXVoicemailControllerHostProtocol, CXVoicemailControllerVendorProtocol>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSXPCConnection *connection
 @property  NSString *applicationIdentifier
 @property  NSURL *bundleURL
 @property  NSSet *capabilities
 @property  <CXVoicemailControllerVendorProtocol> *remoteObjectProxy
 @property  BOOL permittedToUsePrivateAPI
 @property  <CXVoicemailControllerHostConnectionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXVoicemailControllerHostConnection applicationIdentifier]
  -[CXVoicemailControllerHostConnection setCapabilities:]
  -[CXVoicemailControllerHostConnection setSerialQueue:]
  -[CXVoicemailControllerHostConnection setApplicationIdentifier:]
  -[CXVoicemailControllerHostConnection capabilities]
  -[CXVoicemailControllerHostConnection .cxx_destruct]
  -[CXVoicemailControllerHostConnection remoteObjectProxy]
  -[CXVoicemailControllerHostConnection setConnection:]
  -[CXVoicemailControllerHostConnection setDelegate:]
  -[CXVoicemailControllerHostConnection bundleURL]
  -[CXVoicemailControllerHostConnection serialQueue]
  -[CXVoicemailControllerHostConnection isPermittedToUsePrivateAPI]
  -[CXVoicemailControllerHostConnection init]
  -[CXVoicemailControllerHostConnection connection]
  -[CXVoicemailControllerHostConnection delegate]
  -[CXVoicemailControllerHostConnection dealloc]
  -[CXVoicemailControllerHostConnection setBundleURL:]
  -[CXVoicemailControllerHostConnection requestTransaction:reply:]
  -[CXVoicemailControllerHostConnection initWithConnection:serialQueue:]
  -[CXVoicemailControllerHostConnection requestVoicemails:]
  -[CXVoicemailControllerHostConnection addOrUpdateVoicemails:]
  -[CXVoicemailControllerHostConnection removeVoicemails:]


CXInProcessProvider : CXProvider
 @property  CXInProcessCallSource *callSource
 @property  NSString *identifier

  // instance methods
  -[CXInProcessProvider setDelegate:queue:]
  -[CXInProcessProvider .cxx_destruct]
  -[CXInProcessProvider identifier]
  -[CXInProcessProvider initWithConfiguration:]
  -[CXInProcessProvider hostProtocolDelegate]
  -[CXInProcessProvider callSource]
  -[CXInProcessProvider initWithConfiguration:callSource:]
  -[CXInProcessProvider setCallSource:]


CXJoinCallActivity : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *applicationContext
 @property  NSString *bundleIdentifier
 @property  NSString *activityIdentifier
 @property  NSData *metadata
 @property  NSDate *timestamp
 @property  NSUUID *UUID

  // class methods
  +[CXJoinCallActivity supportsSecureCoding]

  // instance methods
  -[CXJoinCallActivity applicationContext]
  -[CXJoinCallActivity setApplicationContext:]
  -[CXJoinCallActivity UUID]
  -[CXJoinCallActivity initWithCoder:]
  -[CXJoinCallActivity bundleIdentifier]
  -[CXJoinCallActivity .cxx_destruct]
  -[CXJoinCallActivity setBundleIdentifier:]
  -[CXJoinCallActivity isEqual:]
  -[CXJoinCallActivity metadata]
  -[CXJoinCallActivity setActivityIdentifier:]
  -[CXJoinCallActivity setMetadata:]
  -[CXJoinCallActivity timestamp]
  -[CXJoinCallActivity copyWithZone:]
  -[CXJoinCallActivity setTimestamp:]
  -[CXJoinCallActivity activityIdentifier]
  -[CXJoinCallActivity encodeWithCoder:]
  -[CXJoinCallActivity setUUID:]
  -[CXJoinCallActivity isEqualToJoinCallActivity:]
  -[CXJoinCallActivity initWithBundleIdentifier:metadata:applicationContext:activityIdentifier:]


CXCallDirectoryExtension : NSObject <NSSecureCoding>
 @property  NSString *identifier
 @property  long long state
 @property  long long priority
 @property  NSString *localizedName
 @property  NSString *localizedContainingAppName
 @property  LSPlugInKitProxy *plugInKitProxy
 @property  BOOL onlyExtensionInContainingApp

  // class methods
  +[CXCallDirectoryExtension supportsSecureCoding]

  // instance methods
  -[CXCallDirectoryExtension localizedName]
  -[CXCallDirectoryExtension initWithCoder:]
  -[CXCallDirectoryExtension setLocalizedName:]
  -[CXCallDirectoryExtension .cxx_destruct]
  -[CXCallDirectoryExtension setState:]
  -[CXCallDirectoryExtension setPriority:]
  -[CXCallDirectoryExtension identifier]
  -[CXCallDirectoryExtension state]
  -[CXCallDirectoryExtension priority]
  -[CXCallDirectoryExtension setIdentifier:]
  -[CXCallDirectoryExtension encodeWithCoder:]
  -[CXCallDirectoryExtension localizedContainingAppName]
  -[CXCallDirectoryExtension plugInKitProxy]
  -[CXCallDirectoryExtension isOnlyExtensionInContainingApp]
  -[CXCallDirectoryExtension setLocalizedContainingAppName:]
  -[CXCallDirectoryExtension setPlugInKitProxy:]
  -[CXCallDirectoryExtension setOnlyExtensionInContainingApp:]


CXTransactionGroup : NSObject
 @property  NSMutableDictionary *callSourceIdentifierToTransaction
 @property  NSMutableArray *mutableCallSources
 @property  BOOL complete
 @property  NSArray *callSources
 @property  NSArray *transactions
 @property  NSArray *allActions

  // instance methods
  -[CXTransactionGroup transactions]
  -[CXTransactionGroup callSources]
  -[CXTransactionGroup .cxx_destruct]
  -[CXTransactionGroup init]
  -[CXTransactionGroup allActions]
  -[CXTransactionGroup isComplete]
  -[CXTransactionGroup addAction:forCallSource:]
  -[CXTransactionGroup transactionForCallSource:]
  -[CXTransactionGroup callSourceIdentifierToTransaction]
  -[CXTransactionGroup mutableCallSources]


CXNetworkExtensionMessageControllerXPCClient : NSObject <CXNetworkExtensionMessageControllerDataSource>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSXPCConnection *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXNetworkExtensionMessageControllerXPCClient accessorLock]
  -[CXNetworkExtensionMessageControllerXPCClient .cxx_destruct]
  -[CXNetworkExtensionMessageControllerXPCClient setConnection:]
  -[CXNetworkExtensionMessageControllerXPCClient init]
  -[CXNetworkExtensionMessageControllerXPCClient connection]
  -[CXNetworkExtensionMessageControllerXPCClient dealloc]
  -[CXNetworkExtensionMessageControllerXPCClient invalidate]
  -[CXNetworkExtensionMessageControllerXPCClient sendNetworkExtensionMessage:forBundleIdentifier:completion:]


CXNetworkExtensionMessageControllerHostConnection : NSObject <CXNetworkExtensionMessageControllerHostProtocol>
 @property  {os_unfair_lock_s=I} accessorLock
 @property  NSSet *capabilities
 @property  NSXPCConnection *connection
 @property  NSString *applicationIdentifier
 @property  <CXNetworkExtensionMessageControllerHostConnectionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXNetworkExtensionMessageControllerHostConnection applicationIdentifier]
  -[CXNetworkExtensionMessageControllerHostConnection accessorLock]
  -[CXNetworkExtensionMessageControllerHostConnection capabilities]
  -[CXNetworkExtensionMessageControllerHostConnection .cxx_destruct]
  -[CXNetworkExtensionMessageControllerHostConnection setDelegate:]
  -[CXNetworkExtensionMessageControllerHostConnection initWithConnection:]
  -[CXNetworkExtensionMessageControllerHostConnection connection]
  -[CXNetworkExtensionMessageControllerHostConnection delegate]
  -[CXNetworkExtensionMessageControllerHostConnection dealloc]
  -[CXNetworkExtensionMessageControllerHostConnection invalidate]
  -[CXNetworkExtensionMessageControllerHostConnection sendNetworkExtensionMessage:forBundleIdentifier:reply:]


CXCallDirectorySanitizer : NSObject
 @property  NSCharacterSet *phoneNumbersCharacterSet
 @property  NSCharacterSet *nonPhoneNumbersCharacterSet
 @property  NSCharacterSet *phoneNumbersIgnoredCharacterSet

  // instance methods
  -[CXCallDirectorySanitizer .cxx_destruct]
  -[CXCallDirectorySanitizer init]
  -[CXCallDirectorySanitizer phoneNumbersIgnoredCharacterSet]
  -[CXCallDirectorySanitizer nonPhoneNumbersCharacterSet]
  -[CXCallDirectorySanitizer canonicalizedPhoneNumber:]
  -[CXCallDirectorySanitizer phoneNumbersCharacterSet]


CXCallDirectoryPhoneNumberEntryData : NSObject <CXCallDirectoryEntryData, NSSecureCoding>
 @property  NSData *phoneNumberData
 @property  r^q phoneNumbers
 @property  unsigned long count
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallDirectoryPhoneNumberEntryData supportsSecureCoding]

  // instance methods
  -[CXCallDirectoryPhoneNumberEntryData initWithCoder:]
  -[CXCallDirectoryPhoneNumberEntryData .cxx_destruct]
  -[CXCallDirectoryPhoneNumberEntryData count]
  -[CXCallDirectoryPhoneNumberEntryData phoneNumbers]
  -[CXCallDirectoryPhoneNumberEntryData init]
  -[CXCallDirectoryPhoneNumberEntryData encodeWithCoder:]
  -[CXCallDirectoryPhoneNumberEntryData phoneNumberData]
  -[CXCallDirectoryPhoneNumberEntryData phoneNumberAtIndex:]
  -[CXCallDirectoryPhoneNumberEntryData setPhoneNumberData:]


CXCallDirectoryMutablePhoneNumberEntryData : CXCallDirectoryPhoneNumberEntryData <NSCopying>
 @property  NSMutableData *mutablePhoneNumberData

  // instance methods
  -[CXCallDirectoryMutablePhoneNumberEntryData initWithCapacity:]
  -[CXCallDirectoryMutablePhoneNumberEntryData .cxx_destruct]
  -[CXCallDirectoryMutablePhoneNumberEntryData init]
  -[CXCallDirectoryMutablePhoneNumberEntryData copyWithZone:]
  -[CXCallDirectoryMutablePhoneNumberEntryData mutablePhoneNumberData]
  -[CXCallDirectoryMutablePhoneNumberEntryData setMutablePhoneNumberData:]
  -[CXCallDirectoryMutablePhoneNumberEntryData appendPhoneNumber:]


CXProviderConfiguration : NSObject <NSSecureCoding, CXCopying, NSCopying>
 @property  NSString *localizedName
 @property  unsigned int audioSessionID
 @property  NSArray *emergencyHandles
 @property  NSArray *emergencyLabeledHandles
 @property  NSArray *handoffIdentifiers
 @property  NSSet *senderIdentities
 @property  NSOrderedSet *prioritizedSenderIdentities
 @property  CXSandboxExtendedURL *ringtoneSoundURL
 @property  BOOL supportsAudioOnly
 @property  BOOL supportsEmergency
 @property  BOOL supportsVoicemail
 @property  BOOL supportsCurrentPlatform
 @property  NSString *ringtoneSound
 @property  NSData *iconTemplateImageData
 @property  unsigned long maximumCallGroups
 @property  unsigned long maximumCallsPerCallGroup
 @property  BOOL includesCallsInRecents
 @property  BOOL supportsVideo
 @property  NSSet *supportedHandleTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXProviderConfiguration supportsSecureCoding]

  // instance methods
  -[CXProviderConfiguration localizedName]
  -[CXProviderConfiguration supportsCurrentPlatform]
  -[CXProviderConfiguration initWithCoder:]
  -[CXProviderConfiguration setLocalizedName:]
  -[CXProviderConfiguration .cxx_destruct]
  -[CXProviderConfiguration setAudioSessionID:]
  -[CXProviderConfiguration isEqualToConfiguration:]
  -[CXProviderConfiguration prioritizedSenderIdentities]
  -[CXProviderConfiguration init]
  -[CXProviderConfiguration initWithLocalizedName:]
  -[CXProviderConfiguration isEqual:]
  -[CXProviderConfiguration copyWithZone:]
  -[CXProviderConfiguration sanitizedCopy]
  -[CXProviderConfiguration audioSessionID]
  -[CXProviderConfiguration encodeWithCoder:]
  -[CXProviderConfiguration sanitizedCopyWithZone:]
  -[CXProviderConfiguration supportsAudioOnly]
  -[CXProviderConfiguration setSupportsAudioOnly:]
  -[CXProviderConfiguration setSupportsEmergency:]
  -[CXProviderConfiguration setSupportsVoicemail:]
  -[CXProviderConfiguration setSupportedHandleTypes:]
  -[CXProviderConfiguration iconTemplateImageData]
  -[CXProviderConfiguration maximumCallGroups]
  -[CXProviderConfiguration maximumCallsPerCallGroup]
  -[CXProviderConfiguration supportsEmergency]
  -[CXProviderConfiguration supportsVoicemail]
  -[CXProviderConfiguration supportedHandleTypes]
  -[CXProviderConfiguration emergencyHandles]
  -[CXProviderConfiguration emergencyLabeledHandles]
  -[CXProviderConfiguration handoffIdentifiers]
  -[CXProviderConfiguration setPrioritizedSenderIdentities:]
  -[CXProviderConfiguration setEmergencyHandles:]
  -[CXProviderConfiguration setEmergencyLabeledHandles:]
  -[CXProviderConfiguration setHandoffIdentifiers:]
  -[CXProviderConfiguration setIconTemplateImageData:]
  -[CXProviderConfiguration setMaximumCallGroups:]
  -[CXProviderConfiguration setMaximumCallsPerCallGroup:]
  -[CXProviderConfiguration setSupportsCurrentPlatform:]
  -[CXProviderConfiguration ringtoneSoundURL]
  -[CXProviderConfiguration setRingtoneSoundURL:]
  -[CXProviderConfiguration setSenderIdentities:]
  -[CXProviderConfiguration senderIdentities]
  -[CXProviderConfiguration updateSanitizedCopy:withZone:]
  -[CXProviderConfiguration updateCopy:withZone:]
  -[CXProviderConfiguration supportsVideo]
  -[CXProviderConfiguration includesCallsInRecents]
  -[CXProviderConfiguration setSupportsVideo:]
  -[CXProviderConfiguration setIncludesCallsInRecents:]
  -[CXProviderConfiguration ringtoneSound]
  -[CXProviderConfiguration setRingtoneSound:]


CXCallAction : CXAction
 @property  NSUUID *callUUID

  // class methods
  +[CXCallAction supportsSecureCoding]

  // instance methods
  -[CXCallAction initWithCoder:]
  -[CXCallAction .cxx_destruct]
  -[CXCallAction init]
  -[CXCallAction callUUID]
  -[CXCallAction customDescription]
  -[CXCallAction copyWithZone:]
  -[CXCallAction encodeWithCoder:]
  -[CXCallAction sanitizedCopyWithZone:]
  -[CXCallAction setCallUUID:]
  -[CXCallAction updateSanitizedCopy:withZone:]
  -[CXCallAction initWithCallUUID:]


CXCallObserver : NSObject <CXCallObserverDataSourceDelegate>
 @property  <CXCallObserverDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSObject<OS_dispatch_queue> *concurrentQueue
 @property  <CXCallObserverDataSource> *dataSource
 @property  NSArray *calls
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXCallObserver setDelegate:queue:]
  -[CXCallObserver concurrentQueue]
  -[CXCallObserver calls]
  -[CXCallObserver delegateQueue]
  -[CXCallObserver setDelegateQueue:]
  -[CXCallObserver dataSource:callChanged:]
  -[CXCallObserver .cxx_destruct]
  -[CXCallObserver _performDelegateCallback:]
  -[CXCallObserver initWithDataSource:concurrentQueue:]
  -[CXCallObserver setDelegate:]
  -[CXCallObserver dataSource]
  -[CXCallObserver init]
  -[CXCallObserver delegate]
  -[CXCallObserver dealloc]


CXDatabaseStatement : NSObject
 @property  ^{sqlite3_stmt=} statement
 @property  ^{sqlite3=} database

  // instance methods
  -[CXDatabaseStatement statement]
  -[CXDatabaseStatement setDatabase:]
  -[CXDatabaseStatement database]
  -[CXDatabaseStatement bind:error:]
  -[CXDatabaseStatement finalize]
  -[CXDatabaseStatement initWithSQL:database:error:]
  -[CXDatabaseStatement init]
  -[CXDatabaseStatement executeWithError:]
  -[CXDatabaseStatement executeWithExpectedColumnCount:resultRowHandler:error:]
  -[CXDatabaseStatement bindInt64:atIndex:error:]
  -[CXDatabaseStatement processResultsWithExpectedColumnCount:resultRowHandler:error:]
  -[CXDatabaseStatement dealloc]
  -[CXDatabaseStatement bindText:ofLength:atIndex:error:]
  -[CXDatabaseStatement setStatement:]


CXNetworkExtensionMessageController : NSObject
 @property  <CXNetworkExtensionMessageControllerDataSource> *dataSource

  // instance methods
  -[CXNetworkExtensionMessageController initWithDataSource:]
  -[CXNetworkExtensionMessageController .cxx_destruct]
  -[CXNetworkExtensionMessageController dataSource]
  -[CXNetworkExtensionMessageController init]
  -[CXNetworkExtensionMessageController sendNetworkExtensionMessage:forBundleIdentifier:completion:]


CXVoicemailControllerHost : NSObject <NSXPCListenerDelegate, CXVoicemailControllerHostConnectionDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <CXVoicemailControllerHostDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSXPCListener *xpcListener
 @property  NSMutableDictionary *voicemailUUIDToVoicemailMap
 @property  NSMutableSet *connections
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXVoicemailControllerHost xpcListener]
  -[CXVoicemailControllerHost setConnections:]
  -[CXVoicemailControllerHost delegateQueue]
  -[CXVoicemailControllerHost setDelegateQueue:]
  -[CXVoicemailControllerHost .cxx_destruct]
  -[CXVoicemailControllerHost _performDelegateCallback:]
  -[CXVoicemailControllerHost setDelegate:]
  -[CXVoicemailControllerHost init]
  -[CXVoicemailControllerHost setQueue:]
  -[CXVoicemailControllerHost connections]
  -[CXVoicemailControllerHost delegate]
  -[CXVoicemailControllerHost queue]
  -[CXVoicemailControllerHost setXpcListener:]
  -[CXVoicemailControllerHost listener:shouldAcceptNewConnection:]
  -[CXVoicemailControllerHost voicemailUUIDToVoicemailMap]
  -[CXVoicemailControllerHost addOrUpdateVoicemails:]
  -[CXVoicemailControllerHost removeVoicemails:]
  -[CXVoicemailControllerHost voicemailControllerHostConnectionInvalidated:]
  -[CXVoicemailControllerHost voicemailControllerHostConnection:requestVoicemails:]
  -[CXVoicemailControllerHost voicemailControllerHostConnection:requestTransaction:completion:]
  -[CXVoicemailControllerHost _voicemailsForVoicemailControllerHostConnection:]
  -[CXVoicemailControllerHost initWithVoicemails:delegate:queue:]
  -[CXVoicemailControllerHost setVoicemailUUIDToVoicemailMap:]


CXCallDirectoryStoreIdentificationEntry : NSObject
 @property  NSString *extensionBundleIdentifier
 @property  NSString *localizedLabel

  // instance methods
  -[CXCallDirectoryStoreIdentificationEntry setExtensionBundleIdentifier:]
  -[CXCallDirectoryStoreIdentificationEntry .cxx_destruct]
  -[CXCallDirectoryStoreIdentificationEntry setLocalizedLabel:]
  -[CXCallDirectoryStoreIdentificationEntry extensionBundleIdentifier]
  -[CXCallDirectoryStoreIdentificationEntry localizedLabel]


CXNotificationServiceExtensionVoIPXPCHost : NSObject <NSXPCListenerDelegate, CXNotificationServiceExtensionHostDelegate, CXNotificationServiceExtensionVoIPXPC>
 @property  NSXPCListener *xpcListener
 @property  <CXNotificationServiceExtensionHostDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CXNotificationServiceExtensionVoIPXPCHost xpcListener]
  -[CXNotificationServiceExtensionVoIPXPCHost .cxx_destruct]
  -[CXNotificationServiceExtensionVoIPXPCHost setDelegate:]
  -[CXNotificationServiceExtensionVoIPXPCHost initWithDelegate:]
  -[CXNotificationServiceExtensionVoIPXPCHost delegate]
  -[CXNotificationServiceExtensionVoIPXPCHost listener:shouldAcceptNewConnection:]
  -[CXNotificationServiceExtensionVoIPXPCHost notificationServiceExtension:reply:]
  -[CXNotificationServiceExtensionVoIPXPCHost notificationServiceExtensionHost:didReceiveIncomingMessage:forBundleIdentifier:reply:]


CXCallDirectoryExtensionContext : NSExtensionContext <CXCallDirectoryProviderVendorProtocol>
 @property  CXCallDirectoryMutablePhoneNumberEntryData *pendingBlockingEntryData
 @property  long long pendingBlockingEntryChangeType
 @property  CXCallDirectoryMutableLabeledPhoneNumberEntryData *pendingIdentificationEntryDataForAddition
 @property  CXCallDirectoryMutablePhoneNumberEntryData *pendingIdentificationEntryDataForRemoval
 @property  long long pendingIdentificationEntryChangeType
 @property  BOOL hasQueriedIsIncremental
 @property  @? remoteObjectProxyGenerator
 @property  <CXCallDirectoryExtensionContextDelegate> *delegate
 @property  BOOL incremental
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCallDirectoryExtensionContext _extensionAuxiliaryVendorProtocol]
  +[CXCallDirectoryExtensionContext _extensionAuxiliaryHostProtocol]

  // instance methods
  -[CXCallDirectoryExtensionContext .cxx_destruct]
  -[CXCallDirectoryExtensionContext initWithInputItems:listenerEndpoint:contextUUID:]
  -[CXCallDirectoryExtensionContext setDelegate:]
  -[CXCallDirectoryExtensionContext delegate]
  -[CXCallDirectoryExtensionContext requestFailedWithError:reply:]
  -[CXCallDirectoryExtensionContext remoteObjectProxyGenerator]
  -[CXCallDirectoryExtensionContext pendingBlockingEntryChangeType]
  -[CXCallDirectoryExtensionContext pendingBlockingEntryData]
  -[CXCallDirectoryExtensionContext _flushPendingBlockingEntryData]
  -[CXCallDirectoryExtensionContext setPendingBlockingEntryChangeType:]
  -[CXCallDirectoryExtensionContext pendingIdentificationEntryChangeType]
  -[CXCallDirectoryExtensionContext pendingIdentificationEntryDataForAddition]
  -[CXCallDirectoryExtensionContext pendingIdentificationEntryDataForRemoval]
  -[CXCallDirectoryExtensionContext _flushPendingIdentificationEntryData]
  -[CXCallDirectoryExtensionContext setPendingIdentificationEntryChangeType:]
  -[CXCallDirectoryExtensionContext setPendingBlockingEntryData:]
  -[CXCallDirectoryExtensionContext _remoteObjectProxyWithErrorHandler:synchronous:]
  -[CXCallDirectoryExtensionContext setPendingIdentificationEntryDataForAddition:]
  -[CXCallDirectoryExtensionContext setPendingIdentificationEntryDataForRemoval:]
  -[CXCallDirectoryExtensionContext hasQueriedIsIncremental]
  -[CXCallDirectoryExtensionContext setHasQueriedIsIncremental:]
  -[CXCallDirectoryExtensionContext appendBlockingEntryPhoneNumber:changeType:]
  -[CXCallDirectoryExtensionContext isIncremental]
  -[CXCallDirectoryExtensionContext _performBlockIfIncremental:usingSelectorForExceptionMessage:]
  -[CXCallDirectoryExtensionContext appendIdentificationEntryForAdditionWithPhoneNumber:label:]
  -[CXCallDirectoryExtensionContext appendIdentificationEntryForRemovalWithPhoneNumber:]
  -[CXCallDirectoryExtensionContext addBlockingEntryWithNextSequentialPhoneNumber:]
  -[CXCallDirectoryExtensionContext removeBlockingEntryWithPhoneNumber:]
  -[CXCallDirectoryExtensionContext removeAllBlockingEntries]
  -[CXCallDirectoryExtensionContext addIdentificationEntryWithNextSequentialPhoneNumber:label:]
  -[CXCallDirectoryExtensionContext removeIdentificationEntryWithPhoneNumber:]
  -[CXCallDirectoryExtensionContext removeAllIdentificationEntries]
  -[CXCallDirectoryExtensionContext completeRequestWithCompletionHandler:]
  -[CXCallDirectoryExtensionContext setRemoteObjectProxyGenerator:]


CXCall : NSObject <NSSecureCoding, CXCopying>
 @property  NSString *providerIdentifier
 @property  BOOL outgoing
 @property  BOOL onHold
 @property  BOOL hasConnected
 @property  BOOL hasEnded
 @property  BOOL endpointOnCurrentDevice
 @property  BOOL hostedOnCurrentDevice
 @property  BOOL video
 @property  NSUUID *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CXCall supportsSecureCoding]

  // instance methods
  -[CXCall hasEnded]
  -[CXCall isOutgoing]
  -[CXCall UUID]
  -[CXCall isVideo]
  -[CXCall initWithCoder:]
  -[CXCall setVideo:]
  -[CXCall .cxx_destruct]
  -[CXCall initWithUUID:]
  -[CXCall init]
  -[CXCall setProviderIdentifier:]
  -[CXCall setHasEnded:]
  -[CXCall isEqual:]
  -[CXCall providerIdentifier]
  -[CXCall setHasConnected:]
  -[CXCall isEndpointOnCurrentDevice]
  -[CXCall isOnHold]
  -[CXCall setOutgoing:]
  -[CXCall copyWithZone:]
  -[CXCall sanitizedCopy]
  -[CXCall encodeWithCoder:]
  -[CXCall hasConnected]
  -[CXCall sanitizedCopyWithZone:]
  -[CXCall isHostedOnCurrentDevice]
  -[CXCall setHostedOnCurrentDevice:]
  -[CXCall setEndpointOnCurrentDevice:]
  -[CXCall isEqualToCall:]
  -[CXCall setOnHold:]
  -[CXCall updateSanitizedCopy:withZone:]
  -[CXCall updateCopy:withZone:]


NSExtension(CXCallDirectoryStoreMigrator)
	// instance methods
	-[NSExtension(CXCallDirectoryStoreMigrator) localizedName]
	-[NSExtension(CXCallDirectoryStoreMigrator) isEnabledViaPlugInKit]
	-[NSExtension(CXCallDirectoryStoreMigrator) localizedContainingAppName]
	-[NSExtension(CXCallDirectoryStoreMigrator) containingAppURL]
	-[NSExtension(CXCallDirectoryStoreMigrator) plugInKitProxy]

LSApplicationRecord(CX)
	// class methods
	+[LSApplicationRecord(CX) cx_applicationRecordForBundleIdentifier:]
	+[LSApplicationRecord(CX) cx_applicationRecordForConnection:]

	// instance methods
	-[LSApplicationRecord(CX) cx_hasVoIPBackgroundMode]

NSXPCInterface(CX)
	// class methods
	+[NSXPCInterface(CX) cx_providerVendorInterface]
	+[NSXPCInterface(CX) cx_providerHostInterface]
	+[NSXPCInterface(CX) cx_callDirectoryProviderVendorInterface]
	+[NSXPCInterface(CX) cx_callDirectoryProviderHostInterface]
	+[NSXPCInterface(CX) cx_voicemailControllerVendorInterface]
	+[NSXPCInterface(CX) cx_voicemailControllerHostInterface]
	+[NSXPCInterface(CX) cx_notificationServiceExtensionInterface]
	+[NSXPCInterface(CX) cx_callControllerHostInterface]
	+[NSXPCInterface(CX) cx_callControllerVendorInterface]
	+[NSXPCInterface(CX) cx_networkExtensionMessageControllerHostInterface]
	+[NSXPCInterface(CX) cx_voicemailProviderHostInterface]
	+[NSXPCInterface(CX) cx_voicemailProviderVendorInterface]
	+[NSXPCInterface(CX) cx_callDirectoryManagerDefaultHostInterface]
	+[NSXPCInterface(CX) cx_callDirectoryManagerMaintenanceHostInterface]

	// instance methods
	-[NSXPCInterface(CX) cx_setAllowedClassesForProviderHostProtocol]
	-[NSXPCInterface(CX) cx_allowedClasses]
	-[NSXPCInterface(CX) cx_setAllowedClassesForProviderVendorProtocol]
	-[NSXPCInterface(CX) _cx_providerAllowedClasses]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForCallControllerHostProtocol]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForCallControllerVendorProtocol]
	-[NSXPCInterface(CX) _cx_callControllerAllowedClasses]
	-[NSXPCInterface(CX) cx_setAllowedClassesForVoicemailProviderHostProtocol]
	-[NSXPCInterface(CX) cx_setAllowedClassesForVoicemailProviderVendorProtocol]
	-[NSXPCInterface(CX) _cx_voicemailProviderAllowedClasses]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForVoicemailControllerHostProtocol]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForVoicemailControllerVendorProtocol]
	-[NSXPCInterface(CX) _cx_voicemailControllerAllowedClasses]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForCallDirectoryManagerDefaultHostProtocol]
	-[NSXPCInterface(CX) _cx_callDirectoryManagerAllowedClasses]
	-[NSXPCInterface(CX) _cx_setAllowedClassesForCallDirectoryProviderHostProtocol]
	-[NSXPCInterface(CX) _cx_callDirectoryProviderAllowedClasses]

(CXError)
	// class methods
	+[(CXError) cx_callDirectoryManagerErrorWithCode:]
	+[(CXError) cx_callDirectoryManagerErrorWithCode:userInfo:]
	+[(CXError) cx_requestTransactionErrorWithCode:]
	+[(CXError) cx_callDirectoryStoreErrorWithCode:]
	+[(CXError) cx_notificationServiceExtensionErrorWithCode:]
	+[(CXError) cx_errorWithCode:]
	+[(CXError) cx_incomingCallErrorWithCode:]

NSXPCConnection(CX)
	// instance methods
	-[NSXPCConnection(CX) cx_isProcessOnDemandInstallCapable]
	-[NSXPCConnection(CX) cx_applicationIdentifier]
	-[NSXPCConnection(CX) cx_capabilities]
	-[NSXPCConnection(CX) cx_bundleIdentifier]
	-[NSXPCConnection(CX) cx_clientSandboxCanAccessFileURL:]
	-[NSXPCConnection(CX) cx_developerTeamIdentifier]
	-[NSXPCConnection(CX) cx_processName]

01 00 0300 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0400 /System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices: BKSApplicationStateMonitor 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationExtensionRecord 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 0500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSPlugInKitProxy 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionContext 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0900 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
