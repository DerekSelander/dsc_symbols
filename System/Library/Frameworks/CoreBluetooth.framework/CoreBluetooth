|| __DATA.__objc_data _OBJC_CLASS_$_BTDevicePicker
|| __DATA.__objc_data _OBJC_CLASS_$_CBATTRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CBCentral
|| __DATA.__objc_data _OBJC_CLASS_$_CBClassicManager
|| __DATA.__objc_data _OBJC_CLASS_$_CBDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CBL2CAPChannel
|| __DATA.__objc_data _OBJC_CLASS_$_CBMutableDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CBRFCOMMChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_BTDevicePicker
|| __DATA.__objc_data _OBJC_METACLASS_$_CBATTRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CBClassicManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CBClassicPeer
|| __DATA.__objc_data _OBJC_METACLASS_$_CBDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CBL2CAPChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_CBMutableDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CBRFCOMMChannel
|| __DATA_CONST.__const _CBATTErrorDomain
|| __DATA_CONST.__const _CBAdvOptionInstanceAddress
|| __DATA_CONST.__const _CBAdvOptionInstanceRandomAddressBytes
|| __DATA_CONST.__const _CBAdvOptionObjectLocatorOnThisInstance
|| __DATA_CONST.__const _CBAdvOptionStopOnAdvertisingAddressChange
|| __DATA_CONST.__const _CBAdvertisementAppleMfgTypeKey
|| __DATA_CONST.__const _CBAdvertisementDataAppleBeaconKey
|| __DATA_CONST.__const _CBAdvertisementDataAppleMfgData
|| __DATA_CONST.__const _CBAdvertisementDataChannel
|| __DATA_CONST.__const _CBAdvertisementDataDeviceAddress
|| __DATA_CONST.__const _CBAdvertisementDataIsConnectable
|| __DATA_CONST.__const _CBAdvertisementDataIsExtended
|| __DATA_CONST.__const _CBAdvertisementDataIsExtendedConnectable
|| __DATA_CONST.__const _CBAdvertisementDataIsObjectDiscovery
|| __DATA_CONST.__const _CBAdvertisementDataIsTDS
|| __DATA_CONST.__const _CBAdvertisementDataLeBluetoothDeviceAddressKey
|| __DATA_CONST.__const _CBAdvertisementDataLocalNameKey
|| __DATA_CONST.__const _CBAdvertisementDataManufacturerDataKey
|| __DATA_CONST.__const _CBAdvertisementDataNonAppleMfgKey
|| __DATA_CONST.__const _CBAdvertisementDataOverflowServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataProximityLevelKey
|| __DATA_CONST.__const _CBAdvertisementDataSaturated
|| __DATA_CONST.__const _CBAdvertisementDataServiceDataKey
|| __DATA_CONST.__const _CBAdvertisementDataServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataSolicitedServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataTDSData
|| __DATA_CONST.__const _CBAdvertisementDataTimestamp
|| __DATA_CONST.__const _CBAdvertisementDataTxPowerLevelKey
|| __DATA_CONST.__const _CBAdvertisementDataWlanOn
|| __DATA_CONST.__const _CBAdvertisementRawBytesData
|| __DATA_CONST.__const _CBAdvertisementTDSTypeKey
|| __DATA_CONST.__const _CBCancelPeripheralConnectionOptionDoNotAutoConnectBuiltInServices
|| __DATA_CONST.__const _CBCancelPeripheralConnectionOptionForce
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanDuration
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanEnable
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanPeriod
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanType
|| __DATA_CONST.__const _CBCentralManagerMatchActionRuleLocalAddress
|| __DATA_CONST.__const _CBCentralManagerMatchActionRulePeerAddress
|| __DATA_CONST.__const _CBCentralManagerOptionPowerModule
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveApplicationActivityEvents
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveIncomingObjectDiscoveryData
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveSystemEvents
|| __DATA_CONST.__const _CBCentralManagerOptionRestoreIdentifierKey
|| __DATA_CONST.__const _CBCentralManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStatePeripheralsKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStateScanOptionsKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStateScanServicesKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionActive
|| __DATA_CONST.__const _CBCentralManagerScanOptionAllowDuplicatesKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionAllowedInPaused
|| __DATA_CONST.__const _CBCentralManagerScanOptionCacheResults
|| __DATA_CONST.__const _CBCentralManagerScanOptionHWObjectDiscovery
|| __DATA_CONST.__const _CBCentralManagerScanOptionIsPrivilegedDaemonKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionLatencyCritical
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleAddress
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleAddressType
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleBypassFilterDuplicate
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleForceDupes
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleMaskKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRulePayloadKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleRSSIKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleRSSIThresholdOrder
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleTargetCore
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleTypeKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionPeersKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionProximityThresholdKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionReloadMigratableItems
|| __DATA_CONST.__const _CBCentralManagerScanOptionRequiresActive
|| __DATA_CONST.__const _CBCentralManagerScanOptionScanInterval
|| __DATA_CONST.__const _CBCentralManagerScanOptionScanWindow
|| __DATA_CONST.__const _CBCentralManagerScanOptionSolicitedServiceUUIDsKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionTDS
|| __DATA_CONST.__const _CBCentralManagerScanOptionZonesKey
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionObjectLocator
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionOwnAddress
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIsLegacy
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanPHY
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTargetCore
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanningFilterPolicy
|| __DATA_CONST.__const _CBCentralManagerTrackingOptionType
|| __DATA_CONST.__const _CBClassicManagerOptionConnectedKey
|| __DATA_CONST.__const _CBClassicManagerOptionIdentifiersKey
|| __DATA_CONST.__const _CBClassicManagerOptionPairedKey
|| __DATA_CONST.__const _CBClassicManagerOptionServicesKey
|| __DATA_CONST.__const _CBClassicManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionDisableLeGATT
|| __DATA_CONST.__const _CBConnectPeripheralOptionEnableTransportBridgingKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionFixedChannels
|| __DATA_CONST.__const _CBConnectPeripheralOptionHideFromBTSettings
|| __DATA_CONST.__const _CBConnectPeripheralOptionLatencyCritical
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnConnectionKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnDisconnectionKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnNotificationKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionRequiresANCS
|| __DATA_CONST.__const _CBConnectPeripheralOptionStartDelayKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionUseTempLTK
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionAllPeripherals
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionPeripheralUUIDs
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionServiceUUIDs
|| __DATA_CONST.__const _CBErrorDomain
|| __DATA_CONST.__const _CBInquiryInfiniteKey
|| __DATA_CONST.__const _CBInquiryLengthKey
|| __DATA_CONST.__const _CBInquiryRSSIThresholdKey
|| __DATA_CONST.__const _CBInquiryServicesKey
|| __DATA_CONST.__const _CBInternalErrorDomain
|| __DATA_CONST.__const _CBManagerAppSDKVersion
|| __DATA_CONST.__const _CBManagerIsPrivilegedDaemonKey
|| __DATA_CONST.__const _CBManagerL2CAPChannelCreditsAckDelta
|| __DATA_CONST.__const _CBManagerL2CAPChannelInMPS
|| __DATA_CONST.__const _CBManagerL2CAPChannelInMTU
|| __DATA_CONST.__const _CBManagerL2CAPChannelInitialCredits
|| __DATA_CONST.__const _CBManagerNeedsRestrictedStateOperation
|| __DATA_CONST.__const _CBOriginalPeerIdentifierErrorKey
|| __DATA_CONST.__const _CBPairingAgentPairingDataOOBTKKey
|| __DATA_CONST.__const _CBPairingAgentPairingDataPasskeyKey
|| __DATA_CONST.__const _CBPairingOptionsDistributeIRK
|| __DATA_CONST.__const _CBPairingOptionsUseMITMAuthentication
|| __DATA_CONST.__const _CBPeripheralManagerAdvertisingInterval
|| __DATA_CONST.__const _CBPeripheralManagerOptionRestoreIdentifierKey
|| __DATA_CONST.__const _CBPeripheralManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBPeripheralManagerRestoredStateAdvertisementDataKey
|| __DATA_CONST.__const _CBPeripheralManagerRestoredStateServicesKey
|| __DATA_CONST.__const _CBScalablePipeOptionDisableBluetoothReliability
|| __DATA_CONST.__const _CBScalablePipeOptionRequiresEncryption
|| __DATA_CONST.__const _CBScalablePipeOptionStayConnectedWhenIdle
|| __DATA_CONST.__const _CBScalablePipeOptionTrace
|| __DATA_CONST.__const _CBScalablePipeOptionTransport
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchAllPeripherals
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchPeripheralsUUIDs
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchServicesUUIDs
|| __DATA_CONST.__const _CBUUIDAMSEntityAttributeCharacteristicString
|| __DATA_CONST.__const _CBUUIDAMSEntityUpdateCharacteristicString
|| __DATA_CONST.__const _CBUUIDAMSRemoteCommandCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSControlPointCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSDataSourceCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSNotificationSourceCharacteristicString
|| __DATA_CONST.__const _CBUUIDAppearanceString
|| __DATA_CONST.__const _CBUUIDAppleAccessoryReconnectServiceString
|| __DATA_CONST.__const _CBUUIDAppleHeadsetPropertyServiceString
|| __DATA_CONST.__const _CBUUIDAppleMediaServiceString
|| __DATA_CONST.__const _CBUUIDAppleNotificationCenterServiceString
|| __DATA_CONST.__const _CBUUIDBatteryLevelCharacteristicString
|| __DATA_CONST.__const _CBUUIDBatteryPowerStateCharacteristicString
|| __DATA_CONST.__const _CBUUIDBatteryServiceString
|| __DATA_CONST.__const _CBUUIDBloodPressureServiceString
|| __DATA_CONST.__const _CBUUIDBondManagementServiceString
|| __DATA_CONST.__const _CBUUIDBootKeyboardInputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDBootKeyboardOutputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDBootMouseInputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDCharacteristicAggregateFormatString
|| __DATA_CONST.__const _CBUUIDCharacteristicExtendedPropertiesString
|| __DATA_CONST.__const _CBUUIDCharacteristicFormatString
|| __DATA_CONST.__const _CBUUIDCharacteristicUserDescriptionString
|| __DATA_CONST.__const _CBUUIDCharacteristicValidRangeString
|| __DATA_CONST.__const _CBUUIDClientCharacteristicConfigurationString
|| __DATA_CONST.__const _CBUUIDContinuityCharacteristicString
|| __DATA_CONST.__const _CBUUIDContinuityServiceString
|| __DATA_CONST.__const _CBUUIDCurrentTimeCharacteristicString
|| __DATA_CONST.__const _CBUUIDCurrentTimeServiceString
|| __DATA_CONST.__const _CBUUIDCyclingSpeedAndCadenceServiceString
|| __DATA_CONST.__const _CBUUIDDeviceInformationServiceString
|| __DATA_CONST.__const _CBUUIDDeviceNameString
|| __DATA_CONST.__const _CBUUIDDoAPServiceString
|| __DATA_CONST.__const _CBUUIDDosimetrySensitivityCharacteristicString
|| __DATA_CONST.__const _CBUUIDDosimetryVolumeCurveCharacteristicString
|| __DATA_CONST.__const _CBUUIDEventIndicatorCharacteristicString
|| __DATA_CONST.__const _CBUUIDFirmwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDGenericAccessProfileString
|| __DATA_CONST.__const _CBUUIDGenericAttributeProfileString
|| __DATA_CONST.__const _CBUUIDGlucoseServiceString
|| __DATA_CONST.__const _CBUUIDHIDControlPointCharacteristicString
|| __DATA_CONST.__const _CBUUIDHIDInformationCharacteristicString
|| __DATA_CONST.__const _CBUUIDHardwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDHealthThermometerServiceString
|| __DATA_CONST.__const _CBUUIDHeartRateServiceString
|| __DATA_CONST.__const _CBUUIDHumanInterfaceDeviceServiceString
|| __DATA_CONST.__const _CBUUIDIEEERegulatoryCertificationDataList
|| __DATA_CONST.__const _CBUUIDL2CAPPSMCharacteristicString
|| __DATA_CONST.__const _CBUUIDLocalTimeInformationCharacteristicString
|| __DATA_CONST.__const _CBUUIDMIDIServiceString
|| __DATA_CONST.__const _CBUUIDManufacturerNameStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDModelNumberStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDPeripheralPreferredConnectionParametersString
|| __DATA_CONST.__const _CBUUIDPeripheralPrivacyFlagString
|| __DATA_CONST.__const _CBUUIDPnPIDCharacteristicString
|| __DATA_CONST.__const _CBUUIDProtocolModeCharacteristicString
|| __DATA_CONST.__const _CBUUIDReconnectionAddressString
|| __DATA_CONST.__const _CBUUIDReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDReportMapCharacteristicString
|| __DATA_CONST.__const _CBUUIDReportReferenceDescriptorString
|| __DATA_CONST.__const _CBUUIDSelectedCodecCharacteristicString
|| __DATA_CONST.__const _CBUUIDSendDataCharacteristicString
|| __DATA_CONST.__const _CBUUIDSerialNumberStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDServerCharacteristicConfigurationString
|| __DATA_CONST.__const _CBUUIDServiceChangedString
|| __DATA_CONST.__const _CBUUIDSoftwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDStartStreamingCharacteristicString
|| __DATA_CONST.__const _CBUUIDStopStreamingCharacteristicString
|| __DATA_CONST.__const _CBUUIDSupportedCodecsCharacteristicString
|| __DATA_CONST.__const _CBUUIDSystemIDCharacteristicString
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBAttribute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBCentralManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBClassicPeer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBMutableCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBMutableService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPairingAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPeer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPeripheral
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPeripheralManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBScalablePipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBScalablePipeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBUUID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBAttribute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBCentral
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBCentralManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBMutableCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBMutableService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPairingAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPeer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPeripheral
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPeripheralManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBScalablePipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBScalablePipeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBUUID
|| __TEXT.__const _CBAssignedL2CAPPSMForRapport
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStreamCreatePairWithSocket
__ CoreFoundation: _CFUUIDGetUUIDBytes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: _kCFAllocatorDefault
__ Foundation: _NSClassFromString
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ TCC: _TCCAccessPreflight
__ TCC: _TCCAccessRequest
__ TCC: _TCCAccessRestricted
__ TCC: _kTCCServiceBluetoothAlways
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_bool
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_double
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_fd
__ libSystem.B.dylib: __xpc_type_int64
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uint64
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_current_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_queue_get_label
__ libSystem.B.dylib: _dispatch_queue_get_qos_class
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _getprogname
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _os_channel_attr_create
__ libSystem.B.dylib: _os_channel_attr_destroy
__ libSystem.B.dylib: _os_channel_attr_set
__ libSystem.B.dylib: _os_channel_create_extended
__ libSystem.B.dylib: _os_channel_destroy
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _uuid_parse
__ libSystem.B.dylib: _uuid_unparse_upper
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_barrier
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_count
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_double_create
__ libSystem.B.dylib: _xpc_double_get_value
__ libSystem.B.dylib: _xpc_fd_dup
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_int64_create
__ libSystem.B.dylib: _xpc_int64_get_value
__ libSystem.B.dylib: _xpc_null_create
__ libSystem.B.dylib: _xpc_string_create
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uint64_get_value
__ libSystem.B.dylib: _xpc_uuid_create
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
PSSpecifierStub : NSObject
 @property  BluetoothDevice *device
 @property  id userInfo

  // instance methods
  -[PSSpecifierStub dealloc]
  -[PSSpecifierStub userInfo]
  -[PSSpecifierStub setUserInfo:]
  -[PSSpecifierStub device]
  -[PSSpecifierStub setDevice:]


BTDevicePicker : NSObject <UITableViewDelegate, UITableViewDataSource>
 @property  <BTDevicePickerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BTDevicePicker dealloc]
  -[BTDevicePicker delegate]
  -[BTDevicePicker setDelegate:]
  -[BTDevicePicker dismissAnimated:]
  -[BTDevicePicker show]
  -[BTDevicePicker tableView:numberOfRowsInSection:]
  -[BTDevicePicker tableView:cellForRowAtIndexPath:]
  -[BTDevicePicker tableView:didSelectRowAtIndexPath:]
  -[BTDevicePicker applicationWillResignActive:]
  -[BTDevicePicker showAlert:]
  -[BTDevicePicker startScanning]
  -[BTDevicePicker powerChanged:]
  -[BTDevicePicker deviceDiscoveryStoppedHandler:]
  -[BTDevicePicker deviceFoundHandler:]
  -[BTDevicePicker deviceLostHandler:]
  -[BTDevicePicker deviceNameChangedHandler:]
  -[BTDevicePicker authenticationRequestHandler:]
  -[BTDevicePicker devicePairedHandler:]
  -[BTDevicePicker deviceConnectionCompleteHandler:]
  -[BTDevicePicker checkAttachTimeout]
  -[BTDevicePicker showInternal]
  -[BTDevicePicker cancelDevicePicker]
  -[BTDevicePicker createAlertWindow]
  -[BTDevicePicker cleanupPairing]
  -[BTDevicePicker _btSSPConfirmationHandler:]
  -[BTDevicePicker _btSSPNumericComparisonHandler:]
  -[BTDevicePicker _btSSPPasskeyDisplayHandler:]
  -[BTDevicePicker createBTAlertWindow]
  -[BTDevicePicker initWithTitle:service:discoveryNameFilter:]
  -[BTDevicePicker alertSheetDismissed:]
  -[BTDevicePicker showPairingAlert:]
  -[BTDevicePicker dismissPairingAlert:]


CBClassicPeer : CBPeer
 @property  int deviceType
 @property  BOOL isIncoming
 @property  long long state
 @property  long long systemState
 @property  unsigned short connectionHandle
 @property  BOOL isAppleDevice
 @property  unsigned short productID
 @property  unsigned short vendorID
 @property  unsigned short vendorIDSource
 @property  NSArray *syncGroups
 @property  unsigned short syncSettings
 @property  unsigned char batteryPercentSingle
 @property  unsigned char batteryPercentLeft
 @property  unsigned char batteryPercentRight
 @property  unsigned char batteryPercentCase
 @property  unsigned char batteryPercentCombined
 @property  BOOL inEarDetect
 @property  unsigned char micMode
 @property  unsigned char buttonMode
 @property  unsigned char leftDoubleTap
 @property  unsigned char rightDoubleTap
 @property  unsigned char listeningMode
 @property  unsigned char eqMode
 @property  unsigned char lrDetectionMode
 @property  unsigned char doubleTapCapability
 @property  BOOL traceLogging
 @property  unsigned char primaryBud
 @property  unsigned char primaryInEar
 @property  unsigned char secondaryInEar
 @property  BOOL inEar
 @property  BOOL isLEHID
 @property  BOOL isDevFused
 @property  NSArray *services
 @property  NSString *addressString
 @property  NSData *addressData
 @property  unsigned long appleFeatureBitMask
 @property  unsigned char modeSupported
 @property  NSNumber *RSSI
 @property  NSHashTable *l2capChannels
 @property  NSString *name

  // instance methods
  -[CBClassicPeer dealloc]
  -[CBClassicPeer name]
  -[CBClassicPeer .cxx_destruct]
  -[CBClassicPeer setName:]
  -[CBClassicPeer state]
  -[CBClassicPeer setState:]
  -[CBClassicPeer deviceType]
  -[CBClassicPeer productID]
  -[CBClassicPeer isIncoming]
  -[CBClassicPeer setDeviceType:]
  -[CBClassicPeer services]
  -[CBClassicPeer addressData]
  -[CBClassicPeer addressString]
  -[CBClassicPeer setAddressString:]
  -[CBClassicPeer openL2CAPChannel:]
  -[CBClassicPeer setProductID:]
  -[CBClassicPeer vendorID]
  -[CBClassicPeer setVendorID:]
  -[CBClassicPeer setIsIncoming:]
  -[CBClassicPeer isAppleDevice]
  -[CBClassicPeer setServices:]
  -[CBClassicPeer micMode]
  -[CBClassicPeer setMicMode:]
  -[CBClassicPeer doubleTapCapability]
  -[CBClassicPeer listeningMode]
  -[CBClassicPeer setListeningMode:]
  -[CBClassicPeer isServiceSupported:]
  -[CBClassicPeer syncSettings]
  -[CBClassicPeer setSyncSettings:]
  -[CBClassicPeer syncGroups]
  -[CBClassicPeer initWithInfo:manager:]
  -[CBClassicPeer dataArrayToUUIDArray:]
  -[CBClassicPeer sendMsg:requiresConnected:args:]
  -[CBClassicPeer sendMsg:args:]
  -[CBClassicPeer handlePeerUpdated:]
  -[CBClassicPeer handleMsg:args:]
  -[CBClassicPeer systemState]
  -[CBClassicPeer setSystemState:]
  -[CBClassicPeer vendorIDSource]
  -[CBClassicPeer setVendorIDSource:]
  -[CBClassicPeer setRSSI:]
  -[CBClassicPeer channelWithPSM:]
  -[CBClassicPeer service:]
  -[CBClassicPeer appleFeatureBitMask]
  -[CBClassicPeer psmForService:]
  -[CBClassicPeer openL2CAPChannel:options:]
  -[CBClassicPeer handleSuccessfulConnection:]
  -[CBClassicPeer handleFailedConnection]
  -[CBClassicPeer handleDisconnection]
  -[CBClassicPeer handleL2CAPChannelOpened:]
  -[CBClassicPeer handleL2CAPChannelClosed:]
  -[CBClassicPeer setOrphan]
  -[CBClassicPeer isAppleFeatureSupported:]
  -[CBClassicPeer removeAllL2CAPChannels]
  -[CBClassicPeer connectionHandle]
  -[CBClassicPeer setIsAppleDevice:]
  -[CBClassicPeer setSyncGroups:]
  -[CBClassicPeer batteryPercentSingle]
  -[CBClassicPeer setBatteryPercentSingle:]
  -[CBClassicPeer batteryPercentLeft]
  -[CBClassicPeer setBatteryPercentLeft:]
  -[CBClassicPeer batteryPercentRight]
  -[CBClassicPeer setBatteryPercentRight:]
  -[CBClassicPeer batteryPercentCase]
  -[CBClassicPeer setBatteryPercentCase:]
  -[CBClassicPeer batteryPercentCombined]
  -[CBClassicPeer setBatteryPercentCombined:]
  -[CBClassicPeer inEarDetect]
  -[CBClassicPeer setInEarDetect:]
  -[CBClassicPeer buttonMode]
  -[CBClassicPeer setButtonMode:]
  -[CBClassicPeer leftDoubleTap]
  -[CBClassicPeer setLeftDoubleTap:]
  -[CBClassicPeer rightDoubleTap]
  -[CBClassicPeer setRightDoubleTap:]
  -[CBClassicPeer eqMode]
  -[CBClassicPeer setEqMode:]
  -[CBClassicPeer lrDetectionMode]
  -[CBClassicPeer setLrDetectionMode:]
  -[CBClassicPeer setDoubleTapCapability:]
  -[CBClassicPeer traceLogging]
  -[CBClassicPeer setTraceLogging:]
  -[CBClassicPeer primaryBud]
  -[CBClassicPeer setPrimaryBud:]
  -[CBClassicPeer primaryInEar]
  -[CBClassicPeer setPrimaryInEar:]
  -[CBClassicPeer secondaryInEar]
  -[CBClassicPeer setSecondaryInEar:]
  -[CBClassicPeer inEar]
  -[CBClassicPeer setInEar:]
  -[CBClassicPeer isLEHID]
  -[CBClassicPeer setIsLEHID:]
  -[CBClassicPeer isDevFused]
  -[CBClassicPeer setIsDevFused:]
  -[CBClassicPeer setAddressData:]
  -[CBClassicPeer setAppleFeatureBitMask:]
  -[CBClassicPeer modeSupported]
  -[CBClassicPeer setModeSupported:]
  -[CBClassicPeer RSSI]
  -[CBClassicPeer l2capChannels]
  -[CBClassicPeer setL2capChannels:]


CBCentralManager : CBManager
 @property  BOOL isScanning
 @property  NSMapTable *peripherals
 @property  NSMutableArray *discoveredPeripherals
 @property  <CBCentralManagerDelegate> *delegate

  // class methods
  +[CBCentralManager supportsFeatures:]

  // instance methods
  -[CBCentralManager init]
  -[CBCentralManager dealloc]
  -[CBCentralManager delegate]
  -[CBCentralManager setDelegate:]
  -[CBCentralManager .cxx_destruct]
  -[CBCentralManager observeValueForKeyPath:ofObject:change:context:]
  -[CBCentralManager initWithDelegate:queue:]
  -[CBCentralManager setDesiredConnectionLatency:forPeripheral:]
  -[CBCentralManager connectPeripheral:options:]
  -[CBCentralManager retrievePeripheralsWithIdentifiers:]
  -[CBCentralManager initWithDelegate:queue:options:]
  -[CBCentralManager cancelPeripheralConnection:]
  -[CBCentralManager stopScan]
  -[CBCentralManager scanForPeripheralsWithServices:options:]
  -[CBCentralManager retrievePeripheralWithAddress:]
  -[CBCentralManager dataArrayToUUIDArray:]
  -[CBCentralManager handleMsg:args:]
  -[CBCentralManager peripheralWithInfo:]
  -[CBCentralManager forEachPeripheral:]
  -[CBCentralManager orphanPeripherals]
  -[CBCentralManager setIsScanning:]
  -[CBCentralManager peripheralWithIdentifier:]
  -[CBCentralManager retrieveConnectedPeripheralsWithServices:]
  -[CBCentralManager retrieveConnectedPeripheralsWithServices:allowAll:]
  -[CBCentralManager cancelPeripheralConnection:options:]
  -[CBCentralManager isMsgAllowedAlways:]
  -[CBCentralManager handleRestoringState:]
  -[CBCentralManager handlePeripheralDiscovered:]
  -[CBCentralManager handlePeripheralConnectionCompleted:]
  -[CBCentralManager handlePeripheralCLReady:]
  -[CBCentralManager handlePeripheralDisconnectionCompleted:]
  -[CBCentralManager handlePeripheralConnectionStateUpdated:]
  -[CBCentralManager handlePeripheralTrackingUpdated:]
  -[CBCentralManager handleZoneLost:]
  -[CBCentralManager handleConnectionParametersUpdated:]
  -[CBCentralManager handleAdvertisingAddressChanged:]
  -[CBCentralManager handleApplicationActivityEvent:]
  -[CBCentralManager handleApplicationConnectionEventDidOccur:]
  -[CBCentralManager handleReadyForUpdates:]
  -[CBCentralManager handleDidSendBytesToPeripheralwithError:]
  -[CBCentralManager handleDidReceiveDataFromPeripheral:]
  -[CBCentralManager handleSupportedFeatures:]
  -[CBCentralManager handleAncsAuthChanged:]
  -[CBCentralManager peerWithInfo:]
  -[CBCentralManager retrievePeripherals:]
  -[CBCentralManager retrieveState]
  -[CBCentralManager retrieveConnectedPeripherals]
  -[CBCentralManager randomizeAFHMapForPeripheral:]
  -[CBCentralManager wipeDuplicateFilterList:]
  -[CBCentralManager addAdvancedMatchingRule:]
  -[CBCentralManager removeAdvancedMatchingRule:]
  -[CBCentralManager setEnhancedScanEnable:]
  -[CBCentralManager setEnhancedSetScanParamtersMultiCore:]
  -[CBCentralManager removeSingleEntryDuplicateFilter:]
  -[CBCentralManager getTotalSupportedAdvancedMatchingRules]
  -[CBCentralManager getRemainingAdvancedMatchingRule]
  -[CBCentralManager cancelPeripheralConnection:force:]
  -[CBCentralManager startTrackingPeripheral:options:]
  -[CBCentralManager stopTrackingPeripheral:options:]
  -[CBCentralManager enablePrivateModeForPeripheral:forDuration:]
  -[CBCentralManager registerForConnectionEventsWithOptions:]
  -[CBCentralManager pauseLeConnectionManager]
  -[CBCentralManager resumeLeConnectionManager]
  -[CBCentralManager pauseScans]
  -[CBCentralManager resumeScans]
  -[CBCentralManager sendData:toPeripheral:]
  -[CBCentralManager setConnectionEventOptions:]
  -[CBCentralManager setMatchActionRules:]
  -[CBCentralManager createPeripheralWithAddress:andIdentifier:]
  -[CBCentralManager isMsgAllowedWhenOff:]
  -[CBCentralManager isScanning]
  -[CBCentralManager peripherals]
  -[CBCentralManager discoveredPeripherals]
  -[CBCentralManager setDiscoveredPeripherals:]


CBRFCOMMChannel : NSObject
 @property  int socketFD
 @property  CBClassicPeer *peer
 @property  NSInputStream *inputStream
 @property  NSOutputStream *outputStream
 @property  CBUUID *serviceUUID

  // instance methods
  -[CBRFCOMMChannel .cxx_destruct]
  -[CBRFCOMMChannel outputStream]
  -[CBRFCOMMChannel peer]
  -[CBRFCOMMChannel inputStream]
  -[CBRFCOMMChannel socketFD]
  -[CBRFCOMMChannel serviceUUID]
  -[CBRFCOMMChannel initWithPeer:info:]


CBCharacteristic : CBAttribute
 @property  CBService *service
 @property  unsigned long properties
 @property  NSData *value
 @property  NSArray *descriptors
 @property  BOOL isNotifying
 @property  unsigned long valueTimestamp
 @property  CBPeripheral *peripheral
 @property  NSNumber *handle
 @property  NSNumber *valueHandle
 @property  BOOL isBroadcasted

  // instance methods
  -[CBCharacteristic invalidate]
  -[CBCharacteristic .cxx_destruct]
  -[CBCharacteristic handle]
  -[CBCharacteristic value]
  -[CBCharacteristic setValue:]
  -[CBCharacteristic properties]
  -[CBCharacteristic setProperties:]
  -[CBCharacteristic service]
  -[CBCharacteristic descriptors]
  -[CBCharacteristic setDescriptors:]
  -[CBCharacteristic setService:]
  -[CBCharacteristic peripheral]
  -[CBCharacteristic initWithService:dictionary:]
  -[CBCharacteristic setIsNotifying:]
  -[CBCharacteristic valueHandle]
  -[CBCharacteristic handleValueUpdated:]
  -[CBCharacteristic handleValueWritten:]
  -[CBCharacteristic handleValueBroadcasted:]
  -[CBCharacteristic handleValueNotifying:]
  -[CBCharacteristic handleDescriptorsDiscovered:]
  -[CBCharacteristic isBroadcasted]
  -[CBCharacteristic isNotifying]
  -[CBCharacteristic valueTimestamp]


CBMutableCharacteristic : CBCharacteristic
 @property  NSNumber *ID
 @property  unsigned long permissions
 @property  NSArray *subscribedCentrals
 @property  unsigned long properties
 @property  NSData *value
 @property  NSArray *descriptors

  // instance methods
  -[CBMutableCharacteristic dealloc]
  -[CBMutableCharacteristic .cxx_destruct]
  -[CBMutableCharacteristic observeValueForKeyPath:ofObject:change:context:]
  -[CBMutableCharacteristic permissions]
  -[CBMutableCharacteristic ID]
  -[CBMutableCharacteristic setPermissions:]
  -[CBMutableCharacteristic initWithService:dictionary:]
  -[CBMutableCharacteristic initWithType:properties:value:permissions:]
  -[CBMutableCharacteristic handleCentralSubscribed:]
  -[CBMutableCharacteristic handleCentralUnsubscribed:]
  -[CBMutableCharacteristic handlePowerNotOn]
  -[CBMutableCharacteristic subscribedCentrals]
  -[CBMutableCharacteristic setID:]


CBScalablePipeManager : CBManager
 @property  NSHashTable *pipes
 @property  <CBScalablePipeManagerDelegate> *delegate
 @property  NSSet *identifiers

  // instance methods
  -[CBScalablePipeManager dealloc]
  -[CBScalablePipeManager delegate]
  -[CBScalablePipeManager setDelegate:]
  -[CBScalablePipeManager .cxx_destruct]
  -[CBScalablePipeManager observeValueForKeyPath:ofObject:change:context:]
  -[CBScalablePipeManager initWithDelegate:]
  -[CBScalablePipeManager identifiers]
  -[CBScalablePipeManager initWithDelegate:queue:]
  -[CBScalablePipeManager unregisterEndpoint:]
  -[CBScalablePipeManager registerEndpoint:type:priority:options:]
  -[CBScalablePipeManager sharedPairingAgent]
  -[CBScalablePipeManager handleMsg:args:]
  -[CBScalablePipeManager isMsgAllowedWhenOff:]
  -[CBScalablePipeManager orphanPipes]
  -[CBScalablePipeManager pipeForName:identifier:]
  -[CBScalablePipeManager handleEndpointAdded:]
  -[CBScalablePipeManager handleEndpointRemoved:]
  -[CBScalablePipeManager handlePipeConnected:]
  -[CBScalablePipeManager handlePipeDisconnected:]
  -[CBScalablePipeManager handleHostStateUpdated:]
  -[CBScalablePipeManager registerEndpoint:type:priority:]
  -[CBScalablePipeManager registerEndpoint:type:priority:transport:]
  -[CBScalablePipeManager registerEndpoint:type:priority:transport:requireEncryption:]
  -[CBScalablePipeManager unregisterAllEndpoints]
  -[CBScalablePipeManager setLinkRequirementsForPeer:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager setLinkRequirementsForPeer:withClientName:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager setLinkRequirementsForPeerWithLatency:latencyInMs:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager pipes]


CBAttribute : NSObject
 @property  CBUUID *UUID

  // instance methods
  -[CBAttribute .cxx_destruct]
  -[CBAttribute UUID]
  -[CBAttribute initWithUUID:]


CBScalablePipe : NSObject
 @property  CBCentral *central
 @property  CBPeer *peer
 @property  NSString *name
 @property  long long type
 @property  long long priority
 @property  BOOL reliablePipe
 @property  NSInputStream *input
 @property  NSOutputStream *output
 @property  ^v channel

  // instance methods
  -[CBScalablePipe dealloc]
  -[CBScalablePipe name]
  -[CBScalablePipe type]
  -[CBScalablePipe .cxx_destruct]
  -[CBScalablePipe priority]
  -[CBScalablePipe input]
  -[CBScalablePipe peer]
  -[CBScalablePipe channel]
  -[CBScalablePipe output]
  -[CBScalablePipe setOrphan]
  -[CBScalablePipe initWithPipeManager:info:]
  -[CBScalablePipe central]
  -[CBScalablePipe reliablePipe]


CBDescriptor : CBAttribute
 @property  CBCharacteristic *characteristic
 @property  id value
 @property  CBPeripheral *peripheral
 @property  NSNumber *handle

  // instance methods
  -[CBDescriptor invalidate]
  -[CBDescriptor .cxx_destruct]
  -[CBDescriptor handle]
  -[CBDescriptor value]
  -[CBDescriptor setValue:]
  -[CBDescriptor peripheral]
  -[CBDescriptor initWithCharacteristic:dictionary:]
  -[CBDescriptor handleValueUpdated:]
  -[CBDescriptor handleValueWritten:]
  -[CBDescriptor setCharacteristic:]
  -[CBDescriptor characteristic]


CBMutableDescriptor : CBDescriptor
 @property  NSNumber *ID

  // instance methods
  -[CBMutableDescriptor .cxx_destruct]
  -[CBMutableDescriptor initWithType:value:]
  -[CBMutableDescriptor ID]
  -[CBMutableDescriptor initWithCharacteristic:dictionary:]
  -[CBMutableDescriptor setID:]


CBPeripheral : CBPeer
 @property  NSString *name
 @property  NSNumber *RSSI
 @property  long long state
 @property  NSArray *services
 @property  unsigned int writesPending
 @property  BOOL canSendWriteWithoutResponse
 @property  BOOL ancsAuthorized
 @property  BOOL isConnectedToSystem
 @property  NSHashTable *l2capChannels
 @property  NSString *BDAddress
 @property  BOOL visibleInSettings
 @property  BOOL connectedToSystem
 @property  <CBPeripheralDelegate> *delegate

  // instance methods
  -[CBPeripheral dealloc]
  -[CBPeripheral name]
  -[CBPeripheral delegate]
  -[CBPeripheral setDelegate:]
  -[CBPeripheral .cxx_destruct]
  -[CBPeripheral setName:]
  -[CBPeripheral observeValueForKeyPath:ofObject:change:context:]
  -[CBPeripheral state]
  -[CBPeripheral setState:]
  -[CBPeripheral services]
  -[CBPeripheral isConnected]
  -[CBPeripheral openL2CAPChannel:]
  -[CBPeripheral setServices:]
  -[CBPeripheral sendMsg:requiresConnected:args:]
  -[CBPeripheral sendMsg:args:]
  -[CBPeripheral handleMsg:args:]
  -[CBPeripheral setRSSI:]
  -[CBPeripheral openL2CAPChannel:options:]
  -[CBPeripheral handleSuccessfulConnection:]
  -[CBPeripheral handleFailedConnection]
  -[CBPeripheral handleDisconnection]
  -[CBPeripheral handleL2CAPChannelOpened:]
  -[CBPeripheral handleL2CAPChannelClosed:]
  -[CBPeripheral setOrphan]
  -[CBPeripheral removeAllL2CAPChannels]
  -[CBPeripheral RSSI]
  -[CBPeripheral l2capChannels]
  -[CBPeripheral initWithCentralManager:info:]
  -[CBPeripheral setVisibleInSettings:]
  -[CBPeripheral sendSyncMsg:args:]
  -[CBPeripheral setCanSendWriteWithoutResponse:]
  -[CBPeripheral setAttribute:forHandle:]
  -[CBPeripheral handleConnectionStateUpdated:]
  -[CBPeripheral isReadyForUpdates]
  -[CBPeripheral setBDAddress:]
  -[CBPeripheral setAncsAuthorized:]
  -[CBPeripheral removeAttributeForHandle:]
  -[CBPeripheral attributeForHandle:]
  -[CBPeripheral handleNameUpdated:]
  -[CBPeripheral handleServicesChanged:]
  -[CBPeripheral handleRSSIUpdated:]
  -[CBPeripheral handleVisibilityChanged:]
  -[CBPeripheral handleServicesDiscovered:]
  -[CBPeripheral handleTimeSyncResponse:]
  -[CBPeripheral handleServiceIncludedServicesDiscovered:]
  -[CBPeripheral handleServiceCharacteristicsDiscovered:]
  -[CBPeripheral handleCharacteristicValueUpdated:]
  -[CBPeripheral handleCharacteristicValueWritten:]
  -[CBPeripheral handleCharacteristicValueNotifying:]
  -[CBPeripheral handleCharacteristicDescriptorsDiscovered:]
  -[CBPeripheral handleDescriptorValueUpdated:]
  -[CBPeripheral handleDescriptorValueWritten:]
  -[CBPeripheral invalidateAllAttributes]
  -[CBPeripheral writesPending]
  -[CBPeripheral setWritesPending:]
  -[CBPeripheral l2capChannelForPeer:withPsm:]
  -[CBPeripheral handleAttributeEvent:args:attributeSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral handleServiceEvent:serviceSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral handleCharacteristicEvent:characteristicSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral handleDescriptorEvent:descriptorSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral readRSSI]
  -[CBPeripheral discoverServices:]
  -[CBPeripheral discoverIncludedServices:forService:]
  -[CBPeripheral discoverCharacteristics:forService:]
  -[CBPeripheral readValueForCharacteristic:]
  -[CBPeripheral maximumWriteValueLengthForType:]
  -[CBPeripheral writeValue:forCharacteristic:type:]
  -[CBPeripheral setBroadcastValue:forCharacteristic:]
  -[CBPeripheral setNotifyValue:forCharacteristic:]
  -[CBPeripheral discoverDescriptorsForCharacteristic:]
  -[CBPeripheral readValueForDescriptor:]
  -[CBPeripheral writeValue:forDescriptor:]
  -[CBPeripheral setPeripheralName:]
  -[CBPeripheral getTimeSyncData]
  -[CBPeripheral setHighPriorityStream:duration:]
  -[CBPeripheral canSendWriteWithoutResponse]
  -[CBPeripheral ancsAuthorized]
  -[CBPeripheral isConnectedToSystem]
  -[CBPeripheral isConnectedToSystem]
  -[CBPeripheral BDAddress]
  -[CBPeripheral visibleInSettings]


CBService : CBAttribute
 @property  BOOL isPrimary
 @property  NSArray *includedServices
 @property  NSArray *characteristics
 @property  NSNumber *startHandle
 @property  NSNumber *endHandle
 @property  CBPeripheral *peripheral

  // instance methods
  -[CBService invalidate]
  -[CBService .cxx_destruct]
  -[CBService isPrimary]
  -[CBService setCharacteristics:]
  -[CBService setIsPrimary:]
  -[CBService characteristics]
  -[CBService peripheral]
  -[CBService initWithPeripheral:dictionary:]
  -[CBService startHandle]
  -[CBService endHandle]
  -[CBService includedServices]
  -[CBService setIncludedServices:]
  -[CBService handleIncludedServicesDiscovered:]
  -[CBService handleCharacteristicsDiscovered:]


CBMutableService : CBService
 @property  NSNumber *ID
 @property  NSArray *includedServices
 @property  NSArray *characteristics

  // instance methods
  -[CBMutableService dealloc]
  -[CBMutableService .cxx_destruct]
  -[CBMutableService initWithDictionary:]
  -[CBMutableService observeValueForKeyPath:ofObject:change:context:]
  -[CBMutableService ID]
  -[CBMutableService handlePowerNotOn]
  -[CBMutableService setID:]
  -[CBMutableService initWithType:primary:]


CBUUID : NSObject <NSCopying>
 @property  NSData *data
 @property  NSString *UUIDString

  // class methods
  +[CBUUID UUIDWithString:]
  +[CBUUID UUIDWithData:]
  +[CBUUID UUIDWithCFUUID:]
  +[CBUUID UUIDWithNSUUID:]

  // instance methods
  -[CBUUID isEqual:]
  -[CBUUID copyWithZone:]
  -[CBUUID initWithData:]
  -[CBUUID initWithString:]
  -[CBUUID data]
  -[CBUUID UUIDString]
  -[CBUUID initWithCFUUID:]
  -[CBUUID initWithNSUUID:]


CBL2CAPChannel : NSObject
 @property  int socketFD
 @property  CBPeer *peer
 @property  NSInputStream *inputStream
 @property  NSOutputStream *outputStream
 @property  unsigned short PSM

  // instance methods
  -[CBL2CAPChannel dealloc]
  -[CBL2CAPChannel .cxx_destruct]
  -[CBL2CAPChannel outputStream]
  -[CBL2CAPChannel peer]
  -[CBL2CAPChannel inputStream]
  -[CBL2CAPChannel PSM]
  -[CBL2CAPChannel socketFD]
  -[CBL2CAPChannel initWithPeer:info:]


CBPeer : NSObject <NSCopying>
 @property  unsigned long mtuLength
 @property  long long pairingState
 @property  long long hostState
 @property  BOOL isLinkEncrypted
 @property  long long role
 @property  CBManager *manager
 @property  unsigned char connectedTransport
 @property  NSUUID *identifier

  // instance methods
  -[CBPeer copyWithZone:]
  -[CBPeer role]
  -[CBPeer .cxx_destruct]
  -[CBPeer identifier]
  -[CBPeer manager]
  -[CBPeer setManager:]
  -[CBPeer setRole:]
  -[CBPeer hostState]
  -[CBPeer hasTag:]
  -[CBPeer initWithInfo:manager:]
  -[CBPeer pairingState]
  -[CBPeer handleMsg:args:]
  -[CBPeer setIsLinkEncrypted:]
  -[CBPeer setConnectedTransport:]
  -[CBPeer setHostState:]
  -[CBPeer handleHostStateUpdated:]
  -[CBPeer setMtuLength:]
  -[CBPeer mtuLength]
  -[CBPeer handleMTUChanged:]
  -[CBPeer handleLinkEncryptionChanged:]
  -[CBPeer sendInternalMsg:args:]
  -[CBPeer sendInternalSyncMsg:args:]
  -[CBPeer tag:]
  -[CBPeer untag:]
  -[CBPeer setPairingState:]
  -[CBPeer isLinkEncrypted]
  -[CBPeer connectedTransport]


CBClassicManager : CBManager
 @property  NSMapTable *peers
 @property  BOOL isInquiryRunning
 @property  NSMutableSet *sdpServices
 @property  NSMutableSet *inquiryServices
 @property  NSMutableDictionary *sdpRecords
 @property  @? classicPeerDiscovered
 @property  @? servicesAdded
 @property  @? inquiryServicesAdded
 @property  @? sdpRecordAdded
 @property  BOOL inquiryState
 @property  BOOL discoverable
 @property  BOOL connectable
 @property  long long powerState
 @property  BOOL testMode
 @property  @? connectRFCOMMCallback
 @property  @? connectCallback
 @property  @? disconnectCallback

  // instance methods
  -[CBClassicManager dealloc]
  -[CBClassicManager .cxx_destruct]
  -[CBClassicManager observeValueForKeyPath:ofObject:change:context:]
  -[CBClassicManager peers]
  -[CBClassicManager testMode]
  -[CBClassicManager setTestMode:]
  -[CBClassicManager powerState]
  -[CBClassicManager removeService:]
  -[CBClassicManager connectable]
  -[CBClassicManager cancelPeerConnection:]
  -[CBClassicManager handleMsg:args:]
  -[CBClassicManager peerWithInfo:]
  -[CBClassicManager orphanClassicPeers]
  -[CBClassicManager forEachClassicPeer:]
  -[CBClassicManager classicPeerWithInfo:]
  -[CBClassicManager setClassicPeerDiscovered:]
  -[CBClassicManager servicesAdded]
  -[CBClassicManager setServicesAdded:]
  -[CBClassicManager inquiryServicesAdded]
  -[CBClassicManager setInquiryServicesAdded:]
  -[CBClassicManager sdpRecordAdded]
  -[CBClassicManager setSdpRecordAdded:]
  -[CBClassicManager cancelPeerConnection:force:]
  -[CBClassicManager handlePeerDiscovered:]
  -[CBClassicManager handlePeerConnectionCompleted:]
  -[CBClassicManager handlePeerDisconnectionCompleted:]
  -[CBClassicManager handleServicesAddedToSDP:]
  -[CBClassicManager handleServicesAddedToInquiryList:]
  -[CBClassicManager handleSDPRecordAdded:]
  -[CBClassicManager classicPeerDiscovered]
  -[CBClassicManager peerWithIdentifier:]
  -[CBClassicManager connectCallback]
  -[CBClassicManager disconnectCallback]
  -[CBClassicManager initWithQueue:options:]
  -[CBClassicManager setBTConnectable:]
  -[CBClassicManager setBTDiscoverable:]
  -[CBClassicManager setBTPowerState:]
  -[CBClassicManager handleLocalDeviceStateUpdatedMsg:]
  -[CBClassicManager startInquiryWithOptions:classicPeerDiscovered:]
  -[CBClassicManager stopInquiry]
  -[CBClassicManager retrievePairedPeersWithOptions:]
  -[CBClassicManager addServices:servicesAdded:]
  -[CBClassicManager removeAllServices]
  -[CBClassicManager addServicesToInquiryList:servicesAdded:]
  -[CBClassicManager removeServiceFromInquiryList:]
  -[CBClassicManager removeAllServicesFromInquiryList]
  -[CBClassicManager addService:sdpRecord:sdpRecordAdded:]
  -[CBClassicManager connectPeer:options:]
  -[CBClassicManager addAAPClient:aapClientAdded:]
  -[CBClassicManager removeAAPClient:]
  -[CBClassicManager inquiryState]
  -[CBClassicManager discoverable]
  -[CBClassicManager setConnectCallback:]
  -[CBClassicManager setDisconnectCallback:]
  -[CBClassicManager isInquiryRunning]
  -[CBClassicManager sdpServices]
  -[CBClassicManager inquiryServices]
  -[CBClassicManager sdpRecords]
  -[CBClassicManager connectRFCOMMCallback]
  -[CBClassicManager setConnectRFCOMMCallback:]


CBXpcConnection : NSObject
  // instance methods
  -[CBXpcConnection .cxx_destruct]
  -[CBXpcConnection disconnect]
  -[CBXpcConnection _checkIn]
  -[CBXpcConnection setTargetQueue:]
  -[CBXpcConnection _checkOut]
  -[CBXpcConnection sendMsg:args:]
  -[CBXpcConnection sendSyncMsg:args:]
  -[CBXpcConnection _applicationDidEnterBackgroundNotification]
  -[CBXpcConnection _applicationWillEnterForegroundNotification]
  -[CBXpcConnection _handleConnectionEvent:]
  -[CBXpcConnection _allocXpcMsg:args:]
  -[CBXpcConnection _nameForMessage:]
  -[CBXpcConnection _sendBarrier]
  -[CBXpcConnection _handleFinalized]
  -[CBXpcConnection _handleMsg:]
  -[CBXpcConnection _handleReset]
  -[CBXpcConnection _handleInvalid]
  -[CBXpcConnection initWithDelegate:queue:options:sessionType:]


CBPeripheralManager : CBManager
 @property  BOOL isAdvertising
 @property  NSMapTable *centrals
 @property  NSMutableArray *services
 @property  NSMutableDictionary *characteristicIDs
 @property  NSLock *updateLock
 @property  BOOL readyForUpdates
 @property  BOOL waitingForReady
 @property  NSNumber *multipleAdvertisingSupported
 @property  NSHashTable *l2capChannels
 @property  unsigned long attributeIDGenerator
 @property  BOOL isSupportingMultipleAdvertising
 @property  <CBPeripheralManagerDelegate> *delegate

  // class methods
  +[CBPeripheralManager authorizationStatus]
  +[CBPeripheralManager supportsFeatures:]

  // instance methods
  -[CBPeripheralManager init]
  -[CBPeripheralManager dealloc]
  -[CBPeripheralManager delegate]
  -[CBPeripheralManager setDelegate:]
  -[CBPeripheralManager .cxx_destruct]
  -[CBPeripheralManager observeValueForKeyPath:ofObject:change:context:]
  -[CBPeripheralManager services]
  -[CBPeripheralManager isAdvertising]
  -[CBPeripheralManager stopAdvertising]
  -[CBPeripheralManager startAdvertising:]
  -[CBPeripheralManager initWithDelegate:queue:]
  -[CBPeripheralManager initWithDelegate:queue:options:]
  -[CBPeripheralManager publishL2CAPChannel:requiresEncryption:]
  -[CBPeripheralManager unpublishL2CAPChannel:]
  -[CBPeripheralManager addService:]
  -[CBPeripheralManager removeService:]
  -[CBPeripheralManager handleMsg:args:]
  -[CBPeripheralManager handleL2CAPChannelOpened:]
  -[CBPeripheralManager handleL2CAPChannelClosed:]
  -[CBPeripheralManager removeAllL2CAPChannels]
  -[CBPeripheralManager l2capChannels]
  -[CBPeripheralManager isMsgAllowedAlways:]
  -[CBPeripheralManager handleRestoringState:]
  -[CBPeripheralManager handleConnectionParametersUpdated:]
  -[CBPeripheralManager handleAdvertisingAddressChanged:]
  -[CBPeripheralManager handleReadyForUpdates:]
  -[CBPeripheralManager handleSupportedFeatures:]
  -[CBPeripheralManager peerWithInfo:]
  -[CBPeripheralManager isMsgAllowedWhenOff:]
  -[CBPeripheralManager l2capChannelForPeer:withPsm:]
  -[CBPeripheralManager removeAllServices]
  -[CBPeripheralManager centralWithInfo:]
  -[CBPeripheralManager publishL2CAPChannel:requiresEncryption:options:]
  -[CBPeripheralManager forEachCentral:]
  -[CBPeripheralManager setIsAdvertising:]
  -[CBPeripheralManager respondToTransaction:value:attributeID:result:]
  -[CBPeripheralManager multipleAdvertisingSupported]
  -[CBPeripheralManager setMultipleAdvertisingSupported:]
  -[CBPeripheralManager respondToRequest:withResult:]
  -[CBPeripheralManager handleServiceAdded:]
  -[CBPeripheralManager handleGetAttributeValue:]
  -[CBPeripheralManager handleSetAttributeValues:]
  -[CBPeripheralManager handleNotificationAdded:]
  -[CBPeripheralManager handleNotificationRemoved:]
  -[CBPeripheralManager handleAdvertisingStarted:]
  -[CBPeripheralManager handleAdvertisingStopped:]
  -[CBPeripheralManager handleSolicitedServicesFound:]
  -[CBPeripheralManager handleL2CAPChannelPublished:]
  -[CBPeripheralManager handleL2CAPChannelUnpublished:]
  -[CBPeripheralManager handleCentralDidUpdateANCSAuthorization:]
  -[CBPeripheralManager centralWithIdentifier:]
  -[CBPeripheralManager publishL2CAPChannelWithEncryption:]
  -[CBPeripheralManager overrideLocalLeAddress:]
  -[CBPeripheralManager setDesiredConnectionLatency:forCentral:]
  -[CBPeripheralManager updateValue:forCharacteristic:onSubscribedCentrals:]
  -[CBPeripheralManager supportsMultipleAdvertising]
  -[CBPeripheralManager centrals]
  -[CBPeripheralManager characteristicIDs]
  -[CBPeripheralManager updateLock]
  -[CBPeripheralManager readyForUpdates]
  -[CBPeripheralManager waitingForReady]
  -[CBPeripheralManager attributeIDGenerator]
  -[CBPeripheralManager setAttributeIDGenerator:]


CBCentral : CBPeer
 @property  unsigned long maximumUpdateValueLength

  // instance methods
  -[CBCentral maximumUpdateValueLength]


CBManager : NSObject <CBXpcConnectionDelegate, CBPairingAgentParentDelegate>
 @property  long long state
 @property  long long authorization
 @property  BOOL tccComplete
 @property  CBPairingAgent *sharedPairingAgent
 @property  NSData *advertisingAddress
 @property  long long advertisingAddressType
 @property  NSString *localAddressString
 @property  NSString *localName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CBManager authorization]

  // instance methods
  -[CBManager dealloc]
  -[CBManager .cxx_destruct]
  -[CBManager state]
  -[CBManager setState:]
  -[CBManager initInternal]
  -[CBManager localName]
  -[CBManager advertisingAddress]
  -[CBManager sharedPairingAgent]
  -[CBManager authorization]
  -[CBManager sendMsg:args:]
  -[CBManager handleMsg:args:]
  -[CBManager setTccComplete:]
  -[CBManager getAppSDKVersion]
  -[CBManager startWithQueue:options:sessionType:]
  -[CBManager sendSyncMsg:args:]
  -[CBManager _handleAdvertisingAddressChanged:]
  -[CBManager isMsgAllowedAlways:]
  -[CBManager peerWithInfo:]
  -[CBManager isMsgAllowedWhenOff:]
  -[CBManager closeL2CAPChannelForPeerUUID:withPsm:]
  -[CBManager handleLocalDeviceStateUpdatedMsg:]
  -[CBManager xpcConnectionIsInvalid]
  -[CBManager xpcConnectionDidReceiveMsg:args:]
  -[CBManager xpcConnectionDidReset]
  -[CBManager setAuthorization:]
  -[CBManager extractLocalDeviceStatesDictionary:]
  -[CBManager handleStateUpdatedMsg:]
  -[CBManager performTCCCheck:]
  -[CBManager tccComplete]
  -[CBManager doneWithTCC]
  -[CBManager setConnectionTargetQueue:]
  -[CBManager sendRawCommand:data:completionHandler:]
  -[CBManager sendDebugMsg:args:]
  -[CBManager sendDebugSyncMsg:args:]
  -[CBManager handlePairingAgentMsg:args:]
  -[CBManager triggerBTErrorReport:]
  -[CBManager setAdvertisingAddress:]
  -[CBManager advertisingAddressType]
  -[CBManager localAddressString]


CBATTRequest : NSObject
 @property  CBCharacteristic *characteristic
 @property  NSNumber *transactionID
 @property  BOOL ignoreResponse
 @property  CBCentral *central
 @property  unsigned long offset
 @property  NSData *value

  // instance methods
  -[CBATTRequest .cxx_destruct]
  -[CBATTRequest value]
  -[CBATTRequest setValue:]
  -[CBATTRequest offset]
  -[CBATTRequest endOffset]
  -[CBATTRequest transactionID]
  -[CBATTRequest setCharacteristic:]
  -[CBATTRequest central]
  -[CBATTRequest characteristic]
  -[CBATTRequest ignoreResponse]
  -[CBATTRequest initWithCentral:characteristic:offset:transactionID:]
  -[CBATTRequest appendValueData:]
  -[CBATTRequest setIgnoreResponse:]


CBPairingAgent : NSObject
 @property  <CBPairingAgentParentDelegate> *parentManager
 @property  <CBPairingAgentDelegate> *delegate
 @property  BOOL useOOBMode

  // instance methods
  -[CBPairingAgent dealloc]
  -[CBPairingAgent delegate]
  -[CBPairingAgent setDelegate:]
  -[CBPairingAgent .cxx_destruct]
  -[CBPairingAgent observeValueForKeyPath:ofObject:change:context:]
  -[CBPairingAgent isPeerPaired:]
  -[CBPairingAgent handlePairingMessage:args:]
  -[CBPairingAgent initWithParentManager:]
  -[CBPairingAgent updateRegistration]
  -[CBPairingAgent setParentManager:]
  -[CBPairingAgent parentManager]
  -[CBPairingAgent pairPeer:options:]
  -[CBPairingAgent handlePairingRequested:]
  -[CBPairingAgent handlePairingCompleted:]
  -[CBPairingAgent handleUnpaired:]
  -[CBPairingAgent isPeerCloudPaired:]
  -[CBPairingAgent isPeerMagicPaired:]
  -[CBPairingAgent retrievePairedPeers]
  -[CBPairingAgent pairPeer:]
  -[CBPairingAgent pairPeer:useMITM:]
  -[CBPairingAgent unpairPeer:]
  -[CBPairingAgent respondToPairingRequest:type:accept:data:]
  -[CBPairingAgent setUseOOBMode:]
  -[CBPairingAgent retrieveOOBDataForPeer:]
  -[CBPairingAgent setOOBPairingEnabled:forPeer:]
  -[CBPairingAgent useOOBMode]


NSError(CoreBluetooth)
	// class methods
	+[NSError(CoreBluetooth) errorWithInfo:]

01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0600 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
