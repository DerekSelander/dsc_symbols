|| __DATA.__common _gCBDaemon
|| __DATA.__objc_data _OBJC_CLASS_$_BTDevicePicker
|| __DATA.__objc_data _OBJC_CLASS_$_CBATTRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CBAttribute
|| __DATA.__objc_data _OBJC_CLASS_$_CBCentral
|| __DATA.__objc_data _OBJC_CLASS_$_CBCharacteristic
|| __DATA.__objc_data _OBJC_CLASS_$_CBClassicManager
|| __DATA.__objc_data _OBJC_CLASS_$_CBClassicPeer
|| __DATA.__objc_data _OBJC_CLASS_$_CBConnection
|| __DATA.__objc_data _OBJC_CLASS_$_CBController
|| __DATA.__objc_data _OBJC_CLASS_$_CBDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CBDevice
|| __DATA.__objc_data _OBJC_CLASS_$_CBDiscovery
|| __DATA.__objc_data _OBJC_CLASS_$_CBIdentity
|| __DATA.__objc_data _OBJC_CLASS_$_CBL2CAPChannel
|| __DATA.__objc_data _OBJC_CLASS_$_CBMutableCharacteristic
|| __DATA.__objc_data _OBJC_CLASS_$_CBMutableDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_CBMutableService
|| __DATA.__objc_data _OBJC_CLASS_$_CBPeer
|| __DATA.__objc_data _OBJC_CLASS_$_CBPeripheral
|| __DATA.__objc_data _OBJC_CLASS_$_CBRFCOMMChannel
|| __DATA.__objc_data _OBJC_CLASS_$_CBReadRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CBScalablePipe
|| __DATA.__objc_data _OBJC_CLASS_$_CBServer
|| __DATA.__objc_data _OBJC_CLASS_$_CBService
|| __DATA.__objc_data _OBJC_CLASS_$_CBSpatialInteractionSession
|| __DATA.__objc_data _OBJC_CLASS_$_CBWriteRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_BTDevicePicker
|| __DATA.__objc_data _OBJC_METACLASS_$_CBATTRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CBAttribute
|| __DATA.__objc_data _OBJC_METACLASS_$_CBCentral
|| __DATA.__objc_data _OBJC_METACLASS_$_CBCharacteristic
|| __DATA.__objc_data _OBJC_METACLASS_$_CBClassicManager
|| __DATA.__objc_data _OBJC_METACLASS_$_CBClassicPeer
|| __DATA.__objc_data _OBJC_METACLASS_$_CBConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_CBController
|| __DATA.__objc_data _OBJC_METACLASS_$_CBDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CBDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_CBDiscovery
|| __DATA.__objc_data _OBJC_METACLASS_$_CBIdentity
|| __DATA.__objc_data _OBJC_METACLASS_$_CBL2CAPChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_CBMutableCharacteristic
|| __DATA.__objc_data _OBJC_METACLASS_$_CBMutableDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_CBMutableService
|| __DATA.__objc_data _OBJC_METACLASS_$_CBPeer
|| __DATA.__objc_data _OBJC_METACLASS_$_CBPeripheral
|| __DATA.__objc_data _OBJC_METACLASS_$_CBRFCOMMChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_CBReadRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CBScalablePipe
|| __DATA.__objc_data _OBJC_METACLASS_$_CBServer
|| __DATA.__objc_data _OBJC_METACLASS_$_CBService
|| __DATA.__objc_data _OBJC_METACLASS_$_CBSpatialInteractionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_CBWriteRequest
|| __DATA_CONST.__const _CBATTErrorDomain
|| __DATA_CONST.__const _CBAdvOptionInstanceAddress
|| __DATA_CONST.__const _CBAdvOptionInstanceRandomAddressBytes
|| __DATA_CONST.__const _CBAdvOptionObjectLocatorOnThisInstance
|| __DATA_CONST.__const _CBAdvOptionStopOnAdvertisingAddressChange
|| __DATA_CONST.__const _CBAdvertisementAppleMfgTypeKey
|| __DATA_CONST.__const _CBAdvertisementDataAppleBeaconKey
|| __DATA_CONST.__const _CBAdvertisementDataAppleMfgData
|| __DATA_CONST.__const _CBAdvertisementDataChannel
|| __DATA_CONST.__const _CBAdvertisementDataDeviceAddress
|| __DATA_CONST.__const _CBAdvertisementDataIsConnectable
|| __DATA_CONST.__const _CBAdvertisementDataIsContact
|| __DATA_CONST.__const _CBAdvertisementDataIsExtended
|| __DATA_CONST.__const _CBAdvertisementDataIsExtendedConnectable
|| __DATA_CONST.__const _CBAdvertisementDataIsObjectDiscovery
|| __DATA_CONST.__const _CBAdvertisementDataIsTDS
|| __DATA_CONST.__const _CBAdvertisementDataLeBluetoothDeviceAddressKey
|| __DATA_CONST.__const _CBAdvertisementDataLocalNameKey
|| __DATA_CONST.__const _CBAdvertisementDataManufacturerDataKey
|| __DATA_CONST.__const _CBAdvertisementDataNonAppleMfgKey
|| __DATA_CONST.__const _CBAdvertisementDataOverflowServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataProximityLevelKey
|| __DATA_CONST.__const _CBAdvertisementDataSaturated
|| __DATA_CONST.__const _CBAdvertisementDataServiceDataKey
|| __DATA_CONST.__const _CBAdvertisementDataServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataSolicitedServiceUUIDsKey
|| __DATA_CONST.__const _CBAdvertisementDataTDSData
|| __DATA_CONST.__const _CBAdvertisementDataTimestamp
|| __DATA_CONST.__const _CBAdvertisementDataTxPowerLevelKey
|| __DATA_CONST.__const _CBAdvertisementDataWlanOn
|| __DATA_CONST.__const _CBAdvertisementRawBytesData
|| __DATA_CONST.__const _CBAdvertisementTDSTypeKey
|| __DATA_CONST.__const _CBCancelPeripheralConnectionOptionDoNotAutoConnectBuiltInServices
|| __DATA_CONST.__const _CBCancelPeripheralConnectionOptionForce
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanDuration
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanEnable
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanPeriod
|| __DATA_CONST.__const _CBCentralManagerEnhancedScanType
|| __DATA_CONST.__const _CBCentralManagerMatchActionRuleLocalAddress
|| __DATA_CONST.__const _CBCentralManagerMatchActionRulePeerAddress
|| __DATA_CONST.__const _CBCentralManagerOptionPowerModule
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveApplicationActivityEvents
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveIncomingObjectDiscoveryData
|| __DATA_CONST.__const _CBCentralManagerOptionReceiveSystemEvents
|| __DATA_CONST.__const _CBCentralManagerOptionRestoreIdentifierKey
|| __DATA_CONST.__const _CBCentralManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStatePeripheralsKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStateScanOptionsKey
|| __DATA_CONST.__const _CBCentralManagerRestoredStateScanServicesKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionActive
|| __DATA_CONST.__const _CBCentralManagerScanOptionAllowDuplicatesKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionAllowedInPaused
|| __DATA_CONST.__const _CBCentralManagerScanOptionCacheResults
|| __DATA_CONST.__const _CBCentralManagerScanOptionContactTracing
|| __DATA_CONST.__const _CBCentralManagerScanOptionHWObjectDiscovery
|| __DATA_CONST.__const _CBCentralManagerScanOptionIsPrivilegedDaemonKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionLatencyCritical
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleAddress
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleAddressType
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleBypassFilterDuplicate
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleForceDupes
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleMaskKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRulePayloadKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleRSSIKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleRSSIThresholdOrder
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleTargetCore
|| __DATA_CONST.__const _CBCentralManagerScanOptionMatchingRuleTypeKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionPeersKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionPriorityCritical
|| __DATA_CONST.__const _CBCentralManagerScanOptionProximityThresholdKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionRange
|| __DATA_CONST.__const _CBCentralManagerScanOptionReloadMigratableItems
|| __DATA_CONST.__const _CBCentralManagerScanOptionRequiresActive
|| __DATA_CONST.__const _CBCentralManagerScanOptionRetainDuplicates
|| __DATA_CONST.__const _CBCentralManagerScanOptionScanInterval
|| __DATA_CONST.__const _CBCentralManagerScanOptionScanWindow
|| __DATA_CONST.__const _CBCentralManagerScanOptionScanningPhys
|| __DATA_CONST.__const _CBCentralManagerScanOptionSolicitedServiceUUIDsKey
|| __DATA_CONST.__const _CBCentralManagerScanOptionTDS
|| __DATA_CONST.__const _CBCentralManagerScanOptionZonesKey
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionObjectLocator
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionOwnAddress
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIntervalPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanIsLegacy
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanMaxWindowPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanPHY
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTargetCore
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanTypePHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY0
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY1
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWindowPHY2
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanWithPowerAssertion
|| __DATA_CONST.__const _CBCentralManagerScanParametersOptionScanningFilterPolicy
|| __DATA_CONST.__const _CBCentralManagerSetDataLengthMaxTxOctets
|| __DATA_CONST.__const _CBCentralManagerSetDataLengthMaxTxTime
|| __DATA_CONST.__const _CBCentralManagerTrackingOptionType
|| __DATA_CONST.__const _CBClassicManagerOptionConnectedKey
|| __DATA_CONST.__const _CBClassicManagerOptionIdentifiersKey
|| __DATA_CONST.__const _CBClassicManagerOptionPairedKey
|| __DATA_CONST.__const _CBClassicManagerOptionServicesKey
|| __DATA_CONST.__const _CBClassicManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionClientBundleID
|| __DATA_CONST.__const _CBConnectPeripheralOptionClientProcessID
|| __DATA_CONST.__const _CBConnectPeripheralOptionConnectionCompleteAfterPoll
|| __DATA_CONST.__const _CBConnectPeripheralOptionConnectionUseCase
|| __DATA_CONST.__const _CBConnectPeripheralOptionCtkdTransport
|| __DATA_CONST.__const _CBConnectPeripheralOptionDisableLeGATT
|| __DATA_CONST.__const _CBConnectPeripheralOptionDoNotDisconnectOnEncryptionFailure
|| __DATA_CONST.__const _CBConnectPeripheralOptionEnableControllerBTClockUpdates
|| __DATA_CONST.__const _CBConnectPeripheralOptionEnableScanCore
|| __DATA_CONST.__const _CBConnectPeripheralOptionEnableTransportBridgingKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionFirstApproachEnable
|| __DATA_CONST.__const _CBConnectPeripheralOptionFixedChannels
|| __DATA_CONST.__const _CBConnectPeripheralOptionHideFromBTSettings
|| __DATA_CONST.__const _CBConnectPeripheralOptionInitPHYs
|| __DATA_CONST.__const _CBConnectPeripheralOptionLatencyCritical
|| __DATA_CONST.__const _CBConnectPeripheralOptionMaxAllowedConnectionDelay
|| __DATA_CONST.__const _CBConnectPeripheralOptionMinRSSIForConnection
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnConnectionKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnDisconnectionKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionNotifyOnNotificationKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionPHYOptions
|| __DATA_CONST.__const _CBConnectPeripheralOptionRequiresANCS
|| __DATA_CONST.__const _CBConnectPeripheralOptionSetConnectScanDutyCycle
|| __DATA_CONST.__const _CBConnectPeripheralOptionStartDelayKey
|| __DATA_CONST.__const _CBConnectPeripheralOptionUseTempLTK
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionAllPeripherals
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionPeripheralUUIDs
|| __DATA_CONST.__const _CBConnectionEventMatchingOptionServiceUUIDs
|| __DATA_CONST.__const _CBConnectionUseCase
|| __DATA_CONST.__const _CBErrorDomain
|| __DATA_CONST.__const _CBInquiryInfiniteKey
|| __DATA_CONST.__const _CBInquiryLengthKey
|| __DATA_CONST.__const _CBInquiryRSSIThresholdKey
|| __DATA_CONST.__const _CBInquiryReportDuplicates
|| __DATA_CONST.__const _CBInquiryServicesKey
|| __DATA_CONST.__const _CBInternalErrorDomain
|| __DATA_CONST.__const _CBLESetPhyAllPhys
|| __DATA_CONST.__const _CBLESetPhyPhyOptions
|| __DATA_CONST.__const _CBLESetPhyRxPhys
|| __DATA_CONST.__const _CBLESetPhyTxPhys
|| __DATA_CONST.__const _CBManagerAppSDKVersion
|| __DATA_CONST.__const _CBManagerIsPrivilegedDaemonKey
|| __DATA_CONST.__const _CBManagerL2CAPChannelCreditsAckDelta
|| __DATA_CONST.__const _CBManagerL2CAPChannelInMPS
|| __DATA_CONST.__const _CBManagerL2CAPChannelInMTU
|| __DATA_CONST.__const _CBManagerL2CAPChannelInitialCredits
|| __DATA_CONST.__const _CBManagerNeedsRestrictedStateOperation
|| __DATA_CONST.__const _CBNumberOfConnectionsForUseCase
|| __DATA_CONST.__const _CBOriginalPeerIdentifierErrorKey
|| __DATA_CONST.__const _CBPairingAgentPairingDataOOBTKKey
|| __DATA_CONST.__const _CBPairingAgentPairingDataPasskeyKey
|| __DATA_CONST.__const _CBPairingOptionsDistributeIRK
|| __DATA_CONST.__const _CBPairingOptionsUseMITMAuthentication
|| __DATA_CONST.__const _CBPeripheralManagerAdvertisingInterval
|| __DATA_CONST.__const _CBPeripheralManagerAdvertisingWithPowerAssertion
|| __DATA_CONST.__const _CBPeripheralManagerOptionRestoreIdentifierKey
|| __DATA_CONST.__const _CBPeripheralManagerOptionShowPowerAlertKey
|| __DATA_CONST.__const _CBPeripheralManagerRestoredStateAdvertisementDataKey
|| __DATA_CONST.__const _CBPeripheralManagerRestoredStateServicesKey
|| __DATA_CONST.__const _CBScalablePipeOptionDisableBluetoothReliability
|| __DATA_CONST.__const _CBScalablePipeOptionRequiresEncryption
|| __DATA_CONST.__const _CBScalablePipeOptionStayConnectedWhenIdle
|| __DATA_CONST.__const _CBScalablePipeOptionTrace
|| __DATA_CONST.__const _CBScalablePipeOptionTransport
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchAllPeripherals
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchPeripheralsUUIDs
|| __DATA_CONST.__const _CBSetConnectionEventOptionMatchServicesUUIDs
|| __DATA_CONST.__const _CBUUIDAMSEntityAttributeCharacteristicString
|| __DATA_CONST.__const _CBUUIDAMSEntityUpdateCharacteristicString
|| __DATA_CONST.__const _CBUUIDAMSRemoteCommandCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSControlPointCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSDataSourceCharacteristicString
|| __DATA_CONST.__const _CBUUIDANCSNotificationSourceCharacteristicString
|| __DATA_CONST.__const _CBUUIDAppearanceString
|| __DATA_CONST.__const _CBUUIDAppleAccessoryReconnectServiceString
|| __DATA_CONST.__const _CBUUIDAppleHeadsetPropertyServiceString
|| __DATA_CONST.__const _CBUUIDAppleMediaServiceString
|| __DATA_CONST.__const _CBUUIDAppleNotificationCenterServiceString
|| __DATA_CONST.__const _CBUUIDBatteryLevelCharacteristicString
|| __DATA_CONST.__const _CBUUIDBatteryPowerStateCharacteristicString
|| __DATA_CONST.__const _CBUUIDBatteryServiceString
|| __DATA_CONST.__const _CBUUIDBloodPressureServiceString
|| __DATA_CONST.__const _CBUUIDBondManagementServiceString
|| __DATA_CONST.__const _CBUUIDBootKeyboardInputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDBootKeyboardOutputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDBootMouseInputReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDCharacteristicAggregateFormatString
|| __DATA_CONST.__const _CBUUIDCharacteristicExtendedPropertiesString
|| __DATA_CONST.__const _CBUUIDCharacteristicFormatString
|| __DATA_CONST.__const _CBUUIDCharacteristicUserDescriptionString
|| __DATA_CONST.__const _CBUUIDCharacteristicValidRangeString
|| __DATA_CONST.__const _CBUUIDClientCharacteristicConfigurationString
|| __DATA_CONST.__const _CBUUIDContinuityCharacteristicString
|| __DATA_CONST.__const _CBUUIDContinuityServiceString
|| __DATA_CONST.__const _CBUUIDCurrentTimeCharacteristicString
|| __DATA_CONST.__const _CBUUIDCurrentTimeServiceString
|| __DATA_CONST.__const _CBUUIDCyclingSpeedAndCadenceServiceString
|| __DATA_CONST.__const _CBUUIDDeviceInformationServiceString
|| __DATA_CONST.__const _CBUUIDDeviceNameString
|| __DATA_CONST.__const _CBUUIDDoAPServiceString
|| __DATA_CONST.__const _CBUUIDDosimetrySensitivityCharacteristicString
|| __DATA_CONST.__const _CBUUIDDosimetryVolumeCurveCharacteristicString
|| __DATA_CONST.__const _CBUUIDEventIndicatorCharacteristicString
|| __DATA_CONST.__const _CBUUIDFirmwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDGenericAccessProfileString
|| __DATA_CONST.__const _CBUUIDGenericAttributeProfileString
|| __DATA_CONST.__const _CBUUIDGlucoseServiceString
|| __DATA_CONST.__const _CBUUIDHIDControlPointCharacteristicString
|| __DATA_CONST.__const _CBUUIDHIDInformationCharacteristicString
|| __DATA_CONST.__const _CBUUIDHardwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDHealthThermometerServiceString
|| __DATA_CONST.__const _CBUUIDHeartRateServiceString
|| __DATA_CONST.__const _CBUUIDHumanInterfaceDeviceServiceString
|| __DATA_CONST.__const _CBUUIDIEEERegulatoryCertificationDataList
|| __DATA_CONST.__const _CBUUIDL2CAPPSMCharacteristicString
|| __DATA_CONST.__const _CBUUIDLocalTimeInformationCharacteristicString
|| __DATA_CONST.__const _CBUUIDMIDIServiceString
|| __DATA_CONST.__const _CBUUIDManufacturerNameStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDModelNumberStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDPeripheralPreferredConnectionParametersString
|| __DATA_CONST.__const _CBUUIDPeripheralPrivacyFlagString
|| __DATA_CONST.__const _CBUUIDPnPIDCharacteristicString
|| __DATA_CONST.__const _CBUUIDProtocolModeCharacteristicString
|| __DATA_CONST.__const _CBUUIDReconnectionAddressString
|| __DATA_CONST.__const _CBUUIDReportCharacteristicString
|| __DATA_CONST.__const _CBUUIDReportMapCharacteristicString
|| __DATA_CONST.__const _CBUUIDReportReferenceDescriptorString
|| __DATA_CONST.__const _CBUUIDSelectedCodecCharacteristicString
|| __DATA_CONST.__const _CBUUIDSendDataCharacteristicString
|| __DATA_CONST.__const _CBUUIDSerialNumberStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDServerCharacteristicConfigurationString
|| __DATA_CONST.__const _CBUUIDServiceChangedString
|| __DATA_CONST.__const _CBUUIDSoftwareRevisionStringCharacteristicString
|| __DATA_CONST.__const _CBUUIDStartStreamingCharacteristicString
|| __DATA_CONST.__const _CBUUIDStopStreamingCharacteristicString
|| __DATA_CONST.__const _CBUUIDSupportedCodecsCharacteristicString
|| __DATA_CONST.__const _CBUUIDSystemIDCharacteristicString
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBCentralManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPairingAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBPeripheralManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBScalablePipeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBUUID
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBCentralManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPairingAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBPeripheralManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBScalablePipeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBUUID
|| __TEXT.__const _CBAssignedL2CAPPSMForRapport
|| __TEXT.__text _CBXPCDecodeNSArrayOfNSData
|| __TEXT.__text _CBXPCEncodeNSArrayOfNSData
|| __TEXT.__text _CBXPCGetNextClientID
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFStreamCreatePairWithSocket
__ CoreFoundation: _CFUUIDGetUUIDBytes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreUtils: _CFGetInt64
__ CoreUtils: _CUDispatchTimerSet
__ CoreUtils: _CUXPCDecodeNSData
__ CoreUtils: _CUXPCDecodeNSDataOfLength
__ CoreUtils: _CUXPCDecodeNSErrorIfNeeded
__ CoreUtils: _CUXPCDecodeNSString
__ CoreUtils: _CUXPCDecodeSInt64RangedEx
__ CoreUtils: _CUXPCDecodeUInt64RangedEx
__ CoreUtils: _LogCategoryReplaceF
__ CoreUtils: _LogCategory_Remove
__ CoreUtils: _LogPrintF
__ CoreUtils: _NSAppendPrintF
__ CoreUtils: _NSErrorF
__ CoreUtils: _NSErrorNestedF
__ CoreUtils: _RandomBytes
__ CoreUtils: _SocketReadDataEx
__ CoreUtils: _SocketSetNonBlocking
__ CoreUtils: _SocketWriteData
__ CoreUtils: __LogCategory_Initialize
__ Foundation: _NSClassFromString
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ TCC: _TCCAccessPreflight
__ TCC: _TCCAccessRequest
__ TCC: _TCCAccessRestricted
__ TCC: _kTCCServiceBluetoothAlways
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_write
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_bool
__ libSystem.B.dylib: __xpc_type_data
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_double
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_fd
__ libSystem.B.dylib: __xpc_type_int64
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uint64
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_current_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_queue_get_label
__ libSystem.B.dylib: _dispatch_queue_get_qos_class
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _getprogname
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _os_channel_attr_create
__ libSystem.B.dylib: _os_channel_attr_destroy
__ libSystem.B.dylib: _os_channel_attr_set
__ libSystem.B.dylib: _os_channel_create_extended
__ libSystem.B.dylib: _os_channel_destroy
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _recv
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _shutdown
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _uuid_parse
__ libSystem.B.dylib: _uuid_unparse_upper
__ libSystem.B.dylib: _xpc_array_append_value
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_array_create
__ libSystem.B.dylib: _xpc_array_get_count
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_connection_activate
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_from_endpoint
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_barrier
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_get_bytes_ptr
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_array
__ libSystem.B.dylib: _xpc_dictionary_get_count
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_uuid
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_data
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_uuid
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_double_create
__ libSystem.B.dylib: _xpc_double_get_value
__ libSystem.B.dylib: _xpc_fd_dup
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_int64_create
__ libSystem.B.dylib: _xpc_int64_get_value
__ libSystem.B.dylib: _xpc_null_create
__ libSystem.B.dylib: _xpc_string_create
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uint64_get_value
__ libSystem.B.dylib: _xpc_uuid_create
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
PSSpecifierStub : NSObject
 @property  BluetoothDevice *device
 @property  id userInfo

  // instance methods
  -[PSSpecifierStub device]
  -[PSSpecifierStub setUserInfo:]
  -[PSSpecifierStub dealloc]
  -[PSSpecifierStub setDevice:]
  -[PSSpecifierStub userInfo]


BTDevicePicker : NSObject <UITableViewDelegate, UITableViewDataSource>
 @property  <BTDevicePickerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BTDevicePicker dismissAnimated:]
  -[BTDevicePicker startScanning]
  -[BTDevicePicker tableView:numberOfRowsInSection:]
  -[BTDevicePicker tableView:didSelectRowAtIndexPath:]
  -[BTDevicePicker dealloc]
  -[BTDevicePicker tableView:cellForRowAtIndexPath:]
  -[BTDevicePicker powerChanged:]
  -[BTDevicePicker deviceDiscoveryStoppedHandler:]
  -[BTDevicePicker deviceFoundHandler:]
  -[BTDevicePicker deviceLostHandler:]
  -[BTDevicePicker deviceNameChangedHandler:]
  -[BTDevicePicker authenticationRequestHandler:]
  -[BTDevicePicker devicePairedHandler:]
  -[BTDevicePicker deviceConnectionCompleteHandler:]
  -[BTDevicePicker checkAttachTimeout]
  -[BTDevicePicker showInternal]
  -[BTDevicePicker cancelDevicePicker]
  -[BTDevicePicker createAlertWindow]
  -[BTDevicePicker cleanupPairing]
  -[BTDevicePicker _btSSPConfirmationHandler:]
  -[BTDevicePicker _btSSPNumericComparisonHandler:]
  -[BTDevicePicker _btSSPPasskeyDisplayHandler:]
  -[BTDevicePicker createBTAlertWindow]
  -[BTDevicePicker initWithTitle:service:discoveryNameFilter:]
  -[BTDevicePicker alertSheetDismissed:]
  -[BTDevicePicker showPairingAlert:]
  -[BTDevicePicker dismissPairingAlert:]
  -[BTDevicePicker applicationWillResignActive:]
  -[BTDevicePicker show]
  -[BTDevicePicker setDelegate:]
  -[BTDevicePicker showAlert:]
  -[BTDevicePicker delegate]


CBClassicPeer : CBPeer
 @property  int deviceType
 @property  unsigned short productID
 @property  unsigned short vendorID
 @property  unsigned short vendorIDSource
 @property  unsigned short version
 @property  BOOL isDevFused
 @property  unsigned char colorID
 @property  NSString *appleModelIdentifier
 @property  BOOL isConnectedOverUSB
 @property  NSArray *syncGroups
 @property  unsigned short syncSettings
 @property  unsigned char batteryPercentSingle
 @property  unsigned char batteryPercentLeft
 @property  unsigned char batteryPercentRight
 @property  unsigned char batteryPercentCase
 @property  unsigned char batteryPercentCombined
 @property  unsigned char listeningMode
 @property  unsigned int listeningModeConfigs
 @property  BOOL LRDetectionEnabled
 @property  BOOL EQConfigEnabled
 @property  unsigned char EQConfigTreble
 @property  unsigned char EQConfigMid
 @property  unsigned char EQConfigBass
 @property  unsigned char singleClickMode
 @property  unsigned char doubleClickMode
 @property  unsigned char clickHoldModeLeft
 @property  unsigned char clickHoldModeRight
 @property  unsigned int doubleClickInterval
 @property  unsigned int clickHoldInterval
 @property  unsigned char oneBudANCMode
 @property  unsigned char switchControlMode
 @property  unsigned short doubleTapAction
 @property  unsigned short doubleTapActionLeft
 @property  unsigned short doubleTapActionRight
 @property  unsigned char doubleTapCapability
 @property  unsigned char micMode
 @property  BOOL inEarDetectionEnabled
 @property  BOOL smartRoutingEnabled
 @property  BOOL remoteTimeSyncEnabled
 @property  unsigned long timeSyncID
 @property  unsigned char primaryInEarStatus
 @property  unsigned char secondaryInEarStatus
 @property  NSArray *services
 @property  unsigned int appleFeatureBitMask
 @property  NSNumber *RSSI
 @property  NSHashTable *L2CAPChannels
 @property  NSHashTable *RFCOMMChannels
 @property  BOOL isIncoming
 @property  long long state
 @property  long long internalState
 @property  unsigned short connectionHandle
 @property  NSString *addressString
 @property  unsigned char modeSupported
 @property  BOOL traceLogging
 @property  NSString *name
 @property  @? connectL2CAPCallback
 @property  @? disconnectL2CAPCallback
 @property  @? connectRFCOMMCallback
 @property  @? disconnectRFCOMMCallback

  // instance methods
  -[CBClassicPeer isMac]
  -[CBClassicPeer isiPad]
  -[CBClassicPeer isiPhone]
  -[CBClassicPeer services]
  -[CBClassicPeer RFCOMMChannels]
  -[CBClassicPeer sendMsg:args:]
  -[CBClassicPeer isAppleDevice]
  -[CBClassicPeer setTraceLogging:]
  -[CBClassicPeer setVendorIDSource:]
  -[CBClassicPeer addressString]
  -[CBClassicPeer setPrimaryInEarStatus:]
  -[CBClassicPeer batteryPercentLeft]
  -[CBClassicPeer setSwitchControlMode:]
  -[CBClassicPeer setRSSI:]
  -[CBClassicPeer setConnectL2CAPCallback:]
  -[CBClassicPeer isReportingBatteryPercent]
  -[CBClassicPeer handlePeerUpdated:]
  -[CBClassicPeer RSSI]
  -[CBClassicPeer clickHoldModeLeft]
  -[CBClassicPeer setTimeSyncID:]
  -[CBClassicPeer traceLogging]
  -[CBClassicPeer openRFCOMMChannel:options:]
  -[CBClassicPeer setLRDetectionEnabled:]
  -[CBClassicPeer setVendorID:]
  -[CBClassicPeer setDoubleTapCapability:]
  -[CBClassicPeer setEQConfigMid:]
  -[CBClassicPeer setDeviceType:]
  -[CBClassicPeer disconnectL2CAPCallback]
  -[CBClassicPeer isSonyGameController]
  -[CBClassicPeer EQConfigTreble]
  -[CBClassicPeer setServices:]
  -[CBClassicPeer appleFeatureBitMask]
  -[CBClassicPeer deviceType]
  -[CBClassicPeer setListeningModeConfigs:]
  -[CBClassicPeer setListeningMode:]
  -[CBClassicPeer handleL2CAPChannelOpened:]
  -[CBClassicPeer handleFailedConnection]
  -[CBClassicPeer connectionHandle]
  -[CBClassicPeer setSyncSettings:]
  -[CBClassicPeer handleDisconnection]
  -[CBClassicPeer handleRFCOMMChannelOpened:]
  -[CBClassicPeer setBatteryPercentSingle:]
  -[CBClassicPeer channelWithID:]
  -[CBClassicPeer micMode]
  -[CBClassicPeer dealloc]
  -[CBClassicPeer modeSupported]
  -[CBClassicPeer setState:]
  -[CBClassicPeer setDoubleTapActionRight:]
  -[CBClassicPeer listeningMode]
  -[CBClassicPeer setAppleFeatureBitMask:]
  -[CBClassicPeer isGameController]
  -[CBClassicPeer setDoubleClickInterval:]
  -[CBClassicPeer .cxx_destruct]
  -[CBClassicPeer singleClickMode]
  -[CBClassicPeer connectL2CAPCallback]
  -[CBClassicPeer name]
  -[CBClassicPeer setIsConnectedOverUSB:]
  -[CBClassicPeer colorID]
  -[CBClassicPeer isDevFused]
  -[CBClassicPeer setEQConfigTreble:]
  -[CBClassicPeer openL2CAPChannel:options:]
  -[CBClassicPeer setClickHoldModeRight:]
  -[CBClassicPeer isConnectedOverUSB]
  -[CBClassicPeer EQConfigEnabled]
  -[CBClassicPeer setDoubleTapAction:]
  -[CBClassicPeer setRFCOMMChannels:]
  -[CBClassicPeer setAddressString:]
  -[CBClassicPeer setInternalState:]
  -[CBClassicPeer isRFCOMMServiceSupported:]
  -[CBClassicPeer setDoubleTapActionLeft:]
  -[CBClassicPeer clickHoldInterval]
  -[CBClassicPeer doubleClickMode]
  -[CBClassicPeer setVersion:]
  -[CBClassicPeer handleRFCOMMChannelClosed:]
  -[CBClassicPeer setBatteryPercentCombined:]
  -[CBClassicPeer isServiceSupported:]
  -[CBClassicPeer handleGetPeerState:]
  -[CBClassicPeer doubleTapActionLeft]
  -[CBClassicPeer inEarDetectionEnabled]
  -[CBClassicPeer clickHoldModeRight]
  -[CBClassicPeer initWithInfo:manager:]
  -[CBClassicPeer importServices:]
  -[CBClassicPeer isAppleFeatureSupported:]
  -[CBClassicPeer isMultiBatteryDevice]
  -[CBClassicPeer internalState]
  -[CBClassicPeer listeningModeConfigs]
  -[CBClassicPeer handleMsg:args:]
  -[CBClassicPeer setInEarDetectionEnabled:]
  -[CBClassicPeer doubleClickInterval]
  -[CBClassicPeer closeRFCOMMChannel:]
  -[CBClassicPeer setConnectRFCOMMCallback:]
  -[CBClassicPeer oneBudANCMode]
  -[CBClassicPeer setRemoteTimeSyncEnabled:]
  -[CBClassicPeer vendorID]
  -[CBClassicPeer isIncoming]
  -[CBClassicPeer setAppleModelIdentifier:]
  -[CBClassicPeer connectRFCOMMCallback]
  -[CBClassicPeer secondaryInEarStatus]
  -[CBClassicPeer handleL2CAPChannelClosed:]
  -[CBClassicPeer setSyncGroups:]
  -[CBClassicPeer openL2CAPChannel:]
  -[CBClassicPeer setClickHoldInterval:]
  -[CBClassicPeer setSingleClickMode:]
  -[CBClassicPeer doubleTapActionRight]
  -[CBClassicPeer sendMsg:requiresConnected:args:]
  -[CBClassicPeer batteryPercentCombined]
  -[CBClassicPeer L2CAPChannels]
  -[CBClassicPeer serviceForPSM:]
  -[CBClassicPeer setOrphan]
  -[CBClassicPeer psmForService:]
  -[CBClassicPeer remoteTimeSyncEnabled]
  -[CBClassicPeer batteryPercentCase]
  -[CBClassicPeer vendorIDSource]
  -[CBClassicPeer service:]
  -[CBClassicPeer setDisconnectRFCOMMCallback:]
  -[CBClassicPeer doubleTapCapability]
  -[CBClassicPeer version]
  -[CBClassicPeer setDoubleClickMode:]
  -[CBClassicPeer appleModelIdentifier]
  -[CBClassicPeer batteryPercentRight]
  -[CBClassicPeer setL2CAPChannels:]
  -[CBClassicPeer getConnectedServices]
  -[CBClassicPeer setBatteryPercentLeft:]
  -[CBClassicPeer setIsIncoming:]
  -[CBClassicPeer setClickHoldModeLeft:]
  -[CBClassicPeer EQConfigMid]
  -[CBClassicPeer state]
  -[CBClassicPeer setModeSupported:]
  -[CBClassicPeer switchControlMode]
  -[CBClassicPeer productID]
  -[CBClassicPeer closeL2CAPChannel:]
  -[CBClassicPeer setDisconnectL2CAPCallback:]
  -[CBClassicPeer setOneBudANCMode:]
  -[CBClassicPeer setSmartRoutingEnabled:]
  -[CBClassicPeer setBatteryPercentCase:]
  -[CBClassicPeer isXboxGameController]
  -[CBClassicPeer smartRoutingEnabled]
  -[CBClassicPeer setMicMode:]
  -[CBClassicPeer primaryInEarStatus]
  -[CBClassicPeer setName:]
  -[CBClassicPeer timeSyncID]
  -[CBClassicPeer setEQConfigEnabled:]
  -[CBClassicPeer syncSettings]
  -[CBClassicPeer channelWithPSM:]
  -[CBClassicPeer batteryPercentSingle]
  -[CBClassicPeer EQConfigBass]
  -[CBClassicPeer doubleTapAction]
  -[CBClassicPeer rfcommChannelIDForService:]
  -[CBClassicPeer setEQConfigBass:]
  -[CBClassicPeer setIsDevFused:]
  -[CBClassicPeer setColorID:]
  -[CBClassicPeer setBatteryPercentRight:]
  -[CBClassicPeer handleSuccessfulConnection:]
  -[CBClassicPeer serviceForRFCOMMChannelID:]
  -[CBClassicPeer openRFCOMMChannel:]
  -[CBClassicPeer setProductID:]
  -[CBClassicPeer syncGroups]
  -[CBClassicPeer disconnectRFCOMMCallback]
  -[CBClassicPeer LRDetectionEnabled]
  -[CBClassicPeer setConnectionHandle:]
  -[CBClassicPeer setSecondaryInEarStatus:]


CBCentralManager : CBManager
 @property  BOOL isScanning
 @property  NSMapTable *peripherals
 @property  NSMutableArray *discoveredPeripherals
 @property  <CBCentralManagerDelegate> *delegate

  // class methods
  +[CBCentralManager supportsFeatures:]

  // instance methods
  -[CBCentralManager removeAdvancedMatchingRule:]
  -[CBCentralManager peerWithInfo:]
  -[CBCentralManager isMsgAllowedAlways:]
  -[CBCentralManager addAdvancedMatchingRule:]
  -[CBCentralManager dataArrayToUUIDArray:]
  -[CBCentralManager setDesiredConnectionLatency:forPeripheral:]
  -[CBCentralManager initWithDelegate:queue:]
  -[CBCentralManager HandleControllerBTClockUpdateMsg:]
  -[CBCentralManager init]
  -[CBCentralManager scanForPeripheralsWithServices:options:]
  -[CBCentralManager setIsScanning:]
  -[CBCentralManager handlePeripheralDiscovered:]
  -[CBCentralManager isScanning]
  -[CBCentralManager pauseLeConnectionManager]
  -[CBCentralManager peripheralWithIdentifier:]
  -[CBCentralManager discoveredPeripherals]
  -[CBCentralManager stopScan]
  -[CBCentralManager retrieveConnectedPeripherals]
  -[CBCentralManager handlePeripheralConnectionCompleted:]
  -[CBCentralManager setEnhancedScanEnable:]
  -[CBCentralManager dealloc]
  -[CBCentralManager handlePeripheralConnectionStateUpdated:]
  -[CBCentralManager orphanPeripherals]
  -[CBCentralManager .cxx_destruct]
  -[CBCentralManager forEachPeripheral:]
  -[CBCentralManager registerForConnectionEventsWithOptions:]
  -[CBCentralManager enablePrivateModeForSessionWithIdentifier:forDuration:]
  -[CBCentralManager peripherals]
  -[CBCentralManager randomizeAFHMapForPeripheral:]
  -[CBCentralManager handleRestoringState:]
  -[CBCentralManager peripheralWithInfo:]
  -[CBCentralManager cancelPeripheralConnection:]
  -[CBCentralManager handleAncsAuthChanged:]
  -[CBCentralManager retrieveConnectedPeripheralsWithServices:allowAll:]
  -[CBCentralManager getRemainingAdvancedMatchingRule]
  -[CBCentralManager handleReadyForUpdates:]
  -[CBCentralManager setEnhancedSetScanParamtersMultiCore:]
  -[CBCentralManager handleMsg:args:]
  -[CBCentralManager pauseScans]
  -[CBCentralManager createPeripheralWithAddress:andIdentifier:]
  -[CBCentralManager handleScanFailedToStartWithError:]
  -[CBCentralManager isMsgAllowedWhenOff:]
  -[CBCentralManager handleDidReceiveDataFromPeripheral:]
  -[CBCentralManager handlePeripheralCLReady:]
  -[CBCentralManager setLESetPhy:options:]
  -[CBCentralManager handleSupportedFeatures:]
  -[CBCentralManager setLeAFHMap:]
  -[CBCentralManager removeSingleEntryDuplicateFilter:]
  -[CBCentralManager startConnectionEventCounterForPeripheral:]
  -[CBCentralManager retrieveState]
  -[CBCentralManager initWithDelegate:queue:options:]
  -[CBCentralManager observeValueForKeyPath:ofObject:change:context:]
  -[CBCentralManager setConnectionEventOptions:]
  -[CBCentralManager connectPeripheral:options:]
  -[CBCentralManager enablePrivateModeForPeripheral:forDuration:]
  -[CBCentralManager isApplicationConnectedToAnyPeripherals:]
  -[CBCentralManager setMatchActionRules:]
  -[CBCentralManager startTrackingPeripheral:options:]
  -[CBCentralManager cancelPeripheralConnection:force:]
  -[CBCentralManager handlePeripheralDisconnectionCompleted:]
  -[CBCentralManager stopTrackingPeripheral:options:]
  -[CBCentralManager retrievePeripheralWithAddress:]
  -[CBCentralManager handleApplicationActivityEvent:]
  -[CBCentralManager sendData:toPeripheral:]
  -[CBCentralManager handleApplicationConnectionEventDidOccur:]
  -[CBCentralManager setDataLengthChange:options:]
  -[CBCentralManager setDelegate:]
  -[CBCentralManager retrievePeripherals:]
  -[CBCentralManager createOfflineLEPairing:]
  -[CBCentralManager setDiscoveredPeripherals:]
  -[CBCentralManager retrieveConnectedPeripheralsWithServices:]
  -[CBCentralManager getTotalSupportedAdvancedMatchingRules]
  -[CBCentralManager handleConnectionParametersUpdated:]
  -[CBCentralManager delegate]
  -[CBCentralManager stopConnectionEventCounterForPeripheral:]
  -[CBCentralManager resumeLeConnectionManager]
  -[CBCentralManager cancelPeripheralConnection:options:]
  -[CBCentralManager retrievePeripheralsWithIdentifiers:]
  -[CBCentralManager handleAdvertisingAddressChanged:]
  -[CBCentralManager wipeDuplicateFilterList:]
  -[CBCentralManager resumeScans]
  -[CBCentralManager handleDidSendBytesToPeripheralwithError:]
  -[CBCentralManager handleZoneLost:]
  -[CBCentralManager handlePeripheralTrackingUpdated:]


CBRFCOMMChannel : NSObject
 @property  int socketFD
 @property  CBClassicPeer *peer
 @property  NSInputStream *inputStream
 @property  NSOutputStream *outputStream
 @property  CBUUID *serviceUUID
 @property  unsigned char channelID
 @property  unsigned short mtu
 @property  BOOL isIncoming

  // instance methods
  -[CBRFCOMMChannel channelID]
  -[CBRFCOMMChannel peer]
  -[CBRFCOMMChannel dealloc]
  -[CBRFCOMMChannel .cxx_destruct]
  -[CBRFCOMMChannel outputStream]
  -[CBRFCOMMChannel mtu]
  -[CBRFCOMMChannel initWithPeer:info:]
  -[CBRFCOMMChannel socketFD]
  -[CBRFCOMMChannel isIncoming]
  -[CBRFCOMMChannel inputStream]
  -[CBRFCOMMChannel serviceUUID]


CBCharacteristic : CBAttribute
 @property  CBService *service
 @property  unsigned long properties
 @property  NSData *value
 @property  NSArray *descriptors
 @property  BOOL isNotifying
 @property  unsigned long valueTimestamp
 @property  CBPeripheral *peripheral
 @property  NSNumber *handle
 @property  NSNumber *valueHandle
 @property  BOOL isBroadcasted

  // instance methods
  -[CBCharacteristic descriptors]
  -[CBCharacteristic setDescriptors:]
  -[CBCharacteristic setService:]
  -[CBCharacteristic initWithService:dictionary:]
  -[CBCharacteristic .cxx_destruct]
  -[CBCharacteristic setProperties:]
  -[CBCharacteristic handle]
  -[CBCharacteristic service]
  -[CBCharacteristic valueHandle]
  -[CBCharacteristic setIsNotifying:]
  -[CBCharacteristic handleValueUpdated:]
  -[CBCharacteristic handleValueWritten:]
  -[CBCharacteristic handleValueBroadcasted:]
  -[CBCharacteristic handleValueNotifying:]
  -[CBCharacteristic handleDescriptorsDiscovered:]
  -[CBCharacteristic isBroadcasted]
  -[CBCharacteristic isNotifying]
  -[CBCharacteristic valueTimestamp]
  -[CBCharacteristic setValue:]
  -[CBCharacteristic value]
  -[CBCharacteristic properties]
  -[CBCharacteristic invalidate]
  -[CBCharacteristic peripheral]


CBMutableCharacteristic : CBCharacteristic
 @property  NSNumber *ID
 @property  unsigned long permissions
 @property  NSArray *subscribedCentrals
 @property  unsigned long properties
 @property  NSData *value
 @property  NSArray *descriptors

  // instance methods
  -[CBMutableCharacteristic ID]
  -[CBMutableCharacteristic setID:]
  -[CBMutableCharacteristic dealloc]
  -[CBMutableCharacteristic initWithService:dictionary:]
  -[CBMutableCharacteristic .cxx_destruct]
  -[CBMutableCharacteristic handleCentralUnsubscribed:]
  -[CBMutableCharacteristic handleCentralSubscribed:]
  -[CBMutableCharacteristic observeValueForKeyPath:ofObject:change:context:]
  -[CBMutableCharacteristic permissions]
  -[CBMutableCharacteristic initWithType:properties:value:permissions:]
  -[CBMutableCharacteristic setPermissions:]
  -[CBMutableCharacteristic subscribedCentrals]
  -[CBMutableCharacteristic handlePowerNotOn]


CBIdentity : NSObject <CUXPCCodable>
 @property  NSString *accountID
 @property  NSUUID *bluetoothIdentifier
 @property  NSString *contactID
 @property  NSString *identifier
 @property  NSString *idsDeviceID
 @property  NSData *irkData
 @property  NSString *model
 @property  NSString *name
 @property  int type

  // instance methods
  -[CBIdentity setAccountID:]
  -[CBIdentity setType:]
  -[CBIdentity irkData]
  -[CBIdentity .cxx_destruct]
  -[CBIdentity setIrkData:]
  -[CBIdentity name]
  -[CBIdentity setModel:]
  -[CBIdentity setBluetoothIdentifier:]
  -[CBIdentity setIdentifier:]
  -[CBIdentity identifier]
  -[CBIdentity initWithXPCObject:error:]
  -[CBIdentity setContactID:]
  -[CBIdentity type]
  -[CBIdentity contactID]
  -[CBIdentity idsDeviceID]
  -[CBIdentity isEqual:]
  -[CBIdentity setIdsDeviceID:]
  -[CBIdentity descriptionWithLevel:]
  -[CBIdentity model]
  -[CBIdentity encodeWithXPCObject:]
  -[CBIdentity accountID]
  -[CBIdentity setName:]
  -[CBIdentity bluetoothIdentifier]


CBScalablePipeManager : CBManager
 @property  NSHashTable *pipes
 @property  <CBScalablePipeManagerDelegate> *delegate
 @property  NSSet *identifiers

  // instance methods
  -[CBScalablePipeManager initWithDelegate:]
  -[CBScalablePipeManager identifiers]
  -[CBScalablePipeManager sharedPairingAgent]
  -[CBScalablePipeManager initWithDelegate:queue:]
  -[CBScalablePipeManager handleHostStateUpdated:]
  -[CBScalablePipeManager registerEndpoint:type:priority:transport:]
  -[CBScalablePipeManager handlePipeConnected:]
  -[CBScalablePipeManager handleEndpointRemoved:]
  -[CBScalablePipeManager dealloc]
  -[CBScalablePipeManager .cxx_destruct]
  -[CBScalablePipeManager handleEndpointAdded:]
  -[CBScalablePipeManager setLinkRequirementsForPeerWithLatency:latencyInMs:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager setLinkRequirementsForPeer:withClientName:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager handlePipeDisconnected:]
  -[CBScalablePipeManager handleMsg:args:]
  -[CBScalablePipeManager pipeForName:identifier:]
  -[CBScalablePipeManager isMsgAllowedWhenOff:]
  -[CBScalablePipeManager registerEndpoint:type:priority:]
  -[CBScalablePipeManager unregisterAllEndpoints]
  -[CBScalablePipeManager unregisterEndpoint:]
  -[CBScalablePipeManager pipes]
  -[CBScalablePipeManager observeValueForKeyPath:ofObject:change:context:]
  -[CBScalablePipeManager registerEndpoint:type:priority:transport:requireEncryption:]
  -[CBScalablePipeManager registerEndpoint:type:priority:options:]
  -[CBScalablePipeManager setDelegate:]
  -[CBScalablePipeManager orphanPipes]
  -[CBScalablePipeManager setLinkRequirementsForPeer:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:]
  -[CBScalablePipeManager delegate]


CBAttribute : NSObject
 @property  CBUUID *UUID

  // instance methods
  -[CBAttribute .cxx_destruct]
  -[CBAttribute initWithUUID:]
  -[CBAttribute UUID]


CBScalablePipe : NSObject
 @property  CBCentral *central
 @property  CBPeer *peer
 @property  NSString *name
 @property  long long type
 @property  long long priority
 @property  BOOL reliablePipe
 @property  NSInputStream *input
 @property  NSOutputStream *output
 @property  ^v channel
 @property  unsigned char localCLVersion
 @property  unsigned char peerCLVersion
 @property  unsigned int localCLFeatures
 @property  unsigned int peerCLFeatures

  // instance methods
  -[CBScalablePipe input]
  -[CBScalablePipe output]
  -[CBScalablePipe peer]
  -[CBScalablePipe channel]
  -[CBScalablePipe dealloc]
  -[CBScalablePipe .cxx_destruct]
  -[CBScalablePipe name]
  -[CBScalablePipe type]
  -[CBScalablePipe initWithPipeManager:info:]
  -[CBScalablePipe reliablePipe]
  -[CBScalablePipe localCLVersion]
  -[CBScalablePipe peerCLVersion]
  -[CBScalablePipe localCLFeatures]
  -[CBScalablePipe peerCLFeatures]
  -[CBScalablePipe setOrphan]
  -[CBScalablePipe central]
  -[CBScalablePipe priority]


CBController : NSObject <CUXPCCodable, CBActivatable, CBLabelable, CBStateReporting>
 @property  unsigned int assertionFlags
 @property  unsigned int clientID
 @property  unsigned int internalFlags
 @property  NSObject<OS_xpc_object> *testListenerEndpoint
 @property  int discoverableState
 @property  @? discoverableStateChangedHandler
 @property  @? errorHandler
 @property  int inquiryState
 @property  @? inquiryStateChangedHandler
 @property  @? interruptionHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  NSString *label
 @property  long long bluetoothState
 @property  @? bluetoothStateChangedHandler

  // instance methods
  -[CBController setTestListenerEndpoint:]
  -[CBController testListenerEndpoint]
  -[CBController clientID]
  -[CBController _invalidateDirect]
  -[CBController _ensureXPCStarted]
  -[CBController init]
  -[CBController bluetoothStateChangedHandler]
  -[CBController setBluetoothStateChangedHandler:]
  -[CBController bluetoothState]
  -[CBController errorHandler]
  -[CBController dealloc]
  -[CBController setErrorHandler:]
  -[CBController setClientID:]
  -[CBController .cxx_destruct]
  -[CBController dispatchQueue]
  -[CBController label]
  -[CBController _updateIfNeededWithBlock:]
  -[CBController setInvalidationHandler:]
  -[CBController _activate]
  -[CBController _xpcReceivedMessage:]
  -[CBController initWithXPCObject:error:]
  -[CBController diagnosticControl:completion:]
  -[CBController diagnosticShow:completion:]
  -[CBController inquiryState]
  -[CBController setDispatchQueue:]
  -[CBController setInterruptionHandler:]
  -[CBController internalFlags]
  -[CBController _update]
  -[CBController interruptionHandler]
  -[CBController _activateDirectStart]
  -[CBController _activateAssertionWithFlagsXPC:completion:]
  -[CBController assertionFlags]
  -[CBController _xpcReceivedDiscoverableStateChanged:]
  -[CBController _xpcReceivedInquiryStateChanged:]
  -[CBController _activateAssertionWithFlagsDirect:completion:]
  -[CBController activateAssertionWithFlags:completion:]
  -[CBController diagnosticLog:completion:]
  -[CBController getPowerStateWithCompletion:]
  -[CBController setPowerState:completion:]
  -[CBController updateIdentities:completion:]
  -[CBController discoverableState]
  -[CBController discoverableStateChangedHandler]
  -[CBController inquiryStateChangedHandler]
  -[CBController setDiscoverableStateChangedHandler:]
  -[CBController setInquiryStateChangedHandler:]
  -[CBController setAssertionFlags:]
  -[CBController setLabel:]
  -[CBController _invalidated]
  -[CBController descriptionWithLevel:]
  -[CBController _xpcReceivedEvent:]
  -[CBController setInternalFlags:]
  -[CBController _xpcReceivedPowerStateChanged:]
  -[CBController invalidationHandler]
  -[CBController _interrupted]
  -[CBController encodeWithXPCObject:]
  -[CBController invalidate]
  -[CBController activateWithCompletion:]
  -[CBController _activateXPCCompleted:]
  -[CBController _activateXPCStart:]


CBDescriptor : CBAttribute
 @property  CBCharacteristic *characteristic
 @property  id value
 @property  CBPeripheral *peripheral
 @property  NSNumber *handle

  // instance methods
  -[CBDescriptor .cxx_destruct]
  -[CBDescriptor handle]
  -[CBDescriptor initWithCharacteristic:dictionary:]
  -[CBDescriptor handleValueUpdated:]
  -[CBDescriptor handleValueWritten:]
  -[CBDescriptor setValue:]
  -[CBDescriptor value]
  -[CBDescriptor invalidate]
  -[CBDescriptor characteristic]
  -[CBDescriptor setCharacteristic:]
  -[CBDescriptor peripheral]


CBMutableDescriptor : CBDescriptor
 @property  NSNumber *ID

  // instance methods
  -[CBMutableDescriptor ID]
  -[CBMutableDescriptor setID:]
  -[CBMutableDescriptor .cxx_destruct]
  -[CBMutableDescriptor initWithType:value:]
  -[CBMutableDescriptor initWithCharacteristic:dictionary:]


CBPeripheral : CBPeer
 @property  NSString *name
 @property  unsigned short appearance
 @property  NSNumber *RSSI
 @property  long long state
 @property  NSArray *services
 @property  unsigned int writesPending
 @property  BOOL canSendWriteWithoutResponse
 @property  BOOL ancsAuthorized
 @property  BOOL isConnectedToSystem
 @property  NSHashTable *l2capChannels
 @property  NSString *BDAddress
 @property  BOOL visibleInSettings
 @property  BOOL connectedToSystem
 @property  <CBPeripheralDelegate> *delegate

  // instance methods
  -[CBPeripheral services]
  -[CBPeripheral handleDescriptorValueUpdated:]
  -[CBPeripheral isConnected]
  -[CBPeripheral sendMsg:args:]
  -[CBPeripheral sendSyncMsg:args:]
  -[CBPeripheral discoverServices:]
  -[CBPeripheral setHighPriorityStream:duration:]
  -[CBPeripheral setBDAddress:]
  -[CBPeripheral setRSSI:]
  -[CBPeripheral RSSI]
  -[CBPeripheral handleServiceEvent:serviceSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral handleCharacteristicValueWritten:]
  -[CBPeripheral handleServiceIncludedServicesDiscovered:]
  -[CBPeripheral getTimeSyncData]
  -[CBPeripheral setVisibleInSettings:]
  -[CBPeripheral setNotifyValue:forCharacteristic:]
  -[CBPeripheral canSendWriteWithoutResponse]
  -[CBPeripheral writesPending]
  -[CBPeripheral removeAttributeForHandle:]
  -[CBPeripheral setServices:]
  -[CBPeripheral setPeripheralName:]
  -[CBPeripheral handleCharacteristicValueUpdated:]
  -[CBPeripheral handleCharacteristicEvent:characteristicSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral handleL2CAPChannelOpened:]
  -[CBPeripheral handleFailedConnection]
  -[CBPeripheral isConnectedToSystem]
  -[CBPeripheral isConnectedToSystem]
  -[CBPeripheral removeAllL2CAPChannels]
  -[CBPeripheral handleDisconnection]
  -[CBPeripheral writeValue:forDescriptor:]
  -[CBPeripheral dealloc]
  -[CBPeripheral setState:]
  -[CBPeripheral .cxx_destruct]
  -[CBPeripheral name]
  -[CBPeripheral openL2CAPChannel:options:]
  -[CBPeripheral initWithCentralManager:info:]
  -[CBPeripheral attributeForHandle:]
  -[CBPeripheral l2capChannels]
  -[CBPeripheral setAttribute:forHandle:]
  -[CBPeripheral readRSSI]
  -[CBPeripheral setBroadcastValue:forCharacteristic:]
  -[CBPeripheral handleMsg:args:]
  -[CBPeripheral handleVisibilityChanged:]
  -[CBPeripheral handleCharacteristicValueNotifying:]
  -[CBPeripheral readValueForDescriptor:]
  -[CBPeripheral discoverDescriptorsForCharacteristic:]
  -[CBPeripheral handleAttributeEvent:args:attributeSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral invalidateAllAttributes]
  -[CBPeripheral handleL2CAPChannelClosed:]
  -[CBPeripheral handleConnectionStateUpdated:]
  -[CBPeripheral handleDescriptorEvent:descriptorSelector:delegateSelector:delegateFlag:]
  -[CBPeripheral observeValueForKeyPath:ofObject:change:context:]
  -[CBPeripheral openL2CAPChannel:]
  -[CBPeripheral sendMsg:requiresConnected:args:]
  -[CBPeripheral setOrphan]
  -[CBPeripheral handleServicesDiscovered:]
  -[CBPeripheral discoverIncludedServices:forService:]
  -[CBPeripheral setWritesPending:]
  -[CBPeripheral l2capChannelForPeer:withPsm:]
  -[CBPeripheral handleDescriptorValueWritten:]
  -[CBPeripheral setCanSendWriteWithoutResponse:]
  -[CBPeripheral writeValue:forCharacteristic:type:]
  -[CBPeripheral setAppearance:]
  -[CBPeripheral setDelegate:]
  -[CBPeripheral state]
  -[CBPeripheral appearance]
  -[CBPeripheral handleNameUpdated:]
  -[CBPeripheral handleRSSIUpdated:]
  -[CBPeripheral readValueForCharacteristic:]
  -[CBPeripheral setName:]
  -[CBPeripheral delegate]
  -[CBPeripheral isReadyForUpdates]
  -[CBPeripheral visibleInSettings]
  -[CBPeripheral BDAddress]
  -[CBPeripheral handleCharacteristicDescriptorsDiscovered:]
  -[CBPeripheral ancsAuthorized]
  -[CBPeripheral handleSuccessfulConnection:]
  -[CBPeripheral handleServiceCharacteristicsDiscovered:]
  -[CBPeripheral discoverCharacteristics:forService:]
  -[CBPeripheral handleServicesChanged:]
  -[CBPeripheral handleTimeSyncResponse:]
  -[CBPeripheral maximumWriteValueLengthForType:]
  -[CBPeripheral setAncsAuthorized:]


CBService : CBAttribute
 @property  BOOL isPrimary
 @property  NSArray *includedServices
 @property  NSArray *characteristics
 @property  NSNumber *startHandle
 @property  NSNumber *endHandle
 @property  CBPeripheral *peripheral

  // instance methods
  -[CBService setIsPrimary:]
  -[CBService .cxx_destruct]
  -[CBService characteristics]
  -[CBService setCharacteristics:]
  -[CBService isPrimary]
  -[CBService endHandle]
  -[CBService initWithPeripheral:dictionary:]
  -[CBService startHandle]
  -[CBService includedServices]
  -[CBService setIncludedServices:]
  -[CBService handleIncludedServicesDiscovered:]
  -[CBService handleCharacteristicsDiscovered:]
  -[CBService invalidate]
  -[CBService peripheral]


CBMutableService : CBService
 @property  NSNumber *ID
 @property  NSArray *includedServices
 @property  NSArray *characteristics

  // instance methods
  -[CBMutableService ID]
  -[CBMutableService setID:]
  -[CBMutableService dealloc]
  -[CBMutableService .cxx_destruct]
  -[CBMutableService initWithDictionary:]
  -[CBMutableService observeValueForKeyPath:ofObject:change:context:]
  -[CBMutableService handlePowerNotOn]
  -[CBMutableService initWithType:primary:]


CBReadRequest : NSObject
 @property  NSMutableData *bufferData
 @property  NSData *data
 @property  @? completion
 @property  NSError *error
 @property  unsigned long length
 @property  unsigned long minLength
 @property  unsigned long maxLength

  // instance methods
  -[CBReadRequest setData:]
  -[CBReadRequest length]
  -[CBReadRequest completion]
  -[CBReadRequest setCompletion:]
  -[CBReadRequest .cxx_destruct]
  -[CBReadRequest setMinLength:]
  -[CBReadRequest data]
  -[CBReadRequest error]
  -[CBReadRequest maxLength]
  -[CBReadRequest bufferData]
  -[CBReadRequest minLength]
  -[CBReadRequest setBufferData:]
  -[CBReadRequest setMaxLength:]


CBWriteRequest : NSObject
 @property  @? completion
 @property  NSArray *dataArray
 @property  BOOL endOfData
 @property  NSError *error

  // instance methods
  -[CBWriteRequest dataArray]
  -[CBWriteRequest completion]
  -[CBWriteRequest setCompletion:]
  -[CBWriteRequest .cxx_destruct]
  -[CBWriteRequest error]
  -[CBWriteRequest setDataArray:]
  -[CBWriteRequest endOfData]
  -[CBWriteRequest setEndOfData:]


CBUUID : NSObject <NSCopying>
 @property  NSData *data
 @property  NSString *UUIDString

  // class methods
  +[CBUUID UUIDWithData:]
  +[CBUUID UUIDWithCFUUID:]
  +[CBUUID UUIDWithString:]
  +[CBUUID UUIDWithNSUUID:]

  // instance methods
  -[CBUUID copyWithZone:]
  -[CBUUID UUIDString]
  -[CBUUID initWithString:]
  -[CBUUID initWithCFUUID:]
  -[CBUUID initWithData:]
  -[CBUUID data]
  -[CBUUID initWithNSUUID:]
  -[CBUUID isEqual:]


CBL2CAPChannel : NSObject
 @property  CBUUID *serviceUUID
 @property  int socketFD
 @property  CBPeer *peer
 @property  NSInputStream *inputStream
 @property  NSOutputStream *outputStream
 @property  unsigned short PSM

  // instance methods
  -[CBL2CAPChannel PSM]
  -[CBL2CAPChannel peer]
  -[CBL2CAPChannel setServiceUUID:]
  -[CBL2CAPChannel dealloc]
  -[CBL2CAPChannel .cxx_destruct]
  -[CBL2CAPChannel outputStream]
  -[CBL2CAPChannel initWithPeer:info:]
  -[CBL2CAPChannel socketFD]
  -[CBL2CAPChannel inputStream]
  -[CBL2CAPChannel serviceUUID]


CBPeer : NSObject <NSCopying>
 @property  unsigned long mtuLength
 @property  long long pairingState
 @property  long long hostState
 @property  BOOL isLinkEncrypted
 @property  long long role
 @property  CBManager *manager
 @property  unsigned char connectedTransport
 @property  NSUUID *identifier

  // instance methods
  -[CBPeer copyWithZone:]
  -[CBPeer handleHostStateUpdated:]
  -[CBPeer setPairingState:]
  -[CBPeer setHostState:]
  -[CBPeer sendInternalSyncMsg:args:]
  -[CBPeer .cxx_destruct]
  -[CBPeer setMtuLength:]
  -[CBPeer pairingState]
  -[CBPeer setRole:]
  -[CBPeer handleMTUChanged:]
  -[CBPeer identifier]
  -[CBPeer initWithInfo:manager:]
  -[CBPeer handleMsg:args:]
  -[CBPeer manager]
  -[CBPeer sendInternalMsg:args:]
  -[CBPeer tag:]
  -[CBPeer setConnectedTransport:]
  -[CBPeer setManager:]
  -[CBPeer untag:]
  -[CBPeer isLinkEncrypted]
  -[CBPeer hostState]
  -[CBPeer role]
  -[CBPeer hasTag:]
  -[CBPeer mtuLength]
  -[CBPeer handleLinkEncryptionChanged:]
  -[CBPeer peerStateToString:]
  -[CBPeer connectedTransport]
  -[CBPeer setIsLinkEncrypted:]


CBClassicManager : CBManager
 @property  NSMapTable *peers
 @property  BOOL isInquiryRunning
 @property  BOOL inquiryState
 @property  BOOL discoverable
 @property  BOOL connectable
 @property  long long powerState
 @property  BOOL testMode
 @property  @? classicPeerDiscovered
 @property  @? sdpRecordAddedHandler
 @property  @? pairingStatusHandler
 @property  @? connectionStatusHandler
 @property  @? connectCallback
 @property  @? disconnectCallback
 @property  @? serviceAddedHandler
 @property  @? inquiryServiceAddedHandler

  // instance methods
  -[CBClassicManager setTestMode:]
  -[CBClassicManager testMode]
  -[CBClassicManager peerWithInfo:]
  -[CBClassicManager handleLocalDeviceStateUpdatedMsg:]
  -[CBClassicManager isMsgAllowedAlways:]
  -[CBClassicManager powerState]
  -[CBClassicManager forEachClassicPeer:]
  -[CBClassicManager classicPeerDiscovered]
  -[CBClassicManager peers]
  -[CBClassicManager addServiceToInquiryList:]
  -[CBClassicManager removeAllServices]
  -[CBClassicManager setBTPowerState:]
  -[CBClassicManager peerWithIdentifier:]
  -[CBClassicManager cancelPeerConnection:options:]
  -[CBClassicManager setBTConnectable:]
  -[CBClassicManager removeAllServicesFromInquiryList]
  -[CBClassicManager dealloc]
  -[CBClassicManager handlePeerConnectionStateUpdated:]
  -[CBClassicManager .cxx_destruct]
  -[CBClassicManager retrievePeerWithAddress:]
  -[CBClassicManager setConnectCallback:]
  -[CBClassicManager handleServiceAddedToSDP:]
  -[CBClassicManager sdpRecordAddedHandler]
  -[CBClassicManager isInquiryRunning]
  -[CBClassicManager connectable]
  -[CBClassicManager inquiryState]
  -[CBClassicManager startInquiryWithOptions:classicPeerDiscovered:]
  -[CBClassicManager handlePeerDisconnectionCompleted:]
  -[CBClassicManager connectPeer:options:]
  -[CBClassicManager handleMsg:args:]
  -[CBClassicManager disconnectCallback]
  -[CBClassicManager cancelPeerConnection:]
  -[CBClassicManager isMsgAllowedWhenOff:]
  -[CBClassicManager handleSDPRecordAdded:]
  -[CBClassicManager initWithQueue:options:]
  -[CBClassicManager setConnectionStatusHandler:]
  -[CBClassicManager pairingStatusHandler]
  -[CBClassicManager classicPeerWithInfo:]
  -[CBClassicManager observeValueForKeyPath:ofObject:change:context:]
  -[CBClassicManager serviceAddedHandler]
  -[CBClassicManager setDisconnectCallback:]
  -[CBClassicManager connectCallback]
  -[CBClassicManager handlePeerConnectionCompleted:]
  -[CBClassicManager stopInquiry]
  -[CBClassicManager setClassicPeerDiscovered:]
  -[CBClassicManager setPairingStatusHandler:]
  -[CBClassicManager secureBluetooth:withAuthData:]
  -[CBClassicManager setServiceAddedHandler:]
  -[CBClassicManager addService:sdpRecord:sdpRecordAddedHandler:]
  -[CBClassicManager setBTDiscoverable:]
  -[CBClassicManager removeAACPClient:]
  -[CBClassicManager retrievePairedPeersWithOptions:]
  -[CBClassicManager inquiryServiceAddedHandler]
  -[CBClassicManager setInquiryServiceAddedHandler:]
  -[CBClassicManager connectionStatusHandler]
  -[CBClassicManager handlePeerDiscovered:]
  -[CBClassicManager handleServiceAddedToInquiryList:]
  -[CBClassicManager cancelPeerConnection:force:]
  -[CBClassicManager removeServiceFromInquiryList:]
  -[CBClassicManager removeService:]
  -[CBClassicManager setSdpRecordAddedHandler:]
  -[CBClassicManager orphanClassicPeers]
  -[CBClassicManager discoverable]
  -[CBClassicManager addService:]
  -[CBClassicManager addAACPClient:aacpClientAdded:]


CBConnection : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate, CBActivatable, CBLabelable, CBReadWriteRequestable, CBStateReporting>
 @property  CBL2CAPChannel *l2capChannel
 @property  @? serverInvalidationHandler
 @property  NSString *clientBundleID
 @property  long long clientUseCase
 @property  long long connectionLatency
 @property  CBDevice *destinationDevice
 @property  @? errorHandler
 @property  NSString *serviceType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  NSString *label
 @property  long long bluetoothState
 @property  @? bluetoothStateChangedHandler

  // instance methods
  -[CBConnection _run]
  -[CBConnection centralManager:didConnectPeripheral:]
  -[CBConnection centralManager:didFailToConnectPeripheral:error:]
  -[CBConnection _abortWritesWithError:]
  -[CBConnection init]
  -[CBConnection bluetoothStateChangedHandler]
  -[CBConnection setBluetoothStateChangedHandler:]
  -[CBConnection _abortReadsWithError:]
  -[CBConnection _completeReadRequest:error:]
  -[CBConnection writeWithRequest:]
  -[CBConnection bluetoothState]
  -[CBConnection errorHandler]
  -[CBConnection setDestinationDevice:]
  -[CBConnection dealloc]
  -[CBConnection setErrorHandler:]
  -[CBConnection setServiceType:]
  -[CBConnection .cxx_destruct]
  -[CBConnection _prepareReadRequest:]
  -[CBConnection dispatchQueue]
  -[CBConnection centralManagerDidUpdateState:]
  -[CBConnection label]
  -[CBConnection setInvalidationHandler:]
  -[CBConnection setClientBundleID:]
  -[CBConnection serviceType]
  -[CBConnection _invalidate]
  -[CBConnection _reportError:]
  -[CBConnection setDispatchQueue:]
  -[CBConnection _completeWriteRequest:error:]
  -[CBConnection readWithRequest:]
  -[CBConnection destinationDevice]
  -[CBConnection setLabel:]
  -[CBConnection _invalidated]
  -[CBConnection _runConnectStart]
  -[CBConnection clientBundleID]
  -[CBConnection activateDirectAndReturnError:]
  -[CBConnection _setupIOAndReturnError:]
  -[CBConnection _startConnectingAndReturnError:]
  -[CBConnection peripheral:didOpenL2CAPChannel:error:]
  -[CBConnection _runSetupChannel]
  -[CBConnection _processReads:]
  -[CBConnection _processReadStatus]
  -[CBConnection writeEndOfDataWithCompletion:]
  -[CBConnection clientUseCase]
  -[CBConnection setClientUseCase:]
  -[CBConnection connectionLatency]
  -[CBConnection setConnectionLatency:]
  -[CBConnection l2capChannel]
  -[CBConnection setL2capChannel:]
  -[CBConnection serverInvalidationHandler]
  -[CBConnection setServerInvalidationHandler:]
  -[CBConnection invalidationHandler]
  -[CBConnection invalidate]
  -[CBConnection activateWithCompletion:]
  -[CBConnection _processWrites]
  -[CBConnection _prepareWriteRequest:error:]


CBXpcConnection : NSObject
  // instance methods
  -[CBXpcConnection disconnect]
  -[CBXpcConnection sendMsg:args:]
  -[CBXpcConnection sendSyncMsg:args:]
  -[CBXpcConnection _checkOut]
  -[CBXpcConnection _applicationWillEnterForegroundNotification]
  -[CBXpcConnection setTargetQueue:]
  -[CBXpcConnection _nameForMessage:]
  -[CBXpcConnection .cxx_destruct]
  -[CBXpcConnection _allocXpcMsg:args:]
  -[CBXpcConnection _handleMsg:]
  -[CBXpcConnection _handleFinalized]
  -[CBXpcConnection initWithDelegate:queue:options:sessionType:]
  -[CBXpcConnection _checkIn]
  -[CBXpcConnection _handleConnectionEvent:]
  -[CBXpcConnection _handleReset]
  -[CBXpcConnection _sendBarrier]
  -[CBXpcConnection _applicationDidEnterBackgroundNotification]
  -[CBXpcConnection _handleInvalid]


CBDiscovery : NSObject <CBSystemOverridable, CUXPCCodable, CBActivatable, CBDeviceReporting, CBLabelable, CBStateReporting>
 @property  int bleScanRateOverride
 @property  unsigned int clientID
 @property  BOOL disabledActive
 @property  BOOL disabledPending
 @property  unsigned int internalFlags
 @property  unsigned int systemOverrideFlags
 @property  NSObject<OS_xpc_object> *testListenerEndpoint
 @property  int bleScanRate
 @property  unsigned long changeFlags
 @property  unsigned long discoveryFlags
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  @? systemOverrideHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  NSArray *discoveredDevices
 @property  NSString *label
 @property  long long bluetoothState
 @property  @? bluetoothStateChangedHandler

  // instance methods
  -[CBDiscovery setTestListenerEndpoint:]
  -[CBDiscovery testListenerEndpoint]
  -[CBDiscovery clientID]
  -[CBDiscovery _invalidateDirect]
  -[CBDiscovery _ensureXPCStarted]
  -[CBDiscovery disabledActive]
  -[CBDiscovery init]
  -[CBDiscovery bluetoothStateChangedHandler]
  -[CBDiscovery setBleScanRateOverride:]
  -[CBDiscovery setDisabledActive:]
  -[CBDiscovery _lostAllDevices]
  -[CBDiscovery setBluetoothStateChangedHandler:]
  -[CBDiscovery deviceFoundHandler]
  -[CBDiscovery _xpcReceivedDeviceFound:]
  -[CBDiscovery setChangeFlags:]
  -[CBDiscovery bluetoothState]
  -[CBDiscovery errorHandler]
  -[CBDiscovery dealloc]
  -[CBDiscovery setErrorHandler:]
  -[CBDiscovery setClientID:]
  -[CBDiscovery updateWithXPCSubscriberInfo:]
  -[CBDiscovery discoveredDevices]
  -[CBDiscovery .cxx_destruct]
  -[CBDiscovery setSystemOverrideFlags:]
  -[CBDiscovery dispatchQueue]
  -[CBDiscovery label]
  -[CBDiscovery setDeviceFoundHandler:]
  -[CBDiscovery _updateIfNeededWithBlock:]
  -[CBDiscovery setInvalidationHandler:]
  -[CBDiscovery _activate]
  -[CBDiscovery setDeviceLostHandler:]
  -[CBDiscovery _xpcReceivedMessage:]
  -[CBDiscovery disabledPending]
  -[CBDiscovery setDisabledPending:]
  -[CBDiscovery initWithXPCObject:error:]
  -[CBDiscovery _xpcReceivedDeviceLost:]
  -[CBDiscovery setBleScanRate:]
  -[CBDiscovery setDispatchQueue:]
  -[CBDiscovery deviceLostHandler]
  -[CBDiscovery setInterruptionHandler:]
  -[CBDiscovery internalFlags]
  -[CBDiscovery changeFlags]
  -[CBDiscovery bleScanRate]
  -[CBDiscovery _update]
  -[CBDiscovery systemOverrideFlags]
  -[CBDiscovery interruptionHandler]
  -[CBDiscovery _activateDirectStart]
  -[CBDiscovery systemOverrideHandler]
  -[CBDiscovery setLabel:]
  -[CBDiscovery discoveryFlags]
  -[CBDiscovery _invalidated]
  -[CBDiscovery descriptionWithLevel:]
  -[CBDiscovery _xpcReceivedEvent:]
  -[CBDiscovery updateWithCBDiscovery:updateFlags:]
  -[CBDiscovery setInternalFlags:]
  -[CBDiscovery _xpcReceivedPowerStateChanged:]
  -[CBDiscovery invalidationHandler]
  -[CBDiscovery _interrupted]
  -[CBDiscovery encodeWithXPCObject:]
  -[CBDiscovery invalidate]
  -[CBDiscovery activateWithCompletion:]
  -[CBDiscovery bleScanRateOverride]
  -[CBDiscovery setDiscoveryFlags:]
  -[CBDiscovery _activateXPCCompleted:]
  -[CBDiscovery _activateXPCStart:]
  -[CBDiscovery setSystemOverrideHandler:]


CBPeripheralManager : CBManager
 @property  BOOL isAdvertising
 @property  NSMapTable *centrals
 @property  NSMutableArray *services
 @property  NSMutableDictionary *characteristicIDs
 @property  NSLock *updateLock
 @property  BOOL readyForUpdates
 @property  BOOL waitingForReady
 @property  NSNumber *multipleAdvertisingSupported
 @property  NSHashTable *l2capChannels
 @property  unsigned long attributeIDGenerator
 @property  BOOL isSupportingMultipleAdvertising
 @property  <CBPeripheralManagerDelegate> *delegate

  // class methods
  +[CBPeripheralManager authorizationStatus]
  +[CBPeripheralManager supportsFeatures:]

  // instance methods
  -[CBPeripheralManager services]
  -[CBPeripheralManager peerWithInfo:]
  -[CBPeripheralManager isMsgAllowedAlways:]
  -[CBPeripheralManager stopAdvertising]
  -[CBPeripheralManager initWithDelegate:queue:]
  -[CBPeripheralManager handleL2CAPChannelPublished:]
  -[CBPeripheralManager waitingForReady]
  -[CBPeripheralManager init]
  -[CBPeripheralManager centralWithIdentifier:]
  -[CBPeripheralManager updateLock]
  -[CBPeripheralManager removeAllServices]
  -[CBPeripheralManager isAdvertising]
  -[CBPeripheralManager setIsAdvertising:]
  -[CBPeripheralManager setAttributeIDGenerator:]
  -[CBPeripheralManager supportsMultipleAdvertising]
  -[CBPeripheralManager handleL2CAPChannelOpened:]
  -[CBPeripheralManager removeAllL2CAPChannels]
  -[CBPeripheralManager dealloc]
  -[CBPeripheralManager attributeIDGenerator]
  -[CBPeripheralManager .cxx_destruct]
  -[CBPeripheralManager setMultipleAdvertisingSupported:]
  -[CBPeripheralManager forEachCentral:]
  -[CBPeripheralManager handleRestoringState:]
  -[CBPeripheralManager l2capChannels]
  -[CBPeripheralManager centralWithInfo:]
  -[CBPeripheralManager overrideLocalLeAddress:]
  -[CBPeripheralManager publishL2CAPChannel:requiresEncryption:options:]
  -[CBPeripheralManager multipleAdvertisingSupported]
  -[CBPeripheralManager handleReadyForUpdates:]
  -[CBPeripheralManager handleAdvertisingStarted:]
  -[CBPeripheralManager handleMsg:args:]
  -[CBPeripheralManager handleAdvertisingStopped:]
  -[CBPeripheralManager handleNotificationAdded:]
  -[CBPeripheralManager isMsgAllowedWhenOff:]
  -[CBPeripheralManager respondToRequest:withResult:]
  -[CBPeripheralManager centrals]
  -[CBPeripheralManager handleL2CAPChannelUnpublished:]
  -[CBPeripheralManager updateValue:forCharacteristic:onSubscribedCentrals:]
  -[CBPeripheralManager handleSupportedFeatures:]
  -[CBPeripheralManager startAdvertising:]
  -[CBPeripheralManager characteristicIDs]
  -[CBPeripheralManager handleServiceAdded:]
  -[CBPeripheralManager handleL2CAPChannelClosed:]
  -[CBPeripheralManager initWithDelegate:queue:options:]
  -[CBPeripheralManager observeValueForKeyPath:ofObject:change:context:]
  -[CBPeripheralManager handleCentralDidUpdateANCSAuthorization:]
  -[CBPeripheralManager setDesiredConnectionLatency:forCentral:]
  -[CBPeripheralManager l2capChannelForPeer:withPsm:]
  -[CBPeripheralManager publishL2CAPChannelWithEncryption:]
  -[CBPeripheralManager setDelegate:]
  -[CBPeripheralManager publishL2CAPChannel:requiresEncryption:]
  -[CBPeripheralManager respondToTransaction:value:attributeID:result:]
  -[CBPeripheralManager handleGetAttributeValue:]
  -[CBPeripheralManager readyForUpdates]
  -[CBPeripheralManager handleNotificationRemoved:]
  -[CBPeripheralManager removeService:]
  -[CBPeripheralManager unpublishL2CAPChannel:]
  -[CBPeripheralManager handleConnectionParametersUpdated:]
  -[CBPeripheralManager delegate]
  -[CBPeripheralManager handleSetAttributeValues:]
  -[CBPeripheralManager handleSolicitedServicesFound:]
  -[CBPeripheralManager handleAdvertisingAddressChanged:]
  -[CBPeripheralManager addService:]


CBCentral : CBPeer
 @property  unsigned long maximumUpdateValueLength

  // instance methods
  -[CBCentral maximumUpdateValueLength]


CBManager : NSObject <CBXpcConnectionDelegate, CBPairingAgentParentDelegate>
 @property  long long state
 @property  long long authorization
 @property  BOOL tccComplete
 @property  CBPairingAgent *sharedPairingAgent
 @property  NSData *advertisingAddress
 @property  long long advertisingAddressType
 @property  NSData *nonConnectableAdvertisingAddress
 @property  long long nonConnectableAdvertisingAddressType
 @property  NSString *localAddressString
 @property  NSString *localName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CBManager authorization]
  +[CBManager tccAvailable]

  // instance methods
  -[CBManager getAppSDKVersion]
  -[CBManager setTccComplete:]
  -[CBManager nonConnectableAdvertisingAddressType]
  -[CBManager performTCCCheck:]
  -[CBManager localAddressString]
  -[CBManager sendDebugSyncMsg:args:]
  -[CBManager handleStateUpdatedMsg:]
  -[CBManager setAdvertisingAddress:]
  -[CBManager setAuthorization:]
  -[CBManager sendRawCommand:data:completionHandler:]
  -[CBManager setNonConnectableAdvertisingAddress:]
  -[CBManager initInternal]
  -[CBManager authorization]
  -[CBManager setConnectionTargetQueue:]
  -[CBManager xpcConnectionIsInvalid]
  -[CBManager peerWithInfo:]
  -[CBManager triggerBTErrorReport:]
  -[CBManager localName]
  -[CBManager tccComplete]
  -[CBManager sendDebugMsg:args:]
  -[CBManager advertisingAddress]
  -[CBManager advertisingAddressType]
  -[CBManager nonConnectableAdvertisingAddress]
  -[CBManager handleLocalDeviceStateUpdatedMsg:]
  -[CBManager xpcConnectionDidReceiveMsg:args:]
  -[CBManager sendMsg:args:]
  -[CBManager startWithQueue:options:sessionType:]
  -[CBManager sendSyncMsg:args:]
  -[CBManager isMsgAllowedAlways:]
  -[CBManager handlePairingAgentMsg:args:]
  -[CBManager doneWithTCC]
  -[CBManager extractLocalDeviceStatesDictionary:]
  -[CBManager sharedPairingAgent]
  -[CBManager closeL2CAPChannelForPeerUUID:withPsm:]
  -[CBManager xpcConnectionDidReset]
  -[CBManager _handleAdvertisingAddressChanged:]
  -[CBManager dealloc]
  -[CBManager setState:]
  -[CBManager .cxx_destruct]
  -[CBManager handleMsg:args:]
  -[CBManager isMsgAllowedWhenOff:]
  -[CBManager state]


CBATTRequest : NSObject
 @property  CBCharacteristic *characteristic
 @property  NSNumber *transactionID
 @property  BOOL ignoreResponse
 @property  CBCentral *central
 @property  unsigned long offset
 @property  NSData *value

  // instance methods
  -[CBATTRequest endOffset]
  -[CBATTRequest .cxx_destruct]
  -[CBATTRequest offset]
  -[CBATTRequest setValue:]
  -[CBATTRequest ignoreResponse]
  -[CBATTRequest initWithCentral:characteristic:offset:transactionID:]
  -[CBATTRequest appendValueData:]
  -[CBATTRequest transactionID]
  -[CBATTRequest setIgnoreResponse:]
  -[CBATTRequest value]
  -[CBATTRequest central]
  -[CBATTRequest characteristic]
  -[CBATTRequest setCharacteristic:]


CBDevice : NSObject <CUXPCCodable>
 @property  int audioStreamState
 @property  NSData *bleAddressData
 @property  NSData *bleAdvertisementData
 @property  NSData *bleAppleManufacturerData
 @property  int bleChannel
 @property  int bleRSSI
 @property  NSData *btAddressData
 @property  unsigned long changeFlags
 @property  unsigned int connectedServices
 @property  unsigned long deviceFlags
 @property  unsigned long discoveryFlags
 @property  NSString *identifier
 @property  unsigned int internalFlags
 @property  unsigned long lastSeenTicks
 @property  NSString *name
 @property  unsigned char nearbyActionType
 @property  unsigned int nearbyFlags
 @property  unsigned long oldDiscoveryFlags
 @property  int primaryPlacement
 @property  int secondaryPlacement
 @property  unsigned int productID
 @property  unsigned int proximityPairingProductID
 @property  unsigned char proximityPairingSubType
 @property  unsigned char spatialInteractionFlags
 @property  NSArray *spatialInteractionIdentifiers
 @property  unsigned int spatialInteractionPeerID
 @property  NSData *spatialInteractionTokenData
 @property  NSDictionary *spatialInteractionUserInfo
 @property  NSData *spatialInteractionUWBConfigData
 @property  unsigned int lgFlags
 @property  unsigned char nearbyActivityLevel
 @property  NSData *nearbyAuthTag
 @property  unsigned char objectDiscoveryBatteryState
 @property  unsigned char objectDiscoveryMode
 @property  NSData *objectDiscoveryNearOwnerID
 @property  unsigned int objectDiscoveryProductID
 @property  NSData *objectDiscoveryPublicKeyData
 @property  unsigned char objectSetupBatteryPerformance
 @property  unsigned char objectSetupBatteryState
 @property  unsigned char objectSetupColorCode
 @property  unsigned int objectSetupFlags
 @property  NSString *objectSetupFontCode
 @property  NSString *objectSetupMessage

  // instance methods
  -[CBDevice deviceFlags]
  -[CBDevice setConnectedServices:]
  -[CBDevice bleAdvertisementData]
  -[CBDevice secondaryPlacement]
  -[CBDevice primaryPlacement]
  -[CBDevice setSecondaryPlacement:]
  -[CBDevice setPrimaryPlacement:]
  -[CBDevice lastSeenTicks]
  -[CBDevice setLastSeenTicks:]
  -[CBDevice setChangeFlags:]
  -[CBDevice lgFlags]
  -[CBDevice .cxx_destruct]
  -[CBDevice name]
  -[CBDevice bleRSSI]
  -[CBDevice setIdentifier:]
  -[CBDevice identifier]
  -[CBDevice initWithXPCObject:error:]
  -[CBDevice internalFlags]
  -[CBDevice changeFlags]
  -[CBDevice discoveryFlags]
  -[CBDevice bleAddressData]
  -[CBDevice bleAppleManufacturerData]
  -[CBDevice bleChannel]
  -[CBDevice btAddressData]
  -[CBDevice _parseManufacturerPtr:end:]
  -[CBDevice _parseAppleManufacturerPtr:end:]
  -[CBDevice _parseLGManufacturerPtr:end:]
  -[CBDevice _parseNearbyActionPtr:end:]
  -[CBDevice _parseNearbyInfoPtr:end:]
  -[CBDevice _parseObjectDiscoveryPtr:end:]
  -[CBDevice _parseProximityPairingPtr:end:]
  -[CBDevice _parseSpatialInteractionPtr:end:]
  -[CBDevice _parseProximityPairingWxSetupPtr:end:]
  -[CBDevice _parseProximityPairingWxStatusPtr:end:]
  -[CBDevice setBleRSSI:]
  -[CBDevice descriptionWithLevel:]
  -[CBDevice setDeviceFlags:]
  -[CBDevice _parseProximityPairingObjectSetupPtr:end:]
  -[CBDevice updateWithCBDevice:]
  -[CBDevice audioStreamState]
  -[CBDevice setAudioStreamState:]
  -[CBDevice setBleAddressData:]
  -[CBDevice setBleAdvertisementData:]
  -[CBDevice setBleAppleManufacturerData:]
  -[CBDevice setBleChannel:]
  -[CBDevice setBtAddressData:]
  -[CBDevice setProximityPairingProductID:]
  -[CBDevice setProximityPairingSubType:]
  -[CBDevice spatialInteractionFlags]
  -[CBDevice setSpatialInteractionFlags:]
  -[CBDevice spatialInteractionIdentifiers]
  -[CBDevice setInternalFlags:]
  -[CBDevice productID]
  -[CBDevice encodeWithXPCObject:]
  -[CBDevice connectedServices]
  -[CBDevice setSpatialInteractionIdentifiers:]
  -[CBDevice spatialInteractionTokenData]
  -[CBDevice setSpatialInteractionTokenData:]
  -[CBDevice spatialInteractionUserInfo]
  -[CBDevice setSpatialInteractionUserInfo:]
  -[CBDevice spatialInteractionUWBConfigData]
  -[CBDevice setSpatialInteractionUWBConfigData:]
  -[CBDevice setNearbyActionType:]
  -[CBDevice setNearbyFlags:]
  -[CBDevice oldDiscoveryFlags]
  -[CBDevice setOldDiscoveryFlags:]
  -[CBDevice spatialInteractionPeerID]
  -[CBDevice setSpatialInteractionPeerID:]
  -[CBDevice nearbyActivityLevel]
  -[CBDevice nearbyFlags]
  -[CBDevice nearbyActionType]
  -[CBDevice nearbyAuthTag]
  -[CBDevice objectDiscoveryBatteryState]
  -[CBDevice objectDiscoveryMode]
  -[CBDevice objectDiscoveryNearOwnerID]
  -[CBDevice objectDiscoveryProductID]
  -[CBDevice objectDiscoveryPublicKeyData]
  -[CBDevice objectSetupBatteryPerformance]
  -[CBDevice objectSetupBatteryState]
  -[CBDevice objectSetupColorCode]
  -[CBDevice objectSetupFlags]
  -[CBDevice objectSetupFontCode]
  -[CBDevice objectSetupMessage]
  -[CBDevice proximityPairingProductID]
  -[CBDevice proximityPairingSubType]
  -[CBDevice setName:]
  -[CBDevice setDiscoveryFlags:]
  -[CBDevice setProductID:]


CBPairingAgent : NSObject
 @property  <CBPairingAgentParentDelegate> *parentManager
 @property  <CBPairingAgentDelegate> *delegate
 @property  BOOL useOOBMode

  // instance methods
  -[CBPairingAgent pairPeer:useMITM:]
  -[CBPairingAgent handlePairingCompleted:]
  -[CBPairingAgent isPeerMagicPaired:]
  -[CBPairingAgent handlePairingRequested:]
  -[CBPairingAgent setUseOOBMode:]
  -[CBPairingAgent dealloc]
  -[CBPairingAgent respondToPairingRequest:type:accept:data:]
  -[CBPairingAgent .cxx_destruct]
  -[CBPairingAgent handlePairingMessage:args:]
  -[CBPairingAgent handleUnpaired:]
  -[CBPairingAgent retrievePairedPeers]
  -[CBPairingAgent unpairPeer:]
  -[CBPairingAgent retrieveOOBDataForPeer:]
  -[CBPairingAgent setOOBPairingEnabled:forPeer:]
  -[CBPairingAgent pairPeer:options:]
  -[CBPairingAgent initWithParentManager:]
  -[CBPairingAgent isPeerPaired:]
  -[CBPairingAgent parentManager]
  -[CBPairingAgent setParentManager:]
  -[CBPairingAgent observeValueForKeyPath:ofObject:change:context:]
  -[CBPairingAgent pairPeer:]
  -[CBPairingAgent useOOBMode]
  -[CBPairingAgent updateRegistration]
  -[CBPairingAgent setDelegate:]
  -[CBPairingAgent delegate]
  -[CBPairingAgent isPeerCloudPaired:]


CBServer : NSObject <CBPeripheralManagerDelegate, CBActivatable, CBLabelable, CBStateReporting>
 @property  @? acceptHandler
 @property  NSString *serviceType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  NSString *label
 @property  long long bluetoothState
 @property  @? bluetoothStateChangedHandler

  // instance methods
  -[CBServer _activateWithCompletion:]
  -[CBServer peripheralManagerDidUpdateState:]
  -[CBServer setAcceptHandler:]
  -[CBServer peripheralManager:didOpenL2CAPChannel:error:]
  -[CBServer init]
  -[CBServer bluetoothStateChangedHandler]
  -[CBServer setBluetoothStateChangedHandler:]
  -[CBServer peripheralManager:didPublishL2CAPChannel:error:]
  -[CBServer bluetoothState]
  -[CBServer dealloc]
  -[CBServer setServiceType:]
  -[CBServer .cxx_destruct]
  -[CBServer dispatchQueue]
  -[CBServer label]
  -[CBServer _startIfNeeded]
  -[CBServer setInvalidationHandler:]
  -[CBServer serviceType]
  -[CBServer acceptHandler]
  -[CBServer _invalidate]
  -[CBServer setDispatchQueue:]
  -[CBServer peripheralManager:didUnpublishL2CAPChannel:error:]
  -[CBServer setLabel:]
  -[CBServer _handleConnectionInvalidated:]
  -[CBServer invalidationHandler]
  -[CBServer invalidate]
  -[CBServer activateWithCompletion:]


CBSpatialInteractionPeerInfoClient : NSObject
 @property  unsigned int peerID
 @property  NSData *tokenData
 @property  NSDictionary *userInfo

  // instance methods
  -[CBSpatialInteractionPeerInfoClient peerID]
  -[CBSpatialInteractionPeerInfoClient setUserInfo:]
  -[CBSpatialInteractionPeerInfoClient .cxx_destruct]
  -[CBSpatialInteractionPeerInfoClient userInfo]
  -[CBSpatialInteractionPeerInfoClient tokenData]
  -[CBSpatialInteractionPeerInfoClient setPeerID:]
  -[CBSpatialInteractionPeerInfoClient setTokenData:]


CBSpatialInteractionSession : NSObject <CUXPCCodable, CBActivatable, CBDeviceReporting, CBLabelable, CBStateReporting, CBSystemOverridable>
 @property  unsigned int clientID
 @property  NSData *identifierData
 @property  unsigned int internalFlags
 @property  NSData *irkData
 @property  int scanRateOverride
 @property  NSObject<OS_xpc_object> *testListenerEndpoint
 @property  NSData *tokenData
 @property  int advertiseRate
 @property  @? advertisingAddressChangedHandler
 @property  NSData *advertisingAddressData
 @property  unsigned int controlFlags
 @property  @? errorHandler
 @property  @? interruptionHandler
 @property  int scanRate
 @property  @? tokenChangedHandler
 @property  NSData *uwbConfigData
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  NSArray *discoveredDevices
 @property  NSString *label
 @property  long long bluetoothState
 @property  @? bluetoothStateChangedHandler
 @property  unsigned int systemOverrideFlags
 @property  @? systemOverrideHandler

  // instance methods
  -[CBSpatialInteractionSession setTestListenerEndpoint:]
  -[CBSpatialInteractionSession controlFlags]
  -[CBSpatialInteractionSession testListenerEndpoint]
  -[CBSpatialInteractionSession clientID]
  -[CBSpatialInteractionSession _invalidateDirect]
  -[CBSpatialInteractionSession _ensureXPCStarted]
  -[CBSpatialInteractionSession init]
  -[CBSpatialInteractionSession bluetoothStateChangedHandler]
  -[CBSpatialInteractionSession _lostAllDevices]
  -[CBSpatialInteractionSession setAdvertiseRate:]
  -[CBSpatialInteractionSession setBluetoothStateChangedHandler:]
  -[CBSpatialInteractionSession deviceFoundHandler]
  -[CBSpatialInteractionSession _xpcReceivedDeviceFound:]
  -[CBSpatialInteractionSession setControlFlags:]
  -[CBSpatialInteractionSession bluetoothState]
  -[CBSpatialInteractionSession errorHandler]
  -[CBSpatialInteractionSession dealloc]
  -[CBSpatialInteractionSession setErrorHandler:]
  -[CBSpatialInteractionSession setClientID:]
  -[CBSpatialInteractionSession irkData]
  -[CBSpatialInteractionSession discoveredDevices]
  -[CBSpatialInteractionSession .cxx_destruct]
  -[CBSpatialInteractionSession setIrkData:]
  -[CBSpatialInteractionSession scanRate]
  -[CBSpatialInteractionSession dispatchQueue]
  -[CBSpatialInteractionSession label]
  -[CBSpatialInteractionSession setDeviceFoundHandler:]
  -[CBSpatialInteractionSession _updateIfNeededWithBlock:]
  -[CBSpatialInteractionSession advertiseRate]
  -[CBSpatialInteractionSession setInvalidationHandler:]
  -[CBSpatialInteractionSession _activate]
  -[CBSpatialInteractionSession setDeviceLostHandler:]
  -[CBSpatialInteractionSession _xpcReceivedMessage:]
  -[CBSpatialInteractionSession initWithXPCObject:error:]
  -[CBSpatialInteractionSession _xpcReceivedDeviceLost:]
  -[CBSpatialInteractionSession setDispatchQueue:]
  -[CBSpatialInteractionSession deviceLostHandler]
  -[CBSpatialInteractionSession scanRateOverride]
  -[CBSpatialInteractionSession setInterruptionHandler:]
  -[CBSpatialInteractionSession internalFlags]
  -[CBSpatialInteractionSession _update]
  -[CBSpatialInteractionSession systemOverrideFlags]
  -[CBSpatialInteractionSession interruptionHandler]
  -[CBSpatialInteractionSession identifierData]
  -[CBSpatialInteractionSession setIdentifierData:]
  -[CBSpatialInteractionSession _activateDirectStart]
  -[CBSpatialInteractionSession tokenData]
  -[CBSpatialInteractionSession systemOverrideHandler]
  -[CBSpatialInteractionSession setLabel:]
  -[CBSpatialInteractionSession _invalidated]
  -[CBSpatialInteractionSession setScanRate:]
  -[CBSpatialInteractionSession descriptionWithLevel:]
  -[CBSpatialInteractionSession _xpcReceivedEvent:]
  -[CBSpatialInteractionSession setTokenData:]
  -[CBSpatialInteractionSession setInternalFlags:]
  -[CBSpatialInteractionSession _xpcReceivedPowerStateChanged:]
  -[CBSpatialInteractionSession invalidationHandler]
  -[CBSpatialInteractionSession _interrupted]
  -[CBSpatialInteractionSession encodeWithXPCObject:]
  -[CBSpatialInteractionSession invalidate]
  -[CBSpatialInteractionSession uwbConfigData]
  -[CBSpatialInteractionSession _reAddTokens]
  -[CBSpatialInteractionSession activateWithCompletion:]
  -[CBSpatialInteractionSession _activateXPCCompleted:reactivate:]
  -[CBSpatialInteractionSession _addPeerToken:userInfo:completion:]
  -[CBSpatialInteractionSession _xpcReceivedAdvertisingAddressChanged:]
  -[CBSpatialInteractionSession _xpcReceivedSystemOverrideChanged:]
  -[CBSpatialInteractionSession updateWithSession:]
  -[CBSpatialInteractionSession setAdvertiseRate:timeout:]
  -[CBSpatialInteractionSession addPeerToken:userInfo:completion:]
  -[CBSpatialInteractionSession addPeerToken:completion:]
  -[CBSpatialInteractionSession removePeerToken:completion:]
  -[CBSpatialInteractionSession advertisingAddressChangedHandler]
  -[CBSpatialInteractionSession setAdvertisingAddressChangedHandler:]
  -[CBSpatialInteractionSession advertisingAddressData]
  -[CBSpatialInteractionSession tokenChangedHandler]
  -[CBSpatialInteractionSession setTokenChangedHandler:]
  -[CBSpatialInteractionSession setUwbConfigData:]
  -[CBSpatialInteractionSession setScanRateOverride:]
  -[CBSpatialInteractionSession _activateXPCStart:]
  -[CBSpatialInteractionSession setSystemOverrideHandler:]


(CoreBluetooth)
	// class methods
	+[(CoreBluetooth) errorWithInfo:]

01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0700 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0500 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
