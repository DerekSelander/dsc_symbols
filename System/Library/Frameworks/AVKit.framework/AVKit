|| __DATA.__objc_data _OBJC_CLASS_$_AVAppStorePlayerView
|| __DATA.__objc_data _OBJC_CLASS_$_AVBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_AVChapter
|| __DATA.__objc_data _OBJC_CLASS_$_AVControlItem
|| __DATA.__objc_data _OBJC_CLASS_$_AVEditBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_AVEditBehaviorContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVExternalPlaybackController
|| __DATA.__objc_data _OBJC_CLASS_$_AVHomeIPCameraBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_AVHomeIPCameraBehaviorContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVHomeLoadingButtonControlItem
|| __DATA.__objc_data _OBJC_CLASS_$_AVKeyValueChange
|| __DATA.__objc_data _OBJC_CLASS_$_AVMediaSelectionViewController
|| __DATA.__objc_data _OBJC_CLASS_$_AVMusicAppBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_AVMusicAppBehaviorContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableValueTiming
|| __DATA.__objc_data _OBJC_CLASS_$_AVNewsWidgetPlayerBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_AVNewsWidgetPlayerBehaviorContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVObservationController
|| __DATA.__objc_data _OBJC_CLASS_$_AVPictureInPictureController
|| __DATA.__objc_data _OBJC_CLASS_$_AVPictureInPicturePlayerLayerView
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerController
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerControllerTimeResolver
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerViewControllerCustomControlsView
|| __DATA.__objc_data _OBJC_CLASS_$_AVTimer
|| __DATA.__objc_data _OBJC_CLASS_$_AVValueTiming
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAppStorePlayerView
|| __DATA.__objc_data _OBJC_METACLASS_$_AVBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_AVChapter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVControlItem
|| __DATA.__objc_data _OBJC_METACLASS_$_AVEditBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_AVEditBehaviorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVExternalPlaybackController
|| __DATA.__objc_data _OBJC_METACLASS_$_AVHomeIPCameraBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_AVHomeIPCameraBehaviorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVHomeLoadingButtonControlItem
|| __DATA.__objc_data _OBJC_METACLASS_$_AVKeyValueChange
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMediaSelectionViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMusicAppBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMusicAppBehaviorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableValueTiming
|| __DATA.__objc_data _OBJC_METACLASS_$_AVNewsWidgetPlayerBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_AVNewsWidgetPlayerBehaviorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVObservationController
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPictureInPicturePlayerLayerView
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerController
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerControllerTimeResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerViewControllerCustomControlsView
|| __DATA.__objc_data _OBJC_METACLASS_$_AVTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVValueTiming
|| __DATA_CONST.__const _AVKitErrorDomain
|| __DATA_CONST.__const _AVKitMetadataIdentifierBrandIdentifier
|| __DATA_CONST.__const _AVKitMetadataIdentifierExternalContentIdentifier
|| __DATA_CONST.__const _AVKitMetadataIdentifierExternalUserProfileIdentifier
|| __DATA_CONST.__const _AVKitMetadataIdentifierPlaybackProgress
|| __DATA_CONST.__const _AVKitMetadataIdentifierServiceIdentifier
|| __DATA_CONST.__const _AVKitMetadataIdentifieriTunesStoreIdentifier
|| __DATA_CONST.__const _AVPictureInPictureControllerContentSourceKey
|| __DATA_CONST.__const _AVPictureInPictureControllerDidStartNotification
|| __DATA_CONST.__const _AVPictureInPictureControllerDidStopNotification
|| __DATA_CONST.__const _AVPictureInPictureControllerWillStartNotification
|| __DATA_CONST.__const _AVPictureInPictureControllerWillStopNotification
|| __DATA_CONST.__const _AVPlayerItemAVKitDataDidChangeNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVRoutePickerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$___AVPlayerLayerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPictureInPictureController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVRoutePickerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$___AVPlayerLayerView
__ AVFoundation: _AVAudioSessionInterruptionNotification
__ AVFoundation: _AVAudioSessionInterruptionOptionKey
__ AVFoundation: _AVAudioSessionInterruptionTypeKey
__ AVFoundation: _AVLayerVideoGravityResize
__ AVFoundation: _AVLayerVideoGravityResizeAspect
__ AVFoundation: _AVLayerVideoGravityResizeAspectFill
__ AVFoundation: _AVMakeRectWithAspectRatioInsideRect
__ AVFoundation: _AVMediaCharacteristicAudible
__ AVFoundation: _AVMediaCharacteristicContainsOnlyForcedSubtitles
__ AVFoundation: _AVMediaCharacteristicDescribesMusicAndSoundForAccessibility
__ AVFoundation: _AVMediaCharacteristicDescribesVideoForAccessibility
__ AVFoundation: _AVMediaCharacteristicDubbedTranslation
__ AVFoundation: _AVMediaCharacteristicEasyToRead
__ AVFoundation: _AVMediaCharacteristicIsAuxiliaryContent
__ AVFoundation: _AVMediaCharacteristicIsMainProgramContent
__ AVFoundation: _AVMediaCharacteristicLanguageTranslation
__ AVFoundation: _AVMediaCharacteristicLegible
__ AVFoundation: _AVMediaCharacteristicTranscribesSpokenDialogForAccessibility
__ AVFoundation: _AVMediaCharacteristicVoiceOverTranslation
__ AVFoundation: _AVMediaTypeAudio
__ AVFoundation: _AVMediaTypeClosedCaption
__ AVFoundation: _AVMediaTypeTimecode
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVMetadataCommonIdentifierArtwork
__ AVFoundation: _AVMetadataCommonIdentifierTitle
__ AVFoundation: _AVMetadataCommonKeyArtist
__ AVFoundation: _AVMetadataCommonKeyArtwork
__ AVFoundation: _AVMetadataCommonKeyTitle
__ AVFoundation: _AVMetadataFormatISOUserData
__ AVFoundation: _AVMetadataFormatQuickTimeMetadata
__ AVFoundation: _AVMetadataKeySpaceCommon
__ AVFoundation: _AVMetadataKeySpaceISOUserData
__ AVFoundation: _AVMetadataKeySpaceQuickTimeMetadata
__ AVFoundation: _AVOutputContextOutputDeviceDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDevicesDidChangeNotification
__ AVFoundation: _AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemMediaSelectionDidChangeNotification
__ AVFoundation: _AVPlayerItemTimeJumpedNotification
__ AVFoundation: _AVPlayerPlaybackWasInterruptedNotification
__ AVFoundation: _AVRouteDetectorMultipleRoutesDetectedDidChangeNotification
__ AVFoundation: _OBJC_CLASS_$_AVAssetImageGenerator
__ AVFoundation: _OBJC_CLASS_$_AVAssetReader
__ AVFoundation: _OBJC_CLASS_$_AVAssetReaderTrackOutput
__ AVFoundation: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _OBJC_CLASS_$_AVComposition
__ AVFoundation: _OBJC_CLASS_$_AVDisplayCriteria
__ AVFoundation: _OBJC_CLASS_$_AVMediaSelectionGroup
__ AVFoundation: _OBJC_CLASS_$_AVMediaSelectionOption
__ AVFoundation: _OBJC_CLASS_$_AVMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoComposition
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoCompositionInstruction
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoCompositionLayerInstruction
__ AVFoundation: _OBJC_CLASS_$_AVOutputContext
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVPlayerLayer
__ AVFoundation: _OBJC_CLASS_$_AVQueuePlayer
__ AVFoundation: _OBJC_CLASS_$_AVRouteDetector
__ AVFoundation: _OBJC_CLASS_$_AVRoutingSessionManager
__ AVFoundation: _OBJC_CLASS_$_AVTimeFormatter
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
__ Celestial: _AVSystemController_AudioCategoryNotificationParameter
__ Celestial: _AVSystemController_AudioVolumeChangeReasonNotificationParameter
__ Celestial: _AVSystemController_AudioVolumeNotificationParameter
__ Celestial: _AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
__ Celestial: _AVSystemController_CurrentRouteHasVolumeControlNotificationParameter
__ Celestial: _AVSystemController_EUVolumeLimitAttribute
__ Celestial: _AVSystemController_EUVolumeLimitDidChangeNotification
__ Celestial: _AVSystemController_EUVolumeLimitNotificationParameter
__ Celestial: _AVSystemController_ParentalVolumeCappedToEUVolumeLimitAttribute
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SystemVolumeDidChangeNotification
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformEqualToTransform
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGImageRetain
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsInfinite
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreMedia: _CMBlockBufferGetDataPointer
__ CoreMedia: _CMFormatDescriptionGetMediaSubType
__ CoreMedia: _CMSampleBufferGetDataBuffer
__ CoreMedia: _CMSampleBufferGetFormatDescription
__ CoreMedia: _CMTimeAbsoluteValue
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeCodeFormatDescriptionGetFrameDuration
__ CoreMedia: _CMTimeCodeFormatDescriptionGetTimeCodeFlags
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeConvertScale
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeMinimum
__ CoreMedia: _CMTimeMultiplyByRatio
__ CoreMedia: _CMTimeRangeContainsTime
__ CoreMedia: _CMTimeRangeEqual
__ CoreMedia: _CMTimeRangeFromTimeToTime
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimeRangeGetIntersection
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _CMTimebaseGetEffectiveRate
__ CoreMedia: _CMTimebaseGetTime
__ CoreMedia: _CMVideoFormatDescriptionGetVideoDynamicRange
__ CoreMedia: _kCMTimeIndefinite
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimeNegativeInfinity
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeRangeInvalid
__ CoreMedia: _kCMTimeZero
__ CoreMedia: _kCMTimebaseNotification_EffectiveRateChanged
__ CoreMedia: _kCMTimebaseNotification_TimeJumped
__ CoreText: _CTFontGetLanguageAwareOutsets
__ Foundation: _NSAllMapTableKeys
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSLayoutAnchor
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSLayoutDimension
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: __NSFullMethodName
__ MediaAccessibility: _MACaptionAppearanceAddSelectedLanguage
__ MediaAccessibility: _MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics
__ MediaAccessibility: _MACaptionAppearanceGetDisplayType
__ MediaAccessibility: _MACaptionAppearancePrefCopyPreferAccessibleCaptions
__ MediaAccessibility: _MACaptionAppearanceSetDisplayType
__ MediaAccessibility: _kMAAudibleMediaSettingsChangedNotification
__ MediaAccessibility: _kMACaptionAppearanceSettingsChangedNotification
__ MediaRemote: _MRLanguageOptionCopyIdentifier
__ MediaRemote: _MRLanguageOptionCreate
__ MediaRemote: _MRLanguageOptionCreateAutomaticLanguageOptionForType
__ MediaRemote: _MRLanguageOptionCreateFromExternalRepresentation
__ MediaRemote: _MRLanguageOptionGetType
__ MediaRemote: _MRLanguageOptionGroupCreate
__ MediaRemote: _MRLanguageOptionGroupsCreateExternalRepresentation
__ MediaRemote: _MRMediaRemoteAddCommandHandlerBlock
__ MediaRemote: _MRMediaRemoteCommandInfoCreate
__ MediaRemote: _MRMediaRemoteCommandInfoSetCommand
__ MediaRemote: _MRMediaRemoteCommandInfoSetEnabled
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteRemoveCommandHandlerBlock
__ MediaRemote: _MRMediaRemoteSetCanBeNowPlayingApplication
__ MediaRemote: _MRMediaRemoteSetNowPlayingInfoWithMergePolicy
__ MediaRemote: _MRMediaRemoteSetParentApplication
__ MediaRemote: _MRMediaRemoteSetSupportedCommands
__ MediaRemote: _kMRLanguageOptionCharacteristicContainsOnlyForcedSubtitles
__ MediaRemote: _kMRLanguageOptionCharacteristicDescribesMusicAndSound
__ MediaRemote: _kMRLanguageOptionCharacteristicDescribesVideo
__ MediaRemote: _kMRLanguageOptionCharacteristicDubbedTranslation
__ MediaRemote: _kMRLanguageOptionCharacteristicEasyToRead
__ MediaRemote: _kMRLanguageOptionCharacteristicIsAuxiliaryContent
__ MediaRemote: _kMRLanguageOptionCharacteristicIsMainProgramContent
__ MediaRemote: _kMRLanguageOptionCharacteristicLanguageTranslation
__ MediaRemote: _kMRLanguageOptionCharacteristicTranscribesSpokenDialog
__ MediaRemote: _kMRLanguageOptionCharacteristicVoiceOverTranslation
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtist
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAvailableLanguageOptionsData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoBrandIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCurrentLanguageOptionsData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCurrentPlaybackDate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDuration
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoElapsedTime
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoExternalContentIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoExternalProfileIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsAlwaysLive
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoMediaType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaybackProgress
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaybackRate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoServiceIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTypeAudio
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTypeVideo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
__ MediaRemote: _kMRMediaRemoteOptionLanguageOptionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionSkipInterval
__ MediaToolbox: _FigGetRotationAngleAndFlipsFromCGAffineTransform
__ Pegasus: _OBJC_CLASS_$_PGPictureInPictureProxy
__ QuartzCore: _CAColorMatrixConcat
__ QuartzCore: _CAColorMatrixMakeColorSourceOver
__ QuartzCore: _CAColorMatrixMakeSaturation
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _OBJC_CLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMLParser
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _OBJC_CLASS_$_CAState
__ QuartzCore: _OBJC_CLASS_$_CAStateAddAnimation
__ QuartzCore: _OBJC_CLASS_$_CAStateAddElement
__ QuartzCore: _OBJC_CLASS_$_CAStateController
__ QuartzCore: _OBJC_CLASS_$_CAStateElement
__ QuartzCore: _OBJC_CLASS_$_CAStateRemoveAnimation
__ QuartzCore: _OBJC_CLASS_$_CAStateRemoveElement
__ QuartzCore: _OBJC_CLASS_$_CAStateSetValue
__ QuartzCore: _OBJC_CLASS_$_CAStateTransition
__ QuartzCore: _OBJC_CLASS_$_CAStateTransitionElement
__ QuartzCore: _OBJC_CLASS_$_CATextLayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_CLASS_$_CATransformLayer
__ QuartzCore: _OBJC_METACLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_METACLASS_$_CALayer
__ QuartzCore: _kCAAlignmentCenter
__ QuartzCore: _kCACornerCurveCircular
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFilterAverageColor
__ QuartzCore: _kCAFilterColorMatrix
__ QuartzCore: _kCAFilterDarkenSourceOver
__ QuartzCore: _kCAFilterGaussianBlur
__ QuartzCore: _kCAFilterNormalBlendMode
__ QuartzCore: _kCAFilterPlusL
__ QuartzCore: _kCAFilterSourceOver
__ QuartzCore: _kCAGravityResize
__ QuartzCore: _kCAMediaTimingFunctionDefault
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ QuartzCore: _kCAMediaTimingFunctionLinear
__ QuartzCore: _kCATruncationMiddle
__ SystemConfiguration: _SCNetworkReachabilityCreateWithAddress
__ SystemConfiguration: _SCNetworkReachabilityGetFlags
__ UIKit: _NSDirectionalEdgeInsetsZero
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSStringFromCGPoint
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIColorEffect
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UICubicTimingParameters
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIKeyCommand
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UIMovieScrubber
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPresentationController
__ UIKit: _OBJC_CLASS_$_UIResponder
__ UIKit: _OBJC_CLASS_$_UIRotationGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScene
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISelectionFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UISlider
__ UIKit: _OBJC_CLASS_$_UISpringTimingParameters
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIToolbar
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIVisualEffect
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$__UIHostedWindow
__ UIKit: _OBJC_CLASS_$__UIVisualEffectConfig
__ UIKit: _OBJC_CLASS_$__UIVisualEffectLayerConfig
__ UIKit: _OBJC_CLASS_$__UIVisualEffectTintLayerConfig
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIImage
__ UIKit: _OBJC_METACLASS_$_UINavigationController
__ UIKit: _OBJC_METACLASS_$_UIPresentationController
__ UIKit: _OBJC_METACLASS_$_UIResponder
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UISlider
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIAccessibilityReduceTransparencyStatusDidChangeNotification
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIBackgroundTaskInvalid
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIDistanceBetweenPointAndRect
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFloorToViewScale
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontDescriptorSizeAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontWeightHeavy
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIFontWeightSemibold
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIIntegralTransform
__ UIKit: _UIKeyInputDownArrow
__ UIKit: _UIKeyInputEscape
__ UIKit: _UIKeyInputLeftArrow
__ UIKit: _UIKeyInputRightArrow
__ UIKit: _UIKeyInputUpArrow
__ UIKit: _UIKeyboardAnimationCurveUserInfoKey
__ UIKit: _UIKeyboardAnimationDurationUserInfoKey
__ UIKit: _UIKeyboardFrameEndUserInfoKey
__ UIKit: _UIKeyboardOriginatedFromRotationUserInfoKey
__ UIKit: _UIKeyboardPrivateWillChangeFrameNotification
__ UIKit: _UIPointRoundToScale
__ UIKit: _UIPointRoundToViewScale
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRoundToViewScale
__ UIKit: _UISceneDidActivateNotification
__ UIKit: _UISceneDidDisconnectNotification
__ UIKit: _UISceneDidEnterBackgroundNotification
__ UIKit: _UISceneWillConnectNotification
__ UIKit: _UISceneWillDeactivateNotification
__ UIKit: _UISceneWillEnterForegroundNotification
__ UIKit: _UIScreenModeDidChangeNotification
__ UIKit: _UIScrollViewDecelerationRateFast
__ UIKit: _UISizeRoundToScale
__ UIKit: _UISizeRoundToViewScale
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ UIKit: _UIViewNoIntrinsicMetric
__ UIKit: _UIWindowDidMoveToScreenNotification
__ UIKit: _UIWindowDidRotateNotification
__ UIKit: _UIWindowLevelStatusBar
__ UIKit: _UIWindowMaximumNonSystemLevel
__ UIKit: _UIWindowNewOrientationUserInfoKey
__ UIKit: _UIWindowWillAnimateRotationNotification
__ UIKit: _UIWindowWillRotateNotification
__ UIKit: __UIApplicationLinkedOnVersion
__ UIKit: __UIApplicationStatusBarHiddenStateChangedNotification
__ UIKit: ___UIApplicationLinkedOnOrAfter
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dyld_get_program_sdk_version
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _log2
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _powf
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
AVView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  BOOL ignoresTouches

  // instance methods
  -[AVView setHidden:]
  -[AVView hitTest:withEvent:]
  -[AVView ignoresTouches]
  -[AVView setIgnoresTouches:]


AVAppStorePlayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVButton *prominentPlayButton
 @property  AVBackdropView *prominentPlayButtonBackdropView
 @property  AVStyleSheet *styleSheet
 @property  AVPlayerViewController *playerViewController
 @property  AVAppStorePlayerLayerView *playerLayerView
 @property  NSMutableDictionary *videoGravityForLayoutClassDictionary
 @property  AVObservationController *observationController
 @property  BOOL showsPlaybackControls
 @property  BOOL updatesNowPlayingInfoCenter
 @property  BOOL showsMinimalPlaybackControlsWhenEmbeddedInline
 @property  BOOL canPausePlaybackWhenExitingFullScreen
 @property  BOOL allowsEnteringFullScreen
 @property  NSString *videoGravity
 @property  UIView *contentOverlayView
 @property  AVPlayer *player
 @property  @? playButtonHandlerForLazyPlayerLoading
 @property  long long preferredUnobscuredArea
 @property  <AVPlayerViewControllerDelegate> *playerViewControllerDelegate

  // instance methods
  -[AVAppStorePlayerView dealloc]
  -[AVAppStorePlayerView .cxx_destruct]
  -[AVAppStorePlayerView initWithFrame:]
  -[AVAppStorePlayerView setClipsToBounds:]
  -[AVAppStorePlayerView layoutSubviews]
  -[AVAppStorePlayerView _setContinuousCornerRadius:]
  -[AVAppStorePlayerView player]
  -[AVAppStorePlayerView setPlayer:]
  -[AVAppStorePlayerView videoGravity]
  -[AVAppStorePlayerView setVideoGravity:]
  -[AVAppStorePlayerView showsPlaybackControls]
  -[AVAppStorePlayerView setShowsPlaybackControls:]
  -[AVAppStorePlayerView styleSheet]
  -[AVAppStorePlayerView playerLayerView]
  -[AVAppStorePlayerView setUpdatesNowPlayingInfoCenter:]
  -[AVAppStorePlayerView setShowsMinimalPlaybackControlsWhenEmbeddedInline:]
  -[AVAppStorePlayerView setCanPausePlaybackWhenExitingFullScreen:]
  -[AVAppStorePlayerView setAllowsEnteringFullScreen:]
  -[AVAppStorePlayerView setPreferredUnobscuredArea:]
  -[AVAppStorePlayerView setPlayerViewControllerDelegate:]
  -[AVAppStorePlayerView setVideoGravity:forLayoutClass:]
  -[AVAppStorePlayerView setPlayButtonHandlerForLazyPlayerLoading:]
  -[AVAppStorePlayerView _makeActualVideoViewWithPlayerIfNeeded:]
  -[AVAppStorePlayerView _makePlayerLayerViewWithPlayer:]
  -[AVAppStorePlayerView _makePlayerViewControllerWithPlayer:]
  -[AVAppStorePlayerView _prominentPlayButtonTouchUpInside:]
  -[AVAppStorePlayerView updatesNowPlayingInfoCenter]
  -[AVAppStorePlayerView showsMinimalPlaybackControlsWhenEmbeddedInline]
  -[AVAppStorePlayerView canPausePlaybackWhenExitingFullScreen]
  -[AVAppStorePlayerView allowsEnteringFullScreen]
  -[AVAppStorePlayerView contentOverlayView]
  -[AVAppStorePlayerView playButtonHandlerForLazyPlayerLoading]
  -[AVAppStorePlayerView preferredUnobscuredArea]
  -[AVAppStorePlayerView playerViewControllerDelegate]
  -[AVAppStorePlayerView playerViewController]
  -[AVAppStorePlayerView setPlayerViewController:]
  -[AVAppStorePlayerView prominentPlayButton]
  -[AVAppStorePlayerView setProminentPlayButton:]
  -[AVAppStorePlayerView prominentPlayButtonBackdropView]
  -[AVAppStorePlayerView setProminentPlayButtonBackdropView:]
  -[AVAppStorePlayerView setStyleSheet:]
  -[AVAppStorePlayerView setPlayerLayerView:]
  -[AVAppStorePlayerView videoGravityForLayoutClassDictionary]
  -[AVAppStorePlayerView setVideoGravityForLayoutClassDictionary:]
  -[AVAppStorePlayerView observationController]


AVAppStorePlayerLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerLayer *layer

  // class methods
  +[AVAppStorePlayerLayerView layerClass]


AVRouteDetectorCoordinator : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL routeDetectionEnabled
 @property  BOOL multipleRoutesDetected

  // class methods
  +[AVRouteDetectorCoordinator multipleRoutesDetected]
  +[AVRouteDetectorCoordinator endDetectingRoutes]
  +[AVRouteDetectorCoordinator beginDetectingRoutes]
  +[AVRouteDetectorCoordinator routeDetectorCoordinatorQueue]
  +[AVRouteDetectorCoordinator sharedSystemRouteDetector]
  +[AVRouteDetectorCoordinator updateMultipleRoutesDetected]
  +[AVRouteDetectorCoordinator setMultipleRoutesDetected:]

  // instance methods
  -[AVRouteDetectorCoordinator dealloc]
  -[AVRouteDetectorCoordinator setRouteDetectionEnabled:]
  -[AVRouteDetectorCoordinator multipleRoutesDetected]
  -[AVRouteDetectorCoordinator isRouteDetectionEnabled]


AVContentOverlayView : AVTouchIgnoringView
 @property  <AVContentOverlayViewDelegate> *delegate

  // instance methods
  -[AVContentOverlayView delegate]
  -[AVContentOverlayView setDelegate:]
  -[AVContentOverlayView .cxx_destruct]
  -[AVContentOverlayView didAddSubview:]
  -[AVContentOverlayView _didRemoveSubview:]


AVPictureInPicturePlayerLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerLayer *playerLayer

  // instance methods
  -[AVPictureInPicturePlayerLayerView .cxx_destruct]
  -[AVPictureInPicturePlayerLayerView playerLayer]
  -[AVPictureInPicturePlayerLayerView attachPlayerLayer]
  -[AVPictureInPicturePlayerLayerView detachPlayerLayer]


_AVSimplePlayerLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerLayer *playerLayer

  // class methods
  +[_AVSimplePlayerLayerView layerClass]
  +[_AVSimplePlayerLayerView keyPathsForValuesAffectingPlayerLayer]

  // instance methods
  -[_AVSimplePlayerLayerView playerLayer]


AVPictureInPicturePlatformAdapter : NSObject /usr/lib/libSystem.B.dylib <AVPictureInPictureViewControllerDelegate, PGPictureInPictureProxyDelegate, AVPictureInPictureControlsStyleAppearance>
 @property  long long status
 @property  PGPictureInPictureProxy *pegasusProxy
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoRectInScreen
 @property  NSTimer *layoutCheckTimer
 @property  AVSecondScreenConnection *secondScreenConnection
 @property  UIWindow *sourceWindowWhenPictureInPictureStarted
 @property  <AVPictureInPictureContentSource> *source
 @property  AVObservationController *observationController
 @property  long long statusStorage
 @property  <AVPictureInPicturePlatformAdapterDelegate> *delegate
 @property  AVPlayerController *playerController
 @property  BOOL allowsPictureInPicturePlayback
 @property  BOOL systemPictureInPicturePossible
 @property  BOOL alwaysStartsAutomaticallyWhenEnteringBackground
 @property  long long controlsStyle
 @property  BOOL canAnimatePictureInPictureTransition
 @property  AVPictureInPictureViewController *pictureInPictureViewController
 @property  BOOL anyPictureInPictureActive
 @property  long long status
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVPictureInPicturePlatformAdapter isPictureInPictureSupported]
  +[AVPictureInPicturePlatformAdapter startPictureInPictureButtonImageName]
  +[AVPictureInPicturePlatformAdapter stopPictureInPictureButtonImageName]

  // instance methods
  -[AVPictureInPicturePlatformAdapter dealloc]
  -[AVPictureInPicturePlatformAdapter delegate]
  -[AVPictureInPicturePlatformAdapter setDelegate:]
  -[AVPictureInPicturePlatformAdapter .cxx_destruct]
  -[AVPictureInPicturePlatformAdapter source]
  -[AVPictureInPicturePlatformAdapter status]
  -[AVPictureInPicturePlatformAdapter status]
  -[AVPictureInPicturePlatformAdapter setStatus:]
  -[AVPictureInPicturePlatformAdapter _updateStatus]
  -[AVPictureInPicturePlatformAdapter initWithSource:]
  -[AVPictureInPicturePlatformAdapter playerController]
  -[AVPictureInPicturePlatformAdapter setPlayerController:]
  -[AVPictureInPicturePlatformAdapter startPictureInPicture]
  -[AVPictureInPicturePlatformAdapter setAllowsPictureInPicturePlayback:]
  -[AVPictureInPicturePlatformAdapter observationController]
  -[AVPictureInPicturePlatformAdapter controlsStyle]
  -[AVPictureInPicturePlatformAdapter setControlsStyle:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxyInterfaceOrientationForTransitionAnimation:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxyViewFrameForTransitionAnimation:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxyViewControllerWindowForTransitionAnimation:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:willStartPictureInPictureWithAnimationType:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:didStartPictureInPictureWithAnimationType:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:failedToStartPictureInPictureWithAnimationType:error:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:willStopPictureInPictureWithAnimationType:reason:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxy:didStopPictureInPictureWithAnimationType:reason:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxyPictureInPictureInterruptionBegan:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureProxyPictureInPictureInterruptionEnded:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureViewControllerViewDidAppear:]
  -[AVPictureInPicturePlatformAdapter pictureInPictureViewControllerViewWillDisappear:]
  -[AVPictureInPicturePlatformAdapter stopPictureInPictureAndRestoreUserInterface:]
  -[AVPictureInPicturePlatformAdapter canAnimatePictureInPictureTransition]
  -[AVPictureInPicturePlatformAdapter isSystemPictureInPicturePossible]
  -[AVPictureInPicturePlatformAdapter setPlaybackProgress:playbackRate:loadedTimeRanges:]
  -[AVPictureInPicturePlatformAdapter setAlwaysStartsAutomaticallyWhenEnteringBackground:]
  -[AVPictureInPicturePlatformAdapter updateLayoutDependentBehaviors]
  -[AVPictureInPicturePlatformAdapter _updatePegasusProxyControlsStyle]
  -[AVPictureInPicturePlatformAdapter _createProxyIfNeeded]
  -[AVPictureInPicturePlatformAdapter _startObservation]
  -[AVPictureInPicturePlatformAdapter _removeSecondScreenConnection]
  -[AVPictureInPicturePlatformAdapter _sceneActivationState]
  -[AVPictureInPicturePlatformAdapter allowsPictureInPicturePlayback]
  -[AVPictureInPicturePlatformAdapter alwaysStartsAutomaticallyWhenEnteringBackground]
  -[AVPictureInPicturePlatformAdapter pictureInPictureViewController]
  -[AVPictureInPicturePlatformAdapter isAnyPictureInPictureActive]
  -[AVPictureInPicturePlatformAdapter pegasusProxy]
  -[AVPictureInPicturePlatformAdapter videoRectInScreen]
  -[AVPictureInPicturePlatformAdapter setVideoRectInScreen:]
  -[AVPictureInPicturePlatformAdapter layoutCheckTimer]
  -[AVPictureInPicturePlatformAdapter secondScreenConnection]
  -[AVPictureInPicturePlatformAdapter setSecondScreenConnection:]
  -[AVPictureInPicturePlatformAdapter sourceWindowWhenPictureInPictureStarted]
  -[AVPictureInPicturePlatformAdapter setSourceWindowWhenPictureInPictureStarted:]
  -[AVPictureInPicturePlatformAdapter statusStorage]
  -[AVPictureInPicturePlatformAdapter setStatusStorage:]
  -[AVPictureInPicturePlatformAdapter _updateStatusUsingProposedStatus:]


__AVPlayerLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerLayer *pictureInPicturePlayerLayer
 @property  {CGSize=dd} videoDisplaySize
 @property  AVPlayerLayer *playerLayer
 @property  AVPlayerController *playerController
 @property  long long videoGravity
 @property  BOOL readyForDisplay
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoBounds
 @property  BOOL videoScaled
 @property  NSDictionary *pixelBufferAttributes
 @property  AVPictureInPicturePlayerLayerView *pictureInPicturePlayerLayerView

  // class methods
  +[__AVPlayerLayerView layerClass]
  +[__AVPlayerLayerView keyPathsForValuesAffectingVideoLayerGravity]
  +[__AVPlayerLayerView keyPathsForValuesAffectingReadyForDisplay]
  +[__AVPlayerLayerView keyPathsForValuesAffectingVideoBounds]
  +[__AVPlayerLayerView keyPathsForValuesAffectingVideoDisplaySize]
  +[__AVPlayerLayerView keyPathsForValuesAffectingVideoScaled]
  +[__AVPlayerLayerView keyPathsForValuesAffectingPixelBufferAttributes]

  // instance methods
  -[__AVPlayerLayerView .cxx_destruct]
  -[__AVPlayerLayerView initWithFrame:]
  -[__AVPlayerLayerView videoGravity]
  -[__AVPlayerLayerView setVideoGravity:]
  -[__AVPlayerLayerView playerController]
  -[__AVPlayerLayerView setPlayerController:]
  -[__AVPlayerLayerView isReadyForDisplay]
  -[__AVPlayerLayerView pixelBufferAttributes]
  -[__AVPlayerLayerView setPixelBufferAttributes:]
  -[__AVPlayerLayerView playerLayer]
  -[__AVPlayerLayerView pictureInPicturePlayerLayerView]
  -[__AVPlayerLayerView startRoutingVideoToPictureInPicturePlayerLayerView]
  -[__AVPlayerLayerView stopRoutingVideoToPictureInPicturePlayerLayerView]
  -[__AVPlayerLayerView videoBounds]
  -[__AVPlayerLayerView videoDisplaySize]
  -[__AVPlayerLayerView isVideoScaled]
  -[__AVPlayerLayerView setVideoScaled:]
  -[__AVPlayerLayerView pictureInPicturePlayerLayer]
  -[__AVPlayerLayerView setPictureInPicturePlayerLayer:]


AVScrubberVelocity : NSObject /usr/lib/libSystem.B.dylib
 @property  double timestamp
 @property  double velocity

  // instance methods
  -[AVScrubberVelocity timestamp]
  -[AVScrubberVelocity setTimestamp:]
  -[AVScrubberVelocity velocity]
  -[AVScrubberVelocity setVelocity:]


AVScrubber : UISlider /System/Library/Frameworks/Foundation.framework/Foundation <UIScrollViewDelegate, AVExternalGestureRecognizerPreventing>
 @property  UIScrollView *scrollView
 @property  BOOL scrollScrubbing
 @property  long long scrubbingSpeed
 @property  double resolution
 @property  BOOL slowKnobMovementDetected
 @property  BOOL shouldRecoverFromPrecisionScrubbingIfNeeded
 @property  UIView *loadedTrackOverlayView
 @property  UIImageView *currentThumbView
 @property  NSMutableArray *previousScrubberVelocities
 @property  NSTimer *updateSlowKnobMovementDetectedTimer
 @property  double timestampWhenTrackingEnded
 @property  UISelectionFeedbackGenerator *feedbackGenerator
 @property  BOOL scrubsWhenTappedAnywhere
 @property  BOOL canChangeScrubbingSpeed
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL removed
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance
 @property  BOOL hasChangedLocationAtLeastOnce
 @property  <AVScrubberDelegate> *delegate
 @property  NSArray *loadedTimeRanges
 @property  NSString *localizedScrubbingSpeedName
 @property  float estimatedFrameRate
 @property  {NSDirectionalEdgeInsets=dddd} hitRectInsets
 @property  double timeIntervalSinceTrackingEnded
 @property  float rate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVScrubber keyPathsForValuesAffectingLocalizedScrubbingSpeedName]

  // instance methods
  -[AVScrubber setEnabled:]
  -[AVScrubber delegate]
  -[AVScrubber setDelegate:]
  -[AVScrubber .cxx_destruct]
  -[AVScrubber setValue:]
  -[AVScrubber duration]
  -[AVScrubber loadedTimeRanges]
  -[AVScrubber setLoadedTimeRanges:]
  -[AVScrubber setHidden:]
  -[AVScrubber intrinsicContentSize]
  -[AVScrubber initWithFrame:]
  -[AVScrubber layoutSubviews]
  -[AVScrubber alignmentRectInsets]
  -[AVScrubber pointInside:withEvent:]
  -[AVScrubber feedbackGenerator]
  -[AVScrubber isCollapsed]
  -[AVScrubber setCollapsed:]
  -[AVScrubber isTracking]
  -[AVScrubber scrollView]
  -[AVScrubber setScrollView:]
  -[AVScrubber beginTrackingWithTouch:withEvent:]
  -[AVScrubber cancelTrackingWithEvent:]
  -[AVScrubber continueTrackingWithTouch:withEvent:]
  -[AVScrubber endTrackingWithTouch:withEvent:]
  -[AVScrubber hitRect]
  -[AVScrubber trackRectForBounds:]
  -[AVScrubber thumbRectForBounds:trackRect:value:]
  -[AVScrubber createThumbView]
  -[AVScrubber minimumValueImageRectForBounds:]
  -[AVScrubber maximumValueImageRectForBounds:]
  -[AVScrubber setRate:]
  -[AVScrubber rate]
  -[AVScrubber resolution]
  -[AVScrubber setResolution:]
  -[AVScrubber setExtrinsicContentSize:]
  -[AVScrubber extrinsicContentSize]
  -[AVScrubber hitRectInsets]
  -[AVScrubber setHitRectInsets:]
  -[AVScrubber isRemoved]
  -[AVScrubber avkit_shouldPreventExternalGestureRecognizerAtPoint:]
  -[AVScrubber loadedTrackOverlayView]
  -[AVScrubber previousScrubberVelocities]
  -[AVScrubber clampedEstimatedFrameRate]
  -[AVScrubber localizedScrubbingSpeedName]
  -[AVScrubber setCurrentThumbView:]
  -[AVScrubber timeIntervalSinceTrackingEnded]
  -[AVScrubber isCollapsedOrExcluded]
  -[AVScrubber setIncluded:]
  -[AVScrubber setRemoved:]
  -[AVScrubber endOrCancelTracking]
  -[AVScrubber updateScrollViewContentSizeAndOffsetIfNeeded]
  -[AVScrubber normalizedPosition]
  -[AVScrubber normalizedScrollOffset]
  -[AVScrubber valueFromScrollView]
  -[AVScrubber contentOffsetFromValue]
  -[AVScrubber _shouldTrackTouchAtPoint:]
  -[AVScrubber _updateSlowKnobMovementDetected]
  -[AVScrubber _updateSlowKnobMovementDetectedForTargetValue:]
  -[AVScrubber setPreviousScrubberVelocities:]
  -[AVScrubber scrubbingSpeed]
  -[AVScrubber setScrubbingSpeed:]
  -[AVScrubber estimatedFrameRate]
  -[AVScrubber setEstimatedFrameRate:]
  -[AVScrubber isScrollScrubbing]
  -[AVScrubber setScrollScrubbing:]
  -[AVScrubber slowKnobMovementDetected]
  -[AVScrubber setSlowKnobMovementDetected:]
  -[AVScrubber shouldRecoverFromPrecisionScrubbingIfNeeded]
  -[AVScrubber setShouldRecoverFromPrecisionScrubbingIfNeeded:]
  -[AVScrubber currentThumbView]
  -[AVScrubber updateSlowKnobMovementDetectedTimer]
  -[AVScrubber setUpdateSlowKnobMovementDetectedTimer:]
  -[AVScrubber timestampWhenTrackingEnded]
  -[AVScrubber setTimestampWhenTrackingEnded:]
  -[AVScrubber scrubsWhenTappedAnywhere]
  -[AVScrubber setScrubsWhenTappedAnywhere:]
  -[AVScrubber canChangeScrubbingSpeed]
  -[AVScrubber setCanChangeScrubbingSpeed:]
  -[AVScrubber isIncluded]
  -[AVScrubber hasAlternateAppearance]
  -[AVScrubber setHasAlternateAppearance:]
  -[AVScrubber hasFullScreenAppearance]
  -[AVScrubber setHasFullScreenAppearance:]
  -[AVScrubber hasChangedLocationAtLeastOnce]
  -[AVScrubber setHasChangedLocationAtLeastOnce:]


AVPlaybackControlsVisibilityControllerItem : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL viewLoaded
 @property  BOOL hidden
 @property  double alpha
 @property  UIView *view

  // instance methods
  -[AVPlaybackControlsVisibilityControllerItem init]
  -[AVPlaybackControlsVisibilityControllerItem .cxx_destruct]
  -[AVPlaybackControlsVisibilityControllerItem isHidden]
  -[AVPlaybackControlsVisibilityControllerItem alpha]
  -[AVPlaybackControlsVisibilityControllerItem view]
  -[AVPlaybackControlsVisibilityControllerItem setHidden:]
  -[AVPlaybackControlsVisibilityControllerItem setView:]
  -[AVPlaybackControlsVisibilityControllerItem setAlpha:]
  -[AVPlaybackControlsVisibilityControllerItem isViewLoaded]
  -[AVPlaybackControlsVisibilityControllerItem wantsAnimatedTransitionToHidden:alpha:]
  -[AVPlaybackControlsVisibilityControllerItem needsTransitionToHidden:alpha:]
  -[AVPlaybackControlsVisibilityControllerItem setViewLoaded:]


AVChapter : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  double startTime
 @property  double duration
 @property  unsigned long number
 @property  NSString *title
 @property  UIImage *image

  // class methods
  +[AVChapter initialize]
  +[AVChapter playbackChapterWithStartTime:duration:number:title:imageFaultBlock:]
  +[AVChapter chapterAtTime:inChapters:]

  // instance methods
  -[AVChapter isEqual:]
  -[AVChapter copyWithZone:]
  -[AVChapter .cxx_destruct]
  -[AVChapter title]
  -[AVChapter duration]
  -[AVChapter image]
  -[AVChapter number]
  -[AVChapter startTime]
  -[AVChapter initWithStartTime:duration:number:title:imageFaultBlock:]


AVPlayerItemAVKitData : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSMutableDictionary *customPropertyStorage

  // instance methods
  -[AVPlayerItemAVKitData init]
  -[AVPlayerItemAVKitData copyWithZone:]
  -[AVPlayerItemAVKitData .cxx_destruct]
  -[AVPlayerItemAVKitData customPropertyStorage]


AVScrollViewObserver : NSObject /usr/lib/libSystem.B.dylib <_UIScrollViewScrollObserver>
 @property  UIView<AVScrollViewObserverContentView> *observer
 @property  NSHashTable *observedScrollViews
 @property  BOOL scrolling
 @property  BOOL scrollingQuickly
 @property  NSTimer *scrollingDidEndTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVScrollViewObserver dealloc]
  -[AVScrollViewObserver observer]
  -[AVScrollViewObserver .cxx_destruct]
  -[AVScrollViewObserver setObserver:]
  -[AVScrollViewObserver isScrolling]
  -[AVScrollViewObserver initWithContentView:]
  -[AVScrollViewObserver _observeScrollViewDidScroll:]
  -[AVScrollViewObserver setScrolling:]
  -[AVScrollViewObserver updateObservedScrollViews]
  -[AVScrollViewObserver _updateScrollingStatus]
  -[AVScrollViewObserver isScrollingQuickly]
  -[AVScrollViewObserver setScrollingQuickly:]
  -[AVScrollViewObserver observedScrollViews]
  -[AVScrollViewObserver setObservedScrollViews:]
  -[AVScrollViewObserver scrollingDidEndTimer]
  -[AVScrollViewObserver setScrollingDidEndTimer:]


AVVolumeSlider : UISlider /System/Library/Frameworks/Foundation.framework/Foundation <AVExternalGestureRecognizerPreventing, AVPlaybackControlsViewItem>
 @property  UIImageView *thumbView
 @property  AVVolumeWarningView *volumeWarningView
 @property  BOOL hasChangedLocationAtLeastOnce
 @property  BOOL scrubsWhenTappedAnywhere
 @property  BOOL animatingVolumeChange
 @property  float effectiveVolumeLimit
 @property  NSNumber *unclampedValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL removed
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance

  // instance methods
  -[AVVolumeSlider .cxx_destruct]
  -[AVVolumeSlider setHidden:]
  -[AVVolumeSlider intrinsicContentSize]
  -[AVVolumeSlider initWithFrame:]
  -[AVVolumeSlider gestureRecognizerShouldBegin:]
  -[AVVolumeSlider layoutSubviews]
  -[AVVolumeSlider alignmentRectInsets]
  -[AVVolumeSlider pointInside:withEvent:]
  -[AVVolumeSlider didMoveToWindow]
  -[AVVolumeSlider isCollapsed]
  -[AVVolumeSlider setCollapsed:]
  -[AVVolumeSlider beginTrackingWithTouch:withEvent:]
  -[AVVolumeSlider cancelTrackingWithEvent:]
  -[AVVolumeSlider continueTrackingWithTouch:withEvent:]
  -[AVVolumeSlider endTrackingWithTouch:withEvent:]
  -[AVVolumeSlider setValue:animated:]
  -[AVVolumeSlider hitRect]
  -[AVVolumeSlider trackRectForBounds:]
  -[AVVolumeSlider thumbRectForBounds:trackRect:value:]
  -[AVVolumeSlider createThumbView]
  -[AVVolumeSlider setExtrinsicContentSize:]
  -[AVVolumeSlider extrinsicContentSize]
  -[AVVolumeSlider _endTracking]
  -[AVVolumeSlider thumbView]
  -[AVVolumeSlider isRemoved]
  -[AVVolumeSlider avkit_shouldPreventExternalGestureRecognizerAtPoint:]
  -[AVVolumeSlider isCollapsedOrExcluded]
  -[AVVolumeSlider setIncluded:]
  -[AVVolumeSlider setRemoved:]
  -[AVVolumeSlider _shouldTrackTouchAtPoint:]
  -[AVVolumeSlider scrubsWhenTappedAnywhere]
  -[AVVolumeSlider setScrubsWhenTappedAnywhere:]
  -[AVVolumeSlider isIncluded]
  -[AVVolumeSlider hasAlternateAppearance]
  -[AVVolumeSlider setHasAlternateAppearance:]
  -[AVVolumeSlider hasFullScreenAppearance]
  -[AVVolumeSlider setHasFullScreenAppearance:]
  -[AVVolumeSlider hasChangedLocationAtLeastOnce]
  -[AVVolumeSlider setHasChangedLocationAtLeastOnce:]
  -[AVVolumeSlider setEffectiveVolumeLimit:]
  -[AVVolumeSlider unclampedValue]
  -[AVVolumeSlider setThumbView:]
  -[AVVolumeSlider effectiveVolumeLimit]
  -[AVVolumeSlider setUnclampedValue:]
  -[AVVolumeSlider isAnimatingVolumeChange]
  -[AVVolumeSlider setAnimatingVolumeChange:]
  -[AVVolumeSlider volumeWarningView]
  -[AVVolumeSlider setVolumeWarningView:]


AVVolumeWarningView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UIViewPropertyAnimator *animator
 @property  BOOL stopping

  // instance methods
  -[AVVolumeWarningView .cxx_destruct]
  -[AVVolumeWarningView initWithFrame:]
  -[AVVolumeWarningView setAnimator:]
  -[AVVolumeWarningView animator]
  -[AVVolumeWarningView startAnimating]
  -[AVVolumeWarningView isStopping]
  -[AVVolumeWarningView stopAnimatingAndRemoveFromSuperview]
  -[AVVolumeWarningView continueAnimating]
  -[AVVolumeWarningView setStopping:]


AVNewsWidgetPlayerBehavior : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorInternal, AVBehavior>
 @property  AVNewsWidgetPlayerBehaviorContext *behaviorContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVNewsWidgetPlayerBehavior behaviorContextClass]

  // instance methods
  -[AVNewsWidgetPlayerBehavior init]
  -[AVNewsWidgetPlayerBehavior dealloc]
  -[AVNewsWidgetPlayerBehavior .cxx_destruct]
  -[AVNewsWidgetPlayerBehavior willMoveToContext:]
  -[AVNewsWidgetPlayerBehavior behaviorContext]
  -[AVNewsWidgetPlayerBehavior setBehaviorContext:]
  -[AVNewsWidgetPlayerBehavior didMoveToContext:]
  -[AVNewsWidgetPlayerBehavior willRemoveFromContext:]
  -[AVNewsWidgetPlayerBehavior didRemoveFromContext:]
  -[AVNewsWidgetPlayerBehavior playerForContentTransitionType:]
  -[AVNewsWidgetPlayerBehavior willBeginContentTransition]
  -[AVNewsWidgetPlayerBehavior didUpdateContentTransitionProgress:]
  -[AVNewsWidgetPlayerBehavior willCompleteContentTransition]
  -[AVNewsWidgetPlayerBehavior didCompleteContentTransition]
  -[AVNewsWidgetPlayerBehavior willCancelContentTransition]
  -[AVNewsWidgetPlayerBehavior didCancelContentTransition]


AVUserInteractionObserverGestureRecognizer : UIGestureRecognizer /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVUserInteractionObserverGestureRecognizer .cxx_destruct]
  -[AVUserInteractionObserverGestureRecognizer initWithTarget:action:]
  -[AVUserInteractionObserverGestureRecognizer touchesBegan:withEvent:]
  -[AVUserInteractionObserverGestureRecognizer touchesMoved:withEvent:]
  -[AVUserInteractionObserverGestureRecognizer touchesEnded:withEvent:]
  -[AVUserInteractionObserverGestureRecognizer touchesCancelled:withEvent:]
  -[AVUserInteractionObserverGestureRecognizer canPreventGestureRecognizer:]
  -[AVUserInteractionObserverGestureRecognizer canBePreventedByGestureRecognizer:]
  -[AVUserInteractionObserverGestureRecognizer shouldBeRequiredToFailByGestureRecognizer:]
  -[AVUserInteractionObserverGestureRecognizer touchesEstimatedPropertiesUpdated:]
  -[AVUserInteractionObserverGestureRecognizer shouldRequireFailureOfGestureRecognizer:]
  -[AVUserInteractionObserverGestureRecognizer _touchesEndedOrCancelled:]


AVPlayerControllerVolumeAnimator : NSObject /usr/lib/libSystem.B.dylib
 @property  double volumeToRestore
 @property  BOOL animatingTowardsZero
 @property  BOOL animatingAwayFromZero
 @property  AVPlayerController *playerController

  // instance methods
  -[AVPlayerControllerVolumeAnimator .cxx_destruct]
  -[AVPlayerControllerVolumeAnimator playerController]
  -[AVPlayerControllerVolumeAnimator currentRouteHasVolumeControl]
  -[AVPlayerControllerVolumeAnimator initWithPlayerController:]
  -[AVPlayerControllerVolumeAnimator canAnimateVolumeTowardsZero]
  -[AVPlayerControllerVolumeAnimator canAnimateVolumeAwayFromZero]
  -[AVPlayerControllerVolumeAnimator setProgressTowardsZero:]
  -[AVPlayerControllerVolumeAnimator setProgressAwayFromZero:]
  -[AVPlayerControllerVolumeAnimator restoreVolumeIfNeeded]
  -[AVPlayerControllerVolumeAnimator volumeToRestore]
  -[AVPlayerControllerVolumeAnimator setVolumeToRestore:]
  -[AVPlayerControllerVolumeAnimator isAnimatingTowardsZero]
  -[AVPlayerControllerVolumeAnimator setAnimatingTowardsZero:]
  -[AVPlayerControllerVolumeAnimator isAnimatingAwayFromZero]
  -[AVPlayerControllerVolumeAnimator setAnimatingAwayFromZero:]


AVHomeIPCameraBehavior : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorInternal, AVHomeIPCameraActionButtonHandling, AVBehavior>
 @property  AVHomeIPCameraBehaviorContext *behaviorContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVHomeIPCameraBehavior behaviorContextClass]

  // instance methods
  -[AVHomeIPCameraBehavior .cxx_destruct]
  -[AVHomeIPCameraBehavior willMoveToContext:]
  -[AVHomeIPCameraBehavior behaviorContext]
  -[AVHomeIPCameraBehavior setBehaviorContext:]
  -[AVHomeIPCameraBehavior didMoveToContext:]
  -[AVHomeIPCameraBehavior willRemoveFromContext:]
  -[AVHomeIPCameraBehavior didRemoveFromContext:]
  -[AVHomeIPCameraBehavior pictureInPictureActionButtonTapped]
  -[AVHomeIPCameraBehavior playbackControlsDidChangePlayerVolume:]
  -[AVHomeIPCameraBehavior playbackControlsDidToggleMuted:]
  -[AVHomeIPCameraBehavior playbackControlsDidUpdateVisibilityOfLoadingIndicator:]


AVInteractiveTransitionGestureTracker : NSObject /usr/lib/libSystem.B.dylib <UIGestureRecognizerDelegate, AVTransitionDriver>
 @property  BOOL pinchToDismissEnabled
 @property  BOOL pinchToPresentEnabled
 @property  BOOL panToDismissEnabled
 @property  double previousPinchScale
 @property  double _rotation
 @property  UIPanGestureRecognizer *panGestureRecognizer
 @property  UIPinchGestureRecognizer *pinchGestureRecognizer
 @property  UIRotationGestureRecognizer *rotationGestureRecognizer
 @property  NSArray *recognizers
 @property  BOOL waitingForTransition
 @property  BOOL waitingForBoundsChange
 @property  BOOL waitingForLocationChangeAfterBoundsChange
 @property  double timestampOfTouchWithLocationChangeAfterBoundsChange
 @property  BOOL hasContinued
 @property  BOOL hasRotated
 @property  long long initialInterfaceOrientation
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} initialCoordinateSpaceBounds
 @property  {CGPoint=dd} gestureLocationAfterBoundsChange
 @property  {CGPoint=dd} lastReportedLocationInWindow
 @property  {CGPoint=dd} anchorLocationInWindow
 @property  BOOL lastNonZeroVelocityWasDownward
 @property  long long transitionInteraction
 @property  UIView *view
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <AVTransitionDriverDelegate> *transitionDriverDelegate
 @property  double rotation
 @property  double rotationVelocity
 @property  double pinchScale
 @property  double pinchVelocity
 @property  UIPanGestureRecognizer *contentTransitioningViewGestureRecognizer

  // instance methods
  -[AVInteractiveTransitionGestureTracker init]
  -[AVInteractiveTransitionGestureTracker dealloc]
  -[AVInteractiveTransitionGestureTracker setEnabled:]
  -[AVInteractiveTransitionGestureTracker .cxx_destruct]
  -[AVInteractiveTransitionGestureTracker _reset]
  -[AVInteractiveTransitionGestureTracker isEnabled]
  -[AVInteractiveTransitionGestureTracker rotation]
  -[AVInteractiveTransitionGestureTracker view]
  -[AVInteractiveTransitionGestureTracker setView:]
  -[AVInteractiveTransitionGestureTracker gestureRecognizerShouldBegin:]
  -[AVInteractiveTransitionGestureTracker gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[AVInteractiveTransitionGestureTracker gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[AVInteractiveTransitionGestureTracker gestureRecognizer:shouldReceiveTouch:]
  -[AVInteractiveTransitionGestureTracker panGestureRecognizer]
  -[AVInteractiveTransitionGestureTracker willMoveToView:]
  -[AVInteractiveTransitionGestureTracker didMoveToView:]
  -[AVInteractiveTransitionGestureTracker isTracking]
  -[AVInteractiveTransitionGestureTracker _handlePanGesture:]
  -[AVInteractiveTransitionGestureTracker _rotation]
  -[AVInteractiveTransitionGestureTracker _cancel]
  -[AVInteractiveTransitionGestureTracker locationInWindow]
  -[AVInteractiveTransitionGestureTracker pinchGestureRecognizer]
  -[AVInteractiveTransitionGestureTracker _finish]
  -[AVInteractiveTransitionGestureTracker translationInWindow]
  -[AVInteractiveTransitionGestureTracker rotationGestureRecognizer]
  -[AVInteractiveTransitionGestureTracker velocityInWindow]
  -[AVInteractiveTransitionGestureTracker angleOfVelocityInWindow]
  -[AVInteractiveTransitionGestureTracker transitionDriver:shouldRequireFailureOfGestureRecognizer:]
  -[AVInteractiveTransitionGestureTracker transitionDriverDelegate]
  -[AVInteractiveTransitionGestureTracker setTransitionDriverDelegate:]
  -[AVInteractiveTransitionGestureTracker transitionInteraction]
  -[AVInteractiveTransitionGestureTracker rotationVelocity]
  -[AVInteractiveTransitionGestureTracker pinchScale]
  -[AVInteractiveTransitionGestureTracker pinchVelocity]
  -[AVInteractiveTransitionGestureTracker lastNonZeroVelocityWasDownward]
  -[AVInteractiveTransitionGestureTracker contentTransitioningViewGestureRecognizer]
  -[AVInteractiveTransitionGestureTracker setContentTransitioningViewGestureRecognizer:]
  -[AVInteractiveTransitionGestureTracker addRecognizersToView:]
  -[AVInteractiveTransitionGestureTracker _locationRecognizer]
  -[AVInteractiveTransitionGestureTracker _untranslatedUnfilteredLocationInFixedCoordinateSpace]
  -[AVInteractiveTransitionGestureTracker _filteredUntranslatedLocationInWindow]
  -[AVInteractiveTransitionGestureTracker _handlePinchGesture:]
  -[AVInteractiveTransitionGestureTracker _handleRotationGesture:]
  -[AVInteractiveTransitionGestureTracker _isWaitingToContinue]
  -[AVInteractiveTransitionGestureTracker _beginTracking:]
  -[AVInteractiveTransitionGestureTracker _updateLastNonZeroVelocityDirection]
  -[AVInteractiveTransitionGestureTracker _resetGesturesIfPossible]
  -[AVInteractiveTransitionGestureTracker _setHasContinuedIfNeeded]
  -[AVInteractiveTransitionGestureTracker isPinchToDismissEnabled]
  -[AVInteractiveTransitionGestureTracker setPinchToDismissEnabled:]
  -[AVInteractiveTransitionGestureTracker isPinchToPresentEnabled]
  -[AVInteractiveTransitionGestureTracker setPinchToPresentEnabled:]
  -[AVInteractiveTransitionGestureTracker isPanToDismissEnabled]
  -[AVInteractiveTransitionGestureTracker setPanToDismissEnabled:]
  -[AVInteractiveTransitionGestureTracker previousPinchScale]
  -[AVInteractiveTransitionGestureTracker setPreviousPinchScale:]
  -[AVInteractiveTransitionGestureTracker _setRotation:]
  -[AVInteractiveTransitionGestureTracker recognizers]
  -[AVInteractiveTransitionGestureTracker isWaitingForTransition]
  -[AVInteractiveTransitionGestureTracker setWaitingForTransition:]
  -[AVInteractiveTransitionGestureTracker isWaitingForBoundsChange]
  -[AVInteractiveTransitionGestureTracker setWaitingForBoundsChange:]
  -[AVInteractiveTransitionGestureTracker isWaitingForLocationChangeAfterBoundsChange]
  -[AVInteractiveTransitionGestureTracker setWaitingForLocationChangeAfterBoundsChange:]
  -[AVInteractiveTransitionGestureTracker timestampOfTouchWithLocationChangeAfterBoundsChange]
  -[AVInteractiveTransitionGestureTracker setTimestampOfTouchWithLocationChangeAfterBoundsChange:]
  -[AVInteractiveTransitionGestureTracker hasContinued]
  -[AVInteractiveTransitionGestureTracker setHasContinued:]
  -[AVInteractiveTransitionGestureTracker hasRotated]
  -[AVInteractiveTransitionGestureTracker setHasRotated:]
  -[AVInteractiveTransitionGestureTracker initialInterfaceOrientation]
  -[AVInteractiveTransitionGestureTracker setInitialInterfaceOrientation:]
  -[AVInteractiveTransitionGestureTracker initialCoordinateSpaceBounds]
  -[AVInteractiveTransitionGestureTracker setInitialCoordinateSpaceBounds:]
  -[AVInteractiveTransitionGestureTracker gestureLocationAfterBoundsChange]
  -[AVInteractiveTransitionGestureTracker setGestureLocationAfterBoundsChange:]
  -[AVInteractiveTransitionGestureTracker lastReportedLocationInWindow]
  -[AVInteractiveTransitionGestureTracker setLastReportedLocationInWindow:]
  -[AVInteractiveTransitionGestureTracker anchorLocationInWindow]
  -[AVInteractiveTransitionGestureTracker setAnchorLocationInWindow:]
  -[AVInteractiveTransitionGestureTracker setLastNonZeroVelocityWasDownward:]
  -[AVInteractiveTransitionGestureTracker setTransitionInteraction:]


AVSecondScreenController : NSObject /usr/lib/libSystem.B.dylib
 @property  AVObservationController *observationController
 @property  NSMutableOrderedSet *secondScreens
 @property  NSMutableOrderedSet *connections
 @property  BOOL allowsUpdatingActiveConnection

  // class methods
  +[AVSecondScreenController sharedInstance]

  // instance methods
  -[AVSecondScreenController init]
  -[AVSecondScreenController dealloc]
  -[AVSecondScreenController .cxx_destruct]
  -[AVSecondScreenController activeConnection]
  -[AVSecondScreenController _targetScreen]
  -[AVSecondScreenController connections]
  -[AVSecondScreenController addConnection:]
  -[AVSecondScreenController removeConnection:]
  -[AVSecondScreenController observationController]
  -[AVSecondScreenController addConnectionForPlayer:playerLayer:]
  -[AVSecondScreenController connectionPassingTest:]
  -[AVSecondScreenController preferredConnection]
  -[AVSecondScreenController setPreferredConnection:]
  -[AVSecondScreenController addSecondScreen:]
  -[AVSecondScreenController removeSecondScreen:]
  -[AVSecondScreenController _connectionForPlayer:]
  -[AVSecondScreenController _updateActiveConnection]
  -[AVSecondScreenController _insertConnection:atIndex:]
  -[AVSecondScreenController secondScreens]
  -[AVSecondScreenController allowsUpdatingActiveConnection]
  -[AVSecondScreenController setAllowsUpdatingActiveConnection:]


AVPresentationContext : NSObject /usr/lib/libSystem.B.dylib
 @property  AVPresentationController *presentationController
 @property  long long transitionType
 @property  UIView *sourceView
 @property  AVPresentationContainerView *presentedView
 @property  UIView *containerView
 @property  UIWindow *presentationWindow
 @property  UIView *touchBlockingView
 @property  UIView *backgroundView
 @property  UIViewController *presentedViewController
 @property  <UIViewControllerContextTransitioning> *transitionContext
 @property  BOOL allowsSecondWindowPresentations
 @property  UIWindow *rotatableSecondWindow
 @property  AVFullScreenViewController *avFullScreenViewController
 @property  AVFullScreenViewController *rotatableWindowViewController
 @property  AVPresentationContextTransition *presentingTransition
 @property  AVPresentationContextTransition *dismissingTransition
 @property  AVPresentationContextTransition *currentTransition
 @property  BOOL hasActiveTransition
 @property  BOOL presenting
 @property  BOOL dismissing
 @property  BOOL wasInitiallyInteractive
 @property  BOOL canBeInteractivelyDismissed
 @property  BOOL allowsPausingWhenTransitionCompletes

  // class methods
  +[AVPresentationContext supportsInteractiveCounterRotationDismissals]

  // instance methods
  -[AVPresentationContext .cxx_destruct]
  -[AVPresentationContext containerView]
  -[AVPresentationContext backgroundView]
  -[AVPresentationContext presentedViewController]
  -[AVPresentationContext transitionContext]
  -[AVPresentationContext presentedView]
  -[AVPresentationContext presentationController]
  -[AVPresentationContext sourceView]
  -[AVPresentationContext setTransitionContext:]
  -[AVPresentationContext setSourceView:]
  -[AVPresentationContext isPresenting]
  -[AVPresentationContext currentTransition]
  -[AVPresentationContext presentationWindow]
  -[AVPresentationContext isDismissing]
  -[AVPresentationContext initWithPresentationController:]
  -[AVPresentationContext presentingView]
  -[AVPresentationContext rotatableWindowViewController]
  -[AVPresentationContext hasActiveTransition]
  -[AVPresentationContext wasInitiallyInteractive]
  -[AVPresentationContext transitionType]
  -[AVPresentationContext canBeInteractivelyDismissed]
  -[AVPresentationContext presentationFromView]
  -[AVPresentationContext dismissalToView]
  -[AVPresentationContext touchBlockingView]
  -[AVPresentationContext allowsSecondWindowPresentations]
  -[AVPresentationContext setAllowsSecondWindowPresentations:]
  -[AVPresentationContext rotatableSecondWindow]
  -[AVPresentationContext setRotatableSecondWindow:]
  -[AVPresentationContext avFullScreenViewController]
  -[AVPresentationContext presentingTransition]
  -[AVPresentationContext setPresentingTransition:]
  -[AVPresentationContext dismissingTransition]
  -[AVPresentationContext setDismissingTransition:]
  -[AVPresentationContext allowsPausingWhenTransitionCompletes]
  -[AVPresentationContext setAllowsPausingWhenTransitionCompletes:]


AVNowPlayingInfoController : NSObject /usr/lib/libSystem.B.dylib
 @property  AVPlayerController *playerController
 @property  AVPlayerController *playerControllerToActivateAfterDelay
 @property  BOOL enabled
 @property  BOOL requiresLinearPlayback
 @property  NSString *overrideParentApplicationDisplayIdentifier

  // class methods
  +[AVNowPlayingInfoController _createMediaRemoteLanguageOptionWithAVMediaSelectionOption:]
  +[AVNowPlayingInfoController _createMediaRemoteLanguageOptionGroupWithAVMediaSelectionOptions:]
  +[AVNowPlayingInfoController sharedNowPlayingInfoControllerWithCompletion:]
  +[AVNowPlayingInfoController _mediaRemoteLanguageOptionCharacteristicsForAVMediaSelectionOption:]
  +[AVNowPlayingInfoController _avMediaCharacteristics]
  +[AVNowPlayingInfoController _mediaRemoteLanguageOptionCharacteristicForAVMediaCharacteristic:]

  // instance methods
  -[AVNowPlayingInfoController init]
  -[AVNowPlayingInfoController dealloc]
  -[AVNowPlayingInfoController setEnabled:]
  -[AVNowPlayingInfoController .cxx_destruct]
  -[AVNowPlayingInfoController isEnabled]
  -[AVNowPlayingInfoController playerController]
  -[AVNowPlayingInfoController setPlayerController:]
  -[AVNowPlayingInfoController setOverrideParentApplicationDisplayIdentifier:]
  -[AVNowPlayingInfoController setRequiresLinearPlayback:]
  -[AVNowPlayingInfoController startNowPlayingUpdatesForPlayerController:afterDelay:]
  -[AVNowPlayingInfoController stopNowPlayingUpdatesForPlayerController:]
  -[AVNowPlayingInfoController _setNowPlayingInfoNeedsUpdate]
  -[AVNowPlayingInfoController _updateNowPlayingInfoIfNeeded]
  -[AVNowPlayingInfoController _updateNowPlayingInfo:commandsAndStates:]
  -[AVNowPlayingInfoController _makeNowPlayingInfo]
  -[AVNowPlayingInfoController _makeCommandsAndStatesDictionaryForPlayerController:]
  -[AVNowPlayingInfoController _updateRegisteredRemoteCommandEnabledStatesWithCommandsAndStates:]
  -[AVNowPlayingInfoController _handleRemoteCommand:options:]
  -[AVNowPlayingInfoController _availableLanguageOptions]
  -[AVNowPlayingInfoController _currentLanguageOptions]
  -[AVNowPlayingInfoController requiresLinearPlayback]
  -[AVNowPlayingInfoController overrideParentApplicationDisplayIdentifier]
  -[AVNowPlayingInfoController playerControllerToActivateAfterDelay]
  -[AVNowPlayingInfoController setPlayerControllerToActivateAfterDelay:]


AVStatusBarBackgroundGradientView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  CABackdropLayer *layer
 @property  AVStatusBarBackgroundGradientViewSubview *gradientView

  // class methods
  +[AVStatusBarBackgroundGradientView layerClass]

  // instance methods
  -[AVStatusBarBackgroundGradientView .cxx_destruct]
  -[AVStatusBarBackgroundGradientView alpha]
  -[AVStatusBarBackgroundGradientView setAlpha:]
  -[AVStatusBarBackgroundGradientView layoutSubviews]
  -[AVStatusBarBackgroundGradientView gradientView]
  -[AVStatusBarBackgroundGradientView setGradientView:]


AVStatusBarBackgroundGradientViewSubview : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  CAGradientLayer *layer
 @property  double gradientOpacity

  // class methods
  +[AVStatusBarBackgroundGradientViewSubview layerClass]

  // instance methods
  -[AVStatusBarBackgroundGradientViewSubview initWithFrame:]
  -[AVStatusBarBackgroundGradientViewSubview gradientOpacity]
  -[AVStatusBarBackgroundGradientViewSubview setGradientOpacity:]


AVMusicAppBehavior : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorInternal, AVBehavior>
 @property  AVMusicAppBehaviorContext *behaviorContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVMusicAppBehavior behaviorContextClass]

  // instance methods
  -[AVMusicAppBehavior .cxx_destruct]
  -[AVMusicAppBehavior skipToNextItem]
  -[AVMusicAppBehavior skipToPreviousItem]
  -[AVMusicAppBehavior willMoveToContext:]
  -[AVMusicAppBehavior behaviorContext]
  -[AVMusicAppBehavior setBehaviorContext:]
  -[AVMusicAppBehavior didMoveToContext:]
  -[AVMusicAppBehavior willRemoveFromContext:]
  -[AVMusicAppBehavior didRemoveFromContext:]
  -[AVMusicAppBehavior pictureInPictureActionButtonTapped]
  -[AVMusicAppBehavior playbackControlsDidChangePlayerVolume:]
  -[AVMusicAppBehavior contextWillHandleUserAction:]


AVMusicAppBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorContextInternal, AVPlayerViewControllerBehaviorContext, AVMetricsCollectionBehaviorContext, AVBehaviorContext>
 @property  AVMusicAppBehavior *behavior
 @property  AVObservationController *observationController
 @property  AVPlayerController *playerController
 @property  BOOL scrubbing
 @property  NSNumber *seekTargetTime
 @property  BOOL showsSkipItemButtons
 @property  BOOL skipToPreviousItemButtonEnabled
 @property  BOOL skipToNextItemButtonEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVMusicAppBehaviorContext dealloc]
  -[AVMusicAppBehaviorContext .cxx_destruct]
  -[AVMusicAppBehaviorContext viewDidLoad]
  -[AVMusicAppBehaviorContext behavior]
  -[AVMusicAppBehaviorContext setBehavior:]
  -[AVMusicAppBehaviorContext isScrubbing]
  -[AVMusicAppBehaviorContext playerController]
  -[AVMusicAppBehaviorContext setPlayerController:]
  -[AVMusicAppBehaviorContext playerViewController]
  -[AVMusicAppBehaviorContext observationController]
  -[AVMusicAppBehaviorContext playerViewController:didCollectMetricsEvent:]
  -[AVMusicAppBehaviorContext initWithAVKitOwner:]
  -[AVMusicAppBehaviorContext willAddBehavior:]
  -[AVMusicAppBehaviorContext didAddBehavior:]
  -[AVMusicAppBehaviorContext willRemoveBehavior:]
  -[AVMusicAppBehaviorContext didRemoveBehavior:]
  -[AVMusicAppBehaviorContext setSkipToNextItemButtonEnabled:]
  -[AVMusicAppBehaviorContext setSkipToPreviousItemButtonEnabled:]
  -[AVMusicAppBehaviorContext setShowsSkipItemButtons:]
  -[AVMusicAppBehaviorContext seekTargetTime]
  -[AVMusicAppBehaviorContext _updateSkipItemButtonsEnabled]
  -[AVMusicAppBehaviorContext showsSkipItemButtons]
  -[AVMusicAppBehaviorContext isSkipToPreviousItemButtonEnabled]
  -[AVMusicAppBehaviorContext isSkipToNextItemButtonEnabled]
  -[AVMusicAppBehaviorContext setScrubbing:]
  -[AVMusicAppBehaviorContext setSeekTargetTime:]


AVSecondScreen : NSObject /usr/lib/libSystem.B.dylib
 @property  AVObservationController *observationController
 @property  UIWindow *window
 @property  UIWindowScene *windowScene
 @property  UIScreen *screen
 @property  AVSecondScreenConnection *secondScreenConnection
 @property  long long state
 @property  CADisplay *debugInfoDisplay
 @property  BOOL TVOutScreen
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sceneBounds

  // instance methods
  -[AVSecondScreen dealloc]
  -[AVSecondScreen .cxx_destruct]
  -[AVSecondScreen state]
  -[AVSecondScreen setState:]
  -[AVSecondScreen screen]
  -[AVSecondScreen isAvailable]
  -[AVSecondScreen window]
  -[AVSecondScreen initWithScene:]
  -[AVSecondScreen windowScene]
  -[AVSecondScreen setWindow:]
  -[AVSecondScreen observationController]
  -[AVSecondScreen secondScreenConnection]
  -[AVSecondScreen setSecondScreenConnection:]
  -[AVSecondScreen connectWithSecondScreenConnection:]
  -[AVSecondScreen sceneBounds]
  -[AVSecondScreen _updatePreferredDisplayCriteria]
  -[AVSecondScreen _isWindowSceneAvailable]
  -[AVSecondScreen isTVOutScreen]
  -[AVSecondScreen debugInfoDisplay]
  -[AVSecondScreen setDebugInfoDisplay:]


AVLoadingButtonView : UIView /System/Library/Frameworks/Foundation.framework/Foundation <AVPlaybackControlsViewItem>
 @property  UIActivityIndicatorView *loadingIndicator
 @property  AVButton *button
 @property  BOOL showsLoadingIndicator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL removed
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance

  // instance methods
  -[AVLoadingButtonView .cxx_destruct]
  -[AVLoadingButtonView setHidden:]
  -[AVLoadingButtonView intrinsicContentSize]
  -[AVLoadingButtonView button]
  -[AVLoadingButtonView layoutSubviews]
  -[AVLoadingButtonView initWithTitle:]
  -[AVLoadingButtonView isCollapsed]
  -[AVLoadingButtonView setCollapsed:]
  -[AVLoadingButtonView setExtrinsicContentSize:]
  -[AVLoadingButtonView extrinsicContentSize]
  -[AVLoadingButtonView isRemoved]
  -[AVLoadingButtonView isCollapsedOrExcluded]
  -[AVLoadingButtonView setIncluded:]
  -[AVLoadingButtonView setRemoved:]
  -[AVLoadingButtonView isIncluded]
  -[AVLoadingButtonView hasAlternateAppearance]
  -[AVLoadingButtonView setHasAlternateAppearance:]
  -[AVLoadingButtonView hasFullScreenAppearance]
  -[AVLoadingButtonView setHasFullScreenAppearance:]
  -[AVLoadingButtonView setShowsLoadingIndicator:]
  -[AVLoadingButtonView _updateIsHiddenAndAlpha]
  -[AVLoadingButtonView showsLoadingIndicator]
  -[AVLoadingButtonView loadingIndicator]
  -[AVLoadingButtonView setLoadingIndicator:]


AVVolumeHUDAssertion : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *clientIdentifier
 @property  NSString *sceneIdentifier

  // instance methods
  -[AVVolumeHUDAssertion isEqual:]
  -[AVVolumeHUDAssertion .cxx_destruct]
  -[AVVolumeHUDAssertion sceneIdentifier]
  -[AVVolumeHUDAssertion clientIdentifier]
  -[AVVolumeHUDAssertion initWithSceneIdentifier:clientIdentifier:]


AVSystemVolumeController : NSObject /usr/lib/libSystem.B.dylib <AVVolumeController>
 @property  BOOL changingVolume
 @property  BOOL currentRouteHasVolumeControl
 @property  float EUVolumeLimit
 @property  BOOL EUVolumeLimitEnabled
 @property  BOOL EUVolumeLimitOverridden
 @property  float volume
 @property  BOOL volumeChangesThrottled
 @property  BOOL canOverrideEUVolumeLimit
 @property  NSNumber *targetVolumeInternal
 @property  NSNumber *maximumTargetVolumeSinceChangingVolumeBegan
 @property  NSString *volumeCategory
 @property  AVSystemController *sharedSystemController
 @property  BOOL fullyInitialized
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  float effectiveVolumeLimit

  // class methods
  +[AVSystemVolumeController volumeController]
  +[AVSystemVolumeController windowSceneVolumeHUDAssertions]

  // instance methods
  -[AVSystemVolumeController init]
  -[AVSystemVolumeController dealloc]
  -[AVSystemVolumeController .cxx_destruct]
  -[AVSystemVolumeController volume]
  -[AVSystemVolumeController setVolume:]
  -[AVSystemVolumeController EUVolumeLimit]
  -[AVSystemVolumeController currentRouteHasVolumeControl]
  -[AVSystemVolumeController sharedSystemController]
  -[AVSystemVolumeController effectiveVolumeLimit]
  -[AVSystemVolumeController setClientWithIdentifier:prefersSystemVolumeHUDHidden:forWindowSceneSessionWithIdentifier:]
  -[AVSystemVolumeController beginChangingVolumeForWindowSceneSessionID:]
  -[AVSystemVolumeController endChangingVolume]
  -[AVSystemVolumeController setTargetVolume:]
  -[AVSystemVolumeController isChangingVolume]
  -[AVSystemVolumeController _removeVolumeHUDAssertionsForClientID:]
  -[AVSystemVolumeController _windowSceneIdentifiersWithVolumeHUDAssertions]
  -[AVSystemVolumeController setSystemVolumeHUDEnabled:forWindowSceneSessionIdentifier:]
  -[AVSystemVolumeController _postNotificationForNameIfFullyInitialized:userInfo:]
  -[AVSystemVolumeController _observeSystemController]
  -[AVSystemVolumeController _unobserveSystemController]
  -[AVSystemVolumeController _handleSystemControllerServerDiedNotification]
  -[AVSystemVolumeController _handleEUVolumeLimitDidChangeNotification:]
  -[AVSystemVolumeController _handleSystemVolumeDidChangeNotification:]
  -[AVSystemVolumeController _handleCurrentRouteHasVolumeControlDidChangeNotification:]
  -[AVSystemVolumeController _applyProposedVolumeIfNeeded]
  -[AVSystemVolumeController _applyProposedVolumeImmediately]
  -[AVSystemVolumeController _performOnMainThread:]
  -[AVSystemVolumeController setChangingVolume:]
  -[AVSystemVolumeController setCurrentRouteHasVolumeControl:]
  -[AVSystemVolumeController setEUVolumeLimit:]
  -[AVSystemVolumeController isEUVolumeLimitEnabled]
  -[AVSystemVolumeController setEUVolumeLimitEnabled:]
  -[AVSystemVolumeController isEUVolumeLimitOverridden]
  -[AVSystemVolumeController setEUVolumeLimitOverridden:]
  -[AVSystemVolumeController volumeChangesThrottled]
  -[AVSystemVolumeController setVolumeChangesThrottled:]
  -[AVSystemVolumeController canOverrideEUVolumeLimit]
  -[AVSystemVolumeController setCanOverrideEUVolumeLimit:]
  -[AVSystemVolumeController targetVolumeInternal]
  -[AVSystemVolumeController setTargetVolumeInternal:]
  -[AVSystemVolumeController maximumTargetVolumeSinceChangingVolumeBegan]
  -[AVSystemVolumeController setMaximumTargetVolumeSinceChangingVolumeBegan:]
  -[AVSystemVolumeController volumeCategory]
  -[AVSystemVolumeController setSharedSystemController:]
  -[AVSystemVolumeController isFullyInitialized]
  -[AVSystemVolumeController setFullyInitialized:]


AVZoomingBehavior : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorInternal, AVBehavior>
 @property  AVZoomingBehaviorContext *behaviorContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVZoomingBehavior behaviorContextClass]

  // instance methods
  -[AVZoomingBehavior .cxx_destruct]
  -[AVZoomingBehavior willMoveToContext:]
  -[AVZoomingBehavior behaviorContext]
  -[AVZoomingBehavior setBehaviorContext:]
  -[AVZoomingBehavior didMoveToContext:]
  -[AVZoomingBehavior willRemoveFromContext:]
  -[AVZoomingBehavior didRemoveFromContext:]


AVPlayerViewControllerCustomControlsViewLayoutMarginsGuideProvidingView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
  // class methods
  +[AVPlayerViewControllerCustomControlsViewLayoutMarginsGuideProvidingView layerClass]

  // instance methods
  -[AVPlayerViewControllerCustomControlsViewLayoutMarginsGuideProvidingView intrinsicContentSize]
  -[AVPlayerViewControllerCustomControlsViewLayoutMarginsGuideProvidingView initWithFrame:]


AVPlayerViewControllerCustomControlsView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UIView *transportControlsAreaLayoutGuideProvidingView
 @property  UIView *displayModeControlsAreaLayoutGuideProvidingView
 @property  UIView *volumeControlsAreaLayoutGuideProvidingView
 @property  UIView *unobscuredTopAreaLayoutGuideProvidingView
 @property  UIView *unobscuredCenterAreaLayoutGuideProvidingView
 @property  UIView *animatedUnobscuredCenterAreaLayoutGuideProvidingView
 @property  BOOL areTransportControlsVisible
 @property  BOOL areVolumeControlsVisible
 @property  UILayoutGuide *transportControlsAreaLayoutGuide
 @property  UILayoutGuide *displayModeControlsAreaLayoutGuide
 @property  UILayoutGuide *volumeControlsAreaLayoutGuide
 @property  UILayoutGuide *unobscuredCenterAreaLayoutGuide
 @property  UILayoutGuide *animatedUnobscuredCenterAreaLayoutGuide
 @property  UILayoutGuide *unobscuredTopAreaLayoutGuide

  // class methods
  +[AVPlayerViewControllerCustomControlsView requiresConstraintBasedLayout]

  // instance methods
  -[AVPlayerViewControllerCustomControlsView .cxx_destruct]
  -[AVPlayerViewControllerCustomControlsView initWithFrame:]
  -[AVPlayerViewControllerCustomControlsView updateConstraints]
  -[AVPlayerViewControllerCustomControlsView hitTest:withEvent:]
  -[AVPlayerViewControllerCustomControlsView setAreVolumeControlsVisible:]
  -[AVPlayerViewControllerCustomControlsView setAreTransportControlsVisible:]
  -[AVPlayerViewControllerCustomControlsView transportControlsAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView displayModeControlsAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView volumeControlsAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView unobscuredCenterAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView animatedUnobscuredCenterAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView unobscuredTopAreaLayoutGuide]
  -[AVPlayerViewControllerCustomControlsView transportControlsAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView displayModeControlsAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView volumeControlsAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView unobscuredTopAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView unobscuredCenterAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView animatedUnobscuredCenterAreaLayoutGuideProvidingView]
  -[AVPlayerViewControllerCustomControlsView areTransportControlsVisible]
  -[AVPlayerViewControllerCustomControlsView areVolumeControlsVisible]


AVPlaybackControlsRoutePickerView : AVRoutePickerView <AVPlaybackControlsViewItem>
 @property  AVButton *customButton
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL removed
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVPlaybackControlsRoutePickerView .cxx_destruct]
  -[AVPlaybackControlsRoutePickerView intrinsicContentSize]
  -[AVPlaybackControlsRoutePickerView isCollapsed]
  -[AVPlaybackControlsRoutePickerView setCollapsed:]
  -[AVPlaybackControlsRoutePickerView setExtrinsicContentSize:]
  -[AVPlaybackControlsRoutePickerView extrinsicContentSize]
  -[AVPlaybackControlsRoutePickerView isRemoved]
  -[AVPlaybackControlsRoutePickerView isCollapsedOrExcluded]
  -[AVPlaybackControlsRoutePickerView setIncluded:]
  -[AVPlaybackControlsRoutePickerView setRemoved:]
  -[AVPlaybackControlsRoutePickerView isIncluded]
  -[AVPlaybackControlsRoutePickerView hasAlternateAppearance]
  -[AVPlaybackControlsRoutePickerView setHasAlternateAppearance:]
  -[AVPlaybackControlsRoutePickerView hasFullScreenAppearance]
  -[AVPlaybackControlsRoutePickerView setHasFullScreenAppearance:]
  -[AVPlaybackControlsRoutePickerView customButton]
  -[AVPlaybackControlsRoutePickerView updateButtonAppearance]


AVStyleSheet : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL shouldUseCompactFullScreenSize
 @property  UITraitCollection *traitCollection
 @property  {CGSize=dd} defaultItemInlineSize
 @property  {CGSize=dd} defaultItemFullScreenSize
 @property  double standardPadding
 @property  double standardInteritemPadding
 @property  double additionalInlinePaddingForDodgingSafeArea
 @property  {CGSize=dd} routePickerButtonInlineSize
 @property  {CGSize=dd} routePickerButtonFullScreenSize
 @property  double volumeSliderInlineWidth
 @property  double volumeSliderCompactFullScreenWidth
 @property  double volumeSliderRegularFullScreenWidth
 @property  double volumeSliderPadding
 @property  double minimumProminentPlayButtonDimension
 @property  double maximumProminentPlayButtonDimension
 @property  double maximumTransportControlsWidth
 @property  double maximumMultiRowTransportControlsWidth
 @property  double minimumTransportControlsWidth
 @property  double minimumScrubberWidth
 @property  double playButtonCenterToBottomDistance
 @property  double scrubberCenterToScrubInstructionsDistance
 @property  double elapsedTimeLabelBaselineToControlsBottomDistance
 @property  double elapsedTimeLabelTopToScrubberCenterYDistance
 @property  double scrubberCenterYToControlsTopMinimumDistance
 @property  double liveBroadcastLabelTopToBackdropTopDistance
 @property  double scrubberInstructionsTopToBackdropTopDistance
 @property  double scrubberInstructionsMinimumRequiredWidth
 @property  UIFont *infoLabelFont
 @property  UIFont *scrubberTimeLabelFont
 @property  UIFont *scrubberInfoLabelFont

  // instance methods
  -[AVStyleSheet .cxx_destruct]
  -[AVStyleSheet traitCollection]
  -[AVStyleSheet setTraitCollection:]
  -[AVStyleSheet standardPadding]
  -[AVStyleSheet initWithTraitCollection:shouldUseCompactFullScreenSize:]
  -[AVStyleSheet playbackControlsViewLayoutMarginsForView:keyboardHeight:isFullScreen:]
  -[AVStyleSheet scrubberInfoLabelFont]
  -[AVStyleSheet scrubberTimeLabelFont]
  -[AVStyleSheet infoLabelFont]
  -[AVStyleSheet _loadFontsIfNeeded]
  -[AVStyleSheet defaultItemInlineSize]
  -[AVStyleSheet defaultItemFullScreenSize]
  -[AVStyleSheet standardInteritemPadding]
  -[AVStyleSheet additionalInlinePaddingForDodgingSafeArea]
  -[AVStyleSheet routePickerButtonInlineSize]
  -[AVStyleSheet routePickerButtonFullScreenSize]
  -[AVStyleSheet volumeSliderInlineWidth]
  -[AVStyleSheet volumeSliderCompactFullScreenWidth]
  -[AVStyleSheet volumeSliderRegularFullScreenWidth]
  -[AVStyleSheet volumeSliderPadding]
  -[AVStyleSheet minimumProminentPlayButtonDimension]
  -[AVStyleSheet maximumProminentPlayButtonDimension]
  -[AVStyleSheet maximumTransportControlsWidth]
  -[AVStyleSheet maximumMultiRowTransportControlsWidth]
  -[AVStyleSheet minimumTransportControlsWidth]
  -[AVStyleSheet minimumScrubberWidth]
  -[AVStyleSheet playButtonCenterToBottomDistance]
  -[AVStyleSheet scrubberCenterToScrubInstructionsDistance]
  -[AVStyleSheet elapsedTimeLabelBaselineToControlsBottomDistance]
  -[AVStyleSheet elapsedTimeLabelTopToScrubberCenterYDistance]
  -[AVStyleSheet scrubberCenterYToControlsTopMinimumDistance]
  -[AVStyleSheet liveBroadcastLabelTopToBackdropTopDistance]
  -[AVStyleSheet scrubberInstructionsTopToBackdropTopDistance]
  -[AVStyleSheet scrubberInstructionsMinimumRequiredWidth]
  -[AVStyleSheet shouldUseCompactFullScreenSize]
  -[AVStyleSheet setShouldUseCompactFullScreenSize:]


AVEditBehavior : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorInternal, AVBehavior>
 @property  AVEditBehaviorContext *behaviorContext
 @property  <AVEditBehaviorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVEditBehavior behaviorContextClass]

  // instance methods
  -[AVEditBehavior delegate]
  -[AVEditBehavior setDelegate:]
  -[AVEditBehavior .cxx_destruct]
  -[AVEditBehavior willMoveToContext:]
  -[AVEditBehavior behaviorContext]
  -[AVEditBehavior setBehaviorContext:]
  -[AVEditBehavior didMoveToContext:]
  -[AVEditBehavior willRemoveFromContext:]
  -[AVEditBehavior didRemoveFromContext:]


AVPlayerViewController : UIViewController /System/Library/Frameworks/Foundation.framework/Foundation <AVPictureInPictureControllerDelegate, UIGestureRecognizerDelegate, UIPopoverPresentationControllerDelegate, AVPlaybackControlsVisibilityControllerDelegate, AVFullScreenViewControllerDelegate, AVTransitionControllerDelegate, AVPictureInPictureContentSource, AVContentOverlayViewDelegate>
 @property  UIView *iAdPrerollView
 @property  BOOL showsExitFullScreenButton
 @property  BOOL pictureInPicturePossible
 @property  BOOL playbackControlsShouldControlSystemVolume
 @property  BOOL pictureInPictureSuspended
 @property  BOOL pictureInPictureWasStartedWhenEnteringBackground
 @property  BOOL _inlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused
 @property  NSValue *overrideLayoutMarginsWhenEmbeddedInline
 @property  {CGAffineTransform=dddddd} overrideTransformForProminentPlayButton
 @property  BOOL canToggleVideoGravityWhenEmbeddedInline
 @property  AVPlaybackControlsVisibilityController *playbackControlsVisibilityController
 @property  AVPlaybackControlsController *playbackControlsController
 @property  AVTransitionController *_transitionController
 @property  BOOL canShowPictureInPictureButton
 @property  BOOL hasCustomPlaybackControls
 @property  BOOL canControlPlayback
 @property  UIViewController *fullScreenViewController
 @property  AVPlayerViewControllerContentView *contentView
 @property  BOOL presentingFullScreenFromInline
 @property  BOOL presentedFullScreen
 @property  BOOL hasActiveTransition
 @property  AVPresentationContext *presentationContext
 @property  long long preferredUnobscuredArea
 @property  BOOL entersFullScreenWhenTapped
 @property  long long activeContentTransitionType
 @property  BOOL contentTransitionInteractive
 @property  AVPlayer *contentTransitioningPlayer
 @property  UIView *contentTransitioningOverlayView
 @property  <AVPlayerViewControllerContentTransitioning_NewsOnly> *contentTransitioningDelegate
 @property  BOOL startNextContentTransitionButtonEnabled
 @property  BOOL startPreviousContentTransitionButtonEnabled
 @property  UIView *customContentTransitioningInfoPanel
 @property  NSArray *behaviors
 @property  AVContentOverlayView *_actualContentOverlayView
 @property  NSNumber *_defaultPlaybackRateStorage
 @property  AVFullScreenViewController *fullScreenViewController
 @property  BOOL shouldUseNetworkingResourcesForLiveStreamingWhilePaused
 @property  @? finishPreparingForInteractiveDismissalHandler
 @property  @? interactiveDismissalCompletionHandler
 @property  AVObservationController *_observationController
 @property  AVBehaviorStorage *_behaviorStorage
 @property  NSMutableDictionary *_targetVideoGravitiesForLayoutClass
 @property  BOOL _hasBegunObservation
 @property  long long _numberOfTrackedUserInteractions
 @property  UIGestureRecognizer *hoverGestureRecognizer
 @property  NSMutableDictionary *_localizedDiscoverabilityTitleForKeyCommandLocalizationKey
 @property  unsigned long overrideRouteSharingPolicy
 @property  {CGSize=dd} secondScreenConnectionDisplaySize
 @property  AVPlayerControllerVolumeAnimator *volumeAnimator
 @property  __AVPlayerLayerView *playerLayerView
 @property  BOOL readyForDisplay
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoBounds
 @property  BOOL hasPerformedInitialSetup
 @property  BOOL wasInitializedUsingWebKitSPI
 @property  NSString *overrideRoutingContextUID
 @property  BOOL requiresImmediateAssetInspection
 @property  AVPlayerController *playerController
 @property  BOOL canHidePlaybackControls
 @property  BOOL showsTimecodes
 @property  BOOL requiresLinearPlayback
 @property  BOOL allowsEnteringFullScreen
 @property  BOOL showsMinimalPlaybackControlsWhenEmbeddedInline
 @property  BOOL canPausePlaybackWhenExitingFullScreen
 @property  AVPlayerViewControllerCustomControlsView *customControlsView
 @property  BOOL playbackControlsIncludeTransportControls
 @property  BOOL playbackControlsIncludeDisplayModeControls
 @property  BOOL playbackControlsIncludeVolumeControls
 @property  {CGSize=dd} videoDisplaySize
 @property  double videoDisplayScale
 @property  BOOL volumeControlsCanShowSlider
 @property  UIViewController *viewControllerForFullScreenPresentation
 @property  NSArray *customControlItems
 @property  NSString *overrideParentApplicationDisplayIdentifier
 @property  double defaultPlaybackRate
 @property  BOOL canIncludePlaybackControlsWhenInline
 @property  BOOL pictureInPictureActive
 @property  @? playButtonHandlerForLazyPlayerLoading
 @property  AVPlayer *player
 @property  BOOL showsPlaybackControls
 @property  NSString *videoGravity
 @property  UIView *contentOverlayView
 @property  BOOL allowsPictureInPicturePlayback
 @property  BOOL updatesNowPlayingInfoCenter
 @property  BOOL entersFullScreenWhenPlaybackBegins
 @property  BOOL exitsFullScreenWhenPlaybackEnds
 @property  NSDictionary *pixelBufferAttributes
 @property  <AVPlayerViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} avkit_videoRectInWindow
 @property  BOOL avkit_isVisible
 @property  UIWindow *avkit_window

  // class methods
  +[AVPlayerViewController keyPathsForValuesAffectingVideoDisplaySize]
  +[AVPlayerViewController keyPathsForValuesAffectingPixelBufferAttributes]
  +[AVPlayerViewController keyPathsForValuesAffectingVideoGravity]
  +[AVPlayerViewController keyPathsForValuesAffectingPictureInPicturePossible]
  +[AVPlayerViewController keyPathsForValuesAffectingPictureInPictureActive]
  +[AVPlayerViewController keyPathsForValuesAffectingPictureInPictureSuspended]
  +[AVPlayerViewController keyPathsForValuesAffectingPictureInPictureWasStartedWhenEnteringBackground]

  // instance methods
  -[AVPlayerViewController dealloc]
  -[AVPlayerViewController encodeWithCoder:]
  -[AVPlayerViewController initWithCoder:]
  -[AVPlayerViewController delegate]
  -[AVPlayerViewController setDelegate:]
  -[AVPlayerViewController .cxx_destruct]
  -[AVPlayerViewController setView:]
  -[AVPlayerViewController contentView]
  -[AVPlayerViewController loadView]
  -[AVPlayerViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[AVPlayerViewController gestureRecognizer:shouldReceiveTouch:]
  -[AVPlayerViewController initWithNibName:bundle:]
  -[AVPlayerViewController viewWillAppear:]
  -[AVPlayerViewController viewDidLoad]
  -[AVPlayerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[AVPlayerViewController adaptivePresentationStyleForPresentationController:]
  -[AVPlayerViewController didMoveToParentViewController:]
  -[AVPlayerViewController viewDidAppear:]
  -[AVPlayerViewController viewDidDisappear:]
  -[AVPlayerViewController _presentationControllerForPresentedController:presentingController:sourceController:]
  -[AVPlayerViewController _requiresCustomPresentationController]
  -[AVPlayerViewController canBecomeFirstResponder]
  -[AVPlayerViewController transitioningDelegate]
  -[AVPlayerViewController prepareForPopoverPresentation:]
  -[AVPlayerViewController popoverPresentationControllerDidDismissPopover:]
  -[AVPlayerViewController preferredStatusBarStyle]
  -[AVPlayerViewController prefersHomeIndicatorAutoHidden]
  -[AVPlayerViewController preferredWhitePointAdaptivityStyle]
  -[AVPlayerViewController removeBehavior:]
  -[AVPlayerViewController addBehavior:]
  -[AVPlayerViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[AVPlayerViewController preferredInterfaceOrientationForPresentation]
  -[AVPlayerViewController _preferredModalPresentationStyle]
  -[AVPlayerViewController _transitionController]
  -[AVPlayerViewController prefersStatusBarHidden]
  -[AVPlayerViewController modalPresentationCapturesStatusBarAppearance]
  -[AVPlayerViewController keyCommands]
  -[AVPlayerViewController behaviors]
  -[AVPlayerViewController presentationContext]
  -[AVPlayerViewController isPictureInPictureActive]
  -[AVPlayerViewController isPictureInPictureActive]
  -[AVPlayerViewController _togglePictureInPicture]
  -[AVPlayerViewController player]
  -[AVPlayerViewController setPlayer:]
  -[AVPlayerViewController videoGravity]
  -[AVPlayerViewController setVideoGravity:]
  -[AVPlayerViewController togglePlayback:]
  -[AVPlayerViewController toggleMuted:]
  -[AVPlayerViewController isPictureInPicturePossible]
  -[AVPlayerViewController playerController]
  -[AVPlayerViewController setPlayerController:]
  -[AVPlayerViewController isReadyForDisplay]
  -[AVPlayerViewController setReadyForDisplay:]
  -[AVPlayerViewController pixelBufferAttributes]
  -[AVPlayerViewController setPixelBufferAttributes:]
  -[AVPlayerViewController initWithPlayerLayerView:]
  -[AVPlayerViewController setWebKitOverrideRouteSharingPolicy:routingContextUID:]
  -[AVPlayerViewController enterFullScreenAnimated:completionHandler:]
  -[AVPlayerViewController exitFullScreenAnimated:completionHandler:]
  -[AVPlayerViewController startPictureInPicture]
  -[AVPlayerViewController stopPictureInPicture]
  -[AVPlayerViewController pictureInPictureWasStartedWhenEnteringBackground]
  -[AVPlayerViewController showsPlaybackControls]
  -[AVPlayerViewController setShowsPlaybackControls:]
  -[AVPlayerViewController setAllowsPictureInPicturePlayback:]
  -[AVPlayerViewController setVideoBounds:]
  -[AVPlayerViewController defaultPlaybackRate]
  -[AVPlayerViewController setDefaultPlaybackRate:]
  -[AVPlayerViewController videoBounds]
  -[AVPlayerViewController playerLayerView]
  -[AVPlayerViewController _observationController]
  -[AVPlayerViewController setUpdatesNowPlayingInfoCenter:]
  -[AVPlayerViewController setShowsMinimalPlaybackControlsWhenEmbeddedInline:]
  -[AVPlayerViewController setCanPausePlaybackWhenExitingFullScreen:]
  -[AVPlayerViewController setAllowsEnteringFullScreen:]
  -[AVPlayerViewController setPreferredUnobscuredArea:]
  -[AVPlayerViewController setVideoGravity:forLayoutClass:]
  -[AVPlayerViewController setPlayButtonHandlerForLazyPlayerLoading:]
  -[AVPlayerViewController updatesNowPlayingInfoCenter]
  -[AVPlayerViewController showsMinimalPlaybackControlsWhenEmbeddedInline]
  -[AVPlayerViewController canPausePlaybackWhenExitingFullScreen]
  -[AVPlayerViewController allowsEnteringFullScreen]
  -[AVPlayerViewController contentOverlayView]
  -[AVPlayerViewController playButtonHandlerForLazyPlayerLoading]
  -[AVPlayerViewController preferredUnobscuredArea]
  -[AVPlayerViewController setPlayerLayerView:]
  -[AVPlayerViewController allowsPictureInPicturePlayback]
  -[AVPlayerViewController videoDisplaySize]
  -[AVPlayerViewController hasActiveTransition]
  -[AVPlayerViewController setOverrideParentApplicationDisplayIdentifier:]
  -[AVPlayerViewController setRequiresLinearPlayback:]
  -[AVPlayerViewController requiresLinearPlayback]
  -[AVPlayerViewController overrideParentApplicationDisplayIdentifier]
  -[AVPlayerViewController avkit_isEffectivelyFullScreen]
  -[AVPlayerViewController contentOverlayViewDidAddOrRemoveSubview:]
  -[AVPlayerViewController avkit_makePlayerControllerIfNeeded:]
  -[AVPlayerViewController avkit_pictureInPictureViewController]
  -[AVPlayerViewController avkit_startRoutingVideoToPictureInPictureViewController:]
  -[AVPlayerViewController avkit_stopRoutingVideoToPictureInPictureViewController:]
  -[AVPlayerViewController avkit_videoRectInWindow]
  -[AVPlayerViewController avkit_isVisible]
  -[AVPlayerViewController avkit_window]
  -[AVPlayerViewController transitionController:willBeginPresentingViewController:]
  -[AVPlayerViewController transitionController:willBeginDismissingViewController:]
  -[AVPlayerViewController transitionController:targetViewForDismissingViewController:]
  -[AVPlayerViewController transitionController:gestureRecognizer:shouldReceiveTouch:]
  -[AVPlayerViewController transitionControllerPresentedViewBackgroundColor:]
  -[AVPlayerViewController transitionControllerBackgroundViewBackgroundColor:]
  -[AVPlayerViewController transitionControllerCanBeginInteractiveDismissalTransition:]
  -[AVPlayerViewController transitionControllerCanBeginInteractivePresentationTransition:]
  -[AVPlayerViewController transitionControllerBeginInteractivePresentationTransition:]
  -[AVPlayerViewController transitionControllerBeginInteractiveDismissalTransition:]
  -[AVPlayerViewController transitionController:prepareForFinishingInteractiveTransition:]
  -[AVPlayerViewController transitionController:transitionWillComplete:]
  -[AVPlayerViewController transitionController:animationProgressDidChange:]
  -[AVPlayerViewController fullScreenViewControllerWillBeginFullScreenPresentation:]
  -[AVPlayerViewController fullScreenViewControllerWillEndFullScreenPresentation:]
  -[AVPlayerViewController viewForFullScreenViewController:]
  -[AVPlayerViewController playbackContainerViewForFullScreenViewController:]
  -[AVPlayerViewController fullScreenViewController:viewWillTransitionToSize:coordinator:]
  -[AVPlayerViewController prefersStatusBarHiddenForFullScreenViewController:]
  -[AVPlayerViewController preferredStatusStyleForFullScreenViewController:]
  -[AVPlayerViewController keyCommandResponderForFullScreenViewController:]
  -[AVPlayerViewController playbackControlsVisibilityController:updateStatusBarAppearanceUsingAnimator:]
  -[AVPlayerViewController playbackControlsVisibilityController:animateAlongsideVisibilityAnimationsWithAnimationCoordinator:appearingViews:disappearingViews:]
  -[AVPlayerViewController pictureInPictureControllerWillStartPictureInPicture:]
  -[AVPlayerViewController pictureInPictureControllerDidStartPictureInPicture:]
  -[AVPlayerViewController pictureInPictureController:failedToStartPictureInPictureWithError:]
  -[AVPlayerViewController pictureInPictureControllerWillStopPictureInPicture:]
  -[AVPlayerViewController pictureInPictureControllerDidStopPictureInPicture:]
  -[AVPlayerViewController pictureInPictureController:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:]
  -[AVPlayerViewController setRequiresImmediateAssetInspection:]
  -[AVPlayerViewController setCanIncludePlaybackControlsWhenInline:]
  -[AVPlayerViewController _targetVideoGravitiesForLayoutClass]
  -[AVPlayerViewController updateVideoBounds]
  -[AVPlayerViewController videoDisplayScale]
  -[AVPlayerViewController setShowsTimecodes:]
  -[AVPlayerViewController interactiveContentOverlayView]
  -[AVPlayerViewController customControlsView]
  -[AVPlayerViewController hasCustomPlaybackControls]
  -[AVPlayerViewController canControlPlayback]
  -[AVPlayerViewController canHidePlaybackControls]
  -[AVPlayerViewController setCanHidePlaybackControls:]
  -[AVPlayerViewController _inlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused]
  -[AVPlayerViewController _setInlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused:]
  -[AVPlayerViewController playbackControlsIncludeTransportControls]
  -[AVPlayerViewController setPlaybackControlsIncludeTransportControls:]
  -[AVPlayerViewController playbackControlsIncludeDisplayModeControls]
  -[AVPlayerViewController setPlaybackControlsIncludeDisplayModeControls:]
  -[AVPlayerViewController playbackControlsIncludeVolumeControlsControls]
  -[AVPlayerViewController setPlaybackControlsIncludeVolumeControls:]
  -[AVPlayerViewController volumeControlsCanShowSlider]
  -[AVPlayerViewController setVolumeControlsCanShowSlider:]
  -[AVPlayerViewController setEntersFullScreenWhenPlaybackBegins:]
  -[AVPlayerViewController flashPlaybackControlsWithDuration:]
  -[AVPlayerViewController setShouldUseNetworkingResourcesForLiveStreamingWhilePaused:]
  -[AVPlayerViewController setCustomControlItems:]
  -[AVPlayerViewController _activeViewControllerForContentView]
  -[AVPlayerViewController viewControllerForFullScreenPresentation]
  -[AVPlayerViewController _ensureBehaviorStorage]
  -[AVPlayerViewController performInitialSetupIfNeededAndPossible]
  -[AVPlayerViewController performInitialSetup]
  -[AVPlayerViewController _handleExitFullScreenKeyCommand:]
  -[AVPlayerViewController _handlePlayPauseKeyCommand:]
  -[AVPlayerViewController _handleSkipBack15SecondsKeyCommand:]
  -[AVPlayerViewController _handleSkipAhead15SecondsKeyCommand:]
  -[AVPlayerViewController _handleShowNextFrameKeyCommand:]
  -[AVPlayerViewController _handleGoToBeginningKeyCommand:]
  -[AVPlayerViewController _handleShowPreviousFrameKeyCommand:]
  -[AVPlayerViewController _handleVolumeUpKeyPressedCommand:]
  -[AVPlayerViewController _handleVolumeUpKeyReleasedCommand:]
  -[AVPlayerViewController _handleVolumeDownKeyPressedCommand:]
  -[AVPlayerViewController _handleVolumeDownKeyReleasedCommand:]
  -[AVPlayerViewController _handleRewindKeyPressedCommand:]
  -[AVPlayerViewController _handleRewindKeyReleasedCommand:]
  -[AVPlayerViewController _handleFastForwardKeyPressedCommand:]
  -[AVPlayerViewController _handleFastForwardKeyReleasedCommand:]
  -[AVPlayerViewController _addObservers]
  -[AVPlayerViewController _isUnsupportedContent]
  -[AVPlayerViewController _updateUnsupportedContentIndicatorView]
  -[AVPlayerViewController _isAudioOnlyContent]
  -[AVPlayerViewController _updateAudioOnlyIndicatorView]
  -[AVPlayerViewController _updateExternalPlaybackIndicatorView]
  -[AVPlayerViewController _updatePlaybackControlsController]
  -[AVPlayerViewController _shouldShowPictureInPictureButton]
  -[AVPlayerViewController _handleDoubleTapGesture:]
  -[AVPlayerViewController _handleSingleTapGesture:]
  -[AVPlayerViewController _handleDoubleDoubleTapGesture:]
  -[AVPlayerViewController _handleUserInteractionObservationRecognizer:]
  -[AVPlayerViewController _beginTrackingUserInteraction]
  -[AVPlayerViewController _endTrackingUserInteraction]
  -[AVPlayerViewController _isTrackingUserInteraction]
  -[AVPlayerViewController _isTrackingUserInteractionWithInteractiveView]
  -[AVPlayerViewController _mediaSelectionDoneButtonTapped:]
  -[AVPlayerViewController _notifyOfMetricsCollectionEvent:]
  -[AVPlayerViewController _delegateRespondsTo:]
  -[AVPlayerViewController _contentViewWillTransitionToSize:withTransitionCoordinator:]
  -[AVPlayerViewController _handleHoverGestureRecognizer:]
  -[AVPlayerViewController _loadObservationControllerIfNeeded]
  -[AVPlayerViewController _updateContentOverlayViewSuperview]
  -[AVPlayerViewController showFullScreenPresentationFromView:completion:]
  -[AVPlayerViewController enterFullScreenWithCompletion:]
  -[AVPlayerViewController exitFullScreenWithCompletion:]
  -[AVPlayerViewController fullScreenViewController]
  -[AVPlayerViewController _transitionControllerIfLoaded]
  -[AVPlayerViewController _avkitPreferredTransitioningDelegate]
  -[AVPlayerViewController _isDescendantOfRootViewController]
  -[AVPlayerViewController _transitionFromFullScreenWithReason:animated:completionHandler:]
  -[AVPlayerViewController _canEnterFullScreen]
  -[AVPlayerViewController _transitionToFullScreenAnimated:interactive:completionHandler:]
  -[AVPlayerViewController _transitionFromFullScreenAnimated:completionHandler:]
  -[AVPlayerViewController _transitionFromFullScreenAnimated:interactive:completionHandler:]
  -[AVPlayerViewController _isTransitioningToOrFromFullScreen]
  -[AVPlayerViewController _modalPresentationStyleIsFullScreen]
  -[AVPlayerViewController entersFullScreenWhenPlaybackBegins]
  -[AVPlayerViewController exitsFullScreenWhenPlaybackEnds]
  -[AVPlayerViewController setExitsFullScreenWhenPlaybackEnds:]
  -[AVPlayerViewController _actualContentOverlayView]
  -[AVPlayerViewController _defaultPlaybackRateStorage]
  -[AVPlayerViewController set_defaultPlaybackRateStorage:]
  -[AVPlayerViewController shouldUseNetworkingResourcesForLiveStreamingWhilePaused]
  -[AVPlayerViewController finishPreparingForInteractiveDismissalHandler]
  -[AVPlayerViewController setFinishPreparingForInteractiveDismissalHandler:]
  -[AVPlayerViewController interactiveDismissalCompletionHandler]
  -[AVPlayerViewController setInteractiveDismissalCompletionHandler:]
  -[AVPlayerViewController _behaviorStorage]
  -[AVPlayerViewController _hasBegunObservation]
  -[AVPlayerViewController set_hasBegunObservation:]
  -[AVPlayerViewController _numberOfTrackedUserInteractions]
  -[AVPlayerViewController _setNumberOfTrackedUserInteractions:]
  -[AVPlayerViewController hoverGestureRecognizer]
  -[AVPlayerViewController setHoverGestureRecognizer:]
  -[AVPlayerViewController _localizedDiscoverabilityTitleForKeyCommandLocalizationKey]
  -[AVPlayerViewController overrideRouteSharingPolicy]
  -[AVPlayerViewController setOverrideRouteSharingPolicy:]
  -[AVPlayerViewController secondScreenConnectionDisplaySize]
  -[AVPlayerViewController setSecondScreenConnectionDisplaySize:]
  -[AVPlayerViewController volumeAnimator]
  -[AVPlayerViewController setVolumeAnimator:]
  -[AVPlayerViewController hasPerformedInitialSetup]
  -[AVPlayerViewController setHasPerformedInitialSetup:]
  -[AVPlayerViewController wasInitializedUsingWebKitSPI]
  -[AVPlayerViewController setWasInitializedUsingWebKitSPI:]
  -[AVPlayerViewController overrideRoutingContextUID]
  -[AVPlayerViewController setOverrideRoutingContextUID:]
  -[AVPlayerViewController requiresImmediateAssetInspection]
  -[AVPlayerViewController showsTimecodes]
  -[AVPlayerViewController playbackControlsIncludeVolumeControls]
  -[AVPlayerViewController customControlItems]
  -[AVPlayerViewController canIncludePlaybackControlsWhenInline]
  -[AVPlayerViewController playbackControlsController]
  -[AVPlayerViewController playbackControlsVisibilityController]
  -[AVPlayerViewController isPresentingFullScreenFromInline]
  -[AVPlayerViewController entersFullScreenWhenTapped]
  -[AVPlayerViewController isPresentedFullScreen]
  -[AVPlayerViewController canToggleVideoGravityWhenEmbeddedInline]
  -[AVPlayerViewController canShowPictureInPictureButton]
  -[AVPlayerViewController doneButtonTapped:]
  -[AVPlayerViewController iAdPrerollView]
  -[AVPlayerViewController setPlaybackControlsShouldControlSystemVolume:]
  -[AVPlayerViewController isPictureInPictureSuspended]
  -[AVPlayerViewController showsExitFullScreenButton]
  -[AVPlayerViewController setShowsExitFullScreenButton:]
  -[AVPlayerViewController playbackControlsShouldControlSystemVolume]
  -[AVPlayerViewController setOverrideTransformForProminentPlayButton:]
  -[AVPlayerViewController setOverrideLayoutMarginsWhenEmbeddedInline:]
  -[AVPlayerViewController overrideTransformForProminentPlayButton]
  -[AVPlayerViewController overrideLayoutMarginsWhenEmbeddedInline]
  -[AVPlayerViewController setCanToggleVideoGravityWhenEmbeddedInline:]
  -[AVPlayerViewController setCanShowPictureInPictureButton:]
  -[AVPlayerViewController activeContentViewDidChange]
  -[AVPlayerViewController videoGravityButtonTapped:]
  -[AVPlayerViewController mediaSelectionButtonTapped:]
  -[AVPlayerViewController fullScreenButtonTapped:]
  -[AVPlayerViewController pictureInPictureButtonTapped:]
  -[AVPlayerViewController prepareForFinishingInteractiveTransition:]
  -[AVPlayerViewController enterAutoplayPhase]
  -[AVPlayerViewController exitAutoplayPhase]
  -[AVPlayerViewController flashAutoplayControls]
  -[AVPlayerViewController setEntersFullScreenWhenTapped:]
  -[AVPlayerViewController contentTransitioningDelegate]
  -[AVPlayerViewController setContentTransitioningDelegate:]
  -[AVPlayerViewController setVideoGravityForTransitioningContent:]
  -[AVPlayerViewController startContentTransition:]
  -[AVPlayerViewController contentTransitioningOverlayView]
  -[AVPlayerViewController activeContentTransitionType]
  -[AVPlayerViewController isContentTransitionInteractive]
  -[AVPlayerViewController setStartNextContentTransitionButtonEnabled:]
  -[AVPlayerViewController setStartPreviousContentTransitionButtonEnabled:]
  -[AVPlayerViewController setCustomContentTransitioningInfoPanel:]
  -[AVPlayerViewController contentTransitioningPlayer]
  -[AVPlayerViewController isStartNextContentTransitionButtonEnabled]
  -[AVPlayerViewController isStartPreviousContentTransitionButtonEnabled]
  -[AVPlayerViewController customContentTransitioningInfoPanel]
  -[AVPlayerViewController _newsWidgetPlayerBehaviorContext]
  -[AVPlayerViewController _newsWidgetPlayerLegacyBehavior]


AVEditBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorContextInternal, AVPlayerViewControllerBehaviorContext, AVEditViewDataSource, AVEditViewDelegate, AVBehaviorContext>
 @property  AVEditBehavior *behavior
 @property  AVZoomingBehavior *zoomingBehavior
 @property  AVObservationController *observationController
 @property  AVEditView *editView
 @property  BOOL editing
 @property  AVAssetImageGenerator *imageGenerator
 @property  AVPlayerController *playerController
 @property  id playerTimeObserver
 @property  UIView *containerView
 @property  UIToolbar *toolbar
 @property  UIBarButtonItem *cancelButton
 @property  UIBarButtonItem *doneButton
 @property  UIBarButtonItem *flexibleSpaceItem
 @property  UIBarButtonItem *playButton
 @property  UIBarButtonItem *pauseButton
 @property  NSMutableArray *pendingImageRequests
 @property  NSMutableDictionary *requestedImageTimeToCMTimeMap
 @property  unsigned long currentRotation
 @property  {CGAffineTransform=dddddd} rotationTransform
 @property  AVEditBehaviorParameters *parameters
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVEditBehaviorContext dealloc]
  -[AVEditBehaviorContext endEditing]
  -[AVEditBehaviorContext .cxx_destruct]
  -[AVEditBehaviorContext parameters]
  -[AVEditBehaviorContext containerView]
  -[AVEditBehaviorContext setContainerView:]
  -[AVEditBehaviorContext cancelButton]
  -[AVEditBehaviorContext setCancelButton:]
  -[AVEditBehaviorContext isEditing]
  -[AVEditBehaviorContext toolbar]
  -[AVEditBehaviorContext setEditing:]
  -[AVEditBehaviorContext setToolbar:]
  -[AVEditBehaviorContext done:]
  -[AVEditBehaviorContext setDoneButton:]
  -[AVEditBehaviorContext doneButton]
  -[AVEditBehaviorContext behavior]
  -[AVEditBehaviorContext setBehavior:]
  -[AVEditBehaviorContext play:]
  -[AVEditBehaviorContext pause:]
  -[AVEditBehaviorContext playerController]
  -[AVEditBehaviorContext setPlayerController:]
  -[AVEditBehaviorContext rotateClockwise]
  -[AVEditBehaviorContext cancel:]
  -[AVEditBehaviorContext imageGenerator]
  -[AVEditBehaviorContext setImageGenerator:]
  -[AVEditBehaviorContext playerViewController]
  -[AVEditBehaviorContext observationController]
  -[AVEditBehaviorContext contentViewWillTransitionToSize:withCoordinator:]
  -[AVEditBehaviorContext initWithAVKitOwner:]
  -[AVEditBehaviorContext willAddBehavior:]
  -[AVEditBehaviorContext didAddBehavior:]
  -[AVEditBehaviorContext willRemoveBehavior:]
  -[AVEditBehaviorContext didRemoveBehavior:]
  -[AVEditBehaviorContext editViewDidBeginScrubbing:]
  -[AVEditBehaviorContext editViewDidEndScrubbing:]
  -[AVEditBehaviorContext editView:currentTimeDidChange:]
  -[AVEditBehaviorContext editView:trimStartTimeDidChange:]
  -[AVEditBehaviorContext editView:trimEndTimeDidChange:]
  -[AVEditBehaviorContext editViewWillBeginRequestingThumbnails:]
  -[AVEditBehaviorContext editViewDidFinishRequestingThumbnails:]
  -[AVEditBehaviorContext editViewDuration:]
  -[AVEditBehaviorContext editViewThumbnailAspectRatio:]
  -[AVEditBehaviorContext editView:requestThumbnailImageForTimestamp:]
  -[AVEditBehaviorContext startEditing]
  -[AVEditBehaviorContext videoCompostitionRotatingAsset:]
  -[AVEditBehaviorContext _generateThumbnails]
  -[AVEditBehaviorContext _makeBarButtonItems]
  -[AVEditBehaviorContext rotationTransform]
  -[AVEditBehaviorContext setRotationTransform:]
  -[AVEditBehaviorContext zoomingBehavior]
  -[AVEditBehaviorContext setZoomingBehavior:]
  -[AVEditBehaviorContext setObservationController:]
  -[AVEditBehaviorContext editView]
  -[AVEditBehaviorContext setEditView:]
  -[AVEditBehaviorContext playerTimeObserver]
  -[AVEditBehaviorContext setPlayerTimeObserver:]
  -[AVEditBehaviorContext flexibleSpaceItem]
  -[AVEditBehaviorContext setFlexibleSpaceItem:]
  -[AVEditBehaviorContext playButton]
  -[AVEditBehaviorContext setPlayButton:]
  -[AVEditBehaviorContext pauseButton]
  -[AVEditBehaviorContext setPauseButton:]
  -[AVEditBehaviorContext pendingImageRequests]
  -[AVEditBehaviorContext requestedImageTimeToCMTimeMap]
  -[AVEditBehaviorContext currentRotation]
  -[AVEditBehaviorContext setCurrentRotation:]


AVFullScreenViewController : UIViewController /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UIView *contentView
 @property  <AVFullScreenViewControllerDelegate> *delegate
 @property  AVFullScreenViewController *associatedFullScreenViewController
 @property  AVFullScreenViewController *sourceFullScreenViewController

  // instance methods
  -[AVFullScreenViewController delegate]
  -[AVFullScreenViewController setDelegate:]
  -[AVFullScreenViewController .cxx_destruct]
  -[AVFullScreenViewController contentView]
  -[AVFullScreenViewController setContentView:]
  -[AVFullScreenViewController loadView]
  -[AVFullScreenViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[AVFullScreenViewController supportedInterfaceOrientations]
  -[AVFullScreenViewController viewDidAppear:]
  -[AVFullScreenViewController shouldAutorotate]
  -[AVFullScreenViewController _presentationControllerForPresentedController:presentingController:sourceController:]
  -[AVFullScreenViewController _requiresCustomPresentationController]
  -[AVFullScreenViewController canBecomeFirstResponder]
  -[AVFullScreenViewController preferredStatusBarStyle]
  -[AVFullScreenViewController prefersHomeIndicatorAutoHidden]
  -[AVFullScreenViewController preferredWhitePointAdaptivityStyle]
  -[AVFullScreenViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[AVFullScreenViewController preferredInterfaceOrientationForPresentation]
  -[AVFullScreenViewController prefersStatusBarHidden]
  -[AVFullScreenViewController modalPresentationCapturesStatusBarAppearance]
  -[AVFullScreenViewController keyCommands]
  -[AVFullScreenViewController viewWillMoveToWindow:]
  -[AVFullScreenViewController targetForAction:withSender:]
  -[AVFullScreenViewController avkit_isEffectivelyFullScreen]
  -[AVFullScreenViewController attachContentView]
  -[AVFullScreenViewController associatedFullScreenViewController]
  -[AVFullScreenViewController setAssociatedFullScreenViewController:]
  -[AVFullScreenViewController sourceFullScreenViewController]
  -[AVFullScreenViewController setSourceFullScreenViewController:]


AVExternalGestureRecognizerPreventer : UIGestureRecognizer /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVExternalGestureRecognizerPreventer initWithTarget:action:]
  -[AVExternalGestureRecognizerPreventer touchesBegan:withEvent:]
  -[AVExternalGestureRecognizerPreventer touchesMoved:withEvent:]
  -[AVExternalGestureRecognizerPreventer touchesEnded:withEvent:]
  -[AVExternalGestureRecognizerPreventer touchesCancelled:withEvent:]
  -[AVExternalGestureRecognizerPreventer canPreventGestureRecognizer:]
  -[AVExternalGestureRecognizerPreventer canBePreventedByGestureRecognizer:]
  -[AVExternalGestureRecognizerPreventer shouldBeRequiredToFailByGestureRecognizer:]
  -[AVExternalGestureRecognizerPreventer touchesEstimatedPropertiesUpdated:]
  -[AVExternalGestureRecognizerPreventer shouldRequireFailureOfGestureRecognizer:]


AVPictureInPictureViewController : UIViewController /System/Library/Frameworks/Foundation.framework/Foundation <PGPictureInPictureViewController>
 @property  AVPlayerController *playerController
 @property  AVPictureInPicturePlayerLayerView *pictureInPicturePlayerLayerView
 @property  BOOL shouldShowAlternateActionButtonImage
 @property  <AVPictureInPictureViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL shouldShowLoadingIndicator

  // class methods
  +[AVPictureInPictureViewController keyPathsForValuesAffectingShouldShowLoadingIndicator]

  // instance methods
  -[AVPictureInPictureViewController init]
  -[AVPictureInPictureViewController dealloc]
  -[AVPictureInPictureViewController initWithCoder:]
  -[AVPictureInPictureViewController delegate]
  -[AVPictureInPictureViewController setDelegate:]
  -[AVPictureInPictureViewController .cxx_destruct]
  -[AVPictureInPictureViewController loadView]
  -[AVPictureInPictureViewController initWithNibName:bundle:]
  -[AVPictureInPictureViewController playerController]
  -[AVPictureInPictureViewController setPlayerController:]
  -[AVPictureInPictureViewController pictureInPicturePlayerLayerView]
  -[AVPictureInPictureViewController willAnimatePictureInPictureStart]
  -[AVPictureInPictureViewController didAnimatePictureInPictureStop]
  -[AVPictureInPictureViewController actionButtonTapped]
  -[AVPictureInPictureViewController shouldShowAlternateActionButtonImage]
  -[AVPictureInPictureViewController shouldShowLoadingIndicator]
  -[AVPictureInPictureViewController initWithPictureInPicturePlayerLayerView:]
  -[AVPictureInPictureViewController setShouldShowAlternateActionButtonImage:]


AVExternalPlaybackIndicatorView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVExternalPlaybackIndicatorView .cxx_destruct]
  -[AVExternalPlaybackIndicatorView initWithFrame:]
  -[AVExternalPlaybackIndicatorView layoutSubviews]
  -[AVExternalPlaybackIndicatorView setTitleString:subtitleString:]


AVValueTiming : NSObject /usr/lib/libSystem.B.dylib <NSCoding, NSCopying, NSMutableCopying>
 @property  double currentValue
 @property  double anchorValue
 @property  double anchorTimeStamp
 @property  double rate

  // class methods
  +[AVValueTiming allocWithZone:]
  +[AVValueTiming valueTimingWithAnchorValue:anchorTimeStamp:rate:]
  +[AVValueTiming currentTimeStamp]

  // instance methods
  -[AVValueTiming isEqual:]
  -[AVValueTiming copyWithZone:]
  -[AVValueTiming mutableCopyWithZone:]
  -[AVValueTiming encodeWithCoder:]
  -[AVValueTiming initWithCoder:]
  -[AVValueTiming classForCoder]
  -[AVValueTiming rate]
  -[AVValueTiming currentValue]
  -[AVValueTiming valueForTimeStamp:]
  -[AVValueTiming _timing]
  -[AVValueTiming anchorValue]
  -[AVValueTiming anchorTimeStamp]
  -[AVValueTiming initWithAnchorValue:anchorTimeStamp:rate:]
  -[AVValueTiming initWithValueTiming:]
  -[AVValueTiming isEqualToValueTiming:]
  -[AVValueTiming timeStampForValue:]


AVMutableValueTiming : AVValueTiming
 @property  double anchorValue
 @property  double anchorTimeStamp
 @property  double rate

  // class methods
  +[AVMutableValueTiming allocWithZone:]

  // instance methods
  -[AVMutableValueTiming classForCoder]
  -[AVMutableValueTiming setRate:]
  -[AVMutableValueTiming setAnchorValue:]
  -[AVMutableValueTiming setAnchorTimeStamp:]
  -[AVMutableValueTiming setValueTiming:]


AVConcreteValueTiming : AVValueTiming
  // instance methods
  -[AVConcreteValueTiming copyWithZone:]
  -[AVConcreteValueTiming rate]
  -[AVConcreteValueTiming _timing]
  -[AVConcreteValueTiming anchorValue]
  -[AVConcreteValueTiming anchorTimeStamp]
  -[AVConcreteValueTiming initWithAnchorValue:anchorTimeStamp:rate:]


AVConcreteMutableValueTiming : AVMutableValueTiming
  // instance methods
  -[AVConcreteMutableValueTiming setRate:]
  -[AVConcreteMutableValueTiming rate]
  -[AVConcreteMutableValueTiming _timing]
  -[AVConcreteMutableValueTiming anchorValue]
  -[AVConcreteMutableValueTiming anchorTimeStamp]
  -[AVConcreteMutableValueTiming initWithAnchorValue:anchorTimeStamp:rate:]
  -[AVConcreteMutableValueTiming setAnchorValue:]
  -[AVConcreteMutableValueTiming setAnchorTimeStamp:]


AVSecondScreenDebugAssistant : NSObject /usr/lib/libSystem.B.dylib
 @property  CADisplay *debugInfoDisplay
 @property  AVObservationController *observationController
 @property  AVPlayer *player
 @property  UIScene *scene
 @property  NSString *debugText
 @property  AVSecondScreenViewController *secondScreenViewController

  // instance methods
  -[AVSecondScreenDebugAssistant init]
  -[AVSecondScreenDebugAssistant dealloc]
  -[AVSecondScreenDebugAssistant .cxx_destruct]
  -[AVSecondScreenDebugAssistant scene]
  -[AVSecondScreenDebugAssistant setScene:]
  -[AVSecondScreenDebugAssistant player]
  -[AVSecondScreenDebugAssistant setPlayer:]
  -[AVSecondScreenDebugAssistant observationController]
  -[AVSecondScreenDebugAssistant debugInfoDisplay]
  -[AVSecondScreenDebugAssistant setDebugInfoDisplay:]
  -[AVSecondScreenDebugAssistant setObservationController:]
  -[AVSecondScreenDebugAssistant setDebugText:]
  -[AVSecondScreenDebugAssistant setSecondScreenViewController:]
  -[AVSecondScreenDebugAssistant _currentEnabledVideoTrack]
  -[AVSecondScreenDebugAssistant _currentDisplay]
  -[AVSecondScreenDebugAssistant _currentVideoDynamicRange]
  -[AVSecondScreenDebugAssistant _updateDebugLabelText]
  -[AVSecondScreenDebugAssistant _actuallyUpdateDebugLabelTextWithCurrentResolution:currentVideoDynamicRange:]
  -[AVSecondScreenDebugAssistant debugText]
  -[AVSecondScreenDebugAssistant secondScreenViewController]


AVPresentationController : UIPresentationController /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVObservationController *observationController
 @property  UIWindow *presentationWindowForDisablingAutorotation
 @property  AVPresentationContext *context

  // instance methods
  -[AVPresentationController dealloc]
  -[AVPresentationController .cxx_destruct]
  -[AVPresentationController context]
  -[AVPresentationController initWithPresentedViewController:presentingViewController:]
  -[AVPresentationController containerViewWillLayoutSubviews]
  -[AVPresentationController shouldPresentInFullscreen]
  -[AVPresentationController presentationTransitionWillBegin]
  -[AVPresentationController dismissalTransitionWillBegin]
  -[AVPresentationController dismissalTransitionDidEnd:]
  -[AVPresentationController presentationTransitionDidEnd:]
  -[AVPresentationController shouldRemovePresentersView]
  -[AVPresentationController observationController]
  -[AVPresentationController _ensureOrientation:enablingMixedOrientations:]
  -[AVPresentationController _prepareDismissingTransitionContext]
  -[AVPresentationController _observeSceneDidBecomeActiveForRestoringRotatability]
  -[AVPresentationController presentationWindowForDisablingAutorotation]
  -[AVPresentationController setPresentationWindowForDisablingAutorotation:]


AVObservationController : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[AVObservationController dealloc]
  -[AVObservationController .cxx_destruct]
  -[AVObservationController initWithOwner:]
  -[AVObservationController stopObserving:]
  -[AVObservationController startObserving:keyPaths:includeInitialValue:includeChanges:observationHandler:]
  -[AVObservationController startObserving:keyPath:includeInitialValue:observationHandler:]
  -[AVObservationController startObserving:keyPaths:observationHandler:]
  -[AVObservationController startObserving:keyPath:observationHandler:]
  -[AVObservationController startObserving:keyPaths:includeInitialValue:observationHandler:]
  -[AVObservationController startObservingNotificationForName:object:notificationCenter:observationHandler:]
  -[AVObservationController stopAllObservation]
  -[AVObservationController _stopAllObservation]


AVProxyKVOObserver : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *token
 @property  BOOL includeInitialValue
 @property  BOOL includeChanges
 @property  NSSet *keyPaths
 @property  @? changesBlock

  // instance methods
  -[AVProxyKVOObserver token]
  -[AVProxyKVOObserver .cxx_destruct]
  -[AVProxyKVOObserver observeValueForKeyPath:ofObject:change:context:]
  -[AVProxyKVOObserver stopObserving]
  -[AVProxyKVOObserver keyPaths]
  -[AVProxyKVOObserver startObserving:completion:]
  -[AVProxyKVOObserver initWithObservedObject:observer:keyPaths:retainingObservedObject:includeInitialValue:includeChanges:changesBlock:]
  -[AVProxyKVOObserver _handleValueChangeForKeyPath:ofObject:oldValue:newValue:context:]
  -[AVProxyKVOObserver includeInitialValue]
  -[AVProxyKVOObserver includeChanges]
  -[AVProxyKVOObserver changesBlock]


AVKeyValueChange : NSObject /usr/lib/libSystem.B.dylib
 @property  id value
 @property  id oldValue
 @property  NSString *keyPath
 @property  id observationToken

  // instance methods
  -[AVKeyValueChange .cxx_destruct]
  -[AVKeyValueChange value]
  -[AVKeyValueChange keyPath]
  -[AVKeyValueChange oldValue]
  -[AVKeyValueChange initWithValue:oldValue:keyPath:observationToken:]
  -[AVKeyValueChange observationToken]


AVHomeIPCameraBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVPlayerViewControllerBehaviorContext, AVBehaviorContextInternal, AVBehaviorContext, AVScrubbing>
 @property  AVHomeIPCameraBehavior *behavior
 @property  AVZoomingBehavior *zoomingBehavior
 @property  AVHomeIPCameraPlayerController *livePreviewPlayerController
 @property  AVPlayerController *playerControllerToRestore
 @property  AVObservationController *observationController
 @property  BOOL playbackControlsShowsLoadingIndicator
 @property  BOOL playbackControlsIncludeTransportControls
 @property  BOOL playbackControlsIncludeDisplayModeControls
 @property  BOOL playbackControlsIncludeVolumeControls
 @property  BOOL zoomingEnabled
 @property  BOOL microphoneEnabled
 @property  UIView *livePreviewContainerView
 @property  BOOL livePreviewActive
 @property  {CGSize=dd} livePreviewAspectRatio
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVHomeIPCameraBehaviorContext dealloc]
  -[AVHomeIPCameraBehaviorContext .cxx_destruct]
  -[AVHomeIPCameraBehaviorContext viewDidLoad]
  -[AVHomeIPCameraBehaviorContext behavior]
  -[AVHomeIPCameraBehaviorContext setBehavior:]
  -[AVHomeIPCameraBehaviorContext beginScrubbing]
  -[AVHomeIPCameraBehaviorContext endScrubbing]
  -[AVHomeIPCameraBehaviorContext playerViewController]
  -[AVHomeIPCameraBehaviorContext observationController]
  -[AVHomeIPCameraBehaviorContext willStartPictureInPictureWithViewController:]
  -[AVHomeIPCameraBehaviorContext didStopPictureInPicture]
  -[AVHomeIPCameraBehaviorContext initWithAVKitOwner:]
  -[AVHomeIPCameraBehaviorContext willAddBehavior:]
  -[AVHomeIPCameraBehaviorContext didAddBehavior:]
  -[AVHomeIPCameraBehaviorContext willRemoveBehavior:]
  -[AVHomeIPCameraBehaviorContext didRemoveBehavior:]
  -[AVHomeIPCameraBehaviorContext playbackControlsIncludeTransportControls]
  -[AVHomeIPCameraBehaviorContext setPlaybackControlsIncludeTransportControls:]
  -[AVHomeIPCameraBehaviorContext playbackControlsIncludeDisplayModeControls]
  -[AVHomeIPCameraBehaviorContext setPlaybackControlsIncludeDisplayModeControls:]
  -[AVHomeIPCameraBehaviorContext setPlaybackControlsIncludeVolumeControls:]
  -[AVHomeIPCameraBehaviorContext playbackControlsIncludeVolumeControls]
  -[AVHomeIPCameraBehaviorContext zoomingBehavior]
  -[AVHomeIPCameraBehaviorContext setZoomingBehavior:]
  -[AVHomeIPCameraBehaviorContext setObservationController:]
  -[AVHomeIPCameraBehaviorContext scrubToTime:resolution:]
  -[AVHomeIPCameraBehaviorContext setZoomingEnabled:]
  -[AVHomeIPCameraBehaviorContext setLivePreviewActive:]
  -[AVHomeIPCameraBehaviorContext setMicrophoneEnabled:]
  -[AVHomeIPCameraBehaviorContext setLivePreviewAspectRatio:]
  -[AVHomeIPCameraBehaviorContext setBackgroundColor:forContainerOfControlItem:]
  -[AVHomeIPCameraBehaviorContext _updatePlaybackControlsControllerAndZoomingBehavior]
  -[AVHomeIPCameraBehaviorContext isZoomingEnabled]
  -[AVHomeIPCameraBehaviorContext isMicrophoneEnabled]
  -[AVHomeIPCameraBehaviorContext livePreviewContainerView]
  -[AVHomeIPCameraBehaviorContext isLivePreviewActive]
  -[AVHomeIPCameraBehaviorContext livePreviewAspectRatio]
  -[AVHomeIPCameraBehaviorContext livePreviewPlayerController]
  -[AVHomeIPCameraBehaviorContext setLivePreviewPlayerController:]
  -[AVHomeIPCameraBehaviorContext playerControllerToRestore]
  -[AVHomeIPCameraBehaviorContext setPlayerControllerToRestore:]
  -[AVHomeIPCameraBehaviorContext playbackControlsShowsLoadingIndicator]
  -[AVHomeIPCameraBehaviorContext setPlaybackControlsShowsLoadingIndicator:]


AVPlaybackContentContainerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation <AVPlaybackContentContainer>
 @property  AVStatusBarBackgroundGradientView *statusBarBackgroundGradientView
 @property  BOOL observingStatusBarHidden
 @property  __AVPlayerLayerView *playerLayerView
 @property  UIView *contentOverlayView
 @property  UIView *contentOverlayViewSubview
 @property  BOOL canShowStatusBarBackgroundGradientWhenStatusBarVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlaybackContentContainerView *activeContentView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoContentFrame
 @property  BOOL playingOnSecondScreen

  // instance methods
  -[AVPlaybackContentContainerView dealloc]
  -[AVPlaybackContentContainerView .cxx_destruct]
  -[AVPlaybackContentContainerView layoutSubviews]
  -[AVPlaybackContentContainerView didMoveToSuperview]
  -[AVPlaybackContentContainerView didMoveToWindow]
  -[AVPlaybackContentContainerView isPlayingOnSecondScreen]
  -[AVPlaybackContentContainerView setPlayingOnSecondScreen:]
  -[AVPlaybackContentContainerView playerLayerView]
  -[AVPlaybackContentContainerView contentOverlayView]
  -[AVPlaybackContentContainerView setPlayerLayerView:]
  -[AVPlaybackContentContainerView initWithFrame:activeContentView:]
  -[AVPlaybackContentContainerView setVideoGravity:removingAllSubayerTransformAnimations:]
  -[AVPlaybackContentContainerView activeContentView]
  -[AVPlaybackContentContainerView canShowStatusBarBackgroundGradientWhenStatusBarVisible]
  -[AVPlaybackContentContainerView setCanShowStatusBarBackgroundGradientWhenStatusBarVisible:]
  -[AVPlaybackContentContainerView videoContentFrame]
  -[AVPlaybackContentContainerView setVideoContentFrame:]
  -[AVPlaybackContentContainerView initWithFrame:playerLayerView:contentOverlayView:]
  -[AVPlaybackContentContainerView setContentOverlayViewSubview:]
  -[AVPlaybackContentContainerView removeAllSublayerTransformAnimations]
  -[AVPlaybackContentContainerView _updateStatusBarBackgroundGradientViewAlpha]
  -[AVPlaybackContentContainerView _frameForStatusBarBackgroundGradientView]
  -[AVPlaybackContentContainerView _resolvedContentFrame]
  -[AVPlaybackContentContainerView contentOverlayViewSubview]
  -[AVPlaybackContentContainerView statusBarBackgroundGradientView]
  -[AVPlaybackContentContainerView isObservingStatusBarHidden]
  -[AVPlaybackContentContainerView setObservingStatusBarHidden:]


AVPlaybackContentZoomingView : UIScrollView /System/Library/Frameworks/Foundation.framework/Foundation <UIScrollViewDelegate, AVPlaybackContentContainer>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} previousBounds
 @property  UIWindow *lastKnownWindow
 @property  BOOL zoomingEnabled
 @property  {CGSize=dd} contentAspectRatio
 @property  BOOL fullScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlaybackContentContainerView *activeContentView
 @property  BOOL canShowStatusBarBackgroundGradientWhenStatusBarVisible
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoContentFrame
 @property  BOOL playingOnSecondScreen

  // instance methods
  -[AVPlaybackContentZoomingView .cxx_destruct]
  -[AVPlaybackContentZoomingView setFrame:]
  -[AVPlaybackContentZoomingView gestureRecognizerShouldBegin:]
  -[AVPlaybackContentZoomingView layoutSubviews]
  -[AVPlaybackContentZoomingView scrollViewDidZoom:]
  -[AVPlaybackContentZoomingView viewForZoomingInScrollView:]
  -[AVPlaybackContentZoomingView scrollViewWillBeginZooming:withView:]
  -[AVPlaybackContentZoomingView scrollViewDidEndZooming:withView:atScale:]
  -[AVPlaybackContentZoomingView _contentInsets]
  -[AVPlaybackContentZoomingView willMoveToWindow:]
  -[AVPlaybackContentZoomingView scrollView:contentSizeForZoomScale:withProposedSize:]
  -[AVPlaybackContentZoomingView setFullScreen:]
  -[AVPlaybackContentZoomingView isFullScreen]
  -[AVPlaybackContentZoomingView isPlayingOnSecondScreen]
  -[AVPlaybackContentZoomingView setPlayingOnSecondScreen:]
  -[AVPlaybackContentZoomingView zoomToPoint:]
  -[AVPlaybackContentZoomingView setZoomingEnabled:]
  -[AVPlaybackContentZoomingView isZoomingEnabled]
  -[AVPlaybackContentZoomingView initWithFrame:activeContentView:]
  -[AVPlaybackContentZoomingView setVideoGravity:removingAllSubayerTransformAnimations:]
  -[AVPlaybackContentZoomingView activeContentView]
  -[AVPlaybackContentZoomingView canShowStatusBarBackgroundGradientWhenStatusBarVisible]
  -[AVPlaybackContentZoomingView setCanShowStatusBarBackgroundGradientWhenStatusBarVisible:]
  -[AVPlaybackContentZoomingView videoContentFrame]
  -[AVPlaybackContentZoomingView setVideoContentFrame:]
  -[AVPlaybackContentZoomingView setLastKnownWindow:]
  -[AVPlaybackContentZoomingView setContentAspectRatio:]
  -[AVPlaybackContentZoomingView _contentSizeForScale:]
  -[AVPlaybackContentZoomingView _contentRectForScale:]
  -[AVPlaybackContentZoomingView _updateMinMaxZoomScales]
  -[AVPlaybackContentZoomingView _updateMinMaxZoomScales:]
  -[AVPlaybackContentZoomingView contentAspectRatio]
  -[AVPlaybackContentZoomingView previousBounds]
  -[AVPlaybackContentZoomingView setPreviousBounds:]
  -[AVPlaybackContentZoomingView lastKnownWindow]


AVEditView : UIView /System/Library/Frameworks/Foundation.framework/Foundation <UIMovieScrubberDataSource, UIMovieScrubberDelegate>
 @property  UIMovieScrubber *movieScrubber
 @property  BOOL scrubbing
 @property  BOOL trimming
 @property  <AVEditViewDataSource> *dataSource
 @property  <AVEditViewDelegate> *delegate
 @property  BOOL prefersThumbVisible
 @property  double trimStartTime
 @property  double trimEndTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVEditView delegate]
  -[AVEditView setDelegate:]
  -[AVEditView .cxx_destruct]
  -[AVEditView dataSource]
  -[AVEditView setDataSource:]
  -[AVEditView intrinsicContentSize]
  -[AVEditView layoutSubviews]
  -[AVEditView reloadData]
  -[AVEditView movieScrubber:valueDidChange:]
  -[AVEditView movieScrubber:editingStartValueDidChange:]
  -[AVEditView movieScrubber:editingEndValueDidChange:]
  -[AVEditView movieScrubberWillBeginRequestingThumbnails:]
  -[AVEditView movieScrubberDidFinishRequestingThumbnails:]
  -[AVEditView movieScrubberDuration:]
  -[AVEditView movieScrubberDidBeginScrubbing:withHandle:]
  -[AVEditView movieScrubberDidEndScrubbing:withHandle:]
  -[AVEditView movieScrubber:evenlySpacedTimestamps:startingAt:endingAt:]
  -[AVEditView movieScrubber:requestThumbnailImageForTimestamp:]
  -[AVEditView setThumbnailImage:forTimestamp:]
  -[AVEditView movieScrubberThumbnailAspectRatio:]
  -[AVEditView isScrubbing]
  -[AVEditView setCurrentTime:]
  -[AVEditView setScrubbing:]
  -[AVEditView trimStartTime]
  -[AVEditView trimEndTime]
  -[AVEditView userObservationGestureRecognizerFired:]
  -[AVEditView setPrefersThumbVisible:]
  -[AVEditView setTrimming:]
  -[AVEditView prefersThumbVisible]
  -[AVEditView isTrimming]
  -[AVEditView movieScrubber]
  -[AVEditView setMovieScrubber:]


AVPlaybackContentTransitioningView : UIScrollView /System/Library/Frameworks/Foundation.framework/Foundation <UIScrollViewDelegate, AVPlaybackContentContainer>
 @property  NSValue *targetContentOffset
 @property  NSString *stateDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frameForActiveContentView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frameForTransitioningContentView
 @property  long long boundsOrContentSizeAdjustmentCount
 @property  BOOL transitionInteractive
 @property  <AVPlaybackContentTransitioningViewDelegate> *contentTransitioningDelegate
 @property  AVPlaybackContentContainerView *incomingContentView
 @property  long long transitionState
 @property  long long transitionDirection
 @property  double transitionProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlaybackContentContainerView *activeContentView
 @property  BOOL canShowStatusBarBackgroundGradientWhenStatusBarVisible
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoContentFrame
 @property  BOOL playingOnSecondScreen

  // instance methods
  -[AVPlaybackContentTransitioningView setDelegate:]
  -[AVPlaybackContentTransitioningView .cxx_destruct]
  -[AVPlaybackContentTransitioningView setFrame:]
  -[AVPlaybackContentTransitioningView gestureRecognizerShouldBegin:]
  -[AVPlaybackContentTransitioningView scrollViewDidScroll:]
  -[AVPlaybackContentTransitioningView scrollViewWillBeginDragging:]
  -[AVPlaybackContentTransitioningView scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[AVPlaybackContentTransitioningView scrollViewDidEndDragging:willDecelerate:]
  -[AVPlaybackContentTransitioningView scrollViewDidEndDecelerating:]
  -[AVPlaybackContentTransitioningView transitionProgress]
  -[AVPlaybackContentTransitioningView transitionDirection]
  -[AVPlaybackContentTransitioningView _canTransitionFromState:toState:]
  -[AVPlaybackContentTransitioningView targetContentOffset]
  -[AVPlaybackContentTransitioningView setTargetContentOffset:]
  -[AVPlaybackContentTransitioningView stateDescription]
  -[AVPlaybackContentTransitioningView setStateDescription:]
  -[AVPlaybackContentTransitioningView isPlayingOnSecondScreen]
  -[AVPlaybackContentTransitioningView setPlayingOnSecondScreen:]
  -[AVPlaybackContentTransitioningView initWithFrame:activeContentView:]
  -[AVPlaybackContentTransitioningView setVideoGravity:removingAllSubayerTransformAnimations:]
  -[AVPlaybackContentTransitioningView activeContentView]
  -[AVPlaybackContentTransitioningView canShowStatusBarBackgroundGradientWhenStatusBarVisible]
  -[AVPlaybackContentTransitioningView setCanShowStatusBarBackgroundGradientWhenStatusBarVisible:]
  -[AVPlaybackContentTransitioningView videoContentFrame]
  -[AVPlaybackContentTransitioningView setVideoContentFrame:]
  -[AVPlaybackContentTransitioningView _setTransitionState:transitionDirection:transitionProgress:]
  -[AVPlaybackContentTransitioningView performTransition:]
  -[AVPlaybackContentTransitioningView _updateTransitionStateIfPossible]
  -[AVPlaybackContentTransitioningView _performBoundsOrContentSizeAdjustment:]
  -[AVPlaybackContentTransitioningView _isAdjustingBoundsOrContentSize]
  -[AVPlaybackContentTransitioningView _updateSizeAndContentFrame]
  -[AVPlaybackContentTransitioningView _ensureContentViews]
  -[AVPlaybackContentTransitioningView _frameExcludingActiveContent]
  -[AVPlaybackContentTransitioningView _frameExcludingTransitioningContent]
  -[AVPlaybackContentTransitioningView _descriptionForState:]
  -[AVPlaybackContentTransitioningView _makeStateDescription]
  -[AVPlaybackContentTransitioningView transitionState]
  -[AVPlaybackContentTransitioningView contentTransitioningDelegate]
  -[AVPlaybackContentTransitioningView setContentTransitioningDelegate:]
  -[AVPlaybackContentTransitioningView incomingContentView]
  -[AVPlaybackContentTransitioningView isTransitionInteractive]
  -[AVPlaybackContentTransitioningView setTransitionInteractive:]
  -[AVPlaybackContentTransitioningView frameForActiveContentView]
  -[AVPlaybackContentTransitioningView setFrameForActiveContentView:]
  -[AVPlaybackContentTransitioningView frameForTransitioningContentView]
  -[AVPlaybackContentTransitioningView setFrameForTransitioningContentView:]
  -[AVPlaybackContentTransitioningView boundsOrContentSizeAdjustmentCount]
  -[AVPlaybackContentTransitioningView setBoundsOrContentSizeAdjustmentCount:]


AVMediaSelectionViewController : UINavigationController /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVMediaSelectionViewController .cxx_destruct]
  -[AVMediaSelectionViewController initWithPlayerController:doneButtonTarget:doneButtonAction:]
  -[AVMediaSelectionViewController mediaSelectionTableViewController]


AVMediaSelectionTableViewController : UITableViewController /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerController *playerController

  // instance methods
  -[AVMediaSelectionTableViewController dealloc]
  -[AVMediaSelectionTableViewController .cxx_destruct]
  -[AVMediaSelectionTableViewController initWithStyle:]
  -[AVMediaSelectionTableViewController viewWillAppear:]
  -[AVMediaSelectionTableViewController viewDidLoad]
  -[AVMediaSelectionTableViewController viewDidAppear:]
  -[AVMediaSelectionTableViewController tableView:numberOfRowsInSection:]
  -[AVMediaSelectionTableViewController tableView:cellForRowAtIndexPath:]
  -[AVMediaSelectionTableViewController numberOfSectionsInTableView:]
  -[AVMediaSelectionTableViewController tableView:titleForHeaderInSection:]
  -[AVMediaSelectionTableViewController tableView:willDisplayHeaderView:forSection:]
  -[AVMediaSelectionTableViewController tableView:didSelectRowAtIndexPath:]
  -[AVMediaSelectionTableViewController playerController]
  -[AVMediaSelectionTableViewController setPlayerController:]
  -[AVMediaSelectionTableViewController playerControllerMediaSelectionChanged:]
  -[AVMediaSelectionTableViewController _isSelectedOrCurrentAudioMediaSelectionOption:]
  -[AVMediaSelectionTableViewController _isSelectedOrCurrentLegibleMediaSelectionOption:]


AVTableViewCell : UITableViewCell /System/Library/Frameworks/Foundation.framework/Foundation
 @property  id representedObject

  // instance methods
  -[AVTableViewCell .cxx_destruct]
  -[AVTableViewCell representedObject]
  -[AVTableViewCell setRepresentedObject:]


AVPictureInPictureController : NSObject /usr/lib/libSystem.B.dylib <AVPictureInPicturePlatformAdapterDelegate, AVPictureInPictureControlsStyleAppearance>
 @property  AVPictureInPicturePlatformAdapter *platformAdapter
 @property  AVObservationController *observationController
 @property  <AVPictureInPictureContentSource> *sourceIfRetainedDuringPictureInPicturePlayback
 @property  BOOL pictureInPicturePossible
 @property  BOOL pictureInPictureActive
 @property  BOOL pictureInPictureSuspended
 @property  BOOL otherPictureInPictureActive
 @property  BOOL wantsImmediateAssetInspection
 @property  <AVPictureInPictureContentSource> *source
 @property  AVPictureInPictureViewController *pictureInPictureViewController
 @property  AVPlayerController *playerController
 @property  BOOL retainsSourceDuringPictureInPicturePlayback
 @property  BOOL allowsPictureInPicturePlayback
 @property  BOOL allowsPictureInPictureFromInlineWhenEnteringBackground
 @property  BOOL pictureInPictureWasStartedWhenEnteringBackground
 @property  AVPlayerLayer *playerLayer
 @property  <AVPictureInPictureControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long controlsStyle

  // class methods
  +[AVPictureInPictureController isPictureInPictureSupported]
  +[AVPictureInPictureController pictureInPictureButtonStartImageCompatibleWithTraitCollection:]
  +[AVPictureInPictureController pictureInPictureButtonStopImageCompatibleWithTraitCollection:]
  +[AVPictureInPictureController pictureInPictureButtonStartImage]
  +[AVPictureInPictureController pictureInPictureButtonStopImage]

  // instance methods
  -[AVPictureInPictureController init]
  -[AVPictureInPictureController dealloc]
  -[AVPictureInPictureController invalidate]
  -[AVPictureInPictureController delegate]
  -[AVPictureInPictureController setDelegate:]
  -[AVPictureInPictureController .cxx_destruct]
  -[AVPictureInPictureController source]
  -[AVPictureInPictureController isPictureInPictureActive]
  -[AVPictureInPictureController initWithSource:]
  -[AVPictureInPictureController setPictureInPictureActive:]
  -[AVPictureInPictureController isPictureInPicturePossible]
  -[AVPictureInPictureController setPictureInPicturePossible:]
  -[AVPictureInPictureController playerController]
  -[AVPictureInPictureController setPlayerController:]
  -[AVPictureInPictureController startPictureInPicture]
  -[AVPictureInPictureController stopPictureInPicture]
  -[AVPictureInPictureController pictureInPictureWasStartedWhenEnteringBackground]
  -[AVPictureInPictureController setAllowsPictureInPicturePlayback:]
  -[AVPictureInPictureController playerLayer]
  -[AVPictureInPictureController initWithPlayerLayer:]
  -[AVPictureInPictureController observationController]
  -[AVPictureInPictureController controlsStyle]
  -[AVPictureInPictureController setControlsStyle:]
  -[AVPictureInPictureController allowsPictureInPicturePlayback]
  -[AVPictureInPictureController pictureInPictureViewController]
  -[AVPictureInPictureController isPictureInPictureSuspended]
  -[AVPictureInPictureController pictureInPicturePlatformAdapter:failedToStartError:]
  -[AVPictureInPictureController pictureInPicturePlatformAdapter:prepareToStopForRestoringUserInterface:]
  -[AVPictureInPictureController pictureInPicturePlatformAdapterPrepareToStopForDismissal:]
  -[AVPictureInPictureController pictureInPicturePlatformAdapter:stopPictureInPictureAndRestoreUserInterface:]
  -[AVPictureInPictureController pictureInPicturePlatformAdapter:handlePlaybackCommand:]
  -[AVPictureInPictureController pictureInPicturePlatformAdapter:statusDidChange:fromStatus:]
  -[AVPictureInPictureController _commonInitWithSource:]
  -[AVPictureInPictureController stopPictureInPictureEvenWhenInBackground]
  -[AVPictureInPictureController contentSourceVideoRectInWindowChanged]
  -[AVPictureInPictureController setAllowsPictureInPictureFromInlineWhenEnteringBackground:]
  -[AVPictureInPictureController _delegateIfRespondsToSelector:]
  -[AVPictureInPictureController _stopPictureInPictureAndRestoreUserInterface:]
  -[AVPictureInPictureController setPictureInPictureSuspended:]
  -[AVPictureInPictureController platformAdapter]
  -[AVPictureInPictureController sourceIfRetainedDuringPictureInPicturePlayback]
  -[AVPictureInPictureController setSourceIfRetainedDuringPictureInPicturePlayback:]
  -[AVPictureInPictureController isOtherPictureInPictureActive]
  -[AVPictureInPictureController setOtherPictureInPictureActive:]
  -[AVPictureInPictureController wantsImmediateAssetInspection]
  -[AVPictureInPictureController setWantsImmediateAssetInspection:]
  -[AVPictureInPictureController retainsSourceDuringPictureInPicturePlayback]
  -[AVPictureInPictureController setRetainsSourceDuringPictureInPicturePlayback:]
  -[AVPictureInPictureController allowsPictureInPictureFromInlineWhenEnteringBackground]
  -[AVPictureInPictureController setPictureInPictureWasStartedWhenEnteringBackground:]


AVControlItem : NSObject /usr/lib/libSystem.B.dylib
 @property  long long type
 @property  NSString *title
 @property  UIImage *image
 @property  BOOL enabled
 @property  UIView *view
 @property  @? action
 @property  UIColor *tintColor

  // instance methods
  -[AVControlItem type]
  -[AVControlItem setEnabled:]
  -[AVControlItem .cxx_destruct]
  -[AVControlItem title]
  -[AVControlItem setTitle:]
  -[AVControlItem isEnabled]
  -[AVControlItem action]
  -[AVControlItem image]
  -[AVControlItem setImage:]
  -[AVControlItem view]
  -[AVControlItem setAccessibilityLabel:]
  -[AVControlItem setAccessibilityAttributedLabel:]
  -[AVControlItem setAccessibilityHint:]
  -[AVControlItem setAccessibilityAttributedHint:]
  -[AVControlItem tintColor]
  -[AVControlItem setTintColor:]
  -[AVControlItem setAction:]
  -[AVControlItem _updateTintColor]
  -[AVControlItem initWithTitle:type:]
  -[AVControlItem _buttonTouchUpInside:]
  -[AVControlItem _updateButton]


AVLabel : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UILabel *label
 @property  UILabel *labelIfLoaded
 @property  UIActivityIndicatorView *loadingIndicator
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL removed
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance
 @property  NSLayoutConstraint *loadingIndicatorLeftAlignmentConstraint
 @property  NSLayoutConstraint *loadingIndicatorRightAlignmentConstraint
 @property  BOOL showsLoadingIndicator
 @property  long long loadingIndicatorAlignment
 @property  NSString *text
 @property  UIFont *font

  // instance methods
  -[AVLabel .cxx_destruct]
  -[AVLabel label]
  -[AVLabel text]
  -[AVLabel setText:]
  -[AVLabel setHidden:]
  -[AVLabel intrinsicContentSize]
  -[AVLabel initWithFrame:]
  -[AVLabel setFont:]
  -[AVLabel font]
  -[AVLabel updateConstraints]
  -[AVLabel tintColorDidChange]
  -[AVLabel viewForFirstBaselineLayout]
  -[AVLabel viewForLastBaselineLayout]
  -[AVLabel didMoveToSuperview]
  -[AVLabel isCollapsed]
  -[AVLabel setCollapsed:]
  -[AVLabel setExtrinsicContentSize:]
  -[AVLabel extrinsicContentSize]
  -[AVLabel isRemoved]
  -[AVLabel isCollapsedOrExcluded]
  -[AVLabel setIncluded:]
  -[AVLabel setRemoved:]
  -[AVLabel isIncluded]
  -[AVLabel hasAlternateAppearance]
  -[AVLabel setHasAlternateAppearance:]
  -[AVLabel hasFullScreenAppearance]
  -[AVLabel setHasFullScreenAppearance:]
  -[AVLabel setShowsLoadingIndicator:]
  -[AVLabel showsLoadingIndicator]
  -[AVLabel loadingIndicator]
  -[AVLabel labelIfLoaded]
  -[AVLabel setLoadingIndicatorAlignment:]
  -[AVLabel loadingIndicatorAlignment]
  -[AVLabel loadingIndicatorLeftAlignmentConstraint]
  -[AVLabel setLoadingIndicatorLeftAlignmentConstraint:]
  -[AVLabel loadingIndicatorRightAlignmentConstraint]
  -[AVLabel setLoadingIndicatorRightAlignmentConstraint:]


AVPlayerView : AVPresentationContainerView
 @property  BOOL needsInitialLayout
 @property  AVPlayerViewControllerContentView *contentView

  // instance methods
  -[AVPlayerView .cxx_destruct]
  -[AVPlayerView contentView]
  -[AVPlayerView layoutSubviews]
  -[AVPlayerView initWithFrame:contentView:]
  -[AVPlayerView beginManagingContentView]
  -[AVPlayerView needsInitialLayout]
  -[AVPlayerView setNeedsInitialLayout:]


AVExternalPlaybackController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[AVExternalPlaybackController externalPlaybackStateDescriptionForState:]

  // instance methods
  -[AVExternalPlaybackController .cxx_destruct]
  -[AVExternalPlaybackController willBeginPlaybackWithCompletionHandler:]
  -[AVExternalPlaybackController willBeginPlaybackFromAppWithBundleID:completionHandler:]
  -[AVExternalPlaybackController _invokeClientCompletionHandlerWithPlaybackState:]


AVTimecode : NSObject /usr/lib/libSystem.B.dylib
 @property  {CVSMPTETime=ssIIIssss} timecodeStruct
 @property  long long frameNumber
 @property  {?=qiIq} frameDuration
 @property  unsigned int tc_flags
 @property  ^{opaqueCMFormatDescription=} formatDescription

  // instance methods
  -[AVTimecode formatDescription]
  -[AVTimecode frameDuration]
  -[AVTimecode setFrameDuration:]
  -[AVTimecode setFormatDescription:]
  -[AVTimecode timecodeStruct]
  -[AVTimecode setTimecodeStruct:]
  -[AVTimecode frameNumber]
  -[AVTimecode setFrameNumber:]
  -[AVTimecode tc_flags]
  -[AVTimecode setTc_flags:]


AVTimecodeController : NSObject /usr/lib/libSystem.B.dylib
 @property  AVAssetTrack *timecodeTrack
 @property  {?=qiIq} observationInterval

  // instance methods
  -[AVTimecodeController .cxx_destruct]
  -[AVTimecodeController initWithTimecodeTrack:videoTrack:]
  -[AVTimecodeController calculateMaxFrameAndTimecode]
  -[AVTimecodeController maxTimecodeString]
  -[AVTimecodeController maxFrameCountString]
  -[AVTimecodeController calculateFrameNumberAtCMTime:]
  -[AVTimecodeController calculateTimecodeAtFrame:]
  -[AVTimecodeController timecodeForFrameNumber32UsingFormatDescription:timecodeStartFrame:]
  -[AVTimecodeController timecodeForFrameNumber64UsingCachedDescription:]
  -[AVTimecodeController timecodeForOffset:from:timecode:]
  -[AVTimecodeController calculateFrameNumberAtTimeInterval:]
  -[AVTimecodeController timeIntervalForFrameNumber:]
  -[AVTimecodeController cacheTimecodeDescriptionForSampleBuffer:]
  -[AVTimecodeController validateCMTime:]
  -[AVTimecodeController readTimecodes]
  -[AVTimecodeController timecodeAvailable]
  -[AVTimecodeController timecodeTrack]
  -[AVTimecodeController setTimecodeTrack:]
  -[AVTimecodeController observationInterval]


AVCABackdropLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVCABackdropLayerView *groupLeader
 @property  NSHashTable *dependents
 @property  long long activeBackdropEffect
 @property  CABackdropLayer *layer
 @property  BOOL captureOnly
 @property  BOOL forceLowQualityEffect
 @property  UIColor *customBackgroundColor

  // class methods
  +[AVCABackdropLayerView colorMatrixFilter]
  +[AVCABackdropLayerView layerClass]
  +[AVCABackdropLayerView reducedTransparencyColor]
  +[AVCABackdropLayerView averageFilter]
  +[AVCABackdropLayerView blurFilter]

  // instance methods
  -[AVCABackdropLayerView .cxx_destruct]
  -[AVCABackdropLayerView initWithFrame:]
  -[AVCABackdropLayerView pointInside:withEvent:]
  -[AVCABackdropLayerView didMoveToSuperview]
  -[AVCABackdropLayerView didMoveToWindow]
  -[AVCABackdropLayerView _updateFilters]
  -[AVCABackdropLayerView hitTest:withEvent:]
  -[AVCABackdropLayerView setCaptureOnly:]
  -[AVCABackdropLayerView updateActiveBackdropEffectIfGroupLeader]
  -[AVCABackdropLayerView isCaptureOnly]
  -[AVCABackdropLayerView setCustomBackgroundColor:]
  -[AVCABackdropLayerView setGroupLeader:]
  -[AVCABackdropLayerView updateGroupLeader]
  -[AVCABackdropLayerView addDependent:]
  -[AVCABackdropLayerView removeDependent:]
  -[AVCABackdropLayerView _ensureDependents]
  -[AVCABackdropLayerView _enumerateDependents:]
  -[AVCABackdropLayerView forceLowQualityEffect]
  -[AVCABackdropLayerView setForceLowQualityEffect:]
  -[AVCABackdropLayerView customBackgroundColor]
  -[AVCABackdropLayerView groupLeader]
  -[AVCABackdropLayerView dependents]
  -[AVCABackdropLayerView activeBackdropEffect]
  -[AVCABackdropLayerView setActiveBackdropEffect:]


AVCABackdropLayer : CABackdropLayer /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
  // instance methods
  -[AVCABackdropLayer setScale:]


AVRoutePickerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  NSString *overrideRoutingContextUID
 @property  <AVRoutePickerViewDelegate> *delegate
 @property  UIColor *activeTintColor
 @property  long long routePickerButtonStyle
 @property  BOOL prioritizesVideoDevices

  // instance methods
  -[AVRoutePickerView dealloc]
  -[AVRoutePickerView initWithCoder:]
  -[AVRoutePickerView delegate]
  -[AVRoutePickerView setDelegate:]
  -[AVRoutePickerView .cxx_destruct]
  -[AVRoutePickerView intrinsicContentSize]
  -[AVRoutePickerView initWithFrame:]
  -[AVRoutePickerView layoutSubviews]
  -[AVRoutePickerView tintColorDidChange]
  -[AVRoutePickerView didMoveToWindow]
  -[AVRoutePickerView _registerNotifications]
  -[AVRoutePickerView activeTintColor]
  -[AVRoutePickerView customButton]
  -[AVRoutePickerView updateButtonAppearance]
  -[AVRoutePickerView overrideRoutingContextUID]
  -[AVRoutePickerView setOverrideRoutingContextUID:]
  -[AVRoutePickerView setActiveTintColor:]
  -[AVRoutePickerView isAirPlayActive]
  -[AVRoutePickerView setAirPlayActive:]
  -[AVRoutePickerView setCustomButton:]
  -[AVRoutePickerView prioritizesVideoDevices]
  -[AVRoutePickerView setPrioritizesVideoDevices:]
  -[AVRoutePickerView _createOrUpdateRoutePickerButton]
  -[AVRoutePickerView _routePickerButtonTapped:]
  -[AVRoutePickerView _routePickerButtonTouchDown:]
  -[AVRoutePickerView _routePickerButtonTouchDragEnter:]
  -[AVRoutePickerView _routePickerButtonTouchUp:]
  -[AVRoutePickerView _setRoutePickerButtonAlpha:animated:]
  -[AVRoutePickerView _updateAirPlayActive]
  -[AVRoutePickerView _isAirPlayActive]
  -[AVRoutePickerView _defaultActiveTintColor]
  -[AVRoutePickerView _normalizedRectInWindow]
  -[AVRoutePickerView routePickerButtonStyle]
  -[AVRoutePickerView setRoutePickerButtonStyle:]


AVPictureInPictureIndicatorLayer : CALayer /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
  // instance methods
  -[AVPictureInPictureIndicatorLayer init]
  -[AVPictureInPictureIndicatorLayer .cxx_destruct]
  -[AVPictureInPictureIndicatorLayer layoutSublayers]
  -[AVPictureInPictureIndicatorLayer initWithDisplayScale:placeholderImage:opaque:]
  -[AVPictureInPictureIndicatorLayer textBoundingRectWhenDrawnInRect:]


AVBackgroundView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVBackdropView *backdropView
 @property  BOOL automaticallyDrawsRoundedCorners
 @property  BOOL prefersLowQualityEffects
 @property  BOOL circular

  // instance methods
  -[AVBackgroundView .cxx_destruct]
  -[AVBackgroundView initWithFrame:]
  -[AVBackgroundView layoutSubviews]
  -[AVBackgroundView didMoveToSuperview]
  -[AVBackgroundView didMoveToWindow]
  -[AVBackgroundView backdropView]
  -[AVBackgroundView setBackdropView:]
  -[AVBackgroundView addSubview:applyingMaterialStyle:tintEffectStyle:]
  -[AVBackgroundView isCircular]
  -[AVBackgroundView setCircular:]
  -[AVBackgroundView setAutomaticallyDrawsRoundedCorners:]
  -[AVBackgroundView setPrefersLowQualityEffects:]
  -[AVBackgroundView _updateBackdropShape]
  -[AVBackgroundView _ensureOrRemoveBackdropView]
  -[AVBackgroundView _isContainedInOverlappingBackgroundView]
  -[AVBackgroundView automaticallyDrawsRoundedCorners]
  -[AVBackgroundView prefersLowQualityEffects]


AVVolumeButtonControl : UIControl /System/Library/Frameworks/Foundation.framework/Foundation <AVExternalGestureRecognizerPreventing, AVPlaybackControlsViewItem>
 @property  UIViewPropertyAnimator *highlightAnimator
 @property  UISelectionFeedbackGenerator *feedbackGenerator
 @property  AVMicaPackage *micaPackage
 @property  UIImageView *imageView
 @property  {CGPoint=dd} initialPreciseLocationOfTouch
 @property  NSTimer *longPressTimer
 @property  long long trackingState
 @property  BOOL showsHighlightedAppearance
 @property  NSString *micaPackageStateName
 @property  BOOL longPressEnabled
 @property  {NSDirectionalEdgeInsets=dddd} hitRectInsets
 @property  {CGPoint=dd} translationOfPanFromPreviousTouch
 @property  {CGPoint=dd} cumulativeTranslationSincePanningBegan
 @property  {CGPoint=dd} locationOfTouchInWindow
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL removed
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance

  // instance methods
  -[AVVolumeButtonControl .cxx_destruct]
  -[AVVolumeButtonControl setBounds:]
  -[AVVolumeButtonControl trackingState]
  -[AVVolumeButtonControl setTrackingState:]
  -[AVVolumeButtonControl setHidden:]
  -[AVVolumeButtonControl intrinsicContentSize]
  -[AVVolumeButtonControl initWithFrame:]
  -[AVVolumeButtonControl gestureRecognizerShouldBegin:]
  -[AVVolumeButtonControl imageView]
  -[AVVolumeButtonControl pointInside:withEvent:]
  -[AVVolumeButtonControl feedbackGenerator]
  -[AVVolumeButtonControl isCollapsed]
  -[AVVolumeButtonControl setCollapsed:]
  -[AVVolumeButtonControl beginTrackingWithTouch:withEvent:]
  -[AVVolumeButtonControl cancelTrackingWithEvent:]
  -[AVVolumeButtonControl continueTrackingWithTouch:withEvent:]
  -[AVVolumeButtonControl endTrackingWithTouch:withEvent:]
  -[AVVolumeButtonControl hitRect]
  -[AVVolumeButtonControl setImageView:]
  -[AVVolumeButtonControl isLongPressEnabled]
  -[AVVolumeButtonControl setExtrinsicContentSize:]
  -[AVVolumeButtonControl extrinsicContentSize]
  -[AVVolumeButtonControl hitRectInsets]
  -[AVVolumeButtonControl setHitRectInsets:]
  -[AVVolumeButtonControl isRemoved]
  -[AVVolumeButtonControl avkit_shouldPreventExternalGestureRecognizerAtPoint:]
  -[AVVolumeButtonControl isCollapsedOrExcluded]
  -[AVVolumeButtonControl setIncluded:]
  -[AVVolumeButtonControl setRemoved:]
  -[AVVolumeButtonControl isIncluded]
  -[AVVolumeButtonControl hasAlternateAppearance]
  -[AVVolumeButtonControl setHasAlternateAppearance:]
  -[AVVolumeButtonControl hasFullScreenAppearance]
  -[AVVolumeButtonControl setHasFullScreenAppearance:]
  -[AVVolumeButtonControl _updateIsHiddenAndAlpha]
  -[AVVolumeButtonControl setMicaPackage:]
  -[AVVolumeButtonControl setMicaPackageStateName:]
  -[AVVolumeButtonControl triggerSelectionChangedFeedback]
  -[AVVolumeButtonControl setShowsHighlightedAppearance:]
  -[AVVolumeButtonControl setNeedsUpdateGlyphRenderingMode]
  -[AVVolumeButtonControl imageNameForMicaPackageState]
  -[AVVolumeButtonControl _updateMicaPackage:]
  -[AVVolumeButtonControl micaPackageStateName]
  -[AVVolumeButtonControl setLongPressEnabled:]
  -[AVVolumeButtonControl translationOfPanFromPreviousTouch]
  -[AVVolumeButtonControl setTranslationOfPanFromPreviousTouch:]
  -[AVVolumeButtonControl cumulativeTranslationSincePanningBegan]
  -[AVVolumeButtonControl setCumulativeTranslationSincePanningBegan:]
  -[AVVolumeButtonControl locationOfTouchInWindow]
  -[AVVolumeButtonControl setLocationOfTouchInWindow:]
  -[AVVolumeButtonControl highlightAnimator]
  -[AVVolumeButtonControl setHighlightAnimator:]
  -[AVVolumeButtonControl micaPackage]
  -[AVVolumeButtonControl initialPreciseLocationOfTouch]
  -[AVVolumeButtonControl setInitialPreciseLocationOfTouch:]
  -[AVVolumeButtonControl longPressTimer]
  -[AVVolumeButtonControl setLongPressTimer:]
  -[AVVolumeButtonControl showsHighlightedAppearance]


AVPlayerControllerTimeResolver : NSObject /usr/lib/libSystem.B.dylib <NSCoding>
 @property  double targetTime
 @property  double targetTimeWithinEndTimes
 @property  double remainingTargetTimeWithinEndTimes
 @property  double currentTimeWithinEndTimes
 @property  double remainingTime
 @property  double remainingTimeWithinEndTimes
 @property  double seekableTimeRangeDuration
 @property  BOOL thirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges
 @property  BOOL currentTimeAtEndOfSeekableTimeRanges
 @property  double minTime
 @property  double maxTime
 @property  <AVTimeControlling> *playerController
 @property  double interval
 @property  double resolution
 @property  double currentTime

  // class methods
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingCurrentTimeWithinEndTimes]
  +[AVPlayerControllerTimeResolver automaticallyNotifiesObserversOfCurrentTime]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingTargetTime]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingTargetTimeWithinEndTimes]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingRemainingTargetTimeWithinEndTimes]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingRemainingTime]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingRemainingTimeWithinEndTimes]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingSeekableTimeRangeDuration]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingThirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges]
  +[AVPlayerControllerTimeResolver keyPathsForValuesAffectingCurrentTimeAtEndOfSeekableTimeRanges]

  // instance methods
  -[AVPlayerControllerTimeResolver init]
  -[AVPlayerControllerTimeResolver dealloc]
  -[AVPlayerControllerTimeResolver encodeWithCoder:]
  -[AVPlayerControllerTimeResolver initWithCoder:]
  -[AVPlayerControllerTimeResolver .cxx_destruct]
  -[AVPlayerControllerTimeResolver observeValueForKeyPath:ofObject:change:context:]
  -[AVPlayerControllerTimeResolver interval]
  -[AVPlayerControllerTimeResolver setInterval:]
  -[AVPlayerControllerTimeResolver currentTime]
  -[AVPlayerControllerTimeResolver remainingTime]
  -[AVPlayerControllerTimeResolver resolution]
  -[AVPlayerControllerTimeResolver setResolution:]
  -[AVPlayerControllerTimeResolver minTime]
  -[AVPlayerControllerTimeResolver maxTime]
  -[AVPlayerControllerTimeResolver currentTimeWithinEndTimes]
  -[AVPlayerControllerTimeResolver setCurrentTimeWithinEndTimes:]
  -[AVPlayerControllerTimeResolver playerController]
  -[AVPlayerControllerTimeResolver setPlayerController:]
  -[AVPlayerControllerTimeResolver setCurrentTime:]
  -[AVPlayerControllerTimeResolver setMinTime:]
  -[AVPlayerControllerTimeResolver setMaxTime:]
  -[AVPlayerControllerTimeResolver seekableTimeRangeDuration]
  -[AVPlayerControllerTimeResolver targetTimeWithinEndTimes]
  -[AVPlayerControllerTimeResolver setTargetTimeWithinEndTimes:]
  -[AVPlayerControllerTimeResolver remainingTargetTimeWithinEndTimes]
  -[AVPlayerControllerTimeResolver remainingTimeWithinEndTimes]
  -[AVPlayerControllerTimeResolver isThirtySecondsBeforeCurrentTimeWithinSeekableTimeRanges]
  -[AVPlayerControllerTimeResolver isCurrentTimeAtEndOfSeekableTimeRanges]
  -[AVPlayerControllerTimeResolver targetTime]
  -[AVPlayerControllerTimeResolver setTargetTime:]


AVTouchIgnoringView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVTouchIgnoringView setHidden:]
  -[AVTouchIgnoringView hitTest:withEvent:]


AVZoomingBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVPlayerViewControllerBehaviorContext, AVBehaviorContextInternal, UIGestureRecognizerDelegate, AVBehaviorContext>
 @property  AVZoomingBehavior *behavior
 @property  AVPlaybackContentZoomingView *contentZoomingView
 @property  AVObservationController *observationController
 @property  UITapGestureRecognizer *doubleTapGestureRecognizer
 @property  AVPlaybackContentContainerView *activeContentView
 @property  BOOL zoomingEnabled
 @property  {CGSize=dd} contentAspectRatio
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVZoomingBehaviorContext dealloc]
  -[AVZoomingBehaviorContext .cxx_destruct]
  -[AVZoomingBehaviorContext gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[AVZoomingBehaviorContext gestureRecognizer:shouldReceiveTouch:]
  -[AVZoomingBehaviorContext viewDidLoad]
  -[AVZoomingBehaviorContext behavior]
  -[AVZoomingBehaviorContext setBehavior:]
  -[AVZoomingBehaviorContext doubleTapGestureRecognizer]
  -[AVZoomingBehaviorContext playerViewController]
  -[AVZoomingBehaviorContext observationController]
  -[AVZoomingBehaviorContext makePlaybackContentContainerWithFrame:activeContentView:]
  -[AVZoomingBehaviorContext initWithAVKitOwner:]
  -[AVZoomingBehaviorContext willAddBehavior:]
  -[AVZoomingBehaviorContext didAddBehavior:]
  -[AVZoomingBehaviorContext willRemoveBehavior:]
  -[AVZoomingBehaviorContext didRemoveBehavior:]
  -[AVZoomingBehaviorContext setObservationController:]
  -[AVZoomingBehaviorContext setZoomingEnabled:]
  -[AVZoomingBehaviorContext isZoomingEnabled]
  -[AVZoomingBehaviorContext activeContentView]
  -[AVZoomingBehaviorContext setContentAspectRatio:]
  -[AVZoomingBehaviorContext contentAspectRatio]
  -[AVZoomingBehaviorContext _handleDoubleTapGestureRecognizer:]
  -[AVZoomingBehaviorContext _updateZoomingView]
  -[AVZoomingBehaviorContext contentZoomingView]
  -[AVZoomingBehaviorContext setContentZoomingView:]
  -[AVZoomingBehaviorContext setDoubleTapGestureRecognizer:]


AVNewsWidgetPlayerBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVPlaybackContentTransitioningViewDelegate, AVPlayerViewControllerBehaviorContext, AVBehaviorContextInternal, AVBehaviorContext>
 @property  AVPlayer *contentTransitioningPlayer
 @property  AVPlaybackContentTransitioningView *contentTransitionView
 @property  AVNewsWidgetPlayerBehavior *behavior
 @property  long long activeContentTransitionType
 @property  BOOL contentTransitionInteractive
 @property  UIView *contentTransitioningOverlayView
 @property  BOOL startNextContentTransitionButtonEnabled
 @property  BOOL startPreviousContentTransitionButtonEnabled
 @property  UIView *customContentTransitioningInfoPanel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVNewsWidgetPlayerBehaviorContext .cxx_destruct]
  -[AVNewsWidgetPlayerBehaviorContext viewDidLoad]
  -[AVNewsWidgetPlayerBehaviorContext behavior]
  -[AVNewsWidgetPlayerBehaviorContext setBehavior:]
  -[AVNewsWidgetPlayerBehaviorContext playerViewController]
  -[AVNewsWidgetPlayerBehaviorContext makePlaybackContentContainerWithFrame:activeContentView:]
  -[AVNewsWidgetPlayerBehaviorContext initWithAVKitOwner:]
  -[AVNewsWidgetPlayerBehaviorContext willAddBehavior:]
  -[AVNewsWidgetPlayerBehaviorContext didAddBehavior:]
  -[AVNewsWidgetPlayerBehaviorContext willRemoveBehavior:]
  -[AVNewsWidgetPlayerBehaviorContext didRemoveBehavior:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningViewShouldBeginDragging:locationInView:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningView:shouldBeginTransitionWithDirection:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningPlayerContentViewForTransition:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningViewDidChangeTransitionStatus:oldState:oldTransitionDirection:oldProgress:]
  -[AVNewsWidgetPlayerBehaviorContext setVideoGravityForTransitioningContent:]
  -[AVNewsWidgetPlayerBehaviorContext startContentTransition:]
  -[AVNewsWidgetPlayerBehaviorContext _transitionDirectionForContentTransitionType:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningOverlayView]
  -[AVNewsWidgetPlayerBehaviorContext activeContentTransitionType]
  -[AVNewsWidgetPlayerBehaviorContext isContentTransitionInteractive]
  -[AVNewsWidgetPlayerBehaviorContext setStartNextContentTransitionButtonEnabled:]
  -[AVNewsWidgetPlayerBehaviorContext setStartPreviousContentTransitionButtonEnabled:]
  -[AVNewsWidgetPlayerBehaviorContext updateStartLeftRightContentTransitionButtonsEnabled]
  -[AVNewsWidgetPlayerBehaviorContext setCustomContentTransitioningInfoPanel:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitionTypeForTransitionDirection:]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitioningPlayer]
  -[AVNewsWidgetPlayerBehaviorContext setContentTransitioningPlayer:]
  -[AVNewsWidgetPlayerBehaviorContext isStartNextContentTransitionButtonEnabled]
  -[AVNewsWidgetPlayerBehaviorContext isStartPreviousContentTransitionButtonEnabled]
  -[AVNewsWidgetPlayerBehaviorContext customContentTransitioningInfoPanel]
  -[AVNewsWidgetPlayerBehaviorContext contentTransitionView]
  -[AVNewsWidgetPlayerBehaviorContext setContentTransitionView:]


AVNewsWidgetPlayerLegacyBehavior : AVNewsWidgetPlayerBehavior
 @property  <AVPlayerViewControllerContentTransitioning_NewsOnly> *legacyDelegate

  // instance methods
  -[AVNewsWidgetPlayerLegacyBehavior .cxx_destruct]
  -[AVNewsWidgetPlayerLegacyBehavior playerForContentTransitionType:]
  -[AVNewsWidgetPlayerLegacyBehavior willBeginContentTransition]
  -[AVNewsWidgetPlayerLegacyBehavior didUpdateContentTransitionProgress:]
  -[AVNewsWidgetPlayerLegacyBehavior willCompleteContentTransition]
  -[AVNewsWidgetPlayerLegacyBehavior didCompleteContentTransition]
  -[AVNewsWidgetPlayerLegacyBehavior willCancelContentTransition]
  -[AVNewsWidgetPlayerLegacyBehavior didCancelContentTransition]
  -[AVNewsWidgetPlayerLegacyBehavior legacyDelegate]
  -[AVNewsWidgetPlayerLegacyBehavior setLegacyDelegate:]


AVTransition : NSObject /usr/lib/libSystem.B.dylib
 @property  <UIViewControllerContextTransitioningEx> *transitionContext
 @property  UIViewPropertyAnimator *transitionAnimator
 @property  UIViewPropertyAnimator *clientAnimator
 @property  NSMutableArray *allAnimators
 @property  AVPresentationContext *presentationContext
 @property  double transitionAnimatorProgress
 @property  <AVTransitionDelegate> *delegate

  // instance methods
  -[AVTransition dealloc]
  -[AVTransition delegate]
  -[AVTransition setDelegate:]
  -[AVTransition .cxx_destruct]
  -[AVTransition duration]
  -[AVTransition transitionContext]
  -[AVTransition completeTransition:]
  -[AVTransition cancelInteractiveTransition]
  -[AVTransition finishInteractiveTransition]
  -[AVTransition startInteractiveTransition]
  -[AVTransition pauseInteractiveTransition]
  -[AVTransition presentationContext]
  -[AVTransition initWithTransitionContext:]
  -[AVTransition transitionAnimatorProgress]
  -[AVTransition _presentationTransitionWillBegin]
  -[AVTransition _dismissalTransitionWillBegin]
  -[AVTransition updateWithPercentComplete:scale:translation:rotation:]
  -[AVTransition _animateFinishInteractiveTransition]
  -[AVTransition _freezeDismissingViewForFinishing]
  -[AVTransition _animateAlongsideInteractivePresentationTransitionAnimationForCancelling]
  -[AVTransition _animateAlongsideInteractiveDismissalTransitionAnimationForCancelling]
  -[AVTransition addRunAlongsideAnimationsIfNeeded]
  -[AVTransition _presentationTransitionDidEnd:]
  -[AVTransition _dismissalTransitionDidEnd:]
  -[AVTransition _startOrContinueAnimatorsReversed:]
  -[AVTransition _initialFrameForPresentedView]
  -[AVTransition _finalFrameForPresentedView]
  -[AVTransition _transformForScale:translation:rotation:locationInWindow:sourceRectInContainerView:]
  -[AVTransition _updateCornerAppearanceAttributesOfView:toSourceView:similarity:]
  -[AVTransition _sourceViewFrameInContainerView]
  -[AVTransition setPresentationContext:]
  -[AVTransition transitionAnimator]
  -[AVTransition clientAnimator]
  -[AVTransition allAnimators]


AVImage : UIImage /System/Library/Frameworks/Foundation.framework/Foundation
  // instance methods
  -[AVImage _suppressesAccessibilityHairlineThickening]


AVMicaPackage : NSObject /usr/lib/libSystem.B.dylib <CAMLParserDelegate, CAStateControllerDelegate>
 @property  CAStateController *stateController
 @property  {CGSize=dd} unscaledSize
 @property  long long layoutDirection
 @property  CALayer *rootLayer
 @property  NSString *state
 @property  {CGSize=dd} targetSize
 @property  NSString *packageName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVMicaPackage classSubstitions]
  +[AVMicaPackage asynchronouslyPrepareMicaPackageWithName:layoutDirection:completion:]

  // instance methods
  -[AVMicaPackage .cxx_destruct]
  -[AVMicaPackage state]
  -[AVMicaPackage _setState:]
  -[AVMicaPackage rootLayer]
  -[AVMicaPackage layoutDirection]
  -[AVMicaPackage setLayoutDirection:]
  -[AVMicaPackage unscaledSize]
  -[AVMicaPackage targetSize]
  -[AVMicaPackage setTargetSize:]
  -[AVMicaPackage setRootLayer:]
  -[AVMicaPackage CAMLParser:didFailToFindClassWithName:]
  -[AVMicaPackage initWithPackageName:layoutDirection:]
  -[AVMicaPackage setState:color:]
  -[AVMicaPackage removeCompositingFiltersWithName:]
  -[AVMicaPackage _recursivelyFindSublayerWithName:rootLayer:]
  -[AVMicaPackage _recursivelySetFillColor:rootLayer:]
  -[AVMicaPackage _recursivelyRemoveCompositingFiltersWithName:rootLayer:]
  -[AVMicaPackage transitionToStateWithName:]
  -[AVMicaPackage transitionToStateWithName:onLayer:]
  -[AVMicaPackage availableStates]
  -[AVMicaPackage availableStatesOnLayer:]
  -[AVMicaPackage sublayerWithName:]
  -[AVMicaPackage _loadRootLayerIfNeeded]
  -[AVMicaPackage setUnscaledSize:]
  -[AVMicaPackage packageName]
  -[AVMicaPackage stateController]


AVTurboModePlaybackControlsPlaceholderView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UIView *prominentPlayButtonContainer
 @property  AVButton *prominentPlayButton
 @property  UIView *volumeButtonContainer
 @property  AVVolumeButtonControl *volumeButton
 @property  UIView *contentView
 @property  AVObservationController *observationController
 @property  long long includedControlType
 @property  AVStyleSheet *styleSheet
 @property  AVPlayerController *playerController
 @property  long long preferredUnobscuredArea
 @property  NSString *volumeButtonMicaPackageStateName
 @property  {CGAffineTransform=dddddd} overrideTransformForProminentPlayButton
 @property  NSValue *overrideLayoutMarginsWhenEmbeddedInline

  // instance methods
  -[AVTurboModePlaybackControlsPlaceholderView dealloc]
  -[AVTurboModePlaybackControlsPlaceholderView .cxx_destruct]
  -[AVTurboModePlaybackControlsPlaceholderView setHidden:]
  -[AVTurboModePlaybackControlsPlaceholderView contentView]
  -[AVTurboModePlaybackControlsPlaceholderView layoutSubviews]
  -[AVTurboModePlaybackControlsPlaceholderView hitTest:withEvent:]
  -[AVTurboModePlaybackControlsPlaceholderView playerController]
  -[AVTurboModePlaybackControlsPlaceholderView setPlayerController:]
  -[AVTurboModePlaybackControlsPlaceholderView styleSheet]
  -[AVTurboModePlaybackControlsPlaceholderView setPreferredUnobscuredArea:]
  -[AVTurboModePlaybackControlsPlaceholderView preferredUnobscuredArea]
  -[AVTurboModePlaybackControlsPlaceholderView prominentPlayButton]
  -[AVTurboModePlaybackControlsPlaceholderView setProminentPlayButton:]
  -[AVTurboModePlaybackControlsPlaceholderView setStyleSheet:]
  -[AVTurboModePlaybackControlsPlaceholderView observationController]
  -[AVTurboModePlaybackControlsPlaceholderView setOverrideTransformForProminentPlayButton:]
  -[AVTurboModePlaybackControlsPlaceholderView setOverrideLayoutMarginsWhenEmbeddedInline:]
  -[AVTurboModePlaybackControlsPlaceholderView overrideTransformForProminentPlayButton]
  -[AVTurboModePlaybackControlsPlaceholderView overrideLayoutMarginsWhenEmbeddedInline]
  -[AVTurboModePlaybackControlsPlaceholderView initWithFrame:styleSheet:]
  -[AVTurboModePlaybackControlsPlaceholderView hasVisibleControls]
  -[AVTurboModePlaybackControlsPlaceholderView setIncludedControlType:]
  -[AVTurboModePlaybackControlsPlaceholderView setVolumeButtonMicaPackageStateName:]
  -[AVTurboModePlaybackControlsPlaceholderView _updateFramesAndHitRectInsets]
  -[AVTurboModePlaybackControlsPlaceholderView _frameForIncludedViewType:]
  -[AVTurboModePlaybackControlsPlaceholderView _makeVolumeButtonAndContainerIfNeeded]
  -[AVTurboModePlaybackControlsPlaceholderView _makeVolumeButtonAndContainer]
  -[AVTurboModePlaybackControlsPlaceholderView _makeProminentPlayButtonAndContainerIfNeeded]
  -[AVTurboModePlaybackControlsPlaceholderView _makeProminentPlayButtonAndContainer]
  -[AVTurboModePlaybackControlsPlaceholderView includedControlType]
  -[AVTurboModePlaybackControlsPlaceholderView volumeButtonMicaPackageStateName]
  -[AVTurboModePlaybackControlsPlaceholderView volumeButton]
  -[AVTurboModePlaybackControlsPlaceholderView setVolumeButton:]
  -[AVTurboModePlaybackControlsPlaceholderView prominentPlayButtonContainer]
  -[AVTurboModePlaybackControlsPlaceholderView setProminentPlayButtonContainer:]
  -[AVTurboModePlaybackControlsPlaceholderView volumeButtonContainer]
  -[AVTurboModePlaybackControlsPlaceholderView setVolumeButtonContainer:]


AVPlayerViewControllerAnimationCoordinator : NSObject /usr/lib/libSystem.B.dylib <AVPlayerViewControllerAnimationCoordinator>
 @property  NSMutableArray *animations
 @property  NSMutableArray *completions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVPlayerViewControllerAnimationCoordinator init]
  -[AVPlayerViewControllerAnimationCoordinator .cxx_destruct]
  -[AVPlayerViewControllerAnimationCoordinator animations]
  -[AVPlayerViewControllerAnimationCoordinator completions]
  -[AVPlayerViewControllerAnimationCoordinator addCoordinatedAnimations:completion:]
  -[AVPlayerViewControllerAnimationCoordinator performCoordinatedAnimations]
  -[AVPlayerViewControllerAnimationCoordinator didFinishAnimations:]


AVTimer : NSObject /usr/lib/libSystem.B.dylib
 @property  double interval

  // instance methods
  -[AVTimer init]
  -[AVTimer dealloc]
  -[AVTimer invalidate]
  -[AVTimer .cxx_destruct]
  -[AVTimer interval]
  -[AVTimer initWithTimeInterval:queue:block:repeats:]


AVSecondScreenConnection : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL active
 @property  AVSecondScreen *connectedSecondScreen
 @property  AVDisplayCriteria *preferredDisplayCriteria
 @property  {CGSize=dd} maximumVideoResolution
 @property  BOOL ready
 @property  BOOL playing
 @property  BOOL requiresTVOutScreen
 @property  AVObservationController *observationController
 @property  UIView *contentView
 @property  AVSecondScreenViewController *secondScreenViewController
 @property  AVPlayer *player
 @property  AVPlayerLayer *playerLayer
 @property  BOOL readyToConnect
 @property  UIViewController *contentViewController
 @property  AVSecondScreenDebugAssistant *debugAssistant
 @property  {CGSize=dd} videoDisplaySize
 @property  double videoDisplayScale

  // instance methods
  -[AVSecondScreenConnection dealloc]
  -[AVSecondScreenConnection .cxx_destruct]
  -[AVSecondScreenConnection isActive]
  -[AVSecondScreenConnection isReady]
  -[AVSecondScreenConnection setActive:]
  -[AVSecondScreenConnection contentView]
  -[AVSecondScreenConnection setContentView:]
  -[AVSecondScreenConnection contentViewController]
  -[AVSecondScreenConnection isPlaying]
  -[AVSecondScreenConnection setPlaying:]
  -[AVSecondScreenConnection player]
  -[AVSecondScreenConnection playerLayer]
  -[AVSecondScreenConnection setPlayerLayer:]
  -[AVSecondScreenConnection maximumVideoResolution]
  -[AVSecondScreenConnection preferredDisplayCriteria]
  -[AVSecondScreenConnection observationController]
  -[AVSecondScreenConnection videoDisplaySize]
  -[AVSecondScreenConnection _updatePreferredDisplayCriteria]
  -[AVSecondScreenConnection videoDisplayScale]
  -[AVSecondScreenConnection setSecondScreenViewController:]
  -[AVSecondScreenConnection secondScreenViewController]
  -[AVSecondScreenConnection initWithPlayer:playerLayer:]
  -[AVSecondScreenConnection startUpdates]
  -[AVSecondScreenConnection debugAssistant]
  -[AVSecondScreenConnection setPreferredDisplayCriteria:]
  -[AVSecondScreenConnection setReadyToConnect:]
  -[AVSecondScreenConnection connectWithScreen:active:]
  -[AVSecondScreenConnection _loadSecondScreenViewControllerIfNeeded]
  -[AVSecondScreenConnection _postNotification:oldValue:newValue:]
  -[AVSecondScreenConnection _startObservingPlayer]
  -[AVSecondScreenConnection _updatePreferredDisplayCriteriaFromPreparedAssetIfNeeded:]
  -[AVSecondScreenConnection _determineIsReadyToConnect]
  -[AVSecondScreenConnection _allowsNonAirPlayExternalPlayback]
  -[AVSecondScreenConnection _currentItemIsReadyToPlayVideoOrLoadingWhileActive]
  -[AVSecondScreenConnection isReadyToConnect]
  -[AVSecondScreenConnection connectedSecondScreen]
  -[AVSecondScreenConnection setConnectedSecondScreen:]
  -[AVSecondScreenConnection requiresTVOutScreen]
  -[AVSecondScreenConnection setRequiresTVOutScreen:]
  -[AVSecondScreenConnection setMaximumVideoResolution:]
  -[AVSecondScreenConnection setReady:]


AVSecondScreenContentViewConnection : AVSecondScreenConnection
 @property  AVDisplayCriteria *preferredDisplayCriteria
 @property  BOOL readyToConnect
 @property  BOOL playing
 @property  BOOL requiresTVOutScreen

  // instance methods
  -[AVSecondScreenContentViewConnection initWithContentView:]


AVPlayerVolumeController : NSObject /usr/lib/libSystem.B.dylib <AVVolumeController>
 @property  BOOL changingVolume
 @property  AVObservationController *keyValueObservationController
 @property  AVPlayerController *playerController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  float volume
 @property  float effectiveVolumeLimit
 @property  BOOL currentRouteHasVolumeControl

  // class methods
  +[AVPlayerVolumeController volumeController]

  // instance methods
  -[AVPlayerVolumeController init]
  -[AVPlayerVolumeController dealloc]
  -[AVPlayerVolumeController .cxx_destruct]
  -[AVPlayerVolumeController volume]
  -[AVPlayerVolumeController playerController]
  -[AVPlayerVolumeController setPlayerController:]
  -[AVPlayerVolumeController currentRouteHasVolumeControl]
  -[AVPlayerVolumeController effectiveVolumeLimit]
  -[AVPlayerVolumeController setClientWithIdentifier:prefersSystemVolumeHUDHidden:forWindowSceneSessionWithIdentifier:]
  -[AVPlayerVolumeController beginChangingVolumeForWindowSceneSessionID:]
  -[AVPlayerVolumeController endChangingVolume]
  -[AVPlayerVolumeController setTargetVolume:]
  -[AVPlayerVolumeController isChangingVolume]
  -[AVPlayerVolumeController setChangingVolume:]
  -[AVPlayerVolumeController keyValueObservationController]
  -[AVPlayerVolumeController setKeyValueObservationController:]


AVPresentationContainerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPresentationContainerViewLayer *layer
 @property  BOOL counterRotatingContentView
 @property  BOOL beingPresented
 @property  BOOL beingDismissed
 @property  long long fromOrientation
 @property  long long toOrientation
 @property  BOOL willBeginOrientationChange
 @property  UIView *presentationContainerContentView
 @property  AVPresentationContainerViewAppearanceProxy *appearanceProxy
 @property  BOOL wantsAppearanceConfigValues

  // class methods
  +[AVPresentationContainerView layerClass]

  // instance methods
  -[AVPresentationContainerView .cxx_destruct]
  -[AVPresentationContainerView setBackgroundColor:]
  -[AVPresentationContainerView setClipsToBounds:]
  -[AVPresentationContainerView layoutSubviews]
  -[AVPresentationContainerView isBeingPresented]
  -[AVPresentationContainerView isBeingDismissed]
  -[AVPresentationContainerView _setContinuousCornerRadius:]
  -[AVPresentationContainerView _cornerRadius]
  -[AVPresentationContainerView _setCornerRadius:]
  -[AVPresentationContainerView _continuousCornerRadius]
  -[AVPresentationContainerView fromOrientation]
  -[AVPresentationContainerView toOrientation]
  -[AVPresentationContainerView setToOrientation:]
  -[AVPresentationContainerView setFromOrientation:]
  -[AVPresentationContainerView avkit_overrideLayoutMarginsForCounterRotation]
  -[AVPresentationContainerView avkit_isVideoGravityFrozen]
  -[AVPresentationContainerView avkit_isCounterRotatedForTransition]
  -[AVPresentationContainerView avkit_isBeingDismissed]
  -[AVPresentationContainerView appearanceProxy]
  -[AVPresentationContainerView setWantsAppearanceConfigValues:]
  -[AVPresentationContainerView wantsAppearanceConfigValues]
  -[AVPresentationContainerView willBeginAdjustingOrientation]
  -[AVPresentationContainerView avkit_overrideLayoutMarginsForInterfaceOrientation:]
  -[AVPresentationContainerView willStartPresentationTransitionFromInterfaceOrientation:toOrientation:needsCounterRotation:]
  -[AVPresentationContainerView willStartDismissalTransitionFromInterfaceOrientation:toOrientation:needsCounterRotation:]
  -[AVPresentationContainerView didStopTransition]
  -[AVPresentationContainerView _contentTransform]
  -[AVPresentationContainerView _radiansForCounterRotation]
  -[AVPresentationContainerView isCounterRotatingContentView]
  -[AVPresentationContainerView setCounterRotatingContentView:]
  -[AVPresentationContainerView presentationContainerContentView]
  -[AVPresentationContainerView setPresentationContainerContentView:]
  -[AVPresentationContainerView setBeingPresented:]
  -[AVPresentationContainerView setBeingDismissed:]
  -[AVPresentationContainerView willBeginOrientationChange]
  -[AVPresentationContainerView setWillBeginOrientationChange:]


AVPresentationContainerViewAppearanceProxy : NSObject /usr/lib/libSystem.B.dylib
 @property  UIView *actualView
 @property  NSString *cornerCurve
 @property  unsigned long maskedCorners
 @property  double cornerRadius
 @property  UIColor *backgroundColor
 @property  BOOL clipsToBounds

  // instance methods
  -[AVPresentationContainerViewAppearanceProxy .cxx_destruct]
  -[AVPresentationContainerViewAppearanceProxy backgroundColor]
  -[AVPresentationContainerViewAppearanceProxy setBackgroundColor:]
  -[AVPresentationContainerViewAppearanceProxy setCornerRadius:]
  -[AVPresentationContainerViewAppearanceProxy setClipsToBounds:]
  -[AVPresentationContainerViewAppearanceProxy setMaskedCorners:]
  -[AVPresentationContainerViewAppearanceProxy setCornerCurve:]
  -[AVPresentationContainerViewAppearanceProxy cornerRadius]
  -[AVPresentationContainerViewAppearanceProxy clipsToBounds]
  -[AVPresentationContainerViewAppearanceProxy cornerCurve]
  -[AVPresentationContainerViewAppearanceProxy maskedCorners]
  -[AVPresentationContainerViewAppearanceProxy actualView]
  -[AVPresentationContainerViewAppearanceProxy setActualView:]


AVPresentationContainerViewLayer : CALayer /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration
 @property  AVPresentationContainerViewAppearanceProxy *appearanceProxy
 @property  BOOL wantsAppearanceConfigValues

  // instance methods
  -[AVPresentationContainerViewLayer .cxx_destruct]
  -[AVPresentationContainerViewLayer setCornerRadius:]
  -[AVPresentationContainerViewLayer setMasksToBounds:]
  -[AVPresentationContainerViewLayer setMaskedCorners:]
  -[AVPresentationContainerViewLayer setCornerCurve:]
  -[AVPresentationContainerViewLayer cornerRadius]
  -[AVPresentationContainerViewLayer cornerCurve]
  -[AVPresentationContainerViewLayer masksToBounds]
  -[AVPresentationContainerViewLayer maskedCorners]
  -[AVPresentationContainerViewLayer setContinuousCorners:]
  -[AVPresentationContainerViewLayer continuousCorners]
  -[AVPresentationContainerViewLayer appearanceProxy]
  -[AVPresentationContainerViewLayer setWantsAppearanceConfigValues:]
  -[AVPresentationContainerViewLayer wantsAppearanceConfigValues]


AVTransportControlsView : AVView <AVScrubberDelegate>
 @property  AVBackdropView *backdropView
 @property  AVBackdropView *detachedExtraContentBackdropView
 @property  NSArray *doubleRowLayoutConstraints
 @property  NSLayoutConstraint *scrubberInstructionsDoubleRowActiveConstraint
 @property  AVLabel *liveBroadcastLabel
 @property  AVLabel *liveBroadcastScrubberLabel
 @property  AVTouchIgnoringView *embeddedExtraContentContainer
 @property  UILabel *scrubInstructionsLabel
 @property  UILabel *scrubInstructionsBackdropLabel
 @property  NSTimer *scrubInstructionsTimer
 @property  float scrubberValueWhenScrubInstructionsTimerBegan
 @property  BOOL canShowScrubInstructions
 @property  NSArray *singleRowViews
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL removed
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance
 @property  BOOL backdropViewNeedsLayout
 @property  <AVTransportControlsViewDelegate> *delegate
 @property  AVStyleSheet *styleSheet
 @property  BOOL doubleRowLayoutEnabled
 @property  BOOL showsLoadingIndicator
 @property  BOOL showsLiveStreamingControls
 @property  BOOL liveStreamingControlsIncludeScrubber
 @property  double minimumRequiredWidth
 @property  AVScrubber *scrubber
 @property  AVLabel *elapsedTimeLabel
 @property  AVLabel *timeRemainingLabel
 @property  AVButton *standardPlayPauseButton
 @property  AVButton *skipForwardButton
 @property  AVButton *skipBackButton
 @property  AVButton *startLeftwardContentTransitionButton
 @property  AVButton *startRightwardContentTransitionButton
 @property  AVPlaybackControlsRoutePickerView *routePickerView
 @property  AVButton *mediaSelectionButton
 @property  NSArray *customItems
 @property  UIView *customContentTransitioningInfoPanel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVTransportControlsView requiresConstraintBasedLayout]

  // instance methods
  -[AVTransportControlsView delegate]
  -[AVTransportControlsView setDelegate:]
  -[AVTransportControlsView .cxx_destruct]
  -[AVTransportControlsView intrinsicContentSize]
  -[AVTransportControlsView traitCollectionDidChange:]
  -[AVTransportControlsView layoutSubviews]
  -[AVTransportControlsView updateConstraints]
  -[AVTransportControlsView backdropView]
  -[AVTransportControlsView isCollapsed]
  -[AVTransportControlsView setCollapsed:]
  -[AVTransportControlsView setExtrinsicContentSize:]
  -[AVTransportControlsView extrinsicContentSize]
  -[AVTransportControlsView beginScrubbing:]
  -[AVTransportControlsView endScrubbing:]
  -[AVTransportControlsView customItems]
  -[AVTransportControlsView setCustomItems:]
  -[AVTransportControlsView styleSheet]
  -[AVTransportControlsView _showScrubInstructions]
  -[AVTransportControlsView isRemoved]
  -[AVTransportControlsView setStyleSheet:]
  -[AVTransportControlsView isCollapsedOrExcluded]
  -[AVTransportControlsView setIncluded:]
  -[AVTransportControlsView setRemoved:]
  -[AVTransportControlsView isIncluded]
  -[AVTransportControlsView hasAlternateAppearance]
  -[AVTransportControlsView setHasAlternateAppearance:]
  -[AVTransportControlsView hasFullScreenAppearance]
  -[AVTransportControlsView setHasFullScreenAppearance:]
  -[AVTransportControlsView setShowsLoadingIndicator:]
  -[AVTransportControlsView showsLoadingIndicator]
  -[AVTransportControlsView setCustomContentTransitioningInfoPanel:]
  -[AVTransportControlsView customContentTransitioningInfoPanel]
  -[AVTransportControlsView initWithFrame:styleSheet:]
  -[AVTransportControlsView scrubberSlowKnobMovementDetected:]
  -[AVTransportControlsView setDoubleRowLayoutEnabled:]
  -[AVTransportControlsView setShowsLiveStreamingControls:]
  -[AVTransportControlsView setLiveStreamingControlsIncludeScrubber:]
  -[AVTransportControlsView scrubberValueChanged:]
  -[AVTransportControlsView _ensureLayoutConstraints]
  -[AVTransportControlsView _updateFontSizes]
  -[AVTransportControlsView _updateScrubInstructionsLabelsText]
  -[AVTransportControlsView _scrubInstructionsAttributedText]
  -[AVTransportControlsView _updateCustomContentTransitioningInfoPanelLayout]
  -[AVTransportControlsView singleRowViews]
  -[AVTransportControlsView canShowScrubInstructions]
  -[AVTransportControlsView isDoubleRowLayoutEnabled]
  -[AVTransportControlsView showsLiveStreamingControls]
  -[AVTransportControlsView liveStreamingControlsIncludeScrubber]
  -[AVTransportControlsView minimumRequiredWidth]
  -[AVTransportControlsView scrubber]
  -[AVTransportControlsView elapsedTimeLabel]
  -[AVTransportControlsView timeRemainingLabel]
  -[AVTransportControlsView standardPlayPauseButton]
  -[AVTransportControlsView skipForwardButton]
  -[AVTransportControlsView skipBackButton]
  -[AVTransportControlsView startLeftwardContentTransitionButton]
  -[AVTransportControlsView startRightwardContentTransitionButton]
  -[AVTransportControlsView routePickerView]
  -[AVTransportControlsView mediaSelectionButton]
  -[AVTransportControlsView detachedExtraContentBackdropView]
  -[AVTransportControlsView setDetachedExtraContentBackdropView:]
  -[AVTransportControlsView doubleRowLayoutConstraints]
  -[AVTransportControlsView scrubberInstructionsDoubleRowActiveConstraint]
  -[AVTransportControlsView liveBroadcastLabel]
  -[AVTransportControlsView liveBroadcastScrubberLabel]
  -[AVTransportControlsView embeddedExtraContentContainer]
  -[AVTransportControlsView scrubInstructionsLabel]
  -[AVTransportControlsView scrubInstructionsBackdropLabel]
  -[AVTransportControlsView scrubInstructionsTimer]
  -[AVTransportControlsView setScrubInstructionsTimer:]
  -[AVTransportControlsView scrubberValueWhenScrubInstructionsTimerBegan]
  -[AVTransportControlsView setScrubberValueWhenScrubInstructionsTimerBegan:]
  -[AVTransportControlsView backdropViewNeedsLayout]
  -[AVTransportControlsView setBackdropViewNeedsLayout:]


AVDefaultBehaviorContext : NSObject /usr/lib/libSystem.B.dylib <AVBehaviorContext>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  AVPlayerViewController *playerViewController

  // instance methods
  -[AVDefaultBehaviorContext .cxx_destruct]
  -[AVDefaultBehaviorContext playerViewController]
  -[AVDefaultBehaviorContext initWithAVKitOwner:]


AVBehaviorStorage : NSObject /usr/lib/libSystem.B.dylib
 @property  id AVKitOwner
 @property  NSMapTable *behaviorsAndBehaviorContexts

  // instance methods
  -[AVBehaviorStorage .cxx_destruct]
  -[AVBehaviorStorage removeBehavior:]
  -[AVBehaviorStorage addBehavior:]
  -[AVBehaviorStorage behaviors]
  -[AVBehaviorStorage initWithAVKitOwner:]
  -[AVBehaviorStorage enumerateAllBehaviorsUsingBlock:]
  -[AVBehaviorStorage enumerateAllBehaviorsConformingToProtocol:usingBlock:]
  -[AVBehaviorStorage behaviorOfClass:]
  -[AVBehaviorStorage enumerateAllBehaviorContextsUsingBlock:]
  -[AVBehaviorStorage enumerateAllBehaviorContextsConformingToProtocol:usingBlock:]
  -[AVBehaviorStorage enumerateAllBehaviorContextsImplementingSelector:forProtocol:usingBlock:]
  -[AVBehaviorStorage behaviorContextOfClass:]
  -[AVBehaviorStorage AVKitOwner]
  -[AVBehaviorStorage setAVKitOwner:]
  -[AVBehaviorStorage behaviorsAndBehaviorContexts]


AVPresentationContextTransition : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL wasInitiallyInteractive
 @property  BOOL hasAVKitAnimator
 @property  BOOL wasCancelledWithInactiveScene
 @property  unsigned long presenterSupportedOrientations
 @property  long long initialInterfaceOrientation
 @property  long long finalInterfaceOrientation
 @property  BOOL isRotated
 @property  long long interfaceRotation
 @property  {CGAffineTransform=dddddd} rotationTransform
 @property  {CGAffineTransform=dddddd} counterRotationTransform

  // instance methods
  -[AVPresentationContextTransition isRotated]
  -[AVPresentationContextTransition initialInterfaceOrientation]
  -[AVPresentationContextTransition setInitialInterfaceOrientation:]
  -[AVPresentationContextTransition wasInitiallyInteractive]
  -[AVPresentationContextTransition rotationTransform]
  -[AVPresentationContextTransition counterRotationTransform]
  -[AVPresentationContextTransition interfaceRotation]
  -[AVPresentationContextTransition presenterSupportsOrientation:]
  -[AVPresentationContextTransition setWasInitiallyInteractive:]
  -[AVPresentationContextTransition hasAVKitAnimator]
  -[AVPresentationContextTransition setHasAVKitAnimator:]
  -[AVPresentationContextTransition wasCancelledWithInactiveScene]
  -[AVPresentationContextTransition setWasCancelledWithInactiveScene:]
  -[AVPresentationContextTransition presenterSupportedOrientations]
  -[AVPresentationContextTransition setPresenterSupportedOrientations:]
  -[AVPresentationContextTransition finalInterfaceOrientation]
  -[AVPresentationContextTransition setFinalInterfaceOrientation:]


AVHomeIPCameraPlayerController : AVPlayerController
 @property  <AVHomeIPCameraActionButtonHandling> *delegate
 @property  {CGSize=dd} presentationSize
 @property  BOOL muted

  // instance methods
  -[AVHomeIPCameraPlayerController delegate]
  -[AVHomeIPCameraPlayerController setDelegate:]
  -[AVHomeIPCameraPlayerController .cxx_destruct]
  -[AVHomeIPCameraPlayerController status]
  -[AVHomeIPCameraPlayerController setVolume:]
  -[AVHomeIPCameraPlayerController isPlaying]
  -[AVHomeIPCameraPlayerController hasContent]
  -[AVHomeIPCameraPlayerController setMuted:]
  -[AVHomeIPCameraPlayerController isMuted]
  -[AVHomeIPCameraPlayerController timeControlStatus]
  -[AVHomeIPCameraPlayerController hasSeekableLiveStreamingContent]
  -[AVHomeIPCameraPlayerController hasLiveStreamingContent]
  -[AVHomeIPCameraPlayerController togglePlaybackEvenWhenInBackground:]
  -[AVHomeIPCameraPlayerController hasEnabledVideo]
  -[AVHomeIPCameraPlayerController isPictureInPicturePossible]
  -[AVHomeIPCameraPlayerController presentationSize]
  -[AVHomeIPCameraPlayerController setPresentationSize:]


AVPlaybackControlsController : NSObject /usr/lib/libSystem.B.dylib <AVTransportControlsViewDelegate, AVRoutePickerViewInternalDelegate, AVPlayerViewControllerContentViewDelegate, AVScrubbing>
 @property  AVPlayerViewController *playerViewController
 @property  AVPlaybackControlsView *playbackControlsView
 @property  AVTurboModePlaybackControlsPlaceholderView *turboModePlaybackControlsPlaceholderView
 @property  AVNowPlayingInfoController *nowPlayingInfoControllerIfLoaded
 @property  AVObservationController *observationController
 @property  AVObservationController *playbackControlsObservationController
 @property  AVPlayerControllerTimeResolver *timeResolver
 @property  AVTimeFormatter *elapsedTimeFormatter
 @property  AVTimeFormatter *remainingTimeFormatter
 @property  UIAlertController *routePickerAlertController
 @property  AVRouteDetectorCoordinator *routeDetectorCoordinator
 @property  id AVRouteDetectorCoordinatorMultipleRoutesDetectedObserver
 @property  NSTimer *loadingIndicatorTimer
 @property  UIViewPropertyAnimator *collapseExpandSliderAnimator
 @property  <AVVolumeController> *volumeController
 @property  AVPlayerControllerVolumeAnimator *volumeAnimator
 @property  NSUUID *playerMuteFadeAnimationID
 @property  AVPlaybackControlsVisibilityControllerItem *playbackControlsContainerVisibilityItem
 @property  AVPlaybackControlsVisibilityControllerItem *volumeControlsContainerVisibilityItem
 @property  NSArray *allVisibilityControllerItems
 @property  BOOL showsMediaSelectionButton
 @property  BOOL showsSkipButtons
 @property  BOOL showsStartContentTransitionButtons
 @property  BOOL showsProminentPlayButton
 @property  BOOL playButtonsShowPauseGlyph
 @property  BOOL prominentPlayButtonCanShowPauseGlyph
 @property  BOOL showsRoutePickerView
 @property  BOOL showsTransportControls
 @property  BOOL canShowLoadingIndicator
 @property  BOOL seekingEnabled
 @property  BOOL showsLoadingIndicator
 @property  BOOL prefersVolumeSliderExpanded
 @property  BOOL canIncludeVideoGravityButton
 @property  NSNumber *pendingOrientationChange
 @property  BOOL hasStartedUpdates
 @property  BOOL needsTimeResolver
 @property  BOOL coveringWindow
 @property  BOOL fullScreen
 @property  BOOL hasPlaybackBegunSincePlayerControllerBecameReadyToPlay
 @property  BOOL hasBecomeReadyToPlay
 @property  BOOL multipleRoutesDetected
 @property  double minimumTime
 @property  double maximumTime
 @property  double targetTime
 @property  double currentTime
 @property  double loadingIndicatorTimerDelay
 @property  BOOL resumingUpdates
 @property  BOOL prefersMuted
 @property  BOOL playbackSuspendedForScrubbing
 @property  long long timeControlStatus
 @property  BOOL hasSeekableLiveStreamingContent
 @property  BOOL scrubbingOrSeeking
 @property  BOOL shouldIgnoreTimeResolverUpdates
 @property  long long videoGravityButtonType
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} playbackViewFrame
 @property  BOOL videoScaled
 @property  NSString *uniqueIdentifer
 @property  NSString *windowSceneSessionIdentifier
 @property  AVPlayerController *playerController
 @property  BOOL playerViewControllerIsBeingTransitionedWithResizing
 @property  BOOL playerViewControllerIsPresentingFullScreen
 @property  BOOL playerViewControllerIsPresentedFullScreen
 @property  BOOL playerViewControllerHasInvalidViewControllerHierarchy
 @property  BOOL entersFullScreenWhenPlaybackBegins
 @property  BOOL shouldEnterFullScreenWhenPlaybackBegins
 @property  long long preferredUnobscuredArea
 @property  BOOL allowsEnteringFullScreen
 @property  BOOL showsMinimalPlaybackControlsWhenEmbeddedInline
 @property  BOOL inlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused
 @property  BOOL volumeControlsCanShowSlider
 @property  NSArray *customControlItems
 @property  BOOL showsPictureInPictureButton
 @property  BOOL showsPlaybackControls
 @property  BOOL hasCustomPlaybackControls
 @property  BOOL canIncludePlaybackControlsWhenInline
 @property  BOOL showsVideoGravityButton
 @property  BOOL requiresLinearPlayback
 @property  BOOL updatesNowPlayingInfoCenter
 @property  BOOL showsDoneButtonWhenFullScreen
 @property  BOOL playbackControlsIncludeTransportControls
 @property  BOOL playbackControlsIncludeDisplayModeControls
 @property  BOOL playbackControlsIncludeVolumeControls
 @property  BOOL playbackControlsIncludeStartContentTransitionButtons
 @property  BOOL playbackControlsShouldControlSystemVolume
 @property  BOOL forcePlaybackControlsHidden
 @property  BOOL showsTimecodes
 @property  @? playButtonHandlerForLazyPlayerLoading
 @property  BOOL startLeftwardContentTransitionButtonEnabled
 @property  BOOL startRightwardContentTransitionButtonEnabled
 @property  @? contentTransitionAction
 @property  AVPictureInPictureController *pictureInPictureController
 @property  AVSecondScreenContentViewConnection *secondScreenConnection
 @property  BOOL tapGestureRecognizersCanReceiveTouches
 @property  BOOL entersFullScreenWhenTapped
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVPlaybackControlsController keyPathsForValuesAffectingFullScreen]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsRoutePickerView]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsProminentPlayButton]
  +[AVPlaybackControlsController keyPathsForValuesAffectingProminentPlayButtonCanShowPauseGlyph]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsTransportControls]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShouldEnterFullScreenWhenPlaybackBegins]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsMediaSelectionButton]
  +[AVPlaybackControlsController keyPathsForValuesAffectingCurrentTime]
  +[AVPlaybackControlsController keyPathsForValuesAffectingMinimumTime]
  +[AVPlaybackControlsController keyPathsForValuesAffectingMaximumTime]
  +[AVPlaybackControlsController keyPathsForValuesAffectingSeekingEnabled]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsSkipButtons]
  +[AVPlaybackControlsController keyPathsForValuesAffectingShowsStartContentTransitionButtons]
  +[AVPlaybackControlsController keyPathsForValuesAffectingCanShowLoadingIndicator]
  +[AVPlaybackControlsController keyPathsForValuesAffectingPlayButtonsShowPauseGlyph]
  +[AVPlaybackControlsController keyPathsForValuesAffectingNeedsTimeResolver]

  // instance methods
  -[AVPlaybackControlsController dealloc]
  -[AVPlaybackControlsController .cxx_destruct]
  -[AVPlaybackControlsController currentTime]
  -[AVPlaybackControlsController isFullScreen]
  -[AVPlaybackControlsController timeControlStatus]
  -[AVPlaybackControlsController multipleRoutesDetected]
  -[AVPlaybackControlsController hasSeekableLiveStreamingContent]
  -[AVPlaybackControlsController playerController]
  -[AVPlaybackControlsController setPlayerController:]
  -[AVPlaybackControlsController showsPlaybackControls]
  -[AVPlaybackControlsController setShowsPlaybackControls:]
  -[AVPlaybackControlsController beginScrubbing]
  -[AVPlaybackControlsController endScrubbing]
  -[AVPlaybackControlsController pictureInPictureController]
  -[AVPlaybackControlsController setVolumeController:]
  -[AVPlaybackControlsController volumeController]
  -[AVPlaybackControlsController setUpdatesNowPlayingInfoCenter:]
  -[AVPlaybackControlsController setShowsMinimalPlaybackControlsWhenEmbeddedInline:]
  -[AVPlaybackControlsController setAllowsEnteringFullScreen:]
  -[AVPlaybackControlsController setPreferredUnobscuredArea:]
  -[AVPlaybackControlsController setPlayButtonHandlerForLazyPlayerLoading:]
  -[AVPlaybackControlsController updatesNowPlayingInfoCenter]
  -[AVPlaybackControlsController showsMinimalPlaybackControlsWhenEmbeddedInline]
  -[AVPlaybackControlsController allowsEnteringFullScreen]
  -[AVPlaybackControlsController playButtonHandlerForLazyPlayerLoading]
  -[AVPlaybackControlsController preferredUnobscuredArea]
  -[AVPlaybackControlsController playerViewController]
  -[AVPlaybackControlsController observationController]
  -[AVPlaybackControlsController setMultipleRoutesDetected:]
  -[AVPlaybackControlsController secondScreenConnection]
  -[AVPlaybackControlsController setSecondScreenConnection:]
  -[AVPlaybackControlsController isVideoScaled]
  -[AVPlaybackControlsController setVideoScaled:]
  -[AVPlaybackControlsController setRequiresLinearPlayback:]
  -[AVPlaybackControlsController requiresLinearPlayback]
  -[AVPlaybackControlsController setShowsLoadingIndicator:]
  -[AVPlaybackControlsController showsLoadingIndicator]
  -[AVPlaybackControlsController endChangingVolume]
  -[AVPlaybackControlsController setCanIncludePlaybackControlsWhenInline:]
  -[AVPlaybackControlsController setShowsTimecodes:]
  -[AVPlaybackControlsController hasCustomPlaybackControls]
  -[AVPlaybackControlsController playbackControlsIncludeTransportControls]
  -[AVPlaybackControlsController setPlaybackControlsIncludeTransportControls:]
  -[AVPlaybackControlsController playbackControlsIncludeDisplayModeControls]
  -[AVPlaybackControlsController setPlaybackControlsIncludeDisplayModeControls:]
  -[AVPlaybackControlsController setPlaybackControlsIncludeVolumeControls:]
  -[AVPlaybackControlsController volumeControlsCanShowSlider]
  -[AVPlaybackControlsController setVolumeControlsCanShowSlider:]
  -[AVPlaybackControlsController setEntersFullScreenWhenPlaybackBegins:]
  -[AVPlaybackControlsController setCustomControlItems:]
  -[AVPlaybackControlsController entersFullScreenWhenPlaybackBegins]
  -[AVPlaybackControlsController volumeAnimator]
  -[AVPlaybackControlsController setVolumeAnimator:]
  -[AVPlaybackControlsController showsTimecodes]
  -[AVPlaybackControlsController playbackControlsIncludeVolumeControls]
  -[AVPlaybackControlsController customControlItems]
  -[AVPlaybackControlsController canIncludePlaybackControlsWhenInline]
  -[AVPlaybackControlsController entersFullScreenWhenTapped]
  -[AVPlaybackControlsController setPlaybackControlsShouldControlSystemVolume:]
  -[AVPlaybackControlsController playbackControlsShouldControlSystemVolume]
  -[AVPlaybackControlsController scrubToTime:resolution:]
  -[AVPlaybackControlsController routePickerViewDidEndPresentingRoutes:]
  -[AVPlaybackControlsController overrideRouteSharingPolicyForRoutePickerView:]
  -[AVPlaybackControlsController overrideRoutingContextUIDForRoutePickerView:]
  -[AVPlaybackControlsController routePickerViewWillBeginPresentingRoutes:]
  -[AVPlaybackControlsController targetTime]
  -[AVPlaybackControlsController playerViewControllerContentView:willLoadPlaybackControlsView:]
  -[AVPlaybackControlsController playerViewControllerContentView:willLoadTurboModePlaceholderView:]
  -[AVPlaybackControlsController playerViewControllerContentViewIsPlayingOnSecondScreen:]
  -[AVPlaybackControlsController playerViewControllerContentViewPlaybackContentContainerViewChanged:]
  -[AVPlaybackControlsController playerViewControllerContentViewDidLayoutSubviews:]
  -[AVPlaybackControlsController playerViewControllerContentViewDidMoveToSuperviewOrWindow:]
  -[AVPlaybackControlsController playerViewControllerContentViewShouldApplyAutomaticVideoGravity:]
  -[AVPlaybackControlsController playerViewControllerContentViewEdgeInsetsForLetterboxedVideo:]
  -[AVPlaybackControlsController playerViewControllerContentViewDidChangeVideoGravity:]
  -[AVPlaybackControlsController playerViewControllerContentViewHasActiveTransition:]
  -[AVPlaybackControlsController playerViewControllerContentViewIsBeingTransitionedFromFullScreen:]
  -[AVPlaybackControlsController playerViewControllerContentViewOverrideLayoutClass:]
  -[AVPlaybackControlsController playerViewControllerContentViewDidUpdateScrollingStatus:]
  -[AVPlaybackControlsController transportControlsNeedsLayoutIfNeeded:]
  -[AVPlaybackControlsController transportControls:scrubberDidBeginScrubbing:]
  -[AVPlaybackControlsController transportControls:scrubberDidScrub:]
  -[AVPlaybackControlsController transportControls:scrubberDidEndScrubbing:]
  -[AVPlaybackControlsController initWithPlayerViewController:]
  -[AVPlaybackControlsController startUpdatesIfNeeded]
  -[AVPlaybackControlsController toggleMuted]
  -[AVPlaybackControlsController setPrefersVolumeSliderExpanded:]
  -[AVPlaybackControlsController setPlayerViewControllerIsPresentingFullScreen:]
  -[AVPlaybackControlsController setPlayerViewControllerIsPresentedFullScreen:]
  -[AVPlaybackControlsController setPlayerViewControllerIsBeingTransitionedWithResizing:]
  -[AVPlaybackControlsController setHasCustomPlaybackControls:]
  -[AVPlaybackControlsController setShowsDoneButtonWhenFullScreen:]
  -[AVPlaybackControlsController setShowsVideoGravityButton:]
  -[AVPlaybackControlsController setCoveringWindow:]
  -[AVPlaybackControlsController setCanIncludeVideoGravityButton:]
  -[AVPlaybackControlsController setShowsPictureInPictureButton:]
  -[AVPlaybackControlsController showsRoutePickerView]
  -[AVPlaybackControlsController showsProminentPlayButton]
  -[AVPlaybackControlsController prominentPlayButtonCanShowPauseGlyph]
  -[AVPlaybackControlsController showsTransportControls]
  -[AVPlaybackControlsController shouldEnterFullScreenWhenPlaybackBegins]
  -[AVPlaybackControlsController showsMediaSelectionButton]
  -[AVPlaybackControlsController minimumTime]
  -[AVPlaybackControlsController maximumTime]
  -[AVPlaybackControlsController isSeekingEnabled]
  -[AVPlaybackControlsController showsSkipButtons]
  -[AVPlaybackControlsController showsStartContentTransitionButtons]
  -[AVPlaybackControlsController canShowLoadingIndicator]
  -[AVPlaybackControlsController playButtonsShowPauseGlyph]
  -[AVPlaybackControlsController needsTimeResolver]
  -[AVPlaybackControlsController tapGestureRecognizersCanReceiveTouches]
  -[AVPlaybackControlsController playbackControlsViewDidLoad:]
  -[AVPlaybackControlsController turboModePlaybackControlsPlaceholderViewDidLoad:]
  -[AVPlaybackControlsController secondScreenConnectionDidBecomeActive:]
  -[AVPlaybackControlsController secondScreenConnectionDidResignActive:]
  -[AVPlaybackControlsController handleVolumeChange:]
  -[AVPlaybackControlsController handleCurrentRouteSupportsVolumeControlChanged:]
  -[AVPlaybackControlsController volumeSliderValueDidChange:]
  -[AVPlaybackControlsController volumeButtonTapTriggered:]
  -[AVPlaybackControlsController volumeButtonLongPressTriggered:]
  -[AVPlaybackControlsController beginChangingVolume]
  -[AVPlaybackControlsController volumeButtonPanChanged:]
  -[AVPlaybackControlsController _prefersVolumeSliderExpandedAutomatically]
  -[AVPlaybackControlsController _showOrHideAudioControls]
  -[AVPlaybackControlsController _showOrHideDisplayModeControls]
  -[AVPlaybackControlsController _updateVolumeButtonGlyph]
  -[AVPlaybackControlsController _volumeButtonMicaPackageState]
  -[AVPlaybackControlsController _updateVolumeSliderValueWithSystemVolume:animated:]
  -[AVPlaybackControlsController prominentPlayButtonTouchUpInside:]
  -[AVPlaybackControlsController skipButtonTouchUpInside:]
  -[AVPlaybackControlsController skipButtonLongPressTriggered:]
  -[AVPlaybackControlsController skipButtonLongPressEnded:]
  -[AVPlaybackControlsController skipButtonForcePressChanged:]
  -[AVPlaybackControlsController startContentTransitionButtonTouchUpInside:]
  -[AVPlaybackControlsController _bindEnabledStateOfControls:toKeyPath:]
  -[AVPlaybackControlsController _bindInclusionOfControlItems:toKeyPath:]
  -[AVPlaybackControlsController _hasVisibilityControllerItemThatPrefersVisible]
  -[AVPlaybackControlsController _observeBoolForKeyPath:usingKeyValueObservationController:observationHandler:]
  -[AVPlaybackControlsController _seekByTimeInterval:toleranceBefore:toleranceAfter:]
  -[AVPlaybackControlsController setForcePlaybackControlsHidden:]
  -[AVPlaybackControlsController _updatePlaybackControlsVisibleAndObservingUpdates]
  -[AVPlaybackControlsController _startObservingForPlaybackViewUpdates]
  -[AVPlaybackControlsController _startObservingPotentiallyUnimplementedPlayerControllerProperties]
  -[AVPlaybackControlsController _wantsRouteDetectionEnabled]
  -[AVPlaybackControlsController _updateSkipButtonsEnableLongPress]
  -[AVPlaybackControlsController updateControlsInclusion]
  -[AVPlaybackControlsController _updateControlInclusion]
  -[AVPlaybackControlsController _updateContainerInclusion]
  -[AVPlaybackControlsController _updateOrCreateTimeResolverIfNeeded]
  -[AVPlaybackControlsController _updateScrubberAndTimeLabels]
  -[AVPlaybackControlsController _updateVideoGravityButtonType]
  -[AVPlaybackControlsController _updateHasPlaybackBegunSincePlayerControllerBecameReadyToPlay:playing:userDidEndTappingProminentPlayButton:]
  -[AVPlaybackControlsController _updatePrefersInspectionSuspended]
  -[AVPlaybackControlsController _updateNowPlayingInfoCenter]
  -[AVPlaybackControlsController _updateEdgeInsetsForLetterboxedContentInContentView:]
  -[AVPlaybackControlsController _updateSecondScreenConnectionReadyToConnect]
  -[AVPlaybackControlsController playerViewControllerIsBeingTransitionedWithResizing]
  -[AVPlaybackControlsController playerViewControllerIsPresentingFullScreen]
  -[AVPlaybackControlsController playerViewControllerIsPresentedFullScreen]
  -[AVPlaybackControlsController playerViewControllerHasInvalidViewControllerHierarchy]
  -[AVPlaybackControlsController setPlayerViewControllerHasInvalidViewControllerHierarchy:]
  -[AVPlaybackControlsController inlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused]
  -[AVPlaybackControlsController setInlinePlaybackControlsAlwaysShowLargePlayButtonWhenPaused:]
  -[AVPlaybackControlsController showsPictureInPictureButton]
  -[AVPlaybackControlsController showsVideoGravityButton]
  -[AVPlaybackControlsController showsDoneButtonWhenFullScreen]
  -[AVPlaybackControlsController playbackControlsIncludeStartContentTransitionButtons]
  -[AVPlaybackControlsController setPlaybackControlsIncludeStartContentTransitionButtons:]
  -[AVPlaybackControlsController forcePlaybackControlsHidden]
  -[AVPlaybackControlsController isStartLeftwardContentTransitionButtonEnabled]
  -[AVPlaybackControlsController setStartLeftwardContentTransitionButtonEnabled:]
  -[AVPlaybackControlsController isStartRightwardContentTransitionButtonEnabled]
  -[AVPlaybackControlsController setStartRightwardContentTransitionButtonEnabled:]
  -[AVPlaybackControlsController contentTransitionAction]
  -[AVPlaybackControlsController setContentTransitionAction:]
  -[AVPlaybackControlsController setPictureInPictureController:]
  -[AVPlaybackControlsController nowPlayingInfoControllerIfLoaded]
  -[AVPlaybackControlsController setNowPlayingInfoControllerIfLoaded:]
  -[AVPlaybackControlsController playbackControlsView]
  -[AVPlaybackControlsController setPlaybackControlsView:]
  -[AVPlaybackControlsController turboModePlaybackControlsPlaceholderView]
  -[AVPlaybackControlsController setTurboModePlaybackControlsPlaceholderView:]
  -[AVPlaybackControlsController playbackControlsObservationController]
  -[AVPlaybackControlsController setPlaybackControlsObservationController:]
  -[AVPlaybackControlsController timeResolver]
  -[AVPlaybackControlsController setTimeResolver:]
  -[AVPlaybackControlsController elapsedTimeFormatter]
  -[AVPlaybackControlsController remainingTimeFormatter]
  -[AVPlaybackControlsController routePickerAlertController]
  -[AVPlaybackControlsController setRoutePickerAlertController:]
  -[AVPlaybackControlsController routeDetectorCoordinator]
  -[AVPlaybackControlsController setRouteDetectorCoordinator:]
  -[AVPlaybackControlsController AVRouteDetectorCoordinatorMultipleRoutesDetectedObserver]
  -[AVPlaybackControlsController setAVRouteDetectorCoordinatorMultipleRoutesDetectedObserver:]
  -[AVPlaybackControlsController loadingIndicatorTimer]
  -[AVPlaybackControlsController setLoadingIndicatorTimer:]
  -[AVPlaybackControlsController collapseExpandSliderAnimator]
  -[AVPlaybackControlsController setCollapseExpandSliderAnimator:]
  -[AVPlaybackControlsController playerMuteFadeAnimationID]
  -[AVPlaybackControlsController setPlayerMuteFadeAnimationID:]
  -[AVPlaybackControlsController playbackControlsContainerVisibilityItem]
  -[AVPlaybackControlsController volumeControlsContainerVisibilityItem]
  -[AVPlaybackControlsController allVisibilityControllerItems]
  -[AVPlaybackControlsController prefersVolumeSliderExpanded]
  -[AVPlaybackControlsController canIncludeVideoGravityButton]
  -[AVPlaybackControlsController pendingOrientationChange]
  -[AVPlaybackControlsController setPendingOrientationChange:]
  -[AVPlaybackControlsController hasStartedUpdates]
  -[AVPlaybackControlsController setHasStartedUpdates:]
  -[AVPlaybackControlsController isCoveringWindow]
  -[AVPlaybackControlsController hasPlaybackBegunSincePlayerControllerBecameReadyToPlay]
  -[AVPlaybackControlsController setHasPlaybackBegunSincePlayerControllerBecameReadyToPlay:]
  -[AVPlaybackControlsController hasBecomeReadyToPlay]
  -[AVPlaybackControlsController setHasBecomeReadyToPlay:]
  -[AVPlaybackControlsController loadingIndicatorTimerDelay]
  -[AVPlaybackControlsController setLoadingIndicatorTimerDelay:]
  -[AVPlaybackControlsController isResumingUpdates]
  -[AVPlaybackControlsController setResumingUpdates:]
  -[AVPlaybackControlsController prefersMuted]
  -[AVPlaybackControlsController setPrefersMuted:]
  -[AVPlaybackControlsController isPlaybackSuspendedForScrubbing]
  -[AVPlaybackControlsController setPlaybackSuspendedForScrubbing:]
  -[AVPlaybackControlsController setTimeControlStatus:]
  -[AVPlaybackControlsController setHasSeekableLiveStreamingContent:]
  -[AVPlaybackControlsController isScrubbingOrSeeking]
  -[AVPlaybackControlsController setScrubbingOrSeeking:]
  -[AVPlaybackControlsController shouldIgnoreTimeResolverUpdates]
  -[AVPlaybackControlsController setShouldIgnoreTimeResolverUpdates:]
  -[AVPlaybackControlsController videoGravityButtonType]
  -[AVPlaybackControlsController setVideoGravityButtonType:]
  -[AVPlaybackControlsController playbackViewFrame]
  -[AVPlaybackControlsController setPlaybackViewFrame:]
  -[AVPlaybackControlsController uniqueIdentifer]
  -[AVPlaybackControlsController windowSceneSessionIdentifier]
  -[AVPlaybackControlsController setWindowSceneSessionIdentifier:]


AVSecondScreenViewController : UIViewController /System/Library/Frameworks/Foundation.framework/Foundation
 @property  UILabel *debugLabel
 @property  AVSecondScreenPlayerLayerView *playerLayerView
 @property  BOOL playingOnSecondScreen
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} initialScreenBoundsHint
 @property  UIView *contentView
 @property  AVPlayerLayer *sourcePlayerLayer
 @property  {CGSize=dd} videoDisplaySize

  // instance methods
  -[AVSecondScreenViewController dealloc]
  -[AVSecondScreenViewController .cxx_destruct]
  -[AVSecondScreenViewController contentView]
  -[AVSecondScreenViewController setContentView:]
  -[AVSecondScreenViewController loadView]
  -[AVSecondScreenViewController viewDidLoad]
  -[AVSecondScreenViewController viewDidLayoutSubviews]
  -[AVSecondScreenViewController viewDidAppear:]
  -[AVSecondScreenViewController _updateLayout]
  -[AVSecondScreenViewController isPlayingOnSecondScreen]
  -[AVSecondScreenViewController setPlayingOnSecondScreen:]
  -[AVSecondScreenViewController playerLayerView]
  -[AVSecondScreenViewController setPlayerLayerView:]
  -[AVSecondScreenViewController videoDisplaySize]
  -[AVSecondScreenViewController setDebugText:]
  -[AVSecondScreenViewController debugText]
  -[AVSecondScreenViewController loadPlayerLayerViewIfNeeded]
  -[AVSecondScreenViewController setSourcePlayerLayer:]
  -[AVSecondScreenViewController setInitialScreenBoundsHint:]
  -[AVSecondScreenViewController _updateContentViewIfNeeded]
  -[AVSecondScreenViewController initialScreenBoundsHint]
  -[AVSecondScreenViewController sourcePlayerLayer]
  -[AVSecondScreenViewController debugLabel]


AVSecondScreenPlayerLayerView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVPlayerLayer *layer
 @property  AVPlayerLayer *activeSourcePlayerLayer
 @property  AVObservationController *observationController

  // class methods
  +[AVSecondScreenPlayerLayerView layerClass]

  // instance methods
  -[AVSecondScreenPlayerLayerView dealloc]
  -[AVSecondScreenPlayerLayerView .cxx_destruct]
  -[AVSecondScreenPlayerLayerView observationController]
  -[AVSecondScreenPlayerLayerView setObservationController:]
  -[AVSecondScreenPlayerLayerView startShowingContentFromSourcePlayerLayer:]
  -[AVSecondScreenPlayerLayerView stopShowingContentFromActiveSourcePlayerLayer]
  -[AVSecondScreenPlayerLayerView activeSourcePlayerLayer]
  -[AVSecondScreenPlayerLayerView setActiveSourcePlayerLayer:]


AVPlaybackControlsVisibilityControllerItemInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *controls
 @property  long long visibilityBehaviorOptions
 @property  BOOL initiallyHidden

  // instance methods
  -[AVPlaybackControlsVisibilityControllerItemInfo .cxx_destruct]
  -[AVPlaybackControlsVisibilityControllerItemInfo controls]
  -[AVPlaybackControlsVisibilityControllerItemInfo setControls:]
  -[AVPlaybackControlsVisibilityControllerItemInfo visibilityBehaviorOptions]
  -[AVPlaybackControlsVisibilityControllerItemInfo setVisibilityBehaviorOptions:]
  -[AVPlaybackControlsVisibilityControllerItemInfo isInitiallyHidden]
  -[AVPlaybackControlsVisibilityControllerItemInfo setInitiallyHidden:]


AVPlaybackControlsVisibilityController : NSObject /usr/lib/libSystem.B.dylib
 @property  double animationDuration
 @property  double hideItemsTimerInterval
 @property  double hideItemsQuicklyTimerInterval
 @property  double volumeChangeHidePlaybackControlTimerInterval
 @property  BOOL showsItemsWhenPaused
 @property  AVPlayerController *playerController
 @property  <AVPlaybackControlsVisibilityControllerDelegate> *delegate
 @property  BOOL showsItemPreferingStatusBarVisible
 @property  BOOL canHideItems
 @property  BOOL pictureInPictureActive
 @property  BOOL popoverPresented
 @property  BOOL showsItemsWhileWaitingToPlay

  // instance methods
  -[AVPlaybackControlsVisibilityController init]
  -[AVPlaybackControlsVisibilityController dealloc]
  -[AVPlaybackControlsVisibilityController delegate]
  -[AVPlaybackControlsVisibilityController setDelegate:]
  -[AVPlaybackControlsVisibilityController .cxx_destruct]
  -[AVPlaybackControlsVisibilityController animationDuration]
  -[AVPlaybackControlsVisibilityController setAnimationDuration:]
  -[AVPlaybackControlsVisibilityController isPictureInPictureActive]
  -[AVPlaybackControlsVisibilityController toggleVisibility]
  -[AVPlaybackControlsVisibilityController setPictureInPictureActive:]
  -[AVPlaybackControlsVisibilityController playerController]
  -[AVPlaybackControlsVisibilityController setPlayerController:]
  -[AVPlaybackControlsVisibilityController flashPlaybackControlsWithDuration:]
  -[AVPlaybackControlsVisibilityController activeAudioRouteOrSystemVolumeDidChange]
  -[AVPlaybackControlsVisibilityController startHidingItemQuicklyWhenPlaybackBegins]
  -[AVPlaybackControlsVisibilityController stopHidingItemQuicklyWhenPlaybackBegins]
  -[AVPlaybackControlsVisibilityController showsItemPreferingStatusBarVisible]
  -[AVPlaybackControlsVisibilityController isHidingItemsForTransition]
  -[AVPlaybackControlsVisibilityController beginHidingItemsForTransition]
  -[AVPlaybackControlsVisibilityController endHidingItemsForTransition]
  -[AVPlaybackControlsVisibilityController endHidingItemsForTransitionAndShowImmediately:]
  -[AVPlaybackControlsVisibilityController startControllingVisibilityOfItem:visibilityBehaviorOptions:]
  -[AVPlaybackControlsVisibilityController stopControllingVisibilityOfItem:]
  -[AVPlaybackControlsVisibilityController visibilityBehaviorOptionsOfItem:]
  -[AVPlaybackControlsVisibilityController beginTrackingUserInteraction]
  -[AVPlaybackControlsVisibilityController endTrackingUserInteraction]
  -[AVPlaybackControlsVisibilityController didMoveOffScreen]
  -[AVPlaybackControlsVisibilityController _startControllingVisibilityIfNeeded]
  -[AVPlaybackControlsVisibilityController _updateVisibilityWithCompletionHandler:]
  -[AVPlaybackControlsVisibilityController _setVisibilityNeedsUpdate]
  -[AVPlaybackControlsVisibilityController _updateControlItemVisibilityIfNeeded]
  -[AVPlaybackControlsVisibilityController _performForEachItem:]
  -[AVPlaybackControlsVisibilityController _itemsPassingTest:]
  -[AVPlaybackControlsVisibilityController _hasItemsThatCanBeShown]
  -[AVPlaybackControlsVisibilityController _hasItemsThatCanBeHidden]
  -[AVPlaybackControlsVisibilityController _showItemsShownForVolumeChange]
  -[AVPlaybackControlsVisibilityController _showItemsShownForVolumeChangeAndHideAfterDelay]
  -[AVPlaybackControlsVisibilityController _startTimerToHideItemsShownForVolumeChange]
  -[AVPlaybackControlsVisibilityController _stopTimerToHideItemsShownForVolumeChange]
  -[AVPlaybackControlsVisibilityController _hideItemsShownForVolumeChange]
  -[AVPlaybackControlsVisibilityController _showRegularItems]
  -[AVPlaybackControlsVisibilityController _showRegularItemsAndHideAfterDelay]
  -[AVPlaybackControlsVisibilityController _showRegularItemsAndHideAfterDelayIfPlaying:]
  -[AVPlaybackControlsVisibilityController _startTimerToHideRegularItems]
  -[AVPlaybackControlsVisibilityController _startTimerToHideRegularItemsAfterDelay:ifPlaying:]
  -[AVPlaybackControlsVisibilityController _stopTimerToHideRegularControls]
  -[AVPlaybackControlsVisibilityController _hideRegularItems]
  -[AVPlaybackControlsVisibilityController _stopInitiallyHidingItems]
  -[AVPlaybackControlsVisibilityController _stopInitiallyHidingItemsThatAreShownForVolumeChanges]
  -[AVPlaybackControlsVisibilityController _userIsInteractingWithItems]
  -[AVPlaybackControlsVisibilityController canHideItems]
  -[AVPlaybackControlsVisibilityController setCanHideItems:]
  -[AVPlaybackControlsVisibilityController isPopoverPresented]
  -[AVPlaybackControlsVisibilityController setPopoverPresented:]
  -[AVPlaybackControlsVisibilityController showsItemsWhileWaitingToPlay]
  -[AVPlaybackControlsVisibilityController setShowsItemsWhileWaitingToPlay:]
  -[AVPlaybackControlsVisibilityController showsItemsWhenPaused]
  -[AVPlaybackControlsVisibilityController setShowsItemsWhenPaused:]
  -[AVPlaybackControlsVisibilityController hideItemsTimerInterval]
  -[AVPlaybackControlsVisibilityController setHideItemsTimerInterval:]
  -[AVPlaybackControlsVisibilityController hideItemsQuicklyTimerInterval]
  -[AVPlaybackControlsVisibilityController setHideItemsQuicklyTimerInterval:]
  -[AVPlaybackControlsVisibilityController volumeChangeHidePlaybackControlTimerInterval]
  -[AVPlaybackControlsVisibilityController setVolumeChangeHidePlaybackControlTimerInterval:]
  -[AVPlaybackControlsVisibilityController beginShowingItemsDueToIndirectUserInteraction]
  -[AVPlaybackControlsVisibilityController endShowingItemsDueToIndirectUserInteraction]


AVTransitionController : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerAnimatedTransitioning, UIViewControllerInteractiveTransitioning, AVTransitionDelegate, AVTransitionDriverDelegate, UIViewControllerTransitioningDelegate>
 @property  long long state
 @property  AVDisplayLink *displayLink
 @property  AVTransition *activeTransition
 @property  AVInteractiveTransitionGestureTracker *gestureTracker
 @property  UIView *sourceView
 @property  AVPresentationController *presentationController
 @property  @? transitionDidBeginHandler
 @property  CAMediaTimingFunction *easeInFunction
 @property  CAMediaTimingFunction *easeOutFunction
 @property  {CGPoint=dd} touchGravity
 @property  AVPresentationContext *presentationContext
 @property  <AVTransitionControllerDelegate> *delegate
 @property  <AVTransitionDriver> *interactiveGestureTracker
 @property  UIView *interactionView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double completionSpeed
 @property  long long completionCurve
 @property  BOOL wantsInteractiveStart

  // instance methods
  -[AVTransitionController delegate]
  -[AVTransitionController setDelegate:]
  -[AVTransitionController .cxx_destruct]
  -[AVTransitionController state]
  -[AVTransitionController setState:]
  -[AVTransitionController transitionDuration:]
  -[AVTransitionController animateTransition:]
  -[AVTransitionController animationEnded:]
  -[AVTransitionController startInteractiveTransition:]
  -[AVTransitionController wantsInteractiveStart]
  -[AVTransitionController animationControllerForPresentedController:presentingController:sourceController:]
  -[AVTransitionController animationControllerForDismissedController:]
  -[AVTransitionController interactionControllerForPresentation:]
  -[AVTransitionController interactionControllerForDismissal:]
  -[AVTransitionController presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[AVTransitionController presentationController]
  -[AVTransitionController sourceView]
  -[AVTransitionController setSourceView:]
  -[AVTransitionController displayLink]
  -[AVTransitionController setDisplayLink:]
  -[AVTransitionController presentationContext]
  -[AVTransitionController setPresentationController:]
  -[AVTransitionController interactionView]
  -[AVTransitionController transitionWillComplete:success:]
  -[AVTransitionController transitionPresentedViewBackgroundColor:]
  -[AVTransitionController transitionBackgroundViewBackgroundColor:]
  -[AVTransitionController transitionDriver:gestureRecognizer:shouldReceiveTouch:]
  -[AVTransitionController transitionDriver:shouldDriveTransitionInteractionOfType:]
  -[AVTransitionController transitionDriver:didBeginTrackingTransitionInteraction:readyToProceedHandler:]
  -[AVTransitionController transitionDriverDidContinueInteraction:]
  -[AVTransitionController transitionDriverDidCancelInteraction:]
  -[AVTransitionController transitionDriverDidFinishInteraction:]
  -[AVTransitionController setInteractiveGestureTracker:]
  -[AVTransitionController setInteractionView:]
  -[AVTransitionController addTransitionDriver:toView:]
  -[AVTransitionController beginFullScreenPresentationOfViewController:fromView:isInteractive:completion:]
  -[AVTransitionController beginFullScreenDismissalOfViewController:animated:isInteractive:completion:]
  -[AVTransitionController _cancelTransition]
  -[AVTransitionController _finishTransition]
  -[AVTransitionController _fireDidBeginHandlerIfNeeded]
  -[AVTransitionController _startObservingAnimatorProgress]
  -[AVTransitionController interactiveGestureTracker]
  -[AVTransitionController activeTransition]
  -[AVTransitionController setActiveTransition:]
  -[AVTransitionController gestureTracker]
  -[AVTransitionController transitionDidBeginHandler]
  -[AVTransitionController setTransitionDidBeginHandler:]
  -[AVTransitionController easeInFunction]
  -[AVTransitionController setEaseInFunction:]
  -[AVTransitionController easeOutFunction]
  -[AVTransitionController setEaseOutFunction:]
  -[AVTransitionController touchGravity]
  -[AVTransitionController setTouchGravity:]


AVPlayerController : UIResponder /System/Library/Frameworks/Foundation.framework/Foundation
 @property  BOOL supportsVolumeAnimation
 @property  BOOL playingOnSecondScreen
 @property  BOOL usesExternalPlaybackWhileExternalScreenIsActive
 @property  {CGSize=dd} maximumVideoResolution
 @property  BOOL handlesAudioSessionInterruptions
 @property  BOOL hasTimecodes
 @property  BOOL hasReadableTimecodes
 @property  BOOL atMaxTime
 @property  BOOL atMinTime
 @property  BOOL scrubbing
 @property  AVPlayer *player
 @property  AVObservationController *observationController
 @property  {CGSize=dd} presentationSize
 @property  AVAsset *currentAssetIfReady
 @property  NSObject<OS_dispatch_queue> *assetInspectionQueue
 @property  AVAsset *assetBeingPrepared
 @property  BOOL pictureInPictureSupported
 @property  BOOL readyToPlay
 @property  AVValueTiming *timing
 @property  AVValueTiming *minTiming
 @property  AVValueTiming *maxTiming
 @property  AVAssetTrack *currentAudioTrack
 @property  AVTimecodeController *timecodeController
 @property  BOOL seekingInternal
 @property  BOOL seeking
 @property  {?=qiIq} seekToTimeInternal
 @property  double seekToTime
 @property  NSDictionary *metadata
 @property  NSArray *contentChapters
 @property  BOOL composable
 @property  BOOL hasProtectedContent
 @property  NSArray *availableMetadataFormats
 @property  BOOL compatibleWithAirPlayVideo
 @property  double rateBeforeScrubBegan
 @property  BOOL preventingIdleSystemSleep
 @property  BOOL preventingIdleDisplaySleep
 @property  BOOL disablingAutomaticTermination
 @property  BOOL allowsPictureInPicturePlayback
 @property  BOOL pictureInPictureActive
 @property  BOOL canTogglePictureInPicture
 @property  BOOL hasBegunInspection
 @property  NSObject<OS_dispatch_source> *seekTimer
 @property  NSDate *currentDate
 @property  NSDate *currentOrEstimatedDate
 @property  double defaultPlaybackRate
 @property  BOOL touchBarRequiresLinearPlayback
 @property  long long status
 @property  NSError *error

  // class methods
  +[AVPlayerController initialize]
  +[AVPlayerController canonicalLanguageIdentifierFromString:]
  +[AVPlayerController keyPathsForValuesAffectingPlaying]
  +[AVPlayerController keyPathsForValuesAffectingCurrentTimeWithinEndTimes]
  +[AVPlayerController keyPathsForValuesAffectingHasLiveStreamingContent]
  +[AVPlayerController keyPathsForValuesAffectingMaxTime]
  +[AVPlayerController keyPathsForValuesAffectingMinTime]
  +[AVPlayerController keyPathsForValuesAffectingCanScanForward]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekToBeginning]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekToEnd]
  +[AVPlayerController keyPathsForValuesAffectingHasMediaSelectionOptions]
  +[AVPlayerController keyPathsForValuesAffectingHasAudioMediaSelectionOptions]
  +[AVPlayerController keyPathsForValuesAffectingHasLegibleMediaSelectionOptions]
  +[AVPlayerController keyPathsForValuesAffectingPlayingOnExternalScreen]
  +[AVPlayerController keyPathsForValuesAffectingHasSeekableLiveStreamingContent]
  +[AVPlayerController keyPathsForValuesAffectingVolume]
  +[AVPlayerController keyPathsForValuesAffectingMuted]
  +[AVPlayerController keyPathsForValuesAffectingPictureInPicturePossible]
  +[AVPlayerController keyPathsForValuesAffectingCurrentTime]
  +[AVPlayerController keyPathsForValuesAffectingStatus]
  +[AVPlayerController keyPathsForValuesAffectingReadyToPlay]
  +[AVPlayerController keyPathsForValuesAffectingError]
  +[AVPlayerController keyPathsForValuesAffectingCompletelySeekable]
  +[AVPlayerController keyPathsForValuesAffectingCanPlay]
  +[AVPlayerController keyPathsForValuesAffectingCanPause]
  +[AVPlayerController keyPathsForValuesAffectingCanTogglePlayback]
  +[AVPlayerController keyPathsForValuesAffectingHasContent]
  +[AVPlayerController keyPathsForValuesAffectingContentDuration]
  +[AVPlayerController keyPathsForValuesAffectingContentDimensions]
  +[AVPlayerController keyPathsForValuesAffectingReversePlaybackEndTime]
  +[AVPlayerController keyPathsForValuesAffectingForwardPlaybackEndTime]
  +[AVPlayerController keyPathsForValuesAffectingContentDurationWithinEndTimes]
  +[AVPlayerController keyPathsForValuesAffectingSeekableTimeRanges]
  +[AVPlayerController keyPathsForValuesAffectingLoadedTimeRanges]
  +[AVPlayerController keyPathsForValuesAffectingHasEnabledAudio]
  +[AVPlayerController keyPathsForValuesAffectingHasVideo]
  +[AVPlayerController keyPathsForValuesAffectingHasEnabledVideo]
  +[AVPlayerController keyPathsForValuesAffectingHasContentChapters]
  +[AVPlayerController keyPathsForValuesAffectingStreaming]
  +[AVPlayerController keyPathsForValuesAffectingHasTrimmableContent]
  +[AVPlayerController keyPathsForValuesAffectingHasShareableContent]
  +[AVPlayerController keyPathsForValuesAffectingTimeControlStatus]
  +[AVPlayerController keyPathsForValuesAffectingCanSeek]
  +[AVPlayerController keyPathsForValuesAffectingCanScanBackward]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekFrameForward]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekFrameBackward]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekChapterForward]
  +[AVPlayerController keyPathsForValuesAffectingCanSeekChapterBackward]
  +[AVPlayerController keyPathsForValuesAffectingAllowsExternalPlayback]
  +[AVPlayerController keyPathsForValuesAffectingExternalPlaybackActive]
  +[AVPlayerController keyPathsForValuesAffectingExternalPlaybackType]
  +[AVPlayerController keyPathsForValuesAffectingExternalPlaybackAirPlayDeviceLocalizedName]
  +[AVPlayerController keyPathsForValuesAffectingUsesExternalPlaybackWhileExternalScreenIsActive]
  +[AVPlayerController keyPathsForValuesAffectingPreferredDisplayCriteria]
  +[AVPlayerController keyPathsForValuesAffectingMaximumVideoResolution]

  // instance methods
  -[AVPlayerController init]
  -[AVPlayerController dealloc]
  -[AVPlayerController setObservationInfo:]
  -[AVPlayerController .cxx_destruct]
  -[AVPlayerController error]
  -[AVPlayerController observationInfo]
  -[AVPlayerController status]
  -[AVPlayerController setMetadata:]
  -[AVPlayerController metadata]
  -[AVPlayerController loadedTimeRanges]
  -[AVPlayerController currentTime]
  -[AVPlayerController volume]
  -[AVPlayerController setVolume:]
  -[AVPlayerController setRate:]
  -[AVPlayerController rate]
  -[AVPlayerController isPlaying]
  -[AVPlayerController isLooping]
  -[AVPlayerController hasContent]
  -[AVPlayerController isPictureInPictureActive]
  -[AVPlayerController hasProtectedContent]
  -[AVPlayerController setMuted:]
  -[AVPlayerController timing]
  -[AVPlayerController isMuted]
  -[AVPlayerController setPlaying:]
  -[AVPlayerController setPictureInPictureActive:]
  -[AVPlayerController player]
  -[AVPlayerController setPlayer:]
  -[AVPlayerController initWithPlayer:]
  -[AVPlayerController currentDate]
  -[AVPlayerController setAllowsExternalPlayback:]
  -[AVPlayerController timeControlStatus]
  -[AVPlayerController seekableTimeRanges]
  -[AVPlayerController mediaSelectionGroupForMediaCharacteristic:]
  -[AVPlayerController isExternalPlaybackActive]
  -[AVPlayerController externalPlaybackType]
  -[AVPlayerController allowsExternalPlayback]
  -[AVPlayerController isScrubbing]
  -[AVPlayerController setTiming:]
  -[AVPlayerController contentDuration]
  -[AVPlayerController setAudioMediaSelectionOptions:]
  -[AVPlayerController setCurrentAudioMediaSelectionOption:]
  -[AVPlayerController setLegibleMediaSelectionOptions:]
  -[AVPlayerController setCurrentLegibleMediaSelectionOption:]
  -[AVPlayerController togglePlayback:]
  -[AVPlayerController seekByTimeInterval:toleranceBefore:toleranceAfter:]
  -[AVPlayerController seekToTime:toleranceBefore:toleranceAfter:]
  -[AVPlayerController seekToTime:]
  -[AVPlayerController hasSeekableLiveStreamingContent]
  -[AVPlayerController maxTiming]
  -[AVPlayerController minTiming]
  -[AVPlayerController canPlay]
  -[AVPlayerController seekToBeginning:]
  -[AVPlayerController seekToEnd:]
  -[AVPlayerController hasAudioMediaSelectionOptions]
  -[AVPlayerController hasLegibleMediaSelectionOptions]
  -[AVPlayerController audioMediaSelectionOptions]
  -[AVPlayerController legibleMediaSelectionOptions]
  -[AVPlayerController isPlayingOnSecondScreen]
  -[AVPlayerController updateMinMaxTiming]
  -[AVPlayerController hasLiveStreamingContent]
  -[AVPlayerController minTime]
  -[AVPlayerController maxTime]
  -[AVPlayerController setMinTiming:]
  -[AVPlayerController setMaxTiming:]
  -[AVPlayerController play:]
  -[AVPlayerController pause:]
  -[AVPlayerController togglePlaybackEvenWhenInBackground:]
  -[AVPlayerController beginScrubbing:]
  -[AVPlayerController endScrubbing:]
  -[AVPlayerController seekByTimeInterval:]
  -[AVPlayerController currentTimeWithinEndTimes]
  -[AVPlayerController skipBackwardThirtySeconds:]
  -[AVPlayerController gotoEndOfSeekableRanges:]
  -[AVPlayerController canScanForward]
  -[AVPlayerController beginScanningForward:]
  -[AVPlayerController endScanningForward:]
  -[AVPlayerController beginScanningBackward:]
  -[AVPlayerController endScanningBackward:]
  -[AVPlayerController canSeekToBeginning]
  -[AVPlayerController seekChapterBackward:]
  -[AVPlayerController canSeekToEnd]
  -[AVPlayerController seekChapterForward:]
  -[AVPlayerController hasMediaSelectionOptions]
  -[AVPlayerController currentAudioMediaSelectionOption]
  -[AVPlayerController currentLegibleMediaSelectionOption]
  -[AVPlayerController isPlayingOnExternalScreen]
  -[AVPlayerController isPictureInPictureInterrupted]
  -[AVPlayerController setPictureInPictureInterrupted:]
  -[AVPlayerController toggleMuted:]
  -[AVPlayerController canScanBackward]
  -[AVPlayerController canPause]
  -[AVPlayerController canTogglePlayback]
  -[AVPlayerController canSeek]
  -[AVPlayerController contentDimensions]
  -[AVPlayerController hasEnabledAudio]
  -[AVPlayerController hasEnabledVideo]
  -[AVPlayerController hasVideo]
  -[AVPlayerController contentDurationWithinEndTimes]
  -[AVPlayerController setPlayingOnSecondScreen:]
  -[AVPlayerController externalPlaybackAirPlayDeviceLocalizedName]
  -[AVPlayerController isPictureInPicturePossible]
  -[AVPlayerController setAllowsPictureInPicturePlayback:]
  -[AVPlayerController isPictureInPictureSupported]
  -[AVPlayerController setReversePlaybackEndTime:]
  -[AVPlayerController setForwardPlaybackEndTime:]
  -[AVPlayerController maximumVideoResolution]
  -[AVPlayerController preferredDisplayCriteria]
  -[AVPlayerController availableMetadataFormats]
  -[AVPlayerController isComposable]
  -[AVPlayerController isCompatibleWithAirPlayVideo]
  -[AVPlayerController nominalFrameRate]
  -[AVPlayerController usesExternalPlaybackWhileExternalScreenIsActive]
  -[AVPlayerController forwardPlaybackEndTime]
  -[AVPlayerController reversePlaybackEndTime]
  -[AVPlayerController canUseNetworkResourcesForLiveStreamingWhilePaused]
  -[AVPlayerController presentationSize]
  -[AVPlayerController setCanUseNetworkResourcesForLiveStreamingWhilePaused:]
  -[AVPlayerController _queuePlayer]
  -[AVPlayerController audioOptions]
  -[AVPlayerController isStreaming]
  -[AVPlayerController defaultPlaybackRate]
  -[AVPlayerController setDefaultPlaybackRate:]
  -[AVPlayerController beginScrubbing]
  -[AVPlayerController endScrubbing]
  -[AVPlayerController setCurrentAudioTrack:]
  -[AVPlayerController observationController]
  -[AVPlayerController allowsPictureInPicturePlayback]
  -[AVPlayerController _ensureUserCaptionDisplayType:]
  -[AVPlayerController reloadOptionsAssumingMediaOptionsMayHaveChanged:]
  -[AVPlayerController legibleOptions]
  -[AVPlayerController setLegibleMediaSelectionOptions:audioMediaSelectionOptions:assumeMediaOptionMayHaveChanged:]
  -[AVPlayerController _optionsForGroup:]
  -[AVPlayerController _performAutomaticMediaSelectionForUserCaptionDisplayType:]
  -[AVPlayerController keyPathsForValuesAffectingCurrentAudioMediaSelectionOption]
  -[AVPlayerController keyPathsForValuesAffectingCurrentLegibleMediaSelectionOption]
  -[AVPlayerController selectedMediaOptionMayHaveChanged]
  -[AVPlayerController reloadOptions]
  -[AVPlayerController reloadOptionsAndCurrentSelections]
  -[AVPlayerController reloadAudioOptions]
  -[AVPlayerController reloadLegibleOptions]
  -[AVPlayerController selectedMediaOptionMayHaveChanged:]
  -[AVPlayerController _selectedMediaOptionWithMediaCharacteristic:]
  -[AVPlayerController _setMediaOption:mediaCharacteristic:]
  -[AVPlayerController _mediaSelectionCriteriaCanBeAppliedAutomaticallyToLegibleMediaSelectionGroup]
  -[AVPlayerController _disableLegibleMediaSelectionOptions:]
  -[AVPlayerController _enableAutoMediaSelection:]
  -[AVPlayerController supportsVolumeAnimation]
  -[AVPlayerController setScrubbing:]
  -[AVPlayerController _timecodeTrack]
  -[AVPlayerController maxFrameCountString]
  -[AVPlayerController setMinTime:]
  -[AVPlayerController setMaxTime:]
  -[AVPlayerController setPresentationSize:]
  -[AVPlayerController startInspectionIfNeeded]
  -[AVPlayerController startKVO]
  -[AVPlayerController isReadyToPlay]
  -[AVPlayerController isCompletelySeekable]
  -[AVPlayerController _observeValueForKeyPath:oldValue:newValue:]
  -[AVPlayerController _retryPlayImmediatelyIfNeeded]
  -[AVPlayerController canPlayImmediately]
  -[AVPlayerController seekTimer]
  -[AVPlayerController _handleSeekTimerEvent]
  -[AVPlayerController autoplay:]
  -[AVPlayerController setTouchBarRequiresLinearPlayback:]
  -[AVPlayerController setLooping:]
  -[AVPlayerController updateAtMinMaxTime]
  -[AVPlayerController increaseVolume:]
  -[AVPlayerController decreaseVolume:]
  -[AVPlayerController changeVolumeToMinimum:]
  -[AVPlayerController changeVolumeToMaximum:]
  -[AVPlayerController isInspectionSuspended]
  -[AVPlayerController setInspectionSuspended:]
  -[AVPlayerController _setMinTiming:maxTiming:]
  -[AVPlayerController currentOrEstimatedDate]
  -[AVPlayerController hasContentChapters]
  -[AVPlayerController hasTrimmableContent]
  -[AVPlayerController hasShareableContent]
  -[AVPlayerController _assetIsRestrictedFromSaving:]
  -[AVPlayerController audioWaveform]
  -[AVPlayerController _assetIsMarkedNotSerializable:]
  -[AVPlayerController _assetContainsProResRaw:]
  -[AVPlayerController _updateCurrentAudioTrackIfNeeded]
  -[AVPlayerController seekToCMTime:toleranceBefore:toleranceAfter:]
  -[AVPlayerController throttledSeekToTime:toleranceBefore:toleranceAfter:]
  -[AVPlayerController actuallySeekToTime]
  -[AVPlayerController scanForward:]
  -[AVPlayerController _updateScanningForwardRate]
  -[AVPlayerController scanBackward:]
  -[AVPlayerController _updateScanningBackwardRate]
  -[AVPlayerController canSeekFrameForward]
  -[AVPlayerController seekFrameForward:]
  -[AVPlayerController canSeekFrameBackward]
  -[AVPlayerController seekFrameBackward:]
  -[AVPlayerController seekOrStepByFrameCount:]
  -[AVPlayerController seekToChapter:]
  -[AVPlayerController canSeekChapterForward]
  -[AVPlayerController canSeekChapterBackward]
  -[AVPlayerController updateTiming]
  -[AVPlayerController togglePictureInPicture:]
  -[AVPlayerController startUsingNetworkResourcesForLiveStreamingWhilePaused]
  -[AVPlayerController stopUsingNetworkResourcesForLiveStreamingWhilePaused]
  -[AVPlayerController _cancelPendingSeeksIfNeeded]
  -[AVPlayerController _updateRateForScrubbingAndSeeking]
  -[AVPlayerController scanningDelays]
  -[AVPlayerController _prepareAssetForInspectionIfNeeded]
  -[AVPlayerController isAtMaxTime]
  -[AVPlayerController setAtMaxTime:]
  -[AVPlayerController isAtMinTime]
  -[AVPlayerController setAtMinTime:]
  -[AVPlayerController currentAssetIfReady]
  -[AVPlayerController setCurrentAssetIfReady:]
  -[AVPlayerController assetInspectionQueue]
  -[AVPlayerController setAssetInspectionQueue:]
  -[AVPlayerController assetBeingPrepared]
  -[AVPlayerController setAssetBeingPrepared:]
  -[AVPlayerController setPictureInPictureSupported:]
  -[AVPlayerController currentAudioTrack]
  -[AVPlayerController timecodeController]
  -[AVPlayerController setTimecodeController:]
  -[AVPlayerController isSeekingInternal]
  -[AVPlayerController setSeekingInternal:]
  -[AVPlayerController isSeeking]
  -[AVPlayerController setSeeking:]
  -[AVPlayerController seekToTimeInternal]
  -[AVPlayerController setSeekToTimeInternal:]
  -[AVPlayerController seekToTime]
  -[AVPlayerController setSeekToTime:]
  -[AVPlayerController contentChapters]
  -[AVPlayerController setContentChapters:]
  -[AVPlayerController setComposable:]
  -[AVPlayerController setHasProtectedContent:]
  -[AVPlayerController setAvailableMetadataFormats:]
  -[AVPlayerController setCompatibleWithAirPlayVideo:]
  -[AVPlayerController rateBeforeScrubBegan]
  -[AVPlayerController setRateBeforeScrubBegan:]
  -[AVPlayerController isPreventingIdleSystemSleep]
  -[AVPlayerController setPreventingIdleSystemSleep:]
  -[AVPlayerController isPreventingIdleDisplaySleep]
  -[AVPlayerController setPreventingIdleDisplaySleep:]
  -[AVPlayerController isDisablingAutomaticTermination]
  -[AVPlayerController setDisablingAutomaticTermination:]
  -[AVPlayerController canTogglePictureInPicture]
  -[AVPlayerController setCanTogglePictureInPicture:]
  -[AVPlayerController hasBegunInspection]
  -[AVPlayerController setHasBegunInspection:]
  -[AVPlayerController touchBarRequiresLinearPlayback]
  -[AVPlayerController stopGeneratingTimecodes]
  -[AVPlayerController handlesAudioSessionInterruptions]
  -[AVPlayerController setRateWithForce:]
  -[AVPlayerController setHandlesAudioSessionInterruptions:]
  -[AVPlayerController hasTimecodes]
  -[AVPlayerController loadTimecodeControllerIfNeeded]
  -[AVPlayerController frameNumberForCurrentTime]
  -[AVPlayerController hasReadableTimecodes]
  -[AVPlayerController timecodeObservationInterval]
  -[AVPlayerController startGeneratingTimecodesUsingBlock:]
  -[AVPlayerController seekToTimecode:]
  -[AVPlayerController seekToFrame:]
  -[AVPlayerController timecodeForCurrentTime]
  -[AVPlayerController maxTimecode]


AVBackdropView : AVView
 @property  UIStackView *stackView
 @property  UIVisualEffectView *secondaryMaterialOverlayView
 @property  NSArray *secondaryMaterialOverlayViewConstraints
 @property  BOOL disablesAutoLayout
 @property  AVCABackdropLayerView *backdropLayerView
 @property  long long axis
 @property  {NSDirectionalEdgeInsets=dddd} contentLayoutMargins
 @property  unsigned long shapeStyle
 @property  UIView *targetViewForSecondaryMaterialOverlay
 @property  BOOL prefersLowQualityEffects

  // class methods
  +[AVBackdropView secondaryMaterialOverlayView]
  +[AVBackdropView removeAllFiltersFromView:]
  +[AVBackdropView applyPrimaryGlyphTintToView:]
  +[AVBackdropView applySecondaryGlyphTintToView:]
  +[AVBackdropView applyGlyphTintColor:toView:]
  +[AVBackdropView configureSlider:thumbView:loadedTrackView:]
  +[AVBackdropView applyBaseTrackTintToView:]
  +[AVBackdropView applyCompletedTrackTintToView:]
  +[AVBackdropView applyLoadedTrackTintToView:]
  +[AVBackdropView configureView:forTintEffectWithColor:filterType:]
  +[AVBackdropView configureView:withBackgroundFillOfColor:opacity:filter:]
  +[AVBackdropView secondaryGlyphTintColor]

  // instance methods
  -[AVBackdropView dealloc]
  -[AVBackdropView .cxx_destruct]
  -[AVBackdropView axis]
  -[AVBackdropView setHidden:]
  -[AVBackdropView backgroundColor]
  -[AVBackdropView setBackgroundColor:]
  -[AVBackdropView initWithFrame:]
  -[AVBackdropView layoutSubviews]
  -[AVBackdropView updateConstraints]
  -[AVBackdropView arrangedSubviews]
  -[AVBackdropView stackView]
  -[AVBackdropView setSemanticContentAttribute:]
  -[AVBackdropView didMoveToSuperview]
  -[AVBackdropView didMoveToWindow]
  -[AVBackdropView initWithArrangedSubviews:]
  -[AVBackdropView setCustomSpacing:afterView:]
  -[AVBackdropView customSpacingAfterView:]
  -[AVBackdropView setPrefersLowQualityEffects:]
  -[AVBackdropView prefersLowQualityEffects]
  -[AVBackdropView initWithFrame:disablingAutoLayout:]
  -[AVBackdropView hasVisibleArrangedSubview]
  -[AVBackdropView setArrangedSubviews:axis:]
  -[AVBackdropView setCustomSpacing:afterViews:]
  -[AVBackdropView setTargetViewForSecondaryMaterialOverlay:]
  -[AVBackdropView contentLayoutMargins]
  -[AVBackdropView setContentLayoutMargins:]
  -[AVBackdropView setShapeStyle:]
  -[AVBackdropView _stackViewIfLoaded]
  -[AVBackdropView _applyShapeStyle]
  -[AVBackdropView shapeStyle]
  -[AVBackdropView targetViewForSecondaryMaterialOverlay]
  -[AVBackdropView secondaryMaterialOverlayView]
  -[AVBackdropView setSecondaryMaterialOverlayView:]
  -[AVBackdropView secondaryMaterialOverlayViewConstraints]
  -[AVBackdropView setSecondaryMaterialOverlayViewConstraints:]
  -[AVBackdropView disablesAutoLayout]
  -[AVBackdropView setDisablesAutoLayout:]
  -[AVBackdropView backdropLayerView]
  -[AVBackdropView setBackdropLayerView:]


AVPlayerViewControllerContentView : UIView /System/Library/Frameworks/Foundation.framework/Foundation <AVScrollViewObserverContentView>
 @property  AVExternalPlaybackIndicatorView *externalPlaybackIndicatorView
 @property  UIImageView *unsupportedContentIndicatorView
 @property  UIImageView *audioOnlyIndicatorView
 @property  AVExternalPlaybackIndicatorView *externalPlaybackIndicatorViewIfLoaded
 @property  UIImageView *unsupportedContentIndicatorViewIfLoaded
 @property  UIImageView *audioOnlyIndicatorViewIfLoaded
 @property  {UIEdgeInsets=dddd} videoContentInset
 @property  __AVPlayerLayerView *playerLayerView
 @property  BOOL needsInitialLayout
 @property  NSMutableDictionary *targetVideoGravities
 @property  NSString *automaticVideoGravity
 @property  AVCABackdropLayerView *backdropLayerView
 @property  NSString *externalPlaybackIndicatorTitle
 @property  NSString *externalPlaybackIndicatorSubtitle
 @property  AVStyleSheet *styleSheet
 @property  AVScrollViewObserver *scrollingObserver
 @property  <AVPlayerViewControllerContentViewDelegate> *delegate
 @property  BOOL isCoveringWindow
 @property  UIView<AVPlaybackContentContainer> *playbackContentContainerView
 @property  NSNumber *layoutClass
 @property  BOOL inAWindowAndNotScrolling
 @property  BOOL scrolling
 @property  BOOL scrollingQuickly
 @property  BOOL shouldLoadPlaybackControlsHint
 @property  BOOL canAutomaticallyZoomLetterboxVideos
 @property  {UIEdgeInsets=dddd} edgeInsetsForLetterboxedContent
 @property  UIView *interactiveContentOverlayView
 @property  UIView *iAdPreRollView
 @property  UIView *iAdPreRollViewIfLoaded
 @property  AVPlaybackControlsView *playbackControlsView
 @property  AVTurboModePlaybackControlsPlaceholderView *turboModePlaybackControlsPlaceholderView
 @property  BOOL styleSheetShouldUseCompactFullScreenItemSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVPlayerViewControllerContentView dealloc]
  -[AVPlayerViewControllerContentView delegate]
  -[AVPlayerViewControllerContentView setDelegate:]
  -[AVPlayerViewControllerContentView .cxx_destruct]
  -[AVPlayerViewControllerContentView isScrolling]
  -[AVPlayerViewControllerContentView layoutSubviews]
  -[AVPlayerViewControllerContentView didMoveToSuperview]
  -[AVPlayerViewControllerContentView didMoveToWindow]
  -[AVPlayerViewControllerContentView styleSheet]
  -[AVPlayerViewControllerContentView playerLayerView]
  -[AVPlayerViewControllerContentView _mediaTimingFunctionForCurrentAnimationCurve]
  -[AVPlayerViewControllerContentView setStyleSheet:]
  -[AVPlayerViewControllerContentView setPlayerLayerView:]
  -[AVPlayerViewControllerContentView isScrollingQuickly]
  -[AVPlayerViewControllerContentView avkit_needsUpdateBackdropCaptureViewHidden]
  -[AVPlayerViewControllerContentView avkit_backdropGroupLeader]
  -[AVPlayerViewControllerContentView avkit_hasFullScreenLayoutClass]
  -[AVPlayerViewControllerContentView interactiveContentOverlayView]
  -[AVPlayerViewControllerContentView needsInitialLayout]
  -[AVPlayerViewControllerContentView setNeedsInitialLayout:]
  -[AVPlayerViewControllerContentView playbackControlsView]
  -[AVPlayerViewControllerContentView turboModePlaybackControlsPlaceholderView]
  -[AVPlayerViewControllerContentView isCoveringWindow]
  -[AVPlayerViewControllerContentView backdropLayerView]
  -[AVPlayerViewControllerContentView scrollViewObserverValuesDidChange:]
  -[AVPlayerViewControllerContentView initWithFrame:playbackContentContainerView:targetVideoGravities:]
  -[AVPlayerViewControllerContentView automaticVideoGravity]
  -[AVPlayerViewControllerContentView setAutomaticVideoGravity:]
  -[AVPlayerViewControllerContentView setStyleSheetShouldUseCompactFullScreenItemSize:]
  -[AVPlayerViewControllerContentView externalPlaybackIndicatorView]
  -[AVPlayerViewControllerContentView externalPlaybackIndicatorViewIfLoaded]
  -[AVPlayerViewControllerContentView unsupportedContentIndicatorView]
  -[AVPlayerViewControllerContentView unsupportedContentIndicatorViewIfLoaded]
  -[AVPlayerViewControllerContentView audioOnlyIndicatorView]
  -[AVPlayerViewControllerContentView audioOnlyIndicatorViewIfLoaded]
  -[AVPlayerViewControllerContentView iAdPreRollView]
  -[AVPlayerViewControllerContentView iAdPreRollViewIfLoaded]
  -[AVPlayerViewControllerContentView setInteractiveContentOverlayView:]
  -[AVPlayerViewControllerContentView setShouldLoadPlaybackControlsHint:]
  -[AVPlayerViewControllerContentView addPlaybackContentContainerViewIfNeeded]
  -[AVPlayerViewControllerContentView setPlaybackContentContainerView:]
  -[AVPlayerViewControllerContentView isViewDescendantOfPlaybackControlsSubview:]
  -[AVPlayerViewControllerContentView setShowsUnsupportedContentIndicator:]
  -[AVPlayerViewControllerContentView setShowsAudioOnlyIndicator:]
  -[AVPlayerViewControllerContentView setShowsExternalPlaybackIndicator:]
  -[AVPlayerViewControllerContentView setExternalPlaybackIndicatorTitle:subtitle:]
  -[AVPlayerViewControllerContentView setTargetVideoGravity:forLayoutClass:]
  -[AVPlayerViewControllerContentView layoutClass]
  -[AVPlayerViewControllerContentView loadPlaybackControlsViewIfNeeded]
  -[AVPlayerViewControllerContentView removeTurboModePlaybackControlsPlaceholderViewIfNeeded]
  -[AVPlayerViewControllerContentView isInAWindowAndNotScrolling]
  -[AVPlayerViewControllerContentView _isBeingTransitionedToOrFromFullScreen]
  -[AVPlayerViewControllerContentView _updateVideoGravityDuringLayoutSubviewsAndAssertThatIfYouBreakThisMethodYouOwnThisMethod]
  -[AVPlayerViewControllerContentView _updateVideoContentInsetForVideoGravity:]
  -[AVPlayerViewControllerContentView _applyVideoGravityIfNeeded:]
  -[AVPlayerViewControllerContentView _insertPlaybackControlsOrPlaceholderView:]
  -[AVPlayerViewControllerContentView _loadTurboOrFullPlaybackControlsIfNeeded]
  -[AVPlayerViewControllerContentView _loadTurboModePlaybackControlsPlaceholderViewIfNeeded]
  -[AVPlayerViewControllerContentView _updateStyleSheet]
  -[AVPlayerViewControllerContentView playbackContentContainerView]
  -[AVPlayerViewControllerContentView shouldLoadPlaybackControlsHint]
  -[AVPlayerViewControllerContentView canAutomaticallyZoomLetterboxVideos]
  -[AVPlayerViewControllerContentView setCanAutomaticallyZoomLetterboxVideos:]
  -[AVPlayerViewControllerContentView edgeInsetsForLetterboxedContent]
  -[AVPlayerViewControllerContentView setEdgeInsetsForLetterboxedContent:]
  -[AVPlayerViewControllerContentView styleSheetShouldUseCompactFullScreenItemSize]
  -[AVPlayerViewControllerContentView videoContentInset]
  -[AVPlayerViewControllerContentView setVideoContentInset:]
  -[AVPlayerViewControllerContentView targetVideoGravities]
  -[AVPlayerViewControllerContentView externalPlaybackIndicatorTitle]
  -[AVPlayerViewControllerContentView setExternalPlaybackIndicatorTitle:]
  -[AVPlayerViewControllerContentView externalPlaybackIndicatorSubtitle]
  -[AVPlayerViewControllerContentView setExternalPlaybackIndicatorSubtitle:]
  -[AVPlayerViewControllerContentView scrollingObserver]


AVButton : UIButton /System/Library/Frameworks/Foundation.framework/Foundation <AVPlaybackControlsViewItem>
 @property  UIViewPropertyAnimator *highlightAnimator
 @property  double trackingStartTime
 @property  BOOL wasLongPressed
 @property  BOOL wasForcePressTriggered
 @property  double horizontalTranslationOfLongPress
 @property  NSNumber *previousHorizontalPositionOfLongPress
 @property  double force
 @property  double maximumForceSinceTrackingBegan
 @property  NSTimer *longPressTimer
 @property  AVUserInteractionObserverGestureRecognizer *userInteractionGestureRecognizer
 @property  UIVisualEffectView *backgroundEffectView
 @property  BOOL treatsForcePressAsLongPress
 @property  long long tintEffectStyle
 @property  BOOL usesBackgroundEffectViewForTextOnlyButtons
 @property  double forceThreshold
 @property  BOOL multipleTouchesEndsTracking
 @property  NSString *imageName
 @property  NSString *fullScreenImageName
 @property  NSString *inlineImageName
 @property  NSString *fullScreenAlternateImageName
 @property  NSString *inlineAlternateImageName
 @property  AVMicaPackage *micaPackage
 @property  double micaSnapshotAlpha
 @property  BOOL disablesHighlightWhenLongPressed
 @property  {NSDirectionalEdgeInsets=dddd} hitRectInsets
 @property  BOOL clampsHitRectInsetsWhenContainedInScrollableView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGSize=dd} extrinsicContentSize
 @property  BOOL removed
 @property  BOOL collapsed
 @property  BOOL included
 @property  BOOL collapsedOrExcluded
 @property  BOOL hasAlternateAppearance
 @property  BOOL hasFullScreenAppearance

  // class methods
  +[AVButton buttonWithAccessibilityIdentifier:]

  // instance methods
  -[AVButton setEnabled:]
  -[AVButton .cxx_destruct]
  -[AVButton setBounds:]
  -[AVButton setHidden:]
  -[AVButton intrinsicContentSize]
  -[AVButton setTitle:forState:]
  -[AVButton layoutSubviews]
  -[AVButton setHighlighted:]
  -[AVButton pointInside:withEvent:]
  -[AVButton willMoveToWindow:]
  -[AVButton setImage:forState:]
  -[AVButton isCollapsed]
  -[AVButton setCollapsed:]
  -[AVButton beginTrackingWithTouch:withEvent:]
  -[AVButton cancelTrackingWithEvent:]
  -[AVButton continueTrackingWithTouch:withEvent:]
  -[AVButton endTrackingWithTouch:withEvent:]
  -[AVButton hitRect]
  -[AVButton force]
  -[AVButton setForce:]
  -[AVButton setImageName:]
  -[AVButton imageName]
  -[AVButton backgroundEffectView]
  -[AVButton setBackgroundEffectView:]
  -[AVButton setExtrinsicContentSize:]
  -[AVButton extrinsicContentSize]
  -[AVButton hitRectInsets]
  -[AVButton setHitRectInsets:]
  -[AVButton isRemoved]
  -[AVButton isCollapsedOrExcluded]
  -[AVButton setIncluded:]
  -[AVButton setRemoved:]
  -[AVButton isIncluded]
  -[AVButton hasAlternateAppearance]
  -[AVButton setHasAlternateAppearance:]
  -[AVButton hasFullScreenAppearance]
  -[AVButton setHasFullScreenAppearance:]
  -[AVButton _updateIsHiddenAndAlpha]
  -[AVButton setMicaPackage:]
  -[AVButton highlightAnimator]
  -[AVButton setHighlightAnimator:]
  -[AVButton micaPackage]
  -[AVButton longPressTimer]
  -[AVButton setLongPressTimer:]
  -[AVButton setWasLongPressed:]
  -[AVButton setMultipleTouchesEndsTracking:]
  -[AVButton setUsesBackgroundEffectViewForTextOnlyButtons:]
  -[AVButton setTintEffectStyle:]
  -[AVButton _preferredLayoutSize]
  -[AVButton _handleUserInteractionGestureRecognizer:]
  -[AVButton _resetTrackedState]
  -[AVButton _updateImageIfNeeded]
  -[AVButton _updateEdgeInsets]
  -[AVButton _updateBackgroundEffectViewIsHidden]
  -[AVButton _preferredImageName]
  -[AVButton _imageViewAlpha]
  -[AVButton wasLongPressed]
  -[AVButton treatsForcePressAsLongPress]
  -[AVButton setTreatsForcePressAsLongPress:]
  -[AVButton tintEffectStyle]
  -[AVButton usesBackgroundEffectViewForTextOnlyButtons]
  -[AVButton forceThreshold]
  -[AVButton setForceThreshold:]
  -[AVButton maximumForceSinceTrackingBegan]
  -[AVButton setMaximumForceSinceTrackingBegan:]
  -[AVButton multipleTouchesEndsTracking]
  -[AVButton fullScreenImageName]
  -[AVButton setFullScreenImageName:]
  -[AVButton inlineImageName]
  -[AVButton setInlineImageName:]
  -[AVButton fullScreenAlternateImageName]
  -[AVButton setFullScreenAlternateImageName:]
  -[AVButton inlineAlternateImageName]
  -[AVButton setInlineAlternateImageName:]
  -[AVButton micaSnapshotAlpha]
  -[AVButton setMicaSnapshotAlpha:]
  -[AVButton disablesHighlightWhenLongPressed]
  -[AVButton setDisablesHighlightWhenLongPressed:]
  -[AVButton clampsHitRectInsetsWhenContainedInScrollableView]
  -[AVButton setClampsHitRectInsetsWhenContainedInScrollableView:]
  -[AVButton trackingStartTime]
  -[AVButton setTrackingStartTime:]
  -[AVButton wasForcePressTriggered]
  -[AVButton setWasForcePressTriggered:]
  -[AVButton horizontalTranslationOfLongPress]
  -[AVButton setHorizontalTranslationOfLongPress:]
  -[AVButton previousHorizontalPositionOfLongPress]
  -[AVButton setPreviousHorizontalPositionOfLongPress:]
  -[AVButton userInteractionGestureRecognizer]
  -[AVButton setUserInteractionGestureRecognizer:]


AVHomeLoadingButtonControlItem : AVControlItem
 @property  AVLoadingButtonView *loadingButtonView
 @property  BOOL showsLoadingIndicator

  // instance methods
  -[AVHomeLoadingButtonControlItem .cxx_destruct]
  -[AVHomeLoadingButtonControlItem view]
  -[AVHomeLoadingButtonControlItem _updateTintColor]
  -[AVHomeLoadingButtonControlItem setShowsLoadingIndicator:]
  -[AVHomeLoadingButtonControlItem showsLoadingIndicator]
  -[AVHomeLoadingButtonControlItem initWithTitle:type:]
  -[AVHomeLoadingButtonControlItem _buttonTouchUpInside:]
  -[AVHomeLoadingButtonControlItem loadingButtonView]
  -[AVHomeLoadingButtonControlItem setLoadingButtonView:]


AVDisplayLink : NSObject /usr/lib/libSystem.B.dylib
 @property  @? linkFired
 @property  CADisplayLink *displayLink
 @property  id observer
 @property  double startTime
 @property  double runningTime

  // instance methods
  -[AVDisplayLink invalidate]
  -[AVDisplayLink observer]
  -[AVDisplayLink .cxx_destruct]
  -[AVDisplayLink setObserver:]
  -[AVDisplayLink startTime]
  -[AVDisplayLink setStartTime:]
  -[AVDisplayLink displayLink]
  -[AVDisplayLink setDisplayLink:]
  -[AVDisplayLink startDisplayLinkUpdatesForObserver:framesPerSecond:usingBlock:]
  -[AVDisplayLink linkFired:]
  -[AVDisplayLink runningTime]
  -[AVDisplayLink linkFired]
  -[AVDisplayLink setLinkFired:]


AVPlaybackControlsView : UIView /System/Library/Frameworks/Foundation.framework/Foundation
 @property  AVObservationController *observationController
 @property  NSArray *defaultAudioControls
 @property  NSArray *defaultDisplayModeControls
 @property  double keyboardHeight
 @property  UIViewPropertyAnimator *keyboardUIAvoidanceAnimator
 @property  NSLayoutConstraint *volumeButtonBottomToLayoutMarginsGuideBottomConstraint
 @property  NSLayoutConstraint *volumeTopToLayoutGuideTopConstraint
 @property  NSLayoutConstraint *volumeTopToViewTopConstraint
 @property  NSLayoutConstraint *screenModeControlsToVolumeControlsSpacingConstraint
 @property  BOOL doubleRowLayoutEnabled
 @property  BOOL needsIntialLayout
 @property  UIViewPropertyAnimator *playbackControlsVisibilityAnimator
 @property  NSUUID *mostRecentAnimationCompletionsID
 @property  BOOL topAreaLayoutGuideExpanded
 @property  BOOL showsProminentPlayButton
 @property  BOOL includesTransportControls
 @property  BOOL includesDisplayModeControlsContainer
 @property  BOOL includesCustomDisplayModeControls
 @property  BOOL includesAudioControlsContainer
 @property  BOOL includesCustomAudioControls
 @property  AVStyleSheet *styleSheet
 @property  BOOL fullScreen
 @property  long long preferredUnobscuredArea
 @property  long long includedContainers
 @property  UIView *volumeControlsContainer
 @property  UIView *playbackControlsContainer
 @property  AVBackdropView *screenModeControls
 @property  AVBackdropView *volumeControls
 @property  AVBackdropView *prominentPlayButtonBackdropView
 @property  AVBackdropView *miniPlayPauseButtonBackdropView
 @property  AVView *transportControlsContainerView
 @property  AVButton *doneButton
 @property  AVButton *fullScreenButton
 @property  AVButton *videoGravityButton
 @property  AVButton *pictureInPictureButton
 @property  NSArray *customDisplayModeItems
 @property  AVVolumeButtonControl *volumeButton
 @property  AVVolumeSlider *volumeSlider
 @property  NSArray *customAudioItems
 @property  AVButton *prominentPlayButton
 @property  AVButton *miniPlayPauseButton
 @property  AVTransportControlsView *transportControlsView
 @property  AVButton *standardPlayPauseButton
 @property  AVButton *skipForwardButton
 @property  AVButton *skipBackButton
 @property  AVButton *startLeftwardContentTransitionButton
 @property  AVButton *startRightwardContentTransitionButton
 @property  AVScrubber *scrubber
 @property  AVPlaybackControlsRoutePickerView *routePickerView
 @property  AVButton *mediaSelectionButton
 @property  NSArray *customMediaItems
 @property  NSArray *customControlItems
 @property  AVPlayerViewControllerCustomControlsView *customControlsView
 @property  BOOL hasVisibleSubview
 @property  {CGAffineTransform=dddddd} overrideTransformForProminentPlayButton
 @property  NSValue *overrideLayoutMarginsWhenEmbeddedInline

  // instance methods
  -[AVPlaybackControlsView dealloc]
  -[AVPlaybackControlsView .cxx_destruct]
  -[AVPlaybackControlsView traitCollectionDidChange:]
  -[AVPlaybackControlsView layoutSubviews]
  -[AVPlaybackControlsView safeAreaInsetsDidChange]
  -[AVPlaybackControlsView hitTest:withEvent:]
  -[AVPlaybackControlsView doneButton]
  -[AVPlaybackControlsView setFullScreen:]
  -[AVPlaybackControlsView isFullScreen]
  -[AVPlaybackControlsView keyboardHeight]
  -[AVPlaybackControlsView setKeyboardHeight:]
  -[AVPlaybackControlsView styleSheet]
  -[AVPlaybackControlsView volumeSlider]
  -[AVPlaybackControlsView setPreferredUnobscuredArea:]
  -[AVPlaybackControlsView preferredUnobscuredArea]
  -[AVPlaybackControlsView prominentPlayButton]
  -[AVPlaybackControlsView prominentPlayButtonBackdropView]
  -[AVPlaybackControlsView setStyleSheet:]
  -[AVPlaybackControlsView observationController]
  -[AVPlaybackControlsView customControlsView]
  -[AVPlaybackControlsView customControlItems]
  -[AVPlaybackControlsView setOverrideTransformForProminentPlayButton:]
  -[AVPlaybackControlsView setOverrideLayoutMarginsWhenEmbeddedInline:]
  -[AVPlaybackControlsView overrideTransformForProminentPlayButton]
  -[AVPlaybackControlsView overrideLayoutMarginsWhenEmbeddedInline]
  -[AVPlaybackControlsView initWithFrame:styleSheet:]
  -[AVPlaybackControlsView volumeButton]
  -[AVPlaybackControlsView setDoubleRowLayoutEnabled:]
  -[AVPlaybackControlsView isDoubleRowLayoutEnabled]
  -[AVPlaybackControlsView scrubber]
  -[AVPlaybackControlsView standardPlayPauseButton]
  -[AVPlaybackControlsView skipForwardButton]
  -[AVPlaybackControlsView skipBackButton]
  -[AVPlaybackControlsView startLeftwardContentTransitionButton]
  -[AVPlaybackControlsView startRightwardContentTransitionButton]
  -[AVPlaybackControlsView routePickerView]
  -[AVPlaybackControlsView mediaSelectionButton]
  -[AVPlaybackControlsView showsProminentPlayButton]
  -[AVPlaybackControlsView setupInitialLayout]
  -[AVPlaybackControlsView setIncludedContainers:animations:]
  -[AVPlaybackControlsView includesAudioControlsContainer]
  -[AVPlaybackControlsView includesCustomAudioControls]
  -[AVPlaybackControlsView includesTransportControls]
  -[AVPlaybackControlsView includesDisplayModeControlsContainer]
  -[AVPlaybackControlsView includesCustomDisplayModeControls]
  -[AVPlaybackControlsView setCustomControlItems:animations:]
  -[AVPlaybackControlsView animateAlongsideVisibilityAnimationsWithAnimationCoordinator:appearingViews:disappearingViews:]
  -[AVPlaybackControlsView hasVisibleSubview]
  -[AVPlaybackControlsView updateLayoutForChangedControlsVisibility]
  -[AVPlaybackControlsView _preferredArrangedAudioModeViews]
  -[AVPlaybackControlsView _preferredArrangedDisplayModeViews]
  -[AVPlaybackControlsView _currentArrangedAudioModeViews]
  -[AVPlaybackControlsView _currentArrangedDisplayModeViews]
  -[AVPlaybackControlsView _audioViewsToRemoveDuringAnimation]
  -[AVPlaybackControlsView _displayModeViewsToRemoveDuringAnimation]
  -[AVPlaybackControlsView _remove:views:]
  -[AVPlaybackControlsView _remove:view:]
  -[AVPlaybackControlsView _updatePlaybackControlsContainerVisibility:]
  -[AVPlaybackControlsView _updateAreVolumeAndTransportControlsVisible]
  -[AVPlaybackControlsView _updateDoubleRowLayoutEnabled]
  -[AVPlaybackControlsView _setupInitialLayout]
  -[AVPlaybackControlsView _updateLayoutMargins]
  -[AVPlaybackControlsView _animateKeyboardAvoidance:duration:]
  -[AVPlaybackControlsView _playbackControlsViewItems]
  -[AVPlaybackControlsView _playbackControlsViewsForControlItems:withType:]
  -[AVPlaybackControlsView _customControlsViewIfLoaded]
  -[AVPlaybackControlsView includedContainers]
  -[AVPlaybackControlsView volumeControlsContainer]
  -[AVPlaybackControlsView playbackControlsContainer]
  -[AVPlaybackControlsView screenModeControls]
  -[AVPlaybackControlsView volumeControls]
  -[AVPlaybackControlsView miniPlayPauseButtonBackdropView]
  -[AVPlaybackControlsView transportControlsContainerView]
  -[AVPlaybackControlsView fullScreenButton]
  -[AVPlaybackControlsView videoGravityButton]
  -[AVPlaybackControlsView pictureInPictureButton]
  -[AVPlaybackControlsView customDisplayModeItems]
  -[AVPlaybackControlsView customAudioItems]
  -[AVPlaybackControlsView miniPlayPauseButton]
  -[AVPlaybackControlsView transportControlsView]
  -[AVPlaybackControlsView customMediaItems]
  -[AVPlaybackControlsView defaultAudioControls]
  -[AVPlaybackControlsView defaultDisplayModeControls]
  -[AVPlaybackControlsView keyboardUIAvoidanceAnimator]
  -[AVPlaybackControlsView volumeButtonBottomToLayoutMarginsGuideBottomConstraint]
  -[AVPlaybackControlsView volumeTopToLayoutGuideTopConstraint]
  -[AVPlaybackControlsView volumeTopToViewTopConstraint]
  -[AVPlaybackControlsView screenModeControlsToVolumeControlsSpacingConstraint]
  -[AVPlaybackControlsView needsIntialLayout]
  -[AVPlaybackControlsView setNeedsIntialLayout:]
  -[AVPlaybackControlsView playbackControlsVisibilityAnimator]
  -[AVPlaybackControlsView setPlaybackControlsVisibilityAnimator:]
  -[AVPlaybackControlsView mostRecentAnimationCompletionsID]
  -[AVPlaybackControlsView setMostRecentAnimationCompletionsID:]
  -[AVPlaybackControlsView isTopAreaLayoutGuideExpanded]
  -[AVPlaybackControlsView setTopAreaLayoutGuideExpanded:]


_AVBundle : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[_AVBundle bundle]


UIWindow(AVAdditions)
	// instance methods
	-[UIWindow(AVAdditions) avkit_canAttemptSecondWindowForRotability]
	-[UIWindow(AVAdditions) avkit_isHostedInAnotherProcess]
	-[UIWindow(AVAdditions) avkit_canAttemptRotation]
	-[UIWindow(AVAdditions) avkit_preferredInterfaceOrientationFromDeviceOrientation]
	-[UIWindow(AVAdditions) avkit_supportsAutorotationForInterfaceOrientationMask:]
	-[UIWindow(AVAdditions) avkit_ensureOrientation:disableTouchCancellation:]

AVPlayerItem(AVKitAdditionsPrivate)
	// instance methods
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_data]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_dataOrNil]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_setValue:forAVKitProperty:]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_valueForAVKitProperty:]
	-[AVPlayerItem(AVKitAdditionsPrivate) externalMetadata]
	-[AVPlayerItem(AVKitAdditionsPrivate) setExternalMetadata:]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_setMusicBehaviorData:]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_musicAppBehaviorContext]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_setCurrentEditBehaviorContext:]
	-[AVPlayerItem(AVKitAdditionsPrivate) avkit_currentEditBehaviorContext]

AVAudioSession(AVPlaybackRouteSelecting_Private)
	// instance methods
	-[AVAudioSession(AVPlaybackRouteSelecting_Private) _externalPlaybackController]
	-[AVAudioSession(AVPlaybackRouteSelecting_Private) prepareRouteSelectionForPlaybackWithCompletionHandler:]
	-[AVAudioSession(AVPlaybackRouteSelecting_Private) prepareRouteSelectionForPlaybackFromBundleID:withCompletionHandler:]

AVMediaSelectionOption(AVPlayerController)
	// class methods
	+[AVMediaSelectionOption(AVPlayerController) avkit_offOption]
	+[AVMediaSelectionOption(AVPlayerController) avkit_autoOption]

	// instance methods
	-[AVMediaSelectionOption(AVPlayerController) localizedDisplayName]
	-[AVMediaSelectionOption(AVPlayerController) languageCompare:currentLanguageCode:currentLanguageIdentifier:]
	-[AVMediaSelectionOption(AVPlayerController) isAC3Only]
	-[AVMediaSelectionOption(AVPlayerController) avkit_persistentIdentifier]
	-[AVMediaSelectionOption(AVPlayerController) isCC]
	-[AVMediaSelectionOption(AVPlayerController) isAuxiliary]
	-[AVMediaSelectionOption(AVPlayerController) isEasyReader]
	-[AVMediaSelectionOption(AVPlayerController) isSDH]
	-[AVMediaSelectionOption(AVPlayerController) isMain]
	-[AVMediaSelectionOption(AVPlayerController) avkit_title]
	-[AVMediaSelectionOption(AVPlayerController) shortLocalizedDisplayName]
	-[AVMediaSelectionOption(AVPlayerController) mediaRemoteIdentifier]

UIApplication(AVAdditions)
	// instance methods
	-[UIApplication(AVAdditions) avkit_possiblePrimaryWindowScene]
	-[UIApplication(AVAdditions) avkit_possibleWindowForControllingOverallAppearance]
	-[UIApplication(AVAdditions) avkit_windowSceneWithSessionIdentifier:]

NSBundle(AVAdditions)
	// instance methods
	-[NSBundle(AVAdditions) imageForResource:size:]
	-[NSBundle(AVAdditions) URLForMovieResource:]

UIViewController(AVAdditions)
	// instance methods
	-[UIViewController(AVAdditions) avkit_isEffectivelyFullScreen]
	-[UIViewController(AVAdditions) avkit_setNeedsUpdatePreferencesIfNeeded]

UIWindowScene(AVAdditions)
	// class methods
	+[UIWindowScene(AVAdditions) avkit_supportsInteractiveCounterRotationDismissals]

	// instance methods
	-[UIWindowScene(AVAdditions) avkit_disableTouchCancellation:forRotationActions:]
	-[UIWindowScene(AVAdditions) avkit_asWindowScene]
	-[UIWindowScene(AVAdditions) avkit_screenType]
	-[UIWindowScene(AVAdditions) avkit_screenHasWindowsExcludingWindow:]
	-[UIWindowScene(AVAdditions) _avkit_setPreferredRefreshRate:HDRMode:overscanCompensation:]

UIView(AVAdditions)
	// instance methods
	-[UIView(AVAdditions) avkit_ancestorViewPassingTest:]
	-[UIView(AVAdditions) avkit_hitTestControlForPoint:withEvent:bestSoFar:shortestDistanceSoFar:]
	-[UIView(AVAdditions) avkit_isCompletelyTransparent]
	-[UIView(AVAdditions) avkit_overrideLayoutMarginsForCounterRotation]
	-[UIView(AVAdditions) avkit_isVideoGravityFrozen]
	-[UIView(AVAdditions) avkit_isCounterRotatedForTransition]
	-[UIView(AVAdditions) avkit_isBeingDismissed]
	-[UIView(AVAdditions) avkit_needsUpdateBackdropCaptureViewHidden]
	-[UIView(AVAdditions) avkit_backdropGroupLeader]
	-[UIView(AVAdditions) avkit_isBeingScrollTested]
	-[UIView(AVAdditions) avkit_isBeingScrolled]
	-[UIView(AVAdditions) avkit_isBeingScrolledQuickly]
	-[UIView(AVAdditions) avkit_isInAScrollView]
	-[UIView(AVAdditions) avkit_isAncestorOfViewPassingTest:]
	-[UIView(AVAdditions) avkit_isDescendantOfNonPagingScrollView]
	-[UIView(AVAdditions) avkit_makeSubtreeDisallowGroupBlending]
	-[UIView(AVAdditions) avkit_hasFullScreenLayoutClass]
	-[UIView(AVAdditions) avkit_hitTestControlForPoint:withEvent:]
	-[UIView(AVAdditions) avkit_isInAWindowAndVisible]
	-[UIView(AVAdditions) avkit_wantsAnimatedViewTransitions]
	-[UIView(AVAdditions) avkit_isDescendantOfViewPassingTest:]
	-[UIView(AVAdditions) avkit_largestInscribedRectInBoundingPathWithCenter:aspectRatio:]
	-[UIView(AVAdditions) avkit_constraintsFromCenterAnchorsToCenterAnchorsOfItem:]
	-[UIView(AVAdditions) avkit_constraintsFromEdgeAnchorsToEdgeAnchorsOfItem:]
	-[UIView(AVAdditions) avkit_constraintsFromCenterAndDimensionAnchorsToCenterAndDimensionAnchorsOfItem:]
	-[UIView(AVAdditions) avkit_constraintsFromDimensionAnchorsToSize:]

UIScrollView(AVAdditions)
	// instance methods
	-[UIScrollView(AVAdditions) avkit_isBeingScrollTested]
	-[UIScrollView(AVAdditions) avkit_isBeingScrolled]
	-[UIScrollView(AVAdditions) avkit_isBeingScrolledQuickly]
	-[UIScrollView(AVAdditions) avkit_isInAScrollView]
	-[UIScrollView(AVAdditions) avkit_isDescendantOfNonPagingScrollView]

CALayer(AVAdditions)
	// instance methods
	-[CALayer(AVAdditions) avkit_removeAllSublayerTransformAnimations]

UIColor(AVAdditions)
	// class methods
	+[UIColor(AVAdditions) AV_indicatorBackgroundColor]
	+[UIColor(AVAdditions) AV_indicatorForegroundColor]

AVPlayerLayer(AVPictureInPictureContentSource)
	// instance methods
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_makePlayerControllerIfNeeded:]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_pictureInPictureViewController]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_startRoutingVideoToPictureInPictureViewController:]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_stopRoutingVideoToPictureInPictureViewController:]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_videoRectInWindow]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_isVisible]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_window]
	-[AVPlayerLayer(AVPictureInPictureContentSource) avkit_makePictureInPicturePlatformAdapterContentPlaceholderLayer]

UIImage(AVAdditions)
	// class methods
	+[UIImage(AVAdditions) avkit_flatWhiteResizableTemplateImage]
	+[UIImage(AVAdditions) avkit_imageNamed:completion:]
	+[UIImage(AVAdditions) avkit_loadedImageNames]

UIScene(AVSecondScreenAdditions)
	// class methods
	+[UIScene(AVSecondScreenAdditions) avkit_secondScreenScenes]

	// instance methods
	-[UIScene(AVSecondScreenAdditions) avkit_asWindowScene]
	-[UIScene(AVSecondScreenAdditions) avkit_screenType]
	-[UIScene(AVSecondScreenAdditions) avkit_screenHasWindowsExcludingWindow:]
	-[UIScene(AVSecondScreenAdditions) _avkit_setPreferredRefreshRate:HDRMode:overscanCompensation:]
	-[UIScene(AVSecondScreenAdditions) avkit_isForeground]
	-[UIScene(AVSecondScreenAdditions) avkit_resetPreferredModeSwitchRequest]
	-[UIScene(AVSecondScreenAdditions) avkit_setPreferredRefreshRate:HDRMode:]

UIFont(AVAdditions)
	// class methods
	+[UIFont(AVAdditions) timeFontWithFont:]
	+[UIFont(AVAdditions) timeFontWithName:size:]
	+[UIFont(AVAdditions) timeFontOfSize:]
	+[UIFont(AVAdditions) boldTimeFontOfSize:]
	+[UIFont(AVAdditions) italicTimeFontOfSize:]
	+[UIFont(AVAdditions) monospacedTimeFontOfSize:]

NSLayoutConstraint(NSLayoutConstraint_AVKitAdditions)
	// class methods
	+[NSLayoutConstraint(NSLayoutConstraint_AVKitAdditions) avkit_constraintsFromEdgesOfItem:toLeadingAnchor:topAnchor:trailingAnchor:bottomAnchor:priority:]
	+[NSLayoutConstraint(NSLayoutConstraint_AVKitAdditions) avkit_constraintsFromEdgesOfItem:toEdgesOfItem:]
	+[NSLayoutConstraint(NSLayoutConstraint_AVKitAdditions) avkit_constraintsFromLeadingAndTrailingEdgesOfItem:toEdgesOfItem:]
	+[NSLayoutConstraint(NSLayoutConstraint_AVKitAdditions) avkit_constraintsFromTopAndBottomEdgesOfItem:toEdgesOfItem:]

UILayoutGuide(AVKitLayoutItem)
	// instance methods
	-[UILayoutGuide(AVKitLayoutItem) avkit_constraintsFromCenterAnchorsToCenterAnchorsOfItem:]
	-[UILayoutGuide(AVKitLayoutItem) avkit_constraintsFromEdgeAnchorsToEdgeAnchorsOfItem:]
	-[UILayoutGuide(AVKitLayoutItem) avkit_constraintsFromCenterAndDimensionAnchorsToCenterAndDimensionAnchorsOfItem:]
	-[UILayoutGuide(AVKitLayoutItem) avkit_constraintsFromDimensionAnchorsToSize:]

NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions)
	// instance methods
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintEqualToAnchor:priority:]
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintGreaterThanOrEqualToAnchor:priority:]
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintLessThanOrEqualToAnchor:priority:]
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintEqualToAnchor:constant:priority:]
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintGreaterThanOrEqualToAnchor:constant:priority:]
	-[NSLayoutAnchor(NSLayoutAnchor_AVKitAdditions) avkit_constraintLessThanOrEqualToAnchor:constant:priority:]

NSLayoutDimension(NSLayoutDimension_AVKitAdditions)
	// instance methods
	-[NSLayoutDimension(NSLayoutDimension_AVKitAdditions) avkit_constraintEqualToConstant:priority:]
	-[NSLayoutDimension(NSLayoutDimension_AVKitAdditions) avkit_constraintGreaterThanOrEqualToConstant:priority:]
	-[NSLayoutDimension(NSLayoutDimension_AVKitAdditions) avkit_constraintLessThanOrEqualToConstant:priority:]

01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetImageGenerator 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReader 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetReaderTrackOutput 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioSession 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVComposition 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVDisplayCriteria 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMediaSelectionGroup 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMediaSelectionOption 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMetadataItem 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoComposition 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoCompositionInstruction 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoCompositionLayerInstruction 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputContext 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerLayer 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVQueuePlayer 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVRouteDetector 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVRoutingSessionManager 
01 00 0100 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimeFormatter 
01 00 0400 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABackdropLayer 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMLParser 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAState 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateAddAnimation 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateAddElement 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateController 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateElement 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateRemoveAnimation 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateRemoveElement 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateSetValue 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateTransition 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAStateTransitionElement 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATextLayer 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 0c00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransformLayer 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutAnchor 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutDimension 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1000 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0f00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0200 /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus: PGPictureInPictureProxy 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColorEffect 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UICubicTimingParameters 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyCommand 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMovieScrubber 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPinchGestureRecognizer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPresentationController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIResponder 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIRotationGestureRecognizer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScene 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UISelectionFeedbackGenerator 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UISlider 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringTimingParameters 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIToolbar 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffect 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHostedWindow 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIVisualEffectConfig 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIVisualEffectLayerConfig 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIVisualEffectTintLayerConfig 
