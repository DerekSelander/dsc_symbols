|| __DATA.__data _MPArtworkCatalogOriginalSize
|| __DATA.__data _MPModelPropertyMovieDownloadedDate
|| __DATA.__data _MPModelPropertyPlaylistDownloadedDate
|| __DATA.__data _MPModelPropertyStoreAssetNeedsUserUpload
|| __DATA.__data _MPModelPropertyTVEpisodeDownloadedDate
|| __DATA.__data _MPNowPlayingContentItemArtworkMaxSize
|| __DATA.__data _MPResponseDidInvalidateNotification
|| __DATA.__data _MPStoreItemMovieClipAssetFlavorHD1080PVideo
|| __DATA.__data _MPStoreItemMovieClipAssetFlavorHD720PVideo
|| __DATA.__data _MPStoreItemMovieClipAssetFlavorSD480PVideo
|| __DATA.__data _MPStoreItemMovieClipAssetFlavorSDVideo
|| __DATA.__objc_data _OBJC_CLASS_$_MPARC4RandomSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVAuxiliaryDevice
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVBatteryLevel
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVClippingTableView
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVCompanionEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVCompanionProxiedEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVCompanionProxiedOutputDeviceRoutingDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVController
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVErrorResolver
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVErrorResolverBlockHandler
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVLightweightRoutingController
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVOutputDeviceDescription
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVOutputDeviceRoute
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVQueueCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVRouteConnection
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVRoutingTableViewCellSubtitleTextState
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVRoutingTableViewHeaderView
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVRoutingViewItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVTelevisionRoute
|| __DATA.__objc_data _OBJC_CLASS_$_MPAVTelevisionRoutingDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAbstractNetworkArtworkDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPAdvanceRepeatModeCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPAdvanceRepeatModeCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPAdvanceShuffleModeCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPAdvanceShuffleModeCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkCatalog
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkColorAnalysis
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkColorAnalyzer
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkImageAttachments
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkRepresentation
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkRepresentationCollection
|| __DATA.__objc_data _OBJC_CLASS_$_MPArtworkResizeOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPAssistantAnalyticsReportingController
|| __DATA.__objc_data _OBJC_CLASS_$_MPAsyncBlockOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPAsyncOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPAudioAndSubtitlesController
|| __DATA.__objc_data _OBJC_CLASS_$_MPAudioDeviceController
|| __DATA.__objc_data _OBJC_CLASS_$_MPAudioVideoRoutingPopoverController
|| __DATA.__objc_data _OBJC_CLASS_$_MPBaseEntityTranslator
|| __DATA.__objc_data _OBJC_CLASS_$_MPBrowsableContentItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeDetails
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeLanguageOptionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangePlaybackPositionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangePlaybackRateCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangePlaybackRateCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeQueueEndActionCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeQueueEndActionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeRepeatModeCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeRepeatModeCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeShuffleModeCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPChangeShuffleModeCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCloudControllerItemIDList
|| __DATA.__objc_data _OBJC_CLASS_$_MPCloudServiceStatusController
|| __DATA.__objc_data _OBJC_CLASS_$_MPContentItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPContentTasteController
|| __DATA.__objc_data _OBJC_CLASS_$_MPCreateRadioStationCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPCubicSpringAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_MPCubicSpringTimingParameters
|| __DATA.__objc_data _OBJC_CLASS_$_MPCustomDataPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPDetailScrubController
|| __DATA.__objc_data _OBJC_CLASS_$_MPEmptyPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPExportableArtworkProperties
|| __DATA.__objc_data _OBJC_CLASS_$_MPFeedbackCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPFeedbackCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPGaplessInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPGenericTracklistPlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPHomeMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_MPHomeSharingML3DataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_MPHomeSharingRentalTracker
|| __DATA.__objc_data _OBJC_CLASS_$_MPHomeUserMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_MPIdentifierSet
|| __DATA.__objc_data _OBJC_CLASS_$_MPInsertIntoPlaybackQueueCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPInsertIntoPlaybackQueueCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPKeyValueObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MPLazySectionedCollection
|| __DATA.__objc_data _OBJC_CLASS_$_MPLeaveSharedPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPLibraryAddStatusObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MPLibraryKeepLocalStatusObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MPLibraryKeepLocalStatusObserverConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPLocalMediaQueryRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPMRAVEndpointObserverWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_MPMRAVOutputContextWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionItemAuthTokenRenewalRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequestController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataRequestInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionItemMetadataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPICollectionMetadataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaAPIParserLayer
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaBooklet
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaChapter
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaConditionalPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaContainmentPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControls
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControlsConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControlsLanguageOptions
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControlsStandaloneViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControlsStatusBarStyleOverridesCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaControlsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaDownload
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaDownloadManager
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaItemArtwork
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaKitEntityTranslator
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaKitEntityTranslatorContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaLibraryAlbumAppData
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaLibraryArtwork
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaLibraryArtworkRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaLibraryConnectionAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaPersistentIDsPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaPickerConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaPlaylistCreationMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaQueryMutableSectionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaQuerySection
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaQuerySectionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaRemoteEntityTranslator
|| __DATA.__objc_data _OBJC_CLASS_$_MPMediaRemoteEntityTranslatorContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPMiddlewareChain
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelAlbum
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelAlbumKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelArtist
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelArtistKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelComposer
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelComposerKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelCurator
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelCuratorActualKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelFileAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelFileAssetKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationGroup
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationGroupKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationsMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationsRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationsRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelForYouRecommendationsResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGenericObject
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGenericObjectKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGenre
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGenreKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGroup
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelGroupKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelHomeSharingAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryAddToPlaylistChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryAlbumAppDataChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryDefaultSectionedCollectionDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryDeleteEntityChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryDownloadQueueRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryDownloadQueueResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryHasBeenPlayedChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryHasPurchasesRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryImportChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryIncrementPlayCountChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryIncrementSkipCountChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryKeepLocalChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryPlaylistEditChangeRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibrarySearchRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibrarySearchResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibrarySearchScope
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLibraryTransientStateController
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLyrics
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelLyricsKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelMediaClip
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelMediaClipKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelMovie
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelMovieKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelObject
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelObjectMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPerson
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlayEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaybackPosition
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaylist
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaylistEntriesShareEligibilityRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaylistEntry
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaylistEntryKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPlaylistKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPodcast
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPodcastAuthor
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPodcastEpisode
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPodcastEpisodeKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelPodcastKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRadioStation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRadioStationEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRadioStationEventKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRadioStationKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRecentlyPlayedRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRecentlyPlayedRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRecentlyPlayedResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRecordLabel
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRecordLabelKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSharedListeningParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSharedListeningParticipantKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelShimRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelShimResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSocialPerson
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSocialPersonKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSong
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSongKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelSortDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStaticAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStaticAssetKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStaticRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStaticResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseContentItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseContentItemBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseRoomMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseRoomRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreBrowseSection
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreGroupingsMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStorePlatformMetadataGenericObjectBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelStoreRadioMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVEpisode
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVEpisodeKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVSeason
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVSeasonKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVShow
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVShowCreator
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelTVShowKind
|| __DATA.__objc_data _OBJC_CLASS_$_MPModelVerifyLocalFileAssetIntegrityRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPMovieAccessLog
|| __DATA.__objc_data _OBJC_CLASS_$_MPMovieAccessLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPMovieErrorLog
|| __DATA.__objc_data _OBJC_CLASS_$_MPMovieErrorLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPMoviePlayerController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMoviePlayerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMultiSortDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicMediaPickerRemoteViewController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicMediaPickerXPCInterfaces
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerApplicationController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerApplicationQueueModifications
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerMutableQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerNowPlaying
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerNowPlayingTimeSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerControllerSystemCache
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerMediaItemQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerPlayParametersQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerPlaybackArchiveQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerRadioStationQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerServerStateUpdateRecord
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerStoreQueueDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPMusicPlayerSystemController
|| __DATA.__objc_data _OBJC_CLASS_$_MPMutableArtworkColorAnalysis
|| __DATA.__objc_data _OBJC_CLASS_$_MPMutablePropertySet
|| __DATA.__objc_data _OBJC_CLASS_$_MPMutableSectionedCollection
|| __DATA.__objc_data _OBJC_CLASS_$_MPMutableStoreAssetPlaybackResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPNetworkObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MPNetworkPlayabilityMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_MPNondurableMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPNotificationObserver
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingContentItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoAudioFormat
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoAudioRoute
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoLanguageOption
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoLanguageOptionGroup
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoLyricsEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoLyricsItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoLyricsItemToken
|| __DATA.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoTransportableSessionResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPPCompoundPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPConditionalPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPMediaPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPMediaPredicateValue
|| __DATA.__objc_data _OBJC_CLASS_$_MPPMediaQuery
|| __DATA.__objc_data _OBJC_CLASS_$_MPPPersistentIDsPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPPropertyPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPSearchStringPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaceholderAVItem
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaceholderArtwork
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlayableContentManager
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlayableContentManagerContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackArchive
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackArchiveConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackArchiveDisplayProperties
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackContextRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackEQSetting
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackSessionCommandInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPPlaybackUserDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_MPPostEventNoticeCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPPreloadPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPPreloadPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPPropertySet
|| __DATA.__objc_data _OBJC_CLASS_$_MPProtocolProxy
|| __DATA.__objc_data _OBJC_CLASS_$_MPQueueFeeder
|| __DATA.__objc_data _OBJC_CLASS_$_MPQueueFeederIdentifierRegistry
|| __DATA.__objc_data _OBJC_CLASS_$_MPQueuePlayer
|| __DATA.__objc_data _OBJC_CLASS_$_MPRTCReportingController
|| __DATA.__objc_data _OBJC_CLASS_$_MPRTCReportingEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPRTCWeakLinkSupport
|| __DATA.__objc_data _OBJC_CLASS_$_MPRadioLibrary
|| __DATA.__objc_data _OBJC_CLASS_$_MPRadioRecentStationsGroup
|| __DATA.__objc_data _OBJC_CLASS_$_MPRadioStation
|| __DATA.__objc_data _OBJC_CLASS_$_MPRadioStationEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPRadioStationRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPRandomDistribution
|| __DATA.__objc_data _OBJC_CLASS_$_MPRatingCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPRatingCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemoteCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemoteCommandHandlerDialog
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemoteCommandHandlerDialogAction
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemoteCommandStatus
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_CLASS_$_MPRemoteRadioController
|| __DATA.__objc_data _OBJC_CLASS_$_MPReorderQueueCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPReorderQueueCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPRequestResponseController
|| __DATA.__objc_data _OBJC_CLASS_$_MPResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPSectionedCollection
|| __DATA.__objc_data _OBJC_CLASS_$_MPSectionedIdentifierList
|| __DATA.__objc_data _OBJC_CLASS_$_MPSectionedIdentifierListPosition
|| __DATA.__objc_data _OBJC_CLASS_$_MPSeekCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabase
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseAssetImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseHLSAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseImportResult
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseMediaKitImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseMetadataImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseSINFImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseStorePlatformImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPServerObjectDatabaseSubPlaybackDispatchImportRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPSetPlaybackQueueCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPSetPlaybackQueueCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPSetPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPSetPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPSetPriorityForPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_CLASS_$_MPShuffleableSectionedIdentifierList
|| __DATA.__objc_data _OBJC_CLASS_$_MPSkipIntervalCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPSkipTrackCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPSpecialSeekCommandEvent
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreArtworkDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreArtworkRequestToken
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreAssetInfoPlaybackCache
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreAssetInfoPlaybackCacheRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreAssetPlaybackResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreContentReport
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreContentReporter
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreDownload
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreFileAssetFairPlayInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreFileAssetInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreHLSAssetInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemLibraryImport
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemLibraryImportElement
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemLibraryImportLookupElement
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadataCache
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadataCacheKey
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadataRequestController
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMetadataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMovieClip
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemMovieClipAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemOffer
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreItemOfferAsset
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLibraryPersonalizationContentDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLibraryPersonalizationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLibraryPersonalizationResponse
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLyricsRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLyricsSnippetRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreLyricsSnippetURLComponents
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelAlbumBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelArtistBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelCuratorBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelGenericObjectBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelMovieBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelMovieMediaClipBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelObjectBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelPlaybackPositionBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelPlaylistBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelRadioStationBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelRequestConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelRequestOperation
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelSocialPersonBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelSongBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelStoreAssetBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelTVEpisodeBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelTVSeasonBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelTVShowBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreModelTVShowCreatorBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_MPStorePlatformEntityTranslator
|| __DATA.__objc_data _OBJC_CLASS_$_MPStorePlatformEntityTranslatorContext
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreRadioStreamAssetInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreSocialServiceController
|| __DATA.__objc_data _OBJC_CLASS_$_MPStoreSocialServiceTransientStatesSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_MPSubscriptionStatusPlaybackInformation
|| __DATA.__objc_data _OBJC_CLASS_$_MPTiledArtworkDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPTiledArtworkRequest
|| __DATA.__objc_data _OBJC_CLASS_$_MPTimedMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_MPUbiquitousPlaybackPositionController
|| __DATA.__objc_data _OBJC_CLASS_$_MPUbiquitousPlaybackPositionEntity
|| __DATA.__objc_data _OBJC_CLASS_$_MPUserNotification
|| __DATA.__objc_data _OBJC_CLASS_$_MPVolumeControllerRouteDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_MPVolumeGroupSliderCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_MPVolumeHardwareButtonController
|| __DATA.__objc_data _OBJC_CLASS_$_MPWeakTimer
|| __DATA.__objc_data _OBJC_CLASS_$__MPMediaLibraryEntityChange
|| __DATA.__objc_data _OBJC_CLASS_$__MPMediaSearchStringPredicate
|| __DATA.__objc_data _OBJC_CLASS_$__MPMusicPlayerMediaItemProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_MPARC4RandomSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVAuxiliaryDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVBatteryLevel
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVClippingTableView
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVCompanionEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVCompanionProxiedEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVCompanionProxiedOutputDeviceRoutingDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVEndpointRoutingDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVErrorResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVErrorResolverBlockHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVLightweightRoutingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVOutputDeviceDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVOutputDeviceRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVQueueCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVRouteConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVRoutingTableViewCellSubtitleTextState
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVRoutingTableViewHeaderView
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVRoutingViewItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVTelevisionRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAVTelevisionRoutingDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAbstractNetworkArtworkDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAdvanceRepeatModeCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAdvanceRepeatModeCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAdvanceShuffleModeCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAdvanceShuffleModeCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkCatalog
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkColorAnalysis
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkColorAnalyzer
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkImageAttachments
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkRepresentation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkRepresentationCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPArtworkResizeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAssistantAnalyticsReportingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAsyncBlockOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAsyncOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAudioAndSubtitlesController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAudioDeviceController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPAudioVideoRoutingPopoverController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPBaseEntityTranslator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPBrowsableContentItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeDetails
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeLanguageOptionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangePlaybackPositionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangePlaybackRateCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangePlaybackRateCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeQueueEndActionCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeQueueEndActionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeRepeatModeCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeRepeatModeCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeShuffleModeCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPChangeShuffleModeCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCloudControllerItemIDList
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCloudServiceStatusController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPContentItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPContentTasteController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCreateRadioStationCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCubicSpringAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCubicSpringTimingParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_MPCustomDataPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPDetailScrubController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPEmptyPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPExportableArtworkProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_MPFeedbackCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPFeedbackCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPGaplessInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPGenericTracklistPlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPHomeMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPHomeSharingRentalTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_MPHomeUserMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPIdentifierSet
|| __DATA.__objc_data _OBJC_METACLASS_$_MPInsertIntoPlaybackQueueCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPInsertIntoPlaybackQueueCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPKeyValueObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLazySectionedCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLeaveSharedPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLibraryAddStatusObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLibraryKeepLocalStatusObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLibraryKeepLocalStatusObserverConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPLocalMediaQueryRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMRAVEndpointObserverWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMRAVOutputContextWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionItemAuthTokenRenewalRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionItemMetadataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionItemMetadataRequestController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionItemMetadataRequestInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionItemMetadataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPICollectionMetadataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaAPIParserLayer
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaBooklet
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaChapter
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaConditionalPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaContainmentPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControls
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControlsConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControlsLanguageOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControlsStandaloneViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControlsStatusBarStyleOverridesCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaControlsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaDownload
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaDownloadManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaItemArtwork
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaKitEntityTranslator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaKitEntityTranslatorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaLibraryAlbumAppData
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaLibraryArtwork
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaLibraryArtworkRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaLibraryConnectionAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaPersistentIDsPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaPickerConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaPlaylistCreationMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaQueryMutableSectionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaQuerySection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaQuerySectionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaRemoteEntityTranslator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMediaRemoteEntityTranslatorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMiddlewareChain
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelAlbum
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelAlbumKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelArtist
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelArtistKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelComposer
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelComposerKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelCurator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelCuratorActualKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelFileAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelFileAssetKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationGroupKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationsMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationsRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationsRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelForYouRecommendationsResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGenericObject
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGenericObjectKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGenre
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGenreKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelGroupKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelHomeSharingAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryAddToPlaylistChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryAlbumAppDataChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryDefaultSectionedCollectionDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryDeleteEntityChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryDownloadQueueRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryDownloadQueueResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryHasBeenPlayedChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryHasPurchasesRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryImportChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryIncrementPlayCountChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryIncrementSkipCountChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryKeepLocalChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryPlaylistEditChangeRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibrarySearchRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibrarySearchResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibrarySearchScope
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLibraryTransientStateController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLyrics
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelLyricsKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelMediaClip
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelMediaClipKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelMovie
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelMovieKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelObject
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelObjectMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPerson
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlayEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaybackPosition
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaylist
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaylistEntriesShareEligibilityRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaylistEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaylistEntryKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPlaylistKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPodcast
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPodcastAuthor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPodcastEpisode
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPodcastEpisodeKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelPodcastKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRadioStation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRadioStationEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRadioStationEventKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRadioStationKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRecentlyPlayedRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRecentlyPlayedRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRecentlyPlayedResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRecordLabel
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRecordLabelKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSharedListeningParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSharedListeningParticipantKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelShimRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelShimResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSocialPerson
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSocialPersonKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSong
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSongKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelSortDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStaticAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStaticAssetKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStaticRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStaticResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseContentItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseContentItemBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseRoomMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseRoomRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreBrowseSection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreGroupingsMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStorePlatformMetadataGenericObjectBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelStoreRadioMusicKitRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVEpisode
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVEpisodeKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVSeason
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVSeasonKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVShow
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVShowCreator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelTVShowKind
|| __DATA.__objc_data _OBJC_METACLASS_$_MPModelVerifyLocalFileAssetIntegrityRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMovieAccessLog
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMovieAccessLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMovieErrorLog
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMovieErrorLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMoviePlayerController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMoviePlayerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMultiSortDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicMediaPickerRemoteViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicMediaPickerXPCInterfaces
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerApplicationController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerApplicationQueueModifications
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerMutableQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerNowPlaying
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerNowPlayingTimeSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerControllerSystemCache
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerMediaItemQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerPlayParametersQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerPlaybackArchiveQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerRadioStationQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerServerStateUpdateRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerStoreQueueDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMusicPlayerSystemController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMutableArtworkColorAnalysis
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMutablePropertySet
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMutableSectionedCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPMutableStoreAssetPlaybackResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNetworkObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNetworkPlayabilityMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNondurableMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNotificationObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingContentItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoAudioFormat
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoAudioRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoLanguageOption
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoLanguageOptionGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoLyricsEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoLyricsItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoLyricsItemToken
|| __DATA.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoTransportableSessionResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPCompoundPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPConditionalPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPMediaPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPMediaPredicateValue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPMediaQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPPersistentIDsPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPPropertyPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPSearchStringPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaceholderAVItem
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaceholderArtwork
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlayableContentManager
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlayableContentManagerContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackArchive
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackArchiveConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackArchiveDisplayProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackContextRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackEQSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackSessionCommandInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPlaybackUserDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPostEventNoticeCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPreloadPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPreloadPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPPropertySet
|| __DATA.__objc_data _OBJC_METACLASS_$_MPProtocolProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_MPQueueFeeder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPQueueFeederIdentifierRegistry
|| __DATA.__objc_data _OBJC_METACLASS_$_MPQueuePlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRTCReportingController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRTCReportingEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRTCWeakLinkSupport
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRadioLibrary
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRadioRecentStationsGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRadioStation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRadioStationEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRadioStationRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRandomDistribution
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRatingCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRatingCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemoteCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemoteCommandHandlerDialog
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemoteCommandHandlerDialogAction
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemoteCommandStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemotePlaybackQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRemoteRadioController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPReorderQueueCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPReorderQueueCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPRequestResponseController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSectionedCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSectionedIdentifierList
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSectionedIdentifierListPosition
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSeekCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabase
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseAssetImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseHLSAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseImportResult
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseMediaKitImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseMetadataImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseSINFImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseStorePlatformImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPServerObjectDatabaseSubPlaybackDispatchImportRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSetPlaybackQueueCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSetPlaybackQueueCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSetPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSetPlaybackSessionCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSetPriorityForPlaybackSessionCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_MPShuffleableSectionedIdentifierList
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSkipIntervalCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSkipTrackCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSpecialSeekCommandEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreArtworkDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreArtworkRequestToken
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreAssetInfoPlaybackCache
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreAssetInfoPlaybackCacheRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreAssetPlaybackResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreContentReport
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreContentReporter
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreDownload
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreFileAssetFairPlayInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreFileAssetInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreHLSAssetInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemLibraryImport
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemLibraryImportElement
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemLibraryImportLookupElement
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadataCache
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadataCacheKey
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadataRequestController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMetadataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMovieClip
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemMovieClipAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemOffer
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreItemOfferAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLibraryPersonalizationContentDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLibraryPersonalizationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLibraryPersonalizationResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLyricsRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLyricsSnippetRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreLyricsSnippetURLComponents
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelAlbumBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelArtistBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelCuratorBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelGenericObjectBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelMovieBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelMovieMediaClipBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelObjectBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelPlaybackPositionBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelPlaylistBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelRadioStationBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelRequestConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelRequestOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelSocialPersonBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelSongBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelStoreAssetBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelTVEpisodeBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelTVSeasonBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelTVShowBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreModelTVShowCreatorBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStorePlatformEntityTranslator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStorePlatformEntityTranslatorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreRadioStreamAssetInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreSocialServiceController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPStoreSocialServiceTransientStatesSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_MPSubscriptionStatusPlaybackInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_MPTiledArtworkDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPTiledArtworkRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_MPTimedMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_MPUbiquitousPlaybackPositionController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPUbiquitousPlaybackPositionEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_MPUserNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_MPVolumeControllerRouteDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_MPVolumeGroupSliderCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_MPVolumeHardwareButtonController
|| __DATA.__objc_data _OBJC_METACLASS_$_MPWeakTimer
|| __DATA.__objc_data _OBJC_METACLASS_$__MPMediaLibraryEntityChange
|| __DATA.__objc_data _OBJC_METACLASS_$__MPMediaSearchStringPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$__MPMusicPlayerMediaItemProxy
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._advancedDuringPlayback
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._asset
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._assetQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._avPlayerItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._cachedDuration
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._cachedPlayableDuration
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._cachedSeekableTimeRanges
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._contentItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._defaultPlaybackRate
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._feeder
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._handledFinishTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._hasPlayedThisSession
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._isAssetLoaded
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._isStreamable
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._lyricsAvailable
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._seekableTimeRangesCacheTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._soundCheckVolumeNormalization
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._userChangedItemsDuringPlayback
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._wasCountedAsSkipped
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVItem._watchingAttributes
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._checkmarkImageView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._chevronImageView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._expandTargetView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._iconImageView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._routeNameLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._smartAudioImageView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._spinnerView
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._subtitleTextLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingTableViewCell._subtitleTextUpdateTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_MPAVRoutingViewController._tableView
|| __DATA.__objc_ivar _OBJC_IVAR_$__MPMediaSearchStringPredicate._properties
|| __DATA.__objc_ivar _OBJC_IVAR_$__MPMediaSearchStringPredicate._searchString
|| __DATA_CONST.__const _HomeSharingML3DataProviderCredentialsDidChangeNotification
|| __DATA_CONST.__const _MPAVControllerAvailableRoutesChangedNotification
|| __DATA_CONST.__const _MPAVControllerBufferingStateChangedNotification
|| __DATA_CONST.__const _MPAVControllerCurrentTimeParameter
|| __DATA_CONST.__const _MPAVControllerDidReloadWithPlaybackContextNotification
|| __DATA_CONST.__const _MPAVControllerDidSetCurrentTimeNotification
|| __DATA_CONST.__const _MPAVControllerErrorDomain
|| __DATA_CONST.__const _MPAVControllerErrorParameter
|| __DATA_CONST.__const _MPAVControllerErrorReasonParameter
|| __DATA_CONST.__const _MPAVControllerErrorUserInfoKeyAlertDefaultButtonActionURLString
|| __DATA_CONST.__const _MPAVControllerErrorUserInfoKeyAlertDefaultButtonTitle
|| __DATA_CONST.__const _MPAVControllerErrorUserInfoKeyAlertMessage
|| __DATA_CONST.__const _MPAVControllerErrorUserInfoKeyAlertTitle
|| __DATA_CONST.__const _MPAVControllerItemChangedNotification
|| __DATA_CONST.__const _MPAVControllerItemDidChangeWhenReloadingPlaybackContextNotification
|| __DATA_CONST.__const _MPAVControllerItemParameter
|| __DATA_CONST.__const _MPAVControllerItemReadyToPlayNotification
|| __DATA_CONST.__const _MPAVControllerItemWillChangeNotification
|| __DATA_CONST.__const _MPAVControllerNewStateParameter
|| __DATA_CONST.__const _MPAVControllerNextItemStateParameter
|| __DATA_CONST.__const _MPAVControllerOldStateParameter
|| __DATA_CONST.__const _MPAVControllerPlaybackContextParameter
|| __DATA_CONST.__const _MPAVControllerPlaybackErrorNotification
|| __DATA_CONST.__const _MPAVControllerPlaybackStateChangedNotification
|| __DATA_CONST.__const _MPAVControllerPlaybackStateParameter
|| __DATA_CONST.__const _MPAVControllerPreviousItemDidTransitionNaturallyParameter
|| __DATA_CONST.__const _MPAVControllerRateDidChangeNotification
|| __DATA_CONST.__const _MPAVControllerUpdatedPlaybackStateParameter
|| __DATA_CONST.__const _MPAVControllerWillReloadWithPlaybackContextNotification
|| __DATA_CONST.__const _MPAVControllerWillSetCurrentTimeNotification
|| __DATA_CONST.__const _MPAVItemAlternateTracksAvailableNotification
|| __DATA_CONST.__const _MPAVItemArtworkDidChangeNotification
|| __DATA_CONST.__const _MPAVItemAssetIsLoadedNotification
|| __DATA_CONST.__const _MPAVItemBookmarkTimeDidChangeNotification
|| __DATA_CONST.__const _MPAVItemDisplayableTextAvailableNotification
|| __DATA_CONST.__const _MPAVItemDurationAvailableNotification
|| __DATA_CONST.__const _MPAVItemErrorDomain
|| __DATA_CONST.__const _MPAVItemHasFinishedDownloadingDidChangeNotification
|| __DATA_CONST.__const _MPAVItemIsExplicitDidChangeNotification
|| __DATA_CONST.__const _MPAVItemLikedStateDidChangeNotification
|| __DATA_CONST.__const _MPAVItemModelGenericObjectDidChangeNotification
|| __DATA_CONST.__const _MPAVItemPlaybackModeAvailableNotification
|| __DATA_CONST.__const _MPAVItemPlaybackProperties_EndTime
|| __DATA_CONST.__const _MPAVItemPlaybackProperties_LookForLyrics
|| __DATA_CONST.__const _MPAVItemPlaybackProperties_NextPlayStartTime
|| __DATA_CONST.__const _MPAVItemPlaybackProperties_StartTime
|| __DATA_CONST.__const _MPAVItemPlayerItemDidChangeNotification
|| __DATA_CONST.__const _MPAVItemPlayerItemWillChangeNotification
|| __DATA_CONST.__const _MPAVItemRatingDidChangeNotification
|| __DATA_CONST.__const _MPAVItemSecureKeyDeliveryRequestDidFinishNotification
|| __DATA_CONST.__const _MPAVItemShouldPreventPlaybackDidChangeNotification
|| __DATA_CONST.__const _MPAVItemTimebaseDidChangeNotification
|| __DATA_CONST.__const _MPAVItemTitlesDidChangeNotification
|| __DATA_CONST.__const _MPAVItemTypeAvailableNotification
|| __DATA_CONST.__const _MPAVItemUserInfoKeyLoadDuration
|| __DATA_CONST.__const _MPAVItemUserInfoKeyRequestEndDate
|| __DATA_CONST.__const _MPAVItemUserInfoKeyRequestError
|| __DATA_CONST.__const _MPAVItemUserInfoKeyRequestStartDate
|| __DATA_CONST.__const _MPAVItemUserInfoKeyStoreDialogDictionary
|| __DATA_CONST.__const _MPAVQueueCoordinatorFailedToQueueAnyItemsNotification
|| __DATA_CONST.__const _MPAVQueueCoordinatorNotificationItemKey
|| __DATA_CONST.__const _MPAVQueueCoordinatorWillInsertItemAfterItemNotification
|| __DATA_CONST.__const _MPAVRouteB520ProductID
|| __DATA_CONST.__const _MPAVRouteConnectionCorrelationIDUserInfoKey
|| __DATA_CONST.__const _MPAVRouteConnectionEndpointIdentifierUserInfoKey
|| __DATA_CONST.__const _MPAVRouteConnectionErrorDomain
|| __DATA_CONST.__const _MPAVRouteConnectionOutputDeviceIdentifierUserInfoKey
|| __DATA_CONST.__const _MPAVRouteConnectionReasonUserInfoKey
|| __DATA_CONST.__const _MPAVRouteConnectionVolumeDidChangeNotification
|| __DATA_CONST.__const _MPAVRouteConnectionVolumeUserInfoKey
|| __DATA_CONST.__const _MPAVRouteDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutePersonalDevicesDidChangeNotification
|| __DATA_CONST.__const _MPAVRouteUserInfoRouteKey
|| __DATA_CONST.__const _MPAVRoute_RouteDescriptionKey_AirPlayPortExtendedInfo
|| __DATA_CONST.__const _MPAVRoutingControllerActiveSystemRouteDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutingControllerErrorDomain
|| __DATA_CONST.__const _MPAVRoutingDataSourceActiveAudioRouteDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutingDataSourceErrorUserInfoKey
|| __DATA_CONST.__const _MPAVRoutingDataSourceExternalScreenTypeDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutingDataSourceExternalScreenTypeUserInfoKey
|| __DATA_CONST.__const _MPAVRoutingDataSourceFailureNotification
|| __DATA_CONST.__const _MPAVRoutingDataSourceRouteUserInfoKey
|| __DATA_CONST.__const _MPAVRoutingDataSourceRoutesDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutingDataSourceVolumeControlAvailabilityDidChangeNotification
|| __DATA_CONST.__const _MPAVRoutingDataSourceVolumeControlAvailabilityUserInfoKey
|| __DATA_CONST.__const _MPAVRoutingViewItemActionIdentifierShareAudio
|| __DATA_CONST.__const _MPAbstractNetworkArtworkDataSourceErrorDomain
|| __DATA_CONST.__const _MPArtworkCatalogEffectOptionColorAnalyzerAlgorithm
|| __DATA_CONST.__const _MPArtworkCatalogErrorDomain
|| __DATA_CONST.__const _MPCloudControllerCanShowCloudDownloadButtonsDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerCanShowCloudTracksDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerCloudAddToPlaylistBehaviorDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerCloudLibraryFailureDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerEnableCloudLibraryOptionMergeWithCloudLibrary
|| __DATA_CONST.__const _MPCloudControllerEnableCloudLibraryOptionStartInitialImport
|| __DATA_CONST.__const _MPCloudControllerErrorDomain
|| __DATA_CONST.__const _MPCloudControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerIsCellularDataRestrictedDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerIsCloudEnabledDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerIsGeniusEnabledDidChangeNotification
|| __DATA_CONST.__const _MPCloudControllerIsUpdateInProgressDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerCloudLibraryEnabledDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerFairPlaySubscriptionStatusDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerMatchStatusDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerPurchaseHistoryEnabledDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerShouldPlaybackRequireSubscriptionLeaseDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerSubscriptionAvailabilityDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerSubscriptionLeaseDidBeginNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerSubscriptionLeaseDidEndNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerSubscriptionStatusDidChangeNotification
|| __DATA_CONST.__const _MPCloudServiceStatusControllerUserInfoKeyLeaseEndReasonType
|| __DATA_CONST.__const _MPContentTasteControllerDidChangeNotification
|| __DATA_CONST.__const _MPContentTasteControllerNotificationUserInfoKeyContentType
|| __DATA_CONST.__const _MPContentTasteControllerNotificationUserInfoKeyMediaEntity
|| __DATA_CONST.__const _MPContentTasteControllerNotificationUserInfoKeyPlaylistGlobalID
|| __DATA_CONST.__const _MPContentTasteControllerNotificationUserInfoKeyStoreAdamID
|| __DATA_CONST.__const _MPContentTasteControllerNotificationUserInfoKeyTasteType
|| __DATA_CONST.__const _MPContentTasteControllerWillSetTasteTypeNotification
|| __DATA_CONST.__const _MPErrorDomain
|| __DATA_CONST.__const _MPHomeMonitorCurrentHomeDidChangeNotification
|| __DATA_CONST.__const _MPHomeMonitorCurrentUserDidChangeNotification
|| __DATA_CONST.__const _MPHomeMonitorHomeUsersDidChangeNotification
|| __DATA_CONST.__const _MPHomeMonitorSoundCheckSettingDidChangeNotification
|| __DATA_CONST.__const _MPHomeUserMonitorAllowExplicitSettingDidChangeNotification
|| __DATA_CONST.__const _MPHomeUserMonitorPrivateListeningForCurrentDeviceSettingDidChangeNotification
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicContainsOnlyForcedSubtitles
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicDescribesMusicAndSound
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicDescribesVideo
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicDubbedTranslation
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicEasyToRead
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicIsAuxiliaryContent
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicIsMainProgramContent
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicLanguageTranslation
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicTranscribesSpokenDialog
|| __DATA_CONST.__const _MPLanguageOptionCharacteristicVoiceOverTranslation
|| __DATA_CONST.__const _MPML3LookupItemAdvertisementType
|| __DATA_CONST.__const _MPML3LookupItemAdvertisementUniqueID
|| __DATA_CONST.__const _MPML3LookupItemArtworkData
|| __DATA_CONST.__const _MPML3LookupItemRadioStationID
|| __DATA_CONST.__const _MPMediaAlbumArtistCloudUniversalLibraryID
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyCloudStatus
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyName
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyPersistentID
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyRepresentativeItemArtworkToken
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyRepresentativeItemPersistentID
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertySortName
|| __DATA_CONST.__const _MPMediaAlbumArtistPropertyStoreID
|| __DATA_CONST.__const _MPMediaAlbumPropertyAlbumArtist
|| __DATA_CONST.__const _MPMediaAlbumPropertyAlbumArtistPersistentID
|| __DATA_CONST.__const _MPMediaAlbumPropertyAlbumYear
|| __DATA_CONST.__const _MPMediaAlbumPropertyCloudStatus
|| __DATA_CONST.__const _MPMediaAlbumPropertyLikedState
|| __DATA_CONST.__const _MPMediaAlbumPropertyName
|| __DATA_CONST.__const _MPMediaAlbumPropertyPersistentID
|| __DATA_CONST.__const _MPMediaAlbumPropertyRepresentativeItemArtworkToken
|| __DATA_CONST.__const _MPMediaAlbumPropertyRepresentativeItemPersistentID
|| __DATA_CONST.__const _MPMediaAlbumPropertySortName
|| __DATA_CONST.__const _MPMediaAlbumPropertyStoreID
|| __DATA_CONST.__const _MPMediaArtistPropertyCloudStatus
|| __DATA_CONST.__const _MPMediaArtistPropertyName
|| __DATA_CONST.__const _MPMediaArtistPropertyPersistentID
|| __DATA_CONST.__const _MPMediaArtistPropertyRepresentativeItemArtworkToken
|| __DATA_CONST.__const _MPMediaArtistPropertyRepresentativeItemPersistentID
|| __DATA_CONST.__const _MPMediaArtistPropertySortName
|| __DATA_CONST.__const _MPMediaArtistPropertyStoreID
|| __DATA_CONST.__const _MPMediaComposerPropertyCloudStatus
|| __DATA_CONST.__const _MPMediaComposerPropertyName
|| __DATA_CONST.__const _MPMediaComposerPropertyPersistentID
|| __DATA_CONST.__const _MPMediaComposerPropertyRepresentativeItemArtworkToken
|| __DATA_CONST.__const _MPMediaComposerPropertyRepresentativeItemPersistentID
|| __DATA_CONST.__const _MPMediaComposerPropertySortName
|| __DATA_CONST.__const _MPMediaComposerPropertyStoreID
|| __DATA_CONST.__const _MPMediaEntityPropertyEntityRevision
|| __DATA_CONST.__const _MPMediaEntityPropertyKeepLocal
|| __DATA_CONST.__const _MPMediaEntityPropertyKeepLocalStatus
|| __DATA_CONST.__const _MPMediaEntityPropertyPersistentID
|| __DATA_CONST.__const _MPMediaGenrePropertyCloudStatus
|| __DATA_CONST.__const _MPMediaGenrePropertyName
|| __DATA_CONST.__const _MPMediaGenrePropertyPersistentID
|| __DATA_CONST.__const _MPMediaGenrePropertyRepresentativeItemArtworkToken
|| __DATA_CONST.__const _MPMediaGenrePropertyRepresentativeItemPersistentID
|| __DATA_CONST.__const _MPMediaGenrePropertyStoreID
|| __DATA_CONST.__const _MPMediaItemCollectionPropertyAlbumCount
|| __DATA_CONST.__const _MPMediaItemCollectionPropertyArtistCount
|| __DATA_CONST.__const _MPMediaItemCollectionPropertyCloudStatus
|| __DATA_CONST.__const _MPMediaItemCollectionPropertyItemCount
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumArtist
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumArtistCloudUniversalLibraryID
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumArtistKeepLocal
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumArtistPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumKeepLocal
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumTitle
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumTrackCount
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumTrackNumber
|| __DATA_CONST.__const _MPMediaItemPropertyAlbumYear
|| __DATA_CONST.__const _MPMediaItemPropertyArtist
|| __DATA_CONST.__const _MPMediaItemPropertyArtistKeepLocal
|| __DATA_CONST.__const _MPMediaItemPropertyArtistOrderSection
|| __DATA_CONST.__const _MPMediaItemPropertyArtistPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyArtwork
|| __DATA_CONST.__const _MPMediaItemPropertyAssetStoreItemID
|| __DATA_CONST.__const _MPMediaItemPropertyAssetURL
|| __DATA_CONST.__const _MPMediaItemPropertyAudioCapability
|| __DATA_CONST.__const _MPMediaItemPropertyAudioTrackID
|| __DATA_CONST.__const _MPMediaItemPropertyAudioTrackLocale
|| __DATA_CONST.__const _MPMediaItemPropertyBeatsPerMinute
|| __DATA_CONST.__const _MPMediaItemPropertyBitRate
|| __DATA_CONST.__const _MPMediaItemPropertyBooklets
|| __DATA_CONST.__const _MPMediaItemPropertyBookmarkTime
|| __DATA_CONST.__const _MPMediaItemPropertyChapterArtworkTimes
|| __DATA_CONST.__const _MPMediaItemPropertyChapters
|| __DATA_CONST.__const _MPMediaItemPropertyChosenByAutoFill
|| __DATA_CONST.__const _MPMediaItemPropertyClassicalMovement
|| __DATA_CONST.__const _MPMediaItemPropertyClassicalMovementCount
|| __DATA_CONST.__const _MPMediaItemPropertyClassicalMovementNumber
|| __DATA_CONST.__const _MPMediaItemPropertyClassicalWork
|| __DATA_CONST.__const _MPMediaItemPropertyCollectionDescription
|| __DATA_CONST.__const _MPMediaItemPropertyColorCapability
|| __DATA_CONST.__const _MPMediaItemPropertyComments
|| __DATA_CONST.__const _MPMediaItemPropertyComposer
|| __DATA_CONST.__const _MPMediaItemPropertyComposerOrArtist
|| __DATA_CONST.__const _MPMediaItemPropertyComposerPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyContainerItemPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyContentRating
|| __DATA_CONST.__const _MPMediaItemPropertyCopyright
|| __DATA_CONST.__const _MPMediaItemPropertyDateAccessed
|| __DATA_CONST.__const _MPMediaItemPropertyDateAdded
|| __DATA_CONST.__const _MPMediaItemPropertyDateDownloaded
|| __DATA_CONST.__const _MPMediaItemPropertyDescriptionInfo
|| __DATA_CONST.__const _MPMediaItemPropertyDiscCount
|| __DATA_CONST.__const _MPMediaItemPropertyDiscNumber
|| __DATA_CONST.__const _MPMediaItemPropertyDownloadIdentifier
|| __DATA_CONST.__const _MPMediaItemPropertyDurationInSamples
|| __DATA_CONST.__const _MPMediaItemPropertyEQPreset
|| __DATA_CONST.__const _MPMediaItemPropertyEntityRevision
|| __DATA_CONST.__const _MPMediaItemPropertyEpisodeNumber
|| __DATA_CONST.__const _MPMediaItemPropertyEpisodeSubSortOrder
|| __DATA_CONST.__const _MPMediaItemPropertyEpisodeType
|| __DATA_CONST.__const _MPMediaItemPropertyEpisodeTypeDisplayName
|| __DATA_CONST.__const _MPMediaItemPropertyFilePath
|| __DATA_CONST.__const _MPMediaItemPropertyFileSize
|| __DATA_CONST.__const _MPMediaItemPropertyGaplessEncodingDelay
|| __DATA_CONST.__const _MPMediaItemPropertyGaplessEncodingDrain
|| __DATA_CONST.__const _MPMediaItemPropertyGaplessHeuristicInfo
|| __DATA_CONST.__const _MPMediaItemPropertyGaplessLastFrameResync
|| __DATA_CONST.__const _MPMediaItemPropertyGenre
|| __DATA_CONST.__const _MPMediaItemPropertyGenreKeepLocal
|| __DATA_CONST.__const _MPMediaItemPropertyGenrePersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyGlobalID
|| __DATA_CONST.__const _MPMediaItemPropertyHLSAssetTraits
|| __DATA_CONST.__const _MPMediaItemPropertyHLSAudioCapability
|| __DATA_CONST.__const _MPMediaItemPropertyHLSColorCapability
|| __DATA_CONST.__const _MPMediaItemPropertyHLSKeyCertificateURL
|| __DATA_CONST.__const _MPMediaItemPropertyHLSKeyServerProtocol
|| __DATA_CONST.__const _MPMediaItemPropertyHLSKeyServerURL
|| __DATA_CONST.__const _MPMediaItemPropertyHLSOfflinePlaybackKeys
|| __DATA_CONST.__const _MPMediaItemPropertyHLSPlaylistURL
|| __DATA_CONST.__const _MPMediaItemPropertyHLSVideoQuality
|| __DATA_CONST.__const _MPMediaItemPropertyHasAlternateAudio
|| __DATA_CONST.__const _MPMediaItemPropertyHasAppleMusicDRM
|| __DATA_CONST.__const _MPMediaItemPropertyHasAvailableItemArtwork
|| __DATA_CONST.__const _MPMediaItemPropertyHasBeenPlayed
|| __DATA_CONST.__const _MPMediaItemPropertyHasHLSVideo
|| __DATA_CONST.__const _MPMediaItemPropertyHasNonPurgeableAsset
|| __DATA_CONST.__const _MPMediaItemPropertyHasProtectedAsset
|| __DATA_CONST.__const _MPMediaItemPropertyHasSubtitles
|| __DATA_CONST.__const _MPMediaItemPropertyHomeSharingID
|| __DATA_CONST.__const _MPMediaItemPropertyIncludeInShuffle
|| __DATA_CONST.__const _MPMediaItemPropertyIsAlarm
|| __DATA_CONST.__const _MPMediaItemPropertyIsAudible
|| __DATA_CONST.__const _MPMediaItemPropertyIsCloudItem
|| __DATA_CONST.__const _MPMediaItemPropertyIsCompilation
|| __DATA_CONST.__const _MPMediaItemPropertyIsDemoRental
|| __DATA_CONST.__const _MPMediaItemPropertyIsDeprotected
|| __DATA_CONST.__const _MPMediaItemPropertyIsExplicit
|| __DATA_CONST.__const _MPMediaItemPropertyIsHD
|| __DATA_CONST.__const _MPMediaItemPropertyIsHidden
|| __DATA_CONST.__const _MPMediaItemPropertyIsITunesU
|| __DATA_CONST.__const _MPMediaItemPropertyIsInMyLibrary
|| __DATA_CONST.__const _MPMediaItemPropertyIsLocal
|| __DATA_CONST.__const _MPMediaItemPropertyIsMatchAudio
|| __DATA_CONST.__const _MPMediaItemPropertyIsMusicShow
|| __DATA_CONST.__const _MPMediaItemPropertyIsMusicVideo
|| __DATA_CONST.__const _MPMediaItemPropertyIsNonLibraryOwnedSubscriptionContent
|| __DATA_CONST.__const _MPMediaItemPropertyIsOTAPurchased
|| __DATA_CONST.__const _MPMediaItemPropertyIsPendingSync
|| __DATA_CONST.__const _MPMediaItemPropertyIsPlayable
|| __DATA_CONST.__const _MPMediaItemPropertyIsPremium
|| __DATA_CONST.__const _MPMediaItemPropertyIsPreorder
|| __DATA_CONST.__const _MPMediaItemPropertyIsRental
|| __DATA_CONST.__const _MPMediaItemPropertyIsStoreRedownloadable
|| __DATA_CONST.__const _MPMediaItemPropertyIsStreamingQuality
|| __DATA_CONST.__const _MPMediaItemPropertyIsTemporaryCloudDownload
|| __DATA_CONST.__const _MPMediaItemPropertyLastPlayedDate
|| __DATA_CONST.__const _MPMediaItemPropertyLastSkippedDate
|| __DATA_CONST.__const _MPMediaItemPropertyLikedState
|| __DATA_CONST.__const _MPMediaItemPropertyLikedStateChanged
|| __DATA_CONST.__const _MPMediaItemPropertyLikedStateChangedDate
|| __DATA_CONST.__const _MPMediaItemPropertyLocationFileName
|| __DATA_CONST.__const _MPMediaItemPropertyLyrics
|| __DATA_CONST.__const _MPMediaItemPropertyMediaType
|| __DATA_CONST.__const _MPMediaItemPropertyMovieInfo
|| __DATA_CONST.__const _MPMediaItemPropertyNeedsRestore
|| __DATA_CONST.__const _MPMediaItemPropertyPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyPlayCount
|| __DATA_CONST.__const _MPMediaItemPropertyPlayCountSinceSync
|| __DATA_CONST.__const _MPMediaItemPropertyPlaybackDuration
|| __DATA_CONST.__const _MPMediaItemPropertyPlaybackStoreID
|| __DATA_CONST.__const _MPMediaItemPropertyPodcastGUID
|| __DATA_CONST.__const _MPMediaItemPropertyPodcastPersistentID
|| __DATA_CONST.__const _MPMediaItemPropertyPodcastTitle
|| __DATA_CONST.__const _MPMediaItemPropertyPodcastURL
|| __DATA_CONST.__const _MPMediaItemPropertyPurchaseHistoryID
|| __DATA_CONST.__const _MPMediaItemPropertyRating
|| __DATA_CONST.__const _MPMediaItemPropertyReleaseDate
|| __DATA_CONST.__const _MPMediaItemPropertyRememberBookmarkTime
|| __DATA_CONST.__const _MPMediaItemPropertyRemoteLocationId
|| __DATA_CONST.__const _MPMediaItemPropertyRentalDuration
|| __DATA_CONST.__const _MPMediaItemPropertyRentalExpirationDate
|| __DATA_CONST.__const _MPMediaItemPropertyRentalPlaybackDuration
|| __DATA_CONST.__const _MPMediaItemPropertyRentalPlaybackStartTime
|| __DATA_CONST.__const _MPMediaItemPropertyRentalStartTime
|| __DATA_CONST.__const _MPMediaItemPropertyRentalWindowEndDate
|| __DATA_CONST.__const _MPMediaItemPropertyReportingStoreItemID
|| __DATA_CONST.__const _MPMediaItemPropertyRestricted
|| __DATA_CONST.__const _MPMediaItemPropertySeasonName
|| __DATA_CONST.__const _MPMediaItemPropertySeasonNumber
|| __DATA_CONST.__const _MPMediaItemPropertySeriesName
|| __DATA_CONST.__const _MPMediaItemPropertyShortDescriptionInfo
|| __DATA_CONST.__const _MPMediaItemPropertyShowComposer
|| __DATA_CONST.__const _MPMediaItemPropertyShowSortType
|| __DATA_CONST.__const _MPMediaItemPropertySignificantAmountHasBeenPlayed
|| __DATA_CONST.__const _MPMediaItemPropertySkipCount
|| __DATA_CONST.__const _MPMediaItemPropertySkipCountSinceSync
|| __DATA_CONST.__const _MPMediaItemPropertySortAlbumArtist
|| __DATA_CONST.__const _MPMediaItemPropertySortAlbumTitle
|| __DATA_CONST.__const _MPMediaItemPropertySortArtist
|| __DATA_CONST.__const _MPMediaItemPropertySortComposer
|| __DATA_CONST.__const _MPMediaItemPropertySortTitle
|| __DATA_CONST.__const _MPMediaItemPropertyStartTime
|| __DATA_CONST.__const _MPMediaItemPropertyStopTime
|| __DATA_CONST.__const _MPMediaItemPropertyStoreAccountID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreAdvertisementType
|| __DATA_CONST.__const _MPMediaItemPropertyStoreAdvertisementUniqueID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreAlbumArtistID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreArtistID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreAssetProtectionType
|| __DATA_CONST.__const _MPMediaItemPropertyStoreBookmarkMetadataEntityRevision
|| __DATA_CONST.__const _MPMediaItemPropertyStoreBookmarkMetadataIdentifier
|| __DATA_CONST.__const _MPMediaItemPropertyStoreBookmarkMetadataTimestamp
|| __DATA_CONST.__const _MPMediaItemPropertyStoreCloudAlbumID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreCloudAssetAvailable
|| __DATA_CONST.__const _MPMediaItemPropertyStoreCloudIsInMyLibrary
|| __DATA_CONST.__const _MPMediaItemPropertyStoreCloudStatus
|| __DATA_CONST.__const _MPMediaItemPropertyStoreCloudUniversalLibraryID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreComposerID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreDatePurchased
|| __DATA_CONST.__const _MPMediaItemPropertyStoreDownloaderAccountID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreExtrasURL
|| __DATA_CONST.__const _MPMediaItemPropertyStoreFamilyAccountID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreGenreID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreIsArtistUploadedContent
|| __DATA_CONST.__const _MPMediaItemPropertyStoreLyricsAvailable
|| __DATA_CONST.__const _MPMediaItemPropertyStoreNeedsReporting
|| __DATA_CONST.__const _MPMediaItemPropertyStorePlaybackEndpointType
|| __DATA_CONST.__const _MPMediaItemPropertyStorePlaylistID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreRadioStationID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreRedownloadParameters
|| __DATA_CONST.__const _MPMediaItemPropertyStoreRentalID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreSagaID
|| __DATA_CONST.__const _MPMediaItemPropertyStoreURL
|| __DATA_CONST.__const _MPMediaItemPropertySubscriptionStoreItemID
|| __DATA_CONST.__const _MPMediaItemPropertySyncID
|| __DATA_CONST.__const _MPMediaItemPropertyTimeSyncedLyricsAvailable
|| __DATA_CONST.__const _MPMediaItemPropertyTitle
|| __DATA_CONST.__const _MPMediaItemPropertyUserGrouping
|| __DATA_CONST.__const _MPMediaItemPropertyVerifiedIntegrity
|| __DATA_CONST.__const _MPMediaItemPropertyVideoQuality
|| __DATA_CONST.__const _MPMediaItemPropertyVolumeAdjustment
|| __DATA_CONST.__const _MPMediaItemPropertyVolumeNormalization
|| __DATA_CONST.__const _MPMediaItemPropertyYear
|| __DATA_CONST.__const _MPMediaKitPayloadKeyTransformedType
|| __DATA_CONST.__const _MPMediaLibraryAvailableMediaLibrariesDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryChangeTypeItemsKey
|| __DATA_CONST.__const _MPMediaLibraryChangeTypePlaylistsKey
|| __DATA_CONST.__const _MPMediaLibraryChangeTypesUserInfoKey
|| __DATA_CONST.__const _MPMediaLibraryConnectionProgressDidChange
|| __DATA_CONST.__const _MPMediaLibraryContentTasteCatalogUpdateOptionInvalidateLocalCache
|| __DATA_CONST.__const _MPMediaLibraryDefaultMediaLibraryDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryDisplayValuesDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryDisplayValuesWillChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryDynamicPropertiesDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryEntitiesAddedOrRemovedNotification
|| __DATA_CONST.__const _MPMediaLibraryInvisiblePropertiesDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryPathDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibraryStatusDidChangeNotification
|| __DATA_CONST.__const _MPMediaLibrarySyncGenerationDidChangeNotification
|| __DATA_CONST.__const _MPMediaPlaybackIsPreparedToPlayDidChangeNotification
|| __DATA_CONST.__const _MPMediaPlaylistPropertyAuthorDisplayName
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudAuthorDisplayName
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudAuthorStoreID
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudAuthorStoreURL
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudGlobalID
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudGlobalLikeCount
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudGlobalPlayCount
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudIsCuratorPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudIsPublic
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudIsSubscribed
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudIsVisible
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudShareURL
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudUniversalLibraryID
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudUserCount
|| __DATA_CONST.__const _MPMediaPlaylistPropertyCloudVersionHash
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDateCreated
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDateModified
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDatePlayed
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDescriptionInfo
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDescriptionText
|| __DATA_CONST.__const _MPMediaPlaylistPropertyDistinguishedKind
|| __DATA_CONST.__const _MPMediaPlaylistPropertyExternalVendorContainerTag
|| __DATA_CONST.__const _MPMediaPlaylistPropertyExternalVendorIdentifier
|| __DATA_CONST.__const _MPMediaPlaylistPropertyGeniusMixRepresentativeArtists
|| __DATA_CONST.__const _MPMediaPlaylistPropertyHasItems
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsActiveGeniusPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsActiveOnTheGoPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsActivePlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsCurrentDevicePurchasesPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsDeletable
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsEditable
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsExternalVendorPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsFolder
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsGeniusMix
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsGeniusPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsHidden
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsITunesSynced
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsIgnoredSyncing
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsLimitedDynamicSmartPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsOwner
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsPlaybackHistoryPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsPurchasesPlaylist
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsUserEditable
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsVoiceMemos
|| __DATA_CONST.__const _MPMediaPlaylistPropertyIsWorkoutMix
|| __DATA_CONST.__const _MPMediaPlaylistPropertyLikedState
|| __DATA_CONST.__const _MPMediaPlaylistPropertyMediaType
|| __DATA_CONST.__const _MPMediaPlaylistPropertyName
|| __DATA_CONST.__const _MPMediaPlaylistPropertyParentPersistentID
|| __DATA_CONST.__const _MPMediaPlaylistPropertyPersistentID
|| __DATA_CONST.__const _MPMediaPlaylistPropertyPlayCount
|| __DATA_CONST.__const _MPMediaPlaylistPropertyPlayCountSinceSync
|| __DATA_CONST.__const _MPMediaPlaylistPropertyPlaylistAttributes
|| __DATA_CONST.__const _MPMediaPlaylistPropertySeedItems
|| __DATA_CONST.__const _MPMediaPlaylistPropertyStoreCloudID
|| __DATA_CONST.__const _MPMediaQueryAggregateFunctionMax
|| __DATA_CONST.__const _MPMediaQueryAggregateFunctionMin
|| __DATA_CONST.__const _MPMediaQueryAggregateFunctionTotal
|| __DATA_CONST.__const _MPModelChildAlbumArtists
|| __DATA_CONST.__const _MPModelChildAlbumRecordLabels
|| __DATA_CONST.__const _MPModelChildAlbumSongs
|| __DATA_CONST.__const _MPModelChildArtistAlbums
|| __DATA_CONST.__const _MPModelChildPlaylistEntries
|| __DATA_CONST.__const _MPModelChildRadioStationEvents
|| __DATA_CONST.__const _MPModelChildSongAlbum
|| __DATA_CONST.__const _MPModelChildSongArtists
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyDisplaysAsGridCellInCarPlay
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyDisplaysAsTitledSectionWithRowsInCarPlay
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyGroupType
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyHrefURL
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyLastUpdatedDate
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyLoadAdditionalContentURL
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyRefreshURL
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyTitle
|| __DATA_CONST.__const _MPModelForYouRecommendationGroupPropertyTraits
|| __DATA_CONST.__const _MPModelForYouRecommendationItemPropertyItemType
|| __DATA_CONST.__const _MPModelForYouRecommendationItemPropertyReason
|| __DATA_CONST.__const _MPModelForYouRecommendationItemPropertyURL
|| __DATA_CONST.__const _MPModelForYouRecommendationItemPropertyUtterance
|| __DATA_CONST.__const _MPModelForYouRecommendationItemRelationshipAlbum
|| __DATA_CONST.__const _MPModelForYouRecommendationItemRelationshipPlaylist
|| __DATA_CONST.__const _MPModelForYouRecommendationItemRelationshipRadioStation
|| __DATA_CONST.__const _MPModelForYouRecommendationItemRelationshipSubgroup
|| __DATA_CONST.__const _MPModelLibraryAddToPlaylistChangeRequestErrorDomain
|| __DATA_CONST.__const _MPModelLibraryTransientStateControllerDidChangeNotification
|| __DATA_CONST.__const _MPModelPropertyAlbumArtwork
|| __DATA_CONST.__const _MPModelPropertyAlbumClassicalExperienceAvailable
|| __DATA_CONST.__const _MPModelPropertyAlbumCopyrightText
|| __DATA_CONST.__const _MPModelPropertyAlbumDiscCount
|| __DATA_CONST.__const _MPModelPropertyAlbumDownloadedDate
|| __DATA_CONST.__const _MPModelPropertyAlbumEditorNotes
|| __DATA_CONST.__const _MPModelPropertyAlbumHasCleanContent
|| __DATA_CONST.__const _MPModelPropertyAlbumHasExplicitContent
|| __DATA_CONST.__const _MPModelPropertyAlbumIsClassical
|| __DATA_CONST.__const _MPModelPropertyAlbumIsCompilation
|| __DATA_CONST.__const _MPModelPropertyAlbumKeepLocalEnableState
|| __DATA_CONST.__const _MPModelPropertyAlbumKeepLocalManagedStatus
|| __DATA_CONST.__const _MPModelPropertyAlbumLastDevicePlaybackDate
|| __DATA_CONST.__const _MPModelPropertyAlbumLibraryAddEligible
|| __DATA_CONST.__const _MPModelPropertyAlbumLibraryAdded
|| __DATA_CONST.__const _MPModelPropertyAlbumLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyAlbumMaximumItemTrackNumber
|| __DATA_CONST.__const _MPModelPropertyAlbumPreorder
|| __DATA_CONST.__const _MPModelPropertyAlbumReleaseDateComponents
|| __DATA_CONST.__const _MPModelPropertyAlbumShortEditorNotes
|| __DATA_CONST.__const _MPModelPropertyAlbumSongPopularity
|| __DATA_CONST.__const _MPModelPropertyAlbumTitle
|| __DATA_CONST.__const _MPModelPropertyAlbumTrackCount
|| __DATA_CONST.__const _MPModelPropertyAlbumTraits
|| __DATA_CONST.__const _MPModelPropertyAlbumVersionHash
|| __DATA_CONST.__const _MPModelPropertyAlbumVolumeNormalization
|| __DATA_CONST.__const _MPModelPropertyAlbumYear
|| __DATA_CONST.__const _MPModelPropertyArtistAlbumCount
|| __DATA_CONST.__const _MPModelPropertyArtistArtwork
|| __DATA_CONST.__const _MPModelPropertyArtistClassicalExperienceAvailable
|| __DATA_CONST.__const _MPModelPropertyArtistEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyArtistHasBiography
|| __DATA_CONST.__const _MPModelPropertyArtistHasSocialPosts
|| __DATA_CONST.__const _MPModelPropertyArtistLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyArtistName
|| __DATA_CONST.__const _MPModelPropertyArtistSongCount
|| __DATA_CONST.__const _MPModelPropertyComposerHasSocialPosts
|| __DATA_CONST.__const _MPModelPropertyComposerLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyComposerName
|| __DATA_CONST.__const _MPModelPropertyCuratorBrandLogoArtwork
|| __DATA_CONST.__const _MPModelPropertyCuratorEditorNotes
|| __DATA_CONST.__const _MPModelPropertyCuratorEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyCuratorHandle
|| __DATA_CONST.__const _MPModelPropertyCuratorHasSocialPosts
|| __DATA_CONST.__const _MPModelPropertyCuratorKind
|| __DATA_CONST.__const _MPModelPropertyCuratorName
|| __DATA_CONST.__const _MPModelPropertyCuratorShortEditorNotes
|| __DATA_CONST.__const _MPModelPropertyCuratorShortName
|| __DATA_CONST.__const _MPModelPropertyCuratorSubKind
|| __DATA_CONST.__const _MPModelPropertyFileAssetFilePath
|| __DATA_CONST.__const _MPModelPropertyFileAssetFileSize
|| __DATA_CONST.__const _MPModelPropertyFileAssetHLSKeyCertificateURL
|| __DATA_CONST.__const _MPModelPropertyFileAssetHLSKeyServerProtocol
|| __DATA_CONST.__const _MPModelPropertyFileAssetHLSKeyServerURL
|| __DATA_CONST.__const _MPModelPropertyFileAssetNonPurgeable
|| __DATA_CONST.__const _MPModelPropertyFileAssetProtectionType
|| __DATA_CONST.__const _MPModelPropertyFileAssetPurchaseBundleFilePath
|| __DATA_CONST.__const _MPModelPropertyFileAssetQualityType
|| __DATA_CONST.__const _MPModelPropertyFileAssetTraits
|| __DATA_CONST.__const _MPModelPropertyGenreArtwork
|| __DATA_CONST.__const _MPModelPropertyGenreLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyGenreName
|| __DATA_CONST.__const _MPModelPropertyHomeSharingAssetAvailable
|| __DATA_CONST.__const _MPModelPropertyHomeSharingAssetProtectedContentSupportStorageFileURL
|| __DATA_CONST.__const _MPModelPropertyHomeSharingAssetURL
|| __DATA_CONST.__const _MPModelPropertyKeyGroupTitle
|| __DATA_CONST.__const _MPModelPropertyLyricsHasLibraryLyrics
|| __DATA_CONST.__const _MPModelPropertyLyricsHasStoreLyrics
|| __DATA_CONST.__const _MPModelPropertyLyricsHasTimeSyncedLyrics
|| __DATA_CONST.__const _MPModelPropertyLyricsTTML
|| __DATA_CONST.__const _MPModelPropertyLyricsText
|| __DATA_CONST.__const _MPModelPropertyMediaClipPreviewArtwork
|| __DATA_CONST.__const _MPModelPropertyMediaClipTitle
|| __DATA_CONST.__const _MPModelPropertyMovieArtwork
|| __DATA_CONST.__const _MPModelPropertyMovieDescriptionText
|| __DATA_CONST.__const _MPModelPropertyMovieDuration
|| __DATA_CONST.__const _MPModelPropertyMovieEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyMovieExplicitRating
|| __DATA_CONST.__const _MPModelPropertyMovieHasCloudSyncSource
|| __DATA_CONST.__const _MPModelPropertyMovieInfoDictionary
|| __DATA_CONST.__const _MPModelPropertyMovieKeepLocalEnableState
|| __DATA_CONST.__const _MPModelPropertyMovieKeepLocalManagedStatus
|| __DATA_CONST.__const _MPModelPropertyMovieLastDevicePlaybackDate
|| __DATA_CONST.__const _MPModelPropertyMovieLibraryAddEligible
|| __DATA_CONST.__const _MPModelPropertyMovieLibraryAdded
|| __DATA_CONST.__const _MPModelPropertyMovieLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyMovieReleaseDate
|| __DATA_CONST.__const _MPModelPropertyMovieTagline
|| __DATA_CONST.__const _MPModelPropertyMovieTitle
|| __DATA_CONST.__const _MPModelPropertyPersonHasSocialPosts
|| __DATA_CONST.__const _MPModelPropertyPersonName
|| __DATA_CONST.__const _MPModelPropertyPlayEventDatePlayed
|| __DATA_CONST.__const _MPModelPropertyPlayEventFeatureName
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionBookmarkTime
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionHasBeenPlayed
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionShouldRememberBookmarkTime
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionStartTime
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionStopTime
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionStoreUbiquitousIdentifier
|| __DATA_CONST.__const _MPModelPropertyPlaybackPositionUserPlayCount
|| __DATA_CONST.__const _MPModelPropertyPlaylistArtwork
|| __DATA_CONST.__const _MPModelPropertyPlaylistCloudVersionHash
|| __DATA_CONST.__const _MPModelPropertyPlaylistCuratorPlaylist
|| __DATA_CONST.__const _MPModelPropertyPlaylistDescriptionText
|| __DATA_CONST.__const _MPModelPropertyPlaylistEditorNotes
|| __DATA_CONST.__const _MPModelPropertyPlaylistEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyPlaylistEntryPosition
|| __DATA_CONST.__const _MPModelPropertyPlaylistHasCleanContent
|| __DATA_CONST.__const _MPModelPropertyPlaylistHasExplicitContent
|| __DATA_CONST.__const _MPModelPropertyPlaylistIsOwner
|| __DATA_CONST.__const _MPModelPropertyPlaylistKeepLocalEnableState
|| __DATA_CONST.__const _MPModelPropertyPlaylistKeepLocalManagedStatus
|| __DATA_CONST.__const _MPModelPropertyPlaylistLastDevicePlaybackDate
|| __DATA_CONST.__const _MPModelPropertyPlaylistLastModifiedDateComponents
|| __DATA_CONST.__const _MPModelPropertyPlaylistLibraryAdded
|| __DATA_CONST.__const _MPModelPropertyPlaylistLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyPlaylistName
|| __DATA_CONST.__const _MPModelPropertyPlaylistPublicPlaylist
|| __DATA_CONST.__const _MPModelPropertyPlaylistReleaseDateComponents
|| __DATA_CONST.__const _MPModelPropertyPlaylistShareShortURL
|| __DATA_CONST.__const _MPModelPropertyPlaylistShareURL
|| __DATA_CONST.__const _MPModelPropertyPlaylistShortEditorNotes
|| __DATA_CONST.__const _MPModelPropertyPlaylistSubscribed
|| __DATA_CONST.__const _MPModelPropertyPlaylistTrackCount
|| __DATA_CONST.__const _MPModelPropertyPlaylistTracksTiledArtwork
|| __DATA_CONST.__const _MPModelPropertyPlaylistTraits
|| __DATA_CONST.__const _MPModelPropertyPlaylistType
|| __DATA_CONST.__const _MPModelPropertyPlaylistUserEditableComponents
|| __DATA_CONST.__const _MPModelPropertyPlaylistVersionHash
|| __DATA_CONST.__const _MPModelPropertyPlaylistVisiblePlaylist
|| __DATA_CONST.__const _MPModelPropertyPodcastArtwork
|| __DATA_CONST.__const _MPModelPropertyPodcastAuthorName
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeArtwork
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeDatePlayed
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeDescriptionText
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeDuration
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeExplicit
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeHasVideo
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeNumber
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeReleaseDateComponents
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeSeasonNumber
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeShareURL
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeStreamURL
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeTitle
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeType
|| __DATA_CONST.__const _MPModelPropertyPodcastEpisodeUserRating
|| __DATA_CONST.__const _MPModelPropertyPodcastFeedURL
|| __DATA_CONST.__const _MPModelPropertyPodcastShareURL
|| __DATA_CONST.__const _MPModelPropertyPodcastSupportsSubscription
|| __DATA_CONST.__const _MPModelPropertyPodcastTitle
|| __DATA_CONST.__const _MPModelPropertyRadioStationAllowsItemLiking
|| __DATA_CONST.__const _MPModelPropertyRadioStationArtwork
|| __DATA_CONST.__const _MPModelPropertyRadioStationAttributionLabel
|| __DATA_CONST.__const _MPModelPropertyRadioStationBeats1
|| __DATA_CONST.__const _MPModelPropertyRadioStationEditorNotes
|| __DATA_CONST.__const _MPModelPropertyRadioStationEndingAirDate
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventArtwork
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventDescriptionText
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventEndTime
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventHeroArtwork
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventStartTime
|| __DATA_CONST.__const _MPModelPropertyRadioStationEventTitle
|| __DATA_CONST.__const _MPModelPropertyRadioStationEvents
|| __DATA_CONST.__const _MPModelPropertyRadioStationGlyph
|| __DATA_CONST.__const _MPModelPropertyRadioStationHasExplicitContent
|| __DATA_CONST.__const _MPModelPropertyRadioStationLive
|| __DATA_CONST.__const _MPModelPropertyRadioStationName
|| __DATA_CONST.__const _MPModelPropertyRadioStationProviderBundleIdentifier
|| __DATA_CONST.__const _MPModelPropertyRadioStationProviderID
|| __DATA_CONST.__const _MPModelPropertyRadioStationProviderName
|| __DATA_CONST.__const _MPModelPropertyRadioStationProviderUniversalLink
|| __DATA_CONST.__const _MPModelPropertyRadioStationShortEditorNotes
|| __DATA_CONST.__const _MPModelPropertyRadioStationStartingAirDate
|| __DATA_CONST.__const _MPModelPropertyRadioStationSubscriptionRequired
|| __DATA_CONST.__const _MPModelPropertyRadioStationSubtype
|| __DATA_CONST.__const _MPModelPropertyRadioStationType
|| __DATA_CONST.__const _MPModelPropertyRecordLabelArtwork
|| __DATA_CONST.__const _MPModelPropertyRecordLabelDescriptionText
|| __DATA_CONST.__const _MPModelPropertyRecordLabelEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyRecordLabelName
|| __DATA_CONST.__const _MPModelPropertyRecordLabelShortDescriptionText
|| __DATA_CONST.__const _MPModelPropertySectionTitle
|| __DATA_CONST.__const _MPModelPropertySharedListeningParticipantArtwork
|| __DATA_CONST.__const _MPModelPropertySharedListeningParticipantName
|| __DATA_CONST.__const _MPModelPropertySocialPersonArtwork
|| __DATA_CONST.__const _MPModelPropertySocialPersonBiography
|| __DATA_CONST.__const _MPModelPropertySocialPersonHandle
|| __DATA_CONST.__const _MPModelPropertySocialPersonIsPrivate
|| __DATA_CONST.__const _MPModelPropertySocialPersonIsVerified
|| __DATA_CONST.__const _MPModelPropertySocialPersonName
|| __DATA_CONST.__const _MPModelPropertySocialPersonPendingRequestsCount
|| __DATA_CONST.__const _MPModelPropertySocialPersonUncensoredName
|| __DATA_CONST.__const _MPModelPropertySongArtistUploadedContent
|| __DATA_CONST.__const _MPModelPropertySongArtwork
|| __DATA_CONST.__const _MPModelPropertySongBeatsPerMinute
|| __DATA_CONST.__const _MPModelPropertySongClassicalMovement
|| __DATA_CONST.__const _MPModelPropertySongClassicalMovementCount
|| __DATA_CONST.__const _MPModelPropertySongClassicalMovementNumber
|| __DATA_CONST.__const _MPModelPropertySongClassicalWork
|| __DATA_CONST.__const _MPModelPropertySongCloudStatus
|| __DATA_CONST.__const _MPModelPropertySongCopyrightText
|| __DATA_CONST.__const _MPModelPropertySongDiscNumber
|| __DATA_CONST.__const _MPModelPropertySongDownloadedDate
|| __DATA_CONST.__const _MPModelPropertySongDuration
|| __DATA_CONST.__const _MPModelPropertySongExplicit
|| __DATA_CONST.__const _MPModelPropertySongGaplessInfo
|| __DATA_CONST.__const _MPModelPropertySongGrouping
|| __DATA_CONST.__const _MPModelPropertySongHasCloudSyncSource
|| __DATA_CONST.__const _MPModelPropertySongHasVideo
|| __DATA_CONST.__const _MPModelPropertySongKeepLocalEnableState
|| __DATA_CONST.__const _MPModelPropertySongKeepLocalManagedStatus
|| __DATA_CONST.__const _MPModelPropertySongLastDevicePlaybackDate
|| __DATA_CONST.__const _MPModelPropertySongLibraryAddEligible
|| __DATA_CONST.__const _MPModelPropertySongLibraryAdded
|| __DATA_CONST.__const _MPModelPropertySongLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertySongPlayCount
|| __DATA_CONST.__const _MPModelPropertySongShouldShowComposer
|| __DATA_CONST.__const _MPModelPropertySongSkipCount
|| __DATA_CONST.__const _MPModelPropertySongTitle
|| __DATA_CONST.__const _MPModelPropertySongTrackNumber
|| __DATA_CONST.__const _MPModelPropertySongTraits
|| __DATA_CONST.__const _MPModelPropertySongUserRating
|| __DATA_CONST.__const _MPModelPropertySongVolumeAdjustment
|| __DATA_CONST.__const _MPModelPropertySongVolumeNormalization
|| __DATA_CONST.__const _MPModelPropertySongYear
|| __DATA_CONST.__const _MPModelPropertyStaticAssetDuration
|| __DATA_CONST.__const _MPModelPropertyStaticAssetFlavorType
|| __DATA_CONST.__const _MPModelPropertyStaticAssetMediaType
|| __DATA_CONST.__const _MPModelPropertyStaticAssetURL
|| __DATA_CONST.__const _MPModelPropertyStoreAssetAccountIdentifier
|| __DATA_CONST.__const _MPModelPropertyStoreAssetEndpointType
|| __DATA_CONST.__const _MPModelPropertyStoreAssetRedownloadParameters
|| __DATA_CONST.__const _MPModelPropertyStoreAssetRedownloadable
|| __DATA_CONST.__const _MPModelPropertyStoreAssetShouldReportPlayEvents
|| __DATA_CONST.__const _MPModelPropertyStoreAssetSubscriptionRequired
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeArtwork
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeDescriptionText
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeDuration
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeExplicitRating
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeHasCloudSyncSource
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeKeepLocalEnableState
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeKeepLocalManagedStatus
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeLastDevicePlaybackDate
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeLibraryAddEligible
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeLibraryAdded
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeMusicShow
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeNumber
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeReleaseDate
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeTitle
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeType
|| __DATA_CONST.__const _MPModelPropertyTVEpisodeTypeDisplayName
|| __DATA_CONST.__const _MPModelPropertyTVSeasonArtwork
|| __DATA_CONST.__const _MPModelPropertyTVSeasonDescriptionText
|| __DATA_CONST.__const _MPModelPropertyTVSeasonDownloadedDate
|| __DATA_CONST.__const _MPModelPropertyTVSeasonEpisodesCount
|| __DATA_CONST.__const _MPModelPropertyTVSeasonHasCleanContent
|| __DATA_CONST.__const _MPModelPropertyTVSeasonHasExplicitContent
|| __DATA_CONST.__const _MPModelPropertyTVSeasonLibraryAddEligible
|| __DATA_CONST.__const _MPModelPropertyTVSeasonLibraryAdded
|| __DATA_CONST.__const _MPModelPropertyTVSeasonLibraryAddedDate
|| __DATA_CONST.__const _MPModelPropertyTVSeasonNumber
|| __DATA_CONST.__const _MPModelPropertyTVSeasonSortType
|| __DATA_CONST.__const _MPModelPropertyTVSeasonYear
|| __DATA_CONST.__const _MPModelPropertyTVShowArtwork
|| __DATA_CONST.__const _MPModelPropertyTVShowCreatorArtwork
|| __DATA_CONST.__const _MPModelPropertyTVShowCreatorName
|| __DATA_CONST.__const _MPModelPropertyTVShowEditorNotes
|| __DATA_CONST.__const _MPModelPropertyTVShowEditorialArtwork
|| __DATA_CONST.__const _MPModelPropertyTVShowEpisodeCount
|| __DATA_CONST.__const _MPModelPropertyTVShowShortEditorNotes
|| __DATA_CONST.__const _MPModelPropertyTVShowShortTitle
|| __DATA_CONST.__const _MPModelPropertyTVShowTagline
|| __DATA_CONST.__const _MPModelPropertyTVShowTitle
|| __DATA_CONST.__const _MPModelRelationshipAlbumArtist
|| __DATA_CONST.__const _MPModelRelationshipAlbumGenre
|| __DATA_CONST.__const _MPModelRelationshipAlbumRepresentativeSong
|| __DATA_CONST.__const _MPModelRelationshipArtistGenre
|| __DATA_CONST.__const _MPModelRelationshipGenericAlbum
|| __DATA_CONST.__const _MPModelRelationshipGenericArtist
|| __DATA_CONST.__const _MPModelRelationshipGenericComposer
|| __DATA_CONST.__const _MPModelRelationshipGenericCurator
|| __DATA_CONST.__const _MPModelRelationshipGenericGenre
|| __DATA_CONST.__const _MPModelRelationshipGenericGroup
|| __DATA_CONST.__const _MPModelRelationshipGenericMediaClip
|| __DATA_CONST.__const _MPModelRelationshipGenericMovie
|| __DATA_CONST.__const _MPModelRelationshipGenericPlaylist
|| __DATA_CONST.__const _MPModelRelationshipGenericPlaylistEntry
|| __DATA_CONST.__const _MPModelRelationshipGenericPodcast
|| __DATA_CONST.__const _MPModelRelationshipGenericPodcastEpisode
|| __DATA_CONST.__const _MPModelRelationshipGenericRadioStation
|| __DATA_CONST.__const _MPModelRelationshipGenericRadioStationEvent
|| __DATA_CONST.__const _MPModelRelationshipGenericRecordLabel
|| __DATA_CONST.__const _MPModelRelationshipGenericSocialPerson
|| __DATA_CONST.__const _MPModelRelationshipGenericSong
|| __DATA_CONST.__const _MPModelRelationshipGenericTVEpisode
|| __DATA_CONST.__const _MPModelRelationshipGenericTVSeason
|| __DATA_CONST.__const _MPModelRelationshipGenericTVShow
|| __DATA_CONST.__const _MPModelRelationshipMediaClipStaticAssets
|| __DATA_CONST.__const _MPModelRelationshipMovieClips
|| __DATA_CONST.__const _MPModelRelationshipMovieLocalFileAsset
|| __DATA_CONST.__const _MPModelRelationshipMoviePlaybackPosition
|| __DATA_CONST.__const _MPModelRelationshipMovieStoreAsset
|| __DATA_CONST.__const _MPModelRelationshipPlayEventAlbum
|| __DATA_CONST.__const _MPModelRelationshipPlayEventArtist
|| __DATA_CONST.__const _MPModelRelationshipPlayEventGroup
|| __DATA_CONST.__const _MPModelRelationshipPlayEventPlaylist
|| __DATA_CONST.__const _MPModelRelationshipPlayEventRadioStation
|| __DATA_CONST.__const _MPModelRelationshipPlaylistCurator
|| __DATA_CONST.__const _MPModelRelationshipPlaylistEntryMovie
|| __DATA_CONST.__const _MPModelRelationshipPlaylistEntryPlaylist
|| __DATA_CONST.__const _MPModelRelationshipPlaylistEntrySocialContributor
|| __DATA_CONST.__const _MPModelRelationshipPlaylistEntrySong
|| __DATA_CONST.__const _MPModelRelationshipPlaylistEntryTVEpisode
|| __DATA_CONST.__const _MPModelRelationshipPodcastAuthor
|| __DATA_CONST.__const _MPModelRelationshipPodcastEpisodeAuthor
|| __DATA_CONST.__const _MPModelRelationshipPodcastEpisodeLocalFileAsset
|| __DATA_CONST.__const _MPModelRelationshipPodcastEpisodePlaybackPosition
|| __DATA_CONST.__const _MPModelRelationshipPodcastEpisodePodcast
|| __DATA_CONST.__const _MPModelRelationshipSongAlbum
|| __DATA_CONST.__const _MPModelRelationshipSongArtist
|| __DATA_CONST.__const _MPModelRelationshipSongComposer
|| __DATA_CONST.__const _MPModelRelationshipSongGenre
|| __DATA_CONST.__const _MPModelRelationshipSongHomeSharingAsset
|| __DATA_CONST.__const _MPModelRelationshipSongLocalFileAsset
|| __DATA_CONST.__const _MPModelRelationshipSongLyrics
|| __DATA_CONST.__const _MPModelRelationshipSongPlaybackPosition
|| __DATA_CONST.__const _MPModelRelationshipSongStoreAsset
|| __DATA_CONST.__const _MPModelRelationshipTVEpisodeLocalFileAsset
|| __DATA_CONST.__const _MPModelRelationshipTVEpisodePlaybackPosition
|| __DATA_CONST.__const _MPModelRelationshipTVEpisodeSeason
|| __DATA_CONST.__const _MPModelRelationshipTVEpisodeShow
|| __DATA_CONST.__const _MPModelRelationshipTVEpisodeStoreAsset
|| __DATA_CONST.__const _MPModelRelationshipTVSeasonRepresentativeEpisode
|| __DATA_CONST.__const _MPModelRelationshipTVSeasonShow
|| __DATA_CONST.__const _MPModelRelationshipTVShowCreator
|| __DATA_CONST.__const _MPModelResponseDidInvalidateNotification
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemPropertyArtistUploadedContentType
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemPropertyDetailedItemType
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemPropertyItemType
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipAlbum
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipArtist
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipCurator
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipMediaClip
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipMovie
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipPlaylist
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipRadioStation
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipRecordLabel
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipSocialPerson
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipSong
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipTVEpisode
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipTVSeason
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipTVShow
|| __DATA_CONST.__const _MPModelStoreBrowseContentItemRelationshipTVShowCreator
|| __DATA_CONST.__const _MPModelStoreBrowseSectionPropertyDisplaysAsGridCellInCarPlay
|| __DATA_CONST.__const _MPModelStoreBrowseSectionPropertyLoadAdditionalContentURL
|| __DATA_CONST.__const _MPModelStoreBrowseSectionPropertyTitle
|| __DATA_CONST.__const _MPModelStoreBrowseSectionPropertyType
|| __DATA_CONST.__const _MPModelStoreBrowseSectionRelationshipRadioStation
|| __DATA_CONST.__const _MPMovieDurationAvailableNotification
|| __DATA_CONST.__const _MPMovieMediaTypesAvailableNotification
|| __DATA_CONST.__const _MPMovieNaturalSizeAvailableNotification
|| __DATA_CONST.__const _MPMoviePlayerDidEnterFullscreenNotification
|| __DATA_CONST.__const _MPMoviePlayerDidExitFullscreenNotification
|| __DATA_CONST.__const _MPMoviePlayerErrorUserInfoKey
|| __DATA_CONST.__const _MPMoviePlayerFullscreenAnimationCurveUserInfoKey
|| __DATA_CONST.__const _MPMoviePlayerFullscreenAnimationDurationUserInfoKey
|| __DATA_CONST.__const _MPMoviePlayerIsAirPlayVideoActiveDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerLoadStateDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerNowPlayingMovieDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerPlaybackDidFinishNotification
|| __DATA_CONST.__const _MPMoviePlayerPlaybackDidFinishReasonUserInfoKey
|| __DATA_CONST.__const _MPMoviePlayerPlaybackStateDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerReadyForDisplayDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerScalingModeDidChangeNotification
|| __DATA_CONST.__const _MPMoviePlayerThumbnailErrorKey
|| __DATA_CONST.__const _MPMoviePlayerThumbnailImageKey
|| __DATA_CONST.__const _MPMoviePlayerThumbnailImageRequestDidFinishNotification
|| __DATA_CONST.__const _MPMoviePlayerThumbnailTimeKey
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataKeyDataType
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataKeyInfo
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataKeyLanguageCode
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataKeyMIMEType
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataKeyName
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataUpdatedNotification
|| __DATA_CONST.__const _MPMoviePlayerTimedMetadataUserInfoKey
|| __DATA_CONST.__const _MPMoviePlayerWillEnterFullscreenNotification
|| __DATA_CONST.__const _MPMoviePlayerWillExitFullscreenNotification
|| __DATA_CONST.__const _MPMovieSourceTypeAvailableNotification
|| __DATA_CONST.__const _MPMusicAPIErrorDomain
|| __DATA_CONST.__const _MPMusicPlayerApplicationControllerMachServiceName
|| __DATA_CONST.__const _MPMusicPlayerControllerErrorDomain
|| __DATA_CONST.__const _MPMusicPlayerControllerItemPlaybackDidEndNotification
|| __DATA_CONST.__const _MPMusicPlayerControllerMachServiceName
|| __DATA_CONST.__const _MPMusicPlayerControllerNowPlayingItemDidChangeNotification
|| __DATA_CONST.__const _MPMusicPlayerControllerPlaybackStateDidChangeNotification
|| __DATA_CONST.__const _MPMusicPlayerControllerQueueDidChangeNotification
|| __DATA_CONST.__const _MPMusicPlayerControllerVolumeDidChangeNotification
|| __DATA_CONST.__const _MPNetworkObserverIsMusicCellularDownloadsAllowedDidChangeNotification
|| __DATA_CONST.__const _MPNetworkObserverIsMusicCellularStreamingAllowedDidChangeNotification
|| __DATA_CONST.__const _MPNetworkObserverIsUsingNetworkDidChangeNotification
|| __DATA_CONST.__const _MPNetworkObserverIsVideoCellularStreamingAllowedDidChangeNotification
|| __DATA_CONST.__const _MPNetworkObserverMusicAllowsCellularDownloadsDefaultsKey
|| __DATA_CONST.__const _MPNetworkObserverMusicAllowsCellularStreamingDefaultsDomain
|| __DATA_CONST.__const _MPNetworkObserverMusicAllowsCellularStreamingDefaultsKey
|| __DATA_CONST.__const _MPNetworkObserverMusicDefaultsDomain
|| __DATA_CONST.__const _MPNetworkPlayabilityMonitorEffectiveNetworkTypeForPlaybackDidChangeNotification
|| __DATA_CONST.__const _MPNetworkPlayabilityMonitorNetworkTypeDidChangeNotification
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyAlbumArtistPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyAlbumPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyArtistPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyCloudAlbumID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyCloudID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyComposerPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyDatabaseID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyFileAssetNonPurgeable
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyFileAssetProtectionType
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyGenrePersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyHasLibraryLyrics
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyIsCollectionLibraryAdded
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyIsLibraryAdded
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyKeepLocalEnableState
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyKeepLocalManagedStatus
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyLyricsGzipData
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPersonID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPlaylistCloudID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPlaylistEntryPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPlaylistPersistentID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyPurchasedAdamID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyShouldRememberBookmarkTime
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyStoreAssetEndpointType
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyUniversalLibraryID
|| __DATA_CONST.__const _MPNowPlayingContentItemDeviceUserInfoKeyUserRating
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyArtworkLookupItems
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyArtworkTemplateDictionary
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyArtworkURL
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyContainerUniqueID
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyDisableJumpToItem
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyEndTime
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyExplicitBadge
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyExplicitContentState
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyHasStoreLyrics
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyHasTimeSyncedLyrics
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsArtistUploadedContent
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsAutoPlayItem
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsLibraryEligible
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsLoading
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsPlaceholder
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyIsSharedListeningItem
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyLastChangeDirection
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyPodcastEpisodeShareURL
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyPodcastEpisodeStreamURL
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyPodcastFeedURL
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyPodcastShareURL
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyPodcastSupportsSubscription
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationAttributionLabel
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationProviderBundlerID
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationProviderID
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationProviderUniversalLink
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationSubtype
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyRadioStationType
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyShouldShowComposer
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyStoreAssetRedownloadable
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyStoreAssetSubscriptionRequired
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeyStoreFrontIdentifier
|| __DATA_CONST.__const _MPNowPlayingContentItemUserInfoKeySupportsArtworkURL
|| __DATA_CONST.__const _MPNowPlayingInfoCollectionIdentifier
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyAssetURL
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyAvailableLanguageOptions
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyChapterCount
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyChapterNumber
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyCurrentLanguageOptions
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyCurrentPlaybackDate
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyDefaultPlaybackRate
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyElapsedPlaybackTime
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyExternalContentIdentifier
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyExternalUserProfileIdentifier
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyIsLiveStream
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyMediaType
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyPlaybackProgress
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyPlaybackQueueCount
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyPlaybackQueueIndex
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyPlaybackRate
|| __DATA_CONST.__const _MPNowPlayingInfoPropertyServiceIdentifier
|| __DATA_CONST.__const _MPPlayableContentAppSupportsPlayableContentKey
|| __DATA_CONST.__const _MPPlaybackArchiveErrorDomain
|| __DATA_CONST.__const _MPPlaybackContextCodingUserInfoKeySupplementalReason
|| __DATA_CONST.__const _MPPlaybackUserDefaultsMusicEQPresetDidChangeNotification
|| __DATA_CONST.__const _MPPlaybackUserDefaultsMusicRepeatTypeDidChangeNotification
|| __DATA_CONST.__const _MPPlaybackUserDefaultsMusicShuffleTypeDidChangeNotification
|| __DATA_CONST.__const _MPPlaybackUserDefaultsPreferredResolutionsDidChangeNotification
|| __DATA_CONST.__const _MPPlaybackUserDefaultsPrivateListeningEnabledDidChangeNotification
|| __DATA_CONST.__const _MPPlaybackUserDefaultsSoundCheckEnabledDidChangeNotification
|| __DATA_CONST.__const _MPQueueFeederErrorDomain
|| __DATA_CONST.__const _MPRadioControllerXPCBundleIdentifier
|| __DATA_CONST.__const _MPRadioControllerXPCEntitlement
|| __DATA_CONST.__const _MPRadioControllerXPCServiceName
|| __DATA_CONST.__const _MPRadioLibraryErrorDomain
|| __DATA_CONST.__const _MPRadioLibraryStationsDidChangeNotification
|| __DATA_CONST.__const _MPRemoteCommandCenterCommandHandlersRegisteredNotification
|| __DATA_CONST.__const _MPRemoteCommandCenterCommandsDidChangeNotification
|| __DATA_CONST.__const _MPRemoteCommandEventDidTimeout
|| __DATA_CONST.__const _MPRemoteCommandTargetsDidChangeNotification
|| __DATA_CONST.__const _MPRequestErrorDomain
|| __DATA_CONST.__const _MPRequestUnderlyingErrorsUserInfoKey
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsAccountModificationDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsDeletionDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsExplicitContentDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsMusicSubscriptionDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsMusicVideosDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsRadioPurchasesDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsRadioServiceDidChangeNotification
|| __DATA_CONST.__const _MPRestrictionsMonitorAllowsStorePurchasesDidChangeNotification
|| __DATA_CONST.__const _MPServerObjectDatabasePayloadKeyDidImportObject
|| __DATA_CONST.__const _MPServerObjectDatabasePayloadKeyIdentifierSet
|| __DATA_CONST.__const _MPServerObjectDatabaseUnknownPersonID
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavor1080p
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavor480p
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavor720p
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorHDMV
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorHighBitrate
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorLightweightHighBitrate
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorLowBitrate
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorSDMV
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorSLW
|| __DATA_CONST.__const _MPStoreDownloadAssetFlavorUltraLowBitrate
|| __DATA_CONST.__const _MPStoreDownloadAttributeBackgroundRequest
|| __DATA_CONST.__const _MPStoreDownloadAttributeBuyParameters
|| __DATA_CONST.__const _MPStoreDownloadAttributeClientBundleIdentifier
|| __DATA_CONST.__const _MPStoreDownloadAttributeDisplaysOnLockscreen
|| __DATA_CONST.__const _MPStoreDownloadAttributeDownloadHandlerIdentifier
|| __DATA_CONST.__const _MPStoreDownloadAttributeKind
|| __DATA_CONST.__const _MPStoreDownloadAttributeLibraryItemIdentifier
|| __DATA_CONST.__const _MPStoreDownloadAttributeOriginator
|| __DATA_CONST.__const _MPStoreDownloadAttributeReason
|| __DATA_CONST.__const _MPStoreDownloadAttributeShouldDisableCellularRestrictionEnforcement
|| __DATA_CONST.__const _MPStoreDownloadAttributeShouldRespectMusicCellularDataRestriction
|| __DATA_CONST.__const _MPStoreDownloadAttributeShouldRespectStoreCellularDataRestriction
|| __DATA_CONST.__const _MPStoreDownloadAttributeSkipInstall
|| __DATA_CONST.__const _MPStoreDownloadAttributeStoreItemIdentifier
|| __DATA_CONST.__const _MPStoreDownloadAttributeStoreSagaItemIdentifier
|| __DATA_CONST.__const _MPStoreDownloadAttributeTitle
|| __DATA_CONST.__const _MPStoreDownloadAttributeURLBagKey
|| __DATA_CONST.__const _MPStoreDownloadErrorDomain
|| __DATA_CONST.__const _MPStoreDownloadManagerDidFetchInitialDownloadsNotification
|| __DATA_CONST.__const _MPStoreDownloadOriginatorRadioHistory
|| __DATA_CONST.__const _MPStoreDownloadOriginatorRadioMediaControls
|| __DATA_CONST.__const _MPStoreDownloadOriginatorRadioNowPlaying
|| __DATA_CONST.__const _MPStoreDownloadOriginatorRadioStore
|| __DATA_CONST.__const _MPStoreDownloadOriginatorRadioWishlist
|| __DATA_CONST.__const _MPStoreDownloadPhaseCanceled
|| __DATA_CONST.__const _MPStoreDownloadPhaseDataRestore
|| __DATA_CONST.__const _MPStoreDownloadPhaseDownloading
|| __DATA_CONST.__const _MPStoreDownloadPhaseFailed
|| __DATA_CONST.__const _MPStoreDownloadPhaseFinished
|| __DATA_CONST.__const _MPStoreDownloadPhaseInstalling
|| __DATA_CONST.__const _MPStoreDownloadPhasePaused
|| __DATA_CONST.__const _MPStoreDownloadPhasePreflight
|| __DATA_CONST.__const _MPStoreDownloadPhaseProcessing
|| __DATA_CONST.__const _MPStoreDownloadPhasePurchasing
|| __DATA_CONST.__const _MPStoreDownloadPhaseWaiting
|| __DATA_CONST.__const _MPStoreDownloadURLBagKeyBuyProduct
|| __DATA_CONST.__const _MPStoreDownloadURLBagKeyPaidRedownloadProduct
|| __DATA_CONST.__const _MPStoreDownloadURLBagKeyRedownloadProduct
|| __DATA_CONST.__const _MPStoreDownloadURLBagKeySubscriptionDownload
|| __DATA_CONST.__const _MPStoreHLSAssetInfoKeyProtocolTypeSimplified
|| __DATA_CONST.__const _MPStoreHLSAssetInfoKeyProtocolTypeStandard
|| __DATA_CONST.__const _MPStoreItemActionTextTypeDownloaded
|| __DATA_CONST.__const _MPStoreItemActionTextTypeDownloading
|| __DATA_CONST.__const _MPStoreItemActionTextTypeLong
|| __DATA_CONST.__const _MPStoreItemActionTextTypeMedium
|| __DATA_CONST.__const _MPStoreItemActionTextTypeShort
|| __DATA_CONST.__const _MPStoreItemLibraryImportMetadataKeyAlbumLikedState
|| __DATA_CONST.__const _MPStoreItemLibraryImportMetadataKeyTrackLikedState
|| __DATA_CONST.__const _MPStoreItemMetadataDescriptionTextStyleShort
|| __DATA_CONST.__const _MPStoreItemMetadataDescriptionTextStyleStandard
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindBannerUber
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindBrandLogo
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindBrowseCover
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindFullscreenBackground
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindStoreFlowcase
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindSubscriptionCover
|| __DATA_CONST.__const _MPStoreItemMetadataEditorialArtworkKindSubscriptionHero
|| __DATA_CONST.__const _MPStoreItemMetadataEditorsNotes
|| __DATA_CONST.__const _MPStoreItemMetadataEditorsNotesStyleShort
|| __DATA_CONST.__const _MPStoreItemMetadataEditorsNotesStyleStandard
|| __DATA_CONST.__const _MPStoreItemMetadataEditorsNotesStyleTagline
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindActivity
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindAlbum
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindArtist
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindBrand
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindEditorial
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindMovie
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindMusicVideo
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindPlaylist
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindRadioStation
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindRecordLabel
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindShowBrand
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindSocialProfile
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindSong
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindTVEpisode
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindTVSeason
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindTVShow
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindUploadedAudio
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindUploadedVideo
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindiTunesBrand
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindiTunesBrandCurator
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindiTunesBrandGenre
|| __DATA_CONST.__const _MPStoreItemMetadataItemKindiTunesBrandShow
|| __DATA_CONST.__const _MPStoreItemMetadataItemTypeRecordLabel
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindAlbum
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindArtist
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindMusicVideo
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindPlaylist
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindRadioStation
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindRecordLabel
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindShow
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindSong
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindTVEpisode
|| __DATA_CONST.__const _MPStoreItemMetadataMusicKitItemKindTVSeason
|| __DATA_CONST.__const _MPStoreItemMetadataRadioStationSubtypeEpisode
|| __DATA_CONST.__const _MPStoreItemMetadataRadioStationSubtypeShoutcast
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyCuratorHandle
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyCuratorName
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyHandle
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyITunesBrandType
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyIsPrivate
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyIsVerified
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyKind
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyName
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyNameRaw
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyPlaylistType
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyShortURL
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeySocialProfileID
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyStoreID
|| __DATA_CONST.__const _MPStoreItemMetadataStorePlatformDictionaryKeyURL
|| __DATA_CONST.__const _MPStoreItemMetadataUberArtworkKindMasterArt
|| __DATA_CONST.__const _MPStoreItemMetadataVideoSubtypeTVTrailer
|| __DATA_CONST.__const _MPStoreItemOfferTypeBuy
|| __DATA_CONST.__const _MPStoreItemOfferTypeRadio
|| __DATA_CONST.__const _MPStoreItemOfferTypeRedownload
|| __DATA_CONST.__const _MPStoreItemOfferTypeSubscription
|| __DATA_CONST.__const _MPStoreLyricsRequestErrorDomain
|| __DATA_CONST.__const _MPStoreLyricsSnippetRequestErrorDomain
|| __DATA_CONST.__const _MPStorePlatformKindAlbum
|| __DATA_CONST.__const _MPStorePlatformKindArtist
|| __DATA_CONST.__const _MPStorePlatformKindMovie
|| __DATA_CONST.__const _MPStorePlatformKindMusicVideo
|| __DATA_CONST.__const _MPStorePlatformKindPlaylist
|| __DATA_CONST.__const _MPStorePlatformKindRadioStation
|| __DATA_CONST.__const _MPStorePlatformKindSong
|| __DATA_CONST.__const _MPStorePlatformKindTVEpisode
|| __DATA_CONST.__const _MPStorePlatformKindTVSeason
|| __DATA_CONST.__const _MPStorePlatformKindTVShow
|| __DATA_CONST.__const _MPStorePlatformKindUploadedAudio
|| __DATA_CONST.__const _MPStorePlatformKindUploadedVideo
|| __DATA_CONST.__const _MPStoreSocialBagKey
|| __DATA_CONST.__const _MPStoreSocialErrorDomain
|| __DATA_CONST.__const _MPStoreSocialServiceControllerTransientStatesDidChangeNotification
|| __DATA_CONST.__const _MPStoreSocialServiceControllerTransientStatesSnapshotKey
|| __DATA_CONST.__const _MPSystemAppSpecializedQueueProminentStationIdentifier
|| __DATA_CONST.__const _MPUniformTypeIdentifierAudio
|| __DATA_CONST.__const _MPUniformTypeIdentifierAudioPodcast
|| __DATA_CONST.__const _MPUniformTypeIdentifierAudiobook
|| __DATA_CONST.__const _MPUniformTypeIdentifierAudiovisualContent
|| __DATA_CONST.__const _MPUniformTypeIdentifierMovie
|| __DATA_CONST.__const _MPUniformTypeIdentifierMusicVideo
|| __DATA_CONST.__const _MPUniformTypeIdentifierPodcast
|| __DATA_CONST.__const _MPUniformTypeIdentifierRadioStation
|| __DATA_CONST.__const _MPUniformTypeIdentifierShow
|| __DATA_CONST.__const _MPUniformTypeIdentifierSong
|| __DATA_CONST.__const _MPUniformTypeIdentifierVideoPodcast
|| __DATA_CONST.__const _MPVolumeSliderVolumeControlAvailabilityDidChangeNotification
|| __DATA_CONST.__const _MPVolumeSliderVolumeControlCapabilitiesDidChangeNotification
|| __DATA_CONST.__const _MPVolumeSliderVolumeControlLabelDidChangeNotification
|| __DATA_CONST.__const _MPVolumeViewRouteButtonChangedNotification
|| __DATA_CONST.__const _MPVolumeViewRoutePickerPresentedNotification
|| __DATA_CONST.__const _MPVolumeViewVisibilityChangedNotification
|| __DATA_CONST.__const _MPVolumeViewWirelessRouteActiveDidChangeNotification
|| __DATA_CONST.__const _MPVolumeViewWirelessRoutesAvailableDidChangeNotification
|| __DATA_CONST.__const _MediaPlayerErrorDomain
|| __DATA_CONST.__const __MPAVRouteConnectionDidAttemptConnectionNotification
|| __DATA_CONST.__const __MPAVRouteConnectionDidConnectNotification
|| __DATA_CONST.__const __MPAVRouteConnectionDidInvalidateNotification
|| __DATA_CONST.__const __MPAVRoutingViewCellIdentifier
|| __DATA_CONST.__const __MPAVRoutingViewHeaderIdentifier
|| __DATA_CONST.__const __MPContentItemDidChangeNotification
|| __DATA_CONST.__const __MPContentItemDidChangeUserInfoKeyDeltaItem
|| __DATA_CONST.__const __MPContentItemDidChangeUserInfoKeyDeltaRequest
|| __DATA_CONST.__const __MPContentItemDidChangeUserInfoKeyImmediately
|| __DATA_CONST.__const __MPModelPropertyPlaylistEntryArtwork
|| __DATA_CONST.__const __MPModelPropertySongTrackCount
|| __DATA_CONST.__const __MPMusicPlayerControllerArtworkDidChangeNotification
|| __DATA_CONST.__const __MPMusicPlayerControllerClientIdentifierMusicKitApplicationPlayer
|| __DATA_CONST.__const __MPMusicPlayerControllerClientIdentifierMusicKitSystemPlayer
|| __DATA_CONST.__const __MPMusicPlayerControllerNotificationUserInfoKeyContentItemIDs
|| __DATA_CONST.__const __MPMusicPlayerControllerQueueDidChangeNotification
|| __DATA_CONST.__const __MPMusicPlayerControllerQueueDidEndNotification
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoCollectionTypeAlbum
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoCollectionTypePlaylist
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoCollectionTypeRadio
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoKeyCollectionType
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoKeyIdentifiers
|| __DATA_CONST.__const __MPNowPlayingCollectionInfoKeyTitle
|| __DATA_CONST.__const __MPNowPlayingContentItemsDidChangeNotification
|| __DATA_CONST.__const __MPNowPlayingInfoCenterPlaybackQueueDidChangeNotification
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyAlbumiTunesStoreAdamIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyAppMetrics
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyArtistiTunesStoreAdamIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyArtworkData
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyArtworkIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyArtworkMIMEType
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyCollectionInfo
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyDefaultPlaybackRate
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyExternalContentIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsAdvertisement
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsBanned
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsLiked
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsLoading
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsMusicApp
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsSharable
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsSteerable
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyIsVideosApp
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyPlaylistGlobalIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyProhibitsSkip
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyPurchaseInfoData
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyRadioStationHash
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyRadioStationIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyRadioStationName
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyRadioStationStringIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyRepeatMode
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyShuffleMode
|| __DATA_CONST.__const __MPNowPlayingInfoPropertySupportsFastForward15Seconds
|| __DATA_CONST.__const __MPNowPlayingInfoPropertySupportsIsBanned
|| __DATA_CONST.__const __MPNowPlayingInfoPropertySupportsIsLiked
|| __DATA_CONST.__const __MPNowPlayingInfoPropertySupportsRewind15Seconds
|| __DATA_CONST.__const __MPNowPlayingInfoPropertySupportsWishlisting
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyiTunesStoreIdentifier
|| __DATA_CONST.__const __MPNowPlayingInfoPropertyiTunesStoreSubscriptionAdamIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVClippingTableViewCell
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVEndpointRoute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVOutputDeviceRoutingDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoute
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoutingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoutingDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoutingSheet
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoutingTableViewCell
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAVRoutingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPAddKeepLocalControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPArtworkResizeUtility
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCFWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPChangePlaybackPositionCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPCloudController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPDetailSlider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMRAVEndpointWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaCompoundAllPredicate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaCompoundAnyPredicate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaCompoundPredicate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaItemCollection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaLibraryArtworkDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaLibraryDataProviderML3
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaPickerController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaPlaylist
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaPredicate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaPropertyPredicate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMediaQueryCriteria
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPModalPresentationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPMusicPlayerPlayParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPNowPlayingInfoCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPRemoteCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPRemoteCommandCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPRestrictionsMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPRouteButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPRouteLabel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPSkipIntervalCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPSkipTrackCommand
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPStoreDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPVolumeControllerSystemDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPVolumeHUDController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPVolumeSlider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MPVolumeView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVClippingTableViewCell
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVEndpointRoute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVOutputDeviceRoutingDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoute
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoutingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoutingDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoutingSheet
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoutingTableViewCell
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAVRoutingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPAddKeepLocalControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPArtworkResizeUtility
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCFWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPChangePlaybackPositionCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPCloudController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPDetailSlider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPHomeSharingML3DataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMRAVEndpointWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaCompoundAllPredicate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaCompoundAnyPredicate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaCompoundPredicate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaItemCollection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaLibraryArtworkDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaLibraryDataProviderML3
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaPickerController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaPlaylist
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaPredicate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaPropertyPredicate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMediaQueryCriteria
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPModalPresentationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPMusicPlayerPlayParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPNowPlayingInfoCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPRemoteCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPRemoteCommandCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPRestrictionsMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPRouteButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPRouteLabel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPSkipIntervalCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPSkipTrackCommand
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPStoreDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPVolumeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPVolumeControllerSystemDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPVolumeHUDController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPVolumeSlider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MPVolumeView
|| __TEXT.__const _MPContentPIDUnknown
|| __TEXT.__const _MPHomePreferenceSoundCheckFallbackValue
|| __TEXT.__const _MPHomeUserPreferenceAllowExplicitFallbackValue
|| __TEXT.__const _MPHomeUserPreferencePrivateListeningFallbackValue
|| __TEXT.__const _MPMusicPlayerControllerDefaultMaxForwardItemCount
|| __TEXT.__const _MPMusicPlayerControllerDefaultMaxReverseItemCount
|| __TEXT.__const _MPRestrictionMonitorContentRatingMaximum
|| __TEXT.__text _CGRectNormalizedRectFromSubRect
|| __TEXT.__text _CGRectSubRectWithNormalizedRect
|| __TEXT.__text _MPAVMRRouteDiscoveryModeFromDiscoveryMode
|| __TEXT.__text _MPAVRouteSubtypeDescription
|| __TEXT.__text _MPAVRouteTypeDescription
|| __TEXT.__text _MPArtworkImageJPEGRepresentation
|| __TEXT.__text _MPArtworkImagePNGRepresentation
|| __TEXT.__text _MPArtworkRepresentationBestSizeMatchingSize
|| __TEXT.__text _MPArtworkSortSizes
|| __TEXT.__text _MPChangeDetailOperationDescription
|| __TEXT.__text _MPChangeDetailOperationGenerate
|| __TEXT.__text _MPChangeDetailOperationGenerateEx
|| __TEXT.__text _MPChangeDetailOperationMaximumElementCount
|| __TEXT.__text _MPChangeDetailOperationMaximumSegmentCount
|| __TEXT.__text _MPChangeDetailOperationsCopyDescription
|| __TEXT.__text _MPChangeLanguageOptionSettingFromMediaRemote
|| __TEXT.__text _MPChangeLanguageOptionSettingToMediaRemote
|| __TEXT.__text _MPClientRadioControllerGetXPCInterface
|| __TEXT.__text _MPCloudControllerGetSagaOnDiskDatabaseRevisionForUserIdentity
|| __TEXT.__text _MPContentItemIdentifierFromMPSectionedIdentifierListIdentifiers
|| __TEXT.__text _MPContentItemIdentifierFromMPSectionedIdentifierPair
|| __TEXT.__text _MPContentTasteContentTypeFromMPModelObject
|| __TEXT.__text _MPContentTasteContentTypeFromSSVMediaContentTasteItemContentType
|| __TEXT.__text _MPContentTasteTypeFromSSVMediaContentTasteType
|| __TEXT.__text _MPCreateBlockWithEnforcedQOS
|| __TEXT.__text _MPFloatCeilForScale
|| __TEXT.__text _MPFloatEqualToFloat
|| __TEXT.__text _MPFloatFloorForScale
|| __TEXT.__text _MPFloatGetSafeScaleForValue
|| __TEXT.__text _MPFloatGreaterThanOrEqualToFloat
|| __TEXT.__text _MPFloatLessThanOrEqualToFloat
|| __TEXT.__text _MPFloatRoundForScale
|| __TEXT.__text _MPHasAudioBackgroundMode
|| __TEXT.__text _MPMediaContentTasteTasteTypeToMPMediaEntityLikedState
|| __TEXT.__text _MPMediaRemoteCollectionInfoToNowPlaying
|| __TEXT.__text _MPMediaRemoteCommandOptionsForFeedbackOrPurchaseCommandEvent
|| __TEXT.__text _MPModelMovieIsRestricted
|| __TEXT.__text _MPModelTVEpisodeIsRestricted
|| __TEXT.__text _MPMusicRepeatModeForMPRepeatType
|| __TEXT.__text _MPMusicShuffleModeForMPShuffleType
|| __TEXT.__text _MPNSStringForMPActiveRouteType
|| __TEXT.__text _MPNSStringFromQueueEndAction
|| __TEXT.__text _MPNSStringFromQueueLoadAction
|| __TEXT.__text _MPNSStringFromRepeatType
|| __TEXT.__text _MPNSStringFromShuffleType
|| __TEXT.__text _MPNowPlayingCollectionInfoToMediaRemote
|| __TEXT.__text _MPNowPlayingInfoDictionaryToMRNowPlayingInfoDictionary
|| __TEXT.__text _MPNowPlayingInfoLanguageOptionTypeFromMRLanguageOptionType
|| __TEXT.__text _MPNowPlayingInfoLanguageOptionTypeToMRLanguageOptionType
|| __TEXT.__text _MPNowPlayingPlaybackStateFromMediaRemotePlaybackState
|| __TEXT.__text _MPNowPlayingPlaybackStateToMediaRemotePlaybackState
|| __TEXT.__text _MPPComparisonTypeFromProtocolComparisonType
|| __TEXT.__text _MPPCompoundPredicateReadFrom
|| __TEXT.__text _MPPConditionalPredicateReadFrom
|| __TEXT.__text _MPPCreateFoundationObjectFromPredicateValue
|| __TEXT.__text _MPPCreateMediaPredicateFromProtocolPredicateAndLibrary
|| __TEXT.__text _MPPCreatePredicateValueFromFoundationObject
|| __TEXT.__text _MPPEntityOrderFromProtocolEntityOrder
|| __TEXT.__text _MPPEntityTypeFromProtocolEntityType
|| __TEXT.__text _MPPMediaGroupingTypeFromProtocolGroupingType
|| __TEXT.__text _MPPMediaPredicateReadFrom
|| __TEXT.__text _MPPMediaPredicateValueReadFrom
|| __TEXT.__text _MPPMediaQueryReadFrom
|| __TEXT.__text _MPPPersistentIDsPredicateReadFrom
|| __TEXT.__text _MPPPropertyPredicateReadFrom
|| __TEXT.__text _MPPProtocolComparisonTypeFromComparisonType
|| __TEXT.__text _MPPProtocolEntityOrderFromEntityOrder
|| __TEXT.__text _MPPProtocolEntityTypeFromEntityType
|| __TEXT.__text _MPPProtocolGroupingTypeFromMediaGroupingType
|| __TEXT.__text _MPPSearchStringPredicateReadFrom
|| __TEXT.__text _MPPlaybackIsUserRemovedError
|| __TEXT.__text _MPPlaybackQueueInsertionPositionFromMediaRemote
|| __TEXT.__text _MPPlaybackQueueInsertionPositionToMediaRemote
|| __TEXT.__text _MPProcessInfoSystemWallClockUptime
|| __TEXT.__text _MPQueueEndActionFromNSString
|| __TEXT.__text _MPRTCReportingEventDictionarySetErrorKeys
|| __TEXT.__text _MPRTCReportingEventMinimumErrorFieldsForError
|| __TEXT.__text _MPRectByApplyingUserInterfaceLayoutDirectionInRect
|| __TEXT.__text _MPRectByRemovingUserInterfaceLayoutDirectionInRect
|| __TEXT.__text _MPRemoteCommandHandlerStatusFromMRMediaRemoteCommandHandlerStatus
|| __TEXT.__text _MPRemoteCommandStatusFromMRSendCommandResultStatus
|| __TEXT.__text _MPRepeatTypeDescription
|| __TEXT.__text _MPRepeatTypeForMPMusicRepeatMode
|| __TEXT.__text _MPRepeatTypeFromMediaRemoteRepeatMode
|| __TEXT.__text _MPRepeatTypeFromNSString
|| __TEXT.__text _MPRepeatTypeToMediaRemoteRepeatMode
|| __TEXT.__text _MPRouteDiscoveryModeDescription
|| __TEXT.__text _MPRouteDiscoveryModeFromMRDiscoveryMode
|| __TEXT.__text _MPSectionedIdentifierPairFromIdentifiers
|| __TEXT.__text _MPSectionedIdentifierPairFromMPContentIdentifier
|| __TEXT.__text _MPServiceRadioControllerGetXPCInterface
|| __TEXT.__text _MPShuffleTypeDescription
|| __TEXT.__text _MPShuffleTypeForMPMusicShuffleMode
|| __TEXT.__text _MPShuffleTypeFromMediaRemoteShuffleMode
|| __TEXT.__text _MPShuffleTypeFromNSString
|| __TEXT.__text _MPShuffleTypeToMediaRemoteShuffleMode
|| __TEXT.__text _MPStoreDownloadAdditionalBuyParametersForOriginator
|| __TEXT.__text _MPStoreDownloadOriginatorWithStationInformation
|| __TEXT.__text _MPStoreDownloadSSDownloadKindFromMPMediaType
|| __TEXT.__text _MPStoreGetClientToken
|| __TEXT.__text _MPStoreGetClientTokenForIdentity
|| __TEXT.__text _MPStoreGetClientTokenStatusForIdentity
|| __TEXT.__text _MPStoreItemMetadataCacheableStorefrontForStorefront
|| __TEXT.__text _MPStoreItemMetadataInt64NormalizeStoreIDValue
|| __TEXT.__text _MPStoreItemMetadataItemKindGetPlayabilityInformation
|| __TEXT.__text _MPStoreItemMetadataItemKindIsArtistUploadedContent
|| __TEXT.__text _MPStoreItemMetadataItemKindIsContainerKind
|| __TEXT.__text _MPStoreItemMetadataNumberNormalizeStoreIDValue
|| __TEXT.__text _MPStoreItemMetadataStringNormalizeStoreIDValue
|| __TEXT.__text _MPStoreItemMetadataSubscriptionOfferInOffers
|| __TEXT.__text _MPStoreItemMetadataYearFromReleaseDate
|| __TEXT.__text _MPStoreModelObjectContentItemIDForIdentifierSet
|| __TEXT.__text _MPSubscriptionStatusCapabilitiesForSubscriptionStatus
|| __TEXT.__text _MPSystemAppPlaybackQueueTypeFromMediaRemote
|| __TEXT.__text _MPSystemAppPlaybackQueueTypeToMediaRemote
|| __TEXT.__text _MPTVOutCapabledAndPreferred
|| __TEXT.__text _MPTVOutScreen
|| __TEXT.__text _MPVolumeSettingsAlertHide
|| __TEXT.__text _MPVolumeSettingsAlertIsVisible
|| __TEXT.__text _MPVolumeSettingsAlertShow
|| __TEXT.__text _MRMediaRemoteCommandHandlerStatusFromMPRemoteCommandHandlerStatus
|| __TEXT.__text _NSStringAggregationKeyFromMPMediaType
|| __TEXT.__text _NSStringFromMPMediaType
|| __TEXT.__text _NSStringFromMPModelGenericObjectType
|| __TEXT.__text _NSStringFromMPModelRadioStationSubtype
|| __TEXT.__text _NSStringFromMPModelRadioStationType
|| __TEXT.__text _NSStringFromMPRemoteCommandHandlerDialogActionType
|| __TEXT.__text _SSVMediaContentTasteItemTasteTypeFromMPContentTasteType
|| __TEXT.__text _SSVMediaContentTasteItemTasteTypeFromMPMediaEntityLikedState
|| __TEXT.__text _SSVMediaContentTasteItemTasteTypeToMPMediaEntityLikedState
|| __TEXT.__text __MPLogCategoryAssistant
|| __TEXT.__text __MPLogCategoryAssistant_Oversize
|| __TEXT.__text __MPLogCategoryInternalSettings
|| __TEXT.__text __MPLogCategoryInternalSettings_Oversize
|| __TEXT.__text __MPNowPlayingInfoPropertyForMRMediaRemoteNowPlayingInfoProperty
|| __TEXT.__text __MPTitlePropertyForPidProperty
|| __TEXT.__text __NSStringFromMPMediaGrouping
__ AVFAudio: _AVAudioSessionCategoryPlaybackNoSpeaker
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _AVAudioSessionRoutingContextChangeNotification
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFoundation: _AVAssetChapterListTrackReferencesKey
__ AVFoundation: _AVAudioSessionCategoryAudioVideo
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVLayerVideoGravityResize
__ AVFoundation: _AVLayerVideoGravityResizeAspect
__ AVFoundation: _AVLayerVideoGravityResizeAspectFill
__ AVFoundation: _AVMediaCharacteristicAudible
__ AVFoundation: _AVMediaCharacteristicContainsOnlyForcedSubtitles
__ AVFoundation: _AVMediaCharacteristicDescribesMusicAndSoundForAccessibility
__ AVFoundation: _AVMediaCharacteristicDescribesVideoForAccessibility
__ AVFoundation: _AVMediaCharacteristicDubbedTranslation
__ AVFoundation: _AVMediaCharacteristicEasyToRead
__ AVFoundation: _AVMediaCharacteristicIsAuxiliaryContent
__ AVFoundation: _AVMediaCharacteristicIsMainProgramContent
__ AVFoundation: _AVMediaCharacteristicLanguageTranslation
__ AVFoundation: _AVMediaCharacteristicLegible
__ AVFoundation: _AVMediaCharacteristicTranscribesSpokenDialogForAccessibility
__ AVFoundation: _AVMediaCharacteristicVoiceOverTranslation
__ AVFoundation: _AVMediaTypeAudio
__ AVFoundation: _AVMediaTypeClosedCaption
__ AVFoundation: _AVMediaTypeMuxed
__ AVFoundation: _AVMediaTypeSubtitle
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _AVMetadataExtraAttributeDataTypeKey
__ AVFoundation: _AVMetadataExtraAttributeDataTypeNamespaceKey
__ AVFoundation: _AVMetadataExtraAttributePictureTypeKey
__ AVFoundation: _AVMetadataItemAttributeDataType
__ AVFoundation: _AVMetadataItemAttributeInfo
__ AVFoundation: _AVMetadataItemAttributeLanguageCode
__ AVFoundation: _AVMetadataItemAttributeMIMEType
__ AVFoundation: _AVMetadataItemAttributeName
__ AVFoundation: _AVOutputContextOutputDeviceDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDevicesDidChangeNotification
__ AVFoundation: _AVOutputDeviceBatteryLevelCaseKey
__ AVFoundation: _AVOutputDeviceBatteryLevelLeftKey
__ AVFoundation: _AVOutputDeviceBatteryLevelRightKey
__ AVFoundation: _AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification
__ AVFoundation: _AVPlayerCurrentItemDidChangeNotification
__ AVFoundation: _AVPlayerCurrentItemDidChangeReasonKey
__ AVFoundation: _AVPlayerItemDidPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeErrorKey
__ AVFoundation: _AVPlayerItemFailedToPlayToEndTimeNotification
__ AVFoundation: _AVPlayerItemTimeJumpedNotification
__ AVFoundation: _AVURLAssetAllowsConstrainedNetworkAccessKey
__ AVFoundation: _AVURLAssetPreferLargeResourceRequests
__ AVFoundation: _AVURLAssetURLRequestAttributionKey
__ AVFoundation: _AVURLAssetUseClientURLLoadingExclusively
__ AVFoundation: _OBJC_CLASS_$_AVAsset
__ AVFoundation: _OBJC_CLASS_$_AVAssetImageGenerator
__ AVFoundation: _OBJC_CLASS_$_AVMediaSelectionGroup
__ AVFoundation: _OBJC_CLASS_$_AVMediaSelectionOption
__ AVFoundation: _OBJC_CLASS_$_AVMetadataItem
__ AVFoundation: _OBJC_CLASS_$_AVOutputContext
__ AVFoundation: _OBJC_CLASS_$_AVOutputDeviceDiscoverySession
__ AVFoundation: _OBJC_CLASS_$_AVPlayer
__ AVFoundation: _OBJC_CLASS_$_AVPlayerItem
__ AVFoundation: _OBJC_CLASS_$_AVQueuePlayer
__ AVFoundation: _OBJC_CLASS_$_AVRoutingSessionManager
__ AVFoundation: _OBJC_CLASS_$_AVTimeFormatter
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ AppSupport: _CPSharedResourcesDirectory
__ AppleMediaServices: _AMSAccountFlagAutoPlay
__ AudioToolbox: _AudioServicesPlaySystemSoundWithOptions
__ AudioToolbox: _kAudioServicesPlaySystemSoundOptionBehaviorKey
__ BaseBoard: _OBJC_CLASS_$_BSPlatform
__ BaseBoardUI: _OBJC_CLASS_$_BSUIEmojiLabelView
__ CFNetwork: __CFURLCachePurgeMemoryCache
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotificationParameter_ShouldPause
__ Celestial: _AVSystemController_AppToInterruptCurrentNowPlayingSessionAttribute
__ Celestial: _AVSystemController_AudioCategoryNotificationParameter
__ Celestial: _AVSystemController_AudioVolumeChangeReasonNotificationParameter
__ Celestial: _AVSystemController_AudioVolumeNotificationParameter
__ Celestial: _AVSystemController_CurrentlyActiveCategoryAttribute
__ Celestial: _AVSystemController_EUVolumeLimitAttribute
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedAttribute
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedNotificationParameter
__ Celestial: _AVSystemController_EUVolumeLimitNotificationParameter
__ Celestial: _AVSystemController_FullMuteAttribute
__ Celestial: _AVSystemController_FullMuteDidChangeNotification
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_BatteryLevelCase
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_BatteryLevelLeft
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_BatteryLevelRight
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_BatteryLevelSingle
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected_ModelIdentifier
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected_Name
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected_Playing
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected_ProductName
__ Celestial: _AVSystemController_RouteDescriptionKey_OtherDevicesConnected_UniqueID
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SubscribeToNotificationsAttribute
__ Celestial: _AVSystemController_SystemVolumeDidChangeNotification
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateCopy
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleGetMainBundle
__ CoreFoundation: _CFBundleGetValueForInfoDictionaryKey
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopAddTimer
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFRunLoopTimerCreate
__ CoreFoundation: _CFRunLoopTimerInvalidate
__ CoreFoundation: _CFRunLoopTimerSetNextFireDate
__ CoreFoundation: _CFStringCreateWithBytes
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _CFUserNotificationGetResponseDictionary
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLCreationDateKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSEnumerator
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: _OBJC_METACLASS_$_NSArray
__ CoreFoundation: _OBJC_METACLASS_$_NSCache
__ CoreFoundation: _OBJC_METACLASS_$_NSEnumerator
__ CoreFoundation: __NSIsNSArray
__ CoreFoundation: __NSIsNSDictionary
__ CoreFoundation: __NSIsNSNumber
__ CoreFoundation: __NSIsNSString
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGBitmapContextGetBitmapInfo
__ CoreGraphics: _CGBitmapContextGetBytesPerRow
__ CoreGraphics: _CGBitmapContextGetData
__ CoreGraphics: _CGBitmapContextGetHeight
__ CoreGraphics: _CGBitmapContextGetWidth
__ CoreGraphics: _CGColorGetNumberOfComponents
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceCreateWithICCData
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextClearRect
__ CoreGraphics: _CGContextClipToMask
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextSetFillColorSpace
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetInterpolationQuality
__ CoreGraphics: _CGContextSetShadowWithColor
__ CoreGraphics: _CGImageCreateCopyWithColorSpace
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreMedia: _CMClockConvertHostTimeToSystemUnits
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMNotificationCenterAddListener
__ CoreMedia: _CMNotificationCenterGetDefaultLocalCenter
__ CoreMedia: _CMNotificationCenterRemoveListener
__ CoreMedia: _CMSyncConvertTime
__ CoreMedia: _CMTimeCopyAsDictionary
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimebaseGetEffectiveRate
__ CoreMedia: _CMTimebaseGetTimeAndRate
__ CoreMedia: _kCMTimeIndefinite
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeZero
__ CoreMedia: _kCMTimebaseNotification_EffectiveRateChanged
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSBundleRecord
__ CoreServices: _OBJC_CLASS_$_NSUserActivity
__ CoreUI: _OBJC_CLASS_$_CUINamedLayerStack
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSFileModificationDate
__ Foundation: _NSInvalidArchiveOperationException
__ Foundation: _NSInvalidUnarchiveOperationException
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSMapGet
__ Foundation: _NSMapInsert
__ Foundation: _NSMapRemove
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCachedURLResponse
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDateInterval
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPointerFunctions
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSProxy
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLCache
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLProtocol
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLResponse
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSURLSessionDataTask
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ Foundation: _OBJC_METACLASS_$_NSProxy
__ Foundation: _OBJC_METACLASS_$_NSSortDescriptor
__ Foundation: _OBJC_METACLASS_$_NSURLCache
__ Foundation: _OBJC_METACLASS_$_NSURLProtocol
__ HomeSharing: _HSGroupIDDidChangeNotification
__ HomeSharing: _HSHomeSharingLibraryDidBecomeUnavailableNotification
__ HomeSharing: _HSHomeSharingLibraryDidUpdateRevisionNumberNotification
__ HomeSharing: _HSHomeSharingLibraryKey
__ HomeSharing: _HSLibraryCacheDirectoryForIdentifier
__ HomeSharing: _HSLibraryCacheRootDirectory
__ HomeSharing: _OBJC_CLASS_$_HSAccountStore
__ HomeSharing: _OBJC_CLASS_$_HSArtworkRequest
__ HomeSharing: _OBJC_CLASS_$_HSAuthorizedDSIDsUpdateRequest
__ HomeSharing: _OBJC_CLASS_$_HSBrowser
__ HomeSharing: _OBJC_CLASS_$_HSCheckInRentalAssetRequest
__ HomeSharing: _OBJC_CLASS_$_HSCheckOutRentalAssetRequest
__ HomeSharing: _OBJC_CLASS_$_HSGetAuthorizedAccountsTokenRequest
__ HomeSharing: _OBJC_CLASS_$_HSIncrementRequest
__ HomeSharing: _OBJC_CLASS_$_HSItemDataRequest
__ HomeSharing: _OBJC_CLASS_$_HSSetPropertyRequest
__ HomeSharing: _OBJC_CLASS_$_HSSetRentalPlaybackStartDateRequest
__ IconServices: _OBJC_CLASS_$_ISSymbol
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceGetCount
__ ImageIO: _kCGImageSourceShouldCache
__ ImageIO: _kCGImageSourceSkipMetadata
__ ManagedConfiguration: _MCEffectiveSettingsChangedNotification
__ ManagedConfiguration: _MCFeatureAccountModificationAllowed
__ ManagedConfiguration: _MCFeatureExplicitContentAllowed
__ ManagedConfiguration: _MCFeatureITunesAllowed
__ ManagedConfiguration: _MCFeatureInAppPurchasesAllowed
__ ManagedConfiguration: _MCFeatureMaximumMoviesRating
__ ManagedConfiguration: _MCFeatureMaximumTVShowsRating
__ ManagedConfiguration: _MCFeatureMusicServiceAllowed
__ ManagedConfiguration: _MCFeatureMusicVideosAllowed
__ ManagedConfiguration: _MCFeatureRadioServiceAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MediaLibraryCore: __ZN6mlcore10ItemArtist11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore10RangeQuery8setRangeERKNS_5RangeE
__ MediaLibraryCore: __ZN6mlcore11EntityCache16setCacheDisabledEb
__ MediaLibraryCore: __ZN6mlcore11EntityCache29entityForClassAndPersistentIDEPNS_11EntityClassExNS_13PropertyCacheE
__ MediaLibraryCore: __ZN6mlcore11EntityCache31propertiesToFetchForEntityClassEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore11EntityCache34setPropertiesToFetchForEntityClassENSt3__16vectorIPNS_17ModelPropertyBaseENS1_9allocatorIS4_EEEEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore11EntityCacheC1ENSt3__110shared_ptrINS_11LibraryViewEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery10songsQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery11albumsQueryENSt3__110shared_ptrINS_9PredicateEEEb
__ MediaLibraryCore: __ZN6mlcore11EntityQuery11genresQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery11moviesQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery12artistsQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery12tvShowsQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery13podcastsQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery14composersQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery14playlistsQueryENSt3__110shared_ptrINS_9PredicateEEEb
__ MediaLibraryCore: __ZN6mlcore11EntityQuery14tvSeasonsQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery15tvEpisodesQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery18playlistItemsQueryENSt3__110shared_ptrINS_8PlaylistEEENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery19albumsForGenreQueryENSt3__110shared_ptrINS_5GenreEEENS2_INS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery20albumsForArtistQueryENSt3__110shared_ptrINS_6ArtistEEENS2_INS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery20podcastEpisodesQueryENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery21tvSeasonsForShowQueryENSt3__110shared_ptrINS_6TVShowEEENS2_INS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery22albumsForComposerQueryENSt3__110shared_ptrINS_8ComposerEEENS2_INS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery23playlistsForFolderQueryENSt3__110shared_ptrINS_8PlaylistEEENS2_INS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQuery28setIdentityPropertiesToFetchENSt3__16vectorIPNS_17ModelPropertyBaseENS1_9allocatorIS4_EEEE
__ MediaLibraryCore: __ZN6mlcore11EntityQueryC1EPNS_11EntityClassENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore11InPredicateINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1EPNS_13ModelPropertyIS7_EERKNS1_6vectorIS7_NS5_IS7_EEEE
__ MediaLibraryCore: __ZN6mlcore11InPredicateIiEC1EPNS_13ModelPropertyIiEERKNSt3__16vectorIiNS5_9allocatorIiEEEE
__ MediaLibraryCore: __ZN6mlcore11InPredicateIxEC1EPNS_13ModelPropertyIxEERKNSt3__16vectorIxNS5_9allocatorIxEEEE
__ MediaLibraryCore: __ZN6mlcore11LibraryView10setFiltersEj
__ MediaLibraryCore: __ZN6mlcore11LibraryView15viewWithLibraryERKNSt3__110shared_ptrINS_7LibraryEEEj
__ MediaLibraryCore: __ZN6mlcore11LibraryView22setContentRestrictionsERKNS_19ContentRestrictionsE
__ MediaLibraryCore: __ZN6mlcore11LibraryView32setFilterPredicateForEntityClassEPNS_11EntityClassENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore12PlaylistItem11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore13PropertyCacheC1ERKS0_
__ MediaLibraryCore: __ZN6mlcore14AnyInPredicateIxEC1ERKNSt3__16vectorIPNS_13ModelPropertyIxEENS2_9allocatorIS6_EEEERKNS3_IxNS7_IxEEEE
__ MediaLibraryCore: __ZN6mlcore14PodcastEpisode11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore14SortDescriptorC1EPNS_17ModelPropertyBaseENS_22SortDescriptorOrderingE
__ MediaLibraryCore: __ZN6mlcore14UnaryPredicateIiEC1EPNS_13ModelPropertyIiEENS_13UnaryOperatorE
__ MediaLibraryCore: __ZN6mlcore14UnaryPredicateIxEC1EPNS_13ModelPropertyIxEENS_13UnaryOperatorE
__ MediaLibraryCore: __ZN6mlcore15ItemPropertyBPMEv
__ MediaLibraryCore: __ZN6mlcore15PropertiesQuery18setSortDescriptorsERKNSt3__16vectorINS_14SortDescriptorENS1_9allocatorIS3_EEEE
__ MediaLibraryCore: __ZN6mlcore15PropertiesQuery20setPropertiesToFetchENSt3__16vectorIPNS_17ModelPropertyBaseENS1_9allocatorIS4_EEEE
__ MediaLibraryCore: __ZN6mlcore15PropertiesQueryC1EPNS_11EntityClassENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore15SearchPredicateC1EPNS_13ModelPropertyINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEES8_N13mediaplatform13UnicodeSearch9MatchTypeE
__ MediaLibraryCore: __ZN6mlcore16ItemPropertyYearEv
__ MediaLibraryCore: __ZN6mlcore16MultiEntityQuery21setViewForEntityClassENSt3__110shared_ptrINS_17DeviceLibraryViewEEEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore16MultiEntityQuery23setMultiSortDescriptorsERKNSt3__16vectorINS_19MultiSortDescriptorENS1_9allocatorIS3_EEEE
__ MediaLibraryCore: __ZN6mlcore16MultiEntityQuery26setPredicateForEntityClassENSt3__110shared_ptrINS_9PredicateEEEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore16MultiEntityQuery34setPropertiesToFetchForEntityClassENSt3__16vectorIPNS_17ModelPropertyBaseENS1_9allocatorIS4_EEEEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore16MultiEntityQueryC1Ev
__ MediaLibraryCore: __ZN6mlcore17AlbumPropertyYearEv
__ MediaLibraryCore: __ZN6mlcore17CreateOrPredicateENSt3__16vectorINS0_10shared_ptrINS_9PredicateEEENS0_9allocatorIS4_EEEE
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult11allEntitiesEv
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult13entityAtIndexEm
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult15idEntityAtIndexEm
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult23localizedSectionIndicesEv
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult36optionalLocalizedSectionIndicesRangeEv
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResult8sectionsEv
__ MediaLibraryCore: __ZN6mlcore17EntityQueryResultC1ENSt3__110shared_ptrINS_17DeviceLibraryViewEEEPNS_11EntityClassERKNS1_6vectorIPNS_17ModelPropertyBaseENS1_9allocatorIS9_EEEERKNS2_INS7_INS_13PropertyCacheENSA_ISF_EEEEEERKNS2_INS7_INS_7SectionENSA_ISL_EEEEEERKNS2_INS7_INS1_12basic_stringIcNS1_11char_traitsIcEENSA_IcEEEENSA_ISV_EEEEEENS_5RangeExNS2_INS_11EntityCacheEEE
__ MediaLibraryCore: __ZN6mlcore17GenrePropertyNameEv
__ MediaLibraryCore: __ZN6mlcore17ItemPropertyTitleEv
__ MediaLibraryCore: __ZN6mlcore17LanguageResourcesC1ERKNS_21LocalizedSectionsInfoERKNS_23LocalizedSortingDetailsERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEE
__ MediaLibraryCore: __ZN6mlcore17MoviePropertyInfoEv
__ MediaLibraryCore: __ZN6mlcore18AlbumPropertyOrderEv
__ MediaLibraryCore: __ZN6mlcore18AlbumPropertyTitleEv
__ MediaLibraryCore: __ZN6mlcore18ArtistPropertyNameEv
__ MediaLibraryCore: __ZN6mlcore18CreateAndPredicateENSt3__16vectorINS0_10shared_ptrINS_9PredicateEEENS0_9allocatorIS4_EEEE
__ MediaLibraryCore: __ZN6mlcore18CreateNotPredicateERKNSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore18GenrePropertyOrderEv
__ MediaLibraryCore: __ZN6mlcore18ItemPropertyLyricsEv
__ MediaLibraryCore: __ZN6mlcore18ItemPropertySyncIDEv
__ MediaLibraryCore: __ZN6mlcore18PersonPropertyNameEv
__ MediaLibraryCore: __ZN6mlcore19AlbumPropertySyncIDEv
__ MediaLibraryCore: __ZN6mlcore19ArtistPropertyOrderEv
__ MediaLibraryCore: __ZN6mlcore19ComparisonPredicateINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEC1EPNS_13ModelPropertyIS7_EENS_18ComparisonOperatorERKS7_NS_17ComparisonOptionsE
__ MediaLibraryCore: __ZN6mlcore19ComparisonPredicateIiEC1EPNS_13ModelPropertyIiEENS_18ComparisonOperatorERKiNS_17ComparisonOptionsE
__ MediaLibraryCore: __ZN6mlcore19ComparisonPredicateIxEC1EPNS_13ModelPropertyIxEENS_18ComparisonOperatorERKxNS_17ComparisonOptionsE
__ MediaLibraryCore: __ZN6mlcore19ContentRestrictions22setRestrictMusicVideosEb
__ MediaLibraryCore: __ZN6mlcore19ContentRestrictions23setRestrictedMoviesRankEi
__ MediaLibraryCore: __ZN6mlcore19ContentRestrictions24setRestrictedTVShowsRankEi
__ MediaLibraryCore: __ZN6mlcore19ContentRestrictions25setRestrictExplicitLyricsEb
__ MediaLibraryCore: __ZN6mlcore19ContentRestrictionsC1Ebbbii
__ MediaLibraryCore: __ZN6mlcore19ItemPropertyIsVideoEv
__ MediaLibraryCore: __ZN6mlcore19ItemPropertyStoreIDEv
__ MediaLibraryCore: __ZN6mlcore19MultiSortDescriptor25setPropertyForEntityClassEPNS_17ModelPropertyBaseEPNS_11EntityClassE
__ MediaLibraryCore: __ZN6mlcore19MultiSortDescriptorC1ENS_22SortDescriptorOrderingE
__ MediaLibraryCore: __ZN6mlcore20AlbumPropertyAppDataEv
__ MediaLibraryCore: __ZN6mlcore20AlbumPropertyFeedURLEv
__ MediaLibraryCore: __ZN6mlcore20AlbumPropertyStoreIDEv
__ MediaLibraryCore: __ZN6mlcore20ComposerPropertyNameEv
__ MediaLibraryCore: __ZN6mlcore20GenrePropertyHasNameEv
__ MediaLibraryCore: __ZN6mlcore20ItemPropertyFileSizeEv
__ MediaLibraryCore: __ZN6mlcore20ItemPropertyGroupingEv
__ MediaLibraryCore: __ZN6mlcore20ItemPropertyLocationEv
__ MediaLibraryCore: __ZN6mlcore20ItemPropertyStopTimeEv
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchQuery22setPerScopeResultLimitEm
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchQuery6cancelEv
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchQuery9setScopesERKNSt3__16vectorINS1_10shared_ptrINS_20LocalizedSearchScopeEEENS1_9allocatorIS5_EEEE
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchQueryC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchScopeC1EPNS_11EntityClassENSt3__110shared_ptrINS_9PredicateEEERKNS3_6vectorIPNS_17ModelPropertyBaseENS3_9allocatorIS9_EEEE
__ MediaLibraryCore: __ZN6mlcore20LocalizedSearchScopeC1ERKNSt3__16vectorINS1_10shared_ptrIS0_EENS1_9allocatorIS4_EEEE
__ MediaLibraryCore: __ZN6mlcore20PersonPropertyHandleEv
__ MediaLibraryCore: __ZN6mlcore20PlaylistPropertyNameEv
__ MediaLibraryCore: __ZN6mlcore21AlbumPropertyHasTitleEv
__ MediaLibraryCore: __ZN6mlcore21ArtistPropertyHasNameEv
__ MediaLibraryCore: __ZN6mlcore21ArtistPropertyStoreIDEv
__ MediaLibraryCore: __ZN6mlcore21ComposerPropertyOrderEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyCopyrightEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyDateAddedEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyKeepLocalEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyMediaTypeEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyStartTimeEv
__ MediaLibraryCore: __ZN6mlcore21ItemPropertyTotalTimeEv
__ MediaLibraryCore: __ZN6mlcore21LocalizedSectionsInfoC1ERKNSt3__16vectorINS_22LocalizedSectionHeaderENS1_9allocatorIS3_EEEERKNS2_INS1_12basic_stringIcNS1_11char_traitsIcEENS4_IcEEEENS4_ISD_EEEERKNS1_13unordered_mapISD_SD_NS1_4hashISD_EENS1_8equal_toISD_EENS4_INS1_4pairIKSD_SD_EEEEEERSO_
__ MediaLibraryCore: __ZN6mlcore21MoviePropertyIsRentalEv
__ MediaLibraryCore: __ZN6mlcore21PropertiesQueryResult10allResultsEv
__ MediaLibraryCore: __ZN6mlcore21PropertiesQueryResult16enumerateResultsERKNSt3__18functionIFvRKNS_13PropertyCacheERbEEE
__ MediaLibraryCore: __ZN6mlcore22AggregateFunctionQueryC1EPNS_11EntityClassENS0_17AggregateFunctionEPNS_17ModelPropertyBaseENSt3__110shared_ptrINS_9PredicateEEEb
__ MediaLibraryCore: __ZN6mlcore22AlbumPropertyCopyrightEv
__ MediaLibraryCore: __ZN6mlcore22AlbumPropertyItemCountEv
__ MediaLibraryCore: __ZN6mlcore22AlbumPropertyKeepLocalEv
__ MediaLibraryCore: __ZN6mlcore22GetForeignPropertyBaseEPNS_17ModelPropertyBaseES1_NSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore22ItemArtistPropertyNameEv
__ MediaLibraryCore: __ZN6mlcore22ItemPropertyDatePlayedEv
__ MediaLibraryCore: __ZN6mlcore22ItemPropertyDiscNumberEv
__ MediaLibraryCore: __ZN6mlcore22ItemPropertyIsExplicitEv
__ MediaLibraryCore: __ZN6mlcore22ItemPropertyTitleOrderEv
__ MediaLibraryCore: __ZN6mlcore22ItemPropertyUserRatingEv
__ MediaLibraryCore: __ZN6mlcore22LocalizedSectionHeaderC1EwwRKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERKNS1_13unordered_mapIS8_S8_NS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_S8_EEEEEE
__ MediaLibraryCore: __ZN6mlcore22PersonPropertyImageURLEv
__ MediaLibraryCore: __ZN6mlcore22PlaylistPropertySyncIDEv
__ MediaLibraryCore: __ZN6mlcore23AlbumPropertyArtistNameEv
__ MediaLibraryCore: __ZN6mlcore23AlbumPropertyIsPreOrderEv
__ MediaLibraryCore: __ZN6mlcore23ArtistPropertyItemCountEv
__ MediaLibraryCore: __ZN6mlcore23ComposerPropertyHasNameEv
__ MediaLibraryCore: __ZN6mlcore23ItemArtistPropertyOrderEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyAlbumSyncIDEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyCloudKVSKeyEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyEpisodeTypeEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyInMyLibraryEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyIsMusicShowEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyIsProtectedEv
__ MediaLibraryCore: __ZN6mlcore23ItemPropertyTrackNumberEv
__ MediaLibraryCore: __ZN6mlcore23LocalizedSortingDetailsC1ERKNSt3__16vectorINS1_12basic_stringItNS1_11char_traitsItEENS1_9allocatorItEEEENS6_IS8_EEEE
__ MediaLibraryCore: __ZN6mlcore23PlaylistPropertyIsOwnerEv
__ MediaLibraryCore: __ZN6mlcore23PlaylistPropertyIsSmartEv
__ MediaLibraryCore: __ZN6mlcore24ArtistPropertyAlbumCountEv
__ MediaLibraryCore: __ZN6mlcore24ItemPropertyAlbumStoreIDEv
__ MediaLibraryCore: __ZN6mlcore24ItemPropertyDateReleasedEv
__ MediaLibraryCore: __ZN6mlcore24ItemPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore24ItemPropertyStoreCloudIDEv
__ MediaLibraryCore: __ZN6mlcore24PlaylistPropertyIsHiddenEv
__ MediaLibraryCore: __ZN6mlcore24SmartPlaylistEntityCacheC1ENSt3__110shared_ptrINS_11LibraryViewEEE
__ MediaLibraryCore: __ZN6mlcore25AlbumPropertyDateReleasedEv
__ MediaLibraryCore: __ZN6mlcore25AlbumPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore25AlbumPropertySeasonNumberEv
__ MediaLibraryCore: __ZN6mlcore25GenrePropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore25ItemArtistPropertyHasNameEv
__ MediaLibraryCore: __ZN6mlcore25ItemArtistPropertyStoreIDEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertyClassicalWorkEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertyEpisodeSortIDEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertyHasBeenPlayedEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertyHomeSharingIDEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertyPlayCountUserEv
__ MediaLibraryCore: __ZN6mlcore25ItemPropertySkipCountUserEv
__ MediaLibraryCore: __ZN6mlcore25PlaylistPropertyKeepLocalEv
__ MediaLibraryCore: __ZN6mlcore25PlaylistPropertyNameOrderEv
__ MediaLibraryCore: __ZN6mlcore25TVShowPropertySeriesOrderEv
__ MediaLibraryCore: __ZN6mlcore26ArtistPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyDateDownloadedEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyHLSAssetTraitsEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyHasTrackNumberEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyItemArtistNameEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyRelativeVolumeEv
__ MediaLibraryCore: __ZN6mlcore26ItemPropertyStoreAccountIDEv
__ MediaLibraryCore: __ZN6mlcore26LocalizedSearchQueryResult20resultForSearchScopeENSt3__110shared_ptrINS_20LocalizedSearchScopeEEE
__ MediaLibraryCore: __ZN6mlcore26PersonPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore26TVShowPropertyEpisodeCountEv
__ MediaLibraryCore: __ZN6mlcore27AlbumPropertyDateDownloadedEv
__ MediaLibraryCore: __ZN6mlcore27ItemPropertyAlbumTrackCountEv
__ MediaLibraryCore: __ZN6mlcore27ItemPropertyHLSKeyServerURLEv
__ MediaLibraryCore: __ZN6mlcore27ItemPropertyKeepLocalStatusEv
__ MediaLibraryCore: __ZN6mlcore27ItemPropertyLongDescriptionEv
__ MediaLibraryCore: __ZN6mlcore27ItemPropertyStorePlaylistIDEv
__ MediaLibraryCore: __ZN6mlcore27PlaylistPropertyDateCreatedEv
__ MediaLibraryCore: __ZN6mlcore27PlaylistPropertyDescriptionEv
__ MediaLibraryCore: __ZN6mlcore27TVShowPropertyHasSeriesNameEv
__ MediaLibraryCore: __ZN6mlcore28AlbumPropertyAllCompilationsEv
__ MediaLibraryCore: __ZN6mlcore28AlbumPropertyDatePlayedLocalEv
__ MediaLibraryCore: __ZN6mlcore28AlbumPropertyKeepLocalStatusEv
__ MediaLibraryCore: __ZN6mlcore28ComposerPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore28ItemArtistPropertySeriesNameEv
__ MediaLibraryCore: __ZN6mlcore28ItemPropertyAssetStoreItemIDEv
__ MediaLibraryCore: __ZN6mlcore28ItemPropertyBaseLocationPathEv
__ MediaLibraryCore: __ZN6mlcore28ItemPropertyRemoteLocationIDEv
__ MediaLibraryCore: __ZN6mlcore28ItemPropertyStoreCloudStatusEv
__ MediaLibraryCore: __ZN6mlcore28PlaylistItemPropertyPositionEv
__ MediaLibraryCore: __ZN6mlcore28PlaylistPropertyDateModifiedEv
__ MediaLibraryCore: __ZN6mlcore28PlaylistPropertyIsSubscribedEv
__ MediaLibraryCore: __ZN6mlcore28PlaylistPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore28PlaylistPropertyStoreCloudIDEv
__ MediaLibraryCore: __ZN6mlcore28TVSeasonPropertyEpisodeCountEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyAlbumPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyClassicalMovementEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyDurationInSamplesEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyGenrePersistentIDEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyHasStreamingAssetEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyPurchaseHistoryIDEv
__ MediaLibraryCore: __ZN6mlcore29ItemPropertyStoreCloudAlbumIDEv
__ MediaLibraryCore: __ZN6mlcore29LocalizedSearchPropertyWeightEv
__ MediaLibraryCore: __ZN6mlcore29PlaylistPropertyCloudGlobalIDEv
__ MediaLibraryCore: __ZN6mlcore29PlaylistPropertyCloudIsPublicEv
__ MediaLibraryCore: __ZN6mlcore29PlaylistPropertyCloudShareURLEv
__ MediaLibraryCore: __ZN6mlcore29PlaylistPropertySmartIsFolderEv
__ MediaLibraryCore: __ZN6mlcore29PlaylistPropertySmartIsGeniusEv
__ MediaLibraryCore: __ZN6mlcore30AlbumPropertyGenrePersistentIDEv
__ MediaLibraryCore: __ZN6mlcore30ItemArtistPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore30ItemPropertyContentRatingLevelEv
__ MediaLibraryCore: __ZN6mlcore30ItemPropertyExcludeFromShuffleEv
__ MediaLibraryCore: __ZN6mlcore30ItemPropertyHLSAudioCapabilityEv
__ MediaLibraryCore: __ZN6mlcore30ItemPropertyHasCloudSyncSourceEv
__ MediaLibraryCore: __ZN6mlcore30PlaylistPropertyCloudIsVisibleEv
__ MediaLibraryCore: __ZN6mlcore30PlaylistPropertyDateDownloadedEv
__ MediaLibraryCore: __ZN6mlcore30PlaylistPropertyIsCuratorOwnedEv
__ MediaLibraryCore: __ZN6mlcore30TVEpisodePropertyEpisodeSortIDEv
__ MediaLibraryCore: __ZN6mlcore31AlbumPropertyArtistPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore31CloudKVSEntityPropertyPlayCountEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyCloudAssetAvailableEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyEpisodeSubSortOrderEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyIsMasteredForiTunesEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyPodcastExternalGUIDEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyStoreNeedsReportingEv
__ MediaLibraryCore: __ZN6mlcore31ItemPropertyVolumeNormalizationEv
__ MediaLibraryCore: __ZN6mlcore31PlaylistPropertyCloudAuthorNameEv
__ MediaLibraryCore: __ZN6mlcore31PlaylistPropertyDatePlayedLocalEv
__ MediaLibraryCore: __ZN6mlcore31PlaylistPropertyKeepLocalStatusEv
__ MediaLibraryCore: __ZN6mlcore32AlbumPropertyLatestItemDateAddedEv
__ MediaLibraryCore: __ZN6mlcore32AlbumPropertyVolumeNormalizationEv
__ MediaLibraryCore: __ZN6mlcore32GenrePropertyLatestItemDateAddedEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyComposerPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyGaplessEncodingDelayEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyGaplessEncodingDrainEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyGaplessHeuristicInfoEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyHLSKeyCertificateURLEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyHLSKeyServerProtocolEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyHasNonPurgeableAssetEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyRememberBookmarkTimeEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyReportingStoreItemIDEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyShowComposerAsArtistEv
__ MediaLibraryCore: __ZN6mlcore32ItemPropertyStoreLyricsAvailableEv
__ MediaLibraryCore: __ZN6mlcore32PlaylistItemPropertyPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore32PlaylistPropertyCloudVersionHashEv
__ MediaLibraryCore: __ZN6mlcore33ArtistPropertyLatestItemDateAddedEv
__ MediaLibraryCore: __ZN6mlcore33ItemPropertyAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore33ItemPropertyFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore33ItemPropertyHasLoFiStreamingAssetEv
__ MediaLibraryCore: __ZN6mlcore33ItemPropertyIsStoreRedownloadableEv
__ MediaLibraryCore: __ZN6mlcore33PlaylistCategoryTypeIsPersonalMixEv
__ MediaLibraryCore: __ZN6mlcore33PlaylistPropertyCloudAuthorHandleEv
__ MediaLibraryCore: __ZN6mlcore34AlbumPropertyContainsClassicalWorkEv
__ MediaLibraryCore: __ZN6mlcore34CloudKVSEntityPropertyBookmarkTimeEv
__ MediaLibraryCore: __ZN6mlcore34ItemPropertyClassicalMovementCountEv
__ MediaLibraryCore: __ZN6mlcore34ItemPropertyEpisodeTypeDisplayNameEv
__ MediaLibraryCore: __ZN6mlcore34ItemPropertyGaplessLastFrameResyncEv
__ MediaLibraryCore: __ZN6mlcore34ItemPropertyItemArtistPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore34ItemPropertyLibraryLyricsAvailableEv
__ MediaLibraryCore: __ZN6mlcore34PlaylistPropertyCloudAuthorStoreIDEv
__ MediaLibraryCore: __ZN6mlcore34PlaylistPropertyShouldDisplayIndexEv
__ MediaLibraryCore: __ZN6mlcore35AlbumPropertyMaximumItemTrackNumberEv
__ MediaLibraryCore: __ZN6mlcore35ArtistPropertyAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore35ArtistPropertyFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore35CloudKVSEntityPropertyHasBeenPlayedEv
__ MediaLibraryCore: __ZN6mlcore35ComposerPropertyLatestItemDateAddedEv
__ MediaLibraryCore: __ZN6mlcore35ItemPropertyAlbumArtistPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore35ItemPropertyClassicalMovementNumberEv
__ MediaLibraryCore: __ZN6mlcore35ItemPropertyIsArtistUploadedContentEv
__ MediaLibraryCore: __ZN6mlcore35ItemPropertySubscriptionStoreItemIDEv
__ MediaLibraryCore: __ZN6mlcore35TVSeasonPropertyLatestItemDateAddedEv
__ MediaLibraryCore: __ZN6mlcore36PlaylistItemPropertyItemPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore37ItemPropertyHomeSharingAssetAvailableEv
__ MediaLibraryCore: __ZN6mlcore37ItemPropertyMatchRedownloadParametersEv
__ MediaLibraryCore: __ZN6mlcore37ItemPropertyStorePlaybackEndpointTypeEv
__ MediaLibraryCore: __ZN6mlcore37ItemPropertyTimeSyncedLyricsAvailableEv
__ MediaLibraryCore: __ZN6mlcore37PlaylistPropertyAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore37PlaylistPropertyFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore38ItemPropertyFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore39ItemArtistPropertyAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore39ItemArtistPropertyFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore39PlaylistPropertyCloudUniversalLibraryIDEv
__ MediaLibraryCore: __ZN6mlcore39PlaylistPropertyIsTracklistUserEditableEv
__ MediaLibraryCore: __ZN6mlcore40AlbumPropertyRepresentativeItemMediaTypeEv
__ MediaLibraryCore: __ZN6mlcore40ArtistPropertyFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore40ItemPropertyStoreCloudUniversalLibraryIDEv
__ MediaLibraryCore: __ZN6mlcore40TVSeasonPropertyLatestItemDateDownloadedEv
__ MediaLibraryCore: __ZN6mlcore41AlbumPropertyClassicalExperienceAvailableEv
__ MediaLibraryCore: __ZN6mlcore41PlaylistItemPropertyAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore41PlaylistItemPropertyFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore41PlaylistPropertyExternalVendorDisplayNameEv
__ MediaLibraryCore: __ZN6mlcore41TVEpisodePropertyAvailableScreenshotTokenEv
__ MediaLibraryCore: __ZN6mlcore41TVEpisodePropertyFetchableScreenshotTokenEv
__ MediaLibraryCore: __ZN6mlcore42ArtistPropertyClassicalExperienceAvailableEv
__ MediaLibraryCore: __ZN6mlcore42PlaylistPropertyFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore43AlbumPropertyRepresentativeItemPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore43AlbumPropertyRepresentativeItemShowSortTypeEv
__ MediaLibraryCore: __ZN6mlcore44ArtistPropertyRepresentativeItemPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore44ItemArtistPropertyFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore45ContainerItemPersonPropertyPersonPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore45PlaylistPropertyIsSubscribedAndNotPersonalMixEv
__ MediaLibraryCore: __ZN6mlcore46ItemArtistPropertyClassicalExperienceAvailableEv
__ MediaLibraryCore: __ZN6mlcore46PlaylistItemPropertyFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore46TVEpisodePropertyFetchableScreenshotSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore47ItemPropertyPurchaseHistoryRedownloadParametersEv
__ MediaLibraryCore: __ZN6mlcore48ItemArtistPropertyRepresentativeItemPersistentIDEv
__ MediaLibraryCore: __ZN6mlcore4Item11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore52AlbumPropertyRepresentativeItemAvailableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore52AlbumPropertyRepresentativeItemCollectionDescriptionEv
__ MediaLibraryCore: __ZN6mlcore52AlbumPropertyRepresentativeItemFetchableArtworkTokenEv
__ MediaLibraryCore: __ZN6mlcore57AlbumPropertyRepresentativeItemFetchableArtworkSourceTypeEv
__ MediaLibraryCore: __ZN6mlcore5Album11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore5Genre11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore5GenreC1Ex
__ MediaLibraryCore: __ZN6mlcore5Movie11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore5Query12setPredicateENSt3__110shared_ptrINS_9PredicateEEE
__ MediaLibraryCore: __ZN6mlcore6Artist11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore6ArtistC1Ex
__ MediaLibraryCore: __ZN6mlcore6Entity13propertyCacheEv
__ MediaLibraryCore: __ZN6mlcore6Person11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore6TVShow11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore6TVShowC1Ex
__ MediaLibraryCore: __ZN6mlcore7Library13createLibraryERKN13mediaplatform13ContentBundleENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKNS_17LanguageResourcesE
__ MediaLibraryCore: __ZN6mlcore7Podcast11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore7SectionC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_5RangeEi
__ MediaLibraryCore: __ZN6mlcore8Composer11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore8ComposerC1Ex
__ MediaLibraryCore: __ZN6mlcore8Playlist11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore8PlaylistC1Ex
__ MediaLibraryCore: __ZN6mlcore8TVSeason11EntityClassEv
__ MediaLibraryCore: __ZN6mlcore9TVEpisode11EntityClassEv
__ MediaLibraryCore: __ZNK6mlcore10MediaErrorcvbEv
__ MediaLibraryCore: __ZNK6mlcore11LibraryView29filterPredicateForEntityClassEPNS_11EntityClassE
__ MediaLibraryCore: __ZNK6mlcore11LibraryView7filtersEv
__ MediaLibraryCore: __ZNK6mlcore11LibraryView7libraryEv
__ MediaLibraryCore: __ZNK6mlcore11QueryResult5errorEv
__ MediaLibraryCore: __ZNK6mlcore13PropertyCache19hasValueForPropertyEPNS_17ModelPropertyBaseE
__ MediaLibraryCore: __ZNK6mlcore14SortDescriptor8orderingEv
__ MediaLibraryCore: __ZNK6mlcore14SortDescriptor8propertyEv
__ MediaLibraryCore: __ZNK6mlcore17EntityQueryResult11entityCacheEv
__ MediaLibraryCore: __ZNK6mlcore17EntityQueryResult11entityCountEv
__ MediaLibraryCore: __ZNK6mlcore17EntityQueryResult19persistentIDAtIndexEm
__ MediaLibraryCore: __ZNK6mlcore28AggregateFunctionQueryResult5valueEv
__ MediaLibraryCore: __ZNK6mlcore5Query11entityClassEv
__ MediaLibraryCore: __ZNK6mlcore5Query9predicateEv
__ MediaLibraryCore: __ZNK6mlcore7Section12sectionIndexEv
__ MediaLibraryCore: __ZNK6mlcore7Section14localizedTitleEv
__ MediaLibraryCore: __ZNK6mlcore7Section5rangeEv
__ MediaLibraryCore: __ZTIN6mlcore11EntityQueryE
__ MediaLibraryCore: __ZTIN6mlcore17EntityQueryResultE
__ MediaLibraryCore: __ZTIN6mlcore23PlaylistItemEntityQueryE
__ MediaLibraryCore: __ZTIN6mlcore6EntityE
__ MediaLibraryCore: __ZTIN6mlcore8PlaylistE
__ MediaLibraryCore: __ZTVN6mlcore10MediaErrorE
__ MediaLibraryCore: __ZTVN6mlcore11EntityCacheE
__ MediaLibraryCore: __ZTVN6mlcore13PropertyCacheE
__ MediaLibraryCore: __ZTVN6mlcore14SortDescriptorE
__ MediaLibraryCore: __ZTVN6mlcore19MultiSortDescriptorE
__ MediaLibraryCore: __ZTVN6mlcore24SmartPlaylistEntityCacheE
__ MediaPlatform: __ZN13mediaplatform13ContentBundleC1ERKNS_8FilePathES3_S3_RKNSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEE
__ MediaPlatform: __ZN13mediaplatform13FormatOptionsC1EPPKc
__ MediaPlatform: __ZN13mediaplatform14ErrorConditionC1ERKS0_
__ MediaPlatform: __ZN13mediaplatform14ErrorConditionD1Ev
__ MediaPlatform: __ZN13mediaplatform17UTF8ToUTF16StringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ MediaPlatform: __ZN13mediaplatform19StringToUCharStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ MediaPlatform: __ZN13mediaplatform21_AssertImplementationENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_S6_iS6_
__ MediaPlatform: __ZN13mediaplatform25CopyFormatSectionToResultEPKcRNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEmmb
__ MediaPlatform: __ZN13mediaplatform4DataC1Ev
__ MediaPlatform: __ZN13mediaplatform4DataD1Ev
__ MediaPlatform: __ZN13mediaplatform4DataaSEOS0_
__ MediaPlatform: __ZN13mediaplatform4DataaSERKS0_
__ MediaPlatform: __ZN13mediaplatform8FilePathC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
__ MediaPlatform: __ZNK13mediaplatform17DatabaseTableBase4nameEv
__ MediaPlatform: __ZNK13mediaplatform4Data5bytesEv
__ MediaPlatform: __ZNK13mediaplatform4Data6lengthEv
__ MediaPlatform: __ZTVN13mediaplatform8FilePathE
__ MediaRemote: _MRAVEndpointAddOutputDevices
__ MediaRemote: _MRAVEndpointCanModifyGroupMembership
__ MediaRemote: _MRAVEndpointCopyLocalizedName
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointCopyUniqueIdentifier
__ MediaRemote: _MRAVEndpointGetClass
__ MediaRemote: _MRAVEndpointGetDesignatedGroupLeader
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVEndpointGetLocalEndpoint
__ MediaRemote: _MRAVEndpointGetOutputDeviceVolume
__ MediaRemote: _MRAVEndpointGetOutputDeviceVolumeControlCapabilities
__ MediaRemote: _MRAVEndpointGetVolume
__ MediaRemote: _MRAVEndpointGetVolumeControlCapabilities
__ MediaRemote: _MRAVEndpointIsLocalEndpoint
__ MediaRemote: _MRAVEndpointIsProxyGroupPlayer
__ MediaRemote: _MRAVEndpointRemoveOutputDevicesWithInitiator
__ MediaRemote: _MRAVEndpointResolveActiveSystemEndpoint
__ MediaRemote: _MRAVEndpointResolveActiveSystemEndpointWithType
__ MediaRemote: _MRAVEndpointSetOutputDeviceVolume
__ MediaRemote: _MRAVEndpointSetVolume
__ MediaRemote: _MRAVEndpointUpdateActiveSystemEndpointWithReason
__ MediaRemote: _MRAVOutputContextCopyOutputDevices
__ MediaRemote: _MRAVOutputContextCopyPredictedOutputDevice
__ MediaRemote: _MRAVOutputContextCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputContextCreateRoutingContext
__ MediaRemote: _MRAVOutputContextGetSharedAudioPresentationContext
__ MediaRemote: _MRAVOutputContextRemoveOutputDevices
__ MediaRemote: _MRAVOutputContextResetPredictedOutputDevice
__ MediaRemote: _MRAVOutputContextSetOutputDevicesWithInitiator
__ MediaRemote: _MRAVOutputDeviceAllowsHeadTrackedSpatialAudio
__ MediaRemote: _MRAVOutputDeviceCanAccessRemoteAssets
__ MediaRemote: _MRAVOutputDeviceCanFetchMediaDataFromSender
__ MediaRemote: _MRAVOutputDeviceCanPlayEncryptedProgressiveDownloadAssets
__ MediaRemote: _MRAVOutputDeviceCopyGroupIdentifier
__ MediaRemote: _MRAVOutputDeviceCopyLocalDeviceLocalizedName
__ MediaRemote: _MRAVOutputDeviceCopyLogicalDeviceID
__ MediaRemote: _MRAVOutputDeviceCopyModelID
__ MediaRemote: _MRAVOutputDeviceCopyModelSpecificInformation
__ MediaRemote: _MRAVOutputDeviceCopyName
__ MediaRemote: _MRAVOutputDeviceCopyPlayingPairedDeviceName
__ MediaRemote: _MRAVOutputDeviceCopySourceInfo
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceCreateFromAVOutputDevice
__ MediaRemote: _MRAVOutputDeviceGetBatteryLevel
__ MediaRemote: _MRAVOutputDeviceGetSubtype
__ MediaRemote: _MRAVOutputDeviceGetType
__ MediaRemote: _MRAVOutputDeviceHasBatteryLevel
__ MediaRemote: _MRAVOutputDeviceIsGroupLeader
__ MediaRemote: _MRAVOutputDeviceIsGroupable
__ MediaRemote: _MRAVOutputDeviceIsLocalDevice
__ MediaRemote: _MRAVOutputDeviceIsPickedOnPairedDevice
__ MediaRemote: _MRAVOutputDeviceIsProxyGroupPlayer
__ MediaRemote: _MRAVOutputDeviceIsVolumeControlAvailable
__ MediaRemote: _MRAVOutputDevicePresentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
__ MediaRemote: _MRAVOutputDeviceRequiresAuthorization
__ MediaRemote: _MRAVOutputDeviceSourceInfoMultipleBuiltInDevices
__ MediaRemote: _MRAVOutputDeviceSupportsBluetoothSharing
__ MediaRemote: _MRAVOutputDeviceSupportsExternalScreen
__ MediaRemote: _MRAVOutputDeviceSupportsHeadTrackedSpatialAudio
__ MediaRemote: _MRAVReconnaissanceSessionBeginSearch
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithEndpointFeatures
__ MediaRemote: _MRAVRouteQueryCreate
__ MediaRemote: _MRAVRouteQuerySetRouteUID
__ MediaRemote: _MRApplicationActivityBegin
__ MediaRemote: _MRApplicationActivityCreate
__ MediaRemote: _MRApplicationActivityEnd
__ MediaRemote: _MRComputeBaseRouteUID
__ MediaRemote: _MRContentItemCopy
__ MediaRemote: _MRContentItemCopyAlbumYear
__ MediaRemote: _MRContentItemCopyAuxiliaryNowPlayingInfo
__ MediaRemote: _MRContentItemCopyCollectionInfo
__ MediaRemote: _MRContentItemCopyDeviceSpecificUserInfo
__ MediaRemote: _MRContentItemCopyNowPlayingInfo
__ MediaRemote: _MRContentItemCopyUserInfo
__ MediaRemote: _MRContentItemCopyWithIdentifier
__ MediaRemote: _MRContentItemCreate
__ MediaRemote: _MRContentItemCreateExternalRepresentation
__ MediaRemote: _MRContentItemCreateFromExternalRepresentation
__ MediaRemote: _MRContentItemCreateSkeletonFrom
__ MediaRemote: _MRContentItemGetAlbumArtistName
__ MediaRemote: _MRContentItemGetAlbumName
__ MediaRemote: _MRContentItemGetArtworkIdentifier
__ MediaRemote: _MRContentItemGetArtworkURL
__ MediaRemote: _MRContentItemGetArtworkURLTemplates
__ MediaRemote: _MRContentItemGetAvailableLanguageOptions
__ MediaRemote: _MRContentItemGetCollectionIdentifier
__ MediaRemote: _MRContentItemGetComposer
__ MediaRemote: _MRContentItemGetContentIdentifier
__ MediaRemote: _MRContentItemGetCurrentLanguageOptions
__ MediaRemote: _MRContentItemGetDefaultPlaybackRate
__ MediaRemote: _MRContentItemGetDirectorName
__ MediaRemote: _MRContentItemGetDiscNumber
__ MediaRemote: _MRContentItemGetDuration
__ MediaRemote: _MRContentItemGetEditingStyleFlags
__ MediaRemote: _MRContentItemGetElapsedTime
__ MediaRemote: _MRContentItemGetElapsedTimeTimestamp
__ MediaRemote: _MRContentItemGetEpisodeNumber
__ MediaRemote: _MRContentItemGetEpisodeType
__ MediaRemote: _MRContentItemGetGenre
__ MediaRemote: _MRContentItemGetHasArtworkData
__ MediaRemote: _MRContentItemGetHasElapsedTime
__ MediaRemote: _MRContentItemGetHasInfo
__ MediaRemote: _MRContentItemGetHasLanguageOptions
__ MediaRemote: _MRContentItemGetHasLyrics
__ MediaRemote: _MRContentItemGetHasMetadata
__ MediaRemote: _MRContentItemGetITunesStoreAlbumIdentifier
__ MediaRemote: _MRContentItemGetITunesStoreArtistIdentifier
__ MediaRemote: _MRContentItemGetITunesStoreIdentifier
__ MediaRemote: _MRContentItemGetITunesStoreSubscriptionIdentifier
__ MediaRemote: _MRContentItemGetIdentifier
__ MediaRemote: _MRContentItemGetInfo
__ MediaRemote: _MRContentItemGetIsAdvertisement
__ MediaRemote: _MRContentItemGetIsAlwaysLive
__ MediaRemote: _MRContentItemGetIsContainer
__ MediaRemote: _MRContentItemGetIsExplicitItem
__ MediaRemote: _MRContentItemGetIsLoading
__ MediaRemote: _MRContentItemGetIsPlayable
__ MediaRemote: _MRContentItemGetIsSteerable
__ MediaRemote: _MRContentItemGetIsStreamingContent
__ MediaRemote: _MRContentItemGetLegacyUniqueIdentifier
__ MediaRemote: _MRContentItemGetLocalizedContentRating
__ MediaRemote: _MRContentItemGetLocalizedDurationString
__ MediaRemote: _MRContentItemGetLyrics
__ MediaRemote: _MRContentItemGetMediaSubType
__ MediaRemote: _MRContentItemGetMediaType
__ MediaRemote: _MRContentItemGetNumberOfSections
__ MediaRemote: _MRContentItemGetPlayCount
__ MediaRemote: _MRContentItemGetPlaybackProgress
__ MediaRemote: _MRContentItemGetPlaybackRate
__ MediaRemote: _MRContentItemGetPlaylistType
__ MediaRemote: _MRContentItemGetProfileIdentifier
__ MediaRemote: _MRContentItemGetRadioStationName
__ MediaRemote: _MRContentItemGetRadioStationString
__ MediaRemote: _MRContentItemGetRadioStationType
__ MediaRemote: _MRContentItemGetReleaseDate
__ MediaRemote: _MRContentItemGetSeasonNumber
__ MediaRemote: _MRContentItemGetSections
__ MediaRemote: _MRContentItemGetSeriesName
__ MediaRemote: _MRContentItemGetServiceIdentifier
__ MediaRemote: _MRContentItemGetStartTime
__ MediaRemote: _MRContentItemGetSubtitle
__ MediaRemote: _MRContentItemGetTitle
__ MediaRemote: _MRContentItemGetTotalDiscCount
__ MediaRemote: _MRContentItemGetTotalTrackCount
__ MediaRemote: _MRContentItemGetTrackArtistName
__ MediaRemote: _MRContentItemGetTrackNumber
__ MediaRemote: _MRContentItemHasPlaybackRate
__ MediaRemote: _MRContentItemMerge
__ MediaRemote: _MRContentItemSetAlbumArtistName
__ MediaRemote: _MRContentItemSetAlbumName
__ MediaRemote: _MRContentItemSetAlbumYear
__ MediaRemote: _MRContentItemSetArtworkData
__ MediaRemote: _MRContentItemSetArtworkDataSize
__ MediaRemote: _MRContentItemSetArtworkIdentifier
__ MediaRemote: _MRContentItemSetArtworkMIMEType
__ MediaRemote: _MRContentItemSetArtworkURL
__ MediaRemote: _MRContentItemSetArtworkURLTemplates
__ MediaRemote: _MRContentItemSetAvailableLanguageOptions
__ MediaRemote: _MRContentItemSetCollectionIdentifier
__ MediaRemote: _MRContentItemSetCollectionInfo
__ MediaRemote: _MRContentItemSetComposer
__ MediaRemote: _MRContentItemSetContentIdentifier
__ MediaRemote: _MRContentItemSetCurrentLanguageOptions
__ MediaRemote: _MRContentItemSetDefaultPlaybackRate
__ MediaRemote: _MRContentItemSetDeviceSpecificUserInfo
__ MediaRemote: _MRContentItemSetDirectorName
__ MediaRemote: _MRContentItemSetDiscNumber
__ MediaRemote: _MRContentItemSetDuration
__ MediaRemote: _MRContentItemSetEditingStyleFlags
__ MediaRemote: _MRContentItemSetElapsedTime
__ MediaRemote: _MRContentItemSetElapsedTimeTimestamp
__ MediaRemote: _MRContentItemSetEpisodeNumber
__ MediaRemote: _MRContentItemSetEpisodeType
__ MediaRemote: _MRContentItemSetExplicitItem
__ MediaRemote: _MRContentItemSetGenre
__ MediaRemote: _MRContentItemSetHasArtworkData
__ MediaRemote: _MRContentItemSetHasInfo
__ MediaRemote: _MRContentItemSetHasLanguageOptions
__ MediaRemote: _MRContentItemSetHasLyrics
__ MediaRemote: _MRContentItemSetITunesStoreAlbumIdentifier
__ MediaRemote: _MRContentItemSetITunesStoreArtistIdentifier
__ MediaRemote: _MRContentItemSetITunesStoreIdentifier
__ MediaRemote: _MRContentItemSetITunesStoreSubscriptionIdentifier
__ MediaRemote: _MRContentItemSetInfo
__ MediaRemote: _MRContentItemSetIsAdvertisement
__ MediaRemote: _MRContentItemSetIsAlwaysLive
__ MediaRemote: _MRContentItemSetIsContainer
__ MediaRemote: _MRContentItemSetIsLoading
__ MediaRemote: _MRContentItemSetIsSteerable
__ MediaRemote: _MRContentItemSetIsStreamingContent
__ MediaRemote: _MRContentItemSetLegacyUniqueIdentifier
__ MediaRemote: _MRContentItemSetLocalizedContentRating
__ MediaRemote: _MRContentItemSetLocalizedDurationString
__ MediaRemote: _MRContentItemSetLyrics
__ MediaRemote: _MRContentItemSetMediaSubType
__ MediaRemote: _MRContentItemSetMediaType
__ MediaRemote: _MRContentItemSetNowPlayingInfo
__ MediaRemote: _MRContentItemSetNumberOfSections
__ MediaRemote: _MRContentItemSetPlayCount
__ MediaRemote: _MRContentItemSetPlayable
__ MediaRemote: _MRContentItemSetPlaybackProgress
__ MediaRemote: _MRContentItemSetPlaybackRate
__ MediaRemote: _MRContentItemSetPlaylistType
__ MediaRemote: _MRContentItemSetProfileIdentifier
__ MediaRemote: _MRContentItemSetRadioStationName
__ MediaRemote: _MRContentItemSetRadioStationString
__ MediaRemote: _MRContentItemSetRadioStationType
__ MediaRemote: _MRContentItemSetReleaseDate
__ MediaRemote: _MRContentItemSetSeasonNumber
__ MediaRemote: _MRContentItemSetSections
__ MediaRemote: _MRContentItemSetSeriesName
__ MediaRemote: _MRContentItemSetServiceIdentifier
__ MediaRemote: _MRContentItemSetStartTime
__ MediaRemote: _MRContentItemSetSubtitle
__ MediaRemote: _MRContentItemSetTitle
__ MediaRemote: _MRContentItemSetTotalDiscCount
__ MediaRemote: _MRContentItemSetTotalTrackCount
__ MediaRemote: _MRContentItemSetTrackArtistName
__ MediaRemote: _MRContentItemSetTrackNumber
__ MediaRemote: _MRContentItemSetUserInfo
__ MediaRemote: _MRExternalDeviceConnectionCorrelationIDUserInfoKey
__ MediaRemote: _MRExternalDeviceConnectionReasonUserInfoKey
__ MediaRemote: _MRExternalDeviceCopyCustomOrigin
__ MediaRemote: _MRExternalDeviceCopyName
__ MediaRemote: _MRExternalDeviceCopyUniqueIdentifier
__ MediaRemote: _MRExternalDeviceGetConnectionState
__ MediaRemote: _MRExternalDeviceIsConnected
__ MediaRemote: _MRExternalDeviceSendButtonEvent
__ MediaRemote: _MRExternalDeviceSendCustomData
__ MediaRemote: _MRLanguageOptionCopyCharacteristics
__ MediaRemote: _MRLanguageOptionCopyDisplayName
__ MediaRemote: _MRLanguageOptionCopyIdentifier
__ MediaRemote: _MRLanguageOptionCopyLanguageTag
__ MediaRemote: _MRLanguageOptionCreate
__ MediaRemote: _MRLanguageOptionCreateExternalRepresentation
__ MediaRemote: _MRLanguageOptionCreateFromExternalRepresentation
__ MediaRemote: _MRLanguageOptionGetType
__ MediaRemote: _MRLanguageOptionGroupCopyLanguageOptions
__ MediaRemote: _MRLanguageOptionGroupCreate
__ MediaRemote: _MRLanguageOptionGroupGetAllowEmptySelection
__ MediaRemote: _MRLanguageOptionGroupGetDefaultLanguageOption
__ MediaRemote: _MRLanguageOptionGroupsCreateExternalRepresentation
__ MediaRemote: _MRLanguageOptionIsAutomaticLanguageOptionForType
__ MediaRemote: _MRLanguageOptionIsEqualToLanguageOption
__ MediaRemote: _MRLanguageOptionsCreateExternalRepresentation
__ MediaRemote: _MRLyricsEventGetEndDate
__ MediaRemote: _MRLyricsEventGetStartDate
__ MediaRemote: _MRLyricsEventGetToken
__ MediaRemote: _MRLyricsItemCreate
__ MediaRemote: _MRLyricsItemGetLyrics
__ MediaRemote: _MRLyricsItemGetToken
__ MediaRemote: _MRLyricsItemIsUserProvided
__ MediaRemote: _MRLyricsItemTokenCreate
__ MediaRemote: _MRLyricsItemTokenGetIdentifier
__ MediaRemote: _MRLyricsItemTokenGetUserInfo
__ MediaRemote: _MRMediaRemoteAddCommandHandlerForPlayer
__ MediaRemote: _MRMediaRemoteCopyBrowsableContentAPIMaskDescription
__ MediaRemote: _MRMediaRemoteCopyCommandDescription
__ MediaRemote: _MRMediaRemoteCopyCommandHandlerStatusDescription
__ MediaRemote: _MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID
__ MediaRemote: _MRMediaRemoteCopyPendingCommands
__ MediaRemote: _MRMediaRemoteCreateError
__ MediaRemote: _MRMediaRemoteDismissMediaControlsCommand
__ MediaRemote: _MRMediaRemoteErrorIsInformational
__ MediaRemote: _MRMediaRemoteFindAndPickRoute
__ MediaRemote: _MRMediaRemoteFinishedPlaybackInitialization
__ MediaRemote: _MRMediaRemoteGetExternalScreenType
__ MediaRemote: _MRMediaRemoteGetNowPlayingClient
__ MediaRemote: _MRMediaRemoteGetPickedRouteHasVolumeControl
__ MediaRemote: _MRMediaRemoteInvalidateBrowsableContent
__ MediaRemote: _MRMediaRemoteIsMusicAppInstalled
__ MediaRemote: _MRMediaRemoteNowPlayingWakePlayerServiceProcess
__ MediaRemote: _MRMediaRemotePickedRouteVolumeControlCapabilitiesCopyDescription
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddContentItemArtworkCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddContentItemInfoCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddContentItemLanguageOptionsCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddContentItemLyricsCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddContentItemMetadataCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddCreateChildContentItemCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddCreateContentItemForIdentifierCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceAddCreatePlaybackQueueForRequestCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceContentItemChangedWithRequestForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceContentItemsChangedForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceInvalidateWithPlaybackQueueForPlayer
__ MediaRemote: _MRMediaRemotePlaybackQueueDataSourceRemoveCallbackForPlayer
__ MediaRemote: _MRMediaRemotePlaybackSessionSetMigrateBeginCallback
__ MediaRemote: _MRMediaRemotePlaybackSessionSetMigrateEndCallback
__ MediaRemote: _MRMediaRemotePlaybackSessionSetRequestCallback
__ MediaRemote: _MRMediaRemotePostDelayedNotification
__ MediaRemote: _MRMediaRemotePresentMediaControlsCommand
__ MediaRemote: _MRMediaRemotePresentMediaControlsLanguageOptionsCommand
__ MediaRemote: _MRMediaRemotePrewarmMediaControlsCommand
__ MediaRemote: _MRMediaRemoteRemoveCommandHandlerBlockForPlayer
__ MediaRemote: _MRMediaRemoteRemovePlayer
__ MediaRemote: _MRMediaRemoteSendCommandToApp
__ MediaRemote: _MRMediaRemoteSetBeginLyricsEventCallbackForPlayer
__ MediaRemote: _MRMediaRemoteSetBrowsableContentEndpoint
__ MediaRemote: _MRMediaRemoteSetCanBeNowPlayingApplication
__ MediaRemote: _MRMediaRemoteSetCanBeNowPlayingForPlayer
__ MediaRemote: _MRMediaRemoteSetDefaultSupportedCommands
__ MediaRemote: _MRMediaRemoteSetEndLyricsEventCallbackForPlayer
__ MediaRemote: _MRMediaRemoteSetNowPlayingInfoForPlayer
__ MediaRemote: _MRMediaRemoteSetNowPlayingPlayer
__ MediaRemote: _MRMediaRemoteSetNowPlayingPlayerIfPossible
__ MediaRemote: _MRMediaRemoteSetPlaybackStateForPlayer
__ MediaRemote: _MRMediaRemoteSetSupportedBrowsableContentAPIs
__ MediaRemote: _MRMediaRemoteSetSupportedCommandsForPlayer
__ MediaRemote: _MRMediaRemoteSetWantsExternalScreenTypeChangeNotifications
__ MediaRemote: _MRMediaRemoteSetWantsVolumeControlNotifications
__ MediaRemote: _MRMediaRemoteSystemMediaApplicationIsRunning
__ MediaRemote: _MRMediaRemoteSystemMediaApplicationWake
__ MediaRemote: _MRMediaRemoteUnpickAirPlayAVRoutes
__ MediaRemote: _MRMediaRemoteUpdateBrowsableContentItems
__ MediaRemote: _MRMediaRemoteUpdateClientProperties
__ MediaRemote: _MRMediaRemoteUpdateNowPlayingIdentifiers
__ MediaRemote: _MRNowPlayingClientGetBundleIdentifier
__ MediaRemote: _MRNowPlayingClientSetParentAppBundleIdentifier
__ MediaRemote: _MRNowPlayingPlayerPathGetClient
__ MediaRemote: _MRNowPlayingPlayerPathGetOrigin
__ MediaRemote: _MRNowPlayingPlayerPathGetPlayer
__ MediaRemote: _MROriginIsLocalOrigin
__ MediaRemote: _MRPlaybackQueueCreate
__ MediaRemote: _MRPlaybackQueueRequestCreateWithIdentifiers
__ MediaRemote: _MRPlaybackQueueRequestGetArtworkHeight
__ MediaRemote: _MRPlaybackQueueRequestGetArtworkWidth
__ MediaRemote: _MRPlaybackQueueRequestGetRange
__ MediaRemote: _MRPlaybackQueueRequestMerge
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeArtwork
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeInfo
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeLanguageOptions
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeLyrics
__ MediaRemote: _MRPlaybackQueueRequestSetIncludeMetadata
__ MediaRemote: _MRPlaybackQueueSetQueueID
__ MediaRemote: _MRPlaybackSessionCopyIdentifier
__ MediaRemote: _MRPlaybackSessionCopyPlaybackSessionData
__ MediaRemote: _MRPlaybackSessionCopyType
__ MediaRemote: _MRPlaybackSessionCreate
__ MediaRemote: _MRPlaybackSessionCreateFromExternalRepresentation
__ MediaRemote: _MRPlaybackSessionRequestCopyIdentifier
__ MediaRemote: _MRPlaybackSessionRequestCopyRequestID
__ MediaRemote: _MRPlaybackSessionRequestCopyType
__ MediaRemote: _MRSystemAppPlaybackQueueCopyCustomData
__ MediaRemote: _MRSystemAppPlaybackQueueCopyCustomDataIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueCopyFeatureName
__ MediaRemote: _MRSystemAppPlaybackQueueCopyGenericTrackIdentifiers
__ MediaRemote: _MRSystemAppPlaybackQueueCopyRadioStationStringIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueCreate
__ MediaRemote: _MRSystemAppPlaybackQueueCreateExternalRepresentation
__ MediaRemote: _MRSystemAppPlaybackQueueCreateFromExternalRepresentation
__ MediaRemote: _MRSystemAppPlaybackQueueDestroy
__ MediaRemote: _MRSystemAppPlaybackQueueGetFirstItemGenericTrackIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryData
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryEncodingType
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryFirstItemMultiverseIDData
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryFirstItemPID
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryRepeatMode
__ MediaRemote: _MRSystemAppPlaybackQueueGetLocalQueryShuffleMode
__ MediaRemote: _MRSystemAppPlaybackQueueGetRadioStationIDType
__ MediaRemote: _MRSystemAppPlaybackQueueGetRadioStationIntegerPID
__ MediaRemote: _MRSystemAppPlaybackQueueGetReplaceIntent
__ MediaRemote: _MRSystemAppPlaybackQueueGetSiriAssetInfo
__ MediaRemote: _MRSystemAppPlaybackQueueGetSiriRecommendationIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueGetSiriWHAMetricsInfo
__ MediaRemote: _MRSystemAppPlaybackQueueGetTracklistCollectionIdentifierSetData
__ MediaRemote: _MRSystemAppPlaybackQueueGetTracklistRepeatMode
__ MediaRemote: _MRSystemAppPlaybackQueueGetTracklistShuffleMode
__ MediaRemote: _MRSystemAppPlaybackQueueGetType
__ MediaRemote: _MRSystemAppPlaybackQueueGetUserInfo
__ MediaRemote: _MRSystemAppPlaybackQueueIsRequestingImmediatePlayback
__ MediaRemote: _MRSystemAppPlaybackQueueSetCustomData
__ MediaRemote: _MRSystemAppPlaybackQueueSetCustomDataIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueSetIsRequestingImmediatePlayback
__ MediaRemote: _MRSystemAppPlaybackQueueSetReplaceIntent
__ MediaRemote: _MRSystemAppPlaybackQueueSetShouldOverrideManuallyCuratedQueue
__ MediaRemote: _MRSystemAppPlaybackQueueSetSiriRecommendationIdentifier
__ MediaRemote: _MRSystemAppPlaybackQueueSetUserInfo
__ MediaRemote: _MRSystemAppPlaybackQueueShouldOverrideManuallyCuratedQueue
__ MediaRemote: _MRTelevisionControllerBeginDiscovery
__ MediaRemote: _MRTelevisionControllerCreate
__ MediaRemote: _MRTelevisionControllerEndDiscovery
__ MediaRemote: _MRTelevisionControllerIsDiscoveringDevices
__ MediaRemote: _MRTelevisionControllerSetDiscoveryCallback
__ MediaRemote: _MRTelevisionControllerSetRemovalCallback
__ MediaRemote: _MRUniversalTrackIdentifierCopyBaseIDFromURL
__ MediaRemote: _MRUniversalTrackIdentifierTypeFromURL
__ MediaRemote: _OBJC_CLASS_$_MRAVClusterController
__ MediaRemote: _OBJC_CLASS_$_MRAVEndpoint
__ MediaRemote: _OBJC_CLASS_$_MRAVLocalEndpoint
__ MediaRemote: _OBJC_CLASS_$_MRAVOutputDevice
__ MediaRemote: _OBJC_CLASS_$_MRAVRoutingDiscoverySession
__ MediaRemote: _OBJC_CLASS_$_MRAVRoutingDiscoverySessionConfiguration
__ MediaRemote: _OBJC_CLASS_$_MRClient
__ MediaRemote: _OBJC_CLASS_$_MRCommandInfo
__ MediaRemote: _OBJC_CLASS_$_MRContentItemMetadataAudioFormat
__ MediaRemote: _OBJC_CLASS_$_MRContentItemMetadataAudioRoute
__ MediaRemote: _OBJC_CLASS_$_MRExpanseManager
__ MediaRemote: _OBJC_CLASS_$_MROrigin
__ MediaRemote: _OBJC_CLASS_$_MRPlayer
__ MediaRemote: _OBJC_CLASS_$_MRPlayerPath
__ MediaRemote: _OBJC_CLASS_$_MRSendCommandHandlerDialog
__ MediaRemote: _OBJC_CLASS_$_MRSendCommandHandlerDialogAction
__ MediaRemote: _OBJC_CLASS_$_MRSendCommandHandlerEvent
__ MediaRemote: _OBJC_CLASS_$_MRSendCommandResultStatus
__ MediaRemote: _kMRAVEndpointIdentifierUserInfoKey
__ MediaRemote: _kMRAVEndpointOutputDeviceIdentifierUserInfoKey
__ MediaRemote: _kMRAVEndpointOutputDevicesDidChangeNotification
__ MediaRemote: _kMRAVEndpointVolumeControlCapabilitiesDidChangeNotification
__ MediaRemote: _kMRAVEndpointVolumeControlCapabilitiesUserInfoKey
__ MediaRemote: _kMRAVEndpointVolumeDidChangeNotification
__ MediaRemote: _kMRAVEndpointVolumeUserInfoKey
__ MediaRemote: _kMRAVOutputContextDevicesDidChangeNotification
__ MediaRemote: _kMRExternalDeviceConnectionStateDidChangeNotification
__ MediaRemote: _kMRExternalDeviceConnectionStateUserInfoKey
__ MediaRemote: _kMRExternalDeviceEndpointDidChangeNotification
__ MediaRemote: _kMRExternalDeviceEndpointUserInfoKeyEndpoint
__ MediaRemote: _kMRMediaRemoteActiveSystemEndpointDidChangeNotification
__ MediaRemote: _kMRMediaRemoteBrowsableContentEndpointChangedNotification
__ MediaRemote: _kMRMediaRemoteCommandInfoCanBeControlledByScrubbingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentPlaybackSessionTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoCurrentQueueEndAction
__ MediaRemote: _kMRMediaRemoteCommandInfoDisabledReason
__ MediaRemote: _kMRMediaRemoteCommandInfoIsActiveKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedShortTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoLocalizedTitleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMaximumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoMinimumRatingKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackQueueType
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionPriority
__ MediaRemote: _kMRMediaRemoteCommandInfoPlaybackSessionRevision
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredIntervalsKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreferredPlaybackRate
__ MediaRemote: _kMRMediaRemoteCommandInfoPresentationStyleKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesQueueEndActionKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteCommandInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteCommandInfoSpecializedQueues
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedCustomPlaybackQueueIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedInsertionPositions
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackQueueTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackRates
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionIdentifiers
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedQueueEndActions
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedRepeatModes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportedShuffleModes
__ MediaRemote: _kMRMediaRemoteCommandInfoSupportsSharedQueue
__ MediaRemote: _kMRMediaRemoteCommandInfoUpNextItemCount
__ MediaRemote: _kMRMediaRemoteExternalScreenTypeDidChangeNotification
__ MediaRemote: _kMRMediaRemoteExternalScreenTypeUserInfoKey
__ MediaRemote: _kMRMediaRemoteMediaTypeAudioBook
__ MediaRemote: _kMRMediaRemoteMediaTypeITunesRadio
__ MediaRemote: _kMRMediaRemoteMediaTypeITunesU
__ MediaRemote: _kMRMediaRemoteMediaTypeMusic
__ MediaRemote: _kMRMediaRemoteMediaTypePodcast
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeAlbum
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypePlaylist
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoCollectionTypeRadio
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoKeyCollectionType
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoKeyIdentifiers
__ MediaRemote: _kMRMediaRemoteNowPlayingCollectionInfoKeyTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAlbum
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAlbumiTunesStoreAdamIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAppMetrics
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtist
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtistiTunesStoreAdamIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkDataHeight
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkDataWidth
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoArtworkMIMEType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAssetURL
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoAvailableLanguageOptionsData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoChapterNumber
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCollectionIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCollectionInfo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoComposer
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCurrentLanguageOptionsData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoCurrentPlaybackDate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDefaultPlaybackRate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDiscNumber
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDuration
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoElapsedTime
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoExternalContentIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoExternalProfileIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoGenre
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsAdvertisement
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsAlwaysLive
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsBanned
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsExplicitTrack
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsLiked
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsLoading
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsMusicApp
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsSharable
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsSteerable
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoIsVideosApp
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoMediaType
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaybackProgress
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaybackRate
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPlaylistGlobalIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoProhibitsSkip
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoPurchaseInfoData
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoQueueIndex
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationHash
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationName
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRadioStationStringIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoServiceIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoShuffleMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoSupportsFastForward15Seconds
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoSupportsIsBanned
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoSupportsIsLiked
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoSupportsRewind15Seconds
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoSupportsWishlisting
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTitle
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalChapterCount
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalDiscCount
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalQueueCount
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalTrackCount
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTrackNumber
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTypeAudio
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTypeVideo
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoUniqueIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoiTunesStoreSubscriptionAdamIdentifier
__ MediaRemote: _kMRMediaRemoteOptionChangeLanguageOptionSetting
__ MediaRemote: _kMRMediaRemoteOptionCommandID
__ MediaRemote: _kMRMediaRemoteOptionCommandTimeout
__ MediaRemote: _kMRMediaRemoteOptionContentItemID
__ MediaRemote: _kMRMediaRemoteOptionContextID
__ MediaRemote: _kMRMediaRemoteOptionDesiredSessionID
__ MediaRemote: _kMRMediaRemoteOptionEventNoticeIdentifier
__ MediaRemote: _kMRMediaRemoteOptionEventNoticeType
__ MediaRemote: _kMRMediaRemoteOptionInsertAfterContentItemID
__ MediaRemote: _kMRMediaRemoteOptionInsertBeforeContentItemID
__ MediaRemote: _kMRMediaRemoteOptionIsNegative
__ MediaRemote: _kMRMediaRemoteOptionLanguageOptionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueDestinationOffset
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueInsertionPosition
__ MediaRemote: _kMRMediaRemoteOptionPlaybackQueueOffset
__ MediaRemote: _kMRMediaRemoteOptionPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionData
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionFilePath
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionMetadata
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionPriority
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionRevision
__ MediaRemote: _kMRMediaRemoteOptionPlaybackSessionType
__ MediaRemote: _kMRMediaRemoteOptionPrivateListeningEnabled
__ MediaRemote: _kMRMediaRemoteOptionQueueEndAction
__ MediaRemote: _kMRMediaRemoteOptionRating
__ MediaRemote: _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
__ MediaRemote: _kMRMediaRemoteOptionRepeatMode
__ MediaRemote: _kMRMediaRemoteOptionRequestDefermentToPlaybackQueuePosition
__ MediaRemote: _kMRMediaRemoteOptionSharedPlaybackSessionIdentifier
__ MediaRemote: _kMRMediaRemoteOptionShouldBeginRadioPlayback
__ MediaRemote: _kMRMediaRemoteOptionShuffleMode
__ MediaRemote: _kMRMediaRemoteOptionSkipInterval
__ MediaRemote: _kMRMediaRemoteOptionStationHash
__ MediaRemote: _kMRMediaRemoteOptionStationID
__ MediaRemote: _kMRMediaRemoteOptionStationURL
__ MediaRemote: _kMRMediaRemoteOptionSystemAppPlaybackQueueData
__ MediaRemote: _kMRMediaRemoteOptionTrackID
__ MediaRemote: _kMRMediaRemoteOptionUserIdentityData
__ MediaRemote: _kMRMediaRemotePickedRouteVolumeControlAvailabilityDidChangeNotification
__ MediaRemote: _kMRMediaRemotePickedRouteVolumeControlAvailabilityUserInfoKey
__ MediaRemote: _kMRMediaRemoteRouteDescriptionUserInfoKey
__ MediaRemote: _kMRMediaRemoteRouteStatusDidChangeNotification
__ MediaRemote: _kMRMediaRemoteRouteStatusUserInfoKey
__ MediaRemote: _kMRMediaRemoteSystemMediaApplicationDisplayIdentifier
__ MediaRemote: _kMRMediaRemoteUpdatedContentItemsUserInfoKey
__ MediaRemote: _kMRMediaRemoteWillPresentRouteAuthenticationPromptNotification
__ MediaRemote: _kMRNowPlayingPlayerPathUserInfoKey
__ MediaServices: _MSVAutoBugCaptureDomainMediaPlayer
__ MediaServices: _MSVCopyLocalizedModelName
__ MediaServices: _MSVDeviceIsAppleTV
__ MediaServices: _MSVDeviceIsAudioAccessory
__ MediaServices: _MSVDeviceIsHomePod
__ MediaServices: _MSVDeviceOSIsInternalInstall
__ MediaServices: _MSVDeviceSupportsExtendedColorDisplay
__ MediaServices: _MSVDeviceSupportsMultiChannelMusic
__ MediaServices: _MSVGetMaximumScreenSize
__ MediaServices: _MSVGzipCompressData
__ MediaServices: _MSVGzipDecompressData
__ MediaServices: _MSVHasherSeedZero
__ MediaServices: _MSVHasherSharedSeed
__ MediaServices: _MSVImageUtilitiesAddImageToDestination
__ MediaServices: _MSVImageUtilitiesAddJPEGToDestination
__ MediaServices: _MSVImageUtilitiesCreateFileImageDestination
__ MediaServices: _MSVImageUtilitiesDefaultImageCompressionQuality
__ MediaServices: _MSVLogAddStateHandler
__ MediaServices: _MSVMobileHomeDirectory
__ MediaServices: _MSVNanoIDCreateTaggedPointer
__ MediaServices: _MSVPropertyListDataClasses
__ MediaServices: _MSVReplacementRangeForRanges
__ MediaServices: _MSVSignedIntersectionRange
__ MediaServices: _MSVSignedRangeZero
__ MediaServices: _MSVSignedSubtractedRange
__ MediaServices: _MSVSignedUnionRange
__ MediaServices: _MSVSystemRootDirectory
__ MediaServices: _MSVUnarchivedObjectOfClass
__ MediaServices: _MSVUnarchivedObjectOfClasses
__ MediaServices: _NSStringFromMSVSignedRange
__ MediaServices: _OBJC_CLASS_$_MSVArtworkService
__ MediaServices: _OBJC_CLASS_$_MSVArtworkServiceResizeRequest
__ MediaServices: _OBJC_CLASS_$_MSVAutoBugCapture
__ MediaServices: _OBJC_CLASS_$_MSVBlockGuard
__ MediaServices: _OBJC_CLASS_$_MSVDistributedNotificationObserver
__ MediaServices: _OBJC_CLASS_$_MSVLRUDictionary
__ MediaServices: _OBJC_CLASS_$_MSVMutableBidirectionalDictionary
__ MediaServices: _OBJC_CLASS_$_MSVOPACKDecoder
__ MediaServices: _OBJC_CLASS_$_MSVOPACKEncoder
__ MediaServices: _OBJC_CLASS_$_MSVPair
__ MediaServices: _OBJC_CLASS_$_MSVSQLDatabase
__ MediaServices: _OBJC_CLASS_$_MSVSectionedCollection
__ MediaServices: _OBJC_CLASS_$_MSVTimer
__ MediaServices: _OBJC_CLASS_$_MSVWeakProxy
__ MediaServices: _msv_dispatch_on_main_queue
__ MediaServices: _msv_dispatch_sync_on_queue
__ MusicLibrary: _MIPMultiverseIdentifierReadFrom
__ MusicLibrary: _ML3AlbumArtistPropertyCloudUniversalLibraryID
__ MusicLibrary: _ML3AlbumArtistPropertyName
__ MusicLibrary: _ML3AlbumArtistPropertySortName
__ MusicLibrary: _ML3AlbumArtistPropertyStoreID
__ MusicLibrary: _ML3AlbumPropertyAlbumYear
__ MusicLibrary: _ML3AlbumPropertyAppData
__ MusicLibrary: _ML3AlbumPropertyArtist
__ MusicLibrary: _ML3AlbumPropertyArtistPersistentID
__ MusicLibrary: _ML3AlbumPropertyLikedState
__ MusicLibrary: _ML3AlbumPropertyName
__ MusicLibrary: _ML3AlbumPropertySortName
__ MusicLibrary: _ML3AlbumPropertyStoreAlbumID
__ MusicLibrary: _ML3AlbumPropertySyncID
__ MusicLibrary: _ML3ArtistPropertyName
__ MusicLibrary: _ML3ArtistPropertySortName
__ MusicLibrary: _ML3ArtistPropertyStoreID
__ MusicLibrary: _ML3BookletPropertyFileSize
__ MusicLibrary: _ML3BookletPropertyItemPersistentID
__ MusicLibrary: _ML3BookletPropertyName
__ MusicLibrary: _ML3BookletPropertyRedownloadParams
__ MusicLibrary: _ML3BookletPropertyStoreItemID
__ MusicLibrary: _ML3CollectionPropertyAlbumPersistentID
__ MusicLibrary: _ML3CollectionPropertyArtistPersistentID
__ MusicLibrary: _ML3CollectionPropertyCloudStatus
__ MusicLibrary: _ML3CollectionPropertyRepresentativeItemPersistentID
__ MusicLibrary: _ML3CollectionPropertyTrackPersistentID
__ MusicLibrary: _ML3ComposerPropertyName
__ MusicLibrary: _ML3ComposerPropertySortName
__ MusicLibrary: _ML3ComposerPropertyStoreComposerID
__ MusicLibrary: _ML3ContainerItemPropertyContainerPersistentId
__ MusicLibrary: _ML3ContainerItemPropertyItemPersistentId
__ MusicLibrary: _ML3ContainerPropertyCloudAuthorDisplayName
__ MusicLibrary: _ML3ContainerPropertyCloudAuthorStoreID
__ MusicLibrary: _ML3ContainerPropertyCloudAuthorStoreURL
__ MusicLibrary: _ML3ContainerPropertyCloudGlobalID
__ MusicLibrary: _ML3ContainerPropertyCloudGlobalLikeCount
__ MusicLibrary: _ML3ContainerPropertyCloudGlobalPlayCount
__ MusicLibrary: _ML3ContainerPropertyCloudIsCuratorPlaylist
__ MusicLibrary: _ML3ContainerPropertyCloudIsPublic
__ MusicLibrary: _ML3ContainerPropertyCloudIsSubscribed
__ MusicLibrary: _ML3ContainerPropertyCloudIsVisible
__ MusicLibrary: _ML3ContainerPropertyCloudShareURL
__ MusicLibrary: _ML3ContainerPropertyCloudUniversalLibraryID
__ MusicLibrary: _ML3ContainerPropertyCloudUserCount
__ MusicLibrary: _ML3ContainerPropertyCloudVersionHash
__ MusicLibrary: _ML3ContainerPropertyContainedMediaType
__ MusicLibrary: _ML3ContainerPropertyDateCreated
__ MusicLibrary: _ML3ContainerPropertyDateModified
__ MusicLibrary: _ML3ContainerPropertyDatePlayed
__ MusicLibrary: _ML3ContainerPropertyDescription
__ MusicLibrary: _ML3ContainerPropertyDistinguishedKind
__ MusicLibrary: _ML3ContainerPropertyExternalVendorContainerTag
__ MusicLibrary: _ML3ContainerPropertyExternalVendorDisplayName
__ MusicLibrary: _ML3ContainerPropertyExternalVendorIdentifier
__ MusicLibrary: _ML3ContainerPropertyHasCloudPlayOrder
__ MusicLibrary: _ML3ContainerPropertyHasItems
__ MusicLibrary: _ML3ContainerPropertyIsActiveGeniusPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsActiveOnTheGoPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsContainerTypeActiveTarget
__ MusicLibrary: _ML3ContainerPropertyIsCurrentDevicePurchasesPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsDeletable
__ MusicLibrary: _ML3ContainerPropertyIsEditable
__ MusicLibrary: _ML3ContainerPropertyIsExternalVendorPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsGeniusMix
__ MusicLibrary: _ML3ContainerPropertyIsHidden
__ MusicLibrary: _ML3ContainerPropertyIsITunesSyncedPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsIgnoredSyncing
__ MusicLibrary: _ML3ContainerPropertyIsLimitedDynamicSmartPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsOwner
__ MusicLibrary: _ML3ContainerPropertyIsPlaybackHistoryPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsPurchasesPlaylist
__ MusicLibrary: _ML3ContainerPropertyIsSaveable
__ MusicLibrary: _ML3ContainerPropertyIsSourceRemote
__ MusicLibrary: _ML3ContainerPropertyIsUserEditable
__ MusicLibrary: _ML3ContainerPropertyIsVoiceMemos
__ MusicLibrary: _ML3ContainerPropertyIsWorkoutMix
__ MusicLibrary: _ML3ContainerPropertyLikedState
__ MusicLibrary: _ML3ContainerPropertyName
__ MusicLibrary: _ML3ContainerPropertyNameOrder
__ MusicLibrary: _ML3ContainerPropertyParentPersistentID
__ MusicLibrary: _ML3ContainerPropertyPlayCountRecent
__ MusicLibrary: _ML3ContainerPropertyPlayCountUser
__ MusicLibrary: _ML3ContainerPropertyPlayOrder
__ MusicLibrary: _ML3ContainerPropertyPlaylistAttributes
__ MusicLibrary: _ML3ContainerPropertySeedItemPersistentID
__ MusicLibrary: _ML3ContainerPropertySmartIsFolder
__ MusicLibrary: _ML3ContainerPropertySmartIsGenius
__ MusicLibrary: _ML3ContainerPropertyStoreCloudID
__ MusicLibrary: _ML3ContainerPropertySyncId
__ MusicLibrary: _ML3EntityPropertyKeepLocal
__ MusicLibrary: _ML3EntityPropertyKeepLocalStatus
__ MusicLibrary: _ML3EntityPropertyPersistentID
__ MusicLibrary: _ML3EntityPropertyRevision
__ MusicLibrary: _ML3GenrePropertyGenre
__ MusicLibrary: _ML3GenrePropertyStoreGenreID
__ MusicLibrary: _ML3MusicLibraryCloudLibraryAvailablityDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryContentsDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryDisplayValuesDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryEntitiesAddedOrRemovedNotification
__ MusicLibrary: _ML3MusicLibraryInvisiblePropertiesDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryNonContentsPropertiesDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryPathDidChangeNotification
__ MusicLibrary: _ML3MusicLibrarySyncGenerationDidChangeNotification
__ MusicLibrary: _ML3MusicLibraryUIDDidChangeNotification
__ MusicLibrary: _ML3TrackPropertyAlbum
__ MusicLibrary: _ML3TrackPropertyAlbumArtist
__ MusicLibrary: _ML3TrackPropertyAlbumArtistCloudUniversalLibraryID
__ MusicLibrary: _ML3TrackPropertyAlbumArtistKeepLocal
__ MusicLibrary: _ML3TrackPropertyAlbumArtistOrder
__ MusicLibrary: _ML3TrackPropertyAlbumArtistPersistentID
__ MusicLibrary: _ML3TrackPropertyAlbumArtistStoreID
__ MusicLibrary: _ML3TrackPropertyAlbumKeepLocal
__ MusicLibrary: _ML3TrackPropertyAlbumLikedState
__ MusicLibrary: _ML3TrackPropertyAlbumOrder
__ MusicLibrary: _ML3TrackPropertyAlbumPersistentID
__ MusicLibrary: _ML3TrackPropertyAlbumYear
__ MusicLibrary: _ML3TrackPropertyArtist
__ MusicLibrary: _ML3TrackPropertyArtistKeepLocal
__ MusicLibrary: _ML3TrackPropertyArtistOrder
__ MusicLibrary: _ML3TrackPropertyArtistOrderSection
__ MusicLibrary: _ML3TrackPropertyArtistPersistentID
__ MusicLibrary: _ML3TrackPropertyArtistStoreID
__ MusicLibrary: _ML3TrackPropertyArtworkToken
__ MusicLibrary: _ML3TrackPropertyAssetStoreItemID
__ MusicLibrary: _ML3TrackPropertyAudioCapability
__ MusicLibrary: _ML3TrackPropertyAudioTrackID
__ MusicLibrary: _ML3TrackPropertyAudioTrackLocale
__ MusicLibrary: _ML3TrackPropertyBPM
__ MusicLibrary: _ML3TrackPropertyBaseLocationID
__ MusicLibrary: _ML3TrackPropertyBitRate
__ MusicLibrary: _ML3TrackPropertyBookmarkTime
__ MusicLibrary: _ML3TrackPropertyChosenByAutoFill
__ MusicLibrary: _ML3TrackPropertyClassicalMovement
__ MusicLibrary: _ML3TrackPropertyClassicalMovementCount
__ MusicLibrary: _ML3TrackPropertyClassicalMovementNumber
__ MusicLibrary: _ML3TrackPropertyClassicalWork
__ MusicLibrary: _ML3TrackPropertyCollectionDescription
__ MusicLibrary: _ML3TrackPropertyColorCapability
__ MusicLibrary: _ML3TrackPropertyComments
__ MusicLibrary: _ML3TrackPropertyComposer
__ MusicLibrary: _ML3TrackPropertyComposerOrArtist
__ MusicLibrary: _ML3TrackPropertyComposerOrder
__ MusicLibrary: _ML3TrackPropertyComposerPersistentID
__ MusicLibrary: _ML3TrackPropertyContainerItemPersistentID
__ MusicLibrary: _ML3TrackPropertyCopyright
__ MusicLibrary: _ML3TrackPropertyDateAccessed
__ MusicLibrary: _ML3TrackPropertyDateAdded
__ MusicLibrary: _ML3TrackPropertyDateDownloaded
__ MusicLibrary: _ML3TrackPropertyDatePlayed
__ MusicLibrary: _ML3TrackPropertyDateReleased
__ MusicLibrary: _ML3TrackPropertyDateSkipped
__ MusicLibrary: _ML3TrackPropertyDescription
__ MusicLibrary: _ML3TrackPropertyDiscCount
__ MusicLibrary: _ML3TrackPropertyDiscNumber
__ MusicLibrary: _ML3TrackPropertyDownloadIdentifier
__ MusicLibrary: _ML3TrackPropertyDurationInSamples
__ MusicLibrary: _ML3TrackPropertyEQPreset
__ MusicLibrary: _ML3TrackPropertyEpisodeSortID
__ MusicLibrary: _ML3TrackPropertyEpisodeSubSortOrder
__ MusicLibrary: _ML3TrackPropertyEpisodeType
__ MusicLibrary: _ML3TrackPropertyEpisodeTypeDisplayName
__ MusicLibrary: _ML3TrackPropertyExtendedContentRating
__ MusicLibrary: _ML3TrackPropertyFeedURL
__ MusicLibrary: _ML3TrackPropertyFetchableItemArtworkSourceType
__ MusicLibrary: _ML3TrackPropertyFetchableItemArtworkToken
__ MusicLibrary: _ML3TrackPropertyFetchableItemScreenshotSourceType
__ MusicLibrary: _ML3TrackPropertyFetchableItemScreenshotToken
__ MusicLibrary: _ML3TrackPropertyFilePath
__ MusicLibrary: _ML3TrackPropertyGaplessEncodingDelay
__ MusicLibrary: _ML3TrackPropertyGaplessEncodingDrain
__ MusicLibrary: _ML3TrackPropertyGaplessHeuristicInfo
__ MusicLibrary: _ML3TrackPropertyGaplessLastFrameResync
__ MusicLibrary: _ML3TrackPropertyGenre
__ MusicLibrary: _ML3TrackPropertyGenreID
__ MusicLibrary: _ML3TrackPropertyGenreKeepLocal
__ MusicLibrary: _ML3TrackPropertyGenreOrder
__ MusicLibrary: _ML3TrackPropertyGlobalID
__ MusicLibrary: _ML3TrackPropertyGrouping
__ MusicLibrary: _ML3TrackPropertyHLSAssetTraits
__ MusicLibrary: _ML3TrackPropertyHLSAudioCapability
__ MusicLibrary: _ML3TrackPropertyHLSColorCapability
__ MusicLibrary: _ML3TrackPropertyHLSKeyCertificateURL
__ MusicLibrary: _ML3TrackPropertyHLSKeyServerProtocol
__ MusicLibrary: _ML3TrackPropertyHLSKeyServerURL
__ MusicLibrary: _ML3TrackPropertyHLSOfflinePlaybackKeys
__ MusicLibrary: _ML3TrackPropertyHLSPlaylistURL
__ MusicLibrary: _ML3TrackPropertyHLSVideoQuality
__ MusicLibrary: _ML3TrackPropertyHasAlternateAudio
__ MusicLibrary: _ML3TrackPropertyHasAppleMusicDRM
__ MusicLibrary: _ML3TrackPropertyHasAvailableItemArtwork
__ MusicLibrary: _ML3TrackPropertyHasBeenPlayed
__ MusicLibrary: _ML3TrackPropertyHasHLSVideo
__ MusicLibrary: _ML3TrackPropertyHasNonPurgeableAsset
__ MusicLibrary: _ML3TrackPropertyHasProtectedAsset
__ MusicLibrary: _ML3TrackPropertyHasSubtitles
__ MusicLibrary: _ML3TrackPropertyHidden
__ MusicLibrary: _ML3TrackPropertyHomeSharingID
__ MusicLibrary: _ML3TrackPropertyIncludeInShuffle
__ MusicLibrary: _ML3TrackPropertyIsAlarm
__ MusicLibrary: _ML3TrackPropertyIsAudibleAudioBook
__ MusicLibrary: _ML3TrackPropertyIsCompilation
__ MusicLibrary: _ML3TrackPropertyIsCurrentlyRestricted
__ MusicLibrary: _ML3TrackPropertyIsDemoRental
__ MusicLibrary: _ML3TrackPropertyIsDeprotected
__ MusicLibrary: _ML3TrackPropertyIsExplicit
__ MusicLibrary: _ML3TrackPropertyIsHD
__ MusicLibrary: _ML3TrackPropertyIsITunesU
__ MusicLibrary: _ML3TrackPropertyIsInMyLibrary
__ MusicLibrary: _ML3TrackPropertyIsInTheCloud
__ MusicLibrary: _ML3TrackPropertyIsLocal
__ MusicLibrary: _ML3TrackPropertyIsMatchAudio
__ MusicLibrary: _ML3TrackPropertyIsMusicShow
__ MusicLibrary: _ML3TrackPropertyIsMusicVideo
__ MusicLibrary: _ML3TrackPropertyIsNonLibraryOwnedSubscriptionContent
__ MusicLibrary: _ML3TrackPropertyIsOTAPurchased
__ MusicLibrary: _ML3TrackPropertyIsPendingSync
__ MusicLibrary: _ML3TrackPropertyIsPlayable
__ MusicLibrary: _ML3TrackPropertyIsPremium
__ MusicLibrary: _ML3TrackPropertyIsPreorder
__ MusicLibrary: _ML3TrackPropertyIsRental
__ MusicLibrary: _ML3TrackPropertyIsStoreRedownloadable
__ MusicLibrary: _ML3TrackPropertyIsStreamingQuality
__ MusicLibrary: _ML3TrackPropertyIsTemporaryCloudDownload
__ MusicLibrary: _ML3TrackPropertyLikedState
__ MusicLibrary: _ML3TrackPropertyLikedStateChanged
__ MusicLibrary: _ML3TrackPropertyLikedStateChangedDate
__ MusicLibrary: _ML3TrackPropertyLocationFileName
__ MusicLibrary: _ML3TrackPropertyLongDescription
__ MusicLibrary: _ML3TrackPropertyLyrics
__ MusicLibrary: _ML3TrackPropertyMediaType
__ MusicLibrary: _ML3TrackPropertyMovieInfo
__ MusicLibrary: _ML3TrackPropertyNeedsRestore
__ MusicLibrary: _ML3TrackPropertyPlayCountRecent
__ MusicLibrary: _ML3TrackPropertyPlayCountUser
__ MusicLibrary: _ML3TrackPropertyPodcastExternalGUID
__ MusicLibrary: _ML3TrackPropertyPurchaseHistoryID
__ MusicLibrary: _ML3TrackPropertyRelativeVolume
__ MusicLibrary: _ML3TrackPropertyRememberBookmarkTime
__ MusicLibrary: _ML3TrackPropertyRemoteLocationID
__ MusicLibrary: _ML3TrackPropertyRentalDuration
__ MusicLibrary: _ML3TrackPropertyRentalExpirationDate
__ MusicLibrary: _ML3TrackPropertyRentalPlaybackDuration
__ MusicLibrary: _ML3TrackPropertyRentalPlaybackStartDate
__ MusicLibrary: _ML3TrackPropertyRentalStartDate
__ MusicLibrary: _ML3TrackPropertyRentalWindowEndDate
__ MusicLibrary: _ML3TrackPropertyReportingStoreItemID
__ MusicLibrary: _ML3TrackPropertyScreenshotToken
__ MusicLibrary: _ML3TrackPropertySearchAlbum
__ MusicLibrary: _ML3TrackPropertySearchAlbumArtist
__ MusicLibrary: _ML3TrackPropertySearchArtist
__ MusicLibrary: _ML3TrackPropertySearchComposer
__ MusicLibrary: _ML3TrackPropertySearchTitle
__ MusicLibrary: _ML3TrackPropertySeasonNumber
__ MusicLibrary: _ML3TrackPropertySeriesName
__ MusicLibrary: _ML3TrackPropertySeriesNameOrder
__ MusicLibrary: _ML3TrackPropertyShowComposer
__ MusicLibrary: _ML3TrackPropertyShowSortType
__ MusicLibrary: _ML3TrackPropertySignificantAmountHasBeenPlayed
__ MusicLibrary: _ML3TrackPropertySkipCountRecent
__ MusicLibrary: _ML3TrackPropertySkipCountUser
__ MusicLibrary: _ML3TrackPropertySortAlbum
__ MusicLibrary: _ML3TrackPropertySortAlbumArtist
__ MusicLibrary: _ML3TrackPropertySortArtist
__ MusicLibrary: _ML3TrackPropertySortTitle
__ MusicLibrary: _ML3TrackPropertyStartTime
__ MusicLibrary: _ML3TrackPropertyStopTime
__ MusicLibrary: _ML3TrackPropertyStoreAccountID
__ MusicLibrary: _ML3TrackPropertyStoreAdvertisementType
__ MusicLibrary: _ML3TrackPropertyStoreAdvertisementUniqueID
__ MusicLibrary: _ML3TrackPropertyStoreBookmarkMetadataEntityRevision
__ MusicLibrary: _ML3TrackPropertyStoreBookmarkMetadataIdentifier
__ MusicLibrary: _ML3TrackPropertyStoreBookmarkMetadataTimestamp
__ MusicLibrary: _ML3TrackPropertyStoreCloudAlbumID
__ MusicLibrary: _ML3TrackPropertyStoreCloudAssetAvailable
__ MusicLibrary: _ML3TrackPropertyStoreCloudInMyLibrary
__ MusicLibrary: _ML3TrackPropertyStoreCloudStatus
__ MusicLibrary: _ML3TrackPropertyStoreCloudUniversalLibraryID
__ MusicLibrary: _ML3TrackPropertyStoreComposerID
__ MusicLibrary: _ML3TrackPropertyStoreDatePurchased
__ MusicLibrary: _ML3TrackPropertyStoreDownloaderAccountID
__ MusicLibrary: _ML3TrackPropertyStoreExtrasURL
__ MusicLibrary: _ML3TrackPropertyStoreFamilyAccountID
__ MusicLibrary: _ML3TrackPropertyStoreGenreID
__ MusicLibrary: _ML3TrackPropertyStoreIsArtistUploadedContent
__ MusicLibrary: _ML3TrackPropertyStoreItemID
__ MusicLibrary: _ML3TrackPropertyStoreKeyID
__ MusicLibrary: _ML3TrackPropertyStoreLyricsAvailable
__ MusicLibrary: _ML3TrackPropertyStoreNeedsReporting
__ MusicLibrary: _ML3TrackPropertyStorePlaybackEndpointType
__ MusicLibrary: _ML3TrackPropertyStorePlaylistID
__ MusicLibrary: _ML3TrackPropertyStoreProtectionType
__ MusicLibrary: _ML3TrackPropertyStoreRadioStationID
__ MusicLibrary: _ML3TrackPropertyStoreRedownloadParameters
__ MusicLibrary: _ML3TrackPropertyStoreSagaID
__ MusicLibrary: _ML3TrackPropertyStoreURL
__ MusicLibrary: _ML3TrackPropertySubscriptionStoreItemID
__ MusicLibrary: _ML3TrackPropertySyncID
__ MusicLibrary: _ML3TrackPropertyTimeSyncedLyricsAvailable
__ MusicLibrary: _ML3TrackPropertyTitle
__ MusicLibrary: _ML3TrackPropertyTitleOrder
__ MusicLibrary: _ML3TrackPropertyTotalSize
__ MusicLibrary: _ML3TrackPropertyTotalTime
__ MusicLibrary: _ML3TrackPropertyTrackCount
__ MusicLibrary: _ML3TrackPropertyTrackNumber
__ MusicLibrary: _ML3TrackPropertyUserRating
__ MusicLibrary: _ML3TrackPropertyVerifiedIntegrity
__ MusicLibrary: _ML3TrackPropertyVideoQuality
__ MusicLibrary: _ML3TrackPropertyVolumeNormalization
__ MusicLibrary: _ML3TrackPropertyYear
__ MusicLibrary: _OBJC_CLASS_$_MIPMultiverseIdentifier
__ MusicLibrary: _OBJC_CLASS_$_ML3Album
__ MusicLibrary: _OBJC_CLASS_$_ML3AlbumArtist
__ MusicLibrary: _OBJC_CLASS_$_ML3AllCompoundPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3AnyCompoundPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3Artist
__ MusicLibrary: _OBJC_CLASS_$_ML3Artwork
__ MusicLibrary: _OBJC_CLASS_$_ML3ArtworkConfiguration
__ MusicLibrary: _OBJC_CLASS_$_ML3Booklet
__ MusicLibrary: _OBJC_CLASS_$_ML3Collection
__ MusicLibrary: _OBJC_CLASS_$_ML3ComparisonPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3Composer
__ MusicLibrary: _OBJC_CLASS_$_ML3ConditionalPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3Container
__ MusicLibrary: _OBJC_CLASS_$_ML3ContainerItem
__ MusicLibrary: _OBJC_CLASS_$_ML3ContainmentPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3ContainsPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3Entity
__ MusicLibrary: _OBJC_CLASS_$_ML3Genre
__ MusicLibrary: _OBJC_CLASS_$_ML3LanguageResourceManager
__ MusicLibrary: _OBJC_CLASS_$_ML3MusicLibrary
__ MusicLibrary: _OBJC_CLASS_$_ML3MutableDatabaseImport
__ MusicLibrary: _OBJC_CLASS_$_ML3NegationPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3OrderingTerm
__ MusicLibrary: _OBJC_CLASS_$_ML3PersistentIDsPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3PropertyPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3QueryResultSet
__ MusicLibrary: _OBJC_CLASS_$_ML3SearchStringPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3SpotlightMatchPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3StoreItemPlaylistData
__ MusicLibrary: _OBJC_CLASS_$_ML3StoreItemTrackData
__ MusicLibrary: _OBJC_CLASS_$_ML3Track
__ MusicLibrary: _OBJC_CLASS_$_MLGeniusPlaylistController
__ MusicLibrary: _OBJC_CLASS_$_MLMediaLibraryService
__ MusicLibrary: _OBJC_METACLASS_$_ML3Album
__ MusicLibrary: _OBJC_METACLASS_$_ML3AlbumArtist
__ MusicLibrary: _OBJC_METACLASS_$_ML3Artist
__ MusicLibrary: _OBJC_METACLASS_$_ML3Collection
__ MusicLibrary: _OBJC_METACLASS_$_ML3Composer
__ MusicLibrary: _OBJC_METACLASS_$_ML3Container
__ MusicLibrary: _OBJC_METACLASS_$_ML3Genre
__ MusicLibrary: _OBJC_METACLASS_$_ML3StoreItemTrackData
__ MusicLibrary: _OBJC_METACLASS_$_ML3Track
__ PrivacyAccounting: _OBJC_CLASS_$_PAAccessLogger
__ PrivacyAccounting: _OBJC_CLASS_$_PAApplication
__ PrivacyAccounting: _OBJC_CLASS_$_PATCCAccess
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataWriter
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ ProtocolBuffer: _PBRepeatedInt64Add
__ ProtocolBuffer: _PBRepeatedInt64Clear
__ ProtocolBuffer: _PBRepeatedInt64Copy
__ ProtocolBuffer: _PBRepeatedInt64Hash
__ ProtocolBuffer: _PBRepeatedInt64IsEqual
__ ProtocolBuffer: _PBRepeatedInt64NSArray
__ ProtocolBuffer: _PBRepeatedInt64Set
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _kCAAnimationAbsolute
__ QuartzCore: _kCAFillModeBoth
__ Security: _SecRandomCopyBytes
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ SoftLinking: __sl_dlopen
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesCoordinator
__ SpringBoardServices: _SBGetApplicationNetworkFlags
__ SpringBoardServices: _SBSIsSystemApplication
__ SpringBoardServices: _SBSSpringBoardServerPort
__ SpringBoardServices: _SBSetApplicationNetworkFlags
__ TCC: _kTCCServiceMediaLibrary
__ UIKit: _CGSizeFromString
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSShadow
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationRotationFollowingController
__ UIKit: _OBJC_CLASS_$_UIApplicationRotationFollowingWindow
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UICubicTimingParameters
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UIPopoverController
__ UIKit: _OBJC_CLASS_$_UIPresentationController
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UISelectionFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UISlider
__ UIKit: _OBJC_CLASS_$_UISpringTimingParameters
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$__UIRemoteViewController
__ UIKit: _OBJC_CLASS_$__UIResilientRemoteViewContainerViewController
__ UIKit: _OBJC_METACLASS_$_UIApplicationRotationFollowingWindow
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIPopoverController
__ UIKit: _OBJC_METACLASS_$_UIPresentationController
__ UIKit: _OBJC_METACLASS_$_UISlider
__ UIKit: _OBJC_METACLASS_$_UISpringTimingParameters
__ UIKit: _OBJC_METACLASS_$_UITableView
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_METACLASS_$_UIWindow
__ UIKit: _OBJC_METACLASS_$__UIRemoteViewController
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationDidReceiveMemoryWarningNotification
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIBackgroundTaskInvalid
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraExtraLarge
__ UIKit: _UIContentSizeCategoryIsAccessibilityCategory
__ UIKit: _UIContentSizeCategoryUnspecified
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIGraphicsBeginImageContext
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIImageJPEGRepresentation
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIRectCenteredAboutPoint
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredIntegralRectScale
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredXInRectScale
__ UIKit: _UIRectCenteredYInRect
__ UIKit: _UIRectCenteredYInRectScale
__ UIKit: _UIRectClip
__ UIKit: _UIRectFill
__ UIKit: _UIRectFillUsingBlendMode
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRoundToScale
__ UIKit: _UIRoundToViewScale
__ UIKit: _UIWindowDidBecomeKeyNotification
__ UIKit: _UIWindowLevelAlert
__ UIKit: __UIApplicationDeactivationReasonUserInfoKey
__ UIKit: __UIApplicationDidRemoveDeactivationReasonNotification
__ UIKit: __UIApplicationVolumeDownButtonDownNotification
__ UIKit: __UIApplicationVolumeDownButtonUpNotification
__ UIKit: __UIApplicationVolumeUpButtonDownNotification
__ UIKit: __UIApplicationVolumeUpButtonUpNotification
__ UIKit: __UIApplicationWillAddDeactivationReasonNotification
__ UIKit: __UIVisualAltitudeFloatAboveSuperview
__ UIKit: ___UIApplicationLinkedOnOrAfter
__ UniformTypeIdentifiers: _OBJC_CLASS_$_UTType
__ iTunesCloud: _ICActiveUserIdentityDidChangeNotification
__ iTunesCloud: _ICArtworkInfoKeyArtworkDictionary
__ iTunesCloud: _ICArtworkInfoKeyArtworkDictionaryFullURL
__ iTunesCloud: _ICArtworkInfoKeyArtworkDictionaryTemplateJSON
__ iTunesCloud: _ICAuthorizeMachineRequestReasonRefetch
__ iTunesCloud: _ICCloudAvailabilityControllerCanShowCloudDownloadButtonsDidChangeNotification
__ iTunesCloud: _ICCloudAvailabilityControllerCanShowCloudTracksDidChangeNotification
__ iTunesCloud: _ICCloudAvailabilityControllerHasProperNetworkConditionsToShowCloudMediaDidChangeNotification
__ iTunesCloud: _ICCloudAvailabilityControllerIsCellularDataRestrictedDidChangeNotification
__ iTunesCloud: _ICCloudAvailabilityControllerNetworkReachabilityDidChangeNotification
__ iTunesCloud: _ICCloudClientCloudAddToPlaylistBehaviorDidChangeNotification
__ iTunesCloud: _ICCloudClientEnableCloudLibraryFailureTypeChangedNotification
__ iTunesCloud: _ICCloudClientIsAuthenticatedDidChangeNotification
__ iTunesCloud: _ICCloudClientMigrateAllowMatchOnCellularToAllowAutoDownloadOnCellular
__ iTunesCloud: _ICCloudClientMigrateStoreAllowAutomaticDownloadsOnCellularToMusicAllowDownloadOnCellular
__ iTunesCloud: _ICCloudClientStartingInitialCloudLibraryImportNotification
__ iTunesCloud: _ICEnvironmentNetworkTypeIsBluetooth
__ iTunesCloud: _ICEnvironmentNetworkTypeIsCellular
__ iTunesCloud: _ICEnvironmentNetworkTypeIsWiFi
__ iTunesCloud: _ICEnvironmentNetworkTypeIsWired
__ iTunesCloud: _ICErrorDomain
__ iTunesCloud: _ICFairPlayGetHardwareInfo
__ iTunesCloud: _ICHTTPHeaderKeyUserAgent
__ iTunesCloud: _ICStoreArtworkInfoColorKindBackground
__ iTunesCloud: _ICStoreArtworkInfoColorKindText1
__ iTunesCloud: _ICStoreArtworkInfoColorKindText2
__ iTunesCloud: _ICStoreArtworkInfoCropStyleBoundedBox
__ iTunesCloud: _ICStoreArtworkInfoCropStyleFCCrop270
__ iTunesCloud: _ICStoreArtworkInfoCropStyleSpecificRectangle
__ iTunesCloud: _ICStoreArtworkInfoCropStyleSquareCenterCrop
__ iTunesCloud: _ICStoreArtworkInfoImageFormatHEIC
__ iTunesCloud: _ICStoreArtworkInfoImageFormatJPEG
__ iTunesCloud: _ICStoreArtworkInfoImageFormatPNG
__ iTunesCloud: _ICStoreHLSAssetInfoKeyProtocolTypeSimplified
__ iTunesCloud: _ICStoreHTTPHeaderKeyXAppleStorefront
__ iTunesCloud: _ICStoreHTTPHeaderKeyXDSID
__ iTunesCloud: _ICStoreHTTPHeaderKeyXEnqueuerDSID
__ iTunesCloud: _ICStorePlatformKeyProfileLockup
__ iTunesCloud: _ICStorePlatformKeyProfilePlay
__ iTunesCloud: _ICStorePlatformKeyProfilePlaylistProduct
__ iTunesCloud: _ICStorePlatformOfferTypeSubscription
__ iTunesCloud: _ICStoreVideoArtworkInfoBestSizesForSize
__ iTunesCloud: _ICURLBagKeyAMPMusicAPIDomains
__ iTunesCloud: _ICURLBagKeyBrowseGroupingURL
__ iTunesCloud: _ICURLBagKeyCountryCode
__ iTunesCloud: _ICURLBagKeyForYouURL
__ iTunesCloud: _ICURLBagKeyLanguage
__ iTunesCloud: _ICURLBagKeyLanguageTag
__ iTunesCloud: _ICURLBagKeyMusicCommon
__ iTunesCloud: _ICURLBagKeyMusicConnect
__ iTunesCloud: _ICURLBagKeyMusicFriends
__ iTunesCloud: _ICURLBagKeyMusicSubscription
__ iTunesCloud: _ICURLBagKeyPlaybackAuthorizationTokenTTLSeconds
__ iTunesCloud: _ICURLBagKeyRadioGroupingURL
__ iTunesCloud: _ICURLBagKeyRadioTab
__ iTunesCloud: _ICUserIdentityStoreDidChangeNotification
__ iTunesCloud: _OBJC_CLASS_$_ICAsyncBlockOperation
__ iTunesCloud: _OBJC_CLASS_$_ICAuthorizeMachineRequest
__ iTunesCloud: _OBJC_CLASS_$_ICClientInfo
__ iTunesCloud: _OBJC_CLASS_$_ICCloudAddReferral
__ iTunesCloud: _OBJC_CLASS_$_ICCloudAvailabilityController
__ iTunesCloud: _OBJC_CLASS_$_ICCloudClient
__ iTunesCloud: _OBJC_CLASS_$_ICCloudContentTasteRequestListener
__ iTunesCloud: _OBJC_CLASS_$_ICCloudItemIDList
__ iTunesCloud: _OBJC_CLASS_$_ICCloudServiceStatusMonitor
__ iTunesCloud: _OBJC_CLASS_$_ICConnectionConfiguration
__ iTunesCloud: _OBJC_CLASS_$_ICDefaults
__ iTunesCloud: _OBJC_CLASS_$_ICDeviceInfo
__ iTunesCloud: _OBJC_CLASS_$_ICEnvironmentMonitor
__ iTunesCloud: _OBJC_CLASS_$_ICLibraryAuthServiceClientTokenProvider
__ iTunesCloud: _OBJC_CLASS_$_ICMusicKitRequestContext
__ iTunesCloud: _OBJC_CLASS_$_ICMusicKitURLRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionRecommendationsRequest
__ iTunesCloud: _OBJC_CLASS_$_ICMusicSubscriptionStatusMonitor
__ iTunesCloud: _OBJC_CLASS_$_ICSagaGetAccountStatusRequest
__ iTunesCloud: _OBJC_CLASS_$_ICStoreArtworkInfo
__ iTunesCloud: _OBJC_CLASS_$_ICStoreFileAssetFairPlayInfo
__ iTunesCloud: _OBJC_CLASS_$_ICStorePlatformMetadata
__ iTunesCloud: _OBJC_CLASS_$_ICStorePlatformRequest
__ iTunesCloud: _OBJC_CLASS_$_ICStoreRequestContext
__ iTunesCloud: _OBJC_CLASS_$_ICStoreURLRequest
__ iTunesCloud: _OBJC_CLASS_$_ICStoreURLResponseAuthenticationProvider
__ iTunesCloud: _OBJC_CLASS_$_ICStoreVideoArtworkInfo
__ iTunesCloud: _OBJC_CLASS_$_ICURLBag
__ iTunesCloud: _OBJC_CLASS_$_ICURLBagProvider
__ iTunesCloud: _OBJC_CLASS_$_ICURLSessionManager
__ iTunesCloud: _OBJC_CLASS_$_ICUserIdentity
__ iTunesCloud: _OBJC_CLASS_$_ICUserIdentityStore
__ iTunesCloud: _kICStorePlatformRequestMaximumBatchSize
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _CC_MD5_Final
__ libSystem.B.dylib: _CC_MD5_Update
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _CC_SHA512_Final
__ libSystem.B.dylib: _CC_SHA512_Update
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_data_create_concat
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getprogname
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _index
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _ldiv
__ libSystem.B.dylib: _lldiv
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_unfair_recursive_lock_lock_with_options
__ libSystem.B.dylib: _os_unfair_recursive_lock_unlock
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _powf
__ libSystem.B.dylib: _pthread_getspecific
__ libSystem.B.dylib: _pthread_key_create
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_setspecific
__ libSystem.B.dylib: _qos_class_self
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strtoll
__ libSystem.B.dylib: _strtoull
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libc++.1.dylib: __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt9exception4whatEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt12out_of_rangeD1Ev
__ libc++.1.dylib: __ZNSt13runtime_errorC1EPKc
__ libc++.1.dylib: __ZNSt13runtime_errorD1Ev
__ libc++.1.dylib: __ZNSt3__112__next_primeEm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__119__shared_weak_count14__release_weakEv
__ libc++.1.dylib: __ZNSt3__119__shared_weak_countD2Ev
__ libc++.1.dylib: __ZNSt9exceptionD2Ev
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__119__shared_weak_countE
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTISt12out_of_range
__ libc++.1.dylib: __ZTISt13runtime_error
__ libc++.1.dylib: __ZTISt9exception
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZTVSt12out_of_range
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_rethrow
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___dynamic_cast
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_addMethod
__ libobjc.A.dylib: _class_conformsToProtocol
__ libobjc.A.dylib: _class_copyPropertyList
__ libobjc.A.dylib: _class_getProperty
__ libobjc.A.dylib: _class_getSuperclass
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _property_copyAttributeValue
__ libobjc.A.dylib: _property_getName
__ libobjc.A.dylib: _protocol_copyProtocolList
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libobjc.A.dylib: _sel_getName
__ libobjc.A.dylib: _sel_getUid
__ libobjc.A.dylib: _sel_isEqual
MPModelStoreBrowseContentItemBuilder : MPStoreModelObjectBuilder
 @property  BOOL allowsRadioStations
 @property  BOOL allowsVideoContent

  // class methods
  +[MPModelStoreBrowseContentItemBuilder allSupportedProperties]

  // instance methods
  -[MPModelStoreBrowseContentItemBuilder setAllowsRadioStations:]
  -[MPModelStoreBrowseContentItemBuilder allowsVideoContent]
  -[MPModelStoreBrowseContentItemBuilder .cxx_destruct]
  -[MPModelStoreBrowseContentItemBuilder contentItemTypeForMusicAPIType:]
  -[MPModelStoreBrowseContentItemBuilder contentItemTypeForRawResponseKindIdentifiers:]
  -[MPModelStoreBrowseContentItemBuilder allowsRadioStations]
  -[MPModelStoreBrowseContentItemBuilder setAllowsVideoContent:]
  -[MPModelStoreBrowseContentItemBuilder setPreventStoreItemMetadataCaching:]
  -[MPModelStoreBrowseContentItemBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]
  -[MPModelStoreBrowseContentItemBuilder initWithRequestedPropertySet:]
  -[MPModelStoreBrowseContentItemBuilder contentItemTypeForRawResponseKindIdentifierValue:]
  -[MPModelStoreBrowseContentItemBuilder contentItemTypeForStoreItemMetadata:]


MPMediaDownloadManager : NSObject <NSXPCListenerDelegate, MPStoreDownloadManagerObserver, ATDownloadProgressObserver>
 @property  NSArray *allMediaDownloadLibraryIdentifiers
 @property  long long activeDownloadsCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaDownloadManager sharedManager]

  // instance methods
  -[MPMediaDownloadManager downloadManager:downloadDidProgress:]
  -[MPMediaDownloadManager _updateCacheAndGetItemToReportForATAssetDownloadPauseReasonChange:]
  -[MPMediaDownloadManager _notifyObserversOfDownloadPauseReasonChangedForAssets:]
  -[MPMediaDownloadManager _keepLocalTaskConnection]
  -[MPMediaDownloadManager downloadManager:didAddDownloads:removeDownloads:]
  -[MPMediaDownloadManager hasActiveDownloads]
  -[MPMediaDownloadManager activeDownloadForStoreID:]
  -[MPMediaDownloadManager .cxx_destruct]
  -[MPMediaDownloadManager downloadManager:downloadsDidProgress:]
  -[MPMediaDownloadManager _isValidMediaAsset:]
  -[MPMediaDownloadManager downloadManager:downloadDidFinish:]
  -[MPMediaDownloadManager _statusChangeObservers]
  -[MPMediaDownloadManager atcDidUpdateDownloadStateForAssets:]
  -[MPMediaDownloadManager _updateCacheAndItemToReportForATAssetDownloadProgressChange:]
  -[MPMediaDownloadManager _downloadProgressConnection]
  -[MPMediaDownloadManager prioritizeDownload:]
  -[MPMediaDownloadManager atcWillEnqueueDownloads:cancelDownloads:]
  -[MPMediaDownloadManager init]
  -[MPMediaDownloadManager _notifyObserversOfDownloadCompleteForAssets:withError:]
  -[MPMediaDownloadManager _notifyObserversOfAssetDownloadProgress:]
  -[MPMediaDownloadManager addObserver:]
  -[MPMediaDownloadManager atcDidDownloadAsset:withError:]
  -[MPMediaDownloadManager cancelDownloads:]
  -[MPMediaDownloadManager atcDidUpdateAsset:withProgress:]
  -[MPMediaDownloadManager sendKeepLocalStatusChanged:forLibraryIdentifier:entityType:withCompletionHandler:]
  -[MPMediaDownloadManager downloadForIdentifierSet:downloadState:]
  -[MPMediaDownloadManager allMediaDownloadLibraryIdentifiers]
  -[MPMediaDownloadManager _init]
  -[MPMediaDownloadManager activeDownloadForMediaItemPersistentID:]
  -[MPMediaDownloadManager atcDidEnqueueAsset:]
  -[MPMediaDownloadManager enqueueAssetForDownload:withCompletionHandler:]
  -[MPMediaDownloadManager dealloc]
  -[MPMediaDownloadManager downloadLibraryWithCompletionHandler:]
  -[MPMediaDownloadManager removeObserver:]
  -[MPMediaDownloadManager _hasRequiredAirTrafficEntitlement]
  -[MPMediaDownloadManager activeDownloadsCount]
  -[MPMediaDownloadManager _updateCacheAndGetMediaDownloadToReportForStoreDownloadProgress:]
  -[MPMediaDownloadManager _prefectchAllATDownloads]


MPModelForYouRecommendationsMusicKitRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelForYouRecommendationsMusicKitRequestOperation types]
  -[MPModelForYouRecommendationsMusicKitRequestOperation itemProperties]
  -[MPModelForYouRecommendationsMusicKitRequestOperation .cxx_destruct]
  -[MPModelForYouRecommendationsMusicKitRequestOperation recommendationsQueryItemsWithStoreURLBag:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation queryItemsWithStoreURLBag:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation recommendationsURLWithStoreURLBag:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation recentlyPlayedURLWithStoreURLBag:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation isOnboardingRequired:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _produceResultsWithRecommendationsArray:recentlyPlayedArray:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _produceResultsWithItemsArray:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _responseWithResults:personalizationResponse:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _recommendationGroupBuilderWithFlatSectionedItems:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _personalizeRecommendationGroup:flatPersonalizedSectionedItems:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation shouldRequestVacTokens]
  -[MPModelForYouRecommendationsMusicKitRequestOperation shouldRequestSocialAndFriendsMixWithValues]
  -[MPModelForYouRecommendationsMusicKitRequestOperation typesArrayWithTypes:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation displayFilterKinds]
  -[MPModelForYouRecommendationsMusicKitRequestOperation displayFilterKindsValueForOptions:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation subscriptionStatusType]
  -[MPModelForYouRecommendationsMusicKitRequestOperation _recommendationGroupBuilder]
  -[MPModelForYouRecommendationsMusicKitRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation produceResponseWithLoadedOutput:completion:]
  -[MPModelForYouRecommendationsMusicKitRequestOperation sectionProperties]


MPMediaControlsConfiguration : NSObject <NSSecureCoding, NSCopying>
 @property  long long style
 @property  long long initatorStyle
 @property  NSString *routingContextUID
 @property  NSString *presentingAppBundleID
 @property  BOOL shouldPreventAutorotation
 @property  BOOL allowsNowPlayingApplicationLaunch
 @property  BOOL sortByIsVideoRoute
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceRect
 @property  double preferredWidth
 @property  NSString *routeUID

  // class methods
  +[MPMediaControlsConfiguration supportsSecureCoding]

  // instance methods
  -[MPMediaControlsConfiguration routeUID]
  -[MPMediaControlsConfiguration preferredWidth]
  -[MPMediaControlsConfiguration initWithCoder:]
  -[MPMediaControlsConfiguration setSortByIsVideoRoute:]
  -[MPMediaControlsConfiguration sortByIsVideoRoute]
  -[MPMediaControlsConfiguration setAllowsNowPlayingApplicationLaunch:]
  -[MPMediaControlsConfiguration setShouldPreventAutorotation:]
  -[MPMediaControlsConfiguration presentingAppBundleID]
  -[MPMediaControlsConfiguration setRoutingContextUID:]
  -[MPMediaControlsConfiguration .cxx_destruct]
  -[MPMediaControlsConfiguration setRouteUID:]
  -[MPMediaControlsConfiguration sourceRect]
  -[MPMediaControlsConfiguration setStyle:]
  -[MPMediaControlsConfiguration routingContextUID]
  -[MPMediaControlsConfiguration setPresentingAppBundleID:]
  -[MPMediaControlsConfiguration setSourceRect:]
  -[MPMediaControlsConfiguration allowsNowPlayingApplicationLaunch]
  -[MPMediaControlsConfiguration setInitatorStyle:]
  -[MPMediaControlsConfiguration isEqual:]
  -[MPMediaControlsConfiguration shouldPreventAutorotation]
  -[MPMediaControlsConfiguration setPreferredWidth:]
  -[MPMediaControlsConfiguration copyWithZone:]
  -[MPMediaControlsConfiguration initatorStyle]
  -[MPMediaControlsConfiguration style]
  -[MPMediaControlsConfiguration encodeWithCoder:]


MPStoreSocialUnblockOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialUnblockOperationDataSource queryItems]
  -[MPStoreSocialUnblockOperationDataSource .cxx_destruct]
  -[MPStoreSocialUnblockOperationDataSource setPerson:]
  -[MPStoreSocialUnblockOperationDataSource httpBody]
  -[MPStoreSocialUnblockOperationDataSource person]
  -[MPStoreSocialUnblockOperationDataSource httpBodyType]
  -[MPStoreSocialUnblockOperationDataSource bagKey]
  -[MPStoreSocialUnblockOperationDataSource httpMethod]


MPMediaLibraryView : NSObject <NSCopying>
 @property  {shared_ptr<mlcore::DeviceLibraryView>=^{DeviceLibraryView}^{__shared_weak_count}} mlCoreView
 @property  MPMediaLibrary *library
 @property  unsigned long filteringOptions

  // instance methods
  -[MPMediaLibraryView mlCoreView]
  -[MPMediaLibraryView library]
  -[MPMediaLibraryView .cxx_construct]
  -[MPMediaLibraryView .cxx_destruct]
  -[MPMediaLibraryView _performCoreQuery:error:]
  -[MPMediaLibraryView initWithLibrary:filteringOptions:]
  -[MPMediaLibraryView performCoreSearchQuery:withCompletion:]
  -[MPMediaLibraryView filteringOptions]
  -[MPMediaLibraryView hasEntitiesForModelKind:]
  -[MPMediaLibraryView copyWithZone:]
  -[MPMediaLibraryView performCoreQuery:withCompletion:]


MPRequest : NSObject <NSCopying, NSObject>
 @property  NSOperationQueue *calloutQueue
 @property  NSError *cancelationError
 @property  NSObject<OS_dispatch_queue> *cleanupQueue
 @property  NSOperationQueue *queue
 @property  NSArray *middlewareClasses
 @property  NSString *label
 @property  long long qualityOfService
 @property  double timeoutInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPRequest responseClass]
  +[MPRequest expectedMaximumResponseTimeInterval]

  // instance methods
  -[MPRequest label]
  -[MPRequest middlewareClasses]
  -[MPRequest cleanupQueue]
  -[MPRequest calloutQueue]
  -[MPRequest _performWithCompletion:]
  -[MPRequest qualityOfService]
  -[MPRequest .cxx_destruct]
  -[MPRequest prepareForResponseWithCompletion:]
  -[MPRequest performWithCompletion:]
  -[MPRequest setQualityOfService:]
  -[MPRequest init]
  -[MPRequest setMiddlewareClasses:]
  -[MPRequest _stateDumpObject]
  -[MPRequest cancelationError]
  -[MPRequest timeoutInterval]
  -[MPRequest cancel]
  -[MPRequest queue]
  -[MPRequest setLabel:]
  -[MPRequest copyWithZone:]
  -[MPRequest setTimeoutInterval:]


MPResponse : NSObject <NSCopying, NSObject>
 @property  NSArray *middleware
 @property  id builder
 @property  id request
 @property  BOOL valid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPResponse builderProtocol]

  // instance methods
  -[MPResponse setMiddleware:]
  -[MPResponse isValid]
  -[MPResponse .cxx_destruct]
  -[MPResponse middleware]
  -[MPResponse builder]
  -[MPResponse initWithRequest:middleware:]
  -[MPResponse _stateDumpObject]
  -[MPResponse request]
  -[MPResponse chain]
  -[MPResponse invalidate]
  -[MPResponse copyWithZone:]


MPModelResponse : NSObject
 @property  MPPropertySet *deferredSectionProperties
 @property  MPPropertySet *deferredItemProperties
 @property  MPSectionedCollection *results
 @property  BOOL empty
 @property  MPModelRequest *request
 @property  BOOL valid

  // instance methods
  -[MPModelResponse setResults:]
  -[MPModelResponse isEmpty]
  -[MPModelResponse initWithRequest:]
  -[MPModelResponse isValid]
  -[MPModelResponse results]
  -[MPModelResponse .cxx_destruct]
  -[MPModelResponse deferredSectionProperties]
  -[MPModelResponse getChangeDetailsFromPreviousResponse:completion:]
  -[MPModelResponse setDeferredSectionProperties:]
  -[MPModelResponse deferredItemProperties]
  -[MPModelResponse setDeferredItemProperties:]
  -[MPModelResponse init]
  -[MPModelResponse request]
  -[MPModelResponse _invalidate]


MPModelLyricsKind : MPModelKind
  // class methods
  +[MPModelLyricsKind identityKind]

  // instance methods
  -[MPModelLyricsKind humanDescription]


MPModelLyrics : MPModelObject
 @property  NSString *text
 @property  NSString *TTML
 @property  BOOL hasStoreLyrics
 @property  BOOL hasLibraryLyrics
 @property  BOOL hasTimeSyncedLyrics

  // class methods
  +[MPModelLyrics __TTML_KEY]
  +[MPModelLyrics __hasStoreLyrics_KEY]
  +[MPModelLyrics __hasLibraryLyrics_KEY]
  +[MPModelLyrics __hasTimeSyncedLyrics_KEY]
  +[MPModelLyrics __text_KEY]


MPMoviePlayerController : NSObject <AVPlayerViewControllerDelegatePrivate, MPMediaPlayback>
 @property  AVPlayerViewController *playerViewController
 @property  UIViewController *hostingViewController
 @property  NSURL *contentURL
 @property  UIView *view
 @property  UIView *backgroundView
 @property  long long playbackState
 @property  unsigned long loadState
 @property  long long controlStyle
 @property  long long repeatMode
 @property  BOOL shouldAutoplay
 @property  BOOL fullscreen
 @property  long long scalingMode
 @property  BOOL readyForDisplay
 @property  unsigned long movieMediaTypes
 @property  long long movieSourceType
 @property  double duration
 @property  double playableDuration
 @property  {CGSize=dd} naturalSize
 @property  double initialPlaybackTime
 @property  double endPlaybackTime
 @property  BOOL allowsAirPlay
 @property  BOOL airPlayVideoActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isPreparedToPlay
 @property  double currentPlaybackTime
 @property  float currentPlaybackRate

  // instance methods
  -[MPMoviePlayerController naturalSize]
  -[MPMoviePlayerController isFullscreen]
  -[MPMoviePlayerController playbackState]
  -[MPMoviePlayerController currentPlaybackTime]
  -[MPMoviePlayerController play]
  -[MPMoviePlayerController setFullscreen:]
  -[MPMoviePlayerController loadState]
  -[MPMoviePlayerController .cxx_destruct]
  -[MPMoviePlayerController stop]
  -[MPMoviePlayerController errorLog]
  -[MPMoviePlayerController endSeeking]
  -[MPMoviePlayerController setHostingViewController:]
  -[MPMoviePlayerController initWithContentURL:]
  -[MPMoviePlayerController _avPlayerItemDidPlayToEndNotification:]
  -[MPMoviePlayerController setControlStyle:]
  -[MPMoviePlayerController accessLog]
  -[MPMoviePlayerController init]
  -[MPMoviePlayerController setFullscreen:animated:]
  -[MPMoviePlayerController view]
  -[MPMoviePlayerController prepareToPlay]
  -[MPMoviePlayerController timedMetadata]
  -[MPMoviePlayerController beginSeekingForward]
  -[MPMoviePlayerController playerViewController:willBeginFullScreenPresentationWithAnimationCoordinator:]
  -[MPMoviePlayerController playerViewController:willEndFullScreenPresentationWithAnimationCoordinator:]
  -[MPMoviePlayerController setCurrentPlaybackRate:]
  -[MPMoviePlayerController beginSeekingBackward]
  -[MPMoviePlayerController initialPlaybackTime]
  -[MPMoviePlayerController endPlaybackTime]
  -[MPMoviePlayerController controlStyle]
  -[MPMoviePlayerController setScalingMode:]
  -[MPMoviePlayerController readyForDisplay]
  -[MPMoviePlayerController isPreparedToPlay]
  -[MPMoviePlayerController scalingMode]
  -[MPMoviePlayerController setShouldAutoplay:]
  -[MPMoviePlayerController currentPlaybackRate]
  -[MPMoviePlayerController movieMediaTypes]
  -[MPMoviePlayerController playableDuration]
  -[MPMoviePlayerController setInitialPlaybackTime:]
  -[MPMoviePlayerController setEndPlaybackTime:]
  -[MPMoviePlayerController allowsAirPlay]
  -[MPMoviePlayerController setAllowsAirPlay:]
  -[MPMoviePlayerController isAirPlayVideoActive]
  -[MPMoviePlayerController thumbnailImageAtTime:timeOption:]
  -[MPMoviePlayerController requestThumbnailImagesAtTimes:timeOption:]
  -[MPMoviePlayerController useApplicationAudioSession]
  -[MPMoviePlayerController cancelAllThumbnailImageRequests]
  -[MPMoviePlayerController setUseApplicationAudioSession:]
  -[MPMoviePlayerController _advertisementView]
  -[MPMoviePlayerController _videoViewController]
  -[MPMoviePlayerController movieSourceType]
  -[MPMoviePlayerController setMovieSourceType:]
  -[MPMoviePlayerController shouldAutoplay]
  -[MPMoviePlayerController pause]
  -[MPMoviePlayerController repeatMode]
  -[MPMoviePlayerController hostingViewController]
  -[MPMoviePlayerController playerViewController]
  -[MPMoviePlayerController setContentURL:]
  -[MPMoviePlayerController dealloc]
  -[MPMoviePlayerController contentURL]
  -[MPMoviePlayerController setRepeatMode:]
  -[MPMoviePlayerController observeValueForKeyPath:ofObject:change:context:]
  -[MPMoviePlayerController duration]
  -[MPMoviePlayerController setCurrentPlaybackTime:]
  -[MPMoviePlayerController backgroundView]


_MPMoviePlayerProxyView : UIView
 @property  MPMoviePlayerController *controller

  // instance methods
  -[_MPMoviePlayerProxyView willMoveToSuperview:]
  -[_MPMoviePlayerProxyView controller]
  -[_MPMoviePlayerProxyView willMoveToWindow:]
  -[_MPMoviePlayerProxyView .cxx_destruct]
  -[_MPMoviePlayerProxyView setFrame:]
  -[_MPMoviePlayerProxyView initWithMoviePlayerController:]
  -[_MPMoviePlayerProxyView _updateContainmentInWindow:superview:]


MPTimedMetadata : NSObject
 @property  NSString *key
 @property  NSString *keyspace
 @property  id value
 @property  double timestamp
 @property  NSDictionary *allMetadata

  // instance methods
  -[MPTimedMetadata .cxx_destruct]
  -[MPTimedMetadata init]
  -[MPTimedMetadata keyspace]
  -[MPTimedMetadata _initWithMetadataItem:]
  -[MPTimedMetadata allMetadata]
  -[MPTimedMetadata value]
  -[MPTimedMetadata timestamp]
  -[MPTimedMetadata key]


MPMovieAccessLog : NSObject <NSCopying>
 @property  NSData *extendedLogData
 @property  unsigned long extendedLogDataStringEncoding
 @property  NSArray *events

  // instance methods
  -[MPMovieAccessLog events]
  -[MPMovieAccessLog .cxx_destruct]
  -[MPMovieAccessLog _initWithAVItemAccessLog:]
  -[MPMovieAccessLog extendedLogData]
  -[MPMovieAccessLog extendedLogDataStringEncoding]
  -[MPMovieAccessLog copyWithZone:]


MPMovieErrorLog : NSObject <NSCopying>
 @property  NSData *extendedLogData
 @property  unsigned long extendedLogDataStringEncoding
 @property  NSArray *events

  // instance methods
  -[MPMovieErrorLog events]
  -[MPMovieErrorLog .cxx_destruct]
  -[MPMovieErrorLog _initWithAVItemErrorLog:]
  -[MPMovieErrorLog extendedLogData]
  -[MPMovieErrorLog extendedLogDataStringEncoding]
  -[MPMovieErrorLog copyWithZone:]


MPMovieAccessLogEvent : NSObject <NSCopying>
 @property  unsigned long numberOfSegmentsDownloaded
 @property  NSDate *playbackStartDate
 @property  NSString *URI
 @property  NSString *serverAddress
 @property  unsigned long numberOfServerAddressChanges
 @property  NSString *playbackSessionID
 @property  double playbackStartOffset
 @property  double segmentsDownloadedDuration
 @property  double durationWatched
 @property  long long numberOfStalls
 @property  long long numberOfBytesTransferred
 @property  double observedBitrate
 @property  double indicatedBitrate
 @property  long long numberOfDroppedVideoFrames

  // instance methods
  -[MPMovieAccessLogEvent URI]
  -[MPMovieAccessLogEvent .cxx_destruct]
  -[MPMovieAccessLogEvent playbackStartDate]
  -[MPMovieAccessLogEvent _initWithAVItemAccessLogEvent:]
  -[MPMovieAccessLogEvent serverAddress]
  -[MPMovieAccessLogEvent numberOfServerAddressChanges]
  -[MPMovieAccessLogEvent playbackSessionID]
  -[MPMovieAccessLogEvent playbackStartOffset]
  -[MPMovieAccessLogEvent segmentsDownloadedDuration]
  -[MPMovieAccessLogEvent durationWatched]
  -[MPMovieAccessLogEvent numberOfStalls]
  -[MPMovieAccessLogEvent numberOfBytesTransferred]
  -[MPMovieAccessLogEvent observedBitrate]
  -[MPMovieAccessLogEvent indicatedBitrate]
  -[MPMovieAccessLogEvent numberOfDroppedVideoFrames]
  -[MPMovieAccessLogEvent numberOfSegmentsDownloaded]
  -[MPMovieAccessLogEvent copyWithZone:]


MPMovieErrorLogEvent : NSObject <NSCopying>
 @property  NSDate *date
 @property  NSString *URI
 @property  NSString *serverAddress
 @property  NSString *playbackSessionID
 @property  long long errorStatusCode
 @property  NSString *errorDomain
 @property  NSString *errorComment

  // instance methods
  -[MPMovieErrorLogEvent errorDomain]
  -[MPMovieErrorLogEvent URI]
  -[MPMovieErrorLogEvent .cxx_destruct]
  -[MPMovieErrorLogEvent _initWithAVItemErrorLogEvent:]
  -[MPMovieErrorLogEvent errorComment]
  -[MPMovieErrorLogEvent serverAddress]
  -[MPMovieErrorLogEvent playbackSessionID]
  -[MPMovieErrorLogEvent errorStatusCode]
  -[MPMovieErrorLogEvent copyWithZone:]
  -[MPMovieErrorLogEvent date]


MPAssistantAnalyticsReportingController : NSObject
  // class methods
  +[MPAssistantAnalyticsReportingController sharedController]

  // instance methods
  -[MPAssistantAnalyticsReportingController .cxx_destruct]
  -[MPAssistantAnalyticsReportingController _itemTimebaseDidChangeNotification:]
  -[MPAssistantAnalyticsReportingController _itemDidChangeNotification:]
  -[MPAssistantAnalyticsReportingController _bufferingStateDidChangeNotification:]
  -[MPAssistantAnalyticsReportingController _willReloadWithPlaybackContextNotification:]
  -[MPAssistantAnalyticsReportingController _attemptLikelyToKeepUpReportingEventWithPlayer:]
  -[MPAssistantAnalyticsReportingController _attemptPlaybackStartReportingEventWithPlayer:]
  -[MPAssistantAnalyticsReportingController registerPlayer:]
  -[MPAssistantAnalyticsReportingController unregisterPlayer:]
  -[MPAssistantAnalyticsReportingController _createContextDictionaryWithSiriReferenceIdentifier:siriWHAMetricsInfo:]
  -[MPAssistantAnalyticsReportingController logAssistantEvent:withTimestamp:]
  -[MPAssistantAnalyticsReportingController _timebaseEffectiveRateChangedNotification]
  -[MPAssistantAnalyticsReportingController _init]


MPRTCReportingSession : NSObject
 @property  NSDictionary *additionalUserInfo
 @property  NSString *clientName
 @property  int clientType
 @property  long long clientVersion
 @property  NSString *serviceIdentifier
 @property  id hierarchyToken
 @property  unsigned int sessionID
 @property  BOOL hasCompleteSessionSetup
 @property  BOOL hasInitializedSession

  // class methods
  +[MPRTCReportingSession _recordEvent:withInternalSession:]
  +[MPRTCReportingSession newHierarchyTokenFromParentToken:]

  // instance methods
  -[MPRTCReportingSession sessionID]
  -[MPRTCReportingSession setSessionID:]
  -[MPRTCReportingSession setClientType:]
  -[MPRTCReportingSession clientVersion]
  -[MPRTCReportingSession clientType]
  -[MPRTCReportingSession setServiceIdentifier:]
  -[MPRTCReportingSession serviceIdentifier]
  -[MPRTCReportingSession .cxx_destruct]
  -[MPRTCReportingSession init]
  -[MPRTCReportingSession hierarchyToken]
  -[MPRTCReportingSession setHierarchyToken:]
  -[MPRTCReportingSession initializeSession]
  -[MPRTCReportingSession hasCompleteSessionSetup]
  -[MPRTCReportingSession hasInitializedSession]
  -[MPRTCReportingSession additionalUserInfo]
  -[MPRTCReportingSession setAdditionalUserInfo:]
  -[MPRTCReportingSession finalizeSession]
  -[MPRTCReportingSession completeSessionSetup]
  -[MPRTCReportingSession recordEvent:]
  -[MPRTCReportingSession setClientName:]
  -[MPRTCReportingSession setClientVersion:]
  -[MPRTCReportingSession clientName]


MPTiledArtworkRequest : NSObject <NSCopying>
 @property  @? artworkCatalogsBlock
 @property  BOOL allowsSynchronousArtworkCatalogsBlockExecution
 @property  unsigned long numberOfColumns
 @property  unsigned long numberOfRows
 @property  double tileSpacing
 @property  <NSCopying> *entityIdentifier
 @property  <NSCopying> *namespaceIdentifier
 @property  <NSCopying> *revisionIdentifier

  // instance methods
  -[MPTiledArtworkRequest setNumberOfRows:]
  -[MPTiledArtworkRequest setNumberOfColumns:]
  -[MPTiledArtworkRequest numberOfColumns]
  -[MPTiledArtworkRequest numberOfRows]
  -[MPTiledArtworkRequest namespaceIdentifier]
  -[MPTiledArtworkRequest setEntityIdentifier:]
  -[MPTiledArtworkRequest entityIdentifier]
  -[MPTiledArtworkRequest tileSpacing]
  -[MPTiledArtworkRequest .cxx_destruct]
  -[MPTiledArtworkRequest setArtworkCatalogsBlock:]
  -[MPTiledArtworkRequest setTileSpacing:]
  -[MPTiledArtworkRequest setRevisionIdentifier:]
  -[MPTiledArtworkRequest init]
  -[MPTiledArtworkRequest existingArtworkCatalogsWithCount:]
  -[MPTiledArtworkRequest allowsSynchronousArtworkCatalogsBlockExecution]
  -[MPTiledArtworkRequest revisionIdentifier]
  -[MPTiledArtworkRequest artworkCatalogsBlock]
  -[MPTiledArtworkRequest setAllowsSynchronousArtworkCatalogsBlockExecution:]
  -[MPTiledArtworkRequest artworkCatalogsWithCount:]
  -[MPTiledArtworkRequest setNamespaceIdentifier:]
  -[MPTiledArtworkRequest hasExistingArtworkCatalogsWithCount:]
  -[MPTiledArtworkRequest copyWithZone:]


MPRTCReportingEvent : NSObject
 @property  unsigned short rtcReportingCategory
 @property  unsigned short rtcReportingType
 @property  long long networkInterfaceType

  // instance methods
  -[MPRTCReportingEvent newRTCReportingMessageDictionary]
  -[MPRTCReportingEvent rtcReportingType]
  -[MPRTCReportingEvent rtcReportingCategory]
  -[MPRTCReportingEvent newRTCReportingPayloadDictionary]
  -[MPRTCReportingEvent networkInterfaceType]
  -[MPRTCReportingEvent setNetworkInterfaceType:]


MPModelLibraryDeleteEntityChangeRequestOperation : MPAsyncOperation
 @property  MPModelLibraryDeleteEntityChangeRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryDeleteEntityChangeRequestOperation setRequest:]
  -[MPModelLibraryDeleteEntityChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryDeleteEntityChangeRequestOperation responseHandler]
  -[MPModelLibraryDeleteEntityChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryDeleteEntityChangeRequestOperation execute]
  -[MPModelLibraryDeleteEntityChangeRequestOperation _handlePersistentID:modelClass:mediaLibrary:]
  -[MPModelLibraryDeleteEntityChangeRequestOperation _deleteItems:withLibrary:]
  -[MPModelLibraryDeleteEntityChangeRequestOperation _isCloudLibraryEnabled]
  -[MPModelLibraryDeleteEntityChangeRequestOperation request]


MPAVItem : NSObject
 @property  BOOL isAssetLoaded
 @property  BOOL placeholder
 @property  BOOL tailPlaceholder
 @property  BOOL startItem
 @property  <MPStartItemInfoProviding> *startItemInfoProvider
 @property  long long repeatIndex
 @property  long long lastChangeDirection
 @property  BOOL shouldPreventPlayback
 @property  MPModelGenericObject *modelGenericObject
 @property  MPModelPlayEvent *modelPlayEvent
 @property  NSNumber *bookmarkTime
 @property  NSNumber *initialPlaybackStartTime
 @property  NSNumber *initialPlaybackStartTimeOverride
 @property  NSNumber *playbackInfoStartTime
 @property  NSNumber *lastMetadataChangeTime
 @property  id rtcReportingParentHierarchyToken
 @property  NSString *rtcReportingServiceIdentifier
 @property  BOOL allowsAirPlayFromCloud
 @property  BOOL allowsExternalPlayback
 @property  BOOL requiresLoadedAssetForAirPlayProperties
 @property  float _currentPlaybackRate
 @property  BOOL hasFinishedDownloading
 @property  BOOL hasPerformedErrorResolution
 @property  NSDictionary *playbackInfo
 @property  AVPlayerItem *playerItem
 @property  ^{OpaqueCMTimebase=} timebase
 @property  BOOL activeItem
 @property  NSString *storeFrontIdentifier
 @property  BOOL externalDisplay
 @property  {?=qiIq} _playerItemDurationIfAvailable
 @property  NSNumber *storeAccountID
 @property  NSNumber *useListeningHistory
 @property  long long leasePlaybackPreventionState
 @property  ICMusicSubscriptionLeaseStatus *leaseStatus
 @property  NSString *explicitBadge
 @property  BOOL didReachEnd
 @property  BOOL canUseLoadedAsset
 @property  BOOL supportsFastForward
 @property  BOOL supportsRewind
 @property  BOOL supportsRateChange
 @property  NSString *contentItemID
 @property  NSString *previousContentItemID
 @property  BOOL autoPlayItem
 @property  BOOL sharedListeningItem
 @property  long long explicitContentState
 @property  MPNowPlayingContentItem *contentItem
 @property  <MPAVItemObserver> *observer
 @property  BOOL meetsPlaybackHistoryThreshold
 @property  BOOL assetLoaded
 @property  BOOL assetURLValid
 @property  BOOL didAttemptToLoadAsset
 @property  AVAsset *asset
 @property  BOOL canReusePlayerItem
 @property  NSError *playbackError
 @property  NSError *itemError
 @property  long long status
 @property  NSString *queueIdentifier
 @property  BOOL alwaysLive
 @property  BOOL userAdvancedDuringPlayback
 @property  BOOL userChangedItemsDuringPlayback
 @property  BOOL userSkippedPlayback
 @property  MPQueueFeeder *feeder
 @property  BOOL hasPlayedThisSession
 @property  long long playbackMode
 @property  AVPlayerItemAccessLog *accessLog
 @property  double currentTimeDisplayOverride
 @property  float defaultPlaybackRate
 @property  NSArray *chapterTimeMarkers
 @property  NSArray *artworkTimeMarkers
 @property  NSArray *urlTimeMarkers
 @property  NSArray *closedCaptionTimeMarkers
 @property  BOOL useEmbeddedChapterData
 @property  long long type
 @property  long long customAVEQPreset
 @property  BOOL allowsEQ
 @property  NSString *displayableText
 @property  BOOL displayableTextLoaded
 @property  NSString *album
 @property  long long albumStoreID
 @property  NSString *artist
 @property  BOOL artistUploadedContent
 @property  NSString *albumArtist
 @property  long long artistStoreID
 @property  unsigned long albumTrackNumber
 @property  unsigned long albumTrackCount
 @property  NSString *composer
 @property  NSString *copyrightText
 @property  unsigned long discNumber
 @property  unsigned long discCount
 @property  BOOL explicitTrack
 @property  NSString *externalContentIdentifier
 @property  NSString *genre
 @property  unsigned long mediaType
 @property  long long likedState
 @property  BOOL likedStateEnabled
 @property  BOOL supportsLikedState
 @property  NSString *lyrics
 @property  NSString *libraryLyrics
 @property  BOOL hasStoreLyrics
 @property  BOOL hasTimeSyncedLyrics
 @property  NSString *containerUniqueID
 @property  NSString *mainTitle
 @property  BOOL streamable
 @property  unsigned long persistentID
 @property  NSString *databaseID
 @property  unsigned long cloudID
 @property  NSString *personID
 @property  NSString *cloudUniversalLibraryID
 @property  NSString *cloudAlbumID
 @property  unsigned long albumPersistentID
 @property  unsigned long albumArtistPersistentID
 @property  unsigned long artistPersistentID
 @property  unsigned long genrePersistentID
 @property  unsigned long composerPersistentID
 @property  BOOL shouldShowComposer
 @property  NSString *storeItemID
 @property  long long storeItemInt64ID
 @property  long long storePurchasedAdamID
 @property  long long storeSubscriptionAdamID
 @property  float userRating
 @property  BOOL durationIsValid
 @property  double durationIfAvailable
 @property  double durationFromExternalMetadata
 @property  double playableDuration
 @property  double playableDurationIfAvailable
 @property  double timeOfSeekableStart
 @property  double timeOfSeekableEnd
 @property  {CGSize=dd} naturalSize
 @property  NSArray *timedMetadataIfAvailable
 @property  BOOL usesSubscriptionLease
 @property  MPMediaItem *mediaItem
 @property  float loudnessInfoVolumeNormalization
 @property  float soundCheckVolumeNormalization
 @property  BOOL supportsRating
 @property  BOOL prefersSeekOverSkip
 @property  BOOL hasProtectedContent
 @property  BOOL radioItem
 @property  BOOL stationAllowsItemLiking
 @property  NSString *stationHash
 @property  long long stationID
 @property  NSString *stationName
 @property  NSString *stationStringID
 @property  long long stationProviderID
 @property  {?=qiIq} duration
 @property  {?=qiIq} forwardPlaybackEndTime
 @property  {CGSize=dd} presentationSize

  // class methods
  +[MPAVItem URLFromPath:]
  +[MPAVItem isPlaceholder]

  // instance methods
  -[MPAVItem initWithAsset:]
  -[MPAVItem setQueueIdentifier:]
  -[MPAVItem queueIdentifier]
  -[MPAVItem storeFrontIdentifier]
  -[MPAVItem naturalSize]
  -[MPAVItem initWithURL:options:]
  -[MPAVItem isAd]
  -[MPAVItem hasProtectedContent]
  -[MPAVItem lyrics]
  -[MPAVItem discNumber]
  -[MPAVItem setDefaultPlaybackRate:]
  -[MPAVItem album]
  -[MPAVItem personID]
  -[MPAVItem albumYear]
  -[MPAVItem defaultPlaybackRate]
  -[MPAVItem isAlwaysLive]
  -[MPAVItem copyrightText]
  -[MPAVItem artist]
  -[MPAVItem genre]
  -[MPAVItem cloudAlbumID]
  -[MPAVItem cloudID]
  -[MPAVItem hasTimeSyncedLyrics]
  -[MPAVItem discCount]
  -[MPAVItem url]
  -[MPAVItem storeItemID]
  -[MPAVItem artistStoreID]
  -[MPAVItem feeder]
  -[MPAVItem presentationSize]
  -[MPAVItem externalContentIdentifier]
  -[MPAVItem .cxx_destruct]
  -[MPAVItem cloudUniversalLibraryID]
  -[MPAVItem persistentID]
  -[MPAVItem playerItem]
  -[MPAVItem explicitBadge]
  -[MPAVItem composer]
  -[MPAVItem playbackInfo]
  -[MPAVItem hasStoreLyrics]
  -[MPAVItem accessLog]
  -[MPAVItem init]
  -[MPAVItem allowsExternalPlayback]
  -[MPAVItem timebase]
  -[MPAVItem asset]
  -[MPAVItem playableDuration]
  -[MPAVItem initialPlaybackStartTime]
  -[MPAVItem likedState]
  -[MPAVItem allowsEQ]
  -[MPAVItem setPlayerItem:]
  -[MPAVItem startItemInfoProvider]
  -[MPAVItem initWithPlayerItem:]
  -[MPAVItem _loadAssetProperties]
  -[MPAVItem isAssetLoaded]
  -[MPAVItem isAssetLoaded]
  -[MPAVItem _internalLikedStateDidChangeNotification:]
  -[MPAVItem _removeObservationsForAVPlayerItem:]
  -[MPAVItem contentItemID]
  -[MPAVItem loadAssetAndPlayerItem]
  -[MPAVItem setIsAssetLoaded:]
  -[MPAVItem updatePlayerItemMetadata]
  -[MPAVItem _updateSoundCheckVolumeNormalizationForPlayerItem]
  -[MPAVItem _loadAssetAndPlayerItem]
  -[MPAVItem _addObservationsForAVPlayerItem:]
  -[MPAVItem _updateHasFinishedDownloading]
  -[MPAVItem bookmarkTime]
  -[MPAVItem initialPlaybackStartTimeOverride]
  -[MPAVItem playbackInfoStartTime]
  -[MPAVItem displayableText]
  -[MPAVItem albumArtist]
  -[MPAVItem _initialPlaybackStartTimeForPlaybackInfo:]
  -[MPAVItem invalidateContentItemUserInfo]
  -[MPAVItem _persistedLikedState]
  -[MPAVItem forwardPlaybackEndTime]
  -[MPAVItem setLikedState:forUserIdentity:]
  -[MPAVItem _likedStateDidChange]
  -[MPAVItem storeItemInt64ID]
  -[MPAVItem isStartItem]
  -[MPAVItem _handleUpdatedLikedState:forUserIdentity:completion:]
  -[MPAVItem _updateContentItem]
  -[MPAVItem durationFromExternalMetadata]
  -[MPAVItem playbackMode]
  -[MPAVItem _seekableTimeRanges]
  -[MPAVItem _durationFromExternalMetadataIfAvailable]
  -[MPAVItem _performContentItemUpdate:]
  -[MPAVItem _playableDurationForLoadedTimeRanges:]
  -[MPAVItem _playerItemDurationIfAvailable]
  -[MPAVItem albumTrackCount]
  -[MPAVItem setSoundCheckVolumeNormalization:]
  -[MPAVItem artworkCatalogForPlaybackTime:]
  -[MPAVItem _onAssetQueueClearAsset]
  -[MPAVItem albumStoreID]
  -[MPAVItem storeSubscriptionAdamID]
  -[MPAVItem timeOfSeekableStart]
  -[MPAVItem albumTrackNumber]
  -[MPAVItem isExplicitTrack]
  -[MPAVItem modelPlayEvent]
  -[MPAVItem contentItem]
  -[MPAVItem stationStringID]
  -[MPAVItem modelGenericObject]
  -[MPAVItem libraryLyrics]
  -[MPAVItem _shouldPublishArtworkURL]
  -[MPAVItem _updateAudioFormatInfoForContentItem:]
  -[MPAVItem _contentItemUserInfo]
  -[MPAVItem _contentItemDeviceSpecificUserInfo]
  -[MPAVItem itemError]
  -[MPAVItem stationProviderID]
  -[MPAVItem timeOfSeekableEnd]
  -[MPAVItem containerUniqueID]
  -[MPAVItem setRating:]
  -[MPAVItem storeAccountID]
  -[MPAVItem useListeningHistory]
  -[MPAVItem isAutoPlayItem]
  -[MPAVItem isSharedListeningItem]
  -[MPAVItem isArtistUploadedContent]
  -[MPAVItem albumPersistentID]
  -[MPAVItem albumArtistPersistentID]
  -[MPAVItem artistPersistentID]
  -[MPAVItem genrePersistentID]
  -[MPAVItem composerPersistentID]
  -[MPAVItem storePurchasedAdamID]
  -[MPAVItem customAVEQPreset]
  -[MPAVItem _itemAttributeAvailableKey:]
  -[MPAVItem _currentPlaybackRateDidChange:]
  -[MPAVItem _imageChapterTrackIDsForAsset:]
  -[MPAVItem canUseLoadedAsset]
  -[MPAVItem supportsFastForward]
  -[MPAVItem isRadioItem]
  -[MPAVItem setMeetsPlaybackHistoryThresholdForElapsedTime:startTime:]
  -[MPAVItem isSupportedDefaultPlaybackSpeed:]
  -[MPAVItem stationHash]
  -[MPAVItem supportsRewind]
  -[MPAVItem supportsRateChange]
  -[MPAVItem disableItemReuse]
  -[MPAVItem playbackError]
  -[MPAVItem resetBookkeeping]
  -[MPAVItem subtitleTrackID]
  -[MPAVItem setPlaybackStoppedTime:]
  -[MPAVItem notePlaybackFinishedByHittingEnd]
  -[MPAVItem setPlaybackCheckpointCurrentTime:]
  -[MPAVItem stationName]
  -[MPAVItem setPlaybackFinishedTime:]
  -[MPAVItem setSubtitleTrackID:]
  -[MPAVItem setUserAdvancedDuringPlayback:]
  -[MPAVItem setUserSkippedPlayback:]
  -[MPAVItem setUserChangedItemsDuringPlayback:]
  -[MPAVItem userAdvancedDuringPlayback]
  -[MPAVItem userSkippedPlayback]
  -[MPAVItem durationInSeconds]
  -[MPAVItem userChangedItemsDuringPlayback]
  -[MPAVItem applyVolumeNormalizationWithSoundCheckEnabled:]
  -[MPAVItem isAssetURLValid]
  -[MPAVItem isValidPlayerSubstituteForItem:]
  -[MPAVItem setExplicitBadge:]
  -[MPAVItem setLastChangeDirection:]
  -[MPAVItem currentTimeDisplayOverride]
  -[MPAVItem usesSubscriptionLease]
  -[MPAVItem displayableTextLoaded]
  -[MPAVItem hasPlayedThisSession]
  -[MPAVItem playbackRateForLevel:direction:paused:]
  -[MPAVItem prepareForRate:completionHandler:]
  -[MPAVItem scanIntervalForLevel:paused:]
  -[MPAVItem setHasPlayedThisSession:]
  -[MPAVItem setLikedState:]
  -[MPAVItem supportsRating]
  -[MPAVItem timedMetadataIfAvailable]
  -[MPAVItem setContentItemID:]
  -[MPAVItem stationAllowsItemLiking]
  -[MPAVItem durationIsValid]
  -[MPAVItem durationIfAvailable]
  -[MPAVItem playableDurationIfAvailable]
  -[MPAVItem _clearAsset]
  -[MPAVItem _clearAssetNow]
  -[MPAVItem setupWithPlaybackInfo]
  -[MPAVItem setupEQPresetWithDefaultPreset:]
  -[MPAVItem _updateDurationSnapshotWithElapsedTime:playbackRate:]
  -[MPAVItem _applyLoudnessInfo]
  -[MPAVItem _expectedStartTimeWithPlaybackInfo:]
  -[MPAVItem _expectedStopTimeWithPlaybackInfo:]
  -[MPAVItem _setCurrentPlaybackRate:]
  -[MPAVItem _setNeedsPersistedLikedStateUpdate]
  -[MPAVItem setAutoPlayItem:]
  -[MPAVItem setSharedListeningItem:]
  -[MPAVItem setExplicitContentState:]
  -[MPAVItem invalidateContentItemDeviceSpecificUserInfo]
  -[MPAVItem invalidateContentItemAudioFormatInfo]
  -[MPAVItem reevaluateType]
  -[MPAVItem reevaluateHasProtectedContent]
  -[MPAVItem replacePlayerItemWithPlayerItem:]
  -[MPAVItem resolvePlaybackError:withCompletion:]
  -[MPAVItem _willBecomeActivePlayerItem]
  -[MPAVItem _willResignActivePlayerItem]
  -[MPAVItem _didResignActivePlayerItem]
  -[MPAVItem analyticsContentType]
  -[MPAVItem _didBecomeActivePlayerItem]
  -[MPAVItem analyticsFormatType]
  -[MPAVItem pauseContentKeySession]
  -[MPAVItem resumeContentKeySession]
  -[MPAVItem _currentPlaybackRate]
  -[MPAVItem soundCheckVolumeNormalization]
  -[MPAVItem rtcReportingParentHierarchyToken]
  -[MPAVItem canReusePlayerItem]
  -[MPAVItem setRtcReportingParentHierarchyToken:]
  -[MPAVItem meetsPlaybackHistoryThreshold]
  -[MPAVItem didAttemptToLoadAsset]
  -[MPAVItem setItemError:]
  -[MPAVItem chapterTimeMarkers]
  -[MPAVItem artworkTimeMarkers]
  -[MPAVItem urlTimeMarkers]
  -[MPAVItem closedCaptionTimeMarkers]
  -[MPAVItem useEmbeddedChapterData]
  -[MPAVItem setClosedCaptionTimeMarkers:]
  -[MPAVItem isLikedStateEnabled]
  -[MPAVItem supportsLikedState]
  -[MPAVItem loudnessInfoVolumeNormalization]
  -[MPAVItem setLoudnessInfoVolumeNormalization:]
  -[MPAVItem prefersSeekOverSkip]
  -[MPAVItem isTailPlaceholder]
  -[MPAVItem setStartItemInfoProvider:]
  -[MPAVItem repeatIndex]
  -[MPAVItem setRepeatIndex:]
  -[MPAVItem shouldPreventPlayback]
  -[MPAVItem setModelPlayEvent:]
  -[MPAVItem lastMetadataChangeTime]
  -[MPAVItem leaseStatus]
  -[MPAVItem setInitialPlaybackStartTimeOverride:]
  -[MPAVItem setLastMetadataChangeTime:]
  -[MPAVItem rtcReportingServiceIdentifier]
  -[MPAVItem allowsAirPlayFromCloud]
  -[MPAVItem requiresLoadedAssetForAirPlayProperties]
  -[MPAVItem hasFinishedDownloading]
  -[MPAVItem setPlaybackInfo:]
  -[MPAVItem hasPerformedErrorResolution]
  -[MPAVItem setHasPerformedErrorResolution:]
  -[MPAVItem isActiveItem]
  -[MPAVItem setActiveItem:]
  -[MPAVItem didReachEnd]
  -[MPAVItem hasExternalDisplay]
  -[MPAVItem setExternalDisplay:]
  -[MPAVItem leasePlaybackPreventionState]
  -[MPAVItem previousContentItemID]
  -[MPAVItem setPreviousContentItemID:]
  -[MPAVItem stationID]
  -[MPAVItem shouldShowComposer]
  -[MPAVItem lastChangeDirection]
  -[MPAVItem observer]
  -[MPAVItem status]
  -[MPAVItem mediaItem]
  -[MPAVItem mainTitle]
  -[MPAVItem userRating]
  -[MPAVItem type]
  -[MPAVItem path]
  -[MPAVItem artworkCatalogBlock]
  -[MPAVItem mediaType]
  -[MPAVItem setObserver:]
  -[MPAVItem databaseID]
  -[MPAVItem dealloc]
  -[MPAVItem explicitContentState]
  -[MPAVItem isPlaceholder]
  -[MPAVItem isStreamable]
  -[MPAVItem setFeeder:]
  -[MPAVItem observeValueForKeyPath:ofObject:change:context:]
  -[MPAVItem duration]
  -[MPAVItem initWithURL:]


MPStoreItemMetadataRequest : NSObject
 @property  ICClientInfo *clientInfo
 @property  ICUserIdentity *delegatedUserIdentity
 @property  ICUserIdentity *userIdentity
 @property  ICUserIdentityStore *userIdentityStore
 @property  ICStorePlatformRequest *storePlatformRequest
 @property  BOOL allowLocalEquivalencies
 @property  unsigned long reason
 @property  NSArray *itemIdentifiers
 @property  NSNumber *timeoutInterval
 @property  NSString *platform
 @property  double retryDelay
 @property  BOOL shouldIgnoreCache
 @property  BOOL shouldIgnoreExpiration
 @property  BOOL shouldRequireCachedResults
 @property  NSString *clientIdentifier
 @property  NSString *requestingBundleIdentifier
 @property  NSString *requestingBundleVersion
 @property  BOOL personalized
 @property  long long personalizationStyle

  // instance methods
  -[MPStoreItemMetadataRequest setPersonalizationStyle:]
  -[MPStoreItemMetadataRequest userIdentityStore]
  -[MPStoreItemMetadataRequest personalizationStyle]
  -[MPStoreItemMetadataRequest retryDelay]
  -[MPStoreItemMetadataRequest itemIdentifiers]
  -[MPStoreItemMetadataRequest setPlatform:]
  -[MPStoreItemMetadataRequest userIdentity]
  -[MPStoreItemMetadataRequest platform]
  -[MPStoreItemMetadataRequest shouldIgnoreExpiration]
  -[MPStoreItemMetadataRequest setRetryDelay:]
  -[MPStoreItemMetadataRequest setUserIdentity:]
  -[MPStoreItemMetadataRequest delegatedUserIdentity]
  -[MPStoreItemMetadataRequest setClientInfo:]
  -[MPStoreItemMetadataRequest shouldIgnoreCache]
  -[MPStoreItemMetadataRequest requestingBundleVersion]
  -[MPStoreItemMetadataRequest .cxx_destruct]
  -[MPStoreItemMetadataRequest setRequestingBundleIdentifier:]
  -[MPStoreItemMetadataRequest setAllowLocalEquivalencies:]
  -[MPStoreItemMetadataRequest clientInfo]
  -[MPStoreItemMetadataRequest setUserIdentityStore:]
  -[MPStoreItemMetadataRequest init]
  -[MPStoreItemMetadataRequest setItemIdentifiers:]
  -[MPStoreItemMetadataRequest requestingBundleIdentifier]
  -[MPStoreItemMetadataRequest clientIdentifier]
  -[MPStoreItemMetadataRequest timeoutInterval]
  -[MPStoreItemMetadataRequest setDelegatedUserIdentity:]
  -[MPStoreItemMetadataRequest isPersonalized]
  -[MPStoreItemMetadataRequest reason]
  -[MPStoreItemMetadataRequest setShouldIgnoreExpiration:]
  -[MPStoreItemMetadataRequest setShouldRequireCachedResults:]
  -[MPStoreItemMetadataRequest shouldRequireCachedResults]
  -[MPStoreItemMetadataRequest storePlatformRequest]
  -[MPStoreItemMetadataRequest setReason:]
  -[MPStoreItemMetadataRequest setShouldIgnoreCache:]
  -[MPStoreItemMetadataRequest allowLocalEquivalencies]
  -[MPStoreItemMetadataRequest setRequestingBundleVersion:]
  -[MPStoreItemMetadataRequest setClientIdentifier:]
  -[MPStoreItemMetadataRequest setTimeoutInterval:]


MPQueueFeeder : NSObject
 @property  NSString *playActivityQueueGroupingID
 @property  NSString *playActivityFeatureName
 @property  NSData *playActivityRecommendationData
 @property  NSString *siriReferenceIdentifier
 @property  NSDictionary *siriWHAMetricsInfo
 @property  NSString *uniqueIdentifier

  // instance methods
  -[MPQueueFeeder playActivityRecommendationData]
  -[MPQueueFeeder errorResolverForItem:]
  -[MPQueueFeeder uniqueIdentifier]
  -[MPQueueFeeder .cxx_destruct]
  -[MPQueueFeeder setSiriReferenceIdentifier:]
  -[MPQueueFeeder init]
  -[MPQueueFeeder siriReferenceIdentifier]
  -[MPQueueFeeder siriWHAMetricsInfo]
  -[MPQueueFeeder setPlayActivityRecommendationData:]
  -[MPQueueFeeder replaceIdentifierRegistry:]
  -[MPQueueFeeder identifierRegistryWithExclusiveAccess:]
  -[MPQueueFeeder identifierRegistryWithExclusiveAccessReturningObject:]
  -[MPQueueFeeder identifierRegistryWithExclusiveAccessReturningBOOL:]
  -[MPQueueFeeder supplementalPlaybackContextWithReason:]
  -[MPQueueFeeder identifierRegistryWithExclusiveAccessReturningInteger:]
  -[MPQueueFeeder supplementalPlaybackContextBehavior]
  -[MPQueueFeeder getRepresentativeMetadataForPlaybackContext:properties:completion:]
  -[MPQueueFeeder firstModelPlayEvent]
  -[MPQueueFeeder applyVolumeNormalizationForItem:]
  -[MPQueueFeeder playActivityQueueGroupingID]
  -[MPQueueFeeder setPlayActivityQueueGroupingID:]
  -[MPQueueFeeder setSiriWHAMetricsInfo:]
  -[MPQueueFeeder playActivityFeatureName]
  -[MPQueueFeeder setPlayActivityFeatureName:]


MPModelLibraryDeleteEntityChangeRequest : NSObject <NSCopying>
 @property  MPModelObject *modelObject

  // instance methods
  -[MPModelLibraryDeleteEntityChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryDeleteEntityChangeRequest .cxx_destruct]
  -[MPModelLibraryDeleteEntityChangeRequest setModelObject:]
  -[MPModelLibraryDeleteEntityChangeRequest performWithResponseHandler:]
  -[MPModelLibraryDeleteEntityChangeRequest copyWithZone:]
  -[MPModelLibraryDeleteEntityChangeRequest modelObject]


MPStoreItemMetadata : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *cacheableItemIdentifier
 @property  MPStoreItemMetadata *parentStoreItemMetadata
 @property  NSString *artistName
 @property  MPStoreArtworkRequestToken *artworkRequestToken
 @property  MPStoreArtworkRequestToken *stationGlyphRequestToken
 @property  id artistStoreID
 @property  NSArray *artworkTrackIDs
 @property  NSString *artistUploadedContentType
 @property  BOOL beats1
 @property  NSArray *childrenStoreIDs
 @property  NSArray *childStoreItemMetadatas
 @property  NSString *cloudAlbumID
 @property  unsigned long cloudID
 @property  NSString *collectionName
 @property  id collectionStoreID
 @property  BOOL compilation
 @property  NSString *composerName
 @property  NSString *copyrightText
 @property  NSString *curatorName
 @property  NSString *curatorHandle
 @property  id curatorID
 @property  NSString *descriptionText
 @property  NSString *shortDescriptionText
 @property  long long discCount
 @property  long long discNumber
 @property  double duration
 @property  NSString *editorNotes
 @property  NSDate *expirationDate
 @property  BOOL expired
 @property  NSString *shortEditorNotes
 @property  NSDictionary *effectiveStorePlatformDictionary
 @property  NSDictionary *importableStorePlatformDictionary
 @property  BOOL explicitContent
 @property  long long explicitRating
 @property  BOOL hasArtistBiography
 @property  BOOL hasLyrics
 @property  BOOL hasTimeSyncedLyrics
 @property  BOOL hasSocialPosts
 @property  BOOL hasSubscriptionOffer
 @property  NSArray *genreNames
 @property  BOOL isPreorder
 @property  NSString *itemKind
 @property  NSString *playlistType
 @property  NSString *personalMixSortKey
 @property  NSString *iTunesBrandType
 @property  BOOL masteredForiTunes
 @property  NSArray *audioTraits
 @property  MPStoreArtworkRequestToken *latestAlbumArtworkRequestToken
 @property  long long movementCount
 @property  NSString *movementName
 @property  long long movementNumber
 @property  long long movieClipsCount
 @property  NSArray *movieClips
 @property  NSString *name
 @property  NSArray *offers
 @property  NSArray *playlistIdentifiers
 @property  NSNumber *popularity
 @property  NSDate *releaseDate
 @property  NSDate *lastModifiedDate
 @property  NSString *shortName
 @property  NSNumber *shouldBookmarkPlayPosition
 @property  NSString *versionHash
 @property  BOOL shouldReportPlayEvents
 @property  BOOL showComposer
 @property  NSString *cloudUniversalLibraryID
 @property  long long purchasedAdamID
 @property  long long subscriptionAdamID
 @property  id storeID
 @property  NSArray *formerStoreAdamIDs
 @property  id socialProfileID
 @property  BOOL storeRedownloadable
 @property  long long trackCount
 @property  long long trackNumber
 @property  long long seasonNumber
 @property  long long episodeCount
 @property  NSURL *shortURL
 @property  NSURL *URL
 @property  NSString *videoSubtype
 @property  NSString *workName
 @property  NSString *handle
 @property  NSString *nameRaw
 @property  BOOL privatePerson
 @property  BOOL verifiedPerson
 @property  long long radioStationTypeID
 @property  NSString *radioStationSubtype
 @property  BOOL isChart
 @property  NSString *radioStationProviderName
 @property  BOOL live
 @property  NSArray *radioStationEvents
 @property  NSURL *classicalURL

  // class methods
  +[MPStoreItemMetadata storeServerCalendar]
  +[MPStoreItemMetadata supportsSecureCoding]
  +[MPStoreItemMetadata artworkRequestTokenForStorePlatformArtworkValue:]

  // instance methods
  -[MPStoreItemMetadata releaseDate]
  -[MPStoreItemMetadata versionHash]
  -[MPStoreItemMetadata playlistType]
  -[MPStoreItemMetadata _musicAPIDateFormatter]
  -[MPStoreItemMetadata descriptionText]
  -[MPStoreItemMetadata popularity]
  -[MPStoreItemMetadata effectiveStorePlatformDictionary]
  -[MPStoreItemMetadata hasLyrics]
  -[MPStoreItemMetadata shortDescriptionText]
  -[MPStoreItemMetadata artworkRequestToken]
  -[MPStoreItemMetadata discNumber]
  -[MPStoreItemMetadata hasMetadataForRequestReason:]
  -[MPStoreItemMetadata movementName]
  -[MPStoreItemMetadata iTunesBrandType]
  -[MPStoreItemMetadata artistName]
  -[MPStoreItemMetadata isPreorder]
  -[MPStoreItemMetadata shortName]
  -[MPStoreItemMetadata editorNotes]
  -[MPStoreItemMetadata trackCount]
  -[MPStoreItemMetadata flowcaseEditorialArtworkRequestToken]
  -[MPStoreItemMetadata name]
  -[MPStoreItemMetadata playlistIdentifiers]
  -[MPStoreItemMetadata audioTraits]
  -[MPStoreItemMetadata formerStoreAdamIDs]
  -[MPStoreItemMetadata trackNumber]
  -[MPStoreItemMetadata copyrightText]
  -[MPStoreItemMetadata collectionName]
  -[MPStoreItemMetadata offers]
  -[MPStoreItemMetadata initWithDownloadAssetDictionary:]
  -[MPStoreItemMetadata initWithCoder:]
  -[MPStoreItemMetadata brickEditorialArtworkRequestToken]
  -[MPStoreItemMetadata isBeats1]
  -[MPStoreItemMetadata storeID]
  -[MPStoreItemMetadata workName]
  -[MPStoreItemMetadata cloudAlbumID]
  -[MPStoreItemMetadata cacheableItemIdentifier]
  -[MPStoreItemMetadata radioStationTypeID]
  -[MPStoreItemMetadata artworkRequestTokenForScreenshotArtwork]
  -[MPStoreItemMetadata collectionStoreID]
  -[MPStoreItemMetadata cloudID]
  -[MPStoreItemMetadata purchasedAdamID]
  -[MPStoreItemMetadata curatorName]
  -[MPStoreItemMetadata hasTimeSyncedLyrics]
  -[MPStoreItemMetadata metadataWithParentMetadata:]
  -[MPStoreItemMetadata classicalURL]
  -[MPStoreItemMetadata seasonNumber]
  -[MPStoreItemMetadata discCount]
  -[MPStoreItemMetadata radioStationSubtype]
  -[MPStoreItemMetadata hasSocialPosts]
  -[MPStoreItemMetadata latestAlbumArtworkRequestToken]
  -[MPStoreItemMetadata shortURL]
  -[MPStoreItemMetadata initWithStoreMusicAPIDictionary:]
  -[MPStoreItemMetadata artistStoreID]
  -[MPStoreItemMetadata _storePlatformLastModifiedDateFormatter]
  -[MPStoreItemMetadata initWithStorePlatformDictionary:]
  -[MPStoreItemMetadata stationGlyphRequestTokenForStorePlatformDictionary:]
  -[MPStoreItemMetadata .cxx_destruct]
  -[MPStoreItemMetadata cloudUniversalLibraryID]
  -[MPStoreItemMetadata isExpired]
  -[MPStoreItemMetadata artistUploadedContentType]
  -[MPStoreItemMetadata descriptionTextWithStyle:]
  -[MPStoreItemMetadata shouldBookmarkPlayPosition]
  -[MPStoreItemMetadata hasSubscriptionOffer]
  -[MPStoreItemMetadata isStoreRedownloadable]
  -[MPStoreItemMetadata stationGlyphRequestToken]
  -[MPStoreItemMetadata shortEditorNotes]
  -[MPStoreItemMetadata nameRaw]
  -[MPStoreItemMetadata childStorePlatformDictionaryForStoreID:]
  -[MPStoreItemMetadata curatorID]
  -[MPStoreItemMetadata _fetchValueFromStoreMusicAPIDictionary:]
  -[MPStoreItemMetadata composerName]
  -[MPStoreItemMetadata genreNames]
  -[MPStoreItemMetadata shouldReportPlayEvents]
  -[MPStoreItemMetadata episodeCount]
  -[MPStoreItemMetadata videoSubtype]
  -[MPStoreItemMetadata metadataByAppendingMetadata:]
  -[MPStoreItemMetadata movieClipsCount]
  -[MPStoreItemMetadata isVerifiedPerson]
  -[MPStoreItemMetadata isCompilation]
  -[MPStoreItemMetadata showComposer]
  -[MPStoreItemMetadata movementNumber]
  -[MPStoreItemMetadata radioStationProviderName]
  -[MPStoreItemMetadata itemKind]
  -[MPStoreItemMetadata initWithStorePlatformDictionary:expirationDate:]
  -[MPStoreItemMetadata handle]
  -[MPStoreItemMetadata isPrivatePerson]
  -[MPStoreItemMetadata tvEpisodeArtworkRequestToken]
  -[MPStoreItemMetadata artworkRequestTokenForEditorialArtworkKind:]
  -[MPStoreItemMetadata URL]
  -[MPStoreItemMetadata artworkTrackIDs]
  -[MPStoreItemMetadata stationGlyphRequestTokenForStoreMusicAPIDictionary]
  -[MPStoreItemMetadata explicitRating]
  -[MPStoreItemMetadata metadataWithChildStorePlatformDictionaries:]
  -[MPStoreItemMetadata avatarArtworkRequestToken]
  -[MPStoreItemMetadata movieClips]
  -[MPStoreItemMetadata socialProfileID]
  -[MPStoreItemMetadata isLive]
  -[MPStoreItemMetadata hasArtistBiography]
  -[MPStoreItemMetadata isChart]
  -[MPStoreItemMetadata initWithStorePlatformDictionary:parentStoreItemMetadata:]
  -[MPStoreItemMetadata movementCount]
  -[MPStoreItemMetadata isExplicitContent]
  -[MPStoreItemMetadata subscriptionAdamID]
  -[MPStoreItemMetadata childStorePlatformDictionaryForArtworkTrackID:]
  -[MPStoreItemMetadata artworkRequestTokenForStoreMusicAPIDictionary]
  -[MPStoreItemMetadata childrenStoreIDs]
  -[MPStoreItemMetadata artworkRequestTokenForUberArtworkKind:]
  -[MPStoreItemMetadata movieArtworkRequestToken]
  -[MPStoreItemMetadata copyWithZone:]
  -[MPStoreItemMetadata editorNotesWithStyle:]
  -[MPStoreItemMetadata personalMixSortKey]
  -[MPStoreItemMetadata radioStationEvents]
  -[MPStoreItemMetadata initWithStoreMusicAPIDictionary:parentStoreItemMetadata:]
  -[MPStoreItemMetadata expirationDate]
  -[MPStoreItemMetadata _storePlatformReleaseDateFormatter]
  -[MPStoreItemMetadata artworkRequestTokenForStorePlatformDictionary:]
  -[MPStoreItemMetadata initWithStorePlatformDictionary:parentStoreItemMetadata:expirationDate:]
  -[MPStoreItemMetadata childStoreItemMetadatas]
  -[MPStoreItemMetadata curatorHandle]
  -[MPStoreItemMetadata duration]
  -[MPStoreItemMetadata isMasteredForiTunes]
  -[MPStoreItemMetadata encodeWithCoder:]
  -[MPStoreItemMetadata tvShowArtworkRequestToken]
  -[MPStoreItemMetadata lastModifiedDate]
  -[MPStoreItemMetadata importableStorePlatformDictionary]
  -[MPStoreItemMetadata parentStoreItemMetadata]


MPAVRoutingTableViewCell : MPAVClippingTableViewCell <MPAVRoutingThemeableCellView>
 @property  MPAVRoutingTableViewCellSubtitleTextState *subtitleTextState
 @property  <MPAVRoutingTableViewCellDelegate> *delegate
 @property  BOOL mirroringSwitchVisible
 @property  unsigned long mirroringStyle
 @property  unsigned long iconStyle
 @property  BOOL pendingSelection
 @property  BOOL isDisplayedAsPicked
 @property  BOOL useSmartAudioCheckmarkStyle
 @property  BOOL provideOwnSeparator
 @property  double subtitleViewAlpha
 @property  MPVolumeSlider *volumeSlider
 @property  BOOL showingVolumeSlider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVRoutingTableViewCell setAccessoryType:]
  -[MPAVRoutingTableViewCell _updateAccessory]
  -[MPAVRoutingTableViewCell titleView]
  -[MPAVRoutingTableViewCell .cxx_destruct]
  -[MPAVRoutingTableViewCell layoutSubviews]
  -[MPAVRoutingTableViewCell setDelegate:]
  -[MPAVRoutingTableViewCell iconStyle]
  -[MPAVRoutingTableViewCell prepareForReuse]
  -[MPAVRoutingTableViewCell setTintColor:]
  -[MPAVRoutingTableViewCell volumeView]
  -[MPAVRoutingTableViewCell subtitleView]
  -[MPAVRoutingTableViewCell didTapToExpand]
  -[MPAVRoutingTableViewCell _updateSubtitleTextLabelForRouteItem:]
  -[MPAVRoutingTableViewCell _updateSpinnerColor]
  -[MPAVRoutingTableViewCell useSmartAudioCheckmarkStyle]
  -[MPAVRoutingTableViewCell isShowingVolumeSlider]
  -[MPAVRoutingTableViewCell setIconStyle:]
  -[MPAVRoutingTableViewCell volumeSlider]
  -[MPAVRoutingTableViewCell _shouldShowSeparateBatteryPercentagesForBatteryLevel:]
  -[MPAVRoutingTableViewCell _checkmarkImageNameForSmartAudio]
  -[MPAVRoutingTableViewCell _checkmarkImageForSmartAudio]
  -[MPAVRoutingTableViewCell _checkmarkAccessibilityLabelForSmartAudio]
  -[MPAVRoutingTableViewCell _batteryTextForRoute:]
  -[MPAVRoutingTableViewCell _pairedDeviceTextForRoute:]
  -[MPAVRoutingTableViewCell setMirroringStyle:]
  -[MPAVRoutingTableViewCell setPendingSelection:]
  -[MPAVRoutingTableViewCell setVolumeSlider:]
  -[MPAVRoutingTableViewCell _animateSubtitleLabelToNextAvailableText]
  -[MPAVRoutingTableViewCell setSubtitleViewAlpha:]
  -[MPAVRoutingTableViewCell updateForEndpoint:routeItem:inferLocalizedModelName:]
  -[MPAVRoutingTableViewCell setUseSmartAudioCheckmarkStyle:]
  -[MPAVRoutingTableViewCell _configureLabel:]
  -[MPAVRoutingTableViewCell setShowingVolumeSlider:]
  -[MPAVRoutingTableViewCell _configureDetailLabel:]
  -[MPAVRoutingTableViewCell mirroringSwitchVisible]
  -[MPAVRoutingTableViewCell setMirroringSwitchVisible:]
  -[MPAVRoutingTableViewCell mirroringStyle]
  -[MPAVRoutingTableViewCell isPendingSelection]
  -[MPAVRoutingTableViewCell isDisplayedAsPicked]
  -[MPAVRoutingTableViewCell setIsDisplayedAsPicked:]
  -[MPAVRoutingTableViewCell provideOwnSeparator]
  -[MPAVRoutingTableViewCell setProvideOwnSeparator:]
  -[MPAVRoutingTableViewCell subtitleViewAlpha]
  -[MPAVRoutingTableViewCell subtitleTextState]
  -[MPAVRoutingTableViewCell setSubtitleTextState:]
  -[MPAVRoutingTableViewCell delegate]
  -[MPAVRoutingTableViewCell _handleContentSizeCategoryDidChangeNotification:]
  -[MPAVRoutingTableViewCell initWithStyle:reuseIdentifier:]
  -[MPAVRoutingTableViewCell _iconImageForRoute:]
  -[MPAVRoutingTableViewCell dealloc]
  -[MPAVRoutingTableViewCell separatorView]
  -[MPAVRoutingTableViewCell _iconImageForRoutes:]
  -[MPAVRoutingTableViewCell iconView]


MPMediaControlsViewController : UIViewController <UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
 @property  MPMediaControls *mediaControls
 @property  MPMediaControlsConfiguration *configuration
 @property  @? didDismissHandler
 @property  <MPMediaControlsViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaControlsViewController animationControllerForPresentedController:presentingController:sourceController:]
  -[MPMediaControlsViewController animationControllerForDismissedController:]
  -[MPMediaControlsViewController prefersStatusBarHidden]
  -[MPMediaControlsViewController mediaControls]
  -[MPMediaControlsViewController configuration]
  -[MPMediaControlsViewController transitionDuration:]
  -[MPMediaControlsViewController .cxx_destruct]
  -[MPMediaControlsViewController viewDidLoad]
  -[MPMediaControlsViewController animateTransition:]
  -[MPMediaControlsViewController setDelegate:]
  -[MPMediaControlsViewController init]
  -[MPMediaControlsViewController presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[MPMediaControlsViewController _present]
  -[MPMediaControlsViewController stopPrewarming]
  -[MPMediaControlsViewController _createMediaControlsIfNeeded]
  -[MPMediaControlsViewController didDismissHandler]
  -[MPMediaControlsViewController startPrewarming]
  -[MPMediaControlsViewController prepareRemoteViewController]
  -[MPMediaControlsViewController setDidDismissHandler:]
  -[MPMediaControlsViewController setOverrideRouteSharingPolicy:routingContextUID:]
  -[MPMediaControlsViewController initWithConfiguration:]
  -[MPMediaControlsViewController viewWillAppear:]
  -[MPMediaControlsViewController dismiss]
  -[MPMediaControlsViewController delegate]
  -[MPMediaControlsViewController setMediaControls:]


_MPMediaControlsPresentationController : UIPresentationController
  // instance methods
  -[_MPMediaControlsPresentationController shouldRemovePresentersView]


MPMediaControlsStandaloneViewController : MPMediaControlsViewController
  // instance methods
  -[MPMediaControlsStandaloneViewController presentAnimated:completion:]
  -[MPMediaControlsStandaloneViewController dismissAfter:]


MPTiledArtworkDataSource : NSObject <MPArtworkDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPTiledArtworkDataSource _errorWithDescription:]
  +[MPTiledArtworkDataSource _representationCacheKeyForArtworkCatalog:forAnyRevision:]
  +[MPTiledArtworkDataSource _tileSizeForFittingSize:rows:columns:spacing:]
  +[MPTiledArtworkDataSource _loadingRequestForArtworkCatalog:]
  +[MPTiledArtworkDataSource sharedDataSource]

  // instance methods
  -[MPTiledArtworkDataSource .cxx_destruct]
  -[MPTiledArtworkDataSource existingArtworkEffectResultForEffectType:catalog:options:]
  -[MPTiledArtworkDataSource init]
  -[MPTiledArtworkDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[MPTiledArtworkDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPTiledArtworkDataSource _removeLoadingRequestForArtworkCatalog:]
  -[MPTiledArtworkDataSource _addLoadingRequestForArtworkCatalog:]
  -[MPTiledArtworkDataSource _hasLoadingRequestForArtworkCatalog:]
  -[MPTiledArtworkDataSource _performAsyncBlock:]
  -[MPTiledArtworkDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPTiledArtworkDataSource loadArtworkEffectResultForEffectType:catalog:options:systemEffectHandler:completionHandler:]
  -[MPTiledArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPTiledArtworkDataSource existingRepresentationForArtworkCatalog:]
  -[MPTiledArtworkDataSource _performSyncBlock:]
  -[MPTiledArtworkDataSource loadRepresentationForArtworkCatalog:completionHandler:]


MPModelLibraryRequestOperation : MPAsyncOperation
 @property  NSOperationQueue *operationQueue
 @property  NSOperationQueue *serialAccessQueue
 @property  MPModelLibraryRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryRequestOperation setOperationQueue:]
  -[MPModelLibraryRequestOperation setRequest:]
  -[MPModelLibraryRequestOperation operationQueue]
  -[MPModelLibraryRequestOperation _libraryView]
  -[MPModelLibraryRequestOperation _sectionProperties]
  -[MPModelLibraryRequestOperation .cxx_destruct]
  -[MPModelLibraryRequestOperation responseHandler]
  -[MPModelLibraryRequestOperation _executeLegacyRequest]
  -[MPModelLibraryRequestOperation _executeRequest]
  -[MPModelLibraryRequestOperation setResponseHandler:]
  -[MPModelLibraryRequestOperation execute]
  -[MPModelLibraryRequestOperation _sanityCheckRequest]
  -[MPModelLibraryRequestOperation _itemProperties]
  -[MPModelLibraryRequestOperation request]
  -[MPModelLibraryRequestOperation setSerialAccessQueue:]
  -[MPModelLibraryRequestOperation serialAccessQueue]


_MPModelLibraryRequestItemsQueryOperation : MPAsyncOperation
 @property  MPMediaLibraryView *libraryView
 @property  {shared_ptr<mlcore::Query>=^{Query}^{__shared_weak_count}} query
 @property  @? resultHandler

  // instance methods
  -[_MPModelLibraryRequestItemsQueryOperation setQuery:]
  -[_MPModelLibraryRequestItemsQueryOperation libraryView]
  -[_MPModelLibraryRequestItemsQueryOperation setResultHandler:]
  -[_MPModelLibraryRequestItemsQueryOperation resultHandler]
  -[_MPModelLibraryRequestItemsQueryOperation setLibraryView:]
  -[_MPModelLibraryRequestItemsQueryOperation query]
  -[_MPModelLibraryRequestItemsQueryOperation .cxx_construct]
  -[_MPModelLibraryRequestItemsQueryOperation .cxx_destruct]
  -[_MPModelLibraryRequestItemsQueryOperation execute]


MPAVController : NSObject <MPAVRoutingControllerDelegate, MPAVQueueControllerDelegate, AVAudioSessionDelegateMediaPlayerOnly>
 @property  MPAVPolicyEnforcer *policyEnforcer
 @property  long long actionAfterQueueLoadOverride
 @property  MPQueuePlayer *avPlayer
 @property  MPQueuePlayer *queuePlayer
 @property  <MPAVQueueCoordinating> *queueCoordinator
 @property  <MPAVQueueController> *queueController
 @property  long long externalPlaybackType
 @property  BOOL ubiquitousBookkeepingEnabled
 @property  BOOL alwaysPlayWheneverPossible
 @property  long long displayOverridePlaybackState
 @property  BOOL disableAirPlayMirroringDuringPlayback
 @property  double durationOfCurrentItemIfAvailable
 @property  double nextFadeOutDuration
 @property  double playableDurationOfCurrentItemIfAvailable
 @property  BOOL stopAtEnd
 @property  BOOL autoPlayWhenLikelyToKeepUp
 @property  BOOL externalPlaybackActive
 @property  BOOL shouldEnforceHDCP
 @property  BOOL showPlaybackStateOverlaysOnTVOut
 @property  BOOL useApplicationAudioSession
 @property  BOOL shouldPostCompatibilityNotifications
 @property  BOOL isReloadingForPlaybackContextChange
 @property  BOOL canAttemptErrorResolution
 @property  NSString *identifier
 @property  NSString *externalPlaybackVideoGravity
 @property  long long state
 @property  long long _displayPlaybackState
 @property  BOOL shouldDisplayAsPlaying
 @property  BOOL useAirPlayMusicMode
 @property  BOOL managesAirPlayBehaviors
 @property  float rate
 @property  long long stateBeforeInterruption
 @property  MPQueueFeeder *feeder
 @property  MPAVItem *currentItem
 @property  MPAVRoutingController *routingController
 @property  long long lastDirection
 @property  BOOL hasVolumeControl
 @property  float volume
 @property  BOOL muted
 @property  double currentTime
 @property  unsigned long bufferingState
 @property  BOOL currentItemReady
 @property  long long playbackMode
 @property  BOOL playing
 @property  BOOL valid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPAVController initialize]
  +[MPAVController prefersApplicationAudioSession]
  +[MPAVController _playerKeysToObserve]
  +[MPAVController _itemKeysToObserve]
  +[MPAVController outputSupportsAC3]
  +[MPAVController keyPathsForValuesAffectingCurrentItem]
  +[MPAVController automaticallyNotifiesObserversOfPlaylistManager]

  // instance methods
  -[MPAVController _setState:]
  -[MPAVController queueController:didChangeActionAtQueueEnd:]
  -[MPAVController volume]
  -[MPAVController play]
  -[MPAVController rate]
  -[MPAVController isPlaying]
  -[MPAVController setVolume:]
  -[MPAVController _applicationWillEnterForegroundNotification:]
  -[MPAVController isValid]
  -[MPAVController routingController]
  -[MPAVController feeder]
  -[MPAVController loadSessionWithQueueController:completionHandler:]
  -[MPAVController queueController:failedToLoadItem:]
  -[MPAVController .cxx_destruct]
  -[MPAVController currentItem]
  -[MPAVController queueControllerDidChangeContents:]
  -[MPAVController autoPlayWhenLikelyToKeepUp]
  -[MPAVController togglePlayback]
  -[MPAVController setState:]
  -[MPAVController _updateStateForPlaybackPrevention]
  -[MPAVController changePlaybackIndexBy:deltaType:ignoreElapsedTime:force:error:]
  -[MPAVController _applicationDidRemoveDeactivationReason:]
  -[MPAVController endPlayback]
  -[MPAVController queueController:didChangeRepeatType:]
  -[MPAVController pauseWithFadeout:]
  -[MPAVController setCurrentTime:]
  -[MPAVController init]
  -[MPAVController allowsExternalPlayback]
  -[MPAVController isExternalPlaybackActive]
  -[MPAVController queueController]
  -[MPAVController becomeActiveWithCompletion:]
  -[MPAVController useApplicationAudioSession]
  -[MPAVController setUseApplicationAudioSession:]
  -[MPAVController bufferingState]
  -[MPAVController canPlayFastReverse]
  -[MPAVController playbackMode]
  -[MPAVController timeOfSeekableStart]
  -[MPAVController timeOfSeekableEnd]
  -[MPAVController pause]
  -[MPAVController avPlayer]
  -[MPAVController currentTime]
  -[MPAVController _applicationDidEnterBackgroundNotification:]
  -[MPAVController stopAtEnd]
  -[MPAVController _contentsChanged]
  -[MPAVController identifier]
  -[MPAVController queueController:didChangeContentsWithReplacementPlaybackContext:]
  -[MPAVController _applicationWillAddDeactivationReason:]
  -[MPAVController endSeek]
  -[MPAVController setRate:]
  -[MPAVController state]
  -[MPAVController endTickTimer]
  -[MPAVController _canPlayItem:]
  -[MPAVController queuePlayer]
  -[MPAVController _setLastSetTime:]
  -[MPAVController _setQueueController:deferItemLoading:]
  -[MPAVController _audioSessionMediaServicesWereResetNotification:]
  -[MPAVController isLiveStreaming]
  -[MPAVController _cancelStallTimer]
  -[MPAVController _cancelUpdateCurrentItemBookkeepingTimer]
  -[MPAVController removeTimeObserver:]
  -[MPAVController _unregisterForPlayer:]
  -[MPAVController _unregisterForAVItemNotifications:]
  -[MPAVController setUbiquitousBookkeepingEnabled:]
  -[MPAVController _pauseWithFadeout:forScanning:]
  -[MPAVController _updateScanningRate]
  -[MPAVController _hasValidPlayerTime]
  -[MPAVController changePlaybackIndexBy:deltaType:ignoreElapsedTime:]
  -[MPAVController changePlaybackIndexBy:deltaType:ignoreElapsedTime:error:]
  -[MPAVController _delayedPlaybackIndexChange]
  -[MPAVController isCurrentItemReady]
  -[MPAVController _updateDirectionForChangeDelta:]
  -[MPAVController _rateDidChange:]
  -[MPAVController queueController:didChangeShuffleType:]
  -[MPAVController _queueDidEndWithReason:lastItem:]
  -[MPAVController _endSeekAndChangeRate:]
  -[MPAVController _currentTimeWithPreloadedPlayerTime:value:]
  -[MPAVController _setRate:forScanning:withItem:completion:]
  -[MPAVController _attemptAutoPlay]
  -[MPAVController _setAllowsItemErrorResolution:]
  -[MPAVController setActionAfterQueueLoadOverride:]
  -[MPAVController disableAutoplayForCurrentItem]
  -[MPAVController _playWithOptions:allowsEnablingAutoPlay:]
  -[MPAVController _delayedSetCurrentTime]
  -[MPAVController _setValid:]
  -[MPAVController _shouldProvideAudiblePlaybackPerformance]
  -[MPAVController _hasEnoughDataToPlay]
  -[MPAVController enableAutoplayForCurrentItem]
  -[MPAVController _pickedRoute]
  -[MPAVController setCurrentTime:options:]
  -[MPAVController togglePlaybackWithOptions:]
  -[MPAVController alwaysPlayWheneverPossible]
  -[MPAVController _showsPlayingWhenInState:]
  -[MPAVController setClient:wantsToAllowExternalPlayback:shouldIgnorePlaybackQueueTransactions:]
  -[MPAVController _displayPlaybackState]
  -[MPAVController _applyAirPlayMusicMode]
  -[MPAVController _sendTracePlaybackStartDidFinishIfNeededForItem:]
  -[MPAVController setDisableAirPlayMirroringDuringPlayback:shouldIgnorePlaybackQueueTransactions:]
  -[MPAVController setRate:completion:]
  -[MPAVController setStopAtEnd:]
  -[MPAVController _setActionAtEndAttributeForState:]
  -[MPAVController setClient:wantsToAllowExternalPlayback:]
  -[MPAVController _playerAVAudioSession]
  -[MPAVController setDisableAirPlayMirroringDuringPlayback:]
  -[MPAVController setUsesAudioOnlyModeForExternalPlayback:]
  -[MPAVController _connectAVPlayer]
  -[MPAVController _disconnectAVPlayerWithReason:]
  -[MPAVController _setAutoPlayBackgroundTaskAssertionEnabled:]
  -[MPAVController externalPlaybackType]
  -[MPAVController externalPlaybackVideoGravity]
  -[MPAVController setExternalPlaybackVideoGravity:]
  -[MPAVController queueCoordinator]
  -[MPAVController setCurrentTime:options:completion:]
  -[MPAVController _clearSeekingIntervalsForStreaming]
  -[MPAVController beginSeek:]
  -[MPAVController _resumeTickTimer]
  -[MPAVController _pauseTickTimer]
  -[MPAVController _updateCurrentItemDurationSnapshotWithPlayerTime:]
  -[MPAVController setUsesAudioOnlyModeForExternalPlayback:shouldIgnorePlaybackQueueTransactions:]
  -[MPAVController _itemFailedToPlayToEnd:]
  -[MPAVController reloadWithPlaybackContext:completionHandler:]
  -[MPAVController _updateTypeForItem:]
  -[MPAVController _playbackFailedWithError:canResolve:]
  -[MPAVController actionAfterQueueLoadOverride]
  -[MPAVController _playerFailedToQueueNotification:]
  -[MPAVController currentTimeForBookmarking]
  -[MPAVController playableDurationOfCurrentItemIfAvailable]
  -[MPAVController reloadWithPlaybackContext:]
  -[MPAVController _pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:]
  -[MPAVController airPlayVideoEnded]
  -[MPAVController _registerForAVItemNotifications:]
  -[MPAVController _updateHasProtectedContentForItem:]
  -[MPAVController airPlayFailedRentalDownloadRequired]
  -[MPAVController _airPlayFailedUnsupportedVideoFormatForDeviceWithError:]
  -[MPAVController _delayedUpdateScanningRate]
  -[MPAVController changePlaybackIndexBy:deltaType:]
  -[MPAVController _verifyDisplayProtection]
  -[MPAVController _setBufferingState:]
  -[MPAVController playbackHasStartedForItem:]
  -[MPAVController _prepareToPlayItem:]
  -[MPAVController skipToSeekableEnd]
  -[MPAVController _updateCurrentItemBookkeepingMarkedAsCheckpoint:]
  -[MPAVController _clearLastSetTimeIfPlayerTimeIsValid]
  -[MPAVController _itemWillChange:]
  -[MPAVController _itemDidSignificantlyChangeElapsedTime:rate:]
  -[MPAVController _connectAVPlayerDeferringItemLoading:]
  -[MPAVController setQueueCoordinator:]
  -[MPAVController _expectedAssetTypesForPlaybackMode:]
  -[MPAVController _streamRanDry:]
  -[MPAVController _configureAudioSession]
  -[MPAVController _itemDidChange:]
  -[MPAVController routingControllerAvailableRoutesDidChange:]
  -[MPAVController lastDirection]
  -[MPAVController _isExternalPlaybackActiveDidChange:]
  -[MPAVController _serverConnectionDidDie:]
  -[MPAVController _canPlayFastForwardDidChange:]
  -[MPAVController _canPlayFastReverseDidChange:]
  -[MPAVController _streamBufferFull:]
  -[MPAVController _streamLikelyToKeepUp:]
  -[MPAVController _streamUnlikelyToKeepUp:]
  -[MPAVController _itemReadyToPlay:]
  -[MPAVController _tracksDidChange:]
  -[MPAVController _durationDidChange:]
  -[MPAVController _shouldPausePlaybackForDeactivationReasons:]
  -[MPAVController _resumePlaybackIfNecessary]
  -[MPAVController _pauseBookkeepingTimer]
  -[MPAVController _resumeBookkeepingTimer]
  -[MPAVController _itemPlaybackDidEndNotification:]
  -[MPAVController setRateForScanning:]
  -[MPAVController _applyAirPlayMusicModeForItem:shouldIgnorePlaybackQueueTransactions:]
  -[MPAVController _itemFailedToPlayToEndNotification:]
  -[MPAVController _timeHasJumpedNotification:]
  -[MPAVController _itemAssetIsLoadedNotification:]
  -[MPAVController _itemTypeAvailableNotification:]
  -[MPAVController _itemBookmarkTimeDidChangeNotification:]
  -[MPAVController _itemPlayerItemDidChangeNotification:]
  -[MPAVController _itemPlayerItemWillChangeNotification:]
  -[MPAVController _seeklessStateForState:]
  -[MPAVController shouldHaveNoActionAtEndForState:]
  -[MPAVController _delayedPostPlaybackStateChangedNotification]
  -[MPAVController autoclearDisplayOverride]
  -[MPAVController setDisplayOverridePlaybackState:]
  -[MPAVController _scheduleUpdateCurrentItemBookkeepingTimer]
  -[MPAVController _clearResetRateAfterSeeking]
  -[MPAVController _postPlaybackStateChangedNotificationWithOriginalState:newState:delayable:]
  -[MPAVController setNextFadeOutDuration:]
  -[MPAVController _configureUpdateCurrentItemBookkeepingTimer]
  -[MPAVController _updateSeekingIntervalsForStreaming]
  -[MPAVController useAirPlayMusicMode]
  -[MPAVController handlePlaybackErrorWithUserInfo:]
  -[MPAVController _handlePlaybackErrorResolutionType:forItem:playbackError:resolutionError:]
  -[MPAVController beginInterruption]
  -[MPAVController routingControllerExternalScreenTypeDidChange:]
  -[MPAVController routingControllerDidPauseFromActiveRouteChange:]
  -[MPAVController endInterruptionFromInterruptor:category:flags:]
  -[MPAVController isSeekingOrScrubbing]
  -[MPAVController _updateLastSetTimeForCurrentItemIfNeeded]
  -[MPAVController forceRestartPlaybackIfNecessary]
  -[MPAVController beginTickTimerWithInterval:]
  -[MPAVController isTickTimerEnabled]
  -[MPAVController shouldDisplayAsPlaying]
  -[MPAVController setAlwaysPlayWheneverPossible:]
  -[MPAVController hasVolumeControl]
  -[MPAVController disableAirPlayMirroringDuringPlayback]
  -[MPAVController setUseAirPlayMusicMode:]
  -[MPAVController setManagesAirPlayBehaviors:]
  -[MPAVController updateBookkeepingNow]
  -[MPAVController finalizeBookkeepingNow]
  -[MPAVController showPlaybackStateOverlaysOnTVOut]
  -[MPAVController timeOfPlayableStart]
  -[MPAVController durationOfCurrentItemIfAvailable]
  -[MPAVController timeOfPlayableEnd]
  -[MPAVController canSeekBackwards]
  -[MPAVController canSeekForwards]
  -[MPAVController skipToSeekableStart]
  -[MPAVController canSkipToSeekableEnd]
  -[MPAVController ubiquitousBookkeepingEnabled]
  -[MPAVController _updateCurrentItemBookkeepingForTimerCallback]
  -[MPAVController _currentIndexInBoundaryCMTimes:]
  -[MPAVController setAutoclearingDisplayOverridePlaybackState:]
  -[MPAVController _updateProgress:]
  -[MPAVController _extractImageFromMetadata:]
  -[MPAVController _pausePlaybackIfNecessary]
  -[MPAVController _enforcingPolicy:]
  -[MPAVController displayOverridePlaybackState]
  -[MPAVController addPeriodicTimeObserverForInterval:usingBlock:]
  -[MPAVController setPlaybackMode:]
  -[MPAVController policyEnforcer]
  -[MPAVController setPolicyEnforcer:]
  -[MPAVController setQueuePlayer:]
  -[MPAVController nextFadeOutDuration]
  -[MPAVController shouldEnforceHDCP]
  -[MPAVController setShouldEnforceHDCP:]
  -[MPAVController managesAirPlayBehaviors]
  -[MPAVController shouldPostCompatibilityNotifications]
  -[MPAVController setShouldPostCompatibilityNotifications:]
  -[MPAVController canAttemptErrorResolution]
  -[MPAVController playWithOptions:]
  -[MPAVController isReloadingForPlaybackContextChange]
  -[MPAVController setIsReloadingForPlaybackContextChange:]
  -[MPAVController setActive:]
  -[MPAVController dealloc]
  -[MPAVController _resetInternalState]
  -[MPAVController setAutoPlayWhenLikelyToKeepUp:]
  -[MPAVController muted]
  -[MPAVController observeValueForKeyPath:ofObject:change:context:]
  -[MPAVController queueController:didIncrementVersionForSegment:]
  -[MPAVController stateBeforeInterruption]


MPStoreItemMovieClip : NSObject
 @property  NSDictionary *lookupDictionary
 @property  NSArray *assets
 @property  MPStoreArtworkRequestToken *previewArtworkRequestToken
 @property  NSString *title

  // instance methods
  -[MPStoreItemMovieClip .cxx_destruct]
  -[MPStoreItemMovieClip assets]
  -[MPStoreItemMovieClip lookupDictionary]
  -[MPStoreItemMovieClip title]
  -[MPStoreItemMovieClip initWithLookupDictionary:]
  -[MPStoreItemMovieClip previewArtworkRequestToken]


MPLibraryKeepLocalStatusObserverConfiguration : NSObject
 @property  long long enableState
 @property  MPModelObject *identifyingModelObject

  // instance methods
  -[MPLibraryKeepLocalStatusObserverConfiguration .cxx_destruct]
  -[MPLibraryKeepLocalStatusObserverConfiguration isEqual:]
  -[MPLibraryKeepLocalStatusObserverConfiguration enableState]
  -[MPLibraryKeepLocalStatusObserverConfiguration setEnableState:]
  -[MPLibraryKeepLocalStatusObserverConfiguration setIdentifyingModelObject:]
  -[MPLibraryKeepLocalStatusObserverConfiguration identifyingModelObject]


MPRadioStationEvent : NSObject <MPMutableRadioStationEvent, NSSecureCoding>
 @property  NSString *title
 @property  NSString *descriptionText
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPRadioStationEvent supportsSecureCoding]

  // instance methods
  -[MPRadioStationEvent descriptionText]
  -[MPRadioStationEvent initWithCoder:]
  -[MPRadioStationEvent endTime]
  -[MPRadioStationEvent setTitle:]
  -[MPRadioStationEvent setStartTime:]
  -[MPRadioStationEvent setEndTime:]
  -[MPRadioStationEvent .cxx_destruct]
  -[MPRadioStationEvent initWithBlock:]
  -[MPRadioStationEvent startTime]
  -[MPRadioStationEvent title]
  -[MPRadioStationEvent setDescriptionText:]
  -[MPRadioStationEvent encodeWithCoder:]


MPRadioController : NSObject <MPClientRadioController>
 @property  BOOL radioAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPRadioController isRadioAvailable]
  -[MPRadioController .cxx_destruct]
  -[MPRadioController init]
  -[MPRadioController _getConnectionWithCompletionHandler:]
  -[MPRadioController _setRadioAvailable:]
  -[MPRadioController _endRemoteProcessAssertion]
  -[MPRadioController _beginRemoteProcessAssertionWithCompletionHandler:]
  -[MPRadioController clientRadioControllerRadioAvailabilityDidChange:]
  -[MPRadioController clientRadioControllerRecentStationsDidChange]
  -[MPRadioController getRecentStationGroupsWithCompletionHandler:]
  -[MPRadioController dealloc]


MPStoreModelRadioStationBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelRadioStationBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelRadioStationBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPModelSongKind : MPModelKind
 @property  unsigned long variants
 @property  unsigned long options

  // class methods
  +[MPModelSongKind supportsSecureCoding]
  +[MPModelSongKind identityKind]
  +[MPModelSongKind kindWithVariants:options:]

  // instance methods
  -[MPModelSongKind variants]
  -[MPModelSongKind predicateWithBaseProperty:]
  -[MPModelSongKind initWithCoder:]
  -[MPModelSongKind options]
  -[MPModelSongKind humanDescription]
  -[MPModelSongKind applyToView:withContext:]
  -[MPModelSongKind representedSearchScopePredicate]
  -[MPModelSongKind isEqual:]
  -[MPModelSongKind encodeWithCoder:]


MPModelSong : MPModelObject
 @property  NSString *title
 @property  MPModelAlbum *album
 @property  MPModelArtist *artist
 @property  MPModelGenre *genre
 @property  MPModelComposer *composer
 @property  NSString *grouping
 @property  MPModelFileAsset *localFileAsset
 @property  MPModelHomeSharingAsset *homeSharingAsset
 @property  MPModelPlaybackPosition *playbackPosition
 @property  MPModelStoreAsset *storeAsset
 @property  NSString *copyrightText
 @property  double duration
 @property  long long trackNumber
 @property  long long discNumber
 @property  long long playCount
 @property  long long skipCount
 @property  BOOL explicitSong
 @property  BOOL artistUploadedContent
 @property  BOOL hasVideo
 @property  long long beatsPerMinute
 @property  MPModelLyrics *lyrics
 @property  BOOL shouldShowComposer
 @property  float volumeNormalization
 @property  @? artworkCatalogBlock
 @property  BOOL hasCloudSyncSource
 @property  BOOL libraryAdded
 @property  NSDate *libraryAddedDate
 @property  BOOL libraryAddEligible
 @property  long long keepLocalEnableState
 @property  long long keepLocalManagedStatus
 @property  long long year
 @property  float userRating
 @property  long long cloudStatus
 @property  MPGaplessInfo *gaplessInfo
 @property  float volumeAdjustment
 @property  unsigned long traits
 @property  NSString *classicalWork
 @property  NSString *classicalMovement
 @property  long long classicalMovementCount
 @property  long long classicalMovementNumber
 @property  long long trackCount
 @property  NSDate *downloadedDate
 @property  NSDate *lastDevicePlaybackDate

  // class methods
  +[MPModelSong __artist_KEY]
  +[MPModelSong __artworkCatalogBlock_KEY]
  +[MPModelSong genericObjectType]
  +[MPModelSong __album_KEY]
  +[MPModelSong kindWithVariants:]
  +[MPModelSong supportsKeepLocalStatusObservation]
  +[MPModelSong requiredKeepLocalStatusObservationProperties]
  +[MPModelSong __title_KEY]
  +[MPModelSong __genre_KEY]
  +[MPModelSong __composer_KEY]
  +[MPModelSong __grouping_KEY]
  +[MPModelSong __copyrightText_KEY]
  +[MPModelSong __duration_KEY]
  +[MPModelSong __trackCount_KEY]
  +[MPModelSong __trackNumber_KEY]
  +[MPModelSong __discNumber_KEY]
  +[MPModelSong __playCount_KEY]
  +[MPModelSong __skipCount_KEY]
  +[MPModelSong __explicitSong_KEY]
  +[MPModelSong __artistUploadedContent_KEY]
  +[MPModelSong __hasVideo_KEY]
  +[MPModelSong __beatsPerMinute_KEY]
  +[MPModelSong __lyrics_KEY]
  +[MPModelSong __shouldShowComposer_KEY]
  +[MPModelSong __volumeNormalization_KEY]
  +[MPModelSong __localFileAsset_KEY]
  +[MPModelSong __keepLocalEnableState_KEY]
  +[MPModelSong __keepLocalManagedStatus_KEY]
  +[MPModelSong __libraryAdded_KEY]
  +[MPModelSong __libraryAddedDate_KEY]
  +[MPModelSong __lastDevicePlaybackDate_KEY]
  +[MPModelSong __libraryAddEligible_KEY]
  +[MPModelSong __hasCloudSyncSource_KEY]
  +[MPModelSong __classicalWork_KEY]
  +[MPModelSong __classicalMovement_KEY]
  +[MPModelSong __classicalMovementCount_KEY]
  +[MPModelSong __classicalMovementNumber_KEY]
  +[MPModelSong __homeSharingAsset_KEY]
  +[MPModelSong __storeAsset_KEY]
  +[MPModelSong __userRating_KEY]
  +[MPModelSong __cloudStatus_KEY]
  +[MPModelSong __gaplessInfo_KEY]
  +[MPModelSong __volumeAdjustment_KEY]
  +[MPModelSong __playbackPosition_KEY]
  +[MPModelSong __downloadedDate_KEY]
  +[MPModelSong kindWithVariants:options:]
  +[MPModelSong supportsLibraryAddStatusObservation]
  +[MPModelSong requiredLibraryAddStatusObservationProperties]
  +[MPModelSong __traits_KEY]
  +[MPModelSong requiredLibraryRemovalProperties]
  +[MPModelSong supportsLibraryRemoval]
  +[MPModelSong requiredStoreLibraryPersonalizationProperties]
  +[MPModelSong __year_KEY]

  // instance methods
  -[MPModelSong humanDescription]
  -[MPModelSong mediaItemPropertyValues]
  -[MPModelSong relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelSong personalizationScopedPropertiesForProperties:]
  -[MPModelSong objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelSong artworkCatalog]
  -[MPModelSong libraryAddStatusObserverConfiguration]
  -[MPModelSong libraryRemovalSupportedOptions]
  -[MPModelSong newKeepLocalStatusObserverConfiguration]


MPAVTelevisionRoutingDataSource : MPAVRoutingDataSource
  // instance methods
  -[MPAVTelevisionRoutingDataSource getRoutesForCategory:]
  -[MPAVTelevisionRoutingDataSource devicePresenceDetected]
  -[MPAVTelevisionRoutingDataSource .cxx_destruct]
  -[MPAVTelevisionRoutingDataSource init]
  -[MPAVTelevisionRoutingDataSource setDiscoveryMode:]
  -[MPAVTelevisionRoutingDataSource _onQueue_controllerDidDiscoverTelevision:]
  -[MPAVTelevisionRoutingDataSource _onQueue_controllerDidRemoveTelevision:]
  -[MPAVTelevisionRoutingDataSource _discoveredTelevisions]
  -[MPAVTelevisionRoutingDataSource getPickedRouteHasVolumeControlWithCompletion:]
  -[MPAVTelevisionRoutingDataSource dealloc]


MPAssistantMusicLogEvent : NSObject <MPAssistantLogEvent>
 @property  unsigned int sessionID
 @property  NSString *siriSessionIdentifier
 @property  NSString *eventName
 @property  long long eventCode
 @property  NSMutableDictionary *eventPayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAssistantMusicLogEvent sessionID]
  -[MPAssistantMusicLogEvent setSessionID:]
  -[MPAssistantMusicLogEvent eventCode]
  -[MPAssistantMusicLogEvent .cxx_destruct]
  -[MPAssistantMusicLogEvent eventPayload]
  -[MPAssistantMusicLogEvent eventName]
  -[MPAssistantMusicLogEvent siriSessionIdentifier]
  -[MPAssistantMusicLogEvent setSiriSessionIdentifier:]


MPNowPlayingInfoAudioFormat : NSObject
 @property  MRContentItemMetadataAudioFormat *mediaRemoteAudioFormat
 @property  long long tier
 @property  long long bitrate
 @property  long long sampleRate
 @property  long long bitDepth
 @property  unsigned int codec
 @property  NSString *groupID
 @property  NSString *stableVariantID
 @property  BOOL spatialized
 @property  BOOL multiChannel
 @property  unsigned int channelLayout
 @property  NSString *audioChannelLayoutDescription

  // instance methods
  -[MPNowPlayingInfoAudioFormat setTier:]
  -[MPNowPlayingInfoAudioFormat codec]
  -[MPNowPlayingInfoAudioFormat setCodec:]
  -[MPNowPlayingInfoAudioFormat groupID]
  -[MPNowPlayingInfoAudioFormat sampleRate]
  -[MPNowPlayingInfoAudioFormat setGroupID:]
  -[MPNowPlayingInfoAudioFormat .cxx_destruct]
  -[MPNowPlayingInfoAudioFormat bitrate]
  -[MPNowPlayingInfoAudioFormat init]
  -[MPNowPlayingInfoAudioFormat tier]
  -[MPNowPlayingInfoAudioFormat isEqual:]
  -[MPNowPlayingInfoAudioFormat setBitDepth:]
  -[MPNowPlayingInfoAudioFormat bitDepth]
  -[MPNowPlayingInfoAudioFormat mediaRemoteAudioFormat]
  -[MPNowPlayingInfoAudioFormat setBitrate:]
  -[MPNowPlayingInfoAudioFormat stableVariantID]
  -[MPNowPlayingInfoAudioFormat setStableVariantID:]
  -[MPNowPlayingInfoAudioFormat isSpatialized]
  -[MPNowPlayingInfoAudioFormat setSpatialized:]
  -[MPNowPlayingInfoAudioFormat isMultiChannel]
  -[MPNowPlayingInfoAudioFormat setMultiChannel:]
  -[MPNowPlayingInfoAudioFormat setChannelLayout:]
  -[MPNowPlayingInfoAudioFormat audioChannelLayoutDescription]
  -[MPNowPlayingInfoAudioFormat setAudioChannelLayoutDescription:]
  -[MPNowPlayingInfoAudioFormat initWithMediaRemoteAudioFormat:]
  -[MPNowPlayingInfoAudioFormat setSampleRate:]
  -[MPNowPlayingInfoAudioFormat channelLayout]


MPMediaLibraryAlbumAppData : NSObject
 @property  long long version

  // instance methods
  -[MPMediaLibraryAlbumAppData .cxx_destruct]
  -[MPMediaLibraryAlbumAppData init]
  -[MPMediaLibraryAlbumAppData version]
  -[MPMediaLibraryAlbumAppData songPopularityForAdamID:]
  -[MPMediaLibraryAlbumAppData setSongPopularity:forAdamID:]
  -[MPMediaLibraryAlbumAppData initWithAppDataDictionary:]
  -[MPMediaLibraryAlbumAppData setSongPopularity:forIdentifierSet:]
  -[MPMediaLibraryAlbumAppData songPopularityForIdentifiers:]
  -[MPMediaLibraryAlbumAppData createAppDataDictionary]


MPStoreFileAssetInfo : NSObject
 @property  NSURL *assetURL
 @property  NSString *downloadKey
 @property  NSArray *fairPlayInfoList
 @property  long long flavorType
 @property  NSString *fileExtension
 @property  unsigned long fileSize
 @property  NSData *md5
 @property  long long protectionType
 @property  NSString *playbackAuthorizationToken

  // instance methods
  -[MPStoreFileAssetInfo md5]
  -[MPStoreFileAssetInfo fileSize]
  -[MPStoreFileAssetInfo .cxx_destruct]
  -[MPStoreFileAssetInfo protectionType]
  -[MPStoreFileAssetInfo playbackAuthorizationToken]
  -[MPStoreFileAssetInfo flavorType]
  -[MPStoreFileAssetInfo downloadKey]
  -[MPStoreFileAssetInfo fairPlayInfoList]
  -[MPStoreFileAssetInfo initWithiTunesCloudStoreFileAssetInfo:]
  -[MPStoreFileAssetInfo fileExtension]
  -[MPStoreFileAssetInfo assetURL]


MPMediaRemoteEntityTranslatorContext : NSObject
 @property  <MPMediaRemoteEntityArtworkGenerator> *artworkGenerator

  // instance methods
  -[MPMediaRemoteEntityTranslatorContext .cxx_destruct]
  -[MPMediaRemoteEntityTranslatorContext setArtworkGenerator:]
  -[MPMediaRemoteEntityTranslatorContext artworkGenerator]


_MPMediaRemoteEntityPropertyTranslator : NSObject <MPEntityPropertyTranslator>
 @property  NSString *keyPath
 @property  @? valueTransformBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPMediaRemoteEntityPropertyTranslator translatorWithBlock:]
  +[_MPMediaRemoteEntityPropertyTranslator translatorWithKeyPath:]

  // instance methods
  -[_MPMediaRemoteEntityPropertyTranslator valueTransformBlock]
  -[_MPMediaRemoteEntityPropertyTranslator .cxx_destruct]
  -[_MPMediaRemoteEntityPropertyTranslator keyPath]
  -[_MPMediaRemoteEntityPropertyTranslator valueFromSource:context:]


MPMediaRemoteEntityTranslator : MPBaseEntityTranslator
  // class methods
  +[MPMediaRemoteEntityTranslator buildSchemaIfNeeded]

  // instance methods
  -[MPMediaRemoteEntityTranslator identifiersForContentItem:]
  -[MPMediaRemoteEntityTranslator objectForPropertySet:contentItem:context:]
  -[MPMediaRemoteEntityTranslator mapPropertyKey:toDeviceSpecificUserInfoKey:]
  -[MPMediaRemoteEntityTranslator mapArtworkPropertyKey:]
  -[MPMediaRemoteEntityTranslator mapIdentifierCreationBlock:]
  -[MPMediaRemoteEntityTranslator mapPropertyKey:toMPContentItemSelector:]
  -[MPMediaRemoteEntityTranslator mapPropertyKey:toValueTransformer:]
  -[MPMediaRemoteEntityTranslator mapPropertyKey:toUserInfoKey:]
  -[MPMediaRemoteEntityTranslator sectionObjectForPropertySet:contentItem:context:]
  -[MPMediaRemoteEntityTranslator mapRelationshipKey:toModelClass:]


MPWeakTimer : NSObject
  // class methods
  +[MPWeakTimer timerWithInterval:repeats:block:]
  +[MPWeakTimer timerWithInterval:block:]
  +[MPWeakTimer timerWithInterval:queue:block:]
  +[MPWeakTimer timerWithInterval:repeats:queue:block:]

  // instance methods
  -[MPWeakTimer .cxx_destruct]
  -[MPWeakTimer initWithInterval:repeats:queue:block:]
  -[MPWeakTimer initWithInterval:queue:block:]
  -[MPWeakTimer dealloc]
  -[MPWeakTimer invalidate]


MPModelLibraryKeepLocalChangeRequest : NSObject <NSCopying>
 @property  MPModelObject *modelObject
 @property  long long enableState

  // instance methods
  -[MPModelLibraryKeepLocalChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryKeepLocalChangeRequest .cxx_destruct]
  -[MPModelLibraryKeepLocalChangeRequest setModelObject:]
  -[MPModelLibraryKeepLocalChangeRequest enableState]
  -[MPModelLibraryKeepLocalChangeRequest setEnableState:]
  -[MPModelLibraryKeepLocalChangeRequest copyWithZone:]
  -[MPModelLibraryKeepLocalChangeRequest modelObject]


MPPCompoundPredicate : PBCodable <NSCopying>
 @property  NSMutableArray *predicates

  // instance methods
  -[MPPCompoundPredicate predicates]
  -[MPPCompoundPredicate .cxx_destruct]
  -[MPPCompoundPredicate dictionaryRepresentation]
  -[MPPCompoundPredicate writeTo:]
  -[MPPCompoundPredicate isEqual:]
  -[MPPCompoundPredicate copyTo:]
  -[MPPCompoundPredicate readFrom:]
  -[MPPCompoundPredicate setPredicates:]
  -[MPPCompoundPredicate addPredicates:]
  -[MPPCompoundPredicate predicatesCount]
  -[MPPCompoundPredicate clearPredicates]
  -[MPPCompoundPredicate predicatesAtIndex:]
  -[MPPCompoundPredicate dealloc]
  -[MPPCompoundPredicate copyWithZone:]


MPAVPolicyEnforcer : NSObject
 @property  MPAVController *controller

  // instance methods
  -[MPAVPolicyEnforcer controller]
  -[MPAVPolicyEnforcer .cxx_destruct]
  -[MPAVPolicyEnforcer initWithAVController:]
  -[MPAVPolicyEnforcer _registerForScreenRecordingNotifications]
  -[MPAVPolicyEnforcer _unregisterForScreenRecordingNotifications]
  -[MPAVPolicyEnforcer _updateScreenRecordingState]
  -[MPAVPolicyEnforcer _isScreenRecordingDidChange:]
  -[MPAVPolicyEnforcer _applicationWillEnterForeground:]
  -[MPAVPolicyEnforcer dealloc]


MPTiledArtworkRepresentationCacheKey : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPTiledArtworkRepresentationCacheKey stringRepresentation]
  -[MPTiledArtworkRepresentationCacheKey .cxx_destruct]
  -[MPTiledArtworkRepresentationCacheKey init]
  -[MPTiledArtworkRepresentationCacheKey isEqual:]
  -[MPTiledArtworkRepresentationCacheKey initWithTiledArtworkRequest:scaledFittingSize:]
  -[MPTiledArtworkRepresentationCacheKey copyWithZone:]


MPAVRoutingTableViewCellSubtitleTextState : NSObject
 @property  unsigned long currentVisibleTextType
 @property  BOOL hasVisibleTextTypeToShow
 @property  BOOL hasVisibleTextTypeToTransitionTo
 @property  NSString *stringForCurrentVisibleTextType
 @property  NSString *routeUID
 @property  NSString *batteryText
 @property  NSString *pairedDeviceText
 @property  NSString *localizedSubtitle
 @property  BOOL animating

  // instance methods
  -[MPAVRoutingTableViewCellSubtitleTextState routeUID]
  -[MPAVRoutingTableViewCellSubtitleTextState .cxx_destruct]
  -[MPAVRoutingTableViewCellSubtitleTextState setRouteUID:]
  -[MPAVRoutingTableViewCellSubtitleTextState isAnimating]
  -[MPAVRoutingTableViewCellSubtitleTextState setAnimating:]
  -[MPAVRoutingTableViewCellSubtitleTextState localizedSubtitle]
  -[MPAVRoutingTableViewCellSubtitleTextState hasVisibleTextTypeToShow]
  -[MPAVRoutingTableViewCellSubtitleTextState setBatteryText:]
  -[MPAVRoutingTableViewCellSubtitleTextState setPairedDeviceText:]
  -[MPAVRoutingTableViewCellSubtitleTextState resetForNewRoute]
  -[MPAVRoutingTableViewCellSubtitleTextState stringForCurrentVisibleTextType]
  -[MPAVRoutingTableViewCellSubtitleTextState hasVisibleTextTypeToTransitionTo]
  -[MPAVRoutingTableViewCellSubtitleTextState transitionToNextAvailableVisibleTextType]
  -[MPAVRoutingTableViewCellSubtitleTextState setLocalizedSubtitle:]
  -[MPAVRoutingTableViewCellSubtitleTextState _stringForVisibleTextType:]
  -[MPAVRoutingTableViewCellSubtitleTextState _nextAvailableVisibleTextType]
  -[MPAVRoutingTableViewCellSubtitleTextState batteryText]
  -[MPAVRoutingTableViewCellSubtitleTextState pairedDeviceText]
  -[MPAVRoutingTableViewCellSubtitleTextState currentVisibleTextType]
  -[MPAVRoutingTableViewCellSubtitleTextState setCurrentVisibleTextType:]


MPRemotePlaybackQueue : NSObject <NSSecureCoding>
 @property  ^{_MRSystemAppPlaybackQueue=} _mediaRemotePlaybackQueue
 @property  NSDictionary *mediaRemoteOptions
 @property  NSDictionary *userInfo
 @property  BOOL requestingImmediatePlayback
 @property  BOOL shouldOverrideManuallyCuratedQueue
 @property  long long replaceIntent
 @property  NSString *siriRecommendationIdentifier
 @property  NSString *siriAssetInfo
 @property  NSString *queueGroupingID
 @property  NSString *featureName
 @property  NSDictionary *siriWHAMetricsInfo
 @property  ICUserIdentity *userIdentity

  // class methods
  +[MPRemotePlaybackQueue supportsSecureCoding]
  +[MPRemotePlaybackQueue queueWithMediaRemotePlaybackQueue:options:]
  +[MPRemotePlaybackQueue queueWithMediaRemotePlaybackQueue:]
  +[MPRemotePlaybackQueue registerRemotePlaybackQueueClass:forPlaybackQueueType:]

  // instance methods
  -[MPRemotePlaybackQueue setUserInfo:]
  -[MPRemotePlaybackQueue siriAssetInfo]
  -[MPRemotePlaybackQueue userIdentity]
  -[MPRemotePlaybackQueue initWithCoder:]
  -[MPRemotePlaybackQueue queueGroupingID]
  -[MPRemotePlaybackQueue .cxx_destruct]
  -[MPRemotePlaybackQueue init]
  -[MPRemotePlaybackQueue siriWHAMetricsInfo]
  -[MPRemotePlaybackQueue featureName]
  -[MPRemotePlaybackQueue initWithMediaRemotePlaybackQueue:options:]
  -[MPRemotePlaybackQueue setReplaceIntent:]
  -[MPRemotePlaybackQueue replaceIntent]
  -[MPRemotePlaybackQueue userInfo]
  -[MPRemotePlaybackQueue isRequestingImmediatePlayback]
  -[MPRemotePlaybackQueue setRequestingImmediatePlayback:]
  -[MPRemotePlaybackQueue siriRecommendationIdentifier]
  -[MPRemotePlaybackQueue setSiriRecommendationIdentifier:]
  -[MPRemotePlaybackQueue shouldOverrideManuallyCuratedQueue]
  -[MPRemotePlaybackQueue verifyWithError:]
  -[MPRemotePlaybackQueue mediaRemoteOptions]
  -[MPRemotePlaybackQueue setShouldOverrideManuallyCuratedQueue:]
  -[MPRemotePlaybackQueue _mediaRemotePlaybackQueue]
  -[MPRemotePlaybackQueue dealloc]
  -[MPRemotePlaybackQueue encodeWithCoder:]


MPLocalMediaQueryRemotePlaybackQueue : MPRemotePlaybackQueue
 @property  MPMediaQuery *mediaQuery
 @property  MPMediaItem *firstItem
 @property  long long shuffleType
 @property  long long repeatType

  // class methods
  +[MPLocalMediaQueryRemotePlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPLocalMediaQueryRemotePlaybackQueue firstItem]
  -[MPLocalMediaQueryRemotePlaybackQueue .cxx_destruct]
  -[MPLocalMediaQueryRemotePlaybackQueue initWithMediaRemotePlaybackQueue:options:]
  -[MPLocalMediaQueryRemotePlaybackQueue verifyWithError:]
  -[MPLocalMediaQueryRemotePlaybackQueue mediaQuery]
  -[MPLocalMediaQueryRemotePlaybackQueue shuffleType]
  -[MPLocalMediaQueryRemotePlaybackQueue repeatType]


MPRadioStationRemotePlaybackQueue : MPRemotePlaybackQueue
 @property  long long stationID
 @property  NSString *stationStringID

  // class methods
  +[MPRadioStationRemotePlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPRadioStationRemotePlaybackQueue .cxx_destruct]
  -[MPRadioStationRemotePlaybackQueue stationStringID]
  -[MPRadioStationRemotePlaybackQueue stationID]
  -[MPRadioStationRemotePlaybackQueue initWithMediaRemotePlaybackQueue:options:]
  -[MPRadioStationRemotePlaybackQueue verifyWithError:]


MPGenericTracklistPlaybackQueue : MPRemotePlaybackQueue
 @property  NSString *firstTrackIdentifier
 @property  NSArray *trackIdentifiers
 @property  long long shuffleType
 @property  long long repeatType
 @property  MPIdentifierSet *collectionIdentifierSet

  // class methods
  +[MPGenericTracklistPlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPGenericTracklistPlaybackQueue .cxx_destruct]
  -[MPGenericTracklistPlaybackQueue initWithMediaRemotePlaybackQueue:options:]
  -[MPGenericTracklistPlaybackQueue verifyWithError:]
  -[MPGenericTracklistPlaybackQueue trackIdentifiers]
  -[MPGenericTracklistPlaybackQueue firstTrackIdentifier]
  -[MPGenericTracklistPlaybackQueue collectionIdentifierSet]
  -[MPGenericTracklistPlaybackQueue shuffleType]
  -[MPGenericTracklistPlaybackQueue repeatType]


MPCustomDataPlaybackQueue : MPRemotePlaybackQueue
 @property  NSString *identifier
 @property  NSData *data

  // class methods
  +[MPCustomDataPlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPCustomDataPlaybackQueue data]
  -[MPCustomDataPlaybackQueue identifier]
  -[MPCustomDataPlaybackQueue initWithIdentifier:data:]


MPEmptyPlaybackQueue : MPRemotePlaybackQueue
  // class methods
  +[MPEmptyPlaybackQueue supportsSecureCoding]

  // instance methods
  -[MPEmptyPlaybackQueue init]


MPRouteButton : UIControl
 @property  UIImage *accessoryImage
 @property  double accessoryImageSpacing
 @property  UIFont *font
 @property  {UIEdgeInsets=dddd} hitRectInsets
 @property  MPAVRoute *route
 @property  NSString *routeTitle
 @property  BOOL routeLabelHidden
 @property  BOOL forcesUppercaseText
 @property  UIColor *overrideColor
 @property  long long routeLabelAxis

  // instance methods
  -[MPRouteButton setHighlighted:]
  -[MPRouteButton setForcesUppercaseText:]
  -[MPRouteButton route]
  -[MPRouteButton setFont:]
  -[MPRouteButton _intrinsicContentSizeInvalidatedForChildView:]
  -[MPRouteButton .cxx_destruct]
  -[MPRouteButton layoutSubviews]
  -[MPRouteButton tintColorDidChange]
  -[MPRouteButton hitRectInsets]
  -[MPRouteButton sizeThatFits:]
  -[MPRouteButton font]
  -[MPRouteButton setAlpha:]
  -[MPRouteButton accessoryImage]
  -[MPRouteButton forcesUppercaseText]
  -[MPRouteButton initWithFrame:]
  -[MPRouteButton pointInside:withEvent:]
  -[MPRouteButton setRoute:]
  -[MPRouteButton setHitRectInsets:]
  -[MPRouteButton routeLabelAxis]
  -[MPRouteButton overrideColor]
  -[MPRouteButton accessoryImageSpacing]
  -[MPRouteButton isRouteLabelHidden]
  -[MPRouteButton setAccessoryImageSpacing:]
  -[MPRouteButton setRouteLabelHidden:]
  -[MPRouteButton setRouteLabelAxis:]
  -[MPRouteButton setOverrideColor:]
  -[MPRouteButton routeTitle]
  -[MPRouteButton setAccessoryImage:]
  -[MPRouteButton intrinsicContentSize]


MPStoreLyricsRequest : NSObject <NSCopying>
 @property  MPModelSong *song

  // class methods
  +[MPStoreLyricsRequest supportsLyricsForURLBag:]
  +[MPStoreLyricsRequest supportsLyricsForURLBagDictionary:]

  // instance methods
  -[MPStoreLyricsRequest song]
  -[MPStoreLyricsRequest newOperationWithResponseHandler:]
  -[MPStoreLyricsRequest .cxx_destruct]
  -[MPStoreLyricsRequest setSong:]
  -[MPStoreLyricsRequest copyWithZone:]


MPModelPodcastAuthor : MPModelPerson

MPRadioRecentStationsGroup : NSObject <NSSecureCoding>
 @property  NSString *localizedTitle
 @property  NSArray *stations

  // class methods
  +[MPRadioRecentStationsGroup supportsSecureCoding]

  // instance methods
  -[MPRadioRecentStationsGroup localizedTitle]
  -[MPRadioRecentStationsGroup initWithCoder:]
  -[MPRadioRecentStationsGroup .cxx_destruct]
  -[MPRadioRecentStationsGroup stations]
  -[MPRadioRecentStationsGroup setLocalizedTitle:]
  -[MPRadioRecentStationsGroup setStations:]
  -[MPRadioRecentStationsGroup encodeWithCoder:]


MPModelStoreBrowseSectionBuilder : NSObject
 @property  MPPropertySet *requestedPropertySet
 @property  MPPropertySet *requestedPropertySetExcludingInternalOnlyProperties

  // class methods
  +[MPModelStoreBrowseSectionBuilder allSupportedInternalOnlyProperties]
  +[MPModelStoreBrowseSectionBuilder allSupportedPropertiesIncludingInternalOnlyProperties:]

  // instance methods
  -[MPModelStoreBrowseSectionBuilder modelObjectWithTitle:loadAdditionalContentURL:uniformContentItemType:isMemberOfChartSet:isBrick:displaysAsGridCellInCarPlay:previouslyRetrievedNestedResponse:onlyContainsEditorialElements:featuredContentKind:]
  -[MPModelStoreBrowseSectionBuilder modelObjectWithTitle:loadAdditionalContentURL:uniformContentItemType:isMemberOfChartSet:isBrick:displaysAsGridCellInCarPlay:previouslyRetrievedNestedResponse:onlyContainsEditorialElements:featuredContentKind:modelObject:]
  -[MPModelStoreBrowseSectionBuilder modelObjectWithTitle:loadAdditionalContentURL:uniformContentItemType:isMemberOfChartSet:isBrick:previouslyRetrievedNestedResponse:]
  -[MPModelStoreBrowseSectionBuilder .cxx_destruct]
  -[MPModelStoreBrowseSectionBuilder requestedPropertySet]
  -[MPModelStoreBrowseSectionBuilder initWithRequestedPropertySet:]
  -[MPModelStoreBrowseSectionBuilder requestedPropertySetExcludingInternalOnlyProperties]


MPModelStoreGroupingsMusicKitResponseParser : NSObject
 @property  MPSectionedCollection *results

  // instance methods
  -[MPModelStoreGroupingsMusicKitResponseParser initWithRawResponseOutput:sectionBuilder:contentItemBuilder:filteredFCKinds:userIdentity:rootObjectIdentifier:options:storeURLBag:]
  -[MPModelStoreGroupingsMusicKitResponseParser results]
  -[MPModelStoreGroupingsMusicKitResponseParser .cxx_destruct]
  -[MPModelStoreGroupingsMusicKitResponseParser _parsedSectionedCollection]
  -[MPModelStoreGroupingsMusicKitResponseParser _parsedEditorialElements:]
  -[MPModelStoreGroupingsMusicKitResponseParser _parsedEditorialElementX:]
  -[MPModelStoreGroupingsMusicKitResponseParser featuredContentKindForNode:]
  -[MPModelStoreGroupingsMusicKitResponseParser childrenOfContentNode:]
  -[MPModelStoreGroupingsMusicKitResponseParser _parsedEditorialElement:]
  -[MPModelStoreGroupingsMusicKitResponseParser featuredContentKindCorrespondsToItem:]
  -[MPModelStoreGroupingsMusicKitResponseParser isContentNodeAnEditorialElement:]
  -[MPModelStoreGroupingsMusicKitResponseParser firstChildOfContentNode:]
  -[MPModelStoreGroupingsMusicKitResponseParser attributesForContentNode:]
  -[MPModelStoreGroupingsMusicKitResponseParser linkSectionWithDictionary:]
  -[MPModelStoreGroupingsMusicKitResponseParser bagRoomURLRegularExpression]
  -[MPModelStoreGroupingsMusicKitResponseParser _parsedContentNode:uniformContentItemTypeResolver:additionalAttributesFromParent:]
  -[MPModelStoreGroupingsMusicKitResponseParser linksForContentNode:]
  -[MPModelStoreGroupingsMusicKitResponseParser musicAPIURLWithLinkURLString:]


MPStoreModelAlbumBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelAlbumBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelAlbumBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPShuffleableSectionedIdentifierList : MPSectionedIdentifierList <_MPSSILDelegate>
 @property  NSString *shuffleStartingSectionIdentifier
 @property  NSString *shuffleStartingItemIdentifier
 @property  <MPShuffleableSectionedIdentifierListDelegate> *delegate
 @property  long long shuffleType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPShuffleableSectionedIdentifierList supportsSecureCoding]

  // instance methods
  -[MPShuffleableSectionedIdentifierList initWithCoder:]
  -[MPShuffleableSectionedIdentifierList .cxx_destruct]
  -[MPShuffleableSectionedIdentifierList encodeWithCoder:withExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList setShuffleType:startingItem:inSection:randomSource:]
  -[MPShuffleableSectionedIdentifierList safelyReshuffleAfterItem:inSection:]
  -[MPShuffleableSectionedIdentifierList setShuffleType:]
  -[MPShuffleableSectionedIdentifierList _shuffledListWithExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList addDataSourceAtStart:section:sequentially:completion:]
  -[MPShuffleableSectionedIdentifierList enumeratorWithOptions:startPosition:endPosition:withExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList moveItemToStart:fromSection:]
  -[MPShuffleableSectionedIdentifierList addDataSource:section:sequentially:afterItem:inSection:completion:]
  -[MPShuffleableSectionedIdentifierList moveItemToEnd:fromSection:]
  -[MPShuffleableSectionedIdentifierList addDataSource:section:sequentially:afterTailOfSection:completion:]
  -[MPShuffleableSectionedIdentifierList removeItem:fromSection:]
  -[MPShuffleableSectionedIdentifierList addDataSourceAtEnd:section:sequentially:completion:]
  -[MPShuffleableSectionedIdentifierList addDataSourceAtStart:section:completion:]
  -[MPShuffleableSectionedIdentifierList addDataSource:section:afterItem:inSection:completion:]
  -[MPShuffleableSectionedIdentifierList addDataSourceAtEnd:section:completion:]
  -[MPShuffleableSectionedIdentifierList addDataSource:section:afterTailOfSection:completion:]
  -[MPShuffleableSectionedIdentifierList replaceDataSource:forSection:completion:]
  -[MPShuffleableSectionedIdentifierList moveItem:fromSection:afterItem:inSection:]
  -[MPShuffleableSectionedIdentifierList moveItem:fromSection:afterHeadOfSection:]
  -[MPShuffleableSectionedIdentifierList moveItem:fromSection:afterTailOfSection:]
  -[MPShuffleableSectionedIdentifierList _itemCountWithExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList dataSourceInsertItemsAtHead:inSection:]
  -[MPShuffleableSectionedIdentifierList dataSourceInsertItems:afterItem:inSection:]
  -[MPShuffleableSectionedIdentifierList dataSourceInsertItemsAtTail:inSection:]
  -[MPShuffleableSectionedIdentifierList dataSourceRemoveItem:fromSection:]
  -[MPShuffleableSectionedIdentifierList dataSourceReloadItem:inSection:]
  -[MPShuffleableSectionedIdentifierList didDequeueShuffledItemsInSSIL:]
  -[MPShuffleableSectionedIdentifierList _candidateItemsWithExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList setShuffleStartingSectionIdentifier:]
  -[MPShuffleableSectionedIdentifierList shuffleStartingSectionIdentifier]
  -[MPShuffleableSectionedIdentifierList setShuffleType:startingItem:inSection:]
  -[MPShuffleableSectionedIdentifierList addDataSource:section:afterHeadOfSection:]
  -[MPShuffleableSectionedIdentifierList _dequeueCandidatesWithQuota:withExclusiveAccessToken:]
  -[MPShuffleableSectionedIdentifierList shuffleStartingItemIdentifier]
  -[MPShuffleableSectionedIdentifierList setShuffleStartingItemIdentifier:]
  -[MPShuffleableSectionedIdentifierList shuffleType]


_MPSSILImplementationInitToken : NSObject <MPExclusiveAccessToken>
  // instance methods
  -[_MPSSILImplementationInitToken assertHasExclusiveAccessForOwner:]


_MPSSILImplementation : MPSectionedIdentifierList
 @property  <_MPSSILDelegate> *delegate
 @property  MPRandomDistribution *randomDistribution
 @property  NSMutableArray *candidateItems

  // class methods
  +[_MPSSILImplementation supportsSecureCoding]

  // instance methods
  -[_MPSSILImplementation initWithCoder:]
  -[_MPSSILImplementation .cxx_destruct]
  -[_MPSSILImplementation itemCount]
  -[_MPSSILImplementation _beforeInitWithCoder:]
  -[_MPSSILImplementation encodeWithCoder:withExclusiveAccessToken:]
  -[_MPSSILImplementation safelyReshuffleAfterItem:inSection:]
  -[_MPSSILImplementation initWithSectionedIdentifierList:randomSource:startingItemEntry:withExclusiveAccessToken:]
  -[_MPSSILImplementation candidateItems]
  -[_MPSSILImplementation addDataSourceAtStart:section:sequentially:]
  -[_MPSSILImplementation addDataSource:section:sequentially:afterItem:inSection:]
  -[_MPSSILImplementation addDataSource:section:sequentially:afterTailOfSection:]
  -[_MPSSILImplementation addDataSourceAtEnd:section:sequentially:]
  -[_MPSSILImplementation _isSequentialSection:withExclusiveAccessToken:]
  -[_MPSSILImplementation dataSourceInsertItemsAtHead:inSection:]
  -[_MPSSILImplementation dequeueCandidatesWithQuota:]
  -[_MPSSILImplementation dataSourceInsertItems:afterItem:inSection:]
  -[_MPSSILImplementation dataSourceInsertItemsAtTail:inSection:]
  -[_MPSSILImplementation dataSourceRemoveItem:fromSection:]
  -[_MPSSILImplementation dataSourceReloadItem:inSection:]
  -[_MPSSILImplementation _dequeueCandidatesWithQuota:withExclusiveAccessToken:]
  -[_MPSSILImplementation _addShuffleSection:dataSource:withExclusiveAccessToken:]
  -[_MPSSILImplementation _createShuffleCloneForItem:inSection:withExclusiveAccessToken:]
  -[_MPSSILImplementation _appendShuffledItems:withExclusiveAccessToken:]
  -[_MPSSILImplementation _enumerator:didEncounterEntry:withExclusiveAccessToken:]
  -[_MPSSILImplementation _reverseEnumeratorWillStartAtEnd:withExclusiveAccessToken:]
  -[_MPSSILImplementation randomDistribution]
  -[_MPSSILImplementation setCandidateItems:]


MPStoreLyricsSnippetRequest : NSObject
 @property  MPStoreLyricsSnippetURLComponents *snippetURL

  // instance methods
  -[MPStoreLyricsSnippetRequest newOperationWithResponseHandler:]
  -[MPStoreLyricsSnippetRequest .cxx_destruct]
  -[MPStoreLyricsSnippetRequest setSnippetURL:]
  -[MPStoreLyricsSnippetRequest snippetURL]


MPModelLibrarySearchScope : NSObject <NSCopying, NSSecureCoding>
 @property  {shared_ptr<mlcore::LocalizedSearchScope>=^{LocalizedSearchScope}^{__shared_weak_count}} coreScope
 @property  MPModelKind *itemKind
 @property  NSString *name
 @property  MPPropertySet *itemProperties

  // class methods
  +[MPModelLibrarySearchScope supportsSecureCoding]

  // instance methods
  -[MPModelLibrarySearchScope name]
  -[MPModelLibrarySearchScope initWithCoder:]
  -[MPModelLibrarySearchScope itemProperties]
  -[MPModelLibrarySearchScope .cxx_construct]
  -[MPModelLibrarySearchScope .cxx_destruct]
  -[MPModelLibrarySearchScope setItemKind:]
  -[MPModelLibrarySearchScope isEqual:]
  -[MPModelLibrarySearchScope itemKind]
  -[MPModelLibrarySearchScope coreScope]
  -[MPModelLibrarySearchScope copyWithZone:]
  -[MPModelLibrarySearchScope initWithItemKind:name:properties:]
  -[MPModelLibrarySearchScope encodeWithCoder:]


MPModelLibraryAlbumAppDataChangeRequestOperation : MPAsyncOperation
 @property  @? responseHandler
 @property  MPModelLibraryAlbumAppDataChangeRequest *request

  // instance methods
  -[MPModelLibraryAlbumAppDataChangeRequestOperation setRequest:]
  -[MPModelLibraryAlbumAppDataChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryAlbumAppDataChangeRequestOperation responseHandler]
  -[MPModelLibraryAlbumAppDataChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryAlbumAppDataChangeRequestOperation execute]
  -[MPModelLibraryAlbumAppDataChangeRequestOperation request]


MPModelRecentlyPlayedRequest : MPStoreModelRequest
  // class methods
  +[MPModelRecentlyPlayedRequest supportsSecureCoding]
  +[MPModelRecentlyPlayedRequest allSupportedItemProperties]
  +[MPModelRecentlyPlayedRequest allSupportedSectionProperties]

  // instance methods
  -[MPModelRecentlyPlayedRequest newOperationWithResponseHandler:]


MPModelLibraryAddToPlaylistChangeRequest : NSObject <NSCopying>
 @property  MPModelPlaylist *playlist
 @property  MPModelObject *representativeModelObject
 @property  MPModelObject *referralObject
 @property  MPSectionedCollection *songResults
 @property  @? storeImportAllowedHandler

  // instance methods
  -[MPModelLibraryAddToPlaylistChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryAddToPlaylistChangeRequest .cxx_destruct]
  -[MPModelLibraryAddToPlaylistChangeRequest playlist]
  -[MPModelLibraryAddToPlaylistChangeRequest setPlaylist:]
  -[MPModelLibraryAddToPlaylistChangeRequest copyWithZone:]
  -[MPModelLibraryAddToPlaylistChangeRequest songResults]
  -[MPModelLibraryAddToPlaylistChangeRequest setReferralObject:]
  -[MPModelLibraryAddToPlaylistChangeRequest referralObject]
  -[MPModelLibraryAddToPlaylistChangeRequest representativeModelObject]
  -[MPModelLibraryAddToPlaylistChangeRequest setRepresentativeModelObject:]
  -[MPModelLibraryAddToPlaylistChangeRequest setSongResults:]
  -[MPModelLibraryAddToPlaylistChangeRequest storeImportAllowedHandler]
  -[MPModelLibraryAddToPlaylistChangeRequest setStoreImportAllowedHandler:]


MPModelStoreBrowseResponse : MPModelResponse
 @property  MPModelStoreBrowseResponseParser *parser
 @property  MPChangeDetails *changeDetails
 @property  BOOL hasAdditionalContentItems

  // instance methods
  -[MPModelStoreBrowseResponse .cxx_destruct]
  -[MPModelStoreBrowseResponse changeDetails]
  -[MPModelStoreBrowseResponse setChangeDetails:]
  -[MPModelStoreBrowseResponse hasAdditionalContentItems]
  -[MPModelStoreBrowseResponse setParser:]
  -[MPModelStoreBrowseResponse parser]


MPArtworkResizeUtility : NSObject
 @property  NSObject<OS_dispatch_queue> *artworkResizingAccessQueue
 @property  NSOperationQueue *artworkResizingOperationQueue
 @property  NSMapTable *artworkResizingOperations

  // instance methods
  -[MPArtworkResizeUtility artworkResizingOperationQueue]
  -[MPArtworkResizeUtility .cxx_destruct]
  -[MPArtworkResizeUtility setArtworkResizingOperations:]
  -[MPArtworkResizeUtility init]
  -[MPArtworkResizeUtility artworkResizingAccessQueue]
  -[MPArtworkResizeUtility setArtworkResizingOperationQueue:]
  -[MPArtworkResizeUtility resizeImage:scaledFittingSize:useExactFittingSizeAsDestinationSize:saveToDestinationURL:completionHandler:]
  -[MPArtworkResizeUtility cancelResizeImage:]
  -[MPArtworkResizeUtility artworkResizingOperations]
  -[MPArtworkResizeUtility setArtworkResizingAccessQueue:]


MPAVLightweightRoutingController : NSObject
 @property  long long discoveryMode
 @property  NSArray *pickedRoutes
 @property  BOOL devicePresenceDetected
 @property  NSString *name
 @property  <MPAVLightweightRoutingControllerDelegate> *delegate

  // instance methods
  -[MPAVLightweightRoutingController name]
  -[MPAVLightweightRoutingController .cxx_destruct]
  -[MPAVLightweightRoutingController discoveryMode]
  -[MPAVLightweightRoutingController setDelegate:]
  -[MPAVLightweightRoutingController initWithName:]
  -[MPAVLightweightRoutingController setDiscoveryMode:]
  -[MPAVLightweightRoutingController delegate]
  -[MPAVLightweightRoutingController pickedRoutes]
  -[MPAVLightweightRoutingController dealloc]
  -[MPAVLightweightRoutingController isDevicePresenceDetected]
  -[MPAVLightweightRoutingController _outputContextDevicesDidChangeNotification:]
  -[MPAVLightweightRoutingController _postPickedRoutesChangedNotification]
  -[MPAVLightweightRoutingController _onSyncSelf_schedulePickedRoutesChangedNotification]
  -[MPAVLightweightRoutingController _availableOutputDevicesDidChangeNotification:]


MPSectionedCollection : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSObject>
 @property  id firstSection
 @property  id lastSection
 @property  id firstItem
 @property  id lastItem
 @property  long long totalItemCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPSectionedCollection supportsSecureCoding]

  // instance methods
  -[MPSectionedCollection lastItem]
  -[MPSectionedCollection sectionAtIndex:]
  -[MPSectionedCollection _initializeAsEmptySectionedCollection]
  -[MPSectionedCollection initWithCoder:]
  -[MPSectionedCollection firstItem]
  -[MPSectionedCollection numberOfItemsInSection:]
  -[MPSectionedCollection enumerateSectionsUsingBlock:]
  -[MPSectionedCollection hasSameContentAsSectionedCollection:]
  -[MPSectionedCollection enumerateItemsUsingBlock:]
  -[MPSectionedCollection numberOfSections]
  -[MPSectionedCollection .cxx_destruct]
  -[MPSectionedCollection itemsInSectionAtIndex:]
  -[MPSectionedCollection identifiersForItemAtIndexPath:]
  -[MPSectionedCollection totalItemCount]
  -[MPSectionedCollection init]
  -[MPSectionedCollection enumerateItemIdentifiersUsingBlock:]
  -[MPSectionedCollection globalIndexForIndexPath:]
  -[MPSectionedCollection enumerateItemsInSectionAtIndex:usingBlock:]
  -[MPSectionedCollection _stateDumpObject]
  -[MPSectionedCollection allItems]
  -[MPSectionedCollection mutableCopyWithZone:]
  -[MPSectionedCollection itemAtIndexPath:]
  -[MPSectionedCollection identifiersForSectionAtIndex:]
  -[MPSectionedCollection copyWithZone:]
  -[MPSectionedCollection indexPathForItemWithIdentifiersIntersectingSet:]
  -[MPSectionedCollection lastSection]
  -[MPSectionedCollection changeDetailsToSectionedCollection:applyingUIKitWorkarounds:isEqualBlock:isUpdatedBlock:]
  -[MPSectionedCollection changeDetailsToSectionedCollection:isEqualBlock:isUpdatedBlock:]
  -[MPSectionedCollection enumerateSectionIdentifiersUsingBlock:]
  -[MPSectionedCollection enumerateItemIdentifiersInSectionAtIndex:usingBlock:]
  -[MPSectionedCollection indexPathForGlobalIndex:]
  -[MPSectionedCollection allSections]
  -[MPSectionedCollection encodeWithCoder:]
  -[MPSectionedCollection firstSection]


MPMutableSectionedCollection : MPSectionedCollection
  // instance methods
  -[MPMutableSectionedCollection removeAllObjects]
  -[MPMutableSectionedCollection _initializeAsEmptySectionedCollection]
  -[MPMutableSectionedCollection replaceSectionsUsingBlock:]
  -[MPMutableSectionedCollection moveItemFromIndexPath:toIndexPath:]
  -[MPMutableSectionedCollection insertSection:atIndex:]
  -[MPMutableSectionedCollection appendSection:]
  -[MPMutableSectionedCollection removeItemAtIndexPath:]
  -[MPMutableSectionedCollection removeSectionAtIndex:]
  -[MPMutableSectionedCollection replaceSectionAtIndex:withObject:]
  -[MPMutableSectionedCollection replaceObjectAtIndexPath:withObject:]
  -[MPMutableSectionedCollection insertItem:atIndexPath:]
  -[MPMutableSectionedCollection appendItems:]
  -[MPMutableSectionedCollection replaceItemsUsingBlock:]
  -[MPMutableSectionedCollection copyWithZone:]
  -[MPMutableSectionedCollection appendItem:]
  -[MPMutableSectionedCollection moveSectionFromIndex:toIndex:]


MPStoreModelTVShowBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelTVShowBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelTVShowBuilder .cxx_destruct]
  -[MPStoreModelTVShowBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPModelPlayEvent : MPModelObject
 @property  NSString *title
 @property  NSDate *datePlayed
 @property  NSString *featureName
 @property  MPModelAlbum *album
 @property  MPModelArtist *artist
 @property  MPModelPlaylist *playlist
 @property  MPModelRadioStation *radioStation
 @property  MPModelGroup *group

  // class methods
  +[MPModelPlayEvent __artist_KEY]
  +[MPModelPlayEvent __radioStation_KEY]
  +[MPModelPlayEvent __album_KEY]
  +[MPModelPlayEvent __playlist_KEY]
  +[MPModelPlayEvent __group_KEY]
  +[MPModelPlayEvent __datePlayed_KEY]
  +[MPModelPlayEvent __featureName_KEY]
  +[MPModelPlayEvent playEventWithModelObject:featureName:]

  // instance methods
  -[MPModelPlayEvent itemType]
  -[MPModelPlayEvent contentItemCollectionInfo]
  -[MPModelPlayEvent title]
  -[MPModelPlayEvent genericObjectRepresentation]


MPModelForYouRecommendationsResponse : MPModelResponse

MPMediaControlsStatusBarStyleOverridesCoordinator : NSObject <SBSStatusBarStyleOverridesCoordinatorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaControlsStatusBarStyleOverridesCoordinator .cxx_destruct]
  -[MPMediaControlsStatusBarStyleOverridesCoordinator init]
  -[MPMediaControlsStatusBarStyleOverridesCoordinator presentMediaControls]
  -[MPMediaControlsStatusBarStyleOverridesCoordinator presentMediaControlsWithCompletion:]
  -[MPMediaControlsStatusBarStyleOverridesCoordinator statusBarCoordinator:invalidatedRegistrationWithError:]
  -[MPMediaControlsStatusBarStyleOverridesCoordinator statusBarCoordinator:receivedTapWithContext:completionBlock:]


MPModelStoreRadioMusicKitRequestOperation : MPModelStoreGroupingsMusicKitRequestOperation
  // instance methods
  -[MPModelStoreRadioMusicKitRequestOperation recentlyPlayedURLWithStoreURLBag:]
  -[MPModelStoreRadioMusicKitRequestOperation recentlyPlayedItemsWithAPILoadedOutput:]
  -[MPModelStoreRadioMusicKitRequestOperation groupingNameBagKey]
  -[MPModelStoreRadioMusicKitRequestOperation recentlyPlayedSectionWithTitle:]
  -[MPModelStoreRadioMusicKitRequestOperation recentlyPlayedItemWithDictionary:]
  -[MPModelStoreRadioMusicKitRequestOperation radioStationWithDictionary:]
  -[MPModelStoreRadioMusicKitRequestOperation radioStationTypeFromKind:]
  -[MPModelStoreRadioMusicKitRequestOperation radioStationSubTypeFromSubType:]
  -[MPModelStoreRadioMusicKitRequestOperation additionalURLRequestsWithStoreURLBag:]
  -[MPModelStoreRadioMusicKitRequestOperation additionalCatalogURLQueryItems]
  -[MPModelStoreRadioMusicKitRequestOperation groupingNameWithMusicSubscriptionDictionary:]
  -[MPModelStoreRadioMusicKitRequestOperation rootObjectIdentifierWithSubscriptionStatus:]
  -[MPModelStoreRadioMusicKitRequestOperation produceResponseWithLoadedOutput:completion:]


MPSectionedIdentifierListEnumerator : NSEnumerator
 @property  unsigned long options
 @property  NSMutableArray *contexts
 @property  NSMutableArray *nextEmittableEnumerationResults
 @property  MPSectionedIdentifierListEntry *endEntry
 @property  MPSectionedIdentifierList *sectionedIdentifierList

  // instance methods
  -[MPSectionedIdentifierListEnumerator contexts]
  -[MPSectionedIdentifierListEnumerator nextObject]
  -[MPSectionedIdentifierListEnumerator setContexts:]
  -[MPSectionedIdentifierListEnumerator options]
  -[MPSectionedIdentifierListEnumerator setOptions:]
  -[MPSectionedIdentifierListEnumerator .cxx_destruct]
  -[MPSectionedIdentifierListEnumerator endEntry]
  -[MPSectionedIdentifierListEnumerator nextObjectWithExclusiveAccessToken:]
  -[MPSectionedIdentifierListEnumerator sectionedIdentifierList]
  -[MPSectionedIdentifierListEnumerator nextEmittableEnumerationResults]
  -[MPSectionedIdentifierListEnumerator initWithSectionedIdentifierList:options:startEntry:endEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierListEnumerator setEndEntry:]
  -[MPSectionedIdentifierListEnumerator setNextEmittableEnumerationResults:]


MPSectionedIdentifierListReverseEnumerator : NSEnumerator
 @property  unsigned long options
 @property  NSMutableArray *contexts
 @property  NSMutableArray *entriesToEmit
 @property  NSMutableArray *nextEmittableEnumerationResults
 @property  MPSectionedIdentifierListEntry *endEntry
 @property  MPSectionedIdentifierList *sectionedIdentifierList

  // instance methods
  -[MPSectionedIdentifierListReverseEnumerator contexts]
  -[MPSectionedIdentifierListReverseEnumerator nextObject]
  -[MPSectionedIdentifierListReverseEnumerator setContexts:]
  -[MPSectionedIdentifierListReverseEnumerator options]
  -[MPSectionedIdentifierListReverseEnumerator setOptions:]
  -[MPSectionedIdentifierListReverseEnumerator .cxx_destruct]
  -[MPSectionedIdentifierListReverseEnumerator endEntry]
  -[MPSectionedIdentifierListReverseEnumerator nextObjectWithExclusiveAccessToken:]
  -[MPSectionedIdentifierListReverseEnumerator sectionedIdentifierList]
  -[MPSectionedIdentifierListReverseEnumerator nextEmittableEnumerationResults]
  -[MPSectionedIdentifierListReverseEnumerator initWithSectionedIdentifierList:options:startEntry:endEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierListReverseEnumerator setEndEntry:]
  -[MPSectionedIdentifierListReverseEnumerator setNextEmittableEnumerationResults:]
  -[MPSectionedIdentifierListReverseEnumerator setEntriesToEmit:]
  -[MPSectionedIdentifierListReverseEnumerator _startEntryProxy]
  -[MPSectionedIdentifierListReverseEnumerator entriesToEmit]


_MPSectionedIdentifierListProxyEntry : NSObject <MPSectionedIdentifierListEnumerationResult>
 @property  long long branchDepth
 @property  long long entryType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPSectionedIdentifierListProxyEntry endEntry]
  +[_MPSectionedIdentifierListProxyEntry startEntry]

  // instance methods
  -[_MPSectionedIdentifierListProxyEntry entryType]
  -[_MPSectionedIdentifierListProxyEntry itemResult]
  -[_MPSectionedIdentifierListProxyEntry branchDepth]
  -[_MPSectionedIdentifierListProxyEntry trackingEntryResult]


MPStoreHLSAssetInfo : NSObject
 @property  NSURL *playlistURL
 @property  NSURL *keyCertificateURL
 @property  NSURL *keyServerURL
 @property  NSString *keyServerProtocolType
 @property  NSNumber *keyServerAdamID
 @property  NSURL *alternatePlaylistURL
 @property  NSURL *alternateKeyCertificateURL
 @property  NSURL *alternateKeyServerURL
 @property  BOOL iTunesStoreStream

  // instance methods
  -[MPStoreHLSAssetInfo .cxx_destruct]
  -[MPStoreHLSAssetInfo keyServerURL]
  -[MPStoreHLSAssetInfo playlistURL]
  -[MPStoreHLSAssetInfo keyCertificateURL]
  -[MPStoreHLSAssetInfo keyServerProtocolType]
  -[MPStoreHLSAssetInfo keyServerAdamID]
  -[MPStoreHLSAssetInfo alternatePlaylistURL]
  -[MPStoreHLSAssetInfo alternateKeyCertificateURL]
  -[MPStoreHLSAssetInfo alternateKeyServerURL]
  -[MPStoreHLSAssetInfo isiTunesStoreStream]
  -[MPStoreHLSAssetInfo initWithiTunesCloudStoreHLSAssetInfo:]


MPAssistantMusicSummaryLogEvent : MPAssistantMusicLogEvent
 @property  double blockingSecureKeyLoadDuration
 @property  NSNumber *perceivedTotalStartupTime
 @property  double tracklistLoadDuration

  // instance methods
  -[MPAssistantMusicSummaryLogEvent eventCode]
  -[MPAssistantMusicSummaryLogEvent .cxx_destruct]
  -[MPAssistantMusicSummaryLogEvent eventPayload]
  -[MPAssistantMusicSummaryLogEvent eventName]
  -[MPAssistantMusicSummaryLogEvent blockingSecureKeyLoadDuration]
  -[MPAssistantMusicSummaryLogEvent setBlockingSecureKeyLoadDuration:]
  -[MPAssistantMusicSummaryLogEvent perceivedTotalStartupTime]
  -[MPAssistantMusicSummaryLogEvent setPerceivedTotalStartupTime:]
  -[MPAssistantMusicSummaryLogEvent tracklistLoadDuration]
  -[MPAssistantMusicSummaryLogEvent setTracklistLoadDuration:]


MPVolumeSlider : UISlider <MPVolumeControllerDelegate, MPVolumeDisplaying>
 @property  BOOL _isOffScreen
 @property  {UIEdgeInsets=dddd} hitRectInsets
 @property  UILayoutGuide *trackLayoutGuide
 @property  UIView *thumbView
 @property  MPVolumeController *volumeController
 @property  MPAVController *player
 @property  MPAVRoute *route
 @property  MPAVEndpointRoute *groupRoute
 @property  MPAVOutputDeviceRoute *outputDeviceRoute
 @property  BOOL optimisticState
 @property  float optimisticValue
 @property  long long style
 @property  UIImage *volumeWarningTrackImage
 @property  NSString *volumeControlLabel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindowScene *windowSceneForVolumeDisplay
 @property  BOOL onScreenForVolumeDisplay
 @property  NSString *volumeAudioCategory
 @property  BOOL onScreen

  // instance methods
  -[MPVolumeSlider continueTrackingWithTouch:withEvent:]
  -[MPVolumeSlider minimumValue]
  -[MPVolumeSlider _commitVolumeChange]
  -[MPVolumeSlider volumeAudioCategory]
  -[MPVolumeSlider hitRect]
  -[MPVolumeSlider setUserInteractionEnabled:]
  -[MPVolumeSlider route]
  -[MPVolumeSlider _routeName]
  -[MPVolumeSlider createThumbView]
  -[MPVolumeSlider updateVolume]
  -[MPVolumeSlider didMoveToSuperview]
  -[MPVolumeSlider _newVolumeWarningView]
  -[MPVolumeSlider volumeControlLabel]
  -[MPVolumeSlider _endBlinkingWarningView]
  -[MPVolumeSlider _applicationWillEnterForegroundNotification:]
  -[MPVolumeSlider setOptimisticState:]
  -[MPVolumeSlider setOptimisticValue:]
  -[MPVolumeSlider setGroupRoute:]
  -[MPVolumeSlider _setIsOffScreen:]
  -[MPVolumeSlider _logVolumeValueDidChange:]
  -[MPVolumeSlider setVolumeDataSource:]
  -[MPVolumeSlider setVolumeController:]
  -[MPVolumeSlider .cxx_destruct]
  -[MPVolumeSlider groupRoute]
  -[MPVolumeSlider initWithFrame:style:]
  -[MPVolumeSlider _layoutForAvailableRoutes]
  -[MPVolumeSlider _thumbImageForStyle:]
  -[MPVolumeSlider setValue:animated:]
  -[MPVolumeSlider thumbRectForBounds:trackRect:value:]
  -[MPVolumeSlider layoutSubviews]
  -[MPVolumeSlider isInOptimisticState]
  -[MPVolumeSlider _resetThumbImageForState:]
  -[MPVolumeSlider setThumbImage:forState:]
  -[MPVolumeSlider optimisticValue]
  -[MPVolumeSlider volumeController:volumeControlCapabilitiesDidChange:]
  -[MPVolumeSlider volumeController:EUVolumeLimitDidChange:]
  -[MPVolumeSlider volumeWarningTrackImage]
  -[MPVolumeSlider setPlayer:]
  -[MPVolumeSlider isOnScreenForVolumeDisplay]
  -[MPVolumeSlider thumbView]
  -[MPVolumeSlider hitRectInsets]
  -[MPVolumeSlider setOutputDeviceRoute:]
  -[MPVolumeSlider setVolumeWarningTrackImage:]
  -[MPVolumeSlider outputDeviceRoute]
  -[MPVolumeSlider volumeController]
  -[MPVolumeSlider volumeController:EUVolumeLimitEnforcedDidChange:]
  -[MPVolumeSlider trackRectForBounds:]
  -[MPVolumeSlider player]
  -[MPVolumeSlider _beginBlinkingWarningView]
  -[MPVolumeSlider maximumValue]
  -[MPVolumeSlider volumeController:volumeControlLabelDidChange:]
  -[MPVolumeSlider _applicationDidEnterBackgroundNotification:]
  -[MPVolumeSlider _blinkWarningView]
  -[MPVolumeSlider volumeController:volumeWarningStateDidChange:]
  -[MPVolumeSlider initWithFrame:style:endpointRoute:outputDeviceRoute:]
  -[MPVolumeSlider setAlpha:]
  -[MPVolumeSlider _isOffScreen]
  -[MPVolumeSlider _endTracking]
  -[MPVolumeSlider windowSceneForVolumeDisplay]
  -[MPVolumeSlider trackLayoutGuide]
  -[MPVolumeSlider volumeController:volumeControlAvailableDidChange:]
  -[MPVolumeSlider initWithFrame:]
  -[MPVolumeSlider pointInside:withEvent:]
  -[MPVolumeSlider didMoveToWindow]
  -[MPVolumeSlider _dynamicUserInterfaceTraitDidChange]
  -[MPVolumeSlider setRoute:]
  -[MPVolumeSlider setHitRectInsets:]
  -[MPVolumeSlider cancelTrackingWithEvent:]
  -[MPVolumeSlider dealloc]
  -[MPVolumeSlider endTrackingWithTouch:withEvent:]
  -[MPVolumeSlider beginTrackingWithTouch:withEvent:]
  -[MPVolumeSlider _layoutVolumeWarningView]
  -[MPVolumeSlider style]
  -[MPVolumeSlider _maxTrackImageForStyle:]
  -[MPVolumeSlider volumeController:volumeValueDidChange:]
  -[MPVolumeSlider setHidden:]
  -[MPVolumeSlider _minTrackImageForStyle:]


MPVolumeView : UIView <MPAVLightweightRoutingControllerDelegate, NSCoding>
 @property  long long style
 @property  MPVolumeSlider *volumeSlider
 @property  BOOL volumeSliderShrinksFromBothEnds
 @property  BOOL hidesRouteLabelWhenNoRouteChoice
 @property  BOOL isVisible
 @property  BOOL isShowingRouteButton
 @property  BOOL showsVolumeSlider
 @property  BOOL showsRouteButton
 @property  BOOL wirelessRoutesAvailable
 @property  BOOL wirelessRouteActive
 @property  UIImage *volumeWarningSliderImage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPVolumeView initWithCoder:]
  -[MPVolumeView didMoveToSuperview]
  -[MPVolumeView _applicationWillEnterForegroundNotification:]
  -[MPVolumeView .cxx_destruct]
  -[MPVolumeView initWithFrame:style:]
  -[MPVolumeView layoutSubviews]
  -[MPVolumeView isVisible]
  -[MPVolumeView _applicationDidEnterBackgroundNotification:]
  -[MPVolumeView sizeThatFits:]
  -[MPVolumeView setAlpha:]
  -[MPVolumeView volumeSlider]
  -[MPVolumeView initWithFrame:]
  -[MPVolumeView pointInside:withEvent:]
  -[MPVolumeView didMoveToWindow]
  -[MPVolumeView dealloc]
  -[MPVolumeView _initWithStyle:]
  -[MPVolumeView lightweightRoutingController:didChangePickedRoutes:]
  -[MPVolumeView lightweightRoutingController:didChangeDevicePresenceDetected:]
  -[MPVolumeView _routeButton]
  -[MPVolumeView _createSubviews]
  -[MPVolumeView showsRouteButton]
  -[MPVolumeView _volumeSliderVolumeControlAvailabilityDidChangeNotification:]
  -[MPVolumeView style]
  -[MPVolumeView _setShowsVolumeSlider:]
  -[MPVolumeView _setShowsRouteButton:animated:]
  -[MPVolumeView _setRouteDiscoveryEnabled:]
  -[MPVolumeView isWirelessRouteActive]
  -[MPVolumeView _loadAudioRoutePickerIfNeeded]
  -[MPVolumeView _updateWirelessRouteStatus]
  -[MPVolumeView isShowingRouteButton]
  -[MPVolumeView _getDefaultVolumeSliderFrame:routeButtonFrame:forBounds:]
  -[MPVolumeView _defaultRouteButtonImageAsSelected:]
  -[MPVolumeView _displayAudioRoutePicker]
  -[MPVolumeView _startPrewarmingAudioRoutePicker]
  -[MPVolumeView _stopPrewarmingAudioRoutePicker]
  -[MPVolumeView volumeSliderRectForBounds:]
  -[MPVolumeView routeButtonRectForBounds:]
  -[MPVolumeView areWirelessRoutesAvailable]
  -[MPVolumeView setShowsRouteButton:]
  -[MPVolumeView minimumVolumeSliderImageForState:]
  -[MPVolumeView maximumVolumeSliderImageForState:]
  -[MPVolumeView volumeWarningSliderImage]
  -[MPVolumeView routeButtonImageForState:]
  -[MPVolumeView setMinimumVolumeSliderImage:forState:]
  -[MPVolumeView setMaximumVolumeSliderImage:forState:]
  -[MPVolumeView setVolumeWarningSliderImage:]
  -[MPVolumeView setRouteButtonImage:forState:]
  -[MPVolumeView setShowsVolumeSlider:]
  -[MPVolumeView showsVolumeSlider]
  -[MPVolumeView setVolumeThumbImage:forState:]
  -[MPVolumeView volumeThumbImageForState:]
  -[MPVolumeView hidesRouteLabelWhenNoRouteChoice]
  -[MPVolumeView volumeThumbRectForBounds:volumeSliderRect:value:]
  -[MPVolumeView volumeSliderShrinksFromBothEnds]
  -[MPVolumeView setHidesRouteLabelWhenNoRouteChoice:]
  -[MPVolumeView setVolumeSliderShrinksFromBothEnds:]
  -[MPVolumeView encodeWithCoder:]
  -[MPVolumeView setHidden:]


MPModelLibraryRequest : MPModelRequest <MPModelRequestDetailedKeepLocalStatusRequesting>
 @property  MPMediaQuery *legacyMediaQuery
 @property  BOOL disableImplicitSectioning
 @property  MPMediaLibrary *mediaLibrary
 @property  NSArray *allowedItemIdentifiers
 @property  NSArray *allowedSectionIdentifiers
 @property  NSArray *scopedContainers
 @property  unsigned long filteringOptions
 @property  NSString *filterText
 @property  NSString *sectionFilterText
 @property  {_NSRange=QQ} contentRange
 @property  BOOL wantsDetailedKeepLocalRequestableResponse
 @property  BOOL sortUsingAllowedItemIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPModelLibraryRequest supportsSecureCoding]

  // instance methods
  -[MPModelLibraryRequest setMediaLibrary:]
  -[MPModelLibraryRequest newOperationWithResponseHandler:]
  -[MPModelLibraryRequest initWithCoder:]
  -[MPModelLibraryRequest wantsDetailedKeepLocalRequestableResponse]
  -[MPModelLibraryRequest mediaLibrary]
  -[MPModelLibraryRequest .cxx_destruct]
  -[MPModelLibraryRequest setScopedContainers:]
  -[MPModelLibraryRequest setFilterText:]
  -[MPModelLibraryRequest filterText]
  -[MPModelLibraryRequest scopedContainers]
  -[MPModelLibraryRequest setWantsDetailedKeepLocalRequestableResponse:]
  -[MPModelLibraryRequest performWithResponseHandler:]
  -[MPModelLibraryRequest contentRange]
  -[MPModelLibraryRequest legacyMediaQuery]
  -[MPModelLibraryRequest sectionTranslationContext]
  -[MPModelLibraryRequest allowedItemIdentifiers]
  -[MPModelLibraryRequest itemTranslationContext]
  -[MPModelLibraryRequest filteringOptions]
  -[MPModelLibraryRequest copyWithZone:]
  -[MPModelLibraryRequest allowedSectionIdentifiers]
  -[MPModelLibraryRequest sectionFilterText]
  -[MPModelLibraryRequest setLegacyMediaQuery:]
  -[MPModelLibraryRequest setAllowedItemIdentifiers:]
  -[MPModelLibraryRequest setAllowedSectionIdentifiers:]
  -[MPModelLibraryRequest setSectionFilterText:]
  -[MPModelLibraryRequest setContentRange:]
  -[MPModelLibraryRequest sortUsingAllowedItemIdentifiers]
  -[MPModelLibraryRequest disableImplicitSectioning]
  -[MPModelLibraryRequest setSortUsingAllowedItemIdentifiers:]
  -[MPModelLibraryRequest setDisableImplicitSectioning:]
  -[MPModelLibraryRequest encodeWithCoder:]
  -[MPModelLibraryRequest setFilteringOptions:]


MPModelLibraryResponse : MPModelResponse <MPModelResponseDetailedKeepLocalStatusRequesting>
 @property  NSArray *sectionKeepLocalStatusConfigurations
 @property  MPMediaLibraryConnectionAssertion *libraryAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPModelLibraryResponse initWithRequest:]
  -[MPModelLibraryResponse .cxx_destruct]
  -[MPModelLibraryResponse newOperationForDetailedKeepLocalStatusConfigurationForSectionAtIndex:responseHandler:]
  -[MPModelLibraryResponse setLibraryAssertion:]
  -[MPModelLibraryResponse setSectionKeepLocalStatusConfigurations:]
  -[MPModelLibraryResponse dealloc]
  -[MPModelLibraryResponse libraryAssertion]
  -[MPModelLibraryResponse _mediaLibraryDidChangeNotification:]
  -[MPModelLibraryResponse sectionKeepLocalStatusConfigurations]


MPModelLibraryResponseKeepLocalStatusConfiguration : NSObject
 @property  @? downloadablePlaylistItemEntityQueryBlock
 @property  {shared_ptr<mlcore::EntityQuery>=^{EntityQuery}^{__shared_weak_count}} downloadableItemsQuery

  // instance methods
  -[MPModelLibraryResponseKeepLocalStatusConfiguration .cxx_construct]
  -[MPModelLibraryResponseKeepLocalStatusConfiguration .cxx_destruct]
  -[MPModelLibraryResponseKeepLocalStatusConfiguration setDownloadablePlaylistItemEntityQueryBlock:]
  -[MPModelLibraryResponseKeepLocalStatusConfiguration setDownloadableItemsQuery:]
  -[MPModelLibraryResponseKeepLocalStatusConfiguration downloadableItemsQuery]
  -[MPModelLibraryResponseKeepLocalStatusConfiguration downloadablePlaylistItemEntityQueryBlock]


MPModelForYouRecommendationsRequest : MPStoreModelRequest
 @property  long long filteringPolicy
 @property  long long requestEndpoint
 @property  long long mode
 @property  long long types
 @property  BOOL withSocial
 @property  BOOL withPlainEditorialNotes
 @property  long long displayFilterKinds
 @property  BOOL withRecentlyPlayed
 @property  NSURL *customForYouURL
 @property  BOOL refreshRequest

  // class methods
  +[MPModelForYouRecommendationsRequest supportsSecureCoding]
  +[MPModelForYouRecommendationsRequest allSupportedItemProperties]
  +[MPModelForYouRecommendationsRequest allSupportedSectionProperties]

  // instance methods
  -[MPModelForYouRecommendationsRequest newOperationWithResponseHandler:]
  -[MPModelForYouRecommendationsRequest initWithCoder:]
  -[MPModelForYouRecommendationsRequest types]
  -[MPModelForYouRecommendationsRequest .cxx_destruct]
  -[MPModelForYouRecommendationsRequest setTypes:]
  -[MPModelForYouRecommendationsRequest withSocial]
  -[MPModelForYouRecommendationsRequest customForYouURL]
  -[MPModelForYouRecommendationsRequest withRecentlyPlayed]
  -[MPModelForYouRecommendationsRequest filteringPolicy]
  -[MPModelForYouRecommendationsRequest withPlainEditorialNotes]
  -[MPModelForYouRecommendationsRequest displayFilterKinds]
  -[MPModelForYouRecommendationsRequest init]
  -[MPModelForYouRecommendationsRequest setMode:]
  -[MPModelForYouRecommendationsRequest copyWithZone:]
  -[MPModelForYouRecommendationsRequest mode]
  -[MPModelForYouRecommendationsRequest setFilteringPolicy:]
  -[MPModelForYouRecommendationsRequest setWithSocial:]
  -[MPModelForYouRecommendationsRequest requestEndpoint]
  -[MPModelForYouRecommendationsRequest setRequestEndpoint:]
  -[MPModelForYouRecommendationsRequest setWithPlainEditorialNotes:]
  -[MPModelForYouRecommendationsRequest setDisplayFilterKinds:]
  -[MPModelForYouRecommendationsRequest setWithRecentlyPlayed:]
  -[MPModelForYouRecommendationsRequest setCustomForYouURL:]
  -[MPModelForYouRecommendationsRequest setRefreshRequest:]
  -[MPModelForYouRecommendationsRequest encodeWithCoder:]
  -[MPModelForYouRecommendationsRequest refreshRequest]


MPVolumeViewController : UIViewController
 @property  MPVolumeView *volumeView

  // instance methods
  -[MPVolumeViewController preferredContentSize]
  -[MPVolumeViewController .cxx_destruct]
  -[MPVolumeViewController viewDidLoad]
  -[MPVolumeViewController init]
  -[MPVolumeViewController volumeView]


MPVolumeSettingsController : UIViewController
 @property  UIWindow *hostingWindow
 @property  UIWindow *previousWindow

  // instance methods
  -[MPVolumeSettingsController _flip]
  -[MPVolumeSettingsController .cxx_destruct]
  -[MPVolumeSettingsController viewDidAppear:]
  -[MPVolumeSettingsController setPreviousWindow:]
  -[MPVolumeSettingsController dealloc]
  -[MPVolumeSettingsController previousWindow]
  -[MPVolumeSettingsController hostingWindow]
  -[MPVolumeSettingsController dismissAlertController]
  -[MPVolumeSettingsController _keyWindowDidChange:]
  -[MPVolumeSettingsController initWithAudioCategory:]
  -[MPVolumeSettingsController presentAlertControllerInWindow:]
  -[MPVolumeSettingsController setHostingWindow:]


MPSectionedIdentifierListEntryPositionKey : NSObject <NSSecureCoding>
 @property  NSString *deviceIdentifier
 @property  NSString *generation

  // class methods
  +[MPSectionedIdentifierListEntryPositionKey supportsSecureCoding]
  +[MPSectionedIdentifierListEntryPositionKey positionKeyWithDeviceIdentifier:generation:]

  // instance methods
  -[MPSectionedIdentifierListEntryPositionKey setGeneration:]
  -[MPSectionedIdentifierListEntryPositionKey initWithCoder:]
  -[MPSectionedIdentifierListEntryPositionKey .cxx_destruct]
  -[MPSectionedIdentifierListEntryPositionKey generation]
  -[MPSectionedIdentifierListEntryPositionKey compare:]
  -[MPSectionedIdentifierListEntryPositionKey deviceIdentifier]
  -[MPSectionedIdentifierListEntryPositionKey setDeviceIdentifier:]
  -[MPSectionedIdentifierListEntryPositionKey encodeWithCoder:]


MPSectionedIdentifierListEntry : NSObject <_MPSectionedIdentifierListEncodableNextEntriesProviding, NSSecureCoding, MPSectionedIdentifierListEnumerationResult>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  MPSectionedIdentifierListEntryPositionKey *positionKey
 @property  NSString *sectionIdentifier
 @property  NSString *hostedSectionIdentifier
 @property  NSArray *nextEntries
 @property  MPSectionedIdentifierListEntry *previousEntry
 @property  long long branchDepth
 @property  BOOL dataSourceRemoved
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long entryType

  // class methods
  +[MPSectionedIdentifierListEntry supportsSecureCoding]

  // instance methods
  -[MPSectionedIdentifierListEntry sectionIdentifier]
  -[MPSectionedIdentifierListEntry entryType]
  -[MPSectionedIdentifierListEntry initWithCoder:]
  -[MPSectionedIdentifierListEntry .cxx_destruct]
  -[MPSectionedIdentifierListEntry encodableNextEntriesWithExclusiveAccessToken:]
  -[MPSectionedIdentifierListEntry _stateDumpObject]
  -[MPSectionedIdentifierListEntry itemResult]
  -[MPSectionedIdentifierListEntry setDataSourceRemoved]
  -[MPSectionedIdentifierListEntry nextEntries]
  -[MPSectionedIdentifierListEntry setHostedSectionIdentifier:]
  -[MPSectionedIdentifierListEntry branchDepth]
  -[MPSectionedIdentifierListEntry isDataSourceRemoved]
  -[MPSectionedIdentifierListEntry trackingEntryResult]
  -[MPSectionedIdentifierListEntry previousEntry]
  -[MPSectionedIdentifierListEntry setBranchDepth:]
  -[MPSectionedIdentifierListEntry hostedSectionIdentifier]
  -[MPSectionedIdentifierListEntry addNextEntry:]
  -[MPSectionedIdentifierListEntry initWithPositionKey:sectionIdentifier:]
  -[MPSectionedIdentifierListEntry setPreviousEntry:]
  -[MPSectionedIdentifierListEntry addBranch:forceBranchDepthIncrease:]
  -[MPSectionedIdentifierListEntry prepareForDealloc]
  -[MPSectionedIdentifierListEntry positionKey]
  -[MPSectionedIdentifierListEntry encodeWithCoder:]


MPSectionedIdentifierListTailEntry : MPSectionedIdentifierListEntry <MPSectionedIdentifierListEnumerationTrackingEntry>
 @property  MPSectionedIdentifierListHeadEntry *sectionHeadEntry
 @property  NSString *sectionIdentifier
 @property  long long branchDepth
 @property  long long entryType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPSectionedIdentifierListTailEntry tailEntryWithSectionHeadEntry:]

  // instance methods
  -[MPSectionedIdentifierListTailEntry entryType]
  -[MPSectionedIdentifierListTailEntry .cxx_destruct]
  -[MPSectionedIdentifierListTailEntry sectionHeadEntry]
  -[MPSectionedIdentifierListTailEntry previousEntry]
  -[MPSectionedIdentifierListTailEntry setSectionHeadEntry:]


MPSectionedIdentifierListHeadEntry : MPSectionedIdentifierListEntry <MPSectionedIdentifierListEnumerationTrackingEntry>
 @property  NSMutableDictionary *identifiersItemEntryMap
 @property  MPSectionedIdentifierListTailEntry *tailEntry
 @property  MPSectionedIdentifierListItemEntry *lastItemEntry
 @property  <MPSectionedIdentifierListDataSource> *dataSource
 @property  BOOL shuffledHead
 @property  NSString *sectionIdentifier
 @property  long long branchDepth
 @property  long long entryType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPSectionedIdentifierListHeadEntry headEntryWithSectionIdentifier:]

  // instance methods
  -[MPSectionedIdentifierListHeadEntry entryType]
  -[MPSectionedIdentifierListHeadEntry setDataSource:]
  -[MPSectionedIdentifierListHeadEntry .cxx_destruct]
  -[MPSectionedIdentifierListHeadEntry dataSource]
  -[MPSectionedIdentifierListHeadEntry tailEntry]
  -[MPSectionedIdentifierListHeadEntry lastItemEntry]
  -[MPSectionedIdentifierListHeadEntry setShuffledHead:]
  -[MPSectionedIdentifierListHeadEntry nextEntries]
  -[MPSectionedIdentifierListHeadEntry identifiersItemEntryMap]
  -[MPSectionedIdentifierListHeadEntry setLastItemEntry:]
  -[MPSectionedIdentifierListHeadEntry setBranchDepth:]
  -[MPSectionedIdentifierListHeadEntry initWithPositionKey:sectionIdentifier:]
  -[MPSectionedIdentifierListHeadEntry isShuffledHead]
  -[MPSectionedIdentifierListHeadEntry setTailEntry:]


MPSectionedIdentifierListItemEntry : MPSectionedIdentifierListEntry <MPSectionedIdentifierListEnumerationItem>
 @property  NSString *itemIdentifier
 @property  MPSectionedIdentifierListItemEntry *rootEntry
 @property  MPSectionedIdentifierListItemEntry *latestUserClone
 @property  MPSectionedIdentifierListItemEntry *latestDataSourceClone
 @property  BOOL hasClones
 @property  NSMutableArray *clonedEntries
 @property  BOOL removed
 @property  {?=BBBBBBBBq} state
 @property  BOOL dataSourceCloned
 @property  BOOL dataSourceMoved
 @property  BOOL userRemoved
 @property  BOOL userMoved
 @property  BOOL userCloned
 @property  NSString *sectionIdentifier
 @property  long long branchDepth
 @property  long long entryType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPSectionedIdentifierListItemEntry supportsSecureCoding]
  +[MPSectionedIdentifierListItemEntry itemEntryWithSectionIdentifier:itemIdentifier:]
  +[MPSectionedIdentifierListItemEntry itemEntryWithSectionIdentifier:itemIdentifier:generationPrefix:]

  // instance methods
  -[MPSectionedIdentifierListItemEntry entryType]
  -[MPSectionedIdentifierListItemEntry itemIdentifier]
  -[MPSectionedIdentifierListItemEntry stringRepresentation]
  -[MPSectionedIdentifierListItemEntry initWithCoder:]
  -[MPSectionedIdentifierListItemEntry .cxx_destruct]
  -[MPSectionedIdentifierListItemEntry _stateDumpObject]
  -[MPSectionedIdentifierListItemEntry rootEntry]
  -[MPSectionedIdentifierListItemEntry state]
  -[MPSectionedIdentifierListItemEntry hasClones]
  -[MPSectionedIdentifierListItemEntry latestUserClone]
  -[MPSectionedIdentifierListItemEntry setDataSourceRemoved]
  -[MPSectionedIdentifierListItemEntry newClonedEntry]
  -[MPSectionedIdentifierListItemEntry setUserRemoved]
  -[MPSectionedIdentifierListItemEntry isRemoved]
  -[MPSectionedIdentifierListItemEntry isDataSourceRemoved]
  -[MPSectionedIdentifierListItemEntry prepareForDealloc]
  -[MPSectionedIdentifierListItemEntry isUserMoved]
  -[MPSectionedIdentifierListItemEntry isUserRemoved]
  -[MPSectionedIdentifierListItemEntry setClonedEntries:]
  -[MPSectionedIdentifierListItemEntry setDataSourceCloned]
  -[MPSectionedIdentifierListItemEntry encodeWithCoder:]
  -[MPSectionedIdentifierListItemEntry isDataSourceCloned]
  -[MPSectionedIdentifierListItemEntry setRootEntry:]
  -[MPSectionedIdentifierListItemEntry setUserCloned]
  -[MPSectionedIdentifierListItemEntry _generationNumber]
  -[MPSectionedIdentifierListItemEntry clonedEntries]
  -[MPSectionedIdentifierListItemEntry setUserMoved]
  -[MPSectionedIdentifierListItemEntry isDataSourceMoved]
  -[MPSectionedIdentifierListItemEntry latestDataSourceClone]
  -[MPSectionedIdentifierListItemEntry setDataSourceMoved]
  -[MPSectionedIdentifierListItemEntry isUserCloned]


MPMoviePlayerViewController : UIViewController
 @property  MPMoviePlayerController *moviePlayer

  // instance methods
  -[MPMoviePlayerViewController initWithCoder:]
  -[MPMoviePlayerViewController .cxx_destruct]
  -[MPMoviePlayerViewController initWithNibName:bundle:]
  -[MPMoviePlayerViewController initWithContentURL:]
  -[MPMoviePlayerViewController loadView]
  -[MPMoviePlayerViewController moviePlayer]


MPRemoteCommandEvent : NSObject
 @property  unsigned int mediaRemoteCommandType
 @property  NSDictionary *mediaRemoteOptions
 @property  NSString *contextID
 @property  NSString *commandID
 @property  NSString *interfaceID
 @property  NSString *sourceID
 @property  NSString *contentItemID
 @property  long long playbackQueueOffset
 @property  double timeout
 @property  MPRemoteCommand *command
 @property  double timestamp

  // class methods
  +[MPRemoteCommandEvent eventWithCommand:mediaRemoteType:options:]

  // instance methods
  -[MPRemoteCommandEvent contextID]
  -[MPRemoteCommandEvent .cxx_destruct]
  -[MPRemoteCommandEvent sourceID]
  -[MPRemoteCommandEvent command]
  -[MPRemoteCommandEvent init]
  -[MPRemoteCommandEvent contentItemID]
  -[MPRemoteCommandEvent timeout]
  -[MPRemoteCommandEvent commandID]
  -[MPRemoteCommandEvent timestamp]
  -[MPRemoteCommandEvent mediaRemoteOptions]
  -[MPRemoteCommandEvent interfaceID]
  -[MPRemoteCommandEvent mediaRemoteCommandType]
  -[MPRemoteCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPRemoteCommandEvent playbackQueueOffset]


MPSkipIntervalCommandEvent : MPRemoteCommandEvent
 @property  double interval

  // instance methods
  -[MPSkipIntervalCommandEvent interval]
  -[MPSkipIntervalCommandEvent initWithCommand:mediaRemoteType:options:]


MPSeekCommandEvent : MPRemoteCommandEvent
 @property  unsigned long type

  // instance methods
  -[MPSeekCommandEvent type]
  -[MPSeekCommandEvent mediaRemoteCommandType]
  -[MPSeekCommandEvent initWithCommand:mediaRemoteType:options:]


MPRatingCommandEvent : MPRemoteCommandEvent
 @property  float rating

  // instance methods
  -[MPRatingCommandEvent rating]
  -[MPRatingCommandEvent initWithCommand:mediaRemoteType:options:]


MPChangePlaybackRateCommandEvent : MPRemoteCommandEvent
 @property  float playbackRate

  // instance methods
  -[MPChangePlaybackRateCommandEvent playbackRate]
  -[MPChangePlaybackRateCommandEvent initWithCommand:mediaRemoteType:options:]


MPFeedbackCommandEvent : MPRemoteCommandEvent
 @property  BOOL negative

  // instance methods
  -[MPFeedbackCommandEvent isNegative]
  -[MPFeedbackCommandEvent initWithCommand:mediaRemoteType:options:]


MPSkipTrackCommandEvent : MPRemoteCommandEvent
 @property  BOOL requestingDefermentToPlaybackQueuePosition

  // instance methods
  -[MPSkipTrackCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPSkipTrackCommandEvent isRequestingDefermentToPlaybackQueuePosition]


MPSpecialSeekCommandEvent : MPRemoteCommandEvent
 @property  unsigned long type

  // instance methods
  -[MPSpecialSeekCommandEvent type]
  -[MPSpecialSeekCommandEvent initWithCommand:mediaRemoteType:options:]


MPChangePlaybackPositionCommandEvent : MPRemoteCommandEvent
 @property  double positionTime

  // instance methods
  -[MPChangePlaybackPositionCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPChangePlaybackPositionCommandEvent positionTime]


MPChangeRepeatModeCommandEvent : MPRemoteCommandEvent
 @property  long long repeatType
 @property  BOOL preservesRepeatMode

  // instance methods
  -[MPChangeRepeatModeCommandEvent repeatType]
  -[MPChangeRepeatModeCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPChangeRepeatModeCommandEvent preservesRepeatMode]


MPChangeShuffleModeCommandEvent : MPRemoteCommandEvent
 @property  long long shuffleType
 @property  BOOL preservesShuffleMode

  // instance methods
  -[MPChangeShuffleModeCommandEvent shuffleType]
  -[MPChangeShuffleModeCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPChangeShuffleModeCommandEvent preservesShuffleMode]


MPCreateRadioStationCommandEvent : MPRemoteCommandEvent
 @property  NSURL *stationURL
 @property  BOOL requestingPlaybackInitialization
 @property  NSNumber *privateListeningOverride

  // instance methods
  -[MPCreateRadioStationCommandEvent .cxx_destruct]
  -[MPCreateRadioStationCommandEvent stationURL]
  -[MPCreateRadioStationCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPCreateRadioStationCommandEvent isRequestingPlaybackInitialization]
  -[MPCreateRadioStationCommandEvent privateListeningOverride]


MPSetPlaybackQueueCommandEvent : MPRemoteCommandEvent
 @property  MPRemotePlaybackQueue *playbackQueue
 @property  NSNumber *privateListeningOverride
 @property  NSString *sessionIdentifierOverride

  // instance methods
  -[MPSetPlaybackQueueCommandEvent .cxx_destruct]
  -[MPSetPlaybackQueueCommandEvent playbackQueue]
  -[MPSetPlaybackQueueCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPSetPlaybackQueueCommandEvent privateListeningOverride]
  -[MPSetPlaybackQueueCommandEvent sessionIdentifierOverride]
  -[MPSetPlaybackQueueCommandEvent initWithCommand:playbackQueue:]


MPReorderQueueCommandEvent : MPRemoteCommandEvent
 @property  NSString *insertBeforeContextItemID
 @property  NSString *insertAfterContextItemID
 @property  long long destinationOffset

  // instance methods
  -[MPReorderQueueCommandEvent .cxx_destruct]
  -[MPReorderQueueCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPReorderQueueCommandEvent destinationOffset]
  -[MPReorderQueueCommandEvent insertBeforeContextItemID]
  -[MPReorderQueueCommandEvent insertAfterContextItemID]


MPInsertIntoPlaybackQueueCommandEvent : MPRemoteCommandEvent
 @property  NSArray *supportedInsertionPositions
 @property  long long insertionPosition
 @property  MPRemotePlaybackQueue *playbackQueue
 @property  NSNumber *privateListeningOverride
 @property  NSString *insertAfterContentItemID
 @property  long long destinationOffset

  // instance methods
  -[MPInsertIntoPlaybackQueueCommandEvent .cxx_destruct]
  -[MPInsertIntoPlaybackQueueCommandEvent supportedInsertionPositions]
  -[MPInsertIntoPlaybackQueueCommandEvent playbackQueue]
  -[MPInsertIntoPlaybackQueueCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPInsertIntoPlaybackQueueCommandEvent privateListeningOverride]
  -[MPInsertIntoPlaybackQueueCommandEvent destinationOffset]
  -[MPInsertIntoPlaybackQueueCommandEvent initWithCommand:playbackQueue:options:]
  -[MPInsertIntoPlaybackQueueCommandEvent insertionPosition]
  -[MPInsertIntoPlaybackQueueCommandEvent insertAfterContentItemID]


MPChangeLanguageOptionCommandEvent : MPRemoteCommandEvent
 @property  MPNowPlayingInfoLanguageOption *languageOption
 @property  long long setting

  // instance methods
  -[MPChangeLanguageOptionCommandEvent .cxx_destruct]
  -[MPChangeLanguageOptionCommandEvent setting]
  -[MPChangeLanguageOptionCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPChangeLanguageOptionCommandEvent languageOption]


MPAdvanceShuffleModeCommandEvent : MPRemoteCommandEvent
 @property  BOOL preservesShuffleMode

  // instance methods
  -[MPAdvanceShuffleModeCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPAdvanceShuffleModeCommandEvent preservesShuffleMode]


MPAdvanceRepeatModeCommandEvent : MPRemoteCommandEvent
 @property  BOOL preservesRepeatMode

  // instance methods
  -[MPAdvanceRepeatModeCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPAdvanceRepeatModeCommandEvent preservesRepeatMode]


MPPlaybackSessionCommandEvent : MPRemoteCommandEvent
 @property  NSString *identifier
 @property  NSString *revision
 @property  long long priority

  // instance methods
  -[MPPlaybackSessionCommandEvent .cxx_destruct]
  -[MPPlaybackSessionCommandEvent identifier]
  -[MPPlaybackSessionCommandEvent priority]
  -[MPPlaybackSessionCommandEvent revision]
  -[MPPlaybackSessionCommandEvent initWithCommand:mediaRemoteType:options:]


MPSetPlaybackSessionCommandEvent : MPRemoteCommandEvent
 @property  NSString *identifier
 @property  NSString *type
 @property  NSData *playbackSessionData

  // instance methods
  -[MPSetPlaybackSessionCommandEvent .cxx_destruct]
  -[MPSetPlaybackSessionCommandEvent identifier]
  -[MPSetPlaybackSessionCommandEvent type]
  -[MPSetPlaybackSessionCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPSetPlaybackSessionCommandEvent playbackSessionData]


MPPreloadPlaybackSessionCommandEvent : MPRemoteCommandEvent
 @property  NSString *identifier
 @property  NSString *type
 @property  long long priority
 @property  NSString *revision
 @property  NSURL *playbackSessionDataFilePath
 @property  NSDictionary *metadata

  // instance methods
  -[MPPreloadPlaybackSessionCommandEvent .cxx_destruct]
  -[MPPreloadPlaybackSessionCommandEvent identifier]
  -[MPPreloadPlaybackSessionCommandEvent metadata]
  -[MPPreloadPlaybackSessionCommandEvent priority]
  -[MPPreloadPlaybackSessionCommandEvent revision]
  -[MPPreloadPlaybackSessionCommandEvent type]
  -[MPPreloadPlaybackSessionCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPPreloadPlaybackSessionCommandEvent playbackSessionDataFilePath]


MPChangeQueueEndActionCommandEvent : MPRemoteCommandEvent
 @property  long long queueEndAction
 @property  BOOL preservesQueueEndAction

  // instance methods
  -[MPChangeQueueEndActionCommandEvent initWithCommand:mediaRemoteType:options:]
  -[MPChangeQueueEndActionCommandEvent queueEndAction]
  -[MPChangeQueueEndActionCommandEvent preservesQueueEndAction]


MPPostEventNoticeCommandEvent : MPRemoteCommandEvent
 @property  NSString *eventIdentifier
 @property  NSString *eventType

  // instance methods
  -[MPPostEventNoticeCommandEvent .cxx_destruct]
  -[MPPostEventNoticeCommandEvent eventType]
  -[MPPostEventNoticeCommandEvent eventIdentifier]
  -[MPPostEventNoticeCommandEvent initWithCommand:mediaRemoteType:options:]


MPLeaveSharedPlaybackSessionCommandEvent : MPRemoteCommandEvent
 @property  NSString *sessionIdentifier

  // instance methods
  -[MPLeaveSharedPlaybackSessionCommandEvent .cxx_destruct]
  -[MPLeaveSharedPlaybackSessionCommandEvent sessionIdentifier]
  -[MPLeaveSharedPlaybackSessionCommandEvent initWithCommand:mediaRemoteType:options:]


MPMediaAPICollectionItemMetadataRequestController : NSObject
  // class methods
  +[MPMediaAPICollectionItemMetadataRequestController sharedInstance]

  // instance methods
  -[MPMediaAPICollectionItemMetadataRequestController .cxx_destruct]
  -[MPMediaAPICollectionItemMetadataRequestController _init]
  -[MPMediaAPICollectionItemMetadataRequestController cancelRequest:]
  -[MPMediaAPICollectionItemMetadataRequestController enqueueRequest:withBatchProgressHandler:]


MPArtworkImageAttachments : NSObject <NSCopying, NSSecureCoding>
 @property  UIColor *textColor
 @property  BOOL hasTitle

  // class methods
  +[MPArtworkImageAttachments supportsSecureCoding]

  // instance methods
  -[MPArtworkImageAttachments initWithCoder:]
  -[MPArtworkImageAttachments hasTitle]
  -[MPArtworkImageAttachments .cxx_destruct]
  -[MPArtworkImageAttachments textColor]
  -[MPArtworkImageAttachments copyWithZone:]
  -[MPArtworkImageAttachments encodeWithCoder:]
  -[MPArtworkImageAttachments initWithTextColor:hasTitle:]


MPModelLibraryDefaultSectionedCollectionDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  NSDictionary *indexPathToContainerUniqueIDMap
 @property  {shared_ptr<std::vector<std::shared_ptr<mlcore::Entity>>>=^v^{__shared_weak_count}} itemIdentifierQueryResults
 @property  {shared_ptr<mlcore::EntityQueryResult>=^{EntityQueryResult}^{__shared_weak_count}} itemQueryResults
 @property  MPModelLibraryRequest *request
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPModelLibraryDefaultSectionedCollectionDataSource sectionAtIndex:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource itemQueryResults]
  -[MPModelLibraryDefaultSectionedCollectionDataSource numberOfItemsInSection:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource .cxx_construct]
  -[MPModelLibraryDefaultSectionedCollectionDataSource numberOfSections]
  -[MPModelLibraryDefaultSectionedCollectionDataSource .cxx_destruct]
  -[MPModelLibraryDefaultSectionedCollectionDataSource identifiersForItemAtIndexPath:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _populateIndexMap]
  -[MPModelLibraryDefaultSectionedCollectionDataSource indexPathToContainerUniqueIDMap]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _stateDumpObject]
  -[MPModelLibraryDefaultSectionedCollectionDataSource indexOfSectionForSectionIndexTitleAtIndex:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource request]
  -[MPModelLibraryDefaultSectionedCollectionDataSource sectionIndexTitles]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _adjustedGlobalIndexForIndexPath:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource optionalSectionIndexTitlesRange]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _buildIndexPathToContainerUniqueIDMapFromItemQueryResults:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _allowedEntityIdentifiersContainsAllPersistentIDs]
  -[MPModelLibraryDefaultSectionedCollectionDataSource itemAtIndexPath:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource _usesSections]
  -[MPModelLibraryDefaultSectionedCollectionDataSource identifiersForSectionAtIndex:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource setIndexPathToContainerUniqueIDMap:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource indexPathForItemWithIdentifiersIntersectingSet:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource initWithRequest:itemQueryResults:itemIdentifierQueryResults:]
  -[MPModelLibraryDefaultSectionedCollectionDataSource itemIdentifierQueryResults]
  -[MPModelLibraryDefaultSectionedCollectionDataSource hasSameContentAsDataSource:]


MPModelStoreBrowseRequest : MPStoreModelRequest
 @property  NSURL *loadAdditionalContentURL
 @property  MPModelStoreBrowseResponse *previousRetrievedNestedResponse
 @property  long long domain
 @property  long long additionalContent
 @property  BOOL flattenRadioList
 @property  unsigned long options
 @property  long long filteringPolicy
 @property  long long subscriptionStatus
 @property  MPModelStoreBrowseResponse *previousResponse
 @property  long long requestEndpoint

  // class methods
  +[MPModelStoreBrowseRequest supportsSecureCoding]
  +[MPModelStoreBrowseRequest allSupportedItemProperties]
  +[MPModelStoreBrowseRequest allSupportedSectionProperties]

  // instance methods
  -[MPModelStoreBrowseRequest newOperationWithResponseHandler:]
  -[MPModelStoreBrowseRequest setSubscriptionStatus:]
  -[MPModelStoreBrowseRequest initWithCoder:]
  -[MPModelStoreBrowseRequest subscriptionStatus]
  -[MPModelStoreBrowseRequest setDomain:]
  -[MPModelStoreBrowseRequest options]
  -[MPModelStoreBrowseRequest setOptions:]
  -[MPModelStoreBrowseRequest setPreviousResponse:]
  -[MPModelStoreBrowseRequest .cxx_destruct]
  -[MPModelStoreBrowseRequest domain]
  -[MPModelStoreBrowseRequest filteringPolicy]
  -[MPModelStoreBrowseRequest init]
  -[MPModelStoreBrowseRequest previousResponse]
  -[MPModelStoreBrowseRequest setLoadAdditionalContentURL:]
  -[MPModelStoreBrowseRequest copyWithZone:]
  -[MPModelStoreBrowseRequest additionalContent]
  -[MPModelStoreBrowseRequest setFilteringPolicy:]
  -[MPModelStoreBrowseRequest requestEndpoint]
  -[MPModelStoreBrowseRequest setRequestEndpoint:]
  -[MPModelStoreBrowseRequest encodeWithCoder:]
  -[MPModelStoreBrowseRequest loadAdditionalContentURL]
  -[MPModelStoreBrowseRequest setPreviousRetrievedNestedResponse:]
  -[MPModelStoreBrowseRequest configureWithParentSection:]
  -[MPModelStoreBrowseRequest flattenRadioList]
  -[MPModelStoreBrowseRequest setFlattenRadioList:]
  -[MPModelStoreBrowseRequest previousRetrievedNestedResponse]
  -[MPModelStoreBrowseRequest setAdditionalContent:]


MPMediaControlsLanguageOptions : NSObject
  // instance methods
  -[MPMediaControlsLanguageOptions .cxx_destruct]
  -[MPMediaControlsLanguageOptions presentWithCompletion:]
  -[MPMediaControlsLanguageOptions initWithRouteUID:atCenter:]


MPModelArtistKind : MPModelKind
 @property  MPModelAlbumKind *albumKind

  // class methods
  +[MPModelArtistKind supportsSecureCoding]
  +[MPModelArtistKind identityKind]
  +[MPModelArtistKind kindWithAlbumKind:]

  // instance methods
  -[MPModelArtistKind initWithCoder:]
  -[MPModelArtistKind .cxx_destruct]
  -[MPModelArtistKind humanDescription]
  -[MPModelArtistKind applyToView:withContext:]
  -[MPModelArtistKind representedSearchScopePredicate]
  -[MPModelArtistKind albumKind]
  -[MPModelArtistKind isEqual:]
  -[MPModelArtistKind encodeWithCoder:]


MPModelArtist : MPModelPerson
 @property  BOOL hasBiography
 @property  long long songCount
 @property  long long albumCount
 @property  MPModelGenre *genre
 @property  @? artworkCatalogBlock
 @property  @? editorialArtworkCatalogBlock
 @property  NSDate *libraryAddedDate
 @property  BOOL classicalExperienceAvailable

  // class methods
  +[MPModelArtist __classicalExperienceAvailable_KEY]
  +[MPModelArtist __artworkCatalogBlock_KEY]
  +[MPModelArtist genericObjectType]
  +[MPModelArtist __genre_KEY]
  +[MPModelArtist __libraryAddedDate_KEY]
  +[MPModelArtist __editorialArtworkCatalogBlock_KEY]
  +[MPModelArtist kindWithAlbumKind:]
  +[MPModelArtist __hasBiography_KEY]
  +[MPModelArtist __songCount_KEY]
  +[MPModelArtist __albumCount_KEY]

  // instance methods
  -[MPModelArtist editorialArtworkCatalog]
  -[MPModelArtist artworkCatalog]


MPAVRoutingController : NSObject <NSObject>
 @property  MPAVRoute *legacyCachedRoute
 @property  <MPAVOutputDevicePlaybackDataSource> *playbackDataSource
 @property  NSString *presentedBundleID
 @property  NSString *representedBundleID
 @property  BOOL representsLongFormVideoContent
 @property  BOOL alwaysAllowUpdates
 @property  <MPAVRoutingControllerDelegate> *delegate
 @property  MPAVRoutingDataSource *dataSource
 @property  NSString *name
 @property  long long discoveryMode
 @property  BOOL fetchAvailableRoutesSynchronously
 @property  long long externalScreenType
 @property  NSArray *availableRoutes
 @property  NSString *category
 @property  long long routeTypes
 @property  MPAVRoute *pickedRoute
 @property  NSArray *pickedRoutes
 @property  NSSet *pendingPickedRoutes
 @property  MPAVRoute *pendingPickedRoute
 @property  BOOL hasPendingPickedRoutes
 @property  BOOL volumeControlIsAvailable
 @property  BOOL supportsMultipleSelection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPAVRoutingController _symbolNameForRoute:]
  +[MPAVRoutingController bundleIdRepresentsLongFormVideoContent:]
  +[MPAVRoutingController _symbolNameForRoutes:]
  +[MPAVRoutingController systemRouteWithContextUID:]
  +[MPAVRoutingController getActiveRouteWithCompletion:]
  +[MPAVRoutingController _currentDeviceRoutingSymbolImage]
  +[MPAVRoutingController setActiveRoute:reason:completion:]
  +[MPAVRoutingController _getActiveRouteWithTimeout:type:discoveredRoutes:completion:]
  +[MPAVRoutingController getProactiveRouteWithCompletion:]
  +[MPAVRoutingController _iconImageForIdentifier:]
  +[MPAVRoutingController _symbolImageForRoutes:]
  +[MPAVRoutingController _iconNameForRoute:isSymbol:]
  +[MPAVRoutingController _symbolNameForModelID:]
  +[MPAVRoutingController _iconImageNameForClusterRoute:isSymbol:]
  +[MPAVRoutingController getActiveRouteWithTimeout:completion:]
  +[MPAVRoutingController systemRoute]
  +[MPAVRoutingController _currentDeviceRoutingSymbolName]
  +[MPAVRoutingController _iconNameForRoute:]
  +[MPAVRoutingController _iconImageForRoute:]
  +[MPAVRoutingController _iconNameForRoutes:isSymbol:]
  +[MPAVRoutingController setActiveRoute:completion:]
  +[MPAVRoutingController _iconImageForRoutes:]
  +[MPAVRoutingController _currentDeviceRoutingIconImage]
  +[MPAVRoutingController _symbolImageForRoute:]
  +[MPAVRoutingController _currentDeviceRoutingIconImageName]
  +[MPAVRoutingController getProactiveRouteWithTimeout:completion:]
  +[MPAVRoutingController _sharedWorkerQueue]

  // instance methods
  -[MPAVRoutingController cachedPickedRoutes]
  -[MPAVRoutingController fetchAvailableRoutesWithCompletionHandler:]
  -[MPAVRoutingController routeOtherThanHandsetAvailable]
  -[MPAVRoutingController _unregisterNotifications]
  -[MPAVRoutingController name]
  -[MPAVRoutingController pickHandsetRoute]
  -[MPAVRoutingController presentedBundleID]
  -[MPAVRoutingController _clearLegacyCachedRoute]
  -[MPAVRoutingController _syncUpdateRoutes]
  -[MPAVRoutingController _externalScreenType:]
  -[MPAVRoutingController volumeControlIsAvailable]
  -[MPAVRoutingController _updateCachedRoutes]
  -[MPAVRoutingController addPickedRoute:]
  -[MPAVRoutingController .cxx_destruct]
  -[MPAVRoutingController _onQueueSetExternalScreenType:]
  -[MPAVRoutingController discoveryMode]
  -[MPAVRoutingController handsetRouteIsPicked]
  -[MPAVRoutingController removePickedRoute:]
  -[MPAVRoutingController routeTypes]
  -[MPAVRoutingController routeOtherThanHandsetAndSpeakerAvailable]
  -[MPAVRoutingController playbackDataSource]
  -[MPAVRoutingController initWithDataSource:name:]
  -[MPAVRoutingController _pickedRouteInArray:]
  -[MPAVRoutingController unpickAirPlayScreenRouteWithCompletion:]
  -[MPAVRoutingController setName:]
  -[MPAVRoutingController setDelegate:]
  -[MPAVRoutingController legacyCachedRoute]
  -[MPAVRoutingController initWithName:]
  -[MPAVRoutingController _sendDelegatePickedRoutesChanged]
  -[MPAVRoutingController setCachedRoutes:]
  -[MPAVRoutingController _mediaServerDiedNotification:]
  -[MPAVRoutingController dataSource]
  -[MPAVRoutingController init]
  -[MPAVRoutingController _pickedRoutesInArray:]
  -[MPAVRoutingController airtunesRouteIsPicked]
  -[MPAVRoutingController externalScreenType]
  -[MPAVRoutingController representsLongFormVideoContent]
  -[MPAVRoutingController pendingPickedRoutes]
  -[MPAVRoutingController clearCachedRoutes]
  -[MPAVRoutingController _stateDumpObject]
  -[MPAVRoutingController setAlwaysAllowUpdates:]
  -[MPAVRoutingController pickBestDeviceRoute]
  -[MPAVRoutingController pickSpeakerRoute]
  -[MPAVRoutingController _fullStateDumpObject]
  -[MPAVRoutingController setFetchAvailableRoutesSynchronously:]
  -[MPAVRoutingController _setVolumeControlStateForPickedRoute:]
  -[MPAVRoutingController _promptForHijackIfNeeded:handler:]
  -[MPAVRoutingController _volumeControlStateForPickedRoute]
  -[MPAVRoutingController setPresentedBundleID:]
  -[MPAVRoutingController setLegacyCachedRoute:]
  -[MPAVRoutingController pickRoute:withPassword:completion:]
  -[MPAVRoutingController availableRoutes]
  -[MPAVRoutingController setDiscoveryMode:]
  -[MPAVRoutingController _deviceAvailabilityOverrideState]
  -[MPAVRoutingController _pickableRoutesDidChangeNotification:]
  -[MPAVRoutingController _externalScreenTypeDidChangeNotification:]
  -[MPAVRoutingController setRepresentedBundleID:]
  -[MPAVRoutingController hasPendingPickedRoutes]
  -[MPAVRoutingController setRouteTypes:]
  -[MPAVRoutingController addPickedRoute:completion:]
  -[MPAVRoutingController fetchAvailableRoutesWithCompletionQueue:completionHandler:]
  -[MPAVRoutingController alwaysAllowUpdates]
  -[MPAVRoutingController speakerRouteIsPicked]
  -[MPAVRoutingController supportsMultipleSelection]
  -[MPAVRoutingController getActiveRouteWithTimeout:completion:]
  -[MPAVRoutingController pickRoute:]
  -[MPAVRoutingController delegate]
  -[MPAVRoutingController updateAvailableRoutes]
  -[MPAVRoutingController pickedRoutes]
  -[MPAVRoutingController fetchAvailableRoutesSynchronously]
  -[MPAVRoutingController receiverRouteIsPicked]
  -[MPAVRoutingController updatePickedRoutes]
  -[MPAVRoutingController _activeAudioRouteDidChangeNotification:]
  -[MPAVRoutingController _volumeControlAvailabilityDidChangeNotification:]
  -[MPAVRoutingController setPlaybackDataSource:]
  -[MPAVRoutingController unpickTVRoutes]
  -[MPAVRoutingController dealloc]
  -[MPAVRoutingController category]
  -[MPAVRoutingController videoRouteForRoute:]
  -[MPAVRoutingController _shouldSendDelegateRoutesChanged]
  -[MPAVRoutingController removePickedRoute:completion:]
  -[MPAVRoutingController selectRoute:operation:completion:]
  -[MPAVRoutingController pendingPickedRoute]
  -[MPAVRoutingController setCategory:]
  -[MPAVRoutingController cachedRoutes]
  -[MPAVRoutingController _routeStatusDidChangeNotification:]
  -[MPAVRoutingController _scheduleSendDelegateRoutesChanged]
  -[MPAVRoutingController wirelessDisplayRoutesAvailable]
  -[MPAVRoutingController representedBundleID]
  -[MPAVRoutingController routeIsPendingPick:]
  -[MPAVRoutingController selectRoutes:operation:completion:]
  -[MPAVRoutingController _pickRoute:completion:]
  -[MPAVRoutingController _setExternalScreenType:]
  -[MPAVRoutingController wirelessDisplayRouteIsPicked]
  -[MPAVRoutingController _registerNotifications]
  -[MPAVRoutingController pickedRoute]
  -[MPAVRoutingController pickRoute:withPassword:]
  -[MPAVRoutingController _sendDelegateFailedToPickRouteWithError:]
  -[MPAVRoutingController routeIsLeaderOfEndpoint:]


MPAVRoutingControllerSelection : NSObject
 @property  NSArray *routes
 @property  long long selectionOperation
 @property  @? completion

  // instance methods
  -[MPAVRoutingControllerSelection completion]
  -[MPAVRoutingControllerSelection setCompletion:]
  -[MPAVRoutingControllerSelection routes]
  -[MPAVRoutingControllerSelection initWithRoutes:selectionOperation:]
  -[MPAVRoutingControllerSelection selectionOperation]
  -[MPAVRoutingControllerSelection setSelectionOperation:]
  -[MPAVRoutingControllerSelection .cxx_destruct]
  -[MPAVRoutingControllerSelection setRoutes:]


MPAVRoutingControllerSelectionQueue : NSObject
 @property  MPAVRoutingController *routingController
 @property  BOOL hasPendingPickedRoutes
 @property  NSSet *pendingPickedRoutes
 @property  MPAVRoute *pendingPickedRoute

  // instance methods
  -[MPAVRoutingControllerSelectionQueue initWithRoutingController:]
  -[MPAVRoutingControllerSelectionQueue routingController]
  -[MPAVRoutingControllerSelectionQueue removeAllPendingRoutes]
  -[MPAVRoutingControllerSelectionQueue .cxx_destruct]
  -[MPAVRoutingControllerSelectionQueue _dequeueSelectionWhenPossible]
  -[MPAVRoutingControllerSelectionQueue _processSelection:completion:]
  -[MPAVRoutingControllerSelectionQueue addPendingRoutes:]
  -[MPAVRoutingControllerSelectionQueue enqueueSelectionOperation:forRoutes:completion:]
  -[MPAVRoutingControllerSelectionQueue cancelInProgressSelectionForRoute:]
  -[MPAVRoutingControllerSelectionQueue pendingPickedRoutes]
  -[MPAVRoutingControllerSelectionQueue pickedRouteDidChange]
  -[MPAVRoutingControllerSelectionQueue hasPendingPickedRoutes]
  -[MPAVRoutingControllerSelectionQueue removePendingRoutes:withError:]
  -[MPAVRoutingControllerSelectionQueue _enqueue:]
  -[MPAVRoutingControllerSelectionQueue removePendingRoutes:]
  -[MPAVRoutingControllerSelectionQueue pendingPickedRoute]
  -[MPAVRoutingControllerSelectionQueue routeIsPendingPick:]
  -[MPAVRoutingControllerSelectionQueue _dequeue]
  -[MPAVRoutingControllerSelectionQueue hasPendingRoutes]


MPModelComposerKind : MPModelKind
 @property  MPModelAlbumKind *albumKind

  // class methods
  +[MPModelComposerKind supportsSecureCoding]
  +[MPModelComposerKind identityKind]
  +[MPModelComposerKind kindWithAlbumKind:]

  // instance methods
  -[MPModelComposerKind initWithCoder:]
  -[MPModelComposerKind .cxx_destruct]
  -[MPModelComposerKind humanDescription]
  -[MPModelComposerKind applyToView:withContext:]
  -[MPModelComposerKind representedSearchScopePredicate]
  -[MPModelComposerKind albumKind]
  -[MPModelComposerKind isEqual:]
  -[MPModelComposerKind encodeWithCoder:]


MPModelComposer : MPModelPerson
 @property  NSDate *libraryAddedDate

  // class methods
  +[MPModelComposer genericObjectType]
  +[MPModelComposer __libraryAddedDate_KEY]
  +[MPModelComposer kindWithAlbumKind:]


MPServerObjectDatabaseImportRequest : NSObject
 @property  NSDate *assetURLExpirationDate
 @property  NSDate *playbackAuthorizationTokenHalfLifeDate
 @property  id payload
 @property  ICUserIdentity *userIdentity
 @property  NSDate *expirationDate

  // instance methods
  -[MPServerObjectDatabaseImportRequest setPayload:]
  -[MPServerObjectDatabaseImportRequest userIdentity]
  -[MPServerObjectDatabaseImportRequest assetURLExpirationDate]
  -[MPServerObjectDatabaseImportRequest playbackAuthorizationTokenHalfLifeDate]
  -[MPServerObjectDatabaseImportRequest payload]
  -[MPServerObjectDatabaseImportRequest setUserIdentity:]
  -[MPServerObjectDatabaseImportRequest .cxx_destruct]
  -[MPServerObjectDatabaseImportRequest _initWithPayload:]
  -[MPServerObjectDatabaseImportRequest setExpirationDate:]
  -[MPServerObjectDatabaseImportRequest expirationDate]


MPServerObjectDatabaseImportResult : NSObject
 @property  id annotatedPayload
 @property  NSError *error
 @property  <MPServerObjectDatabasePlaybackAuthorizationTokenTrustProvider> *trustID
 @property  NSArray *playableAssetIdentifiers

  // instance methods
  -[MPServerObjectDatabaseImportResult trustID]
  -[MPServerObjectDatabaseImportResult .cxx_destruct]
  -[MPServerObjectDatabaseImportResult initWithAnnotatedPayload:playableAssetIdentifiers:trustID:error:]
  -[MPServerObjectDatabaseImportResult annotatedPayload]
  -[MPServerObjectDatabaseImportResult copyWithZone:]
  -[MPServerObjectDatabaseImportResult error]
  -[MPServerObjectDatabaseImportResult playableAssetIdentifiers]


MPServerObjectDatabaseMediaAPIImportChildRelation : NSObject
 @property  MPIdentifierSet *identifiers
 @property  MPIdentifierSet *parentIdentifiers
 @property  NSString *childKey
 @property  long long relativeOrder

  // instance methods
  -[MPServerObjectDatabaseMediaAPIImportChildRelation setChildKey:]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation relativeOrder]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation parentIdentifiers]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation setRelativeOrder:]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation initWithItemIdentifiers:parentIdentifiers:childKey:relativeOrder:]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation setParentIdentifiers:]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation .cxx_destruct]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation identifiers]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation childKey]
  -[MPServerObjectDatabaseMediaAPIImportChildRelation setIdentifiers:]


MPServerObjectDatabaseMetadataImportRequest : MPServerObjectDatabaseImportRequest
  // class methods
  +[MPServerObjectDatabaseMetadataImportRequest _relationshipKeyForObject:]

  // instance methods
  -[MPServerObjectDatabaseMetadataImportRequest performWithDatabaseOperations:augmentingPayload:trustID:]


MPServerObjectDatabaseMediaKitImportRequest : MPServerObjectDatabaseMetadataImportRequest
  // class methods
  +[MPServerObjectDatabaseMediaKitImportRequest _unsupportedMediaKitTypes]
  +[MPServerObjectDatabaseMediaKitImportRequest _childKeyForParentType:type:]
  +[MPServerObjectDatabaseMediaKitImportRequest _unsupportedParentChildRelationships]
  +[MPServerObjectDatabaseMediaKitImportRequest _relationshipKeyForObject:]

  // instance methods
  -[MPServerObjectDatabaseMediaKitImportRequest _sinfDataFromSinfType:payload:]
  -[MPServerObjectDatabaseMediaKitImportRequest performWithDatabaseOperations:augmentingPayload:trustID:]
  -[MPServerObjectDatabaseMediaKitImportRequest initWithPayload:]
  -[MPServerObjectDatabaseMediaKitImportRequest _sinfTypeFromPayload:]


MPServerObjectDatabaseStorePlatformImportRequest : MPServerObjectDatabaseMetadataImportRequest
  // class methods
  +[MPServerObjectDatabaseStorePlatformImportRequest _childKeyForParentType:type:]
  +[MPServerObjectDatabaseStorePlatformImportRequest _unsupportedStorePlatformKinds]
  +[MPServerObjectDatabaseStorePlatformImportRequest _unsupportedParentChildRelationships]
  +[MPServerObjectDatabaseStorePlatformImportRequest _relationshipKeyForObject:]

  // instance methods
  -[MPServerObjectDatabaseStorePlatformImportRequest performWithDatabaseOperations:augmentingPayload:trustID:]
  -[MPServerObjectDatabaseStorePlatformImportRequest initWithPayload:]


MPServerObjectDatabaseAssetImportRequest : MPServerObjectDatabaseImportRequest
  // instance methods
  -[MPServerObjectDatabaseAssetImportRequest performWithDatabaseOperations:error:]


MPServerObjectDatabaseSINFImportRequest : MPServerObjectDatabaseAssetImportRequest
  // instance methods
  -[MPServerObjectDatabaseSINFImportRequest performWithDatabaseOperations:error:]
  -[MPServerObjectDatabaseSINFImportRequest initWithPayload:requestPayload:hashedPersonID:]
  -[MPServerObjectDatabaseSINFImportRequest .cxx_destruct]


MPServerObjectDatabaseSubPlaybackDispatchImportRequest : MPServerObjectDatabaseAssetImportRequest
  // instance methods
  -[MPServerObjectDatabaseSubPlaybackDispatchImportRequest performWithDatabaseOperations:error:]
  -[MPServerObjectDatabaseSubPlaybackDispatchImportRequest initWithIdentifiers:playbackResponse:]
  -[MPServerObjectDatabaseSubPlaybackDispatchImportRequest .cxx_destruct]


_MPModelShimRequestMiddlewareOperation : MPAsyncOperation <MPMiddlewareOperation>
 @property  _MPModelShimRequestMiddleware *middleware
 @property  MPModelRequest *modelRequest
 @property  NSError *error
 @property  @? invalidationHandler
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPModelShimRequestMiddlewareOperation invalidationObservers]
  -[_MPModelShimRequestMiddlewareOperation setMiddleware:]
  -[_MPModelShimRequestMiddlewareOperation initWithMiddleware:modelRequest:]
  -[_MPModelShimRequestMiddlewareOperation .cxx_destruct]
  -[_MPModelShimRequestMiddlewareOperation middleware]
  -[_MPModelShimRequestMiddlewareOperation modelRequest]
  -[_MPModelShimRequestMiddlewareOperation execute]
  -[_MPModelShimRequestMiddlewareOperation setModelRequest:]
  -[_MPModelShimRequestMiddlewareOperation setInvalidationHandler:]
  -[_MPModelShimRequestMiddlewareOperation invalidationHandler]


_MPModelShimRequestMiddleware : NSObject <MPMiddleware>
 @property  MPModelResponse *modelResponse
 @property  NSArray *invalidationObservers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPModelShimRequestMiddleware invalidationObservers]
  -[_MPModelShimRequestMiddleware .cxx_destruct]
  -[_MPModelShimRequestMiddleware setModelResponse:]
  -[_MPModelShimRequestMiddleware operationsForRequest:]
  -[_MPModelShimRequestMiddleware modelResponse]
  -[_MPModelShimRequestMiddleware setInvalidationObservers:]


MPModelShimRequest : MPRequest
 @property  MPModelRequest *modelRequest

  // class methods
  +[MPModelShimRequest responseClass]

  // instance methods
  -[MPModelShimRequest middlewareClasses]
  -[MPModelShimRequest .cxx_destruct]
  -[MPModelShimRequest modelRequest]
  -[MPModelShimRequest setModelRequest:]
  -[MPModelShimRequest copyWithZone:]


MPModelShimResponse : MPResponse
 @property  MPModelResponse *modelResponse

  // class methods
  +[MPModelShimResponse builderProtocol]

  // instance methods
  -[MPModelShimResponse .cxx_destruct]
  -[MPModelShimResponse setModelResponse:]
  -[MPModelShimResponse initWithRequest:middleware:]
  -[MPModelShimResponse modelResponse]


MPRTCReportingPrepareInternalSessionOperation : MPAsyncOperation
 @property  NSDictionary *additionalUserInfo
 @property  NSString *clientName
 @property  int clientType
 @property  long long clientVersion
 @property  id hierarchyToken
 @property  NSString *serviceIdentifier
 @property  long long sessionID
 @property  @? responseHandler

  // instance methods
  -[MPRTCReportingPrepareInternalSessionOperation sessionID]
  -[MPRTCReportingPrepareInternalSessionOperation setSessionID:]
  -[MPRTCReportingPrepareInternalSessionOperation setClientType:]
  -[MPRTCReportingPrepareInternalSessionOperation clientVersion]
  -[MPRTCReportingPrepareInternalSessionOperation clientType]
  -[MPRTCReportingPrepareInternalSessionOperation setServiceIdentifier:]
  -[MPRTCReportingPrepareInternalSessionOperation serviceIdentifier]
  -[MPRTCReportingPrepareInternalSessionOperation .cxx_destruct]
  -[MPRTCReportingPrepareInternalSessionOperation responseHandler]
  -[MPRTCReportingPrepareInternalSessionOperation setResponseHandler:]
  -[MPRTCReportingPrepareInternalSessionOperation execute]
  -[MPRTCReportingPrepareInternalSessionOperation hierarchyToken]
  -[MPRTCReportingPrepareInternalSessionOperation setHierarchyToken:]
  -[MPRTCReportingPrepareInternalSessionOperation additionalUserInfo]
  -[MPRTCReportingPrepareInternalSessionOperation setAdditionalUserInfo:]
  -[MPRTCReportingPrepareInternalSessionOperation setClientName:]
  -[MPRTCReportingPrepareInternalSessionOperation setClientVersion:]
  -[MPRTCReportingPrepareInternalSessionOperation clientName]


_MPMediaLibraryMLCoreStorage : NSObject
 @property  {shared_ptr<mlcore::DeviceLibrary>=^{DeviceLibrary}^{__shared_weak_count}} _MediaLibrary_coreLibrary

  // instance methods
  -[_MPMediaLibraryMLCoreStorage .cxx_construct]
  -[_MPMediaLibraryMLCoreStorage .cxx_destruct]
  -[_MPMediaLibraryMLCoreStorage set_MediaLibrary_coreLibrary:]
  -[_MPMediaLibraryMLCoreStorage _MediaLibrary_coreLibrary]


MPModelStoreBrowseSectionUniformContentItemTypeResolver : NSObject
  // instance methods
  -[MPModelStoreBrowseSectionUniformContentItemTypeResolver .cxx_construct]
  -[MPModelStoreBrowseSectionUniformContentItemTypeResolver .cxx_destruct]
  -[MPModelStoreBrowseSectionUniformContentItemTypeResolver uniformContentItemType]
  -[MPModelStoreBrowseSectionUniformContentItemTypeResolver addContentItemType:]


MPHomeManagerObserver : NSObject <HMHomeManagerDelegatePrivate, HMHomeDelegatePrivate>
 @property  <MPHomeManagerObserverDelegate> *delegate
 @property  MPHomeUserMonitor *monitorForCurrentUser
 @property  BOOL soundCheckEnabled
 @property  BOOL hasCurrentUser
 @property  BOOL hasCurrentHome
 @property  BOOL hasCurrentAccessory
 @property  HMUser *currentUser
 @property  HMHome *currentHome
 @property  HMAccessory *currentAccessory
 @property  BOOL setupDidComplete
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPHomeManagerObserver sharedObserver]

  // instance methods
  -[MPHomeManagerObserver homeManager:didRemoveHome:]
  -[MPHomeManagerObserver homeManagerDidUpdateHomes:]
  -[MPHomeManagerObserver homeManager:didUpdateStatus:]
  -[MPHomeManagerObserver _updateSoundCheck]
  -[MPHomeManagerObserver userMonitorWithHomeIdentifiers:]
  -[MPHomeManagerObserver currentHome]
  -[MPHomeManagerObserver _userMonitorWithHomeIdentifiers:]
  -[MPHomeManagerObserver _soundCheckDidChange]
  -[MPHomeManagerObserver _currentHomeDidChange]
  -[MPHomeManagerObserver _currentUserDidChange]
  -[MPHomeManagerObserver _usersDidChange]
  -[MPHomeManagerObserver _updateAsyncOnQueue]
  -[MPHomeManagerObserver homeManagerDidUpdateCurrentHome:]
  -[MPHomeManagerObserver homeManagerDidRemoveCurrentAccessory:]
  -[MPHomeManagerObserver setupDidComplete]
  -[MPHomeManagerObserver hasCurrentHome]
  -[MPHomeManagerObserver hasCurrentUser]
  -[MPHomeManagerObserver homeDidUpdateSoundCheck:]
  -[MPHomeManagerObserver hasCurrentAccessory]
  -[MPHomeManagerObserver isSoundCheckEnabled]
  -[MPHomeManagerObserver monitorForCurrentUser]
  -[MPHomeManagerObserver userMonitorWithHomeIdentifier:]
  -[MPHomeManagerObserver homeAccesssoryWithRouteID:]
  -[MPHomeManagerObserver .cxx_destruct]
  -[MPHomeManagerObserver homeManager:didAddHome:]
  -[MPHomeManagerObserver setDelegate:]
  -[MPHomeManagerObserver init]
  -[MPHomeManagerObserver homeDidUpdateAccessControlForCurrentUser:]
  -[MPHomeManagerObserver _update]
  -[MPHomeManagerObserver currentUser]
  -[MPHomeManagerObserver homeManagerDidUpdatePrimaryHome:]
  -[MPHomeManagerObserver delegate]
  -[MPHomeManagerObserver currentAccessory]
  -[MPHomeManagerObserver setSoundCheckEnabled:]


MPPlaybackContext : NSObject <NSSecureCoding, NSCopying>
 @property  long long actionAfterQueueLoad
 @property  BOOL containsRestorableContent
 @property  BOOL shouldBecomeActive
 @property  long long shuffleType
 @property  long long repeatType
 @property  long long queueEndAction
 @property  BOOL supported
 @property  NSString *playActivityQueueGroupingID
 @property  NSString *playActivityFeatureName
 @property  NSData *playActivityRecommendationData
 @property  MPMusicPlayerQueueDescriptor *queueDescriptor
 @property  NSString *siriAssetInfo
 @property  NSString *siriReferenceIdentifier
 @property  NSDictionary *siriWHAMetricsInfo
 @property  NSString *sessionIdentifier
 @property  BOOL supportsAccountRectification

  // class methods
  +[MPPlaybackContext supportsSecureCoding]
  +[MPPlaybackContext queueFeederClass]
  +[MPPlaybackContext supportsAutoPlay]

  // instance methods
  -[MPPlaybackContext playActivityRecommendationData]
  -[MPPlaybackContext siriAssetInfo]
  -[MPPlaybackContext setSessionIdentifier:]
  -[MPPlaybackContext initWithCoder:]
  -[MPPlaybackContext setRepeatType:]
  -[MPPlaybackContext descriptionComponents]
  -[MPPlaybackContext setQueueEndAction:]
  -[MPPlaybackContext supportsAccountRectification]
  -[MPPlaybackContext setSupportsAccountRectification:]
  -[MPPlaybackContext containsRestorableContent]
  -[MPPlaybackContext clearStartItem]
  -[MPPlaybackContext isCompatibleWithReplacementContext:incompatibleReason:]
  -[MPPlaybackContext .cxx_destruct]
  -[MPPlaybackContext isSupported]
  -[MPPlaybackContext setSiriReferenceIdentifier:]
  -[MPPlaybackContext setQueueDescriptor:]
  -[MPPlaybackContext sessionIdentifier]
  -[MPPlaybackContext init]
  -[MPPlaybackContext siriReferenceIdentifier]
  -[MPPlaybackContext siriWHAMetricsInfo]
  -[MPPlaybackContext setPlayActivityRecommendationData:]
  -[MPPlaybackContext playActivityQueueGroupingID]
  -[MPPlaybackContext setPlayActivityQueueGroupingID:]
  -[MPPlaybackContext setSiriWHAMetricsInfo:]
  -[MPPlaybackContext setSiriAssetInfo:]
  -[MPPlaybackContext playActivityFeatureName]
  -[MPPlaybackContext shouldBecomeActive]
  -[MPPlaybackContext actionAfterQueueLoad]
  -[MPPlaybackContext setActionAfterQueueLoad:]
  -[MPPlaybackContext setShuffleType:]
  -[MPPlaybackContext setPlayActivityFeatureName:]
  -[MPPlaybackContext copyWithZone:]
  -[MPPlaybackContext queueDescriptor]
  -[MPPlaybackContext shuffleType]
  -[MPPlaybackContext repeatType]
  -[MPPlaybackContext encodeWithCoder:]
  -[MPPlaybackContext queueEndAction]


MPContentTasteController : NSObject
 @property  ICUserIdentity *userIdentity

  // class methods
  +[MPContentTasteController controllers]
  +[MPContentTasteController _postNotificationName:controller:]
  +[MPContentTasteController _tasteControllerWithUserIdentity:isSingleton:createIfRequired:]
  +[MPContentTasteController _postNotificationName:controller:userInfo:]
  +[MPContentTasteController globalSerialQueue]
  +[MPContentTasteController sharedController]
  +[MPContentTasteController controllerWithUserIdentity:]

  // instance methods
  -[MPContentTasteController userIdentity]
  -[MPContentTasteController _deviceMediaLibraryDidChangeNotification:]
  -[MPContentTasteController _libraryEntityForModel:]
  -[MPContentTasteController _libraryPathDidChangeForTasteController:]
  -[MPContentTasteController setTasteType:forPlaylistGlobalID:withCompletionHandler:]
  -[MPContentTasteController _removePendingUpdateRecordForStoreAdamID:token:]
  -[MPContentTasteController setTasteType:forStoreAdamID:withContentType:completionHandler:]
  -[MPContentTasteController setTasteType:forMediaEntity:withCompletionHandler:]
  -[MPContentTasteController _removePendingUpdateRecordForPlaylistGlobalID:token:]
  -[MPContentTasteController _addPendingUpdateRecordForPlaylistGlobalID:contentTasteType:]
  -[MPContentTasteController _libraryPlaylistWithGlobalID:]
  -[MPContentTasteController _addPendingUpdateRecordForStoreAdamID:contentTasteType:]
  -[MPContentTasteController _libraryEntityWithStoreID:contentType:]
  -[MPContentTasteController _pendingUpdateRecordForPlaylistGlobalID:]
  -[MPContentTasteController tasteTypeForModel:]
  -[MPContentTasteController tasteTypeForMediaEntity:]
  -[MPContentTasteController _pendingUpdateRecordForStoreAdamID:]
  -[MPContentTasteController _ML3QueryWithEntityClass:predicate:options:]
  -[MPContentTasteController tasteTypeForStoreAdamID:]
  -[MPContentTasteController _addPendingUpdateRecord:withKey:inDictionary:]
  -[MPContentTasteController _pendingUpdateRecordForKey:inDictionary:]
  -[MPContentTasteController tasteTypeForPlaylistGlobalID:]
  -[MPContentTasteController setTasteType:forModel:withCompletionHandler:]
  -[MPContentTasteController .cxx_destruct]
  -[MPContentTasteController _initWithUserIdentity:]
  -[MPContentTasteController init]
  -[MPContentTasteController _mediaLibrary]


MPStoreItemMetadataRequestController : NSObject
 @property  long long cacheSize

  // class methods
  +[MPStoreItemMetadataRequestController optimalBatchSize]
  +[MPStoreItemMetadataRequestController sharedStoreItemMetadataRequestController]

  // instance methods
  -[MPStoreItemMetadataRequestController cacheSize]
  -[MPStoreItemMetadataRequestController setCacheSize:]
  -[MPStoreItemMetadataRequestController addStoreItemMetadata:]
  -[MPStoreItemMetadataRequestController _removeExpiredItemsPeriodically]
  -[MPStoreItemMetadataRequestController beginTransaction]
  -[MPStoreItemMetadataRequestController .cxx_destruct]
  -[MPStoreItemMetadataRequestController endTransaction]
  -[MPStoreItemMetadataRequestController init]
  -[MPStoreItemMetadataRequestController addStoreItemMetadata:forUserIdentity:]
  -[MPStoreItemMetadataRequestController getStoreItemMetadataForRequest:includeBatchResponseError:responseHandler:]
  -[MPStoreItemMetadataRequestController requestStoreItemMetadataForReason:withItemIdentifiers:responseHandler:]
  -[MPStoreItemMetadataRequestController getStoreItemMetadataForRequest:responseHandler:]


MPModelStoreBrowseMusicKitRequestOperation : MPModelStoreGroupingsMusicKitRequestOperation
  // instance methods
  -[MPModelStoreBrowseMusicKitRequestOperation groupingNameBagKey]


MPButton : UIButton
 @property  {UIEdgeInsets=dddd} alignmentRectInsets
 @property  {UIEdgeInsets=dddd} hitRectInsets
 @property  double holdDelayInterval
 @property  BOOL holding
 @property  BOOL hitTestDebugEnabled

  // class methods
  +[MPButton easyTouchDefaultHitRectInsets]
  +[MPButton easyTouchButtonWithType:]

  // instance methods
  -[MPButton hitRect]
  -[MPButton setHitTestDebugEnabled:]
  -[MPButton setAlignmentRectInsets:]
  -[MPButton .cxx_destruct]
  -[MPButton layoutSubviews]
  -[MPButton holdDelayInterval]
  -[MPButton _handleTouchDown]
  -[MPButton hitRectInsets]
  -[MPButton _delayedTriggerHold]
  -[MPButton setHoldDelayInterval:]
  -[MPButton touchesCancelled:withEvent:]
  -[MPButton hitTestDebugEnabled]
  -[MPButton initWithFrame:]
  -[MPButton pointInside:withEvent:]
  -[MPButton _handleTouchCancel]
  -[MPButton setHitRectInsets:]
  -[MPButton cancelTrackingWithEvent:]
  -[MPButton endTrackingWithTouch:withEvent:]
  -[MPButton isHolding]
  -[MPButton beginTrackingWithTouch:withEvent:]
  -[MPButton alignmentRectInsets]
  -[MPButton _handleTouchUp]
  -[MPButton touchesEnded:withEvent:]


MPMediaPlaylist : MPMediaItemCollection
 @property  unsigned long persistentID
 @property  NSString *cloudGlobalID
 @property  NSString *name
 @property  unsigned long playlistAttributes
 @property  NSArray *seedItems
 @property  NSString *descriptionText
 @property  NSString *authorDisplayName

  // class methods
  +[MPMediaPlaylist _isValidPlaylistProperty:]
  +[MPMediaPlaylist supportsSecureCoding]
  +[MPMediaPlaylist _createFilterableDictionary]
  +[MPMediaPlaylist canFilterByProperty:]

  // instance methods
  -[MPMediaPlaylist descriptionText]
  -[MPMediaPlaylist name]
  -[MPMediaPlaylist initWithCoder:]
  -[MPMediaPlaylist isCloudMix]
  -[MPMediaPlaylist cloudGlobalID]
  -[MPMediaPlaylist items]
  -[MPMediaPlaylist valueForProperty:]
  -[MPMediaPlaylist initWithPersistentID:mediaLibrary:]
  -[MPMediaPlaylist initWithPersistentID:]
  -[MPMediaPlaylist seedTracksQuery]
  -[MPMediaPlaylist addMediaItems:completionHandler:]
  -[MPMediaPlaylist existsInLibrary]
  -[MPMediaPlaylist authorDisplayName]
  -[MPMediaPlaylist removeFirstItem]
  -[MPMediaPlaylist multiverseIdentifier]
  -[MPMediaPlaylist representativeArtists]
  -[MPMediaPlaylist setUserSelectedArtworkImage:]
  -[MPMediaPlaylist .cxx_destruct]
  -[MPMediaPlaylist artworkCatalogsWithMaximumCount:]
  -[MPMediaPlaylist tiledArtworkCatalogWithRows:columns:]
  -[MPMediaPlaylist persistentID]
  -[MPMediaPlaylist count]
  -[MPMediaPlaylist mediaTypes]
  -[MPMediaPlaylist isEqual:]
  -[MPMediaPlaylist playlistAttributes]
  -[MPMediaPlaylist representativeItem]
  -[MPMediaPlaylist seedItems]
  -[MPMediaPlaylist artworkCatalog]
  -[MPMediaPlaylist addItemWithProductID:completionHandler:]
  -[MPMediaPlaylist initWithMultiverseIdentifier:library:]
  -[MPMediaPlaylist encodeWithCoder:]


MPMediaPlaylistCreationMetadata : NSObject
 @property  NSString *name
 @property  NSString *authorDisplayName
 @property  NSString *descriptionText

  // instance methods
  -[MPMediaPlaylistCreationMetadata descriptionText]
  -[MPMediaPlaylistCreationMetadata name]
  -[MPMediaPlaylistCreationMetadata authorDisplayName]
  -[MPMediaPlaylistCreationMetadata setAuthorDisplayName:]
  -[MPMediaPlaylistCreationMetadata .cxx_destruct]
  -[MPMediaPlaylistCreationMetadata initWithName:]
  -[MPMediaPlaylistCreationMetadata init]
  -[MPMediaPlaylistCreationMetadata setDescriptionText:]


MPModelTVEpisodeKind : MPModelKind
 @property  unsigned long variants
 @property  unsigned long options

  // class methods
  +[MPModelTVEpisodeKind supportsSecureCoding]
  +[MPModelTVEpisodeKind identityKind]
  +[MPModelTVEpisodeKind kindWithVariants:options:]

  // instance methods
  -[MPModelTVEpisodeKind variants]
  -[MPModelTVEpisodeKind predicateWithBaseProperty:]
  -[MPModelTVEpisodeKind initWithCoder:]
  -[MPModelTVEpisodeKind options]
  -[MPModelTVEpisodeKind humanDescription]
  -[MPModelTVEpisodeKind representedSearchScopePredicate]
  -[MPModelTVEpisodeKind isEqual:]
  -[MPModelTVEpisodeKind encodeWithCoder:]


MPModelTVEpisode : MPModelObject
 @property  NSString *title
 @property  NSString *descriptionText
 @property  double duration
 @property  BOOL musicShow
 @property  long long episodeNumber
 @property  MPModelFileAsset *localFileAsset
 @property  MPModelPlaybackPosition *playbackPosition
 @property  MPModelStoreAsset *storeAsset
 @property  MPModelTVSeason *season
 @property  MPModelTVShow *show
 @property  long long explicitRating
 @property  BOOL hasCloudSyncSource
 @property  NSDate *releaseDate
 @property  long long episodeType
 @property  NSString *episodeTypeDisplayName
 @property  BOOL libraryAdded
 @property  NSDate *libraryAddedDate
 @property  BOOL libraryAddEligible
 @property  long long keepLocalEnableState
 @property  long long keepLocalManagedStatus
 @property  @? artworkCatalogBlock
 @property  NSDate *downloadedDate
 @property  NSDate *lastDevicePlaybackDate

  // class methods
  +[MPModelTVEpisode __show_KEY]
  +[MPModelTVEpisode __artworkCatalogBlock_KEY]
  +[MPModelTVEpisode genericObjectType]
  +[MPModelTVEpisode __descriptionText_KEY]
  +[MPModelTVEpisode __musicShow_KEY]
  +[MPModelTVEpisode __episodeNumber_KEY]
  +[MPModelTVEpisode __explicitRating_KEY]
  +[MPModelTVEpisode __releaseDate_KEY]
  +[MPModelTVEpisode __episodeType_KEY]
  +[MPModelTVEpisode __episodeTypeDisplayName_KEY]
  +[MPModelTVEpisode __season_KEY]
  +[MPModelTVEpisode kindWithVariants:]
  +[MPModelTVEpisode supportsKeepLocalStatusObservation]
  +[MPModelTVEpisode requiredKeepLocalStatusObservationProperties]
  +[MPModelTVEpisode __title_KEY]
  +[MPModelTVEpisode __duration_KEY]
  +[MPModelTVEpisode __localFileAsset_KEY]
  +[MPModelTVEpisode __keepLocalEnableState_KEY]
  +[MPModelTVEpisode __keepLocalManagedStatus_KEY]
  +[MPModelTVEpisode __libraryAdded_KEY]
  +[MPModelTVEpisode __libraryAddedDate_KEY]
  +[MPModelTVEpisode __lastDevicePlaybackDate_KEY]
  +[MPModelTVEpisode __libraryAddEligible_KEY]
  +[MPModelTVEpisode __hasCloudSyncSource_KEY]
  +[MPModelTVEpisode __storeAsset_KEY]
  +[MPModelTVEpisode __playbackPosition_KEY]
  +[MPModelTVEpisode __downloadedDate_KEY]
  +[MPModelTVEpisode kindWithVariants:options:]
  +[MPModelTVEpisode supportsLibraryAddStatusObservation]
  +[MPModelTVEpisode requiredLibraryAddStatusObservationProperties]
  +[MPModelTVEpisode requiredLibraryRemovalProperties]
  +[MPModelTVEpisode supportsLibraryRemoval]
  +[MPModelTVEpisode requiredStoreLibraryPersonalizationProperties]

  // instance methods
  -[MPModelTVEpisode humanDescription]
  -[MPModelTVEpisode mediaItemPropertyValues]
  -[MPModelTVEpisode relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelTVEpisode personalizationScopedPropertiesForProperties:]
  -[MPModelTVEpisode objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelTVEpisode artworkCatalog]
  -[MPModelTVEpisode libraryAddStatusObserverConfiguration]
  -[MPModelTVEpisode libraryRemovalSupportedOptions]
  -[MPModelTVEpisode newKeepLocalStatusObserverConfiguration]


MPModelLibraryGlobalPlaylistImportChangeRequestOperation : MPAsyncOperation
 @property  NSString *globalPlaylistID
 @property  MPMediaLibrary *mediaLibrary
 @property  BOOL shouldLibraryAdd
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation setMediaLibrary:]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation mediaLibrary]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation globalPlaylistID]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation shouldLibraryAdd]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation setGlobalPlaylistID:]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation setShouldLibraryAdd:]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation responseHandler]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryGlobalPlaylistImportChangeRequestOperation execute]


MPPlaybackArchiveConfiguration : NSObject <NSSecureCoding>
 @property  {CGSize=dd} preferredArtworkSize

  // class methods
  +[MPPlaybackArchiveConfiguration supportsSecureCoding]

  // instance methods
  -[MPPlaybackArchiveConfiguration initWithCoder:]
  -[MPPlaybackArchiveConfiguration initWithPreferredArtworkSize:]
  -[MPPlaybackArchiveConfiguration preferredArtworkSize]
  -[MPPlaybackArchiveConfiguration setPreferredArtworkSize:]
  -[MPPlaybackArchiveConfiguration encodeWithCoder:]


MPPlaybackArchive : NSObject <MPMutablePlaybackArchive, NSCopying, NSSecureCoding>
 @property  unsigned long copyOptions
 @property  unsigned long queueControlOptions
 @property  NSMutableDictionary *storage
 @property  long long type
 @property  NSString *playbackSessionIdentifier
 @property  NSString *playbackSessionType
 @property  NSData *playbackSessionData
 @property  NSString *fallbackStoreIdentifier
 @property  MPPlaybackArchiveDisplayProperties *displayProperties
 @property  NSString *bundleIdentifier
 @property  unsigned long supportedOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPPlaybackArchive supportsSecureCoding]

  // instance methods
  -[MPPlaybackArchive setStorage:]
  -[MPPlaybackArchive initWithCoder:]
  -[MPPlaybackArchive bundleIdentifier]
  -[MPPlaybackArchive copyOptions]
  -[MPPlaybackArchive setType:]
  -[MPPlaybackArchive setDisplayProperties:]
  -[MPPlaybackArchive displayProperties]
  -[MPPlaybackArchive queueControlOptions]
  -[MPPlaybackArchive setSessionIdentifier:type:data:]
  -[MPPlaybackArchive setSupportedOptions:]
  -[MPPlaybackArchive setQueueControlOptions:]
  -[MPPlaybackArchive playbackSessionIdentifier]
  -[MPPlaybackArchive playbackSessionType]
  -[MPPlaybackArchive setCopyOptions:]
  -[MPPlaybackArchive setFallbackStoreIdentifier:]
  -[MPPlaybackArchive setBOOLValue:forOption:]
  -[MPPlaybackArchive initWithType:sessionIdentifier:data:dataType:bundleIdentifier:supportedOptions:displayProperties:]
  -[MPPlaybackArchive boolValueForOption:]
  -[MPPlaybackArchive fallbackStoreIdentifier]
  -[MPPlaybackArchive .cxx_destruct]
  -[MPPlaybackArchive storage]
  -[MPPlaybackArchive setBundleIdentifier:]
  -[MPPlaybackArchive initWithBlock:]
  -[MPPlaybackArchive isEqual:]
  -[MPPlaybackArchive supportedOptions]
  -[MPPlaybackArchive copyWithOptions:]
  -[MPPlaybackArchive type]
  -[MPPlaybackArchive copyWithZone:]
  -[MPPlaybackArchive encodeWithCoder:]
  -[MPPlaybackArchive playbackSessionData]


MPMediaQuery : NSObject <MPPProtobufferCoding, NSSecureCoding, NSCopying>
 @property  MPMediaPlaylist *containingPlaylist
 @property  MPMediaItemCollection *collectionByJoiningCollections
 @property  MPMediaLibrary *mediaLibrary
 @property  NSSet *itemPropertiesToFetch
 @property  NSSet *collectionPropertiesToFetch
 @property  NSArray *orderingProperties
 @property  NSDictionary *orderingDirectionMappings
 @property  BOOL sortItems
 @property  BOOL useSections
 @property  unsigned long entityLimit
 @property  BOOL _hasItems
 @property  BOOL _hasCollections
 @property  unsigned long _countOfItems
 @property  unsigned long _countOfCollections
 @property  BOOL _hasStaticEntities
 @property  NSArray *itemPersistentIdentifiers
 @property  NSArray *collectionPersistentIdentifiers
 @property  MPMediaQuerySectionInfo *itemSectionInfo
 @property  MPMediaQuerySectionInfo *collectionSectionInfo
 @property  BOOL excludesEntitiesWithBlankNames
 @property  BOOL includeEntitiesWithBlankNames
 @property  BOOL specifiesPlaylistItems
 @property  BOOL shouldIncludeNonLibraryEntities
 @property  BOOL willGroupEntities
 @property  BOOL ignoreSystemFilterPredicates
 @property  BOOL ignoreRestrictionsPredicates
 @property  MPMediaItemCollection *_representativeCollection
 @property  long long _representativeCollectionGroupingType
 @property  BOOL playlistItemsQuery
 @property  NSSet *filterPredicates
 @property  NSArray *items
 @property  NSArray *collections
 @property  long long groupingType
 @property  NSArray *itemSections
 @property  NSArray *collectionSections
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaQuery initialize]
  +[MPMediaQuery compilationsQuery]
  +[MPMediaQuery moviesQuery]
  +[MPMediaQuery videosQuery]
  +[MPMediaQuery playlistsRecentlyAddedQuery]
  +[MPMediaQuery audioPodcastsQuery]
  +[MPMediaQuery videoITunesUQuery]
  +[MPMediaQuery isFilteringDisabled]
  +[MPMediaQuery composersQuery]
  +[MPMediaQuery supportsSecureCoding]
  +[MPMediaQuery tvShowsQuery]
  +[MPMediaQuery currentDevicePurchasesPlaylist]
  +[MPMediaQuery geniusMixesQuery]
  +[MPMediaQuery podcastsQuery]
  +[MPMediaQuery ITunesUAudioQuery]
  +[MPMediaQuery artistsQuery]
  +[MPMediaQuery initFilteringDisabled]
  +[MPMediaQuery activeGeniusPlaylist]
  +[MPMediaQuery albumArtistsQuery]
  +[MPMediaQuery videoPodcastsQuery]
  +[MPMediaQuery playlistsQuery]
  +[MPMediaQuery audibleAudiobooksQuery]
  +[MPMediaQuery setFilteringDisabled:]
  +[MPMediaQuery songsQuery]
  +[MPMediaQuery albumsQuery]
  +[MPMediaQuery movieRentalsQuery]
  +[MPMediaQuery playbackHistoryPlaylist]
  +[MPMediaQuery ITunesUQuery]
  +[MPMediaQuery audiobooksQuery]
  +[MPMediaQuery musicVideosQuery]
  +[MPMediaQuery genresQuery]
  +[MPMediaQuery homeVideosQuery]

  // instance methods
  -[MPMediaQuery ignoreSystemFilterPredicates]
  -[MPMediaQuery collections]
  -[MPMediaQuery setMediaLibrary:]
  -[MPMediaQuery ignoreRestrictionsPredicates]
  -[MPMediaQuery setIgnoreRestrictionsPredicates:]
  -[MPMediaQuery _getRepresentativeCollectionGrouping:propertyPredicate:]
  -[MPMediaQuery initWithFilterPredicates:library:]
  -[MPMediaQuery _enumerateItemsInOrder:usingBlock:]
  -[MPMediaQuery containingPlaylist]
  -[MPMediaQuery setStaticEntities:entityType:]
  -[MPMediaQuery _enumerateCollectionsInOrder:usingBlock:]
  -[MPMediaQuery includeEntitiesWithBlankNames]
  -[MPMediaQuery MPSD_hasDownloadingEntities]
  -[MPMediaQuery addFilterPredicate:]
  -[MPMediaQuery initWithCoder:]
  -[MPMediaQuery setCriteria:]
  -[MPMediaQuery filterPredicates]
  -[MPMediaQuery MPSD_hasDownloadableEntities]
  -[MPMediaQuery mediaLibrary]
  -[MPMediaQuery collectionSections]
  -[MPMediaQuery items]
  -[MPMediaQuery _setOrderingProperties:]
  -[MPMediaQuery initWithEntities:entityType:]
  -[MPMediaQuery MPSD_mediaQueryForDownloadingEntities]
  -[MPMediaQuery _hasStaticEntities]
  -[MPMediaQuery .cxx_destruct]
  -[MPMediaQuery shouldIncludeNonLibraryEntities]
  -[MPMediaQuery _setOrderingDirectionMappings:]
  -[MPMediaQuery willGroupEntities]
  -[MPMediaQuery MPSD_mediaQueryForDownloadableEntities]
  -[MPMediaQuery itemSections]
  -[MPMediaQuery _enumerateUnorderedCollectionsUsingBlock:]
  -[MPMediaQuery _hasItems]
  -[MPMediaQuery _orderingProperties]
  -[MPMediaQuery collectionByJoiningCollections]
  -[MPMediaQuery criteria]
  -[MPMediaQuery itemPersistentIdentifiers]
  -[MPMediaQuery setCollectionPropertiesToFetch:]
  -[MPMediaQuery _enumerateCollectionPersistentIDsUsingBlock:]
  -[MPMediaQuery setEntityLimit:]
  -[MPMediaQuery setItemPropertiesToFetch:]
  -[MPMediaQuery _enumerateUnorderedItemPersistentIDsUsingBlock:]
  -[MPMediaQuery itemPropertiesToFetch]
  -[MPMediaQuery collectionPropertiesToFetch]
  -[MPMediaQuery init]
  -[MPMediaQuery excludesEntitiesWithBlankNames]
  -[MPMediaQuery isEqual:]
  -[MPMediaQuery _countOfItems]
  -[MPMediaQuery _enumerateCollectionsUsingBlock:]
  -[MPMediaQuery predicateForProperty:]
  -[MPMediaQuery setUseSections:]
  -[MPMediaQuery _isFilteringDisabled]
  -[MPMediaQuery _enumerateCollectionPersistentIDsInOrder:usingBlock:]
  -[MPMediaQuery _countOfCollections]
  -[MPMediaQuery initWithCriteria:library:]
  -[MPMediaQuery _enumerateItemPersistentIDsUsingBlock:]
  -[MPMediaQuery setIncludeEntitiesWithBlankNames:]
  -[MPMediaQuery collectionSectionInfo]
  -[MPMediaQuery specifiesPlaylistItems]
  -[MPMediaQuery setGroupingType:]
  -[MPMediaQuery _enumerateItemsUsingBlock:]
  -[MPMediaQuery _representativeCollectionGroupingType]
  -[MPMediaQuery entityLimit]
  -[MPMediaQuery _enumerateUnorderedCollectionPersistentIDsUsingBlock:]
  -[MPMediaQuery initWithFilterPredicates:]
  -[MPMediaQuery _orderingDirectionMappings]
  -[MPMediaQuery protobufferEncodableObjectFromLibrary:]
  -[MPMediaQuery groupingThreshold]
  -[MPMediaQuery _enumerateUnorderedItemsUsingBlock:]
  -[MPMediaQuery initWithProtobufferDecodableObject:library:]
  -[MPMediaQuery initWithProtobufferDecodableObject:]
  -[MPMediaQuery valueForAggregateFunction:onCollectionsForProperty:]
  -[MPMediaQuery _updatePredicateForProperty:withPropertyPredicate:]
  -[MPMediaQuery _valueForAggregateFunction:onProperty:entityType:]
  -[MPMediaQuery setIgnoreSystemFilterPredicates:]
  -[MPMediaQuery setFilterPredicate:forProperty:]
  -[MPMediaQuery itemSectionInfo]
  -[MPMediaQuery _playlistItemPersistentIDForItemPersistentID:]
  -[MPMediaQuery copyBySanitizingStaticEntities]
  -[MPMediaQuery collectionPersistentIdentifiers]
  -[MPMediaQuery setSortItems:]
  -[MPMediaQuery valueForAggregateFunction:onItemsForProperty:]
  -[MPMediaQuery copyWithZone:]
  -[MPMediaQuery copyByRemovingStaticEntities]
  -[MPMediaQuery setFilterPropertyPredicate:]
  -[MPMediaQuery _enumerateItemPersistentIDsInOrder:usingBlock:]
  -[MPMediaQuery _representativeCollection]
  -[MPMediaQuery setShouldIncludeNonLibraryEntities:]
  -[MPMediaQuery removeFilterPredicate:]
  -[MPMediaQuery protobufferEncodableObject]
  -[MPMediaQuery useSections]
  -[MPMediaQuery sortItems]
  -[MPMediaQuery _hasCollections]
  -[MPMediaQuery groupingType]
  -[MPMediaQuery isPlaylistItemsQuery]
  -[MPMediaQuery encodeWithCoder:]
  -[MPMediaQuery removePredicatesForProperty:]
  -[MPMediaQuery setFilterPredicates:]


MPMediaPredicate : NSObject <MPPProtobufferCoding, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaPredicate supportsSecureCoding]

  // instance methods
  -[MPMediaPredicate initWithCoder:]
  -[MPMediaPredicate evaluateEntity:]
  -[MPMediaPredicate protobufferEncodableObjectFromLibrary:]
  -[MPMediaPredicate initWithProtobufferDecodableObject:library:]
  -[MPMediaPredicate initWithProtobufferDecodableObject:]
  -[MPMediaPredicate protobufferEncodableObject]
  -[MPMediaPredicate encodeWithCoder:]


MPMediaPropertyPredicate : MPMediaPredicate <MPPProtobufferCoding>
 @property  NSString *property
 @property  id value
 @property  long long comparisonType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaPropertyPredicate supportsSecureCoding]
  +[MPMediaPropertyPredicate predicateWithValue:forProperty:comparisonType:]
  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]

  // instance methods
  -[MPMediaPropertyPredicate property]
  -[MPMediaPropertyPredicate descriptionOfValue:forProperty:]
  -[MPMediaPropertyPredicate initWithCoder:]
  -[MPMediaPropertyPredicate .cxx_destruct]
  -[MPMediaPropertyPredicate ML3PredicateForContainer]
  -[MPMediaPropertyPredicate ML3PredicateForTrack]
  -[MPMediaPropertyPredicate setComparisonType:]
  -[MPMediaPropertyPredicate _ML3PredicateForML3EntityProperty:]
  -[MPMediaPropertyPredicate isEqual:]
  -[MPMediaPropertyPredicate setValue:]
  -[MPMediaPropertyPredicate setProperty:]
  -[MPMediaPropertyPredicate value]
  -[MPMediaPropertyPredicate protobufferEncodableObjectFromLibrary:]
  -[MPMediaPropertyPredicate initWithProtobufferDecodableObject:library:]
  -[MPMediaPropertyPredicate encodeWithCoder:]
  -[MPMediaPropertyPredicate comparisonType]


MPMediaConditionalPredicate : MPMediaPredicate <MPPProtobufferCoding>
 @property  MPMediaPredicate *conditionPredicate
 @property  MPMediaPredicate *thenPredicate
 @property  MPMediaPredicate *elsePredicate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaConditionalPredicate supportsSecureCoding]
  +[MPMediaConditionalPredicate predicateWithConditionPredicate:thenPredicate:elsePredicate:]

  // instance methods
  -[MPMediaConditionalPredicate initWithCoder:]
  -[MPMediaConditionalPredicate thenPredicate]
  -[MPMediaConditionalPredicate elsePredicate]
  -[MPMediaConditionalPredicate initWithConditionPredicate:thenPredicate:elsePredicate:]
  -[MPMediaConditionalPredicate .cxx_destruct]
  -[MPMediaConditionalPredicate conditionPredicate]
  -[MPMediaConditionalPredicate ML3PredicateForContainer]
  -[MPMediaConditionalPredicate ML3PredicateForTrack]
  -[MPMediaConditionalPredicate _ML3PredicateForEntityTypeSelector:]
  -[MPMediaConditionalPredicate protobufferEncodableObjectFromLibrary:]
  -[MPMediaConditionalPredicate initWithProtobufferDecodableObject:library:]
  -[MPMediaConditionalPredicate encodeWithCoder:]


MPMediaCompoundPredicate : MPMediaPredicate <MPPProtobufferCoding>
 @property  NSArray *predicates
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaCompoundPredicate supportsSecureCoding]
  +[MPMediaCompoundPredicate predicateMatchingPredicates:]

  // instance methods
  -[MPMediaCompoundPredicate predicates]
  -[MPMediaCompoundPredicate initWithCoder:]
  -[MPMediaCompoundPredicate .cxx_destruct]
  -[MPMediaCompoundPredicate ML3PredicateForContainer]
  -[MPMediaCompoundPredicate ML3PredicateForTrack]
  -[MPMediaCompoundPredicate isEqual:]
  -[MPMediaCompoundPredicate _ML3PredicateForEntityTypeSelector:]
  -[MPMediaCompoundPredicate protobufferEncodableObjectFromLibrary:]
  -[MPMediaCompoundPredicate initWithProtobufferDecodableObject:library:]
  -[MPMediaCompoundPredicate initWithPredicates:]
  -[MPMediaCompoundPredicate encodeWithCoder:]


MPMediaCompoundAllPredicate : MPMediaCompoundPredicate

MPMediaCompoundAnyPredicate : MPMediaCompoundPredicate

MPMediaContainmentPredicate : MPMediaPredicate
 @property  NSString *property
 @property  NSSet *values

  // class methods
  +[MPMediaContainmentPredicate supportsSecureCoding]
  +[MPMediaContainmentPredicate predicateWithProperty:values:]

  // instance methods
  -[MPMediaContainmentPredicate values]
  -[MPMediaContainmentPredicate property]
  -[MPMediaContainmentPredicate initWithCoder:]
  -[MPMediaContainmentPredicate .cxx_destruct]
  -[MPMediaContainmentPredicate ML3PredicateForContainer]
  -[MPMediaContainmentPredicate ML3PredicateForTrack]
  -[MPMediaContainmentPredicate isEqual:]
  -[MPMediaContainmentPredicate _ML3PredicateForEntityClass:]
  -[MPMediaContainmentPredicate encodeWithCoder:]


MPMediaPersistentIDsPredicate : MPMediaPredicate <MPPProtobufferCoding>
 @property  unsigned long count
 @property  r^q persistentIDs
 @property  BOOL shouldContain
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaPersistentIDsPredicate supportsSecureCoding]
  +[MPMediaPersistentIDsPredicate predicateWithPersistentIDs:count:shouldContain:]

  // instance methods
  -[MPMediaPersistentIDsPredicate initWithCoder:]
  -[MPMediaPersistentIDsPredicate ML3PredicateForContainer]
  -[MPMediaPersistentIDsPredicate shouldContain]
  -[MPMediaPersistentIDsPredicate persistentIDs]
  -[MPMediaPersistentIDsPredicate count]
  -[MPMediaPersistentIDsPredicate ML3PredicateForTrack]
  -[MPMediaPersistentIDsPredicate isEqual:]
  -[MPMediaPersistentIDsPredicate _ML3PredicateForEntityClass:]
  -[MPMediaPersistentIDsPredicate protobufferEncodableObjectFromLibrary:]
  -[MPMediaPersistentIDsPredicate initWithProtobufferDecodableObject:library:]
  -[MPMediaPersistentIDsPredicate dealloc]
  -[MPMediaPersistentIDsPredicate encodeWithCoder:]


_MPMediaSearchStringPredicate : MPMediaPredicate <MPPProtobufferCoding>
 @property  NSString *searchString
 @property  NSSet *properties
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPMediaSearchStringPredicate supportsSecureCoding]
  +[_MPMediaSearchStringPredicate predicateWithSearchString:forProperties:]

  // instance methods
  -[_MPMediaSearchStringPredicate setSearchString:]
  -[_MPMediaSearchStringPredicate initWithCoder:]
  -[_MPMediaSearchStringPredicate searchString]
  -[_MPMediaSearchStringPredicate .cxx_destruct]
  -[_MPMediaSearchStringPredicate ML3PredicateForContainer]
  -[_MPMediaSearchStringPredicate properties]
  -[_MPMediaSearchStringPredicate ML3PredicateForTrack]
  -[_MPMediaSearchStringPredicate isEqual:]
  -[_MPMediaSearchStringPredicate setProperties:]
  -[_MPMediaSearchStringPredicate _ML3PredicateForEntityClass:]
  -[_MPMediaSearchStringPredicate protobufferEncodableObjectFromLibrary:]
  -[_MPMediaSearchStringPredicate initWithProtobufferDecodableObject:library:]
  -[_MPMediaSearchStringPredicate encodeWithCoder:]


MPModelLibraryImportChangeRequestOperation : MPAsyncOperation
 @property  MPModelLibraryImportChangeRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryImportChangeRequestOperation setRequest:]
  -[MPModelLibraryImportChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryImportChangeRequestOperation responseHandler]
  -[MPModelLibraryImportChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryImportChangeRequestOperation execute]
  -[MPModelLibraryImportChangeRequestOperation request]


MPStoreModelPlaylistBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelPlaylistBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelPlaylistBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPMusicPlayerController : NSObject <MPArtworkDataSource, MPVolumeControllerDelegate, MPMusicPlayerControllerClient, MPMediaPlayback>
 @property  NSString *clientIdentifier
 @property  NSXPCConnection *connection
 @property  MPMusicPlayerControllerNowPlaying *serverNowPlaying
 @property  MPMusicPlayerControllerNowPlayingTimeSnapshot *serverTimeSnapshot
 @property  MPMusicPlayerQueueDescriptor *serverQueueDescriptor
 @property  MPMusicPlayerControllerNowPlayingTimeSnapshot *lastServerTimeSnapshot
 @property  MPMusicPlayerControllerNowPlaying *lastServerNowPlaying
 @property  NSArray *lastContentItemIDs
 @property  MPMusicPlayerQueueDescriptor *targetQueueDescriptor
 @property  long long notificationsCounter
 @property  MPVolumeController *volumeController
 @property  NSObject<OS_dispatch_queue> *queue
 @property  long long playbackSpeed
 @property  BOOL isNowPlayingItemFromGeniusMix
 @property  unsigned long currentChapterIndex
 @property  long long playbackState
 @property  long long repeatMode
 @property  long long shuffleMode
 @property  float volume
 @property  MPMediaItem *nowPlayingItem
 @property  unsigned long indexOfNowPlayingItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isPreparedToPlay
 @property  double currentPlaybackTime
 @property  float currentPlaybackRate

  // class methods
  +[MPMusicPlayerController applicationQueuePlayer]
  +[MPMusicPlayerController systemMusicPlayer]
  +[MPMusicPlayerController applicationMusicPlayer]
  +[MPMusicPlayerController iPodMusicPlayer]
  +[MPMusicPlayerController alloc]
  +[MPMusicPlayerController setRunLoopForNotifications:]

  // instance methods
  -[MPMusicPlayerController _clearConnection]
  -[MPMusicPlayerController playbackState]
  -[MPMusicPlayerController currentPlaybackTime]
  -[MPMusicPlayerController volume]
  -[MPMusicPlayerController play]
  -[MPMusicPlayerController setShuffleMode:]
  -[MPMusicPlayerController setVolume:]
  -[MPMusicPlayerController shuffleMode]
  -[MPMusicPlayerController _queueDescriptor]
  -[MPMusicPlayerController _nowPlaying]
  -[MPMusicPlayerController .cxx_destruct]
  -[MPMusicPlayerController initWithClientIdentifier:queue:]
  -[MPMusicPlayerController _mediaItemFromNowPlaying:]
  -[MPMusicPlayerController _setNowPlayingItem:itemIdentifier:]
  -[MPMusicPlayerController setQueueWithQuery:firstItem:]
  -[MPMusicPlayerController setQueueWithDescriptor:]
  -[MPMusicPlayerController onServerAsync:errorHandler:timeout:retryEnabled:]
  -[MPMusicPlayerController nowPlayingAtIndex:]
  -[MPMusicPlayerController _onQueue_applyServerStateUpdateRecord:]
  -[MPMusicPlayerController _postPrivateQueueDidChangeNotificationWithContentItemIDs:]
  -[MPMusicPlayerController applyServerStateUpdateRecord:]
  -[MPMusicPlayerController onServerAsync:errorHandler:]
  -[MPMusicPlayerController _establishConnectionIfNeeded]
  -[MPMusicPlayerController nowPlayingItem]
  -[MPMusicPlayerController setServerQueueDescriptor:]
  -[MPMusicPlayerController setServerNowPlaying:]
  -[MPMusicPlayerController setServerTimeSnapshot:]
  -[MPMusicPlayerController serverItemDidEnd]
  -[MPMusicPlayerController serverPlaybackModeDidChangeAffectingQueue:]
  -[MPMusicPlayerController serverQueueDidEnd]
  -[MPMusicPlayerController _setNowPlayingItemWithIdentifier:]
  -[MPMusicPlayerController setQueueWithQuery:]
  -[MPMusicPlayerController setNowPlayingItem:]
  -[MPMusicPlayerController indexOfNowPlayingItem]
  -[MPMusicPlayerController setQueueWithItemCollection:]
  -[MPMusicPlayerController setQueueWithStoreIDs:]
  -[MPMusicPlayerController prependQueueDescriptor:]
  -[MPMusicPlayerController appendQueueDescriptor:]
  -[MPMusicPlayerController prepareToPlayWithCompletionHandler:]
  -[MPMusicPlayerController skipToNextItem]
  -[MPMusicPlayerController skipToBeginning]
  -[MPMusicPlayerController skipToPreviousItem]
  -[MPMusicPlayerController queueAsQuery]
  -[MPMusicPlayerController beginGeneratingPlaybackNotifications]
  -[MPMusicPlayerController endGeneratingPlaybackNotifications]
  -[MPMusicPlayerController setQueueWithRadioStation:]
  -[MPMusicPlayerController queueAsRadioStation]
  -[MPMusicPlayerController nowPlayingItemAtIndex:]
  -[MPMusicPlayerController pauseWithFadeoutDuration:]
  -[MPMusicPlayerController skipToBeginningOrPreviousItem]
  -[MPMusicPlayerController prepareQueueForPlayback]
  -[MPMusicPlayerController userQueueModificationsDisabled]
  -[MPMusicPlayerController setVolumePrivate:]
  -[MPMusicPlayerController playbackSpeed]
  -[MPMusicPlayerController setPlaybackSpeed:]
  -[MPMusicPlayerController isNowPlayingItemFromGeniusMix]
  -[MPMusicPlayerController currentChapterIndex]
  -[MPMusicPlayerController setCurrentChapterIndex:]
  -[MPMusicPlayerController isGeniusAvailable]
  -[MPMusicPlayerController isGeniusAvailableForSeedItems:]
  -[MPMusicPlayerController setQueueWithSeedItems:]
  -[MPMusicPlayerController setQueueWithGeniusMixPlaylist:]
  -[MPMusicPlayerController serverNowPlaying]
  -[MPMusicPlayerController adjustLoadedQueueRangeToReverseCount:forwardCount:]
  -[MPMusicPlayerController serverTimeSnapshot]
  -[MPMusicPlayerController serverQueueDescriptor]
  -[MPMusicPlayerController lastServerTimeSnapshot]
  -[MPMusicPlayerController lastServerNowPlaying]
  -[MPMusicPlayerController lastContentItemIDs]
  -[MPMusicPlayerController targetQueueDescriptor]
  -[MPMusicPlayerController notificationsCounter]
  -[MPMusicPlayerController stop]
  -[MPMusicPlayerController _snapshot]
  -[MPMusicPlayerController numberOfItems]
  -[MPMusicPlayerController endSeeking]
  -[MPMusicPlayerController cancelLoadingRepresentationForArtworkCatalog:]
  -[MPMusicPlayerController prepareToPlay]
  -[MPMusicPlayerController beginSeekingForward]
  -[MPMusicPlayerController volumeController]
  -[MPMusicPlayerController setCurrentPlaybackRate:]
  -[MPMusicPlayerController beginSeekingBackward]
  -[MPMusicPlayerController isPreparedToPlay]
  -[MPMusicPlayerController currentPlaybackRate]
  -[MPMusicPlayerController isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPMusicPlayerController connection]
  -[MPMusicPlayerController pause]
  -[MPMusicPlayerController shuffle]
  -[MPMusicPlayerController clientIdentifier]
  -[MPMusicPlayerController repeatMode]
  -[MPMusicPlayerController visualIdenticalityIdentifierForCatalog:]
  -[MPMusicPlayerController initWithClientIdentifier:]
  -[MPMusicPlayerController onServer:]
  -[MPMusicPlayerController setUserQueueModificationsDisabled:]
  -[MPMusicPlayerController areRepresentationsAvailableForCatalog:]
  -[MPMusicPlayerController queue]
  -[MPMusicPlayerController existingRepresentationForArtworkCatalog:]
  -[MPMusicPlayerController dealloc]
  -[MPMusicPlayerController volumeController:mutedStateDidChange:]
  -[MPMusicPlayerController setRepeatMode:]
  -[MPMusicPlayerController volumeController:volumeValueDidChange:]
  -[MPMusicPlayerController loadRepresentationForArtworkCatalog:completionHandler:]
  -[MPMusicPlayerController setCurrentPlaybackTime:]


_MPMusicPlayerMediaItemProxy : NSProxy
 @property  MPMediaItem *item
 @property  NSString *itemIdentifier

  // instance methods
  -[_MPMusicPlayerMediaItemProxy itemIdentifier]
  -[_MPMusicPlayerMediaItemProxy methodSignatureForSelector:]
  -[_MPMusicPlayerMediaItemProxy .cxx_destruct]
  -[_MPMusicPlayerMediaItemProxy initWithItemIdentifier:item:]
  -[_MPMusicPlayerMediaItemProxy item]
  -[_MPMusicPlayerMediaItemProxy isEqual:]
  -[_MPMusicPlayerMediaItemProxy forwardInvocation:]


MPArtworkCatalog : NSObject
 @property  long long MP_artworkType
 @property  id destination
 @property  @? configurationBlock
 @property  unsigned long representationKinds
 @property  MPArtworkRepresentationCollection *bestAvailableRepresentationCollection
 @property  BOOL loadingRepresentation
 @property  NSString *cacheIdentifier
 @property  id requestingContext
 @property  id token
 @property  <MPArtworkDataSource> *dataSource
 @property  NSCache *cache
 @property  NSCache *videoCache
 @property  <MPArtworkDataSourceVisualIdenticality> *visualIdenticalityIdentifier
 @property  unsigned long renderHint
 @property  unsigned long videoCacheStoragePolicy
 @property  <_MPArtworkCatalogOverlayDelegate> *overlayDelegate
 @property  id overlayToken
 @property  id overlayStorage
 @property  double destinationScale
 @property  {CGSize=dd} fittingSize
 @property  {CGSize=dd} scaledFittingSize
 @property  BOOL hasImageOnDisk
 @property  BOOL allowsVideoConstrainedNetworkAccess
 @property  long long preferredVideoFormat
 @property  MPArtworkImageAttachments *imageAttachments

  // class methods
  +[MPArtworkCatalog _registeredIdentifiableDataSourceAndTokenClasses]
  +[MPArtworkCatalog setCachePurgesWhenEnteringBackground:forCacheIdentifier:requestingContext:representationKind:]
  +[MPArtworkCatalog setCachePurgesWhenEnteringBackground:forCacheIdentifier:requestingContext:]
  +[MPArtworkCatalog setCacheLimit:forCacheIdentifier:requestingContext:]
  +[MPArtworkCatalog _setCachePurgesWhenEnteringBackground:forCacheIdentifier:requestingContext:representationKind:]
  +[MPArtworkCatalog _setCachePurgesWhenEnteringBackground:forCacheIdentifier:requestingContext:]
  +[MPArtworkCatalog _setCacheLimit:forCacheIdentifier:requestingContext:]
  +[MPArtworkCatalog artworkCatalogWithDataSourceShortDescription:dataSourceIdentifier:tokenParameters:]
  +[MPArtworkCatalog setCachePurgesWhenEnteringBackground:forCacheIdentifier:cacheReference:representationKind:]
  +[MPArtworkCatalog setCacheLimit:forCacheIdentifier:requestingContext:representationKind:]
  +[MPArtworkCatalog setCachePurgesWhenEnteringBackground:forCacheIdentifier:cacheReference:]
  +[MPArtworkCatalog _artworkLoadQueue]
  +[MPArtworkCatalog setCacheLimit:forCacheIdentifier:cacheReference:representationKind:]
  +[MPArtworkCatalog staticArtworkCatalogWithImage:]
  +[MPArtworkCatalog placeholderCatalogWithSymbolName:]
  +[MPArtworkCatalog setCacheLimit:forCacheIdentifier:cacheReference:]
  +[MPArtworkCatalog staticArtworkCatalogWithRepresentationCollection:]
  +[MPArtworkCatalog _artworkCacheForIdentifier:requestingContext:representationKind:]
  +[MPArtworkCatalog _setCacheLimit:forCacheIdentifier:requestingContext:representationKind:]

  // instance methods
  -[MPArtworkCatalog requestRadiosityImageWithCompletionHandler:]
  -[MPArtworkCatalog setPreferredVideoFormat:]
  -[MPArtworkCatalog videoCache]
  -[MPArtworkCatalog existingColorAnalysisWithAlgorithm:]
  -[MPArtworkCatalog setCacheIdentifier:forRequestingContext:]
  -[MPArtworkCatalog _loadBestRepresentationIfNeededOfKind:]
  -[MPArtworkCatalog setOverlayToken:]
  -[MPArtworkCatalog _updateWithRepresentation:isBestRepresentation:modelRevisionID:]
  -[MPArtworkCatalog setDestination:]
  -[MPArtworkCatalog bestAvailableRepresentationCollection]
  -[MPArtworkCatalog .cxx_destruct]
  -[MPArtworkCatalog setDestination:forRepresentationKinds:configurationBlock:]
  -[MPArtworkCatalog cache]
  -[MPArtworkCatalog setCacheIdentifier:]
  -[MPArtworkCatalog setOverlayDelegate:]
  -[MPArtworkCatalog requestExportableArtworkPropertiesWithCompletion:]
  -[MPArtworkCatalog setOverlayStorage:]
  -[MPArtworkCatalog destination]
  -[MPArtworkCatalog overlayToken]
  -[MPArtworkCatalog cacheIdentifier]
  -[MPArtworkCatalog dataSource]
  -[MPArtworkCatalog requestingContext]
  -[MPArtworkCatalog renderHint]
  -[MPArtworkCatalog scaledFittingSize]
  -[MPArtworkCatalog isEqual:]
  -[MPArtworkCatalog setRequestingContext:]
  -[MPArtworkCatalog _callConfigurationWithRevisionID:]
  -[MPArtworkCatalog setRepresentationKinds:]
  -[MPArtworkCatalog requestImageWithCompletionHandler:]
  -[MPArtworkCatalog setAllowsVideoConstrainedNetworkAccess:]
  -[MPArtworkCatalog setVideoCacheStoragePolicy:]
  -[MPArtworkCatalog fittingSize]
  -[MPArtworkCatalog overlayDelegate]
  -[MPArtworkCatalog setConfigurationBlock:]
  -[MPArtworkCatalog setDestination:progressiveConfigurationBlock:]
  -[MPArtworkCatalog token]
  -[MPArtworkCatalog initWithToken:dataSource:]
  -[MPArtworkCatalog requestVideoWithCompletionHandler:]
  -[MPArtworkCatalog configurationBlock]
  -[MPArtworkCatalog _updateRepresentations]
  -[MPArtworkCatalog setCacheIdentifier:forCacheReference:]
  -[MPArtworkCatalog requestImageWithCompletion:]
  -[MPArtworkCatalog preferredVideoFormat]
  -[MPArtworkCatalog hasImageOnDisk]
  -[MPArtworkCatalog overlayStorage]
  -[MPArtworkCatalog _requestBestRepresentationOfKind:completionHandler:]
  -[MPArtworkCatalog _updateRepresentationOfKind:]
  -[MPArtworkCatalog setDestination:configurationBlock:]
  -[MPArtworkCatalog visualIdenticalityIdentifier]
  -[MPArtworkCatalog setPreferredVideoKind:]
  -[MPArtworkCatalog MP_artworkType]
  -[MPArtworkCatalog setFittingSize:]
  -[MPArtworkCatalog dealloc]
  -[MPArtworkCatalog setBestAvailableRepresentationCollection:]
  -[MPArtworkCatalog isArtworkVisuallyIdenticalToCatalog:]
  -[MPArtworkCatalog videoCacheStoragePolicy]
  -[MPArtworkCatalog setLoadingRepresentation:]
  -[MPArtworkCatalog isLoadingRepresentation]
  -[MPArtworkCatalog representationKinds]
  -[MPArtworkCatalog setRenderHint:]
  -[MPArtworkCatalog bestImageFromDisk]
  -[MPArtworkCatalog destinationScale]
  -[MPArtworkCatalog _setCacheIdentifier:forRequestingContext:]
  -[MPArtworkCatalog setDestinationScale:]
  -[MPArtworkCatalog requestColorAnalysisWithAlgorithm:completionHandler:]
  -[MPArtworkCatalog _loadRepresentationOfKind:completionHandler:]
  -[MPArtworkCatalog allowsVideoConstrainedNetworkAccess]
  -[MPArtworkCatalog imageAttachments]
  -[MPArtworkCatalog _existingRepresentationOfKind:]


MPArtworkRepresentation : NSObject
 @property  long long kind
 @property  UIImage *image
 @property  BOOL imagePrepared
 @property  AVAsset *video
 @property  {CGSize=dd} representationSize
 @property  id representationToken
 @property  NSString *visualIdenticalityStringRepresentation

  // class methods
  +[MPArtworkRepresentation representationForVisualIdentity:withSize:image:]
  +[MPArtworkRepresentation representationWithSize:video:]
  +[MPArtworkRepresentation representationWithSize:image:]
  +[MPArtworkRepresentation representationForVisualIdentity:withSize:video:]

  // instance methods
  -[MPArtworkRepresentation video]
  -[MPArtworkRepresentation setVideo:]
  -[MPArtworkRepresentation image]
  -[MPArtworkRepresentation visualIdenticalityStringRepresentation]
  -[MPArtworkRepresentation setRepresentationSize:]
  -[MPArtworkRepresentation setImagePrepared:]
  -[MPArtworkRepresentation representationWithPreparedImage:]
  -[MPArtworkRepresentation .cxx_destruct]
  -[MPArtworkRepresentation setKind:]
  -[MPArtworkRepresentation representationToken]
  -[MPArtworkRepresentation isImagePrepared]
  -[MPArtworkRepresentation debugQuickLookObject]
  -[MPArtworkRepresentation setRepresentationToken:]
  -[MPArtworkRepresentation kind]
  -[MPArtworkRepresentation setImage:]
  -[MPArtworkRepresentation representationSize]


MPArtworkRepresentationCollection : NSObject
 @property  MPArtworkRepresentation *imageRepresentation
 @property  MPArtworkRepresentation *videoRepresentation
 @property  unsigned long bestRepresentationKinds

  // class methods
  +[MPArtworkRepresentationCollection collectionWithImageRepresentation:videoRepresentation:bestRepresentationKinds:]
  +[MPArtworkRepresentationCollection collectionWithImageRepresentation:videoRepresentation:]

  // instance methods
  -[MPArtworkRepresentationCollection setVideoRepresentation:]
  -[MPArtworkRepresentationCollection imageRepresentation]
  -[MPArtworkRepresentationCollection .cxx_destruct]
  -[MPArtworkRepresentationCollection bestRepresentationKinds]
  -[MPArtworkRepresentationCollection videoRepresentation]
  -[MPArtworkRepresentationCollection setImageRepresentation:]
  -[MPArtworkRepresentationCollection isBestRepresentationForKind:]
  -[MPArtworkRepresentationCollection resetForRepresentationKinds:]
  -[MPArtworkRepresentationCollection setBestRepresentationKinds:]


_MPStaticArtworkVisualIdenticalityIdentifier : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  NSString *imageArtworkIdentifier
 @property  NSString *videoArtworkIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPStaticArtworkVisualIdenticalityIdentifier stringRepresentation]
  -[_MPStaticArtworkVisualIdenticalityIdentifier .cxx_destruct]
  -[_MPStaticArtworkVisualIdenticalityIdentifier setImageArtworkIdentifier:]
  -[_MPStaticArtworkVisualIdenticalityIdentifier setVideoArtworkIdentifier:]
  -[_MPStaticArtworkVisualIdenticalityIdentifier imageArtworkIdentifier]
  -[_MPStaticArtworkVisualIdenticalityIdentifier videoArtworkIdentifier]
  -[_MPStaticArtworkVisualIdenticalityIdentifier isEqual:]
  -[_MPStaticArtworkVisualIdenticalityIdentifier copyWithZone:]


_MPArtworkCatalogPlaceholderDataSource : NSObject <MPArtworkDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPArtworkCatalogPlaceholderDataSource sharedDataSource]

  // instance methods
  -[_MPArtworkCatalogPlaceholderDataSource .cxx_destruct]
  -[_MPArtworkCatalogPlaceholderDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogPlaceholderDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogPlaceholderDataSource visualIdenticalityIdentifierForCatalog:]
  -[_MPArtworkCatalogPlaceholderDataSource areRepresentationsAvailableForCatalog:]
  -[_MPArtworkCatalogPlaceholderDataSource existingRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogPlaceholderDataSource loadRepresentationForArtworkCatalog:completionHandler:]


_MPArtworkCatalogStaticDataSource : NSObject <MPArtworkDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPArtworkCatalogStaticDataSource sharedDataSource]

  // instance methods
  -[_MPArtworkCatalogStaticDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogStaticDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogStaticDataSource areRepresentationsOfKind:availableForCatalog:]
  -[_MPArtworkCatalogStaticDataSource existingRepresentationOfKind:forArtworkCatalog:]
  -[_MPArtworkCatalogStaticDataSource loadRepresentationOfKind:forArtworkCatalog:completionHandler:]
  -[_MPArtworkCatalogStaticDataSource visualIdenticalityIdentifierForCatalog:]
  -[_MPArtworkCatalogStaticDataSource areRepresentationsAvailableForCatalog:]
  -[_MPArtworkCatalogStaticDataSource existingRepresentationForArtworkCatalog:]
  -[_MPArtworkCatalogStaticDataSource loadRepresentationForArtworkCatalog:completionHandler:]


MPPConditionalPredicate : PBCodable <NSCopying>
 @property  BOOL hasConditionalPredicate
 @property  MPPMediaPredicate *conditionalPredicate
 @property  BOOL hasThenPredicate
 @property  MPPMediaPredicate *thenPredicate
 @property  BOOL hasElsePredicate
 @property  MPPMediaPredicate *elsePredicate

  // instance methods
  -[MPPConditionalPredicate thenPredicate]
  -[MPPConditionalPredicate elsePredicate]
  -[MPPConditionalPredicate conditionalPredicate]
  -[MPPConditionalPredicate hasConditionalPredicate]
  -[MPPConditionalPredicate .cxx_destruct]
  -[MPPConditionalPredicate hasThenPredicate]
  -[MPPConditionalPredicate hasElsePredicate]
  -[MPPConditionalPredicate setConditionalPredicate:]
  -[MPPConditionalPredicate setThenPredicate:]
  -[MPPConditionalPredicate setElsePredicate:]
  -[MPPConditionalPredicate dictionaryRepresentation]
  -[MPPConditionalPredicate writeTo:]
  -[MPPConditionalPredicate isEqual:]
  -[MPPConditionalPredicate copyTo:]
  -[MPPConditionalPredicate readFrom:]
  -[MPPConditionalPredicate dealloc]
  -[MPPConditionalPredicate copyWithZone:]


MPAsyncOperation : NSOperation <MPUserIdentityConsuming>
 @property  NSError *error
 @property  ICUserIdentity *userIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAsyncOperation isAsynchronous]
  -[MPAsyncOperation isConcurrent]
  -[MPAsyncOperation userIdentity]
  -[MPAsyncOperation isFinished]
  -[MPAsyncOperation setUserIdentity:]
  -[MPAsyncOperation .cxx_destruct]
  -[MPAsyncOperation isExecuting]
  -[MPAsyncOperation init]
  -[MPAsyncOperation execute]
  -[MPAsyncOperation finish]
  -[MPAsyncOperation start]
  -[MPAsyncOperation finishWithError:]
  -[MPAsyncOperation error]


MPMediaItem : MPMediaEntity
 @property  NSArray *chapters
 @property  NSDate *lastPlayedDate
 @property  BOOL isRental
 @property  BOOL isITunesU
 @property  double startTime
 @property  double stopTime
 @property  unsigned long year
 @property  unsigned long skipCountSinceSync
 @property  unsigned long playCountSinceSync
 @property  NSDate *lastSkippedDate
 @property  NSDate *dateAccessed
 @property  BOOL hasBeenPlayed
 @property  BOOL rememberBookmarkTime
 @property  NSDate *dateDownloaded
 @property  double effectiveStopTime
 @property  NSString *effectiveAlbumArtist
 @property  BOOL isUsableAsRepresentativeItem
 @property  unsigned long persistentID
 @property  unsigned long mediaType
 @property  NSString *title
 @property  NSString *albumTitle
 @property  unsigned long albumPersistentID
 @property  NSString *artist
 @property  unsigned long artistPersistentID
 @property  NSString *albumArtist
 @property  unsigned long albumArtistPersistentID
 @property  NSString *genre
 @property  unsigned long genrePersistentID
 @property  NSString *composer
 @property  unsigned long composerPersistentID
 @property  double playbackDuration
 @property  unsigned long albumTrackNumber
 @property  unsigned long albumTrackCount
 @property  unsigned long discNumber
 @property  unsigned long discCount
 @property  MPMediaItemArtwork *artwork
 @property  BOOL explicitItem
 @property  NSString *lyrics
 @property  BOOL compilation
 @property  NSDate *releaseDate
 @property  unsigned long beatsPerMinute
 @property  NSString *comments
 @property  NSURL *assetURL
 @property  BOOL cloudItem
 @property  BOOL protectedAsset
 @property  NSString *podcastTitle
 @property  unsigned long podcastPersistentID
 @property  unsigned long playCount
 @property  unsigned long skipCount
 @property  unsigned long rating
 @property  NSString *userGrouping
 @property  double bookmarkTime
 @property  NSDate *dateAdded
 @property  NSString *playbackStoreID
 @property  BOOL preorder

  // class methods
  +[MPMediaItem fallbackTitlePropertyForGroupingType:]
  +[MPMediaItem _isValidItemProperty:]
  +[MPMediaItem supportsSecureCoding]
  +[MPMediaItem _createFilterableDictionary]
  +[MPMediaItem dynamicProperties]
  +[MPMediaItem persistentIDPropertyForGroupingType:]
  +[MPMediaItem screenshotArtworkCatalogCacheProperties]
  +[MPMediaItem canFilterByProperty:]
  +[MPMediaItem itemFromSong:]
  +[MPMediaItem itemFromModelObject:]
  +[MPMediaItem titlePropertyForGroupingType:]
  +[MPMediaItem artworkCatalogCacheProperties]
  +[MPMediaItem MPSD_mediaItemPropertiesForDownloadability]
  +[MPMediaItem ULIDPropertyForGroupingType:]

  // instance methods
  -[MPMediaItem artwork]
  -[MPMediaItem releaseDate]
  -[MPMediaItem playCount]
  -[MPMediaItem lyrics]
  -[MPMediaItem year]
  -[MPMediaItem discNumber]
  -[MPMediaItem isExplicitItem]
  -[MPMediaItem isPreorder]
  -[MPMediaItem setPlayCount:]
  -[MPMediaItem isRental]
  -[MPMediaItem artist]
  -[MPMediaItem initWithCoder:]
  -[MPMediaItem genre]
  -[MPMediaItem discCount]
  -[MPMediaItem albumTitle]
  -[MPMediaItem stopTime]
  -[MPMediaItem valueForProperty:]
  -[MPMediaItem initWithPersistentID:]
  -[MPMediaItem existsInLibrary]
  -[MPMediaItem multiverseIdentifier]
  -[MPMediaItem valuesForProperties:]
  -[MPMediaItem isITunesU]
  -[MPMediaItem podcastTitle]
  -[MPMediaItem composer]
  -[MPMediaItem _directStoreURL]
  -[MPMediaItem _libraryLinkURL]
  -[MPMediaItem populateLocationPropertiesWithPath:assetProtectionType:]
  -[MPMediaItem chaptersOfType:]
  -[MPMediaItem _libraryLinkKind]
  -[MPMediaItem _libraryLinkArtist]
  -[MPMediaItem _libraryLinkPlaylistName]
  -[MPMediaItem didSkipWithPlayedToTime:]
  -[MPMediaItem markNominalAmountHasBeenPlayed]
  -[MPMediaItem incrementSkipCount]
  -[MPMediaItem noteWasPlayedToTime:skipped:]
  -[MPMediaItem incrementPlayCountForPlayingToEnd]
  -[MPMediaItem incrementPlayCountForStopTime:]
  -[MPMediaItem updateDateAccessedToCurrentDateWithWriteCompletionBlock:]
  -[MPMediaItem nominalHasBeenPlayedThreshold]
  -[MPMediaItem _bestStoreURL]
  -[MPMediaItem populateLocationPropertiesWithPath:]
  -[MPMediaItem effectiveAlbumArtist]
  -[MPMediaItem hasProtectedAsset]
  -[MPMediaItem effectiveStopTime]
  -[MPMediaItem populateLocationPropertiesWithPath:assetProtectionType:completionBlock:]
  -[MPMediaItem clearLocationProperties]
  -[MPMediaItem podcastPersistentID]
  -[MPMediaItem playCountSinceSync]
  -[MPMediaItem setPlayCountSinceSync:]
  -[MPMediaItem lastPlayedDate]
  -[MPMediaItem setLastPlayedDate:]
  -[MPMediaItem dateAccessed]
  -[MPMediaItem setDateAccessed:]
  -[MPMediaItem setSkipCount:]
  -[MPMediaItem skipCountSinceSync]
  -[MPMediaItem setSkipCountSinceSync:]
  -[MPMediaItem lastSkippedDate]
  -[MPMediaItem setLastSkippedDate:]
  -[MPMediaItem hasBeenPlayed]
  -[MPMediaItem setHasBeenPlayed:]
  -[MPMediaItem playbackStoreID]
  -[MPMediaItem userGrouping]
  -[MPMediaItem chapterOfType:atIndex:]
  -[MPMediaItem countOfChaptersOfType:]
  -[MPMediaItem isUsableAsRepresentativeItem]
  -[MPMediaItem gaplessHeuristicInfo:durationInSamples:lastPacketsResync:encodingDelay:encodingDrain:]
  -[MPMediaItem dateDownloaded]
  -[MPMediaItem isCloudItem]
  -[MPMediaItem rating]
  -[MPMediaItem comments]
  -[MPMediaItem isEqual:]
  -[MPMediaItem bookmarkTime]
  -[MPMediaItem predicateForProperty:]
  -[MPMediaItem rememberBookmarkTime]
  -[MPMediaItem albumArtist]
  -[MPMediaItem albumTrackCount]
  -[MPMediaItem albumTrackNumber]
  -[MPMediaItem setRating:]
  -[MPMediaItem albumPersistentID]
  -[MPMediaItem albumArtistPersistentID]
  -[MPMediaItem artistPersistentID]
  -[MPMediaItem genrePersistentID]
  -[MPMediaItem composerPersistentID]
  -[MPMediaItem chapters]
  -[MPMediaItem skipCount]
  -[MPMediaItem playbackDuration]
  -[MPMediaItem isCompilation]
  -[MPMediaItem startTime]
  -[MPMediaItem MPSD_isDownloadable]
  -[MPMediaItem MPSD_isDownloadInProgress]
  -[MPMediaItem title]
  -[MPMediaItem representativeItem]
  -[MPMediaItem chapterOfType:atTime:]
  -[MPMediaItem mediaType]
  -[MPMediaItem beatsPerMinute]
  -[MPMediaItem artworkCatalog]
  -[MPMediaItem initWithMultiverseIdentifier:library:]
  -[MPMediaItem dateAdded]
  -[MPMediaItem _artworkCatalogWithArtworkType:]
  -[MPMediaItem screenshotArtworkCatalog]
  -[MPMediaItem incrementPlayCount]
  -[MPMediaItem encodeWithCoder:]
  -[MPMediaItem didReceiveMemoryWarning]
  -[MPMediaItem assetURL]


MPNondurableMediaItem : MPMediaItem
  // class methods
  +[MPNondurableMediaItem supportsSecureCoding]
  +[MPNondurableMediaItem canFilterByProperty:]
  +[MPNondurableMediaItem defaultPropertyValues]

  // instance methods
  -[MPNondurableMediaItem setValue:forKey:]
  -[MPNondurableMediaItem initWithCoder:]
  -[MPNondurableMediaItem mediaLibrary]
  -[MPNondurableMediaItem valueForProperty:]
  -[MPNondurableMediaItem initWithPersistentID:]
  -[MPNondurableMediaItem existsInLibrary]
  -[MPNondurableMediaItem valuesForProperties:]
  -[MPNondurableMediaItem persistentID]
  -[MPNondurableMediaItem enumerateValuesForProperties:usingBlock:]
  -[MPNondurableMediaItem didSkipWithPlayedToTime:]
  -[MPNondurableMediaItem markNominalAmountHasBeenPlayed]
  -[MPNondurableMediaItem incrementSkipCount]
  -[MPNondurableMediaItem noteWasPlayedToTime:skipped:]
  -[MPNondurableMediaItem incrementPlayCountForPlayingToEnd]
  -[MPNondurableMediaItem incrementPlayCountForStopTime:]
  -[MPNondurableMediaItem updateDateAccessedToCurrentDateWithWriteCompletionBlock:]
  -[MPNondurableMediaItem nominalHasBeenPlayedThreshold]
  -[MPNondurableMediaItem isUsableAsRepresentativeItem]
  -[MPNondurableMediaItem incrementPlayCount]
  -[MPNondurableMediaItem encodeWithCoder:]


MPMediaItemArtwork : NSObject
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} imageCropRect

  // instance methods
  -[MPMediaItemArtwork initWithImage:]
  -[MPMediaItemArtwork .cxx_destruct]
  -[MPMediaItemArtwork initWithBoundsSize:requestHandler:]
  -[MPMediaItemArtwork imageWithSize:]
  -[MPMediaItemArtwork imageCropRect]
  -[MPMediaItemArtwork jpegDataWithSize:]
  -[MPMediaItemArtwork pngDataWithSize:]
  -[MPMediaItemArtwork init]
  -[MPMediaItemArtwork bounds]


MPModelLibraryKeepLocalStatusRequestOperation : MPAsyncOperation
 @property  {shared_ptr<mlcore::EntityQuery>=^{EntityQuery}^{__shared_weak_count}} downloadableItemsQuery
 @property  @? downloadablePlaylistItemEntityQueryBlock
 @property  long long enableState
 @property  MPModelObject *identifyingModelObject
 @property  MPMediaLibraryView *libraryView
 @property  NSNumber *redownloadableItemCount
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryKeepLocalStatusRequestOperation libraryView]
  -[MPModelLibraryKeepLocalStatusRequestOperation setLibraryView:]
  -[MPModelLibraryKeepLocalStatusRequestOperation .cxx_construct]
  -[MPModelLibraryKeepLocalStatusRequestOperation .cxx_destruct]
  -[MPModelLibraryKeepLocalStatusRequestOperation responseHandler]
  -[MPModelLibraryKeepLocalStatusRequestOperation setResponseHandler:]
  -[MPModelLibraryKeepLocalStatusRequestOperation execute]
  -[MPModelLibraryKeepLocalStatusRequestOperation redownloadableItemCount]
  -[MPModelLibraryKeepLocalStatusRequestOperation setDownloadablePlaylistItemEntityQueryBlock:]
  -[MPModelLibraryKeepLocalStatusRequestOperation setDownloadableItemsQuery:]
  -[MPModelLibraryKeepLocalStatusRequestOperation enableState]
  -[MPModelLibraryKeepLocalStatusRequestOperation setEnableState:]
  -[MPModelLibraryKeepLocalStatusRequestOperation setIdentifyingModelObject:]
  -[MPModelLibraryKeepLocalStatusRequestOperation identifyingModelObject]
  -[MPModelLibraryKeepLocalStatusRequestOperation setRedownloadableItemCount:]
  -[MPModelLibraryKeepLocalStatusRequestOperation downloadableItemsQuery]
  -[MPModelLibraryKeepLocalStatusRequestOperation downloadablePlaylistItemEntityQueryBlock]


QueryCriteriaResultsCache : NSCache
  // instance methods
  -[QueryCriteriaResultsCache init]


MPMediaLibrary : NSObject <_MPActiveUserChangeMonitorDelegate, NSSecureCoding>
 @property  {shared_ptr<mlcore::DeviceLibrary>=^{DeviceLibrary}^{__shared_weak_count}} _MediaLibrary_coreLibrary
 @property  NSURL *protectedContentSupportStorageURL
 @property  NSString *_syncValidity
 @property  NSNumber *sagaAccountID
 @property  NSDate *sagaLastItemPlayDataUploadDate
 @property  NSDate *sagaLastPlaylistPlayDataUploadDate
 @property  long long sagaDatabaseUserVersion
 @property  NSString *storefrontIdentifier
 @property  NSDate *sagaLastLibraryUpdateTime
 @property  NSDate *sagaLastSubscribedContainersUpdateTime
 @property  long long sagaOnDiskDatabaseRevision
 @property  long long libraryChangeObservers
 @property  long long removalReason
 @property  {os_unfair_lock_s=I} _MLCoreStorageLock
 @property  _MPActiveUserChangeMonitor *activeUserChangeMonitor
 @property  id _MLCoreStorage
 @property  ^{os_unfair_lock_s=I} _MLCoreStorageLockPointer
 @property  ML3MusicLibrary *ml3Library
 @property  ICUserIdentity *userIdentity
 @property  NSDate *lastModifiedDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaLibrary initialize]
  +[MPMediaLibrary _deviceMediaLibraryWithUserIdentity:createIfRequired:]
  +[MPMediaLibrary _mediaLibraries]
  +[MPMediaLibrary reloadDynamicPropertiesForLibraryDataProvider:]
  +[MPMediaLibrary reloadInvisiblePropertiesForLibraryDataProvider:]
  +[MPMediaLibrary _libraryDataProviders]
  +[MPMediaLibrary setLibraryServerDisabled:]
  +[MPMediaLibrary _libraryForDataProvider:]
  +[MPMediaLibrary authorizationStatus]
  +[MPMediaLibrary supportsSecureCoding]
  +[MPMediaLibrary requestAuthorization:]
  +[MPMediaLibrary _mediaLibraryAuthorizationStatusFromCloudServiceAuthorizationStatus:]
  +[MPMediaLibrary _postNotificationName:library:userInfo:]
  +[MPMediaLibrary mediaLibraryWithUniqueIdentifier:]
  +[MPMediaLibrary removeLibraryDataProvider:removalReason:]
  +[MPMediaLibrary postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:]
  +[MPMediaLibrary _mediaLibraryWithUniqueIdentifier:userDSID:]
  +[MPMediaLibrary sharedMediaLibraries]
  +[MPMediaLibrary libraryDataProviders]
  +[MPMediaLibrary setDefaultMediaLibrary:]
  +[MPMediaLibrary reloadLibraryDataProvider:]
  +[MPMediaLibrary isLibraryServerDisabled]
  +[MPMediaLibrary mediaLibraryWithUniqueIdentifier:allowsLoadingFromDisk:]
  +[MPMediaLibrary syncGenerationDidChangeForLibraryDataProvider:]
  +[MPMediaLibrary logDatabaseAccess]
  +[MPMediaLibrary _sharedCloudServiceStatusMonitor]
  +[MPMediaLibrary reloadDisplayValuesForLibraryDataProvider:]
  +[MPMediaLibrary beginDiscoveringMediaLibraries]
  +[MPMediaLibrary defaultMediaLibrary]
  +[MPMediaLibrary deviceMediaLibrary]
  +[MPMediaLibrary _postNotificationName:library:]
  +[MPMediaLibrary deviceMediaLibraryWithUserIdentity:]
  +[MPMediaLibrary uniqueIdentifierDidChangeForLibraryDataProvider:]
  +[MPMediaLibrary addLibraryDataProvider:]
  +[MPMediaLibrary mediaLibraries]
  +[MPMediaLibrary _endDiscoveringMediaLibrariesIfAllowed]
  +[MPMediaLibrary libraryPathDidChangeForDataProvider:]
  +[MPMediaLibrary setGlobalPrivacyClientWithAuditToken:]
  +[MPMediaLibrary endDiscoveringMediaLibraries]
  +[MPMediaLibrary setRunLoopForNotifications:]

  // instance methods
  -[MPMediaLibrary isGeniusEnabled]
  -[MPMediaLibrary hasGenres]
  -[MPMediaLibrary entityCache]
  -[MPMediaLibrary collectionExistsWithName:groupingType:existentPID:]
  -[MPMediaLibrary setValues:forProperties:forItemPersistentIDs:]
  -[MPMediaLibrary _disconnect]
  -[MPMediaLibrary addStoreItem:andAddTracksToCloudLibrary:withCompletion:]
  -[MPMediaLibrary preferredSubtitleLanguages]
  -[MPMediaLibrary _clearPendingDisconnection]
  -[MPMediaLibrary syncValidity]
  -[MPMediaLibrary performStoreItemLibraryImport:withCompletion:]
  -[MPMediaLibrary itemWithStoreID:]
  -[MPMediaLibrary syncPlaylistId]
  -[MPMediaLibrary hasGeniusMixes]
  -[MPMediaLibrary hasITunesUContent]
  -[MPMediaLibrary disconnect]
  -[MPMediaLibrary addNonLibraryOwnedPlaylistsWithGlobalIDs:completion:]
  -[MPMediaLibrary hasUserPlaylists]
  -[MPMediaLibrary playlistGeneration]
  -[MPMediaLibrary artworkDataSource]
  -[MPMediaLibrary isHomeSharingLibrary]
  -[MPMediaLibrary databasePath]
  -[MPMediaLibrary multiverseIdentifierForCollectionWithPersistentID:groupingType:]
  -[MPMediaLibrary collectionExistsContainedWithinSyncIDs:groupingType:existentPID:]
  -[MPMediaLibrary setValue:forDatabaseProperty:]
  -[MPMediaLibrary deleteDatabaseProperty:]
  -[MPMediaLibrary preferredAudioLanguages]
  -[MPMediaLibrary setClientIdentity:]
  -[MPMediaLibrary localizedSectionIndexTitles]
  -[MPMediaLibrary importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:]
  -[MPMediaLibrary name]
  -[MPMediaLibrary errorResolverForItem:]
  -[MPMediaLibrary _setLibraryFilterPredicates]
  -[MPMediaLibrary userIdentity]
  -[MPMediaLibrary hasUserPlaylistsContainingAppleMusicContent]
  -[MPMediaLibrary recordPlayEventForAlbumPersistentID:]
  -[MPMediaLibrary uniqueIdentifier]
  -[MPMediaLibrary enumerateEntityChangesAfterSyncAnchor:maximumRevisionType:usingBlock:]
  -[MPMediaLibrary playlistExistsWithPersistentID:]
  -[MPMediaLibrary localizedSectionHeaderForSectionIndex:]
  -[MPMediaLibrary syncGenerationID]
  -[MPMediaLibrary hasPlaylists]
  -[MPMediaLibrary collectionExistsWithStoreID:groupingType:existentPID:]
  -[MPMediaLibrary addTracksToMyLibrary:]
  -[MPMediaLibrary initWithCoder:]
  -[MPMediaLibrary collectionExistsWithSagaID:groupingType:existentPID:]
  -[MPMediaLibrary isCurrentThreadInTransaction]
  -[MPMediaLibrary protectedContentSupportStorageURL]
  -[MPMediaLibrary playlistWithPersistentID:]
  -[MPMediaLibrary collectionExistsWithPersistentID:groupingType:]
  -[MPMediaLibrary recordPlayEventForPlaylistPersistentID:]
  -[MPMediaLibrary hasUbiquitousBookmarkableItems]
  -[MPMediaLibrary importOriginalArtworkFromImageData:withArtworkToken:artworkType:sourceType:mediaType:]
  -[MPMediaLibrary hasMediaOfType:]
  -[MPMediaLibrary addGlobalPlaylistWithID:andAddToCloudLibrary:completion:]
  -[MPMediaLibrary writable]
  -[MPMediaLibrary collectionExistsWithCloudUniversalLibraryID:groupingType:existentPID:]
  -[MPMediaLibrary performTransactionWithBlock:]
  -[MPMediaLibrary requiresAuthentication]
  -[MPMediaLibrary collectionExistsContainedWithinPersistentIDs:count:groupingType:existentPID:]
  -[MPMediaLibrary multiverseIdentifierForTrackWithPersistentID:]
  -[MPMediaLibrary currentEntityRevision]
  -[MPMediaLibrary isDeviceLibrary]
  -[MPMediaLibrary itemExistsWithPersistentID:]
  -[MPMediaLibrary _checkHasContent:determined:queryHasEntitiesBlock:]
  -[MPMediaLibrary valueForDatabaseProperty:]
  -[MPMediaLibrary performReadTransactionWithBlock:]
  -[MPMediaLibrary _itemPersistentIdentifiersForQueryCriteria:]
  -[MPMediaLibrary _clearCachedEntitiesIncludingResultSets:]
  -[MPMediaLibrary _canShowCloudTracksDidChangeNotification:]
  -[MPMediaLibrary hasMovieRentals]
  -[MPMediaLibrary _countOfItemsForQueryCriteria:]
  -[MPMediaLibrary filterAvailableContentGroups:withOptions:]
  -[MPMediaLibrary hasArtists]
  -[MPMediaLibrary hasAudibleAudioBooks]
  -[MPMediaLibrary hasVideoITunesUContent]
  -[MPMediaLibrary hasMedia]
  -[MPMediaLibrary .cxx_destruct]
  -[MPMediaLibrary _MLCoreStorage]
  -[MPMediaLibrary connectWithAuthenticationData:completionBlock:]
  -[MPMediaLibrary setSyncPlaylistId:]
  -[MPMediaLibrary hasMovies]
  -[MPMediaLibrary hasCompilations]
  -[MPMediaLibrary _initWithUserIdentity:]
  -[MPMediaLibrary _reloadLibraryForContentsChangeWithNotificationInfo:]
  -[MPMediaLibrary beginGeneratingLibraryChangeNotifications]
  -[MPMediaLibrary URLForHomeSharingRequest:]
  -[MPMediaLibrary enumerateEntityChangesAfterSyncAnchor:maximumRevisionType:inUsersLibrary:usingBlock:]
  -[MPMediaLibrary _displayValuesDidChangeNotification:]
  -[MPMediaLibrary hasAudioITunesUContent]
  -[MPMediaLibrary sagaOnDiskDatabaseRevision]
  -[MPMediaLibrary endGeneratingLibraryChangeNotifications]
  -[MPMediaLibrary setActiveUserChangeMonitor:]
  -[MPMediaLibrary entityWithLibraryURL:]
  -[MPMediaLibrary _reloadLibraryForRestrictionsChange]
  -[MPMediaLibrary clearSagaCloudAccountID]
  -[MPMediaLibrary ml3Library]
  -[MPMediaLibrary downloadAsset:completionHandler:]
  -[MPMediaLibrary _MLCoreStorageLockPointer]
  -[MPMediaLibrary hasVideos]
  -[MPMediaLibrary populateLocationPropertiesOfItem:withPath:assetProtectionType:]
  -[MPMediaLibrary itemExistsInDatabaseWithPersistentID:]
  -[MPMediaLibrary init]
  -[MPMediaLibrary addPlaylistWithName:activeGeniusPlaylist:]
  -[MPMediaLibrary setSagaLastLibraryUpdateTime:]
  -[MPMediaLibrary addLibraryFilterPredicate:]
  -[MPMediaLibrary isEqual:]
  -[MPMediaLibrary _reloadLibraryForDynamicPropertyChangeWithNotificationInfo:]
  -[MPMediaLibrary clearLocationPropertiesOfItem:]
  -[MPMediaLibrary connectionAssertionWithIdentifier:]
  -[MPMediaLibrary hasComposers]
  -[MPMediaLibrary _didReceiveMemoryWarning:]
  -[MPMediaLibrary itemWithPersistentID:]
  -[MPMediaLibrary _reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:]
  -[MPMediaLibrary _hasCollectionsForQueryCriteria:]
  -[MPMediaLibrary sagaDatabaseUserVersion]
  -[MPMediaLibrary entityWithPersistentID:entityType:]
  -[MPMediaLibrary _getCachedValueForQueryCritiera:valueCriteriaCache:entitiesForCriteriaCache:didLoadBlocksByQueryCriteria:valueLoadedFromEntitiesArrayBlock:loadValueFromDataProviderBlock:]
  -[MPMediaLibrary _hasItemsForQueryCriteria:]
  -[MPMediaLibrary removeItems:]
  -[MPMediaLibrary setSagaOnDiskDatabaseRevision:]
  -[MPMediaLibrary setCloudFilteringType:]
  -[MPMediaLibrary getPlaylistWithUUID:creationMetadata:completionHandler:]
  -[MPMediaLibrary removePlaylist:]
  -[MPMediaLibrary collectionWithPersistentID:groupingType:]
  -[MPMediaLibrary initWithClientIdentity:userIdentity:]
  -[MPMediaLibrary _scheduleLibraryChangeNotificationPostingBlock:]
  -[MPMediaLibrary _tearDownNotifications]
  -[MPMediaLibrary connectionProgress]
  -[MPMediaLibrary collectionWithPersistentID:groupingType:verifyExistence:]
  -[MPMediaLibrary clearSagaLastPlaylistPlayDataUploadDate]
  -[MPMediaLibrary sagaLastLibraryUpdateTime]
  -[MPMediaLibrary _activeUserDidChangeNotification:]
  -[MPMediaLibrary sagaLastPlaylistPlayDataUploadDate]
  -[MPMediaLibrary addPlaylistWithName:]
  -[MPMediaLibrary _countOfCollectionsForQueryCriteria:]
  -[MPMediaLibrary setSagaLastSubscribedContainersUpdateTime:]
  -[MPMediaLibrary itemWithPersistentID:verifyExistence:]
  -[MPMediaLibrary _MLCoreStorageLock]
  -[MPMediaLibrary activeUserChangeDidFinish]
  -[MPMediaLibrary _setupNotifications]
  -[MPMediaLibrary sagaLastSubscribedContainersUpdateTime]
  -[MPMediaLibrary decodeItemWithCoder:]
  -[MPMediaLibrary sagaLastItemPlayDataUploadDate]
  -[MPMediaLibrary hasAddedToLibraryAppleMusicContent]
  -[MPMediaLibrary addNonLibraryOwnedPlaylistWithGlobalID:completion:]
  -[MPMediaLibrary setSagaLastItemPlayDataUploadDate:]
  -[MPMediaLibrary _clearCachedContentDataAndResultSets:]
  -[MPMediaLibrary _MediaLibrary_coreLibrary]
  -[MPMediaLibrary hasHomeVideos]
  -[MPMediaLibrary _handlesSameAccountAs:]
  -[MPMediaLibrary _collectionPersistentIdentifiersForQueryCriteria:]
  -[MPMediaLibrary _setMLCoreStorage:]
  -[MPMediaLibrary _performBlockOnLibraryHandlingTheSameAccount:]
  -[MPMediaLibrary geniusItemsForSeedItem:completion:]
  -[MPMediaLibrary status]
  -[MPMediaLibrary _initWithLibraryDataProvider:]
  -[MPMediaLibrary hasTVShows]
  -[MPMediaLibrary sagaAccountID]
  -[MPMediaLibrary populateLocationPropertiesOfItem:withPath:assetProtectionType:completionBlock:]
  -[MPMediaLibrary hasMusicVideos]
  -[MPMediaLibrary additionalLibraryFilterPredicates]
  -[MPMediaLibrary entityWithMultiverseIdentifier:]
  -[MPMediaLibrary hasVideoPodcasts]
  -[MPMediaLibrary libraryChangeObservers]
  -[MPMediaLibrary photosMemoriesPlaylist]
  -[MPMediaLibrary logDatabaseAccess]
  -[MPMediaLibrary addPlaylistStoreItemsWithMetadata:completion:]
  -[MPMediaLibrary addItemWithProductID:completionHandler:]
  -[MPMediaLibrary setSagaLastPlaylistPlayDataUploadDate:]
  -[MPMediaLibrary deleteItems:]
  -[MPMediaLibrary _removeConnectionAssertion:]
  -[MPMediaLibrary addStoreItemIDs:referralObject:andAddTracksToCloudLibrary:withCompletion:]
  -[MPMediaLibrary setSagaAccountID:]
  -[MPMediaLibrary hasSongs]
  -[MPMediaLibrary connectWithCompletionHandler:]
  -[MPMediaLibrary dealloc]
  -[MPMediaLibrary storefrontIdentifier]
  -[MPMediaLibrary libraryDataProvider]
  -[MPMediaLibrary homeSharingDatabaseID]
  -[MPMediaLibrary hasAlbums]
  -[MPMediaLibrary hasPodcasts]
  -[MPMediaLibrary entityWithSpotlightIdentifier:]
  -[MPMediaLibrary _checkHasContent:determined:mediaType:queryHasEntitiesBlock:]
  -[MPMediaLibrary pathForAssetURL:]
  -[MPMediaLibrary playbackHistoryPlaylist]
  -[MPMediaLibrary addStoreItemIDs:andAddTracksToCloudLibrary:withCompletion:]
  -[MPMediaLibrary setRemovalReason:]
  -[MPMediaLibrary _syncValidity]
  -[MPMediaLibrary _reloadLibraryForPathChange]
  -[MPMediaLibrary enumerateEntityChangesAfterSyncAnchor:usingBlock:]
  -[MPMediaLibrary _itemsForQueryCriteria:]
  -[MPMediaLibrary _persistentIDForAssetURL:]
  -[MPMediaLibrary cloudFilteringType]
  -[MPMediaLibrary clearSagaLastItemPlayDataUploadDate]
  -[MPMediaLibrary isValidAssetURL:]
  -[MPMediaLibrary removeLibraryFilterPredicate:]
  -[MPMediaLibrary setStorefrontIdentifier:]
  -[MPMediaLibrary encodeWithCoder:]
  -[MPMediaLibrary activeUserChangeMonitor]
  -[MPMediaLibrary lastModifiedDate]
  -[MPMediaLibrary hasAudiobooks]
  -[MPMediaLibrary _collectionsForQueryCriteria:]
  -[MPMediaLibrary newPlaylistWithPersistentID:]
  -[MPMediaLibrary setSagaDatabaseUserVersion:]
  -[MPMediaLibrary removalReason]


MPMediaLibraryConnectionAssertion : NSObject
 @property  NSString *identifier

  // instance methods
  -[MPMediaLibraryConnectionAssertion .cxx_destruct]
  -[MPMediaLibraryConnectionAssertion _initWithMediaLibrary:identifier:]
  -[MPMediaLibraryConnectionAssertion identifier]
  -[MPMediaLibraryConnectionAssertion dealloc]


_MPMediaLibraryEntityChange : NSObject
 @property  MPMediaEntity *entity
 @property  NSString *anchor
 @property  long long deletionType

  // instance methods
  -[_MPMediaLibraryEntityChange .cxx_destruct]
  -[_MPMediaLibraryEntityChange anchor]
  -[_MPMediaLibraryEntityChange deletionType]
  -[_MPMediaLibraryEntityChange initWithEntity:anchor:deletionType:]
  -[_MPMediaLibraryEntityChange entity]


MPModelRequest : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *label
 @property  MPModelKind *sectionKind
 @property  MPPropertySet *sectionProperties
 @property  NSArray *sectionSortDescriptors
 @property  MPModelKind *itemKind
 @property  MPPropertySet *itemProperties
 @property  NSArray *itemSortDescriptors
 @property  Class sectionClass
 @property  Class itemClass

  // class methods
  +[MPModelRequest preferredQueue]
  +[MPModelRequest requiresNetwork]
  +[MPModelRequest supportsSecureCoding]
  +[MPModelRequest sharedQueue]
  +[MPModelRequest sharedNetworkQueue]

  // instance methods
  -[MPModelRequest label]
  -[MPModelRequest newOperationWithResponseHandler:]
  -[MPModelRequest initWithCoder:]
  -[MPModelRequest itemProperties]
  -[MPModelRequest .cxx_destruct]
  -[MPModelRequest itemClass]
  -[MPModelRequest _kindForClass:]
  -[MPModelRequest sectionClass]
  -[MPModelRequest setSectionClass:]
  -[MPModelRequest setItemClass:]
  -[MPModelRequest setSectionSortDescriptors:]
  -[MPModelRequest setItemSortDescriptors:]
  -[MPModelRequest setSectionKind:]
  -[MPModelRequest setItemKind:]
  -[MPModelRequest setSectionProperties:]
  -[MPModelRequest performWithResponseHandler:]
  -[MPModelRequest itemKind]
  -[MPModelRequest sectionKind]
  -[MPModelRequest sectionSortDescriptors]
  -[MPModelRequest itemSortDescriptors]
  -[MPModelRequest setItemProperties:]
  -[MPModelRequest setLabel:]
  -[MPModelRequest copyWithZone:]
  -[MPModelRequest sectionProperties]
  -[MPModelRequest encodeWithCoder:]


MPMediaPickerController : UIViewController <MPMusicMediaPickerClientController>
 @property  <MPMediaPickerRemoteViewLoader> *loader
 @property  unsigned long mediaTypes
 @property  <MPMediaPickerControllerDelegate> *delegate
 @property  BOOL allowsPickingMultipleItems
 @property  BOOL showsCloudItems
 @property  BOOL showsItemsWithProtectedAssets
 @property  NSString *prompt
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaPickerController preheatMediaPicker]

  // instance methods
  -[MPMediaPickerController setPrompt:]
  -[MPMediaPickerController preferredInterfaceOrientationForPresentation]
  -[MPMediaPickerController typeIdentifiers]
  -[MPMediaPickerController selectionMode]
  -[MPMediaPickerController _sharedInit]
  -[MPMediaPickerController initWithCoder:]
  -[MPMediaPickerController configuration]
  -[MPMediaPickerController setLoader:]
  -[MPMediaPickerController .cxx_destruct]
  -[MPMediaPickerController viewDidLoad]
  -[MPMediaPickerController _pickerDidCancel]
  -[MPMediaPickerController prompt]
  -[MPMediaPickerController _addRemoteView]
  -[MPMediaPickerController setDelegate:]
  -[MPMediaPickerController initWithMediaTypes:]
  -[MPMediaPickerController showsLibraryContent]
  -[MPMediaPickerController viewDidAppear:]
  -[MPMediaPickerController showsCatalogContent]
  -[MPMediaPickerController _checkLibraryAuthorization]
  -[MPMediaPickerController _pickerDidPickItems:]
  -[MPMediaPickerController showsCloudItems]
  -[MPMediaPickerController _pickerDidPickPlaybackArchive:]
  -[MPMediaPickerController _synchronizeSettings]
  -[MPMediaPickerController allowsPickingMultipleItems]
  -[MPMediaPickerController setShowsCloudItems:]
  -[MPMediaPickerController picksSingleCollectionEntity]
  -[MPMediaPickerController showsItemsWithProtectedAssets]
  -[MPMediaPickerController setShowsItemsWithProtectedAssets:]
  -[MPMediaPickerController setPicksSingleCollectionEntity:]
  -[MPMediaPickerController watchCompatibilityVersion]
  -[MPMediaPickerController setWatchCompatibilityVersion:]
  -[MPMediaPickerController setShowsCatalogContent:]
  -[MPMediaPickerController setShowsLibraryContent:]
  -[MPMediaPickerController supportsUnavailableContent]
  -[MPMediaPickerController pickingForExternalPlayer]
  -[MPMediaPickerController setSupportsUnavailableContent:]
  -[MPMediaPickerController setPickingForExternalPlayer:]
  -[MPMediaPickerController playbackArchiveConfiguration]
  -[MPMediaPickerController _forceDismissal]
  -[MPMediaPickerController setPlaybackArchiveConfiguration:]
  -[MPMediaPickerController _hasAddedRemoteView]
  -[MPMediaPickerController remoteMediaPickerDidCancel]
  -[MPMediaPickerController initWithNibName:bundle:]
  -[MPMediaPickerController remoteMediaPickerDidPickMediaItems:]
  -[MPMediaPickerController remoteMediaPickerDidPickPlaybackArchive:]
  -[MPMediaPickerController _resetRemoteViewController]
  -[MPMediaPickerController initWithSupportedTypeIdentifiers:selectionMode:]
  -[MPMediaPickerController mediaTypes]
  -[MPMediaPickerController willMoveToParentViewController:]
  -[MPMediaPickerController modalPresentationStyle]
  -[MPMediaPickerController initWithConfiguration:]
  -[MPMediaPickerController viewWillAppear:]
  -[MPMediaPickerController setAllowsPickingMultipleItems:]
  -[MPMediaPickerController delegate]
  -[MPMediaPickerController loader]
  -[MPMediaPickerController supportedInterfaceOrientations]
  -[MPMediaPickerController _preferredModalPresentationStyle]
  -[MPMediaPickerController _canShowWhileLocked]


MPMediaPickerController_Appex : NSObject <MPMediaPickerRemoteViewLoader>
 @property  MPMediaPickerController *mediaPickerController
 @property  UIViewController *remoteViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaPickerController_Appex remoteViewController]
  -[MPMediaPickerController_Appex .cxx_destruct]
  -[MPMediaPickerController_Appex setMediaPickerController:]
  -[MPMediaPickerController_Appex synchronizeSettings]
  -[MPMediaPickerController_Appex serviceController]
  -[MPMediaPickerController_Appex mediaPickerController]
  -[MPMediaPickerController_Appex requestRemoteViewController]
  -[MPMediaPickerController_Appex dealloc]


MPMediaPickerConfiguration : NSObject <NSSecureCoding>
 @property  long long supportedContentOptions
 @property  unsigned long mediaTypes
 @property  BOOL allowsPickingMultipleItems
 @property  BOOL alwaysShowSearchBarInLibrary
 @property  BOOL automaticallyDrillsToLibrary
 @property  BOOL showsCloudItems
 @property  BOOL showsItemsWithProtectedAssets
 @property  NSString *prompt
 @property  BOOL picksSingleCollectionEntity
 @property  unsigned int watchCompatibilityVersion
 @property  NSArray *typeIdentifiers
 @property  long long selectionMode
 @property  BOOL showsCatalogContent
 @property  BOOL showsLibraryContent
 @property  BOOL supportsUnavailableContent
 @property  BOOL pickingForExternalPlayer
 @property  MPPlaybackArchiveConfiguration *playbackArchiveConfiguration

  // class methods
  +[MPMediaPickerConfiguration supportsSecureCoding]

  // instance methods
  -[MPMediaPickerConfiguration setPrompt:]
  -[MPMediaPickerConfiguration typeIdentifiers]
  -[MPMediaPickerConfiguration selectionMode]
  -[MPMediaPickerConfiguration initWithCoder:]
  -[MPMediaPickerConfiguration setSelectionMode:]
  -[MPMediaPickerConfiguration .cxx_destruct]
  -[MPMediaPickerConfiguration prompt]
  -[MPMediaPickerConfiguration setTypeIdentifiers:]
  -[MPMediaPickerConfiguration showsLibraryContent]
  -[MPMediaPickerConfiguration showsCatalogContent]
  -[MPMediaPickerConfiguration showsCloudItems]
  -[MPMediaPickerConfiguration allowsPickingMultipleItems]
  -[MPMediaPickerConfiguration setShowsCloudItems:]
  -[MPMediaPickerConfiguration picksSingleCollectionEntity]
  -[MPMediaPickerConfiguration showsItemsWithProtectedAssets]
  -[MPMediaPickerConfiguration setShowsItemsWithProtectedAssets:]
  -[MPMediaPickerConfiguration setPicksSingleCollectionEntity:]
  -[MPMediaPickerConfiguration watchCompatibilityVersion]
  -[MPMediaPickerConfiguration setWatchCompatibilityVersion:]
  -[MPMediaPickerConfiguration setShowsCatalogContent:]
  -[MPMediaPickerConfiguration setShowsLibraryContent:]
  -[MPMediaPickerConfiguration supportsUnavailableContent]
  -[MPMediaPickerConfiguration pickingForExternalPlayer]
  -[MPMediaPickerConfiguration setSupportsUnavailableContent:]
  -[MPMediaPickerConfiguration setPickingForExternalPlayer:]
  -[MPMediaPickerConfiguration playbackArchiveConfiguration]
  -[MPMediaPickerConfiguration setPlaybackArchiveConfiguration:]
  -[MPMediaPickerConfiguration supportedContentOptions]
  -[MPMediaPickerConfiguration setSupportedContentOptions:]
  -[MPMediaPickerConfiguration alwaysShowSearchBarInLibrary]
  -[MPMediaPickerConfiguration setAlwaysShowSearchBarInLibrary:]
  -[MPMediaPickerConfiguration automaticallyDrillsToLibrary]
  -[MPMediaPickerConfiguration setAutomaticallyDrillsToLibrary:]
  -[MPMediaPickerConfiguration mediaTypes]
  -[MPMediaPickerConfiguration init]
  -[MPMediaPickerConfiguration setAllowsPickingMultipleItems:]
  -[MPMediaPickerConfiguration setMediaTypes:]
  -[MPMediaPickerConfiguration encodeWithCoder:]


MPAVQueueCoordinator : NSObject <MPAVQueueCoordinating>
 @property  MPQueuePlayer *player
 @property  <MPAVQueueCoordinatingDataSource> *dataSource
 @property  @? equilibriumAchievedHandler
 @property  MPAVItem *currentItem
 @property  BOOL shouldExpectEmptyQueue
 @property  BOOL shouldDeferItemLoading
 @property  NSArray *items
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVQueueCoordinator items]
  -[MPAVQueueCoordinator .cxx_destruct]
  -[MPAVQueueCoordinator currentItem]
  -[MPAVQueueCoordinator _playerItems]
  -[MPAVQueueCoordinator _updateCurrentItem]
  -[MPAVQueueCoordinator _reloadItemsKeepingCurrentItem:]
  -[MPAVQueueCoordinator _syncPlayerItems]
  -[MPAVQueueCoordinator _updateQueueDepthIfNeeded]
  -[MPAVQueueCoordinator _syncItemsWithPreviousItems:]
  -[MPAVQueueCoordinator _sendItemsDidChange]
  -[MPAVQueueCoordinator _dequeueFailedItem:]
  -[MPAVQueueCoordinator _beginBackgroundTaskAssertion]
  -[MPAVQueueCoordinator _endBackgroundTaskAssertion]
  -[MPAVQueueCoordinator _preferredQueueDepthWithFirstItem:]
  -[MPAVQueueCoordinator _loadAssetForItem:]
  -[MPAVQueueCoordinator _hasAchievedEquilibrium]
  -[MPAVQueueCoordinator _removeItemFromPlayer:]
  -[MPAVQueueCoordinator shouldExpectEmptyQueue]
  -[MPAVQueueCoordinator setShouldExpectEmptyQueue:]
  -[MPAVQueueCoordinator _currentItemHasFinishedDownloadingDidChangeNotification:]
  -[MPAVQueueCoordinator reloadItemsKeepingCurrentItem:]
  -[MPAVQueueCoordinator equilibriumAchievedHandler]
  -[MPAVQueueCoordinator setEquilibriumAchievedHandler:]
  -[MPAVQueueCoordinator dataSource]
  -[MPAVQueueCoordinator player]
  -[MPAVQueueCoordinator reset]
  -[MPAVQueueCoordinator shouldDeferItemLoading]
  -[MPAVQueueCoordinator setShouldDeferItemLoading:]
  -[MPAVQueueCoordinator initWithPlayer:dataSource:]
  -[MPAVQueueCoordinator dealloc]
  -[MPAVQueueCoordinator observeValueForKeyPath:ofObject:change:context:]


_MPModelMediaRemoteItemArtist : MPModelArtist

_MPModelMediaRemotePodcastEpisodeAuthor : MPModelPodcastAuthor

MPAddKeepLocalControl : UIControl
 @property  BOOL allowsAddImage
 @property  {MPAddKeepLocalControlStatus=qd} controlStatus
 @property  long long displayStyle
 @property  BOOL scaleImageForAccessibility
 @property  UIColor *filledTintColor

  // class methods
  +[MPAddKeepLocalControl _expectedSizeForControlStatusType:controlTitle:hasControlImage:displayScale:preferredHeight:]
  +[MPAddKeepLocalControl _newControlTitleLabel]
  +[MPAddKeepLocalControl controlTitleFontForControlStatusType:]
  +[MPAddKeepLocalControl _imageNamed:compatibleWithTraitCollection:]

  // instance methods
  -[MPAddKeepLocalControl setHighlighted:]
  -[MPAddKeepLocalControl hitTest:withEvent:]
  -[MPAddKeepLocalControl traitCollectionDidChange:]
  -[MPAddKeepLocalControl setContentHorizontalAlignment:]
  -[MPAddKeepLocalControl _removeAllAnimations:]
  -[MPAddKeepLocalControl _applicationWillEnterForegroundNotification:]
  -[MPAddKeepLocalControl displayStyle]
  -[MPAddKeepLocalControl .cxx_destruct]
  -[MPAddKeepLocalControl layoutSubviews]
  -[MPAddKeepLocalControl tintColorDidChange]
  -[MPAddKeepLocalControl allowsAddImage]
  -[MPAddKeepLocalControl controlStatus]
  -[MPAddKeepLocalControl filledTintColor]
  -[MPAddKeepLocalControl setScaleImageForAccessibility:]
  -[MPAddKeepLocalControl titleForControlStatusType:]
  -[MPAddKeepLocalControl _updateControlImageViewAnimation]
  -[MPAddKeepLocalControl _updateBackgroundViewCornerRadius]
  -[MPAddKeepLocalControl _updateControlStatusProperties]
  -[MPAddKeepLocalControl _updateControlTitleLabelVisualProperties]
  -[MPAddKeepLocalControl _beginTransientContentViewTransaction]
  -[MPAddKeepLocalControl _endTransientContentViewTransaction]
  -[MPAddKeepLocalControl setControlStatus:animated:]
  -[MPAddKeepLocalControl _currentContentSuperview]
  -[MPAddKeepLocalControl setControlStatus:]
  -[MPAddKeepLocalControl scaleImageForAccessibility]
  -[MPAddKeepLocalControl maximumSizeWithPreferredHeight:]
  -[MPAddKeepLocalControl setAllowsAddImage:]
  -[MPAddKeepLocalControl setFilledTintColor:]
  -[MPAddKeepLocalControl setTitle:forControlStatusType:]
  -[MPAddKeepLocalControl sizeThatFits:]
  -[MPAddKeepLocalControl touchesCancelled:withEvent:]
  -[MPAddKeepLocalControl initWithFrame:]
  -[MPAddKeepLocalControl pointInside:withEvent:]
  -[MPAddKeepLocalControl didMoveToWindow]
  -[MPAddKeepLocalControl dealloc]
  -[MPAddKeepLocalControl setDisplayStyle:]
  -[MPAddKeepLocalControl touchesEnded:withEvent:]


MPStoreLyricsSnippetRequestOperation : MPAsyncOperation
 @property  MPStoreLyricsSnippetURLComponents *snippetURL
 @property  @? responseHandler

  // instance methods
  -[MPStoreLyricsSnippetRequestOperation .cxx_destruct]
  -[MPStoreLyricsSnippetRequestOperation responseHandler]
  -[MPStoreLyricsSnippetRequestOperation setResponseHandler:]
  -[MPStoreLyricsSnippetRequestOperation execute]
  -[MPStoreLyricsSnippetRequestOperation setSnippetURL:]
  -[MPStoreLyricsSnippetRequestOperation snippetURL]
  -[MPStoreLyricsSnippetRequestOperation finishWithError:]


MPStoreModelMovieMediaClipBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelMovieMediaClipBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelMovieMediaClipBuilder mediaClipWithStoreItemMetadata:storeItemMovieClip:]
  -[MPStoreModelMovieMediaClipBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPLibraryKeepLocalStatusObserver : NSObject <MPMediaDownloadObserver>
 @property  MPLibraryKeepLocalStatusObserverConfiguration *configuration
 @property  {MPLibraryActiveKeepLocalStatus=qd} currentStatus
 @property  unsigned long downloadPausedReason
 @property  @? statusBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPLibraryKeepLocalStatusObserver statusBlock]
  -[MPLibraryKeepLocalStatusObserver configuration]
  -[MPLibraryKeepLocalStatusObserver .cxx_destruct]
  -[MPLibraryKeepLocalStatusObserver _transientStateDidChangeNotification:]
  -[MPLibraryKeepLocalStatusObserver _handleDownloadStateChanged:]
  -[MPLibraryKeepLocalStatusObserver init]
  -[MPLibraryKeepLocalStatusObserver _updateCurrentStatus]
  -[MPLibraryKeepLocalStatusObserver currentStatus]
  -[MPLibraryKeepLocalStatusObserver _updateActiveDownloadsAllowingDownloadRemoval:]
  -[MPLibraryKeepLocalStatusObserver downloadManager:didChangeDownloadPausedReasonForAssets:]
  -[MPLibraryKeepLocalStatusObserver dealloc]
  -[MPLibraryKeepLocalStatusObserver _calculateCurrentStatus]
  -[MPLibraryKeepLocalStatusObserver downloadManager:didEnqueueAssetDownloads:didRemoveAssetDownloads:]
  -[MPLibraryKeepLocalStatusObserver downloadManager:didUpdateDownloadProgress:]
  -[MPLibraryKeepLocalStatusObserver setStatusBlock:]
  -[MPLibraryKeepLocalStatusObserver downloadPausedReason]
  -[MPLibraryKeepLocalStatusObserver setConfiguration:]


MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration : MPLibraryKeepLocalStatusObserverConfiguration
 @property  NSArray *pendingItemIdentifiers
 @property  long long downloadEnabledItemCount
 @property  long long nonPurgeableItemCount
 @property  long long redownloadableItemCount

  // instance methods
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration setNonPurgeableItemCount:]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration .cxx_destruct]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration isEqual:]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration redownloadableItemCount]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration pendingItemIdentifiers]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration setDownloadEnabledItemCount:]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration setRedownloadableItemCount:]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration setPendingItemIdentifiers:]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration downloadEnabledItemCount]
  -[MPLibraryKeepLocalStatusObserverDetailedContainerConfiguration nonPurgeableItemCount]


MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration : MPLibraryKeepLocalStatusObserverConfiguration
 @property  BOOL collectionType
 @property  long long managedStatus
 @property  BOOL hasNonPurgeableAsset
 @property  BOOL storeRedownloadable

  // instance methods
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration setStoreRedownloadable:]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration setCollectionType:]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration isCollectionType]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration isStoreRedownloadable]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration hasNonPurgeableAsset]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration isEqual:]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration setHasNonPurgeableAsset:]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration setManagedStatus:]
  -[MPLibraryKeepLocalStatusObserverIndividualEntityConfiguration managedStatus]


MPMediaItemCollection : MPMediaEntity
 @property  long long groupingType
 @property  NSArray *items
 @property  MPMediaItem *representativeItem
 @property  unsigned long count
 @property  unsigned long mediaTypes

  // class methods
  +[MPMediaItemCollection supportsSecureCoding]
  +[MPMediaItemCollection collectionWithItems:]
  +[MPMediaItemCollection sortTitlePropertyForGroupingType:]
  +[MPMediaItemCollection representativePersistentIDPropertyForGroupingType:]
  +[MPMediaItemCollection artworkCatalogCachePropertiesForGroupingType:]
  +[MPMediaItemCollection titlePropertyForGroupingType:]

  // instance methods
  -[MPMediaItemCollection initWithItems:]
  -[MPMediaItemCollection initWithCoder:]
  -[MPMediaItemCollection setValue:forProperty:withCompletionBlock:]
  -[MPMediaItemCollection items]
  -[MPMediaItemCollection multiverseIdentifier]
  -[MPMediaItemCollection setValue:forProperty:]
  -[MPMediaItemCollection .cxx_destruct]
  -[MPMediaItemCollection count]
  -[MPMediaItemCollection mediaTypes]
  -[MPMediaItemCollection initWithItemsQuery:]
  -[MPMediaItemCollection init]
  -[MPMediaItemCollection albumArtistArtworkCatalog]
  -[MPMediaItemCollection artistArtworkCatalog]
  -[MPMediaItemCollection _artworkCatalogRepresentativeItem]
  -[MPMediaItemCollection isEqual:]
  -[MPMediaItemCollection _enumerateItemPersistentIDsUsingBlock:]
  -[MPMediaItemCollection itemsQuery]
  -[MPMediaItemCollection MPSD_hasDownloadableItem]
  -[MPMediaItemCollection MPSD_hasDownloadingItem]
  -[MPMediaItemCollection representativeItem]
  -[MPMediaItemCollection artworkCatalog]
  -[MPMediaItemCollection initWithMultiverseIdentifier:library:]
  -[MPMediaItemCollection groupingType]
  -[MPMediaItemCollection encodeWithCoder:]


MPNotificationObserver : NSObject
 @property  NSString *name
 @property  id object
 @property  @? handler

  // instance methods
  -[MPNotificationObserver name]
  -[MPNotificationObserver .cxx_destruct]
  -[MPNotificationObserver _handleNotification:]
  -[MPNotificationObserver object]
  -[MPNotificationObserver initWithName:object:handler:]
  -[MPNotificationObserver dealloc]
  -[MPNotificationObserver handler]


MPMediaDownload : NSObject
 @property  long long libraryID
 @property  long long storeSagaID
 @property  long long downloadReason
 @property  double downloadProgress
 @property  unsigned long downloadPausedReason
 @property  long long deviceLibraryID
 @property  long long storeItemID

  // class methods
  +[MPMediaDownload MPMediaDownloadsFromMPStoreDownloads:]
  +[MPMediaDownload MPMediaDownloadPauseReasonForATAsset:]
  +[MPMediaDownload _downloadReasonFromStoreDownload:]
  +[MPMediaDownload MPMediaDownloadsFromATAssets:]

  // instance methods
  -[MPMediaDownload downloadProgress]
  -[MPMediaDownload setDownloadProgress:]
  -[MPMediaDownload libraryID]
  -[MPMediaDownload storeItemID]
  -[MPMediaDownload setDownloadPausedReason:]
  -[MPMediaDownload initWithMPStoreDownload:]
  -[MPMediaDownload initWithATAsset:]
  -[MPMediaDownload setLibraryID:]
  -[MPMediaDownload storeSagaID]
  -[MPMediaDownload downloadReason]
  -[MPMediaDownload deviceLibraryID]
  -[MPMediaDownload setDownloadReason:]
  -[MPMediaDownload setStoreSagaID:]
  -[MPMediaDownload isEqual:]
  -[MPMediaDownload downloadPausedReason]


MPStoreModelArtistBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelArtistBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelArtistBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPModelRadioStationEventKind : MPModelKind
  // class methods
  +[MPModelRadioStationEventKind identityKind]

  // instance methods
  -[MPModelRadioStationEventKind humanDescription]


MPModelRadioStationEvent : MPModelObject
 @property  NSString *title
 @property  NSString *descriptionText
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  @? artworkCatalogBlock
 @property  @? heroArtworkCatalogBlock

  // class methods
  +[MPModelRadioStationEvent __artworkCatalogBlock_KEY]
  +[MPModelRadioStationEvent genericObjectType]
  +[MPModelRadioStationEvent __descriptionText_KEY]
  +[MPModelRadioStationEvent __startTime_KEY]
  +[MPModelRadioStationEvent __endTime_KEY]
  +[MPModelRadioStationEvent __heroArtworkCatalogBlock_KEY]
  +[MPModelRadioStationEvent __title_KEY]

  // instance methods
  -[MPModelRadioStationEvent heroArtworkCatalog]
  -[MPModelRadioStationEvent artworkCatalog]


MPAVErrorResolverBlockHandler : NSObject <MPAVErrorResolverDelegate>
 @property  MPAVErrorResolver *errorResolver
 @property  @? resolutionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVErrorResolverBlockHandler .cxx_destruct]
  -[MPAVErrorResolverBlockHandler errorResolver:didResolveError:withResolution:]
  -[MPAVErrorResolverBlockHandler errorResolver]
  -[MPAVErrorResolverBlockHandler resolutionHandler]
  -[MPAVErrorResolverBlockHandler resolveError:]
  -[MPAVErrorResolverBlockHandler initWithErrorResolver:]
  -[MPAVErrorResolverBlockHandler setResolutionHandler:]


MPDetailSlider : UISlider <MPDetailedScrubbing, MPDetailScrubControllerDelegate>
 @property  <MPDetailSliderDelegate> *delegate
 @property  BOOL allowsScrubbing
 @property  BOOL allowsDetailScrubbing
 @property  double detailScrubbingVerticalRange
 @property  double duration
 @property  double availableDuration
 @property  BOOL detailScrubbingAvailableForCurrentDuration
 @property  long long timeLabelStyle
 @property  double minTimeLabelWidth
 @property  NSString *localizedScrubSpeedText
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPDetailSlider labelClass]

  // instance methods
  -[MPDetailSlider continueTrackingWithTouch:withEvent:]
  -[MPDetailSlider viewForFirstBaselineLayout]
  -[MPDetailSlider createThumbView]
  -[MPDetailSlider traitCollectionDidChange:]
  -[MPDetailSlider viewForLastBaselineLayout]
  -[MPDetailSlider .cxx_destruct]
  -[MPDetailSlider initWithFrame:style:]
  -[MPDetailSlider setDuration:]
  -[MPDetailSlider setValue:animated:]
  -[MPDetailSlider setFrame:]
  -[MPDetailSlider thumbRectForBounds:trackRect:value:]
  -[MPDetailSlider layoutSubviews]
  -[MPDetailSlider tintColorDidChange]
  -[MPDetailSlider setDelegate:]
  -[MPDetailSlider thumbHitRect]
  -[MPDetailSlider _setupControlsForStyle]
  -[MPDetailSlider timeLabelFontForStyle:]
  -[MPDetailSlider initWithFrame:style:maxTrackWidth:]
  -[MPDetailSlider timeLabelTextColorForStyle:]
  -[MPDetailSlider _stringForCurrentTime:]
  -[MPDetailSlider _updateTrackInset]
  -[MPDetailSlider _stringForInverseCurrentTime:]
  -[MPDetailSlider _commitValue]
  -[MPDetailSlider setValue:duration:]
  -[MPDetailSlider _setValueWhileTracking:duration:]
  -[MPDetailSlider _updateForAvailableDuraton]
  -[MPDetailSlider _updateTimeDisplayForTime:]
  -[MPDetailSlider _autoscrubTick:]
  -[MPDetailSlider _resetScrubInfo]
  -[MPDetailSlider cancelTracking]
  -[MPDetailSlider setAvailableDuration:]
  -[MPDetailSlider _updateTimeDisplayForTime:force:]
  -[MPDetailSlider allowsScrubbing]
  -[MPDetailSlider _modernThumbImageWithColor:height:includeShadow:]
  -[MPDetailSlider _colorSliceImageWithColor:height:]
  -[MPDetailSlider allowsDetailScrubbing]
  -[MPDetailSlider _stringForTime:elapsed:]
  -[MPDetailSlider detailScrubController:didChangeValue:]
  -[MPDetailSlider localizedScrubSpeedText]
  -[MPDetailSlider detailScrubController:didChangeScrubSpeed:]
  -[MPDetailSlider detailScrubbingAvailableForCurrentDuration]
  -[MPDetailSlider setTimeLabelStyle:]
  -[MPDetailSlider setAllowsScrubbing:]
  -[MPDetailSlider setAllowsDetailScrubbing:]
  -[MPDetailSlider setMinTimeLabelWidth:]
  -[MPDetailSlider detailScrubbingVerticalRange]
  -[MPDetailSlider setDetailScrubbingVerticalRange:]
  -[MPDetailSlider availableDuration]
  -[MPDetailSlider timeLabelStyle]
  -[MPDetailSlider minTimeLabelWidth]
  -[MPDetailSlider trackRectForBounds:]
  -[MPDetailSlider isTracking]
  -[MPDetailSlider setValue:]
  -[MPDetailSlider initWithFrame:]
  -[MPDetailSlider currentThumbImage]
  -[MPDetailSlider delegate]
  -[MPDetailSlider cancelTrackingWithEvent:]
  -[MPDetailSlider dealloc]
  -[MPDetailSlider endTrackingWithTouch:withEvent:]
  -[MPDetailSlider _thumbHitEdgeInsets]
  -[MPDetailSlider setBounds:]
  -[MPDetailSlider beginTrackingWithTouch:withEvent:]
  -[MPDetailSlider duration]


MPMusicPlayerApplicationController : MPMusicPlayerController
 @property  NSXPCConnection *serviceConnection

  // instance methods
  -[MPMusicPlayerApplicationController _clearConnection]
  -[MPMusicPlayerApplicationController setShuffleMode:]
  -[MPMusicPlayerApplicationController beginPlaybackAtHostTime:]
  -[MPMusicPlayerApplicationController shuffleMode]
  -[MPMusicPlayerApplicationController setDisableAutomaticCanBeNowPlaying:]
  -[MPMusicPlayerApplicationController .cxx_destruct]
  -[MPMusicPlayerApplicationController initWithClientIdentifier:queue:]
  -[MPMusicPlayerApplicationController setQueueWithDescriptor:]
  -[MPMusicPlayerApplicationController _establishConnectionIfNeeded]
  -[MPMusicPlayerApplicationController beginGeneratingPlaybackNotifications]
  -[MPMusicPlayerApplicationController endGeneratingPlaybackNotifications]
  -[MPMusicPlayerApplicationController onApplicationServer:]
  -[MPMusicPlayerApplicationController onApplicationServerAsync:errorHandler:]
  -[MPMusicPlayerApplicationController _mediaItemsForContentItemIDs:]
  -[MPMusicPlayerApplicationController performQueueTransaction:completionHandler:]
  -[MPMusicPlayerApplicationController serviceConnection]
  -[MPMusicPlayerApplicationController repeatMode]
  -[MPMusicPlayerApplicationController setRelativeVolume:]
  -[MPMusicPlayerApplicationController dealloc]
  -[MPMusicPlayerApplicationController prerollWithCompletion:]
  -[MPMusicPlayerApplicationController setRepeatMode:]


_MPMusicPlayerQueueItemsProxy : NSArray
 @property  MPMusicPlayerApplicationController *controller

  // instance methods
  -[_MPMusicPlayerQueueItemsProxy controller]
  -[_MPMusicPlayerQueueItemsProxy .cxx_destruct]
  -[_MPMusicPlayerQueueItemsProxy count]
  -[_MPMusicPlayerQueueItemsProxy initWithController:]
  -[_MPMusicPlayerQueueItemsProxy objectAtIndex:]
  -[_MPMusicPlayerQueueItemsProxy mutableCopyWithZone:]
  -[_MPMusicPlayerQueueItemsProxy copyWithZone:]


MPMusicPlayerControllerQueue : NSObject
 @property  NSArray *items

  // instance methods
  -[MPMusicPlayerControllerQueue items]
  -[MPMusicPlayerControllerQueue .cxx_destruct]
  -[MPMusicPlayerControllerQueue initWithController:]
  -[MPMusicPlayerControllerQueue fault]


MPMusicPlayerControllerMutableQueue : MPMusicPlayerControllerQueue
 @property  NSMutableDictionary *insertedDescriptors
 @property  NSMutableArray *removedItems
 @property  MPMusicPlayerControllerApplicationQueueModifications *modifications

  // instance methods
  -[MPMusicPlayerControllerMutableQueue removeItem:]
  -[MPMusicPlayerControllerMutableQueue .cxx_destruct]
  -[MPMusicPlayerControllerMutableQueue insertedDescriptors]
  -[MPMusicPlayerControllerMutableQueue initWithController:]
  -[MPMusicPlayerControllerMutableQueue modifications]
  -[MPMusicPlayerControllerMutableQueue _removeItemWithIdentifier:]
  -[MPMusicPlayerControllerMutableQueue _insertQueueDescriptor:afterItemWithIdentifier:]
  -[MPMusicPlayerControllerMutableQueue insertQueueDescriptor:afterItem:]
  -[MPMusicPlayerControllerMutableQueue setInsertedDescriptors:]
  -[MPMusicPlayerControllerMutableQueue setRemovedItems:]
  -[MPMusicPlayerControllerMutableQueue removedItems]


MPPlayableContentManager : NSObject <CARSessionObserving>
 @property  MPPlayableContentManagerContext *context
 @property  <MPPlayableContentDataSource> *dataSource
 @property  <MPPlayableContentDelegate> *delegate
 @property  NSArray *nowPlayingIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPPlayableContentManager _deviceIsCarplayCapable]
  +[MPPlayableContentManager sharedContentManager]

  // instance methods
  -[MPPlayableContentManager sessionDidDisconnect:]
  -[MPPlayableContentManager setDataSource:]
  -[MPPlayableContentManager sessionDidConnect:]
  -[MPPlayableContentManager .cxx_destruct]
  -[MPPlayableContentManager setDelegate:]
  -[MPPlayableContentManager dataSource]
  -[MPPlayableContentManager init]
  -[MPPlayableContentManager _musicListsLimited]
  -[MPPlayableContentManager _tearDownMediaRemoteEndpoint]
  -[MPPlayableContentManager _scheduleUpdateSupportedAPIs]
  -[MPPlayableContentManager _pushContentItemsUpdate]
  -[MPPlayableContentManager _onQueueContentItemWasSentToMediaRemote:]
  -[MPPlayableContentManager _areContentLimitsEnforced]
  -[MPPlayableContentManager _setupMediaRemoteEndpoint]
  -[MPPlayableContentManager _limitedUIChanged:]
  -[MPPlayableContentManager _browsableContentEndpointChanged:]
  -[MPPlayableContentManager _updateSupportedAPIs]
  -[MPPlayableContentManager setNowPlayingIdentifiers:]
  -[MPPlayableContentManager _enqueueArtworkUpdate:withCompletion:]
  -[MPPlayableContentManager _enqueueArtworkUpdate:size:withCompletion:]
  -[MPPlayableContentManager _handlePlaybackInitializationCompletedWithContext:error:]
  -[MPPlayableContentManager _contentItemWasSentToMediaRemote:]
  -[MPPlayableContentManager _markContentItemsAsSentToMediaRemote:]
  -[MPPlayableContentManager nowPlayingIdentifiers]
  -[MPPlayableContentManager _contentItemChangedNotification:]
  -[MPPlayableContentManager _tearDownNotifications]
  -[MPPlayableContentManager _setupNotifications]
  -[MPPlayableContentManager delegate]
  -[MPPlayableContentManager _init]
  -[MPPlayableContentManager setContext:]
  -[MPPlayableContentManager dealloc]
  -[MPPlayableContentManager reloadData]
  -[MPPlayableContentManager endUpdates]
  -[MPPlayableContentManager beginUpdates]
  -[MPPlayableContentManager context]


MPPlayableContentCallbackContext : NSObject
 @property  NSIndexPath *indexPath
 @property  BOOL serviced

  // instance methods
  -[MPPlayableContentCallbackContext serviced]
  -[MPPlayableContentCallbackContext .cxx_destruct]
  -[MPPlayableContentCallbackContext setServiced:]
  -[MPPlayableContentCallbackContext indexPath]
  -[MPPlayableContentCallbackContext initWithIndexPath:]


MPStoreLyricsResponse : NSObject
 @property  BOOL TTML
 @property  NSString *lyricsContent
 @property  NSString *lyricsID

  // instance methods
  -[MPStoreLyricsResponse isTTML]
  -[MPStoreLyricsResponse .cxx_destruct]
  -[MPStoreLyricsResponse setLyricsContent:]
  -[MPStoreLyricsResponse lyricsID]
  -[MPStoreLyricsResponse setTTML:]
  -[MPStoreLyricsResponse setLyricsID:]
  -[MPStoreLyricsResponse lyricsContent]


MPStoreLyricsRequestOperation : MPAsyncOperation
 @property  long long songAdamID
 @property  @? responseHandler

  // class methods
  +[MPStoreLyricsRequestOperation _lyricsURLForURLBag:]
  +[MPStoreLyricsRequestOperation supportsLyricsForURLBag:]

  // instance methods
  -[MPStoreLyricsRequestOperation .cxx_destruct]
  -[MPStoreLyricsRequestOperation responseHandler]
  -[MPStoreLyricsRequestOperation songAdamID]
  -[MPStoreLyricsRequestOperation setResponseHandler:]
  -[MPStoreLyricsRequestOperation init]
  -[MPStoreLyricsRequestOperation execute]
  -[MPStoreLyricsRequestOperation _enqueueOperationWithURL:storeURLBag:allowingAuthentication:]
  -[MPStoreLyricsRequestOperation cancel]
  -[MPStoreLyricsRequestOperation setSongAdamID:]
  -[MPStoreLyricsRequestOperation finishWithError:]


MPModelRecentlyPlayedResponse : MPModelResponse

MPMediaAPIParserLayer : NSObject
 @property  NSString *key
 @property  unsigned long type

  // class methods
  +[MPMediaAPIParserLayer layerWithKey:ofType:]
  +[MPMediaAPIParserLayer layerWithFirstObjectOfType:]

  // instance methods
  -[MPMediaAPIParserLayer setKey:]
  -[MPMediaAPIParserLayer setType:]
  -[MPMediaAPIParserLayer .cxx_destruct]
  -[MPMediaAPIParserLayer type]
  -[MPMediaAPIParserLayer key]


MPAudioDeviceController : NSObject
 @property  id delegate

  // instance methods
  -[MPAudioDeviceController .cxx_destruct]
  -[MPAudioDeviceController setDelegate:]
  -[MPAudioDeviceController wirelessRouteIsPicked]
  -[MPAudioDeviceController delegate]


_MPLazySectionedCollectionStorage : NSObject <NSObject>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPLazySectionedCollectionStorage .cxx_construct]
  -[_MPLazySectionedCollectionStorage .cxx_destruct]
  -[_MPLazySectionedCollectionStorage _stateDumpObject]


MPLazySectionedCollection : MPSectionedCollection
 @property  <MPLazySectionedCollectionDataSource> *dataSource

  // class methods
  +[MPLazySectionedCollection supportsSecureCoding]

  // instance methods
  -[MPLazySectionedCollection initWithDataSource:]
  -[MPLazySectionedCollection lastItem]
  -[MPLazySectionedCollection sectionAtIndex:]
  -[MPLazySectionedCollection firstItem]
  -[MPLazySectionedCollection numberOfItemsInSection:]
  -[MPLazySectionedCollection enumerateSectionsUsingBlock:]
  -[MPLazySectionedCollection hasSameContentAsSectionedCollection:]
  -[MPLazySectionedCollection setDataSource:]
  -[MPLazySectionedCollection enumerateItemsUsingBlock:]
  -[MPLazySectionedCollection numberOfSections]
  -[MPLazySectionedCollection .cxx_destruct]
  -[MPLazySectionedCollection _safeStateDumpObject]
  -[MPLazySectionedCollection itemsInSectionAtIndex:]
  -[MPLazySectionedCollection identifiersForItemAtIndexPath:]
  -[MPLazySectionedCollection dataSource]
  -[MPLazySectionedCollection enumerateItemsInSectionAtIndex:usingBlock:]
  -[MPLazySectionedCollection allItems]
  -[MPLazySectionedCollection _updateCacheWithObject:atIndexPath:]
  -[MPLazySectionedCollection itemAtIndexPath:]
  -[MPLazySectionedCollection dealloc]
  -[MPLazySectionedCollection identifiersForSectionAtIndex:]
  -[MPLazySectionedCollection indexPathForItemWithIdentifiersIntersectingSet:]
  -[MPLazySectionedCollection lastSection]
  -[MPLazySectionedCollection allSections]
  -[MPLazySectionedCollection _cachedObjectAtIndexPath:]
  -[MPLazySectionedCollection firstSection]


MPMediaAPICollectionItemMetadataResponse : NSObject
 @property  BOOL isFinalResponse
 @property  double playbackAuthorizationTokenHalfLifeExpiration
 @property  NSDictionary *response
 @property  NSArray *failedItemIdentifiers

  // instance methods
  -[MPMediaAPICollectionItemMetadataResponse initWithMediaAPICollectionItemMetadataResponse:authorizationTokenHalfLifeDuration:failedItemIdentifiers:isFinalResponse:]
  -[MPMediaAPICollectionItemMetadataResponse .cxx_destruct]
  -[MPMediaAPICollectionItemMetadataResponse failedItemIdentifiers]
  -[MPMediaAPICollectionItemMetadataResponse playbackAuthorizationTokenHalfLifeExpiration]
  -[MPMediaAPICollectionItemMetadataResponse isFinalResponse]
  -[MPMediaAPICollectionItemMetadataResponse response]


MPModelStaticAssetKind : MPModelKind
  // class methods
  +[MPModelStaticAssetKind identityKind]

  // instance methods
  -[MPModelStaticAssetKind humanDescription]


MPModelStaticAsset : MPModelObject
 @property  double duration
 @property  long long flavorType
 @property  long long mediaType
 @property  NSURL *url

  // class methods
  +[MPModelStaticAsset __url_KEY]
  +[MPModelStaticAsset __flavorType_KEY]
  +[MPModelStaticAsset __mediaType_KEY]
  +[MPModelStaticAsset __duration_KEY]


MPAVRoutingViewController : UIViewController <CARSessionObserving, UITableViewDataSource, UITableViewDelegate, MPAVRoutingControllerDelegate, MPAVRoutingTableViewCellDelegate>
 @property  BOOL inCarPlay
 @property  <MPAVRoutingViewControllerThemeDelegate> *themeDelegate
 @property  MPAVRoutingController *_routingController
 @property  MPAVEndpointRoute *endpointRoute
 @property  UITableView *_tableView
 @property  double _normalCellHeight
 @property  double _expandedCellHeight
 @property  double continuousCornerRadius
 @property  UIColor *_tableCellsBackgroundColor
 @property  UIColor *_tableCellsContentColor
 @property  BOOL _shouldAutomaticallyUpdateRoutesList
 @property  BOOL _shouldPickRouteOnSelection
 @property  NSMapTable *outputDeviceVolumeSliders
 @property  MPVolumeGroupSliderCoordinator *groupSliderCoordinator
 @property  BOOL sortByIsVideoRoute
 @property  unsigned long style
 @property  <MPAVRoutingViewControllerDelegate> *delegate
 @property  long long avItemType
 @property  unsigned long mirroringStyle
 @property  unsigned long iconStyle
 @property  BOOL allowMirroring
 @property  NSNumber *discoveryModeOverride
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVRoutingViewController sessionDidDisconnect:]
  -[MPAVRoutingViewController groupSliderCoordinator]
  -[MPAVRoutingViewController _collapseAllGroups]
  -[MPAVRoutingViewController setGroupSliderCoordinator:]
  -[MPAVRoutingViewController _unregisterNotifications]
  -[MPAVRoutingViewController tableView:willDisplayCell:forRowAtIndexPath:]
  -[MPAVRoutingViewController preferredContentSize]
  -[MPAVRoutingViewController groupUIDForRoute:]
  -[MPAVRoutingViewController viewWillLayoutSubviews]
  -[MPAVRoutingViewController setSortByIsVideoRoute:]
  -[MPAVRoutingViewController tableView:viewForHeaderInSection:]
  -[MPAVRoutingViewController _setNeedsDisplayedRoutesUpdate]
  -[MPAVRoutingViewController sortByIsVideoRoute]
  -[MPAVRoutingViewController _displayAsPickedRoutesInRoutes:]
  -[MPAVRoutingViewController tableView:heightForHeaderInSection:]
  -[MPAVRoutingViewController routingController:pickedRoutesDidChange:]
  -[MPAVRoutingViewController numberOfSectionsInTableView:]
  -[MPAVRoutingViewController _applicationWillEnterForegroundNotification:]
  -[MPAVRoutingViewController enqueueRefreshUpdate]
  -[MPAVRoutingViewController _routingController]
  -[MPAVRoutingViewController tableView:numberOfRowsInSection:]
  -[MPAVRoutingViewController _setContinuousCornerRadius:]
  -[MPAVRoutingViewController sessionDidConnect:]
  -[MPAVRoutingViewController tableView:titleForHeaderInSection:]
  -[MPAVRoutingViewController outputDeviceVolumeSliders]
  -[MPAVRoutingViewController tableView:heightForRowAtIndexPath:]
  -[MPAVRoutingViewController updateExpandedGroups]
  -[MPAVRoutingViewController .cxx_destruct]
  -[MPAVRoutingViewController setOutputDeviceVolumeSliders:]
  -[MPAVRoutingViewController tableView:didSelectRowAtIndexPath:]
  -[MPAVRoutingViewController viewDidLoad]
  -[MPAVRoutingViewController _setNeedsRouteDiscoveryModeUpdate]
  -[MPAVRoutingViewController _enqueueUpdate:]
  -[MPAVRoutingViewController tableView:cellForRowAtIndexPath:]
  -[MPAVRoutingViewController routingController:didFailToPickRouteWithError:]
  -[MPAVRoutingViewController setDelegate:]
  -[MPAVRoutingViewController viewDidAppear:]
  -[MPAVRoutingViewController initWithNibName:bundle:]
  -[MPAVRoutingViewController _setupUpdateTimerIfNecessary]
  -[MPAVRoutingViewController _updateDisplayedRoutes]
  -[MPAVRoutingViewController _tableView]
  -[MPAVRoutingViewController avItemType]
  -[MPAVRoutingViewController _continuousCornerRadius]
  -[MPAVRoutingViewController _endUpdates]
  -[MPAVRoutingViewController _stateDumpObject]
  -[MPAVRoutingViewController _registerCarPlayObserver]
  -[MPAVRoutingViewController _initWithStyle:routingController:]
  -[MPAVRoutingViewController registerTableViewCells]
  -[MPAVRoutingViewController _setTableCellsContentColor:]
  -[MPAVRoutingViewController _endRouteDiscovery]
  -[MPAVRoutingViewController _beginRouteDiscovery]
  -[MPAVRoutingViewController shouldOverrideContentSizeCategory:]
  -[MPAVRoutingViewController _tableViewHeightAccordingToDataSource]
  -[MPAVRoutingViewController _configureCell:forIndexPath:]
  -[MPAVRoutingViewController themeDelegate]
  -[MPAVRoutingViewController _normalCellHeight]
  -[MPAVRoutingViewController _tableViewHeaderViewHeight]
  -[MPAVRoutingViewController _tableViewFooterViewHeight]
  -[MPAVRoutingViewController _setRouteDiscoveryMode:]
  -[MPAVRoutingViewController _shouldDisplayRouteAsPicked:]
  -[MPAVRoutingViewController _createVolumeSlider]
  -[MPAVRoutingViewController shouldGroupRoutingViewItems]
  -[MPAVRoutingViewController _volumeCapableRoutesInRoutes:]
  -[MPAVRoutingViewController routingCell:mirroringSwitchValueDidChange:]
  -[MPAVRoutingViewController initWithStyle:routingController:]
  -[MPAVRoutingViewController setAVItemType:]
  -[MPAVRoutingViewController allowMirroring]
  -[MPAVRoutingViewController setAllowMirroring:]
  -[MPAVRoutingViewController setDiscoveryModeOverride:]
  -[MPAVRoutingViewController resetScrollPosition]
  -[MPAVRoutingViewController _expandedCellHeight]
  -[MPAVRoutingViewController _tableCellsBackgroundColor]
  -[MPAVRoutingViewController _tableCellsContentColor]
  -[MPAVRoutingViewController _setShouldPickRouteOnSelection:]
  -[MPAVRoutingViewController _setShouldAutomaticallyUpdateRoutesList:]
  -[MPAVRoutingViewController _setTableCellsBackgroundColor:]
  -[MPAVRoutingViewController _shouldPickRouteOnSelection]
  -[MPAVRoutingViewController _createSectionedCollection:withPickedRoutes:]
  -[MPAVRoutingViewController _shouldAutomaticallyUpdateRoutesList]
  -[MPAVRoutingViewController discoveryModeOverride]
  -[MPAVRoutingViewController setThemeDelegate:]
  -[MPAVRoutingViewController _applicationDidEnterBackgroundNotification:]
  -[MPAVRoutingViewController iconStyle]
  -[MPAVRoutingViewController isInCarPlay]
  -[MPAVRoutingViewController initWithStyle:]
  -[MPAVRoutingViewController _displayableRoutesInRoutes:]
  -[MPAVRoutingViewController _applyUpdate:]
  -[MPAVRoutingViewController setIconStyle:]
  -[MPAVRoutingViewController setMirroringStyle:]
  -[MPAVRoutingViewController mirroringStyle]
  -[MPAVRoutingViewController endpointGroupUID]
  -[MPAVRoutingViewController _operationRequiresOptimisticState:routes:]
  -[MPAVRoutingViewController viewWillAppear:]
  -[MPAVRoutingViewController _diplayShareAudioDisabledAlertForReason:]
  -[MPAVRoutingViewController setOptimisticUpdate:]
  -[MPAVRoutingViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[MPAVRoutingViewController routingControllerAvailableRoutesDidChange:]
  -[MPAVRoutingViewController routingCellDidTapToExpand:]
  -[MPAVRoutingViewController delegate]
  -[MPAVRoutingViewController _wouldShareAudioForPickedRoute:operation:pickedRoutes:]
  -[MPAVRoutingViewController _createRefreshUpdate]
  -[MPAVRoutingViewController endpointRoute]
  -[MPAVRoutingViewController hasCarKitRoute]
  -[MPAVRoutingViewController resetDisplayedRoutes]
  -[MPAVRoutingViewController _createRoutingViewItemsForRoutes:]
  -[MPAVRoutingViewController dealloc]
  -[MPAVRoutingViewController _createReloadUpdate]
  -[MPAVRoutingViewController isInVehicle]
  -[MPAVRoutingViewController routingController:shouldHijackRoute:alertStyle:busyRouteName:presentingAppName:completion:]
  -[MPAVRoutingViewController _volumeSliderVolumeControlAvailabilityDidChangeNotification:]
  -[MPAVRoutingViewController style]
  -[MPAVRoutingViewController viewDidDisappear:]
  -[MPAVRoutingViewController _createUpdateWithCompletion:]
  -[MPAVRoutingViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[MPAVRoutingViewController _registerNotifications]
  -[MPAVRoutingViewController setEndpointRoute:]


MPAVRoutingViewControllerItems : NSObject
 @property  NSDictionary *routeGrouping
 @property  NSArray *localDevices
 @property  NSArray *headphones
 @property  NSArray *speakersAndTVs

  // instance methods
  -[MPAVRoutingViewControllerItems setRouteGrouping:]
  -[MPAVRoutingViewControllerItems .cxx_destruct]
  -[MPAVRoutingViewControllerItems setSpeakersAndTVs:]
  -[MPAVRoutingViewControllerItems setHeadphones:]
  -[MPAVRoutingViewControllerItems setLocalDevices:]
  -[MPAVRoutingViewControllerItems localDevices]
  -[MPAVRoutingViewControllerItems routeGrouping]
  -[MPAVRoutingViewControllerItems headphones]
  -[MPAVRoutingViewControllerItems speakersAndTVs]


MPAVRoutingViewControllerUpdate : NSObject
 @property  NSArray *pickedRoutes
 @property  NSArray *pendingPickedRoutes
 @property  NSArray *displayableAvailableRoutes
 @property  NSArray *displayAsPickedRoutes
 @property  NSArray *volumeCapableRoutes
 @property  NSDictionary *routeGrouping
 @property  BOOL canGroup
 @property  BOOL hasPendingPickedRoutes
 @property  BOOL shouldReload

  // instance methods
  -[MPAVRoutingViewControllerUpdate canGroup]
  -[MPAVRoutingViewControllerUpdate setRouteGrouping:]
  -[MPAVRoutingViewControllerUpdate .cxx_destruct]
  -[MPAVRoutingViewControllerUpdate displayAsPickedRoutes]
  -[MPAVRoutingViewControllerUpdate displayableAvailableRoutes]
  -[MPAVRoutingViewControllerUpdate setCanGroup:]
  -[MPAVRoutingViewControllerUpdate pendingPickedRoutes]
  -[MPAVRoutingViewControllerUpdate setDisplayableAvailableRoutes:]
  -[MPAVRoutingViewControllerUpdate routeGrouping]
  -[MPAVRoutingViewControllerUpdate setDisplayAsPickedRoutes:]
  -[MPAVRoutingViewControllerUpdate hasPendingPickedRoutes]
  -[MPAVRoutingViewControllerUpdate setHasPendingPickedRoutes:]
  -[MPAVRoutingViewControllerUpdate setPendingPickedRoutes:]
  -[MPAVRoutingViewControllerUpdate pickedRoutes]
  -[MPAVRoutingViewControllerUpdate setPickedRoutes:]
  -[MPAVRoutingViewControllerUpdate shouldReload]
  -[MPAVRoutingViewControllerUpdate setShouldReload:]
  -[MPAVRoutingViewControllerUpdate setVolumeCapableRoutes:]
  -[MPAVRoutingViewControllerUpdate volumeCapableRoutes]


MPStoreModelSongBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelSongBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelSongBuilder .cxx_destruct]
  -[MPStoreModelSongBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPRemoteRadioController : NSObject <MPServiceRadioController, NSXPCListenerDelegate>
 @property  RadioAvailabilityController *availabilityController
 @property  RadioRecentStationsController *recentStationsController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPRemoteRadioController _removeConnection:]
  -[MPRemoteRadioController _radioAvailabilityControllerRadioAvailableDidChangeNotification:]
  -[MPRemoteRadioController serviceRadioControllerGetRecentStationGroupsWithCompletionHandler:]
  -[MPRemoteRadioController .cxx_destruct]
  -[MPRemoteRadioController serviceRadioControllerGetRadioAvailabilityWithCompletionHandler:]
  -[MPRemoteRadioController init]
  -[MPRemoteRadioController _playActivityReportingControllerDidFlushEventsNotification:]
  -[MPRemoteRadioController availabilityController]
  -[MPRemoteRadioController _recentStationsControllerDidChangeStationsNotification:]
  -[MPRemoteRadioController _addConnection:]
  -[MPRemoteRadioController start]
  -[MPRemoteRadioController dealloc]
  -[MPRemoteRadioController listener:shouldAcceptNewConnection:]
  -[MPRemoteRadioController recentStationsController]
  -[MPRemoteRadioController _handleRecentStationsControllerDidChange]


MPModelObjectMediaItem : MPNondurableMediaItem
 @property  MPModelObject *modelObject
 @property  @? fallbackArtworkCatalogBlock

  // class methods
  +[MPModelObjectMediaItem supportsSecureCoding]

  // instance methods
  -[MPModelObjectMediaItem initWithCoder:]
  -[MPModelObjectMediaItem valueForProperty:]
  -[MPModelObjectMediaItem initWithPersistentID:]
  -[MPModelObjectMediaItem .cxx_destruct]
  -[MPModelObjectMediaItem persistentID]
  -[MPModelObjectMediaItem setFallbackArtworkCatalogBlock:]
  -[MPModelObjectMediaItem initWithModelObject:]
  -[MPModelObjectMediaItem isEqual:]
  -[MPModelObjectMediaItem fallbackArtworkCatalogBlock]
  -[MPModelObjectMediaItem encodeWithCoder:]
  -[MPModelObjectMediaItem modelObject]


MPStoreItemMetadataCache : NSObject
 @property  long long count

  // instance methods
  -[MPStoreItemMetadataCache addMetadata:forItemIdentifier:]
  -[MPStoreItemMetadataCache initWithCacheSize:]
  -[MPStoreItemMetadataCache .cxx_destruct]
  -[MPStoreItemMetadataCache metadataForItemIdentifier:]
  -[MPStoreItemMetadataCache count]
  -[MPStoreItemMetadataCache removeExpiredMetadata]
  -[MPStoreItemMetadataCache metadataForItemIdentifier:ignoreExpiration:]


MPNowPlayingInfoLyricsItemToken : NSObject
 @property  ^v mediaRemoteLyricsItemToken
 @property  NSString *identifier
 @property  NSDictionary *userInfo

  // instance methods
  -[MPNowPlayingInfoLyricsItemToken identifier]
  -[MPNowPlayingInfoLyricsItemToken initWithIdentifier:userInfo:]
  -[MPNowPlayingInfoLyricsItemToken initWithMediaRemoteLyricsItemToken:]
  -[MPNowPlayingInfoLyricsItemToken mediaRemoteLyricsItemToken]
  -[MPNowPlayingInfoLyricsItemToken userInfo]
  -[MPNowPlayingInfoLyricsItemToken dealloc]


MPNowPlayingInfoLyricsItem : NSObject
 @property  ^v mediaRemoteLyricsItem
 @property  MPNowPlayingInfoLyricsItemToken *token
 @property  NSString *lyrics
 @property  BOOL userProvided

  // instance methods
  -[MPNowPlayingInfoLyricsItem lyrics]
  -[MPNowPlayingInfoLyricsItem initWithLyrics:userProvided:]
  -[MPNowPlayingInfoLyricsItem userProvided]
  -[MPNowPlayingInfoLyricsItem mediaRemoteLyricsItem]
  -[MPNowPlayingInfoLyricsItem initWithLyrics:userProvided:token:]
  -[MPNowPlayingInfoLyricsItem initWithMediaRemoteLyricsItem:]
  -[MPNowPlayingInfoLyricsItem token]
  -[MPNowPlayingInfoLyricsItem dealloc]


MPNowPlayingInfoLyricsEvent : NSObject
 @property  ^v mediaRemoteLyricsEvent
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  MPNowPlayingInfoLyricsItemToken *token

  // instance methods
  -[MPNowPlayingInfoLyricsEvent initWithMediaRemoteLyricsEvent:]
  -[MPNowPlayingInfoLyricsEvent mediaRemoteLyricsEvent]
  -[MPNowPlayingInfoLyricsEvent token]
  -[MPNowPlayingInfoLyricsEvent startDate]
  -[MPNowPlayingInfoLyricsEvent dealloc]
  -[MPNowPlayingInfoLyricsEvent endDate]


MPStoreSocialFollowOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialFollowOperationDataSource queryItems]
  -[MPStoreSocialFollowOperationDataSource .cxx_destruct]
  -[MPStoreSocialFollowOperationDataSource setPerson:]
  -[MPStoreSocialFollowOperationDataSource httpBody]
  -[MPStoreSocialFollowOperationDataSource person]
  -[MPStoreSocialFollowOperationDataSource httpBodyType]
  -[MPStoreSocialFollowOperationDataSource bagKey]
  -[MPStoreSocialFollowOperationDataSource httpMethod]


MPAVAuxiliaryDevice : NSObject
 @property  NSString *uniqueID
 @property  NSString *productName
 @property  NSString *deviceName
 @property  NSString *modelIdentifier
 @property  BOOL playing

  // class methods
  +[MPAVAuxiliaryDevice otherConnectedDevicesFromRouteDescription:]

  // instance methods
  -[MPAVAuxiliaryDevice modelIdentifier]
  -[MPAVAuxiliaryDevice productName]
  -[MPAVAuxiliaryDevice isPlaying]
  -[MPAVAuxiliaryDevice uniqueID]
  -[MPAVAuxiliaryDevice deviceName]
  -[MPAVAuxiliaryDevice .cxx_destruct]
  -[MPAVAuxiliaryDevice initWithDictionary:]


_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  NSString *imageArtworkIdentifier
 @property  NSString *videoArtworkIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier stringRepresentation]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier .cxx_destruct]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier setImageArtworkIdentifier:]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier setVideoArtworkIdentifier:]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier imageArtworkIdentifier]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier videoArtworkIdentifier]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier isEqual:]
  -[_MPAbstractNetworkArtworkDataSourceVisualIdenticalityIdentifier copyWithZone:]


MPAbstractNetworkArtworkDataSource : NSObject <NSURLSessionDataDelegate, AVAssetResourceLoaderDelegate, MPArtworkDataSource>
 @property  NSObject<OS_dispatch_queue> *imageAccessQueue
 @property  NSObject<OS_dispatch_queue> *videoAccessQueue
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSCache *fallbackImageArtworkRepresentationCache
 @property  NSMutableDictionary *pendingRequestURLToCompletionHandlers
 @property  NSMapTable *catalogImageTaskMap
 @property  NSMapTable *resourceLoaderStoragePolicyMap
 @property  NSMutableDictionary *videoTaskToCacheStoragePolicy
 @property  NSMutableDictionary *videoTaskToResourceLoadingRequest
 @property  NSMutableDictionary *videoTaskToData
 @property  NSURLSession *imageURLSession
 @property  NSURLSession *videoURLSession
 @property  NSURLCache *videoURLCache
 @property  <NSURLSessionDataDelegate> *URLSessionDataDelegateProxy
 @property  NSURLSessionConfiguration *URLSessionConfiguration
 @property  BOOL usesFallbackCache
 @property  NSURL *videoArtworkCacheURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPAbstractNetworkArtworkDataSource _applyImageURLCachePolicy:cacheDiskPath:toConfiguration:]
  +[MPAbstractNetworkArtworkDataSource _applyVideoCacheURL:toConfiguration:]

  // instance methods
  -[MPAbstractNetworkArtworkDataSource URLSession:dataTask:didReceiveResponse:completionHandler:]
  -[MPAbstractNetworkArtworkDataSource requestForCatalog:kind:size:]
  -[MPAbstractNetworkArtworkDataSource wantsBackgroundImageDecompression]
  -[MPAbstractNetworkArtworkDataSource .cxx_destruct]
  -[MPAbstractNetworkArtworkDataSource URLSession:dataTask:willCacheResponse:completionHandler:]
  -[MPAbstractNetworkArtworkDataSource callbackQueue]
  -[MPAbstractNetworkArtworkDataSource existingArtworkEffectResultForEffectType:catalog:options:]
  -[MPAbstractNetworkArtworkDataSource _didReceiveMemoryWarningNotification:]
  -[MPAbstractNetworkArtworkDataSource init]
  -[MPAbstractNetworkArtworkDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[MPAbstractNetworkArtworkDataSource URLSession:dataTask:didReceiveData:]
  -[MPAbstractNetworkArtworkDataSource respondsToSelector:]
  -[MPAbstractNetworkArtworkDataSource setCallbackQueue:]
  -[MPAbstractNetworkArtworkDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPAbstractNetworkArtworkDataSource areRepresentationsOfKind:availableForCatalog:]
  -[MPAbstractNetworkArtworkDataSource sortedSupportedSizesForCatalog:]
  -[MPAbstractNetworkArtworkDataSource URLSession:task:didCompleteWithError:]
  -[MPAbstractNetworkArtworkDataSource cacheKeyForCatalog:size:]
  -[MPAbstractNetworkArtworkDataSource _subclassImplementsSelector:]
  -[MPAbstractNetworkArtworkDataSource _didReceiveWillEnterForegroundNotification:]
  -[MPAbstractNetworkArtworkDataSource imageURLSession]
  -[MPAbstractNetworkArtworkDataSource videoArtworkCacheURL]
  -[MPAbstractNetworkArtworkDataSource videoURLSession]
  -[MPAbstractNetworkArtworkDataSource setVideoURLCache:]
  -[MPAbstractNetworkArtworkDataSource setVideoURLSession:]
  -[MPAbstractNetworkArtworkDataSource _bestAvailableSizeForCatalog:kind:]
  -[MPAbstractNetworkArtworkDataSource catalogImageTaskMap]
  -[MPAbstractNetworkArtworkDataSource _performSyncBlockOnQueue:block:]
  -[MPAbstractNetworkArtworkDataSource _requestForCatalog:kind:size:]
  -[MPAbstractNetworkArtworkDataSource fallbackImageArtworkRepresentationCache]
  -[MPAbstractNetworkArtworkDataSource _cacheKeyForCatalog:kind:size:]
  -[MPAbstractNetworkArtworkDataSource _existingRepresentativeObjectForArtworkCatalog:kind:handler:]
  -[MPAbstractNetworkArtworkDataSource _bestVideoArtworkRepresentationForCatalog:]
  -[MPAbstractNetworkArtworkDataSource pendingRequestURLToCompletionHandlers]
  -[MPAbstractNetworkArtworkDataSource videoTaskToData]
  -[MPAbstractNetworkArtworkDataSource _existingRepresentationFromURLCacheForArtworkCatalog:immediateImageDecompressionAllowed:]
  -[MPAbstractNetworkArtworkDataSource videoURLCache]
  -[MPAbstractNetworkArtworkDataSource _artworkRepresentationWithImageFromData:forURLResponse:catalog:size:immediateImageDecompressionAllowed:]
  -[MPAbstractNetworkArtworkDataSource _performAsyncBarrierBlockOnQueue:block:]
  -[MPAbstractNetworkArtworkDataSource videoAccessQueue]
  -[MPAbstractNetworkArtworkDataSource videoTaskToCacheStoragePolicy]
  -[MPAbstractNetworkArtworkDataSource videoTaskToResourceLoadingRequest]
  -[MPAbstractNetworkArtworkDataSource resourceLoaderStoragePolicyMap]
  -[MPAbstractNetworkArtworkDataSource _isRepresentationSize:validForCatalog:]
  -[MPAbstractNetworkArtworkDataSource setVideoArtworkCacheURL:]
  -[MPAbstractNetworkArtworkDataSource shouldLookForLargerImageRepresentationsWhenBestRepresentationIsUnavailable]
  -[MPAbstractNetworkArtworkDataSource requestForCatalog:size:]
  -[MPAbstractNetworkArtworkDataSource resourceLoader:didCancelLoadingRequest:]
  -[MPAbstractNetworkArtworkDataSource URLSessionConfiguration]
  -[MPAbstractNetworkArtworkDataSource imageAccessQueue]
  -[MPAbstractNetworkArtworkDataSource updateURLSessionWithCachePolicy:cachePath:]
  -[MPAbstractNetworkArtworkDataSource setImageAccessQueue:]
  -[MPAbstractNetworkArtworkDataSource setVideoAccessQueue:]
  -[MPAbstractNetworkArtworkDataSource setFallbackImageArtworkRepresentationCache:]
  -[MPAbstractNetworkArtworkDataSource setPendingRequestURLToCompletionHandlers:]
  -[MPAbstractNetworkArtworkDataSource setCatalogImageTaskMap:]
  -[MPAbstractNetworkArtworkDataSource setResourceLoaderStoragePolicyMap:]
  -[MPAbstractNetworkArtworkDataSource setVideoTaskToCacheStoragePolicy:]
  -[MPAbstractNetworkArtworkDataSource setVideoTaskToResourceLoadingRequest:]
  -[MPAbstractNetworkArtworkDataSource setVideoTaskToData:]
  -[MPAbstractNetworkArtworkDataSource setImageURLSession:]
  -[MPAbstractNetworkArtworkDataSource URLSessionDataDelegateProxy]
  -[MPAbstractNetworkArtworkDataSource setURLSessionDataDelegateProxy:]
  -[MPAbstractNetworkArtworkDataSource cacheKeyForCatalog:kind:size:]
  -[MPAbstractNetworkArtworkDataSource existingRepresentationOfKind:forArtworkCatalog:]
  -[MPAbstractNetworkArtworkDataSource loadRepresentationOfKind:forArtworkCatalog:completionHandler:]
  -[MPAbstractNetworkArtworkDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPAbstractNetworkArtworkDataSource loadArtworkEffectResultForEffectType:catalog:options:systemEffectHandler:completionHandler:]
  -[MPAbstractNetworkArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPAbstractNetworkArtworkDataSource setUsesFallbackCache:]
  -[MPAbstractNetworkArtworkDataSource existingRepresentationForArtworkCatalog:]
  -[MPAbstractNetworkArtworkDataSource dealloc]
  -[MPAbstractNetworkArtworkDataSource resourceLoader:shouldWaitForLoadingOfRequestedResource:]
  -[MPAbstractNetworkArtworkDataSource usesFallbackCache]
  -[MPAbstractNetworkArtworkDataSource supportedSizesForCatalog:]
  -[MPAbstractNetworkArtworkDataSource loadRepresentationForArtworkCatalog:completionHandler:]
  -[MPAbstractNetworkArtworkDataSource bestAvailableSizeForCatalog:]


_MPArtworkDataSourceURLCache : NSURLCache
  // instance methods
  -[_MPArtworkDataSourceURLCache .cxx_destruct]
  -[_MPArtworkDataSourceURLCache initWithMemoryCapacity:diskCapacity:diskPath:]
  -[_MPArtworkDataSourceURLCache setRepresentationSize:forRequest:]
  -[_MPArtworkDataSourceURLCache storeCachedResponse:forRequest:]


MPMusicPlayerQueueDescriptor : NSObject <NSSecureCoding>
 @property  BOOL empty
 @property  long long shuffleType
 @property  long long repeatType
 @property  BOOL private
 @property  NSString *requestingBundleIdentifier
 @property  NSString *requestingBundleVersion
 @property  NSString *playActivityQueueGroupingID
 @property  NSString *playActivityFeatureName
 @property  NSDictionary *startTimes
 @property  NSDictionary *endTimes

  // class methods
  +[MPMusicPlayerQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerQueueDescriptor isPrivate]
  -[MPMusicPlayerQueueDescriptor setPrivate:]
  -[MPMusicPlayerQueueDescriptor initWithCoder:]
  -[MPMusicPlayerQueueDescriptor isEmpty]
  -[MPMusicPlayerQueueDescriptor setRepeatType:]
  -[MPMusicPlayerQueueDescriptor requestingBundleVersion]
  -[MPMusicPlayerQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerQueueDescriptor endTimes]
  -[MPMusicPlayerQueueDescriptor startTimes]
  -[MPMusicPlayerQueueDescriptor isEqual:]
  -[MPMusicPlayerQueueDescriptor requestingBundleIdentifier]
  -[MPMusicPlayerQueueDescriptor _setStartTime:forIdentifiers:]
  -[MPMusicPlayerQueueDescriptor _setEndTime:forIdentifiers:]
  -[MPMusicPlayerQueueDescriptor playActivityQueueGroupingID]
  -[MPMusicPlayerQueueDescriptor setPlayActivityQueueGroupingID:]
  -[MPMusicPlayerQueueDescriptor playActivityFeatureName]
  -[MPMusicPlayerQueueDescriptor _init]
  -[MPMusicPlayerQueueDescriptor setShuffleType:]
  -[MPMusicPlayerQueueDescriptor setPlayActivityFeatureName:]
  -[MPMusicPlayerQueueDescriptor copyWithZone:]
  -[MPMusicPlayerQueueDescriptor shuffleType]
  -[MPMusicPlayerQueueDescriptor repeatType]
  -[MPMusicPlayerQueueDescriptor encodeWithCoder:]


MPMusicPlayerMediaItemQueueDescriptor : MPMusicPlayerQueueDescriptor
 @property  MPMediaQuery *query
 @property  MPMediaItemCollection *itemCollection
 @property  MPMediaItem *startItem

  // class methods
  +[MPMusicPlayerMediaItemQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerMediaItemQueueDescriptor initWithQuery:]
  -[MPMusicPlayerMediaItemQueueDescriptor initWithCoder:]
  -[MPMusicPlayerMediaItemQueueDescriptor isEmpty]
  -[MPMusicPlayerMediaItemQueueDescriptor query]
  -[MPMusicPlayerMediaItemQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerMediaItemQueueDescriptor setStartItem:]
  -[MPMusicPlayerMediaItemQueueDescriptor initWithItemCollection:]
  -[MPMusicPlayerMediaItemQueueDescriptor isEqual:]
  -[MPMusicPlayerMediaItemQueueDescriptor startItem]
  -[MPMusicPlayerMediaItemQueueDescriptor setStartTime:forItem:]
  -[MPMusicPlayerMediaItemQueueDescriptor setEndTime:forItem:]
  -[MPMusicPlayerMediaItemQueueDescriptor copyWithZone:]
  -[MPMusicPlayerMediaItemQueueDescriptor itemCollection]
  -[MPMusicPlayerMediaItemQueueDescriptor encodeWithCoder:]


MPMusicPlayerStoreQueueDescriptor : MPMusicPlayerQueueDescriptor
 @property  NSDictionary *assetStoreFronts
 @property  NSArray *storeIDs
 @property  NSString *startItemID

  // class methods
  +[MPMusicPlayerStoreQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerStoreQueueDescriptor storeIDs]
  -[MPMusicPlayerStoreQueueDescriptor initWithCoder:]
  -[MPMusicPlayerStoreQueueDescriptor isEmpty]
  -[MPMusicPlayerStoreQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerStoreQueueDescriptor initWithStoreIDs:]
  -[MPMusicPlayerStoreQueueDescriptor isEqual:]
  -[MPMusicPlayerStoreQueueDescriptor startItemID]
  -[MPMusicPlayerStoreQueueDescriptor setStartTime:forItemWithStoreID:]
  -[MPMusicPlayerStoreQueueDescriptor setEndTime:forItemWithStoreID:]
  -[MPMusicPlayerStoreQueueDescriptor setSourceStorefront:forItemWithStoreID:]
  -[MPMusicPlayerStoreQueueDescriptor assetStoreFronts]
  -[MPMusicPlayerStoreQueueDescriptor setAssetStoreFronts:]
  -[MPMusicPlayerStoreQueueDescriptor setStartItemID:]
  -[MPMusicPlayerStoreQueueDescriptor setStoreIDs:]
  -[MPMusicPlayerStoreQueueDescriptor copyWithZone:]
  -[MPMusicPlayerStoreQueueDescriptor encodeWithCoder:]


MPMusicPlayerPlayParameters : NSObject <NSSecureCoding>
 @property  MPIdentifierSet *identifiers
 @property  NSString *itemKind
 @property  BOOL libraryContent
 @property  NSString *itemID
 @property  NSString *catalogID
 @property  NSDictionary *dictionary

  // class methods
  +[MPMusicPlayerPlayParameters supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerPlayParameters initWithCoder:]
  -[MPMusicPlayerPlayParameters .cxx_destruct]
  -[MPMusicPlayerPlayParameters itemID]
  -[MPMusicPlayerPlayParameters identifiers]
  -[MPMusicPlayerPlayParameters dictionary]
  -[MPMusicPlayerPlayParameters isEqual:]
  -[MPMusicPlayerPlayParameters isLibraryContent]
  -[MPMusicPlayerPlayParameters itemKind]
  -[MPMusicPlayerPlayParameters catalogID]
  -[MPMusicPlayerPlayParameters initWithDictionary:]
  -[MPMusicPlayerPlayParameters copyWithZone:]
  -[MPMusicPlayerPlayParameters encodeWithCoder:]


MPMusicPlayerPlayParametersQueueDescriptor : MPMusicPlayerQueueDescriptor
 @property  NSArray *playParametersQueue
 @property  MPMusicPlayerPlayParameters *startItemPlayParameters

  // class methods
  +[MPMusicPlayerPlayParametersQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerPlayParametersQueueDescriptor initWithCoder:]
  -[MPMusicPlayerPlayParametersQueueDescriptor isEmpty]
  -[MPMusicPlayerPlayParametersQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerPlayParametersQueueDescriptor playParametersQueue]
  -[MPMusicPlayerPlayParametersQueueDescriptor isEqual:]
  -[MPMusicPlayerPlayParametersQueueDescriptor initWithPlayParametersQueue:]
  -[MPMusicPlayerPlayParametersQueueDescriptor setStartTime:forItemWithPlayParameters:]
  -[MPMusicPlayerPlayParametersQueueDescriptor setPlayParametersQueue:]
  -[MPMusicPlayerPlayParametersQueueDescriptor setEndTime:forItemWithPlayParameters:]
  -[MPMusicPlayerPlayParametersQueueDescriptor startItemPlayParameters]
  -[MPMusicPlayerPlayParametersQueueDescriptor setStartItemPlayParameters:]
  -[MPMusicPlayerPlayParametersQueueDescriptor copyWithZone:]
  -[MPMusicPlayerPlayParametersQueueDescriptor encodeWithCoder:]


MPMusicPlayerRadioStationQueueDescriptor : MPMusicPlayerQueueDescriptor
 @property  MPRadioStation *radioStation

  // class methods
  +[MPMusicPlayerRadioStationQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerRadioStationQueueDescriptor initWithCoder:]
  -[MPMusicPlayerRadioStationQueueDescriptor isEmpty]
  -[MPMusicPlayerRadioStationQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerRadioStationQueueDescriptor initWithRadioStation:]
  -[MPMusicPlayerRadioStationQueueDescriptor radioStation]
  -[MPMusicPlayerRadioStationQueueDescriptor isEqual:]
  -[MPMusicPlayerRadioStationQueueDescriptor copyWithZone:]
  -[MPMusicPlayerRadioStationQueueDescriptor encodeWithCoder:]


MPMusicPlayerPlaybackArchiveQueueDescriptor : MPMusicPlayerQueueDescriptor
 @property  MPPlaybackArchive *playbackArchive

  // class methods
  +[MPMusicPlayerPlaybackArchiveQueueDescriptor supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor initWithCoder:]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor isEmpty]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor .cxx_destruct]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor playbackArchive]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor initWithPlaybackArchive:]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor copyWithZone:]
  -[MPMusicPlayerPlaybackArchiveQueueDescriptor encodeWithCoder:]


MPModelSortDescriptor : NSSortDescriptor
 @property  NSArray *keyPath

  // class methods
  +[MPModelSortDescriptor supportsSecureCoding]
  +[MPModelSortDescriptor sortDescriptorWithKeyPath:ascending:]

  // instance methods
  -[MPModelSortDescriptor initWithCoder:]
  -[MPModelSortDescriptor .cxx_destruct]
  -[MPModelSortDescriptor setKeyPath:]
  -[MPModelSortDescriptor isEqual:]
  -[MPModelSortDescriptor keyPath]
  -[MPModelSortDescriptor encodeWithCoder:]


MPMultiSortDescriptor : NSSortDescriptor
 @property  NSDictionary *relatedProperties

  // class methods
  +[MPMultiSortDescriptor supportsSecureCoding]
  +[MPMultiSortDescriptor sortDescriptorWithRelatedProperties:ascending:]

  // instance methods
  -[MPMultiSortDescriptor initWithCoder:]
  -[MPMultiSortDescriptor .cxx_destruct]
  -[MPMultiSortDescriptor relatedProperties]
  -[MPMultiSortDescriptor setRelatedProperties:]
  -[MPMultiSortDescriptor encodeWithCoder:]


MPModelLibraryModelSectionedCollectionDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  {shared_ptr<std::map<long long itemEntityQueryResults
 @property  {shared_ptr<mlcore::EntityQueryResult>=^{EntityQueryResult}^{__shared_weak_count}} sectionEntityQueryResult
 @property  MPModelLibraryRequest *request
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPModelLibraryModelSectionedCollectionDataSource sectionAtIndex:]
  -[MPModelLibraryModelSectionedCollectionDataSource numberOfItemsInSection:]
  -[MPModelLibraryModelSectionedCollectionDataSource .cxx_construct]
  -[MPModelLibraryModelSectionedCollectionDataSource numberOfSections]
  -[MPModelLibraryModelSectionedCollectionDataSource .cxx_destruct]
  -[MPModelLibraryModelSectionedCollectionDataSource itemEntityQueryResults]
  -[MPModelLibraryModelSectionedCollectionDataSource identifiersForItemAtIndexPath:]
  -[MPModelLibraryModelSectionedCollectionDataSource _populateIndexMap]
  -[MPModelLibraryModelSectionedCollectionDataSource request]
  -[MPModelLibraryModelSectionedCollectionDataSource _adjustedIndexForSectionIndex:]
  -[MPModelLibraryModelSectionedCollectionDataSource _allowedEntityIdentifiersContainsAllPersistentIDs]
  -[MPModelLibraryModelSectionedCollectionDataSource itemAtIndexPath:]
  -[MPModelLibraryModelSectionedCollectionDataSource identifiersForSectionAtIndex:]
  -[MPModelLibraryModelSectionedCollectionDataSource initWithRequest:sectionQueryResults:itemQueryResults:]
  -[MPModelLibraryModelSectionedCollectionDataSource indexPathForItemWithIdentifiersIntersectingSet:]
  -[MPModelLibraryModelSectionedCollectionDataSource sectionEntityQueryResult]
  -[MPModelLibraryModelSectionedCollectionDataSource hasSameContentAsDataSource:]


MPAVErrorResolver : NSObject
 @property  <MPAVErrorResolverDelegate> *delegate

  // instance methods
  -[MPAVErrorResolver .cxx_destruct]
  -[MPAVErrorResolver setDelegate:]
  -[MPAVErrorResolver resolveError:]
  -[MPAVErrorResolver sendDidResolveError:withResolution:]
  -[MPAVErrorResolver delegate]


MPModelMediaClipKind : MPModelKind
  // class methods
  +[MPModelMediaClipKind identityKind]

  // instance methods
  -[MPModelMediaClipKind humanDescription]


MPModelMediaClip : MPModelObject
 @property  @? previewArtworkCatalogBlock
 @property  NSArray *staticAssets
 @property  NSString *title

  // class methods
  +[MPModelMediaClip genericObjectType]
  +[MPModelMediaClip __staticAssets_KEY]
  +[MPModelMediaClip __previewArtworkCatalogBlock_KEY]
  +[MPModelMediaClip classesForSecureCoding]
  +[MPModelMediaClip kind]
  +[MPModelMediaClip __title_KEY]

  // instance methods
  -[MPModelMediaClip humanDescription]
  -[MPModelMediaClip previewArtworkCatalog]


MPAVRoutingViewItem : NSObject <NSObject>
 @property  long long type
 @property  MPAVRoute *mainRoute
 @property  NSArray *routes
 @property  MPAVRoute *leader
 @property  NSString *localizedTitle
 @property  NSString *localizedSubtitle
 @property  BOOL enabled
 @property  UIImage *image
 @property  NSString *actionIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPAVRoutingViewItem itemWithLeader:members:]
  +[MPAVRoutingViewItem itemWithRoute:]
  +[MPAVRoutingViewItem itemWithActionTitle:subtitle:enabled:identifier:image:]

  // instance methods
  -[MPAVRoutingViewItem localizedTitle]
  -[MPAVRoutingViewItem leader]
  -[MPAVRoutingViewItem routes]
  -[MPAVRoutingViewItem image]
  -[MPAVRoutingViewItem mainRoute]
  -[MPAVRoutingViewItem .cxx_destruct]
  -[MPAVRoutingViewItem enabled]
  -[MPAVRoutingViewItem actionIdentifier]
  -[MPAVRoutingViewItem isEqual:]
  -[MPAVRoutingViewItem _stateDumpObject]
  -[MPAVRoutingViewItem localizedSubtitle]
  -[MPAVRoutingViewItem type]


MPMRAVEndpointWrapper : MPCFWrapper
 @property  ^v unwrappedValue

  // instance methods
  -[MPMRAVEndpointWrapper unwrappedValue]
  -[MPMRAVEndpointWrapper initWithMRAVEndpoint:]


MPMRAVOutputContextWrapper : MPCFWrapper
 @property  ^v unwrappedValue

  // instance methods
  -[MPMRAVOutputContextWrapper initWithMRAVOutputContext:]
  -[MPMRAVOutputContextWrapper unwrappedValue]


MPMRAVEndpointObserverWrapper : MPCFWrapper
 @property  ^v unwrappedValue

  // instance methods
  -[MPMRAVEndpointObserverWrapper unwrappedValue]
  -[MPMRAVEndpointObserverWrapper initWithMRAVEndpointObserver:]


MPConcreteMediaItem : MPMediaItem <NSCopying, MPCacheableConcreteMediaEntity>
 @property  MPConcreteMediaEntityPropertiesCache *cachedPropertyValues

  // class methods
  +[MPConcreteMediaItem concreteMediaItemWithPersistentID:library:]
  +[MPConcreteMediaItem supportsSecureCoding]
  +[MPConcreteMediaItem createUncachedConcreteMediaItemWithPersistentID:library:]
  +[MPConcreteMediaItem concreteMediaItemWithPersistentID:]

  // instance methods
  -[MPConcreteMediaItem initWithCoder:]
  -[MPConcreteMediaItem mediaLibrary]
  -[MPConcreteMediaItem classForCoder]
  -[MPConcreteMediaItem setValue:forProperty:withCompletionBlock:]
  -[MPConcreteMediaItem valueForProperty:]
  -[MPConcreteMediaItem initWithPersistentID:]
  -[MPConcreteMediaItem existsInLibrary]
  -[MPConcreteMediaItem setValue:forProperty:]
  -[MPConcreteMediaItem .cxx_destruct]
  -[MPConcreteMediaItem valuesForProperties:]
  -[MPConcreteMediaItem persistentID]
  -[MPConcreteMediaItem invalidateCachedProperties]
  -[MPConcreteMediaItem enumerateValuesForProperties:usingBlock:]
  -[MPConcreteMediaItem didSkipWithPlayedToTime:]
  -[MPConcreteMediaItem markNominalAmountHasBeenPlayed]
  -[MPConcreteMediaItem incrementSkipCount]
  -[MPConcreteMediaItem noteWasPlayedToTime:skipped:]
  -[MPConcreteMediaItem incrementPlayCountForPlayingToEnd]
  -[MPConcreteMediaItem incrementPlayCountForStopTime:]
  -[MPConcreteMediaItem updateDateAccessedToCurrentDateWithWriteCompletionBlock:]
  -[MPConcreteMediaItem nominalHasBeenPlayedThreshold]
  -[MPConcreteMediaItem init]
  -[MPConcreteMediaItem cachedPropertyValues]
  -[MPConcreteMediaItem _initWithPersistentID:library:propertiesCache:]
  -[MPConcreteMediaItem _nonBatchableOrCachedValueForProperty:needsFetch:]
  -[MPConcreteMediaItem initWithPersistentID:library:]
  -[MPConcreteMediaItem dealloc]
  -[MPConcreteMediaItem copyWithZone:]
  -[MPConcreteMediaItem cachedValueForProperty:isCached:]
  -[MPConcreteMediaItem incrementPlayCount]
  -[MPConcreteMediaItem encodeWithCoder:]


MPConcreteMediaItemArtwork : MPMediaItemArtwork
 @property  MPArtworkCatalog *artworkCatalog

  // instance methods
  -[MPConcreteMediaItemArtwork .cxx_destruct]
  -[MPConcreteMediaItemArtwork initWithArtworkCatalog:allowsNetworking:]
  -[MPConcreteMediaItemArtwork initWithArtworkCatalog:]
  -[MPConcreteMediaItemArtwork artworkCatalog]
  -[MPConcreteMediaItemArtwork bounds]


MPConcreteMediaItemCollection : MPMediaItemCollection <NSCopying, MPCacheableConcreteMediaEntity>
 @property  MPConcreteMediaEntityPropertiesCache *cachedPropertyValues

  // class methods
  +[MPConcreteMediaItemCollection createUncachedMediaItemCollectionWithIdentifier:valuesForProperties:itemsQuery:grouping:representativeItemIdentifier:]
  +[MPConcreteMediaItemCollection supportsSecureCoding]

  // instance methods
  -[MPConcreteMediaItemCollection _initWithIdentifier:valuesForProperties:itemsQuery:grouping:representativeItemIdentifier:propertiesCache:]
  -[MPConcreteMediaItemCollection initWithCoder:]
  -[MPConcreteMediaItemCollection mediaLibrary]
  -[MPConcreteMediaItemCollection setValue:forProperty:withCompletionBlock:]
  -[MPConcreteMediaItemCollection items]
  -[MPConcreteMediaItemCollection valueForProperty:]
  -[MPConcreteMediaItemCollection setValue:forProperty:]
  -[MPConcreteMediaItemCollection initWithIdentifier:itemsQuery:grouping:]
  -[MPConcreteMediaItemCollection initWithIdentifier:valuesForProperties:itemsQuery:grouping:representativeItemIdentifier:]
  -[MPConcreteMediaItemCollection .cxx_destruct]
  -[MPConcreteMediaItemCollection valuesForProperties:]
  -[MPConcreteMediaItemCollection persistentID]
  -[MPConcreteMediaItemCollection count]
  -[MPConcreteMediaItemCollection invalidateCachedProperties]
  -[MPConcreteMediaItemCollection enumerateValuesForProperties:usingBlock:]
  -[MPConcreteMediaItemCollection isEqual:]
  -[MPConcreteMediaItemCollection _enumerateItemPersistentIDsUsingBlock:]
  -[MPConcreteMediaItemCollection itemsQuery]
  -[MPConcreteMediaItemCollection cachedPropertyValues]
  -[MPConcreteMediaItemCollection representativeItem]
  -[MPConcreteMediaItemCollection initWithMultiverseIdentifier:library:]
  -[MPConcreteMediaItemCollection dealloc]
  -[MPConcreteMediaItemCollection copyWithZone:]
  -[MPConcreteMediaItemCollection groupingType]
  -[MPConcreteMediaItemCollection encodeWithCoder:]


MPConcreteMediaPlaylist : MPMediaPlaylist <NSCopying>
  // class methods
  +[MPConcreteMediaPlaylist supportsSecureCoding]

  // instance methods
  -[MPConcreteMediaPlaylist removeAllItems]
  -[MPConcreteMediaPlaylist initWithCoder:]
  -[MPConcreteMediaPlaylist mediaLibrary]
  -[MPConcreteMediaPlaylist setValue:forProperty:withCompletionBlock:]
  -[MPConcreteMediaPlaylist items]
  -[MPConcreteMediaPlaylist valueForProperty:]
  -[MPConcreteMediaPlaylist addMediaItems:completionHandler:]
  -[MPConcreteMediaPlaylist existsInLibrary]
  -[MPConcreteMediaPlaylist removeFirstItem]
  -[MPConcreteMediaPlaylist multiverseIdentifier]
  -[MPConcreteMediaPlaylist setValue:forProperty:]
  -[MPConcreteMediaPlaylist .cxx_destruct]
  -[MPConcreteMediaPlaylist valuesForProperties:]
  -[MPConcreteMediaPlaylist count]
  -[MPConcreteMediaPlaylist initWithProperties:itemsQuery:]
  -[MPConcreteMediaPlaylist mediaTypes]
  -[MPConcreteMediaPlaylist isEqual:]
  -[MPConcreteMediaPlaylist _enumerateItemPersistentIDsUsingBlock:]
  -[MPConcreteMediaPlaylist itemsQuery]
  -[MPConcreteMediaPlaylist _updateLibraryForPlaylistEdit:]
  -[MPConcreteMediaPlaylist appendItems:completion:]
  -[MPConcreteMediaPlaylist populateWithSeedItem:queue:completionBlock:]
  -[MPConcreteMediaPlaylist replaceItems:completion:]
  -[MPConcreteMediaPlaylist appendItem:completion:]
  -[MPConcreteMediaPlaylist replaceItemsWithPersistentIDs:completion:]
  -[MPConcreteMediaPlaylist removeItems:atFilteredIndexes:completionBlock:]
  -[MPConcreteMediaPlaylist moveItemFromIndex:toIndex:completionBlock:]
  -[MPConcreteMediaPlaylist populateWithSeedItem:completionBlock:]
  -[MPConcreteMediaPlaylist beginGeneratingGeniusClusterItemsWithSeedItems:error:]
  -[MPConcreteMediaPlaylist geniusClusterItemsWithCount:error:]
  -[MPConcreteMediaPlaylist endGeneratingGeniusClusterItems]
  -[MPConcreteMediaPlaylist representativeItem]
  -[MPConcreteMediaPlaylist addItemWithProductID:completionHandler:]
  -[MPConcreteMediaPlaylist copyWithZone:]
  -[MPConcreteMediaPlaylist encodeWithCoder:]
  -[MPConcreteMediaPlaylist _allowsEditing]


MPMediaArray : NSArray
 @property  MPMediaQuerySectionInfo *sectionInfo


MPMediaEntityResultSetArray : MPMediaArray <NSCopying>
 @property  <MPMediaLibraryResultSet> *resultSet

  // instance methods
  -[MPMediaEntityResultSetArray .cxx_destruct]
  -[MPMediaEntityResultSetArray count]
  -[MPMediaEntityResultSetArray initWithResultSet:queryCriteria:entityType:library:]
  -[MPMediaEntityResultSetArray objectAtIndex:]
  -[MPMediaEntityResultSetArray resultSet]
  -[MPMediaEntityResultSetArray sectionInfo]
  -[MPMediaEntityResultSetArray isQueryResultSetInvalidated]
  -[MPMediaEntityResultSetArray copyWithZone:]


MPConcreteMediaEntityPropertiesCache : NSObject
 @property  <MPMediaLibraryDataProvider> *dataProvider
 @property  Class dataProviderEntityClass
 @property  long long identifier

  // instance methods
  -[MPConcreteMediaEntityPropertiesCache delete]
  -[MPConcreteMediaEntityPropertiesCache .cxx_destruct]
  -[MPConcreteMediaEntityPropertiesCache identifier]
  -[MPConcreteMediaEntityPropertiesCache dataProviderEntityClass]
  -[MPConcreteMediaEntityPropertiesCache valueForProperty:isCached:]
  -[MPConcreteMediaEntityPropertiesCache cacheValue:forProperty:persistValueInBackgroundBlock:]
  -[MPConcreteMediaEntityPropertiesCache cachePropertyValues:forProperties:persistValueInBackgroundBlock:]
  -[MPConcreteMediaEntityPropertiesCache _onBarrierCacheValues:persistValueInBackgroundBlock:]
  -[MPConcreteMediaEntityPropertiesCache initWithLibraryDataProvider:dataProviderEntityClass:identifier:]
  -[MPConcreteMediaEntityPropertiesCache dealloc]
  -[MPConcreteMediaEntityPropertiesCache invalidate]
  -[MPConcreteMediaEntityPropertiesCache dataProvider]


MPMediaLibraryDataProviderML3 : NSObject <MPMediaLibraryDataProviderPrivate, MPUserIdentityConsuming>
 @property  ML3MusicLibrary *library
 @property  MPMediaLibrary *mediaLibrary
 @property  NSString *accountDSID
 @property  NSString *databasePath
 @property  long long playbackHistoryPlaylistPersistentID
 @property  long long photosMemoriesPlaylistPersistentID
 @property  BOOL isGeniusEnabled
 @property  NSArray *preferredAudioLanguages
 @property  NSArray *preferredSubtitleLanguages
 @property  NSArray *localizedSectionIndexTitles
 @property  NSString *name
 @property  NSString *uniqueIdentifier
 @property  MPMediaEntityCache *entityCache
 @property  <MPArtworkDataSource> *artworkDataSource
 @property  BOOL requiresAuthentication
 @property  NSSet *propertiesToCache
 @property  NSString *syncValidity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  ICUserIdentity *userIdentity

  // class methods
  +[MPMediaLibraryDataProviderML3 onDiskProviders]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForMPProperty:withDefaultValue:]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForItemTimeWithDefaultValue:]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForItemDateWithDefaultValue:]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForItemPropertyRatingWithDefaultValue:]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForItemPropertyVolumeAdjustmentWithDefaultValue:]
  +[MPMediaLibraryDataProviderML3 _unadjustedValueForItemPropertyVolumeNormalizationWithDefaultValue:]
  +[MPMediaLibraryDataProviderML3 uniqueIdentifierForLibrary:]

  // instance methods
  -[MPMediaLibraryDataProviderML3 itemResultSetForQueryCriteria:]
  -[MPMediaLibraryDataProviderML3 _libraryUIDDidChange:]
  -[MPMediaLibraryDataProviderML3 entityCache]
  -[MPMediaLibraryDataProviderML3 removePlaylistWithIdentifier:]
  -[MPMediaLibraryDataProviderML3 _loadProperties:ofEntityWithIdentifier:ML3EntityClass:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyContentRatingOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 collectionExistsWithName:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 setValues:forProperties:forItemPersistentIDs:]
  -[MPMediaLibraryDataProviderML3 itemPersistentIDForStoreID:]
  -[MPMediaLibraryDataProviderML3 _updateArtworkDataSourceMediaLibraryUniqueIdentifier]
  -[MPMediaLibraryDataProviderML3 _libraryContentsDidChange:]
  -[MPMediaLibraryDataProviderML3 setMediaLibrary:]
  -[MPMediaLibraryDataProviderML3 preferredSubtitleLanguages]
  -[MPMediaLibraryDataProviderML3 _loadValueForAggregateFunction:entityClass:property:query:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _storePlatformRequestContext]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyRatingOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 syncValidity]
  -[MPMediaLibraryDataProviderML3 performStoreItemLibraryImport:withCompletion:]
  -[MPMediaLibraryDataProviderML3 loadQueryCriteria:countOfItemsWithCompletionBlock:]
  -[MPMediaLibraryDataProviderML3 photosMemoriesPlaylistPersistentID]
  -[MPMediaLibraryDataProviderML3 setValue:forProperty:ofItemWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyVolumeAdjustmentOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemNonnullDateOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 addItemsWithIdentifiers:toPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 hasGeniusMixes]
  -[MPMediaLibraryDataProviderML3 moveItemFromIndex:toIndex:inPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 setLibraryPublicContainerFilterPredicatesWithCloudFilteringType:additionalFilterPredicates:]
  -[MPMediaLibraryDataProviderML3 _postEvents]
  -[MPMediaLibraryDataProviderML3 addNonLibraryOwnedPlaylistsWithGlobalIDs:completion:]
  -[MPMediaLibraryDataProviderML3 playbackHistoryPlaylistPersistentID]
  -[MPMediaLibraryDataProviderML3 playlistGeneration]
  -[MPMediaLibraryDataProviderML3 setLibraryContainerFilterPredicatesWithCloudFilteringType:additionalFilterPredicates:]
  -[MPMediaLibraryDataProviderML3 artworkDataSource]
  -[MPMediaLibraryDataProviderML3 databasePath]
  -[MPMediaLibraryDataProviderML3 loadValueForAggregateFunction:onItemsForProperty:queryCriteria:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _libraryEntitiesAddedOrRemoved:]
  -[MPMediaLibraryDataProviderML3 loadProperties:ofItemWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyEpisodeNumberOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 multiverseIdentifierForCollectionWithPersistentID:groupingType:]
  -[MPMediaLibraryDataProviderML3 deleteItemsWithIdentifiers:count:]
  -[MPMediaLibraryDataProviderML3 _dataProviderSupportsEntityChangeTracking]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyBookletsOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyVolumeNormalizationOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _syncGenerationDidChange:]
  -[MPMediaLibraryDataProviderML3 collectionExistsContainedWithinSyncIDs:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 accountDSID]
  -[MPMediaLibraryDataProviderML3 enumerateCollectionIdentifiersForQueryCriteria:ordered:cancelBlock:usingBlock:]
  -[MPMediaLibraryDataProviderML3 setValue:forDatabaseProperty:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertySeasonNumberOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _libraryPathDidChange:]
  -[MPMediaLibraryDataProviderML3 deleteDatabaseProperty:]
  -[MPMediaLibraryDataProviderML3 preferredAudioLanguages]
  -[MPMediaLibraryDataProviderML3 localizedSectionIndexTitles]
  -[MPMediaLibraryDataProviderML3 importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:]
  -[MPMediaLibraryDataProviderML3 name]
  -[MPMediaLibraryDataProviderML3 _adjustedPropertyMediaTypeOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _coalesceEvents]
  -[MPMediaLibraryDataProviderML3 _adjustedItemTimeOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 performBackgroundTaskWithBlock:]
  -[MPMediaLibraryDataProviderML3 clearLocationPropertiesOfItemWithIdentifier:]
  -[MPMediaLibraryDataProviderML3 userIdentity]
  -[MPMediaLibraryDataProviderML3 setLibraryEntityFilterPredicatesWithCloudFilteringType:additionalFilterPredicates:]
  -[MPMediaLibraryDataProviderML3 sdk_addItemWithOpaqueIdentifier:toPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _displayValuesDidChange:]
  -[MPMediaLibraryDataProviderML3 _addGlobalPlaylistsToLibraryDatabase:asLibraryOwned:completion:]
  -[MPMediaLibraryDataProviderML3 recordPlayEventForAlbumPersistentID:]
  -[MPMediaLibraryDataProviderML3 uniqueIdentifier]
  -[MPMediaLibraryDataProviderML3 removeFirstItemFromPlaylistWithIdentifier:]
  -[MPMediaLibraryDataProviderML3 enumerateItemIdentifiersForQueryCriteria:ordered:cancelBlock:usingBlock:]
  -[MPMediaLibraryDataProviderML3 playlistExistsWithPersistentID:]
  -[MPMediaLibraryDataProviderML3 localizedSectionHeaderForSectionIndex:]
  -[MPMediaLibraryDataProviderML3 syncGenerationID]
  -[MPMediaLibraryDataProviderML3 addPlaylistWithValuesForProperties:]
  -[MPMediaLibraryDataProviderML3 _adjustedPlaylistPropertySeedItemsOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 collectionExistsWithStoreID:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 removeAllItemsInPlaylistWithIdentifier:]
  -[MPMediaLibraryDataProviderML3 setValue:forProperty:ofCollectionWithIdentifier:groupingType:completionBlock:]
  -[MPMediaLibraryDataProviderML3 setValue:forProperty:ofPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 ML3SystemFilterPredicatesWithGroupingType:cloudTrackFilteringType:subscriptionFilteringOptions:additionalFilterPredicates:]
  -[MPMediaLibraryDataProviderML3 loadQueryCriteria:hasCollectionsWithCompletionBlock:]
  -[MPMediaLibraryDataProviderML3 addTracksToMyLibrary:]
  -[MPMediaLibraryDataProviderML3 initWithLibrary:]
  -[MPMediaLibraryDataProviderML3 collectionExistsWithSagaID:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 sdk_addPlaylistWithValuesForProperties:]
  -[MPMediaLibraryDataProviderML3 isCurrentThreadInTransaction]
  -[MPMediaLibraryDataProviderML3 setItemsWithIdentifiers:forPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 _removeEntitiesWithIdentifiers:count:entityClass:]
  -[MPMediaLibraryDataProviderML3 _libraryCloudLibraryAvailabilityDidChange:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyMovieInfoOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyFilePathOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 loadQueryCriteria:hasItemsWithCompletionBlock:]
  -[MPMediaLibraryDataProviderML3 _invisiblePropertiesDidChange:]
  -[MPMediaLibraryDataProviderML3 sdk_addItemWithOpaqueID:withCompletion:]
  -[MPMediaLibraryDataProviderML3 collectionExistsWithPersistentID:groupingType:]
  -[MPMediaLibraryDataProviderML3 recordPlayEventForPlaylistPersistentID:]
  -[MPMediaLibraryDataProviderML3 hasUbiquitousBookmarkableItems]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertySeasonNameOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 populateLocationPropertiesOfItemWithIdentifier:withPath:assetProtectionType:completionBlock:]
  -[MPMediaLibraryDataProviderML3 removeItemsWithIdentifiers:count:]
  -[MPMediaLibraryDataProviderML3 removeItemsAtIndexes:inPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 importOriginalArtworkFromImageData:withArtworkToken:artworkType:sourceType:mediaType:]
  -[MPMediaLibraryDataProviderML3 hasMediaOfType:]
  -[MPMediaLibraryDataProviderML3 addGlobalPlaylistWithID:andAddToCloudLibrary:completion:]
  -[MPMediaLibraryDataProviderML3 writable]
  -[MPMediaLibraryDataProviderML3 collectionExistsWithCloudUniversalLibraryID:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyVerifiedIntegrityOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 collectionResultSetForQueryCriteria:]
  -[MPMediaLibraryDataProviderML3 library]
  -[MPMediaLibraryDataProviderML3 performTransactionWithBlock:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyChaptersOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 loadProperties:ofCollectionWithIdentifier:groupingType:completionBlock:]
  -[MPMediaLibraryDataProviderML3 addPlaylistStoreItemsForLookupItems:withCompletion:]
  -[MPMediaLibraryDataProviderML3 collectionExistsContainedWithinPersistentIDs:count:groupingType:existentPID:]
  -[MPMediaLibraryDataProviderML3 multiverseIdentifierForTrackWithPersistentID:]
  -[MPMediaLibraryDataProviderML3 loadQueryCriteria:countOfCollectionsWithCompletionBlock:]
  -[MPMediaLibraryDataProviderML3 currentEntityRevision]
  -[MPMediaLibraryDataProviderML3 loadValueForAggregateFunction:onCollectionsForProperty:queryCriteria:completionBlock:]
  -[MPMediaLibraryDataProviderML3 itemExistsWithPersistentID:]
  -[MPMediaLibraryDataProviderML3 setUserIdentity:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyAssetURLOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 enumerateEntityChangesAfterSyncAnchor:maximumRevisionType:inUsersLibrary:itemBlock:collectionBlock:]
  -[MPMediaLibraryDataProviderML3 mediaLibrary]
  -[MPMediaLibraryDataProviderML3 _adjustedItemDateOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 valueForDatabaseProperty:]
  -[MPMediaLibraryDataProviderML3 performReadTransactionWithBlock:]
  -[MPMediaLibraryDataProviderML3 setLibrary:]
  -[MPMediaLibraryDataProviderML3 setLibraryPublicEntityFilterPredicatesWithCloudFilteringType:additionalFilterPredicates:]
  -[MPMediaLibraryDataProviderML3 populateLocationPropertiesOfItemWithIdentifier:withPath:assetProtectionType:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyChapterArtworkTimesOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 _dynamicPropertiesDidChange:]
  -[MPMediaLibraryDataProviderML3 _importStoreItemElements:withReferralObject:andAddTracksToCloudLibrary:usingCloudAdamID:withCompletion:]
  -[MPMediaLibraryDataProviderML3 .cxx_destruct]
  -[MPMediaLibraryDataProviderML3 adjustedValueForMPProperty:ofEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 addItemWithIdentifier:toPlaylistWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderML3 dealloc]
  -[MPMediaLibraryDataProviderML3 systemFilterPredicatesWithGroupingType:cloudTrackFilteringType:subscriptionFilteringOptions:]
  -[MPMediaLibraryDataProviderML3 _adjustedItemPropertyEQPresetOfEntity:withDefaultValue:]
  -[MPMediaLibraryDataProviderML3 lastModifiedDate]


MPAVRouteConnection : NSObject
 @property  ^v externalDevice
 @property  BOOL connected
 @property  BOOL connecting
 @property  BOOL invalidated
 @property  @? invalidationHandler

  // instance methods
  -[MPAVRouteConnection isInvalidated]
  -[MPAVRouteConnection initWithExternalDevice:]
  -[MPAVRouteConnection _externalDeviceConnectionStateDidChangeNotification:]
  -[MPAVRouteConnection isConnected]
  -[MPAVRouteConnection .cxx_destruct]
  -[MPAVRouteConnection connectWithCompletion:]
  -[MPAVRouteConnection externalDevice]
  -[MPAVRouteConnection setInvalidationHandler:]
  -[MPAVRouteConnection reset]
  -[MPAVRouteConnection connectWithOptions:completion:]
  -[MPAVRouteConnection connectWithOptions:userInfo:completion:]
  -[MPAVRouteConnection _connectionStateDidChange:error:]
  -[MPAVRouteConnection connectWithUserInfo:completion:]
  -[MPAVRouteConnection sendCustomData:]
  -[MPAVRouteConnection sendMediaRemoteCommand:withOptions:completionHandler:]
  -[MPAVRouteConnection dealloc]
  -[MPAVRouteConnection isConnecting]
  -[MPAVRouteConnection invalidationHandler]


MPModelStaticRequest : MPModelRequest
 @property  MPModelStaticResponse *staticResponse

  // class methods
  +[MPModelStaticRequest supportsSecureCoding]

  // instance methods
  -[MPModelStaticRequest newOperationWithResponseHandler:]
  -[MPModelStaticRequest .cxx_destruct]
  -[MPModelStaticRequest staticResponse]
  -[MPModelStaticRequest setStaticResponse:]
  -[MPModelStaticRequest copyWithZone:]


MPModelStaticResponse : MPModelResponse

MPModelLibraryAlbumAppDataChangeRequest : NSObject <NSCopying>
 @property  MPModelObject *modelObject
 @property  MPMediaLibraryAlbumAppData *albumAppData

  // instance methods
  -[MPModelLibraryAlbumAppDataChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryAlbumAppDataChangeRequest .cxx_destruct]
  -[MPModelLibraryAlbumAppDataChangeRequest setModelObject:]
  -[MPModelLibraryAlbumAppDataChangeRequest setAlbumAppData:]
  -[MPModelLibraryAlbumAppDataChangeRequest copyWithZone:]
  -[MPModelLibraryAlbumAppDataChangeRequest albumAppData]
  -[MPModelLibraryAlbumAppDataChangeRequest modelObject]


MPAVRoutingTableHeaderView : UIView
  // instance methods
  -[MPAVRoutingTableHeaderView initWithCoder:]
  -[MPAVRoutingTableHeaderView .cxx_destruct]
  -[MPAVRoutingTableHeaderView layoutSubviews]
  -[MPAVRoutingTableHeaderView sizeThatFits:]
  -[MPAVRoutingTableHeaderView _mirroringTitleTextAttributes]
  -[MPAVRoutingTableHeaderView initWithFrame:]
  -[MPAVRoutingTableHeaderView _mirroringCompactDescription]
  -[MPAVRoutingTableHeaderView _mirroringCompactDescriptionTextAttributes]
  -[MPAVRoutingTableHeaderView _init]


MPStoreFileAssetFairPlayInfo : NSObject
 @property  NSDictionary *responseSinfDictionary
 @property  long long identifier
 @property  NSData *dpInfoData
 @property  NSData *pinfData
 @property  NSData *sinfData
 @property  NSData *sinf2Data
 @property  NSDictionary *purchaseBundleSinfDictionary

  // instance methods
  -[MPStoreFileAssetFairPlayInfo .cxx_destruct]
  -[MPStoreFileAssetFairPlayInfo pinfData]
  -[MPStoreFileAssetFairPlayInfo sinfData]
  -[MPStoreFileAssetFairPlayInfo dpInfoData]
  -[MPStoreFileAssetFairPlayInfo identifier]
  -[MPStoreFileAssetFairPlayInfo sinf2Data]
  -[MPStoreFileAssetFairPlayInfo initWithResponseSinfDictionary:]
  -[MPStoreFileAssetFairPlayInfo responseSinfDictionary]
  -[MPStoreFileAssetFairPlayInfo purchaseBundleSinfDictionary]
  -[MPStoreFileAssetFairPlayInfo initWithiTunesCloudStoreFileAssetFairPlayInfo:]


MPMediaEntity : NSObject <NSCopying, NSSecureCoding>
 @property  MPMediaLibrary *mediaLibrary
 @property  MPMediaItem *representativeItem
 @property  MIPMultiverseIdentifier *multiverseIdentifier
 @property  unsigned long persistentID

  // class methods
  +[MPMediaEntity supportsSecureCoding]
  +[MPMediaEntity canFilterByProperty:]

  // instance methods
  -[MPMediaEntity initWithCoder:]
  -[MPMediaEntity mediaLibrary]
  -[MPMediaEntity objectForKeyedSubscript:]
  -[MPMediaEntity valueForProperty:]
  -[MPMediaEntity multiverseIdentifier]
  -[MPMediaEntity .cxx_destruct]
  -[MPMediaEntity valuesForProperties:]
  -[MPMediaEntity persistentID]
  -[MPMediaEntity genericModelObjectWithRequestedProperties:]
  -[MPMediaEntity invalidateCachedProperties]
  -[MPMediaEntity enumerateValuesForProperties:usingBlock:]
  -[MPMediaEntity isEqual:]
  -[MPMediaEntity representativeItem]
  -[MPMediaEntity initWithMultiverseIdentifier:library:]
  -[MPMediaEntity copyWithZone:]
  -[MPMediaEntity cachedValueForProperty:isCached:]
  -[MPMediaEntity encodeWithCoder:]


MPMediaQuerySectionInfo : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSArray *sectionIndexTitles
 @property  NSArray *sections
 @property  BOOL hasUnknownSection
 @property  unsigned long count

  // class methods
  +[MPMediaQuerySectionInfo supportsSecureCoding]

  // instance methods
  -[MPMediaQuerySectionInfo sections]
  -[MPMediaQuerySectionInfo initWithCoder:]
  -[MPMediaQuerySectionInfo .cxx_destruct]
  -[MPMediaQuerySectionInfo count]
  -[MPMediaQuerySectionInfo indexOfSectionForSectionIndexTitleAtIndex:]
  -[MPMediaQuerySectionInfo sectionIndexTitles]
  -[MPMediaQuerySectionInfo setSectionIndexTitles:]
  -[MPMediaQuerySectionInfo hasUnknownSection]
  -[MPMediaQuerySectionInfo setHasUnknownSection:]
  -[MPMediaQuerySectionInfo mutableCopyWithZone:]
  -[MPMediaQuerySectionInfo copyWithZone:]
  -[MPMediaQuerySectionInfo encodeWithCoder:]


MPMediaQueryMutableSectionInfo : MPMediaQuerySectionInfo
 @property  NSArray *sectionIndexTitles

  // instance methods
  -[MPMediaQueryMutableSectionInfo addSectionWithHeaderTitle:sectionIndexTitleIndex:count:]


MPVolumeController : NSObject <MPVolumeControllerDataSourceDelegate>
 @property  <MPVolumeControllerDelegate> *delegate
 @property  BOOL volumeControlAvailable
 @property  unsigned int volumeCapabilities
 @property  NSString *volumeControlLabel
 @property  NSString *volumeAudioCategory
 @property  float volumeValue
 @property  BOOL muted
 @property  <MPVolumeControllerDataSource> *dataSource
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  float EUVolumeLimit
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPVolumeController descriptionForWarningState:]

  // instance methods
  -[MPVolumeController initWithDataSource:]
  -[MPVolumeController setMuted:]
  -[MPVolumeController volumeAudioCategory]
  -[MPVolumeController isMuted]
  -[MPVolumeController volumeControllerDataSource:didChangeVolumeLabel:]
  -[MPVolumeController volumeCapabilities]
  -[MPVolumeController volumeControllerDataSource:didChangeVolumeAudioCategory:]
  -[MPVolumeController isVolumeControlAvailable]
  -[MPVolumeController volumeControllerDataSource:didChangeVolumeControlAvailability:]
  -[MPVolumeController volumeControlLabel]
  -[MPVolumeController setDataSource:]
  -[MPVolumeController beginDecreasingRelativeVolume]
  -[MPVolumeController endIncreasingRelativeVolume]
  -[MPVolumeController updateVolumeValue]
  -[MPVolumeController .cxx_destruct]
  -[MPVolumeController volumeValue]
  -[MPVolumeController setDelegate:]
  -[MPVolumeController setVolumeAudioCategory:]
  -[MPVolumeController volumeControllerDataSource:didChangeVolumeCapabilities:]
  -[MPVolumeController volumeControllerDataSource:didChangeVolumeWarning:]
  -[MPVolumeController dataSource]
  -[MPVolumeController EUVolumeLimit]
  -[MPVolumeController init]
  -[MPVolumeController volumeControllerDataSource:didChangeVolume:]
  -[MPVolumeController setVolume:withNoticationDelay:]
  -[MPVolumeController endDecreasingRelativeVolume]
  -[MPVolumeController volumeWarningState]
  -[MPVolumeController getVolumeValueWithCompletion:]
  -[MPVolumeController volumeControllerDataSource:didChangeMuted:]
  -[MPVolumeController _updateVolumeControlAvailability]
  -[MPVolumeController delegate]
  -[MPVolumeController updateVolumeWarningState]
  -[MPVolumeController setVolumeValue:]
  -[MPVolumeController volumeControllerDataSource:didChangeEUVolumeLimitEnforced:]
  -[MPVolumeController muted]
  -[MPVolumeController volumeWarningEnabled]
  -[MPVolumeController volumeControllerDataSource:didChangeEUVolumeLimit:]
  -[MPVolumeController beginIncreasingRelativeVolume]
  -[MPVolumeController adjustVolumeValue:]


MPMediaChapter : NSObject
 @property  id value
 @property  @? valueLoader
 @property  long long chapterType
 @property  double playbackTime
 @property  double playbackDuration
 @property  unsigned long indexInChaptersWithSameType
 @property  unsigned long indexInChaptersWithAnyType
 @property  MPMediaLibraryArtworkRequest *artworkRequest
 @property  MPMediaLibraryArtworkDataSource *artworkDataSource

  // instance methods
  -[MPMediaChapter artworkDataSource]
  -[MPMediaChapter initWithCoder:]
  -[MPMediaChapter .cxx_destruct]
  -[MPMediaChapter chapterType]
  -[MPMediaChapter playbackTime]
  -[MPMediaChapter setArtworkDataSource:]
  -[MPMediaChapter setValue:]
  -[MPMediaChapter playbackDuration]
  -[MPMediaChapter title]
  -[MPMediaChapter _sortByChapterIndex:]
  -[MPMediaChapter indexInChaptersWithAnyType]
  -[MPMediaChapter valueLoader]
  -[MPMediaChapter setArtworkRequest:]
  -[MPMediaChapter setChapterType:]
  -[MPMediaChapter setIndexInChaptersWithSameType:]
  -[MPMediaChapter setIndexInChaptersWithAnyType:]
  -[MPMediaChapter setPlaybackTime:]
  -[MPMediaChapter setValueLoader:]
  -[MPMediaChapter artworkRequest]
  -[MPMediaChapter value]
  -[MPMediaChapter indexInChaptersWithSameType]
  -[MPMediaChapter artworkCatalog]
  -[MPMediaChapter setPlaybackDuration:]
  -[MPMediaChapter duration]
  -[MPMediaChapter encodeWithCoder:]


MPStoreLibraryPersonalizationCollectionDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  MPSectionedCollection *unpersonalizedContentDescriptors
 @property  MPPropertySet *itemProperties
 @property  MPPropertySet *sectionProperties
 @property  NSDictionary *itemIndexPathToOverridePropertySet
 @property  MPMediaLibraryView *libraryView
 @property  MPMediaLibraryEntityTranslationContext *translatingContext
 @property  NSMapTable *relativeModelClassToMappingResponse
 @property  NSMutableDictionary *sectionToLibraryAddedOverride
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPStoreLibraryPersonalizationCollectionDataSource _completePersonalizedObjectWithLibraryObject:personalizationProperties:overrideLibraryAddedStatus:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _requiredLightweightPersonalizationPropertiesForModelClass:requestedProperties:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _lightweightPersonalizedObjectWithUnpersonalizedObject:libraryObject:personalizationProperties:overrideLibraryAddedStatus:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _lightweightPersonalizedStoreAssetWithUnpersonalizedAsset:libraryAsset:personalizationProperties:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _lightweightPersonalizedPlaybackPositionWithUnpersonalizedPlaybackPosition:identifiers:personalizationProperties:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _lightweightPersonalizedLyricsWithUnpersonalizedLyrics:libraryLyrics:identifiers:personalizationProperties:]
  +[MPStoreLibraryPersonalizationCollectionDataSource _lightweightPersonalizedPlaybackPositionWithUnpersonalizedPlaybackPosition:libraryPlaybackPosition:personalizationProperties:]

  // instance methods
  -[MPStoreLibraryPersonalizationCollectionDataSource libraryView]
  -[MPStoreLibraryPersonalizationCollectionDataSource sectionAtIndex:]
  -[MPStoreLibraryPersonalizationCollectionDataSource itemIndexPathToOverridePropertySet]
  -[MPStoreLibraryPersonalizationCollectionDataSource setLibraryView:]
  -[MPStoreLibraryPersonalizationCollectionDataSource numberOfItemsInSection:]
  -[MPStoreLibraryPersonalizationCollectionDataSource unpersonalizedContentDescriptors]
  -[MPStoreLibraryPersonalizationCollectionDataSource itemProperties]
  -[MPStoreLibraryPersonalizationCollectionDataSource .cxx_construct]
  -[MPStoreLibraryPersonalizationCollectionDataSource numberOfSections]
  -[MPStoreLibraryPersonalizationCollectionDataSource .cxx_destruct]
  -[MPStoreLibraryPersonalizationCollectionDataSource identifiersForItemAtIndexPath:]
  -[MPStoreLibraryPersonalizationCollectionDataSource setSectionProperties:]
  -[MPStoreLibraryPersonalizationCollectionDataSource translatingContext]
  -[MPStoreLibraryPersonalizationCollectionDataSource init]
  -[MPStoreLibraryPersonalizationCollectionDataSource setItemIndexPathToOverridePropertySet:]
  -[MPStoreLibraryPersonalizationCollectionDataSource _entityCacheForEntityClass:propertiesToFetch:]
  -[MPStoreLibraryPersonalizationCollectionDataSource setSectionToLibraryAddedOverride:]
  -[MPStoreLibraryPersonalizationCollectionDataSource _libraryObjectWithRelativeModelClass:identifierSet:propertySet:]
  -[MPStoreLibraryPersonalizationCollectionDataSource relativeModelClassToMappingResponse]
  -[MPStoreLibraryPersonalizationCollectionDataSource setRelativeModelClassToMappingResponse:]
  -[MPStoreLibraryPersonalizationCollectionDataSource setItemProperties:]
  -[MPStoreLibraryPersonalizationCollectionDataSource itemAtIndexPath:]
  -[MPStoreLibraryPersonalizationCollectionDataSource setTranslatingContext:]
  -[MPStoreLibraryPersonalizationCollectionDataSource identifiersForSectionAtIndex:]
  -[MPStoreLibraryPersonalizationCollectionDataSource indexPathForItemWithIdentifiersIntersectingSet:]
  -[MPStoreLibraryPersonalizationCollectionDataSource sectionProperties]
  -[MPStoreLibraryPersonalizationCollectionDataSource setUnpersonalizedContentDescriptors:]
  -[MPStoreLibraryPersonalizationCollectionDataSource sectionToLibraryAddedOverride]


MPRTCWeakLinkSupport : NSObject
  // class methods
  +[MPRTCWeakLinkSupport isRTCReportingSupported]
  +[MPRTCWeakLinkSupport RTCReportingFrameworkPath]
  +[MPRTCWeakLinkSupport newHierarchyTokenFromParentToken:]


MPAudioVideoRoutingPopoverController : UIPopoverController <MPAVRoutingViewControllerDelegate>
 @property  BOOL mirroringOnly
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAudioVideoRoutingPopoverController initWithType:]
  -[MPAudioVideoRoutingPopoverController routingController]
  -[MPAudioVideoRoutingPopoverController .cxx_destruct]
  -[MPAudioVideoRoutingPopoverController routingViewController:didPickRoute:]
  -[MPAudioVideoRoutingPopoverController routingViewControllerDidUpdateContents:]
  -[MPAudioVideoRoutingPopoverController initWithContentViewController:]
  -[MPAudioVideoRoutingPopoverController mirroringOnly]
  -[MPAudioVideoRoutingPopoverController initWithType:includeMirroring:]
  -[MPAudioVideoRoutingPopoverController setMirroringOnly:]
  -[MPAudioVideoRoutingPopoverController dealloc]


MPKeyValueObserver : NSObject
 @property  id object
 @property  NSString *keyPath
 @property  @? handler

  // instance methods
  -[MPKeyValueObserver .cxx_destruct]
  -[MPKeyValueObserver keyPath]
  -[MPKeyValueObserver object]
  -[MPKeyValueObserver initWithObject:keyPath:options:handler:]
  -[MPKeyValueObserver dealloc]
  -[MPKeyValueObserver observeValueForKeyPath:ofObject:change:context:]
  -[MPKeyValueObserver handler]


MPModelLibrarySearchRequestOperation : MPAsyncOperation
 @property  MPModelLibrarySearchRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibrarySearchRequestOperation setRequest:]
  -[MPModelLibrarySearchRequestOperation .cxx_construct]
  -[MPModelLibrarySearchRequestOperation .cxx_destruct]
  -[MPModelLibrarySearchRequestOperation responseHandler]
  -[MPModelLibrarySearchRequestOperation setResponseHandler:]
  -[MPModelLibrarySearchRequestOperation init]
  -[MPModelLibrarySearchRequestOperation execute]
  -[MPModelLibrarySearchRequestOperation request]
  -[MPModelLibrarySearchRequestOperation cancel]


MPStoreItemOffer : NSObject <NSSecureCoding>
 @property  NSArray *assets
 @property  NSString *buyParameters
 @property  NSString *formattedPrice
 @property  NSString *offerType
 @property  NSNumber *price
 @property  NSDictionary *lookupDictionary

  // class methods
  +[MPStoreItemOffer supportsSecureCoding]

  // instance methods
  -[MPStoreItemOffer actionTextForType:]
  -[MPStoreItemOffer initWithCoder:]
  -[MPStoreItemOffer .cxx_destruct]
  -[MPStoreItemOffer assets]
  -[MPStoreItemOffer lookupDictionary]
  -[MPStoreItemOffer formattedPrice]
  -[MPStoreItemOffer isEqual:]
  -[MPStoreItemOffer price]
  -[MPStoreItemOffer initWithLookupDictionary:]
  -[MPStoreItemOffer offerType]
  -[MPStoreItemOffer encodeWithCoder:]
  -[MPStoreItemOffer buyParameters]


MPBaseEntityTranslator : NSObject
 @property  Class MPModelClass

  // class methods
  +[MPBaseEntityTranslator buildSchemaIfNeeded]
  +[MPBaseEntityTranslator translatorForMPModelClass:]
  +[MPBaseEntityTranslator createTranslatorForMPModelClass:]

  // instance methods
  -[MPBaseEntityTranslator .cxx_destruct]
  -[MPBaseEntityTranslator mapUnsupportedPropertyKey:]
  -[MPBaseEntityTranslator MPModelClass]
  -[MPBaseEntityTranslator classForRelationshipKey:]
  -[MPBaseEntityTranslator prepareSource:context:properties:]
  -[MPBaseEntityTranslator _objectForPropertySet:source:context:]
  -[MPBaseEntityTranslator _valueForPropertyKey:source:context:]
  -[MPBaseEntityTranslator initWithMPModelClass:]
  -[MPBaseEntityTranslator _objectForRelationshipKey:propertySet:source:context:]
  -[MPBaseEntityTranslator setSourcePreprocessorBlock:]
  -[MPBaseEntityTranslator mapUnsupportedRelationshipKey:]


_MPBaseEntityRelationshipTranslator : NSObject <MPEntityRelationshipTranslator>
 @property  Class relatedMPModelClass
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPBaseEntityRelationshipTranslator .cxx_destruct]
  -[_MPBaseEntityRelationshipTranslator initWithRelatedMPModelClass:]
  -[_MPBaseEntityRelationshipTranslator relatedMPModelClass]


MPAVOutputDeviceDescription : NSObject
 @property  long long routeType
 @property  long long routeSubtype
 @property  NSString *uid
 @property  NSString *modelID

  // instance methods
  -[MPAVOutputDeviceDescription uid]
  -[MPAVOutputDeviceDescription modelID]
  -[MPAVOutputDeviceDescription .cxx_destruct]
  -[MPAVOutputDeviceDescription isEqual:]
  -[MPAVOutputDeviceDescription routeSubtype]
  -[MPAVOutputDeviceDescription initWithDeviceType:deviceSubtype:uid:modelID:]
  -[MPAVOutputDeviceDescription initWithDeviceType:deviceSubtype:uid:]
  -[MPAVOutputDeviceDescription routeType]


MPAVRoute : NSObject <NSSecureCoding>
 @property  ^v externalDevice
 @property  BOOL isSplitRoute
 @property  long long numberOfOutputDevices
 @property  NSString *routeName
 @property  BOOL picked
 @property  BOOL routingToWirelessDevice
 @property  NSDictionary *avRouteDescription
 @property  MPAVRoute *wirelessDisplayRoute
 @property  long long displayRouteType
 @property  long long originalRouteSubtype
 @property  MPAVRouteConnection *connection
 @property  NSString *designatedGroupLeaderName
 @property  NSArray *routeNames
 @property  NSString *routeUID
 @property  NSString *productIdentifier
 @property  NSString *groupUID
 @property  NSString *designatedGroupLeaderRouteUID
 @property  long long routeType
 @property  long long pickableRouteType
 @property  long long routeSubtype
 @property  NSArray *clusterComposition
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL isDeviceRoute
 @property  BOOL proxyGroupPlayer
 @property  BOOL volumeControlAvailable
 @property  BOOL supportsGrouping
 @property  BOOL supportsAirPlayGrouping
 @property  BOOL supportsRemoteControl
 @property  BOOL splitRoute
 @property  BOOL splitterCapable
 @property  MPAVBatteryLevel *batteryLevel
 @property  NSArray *auxiliaryDevices
 @property  NSString *playingPairedDeviceName
 @property  BOOL pickedOnPairedDevice
 @property  BOOL playingOnPairedDevice
 @property  BOOL airPlayingToDevice
 @property  NSString *groupLeaderAirplayIdentifier
 @property  BOOL requiresPassword
 @property  BOOL supportsWirelessDisplay
 @property  long long passwordType
 @property  BOOL displayAsPicked
 @property  BOOL airpodsRoute
 @property  BOOL appleTVRoute
 @property  BOOL beatsSoloRoute
 @property  BOOL beatsStudioRoute
 @property  BOOL beatsXRoute
 @property  BOOL beatsLegacyRoute
 @property  BOOL carplayRoute
 @property  BOOL deviceSpeakerRoute
 @property  BOOL hearingDeviceRoute
 @property  BOOL homePodRoute
 @property  BOOL powerbeatsRoute
 @property  BOOL smartAudio
 @property  BOOL w1Route
 @property  BOOL airPlayRoute
 @property  BOOL w2Route
 @property  BOOL h1Route
 @property  BOOL shareableRoute
 @property  BOOL headphonesRoute
 @property  BOOL stereoPair
 @property  BOOL tvRoute
 @property  BOOL tvStickRoute
 @property  BOOL setTopBoxRoute
 @property  BOOL phoneRoute
 @property  BOOL macRoute
 @property  BOOL b444Route
 @property  BOOL b298Route
 @property  BOOL b419Route
 @property  BOOL b364Route
 @property  BOOL b372Route
 @property  BOOL b515Route
 @property  BOOL b507Route
 @property  BOOL b494Route
 @property  BOOL b688Route
 @property  BOOL b698Route
 @property  BOOL j327Route
 @property  BOOL b520Route
 @property  BOOL homeTheaterRoute
 @property  BOOL homeTheaterB520Route
 @property  BOOL lowLatencyRoute
 @property  BOOL lowFidelityRoute
 @property  BOOL clusterRoute
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL headTrackedSpatialAudioEnabled
 @property  long long clusterType

  // class methods
  +[MPAVRoute supportsSecureCoding]
  +[MPAVRoute routeSubtypeForMRSubtype:mrType:]
  +[MPAVRoute clusterCompositionForOutputDevice:]
  +[MPAVRoute routeSubtypeForMRSubtype:withOverridesFromMRType:]
  +[MPAVRoute clusterTypeForMRClusterType:]

  // instance methods
  -[MPAVRoute clusterType]
  -[MPAVRoute groupUID]
  -[MPAVRoute passwordType]
  -[MPAVRoute supportsHeadTrackedSpatialAudio]
  -[MPAVRoute batteryLevel]
  -[MPAVRoute presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MPAVRoute playingPairedDeviceName]
  -[MPAVRoute canFetchMediaDataFromSender]
  -[MPAVRoute canAccessRemoteAssets]
  -[MPAVRoute clusterComposition]
  -[MPAVRoute isPickedOnPairedDevice]
  -[MPAVRoute canPlayEncryptedProgressiveDownloadAssets]
  -[MPAVRoute routeName]
  -[MPAVRoute isSetTopBoxRoute]
  -[MPAVRoute routeUID]
  -[MPAVRoute isTVStickRoute]
  -[MPAVRoute isB698Route]
  -[MPAVRoute isAirpodsRoute]
  -[MPAVRoute isB515Route]
  -[MPAVRoute isB688Route]
  -[MPAVRoute isPowerbeatsRoute]
  -[MPAVRoute isBeatsSoloRoute]
  -[MPAVRoute isBeatsStudioRoute]
  -[MPAVRoute isBeatsXRoute]
  -[MPAVRoute isB444Route]
  -[MPAVRoute isB494Route]
  -[MPAVRoute isB419Route]
  -[MPAVRoute isB364Route]
  -[MPAVRoute isB372Route]
  -[MPAVRoute isB507Route]
  -[MPAVRoute isBeatsLegacyRoute]
  -[MPAVRoute isJ327Route]
  -[MPAVRoute isHearingDeviceRoute]
  -[MPAVRoute isHomeTheaterB520Route]
  -[MPAVRoute setRouteName:]
  -[MPAVRoute isProxyGroupPlayer]
  -[MPAVRoute initWithCoder:]
  -[MPAVRoute isVolumeControlAvailable]
  -[MPAVRoute isLowFidelityRoute]
  -[MPAVRoute supportsWirelessDisplay]
  -[MPAVRoute requiresPassword]
  -[MPAVRoute isMacRoute]
  -[MPAVRoute .cxx_destruct]
  -[MPAVRoute isCarplayRoute]
  -[MPAVRoute isTVRoute]
  -[MPAVRoute supportsGrouping]
  -[MPAVRoute headTrackedSpatialAudioEnabled]
  -[MPAVRoute isEqual:]
  -[MPAVRoute connection]
  -[MPAVRoute isHomePodRoute]
  -[MPAVRoute isW1Route]
  -[MPAVRoute isShareableRoute]
  -[MPAVRoute isSmartAudio]
  -[MPAVRoute containsDeviceWithSubtype:]
  -[MPAVRoute isHeadphonesRoute]
  -[MPAVRoute isSplitRoute]
  -[MPAVRoute isPicked]
  -[MPAVRoute isSplitterCapable]
  -[MPAVRoute supportsAirPlayGrouping]
  -[MPAVRoute routeSubtype]
  -[MPAVRoute auxiliaryDevices]
  -[MPAVRoute isDisplayedAsPicked]
  -[MPAVRoute isDeviceRoute]
  -[MPAVRoute isAppleTVRoute]
  -[MPAVRoute isH1Route]
  -[MPAVRoute isW2Route]
  -[MPAVRoute isLowLatencyRoute]
  -[MPAVRoute isStereoPair]
  -[MPAVRoute avRouteDescription]
  -[MPAVRoute designatedGroupLeaderName]
  -[MPAVRoute setAVRouteDescription:]
  -[MPAVRoute isAirPlayingToDevice]
  -[MPAVRoute groupLeaderAirplayIdentifier]
  -[MPAVRoute supportsRemoteControl]
  -[MPAVRoute numberOfOutputDevices]
  -[MPAVRoute isRoutingToWirelessDevice]
  -[MPAVRoute wirelessDisplayRoute]
  -[MPAVRoute setWirelessDisplayRoute:]
  -[MPAVRoute displayRouteType]
  -[MPAVRoute setDisplayRouteType:]
  -[MPAVRoute isPlayingOnPairedDevice]
  -[MPAVRoute _externalDevice]
  -[MPAVRoute isClusterRoute]
  -[MPAVRoute pickableRouteType]
  -[MPAVRoute isAirPlayRoute]
  -[MPAVRoute designatedGroupLeaderRouteUID]
  -[MPAVRoute originalRouteSubtype]
  -[MPAVRoute isDeviceSpeakerRoute]
  -[MPAVRoute isB520Route]
  -[MPAVRoute isPhoneRoute]
  -[MPAVRoute setPicked:]
  -[MPAVRoute isHomeTheaterRoute]
  -[MPAVRoute encodeWithCoder:]
  -[MPAVRoute routeNames]
  -[MPAVRoute productIdentifier]
  -[MPAVRoute isB298Route]
  -[MPAVRoute routeType]


MPModelForYouRecommendationsRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelForYouRecommendationsRequestOperation _responseWithResults:personalizationResponse:]
  -[MPModelForYouRecommendationsRequestOperation _personalizeRecommendationGroup:flatPersonalizedSectionedItems:]
  -[MPModelForYouRecommendationsRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelForYouRecommendationsRequestOperation _missingContentIdentifiersInRecommendationsArray:storeItemMetadataResults:]
  -[MPModelForYouRecommendationsRequestOperation _produceResponseWithRecommendationsArray:storeItemMetadataResults:completion:]
  -[MPModelForYouRecommendationsRequestOperation produceResponseWithLoadedOutput:completion:]


MPStoreLibraryMappingResponse : NSObject
 @property  long long libraryAddedStatus

  // instance methods
  -[MPStoreLibraryMappingResponse .cxx_destruct]
  -[MPStoreLibraryMappingResponse libraryAddedStatus]
  -[MPStoreLibraryMappingResponse libraryIdentifierSetForIdentifierSet:]
  -[MPStoreLibraryMappingResponse setLibraryAddedStatus:]
  -[MPStoreLibraryMappingResponse setLibraryIdentifierSet:forIdentifierSet:]


MPDownloadProgressView : UIView
 @property  double downloadProgress
 @property  UIImage *centerImage
 @property  UIColor *outerRingColor

  // instance methods
  -[MPDownloadProgressView downloadProgress]
  -[MPDownloadProgressView setDownloadProgress:]
  -[MPDownloadProgressView .cxx_destruct]
  -[MPDownloadProgressView layoutSubviews]
  -[MPDownloadProgressView setCenterImage:]
  -[MPDownloadProgressView setOuterRingColor:]
  -[MPDownloadProgressView initWithFrame:]
  -[MPDownloadProgressView centerImage]
  -[MPDownloadProgressView outerRingColor]


_MPDownloadProgressRingView : UIView
 @property  double progress

  // class methods
  +[_MPDownloadProgressRingView layerClass]

  // instance methods
  -[_MPDownloadProgressRingView layoutSubviews]
  -[_MPDownloadProgressRingView tintColorDidChange]
  -[_MPDownloadProgressRingView progress]
  -[_MPDownloadProgressRingView _shouldAnimatePropertyWithKey:]
  -[_MPDownloadProgressRingView initWithFrame:]
  -[_MPDownloadProgressRingView _updateShapePath]
  -[_MPDownloadProgressRingView setProgress:]


MPModelStoreBrowseRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelStoreBrowseRequestOperation .cxx_destruct]
  -[MPModelStoreBrowseRequestOperation execute]
  -[MPModelStoreBrowseRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelStoreBrowseRequestOperation cancel]
  -[MPModelStoreBrowseRequestOperation _nestedRequestsOperationQueue]
  -[MPModelStoreBrowseRequestOperation _produceRegularResponseWithParser:completion:]
  -[MPModelStoreBrowseRequestOperation _produceCarPlayResponseWithParser:withNestedRequestsForEmptyBrickSectionsInOperationQueue:completion:]
  -[MPModelStoreBrowseRequestOperation _produceResponseWithParser:results:changeDetails:completion:]
  -[MPModelStoreBrowseRequestOperation adjustTimeoutInterval:]
  -[MPModelStoreBrowseRequestOperation produceResponseWithLoadedOutput:completion:]


MPMediaKitEntityPayloadTransformer : NSObject
 @property  NSString *transformedType
 @property  NSDictionary *transformedPayload
 @property  NSMutableDictionary *relationships
 @property  NSString *identifier
 @property  NSString *type
 @property  NSMutableDictionary *attributes
 @property  NSMutableDictionary *meta

  // instance methods
  -[MPMediaKitEntityPayloadTransformer relationships]
  -[MPMediaKitEntityPayloadTransformer .cxx_destruct]
  -[MPMediaKitEntityPayloadTransformer transformedPayload]
  -[MPMediaKitEntityPayloadTransformer meta]
  -[MPMediaKitEntityPayloadTransformer identifier]
  -[MPMediaKitEntityPayloadTransformer transformedType]
  -[MPMediaKitEntityPayloadTransformer type]
  -[MPMediaKitEntityPayloadTransformer setIdentifier:]
  -[MPMediaKitEntityPayloadTransformer initWithType:transformedType:]
  -[MPMediaKitEntityPayloadTransformer attributes]


MPMediaKitEntityTranslatorContext : NSObject
 @property  NSString *personID
 @property  <MPMediaKitEntityRelationshipPayloadProvider> *relationshipPayloadProvider

  // instance methods
  -[MPMediaKitEntityTranslatorContext setPersonID:]
  -[MPMediaKitEntityTranslatorContext personID]
  -[MPMediaKitEntityTranslatorContext .cxx_destruct]
  -[MPMediaKitEntityTranslatorContext setRelationshipPayloadProvider:]
  -[MPMediaKitEntityTranslatorContext relationshipPayloadProvider]


_MPMediaKitEntityPropertyTranslator : _MPKeyPathEntityPropertyTranslator

_MPMediaKitEntityRelationshipTranslator : _MPKeyPathEntityRelationshipTranslator
 @property  NSString *mediaKitType
 @property  @? payloadTransformBlock

  // instance methods
  -[_MPMediaKitEntityRelationshipTranslator initWithRelatedMPModelClass:mediaKitType:payloadTransformBlock:]
  -[_MPMediaKitEntityRelationshipTranslator mediaKitType]
  -[_MPMediaKitEntityRelationshipTranslator .cxx_destruct]
  -[_MPMediaKitEntityRelationshipTranslator setMediaKitType:]
  -[_MPMediaKitEntityRelationshipTranslator payloadTransformBlock]
  -[_MPMediaKitEntityRelationshipTranslator prepareSource:context:]


MPMediaKitEntityTranslator : MPBaseEntityTranslator <MPMediaKitGenericObjectTranslator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaKitEntityTranslator buildSchemaIfNeeded]
  +[MPMediaKitEntityTranslator translatorForType:]
  +[MPMediaKitEntityTranslator createGenericObjectTranslator]
  +[MPMediaKitEntityTranslator createTranslatorForMPModelClass:]

  // instance methods
  -[MPMediaKitEntityTranslator mapPropertyKey:toPayloadKeyPaths:valueTransformer:]
  -[MPMediaKitEntityTranslator identifiersForPayload:context:]
  -[MPMediaKitEntityTranslator objectForPropertySet:payload:context:]
  -[MPMediaKitEntityTranslator mapRelationshipKey:toModelClass:mediaKitType:]
  -[MPMediaKitEntityTranslator mapRelationshipKey:toModelClass:mediaKitType:attributePayloadTransform:]
  -[MPMediaKitEntityTranslator mapIdentifierCreationKeyPaths:transformBlock:]
  -[MPMediaKitEntityTranslator mapPropertyKey:toPayloadKeyPaths:valueTransformerFunction:]
  -[MPMediaKitEntityTranslator mapPropertyKey:toPayloadKeyPath:]
  -[MPMediaKitEntityTranslator mapRelationshipKey:toModelClass:mediaKitType:payloadTransform:]


MPModelMovieKind : MPModelKind
 @property  unsigned long variants
 @property  unsigned long options

  // class methods
  +[MPModelMovieKind supportsSecureCoding]
  +[MPModelMovieKind identityKind]
  +[MPModelMovieKind kindWithVariants:options:]

  // instance methods
  -[MPModelMovieKind variants]
  -[MPModelMovieKind predicateWithBaseProperty:]
  -[MPModelMovieKind initWithCoder:]
  -[MPModelMovieKind options]
  -[MPModelMovieKind humanDescription]
  -[MPModelMovieKind representedSearchScopePredicate]
  -[MPModelMovieKind isEqual:]
  -[MPModelMovieKind encodeWithCoder:]


MPModelMovie : MPModelObject
 @property  NSString *title
 @property  NSArray *clips
 @property  NSString *descriptionText
 @property  double duration
 @property  long long explicitRating
 @property  NSString *tagline
 @property  NSDictionary *movieInfoDictionary
 @property  NSDate *releaseDate
 @property  MPModelFileAsset *localFileAsset
 @property  MPModelPlaybackPosition *playbackPosition
 @property  MPModelStoreAsset *storeAsset
 @property  @? artworkCatalogBlock
 @property  @? editorialArtworkCatalogBlock
 @property  BOOL hasCloudSyncSource
 @property  BOOL libraryAdded
 @property  NSDate *libraryAddedDate
 @property  BOOL libraryAddEligible
 @property  long long keepLocalEnableState
 @property  long long keepLocalManagedStatus
 @property  NSDate *downloadedDate
 @property  NSDate *lastDevicePlaybackDate

  // class methods
  +[MPModelMovie __artworkCatalogBlock_KEY]
  +[MPModelMovie genericObjectType]
  +[MPModelMovie __descriptionText_KEY]
  +[MPModelMovie __explicitRating_KEY]
  +[MPModelMovie __releaseDate_KEY]
  +[MPModelMovie kindWithVariants:]
  +[MPModelMovie classesForSecureCoding]
  +[MPModelMovie supportsKeepLocalStatusObservation]
  +[MPModelMovie requiredKeepLocalStatusObservationProperties]
  +[MPModelMovie __clips_KEY]
  +[MPModelMovie __title_KEY]
  +[MPModelMovie __duration_KEY]
  +[MPModelMovie __localFileAsset_KEY]
  +[MPModelMovie __keepLocalEnableState_KEY]
  +[MPModelMovie __keepLocalManagedStatus_KEY]
  +[MPModelMovie __libraryAdded_KEY]
  +[MPModelMovie __libraryAddedDate_KEY]
  +[MPModelMovie __lastDevicePlaybackDate_KEY]
  +[MPModelMovie __libraryAddEligible_KEY]
  +[MPModelMovie __hasCloudSyncSource_KEY]
  +[MPModelMovie __storeAsset_KEY]
  +[MPModelMovie __playbackPosition_KEY]
  +[MPModelMovie __downloadedDate_KEY]
  +[MPModelMovie __tagline_KEY]
  +[MPModelMovie __movieInfoDictionary_KEY]
  +[MPModelMovie kindWithVariants:options:]
  +[MPModelMovie supportsLibraryAddStatusObservation]
  +[MPModelMovie requiredLibraryAddStatusObservationProperties]
  +[MPModelMovie requiredLibraryRemovalProperties]
  +[MPModelMovie supportsLibraryRemoval]
  +[MPModelMovie requiredStoreLibraryPersonalizationProperties]
  +[MPModelMovie __editorialArtworkCatalogBlock_KEY]

  // instance methods
  -[MPModelMovie editorialArtworkCatalog]
  -[MPModelMovie humanDescription]
  -[MPModelMovie mediaItemPropertyValues]
  -[MPModelMovie relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelMovie personalizationScopedPropertiesForProperties:]
  -[MPModelMovie objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelMovie artworkCatalog]
  -[MPModelMovie libraryAddStatusObserverConfiguration]
  -[MPModelMovie libraryRemovalSupportedOptions]
  -[MPModelMovie newKeepLocalStatusObserverConfiguration]


MPModelRadioStationKind : MPModelKind
  // class methods
  +[MPModelRadioStationKind identityKind]

  // instance methods
  -[MPModelRadioStationKind humanDescription]


MPModelRadioStation : MPModelObject
 @property  BOOL beats1
 @property  BOOL live
 @property  NSString *name
 @property  NSString *editorNotes
 @property  NSString *shortEditorNotes
 @property  BOOL hasExplicitContent
 @property  NSArray *stationEvents
 @property  @? artworkCatalogBlock
 @property  @? stationGlyphBlock
 @property  BOOL allowsItemLiking
 @property  long long type
 @property  long long subtype
 @property  NSString *attributionLabel
 @property  NSString *providerName
 @property  BOOL subscriptionRequired
 @property  NSURL *providerUniversalLink
 @property  NSString *providerBundleIdentifier
 @property  NSDate *startingAirDate
 @property  NSDate *endingAirDate
 @property  NSString *playbackAuthorizationToken
 @property  MPRadioStationEvent *currentStationEvent
 @property  MPRadioStationEvent *upcomingStationEvent
 @property  long long providerID

  // class methods
  +[MPModelRadioStation __subtype_KEY]
  +[MPModelRadioStation __artworkCatalogBlock_KEY]
  +[MPModelRadioStation genericObjectType]
  +[MPModelRadioStation __providerUniversalLink_KEY]
  +[MPModelRadioStation __live_KEY]
  +[MPModelRadioStation __type_KEY]
  +[MPModelRadioStation __shortEditorNotes_KEY]
  +[MPModelRadioStation __allowsItemLiking_KEY]
  +[MPModelRadioStation __hasExplicitContent_KEY]
  +[MPModelRadioStation __providerID_KEY]
  +[MPModelRadioStation classesForSecureCoding]
  +[MPModelRadioStation __name_KEY]
  +[MPModelRadioStation __subscriptionRequired_KEY]
  +[MPModelRadioStation __beats1_KEY]
  +[MPModelRadioStation __attributionLabel_KEY]
  +[MPModelRadioStation __editorNotes_KEY]
  +[MPModelRadioStation __providerBundleIdentifier_KEY]
  +[MPModelRadioStation __stationGlyphBlock_KEY]
  +[MPModelRadioStation __endingAirDate_KEY]
  +[MPModelRadioStation __startingAirDate_KEY]
  +[MPModelRadioStation __stationEvents_KEY]
  +[MPModelRadioStation __providerName_KEY]

  // instance methods
  -[MPModelRadioStation .cxx_destruct]
  -[MPModelRadioStation humanDescription]
  -[MPModelRadioStation contentItemCollectionInfo]
  -[MPModelRadioStation playbackAuthorizationToken]
  -[MPModelRadioStation stationGlyph]
  -[MPModelRadioStation currentStationEvent]
  -[MPModelRadioStation upcomingStationEvent]
  -[MPModelRadioStation artworkCatalog]
  -[MPModelRadioStation setPlaybackAuthorizationToken:]


MPModelGroupKind : MPModelKind
  // class methods
  +[MPModelGroupKind identityKind]

  // instance methods
  -[MPModelGroupKind humanDescription]


MPModelGroup : MPModelObject
 @property  NSString *title

  // class methods
  +[MPModelGroup genericObjectType]
  +[MPModelGroup kind]
  +[MPModelGroup __title_KEY]

  // instance methods
  -[MPModelGroup humanDescription]


MPModelTVShowCreator : MPModelPerson
 @property  @? artworkCatalogBlock

  // class methods
  +[MPModelTVShowCreator __artworkCatalogBlock_KEY]

  // instance methods
  -[MPModelTVShowCreator artworkCatalog]


MPPlaceholderArtwork : NSObject
  // class methods
  +[MPPlaceholderArtwork noArtPlaceholderImageForMediaType:]


MPAVClippingTableView : UITableView
 @property  NSMutableDictionary *sectionBackgroundViews
 @property  UIView *headerBackgroundView
 @property  UIView *footerBackgroundView

  // instance methods
  -[MPAVClippingTableView .cxx_destruct]
  -[MPAVClippingTableView initWithFrame:style:]
  -[MPAVClippingTableView layoutSubviews]
  -[MPAVClippingTableView _createBackgroundView]
  -[MPAVClippingTableView backgroundViewForSection:]
  -[MPAVClippingTableView headerBackgroundView]
  -[MPAVClippingTableView setHeaderBackgroundView:]
  -[MPAVClippingTableView footerBackgroundView]
  -[MPAVClippingTableView setFooterBackgroundView:]
  -[MPAVClippingTableView sectionBackgroundViews]
  -[MPAVClippingTableView setSectionBackgroundViews:]


MPModelPlaylistEntriesShareEligibilityRequestOperation : MPAsyncOperation
 @property  MPModelPlaylistEntriesShareEligibilityRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation setRequest:]
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation .cxx_destruct]
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation responseHandler]
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation setResponseHandler:]
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation execute]
  -[MPModelPlaylistEntriesShareEligibilityRequestOperation request]


MPModelLibraryAddToPlaylistChangeRequestOperation : MPAsyncOperation
 @property  MPModelLibraryAddToPlaylistChangeRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryAddToPlaylistChangeRequestOperation setRequest:]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation responseHandler]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation execute]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation _isCloudLibraryEnabled]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation request]
  -[MPModelLibraryAddToPlaylistChangeRequestOperation _updateCloudLibraryForPlaylist:]


MPStoreModelPlaybackPositionBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelPlaybackPositionBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelPlaybackPositionBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPModelPodcastKind : MPModelKind
 @property  MPModelPodcastEpisodeKind *episodeKind

  // class methods
  +[MPModelPodcastKind supportsSecureCoding]
  +[MPModelPodcastKind identityKind]
  +[MPModelPodcastKind kindWithEpisodeKind:]

  // instance methods
  -[MPModelPodcastKind initWithCoder:]
  -[MPModelPodcastKind .cxx_destruct]
  -[MPModelPodcastKind humanDescription]
  -[MPModelPodcastKind applyToView:withContext:]
  -[MPModelPodcastKind isEqual:]
  -[MPModelPodcastKind episodeKind]
  -[MPModelPodcastKind encodeWithCoder:]


MPModelPodcast : MPModelObject
 @property  NSString *title
 @property  NSURL *feedURL
 @property  NSURL *shareURL
 @property  BOOL supportsSubscription
 @property  MPModelPodcastAuthor *author
 @property  @? artworkCatalogBlock

  // class methods
  +[MPModelPodcast __artworkCatalogBlock_KEY]
  +[MPModelPodcast genericObjectType]
  +[MPModelPodcast __title_KEY]
  +[MPModelPodcast __feedURL_KEY]
  +[MPModelPodcast __shareURL_KEY]
  +[MPModelPodcast __supportsSubscription_KEY]
  +[MPModelPodcast __author_KEY]
  +[MPModelPodcast kindWithEpisodeKind:]

  // instance methods
  -[MPModelPodcast humanDescription]
  -[MPModelPodcast artworkCatalog]


MPStoreModelRecordLabelBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelRecordLabelBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelRecordLabelBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPVolumeHardwareButtonController : NSObject
 @property  <MPVolumeControllerDataSource> *activeDataSource

  // class methods
  +[MPVolumeHardwareButtonController sharedController]

  // instance methods
  -[MPVolumeHardwareButtonController increaseVolume]
  -[MPVolumeHardwareButtonController _commitVolumeChange]
  -[MPVolumeHardwareButtonController _calculateButtonRepeatDelay]
  -[MPVolumeHardwareButtonController _volumeUpButtonTouchUp:]
  -[MPVolumeHardwareButtonController activeDataSource]
  -[MPVolumeHardwareButtonController .cxx_destruct]
  -[MPVolumeHardwareButtonController handleVolumeUpButton]
  -[MPVolumeHardwareButtonController handleVolumeDownButton]
  -[MPVolumeHardwareButtonController decreaseVolume]
  -[MPVolumeHardwareButtonController _volumeDownButtonTouchDown:]
  -[MPVolumeHardwareButtonController setActiveDataSource:]
  -[MPVolumeHardwareButtonController _changeVolumeBy:]
  -[MPVolumeHardwareButtonController _unregisterForButtonNotificationsIfNeeded]
  -[MPVolumeHardwareButtonController handleVolumeButtonWithType:down:]
  -[MPVolumeHardwareButtonController _volumeUpButtonTouchDown:]
  -[MPVolumeHardwareButtonController _applicationWillResignActiveNotification]
  -[MPVolumeHardwareButtonController _init]
  -[MPVolumeHardwareButtonController cancelVolumeEvent]
  -[MPVolumeHardwareButtonController _applicationDidBecomeActiveNotification]
  -[MPVolumeHardwareButtonController _registerForButtonNotificationsIfNeeded]
  -[MPVolumeHardwareButtonController _volumeDownButtonTouchUp:]


MPModelLibraryHasBeenPlayedChangeRequest : NSObject
 @property  MPMediaLibrary *mediaLibrary
 @property  MPModelObject *model
 @property  BOOL hasBeenPlayed

  // instance methods
  -[MPModelLibraryHasBeenPlayedChangeRequest setMediaLibrary:]
  -[MPModelLibraryHasBeenPlayedChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryHasBeenPlayedChangeRequest mediaLibrary]
  -[MPModelLibraryHasBeenPlayedChangeRequest .cxx_destruct]
  -[MPModelLibraryHasBeenPlayedChangeRequest hasBeenPlayed]
  -[MPModelLibraryHasBeenPlayedChangeRequest setHasBeenPlayed:]
  -[MPModelLibraryHasBeenPlayedChangeRequest model]
  -[MPModelLibraryHasBeenPlayedChangeRequest initWithModel:]


MPStoreArtworkDataSource : MPAbstractNetworkArtworkDataSource
 @property  double maxHEICRequestPercentage

  // class methods
  +[MPStoreArtworkDataSource sharedStoreArtworkDataSource]

  // instance methods
  -[MPStoreArtworkDataSource requestForCatalog:kind:size:]
  -[MPStoreArtworkDataSource wantsBackgroundImageDecompression]
  -[MPStoreArtworkDataSource _bestSizeForImageSizeInfo:catalog:]
  -[MPStoreArtworkDataSource setMaxHEICRequestPercentage:]
  -[MPStoreArtworkDataSource existingArtworkEffectResultForEffectType:catalog:options:]
  -[MPStoreArtworkDataSource _bestURLForCatalog:kind:size:]
  -[MPStoreArtworkDataSource init]
  -[MPStoreArtworkDataSource areRepresentationsOfKind:availableForCatalog:]
  -[MPStoreArtworkDataSource sortedSupportedSizesForCatalog:]
  -[MPStoreArtworkDataSource cacheKeyForCatalog:kind:size:]
  -[MPStoreArtworkDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPStoreArtworkDataSource getExportableArtworkPropertiesForCatalog:completionHandler:]
  -[MPStoreArtworkDataSource supportedSizesForCatalog:]
  -[MPStoreArtworkDataSource maxHEICRequestPercentage]
  -[MPStoreArtworkDataSource bestAvailableSizeForCatalog:]


MPMediaQuerySection : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *title
 @property  {_NSRange=QQ} range
 @property  unsigned long sectionIndexTitleIndex

  // class methods
  +[MPMediaQuerySection supportsSecureCoding]

  // instance methods
  -[MPMediaQuerySection range]
  -[MPMediaQuerySection initWithCoder:]
  -[MPMediaQuerySection setTitle:]
  -[MPMediaQuerySection .cxx_destruct]
  -[MPMediaQuerySection setRange:]
  -[MPMediaQuerySection init]
  -[MPMediaQuerySection title]
  -[MPMediaQuerySection sectionIndexTitleIndex]
  -[MPMediaQuerySection setSectionIndexTitleIndex:]
  -[MPMediaQuerySection _init]
  -[MPMediaQuerySection copyWithZone:]
  -[MPMediaQuerySection encodeWithCoder:]


MPARC4RandomSource : NSObject <MPRandom, NSSecureCoding, NSCopying>
 @property  NSData *seed

  // class methods
  +[MPARC4RandomSource supportsSecureCoding]

  // instance methods
  -[MPARC4RandomSource seed]
  -[MPARC4RandomSource initWithCoder:]
  -[MPARC4RandomSource initWithSeed:]
  -[MPARC4RandomSource .cxx_destruct]
  -[MPARC4RandomSource setSeed:]
  -[MPARC4RandomSource init]
  -[MPARC4RandomSource dealloc]
  -[MPARC4RandomSource copyWithZone:]
  -[MPARC4RandomSource nextIntWithUpperBound:]
  -[MPARC4RandomSource encodeWithCoder:]


MPRandomDistribution : NSObject <MPRandom, NSSecureCoding>
 @property  long long lowestValue
 @property  long long highestValue
 @property  unsigned long numberOfPossibleOutcomes

  // class methods
  +[MPRandomDistribution supportsSecureCoding]

  // instance methods
  -[MPRandomDistribution initWithCoder:]
  -[MPRandomDistribution .cxx_destruct]
  -[MPRandomDistribution init]
  -[MPRandomDistribution lowestValue]
  -[MPRandomDistribution highestValue]
  -[MPRandomDistribution numberOfPossibleOutcomes]
  -[MPRandomDistribution initWithRandomSource:lowestValue:highestValue:]
  -[MPRandomDistribution nextIntWithUpperBound:]
  -[MPRandomDistribution encodeWithCoder:]


MPArtworkResizeOperation : NSOperation
 @property  UIImage *image
 @property  {CGSize=dd} scaledFittingSize
 @property  BOOL usesExactFittingSizeAsDestinationSize
 @property  UIImage *resizedImage
 @property  NSError *error
 @property  NSURL *destinationURL
 @property  NSObject<OS_dispatch_group> *operationGroup

  // instance methods
  -[MPArtworkResizeOperation operationGroup]
  -[MPArtworkResizeOperation main]
  -[MPArtworkResizeOperation image]
  -[MPArtworkResizeOperation .cxx_destruct]
  -[MPArtworkResizeOperation scaledFittingSize]
  -[MPArtworkResizeOperation destinationURL]
  -[MPArtworkResizeOperation setImage:]
  -[MPArtworkResizeOperation setScaledFittingSize:]
  -[MPArtworkResizeOperation initWithImage:scaledFittingSize:destinationURL:]
  -[MPArtworkResizeOperation _resizedScaledSizeForScaledImageSize:scaledFittingSize:]
  -[MPArtworkResizeOperation usesExactFittingSizeAsDestinationSize]
  -[MPArtworkResizeOperation initWithImage:scaledFittingSize:]
  -[MPArtworkResizeOperation setUsesExactFittingSizeAsDestinationSize:]
  -[MPArtworkResizeOperation initWithImage:scaledFittingSize:useExactFittingSizeAsDestinationSize:destinationURL:]
  -[MPArtworkResizeOperation resizedImage]
  -[MPArtworkResizeOperation error]


MPBrowsableContentItem : MPContentItem

MPArtworkColorAnalysis : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  UIColor *backgroundColor
 @property  UIColor *primaryTextColor
 @property  UIColor *secondaryTextColor
 @property  BOOL backgroundColorLight
 @property  BOOL primaryTextColorLight
 @property  BOOL secondaryTextColorLight

  // class methods
  +[MPArtworkColorAnalysis supportsSecureCoding]

  // instance methods
  -[MPArtworkColorAnalysis initWithCoder:]
  -[MPArtworkColorAnalysis backgroundColor]
  -[MPArtworkColorAnalysis .cxx_destruct]
  -[MPArtworkColorAnalysis setBackgroundColor:]
  -[MPArtworkColorAnalysis setSecondaryTextColor:]
  -[MPArtworkColorAnalysis mutableCopyWithZone:]
  -[MPArtworkColorAnalysis isBackgroundColorLight]
  -[MPArtworkColorAnalysis primaryTextColor]
  -[MPArtworkColorAnalysis isPrimaryTextColorLight]
  -[MPArtworkColorAnalysis secondaryTextColor]
  -[MPArtworkColorAnalysis isSecondaryTextColorLight]
  -[MPArtworkColorAnalysis _copyWithClass:]
  -[MPArtworkColorAnalysis copyWithZone:]
  -[MPArtworkColorAnalysis encodeWithCoder:]
  -[MPArtworkColorAnalysis setPrimaryTextColor:]


MPMutableArtworkColorAnalysis : MPArtworkColorAnalysis
 @property  UIColor *backgroundColor
 @property  UIColor *primaryTextColor
 @property  UIColor *secondaryTextColor
 @property  BOOL backgroundColorLight
 @property  BOOL primaryTextColorLight
 @property  BOOL secondaryTextColorLight

  // instance methods
  -[MPMutableArtworkColorAnalysis setPrimaryTextColorLight:]
  -[MPMutableArtworkColorAnalysis setBackgroundColor:]
  -[MPMutableArtworkColorAnalysis setSecondaryTextColor:]
  -[MPMutableArtworkColorAnalysis setSecondaryTextColorLight:]
  -[MPMutableArtworkColorAnalysis copyWithZone:]
  -[MPMutableArtworkColorAnalysis setBackgroundColorLight:]
  -[MPMutableArtworkColorAnalysis setPrimaryTextColor:]


MPVolumeGroupSliderCoordinator : NSObject
 @property  MPVolumeSlider *masterVolumeSlider
 @property  NSArray *individualVolumeSliders
 @property  BOOL synced

  // instance methods
  -[MPVolumeGroupSliderCoordinator _updateOptimisticValueCache]
  -[MPVolumeGroupSliderCoordinator _setControlEventsForVolumeSlider:add:]
  -[MPVolumeGroupSliderCoordinator .cxx_destruct]
  -[MPVolumeGroupSliderCoordinator synced]
  -[MPVolumeGroupSliderCoordinator _resetOptimisticScales]
  -[MPVolumeGroupSliderCoordinator removeIndividualVolumeSlider:]
  -[MPVolumeGroupSliderCoordinator _addControlEventsForVolumeSliders:]
  -[MPVolumeGroupSliderCoordinator removeAllIndividualVolumeSliders]
  -[MPVolumeGroupSliderCoordinator initWithMasterVolumeSlider:individualVolumeSliders:]
  -[MPVolumeGroupSliderCoordinator _removeControlEventsForVolumeSlider:]
  -[MPVolumeGroupSliderCoordinator _resetMasterVolumeSlider]
  -[MPVolumeGroupSliderCoordinator volumeSliderValueChanged:]
  -[MPVolumeGroupSliderCoordinator syncSliders:]
  -[MPVolumeGroupSliderCoordinator _findExistingVolumeSlider:]
  -[MPVolumeGroupSliderCoordinator addIndividualVolumeSlider:]
  -[MPVolumeGroupSliderCoordinator _removeControlEventsForVolumeSliders:]
  -[MPVolumeGroupSliderCoordinator masterVolumeSlider]
  -[MPVolumeGroupSliderCoordinator volumeSliderDidEndTracking:]
  -[MPVolumeGroupSliderCoordinator _addControlEventsForVolumeSlider:]
  -[MPVolumeGroupSliderCoordinator individualVolumeSliders]
  -[MPVolumeGroupSliderCoordinator _maxOptimisticValue]


MPModelStoreBrowseContentItem : MPModelObject
 @property  unsigned long itemType
 @property  NSString *artistUploadedContentType
 @property  MPModelArtist *artist
 @property  MPModelAlbum *album
 @property  MPModelCurator *curator
 @property  MPModelMediaClip *mediaClip
 @property  MPModelMovie *movie
 @property  MPModelPlaylist *playlist
 @property  MPModelRadioStation *radioStation
 @property  MPModelSocialPerson *socialPerson
 @property  MPModelSong *song
 @property  MPModelTVEpisode *episode
 @property  MPModelTVSeason *season
 @property  MPModelTVShow *show
 @property  MPModelTVShowCreator *showCreator
 @property  MPModelRecordLabel *recordLabel
 @property  long long detailedItemType

  // class methods
  +[MPModelStoreBrowseContentItem __show_KEY]
  +[MPModelStoreBrowseContentItem __socialPerson_KEY]
  +[MPModelStoreBrowseContentItem __detailedItemType_KEY]
  +[MPModelStoreBrowseContentItem __artist_KEY]
  +[MPModelStoreBrowseContentItem __radioStation_KEY]
  +[MPModelStoreBrowseContentItem __season_KEY]
  +[MPModelStoreBrowseContentItem __itemType_KEY]
  +[MPModelStoreBrowseContentItem __album_KEY]
  +[MPModelStoreBrowseContentItem __curator_KEY]
  +[MPModelStoreBrowseContentItem __recordLabel_KEY]
  +[MPModelStoreBrowseContentItem __song_KEY]
  +[MPModelStoreBrowseContentItem __showCreator_KEY]
  +[MPModelStoreBrowseContentItem __mediaClip_KEY]
  +[MPModelStoreBrowseContentItem __playlist_KEY]
  +[MPModelStoreBrowseContentItem __movie_KEY]
  +[MPModelStoreBrowseContentItem __episode_KEY]
  +[MPModelStoreBrowseContentItem requiredStoreLibraryPersonalizationProperties]
  +[MPModelStoreBrowseContentItem __artistUploadedContentType_KEY]

  // instance methods
  -[MPModelStoreBrowseContentItem relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelStoreBrowseContentItem personalizationScopedPropertiesForProperties:]
  -[MPModelStoreBrowseContentItem objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelStoreBrowseContentItem innerObject]


MPMediaBooklet : NSObject
 @property  unsigned long itemPersistentID
 @property  NSString *name
 @property  long long storeItemID
 @property  NSString *redownloadParams
 @property  long long fileSize

  // instance methods
  -[MPMediaBooklet fileSize]
  -[MPMediaBooklet name]
  -[MPMediaBooklet setFileSize:]
  -[MPMediaBooklet setStoreItemID:]
  -[MPMediaBooklet storeItemID]
  -[MPMediaBooklet .cxx_destruct]
  -[MPMediaBooklet setRedownloadParams:]
  -[MPMediaBooklet setName:]
  -[MPMediaBooklet redownloadParams]
  -[MPMediaBooklet setItemPersistentID:]
  -[MPMediaBooklet itemPersistentID]


MPModelStoreBrowseRoomRequest : MPStoreModelRequest
 @property  NSURL *loadAdditionalContentURL
 @property  NSString *roomID
 @property  MPModelStoreBrowseResponse *previousRetrievedNestedResponse
 @property  MPModelStoreBrowseResponse *previousResponse

  // class methods
  +[MPModelStoreBrowseRoomRequest supportsSecureCoding]
  +[MPModelStoreBrowseRoomRequest allSupportedItemProperties]
  +[MPModelStoreBrowseRoomRequest allSupportedSectionProperties]

  // instance methods
  -[MPModelStoreBrowseRoomRequest newOperationWithResponseHandler:]
  -[MPModelStoreBrowseRoomRequest initWithCoder:]
  -[MPModelStoreBrowseRoomRequest roomID]
  -[MPModelStoreBrowseRoomRequest setPreviousResponse:]
  -[MPModelStoreBrowseRoomRequest .cxx_destruct]
  -[MPModelStoreBrowseRoomRequest previousResponse]
  -[MPModelStoreBrowseRoomRequest setRoomID:]
  -[MPModelStoreBrowseRoomRequest setLoadAdditionalContentURL:]
  -[MPModelStoreBrowseRoomRequest copyWithZone:]
  -[MPModelStoreBrowseRoomRequest encodeWithCoder:]
  -[MPModelStoreBrowseRoomRequest loadAdditionalContentURL]
  -[MPModelStoreBrowseRoomRequest setPreviousRetrievedNestedResponse:]
  -[MPModelStoreBrowseRoomRequest configureWithParentSection:]
  -[MPModelStoreBrowseRoomRequest previousRetrievedNestedResponse]


MPStoreModelTVEpisodeBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelTVEpisodeBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelTVEpisodeBuilder .cxx_destruct]
  -[MPStoreModelTVEpisodeBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPMediaLibrarySystemFilters : NSObject
  // class methods
  +[MPMediaLibrarySystemFilters globalSerialQueue]
  +[MPMediaLibrarySystemFilters filtersForLibrary:]
  +[MPMediaLibrarySystemFilters systemFiltersPerLibrary]

  // instance methods
  -[MPMediaLibrarySystemFilters shouldExcludePurchaseHistoryContent]
  -[MPMediaLibrarySystemFilters .cxx_destruct]
  -[MPMediaLibrarySystemFilters _cloudLibraryAvailabilityDidChange:]
  -[MPMediaLibrarySystemFilters _updateFilters]
  -[MPMediaLibrarySystemFilters _initWithLibrary:]


MPPSearchStringPredicate : PBCodable <NSCopying>
 @property  BOOL hasSearchString
 @property  NSString *searchString
 @property  NSMutableArray *properties

  // instance methods
  -[MPPSearchStringPredicate setSearchString:]
  -[MPPSearchStringPredicate searchString]
  -[MPPSearchStringPredicate .cxx_destruct]
  -[MPPSearchStringPredicate dictionaryRepresentation]
  -[MPPSearchStringPredicate properties]
  -[MPPSearchStringPredicate propertiesCount]
  -[MPPSearchStringPredicate clearProperties]
  -[MPPSearchStringPredicate addProperties:]
  -[MPPSearchStringPredicate writeTo:]
  -[MPPSearchStringPredicate propertiesAtIndex:]
  -[MPPSearchStringPredicate isEqual:]
  -[MPPSearchStringPredicate copyTo:]
  -[MPPSearchStringPredicate hasSearchString]
  -[MPPSearchStringPredicate readFrom:]
  -[MPPSearchStringPredicate setProperties:]
  -[MPPSearchStringPredicate dealloc]
  -[MPPSearchStringPredicate copyWithZone:]


MPMediaLibraryDataProviderSystemML3 : MPMediaLibraryDataProviderML3
  // class methods
  +[MPMediaLibraryDataProviderSystemML3 _localizedGeniusErrorForError:geniusEnabled:]
  +[MPMediaLibraryDataProviderSystemML3 _localizedCloudGeniusErrorForError:]

  // instance methods
  -[MPMediaLibraryDataProviderSystemML3 isGeniusEnabled]
  -[MPMediaLibraryDataProviderSystemML3 errorResolverForItem:]
  -[MPMediaLibraryDataProviderSystemML3 initWithLibrary:]
  -[MPMediaLibraryDataProviderSystemML3 .cxx_destruct]
  -[MPMediaLibraryDataProviderSystemML3 seedPlaylistWithIdentifier:withItemWithIdentifier:completionBlock:]
  -[MPMediaLibraryDataProviderSystemML3 generateItemIdentifiersForGeniusClusterPlaylist:count:error:]
  -[MPMediaLibraryDataProviderSystemML3 supportsEntityChangeTrackingForMediaEntityType:collectionGroupingType:dataProviderClass:]
  -[MPMediaLibraryDataProviderSystemML3 _seedCloudPlaylistWithTrack:container:completionBlock:]
  -[MPMediaLibraryDataProviderSystemML3 geniusItemsForSeedItem:completion:]
  -[MPMediaLibraryDataProviderSystemML3 updateEntitesToCurrentRevision]
  -[MPMediaLibraryDataProviderSystemML3 _initInstanceVariableOnce]
  -[MPMediaLibraryDataProviderSystemML3 createGeniusClusterPlaylistWithSeedItemIdentifiers:count:error:]
  -[MPMediaLibraryDataProviderSystemML3 releaseGeniusClusterPlaylist:]
  -[MPMediaLibraryDataProviderSystemML3 _currentRevision]


MPStoreModelGenericObjectBuilder : MPStoreModelObjectBuilder
 @property  BOOL shouldUsePlaylistEntry

  // instance methods
  -[MPStoreModelGenericObjectBuilder .cxx_destruct]
  -[MPStoreModelGenericObjectBuilder setShouldUsePlaylistEntry:]
  -[MPStoreModelGenericObjectBuilder shouldUsePlaylistEntry]
  -[MPStoreModelGenericObjectBuilder setPreventStoreItemMetadataCaching:]
  -[MPStoreModelGenericObjectBuilder _modelObjectWithUniqueContentItemIDForModelObject:]
  -[MPStoreModelGenericObjectBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


_MPKeyPathEntityPropertyTranslator : NSObject <MPEntityPropertyTranslator>
 @property  NSArray *sourceKeyPaths
 @property  @? valueTransformBlock
 @property  ^? valueTransformFunction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPKeyPathEntityPropertyTranslator translatorForKeyPaths:valueTransformBlock:]
  +[_MPKeyPathEntityPropertyTranslator translatorForKeyPaths:valueTransformFunction:]

  // instance methods
  -[_MPKeyPathEntityPropertyTranslator valueTransformBlock]
  -[_MPKeyPathEntityPropertyTranslator .cxx_destruct]
  -[_MPKeyPathEntityPropertyTranslator valueFromSource:context:]
  -[_MPKeyPathEntityPropertyTranslator sourceKeyPaths]
  -[_MPKeyPathEntityPropertyTranslator valueTransformFunction]


_MPKeyPathEntityRelationshipTranslator : NSObject <MPEntityRelationshipTranslator>
 @property  Class relatedMPModelClass
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPKeyPathEntityRelationshipTranslator .cxx_destruct]
  -[_MPKeyPathEntityRelationshipTranslator initWithRelatedMPModelClass:]
  -[_MPKeyPathEntityRelationshipTranslator relatedMPModelClass]


MPStoreRadioStreamAssetInfo : NSObject
 @property  long long flavor
 @property  long long streamProtocol
 @property  NSURL *streamURL
 @property  NSURL *keyCertificateURL
 @property  NSURL *keyServerURL
 @property  BOOL iTunesStoreStream

  // instance methods
  -[MPStoreRadioStreamAssetInfo .cxx_destruct]
  -[MPStoreRadioStreamAssetInfo streamURL]
  -[MPStoreRadioStreamAssetInfo flavor]
  -[MPStoreRadioStreamAssetInfo keyServerURL]
  -[MPStoreRadioStreamAssetInfo isITunesStoreStream]
  -[MPStoreRadioStreamAssetInfo MPStoreRadioStreamFlavorFromICStoreRadioStreamFlavor:]
  -[MPStoreRadioStreamAssetInfo streamProtocol]
  -[MPStoreRadioStreamAssetInfo MPStoreRadioStreamProtocolFromICStoreRadioStreamProtocol:]
  -[MPStoreRadioStreamAssetInfo initWithiTunesCloudStoreRadioStreamAssetInfo:]
  -[MPStoreRadioStreamAssetInfo setITunesStoreStream:]
  -[MPStoreRadioStreamAssetInfo keyCertificateURL]
  -[MPStoreRadioStreamAssetInfo isiTunesStoreStream]


MPMediaAPICollectionItemAuthTokenRenewalRequest : NSObject <MPMediaAPIMetadaRequestProtocol>
 @property  BOOL shouldResolveRequestItemsLocally
 @property  NSUUID *requestIdentifier
 @property  long long requestItemCount
 @property  NSProgress *progress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest requestIdentifier]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest .cxx_destruct]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest progress]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest requestItemCount]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest _resolveRequestItemsWithSOD:]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest _getNextBatchBatch]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest initWithItemIdentifiers:personID:requestContext:]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest _renewPlaybackAuthorizationTokensForBatch:progressHandler:]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest _itemIDsFromRequestIdentifiers]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest _notifyBatchProgressWithResponseDictionary:tokenHalfLifeDuration:error:finalResponse:progressHandler:]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest cancelRequest]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest shouldResolveRequestItemsLocally]
  -[MPMediaAPICollectionItemAuthTokenRenewalRequest executeRequestWithBatchProgressHandler:]


MPAVBatteryLevel : NSObject
 @property  NSNumber *leftPercentage
 @property  NSNumber *rightPercentage
 @property  NSNumber *singlePercentage
 @property  NSNumber *casePercentage

  // instance methods
  -[MPAVBatteryLevel singlePercentage]
  -[MPAVBatteryLevel .cxx_destruct]
  -[MPAVBatteryLevel isEqual:]
  -[MPAVBatteryLevel leftPercentage]
  -[MPAVBatteryLevel rightPercentage]
  -[MPAVBatteryLevel initWithRouteDescription:]
  -[MPAVBatteryLevel initWithOutputDevice:]
  -[MPAVBatteryLevel casePercentage]


MPStoreLibraryPersonalizationRequestOperation : MPAsyncOperation
 @property  MPStoreLibraryPersonalizationRequest *request
 @property  @? responseHandler

  // class methods
  +[MPStoreLibraryPersonalizationRequestOperation personalizedResponseForContentDescriptor:requestedProperties:]

  // instance methods
  -[MPStoreLibraryPersonalizationRequestOperation setRequest:]
  -[MPStoreLibraryPersonalizationRequestOperation .cxx_destruct]
  -[MPStoreLibraryPersonalizationRequestOperation responseHandler]
  -[MPStoreLibraryPersonalizationRequestOperation setResponseHandler:]
  -[MPStoreLibraryPersonalizationRequestOperation execute]
  -[MPStoreLibraryPersonalizationRequestOperation request]
  -[MPStoreLibraryPersonalizationRequestOperation cancel]


_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation : MPAsyncOperation
 @property  MPMediaLibraryView *libraryView
 @property  {vector<long long persistentIDs
 @property  @? responseHandler

  // instance methods
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation libraryView]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation setLibraryView:]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation .cxx_construct]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation .cxx_destruct]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation persistentIDs]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation responseHandler]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation setResponseHandler:]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation execute]
  -[_MPStoreLibraryPersonalizationAggregateLibraryAddedOperation setPersistentIDs:]


MPPlaybackUserDefaults : NSObject
 @property  MPPlaybackEQSetting *musicEQSetting
 @property  long long musicRepeatType
 @property  long long musicShuffleType
 @property  BOOL soundCheckEnabled
 @property  NSNumber *privateListeningEnabled
 @property  NSNumber *devicePrivateListeningEnabled
 @property  long long preferredMusicLowBandwidthResolution
 @property  long long preferredMusicHighBandwidthResolution
 @property  long long preferredMusicDownloadResolution
 @property  long long spatialAudioPreference
 @property  BOOL prefersSpatialAudio
 @property  BOOL prefersSpatialDownloads
 @property  BOOL showLosslessAudio
 @property  long long preferredVideoLowBandwidthResolution
 @property  long long preferredVideoHighBandwidthResolution
 @property  long long preferredVideoDownloadResolution
 @property  BOOL allowsHighQualityMusicStreamingOnCellular
 @property  BOOL disableAssetCaching
 @property  float progressiveDownloadAssetRatio
 @property  BOOL disableAudioAnalysis
 @property  BOOL disableMiniSINF
 @property  BOOL disablePeriodicStateRestore
 @property  BOOL disableQHO
 @property  BOOL forceMusicResolution
 @property  long long forcedMusicResolution
 @property  BOOL forceMusicStreaming
 @property  BOOL forceLibrarySupplementalContexts
 @property  BOOL includeContentItemDebugFields
 @property  long long maximumQueueHandOffSize
 @property  BOOL showDebugUI
 @property  BOOL speakerRouteEnabled
 @property  double assetURLExpirationDuration
 @property  double playbackAuthorizationTokenHalfLifeDuration
 @property  double activationDelay
 @property  double forwardBufferDuration
 @property  BOOL prerollEnabled
 @property  BOOL archiveSessionArtwork

  // class methods
  +[MPPlaybackUserDefaults standardUserDefaults]

  // instance methods
  -[MPPlaybackUserDefaults progressiveDownloadAssetRatio]
  -[MPPlaybackUserDefaults disablePeriodicStateRestore]
  -[MPPlaybackUserDefaults musicEQSetting]
  -[MPPlaybackUserDefaults setShowLosslessAudio:]
  -[MPPlaybackUserDefaults forcedMusicResolution]
  -[MPPlaybackUserDefaults maximumQueueHandOffSize]
  -[MPPlaybackUserDefaults setMusicRepeatType:]
  -[MPPlaybackUserDefaults disableAssetCaching]
  -[MPPlaybackUserDefaults playbackAuthorizationTokenHalfLifeDuration]
  -[MPPlaybackUserDefaults allowsHighQualityMusicStreamingOnCellular]
  -[MPPlaybackUserDefaults preferredMusicHighBandwidthResolution]
  -[MPPlaybackUserDefaults .cxx_destruct]
  -[MPPlaybackUserDefaults setSpatialAudioPreference:]
  -[MPPlaybackUserDefaults setPlaybackAuthorizationTokenHalfLifeDuration:]
  -[MPPlaybackUserDefaults prefersSpatialDownloads]
  -[MPPlaybackUserDefaults resetAllInternalSettings]
  -[MPPlaybackUserDefaults setAutoPlayEnabled:forUserIdentity:]
  -[MPPlaybackUserDefaults activationDelay]
  -[MPPlaybackUserDefaults preferredVideoDownloadResolution]
  -[MPPlaybackUserDefaults setPreferredMusicHighBandwidthResolution:]
  -[MPPlaybackUserDefaults preferredMusicLowBandwidthResolution]
  -[MPPlaybackUserDefaults setPrivateListeningEnabled:]
  -[MPPlaybackUserDefaults speakerRouteEnabled]
  -[MPPlaybackUserDefaults forceMusicStreaming]
  -[MPPlaybackUserDefaults autoPlayEnabledForUserIdentity:]
  -[MPPlaybackUserDefaults forceLibrarySupplementalContexts]
  -[MPPlaybackUserDefaults soundCheckEnabled]
  -[MPPlaybackUserDefaults setPrefersSpatialDownloads:]
  -[MPPlaybackUserDefaults preferredVideoHighBandwidthResolution]
  -[MPPlaybackUserDefaults disableQHO]
  -[MPPlaybackUserDefaults forwardBufferDuration]
  -[MPPlaybackUserDefaults archiveSessionArtwork]
  -[MPPlaybackUserDefaults prerollEnabled]
  -[MPPlaybackUserDefaults showLosslessAudio]
  -[MPPlaybackUserDefaults showDebugUI]
  -[MPPlaybackUserDefaults preferredMusicDownloadResolution]
  -[MPPlaybackUserDefaults _init]
  -[MPPlaybackUserDefaults setPrefersSpatialAudio:]
  -[MPPlaybackUserDefaults _loadAccountProperties]
  -[MPPlaybackUserDefaults dealloc]
  -[MPPlaybackUserDefaults preferredVideoLowBandwidthResolution]
  -[MPPlaybackUserDefaults musicShuffleType]
  -[MPPlaybackUserDefaults disableAudioAnalysis]
  -[MPPlaybackUserDefaults forceMusicResolution]
  -[MPPlaybackUserDefaults setPreferredMusicLowBandwidthResolution:]
  -[MPPlaybackUserDefaults setPreferredMusicDownloadResolution:]
  -[MPPlaybackUserDefaults isPrivateListeningEnabled]
  -[MPPlaybackUserDefaults setMusicShuffleType:]
  -[MPPlaybackUserDefaults musicRepeatType]
  -[MPPlaybackUserDefaults isDevicePrivateListeningEnabled]
  -[MPPlaybackUserDefaults _accountStoreChangedNotification:]
  -[MPPlaybackUserDefaults disableMiniSINF]
  -[MPPlaybackUserDefaults setSoundCheckEnabled:]
  -[MPPlaybackUserDefaults _migrateUserDefaults]
  -[MPPlaybackUserDefaults prefersSpatialAudio]
  -[MPPlaybackUserDefaults spatialAudioPreference]
  -[MPPlaybackUserDefaults includeContentItemDebugFields]
  -[MPPlaybackUserDefaults assetURLExpirationDuration]


MPPlaybackEQSetting : NSObject <NSCopying>
 @property  long long preset
 @property  int avPreset
 @property  NSString *name
 @property  NSString *localizedName

  // class methods
  +[MPPlaybackEQSetting allSettings]
  +[MPPlaybackEQSetting settingWithName:]
  +[MPPlaybackEQSetting settingWithPreset:]

  // instance methods
  -[MPPlaybackEQSetting localizedName]
  -[MPPlaybackEQSetting name]
  -[MPPlaybackEQSetting avPreset]
  -[MPPlaybackEQSetting _initWithPreset:]
  -[MPPlaybackEQSetting copyWithZone:]
  -[MPPlaybackEQSetting preset]


MPVolumeHUDController : NSObject
 @property  id mainContext

  // class methods
  +[MPVolumeHUDController sharedInstance]

  // instance methods
  -[MPVolumeHUDController removeVolumeDisplay:]
  -[MPVolumeHUDController .cxx_destruct]
  -[MPVolumeHUDController _addCategory:]
  -[MPVolumeHUDController init]
  -[MPVolumeHUDController addVolumeDisplay:]
  -[MPVolumeHUDController mainContext]
  -[MPVolumeHUDController setNeedsUpdate]
  -[MPVolumeHUDController unregisterView:inContext:]
  -[MPVolumeHUDController _updateVisibility]
  -[MPVolumeHUDController _updateVisibilityForVolumeDisplays:inWindowScene:]
  -[MPVolumeHUDController registerView:inContext:]


MPMusicPlayerSystemController : MPMusicPlayerController <MPSystemMusicPlayerController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMusicPlayerSystemController playbackState]
  -[MPMusicPlayerSystemController setShuffleMode:]
  -[MPMusicPlayerSystemController _queueDescriptor]
  -[MPMusicPlayerSystemController _nowPlaying]
  -[MPMusicPlayerSystemController _establishConnectionIfNeeded]
  -[MPMusicPlayerSystemController userQueueModificationsDisabled]
  -[MPMusicPlayerSystemController repeatMode]
  -[MPMusicPlayerSystemController setUserQueueModificationsDisabled:]
  -[MPMusicPlayerSystemController _shouldAccessCache]
  -[MPMusicPlayerSystemController onSystemServer:]
  -[MPMusicPlayerSystemController openToPlayQueueDescriptor:]
  -[MPMusicPlayerSystemController setRepeatMode:]


MPModelStoreGroupingsMusicKitRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelStoreGroupingsMusicKitRequestOperation .cxx_destruct]
  -[MPModelStoreGroupingsMusicKitRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelStoreGroupingsMusicKitRequestOperation catalogURLWithStoreURLBag:]
  -[MPModelStoreGroupingsMusicKitRequestOperation _produceResponseWithParser:results:error:]
  -[MPModelStoreGroupingsMusicKitRequestOperation groupingNameBagKey]
  -[MPModelStoreGroupingsMusicKitRequestOperation additionalURLRequestsWithStoreURLBag:]
  -[MPModelStoreGroupingsMusicKitRequestOperation additionalCatalogURLQueryItems]
  -[MPModelStoreGroupingsMusicKitRequestOperation groupingNameWithMusicSubscriptionDictionary:]
  -[MPModelStoreGroupingsMusicKitRequestOperation rootObjectIdentifierWithSubscriptionStatus:]
  -[MPModelStoreGroupingsMusicKitRequestOperation produceResponseWithLoadedOutput:completion:]


MPStoreAssetPlaybackResponse : NSObject <NSCopying, NSMutableCopying>
 @property  NSDictionary *dialogDictionary
 @property  NSDate *expirationDate
 @property  NSArray *fileAssetInfoList
 @property  MPStoreHLSAssetInfo *hlsAssetInfo
 @property  BOOL liveRadioStream
 @property  NSArray *radioStreamAssetInfoList
 @property  id suzeLeaseID
 @property  BOOL subscriptionRequired
 @property  BOOL onlineSubscriptionKeysRequired

  // instance methods
  -[MPStoreAssetPlaybackResponse hlsAssetInfo]
  -[MPStoreAssetPlaybackResponse dialogDictionary]
  -[MPStoreAssetPlaybackResponse .cxx_destruct]
  -[MPStoreAssetPlaybackResponse isSubscriptionRequired]
  -[MPStoreAssetPlaybackResponse suzeLeaseID]
  -[MPStoreAssetPlaybackResponse mutableCopyWithZone:]
  -[MPStoreAssetPlaybackResponse _copyWithPlaybackResponseClass:]
  -[MPStoreAssetPlaybackResponse fileAssetInfoList]
  -[MPStoreAssetPlaybackResponse isLiveRadioStream]
  -[MPStoreAssetPlaybackResponse radioStreamAssetInfoList]
  -[MPStoreAssetPlaybackResponse onlineSubscriptionKeysRequired]
  -[MPStoreAssetPlaybackResponse copyWithZone:]
  -[MPStoreAssetPlaybackResponse expirationDate]


MPMutableStoreAssetPlaybackResponse : MPStoreAssetPlaybackResponse
 @property  NSDictionary *dialogDictionary
 @property  NSDate *expirationDate
 @property  NSArray *fileAssetInfoList
 @property  MPStoreHLSAssetInfo *hlsAssetInfo
 @property  BOOL liveRadioStream
 @property  NSArray *radioStreamAssetInfoList
 @property  id suzeLeaseID
 @property  BOOL subscriptionRequired
 @property  BOOL onlineSubscriptionKeysRequired

  // instance methods
  -[MPMutableStoreAssetPlaybackResponse setDialogDictionary:]
  -[MPMutableStoreAssetPlaybackResponse setExpirationDate:]
  -[MPMutableStoreAssetPlaybackResponse setSuzeLeaseID:]
  -[MPMutableStoreAssetPlaybackResponse setFileAssetInfoList:]
  -[MPMutableStoreAssetPlaybackResponse setHlsAssetInfo:]
  -[MPMutableStoreAssetPlaybackResponse setLiveRadioStream:]
  -[MPMutableStoreAssetPlaybackResponse setSubscriptionRequired:]
  -[MPMutableStoreAssetPlaybackResponse setRadioStreamAssetInfoList:]
  -[MPMutableStoreAssetPlaybackResponse setOnlineSubscriptionKeysRequired:]
  -[MPMutableStoreAssetPlaybackResponse copyWithZone:]


MPCloudServiceStatusController : NSObject <ICEnvironmentMonitorObserver>
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  ICUserIdentity *userIdentity
 @property  SSVFairPlaySubscriptionStatus *lastKnownFairPlaySubscriptionStatus
 @property  ICMusicSubscriptionFairPlayKeyStatus *lastKnownSubscriptionFairPlayKeyStatus
 @property  unsigned long matchStatus
 @property  BOOL hasLoadedSubscriptionAvailability
 @property  BOOL subscriptionAvailable
 @property  SSVSubscriptionStatus *subscriptionStatus
 @property  ICMusicSubscriptionStatus *musicSubscriptionStatus
 @property  BOOL shouldPlaybackRequireSubscriptionLease
 @property  BOOL cloudLibraryEnabled
 @property  BOOL purchaseHistoryEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPCloudServiceStatusController controllers]
  +[MPCloudServiceStatusController _postNotificationName:controller:]
  +[MPCloudServiceStatusController cloudServiceStatusControllerWithUserIdentity:]
  +[MPCloudServiceStatusController _postNotificationName:controller:userInfo:]
  +[MPCloudServiceStatusController globalSerialQueue]
  +[MPCloudServiceStatusController sharedController]
  +[MPCloudServiceStatusController _cloudServiceStatusControllerWithUserIdentity:createIfRequired:]

  // instance methods
  -[MPCloudServiceStatusController environmentMonitorDidChangeNetworkReachability:]
  -[MPCloudServiceStatusController userIdentity]
  -[MPCloudServiceStatusController beginObservingPurchaseHistoryEnabled]
  -[MPCloudServiceStatusController _calculateShouldPlaybackRequireSubscriptionLeaseReturningLikelyToReachRemoteServer:]
  -[MPCloudServiceStatusController lastKnownSubscriptionFairPlayKeyStatus]
  -[MPCloudServiceStatusController subscriptionStatus]
  -[MPCloudServiceStatusController _copyObservationStateFrom:]
  -[MPCloudServiceStatusController _allowsMusicSubscriptionDidChange:]
  -[MPCloudServiceStatusController shouldPlaybackRequireSubscriptionLease]
  -[MPCloudServiceStatusController beginObservingSubscriptionAvailability]
  -[MPCloudServiceStatusController .cxx_destruct]
  -[MPCloudServiceStatusController _updateSubscriptionAvailability]
  -[MPCloudServiceStatusController refreshMusicSubscriptionStatus]
  -[MPCloudServiceStatusController endObservingMatchStatus]
  -[MPCloudServiceStatusController _currentCloudLibraryEnabled]
  -[MPCloudServiceStatusController _initWithUserIdentity:]
  -[MPCloudServiceStatusController _endObservingCloudLibraryEnabled]
  -[MPCloudServiceStatusController beginObservingMatchStatus]
  -[MPCloudServiceStatusController endObservingPurchaseHistoryEnabled]
  -[MPCloudServiceStatusController _beginObservingMatchStatus]
  -[MPCloudServiceStatusController serialQueue]
  -[MPCloudServiceStatusController endObservingCloudLibraryEnabled]
  -[MPCloudServiceStatusController init]
  -[MPCloudServiceStatusController _beginObservingCloudLibraryEnabled]
  -[MPCloudServiceStatusController musicSubscriptionStatus]
  -[MPCloudServiceStatusController hasLoadedSubscriptionAvailability]
  -[MPCloudServiceStatusController isCloudLibraryEnabled]
  -[MPCloudServiceStatusController _enableICMLErrorReasonChange:]
  -[MPCloudServiceStatusController _updateMatchStatus]
  -[MPCloudServiceStatusController endObservingFairPlaySubscriptionStatus]
  -[MPCloudServiceStatusController _userIdentityStoreDidChange:]
  -[MPCloudServiceStatusController _handlesSameAccountAs:]
  -[MPCloudServiceStatusController isSubscriptionAvailable]
  -[MPCloudServiceStatusController isPurchaseHistoryEnabled]
  -[MPCloudServiceStatusController _currentPurchaseHistoryEnabled]
  -[MPCloudServiceStatusController endObservingSubscriptionAvailability]
  -[MPCloudServiceStatusController dealloc]
  -[MPCloudServiceStatusController lastKnownFairPlaySubscriptionStatus]
  -[MPCloudServiceStatusController _cloudClientAuthenticationDidChange]
  -[MPCloudServiceStatusController _performBlockOnControllerHandlingTheSameAccount:]
  -[MPCloudServiceStatusController beginObservingCloudLibraryEnabled]
  -[MPCloudServiceStatusController matchStatus]
  -[MPCloudServiceStatusController _updateSubscriptionAvailabilityWithValue:]
  -[MPCloudServiceStatusController beginObservingFairPlaySubscriptionStatus]
  -[MPCloudServiceStatusController _endObservingMatchStatus]


MPModelStoreBrowseRoomMusicKitResponseParser : NSObject
 @property  MPSectionedCollection *results

  // instance methods
  -[MPModelStoreBrowseRoomMusicKitResponseParser results]
  -[MPModelStoreBrowseRoomMusicKitResponseParser .cxx_destruct]
  -[MPModelStoreBrowseRoomMusicKitResponseParser _parsedSectionedCollection]
  -[MPModelStoreBrowseRoomMusicKitResponseParser _parsedElements:]
  -[MPModelStoreBrowseRoomMusicKitResponseParser _parsedContentNode:additionalAttributesFromParent:]
  -[MPModelStoreBrowseRoomMusicKitResponseParser initWithRawResponseOutput:sectionBuilder:contentItemBuilder:filteredFCKinds:userIdentity:]


MPPMediaQuery : PBCodable <NSCopying>
 @property  NSMutableArray *filterPredicates
 @property  BOOL hasGroupingType
 @property  int groupingType
 @property  BOOL hasFilteringDisabled
 @property  BOOL filteringDisabled
 @property  BOOL hasEntityOrder
 @property  int entityOrder
 @property  NSMutableArray *staticEntityIdentifiers
 @property  BOOL hasStaticEntityType
 @property  int staticEntityType
 @property  BOOL hasIncludeNonLibraryEntities
 @property  BOOL includeNonLibraryEntities

  // class methods
  +[MPPMediaQuery filterPredicatesType]
  +[MPPMediaQuery staticEntityIdentifiersType]

  // instance methods
  -[MPPMediaQuery mergeFrom:]
  -[MPPMediaQuery includeNonLibraryEntities]
  -[MPPMediaQuery filterPredicates]
  -[MPPMediaQuery entityOrder]
  -[MPPMediaQuery staticEntityType]
  -[MPPMediaQuery filteringDisabled]
  -[MPPMediaQuery filterPredicatesCount]
  -[MPPMediaQuery staticEntityIdentifiersCount]
  -[MPPMediaQuery staticEntityIdentifiers]
  -[MPPMediaQuery setStaticEntityType:]
  -[MPPMediaQuery addStaticEntityIdentifiers:]
  -[MPPMediaQuery .cxx_destruct]
  -[MPPMediaQuery dictionaryRepresentation]
  -[MPPMediaQuery writeTo:]
  -[MPPMediaQuery addFilterPredicates:]
  -[MPPMediaQuery isEqual:]
  -[MPPMediaQuery copyTo:]
  -[MPPMediaQuery readFrom:]
  -[MPPMediaQuery setEntityOrder:]
  -[MPPMediaQuery setGroupingType:]
  -[MPPMediaQuery setIncludeNonLibraryEntities:]
  -[MPPMediaQuery setFilteringDisabled:]
  -[MPPMediaQuery setHasEntityOrder:]
  -[MPPMediaQuery hasGroupingType]
  -[MPPMediaQuery clearFilterPredicates]
  -[MPPMediaQuery hasEntityOrder]
  -[MPPMediaQuery filterPredicatesAtIndex:]
  -[MPPMediaQuery clearStaticEntityIdentifiers]
  -[MPPMediaQuery staticEntityIdentifiersAtIndex:]
  -[MPPMediaQuery setHasGroupingType:]
  -[MPPMediaQuery groupingTypeAsString:]
  -[MPPMediaQuery StringAsGroupingType:]
  -[MPPMediaQuery setHasFilteringDisabled:]
  -[MPPMediaQuery hasFilteringDisabled]
  -[MPPMediaQuery entityOrderAsString:]
  -[MPPMediaQuery StringAsEntityOrder:]
  -[MPPMediaQuery setHasStaticEntityType:]
  -[MPPMediaQuery hasStaticEntityType]
  -[MPPMediaQuery staticEntityTypeAsString:]
  -[MPPMediaQuery StringAsStaticEntityType:]
  -[MPPMediaQuery setHasIncludeNonLibraryEntities:]
  -[MPPMediaQuery hasIncludeNonLibraryEntities]
  -[MPPMediaQuery setStaticEntityIdentifiers:]
  -[MPPMediaQuery copyWithZone:]
  -[MPPMediaQuery groupingType]
  -[MPPMediaQuery setFilterPredicates:]


MPStoreItemOfferAsset : NSObject
 @property  NSDictionary *lookupDictionary
 @property  double duration
 @property  NSString *flavor
 @property  double previewDuration
 @property  NSURL *previewURL
 @property  long long size

  // instance methods
  -[MPStoreItemOfferAsset .cxx_destruct]
  -[MPStoreItemOfferAsset previewURL]
  -[MPStoreItemOfferAsset lookupDictionary]
  -[MPStoreItemOfferAsset initWithLookupDictionary:]
  -[MPStoreItemOfferAsset flavor]
  -[MPStoreItemOfferAsset size]
  -[MPStoreItemOfferAsset previewDuration]
  -[MPStoreItemOfferAsset duration]


MPDispatchQueueExclusiveAccessToken : NSObject <MPExclusiveAccessToken>
  // class methods
  +[MPDispatchQueueExclusiveAccessToken tokenWithQueue:owner:]

  // instance methods
  -[MPDispatchQueueExclusiveAccessToken .cxx_destruct]
  -[MPDispatchQueueExclusiveAccessToken _init]
  -[MPDispatchQueueExclusiveAccessToken assertHasExclusiveAccessForOwner:]


MPPThreadKeyExclusiveAccessToken : NSObject <MPExclusiveAccessToken>
  // class methods
  +[MPPThreadKeyExclusiveAccessToken tokenWithKey:owner:]

  // instance methods
  -[MPPThreadKeyExclusiveAccessToken _init]
  -[MPPThreadKeyExclusiveAccessToken assertHasExclusiveAccessForOwner:]


MPStoreModelStoreAssetBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelStoreAssetBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelStoreAssetBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPModelVerifyLocalFileAssetIntegrityRequest : NSObject
 @property  MPIdentifierSet *sourceItemIdentifiers
 @property  MPModelFileAsset *fileAsset

  // class methods
  +[MPModelVerifyLocalFileAssetIntegrityRequest _operationQueue]

  // instance methods
  -[MPModelVerifyLocalFileAssetIntegrityRequest .cxx_destruct]
  -[MPModelVerifyLocalFileAssetIntegrityRequest performWithResponseHandler:]
  -[MPModelVerifyLocalFileAssetIntegrityRequest fileAsset]
  -[MPModelVerifyLocalFileAssetIntegrityRequest setFileAsset:]
  -[MPModelVerifyLocalFileAssetIntegrityRequest mediaLibraryForItemIdentifiers:]
  -[MPModelVerifyLocalFileAssetIntegrityRequest sourceItemIdentifiers]
  -[MPModelVerifyLocalFileAssetIntegrityRequest initWithFileAsset:sourceItemIdentifiers:]
  -[MPModelVerifyLocalFileAssetIntegrityRequest setSourceItemIdentifiers:]


MPMediaQueryCriteria : NSObject <NSCopying>
 @property  BOOL specifiesPlaylistItems
 @property  BOOL excludesEntitiesWithBlankNames
 @property  NSSet *filterPredicates
 @property  NSSet *itemPropertiesToFetch
 @property  NSSet *collectionPropertiesToFetch
 @property  long long groupingType
 @property  unsigned long entityLimit
 @property  unsigned long entityOrder
 @property  NSArray *orderingProperties
 @property  BOOL ignoreSystemFilterPredicates
 @property  BOOL ignoreRestrictionsPredicates
 @property  BOOL includeNonLibraryEntities
 @property  BOOL includeEntitiesWithBlankNames
 @property  NSDictionary *orderingDirectionMappings

  // instance methods
  -[MPMediaQueryCriteria ignoreSystemFilterPredicates]
  -[MPMediaQueryCriteria ignoreRestrictionsPredicates]
  -[MPMediaQueryCriteria setIgnoreRestrictionsPredicates:]
  -[MPMediaQueryCriteria ML3ItemsQueryInLibrary:orderingTerms:nameBlankProperty:]
  -[MPMediaQueryCriteria includeEntitiesWithBlankNames]
  -[MPMediaQueryCriteria includeNonLibraryEntities]
  -[MPMediaQueryCriteria addFilterPredicate:]
  -[MPMediaQueryCriteria filterPredicates]
  -[MPMediaQueryCriteria entityOrder]
  -[MPMediaQueryCriteria ML3CollectionsQueryInLibrary:]
  -[MPMediaQueryCriteria .cxx_destruct]
  -[MPMediaQueryCriteria setCollectionPropertiesToFetch:]
  -[MPMediaQueryCriteria setEntityLimit:]
  -[MPMediaQueryCriteria setItemPropertiesToFetch:]
  -[MPMediaQueryCriteria setOrderingDirectionMappings:]
  -[MPMediaQueryCriteria itemPropertiesToFetch]
  -[MPMediaQueryCriteria collectionPropertiesToFetch]
  -[MPMediaQueryCriteria setOrderingProperties:]
  -[MPMediaQueryCriteria addFilterPredicates:]
  -[MPMediaQueryCriteria init]
  -[MPMediaQueryCriteria excludesEntitiesWithBlankNames]
  -[MPMediaQueryCriteria orderingProperties]
  -[MPMediaQueryCriteria isEqual:]
  -[MPMediaQueryCriteria predicateForProperty:]
  -[MPMediaQueryCriteria ML3ItemsQueryInLibrary:]
  -[MPMediaQueryCriteria setEntityOrder:]
  -[MPMediaQueryCriteria setIncludeEntitiesWithBlankNames:]
  -[MPMediaQueryCriteria specifiesPlaylistItems]
  -[MPMediaQueryCriteria setGroupingType:]
  -[MPMediaQueryCriteria entityLimit]
  -[MPMediaQueryCriteria setIncludeNonLibraryEntities:]
  -[MPMediaQueryCriteria ML3OrderingTermsForMPOrderingProperties:directionalityMapping:entityClass:]
  -[MPMediaQueryCriteria setIgnoreSystemFilterPredicates:]
  -[MPMediaQueryCriteria copyWithZone:]
  -[MPMediaQueryCriteria removeFilterPredicate:]
  -[MPMediaQueryCriteria ML3OrderingTermsForGroupingType:]
  -[MPMediaQueryCriteria groupingType]
  -[MPMediaQueryCriteria removePredicatesForProperty:]
  -[MPMediaQueryCriteria setFilterPredicates:]
  -[MPMediaQueryCriteria orderingDirectionMappings]


MPStoreSocialPendingFollowRequestOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  long long action
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialPendingFollowRequestOperationDataSource queryItems]
  -[MPStoreSocialPendingFollowRequestOperationDataSource .cxx_destruct]
  -[MPStoreSocialPendingFollowRequestOperationDataSource setPerson:]
  -[MPStoreSocialPendingFollowRequestOperationDataSource httpBody]
  -[MPStoreSocialPendingFollowRequestOperationDataSource person]
  -[MPStoreSocialPendingFollowRequestOperationDataSource httpBodyType]
  -[MPStoreSocialPendingFollowRequestOperationDataSource fallbackBagKeys]
  -[MPStoreSocialPendingFollowRequestOperationDataSource action]
  -[MPStoreSocialPendingFollowRequestOperationDataSource bagKey]
  -[MPStoreSocialPendingFollowRequestOperationDataSource _actionTypeString]
  -[MPStoreSocialPendingFollowRequestOperationDataSource httpMethod]
  -[MPStoreSocialPendingFollowRequestOperationDataSource initWithAction:]


MPStoreItemImportTrackData : ML3StoreItemTrackData
 @property  NSArray *importElements

  // class methods
  +[MPStoreItemImportTrackData _importPropertiesDictFromImportMetadataDict:]

  // instance methods
  -[MPStoreItemImportTrackData .cxx_destruct]
  -[MPStoreItemImportTrackData importElements]
  -[MPStoreItemImportTrackData initWithImportElements:]
  -[MPStoreItemImportTrackData parsedStoreItemsImportProperties]
  -[MPStoreItemImportTrackData _associatedElementForPropertyDict:]


MPRTCReportingSessionSummaryEvent : MPRTCReportingEvent
 @property  NSError *assetLoadError
 @property  double assetLoadDuration
 @property  long long blockingSecureKeyLoadCount
 @property  double blockingSecureKeyLoadDuration
 @property  double maximumSecureKeyLoadDuration
 @property  long long secureKeyLoadCount
 @property  NSError *secureKeyError
 @property  NSError *tracklistLoadError
 @property  double tracklistLoadDuration
 @property  BOOL hadBlockingTracklistLoad
 @property  NSError *playbackEndError
 @property  long long endReasonType
 @property  long long startupState
 @property  long long interfaceTypeChangeCount
 @property  long long startInterfaceType
 @property  NSNumber *perceivedTotalStartupTime
 @property  NSString *siriSessionIdentifier

  // instance methods
  -[MPRTCReportingSessionSummaryEvent .cxx_destruct]
  -[MPRTCReportingSessionSummaryEvent rtcReportingCategory]
  -[MPRTCReportingSessionSummaryEvent newRTCReportingPayloadDictionary]
  -[MPRTCReportingSessionSummaryEvent siriSessionIdentifier]
  -[MPRTCReportingSessionSummaryEvent setSiriSessionIdentifier:]
  -[MPRTCReportingSessionSummaryEvent assetLoadError]
  -[MPRTCReportingSessionSummaryEvent setAssetLoadError:]
  -[MPRTCReportingSessionSummaryEvent assetLoadDuration]
  -[MPRTCReportingSessionSummaryEvent setAssetLoadDuration:]
  -[MPRTCReportingSessionSummaryEvent blockingSecureKeyLoadCount]
  -[MPRTCReportingSessionSummaryEvent setBlockingSecureKeyLoadCount:]
  -[MPRTCReportingSessionSummaryEvent maximumSecureKeyLoadDuration]
  -[MPRTCReportingSessionSummaryEvent setMaximumSecureKeyLoadDuration:]
  -[MPRTCReportingSessionSummaryEvent secureKeyLoadCount]
  -[MPRTCReportingSessionSummaryEvent setSecureKeyLoadCount:]
  -[MPRTCReportingSessionSummaryEvent secureKeyError]
  -[MPRTCReportingSessionSummaryEvent setSecureKeyError:]
  -[MPRTCReportingSessionSummaryEvent tracklistLoadError]
  -[MPRTCReportingSessionSummaryEvent setTracklistLoadError:]
  -[MPRTCReportingSessionSummaryEvent hadBlockingTracklistLoad]
  -[MPRTCReportingSessionSummaryEvent setHadBlockingTracklistLoad:]
  -[MPRTCReportingSessionSummaryEvent playbackEndError]
  -[MPRTCReportingSessionSummaryEvent setPlaybackEndError:]
  -[MPRTCReportingSessionSummaryEvent endReasonType]
  -[MPRTCReportingSessionSummaryEvent setEndReasonType:]
  -[MPRTCReportingSessionSummaryEvent startupState]
  -[MPRTCReportingSessionSummaryEvent setStartupState:]
  -[MPRTCReportingSessionSummaryEvent startInterfaceType]
  -[MPRTCReportingSessionSummaryEvent interfaceTypeChangeCount]
  -[MPRTCReportingSessionSummaryEvent setInterfaceTypeChangeCount:]
  -[MPRTCReportingSessionSummaryEvent setStartInterfaceType:]
  -[MPRTCReportingSessionSummaryEvent blockingSecureKeyLoadDuration]
  -[MPRTCReportingSessionSummaryEvent setBlockingSecureKeyLoadDuration:]
  -[MPRTCReportingSessionSummaryEvent perceivedTotalStartupTime]
  -[MPRTCReportingSessionSummaryEvent setPerceivedTotalStartupTime:]
  -[MPRTCReportingSessionSummaryEvent tracklistLoadDuration]
  -[MPRTCReportingSessionSummaryEvent setTracklistLoadDuration:]


MPModelForYouRecommendationItem : MPModelObject
 @property  unsigned long itemType
 @property  NSURL *url
 @property  NSString *reason
 @property  NSString *utterance
 @property  MPModelAlbum *album
 @property  MPModelPlaylist *playlist
 @property  MPModelRadioStation *radioStation
 @property  MPModelForYouRecommendationGroup *parentGroup
 @property  long long subgroupIndex
 @property  BOOL backedByStoreItemMetadata
 @property  MPModelForYouRecommendationGroup *subgroup

  // class methods
  +[MPModelForYouRecommendationItem __radioStation_KEY]
  +[MPModelForYouRecommendationItem __itemType_KEY]
  +[MPModelForYouRecommendationItem __album_KEY]
  +[MPModelForYouRecommendationItem __url_KEY]
  +[MPModelForYouRecommendationItem __playlist_KEY]
  +[MPModelForYouRecommendationItem __reason_KEY]
  +[MPModelForYouRecommendationItem __utterance_KEY]
  +[MPModelForYouRecommendationItem __backedByStoreItemMetadata_KEY]
  +[MPModelForYouRecommendationItem __parentGroup_KEY]
  +[MPModelForYouRecommendationItem __subgroupIndex_KEY]
  +[MPModelForYouRecommendationItem requiredStoreLibraryPersonalizationProperties]

  // instance methods
  -[MPModelForYouRecommendationItem subgroup]
  -[MPModelForYouRecommendationItem relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelForYouRecommendationItem personalizationScopedPropertiesForProperties:]
  -[MPModelForYouRecommendationItem objectWithStoreLibraryPersonalizationRelativeModelObject:]


MPRTCReportingController : NSObject <ICEnvironmentMonitorObserver>
 @property  NSString *clientName
 @property  int clientType
 @property  long long clientVersion
 @property  MPAVController *player
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPRTCReportingController newHierarchyTokenFromParentToken:]
  +[MPRTCReportingController defaultClientVersion]

  // instance methods
  -[MPRTCReportingController clientVersion]
  -[MPRTCReportingController clientType]
  -[MPRTCReportingController .cxx_destruct]
  -[MPRTCReportingController player]
  -[MPRTCReportingController dealloc]
  -[MPRTCReportingController _avControllerBufferingStateDidChangeNotification:]
  -[MPRTCReportingController _avControllerItemWillChangeNotification:]
  -[MPRTCReportingController _avControllerDidReloadWithPlaybackContextNotification:]
  -[MPRTCReportingController _avItemTypeDidChangeNotification:]
  -[MPRTCReportingController _avControllerWillReloadWithPlaybackContextNotification:]
  -[MPRTCReportingController _avItemAssetLoadedNotification:]
  -[MPRTCReportingController _avItemSecureKeyDeliveryRequestDidFinishNotification:]
  -[MPRTCReportingController _preparedSummaryEventForAVItem:]
  -[MPRTCReportingController _configureStartupStateForSummaryEvent:withItem:]
  -[MPRTCReportingController _setPerceivedTotalStartupTimeForItem:withSummaryEvent:]
  -[MPRTCReportingController _configureBaseEventPropertiesForEvent:]
  -[MPRTCReportingController _reportingSessionForAVItem:]
  -[MPRTCReportingController _initializeReportingSession:forAVItem:]
  -[MPRTCReportingController _completeSetupForReportingSession:avItem:]
  -[MPRTCReportingController _newReportingSession]
  -[MPRTCReportingController _isAVItemReadyForReportingSessionInitialization:]
  -[MPRTCReportingController _isAVItemReadyForReportingSessionSetupCompletion:]
  -[MPRTCReportingController _completeSetupForReportingSession:avItem:fallbackQueueFeeder:]
  -[MPRTCReportingController _uniqueIdentifierForAVItem:]
  -[MPRTCReportingController _handleDeallocationForUniqueIdentifier:]
  -[MPRTCReportingController _networkTypeDidChangeNotification:]
  -[MPRTCReportingController initWithPlayer:clientName:clientType:clientVersion:]
  -[MPRTCReportingController clientName]


_MPRTCReportingAVItemDeallocationHandler : NSObject
 @property  @? handler

  // instance methods
  -[_MPRTCReportingAVItemDeallocationHandler .cxx_destruct]
  -[_MPRTCReportingAVItemDeallocationHandler dealloc]
  -[_MPRTCReportingAVItemDeallocationHandler setHandler:]
  -[_MPRTCReportingAVItemDeallocationHandler handler]


MPModelLibraryPlaylistEditChangeRequestOperation : MPAsyncOperation
 @property  MPModelLibraryPlaylistEditChangeRequest *request
 @property  @? localPersistenceResponseHandler
 @property  @? completeResponseHandler

  // class methods
  +[MPModelLibraryPlaylistEditChangeRequestOperation requiredPlaylistEntryProperties]

  // instance methods
  -[MPModelLibraryPlaylistEditChangeRequestOperation setRequest:]
  -[MPModelLibraryPlaylistEditChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryPlaylistEditChangeRequestOperation execute]
  -[MPModelLibraryPlaylistEditChangeRequestOperation _isCloudLibraryEnabled]
  -[MPModelLibraryPlaylistEditChangeRequestOperation request]
  -[MPModelLibraryPlaylistEditChangeRequestOperation localPersistenceResponseHandler]
  -[MPModelLibraryPlaylistEditChangeRequestOperation completeResponseHandler]
  -[MPModelLibraryPlaylistEditChangeRequestOperation setLocalPersistenceResponseHandler:]
  -[MPModelLibraryPlaylistEditChangeRequestOperation setCompleteResponseHandler:]


MPProtocolProxy : NSProxy
 @property  Protocol *protocol
 @property  NSHashTable *objects

  // class methods
  +[MPProtocolProxy proxyForObjects:protocol:]
  +[MPProtocolProxy proxyForObject:protocol:]

  // instance methods
  -[MPProtocolProxy objects]
  -[MPProtocolProxy methodSignatureForSelector:]
  -[MPProtocolProxy setObjects:]
  -[MPProtocolProxy .cxx_destruct]
  -[MPProtocolProxy setProtocol:]
  -[MPProtocolProxy protocol]
  -[MPProtocolProxy forwardInvocation:]


MPModelLibraryTransientStateController : NSObject
  // class methods
  +[MPModelLibraryTransientStateController sharedDeviceLibraryController]

  // instance methods
  -[MPModelLibraryTransientStateController performLibraryImportChangeRequest:withRelatedModelObjects:]
  -[MPModelLibraryTransientStateController registerTransientAddState:forModelObjects:relatedModelObjects:]
  -[MPModelLibraryTransientStateController .cxx_destruct]
  -[MPModelLibraryTransientStateController init]
  -[MPModelLibraryTransientStateController addOperation:]
  -[MPModelLibraryTransientStateController performKeepLocalChangeRequest:withRelatedModelObjects:completion:]
  -[MPModelLibraryTransientStateController transientAddStateForModelObject:]
  -[MPModelLibraryTransientStateController performKeepLocalChangeRequest:withRelatedModelObjects:]
  -[MPModelLibraryTransientStateController unregisterTransientState:]
  -[MPModelLibraryTransientStateController performDeleteEntityChangeRequest:withRelatedModelObjects:completion:]
  -[MPModelLibraryTransientStateController performLibraryImportChangeRequest:withRelatedModelObjects:completion:]
  -[MPModelLibraryTransientStateController transientKeepLocalStateForModelObject:]
  -[MPModelLibraryTransientStateController performDeleteEntityChangeRequest:withRelatedModelObjects:]
  -[MPModelLibraryTransientStateController registerTransientKeepLocalState:forModelObjects:relatedModelObjects:]


_MPModelLibraryRegisteredTransientState : NSObject
 @property  long long addState
 @property  long long keepLocalState
 @property  MPSectionedCollection *modelObjects
 @property  MPSectionedCollection *relatedModelObjects
 @property  NSUUID *token

  // instance methods
  -[_MPModelLibraryRegisteredTransientState setToken:]
  -[_MPModelLibraryRegisteredTransientState .cxx_destruct]
  -[_MPModelLibraryRegisteredTransientState addState]
  -[_MPModelLibraryRegisteredTransientState modelObjects]
  -[_MPModelLibraryRegisteredTransientState token]
  -[_MPModelLibraryRegisteredTransientState setModelObjects:]
  -[_MPModelLibraryRegisteredTransientState setAddState:]
  -[_MPModelLibraryRegisteredTransientState setKeepLocalState:]
  -[_MPModelLibraryRegisteredTransientState setRelatedModelObjects:]
  -[_MPModelLibraryRegisteredTransientState keepLocalState]
  -[_MPModelLibraryRegisteredTransientState relatedModelObjects]


MPNowPlayingInfoCenter : NSObject <MPMediaRemoteEntityArtworkGenerator>
 @property  BOOL supportsArtworkCatalogLoading
 @property  <MPNowPlayingPlaybackQueueDelegate> *playbackQueueDelegate
 @property  NSString *playerID
 @property  MRPlayerPath *playerPath
 @property  NSString *representedApplicationBundleIdentifier
 @property  <MPNowPlayingPlaybackQueueDataSource> *playbackQueueDataSource
 @property  MPNowPlayingContentItem *nowPlayingContentItem
 @property  <MPNowPlayingInfoLyricsDelegate> *lyricsDelegate
 @property  NSObject<OS_dispatch_queue> *dataSourceQueue
 @property  NSDictionary *nowPlayingInfo
 @property  unsigned long playbackState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPNowPlayingInfoCenter serviceQueue]
  +[MPNowPlayingInfoCenter infoCenterForPlayerPath:]
  +[MPNowPlayingInfoCenter defaultCenter]
  +[MPNowPlayingInfoCenter infoCenterForPlayerID:]

  // instance methods
  -[MPNowPlayingInfoCenter nowPlayingInfo]
  -[MPNowPlayingInfoCenter becomeActive]
  -[MPNowPlayingInfoCenter setNowPlayingInfo:]
  -[MPNowPlayingInfoCenter playerPath]
  -[MPNowPlayingInfoCenter becomeActiveSystemFallback]
  -[MPNowPlayingInfoCenter _initializeNowPlayingInfo]
  -[MPNowPlayingInfoCenter playbackState]
  -[MPNowPlayingInfoCenter initWithPlayerPath:]
  -[MPNowPlayingInfoCenter setDataSourceQueue:]
  -[MPNowPlayingInfoCenter setPlaybackQueueDataSource:]
  -[MPNowPlayingInfoCenter isInvalidated]
  -[MPNowPlayingInfoCenter setPlaybackState:]
  -[MPNowPlayingInfoCenter setLyricsDelegate:]
  -[MPNowPlayingInfoCenter setNowPlayingContentItem:]
  -[MPNowPlayingInfoCenter _contentItemForIdentifier:alreadyOnDataSourceQueue:]
  -[MPNowPlayingInfoCenter _onDataSourceQueue_getContentItemIDsInRange:completion:]
  -[MPNowPlayingInfoCenter _onQueue_stateDictionary]
  -[MPNowPlayingInfoCenter _onQueue_pushNowPlayingInfoAndRetry:]
  -[MPNowPlayingInfoCenter dataSourceQueue]
  -[MPNowPlayingInfoCenter _onDataSourceQueue_artworkCatalogForContentItem:]
  -[MPNowPlayingInfoCenter _getTransportablePlaybackSessionRepresentationWithIdentifier:preferredSessionType:completion:]
  -[MPNowPlayingInfoCenter .cxx_destruct]
  -[MPNowPlayingInfoCenter supportsArtworkCatalogLoading]
  -[MPNowPlayingInfoCenter initWithPlayerID:]
  -[MPNowPlayingInfoCenter lyricsDelegate]
  -[MPNowPlayingInfoCenter playbackQueueDataSource]
  -[MPNowPlayingInfoCenter _contentItemIDsInRange:itemsRange:]
  -[MPNowPlayingInfoCenter setPlaybackQueueDelegate:]
  -[MPNowPlayingInfoCenter setRepresentedApplicationBundleIdentifier:]
  -[MPNowPlayingInfoCenter init]
  -[MPNowPlayingInfoCenter _onQueue_pushContentItemsUpdate]
  -[MPNowPlayingInfoCenter _onQueue_registerPlaybackQueueDataSourceCallbacks:]
  -[MPNowPlayingInfoCenter _contentItemChangedNotification:]
  -[MPNowPlayingInfoCenter representedApplicationBundleIdentifier]
  -[MPNowPlayingInfoCenter playbackQueueDelegate]
  -[MPNowPlayingInfoCenter invalidatePlaybackQueue]
  -[MPNowPlayingInfoCenter _childContentItemForContentItem:index:]
  -[MPNowPlayingInfoCenter _invalidatePlaybackQueueImmediatelyWithCompletion:]
  -[MPNowPlayingInfoCenter invalidatePlaybackQueueWithCompletion:]
  -[MPNowPlayingInfoCenter _becomeActiveIfPossibleWithCompletion:]
  -[MPNowPlayingInfoCenter _contentItemForIdentifier:]
  -[MPNowPlayingInfoCenter _artworkCatalogForContentItem:]
  -[MPNowPlayingInfoCenter _onQueue_clearPlaybackQueueDataSourceCallbacks]
  -[MPNowPlayingInfoCenter nowPlayingContentItem]
  -[MPNowPlayingInfoCenter artworkCatalogBlockForContentItem:]
  -[MPNowPlayingInfoCenter dealloc]
  -[MPNowPlayingInfoCenter resignActiveSystemFallback]
  -[MPNowPlayingInfoCenter _becomeActiveWithCompletion:]
  -[MPNowPlayingInfoCenter invalidate]
  -[MPNowPlayingInfoCenter _onQueue_registerLyricsDelegateCallbacks:]
  -[MPNowPlayingInfoCenter _getMetadataForContentItem:completion:]
  -[MPNowPlayingInfoCenter playerID]
  -[MPNowPlayingInfoCenter _createPlaybackQueueForRequest:]


_MPNowPlayingInfoTransportableSessionRequest : NSObject <MPNowPlayingInfoTransportableSessionRequest>
 @property  NSString *identifier
 @property  NSString *preferredSessionType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_MPNowPlayingInfoTransportableSessionRequest requestWithIdentifier:preferredSessionType:]

  // instance methods
  -[_MPNowPlayingInfoTransportableSessionRequest .cxx_destruct]
  -[_MPNowPlayingInfoTransportableSessionRequest identifier]
  -[_MPNowPlayingInfoTransportableSessionRequest preferredSessionType]


MPNowPlayingInfoTransportableSessionResponse : NSObject
 @property  NSString *identifier
 @property  NSString *sessionType
 @property  NSData *data

  // class methods
  +[MPNowPlayingInfoTransportableSessionResponse responseWithIdentifier:sessionType:data:]

  // instance methods
  -[MPNowPlayingInfoTransportableSessionResponse sessionType]
  -[MPNowPlayingInfoTransportableSessionResponse .cxx_destruct]
  -[MPNowPlayingInfoTransportableSessionResponse data]
  -[MPNowPlayingInfoTransportableSessionResponse identifier]
  -[MPNowPlayingInfoTransportableSessionResponse _init]


MPModelObject : NSObject <NSCopying, NSSecureCoding, NSObject>
 @property  {MPLibraryAddStatusObserverConfiguration=BBBBB} libraryAddStatusObserverConfiguration
 @property  long long libraryRemovalSupportedOptions
 @property  MPIdentifierSet *originalIdentifierSet
 @property  NSString *humanDescription
 @property  MPIdentifierSet *identifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPModelObject initialize]
  +[MPModelObject genericObjectType]
  +[MPModelObject supportsSecureCoding]
  +[MPModelObject resolveInstanceMethod:]
  +[MPModelObject performWithoutEnforcement:]
  +[MPModelObject classesForSecureCoding]
  +[MPModelObject supportsKeepLocalStatusObservation]
  +[MPModelObject requiredKeepLocalStatusObservationProperties]
  +[MPModelObject supportsLibraryAddStatusObservation]
  +[MPModelObject requiredLibraryAddStatusObservationProperties]
  +[MPModelObject _indexProperties]
  +[MPModelObject _lookupPropertyForSelector:result:]
  +[MPModelObject _modelKeyForPropertySelector:]
  +[MPModelObject requiredLibraryRemovalProperties]
  +[MPModelObject supportsLibraryRemoval]

  // instance methods
  -[MPModelObject setValue:forUndefinedKey:]
  -[MPModelObject initWithIdentifiers:]
  -[MPModelObject valueForUndefinedKey:]
  -[MPModelObject initWithCoder:]
  -[MPModelObject .cxx_destruct]
  -[MPModelObject humanDescription]
  -[MPModelObject identifiers]
  -[MPModelObject hasLoadedValueForKey:]
  -[MPModelObject initWithIdentifiers:block:]
  -[MPModelObject copyWithIdentifiers:block:]
  -[MPModelObject isEqual:]
  -[MPModelObject _stateDumpObject]
  -[MPModelObject contentItemCollectionInfo]
  -[MPModelObject mediaItemPropertyValues]
  -[MPModelObject setValue:forModelKey:]
  -[MPModelObject copyWithZone:]
  -[MPModelObject libraryAddStatusObserverConfiguration]
  -[MPModelObject _isModelKey:]
  -[MPModelObject valueForModelKey:]
  -[MPModelObject _sanitizedStorage]
  -[MPModelObject copyWithIdentifiers:propertySet:]
  -[MPModelObject copyWithPropertySet:]
  -[MPModelObject hasLoadedValuesForPropertySet:]
  -[MPModelObject mergeWithObject:]
  -[MPModelObject copyWithIdentifiers:]
  -[MPModelObject originalIdentifierSet]
  -[MPModelObject libraryRemovalSupportedOptions]
  -[MPModelObject newKeepLocalStatusObserverConfiguration]
  -[MPModelObject encodeWithCoder:]


MPModelKind : NSObject <NSCoding, NSSecureCoding>
 @property  Class modelClass
 @property  NSString *humanDescription
 @property  MPModelKind *identityKind

  // class methods
  +[MPModelKind supportsSecureCoding]
  +[MPModelKind kindWithModelClass:]
  +[MPModelKind identityKind]
  +[MPModelKind kindWithModelClass:cacheKey:block:]
  +[MPModelKind _kindWithModelClass:cacheKey:block:]

  // instance methods
  -[MPModelKind predicateWithBaseProperty:]
  -[MPModelKind initWithCoder:]
  -[MPModelKind .cxx_destruct]
  -[MPModelKind humanDescription]
  -[MPModelKind applyToView:withContext:]
  -[MPModelKind representedSearchScopePredicate]
  -[MPModelKind identityKind]
  -[MPModelKind isEqual:]
  -[MPModelKind _initWithModelClass:]
  -[MPModelKind encodeWithCoder:]
  -[MPModelKind modelClass]


MPNowPlayingInfoCenterArtworkContext : NSObject
 @property  NSString *artworkIdentifier
 @property  MPMediaItemArtwork *artwork
 @property  NSData *artworkData

  // instance methods
  -[MPNowPlayingInfoCenterArtworkContext setArtworkIdentifier:]
  -[MPNowPlayingInfoCenterArtworkContext artwork]
  -[MPNowPlayingInfoCenterArtworkContext artworkIdentifier]
  -[MPNowPlayingInfoCenterArtworkContext setArtwork:]
  -[MPNowPlayingInfoCenterArtworkContext .cxx_destruct]
  -[MPNowPlayingInfoCenterArtworkContext setArtworkData:]
  -[MPNowPlayingInfoCenterArtworkContext artworkData]


MPRemoteCommandHandlerDialogAction : NSObject <NSCopying>
 @property  MRSendCommandHandlerDialogAction *mediaRemoteType
 @property  NSString *title
 @property  MPRemoteCommandEvent *event
 @property  long long type

  // class methods
  +[MPRemoteCommandHandlerDialogAction actionWithTitle:type:commandEvent:]

  // instance methods
  -[MPRemoteCommandHandlerDialogAction .cxx_destruct]
  -[MPRemoteCommandHandlerDialogAction title]
  -[MPRemoteCommandHandlerDialogAction type]
  -[MPRemoteCommandHandlerDialogAction copyWithZone:]
  -[MPRemoteCommandHandlerDialogAction mediaRemoteType]
  -[MPRemoteCommandHandlerDialogAction initWithMediaRemoteType:]
  -[MPRemoteCommandHandlerDialogAction event]


MPRemoteCommandHandlerDialog : NSObject <NSCopying>
 @property  MRSendCommandHandlerDialog *mediaRemoteType
 @property  NSString *localizedTitle
 @property  NSString *localizedMessage
 @property  NSArray *actions

  // class methods
  +[MPRemoteCommandHandlerDialog dialogWithTitle:message:]

  // instance methods
  -[MPRemoteCommandHandlerDialog localizedTitle]
  -[MPRemoteCommandHandlerDialog addAction:]
  -[MPRemoteCommandHandlerDialog .cxx_destruct]
  -[MPRemoteCommandHandlerDialog actions]
  -[MPRemoteCommandHandlerDialog setLocalizedTitle:]
  -[MPRemoteCommandHandlerDialog localizedMessage]
  -[MPRemoteCommandHandlerDialog copyWithZone:]
  -[MPRemoteCommandHandlerDialog mediaRemoteType]
  -[MPRemoteCommandHandlerDialog initWithMediaRemoteType:]
  -[MPRemoteCommandHandlerDialog setLocalizedMessage:]


MPSubscriptionStatusPlaybackInformation : NSObject
 @property  BOOL definitiveInformation
 @property  BOOL hasPlaybackCapability
 @property  BOOL requiresCarrierManualVerification
 @property  BOOL shouldUseLease
 @property  BOOL shouldUseAccountLessStreaming
 @property  BOOL shouldRequirePlaybackAuthorizationTokensForPlayback

  // instance methods
  -[MPSubscriptionStatusPlaybackInformation shouldUseAccountLessStreaming]
  -[MPSubscriptionStatusPlaybackInformation .cxx_destruct]
  -[MPSubscriptionStatusPlaybackInformation requiresCarrierManualVerification]
  -[MPSubscriptionStatusPlaybackInformation hasPlaybackCapability]
  -[MPSubscriptionStatusPlaybackInformation isDefinitiveInformation]
  -[MPSubscriptionStatusPlaybackInformation initWithICSubscriptionStatus:]
  -[MPSubscriptionStatusPlaybackInformation shouldUseLease]
  -[MPSubscriptionStatusPlaybackInformation shouldRequirePlaybackAuthorizationTokensForPlayback]


MPHSBrowserDelegate : NSObject <HSBrowserDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPHSBrowserDelegate browser:didAddLibrary:]
  -[MPHSBrowserDelegate browser:didRemoveLibrary:]


MPHomeSharingML3DataProvider : MPMediaLibraryDataProviderML3
 @property  HSHomeSharingLibrary *homeSharingLibrary
 @property  BOOL isSupportedSharingVersion
 @property  unsigned int databaseID

  // class methods
  +[MPHomeSharingML3DataProvider homeSharingGroupID]
  +[MPHomeSharingML3DataProvider _determineHomeSharingGroupIDWithCompletionHandler:]
  +[MPHomeSharingML3DataProvider endScanningForLibraries]
  +[MPHomeSharingML3DataProvider beginScanningForLibraries]
  +[MPHomeSharingML3DataProvider isScanningForLibraries]

  // instance methods
  -[MPHomeSharingML3DataProvider itemResultSetForQueryCriteria:]
  -[MPHomeSharingML3DataProvider loadQueryCriteria:countOfItemsWithCompletionBlock:]
  -[MPHomeSharingML3DataProvider setValue:forProperty:ofItemWithIdentifier:completionBlock:]
  -[MPHomeSharingML3DataProvider hasGeniusMixes]
  -[MPHomeSharingML3DataProvider disconnect]
  -[MPHomeSharingML3DataProvider artworkDataSource]
  -[MPHomeSharingML3DataProvider _tokenDataForAccountID:]
  -[MPHomeSharingML3DataProvider homeSharingLibrary]
  -[MPHomeSharingML3DataProvider _fetchTokensForAuthorizedDSIDs]
  -[MPHomeSharingML3DataProvider name]
  -[MPHomeSharingML3DataProvider errorResolverForItem:]
  -[MPHomeSharingML3DataProvider uniqueIdentifier]
  -[MPHomeSharingML3DataProvider loadQueryCriteria:hasCollectionsWithCompletionBlock:]
  -[MPHomeSharingML3DataProvider protectedContentSupportStorageURL]
  -[MPHomeSharingML3DataProvider loadQueryCriteria:hasItemsWithCompletionBlock:]
  -[MPHomeSharingML3DataProvider writable]
  -[MPHomeSharingML3DataProvider setTokenData:forAuthorizedDSID:]
  -[MPHomeSharingML3DataProvider connectWithAuthenticationData:completionBlock:progressHandler:]
  -[MPHomeSharingML3DataProvider requiresAuthentication]
  -[MPHomeSharingML3DataProvider loadQueryCriteria:countOfCollectionsWithCompletionBlock:]
  -[MPHomeSharingML3DataProvider .cxx_destruct]
  -[MPHomeSharingML3DataProvider adjustedValueForMPProperty:ofEntity:withDefaultValue:]
  -[MPHomeSharingML3DataProvider _fillContainerForQueryCriteria:completionBlock:]
  -[MPHomeSharingML3DataProvider initWithHomeSharingLibrary:]
  -[MPHomeSharingML3DataProvider _homeSharingLibraryDidUpdateRevisionNumber:]
  -[MPHomeSharingML3DataProvider _homeSharingLibraryDidBecomeUnavailable:]
  -[MPHomeSharingML3DataProvider _homeSharingGroupIDDidChangeNotification:]
  -[MPHomeSharingML3DataProvider databaseID]
  -[MPHomeSharingML3DataProvider dealloc]
  -[MPHomeSharingML3DataProvider URLForItemDataRequest:]
  -[MPHomeSharingML3DataProvider isSupportedSharingVersion]
  -[MPHomeSharingML3DataProvider setRentalPlaybackStartDateForItemID:]


MPStoreModelCuratorBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelCuratorBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelCuratorBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPMusicPlayerControllerNowPlayingTimeSnapshot : NSObject <NSSecureCoding>
 @property  BOOL live
 @property  double currentTime
 @property  float rate
 @property  long long state

  // class methods
  +[MPMusicPlayerControllerNowPlayingTimeSnapshot supportsSecureCoding]
  +[MPMusicPlayerControllerNowPlayingTimeSnapshot liveSnapshotWithRate:state:]
  +[MPMusicPlayerControllerNowPlayingTimeSnapshot snapshotWithElapsedTime:duration:rate:atTimestamp:state:]

  // instance methods
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot rate]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot initWithCoder:]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot isEqual:]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot currentTime]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot state]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot isLive]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot _init]
  -[MPMusicPlayerControllerNowPlayingTimeSnapshot encodeWithCoder:]


MPMusicPlayerControllerNowPlaying : NSObject <NSSecureCoding>
 @property  MPMediaItem *item
 @property  NSString *itemIdentifier
 @property  NSString *artworkIdentifier
 @property  long long index
 @property  long long count

  // class methods
  +[MPMusicPlayerControllerNowPlaying supportsSecureCoding]
  +[MPMusicPlayerControllerNowPlaying nowPlayingWithItem:itemIdentifier:artworkIdentifier:index:count:]

  // instance methods
  -[MPMusicPlayerControllerNowPlaying artworkIdentifier]
  -[MPMusicPlayerControllerNowPlaying itemIdentifier]
  -[MPMusicPlayerControllerNowPlaying initWithCoder:]
  -[MPMusicPlayerControllerNowPlaying .cxx_destruct]
  -[MPMusicPlayerControllerNowPlaying count]
  -[MPMusicPlayerControllerNowPlaying item]
  -[MPMusicPlayerControllerNowPlaying _init]
  -[MPMusicPlayerControllerNowPlaying index]
  -[MPMusicPlayerControllerNowPlaying encodeWithCoder:]


MPMusicPlayerControllerApplicationQueueModifications : NSObject <NSSecureCoding>
 @property  NSDictionary *insertedDescriptors
 @property  NSArray *removedItemIdentifiers

  // class methods
  +[MPMusicPlayerControllerApplicationQueueModifications supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerControllerApplicationQueueModifications initWithCoder:]
  -[MPMusicPlayerControllerApplicationQueueModifications .cxx_destruct]
  -[MPMusicPlayerControllerApplicationQueueModifications insertedDescriptors]
  -[MPMusicPlayerControllerApplicationQueueModifications initWithInsertedDescriptors:removedItemIdentifiers:]
  -[MPMusicPlayerControllerApplicationQueueModifications removedItemIdentifiers]
  -[MPMusicPlayerControllerApplicationQueueModifications encodeWithCoder:]


MPMusicPlayerServerStateUpdateRecord : NSObject <NSSecureCoding>
 @property  BOOL hasQueueDescriptor
 @property  MPMusicPlayerQueueDescriptor *queueDescriptor
 @property  BOOL hasNowPlaying
 @property  MPMusicPlayerControllerNowPlaying *nowPlaying
 @property  BOOL hasTimeSnapshot
 @property  MPMusicPlayerControllerNowPlayingTimeSnapshot *timeSnapshot
 @property  BOOL hasRepeatMode
 @property  long long repeatMode
 @property  BOOL hasShuffleMode
 @property  long long shuffleMode
 @property  BOOL hasContentItemIDs
 @property  NSArray *contentItemIDs
 @property  BOOL queueDidChange
 @property  BOOL itemDidEnd
 @property  BOOL queueDidEnd

  // class methods
  +[MPMusicPlayerServerStateUpdateRecord supportsSecureCoding]

  // instance methods
  -[MPMusicPlayerServerStateUpdateRecord setNowPlaying:]
  -[MPMusicPlayerServerStateUpdateRecord setShuffleMode:]
  -[MPMusicPlayerServerStateUpdateRecord initWithCoder:]
  -[MPMusicPlayerServerStateUpdateRecord nowPlaying]
  -[MPMusicPlayerServerStateUpdateRecord shuffleMode]
  -[MPMusicPlayerServerStateUpdateRecord itemDidEnd]
  -[MPMusicPlayerServerStateUpdateRecord queueDidEnd]
  -[MPMusicPlayerServerStateUpdateRecord .cxx_destruct]
  -[MPMusicPlayerServerStateUpdateRecord hasQueueDescriptor]
  -[MPMusicPlayerServerStateUpdateRecord hasNowPlaying]
  -[MPMusicPlayerServerStateUpdateRecord hasTimeSnapshot]
  -[MPMusicPlayerServerStateUpdateRecord timeSnapshot]
  -[MPMusicPlayerServerStateUpdateRecord hasRepeatMode]
  -[MPMusicPlayerServerStateUpdateRecord hasShuffleMode]
  -[MPMusicPlayerServerStateUpdateRecord hasContentItemIDs]
  -[MPMusicPlayerServerStateUpdateRecord contentItemIDs]
  -[MPMusicPlayerServerStateUpdateRecord queueDidChange]
  -[MPMusicPlayerServerStateUpdateRecord setHasQueueDescriptor:]
  -[MPMusicPlayerServerStateUpdateRecord setQueueDidChange:]
  -[MPMusicPlayerServerStateUpdateRecord setHasNowPlaying:]
  -[MPMusicPlayerServerStateUpdateRecord setHasTimeSnapshot:]
  -[MPMusicPlayerServerStateUpdateRecord setTimeSnapshot:]
  -[MPMusicPlayerServerStateUpdateRecord setHasRepeatMode:]
  -[MPMusicPlayerServerStateUpdateRecord setItemDidEnd:]
  -[MPMusicPlayerServerStateUpdateRecord setQueueDidEnd:]
  -[MPMusicPlayerServerStateUpdateRecord setQueueDescriptor:]
  -[MPMusicPlayerServerStateUpdateRecord repeatMode]
  -[MPMusicPlayerServerStateUpdateRecord queueDescriptor]
  -[MPMusicPlayerServerStateUpdateRecord setRepeatMode:]
  -[MPMusicPlayerServerStateUpdateRecord setHasShuffleMode:]
  -[MPMusicPlayerServerStateUpdateRecord setHasContentItemIDs:]
  -[MPMusicPlayerServerStateUpdateRecord setContentItemIDs:]
  -[MPMusicPlayerServerStateUpdateRecord encodeWithCoder:]


MPHomeSharingURLProtocol : NSURLProtocol
  // class methods
  +[MPHomeSharingURLProtocol initialize]
  +[MPHomeSharingURLProtocol canonicalRequestForRequest:]
  +[MPHomeSharingURLProtocol canInitWithRequest:]

  // instance methods
  -[MPHomeSharingURLProtocol stopLoading]
  -[MPHomeSharingURLProtocol startLoading]


MPCubicSpringTimingParameters : UISpringTimingParameters
 @property  UICubicTimingParameters *springCubicTimingParameters

  // class methods
  +[MPCubicSpringTimingParameters standardTimingParameters]

  // instance methods
  -[MPCubicSpringTimingParameters .cxx_destruct]
  -[MPCubicSpringTimingParameters cubicTimingParameters]
  -[MPCubicSpringTimingParameters setSpringCubicTimingParameters:]
  -[MPCubicSpringTimingParameters copyWithZone:]
  -[MPCubicSpringTimingParameters springCubicTimingParameters]


MPCubicSpringAnimator : UIViewPropertyAnimator
  // class methods
  +[MPCubicSpringAnimator standardSpringAnimator]

  // instance methods
  -[MPCubicSpringAnimator _basicAnimationForView:withKeyPath:]


MPMediaLibraryArtworkRequest : NSObject <MPArtworkTokenParametersRepresenting>
 @property  ICUserIdentity *userIdentity
 @property  ML3MusicLibrary *musicLibrary
 @property  MPMediaLibrary *library
 @property  long long artworkType
 @property  unsigned long libraryID
 @property  long long entityType
 @property  MPMediaLibraryArtwork *libraryArtwork
 @property  double retrievalTime
 @property  unsigned long mediaType
 @property  NSString *availableArtworkToken
 @property  NSString *fetchableArtworkToken
 @property  NSNumber *fetchableArtworkSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMediaLibraryArtworkRequest artworkTokenWithParameters:]

  // instance methods
  -[MPMediaLibraryArtworkRequest userIdentity]
  -[MPMediaLibraryArtworkRequest entityType]
  -[MPMediaLibraryArtworkRequest library]
  -[MPMediaLibraryArtworkRequest libraryID]
  -[MPMediaLibraryArtworkRequest .cxx_destruct]
  -[MPMediaLibraryArtworkRequest isEqual:]
  -[MPMediaLibraryArtworkRequest setRetrievalTime:]
  -[MPMediaLibraryArtworkRequest mediaType]
  -[MPMediaLibraryArtworkRequest initWithLibrary:identifier:entityType:artworkType:]
  -[MPMediaLibraryArtworkRequest setAvailableArtworkToken:]
  -[MPMediaLibraryArtworkRequest setFetchableArtworkToken:]
  -[MPMediaLibraryArtworkRequest setFetchableArtworkSource:]
  -[MPMediaLibraryArtworkRequest artworkType]
  -[MPMediaLibraryArtworkRequest libraryArtwork]
  -[MPMediaLibraryArtworkRequest retrievalTime]
  -[MPMediaLibraryArtworkRequest musicLibrary]
  -[MPMediaLibraryArtworkRequest _onQueue_musicLibrary]
  -[MPMediaLibraryArtworkRequest _onQueue_updateTokens]
  -[MPMediaLibraryArtworkRequest setLibraryArtwork:]
  -[MPMediaLibraryArtworkRequest initWithLibrary:identifier:entityType:artworkType:mediaType:]
  -[MPMediaLibraryArtworkRequest artworkTokenParameters]
  -[MPMediaLibraryArtworkRequest availableArtworkToken]
  -[MPMediaLibraryArtworkRequest fetchableArtworkToken]
  -[MPMediaLibraryArtworkRequest fetchableArtworkSource]
  -[MPMediaLibraryArtworkRequest clearFailedFetchableToken]
  -[MPMediaLibraryArtworkRequest promoteFetchableArtworkTokenIfNeeded]


MPMediaLibraryArtwork : NSObject
 @property  MPMediaLibraryArtworkRequest *artworkRequest
 @property  ML3Artwork *artwork
 @property  {os_unfair_lock_s=I} stateLock
 @property  NSArray *validSizes
 @property  NSURL *originalFileURL
 @property  NSDictionary *effectsMetadata

  // class methods
  +[MPMediaLibraryArtwork availableArtworkWithRequest:]
  +[MPMediaLibraryArtwork artworkExistsForRequest:]
  +[MPMediaLibraryArtwork needsToFetchArtworkForRequest:]
  +[MPMediaLibraryArtwork fetchArtworkForRequest:completionHandler:]
  +[MPMediaLibraryArtwork cancelFetchingArtworkForRequest:]
  +[MPMediaLibraryArtwork fetchArtworkInfoForRequest:completionHandler:]

  // instance methods
  -[MPMediaLibraryArtwork artwork]
  -[MPMediaLibraryArtwork setArtwork:]
  -[MPMediaLibraryArtwork .cxx_destruct]
  -[MPMediaLibraryArtwork init]
  -[MPMediaLibraryArtwork isEqual:]
  -[MPMediaLibraryArtwork stateLock]
  -[MPMediaLibraryArtwork setArtworkRequest:]
  -[MPMediaLibraryArtwork artworkRequest]
  -[MPMediaLibraryArtwork validSizes]
  -[MPMediaLibraryArtwork imageFileURLForSize:]
  -[MPMediaLibraryArtwork effectsMetadata]
  -[MPMediaLibraryArtwork originalFileURL]
  -[MPMediaLibraryArtwork setEffectsMetadata:]
  -[MPMediaLibraryArtwork imageFileURLForEffect:]


MPModelPlaylistEntriesShareEligibilityRequest : NSObject <NSCopying>
 @property  MPModelPlaylist *playlist

  // instance methods
  -[MPModelPlaylistEntriesShareEligibilityRequest newOperationWithResponseHandler:]
  -[MPModelPlaylistEntriesShareEligibilityRequest .cxx_destruct]
  -[MPModelPlaylistEntriesShareEligibilityRequest playlist]
  -[MPModelPlaylistEntriesShareEligibilityRequest copyWithZone:]
  -[MPModelPlaylistEntriesShareEligibilityRequest initWithPlaylist:]


MPServerObjectDatabase : NSObject <MPMediaKitEntityRelationshipPayloadProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPServerObjectDatabase setPrefersInMemoryDatabase:]
  +[MPServerObjectDatabase prefersInMemoryDatabase]
  +[MPServerObjectDatabase sharedServerObjectDatabase]

  // instance methods
  -[MPServerObjectDatabase payloadDataForIdentifierSet:outError:]
  -[MPServerObjectDatabase importObjectsFromRequest:options:error:]
  -[MPServerObjectDatabase modelObjectMatchingIdentifierSet:propertySet:]
  -[MPServerObjectDatabase purgeGlideSubscriptionDataForHashedAccoundID:]
  -[MPServerObjectDatabase assetsWithMiniSINFsMatchingIdentifierSet:]
  -[MPServerObjectDatabase _payloadForIdentifierSet:outError:]
  -[MPServerObjectDatabase .cxx_destruct]
  -[MPServerObjectDatabase _initWithDatabaseCreationBlock:]
  -[MPServerObjectDatabase shouldRenewPlaybackAuthorizationTokenForEntityMatchingIdentifierSet:trustID:]
  -[MPServerObjectDatabase importAssetsFromRequest:error:]
  -[MPServerObjectDatabase _createDatabaseSchema]
  -[MPServerObjectDatabase payloadForRelatedEntityWithIdentifierSet:]
  -[MPServerObjectDatabase hlsAssetMatchingIdentifierSet:]
  -[MPServerObjectDatabase addObserver:]
  -[MPServerObjectDatabase relatedIdentifierSetsForParentIdentifierSet:childKey:]
  -[MPServerObjectDatabase playbackAuthorizationTokenForEntityMatchingIdentifierSet:trustID:]
  -[MPServerObjectDatabase _hlsAssetMatchingIdentifierSet:query:]
  -[MPServerObjectDatabase importObjectsFromRequest:options:trustID:error:]
  -[MPServerObjectDatabase _playbackAuthorizationTokenForIdentifier:trustID:]
  -[MPServerObjectDatabase modelGenericObjectFromObject:playbackAuthorizationToken:]
  -[MPServerObjectDatabase removePlaybackAuthorizationTokensForTrust:]
  -[MPServerObjectDatabase enumerateAssetsMissingSINFsForHashedPersonID:usingBlock:]
  -[MPServerObjectDatabase relatedIdentifierSetsForParentIdentifierSet:parentVersionHash:childKey:]
  -[MPServerObjectDatabase removeObserver:]
  -[MPServerObjectDatabase assetsMatchingIdentifierSet:]
  -[MPServerObjectDatabase _assetsMatchingIdentifierSet:query:]


_MPServerObjectDatabaseImporter : NSObject <MPServerObjectDatabaseOperations>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPServerObjectDatabaseImporter _importAssetMiniSINF:forIdentifier:hashedPersonID:flavor:]
  -[_MPServerObjectDatabaseImporter importPlaybackAuthorizationToken:identifiers:source:type:expirationDate:trustID:]
  -[_MPServerObjectDatabaseImporter relateIdentifiers:toParentIdentifiers:parentVersionHash:childKey:order:]
  -[_MPServerObjectDatabaseImporter .cxx_destruct]
  -[_MPServerObjectDatabaseImporter _importAssetFullSINF:forIdentifier:hashedPersonID:flavor:]
  -[_MPServerObjectDatabaseImporter _existingAssetMatchingIdentifier:hashedPersonID:flavor:]
  -[_MPServerObjectDatabaseImporter removeRelationshipsForParentIdentifiers:childKey:]
  -[_MPServerObjectDatabaseImporter _existingHLSAssetMatchingIdentifier:hashedPersonID:]
  -[_MPServerObjectDatabaseImporter importHLSAssetURL:keyCertificateURL:keyServerURL:redeliveryId:protocolType:isiTunesStoreStream:forIdentifiers:expirationDate:]
  -[_MPServerObjectDatabaseImporter dealloc]
  -[_MPServerObjectDatabaseImporter importAssetURL:forIdentifiers:flavor:expirationDate:]
  -[_MPServerObjectDatabaseImporter importObject:type:identifiers:source:expiration:]
  -[_MPServerObjectDatabaseImporter importAssetSinf:type:forIdentifier:hashedPersonID:flavor:sinfPayload:]


MPServerObjectDatabaseAsset : NSObject
 @property  NSString *identifier
 @property  NSString *hashedPersonID
 @property  long long flavor
 @property  NSURL *url
 @property  NSData *miniSINF
 @property  NSArray *sinfs

  // instance methods
  -[MPServerObjectDatabaseAsset sinfs]
  -[MPServerObjectDatabaseAsset url]
  -[MPServerObjectDatabaseAsset initWithIdentifier:hashedPersonID:flavor:url:miniSINF:]
  -[MPServerObjectDatabaseAsset .cxx_destruct]
  -[MPServerObjectDatabaseAsset initWithIdentifier:hashedPersonID:flavor:url:sinfs:]
  -[MPServerObjectDatabaseAsset hashedPersonID]
  -[MPServerObjectDatabaseAsset identifier]
  -[MPServerObjectDatabaseAsset flavor]
  -[MPServerObjectDatabaseAsset initWithSQLRowResult:]
  -[MPServerObjectDatabaseAsset _initWithIdentifier:hashedPersonID:flavor:url:miniSINF:sinfs:]
  -[MPServerObjectDatabaseAsset miniSINF]


MPServerObjectDatabaseHLSAsset : NSObject
 @property  NSString *identifier
 @property  NSString *hashedPersonID
 @property  NSURL *playlistURL
 @property  NSURL *keyCertificateURL
 @property  NSURL *keyServerURL
 @property  NSNumber *keyServerAdamID
 @property  NSString *keyServerProtocolType
 @property  BOOL iTunesStoreStream

  // instance methods
  -[MPServerObjectDatabaseHLSAsset _initWithIdentifier:hashedPersonID:playlistURL:keyCertificateURL:keyServerURL:keyServerAdamID:keyServerProtocolType:isiTunesStoreStream:]
  -[MPServerObjectDatabaseHLSAsset .cxx_destruct]
  -[MPServerObjectDatabaseHLSAsset hashedPersonID]
  -[MPServerObjectDatabaseHLSAsset identifier]
  -[MPServerObjectDatabaseHLSAsset keyServerURL]
  -[MPServerObjectDatabaseHLSAsset initWithSQLRowResult:]
  -[MPServerObjectDatabaseHLSAsset playlistURL]
  -[MPServerObjectDatabaseHLSAsset keyCertificateURL]
  -[MPServerObjectDatabaseHLSAsset keyServerProtocolType]
  -[MPServerObjectDatabaseHLSAsset keyServerAdamID]
  -[MPServerObjectDatabaseHLSAsset isiTunesStoreStream]


MPStoreModelRequestConfiguration : NSObject
 @property  NSURLRequest *URLRequest
 @property  NSArray *URLRequests
 @property  NSArray *requestedItemIdentifiers
 @property  unsigned long itemMetadataRequestReason
 @property  long long type

  // instance methods
  -[MPStoreModelRequestConfiguration initWithURLRequest:]
  -[MPStoreModelRequestConfiguration .cxx_destruct]
  -[MPStoreModelRequestConfiguration URLRequest]
  -[MPStoreModelRequestConfiguration initWithURLRequests:]
  -[MPStoreModelRequestConfiguration type]
  -[MPStoreModelRequestConfiguration initWithRequestedItemIdentifiers:reason:]
  -[MPStoreModelRequestConfiguration URLRequests]
  -[MPStoreModelRequestConfiguration requestedItemIdentifiers]
  -[MPStoreModelRequestConfiguration itemMetadataRequestReason]


MPHomeSharingRentalTracker : NSObject
  // class methods
  +[MPHomeSharingRentalTracker sharedInstance]

  // instance methods
  -[MPHomeSharingRentalTracker .cxx_destruct]
  -[MPHomeSharingRentalTracker _init]
  -[MPHomeSharingRentalTracker removeAllRentalsForDatabaseID:]
  -[MPHomeSharingRentalTracker _saveRentals]
  -[MPHomeSharingRentalTracker removeRentalWithItemID:]
  -[MPHomeSharingRentalTracker addRentalWithItemID:databaseID:]


MPPlayableContentManagerContext : NSObject
 @property  long long enforcedContentItemsCount
 @property  long long enforcedContentTreeDepth
 @property  BOOL contentLimitsEnforced
 @property  BOOL endpointAvailable
 @property  BOOL contentLimitsEnabled

  // instance methods
  -[MPPlayableContentManagerContext setContentLimitsEnforced:]
  -[MPPlayableContentManagerContext setEnforcedContentItemsCount:]
  -[MPPlayableContentManagerContext setEndpointAvailable:]
  -[MPPlayableContentManagerContext setEnforcedContentTreeDepth:]
  -[MPPlayableContentManagerContext contentLimitsEnforced]
  -[MPPlayableContentManagerContext contentLimitsEnabled]
  -[MPPlayableContentManagerContext enforcedContentItemsCount]
  -[MPPlayableContentManagerContext enforcedContentTreeDepth]
  -[MPPlayableContentManagerContext endpointAvailable]


MPModelForYouRecommendationMusicKitGroupBuilder : NSObject
 @property  MPPropertySet *requestedGroupPropertySet
 @property  MPPropertySet *requestedItemPropertySet
 @property  NSDictionary *storeItemMetadataResults
 @property  MPMutableSectionedCollection *flatSectionedItems

  // class methods
  +[MPModelForYouRecommendationMusicKitGroupBuilder allSupportedItemProperties]
  +[MPModelForYouRecommendationMusicKitGroupBuilder allSupportedGroupProperties]

  // instance methods
  -[MPModelForYouRecommendationMusicKitGroupBuilder initWithRequestedGroupPropertySet:requestedItemPropertySet:storeItemMetadataResults:flatSectionedItems:storeURLBag:isListenNow:]
  -[MPModelForYouRecommendationMusicKitGroupBuilder .cxx_destruct]
  -[MPModelForYouRecommendationMusicKitGroupBuilder modelObjectForItemsArray:userIdentity:]
  -[MPModelForYouRecommendationMusicKitGroupBuilder modelObjectForRecentlyPlayedArray:userIdentity:]
  -[MPModelForYouRecommendationMusicKitGroupBuilder modelObjectForRecommendationDictionary:userIdentity:]
  -[MPModelForYouRecommendationMusicKitGroupBuilder initializeRequestedGroupProperties]
  -[MPModelForYouRecommendationMusicKitGroupBuilder requestedGroupPropertySet]
  -[MPModelForYouRecommendationMusicKitGroupBuilder requestedItemPropertySet]
  -[MPModelForYouRecommendationMusicKitGroupBuilder storeItemMetadataResults]
  -[MPModelForYouRecommendationMusicKitGroupBuilder flatSectionedItems]


MPHomeSharingErrorResolver : MPAVErrorResolver <SSAuthorizationRequestDelegate>
 @property  MPHomeSharingML3DataProvider *dataProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPHomeSharingErrorResolver request:didFailWithError:]
  -[MPHomeSharingErrorResolver initWithKeybagURL:accountID:accountTokenData:downloaderAccountID:downloaderAccountTokenData:familyAccountID:]
  -[MPHomeSharingErrorResolver requestDidFinish:]
  -[MPHomeSharingErrorResolver .cxx_destruct]
  -[MPHomeSharingErrorResolver setDataProvider:]
  -[MPHomeSharingErrorResolver resolveError:]
  -[MPHomeSharingErrorResolver dealloc]
  -[MPHomeSharingErrorResolver dataProvider]
  -[MPHomeSharingErrorResolver initWithKeybagURL:accountID:accountTokenData:]
  -[MPHomeSharingErrorResolver _errorIsFairPlayError:]
  -[MPHomeSharingErrorResolver _performMachineAuthorization]
  -[MPHomeSharingErrorResolver _processNextAuthorizationRequest]
  -[MPHomeSharingErrorResolver authorizationRequest:didReceiveResponse:]


MPMediaLibraryPrivacyContext : NSObject
  // class methods
  +[MPMediaLibraryPrivacyContext initialize]
  +[MPMediaLibraryPrivacyContext setDefaultClientWithAuditToken:]
  +[MPMediaLibraryPrivacyContext sharedContextForCurrentProcess]
  +[MPMediaLibraryPrivacyContext contextForDefaultClient]

  // instance methods
  -[MPMediaLibraryPrivacyContext .cxx_destruct]
  -[MPMediaLibraryPrivacyContext initWithClientIdentity:]
  -[MPMediaLibraryPrivacyContext logPrivacyAccess]
  -[MPMediaLibraryPrivacyContext init]
  -[MPMediaLibraryPrivacyContext endAccessInterval]
  -[MPMediaLibraryPrivacyContext beginAccessInterval]
  -[MPMediaLibraryPrivacyContext initWithAuditToken:]
  -[MPMediaLibraryPrivacyContext initWithPAApplication:]


MPRemoteCommandCenter : NSObject <MPRemoteCommandDelegate_Internal>
 @property  MPRemoteCommand *specialSeekForwardCommand
 @property  MPRemoteCommand *specialSeekBackwardCommand
 @property  MPAdvanceShuffleModeCommand *advanceShuffleModeCommand
 @property  MPAdvanceRepeatModeCommand *advanceRepeatModeCommand
 @property  MPRemoteCommand *removeFromPlaybackQueueCommand
 @property  MPReorderQueueCommand *reorderQueueCommand
 @property  MPRemoteCommand *playItemInQueueCommand
 @property  MPRemoteCommand *createRadioStationCommand
 @property  MPSetPlaybackQueueCommand *setPlaybackQueueCommand
 @property  MPRemoteCommand *prepareForSetPlaybackQueueCommand
 @property  MPInsertIntoPlaybackQueueCommand *insertIntoPlaybackQueueCommand
 @property  MPFeedbackCommand *addNowPlayingItemToLibraryCommand
 @property  MPFeedbackCommand *addItemToLibraryCommand
 @property  MPSetPlaybackSessionCommand *setPlaybackSessionCommand
 @property  MPPreloadPlaybackSessionCommand *preloadPlaybackSessionCommand
 @property  MPSetPriorityForPlaybackSessionCommand *setPriorityForPlaybackSessionCommand
 @property  MPRemoteCommand *discardPlaybackSessionCommand
 @property  MPRemoteCommand *reshuffleCommand
 @property  MPChangeQueueEndActionCommand *changeQueueEndActionCommand
 @property  MPRemoteCommand *leaveSharedPlaybackSessionCommand
 @property  MPRemoteCommand *postEventNoticeCommand
 @property  BOOL commandHandlersRegistered
 @property  BOOL canBeNowPlayingApplication
 @property  NSString *playerID
 @property  MRPlayerPath *playerPath
 @property  BOOL disableAutomaticCanBeNowPlaying
 @property  BOOL wantsSerializedEventDelivery
 @property  MPRemoteCommand *pauseCommand
 @property  MPRemoteCommand *playCommand
 @property  MPRemoteCommand *stopCommand
 @property  MPRemoteCommand *togglePlayPauseCommand
 @property  MPRemoteCommand *enableLanguageOptionCommand
 @property  MPRemoteCommand *disableLanguageOptionCommand
 @property  MPChangePlaybackRateCommand *changePlaybackRateCommand
 @property  MPChangeRepeatModeCommand *changeRepeatModeCommand
 @property  MPChangeShuffleModeCommand *changeShuffleModeCommand
 @property  MPRemoteCommand *nextTrackCommand
 @property  MPRemoteCommand *previousTrackCommand
 @property  MPSkipIntervalCommand *skipForwardCommand
 @property  MPSkipIntervalCommand *skipBackwardCommand
 @property  MPRemoteCommand *seekForwardCommand
 @property  MPRemoteCommand *seekBackwardCommand
 @property  MPChangePlaybackPositionCommand *changePlaybackPositionCommand
 @property  MPRatingCommand *ratingCommand
 @property  MPFeedbackCommand *likeCommand
 @property  MPFeedbackCommand *dislikeCommand
 @property  MPFeedbackCommand *bookmarkCommand
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPRemoteCommandCenter getPendingCommandTypesWithCompletion:]
  +[MPRemoteCommandCenter commandCenterForPlayerPath:]
  +[MPRemoteCommandCenter updateLaunchCommandsWithConfigurationHandler:]
  +[MPRemoteCommandCenter sharedCommandCenter]
  +[MPRemoteCommandCenter commandCenterForPlayerID:]
  +[MPRemoteCommandCenter _numberOfCommandCentersWithTargets]

  // instance methods
  -[MPRemoteCommandCenter _startMediaRemoteSync]
  -[MPRemoteCommandCenter playItemInQueueCommand]
  -[MPRemoteCommandCenter playerPath]
  -[MPRemoteCommandCenter addNowPlayingItemToLibraryCommand]
  -[MPRemoteCommandCenter initWithPlayerPath:]
  -[MPRemoteCommandCenter likeCommand]
  -[MPRemoteCommandCenter isInvalidated]
  -[MPRemoteCommandCenter containsCommand:]
  -[MPRemoteCommandCenter insertIntoPlaybackQueueCommand]
  -[MPRemoteCommandCenter leaveSharedPlaybackSessionCommand]
  -[MPRemoteCommandCenter reorderQueueCommand]
  -[MPRemoteCommandCenter _onQueue_stateDictionary]
  -[MPRemoteCommandCenter preloadPlaybackSessionCommand]
  -[MPRemoteCommandCenter reshuffleCommand]
  -[MPRemoteCommandCenter disableAutomaticCanBeNowPlaying]
  -[MPRemoteCommandCenter setDisableAutomaticCanBeNowPlaying:]
  -[MPRemoteCommandCenter changePlaybackPositionCommand]
  -[MPRemoteCommandCenter createRadioStationCommand]
  -[MPRemoteCommandCenter disableLanguageOptionCommand]
  -[MPRemoteCommandCenter .cxx_destruct]
  -[MPRemoteCommandCenter discardPlaybackSessionCommand]
  -[MPRemoteCommandCenter removeFromPlaybackQueueCommand]
  -[MPRemoteCommandCenter initWithPlayerID:]
  -[MPRemoteCommandCenter setPlaybackQueueCommand]
  -[MPRemoteCommandCenter specialSeekForwardCommand]
  -[MPRemoteCommandCenter ratingCommand]
  -[MPRemoteCommandCenter advanceRepeatModeCommand]
  -[MPRemoteCommandCenter _pushMediaRemoteCommand:withOptions:completion:]
  -[MPRemoteCommandCenter seekBackwardCommand]
  -[MPRemoteCommandCenter commandHandlersRegistered]
  -[MPRemoteCommandCenter remoteCommandDidMutatePropagatableProperty:]
  -[MPRemoteCommandCenter stopCommand]
  -[MPRemoteCommandCenter skipBackwardCommand]
  -[MPRemoteCommandCenter addItemToLibraryCommand]
  -[MPRemoteCommandCenter seekForwardCommand]
  -[MPRemoteCommandCenter prepareForSetPlaybackQueueCommand]
  -[MPRemoteCommandCenter wantsSerializedEventDelivery]
  -[MPRemoteCommandCenter canBeNowPlayingApplication]
  -[MPRemoteCommandCenter getPendingCommandTypesWithCompletion:]
  -[MPRemoteCommandCenter togglePlayPauseCommand]
  -[MPRemoteCommandCenter pauseCommand]
  -[MPRemoteCommandCenter specialSeekBackwardCommand]
  -[MPRemoteCommandCenter _activeCommands]
  -[MPRemoteCommandCenter changeShuffleModeCommand]
  -[MPRemoteCommandCenter nextTrackCommand]
  -[MPRemoteCommandCenter changeQueueEndActionCommand]
  -[MPRemoteCommandCenter _flushEventQueue]
  -[MPRemoteCommandCenter setWantsSerializedEventDelivery:]
  -[MPRemoteCommandCenter changePlaybackRateCommand]
  -[MPRemoteCommandCenter _commandTargetsDidChangeNotification:]
  -[MPRemoteCommandCenter advanceShuffleModeCommand]
  -[MPRemoteCommandCenter _createRemoteCommandWithConcreteClass:mediaRemoteType:]
  -[MPRemoteCommandCenter dealloc]
  -[MPRemoteCommandCenter skipForwardCommand]
  -[MPRemoteCommandCenter invalidate]
  -[MPRemoteCommandCenter playCommand]
  -[MPRemoteCommandCenter _scheduleSupportedCommandsChanged]
  -[MPRemoteCommandCenter bookmarkCommand]
  -[MPRemoteCommandCenter playerID]
  -[MPRemoteCommandCenter enableLanguageOptionCommand]
  -[MPRemoteCommandCenter postEventNoticeCommand]
  -[MPRemoteCommandCenter setPriorityForPlaybackSessionCommand]
  -[MPRemoteCommandCenter dispatchCommandEvent:completion:]
  -[MPRemoteCommandCenter changeRepeatModeCommand]
  -[MPRemoteCommandCenter _stopMediaRemoteSync]
  -[MPRemoteCommandCenter dislikeCommand]
  -[MPRemoteCommandCenter previousTrackCommand]
  -[MPRemoteCommandCenter _updateCanBeNowPlayingApplicationIfNeeded]
  -[MPRemoteCommandCenter setPlaybackSessionCommand]


_MPRemoteLaunchCommandCenter : MPRemoteCommandCenter
  // instance methods
  -[_MPRemoteLaunchCommandCenter _startMediaRemoteSync]
  -[_MPRemoteLaunchCommandCenter _scheduleSupportedCommandsChanged]
  -[_MPRemoteLaunchCommandCenter _stopMediaRemoteSync]


MPStoreModelTVSeasonBuilder : MPStoreModelObjectBuilder

MPHomeSharingRentalErrorResolver : MPAVErrorResolver <SSRequestDelegate>
 @property  MPHomeSharingML3DataProvider *dataProvider
 @property  unsigned long itemID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPHomeSharingRentalErrorResolver request:didFailWithError:]
  -[MPHomeSharingRentalErrorResolver requestDidFinish:]
  -[MPHomeSharingRentalErrorResolver .cxx_destruct]
  -[MPHomeSharingRentalErrorResolver itemID]
  -[MPHomeSharingRentalErrorResolver setDataProvider:]
  -[MPHomeSharingRentalErrorResolver resolveError:]
  -[MPHomeSharingRentalErrorResolver dealloc]
  -[MPHomeSharingRentalErrorResolver dataProvider]
  -[MPHomeSharingRentalErrorResolver initWithItemID:homeSharingID:rentalID:accountID:]
  -[MPHomeSharingRentalErrorResolver _errorIsFairPlayError:]


MPModelHomeSharingAsset : MPModelObject
 @property  BOOL available
 @property  NSURL *protectedContentSupportStorageFileURL
 @property  NSURL *URL

  // class methods
  +[MPModelHomeSharingAsset __URL_KEY]
  +[MPModelHomeSharingAsset __protectedContentSupportStorageFileURL_KEY]
  +[MPModelHomeSharingAsset __available_KEY]


MPModelLibraryHasPurchasesRequestOperation : MPAsyncOperation
 @property  MPModelLibraryHasPurchasesRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryHasPurchasesRequestOperation setRequest:]
  -[MPModelLibraryHasPurchasesRequestOperation .cxx_destruct]
  -[MPModelLibraryHasPurchasesRequestOperation responseHandler]
  -[MPModelLibraryHasPurchasesRequestOperation setResponseHandler:]
  -[MPModelLibraryHasPurchasesRequestOperation execute]
  -[MPModelLibraryHasPurchasesRequestOperation request]


MPModelLibraryHasPurchasesRequest : NSObject
 @property  MPModelObject *modelObject
 @property  MPMediaLibrary *mediaLibrary
 @property  MPModelKind *itemKind

  // instance methods
  -[MPModelLibraryHasPurchasesRequest setMediaLibrary:]
  -[MPModelLibraryHasPurchasesRequest newOperationWithResponseHandler:]
  -[MPModelLibraryHasPurchasesRequest mediaLibrary]
  -[MPModelLibraryHasPurchasesRequest .cxx_destruct]
  -[MPModelLibraryHasPurchasesRequest setItemKind:]
  -[MPModelLibraryHasPurchasesRequest setModelObject:]
  -[MPModelLibraryHasPurchasesRequest itemKind]
  -[MPModelLibraryHasPurchasesRequest copyWithZone:]
  -[MPModelLibraryHasPurchasesRequest modelObject]


MPStoreItemLibraryImportElement : NSObject
 @property  long long storeItemID
 @property  NSDictionary *additionalTrackMetadata

  // instance methods
  -[MPStoreItemLibraryImportElement storeItemID]
  -[MPStoreItemLibraryImportElement initWithStoreItemID:additionalTrackMetadata:]
  -[MPStoreItemLibraryImportElement .cxx_destruct]
  -[MPStoreItemLibraryImportElement additionalTrackMetadata]
  -[MPStoreItemLibraryImportElement storeItem]


MPStoreItemLibraryImportLookupElement : MPStoreItemLibraryImportElement
 @property  NSDictionary *lookupDictionary

  // instance methods
  -[MPStoreItemLibraryImportLookupElement .cxx_destruct]
  -[MPStoreItemLibraryImportLookupElement lookupDictionary]
  -[MPStoreItemLibraryImportLookupElement initWithLookupDictionary:additionalTrackMetadata:]
  -[MPStoreItemLibraryImportLookupElement storeItem]


MPStoreItemLibraryImport : NSObject
 @property  NSArray *importElements
 @property  BOOL addToCloudLibrary
 @property  MPModelObject *referralObject

  // instance methods
  -[MPStoreItemLibraryImport initWithImportElements:usingCloudLibraryDestination:]
  -[MPStoreItemLibraryImport initWithImportElements:referralObject:usingCloudLibraryDestination:]
  -[MPStoreItemLibraryImport .cxx_destruct]
  -[MPStoreItemLibraryImport importElements]
  -[MPStoreItemLibraryImport addToCloudLibrary]
  -[MPStoreItemLibraryImport referralObject]


MPMusicMediaPickerRemoteViewController : _UIRemoteViewController <MPMusicMediaPickerClientController>
 @property  MPMediaPickerController *mediaPickerController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPMusicMediaPickerRemoteViewController exportedInterface]
  +[MPMusicMediaPickerRemoteViewController serviceViewControllerInterface]

  // instance methods
  -[MPMusicMediaPickerRemoteViewController viewServiceDidTerminateWithError:]
  -[MPMusicMediaPickerRemoteViewController .cxx_destruct]
  -[MPMusicMediaPickerRemoteViewController setMediaPickerController:]
  -[MPMusicMediaPickerRemoteViewController remoteMediaPickerDidCancel]
  -[MPMusicMediaPickerRemoteViewController remoteMediaPickerDidPickMediaItems:]
  -[MPMusicMediaPickerRemoteViewController remoteMediaPickerDidPickPlaybackArchive:]
  -[MPMusicMediaPickerRemoteViewController mediaPickerController]
  -[MPMusicMediaPickerRemoteViewController _canShowWhileLocked]


MPAVTelevisionRoute : MPAVRoute
 @property  ^v television

  // instance methods
  -[MPAVTelevisionRoute routeUID]
  -[MPAVTelevisionRoute .cxx_destruct]
  -[MPAVTelevisionRoute connection]
  -[MPAVTelevisionRoute routeSubtype]
  -[MPAVTelevisionRoute initWithTelevision:]
  -[MPAVTelevisionRoute television]
  -[MPAVTelevisionRoute dealloc]
  -[MPAVTelevisionRoute routeType]


MPAudioAndSubtitlesController : UIViewController
 @property  UIViewController *viewControllerForOrientation

  // instance methods
  -[MPAudioAndSubtitlesController initWithAVItem:completionHandler:]
  -[MPAudioAndSubtitlesController viewControllerForOrientation]
  -[MPAudioAndSubtitlesController setViewControllerForOrientation:]
  -[MPAudioAndSubtitlesController .cxx_destruct]


MPStoreLibraryMappingRequestOperation : MPAsyncOperation
 @property  MPMediaLibraryView *libraryView
 @property  Class modelClass
 @property  NSArray *identifierSets
 @property  @? responseHandler

  // class methods
  +[MPStoreLibraryMappingRequestOperation supportsModelClass:]

  // instance methods
  -[MPStoreLibraryMappingRequestOperation libraryView]
  -[MPStoreLibraryMappingRequestOperation setLibraryView:]
  -[MPStoreLibraryMappingRequestOperation .cxx_destruct]
  -[MPStoreLibraryMappingRequestOperation responseHandler]
  -[MPStoreLibraryMappingRequestOperation setModelClass:]
  -[MPStoreLibraryMappingRequestOperation setResponseHandler:]
  -[MPStoreLibraryMappingRequestOperation execute]
  -[MPStoreLibraryMappingRequestOperation modelClass]
  -[MPStoreLibraryMappingRequestOperation identifierSets]
  -[MPStoreLibraryMappingRequestOperation setIdentifierSets:]


MPModelRecentlyPlayedRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelRecentlyPlayedRequestOperation _produceResponseWithRecentlyPlayedArray:completion:]
  -[MPModelRecentlyPlayedRequestOperation .cxx_destruct]
  -[MPModelRecentlyPlayedRequestOperation recentlyPlayedURLWithStoreURLBag:]
  -[MPModelRecentlyPlayedRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelRecentlyPlayedRequestOperation produceResponseWithLoadedOutput:completion:]


MPPlaceholderAVItem : MPAVItem
 @property  BOOL tailPlaceholder
 @property  NSString *album
 @property  NSString *artist
 @property  double durationFromExternalMetadata
 @property  BOOL explicitTrack
 @property  BOOL likedStateEnabled
 @property  NSString *mainTitle
 @property  BOOL supportsLikedState
 @property  @? artworkCatalogBlock

  // class methods
  +[MPPlaceholderAVItem isPlaceholder]

  // instance methods
  -[MPPlaceholderAVItem album]
  -[MPPlaceholderAVItem artist]
  -[MPPlaceholderAVItem setMainTitle:]
  -[MPPlaceholderAVItem setLikedStateEnabled:]
  -[MPPlaceholderAVItem setDurationFromExternalMetadata:]
  -[MPPlaceholderAVItem setExplicitTrack:]
  -[MPPlaceholderAVItem setSupportsLikedState:]
  -[MPPlaceholderAVItem setTailPlaceholder:]
  -[MPPlaceholderAVItem .cxx_destruct]
  -[MPPlaceholderAVItem setArtist:]
  -[MPPlaceholderAVItem setAlbum:]
  -[MPPlaceholderAVItem init]
  -[MPPlaceholderAVItem loadAssetAndPlayerItem]
  -[MPPlaceholderAVItem durationFromExternalMetadata]
  -[MPPlaceholderAVItem isExplicitTrack]
  -[MPPlaceholderAVItem supportsRateChange]
  -[MPPlaceholderAVItem isValidPlayerSubstituteForItem:]
  -[MPPlaceholderAVItem isLikedStateEnabled]
  -[MPPlaceholderAVItem supportsLikedState]
  -[MPPlaceholderAVItem isTailPlaceholder]
  -[MPPlaceholderAVItem mainTitle]
  -[MPPlaceholderAVItem artworkCatalogBlock]
  -[MPPlaceholderAVItem setArtworkCatalogBlock:]


MPModelGenericObjectKind : MPModelKind
 @property  NSDictionary *relationshipKinds

  // class methods
  +[MPModelGenericObjectKind supportsSecureCoding]
  +[MPModelGenericObjectKind identityKind]
  +[MPModelGenericObjectKind kindWithRelationshipKinds:]

  // instance methods
  -[MPModelGenericObjectKind initWithCoder:]
  -[MPModelGenericObjectKind .cxx_destruct]
  -[MPModelGenericObjectKind humanDescription]
  -[MPModelGenericObjectKind isEqual:]
  -[MPModelGenericObjectKind relationshipKinds]
  -[MPModelGenericObjectKind encodeWithCoder:]


MPModelGenericObject : MPModelObject
 @property  MPModelSong *song
 @property  MPModelAlbum *album
 @property  MPModelArtist *artist
 @property  MPModelMediaClip *mediaClip
 @property  MPModelPlaylist *playlist
 @property  MPModelPlaylistEntry *playlistEntry
 @property  MPModelTVEpisode *tvEpisode
 @property  MPModelTVSeason *season
 @property  MPModelTVShow *show
 @property  MPModelMovie *movie
 @property  MPModelPodcast *podcast
 @property  MPModelPodcastEpisode *podcastEpisode
 @property  MPModelRadioStation *radioStation
 @property  MPModelComposer *composer
 @property  MPModelGenre *genre
 @property  MPModelCurator *curator
 @property  MPModelSocialPerson *socialPerson
 @property  MPModelRecordLabel *recordLabel
 @property  MPModelGroup *group
 @property  MPModelRadioStationEvent *radioStationEvent

  // class methods
  +[MPModelGenericObject __show_KEY]
  +[MPModelGenericObject __socialPerson_KEY]
  +[MPModelGenericObject __artist_KEY]
  +[MPModelGenericObject __radioStation_KEY]
  +[MPModelGenericObject __tvEpisode_KEY]
  +[MPModelGenericObject relationshipKeyForGenericObjectType:]
  +[MPModelGenericObject __playlistEntry_KEY]
  +[MPModelGenericObject __podcast_KEY]
  +[MPModelGenericObject __podcastEpisode_KEY]
  +[MPModelGenericObject __radioStationEvent_KEY]
  +[MPModelGenericObject __season_KEY]
  +[MPModelGenericObject __album_KEY]
  +[MPModelGenericObject __curator_KEY]
  +[MPModelGenericObject __recordLabel_KEY]
  +[MPModelGenericObject __song_KEY]
  +[MPModelGenericObject __mediaClip_KEY]
  +[MPModelGenericObject __playlist_KEY]
  +[MPModelGenericObject kindWithRelationshipKinds:]
  +[MPModelGenericObject __movie_KEY]
  +[MPModelGenericObject __genre_KEY]
  +[MPModelGenericObject __composer_KEY]
  +[MPModelGenericObject __group_KEY]
  +[MPModelGenericObject genericObjectWithModelObject:]
  +[MPModelGenericObject requiredStoreLibraryPersonalizationProperties]

  // instance methods
  -[MPModelGenericObject anyObject]
  -[MPModelGenericObject humanDescription]
  -[MPModelGenericObject identifiers]
  -[MPModelGenericObject copyWithIdentifiers:block:]
  -[MPModelGenericObject flattenedGenericObject]
  -[MPModelGenericObject mediaItemPropertyValues]
  -[MPModelGenericObject relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelGenericObject personalizationScopedPropertiesForProperties:]
  -[MPModelGenericObject objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelGenericObject type]
  -[MPModelGenericObject artworkCatalog]
  -[MPModelGenericObject copyWithIdentifiers:propertySet:]
  -[MPModelGenericObject mergeWithObject:]


MPChangeDetails : NSObject
 @property  NSIndexSet *insertedSections
 @property  NSIndexSet *deletedSections
 @property  NSIndexSet *updatedSections
 @property  NSArray *insertedItemIndexPaths
 @property  NSArray *deletedItemIndexPaths
 @property  NSArray *updatedItemIndexPaths
 @property  BOOL hasChanges
 @property  NSIndexSet *insertedIndexes
 @property  NSIndexSet *deletedIndexes
 @property  NSIndexSet *updatedIndexes

  // class methods
  +[MPChangeDetails empty]
  +[MPChangeDetails changeDetailsWithPreviousCount:finalCount:isEqualBlock:isUpdatedBlock:]

  // instance methods
  -[MPChangeDetails setInsertedSections:]
  -[MPChangeDetails setUpdatedItemIndexPaths:]
  -[MPChangeDetails insertedItemIndexPaths]
  -[MPChangeDetails enumerateItemMovesUsingBlock:]
  -[MPChangeDetails deletedItemIndexPaths]
  -[MPChangeDetails enumerateItemMovesWithBlock:]
  -[MPChangeDetails updatedIndexes]
  -[MPChangeDetails setDeletedItemIndexPaths:]
  -[MPChangeDetails insertedSections]
  -[MPChangeDetails .cxx_destruct]
  -[MPChangeDetails enumerateMovesWithBlock:]
  -[MPChangeDetails enumerateSectionMovesUsingBlock:]
  -[MPChangeDetails removeSectionUpdateForPreviousIndex:]
  -[MPChangeDetails setDeletedSections:]
  -[MPChangeDetails enumerateSectionMovesWithBlock:]
  -[MPChangeDetails appendItemMoveFromIndexPath:toIndexPath:updated:]
  -[MPChangeDetails initWithBlock:]
  -[MPChangeDetails removeItemMoveFromIndexPath:]
  -[MPChangeDetails appendItemUpdateForPreviousIndexPath:finalIndexPath:]
  -[MPChangeDetails enumerateItemUpdatesUsingBlock:]
  -[MPChangeDetails updatedItemIndexPaths]
  -[MPChangeDetails removeItemUpdateForPreviousIndexPath:]
  -[MPChangeDetails isValidForPreviousCount:finalCount:reason:]
  -[MPChangeDetails applyUIKitWorkarounds]
  -[MPChangeDetails enumerateMovesUsingBlock:]
  -[MPChangeDetails setUpdatedSections:]
  -[MPChangeDetails removeSectionMoveFromIndex:]
  -[MPChangeDetails appendSectionUpdateForPreviousIndex:finalIndex:]
  -[MPChangeDetails setInsertedItemIndexPaths:]
  -[MPChangeDetails appendSectionMoveFromIndex:toIndex:updated:]
  -[MPChangeDetails enumerateUpdatesUsingBlock:]
  -[MPChangeDetails hasChanges]
  -[MPChangeDetails enumerateSectionUpdatesUsingBlock:]
  -[MPChangeDetails deletedIndexes]
  -[MPChangeDetails insertedIndexes]
  -[MPChangeDetails deletedSections]
  -[MPChangeDetails updatedSections]


MPStoreModelObjectBuilder : NSObject
 @property  MPPropertySet *requestedPropertySet
 @property  BOOL preventStoreItemMetadataCaching

  // class methods
  +[MPStoreModelObjectBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelObjectBuilder modelObjectWithStorePlatformDictionary:userIdentity:]
  -[MPStoreModelObjectBuilder modelObjectWithStoreItemMetadata:]
  -[MPStoreModelObjectBuilder modelObjectWithStoreItemMetadata:sourceModelObject:]
  -[MPStoreModelObjectBuilder modelObjectWithStorePlatformDictionary:]
  -[MPStoreModelObjectBuilder .cxx_destruct]
  -[MPStoreModelObjectBuilder requestedPropertySet]
  -[MPStoreModelObjectBuilder preventStoreItemMetadataCaching]
  -[MPStoreModelObjectBuilder setPreventStoreItemMetadataCaching:]
  -[MPStoreModelObjectBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]
  -[MPStoreModelObjectBuilder initWithRequestedPropertySet:]
  -[MPStoreModelObjectBuilder modelObjectWithStoreItemMetadata:userIdentity:]


MPCloudControllerItemIDList : NSObject
 @property  ICCloudItemIDList *cloudItemIDList

  // class methods
  +[MPCloudControllerItemIDList cloudItemIDListForPlaylist:]

  // instance methods
  -[MPCloudControllerItemIDList ICCloudItemIDList]
  -[MPCloudControllerItemIDList insertCloudItemID:idType:atIndex:]
  -[MPCloudControllerItemIDList setCloudItemIDList:]
  -[MPCloudControllerItemIDList addCloudItemID:idType:]
  -[MPCloudControllerItemIDList cloudItemIDList]
  -[MPCloudControllerItemIDList .cxx_destruct]
  -[MPCloudControllerItemIDList init]


MPCloudController : NSObject
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSObject<ICCloudAvailability> *cloudAvailabilityController
 @property  ICConnectionConfiguration *configuration
 @property  long long activeCount
 @property  int preferencesChangedNotifyToken
 @property  BOOL preferencesChangedNotifyTokenIsValid
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *cloudClientCallbackQueue
 @property  MSVDistributedNotificationObserver *addToPlaylistBehaviorChangedObserver
 @property  BOOL canShowCloudDownloadButtons
 @property  BOOL canDefaultMediaLibraryShowCloudContent
 @property  BOOL canShowCloudMusic
 @property  BOOL canShowCloudVideo
 @property  BOOL cloudEnabledValid
 @property  BOOL cloudEnabled
 @property  BOOL cloudLockerAccount
 @property  BOOL purchaseHistoryAccount
 @property  BOOL updateInProgress
 @property  BOOL initialImport
 @property  BOOL cloudLibraryUpdateInProgress
 @property  BOOL cloudLibraryInitialImport
 @property  BOOL jaliscoUpdateInProgress
 @property  BOOL jaliscoInitialImport
 @property  BOOL active
 @property  BOOL enhancedAudioAvailable
 @property  ICCloudClient *cloudClient
 @property  ICUserIdentity *userIdentity
 @property  BOOL enablingCloudLibraryDestructive
 @property  BOOL isGeniusEnabled

  // class methods
  +[MPCloudController controllers]
  +[MPCloudController _postNotificationName:controller:]
  +[MPCloudController isMediaApplication]
  +[MPCloudController _postNotificationName:controller:userInfo:]
  +[MPCloudController migrateCellularDataPreferencesIfNeeded]
  +[MPCloudController _controllerWithUserIdentity:createIfRequired:]
  +[MPCloudController globalSerialQueue]
  +[MPCloudController sharedCloudController]
  +[MPCloudController controllerWithUserIdentity:]

  // instance methods
  -[MPCloudController isGeniusEnabled]
  -[MPCloudController canShowCloudMusic]
  -[MPCloudController isCellularDataRestricted]
  -[MPCloudController becomeActive]
  -[MPCloudController isCellularDataRestrictedForStoreApps]
  -[MPCloudController hasProperNetworkConditionsToShowCloudMedia]
  -[MPCloudController activeCount]
  -[MPCloudController isCellularDataRestrictedForMusic]
  -[MPCloudController shouldProhibitVideosActionForCurrentNetworkConditions]
  -[MPCloudController canShowCloudVideo]
  -[MPCloudController shouldProhibitActionsForCurrentNetworkConditions]
  -[MPCloudController shouldProhibitMusicActionForCurrentNetworkConditions]
  -[MPCloudController shouldProhibitStoreAppsActionForCurrentNetworkConditions]
  -[MPCloudController addStoreItemWithAdamID:completionHandler:]
  -[MPCloudController hasProperNetworkConditionsToPlayMedia]
  -[MPCloudController setCanDefaultMediaLibraryShowCloudContent:]
  -[MPCloudController resignActive]
  -[MPCloudController uploadArtworkForPlaylist:completionHandler:]
  -[MPCloudController isCellularDataRestrictedForVideos]
  -[MPCloudController canShowCloudDownloadButtons]
  -[MPCloudController loadArtworkInfoForEntityPersistentID:entityType:artworkType:artworkSourceType:completionHandler:]
  -[MPCloudController userIdentity]
  -[MPCloudController canSetItemProperty:]
  -[MPCloudController hasCloudLockerAccount]
  -[MPCloudController enableAutomaticDownloadsWithCompletionHandler:]
  -[MPCloudController fetchRecommendedContentWithSeedTrackID:seedTrackIDType:count:completion:]
  -[MPCloudController setCanShowCloudDownloadButtons:]
  -[MPCloudController canShowCloudDownloadButtonsDidChangeNotification:]
  -[MPCloudController setItemProperties:forPurchaseHistoryID:]
  -[MPCloudController setInitialImport:]
  -[MPCloudController _copyObservationStateFrom:]
  -[MPCloudController isActive]
  -[MPCloudController configuration]
  -[MPCloudController setLikedState:forEntityWithStoreID:withMediaType:timeStamp:]
  -[MPCloudController setCloudLibraryInitialImport:]
  -[MPCloudController setLikedState:forPlaylistWithGlobalID:completion:]
  -[MPCloudController setActiveCount:]
  -[MPCloudController setCloudLockerAccount:]
  -[MPCloudController .cxx_destruct]
  -[MPCloudController preferencesChangedNotifyToken]
  -[MPCloudController disableCloudLibraryWithReason:completionHandler:]
  -[MPCloudController addStoreItemWithAdamID:toPlaylistWithPersistentID:completionHandler:]
  -[MPCloudController enableICMLErrorReasonChange:]
  -[MPCloudController _initWithUserIdentity:]
  -[MPCloudController isCloudEnabledValid]
  -[MPCloudController updateSubscribedPlaylistWithSagaID:ignoreMinRefreshInterval:completionHandler:]
  -[MPCloudController isJaliscoUpdateInProgress]
  -[MPCloudController setCloudEnabled:]
  -[MPCloudController setCloudAddToPlaylistBehavior:completionHandler:]
  -[MPCloudController setPreferencesChangedNotifyTokenIsValid:]
  -[MPCloudController setCloudEnabledValid:]
  -[MPCloudController sdk_addStoreItemWithOpaqueID:completionHandler:]
  -[MPCloudController enableCloudLibraryWithOptions:completionHandler:]
  -[MPCloudController removePlaylistsWithSagaIDs:completionHandler:]
  -[MPCloudController setPreferencesChangedNotifyToken:]
  -[MPCloudController cloudAvailabilityController]
  -[MPCloudController cloudClient]
  -[MPCloudController setJaliscoUpdateInProgress:]
  -[MPCloudController isCloudLibraryUpdateInProgress]
  -[MPCloudController _becomeActiveAndWaitUntilDone:]
  -[MPCloudController becomeActiveAndWaitUntilDone:]
  -[MPCloudController serialQueue]
  -[MPCloudController setPurchaseHistoryAccount:]
  -[MPCloudController init]
  -[MPCloudController isCloudEnabled]
  -[MPCloudController setCanShowCloudVideo:]
  -[MPCloudController addStoreItemWithAdamID:referralObject:completionHandler:]
  -[MPCloudController cloudClientCallbackQueue]
  -[MPCloudController loadCloudMusicLibraryUpdateProgressWithCompletionHandler:]
  -[MPCloudController _referralForModelObject:]
  -[MPCloudController loadJaliscoLibraryUpdateProgressWithCompletionHandler:]
  -[MPCloudController hideItemsWithPurchaseHistoryIDs:completionHandler:]
  -[MPCloudController loadUpdateProgressWithCompletionHandler:]
  -[MPCloudController isCloudLibraryEnabled]
  -[MPCloudController setLikedState:forPlaylistWithGlobalID:]
  -[MPCloudController setCanShowCloudMusic:]
  -[MPCloudController uploadCloudPlaylistProperties]
  -[MPCloudController setUpdateInProgress:]
  -[MPCloudController uploadCloudItemProperties]
  -[MPCloudController hasPurchaseHistoryAccount]
  -[MPCloudController setLikedState:forEntityWithStoreID:withMediaType:timeStamp:completion:]
  -[MPCloudController createPlaylistWithPersistentID:properties:trackList:completionHandler:]
  -[MPCloudController canSetPlaylistProperty:]
  -[MPCloudController _handlesSameAccountAs:]
  -[MPCloudController deprioritizeArtworkRequestForEntityPersistentID:entityType:artworkType:artworkSourceType:]
  -[MPCloudController sdk_addStoreItemWithOpaqueID:toPlaylistWithPersistentID:completionHandler:]
  -[MPCloudController _initializeUpdateInProgressState]
  -[MPCloudController isCloudLibraryInitialImport]
  -[MPCloudController loadGeniusItemsForSagaID:completionHandler:]
  -[MPCloudController isJaliscoInitialImport]
  -[MPCloudController addStoreItemWithAdamID:referralObject:toPlaylistWithPersistentID:completionHandler:]
  -[MPCloudController sdk_createPlaylistWithPersistenID:properties:tracklist:completionHandler:]
  -[MPCloudController addGeniusPlaylistWithPersistentID:name:seedItemSagaIDs:itemSagaIDs:completionHandler:]
  -[MPCloudController isEnhancedAudioAvailable]
  -[MPCloudController setPlaylistProperties:trackList:forPlaylistWithPersistentID:completionHandler:]
  -[MPCloudController setCloudLibraryUpdateInProgress:]
  -[MPCloudController preferencesChangedNotifyTokenIsValid]
  -[MPCloudController queue]
  -[MPCloudController isInitialImport]
  -[MPCloudController removeItemsWithSagaIDs:completionHandler:]
  -[MPCloudController addToPlaylistBehaviorChangedObserver]
  -[MPCloudController disableAutomaticDownloadsWithCompletionHandler:]
  -[MPCloudController _resignActive]
  -[MPCloudController setLikedState:forAlbumWithStoreID:completion:]
  -[MPCloudController authenticatedDidChangeNotification:]
  -[MPCloudController dealloc]
  -[MPCloudController canShowCloudTracksDidChangeNotification:]
  -[MPCloudController isUpdateInProgress]
  -[MPCloudController addStorePlaylistWithGlobalID:completionHandler:]
  -[MPCloudController activeUserDidChangeNotification:]
  -[MPCloudController setJaliscoInitialImport:]
  -[MPCloudController isAutomaticDownloadsEnabled]
  -[MPCloudController hasSetPreferenceForAutomaticDownloads]
  -[MPCloudController loadLastKnownEnableICMLErrorStatusWithCompletionHander:]
  -[MPCloudController _performBlockOnControllerHandlingTheSameAccount:]
  -[MPCloudController isCellularDataRestrictedDidChangeNotification:]
  -[MPCloudController cloudAddToPlaylistBehavior]
  -[MPCloudController isEnablingCloudLibraryDestructive]
  -[MPCloudController disableCloudLibraryWithCompletionHandler:]
  -[MPCloudController publishPlaylistWithSagaID:completionHandler:]
  -[MPCloudController hasProperNetworkConditionsToShowCloudMediaDidChangeNotification:]
  -[MPCloudController updateJaliscoMediaLibraryWithReason:completionHandler:]
  -[MPCloudController _loadIsSagaAuthenticatedWithCompletion:]
  -[MPCloudController addItemWithSagaID:toPlaylistWithPersistentID:completionHandler:]
  -[MPCloudController setLikedState:forAlbumWithStoreID:]
  -[MPCloudController setCollectionProperties:forCollectionWithPersistentID:groupingType:completionHandler:]
  -[MPCloudController canDefaultMediaLibraryShowCloudContent]
  -[MPCloudController loadArtworkForEntityPersistentID:entityType:artworkType:artworkSourceType:completionHandler:]
  -[MPCloudController setItemProperties:forSagaID:]


MPModelLibraryImportChangeRequest : NSObject <NSCopying>
 @property  MPModelObject *referralObject
 @property  MPSectionedCollection *modelObjects
 @property  BOOL shouldLibraryAdd

  // instance methods
  -[MPModelLibraryImportChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryImportChangeRequest shouldLibraryAdd]
  -[MPModelLibraryImportChangeRequest setShouldLibraryAdd:]
  -[MPModelLibraryImportChangeRequest .cxx_destruct]
  -[MPModelLibraryImportChangeRequest modelObjects]
  -[MPModelLibraryImportChangeRequest performWithResponseHandler:]
  -[MPModelLibraryImportChangeRequest setModelObjects:]
  -[MPModelLibraryImportChangeRequest copyWithZone:]
  -[MPModelLibraryImportChangeRequest setReferralObject:]
  -[MPModelLibraryImportChangeRequest referralObject]


MPArtworkColorAnalyzer : NSObject
 @property  UIImage *image
 @property  long long algorithm

  // instance methods
  -[MPArtworkColorAnalyzer algorithm]
  -[MPArtworkColorAnalyzer image]
  -[MPArtworkColorAnalyzer _fallbackColorAnalysis]
  -[MPArtworkColorAnalyzer .cxx_destruct]
  -[MPArtworkColorAnalyzer initWithImage:algorithm:]
  -[MPArtworkColorAnalyzer analyzeWithCompletionHandler:]


MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate>
 @property  long long status
 @property  NSError *error
 @property  float rawRate
 @property  float rate
 @property  long long actionAtItemEnd
 @property  BOOL allowsExternalPlayback
 @property  BOOL externalPlaybackActive
 @property  BOOL usesExternalPlaybackWhileExternalScreenIsActive
 @property  BOOL usesAudioOnlyModeForExternalPlayback
 @property  long long externalPlaybackType
 @property  long long defaultItemEQPresetType
 @property  BOOL outputObscuredDueToInsufficientExternalProtection
 @property  AVPlayerItem *currentItem
 @property  @? playbackQueueCommitHandler
 @property  BOOL isPlaybackQueueTransactionActive
 @property  NSArray *items
 @property  AVPlayer *_player
 @property  long long _externalProtectionStatus
 @property  NSString *externalPlaybackVideoGravity
 @property  id playerAVAudioSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPQueuePlayer _player]
  -[MPQueuePlayer removeItem:]
  -[MPQueuePlayer play]
  -[MPQueuePlayer removeAllItems]
  -[MPQueuePlayer rate]
  -[MPQueuePlayer rawRate]
  -[MPQueuePlayer _currentItemDidChangeNotification:]
  -[MPQueuePlayer addBoundaryTimeObserverForTimes:queue:usingBlock:]
  -[MPQueuePlayer _externalProtectionStatus]
  -[MPQueuePlayer prepareItem:withCompletionHandler:]
  -[MPQueuePlayer setMediaSelectionCriteria:forMediaCharacteristic:]
  -[MPQueuePlayer items]
  -[MPQueuePlayer setDefaultItemEQPresetType:]
  -[MPQueuePlayer _setPreferredLanguageList:]
  -[MPQueuePlayer playbackQueueCommitHandler]
  -[MPQueuePlayer _setWantsVolumeChangesWhenPausedOrInactive:]
  -[MPQueuePlayer isPlaybackQueueTransactionActive]
  -[MPQueuePlayer setPlaybackQueueCommitHandler:]
  -[MPQueuePlayer .cxx_destruct]
  -[MPQueuePlayer currentItem]
  -[MPQueuePlayer beginPlaybackQueueTransactionAndPause:]
  -[MPQueuePlayer commitPlaybackQueueTransaction]
  -[MPQueuePlayer setCurrentPlaybackQueueTransactionDisplayTime:]
  -[MPQueuePlayer insertItem:afterItem:]
  -[MPQueuePlayer defaultItemEQPresetType]
  -[MPQueuePlayer seekToTime:]
  -[MPQueuePlayer init]
  -[MPQueuePlayer allowsExternalPlayback]
  -[MPQueuePlayer isExternalPlaybackActive]
  -[MPQueuePlayer _setEQPreset:]
  -[MPQueuePlayer seekToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[MPQueuePlayer pause]
  -[MPQueuePlayer currentTime]
  -[MPQueuePlayer advanceToNextItem]
  -[MPQueuePlayer setRate:]
  -[MPQueuePlayer _userVolume]
  -[MPQueuePlayer removeTimeObserver:]
  -[MPQueuePlayer _setStoppingFadeOutDuration:]
  -[MPQueuePlayer setAllowsExternalPlayback:shouldIgnorePlaybackQueueTransactions:]
  -[MPQueuePlayer _setUserVolume:]
  -[MPQueuePlayer usesExternalPlaybackWhileExternalScreenIsActive]
  -[MPQueuePlayer setUsesExternalPlaybackWhileExternalScreenIsActive:shouldIgnorePlaybackQueueTransactions:]
  -[MPQueuePlayer externalPlaybackType]
  -[MPQueuePlayer status]
  -[MPQueuePlayer externalPlaybackVideoGravity]
  -[MPQueuePlayer playerAVAudioSession]
  -[MPQueuePlayer setExternalPlaybackVideoGravity:]
  -[MPQueuePlayer setUsesAudioOnlyModeForExternalPlayback:shouldIgnorePlaybackQueueTransactions:]
  -[MPQueuePlayer usesAudioOnlyModeForExternalPlayback]
  -[MPQueuePlayer seekToTime:toleranceBefore:toleranceAfter:]
  -[MPQueuePlayer actionAtItemEnd]
  -[MPQueuePlayer _resumePlayback:]
  -[MPQueuePlayer _setExpectedAssetTypes:]
  -[MPQueuePlayer setActionAtItemEnd:]
  -[MPQueuePlayer routingControllerAvailableRoutesDidChange:]
  -[MPQueuePlayer addPeriodicTimeObserverForInterval:queue:usingBlock:]
  -[MPQueuePlayer outputObscuredDueToInsufficientExternalProtection]
  -[MPQueuePlayer dealloc]
  -[MPQueuePlayer observeValueForKeyPath:ofObject:change:context:]
  -[MPQueuePlayer _setClientName:]
  -[MPQueuePlayer error]


MPModelCuratorActualKind : MPModelKind
  // class methods
  +[MPModelCuratorActualKind identityKind]

  // instance methods
  -[MPModelCuratorActualKind humanDescription]


MPModelCurator : MPModelPerson
 @property  NSString *shortName
 @property  NSString *editorNotes
 @property  NSString *shortEditorNotes
 @property  long long curatorKind
 @property  long long curatorSubKind
 @property  @? editorialArtworkCatalogBlock
 @property  @? brandLogoArtworkCatalogBlock
 @property  NSString *handle

  // class methods
  +[MPModelCurator genericObjectType]
  +[MPModelCurator __brandLogoArtworkCatalogBlock_KEY]
  +[MPModelCurator __shortEditorNotes_KEY]
  +[MPModelCurator __shortName_KEY]
  +[MPModelCurator __curatorKind_KEY]
  +[MPModelCurator __editorNotes_KEY]
  +[MPModelCurator __curatorSubKind_KEY]
  +[MPModelCurator __editorialArtworkCatalogBlock_KEY]
  +[MPModelCurator __handle_KEY]

  // instance methods
  -[MPModelCurator editorialArtworkCatalog]
  -[MPModelCurator brandLogoArtworkCatalog]


MPStoreModelRequestOperation : MPAsyncOperation
 @property  double remainingTimeInterval
 @property  MPStoreModelRequest *request
 @property  @? responseHandler

  // instance methods
  -[MPStoreModelRequestOperation setRequest:]
  -[MPStoreModelRequestOperation dispatchAsync:]
  -[MPStoreModelRequestOperation dispatchSync:]
  -[MPStoreModelRequestOperation _tearDownTimeoutTimerSource]
  -[MPStoreModelRequestOperation _executeURLLoadWithRequest:storeURLBag:requestContext:]
  -[MPStoreModelRequestOperation _executeItemMetadataLoadForRequestedItemIdentifiers:reason:requestContext:]
  -[MPStoreModelRequestOperation _executeURLLoadWithRequests:storeURLBag:requestContext:]
  -[MPStoreModelRequestOperation configurationForLoadingModelDataWithStoreBagDictionary:error:]
  -[MPStoreModelRequestOperation _URLLoadRequestWithRequest:requestContext:]
  -[MPStoreModelRequestOperation .cxx_destruct]
  -[MPStoreModelRequestOperation initWithRequest:responseHandler:]
  -[MPStoreModelRequestOperation responseHandler]
  -[MPStoreModelRequestOperation _finishWithResponse:error:]
  -[MPStoreModelRequestOperation remainingTimeInterval]
  -[MPStoreModelRequestOperation setResponseHandler:]
  -[MPStoreModelRequestOperation init]
  -[MPStoreModelRequestOperation execute]
  -[MPStoreModelRequestOperation request]
  -[MPStoreModelRequestOperation _handleTimeout]
  -[MPStoreModelRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPStoreModelRequestOperation cancel]
  -[MPStoreModelRequestOperation assertRunningInAccessQueue]
  -[MPStoreModelRequestOperation adjustTimeoutInterval:]
  -[MPStoreModelRequestOperation dealloc]
  -[MPStoreModelRequestOperation finishWithError:]
  -[MPStoreModelRequestOperation produceResponseWithLoadedOutput:completion:]


MPGaplessInfo : NSObject
 @property  unsigned long durationInFrames
 @property  unsigned int encodingDelayInFrames
 @property  unsigned int encodingDrainInFrames
 @property  unsigned int heuristicInfo
 @property  unsigned long lastPacketsResync

  // instance methods
  -[MPGaplessInfo durationInFrames]
  -[MPGaplessInfo setDurationInFrames:]
  -[MPGaplessInfo encodingDelayInFrames]
  -[MPGaplessInfo setEncodingDelayInFrames:]
  -[MPGaplessInfo encodingDrainInFrames]
  -[MPGaplessInfo heuristicInfo]
  -[MPGaplessInfo setEncodingDrainInFrames:]
  -[MPGaplessInfo setHeuristicInfo:]
  -[MPGaplessInfo lastPacketsResync]
  -[MPGaplessInfo setLastPacketsResync:]


MPStoreLibraryPersonalizationRequest : MPModelRequest <MPUserIdentityConsuming>
 @property  NSDictionary *itemIndexPathToOverridePropertySet
 @property  MPSectionedCollection *unpersonalizedContentDescriptors
 @property  MPSectionedCollection *representedObjects
 @property  ICUserIdentity *userIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPStoreLibraryPersonalizationRequest preferredQueue]
  +[MPStoreLibraryPersonalizationRequest requiresNetwork]
  +[MPStoreLibraryPersonalizationRequest supportsSecureCoding]
  +[MPStoreLibraryPersonalizationRequest personalizedResponseForContentDescriptor:requestedProperties:]
  +[MPStoreLibraryPersonalizationRequest libraryViewWithUserIdentity:]

  // instance methods
  -[MPStoreLibraryPersonalizationRequest newOperationWithResponseHandler:]
  -[MPStoreLibraryPersonalizationRequest itemIndexPathToOverridePropertySet]
  -[MPStoreLibraryPersonalizationRequest setRepresentedObjects:]
  -[MPStoreLibraryPersonalizationRequest userIdentity]
  -[MPStoreLibraryPersonalizationRequest initWithUnpersonalizedRequest:unpersonalizedContentDescriptors:]
  -[MPStoreLibraryPersonalizationRequest unpersonalizedContentDescriptors]
  -[MPStoreLibraryPersonalizationRequest setUserIdentity:]
  -[MPStoreLibraryPersonalizationRequest propertiesForItemAtIndexPath:]
  -[MPStoreLibraryPersonalizationRequest .cxx_destruct]
  -[MPStoreLibraryPersonalizationRequest setProperties:forItemAtIndexPath:]
  -[MPStoreLibraryPersonalizationRequest representedObjects]
  -[MPStoreLibraryPersonalizationRequest copyWithZone:]
  -[MPStoreLibraryPersonalizationRequest initWithUnpersonalizedContentDescriptors:]


MPStoreLibraryPersonalizationResponse : MPModelResponse <MPModelResponseDetailedKeepLocalStatusRequesting>
 @property  MPSectionedCollection *representedObjectResults
 @property  MPModelResponse *libraryResponse
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreLibraryPersonalizationResponse setRepresentedObjectResults:]
  -[MPStoreLibraryPersonalizationResponse setLibraryResponse:]
  -[MPStoreLibraryPersonalizationResponse .cxx_destruct]
  -[MPStoreLibraryPersonalizationResponse newOperationForDetailedKeepLocalStatusConfigurationForSectionAtIndex:responseHandler:]
  -[MPStoreLibraryPersonalizationResponse _libraryResponseDidInvalidateNotification:]
  -[MPStoreLibraryPersonalizationResponse dealloc]
  -[MPStoreLibraryPersonalizationResponse libraryResponse]
  -[MPStoreLibraryPersonalizationResponse representedObjectResults]


MPModelPlaylistKind : MPModelKind
 @property  unsigned long variants
 @property  MPModelPlaylistEntryKind *playlistEntryKind
 @property  unsigned long options

  // class methods
  +[MPModelPlaylistKind supportsSecureCoding]
  +[MPModelPlaylistKind identityKind]
  +[MPModelPlaylistKind kindWithVariants:playlistEntryKind:options:]

  // instance methods
  -[MPModelPlaylistKind variants]
  -[MPModelPlaylistKind predicateWithBaseProperty:]
  -[MPModelPlaylistKind playlistEntryKind]
  -[MPModelPlaylistKind initWithCoder:]
  -[MPModelPlaylistKind options]
  -[MPModelPlaylistKind .cxx_destruct]
  -[MPModelPlaylistKind humanDescription]
  -[MPModelPlaylistKind applyToView:withContext:]
  -[MPModelPlaylistKind representedSearchScopePredicate]
  -[MPModelPlaylistKind isEqual:]
  -[MPModelPlaylistKind encodeWithCoder:]


MPModelPlaylist : MPModelObject
 @property  NSString *name
 @property  NSString *descriptionText
 @property  MPModelCurator *curator
 @property  unsigned long trackCount
 @property  BOOL hasCleanContent
 @property  BOOL hasExplicitContent
 @property  BOOL curatorPlaylist
 @property  BOOL owner
 @property  BOOL publicPlaylist
 @property  BOOL visiblePlaylist
 @property  BOOL subscribed
 @property  long long userEditableComponents
 @property  long long type
 @property  BOOL libraryAdded
 @property  NSDate *libraryAddedDate
 @property  NSString *editorNotes
 @property  NSString *shortEditorNotes
 @property  NSURL *shareURL
 @property  NSURL *shareShortURL
 @property  NSDateComponents *releaseDateComponents
 @property  NSDateComponents *lastModifiedDateComponents
 @property  NSDate *lastDevicePlaybackDate
 @property  NSString *cloudVersionHash
 @property  NSString *versionHash
 @property  unsigned long traits
 @property  @? artworkCatalogBlock
 @property  @? editorialArtworkCatalogBlock
 @property  MPTiledArtworkRequest *tiledArtworkRequest
 @property  long long keepLocalEnableState
 @property  long long keepLocalManagedStatus
 @property  NSDate *downloadedDate

  // class methods
  +[MPModelPlaylist __artworkCatalogBlock_KEY]
  +[MPModelPlaylist genericObjectType]
  +[MPModelPlaylist __descriptionText_KEY]
  +[MPModelPlaylist __owner_KEY]
  +[MPModelPlaylist __hasCleanContent_KEY]
  +[MPModelPlaylist __curatorPlaylist_KEY]
  +[MPModelPlaylist __publicPlaylist_KEY]
  +[MPModelPlaylist __visiblePlaylist_KEY]
  +[MPModelPlaylist __subscribed_KEY]
  +[MPModelPlaylist __userEditableComponents_KEY]
  +[MPModelPlaylist __shareShortURL_KEY]
  +[MPModelPlaylist __releaseDateComponents_KEY]
  +[MPModelPlaylist __tiledArtworkRequest_KEY]
  +[MPModelPlaylist __lastModifiedDateComponents_KEY]
  +[MPModelPlaylist __cloudVersionHash_KEY]
  +[MPModelPlaylist __versionHash_KEY]
  +[MPModelPlaylist __type_KEY]
  +[MPModelPlaylist __curator_KEY]
  +[MPModelPlaylist __shortEditorNotes_KEY]
  +[MPModelPlaylist __hasExplicitContent_KEY]
  +[MPModelPlaylist kindWithVariants:playlistEntryKind:options:]
  +[MPModelPlaylist __name_KEY]
  +[MPModelPlaylist supportsKeepLocalStatusObservation]
  +[MPModelPlaylist requiredKeepLocalStatusObservationProperties]
  +[MPModelPlaylist __editorNotes_KEY]
  +[MPModelPlaylist __trackCount_KEY]
  +[MPModelPlaylist __keepLocalEnableState_KEY]
  +[MPModelPlaylist __keepLocalManagedStatus_KEY]
  +[MPModelPlaylist __libraryAdded_KEY]
  +[MPModelPlaylist __libraryAddedDate_KEY]
  +[MPModelPlaylist __lastDevicePlaybackDate_KEY]
  +[MPModelPlaylist __downloadedDate_KEY]
  +[MPModelPlaylist __shareURL_KEY]
  +[MPModelPlaylist supportsLibraryAddStatusObservation]
  +[MPModelPlaylist requiredLibraryAddStatusObservationProperties]
  +[MPModelPlaylist __traits_KEY]
  +[MPModelPlaylist requiredLibraryRemovalProperties]
  +[MPModelPlaylist supportsLibraryRemoval]
  +[MPModelPlaylist requiredStoreLibraryPersonalizationProperties]
  +[MPModelPlaylist __editorialArtworkCatalogBlock_KEY]
  +[MPModelPlaylist kindWithPlaylistEntryKind:options:]

  // instance methods
  -[MPModelPlaylist editorialArtworkCatalog]
  -[MPModelPlaylist trackArtworkCatalogsWithCount:]
  -[MPModelPlaylist tracksTiledArtworkCatalogWithRows:columns:]
  -[MPModelPlaylist humanDescription]
  -[MPModelPlaylist contentItemCollectionInfo]
  -[MPModelPlaylist relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelPlaylist personalizationScopedPropertiesForProperties:]
  -[MPModelPlaylist objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelPlaylist artworkCatalog]
  -[MPModelPlaylist libraryAddStatusObserverConfiguration]
  -[MPModelPlaylist libraryRemovalSupportedOptions]
  -[MPModelPlaylist newKeepLocalStatusObserverConfiguration]


MPStoreSocialRequestOperation : MPAsyncOperation
 @property  <MPStoreSocialRequestOperationDataSource> *dataSource
 @property  @? responseHandler

  // class methods
  +[MPStoreSocialRequestOperation _stringRepresentationForHTTPMethod:]
  +[MPStoreSocialRequestOperation _stringRepresentationForHTTPBodyType:]
  +[MPStoreSocialRequestOperation _urlStringForKey:inBag:]

  // instance methods
  -[MPStoreSocialRequestOperation initWithDataSource:]
  -[MPStoreSocialRequestOperation _requestURLFromBag:]
  -[MPStoreSocialRequestOperation .cxx_destruct]
  -[MPStoreSocialRequestOperation responseHandler]
  -[MPStoreSocialRequestOperation dataSource]
  -[MPStoreSocialRequestOperation setResponseHandler:]
  -[MPStoreSocialRequestOperation execute]
  -[MPStoreSocialRequestOperation cancel]


MPNetworkPlayabilityMonitor : NSObject <ICEnvironmentMonitorObserver>
 @property  double lastAverageBitrate
 @property  long long networkType
 @property  long long effectiveNetworkTypeForPlayback
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPNetworkPlayabilityMonitor sharedNetworkPlayabilityMonitor]

  // instance methods
  -[MPNetworkPlayabilityMonitor environmentMonitorDidChangeNetworkType:]
  -[MPNetworkPlayabilityMonitor networkType]
  -[MPNetworkPlayabilityMonitor .cxx_destruct]
  -[MPNetworkPlayabilityMonitor effectiveNetworkTypeForPlayback]
  -[MPNetworkPlayabilityMonitor _onQueueUpdateEffectiveNetworkTypesForPlayback]
  -[MPNetworkPlayabilityMonitor _onQueueEffectiveNetworkTypeForAverageBitrate:]
  -[MPNetworkPlayabilityMonitor lastAverageBitrate]
  -[MPNetworkPlayabilityMonitor init]
  -[MPNetworkPlayabilityMonitor adjustEffectiveNetworkTypeUsingPreviouslyPlayedItem:]


MPModelLibraryStoreIDsImportChangeRequestOperation : MPAsyncOperation
 @property  MPMediaLibrary *mediaLibrary
 @property  MPModelObject *referralObject
 @property  NSArray *storeIDs
 @property  BOOL shouldLibraryAdd
 @property  @? responseHandler

  // instance methods
  -[MPModelLibraryStoreIDsImportChangeRequestOperation setMediaLibrary:]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation storeIDs]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation mediaLibrary]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation shouldLibraryAdd]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation setShouldLibraryAdd:]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation responseHandler]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation execute]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation setStoreIDs:]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation setReferralObject:]
  -[MPModelLibraryStoreIDsImportChangeRequestOperation referralObject]


MPRequestResponseController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *calloutQueue
 @property  id response
 @property  id request
 @property  <MPRequestResponseControllerDelegate> *delegate

  // instance methods
  -[MPRequestResponseController setRequest:]
  -[MPRequestResponseController calloutQueue]
  -[MPRequestResponseController _onQueue_stateDictionary]
  -[MPRequestResponseController _onQueue_updateRequestID]
  -[MPRequestResponseController .cxx_destruct]
  -[MPRequestResponseController setDelegate:]
  -[MPRequestResponseController beginAutomaticResponseLoading]
  -[MPRequestResponseController init]
  -[MPRequestResponseController setNeedsReload]
  -[MPRequestResponseController _responseDidInvalidate:]
  -[MPRequestResponseController request]
  -[MPRequestResponseController setNeedsReloadForSignificantRequestChange]
  -[MPRequestResponseController _onQueue_reloadIfNeeded]
  -[MPRequestResponseController response]
  -[MPRequestResponseController delegate]
  -[MPRequestResponseController reloadIfNeeded]
  -[MPRequestResponseController queue]
  -[MPRequestResponseController dealloc]
  -[MPRequestResponseController _onQueue_scheduleRetryAfterInterval:]
  -[MPRequestResponseController endAutomaticResponseLoading]
  -[MPRequestResponseController setResponse:]


MPAVOutputDeviceRoute : MPAVRoute
 @property  NSArray *outputDevices
 @property  ^v logicalLeaderOutputDevice
 @property  BOOL groupLeader

  // class methods
  +[MPAVOutputDeviceRoute localDeviceUID]
  +[MPAVOutputDeviceRoute logicalLeaderFromOutputDevices:]
  +[MPAVOutputDeviceRoute pickableRouteTypeForOutputDevice:]

  // instance methods
  -[MPAVOutputDeviceRoute clusterType]
  -[MPAVOutputDeviceRoute groupUID]
  -[MPAVOutputDeviceRoute supportsHeadTrackedSpatialAudio]
  -[MPAVOutputDeviceRoute presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MPAVOutputDeviceRoute playingPairedDeviceName]
  -[MPAVOutputDeviceRoute canFetchMediaDataFromSender]
  -[MPAVOutputDeviceRoute canAccessRemoteAssets]
  -[MPAVOutputDeviceRoute clusterComposition]
  -[MPAVOutputDeviceRoute isPickedOnPairedDevice]
  -[MPAVOutputDeviceRoute canPlayEncryptedProgressiveDownloadAssets]
  -[MPAVOutputDeviceRoute isGroupLeader]
  -[MPAVOutputDeviceRoute routeName]
  -[MPAVOutputDeviceRoute routeUID]
  -[MPAVOutputDeviceRoute isProxyGroupPlayer]
  -[MPAVOutputDeviceRoute isVolumeControlAvailable]
  -[MPAVOutputDeviceRoute isLowFidelityRoute]
  -[MPAVOutputDeviceRoute supportsWirelessDisplay]
  -[MPAVOutputDeviceRoute requiresPassword]
  -[MPAVOutputDeviceRoute isMacRoute]
  -[MPAVOutputDeviceRoute .cxx_destruct]
  -[MPAVOutputDeviceRoute logicalLeaderOutputDevice]
  -[MPAVOutputDeviceRoute isCarplayRoute]
  -[MPAVOutputDeviceRoute _anyOutputDevicePassesMRFunction:]
  -[MPAVOutputDeviceRoute supportsGrouping]
  -[MPAVOutputDeviceRoute headTrackedSpatialAudioEnabled]
  -[MPAVOutputDeviceRoute outputDevices]
  -[MPAVOutputDeviceRoute isHomePodRoute]
  -[MPAVOutputDeviceRoute isSplitterCapable]
  -[MPAVOutputDeviceRoute supportsAirPlayGrouping]
  -[MPAVOutputDeviceRoute routeSubtype]
  -[MPAVOutputDeviceRoute isDeviceRoute]
  -[MPAVOutputDeviceRoute isAppleTVRoute]
  -[MPAVOutputDeviceRoute isLowLatencyRoute]
  -[MPAVOutputDeviceRoute isStereoPair]
  -[MPAVOutputDeviceRoute _anyOutputDevicePassesTest:]
  -[MPAVOutputDeviceRoute isClusterRoute]
  -[MPAVOutputDeviceRoute pickableRouteType]
  -[MPAVOutputDeviceRoute isAirPlayRoute]
  -[MPAVOutputDeviceRoute designatedGroupLeaderRouteUID]
  -[MPAVOutputDeviceRoute originalRouteSubtype]
  -[MPAVOutputDeviceRoute isDeviceSpeakerRoute]
  -[MPAVOutputDeviceRoute isB520Route]
  -[MPAVOutputDeviceRoute isPhoneRoute]
  -[MPAVOutputDeviceRoute isHomeTheaterRoute]
  -[MPAVOutputDeviceRoute initWithOutputDevices:]
  -[MPAVOutputDeviceRoute productIdentifier]
  -[MPAVOutputDeviceRoute routeType]


MPModelForYouRecommendationMusicKitItemBuilder : NSObject
 @property  MPPropertySet *requestedPropertySet
 @property  NSDictionary *storeItemMetadataResults
 @property  MPMutableSectionedCollection *flatSectionedItems

  // class methods
  +[MPModelForYouRecommendationMusicKitItemBuilder allSupportedProperties]

  // instance methods
  -[MPModelForYouRecommendationMusicKitItemBuilder .cxx_destruct]
  -[MPModelForYouRecommendationMusicKitItemBuilder storeItemMetadataWithMusicAPIMetadataDictionary:]
  -[MPModelForYouRecommendationMusicKitItemBuilder convertToStoreItemMetadataDictionary:]
  -[MPModelForYouRecommendationMusicKitItemBuilder requestedPropertySet]
  -[MPModelForYouRecommendationMusicKitItemBuilder initWithRequestedPropertySet:storeItemMetadataResults:flatSectionedItems:storeURLBag:isListenNow:]
  -[MPModelForYouRecommendationMusicKitItemBuilder modelObjectForRecommendationChildDictionary:parentGroup:subgroupsAccumulator:userIdentity:]
  -[MPModelForYouRecommendationMusicKitItemBuilder storeItemMetadataResults]
  -[MPModelForYouRecommendationMusicKitItemBuilder flatSectionedItems]


MPModelLibraryIncrementSkipCountChangeRequest : NSObject
 @property  MPMediaLibrary *mediaLibrary
 @property  MPModelObject *model

  // instance methods
  -[MPModelLibraryIncrementSkipCountChangeRequest setMediaLibrary:]
  -[MPModelLibraryIncrementSkipCountChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryIncrementSkipCountChangeRequest mediaLibrary]
  -[MPModelLibraryIncrementSkipCountChangeRequest .cxx_destruct]
  -[MPModelLibraryIncrementSkipCountChangeRequest model]
  -[MPModelLibraryIncrementSkipCountChangeRequest initWithModel:]


MPUbiquitousPlaybackPositionEntity : NSObject
 @property  NSString *ubiquitousIdentifier
 @property  double bookmarkTimestamp
 @property  double bookmarkTime
 @property  unsigned long userPlayCount
 @property  BOOL hasBeenPlayed

  // class methods
  +[MPUbiquitousPlaybackPositionEntity ubiquitousIdentifierWithStoreAdamID:]

  // instance methods
  -[MPUbiquitousPlaybackPositionEntity .cxx_destruct]
  -[MPUbiquitousPlaybackPositionEntity initWithUbiquitousIdentifier:]
  -[MPUbiquitousPlaybackPositionEntity setBookmarkTimestamp:]
  -[MPUbiquitousPlaybackPositionEntity hasBeenPlayedModified]
  -[MPUbiquitousPlaybackPositionEntity userPlayCountModified]
  -[MPUbiquitousPlaybackPositionEntity bookmarkTimeModified]
  -[MPUbiquitousPlaybackPositionEntity bookmarkTimestampModified]
  -[MPUbiquitousPlaybackPositionEntity bookmarkTimestamp]
  -[MPUbiquitousPlaybackPositionEntity hasBeenPlayed]
  -[MPUbiquitousPlaybackPositionEntity setHasBeenPlayed:]
  -[MPUbiquitousPlaybackPositionEntity init]
  -[MPUbiquitousPlaybackPositionEntity bookmarkTime]
  -[MPUbiquitousPlaybackPositionEntity setBookmarkTime:]
  -[MPUbiquitousPlaybackPositionEntity userPlayCount]
  -[MPUbiquitousPlaybackPositionEntity setUserPlayCount:]
  -[MPUbiquitousPlaybackPositionEntity ubiquitousIdentifier]


MPRTCReportingSecureKeyLoadEvent : MPRTCReportingEvent
 @property  double duration
 @property  NSError *error
 @property  NSString *siriSessionIdentifier

  // instance methods
  -[MPRTCReportingSecureKeyLoadEvent .cxx_destruct]
  -[MPRTCReportingSecureKeyLoadEvent setDuration:]
  -[MPRTCReportingSecureKeyLoadEvent rtcReportingType]
  -[MPRTCReportingSecureKeyLoadEvent rtcReportingCategory]
  -[MPRTCReportingSecureKeyLoadEvent newRTCReportingPayloadDictionary]
  -[MPRTCReportingSecureKeyLoadEvent siriSessionIdentifier]
  -[MPRTCReportingSecureKeyLoadEvent setSiriSessionIdentifier:]
  -[MPRTCReportingSecureKeyLoadEvent setError:]
  -[MPRTCReportingSecureKeyLoadEvent duration]
  -[MPRTCReportingSecureKeyLoadEvent error]


MPTiledArtworkRepresentationToken : NSObject
 @property  <NSCopying> *revisionIdentifier
 @property  NSArray *tileArtworkVisualIdenticalityIdentifiers

  // instance methods
  -[MPTiledArtworkRepresentationToken .cxx_destruct]
  -[MPTiledArtworkRepresentationToken setRevisionIdentifier:]
  -[MPTiledArtworkRepresentationToken tileArtworkVisualIdenticalityIdentifiers]
  -[MPTiledArtworkRepresentationToken setTileArtworkVisualIdenticalityIdentifiers:]
  -[MPTiledArtworkRepresentationToken revisionIdentifier]


MPQueueFeederIdentifierRegistry : NSObject <NSSecureCoding, NSCopying>
 @property  NSMutableArray *identifiers
 @property  NSMutableArray *identifierSets
 @property  NSMapTable *index
 @property  long long count

  // class methods
  +[MPQueueFeederIdentifierRegistry supportsSecureCoding]

  // instance methods
  -[MPQueueFeederIdentifierRegistry itemAtIndex:]
  -[MPQueueFeederIdentifierRegistry initWithCoder:]
  -[MPQueueFeederIdentifierRegistry setIndex:]
  -[MPQueueFeederIdentifierRegistry .cxx_destruct]
  -[MPQueueFeederIdentifierRegistry indexForItem:]
  -[MPQueueFeederIdentifierRegistry replaceItemAndIdentifierSet:atIndex:]
  -[MPQueueFeederIdentifierRegistry applyChanges:identifierSetLookupBlock:]
  -[MPQueueFeederIdentifierRegistry identifierSetAtIndex:]
  -[MPQueueFeederIdentifierRegistry identifierSetForItem:]
  -[MPQueueFeederIdentifierRegistry itemForIdentifierSet:]
  -[MPQueueFeederIdentifierRegistry count]
  -[MPQueueFeederIdentifierRegistry identifiers]
  -[MPQueueFeederIdentifierRegistry init]
  -[MPQueueFeederIdentifierRegistry index]
  -[MPQueueFeederIdentifierRegistry copyWithZone:]
  -[MPQueueFeederIdentifierRegistry setIdentifiers:]
  -[MPQueueFeederIdentifierRegistry encodeWithCoder:]
  -[MPQueueFeederIdentifierRegistry identifierSets]
  -[MPQueueFeederIdentifierRegistry setIdentifierSets:]


MPNowPlayingContentItem : MPContentItem <NSCopying>
 @property  NSString *info
 @property  NSArray *availableLanguageOptions
 @property  NSArray *currentLanguageOptions
 @property  NSArray *sections
 @property  MPNowPlayingInfoLyricsItem *lyrics
 @property  MPMediaItemArtwork *artwork
 @property  double startTime
 @property  double elapsedTime
 @property  float playbackRate
 @property  long long storeAlbumID
 @property  long long storeArtistID
 @property  long long storeID
 @property  long long storeSubscriptionID
 @property  long long legacyUniqueID
 @property  unsigned long mediaType
 @property  NSDictionary *deviceSpecificUserInfo
 @property  NSDictionary *nowPlayingInfo
 @property  NSDictionary *userInfo
 @property  BOOL sharableItem
 @property  BOOL advertisement
 @property  BOOL steerable
 @property  long long episodeType
 @property  NSDictionary *auxiliaryNowPlayingInfo
 @property  BOOL loading
 @property  <MPNowPlayingContentItemArtworkDataSource> *artworkDataSource
 @property  NSDictionary *collectionInfo
 @property  double calculatedElapsedTime
 @property  unsigned long songTraits
 @property  unsigned long albumTraits
 @property  unsigned long playlistTraits
 @property  MPNowPlayingInfoAudioFormat *preferredFormat
 @property  MPNowPlayingInfoAudioFormat *activeFormat
 @property  long long activeFormatJustification
 @property  unsigned long formatTierPreference
 @property  MPNowPlayingInfoAudioRoute *audioRoute
 @property  NSArray *alternativeFormats
 @property  BOOL explicitItem
 @property  NSString *albumName
 @property  NSString *trackArtistName
 @property  NSString *albumArtistName
 @property  NSString *directorName
 @property  NSString *composerName
 @property  NSString *genreName
 @property  NSString *seriesName
 @property  long long seasonNumber
 @property  long long episodeNumber
 @property  long long discNumber
 @property  long long totalDiscCount
 @property  long long trackNumber
 @property  long long totalTrackCount
 @property  NSString *albumYear
 @property  NSDate *releaseDate
 @property  NSString *localizedContentRating
 @property  NSString *collectionIdentifier
 @property  NSString *profileIdentifier
 @property  long long playlistType
 @property  long long radioStationType
 @property  NSString *radioStationName
 @property  NSString *radioStationStringIdentifier
 @property  NSString *externalContentIdentifier
 @property  NSString *serviceIdentifier
 @property  long long numberOfChildren
 @property  long long playCount
 @property  double duration
 @property  float defaultPlaybackRate
 @property  BOOL alwaysLiveItem
 @property  NSString *localizedDurationString
 @property  double elapsedTimeTimestamp
 @property  long long editingStyleFlags
 @property  BOOL hasArtwork
 @property  NSString *artworkIdentifier
 @property  NSString *artworkURL
 @property  NSArray *artworkURLTemplates
 @property  BOOL hasDescription
 @property  BOOL hasLanguageOptions
 @property  BOOL hasLyrics

  // class methods
  +[MPNowPlayingContentItem shouldPushArtworkData]

  // instance methods
  -[MPNowPlayingContentItem setLocalizedContentRating:]
  -[MPNowPlayingContentItem setSongTraits:]
  -[MPNowPlayingContentItem setArtworkIdentifier:]
  -[MPNowPlayingContentItem nowPlayingInfo]
  -[MPNowPlayingContentItem albumTraits]
  -[MPNowPlayingContentItem setReleaseDate:]
  -[MPNowPlayingContentItem songTraits]
  -[MPNowPlayingContentItem collectionInfo]
  -[MPNowPlayingContentItem localizedDurationString]
  -[MPNowPlayingContentItem setLocalizedDurationString:]
  -[MPNowPlayingContentItem releaseDate]
  -[MPNowPlayingContentItem setPlaybackRate:]
  -[MPNowPlayingContentItem deviceSpecificUserInfo]
  -[MPNowPlayingContentItem setNowPlayingInfo:]
  -[MPNowPlayingContentItem radioStationType]
  -[MPNowPlayingContentItem setMediaType:]
  -[MPNowPlayingContentItem albumName]
  -[MPNowPlayingContentItem setSeriesName:]
  -[MPNowPlayingContentItem playlistType]
  -[MPNowPlayingContentItem copyWithNewIdentifier:]
  -[MPNowPlayingContentItem collectionIdentifier]
  -[MPNowPlayingContentItem setEpisodeType:]
  -[MPNowPlayingContentItem setPlaylistType:]
  -[MPNowPlayingContentItem artworkURL]
  -[MPNowPlayingContentItem artworkIdentifier]
  -[MPNowPlayingContentItem alternativeFormats]
  -[MPNowPlayingContentItem setArtwork:]
  -[MPNowPlayingContentItem setPreferredFormat:]
  -[MPNowPlayingContentItem trackArtistName]
  -[MPNowPlayingContentItem setTotalTrackCount:]
  -[MPNowPlayingContentItem setPlaylistTraits:]
  -[MPNowPlayingContentItem isAdvertisement]
  -[MPNowPlayingContentItem playbackRate]
  -[MPNowPlayingContentItem isSteerable]
  -[MPNowPlayingContentItem setRadioStationName:]
  -[MPNowPlayingContentItem hasLyrics]
  -[MPNowPlayingContentItem setEpisodeNumber:]
  -[MPNowPlayingContentItem setStoreID:]
  -[MPNowPlayingContentItem setAlternativeFormats:]
  -[MPNowPlayingContentItem preferredFormat]
  -[MPNowPlayingContentItem setAlbumYear:]
  -[MPNowPlayingContentItem setActiveFormat:]
  -[MPNowPlayingContentItem playCount]
  -[MPNowPlayingContentItem lyrics]
  -[MPNowPlayingContentItem setGenreName:]
  -[MPNowPlayingContentItem setTrackArtistName:]
  -[MPNowPlayingContentItem discNumber]
  -[MPNowPlayingContentItem editingStyleFlags]
  -[MPNowPlayingContentItem formatTierPreference]
  -[MPNowPlayingContentItem episodeType]
  -[MPNowPlayingContentItem availableLanguageOptions]
  -[MPNowPlayingContentItem setDefaultPlaybackRate:]
  -[MPNowPlayingContentItem setExplicitItem:]
  -[MPNowPlayingContentItem setDeviceSpecificUserInfo:]
  -[MPNowPlayingContentItem seriesName]
  -[MPNowPlayingContentItem artworkDataSource]
  -[MPNowPlayingContentItem setAlwaysLiveItem:]
  -[MPNowPlayingContentItem storeSubscriptionID]
  -[MPNowPlayingContentItem setSteerable:]
  -[MPNowPlayingContentItem setCollectionInfo:]
  -[MPNowPlayingContentItem setDirectorName:]
  -[MPNowPlayingContentItem setTotalDiscCount:]
  -[MPNowPlayingContentItem isExplicitItem]
  -[MPNowPlayingContentItem setActiveFormatJustification:]
  -[MPNowPlayingContentItem setCollectionIdentifier:]
  -[MPNowPlayingContentItem audioRoute]
  -[MPNowPlayingContentItem setArtworkURLTemplates:]
  -[MPNowPlayingContentItem setAlbumTraits:]
  -[MPNowPlayingContentItem radioStationName]
  -[MPNowPlayingContentItem setStoreSubscriptionID:]
  -[MPNowPlayingContentItem setElapsedTime:]
  -[MPNowPlayingContentItem setSections:]
  -[MPNowPlayingContentItem albumYear]
  -[MPNowPlayingContentItem albumArtistName]
  -[MPNowPlayingContentItem totalDiscCount]
  -[MPNowPlayingContentItem defaultPlaybackRate]
  -[MPNowPlayingContentItem playlistTraits]
  -[MPNowPlayingContentItem setAdvertisement:]
  -[MPNowPlayingContentItem localizedContentRating]
  -[MPNowPlayingContentItem activeFormatJustification]
  -[MPNowPlayingContentItem setArtworkURL:]
  -[MPNowPlayingContentItem genreName]
  -[MPNowPlayingContentItem setSeasonNumber:]
  -[MPNowPlayingContentItem setAlbumArtistName:]
  -[MPNowPlayingContentItem setUserInfo:]
  -[MPNowPlayingContentItem elapsedTimeTimestamp]
  -[MPNowPlayingContentItem setProfileIdentifier:]
  -[MPNowPlayingContentItem episodeNumber]
  -[MPNowPlayingContentItem hasDescription]
  -[MPNowPlayingContentItem artworkURLTemplates]
  -[MPNowPlayingContentItem setLoading:]
  -[MPNowPlayingContentItem activeFormat]
  -[MPNowPlayingContentItem setTrackNumber:]
  -[MPNowPlayingContentItem setHasLanguageOptions:]
  -[MPNowPlayingContentItem directorName]
  -[MPNowPlayingContentItem setComposerName:]
  -[MPNowPlayingContentItem setAlbumName:]
  -[MPNowPlayingContentItem setAudioRoute:]
  -[MPNowPlayingContentItem setPlayCount:]
  -[MPNowPlayingContentItem setRadioStationType:]
  -[MPNowPlayingContentItem setEditingStyleFlags:]
  -[MPNowPlayingContentItem setAvailableLanguageOptions:]
  -[MPNowPlayingContentItem setFormatTierPreference:]
  -[MPNowPlayingContentItem setDiscNumber:]
  -[MPNowPlayingContentItem totalTrackCount]
  -[MPNowPlayingContentItem trackNumber]
  -[MPNowPlayingContentItem sections]
  -[MPNowPlayingContentItem storeID]
  -[MPNowPlayingContentItem elapsedTime]
  -[MPNowPlayingContentItem setHasDescription:]
  -[MPNowPlayingContentItem setServiceIdentifier:]
  -[MPNowPlayingContentItem invalidateDescription]
  -[MPNowPlayingContentItem serviceIdentifier]
  -[MPNowPlayingContentItem seasonNumber]
  -[MPNowPlayingContentItem setStartTime:]
  -[MPNowPlayingContentItem isLoading]
  -[MPNowPlayingContentItem setInfo:]
  -[MPNowPlayingContentItem externalContentIdentifier]
  -[MPNowPlayingContentItem .cxx_destruct]
  -[MPNowPlayingContentItem invalidateArtwork]
  -[MPNowPlayingContentItem _mergeContentItem:]
  -[MPNowPlayingContentItem setDuration:]
  -[MPNowPlayingContentItem profileIdentifier]
  -[MPNowPlayingContentItem info]
  -[MPNowPlayingContentItem isAlwaysLiveItem]
  -[MPNowPlayingContentItem setLegacyUniqueID:]
  -[MPNowPlayingContentItem setStoreArtistID:]
  -[MPNowPlayingContentItem storeAlbumID]
  -[MPNowPlayingContentItem setHasLyrics:]
  -[MPNowPlayingContentItem setArtworkDataSource:]
  -[MPNowPlayingContentItem hasLanguageOptions]
  -[MPNowPlayingContentItem composerName]
  -[MPNowPlayingContentItem setCurrentLanguageOptions:]
  -[MPNowPlayingContentItem isSharableItem]
  -[MPNowPlayingContentItem setLyrics:]
  -[MPNowPlayingContentItem setNumberOfChildren:]
  -[MPNowPlayingContentItem storeArtistID]
  -[MPNowPlayingContentItem startTime]
  -[MPNowPlayingContentItem auxiliaryNowPlayingInfo]
  -[MPNowPlayingContentItem setExternalContentIdentifier:]
  -[MPNowPlayingContentItem setSharableItem:]
  -[MPNowPlayingContentItem setStoreAlbumID:]
  -[MPNowPlayingContentItem mediaType]
  -[MPNowPlayingContentItem legacyUniqueID]
  -[MPNowPlayingContentItem userInfo]
  -[MPNowPlayingContentItem copyWithZone:]
  -[MPNowPlayingContentItem currentLanguageOptions]
  -[MPNowPlayingContentItem invalidateLanguageOptions]
  -[MPNowPlayingContentItem invalidateLyrics]
  -[MPNowPlayingContentItem numberOfChildren]
  -[MPNowPlayingContentItem radioStationStringIdentifier]
  -[MPNowPlayingContentItem setRadioStationStringIdentifier:]
  -[MPNowPlayingContentItem duration]
  -[MPNowPlayingContentItem calculatedElapsedTime]
  -[MPNowPlayingContentItem hasArtwork]
  -[MPNowPlayingContentItem setElapsedTime:playbackRate:]
  -[MPNowPlayingContentItem setHasArtwork:]


MPStoreAssetInfoPlaybackCache : NSObject
  // class methods
  +[MPStoreAssetInfoPlaybackCache sharedCache]

  // instance methods
  -[MPStoreAssetInfoPlaybackCache cachedResponseForRequest:]
  -[MPStoreAssetInfoPlaybackCache .cxx_destruct]
  -[MPStoreAssetInfoPlaybackCache addCachedResponse:forRequest:]
  -[MPStoreAssetInfoPlaybackCache updateForPlaybackOfFileAsset:fromResponse:]
  -[MPStoreAssetInfoPlaybackCache _init]


MPStoreAssetInfoPlaybackCacheRequest : NSObject <NSCopying>
 @property  unsigned long accountID
 @property  unsigned long delegatedAccountID
 @property  long long requestType
 @property  NSString *redownloadParameters
 @property  NSString *cloudUniversalLibraryID
 @property  long long storeSubscriptionAdamID
 @property  unsigned long storeCloudID
 @property  long long storePurchasedAdamID
 @property  long long storeRadioAdamID

  // instance methods
  -[MPStoreAssetInfoPlaybackCacheRequest setRequestType:]
  -[MPStoreAssetInfoPlaybackCacheRequest accountID]
  -[MPStoreAssetInfoPlaybackCacheRequest .cxx_destruct]
  -[MPStoreAssetInfoPlaybackCacheRequest cloudUniversalLibraryID]
  -[MPStoreAssetInfoPlaybackCacheRequest storeCloudID]
  -[MPStoreAssetInfoPlaybackCacheRequest delegatedAccountID]
  -[MPStoreAssetInfoPlaybackCacheRequest setStoreCloudID:]
  -[MPStoreAssetInfoPlaybackCacheRequest setDelegatedAccountID:]
  -[MPStoreAssetInfoPlaybackCacheRequest setCloudUniversalLibraryID:]
  -[MPStoreAssetInfoPlaybackCacheRequest setStoreSubscriptionAdamID:]
  -[MPStoreAssetInfoPlaybackCacheRequest setStorePurchasedAdamID:]
  -[MPStoreAssetInfoPlaybackCacheRequest storeRadioAdamID]
  -[MPStoreAssetInfoPlaybackCacheRequest setStoreRadioAdamID:]
  -[MPStoreAssetInfoPlaybackCacheRequest setAccountID:]
  -[MPStoreAssetInfoPlaybackCacheRequest isEqual:]
  -[MPStoreAssetInfoPlaybackCacheRequest storeSubscriptionAdamID]
  -[MPStoreAssetInfoPlaybackCacheRequest storePurchasedAdamID]
  -[MPStoreAssetInfoPlaybackCacheRequest requestType]
  -[MPStoreAssetInfoPlaybackCacheRequest redownloadParameters]
  -[MPStoreAssetInfoPlaybackCacheRequest setRedownloadParameters:]
  -[MPStoreAssetInfoPlaybackCacheRequest copyWithZone:]


MPModelGenreKind : MPModelKind
 @property  MPModelAlbumKind *albumKind

  // class methods
  +[MPModelGenreKind supportsSecureCoding]
  +[MPModelGenreKind identityKind]
  +[MPModelGenreKind kindWithAlbumKind:]

  // instance methods
  -[MPModelGenreKind initWithCoder:]
  -[MPModelGenreKind .cxx_destruct]
  -[MPModelGenreKind humanDescription]
  -[MPModelGenreKind applyToView:withContext:]
  -[MPModelGenreKind representedSearchScopePredicate]
  -[MPModelGenreKind albumKind]
  -[MPModelGenreKind isEqual:]
  -[MPModelGenreKind encodeWithCoder:]


MPModelGenre : MPModelObject
 @property  @? artworkCatalogBlock
 @property  NSString *name
 @property  NSDate *libraryAddedDate

  // class methods
  +[MPModelGenre __artworkCatalogBlock_KEY]
  +[MPModelGenre genericObjectType]
  +[MPModelGenre __name_KEY]
  +[MPModelGenre __libraryAddedDate_KEY]
  +[MPModelGenre kindWithAlbumKind:]

  // instance methods
  -[MPModelGenre humanDescription]
  -[MPModelGenre artworkCatalog]


MPMiddlewareOperationMap : NSObject
  // class methods
  +[MPMiddlewareOperationMap mapForRequest:]

  // instance methods
  -[MPMiddlewareOperationMap operationsForMiddleware:]
  -[MPMiddlewareOperationMap .cxx_destruct]
  -[MPMiddlewareOperationMap allMiddleware]
  -[MPMiddlewareOperationMap allOperations]
  -[MPMiddlewareOperationMap _init]


MPMiddlewareChain : NSObject
 @property  SEL builderSelector

  // class methods
  +[MPMiddlewareChain builderProxyForProtocol:]

  // instance methods
  -[MPMiddlewareChain nextObject]
  -[MPMiddlewareChain methodSignatureForSelector:]
  -[MPMiddlewareChain .cxx_destruct]
  -[MPMiddlewareChain initWithMiddleware:protocol:]
  -[MPMiddlewareChain builderSelector]
  -[MPMiddlewareChain setBuilderSelector:]
  -[MPMiddlewareChain forwardInvocation:]


_MPMiddlewareChainBuilderProxy : NSProxy
  // class methods
  +[_MPMiddlewareChainBuilderProxy allocWithProtocol:]

  // instance methods
  -[_MPMiddlewareChainBuilderProxy methodSignatureForSelector:]
  -[_MPMiddlewareChainBuilderProxy .cxx_destruct]
  -[_MPMiddlewareChainBuilderProxy forwardInvocation:]


MPStoreModelRequest : MPModelRequest
 @property  double timeoutInterval
 @property  NSString *clientIdentifier
 @property  NSString *clientVersion
 @property  NSString *clientPlatformIdentifier
 @property  unsigned long authenticationOptions

  // class methods
  +[MPStoreModelRequest requiresNetwork]
  +[MPStoreModelRequest supportsSecureCoding]

  // instance methods
  -[MPStoreModelRequest clientVersion]
  -[MPStoreModelRequest initWithCoder:]
  -[MPStoreModelRequest authenticationOptions]
  -[MPStoreModelRequest .cxx_destruct]
  -[MPStoreModelRequest setClientPlatformIdentifier:]
  -[MPStoreModelRequest setAuthenticationOptions:]
  -[MPStoreModelRequest clientPlatformIdentifier]
  -[MPStoreModelRequest init]
  -[MPStoreModelRequest clientIdentifier]
  -[MPStoreModelRequest timeoutInterval]
  -[MPStoreModelRequest setClientVersion:]
  -[MPStoreModelRequest copyWithZone:]
  -[MPStoreModelRequest encodeWithCoder:]
  -[MPStoreModelRequest setClientIdentifier:]
  -[MPStoreModelRequest setTimeoutInterval:]


MPModelPlaybackPosition : MPModelObject
 @property  double bookmarkTime
 @property  BOOL shouldRememberBookmarkTime
 @property  BOOL hasBeenPlayed
 @property  double startTime
 @property  NSNumber *stopTime
 @property  NSString *storeUbiquitousIdentifier
 @property  long long userPlayCount

  // class methods
  +[MPModelPlaybackPosition __storeUbiquitousIdentifier_KEY]
  +[MPModelPlaybackPosition __userPlayCount_KEY]
  +[MPModelPlaybackPosition __startTime_KEY]
  +[MPModelPlaybackPosition __bookmarkTime_KEY]
  +[MPModelPlaybackPosition __hasBeenPlayed_KEY]
  +[MPModelPlaybackPosition __shouldRememberBookmarkTime_KEY]
  +[MPModelPlaybackPosition __stopTime_KEY]


MPStoreItemMovieClipAsset : NSObject
 @property  NSDictionary *lookupDictionary
 @property  double duration
 @property  NSString *flavor
 @property  NSURL *hlsURL
 @property  NSURL *url

  // instance methods
  -[MPStoreItemMovieClipAsset hlsURL]
  -[MPStoreItemMovieClipAsset url]
  -[MPStoreItemMovieClipAsset .cxx_destruct]
  -[MPStoreItemMovieClipAsset lookupDictionary]
  -[MPStoreItemMovieClipAsset initWithLookupDictionary:]
  -[MPStoreItemMovieClipAsset flavor]
  -[MPStoreItemMovieClipAsset duration]


MPPlaybackContextRemotePlaybackQueue : MPRemotePlaybackQueue
  // instance methods
  -[MPPlaybackContextRemotePlaybackQueue siriAssetInfo]
  -[MPPlaybackContextRemotePlaybackQueue .cxx_destruct]
  -[MPPlaybackContextRemotePlaybackQueue initWithPlaybackContext:]
  -[MPPlaybackContextRemotePlaybackQueue siriWHAMetricsInfo]
  -[MPPlaybackContextRemotePlaybackQueue setReplaceIntent:]
  -[MPPlaybackContextRemotePlaybackQueue replaceIntent]
  -[MPPlaybackContextRemotePlaybackQueue isRequestingImmediatePlayback]
  -[MPPlaybackContextRemotePlaybackQueue siriRecommendationIdentifier]
  -[MPPlaybackContextRemotePlaybackQueue getPlaybackContextWithCompletion:]


MPModelForYouRecommendationGroupBuilder : NSObject
 @property  MPPropertySet *requestedGroupPropertySet
 @property  MPPropertySet *requestedItemPropertySet
 @property  NSDictionary *storeItemMetadataResults
 @property  MPMutableSectionedCollection *flatSectionedItems

  // class methods
  +[MPModelForYouRecommendationGroupBuilder allSupportedItemProperties]
  +[MPModelForYouRecommendationGroupBuilder allSupportedGroupProperties]

  // instance methods
  -[MPModelForYouRecommendationGroupBuilder .cxx_destruct]
  -[MPModelForYouRecommendationGroupBuilder modelObjectForRecommendationDictionary:userIdentity:]
  -[MPModelForYouRecommendationGroupBuilder initWithRequestedGroupPropertySet:requestedItemPropertySet:storeItemMetadataResults:flatSectionedItems:]
  -[MPModelForYouRecommendationGroupBuilder requestedGroupPropertySet]
  -[MPModelForYouRecommendationGroupBuilder requestedItemPropertySet]
  -[MPModelForYouRecommendationGroupBuilder storeItemMetadataResults]
  -[MPModelForYouRecommendationGroupBuilder flatSectionedItems]


MPSectionedIdentifierList : NSObject <_MPSectionedIdentifierListEncodableNextEntriesProviding, NSSecureCoding, NSObject>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDictionary *sectionDataSources
 @property  <MPSectionedIdentifierListAnnotationDelegate> *annotationDelegate
 @property  NSString *identifier
 @property  <MPSectionedIdentifierListDelegate> *delegate
 @property  long long itemCount
 @property  BOOL automaticallyReversesNonDestructiveDataSourceEdits
 @property  NSSet *allSectionIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPSectionedIdentifierList supportsSecureCoding]
  +[MPSectionedIdentifierList _performWithoutRequiringExclusivity:]

  // instance methods
  -[MPSectionedIdentifierList initWithCoder:]
  -[MPSectionedIdentifierList initWithIdentifier:]
  -[MPSectionedIdentifierList .cxx_destruct]
  -[MPSectionedIdentifierList hasSection:]
  -[MPSectionedIdentifierList _stitchWithPreviousEntry:list:cloneIndex:]
  -[MPSectionedIdentifierList _stitchPreviousEntry:toEntry:cloneIndex:]
  -[MPSectionedIdentifierList allSectionIdentifiers]
  -[MPSectionedIdentifierList _stitchLastItemEntryToHeadEntry:branchList:]
  -[MPSectionedIdentifierList _encodeEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList hasItem:inSection:]
  -[MPSectionedIdentifierList encodableNextEntriesWithExclusiveAccessToken:]
  -[MPSectionedIdentifierList _entryForPosition:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList _loadDataSource:forSection:completion:]
  -[MPSectionedIdentifierList _dataSourceInsertItems:fromSection:afterEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList isDeletedItem:inSection:]
  -[MPSectionedIdentifierList _performDelegateCalloutForSection:block:]
  -[MPSectionedIdentifierList automaticallyReversesNonDestructiveDataSourceEdits]
  -[MPSectionedIdentifierList _dataSourceMoveItem:inSection:afterEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList dataSourceMoveItemToHead:inSection:]
  -[MPSectionedIdentifierList performWithExclusiveAccessAndReturnInteger:]
  -[MPSectionedIdentifierList addDataSource:section:afterHeadOfSection:completion:]
  -[MPSectionedIdentifierList dataSourceMoveItem:afterItem:inSection:]
  -[MPSectionedIdentifierList dataSourceMoveItemToTail:inSection:]
  -[MPSectionedIdentifierList dataSourceUpdateSection:]
  -[MPSectionedIdentifierList dataSourceBeginTransationForSection:]
  -[MPSectionedIdentifierList dataSourceEndTransactinForSection:]
  -[MPSectionedIdentifierList setAnnotationDelegate:]
  -[MPSectionedIdentifierList _tailEntryForSectionIdentifier:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList setAutomaticallyReversesNonDestructiveDataSourceEdits:]
  -[MPSectionedIdentifierList setDelegate:]
  -[MPSectionedIdentifierList itemCount]
  -[MPSectionedIdentifierList _sectionDataSources]
  -[MPSectionedIdentifierList init]
  -[MPSectionedIdentifierList enumeratorWithOptions:]
  -[MPSectionedIdentifierList identifier]
  -[MPSectionedIdentifierList delegate]
  -[MPSectionedIdentifierList _debugDescriptionWithEnumerator:lengths:]
  -[MPSectionedIdentifierList annotationDelegate]
  -[MPSectionedIdentifierList performWithExclusiveAccessAndReturnObject:]
  -[MPSectionedIdentifierList dealloc]
  -[MPSectionedIdentifierList _beforeInitWithCoder:]
  -[MPSectionedIdentifierList encodeWithCoder:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList performWithExclusiveAccess:]
  -[MPSectionedIdentifierList _itemEntry:sectionIdentifier:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList enumeratorWithOptions:startPosition:endPosition:]
  -[MPSectionedIdentifierList enumeratorWithOptions:startPosition:endPosition:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList moveItemToStart:fromSection:]
  -[MPSectionedIdentifierList moveItemToEnd:fromSection:]
  -[MPSectionedIdentifierList removeItem:fromSection:]
  -[MPSectionedIdentifierList addDataSourceAtStart:section:completion:]
  -[MPSectionedIdentifierList addDataSource:section:afterItem:inSection:completion:]
  -[MPSectionedIdentifierList addDataSourceAtEnd:section:completion:]
  -[MPSectionedIdentifierList addDataSource:section:afterTailOfSection:completion:]
  -[MPSectionedIdentifierList _sectionHeadEntryMapWithExclusiveAccessToken:]
  -[MPSectionedIdentifierList replaceDataSource:forSection:completion:]
  -[MPSectionedIdentifierList performWithExclusiveAccessAndReturnBOOL:]
  -[MPSectionedIdentifierList moveItem:fromSection:afterItem:inSection:]
  -[MPSectionedIdentifierList moveItem:fromSection:afterHeadOfSection:]
  -[MPSectionedIdentifierList moveItem:fromSection:afterTailOfSection:]
  -[MPSectionedIdentifierList _itemCountWithExclusiveAccessToken:]
  -[MPSectionedIdentifierList dataSourceInsertItemsAtHead:inSection:]
  -[MPSectionedIdentifierList dataSourceInsertItems:afterItem:inSection:]
  -[MPSectionedIdentifierList dataSourceInsertItemsAtTail:inSection:]
  -[MPSectionedIdentifierList dataSourceRemoveItem:fromSection:]
  -[MPSectionedIdentifierList dataSourceReloadItem:inSection:]
  -[MPSectionedIdentifierList _insertDataSourceHead:afterEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList _insertDataSource:forSection:afterEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList _endEntryWithExclusiveAccessToken:]
  -[MPSectionedIdentifierList _startEntriesWithExclusiveAccessToken:]
  -[MPSectionedIdentifierList _addBranchToEntry:entries:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList _enumerator:didEncounterEntry:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList _reverseEnumeratorWillStartAtEnd:withExclusiveAccessToken:]
  -[MPSectionedIdentifierList encodeWithCoder:]


_MPIdentifierListSectionProxy : NSObject <MPMutableIdentifierListSection>
 @property  NSMutableArray *mutableItemIdentifiers
 @property  NSString *sectionIdentifier
 @property  MPSectionedIdentifierList *sectionedIdentifierList
 @property  NSArray *itemIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPIdentifierListSectionProxy sectionIdentifier]
  -[_MPIdentifierListSectionProxy itemIdentifiers]
  -[_MPIdentifierListSectionProxy removeItem:]
  -[_MPIdentifierListSectionProxy .cxx_destruct]
  -[_MPIdentifierListSectionProxy moveItemToHead:]
  -[_MPIdentifierListSectionProxy initWithSection:sectionedIdentifierList:existingItemIdentifiers:]
  -[_MPIdentifierListSectionProxy insertItemsAtHead:]
  -[_MPIdentifierListSectionProxy updateItem:]
  -[_MPIdentifierListSectionProxy insertItemsAtTail:]
  -[_MPIdentifierListSectionProxy updateSection]
  -[_MPIdentifierListSectionProxy applyChanges:itemLookupBlock:]
  -[_MPIdentifierListSectionProxy moveItem:afterItem:]
  -[_MPIdentifierListSectionProxy moveItemToTail:]
  -[_MPIdentifierListSectionProxy mutableItemIdentifiers]
  -[_MPIdentifierListSectionProxy setMutableItemIdentifiers:]
  -[_MPIdentifierListSectionProxy insertItems:afterItem:]
  -[_MPIdentifierListSectionProxy sectionedIdentifierList]


_MPSectionedIdentifierListCloneIndexEntry : NSObject
 @property  MPSectionedIdentifierListItemEntry *rootEntry
 @property  NSMutableSet *clonedEntries

  // instance methods
  -[_MPSectionedIdentifierListCloneIndexEntry .cxx_destruct]
  -[_MPSectionedIdentifierListCloneIndexEntry init]
  -[_MPSectionedIdentifierListCloneIndexEntry rootEntry]
  -[_MPSectionedIdentifierListCloneIndexEntry setClonedEntries:]
  -[_MPSectionedIdentifierListCloneIndexEntry setRootEntry:]
  -[_MPSectionedIdentifierListCloneIndexEntry clonedEntries]


MPSectionedIdentifierListPosition : NSObject <NSSecureCoding>
 @property  NSString *sectionIdentifier
 @property  NSString *itemIdentifier
 @property  long long entryType

  // class methods
  +[MPSectionedIdentifierListPosition supportsSecureCoding]
  +[MPSectionedIdentifierListPosition positionForItem:inSection:]
  +[MPSectionedIdentifierListPosition positionForHeadOfSection:]
  +[MPSectionedIdentifierListPosition positionForTailOfSection:]

  // instance methods
  -[MPSectionedIdentifierListPosition sectionIdentifier]
  -[MPSectionedIdentifierListPosition entryType]
  -[MPSectionedIdentifierListPosition itemIdentifier]
  -[MPSectionedIdentifierListPosition initWithCoder:]
  -[MPSectionedIdentifierListPosition .cxx_destruct]
  -[MPSectionedIdentifierListPosition isEqual:]
  -[MPSectionedIdentifierListPosition _init]
  -[MPSectionedIdentifierListPosition encodeWithCoder:]


MPModelLibraryPlaylistEditChangeRequest : NSObject <NSCopying>
 @property  BOOL didSetPlaylistUserImage
 @property  MPMediaLibrary *mediaLibrary
 @property  MPSectionedCollection *playlistEntries
 @property  NSString *playlistDescription
 @property  NSString *playlistName
 @property  UIImage *playlistUserImage
 @property  NSNumber *publicPlaylist
 @property  NSNumber *visiblePlaylist
 @property  NSNumber *curatorPlaylist
 @property  NSNumber *isOwner
 @property  NSString *authorStoreIdentifier
 @property  MPModelPlaylist *parentPlaylist
 @property  BOOL shouldCreatePlaylist
 @property  MPModelPlaylist *playlist

  // class methods
  +[MPModelLibraryPlaylistEditChangeRequest requiredPlaylistEntryProperties]

  // instance methods
  -[MPModelLibraryPlaylistEditChangeRequest setMediaLibrary:]
  -[MPModelLibraryPlaylistEditChangeRequest mediaLibrary]
  -[MPModelLibraryPlaylistEditChangeRequest .cxx_destruct]
  -[MPModelLibraryPlaylistEditChangeRequest setCuratorPlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest setPublicPlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest setVisiblePlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest setIsOwner:]
  -[MPModelLibraryPlaylistEditChangeRequest setPlaylistUserImage:]
  -[MPModelLibraryPlaylistEditChangeRequest setPlaylistEntries:]
  -[MPModelLibraryPlaylistEditChangeRequest newOperationWithLocalPersistenceResponseHandler:completeResponseHandler:]
  -[MPModelLibraryPlaylistEditChangeRequest setPlaylistDescription:]
  -[MPModelLibraryPlaylistEditChangeRequest setPlaylistName:]
  -[MPModelLibraryPlaylistEditChangeRequest setAuthorStoreIdentifier:]
  -[MPModelLibraryPlaylistEditChangeRequest setParentPlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest setShouldCreatePlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest playlist]
  -[MPModelLibraryPlaylistEditChangeRequest setPlaylist:]
  -[MPModelLibraryPlaylistEditChangeRequest init]
  -[MPModelLibraryPlaylistEditChangeRequest isOwner]
  -[MPModelLibraryPlaylistEditChangeRequest copyWithZone:]
  -[MPModelLibraryPlaylistEditChangeRequest playlistName]
  -[MPModelLibraryPlaylistEditChangeRequest playlistEntries]
  -[MPModelLibraryPlaylistEditChangeRequest isPublicPlaylist]
  -[MPModelLibraryPlaylistEditChangeRequest isVisiblePlaylist]
  -[MPModelLibraryPlaylistEditChangeRequest parentPlaylist]
  -[MPModelLibraryPlaylistEditChangeRequest shouldCreatePlaylist]
  -[MPModelLibraryPlaylistEditChangeRequest playlistDescription]
  -[MPModelLibraryPlaylistEditChangeRequest isCuratorPlaylist]
  -[MPModelLibraryPlaylistEditChangeRequest authorStoreIdentifier]
  -[MPModelLibraryPlaylistEditChangeRequest didSetPlaylistUserImage]
  -[MPModelLibraryPlaylistEditChangeRequest playlistUserImage]


MPStorePlatformEntityTranslatorContext : NSObject
 @property  NSString *personID

  // instance methods
  -[MPStorePlatformEntityTranslatorContext setPersonID:]
  -[MPStorePlatformEntityTranslatorContext personID]
  -[MPStorePlatformEntityTranslatorContext .cxx_destruct]


_MPStorePlatformEntityPropertyTranslator : _MPKeyPathEntityPropertyTranslator

_MPStorePlatformEntityRelationshipTranslator : _MPKeyPathEntityRelationshipTranslator
 @property  @? payloadTransformBlock

  // instance methods
  -[_MPStorePlatformEntityRelationshipTranslator .cxx_destruct]
  -[_MPStorePlatformEntityRelationshipTranslator payloadTransformBlock]
  -[_MPStorePlatformEntityRelationshipTranslator initWithRelatedMPModelClass:payloadTransformBlock:]
  -[_MPStorePlatformEntityRelationshipTranslator prepareSource:context:]


MPStorePlatformEntityTranslator : MPBaseEntityTranslator
  // class methods
  +[MPStorePlatformEntityTranslator translatorForKind:]
  +[MPStorePlatformEntityTranslator buildSchemaIfNeeded]

  // instance methods
  -[MPStorePlatformEntityTranslator mapPropertyKey:toPayloadKeyPaths:valueTransformer:]
  -[MPStorePlatformEntityTranslator identifiersForPayload:context:]
  -[MPStorePlatformEntityTranslator objectForPropertySet:payload:context:]
  -[MPStorePlatformEntityTranslator mapIdentifierCreationKeyPaths:transformBlock:]
  -[MPStorePlatformEntityTranslator mapPropertyKey:toPayloadKeyPaths:valueTransformerFunction:]
  -[MPStorePlatformEntityTranslator mapRelationshipKey:toModelClass:payloadTransform:]
  -[MPStorePlatformEntityTranslator prepareSource:context:properties:]
  -[MPStorePlatformEntityTranslator mapPropertyKey:toPayloadKeyPath:]


MPMediaControls : NSObject <MPMediaControlsProtocol, NSXPCListenerDelegate>
 @property  NSXPCListener *listener
 @property  NSXPCConnection *connection
 @property  MPMediaControlsConfiguration *configuration
 @property  @? dismissHandlerWithReason
 @property  UIView *sourceView
 @property  @? dismissHandler
 @property  NSString *routeUID
 @property  double preferredWidth
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaControls present]
  -[MPMediaControls setDismissalReason:]
  -[MPMediaControls setSourceView:]
  -[MPMediaControls routeUID]
  -[MPMediaControls preferredWidth]
  -[MPMediaControls _reset]
  -[MPMediaControls configuration]
  -[MPMediaControls .cxx_destruct]
  -[MPMediaControls setRouteUID:]
  -[MPMediaControls setListener:]
  -[MPMediaControls sourceView]
  -[MPMediaControls _dismissalReasonString:]
  -[MPMediaControls _mediaControlsStyleForRouteSharingPolicy:]
  -[MPMediaControls _updateAudioSessionRoutingContext]
  -[MPMediaControls initWithConfiguration:shouldObserveRoutingContextUIDChanges:]
  -[MPMediaControls _MPRouteSharingPolicyToAVRouteSharingPolicy:]
  -[MPMediaControls _audioSessionRoutingContextDidChangeNotification]
  -[MPMediaControls _shouldUpdateStyleForCurrentConfigurationStyle:]
  -[MPMediaControls dismissHandlerWithReason]
  -[MPMediaControls setDismissHandlerWithReason:]
  -[MPMediaControls setConnection:]
  -[MPMediaControls openConnection]
  -[MPMediaControls init]
  -[MPMediaControls setDismissHandler:]
  -[MPMediaControls listener]
  -[MPMediaControls connection]
  -[MPMediaControls stopPrewarming]
  -[MPMediaControls startPrewarming]
  -[MPMediaControls initWithRouteSharingPolicy:routingContextUID:]
  -[MPMediaControls initWithConfiguration:]
  -[MPMediaControls setPreferredWidth:]
  -[MPMediaControls dismiss]
  -[MPMediaControls dealloc]
  -[MPMediaControls listener:shouldAcceptNewConnection:]
  -[MPMediaControls dismissHandler]


MPModelLibraryDownloadQueueRequest : MPModelRequest
  // class methods
  +[MPModelLibraryDownloadQueueRequest requiresNetwork]

  // instance methods
  -[MPModelLibraryDownloadQueueRequest newOperationWithResponseHandler:]


MPModelLibraryDownloadQueueResponse : MPModelResponse <MPMediaDownloadObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPModelLibraryDownloadQueueResponse initWithRequest:]
  -[MPModelLibraryDownloadQueueResponse downloadManager:didFinishAsset:withError:]
  -[MPModelLibraryDownloadQueueResponse getChangeDetailsFromPreviousResponse:completion:]
  -[MPModelLibraryDownloadQueueResponse dealloc]
  -[MPModelLibraryDownloadQueueResponse downloadManager:didEnqueueAssetDownloads:didRemoveAssetDownloads:]


_MPModelLibraryDownloadQueueDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPModelLibraryDownloadQueueDataSource sectionAtIndex:]
  -[_MPModelLibraryDownloadQueueDataSource numberOfItemsInSection:]
  -[_MPModelLibraryDownloadQueueDataSource initWithRequest:]
  -[_MPModelLibraryDownloadQueueDataSource .cxx_construct]
  -[_MPModelLibraryDownloadQueueDataSource numberOfSections]
  -[_MPModelLibraryDownloadQueueDataSource .cxx_destruct]
  -[_MPModelLibraryDownloadQueueDataSource identifiersForItemAtIndexPath:]
  -[_MPModelLibraryDownloadQueueDataSource itemAtIndexPath:]


MPNetworkObserver : NSObject
 @property  BOOL isUsingNetwork
 @property  BOOL musicCellularStreamingAllowed
 @property  BOOL videoCellularStreamingAllowed
 @property  BOOL musicCellularDownloadingAllowed
 @property  BOOL storeCellularNetworkingAllowed

  // class methods
  +[MPNetworkObserver sharedNetworkObserver]

  // instance methods
  -[MPNetworkObserver isUsingNetwork]
  -[MPNetworkObserver isMusicCellularDownloadingAllowed]
  -[MPNetworkObserver .cxx_destruct]
  -[MPNetworkObserver isMusicCellularStreamingAllowed]
  -[MPNetworkObserver init]
  -[MPNetworkObserver isStoreCellularNetworkingAllowed]
  -[MPNetworkObserver beginUsingNetwork]
  -[MPNetworkObserver endUsingNetwork]
  -[MPNetworkObserver setVideoCellularStreamingAllowed:]
  -[MPNetworkObserver isVideoCellularStreamingAllowed]
  -[MPNetworkObserver _init]
  -[MPNetworkObserver setMusicCellularDownloadingAllowed:]
  -[MPNetworkObserver dealloc]
  -[MPNetworkObserver setMusicCellularStreamingAllowed:]


MPModelStoreBrowseRoomMusicKitRequestOperation : MPStoreModelRequestOperation
  // instance methods
  -[MPModelStoreBrowseRoomMusicKitRequestOperation .cxx_destruct]
  -[MPModelStoreBrowseRoomMusicKitRequestOperation _roomURLWithRoomID:storeURLBag:]
  -[MPModelStoreBrowseRoomMusicKitRequestOperation configurationForLoadingModelDataWithStoreURLBag:error:]
  -[MPModelStoreBrowseRoomMusicKitRequestOperation _produceResponseWithParser:results:error:]
  -[MPModelStoreBrowseRoomMusicKitRequestOperation produceResponseWithLoadedOutput:completion:]


MPRTCReportingAssetLoadEvent : MPRTCReportingEvent
 @property  double duration
 @property  NSError *error
 @property  NSString *siriSessionIdentifier

  // instance methods
  -[MPRTCReportingAssetLoadEvent .cxx_destruct]
  -[MPRTCReportingAssetLoadEvent setDuration:]
  -[MPRTCReportingAssetLoadEvent rtcReportingType]
  -[MPRTCReportingAssetLoadEvent rtcReportingCategory]
  -[MPRTCReportingAssetLoadEvent newRTCReportingPayloadDictionary]
  -[MPRTCReportingAssetLoadEvent siriSessionIdentifier]
  -[MPRTCReportingAssetLoadEvent setSiriSessionIdentifier:]
  -[MPRTCReportingAssetLoadEvent setError:]
  -[MPRTCReportingAssetLoadEvent duration]
  -[MPRTCReportingAssetLoadEvent error]


MPStoreSocialRemoveFollowerOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialRemoveFollowerOperationDataSource queryItems]
  -[MPStoreSocialRemoveFollowerOperationDataSource .cxx_destruct]
  -[MPStoreSocialRemoveFollowerOperationDataSource setPerson:]
  -[MPStoreSocialRemoveFollowerOperationDataSource httpBody]
  -[MPStoreSocialRemoveFollowerOperationDataSource person]
  -[MPStoreSocialRemoveFollowerOperationDataSource httpBodyType]
  -[MPStoreSocialRemoveFollowerOperationDataSource bagKey]
  -[MPStoreSocialRemoveFollowerOperationDataSource httpMethod]


MPModelForYouRecommendationItemBuilder : NSObject
 @property  MPPropertySet *requestedPropertySet
 @property  NSDictionary *storeItemMetadataResults
 @property  MPMutableSectionedCollection *flatSectionedItems

  // class methods
  +[MPModelForYouRecommendationItemBuilder allSupportedProperties]

  // instance methods
  -[MPModelForYouRecommendationItemBuilder .cxx_destruct]
  -[MPModelForYouRecommendationItemBuilder initWithRequestedPropertySet:storeItemMetadataResults:flatSectionedItems:]
  -[MPModelForYouRecommendationItemBuilder requestedPropertySet]
  -[MPModelForYouRecommendationItemBuilder modelObjectForRecommendationChildDictionary:parentGroup:subgroupsAccumulator:userIdentity:]
  -[MPModelForYouRecommendationItemBuilder storeItemMetadataResults]
  -[MPModelForYouRecommendationItemBuilder flatSectionedItems]


MPAVEndpointRoutingDataSource : MPAVRoutingDataSource
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSMutableDictionary *endpoints
 @property  MRAVRoutingDiscoverySessionConfiguration *discoverySessionConfiguration
 @property  NSString *routingContextUID

  // instance methods
  -[MPAVEndpointRoutingDataSource setTargetSessionID:]
  -[MPAVEndpointRoutingDataSource setEndpoints:]
  -[MPAVEndpointRoutingDataSource setSerialQueue:]
  -[MPAVEndpointRoutingDataSource setPickedRoute:withPassword:completion:]
  -[MPAVEndpointRoutingDataSource endpoints]
  -[MPAVEndpointRoutingDataSource targetSessionID]
  -[MPAVEndpointRoutingDataSource getRoutesForCategory:]
  -[MPAVEndpointRoutingDataSource discoverySessionConfiguration]
  -[MPAVEndpointRoutingDataSource devicePresenceDetected]
  -[MPAVEndpointRoutingDataSource setRoutingContextUID:]
  -[MPAVEndpointRoutingDataSource .cxx_destruct]
  -[MPAVEndpointRoutingDataSource discoveryMode]
  -[MPAVEndpointRoutingDataSource routingContextUID]
  -[MPAVEndpointRoutingDataSource initWithThrottlingEnabled:]
  -[MPAVEndpointRoutingDataSource serialQueue]
  -[MPAVEndpointRoutingDataSource init]
  -[MPAVEndpointRoutingDataSource setDiscoveryMode:]
  -[MPAVEndpointRoutingDataSource _endpointsDidChange:]
  -[MPAVEndpointRoutingDataSource dealloc]


MPAVCompanionProxiedEndpointRoutingDataSource : MPAVEndpointRoutingDataSource

MPAVCompanionEndpointRoutingDataSource : MPAVEndpointRoutingDataSource
  // instance methods
  -[MPAVCompanionEndpointRoutingDataSource getRoutesForCategory:]
  -[MPAVCompanionEndpointRoutingDataSource discoverySessionConfiguration]
  -[MPAVCompanionEndpointRoutingDataSource setDiscoveryMode:]


MPCFWrapper : NSObject
 @property  BOOL nullRef
 @property  r^v refValue

  // instance methods
  -[MPCFWrapper isNullRef]
  -[MPCFWrapper refValue]
  -[MPCFWrapper setNullRef:]
  -[MPCFWrapper initWithCFType:]
  -[MPCFWrapper dealloc]


MPAsyncBlockOperation : MPAsyncOperation
 @property  @? startHandler

  // instance methods
  -[MPAsyncBlockOperation .cxx_destruct]
  -[MPAsyncBlockOperation initWithStartHandler:]
  -[MPAsyncBlockOperation execute]
  -[MPAsyncBlockOperation startHandler]


MPStorePurchaseErrorResolver : MPAVErrorResolver
 @property  NSNumber *storeAccountIdentifier

  // instance methods
  -[MPStorePurchaseErrorResolver .cxx_destruct]
  -[MPStorePurchaseErrorResolver storeAccountIdentifier]
  -[MPStorePurchaseErrorResolver resolveError:]
  -[MPStorePurchaseErrorResolver initWithStoreAccountIdentifier:]


MPUbiquitousPlaybackPositionController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_queue> *serviceQueue
 @property  SBCPlaybackPositionSyncService *uppServiceProxy
 @property  SBCPlaybackPositionDomain *uppDomain
 @property  BOOL serviceActive
 @property  BOOL beganUsingPlaybackPositionMetadata
 @property  BOOL databaseHasBookmarkableContents
 @property  BOOL applicationBecomingActive
 @property  BOOL externallyActive

  // class methods
  +[MPUbiquitousPlaybackPositionController sharedUbiquitousPlaybackPositionController]

  // instance methods
  -[MPUbiquitousPlaybackPositionController serviceQueue]
  -[MPUbiquitousPlaybackPositionController _applicationWillEnterForegroundNotification:]
  -[MPUbiquitousPlaybackPositionController .cxx_destruct]
  -[MPUbiquitousPlaybackPositionController uppDomain]
  -[MPUbiquitousPlaybackPositionController _applicationDidEnterForegroundNotification:]
  -[MPUbiquitousPlaybackPositionController uppServiceProxy]
  -[MPUbiquitousPlaybackPositionController _defaultMediaLibraryDidChangeNotification:]
  -[MPUbiquitousPlaybackPositionController _onServiceQueue_connectedUPPServiceProxy]
  -[MPUbiquitousPlaybackPositionController _onQueue_isEnabled]
  -[MPUbiquitousPlaybackPositionController _onServiceQueue_resignActiveService]
  -[MPUbiquitousPlaybackPositionController _onServiceQueue_updateActiveServiceIfNeeded]
  -[MPUbiquitousPlaybackPositionController _onQueue_shouldBeActive]
  -[MPUbiquitousPlaybackPositionController _onServiceQueue_becomeActiveService]
  -[MPUbiquitousPlaybackPositionController _playbackPositionEntityWithValuesFromMusicLibraryTrackPersistentID:]
  -[MPUbiquitousPlaybackPositionController playbackPositionForLocalEntityIdentifiers:]
  -[MPUbiquitousPlaybackPositionController setExternallyActive:]
  -[MPUbiquitousPlaybackPositionController beginUsingPlaybackPositionMetadata]
  -[MPUbiquitousPlaybackPositionController externallyActive]
  -[MPUbiquitousPlaybackPositionController noteChangedPlaybackPositionMetadataForTrackPersistentID:isCheckpoint:]
  -[MPUbiquitousPlaybackPositionController setServiceActive:]
  -[MPUbiquitousPlaybackPositionController setUppDomain:]
  -[MPUbiquitousPlaybackPositionController persistPlaybackPositionMetadataEntity:isCheckpoint:completion:]
  -[MPUbiquitousPlaybackPositionController setUppServiceProxy:]
  -[MPUbiquitousPlaybackPositionController setBeganUsingPlaybackPositionMetadata:]
  -[MPUbiquitousPlaybackPositionController databaseHasBookmarkableContents]
  -[MPUbiquitousPlaybackPositionController applicationBecomingActive]
  -[MPUbiquitousPlaybackPositionController setDatabaseHasBookmarkableContents:]
  -[MPUbiquitousPlaybackPositionController init]
  -[MPUbiquitousPlaybackPositionController isServiceActive]
  -[MPUbiquitousPlaybackPositionController isServiceActive]
  -[MPUbiquitousPlaybackPositionController _applicationDidEnterBackgroundNotification:]
  -[MPUbiquitousPlaybackPositionController playbackPositionForLocalEntityIdentifier:]
  -[MPUbiquitousPlaybackPositionController queue]
  -[MPUbiquitousPlaybackPositionController dealloc]


MPContentItem : NSObject
 @property  ^v _mediaRemoteContentItem
 @property  NSString *identifier
 @property  NSString *title
 @property  NSString *subtitle
 @property  MPMediaItemArtwork *artwork
 @property  float playbackProgress
 @property  BOOL streamingContent
 @property  BOOL explicitContent
 @property  BOOL container
 @property  BOOL playable

  // class methods
  +[MPContentItem shouldPushArtworkData]
  +[MPContentItem isSuppressingChangeNotifications]
  +[MPContentItem performChangeImmediately:]
  +[MPContentItem performSuppressingChangeNotifications:]

  // instance methods
  -[MPContentItem artwork]
  -[MPContentItem playbackProgress]
  -[MPContentItem setArtwork:]
  -[MPContentItem setTitle:]
  -[MPContentItem initWithIdentifier:]
  -[MPContentItem isContainer]
  -[MPContentItem .cxx_destruct]
  -[MPContentItem setExplicitContent:]
  -[MPContentItem _postItemChangedNotificationWithDeltaBlock:]
  -[MPContentItem setStreamingContent:]
  -[MPContentItem setSubtitle:]
  -[MPContentItem createExternalRepresentation]
  -[MPContentItem _loadArtwork:completion:]
  -[MPContentItem initWithExternalRepresentation:]
  -[MPContentItem init]
  -[MPContentItem setContainer:]
  -[MPContentItem isEqual:]
  -[MPContentItem _mediaRemoteContentItem]
  -[MPContentItem identifier]
  -[MPContentItem subtitle]
  -[MPContentItem title]
  -[MPContentItem isStreamingContent]
  -[MPContentItem setPlaybackProgress:]
  -[MPContentItem dealloc]
  -[MPContentItem isExplicitContent]
  -[MPContentItem _initWithMediaRemoteContentItem:]
  -[MPContentItem setPlayable:]
  -[MPContentItem isPlayable]


MPStoreSocialUnfollowOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialUnfollowOperationDataSource queryItems]
  -[MPStoreSocialUnfollowOperationDataSource .cxx_destruct]
  -[MPStoreSocialUnfollowOperationDataSource setPerson:]
  -[MPStoreSocialUnfollowOperationDataSource httpBody]
  -[MPStoreSocialUnfollowOperationDataSource person]
  -[MPStoreSocialUnfollowOperationDataSource httpBodyType]
  -[MPStoreSocialUnfollowOperationDataSource bagKey]
  -[MPStoreSocialUnfollowOperationDataSource httpMethod]


MPModelPerson : MPModelObject
 @property  NSString *name
 @property  BOOL hasSocialPosts

  // class methods
  +[MPModelPerson __hasSocialPosts_KEY]
  +[MPModelPerson __name_KEY]


MPLibraryAddStatusObserver : NSObject
 @property  ICUserIdentity *userIdentity
 @property  long long currentStatus
 @property  @? statusBlock
 @property  {MPLibraryAddStatusObserverConfiguration=BBBBB} configuration
 @property  MPModelObject *identifyingModelObject

  // instance methods
  -[MPLibraryAddStatusObserver statusBlock]
  -[MPLibraryAddStatusObserver userIdentity]
  -[MPLibraryAddStatusObserver _updateInProgressDidChangeNotification:]
  -[MPLibraryAddStatusObserver initWithUserIdentity:]
  -[MPLibraryAddStatusObserver configuration]
  -[MPLibraryAddStatusObserver .cxx_destruct]
  -[MPLibraryAddStatusObserver _transientStateDidChangeNotification:]
  -[MPLibraryAddStatusObserver init]
  -[MPLibraryAddStatusObserver _updateCurrentStatus]
  -[MPLibraryAddStatusObserver currentStatus]
  -[MPLibraryAddStatusObserver _cloudLibraryEnabledDidChangeNotification:]
  -[MPLibraryAddStatusObserver setConfiguration:identifyingModelObject:]
  -[MPLibraryAddStatusObserver _allowsExplicitContentDidChangeNotification:]
  -[MPLibraryAddStatusObserver identifyingModelObject]
  -[MPLibraryAddStatusObserver configureWithModelObject:]
  -[MPLibraryAddStatusObserver _subscriptionStatusDidChangeNotification:]
  -[MPLibraryAddStatusObserver dealloc]
  -[MPLibraryAddStatusObserver _calculateCurrentStatus]
  -[MPLibraryAddStatusObserver setStatusBlock:]


MPModelRecordLabelKind : MPModelKind
  // class methods
  +[MPModelRecordLabelKind identityKind]

  // instance methods
  -[MPModelRecordLabelKind humanDescription]


MPModelRecordLabel : MPModelObject
 @property  NSString *name
 @property  NSString *descriptionText
 @property  NSString *shortDescriptionText
 @property  @? artworkCatalogBlock
 @property  @? editorialArtworkCatalogBlock

  // class methods
  +[MPModelRecordLabel __artworkCatalogBlock_KEY]
  +[MPModelRecordLabel genericObjectType]
  +[MPModelRecordLabel __descriptionText_KEY]
  +[MPModelRecordLabel __shortDescriptionText_KEY]
  +[MPModelRecordLabel __name_KEY]
  +[MPModelRecordLabel __editorialArtworkCatalogBlock_KEY]

  // instance methods
  -[MPModelRecordLabel editorialArtworkCatalog]
  -[MPModelRecordLabel artworkCatalog]


MPRadioLibrary : NSObject
 @property  BOOL isEnabled
 @property  unsigned long stationCount
 @property  NSArray *stations

  // class methods
  +[MPRadioLibrary defaultRadioLibrary]

  // instance methods
  -[MPRadioLibrary .cxx_destruct]
  -[MPRadioLibrary _radioModel]
  -[MPRadioLibrary stations]
  -[MPRadioLibrary _radioAvailabilityDidChangeNotification:]
  -[MPRadioLibrary _radioRecentStationsDidChangeNotification:]
  -[MPRadioLibrary _radioModelDidChangeNotification:]
  -[MPRadioLibrary stationWithIdentifier:]
  -[MPRadioLibrary addStationBasedOnTrackIDs:completion:]
  -[MPRadioLibrary init]
  -[MPRadioLibrary isEnabled]
  -[MPRadioLibrary getRecentStationGroupsWithCompletionHandler:]
  -[MPRadioLibrary dealloc]
  -[MPRadioLibrary stationCount]


MPHomeSharingArtworkDataSource : MPAbstractNetworkArtworkDataSource <MPArtworkDataSourceIdentifiable>
 @property  HSHomeSharingLibrary *library
 @property  NSString *artworkDataSourceIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPHomeSharingArtworkDataSource artworkDataSourceShortDescription]
  +[MPHomeSharingArtworkDataSource artworkDataSourceWithIdentifier:]

  // instance methods
  -[MPHomeSharingArtworkDataSource library]
  -[MPHomeSharingArtworkDataSource setLibrary:]
  -[MPHomeSharingArtworkDataSource .cxx_destruct]
  -[MPHomeSharingArtworkDataSource cacheKeyForCatalog:size:]
  -[MPHomeSharingArtworkDataSource shouldLookForLargerImageRepresentationsWhenBestRepresentationIsUnavailable]
  -[MPHomeSharingArtworkDataSource requestForCatalog:size:]
  -[MPHomeSharingArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPHomeSharingArtworkDataSource supportedSizesForCatalog:]
  -[MPHomeSharingArtworkDataSource artworkDataSourceIdentifier]
  -[MPHomeSharingArtworkDataSource loadRepresentationForArtworkCatalog:completionHandler:]


_MPHomeSharingArtworkCacheKey : NSObject
 @property  unsigned long persistentID
 @property  {CGSize=dd} size

  // instance methods
  -[_MPHomeSharingArtworkCacheKey persistentID]
  -[_MPHomeSharingArtworkCacheKey initWithPersistentID:size:]
  -[_MPHomeSharingArtworkCacheKey isEqual:]
  -[_MPHomeSharingArtworkCacheKey size]


MPNowPlayingInfoLanguageOption : NSObject
 @property  ^v mrLanguageOption
 @property  unsigned long languageOptionType
 @property  NSString *languageTag
 @property  NSArray *languageOptionCharacteristics
 @property  NSString *displayName
 @property  NSString *identifier

  // instance methods
  -[MPNowPlayingInfoLanguageOption displayName]
  -[MPNowPlayingInfoLanguageOption initWithType:languageTag:characteristics:displayName:identifier:]
  -[MPNowPlayingInfoLanguageOption languageTag]
  -[MPNowPlayingInfoLanguageOption mrLanguageOption]
  -[MPNowPlayingInfoLanguageOption isAutomaticLegibleLanguageOption]
  -[MPNowPlayingInfoLanguageOption isAutomaticAudibleLanguageOption]
  -[MPNowPlayingInfoLanguageOption languageOptionType]
  -[MPNowPlayingInfoLanguageOption languageOptionCharacteristics]
  -[MPNowPlayingInfoLanguageOption copyExternalRepresentation]
  -[MPNowPlayingInfoLanguageOption isEqualToLanguageOption:]
  -[MPNowPlayingInfoLanguageOption identifier]
  -[MPNowPlayingInfoLanguageOption dealloc]
  -[MPNowPlayingInfoLanguageOption initWithMRLanguageOption:]


MPNowPlayingInfoLanguageOptionGroup : NSObject
 @property  ^v mrLanguageOptionGroup
 @property  NSArray *languageOptions
 @property  MPNowPlayingInfoLanguageOption *defaultLanguageOption
 @property  BOOL allowEmptySelection

  // instance methods
  -[MPNowPlayingInfoLanguageOptionGroup initWithLanguageOptions:defaultLanguageOption:allowEmptySelection:]
  -[MPNowPlayingInfoLanguageOptionGroup initWithMRLanguageOptionGroup:]
  -[MPNowPlayingInfoLanguageOptionGroup mrLanguageOptionGroup]
  -[MPNowPlayingInfoLanguageOptionGroup defaultLanguageOption]
  -[MPNowPlayingInfoLanguageOptionGroup allowEmptySelection]
  -[MPNowPlayingInfoLanguageOptionGroup dealloc]
  -[MPNowPlayingInfoLanguageOptionGroup languageOptions]


MPRadioStation : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *stationStringID
 @property  long long uniqueIdentifier
 @property  NSString *localizedName
 @property  NSString *localizedDescription

  // class methods
  +[MPRadioStation supportsSecureCoding]

  // instance methods
  -[MPRadioStation setLocalizedDescription:]
  -[MPRadioStation localizedName]
  -[MPRadioStation setUniqueIdentifier:]
  -[MPRadioStation localizedDescription]
  -[MPRadioStation uniqueIdentifier]
  -[MPRadioStation initWithCoder:]
  -[MPRadioStation setLocalizedName:]
  -[MPRadioStation .cxx_destruct]
  -[MPRadioStation initWithPlayParameters:]
  -[MPRadioStation initWithModelStation:]
  -[MPRadioStation isEqual:]
  -[MPRadioStation stationStringID]
  -[MPRadioStation initWithStation:]
  -[MPRadioStation setStationStringID:]
  -[MPRadioStation copyWithZone:]
  -[MPRadioStation encodeWithCoder:]


_MPActiveUserChangeMonitor : NSObject
 @property  NSSet *expectedNotifications
 @property  NSMutableSet *receivedNotifications
 @property  NSObject<OS_dispatch_source> *notificationTimer
 @property  {os_unfair_lock_s=I} stateLock
 @property  <_MPActiveUserChangeMonitorDelegate> *delegate

  // instance methods
  -[_MPActiveUserChangeMonitor .cxx_destruct]
  -[_MPActiveUserChangeMonitor ingestNotificationName:]
  -[_MPActiveUserChangeMonitor setDelegate:]
  -[_MPActiveUserChangeMonitor expectedNotifications]
  -[_MPActiveUserChangeMonitor receivedNotifications]
  -[_MPActiveUserChangeMonitor _cancelNotificationTimerWithReason:]
  -[_MPActiveUserChangeMonitor notificationTimer]
  -[_MPActiveUserChangeMonitor _startNotificationTimerWithEventHandler:]
  -[_MPActiveUserChangeMonitor setNotificationTimer:]
  -[_MPActiveUserChangeMonitor setReceivedNotifications:]
  -[_MPActiveUserChangeMonitor stateLock]
  -[_MPActiveUserChangeMonitor initWithDelegate:]
  -[_MPActiveUserChangeMonitor delegate]


MPRemoteCommand : NSObject <NSObject>
 @property  <MPRemoteCommandDelegate_Internal> *commandCenterDelegate
 @property  BOOL observing
 @property  BOOL hasTargets
 @property  BOOL supported
 @property  BOOL supportedAndEnabled
 @property  long long disabledReason
 @property  double timeout
 @property  unsigned int mediaRemoteCommandType
 @property  <MPRemoteCommandDelegate_Private> *delegate
 @property  BOOL skipSerializedEventDelivery
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPRemoteCommand removeTarget:action:]
  -[MPRemoteCommand disabledReason]
  -[MPRemoteCommand _mediaRemoteCommandInfoOptions]
  -[MPRemoteCommand addTarget:action:]
  -[MPRemoteCommand .cxx_destruct]
  -[MPRemoteCommand isSupported]
  -[MPRemoteCommand isObserving]
  -[MPRemoteCommand setDelegate:]
  -[MPRemoteCommand removeTarget:]
  -[MPRemoteCommand notifyPropagatablePropertyChanged]
  -[MPRemoteCommand addTarget:action:usingExtendedStatus:]
  -[MPRemoteCommand _mediaRemoteCommandInfo]
  -[MPRemoteCommand isSupportedForContentItemIdentifier:]
  -[MPRemoteCommand addTargetWithHandler:]
  -[MPRemoteCommand isEnabledForContentItemIdentifier:]
  -[MPRemoteCommand newCommandEvent]
  -[MPRemoteCommand newCommandEventWithContentItemIdentifier:]
  -[MPRemoteCommand isSupportedAndEnabled]
  -[MPRemoteCommand newCommandEventWithPlaybackQueueOffset:]
  -[MPRemoteCommand newSeekCommandEventWithType:]
  -[MPRemoteCommand setSkipSerializedEventDelivery:]
  -[MPRemoteCommand setTimeout:]
  -[MPRemoteCommand _stateDumpObject]
  -[MPRemoteCommand setObserving:]
  -[MPRemoteCommand timeout]
  -[MPRemoteCommand isEnabled]
  -[MPRemoteCommand setDisabledReason:]
  -[MPRemoteCommand delegate]
  -[MPRemoteCommand initWithMediaRemoteCommandType:]
  -[MPRemoteCommand hasTargets]
  -[MPRemoteCommand setEnabled:]
  -[MPRemoteCommand mediaRemoteCommandType]
  -[MPRemoteCommand commandInfoRepresentations]
  -[MPRemoteCommand invokeCommandWithEvent:completion:]
  -[MPRemoteCommand newCommandEventWithCommandType:options:]
  -[MPRemoteCommand skipSerializedEventDelivery]
  -[MPRemoteCommand setCommandCenterDelegate:]
  -[MPRemoteCommand commandCenterDelegate]


MPSkipIntervalCommand : MPRemoteCommand
 @property  NSArray *preferredIntervals

  // instance methods
  -[MPSkipIntervalCommand _mediaRemoteCommandInfoOptions]
  -[MPSkipIntervalCommand .cxx_destruct]
  -[MPSkipIntervalCommand preferredIntervals]
  -[MPSkipIntervalCommand setPreferredIntervals:]
  -[MPSkipIntervalCommand initWithMediaRemoteCommandType:]
  -[MPSkipIntervalCommand newCommandEventWithInterval:]


MPFeedbackCommand : MPRemoteCommand
 @property  BOOL active
 @property  NSString *localizedTitle
 @property  NSString *localizedShortTitle

  // instance methods
  -[MPFeedbackCommand localizedTitle]
  -[MPFeedbackCommand _mediaRemoteCommandInfoOptions]
  -[MPFeedbackCommand presentationStyle]
  -[MPFeedbackCommand localizedShortTitle]
  -[MPFeedbackCommand isActive]
  -[MPFeedbackCommand setPresentationStyle:]
  -[MPFeedbackCommand .cxx_destruct]
  -[MPFeedbackCommand newCommandEventWithState:]
  -[MPFeedbackCommand setLocalizedTitle:]
  -[MPFeedbackCommand setActive:]
  -[MPFeedbackCommand setLocalizedShortTitle:]


MPRatingCommand : MPRemoteCommand
 @property  float minimumRating
 @property  float maximumRating

  // instance methods
  -[MPRatingCommand _mediaRemoteCommandInfoOptions]
  -[MPRatingCommand newCommandEventWithRating:]
  -[MPRatingCommand maximumRating]
  -[MPRatingCommand setMaximumRating:]
  -[MPRatingCommand setMinimumRating:]
  -[MPRatingCommand minimumRating]


MPChangePlaybackRateCommand : MPRemoteCommand
 @property  NSArray *supportedPlaybackRates

  // instance methods
  -[MPChangePlaybackRateCommand setPreferredRate:]
  -[MPChangePlaybackRateCommand _mediaRemoteCommandInfoOptions]
  -[MPChangePlaybackRateCommand newCommandEventWithPlaybackRate:]
  -[MPChangePlaybackRateCommand .cxx_destruct]
  -[MPChangePlaybackRateCommand setSupportedPlaybackRates:]
  -[MPChangePlaybackRateCommand preferredRate]
  -[MPChangePlaybackRateCommand supportedPlaybackRates]


MPChangeRepeatModeCommand : MPRemoteCommand
 @property  long long currentRepeatType

  // instance methods
  -[MPChangeRepeatModeCommand _mediaRemoteCommandInfoOptions]
  -[MPChangeRepeatModeCommand newCommandEventWithType:preservesRepeatMode:]
  -[MPChangeRepeatModeCommand .cxx_destruct]
  -[MPChangeRepeatModeCommand setCurrentRepeatType:]
  -[MPChangeRepeatModeCommand setSupportedRepeatTypes:]
  -[MPChangeRepeatModeCommand newCommandEventWithType:]
  -[MPChangeRepeatModeCommand currentRepeatType]


MPChangeShuffleModeCommand : MPRemoteCommand
 @property  long long currentShuffleType

  // instance methods
  -[MPChangeShuffleModeCommand _mediaRemoteCommandInfoOptions]
  -[MPChangeShuffleModeCommand .cxx_destruct]
  -[MPChangeShuffleModeCommand newCommandEventWithType:preservesShuffleMode:]
  -[MPChangeShuffleModeCommand setCurrentShuffleType:]
  -[MPChangeShuffleModeCommand setSupportedShuffleTypes:]
  -[MPChangeShuffleModeCommand currentShuffleType]
  -[MPChangeShuffleModeCommand newCommandEventWithType:]


MPSkipTrackCommand : MPRemoteCommand

MPSetPlaybackQueueCommand : MPRemoteCommand
 @property  long long upNextItemCount

  // instance methods
  -[MPSetPlaybackQueueCommand upNextItemCount]
  -[MPSetPlaybackQueueCommand unregisterSpecializedQueueIdentifier:]
  -[MPSetPlaybackQueueCommand _mediaRemoteCommandInfoOptions]
  -[MPSetPlaybackQueueCommand unregisterSupportedCustomQueueIdentifier:]
  -[MPSetPlaybackQueueCommand unregisterSupportedQueueType:]
  -[MPSetPlaybackQueueCommand .cxx_destruct]
  -[MPSetPlaybackQueueCommand setUpNextItemCount:]
  -[MPSetPlaybackQueueCommand setSupportedSharedQueue:]
  -[MPSetPlaybackQueueCommand registerSpecializedQueueIdentifier:localizedName:queueType:queueParameters:]
  -[MPSetPlaybackQueueCommand initWithMediaRemoteCommandType:]
  -[MPSetPlaybackQueueCommand registerSupportedCustomQueueIdentifier:]
  -[MPSetPlaybackQueueCommand registerSupportedQueueType:]


MPChangePlaybackPositionCommand : MPRemoteCommand
 @property  BOOL canBeControlledByScrubbing

  // instance methods
  -[MPChangePlaybackPositionCommand _mediaRemoteCommandInfoOptions]
  -[MPChangePlaybackPositionCommand setCanBeControlledByScrubbing:]
  -[MPChangePlaybackPositionCommand newCommandEventWithPositionTime:]
  -[MPChangePlaybackPositionCommand initWithMediaRemoteCommandType:]
  -[MPChangePlaybackPositionCommand canBeControlledByScrubbing]


MPReorderQueueCommand : MPRemoteCommand
  // instance methods
  -[MPReorderQueueCommand newCommandEventWithInsertingContentItemID:afterContentItemID:]


MPInsertIntoPlaybackQueueCommand : MPRemoteCommand
 @property  NSArray *supportedInsertionPositions

  // instance methods
  -[MPInsertIntoPlaybackQueueCommand _mediaRemoteCommandInfoOptions]
  -[MPInsertIntoPlaybackQueueCommand unregisterSupportedCustomQueueIdentifier:]
  -[MPInsertIntoPlaybackQueueCommand setSupportedInsertionPositions:]
  -[MPInsertIntoPlaybackQueueCommand unregisterSupportedQueueType:]
  -[MPInsertIntoPlaybackQueueCommand .cxx_destruct]
  -[MPInsertIntoPlaybackQueueCommand supportedInsertionPositions]
  -[MPInsertIntoPlaybackQueueCommand setSupportedSharedQueue:]
  -[MPInsertIntoPlaybackQueueCommand initWithMediaRemoteCommandType:]
  -[MPInsertIntoPlaybackQueueCommand registerSupportedCustomQueueIdentifier:]
  -[MPInsertIntoPlaybackQueueCommand registerSupportedQueueType:]


MPAdvanceShuffleModeCommand : MPChangeShuffleModeCommand
  // instance methods
  -[MPAdvanceShuffleModeCommand newCommandEventWithPreservesShuffleMode:]


MPAdvanceRepeatModeCommand : MPChangeRepeatModeCommand
  // instance methods
  -[MPAdvanceRepeatModeCommand newCommandEventWithPreservesRepeatMode:]


MPSetPlaybackSessionCommand : MPRemoteCommand
 @property  NSString *currentPlaybackSessionIdentifier
 @property  NSString *currentPlaybackSessionRevision
 @property  NSArray *exportableSessionTypes
 @property  NSArray *supportedSessionTypes

  // instance methods
  -[MPSetPlaybackSessionCommand _mediaRemoteCommandInfoOptions]
  -[MPSetPlaybackSessionCommand setCurrentPlaybackSessionIdentifier:]
  -[MPSetPlaybackSessionCommand currentPlaybackSessionRevision]
  -[MPSetPlaybackSessionCommand setCurrentPlaybackSessionRevision:]
  -[MPSetPlaybackSessionCommand .cxx_destruct]
  -[MPSetPlaybackSessionCommand setSupportedSessionTypes:]
  -[MPSetPlaybackSessionCommand exportableSessionTypes]
  -[MPSetPlaybackSessionCommand supportedSessionTypes]
  -[MPSetPlaybackSessionCommand currentPlaybackSessionIdentifier]
  -[MPSetPlaybackSessionCommand setExportableSessionTypes:]


MPPreloadPlaybackSessionCommand : MPRemoteCommand
 @property  NSArray *supportedSessionTypes

  // instance methods
  -[MPPreloadPlaybackSessionCommand _mediaRemoteCommandInfoOptions]
  -[MPPreloadPlaybackSessionCommand .cxx_destruct]
  -[MPPreloadPlaybackSessionCommand setSupportedSessionTypes:]
  -[MPPreloadPlaybackSessionCommand supportedSessionTypes]


MPPlaybackSessionCommandInfo : NSObject
 @property  NSString *identifier
 @property  NSString *revision
 @property  long long priority

  // class methods
  +[MPPlaybackSessionCommandInfo commandInfoWithIdentifier:revision:priority:]

  // instance methods
  -[MPPlaybackSessionCommandInfo .cxx_destruct]
  -[MPPlaybackSessionCommandInfo isEqual:]
  -[MPPlaybackSessionCommandInfo identifier]
  -[MPPlaybackSessionCommandInfo priority]
  -[MPPlaybackSessionCommandInfo revision]


MPSetPriorityForPlaybackSessionCommand : MPRemoteCommand
 @property  NSArray *preloadedSessions

  // instance methods
  -[MPSetPriorityForPlaybackSessionCommand _mediaRemoteCommandInfoOptions]
  -[MPSetPriorityForPlaybackSessionCommand .cxx_destruct]
  -[MPSetPriorityForPlaybackSessionCommand preloadedSessions]
  -[MPSetPriorityForPlaybackSessionCommand setPreloadedSessions:]


MPChangeQueueEndActionCommand : MPRemoteCommand
 @property  long long currentQueueEndAction
 @property  NSArray *supportedQueueEndActions

  // instance methods
  -[MPChangeQueueEndActionCommand _mediaRemoteCommandInfoOptions]
  -[MPChangeQueueEndActionCommand currentQueueEndAction]
  -[MPChangeQueueEndActionCommand .cxx_destruct]
  -[MPChangeQueueEndActionCommand supportedQueueEndActions]
  -[MPChangeQueueEndActionCommand setSupportedQueueEndActions:]
  -[MPChangeQueueEndActionCommand setCurrentQueueEndAction:]


MPModelForYouRecommendationGroupKind : MPModelKind
  // class methods
  +[MPModelForYouRecommendationGroupKind identityKind]

  // instance methods
  -[MPModelForYouRecommendationGroupKind humanDescription]


MPModelForYouRecommendationGroup : MPModelObject
 @property  unsigned long groupType
 @property  NSDate *lastUpdatedDate
 @property  NSString *title
 @property  MPSectionedCollection *sectionedItems
 @property  long long sectionIndex
 @property  NSArray *subgroups
 @property  NSURL *loadAdditionalContentURL
 @property  NSURL *hrefURL
 @property  NSURL *refreshURL
 @property  BOOL groupRecommendation
 @property  unsigned long traits
 @property  BOOL displaysAsGridCellInCarPlay
 @property  BOOL displaysAsTitledSectionWithRowsInCarPlay

  // class methods
  +[MPModelForYouRecommendationGroup __hrefURL_KEY]
  +[MPModelForYouRecommendationGroup __groupType_KEY]
  +[MPModelForYouRecommendationGroup __lastUpdatedDate_KEY]
  +[MPModelForYouRecommendationGroup __sectionedItems_KEY]
  +[MPModelForYouRecommendationGroup __sectionIndex_KEY]
  +[MPModelForYouRecommendationGroup __subgroups_KEY]
  +[MPModelForYouRecommendationGroup __loadAdditionalContentURL_KEY]
  +[MPModelForYouRecommendationGroup __refreshURL_KEY]
  +[MPModelForYouRecommendationGroup __displaysAsGridCellInCarPlay_KEY]
  +[MPModelForYouRecommendationGroup __displaysAsTitledSectionWithRowsInCarPlay_KEY]
  +[MPModelForYouRecommendationGroup classesForSecureCoding]
  +[MPModelForYouRecommendationGroup __title_KEY]
  +[MPModelForYouRecommendationGroup __traits_KEY]

  // instance methods
  -[MPModelForYouRecommendationGroup itemAtIndex:]
  -[MPModelForYouRecommendationGroup .cxx_destruct]
  -[MPModelForYouRecommendationGroup refreshURL]
  -[MPModelForYouRecommendationGroup isGroupRecommendation]
  -[MPModelForYouRecommendationGroup setRefreshURL:]
  -[MPModelForYouRecommendationGroup numberOfItems]
  -[MPModelForYouRecommendationGroup setGroupRecommendation:]


MPModelPlaylistEntryKind : MPModelKind
 @property  NSArray *kinds

  // class methods
  +[MPModelPlaylistEntryKind supportsSecureCoding]
  +[MPModelPlaylistEntryKind identityKind]
  +[MPModelPlaylistEntryKind kindWithKinds:]

  // instance methods
  -[MPModelPlaylistEntryKind initWithCoder:]
  -[MPModelPlaylistEntryKind .cxx_destruct]
  -[MPModelPlaylistEntryKind humanDescription]
  -[MPModelPlaylistEntryKind applyToView:withContext:]
  -[MPModelPlaylistEntryKind isEqual:]
  -[MPModelPlaylistEntryKind kinds]
  -[MPModelPlaylistEntryKind encodeWithCoder:]


MPModelPlaylistEntry : MPModelObject
 @property  MPModelPlaylist *playlist
 @property  long long position
 @property  MPModelSong *song
 @property  MPModelTVEpisode *tvEpisode
 @property  MPModelMovie *movie
 @property  MPModelSocialPerson *socialContributor
 @property  MPArtworkCatalog *_artworkCatalog

  // class methods
  +[MPModelPlaylistEntry genericObjectType]
  +[MPModelPlaylistEntry __tvEpisode_KEY]
  +[MPModelPlaylistEntry __position_KEY]
  +[MPModelPlaylistEntry ___artworkCatalog_KEY]
  +[MPModelPlaylistEntry __socialContributor_KEY]
  +[MPModelPlaylistEntry __song_KEY]
  +[MPModelPlaylistEntry supportsKeepLocalStatusObservation]
  +[MPModelPlaylistEntry requiredKeepLocalStatusObservationProperties]
  +[MPModelPlaylistEntry __playlist_KEY]
  +[MPModelPlaylistEntry __movie_KEY]
  +[MPModelPlaylistEntry supportsLibraryAddStatusObservation]
  +[MPModelPlaylistEntry requiredLibraryAddStatusObservationProperties]
  +[MPModelPlaylistEntry requiredLibraryRemovalProperties]
  +[MPModelPlaylistEntry supportsLibraryRemoval]
  +[MPModelPlaylistEntry requiredStoreLibraryPersonalizationProperties]
  +[MPModelPlaylistEntry kindWithKinds:]

  // instance methods
  -[MPModelPlaylistEntry anyObject]
  -[MPModelPlaylistEntry humanDescription]
  -[MPModelPlaylistEntry mediaItemPropertyValues]
  -[MPModelPlaylistEntry relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelPlaylistEntry personalizationScopedPropertiesForProperties:]
  -[MPModelPlaylistEntry objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelPlaylistEntry type]
  -[MPModelPlaylistEntry libraryAddStatusObserverConfiguration]
  -[MPModelPlaylistEntry libraryRemovalSupportedOptions]
  -[MPModelPlaylistEntry newKeepLocalStatusObserverConfiguration]


MPRemoteCommandStatus : NSObject <NSCopying>
 @property  MRSendCommandResultStatus *mediaRemoteType
 @property  long long statusCode
 @property  long long type
 @property  MPRemoteCommandHandlerDialog *dialog
 @property  NSError *error
 @property  NSData *customData
 @property  NSString *customDataType

  // class methods
  +[MPRemoteCommandStatus successStatus]
  +[MPRemoteCommandStatus statusWithCode:]
  +[MPRemoteCommandStatus statusWithCode:error:]
  +[MPRemoteCommandStatus statusWithCode:dialog:]
  +[MPRemoteCommandStatus statusWithCode:customData:type:]
  +[MPRemoteCommandStatus cacheStatus:forCommandID:]
  +[MPRemoteCommandStatus fetchStatusForCommandID:]

  // instance methods
  -[MPRemoteCommandStatus dialog]
  -[MPRemoteCommandStatus .cxx_destruct]
  -[MPRemoteCommandStatus customData]
  -[MPRemoteCommandStatus customDataType]
  -[MPRemoteCommandStatus analyticSignature]
  -[MPRemoteCommandStatus type]
  -[MPRemoteCommandStatus statusCode]
  -[MPRemoteCommandStatus copyWithZone:]
  -[MPRemoteCommandStatus mediaRemoteType]
  -[MPRemoteCommandStatus initWithMediaRemoteType:]
  -[MPRemoteCommandStatus error]


MPModelStoreBrowseResponseParser : NSObject
 @property  id rawResponseOutput
 @property  {?=BB} options
 @property  MPModelStoreBrowseResponseParser *previousParser
 @property  MPStoreItemMetadataResponse *additionalStoreItemMetadataResponse
 @property  MPModelStoreBrowseSectionBuilder *sectionBuilder
 @property  MPModelStoreBrowseContentItemBuilder *contentItemBuilder
 @property  MPSectionedCollection *results
 @property  MPChangeDetails *changeDetails
 @property  MPSectionedCollection *additionalContentIdentifiers
 @property  NSArray *allAdditionalContentIdentifiersNeedingLookup

  // instance methods
  -[MPModelStoreBrowseResponseParser _parse]
  -[MPModelStoreBrowseResponseParser initWithPreviousParser:additionalStoreItemMetadataResponse:options:sectionBuilder:contentItemBuilder:userIdentity:]
  -[MPModelStoreBrowseResponseParser _parseFeaturedContentChild:isMemberOfChartSet:insertingResultsToSectionedCollection:atSectionIndex:additionalContentIdentifiers:allAdditionalContentIdentifiersNeedingLookup:]
  -[MPModelStoreBrowseResponseParser options]
  -[MPModelStoreBrowseResponseParser results]
  -[MPModelStoreBrowseResponseParser .cxx_destruct]
  -[MPModelStoreBrowseResponseParser additionalContentIdentifiers]
  -[MPModelStoreBrowseResponseParser previousParser]
  -[MPModelStoreBrowseResponseParser _populateStorePlatformDataResultsFromRawResponseOutputDictionary:]
  -[MPModelStoreBrowseResponseParser _storeItemMetadataForContentIdentifier:]
  -[MPModelStoreBrowseResponseParser _parseUsingAdditionalContentIdentifiersFromPreviousParser]
  -[MPModelStoreBrowseResponseParser _parseFeaturedContentStructureModelChildren:]
  -[MPModelStoreBrowseResponseParser _populateUnavailableContentIdentifiersFromPageDataDictionary:]
  -[MPModelStoreBrowseResponseParser additionalStoreItemMetadataResponse]
  -[MPModelStoreBrowseResponseParser _parseSingleContentListFromPageDataDictionary:isMemberOfChartSet:]
  -[MPModelStoreBrowseResponseParser rawResponseOutput]
  -[MPModelStoreBrowseResponseParser contentItemBuilder]
  -[MPModelStoreBrowseResponseParser _storeItemMetadataIsAvailableForContentIdentifier:]
  -[MPModelStoreBrowseResponseParser changeDetails]
  -[MPModelStoreBrowseResponseParser sectionBuilder]
  -[MPModelStoreBrowseResponseParser initWithRawResponseOutput:options:sectionBuilder:contentItemBuilder:userIdentity:]
  -[MPModelStoreBrowseResponseParser allAdditionalContentIdentifiersNeedingLookup]


MPStoreItemMetadataCacheKey : NSObject <NSCopying>
 @property  NSNumber *accountIdentifier
 @property  NSNumber *enqueuerAccountIdentifier
 @property  BOOL personalized
 @property  NSString *storefrontIdentifier

  // class methods
  +[MPStoreItemMetadataCacheKey _fastGetCacheKeyWithRequest:completionHandler:]
  +[MPStoreItemMetadataCacheKey _slowGetCacheKeyWithRequest:completionHandler:]
  +[MPStoreItemMetadataCacheKey getCacheKeyWithRequest:completionHandler:]

  // instance methods
  -[MPStoreItemMetadataCacheKey setPersonalized:]
  -[MPStoreItemMetadataCacheKey initWithRequest:response:]
  -[MPStoreItemMetadataCacheKey .cxx_destruct]
  -[MPStoreItemMetadataCacheKey enqueuerAccountIdentifier]
  -[MPStoreItemMetadataCacheKey isEqual:]
  -[MPStoreItemMetadataCacheKey _isGoodCacheKey]
  -[MPStoreItemMetadataCacheKey isPersonalized]
  -[MPStoreItemMetadataCacheKey accountIdentifier]
  -[MPStoreItemMetadataCacheKey setEnqueuerAccountIdentifier:]
  -[MPStoreItemMetadataCacheKey setAccountIdentifier:]
  -[MPStoreItemMetadataCacheKey storefrontIdentifier]
  -[MPStoreItemMetadataCacheKey copyWithZone:]
  -[MPStoreItemMetadataCacheKey setStorefrontIdentifier:]


MPPPropertyPredicate : PBCodable <NSCopying>
 @property  BOOL hasProperty
 @property  NSString *property
 @property  BOOL hasValue
 @property  MPPMediaPredicateValue *value
 @property  BOOL hasComparisonType
 @property  int comparisonType

  // instance methods
  -[MPPPropertyPredicate property]
  -[MPPPropertyPredicate hasValue]
  -[MPPPropertyPredicate .cxx_destruct]
  -[MPPPropertyPredicate dictionaryRepresentation]
  -[MPPPropertyPredicate writeTo:]
  -[MPPPropertyPredicate setComparisonType:]
  -[MPPPropertyPredicate isEqual:]
  -[MPPPropertyPredicate copyTo:]
  -[MPPPropertyPredicate readFrom:]
  -[MPPPropertyPredicate setValue:]
  -[MPPPropertyPredicate setProperty:]
  -[MPPPropertyPredicate value]
  -[MPPPropertyPredicate hasComparisonType]
  -[MPPPropertyPredicate setHasComparisonType:]
  -[MPPPropertyPredicate dealloc]
  -[MPPPropertyPredicate copyWithZone:]
  -[MPPPropertyPredicate hasProperty]
  -[MPPPropertyPredicate comparisonType]


MPModelStoreBrowseSection : MPModelObject
 @property  NSString *title
 @property  long long sectionType
 @property  NSURL *loadAdditionalContentURL
 @property  BOOL displaysAsGridCellInCarPlay
 @property  long long uniformContentItemType
 @property  BOOL memberOfChartSet
 @property  BOOL brick
 @property  MPModelStoreBrowseResponse *previouslyRetrievedNestedResponse
 @property  MPModelRadioStation *radioStation
 @property  BOOL containsOnlyEditorialElements

  // class methods
  +[MPModelStoreBrowseSection __radioStation_KEY]
  +[MPModelStoreBrowseSection __loadAdditionalContentURL_KEY]
  +[MPModelStoreBrowseSection __displaysAsGridCellInCarPlay_KEY]
  +[MPModelStoreBrowseSection __sectionType_KEY]
  +[MPModelStoreBrowseSection __uniformContentItemType_KEY]
  +[MPModelStoreBrowseSection __memberOfChartSet_KEY]
  +[MPModelStoreBrowseSection __previouslyRetrievedNestedResponse_KEY]
  +[MPModelStoreBrowseSection __title_KEY]
  +[MPModelStoreBrowseSection __brick_KEY]

  // instance methods
  -[MPModelStoreBrowseSection containsOnlyEditorialElements]
  -[MPModelStoreBrowseSection setContainsOnlyEditorialElements:]


MPPropertySet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, NSObject>
 @property  NSSet *properties
 @property  NSDictionary *relationships
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPPropertySet propertySetWithProperties:]
  +[MPPropertySet supportsSecureCoding]
  +[MPPropertySet emptyPropertySet]

  // instance methods
  -[MPPropertySet initWithCoder:]
  -[MPPropertySet isEmpty]
  -[MPPropertySet initWithProperties:relationships:]
  -[MPPropertySet relationships]
  -[MPPropertySet .cxx_destruct]
  -[MPPropertySet properties]
  -[MPPropertySet propertySetByCombiningWithPropertySet:]
  -[MPPropertySet _stateDumpObject]
  -[MPPropertySet containsPropertySet:]
  -[MPPropertySet mutableCopyWithZone:]
  -[MPPropertySet propertySetByIntersectingWithPropertySet:]
  -[MPPropertySet copyWithZone:]
  -[MPPropertySet encodeWithCoder:]


MPMutablePropertySet : MPPropertySet
  // class methods
  +[MPMutablePropertySet new]

  // instance methods
  -[MPMutablePropertySet initWithProperties:relationships:]
  -[MPMutablePropertySet addRelationship:properties:]
  -[MPMutablePropertySet removeRelationship:]
  -[MPMutablePropertySet init]
  -[MPMutablePropertySet removeProperty:]
  -[MPMutablePropertySet copyWithZone:]
  -[MPMutablePropertySet addProperty:]


MPStoreItemMetadataResponse : NSObject <NSCopying>
 @property  BOOL finalResponse
 @property  NSArray *cacheMissItemIdentifiers
 @property  NSArray *requestItemIdentifiers
 @property  NSArray *lastBatchItemIdentifiers
 @property  NSArray *allStoreItemDictionaries
 @property  NSArray *performanceMetrics
 @property  NSArray *itemIdentifiers
 @property  NSDate *earliestExpirationDate
 @property  BOOL expired

  // instance methods
  -[MPStoreItemMetadataResponse earliestExpirationDate]
  -[MPStoreItemMetadataResponse itemIdentifiers]
  -[MPStoreItemMetadataResponse .cxx_destruct]
  -[MPStoreItemMetadataResponse isExpired]
  -[MPStoreItemMetadataResponse storeItemMetadataForItemIdentifier:returningIsFinalMetadata:]
  -[MPStoreItemMetadataResponse setPerformanceMetrics:]
  -[MPStoreItemMetadataResponse allStoreItemDictionaries]
  -[MPStoreItemMetadataResponse init]
  -[MPStoreItemMetadataResponse setRequestItemIdentifiers:]
  -[MPStoreItemMetadataResponse lastBatchItemIdentifiers]
  -[MPStoreItemMetadataResponse cacheMissItemIdentifiers]
  -[MPStoreItemMetadataResponse performanceMetrics]
  -[MPStoreItemMetadataResponse isFinalResponse]
  -[MPStoreItemMetadataResponse setLastBatchItemIdentifiers:]
  -[MPStoreItemMetadataResponse requestItemIdentifiers]
  -[MPStoreItemMetadataResponse setStoreItemMetadata:forItemIdentifier:]
  -[MPStoreItemMetadataResponse setFinalResponse:]
  -[MPStoreItemMetadataResponse copyWithZone:]
  -[MPStoreItemMetadataResponse storeItemMetadataForItemIdentifier:]
  -[MPStoreItemMetadataResponse setCacheMissItemIdentifiers:]


MPModelTVSeasonKind : MPModelKind
 @property  MPModelTVEpisodeKind *episodeKind

  // class methods
  +[MPModelTVSeasonKind supportsSecureCoding]
  +[MPModelTVSeasonKind identityKind]
  +[MPModelTVSeasonKind kindWithEpisodeKind:]

  // instance methods
  -[MPModelTVSeasonKind initWithCoder:]
  -[MPModelTVSeasonKind .cxx_destruct]
  -[MPModelTVSeasonKind humanDescription]
  -[MPModelTVSeasonKind applyToView:withContext:]
  -[MPModelTVSeasonKind isEqual:]
  -[MPModelTVSeasonKind episodeKind]
  -[MPModelTVSeasonKind encodeWithCoder:]


MPModelTVSeason : MPModelObject
 @property  long long number
 @property  NSString *descriptionText
 @property  long long year
 @property  long long episodesCount
 @property  BOOL hasCleanContent
 @property  BOOL hasExplicitContent
 @property  NSDate *libraryAddedDate
 @property  BOOL libraryAdded
 @property  BOOL libraryAddEligible
 @property  long long sortType
 @property  MPModelTVShow *show
 @property  MPModelTVEpisode *representativeEpisode
 @property  @? artworkCatalogBlock
 @property  NSDate *downloadedDate

  // class methods
  +[MPModelTVSeason __show_KEY]
  +[MPModelTVSeason __artworkCatalogBlock_KEY]
  +[MPModelTVSeason genericObjectType]
  +[MPModelTVSeason __descriptionText_KEY]
  +[MPModelTVSeason __hasCleanContent_KEY]
  +[MPModelTVSeason __episodesCount_KEY]
  +[MPModelTVSeason __number_KEY]
  +[MPModelTVSeason __sortType_KEY]
  +[MPModelTVSeason __representativeEpisode_KEY]
  +[MPModelTVSeason __hasExplicitContent_KEY]
  +[MPModelTVSeason __libraryAdded_KEY]
  +[MPModelTVSeason __libraryAddedDate_KEY]
  +[MPModelTVSeason __libraryAddEligible_KEY]
  +[MPModelTVSeason __downloadedDate_KEY]
  +[MPModelTVSeason supportsLibraryAddStatusObservation]
  +[MPModelTVSeason requiredLibraryAddStatusObservationProperties]
  +[MPModelTVSeason __year_KEY]
  +[MPModelTVSeason kindWithEpisodeKind:]

  // instance methods
  -[MPModelTVSeason humanDescription]
  -[MPModelTVSeason artworkCatalog]
  -[MPModelTVSeason libraryAddStatusObserverConfiguration]


MPAVRoutingSheet : UIView <MPAVRoutingViewControllerDelegate>
 @property  long long avItemType
 @property  BOOL mirroringOnly
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVRoutingSheet initWithAVItemType:]
  -[MPAVRoutingSheet showInView:withCompletionHandler:]
  -[MPAVRoutingSheet .cxx_destruct]
  -[MPAVRoutingSheet layoutSubviews]
  -[MPAVRoutingSheet tintColorDidChange]
  -[MPAVRoutingSheet avItemType]
  -[MPAVRoutingSheet _cancelButtonAction:]
  -[MPAVRoutingSheet _routingViewFrame]
  -[MPAVRoutingSheet _updateDismissButtonText]
  -[MPAVRoutingSheet _cancelButtonFrame]
  -[MPAVRoutingSheet _controlsViewFrame]
  -[MPAVRoutingSheet _updateRoutingSheetFrame]
  -[MPAVRoutingSheet _animateControls:withCompletionHandler:]
  -[MPAVRoutingSheet _maxRoutingViewSize]
  -[MPAVRoutingSheet routingViewController:didPickRoute:]
  -[MPAVRoutingSheet routingViewControllerDidUpdateContents:]
  -[MPAVRoutingSheet setAVItemType:]
  -[MPAVRoutingSheet initWithFrame:]
  -[MPAVRoutingSheet dismiss]
  -[MPAVRoutingSheet mirroringOnly]
  -[MPAVRoutingSheet routingViewControllerDidShowAirPlayDebugScreen:]
  -[MPAVRoutingSheet setMirroringOnly:]
  -[MPAVRoutingSheet dealloc]


_MPAVRoutingSheetSecureWindow : UIWindow
  // class methods
  +[_MPAVRoutingSheetSecureWindow _isSecure]

  // instance methods
  -[_MPAVRoutingSheetSecureWindow _canAffectStatusBarAppearance]


MPModelLibrarySearchRequest : MPModelLibraryRequest
 @property  NSArray *scopes
 @property  long long maximumResultsPerScope
 @property  NSString *searchString

  // class methods
  +[MPModelLibrarySearchRequest supportsSecureCoding]

  // instance methods
  -[MPModelLibrarySearchRequest setScopes:]
  -[MPModelLibrarySearchRequest scopes]
  -[MPModelLibrarySearchRequest newOperationWithResponseHandler:]
  -[MPModelLibrarySearchRequest setSearchString:]
  -[MPModelLibrarySearchRequest initWithCoder:]
  -[MPModelLibrarySearchRequest searchString]
  -[MPModelLibrarySearchRequest .cxx_destruct]
  -[MPModelLibrarySearchRequest setMaximumResultsPerScope:]
  -[MPModelLibrarySearchRequest maximumResultsPerScope]
  -[MPModelLibrarySearchRequest copyWithZone:]
  -[MPModelLibrarySearchRequest encodeWithCoder:]


MPModelLibrarySearchResponse : MPModelLibraryResponse
  // instance methods
  -[MPModelLibrarySearchResponse initWithRequest:]
  -[MPModelLibrarySearchResponse hasMoreResultsForSectionAtIndex:]
  -[MPModelLibrarySearchResponse searchWeightForIndexPath:]
  -[MPModelLibrarySearchResponse dealloc]
  -[MPModelLibrarySearchResponse _mediaLibraryDidChangeNotification:]


MPModelLibrarySearchSectionedCollectionDataSource : NSObject <MPLazySectionedCollectionDataSource>
 @property  NSArray *resultContainers
 @property  MPModelLibrarySearchRequest *request
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPModelLibrarySearchSectionedCollectionDataSource setRequest:]
  -[MPModelLibrarySearchSectionedCollectionDataSource sectionAtIndex:]
  -[MPModelLibrarySearchSectionedCollectionDataSource numberOfItemsInSection:]
  -[MPModelLibrarySearchSectionedCollectionDataSource numberOfSections]
  -[MPModelLibrarySearchSectionedCollectionDataSource .cxx_destruct]
  -[MPModelLibrarySearchSectionedCollectionDataSource identifiersForItemAtIndexPath:]
  -[MPModelLibrarySearchSectionedCollectionDataSource hasMoreResultsForSectionAtIndex:]
  -[MPModelLibrarySearchSectionedCollectionDataSource searchWeightForIndexPath:]
  -[MPModelLibrarySearchSectionedCollectionDataSource resultContainers]
  -[MPModelLibrarySearchSectionedCollectionDataSource request]
  -[MPModelLibrarySearchSectionedCollectionDataSource initWithEntitiesQueryResultContainers:]
  -[MPModelLibrarySearchSectionedCollectionDataSource itemAtIndexPath:]


MPModelLibrarySearchEntityResultContainer : NSObject
 @property  {shared_ptr<mlcore::EntityQueryResult>=^{EntityQueryResult}^{__shared_weak_count}} entityQueryResult
 @property  MPModelLibrarySearchScope *scope
 @property  MPMediaLibraryEntityTranslationContext *entityTranslationContext

  // instance methods
  -[MPModelLibrarySearchEntityResultContainer .cxx_construct]
  -[MPModelLibrarySearchEntityResultContainer .cxx_destruct]
  -[MPModelLibrarySearchEntityResultContainer entityQueryResult]
  -[MPModelLibrarySearchEntityResultContainer entityTranslationContext]
  -[MPModelLibrarySearchEntityResultContainer scope]
  -[MPModelLibrarySearchEntityResultContainer initWithEntityQueryResult:forScope:entityTranslationContext:]


_MPModelLibraryItemArtist : MPModelArtist

_MPModelLibraryPodcastEpisodeAuthor : MPModelPodcastAuthor

MPModalPresentationWindow : UIApplicationRotationFollowingWindow
  // instance methods
  -[MPModalPresentationWindow presentViewController:animated:completion:]
  -[MPModalPresentationWindow init]
  -[MPModalPresentationWindow presentAlertController:animated:completion:]
  -[MPModalPresentationWindow _presentationViewController]
  -[MPModalPresentationWindow isInternalWindow]


MPMediaLibraryArtworkDataSource : NSObject <MPArtworkDataSource, MPArtworkDataSourceIdentifiable>
 @property  NSCache *fallbackCache
 @property  MPArtworkResizeUtility *artworkResizeUtility
 @property  BOOL usesFallbackCache
 @property  NSString *mediaLibraryUniqueIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *artworkDataSourceIdentifier

  // class methods
  +[MPMediaLibraryArtworkDataSource artworkDataSourceShortDescription]
  +[MPMediaLibraryArtworkDataSource artworkDataSourceWithIdentifier:]

  // instance methods
  -[MPMediaLibraryArtworkDataSource setArtworkResizeUtility:]
  -[MPMediaLibraryArtworkDataSource _cacheRepresentation:forCatalog:]
  -[MPMediaLibraryArtworkDataSource _cachedRepresentationForCatalog:]
  -[MPMediaLibraryArtworkDataSource fallbackCache]
  -[MPMediaLibraryArtworkDataSource .cxx_destruct]
  -[MPMediaLibraryArtworkDataSource _isRepresentation:validForCatalog:]
  -[MPMediaLibraryArtworkDataSource _resizeArtwork:forCatalog:toSize:completionHandler:]
  -[MPMediaLibraryArtworkDataSource artworkResizeUtility]
  -[MPMediaLibraryArtworkDataSource existingArtworkEffectResultForEffectType:catalog:options:]
  -[MPMediaLibraryArtworkDataSource setMediaLibraryUniqueIdentifier:]
  -[MPMediaLibraryArtworkDataSource init]
  -[MPMediaLibraryArtworkDataSource cancelLoadingRepresentationForArtworkCatalog:]
  -[MPMediaLibraryArtworkDataSource isRepresentation:bestRepresentationForArtworkCatalog:]
  -[MPMediaLibraryArtworkDataSource hasExistingRepresentationOnDiskForArtworkCatalog:]
  -[MPMediaLibraryArtworkDataSource _isRepresentationSize:validForFittingSize:]
  -[MPMediaLibraryArtworkDataSource _representationAtSize:forCatalog:]
  -[MPMediaLibraryArtworkDataSource setFallbackCache:]
  -[MPMediaLibraryArtworkDataSource visualIdenticalityIdentifierForCatalog:]
  -[MPMediaLibraryArtworkDataSource getExportableArtworkPropertiesForCatalog:completionHandler:]
  -[MPMediaLibraryArtworkDataSource _existingRepresentationForArtworkCatalog:fromCacheOnly:]
  -[MPMediaLibraryArtworkDataSource loadArtworkEffectResultForEffectType:catalog:options:systemEffectHandler:completionHandler:]
  -[MPMediaLibraryArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[MPMediaLibraryArtworkDataSource _resizeOriginalArtworkForArtworkCatalog:completionHandler:]
  -[MPMediaLibraryArtworkDataSource setUsesFallbackCache:]
  -[MPMediaLibraryArtworkDataSource existingRepresentationForArtworkCatalog:]
  -[MPMediaLibraryArtworkDataSource mediaLibraryUniqueIdentifier]
  -[MPMediaLibraryArtworkDataSource usesFallbackCache]
  -[MPMediaLibraryArtworkDataSource artworkDataSourceIdentifier]
  -[MPMediaLibraryArtworkDataSource loadRepresentationForArtworkCatalog:completionHandler:]


_MPMediaLibraryArtworkDataSourceCacheKey : NSObject
 @property  id catalogIdentifier
 @property  {CGSize=dd} representationSize

  // instance methods
  -[_MPMediaLibraryArtworkDataSourceCacheKey setRepresentationSize:]
  -[_MPMediaLibraryArtworkDataSourceCacheKey .cxx_destruct]
  -[_MPMediaLibraryArtworkDataSourceCacheKey initWithArtworkCatalog:representativeSize:]
  -[_MPMediaLibraryArtworkDataSourceCacheKey catalogIdentifier]
  -[_MPMediaLibraryArtworkDataSourceCacheKey setCatalogIdentifier:]
  -[_MPMediaLibraryArtworkDataSourceCacheKey isEqual:]
  -[_MPMediaLibraryArtworkDataSourceCacheKey representationSize]


_MPMediaLibraryArtworkVisualIdenticalityIdentifier : NSObject <MPArtworkDataSourceVisualIdenticality>
 @property  long long artworkType
 @property  NSString *availableArtworkToken
 @property  NSString *fetchableArtworkToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier stringRepresentation]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier .cxx_destruct]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier init]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier initWithArtworkType:availableArtworkToken:fetchableArtworkToken:]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier isEqual:]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier copyWithZone:]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier artworkType]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier availableArtworkToken]
  -[_MPMediaLibraryArtworkVisualIdenticalityIdentifier fetchableArtworkToken]


MPStoreLyricsSnippetURLComponents : NSObject
 @property  double startTime
 @property  double endTime
 @property  long long songAdamID
 @property  NSString *language
 @property  NSString *countryCode
 @property  NSString *signature

  // instance methods
  -[MPStoreLyricsSnippetURLComponents endTime]
  -[MPStoreLyricsSnippetURLComponents countryCode]
  -[MPStoreLyricsSnippetURLComponents .cxx_destruct]
  -[MPStoreLyricsSnippetURLComponents language]
  -[MPStoreLyricsSnippetURLComponents songAdamID]
  -[MPStoreLyricsSnippetURLComponents signatureWithCountryCode:adamID:startTime:endTime:language:]
  -[MPStoreLyricsSnippetURLComponents initWithSong:language:startTime:endTime:]
  -[MPStoreLyricsSnippetURLComponents URLWithAdditionalParameters:completion:]
  -[MPStoreLyricsSnippetURLComponents startTime]
  -[MPStoreLyricsSnippetURLComponents signature]
  -[MPStoreLyricsSnippetURLComponents initWithURL:]


MPStoreSocialBlockOperationDataSource : NSObject <MPStoreSocialRequestOperationDataSource>
 @property  MPModelSocialPerson *person
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPStoreSocialBlockOperationDataSource queryItems]
  -[MPStoreSocialBlockOperationDataSource .cxx_destruct]
  -[MPStoreSocialBlockOperationDataSource setPerson:]
  -[MPStoreSocialBlockOperationDataSource httpBody]
  -[MPStoreSocialBlockOperationDataSource person]
  -[MPStoreSocialBlockOperationDataSource httpBodyType]
  -[MPStoreSocialBlockOperationDataSource bagKey]
  -[MPStoreSocialBlockOperationDataSource httpMethod]


MPModelFileAssetKind : MPModelKind
  // class methods
  +[MPModelFileAssetKind identityKind]

  // instance methods
  -[MPModelFileAssetKind humanDescription]


MPModelFileAsset : MPModelObject
 @property  NSString *filePath
 @property  unsigned long fileSize
 @property  long long protectionType
 @property  BOOL nonPurgeable
 @property  NSString *purchaseBundleFilePath
 @property  long long qualityType
 @property  unsigned long traits
 @property  NSString *hlsKeyServerURL
 @property  NSString *hlsKeyServerProtocol
 @property  NSString *hlsKeyCertificateURL

  // class methods
  +[MPModelFileAsset __qualityType_KEY]
  +[MPModelFileAsset __nonPurgeable_KEY]
  +[MPModelFileAsset __hlsKeyServerURL_KEY]
  +[MPModelFileAsset __hlsKeyServerProtocol_KEY]
  +[MPModelFileAsset allSupportedProperties]
  +[MPModelFileAsset __hlsKeyCertificateURL_KEY]
  +[MPModelFileAsset __fileSize_KEY]
  +[MPModelFileAsset __filePath_KEY]
  +[MPModelFileAsset __traits_KEY]
  +[MPModelFileAsset __protectionType_KEY]
  +[MPModelFileAsset __purchaseBundleFilePath_KEY]


MPAVOutputDeviceRoutingDataSource : MPAVRoutingDataSource
 @property  MPMRAVOutputContextWrapper *applicationOutputContext
 @property  MRAVRoutingDiscoverySession *companionDiscoverySession
 @property  MRAVRoutingDiscoverySession *discoverySession
 @property  BOOL didFinishLoading
 @property  MRAVRoutingDiscoverySessionConfiguration *discoverySessionConfiguration
 @property  MRAVEndpoint *endpoint
 @property  MRAVOutputDevice *predictedDevice
 @property  NSString *routingContextUID
 @property  BOOL supportsMultipleSelection
 @property  BOOL detachesRoutesToGroup
 @property  BOOL supportsQueueHandoff
 @property  NSString *presentingAppBundleID
 @property  MPAVEndpointRoute *endpointRoute
 @property  NSString *initiator
 @property  BOOL supportsRoutePrediction

  // class methods
  +[MPAVOutputDeviceRoutingDataSource _globalAudioSessionLock]

  // instance methods
  -[MPAVOutputDeviceRoutingDataSource setTargetSessionID:]
  -[MPAVOutputDeviceRoutingDataSource setDiscoverySession:]
  -[MPAVOutputDeviceRoutingDataSource _generateDiscoverySession]
  -[MPAVOutputDeviceRoutingDataSource predictedDevice]
  -[MPAVOutputDeviceRoutingDataSource _unregisterNotifications]
  -[MPAVOutputDeviceRoutingDataSource setPickedRoute:withPassword:completion:]
  -[MPAVOutputDeviceRoutingDataSource targetSessionID]
  -[MPAVOutputDeviceRoutingDataSource setInitiator:]
  -[MPAVOutputDeviceRoutingDataSource getRoutesForCategory:]
  -[MPAVOutputDeviceRoutingDataSource discoverySession]
  -[MPAVOutputDeviceRoutingDataSource discoverySessionConfiguration]
  -[MPAVOutputDeviceRoutingDataSource devicePresenceDetected]
  -[MPAVOutputDeviceRoutingDataSource createGroupFromOutputDevices:queue:completion:]
  -[MPAVOutputDeviceRoutingDataSource _outputDevicesDidChange:]
  -[MPAVOutputDeviceRoutingDataSource setSupportsMultipleSelection:]
  -[MPAVOutputDeviceRoutingDataSource presentingAppBundleID]
  -[MPAVOutputDeviceRoutingDataSource outputDevicesForRoutes:]
  -[MPAVOutputDeviceRoutingDataSource setRoutingContextUID:]
  -[MPAVOutputDeviceRoutingDataSource .cxx_destruct]
  -[MPAVOutputDeviceRoutingDataSource addRouteToGroup:completion:]
  -[MPAVOutputDeviceRoutingDataSource discoveryMode]
  -[MPAVOutputDeviceRoutingDataSource routingContextUID]
  -[MPAVOutputDeviceRoutingDataSource setPresentingAppBundleID:]
  -[MPAVOutputDeviceRoutingDataSource _initWithEndpointRoute:]
  -[MPAVOutputDeviceRoutingDataSource setApplicationOutputContext:]
  -[MPAVOutputDeviceRoutingDataSource _endpointsDidChangeNotification:]
  -[MPAVOutputDeviceRoutingDataSource initWithEndpointRoute:]
  -[MPAVOutputDeviceRoutingDataSource addRoutesToGroup:completion:]
  -[MPAVOutputDeviceRoutingDataSource init]
  -[MPAVOutputDeviceRoutingDataSource setPredictedDevice:]
  -[MPAVOutputDeviceRoutingDataSource _shouldDetachOutputDevicesToGroup:]
  -[MPAVOutputDeviceRoutingDataSource removeRouteFromGroup:completion:]
  -[MPAVOutputDeviceRoutingDataSource _personalRoutesDidChange]
  -[MPAVOutputDeviceRoutingDataSource detachesRoutesToGroup]
  -[MPAVOutputDeviceRoutingDataSource _stateDumpObject]
  -[MPAVOutputDeviceRoutingDataSource applicationOutputContext]
  -[MPAVOutputDeviceRoutingDataSource supportsRoutePrediction]
  -[MPAVOutputDeviceRoutingDataSource setDidFinishLoading:]
  -[MPAVOutputDeviceRoutingDataSource setCompanionDiscoverySession:]
  -[MPAVOutputDeviceRoutingDataSource setDiscoveryMode:]
  -[MPAVOutputDeviceRoutingDataSource didFinishLoading]
  -[MPAVOutputDeviceRoutingDataSource routingSessionManager]
  -[MPAVOutputDeviceRoutingDataSource supportsMultipleSelection]
  -[MPAVOutputDeviceRoutingDataSource initiator]
  -[MPAVOutputDeviceRoutingDataSource _setShouldSourceOutputDevicesFromAVODDS:]
  -[MPAVOutputDeviceRoutingDataSource _outputDevicesDidChangeNotification:]
  -[MPAVOutputDeviceRoutingDataSource removeRoutesFromGroup:completion:]
  -[MPAVOutputDeviceRoutingDataSource endpointRoute]
  -[MPAVOutputDeviceRoutingDataSource _outputDeviceRouteWithUID:]
  -[MPAVOutputDeviceRoutingDataSource _detachableDevicesInOutputDevices:]
  -[MPAVOutputDeviceRoutingDataSource setDetachesRoutesToGroup:]
  -[MPAVOutputDeviceRoutingDataSource dealloc]
  -[MPAVOutputDeviceRoutingDataSource endpoint]
  -[MPAVOutputDeviceRoutingDataSource companionDiscoverySession]
  -[MPAVOutputDeviceRoutingDataSource _resetPredictedOutputDevice]
  -[MPAVOutputDeviceRoutingDataSource _isRemovingPredictedDevice:]
  -[MPAVOutputDeviceRoutingDataSource _shouldAddPredictedDeviceToOuputDevices:]
  -[MPAVOutputDeviceRoutingDataSource setSupportsQueueHandoff:]
  -[MPAVOutputDeviceRoutingDataSource _routeStatusDidChangeNotification:]
  -[MPAVOutputDeviceRoutingDataSource supportsQueueHandoff]
  -[MPAVOutputDeviceRoutingDataSource setSupportsRoutePrediction:]
  -[MPAVOutputDeviceRoutingDataSource _registerNotifications]
  -[MPAVOutputDeviceRoutingDataSource setEndpointRoute:]
  -[MPAVOutputDeviceRoutingDataSource routeIsLeaderOfEndpoint:]


MPAVCompanionProxiedOutputDeviceRoutingDataSource : MPAVOutputDeviceRoutingDataSource

MPMusicMediaPickerXPCInterfaces : NSObject
  // class methods
  +[MPMusicMediaPickerXPCInterfaces clientInterface]
  +[MPMusicMediaPickerXPCInterfaces serviceInterface]


MPStoreModelTVShowCreatorBuilder : MPStoreModelObjectBuilder

MPDetailScrubController : NSObject
 @property  UIControl<MPDetailedScrubbing> *scrubbingControl
 @property  <MPDetailScrubControllerDelegate> *delegate
 @property  double duration
 @property  double scrubbingVerticalRange
 @property  BOOL detailedScrubbingEnabled
 @property  BOOL durationAllowsForDetailedScrubbing
 @property  BOOL isTracking
 @property  long long currentScrubSpeed

  // instance methods
  -[MPDetailScrubController continueTrackingWithTouch:withEvent:]
  -[MPDetailScrubController .cxx_destruct]
  -[MPDetailScrubController setDuration:]
  -[MPDetailScrubController setDelegate:]
  -[MPDetailScrubController init]
  -[MPDetailScrubController initWithScrubbingControl:]
  -[MPDetailScrubController setDetailedScrubbingEnabled:]
  -[MPDetailScrubController detailedScrubbingEnabled]
  -[MPDetailScrubController durationAllowsForDetailedScrubbing]
  -[MPDetailScrubController scaleForVerticalPosition:]
  -[MPDetailScrubController currentScrubSpeed]
  -[MPDetailScrubController _beginScrubbing]
  -[MPDetailScrubController _commitValue:]
  -[MPDetailScrubController scrubbingControl]
  -[MPDetailScrubController _scaleForIdealValueForVerticalPosition:]
  -[MPDetailScrubController setScrubbingControl:]
  -[MPDetailScrubController scrubbingVerticalRange]
  -[MPDetailScrubController setScrubbingVerticalRange:]
  -[MPDetailScrubController isTracking]
  -[MPDetailScrubController _endScrubbing]
  -[MPDetailScrubController _minimumScale]
  -[MPDetailScrubController delegate]
  -[MPDetailScrubController cancelTrackingWithEvent:]
  -[MPDetailScrubController endTrackingWithTouch:withEvent:]
  -[MPDetailScrubController beginTrackingWithTouch:withEvent:]
  -[MPDetailScrubController duration]


MPModelStorePlatformMetadataGenericObjectBuilder : NSObject
 @property  MPPropertySet *requestedProperties

  // instance methods
  -[MPModelStorePlatformMetadataGenericObjectBuilder .cxx_destruct]
  -[MPModelStorePlatformMetadataGenericObjectBuilder requestedProperties]
  -[MPModelStorePlatformMetadataGenericObjectBuilder initWithRequestedProperties:]
  -[MPModelStorePlatformMetadataGenericObjectBuilder genericObjectForStorePlatformMetadata:userIdentity:]


MPStoreLibraryPersonalizationContentDescriptor : NSObject
 @property  MPModelObject *model
 @property  long long personalizationStyle

  // class methods
  +[MPStoreLibraryPersonalizationContentDescriptor lightweightPersonalizationPropertiesForModelClass:]
  +[MPStoreLibraryPersonalizationContentDescriptor _lightweightPersonalizationPropertiesForStoreAsset]
  +[MPStoreLibraryPersonalizationContentDescriptor _lightweightPersonalizationPropertiesForLyrics]
  +[MPStoreLibraryPersonalizationContentDescriptor _lightweightPersonalizationPropertiesForPlaybackPosition]

  // instance methods
  -[MPStoreLibraryPersonalizationContentDescriptor personalizationStyle]
  -[MPStoreLibraryPersonalizationContentDescriptor initWithModel:personalizationStyle:]
  -[MPStoreLibraryPersonalizationContentDescriptor .cxx_destruct]
  -[MPStoreLibraryPersonalizationContentDescriptor model]


MPUserNotification : NSObject
 @property  ^{__CFUserNotification=} cfUserNotification
 @property  @? willShowNotificationHandler

  // class methods
  +[MPUserNotification _setUserNotification:forCFUserNotification:]
  +[MPUserNotification _userNotificationConversionAccessQueue]
  +[MPUserNotification _userNotificationForCFUserNotification:]

  // instance methods
  -[MPUserNotification .cxx_destruct]
  -[MPUserNotification init]
  -[MPUserNotification cfUserNotification]
  -[MPUserNotification initWithCFUserNotification:]
  -[MPUserNotification _cancelSynchronously:]
  -[MPUserNotification willShowNotificationHandler]
  -[MPUserNotification setWillShowNotificationHandler:]
  -[MPUserNotification showWithCompletionHandler:]
  -[MPUserNotification _didReceiveResponseWithFlags:]
  -[MPUserNotification cancel]
  -[MPUserNotification dealloc]


MPMediaEntityCache : NSObject
  // instance methods
  -[MPMediaEntityCache _entityMapForDataProviderEntityClass:]
  -[MPMediaEntityCache removeEntityWithIdentifier:dataProviderEntityClass:]
  -[MPMediaEntityCache _performWithExclusiveAccessForDataProviderEntityClass:block:]
  -[MPMediaEntityCache .cxx_destruct]
  -[MPMediaEntityCache _performWithSharedAccessForDataProviderEntityClass:block:]
  -[MPMediaEntityCache itemWithIdentifier:loadEntityBlock:]
  -[MPMediaEntityCache initWithMediaLibraryDataProvider:]
  -[MPMediaEntityCache collectionWithIdentifier:grouping:loadEntityBlock:]
  -[MPMediaEntityCache _clearSomeGlobalEntityTemporaryReferences]
  -[MPMediaEntityCache updatePropertyValuesInEntityWithIdentifier:dataProviderEntityClass:deleted:]
  -[MPMediaEntityCache itemWithIdentifier:]
  -[MPMediaEntityCache _entityWithIdentifier:mediaEntityType:collectionGroupingType:loadEntityBlock:]


MPAVEndpointRoute : MPAVRoute
 @property  MPAVRouteConnection *connection
 @property  ^v endpoint
 @property  MRAVEndpoint *endpointObject
 @property  MPMRAVEndpointWrapper *endpointWrapper
 @property  NSString *sortName
 @property  BOOL canModifyGroupMembership

  // class methods
  +[MPAVEndpointRoute supportsSecureCoding]
  +[MPAVEndpointRoute getActiveEndpointRouteWithCompletion:]

  // instance methods
  -[MPAVEndpointRoute clusterType]
  -[MPAVEndpointRoute groupUID]
  -[MPAVEndpointRoute presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[MPAVEndpointRoute initWithEndpoint:]
  -[MPAVEndpointRoute canFetchMediaDataFromSender]
  -[MPAVEndpointRoute canAccessRemoteAssets]
  -[MPAVEndpointRoute clusterComposition]
  -[MPAVEndpointRoute canPlayEncryptedProgressiveDownloadAssets]
  -[MPAVEndpointRoute routeName]
  -[MPAVEndpointRoute canModifyGroupMembership]
  -[MPAVEndpointRoute routeUID]
  -[MPAVEndpointRoute endpointWrapper]
  -[MPAVEndpointRoute isProxyGroupPlayer]
  -[MPAVEndpointRoute initWithCoder:]
  -[MPAVEndpointRoute isLowFidelityRoute]
  -[MPAVEndpointRoute sortName]
  -[MPAVEndpointRoute isMacRoute]
  -[MPAVEndpointRoute .cxx_destruct]
  -[MPAVEndpointRoute setEndpointWrapper:]
  -[MPAVEndpointRoute endpointObject]
  -[MPAVEndpointRoute setConnection:]
  -[MPAVEndpointRoute isTVRoute]
  -[MPAVEndpointRoute supportsGrouping]
  -[MPAVEndpointRoute establishGroup]
  -[MPAVEndpointRoute _endpointOutputDevicesDidChange:]
  -[MPAVEndpointRoute effectiveGroupLeader]
  -[MPAVEndpointRoute _endpointDidChange:]
  -[MPAVEndpointRoute _groupLeaderIsOfDeviceSubtype:]
  -[MPAVEndpointRoute _outputDevicesComposition]
  -[MPAVEndpointRoute connection]
  -[MPAVEndpointRoute isHomePodRoute]
  -[MPAVEndpointRoute isSplitRoute]
  -[MPAVEndpointRoute isSplitterCapable]
  -[MPAVEndpointRoute supportsAirPlayGrouping]
  -[MPAVEndpointRoute routeSubtype]
  -[MPAVEndpointRoute isDeviceRoute]
  -[MPAVEndpointRoute isAppleTVRoute]
  -[MPAVEndpointRoute isLowLatencyRoute]
  -[MPAVEndpointRoute isStereoPair]
  -[MPAVEndpointRoute designatedGroupLeaderName]
  -[MPAVEndpointRoute isAirPlayingToDevice]
  -[MPAVEndpointRoute groupLeaderAirplayIdentifier]
  -[MPAVEndpointRoute supportsRemoteControl]
  -[MPAVEndpointRoute numberOfOutputDevices]
  -[MPAVEndpointRoute isRoutingToWirelessDevice]
  -[MPAVEndpointRoute isClusterRoute]
  -[MPAVEndpointRoute designatedGroupLeaderRouteUID]
  -[MPAVEndpointRoute dealloc]
  -[MPAVEndpointRoute originalRouteSubtype]
  -[MPAVEndpointRoute endpoint]
  -[MPAVEndpointRoute isDeviceSpeakerRoute]
  -[MPAVEndpointRoute isB520Route]
  -[MPAVEndpointRoute isPhoneRoute]
  -[MPAVEndpointRoute isHomeTheaterRoute]
  -[MPAVEndpointRoute encodeWithCoder:]
  -[MPAVEndpointRoute routeNames]
  -[MPAVEndpointRoute routeType]


MPStoreContentReporter : NSObject
  // class methods
  +[MPStoreContentReporter sharedReporter]

  // instance methods
  -[MPStoreContentReporter .cxx_destruct]
  -[MPStoreContentReporter init]
  -[MPStoreContentReporter baseURLStringForReport]
  -[MPStoreContentReporter _performWithBag:]
  -[MPStoreContentReporter _deleteCommentURLComponentsFromBag:]
  -[MPStoreContentReporter _dictionariesForType:]
  -[MPStoreContentReporter _deletePostURLComponentsFromBag:]
  -[MPStoreContentReporter _reportConcernBagDictionary]
  -[MPStoreContentReporter submitReport:completion:]
  -[MPStoreContentReporter deleteComment:activityID:completion:]
  -[MPStoreContentReporter deletePost:completion:]
  -[MPStoreContentReporter reportsForType:contentID:aucType:commentText:]


MPStoreContentReport : NSObject <NSCopying>
 @property  NSString *displayText
 @property  NSString *userID
 @property  NSString *contentID
 @property  long long concernItemType
 @property  NSString *commentText
 @property  NSString *aucType
 @property  NSString *concernTypeID

  // instance methods
  -[MPStoreContentReport userID]
  -[MPStoreContentReport setUserID:]
  -[MPStoreContentReport aucType]
  -[MPStoreContentReport .cxx_destruct]
  -[MPStoreContentReport contentID]
  -[MPStoreContentReport commentText]
  -[MPStoreContentReport concernItemType]
  -[MPStoreContentReport concernTypeID]
  -[MPStoreContentReport setConcernItemType:]
  -[MPStoreContentReport setConcernTypeID:]
  -[MPStoreContentReport setContentID:]
  -[MPStoreContentReport setAucType:]
  -[MPStoreContentReport setCommentText:]
  -[MPStoreContentReport setDisplayText:]
  -[MPStoreContentReport copyWithZone:]
  -[MPStoreContentReport displayText]


MPMediaAPICollectionItemMetadataRequest : NSObject <MPMediaAPIMetadaRequestProtocol>
 @property  BOOL shouldResolveRequestItemsLocally
 @property  NSUUID *requestIdentifier
 @property  long long requestItemCount
 @property  NSProgress *progress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaAPICollectionItemMetadataRequest requestIdentifier]
  -[MPMediaAPICollectionItemMetadataRequest .cxx_destruct]
  -[MPMediaAPICollectionItemMetadataRequest progress]
  -[MPMediaAPICollectionItemMetadataRequest _fetchContainerItemMetadataForBatch:progressHandler:]
  -[MPMediaAPICollectionItemMetadataRequest requestItemCount]
  -[MPMediaAPICollectionItemMetadataRequest _resolveRequestItemsWithSOD:]
  -[MPMediaAPICollectionItemMetadataRequest _getNextBatchBatch]
  -[MPMediaAPICollectionItemMetadataRequest initWithItemIdentifiers:personID:requestContext:]
  -[MPMediaAPICollectionItemMetadataRequest _notifyBatchProgressWithResponseDictionary:tokenHalfLifeDuration:error:finalResponse:progressHandler:]
  -[MPMediaAPICollectionItemMetadataRequest cancelRequest]
  -[MPMediaAPICollectionItemMetadataRequest shouldResolveRequestItemsLocally]
  -[MPMediaAPICollectionItemMetadataRequest executeRequestWithBatchProgressHandler:]


MPAssistantMusicAssetLoadLogEvent : MPAssistantMusicLogEvent
 @property  double duration

  // instance methods
  -[MPAssistantMusicAssetLoadLogEvent eventCode]
  -[MPAssistantMusicAssetLoadLogEvent setDuration:]
  -[MPAssistantMusicAssetLoadLogEvent eventPayload]
  -[MPAssistantMusicAssetLoadLogEvent eventName]
  -[MPAssistantMusicAssetLoadLogEvent duration]


MPPlaybackArchiveDisplayProperties : NSObject <MPMutablePlaybackArchiveDisplayProperties, NSCopying, NSSecureCoding>
 @property  NSMutableDictionary *storage
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSData *artworkImageData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPPlaybackArchiveDisplayProperties supportsSecureCoding]

  // instance methods
  -[MPPlaybackArchiveDisplayProperties setStorage:]
  -[MPPlaybackArchiveDisplayProperties initWithCoder:]
  -[MPPlaybackArchiveDisplayProperties setTitle:]
  -[MPPlaybackArchiveDisplayProperties .cxx_destruct]
  -[MPPlaybackArchiveDisplayProperties storage]
  -[MPPlaybackArchiveDisplayProperties setSubtitle:]
  -[MPPlaybackArchiveDisplayProperties initWithBlock:]
  -[MPPlaybackArchiveDisplayProperties isEqual:]
  -[MPPlaybackArchiveDisplayProperties setArtworkImageData:]
  -[MPPlaybackArchiveDisplayProperties artworkImageData]
  -[MPPlaybackArchiveDisplayProperties initWithTitle:subtitle:artworkImageData:]
  -[MPPlaybackArchiveDisplayProperties subtitle]
  -[MPPlaybackArchiveDisplayProperties title]
  -[MPPlaybackArchiveDisplayProperties copyWithOptions:]
  -[MPPlaybackArchiveDisplayProperties copyWithZone:]
  -[MPPlaybackArchiveDisplayProperties encodeWithCoder:]


MPHomeMonitor : NSObject <MPHomeManagerObserverDelegate>
 @property  BOOL soundCheckEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPHomeMonitor isCurrentDeviceValidHomeAccessory]
  +[MPHomeMonitor setupIfNecessary]
  +[MPHomeMonitor sharedMonitor]

  // instance methods
  -[MPHomeMonitor currentHomeDidChange]
  -[MPHomeMonitor currentUserDidChange]
  -[MPHomeMonitor homeUsersDidChange]
  -[MPHomeMonitor soundCheckSettingDidUpdate:]
  -[MPHomeMonitor isSoundCheckEnabled]
  -[MPHomeMonitor init]
  -[MPHomeMonitor _postNotificationWithName:]
  -[MPHomeMonitor setSoundCheckEnabled:]


MPModelLibraryKeepLocalChangeRequestOperation : MPAsyncOperation
 @property  @? responseHandler
 @property  MPModelLibraryKeepLocalChangeRequest *request

  // instance methods
  -[MPModelLibraryKeepLocalChangeRequestOperation setRequest:]
  -[MPModelLibraryKeepLocalChangeRequestOperation .cxx_destruct]
  -[MPModelLibraryKeepLocalChangeRequestOperation responseHandler]
  -[MPModelLibraryKeepLocalChangeRequestOperation setResponseHandler:]
  -[MPModelLibraryKeepLocalChangeRequestOperation execute]
  -[MPModelLibraryKeepLocalChangeRequestOperation _handlePersistentID:modelClass:keepLocal:mediaLibrary:]
  -[MPModelLibraryKeepLocalChangeRequestOperation _handleKeepLocalUpdateStatus:forLibraryIdentifier:mediaType:completedWithError:]
  -[MPModelLibraryKeepLocalChangeRequestOperation request]


_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation : MPAsyncOperation
 @property  MPMediaItem *mediaItem
 @property  long long keepLocal

  // instance methods
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation .cxx_destruct]
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation keepLocal]
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation execute]
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation setMediaItem:]
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation setKeepLocal:]
  -[_MPModelLibraryKeepLocalChangeRequestUpdateItemOperation mediaItem]


MPAVRoutingDataSource : NSObject <NSObject>
 @property  NSString *activeAudioCategory
 @property  BOOL didFinishLoading
 @property  long long discoveryMode
 @property  BOOL devicePresenceDetected
 @property  BOOL supportsMultipleSelection
 @property  long long filterMode
 @property  unsigned int targetSessionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPAVRoutingDataSource setTargetSessionID:]
  -[MPAVRoutingDataSource setPickedRoute:withPassword:completion:]
  -[MPAVRoutingDataSource targetSessionID]
  -[MPAVRoutingDataSource getExternalScreenTypeWithCompletion:]
  -[MPAVRoutingDataSource unpickAirPlayAVRoutesWithCompletion:]
  -[MPAVRoutingDataSource getRoutesForCategory:]
  -[MPAVRoutingDataSource devicePresenceDetected]
  -[MPAVRoutingDataSource .cxx_destruct]
  -[MPAVRoutingDataSource discoveryMode]
  -[MPAVRoutingDataSource filterMode]
  -[MPAVRoutingDataSource init]
  -[MPAVRoutingDataSource activeAudioCategory]
  -[MPAVRoutingDataSource _stateDumpObject]
  -[MPAVRoutingDataSource _superclassRegisterNotifications]
  -[MPAVRoutingDataSource _reloadActiveAudioCategoryWithCompletion:]
  -[MPAVRoutingDataSource _superclassUnregisterNotifications]
  -[MPAVRoutingDataSource setFilterMode:]
  -[MPAVRoutingDataSource setDiscoveryMode:]
  -[MPAVRoutingDataSource _externalScreenTypeDidChangeNotification:]
  -[MPAVRoutingDataSource didFinishLoading]
  -[MPAVRoutingDataSource supportsMultipleSelection]
  -[MPAVRoutingDataSource getPickedRouteHasVolumeControlWithCompletion:]
  -[MPAVRoutingDataSource _activeAudioRouteDidChangeNotification:]
  -[MPAVRoutingDataSource _volumeControlAvailabilityDidChangeNotification:]
  -[MPAVRoutingDataSource dealloc]
  -[MPAVRoutingDataSource routeIsLeaderOfEndpoint:]


MPModelStoreAsset : MPModelObject
 @property  long long endpointType
 @property  NSString *redownloadParameters
 @property  BOOL redownloadable
 @property  unsigned long accountIdentifier
 @property  BOOL shouldReportPlayEvents
 @property  BOOL subscriptionRequired
 @property  BOOL needsUserUpload

  // class methods
  +[MPModelStoreAsset __shouldReportPlayEvents_KEY]
  +[MPModelStoreAsset __needsUserUpload_KEY]
  +[MPModelStoreAsset __redownloadable_KEY]
  +[MPModelStoreAsset allSupportedProperties]
  +[MPModelStoreAsset __subscriptionRequired_KEY]
  +[MPModelStoreAsset __accountIdentifier_KEY]
  +[MPModelStoreAsset __redownloadParameters_KEY]
  +[MPModelStoreAsset __endpointType_KEY]


MPContentTastePendingUpdateRecord : NSObject
 @property  NSString *playlistGlobalID
 @property  long long storeAdamID
 @property  long long tasteType
 @property  long long type
 @property  NSUUID *UUID

  // instance methods
  -[MPContentTastePendingUpdateRecord UUID]
  -[MPContentTastePendingUpdateRecord tasteType]
  -[MPContentTastePendingUpdateRecord initWithPlaylistGlobalID:tasteType:]
  -[MPContentTastePendingUpdateRecord initWithStoreAdamID:tasteType:]
  -[MPContentTastePendingUpdateRecord playlistGlobalID]
  -[MPContentTastePendingUpdateRecord .cxx_destruct]
  -[MPContentTastePendingUpdateRecord _initializeWithType:tasteType:]
  -[MPContentTastePendingUpdateRecord type]
  -[MPContentTastePendingUpdateRecord storeAdamID]


MPHomeUserMonitor : NSObject <HMSettingsDelegate, HMUserDelegatePrivate>
 @property  BOOL explicitSettingEnabled
 @property  BOOL privateListeningEnabledForCurrentAccessory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPHomeUserMonitor userMonitorWithHomeIdentifiers:]
  +[MPHomeUserMonitor monitorForCurrentUser]
  +[MPHomeUserMonitor userMonitorWithHomeIdentifier:]
  +[MPHomeUserMonitor userMonitorWithUserIdentity:fromUserIdentityStore:]
  +[MPHomeUserMonitor isExplicitSettingEnabledForCurrentUser]
  +[MPHomeUserMonitor setExplicitSettingEnabledForCurrentUser:]
  +[MPHomeUserMonitor isPrivateListeningEnabledForCurrentUserAndAccessory]
  +[MPHomeUserMonitor setPrivateListeningEnabledForCurrentUserAndAccessory:]

  // instance methods
  -[MPHomeUserMonitor initWithUser:home:]
  -[MPHomeUserMonitor .cxx_destruct]
  -[MPHomeUserMonitor _update]
  -[MPHomeUserMonitor _postNotificationWithName:]
  -[MPHomeUserMonitor isExplicitSettingEnabled]
  -[MPHomeUserMonitor setExplicitSettingEnabled:]
  -[MPHomeUserMonitor isPrivateListeningEnabledForCurrentAccessory]
  -[MPHomeUserMonitor setPrivateListeningEnabledForCurrentAccessory:]
  -[MPHomeUserMonitor _loadAllowExplicitValue]
  -[MPHomeUserMonitor _loadCurrentAccessoryPrivateListening]
  -[MPHomeUserMonitor _updateUserListeningHistoryControlForAccessory:enable:]
  -[MPHomeUserMonitor hasAccessoryWithRouteID:]
  -[MPHomeUserMonitor _notifyAllowExplicitUpdated]
  -[MPHomeUserMonitor privateListeningEnabledForAccessoryWithRouteID:]
  -[MPHomeUserMonitor _notifyPrivateListeningUpdated]
  -[MPHomeUserMonitor settingsDidUpdate:]
  -[MPHomeUserMonitor user:didUpdateUserListeningHistoryUpdateControl:forHome:]
  -[MPHomeUserMonitor setPrivateListeningEnabledForAccessoryWithRouteID:enabled:]
  -[MPHomeUserMonitor privateListeningEnabledForGroupWithRouteIDs:]


MPModelTVShowKind : MPModelKind
 @property  MPModelTVSeasonKind *seasonKind

  // class methods
  +[MPModelTVShowKind supportsSecureCoding]
  +[MPModelTVShowKind identityKind]
  +[MPModelTVShowKind kindWithSeasonKind:]

  // instance methods
  -[MPModelTVShowKind initWithCoder:]
  -[MPModelTVShowKind .cxx_destruct]
  -[MPModelTVShowKind humanDescription]
  -[MPModelTVShowKind applyToView:withContext:]
  -[MPModelTVShowKind seasonKind]
  -[MPModelTVShowKind representedSearchScopePredicate]
  -[MPModelTVShowKind isEqual:]
  -[MPModelTVShowKind encodeWithCoder:]


MPModelTVShow : MPModelObject
 @property  NSString *title
 @property  MPModelTVShowCreator *creator
 @property  NSString *shortTitle
 @property  NSString *editorNotes
 @property  NSString *shortEditorNotes
 @property  NSString *tagline
 @property  @? artworkCatalogBlock
 @property  @? editorialArtworkCatalogBlock
 @property  long long episodesCount

  // class methods
  +[MPModelTVShow __artworkCatalogBlock_KEY]
  +[MPModelTVShow genericObjectType]
  +[MPModelTVShow __episodesCount_KEY]
  +[MPModelTVShow __shortEditorNotes_KEY]
  +[MPModelTVShow kindWithSeasonKind:]
  +[MPModelTVShow __shortTitle_KEY]
  +[MPModelTVShow __creator_KEY]
  +[MPModelTVShow __editorNotes_KEY]
  +[MPModelTVShow __title_KEY]
  +[MPModelTVShow __tagline_KEY]
  +[MPModelTVShow __editorialArtworkCatalogBlock_KEY]

  // instance methods
  -[MPModelTVShow editorialArtworkCatalog]
  -[MPModelTVShow humanDescription]
  -[MPModelTVShow artworkCatalog]


MPPPersistentIDsPredicate : PBCodable <NSCopying>
 @property  BOOL hasShouldContain
 @property  BOOL shouldContain
 @property  unsigned long persistentIDsCount
 @property  ^q persistentIDs

  // instance methods
  -[MPPPersistentIDsPredicate shouldContain]
  -[MPPPersistentIDsPredicate persistentIDsCount]
  -[MPPPersistentIDsPredicate persistentIDs]
  -[MPPPersistentIDsPredicate setShouldContain:]
  -[MPPPersistentIDsPredicate addPersistentIDs:]
  -[MPPPersistentIDsPredicate dictionaryRepresentation]
  -[MPPPersistentIDsPredicate writeTo:]
  -[MPPPersistentIDsPredicate isEqual:]
  -[MPPPersistentIDsPredicate copyTo:]
  -[MPPPersistentIDsPredicate hasShouldContain]
  -[MPPPersistentIDsPredicate clearPersistentIDs]
  -[MPPPersistentIDsPredicate persistentIDsAtIndex:]
  -[MPPPersistentIDsPredicate setHasShouldContain:]
  -[MPPPersistentIDsPredicate setPersistentIDs:count:]
  -[MPPPersistentIDsPredicate readFrom:]
  -[MPPPersistentIDsPredicate dealloc]
  -[MPPPersistentIDsPredicate copyWithZone:]


MPExportableArtworkProperties : NSObject
 @property  ICStoreArtworkInfo *artworkInfo
 @property  NSString *resolvedURLString
 @property  NSArray *artworkTemplateItems
 @property  unsigned long mediaType
 @property  long long mediaLibraryArtworkType
 @property  BOOL valid

  // instance methods
  -[MPExportableArtworkProperties setMediaType:]
  -[MPExportableArtworkProperties isValid]
  -[MPExportableArtworkProperties .cxx_destruct]
  -[MPExportableArtworkProperties isEqual:]
  -[MPExportableArtworkProperties mediaLibraryArtworkType]
  -[MPExportableArtworkProperties artworkInfo]
  -[MPExportableArtworkProperties resolvedURLString]
  -[MPExportableArtworkProperties setArtworkTemplateItems:]
  -[MPExportableArtworkProperties mediaType]
  -[MPExportableArtworkProperties setResolvedURLString:]
  -[MPExportableArtworkProperties artworkTemplateItems]
  -[MPExportableArtworkProperties copyWithZone:]
  -[MPExportableArtworkProperties setMediaLibraryArtworkType:]


MPPMediaPredicateValue : PBCodable <NSCopying>
 @property  int type
 @property  BOOL hasIntegerPredicateValue
 @property  long long integerPredicateValue
 @property  BOOL hasDoublePredicateValue
 @property  double doublePredicateValue
 @property  BOOL hasFloatPredicateValue
 @property  float floatPredicateValue
 @property  BOOL hasBoolPredicateValue
 @property  BOOL boolPredicateValue
 @property  BOOL hasStringPredicateValue
 @property  NSString *stringPredicateValue
 @property  BOOL hasBytesPredicateValue
 @property  NSData *bytesPredicateValue

  // instance methods
  -[MPPMediaPredicateValue setType:]
  -[MPPMediaPredicateValue .cxx_destruct]
  -[MPPMediaPredicateValue dictionaryRepresentation]
  -[MPPMediaPredicateValue writeTo:]
  -[MPPMediaPredicateValue isEqual:]
  -[MPPMediaPredicateValue copyTo:]
  -[MPPMediaPredicateValue readFrom:]
  -[MPPMediaPredicateValue hasIntegerPredicateValue]
  -[MPPMediaPredicateValue hasDoublePredicateValue]
  -[MPPMediaPredicateValue hasFloatPredicateValue]
  -[MPPMediaPredicateValue hasBoolPredicateValue]
  -[MPPMediaPredicateValue setBoolPredicateValue:]
  -[MPPMediaPredicateValue hasStringPredicateValue]
  -[MPPMediaPredicateValue hasBytesPredicateValue]
  -[MPPMediaPredicateValue setHasIntegerPredicateValue:]
  -[MPPMediaPredicateValue setHasDoublePredicateValue:]
  -[MPPMediaPredicateValue setHasFloatPredicateValue:]
  -[MPPMediaPredicateValue setHasBoolPredicateValue:]
  -[MPPMediaPredicateValue type]
  -[MPPMediaPredicateValue dealloc]
  -[MPPMediaPredicateValue copyWithZone:]
  -[MPPMediaPredicateValue integerPredicateValue]
  -[MPPMediaPredicateValue doublePredicateValue]
  -[MPPMediaPredicateValue floatPredicateValue]
  -[MPPMediaPredicateValue boolPredicateValue]
  -[MPPMediaPredicateValue stringPredicateValue]
  -[MPPMediaPredicateValue bytesPredicateValue]
  -[MPPMediaPredicateValue setIntegerPredicateValue:]
  -[MPPMediaPredicateValue setFloatPredicateValue:]
  -[MPPMediaPredicateValue setDoublePredicateValue:]
  -[MPPMediaPredicateValue setStringPredicateValue:]
  -[MPPMediaPredicateValue setBytesPredicateValue:]


MPModelSocialPersonKind : MPModelKind
  // class methods
  +[MPModelSocialPersonKind identityKind]

  // instance methods
  -[MPModelSocialPersonKind humanDescription]


MPModelSocialPerson : MPModelPerson
 @property  NSString *uncensoredName
 @property  NSString *handle
 @property  NSString *biography
 @property  BOOL privatePerson
 @property  BOOL verified
 @property  long long pendingRequestsCount
 @property  @? artworkCatalogBlock

  // class methods
  +[MPModelSocialPerson __artworkCatalogBlock_KEY]
  +[MPModelSocialPerson genericObjectType]
  +[MPModelSocialPerson __uncensoredName_KEY]
  +[MPModelSocialPerson __pendingRequestsCount_KEY]
  +[MPModelSocialPerson __privatePerson_KEY]
  +[MPModelSocialPerson kind]
  +[MPModelSocialPerson __biography_KEY]
  +[MPModelSocialPerson __verified_KEY]
  +[MPModelSocialPerson __handle_KEY]

  // instance methods
  -[MPModelSocialPerson artworkCatalog]


MPMusicPlayerControllerSystemCache : NSObject
 @property  MPMusicPlayerControllerNowPlaying *nowPlaying
 @property  MPMusicPlayerQueueDescriptor *queueDescriptor
 @property  BOOL hasCachedData

  // class methods
  +[MPMusicPlayerControllerSystemCache sharedCache]

  // instance methods
  -[MPMusicPlayerControllerSystemCache clearCache]
  -[MPMusicPlayerControllerSystemCache setNowPlaying:]
  -[MPMusicPlayerControllerSystemCache nowPlaying]
  -[MPMusicPlayerControllerSystemCache .cxx_destruct]
  -[MPMusicPlayerControllerSystemCache hasCachedData]
  -[MPMusicPlayerControllerSystemCache _saveObject:forKey:error:]
  -[MPMusicPlayerControllerSystemCache setQueueDescriptor:]
  -[MPMusicPlayerControllerSystemCache _init]
  -[MPMusicPlayerControllerSystemCache _objectOfClass:forKey:error:]
  -[MPMusicPlayerControllerSystemCache queueDescriptor]


MPAVRoutingTableViewHeaderView : UITableViewHeaderFooterView
 @property  {UIEdgeInsets=dddd} titleInsets

  // instance methods
  -[MPAVRoutingTableViewHeaderView _updateFont]
  -[MPAVRoutingTableViewHeaderView layoutSubviews]
  -[MPAVRoutingTableViewHeaderView titleInsets]
  -[MPAVRoutingTableViewHeaderView setTitleInsets:]
  -[MPAVRoutingTableViewHeaderView initWithReuseIdentifier:]


MPStoreSocialServiceController : NSObject
  // class methods
  +[MPStoreSocialServiceController _internalErrorForHTTPResponseCode:]

  // instance methods
  -[MPStoreSocialServiceController .cxx_destruct]
  -[MPStoreSocialServiceController init]
  -[MPStoreSocialServiceController _performTransientFollowState:onPerson:completion:]
  -[MPStoreSocialServiceController _newOperationForRemovingFollower:completion:]
  -[MPStoreSocialServiceController _transientStateForPerson:shouldCreate:]
  -[MPStoreSocialServiceController _performTransientFollowPendingRequestState:onPerson:completion:]
  -[MPStoreSocialServiceController _transientStatesDidChange]
  -[MPStoreSocialServiceController _handleTransientStateForPersonDidChangeNotification:]
  -[MPStoreSocialServiceController _queue_transientStatesDidChange]
  -[MPStoreSocialServiceController _populateTransientStatesSnapshot:]
  -[MPStoreSocialServiceController _notifyTransientStatesDidChangeWithSnapshot:]
  -[MPStoreSocialServiceController followPerson:completion:]
  -[MPStoreSocialServiceController unfollowPerson:completion:]
  -[MPStoreSocialServiceController requestFollowPerson:completion:]
  -[MPStoreSocialServiceController cancelFollowRequestOnPerson:completion:]
  -[MPStoreSocialServiceController blockPerson:completion:]
  -[MPStoreSocialServiceController unblockPerson:completion:]
  -[MPStoreSocialServiceController removeFollower:completion:]
  -[MPStoreSocialServiceController transientFollowStateForPerson:]
  -[MPStoreSocialServiceController acceptAllFollowRequestsWithCompletion:]
  -[MPStoreSocialServiceController acceptFollowRequestFromPerson:completion:]
  -[MPStoreSocialServiceController declineFollowRequestFromPerson:completion:]
  -[MPStoreSocialServiceController transientFollowPendingRequestStateForPerson:]


_MPStoreSocialTransientState : NSObject
 @property  MPModelSocialPerson *person
 @property  long long followState
 @property  long long followPendingRequestState
 @property  @? completionBlock

  // instance methods
  -[_MPStoreSocialTransientState .cxx_destruct]
  -[_MPStoreSocialTransientState person]
  -[_MPStoreSocialTransientState isEqual:]
  -[_MPStoreSocialTransientState followState]
  -[_MPStoreSocialTransientState _endIfNeeded]
  -[_MPStoreSocialTransientState followPendingRequestState]
  -[_MPStoreSocialTransientState initWithPerson:]
  -[_MPStoreSocialTransientState newOperationForTransientFollowState:completion:]
  -[_MPStoreSocialTransientState newOperationForTransientFollowPendingRequestState:completion:]
  -[_MPStoreSocialTransientState completionBlock]
  -[_MPStoreSocialTransientState setCompletionBlock:]


MPStoreSocialServiceTransientStatesSnapshot : NSObject
  // instance methods
  -[MPStoreSocialServiceTransientStatesSnapshot .cxx_destruct]
  -[MPStoreSocialServiceTransientStatesSnapshot init]
  -[MPStoreSocialServiceTransientStatesSnapshot _addTransientFollowState:transientFollowPendingRequestState:forPerson:]
  -[MPStoreSocialServiceTransientStatesSnapshot transientFollowStateForPerson:]
  -[MPStoreSocialServiceTransientStatesSnapshot transientFollowPendingRequestStateForPerson:]


_MPMediaLibraryEntityPropertyTranslator : NSObject
 @property  {shared_ptr<std::map<std::string propertiesToFetchMap
 @property  {shared_ptr<std::map<std::string propertiesToSortMap
 @property  @? sortTransformer
 @property  @? valueTransformer

  // instance methods
  -[_MPMediaLibraryEntityPropertyTranslator propertiesToFetchMap]
  -[_MPMediaLibraryEntityPropertyTranslator .cxx_construct]
  -[_MPMediaLibraryEntityPropertyTranslator .cxx_destruct]
  -[_MPMediaLibraryEntityPropertyTranslator propertiesToSortMap]
  -[_MPMediaLibraryEntityPropertyTranslator setPropertiesToSortMap:]
  -[_MPMediaLibraryEntityPropertyTranslator setValueTransformer:]
  -[_MPMediaLibraryEntityPropertyTranslator valueTransformer]
  -[_MPMediaLibraryEntityPropertyTranslator sortTransformer]
  -[_MPMediaLibraryEntityPropertyTranslator setPropertiesToFetchMap:]
  -[_MPMediaLibraryEntityPropertyTranslator setSortTransformer:]


_MPMediaLibraryEntityRelationshipTranslator : NSObject
 @property  Class relationshipModelClass
 @property  BOOL transient
 @property  ^v foreignPropertyBase
 @property  {shared_ptr<std::map<std::string relationshipValidationProperties
 @property  @? validRelationshipHandler
 @property  MPMediaLibraryEntityTranslator *entityTranslator

  // instance methods
  -[_MPMediaLibraryEntityRelationshipTranslator setTransient:]
  -[_MPMediaLibraryEntityRelationshipTranslator setRelationshipValidationProperties:]
  -[_MPMediaLibraryEntityRelationshipTranslator entityTranslator]
  -[_MPMediaLibraryEntityRelationshipTranslator .cxx_construct]
  -[_MPMediaLibraryEntityRelationshipTranslator relationshipModelClass]
  -[_MPMediaLibraryEntityRelationshipTranslator .cxx_destruct]
  -[_MPMediaLibraryEntityRelationshipTranslator setForeignPropertyBase:]
  -[_MPMediaLibraryEntityRelationshipTranslator setRelationshipModelClass:]
  -[_MPMediaLibraryEntityRelationshipTranslator validRelationshipHandler]
  -[_MPMediaLibraryEntityRelationshipTranslator foreignPropertyBase]
  -[_MPMediaLibraryEntityRelationshipTranslator transient]
  -[_MPMediaLibraryEntityRelationshipTranslator setValidRelationshipHandler:]
  -[_MPMediaLibraryEntityRelationshipTranslator relationshipValidationProperties]


MPMediaLibraryEntityTranslator : NSObject
 @property  Class MPModelClass
 @property  BOOL transient
 @property  ^v entityClass
 @property  @? allowedItemPredicatesBlock
 @property  @? entityQueryBlock

  // class methods
  +[MPMediaLibraryEntityTranslator translatorForTransientMPModelClass:]
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:mlcoreEntityClass:]
  +[MPMediaLibraryEntityTranslator translatorForMPModelClass:]
  +[MPMediaLibraryEntityTranslator _translatorForMPModelClass:mlcoreEntityClass:create:transient:]

  // instance methods
  -[MPMediaLibraryEntityTranslator entityClass]
  -[MPMediaLibraryEntityTranslator entityQueryBlock]
  -[MPMediaLibraryEntityTranslator objectForPropertySet:entity:context:]
  -[MPMediaLibraryEntityTranslator mapPropertyKey:toMLProperty:]
  -[MPMediaLibraryEntityTranslator mapPropertyKey:withPropertiesToFetch:propertiesToSort:sortTransformer:valueTransformer:]
  -[MPMediaLibraryEntityTranslator mapPropertyKey:withPropertiesToFetch:valueTransformer:]
  -[MPMediaLibraryEntityTranslator _propertyTranslatorForKeyPath:]
  -[MPMediaLibraryEntityTranslator .cxx_destruct]
  -[MPMediaLibraryEntityTranslator isTransient]
  -[MPMediaLibraryEntityTranslator propertiesQueryForPropertySet:scopedContainers:allowedItemIdentifiers:view:]
  -[MPMediaLibraryEntityTranslator identifiersForEntity:context:]
  -[MPMediaLibraryEntityTranslator allowedItemPredicatesBlock]
  -[MPMediaLibraryEntityTranslator MLCorePropertiesForPropertySet:]
  -[MPMediaLibraryEntityTranslator entityQueryForPropertySet:sortDescriptors:context:view:]
  -[MPMediaLibraryEntityTranslator _valueForKeyPath:forEntity:context:]
  -[MPMediaLibraryEntityTranslator MPModelClass]
  -[MPMediaLibraryEntityTranslator mapIdentifierMLProperties:identifierCreationBlock:]
  -[MPMediaLibraryEntityTranslator mapRelationshipKey:toModelClass:usingForeignPropertyBase:]
  -[MPMediaLibraryEntityTranslator classForRelationshipKey:]
  -[MPMediaLibraryEntityTranslator MLCoreSortDescriptorsForModelSortDescriptors:]
  -[MPMediaLibraryEntityTranslator _propertyMapForKeyPath:includePropertiesToSort:]
  -[MPMediaLibraryEntityTranslator setAllowedItemPredicatesBlock:]
  -[MPMediaLibraryEntityTranslator _propertyForKeyPath:]
  -[MPMediaLibraryEntityTranslator _MLCorePropertiesForPropertySet:withForeignPropertyBase:]
  -[MPMediaLibraryEntityTranslator propertiesToFetchForPropertyKey:]
  -[MPMediaLibraryEntityTranslator setEntityQueryBlock:]
  -[MPMediaLibraryEntityTranslator mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:]
  -[MPMediaLibraryEntityTranslator _objectForPropertySet:entity:baseTranslator:prependKeyPath:context:]
  -[MPMediaLibraryEntityTranslator mapRelationshipKey:toModelClass:transient:usingForeignPropertyBase:relationshipValidationProperties:isValidRelationshipHandler:]


MPMediaLibraryEntityTranslationContext : NSObject
 @property  MPMediaLibrary *mediaLibrary
 @property  NSArray *allowedEntityIdentifiers
 @property  NSArray *scopedContainers
 @property  BOOL multiQuery
 @property  unsigned long filteringOptions
 @property  MPModelKind *modelKind
 @property  NSString *personID
 @property  NSString *filterText

  // instance methods
  -[MPMediaLibraryEntityTranslationContext setMediaLibrary:]
  -[MPMediaLibraryEntityTranslationContext setPersonID:]
  -[MPMediaLibraryEntityTranslationContext personID]
  -[MPMediaLibraryEntityTranslationContext mediaLibrary]
  -[MPMediaLibraryEntityTranslationContext .cxx_destruct]
  -[MPMediaLibraryEntityTranslationContext setScopedContainers:]
  -[MPMediaLibraryEntityTranslationContext setModelKind:]
  -[MPMediaLibraryEntityTranslationContext setFilterText:]
  -[MPMediaLibraryEntityTranslationContext filterText]
  -[MPMediaLibraryEntityTranslationContext scopedContainers]
  -[MPMediaLibraryEntityTranslationContext allowedEntityIdentifiers]
  -[MPMediaLibraryEntityTranslationContext isMultiQuery]
  -[MPMediaLibraryEntityTranslationContext setMultiQuery:]
  -[MPMediaLibraryEntityTranslationContext modelKind]
  -[MPMediaLibraryEntityTranslationContext filteringOptions]
  -[MPMediaLibraryEntityTranslationContext setAllowedEntityIdentifiers:]
  -[MPMediaLibraryEntityTranslationContext setFilteringOptions:]


MPStoreModelMovieBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelMovieBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelMovieBuilder .cxx_destruct]
  -[MPStoreModelMovieBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPIdentifierSet : NSObject <MPMutableLocalLibraryIdentifiers, MPMutablePersonalStoreIdentifiers, MPMutableUniversalStoreIdentifiers, MPMutableRadioIdentifiers, MPMutableIdentifierSet, NSCopying, NSSecureCoding>
 @property  NSString *containerUniqueID
 @property  NSString *handoffCorrelationID
 @property  NSString *lyricsID
 @property  BOOL shouldExcludeFromShuffle
 @property  BOOL placeholder
 @property  NSString *vendorID
 @property  NSString *humanDescription
 @property  BOOL needsPersonalization
 @property  NSString *globalPlaylistID
 @property  long long deviceLibraryPersistentID
 @property  long long storeAdamID
 @property  long long storeSubscriptionAdamID
 @property  NSString *radioStationStringID
 @property  long long radioStationID
 @property  long long storePurchasedAdamID
 @property  NSString *cloudUniversalLibraryID
 @property  long long syncID
 @property  NSString *contentItemID
 @property  NSArray *formerStoreAdamIDs
 @property  NSString *socialProfileID
 @property  NSString *storeCloudAlbumID
 @property  unsigned long storeCloudID
 @property  NSString *radioStationHash
 @property  NSString *storeRecommendationID
 @property  NSString *informalMediaClipID
 @property  NSString *informalStaticAssetID
 @property  MPModelKind *modelKind
 @property  <MPLocalLibraryIdentifiers> *library
 @property  <MPPersonalStoreIdentifiers> *personalizedStore
 @property  <MPUniversalStoreIdentifiers> *universalStore
 @property  <MPRadioIdentifiers> *radio
 @property  long long persistentID
 @property  long long containedPersistentID
 @property  NSString *databaseID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long cloudID
 @property  NSString *cloudAlbumID
 @property  NSString *recommendationID
 @property  NSString *playbackAuthorizationToken
 @property  NSString *personID
 @property  long long adamID
 @property  NSArray *formerAdamIDs
 @property  NSString *universalCloudLibraryID
 @property  long long purchasedAdamID
 @property  long long subscriptionAdamID
 @property  long long reportingAdamID
 @property  long long assetAdamID
 @property  NSString *stationStringID
 @property  NSString *stationHash
 @property  long long stationID
 @property  NSString *stationEventID

  // class methods
  +[MPIdentifierSet supportsSecureCoding]
  +[MPIdentifierSet emptyIdentifierSet]

  // instance methods
  -[MPIdentifierSet adamID]
  -[MPIdentifierSet personID]
  -[MPIdentifierSet formerStoreAdamIDs]
  -[MPIdentifierSet radio]
  -[MPIdentifierSet preferredStoreStringIdentifierForPersonID:]
  -[MPIdentifierSet initWithCoder:]
  -[MPIdentifierSet setVendorID:]
  -[MPIdentifierSet intersectsSet:]
  -[MPIdentifierSet cloudAlbumID]
  -[MPIdentifierSet library]
  -[MPIdentifierSet informalMediaClipID]
  -[MPIdentifierSet cloudID]
  -[MPIdentifierSet purchasedAdamID]
  -[MPIdentifierSet informalStaticAssetID]
  -[MPIdentifierSet syncID]
  -[MPIdentifierSet globalPlaylistID]
  -[MPIdentifierSet setGlobalPlaylistID:]
  -[MPIdentifierSet .cxx_destruct]
  -[MPIdentifierSet cloudUniversalLibraryID]
  -[MPIdentifierSet humanDescription]
  -[MPIdentifierSet setSubscriptionAdamID:]
  -[MPIdentifierSet setCloudAlbumID:]
  -[MPIdentifierSet universalCloudLibraryID]
  -[MPIdentifierSet setUniversalCloudLibraryID:]
  -[MPIdentifierSet persistentID]
  -[MPIdentifierSet storeCloudID]
  -[MPIdentifierSet setStoreCloudID:]
  -[MPIdentifierSet setCloudUniversalLibraryID:]
  -[MPIdentifierSet setStoreSubscriptionAdamID:]
  -[MPIdentifierSet setStorePurchasedAdamID:]
  -[MPIdentifierSet vendorID]
  -[MPIdentifierSet setSyncID:]
  -[MPIdentifierSet universalStore]
  -[MPIdentifierSet radioStationStringID]
  -[MPIdentifierSet setPurchasedAdamID:]
  -[MPIdentifierSet setInformalMediaClipID:]
  -[MPIdentifierSet setInformalStaticAssetID:]
  -[MPIdentifierSet setAssetAdamID:]
  -[MPIdentifierSet setShouldExcludeFromShuffle:]
  -[MPIdentifierSet setReportingAdamID:]
  -[MPIdentifierSet setContainedPersistentID:]
  -[MPIdentifierSet setHandoffCorrelationID:]
  -[MPIdentifierSet initWithBlock:]
  -[MPIdentifierSet setCloudID:]
  -[MPIdentifierSet isEqual:]
  -[MPIdentifierSet setLibraryIdentifiersWithDatabaseID:block:]
  -[MPIdentifierSet initWithModelKind:block:]
  -[MPIdentifierSet contentItemID]
  -[MPIdentifierSet _stateDumpObject]
  -[MPIdentifierSet storeSubscriptionAdamID]
  -[MPIdentifierSet stationStringID]
  -[MPIdentifierSet personalizedStore]
  -[MPIdentifierSet containerUniqueID]
  -[MPIdentifierSet storePurchasedAdamID]
  -[MPIdentifierSet stationHash]
  -[MPIdentifierSet lyricsID]
  -[MPIdentifierSet setContentItemID:]
  -[MPIdentifierSet setStationID:]
  -[MPIdentifierSet assetAdamID]
  -[MPIdentifierSet stationID]
  -[MPIdentifierSet stationEventID]
  -[MPIdentifierSet _initWithModelKind:block:]
  -[MPIdentifierSet containedPersistentID]
  -[MPIdentifierSet recommendationID]
  -[MPIdentifierSet handoffCorrelationID]
  -[MPIdentifierSet shouldExcludeFromShuffle]
  -[MPIdentifierSet identifierDescriptions:]
  -[MPIdentifierSet setStationHash:]
  -[MPIdentifierSet reportingAdamID]
  -[MPIdentifierSet clearLibraryIdentifiers]
  -[MPIdentifierSet clearPersonalStoreIdentifiers]
  -[MPIdentifierSet _setDefaultDatabaseIDIfNeeded]
  -[MPIdentifierSet _setDefaultPersonIDIfNeeded]
  -[MPIdentifierSet clearUniversalStoreIdentifiers]
  -[MPIdentifierSet clearRadioIdentifiers]
  -[MPIdentifierSet playbackAuthorizationToken]
  -[MPIdentifierSet hasCommonIdentifierWithIdentifierSet:]
  -[MPIdentifierSet deviceLibraryPersistentID]
  -[MPIdentifierSet setDeviceLibraryPersistentID:]
  -[MPIdentifierSet setRadioStationStringID:]
  -[MPIdentifierSet radioStationHash]
  -[MPIdentifierSet setRadioStationHash:]
  -[MPIdentifierSet radioStationID]
  -[MPIdentifierSet setRadioStationID:]
  -[MPIdentifierSet setStoreAdamID:]
  -[MPIdentifierSet setFormerStoreAdamIDs:]
  -[MPIdentifierSet storeCloudAlbumID]
  -[MPIdentifierSet setStoreCloudAlbumID:]
  -[MPIdentifierSet storeRecommendationID]
  -[MPIdentifierSet setStoreRecommendationID:]
  -[MPIdentifierSet needsPersonalization]
  -[MPIdentifierSet modelKind]
  -[MPIdentifierSet copyWithBlock:]
  -[MPIdentifierSet setStationStringID:]
  -[MPIdentifierSet setRadioIdentifiersWithBlock:]
  -[MPIdentifierSet socialProfileID]
  -[MPIdentifierSet storeAdamID]
  -[MPIdentifierSet unionSet:]
  -[MPIdentifierSet setStationEventID:]
  -[MPIdentifierSet setSocialProfileID:]
  -[MPIdentifierSet setLyricsID:]
  -[MPIdentifierSet databaseID]
  -[MPIdentifierSet formerAdamIDs]
  -[MPIdentifierSet setFormerAdamIDs:]
  -[MPIdentifierSet setUniversalStoreIdentifiersWithBlock:]
  -[MPIdentifierSet setPersonalStoreIdentifiersWithPersonID:block:]
  -[MPIdentifierSet subscriptionAdamID]
  -[MPIdentifierSet setPersistentID:]
  -[MPIdentifierSet copyWithZone:]
  -[MPIdentifierSet isPlaceholder]
  -[MPIdentifierSet setPlaceholder:]
  -[MPIdentifierSet setAdamID:]
  -[MPIdentifierSet setPlaybackAuthorizationToken:]
  -[MPIdentifierSet prioritizedStoreStringIdentifiersForPersonID:]
  -[MPIdentifierSet encodeWithCoder:]
  -[MPIdentifierSet setRecommendationID:]
  -[MPIdentifierSet setContainerUniqueID:]


MPModelLibraryIncrementPlayCountChangeRequest : NSObject
 @property  MPMediaLibrary *mediaLibrary
 @property  MPModelObject *model

  // instance methods
  -[MPModelLibraryIncrementPlayCountChangeRequest setMediaLibrary:]
  -[MPModelLibraryIncrementPlayCountChangeRequest newOperationWithResponseHandler:]
  -[MPModelLibraryIncrementPlayCountChangeRequest mediaLibrary]
  -[MPModelLibraryIncrementPlayCountChangeRequest .cxx_destruct]
  -[MPModelLibraryIncrementPlayCountChangeRequest model]
  -[MPModelLibraryIncrementPlayCountChangeRequest initWithModel:]


MPAVClippingTableViewCell : UITableViewCell
 @property  UIView *clippingContentView
 @property  UIView *clippingMaskView
 @property  {UIEdgeInsets=dddd} clippingInsets
 @property  UIView *topSeparatorView
 @property  UIView *bottomSeparatorView
 @property  BOOL shouldHideSectionBottomSeparator

  // instance methods
  -[MPAVClippingTableViewCell _setShouldHaveFullLengthBottomSeparator:]
  -[MPAVClippingTableViewCell _setShouldHaveFullLengthTopSeparator:]
  -[MPAVClippingTableViewCell .cxx_destruct]
  -[MPAVClippingTableViewCell layoutSubviews]
  -[MPAVClippingTableViewCell setShouldHideSectionBottomSeparator:]
  -[MPAVClippingTableViewCell prepareForReuse]
  -[MPAVClippingTableViewCell clippingInsets]
  -[MPAVClippingTableViewCell topSeparatorView]
  -[MPAVClippingTableViewCell shouldHideSectionBottomSeparator]
  -[MPAVClippingTableViewCell clippingContentView]
  -[MPAVClippingTableViewCell setClippingContentView:]
  -[MPAVClippingTableViewCell clippingMaskView]
  -[MPAVClippingTableViewCell setClippingMaskView:]
  -[MPAVClippingTableViewCell bottomSeparatorView]
  -[MPAVClippingTableViewCell setAccessoryView:]
  -[MPAVClippingTableViewCell initWithStyle:reuseIdentifier:]
  -[MPAVClippingTableViewCell setClippingInsets:]
  -[MPAVClippingTableViewCell dealloc]


MPModelSharedListeningParticipantKind : MPModelKind
  // class methods
  +[MPModelSharedListeningParticipantKind identityKind]

  // instance methods
  -[MPModelSharedListeningParticipantKind humanDescription]


MPModelSharedListeningParticipant : MPModelPerson
 @property  @? artworkCatalogBlock

  // class methods
  +[MPModelSharedListeningParticipant __artworkCatalogBlock_KEY]
  +[MPModelSharedListeningParticipant kind]

  // instance methods
  -[MPModelSharedListeningParticipant artworkCatalog]


MPModelPodcastEpisodeKind : MPModelKind
 @property  unsigned long variants
 @property  unsigned long options

  // class methods
  +[MPModelPodcastEpisodeKind supportsSecureCoding]
  +[MPModelPodcastEpisodeKind identityKind]
  +[MPModelPodcastEpisodeKind kindWithVariants:options:]

  // instance methods
  -[MPModelPodcastEpisodeKind variants]
  -[MPModelPodcastEpisodeKind predicateWithBaseProperty:]
  -[MPModelPodcastEpisodeKind initWithCoder:]
  -[MPModelPodcastEpisodeKind options]
  -[MPModelPodcastEpisodeKind humanDescription]
  -[MPModelPodcastEpisodeKind isEqual:]
  -[MPModelPodcastEpisodeKind encodeWithCoder:]


MPModelPodcastEpisode : MPModelObject
 @property  NSString *title
 @property  NSDateComponents *releaseDateComponents
 @property  double duration
 @property  float userRating
 @property  BOOL explicitEpisode
 @property  NSString *descriptionText
 @property  NSString *commentText
 @property  NSDate *datePlayed
 @property  NSURL *streamURL
 @property  NSURL *shareURL
 @property  MPModelFileAsset *localFileAsset
 @property  MPModelPodcast *podcast
 @property  MPModelPlaybackPosition *playbackPosition
 @property  MPModelPodcastAuthor *author
 @property  @? artworkCatalogBlock
 @property  BOOL hasVideo
 @property  long long episodeType
 @property  long long episodeNumber
 @property  long long seasonNumber

  // class methods
  +[MPModelPodcastEpisode __artworkCatalogBlock_KEY]
  +[MPModelPodcastEpisode genericObjectType]
  +[MPModelPodcastEpisode __podcast_KEY]
  +[MPModelPodcastEpisode __descriptionText_KEY]
  +[MPModelPodcastEpisode __episodeNumber_KEY]
  +[MPModelPodcastEpisode __episodeType_KEY]
  +[MPModelPodcastEpisode __releaseDateComponents_KEY]
  +[MPModelPodcastEpisode kindWithVariants:]
  +[MPModelPodcastEpisode __streamURL_KEY]
  +[MPModelPodcastEpisode __explicitEpisode_KEY]
  +[MPModelPodcastEpisode __seasonNumber_KEY]
  +[MPModelPodcastEpisode __title_KEY]
  +[MPModelPodcastEpisode __duration_KEY]
  +[MPModelPodcastEpisode __hasVideo_KEY]
  +[MPModelPodcastEpisode __localFileAsset_KEY]
  +[MPModelPodcastEpisode __userRating_KEY]
  +[MPModelPodcastEpisode __playbackPosition_KEY]
  +[MPModelPodcastEpisode __shareURL_KEY]
  +[MPModelPodcastEpisode __author_KEY]
  +[MPModelPodcastEpisode kindWithVariants:options:]
  +[MPModelPodcastEpisode __datePlayed_KEY]

  // instance methods
  -[MPModelPodcastEpisode .cxx_destruct]
  -[MPModelPodcastEpisode humanDescription]
  -[MPModelPodcastEpisode commentText]
  -[MPModelPodcastEpisode setCommentText:]
  -[MPModelPodcastEpisode artworkCatalog]


MPRouteLabel : UIView
 @property  BSUIEmojiLabelView *contentView
 @property  long long minimumEndCharacterCount
 @property  NSString *text
 @property  long long truncationMode
 @property  BOOL forcesUppercaseText
 @property  BOOL displayAsSiriSuggestion
 @property  MPAVRoute *route
 @property  UILabel *titleLabel
 @property  UIColor *textColor
 @property  UIFont *font
 @property  double _baselineOffsetFromBottom
 @property  long long textAlignment
 @property  BOOL _textColorFollowsTintColor

  // instance methods
  -[MPRouteLabel titleLabel]
  -[MPRouteLabel setForcesUppercaseText:]
  -[MPRouteLabel _routeNamesSortedAlphanumeric:]
  -[MPRouteLabel route]
  -[MPRouteLabel setFont:]
  -[MPRouteLabel _updateTitleIfNeeded]
  -[MPRouteLabel .cxx_destruct]
  -[MPRouteLabel _baselineOffsetFromBottom]
  -[MPRouteLabel textColor]
  -[MPRouteLabel _formattedRouteNameForDesignatedGroupLeaderNameText:routeNamesText:]
  -[MPRouteLabel layoutSubviews]
  -[MPRouteLabel contentView]
  -[MPRouteLabel setTextAlignment:]
  -[MPRouteLabel _setTextColorFollowsTintColor:]
  -[MPRouteLabel _routeNamesSortedLength:]
  -[MPRouteLabel _updateRouteLabel]
  -[MPRouteLabel _marketingNames]
  -[MPRouteLabel textAlignment]
  -[MPRouteLabel minimumEndCharacterCount]
  -[MPRouteLabel sizeThatFits:]
  -[MPRouteLabel setTextColor:]
  -[MPRouteLabel _truncateText:by:]
  -[MPRouteLabel removeRouteNamesFromArray:]
  -[MPRouteLabel font]
  -[MPRouteLabel _routeDidChangeNotification:]
  -[MPRouteLabel _compareLength:with:]
  -[MPRouteLabel setDisplayAsSiriSuggestion:]
  -[MPRouteLabel forcesUppercaseText]
  -[MPRouteLabel truncationMode]
  -[MPRouteLabel initWithFrame:]
  -[MPRouteLabel setMinimumEndCharacterCount:]
  -[MPRouteLabel _plusSeparatedRouteNames:]
  -[MPRouteLabel setRoute:]
  -[MPRouteLabel _labelFitsText:withSize:]
  -[MPRouteLabel addRouteNamesFromArray:]
  -[MPRouteLabel _textColorFollowsTintColor]
  -[MPRouteLabel _bestStringThatFitsSize:]
  -[MPRouteLabel setContentView:]
  -[MPRouteLabel removeRouteName:]
  -[MPRouteLabel setTruncationMode:]
  -[MPRouteLabel text]
  -[MPRouteLabel intrinsicContentSize]
  -[MPRouteLabel displayAsSiriSuggestion]
  -[MPRouteLabel _labelSizeForText:]
  -[MPRouteLabel addRouteName:]


MPArtworkConfiguration : NSObject
 @property  ML3ArtworkConfiguration *artworkConfiguration

  // class methods
  +[MPArtworkConfiguration systemConfiguration]

  // instance methods
  -[MPArtworkConfiguration .cxx_destruct]
  -[MPArtworkConfiguration setArtworkConfiguration:]
  -[MPArtworkConfiguration initWithConfigurationDictionaries:]
  -[MPArtworkConfiguration artworkConfiguration]
  -[MPArtworkConfiguration sizesToAutogenerateForMediaType:artworkType:]
  -[MPArtworkConfiguration supportedSizesForMediaType:artworkType:]


MPRTCReportingNetworkInterfaceChangeEvent : MPRTCReportingEvent
  // instance methods
  -[MPRTCReportingNetworkInterfaceChangeEvent rtcReportingCategory]


MPMediaAPICollectionItemMetadataRequestInfo : NSObject
 @property  NSArray *collectionItemRequests
 @property  NSArray *tokenRenewalRequests
 @property  NSArray *collectionRequests
 @property  unsigned long totalRequestItemCount

  // instance methods
  -[MPMediaAPICollectionItemMetadataRequestInfo initWithMediaAPICollectionItemMetadataRequests:collectionMetadataRequest:authTokenRenewalRequests:totalItemRequestCount:]
  -[MPMediaAPICollectionItemMetadataRequestInfo .cxx_destruct]
  -[MPMediaAPICollectionItemMetadataRequestInfo collectionItemRequests]
  -[MPMediaAPICollectionItemMetadataRequestInfo tokenRenewalRequests]
  -[MPMediaAPICollectionItemMetadataRequestInfo collectionRequests]
  -[MPMediaAPICollectionItemMetadataRequestInfo totalRequestItemCount]


MPRestrictionsMonitor : NSObject <MCProfileConnectionObserver>
 @property  long long maximumTVShowRatingForAgeGate
 @property  long long maximumMovieRatingForAgeGate
 @property  BOOL allowsAccountModification
 @property  BOOL allowsDeletion
 @property  BOOL allowsExplicitContent
 @property  BOOL allowsMusicSubscription
 @property  BOOL allowsStorePurchases
 @property  BOOL allowsRadioPurchases
 @property  BOOL allowsRadioService
 @property  BOOL allowsMusicVideos
 @property  long long maximumTVShowRating
 @property  long long maximumMovieRating
 @property  BOOL hasRestrictionsPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPRestrictionsMonitor sharedRestrictionsMonitor]

  // instance methods
  -[MPRestrictionsMonitor allowsMusicSubscription]
  -[MPRestrictionsMonitor allowsAccountModification]
  -[MPRestrictionsMonitor maximumTVShowRatingForAgeGate]
  -[MPRestrictionsMonitor _cacheValue:forSetting:]
  -[MPRestrictionsMonitor handleAllowExplicitSettingDidChangeNotification:]
  -[MPRestrictionsMonitor .cxx_destruct]
  -[MPRestrictionsMonitor allowsMusicVideos]
  -[MPRestrictionsMonitor allowsDeletion]
  -[MPRestrictionsMonitor allowsStorePurchases]
  -[MPRestrictionsMonitor init]
  -[MPRestrictionsMonitor profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[MPRestrictionsMonitor allowsExplicitContent]
  -[MPRestrictionsMonitor _isRunningInStoreDemoMode]
  -[MPRestrictionsMonitor effectiveValueForSetting:]
  -[MPRestrictionsMonitor maximumMovieRatingForAgeGate]
  -[MPRestrictionsMonitor setMaximumTVShowRatingForAgeGate:]
  -[MPRestrictionsMonitor allowsRadioService]
  -[MPRestrictionsMonitor maximumTVShowRating]
  -[MPRestrictionsMonitor maximumMovieRating]
  -[MPRestrictionsMonitor _updateWithCanPostNotifications:]
  -[MPRestrictionsMonitor hasRestrictionsPasscode]
  -[MPRestrictionsMonitor dealloc]
  -[MPRestrictionsMonitor allowsRadioPurchases]
  -[MPRestrictionsMonitor setMaximumMovieRatingForAgeGate:]


MPVolumeControllerSystemDataSource : NSObject <MPVolumeControllerDataSource>
 @property  NSString *volumeAudioCategory
 @property  <MPVolumeControllerDataSourceDelegate> *delegate
 @property  BOOL applicationShouldOverrideHardwareVolumeBehavior
 @property  NSString *volumeControlLabel
 @property  BOOL volumeControlAvailable
 @property  float volume
 @property  BOOL muted
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  float EUVolumeLimit
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPVolumeControllerSystemDataSource _tearDown]
  -[MPVolumeControllerSystemDataSource _volumeApplyingEUVolumePolicyToVolume:]
  -[MPVolumeControllerSystemDataSource _setup]
  -[MPVolumeControllerSystemDataSource setMuted:]
  -[MPVolumeControllerSystemDataSource volumeAudioCategory]
  -[MPVolumeControllerSystemDataSource isMuted]
  -[MPVolumeControllerSystemDataSource volume]
  -[MPVolumeControllerSystemDataSource isVolumeControlAvailable]
  -[MPVolumeControllerSystemDataSource setVolume:]
  -[MPVolumeControllerSystemDataSource _reloadQueue]
  -[MPVolumeControllerSystemDataSource volumeControlLabel]
  -[MPVolumeControllerSystemDataSource _EUVolumeLimitDidChange:]
  -[MPVolumeControllerSystemDataSource _mediaPlaybackVolumeAudioCategory]
  -[MPVolumeControllerSystemDataSource _updateRouteLabelForRoute:]
  -[MPVolumeControllerSystemDataSource applicationShouldOverrideHardwareVolumeBehavior]
  -[MPVolumeControllerSystemDataSource .cxx_destruct]
  -[MPVolumeControllerSystemDataSource _reloadEUVolumeLimits]
  -[MPVolumeControllerSystemDataSource setDelegate:]
  -[MPVolumeControllerSystemDataSource setVolumeAudioCategory:]
  -[MPVolumeControllerSystemDataSource _mediaServerDiedNotification:]
  -[MPVolumeControllerSystemDataSource EUVolumeLimit]
  -[MPVolumeControllerSystemDataSource initializeVolume]
  -[MPVolumeControllerSystemDataSource init]
  -[MPVolumeControllerSystemDataSource _systemMuteDidChange:]
  -[MPVolumeControllerSystemDataSource _EUVolumeLimitEnforcedDidChange:]
  -[MPVolumeControllerSystemDataSource _routeDidChangeNotification:]
  -[MPVolumeControllerSystemDataSource _volumeDidChangeNotification:]
  -[MPVolumeControllerSystemDataSource volumeWarningState]
  -[MPVolumeControllerSystemDataSource getVolumeValueWithCompletion:]
  -[MPVolumeControllerSystemDataSource updateVolumeControlCapabilities:]
  -[MPVolumeControllerSystemDataSource delegate]
  -[MPVolumeControllerSystemDataSource reloadWarning]
  -[MPVolumeControllerSystemDataSource dealloc]
  -[MPVolumeControllerSystemDataSource _volumeControlCapabilitiesDidChangeNotification:]
  -[MPVolumeControllerSystemDataSource _systemVolumeDidChange:]
  -[MPVolumeControllerSystemDataSource volumeWarningEnabled]
  -[MPVolumeControllerSystemDataSource updateVolume:]
  -[MPVolumeControllerSystemDataSource adjustVolumeValue:]
  -[MPVolumeControllerSystemDataSource reload]


MPVolumeControllerRouteDataSource : NSObject <MPVolumeControllerDataSource>
 @property  MPAVRoute *groupRoute
 @property  MPAVRoute *outputDeviceRoute
 @property  <MPVolumeControllerDataSourceDelegate> *delegate
 @property  BOOL applicationShouldOverrideHardwareVolumeBehavior
 @property  NSString *volumeControlLabel
 @property  BOOL volumeControlAvailable
 @property  float volume
 @property  BOOL muted
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  float EUVolumeLimit
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPVolumeControllerRouteDataSource setMuted:]
  -[MPVolumeControllerRouteDataSource isMuted]
  -[MPVolumeControllerRouteDataSource _updateVolumeControlCapabilities:]
  -[MPVolumeControllerRouteDataSource volume]
  -[MPVolumeControllerRouteDataSource isVolumeControlAvailable]
  -[MPVolumeControllerRouteDataSource setVolume:]
  -[MPVolumeControllerRouteDataSource volumeControlLabel]
  -[MPVolumeControllerRouteDataSource beginDecreasingRelativeVolume]
  -[MPVolumeControllerRouteDataSource setGroupRoute:]
  -[MPVolumeControllerRouteDataSource endIncreasingRelativeVolume]
  -[MPVolumeControllerRouteDataSource _routeVolumeControlCapabilitiesDidChangeNotification:]
  -[MPVolumeControllerRouteDataSource applicationShouldOverrideHardwareVolumeBehavior]
  -[MPVolumeControllerRouteDataSource .cxx_destruct]
  -[MPVolumeControllerRouteDataSource groupRoute]
  -[MPVolumeControllerRouteDataSource setDelegate:]
  -[MPVolumeControllerRouteDataSource EUVolumeLimit]
  -[MPVolumeControllerRouteDataSource setOutputDeviceRoute:]
  -[MPVolumeControllerRouteDataSource initializeVolume]
  -[MPVolumeControllerRouteDataSource outputDeviceRoute]
  -[MPVolumeControllerRouteDataSource _routeVolumeDidChangeNotification:]
  -[MPVolumeControllerRouteDataSource endDecreasingRelativeVolume]
  -[MPVolumeControllerRouteDataSource volumeWarningState]
  -[MPVolumeControllerRouteDataSource getVolumeValueWithCompletion:]
  -[MPVolumeControllerRouteDataSource _sendVolumeButtonEventWithUsagePage:usage:down:]
  -[MPVolumeControllerRouteDataSource delegate]
  -[MPVolumeControllerRouteDataSource dealloc]
  -[MPVolumeControllerRouteDataSource initWithGroupRoute:outputDeviceRoute:]
  -[MPVolumeControllerRouteDataSource _setPendingVolumeIfNeeded]
  -[MPVolumeControllerRouteDataSource volumeWarningEnabled]
  -[MPVolumeControllerRouteDataSource beginIncreasingRelativeVolume]
  -[MPVolumeControllerRouteDataSource adjustVolumeValue:]
  -[MPVolumeControllerRouteDataSource reload]


MPStoreArtworkRequestToken : NSObject <NSSecureCoding, MPArtworkDataSourceVisualIdenticality>
 @property  long long artworkInfoType
 @property  ICStoreArtworkInfo *imageArtworkInfo
 @property  ICStoreVideoArtworkInfo *videoArtworkInfo
 @property  NSString *cropStyle
 @property  NSString *format
 @property  NSString *sourceEditorialArtworkKind
 @property  NSURL *artworkURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPStoreArtworkRequestToken supportsSecureCoding]
  +[MPStoreArtworkRequestToken tokenWithVideoArtworkInfo:]
  +[MPStoreArtworkRequestToken tokenWithImageArtworkInfo:]

  // instance methods
  -[MPStoreArtworkRequestToken artworkURL]
  -[MPStoreArtworkRequestToken imageArtworkInfo]
  -[MPStoreArtworkRequestToken setArtworkURL:]
  -[MPStoreArtworkRequestToken videoArtworkInfo]
  -[MPStoreArtworkRequestToken stringRepresentation]
  -[MPStoreArtworkRequestToken initWithCoder:]
  -[MPStoreArtworkRequestToken cropStyle]
  -[MPStoreArtworkRequestToken .cxx_destruct]
  -[MPStoreArtworkRequestToken setFormat:]
  -[MPStoreArtworkRequestToken setArtworkInfoType:]
  -[MPStoreArtworkRequestToken init]
  -[MPStoreArtworkRequestToken isEqual:]
  -[MPStoreArtworkRequestToken format]
  -[MPStoreArtworkRequestToken artworkInfoType]
  -[MPStoreArtworkRequestToken setImageArtworkInfo:]
  -[MPStoreArtworkRequestToken setVideoArtworkInfo:]
  -[MPStoreArtworkRequestToken setSourceEditorialArtworkKind:]
  -[MPStoreArtworkRequestToken copyWithZone:]
  -[MPStoreArtworkRequestToken sourceEditorialArtworkKind]
  -[MPStoreArtworkRequestToken setCropStyle:]
  -[MPStoreArtworkRequestToken encodeWithCoder:]


MPStoreDownload : NSObject
 @property  NSDictionary *attributes
 @property  long long bytesDownloaded
 @property  long long bytesTotal
 @property  BOOL canceled
 @property  long long downloadIdentifier
 @property  long long downloadSizeLimit
 @property  NSError *failureError
 @property  BOOL finished
 @property  BOOL purchasing
 @property  BOOL paused
 @property  unsigned long libraryItemIdentifier
 @property  double percentComplete
 @property  NSString *phaseIdentifier
 @property  NSError *purchaseError
 @property  long long reason
 @property  NSDictionary *rentalInformation
 @property  BOOL restore
 @property  long long storeItemIdentifier
 @property  long long type

  // class methods
  +[MPStoreDownload storeDownloadForMediaItem:type:attributes:]
  +[MPStoreDownload _SSPurchaseForType:attributes:]
  +[MPStoreDownload storeDownloadWithDownloadIdentifier:]

  // instance methods
  -[MPStoreDownload isCanceled]
  -[MPStoreDownload bytesTotal]
  -[MPStoreDownload isFinished]
  -[MPStoreDownload failureError]
  -[MPStoreDownload assetsForType:]
  -[MPStoreDownload .cxx_destruct]
  -[MPStoreDownload percentComplete]
  -[MPStoreDownload libraryItemIdentifier]
  -[MPStoreDownload isRestore]
  -[MPStoreDownload bytesDownloaded]
  -[MPStoreDownload _SSDownload]
  -[MPStoreDownload _SSPurchase]
  -[MPStoreDownload storeItemIdentifier]
  -[MPStoreDownload reason]
  -[MPStoreDownload isPurchasing]
  -[MPStoreDownload _setSSPurchase:SSPurchaseResponse:]
  -[MPStoreDownload initWithType:attributes:]
  -[MPStoreDownload _setSSDownload:]
  -[MPStoreDownload phaseIdentifier]
  -[MPStoreDownload purchaseError]
  -[MPStoreDownload downloadSizeLimit]
  -[MPStoreDownload _SSPurchaseResponse]
  -[MPStoreDownload _valueForDownloadProperty:]
  -[MPStoreDownload _currentOverridePhaseIdentifier]
  -[MPStoreDownload rentalInformation]
  -[MPStoreDownload _setCanceled:]
  -[MPStoreDownload resetCachedRentalInformation]
  -[MPStoreDownload _getDownloadFilePath]
  -[MPStoreDownload _setDownloadFilePath:]
  -[MPStoreDownload _addOverridePhaseIdentifier:]
  -[MPStoreDownload _removeOverridePhaseIdentifier:]
  -[MPStoreDownload type]
  -[MPStoreDownload downloadIdentifier]
  -[MPStoreDownload attributes]
  -[MPStoreDownload _isCanceled]
  -[MPStoreDownload isPaused]


MPStoreDownloadManager : NSObject <SSDownloadManagerObserver, SSPurchaseManagerDelegate, UIAlertViewDelegate, SSDownloadHandlerDelegate>
 @property  NSArray *activeDownloads
 @property  NSArray *downloads
 @property  NSArray *userDownloads
 @property  BOOL usingNetwork
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MPStoreDownloadManager sharedManager]

  // instance methods
  -[MPStoreDownloadManager activeDownloads]
  -[MPStoreDownloadManager downloads]
  -[MPStoreDownloadManager reloadFromServer]
  -[MPStoreDownloadManager isUsingNetwork]
  -[MPStoreDownloadManager requestPermissionToDownloadWithType:completionHandler:]
  -[MPStoreDownloadManager userDownloads]
  -[MPStoreDownloadManager resumeDownloads:]
  -[MPStoreDownloadManager downloadManager:downloadStatesDidChange:]
  -[MPStoreDownloadManager _sendDownloadsDidFinishPurchasesToObserversForDownloads:]
  -[MPStoreDownloadManager activeDownloadForStoreID:]
  -[MPStoreDownloadManager removeObserver:forDownloads:]
  -[MPStoreDownloadManager prioritizeDownloads:]
  -[MPStoreDownloadManager .cxx_destruct]
  -[MPStoreDownloadManager _sendDownloadsDidFinishToObserversForDownloads:notifyDownloadManager:completionHandler:]
  -[MPStoreDownloadManager _shouldHideDownload:]
  -[MPStoreDownloadManager _isActiveDownload:]
  -[MPStoreDownloadManager _sendDownloadsDidChangeToObserversWithAddedDownloads:removedDownloads:]
  -[MPStoreDownloadManager _updateDownloadsWithAdditions:removals:]
  -[MPStoreDownloadManager _sendActiveDownloadsDidChangeToObserversWithAddedDownloads:removedDownloads:]
  -[MPStoreDownloadManager init]
  -[MPStoreDownloadManager addFinishHandler:forDownloads:]
  -[MPStoreDownloadManager downloadForMediaItem:]
  -[MPStoreDownloadManager downloadForStoreID:]
  -[MPStoreDownloadManager downloadForDownloadPersistentIdentifier:]
  -[MPStoreDownloadManager downloadManagerNetworkUsageDidChange:]
  -[MPStoreDownloadManager _onQueue_addDownloadToMapTables:]
  -[MPStoreDownloadManager downloadForMediaItemPersistentID:]
  -[MPStoreDownloadManager _observersForAllDownloads]
  -[MPStoreDownloadManager _observersForDownload:]
  -[MPStoreDownloadManager _addPurchaseFinishedHandler:forDownloads:]
  -[MPStoreDownloadManager cancelDownloads:]
  -[MPStoreDownloadManager purchaseManager:didFinishPurchasesWithResponses:]
  -[MPStoreDownloadManager pauseDownloads:]
  -[MPStoreDownloadManager addDownloads:]
  -[MPStoreDownloadManager _onQueue_removeDownloadFromMapTables:]
  -[MPStoreDownloadManager _addNonCancelledDownloadsToActiveList:]
  -[MPStoreDownloadManager _updateActiveDownloadsWithChangedActiveDownloads:inactiveDownloads:]
  -[MPStoreDownloadManager _onQueue_findStoreDownloadWithSSDownload:SSPurchase:]
  -[MPStoreDownloadManager hasFetchedInitialDownloads]
  -[MPStoreDownloadManager _init]
  -[MPStoreDownloadManager activeDownloadForMediaItemPersistentID:]
  -[MPStoreDownloadManager dealloc]
  -[MPStoreDownloadManager _unregisterBlockObserver:]
  -[MPStoreDownloadManager _existingDownloadForSSDownload:]
  -[MPStoreDownloadManager _updateActiveDownloadsWithCancelledDownloads:]
  -[MPStoreDownloadManager _registerBlockObserver:]
  -[MPStoreDownloadManager _onQueue_hasExistingDownloadForStoreDownload:]
  -[MPStoreDownloadManager restartDownloads:]
  -[MPStoreDownloadManager _updateMediaItemPropertiesForFinishedStoreDownload:SSDownload:]
  -[MPStoreDownloadManager _sendDownloadsDidProgressToObserversForDownloads:]
  -[MPStoreDownloadManager addObserver:forDownloads:]


_MPStoreDownloadBlockObserver : NSObject <MPStoreDownloadManagerObserver>
 @property  @? didFinishDownloadHandler
 @property  @? didFinishPurchaseHandler
 @property  MPStoreDownload *download
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_MPStoreDownloadBlockObserver .cxx_destruct]
  -[_MPStoreDownloadBlockObserver downloadManager:downloadDidFinish:]
  -[_MPStoreDownloadBlockObserver downloadManager:downloadPurchaseDidFinish:]
  -[_MPStoreDownloadBlockObserver initWithDownload:]
  -[_MPStoreDownloadBlockObserver setDidFinishDownloadHandler:]
  -[_MPStoreDownloadBlockObserver setDidFinishPurchaseHandler:]
  -[_MPStoreDownloadBlockObserver didFinishDownloadHandler]
  -[_MPStoreDownloadBlockObserver didFinishPurchaseHandler]
  -[_MPStoreDownloadBlockObserver download]


MPStoreModelSocialPersonBuilder : MPStoreModelObjectBuilder
  // class methods
  +[MPStoreModelSocialPersonBuilder allSupportedProperties]

  // instance methods
  -[MPStoreModelSocialPersonBuilder modelObjectWithStoreItemMetadata:sourceModelObject:userIdentity:]


MPMediaAPICollectionMetadataRequest : NSObject <MPMediaAPIMetadaRequestProtocol>
 @property  BOOL shouldResolveRequestItemsLocally
 @property  NSUUID *requestIdentifier
 @property  long long requestItemCount
 @property  NSProgress *progress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MPMediaAPICollectionMetadataRequest requestIdentifier]
  -[MPMediaAPICollectionMetadataRequest .cxx_destruct]
  -[MPMediaAPICollectionMetadataRequest progress]
  -[MPMediaAPICollectionMetadataRequest _fetchContainerItemMetadataWithBatchProgressHandler:]
  -[MPMediaAPICollectionMetadataRequest initWithStoreID:collectionType:requestContext:]
  -[MPMediaAPICollectionMetadataRequest requestItemCount]
  -[MPMediaAPICollectionMetadataRequest _notifyBatchProgressWithResponseDictionary:tokenHalfLifeDuration:error:finalResponse:progressHandler:]
  -[MPMediaAPICollectionMetadataRequest cancelRequest]
  -[MPMediaAPICollectionMetadataRequest shouldResolveRequestItemsLocally]
  -[MPMediaAPICollectionMetadataRequest executeRequestWithBatchProgressHandler:]


MPModelAlbumKind : MPModelKind
 @property  unsigned long variants
 @property  MPModelSongKind *songKind
 @property  unsigned long options

  // class methods
  +[MPModelAlbumKind supportsSecureCoding]
  +[MPModelAlbumKind identityKind]
  +[MPModelAlbumKind kindWithVariants:songKind:options:]

  // instance methods
  -[MPModelAlbumKind variants]
  -[MPModelAlbumKind predicateWithBaseProperty:]
  -[MPModelAlbumKind initWithCoder:]
  -[MPModelAlbumKind options]
  -[MPModelAlbumKind .cxx_destruct]
  -[MPModelAlbumKind humanDescription]
  -[MPModelAlbumKind applyToView:withContext:]
  -[MPModelAlbumKind representedSearchScopePredicate]
  -[MPModelAlbumKind songKind]
  -[MPModelAlbumKind isEqual:]
  -[MPModelAlbumKind encodeWithCoder:]


MPModelAlbum : MPModelObject
 @property  NSString *title
 @property  MPModelArtist *artist
 @property  MPModelGenre *genre
 @property  long long trackCount
 @property  long long maximumItemTrackNumber
 @property  long long discCount
 @property  BOOL hasCleanContent
 @property  BOOL hasExplicitContent
 @property  BOOL compilation
 @property  BOOL classical
 @property  BOOL libraryAdded
 @property  NSDate *libraryAddedDate
 @property  BOOL libraryAddEligible
 @property  float volumeNormalization
 @property  NSDateComponents *releaseDateComponents
 @property  MPModelSong *representativeSong
 @property  long long year
 @property  @? artworkCatalogBlock
 @property  NSString *copyrightText
 @property  long long keepLocalEnableState
 @property  long long keepLocalManagedStatus
 @property  NSDate *lastDevicePlaybackDate
 @property  BOOL preorder
 @property  NSString *editorNotes
 @property  NSString *shortEditorNotes
 @property  NSString *versionHash
 @property  unsigned long traits
 @property  BOOL classicalExperienceAvailable
 @property  @? songPopularityBlock
 @property  NSDate *downloadedDate

  // class methods
  +[MPModelAlbum __artist_KEY]
  +[MPModelAlbum __classicalExperienceAvailable_KEY]
  +[MPModelAlbum __artworkCatalogBlock_KEY]
  +[MPModelAlbum genericObjectType]
  +[MPModelAlbum __hasCleanContent_KEY]
  +[MPModelAlbum __releaseDateComponents_KEY]
  +[MPModelAlbum __versionHash_KEY]
  +[MPModelAlbum kindWithSongKind:]
  +[MPModelAlbum __shortEditorNotes_KEY]
  +[MPModelAlbum __hasExplicitContent_KEY]
  +[MPModelAlbum __discCount_KEY]
  +[MPModelAlbum kindWithSongKind:options:]
  +[MPModelAlbum __representativeSong_KEY]
  +[MPModelAlbum __maximumItemTrackNumber_KEY]
  +[MPModelAlbum __compilation_KEY]
  +[MPModelAlbum __classical_KEY]
  +[MPModelAlbum __preorder_KEY]
  +[MPModelAlbum __songPopularityBlock_KEY]
  +[MPModelAlbum supportsKeepLocalStatusObservation]
  +[MPModelAlbum requiredKeepLocalStatusObservationProperties]
  +[MPModelAlbum __editorNotes_KEY]
  +[MPModelAlbum __title_KEY]
  +[MPModelAlbum __genre_KEY]
  +[MPModelAlbum __copyrightText_KEY]
  +[MPModelAlbum __trackCount_KEY]
  +[MPModelAlbum __volumeNormalization_KEY]
  +[MPModelAlbum __keepLocalEnableState_KEY]
  +[MPModelAlbum __keepLocalManagedStatus_KEY]
  +[MPModelAlbum __libraryAdded_KEY]
  +[MPModelAlbum __libraryAddedDate_KEY]
  +[MPModelAlbum __lastDevicePlaybackDate_KEY]
  +[MPModelAlbum __libraryAddEligible_KEY]
  +[MPModelAlbum __downloadedDate_KEY]
  +[MPModelAlbum supportsLibraryAddStatusObservation]
  +[MPModelAlbum requiredLibraryAddStatusObservationProperties]
  +[MPModelAlbum __traits_KEY]
  +[MPModelAlbum kindWithVariants:songKind:options:]
  +[MPModelAlbum requiredLibraryRemovalProperties]
  +[MPModelAlbum supportsLibraryRemoval]
  +[MPModelAlbum requiredStoreLibraryPersonalizationProperties]
  +[MPModelAlbum __year_KEY]
  +[MPModelAlbum kindWithVariants:songKind:]

  // instance methods
  -[MPModelAlbum humanDescription]
  -[MPModelAlbum contentItemCollectionInfo]
  -[MPModelAlbum relativeModelObjectForStoreLibraryPersonalization]
  -[MPModelAlbum personalizationScopedPropertiesForProperties:]
  -[MPModelAlbum objectWithStoreLibraryPersonalizationRelativeModelObject:]
  -[MPModelAlbum songPopularityForIdentifiers:]
  -[MPModelAlbum artworkCatalog]
  -[MPModelAlbum libraryAddStatusObserverConfiguration]
  -[MPModelAlbum libraryRemovalSupportedOptions]
  -[MPModelAlbum newKeepLocalStatusObserverConfiguration]


MPPMediaPredicate : PBCodable <NSCopying>
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasPropertyPredicate
 @property  MPPPropertyPredicate *propertyPredicate
 @property  BOOL hasCompoundPredicate
 @property  MPPCompoundPredicate *compoundPredicate
 @property  BOOL hasConditionalPredicate
 @property  MPPConditionalPredicate *conditionalPredicate
 @property  BOOL hasPersistentIDsPredicate
 @property  MPPPersistentIDsPredicate *persistentIDsPredicate
 @property  BOOL hasSearchStringPredicate
 @property  MPPSearchStringPredicate *searchStringPredicate

  // instance methods
  -[MPPMediaPredicate setType:]
  -[MPPMediaPredicate propertyPredicate]
  -[MPPMediaPredicate setPropertyPredicate:]
  -[MPPMediaPredicate conditionalPredicate]
  -[MPPMediaPredicate hasConditionalPredicate]
  -[MPPMediaPredicate .cxx_destruct]
  -[MPPMediaPredicate setConditionalPredicate:]
  -[MPPMediaPredicate setCompoundPredicate:]
  -[MPPMediaPredicate compoundPredicate]
  -[MPPMediaPredicate persistentIDsPredicate]
  -[MPPMediaPredicate setPersistentIDsPredicate:]
  -[MPPMediaPredicate searchStringPredicate]
  -[MPPMediaPredicate setSearchStringPredicate:]
  -[MPPMediaPredicate dictionaryRepresentation]
  -[MPPMediaPredicate writeTo:]
  -[MPPMediaPredicate setHasType:]
  -[MPPMediaPredicate hasType]
  -[MPPMediaPredicate isEqual:]
  -[MPPMediaPredicate copyTo:]
  -[MPPMediaPredicate readFrom:]
  -[MPPMediaPredicate hasPropertyPredicate]
  -[MPPMediaPredicate hasCompoundPredicate]
  -[MPPMediaPredicate hasPersistentIDsPredicate]
  -[MPPMediaPredicate hasSearchStringPredicate]
  -[MPPMediaPredicate type]
  -[MPPMediaPredicate dealloc]
  -[MPPMediaPredicate copyWithZone:]


MPNowPlayingInfoAudioRoute : NSObject
 @property  MRContentItemMetadataAudioRoute *mediaRemoteAudioRoute
 @property  long long type
 @property  NSString *name
 @property  BOOL supportsSpatialization
 @property  BOOL spatializationEnabled

  // instance methods
  -[MPNowPlayingInfoAudioRoute name]
  -[MPNowPlayingInfoAudioRoute setType:]
  -[MPNowPlayingInfoAudioRoute .cxx_destruct]
  -[MPNowPlayingInfoAudioRoute mediaRemoteAudioRoute]
  -[MPNowPlayingInfoAudioRoute initWithMediaRemoteAudioRoute:]
  -[MPNowPlayingInfoAudioRoute setName:]
  -[MPNowPlayingInfoAudioRoute supportsSpatialization]
  -[MPNowPlayingInfoAudioRoute setSpatializationEnabled:]
  -[MPNowPlayingInfoAudioRoute setSupportsSpatialization:]
  -[MPNowPlayingInfoAudioRoute isSpatializationEnabled]
  -[MPNowPlayingInfoAudioRoute type]


UIImage(MPUtilities)
	// instance methods
	-[UIImage(MPUtilities) artworkCatalogBackingFileURL]
	-[UIImage(MPUtilities) initWithContentsOfExactFilePath:]
	-[UIImage(MPUtilities) imageWithEtchedBorderOfColor:radius:]
	-[UIImage(MPUtilities) imageWithShadow:]
	-[UIImage(MPUtilities) imageWithRoundedCornersOfRadius:]

(MPUniversalTrackIDAdditions)
	// instance methods
	-[(MPUniversalTrackIDAdditions) mpUniversalTrackIDType]
	-[(MPUniversalTrackIDAdditions) _mpUTITypeFromMRUTIType:]
	-[(MPUniversalTrackIDAdditions) mpUniversalTrackIDBaseID]

AVPlayerItem(MPAVItemAdditions)
	// instance methods
	-[AVPlayerItem(MPAVItemAdditions) createLanguageOptions]
	-[AVPlayerItem(MPAVItemAdditions) MP_shortDescription]
	-[AVPlayerItem(MPAVItemAdditions) MP_associatedQueuePlayer]
	-[AVPlayerItem(MPAVItemAdditions) setMP_associatedQueuePlayer:]
	-[AVPlayerItem(MPAVItemAdditions) MPAVItem]
	-[AVPlayerItem(MPAVItemAdditions) setMPAVItem:]

MSVSectionedCollection(MPAdditions)
	// instance methods
	-[MSVSectionedCollection(MPAdditions) identifiersForItemAtIndexPath:]
	-[MSVSectionedCollection(MPAdditions) enumerateItemIdentifiersUsingBlock:]
	-[MSVSectionedCollection(MPAdditions) identifiersForSectionAtIndex:]
	-[MSVSectionedCollection(MPAdditions) indexPathForItemWithIdentifiersIntersectingSet:]
	-[MSVSectionedCollection(MPAdditions) changeDetailsToSectionedCollection:applyingUIKitWorkarounds:isEqualBlock:isUpdatedBlock:]
	-[MSVSectionedCollection(MPAdditions) changeDetailsToSectionedCollection:isEqualBlock:isUpdatedBlock:]
	-[MSVSectionedCollection(MPAdditions) enumerateSectionIdentifiersUsingBlock:]
	-[MSVSectionedCollection(MPAdditions) enumerateItemIdentifiersInSectionAtIndex:usingBlock:]

NSEnumerator(MPFastForward)
	// instance methods
	-[NSEnumerator(MPFastForward) nextObjectWithExclusiveAccessToken:]
	-[NSEnumerator(MPFastForward) nextObjectIdenticalTo:]

UIViewController(MPMoviePlayerViewController)
	// instance methods
	-[UIViewController(MPMoviePlayerViewController) presentMoviePlayerViewControllerAnimated:]
	-[UIViewController(MPMoviePlayerViewController) dismissMoviePlayerViewControllerAnimated]

ICDeviceInfo(MPAdditions)
	// instance methods
	-[ICDeviceInfo(MPAdditions) isMultiUserDevice]

(MPMediaQueryAdditions)
	// instance methods
	-[(MPMediaQueryAdditions) sectionIdentifier]
	-[(MPMediaQueryAdditions) itemIdentifier]
	-[(MPMediaQueryAdditions) MPIsEmpty]
	-[(MPMediaQueryAdditions) isQueryResultSetInvalidated]

<DEREK BUG Categories!>(MPMediaQueryAdditions)
	// instance methods
	-[<DEREK BUG Categories!>(MPMediaQueryAdditions) moveItemFromIndex:toIndex:]
	-[<DEREK BUG Categories!>(MPMediaQueryAdditions) removeItemAtIndex:]

UIView(MPArtworkCatalog)
	// instance methods
	-[UIView(MPArtworkCatalog) _lastArtworkCatalog]
	-[UIView(MPArtworkCatalog) clearArtworkCatalogs]
	-[UIView(MPArtworkCatalog) artworkCatalog]

(MPArtworkDataSourceVisualIdenticality)
	// instance methods
	-[(MPArtworkDataSourceVisualIdenticality) stringRepresentation]
	-[(MPArtworkDataSourceVisualIdenticality) stringByLeftPaddingToLength:withString:startingAtIndex:]
	-[(MPArtworkDataSourceVisualIdenticality) MPMediaLibraryDataProviderSystemML3CoercedString]

(MPLogDescription)
	// class methods
	+[(MPLogDescription) requiredStoreLibraryPersonalizationProperties]

	// instance methods
	-[(MPLogDescription) MP_shortDescription]
	-[(MPLogDescription) relativeModelObjectForStoreLibraryPersonalization]
	-[(MPLogDescription) personalizationScopedPropertiesForProperties:]
	-[(MPLogDescription) objectWithStoreLibraryPersonalizationRelativeModelObject:]
	-[(MPLogDescription) MPMediaLibraryDataProviderSystemML3CoercedString]

NSBundle(MPAdditions)
	// class methods
	+[NSBundle(MPAdditions) mediaPlayerBundle]

ML3QueryResultSet(MPMediaLibraryAdditions)
	// instance methods
	-[ML3QueryResultSet(MPMediaLibraryAdditions) sectionIndexTitles]
	-[ML3QueryResultSet(MPMediaLibraryAdditions) enumerateSectionHeadersUsingBlock:]

ML3Entity(MPMediaAdditions)
	// class methods
	+[ML3Entity(MPMediaAdditions) propertyForMPMediaEntityProperty:]
	+[ML3Entity(MPMediaAdditions) spotlightPropertyForMPMediaEntityProperty:]

ML3Collection(MPMediaAdditions)
	// class methods
	+[ML3Collection(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Album(MPMediaAdditions)
	// class methods
	+[ML3Album(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Artist(MPMediaAdditions)
	// class methods
	+[ML3Artist(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3AlbumArtist(MPMediaAdditions)
	// class methods
	+[ML3AlbumArtist(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Composer(MPMediaAdditions)
	// class methods
	+[ML3Composer(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Genre(MPMediaAdditions)
	// class methods
	+[ML3Genre(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Container(MPMediaAdditions)
	// class methods
	+[ML3Container(MPMediaAdditions) propertyForMPMediaEntityProperty:]

ML3Track(MPMediaAdditions)
	// class methods
	+[ML3Track(MPMediaAdditions) propertyForMPMediaEntityProperty:]

(MPMediaLibraryDataProviderSystemML3StringCoercion)
	// instance methods
	-[(MPMediaLibraryDataProviderSystemML3StringCoercion) MPMediaLibraryDataProviderSystemML3CoercedString]

(MPAdditions)
	// instance methods
	-[(MPAdditions) ISO8601TimeZoneOffsetFromUTC]

(MPSOD_Additions)
	// instance methods
	-[(MPSOD_Additions) mp_deepMerge:]

AVAsset(MPNowPlayingInfoLanguageOptionGroupAdditions)
	// instance methods
	-[AVAsset(MPNowPlayingInfoLanguageOptionGroupAdditions) createLanguageOptionGroups]
	-[AVAsset(MPNowPlayingInfoLanguageOptionGroupAdditions) mpLoadValuesAsynchronouslyForKeys:completionQueue:completionHandler:]

AVMediaSelectionOption(MPNowPlayingInfoLanguageOptionAdditions)
	// instance methods
	-[AVMediaSelectionOption(MPNowPlayingInfoLanguageOptionAdditions) mpIsSDH]
	-[AVMediaSelectionOption(MPNowPlayingInfoLanguageOptionAdditions) makeNowPlayingInfoLanguageOption]
	-[AVMediaSelectionOption(MPNowPlayingInfoLanguageOptionAdditions) _languageOptionIdentifier]
	-[AVMediaSelectionOption(MPNowPlayingInfoLanguageOptionAdditions) mpIsOnlyAC3]

AVMediaSelectionGroup(MPNowPlayingInfoLanguageOptionAdditions)
	// instance methods
	-[AVMediaSelectionGroup(MPNowPlayingInfoLanguageOptionAdditions) makeNowPlayingInfoLanguageOptionGroup]

UIColor(MPArtworkColorAnalyzerAlgorithmiTunesAdditions)
	// class methods
	+[UIColor(MPArtworkColorAnalyzerAlgorithmiTunesAdditions) colorWithITColor:]

	// instance methods
	-[UIColor(MPArtworkColorAnalyzerAlgorithmiTunesAdditions) ITColor]
	-[UIColor(MPArtworkColorAnalyzerAlgorithmiTunesAdditions) MP_isArtworkColorAnalyzerLightColorForAlgorithm:]

NSUserActivity(MediaPlayerAdditions)
	// instance methods
	-[NSUserActivity(MediaPlayerAdditions) _setExternalMediaContentBundleIdentifier:]
	-[NSUserActivity(MediaPlayerAdditions) externalMediaContentIdentifier]
	-[NSUserActivity(MediaPlayerAdditions) setExternalMediaContentIdentifier:]
	-[NSUserActivity(MediaPlayerAdditions) _externalMediaContentBundleIdentifier]

NSSortDescriptor(MPMediaLibraryEntityTranslatorAdditions)
	// instance methods
	-[NSSortDescriptor(MPMediaLibraryEntityTranslatorAdditions) _MPMediaLibraryEntityTranslator_MLCoreSortDescriptorOrdering]

01 00 1300 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAsset 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetImageGenerator 
01 00 2600 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMediaSelectionGroup 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMediaSelectionOption 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMetadataItem 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputContext 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputDeviceDiscoverySession 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayer 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVPlayerItem 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVQueuePlayer 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVRoutingSessionManager 
01 00 0900 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVTimeFormatter 
01 00 2100 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 1600 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSPlatform 
01 00 0b00 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIEmojiLabelView 
01 00 0100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 0100 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 0a00 /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI: CUINamedLayerStack 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSAccountStore 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSArtworkRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSAuthorizedDSIDsUpdateRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSBrowser 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSCheckInRentalAssetRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSCheckOutRentalAssetRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSGetAuthorizedAccountsTokenRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSIncrementRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSItemDataRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSSetPropertyRequest 
01 00 0e00 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSSetRentalPlaybackStartDateRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAsyncBlockOperation 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICAuthorizeMachineRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICClientInfo 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudAddReferral 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudAvailabilityController 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudClient 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudContentTasteRequestListener 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudItemIDList 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICCloudServiceStatusMonitor 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICConnectionConfiguration 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICDefaults 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICDeviceInfo 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICEnvironmentMonitor 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICLibraryAuthServiceClientTokenProvider 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicKitRequestContext 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicKitURLRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionRecommendationsRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICMusicSubscriptionStatusMonitor 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICSagaGetAccountStatusRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreArtworkInfo 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreFileAssetFairPlayInfo 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStorePlatformMetadata 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStorePlatformRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreRequestContext 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreURLRequest 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreURLResponseAuthenticationProvider 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICStoreVideoArtworkInfo 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLBag 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLBagProvider 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICURLSessionManager 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserIdentity 
01 00 0600 /System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud: ICUserIdentityStore 
01 00 1200 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISSymbol 
01 00 1100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 1100 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleRecord 
01 00 0d00 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: MIPMultiverseIdentifier 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Album 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3AlbumArtist 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3AllCompoundPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3AnyCompoundPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Artist 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Artwork 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ArtworkConfiguration 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Booklet 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Collection 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ComparisonPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Composer 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ConditionalPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Container 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ContainerItem 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ContainmentPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ContainsPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Entity 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Genre 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3LanguageResourceManager 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3MusicLibrary 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3MutableDatabaseImport 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3NegationPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3OrderingTerm 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3PersistentIDsPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3PropertyPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3QueryResultSet 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3SearchStringPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3SpotlightMatchPredicate 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3StoreItemPlaylistData 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3StoreItemTrackData 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Track 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: MLGeniusPlaylistController 
01 00 0800 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: MLMediaLibraryService 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVClusterController 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVEndpoint 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVLocalEndpoint 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVOutputDevice 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVRoutingDiscoverySession 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVRoutingDiscoverySessionConfiguration 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRClient 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRCommandInfo 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRContentItemMetadataAudioFormat 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRContentItemMetadataAudioRoute 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRExpanseManager 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MROrigin 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRPlayer 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRPlayerPath 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSendCommandHandlerDialog 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSendCommandHandlerDialogAction 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSendCommandHandlerEvent 
01 00 2000 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRSendCommandResultStatus 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVArtworkService 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVArtworkServiceResizeRequest 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVAutoBugCapture 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVBlockGuard 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVDistributedNotificationObserver 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVLRUDictionary 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVMutableBidirectionalDictionary 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVOPACKDecoder 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVOPACKEncoder 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVPair 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSQLDatabase 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVSectionedCollection 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVTimer 
01 00 1900 /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices: MSVWeakProxy 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCachedURLResponse 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateInterval 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSEnumerator 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 2300 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerFunctions 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProxy 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: NSShadow 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCache 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLProtocol 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLResponse 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionDataTask 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1100 /System/Library/Frameworks/CoreServices.framework/CoreServices: NSUserActivity 
01 00 1e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 1b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 1800 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PAAccessLogger 
01 00 1800 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PAApplication 
01 00 1800 /System/Library/PrivateFrameworks/PrivacyAccounting.framework/PrivacyAccounting: PATCCAccess 
01 00 1500 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 1500 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataWriter 
01 00 0500 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesCoordinator 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationRotationFollowingController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationRotationFollowingWindow 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICubicTimingParameters 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPopoverController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPresentationController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISelectionFeedbackGenerator 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISlider 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringTimingParameters 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 1d00 /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers: UTType 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIResilientRemoteViewContainerViewController 
