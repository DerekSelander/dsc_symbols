|| __DATA.__objc_data _OBJC_CLASS_$_CBKeyboardPreferencesManager
|| __DATA.__objc_data _OBJC_CLASS_$_KeyboardBrightnessClient
|| __DATA.__objc_data _OBJC_METACLASS_$_CBKeyboardPreferencesManager
|| __DATA.__objc_data _OBJC_METACLASS_$_KeyboardBrightnessClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BrightnessSystem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BrightnessSystemClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BrightnessSystemClientInternal
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBAdaptationClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBBlueLightClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CBClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BrightnessSystem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BrightnessSystemClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BrightnessSystemClientInternal
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBAdaptationClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBBlueLightClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CBClient
|| __TEXT.__const _kKBIDBuiltIn
|| __TEXT.__const _kKBIDDefault
__ AFKUser: _OBJC_CLASS_$_AFKEndpointInterface
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AggregateDictionary: _ADClientPushValueForDistributionKey
__ AggregateDictionary: _ADClientSetValueForScalarKey
__ CPMS: _OBJC_CLASS_$_CPMSAgent
__ CPMS: _OBJC_CLASS_$_CPMSClientDescription
__ CPMS: _kCPMSPowerTimeScale100ms
__ CPMS: _kCPMSPowerTimeScale1s
__ CPMS: _kCPMSPowerTimeScaleInstantaneous
__ CPMS: _kCPMSPowerTimeScaleThermal
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFAllocatorAllocate
__ CoreFoundation: _CFAllocatorDeallocate
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFCalendarAddComponents
__ CoreFoundation: _CFCalendarComposeAbsoluteTime
__ CoreFoundation: _CFCalendarCopyCurrent
__ CoreFoundation: _CFCalendarCreateWithIdentifier
__ CoreFoundation: _CFCalendarDecomposeAbsoluteTime
__ CoreFoundation: _CFCalendarSetTimeZone
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveAllValues
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyMultiple
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFStringGetSystemEncoding
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFTimeZoneCopySystem
__ CoreFoundation: _CFUUIDGetConstantUUIDWithBytes
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationReceiveResponse
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSSystemClockDidChangeNotification
__ CoreFoundation: _NSSystemTimeZoneDidChangeNotification
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFAllocatorSystemDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFCopyStringDictionaryKeyCallBacks
__ CoreFoundation: _kCFGregorianCalendar
__ CoreFoundation: _kCFNull
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentApplication
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlertTopMostKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ Foundation: _NSClassFromString
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCondition
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ GraphicsServices: _GSEventIsHardwareKeyboardAttached
__ GraphicsServices: _kGSEventHardwareKeyboardAvailabilityChangedNotification
__ HID: _OBJC_CLASS_$_HIDManager
__ IOKit: _IOCFSerialize
__ IOKit: _IOCFUnserializeBinary
__ IOKit: _IOHIDDeviceClose
__ IOKit: _IOHIDDeviceCopyMatchingElements
__ IOKit: _IOHIDDeviceCreate
__ IOKit: _IOHIDDeviceOpen
__ IOKit: _IOHIDElementGetPhysicalMax
__ IOKit: _IOHIDElementGetPhysicalMin
__ IOKit: _IOHIDElementGetType
__ IOKit: _IOHIDElementGetTypeID
__ IOKit: _IOHIDElementGetUnitExponent
__ IOKit: _IOHIDElementGetUsage
__ IOKit: _IOHIDElementGetUsagePage
__ IOKit: _IOHIDEventCreateAmbientLightSensorEvent
__ IOKit: _IOHIDEventGetChildren
__ IOKit: _IOHIDEventGetDataValue
__ IOKit: _IOHIDEventGetDoubleValue
__ IOKit: _IOHIDEventGetFloatValue
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOHIDEventSetIntegerValue
__ IOKit: _IOHIDEventSystemClientCopyServices
__ IOKit: _IOHIDEventSystemClientCreate
__ IOKit: _IOHIDEventSystemClientCreateWithType
__ IOKit: _IOHIDEventSystemClientRegisterDeviceMatchingBlock
__ IOKit: _IOHIDEventSystemClientRegisterEventBlock
__ IOKit: _IOHIDEventSystemClientScheduleWithDispatchQueue
__ IOKit: _IOHIDEventSystemClientSetMatching
__ IOKit: _IOHIDEventSystemClientSetMatchingMultiple
__ IOKit: _IOHIDEventSystemClientUnregisterDeviceMatchingBlock
__ IOKit: _IOHIDEventSystemClientUnregisterEventBlock
__ IOKit: _IOHIDEventSystemClientUnscheduleFromDispatchQueue
__ IOKit: _IOHIDServiceClientConformsTo
__ IOKit: _IOHIDServiceClientCopyEvent
__ IOKit: _IOHIDServiceClientCopyProperty
__ IOKit: _IOHIDServiceClientGetRegistryID
__ IOKit: _IOHIDServiceClientGetTypeID
__ IOKit: _IOHIDServiceClientRegisterRemovalBlock
__ IOKit: _IOHIDServiceClientSetProperty
__ IOKit: _IOHIDTransactionAddElement
__ IOKit: _IOHIDTransactionCommit
__ IOKit: _IOHIDTransactionCreate
__ IOKit: _IOHIDTransactionGetValue
__ IOKit: _IOHIDTransactionSetValue
__ IOKit: _IOHIDValueCreateWithIntegerValue
__ IOKit: _IOHIDValueGetScaledValue
__ IOKit: _IOIteratorNext
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortSetDispatchQueue
__ IOKit: _IOObjectConformsTo
__ IOKit: _IOObjectCopyClass
__ IOKit: _IOObjectRelease
__ IOKit: _IOObjectRetain
__ IOKit: _IOPMCopyUserActivityLevelDescription
__ IOKit: _IOPMScheduleUserActivityLevelNotificationWithTimeout
__ IOKit: _IOPMSetUserActivityIdleTimeout
__ IOKit: _IOPMUnregisterNotification
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IORegistryEntryGetRegistryEntryID
__ IOKit: _IORegistryEntryIDMatching
__ IOKit: _IORegistryEntrySearchCFProperty
__ IOKit: _IORegistryEntrySetCFProperties
__ IOKit: _IORegistryEntrySetCFProperty
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceAddMatchingNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceGetMatchingServices
__ IOKit: _IOServiceMatching
__ IOKit: __IOHIDElementSetValue
__ IOKit: _kIOMasterPortDefault
__ IOMobileFramebuffer: _IOMobileFramebufferCreateDisplayList
__ IOMobileFramebuffer: _IOMobileFramebufferGetServiceObject
__ IOMobileFramebuffer: _IOMobileFramebufferOpenByName
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CAWindowServer
__ SpringBoardServices: _SBUserNotificationDefaultResponseLaunchURL
__ SpringBoardServices: _SBUserNotificationDismissesOverlaysInLockScreen
__ SpringBoardServices: _SBUserNotificationDisplayActionButtonOnLockScreen
__ SpringBoardServices: _SBUserNotificationForcesModalAlertAppearance
__ libIOReport.dylib: _IOReportCopyChannelsWithID
__ libIOReport.dylib: _IOReportCreateSamples
__ libIOReport.dylib: _IOReportCreateSubscription
__ libIOReport.dylib: _IOReportIterate
__ libIOReport.dylib: _IOReportSimpleGetIntegerValue
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libMobileGestalt.dylib: _MGIsDeviceOneOfType
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___memcpy_chk
__ libSystem.B.dylib: ___memset_chk
__ libSystem.B.dylib: ___sprintf_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abs
__ libSystem.B.dylib: _atan2f
__ libSystem.B.dylib: _backtrace
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler_f
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _expf
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log2f
__ libSystem.B.dylib: _logf
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_error_string
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_receive
__ libSystem.B.dylib: _mach_msg_send
__ libSystem.B.dylib: _mach_port_allocate
__ libSystem.B.dylib: _mach_port_get_attributes
__ libSystem.B.dylib: _mach_port_insert_right
__ libSystem.B.dylib: _mach_port_set_attributes
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _powf
__ libSystem.B.dylib: _pthread_attr_destroy
__ libSystem.B.dylib: _pthread_attr_init
__ libSystem.B.dylib: _pthread_attr_setdetachstate
__ libSystem.B.dylib: _pthread_create
__ libSystem.B.dylib: _pthread_mutex_init
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strstr
__ libSystem.B.dylib: _strtol
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _syslog
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIffEEPfEEvT0_S5_T_
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___gxx_personality_v0
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
CBDisplayModuleiOS : CBDisplayModule
 @property  ^{__Display=} displayInternal

  // instance methods
  -[CBDisplayModuleiOS copyIdentifiers]
  -[CBDisplayModuleiOS copyPropertyInternalForKey:]
  -[CBDisplayModuleiOS copyPropertyForKey:]
  -[CBDisplayModuleiOS setProperty:forKey:]
  -[CBDisplayModuleiOS dealloc]
  -[CBDisplayModuleiOS stop]
  -[CBDisplayModuleiOS sendNotificationForKey:withValue:]
  -[CBDisplayModuleiOS displayInternal]
  -[CBDisplayModuleiOS copyPropertyForKey:withParameter:]
  -[CBDisplayModuleiOS handleNotificationForKey:withProperty:]
  -[CBDisplayModuleiOS initWithBacklight:queue:display:]
  -[CBDisplayModuleiOS start]


CBAPEndpoint : NSObject
  // instance methods
  -[CBAPEndpoint initWithServiceName:]
  -[CBAPEndpoint dealloc]
  -[CBAPEndpoint findDCPServiceWithName:]
  -[CBAPEndpoint handleResponse:bufferSize:res:]
  -[CBAPEndpoint setProperty:property:]
  -[CBAPEndpoint copyProperty:]
  -[CBAPEndpoint sendCommand:inputBuffer:inputBufferSize:]


BrightnessSystemClientInternal : NSObject
  // instance methods
  -[BrightnessSystemClientInternal copyPropertyForKey:]
  -[BrightnessSystemClientInternal setProperty:forKey:]
  -[BrightnessSystemClientInternal init]
  -[BrightnessSystemClientInternal removePropertyFromNotification:]
  -[BrightnessSystemClientInternal addPropertiesForNotification:]
  -[BrightnessSystemClientInternal dealloc]
  -[BrightnessSystemClientInternal stopXpcService]
  -[BrightnessSystemClientInternal addKeyToClientProperties:]
  -[BrightnessSystemClientInternal removePropertiesFromNotification:]
  -[BrightnessSystemClientInternal registerNotificationBlock:]
  -[BrightnessSystemClientInternal removeKeyFromClientProperties:]
  -[BrightnessSystemClientInternal addPropertyForNotification:]
  -[BrightnessSystemClientInternal registerNotificationBlock:forProperties:]


NightModeControl : NSObject
  // instance methods
  -[NightModeControl copyLowPowerModeState]
  -[NightModeControl cancelTransition]
  -[NightModeControl setProperty:forKey:]
  -[NightModeControl transitionTimerHandler]
  -[NightModeControl reevaluateCurrentState]
  -[NightModeControl updateTransitionTimesFromSunriseSunset:]
  -[NightModeControl scheduleNextTransition:withType:]
  -[NightModeControl updateOptionTimestamp:]
  -[NightModeControl tearDownAllTimers]
  -[NightModeControl dealloc]
  -[NightModeControl initiateRestrictedMaxTransition]
  -[NightModeControl setSchedule:]
  -[NightModeControl updateSunriseSunsetBackup]
  -[NightModeControl retrieveSunriseSunsetTimesFromBackup:]
  -[NightModeControl getPropertyForKey:]
  -[NightModeControl initiateFullMinTransition]
  -[NightModeControl setSunPermitted:]
  -[NightModeControl setMode:]
  -[NightModeControl enableBlueLightReduction:withOption:]
  -[NightModeControl setNightModeFactor:withFadePeriod:]
  -[NightModeControl cancelAggdPeriodicUpdate]
  -[NightModeControl setNightModeFactor:]
  -[NightModeControl scheduleAggdKeysUpdate]
  -[NightModeControl updateSunriseSunsetInfo:]
  -[NightModeControl copyDictionaryFromStatus:]
  -[NightModeControl copyPreferenceForKey:user:]
  -[NightModeControl updateTransitionTimes:]
  -[NightModeControl displayAlertInteractive:]
  -[NightModeControl timeZoneChanged]
  -[NightModeControl cancelSchedule]
  -[NightModeControl removeSupportObject:]
  -[NightModeControl clockChanged]
  -[NightModeControl reevaluateCurrentStateWithFactorFadeOption:]
  -[NightModeControl setPreference:forKey:user:]
  -[NightModeControl updateLowPowerModeState:]
  -[NightModeControl updateStatusDictionaryWithValue:forKey:]
  -[NightModeControl parseStatusDictionary:intoStruct:shouldUpdatePrefs:]
  -[NightModeControl aggdKeysUpdate]
  -[NightModeControl copyStatusDictionaryFromPrefs]
  -[NightModeControl copyTimeStringWithHour:minute:second:]
  -[NightModeControl initiateFullMaxTransition]
  -[NightModeControl updateTransitionTimesFromSchedule:]
  -[NightModeControl setNightShiftFactorDictionary:]
  -[NightModeControl setAlgoState:]
  -[NightModeControl saveStatusToPrefs:]
  -[NightModeControl addSupportObject:]
  -[NightModeControl initiateTransitionTo:andRampLength:]
  -[NightModeControl initWithSupportObject:queue:callback:]


CBClient : NSObject
 @property  CBBlueLightClient *blueLightClient
 @property  CBAdaptationClient *adaptationClient

  // class methods
  +[CBClient supportsBlueLightReduction]
  +[CBClient supportsAdaptation]

  // instance methods
  -[CBClient init]
  -[CBClient dealloc]
  -[CBClient blueLightClient]
  -[CBClient adaptationClient]


CBBlueLightClient : NSObject
 @property  BOOL supported

  // class methods
  +[CBBlueLightClient supportsBlueLightReduction]

  // instance methods
  -[CBBlueLightClient supported]
  -[CBBlueLightClient suspendNotifications:force:]
  -[CBBlueLightClient init]
  -[CBBlueLightClient disableNotifications]
  -[CBBlueLightClient suspendNotifications:]
  -[CBBlueLightClient setEnabled:withOption:]
  -[CBBlueLightClient setCCT:commit:]
  -[CBBlueLightClient dealloc]
  -[CBBlueLightClient setSupported:]
  -[CBBlueLightClient setSchedule:]
  -[CBBlueLightClient getDefaultCCTRange:]
  -[CBBlueLightClient getWarningStrength:]
  -[CBBlueLightClient getBlueLightStatus:]
  -[CBBlueLightClient getWarningCCT:]
  -[CBBlueLightClient enableNotifications]
  -[CBBlueLightClient setMode:]
  -[CBBlueLightClient getCCTRange:]
  -[CBBlueLightClient setStatusNotificationBlock:]
  -[CBBlueLightClient setActive:]
  -[CBBlueLightClient setStrength:commit:]
  -[CBBlueLightClient initWithClientObj:]
  -[CBBlueLightClient setEnabled:]
  -[CBBlueLightClient getCCT:]
  -[CBBlueLightClient setStrength:withPeriod:commit:]
  -[CBBlueLightClient setCCTRange:]
  -[CBBlueLightClient setCCT:withPeriod:commit:]
  -[CBBlueLightClient getStrength:]
  -[CBBlueLightClient parseStatusDictionary:intoStruct:]


BrightnessSystemClientExportedObj : NSObject <BacklightSystemDelegateXpcProtocol>
 @property  BrightnessSystemClientInternal *target
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BrightnessSystemClientExportedObj notifyChangedProperty:value:]
  -[BrightnessSystemClientExportedObj target]
  -[BrightnessSystemClientExportedObj dealloc]
  -[BrightnessSystemClientExportedObj unregisterNotificationBlock]
  -[BrightnessSystemClientExportedObj setTarget:]
  -[BrightnessSystemClientExportedObj registerNotificationBlock:]


BrightnessSystemInternal : NSObject <NSXPCListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BrightnessSystemInternal init]
  -[BrightnessSystemInternal copyPropertyForKey:client:]
  -[BrightnessSystemInternal setProperty:forKey:client:]
  -[BrightnessSystemInternal notifyClientsForProperty:key:]
  -[BrightnessSystemInternal dealloc]
  -[BrightnessSystemInternal setCombinableProperty:forKey:client:]
  -[BrightnessSystemInternal clientConnectedWithExpObj:]
  -[BrightnessSystemInternal newAggregatedPropertyForCombinablePropertiesForKey:]
  -[BrightnessSystemInternal setOwnedProperty:forKey:client:]
  -[BrightnessSystemInternal listener:shouldAcceptNewConnection:]
  -[BrightnessSystemInternal destroyServer]
  -[BrightnessSystemInternal isAlsSupported]
  -[BrightnessSystemInternal registerNotificationBlock:]
  -[BrightnessSystemInternal undoCombinablePropertiesForClient:]
  -[BrightnessSystemInternal adjustDictionaryToBeValidPropertyList:]
  -[BrightnessSystemInternal isACombinableProperty:]
  -[BrightnessSystemInternal undoOwnedPropertiesForClient:]
  -[BrightnessSystemInternal clientDisconnectedWithExpObj:]
  -[BrightnessSystemInternal setNotificationProperties:forClient:]


CBALSNodeiOS : NSObject
 @property  ^{__IOHIDServiceClient=} alsService
 @property  CBALSEvent *currentALSEvent
 @property  int orientation

  // instance methods
  -[CBALSNodeiOS handleALSEvent:]
  -[CBALSNodeiOS dealloc]
  -[CBALSNodeiOS setOrientation:]
  -[CBALSNodeiOS orientation]
  -[CBALSNodeiOS initALSProperties]
  -[CBALSNodeiOS isColorSupported]
  -[CBALSNodeiOS initWithALSServiceClient:]
  -[CBALSNodeiOS conformsToHIDServiceClient:]
  -[CBALSNodeiOS alsService]
  -[CBALSNodeiOS setAlsService:]
  -[CBALSNodeiOS currentALSEvent]
  -[CBALSNodeiOS setCurrentALSEvent:]


CBABCurve : NSObject
 @property  unsigned long version
 @property  float scaleFactor

  // instance methods
  -[CBABCurve init]
  -[CBABCurve initWithUUID:]
  -[CBABCurve resetToDefaultState]
  -[CBABCurve version]
  -[CBABCurve setLux:]
  -[CBABCurve scaleFactor]
  -[CBABCurve setScaleFactor:]
  -[CBABCurve getVersion]
  -[CBABCurve getScaledBL2]
  -[CBABCurve getScaledBL1]
  -[CBABCurve setScaledBL2:]
  -[CBABCurve setScaledBL1:]
  -[CBABCurve setLinearBrightnessMin:andMax:]
  -[CBABCurve getLinearBrightness]
  -[CBABCurve updateALSParametersForDisplayBrightness:]
  -[CBABCurve copyUserPrefState]
  -[CBABCurve setSavedPrefences:]


BrightnessSystemClient : NSObject
  // instance methods
  -[BrightnessSystemClient copyPropertyForKey:]
  -[BrightnessSystemClient setProperty:forKey:]
  -[BrightnessSystemClient init]
  -[BrightnessSystemClient unregisterNotificationForKeys:andDisplay:]
  -[BrightnessSystemClient unregisterNotificationForKeys:]
  -[BrightnessSystemClient dealloc]
  -[BrightnessSystemClient setProperty:withKey:andDisplay:]
  -[BrightnessSystemClient registerNotificationForKey:]
  -[BrightnessSystemClient unregisterPropertyNotificationBlock]
  -[BrightnessSystemClient registerNotificationForKey:andDisplay:]
  -[BrightnessSystemClient registerKeyboardNotificationCallbackBlock:]
  -[BrightnessSystemClient unregisterNotificationForKey:andDisplay:]
  -[BrightnessSystemClient copyPropertyForKey:andDisplay:]
  -[BrightnessSystemClient registerDisplayNotificationCallbackBlock:]
  -[BrightnessSystemClient isAlsSupported]
  -[BrightnessSystemClient unregisterNotificationForKey:]
  -[BrightnessSystemClient unregisterDisplayNotificationBlock]
  -[BrightnessSystemClient registerNotificationForKeys:]
  -[BrightnessSystemClient registerNotificationForKeys:keyboardID:]
  -[BrightnessSystemClient registerNotificationBlock:]
  -[BrightnessSystemClient unregisterKeyboardNotificationBlock]
  -[BrightnessSystemClient unregisterNotificationForKeys:keyboardID:]
  -[BrightnessSystemClient copyPropertyForKey:keyboardID:]
  -[BrightnessSystemClient setProperty:withKey:keyboardID:]
  -[BrightnessSystemClient registerNotificationForKeys:andDisplay:]
  -[BrightnessSystemClient registerNotificationBlock:forProperties:]


BacklightdExportedObj : NSObject <BacklightdXPCProtocol>
 @property  BrightnessSystemInternal *server
 @property  NSXPCConnection *connection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BacklightdExportedObj reconnect]
  -[BacklightdExportedObj copyClientID]
  -[BacklightdExportedObj dealloc]
  -[BacklightdExportedObj server]
  -[BacklightdExportedObj setConnection:]
  -[BacklightdExportedObj setServer:]
  -[BacklightdExportedObj clientCopyPropertyWithKey:reply:]
  -[BacklightdExportedObj registerNotificationForProperties:]
  -[BacklightdExportedObj clientSetPropertyWithKey:property:]
  -[BacklightdExportedObj connection]


CBKeyboardBacklightContainer : CBContainer <CBContainerProtocol, CBHIDServiceProtocol, CBStatusInfoProtocol>
 @property  HIDDevice *device
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBKeyboardBacklightContainer handleHIDEvent:from:]
  -[CBKeyboardBacklightContainer removeHIDServiceClient:]
  -[CBKeyboardBacklightContainer copyIdentifiers]
  -[CBKeyboardBacklightContainer copyPropertyInternalForKey:]
  -[CBKeyboardBacklightContainer copyPropertyForKey:]
  -[CBKeyboardBacklightContainer addHIDServiceClient:]
  -[CBKeyboardBacklightContainer setProperty:forKey:]
  -[CBKeyboardBacklightContainer device]
  -[CBKeyboardBacklightContainer dealloc]
  -[CBKeyboardBacklightContainer sendNotificationForKey:andValue:]
  -[CBKeyboardBacklightContainer stop]
  -[CBKeyboardBacklightContainer setPropertyInternal:forKey:]
  -[CBKeyboardBacklightContainer initWithDevice:]
  -[CBKeyboardBacklightContainer start]
  -[CBKeyboardBacklightContainer keyboardBacklightInitialization]
  -[CBKeyboardBacklightContainer keyboardUsesNitUnits:]
  -[CBKeyboardBacklightContainer newKeyboardBacklightWithQueue:device:]


CBKeyboardPreferencesManager : NSObject
  // class methods
  +[CBKeyboardPreferencesManager sharedInstance]
  +[CBKeyboardPreferencesManager setPreference:forKey:]
  +[CBKeyboardPreferencesManager copyPreferenceForKey:]
  +[CBKeyboardPreferencesManager setIntPreference:forKey:]
  +[CBKeyboardPreferencesManager setFloatPreference:forKey:]
  +[CBKeyboardPreferencesManager setBoolPreference:forKey:]
  +[CBKeyboardPreferencesManager getIntPreference:forKey:]
  +[CBKeyboardPreferencesManager getFloatPreference:forKey:]
  +[CBKeyboardPreferencesManager getBoolPreference:forKey:]
  +[CBKeyboardPreferencesManager copyPreferenceForKey:keyboardID:]
  +[CBKeyboardPreferencesManager copyAllPreferences]

  // instance methods
  -[CBKeyboardPreferencesManager init]
  -[CBKeyboardPreferencesManager dealloc]
  -[CBKeyboardPreferencesManager setPreference:forKey:]
  -[CBKeyboardPreferencesManager copyPreferenceForKey:]
  -[CBKeyboardPreferencesManager copyAllPrefereneces]


KeyboardBacklightHIDCurveNits : KeyboardBacklightHIDCurve
 @property  float level

  // instance methods
  -[KeyboardBacklightHIDCurveNits brightness]
  -[KeyboardBacklightHIDCurveNits level]
  -[KeyboardBacklightHIDCurveNits dealloc]
  -[KeyboardBacklightHIDCurveNits setBrightness:]
  -[KeyboardBacklightHIDCurveNits initWithQueue:device:]
  -[KeyboardBacklightHIDCurveNits maxLevelPercentage]
  -[KeyboardBacklightHIDCurveNits setBrightness:withFadeSpeed:commit:]
  -[KeyboardBacklightHIDCurveNits convertNitsToLevelPercentage:]
  -[KeyboardBacklightHIDCurveNits maxCapableNits]
  -[KeyboardBacklightHIDCurveNits minCapableNits]


CBAnalyticsManager : NSObject
  // class methods
  +[CBAnalyticsManager sharedInstance]
  +[CBAnalyticsManager handleColorSample:]
  +[CBAnalyticsManager sendEventOnceADayLazy:andDict:]
  +[CBAnalyticsManager stopReporting:]

  // instance methods
  -[CBAnalyticsManager init]
  -[CBAnalyticsManager dealloc]
  -[CBAnalyticsManager stringForType:]
  -[CBAnalyticsManager handleColorSampleInternal:]
  -[CBAnalyticsManager startReporting]
  -[CBAnalyticsManager logColorSample:withType:]
  -[CBAnalyticsManager sendEventLazy:andDict:]
  -[CBAnalyticsManager sendEventOnceADayLazyInternal:andDict:]
  -[CBAnalyticsManager isFirstEventToday:]
  -[CBAnalyticsManager logAllColorSamples]
  -[CBAnalyticsManager stopReportingInternal:]
  -[CBAnalyticsManager isSameDay:asDay:]
  -[CBAnalyticsManager storeTimestamp:forEventName:]


CBCAManager : NSObject
  // instance methods
  -[CBCAManager initWithCADisplay:]
  -[CBCAManager dealloc]
  -[CBCAManager displayBrightnessPropertyHandler:]
  -[CBCAManager colorRampPropertyHandler:]
  -[CBCAManager nitsThresholdPLCPropertyHandler:]
  -[CBCAManager handleNotificationForKey:withProperty:]
  -[CBCAManager updateDigitalDimmingBrightnessScaler:]


CBProxFilter : CBFilter
 @property  BOOL triggered

  // instance methods
  -[CBProxFilter handleALSEvent:]
  -[CBProxFilter init]
  -[CBProxFilter dealloc]
  -[CBProxFilter isTriggered]
  -[CBProxFilter setTriggered:]
  -[CBProxFilter handleProximityEvent:]
  -[CBProxFilter filterEvent:]


CBSensorOverrideFilter : CBFilter
 @property  int orientation

  // instance methods
  -[CBSensorOverrideFilter dealloc]
  -[CBSensorOverrideFilter initWithData:]
  -[CBSensorOverrideFilter setOrientation:]
  -[CBSensorOverrideFilter orientation]
  -[CBSensorOverrideFilter filterEvent:]


CBBrightestALSFilter : CBFilter
  // instance methods
  -[CBBrightestALSFilter setProperty:forKey:]
  -[CBBrightestALSFilter init]
  -[CBBrightestALSFilter dealloc]
  -[CBBrightestALSFilter displayBrightnessFactorPropertyHandler:]
  -[CBBrightestALSFilter filterEvent:]
  -[CBBrightestALSFilter forgetDataForService:]


CBALSEvent : CBHIDEvent
 @property  double illuminance
 @property  {?=[3f]{?=ff}f{?=i[6f]if}} colorSample
 @property  BOOL supportColor
 @property  BOOL obstructed
 @property  int orientation
 @property  {?=ICCSIIif[6f]f[6s]f} vendorData
 @property  float integrationTime
 @property  BOOL firstALSSample

  // instance methods
  -[CBALSEvent compare:]
  -[CBALSEvent dealloc]
  -[CBALSEvent setIntegrationTime:]
  -[CBALSEvent integrationTime]
  -[CBALSEvent vendorData]
  -[CBALSEvent setVendorData:]
  -[CBALSEvent setOrientation:]
  -[CBALSEvent orientation]
  -[CBALSEvent setFirstALSSample:]
  -[CBALSEvent firstALSSample]
  -[CBALSEvent setObstructed:]
  -[CBALSEvent setIlluminance:]
  -[CBALSEvent colorSample]
  -[CBALSEvent setColorSample:]
  -[CBALSEvent obstructed]
  -[CBALSEvent initWithHIDEvent:andService:]
  -[CBALSEvent getServiceOrientation:]
  -[CBALSEvent copyVendorDataFromEvent:]
  -[CBALSEvent illuminance]
  -[CBALSEvent supportColor]
  -[CBALSEvent setSupportColor:]


CBAdaptationClient : NSObject
 @property  BOOL supported

  // class methods
  +[CBAdaptationClient supportsAdaptation]

  // instance methods
  -[CBAdaptationClient supported]
  -[CBAdaptationClient init]
  -[CBAdaptationClient dealloc]
  -[CBAdaptationClient setSupported:]
  -[CBAdaptationClient getEnabled]
  -[CBAdaptationClient setWeakestAdaptationModeFromArray:withLength:andPeriod:]
  -[CBAdaptationClient overrideStrengths:forModes:nModes:]
  -[CBAdaptationClient initWithClientObj:]
  -[CBAdaptationClient animateFromWeakestAdaptationModeInArray:withLength:toWeakestInArray:withLength:withProgress:andPeriod:]
  -[CBAdaptationClient setEnabled:]
  -[CBAdaptationClient setAdaptationMode:withPeriod:]
  -[CBAdaptationClient getStrengths:nStrengths:]
  -[CBAdaptationClient getAdaptationMode]


NightShiftDisplayWrapper : NSObject <NightShiftSupportProtocol>
 @property  <CBContainerProtocol> *container
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NightShiftDisplayWrapper init]
  -[NightShiftDisplayWrapper dealloc]
  -[NightShiftDisplayWrapper container]
  -[NightShiftDisplayWrapper setContainer:]
  -[NightShiftDisplayWrapper copyPreferenceForKey:user:]
  -[NightShiftDisplayWrapper setPreference:forKey:user:]
  -[NightShiftDisplayWrapper initWithDisplay:]
  -[NightShiftDisplayWrapper setNightShiftFactorDictionary:]


CBColorModuleiOS : CBContainer <CBContainerProtocol, CBHIDServiceProtocol, NightShiftSupportProtocol, CBStatusInfoProtocol>
 @property  unsigned long moduleType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBColorModuleiOS handleHIDEvent:from:]
  -[CBColorModuleiOS removeHIDServiceClient:]
  -[CBColorModuleiOS handleALSEvent:]
  -[CBColorModuleiOS copyIdentifiers]
  -[CBColorModuleiOS copyPropertyInternalForKey:]
  -[CBColorModuleiOS copyPropertyForKey:]
  -[CBColorModuleiOS addHIDServiceClient:]
  -[CBColorModuleiOS updateAvailability]
  -[CBColorModuleiOS initWithBacklight:andModuleType:]
  -[CBColorModuleiOS BLRFactorPropertyHandler:]
  -[CBColorModuleiOS CAWeakestColorAdaptationModeAnimatedPropertyHandler:]
  -[CBColorModuleiOS CAStrengthPropertyHandler:]
  -[CBColorModuleiOS preStrobePropertyHandler:]
  -[CBColorModuleiOS setProperty:forKey:]
  -[CBColorModuleiOS newAdaptationModeMappingDictionary:strengthNum:]
  -[CBColorModuleiOS init]
  -[CBColorModuleiOS firstALSSampleTimeout]
  -[CBColorModuleiOS reportToAggd:]
  -[CBColorModuleiOS BLRFactorUpdate:]
  -[CBColorModuleiOS newAggregatedConfigFromSerializedConfig:]
  -[CBColorModuleiOS dealloc]
  -[CBColorModuleiOS filterInitialize]
  -[CBColorModuleiOS CALabShiftPropertyHandler:]
  -[CBColorModuleiOS CAEnabledPropertyHandler:]
  -[CBColorModuleiOS reportCommitWithStop:]
  -[CBColorModuleiOS CAStrengthUpdate:withPeriod:]
  -[CBColorModuleiOS startNewTimerWithFreq:]
  -[CBColorModuleiOS loadBacklightProperties]
  -[CBColorModuleiOS colorFilterModeHandler:]
  -[CBColorModuleiOS newArrayFromIntegers:size:]
  -[CBColorModuleiOS CAAABSensorOverridePropertyHandler:]
  -[CBColorModuleiOS handleDisplayBrightnessFactorZero:]
  -[CBColorModuleiOS CAModeMappingHandler:]
  -[CBColorModuleiOS cancelFirstSampleTimeout]
  -[CBColorModuleiOS carryLogCommentHandler:]
  -[CBColorModuleiOS sendNotificationForKey:andValue:]
  -[CBColorModuleiOS processColorSample:forceUpdate:]
  -[CBColorModuleiOS handleHIDEventInternal:from:]
  -[CBColorModuleiOS CAWeakestColorAdaptationModePropertyHandler:]
  -[CBColorModuleiOS parseAdaptationModeMappingDictionary:strengths:strengthNum:]
  -[CBColorModuleiOS serializedAggregatedConfigPropertyHandler:]
  -[CBColorModuleiOS colorRampRoutine:]
  -[CBColorModuleiOS carryLogEnabledHandler:]
  -[CBColorModuleiOS newAdaptationModeMappingArray:strengthNum:]
  -[CBColorModuleiOS BLRCCTTargetPropertyHandler:]
  -[CBColorModuleiOS CoreBrightnessFeaturesDisabledPropertyHandler:]
  -[CBColorModuleiOS parseAdaptationModeMappingArray:strengths:strengthNum:]
  -[CBColorModuleiOS preStrobeDimPeriodPropertyHandler:]
  -[CBColorModuleiOS BLRCCTRangePropertyHandler:]
  -[CBColorModuleiOS stop]
  -[CBColorModuleiOS newArrayFromDoubles:size:]
  -[CBColorModuleiOS activateColorAdaptation]
  -[CBColorModuleiOS displayBrightnessFactorPropertyHandler:]
  -[CBColorModuleiOS copyPreferenceForKey:user:]
  -[CBColorModuleiOS getPid:]
  -[CBColorModuleiOS copyPreferencesForKey:]
  -[CBColorModuleiOS inputAmbientColorSample:force:trust:]
  -[CBColorModuleiOS reportResetTimerWithStop:]
  -[CBColorModuleiOS carryLogCommitHandler:]
  -[CBColorModuleiOS initColorStruct]
  -[CBColorModuleiOS getVid:]
  -[CBColorModuleiOS setPropertyInternal:forKey:]
  -[CBColorModuleiOS setPreference:forKey:user:]
  -[CBColorModuleiOS ammolitePropertyHandler:key:]
  -[CBColorModuleiOS reportInitialize]
  -[CBColorModuleiOS convertNSData:toUint32:]
  -[CBColorModuleiOS CAFixedStrengthPropertyHandler:]
  -[CBColorModuleiOS applyAggregatedConfigPropertyHandler:]
  -[CBColorModuleiOS timerRoutine:]
  -[CBColorModuleiOS debugPrintColorSampleAsRGB:]
  -[CBColorModuleiOS CAStrengthRampPeriodTweakPropertyHandler:]
  -[CBColorModuleiOS handleNotificationForKey:withProperty:]
  -[CBColorModuleiOS applyAggregatedConfig:]
  -[CBColorModuleiOS moduleType]
  -[CBColorModuleiOS BLRFactorUpdate:withPeriod:shouldForceUpdate:]
  -[CBColorModuleiOS copyLocalAggregatedConfig]
  -[CBColorModuleiOS setNightShiftFactorDictionary:]
  -[CBColorModuleiOS getRegistryIDForHIDServiceClient:]
  -[CBColorModuleiOS CAFadesEnabledHandler:]
  -[CBColorModuleiOS setPreferences:forKey:]
  -[CBColorModuleiOS commitPowerLogReport:]
  -[CBColorModuleiOS updateActivity]
  -[CBColorModuleiOS displayBrightnessFactorUpdate:]
  -[CBColorModuleiOS colorRampPeriodOverrideHandler:]
  -[CBColorModuleiOS armFirstALSSampleTimer]
  -[CBColorModuleiOS start]
  -[CBColorModuleiOS handleFilterNotificationForKey:withProperty:]


CBABModuleExternal : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol>
 @property  CBDisplayModule *displayModule
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBABModuleExternal handleHIDEvent:from:]
  -[CBABModuleExternal removeHIDServiceClient:]
  -[CBABModuleExternal copyPropertyForKey:]
  -[CBABModuleExternal addHIDServiceClient:]
  -[CBABModuleExternal updateAvailability]
  -[CBABModuleExternal setProperty:forKey:]
  -[CBABModuleExternal initWithDisplayModule:andQueue:]
  -[CBABModuleExternal dealloc]
  -[CBABModuleExternal stop]
  -[CBABModuleExternal sendNotificationForKey:withValue:]
  -[CBABModuleExternal setPropertyInternal:forKey:]
  -[CBABModuleExternal copyPropertyForKey:withParameter:]
  -[CBABModuleExternal handleNotificationForKey:withProperty:]
  -[CBABModuleExternal start]
  -[CBABModuleExternal updateAutoBrightnessState:]
  -[CBABModuleExternal userBrightnessCommitHandler]
  -[CBABModuleExternal userBrightnessChangingHandler]
  -[CBABModuleExternal updateBrightnessForce:periodOverride:period:]
  -[CBABModuleExternal storeCurveToPreferences]
  -[CBABModuleExternal getAggregatedLux:]
  -[CBABModuleExternal endFastRamp]
  -[CBABModuleExternal newALSService:]
  -[CBABModuleExternal updateBrightness]
  -[CBABModuleExternal displayModule]


CBEDRModule : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBEDRModule handleHIDEvent:from:]
  -[CBEDRModule removeHIDServiceClient:]
  -[CBEDRModule handleALSEvent:]
  -[CBEDRModule copyPropertyForKey:]
  -[CBEDRModule addHIDServiceClient:]
  -[CBEDRModule setProperty:forKey:]
  -[CBEDRModule dealloc]
  -[CBEDRModule handleHIDEventInternal:from:]
  -[CBEDRModule stop]
  -[CBEDRModule copyPropertyForKey:withParameter:]
  -[CBEDRModule handleNotificationForKey:withProperty:]
  -[CBEDRModule start]
  -[CBEDRModule handleBrightnessUpdate:]
  -[CBEDRModule updateEDRState]
  -[CBEDRModule handleTargetWhitepointUpdate:]
  -[CBEDRModule initWithQueue:display:colorModule:andDisplayModule:]


CBStatusInfoHelper : NSObject
  // class methods
  +[CBStatusInfoHelper copyStatusInfoFor:]


CBABModuleiOS : CBModule <CBHIDServiceProtocol, CBContainerModuleProtocol, CBStatusInfoProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBABModuleiOS handleHIDEvent:from:]
  -[CBABModuleiOS removeHIDServiceClient:]
  -[CBABModuleiOS copyIdentifiers]
  -[CBABModuleiOS copyPropertyInternalForKey:]
  -[CBABModuleiOS copyPropertyForKey:]
  -[CBABModuleiOS addHIDServiceClient:]
  -[CBABModuleiOS setProperty:forKey:]
  -[CBABModuleiOS initWithDisplayModule:andQueue:]
  -[CBABModuleiOS dealloc]
  -[CBABModuleiOS stop]
  -[CBABModuleiOS sendNotificationForKey:withValue:]
  -[CBABModuleiOS copyPropertyForKey:withParameter:]
  -[CBABModuleiOS handleNotificationForKey:withProperty:]
  -[CBABModuleiOS start]


BLControl : NSObject
  // instance methods
  -[BLControl handleHIDEvent:from:]
  -[BLControl copyBLControlPropertyWithkey:]
  -[BLControl init]
  -[BLControl copyPropertyWithKey:client:]
  -[BLControl copyDisplayInfo]
  -[BLControl removeDisplayContainer:]
  -[BLControl keyboardBacklightHIDDeviceRemoved:]
  -[BLControl sendNotificationFor:withValue:]
  -[BLControl dealloc]
  -[BLControl handleNotificationInternalForKey:withValue:]
  -[BLControl copyStatusInfo]
  -[BLControl initKeyboardBacklightHIDManager]
  -[BLControl hidServiceArrival:]
  -[BLControl addDisplayContainer:]
  -[BLControl stop]
  -[BLControl findDisplays]
  -[BLControl removeHIDService:]
  -[BLControl startHIDSystemClient]
  -[BLControl setPropertyInternalWithKey:property:client:]
  -[BLControl handleCADisplayArrival:]
  -[BLControl sendNotificationWithKeyboardIDs]
  -[BLControl observeValueForKeyPath:ofObject:change:context:]
  -[BLControl registerNotificationBlock:]
  -[BLControl waitForALSArrival]
  -[BLControl findBacklight]
  -[BLControl copyPropertyInternalWithKey:forClient:]
  -[BLControl setBLControlPropertyWithKey:property:]
  -[BLControl newDevicePariMatchingDictionaryWithPage:andUsage:]
  -[BLControl handleCADisplayRemoval:]
  -[BLControl cancelHIDSystemClient]
  -[BLControl stopDisplayLookup]
  -[BLControl copyDisplayList]
  -[BLControl setPropertyWithKey:property:client:]
  -[BLControl start]
  -[BLControl keyboardBacklightHIDDeviceArrived:]
  -[BLControl handleCADisplay:]


KeyboardBacklight : CBModule <CBContainerModuleProtocol, CBHIDServiceProtocol>
 @property  int dimTime
 @property  float ambientOffset
 @property  float ambientHighThreshold
 @property  float ambientLowThreshold
 @property  BOOL userActive
 @property  BOOL keyboardAvailable
 @property  BOOL manualAdjust
 @property  BOOL autoAdjust
 @property  float levelPercentage
 @property  float levelMin
 @property  float levelMax
 @property  float levelOff
 @property  unsigned int levelUnit
 @property  unsigned int unitExponent
 @property  float ambientSlope
 @property  float maxUserLevel
 @property  float currentLux
 @property  BOOL muted
 @property  NSMutableDictionary *keyboardSpecificPreferences
 @property  float previousLevel
 @property  BOOL suppressed
 @property  BOOL saturated
 @property  BOOL suspend
 @property  float brightness
 @property  BOOL builtIn
 @property  BOOL dimmed
 @property  unsigned long keyboardID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[KeyboardBacklight getHashIDForDevice:]

  // instance methods
  -[KeyboardBacklight handleHIDEvent:from:]
  -[KeyboardBacklight removeHIDServiceClient:]
  -[KeyboardBacklight setDimmed:]
  -[KeyboardBacklight dimmed]
  -[KeyboardBacklight copyPropertyForKey:]
  -[KeyboardBacklight addHIDServiceClient:]
  -[KeyboardBacklight muted]
  -[KeyboardBacklight brightness]
  -[KeyboardBacklight level]
  -[KeyboardBacklight suspend]
  -[KeyboardBacklight setProperty:forKey:]
  -[KeyboardBacklight setMuted:]
  -[KeyboardBacklight builtIn]
  -[KeyboardBacklight dealloc]
  -[KeyboardBacklight initWithQueue:]
  -[KeyboardBacklight saturated]
  -[KeyboardBacklight toggleMute]
  -[KeyboardBacklight stop]
  -[KeyboardBacklight sendNotificationForKey:withValue:]
  -[KeyboardBacklight copyPropertyForKey:withParameter:]
  -[KeyboardBacklight timerRoutine:]
  -[KeyboardBacklight dimTime]
  -[KeyboardBacklight handleNotificationForKey:withProperty:]
  -[KeyboardBacklight setBrightness:]
  -[KeyboardBacklight setBuiltIn:]
  -[KeyboardBacklight start]
  -[KeyboardBacklight unitExponent]
  -[KeyboardBacklight setSaturated:]
  -[KeyboardBacklight currentLux]
  -[KeyboardBacklight keyboardID]
  -[KeyboardBacklight initWithQueue:device:]
  -[KeyboardBacklight suppressed]
  -[KeyboardBacklight levelOff]
  -[KeyboardBacklight levelMax]
  -[KeyboardBacklight levelPercentage]
  -[KeyboardBacklight levelMin]
  -[KeyboardBacklight manualAdjust]
  -[KeyboardBacklight setLevelPercentage:]
  -[KeyboardBacklight autoAdjust]
  -[KeyboardBacklight updateBacklightDeviceWithReason:]
  -[KeyboardBacklight updateBacklightDeviceWithFadeSpeed:commit:reason:]
  -[KeyboardBacklight setBrightness:withFadeSpeed:commit:]
  -[KeyboardBacklight initWithQueue:device:ambientOffset:]
  -[KeyboardBacklight retrieveKeyboardBacklightElements]
  -[KeyboardBacklight setKeyboardID:]
  -[KeyboardBacklight getKeyboardBacklightPreferences]
  -[KeyboardBacklight storeKeyboardBacklightPreferences]
  -[KeyboardBacklight resetKeyDimTimeout]
  -[KeyboardBacklight setUnitExponent:]
  -[KeyboardBacklight setLevelMin:]
  -[KeyboardBacklight setLevelMax:]
  -[KeyboardBacklight setLevelOff:]
  -[KeyboardBacklight setLevelUnit:]
  -[KeyboardBacklight ambientOffset]
  -[KeyboardBacklight ambientSlope]
  -[KeyboardBacklight ambientLowThreshold]
  -[KeyboardBacklight ambientHighThreshold]
  -[KeyboardBacklight userActive]
  -[KeyboardBacklight keyboardAvailable]
  -[KeyboardBacklight sendSuppressedNotification:]
  -[KeyboardBacklight stopRamp]
  -[KeyboardBacklight timeToNextBacklightUpdate]
  -[KeyboardBacklight scheduleBacklightUpdate:]
  -[KeyboardBacklight didUpdateBacklightLevel:brightness:result:error:]
  -[KeyboardBacklight rampToBrightness:withDuration:]
  -[KeyboardBacklight updateBacklightDevice]
  -[KeyboardBacklight updateAmbientOffset]
  -[KeyboardBacklight currentLuxToAmbient]
  -[KeyboardBacklight setAmbientOffset:]
  -[KeyboardBacklight setCurrentLux:]
  -[KeyboardBacklight setManualAdjust:]
  -[KeyboardBacklight calculateLevelPercentageAtAmbient:]
  -[KeyboardBacklight handlePMUserActivityStateChanged:]
  -[KeyboardBacklight endKeyDim]
  -[KeyboardBacklight forceLuxUpdate]
  -[KeyboardBacklight forceLuxUpdateRoutine]
  -[KeyboardBacklight getCurrentLux]
  -[KeyboardBacklight handleLuxUpdate:]
  -[KeyboardBacklight forceBacklightUpdateRoutine]
  -[KeyboardBacklight KBBrightnessPropertyHandler:]
  -[KeyboardBacklight KBAutoBrightnessSuspendPropertyHandler:]
  -[KeyboardBacklight KBAutoBrightnessEnablePropertyHandler:]
  -[KeyboardBacklight KBIdleDimPropertyHandler:]
  -[KeyboardBacklight KBIdleDimTimeHandler:]
  -[KeyboardBacklight KBSuspendDimmingPropertyHandler:]
  -[KeyboardBacklight KBUserActivityUpdateHandler:]
  -[KeyboardBacklight KBDisplayBrightnessFactorPropertyHandler:]
  -[KeyboardBacklight KBUserOffsetPropertyHandler:]
  -[KeyboardBacklight KBUpdateFrequencyHandler:]
  -[KeyboardBacklight setSuspend:]
  -[KeyboardBacklight setAutoAdjust:]
  -[KeyboardBacklight setDimTime:]
  -[KeyboardBacklight setUserActive:]
  -[KeyboardBacklight setKeyboardAvailable:]
  -[KeyboardBacklight maxUserLevel]
  -[KeyboardBacklight setKBPreferenceBacklightMaxUser]
  -[KeyboardBacklight startRamp]
  -[KeyboardBacklight KBAvailabilityUpdateHandler:]
  -[KeyboardBacklight levelUnit]
  -[KeyboardBacklight keyboardSpecificPreferences]
  -[KeyboardBacklight setKeyboardSpecificPreferences:]
  -[KeyboardBacklight previousLevel]
  -[KeyboardBacklight setPreviousLevel:]


KeyboardBrightnessClient : NSObject
  // instance methods
  -[KeyboardBrightnessClient init]
  -[KeyboardBrightnessClient dealloc]
  -[KeyboardBrightnessClient unregisterKeyboardNotificationBlock]
  -[KeyboardBrightnessClient brightnessForKeyboard:]
  -[KeyboardBrightnessClient isAmbientFeatureAvailableOnKeyboard:]
  -[KeyboardBrightnessClient isBacklightSaturatedOnKeyboard:]
  -[KeyboardBrightnessClient setBrightness:forKeyboard:]
  -[KeyboardBrightnessClient registerNotificationForKeys:keyboardID:block:]
  -[KeyboardBrightnessClient suspendIdleDimming:forKeyboard:]
  -[KeyboardBrightnessClient copyKeyboardBacklightIDs]
  -[KeyboardBrightnessClient setBrightness:fadeSpeed:commit:forKeyboard:]
  -[KeyboardBrightnessClient isBacklightSuppressedOnKeyboard:]
  -[KeyboardBrightnessClient isBacklightDimmedOnKeyboard:]
  -[KeyboardBrightnessClient enableAutoBrightness:forKeyboard:]
  -[KeyboardBrightnessClient isKeyboardBuiltIn:]
  -[KeyboardBrightnessClient idleDimTimeForKeyboard:]
  -[KeyboardBrightnessClient setIdleDimTime:forKeyboard:]
  -[KeyboardBrightnessClient isIdleDimmingSuspendedOnKeyboard:]
  -[KeyboardBrightnessClient isAutoBrightnessEnabledForKeyboard:]


CBHIDEvent : NSObject
 @property  ^{__IOHIDEvent=} event
 @property  ^{__IOHIDServiceClient=} service
 @property  float timestamp
 @property  unsigned int eventType
 @property  NSArray *copyChildren
 @property  NSNumber *serviceRegistryID

  // class methods
  +[CBHIDEvent newEvent:andService:]

  // instance methods
  -[CBHIDEvent setService:]
  -[CBHIDEvent dealloc]
  -[CBHIDEvent integerValueForKey:]
  -[CBHIDEvent event]
  -[CBHIDEvent timestamp]
  -[CBHIDEvent eventType]
  -[CBHIDEvent setEvent:]
  -[CBHIDEvent service]
  -[CBHIDEvent serviceRegistryID]
  -[CBHIDEvent initWithHIDEvent:andService:]
  -[CBHIDEvent copyChildren]
  -[CBHIDEvent floatValueForKey:]


CBDisplayModule : CBModule <CBContainerModuleProtocol, CBStatusInfoProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBDisplayModule copyIdentifiers]
  -[CBDisplayModule copyPropertyInternalForKey:]
  -[CBDisplayModule copyPropertyForKey:]
  -[CBDisplayModule setProperty:forKey:]
  -[CBDisplayModule stop]
  -[CBDisplayModule copyPropertyForKey:withParameter:]
  -[CBDisplayModule handleNotificationForKey:withProperty:]
  -[CBDisplayModule start]


CBContainer : NSObject
  // instance methods
  -[CBContainer dealloc]
  -[CBContainer unregisterNotificationBlock]
  -[CBContainer registerNotificationBlock:]
  -[CBContainer scheduleWithDispatchQueue:]
  -[CBContainer unscheduleWithDispatchQueue:]


CBDisplayContaineriOS : CBContainer <CBContainerProtocol, CBHIDServiceProtocol, NightShiftSupportProtocol, CBStatusInfoProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBDisplayContaineriOS initWithCADisplay:]
  -[CBDisplayContaineriOS handleHIDEvent:from:]
  -[CBDisplayContaineriOS removeHIDServiceClient:]
  -[CBDisplayContaineriOS copyIdentifiers]
  -[CBDisplayContaineriOS copyPropertyInternalForKey:]
  -[CBDisplayContaineriOS copyPropertyForKey:]
  -[CBDisplayContaineriOS addHIDServiceClient:]
  -[CBDisplayContaineriOS setProperty:forKey:]
  -[CBDisplayContaineriOS setupInternalModules]
  -[CBDisplayContaineriOS initialiseHIDDisplay]
  -[CBDisplayContaineriOS dealloc]
  -[CBDisplayContaineriOS unregisterNotificationBlock]
  -[CBDisplayContaineriOS sendNotificationForKey:andValue:]
  -[CBDisplayContaineriOS copyStatusInfo]
  -[CBDisplayContaineriOS handleNotificationForKey:withProperty:from:]
  -[CBDisplayContaineriOS stop]
  -[CBDisplayContaineriOS handleDisplayArrival:]
  -[CBDisplayContaineriOS copyPreferenceForKey:user:]
  -[CBDisplayContaineriOS setPreference:forKey:user:]
  -[CBDisplayContaineriOS registerNotificationBlock:]
  -[CBDisplayContaineriOS findBacklight]
  -[CBDisplayContaineriOS initWithBacklightService:]
  -[CBDisplayContaineriOS matchDisplayWithHidService:]
  -[CBDisplayContaineriOS setNightShiftFactorDictionary:]
  -[CBDisplayContaineriOS tearDownInternalModules]
  -[CBDisplayContaineriOS start]


CBDisplayModuleHIDiOS : CBDisplayModule <CBContainerModuleProtocol>
 @property  unsigned long VID
 @property  unsigned long PID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CBDisplayModuleHIDiOS copyIdentifiers]
  -[CBDisplayModuleHIDiOS copyPropertyInternalForKey:]
  -[CBDisplayModuleHIDiOS copyPropertyForKey:]
  -[CBDisplayModuleHIDiOS setProperty:forKey:]
  -[CBDisplayModuleHIDiOS VID]
  -[CBDisplayModuleHIDiOS dealloc]
  -[CBDisplayModuleHIDiOS setNits:]
  -[CBDisplayModuleHIDiOS stop]
  -[CBDisplayModuleHIDiOS sendNotificationForKey:withValue:]
  -[CBDisplayModuleHIDiOS PID]
  -[CBDisplayModuleHIDiOS setSlider:]
  -[CBDisplayModuleHIDiOS copyPropertyForKey:withParameter:]
  -[CBDisplayModuleHIDiOS handleNotificationForKey:withProperty:]
  -[CBDisplayModuleHIDiOS start]
  -[CBDisplayModuleHIDiOS getLinearBrightness]
  -[CBDisplayModuleHIDiOS initWithDevice:andQueue:]
  -[CBDisplayModuleHIDiOS getNits:]
  -[CBDisplayModuleHIDiOS newDisplayBrightnessData]
  -[CBDisplayModuleHIDiOS getUserBrightnessForNits:]
  -[CBDisplayModuleHIDiOS handleDisplayBrightnessProperty:]
  -[CBDisplayModuleHIDiOS handleDisplayLinearBrightnessProperty:]
  -[CBDisplayModuleHIDiOS setLinearBrightness:]
  -[CBDisplayModuleHIDiOS getNitsForUserBrightness:]
  -[CBDisplayModuleHIDiOS setNits:withPeriod:]


CBModule : NSObject
  // instance methods
  -[CBModule dealloc]
  -[CBModule unregisterNotificationBlock]
  -[CBModule initWithQueue:]
  -[CBModule registerNotificationBlock:]


__Hotspot : NSObject
 @property  int orientation
 @property  int triggered
 @property  float center_X
 @property  float center_Y
 @property  float touchTriggerDelay
 @property  float touchReleaseTime

  // instance methods
  -[__Hotspot setTriggered:]
  -[__Hotspot triggered]
  -[__Hotspot setOrientation:]
  -[__Hotspot orientation]
  -[__Hotspot center_X]
  -[__Hotspot setCenter_X:]
  -[__Hotspot center_Y]
  -[__Hotspot setCenter_Y:]
  -[__Hotspot touchTriggerDelay]
  -[__Hotspot setTouchTriggerDelay:]
  -[__Hotspot touchReleaseTime]
  -[__Hotspot setTouchReleaseTime:]


CBDigitizerFilter : CBFilter
 @property  BOOL obstructed
 @property  int orientation

  // instance methods
  -[CBDigitizerFilter handleALSEvent:]
  -[CBDigitizerFilter setProperty:forKey:]
  -[CBDigitizerFilter dealloc]
  -[CBDigitizerFilter setOrientation:]
  -[CBDigitizerFilter initWithOrientation:]
  -[CBDigitizerFilter orientation]
  -[CBDigitizerFilter filterEvent:]
  -[CBDigitizerFilter setObstructed:]
  -[CBDigitizerFilter isObstructed]
  -[CBDigitizerFilter initDigitizerProperties]
  -[CBDigitizerFilter handleDigitizerEvent:]
  -[CBDigitizerFilter setTriggered:forHotspot:]
  -[CBDigitizerFilter loadTouchProperties:]
  -[CBDigitizerFilter newHotspotForOrientation:]


BrightnessSystem : NSObject
  // instance methods
  -[BrightnessSystem copyPropertyForKey:]
  -[BrightnessSystem setProperty:forKey:]
  -[BrightnessSystem init]
  -[BrightnessSystem dealloc]
  -[BrightnessSystem isAlsSupported]
  -[BrightnessSystem registerNotificationBlock:]


CBABRamp : NSObject
  // instance methods
  -[CBABRamp initWithDisplayModule:andQueue:]
  -[CBABRamp dealloc]
  -[CBABRamp getVersion]
  -[CBABRamp stopTransition]
  -[CBABRamp transitionToBrightness:force:periodOverride:period:]
  -[CBABRamp setPerceptualBrightnessWithFade:length:current:]


CBFilter : NSObject
  // instance methods
  -[CBFilter setProperty:forKey:]
  -[CBFilter init]
  -[CBFilter dealloc]
  -[CBFilter unregisterNotificationBlock]
  -[CBFilter sendNotificationForKey:andValue:]
  -[CBFilter registerNotificationBlock:]
  -[CBFilter filterEvent:]
  -[CBFilter forgetDataForService:]
  -[CBFilter scheduleWithDispatchQueue:]
  -[CBFilter unscheduleWithDispatchQueue:]
  -[CBFilter filterEvents:]


KeyboardBacklightHIDCurve : KeyboardBacklight
 @property  NSDictionary *brightnessCurve
 @property  float maxCurveNits
 @property  float chicletCurveCoefficient
 @property  float chicletCurvePower
 @property  float level
 @property  float maxLevelPercentage
 @property  float maxCapableNits
 @property  float minCapableNits

  // instance methods
  -[KeyboardBacklightHIDCurve brightness]
  -[KeyboardBacklightHIDCurve level]
  -[KeyboardBacklightHIDCurve dealloc]
  -[KeyboardBacklightHIDCurve initWithQueue:]
  -[KeyboardBacklightHIDCurve setBrightness:]
  -[KeyboardBacklightHIDCurve initWithQueue:device:]
  -[KeyboardBacklightHIDCurve updateLuxToNitsCurve]
  -[KeyboardBacklightHIDCurve maxLevelPercentage]
  -[KeyboardBacklightHIDCurve setBrightness:withFadeSpeed:commit:]
  -[KeyboardBacklightHIDCurve convertNitsToLevelPercentage:]
  -[KeyboardBacklightHIDCurve maxCapableNits]
  -[KeyboardBacklightHIDCurve minCapableNits]
  -[KeyboardBacklightHIDCurve getKeyboardBacklightPreferences]
  -[KeyboardBacklightHIDCurve storeKeyboardBacklightPreferences]
  -[KeyboardBacklightHIDCurve currentLuxToAmbient]
  -[KeyboardBacklightHIDCurve calculateLevelPercentageAtAmbient:]
  -[KeyboardBacklightHIDCurve handleLuxUpdate:]
  -[KeyboardBacklightHIDCurve maxUserLevel]
  -[KeyboardBacklightHIDCurve maxCurveNits]
  -[KeyboardBacklightHIDCurve isBrightnessCurveValid:]
  -[KeyboardBacklightHIDCurve chicletCurveCoefficient]
  -[KeyboardBacklightHIDCurve chicletCurvePower]
  -[KeyboardBacklightHIDCurve updateBrightnessCurve:]
  -[KeyboardBacklightHIDCurve storeKeyboardBacklightCurveToPreferences]
  -[KeyboardBacklightHIDCurve brightnessCurve]
  -[KeyboardBacklightHIDCurve currentLuxToNits]
  -[KeyboardBacklightHIDCurve perceptualBrightnessForLevel:]
  -[KeyboardBacklightHIDCurve convertPWMPercentageToNits:]


SunriseSunsetProvider : NSObject
 @property  int logLevel

  // instance methods
  -[SunriseSunsetProvider dealloc]
  -[SunriseSunsetProvider registerBlock:]
  -[SunriseSunsetProvider unregisterBlock]
  -[SunriseSunsetProvider setLogLevel:]
  -[SunriseSunsetProvider cancel]
  -[SunriseSunsetProvider copySunriseSunsetInfo:]
  -[SunriseSunsetProvider logLevel]
  -[SunriseSunsetProvider copySunsetSunriseInfoFromContext]
  -[SunriseSunsetProvider unregisterNotification]
  -[SunriseSunsetProvider initWithCallback:]
  -[SunriseSunsetProvider updateSunriseSunsetInfo]


CBColorFilter : CBModule <CBHIDServiceProtocol>
 @property  unsigned long sensorPolicy
 @property  unsigned long mode
 @property  CBColorSample *sample
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CBColorFilter calculateCCTForChromaticity:]
  +[CBColorFilter calculateCCTForTristimulus:]
  +[CBColorFilter calculateTristimulusForChromaticity:andLux:]

  // instance methods
  -[CBColorFilter handleHIDEvent:from:]
  -[CBColorFilter removeHIDServiceClient:]
  -[CBColorFilter addHIDServiceClient:]
  -[CBColorFilter mode]
  -[CBColorFilter sample]
  -[CBColorFilter dealloc]
  -[CBColorFilter unregisterNotificationBlock]
  -[CBColorFilter initWithQueue:]
  -[CBColorFilter setMode:]
  -[CBColorFilter sendNotificationForKey:withValue:]
  -[CBColorFilter registerNotificationBlock:]
  -[CBColorFilter setSensorPolicy:]
  -[CBColorFilter forceSampleUpdate]
  -[CBColorFilter updateSample]
  -[CBColorFilter updateValidServices]
  -[CBColorFilter hasExtRearSensor]
  -[CBColorFilter hasExtFrontSensor]
  -[CBColorFilter newColorSampleLinearWeightedForServices:]
  -[CBColorFilter newColorSampleLinearWeightedForSamples:]
  -[CBColorFilter newColorSampleLogWeightedForSamples:]
  -[CBColorFilter evaluatedFilterMode]
  -[CBColorFilter newColorSampleLogWeighted]
  -[CBColorFilter newColorSampleWinnerTakesAll]
  -[CBColorFilter newColorSampleConditionWeighted]
  -[CBColorFilter reportSampleUpdate]
  -[CBColorFilter ALSServiceConformsToPolicy:]
  -[CBColorFilter sensorPolicy]


CBALSService : CBHIDService
 @property  BOOL validData
 @property  double lux
 @property  BOOL colorSupport
 @property  double x
 @property  double y
 @property  double CCT
 @property  unsigned long location

  // instance methods
  -[CBALSService lux]
  -[CBALSService CCT]
  -[CBALSService x]
  -[CBALSService dealloc]
  -[CBALSService setEvent:]
  -[CBALSService y]
  -[CBALSService location]
  -[CBALSService initWithHIDALSServiceClient:]
  -[CBALSService validData]
  -[CBALSService copyDataInDictionary]
  -[CBALSService updateEventData]
  -[CBALSService resetEventData]
  -[CBALSService colorSupport]


CBColorSample : NSObject
 @property  double lux
 @property  {?=dd} xy
 @property  {?=ddd} XYZ
 @property  {?=ddd} Lab
 @property  double CCT
 @property  long long colorBin
 @property  unsigned long mode
 @property  unsigned long type

  // instance methods
  -[CBColorSample lux]
  -[CBColorSample xy]
  -[CBColorSample mode]
  -[CBColorSample CCT]
  -[CBColorSample XYZ]
  -[CBColorSample Lab]
  -[CBColorSample init]
  -[CBColorSample setType:]
  -[CBColorSample initWithHIDEvent:]
  -[CBColorSample setMode:]
  -[CBColorSample setXy:]
  -[CBColorSample type]
  -[CBColorSample setXYZ:]
  -[CBColorSample colorBin]
  -[CBColorSample colorDeltaEWith:]
  -[CBColorSample CCTDifferenceWith:]
  -[CBColorSample LuxDifferenceWith:]
  -[CBColorSample initWithChromaticity:illuminance:andTempterature:]
  -[CBColorSample initWithTristimulus:illuminance:andTempterature:]
  -[CBColorSample copyDataInDictionary]
  -[CBColorSample fillInChromaticity]
  -[CBColorSample fillInTristimulus]


CBPreferencesHandler : NSObject
  // class methods
  +[CBPreferencesHandler copyPreferenceForAllUsersForKey:]
  +[CBPreferencesHandler storePreferenceForAllUsersForKey:andValue:]
  +[CBPreferencesHandler copyNestedPreferenceForKey1:key2:key3:]
  +[CBPreferencesHandler storeNestedPreferenceForAllUsersWithKey1:key2:key3:andValue:]
  +[CBPreferencesHandler copyPreferenceDictionaryForUser:]
  +[CBPreferencesHandler storePreferenceForUser:withKey:andValue:]
  +[CBPreferencesHandler storePreferenceForAllUsersMultiple:]
  +[CBPreferencesHandler copyPreferenceForUser:forKey:]
  +[CBPreferencesHandler copyPreferenceForAllUsersMultiple:]
  +[CBPreferencesHandler consistencyCheckForUser:]
  +[CBPreferencesHandler copyNestedPreferenceForKey1:key2:]


CBHIDService : NSObject
 @property  ^{__IOHIDServiceClient=} service
 @property  unsigned long registryID
 @property  ^{__IOHIDEvent=} event
 @property  BOOL builtIn

  // instance methods
  -[CBHIDService copyPropertyForKey:]
  -[CBHIDService builtIn]
  -[CBHIDService init]
  -[CBHIDService dealloc]
  -[CBHIDService event]
  -[CBHIDService registryID]
  -[CBHIDService setEvent:]
  -[CBHIDService service]
  -[CBHIDService conformsToHIDService:]
  -[CBHIDService updateEventData]
  -[CBHIDService initWithHIDServiceClient:andIdentifier:]
  -[CBHIDService conformsToUsagePage:andUsage:]
  -[CBHIDService setPropertyForKey:withValue:]


(CBPropertyKeyExtension)
	// instance methods
	-[(CBPropertyKeyExtension) initWithPropertyKey:andDisplay:]
	-[(CBPropertyKeyExtension) initWithPropertyKey:display:andParameter:]
	-[(CBPropertyKeyExtension) initWithPropertyKey:]
	-[(CBPropertyKeyExtension) initWithPropertyKey:andCategory:]
	-[(CBPropertyKeyExtension) getKeyString]
	-[(CBPropertyKeyExtension) getKeyDisplayID]
	-[(CBPropertyKeyExtension) getKeyDisplayIDRef]
	-[(CBPropertyKeyExtension) getKeyCategory]
	-[(CBPropertyKeyExtension) getKeyCategoryRef]
	-[(CBPropertyKeyExtension) getKeyPropertyParameter]
	-[(CBPropertyKeyExtension) initWithPropertyKey:keyboardID:]
	-[(CBPropertyKeyExtension) getKeyKeyboardID]
	-[(CBPropertyKeyExtension) getKeyKeyboardIDRef]

01 00 0100 /System/Library/PrivateFrameworks/AFKUser.framework/AFKUser: AFKEndpointInterface 
01 00 0400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 0400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAWindowServer 
01 00 0300 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSAgent 
01 00 0300 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSClientDescription 
01 00 0d00 /System/Library/PrivateFrameworks/HID.framework/HID: HIDManager 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCondition 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1200 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 1100 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0e00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
