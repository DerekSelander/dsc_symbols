|| __DATA.__objc_data _OBJC_CLASS_$_MSAMNotificationInfo
|| __DATA.__objc_data _OBJC_CLASS_$_MSClientSidePauseContext
|| __DATA.__objc_data _OBJC_CLASS_$_MSConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_MSAMNotificationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_MSClientSidePauseContext
|| __DATA.__objc_data _OBJC_METACLASS_$_MSConnection
|| __DATA_CONST.__const _kMSASConnectionErrorDomain
|| __DATA_CONST.__const _kMSASServiceName
|| __DATA_CONST.__const _kMSAuthenticationManagerDidReceiveAuthenticationChangeNotification
|| __DATA_CONST.__const _kMSBatteryPowerMonitorExternalPowerSourceChangedNotification
|| __DATA_CONST.__const _kMSCServerSideConfigurationDidChangeNotification
|| __DATA_CONST.__const _kMSCXPCReplyError
|| __DATA_CONST.__const _kMSCXPCReplyRetval
|| __DATA_CONST.__const _kMSIDSFacility
|| __DATA_CONST.__const _kMSIdleStateDidChangeNotification
|| __DATA_CONST.__const _kMSMMCSFacility
|| __DATA_CONST.__const _kMSMachServiceName
|| __DATA_CONST.__const _kMSPerfFacility
|| __DATA_CONST.__const _kMSPhotoStreamFacility
|| __DATA_CONST.__const _kMSPowerBudgetDidBeginAllowingFileTransferNotification
|| __DATA_CONST.__const _kMSPowerBudgetDidEndAllowingFileTransferNotification
|| __DATA_CONST.__const _kMSServerSideConfigurationDidChangeNotification
|| __DATA_CONST.__const _kMSSharedStreamFacility
|| __DATA_CONST.__const _kMSmstreamdErrorDomain
|| __DATA_CONST.__const _kMSmstreamdFacility
|| __DATA_CONST.__const _kXPCSequenceKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSASConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSASPlatformImplementation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSAlertManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSAuthenticationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSBatteryPowerMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSMSPlatform
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSPBTimerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSPauseManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSPowerAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MSPowerBudget
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCNSClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCNSRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCNSServiceConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCNSServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCServiceConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_XPCServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSASConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSASPlatformImplementation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSAlertManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSAuthenticationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSBatteryPowerMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSMSPlatform
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSPBTimerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSPauseManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSPowerAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MSPowerBudget
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCNSClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCNSRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCNSServiceConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCNSServiceListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCServiceConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_XPCServiceListener
|| __TEXT.__const _MediaStreamVersionNumber
|| __TEXT.__const _MediaStreamVersionString
|| __TEXT.__text _MSAlbumSharingInitialize
|| __TEXT.__text _MSMSLocalizedString
|| __TEXT.__text _MSMediaStreamInitialize
|| __TEXT.__text _XPCSetLogBlocks
|| __TEXT.__text __MSASSetDaemon
|| __TEXT.__text __MSSetDaemon
|| __TEXT.__text __XPCLog
|| __TEXT.__text __XPCShouldLog
__ Accounts: _ACAccountStoreDidChangeNotification
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ Accounts: _kAccountDataclassContent
__ Accounts: _kAccountDataclassMediaStream
__ Accounts: _kAccountDataclassSharedStreams
__ CFNetwork: _kCFStreamNetworkServiceType
__ CFNetwork: _kCFStreamNetworkServiceTypeBackgroundSystemInitiated
__ CFNetwork: _kCFStreamPropertyNoCellular
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopContainsSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBundleIdentifierKey
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreMediaStream: _MSASInitialize
__ CoreMediaStream: _MSASPlatform
__ CoreMediaStream: _MSCoreMediaStreamInitialize
__ CoreMediaStream: _MSPathAlbumSharingDir
__ CoreMediaStream: _MSPlatform
__ CoreMediaStream: _OBJC_CLASS_$_MSASAlbum
__ CoreMediaStream: _OBJC_CLASS_$_MSASAssetCollection
__ CoreMediaStream: _OBJC_CLASS_$_MSAsset
__ CoreMediaStream: _OBJC_CLASS_$_MSTimerGate
__ CoreMediaStream: _kMSASAccessControlGUIDKey
__ CoreMediaStream: _kMSASAlbumGUIDKey
__ CoreMediaStream: _kMSASAlbumKey
__ CoreMediaStream: _kMSASAssetCollectionGUIDKey
__ CoreMediaStream: _kMSASAssetCollectionGUIDsKey
__ CoreMediaStream: _kMSASAssetCollectionsKey
__ CoreMediaStream: _kMSASAssetTypeFlagsKey
__ CoreMediaStream: _kMSASAssetsKey
__ CoreMediaStream: _kMSASCancelActivitiesFn
__ CoreMediaStream: _kMSASCommentGUIDKey
__ CoreMediaStream: _kMSASCommentsKey
__ CoreMediaStream: _kMSASEnabledKey
__ CoreMediaStream: _kMSASErrorKey
__ CoreMediaStream: _kMSASFileTransferPushTimerDidEndNotification
__ CoreMediaStream: _kMSASFileTransferPushTimerDidStartNotification
__ CoreMediaStream: _kMSASFunctionNameKey
__ CoreMediaStream: _kMSASInfoKey
__ CoreMediaStream: _kMSASInvitationGUIDKey
__ CoreMediaStream: _kMSASInvitationTokenKey
__ CoreMediaStream: _kMSASIsInRetryStateFn
__ CoreMediaStream: _kMSASIsUIForegroundKey
__ CoreMediaStream: _kMSASLastViewedDateKey
__ CoreMediaStream: _kMSASModelAcceptInvitationWithGUIDFn
__ CoreMediaStream: _kMSASModelAcceptInvitationWithTokenFn
__ CoreMediaStream: _kMSASModelAccessControlGUIDsFn
__ CoreMediaStream: _kMSASModelAccessControlWithGUIDFn
__ CoreMediaStream: _kMSASModelActivityIsThrottledByLackOfDiskSpaceFn
__ CoreMediaStream: _kMSASModelAddAccessControlsFn
__ CoreMediaStream: _kMSASModelAddAlbumFn
__ CoreMediaStream: _kMSASModelAddAssetCollectionsFn
__ CoreMediaStream: _kMSASModelAddCommentsToAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASModelAlbumGUIDsFn
__ CoreMediaStream: _kMSASModelAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelAssetCollectionGUIDsFn
__ CoreMediaStream: _kMSASModelAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASModelCommentGUIDsFn
__ CoreMediaStream: _kMSASModelCommentWithGUIDFn
__ CoreMediaStream: _kMSASModelDeleteAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelDeleteAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASModelDeleteAssetCollectionsWithGUIDsFn
__ CoreMediaStream: _kMSASModelDeleteCommentWithGUIDFn
__ CoreMediaStream: _kMSASModelForgetEverythingFn
__ CoreMediaStream: _kMSASModelInvitationGUIDsFn
__ CoreMediaStream: _kMSASModelInvitationWithGUIDFn
__ CoreMediaStream: _kMSASModelIsAssetCollectionMarkedAsViewedFn
__ CoreMediaStream: _kMSASModelMarkAlbumGUIDAsViewedFn
__ CoreMediaStream: _kMSASModelMarkAsSpamAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelMarkAsSpamInvitationWithGUIDFn
__ CoreMediaStream: _kMSASModelMarkAsSpamInvitationWithTokenFn
__ CoreMediaStream: _kMSASModelMarkCommentsForAssetCollectionWithGUIDAsViewedFn
__ CoreMediaStream: _kMSASModelModifyAlbumMetadataFn
__ CoreMediaStream: _kMSASModelRefreshAccessControlListOfAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelRefreshCommentsForAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASModelRefreshContentOfAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelRefreshFn
__ CoreMediaStream: _kMSASModelRejectInvitationWithGUIDFn
__ CoreMediaStream: _kMSASModelRemoveAccessControlEntryWithGUIDFn
__ CoreMediaStream: _kMSASModelRetrieveAssetsFromAssetCollectionsWithGUIDs
__ CoreMediaStream: _kMSASModelRetrieveAssetsInAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelServerSideConfigFn
__ CoreMediaStream: _kMSASModelSetFocusAssetCollectionGUIDFn
__ CoreMediaStream: _kMSASModelSetMultipleContributorsEnabledFn
__ CoreMediaStream: _kMSASModelSetPublicAccessEnabledFn
__ CoreMediaStream: _kMSASModelSubscribeToAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelUnsubscribeFromAlbumWithGUIDFn
__ CoreMediaStream: _kMSASModelVideoURLForAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASModelVideoURLsForAssetCollectionWithGUIDFn
__ CoreMediaStream: _kMSASMoveLastViewedAssetCollectionKey
__ CoreMediaStream: _kMSASNextActivityDateFn
__ CoreMediaStream: _kMSASPersonIDKey
__ CoreMediaStream: _kMSASPushFn
__ CoreMediaStream: _kMSASResetSyncKey
__ CoreMediaStream: _kMSASRetryOutstandingActivitiesFn
__ CoreMediaStream: _kMSASRetryOutstandingActivitiesForPersonIDFn
__ CoreMediaStream: _kMSASRetvalKey
__ CoreMediaStream: _kMSASServerSideConfigDidChangeNotification
__ CoreMediaStream: _kMSASSetFocusAlbumFn
__ CoreMediaStream: _kMSASSetIsUIForegroundFn
__ CoreMediaStream: _kMSASSharingRelationshipGUIDKey
__ CoreMediaStream: _kMSASSharingRelationshipsKey
__ CoreMediaStream: _kMSASURLExpirationKey
__ CoreMediaStream: _kMSAssetMediaAssetTypeKey
__ Foundation: _NSLog
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortGetRunLoopSource
__ IOKit: _IOObjectRelease
__ IOKit: _IOPMAssertionCreateWithDescription
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMainPortDefault
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ MobileKeyBag: _MKBGetDeviceLockState
__ MobileKeyBag: _kMobileKeyBagLockStatusNotifyToken
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_interrupted
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_event_key_name
__ libSystem.B.dylib: __xpc_type_connection
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _statfs
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_get_pid
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_copy_description
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_get_data
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_data
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_shmem_create
__ libSystem.B.dylib: _xpc_shmem_map
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x2
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
MSPowerAssertionManager : NSObject
 @property  BOOL isBusy
 @property  BOOL isAssertingPowerAssertion
 @property  unsigned int assertionID
 @property  int busyCount
 @property  int UIBusyCount

  // class methods
  +[MSPowerAssertionManager sharedManager]

  // instance methods
  -[MSPowerAssertionManager isBusy]
  -[MSPowerAssertionManager retainBusy]
  -[MSPowerAssertionManager isAssertingPowerAssertion]
  -[MSPowerAssertionManager setBusyCount:]
  -[MSPowerAssertionManager busyCount]
  -[MSPowerAssertionManager setIsAssertingPowerAssertion:]
  -[MSPowerAssertionManager assertionID]
  -[MSPowerAssertionManager retainUIBusy]
  -[MSPowerAssertionManager releaseBusy]
  -[MSPowerAssertionManager setAssertionID:]
  -[MSPowerAssertionManager setUIBusyCount:]
  -[MSPowerAssertionManager UIBusyCount]
  -[MSPowerAssertionManager _recomputePowerAssertion]
  -[MSPowerAssertionManager toggleAssertion]
  -[MSPowerAssertionManager _assertPowerAssertion]
  -[MSPowerAssertionManager _deassertPowerAssertion]
  -[MSPowerAssertionManager setIsBusy:]
  -[MSPowerAssertionManager releaseUIBusy]


MSAMNotificationInfo : NSObject
 @property  MSAlertManager *owner
 @property  NSString *personID
 @property  ^{__CFRunLoopSource=} runLoopSource
 @property  ^{__CFUserNotification=} userNotification
 @property  @? completionBlock

  // class methods
  +[MSAMNotificationInfo info]

  // instance methods
  -[MSAMNotificationInfo setPersonID:]
  -[MSAMNotificationInfo owner]
  -[MSAMNotificationInfo personID]
  -[MSAMNotificationInfo setOwner:]
  -[MSAMNotificationInfo setCompletionBlock:]
  -[MSAMNotificationInfo setUserNotification:]
  -[MSAMNotificationInfo completionBlock]
  -[MSAMNotificationInfo dealloc]
  -[MSAMNotificationInfo .cxx_destruct]
  -[MSAMNotificationInfo runLoopSource]
  -[MSAMNotificationInfo setRunLoopSource:]
  -[MSAMNotificationInfo userNotification]


MSAlertManager : NSObject
  // class methods
  +[MSAlertManager sharedAlertManager]

  // instance methods
  -[MSAlertManager .cxx_destruct]
  -[MSAlertManager init]
  -[MSAlertManager _userDidRespondToNotification:info:responseFlags:]
  -[MSAlertManager _dismissNotificationForPersonID:]
  -[MSAlertManager _showNotificationInfo:]
  -[MSAlertManager displayAlertForPersonID:notificationDict:completionBlock:]


MSAuthenticationManager : NSObject
 @property  BOOL isListeningToKeybagChanges
 @property  int keybagChangeNotifyToken
 @property  BOOL waitingForAuth

  // class methods
  +[MSAuthenticationManager sharedManager]

  // instance methods
  -[MSAuthenticationManager initWithAlertManager:]
  -[MSAuthenticationManager dealloc]
  -[MSAuthenticationManager .cxx_destruct]
  -[MSAuthenticationManager isListeningToKeybagChanges]
  -[MSAuthenticationManager keybagChangeNotifyToken]
  -[MSAuthenticationManager _didReceiveAccountConfigChangedNotification]
  -[MSAuthenticationManager setKeybagChangeNotifyToken:]
  -[MSAuthenticationManager setIsListeningToKeybagChanges:]
  -[MSAuthenticationManager didEncounterAuthenticationFailureForPersonID:]
  -[MSAuthenticationManager didEncounterAuthenticationSuccessForPersonID:]
  -[MSAuthenticationManager waitForDeviceUnlock]
  -[MSAuthenticationManager _renewCredentialsForAccount:]
  -[MSAuthenticationManager isWaitingForAuth]
  -[MSAuthenticationManager rearmAuthenticationAlert]


MSConnection : NSObject
  // class methods
  +[MSConnection sharedConnection]

  // instance methods
  -[MSConnection pause]
  -[MSConnection dealloc]
  -[MSConnection serverSideConfigurationForPersonID:]
  -[MSConnection .cxx_destruct]
  -[MSConnection pollForSubscriptionUpdatesForPersonID:]
  -[MSConnection forgetPersonID:]
  -[MSConnection refreshServerSideConfigurationForPersonID:]
  -[MSConnection dequeueAssetCollectionWithGUIDs:personID:outError:]
  -[MSConnection resume:]
  -[MSConnection init]
  -[MSConnection deleteAssetCollections:personID:]
  -[MSConnection enqueueAssetCollections:personID:outError:]
  -[MSConnection resetServerStateForPersonID:]
  -[MSConnection checkForOutstandingActivities]
  -[MSConnection _waitForMessageToBeSent]
  -[MSConnection handleSubscriptionPushForPersonID:]
  -[MSConnection abortActivitiesForPersonID:]
  -[MSConnection _machErrorWithUnderlyingError:]


MSMSPlatform : NSObject <MSPlatform>
 @property  ACAccountStore *accountStore
 @property  BOOL isPerfLoggingEnabled
 @property  NSData *pushToken
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MSMSPlatform thePlatform]

  // instance methods
  -[MSMSPlatform pushToken]
  -[MSMSPlatform OSVersion]
  -[MSMSPlatform setPushToken:]
  -[MSMSPlatform pushTokenForPersonID:]
  -[MSMSPlatform setAccountStore:]
  -[MSMSPlatform accountStore]
  -[MSMSPlatform _facilityStringForFacility:]
  -[MSMSPlatform shouldLogAtLevel:]
  -[MSMSPlatform deletePluginClass]
  -[MSMSPlatform _rereadDefaults]
  -[MSMSPlatform _accountForPersonID:]
  -[MSMSPlatform pluginClass]
  -[MSMSPlatform .cxx_destruct]
  -[MSMSPlatform baseURLForPersonID:]
  -[MSMSPlatform theDaemon]
  -[MSMSPlatform socketOptions]
  -[MSMSPlatform subscriberPluginClass]
  -[MSMSPlatform stringForSysctlKey:]
  -[MSMSPlatform logFacility:level:format:args:]
  -[MSMSPlatform setIsPerfLoggingEnabled:]
  -[MSMSPlatform logFile:func:line:facility:level:format:args:]
  -[MSMSPlatform authTokenForPersonID:]
  -[MSMSPlatform isPerfLoggingEnabled]
  -[MSMSPlatform contentURLForPersonID:]
  -[MSMSPlatform hardwareString]
  -[MSMSPlatform isPerformanceLoggingEnabled]
  -[MSMSPlatform didDetectUnrecoverableCondition]
  -[MSMSPlatform fullNameFromFirstName:lastName:]
  -[MSMSPlatform appBundleInfoString]
  -[MSMSPlatform _mayPerformFileTransfer]
  -[MSMSPlatform policyMayUpload]
  -[MSMSPlatform shouldEnableNewFeatures]
  -[MSMSPlatform publisherPluginClass]
  -[MSMSPlatform OSString]
  -[MSMSPlatform UDID]
  -[MSMSPlatform init]
  -[MSMSPlatform pathMediaStreamDir]
  -[MSMSPlatform policyMayDownload]
  -[MSMSPlatform personIDUsesProductionPushEnvironment:]


MSClientSidePauseContext : NSObject
 @property  NSObject<OS_dispatch_queue> *timerQueue
 @property  NSXPCConnection *server
 @property  MSTimerGate *gate

  // instance methods
  -[MSClientSidePauseContext initWithServer:]
  -[MSClientSidePauseContext timerQueue]
  -[MSClientSidePauseContext .cxx_destruct]
  -[MSClientSidePauseContext resume]
  -[MSClientSidePauseContext server]
  -[MSClientSidePauseContext setServer:]
  -[MSClientSidePauseContext gate]
  -[MSClientSidePauseContext setGate:]
  -[MSClientSidePauseContext setTimerQueue:]
  -[MSClientSidePauseContext timerQueueTimerFired]
  -[MSClientSidePauseContext timerQueuePing]


MSPauseManager : NSObject
 @property  <MSPauseManagerDelegate> *delegate

  // class methods
  +[MSPauseManager sharedManager]

  // instance methods
  -[MSPauseManager setDelegate:]
  -[MSPauseManager delegate]
  -[MSPauseManager isPaused]
  -[MSPauseManager dealloc]
  -[MSPauseManager .cxx_destruct]
  -[MSPauseManager unpauseUUID:]
  -[MSPauseManager _addPauseUUID:]
  -[MSPauseManager _removeTimerUUID:]
  -[MSPauseManager pingPauseUUID:]
  -[MSPauseManager init]
  -[MSPauseManager _timerDidFire:]


MSBatteryPowerMonitor : NSObject
 @property  double currentLevel
 @property  BOOL isExternalPowerConnected

  // class methods
  +[MSBatteryPowerMonitor defaultMonitor]

  // instance methods
  -[MSBatteryPowerMonitor setExternalPowerConnected:]
  -[MSBatteryPowerMonitor setCurrentLevel:]
  -[MSBatteryPowerMonitor isExternalPowerConnected]
  -[MSBatteryPowerMonitor updateBatteryConnectedStateWithBatteryEntry:]
  -[MSBatteryPowerMonitor dealloc]
  -[MSBatteryPowerMonitor _updateBatteryConnectedStateWithBatteryEntry:]
  -[MSBatteryPowerMonitor currentLevel]
  -[MSBatteryPowerMonitor updateBatteryLevelWithBatteryEntry:]
  -[MSBatteryPowerMonitor batteryPercentRemaining]
  -[MSBatteryPowerMonitor init]


MSASConnection : NSObject <XPCNSClientConnectionDelegate>
 @property  XPCNSClientConnection *connection
 @property  NSMutableDictionary *foregroundPingTimerContextByPersonID
 @property  NSMutableDictionary *focusAlbumTimerByPersonID
 @property  NSMutableDictionary *focusAlbumGUIDByPersonID
 @property  NSObject<OS_dispatch_queue> *memberQueue
 @property  NSMutableDictionary *serverSideConfigurationDictionaryByPersonID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[MSASConnection sharedConnection]

  // instance methods
  -[MSASConnection setMemberQueue:]
  -[MSASConnection memberQueue]
  -[MSASConnection markAlbumGUIDAsViewed:personID:]
  -[MSASConnection cancelActivitiesForPersonID:]
  -[MSASConnection markAlbumGUIDAsViewed:personID:info:]
  -[MSASConnection refreshResetSync:personID:]
  -[MSASConnection subscribeToAlbumWithGUID:personID:info:]
  -[MSASConnection unsubscribeFromAlbumWithGUID:personID:]
  -[MSASConnection deleteCommentWithGUID:personID:]
  -[MSASConnection albumWithGUID:personID:completionBlock:]
  -[MSASConnection setMultipleContributorsEnabled:forAlbumWithGUID:personID:completionBlock:]
  -[MSASConnection deleteAssetCollectionWithGUID:personID:]
  -[MSASConnection refreshAccessControlListForAlbumWithGUID:personID:]
  -[MSASConnection refreshCommentsForAssetCollectionWithGUID:resetSync:personID:]
  -[MSASConnection setForegroundPingTimerContextByPersonID:]
  -[MSASConnection addAccessControlEntries:toAlbumWithGUID:personID:info:]
  -[MSASConnection serverSideConfigurationDictionaryForPersonID:completionBlock:]
  -[MSASConnection markCommentsForAssetCollectionWithGUID:asViewedWithLastViewedDate:personID:]
  -[MSASConnection acceptInvitationWithGUID:personID:]
  -[MSASConnection addAssetCollections:toAlbumWithGUID:personID:info:]
  -[MSASConnection refreshResetSync:personID:info:]
  -[MSASConnection addComments:toAssetCollectionWithGUID:personID:]
  -[MSASConnection acceptInvitationWithGUID:personID:info:]
  -[MSASConnection removeAccessControlEntryWithGUID:personID:]
  -[MSASConnection focusAlbumGUIDByPersonID]
  -[MSASConnection foregroundPingTimerContextByPersonID]
  -[MSASConnection addAlbum:personID:info:]
  -[MSASConnection _communicationFailureError]
  -[MSASConnection commentGUIDsForAssetCollectionWithGUID:personID:completionBlock:]
  -[MSASConnection setFocusAlbum:forPersonID:]
  -[MSASConnection addAlbum:personID:]
  -[MSASConnection setPublicAccessEnabled:forAlbumWithGUID:personID:info:completionBlock:]
  -[MSASConnection setFocusAlbumGUID:forPersonID:]
  -[MSASConnection videoURLsForAssetCollectionWithGUID:forMediaAssetType:personID:completionBlock:]
  -[MSASConnection serverSideConfigurationDictionaryByPersonID]
  -[MSASConnection refreshContentOfAlbumWithGUID:resetSync:personID:]
  -[MSASConnection .cxx_destruct]
  -[MSASConnection videoURLForAssetCollectionWithGUID:personID:completionBlock:]
  -[MSASConnection _sendMessageReliably:data:successHandler:failureHandler:]
  -[MSASConnection addComments:toAssetCollectionWithGUID:personID:info:]
  -[MSASConnection handlePushNotificationForPersonID:]
  -[MSASConnection timerPingQueueForegroundPingTimerExpiredContext:personID:]
  -[MSASConnection accessControlGUIDsForAlbumWithGUID:personID:completionBlock:]
  -[MSASConnection connection]
  -[MSASConnection invitationGUIDsForPersonID:completionBlock:]
  -[MSASConnection forgetEverythingAboutPersonID:]
  -[MSASConnection _cloneArray:]
  -[MSASConnection refreshCommentsForAssetCollectionWithGUID:resetSync:personID:info:]
  -[MSASConnection acceptInvitationWithToken:personID:info:completionBlock:]
  -[MSASConnection assetCollectionGUIDsInAlbumWithGUID:personID:completionBlock:]
  -[MSASConnection albumGUIDsForPersonID:completionBlock:]
  -[MSASConnection retryOutstandingActivities]
  -[MSASConnection modifyAlbumMetadata:personID:info:]
  -[MSASConnection markCommentsForAssetCollectionWithGUID:asViewedWithLastViewedDate:personID:info:]
  -[MSASConnection setFocusAssetCollectionGUID:forPersonID:]
  -[MSASConnection deleteAssetCollectionWithGUID:personID:info:]
  -[MSASConnection retryOutstandingActivitiesForPersonID:]
  -[MSASConnection addAssetCollections:toAlbumWithGUID:personID:]
  -[MSASConnection rejectInvitationWithGUID:personID:]
  -[MSASConnection setServerSideConfigurationDictionaryByPersonID:]
  -[MSASConnection refreshAccessControlListForAlbumWithGUID:personID:info:]
  -[MSASConnection acceptInvitationWithToken:personID:completionBlock:]
  -[MSASConnection assetCollectionWithGUID:personID:completionBlock:]
  -[MSASConnection invitationWithGUID:personID:completionBlock:]
  -[MSASConnection _sendMessageReliably:]
  -[MSASConnection setPublicAccessEnabled:forAlbumWithGUID:personID:completionBlock:]
  -[MSASConnection focusAlbumTimerByPersonID]
  -[MSASConnection deleteCommentWithGUID:personID:info:]
  -[MSASConnection deleteAssetCollectionsWithGUIDs:personID:]
  -[MSASConnection markAsSpamAlbumWithGUID:personID:completionBlock:]
  -[MSASConnection refreshContentOfAlbumWithGUID:resetSync:personID:info:]
  -[MSASConnection deleteAlbumWithGUID:personID:]
  -[MSASConnection removeAccessControlEntryWithGUID:personID:info:]
  -[MSASConnection retrieveAssetsFromAssetCollectionsWithGUIDs:assetTypeFlags:personID:]
  -[MSASConnection setIsUIForeground:forPersonID:]
  -[MSASConnection rejectInvitationWithGUID:personID:info:]
  -[MSASConnection unsubscribeFromAlbumWithGUID:personID:info:]
  -[MSASConnection modifyAlbumMetadata:personID:]
  -[MSASConnection pingForeground]
  -[MSASConnection deleteAlbumWithGUID:personID:info:]
  -[MSASConnection setFocusAlbumGUIDByPersonID:]
  -[MSASConnection activityIsThrottledByLackOfDiskSpacePersonID:completionBlock:]
  -[MSASConnection retrieveAssets:inAlbumWithGUID:personID:]
  -[MSASConnection nextActivityDateHandler:]
  -[MSASConnection markAsSpamInvitationWithGUID:personID:completionBlock:]
  -[MSASConnection commentWithGUID:personID:completionBlock:]
  -[MSASConnection setFocusAlbumTimerByPersonID:]
  -[MSASConnection addAccessControlEntries:toAlbumWithGUID:personID:]
  -[MSASConnection isAssetCollectionWithGUID:markedAsUnviewedPersonID:completionBlock:]
  -[MSASConnection timerPingQueueSendSetUIForeground:personID:]
  -[MSASConnection markAsSpamInvitationWithToken:personID:completionBlock:]
  -[MSASConnection XPCNSClientConnection:didReceiveRequest:]
  -[MSASConnection accessControlWithGUID:personID:completionBlock:]
  -[MSASConnection markAlbumGUIDAsViewed:personID:moveLastViewedAssetCollectionMarker:info:]
  -[MSASConnection setMultipleContributorsEnabled:forAlbumWithGUID:personID:info:completionBlock:]
  -[MSASConnection isInRetryStateHandler:]
  -[MSASConnection init]
  -[MSASConnection subscribeToAlbumWithGUID:personID:]
  -[MSASConnection setConnection:]


MSPBTimerContext : NSObject
 @property  BOOL isValid
 @property  NSDate *date

  // class methods
  +[MSPBTimerContext contextWithDate:]

  // instance methods
  -[MSPBTimerContext setIsValid:]
  -[MSPBTimerContext setDate:]
  -[MSPBTimerContext date]
  -[MSPBTimerContext isValid]
  -[MSPBTimerContext .cxx_destruct]
  -[MSPBTimerContext init]


MSPowerBudget : NSObject
 @property  BOOL workQueueIsFileTransferAllowed
 @property  BOOL workQueueIsExternalPowered
 @property  BOOL workQueueIsForeground
 @property  MSPBTimerContext *workQueuePushTimerContext
 @property  MSPBTimerContext *workQueuePostForegroundTimerContext
 @property  MSPBTimerContext *workQueueGlobalResetSyncTimerContext
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <MSPowerBudgetDelegate> *delegate
 @property  double maxActiveTimeAfterPush
 @property  double maxActiveTimeAfterLossOfForeground
 @property  double maxActiveTimeAfterGlobalResetSync
 @property  NSString *focusAlbumGUID
 @property  NSString *focusAssetCollectionGUID
 @property  NSString *personID
 @property  BOOL fileTransferAllowed
 @property  BOOL foregroundFocus
 @property  BOOL hasActiveTimers

  // instance methods
  -[MSPowerBudget setPersonID:]
  -[MSPowerBudget shutDown]
  -[MSPowerBudget personID]
  -[MSPowerBudget didBeginForegroundFocus]
  -[MSPowerBudget workQueueSetPostForegroundTimerDate:]
  -[MSPowerBudget workQueueIsFileTransferAllowed]
  -[MSPowerBudget workQueuePostForegroundTimerContext]
  -[MSPowerBudget setDelegate:]
  -[MSPowerBudget workQueueSetExternalPowered:]
  -[MSPowerBudget hasActiveTimers]
  -[MSPowerBudget workQueueCommitPersistedValues]
  -[MSPowerBudget workQueue]
  -[MSPowerBudget setWorkQueueGlobalResetSyncTimerContext:]
  -[MSPowerBudget _postForegroundTimerDidExpire:]
  -[MSPowerBudget workQueueSetFileTransferAllowed:]
  -[MSPowerBudget delegate]
  -[MSPowerBudget setIsFileTransferAllowed:]
  -[MSPowerBudget didReceivePushNotification]
  -[MSPowerBudget setMaxActiveTimeAfterPush:]
  -[MSPowerBudget _globalResetSyncTimerDidExpire:]
  -[MSPowerBudget setWorkQueue:]
  -[MSPowerBudget didEndForegroundFocus]
  -[MSPowerBudget isFileTransferAllowed]
  -[MSPowerBudget .cxx_destruct]
  -[MSPowerBudget workQueueIsForeground]
  -[MSPowerBudget didEndExternalPower]
  -[MSPowerBudget setWorkQueuePostForegroundTimerContext:]
  -[MSPowerBudget didReceiveGlobalResetSync]
  -[MSPowerBudget workQueuePushTimerContext]
  -[MSPowerBudget workQueueRecomputeFileTransferAllowed]
  -[MSPowerBudget setMaxActiveTimeAfterGlobalResetSync:]
  -[MSPowerBudget workQueueSetPushTimerDate:]
  -[MSPowerBudget setWorkQueuePushTimerContext:]
  -[MSPowerBudget setFocusAssetCollectionGUID:]
  -[MSPowerBudget workQueueSetIsFileTransferAllowed:]
  -[MSPowerBudget setMaxActiveTimeAfterLossOfForeground:]
  -[MSPowerBudget maxActiveTimeAfterLossOfForeground]
  -[MSPowerBudget hasForegroundFocus]
  -[MSPowerBudget focusAlbumGUID]
  -[MSPowerBudget workQueueGlobalResetSyncTimerContext]
  -[MSPowerBudget workQueueMaxActiveTimeAfterGlobalResetSync]
  -[MSPowerBudget workQueueMaxActiveTimeAfterLossOfForeground]
  -[MSPowerBudget workQueueIsExternalPowered]
  -[MSPowerBudget workQueueMaxActiveTimeAfterPush]
  -[MSPowerBudget focusAssetCollectionGUID]
  -[MSPowerBudget maxActiveTimeAfterGlobalResetSync]
  -[MSPowerBudget didBeginExternalPower]
  -[MSPowerBudget init]
  -[MSPowerBudget workQueueSetGlobalResetSyncTimerDate:]
  -[MSPowerBudget maxActiveTimeAfterPush]
  -[MSPowerBudget setFocusAlbumGUID:]
  -[MSPowerBudget workQueueSetForeground:]


MSASPlatformImplementation : NSObject <MSASPlatform>
 @property  ACAccountStore *accountStore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MSASPlatformImplementation pushTokenForPersonID:]
  -[MSASPlatformImplementation setAccountStore:]
  -[MSASPlatformImplementation accountStore]
  -[MSASPlatformImplementation MMCSDownloadSocketOptionsForPersonID:]
  -[MSASPlatformImplementation personIDsEnabledForAlbumSharing]
  -[MSASPlatformImplementation shouldLogAtLevel:]
  -[MSASPlatformImplementation MMCSConcurrentConnectionsCount]
  -[MSASPlatformImplementation _accountForPersonID:]
  -[MSASPlatformImplementation pluginClass]
  -[MSASPlatformImplementation pathAlbumSharingDir]
  -[MSASPlatformImplementation .cxx_destruct]
  -[MSASPlatformImplementation albumSharingDaemon]
  -[MSASPlatformImplementation logLevel:personID:albumGUID:format:]
  -[MSASPlatformImplementation MSASIsAllowedToTransferMetadata]
  -[MSASPlatformImplementation MSASIsAllowedToUploadAssets]
  -[MSASPlatformImplementation baseSharingURLForPersonID:]
  -[MSASPlatformImplementation MSASPersonIDIsAllowedToDownloadAssets:]
  -[MSASPlatformImplementation MMCSUploadSocketOptionsForPersonID:]
  -[MSASPlatformImplementation shouldEnableNewFeatures]
  -[MSASPlatformImplementation init]
  -[MSASPlatformImplementation personIDUsesProductionPushEnvironment:]
  -[MSASPlatformImplementation personIDEnabledForAlbumSharing:]
  -[MSASPlatformImplementation deviceHasEnoughDiskSpaceRemainingToOperate]


XPCRequest : NSObject
 @property  unsigned long sequence
 @property  NSObject<OS_xpc_object> *message
 @property  NSObject<OS_xpc_object> *reply

  // instance methods
  -[XPCRequest reply]
  -[XPCRequest initWithMessage:sequence:connection:]
  -[XPCRequest .cxx_destruct]
  -[XPCRequest sendReply]
  -[XPCRequest sequence]
  -[XPCRequest message]


XPCClientConnection : NSObject
 @property  <XPCClientConnectionDelegate> *delegate

  // instance methods
  -[XPCClientConnection initWithServiceName:delegate:]
  -[XPCClientConnection shutDownCompletionBlock:]
  -[XPCClientConnection sendMessage:withHandler:]
  -[XPCClientConnection delegate]
  -[XPCClientConnection .cxx_destruct]
  -[XPCClientConnection _reallySendMessage:handler:sequence:retryCount:]
  -[XPCClientConnection _handleIncomingMessage:]
  -[XPCClientConnection _handleConnectionEvent:]


XPCServiceConnection : NSObject
 @property  NSObject<OS_xpc_object> *client
 @property  XPCServiceListener *serviceListener
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *serviceName
 @property  <XPCServiceConnectionDelegate> *delegate
 @property  <NSObject> *context

  // instance methods
  -[XPCServiceConnection shutDownCompletionBlock:]
  -[XPCServiceConnection setServiceListener:]
  -[XPCServiceConnection setDelegate:]
  -[XPCServiceConnection sendMessage:withHandler:]
  -[XPCServiceConnection serviceListener]
  -[XPCServiceConnection workQueue]
  -[XPCServiceConnection delegate]
  -[XPCServiceConnection setWorkQueue:]
  -[XPCServiceConnection serviceName]
  -[XPCServiceConnection .cxx_destruct]
  -[XPCServiceConnection resume]
  -[XPCServiceConnection client]
  -[XPCServiceConnection setContext:]
  -[XPCServiceConnection initWithServiceName:client:queue:]
  -[XPCServiceConnection workQueueHandleIncomingMessage:]
  -[XPCServiceConnection workQueueShutDown]
  -[XPCServiceConnection context]


XPCServiceListener : NSObject
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSObject<OS_xpc_object> *listener
 @property  NSMutableSet *serviceConnections
 @property  unsigned long clientCount
 @property  NSString *serviceName
 @property  <XPCServiceListenerDelegate> *delegate

  // instance methods
  -[XPCServiceListener initWithServiceName:queue:delegate:]
  -[XPCServiceListener clientCount]
  -[XPCServiceListener setServiceConnections:]
  -[XPCServiceListener serviceConnections]
  -[XPCServiceListener shutDownCompletionBlock:]
  -[XPCServiceListener serviceConnectionDidDisconnect:]
  -[XPCServiceListener workQueue]
  -[XPCServiceListener delegate]
  -[XPCServiceListener setWorkQueue:]
  -[XPCServiceListener serviceName]
  -[XPCServiceListener .cxx_destruct]
  -[XPCServiceListener setListener:]
  -[XPCServiceListener _workQueueShutDownServiceConnections:index:completionBlock:]
  -[XPCServiceListener setClientCount:]
  -[XPCServiceListener start]
  -[XPCServiceListener workQueueHandleIncomingConnection:]
  -[XPCServiceListener listener]


XPCNSRequest : NSObject
 @property  XPCRequest *request
 @property  <NSCoding> *message
 @property  NSData *data

  // instance methods
  -[XPCNSRequest sendReply:]
  -[XPCNSRequest .cxx_destruct]
  -[XPCNSRequest initWithXPCRequest:]
  -[XPCNSRequest message]
  -[XPCNSRequest request]
  -[XPCNSRequest data]


XPCNSClientConnection : NSObject <XPCClientConnectionDelegate>
 @property  <XPCNSClientConnectionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[XPCNSClientConnection initWithServiceName:delegate:]
  -[XPCNSClientConnection shutDownCompletionBlock:]
  -[XPCNSClientConnection delegate]
  -[XPCNSClientConnection .cxx_destruct]
  -[XPCNSClientConnection sendMessageReliably:data:maxRetryCount:withHandler:]
  -[XPCNSClientConnection sendMessage:data:withHandler:]
  -[XPCNSClientConnection XPCClientConnection:didReceiveRequest:]


XPCNSServiceConnection : NSObject <XPCServiceConnectionDelegate>
 @property  NSString *serviceName
 @property  <XPCNSServiceConnectionDelegate> *delegate
 @property  <NSObject> *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[XPCNSServiceConnection shutDownCompletionBlock:]
  -[XPCNSServiceConnection setDelegate:]
  -[XPCNSServiceConnection sendMessage:withHandler:]
  -[XPCNSServiceConnection delegate]
  -[XPCNSServiceConnection XPCServiceConnection:didReceiveRequest:sequenceNumber:]
  -[XPCNSServiceConnection serviceName]
  -[XPCNSServiceConnection .cxx_destruct]
  -[XPCNSServiceConnection initWithXPCServiceConnection:]
  -[XPCNSServiceConnection XPCServiceConnectionDidDisconnect:]
  -[XPCNSServiceConnection setContext:]
  -[XPCNSServiceConnection context]


XPCNSServiceListener : NSObject <XPCServiceListenerDelegate>
 @property  NSString *serviceName
 @property  <XPCNSServiceListenerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[XPCNSServiceListener initWithServiceName:queue:delegate:]
  -[XPCNSServiceListener shutDownCompletionBlock:]
  -[XPCNSServiceListener delegate]
  -[XPCNSServiceListener serviceName]
  -[XPCNSServiceListener XPCServiceListener:didReceiveNewConnection:]
  -[XPCNSServiceListener .cxx_destruct]
  -[XPCNSServiceListener start]
  -[XPCNSServiceListener XPCServiceListener:shouldAcceptNewConnection:]


(MSMSStringUtilities)
	// class methods
	+[(MSMSStringUtilities) MSMSUserDirectory]

01 00 0500 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 0600 /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream: MSASAlbum 
01 00 0600 /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream: MSASAssetCollection 
01 00 0600 /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream: MSAsset 
01 00 0600 /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream: MSTimerGate 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
