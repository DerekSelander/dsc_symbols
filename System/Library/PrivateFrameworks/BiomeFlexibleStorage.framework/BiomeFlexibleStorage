|| __DATA.__objc_data _OBJC_CLASS_$_BMSQLRow
|| __DATA.__objc_data _OBJC_CLASS_$_BMSelectExpression
|| __DATA.__objc_data _OBJC_CLASS_$_BMTable
|| __DATA.__objc_data _OBJC_CLASS_$_BMTableSchema
|| __DATA.__objc_data _OBJC_CLASS_$_BMTableStore
|| __DATA.__objc_data _OBJC_CLASS_$_BMTableUpsertSubscriber
|| __DATA.__objc_data _OBJC_CLASS_$_BiomeFlexibleStorageDirectory
|| __DATA.__objc_data _OBJC_METACLASS_$_BMSQLRow
|| __DATA.__objc_data _OBJC_METACLASS_$_BMSelectExpression
|| __DATA.__objc_data _OBJC_METACLASS_$_BMTable
|| __DATA.__objc_data _OBJC_METACLASS_$_BMTableSchema
|| __DATA.__objc_data _OBJC_METACLASS_$_BMTableStore
|| __DATA.__objc_data _OBJC_METACLASS_$_BMTableUpsertSubscriber
|| __DATA.__objc_data _OBJC_METACLASS_$_BiomeFlexibleStorageDirectory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BMRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BMRemoteSQLStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BMSQLStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_BMSQLStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__BMRegistrarRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BMRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BMRemoteSQLStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BMSQLStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_BMSQLStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__BMRegistrarRegistration
|| __TEXT.__const _BiomeFlexibleStorageVersionNumber
|| __TEXT.__const _BiomeFlexibleStorageVersionString
__ BiomeFoundation: _OBJC_CLASS_$_BMPaths
__ BiomeFoundation: _OBJC_CLASS_$_BMPublicStreamUtilities
__ BiomeFoundation: ___biome_log_create_for_category
__ BiomePubSub: _BPSDemandNone
__ BiomePubSub: _BPSDemandUnlimited
__ BiomePubSub: _OBJC_CLASS_$_BMBookmarkNode
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLog
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSValue
__ SoftLinking: __sl_dlopen
__ libSystem.B.dylib: _SANDBOX_CHECK_NO_REPORT
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _abort
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _sandbox_check
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _usleep
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libsqlite3.dylib: _sqlite3_bind_blob
__ libsqlite3.dylib: _sqlite3_bind_double
__ libsqlite3.dylib: _sqlite3_bind_int
__ libsqlite3.dylib: _sqlite3_bind_int64
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_parameter_count
__ libsqlite3.dylib: _sqlite3_bind_parameter_index
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_busy_handler
__ libsqlite3.dylib: _sqlite3_changes
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_count
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int
__ libsqlite3.dylib: _sqlite3_column_int64
__ libsqlite3.dylib: _sqlite3_column_name
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_create_function
__ libsqlite3.dylib: _sqlite3_data_count
__ libsqlite3.dylib: _sqlite3_errcode
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_exec
__ libsqlite3.dylib: _sqlite3_extended_errcode
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_free
__ libsqlite3.dylib: _sqlite3_interrupt
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_libversion
__ libsqlite3.dylib: _sqlite3_limit
__ libsqlite3.dylib: _sqlite3_next_stmt
__ libsqlite3.dylib: _sqlite3_open
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_result_blob
__ libsqlite3.dylib: _sqlite3_result_double
__ libsqlite3.dylib: _sqlite3_result_error
__ libsqlite3.dylib: _sqlite3_result_error_code
__ libsqlite3.dylib: _sqlite3_result_error_nomem
__ libsqlite3.dylib: _sqlite3_result_error_toobig
__ libsqlite3.dylib: _sqlite3_result_int
__ libsqlite3.dylib: _sqlite3_result_int64
__ libsqlite3.dylib: _sqlite3_result_null
__ libsqlite3.dylib: _sqlite3_result_text
__ libsqlite3.dylib: _sqlite3_sleep
__ libsqlite3.dylib: _sqlite3_step
__ libsqlite3.dylib: _sqlite3_threadsafe
__ libsqlite3.dylib: _sqlite3_user_data
__ libsqlite3.dylib: _sqlite3_value_blob
__ libsqlite3.dylib: _sqlite3_value_bytes
__ libsqlite3.dylib: _sqlite3_value_double
__ libsqlite3.dylib: _sqlite3_value_int
__ libsqlite3.dylib: _sqlite3_value_int64
__ libsqlite3.dylib: _sqlite3_value_text
__ libsqlite3.dylib: _sqlite3_value_type
__ libsqlite3.dylib: _sqlite3_wal_checkpoint_v2
BMSQLRow : NSObject <BMRow>
 @property  NSMutableArray *allValues

  // instance methods
  -[BMSQLRow values]
  -[BMSQLRow columnCount]
  -[BMSQLRow allValues]
  -[BMSQLRow .cxx_destruct]
  -[BMSQLRow init]
  -[BMSQLRow isEqual:]
  -[BMSQLRow initWithValues:]
  -[BMSQLRow valueAtIdx:]
  -[BMSQLRow setAllValues:]


BMTableStore : NSObject
 @property  {os_unfair_lock_s=I} lock
 @property  NSArray *classArray
 @property  NSString *sqlReplace
 @property  _bmFMDatabase *db
 @property  NSURL *dbURL
 @property  NSString *tableName

  // instance methods
  -[BMTableStore .cxx_destruct]
  -[BMTableStore dbURL]
  -[BMTableStore openDB]
  -[BMTableStore tableName]
  -[BMTableStore closeDB]
  -[BMTableStore db]
  -[BMTableStore lock]
  -[BMTableStore initWithURL:]
  -[BMTableStore addTable:named:error:]
  -[BMTableStore upsertRows:error:]
  -[BMTableStore selectTableNamed:error:]
  -[BMTableStore setupClassArray:table:named:error:]
  -[BMTableStore classArray]
  -[BMTableStore sqlReplace]


BiomeFlexibleStorageDirectory : NSObject
  // class methods
  +[BiomeFlexibleStorageDirectory directoryForPrivateTable]
  +[BiomeFlexibleStorageDirectory privateDBPathWithIdentifier:directory:create:]


BMTable : NSObject
 @property  NSArray *rows
 @property  BMTableSchema *schema

  // instance methods
  -[BMTable schema]
  -[BMTable rows]
  -[BMTable setSchema:]
  -[BMTable .cxx_destruct]
  -[BMTable setRows:]
  -[BMTable init]
  -[BMTable initWithRows:schema:]


BMTableSchema : NSObject <NSSecureCoding>
 @property  NSArray *columnNames

  // class methods
  +[BMTableSchema supportsSecureCoding]

  // instance methods
  -[BMTableSchema initWithCoder:]
  -[BMTableSchema .cxx_destruct]
  -[BMTableSchema initWithColumnNames:]
  -[BMTableSchema setColumnNames:]
  -[BMTableSchema columnNames]
  -[BMTableSchema encodeWithCoder:]


BMSQLStore : NSObject
 @property  BOOL dbIsReady
 @property  {os_unfair_lock_s=I} dbLock
 @property  _bmFMDatabase *db
 @property  NSURL *dbURL
 @property  ^v sqliteHandle

  // class methods
  +[BMSQLStore migrations]

  // instance methods
  -[BMSQLStore sqliteHandle]
  -[BMSQLStore .cxx_destruct]
  -[BMSQLStore dbURL]
  -[BMSQLStore db]
  -[BMSQLStore initWithURL:]
  -[BMSQLStore initWithFMDBHandle:]
  -[BMSQLStore dbIsReady]
  -[BMSQLStore dbLock]


_BMRegistrarRegistration : NSObject
 @property  NSString *bundleID
 @property  NSURL *databaseURL
 @property  NSString *sourceStreamID
 @property  NSDate *registrationDate
 @property  NSDate *lastCommunicationDate

  // instance methods
  -[_BMRegistrarRegistration setRegistrationDate:]
  -[_BMRegistrarRegistration bundleID]
  -[_BMRegistrarRegistration databaseURL]
  -[_BMRegistrarRegistration .cxx_destruct]
  -[_BMRegistrarRegistration setDatabaseURL:]
  -[_BMRegistrarRegistration setBundleID:]
  -[_BMRegistrarRegistration registrationDate]
  -[_BMRegistrarRegistration sourceStreamID]
  -[_BMRegistrarRegistration setSourceStreamID:]
  -[_BMRegistrarRegistration lastCommunicationDate]
  -[_BMRegistrarRegistration setLastCommunicationDate:]


BMRegistrar : BMSQLStore
 @property  NSDictionary *registeredClientsByStream
 @property  NSDictionary *streamRegistrationCounts

  // class methods
  +[BMRegistrar migrations]
  +[BMRegistrar centralRegistrar]

  // instance methods
  -[BMRegistrar init]
  -[BMRegistrar propagateDeletionOfEventsInStream:withIdentifiers:]
  -[BMRegistrar registeredClientsByStream]
  -[BMRegistrar registerClientWithBundleID:databaseURL:source:]
  -[BMRegistrar registrationsForStream:]
  -[BMRegistrar streamRegistrationCounts]
  -[BMRegistrar propagateDeletionOfEvents:]


BMSelectExpression : NSObject <BMTableQueryExpression>
 @property  NSArray *columnNames
 @property  NSArray *children

  // class methods
  +[BMSelectExpression supportsSecureCoding]

  // instance methods
  -[BMSelectExpression setChildren:]
  -[BMSelectExpression initWithCoder:]
  -[BMSelectExpression children]
  -[BMSelectExpression .cxx_destruct]
  -[BMSelectExpression init]
  -[BMSelectExpression setColumnNames:]
  -[BMSelectExpression columnNames]
  -[BMSelectExpression encodeWithCoder:]
  -[BMSelectExpression initWithChildren:columnNames:]
  -[BMSelectExpression queryTable:]


BMSQLStoreManager : BMSQLStore
 @property  NSMutableSet *managedTableNames
 @property  <BMIdentifiable> *sessionEvent

  // class methods
  +[BMSQLStoreManager migrations]

  // instance methods
  -[BMSQLStoreManager .cxx_destruct]
  -[BMSQLStoreManager initWithURL:]
  -[BMSQLStoreManager sessionEvent]
  -[BMSQLStoreManager addManagedTable:derivedFromStream:]
  -[BMSQLStoreManager beginManagedSessionWithEvent:]
  -[BMSQLStoreManager endManagedSession]
  -[BMSQLStoreManager addManagedTable:derivedFromSource:]
  -[BMSQLStoreManager deleteRowsDerivedFromStream:eventIdentifier:]
  -[BMSQLStoreManager deleteRowsDerivedFromStream:eventIdentifiers:]
  -[BMSQLStoreManager managedTableNames]
  -[BMSQLStoreManager managedTables]
  -[BMSQLStoreManager prepareTriggerForTable:]
  -[BMSQLStoreManager setSessionEvent:]
  -[BMSQLStoreManager deleteRowsDerivedFromEvent:]
  -[BMSQLStoreManager deleteRows:fromTable:]
  -[BMSQLStoreManager deleteRowsDerivedFromEvents:]


BMTableUpsertSubscriber : NSObject <BMTableSubscriber>
 @property  {os_unfair_lock_s=I} lock
 @property  BMTableStore *store
 @property  BOOL tableSetupComplete
 @property  BPSSubscription *subscription
 @property  NSError *tableSetupError
 @property  <BMFlexibleSimpleKeyValueStorage> *keyValueStore
 @property  NSString *tableName
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[BMTableUpsertSubscriber subscription]
  -[BMTableUpsertSubscriber setSubscription:]
  -[BMTableUpsertSubscriber newBookmark]
  -[BMTableUpsertSubscriber receiveCompletion:]
  -[BMTableUpsertSubscriber receiveInput:]
  -[BMTableUpsertSubscriber .cxx_destruct]
  -[BMTableUpsertSubscriber tableName]
  -[BMTableUpsertSubscriber receiveSubscription:]
  -[BMTableUpsertSubscriber identifier]
  -[BMTableUpsertSubscriber store]
  -[BMTableUpsertSubscriber cancel]
  -[BMTableUpsertSubscriber keyValueStore]
  -[BMTableUpsertSubscriber lock]
  -[BMTableUpsertSubscriber initWithTableName:identifier:keyValueStore:]
  -[BMTableUpsertSubscriber initWithTableName:identifier:]
  -[BMTableUpsertSubscriber tableSetupComplete]
  -[BMTableUpsertSubscriber tableSetupError]
  -[BMTableUpsertSubscriber setTableSetupError:]
  -[BMTableUpsertSubscriber setTableSetupComplete:]


BMRemoteSQLStoreManager : BMSQLStoreManager
 @property  BOOL remoteOnly

  // instance methods
  -[BMRemoteSQLStoreManager initWithURL:]
  -[BMRemoteSQLStoreManager deleteRowsDerivedFromStream:eventIdentifier:]
  -[BMRemoteSQLStoreManager setRemoteOnly:]
  -[BMRemoteSQLStoreManager remoteOnly]
  -[BMRemoteSQLStoreManager hasReadWriteAccessToURL:]


_bmFMDatabase : NSObject
 @property  unsigned int applicationID
 @property  unsigned int userVersion
 @property  BOOL traceExecution
 @property  BOOL checkedOut
 @property  BOOL crashOnErrors
 @property  BOOL logsErrors
 @property  NSMutableDictionary *cachedStatements
 @property  BOOL isOpen
 @property  BOOL goodConnection
 @property  long long lastInsertRowId
 @property  int changes
 @property  BOOL isInTransaction
 @property  BOOL hasOpenResultSets
 @property  BOOL shouldCacheStatements
 @property  NSString *databasePath
 @property  NSURL *databaseURL
 @property  ^v sqliteHandle
 @property  double maxBusyRetryTimeInterval

  // class methods
  +[_bmFMDatabase databaseWithURL:]
  +[_bmFMDatabase FMDBUserVersion]
  +[_bmFMDatabase databaseWithPath:]
  +[_bmFMDatabase FMDBVersion]
  +[_bmFMDatabase sqliteLibVersion]
  +[_bmFMDatabase isSQLiteThreadSafe]
  +[_bmFMDatabase storeableDateFormat:]

  // instance methods
  -[_bmFMDatabase executeQuery:]
  -[_bmFMDatabase commit]
  -[_bmFMDatabase changes]
  -[_bmFMDatabase setIsOpen:]
  -[_bmFMDatabase tableExists:]
  -[_bmFMDatabase setApplicationID:]
  -[_bmFMDatabase lastInsertRowId]
  -[_bmFMDatabase setUserVersion:]
  -[_bmFMDatabase userVersion]
  -[_bmFMDatabase databasePath]
  -[_bmFMDatabase applicationID]
  -[_bmFMDatabase setKey:]
  -[_bmFMDatabase lastErrorMessage]
  -[_bmFMDatabase lastErrorCode]
  -[_bmFMDatabase beginTransaction]
  -[_bmFMDatabase interrupt]
  -[_bmFMDatabase rollback]
  -[_bmFMDatabase sqliteHandle]
  -[_bmFMDatabase initWithPath:]
  -[_bmFMDatabase shouldCacheStatements]
  -[_bmFMDatabase lastError]
  -[_bmFMDatabase databaseURL]
  -[_bmFMDatabase .cxx_destruct]
  -[_bmFMDatabase dateFromString:]
  -[_bmFMDatabase isOpen]
  -[_bmFMDatabase init]
  -[_bmFMDatabase setDateFormat:]
  -[_bmFMDatabase cachedStatementForQuery:]
  -[_bmFMDatabase clearCachedStatements]
  -[_bmFMDatabase executeUpdate:]
  -[_bmFMDatabase close]
  -[_bmFMDatabase dealloc]
  -[_bmFMDatabase isInTransaction]
  -[_bmFMDatabase beginExclusiveTransaction]
  -[_bmFMDatabase stringFromDate:]
  -[_bmFMDatabase setCachedStatement:forQuery:]
  -[_bmFMDatabase open]
  -[_bmFMDatabase prepare:]
  -[_bmFMDatabase initWithURL:]
  -[_bmFMDatabase stringForQuery:]
  -[_bmFMDatabase errorWithMessage:]
  -[_bmFMDatabase valueString:]
  -[_bmFMDatabase inTransaction]
  -[_bmFMDatabase hadError]
  -[_bmFMDatabase executeUpdate:values:error:]
  -[_bmFMDatabase getTableSchema:]
  -[_bmFMDatabase startSavePointWithName:error:]
  -[_bmFMDatabase executeStatements:]
  -[_bmFMDatabase releaseSavePointWithName:error:]
  -[_bmFMDatabase rollbackToSavePointWithName:error:]
  -[_bmFMDatabase executeQuery:values:error:]
  -[_bmFMDatabase executeUpdate:withArgumentsInArray:]
  -[_bmFMDatabase sqlitePath]
  -[_bmFMDatabase setMaxBusyRetryTimeInterval:]
  -[_bmFMDatabase openWithFlags:vfs:]
  -[_bmFMDatabase closeOpenResultSets]
  -[_bmFMDatabase rekeyWithData:]
  -[_bmFMDatabase setKeyWithData:]
  -[_bmFMDatabase warnInUse]
  -[_bmFMDatabase hasDateFormatter]
  -[_bmFMDatabase executeQuery:withArgumentsInArray:orDictionary:orVAList:shouldBind:]
  -[_bmFMDatabase databaseExists]
  -[_bmFMDatabase bindStatement:WithArgumentsInArray:orDictionary:orVAList:]
  -[_bmFMDatabase bindObject:toColumn:inStatement:]
  -[_bmFMDatabase extractSQL:argumentsList:intoString:arguments:]
  -[_bmFMDatabase executeQuery:withArgumentsInArray:]
  -[_bmFMDatabase executeUpdate:error:withArgumentsInArray:orDictionary:orVAList:]
  -[_bmFMDatabase executeStatements:withResultBlock:]
  -[_bmFMDatabase logsErrors]
  -[_bmFMDatabase checkpoint:name:logFrameCount:checkpointCount:error:]
  -[_bmFMDatabase crashOnErrors]
  -[_bmFMDatabase setCachedStatements:]
  -[_bmFMDatabase makeFunctionNamed:arguments:block:]
  -[_bmFMDatabase limitFor:value:]
  -[_bmFMDatabase openWithFlags:]
  -[_bmFMDatabase maxBusyRetryTimeInterval]
  -[_bmFMDatabase busyRetryTimeout]
  -[_bmFMDatabase setBusyRetryTimeout:]
  -[_bmFMDatabase hasOpenResultSets]
  -[_bmFMDatabase resultSetDidClose:]
  -[_bmFMDatabase rekey:]
  -[_bmFMDatabase goodConnection]
  -[_bmFMDatabase lastExtendedErrorCode]
  -[_bmFMDatabase executeQuery:withParameterDictionary:]
  -[_bmFMDatabase executeQueryWithFormat:]
  -[_bmFMDatabase executeQuery:withVAList:]
  -[_bmFMDatabase executeUpdate:withParameterDictionary:]
  -[_bmFMDatabase executeUpdate:withVAList:]
  -[_bmFMDatabase executeUpdateWithFormat:]
  -[_bmFMDatabase executeUpdate:withErrorAndBindings:]
  -[_bmFMDatabase update:withErrorAndBindings:]
  -[_bmFMDatabase beginDeferredTransaction]
  -[_bmFMDatabase beginImmediateTransaction]
  -[_bmFMDatabase inSavePoint:]
  -[_bmFMDatabase checkpoint:error:]
  -[_bmFMDatabase checkpoint:name:error:]
  -[_bmFMDatabase setShouldCacheStatements:]
  -[_bmFMDatabase makeFunctionNamed:maximumArguments:withBlock:]
  -[_bmFMDatabase valueType:]
  -[_bmFMDatabase valueInt:]
  -[_bmFMDatabase valueLong:]
  -[_bmFMDatabase valueDouble:]
  -[_bmFMDatabase valueData:]
  -[_bmFMDatabase resultNullInContext:]
  -[_bmFMDatabase resultInt:context:]
  -[_bmFMDatabase resultLong:context:]
  -[_bmFMDatabase resultDouble:context:]
  -[_bmFMDatabase resultData:context:]
  -[_bmFMDatabase resultString:context:]
  -[_bmFMDatabase resultError:context:]
  -[_bmFMDatabase resultErrorCode:context:]
  -[_bmFMDatabase resultErrorNoMemoryInContext:]
  -[_bmFMDatabase resultErrorTooBigInContext:]
  -[_bmFMDatabase traceExecution]
  -[_bmFMDatabase setTraceExecution:]
  -[_bmFMDatabase checkedOut]
  -[_bmFMDatabase setCheckedOut:]
  -[_bmFMDatabase setCrashOnErrors:]
  -[_bmFMDatabase setLogsErrors:]
  -[_bmFMDatabase cachedStatements]
  -[_bmFMDatabase columnExists:inTableWithName:]
  -[_bmFMDatabase intForQuery:]
  -[_bmFMDatabase longForQuery:]
  -[_bmFMDatabase boolForQuery:]
  -[_bmFMDatabase doubleForQuery:]
  -[_bmFMDatabase dataForQuery:]
  -[_bmFMDatabase dateForQuery:]
  -[_bmFMDatabase getSchema]
  -[_bmFMDatabase columnExists:columnName:]
  -[_bmFMDatabase validateSQL:error:]


_bmFMStatement : NSObject
 @property  long long useCount
 @property  NSString *query
 @property  ^v statement
 @property  BOOL inUse

  // instance methods
  -[_bmFMStatement statement]
  -[_bmFMStatement setQuery:]
  -[_bmFMStatement query]
  -[_bmFMStatement .cxx_destruct]
  -[_bmFMStatement useCount]
  -[_bmFMStatement inUse]
  -[_bmFMStatement reset]
  -[_bmFMStatement close]
  -[_bmFMStatement setUseCount:]
  -[_bmFMStatement dealloc]
  -[_bmFMStatement setInUse:]
  -[_bmFMStatement setStatement:]


_bmFMResultSet : NSObject
 @property  BOOL shouldAutoClose
 @property  _bmFMDatabase *parentDB
 @property  NSString *query
 @property  NSMutableDictionary *columnNameToIndexMap
 @property  _bmFMStatement *statement
 @property  int columnCount
 @property  NSDictionary *resultDictionary

  // class methods
  +[_bmFMResultSet resultSetWithStatement:usingParentDatabase:shouldAutoClose:]

  // instance methods
  -[_bmFMResultSet step]
  -[_bmFMResultSet statement]
  -[_bmFMResultSet setQuery:]
  -[_bmFMResultSet intForColumnIndex:]
  -[_bmFMResultSet stringForColumnIndex:]
  -[_bmFMResultSet next]
  -[_bmFMResultSet columnCount]
  -[_bmFMResultSet doubleForColumnIndex:]
  -[_bmFMResultSet dataForColumnIndex:]
  -[_bmFMResultSet query]
  -[_bmFMResultSet dateForColumnIndex:]
  -[_bmFMResultSet objectForKeyedSubscript:]
  -[_bmFMResultSet .cxx_destruct]
  -[_bmFMResultSet objectAtIndexedSubscript:]
  -[_bmFMResultSet close]
  -[_bmFMResultSet dealloc]
  -[_bmFMResultSet setStatement:]
  -[_bmFMResultSet objectForColumnIndex:]
  -[_bmFMResultSet resultDictionary]
  -[_bmFMResultSet nextWithError:]
  -[_bmFMResultSet intForColumn:]
  -[_bmFMResultSet longForColumnIndex:]
  -[_bmFMResultSet setParentDB:]
  -[_bmFMResultSet internalStepWithError:]
  -[_bmFMResultSet setShouldAutoClose:]
  -[_bmFMResultSet columnNameToIndexMap]
  -[_bmFMResultSet objectForColumnName:]
  -[_bmFMResultSet stepWithError:]
  -[_bmFMResultSet columnIndexForName:]
  -[_bmFMResultSet longLongIntForColumnIndex:]
  -[_bmFMResultSet unsignedLongLongIntForColumnIndex:]
  -[_bmFMResultSet boolForColumnIndex:]
  -[_bmFMResultSet dataNoCopyForColumnIndex:]
  -[_bmFMResultSet columnIndexIsNull:]
  -[_bmFMResultSet UTF8StringForColumnIndex:]
  -[_bmFMResultSet UTF8StringForColumn:]
  -[_bmFMResultSet objectForColumn:]
  -[_bmFMResultSet bindWithArray:orDictionary:orVAList:]
  -[_bmFMResultSet kvcMagic:]
  -[_bmFMResultSet resultDict]
  -[_bmFMResultSet hasAnotherRow]
  -[_bmFMResultSet longForColumn:]
  -[_bmFMResultSet longLongIntForColumn:]
  -[_bmFMResultSet unsignedLongLongIntForColumn:]
  -[_bmFMResultSet boolForColumn:]
  -[_bmFMResultSet doubleForColumn:]
  -[_bmFMResultSet stringForColumn:]
  -[_bmFMResultSet dateForColumn:]
  -[_bmFMResultSet dataForColumn:]
  -[_bmFMResultSet dataNoCopyForColumn:]
  -[_bmFMResultSet columnIsNull:]
  -[_bmFMResultSet UTF8StringForColumnName:]
  -[_bmFMResultSet columnNameForIndex:]
  -[_bmFMResultSet bindWithArray:]
  -[_bmFMResultSet bindWithDictionary:]
  -[_bmFMResultSet parentDB]
  -[_bmFMResultSet shouldAutoClose]


_bmFMDatabasePool : NSObject
 @property  NSString *path
 @property  id delegate
 @property  unsigned long maximumNumberOfDatabasesToCreate
 @property  int openFlags
 @property  NSString *vfsName
 @property  unsigned long countOfCheckedInDatabases
 @property  unsigned long countOfCheckedOutDatabases
 @property  unsigned long countOfOpenDatabases

  // class methods
  +[_bmFMDatabasePool databaseClass]
  +[_bmFMDatabasePool databasePoolWithPath:]
  +[_bmFMDatabasePool databasePoolWithURL:]
  +[_bmFMDatabasePool databasePoolWithPath:flags:]
  +[_bmFMDatabasePool databasePoolWithURL:flags:]

  // instance methods
  -[_bmFMDatabasePool setPath:]
  -[_bmFMDatabasePool initWithPath:]
  -[_bmFMDatabasePool .cxx_destruct]
  -[_bmFMDatabasePool setDelegate:]
  -[_bmFMDatabasePool init]
  -[_bmFMDatabasePool inTransaction:]
  -[_bmFMDatabasePool path]
  -[_bmFMDatabasePool delegate]
  -[_bmFMDatabasePool db]
  -[_bmFMDatabasePool dealloc]
  -[_bmFMDatabasePool inExclusiveTransaction:]
  -[_bmFMDatabasePool initWithURL:]
  -[_bmFMDatabasePool inSavePoint:]
  -[_bmFMDatabasePool initWithPath:flags:]
  -[_bmFMDatabasePool initWithPath:flags:vfs:]
  -[_bmFMDatabasePool executeLocked:]
  -[_bmFMDatabasePool pushDatabaseBackInPool:]
  -[_bmFMDatabasePool beginTransaction:withBlock:]
  -[_bmFMDatabasePool initWithURL:flags:vfs:]
  -[_bmFMDatabasePool initWithURL:flags:]
  -[_bmFMDatabasePool countOfCheckedInDatabases]
  -[_bmFMDatabasePool countOfCheckedOutDatabases]
  -[_bmFMDatabasePool countOfOpenDatabases]
  -[_bmFMDatabasePool releaseAllDatabases]
  -[_bmFMDatabasePool inDatabase:]
  -[_bmFMDatabasePool inDeferredTransaction:]
  -[_bmFMDatabasePool inImmediateTransaction:]
  -[_bmFMDatabasePool maximumNumberOfDatabasesToCreate]
  -[_bmFMDatabasePool setMaximumNumberOfDatabasesToCreate:]
  -[_bmFMDatabasePool openFlags]
  -[_bmFMDatabasePool vfsName]
  -[_bmFMDatabasePool setVfsName:]


_bmFMDatabaseQueue : NSObject
 @property  NSString *path
 @property  int openFlags
 @property  NSString *vfsName

  // class methods
  +[_bmFMDatabaseQueue databaseClass]
  +[_bmFMDatabaseQueue databaseQueueWithPath:]
  +[_bmFMDatabaseQueue databaseQueueWithPath:flags:]
  +[_bmFMDatabaseQueue databaseQueueWithURL:]
  +[_bmFMDatabaseQueue databaseQueueWithURL:flags:]

  // instance methods
  -[_bmFMDatabaseQueue setPath:]
  -[_bmFMDatabaseQueue database]
  -[_bmFMDatabaseQueue interrupt]
  -[_bmFMDatabaseQueue initWithPath:]
  -[_bmFMDatabaseQueue .cxx_destruct]
  -[_bmFMDatabaseQueue init]
  -[_bmFMDatabaseQueue inTransaction:]
  -[_bmFMDatabaseQueue path]
  -[_bmFMDatabaseQueue close]
  -[_bmFMDatabaseQueue dealloc]
  -[_bmFMDatabaseQueue inExclusiveTransaction:]
  -[_bmFMDatabaseQueue initWithURL:]
  -[_bmFMDatabaseQueue checkpoint:name:logFrameCount:checkpointCount:error:]
  -[_bmFMDatabaseQueue inSavePoint:]
  -[_bmFMDatabaseQueue checkpoint:error:]
  -[_bmFMDatabaseQueue checkpoint:name:error:]
  -[_bmFMDatabaseQueue initWithPath:flags:]
  -[_bmFMDatabaseQueue initWithPath:flags:vfs:]
  -[_bmFMDatabaseQueue beginTransaction:withBlock:]
  -[_bmFMDatabaseQueue initWithURL:flags:vfs:]
  -[_bmFMDatabaseQueue initWithURL:flags:]
  -[_bmFMDatabaseQueue inDatabase:]
  -[_bmFMDatabaseQueue inDeferredTransaction:]
  -[_bmFMDatabaseQueue inImmediateTransaction:]
  -[_bmFMDatabaseQueue openFlags]
  -[_bmFMDatabaseQueue vfsName]
  -[_bmFMDatabaseQueue setVfsName:]


01 00 0100 /System/Library/PrivateFrameworks/BiomePubSub.framework/BiomePubSub: BMBookmarkNode 
01 00 0200 /System/Library/PrivateFrameworks/BiomeFoundation.framework/BiomeFoundation: BMPaths 
01 00 0200 /System/Library/PrivateFrameworks/BiomeFoundation.framework/BiomeFoundation: BMPublicStreamUtilities 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0500 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 0700 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0400 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
