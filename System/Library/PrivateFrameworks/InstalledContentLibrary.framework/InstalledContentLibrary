|| __DATA.__data _ICLWorkspaceErrorDomain
|| __DATA_CONST.__const _MIContainerManagerErrorDomain
|| __DATA_CONST.__const _MIFunctionNameErrorKey
|| __DATA_CONST.__const _MIInstallerErrorDomain
|| __DATA_CONST.__const _MILibMISErrorNumberKey
|| __DATA_CONST.__const _MIPathArgumentErrorKey
|| __DATA_CONST.__const _MIRequiredOSErrorKey
|| __DATA_CONST.__const _MIRequiredOSVersionErrorKey
|| __DATA_CONST.__const _MISourceFileLineErrorKey
|| __DATA_CONST.__const _kMICallbackPercentCompleteKey
|| __DATA_CONST.__const _kMIDemotionCompleteErrorOccurredKey
|| __DATA_CONST.__const _kMIDemotionCompleteNotificationName
|| __DATA_CONST.__const _kMIInstallResultInstalledAppInfoArrayKey
|| __DATA_CONST.__const _kMIUninstallParallelPlaceholderKey
|| __DATA_CONST.__const _kMIUninstallResultRemovedAppInfoArrayKey
|| __DATA_CONST.__const _kMIWatchKitSnapshotInfoDiskUsageBytes
|| __DATA_CONST.__const _kMIWatchKitSnapshotOptionCreatePlaceholder
|| __DATA_CONST.__const _kMIWatchKitSnapshotOptionMaxWKAppVersion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLAppExtensionRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLAppRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLBundleRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLFrameworkRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLPlaceholderRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLRegistrationOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLSinfInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLStashedAppRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLSystemAppPlaceholderRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLUninstallRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_ICLWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIAppExtensionBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIBundleContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIBundleMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MICapabilitiesManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MICodeSigningVerifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIContainerProtectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIDaemonConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIDataContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIDriverKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIEmbeddedWatchBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIExecutableBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIExtensionKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIFileManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIFilesystemScanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIGlobalConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIGroupContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIInstallationIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIInstalledInfoGatherer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIKeychainAccessGroupTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MILaunchServicesDatabaseGatherer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIPluginDataContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIPluginKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIStoreMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MIStoreMetadataSubGenre
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MISystemAppState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_MITestManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLAppExtensionRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLAppRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLBundleRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLFeatureFlags
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLFrameworkRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLPlaceholderRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLRegistrationOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLSinfInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLStashedAppRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLSystemAppPlaceholderRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLUninstallRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_ICLWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIAppExtensionBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIBundleContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIBundleMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MICapabilitiesManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MICodeSigningVerifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIContainerProtectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIDaemonConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIDataContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIDriverKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIEmbeddedWatchBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIExecutableBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIExtensionKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIFileManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIFilesystemScanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIGlobalConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIGroupContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIInstallationIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIInstalledInfoGatherer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIKeychainAccessGroupTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MILaunchServicesDatabaseGatherer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIPluginDataContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIPluginKitBundle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIStoreMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MIStoreMetadataSubGenre
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MISystemAppState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_MITestManager
|| __TEXT.__text _ICLSetLoggingHandle
|| __TEXT.__text _MIAssertHighResourceUsage
|| __TEXT.__text _MIAssumeIdentity
|| __TEXT.__text _MIAssumeIdentityOfUsername
|| __TEXT.__text _MIAssumeMobileIdentity
|| __TEXT.__text _MIClearResourceAssertion
|| __TEXT.__text _MICopyCurrentBuildVersion
|| __TEXT.__text _MICopyExtensionCacheEntry
|| __TEXT.__text _MICopyExtensionCacheEntryWithPlatform
|| __TEXT.__text _MICopyProcessNameForPid
|| __TEXT.__text _MICrashOnException
|| __TEXT.__text _MICreateSHA256Digest
|| __TEXT.__text _MIErrorStringForMISError
|| __TEXT.__text _MIFetchInfoForUsername
|| __TEXT.__text _MIFetchSignatureVersionForExecutableURL
|| __TEXT.__text _MIGetCurrentMobileUserInfo
|| __TEXT.__text _MIHasRequiredStringValueOfNonZeroLength
|| __TEXT.__text _MIHasRequiredStringValueOfNonZeroLengthCF
|| __TEXT.__text _MIHasStringValueOfNonZeroLength
|| __TEXT.__text _MIHasStringValueOfNonZeroLengthIfDefined
|| __TEXT.__text _MIHasStringValueOfNonZeroLengthIfDefinedCF
|| __TEXT.__text _MIInstallProfileAtURL
|| __TEXT.__text _MIInstallProfileWithData
|| __TEXT.__text _MIIsBuildUpgrade
|| __TEXT.__text _MIIsFatalMISProfileInstallationError
|| __TEXT.__text _MIIsValidInstallationDomain
|| __TEXT.__text _MIIsValidRDNSString
|| __TEXT.__text _MILoadFilteredPlist
|| __TEXT.__text _MILoadInfoPlist
|| __TEXT.__text _MIMachOFileIsBuiltForDriverKitPlatform
|| __TEXT.__text _MIMachOFileIsBuiltForPlatform
|| __TEXT.__text _MIMachOFileIterateImageVersions
|| __TEXT.__text _MIMachOFileMatchesMyArchitecture
|| __TEXT.__text _MIRecordCurrentBuildVersion
|| __TEXT.__text _MIRemoveSinf
|| __TEXT.__text _MIReplicateRootSinf
|| __TEXT.__text _MIRestoreIdentity
|| __TEXT.__text _MIRunTransactionalTask
|| __TEXT.__text _MIStringForInstallationDomain
|| __TEXT.__text _MIUninstallProfilesForAppIdentifier
|| __TEXT.__text _MIUpdateSinfWithData
|| __TEXT.__text _TraverseDirectory
|| __TEXT.__text _TraverseDirectoryWithPostTraversal
__ AppleMobileFileIntegrity: _amfi_interface_query_bootarg_state
__ CoreFoundation: _CFBundleCopyResourceURL
__ CoreFoundation: _CFBundleGetInfoDictionary
__ CoreFoundation: _CFCopyTypeIDDescription
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: _OBJC_METACLASS_$_NSMutableDictionary
__ CoreFoundation: __CFBundleCreateFilteredInfoPlist
__ CoreFoundation: __CFBundleCreateUnique
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionaryValue
__ CoreFoundation: __CFPropertyListCreateFiltered
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleDisplayNameKey
__ CoreFoundation: __kCFBundlePackageTypeKey
__ CoreFoundation: __kCFBundleShortVersionStringKey
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleExecutableKey
__ CoreFoundation: _kCFBundleIdentifierKey
__ CoreFoundation: _kCFBundleNameKey
__ CoreFoundation: _kCFBundleVersionKey
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSFilePathErrorKey
__ Foundation: _NSFileProtectionComplete
__ Foundation: _NSFileProtectionCompleteUnlessOpen
__ Foundation: _NSFileProtectionCompleteUntilFirstUserAuthentication
__ Foundation: _NSFileProtectionCompleteUntilUserAuthentication
__ Foundation: _NSFileProtectionNone
__ Foundation: _NSFileProtectionWriteOnly
__ Foundation: _NSHashGet
__ Foundation: _NSHashInsertKnownAbsent
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ MobileSystemServices: _MOLogWrite
__ Security: _SecCertificateCopyOrganization
__ Security: _SecCertificateCopySubjectSummary
__ Security: _SecCertificateCreateWithData
__ Security: _SecItemDeleteAllWithAccessGroups
__ SoftLinking: __sl_dlopen
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _CONTAINER_PERSONA_PRIMARY
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_source_type_proc
__ libSystem.B.dylib: __os_crash
__ libSystem.B.dylib: __os_crash_msg
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_send_and_compose_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _acl_copy_ext_native
__ libSystem.B.dylib: _acl_free
__ libSystem.B.dylib: _acl_get_file
__ libSystem.B.dylib: _acl_init
__ libSystem.B.dylib: _acl_set_fd
__ libSystem.B.dylib: _acl_size
__ libSystem.B.dylib: _acl_to_text
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _clonefile
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _closedir
__ libSystem.B.dylib: _container_copy_code_signing_info_for_identifier
__ libSystem.B.dylib: _container_copy_info_value_for_key
__ libSystem.B.dylib: _container_copy_object
__ libSystem.B.dylib: _container_copy_path
__ libSystem.B.dylib: _container_copy_unlocalized_description
__ libSystem.B.dylib: _container_delete_all_container_content
__ libSystem.B.dylib: _container_disk_usage
__ libSystem.B.dylib: _container_error_copy_unlocalized_description
__ libSystem.B.dylib: _container_error_free
__ libSystem.B.dylib: _container_error_get_path
__ libSystem.B.dylib: _container_error_get_posix_errno
__ libSystem.B.dylib: _container_error_get_type
__ libSystem.B.dylib: _container_free_array_of_containers
__ libSystem.B.dylib: _container_free_object
__ libSystem.B.dylib: _container_get_class
__ libSystem.B.dylib: _container_get_error_description
__ libSystem.B.dylib: _container_get_identifier
__ libSystem.B.dylib: _container_get_path
__ libSystem.B.dylib: _container_get_persona_unique_string
__ libSystem.B.dylib: _container_get_uid
__ libSystem.B.dylib: _container_invalidate_code_signing_cache
__ libSystem.B.dylib: _container_is_new
__ libSystem.B.dylib: _container_is_transient
__ libSystem.B.dylib: _container_operation_delete_array
__ libSystem.B.dylib: _container_operation_delete_reclaim_disk_space
__ libSystem.B.dylib: _container_query_create
__ libSystem.B.dylib: _container_query_free
__ libSystem.B.dylib: _container_query_get_last_error
__ libSystem.B.dylib: _container_query_get_single_result
__ libSystem.B.dylib: _container_query_iterate_results_sync
__ libSystem.B.dylib: _container_query_operation_set_flags
__ libSystem.B.dylib: _container_query_set_class
__ libSystem.B.dylib: _container_query_set_group_identifiers
__ libSystem.B.dylib: _container_query_set_identifiers
__ libSystem.B.dylib: _container_query_set_include_other_owners
__ libSystem.B.dylib: _container_query_set_persona_unique_string
__ libSystem.B.dylib: _container_query_set_transient
__ libSystem.B.dylib: _container_recreate_structure
__ libSystem.B.dylib: _container_regenerate_uuid
__ libSystem.B.dylib: _container_replace
__ libSystem.B.dylib: _container_set_code_signing_info_for_identifier
__ libSystem.B.dylib: _container_set_data_protection_for_current_user
__ libSystem.B.dylib: _container_set_info_value
__ libSystem.B.dylib: _container_system_group_path_for_identifier
__ libSystem.B.dylib: _copyfile
__ libSystem.B.dylib: _copyfile_state_alloc
__ libSystem.B.dylib: _copyfile_state_free
__ libSystem.B.dylib: _copyfile_state_set
__ libSystem.B.dylib: _dirfd
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_once_f
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dyld_get_active_platform
__ libSystem.B.dylib: _dyld_get_image_versions
__ libSystem.B.dylib: _fchmod
__ libSystem.B.dylib: _fchown
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _ffsctl
__ libSystem.B.dylib: _fgetattrlist
__ libSystem.B.dylib: _fgetxattr
__ libSystem.B.dylib: _flistxattr
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fremovexattr
__ libSystem.B.dylib: _fsetattrlist
__ libSystem.B.dylib: _fsetxattr
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _fts_close
__ libSystem.B.dylib: _fts_open
__ libSystem.B.dylib: _fts_read
__ libSystem.B.dylib: _futimes
__ libSystem.B.dylib: _getattrlistbulk
__ libSystem.B.dylib: _geteuid
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getpwnam_r
__ libSystem.B.dylib: _getsectiondata
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _getxattr
__ libSystem.B.dylib: _lchmod
__ libSystem.B.dylib: _lchown
__ libSystem.B.dylib: _link
__ libSystem.B.dylib: _lseek
__ libSystem.B.dylib: _lstat
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _mkdtemp
__ libSystem.B.dylib: _mkpath_np
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _opendir
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_allows_internal_security_policies
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _pread
__ libSystem.B.dylib: _proc_disable_cpumon
__ libSystem.B.dylib: _proc_pidpath
__ libSystem.B.dylib: _proc_set_cpumon_defaults
__ libSystem.B.dylib: _pthread_cond_broadcast
__ libSystem.B.dylib: _pthread_cond_wait
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_setugid_np
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _readlink
__ libSystem.B.dylib: _realpath$DARWIN_EXTSN
__ libSystem.B.dylib: _removefile
__ libSystem.B.dylib: _removefile_state_alloc
__ libSystem.B.dylib: _removefile_state_free
__ libSystem.B.dylib: _removefile_state_get
__ libSystem.B.dylib: _removefile_state_set
__ libSystem.B.dylib: _removexattr
__ libSystem.B.dylib: _rename
__ libSystem.B.dylib: _renameatx_np
__ libSystem.B.dylib: _rmdir
__ libSystem.B.dylib: _setattrlist
__ libSystem.B.dylib: _setxattr
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _swap_fat_arch
__ libSystem.B.dylib: _swap_fat_header
__ libSystem.B.dylib: _swap_mach_header
__ libSystem.B.dylib: _swap_mach_header_64
__ libSystem.B.dylib: _symlink
__ libSystem.B.dylib: _syscall
__ libSystem.B.dylib: _sysconf
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _syslog
__ libSystem.B.dylib: _uname
__ libSystem.B.dylib: _unlink
__ libSystem.B.dylib: _uuid_generate
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libSystem.B.dylib: _write
__ libSystem.B.dylib: _xpc_connection_set_target_user_session_uid
__ libSystem.B.dylib: _xpc_strerror
__ libSystem.B.dylib: _xpc_string_create
__ libSystem.B.dylib: _xpc_user_sessions_enabled
__ libSystem.B.dylib: _xpc_user_sessions_get_foreground_uid
__ libmis.dylib: _MISCopyErrorStringForErrorCode
__ libmis.dylib: _MISEntitlementDictionaryAllowsEntitlementValue
__ libmis.dylib: _MISEnumerateMatchingProfilesUnauthoritative
__ libmis.dylib: _MISInstallProvisioningProfile
__ libmis.dylib: _MISProfileCreateWithData
__ libmis.dylib: _MISProfileCreateWithFile
__ libmis.dylib: _MISProvisioningProfileGetEntitlements
__ libmis.dylib: _MISProvisioningProfileIsForLocalProvisioning
__ libmis.dylib: _MISRemoveProvisioningProfile
__ libmis.dylib: _MISValidateSignatureAndCopyInfo
__ libmis.dylib: _MISValidationCopySignatureVersion
__ libmis.dylib: _kMISValidationInfoCDVersion
__ libmis.dylib: _kMISValidationInfoEntitlements
__ libmis.dylib: _kMISValidationInfoSignerCertificate
__ libmis.dylib: _kMISValidationInfoSignerType
__ libmis.dylib: _kMISValidationInfoSigningID
__ libmis.dylib: _kMISValidationInfoTeamID
__ libmis.dylib: _kMISValidationInfoValidatedByLocalProfile
__ libmis.dylib: _kMISValidationInfoValidatedByProfile
__ libmis.dylib: _kMISValidationInfoValidatedByUniversalProfile
__ libmis.dylib: _kMISValidationOptionAllowAdHocSigning
__ libmis.dylib: _kMISValidationOptionDetachedSignature
__ libmis.dylib: _kMISValidationOptionLogResourceErrors
__ libmis.dylib: _kMISValidationOptionOnlineAuthorization
__ libmis.dylib: _kMISValidationOptionSkipProfileIdentifierPolicy
__ libmis.dylib: _kMISValidationOptionTrustCacheOnly
__ libmis.dylib: _kMISValidationOptionUseSoftwareSigningCert
__ libmis.dylib: _kMISValidationOptionValidateSignatureOnly
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
ICLAppExtensionRecord : ICLBundleRecord <NSSecureCoding, NSCopying>
 @property  NSString *extensionOwnerBundleID

  // class methods
  +[ICLAppExtensionRecord supportsSecureCoding]

  // instance methods
  -[ICLAppExtensionRecord encodeWithCoder:]
  -[ICLAppExtensionRecord .cxx_destruct]
  -[ICLAppExtensionRecord copyWithZone:]
  -[ICLAppExtensionRecord isEqual:]
  -[ICLAppExtensionRecord initWithCoder:]
  -[ICLAppExtensionRecord legacyRecordDictionary]
  -[ICLAppExtensionRecord initWithLegacyRecordDictionary:]
  -[ICLAppExtensionRecord extensionOwnerBundleID]
  -[ICLAppExtensionRecord setExtensionOwnerBundleID:]


MISignatureAgnosticHasher : NSObject
 @property  NSURL *url
 @property  NSString *sectionName
 @property  int fd
 @property  unsigned int countOfSlicesWithNamedSection
 @property  BOOL hasNamedSection
 @property  NSDictionary *hashes

  // class methods
  +[MISignatureAgnosticHasher packedNumberForCPUType:subtype:]
  +[MISignatureAgnosticHasher unpackPackedCpuTypeAndSubType:cputype:subtype:]

  // instance methods
  -[MISignatureAgnosticHasher fd]
  -[MISignatureAgnosticHasher dealloc]
  -[MISignatureAgnosticHasher .cxx_destruct]
  -[MISignatureAgnosticHasher hashes]
  -[MISignatureAgnosticHasher url]
  -[MISignatureAgnosticHasher sectionName]
  -[MISignatureAgnosticHasher initWithExecutable:searchForSectionNamed:]
  -[MISignatureAgnosticHasher _hashSliceAtOffset:withSize:machHeaderAndCommands:dictionaryKey:error:]
  -[MISignatureAgnosticHasher performHashWithError:]
  -[MISignatureAgnosticHasher hasNamedSection]
  -[MISignatureAgnosticHasher setFd:]
  -[MISignatureAgnosticHasher countOfSlicesWithNamedSection]
  -[MISignatureAgnosticHasher setCountOfSlicesWithNamedSection:]


MIInstallationIdentity : NSObject <NSCopying>
 @property  NSData *installSessionID
 @property  NSData *uniqueInstallID

  // class methods
  +[MIInstallationIdentity newIdentityForBundle:]
  +[MIInstallationIdentity identityForUpdateOfBundle:error:]
  +[MIInstallationIdentity installationIdentityForBundle:settingIfNotSet:error:]
  +[MIInstallationIdentity installSessionIDEAName]
  +[MIInstallationIdentity uniqueInstallIDEAName]

  // instance methods
  -[MIInstallationIdentity .cxx_destruct]
  -[MIInstallationIdentity copyWithZone:]
  -[MIInstallationIdentity isEqual:]
  -[MIInstallationIdentity initWithSessionID:uniqueID:]
  -[MIInstallationIdentity _writeToBundle:fd:fdLocation:error:]
  -[MIInstallationIdentity _writeToBundle:error:]
  -[MIInstallationIdentity writeToBundle:error:]
  -[MIInstallationIdentity installSessionID]
  -[MIInstallationIdentity setInstallSessionID:]
  -[MIInstallationIdentity uniqueInstallID]
  -[MIInstallationIdentity setUniqueInstallID:]


MIPluginDataContainer : MIDataContainer
 @property  NSString *parentBundleID

  // class methods
  +[MIPluginDataContainer pluginDataContainerWithIdentifier:createIfNeeded:created:error:]

  // instance methods
  -[MIPluginDataContainer .cxx_destruct]
  -[MIPluginDataContainer parentBundleID]
  -[MIPluginDataContainer setParentBundleID:]


MIBundleMetadata : NSObject <NSSecureCoding, NSCopying>
 @property  NSDate *installDate
 @property  NSString *installBuildVersion
 @property  unsigned long installType
 @property  unsigned long placeholderFailureReason
 @property  NSError *placeholderFailureUnderlyingError
 @property  unsigned long placeholderFailureUnderlyingErrorSource
 @property  NSString *watchKitAppExecutableHash
 @property  unsigned long autoInstallOverride
 @property  NSString *alternateIconName
 @property  NSString *linkedParentBundleID
 @property  NSSet *linkedChildBundleIDs

  // class methods
  +[MIBundleMetadata supportsSecureCoding]
  +[MIBundleMetadata metadataFromURL:error:]

  // instance methods
  -[MIBundleMetadata installType]
  -[MIBundleMetadata encodeWithCoder:]
  -[MIBundleMetadata .cxx_destruct]
  -[MIBundleMetadata setInstallDate:]
  -[MIBundleMetadata serializeToURL:error:]
  -[MIBundleMetadata copyWithZone:]
  -[MIBundleMetadata installDate]
  -[MIBundleMetadata isEqual:]
  -[MIBundleMetadata initWithCoder:]
  -[MIBundleMetadata alternateIconName]
  -[MIBundleMetadata placeholderFailureReason]
  -[MIBundleMetadata linkedParentBundleID]
  -[MIBundleMetadata setInstallType:]
  -[MIBundleMetadata setInstallBuildVersion:]
  -[MIBundleMetadata setAlternateIconName:]
  -[MIBundleMetadata autoInstallOverride]
  -[MIBundleMetadata setAutoInstallOverride:]
  -[MIBundleMetadata setLinkedParentBundleID:]
  -[MIBundleMetadata installBuildVersion]
  -[MIBundleMetadata setPlaceholderFailureReason:]
  -[MIBundleMetadata placeholderFailureUnderlyingError]
  -[MIBundleMetadata setPlaceholderFailureUnderlyingError:]
  -[MIBundleMetadata placeholderFailureUnderlyingErrorSource]
  -[MIBundleMetadata setPlaceholderFailureUnderlyingErrorSource:]
  -[MIBundleMetadata watchKitAppExecutableHash]
  -[MIBundleMetadata setWatchKitAppExecutableHash:]
  -[MIBundleMetadata linkedChildBundleIDs]
  -[MIBundleMetadata setLinkedChildBundleIDs:]


ICLPlaceholderRecord : ICLBundleRecord <NSSecureCoding, NSCopying>
 @property  NSURL *bundleContainerURL
 @property  BOOL isOnDemandInstallCapable
 @property  NSArray *parentIdentifiers
 @property  NSString *appManagementDomain
 @property  BOOL isSwiftPlaygroundsApp
 @property  BOOL isDeletable
 @property  unsigned long placeholderFailureReason
 @property  NSString *alternateIconName
 @property  NSDate *installDate
 @property  NSNumber *lsInstallType
 @property  BOOL isWebNotificationBundle
 @property  ICLSinfInfo *sinfInfo
 @property  NSData *uniqueInstallID
 @property  NSData *installSessionID
 @property  NSString *linkedParentBundleID

  // class methods
  +[ICLPlaceholderRecord supportsSecureCoding]

  // instance methods
  -[ICLPlaceholderRecord encodeWithCoder:]
  -[ICLPlaceholderRecord .cxx_destruct]
  -[ICLPlaceholderRecord setInstallDate:]
  -[ICLPlaceholderRecord copyWithZone:]
  -[ICLPlaceholderRecord parentIdentifiers]
  -[ICLPlaceholderRecord installDate]
  -[ICLPlaceholderRecord isEqual:]
  -[ICLPlaceholderRecord setParentIdentifiers:]
  -[ICLPlaceholderRecord initWithCoder:]
  -[ICLPlaceholderRecord legacyRecordDictionary]
  -[ICLPlaceholderRecord alternateIconName]
  -[ICLPlaceholderRecord isDeletable]
  -[ICLPlaceholderRecord isSwiftPlaygroundsApp]
  -[ICLPlaceholderRecord bundleContainerURL]
  -[ICLPlaceholderRecord placeholderFailureReason]
  -[ICLPlaceholderRecord linkedParentBundleID]
  -[ICLPlaceholderRecord setIsDeletable:]
  -[ICLPlaceholderRecord lsInstallType]
  -[ICLPlaceholderRecord setLsInstallType:]
  -[ICLPlaceholderRecord setAlternateIconName:]
  -[ICLPlaceholderRecord setLinkedParentBundleID:]
  -[ICLPlaceholderRecord initWithLegacyRecordDictionary:]
  -[ICLPlaceholderRecord installSessionID]
  -[ICLPlaceholderRecord setInstallSessionID:]
  -[ICLPlaceholderRecord uniqueInstallID]
  -[ICLPlaceholderRecord setUniqueInstallID:]
  -[ICLPlaceholderRecord setPlaceholderFailureReason:]
  -[ICLPlaceholderRecord setBundleContainerURL:]
  -[ICLPlaceholderRecord isOnDemandInstallCapable]
  -[ICLPlaceholderRecord setIsOnDemandInstallCapable:]
  -[ICLPlaceholderRecord appManagementDomain]
  -[ICLPlaceholderRecord setAppManagementDomain:]
  -[ICLPlaceholderRecord setIsSwiftPlaygroundsApp:]
  -[ICLPlaceholderRecord isWebNotificationBundle]
  -[ICLPlaceholderRecord setIsWebNotificationBundle:]
  -[ICLPlaceholderRecord sinfInfo]
  -[ICLPlaceholderRecord setSinfInfo:]


MIContainerProtectionManager : NSObject
  // class methods
  +[MIContainerProtectionManager defaultManager]

  // instance methods
  -[MIContainerProtectionManager setDataProtectionOnDataContainer:forNewBundle:retryIfLocked:]


MIContainer : NSObject
 @property  unsigned long containerClass
 @property  unsigned long status
 @property  unsigned long diskUsage
 @property  NSString *identifier
 @property  NSString *debugDescriptionForContainer
 @property  ^{container_object_s=} container
 @property  NSURL *containerURL
 @property  BOOL isTransient
 @property  NSString *personaUniqueString

  // class methods
  +[MIContainer _deleteContainers:count:waitForDeletion:error:]
  +[MIContainer removeContainers:waitForDeletion:error:]
  +[MIContainer _containersForIdentifier:groupContainerIdentifier:ofContentClass:forPersona:error:]
  +[MIContainer _containerForIdentifier:ofContentClass:forPersona:transient:create:created:error:]
  +[MIContainer groupContainerURLsForBundleIdentifier:persona:error:]
  +[MIContainer tempContainerWithIdentifier:ofContentClass:error:]
  +[MIContainer containerWithIdentifier:ofContentClass:createIfNeeded:created:error:]
  +[MIContainer containersWithClass:error:]
  +[MIContainer containersWithClass:personaUniqueString:error:]
  +[MIContainer _bundleContainerForIdentifier:error:]
  +[MIContainer allContainersForIdentifier:options:error:]

  // instance methods
  -[MIContainer isTransient]
  -[MIContainer identifier]
  -[MIContainer containerURL]
  -[MIContainer setContainerClass:]
  -[MIContainer status]
  -[MIContainer initWithContainer:error:]
  -[MIContainer dealloc]
  -[MIContainer setStatus:]
  -[MIContainer .cxx_destruct]
  -[MIContainer container]
  -[MIContainer containerClass]
  -[MIContainer setIdentifier:]
  -[MIContainer personaUniqueString]
  -[MIContainer diskUsage]
  -[MIContainer initWithContainerURL:]
  -[MIContainer debugDescriptionForContainer]
  -[MIContainer _refreshContainerMetadataWithError:]
  -[MIContainer _setContainer:error:]
  -[MIContainer removeUnderlyingContainerWaitingForDeletion:error:]
  -[MIContainer _replaceExistingContainer:replacementReason:waitForDeletion:error:]
  -[MIContainer recreateDefaultStructureWithError:]
  -[MIContainer makeContainerLiveReplacingContainer:reason:waitForDeletion:withError:]
  -[MIContainer makeContainerLiveWithError:]
  -[MIContainer setInfoValue:forKey:error:]
  -[MIContainer infoValueForKey:error:]
  -[MIContainer regenerateDirectoryUUIDWithError:]
  -[MIContainer purgeContentWithError:]
  -[MIContainer captureStoreDataFromDirectory:doCopy:failureIsFatal:withError:]
  -[MIContainer setDiskUsage:]


MICodeSigningInfo : NSObject
 @property  NSString *signerIdentity
 @property  NSString *signerOrganization
 @property  NSString *codeInfoIdentifier
 @property  NSString *teamIdentifier
 @property  NSNumber *signatureVersion
 @property  NSDictionary *entitlements
 @property  unsigned long codeSignerType
 @property  unsigned long profileValidationType
 @property  unsigned long signingInfoSource
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[MICodeSigningInfo teamIdentifier]
  -[MICodeSigningInfo entitlements]
  -[MICodeSigningInfo .cxx_destruct]
  -[MICodeSigningInfo initWithDictionaryRepresentation:]
  -[MICodeSigningInfo dictionaryRepresentation]
  -[MICodeSigningInfo signerIdentity]
  -[MICodeSigningInfo signerOrganization]
  -[MICodeSigningInfo codeInfoIdentifier]
  -[MICodeSigningInfo signatureVersion]
  -[MICodeSigningInfo initWithSignerIdentity:signerOrganization:codeInfoIdentifier:teamIdentifier:signatureVersion:entitlements:signerType:profileType:signingInfoSource:]
  -[MICodeSigningInfo initWithDictionaryRepresentation:fromSource:]
  -[MICodeSigningInfo codeSignerType]
  -[MICodeSigningInfo profileValidationType]
  -[MICodeSigningInfo signingInfoSource]


MISystemAppState : NSObject
 @property  NSObject<OS_dispatch_queue> *appStateQueue
 @property  NSMutableDictionary *systemAppStateList

  // class methods
  +[MISystemAppState sharedList]
  +[MISystemAppState _systemAppStateFromURL:]

  // instance methods
  -[MISystemAppState removeIdentifiers:]
  -[MISystemAppState .cxx_destruct]
  -[MISystemAppState init]
  -[MISystemAppState _onQueue_systemAppStateList]
  -[MISystemAppState _onQueue_retrieveSystemAppStateRestoringBackedUpState:]
  -[MISystemAppState _onQueue_setSystemAppStateList:]
  -[MISystemAppState systemAppStateDictionaryRestoringBackedUpState:]
  -[MISystemAppState addIdentifier:withState:]
  -[MISystemAppState appStateQueue]
  -[MISystemAppState systemAppStateList]
  -[MISystemAppState setSystemAppStateList:]


MIStashMetadata : NSObject <NSSecureCoding, NSCopying>
 @property  NSDate *dateStashed
 @property  NSDate *dateOriginallyInstalled

  // class methods
  +[MIStashMetadata supportsSecureCoding]
  +[MIStashMetadata metadataFromURL:error:]

  // instance methods
  -[MIStashMetadata encodeWithCoder:]
  -[MIStashMetadata .cxx_destruct]
  -[MIStashMetadata serializeToURL:error:]
  -[MIStashMetadata copyWithZone:]
  -[MIStashMetadata isEqual:]
  -[MIStashMetadata initWithCoder:]
  -[MIStashMetadata dateStashed]
  -[MIStashMetadata dateOriginallyInstalled]
  -[MIStashMetadata setDateStashed:]
  -[MIStashMetadata setDateOriginallyInstalled:]


MIBundle : NSObject
 @property  NSArray *pluginKitBundles
 @property  NSArray *extensionKitBundles
 @property  NSArray *frameworkBundles
 @property  NSArray *xpcServiceBundles
 @property  NSArray *driverKitExtensionBundles
 @property  BOOL isPlaceholderStatusValid
 @property  NSDictionary *infoPlistSubset
 @property  NSString *identifier
 @property  NSString *parentBundleID
 @property  NSURL *bundleURL
 @property  NSString *bundleName
 @property  unsigned char bundleType
 @property  BOOL isStaticContent
 @property  NSString *bundleTypeDescription
 @property  NSURL *bundleParentDirectoryURL
 @property  NSString *bundleParentSubdirectory
 @property  NSString *minimumOSVersion
 @property  NSArray *deviceFamilies
 @property  NSArray *supportedDevices
 @property  BOOL needsDataContainer
 @property  BOOL isWatchApp
 @property  BOOL isPlaceholder
 @property  BOOL isLaunchProhibited
 @property  BOOL isRemovableSystemApp
 @property  BOOL allowsAppExtensionsNotInExtensionCache
 @property  NSSet *siriIntents
 @property  MIBundle *parentBundle
 @property  NSString *sdkBuildVersion
 @property  NSString *bundleVersion
 @property  NSString *bundleShortVersion

  // class methods
  +[MIBundle _URLOfFirstBundleInDirectory:withExtension:error:]
  +[MIBundle bundlesInParentBundle:subDirectory:matchingPredicate:error:]
  +[MIBundle bundleIsBlacklisted:]
  +[MIBundle bundleForURL:error:]

  // instance methods
  -[MIBundle bundleName]
  -[MIBundle bundleShortVersion]
  -[MIBundle identifier]
  -[MIBundle deviceFamilies]
  -[MIBundle bundleVersion]
  -[MIBundle initForTesting]
  -[MIBundle bundleURL]
  -[MIBundle isLaunchProhibited]
  -[MIBundle isPlaceholder]
  -[MIBundle .cxx_destruct]
  -[MIBundle parentBundleID]
  -[MIBundle bundleType]
  -[MIBundle minimumOSVersion]
  -[MIBundle supportedDevices]
  -[MIBundle _infoPlistKeysToLoad]
  -[MIBundle _validateWithError:]
  -[MIBundle infoPlistSubsetForTesting:]
  -[MIBundle initWithBundleParentURL:parentSubdirectory:bundleName:error:]
  -[MIBundle initWithParentBundle:parentSubdirectory:bundleName:error:]
  -[MIBundle initWithBundleURL:error:]
  -[MIBundle initWithBundleInDirectory:withExtension:error:]
  -[MIBundle infoPlistSubset]
  -[MIBundle isRemovableSystemApp]
  -[MIBundle isStaticContent]
  -[MIBundle bundleTypeDescription]
  -[MIBundle setIsPlaceholderWithError:]
  -[MIBundle allowsAppExtensionsNotInExtensionCache]
  -[MIBundle pluginKitBundlesPerformingPlatformValidation:withError:]
  -[MIBundle pluginKitBundlesWithError:]
  -[MIBundle validatePluginKitMetadataWithError:]
  -[MIBundle extensionKitBundlesPerformingPlatformValidation:withError:]
  -[MIBundle extensionKitBundlesWithError:]
  -[MIBundle _validateExtensions:withType:withError:]
  -[MIBundle validateExtensionKitMetadataWithError:]
  -[MIBundle appExtensionBundlesWithError:]
  -[MIBundle appExtensionBundlesPerformingPlatformValidation:withError:]
  -[MIBundle validateDriverKitExtensionMetadataWithError:]
  -[MIBundle validateBundleMetadataWithError:]
  -[MIBundle frameworkBundlesWithError:]
  -[MIBundle xpcServiceBundlesWithError:]
  -[MIBundle driverKitExtensionBundlesWithError:]
  -[MIBundle bundleParentDirectoryURL]
  -[MIBundle setBundleParentDirectoryURL:]
  -[MIBundle needsDataContainer]
  -[MIBundle isWatchApp]
  -[MIBundle isCompatibleWithDeviceFamily:]
  -[MIBundle isApplicableToCurrentDeviceFamilyWithError:]
  -[MIBundle currentOSVersionForValidationWithError:]
  -[MIBundle isApplicableToCurrentOSVersionWithError:]
  -[MIBundle isApplicableToOSVersion:error:]
  -[MIBundle isMinimumOSVersion:applicableToOSVersion:error:]
  -[MIBundle _isMinimumOSVersion:applicableToOSVersion:requiredOS:error:]
  -[MIBundle isApplicableToOSVersionEarlierThan:]
  -[MIBundle isApplicableToCurrentDeviceCapabilitiesWithError:]
  -[MIBundle thinningMatchesCurrentDeviceWithError:]
  -[MIBundle siriIntents]
  -[MIBundle validateAppMetadataWithError:]
  -[MIBundle sdkBuildVersion]
  -[MIBundle sdkBuildVersionIsAtLeast:]
  -[MIBundle bundleParentSubdirectory]
  -[MIBundle parentBundle]
  -[MIBundle pluginKitBundles]
  -[MIBundle setPluginKitBundles:]
  -[MIBundle extensionKitBundles]
  -[MIBundle setExtensionKitBundles:]
  -[MIBundle frameworkBundles]
  -[MIBundle setFrameworkBundles:]
  -[MIBundle xpcServiceBundles]
  -[MIBundle setXpcServiceBundles:]
  -[MIBundle driverKitExtensionBundles]
  -[MIBundle setDriverKitExtensionBundles:]
  -[MIBundle isPlaceholderStatusValid]
  -[MIBundle setIsPlaceholderStatusValid:]


MIFilesystemScanner : NSObject
 @property  unsigned long options
 @property  NSString *personaUniqueString
 @property  <MIFilesystemScannerDelegate> *delegate

  // instance methods
  -[MIFilesystemScanner setDelegate:]
  -[MIFilesystemScanner delegate]
  -[MIFilesystemScanner .cxx_destruct]
  -[MIFilesystemScanner options]
  -[MIFilesystemScanner personaUniqueString]
  -[MIFilesystemScanner init]
  -[MIFilesystemScanner _scanAppsDirectory:withError:]
  -[MIFilesystemScanner _scanFrameworkDirectory:withError:]
  -[MIFilesystemScanner _scanFrameworksLocationsWithError:]
  -[MIFilesystemScanner _scanBundleContainersWithClass:withError:ignoredErrorOccurredOnOneOrMoreItems:]
  -[MIFilesystemScanner initWithScanOptions:personaUniqueString:]
  -[MIFilesystemScanner initWithScanOptions:]
  -[MIFilesystemScanner performScanWithError:]


MIKeychainAccessGroupTracker : NSObject
 @property  NSCountedSet *refs
 @property  NSObject<OS_dispatch_queue> *q

  // class methods
  +[MIKeychainAccessGroupTracker sharedTracker]

  // instance methods
  -[MIKeychainAccessGroupTracker invalidateCache]
  -[MIKeychainAccessGroupTracker .cxx_destruct]
  -[MIKeychainAccessGroupTracker init]
  -[MIKeychainAccessGroupTracker q]
  -[MIKeychainAccessGroupTracker _onQueue_discoverReferences]
  -[MIKeychainAccessGroupTracker reconcile]
  -[MIKeychainAccessGroupTracker _onQueue_addReferencesForBundle:error:]
  -[MIKeychainAccessGroupTracker addReferencesForBundle:error:]
  -[MIKeychainAccessGroupTracker _onQueue_updateReferencesWithOldBundle:newBundle:error:]
  -[MIKeychainAccessGroupTracker updateReferencesWithOldBundle:newBundle:error:]
  -[MIKeychainAccessGroupTracker _onQueue_removeReferencesForBundle:error:]
  -[MIKeychainAccessGroupTracker removeReferencesForBundle:error:]
  -[MIKeychainAccessGroupTracker _removeGroupsWithError:error:]
  -[MIKeychainAccessGroupTracker _keychainAccessGroupsForBundle:error:]
  -[MIKeychainAccessGroupTracker _keychainAccessGroupsForApp:error:]
  -[MIKeychainAccessGroupTracker refs]
  -[MIKeychainAccessGroupTracker setRefs:]


MIDaemonConfiguration : MIGlobalConfiguration
 @property  unsigned int installQOSOverride
 @property  BOOL skipDeviceFamilyCheck
 @property  BOOL skipThinningCheck
 @property  BOOL allowPatchWithoutSinf
 @property  BOOL codeSigningEnforcementIsDisabled
 @property  BOOL localSigningIsUnrestricted
 @property  long long nSimultaneousInstallations
 @property  unsigned long estimatedAvailableMemoryForValidation
 @property  BOOL haveUpdatedAppExtensionDataContainersWithParentID

  // class methods
  +[MIDaemonConfiguration sharedInstance]

  // instance methods
  -[MIDaemonConfiguration initForTesting]
  -[MIDaemonConfiguration setHaveUpdatedAppExtensionDataContainersWithParentID:]
  -[MIDaemonConfiguration installQOSOverride]
  -[MIDaemonConfiguration haveUpdatedAppExtensionDataContainersWithParentID]
  -[MIDaemonConfiguration allowPatchWithoutSinf]
  -[MIDaemonConfiguration skipThinningCheck]
  -[MIDaemonConfiguration localSigningIsUnrestricted]
  -[MIDaemonConfiguration codeSigningEnforcementIsDisabled]
  -[MIDaemonConfiguration builtInApplicationBundleIDs]
  -[MIDaemonConfiguration nSimultaneousInstallations]
  -[MIDaemonConfiguration estimatedAvailableMemoryForValidation]
  -[MIDaemonConfiguration init]
  -[MIDaemonConfiguration skipDeviceFamilyCheck]


ICLSinfInfo : NSObject <NSSecureCoding, NSCopying>
 @property  NSNumber *applicationDSID
 @property  NSNumber *familyID
 @property  NSNumber *downloaderDSID
 @property  BOOL hasMIDBasedSINF
 @property  BOOL isMissingRequiredSINF
 @property  NSDictionary *legacySinfInfoDictionary

  // class methods
  +[ICLSinfInfo supportsSecureCoding]

  // instance methods
  -[ICLSinfInfo encodeWithCoder:]
  -[ICLSinfInfo familyID]
  -[ICLSinfInfo setDownloaderDSID:]
  -[ICLSinfInfo .cxx_destruct]
  -[ICLSinfInfo setFamilyID:]
  -[ICLSinfInfo copyWithZone:]
  -[ICLSinfInfo downloaderDSID]
  -[ICLSinfInfo isEqual:]
  -[ICLSinfInfo initWithCoder:]
  -[ICLSinfInfo applicationDSID]
  -[ICLSinfInfo hasMIDBasedSINF]
  -[ICLSinfInfo legacySinfInfoDictionary]
  -[ICLSinfInfo initWithLegacySinfInfoDictionary:]
  -[ICLSinfInfo setApplicationDSID:]
  -[ICLSinfInfo setHasMIDBasedSINF:]
  -[ICLSinfInfo isMissingRequiredSINF]
  -[ICLSinfInfo setIsMissingRequiredSINF:]


MIRelocatedBundleContainer : MIBundleContainer
  // instance methods
  -[MIRelocatedBundleContainer diskUsage]
  -[MIRelocatedBundleContainer makeContainerLiveReplacingContainer:reason:waitForDeletion:withError:]
  -[MIRelocatedBundleContainer makeContainerLiveWithError:]
  -[MIRelocatedBundleContainer regenerateDirectoryUUIDWithError:]
  -[MIRelocatedBundleContainer purgeContentWithError:]
  -[MIRelocatedBundleContainer shouldHaveCorrespondingDataContainer]


ICLFrameworkRecord : ICLBundleRecord
  // instance methods
  -[ICLFrameworkRecord legacyRecordDictionary]


MIInstalledInfoGatherer : NSObject
 @property  MIExecutableBundle *bundle
 @property  MIExecutableBundle *builtInAppParallelPlaceholderBundle
 @property  MIBundleContainer *bundleContainer
 @property  MIDataContainer *dataContainer
 @property  NSString *owningBundleIdentifier
 @property  NSURL *parentBundleURL

  // instance methods
  -[MIInstalledInfoGatherer bundle]
  -[MIInstalledInfoGatherer .cxx_destruct]
  -[MIInstalledInfoGatherer _staticDiskUsage]
  -[MIInstalledInfoGatherer _fixUpForBuiltInAppParallelPlaceholder]
  -[MIInstalledInfoGatherer initWithBundle:dataContainer:]
  -[MIInstalledInfoGatherer initWithBundleContainer:]
  -[MIInstalledInfoGatherer initWithBundleContainer:dataContainer:]
  -[MIInstalledInfoGatherer initWithAppExtensionBundle:inBundleIdentifier:dataContainer:]
  -[MIInstalledInfoGatherer _sandboxEnvironment]
  -[MIInstalledInfoGatherer _groupContainersDictionary]
  -[MIInstalledInfoGatherer _stashedAppRecordForStashedContainer:]
  -[MIInstalledInfoGatherer _populateBundleRecordValues:signingInfo:error:]
  -[MIInstalledInfoGatherer _populateAppRecordValues:]
  -[MIInstalledInfoGatherer _populateAppExtensionRecordValues:]
  -[MIInstalledInfoGatherer _populatePlaceholderRecordValues:signingInfo:]
  -[MIInstalledInfoGatherer bundleRecordWithError:]
  -[MIInstalledInfoGatherer _populateBundleRecord:error:]
  -[MIInstalledInfoGatherer builtInAppParallelPlaceholderBundle]
  -[MIInstalledInfoGatherer bundleContainer]
  -[MIInstalledInfoGatherer dataContainer]
  -[MIInstalledInfoGatherer owningBundleIdentifier]
  -[MIInstalledInfoGatherer parentBundleURL]


ICLUninstallRecord : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *bundleIdentifier
 @property  BOOL isPlaceholder
 @property  BOOL hasParallelPlaceholder
 @property  NSDictionary *legacyDictionary

  // class methods
  +[ICLUninstallRecord supportsSecureCoding]
  +[ICLUninstallRecord uninstallRecordArrayToDictionary:]

  // instance methods
  -[ICLUninstallRecord encodeWithCoder:]
  -[ICLUninstallRecord isPlaceholder]
  -[ICLUninstallRecord .cxx_destruct]
  -[ICLUninstallRecord setBundleIdentifier:]
  -[ICLUninstallRecord bundleIdentifier]
  -[ICLUninstallRecord copyWithZone:]
  -[ICLUninstallRecord isEqual:]
  -[ICLUninstallRecord init]
  -[ICLUninstallRecord setIsPlaceholder:]
  -[ICLUninstallRecord initWithCoder:]
  -[ICLUninstallRecord hasParallelPlaceholder]
  -[ICLUninstallRecord legacyDictionary]
  -[ICLUninstallRecord setHasParallelPlaceholder:]


MIPluginKitBundle : MIAppExtensionBundle
 @property  NSDictionary *overlaidInfoPlist
 @property  NSString *validationOverrideParentBundleID
 @property  NSString *nsExtensionPointIdentifier
 @property  NSString *exExtensionPointIdentifier
 @property  NSDictionary *extensionAttributes
 @property  BOOL isWatchKitExtension
 @property  BOOL isSiriIntentsExtension
 @property  BOOL isSiriIntentsUIExtension
 @property  BOOL isMessagePayloadProviderExtension
 @property  BOOL isFileProviderNonUIExtension
 @property  BOOL isMapsGeoServicesExtension
 @property  NSDictionary *extensionPointOverlay

  // class methods
  +[MIPluginKitBundle bundlesInParentBundle:subDirectory:matchingPredicate:error:]
  +[MIPluginKitBundle bundlesInParentBundle:overrideParentBundleIDForValidation:subDirectory:matchingPredicate:error:]

  // instance methods
  -[MIPluginKitBundle extensionPointIdentifier]
  -[MIPluginKitBundle extensionAttributes]
  -[MIPluginKitBundle .cxx_destruct]
  -[MIPluginKitBundle isWatchKitExtension]
  -[MIPluginKitBundle validateBundleMetadataWithError:]
  -[MIPluginKitBundle currentOSVersionForValidationWithError:]
  -[MIPluginKitBundle extensionPointOverlay]
  -[MIPluginKitBundle setExtensionPointOverlay:]
  -[MIPluginKitBundle nsExtensionPointIdentifier]
  -[MIPluginKitBundle exExtensionPointIdentifier]
  -[MIPluginKitBundle isSiriIntentsExtension]
  -[MIPluginKitBundle isSiriIntentsUIExtension]
  -[MIPluginKitBundle isMessagePayloadProviderExtension]
  -[MIPluginKitBundle isFileProviderNonUIExtension]
  -[MIPluginKitBundle isMapsGeoServicesExtension]
  -[MIPluginKitBundle _overlayDictionary:onDictionary:]
  -[MIPluginKitBundle overlaidInfoPlistWithError:]
  -[MIPluginKitBundle _validateXPCServiceWithOverlaidDictionary:error:]
  -[MIPluginKitBundle _validateNSExtensionWithOverlaidDictionary:error:]
  -[MIPluginKitBundle overlaidInfoPlist]
  -[MIPluginKitBundle setOverlaidInfoPlist:]
  -[MIPluginKitBundle validationOverrideParentBundleID]
  -[MIPluginKitBundle setValidationOverrideParentBundleID:]


ICLAppRecord : ICLPlaceholderRecord <NSSecureCoding, NSCopying>
 @property  NSURL *parallelPlaceholderURL
 @property  BOOL isUpdatedSystemApp
 @property  NSArray *driverKitExtensionURLs
 @property  NSArray *stashedVersions

  // class methods
  +[ICLAppRecord supportsSecureCoding]

  // instance methods
  -[ICLAppRecord encodeWithCoder:]
  -[ICLAppRecord .cxx_destruct]
  -[ICLAppRecord copyWithZone:]
  -[ICLAppRecord isEqual:]
  -[ICLAppRecord initWithCoder:]
  -[ICLAppRecord legacyRecordDictionary]
  -[ICLAppRecord initWithLegacyRecordDictionary:]
  -[ICLAppRecord parallelPlaceholderURL]
  -[ICLAppRecord setParallelPlaceholderURL:]
  -[ICLAppRecord isUpdatedSystemApp]
  -[ICLAppRecord setIsUpdatedSystemApp:]
  -[ICLAppRecord driverKitExtensionURLs]
  -[ICLAppRecord setDriverKitExtensionURLs:]
  -[ICLAppRecord stashedVersions]
  -[ICLAppRecord setStashedVersions:]


ICLStashedAppRecord : ICLAppRecord <NSSecureCoding, NSCopying>
 @property  NSDate *stashedAtTimestamp
 @property  NSDate *stashOriginalInstallTimestamp

  // class methods
  +[ICLStashedAppRecord supportsSecureCoding]

  // instance methods
  -[ICLStashedAppRecord encodeWithCoder:]
  -[ICLStashedAppRecord .cxx_destruct]
  -[ICLStashedAppRecord copyWithZone:]
  -[ICLStashedAppRecord isEqual:]
  -[ICLStashedAppRecord initWithCoder:]
  -[ICLStashedAppRecord legacyRecordDictionary]
  -[ICLStashedAppRecord initWithLegacyRecordDictionary:]
  -[ICLStashedAppRecord stashedAtTimestamp]
  -[ICLStashedAppRecord setStashedAtTimestamp:]
  -[ICLStashedAppRecord stashOriginalInstallTimestamp]
  -[ICLStashedAppRecord setStashOriginalInstallTimestamp:]


MIExtensionKitBundle : MIAppExtensionBundle
 @property  NSDictionary *extensionAttributes

  // class methods
  +[MIExtensionKitBundle bundlesInParentBundle:subDirectory:matchingPredicate:error:]

  // instance methods
  -[MIExtensionKitBundle extensionPointIdentifier]
  -[MIExtensionKitBundle extensionAttributes]
  -[MIExtensionKitBundle .cxx_destruct]
  -[MIExtensionKitBundle validateBundleMetadataWithError:]
  -[MIExtensionKitBundle _validatePresenceOfSwiftEntrySectionInFile:shouldHaveSwiftEntry:withError:]
  -[MIExtensionKitBundle _validateDelegateClassWithError:]


MIDataProtectionChangeOperation : NSObject
 @property  NSArray *urls
 @property  int newClass
 @property  unsigned long operationType
 @property  @? completionBlock

  // class methods
  +[MIDataProtectionChangeOperation dataProtectionChangeOperationForURLs:settingClass:changeType:]
  +[MIDataProtectionChangeOperation dataProtectionChangeOperationForURL:settingClass:changeType:]

  // instance methods
  -[MIDataProtectionChangeOperation operationType]
  -[MIDataProtectionChangeOperation setCompletionBlock:]
  -[MIDataProtectionChangeOperation completionBlock]
  -[MIDataProtectionChangeOperation .cxx_destruct]
  -[MIDataProtectionChangeOperation urls]
  -[MIDataProtectionChangeOperation initWithURLs:newClass:changeType:]
  -[MIDataProtectionChangeOperation _runChangeOperationWasLocked:withError:]
  -[MIDataProtectionChangeOperation performChangeOperation]
  -[MIDataProtectionChangeOperation newClass]


ICLBundleRecord : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *bundleIdentifier
 @property  NSString *bundleVersion
 @property  NSString *bundleShortVersion
 @property  NSURL *bundleURL
 @property  NSString *signerIdentity
 @property  NSNumber *signatureVersion
 @property  NSString *signerOrganization
 @property  NSString *teamIdentifier
 @property  BOOL codeSigningInfoNotAuthoritative
 @property  NSString *codeInfoIdentifier
 @property  unsigned long codeSignerType
 @property  unsigned long profileValidationType
 @property  BOOL isPlaceholder
 @property  BOOL isNoLongerCompatible
 @property  BOOL hasSettingsBundle
 @property  BOOL isContainerized
 @property  BOOL hasAppGroupContainers
 @property  BOOL hasSystemContainer
 @property  BOOL hasSystemGroupContainers
 @property  BOOL isOnMountedDiskImage
 @property  unsigned long compatibilityState
 @property  unsigned long applicationType
 @property  NSNumber *staticDiskUsage
 @property  NSArray *counterpartIdentifiers
 @property  NSDictionary *entitlements
 @property  NSURL *dataContainerURL
 @property  NSDictionary *environmentVariables
 @property  NSDictionary *groupContainers
 @property  NSDictionary *legacyRecordDictionary

  // class methods
  +[ICLBundleRecord supportsSecureCoding]
  +[ICLBundleRecord infoDictionaryArrayToBundleRecordArray:]
  +[ICLBundleRecord bundleRecordArrayToInfoDictionaryArray:]

  // instance methods
  -[ICLBundleRecord setEntitlements:]
  -[ICLBundleRecord bundleShortVersion]
  -[ICLBundleRecord dataContainerURL]
  -[ICLBundleRecord teamIdentifier]
  -[ICLBundleRecord bundleVersion]
  -[ICLBundleRecord bundleURL]
  -[ICLBundleRecord environmentVariables]
  -[ICLBundleRecord encodeWithCoder:]
  -[ICLBundleRecord entitlements]
  -[ICLBundleRecord setBundleVersion:]
  -[ICLBundleRecord isContainerized]
  -[ICLBundleRecord isPlaceholder]
  -[ICLBundleRecord .cxx_destruct]
  -[ICLBundleRecord setBundleIdentifier:]
  -[ICLBundleRecord setApplicationType:]
  -[ICLBundleRecord setBundleURL:]
  -[ICLBundleRecord setTeamIdentifier:]
  -[ICLBundleRecord applicationType]
  -[ICLBundleRecord bundleIdentifier]
  -[ICLBundleRecord signerIdentity]
  -[ICLBundleRecord copyWithZone:]
  -[ICLBundleRecord signerOrganization]
  -[ICLBundleRecord hasSystemContainer]
  -[ICLBundleRecord setDataContainerURL:]
  -[ICLBundleRecord isEqual:]
  -[ICLBundleRecord setCounterpartIdentifiers:]
  -[ICLBundleRecord setIsPlaceholder:]
  -[ICLBundleRecord setBundleShortVersion:]
  -[ICLBundleRecord initWithCoder:]
  -[ICLBundleRecord counterpartIdentifiers]
  -[ICLBundleRecord legacyRecordDictionary]
  -[ICLBundleRecord staticDiskUsage]
  -[ICLBundleRecord hasSettingsBundle]
  -[ICLBundleRecord compatibilityState]
  -[ICLBundleRecord codeInfoIdentifier]
  -[ICLBundleRecord groupContainers]
  -[ICLBundleRecord signatureVersion]
  -[ICLBundleRecord setStaticDiskUsage:]
  -[ICLBundleRecord initWithLegacyRecordDictionary:]
  -[ICLBundleRecord codeSignerType]
  -[ICLBundleRecord profileValidationType]
  -[ICLBundleRecord setSignerIdentity:]
  -[ICLBundleRecord setSignatureVersion:]
  -[ICLBundleRecord setSignerOrganization:]
  -[ICLBundleRecord codeSigningInfoNotAuthoritative]
  -[ICLBundleRecord setCodeSigningInfoNotAuthoritative:]
  -[ICLBundleRecord setCodeInfoIdentifier:]
  -[ICLBundleRecord setCodeSignerType:]
  -[ICLBundleRecord setProfileValidationType:]
  -[ICLBundleRecord isNoLongerCompatible]
  -[ICLBundleRecord setIsNoLongerCompatible:]
  -[ICLBundleRecord setHasSettingsBundle:]
  -[ICLBundleRecord setIsContainerized:]
  -[ICLBundleRecord hasAppGroupContainers]
  -[ICLBundleRecord setHasAppGroupContainers:]
  -[ICLBundleRecord setHasSystemContainer:]
  -[ICLBundleRecord hasSystemGroupContainers]
  -[ICLBundleRecord setHasSystemGroupContainers:]
  -[ICLBundleRecord isOnMountedDiskImage]
  -[ICLBundleRecord setIsOnMountedDiskImage:]
  -[ICLBundleRecord setCompatibilityState:]
  -[ICLBundleRecord setEnvironmentVariables:]
  -[ICLBundleRecord setGroupContainers:]


ICLWorkspace : NSObject
  // class methods
  +[ICLWorkspace defaultWorkspace]
  +[ICLWorkspace _connectionToInstallationDaemonWithError:]

  // instance methods
  -[ICLWorkspace init]
  -[ICLWorkspace triggerRegistrationForContainerizedContentWithOptions:completion:]
  -[ICLWorkspace enumerateCryptexContentWithBlock:error:]
  -[ICLWorkspace enumerateBuiltInSystemContentWithBlock:error:]
  -[ICLWorkspace bundleIDsForContainerizedContentWithError:]
  -[ICLWorkspace triggerRegistrationForContainerizedContentWithOptions:withError:]
  -[ICLWorkspace infoForLaunchServicesWithWrapperURL:forBundleIdentifier:withError:]
  -[ICLWorkspace bundleRecordsForLaunchServicesWithWrapperURL:forBundleIdentifier:withError:]


ICLSystemAppPlaceholderRecord : ICLPlaceholderRecord <NSSecureCoding, NSCopying>

MIGroupContainer : MIDataContainer
  // class methods
  +[MIGroupContainer groupContainerWithIdentifier:createIfNeeded:error:]


MIGlobalConfiguration : NSObject
 @property  NSURL *mobilePath
 @property  NSURL *rootPath
 @property  NSURL *installdPath
 @property  NSURL *installdLibraryPath
 @property  BOOL allowDeletableSystemApps
 @property  NSURL *stagingRoot
 @property  NSURL *logDirectory
 @property  NSURL *helperLogDirectory
 @property  NSURL *internalRootDirectory
 @property  NSURL *developerRootDirectory
 @property  NSURL *systemDeveloperRootDirectory
 @property  NSURL *coreServicesDirectory
 @property  NSURL *systemAppsDirectory
 @property  NSURL *systemAppPlaceholdersDirectory
 @property  NSURL *systemAppDetachedSignaturesDirectory
 @property  NSURL *internalAppsDirectory
 @property  NSSet *developerDirectories
 @property  NSURL *stagedSystemAppsDirectory
 @property  NSURL *cryptexAppsDirectory
 @property  NSURL *cryptexOSDirectory
 @property  NSURL *systemFrameworksRootDirectory
 @property  NSURL *internalFrameworksRootDirectory
 @property  NSSet *allFrameworksDirectories
 @property  NSSet *cryptexFrameworksDirectories
 @property  NSURL *dataDirectory
 @property  NSURL *cachesDirectory
 @property  NSURL *backedUpStateDirectory
 @property  NSSet *appBundleMetadataItemNames
 @property  NSSet *dataContainerRootItemNames
 @property  NSSet *installationBlacklist
 @property  NSSet *builtInApplicationBundleIDs
 @property  NSSet *builtInFrameworkBundleIDs
 @property  NSSet *systemAppPlaceholderBundleIDs
 @property  NSSet *systemAppPlaceholderAppExtensionBundleIDs
 @property  NSSet *systemAppPlaceholderXPCServiceBundleIDs
 @property  NSDictionary *systemAppBundleIDToInfoMap
 @property  NSDictionary *stagedSystemAppBundleIDToInfoMap
 @property  NSDictionary *systemAppPlaceholderBundleIDToInfoMap
 @property  NSDictionary *coreServicesAppBundleIDToInfoMap
 @property  NSDictionary *internalAppBundleIDToInfoMap
 @property  NSSet *standardInfoMapInfoPlistKeys
 @property  unsigned int uid
 @property  unsigned int gid
 @property  unsigned long installdJetsamLimit
 @property  unsigned long helperServiceJetsamLimit
 @property  NSURL *oldDataDirectoryPath
 @property  NSURL *oldLoggingPath
 @property  NSURL *oldArchiveDirectory
 @property  NSURL *roleUserMigrationMarkerFilePath
 @property  NSURL *systemAppInstallStateFilePath
 @property  NSURL *backupSystemAppInstallStateFilePath
 @property  NSString *alternateThinningModelIdentifier
 @property  NSURL *migrationPlistURL
 @property  NSURL *lastBuildInfoFileURL
 @property  BOOL allowsInternalSecurityPolicy
 @property  BOOL hasInternalContent

  // class methods
  +[MIGlobalConfiguration sharedInstance]

  // instance methods
  -[MIGlobalConfiguration uid]
  -[MIGlobalConfiguration oldDataDirectoryPath]
  -[MIGlobalConfiguration gid]
  -[MIGlobalConfiguration helperLogDirectory]
  -[MIGlobalConfiguration migrationPlistURL]
  -[MIGlobalConfiguration cryptexFrameworksDirectories]
  -[MIGlobalConfiguration backupSystemAppInstallStateFilePath]
  -[MIGlobalConfiguration systemAppDetachedSignaturesDirectory]
  -[MIGlobalConfiguration reScanInternalApps]
  -[MIGlobalConfiguration coreServicesAppBundleIDToInfoMap]
  -[MIGlobalConfiguration oldArchiveDirectory]
  -[MIGlobalConfiguration stagingRoot]
  -[MIGlobalConfiguration developerDirectories]
  -[MIGlobalConfiguration allowDeletableSystemApps]
  -[MIGlobalConfiguration reScanCoreServicesApps]
  -[MIGlobalConfiguration alternateThinningModelIdentifier]
  -[MIGlobalConfiguration cryptexOSDirectory]
  -[MIGlobalConfiguration _bundleIDMapForBundlesInDirectory:withExtension:]
  -[MIGlobalConfiguration installdLibraryPath]
  -[MIGlobalConfiguration dataContainerRootItemNames]
  -[MIGlobalConfiguration internalAppBundleIDToInfoMap]
  -[MIGlobalConfiguration _bundleIDMapForAppsInDirectory:loadingAdditionalKeys:]
  -[MIGlobalConfiguration dataDirectory]
  -[MIGlobalConfiguration reScanSystemApps]
  -[MIGlobalConfiguration .cxx_destruct]
  -[MIGlobalConfiguration systemAppPlaceholderBundleIDs]
  -[MIGlobalConfiguration oldLoggingPath]
  -[MIGlobalConfiguration standardInfoMapInfoPlistKeys]
  -[MIGlobalConfiguration disableSystemAppDeletionCanaryFile]
  -[MIGlobalConfiguration systemDeveloperRootDirectory]
  -[MIGlobalConfiguration installationBlacklist]
  -[MIGlobalConfiguration _bundleIDMapForAppsInDirectory:]
  -[MIGlobalConfiguration systemAppPlaceholderAppExtensionBundleIDs]
  -[MIGlobalConfiguration allFrameworksDirectories]
  -[MIGlobalConfiguration rootPath]
  -[MIGlobalConfiguration builtInFrameworkBundleIDs]
  -[MIGlobalConfiguration systemAppsDirectory]
  -[MIGlobalConfiguration installdPath]
  -[MIGlobalConfiguration lastBuildInfoFileURL]
  -[MIGlobalConfiguration stagedSystemAppsDirectory]
  -[MIGlobalConfiguration setSystemAppPlaceholderBundleIDToInfoMap:]
  -[MIGlobalConfiguration cryptexAppsDirectory]
  -[MIGlobalConfiguration backedUpStateDirectory]
  -[MIGlobalConfiguration internalFrameworksRootDirectory]
  -[MIGlobalConfiguration _bundleIDMapForBundlesInDirectory:withExtension:loadingAdditionalKeys:]
  -[MIGlobalConfiguration coreServicesDirectory]
  -[MIGlobalConfiguration allowsInternalSecurityPolicy]
  -[MIGlobalConfiguration builtInApplicationBundleIDs]
  -[MIGlobalConfiguration internalRootDirectory]
  -[MIGlobalConfiguration systemAppPlaceholdersDirectory]
  -[MIGlobalConfiguration stagedSystemAppBundleIDToInfoMap]
  -[MIGlobalConfiguration hasInternalContent]
  -[MIGlobalConfiguration systemAppInstallStateFilePath]
  -[MIGlobalConfiguration installdJetsamLimit]
  -[MIGlobalConfiguration helperServiceJetsamLimit]
  -[MIGlobalConfiguration systemAppPlaceholderXPCServiceBundleIDs]
  -[MIGlobalConfiguration appBundleMetadataItemNames]
  -[MIGlobalConfiguration mobilePath]
  -[MIGlobalConfiguration logDirectory]
  -[MIGlobalConfiguration init]
  -[MIGlobalConfiguration internalAppsDirectory]
  -[MIGlobalConfiguration roleUserMigrationMarkerFilePath]
  -[MIGlobalConfiguration cachesDirectory]
  -[MIGlobalConfiguration systemAppPlaceholderBundleIDToInfoMap]
  -[MIGlobalConfiguration systemAppBundleIDToInfoMap]
  -[MIGlobalConfiguration systemFrameworksRootDirectory]
  -[MIGlobalConfiguration developerRootDirectory]


MITestManager : NSObject
 @property  unsigned long testFlags
 @property  NSObject<OS_dispatch_queue> *testModeQueue
 @property  NSMutableDictionary *sourceForPID

  // class methods
  +[MITestManager sharedInstance]

  // instance methods
  -[MITestManager .cxx_destruct]
  -[MITestManager init]
  -[MITestManager _testModeSentinelURL]
  -[MITestManager isRunningInTestMode:outError:]
  -[MITestManager _onQueue_setIsRunningInTestModeForProcessWithPID:withError:]
  -[MITestManager setIsRunningInTestModeForProcessWithPID:withError:]
  -[MITestManager _onQueue_clearIsRunningInTestModeForProcessWithPID:withError:]
  -[MITestManager clearIsRunningInTestModeForProcessWithPID:withError:]
  -[MITestManager _onQueue_setTestFlags:]
  -[MITestManager setTestFlags:]
  -[MITestManager _onQueue_clearTestFlags:]
  -[MITestManager clearTestFlags:]
  -[MITestManager testFlagsAreSet:]
  -[MITestManager testFlags]
  -[MITestManager testModeQueue]
  -[MITestManager setTestModeQueue:]
  -[MITestManager sourceForPID]
  -[MITestManager setSourceForPID:]


MICapabilitiesManager : NSObject
  // class methods
  +[MICapabilitiesManager defaultManager]

  // instance methods
  -[MICapabilitiesManager checkCapabilities:withOptions:error:]


MIExecutableBundle : MIBundle
 @property  NSError *wk2AppBundleError
 @property  MIEmbeddedWatchBundle *wk2AppBundle
 @property  MICodeSigningInfo *codeSigningInfo
 @property  NSError *codeSigningInfoError
 @property  NSString *watchKitAppExecutableHash
 @property  MIPluginKitBundle *watchKitPlugin
 @property  MIInstallationIdentity *installationIdentity
 @property  unsigned long lsInstallType
 @property  MIBundleContainer *bundleContainer
 @property  NSString *executableName
 @property  NSURL *executableURL
 @property  ^{__CFBundle=} cfBundle
 @property  NSURL *rootSinfURL
 @property  NSURL *rootSuppURL
 @property  NSURL *rootSupfURL
 @property  BOOL needsSinf
 @property  BOOL hasSinf
 @property  unsigned long dataContainerContentClass
 @property  unsigned int maxLinkedSDKVersion
 @property  NSArray *counterpartIdentifiers
 @property  unsigned long estimatedMemoryUsageToValidate
 @property  unsigned long compatibilityState
 @property  BOOL hasWatchGlance
 @property  BOOL hasWatchCustomNotification
 @property  BOOL isExtensionBasedWatchKitApp
 @property  BOOL isExtensionlessWatchKitApp
 @property  NSString *companionAppIdentifier
 @property  BOOL minimumWatchOSVersionIsPreV6
 @property  BOOL isWatchOnlyApp
 @property  BOOL watchKitAppRunsIndependentlyOfCompanion
 @property  unsigned long codeSignatureVerificationState
 @property  Class dataContainerClass

  // class methods
  +[MIExecutableBundle bundlesInParentBundle:subDirectory:matchingPredicate:error:]
  +[MIExecutableBundle isGrandfatheredNonContainerizedForSigningInfo:]

  // instance methods
  -[MIExecutableBundle executableURL]
  -[MIExecutableBundle dataContainerClass]
  -[MIExecutableBundle initForTesting]
  -[MIExecutableBundle dealloc]
  -[MIExecutableBundle .cxx_destruct]
  -[MIExecutableBundle executableName]
  -[MIExecutableBundle codeSigningInfo]
  -[MIExecutableBundle cfBundle]
  -[MIExecutableBundle setCodeSigningInfo:]
  -[MIExecutableBundle counterpartIdentifiers]
  -[MIExecutableBundle compatibilityState]
  -[MIExecutableBundle lsInstallType]
  -[MIExecutableBundle setLsInstallType:]
  -[MIExecutableBundle watchKitAppExecutableHash]
  -[MIExecutableBundle setWatchKitAppExecutableHash:]
  -[MIExecutableBundle _validateWithError:]
  -[MIExecutableBundle allowsAppExtensionsNotInExtensionCache]
  -[MIExecutableBundle validatePluginKitMetadataWithError:]
  -[MIExecutableBundle setBundleParentDirectoryURL:]
  -[MIExecutableBundle needsDataContainer]
  -[MIExecutableBundle bundleContainer]
  -[MIExecutableBundle initWithBundleInContainer:withExtension:error:]
  -[MIExecutableBundle lsInstallTypeWithError:]
  -[MIExecutableBundle watchKitAppExecutableHashWithError:]
  -[MIExecutableBundle installationIdentitySettingIfNotSet:withError:]
  -[MIExecutableBundle transferInstallationIdentityFromBundle:error:]
  -[MIExecutableBundle makeAndSetNewInstallationIdentityWithError:]
  -[MIExecutableBundle maxLinkedSDKVersion]
  -[MIExecutableBundle estimatedMemoryUsageToValidate]
  -[MIExecutableBundle _hasNonContainerizingEntitlement:checkSeatbeltProfiles:]
  -[MIExecutableBundle updateMCMWithCodeSigningInfoAsAdvanceCopy:withError:]
  -[MIExecutableBundle _codeSigningInfoFromMCM]
  -[MIExecutableBundle codeSigningInfoByValidatingResources:performingOnlineAuthorization:ignoringCachedSigningInfo:checkingTrustCacheIfApplicable:skippingProfileIDValidation:error:]
  -[MIExecutableBundle _installEmbeddedProvisioningProfileAtURL:withProgress:]
  -[MIExecutableBundle installEmbeddedProvisioningProfileWithProgress:]
  -[MIExecutableBundle installMacStyleEmbeddedProvisioningProfileWithProgress:]
  -[MIExecutableBundle _hasNoConflictWithSystemAppsForSigningInfo:error:]
  -[MIExecutableBundle hasNoConflictsWithOtherInstalledEntitiesForSigningInfo:error:]
  -[MIExecutableBundle dataContainerContentClass]
  -[MIExecutableBundle dataContainerWithError:]
  -[MIExecutableBundle dataContainerCreatingIfNeeded:makeLive:created:error:]
  -[MIExecutableBundle _dataContainerCreatingIfNeeded:makeLive:checkIfNeeded:created:error:]
  -[MIExecutableBundle makeExecutableWithError:]
  -[MIExecutableBundle bundleSignatureVersionWithError:]
  -[MIExecutableBundle rootSinfURL]
  -[MIExecutableBundle rootSuppURL]
  -[MIExecutableBundle rootSupfURL]
  -[MIExecutableBundle updateSinfWithData:error:]
  -[MIExecutableBundle bestEffortRollbackSinfData:]
  -[MIExecutableBundle updateAndValidateSinf:error:]
  -[MIExecutableBundle updateAndValidateSinf:withRollback:error:]
  -[MIExecutableBundle replicateRootSinfWithError:]
  -[MIExecutableBundle removeSinf]
  -[MIExecutableBundle needsSinf]
  -[MIExecutableBundle hasSinf]
  -[MIExecutableBundle fairPlaySinfInfoWithError:]
  -[MIExecutableBundle validateSinfWithError:]
  -[MIExecutableBundle _hasResource:withExtension:]
  -[MIExecutableBundle hasWatchCustomNotification]
  -[MIExecutableBundle hasWatchGlance]
  -[MIExecutableBundle isExtensionBasedWatchKitApp]
  -[MIExecutableBundle isExtensionlessWatchKitApp]
  -[MIExecutableBundle companionAppIdentifier]
  -[MIExecutableBundle minimumWatchOSVersionIsPreV6]
  -[MIExecutableBundle watchKitAppRunsIndependentlyOfCompanion]
  -[MIExecutableBundle isWatchOnlyApp]
  -[MIExecutableBundle watchKitPluginWithError:]
  -[MIExecutableBundle watchKitVersionWithError:]
  -[MIExecutableBundle watchKitAppBundleForWKVersionOrEarlier:error:]
  -[MIExecutableBundle _discoverWatchAppBundleAsPlaceholder:error:]
  -[MIExecutableBundle watchKitV2AppBundleWithError:]
  -[MIExecutableBundle hasOnlyAllowedWatchKitAppInfoPlistKeysForWatchKitVersion:error:]
  -[MIExecutableBundle setBundleContainer:]
  -[MIExecutableBundle codeSignatureVerificationState]
  -[MIExecutableBundle wk2AppBundleError]
  -[MIExecutableBundle setWk2AppBundleError:]
  -[MIExecutableBundle wk2AppBundle]
  -[MIExecutableBundle setWk2AppBundle:]
  -[MIExecutableBundle codeSigningInfoError]
  -[MIExecutableBundle setCodeSigningInfoError:]
  -[MIExecutableBundle watchKitPlugin]
  -[MIExecutableBundle setWatchKitPlugin:]
  -[MIExecutableBundle installationIdentity]
  -[MIExecutableBundle setInstallationIdentity:]


MIDriverKitBundle : MIExecutableBundle
  // class methods
  +[MIDriverKitBundle bundlesInParentBundle:subDirectory:matchingPredicate:error:]

  // instance methods
  -[MIDriverKitBundle minimumOSVersion]
  -[MIDriverKitBundle initWithBundleParentURL:parentSubdirectory:bundleName:error:]
  -[MIDriverKitBundle validateBundleMetadataWithError:]
  -[MIDriverKitBundle currentOSVersionForValidationWithError:]


MIAppExtensionBundle : MIExecutableBundle
 @property  NSString *validationOverrideParentBundleID
 @property  NSString *extensionPointIdentifier

  // instance methods
  -[MIAppExtensionBundle extensionPointIdentifier]
  -[MIAppExtensionBundle dataContainerClass]
  -[MIAppExtensionBundle initForTesting]
  -[MIAppExtensionBundle .cxx_destruct]
  -[MIAppExtensionBundle minimumOSVersion]
  -[MIAppExtensionBundle initWithBundleParentURL:parentSubdirectory:bundleName:error:]
  -[MIAppExtensionBundle validateBundleMetadataWithError:]
  -[MIAppExtensionBundle setBundleParentDirectoryURL:]
  -[MIAppExtensionBundle validationOverrideParentBundleID]
  -[MIAppExtensionBundle setValidationOverrideParentBundleID:]
  -[MIAppExtensionBundle dataContainerWithError:]
  -[MIAppExtensionBundle dataContainerCreatingIfNeeded:makeLive:created:error:]
  -[MIAppExtensionBundle hasDotInBundleIDSuffixWithError:]
  -[MIAppExtensionBundle extensionCacheEntryWithError:]


MIEmbeddedWatchBundle : MIExecutableBundle
 @property  BOOL isPlaceholder
 @property  BOOL isApplicableToKnownWatchOSVersion

  // instance methods
  -[MIEmbeddedWatchBundle isPlaceholder]
  -[MIEmbeddedWatchBundle bundleType]
  -[MIEmbeddedWatchBundle allowsAppExtensionsNotInExtensionCache]
  -[MIEmbeddedWatchBundle pluginKitBundlesPerformingPlatformValidation:withError:]
  -[MIEmbeddedWatchBundle pluginKitBundlesWithError:]
  -[MIEmbeddedWatchBundle extensionKitBundlesPerformingPlatformValidation:withError:]
  -[MIEmbeddedWatchBundle extensionKitBundlesWithError:]
  -[MIEmbeddedWatchBundle currentOSVersionForValidationWithError:]
  -[MIEmbeddedWatchBundle isApplicableToKnownWatchOSVersion]
  -[MIEmbeddedWatchBundle initWithParentBundle:parentSubdirectory:bundleName:isPlaceholder:error:]


MIStashedBundleContainer : MIRelocatedBundleContainer
 @property  NSURL *stashMetadataURL
 @property  MIStashMetadata *stashMetadata

  // instance methods
  -[MIStashedBundleContainer .cxx_destruct]
  -[MIStashedBundleContainer initForAppContainerWithURL:]
  -[MIStashedBundleContainer stashMetadataURL]
  -[MIStashedBundleContainer newStashMetadata]
  -[MIStashedBundleContainer stashMetadataWithError:]
  -[MIStashedBundleContainer saveStashMetadata:withError:]
  -[MIStashedBundleContainer stashMetadata]
  -[MIStashedBundleContainer setStashMetadata:]


ICLRegistrationOptions : NSObject <NSSecureCoding, NSCopying>
 @property  unsigned int targetUID

  // class methods
  +[ICLRegistrationOptions supportsSecureCoding]

  // instance methods
  -[ICLRegistrationOptions encodeWithCoder:]
  -[ICLRegistrationOptions copyWithZone:]
  -[ICLRegistrationOptions isEqual:]
  -[ICLRegistrationOptions initWithCoder:]
  -[ICLRegistrationOptions initWithTargetUID:]
  -[ICLRegistrationOptions targetUID]
  -[ICLRegistrationOptions setTargetUID:]


ICLFeatureFlags : NSObject
  // class methods
  +[ICLFeatureFlags isRestackingEnabled]
  +[ICLFeatureFlags appReferencesEnabled]


MIBundleContainer : MIContainer
 @property  MIBundleMetadata *bundleMetadata
 @property  NSURL *stashBaseURL
 @property  MIExecutableBundle *bundle
 @property  unsigned int bundleMaxLinkedSDKVersion
 @property  NSURL *bundleMetadataURL
 @property  NSURL *iTunesMetadataURL
 @property  NSURL *referenceStorageURL
 @property  NSURL *compatibilityLinkDestination
 @property  BOOL shouldHaveCorrespondingDataContainer
 @property  BOOL hasParallelPlaceholder
 @property  NSURL *parallelPlaceholderURL

  // class methods
  +[MIBundleContainer appBundleContainerForIdentifier:temporary:inDomain:withError:]
  +[MIBundleContainer appBundleContainerWithIdentifier:createIfNeeded:created:error:]
  +[MIBundleContainer privateAppBundleContainerWithIdentifier:createIfNeeded:created:error:]
  +[MIBundleContainer pluginKitPluginBundleContainerWithIdentifier:createIfNeeded:created:error:]
  +[MIBundleContainer tempAppBundleContainerWithIdentifier:error:]
  +[MIBundleContainer privateTempAppBundleContainerWithIdentifier:error:]
  +[MIBundleContainer tempAppBundleContainerWithIdentifier:inDomain:withError:]
  +[MIBundleContainer tempPluginKitPluginBundleContainerWithIdentifier:error:]
  +[MIBundleContainer appBundleContainerForIdentifier:inDomain:withError:]
  +[MIBundleContainer allAppBundleContainersWithError:]
  +[MIBundleContainer updateSinfDataForAppWithIdentifier:sinfData:error:]
  +[MIBundleContainer updateiTunesMetadataForAppWithIdentifier:plistData:error:]

  // instance methods
  -[MIBundleContainer bundle]
  -[MIBundleContainer initWithContainer:error:]
  -[MIBundleContainer .cxx_destruct]
  -[MIBundleContainer hasParallelPlaceholder]
  -[MIBundleContainer makeContainerLiveReplacingContainer:reason:waitForDeletion:withError:]
  -[MIBundleContainer shouldHaveCorrespondingDataContainer]
  -[MIBundleContainer parallelPlaceholderURL]
  -[MIBundleContainer initForAppContainerWithURL:]
  -[MIBundleContainer writeiTunesMetadata:error:]
  -[MIBundleContainer bestEffortRollbackiTunesMetadata:error:]
  -[MIBundleContainer iTunesMetadataURL]
  -[MIBundleContainer bundleMetadataURL]
  -[MIBundleContainer bundleMetadataWithError:]
  -[MIBundleContainer saveBundleMetadata:withError:]
  -[MIBundleContainer captureBundleByMoving:withError:]
  -[MIBundleContainer bundleMaxLinkedSDKVersion]
  -[MIBundleContainer stashBaseURL]
  -[MIBundleContainer _stashURLForIndex:]
  -[MIBundleContainer _stashedBundleContainerForIndex:error:]
  -[MIBundleContainer stashedBundleContainerWithError:]
  -[MIBundleContainer cloneContentFromStashedBundleContainer:error:]
  -[MIBundleContainer transferExistingStashesFromContainer:error:]
  -[MIBundleContainer stashBundleContainerContents:error:]
  -[MIBundleContainer compatibilityLinkDestination]
  -[MIBundleContainer referenceStorageURL]
  -[MIBundleContainer bundleMetadata]
  -[MIBundleContainer setBundleMetadata:]


MIFileManager : NSObject
  // class methods
  +[MIFileManager defaultManager]
  +[MIFileManager _sanitizeFilePathForVarOrTmpSymlink:]

  // instance methods
  -[MIFileManager _validateSymlink:withStartingDepth:andEndingDepth:]
  -[MIFileManager setDataProtectionClassOfItemAtURL:toClass:ifPredicate:error:]
  -[MIFileManager moveItemIfExistsAtURL:toURL:error:]
  -[MIFileManager diskUsageForURL:]
  -[MIFileManager moveItemAtURL:toURL:error:]
  -[MIFileManager itemExistsAtURL:]
  -[MIFileManager dataProtectionClassOfItemAtURL:class:error:]
  -[MIFileManager copyItemIfExistsAtURL:toURL:error:]
  -[MIFileManager _moveItemAtURL:toURL:failIfSrcMissing:error:]
  -[MIFileManager createDirectoryAtURL:withIntermediateDirectories:mode:class:error:]
  -[MIFileManager removeItemAtURL:error:]
  -[MIFileManager itemDoesNotExistAtURL:]
  -[MIFileManager copyItemAtURL:toURL:error:]
  -[MIFileManager createTemporaryDirectoryInDirectoryURL:error:]
  -[MIFileManager _realPathForURL:allowNonExistentPathComponents:]
  -[MIFileManager createDirectoryAtURL:withIntermediateDirectories:mode:error:]
  -[MIFileManager realPathForURL:ifChildOfURL:]
  -[MIFileManager createSymbolicLinkAtURL:withDestinationURL:error:]
  -[MIFileManager removeItemAtURL:keepParent:error:]
  -[MIFileManager _removeACLAtPath:isDir:error:]
  -[MIFileManager urlsForItemsInDirectoryAtURL:ignoringSymlinks:error:]
  -[MIFileManager destinationOfSymbolicLinkAtURL:error:]
  -[MIFileManager itemExistsAtURL:error:]
  -[MIFileManager markBundleAsPlaceholder:withError:]
  -[MIFileManager dataForExtendedAttributeNamed:length:fromURL:error:]
  -[MIFileManager enumerateURLsForItemsInDirectoryAtURL:ignoreSymlinks:withBlock:]
  -[MIFileManager itemDoesNotExistOrIsNotDirectoryAtURL:]
  -[MIFileManager setData:forExtendedAttributeNamed:onURL:error:]
  -[MIFileManager bundleAtURLIsPlaceholder:]
  -[MIFileManager _copyItemAtURL:toURL:failIfSrcMissing:alwaysClone:ignoreErrors:error:]
  -[MIFileManager copyItemAtURL:toURL:alwaysClone:error:]
  -[MIFileManager copyItemIgnoringErrorsAtURL:toURL:error:]
  -[MIFileManager bulkSetPropertiesForPath:withOpenFD:UID:GID:mode:flags:dataProtectionClass:removeACL:error:]
  -[MIFileManager bulkSetPropertiesForPath:UID:GID:mode:flags:dataProtectionClass:removeACL:error:]
  -[MIFileManager _bulkSetPropertiesForPath:existingFD:UID:GID:mode:flags:dataProtectionClass:removeACL:error:]
  -[MIFileManager stageURLByMoving:toItemName:inStagingDir:settingUID:gid:dataProtectionClass:hasSymlink:error:]
  -[MIFileManager _stageURLByCopying:toItemName:inStagingDir:stagingMode:settingUID:gid:hasSymlink:error:]
  -[MIFileManager stageURL:toItemName:inStagingDir:stagingMode:settingUID:gid:hasSymlink:error:]
  -[MIFileManager standardizeOwnershipAtURL:toUID:GID:removeACLs:setProtectionClass:foundSymlink:error:]
  -[MIFileManager validateSymlinksInURLDoNotEscapeURL:error:]
  -[MIFileManager traverseDirectoryAtURL:withBlock:]
  -[MIFileManager _itemIsType:withDescription:atURL:error:]
  -[MIFileManager itemIsFileAtURL:error:]
  -[MIFileManager itemIsSymlinkAtURL:error:]
  -[MIFileManager itemIsDirectoryAtURL:error:]
  -[MIFileManager upToFirstFourBytesFromURL:error:]
  -[MIFileManager aclTextFromURL:error:]
  -[MIFileManager extendedAttributesFromURL:error:]
  -[MIFileManager setOwnerOfURL:toUID:gid:error:]
  -[MIFileManager setPermissionsForURL:toMode:error:]
  -[MIFileManager captureStoreDataFromDirectory:toDirectory:doCopy:failureIsFatal:withError:]
  -[MIFileManager _realPathWhatExistsInPath:isDirectory:]
  -[MIFileManager realPathForURL:allowNonExistentPathComponents:isDirectory:error:]
  -[MIFileManager clearPlaceholderStatusForBundle:withError:]
  -[MIFileManager _markEAFlag:forAppIdentifier:insecurelyCachedOnBundle:error:]
  -[MIFileManager _insecureCachedAppIdentifierIfMarkedWithEAFlag:bundleURL:allowPlaceholders:error:]
  -[MIFileManager setAppClipAppIdentifier:insecurelyCachedOnBundle:error:]
  -[MIFileManager insecureCachedAppIdentifierIfAppClipForBundle:error:]
  -[MIFileManager setValidatedByFreeProfileAppIdentifier:insecurelyCachedOnBundle:error:]
  -[MIFileManager insecureCachedAppIdentifierIfValidatedByFreeProfileForBundle:error:]
  -[MIFileManager setInstallType:inExtendedAttributeOnBundle:error:]
  -[MIFileManager installTypeFromExtendedAttributeOnBundle:error:]
  -[MIFileManager _setData:forExtendedAttributeNamed:onURL:orFD:error:]
  -[MIFileManager setData:forExtendedAttributeNamed:onFD:fdLocation:error:]
  -[MIFileManager _dataForExtendedAttributeNamed:length:onURL:orFD:error:]
  -[MIFileManager dataForExtendedAttributeNamed:length:fromFD:fdLocation:error:]
  -[MIFileManager setModificationDateToNowForURL:error:]
  -[MIFileManager modificationDateForURL:error:]
  -[MIFileManager debugDescriptionForItemAtURL:]
  -[MIFileManager secureRenameFromSourceURL:toDestinationURL:destinationStatus:error:]


MICodeSigningVerifier : NSObject
 @property  MIExecutableBundle *bundle
 @property  BOOL allowAdhocSigning
 @property  BOOL logResourceVerificationErrors
 @property  BOOL validateResources
 @property  BOOL performOnlineAuthorization
 @property  BOOL validateUsingDetachedSignature
 @property  BOOL verifyTrustCachePresence
 @property  BOOL skipProfileIDValidation
 @property  MICodeSigningInfo *signingInfo

  // class methods
  +[MICodeSigningVerifier codeSigningVerifierForBundle:]
  +[MICodeSigningVerifier _validateSignatureAndCopyInfoForURL:withOptions:error:]
  +[MICodeSigningVerifier validateWatchKitV1StubExecutableBundle:error:]
  +[MICodeSigningVerifier validateWatchKitV2StubExecutableBundle:error:]
  +[MICodeSigningVerifier _validateBundleExecutable:againstStubAt:trustedHashes:sectionName:signingIdentifier:error:]
  +[MICodeSigningVerifier _validateStubSignature:withSigningID:error:]

  // instance methods
  -[MICodeSigningVerifier bundle]
  -[MICodeSigningVerifier initWithBundle:]
  -[MICodeSigningVerifier .cxx_destruct]
  -[MICodeSigningVerifier _loadSystemDetachedSignatureForBundleID:error:]
  -[MICodeSigningVerifier _getMICodeSignerTypeFromMISInfoDict:codeSignerType:profileType:error:]
  -[MICodeSigningVerifier performValidationWithError:]
  -[MICodeSigningVerifier allowAdhocSigning]
  -[MICodeSigningVerifier setAllowAdhocSigning:]
  -[MICodeSigningVerifier logResourceVerificationErrors]
  -[MICodeSigningVerifier setLogResourceVerificationErrors:]
  -[MICodeSigningVerifier validateResources]
  -[MICodeSigningVerifier setValidateResources:]
  -[MICodeSigningVerifier performOnlineAuthorization]
  -[MICodeSigningVerifier setPerformOnlineAuthorization:]
  -[MICodeSigningVerifier validateUsingDetachedSignature]
  -[MICodeSigningVerifier setValidateUsingDetachedSignature:]
  -[MICodeSigningVerifier verifyTrustCachePresence]
  -[MICodeSigningVerifier setVerifyTrustCachePresence:]
  -[MICodeSigningVerifier skipProfileIDValidation]
  -[MICodeSigningVerifier setSkipProfileIDValidation:]
  -[MICodeSigningVerifier signingInfo]


MILaunchServicesDatabaseGatherer : NSObject <MIFilesystemScannerDelegate>
 @property  NSMutableSet *coreServices
 @property  NSMutableSet *systemApps
 @property  NSMutableSet *userApps
 @property  NSMutableSet *internalApps
 @property  NSMutableSet *appExtensions
 @property  NSMutableSet *frameworks
 @property  NSMutableSet *systemAppPlaceholders
 @property  @? enumerator
 @property  unsigned long gatherOptions
 @property  BOOL shouldUpdateAppExtensionDataContainersWithParentID
 @property  NSString *personaUniqueString

  // class methods
  +[MILaunchServicesDatabaseGatherer enumerateAppExtensionsInBundle:updatingAppExtensionParentID:ensureAppExtensionsAreExecutable:installProfiles:error:enumerator:]
  +[MILaunchServicesDatabaseGatherer entryForBundle:inContainer:withError:]
  +[MILaunchServicesDatabaseGatherer fetchInfoForBundle:inContainer:withError:]

  // instance methods
  -[MILaunchServicesDatabaseGatherer enumerator]
  -[MILaunchServicesDatabaseGatherer .cxx_destruct]
  -[MILaunchServicesDatabaseGatherer personaUniqueString]
  -[MILaunchServicesDatabaseGatherer errorOccurred:]
  -[MILaunchServicesDatabaseGatherer scanExecutableBundle:inContainer:withError:]
  -[MILaunchServicesDatabaseGatherer scanAppExtensionsInFrameworkBundle:withError:]
  -[MILaunchServicesDatabaseGatherer initWithOptions:personaUniqueString:enumerator:]
  -[MILaunchServicesDatabaseGatherer initWithOptions:enumerator:]
  -[MILaunchServicesDatabaseGatherer _scanAppExtensionsInBundle:inBundleContainer:withError:]
  -[MILaunchServicesDatabaseGatherer _markDriverKitExtensionsExecutableInBundle:withError:]
  -[MILaunchServicesDatabaseGatherer _setForEntry:]
  -[MILaunchServicesDatabaseGatherer _scanBundle:inContainer:addingToBundleSet:enumeratingEntry:withError:]
  -[MILaunchServicesDatabaseGatherer performGatherWithError:]
  -[MILaunchServicesDatabaseGatherer coreServices]
  -[MILaunchServicesDatabaseGatherer systemApps]
  -[MILaunchServicesDatabaseGatherer userApps]
  -[MILaunchServicesDatabaseGatherer internalApps]
  -[MILaunchServicesDatabaseGatherer appExtensions]
  -[MILaunchServicesDatabaseGatherer frameworks]
  -[MILaunchServicesDatabaseGatherer systemAppPlaceholders]
  -[MILaunchServicesDatabaseGatherer gatherOptions]
  -[MILaunchServicesDatabaseGatherer shouldUpdateAppExtensionDataContainersWithParentID]


MIStoreMetadataSubGenre : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *genre
 @property  NSNumber *genreID
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[MIStoreMetadataSubGenre supportsSecureCoding]

  // instance methods
  -[MIStoreMetadataSubGenre setGenre:]
  -[MIStoreMetadataSubGenre encodeWithCoder:]
  -[MIStoreMetadataSubGenre .cxx_destruct]
  -[MIStoreMetadataSubGenre genre]
  -[MIStoreMetadataSubGenre dictionaryRepresentation]
  -[MIStoreMetadataSubGenre copyWithZone:]
  -[MIStoreMetadataSubGenre isEqual:]
  -[MIStoreMetadataSubGenre initWithCoder:]
  -[MIStoreMetadataSubGenre genreID]
  -[MIStoreMetadataSubGenre setGenreID:]
  -[MIStoreMetadataSubGenre initWithGenre:genreID:]


MIStoreMetadata : NSObject <NSSecureCoding, NSCopying>
 @property  NSString *iAdAttribution
 @property  NSString *iAdConversionDate
 @property  NSString *iAdImpressionDate
 @property  NSString *artistName
 @property  NSNumber *betaExternalVersionIdentifier
 @property  NSString *bundleVersion
 @property  NSString *bundleShortVersionString
 @property  NSString *purchaseDate
 @property  NSString *appleID
 @property  NSNumber *DSPersonID
 @property  NSNumber *downloaderID
 @property  NSNumber *familyID
 @property  NSNumber *purchaserID
 @property  NSString *altDSID
 @property  BOOL hasMessagesExtension
 @property  NSNumber *initialODRSize
 @property  BOOL purchasedRedownload
 @property  NSNumber *itemID
 @property  NSString *itemName
 @property  NSString *kind
 @property  NSString *label
 @property  BOOL launchProhibited
 @property  NSString *ratingLabel
 @property  NSNumber *ratingRank
 @property  NSString *releaseDate
 @property  NSString *assetToken
 @property  NSString *softwareVersionBundleID
 @property  NSNumber *softwareVersionExternalIdentifier
 @property  NSString *sourceApp
 @property  NSString *storeCohort
 @property  NSNumber *storefront
 @property  NSString *variantID
 @property  NSString *betaBuildGroupID
 @property  NSString *genre
 @property  NSNumber *genreID
 @property  NSArray *subGenres
 @property  NSArray *categories
 @property  BOOL gameCenterEnabled
 @property  BOOL gameCenterEverEnabled
 @property  BOOL isAutoDownload
 @property  NSString *referrerURL
 @property  NSString *referrerApp
 @property  BOOL sideLoadedDeviceBasedVPP
 @property  BOOL deviceBasedVPP
 @property  NSString *enterpriseInstallURL
 @property  NSString *redownloadParams
 @property  NSDictionary *nameTranscriptions
 @property  BOOL factoryInstall
 @property  NSString *md5
 @property  NSData *protectedMetadata
 @property  NSNumber *hasOrEverHasHadIAP

  // class methods
  +[MIStoreMetadata supportsSecureCoding]
  +[MIStoreMetadata metadataFromPlistData:error:]
  +[MIStoreMetadata metadataFromPlistAtURL:error:]
  +[MIStoreMetadata metadataFromDictionary:]

  // instance methods
  -[MIStoreMetadata setReleaseDate:]
  -[MIStoreMetadata releaseDate]
  -[MIStoreMetadata altDSID]
  -[MIStoreMetadata setGenre:]
  -[MIStoreMetadata setAltDSID:]
  -[MIStoreMetadata artistName]
  -[MIStoreMetadata categories]
  -[MIStoreMetadata setIsAutoDownload:]
  -[MIStoreMetadata variantID]
  -[MIStoreMetadata setVariantID:]
  -[MIStoreMetadata kind]
  -[MIStoreMetadata bundleVersion]
  -[MIStoreMetadata sourceApp]
  -[MIStoreMetadata encodeWithCoder:]
  -[MIStoreMetadata setItemID:]
  -[MIStoreMetadata isLaunchProhibited]
  -[MIStoreMetadata setBundleVersion:]
  -[MIStoreMetadata familyID]
  -[MIStoreMetadata initWithDictionary:]
  -[MIStoreMetadata setLabel:]
  -[MIStoreMetadata .cxx_destruct]
  -[MIStoreMetadata setReferrerURL:]
  -[MIStoreMetadata genre]
  -[MIStoreMetadata setStoreCohort:]
  -[MIStoreMetadata ratingRank]
  -[MIStoreMetadata setFamilyID:]
  -[MIStoreMetadata storeCohort]
  -[MIStoreMetadata itemID]
  -[MIStoreMetadata isGameCenterEnabled]
  -[MIStoreMetadata dictionaryRepresentation]
  -[MIStoreMetadata hasMessagesExtension]
  -[MIStoreMetadata isPurchasedRedownload]
  -[MIStoreMetadata setArtistName:]
  -[MIStoreMetadata copyWithZone:]
  -[MIStoreMetadata setKind:]
  -[MIStoreMetadata label]
  -[MIStoreMetadata appleID]
  -[MIStoreMetadata itemName]
  -[MIStoreMetadata setStorefront:]
  -[MIStoreMetadata setAppleID:]
  -[MIStoreMetadata ratingLabel]
  -[MIStoreMetadata purchaseDate]
  -[MIStoreMetadata isAutoDownload]
  -[MIStoreMetadata isEqual:]
  -[MIStoreMetadata setCategories:]
  -[MIStoreMetadata referrerURL]
  -[MIStoreMetadata initWithCoder:]
  -[MIStoreMetadata storefront]
  -[MIStoreMetadata genreID]
  -[MIStoreMetadata betaExternalVersionIdentifier]
  -[MIStoreMetadata gameCenterEverEnabled]
  -[MIStoreMetadata deviceBasedVPP]
  -[MIStoreMetadata md5]
  -[MIStoreMetadata setMd5:]
  -[MIStoreMetadata setItemName:]
  -[MIStoreMetadata setPurchaseDate:]
  -[MIStoreMetadata redownloadParams]
  -[MIStoreMetadata setRedownloadParams:]
  -[MIStoreMetadata setLaunchProhibited:]
  -[MIStoreMetadata softwareVersionBundleID]
  -[MIStoreMetadata setHasMessagesExtension:]
  -[MIStoreMetadata initialODRSize]
  -[MIStoreMetadata setInitialODRSize:]
  -[MIStoreMetadata downloaderID]
  -[MIStoreMetadata setDownloaderID:]
  -[MIStoreMetadata purchaserID]
  -[MIStoreMetadata setPurchaserID:]
  -[MIStoreMetadata betaBuildGroupID]
  -[MIStoreMetadata setBetaBuildGroupID:]
  -[MIStoreMetadata setGenreID:]
  -[MIStoreMetadata setDeviceBasedVPP:]
  -[MIStoreMetadata setBetaExternalVersionIdentifier:]
  -[MIStoreMetadata setRatingLabel:]
  -[MIStoreMetadata setRatingRank:]
  -[MIStoreMetadata softwareVersionExternalIdentifier]
  -[MIStoreMetadata setSoftwareVersionExternalIdentifier:]
  -[MIStoreMetadata iAdAttribution]
  -[MIStoreMetadata setIAdAttribution:]
  -[MIStoreMetadata iAdConversionDate]
  -[MIStoreMetadata setIAdConversionDate:]
  -[MIStoreMetadata iAdImpressionDate]
  -[MIStoreMetadata setIAdImpressionDate:]
  -[MIStoreMetadata sideLoadedDeviceBasedVPP]
  -[MIStoreMetadata bundleShortVersionString]
  -[MIStoreMetadata setBundleShortVersionString:]
  -[MIStoreMetadata DSPersonID]
  -[MIStoreMetadata setDSPersonID:]
  -[MIStoreMetadata setPurchasedRedownload:]
  -[MIStoreMetadata assetToken]
  -[MIStoreMetadata setAssetToken:]
  -[MIStoreMetadata setSoftwareVersionBundleID:]
  -[MIStoreMetadata setSourceApp:]
  -[MIStoreMetadata subGenres]
  -[MIStoreMetadata setSubGenres:]
  -[MIStoreMetadata setGameCenterEnabled:]
  -[MIStoreMetadata setGameCenterEverEnabled:]
  -[MIStoreMetadata referrerApp]
  -[MIStoreMetadata setReferrerApp:]
  -[MIStoreMetadata setSideLoadedDeviceBasedVPP:]
  -[MIStoreMetadata enterpriseInstallURL]
  -[MIStoreMetadata setEnterpriseInstallURL:]
  -[MIStoreMetadata nameTranscriptions]
  -[MIStoreMetadata setNameTranscriptions:]
  -[MIStoreMetadata isFactoryInstall]
  -[MIStoreMetadata setFactoryInstall:]
  -[MIStoreMetadata protectedMetadata]
  -[MIStoreMetadata setProtectedMetadata:]
  -[MIStoreMetadata hasOrEverHasHadIAP]
  -[MIStoreMetadata setHasOrEverHasHadIAP:]


MIDataContainer : MIContainer
 @property  int contentProtectionClass

  // class methods
  +[MIDataContainer dataContainerForExecutableBundle:createIfNeeded:temporary:created:error:]

  // instance methods
  -[MIDataContainer contentProtectionClass]
  -[MIDataContainer setContentProtectionClass:]
  -[MIDataContainer _oldCompatiblityLinkDestination]
  -[MIDataContainer makeSymlinkToBundleInContainerIfNeeded:]


(MobileInstallationAdditions)
	// class methods
	+[(MobileInstallationAdditions) MI_dictionaryWithContentsOfURL:options:error:]

	// instance methods
	-[(MobileInstallationAdditions) MI_writeToURL:format:options:error:]
	-[(MobileInstallationAdditions) MI_writeAtomicallyToURLMatchingCurrentFileMetadata:format:error:]

(MobileInstallationAdditions)
	// instance methods
	-[(MobileInstallationAdditions) MI_writeAtomicallyToURL:withMode:owner:group:error:]
	-[(MobileInstallationAdditions) MI_writeAtomicallyToURL:withMode:owner:group:protectionClass:error:]
	-[(MobileInstallationAdditions) MI_writeAtomicallyToURLMatchingCurrentFileMetadata:error:]

<DEREK BUG Categories!>(MobileInstallationAdditions)
	// class methods
	+[<DEREK BUG Categories!>(MobileInstallationAdditions) MI_dictionaryWithContentsOfURL:options:error:]

(MobileInstallationAdditions)
	// instance methods
	-[(MobileInstallationAdditions) MI_URLByAppendingPathComponents:lastIsDirectory:]

(MobileInstallationAdditions)
	// class methods
	+[(MobileInstallationAdditions) stringWithFileSystemRepresentation:length:]
	+[(MobileInstallationAdditions) stringWithFileSystemRepresentation:]

	// instance methods
	-[(MobileInstallationAdditions) containsDotDotPathComponents]

01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0a00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
