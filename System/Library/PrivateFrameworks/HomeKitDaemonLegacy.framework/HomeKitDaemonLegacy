|| __DATA.__data _CODER_RemoteLoginMessage_Error
|| __DATA.__data _CODER_RemoteLoginMessage_SessionID
|| __DATA.__data _CODER_account_KEY
|| __DATA.__data _CODER_altDSID_KEY
|| __DATA.__data _CODER_companionDevice_KEY
|| __DATA.__data _CODER_passwordToken_KEY
|| __DATA.__data _CODER_proxyDevice_KEY
|| __DATA.__data _CODER_rawPassword_KEY
|| __DATA.__data _CODER_targetedAccountType_KEY
|| __DATA.__data _CODER_username_KEY
|| __DATA.__data _HMDAccessoryFirmwareUpdateCharacteristicBasedPolicyClientIdentifier
|| __DATA.__data _HMDBulletinBoardNotificationDidUpdateNotification
|| __DATA.__data _HMDCameraIDSDeviceConnectionAudioStreamName
|| __DATA.__data _HMDCameraIDSDeviceConnectionKeepAliveStreamName
|| __DATA.__data _HMDCameraIDSDeviceConnectionVideoStreamName
|| __DATA.__data _HMDDeviceSetupManagerUpdatedRunningNotification
|| __DATA.__data _HMDHH2MigrationLogEventEndTimeKey
|| __DATA.__data _HMDHH2MigrationLogEventIsAutoMigrationKey
|| __DATA.__data _HMDHH2MigrationLogEventMigrationAttemptKey
|| __DATA.__data _HMDHH2MigrationLogEventMigrationTotalTimeKey
|| __DATA.__data _HMDHH2MigrationLogEventStartTimeKey
|| __DATA.__data _HMDHH2MigrationLogEventSuccessKey
|| __DATA.__data _HMDLocationAuthorizationChangedNotification
|| __DATA.__data _HMDLostModeManagerDidExitLostModeWithAuthCompleteNotification
|| __DATA.__data _HMDLostModeManagerUpdatedNotification
|| __DATA.__data _HMDMediaGroupsAggregateConsumerUpdatedAggregateDataNotification
|| __DATA.__data _HMDMediaSystemAddedNotification
|| __DATA.__data _HMDMediaSystemRemovedNotification
|| __DATA.__data _HMDMediaSystemsAggregateDataGeneratorDefaultGroupName
|| __DATA.__data _HMDPrimaryResidentConfirmedDeviceIdentifierChangeNotification
|| __DATA.__data _HMDPrimaryResidentIsCurrentDeviceChangeNotification
|| __DATA.__data _HMDProcessInfoStateDidChangeNotification
|| __DATA.__data _HMDResidentAppleMediaStateManagerRetryIntervals
|| __DATA.__data _HMDSoftwareUpdateAvailableNotification
|| __DATA.__data _HMDSoftwareUpdateDocumentationAssetStateUpdatedNotification
|| __DATA.__data _HMDTimeBasedFlagDailyBit0DateKey
|| __DATA.__data _HMDTimeBasedFlagDailyBitsKey
|| __DATA.__data _HMDTimeBasedFlagPeriodicityKey
|| __DATA.__data _HomeKitCameraIDSSessionSetup_idsSessionInvitationReceived
|| __DATA.__data _HomeKitCameraIDSSessionSetup_idsSessionInvitationSent
|| __DATA.__data _HomeKitCameraIDSSessionSetup_idsSessionStartedOnInitiator
|| __DATA.__data _HomeKitCameraIDSSessionSetup_idsSessionStartedOnReceiver
|| __DATA.__data _HomeKitCameraSnapshotIDSTransfer_receivedImage
|| __DATA.__data _HomeKitCameraSnapshotIDSTransfer_sentImage
|| __DATA.__data _HomeKitCameraSnapshotMessaging_receivedSnapshotRequest
|| __DATA.__data _HomeKitCameraSnapshotMessaging_sentSnapshotRequest
|| __DATA.__data _HomeKitCameraSnapshotMessaging_sentSnapshotResponse
|| __DATA.__data _HomeKitCameraSnapshot_receivedSnapshotFromAccessory
|| __DATA.__data _HomeKitCameraSnapshot_sentSnapshotRequestToAccessory
|| __DATA.__data _HomeKitCameraStreamConfigure_audioCodec
|| __DATA.__data _HomeKitCameraStreamConfigure_cryptoSuite
|| __DATA.__data _HomeKitCameraStreamConfigure_framerate
|| __DATA.__data _HomeKitCameraStreamConfigure_resolution
|| __DATA.__data _HomeKitCameraStreamConfigure_sampleRate
|| __DATA.__data _HomeKitCameraStreamIDSConnSetupParameters_connectionComplete
|| __DATA.__data _HomeKitCameraStreamIDSConnSetupParameters_connectionRequested
|| __DATA.__data _HomeKitCameraStreamIDSConnSetup_audioConnection
|| __DATA.__data _HomeKitCameraStreamIDSConnSetup_keepaliveConnection
|| __DATA.__data _HomeKitCameraStreamIDSConnSetup_videoConnection
|| __DATA.__data _HomeKitCameraStreamMessaging_receivedConnSetup
|| __DATA.__data _HomeKitCameraStreamMessaging_receivedNegotiationRequest
|| __DATA.__data _HomeKitCameraStreamMessaging_receivedStartRequest
|| __DATA.__data _HomeKitCameraStreamMessaging_sentConnSetup
|| __DATA.__data _HomeKitCameraStreamMessaging_sentNegotiationRequest
|| __DATA.__data _HomeKitCameraStreamMessaging_sentNegotiationResponse
|| __DATA.__data _HomeKitCameraStreamMessaging_sentStartRequest
|| __DATA.__data _HomeKitCameraStreamMessaging_sentStartResponse
|| __DATA.__data _HomeKitCameraStreamReconfigure_reconfigurationTimestamp
|| __DATA.__data _HomeKitCameraStreamReconfigure_resolution
|| __DATA.__data _HomeKitCameraStream_initialConfiguration
|| __DATA.__data _HomeKitCameraStream_receivedFirstFrame
|| __DATA.__data _HomeKitCameraStream_reconfigurations
|| __DATA.__data _cloudRecordSizeLimit
|| __DATA.__data _cloudSyncUploadErrorCount
|| __DATA.__data _cloudSyncUploadReasonCount
|| __DATA.__data _gLogCategory_HMDPowerManager
|| __DATA.__data _gLogCategory_HMDSecureRemoteStream
|| __DATA.__data _kAudioStreamNamePrefix
|| __DATA.__data _kCameraController
|| __DATA.__data _kCameraInvalidSocket
|| __DATA.__data _kCameraResident
|| __DATA.__data _kCameraWatch
|| __DATA.__data _kDefaultCameraApplicationIdentifier
|| __DATA.__data _kFMFStatusKey
|| __DATA.__data _kHMDCameraRecordingSessionStartNotification
|| __DATA.__data _kHMDVendorInfoNotificationManufacturerKey
|| __DATA.__data _kHMDVendorInfoUpdatedNotification
|| __DATA.__data _kMetadataCurrentSchemaVersion
|| __DATA.__data _kVideoStreamNamePrefix
|| __DATA.__data _maximumAccessoriesPerBridge
|| __DATA.__data _maximumAccessoriesPerHome
|| __DATA.__data _maximumAccessoriesPerRoom
|| __DATA.__data _maximumActionSetsPerHome
|| __DATA.__data _maximumActionsPerActionSet
|| __DATA.__data _maximumCharacteristicsPerService
|| __DATA.__data _maximumDataSyncFragmentSize
|| __DATA.__data _maximumHomes
|| __DATA.__data _maximumRoomsPerHome
|| __DATA.__data _maximumRoomsPerZone
|| __DATA.__data _maximumServiceGroupsPerHome
|| __DATA.__data _maximumServicesPerAccessory
|| __DATA.__data _maximumServicesPerServiceGroup
|| __DATA.__data _maximumTriggersPerHome
|| __DATA.__data _maximumUsersPerHome
|| __DATA.__data _maximumZonesPerHome
|| __DATA.__data _minimumTimerRecurrence
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAccessoryNetworkProtectionReport
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAccessoryPairing
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAccessoryReadWrite
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAccessoryRelaySetup
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitActionSetTriggered
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAddEventTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitAssistantAccessControl
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitBackingStoreCKRebuildEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitBroadcastEventKeyGeneration
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitBroadcastEventReceived
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCalendarEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraConfigurationData
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraIDSSessionSetup
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraRecordingBulkSendDataRead
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraRecordingClipNotification
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraRecordingFragmentAnalyzed
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraRecordingUploadOperation
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraSettings
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraSnapshotIDSTransfer
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraSnapshotMessaging
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStream
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStreamConfigure
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStreamIDSConnSetup
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStreamIDSConnSetupParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStreamMessaging
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraStreamReconfigure
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCameraUserSettings
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCharacteristic
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCharacteristicEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCharacteristicThresholdEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCloudSync
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitCloudSyncInfoTuple
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitDataModelMigration
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitDurationEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventTriggerEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventTriggerExecutionSession
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventTriggerUserConfirmationSend
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitEventsAggregationReport
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitHAPService
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitHomeCameraConfigurations
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitHomeSharing
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitLocationEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitMessageHomeLocationReport
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitMessageLocation
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitMessageTransported
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitNetworkProtectionReport
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitPredicate
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitPresenceEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitPresenceRegion
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitPresenceReport
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitProcessMemoryPressureEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitRelaySession
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitRemoteLogin
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitRemoteLogout
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitRemoteSession
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitResetConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSignificantTimeEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSiriCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSiriSync
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSoftwareUpdateAutomaticUpdateToggled
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSoftwareUpdateFetched
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitSoftwareUpdateStarted
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitTargetControllerCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitTargetControllerError
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitUpdateEventTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitUserPresenceAuthorization
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitUserPresenceCompute
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitValue
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitVendorInformation
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitVideoResolutionCount
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitWHAAccessControl
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitWHASetting
|| __DATA.__objc_data _OBJC_CLASS_$_AWDHomeKitWatchCompanionConnectivityReport
|| __DATA.__objc_data _OBJC_CLASS_$_BTLEScanner
|| __DATA.__objc_data _OBJC_CLASS_$_HAPCharacteristicTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessCodeWriteRequestModificationRequestPair
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryAllowedHostsPreviewHelper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryBrowserXPCMessageSendPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryBrowserXPCMessageSendPolicyParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryBundle
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryDataStreamAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryDiagnosticsManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryDiagnosticsSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryDiagnosticsSettings
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryEventsGenerated
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateAggregatePolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateAllowPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateApplyTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateCameraPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateDenyPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdatePolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdatePresencePolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateProfile
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateRegisterTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateSchedulerWingman
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateSessionWingman
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateStagingTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateTimeWindowPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateTimedAutomationPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryMetricVendorDetails
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkCredential
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkProtectionGroupModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkProtectionGroupRecord
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryPairingLogEventStateManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryPairingProgressStateMap
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryQueues
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryReachabilityElectionParameter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryReachabilityTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryRetrievalCompletionTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryServerBrowserDemo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryServerDemo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingConstraintModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingConstraintModifyOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingEventsGenerated
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingGroupMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingGroupModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingMergeHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingMergeStrategy
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingMessageMapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingTransform
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsBackingStoreTransactionReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsControllerDependencyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsEventHelper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySetupCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessorySetupMetricDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryTransportInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryTransportReachabilityReport
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccessoryVersion
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccountHandleModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccountHandleResolveOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAccountModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDActionSetModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDActiveSiriSessionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDActiveXPCClientConnectionsPeriodicTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAddAccessoryProgressState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAirPlayAccessoryModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsAddEventTriggerData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsCalendarEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsCharacteristicEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsCharacteristicThresholdEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsDurationEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsEventTriggerData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsEventTriggerExecutionSessionData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsEventTriggerUserConfirmationSendData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsHAPServiceData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsLocationEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsPredicateData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsPresenceEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsSignificantTimeEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsTriggerEventData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAnalyticsUpdateEventTriggerData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleHomePodAccessoryModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryDeleteSiriHistoryOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryDependencyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryInfoController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryInfoSubscriber
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryLocalMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMessenger
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMetricsDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryModelDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryPowerActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessorySleepWakeStateController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDApplicationDataModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantCharacteristicTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantColorCharacteristic
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantCommand
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantCommandExecutor
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantCommandHelper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantIntent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAssistantSettingsConnection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioCodecConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioCodecGroup
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioCodecParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioSampleRate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioStreamInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDAudioStreamInterfaceDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBTLEAdvertiser
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundSystemTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundSystemTaskRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundTaskLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundTaskLogger
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackgroundTaskManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheDeleteRecordOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheDeleteZoneOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchGroupInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchModelObjectResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchModelObjects
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchRecordMappingResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchRecordMappings
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchRecordResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheUpdateRecordOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreDispatchModelChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreFetchArchiveOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreLocalFlushOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogDropOperationsWithUUID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogPrunePushedOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogRecord
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogUpdateOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBackingStoreUpdateObjectReference
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBatchLocationContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBiomeMigrationManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBitRateSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBulletinBoardCameraNotificationAssociation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBulletinCategory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBulletinCharacteristicTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDBulletinUIManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCAMDBlockManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCAMDEmbeddedDevice
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCAMDEmbeddedDeviceService
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCHIPAccessoryDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCHIPAccessoryStorage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCHIPConnectedEcosystemsChangedBulletin
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCHIPDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCHIPHomeDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCUWiFiDeviceWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCalendarEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraAccessModeChangedBulletin
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraAccessorySettingsConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraAudioParameterCombination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraAudioParameterSelection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipAddModelsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipAddSignificantEventOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipAppendStreamingAssetOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipCreateClipOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipCreateClipWithSignificantEventOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipFeedbackManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipFeedbackUploader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipFinalizeClipOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipImportMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipImportVideoSegmentMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipImporter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipOperationDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipSegmentMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipSignificantEventBulletin
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipUploadVideoSegmentOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipUploader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipUploaderFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipUserNotificationCenter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaDisableCameraMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaDisableCameraResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaEnableCameraMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaEnableCameraResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaServerNotification
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraHomeSettingsConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSDeviceConnection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSDeviceConnectionReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSDeviceConnectionSender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSSessionHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSSessionInitiator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSSessionInviterDeviceVerifier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraIDSSessionReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraLocalStreamControlManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraLocalStreamSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraMediaConfigGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraMediaParameterSelection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraNetworkConfig
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraParameterSelection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraPowerAssertionHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraProfileSettingsDerivedPropertiesModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraProfileSettingsManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraProfileSettingsModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraProtocolParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAnalysisNode
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAudioBitRateMode
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAudioCodec
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAudioCodecConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAudioCodecParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingAudioSampleRate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingBulkSendListener
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingBulkSendSessionInitiator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingBulkSendSessionReader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingGeneralConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingH264Level
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingH264Profile
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingLoadBalancerDecision
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingManagerDependencyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingMediaContainer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingMediaContainerConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingMediaContainerParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingMetricUUIDUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingPreferredAudioConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingPreferredVideoConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingReachabilityEventManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingReachabilityEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSelectedConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionNotificationTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionRetryContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionSignificantEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionSignificantEventManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionTimelineManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionVariantFragmentManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSettingsControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSupportedAudioConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSupportedVideoConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingVideoAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingVideoCodec
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingVideoCodecConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRecordingVideoCodecParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRemoteStreamControlManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRemoteStreamSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraRemoteStreamTracker
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraResidentMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSessionID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSettingProactiveReader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventFaceClassification
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventFaceClassificationModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventFaceClassificationResolver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventFetchHeroFrameContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventListener
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventServer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventServerDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSRelay
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSRelayInitiator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSRelayReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSStream
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSStreamInitiator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotIDSStreamReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotLocal
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotManagerDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotMonitorEvents
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotNotificationTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotRemoteRelayReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotRemoteRelaySender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotRemoteRelayStream
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotRemoteStreamReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotRemoteStreamSender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotSender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotSessionID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamControlManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamControlMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamControlMessageHandlerDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamManagerSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamSessionID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamSnapshotCapture
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraStreamSnapshotHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraSupportedConfigurationCache
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraUserSettingsConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraVideoParameterCombination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraVideoParameterSelection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraVideoTier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCameraVideoTierParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCapabilityFlags
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicEventBaseModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicMonitorEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicReadWriteLogEventManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicResponseNotificationContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicThresholdRangeEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicUpdateTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicValueUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicWriteActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicWriteRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicWriteTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCharacteristicsAvailabilityListener
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudChangeNode
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudGroupRootRecordModelObject
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudHomeManagerZoneChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudHomeZoneChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudLegacyHomeDataRecord
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudLegacyHomeDataVersion3Record
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudLegacyMetadataRecord
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudLegacyModelObject
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudMetadataZoneChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudPairedMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudPairedMetadataDiagnostics
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudPairedMetadataVersionConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudRecord
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudSharedGroupRootRecordModelObject
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCloudZoneInformationModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompanionManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeBoolSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeLanguageSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeNumberSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingBoolValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingIntegerConstraint
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingLanguageValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingNumberValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingOperationResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingPrivileges
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingStringConstraint
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingStringValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingVersionValue
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsAccessorySettingsModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsKeyPathValueItem
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsLegacyDatabaseAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsZoneManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCompositeStringSetting
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationAddOnImpl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationLocalElectionMeshController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationLocalElectionMeshNode
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationPingCommand
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationPingNotification
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationPingRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDCoordinationPingResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStream
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamBulkSendOpenSessionResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamBulkSendPendingSessionContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamBulkSendProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamBulkSendSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamBulkSendSessionCandidate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamControlProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamFragment
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamFragmentAssembler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamFragmentChunk
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamFrameReader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamHAPPendingWrite
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamHAPSetupOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamHAPTransport
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamMessageCoder
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamPendingEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamPendingRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamSetupOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamSocket
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamStreamProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamTCPSetupOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamTCPTransport
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDataStreamTargetControlProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceDiscoveryOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceNotificationHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceNotificationHandlerDefaultDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceNotificationUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceRegistrationEntry
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceSetupClientSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceSetupServerSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceSetupSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceSetupSessionInternal
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDeviceSetupTrackingInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDonationHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDoorbellChimeController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDoorbellChimeControllerContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDurationEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDDynamicActivityAttributionPublisher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEndPointAddress
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventRouterTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerDependencyFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerDevice
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerExecutionSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDEventTriggerUserConfirmationSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFaceprintModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFairPlaySAPSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFeatures
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedAccessorySettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedAccessorySettingsControllerKeyPathMapItem
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedAccessorySettingsControllerMutableKeyPathMap
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedSettingsDriverHomePodSettings
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedSettingsDriverPreferences
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFetchedSettingsUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_HMDFragmentationStreamTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDH264Level
|| __DATA.__objc_data _OBJC_CLASS_$_HMDH264Profile
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryLocalOperationTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryLocalReadTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryLocalWriteTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryPrimaryResidentOperationTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryPrimaryResidentReadTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryPrimaryResidentWriteTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryReaderWriterMetricHelper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteOperationTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteOperationWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteReadTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteReadWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteWriteTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryRemoteWriteWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryTask
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryTaskContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHAPMetadataModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHH2MigrationLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHPSAPIConformanceProviding
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHTTPClientMessageTransport
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHTTPServerMessageTransport
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeAIHomePersonDataInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeAIPersonDataInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeAIPhotosPersonDataInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeAccessCodeModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeAssistantOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeDataPushDestination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeEventsGenerated
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeKitPersonDataInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeLightBrightnessLoggerEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeLocationData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeLockNotificationContextResolutionResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeManagerModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeNaturalLightingContextUpdater
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePeriodicReader
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePersonManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePresence
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePresenceMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePresenceRemote
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomePresenceUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeRemoteEventAccessController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeReprovisioningPendingInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeUpgradedToROAR
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeyAccessoryConfigureState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeyISOCredential
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHouseholdActivityLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDHouseholdDataEventCounterGroupSpecifier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDIDSActivityObserverModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDIDSMessageContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDIDSSendMessageOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLastEventStoreController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLegacyAccessorySettingsAdaptor
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLightProfileNaturalLightingActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLocationCluster
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLocationClusterGroup
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLocationEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLocationTuple
|| __DATA.__objc_data _OBJC_CLASS_$_HMDLogEventWeekBasedFilter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMPCAssistantRemoteControlDestinationFactory
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMPCResolveDestinationOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMPCSendMRCommandOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMPCSendMRCommandOperationDefaultExternalObjectInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMPCSessionData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMRAVEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMROutputDeviceStatus
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMRSetEndpointVolumeOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaAccessoryBrowseOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaAccessoryModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationBackingStoreHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerAggregateDataGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerBackingStoreHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerMetricsEventDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationManagerMetricsDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationsManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaDestinationsMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaEndpoint
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupSettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregateBackupMessageTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregateConsumer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregateData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregateDataGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregatorBackupSender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregatorMessenger
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsLocalDataStorage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsParticipantData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaGroupsUnconfiguredParticipantOnboardingManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaOutputDevice
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaPlaybackActionAsCharacteristicWriteRequests
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaPlaybackActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaPropertyRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaPropertyResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaPropertyWriteRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaRoomGroupsDataGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaSessionRequestMessageInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaSessionState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaSystemModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaSystemModelExtended
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMediaSystemsAggregateDataGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMessageHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMessageHandlerMetricsDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMessageHandlerQueuedMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMetricsUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_HMDModernTransportDeviceReachabilityObserverListenerContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDModernTransportMessageContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDModernTransportMessageContextOptions
|| __DATA.__objc_data _OBJC_CLASS_$_HMDModernTransportMessageContextOptionsBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMultiUserSettingsMetricsEventDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableCameraRecordingSessionSignificantEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableCameraSignificantEventFaceClassification
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableHomeWalletKey
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableMediaGroupsAggregateData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableMediaGroupsParticipantData
|| __DATA.__objc_data _OBJC_CLASS_$_HMDMutableNaturalLightingCurve
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNEHelperClient
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNaturalLightingActiveTransitionContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNaturalLightingCurve
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNaturalLightingCurveWriter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNaturalLightingEnabledRetryContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkConnection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterAccessViolation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterAccessViolationControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterAccessViolationControlOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterAccessViolationControlResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterAdvertisementProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientControlOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientControlOperationResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientControlResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientIdentifierList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatus
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatusControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatusControlOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatusIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatusIdentifierList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterClientStatusList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterControlOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterControlOperationStatus
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterCredential
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterDynamicPortRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleAccessoryIdentifier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleCloudNetworkDeclarations
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleCloudZone
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleCloudZoneFetchInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleICMPType
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleLAN
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleLANDynamic
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleLANMulticast
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleLANStatic
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirror
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerClientState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerOverrideParser
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleManagerUtils
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleWAN
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleWANAddressRange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterFirewallRuleWANSubject
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterHomeKitOnlyFirewallConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterICMPType
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterICMPTypeList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterIPAddress
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterIPAddressList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterIPProtocolVersion
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterLANFirewall
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterLANFirewallConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterLANFirewallRuleList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterLANIdentifierList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterMulticastBridgingRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterProtocol
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterRuleDirection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterServiceType
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterStaticICMPRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterStaticPortRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANFirewall
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANFirewallConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANFirewallRuleList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANICMPRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANPortRule
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANStatus
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNetworkRouterWANStatusList
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNotificationRegistryCharacteristicsRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNotificationRegistryMediaPropertiesRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDNotificationRegistryRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDObsoleteUserModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDOutgoingHomeInvitationModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPBHomeLightBrightnessEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPacketizationMode
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPairedAccessoryInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPendingBulkSendListener
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPendingCharacteristic
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPendingResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPendingSocketRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPersonDataBatchChange
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPersonManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPersonModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPersonSettingsModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPhoneCallObserver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPhotoLibrary
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPhotoLibraryPerson
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPhotoLibraryPersonImporter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPhotosPersonManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPreferredMediaUserEventController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPresenceEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPrimaryElectionCoordinationAddOn
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPrimaryElectionFindPrimaryMeshOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPrimaryElectionMeshInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDPrimaryResidentCapabilitiesAggregator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRapportDeviceClientWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteAccountHandleMessageDestination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteAccountMessageDestination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteDestinationFormatter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteDeviceConfirmationHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteDeviceInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteDeviceMessageDestination
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterAccessControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterAssertionController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProcessStateChangeAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoChangeRegistrationsResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoConnectMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoConnectResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoDisconnectMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoEventsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoFetchEventsMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoFetchEventsResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoFragmentedMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoKeepAliveMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoServerMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterProtoTopic
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterResidentClient
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterServer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterServerConnection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterServerMessageReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAnisetteDataHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAnisetteDataProvider
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAuthenticationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAuthenticationResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginBase
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginCompanionAuthenticationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiator
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorAuthenticationSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorCompanionAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorProxyAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginInitiatorSignoutSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginMessageSender
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginProxyAuthenticationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginProxyDeviceRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginProxyDeviceResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginReceiver
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginReceiverAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginReceiverCompanionAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginReceiverProxyAuthentication
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginReceiverSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginSignoutRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteLoginUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteMessageSenderContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteMessageSerialization
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemotePersonDataMessenger
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteReadRequestMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemoteSendMessageOperation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRemovedUserAccessCodeModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDReselectedRTPParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDReselectedStreamConfigurationWrite
|| __DATA.__objc_data _OBJC_CLASS_$_HMDReselectedVideoParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentAppleMediaStateManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentCommunicationHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentDeviceElectionParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentDeviceModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentMesh
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentMeshMeshStorage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentMeshResidentStorage
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentReachabilityState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDResidentUserModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRetailDemoModeRequestHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDRoomModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSRTPCryptoSuite
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSRTPParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSecureRemoteSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSecureRemoteStream
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSecureRemoteStreamInternal
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSelectedAudioParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSelectedRTPParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSelectedSleepConfigurationTLV
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSelectedStreamConfigurationWrite
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSelectedVideoParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDServiceGroupModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDServiceNameComponents
|| __DATA.__objc_data _OBJC_CLASS_$_HMDServiceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSessionControl
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSettingAttachedSettingUpdate
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSettingMessageMapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSettingOnChangeAttachedUpdatesResult
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSettingSelectionItem
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSettingValueSelectionItem
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSetupEndPointRead
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSetupEndPointWrite
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSharedHomeModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSharedHomeUpdateSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDShortcutActionModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSignificantTimeEventModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriAccessoryInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriAccessoryMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointHAPSettings
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileAccessorySettingFields
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileFields
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileMetricsDispatcher
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointSessionStateTLV
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointSessionStateTypeWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriEndpointSettingsSyncManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriRemoteInputServer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriServer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSiriStreamStartEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSleepConfigurationOperationStatusWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSleepConfigurationOperationTypeWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSleepConfigurationWakePacketTypeWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSleepConfigurationWakeUpTypeWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotCATransactionHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotCacheEntry
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotCacheRequestHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotCompletionTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotFile
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotLocalSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotRemoteSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotRequestHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotSessionApplicationID
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSnapshotSlotManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateDocumentationAsset
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateDocumentationManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStereoPairSettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStereoPairSettingsControllerStateManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStreamInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStreamingCapabilities
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStreamingManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDStreamingStatus
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSupportedAudioStreamConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSupportedRTPConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSupportedSiriAudioConfigurations
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSupportedSleepConfigurationTLV
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSupportedVideoStreamConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDSymptomContainer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTargetButtonConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTargetConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTargetControlManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTargetControllerManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDThreadNetworkMetadataStore
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTimeBasedFlagNameAndHomeSpecifier
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTimerTriggerModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTransientRuleManagerClient
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTriggerConfirmationTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDTriggerModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUIDialogPresenter
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUnpairedHAPAccessoryConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUnpairedHAPAccessoryPairingInformation
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUnpairedHAPAccessoryProgressHandler
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUpdater
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserAccessCodeModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserCloudShareEstablishShareRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserCloudShareRepairRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserCloudShareRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserManagementOperationModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserManagementOperationTimestamp
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPresence
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPresenceFeed
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPresenceFeedRetryTimer
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPresenceFeedSession
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPresenceRegion
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserPushCache
|| __DATA.__objc_data _OBJC_CLASS_$_HMDUserSettingsPerHomeLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVendorDataManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVendorModelCollection
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVendorModelEntry
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoCodec
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoCodecConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoCodecParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoResolution
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoStreamConfig
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoStreamInterface
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoStreamReconfigure
|| __DATA.__objc_data _OBJC_CLASS_$_HMDVideoStreamReconfigureEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWakeConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWakeConfigurationParameters
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWakePacketConfigurationTLV
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchConnectivityLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchConnectivityLogEventManager
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchSync
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchSyncRetryContext
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWatchSyncState
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWiFiManagementController
|| __DATA.__objc_data _OBJC_CLASS_$_HMDWidgetFetchSpecification
|| __DATA.__objc_data _OBJC_CLASS_$_HMDXPCCachedResponseEntry
|| __DATA.__objc_data _OBJC_CLASS_$_HMDZoneModel
|| __DATA.__objc_data _OBJC_CLASS_$_HMEraseAnisetteDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMEraseAnisetteDataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMFConnectivityInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDCharacteristicMetadata
|| __DATA.__objc_data _OBJC_CLASS_$_HMFWoBLEInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMFWoWLANInfo
|| __DATA.__objc_data _OBJC_CLASS_$_HMFetchAnisetteDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMFetchAnisetteDataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMLegacyAnisetteDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMLegacyAnisetteDataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMMediaGroupProtoMediaParticipantData
|| __DATA.__objc_data _OBJC_CLASS_$_HMProvisionAnisetteDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMProvisionAnisetteDataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_HMRemoteLoginMessage
|| __DATA.__objc_data _OBJC_CLASS_$_HMSyncAnisetteDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_HMSyncAnisetteDataResponse
|| __DATA.__objc_data _OBJC_CLASS_$_ScanContext
|| __DATA.__objc_data _OBJC_CLASS_$_THAButton
|| __DATA.__objc_data _OBJC_CLASS_$_THAButtonEvent
|| __DATA.__objc_data _OBJC_CLASS_$_THAController
|| __DATA.__objc_data _OBJC_CLASS_$__HMDCameraPowerAssertion
|| __DATA.__objc_data _OBJC_CLASS_$__HMDCameraRemoteStreamTrackerAssertion
|| __DATA.__objc_data _OBJC_CLASS_$__HMDHTTPServerClientConnection
|| __DATA.__objc_data _OBJC_CLASS_$__HMDIDSProxyLinkPreferenceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$__HMDNEHelperClientCacheEntry
|| __DATA.__objc_data _OBJC_CLASS_$__HMDPendingRegionUpdate
|| __DATA.__objc_data _OBJC_CLASS_$__HMDSecureRemoteQueuedMessage
|| __DATA.__objc_data _OBJC_CLASS_$___HMDPrimaryElectionCandidate
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAccessoryNetworkProtectionReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAccessoryPairing
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAccessoryReadWrite
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAccessoryRelaySetup
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitActionSetTriggered
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAddEventTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitAssistantAccessControl
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitBackingStoreCKRebuildEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitBroadcastEventKeyGeneration
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitBroadcastEventReceived
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCalendarEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraConfigurationData
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraIDSSessionSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraRecordingBulkSendDataRead
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraRecordingClipNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraRecordingFragmentAnalyzed
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraRecordingUploadOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraSnapshotIDSTransfer
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraSnapshotMessaging
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStream
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStreamConfigure
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStreamIDSConnSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStreamIDSConnSetupParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStreamMessaging
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraStreamReconfigure
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCameraUserSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCharacteristic
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCharacteristicEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCharacteristicThresholdEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCloudSync
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitCloudSyncInfoTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitDataModelMigration
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitDurationEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventTriggerEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventTriggerExecutionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventTriggerUserConfirmationSend
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitEventsAggregationReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitHAPService
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitHomeCameraConfigurations
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitHomeSharing
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitLocationEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitMessageHomeLocationReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitMessageLocation
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitMessageTransported
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitNetworkProtectionReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitPredicate
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitPresenceEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitPresenceRegion
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitPresenceReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitProcessMemoryPressureEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitRelaySession
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitRemoteLogin
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitRemoteLogout
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitRemoteSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitResetConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSignificantTimeEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSiriCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSiriSync
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSoftwareUpdateAutomaticUpdateToggled
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSoftwareUpdateFetched
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitSoftwareUpdateStarted
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitTargetControllerCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitTargetControllerError
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitUpdateEventTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitUserPresenceAuthorization
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitUserPresenceCompute
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitValue
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitVendorInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitVideoResolutionCount
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitWHAAccessControl
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitWHASetting
|| __DATA.__objc_data _OBJC_METACLASS_$_AWDHomeKitWatchCompanionConnectivityReport
|| __DATA.__objc_data _OBJC_METACLASS_$_BTLEScanner
|| __DATA.__objc_data _OBJC_METACLASS_$_HAPCharacteristicTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessCodeWriteRequestModificationRequestPair
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryAllowedHostsPreviewHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryBrowserXPCMessageSendPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryBrowserXPCMessageSendPolicyParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryBundle
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryDataStreamAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryDiagnosticsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryDiagnosticsSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryDiagnosticsSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryEventsGenerated
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateAggregatePolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateAllowPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateApplyTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateCameraPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateDenyPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdatePolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdatePresencePolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateProfile
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateRegisterTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateSchedulerWingman
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateSessionWingman
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateStagingTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateTimeWindowPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateTimedAutomationPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryMetricVendorDetails
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkCredential
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkProtectionGroupModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkProtectionGroupRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryPairingLogEventStateManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryPairingProgressStateMap
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryQueues
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryReachabilityElectionParameter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryReachabilityTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryRetrievalCompletionTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryServerBrowserDemo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryServerDemo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingConstraintModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingConstraintModifyOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingEventsGenerated
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingGroupMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingGroupModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingMergeHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingMergeStrategy
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingMessageMapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingTransform
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsBackingStoreTransactionReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsControllerDependencyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsEventHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySetupCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessorySetupMetricDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryTransportInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryTransportReachabilityReport
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccessoryVersion
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccountHandleModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccountHandleResolveOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAccountModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDActionSetModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDActiveSiriSessionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDActiveXPCClientConnectionsPeriodicTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAddAccessoryProgressState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAirPlayAccessoryModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsAddEventTriggerData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsCalendarEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsCharacteristicEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsCharacteristicThresholdEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsDurationEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsEventTriggerData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsEventTriggerExecutionSessionData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsEventTriggerUserConfirmationSendData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsHAPServiceData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsLocationEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsPredicateData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsPresenceEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsSignificantTimeEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsTriggerEventData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAnalyticsUpdateEventTriggerData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleHomePodAccessoryModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryDeleteSiriHistoryOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryDependencyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryInfoController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryInfoSubscriber
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryLocalMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMessenger
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMetricsDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryModelDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryPowerActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessorySleepWakeStateController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDApplicationDataModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantCharacteristicTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantColorCharacteristic
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantCommandExecutor
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantCommandHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantIntent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAssistantSettingsConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioCodecConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioCodecGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioCodecParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioSampleRate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioStreamInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDAudioStreamInterfaceDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBTLEAdvertiser
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundSystemTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundSystemTaskRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundTaskLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundTaskLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackgroundTaskManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheDeleteRecordOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheDeleteZoneOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchGroupInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchModelObjectResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchModelObjects
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchRecordMappingResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchRecordMappings
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchRecordResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheUpdateRecordOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreDispatchModelChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreFetchArchiveOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLocalFlushOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogDropOperationsWithUUID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogPrunePushedOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogUpdateOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBackingStoreUpdateObjectReference
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBatchLocationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBiomeMigrationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBitRateSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBulletinBoardCameraNotificationAssociation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBulletinCategory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBulletinCharacteristicTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDBulletinUIManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCAMDBlockManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCAMDEmbeddedDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCAMDEmbeddedDeviceService
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCHIPAccessoryDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCHIPAccessoryStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCHIPConnectedEcosystemsChangedBulletin
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCHIPDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCHIPHomeDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCUWiFiDeviceWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCalendarEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraAccessModeChangedBulletin
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraAccessorySettingsConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraAudioParameterCombination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraAudioParameterSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipAddModelsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipAddSignificantEventOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipAppendStreamingAssetOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipCreateClipOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipCreateClipWithSignificantEventOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipFeedbackManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipFeedbackUploader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipFinalizeClipOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipImportMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipImportVideoSegmentMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipImporter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipOperationDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipSegmentMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipSignificantEventBulletin
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipUploadVideoSegmentOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipUploader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipUploaderFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipUserNotificationCenter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaDisableCameraMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaDisableCameraResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaEnableCameraMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaEnableCameraResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaServerNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraHomeSettingsConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSDeviceConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSDeviceConnectionReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSDeviceConnectionSender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSSessionHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSSessionInitiator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSSessionInviterDeviceVerifier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraIDSSessionReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraLocalStreamControlManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraLocalStreamSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraMediaConfigGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraMediaParameterSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraNetworkConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraParameterSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraPowerAssertionHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraProfileSettingsDerivedPropertiesModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraProfileSettingsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraProfileSettingsModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraProtocolParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAnalysisNode
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAudioBitRateMode
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAudioCodec
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAudioCodecConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAudioCodecParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingAudioSampleRate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingBulkSendListener
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingBulkSendSessionInitiator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingBulkSendSessionReader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingGeneralConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingH264Level
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingH264Profile
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingLoadBalancerDecision
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingManagerDependencyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingMediaContainer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingMediaContainerConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingMediaContainerParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingMetricUUIDUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingPreferredAudioConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingPreferredVideoConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingReachabilityEventManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingReachabilityEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSelectedConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionNotificationTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionRetryContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionSignificantEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionSignificantEventManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionTimelineManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionVariantFragmentManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSettingsControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSupportedAudioConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSupportedVideoConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingVideoAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingVideoCodec
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingVideoCodecConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingVideoCodecParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRemoteStreamControlManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRemoteStreamSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraRemoteStreamTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraResidentMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSessionID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSettingProactiveReader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventFaceClassification
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventFaceClassificationModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventFaceClassificationResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventFetchHeroFrameContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventListener
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventServer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventServerDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSRelay
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSRelayInitiator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSRelayReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSStream
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSStreamInitiator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotIDSStreamReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotLocal
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotManagerDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotMonitorEvents
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotNotificationTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotRemoteRelayReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotRemoteRelaySender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotRemoteRelayStream
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotRemoteStreamReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotRemoteStreamSender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotSender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotSessionID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamControlManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamControlMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamControlMessageHandlerDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamManagerSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamSessionID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamSnapshotCapture
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraStreamSnapshotHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraSupportedConfigurationCache
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraUserSettingsConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraVideoParameterCombination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraVideoParameterSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraVideoTier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCameraVideoTierParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCapabilityFlags
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicEventBaseModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicMonitorEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicReadWriteLogEventManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicResponseNotificationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicThresholdRangeEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicUpdateTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicValueUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicWriteActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicWriteRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicWriteTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCharacteristicsAvailabilityListener
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudChangeNode
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudGroupRootRecordModelObject
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudHomeManagerZoneChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudHomeZoneChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyHomeDataRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyHomeDataVersion3Record
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyMetadataRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyModelObject
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudMetadataZoneChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudPairedMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudPairedMetadataDiagnostics
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudPairedMetadataVersionConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudRecord
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudSharedGroupRootRecordModelObject
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCloudZoneInformationModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompanionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeBoolSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeLanguageSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeNumberSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingBoolValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingIntegerConstraint
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingLanguageValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingNumberValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingOperationResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingPrivileges
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingStringConstraint
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingStringValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingVersionValue
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsAccessorySettingsModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsKeyPathValueItem
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsLegacyDatabaseAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsZoneManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCompositeStringSetting
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationAddOnImpl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationLocalElectionMeshController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationLocalElectionMeshNode
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationPingCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationPingNotification
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationPingRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDCoordinationPingResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStream
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamBulkSendOpenSessionResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamBulkSendPendingSessionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamBulkSendProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamBulkSendSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamBulkSendSessionCandidate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamControlProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamFragment
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamFragmentAssembler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamFragmentChunk
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamFrameReader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamHAPPendingWrite
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamHAPSetupOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamHAPTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamMessageCoder
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamPendingEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamPendingRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamSetupOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamSocket
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamStreamProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamTCPSetupOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamTCPTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDataStreamTargetControlProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceDiscoveryOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceNotificationHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceNotificationHandlerDefaultDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceNotificationUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceRegistrationEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupClientSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupServerSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupSessionInternal
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupTrackingInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDonationHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDoorbellChimeController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDoorbellChimeControllerContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDurationEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDDynamicActivityAttributionPublisher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEndPointAddress
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventRouterTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerDependencyFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerExecutionSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDEventTriggerUserConfirmationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFaceprintModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFairPlaySAPSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFeatures
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedAccessorySettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedAccessorySettingsControllerKeyPathMapItem
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedAccessorySettingsControllerMutableKeyPathMap
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedSettingsDriverHomePodSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedSettingsDriverPreferences
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFetchedSettingsUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDFragmentationStreamTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDH264Level
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDH264Profile
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryLocalOperationTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryLocalReadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryLocalWriteTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryPrimaryResidentOperationTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryPrimaryResidentReadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryPrimaryResidentWriteTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryReaderWriterMetricHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteOperationTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteOperationWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteReadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteReadWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteWriteTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryRemoteWriteWithLocalFallbackTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryTask
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryTaskContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHAPMetadataModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHH2MigrationLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHPSAPIConformanceProviding
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHTTPClientMessageTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHTTPServerMessageTransport
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeAIHomePersonDataInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeAIPersonDataInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeAIPhotosPersonDataInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeAccessCodeModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeAssistantOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeDataPushDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeEventsGenerated
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeKitPersonDataInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeLightBrightnessLoggerEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeLocationData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeLockNotificationContextResolutionResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeManagerModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeNaturalLightingContextUpdater
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePeriodicReader
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePersonManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePresence
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePresenceMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePresenceRemote
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomePresenceUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeRemoteEventAccessController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeReprovisioningPendingInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeUpgradedToROAR
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeyAccessoryConfigureState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeyISOCredential
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHouseholdActivityLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDHouseholdDataEventCounterGroupSpecifier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDIDSActivityObserverModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDIDSMessageContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDIDSSendMessageOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLastEventStoreController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLegacyAccessorySettingsAdaptor
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLightProfileNaturalLightingActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLocationCluster
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLocationClusterGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLocationEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLocationTuple
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDLogEventWeekBasedFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMPCAssistantRemoteControlDestinationFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMPCResolveDestinationOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMPCSendMRCommandOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMPCSendMRCommandOperationDefaultExternalObjectInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMPCSessionData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMRAVEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMROutputDeviceStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMRSetEndpointVolumeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaAccessoryAdvertisement
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaAccessoryBrowseOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaAccessoryModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationBackingStoreHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerAggregateDataGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerBackingStoreHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerMetricsEventDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationManagerMetricsDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationsMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaEndpoint
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupSettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregateBackupMessageTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregateConsumer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregateData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregateDataGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregatorBackupSender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregatorMessenger
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsLocalDataStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsParticipantData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsUnconfiguredParticipantOnboardingManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaOutputDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaPlaybackActionAsCharacteristicWriteRequests
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaPlaybackActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaPropertyRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaPropertyResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaPropertyWriteRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaRoomGroupsDataGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaSessionRequestMessageInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaSessionState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaSystemModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaSystemModelExtended
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMediaSystemsAggregateDataGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMessageHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMessageHandlerMetricsDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMessageHandlerQueuedMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMetricsUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDModernTransportDeviceReachabilityObserverListenerContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDModernTransportMessageContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDModernTransportMessageContextOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDModernTransportMessageContextOptionsBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMultiUserSettingsMetricsEventDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableCameraRecordingSessionSignificantEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableCameraSignificantEventFaceClassification
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableHomeWalletKey
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableMediaGroupsAggregateData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableMediaGroupsParticipantData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDMutableNaturalLightingCurve
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNEHelperClient
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNaturalLightingActiveTransitionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNaturalLightingCurve
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNaturalLightingCurveWriter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNaturalLightingEnabledRetryContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterAccessViolation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterAccessViolationControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterAccessViolationControlOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterAccessViolationControlResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterAdvertisementProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientControlOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientControlOperationResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientControlResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientIdentifierList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatusControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatusControlOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatusIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatusIdentifierList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterClientStatusList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterControlOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterControlOperationStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterCredential
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterDynamicPortRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleAccessoryIdentifier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleCloudNetworkDeclarations
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleCloudZone
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleCloudZoneFetchInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleICMPType
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleLAN
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleLANDynamic
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleLANMulticast
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleLANStatic
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirror
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerClientState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerOverrideParser
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleManagerUtils
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleWAN
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleWANAddressRange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterFirewallRuleWANSubject
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterHomeKitOnlyFirewallConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterICMPType
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterICMPTypeList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterIPAddress
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterIPAddressList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterIPProtocolVersion
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterLANFirewall
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterLANFirewallConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterLANFirewallRuleList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterLANIdentifierList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterMulticastBridgingRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterProtocol
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterRuleDirection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterServiceType
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterStaticICMPRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterStaticPortRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANFirewall
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANFirewallConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANFirewallRuleList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANICMPRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANPortRule
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterWANStatusList
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNotificationRegistryCharacteristicsRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNotificationRegistryMediaPropertiesRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDNotificationRegistryRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDObsoleteUserModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDOutgoingHomeInvitationModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPBHomeLightBrightnessEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPacketizationMode
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPairedAccessoryInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPendingBulkSendListener
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPendingCharacteristic
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPendingResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPendingSocketRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPersonDataBatchChange
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPersonManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPersonModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPersonSettingsModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPhoneCallObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPhotoLibrary
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPhotoLibraryPerson
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPhotoLibraryPersonImporter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPhotosPersonManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPreferredMediaUserEventController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPresenceEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPrimaryElectionCoordinationAddOn
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPrimaryElectionFindPrimaryMeshOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPrimaryElectionMeshInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDPrimaryResidentCapabilitiesAggregator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRapportDeviceClientWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteAccountHandleMessageDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteAccountMessageDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteDestinationFormatter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteDeviceConfirmationHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteDeviceInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteDeviceMessageDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterAccessControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterAssertionController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProcessStateChangeAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoChangeRegistrationsResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoConnectMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoConnectResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoDisconnectMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoEventsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoFetchEventsMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoFetchEventsResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoFragmentedMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoKeepAliveMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoServerMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterProtoTopic
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterResidentClient
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterServer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterServerConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterServerMessageReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAnisetteDataHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAnisetteDataProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAuthenticationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAuthenticationResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginBase
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginCompanionAuthenticationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiator
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorAuthenticationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorCompanionAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorProxyAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginInitiatorSignoutSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginMessageSender
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginProxyAuthenticationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginProxyDeviceRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginProxyDeviceResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginReceiver
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginReceiverAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginReceiverCompanionAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginReceiverProxyAuthentication
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginReceiverSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginSignoutRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageSenderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageSerialization
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemotePersonDataMessenger
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteReadRequestMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemoteSendMessageOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRemovedUserAccessCodeModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDReselectedRTPParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDReselectedStreamConfigurationWrite
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDReselectedVideoParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentAppleMediaStateManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentCommunicationHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentDeviceElectionParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentDeviceModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentMesh
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentMeshMeshStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentMeshResidentStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentReachabilityState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDResidentUserModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRetailDemoModeRequestHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDRoomModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSRTPCryptoSuite
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSRTPParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteStream
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteStreamInternal
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSelectedAudioParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSelectedRTPParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSelectedSleepConfigurationTLV
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSelectedStreamConfigurationWrite
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSelectedVideoParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDServiceGroupModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDServiceNameComponents
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDServiceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSessionControl
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSettingAttachedSettingUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSettingMessageMapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSettingOnChangeAttachedUpdatesResult
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSettingSelectionItem
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSettingValueSelectionItem
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSetupEndPointRead
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSetupEndPointWrite
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSharedHomeModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSharedHomeUpdateSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDShortcutActionModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSignificantTimeEventModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriAccessoryInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriAccessoryMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointHAPSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileAccessorySettingFields
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileFields
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileMetricsDispatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointSessionStateTLV
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointSessionStateTypeWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointSettingsSyncManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriRemoteInputServer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriServer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSiriStreamStartEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSleepConfigurationOperationStatusWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSleepConfigurationOperationTypeWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSleepConfigurationWakePacketTypeWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSleepConfigurationWakeUpTypeWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotCATransactionHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotCacheEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotCacheRequestHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotCompletionTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotFile
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotLocalSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotRemoteSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotRequestHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotSessionApplicationID
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSnapshotSlotManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateDocumentationAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateDocumentationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStereoPairSettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStereoPairSettingsControllerStateManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStreamInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStreamingCapabilities
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStreamingManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDStreamingStatus
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSupportedAudioStreamConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSupportedRTPConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSupportedSiriAudioConfigurations
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSupportedSleepConfigurationTLV
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSupportedVideoStreamConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDSymptomContainer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTargetButtonConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTargetConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTargetControlManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTargetControllerManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDThreadNetworkMetadataStore
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTimeBasedFlagNameAndHomeSpecifier
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTimerTriggerModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTransientRuleManagerClient
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTriggerConfirmationTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDTriggerModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUIDialogPresenter
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUnpairedHAPAccessoryConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUnpairedHAPAccessoryPairingInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUnpairedHAPAccessoryProgressHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUpdater
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserAccessCodeModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareEstablishShareRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareRepairRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserManagementOperationModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserManagementOperationTimestamp
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPresence
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPresenceFeed
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPresenceFeedRetryTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPresenceFeedSession
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPresenceRegion
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserPushCache
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDUserSettingsPerHomeLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVendorDataManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVendorModelCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVendorModelEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoCodec
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoCodecConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoCodecParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoResolution
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoStreamConfig
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoStreamInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoStreamReconfigure
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDVideoStreamReconfigureEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWakeConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWakeConfigurationParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWakePacketConfigurationTLV
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchConnectivityLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchConnectivityLogEventManager
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchSync
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchSyncRetryContext
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWatchSyncState
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWiFiManagementController
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDWidgetFetchSpecification
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDXPCCachedResponseEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_HMDZoneModel
|| __DATA.__objc_data _OBJC_METACLASS_$_HMEraseAnisetteDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMEraseAnisetteDataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFConnectivityInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDCharacteristicMetadata
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFWoBLEInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFWoWLANInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFetchAnisetteDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMFetchAnisetteDataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMLegacyAnisetteDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMLegacyAnisetteDataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMMediaGroupProtoMediaParticipantData
|| __DATA.__objc_data _OBJC_METACLASS_$_HMProvisionAnisetteDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMProvisionAnisetteDataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_HMRemoteLoginMessage
|| __DATA.__objc_data _OBJC_METACLASS_$_HMSyncAnisetteDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_HMSyncAnisetteDataResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_ScanContext
|| __DATA.__objc_data _OBJC_METACLASS_$_THAButton
|| __DATA.__objc_data _OBJC_METACLASS_$_THAButtonEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_THAController
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDCameraPowerAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDCameraRemoteStreamTrackerAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDHTTPServerClientConnection
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDIDSProxyLinkPreferenceAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDNEHelperClientCacheEntry
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDPendingRegionUpdate
|| __DATA.__objc_data _OBJC_METACLASS_$__HMDSecureRemoteQueuedMessage
|| __DATA.__objc_data _OBJC_METACLASS_$___HMDPrimaryElectionCandidate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryNetworkProtectionReport._hadViolationsInLast24h
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryNetworkProtectionReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryNetworkProtectionReport._status
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryNetworkProtectionReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryNetworkProtectionReport._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._appIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._credentialType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._errorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isAdd
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isAddWithOwnershipProof
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isAddedViaWAC
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isBTOnboard
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isFirstHAPAccessoryInAnyHome
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isFirstHAPAccessoryInHome
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isNetworkRouterAdd
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isNetworkRouterReplace
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isNoeAccessory
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isNoeOnboard
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._isSecureWAC
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._noeCapabilities
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._noeOnboardDuration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._noeOnboardErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._noeOnboardErrorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._noeStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._retryCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryPairing._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._appIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._characteristics
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._clientMetricIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._consecutiveFailureCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isCached
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isNoeAccessory
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isRemote
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isRemoteAccessAllowed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isRemotelyReachable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isResidentAvailable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isSentOverNoe
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isTimedWrite
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._isWrite
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._primaryServiceType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._source
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._timeElapsedSinceFirstFailure
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._transaction
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._transportProtocolVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._underlyingErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._underlyingErrorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryReadWrite._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._actionType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._reason
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAccessoryRelaySetup._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._clientMetricIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._numAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._transaction
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitActionSetTriggered._triggerSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAddEventTrigger._eventTrigger
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAddEventTrigger._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAddEventTrigger._requestOrigin
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAddEventTrigger._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAddEventTrigger._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._isEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._numCapableAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._numEnabledAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._options
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitAssistantAccessControl._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._containerType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._didSucceed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._errorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKOperationZoneCompletionEvent._zoneType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKRebuildEvent._containerType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKRebuildEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKRebuildEvent._rebuildStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKRebuildEvent._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBackingStoreCKRebuildEvent._zoneType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventKeyGeneration._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventKeyGeneration._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventKeyGeneration._reason
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventKeyGeneration._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventKeyGeneration._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventReceived._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventReceived._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventReceived._isExpectedGSN
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventReceived._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitBroadcastEventReceived._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraConfigurationData._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraConfigurationData._homeConfigurations
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraConfigurationData._isDemoConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraConfigurationData._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraIDSSessionSetup._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraIDSSessionSetup._idsSessionInvitationReceived
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraIDSSessionSetup._idsSessionInvitationSent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraIDSSessionSetup._idsSessionStartedOnReceiver
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraIDSSessionSetup._idsSessionStartedOnResident
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._bitRate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._bytesRead
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._cameraUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._chunkSequenceNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._iFrameInterval
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._imageHeight
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._imageWidth
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._sequenceNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._sessionUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._status
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingBulkSendDataRead._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._cameraUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._recordingEventTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._sequenceNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._sessionUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingClipNotification._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._analysisResultCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._cameraUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._clipModelID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._recordingReason
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._sequenceNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._sessionUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingFragmentAnalyzed._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._clipModelUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._didCausePreviousClipToFinalizeBecauseMaxDurationExceeded
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._errorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._operationStartTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._operationType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._retryCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._runTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraRecordingUploadOperation._totalClipDuration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isInclusionZone
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isReachabilityNotificationEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isRecordingAudioEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isRecordingCapable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isRecordingEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._isSmartBulletinBoardNotificationEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._numActivityZonesBinString
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSettings._recordingEventTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._controllerMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._forNotification
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._idsSessionSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._isLocal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._phoneToWatch
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._receivedSnapshotFromAccessory
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._residentMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._residentToPhone
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._sentSnapshotRequestToAccessory
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._underlyingErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._underlyingErrorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshot._watchMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotIDSTransfer._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotIDSTransfer._receivedImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotIDSTransfer._sentImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotMessaging._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotMessaging._receivedSnapshotRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotMessaging._sentSnapshotRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraSnapshotMessaging._sentSnapshotResponse
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._controllerMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._idsSessionSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._initialConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._isLocal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._isStreamStarted
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._phoneIDSConnectionSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._receivedFirstFrame
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._reconfigurations
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._residentMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._resolutionCounts
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._resolutionOnClose
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._startupDelay
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._underlyingErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._underlyingErrorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._watchIDSConnectionSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStream._watchMessaging
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._audioCodec
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._cryptoSuite
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._framerate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._resolution
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamConfigure._sampleRate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetup._audioConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetup._keepaliveConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetup._videoConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetupParameters._connectionComplete
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetupParameters._connectionRequested
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamIDSConnSetupParameters._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._receivedConnSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._receivedNegotiationRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._receivedStartRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._sentConnSetup
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._sentNegotiationRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._sentNegotiationResponse
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._sentStartRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamMessaging._sentStartResponse
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamReconfigure._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamReconfigure._reconfigurationTimestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraStreamReconfigure._resolution
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraUserSettings._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraUserSettings._isImportingFromPhotoLibraryEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraUserSettings._isOwner
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCameraUserSettings._isSharingFaceClassificationsEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristic._characteristicType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristic._serviceType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristicEvent._containsValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristicEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristicThresholdEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristicThresholdEvent._maxPresent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCharacteristicThresholdEvent._minPresent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._dataSyncState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._fetchCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._hasDecryptionFailed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeDataMegabytesFetched
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeDataMegabytesPushed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeManagerFetchCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeManagerUploadCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeZoneFetchCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._homeZoneUploadCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._lastDecryptionFailed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._legacyHomeDataMegabytesFetched
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._legacyHomeDataMegabytesPushed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._pushCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._topErrors
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._topReasons
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._uploadCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._uploadErrorCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSync._uploadMaximumDelayReached
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSyncInfoTuple._count
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSyncInfoTuple._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitCloudSyncInfoTuple._value
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._databaseSize
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._hasActiveWatchDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._hasWatchDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._homeConfigurations
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._isDemoConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._isResidentCapable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._isResidentEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._metadataVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitConfigurationData._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDataModelMigration._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDataModelMigration._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDataModelMigration._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._containerType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._didSucceed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._errorDomain
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitDatabaseCKOperationCompletionEvent._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._activationState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._activationType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._containsRecurrences
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._events
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._executeOnce
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTrigger._predicate
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._calendarEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._charEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._charThresholdEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._durationEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._endEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._locationEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._presenceEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._significantTimeEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerEvent._thresholdEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._endEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._executionState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerExecutionSession._triggerEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationReceiverSession._userResponseDelay
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationSend._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationSend._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationSend._sessionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventTriggerUserConfirmationSend._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._acceptedXPCRequestsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._activeDay
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._activeDaysPerMonthCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._averageSampledProcessMemoryUsage
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._dataSyncState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._erroredXPCRequestsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._filteredXPCNotificationsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapBTLEConnectionPerReasonsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapBTLEConnectionsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapBTLEDiscoveriesCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapIPInvalidationCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapIPReceivedHTTPEventCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapIPReceivedHTTPResponsesCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._hapIPSentHTTPRequestsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._jetsamReasonHighwaterCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._jetsamReasonOtherCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._jetsamReasonProcessLimitCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._jetsamReasonUnknownKillCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._peakSampledProcessMemoryUsage
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._processLaunchCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._processMemoryPressureStateCriticalCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._processMemoryPressureStateWarningCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._remoteMessagesReceivedCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._remoteMessagesSentCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._sentXPCNotificationsCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitEventsAggregationReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHAPService._serviceType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._enabledResidentsDeviceCapabilities
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._homeKitCameraSettings
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._homeKitCameraUserSettings
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._isFaceClassificationEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeCameraConfigurations._isOwner
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._autoThirdPartyJetEnable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._currentMediaAccessoryFallbackMediaUserType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._enabledResidentsDeviceCapabilities
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._eventTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._firstHAPAccessoryAddedCohortWeek
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._hapServicesListCertifieds
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._hapServicesLists
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._homeCreationCohortWeek
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._homeCreationMonth
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._homeCreationYear
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._homeKitMultiUserSettings
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._homepodSynchLatency
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._isOwner
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._isPrimaryResident
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._isResidentAvailable
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._networkProtectionStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionAutoFullAccess
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionAutoProtectedHomeKitLAN
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionAutoProtectedMainLAN
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionFullAccess
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionHomeKitOnly
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesNetworkProtectionUnprotected
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoriesWiFiPPSKCredential
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAccessoryServiceGroups
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAdmins
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAppleAudioAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAppleMediaAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAppleTV4K2ndGenAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numAppleTVAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numBSPs
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numBridgedAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numBridgedTargetControllers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesReachabilityNotificationEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesRecordingAudioEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesRecordingEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesSmartBulletinNotificationEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesSupportRecording
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCameraAccessoriesWithActivityZonesEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCertifiedAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCertifiedBridgedTargetControllers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numCertifiedTargetControllers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numConfiguredScenes
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numEventTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPBLEAccessoriesSupportJet
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPBTAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPBatteryServiceAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPIPAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPIPAccessoriesSupportJet
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPNoeAccessoriesSupportJet
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHAPSpeakerServiceAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numHomePods
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numLightProfilesWithNaturalLightingEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numLightProfilesWithNaturalLightingSupported
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numLightProfilesWithNaturalLightingUsed
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numMediaSystems
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numMoe1Accessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numMoe2Accessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeBRCap
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeBRs
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeFullCap
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeMinCap
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeRoutCap
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNoeSleepCap
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numNotCertifiedAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numOfNonAcceptedParticipantsWithKnownCapability
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numOfParticipantsHaveAccepted
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numOfParticipantsHaveCloudShareIDAndHaveAccepted
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numOfParticipantsHaveCloudShareIDButNotAccepted
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numPoe2Count
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numPoeCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numPrimaryHAPSpeakerServiceAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numResidentsEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numRooms
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numScenes
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numServices
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numShortcuts
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numTargetControllers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numTelevisionAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numTimerTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numTriggerOwnedConfiguredScenes
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numTriggers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numUsers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numWholeHouseAudioAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numWoLAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._numZones
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._primaryHAPServicesListCertifieds
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._primaryHAPServicesLists
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeConfiguration._primaryReportingDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeSharing._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeSharing._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeSharing._responseType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeSharing._stage
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitHomeSharing._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitLocationEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitLocationEvent._notifyOnEntry
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitLocationEvent._notifyOnExit
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._nearestLOI
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._numIterationToConverge
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._rawLocations
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._selectedHomeLocation
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageHomeLocationReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._accuracy
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._latitude
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._longitude
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._numOfReachableBTLEAcc
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._numOfReachableIPAcc
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageLocation._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._direction
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._identifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._isSecure
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._messageName
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._messageType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._payloadSize
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._transactionID
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMessageTransported._transport
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettings._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettings._homeKitMultiUserSettingsValuesByKeyPaths
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettings._isOwner
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettingsValueByKeyPath._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettingsValueByKeyPath._homeKitMultiUserSettingsValueData
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettingsValueByKeyPath._homeKitMultiUserSettingsValueInteger
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettingsValueByKeyPath._homeKitMultiUserSettingsValueString
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitMultiUserSettingsValueByKeyPath._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitNetworkProtectionReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitNetworkProtectionReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._containsCalendarTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._containsCharacteristicValue
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._containsSignificantTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._containsSignificantTimeOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPredicate._presenceEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceEvent._presenceEventGranularity
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceEvent._presenceEventType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._numPresenceAuthUsers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._numPresenceRegionValidUsers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._numUsers
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._primaryResident
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceRegion._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._authStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._computeStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._direction
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._reason
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitPresenceReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitProcessMemoryPressureEvent._dataSyncState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitProcessMemoryPressureEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitProcessMemoryPressureEvent._processMemoryState
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitProcessMemoryPressureEvent._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._actionType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._statusCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRelaySession._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._delay
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._loginType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._requester
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogin._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogout._delay
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogout._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogout._requester
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogout._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteLogout._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._closeReason
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._deviceType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._role
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitRemoteSession._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitResetConfiguration._errorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitResetConfiguration._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitResetConfiguration._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSignificantTimeEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSignificantTimeEvent._offsetPresent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSignificantTimeEvent._significantEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._actionType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._clientMetricIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._currentConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._lastSyncedConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._numEntities
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._numFailures
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._numIncompleteOperations
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._outcome
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._serverConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriCommand._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._currentConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._lastSyncedConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._reasons
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._serverConfigurationVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSiriSync._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateAutomaticUpdateToggled._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateAutomaticUpdateToggled._isEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateAutomaticUpdateToggled._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._source
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateFetched._wasNewUpdateFetched
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateStarted._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateStarted._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateStarted._isAutomaticUpdateEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateStarted._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitSoftwareUpdateStarted._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._command
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerCommand._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._certified
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._error
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._transportType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitTargetControllerError._vendorDetails
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUpdateEventTrigger._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUpdateEventTrigger._requestOrigin
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUpdateEventTrigger._resultErrorCode
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUpdateEventTrigger._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUpdateEventTrigger._updateType
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceAuthorization._auth
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceAuthorization._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceAuthorization._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceCompute._compute
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceCompute._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitUserPresenceCompute._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._boolVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._dataVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._doubleVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._floatVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._intVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitValue._stringVal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._category
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._firmwareVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._manufacturer
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._model
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._name
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVendorInformation._productData
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVideoResolutionCount._count
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVideoResolutionCount._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitVideoResolutionCount._resolution
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHAAccessControl._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHAAccessControl._isP2PEnabled
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHAAccessControl._isPasswordSet
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHAAccessControl._privilegeLevel
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHAAccessControl._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHASetting._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHASetting._keyPath
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHASetting._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWHASetting._value
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWatchCompanionConnectivityReport._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWatchCompanionConnectivityReport._numWatchAddEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWatchCompanionConnectivityReport._numWatchRemoveEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWatchCompanionConnectivityReport._reportComplete
|| __DATA.__objc_ivar _OBJC_IVAR_$_AWDHomeKitWatchCompanionConnectivityReport._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessory._accessoryProfiles
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessory._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessory._primary
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessory._reachable
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessory._remotelyReachable
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryBrowserInjectedSettingsDevice._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryBundle.accessory
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryBundle.context
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryPairingLogEventStateManager._accessoryPairingProgressStateTrackerLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryPairingLogEventStateManager._accessoryPairingRetryMapLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryPairingProgressStateMap._accessoryPairingProgressStateMapLock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessoryProfile._msgDispatcher
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessorySetting._name
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessorySetting._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDAccessorySetting._value
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDBackingStoreModelObject._reserved
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCAMDBlockManager._blockHandlerMap
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCAMDBlockManager._blockQueue
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCAMDBlockManager._service
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCAMDEmbeddedDevice._classInstances
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._byteLength
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._byteOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._height
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._timeOffset
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipSegmentMetadata._width
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipsQuotaDisableCameraMessage._zoneName
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraClipsQuotaEnableCameraMessage._zoneName
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraNetworkConfig._ipv4SockAddress
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCameraNetworkConfig._ipv6SockAddress
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDCharacteristicReadWriteLogEventManager._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceController._device
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceController._identifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceController._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceDiscoveryOperation._devices
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceDiscoveryOperation._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceDiscoveryOperation._operation
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceDiscoveryOperation._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDDeviceSetupSessionInternal._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHAPAccessoryTaskTracker._currentTaskIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHAPAccessoryTaskTracker._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHAPMetricsLogEvent._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._UUIDsOfRemovedHomes
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._accessAllowedWhenLocked
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._accessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._account
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._applicationData
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._cloudZones
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._currentDevice
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._dataTag
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._dataVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._demoAccessories
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._demoFinalized
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._homes
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._incomingInvitations
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._lastCurrentHomeUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._pendingReasonSaved
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._pendingUserManagementOperations
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._primaryHomeUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._remoteAccounts
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._residentEnabledState
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._schemaVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeData._unprocessedOperationIdentifiers
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDHomeManagerXPCMessageSendPolicyParameters._active
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDIDSMessageTransport._service
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDMediaProfile._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDPBHomeLightBrightnessEvent._accessoryUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDPBHomeLightBrightnessEvent._brightness
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDPBHomeLightBrightnessEvent._characteristicUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDPBHomeLightBrightnessEvent._homeUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage._topicAdditions
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage._topicFilterAdditions
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage._topicFilterRemovals
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoChangeRegistrationsMessage._topicRemovals
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoChangeRegistrationsResponse._cachedEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._connectEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._routerVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._topicAdditions
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._topicFilterAdditions
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectMessage._unregisterEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoConnectResponse._cachedEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoEventsMessage._cachedEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoEventsMessage._events
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFetchEventsMessage._topics
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFetchEventsResponse._changedEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._fragmentData
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._fragmentNumber
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._routerVersion
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._totalFragments
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoFragmentedMessage._totalSize
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._changeRegistrations
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._connect
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._disconnect
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._fetchEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._identifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._keepAlive
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoMessage._request
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._changeRegistrationsResponse
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._connectResponse
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._identifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._message
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoServerMessage._updatedEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoTopic._eventUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteEventRouterProtoTopic._topic
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteMessagePolicy._allowsAnonymousMessage
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteMessagePolicy._requiresAccountMessage
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteMessagePolicy._requiresSecureMessage
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteMessagePolicy._roles
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDRemoteMessagePolicy._transportRestriction
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUnassociatedAccessory._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUnassociatedAccessory._uuid
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUser._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUser._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUser._remoteAccessAllowed
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUser._uuid
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUserMessagePolicy._homeUUID
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUserMessagePolicy._requiresCameraStreamingAccess
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUserMessagePolicy._requiresRemoteAccess
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDUserMessagePolicy._userPrivilege
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDWatchSyncState._syncs
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDXPCRequestTracker._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDXPCRequestTracker._queue
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMDXPCRequestTracker._timer
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMIdentifierSaltStore._lock
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMMediaGroupProtoMediaParticipantData._backupGroups
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMMediaGroupProtoMediaParticipantData._destination
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMMediaGroupProtoMediaParticipantData._destinationController
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBEncodeOption._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBEncodeOption._isSPI
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBEncodeOption._isXPC
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBMetadata._hapCategories
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBMetadata._hapCharacteristics
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBMetadata._hapServices
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBMetadata._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_HMPBMetadata._version
|| __DATA.__objc_ivar _OBJC_IVAR_$__HMDHTTPServerClientConnection._pendingTransactionCompletionHandlers
|| __DATA_CONST.__const _DYLDLaunchAssertion
|| __DATA_CONST.__const _HAPDefaultIPCameraDisconnectOnIdleTimeoutKey
|| __DATA_CONST.__const _HMAccessCodeManagerConfirmDataHasSyncedToResidentMessage
|| __DATA_CONST.__const _HMAccessoryPairingsAuditedTimestampCodingKey
|| __DATA_CONST.__const _HMAccessorySharedAdminAddedTimestampCodingKey
|| __DATA_CONST.__const _HMAssistantObjectAccessory
|| __DATA_CONST.__const _HMAssistantObjectAccessoryIdentifier
|| __DATA_CONST.__const _HMAssistantObjectAccessoryPrimaryServiceIdentifier
|| __DATA_CONST.__const _HMAssistantObjectAssociatedServiceType
|| __DATA_CONST.__const _HMAssistantObjectCharacteristics
|| __DATA_CONST.__const _HMAssistantObjectGroupIdentifiers
|| __DATA_CONST.__const _HMAssistantObjectGroupType
|| __DATA_CONST.__const _HMAssistantObjectGroups
|| __DATA_CONST.__const _HMAssistantObjectHashedRouteUID
|| __DATA_CONST.__const _HMAssistantObjectHome
|| __DATA_CONST.__const _HMAssistantObjectHomeIdentifier
|| __DATA_CONST.__const _HMAssistantObjectIdentifier
|| __DATA_CONST.__const _HMAssistantObjectName
|| __DATA_CONST.__const _HMAssistantObjectReference
|| __DATA_CONST.__const _HMAssistantObjectRelatedIdentifiers
|| __DATA_CONST.__const _HMAssistantObjectRoom
|| __DATA_CONST.__const _HMAssistantObjectRoomIdentifier
|| __DATA_CONST.__const _HMAssistantObjectSPIIdentifier
|| __DATA_CONST.__const _HMAssistantObjectSceneActions
|| __DATA_CONST.__const _HMAssistantObjectSceneType
|| __DATA_CONST.__const _HMAssistantObjectServiceSubType
|| __DATA_CONST.__const _HMAssistantObjectServiceType
|| __DATA_CONST.__const _HMAssistantObjectStatus
|| __DATA_CONST.__const _HMAssistantObjectType
|| __DATA_CONST.__const _HMAssistantObjectZoneIdentifiers
|| __DATA_CONST.__const _HMAssistantObjectZones
|| __DATA_CONST.__const _HMBaseJobIdentifierStringForTriggers
|| __DATA_CONST.__const _HMCharacteristicKeyPath
|| __DATA_CONST.__const _HMCharacteristicValueKeyPath
|| __DATA_CONST.__const _HMDATVSettingsFollowUpFinishSetupURLString
|| __DATA_CONST.__const _HMDATVSettingsFollowUpUpdateOSURLString
|| __DATA_CONST.__const _HMDAccessCodeManagerAccessoryReadWriteRetries
|| __DATA_CONST.__const _HMDAccessCodeManagerAccessoryReadWriteRetryTimeInterval
|| __DATA_CONST.__const _HMDAccessCodeManagerDataCleanUpCheckTimerInterval
|| __DATA_CONST.__const _HMDAccessCodeManagerIsDemoDataMockerEnabled
|| __DATA_CONST.__const _HMDAccessCodeManagerRemovedUserAccessCodeTimeToLive
|| __DATA_CONST.__const _HMDAccessCodeManagerResidentDataSyncVerificationRetries
|| __DATA_CONST.__const _HMDAccessCodeManagerResidentDataSyncVerificationRetryTimeInterval
|| __DATA_CONST.__const _HMDAccessoryAllowedHostsPreviewHelperCacheTimeout
|| __DATA_CONST.__const _HMDAccessoryBridgedAccessoryAddedNotification
|| __DATA_CONST.__const _HMDAccessoryBridgedAccessoryRemovedNotification
|| __DATA_CONST.__const _HMDAccessoryBridgedAccessoryUUIDKey
|| __DATA_CONST.__const _HMDAccessoryCHIPStorageIsLocalChangeNotificationKey
|| __DATA_CONST.__const _HMDAccessoryCHIPStorageUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryCharacteristicsChangedNotificationKey
|| __DATA_CONST.__const _HMDAccessoryCharacteristicsResponseReceivedNotification
|| __DATA_CONST.__const _HMDAccessoryConfigNumberUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryConfiguredNetworkProtectionGroupUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryConfiguredNotification
|| __DATA_CONST.__const _HMDAccessoryConnectedNotification
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsDataStreamDataKey
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsDataStreamDataSequenceNumberKey
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsDataStreamFileType
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsDataStreamMetadataKey
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsDataStreamUrlParametersKey
|| __DATA_CONST.__const _HMDAccessoryDiagnosticsTransferTransportDataStream
|| __DATA_CONST.__const _HMDAccessoryDisconnectedNotification
|| __DATA_CONST.__const _HMDAccessoryDoesSupportBulkSendDataStreamNotification
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateApplyNotReadyReasonsChangedNotification
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateClientIdentifierKey
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateHasHandledFirmwareVersionUpdatedNotificationKey
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdatePolicyStatusChangedKey
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdatePolicyStatusChangedNotification
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateStagingNotReadyReasonsChangedNotification
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateStateChangedNotification
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateStateKey
|| __DATA_CONST.__const _HMDAccessoryFirmwareUpdateTimeWindowFormat
|| __DATA_CONST.__const _HMDAccessoryFirmwareVersionUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryHAPConnectedNotification
|| __DATA_CONST.__const _HMDAccessoryHAPDisconnectedNotification
|| __DATA_CONST.__const _HMDAccessoryInitialCategoryUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryInitialManufacturerUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryIsNotReachableNotification
|| __DATA_CONST.__const _HMDAccessoryIsNotRemotelyReachableNotification
|| __DATA_CONST.__const _HMDAccessoryIsReachableNotification
|| __DATA_CONST.__const _HMDAccessoryIsRemotelyReachableNotification
|| __DATA_CONST.__const _HMDAccessoryNameUpdatedNotification
|| __DATA_CONST.__const _HMDAccessoryNetworkProtectionGroupCategoryCodingKey
|| __DATA_CONST.__const _HMDAccessoryNetworkProtectionGroupProtectionModeActivated
|| __DATA_CONST.__const _HMDAccessoryNetworkProtectionGroupProtectionModeDeactivated
|| __DATA_CONST.__const _HMDAccessoryNetworkProtectionGroupProtectionModeUpdated
|| __DATA_CONST.__const _HMDAccessoryNotificationKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryCategoryKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryCertificationStatusKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryCommunicationProtocolKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryFirmwareVersionKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryManufacturerKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryModelKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryProductDataKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAccessoryTransportTypeKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAppIdentifierKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventAuthenticationMethodKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventDurationKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventErrorCodeKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventErrorDomainKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventFirstHAPAccessoryForUserKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventFirstHAPAccessoryInHomeKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsAddKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsAddedViaLegacyWACKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsAddedViaSecureWACKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsAddedWithWACOwnershipProofKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsNetworkRouterReplaceKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventIsThreadAccessoryKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventLastStateKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventLongestStateDurationKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventLongestStateKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventRetryCountKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadCapabilitiesKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadCommissioningErrorCodeKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadCommissioningErrorDomainKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadOnboardDurationKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadOnboardIsBTCommissionedKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventThreadStatusKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventUnderlyingErrorCodeKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventUnderlyingErrorDomainKey
|| __DATA_CONST.__const _HMDAccessoryPairingEventUsedWifiPPSKKey
|| __DATA_CONST.__const _HMDAccessoryPreviousConfiguredNetworkProtectionGroupUUIDKey
|| __DATA_CONST.__const _HMDAccessoryPreviousFirmwareVersionKey
|| __DATA_CONST.__const _HMDAccessoryProfileAddedNotification
|| __DATA_CONST.__const _HMDAccessoryProgressStateNotificationKey
|| __DATA_CONST.__const _HMDAccessoryProgressStateTimeNotificationKey
|| __DATA_CONST.__const _HMDAccessoryProgressStateUpdateNotification
|| __DATA_CONST.__const _HMDAccessoryProgressStateforAccessoryKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryBatteryPoweredKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryBridgedKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryCategoryKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryFirmwareVersionKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryManufacturerKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryModelKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventAccessoryNumberKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventBatteryLowKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventChangeCountKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventDurationKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventHasAdvertisementKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventProtocolKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventProtocolVersionKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventReachableDurationKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventReachableKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventReasonKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventTransportKey
|| __DATA_CONST.__const _HMDAccessoryReachabilityChangedLogEventUnreachableDurationKey
|| __DATA_CONST.__const _HMDAccessoryResidentReachabilityNotificationDisableAccessoryUUIDsMessageKey
|| __DATA_CONST.__const _HMDAccessoryResidentReachabilityNotificationEnableAccessoryUUIDsMessageKey
|| __DATA_CONST.__const _HMDAccessoryResidentReachabilityNotificationRegistrationMessage
|| __DATA_CONST.__const _HMDAccessoryResidentReachabilityNotificationUserIDMessageKey
|| __DATA_CONST.__const _HMDAccessorySPIClientIdentifierKey
|| __DATA_CONST.__const _HMDAccessoryServiceAddedNotification
|| __DATA_CONST.__const _HMDAccessorySettingConfigurationVersion
|| __DATA_CONST.__const _HMDAccessorySettingValueUpdated
|| __DATA_CONST.__const _HMDAccessorySettingsControllerSettingsUpdateNotification
|| __DATA_CONST.__const _HMDAccessorySettingsControllerSettingsUpdateNotificationSettingKeyPathCodingKey
|| __DATA_CONST.__const _HMDAccessorySettingsControllerSettingsUpdateNotificationSettingValueCodingKey
|| __DATA_CONST.__const _HMDAccessorySettingsSiriAvailableLanguagesKeyPath
|| __DATA_CONST.__const _HMDAccessorySetupHostViewControllerClassName
|| __DATA_CONST.__const _HMDAccessorySiriEndpointServiceAddedNotification
|| __DATA_CONST.__const _HMDAccessorySoftwareUpdateLabel
|| __DATA_CONST.__const _HMDAccessoryStagedFirmwareVersionChangedNotification
|| __DATA_CONST.__const _HMDAccessorySupportsAccessCodeDidChangeNotification
|| __DATA_CONST.__const _HMDAccessorySupportsWalletKeyDidChangeNotification
|| __DATA_CONST.__const _HMDAccessoryUnconfiguredNotification
|| __DATA_CONST.__const _HMDAccessoryUpdateAccessoryLabel
|| __DATA_CONST.__const _HMDAccessoryWakeNotificationStarted
|| __DATA_CONST.__const _HMDAccountAddedDeviceNotification
|| __DATA_CONST.__const _HMDAccountHandlesUpdatedNotification
|| __DATA_CONST.__const _HMDAccountNotificationKey
|| __DATA_CONST.__const _HMDAccountRegistryAddedAccountNotification
|| __DATA_CONST.__const _HMDAccountRegistryRemovedAccountNotification
|| __DATA_CONST.__const _HMDAccountRemovedDeviceNotification
|| __DATA_CONST.__const _HMDActionSetNotificationKey
|| __DATA_CONST.__const _HMDAggregateRemoteMessageCountersLogEventMetricName
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventAccessoriesAddedCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventActiveDayMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventActiveDaysBitFieldMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventActiveDaysPerMonthCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventCameraStreamStartFailureCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventCameraStreamStartSuccessCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventDaysSinceLastActiveCountKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventFetchCameraClipVideoSegmentsAssetCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventFirstPartyReadCountCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventFirstPartyWriteCountCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventScenesAddedCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventScenesRunCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventShortcutsAddedCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventShortcutsRunCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventSiriReadCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventSiriWriteCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventThirdPartyReadCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventThirdPartyWriteCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventTriggersAddedCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisLogEventTriggersRunCountMetricKey
|| __DATA_CONST.__const _HMDAggregationAnalysisRadarDialogCloudSyncMBThreshold
|| __DATA_CONST.__const _HMDAggregationAnalysisRadarDialogRemoteMessageThreshold
|| __DATA_CONST.__const _HMDAirplayEnabledCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDAppleAccessoryManufacturer
|| __DATA_CONST.__const _HMDAppleAccountManagerAccountModified
|| __DATA_CONST.__const _HMDAppleAccountManagerAccountUpdated
|| __DATA_CONST.__const _HMDAppleAccountManagerCurrentDeviceIRKUpdated
|| __DATA_CONST.__const _HMDAppleAccountManagerDeviceIRKNotificationKey
|| __DATA_CONST.__const _HMDAppleAccountManagerDeviceUpdated
|| __DATA_CONST.__const _HMDAppleAccountManagerResolved
|| __DATA_CONST.__const _HMDAppleAccountSettingsHomeStateUpdatedNotification
|| __DATA_CONST.__const _HMDAppleAccountSettingsKeychainSyncStateUpdatedNotificationKey
|| __DATA_CONST.__const _HMDAppleAccountSettingsUpdatedNotification
|| __DATA_CONST.__const _HMDAppleMediaAccessoriesStateMessengerTargetNameSpace
|| __DATA_CONST.__const _HMDAppleMediaAccessoryDeviceIsReachableNotification
|| __DATA_CONST.__const _HMDAppleMediaAccessoryDeviceUpdatedNotification
|| __DATA_CONST.__const _HMDAppleMediaAccessoryLanguagesChangedNotification
|| __DATA_CONST.__const _HMDAppleMediaAccessorySoftwareUpdateLabel
|| __DATA_CONST.__const _HMDAppleMediaAccessorySoftwareVersionUpdatedNotificationKey
|| __DATA_CONST.__const _HMDAppleMediaAccessoryWiFiMACLocalOnlyUpdateLabel
|| __DATA_CONST.__const _HMDAppleMediaAccessoryWiFiNetworkInfoUpdateLabel
|| __DATA_CONST.__const _HMDAppleMediaAccessoryWiFiNetworkInfoUpdatedNotification
|| __DATA_CONST.__const _HMDApplicationEntitlementString
|| __DATA_CONST.__const _HMDApplicationInstalledNotification
|| __DATA_CONST.__const _HMDApplicationLegacyPrivateEntitlementString
|| __DATA_CONST.__const _HMDApplicationPrivateEntitlementString
|| __DATA_CONST.__const _HMDApplicationUninstalledNotification
|| __DATA_CONST.__const _HMDBackboardServicesRelaunchNotification
|| __DATA_CONST.__const _HMDBackgroundTaskManagerIdentifierKey
|| __DATA_CONST.__const _HMDBackgroundTaskManagerNotificationName
|| __DATA_CONST.__const _HMDBackingStoreArchiveIdentifierKey
|| __DATA_CONST.__const _HMDBackingStoreLocalDataReset
|| __DATA_CONST.__const _HMDBiomeDidMigrateFromDuetPreferenceKey
|| __DATA_CONST.__const _HMDBiomeMediaAccessoryEventAccessoryStateMuteKey
|| __DATA_CONST.__const _HMDBiomeMediaAccessoryEventAccessoryStatePlaybackStateKey
|| __DATA_CONST.__const _HMDBiomeMediaAccessoryEventAccessoryStateVolumeKey
|| __DATA_CONST.__const _HMDBonjourBrowserBonjourSleepProxyServiceDomain
|| __DATA_CONST.__const _HMDBonjourBrowserMeshcopServiceDomain
|| __DATA_CONST.__const _HMDBridgedAccessoryReachableNotification
|| __DATA_CONST.__const _HMDBridgedAccessoryUnreachableNotification
|| __DATA_CONST.__const _HMDBulletinAccessoryContextKey
|| __DATA_CONST.__const _HMDBulletinActionButtonActionDescriptionKey
|| __DATA_CONST.__const _HMDBulletinActionButtonCategoryKey
|| __DATA_CONST.__const _HMDBulletinActionCategoryIDKey
|| __DATA_CONST.__const _HMDBulletinActionDismissButtonKey
|| __DATA_CONST.__const _HMDBulletinActionGlyphBubble
|| __DATA_CONST.__const _HMDBulletinActionGlyphCheckMark
|| __DATA_CONST.__const _HMDBulletinActionGlyphXMark
|| __DATA_CONST.__const _HMDBulletinActionIDDismissButton
|| __DATA_CONST.__const _HMDBulletinActionIDMicroButton
|| __DATA_CONST.__const _HMDBulletinActionProvideCameraRecordingFeedback
|| __DATA_CONST.__const _HMDBulletinActionTriggerConfirmDoNotExecute
|| __DATA_CONST.__const _HMDBulletinActionTriggerConfirmExecute
|| __DATA_CONST.__const _HMDBulletinBoardFileExtensionJPG
|| __DATA_CONST.__const _HMDBulletinBoardNotificationsAccessoryUUIDKey
|| __DATA_CONST.__const _HMDBulletinBoardNotificationsEnabledKey
|| __DATA_CONST.__const _HMDBulletinBoardNotificationsPredicateKey
|| __DATA_CONST.__const _HMDBulletinBoardNotificationsServiceInstanceIDKey
|| __DATA_CONST.__const _HMDBulletinBundleIdentifier
|| __DATA_CONST.__const _HMDBulletinCategoryDoorsIdentifier
|| __DATA_CONST.__const _HMDBulletinCategoryFirmwareUpdate
|| __DATA_CONST.__const _HMDBulletinCategoryIncomingInvitation
|| __DATA_CONST.__const _HMDBulletinCategoryLocksIdentifier
|| __DATA_CONST.__const _HMDBulletinCategoryNormalType
|| __DATA_CONST.__const _HMDBulletinCategoryProvideCameraRecordingFeedback
|| __DATA_CONST.__const _HMDBulletinCategorySecureTrigger
|| __DATA_CONST.__const _HMDBulletinCategorySecuritySystemsIdentifier
|| __DATA_CONST.__const _HMDBulletinCategorySuppressNotificationOnWatch
|| __DATA_CONST.__const _HMDBulletinCategoryWindowsIdentifier
|| __DATA_CONST.__const _HMDBulletinChangeAccessCodeHomeAppCustomURLFormat
|| __DATA_CONST.__const _HMDBulletinCharacteristicContextKey
|| __DATA_CONST.__const _HMDBulletinCharacteristicTypeContextKey
|| __DATA_CONST.__const _HMDBulletinCharacteristicValueContextKey
|| __DATA_CONST.__const _HMDBulletinCharacteristicValueUpdatedTimeContextKey
|| __DATA_CONST.__const _HMDBulletinContextDidDetectedPerson
|| __DATA_CONST.__const _HMDBulletinContextStateNumberKey
|| __DATA_CONST.__const _HMDBulletinHomeContextKey
|| __DATA_CONST.__const _HMDBulletinHomeIncomingInvitationContextKey
|| __DATA_CONST.__const _HMDBulletinInternalContextHomeUUIDKey
|| __DATA_CONST.__const _HMDBulletinInternalContextTriggerUUIDKey
|| __DATA_CONST.__const _HMDBulletinLockOnboardingHomeAppCustomURLFormat
|| __DATA_CONST.__const _HMDBulletinLockOnboardingIdentifierSuffix
|| __DATA_CONST.__const _HMDBulletinLockOnboardingKeyTypeAll
|| __DATA_CONST.__const _HMDBulletinLockOnboardingKeyTypePinCode
|| __DATA_CONST.__const _HMDBulletinLockOnboardingKeyTypeWalletKey
|| __DATA_CONST.__const _HMDBulletinLongLookCategoryID
|| __DATA_CONST.__const _HMDBulletinRequestsCodingKey
|| __DATA_CONST.__const _HMDBulletinServiceContextKey
|| __DATA_CONST.__const _HMDBulletinServiceTypeContextKey
|| __DATA_CONST.__const _HMDBulletinTriggerContextKey
|| __DATA_CONST.__const _HMDBulletinWalletKeyExpressModeSetUpHomeAppCustomURLFormat
|| __DATA_CONST.__const _HMDCameraAnalysisStatePublisherStateUpdateMessage
|| __DATA_CONST.__const _HMDCameraAnalysisStatePublisherStateUpdateMessageKey
|| __DATA_CONST.__const _HMDCameraClipAddSignificantEventOperationAssetItemTypeHint
|| __DATA_CONST.__const _HMDCameraClipFeedbackFindAndUploadSubmittedClipsMessage
|| __DATA_CONST.__const _HMDCameraClipManagerMaxClipDurationPreferenceKey
|| __DATA_CONST.__const _HMDCameraClipManagerMessageKeyFaceMisclassificationFaceCropData
|| __DATA_CONST.__const _HMDCameraClipManagerMessageKeyFaceMisclassificationPersonManagerUUID
|| __DATA_CONST.__const _HMDCameraClipManagerMessageKeyFaceMisclassificationPersonUUID
|| __DATA_CONST.__const _HMDCameraClipManagerRemoteHandleFaceMisclassificationMessage
|| __DATA_CONST.__const _HMDCameraClipManagerRequestLogEventFetchVideoSegmentsAssetRequestName
|| __DATA_CONST.__const _HMDCameraClipsCloudContainerIdentifier
|| __DATA_CONST.__const _HMDCameraClipsCloudContainerSourceApplicationBundleIdentifier
|| __DATA_CONST.__const _HMDCameraClipsQuotaErrorDomain
|| __DATA_CONST.__const _HMDCameraClipsQuotaFunctionNameDisableCamera
|| __DATA_CONST.__const _HMDCameraClipsQuotaFunctionNameEnableCamera
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerErrorDomain
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationFunctionNameAllCamerasDisabled
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationKeyContainerIdentifier
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationKeyFunctionName
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationKeyPayload
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationKeyRequestID
|| __DATA_CONST.__const _HMDCameraClipsQuotaServerNotificationKeyUserDSID
|| __DATA_CONST.__const _HMDCameraClipsQuotaServiceName
|| __DATA_CONST.__const _HMDCameraClipsZoneNamePrefix
|| __DATA_CONST.__const _HMDCameraEncodedSignificantEventDataMessageKey
|| __DATA_CONST.__const _HMDCameraNotificationSettingsAccessoryUUIDKey
|| __DATA_CONST.__const _HMDCameraNotificationSettingsKey
|| __DATA_CONST.__const _HMDCameraProfileSettingsDidChangeNotification
|| __DATA_CONST.__const _HMDCameraProfileSettingsDidWriteToAccessoryNotification
|| __DATA_CONST.__const _HMDCameraProfileSettingsIsInitialSettingsUpdateNotificationKey
|| __DATA_CONST.__const _HMDCameraProfileSettingsNotificationKey
|| __DATA_CONST.__const _HMDCameraProfileSettingsZoneNamePrefix
|| __DATA_CONST.__const _HMDCameraProfileUnconfiguredNotification
|| __DATA_CONST.__const _HMDCameraReachabilityChangeReachableDebounceTimeout
|| __DATA_CONST.__const _HMDCameraReachabilityChangeUnreachableDebounceTimeout
|| __DATA_CONST.__const _HMDCameraRecordingBulkDataStreamFileType
|| __DATA_CONST.__const _HMDCameraRecordingBulkSendSessionOpenReasonRecord
|| __DATA_CONST.__const _HMDCameraRecordingBulkSendSessionOpenReasonVideoAnalysis
|| __DATA_CONST.__const _HMDCameraRecordingBulkSendSessionReadTimeoutFactorPreferenceKey
|| __DATA_CONST.__const _HMDCameraRecordingHomePresenceByPairingIdentity
|| __DATA_CONST.__const _HMDCameraRecordingManagerAccessorySessionRestoreClientName
|| __DATA_CONST.__const _HMDCameraRecordingMetricNumberOfActiveRecordingSessionsKey
|| __DATA_CONST.__const _HMDCameraRecordingMetricNumberOfJobSlotsKey
|| __DATA_CONST.__const _HMDCameraRecordingMetricNumberOfPartialJobSlotsKey
|| __DATA_CONST.__const _HMDCameraRecordingMetricReadyToRecordByCameraUUIDStringKey
|| __DATA_CONST.__const _HMDCameraRecordingMetricRecordingSessionSummariesByCameraUUIDStringKey
|| __DATA_CONST.__const _HMDCameraRecordingMetricSystemResourceUsageLevelKey
|| __DATA_CONST.__const _HMDCameraRecordingNotificationTriggerType
|| __DATA_CONST.__const _HMDCameraRecordingSessionInitialRetryInterval
|| __DATA_CONST.__const _HMDCameraRecordingSessionMaxRetryInterval
|| __DATA_CONST.__const _HMDCameraSignificantEventDidOccurMessage
|| __DATA_CONST.__const _HMDCameraSignificantEventFaceClassificationCodingKeyPersonManagerUUID
|| __DATA_CONST.__const _HMDCameraSignificantEventFaceClassificationCodingKeyPersonName
|| __DATA_CONST.__const _HMDCameraSignificantEventFaceClassificationCodingKeyPersonUUID
|| __DATA_CONST.__const _HMDCameraSignificantEventFaceClassificationCodingKeyUUID
|| __DATA_CONST.__const _HMDCameraSignificantEventFaceClassificationCodingKeyUnassociatedFaceCropUUID
|| __DATA_CONST.__const _HMDCameraSignificantEventFetchHeroFrameMessage
|| __DATA_CONST.__const _HMDCameraSignificantEventNotificationClipReferenceKey
|| __DATA_CONST.__const _HMDCameraSignificantEventNotificationFaceCropAssetKey
|| __DATA_CONST.__const _HMDCameraSignificantEventNotificationHeroFrameAssetKey
|| __DATA_CONST.__const _HMDCameraSignificantEventNotificationUUIDMessageKey
|| __DATA_CONST.__const _HMDCharacteristicLocalNotificationRegistrationIdentifierPrefix
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryCategoryKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryCertificationStatusKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryFirmwareVersionKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryManufacturerKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryModelKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryPrimaryServiceTypeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAccessoryUUIDKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventAppIdentifierKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventClientMetricIdentifierKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventCommunicationProtocolKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventConsecutiveFailureCountKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventDurationKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventErrorCodeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventErrorDomainKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsCachedKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsCurrentDeviceAvailableResidentKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsCurrentDeviceConfirmedPrimaryResidentKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsCurrentDevicePrimaryResidentKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsDeviceAtHomeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsModernTransportKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsPrimaryResidentReachableKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsRemoteAccessAllowedKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsRemoteKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsRemotelyReachableKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsResidentAvailableKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsSentOverThreadKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsSlowRapportKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsThreadAccessoryKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsTimedWriteKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventIsWriteKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventLocalDurationKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventReasonKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventResidentFirstDurationKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventResidentFirstErrorCodeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventResidentFirstErrorDomainKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventSourceKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventTimeElapsedSinceFirstFailureKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventTransportProtocolVersionKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventTransportTypeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventUnderlyingErrorCodeKey
|| __DATA_CONST.__const _HMDCharacteristicReadWriteLogEventUnderlyingErrorDomainKey
|| __DATA_CONST.__const _HMDCharacteristicTypeAccessCodeControlPoint
|| __DATA_CONST.__const _HMDCharacteristicTypeAccessCodeSupportedConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeAccessoryFlags
|| __DATA_CONST.__const _HMDCharacteristicTypeActivityInterval
|| __DATA_CONST.__const _HMDCharacteristicTypeAirPlayEnable
|| __DATA_CONST.__const _HMDCharacteristicTypeApplicationMatchingIdentifier
|| __DATA_CONST.__const _HMDCharacteristicTypeAssetUpdateReadiness
|| __DATA_CONST.__const _HMDCharacteristicTypeCCAEnergyDetectThreshold
|| __DATA_CONST.__const _HMDCharacteristicTypeCCASignalDetectThreshold
|| __DATA_CONST.__const _HMDCharacteristicTypeCharacteristicValueActiveTransitionCount
|| __DATA_CONST.__const _HMDCharacteristicTypeCharacteristicValueTransitionControl
|| __DATA_CONST.__const _HMDCharacteristicTypeConfigurationState
|| __DATA_CONST.__const _HMDCharacteristicTypeCurrentTransport
|| __DATA_CONST.__const _HMDCharacteristicTypeDataStreamHAPTransport
|| __DATA_CONST.__const _HMDCharacteristicTypeDataStreamHAPTransportInterrupt
|| __DATA_CONST.__const _HMDCharacteristicTypeDisplayOrder
|| __DATA_CONST.__const _HMDCharacteristicTypeEventRetransmissionMaximum
|| __DATA_CONST.__const _HMDCharacteristicTypeEventTransmissionCounters
|| __DATA_CONST.__const _HMDCharacteristicTypeFirmwareUpdateReadiness
|| __DATA_CONST.__const _HMDCharacteristicTypeFirmwareUpdateStatus
|| __DATA_CONST.__const _HMDCharacteristicTypeHardwareFinish
|| __DATA_CONST.__const _HMDCharacteristicTypeHeartBeat
|| __DATA_CONST.__const _HMDCharacteristicTypeHomeKitCameraActive
|| __DATA_CONST.__const _HMDCharacteristicTypeMACRetransmissionMaximum
|| __DATA_CONST.__const _HMDCharacteristicTypeMACTransmissionCounters
|| __DATA_CONST.__const _HMDCharacteristicTypeManagedNetworkEnable
|| __DATA_CONST.__const _HMDCharacteristicTypeManuallyDisabled
|| __DATA_CONST.__const _HMDCharacteristicTypeMaximumTransmitPower
|| __DATA_CONST.__const _HMDCharacteristicTypeMultifunctionButton
|| __DATA_CONST.__const _HMDCharacteristicTypeNFCAccessControlPoint
|| __DATA_CONST.__const _HMDCharacteristicTypeNFCAccessSupportedConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeNetworkAccessViolationControl
|| __DATA_CONST.__const _HMDCharacteristicTypeNetworkClientControl
|| __DATA_CONST.__const _HMDCharacteristicTypeNetworkClientStatusControl
|| __DATA_CONST.__const _HMDCharacteristicTypeOperatingStateResponse
|| __DATA_CONST.__const _HMDCharacteristicTypePasswordSetting
|| __DATA_CONST.__const _HMDCharacteristicTypePeriodicSnapshotsActive
|| __DATA_CONST.__const _HMDCharacteristicTypePing
|| __DATA_CONST.__const _HMDCharacteristicTypePrivilege
|| __DATA_CONST.__const _HMDCharacteristicTypeProductData
|| __DATA_CONST.__const _HMDCharacteristicTypeReceivedSignalStrengthIndication
|| __DATA_CONST.__const _HMDCharacteristicTypeReceiverSensitivity
|| __DATA_CONST.__const _HMDCharacteristicTypeRouterStatus
|| __DATA_CONST.__const _HMDCharacteristicTypeSelectedCameraRecordingConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSelectedSleepConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSetupDataStreamTransport
|| __DATA_CONST.__const _HMDCharacteristicTypeSignalToNoiseRatio
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriEnable
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriEndpointSessionStatus
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriEngineVersion
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriInputType
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriLightOnUse
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriListening
|| __DATA_CONST.__const _HMDCharacteristicTypeSiriTouchToUse
|| __DATA_CONST.__const _HMDCharacteristicTypeSleepInterval
|| __DATA_CONST.__const _HMDCharacteristicTypeStagedFirmwareVersion
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedAssetTypes
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedAudioRecordingConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedCameraRecordingConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedCharacteristicValueTransitionConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedDataStreamTransportConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedFirmwareUpdateConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedRouterConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedSleepConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeSupportedVideoRecordingConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeThirdPartyCameraActive
|| __DATA_CONST.__const _HMDCharacteristicTypeThreadControlPoint
|| __DATA_CONST.__const _HMDCharacteristicTypeThreadNodeCapabilities
|| __DATA_CONST.__const _HMDCharacteristicTypeThreadOpenThreadVersion
|| __DATA_CONST.__const _HMDCharacteristicTypeThreadStatus
|| __DATA_CONST.__const _HMDCharacteristicTypeTransmitPower
|| __DATA_CONST.__const _HMDCharacteristicTypeVideoAnalysisActive
|| __DATA_CONST.__const _HMDCharacteristicTypeWANConfigurationList
|| __DATA_CONST.__const _HMDCharacteristicTypeWANStatusList
|| __DATA_CONST.__const _HMDCharacteristicTypeWakeConfiguration
|| __DATA_CONST.__const _HMDCharacteristicTypeWiFiCapabilities
|| __DATA_CONST.__const _HMDCharacteristicTypeWiFiConfigurationControl
|| __DATA_CONST.__const _HMDCharacteristicTypeWiFiSatelliteStatus
|| __DATA_CONST.__const _HMDCloudDataSyncCompletionReason
|| __DATA_CONST.__const _HMDCloudPairedMetadataLogCategoryName
|| __DATA_CONST.__const _HMDCloudPhotosEnabledDidChangeNotification
|| __DATA_CONST.__const _HMDCloudShareInviteMessage
|| __DATA_CONST.__const _HMDCloudShareInviteMessageKeyInvitationData
|| __DATA_CONST.__const _HMDCloudShareRequestInviteMessage
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerDecryptionFailedCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerFetchCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerFetchErrorCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerHomeDataBytesFetched
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerHomeDataBytesPushed
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerIncomingPushCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLastDecryptionFailed
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyFetchCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyFetchErrorCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyHomeDataBytesFetched
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyHomeDataBytesPushed
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyUploadCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyUploadErrorCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyUploadErrorRequestGroupKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerLegacyUploadReasonRequestGroupKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerOperationsRequestGroupKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerTopErrorsKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerTopReasonsKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerUploadCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerUploadErrorCount
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerUploadErrorRequestGroupKey
|| __DATA_CONST.__const _HMDCloudSyncLogEventsAnalyzerUploadMaximumDelayReached
|| __DATA_CONST.__const _HMDCloudZoneReadyDataExistsKey
|| __DATA_CONST.__const _HMDCloudZoneReadyInitialFetchKey
|| __DATA_CONST.__const _HMDCloudZoneReadyNotification
|| __DATA_CONST.__const _HMDCloudZoneReadyServerTokenChangedKey
|| __DATA_CONST.__const _HMDCloudZoneReadyZoneIDKey
|| __DATA_CONST.__const _HMDCompanionManagerUpdatedCompanionNotification
|| __DATA_CONST.__const _HMDCompositeSettingControllerHomeUUIDNotificationKey
|| __DATA_CONST.__const _HMDCompositeSettingControllerOwnerUUIDNotificationKey
|| __DATA_CONST.__const _HMDCompositeSettingsControllerDidConfigureNotification
|| __DATA_CONST.__const _HMDConnectionProxyAPIEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyAllowSecureAccessEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyAssistantIdentifierEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyBackgroundUsageEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyCameraClipsEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyClientLocationEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyClientLocationFeedbackEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyConnectivityInfoEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyDiagnosticsEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyHomeLocationEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyLegacyPrivateEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyMatterSetupPayloadEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyMessagingEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyMultiUserSetupEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyPairingIdentityEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyPairingIdentityPrivateEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyPersonManagerEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyPreviewEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyPrivateEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyRemoteLoginPrivateEntitlement
|| __DATA_CONST.__const _HMDConnectionProxySetupPayloadEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyShortcutsAutomationAccessEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyStateDumpEntitlement
|| __DATA_CONST.__const _HMDConnectionProxyWalletKeyEntitlement
|| __DATA_CONST.__const _HMDCoreAnalyticsPeriodicReporterRemoteMessageCounterReportTime
|| __DATA_CONST.__const _HMDCoreAnalyticsPeriodicReporterXPCCounterReportTime
|| __DATA_CONST.__const _HMDCurrentAccessorySetupStartUptimeKey
|| __DATA_CONST.__const _HMDCurrentHomeUUIDKey
|| __DATA_CONST.__const _HMDDataStreamFragmentAssemblerErrorDomain
|| __DATA_CONST.__const _HMDDataStreamFragmentTypeMediaFragment
|| __DATA_CONST.__const _HMDDataStreamFragmentTypeMediaInitialization
|| __DATA_CONST.__const _HMDDataStreamMessageProtocolStream
|| __DATA_CONST.__const _HMDDataStreamMessageStreamDataKey
|| __DATA_CONST.__const _HMDDefaultCloudContainerIdentifier
|| __DATA_CONST.__const _HMDDefaultCloudContainerSourceApplicationBundleIdentifier
|| __DATA_CONST.__const _HMDDeviceCapabilitiesNamespaceUUIDString
|| __DATA_CONST.__const _HMDDeviceCapabilitiesOverrideMGQDeviceSupportsSiriHub
|| __DATA_CONST.__const _HMDDeviceCapabilitiesUpdatedDifferingFieldsNotificationKey
|| __DATA_CONST.__const _HMDDeviceCapabilitiesUpdatedNotification
|| __DATA_CONST.__const _HMDDeviceIsPublishingChangedNotification
|| __DATA_CONST.__const _HMDDeviceIsPublishingKey
|| __DATA_CONST.__const _HMDDeviceNotificationKey
|| __DATA_CONST.__const _HMDDeviceSetupManagerRunningNotificationKey
|| __DATA_CONST.__const _HMDDeviceSetupSessionHH2SettingsMigrationKey
|| __DATA_CONST.__const _HMDDeviceUpdatedNotification
|| __DATA_CONST.__const _HMDDiagnosticReporterDomainHomeKit
|| __DATA_CONST.__const _HMDDiagnosticTypeCoreData
|| __DATA_CONST.__const _HMDDoorbellChimeControllerMaximumAnnounceDelay
|| __DATA_CONST.__const _HMDDoorbellChimeCoordinationAtKeyPathSuffix
|| __DATA_CONST.__const _HMDDoorbellChimeCoordinationKeyPathPrefix
|| __DATA_CONST.__const _HMDDoorbellChimeCoordinationModeKeyPathSuffix
|| __DATA_CONST.__const _HMDDoorbellChimeCoordinationPersonIdKeyPathSuffix
|| __DATA_CONST.__const _HMDDoorbellChimeCoordinationSuite
|| __DATA_CONST.__const _HMDDoorbellChimeIsEnabledSettingName
|| __DATA_CONST.__const _HMDDoorbellChimeSettingGroupName
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerCurrentDeviceStartedLegacyElectionCount
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerV2ElectionCoordinationMeshLeaderChangedCount
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerV2ElectionCoordinationMeshLeaderElectedCount
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerV2ElectionCoordinationMeshUpdateCount
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerV2ElectionPrimaryResidentChangedCount
|| __DATA_CONST.__const _HMDElectionEventsAnalyzerV2ElectionPrimaryResidentElectionRunCount
|| __DATA_CONST.__const _HMDErrorAggregationAnyErrorCounterName
|| __DATA_CONST.__const _HMDErrorAggregationLogEventAllErrorGroupsString
|| __DATA_CONST.__const _HMDErrorAggregationLogEventCountKey
|| __DATA_CONST.__const _HMDErrorAggregationLogEventErrorCountKey
|| __DATA_CONST.__const _HMDErrorAggregationLogEventErrorEventGroupNameKey
|| __DATA_CONST.__const _HMDErrorAggregationLogEventErrorStringKey
|| __DATA_CONST.__const _HMDErrorAggregationLogEventMetricName
|| __DATA_CONST.__const _HMDErrorAggregationLogEventSuccessRateKey
|| __DATA_CONST.__const _HMDErrorAggregationLogEventSummaryEventName
|| __DATA_CONST.__const _HMDErrorAggregationNoErrorCounterName
|| __DATA_CONST.__const _HMDErrorAggregationTotalEventsCounterName
|| __DATA_CONST.__const _HMDEventCountersArchivedEventCountersKey
|| __DATA_CONST.__const _HMDEventCountersArchivedEventCountersModifiedDateKey
|| __DATA_CONST.__const _HMDEventCountersDataStoreKey
|| __DATA_CONST.__const _HMDEventFlagsArchivedEventFlagsKey
|| __DATA_CONST.__const _HMDEventFlagsArchivedEventFlagsSaveTimeKey
|| __DATA_CONST.__const _HMDEventFlagsArchivedEventPeriodDefinedForEventFlagArchiveKey
|| __DATA_CONST.__const _HMDEventFlagsDataStoreKey
|| __DATA_CONST.__const _HMDEventTriggerCharacteristicBasedEventAddedNotification
|| __DATA_CONST.__const _HMDFMFStatusUpdateNotification
|| __DATA_CONST.__const _HMDFetchedAccessorySettingsControllerSettingsUpdateNotification
|| __DATA_CONST.__const _HMDFetchedAccessorySettingsControllerSettingsUpdateNotificationSettingKeyPathCodingKey
|| __DATA_CONST.__const _HMDFetchedAccessorySettingsControllerSettingsUpdateNotificationSettingValueCodingKey
|| __DATA_CONST.__const _HMDFirmwareUpdateCameraPolicyClientIdentifierKey
|| __DATA_CONST.__const _HMDFirmwareUpdateDocumentationMaxSize
|| __DATA_CONST.__const _HMDFirmwareUpdateMaxSocketIdleDuration
|| __DATA_CONST.__const _HMDFirmwareUpdateMinimumApplyDurationAllowance
|| __DATA_CONST.__const _HMDFirmwareUpdateQueryResultDurationAllowance
|| __DATA_CONST.__const _HMDFirmwareUpdateRegisterFailureRetryDuration
|| __DATA_CONST.__const _HMDGenericActionErrorDataKey
|| __DATA_CONST.__const _HMDHAPAccessoryAddAccessoryLocallyReason
|| __DATA_CONST.__const _HMDHAPAccessorySaveAuthMethodReason
|| __DATA_CONST.__const _HMDHAPAccessorySuspendedStateKey
|| __DATA_CONST.__const _HMDHAPAccessoryUpdateCameraProfileNotificationSettingsReason
|| __DATA_CONST.__const _HMDHAPAccessoryUpdateHasPostedBulletinForWalletKeyOnboardingReason
|| __DATA_CONST.__const _HMDHAPAccessoryUpdatedSuspendedState
|| __DATA_CONST.__const _HMDHAPAccessoryWoLUpdateLabel
|| __DATA_CONST.__const _HMDHAPAccessoryWoLUpdateLocallyLabel
|| __DATA_CONST.__const _HMDHAPMediaProfileAddedNotification
|| __DATA_CONST.__const _HMDHAPMediaProfileSettingsAirPlayEnableCodingKey
|| __DATA_CONST.__const _HMDHAPMediaProfileUpdatedNotification
|| __DATA_CONST.__const _HMDHDSDictionaryKeyData
|| __DATA_CONST.__const _HMDHDSDictionaryKeyDataChunkSequenceNumber
|| __DATA_CONST.__const _HMDHDSDictionaryKeyDataSequenceNumber
|| __DATA_CONST.__const _HMDHDSDictionaryKeyDataType
|| __DATA_CONST.__const _HMDHDSDictionaryKeyIsLastDataChunk
|| __DATA_CONST.__const _HMDHDSDictionaryKeyMetadata
|| __DATA_CONST.__const _HMDHH1HomeDataCKContainerIdentifier
|| __DATA_CONST.__const _HMDHH2AutoMigrationBackgroundSystemTaskIdentifier
|| __DATA_CONST.__const _HMDHH2HomeDataCKContainerIdentifier
|| __DATA_CONST.__const _HMDHH2IsAutoMigrationEnabledPreferenceKey
|| __DATA_CONST.__const _HMDHTTPMessageTransportClientIdentifier
|| __DATA_CONST.__const _HMDHTTPMessageTransportErrorDomain
|| __DATA_CONST.__const _HMDHTTPMessageTransportPayloadKey
|| __DATA_CONST.__const _HMDHTTPMessageTransportProtocolVersion
|| __DATA_CONST.__const _HMDHTTPMessageTransportStatusKey
|| __DATA_CONST.__const _HMDHTTPMessageTransportTransactionIdentifier
|| __DATA_CONST.__const _HMDHTTPServerMessageTransportSessionIdentifierKey
|| __DATA_CONST.__const _HMDHTTPServiceDomain
|| __DATA_CONST.__const _HMDHTTPServiceType
|| __DATA_CONST.__const _HMDHomeAccessoryRemovedNotification
|| __DATA_CONST.__const _HMDHomeActionSetEmptiedNotification
|| __DATA_CONST.__const _HMDHomeAddedNotification
|| __DATA_CONST.__const _HMDHomeAutomaticThirdPartyUpdateEnabledChangedNotification
|| __DATA_CONST.__const _HMDHomeCHIPStorageIsLocalChangeNotificationKey
|| __DATA_CONST.__const _HMDHomeCHIPStorageUpdatedNotification
|| __DATA_CONST.__const _HMDHomeConfigureAccessoriesWithDeviceCredentialKeyMessage
|| __DATA_CONST.__const _HMDHomeConfigureAccessoriesWithDeviceCredentialKeyMessageKeyAccessoryUUIDs
|| __DATA_CONST.__const _HMDHomeConfigureAccessoriesWithDeviceCredentialKeyMessageKeyCredentialKey
|| __DATA_CONST.__const _HMDHomeConfigureAccessoriesWithDeviceCredentialKeyMessageKeyDidSucceed
|| __DATA_CONST.__const _HMDHomeCreateKeychainItemForNFCReaderKeyMessage
|| __DATA_CONST.__const _HMDHomeCreateKeychainItemForNFCReaderKeyMessageKeyReaderKey
|| __DATA_CONST.__const _HMDHomeCreateUniquePSKClientConfigurationRequestKey
|| __DATA_CONST.__const _HMDHomeCurrentDeviceHasReachableAccessories
|| __DATA_CONST.__const _HMDHomeDeleteKeychainItemForNFCReaderKeyMessage
|| __DATA_CONST.__const _HMDHomeDeleteKeychainItemForNFCReaderKeyMessageKeyDidSucceed
|| __DATA_CONST.__const _HMDHomeDidArriveHomeNotificationKey
|| __DATA_CONST.__const _HMDHomeDidDisableCharacteristicNotifyEventNotification
|| __DATA_CONST.__const _HMDHomeDidEnableCharacteristicNotifyEventNotification
|| __DATA_CONST.__const _HMDHomeDidLeaveHomeNotificationKey
|| __DATA_CONST.__const _HMDHomeDidUpdateNFCReaderKeyNotification
|| __DATA_CONST.__const _HMDHomeDidUpdateNFCReaderKeyNotificationKeyPreviousNFCReaderKey
|| __DATA_CONST.__const _HMDHomeFetchOrCreateNFCReaderKeyMessage
|| __DATA_CONST.__const _HMDHomeFetchOrCreateNFCReaderKeyMessageKeyReaderKey
|| __DATA_CONST.__const _HMDHomeHasOnboardedForAccessCodeChangeNotification
|| __DATA_CONST.__const _HMDHomeHasOnboardedForWalletKeyChangeNotification
|| __DATA_CONST.__const _HMDHomeInvitationShareTokenKey
|| __DATA_CONST.__const _HMDHomeInvitationShareURLKey
|| __DATA_CONST.__const _HMDHomeIsResidentFirstAccessoryCommunicationEnabledDidChangeNotification
|| __DATA_CONST.__const _HMDHomeKitVersion10_0String
|| __DATA_CONST.__const _HMDHomeKitVersion1_0String
|| __DATA_CONST.__const _HMDHomeKitVersion2_0String
|| __DATA_CONST.__const _HMDHomeKitVersion2_1String
|| __DATA_CONST.__const _HMDHomeKitVersion2_2String
|| __DATA_CONST.__const _HMDHomeKitVersion3_0String
|| __DATA_CONST.__const _HMDHomeKitVersion3_1String
|| __DATA_CONST.__const _HMDHomeKitVersion3_2String
|| __DATA_CONST.__const _HMDHomeKitVersion4_0String
|| __DATA_CONST.__const _HMDHomeKitVersion4_1String
|| __DATA_CONST.__const _HMDHomeKitVersion4_1_1String
|| __DATA_CONST.__const _HMDHomeKitVersion4_2String
|| __DATA_CONST.__const _HMDHomeKitVersion4_3String
|| __DATA_CONST.__const _HMDHomeKitVersion5_0String
|| __DATA_CONST.__const _HMDHomeKitVersion5_1String
|| __DATA_CONST.__const _HMDHomeKitVersion5_2String
|| __DATA_CONST.__const _HMDHomeKitVersion6_0String
|| __DATA_CONST.__const _HMDHomeKitVersion6_1String
|| __DATA_CONST.__const _HMDHomeKitVersion6_2String
|| __DATA_CONST.__const _HMDHomeKitVersion6_3String
|| __DATA_CONST.__const _HMDHomeKitVersion7_0String
|| __DATA_CONST.__const _HMDHomeKitVersion7_0_1String
|| __DATA_CONST.__const _HMDHomeKitVersion7_1String
|| __DATA_CONST.__const _HMDHomeKitVersion7_2String
|| __DATA_CONST.__const _HMDHomeKitVersion7_3String
|| __DATA_CONST.__const _HMDHomeKitVersion8_0String
|| __DATA_CONST.__const _HMDHomeKitVersion8_1String
|| __DATA_CONST.__const _HMDHomeKitVersion8_2String
|| __DATA_CONST.__const _HMDHomeKitVersion9_0String
|| __DATA_CONST.__const _HMDHomeKitVersion9_1String
|| __DATA_CONST.__const _HMDHomeLocationChangedNotification
|| __DATA_CONST.__const _HMDHomeLocationSourceKey
|| __DATA_CONST.__const _HMDHomeLockNotificationContextResolutionResultKey
|| __DATA_CONST.__const _HMDHomeManagerAccessorySymptomsUpdatedSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountAddAccountReprocessSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountAddAccountSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountHandlePushbackSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountRemoveAccountSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountUpdateAccountSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountUpdatedDevicesSaveReason
|| __DATA_CONST.__const _HMDHomeManagerAccountUpdatedHandlesSaveReason
|| __DATA_CONST.__const _HMDHomeManagerActiveNotification
|| __DATA_CONST.__const _HMDHomeManagerAdaptiveClientDisconnectedNotification
|| __DATA_CONST.__const _HMDHomeManagerConnectionActiveStateUpdatedNotification
|| __DATA_CONST.__const _HMDHomeManagerDataSyncInProgressChangedNotification
|| __DATA_CONST.__const _HMDHomeManagerDataSyncStateOverride
|| __DATA_CONST.__const _HMDHomeManagerDevicePushbackSaveReason
|| __DATA_CONST.__const _HMDHomeManagerDeviceUpdatedNameSaveReason
|| __DATA_CONST.__const _HMDHomeManagerDeviceUpdatedSaveReason
|| __DATA_CONST.__const _HMDHomeManagerDidAddCurrentAccessoryNotification
|| __DATA_CONST.__const _HMDHomeManagerDidRemoveCurrentAccessoryNotification
|| __DATA_CONST.__const _HMDHomeManagerForceOverrideDataSyncStateAndStatus
|| __DATA_CONST.__const _HMDHomeManagerGenerationCounter
|| __DATA_CONST.__const _HMDHomeManagerHH2SentinelZonePresent
|| __DATA_CONST.__const _HMDHomeManagerHomeDataLoadedNotification
|| __DATA_CONST.__const _HMDHomeManagerIDMSAccountUsernameDidUpdateNotification
|| __DATA_CONST.__const _HMDHomeManagerInactiveNotification
|| __DATA_CONST.__const _HMDHomeManagerKeyTransferResetTimerNotification
|| __DATA_CONST.__const _HMDHomeManagerLocalHomeDataRemovedNotification
|| __DATA_CONST.__const _HMDHomeManagerObjectRegistrationSaveReason
|| __DATA_CONST.__const _HMDHomeManagerOwnersToNotifyOfMoveToHH2Key
|| __DATA_CONST.__const _HMDHomeManagerResidentEnabledChangedNotification
|| __DATA_CONST.__const _HMDHomeManagerSaveReasonKey
|| __DATA_CONST.__const _HMDHomeManagerSaveRequestNotificationKey
|| __DATA_CONST.__const _HMDHomeManagerSharedUserMigratedToHH2MessageKey
|| __DATA_CONST.__const _HMDHomeManagerStatusOverride
|| __DATA_CONST.__const _HMDHomeManagerTTSUError
|| __DATA_CONST.__const _HMDHomeManagerTapToSetupFinished
|| __DATA_CONST.__const _HMDHomeMediaPropertiesReadRequestMessage
|| __DATA_CONST.__const _HMDHomeNFCReaderKeyKeychainItemAvailableNotification
|| __DATA_CONST.__const _HMDHomeNameChangedNotification
|| __DATA_CONST.__const _HMDHomeNameNotificationKey
|| __DATA_CONST.__const _HMDHomeNaturalLightingContextUpdatedNotification
|| __DATA_CONST.__const _HMDHomeNetworkProtectionUpdatedNotificationKey
|| __DATA_CONST.__const _HMDHomeNotificationKey
|| __DATA_CONST.__const _HMDHomeOwnerBecameTrustZoneCapableNotification
|| __DATA_CONST.__const _HMDHomePeriodicReaderInterval
|| __DATA_CONST.__const _HMDHomePersonManagerSettingsDidChangeNotification
|| __DATA_CONST.__const _HMDHomePresenceEvaluatedNotification
|| __DATA_CONST.__const _HMDHomePresenceMapNotificationKey
|| __DATA_CONST.__const _HMDHomePresenceMonitorUpdatedReason
|| __DATA_CONST.__const _HMDHomePresenceUpdateNotification
|| __DATA_CONST.__const _HMDHomeQueryResidentReachabilityForAccessoriesMessageKey
|| __DATA_CONST.__const _HMDHomeRegionEnteredNotificationKey
|| __DATA_CONST.__const _HMDHomeRegionExitedNotificationKey
|| __DATA_CONST.__const _HMDHomeRemoveClientConfigurationRequestKey
|| __DATA_CONST.__const _HMDHomeRemovedNotification
|| __DATA_CONST.__const _HMDHomeResolveLockNotificationContextIdentifierMessage
|| __DATA_CONST.__const _HMDHomeResolveLockNotificationContextIdentifierMessageAccessCodeIdentifierKey
|| __DATA_CONST.__const _HMDHomeResolveLockNotificationContextIdentifierMessageAccessoryUUIDKey
|| __DATA_CONST.__const _HMDHomeServiceGroupAddedNotification
|| __DATA_CONST.__const _HMDHomeServiceGroupRemovedNotification
|| __DATA_CONST.__const _HMDHomeServiceGroupUpdatedNotification
|| __DATA_CONST.__const _HMDHomeServiceRemovedNotification
|| __DATA_CONST.__const _HMDHomeSuppressInviteNotificationKey
|| __DATA_CONST.__const _HMDHomeThisOwnerDeviceAddedAccessoryNotification
|| __DATA_CONST.__const _HMDHomeThreadNetworkCredentialsRequestKey
|| __DATA_CONST.__const _HMDHomeThreadNetworkID_Poison
|| __DATA_CONST.__const _HMDHomeUUIDOwnerUUIDKey
|| __DATA_CONST.__const _HMDHomeUpgradedToHH2Reason
|| __DATA_CONST.__const _HMDHomeUserAddedNotification
|| __DATA_CONST.__const _HMDHomeUserRemovedNotification
|| __DATA_CONST.__const _HMDHomeWalletKeyManagerFetchWalletKeyDeviceStateRemoteMessage
|| __DATA_CONST.__const _HMDHomeWalletKeyManagerPersistWalletKeyAddOptionsRemoteMessage
|| __DATA_CONST.__const _HMDHomeWalletKeyManagerRemoteMessageKeyNFCReaderKey
|| __DATA_CONST.__const _HMDHouseholdActivityLogEventHomeUUIDKey
|| __DATA_CONST.__const _HMDHouseholdMetricsClientGroupName
|| __DATA_CONST.__const _HMDHouseholdMetricsLogEventActiveDeviceCountKey
|| __DATA_CONST.__const _HMDHouseholdMetricsLogEventRequestCountKey
|| __DATA_CONST.__const _HMDHouseholdMetricsMessageDateKey
|| __DATA_CONST.__const _HMDHouseholdMetricsMessageHomeDataLogEventRequest
|| __DATA_CONST.__const _HMDHouseholdMetricsMessageHomeUUIDKey
|| __DATA_CONST.__const _HMDHouseholdMetricsMessageHouseholdActivityKey
|| __DATA_CONST.__const _HMDHouseholdMetricsRequestCountCounter
|| __DATA_CONST.__const _HMDIDSActivityMonitorBroadcastDebounceDelay
|| __DATA_CONST.__const _HMDIDSReportSpamHomeNameKey
|| __DATA_CONST.__const _HMDIDSReportSpamMessageTypeValue
|| __DATA_CONST.__const _HMDIDSServerBagKeyHH2AutoMigrationEnabled
|| __DATA_CONST.__const _HMDIDSServerBagKeyHH2ManualMigrationEnabled
|| __DATA_CONST.__const _HMDIDSServerBagKeyHH2SoftwareReleased
|| __DATA_CONST.__const _HMDIdentityNotificationKey
|| __DATA_CONST.__const _HMDIdentityRegistryAddedIdentity
|| __DATA_CONST.__const _HMDIdentityRegistryRemovedIdentity
|| __DATA_CONST.__const _HMDKeyTransferAgentDataKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseBroadcastKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhasePingKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseReplyPublicKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseRequestUUID
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseSendPrivateKey
|| __DATA_CONST.__const _HMDKeyTransferAgentPhaseSendPublicKey
|| __DATA_CONST.__const _HMDKeyTransferAgentUUIDKey
|| __DATA_CONST.__const _HMDLastRemovedCurrentAccessoryUUIDKey
|| __DATA_CONST.__const _HMDLaunchHandlerKeepAliveClientsKey
|| __DATA_CONST.__const _HMDLocationAuthorizationKey
|| __DATA_CONST.__const _HMDLogEventAccessoryFirmwareUpdateEventAnalyzerRequestGroupKey
|| __DATA_CONST.__const _HMDLogEventElectionEventsAnalyzerRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerActionSetEventRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerAddAccessoryPairingRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerAllGroupsRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerBackingStoreCKOperationZoneCompletionRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraMetricsSnapshotRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraMetricsStreamRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraRecordingBulkSessionEndRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraRecordingBulkSessionStartRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraRecordingSessionCoordinationRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCameraRecordingUploadOperationRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCharacteristicReadWriteRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCloudShareTrustManagerFailureRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerCloudSyncLegacyUploadRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerDatabaseCKOperationCompletionRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerEventTriggerExecutionSessionRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerHAPPairVerifyRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerRemoveAccessoryPairingRequestGroup
|| __DATA_CONST.__const _HMDLogEventErrorEventsAnalyzerSiriCommandRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageReceivedDailyRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageSentDailyRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageTransportTypeIDSEventCounter
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageTransportTypeIDSProxyEventCounter
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageTransportTypeLoxyEventCounter
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageTransportTypeRapportEventCounter
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRemoteMessageTransportTypeSecureEventCounter
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRxIDSMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRxIDSProxyMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRxLoxyMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRxRapportMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerRxSecureMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerTxIDSMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerTxIDSProxyMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerTxLoxyMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerTxRapportMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventMessageAnalyzerTxSecureMessagesCountPeriodicRequestGroup
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentBLEAccessoryUpdateApplyCounter
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentBLEAccessoryUpdateStagingCounter
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentIPAccessoryUpdateApplyCounter
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentIPAccessoryUpdateStagingCounter
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentThreadAccessoryUpdateApplyCounter
|| __DATA_CONST.__const _HMDLogEventPeakConcurrentThreadAccessoryUpdateStagingCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerJetsamReasonHighwaterEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerJetsamReasonOtherEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerJetsamReasonProcessLimitCountEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerProcessCrashCountEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerProcessJetsamCountEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerProcessLaunchEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessLaunchAnalyzerRequestGroup
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerProcessMemoryPressureStateCriticalEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerProcessMemoryPressureStateWarningEventCounter
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerProcessMemorySampleAggregateValueKB
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerProcessMemorySampleEventCount
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerProcessMemorySamplePeakValueKB
|| __DATA_CONST.__const _HMDLogEventProcessMemoryEventsAnalyzerRequestGroup
|| __DATA_CONST.__const _HMDLogEventReachabilityEventsAnalyzerCameraRecordingOfflineDurationCounter
|| __DATA_CONST.__const _HMDLogEventReachabilityEventsAnalyzerCameraRecordingReachabilityChangedCounter
|| __DATA_CONST.__const _HMDLogEventReachabilityEventsAnalyzerHomeHubReachabilityChangedCounter
|| __DATA_CONST.__const _HMDLogEventReachabilityEventsAnalyzerReachabilityChangedCounter
|| __DATA_CONST.__const _HMDLogEventReachabilityEventsAnalyzerRequestGroup
|| __DATA_CONST.__const _HMDLogEventRemoteMessageDirectionReceived
|| __DATA_CONST.__const _HMDLogEventRemoteMessageDirectionSent
|| __DATA_CONST.__const _HMDLogEventRemoteMessageTransportTypeIDS
|| __DATA_CONST.__const _HMDLogEventRemoteMessageTransportTypeIDSProxy
|| __DATA_CONST.__const _HMDLogEventRemoteMessageTransportTypeLoxy
|| __DATA_CONST.__const _HMDLogEventRemoteMessageTransportTypeRapport
|| __DATA_CONST.__const _HMDLogEventRemoteMessageTransportTypeSecure
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerAddAccessoryEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerAddSceneEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerAddShortcutEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerAddTriggerEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerBTDurationAggregation
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerCameraStreamStartFailureEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerCameraStreamStartSuccessEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerFetchCameraClipVideoSegmentsAssetEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerFirstPartyReadEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerFirstPartyWriteEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerIDSDurationAggregation
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerIPDurationAggregation
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerInternalRequestedReadEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerInternalRequestedWriteEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerIsActiveFlag
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteBTFailureEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteBTSuccessEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteIDSFailureEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteIDSSuccessEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteIPFailureEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerReadWriteIPSuccessEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerRequestGroup
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerRunSceneEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerRunShortcutEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerSiriReadEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerSiriWriteEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerThirdPartyReadEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerThirdPartyWriteEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerTriggerFiredEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerUnknownSourceReadEventCounter
|| __DATA_CONST.__const _HMDLogEventUserActivityAnalyzerUnknownSourceWriteEventCounter
|| __DATA_CONST.__const _HMDLogEventXPCAcceptedMessagesCountDailyRequestGroup
|| __DATA_CONST.__const _HMDLogEventXPCErroredMessagesCountDailyRequestGroup
|| __DATA_CONST.__const _HMDLogEventXPCFilteredMessagesCountDailyRequestGroup
|| __DATA_CONST.__const _HMDLogEventXPCSentMessagesCountDailyRequestGroup
|| __DATA_CONST.__const _HMDMRSetEndpointVolumeOperationFailedEndpointsKey
|| __DATA_CONST.__const _HMDMRSetEndpointVolumeOperationSucceededEndpointsKey
|| __DATA_CONST.__const _HMDMediaActionMediaProfilesMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackArchiveMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackArchiveOptionsMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackClientNameMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackSessionIdentifierMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackSourceMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackStateMessageKey
|| __DATA_CONST.__const _HMDMediaActionRouterPlaybackVolumeMessageKey
|| __DATA_CONST.__const _HMDMediaActionRoutingMessage
|| __DATA_CONST.__const _HMDMediaDestinationControllerIdentifierNotificationKey
|| __DATA_CONST.__const _HMDMediaDestinationControllerModelAvailableDestinationModelIdentifiersPropertyName
|| __DATA_CONST.__const _HMDMediaDestinationControllerModelDestinationModelIdentifierPropertyName
|| __DATA_CONST.__const _HMDMediaDestinationControllerModelTypePropertyName
|| __DATA_CONST.__const _HMDMediaDestinationControllerUpdatedDestinationNotification
|| __DATA_CONST.__const _HMDMediaDestinationIdentifierNotificationKey
|| __DATA_CONST.__const _HMDMediaDestinationModelAudioGroupIdentifierPropertyName
|| __DATA_CONST.__const _HMDMediaDestinationModelNamePropertyName
|| __DATA_CONST.__const _HMDMediaDestinationModelSupportedOptionsPropertyName
|| __DATA_CONST.__const _HMDMediaDestinationModelTypePropertyName
|| __DATA_CONST.__const _HMDMediaGroupsBackupDataKey
|| __DATA_CONST.__const _HMDMediaGroupsBackupDataMessage
|| __DATA_CONST.__const _HMDMediaGroupsControllerNameSpaceUUIDString
|| __DATA_CONST.__const _HMDMediaPlaybackActionErrorDataKey
|| __DATA_CONST.__const _HMDMediaProfileSetPowerKey
|| __DATA_CONST.__const _HMDMediaProfileSetPowerRequestKey
|| __DATA_CONST.__const _HMDMediaProfileSetValueUnsupportedAttributeKey
|| __DATA_CONST.__const _HMDMediaRouteIDForNonMediaDevices
|| __DATA_CONST.__const _HMDMediaRouteIDForUnknownMediaDevices
|| __DATA_CONST.__const _HMDMediaSessionDidUpdateAudioControlNotification
|| __DATA_CONST.__const _HMDMediaSessionDidUpdatePlaybackStateNotification
|| __DATA_CONST.__const _HMDMediaSessionForceNotifyMessageKey
|| __DATA_CONST.__const _HMDMediaSessionsRemovedNotification
|| __DATA_CONST.__const _HMDMediaSystemAudioDestinationNameSpaceUUIDString
|| __DATA_CONST.__const _HMDMediaSystemNotificationKey
|| __DATA_CONST.__const _HMDMeshElectionPrimaryUUIDKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveBrightnessKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveColorTemperatureKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveColorTemperatureNotifyIntervalThresholdKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveColorTemperatureNotifyValueChangeThresholdKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveColorTemperatureTransitionPointsKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveColorTemperatureValueUpdateIntervalKey
|| __DATA_CONST.__const _HMDNaturaLightingCurveTimeOfDayKey
|| __DATA_CONST.__const _HMDNaturalLightingCharacteristicValueTransitionUUID
|| __DATA_CONST.__const _HMDNaturalLightingCurveKey
|| __DATA_CONST.__const _HMDNaturalLightingCurveVersionKey
|| __DATA_CONST.__const _HMDNetworkProfileAccessoryNotificationKey
|| __DATA_CONST.__const _HMDNetworkRouterAccessViolationQueryEnablePreferenceKey
|| __DATA_CONST.__const _HMDNetworkRouterApplySettingsAction
|| __DATA_CONST.__const _HMDNetworkRouterClientIdentifierKey
|| __DATA_CONST.__const _HMDNetworkRouterFallbackAirPlay2
|| __DATA_CONST.__const _HMDNetworkRouterFallbackHDS
|| __DATA_CONST.__const _HMDNetworkRouterFallbackRTP
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneAccessoryRecordType
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneCertificateRecordType
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneCertificateZoneName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordNetworkDeclarationsAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordNetworkDeclarationsKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordNetworkDeclarationsSignatureAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordNetworkDeclarationsSignatureKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordPairedMetadataAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordPairedMetadataKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordPairedMetadataSignatureAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordPairedMetadataSignatureKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordProductGroupAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordProductGroupKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordProductNumberAssetKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleCloudZoneRecordProductNumberKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStoreContainerIdentifierProduction
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStoreContainerIdentifierStaging
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorCertificatesZoneName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneIDTokenUUIDString
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStorePreferenceKeyContainerEnvironment
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerBackingStorePreferenceKeyContainerIdentifier
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerCoordinatorLogCategoryName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerLogCategoryName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerMirrorLogCategoryName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerNetworkDeclarationsKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerPairedMetadataKey
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerRulesLogCategoryName
|| __DATA_CONST.__const _HMDNetworkRouterFirewallRuleManagerSchedulerLogCategoryName
|| __DATA_CONST.__const _HMDNetworkRouterProfileAddedNotification
|| __DATA_CONST.__const _HMDNetworkRouterProfileRemovedNotification
|| __DATA_CONST.__const _HMDNetworkRouterSatelliteClientIdentifierKey
|| __DATA_CONST.__const _HMDNetworkRouterSatelliteProfileAddedNotification
|| __DATA_CONST.__const _HMDNetworkRouterSatelliteProfileRemovedNotification
|| __DATA_CONST.__const _HMDNotificationAccessoryChangedRoom
|| __DATA_CONST.__const _HMDNotificationAddedAccessoryKey
|| __DATA_CONST.__const _HMDNotificationCharacteristicValueUpdated
|| __DATA_CONST.__const _HMDNotificationCharacteristicValueUpdatedChangedCharacteristicsKey
|| __DATA_CONST.__const _HMDNotificationCharacteristicValueUpdatedReasonKey
|| __DATA_CONST.__const _HMDNotificationCurrentHomeDidChange
|| __DATA_CONST.__const _HMDNotificationHomeAddedAccessory
|| __DATA_CONST.__const _HMDNotificationNetworkRouterFirewallRulesUpdated
|| __DATA_CONST.__const _HMDNotificationNetworkRouterFirewallRulesUpdatedAccessoriesKey
|| __DATA_CONST.__const _HMDNotificationPrimaryHomeDidChange
|| __DATA_CONST.__const _HMDNotificationSourceKey
|| __DATA_CONST.__const _HMDOnboardingSelectionsAirPlayEnabledKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsAllowExplicitContentKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsAllowHeySiriKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsAnnounceKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsDoorbellChimeEnabledKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsLightWhenUsingSiriKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsShareSiriAnalyticsKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsSiriEnabledKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsSiriEndpointEnabledKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsSiriLanguageKeyPath
|| __DATA_CONST.__const _HMDOnboardingSelectionsSiriTapToAccessKeyPath
|| __DATA_CONST.__const _HMDPAccessoryAutoConnect
|| __DATA_CONST.__const _HMDPineBoardUserDefaultsSecureHomeKitAccessoryAllowedRemotesKey
|| __DATA_CONST.__const _HMDPineBoardUserDefaultsSuiteName
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationMetricName
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasAnyMotionEventEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasHSVMotionEventEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasMetricKey
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasReachabilityNotificationEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasRecordingEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogCameraConfigurationNumCamerasSmartBulletinNotificationEnabled
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationCurrentDevicePrimaryResidentMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationCurrentDeviceResidentEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationMetricName
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationNumHAPAccessoriesMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationNumHomesMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationNumNonEmptyHomesMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationNumResidentsEnabledMetricKey
|| __DATA_CONST.__const _HMDPowerLogHomeConfigurationNumUsersMetricKey
|| __DATA_CONST.__const _HMDPredicateUtilitiesSubsitutionVariable
|| __DATA_CONST.__const _HMDPreferenceAutoConfigureNewTargetControllers
|| __DATA_CONST.__const _HMDPreferenceAutoConfigureNewTargets
|| __DATA_CONST.__const _HMDPreferenceBTLEScanningTimeout
|| __DATA_CONST.__const _HMDPreferenceEnableAddAirPlay2Accessories
|| __DATA_CONST.__const _HMDPreferenceEnableAirPlay2Accessories
|| __DATA_CONST.__const _HMDPreferenceEnableAirPlay2Syncing
|| __DATA_CONST.__const _HMDPreferenceEnableAppleMediaAccessories
|| __DATA_CONST.__const _HMDPreferenceEnableAppleMediaSyncing
|| __DATA_CONST.__const _HMDPreferenceEnableMediaAccessories
|| __DATA_CONST.__const _HMDPreferenceEnableNetworkRouterSupport
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateApplyGuardTime
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateApplyMaxDelay
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateApplyMinDelay
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateBLEAccessoryApplyConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateBLEAccessoryStageConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateIPAccessoryApplyConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateIPAccessoryStageConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateStageMaxDelay
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateStageMinDelay
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateThreadAccessoryApplyConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceFirmwareUpdateThreadAccessoryStageConcurrentLimit
|| __DATA_CONST.__const _HMDPreferenceForceAllowSiriEndpoints
|| __DATA_CONST.__const _HMDPreferenceLEAdvertisingTimeout
|| __DATA_CONST.__const _HMDPreferencePlaybackStateTimeout
|| __DATA_CONST.__const _HMDPreferenceReachabilityTimeout
|| __DATA_CONST.__const _HMDPreferenceResidentReadCoalesceTimeout_ms
|| __DATA_CONST.__const _HMDPreferenceShouldLogPrivateInformation
|| __DATA_CONST.__const _HMDPreviousAccountNotificationKey
|| __DATA_CONST.__const _HMDPreviousHomeUUIDKey
|| __DATA_CONST.__const _HMDPrimaryHomeUUIDKey
|| __DATA_CONST.__const _HMDProcessInfoStateKey
|| __DATA_CONST.__const _HMDPushToCloudTransactionRequest
|| __DATA_CONST.__const _HMDRecordingManagementServiceDidUpdateNotification
|| __DATA_CONST.__const _HMDRemoteAccountForceCachingPreferenceKey
|| __DATA_CONST.__const _HMDRemoteAccountManagerAddedAccountNotification
|| __DATA_CONST.__const _HMDRemoteAccountManagerRemovedAccountNotification
|| __DATA_CONST.__const _HMDRemoteCameraReachabilityDidChangeMessage
|| __DATA_CONST.__const _HMDRemoteDeviceIsNotReachableNotification
|| __DATA_CONST.__const _HMDRemoteDeviceIsReachableNotification
|| __DATA_CONST.__const _HMDRemoteDeviceMonitorReachableNotification
|| __DATA_CONST.__const _HMDRemoteEventRouterClientDidConnect
|| __DATA_CONST.__const _HMDRemoteEventRouterClientDidDisconnect
|| __DATA_CONST.__const _HMDRemoteEventRouterClientHomeUUIDKey
|| __DATA_CONST.__const _HMDRemoteEventRouterMessageIsFragmentedKey
|| __DATA_CONST.__const _HMDRemoteEventRouterMessagePayloadKey
|| __DATA_CONST.__const _HMDRemoteEventRouterRequestMessageName
|| __DATA_CONST.__const _HMDRemoteEventRouterUpdateMessageName
|| __DATA_CONST.__const _HMDRemoteMessageClientLocationAuthorizationHeader
|| __DATA_CONST.__const _HMDRemoteMessageForwarderErrorKey
|| __DATA_CONST.__const _HMDRemoteMessageForwarderOriginalMessageUUIDStringKey
|| __DATA_CONST.__const _HMDRemoteMessageForwarderPayloadKey
|| __DATA_CONST.__const _HMDRemoteMessageForwarderResponseMessage
|| __DATA_CONST.__const _HMDRemotePersonDataMessengerPerformCloudPullMessage
|| __DATA_CONST.__const _HMDResidentDeviceAddressChangedNotification
|| __DATA_CONST.__const _HMDResidentDeviceCapabilitiesNotificationKey
|| __DATA_CONST.__const _HMDResidentDeviceCapabilitiesUpdatedNotification
|| __DATA_CONST.__const _HMDResidentDeviceConfirmedStateChangedNotification
|| __DATA_CONST.__const _HMDResidentDeviceEnabledStateChangedNotification
|| __DATA_CONST.__const _HMDResidentDeviceHomeUUIDNotificationKey
|| __DATA_CONST.__const _HMDResidentDeviceIdentifierNotificationKey
|| __DATA_CONST.__const _HMDResidentDeviceManagerAddResidentNotification
|| __DATA_CONST.__const _HMDResidentDeviceManagerHomeUUIDNotificationKey
|| __DATA_CONST.__const _HMDResidentDeviceManagerRemoveResidentNotification
|| __DATA_CONST.__const _HMDResidentDeviceManagerResidentDeviceNotificationKey
|| __DATA_CONST.__const _HMDResidentDeviceManagerUpdatePrimaryResidentNotification
|| __DATA_CONST.__const _HMDResidentDeviceManagerUpdateResidentNotification
|| __DATA_CONST.__const _HMDResidentDeviceMessageAddressKey
|| __DATA_CONST.__const _HMDResidentDeviceResidentNotificationKey
|| __DATA_CONST.__const _HMDResidentReachabilityNotificationAfterConnectivityDelay
|| __DATA_CONST.__const _HMDRoomNameUpdatedNotification
|| __DATA_CONST.__const _HMDSQLiteEventStoreFileName
|| __DATA_CONST.__const _HMDSecureRemoteSessionErrorKey
|| __DATA_CONST.__const _HMDSecureRemoteSessionErrorNotification
|| __DATA_CONST.__const _HMDSecureRemoteSessionStreamsMessageKey
|| __DATA_CONST.__const _HMDSecureRemoteStreamID
|| __DATA_CONST.__const _HMDServiceGroupNotificationKey
|| __DATA_CONST.__const _HMDServiceNotificationKey
|| __DATA_CONST.__const _HMDServiceSPIClientIdentifierKey
|| __DATA_CONST.__const _HMDServiceTypeAccessCode
|| __DATA_CONST.__const _HMDServiceTypeAccessControl
|| __DATA_CONST.__const _HMDServiceTypeAccessoryRuntimeInformation
|| __DATA_CONST.__const _HMDServiceTypeAssetUpdate
|| __DATA_CONST.__const _HMDServiceTypeAssistant
|| __DATA_CONST.__const _HMDServiceTypeDataStreamTransportManagement
|| __DATA_CONST.__const _HMDServiceTypeFirmwareUpdate
|| __DATA_CONST.__const _HMDServiceTypeNFCAccessService
|| __DATA_CONST.__const _HMDServiceTypePowerManagement
|| __DATA_CONST.__const _HMDServiceTypeSiri
|| __DATA_CONST.__const _HMDServiceTypeSiriEndpoint
|| __DATA_CONST.__const _HMDServiceTypeSmartSpeaker
|| __DATA_CONST.__const _HMDServiceTypeThreadTransport
|| __DATA_CONST.__const _HMDServiceTypeWiFiRouter
|| __DATA_CONST.__const _HMDServiceTypeWiFiSatellite
|| __DATA_CONST.__const _HMDServiceTypeWiFiTransport
|| __DATA_CONST.__const _HMDServiceUUIDKey
|| __DATA_CONST.__const _HMDSharedHomeUpdateSourceVersionUpdatedSaveReason
|| __DATA_CONST.__const _HMDSiriAllowHeySiriCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDSiriCommandEventErrorDomain
|| __DATA_CONST.__const _HMDSiriEnabledCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDSiriEndpointProfileAddedNotification
|| __DATA_CONST.__const _HMDSiriEndpointProfileNeedsOnboardingResultCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousActiveIdentifierKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousManuallyDisabledKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousMultifunctionButtonKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousSessionHubIdentiferKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousSessionStateKey
|| __DATA_CONST.__const _HMDSiriEndpointProfilePreviousSiriEngineVersionKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsEnableCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsLightOnUseCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsListeningCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsSoundOnUseCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsTouchToUseCodingKey
|| __DATA_CONST.__const _HMDSiriEndpointProfileSettingsUpdatedNotification
|| __DATA_CONST.__const _HMDSiriEndpointProfileUpdateNeedsOnboardingNotification
|| __DATA_CONST.__const _HMDSiriEndpointProfileUpdatedNotification
|| __DATA_CONST.__const _HMDSiriLightWhenUsingSiriCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDSiriMultiUserNewLanguageNotificationManagerForceSiriRMVNewLanguageToEnglish
|| __DATA_CONST.__const _HMDSiriServerDataStreamDataKey
|| __DATA_CONST.__const _HMDSiriServerDataStreamDurationKey
|| __DATA_CONST.__const _HMDSiriServerDataStreamMetadataKey
|| __DATA_CONST.__const _HMDSiriServerDataStreamRMSKey
|| __DATA_CONST.__const _HMDSiriServerDataStreamSequenceNumberKey
|| __DATA_CONST.__const _HMDSiriServerEventKeyActivationType
|| __DATA_CONST.__const _HMDSiriServerEventKeyDuration
|| __DATA_CONST.__const _HMDSiriServerEventNameStreamStart
|| __DATA_CONST.__const _HMDSiriServerFirstPassResultsKey
|| __DATA_CONST.__const _HMDSiriSoundAlertSiriCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDSiriTapToAccessCompositeSettingKeyPath
|| __DATA_CONST.__const _HMDSoftwareUpdateDocumentationAssetMetadataFilename
|| __DATA_CONST.__const _HMDSoftwareUpdateDocumentationAssetStateNotificationKey
|| __DATA_CONST.__const _HMDSoftwareUpdateDocumentationNotificationKey
|| __DATA_CONST.__const _HMDSystemMediaApplicationBundleIdentifier
|| __DATA_CONST.__const _HMDTargetAccessoriesUUIDKey
|| __DATA_CONST.__const _HMDTargetAccessoryConfiguredNotificationKey
|| __DATA_CONST.__const _HMDTargetAccessoryUnconfiguredNotificationKey
|| __DATA_CONST.__const _HMDTargetControlServiceActiveIdentifierUserInfoKey
|| __DATA_CONST.__const _HMDTargetControlServiceDeselectedNotificationKey
|| __DATA_CONST.__const _HMDTargetControlServiceSelectedNotificationKey
|| __DATA_CONST.__const _HMDTargetControllerAccessoryButtonConfigurationUserInfoKey
|| __DATA_CONST.__const _HMDTargetControllerAccessoryConfigurationUpdatedNotificationKey
|| __DATA_CONST.__const _HMDTargetControllerAccessoryTargetConfigurationUserInfoKey
|| __DATA_CONST.__const _HMDTargetControllerAccessoryTicksPerSecondUserInfoKey
|| __DATA_CONST.__const _HMDUserAssistantAccessControlUpdatedReason
|| __DATA_CONST.__const _HMDUserCamerasAccessLevelDidChangeNotification
|| __DATA_CONST.__const _HMDUserCloudShareIDCodingKey
|| __DATA_CONST.__const _HMDUserCloudShareManagerRemoteShareRepairMessage
|| __DATA_CONST.__const _HMDUserCloudShareManagerRemoteShareRequestMessage
|| __DATA_CONST.__const _HMDUserDataControllerInitializedNotificationKey
|| __DATA_CONST.__const _HMDUserDataPrivateZoneNamePrefix
|| __DATA_CONST.__const _HMDUserDataSharedZoneNamePrefix
|| __DATA_CONST.__const _HMDUserDidUpdateIDSActivityRegistration
|| __DATA_CONST.__const _HMDUserDisplayNameUpdatedReason
|| __DATA_CONST.__const _HMDUserNotificationKey
|| __DATA_CONST.__const _HMDUserPairingIdentityIdentifierKey
|| __DATA_CONST.__const _HMDUserPairingIdentityPermissionsCodingKey
|| __DATA_CONST.__const _HMDUserPairingIdentityPrivateKeyCodingKey
|| __DATA_CONST.__const _HMDUserPairingIdentityPublicKeyCodingKey
|| __DATA_CONST.__const _HMDUserPresenceUpdateLocalNotification
|| __DATA_CONST.__const _HMDUserPrivilegeDidChangeNotification
|| __DATA_CONST.__const _HMDUserRemoteAccessDidChangeNotification
|| __DATA_CONST.__const _HMDUserSettingsUpdatedNotificationKey
|| __DATA_CONST.__const _HMDUserSyncDataDataForMigrationCodingKey
|| __DATA_CONST.__const _HMDUserSyncDataHomeUUIDForMigrationCodingKey
|| __DATA_CONST.__const _HMDUserSyncDataTimestampForMigrationCodingKey
|| __DATA_CONST.__const _HMDUserSyncDataUserForMigrationCodingKey
|| __DATA_CONST.__const _HMDUserTrustZoneNamePrefix
|| __DATA_CONST.__const _HMDUserUpdateAccountIdentifierReason
|| __DATA_CONST.__const _HMDUserUserIDUpdatedReason
|| __DATA_CONST.__const _HMDWalletPassAccessCodeKey
|| __DATA_CONST.__const _HMDWalletPassAccessCodeLabelKey
|| __DATA_CONST.__const _HMDWalletPassAutomaticSelectionCriteriaKey
|| __DATA_CONST.__const _HMDWalletPassBackFieldsKey
|| __DATA_CONST.__const _HMDWalletPassChangeAccessCodeHomeAppCustomBaseURLString
|| __DATA_CONST.__const _HMDWalletPassChangeAccessCodeKey
|| __DATA_CONST.__const _HMDWalletPassChangeAccessCodeValueKey
|| __DATA_CONST.__const _HMDWalletPassDescriptionKey
|| __DATA_CONST.__const _HMDWalletPassDetailSectionsKey
|| __DATA_CONST.__const _HMDWalletPassHeaderFieldsKey
|| __DATA_CONST.__const _HMDWalletPassHiddenKey
|| __DATA_CONST.__const _HMDWalletPassHomeKeyLiveTypeKey
|| __DATA_CONST.__const _HMDWalletPassHomeNameKey
|| __DATA_CONST.__const _HMDWalletPassIdentifierAccessCodeKey
|| __DATA_CONST.__const _HMDWalletPassIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassJSONFileName
|| __DATA_CONST.__const _HMDWalletPassKeyKey
|| __DATA_CONST.__const _HMDWalletPassLabelColorKey
|| __DATA_CONST.__const _HMDWalletPassLabelKey
|| __DATA_CONST.__const _HMDWalletPassLinkKey
|| __DATA_CONST.__const _HMDWalletPassLiveRenderTypeKey
|| __DATA_CONST.__const _HMDWalletPassLiveRenderTypeKeyValue
|| __DATA_CONST.__const _HMDWalletPassMuteReadyForUseNotificationKey
|| __DATA_CONST.__const _HMDWalletPassPairedReaderIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationDPANIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationDPANSuffixKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationSecureElementIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationStateKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationSubcredentialIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationSubcredentialKey
|| __DATA_CONST.__const _HMDWalletPassPaymentApplicationsKey
|| __DATA_CONST.__const _HMDWalletPassPaymentCardKey
|| __DATA_CONST.__const _HMDWalletPassReaderIDsKey
|| __DATA_CONST.__const _HMDWalletPassResourceDirectoryName
|| __DATA_CONST.__const _HMDWalletPassRowsKey
|| __DATA_CONST.__const _HMDWalletPassSecureAccessCodeKey
|| __DATA_CONST.__const _HMDWalletPassSecureAccessCodeLabelKey
|| __DATA_CONST.__const _HMDWalletPassSecureAccessCodeLinkKey
|| __DATA_CONST.__const _HMDWalletPassSerialNumberKey
|| __DATA_CONST.__const _HMDWalletPassTypeIdentifier
|| __DATA_CONST.__const _HMDWalletPassTypeIdentifierKey
|| __DATA_CONST.__const _HMDWalletPassValueKey
|| __DATA_CONST.__const _HMDWalletPassZipExtension
|| __DATA_CONST.__const _HMDWatcherManagerWatchConnectedNotification
|| __DATA_CONST.__const _HMDWatcherManagerWatchDisconnectedNotification
|| __DATA_CONST.__const _HMDWiFiManagementControllerReconfigurationTimeout
|| __DATA_CONST.__const _HMDWidgetHomeWidgetKindCategoryHomeSummary
|| __DATA_CONST.__const _HMDWidgetHomeWidgetKindCategoryLights
|| __DATA_CONST.__const _HMDWidgetHomeWidgetKindCategorySecurity
|| __DATA_CONST.__const _HMDWidgetHomeWidgetKindSingleAccessorySecurity
|| __DATA_CONST.__const _HMDXPCActivityRunReportActivityDefinedIntervalMinutesMetricKey
|| __DATA_CONST.__const _HMDXPCActivityRunReportActivityNameMetricKey
|| __DATA_CONST.__const _HMDXPCActivityRunReportActivityRunHourOfDayMetricKey
|| __DATA_CONST.__const _HMDXPCActivityRunReportActivityShouldWakeMetricKey
|| __DATA_CONST.__const _HMDXPCActivityRunReportActivityTimeSinceLastRunMinutesMetricKey
|| __DATA_CONST.__const _HMDXPCClientConnectionDidActivateNotification
|| __DATA_CONST.__const _HMDXPCClientConnectionDidDeactivateNotification
|| __DATA_CONST.__const _HMDXPCClientConnectionInvalidatedNotification
|| __DATA_CONST.__const _HMDXPCClientConnectionNotificationKey
|| __DATA_CONST.__const _HMDXPCConnectionBundleIdentifierKey
|| __DATA_CONST.__const _HMDXPCMessageCountersTypeAcceptedRequests
|| __DATA_CONST.__const _HMDXPCMessageCountersTypeDroppedRequests
|| __DATA_CONST.__const _HMDXPCMessageCountersTypeFilteredNotifications
|| __DATA_CONST.__const _HMDXPCMessageCountersTypeSentNotifications
|| __DATA_CONST.__const _HMDXPCMessageTransportConnectionAddedNotification
|| __DATA_CONST.__const _HMDXPCMessageTransportConnectionRemovedNotification
|| __DATA_CONST.__const _HMDeviceSetupManagerFollowupUpdateTvOSIdentifier
|| __DATA_CONST.__const _HMErrorCodeInvalidParametersDescription
|| __DATA_CONST.__const _HMErrorCodeNilCompletionHandlerDescription
|| __DATA_CONST.__const _HMErrorDomain
|| __DATA_CONST.__const _HMFMessageNameLocalMeshElectionCurrentPrimaryUpdate
|| __DATA_CONST.__const _HMFMessageNameLocalMeshElectionRequestCapabilities
|| __DATA_CONST.__const _HMFMessageNameLocalMeshElectionRequestCurrentPrimary
|| __DATA_CONST.__const _HMFMessageNamePrimaryElectionMeshInformationRequest
|| __DATA_CONST.__const _HMFPreferenceAllowSiriForUncertifiedAccessories
|| __DATA_CONST.__const _HMFPreferenceAllowVendorDataOverride
|| __DATA_CONST.__const _HMFPreferenceHAPBonjourBrowserHelperPeriod
|| __DATA_CONST.__const _HMFPreferenceHAPMetricsLoggingPeriod
|| __DATA_CONST.__const _HMFPreferenceHMDConfigurationDataLoggingPeriod
|| __DATA_CONST.__const _HMFPreferenceHMDEventAggregationAnalysisLoggingPeriod
|| __DATA_CONST.__const _HMMediaGroupsentinelIdentifierString
|| __DATA_CONST.__const _HMMultiuserSettingsFetchRequestMessage
|| __DATA_CONST.__const _HMPresenceKeyPath
|| __DATA_CONST.__const _HMSetupCodeProviderReasonInitial
|| __DATA_CONST.__const _HMSignificantEventSunrise
|| __DATA_CONST.__const _HMSignificantEventSunset
|| __DATA_CONST.__const _HomeUtilRemoteMessageDestinationKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageDeviceCapabilitiesKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageIsOnewayKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageIsSecureKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageMessageNameKey
|| __DATA_CONST.__const _HomeUtilRemoteMessagePayloadKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageRequestMessage
|| __DATA_CONST.__const _HomeUtilRemoteMessageRestrictionKey
|| __DATA_CONST.__const _HomeUtilRemoteMessageTargetKey
|| __DATA_CONST.__const _PowerOnQueueAdvertisement
|| __DATA_CONST.__const _PowerOnQueueReachability
|| __DATA_CONST.__const _SCAN_QUEUE_NAME
|| __DATA_CONST.__const _TRCompanionAuthOperationUnauthenticatedServicesKey
|| __DATA_CONST.__const _authServerLocaleKey
|| __DATA_CONST.__const _authServerPPIDKey
|| __DATA_CONST.__const _authServerPPIDMetadataAccessoryNameKey
|| __DATA_CONST.__const _authServerPPIDMetadataBlacklistedKey
|| __DATA_CONST.__const _authServerPPIDMetadataCategoryKey
|| __DATA_CONST.__const _authServerPPIDMetadataCertStatusKey
|| __DATA_CONST.__const _authServerPPIDMetadataKey
|| __DATA_CONST.__const _authServerPPIDMetadataManufactureBrandKey
|| __DATA_CONST.__const _authServerPPIDMetadataModelKey
|| __DATA_CONST.__const _kAccessAllowedWhenLockedKey
|| __DATA_CONST.__const _kAccessoriesListKey
|| __DATA_CONST.__const _kAccessoryAddedNotificationKey
|| __DATA_CONST.__const _kAccessoryCertificationStatusKey
|| __DATA_CONST.__const _kAccessoryCharacteristicsChangedInternalNotificationKey
|| __DATA_CONST.__const _kAccessoryDescriptionDataKey
|| __DATA_CONST.__const _kAccessoryInfoManufacturerKey
|| __DATA_CONST.__const _kAccessoryInstanceIDKey
|| __DATA_CONST.__const _kAccessoryIsReachableKey
|| __DATA_CONST.__const _kAccessoryNameKey
|| __DATA_CONST.__const _kAccessoryNotificationsUpdatedNotificationKey
|| __DATA_CONST.__const _kAccessorySetupCodeDeferredKey
|| __DATA_CONST.__const _kAccessorySetupProgressKey
|| __DATA_CONST.__const _kAccessoryUUIDKey
|| __DATA_CONST.__const _kActionInfoKey
|| __DATA_CONST.__const _kActionSetNameKey
|| __DATA_CONST.__const _kActionTypeKey
|| __DATA_CONST.__const _kActionUUIDKey
|| __DATA_CONST.__const _kAddAccessoriesInternalRequestKey
|| __DATA_CONST.__const _kAddAccessoryRequestKey
|| __DATA_CONST.__const _kAddActionRequestKey
|| __DATA_CONST.__const _kAddActionSetRequestKey
|| __DATA_CONST.__const _kAddEventTriggerRequestKey
|| __DATA_CONST.__const _kAddHomeRequestKey
|| __DATA_CONST.__const _kAddRoomRequestKey
|| __DATA_CONST.__const _kAddZoneRequestKey
|| __DATA_CONST.__const _kAllowRetailDemoModeEditingKey
|| __DATA_CONST.__const _kAppleBundleIdentifierPrefix
|| __DATA_CONST.__const _kAssistantServiceBundleIdentifier
|| __DATA_CONST.__const _kAsyncCompletionReportNotification
|| __DATA_CONST.__const _kAudioCodecCapabilities
|| __DATA_CONST.__const _kAudioStreamSetting
|| __DATA_CONST.__const _kBackingStoreObjectBaseUUID
|| __DATA_CONST.__const _kBulletinBoardNotificationServiceGroupUpdateNotificationKey
|| __DATA_CONST.__const _kCameraSessionError
|| __DATA_CONST.__const _kCameraSessionID
|| __DATA_CONST.__const _kCameraSessionPreference
|| __DATA_CONST.__const _kCameraSnapshotCharacteristicEventUUID
|| __DATA_CONST.__const _kCameraSnapshotIDSRelayFileData
|| __DATA_CONST.__const _kCameraSnapshotIDSRelayTimestamp
|| __DATA_CONST.__const _kCanCacheHomeConfigurationKey
|| __DATA_CONST.__const _kCanUseCachedHomeConfigurationKey
|| __DATA_CONST.__const _kCharacterisiticsChangedInternalNotificationKey
|| __DATA_CONST.__const _kCharacteristicAuthorizationDataCodingKey
|| __DATA_CONST.__const _kCharacteristicBroadcastNotificationEnabledCodingKey
|| __DATA_CONST.__const _kCharacteristicBroadcastValueUpdateKey
|| __DATA_CONST.__const _kCharacteristicCodingKey
|| __DATA_CONST.__const _kCharacteristicContextDataForWriteKey
|| __DATA_CONST.__const _kCharacteristicErrorDataKey
|| __DATA_CONST.__const _kCharacteristicInstanceIDCodingKey
|| __DATA_CONST.__const _kCharacteristicInstanceIDKey
|| __DATA_CONST.__const _kCharacteristicMetadataCodingKey
|| __DATA_CONST.__const _kCharacteristicNotificationContextKey
|| __DATA_CONST.__const _kCharacteristicNotificationEnableKey
|| __DATA_CONST.__const _kCharacteristicNotificationEnableTimeKey
|| __DATA_CONST.__const _kCharacteristicNotificationsKey
|| __DATA_CONST.__const _kCharacteristicPropertiesCodingKey
|| __DATA_CONST.__const _kCharacteristicReadRequestKey
|| __DATA_CONST.__const _kCharacteristicThresholdRangeEventThresholdRangeMax
|| __DATA_CONST.__const _kCharacteristicThresholdRangeEventThresholdRangeMin
|| __DATA_CONST.__const _kCharacteristicTypeCodingKey
|| __DATA_CONST.__const _kCharacteristicValueKey
|| __DATA_CONST.__const _kCharacteristicValueUpdateStateNumberKey
|| __DATA_CONST.__const _kCharacteristicValueUpdateTimeKey
|| __DATA_CONST.__const _kCharacteristicWriteRequestKey
|| __DATA_CONST.__const _kConfigRetailDemoMode
|| __DATA_CONST.__const _kConfigTestingAccessoryControlKey
|| __DATA_CONST.__const _kConfigTestingAddAccessoriesKey
|| __DATA_CONST.__const _kConfigTestingGenerateNotificationKey
|| __DATA_CONST.__const _kConfigTestingHomeAccessControlKey
|| __DATA_CONST.__const _kConfigTestingHomeLocationStatusKey
|| __DATA_CONST.__const _kConfigTestingMode
|| __DATA_CONST.__const _kConfigTestingOverrideCurrentHomeKey
|| __DATA_CONST.__const _kConfigTestingOverrideHomeAccessControlKey
|| __DATA_CONST.__const _kConfigTestingOverrideHomeLocationStatusKey
|| __DATA_CONST.__const _kConfigTestingOverrideKey
|| __DATA_CONST.__const _kConfigTestingOverrideSkipHH2MigrationCheckDictionaryKey
|| __DATA_CONST.__const _kConfigTestingOverrideToNilKey
|| __DATA_CONST.__const _kConfigTestingReadValueKey
|| __DATA_CONST.__const _kConfigTestingResetAccessoriesKey
|| __DATA_CONST.__const _kConfigTestingResetOverrideKey
|| __DATA_CONST.__const _kConfigTestingResponseDelayKey
|| __DATA_CONST.__const _kConfigTestingSetReachabilityKey
|| __DATA_CONST.__const _kConfigTestingSetReturnValueKey
|| __DATA_CONST.__const _kConfigTestingSkipMigrationCheckOverrideKey
|| __DATA_CONST.__const _kControllerAssistantTeamIdentifierKey
|| __DATA_CONST.__const _kDataSyncResponseAckKey
|| __DATA_CONST.__const _kDisableAccessoryReachabilityNotificationRequestKey
|| __DATA_CONST.__const _kDoNotForwardMessageKey
|| __DATA_CONST.__const _kDumpStateBackgroundOperations
|| __DATA_CONST.__const _kEffectiveBundleIdentifierForEntitledClients
|| __DATA_CONST.__const _kElectDeviceForIDSSessionKey
|| __DATA_CONST.__const _kEnableAccessoryReachabilityNotificationRequestKey
|| __DATA_CONST.__const _kEnabledKey
|| __DATA_CONST.__const _kEncryptedHomeDataBlobKey
|| __DATA_CONST.__const _kEventTriggerEndEvent
|| __DATA_CONST.__const _kEventUUIDKey
|| __DATA_CONST.__const _kExecuteActionSetRequestKey
|| __DATA_CONST.__const _kFilenameKey
|| __DATA_CONST.__const _kFinalizeRetailDemoSetupKey
|| __DATA_CONST.__const _kHMClientConnectionUUIDString
|| __DATA_CONST.__const _kHMDCloudDefaultOwner
|| __DATA_CONST.__const _kHMDCloudDoNotUploadRecordName
|| __DATA_CONST.__const _kHMDCloudHomeManagerRootRecordName
|| __DATA_CONST.__const _kHMDCloudHomeManagerSubscriptionName
|| __DATA_CONST.__const _kHMDCloudHomeManagerZoneName
|| __DATA_CONST.__const _kHMDCloudHomeZoneHomeDataRecordName
|| __DATA_CONST.__const _kHMDCloudHomeZoneRootRecordName
|| __DATA_CONST.__const _kHMDCloudHomeZoneRootSharedRecordName
|| __DATA_CONST.__const _kHMDCloudInformation
|| __DATA_CONST.__const _kHMDCloudLegacyHomeDataObjectID
|| __DATA_CONST.__const _kHMDCloudLegacyHomeDataObjectIDVersion3
|| __DATA_CONST.__const _kHMDCloudLegacyHomeDataRecordName
|| __DATA_CONST.__const _kHMDCloudLegacyHomeDataRecordVersion3Name
|| __DATA_CONST.__const _kHMDCloudLegacyMetadataDataKey
|| __DATA_CONST.__const _kHMDCloudLegacyMetadataObjectID
|| __DATA_CONST.__const _kHMDCloudLegacyMetadataRecordName
|| __DATA_CONST.__const _kHMDCloudLegacyMetadataRecordType
|| __DATA_CONST.__const _kHMDCloudLegacyRecordDataKey
|| __DATA_CONST.__const _kHMDCloudLegacyRecordDataVersion2Key
|| __DATA_CONST.__const _kHMDCloudLegacyRecordReadOnlyKey
|| __DATA_CONST.__const _kHMDCloudLegacyRecordType
|| __DATA_CONST.__const _kHMDCloudLegacyRecordVersion3Type
|| __DATA_CONST.__const _kHMDCloudLegacySubscriptionName
|| __DATA_CONST.__const _kHMDCloudLegacyZoneName
|| __DATA_CONST.__const _kHMDCloudMetadataRecordName
|| __DATA_CONST.__const _kHMDCloudMetadataSubscriptionName
|| __DATA_CONST.__const _kHMDCloudMetadataZoneName
|| __DATA_CONST.__const _kHMDCloudRecordDataKey
|| __DATA_CONST.__const _kHMDCloudRecordType
|| __DATA_CONST.__const _kHMDCloudRecordVersionKey
|| __DATA_CONST.__const _kHMDDataStreamCurrentProtocolVersion
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendDataKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendEndOfStreamKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendMetadataKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendPacketsKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendReasonKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendStreamIdentifierKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendTargetController
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendTargetKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendTypeKey
|| __DATA_CONST.__const _kHMDDataStreamMessageBulkSendTypeSiriAudio
|| __DATA_CONST.__const _kHMDDataStreamMessageCapabilityVersion
|| __DATA_CONST.__const _kHMDDataStreamMessageEventBulkSendAck
|| __DATA_CONST.__const _kHMDDataStreamMessageEventBulkSendClose
|| __DATA_CONST.__const _kHMDDataStreamMessageEventBulkSendData
|| __DATA_CONST.__const _kHMDDataStreamMessageEventBulkSendOpen
|| __DATA_CONST.__const _kHMDDataStreamMessageEventTargetControlWhoAmI
|| __DATA_CONST.__const _kHMDDataStreamMessageEventTopicKey
|| __DATA_CONST.__const _kHMDDataStreamMessageProtocolBulkSend
|| __DATA_CONST.__const _kHMDDataStreamMessageProtocolControl
|| __DATA_CONST.__const _kHMDDataStreamMessageProtocolKey
|| __DATA_CONST.__const _kHMDDataStreamMessageProtocolTargetControl
|| __DATA_CONST.__const _kHMDDataStreamMessageRequestHello
|| __DATA_CONST.__const _kHMDDataStreamMessageRequestIdentifierKey
|| __DATA_CONST.__const _kHMDDataStreamMessageRequestTopicKey
|| __DATA_CONST.__const _kHMDDataStreamMessageRequestVersion
|| __DATA_CONST.__const _kHMDDataStreamMessageResponseTopicKey
|| __DATA_CONST.__const _kHMDDataStreamMessageStatusKey
|| __DATA_CONST.__const _kHMDDataStreamMessageTargetControlIdentifierKey
|| __DATA_CONST.__const _kHMDDataStreamMessageVersionKey
|| __DATA_CONST.__const _kHMDHomePresenceMonitorCodingKey
|| __DATA_CONST.__const _kHMDHomePresenceMonitorPresenceMapCodingKey
|| __DATA_CONST.__const _kHMDHomePresenceMonitorPresenceStateCodingKey
|| __DATA_CONST.__const _kHMDHouseholdMetricsManagerTargetUUIDString
|| __DATA_CONST.__const _kHMDNotificationCharacteristicsUpdated
|| __DATA_CONST.__const _kHMDNotificationServicesUpdated
|| __DATA_CONST.__const _kHMDRemoteLoginAuthenticationRequest
|| __DATA_CONST.__const _kHMDRemoteLoginAuthenticationResponse
|| __DATA_CONST.__const _kHMDRemoteLoginCompanionAuthenticationRequest
|| __DATA_CONST.__const _kHMDRemoteLoginProxyAuthenticationRequest
|| __DATA_CONST.__const _kHMDRemoteLoginProxyDeviceRequest
|| __DATA_CONST.__const _kHMDRemoteLoginProxyDeviceResponse
|| __DATA_CONST.__const _kHMDRemoteLoginSignoutRequest
|| __DATA_CONST.__const _kHMEraseAnisetteDataRequest
|| __DATA_CONST.__const _kHMEraseAnisetteDataResponse
|| __DATA_CONST.__const _kHMFetchAnisetteDataRequest
|| __DATA_CONST.__const _kHMFetchAnisetteDataResponse
|| __DATA_CONST.__const _kHMLegacyAnisetteDataRequest
|| __DATA_CONST.__const _kHMLegacyAnisetteDataResponse
|| __DATA_CONST.__const _kHMProvisionAnisetteDataRequest
|| __DATA_CONST.__const _kHMProvisionAnisetteDataResponse
|| __DATA_CONST.__const _kHMSyncAnisetteDataRequest
|| __DATA_CONST.__const _kHMSyncAnisetteDataResponse
|| __DATA_CONST.__const _kHomeCountKey
|| __DATA_CONST.__const _kHomeDataSyncInternalRequestKey
|| __DATA_CONST.__const _kHomeKitDaemonBundleIdentifierKey
|| __DATA_CONST.__const _kHomeKitDaemonStringsEllipsis
|| __DATA_CONST.__const _kHomeKitLocalPrefsID
|| __DATA_CONST.__const _kHomeLocationCountryCodeCodingKey
|| __DATA_CONST.__const _kHomeLocationTimeZoneCodingKey
|| __DATA_CONST.__const _kHomeManagerUUIDString
|| __DATA_CONST.__const _kHomeManagerZoneUUID
|| __DATA_CONST.__const _kHomeNameKey
|| __DATA_CONST.__const _kHomeUUIDKey
|| __DATA_CONST.__const _kHomedSupportedFeaturesKey
|| __DATA_CONST.__const _kHomedVersionKey
|| __DATA_CONST.__const _kIdentifierSaltKey
|| __DATA_CONST.__const _kIncomingHomeInvitationsUpdated
|| __DATA_CONST.__const _kIsUserInitiated
|| __DATA_CONST.__const _kLabel
|| __DATA_CONST.__const _kMediaNotificationsKey
|| __DATA_CONST.__const _kMediaPropertiesListKey
|| __DATA_CONST.__const _kMeshPayload
|| __DATA_CONST.__const _kMeshPreferredDevice
|| __DATA_CONST.__const _kMigratedEventsToRecords
|| __DATA_CONST.__const _kMigratedEventsToRecordsRequest
|| __DATA_CONST.__const _kModifiedCharacteristicsForAccessoryKey
|| __DATA_CONST.__const _kModifiedCharacteristicsKey
|| __DATA_CONST.__const _kModifiedCharacteristicsMessageIdentifierKey
|| __DATA_CONST.__const _kModifiedNotificationsForAccessoryKey
|| __DATA_CONST.__const _kModifyCharacterisiticNotificationsInternalRequestKey
|| __DATA_CONST.__const _kMultiPartResponseKey
|| __DATA_CONST.__const _kMultipleCharacteristicReadRequestKey
|| __DATA_CONST.__const _kMultipleCharacteristicValuesUpdatedNotificationKey
|| __DATA_CONST.__const _kMultipleCharacteristicWriteRequestKey
|| __DATA_CONST.__const _kNegotitateRemoteStreamRequestKey
|| __DATA_CONST.__const _kNetworkIdentifierKey
|| __DATA_CONST.__const _kNewObjectUUIDKey
|| __DATA_CONST.__const _kNotificationRegistryCodingKey
|| __DATA_CONST.__const _kNotificationUpdateIdentifierKey
|| __DATA_CONST.__const _kOverrideLocationBundleIdentifier
|| __DATA_CONST.__const _kPresenceComputeStatusUpdate
|| __DATA_CONST.__const _kPresenceDictionaryForNotificationKey
|| __DATA_CONST.__const _kPresenceEventPresence
|| __DATA_CONST.__const _kPresenceEventUsers
|| __DATA_CONST.__const _kPresencePairingIdentifierDictionaryForNotificationKey
|| __DATA_CONST.__const _kProvisioningStatusKey
|| __DATA_CONST.__const _kReactivateAfterTriggeredRequestKey
|| __DATA_CONST.__const _kReconfigureRemoteStreamRequestKey
|| __DATA_CONST.__const _kRemoteMessageHH1IdentifierKey
|| __DATA_CONST.__const _kRemoteMessageIDSToIDKey
|| __DATA_CONST.__const _kRemoteMessageIsFinalResponseKey
|| __DATA_CONST.__const _kRemoteMessageIsModernTransportUsedKey
|| __DATA_CONST.__const _kRemoteMessageIsRapportLinkSlowKey
|| __DATA_CONST.__const _kRemoteMessageNameKey
|| __DATA_CONST.__const _kRemoteMessagePayloadKey
|| __DATA_CONST.__const _kRemoteMessageQoSKey
|| __DATA_CONST.__const _kRemoteMessageRequestTransactionIDKey
|| __DATA_CONST.__const _kRemoteMessageResponseErrorDataKey
|| __DATA_CONST.__const _kRemoteMessageSourceIDKey
|| __DATA_CONST.__const _kRemoteMessageTransportAttributionKey
|| __DATA_CONST.__const _kRemoteUsersDeregisteredKey
|| __DATA_CONST.__const _kRemoveAccessoryRequestKey
|| __DATA_CONST.__const _kRemoveObjects
|| __DATA_CONST.__const _kRemovedMediaSessionIdentifiersKey
|| __DATA_CONST.__const _kRenameActionSetRequestKey
|| __DATA_CONST.__const _kRenameHomeRequestKey
|| __DATA_CONST.__const _kReplaceActionValueRequestKey
|| __DATA_CONST.__const _kRequestIdentifierKey
|| __DATA_CONST.__const _kRequestedCapabilitiesKey
|| __DATA_CONST.__const _kRequiredCapabilitiesKey
|| __DATA_CONST.__const _kResidentProvisioningStatusChangedNotificationKey
|| __DATA_CONST.__const _kRoomNameKey
|| __DATA_CONST.__const _kRoomUUIDKey
|| __DATA_CONST.__const _kSQLiteStore
|| __DATA_CONST.__const _kSQLiteStore2
|| __DATA_CONST.__const _kSearchForNewAccessoriesRequestKey
|| __DATA_CONST.__const _kSecureClientIDSMessageInternalRequestKey
|| __DATA_CONST.__const _kSecureServerIDSMessageInternalRequestKey
|| __DATA_CONST.__const _kServiceInstanceIDKey
|| __DATA_CONST.__const _kServiceNameKey
|| __DATA_CONST.__const _kSiriBundleIdentifier
|| __DATA_CONST.__const _kSiriSyncDataRequestKey
|| __DATA_CONST.__const _kSourceTypeKey
|| __DATA_CONST.__const _kStartRecordingSessionRequestKey
|| __DATA_CONST.__const _kStartRemoteStreamRequestKey
|| __DATA_CONST.__const _kStartSearchKey
|| __DATA_CONST.__const _kStopRemoteStreamRequestKey
|| __DATA_CONST.__const _kStopSearchReasonKey
|| __DATA_CONST.__const _kStreamRemoteConnectionSetupNotificationKey
|| __DATA_CONST.__const _kStreamStoppedRemoteNotificationKey
|| __DATA_CONST.__const _kStreamingTierType
|| __DATA_CONST.__const _kSupportsComfortNoise
|| __DATA_CONST.__const _kTakeSnapshotRemoteReceivedKey
|| __DATA_CONST.__const _kTakeSnapshotRemoteRequestKey
|| __DATA_CONST.__const _kTakeSnapshotSendFailedNotificationKey
|| __DATA_CONST.__const _kTargetControlClientIdentifierKey
|| __DATA_CONST.__const _kTransactionMigration
|| __DATA_CONST.__const _kTransactionUpdate
|| __DATA_CONST.__const _kTriggerNameKey
|| __DATA_CONST.__const _kTriggerSourceInternalMessageKey
|| __DATA_CONST.__const _kUpdateAccessAllowedWhenLockedRequestKey
|| __DATA_CONST.__const _kUpdateAccessoryConnectionStateKey
|| __DATA_CONST.__const _kUpdateObjects
|| __DATA_CONST.__const _kUserCamerasAccessLevelInformationKey
|| __DATA_CONST.__const _kUserDisplayNameCodingKey
|| __DATA_CONST.__const _kUserIDKey
|| __DATA_CONST.__const _kUserManagementOperationIdentifiersKey
|| __DATA_CONST.__const _kUserManagementUnprocessedOperationModelsKey
|| __DATA_CONST.__const _kUserPresenceAuthStatusKey
|| __DATA_CONST.__const _kUserPresenceUserKey
|| __DATA_CONST.__const _kUserUUIDKey
|| __DATA_CONST.__const _kVideoCodecCapabilities
|| __DATA_CONST.__const _kVideoResolutionCapabilities
|| __DATA_CONST.__const _kZoneNameKey
|| __DATA_CONST.__const _v4CloudSyncHomeDataPushTopicString
|| __DATA_CONST.__const _xpckHMDRemoteLoginAuthenticationRequest
|| __DATA_CONST.__const _xpckHMDRemoteLoginAuthenticationResponse
|| __DATA_CONST.__const _xpckHMDRemoteLoginCompanionAuthenticationRequest
|| __DATA_CONST.__const _xpckHMDRemoteLoginProxyAuthenticationRequest
|| __DATA_CONST.__const _xpckHMDRemoteLoginProxyDeviceRequest
|| __DATA_CONST.__const _xpckHMDRemoteLoginProxyDeviceResponse
|| __DATA_CONST.__const _xpckHMDRemoteLoginSignoutRequest
|| __DATA_CONST.__const _xpckHMEraseAnisetteDataRequest
|| __DATA_CONST.__const _xpckHMEraseAnisetteDataResponse
|| __DATA_CONST.__const _xpckHMFetchAnisetteDataRequest
|| __DATA_CONST.__const _xpckHMFetchAnisetteDataResponse
|| __DATA_CONST.__const _xpckHMLegacyAnisetteDataRequest
|| __DATA_CONST.__const _xpckHMLegacyAnisetteDataResponse
|| __DATA_CONST.__const _xpckHMProvisionAnisetteDataRequest
|| __DATA_CONST.__const _xpckHMProvisionAnisetteDataResponse
|| __DATA_CONST.__const _xpckHMSyncAnisetteDataRequest
|| __DATA_CONST.__const _xpckHMSyncAnisetteDataResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AWDHomeKitConfigurationData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AWDHomeKitDatabaseCKOperationCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AWDHomeKitHomeConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AWDHomeKitMultiUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AWDHomeKitMultiUserSettingsValueByKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAWDLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAWDRemoteSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessCodeDataManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessCodeDemoDataMocker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessCodeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessCodeManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessCodeManagerUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryAccessCodeReaderWriter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryAllowedHost
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryBrowser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryBrowserInjectedSettingsDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryCount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateConcurrencyLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateConcurrencyLogEventManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateManagerWingman
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdatePolicyCriteria
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdatePolicyServiceConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryFirmwareUpdateTimeWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryInvitation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkAccessViolation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkProtectionGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryNetworkProtectionGroupRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryPairingEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryReachabilityChangedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryReachabilityChangedLogEventManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySetting
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySettingGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsLegacyMessageReceiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsLocalMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySettingsMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySetupManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySoftwareUpdateApplyEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessorySymptomHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccessoryTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccountHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccountHandleFormatter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccountIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAccountRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDActionSet
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDActionSetEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDActiveXPCConnectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAddAccessoryRequestInformation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAddActionSetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAggregateRemoteMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAggregateXPCMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAggregationAnalysisLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAirPlay2Preference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAirPlayAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAnalyticsMultiUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAnalyticsMultiUserSettingsValueByKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAnnounceUserSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleAccountContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleAccountManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleAccountSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleHomePodAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoriesStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoriesStateManagerMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoriesStateMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryDailySetRoomEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMatchingIdentifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaAccessorySetupLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAppleMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDApplicationData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDApplicationRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDApplicationVendorIDStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDApplicationVendorIDStoreValue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssertionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantAccessControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantAccessControlModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantAccessControlModelV2
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantAccessControlModifiedEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantGather
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAssistantWatchAuthenticationDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDAuthServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBLEBroadcastEventKeyGeneration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBLEBroadcastEventReceived
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackgroundSystemTaskScheduler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCKOperationZoneCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCKRebuildEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheCreateGroupOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheCreateZoneOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchMigratedResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchRecords
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheFetchZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheUpdateGroupSubscriptionOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheUpdateGroupTokenOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreCacheZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreLocal
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogAddTransactionOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogChangesExistFetchOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreLogFetchOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreModelObject
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreModelObjectStorageInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreModelObjectStorageInfoDeprecatedField
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreModelObjectUnsupported
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreSaveToPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreSingleton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreTransactionActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreTransactionBlock
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreTransactionItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBackingStoreTransactionOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBiomeEventManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBiomeLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBonjourBrowserHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBulletinBoard
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBulletinBoardNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDBulletinBoardNotificationServiceGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCHIPHomeStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCalendarEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraAnalysisStatePublisher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraClipManagerRequestLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraClipModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraClipsQuotaManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraConfigurationsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraMetricsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraMetricsSnapshotLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraMetricsStreamLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingBulkSessionEndLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingBulkSessionStartLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingClipNotificationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingFragmentAnalyzedEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingLoadBalancer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingLoadBalancerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingReachabilityLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingSessionCoordinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraRecordingUploadOperationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraSignificantEventNotificationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCameraSnapshotManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCapabilitiesController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCarPlayDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicEventBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicReadWriteLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicThresholdRangeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCharacteristicWriteAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudAccount
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudAccountOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudChangeTree
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudDataSyncStateFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudGroupChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudHomeManagerZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudHomeZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudLegacyZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudLegacyZoneChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudManagerMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudManagerModelFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudMetadataZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudPhotosSettingObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareParticipantsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareTrustManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareTrustManagerFailureLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareTrustManagerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareTrustManagerMetricsEventDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudShareTrustManagerTrustActivityLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncAnalysisResultLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncLegacyFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncLegacyUploadLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncLogEventDataSyncStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncLogEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncOperationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncUploadLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudSyncUploadReasonLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudZoneChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCloudZoneInformation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompanionLinkClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingControllerManagerStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsCloudStartupLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsControllerFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsControllerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsControllerManagerOnboardingLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsControllerUpdateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCompositeSettingsOwnerToDatabaseAdapterRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDConfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDConfigurationMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDConfigurationMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDConfigurationResetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCoordinationPrimaryElectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCoordinationPrimaryMeshLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCoreAnalyticsLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCounterRateLoggingTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDCounterThresholdLoggingTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDataSyncStateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDatabase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDatabaseCKOperationCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDatabaseFetchZonesResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDatabaseZoneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDatabaseZoneManagerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDecryptionCompletedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDefaultResidentDeviceManagerLegacyDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDelegatingMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceAddress
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceCapabilitiesModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceLockStateDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDeviceSetupManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDiagnosticReporterLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDoorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDoorbellBulletinUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDoorbellChimeNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDuetEventManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDuetPredictionSubscriber
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDDurationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEducationModeMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDErrorAggregationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventCounter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventCounterGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventCounterGroupNameSpecifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventCountersManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventCountersPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventRouterTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDEventTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFMF
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFMFHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFMFQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFMFRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFaceCropModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFamiliarFacesBulletinLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFeaturesDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDFileManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDGarageDoorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAP2Storage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryConnectionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryNotificationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryReaderWriter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryReaderWriterDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryTaskTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPAccessoryTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetadataAssistantCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetadataCategory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetricsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetricsReachabilityAddRemoveEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetricsReachabilityTimerLateEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHAPMetricsStateNumberChangeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2AutoMigrationEligibilityChecker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2AutoMigrationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2FrameworkSwitch
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2FrameworkSwitchDefaultDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2MigrationStateLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHH2MigratorRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHMBLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHTTPDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHTTPMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHelperExternalProtocolImpl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHome
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeAdministratorHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeConfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeConfigurationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeInviteLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeKitVersion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeLightBrightnessLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeLocalDeviceCapabilitiesDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeLocationHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeLockNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeLockNotificationManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeManagerObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeManagerXPCMessageSendPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeManagerXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMediaSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMediaSystemControllerMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMediaSystemHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMetricsDispatcherFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeMigrationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNFCReaderKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNFCReaderKeyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNFCReaderKeyModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNaturalLightingCurveWriter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNetworkRouterManagingDeviceSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeNetworkRouterSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeObjectChangeHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePersonDataManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePersonManagerSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePodSetupLatencyLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePresenceBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePrimaryResidentInitialReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomePrimaryResidentInitialReachabilityManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeRemoteEventRouterClientController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeRemoteEventRouterClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeReprovisionHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeSaveRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeSettingsBaseModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeThreadNetworkModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeWalletDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeWalletKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeyAccessoryManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHomeWalletKeySecureElementInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdActivityLogEventContributor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdActivityLogEventFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdMetricsClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdMetricsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdMetricsMessagingProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdMetricsRequestContributor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDHouseholdMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSActivityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSActivityMonitorBroadcaster
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSActivityMonitorHomeManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSActivityMonitorObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSActivityRegistrationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSDate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSFirewallManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSFirewallManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSProxyMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSServerBag
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIDSServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIdentityRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIncomingCloudPushLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDIncomingHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDKeyTransferAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDKeyTransferAgentClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDKeyTransferAgentServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLaunchEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLaunchHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLegacyPrimaryElectionConfirmationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLegacyPrimaryElectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLightBrightnessLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLightProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLightProfileDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLightProfileNaturalLightingAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLocation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLocationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLockLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventAccessoryFirmwareUpdateEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventDailyScheduler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventElectionEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventErrorEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventHAPMetricsEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventHistograms
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventMessageEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventProcessLaunchAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventProcessMemoryEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventReachabilityEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLogEventUserActivityAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLostModeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLostModeMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDLowPowerModeProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMPCSessionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMPCSessionControllerExecutionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMainDriver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDManagedStagedValue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaActionRouter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaBrowser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaBrowserDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaContentProfileAccessControlModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerDailySetDestinationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerDestinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerFailureLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaDestinationManagerFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaGroupParticipantLocalDataStorage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaGroupsAggregatorBackupReceiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaGroupsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaPlaybackAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaPlaybackActionEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaPreference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaSystem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaSystemComponent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMediaSystemExtended
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMemoryLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMemoryUtilizationTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMessageDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMessageFilterChain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMessageHandlerFailureMetricEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMetricsDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMetricsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMicroLocationLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMicroLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMobileAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMobileGestaltClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDModernRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDModernTransportDeviceReachabilityObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDModernTransportMessageContextManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMotionSensorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMultiUserNewLanguageNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMultiUserSettingsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMultiUserStatusController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMultiuserSettingsMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMutableDatabaseZoneManagerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMutableHomeData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMutableHomeManagerXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMutableRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDMutableUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNameValidator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNaturalLightingContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNetworkRouterProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNetworkRouterSatelliteProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNotificationRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDNotificationRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDOutgoingHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPairedSync
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPersonSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPersonSettingsManagerDependencyFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPhotoLibraryImportingFaceCropsImportedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPhotoLibraryImportingPersonsImportedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPhotosPersonManagerSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPowerLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPowerLogObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPowerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPredicateUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPresenceEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrimaryElectionLegacyAddOn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrimaryResidentChangeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrimaryResidentMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrimaryResidentMessageRouterFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrimaryResidentMessageRouterMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDPrivateUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessExitInfoLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessLaunchInfoLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessMemoryPressureNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDProcessRelaunchThresholdLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRPIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRapportMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRapportMessaging
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRapportMessagingClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRecordChangedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRecordOperationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRecordsSavedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteAccountManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteAccountMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteDeviceMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteDeviceReachabilityChangeLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterClientMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterClientRetryIntervals
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterPrimaryResidentClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteEventRouterServerMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteKeyedArchiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteLoginAnisetteDataProviderBridge
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteLoginHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageExceedBudgetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageForwarder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageNotifications
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRemovedUser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResetConfigPostCleanup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentDeviceManagerFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentDeviceManagerLegacy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentReachabilityContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentReachabilityNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDResidentUser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDRoom
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSBSRemoteAlertHandleProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSecureRemoteMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSecureRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSecureRemoteMessageTransportDefaultDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDServiceGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSetting
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingAlgorithm
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingConstraint
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingConstraintModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingGroupModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingRootGroupModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingsControllerDependency
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingsMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSettingsMetadataParser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSharedHomeUpdateHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSharedUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSharingDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDShortcutAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSignificantTimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriCommandEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointOnboardingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfile
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfileRoutineConfigurationEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriEndpointProfilesMessenger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriMultiUserNewLanguageNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriMultiUserNewLanguageNotificationManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriSecureAccessoryAccessController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSiriSyncEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateAutomaticUpdateToggledEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateFetchedEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSoftwareUpdateStartedEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSymptomManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSyncOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSyncOperationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSyncOperationOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDSyncOperationQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTargetControllerCommandEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTargetControllerErrorEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimeBasedFlagDaily
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimeBasedFlagNameSpecifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimeBasedFlagsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimeBasedFlagsPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTimerTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTriggerDeleteAfterExecutionPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTriggerDeletePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDTriggerPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedAirPlayAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedAppleHomePodAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedAppleMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedFaceCropModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnassociatedWACAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnexpectedNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnifiedLanguageValueListSettingDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUnpairedHAPAccessory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUploadMaximumDelayLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserActionPredictionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserActionPredictionModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserCloudShareController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserCloudShareManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserCloudShareManagerCreatorDependency
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserCloudShareOwnerAdoptionDailyEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserCloudShareParticipantAdoptionDailyEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserDataController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserDataControllerTimerCreator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserDataZoneControllerShareLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserListeningHistoryUpdateControlModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserManagementOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserManagementOperationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserPhotosPersonDataManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserPresenceFeeder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserPresenceUpdateReason
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserSettingsBackingStoreController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDUserSupportsAutomaticHH2MigrationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWACBrowser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWACScanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWHAAccessControlEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWHASettingEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWalletPassLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWatchManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWatchSystemState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWiFiReconfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWidgetConfigurationReader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDWidgetTimelineRefresher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCActivityInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCActivityRunReportLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCBackgroundMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCBackgroundMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCClientConnectionFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCEntitlementMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCEventRouterServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCKeyedArchiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageCountTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageSendPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCMessageTransportFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDXPCRequestTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDZone
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMDarwinNotificationProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDConfigurationMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDXPCBackgroundMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMFObjectCacheHMDXPCMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMIdentifierSaltStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMPBEncodeOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HMPBMetadata
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventRemoteLoginEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventRemoteLogoutEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventTriggerAddLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventTriggerExecutionSessionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventTriggerUpdateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_HomeKitEventTriggerUserConfirmationSendLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__HMDAccountIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__HMDDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__HMDGlobalDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__HMDLocalDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$___HMDRegisteredAccountIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$___HMDRegisteredDeviceIdentity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$___HMDRegisteredIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AWDHomeKitConfigurationData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AWDHomeKitDatabaseCKOperationCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AWDHomeKitHomeConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AWDHomeKitMultiUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AWDHomeKitMultiUserSettingsValueByKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAWDLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAWDRemoteSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessCodeDataManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessCodeDemoDataMocker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessCodeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessCodeManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessCodeManagerUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryAccessCodeReaderWriter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryAllowedHost
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryBrowser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryBrowserInjectedSettingsDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryCount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateConcurrencyLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateConcurrencyLogEventManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateManagerWingman
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdatePolicyCriteria
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdatePolicyServiceConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryFirmwareUpdateTimeWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryInvitation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkAccessViolation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkProtectionGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryNetworkProtectionGroupRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryPairingEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryReachabilityChangedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryReachabilityChangedLogEventManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySetting
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsLegacyMessageReceiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsLocalMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySettingsMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySetupManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySoftwareUpdateApplyEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessorySymptomHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccessoryTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccountHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccountHandleFormatter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccountIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAccountRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDActionSet
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDActionSetEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDActiveXPCConnectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAddAccessoryRequestInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAddActionSetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAggregateRemoteMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAggregateXPCMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAggregationAnalysisLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAirPlay2Preference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAirPlayAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAnalyticsMultiUserSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAnalyticsMultiUserSettingsValueByKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAnnounceUserSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleAccountContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleAccountManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleAccountSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleHomePodAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoriesStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoriesStateManagerMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoriesStateMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryDailySetRoomEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMatchingIdentifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaAccessorySetupLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAppleMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDApplicationData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDApplicationRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDApplicationVendorIDStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDApplicationVendorIDStoreValue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssertionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantAccessControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantAccessControlModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantAccessControlModelV2
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantAccessControlModifiedEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantGather
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAssistantWatchAuthenticationDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDAuthServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBLEBroadcastEventKeyGeneration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBLEBroadcastEventReceived
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackgroundSystemTaskScheduler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCKOperationZoneCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCKRebuildEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheCreateGroupOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheCreateZoneOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchMigratedResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchRecords
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheFetchZonesOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheUpdateGroupSubscriptionOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheUpdateGroupTokenOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreCacheZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLocal
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogAddTransactionOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogChangesExistFetchOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreLogFetchOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreModelObject
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreModelObjectStorageInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreModelObjectStorageInfoDeprecatedField
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreModelObjectUnsupported
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreSaveToPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreSingleton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreTransactionActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreTransactionBlock
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreTransactionItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBackingStoreTransactionOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBiomeEventManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBiomeLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBonjourBrowserHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBulletinBoard
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBulletinBoardNotification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDBulletinBoardNotificationServiceGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCHIPHomeStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCalendarEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraAnalysisStatePublisher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraClipManagerRequestLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraClipModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraClipsQuotaManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraConfigurationsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraMetricsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraMetricsSnapshotLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraMetricsStreamLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingBulkSessionEndLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingBulkSessionStartLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingClipNotificationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingFragmentAnalyzedEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingLoadBalancer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingLoadBalancerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingReachabilityLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingSessionCoordinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraRecordingUploadOperationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraSignificantEventNotificationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCameraSnapshotManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCapabilitiesController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCarPlayDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicEventBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicReadWriteLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicThresholdRangeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCharacteristicWriteAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudAccount
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudAccountOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudChangeTree
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudDataSyncStateFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudGroupChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudHomeManagerZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudHomeZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudLegacyZoneChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudManagerMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudManagerModelFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudMetadataZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudPhotosSettingObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareParticipantsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareTrustManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareTrustManagerFailureLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareTrustManagerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareTrustManagerMetricsEventDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudShareTrustManagerTrustActivityLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncAnalysisResultLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncLegacyFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncLegacyUploadLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncLogEventDataSyncStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncLogEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncOperationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncUploadLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudSyncUploadReasonLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudZoneChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCloudZoneInformation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompanionLinkClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingControllerManagerStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsCloudStartupLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsControllerFetchLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsControllerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsControllerManagerOnboardingLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsControllerUpdateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCompositeSettingsOwnerToDatabaseAdapterRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDConfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDConfigurationMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDConfigurationMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDConfigurationResetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCoordinationPrimaryElectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCoordinationPrimaryMeshLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCoreAnalyticsLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCounterRateLoggingTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDCounterThresholdLoggingTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDataSyncStateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDatabase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDatabaseCKOperationCompletionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDatabaseFetchZonesResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDatabaseZoneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDatabaseZoneManagerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDecryptionCompletedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDefaultResidentDeviceManagerLegacyDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDelegatingMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceAddress
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceCapabilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceCapabilitiesModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceLockStateDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDeviceSetupManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDiagnosticReporterLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDoorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDoorbellBulletinUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDoorbellChimeNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDuetEventManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDuetPredictionSubscriber
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDDurationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEducationModeMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDErrorAggregationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventCounter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventCounterGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventCounterGroupNameSpecifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventCountersManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventCountersPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventRouterTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDEventTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFMF
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFMFHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFMFQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFMFRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFaceCropModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFamiliarFacesBulletinLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFeaturesDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDFileManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDGarageDoorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAP2Storage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryConnectionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryNotificationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryReaderWriter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryReaderWriterDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryTaskTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPAccessoryTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetadataAssistantCharacteristic
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetadataCategory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetricsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetricsReachabilityAddRemoveEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetricsReachabilityTimerLateEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHAPMetricsStateNumberChangeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2AutoMigrationEligibilityChecker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2AutoMigrationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2FrameworkSwitch
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2FrameworkSwitchDefaultDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2MigrationStateLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHH2MigratorRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHMBLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHTTPDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHTTPMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHelperExternalProtocolImpl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHome
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeAdministratorHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeConfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeConfigurationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeInviteLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeKitVersion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeLightBrightnessLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeLocalDeviceCapabilitiesDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeLocationHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeLockNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeLockNotificationManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeManagerObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeManagerXPCMessageSendPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeManagerXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMediaSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMediaSystemControllerMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMediaSystemHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMetricsDispatcherFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeMigrationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNFCReaderKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNFCReaderKeyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNFCReaderKeyModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNaturalLightingCurveWriter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNetworkRouterManagingDeviceSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeNetworkRouterSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeObjectChangeHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePersonDataManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePersonManagerSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePodSetupLatencyLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePresenceBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePrimaryResidentInitialReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomePrimaryResidentInitialReachabilityManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeRemoteEventRouterClientController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeRemoteEventRouterClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeReprovisionHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeSaveRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeSettingsBaseModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeThreadNetworkModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeWalletDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeyAccessoryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHomeWalletKeySecureElementInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdActivityLogEventContributor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdActivityLogEventFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdMetricsClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdMetricsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdMetricsMessagingProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdMetricsRequestContributor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDHouseholdMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSActivityMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSActivityMonitorBroadcaster
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSActivityMonitorHomeManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSActivityMonitorObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSActivityRegistrationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSDate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSFirewallManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSFirewallManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSProxyMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSServerBag
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIDSServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIdentityRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIncomingCloudPushLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDIncomingHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDKeyTransferAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDKeyTransferAgentClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDKeyTransferAgentServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLaunchEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLaunchHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLegacyPrimaryElectionConfirmationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLegacyPrimaryElectionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLightBrightnessLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLightProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLightProfileDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLightProfileNaturalLightingAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLocation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLocationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLockLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventAccessoryFirmwareUpdateEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventDailyScheduler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventElectionEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventErrorEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventHAPMetricsEventAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventHistograms
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventMessageEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventProcessLaunchAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventProcessMemoryEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventReachabilityEventsAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLogEventUserActivityAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLostModeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLostModeMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDLowPowerModeProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMPCSessionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMPCSessionControllerExecutionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMainDriver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDManagedStagedValue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaActionRouter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaBrowser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaBrowserDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaContentProfileAccessControlModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerDailySetDestinationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerDestinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerFailureLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaDestinationManagerFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaGroupParticipantLocalDataStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsAggregatorBackupReceiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaGroupsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaPlaybackAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaPlaybackActionEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaPreference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaSystem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaSystemComponent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMediaSystemExtended
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMemoryLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMemoryUtilizationTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMessageDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMessageFilterChain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMessageHandlerFailureMetricEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMetricsDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMetricsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMicroLocationLogEventObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMicroLocationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMobileAssetManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMobileGestaltClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDModernRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDModernTransportDeviceReachabilityObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDModernTransportMessageContextManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMotionSensorLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMultiUserNewLanguageNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMultiUserSettingsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMultiUserStatusController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMultiuserSettingsMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMutableDatabaseZoneManagerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMutableHomeData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMutableHomeManagerXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMutableRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDMutableUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNameValidator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNaturalLightingContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNetworkRouterSatelliteProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNotificationRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDNotificationRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDObjectLookup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDOutgoingHomeInvitation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPairedSync
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPersonSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPersonSettingsManagerDependencyFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPhotoLibraryImportingFaceCropsImportedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPhotoLibraryImportingPersonsImportedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPhotosPersonManagerSettingsModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPowerLogObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPowerLogObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPowerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPredicateUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPresenceEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrimaryElectionLegacyAddOn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrimaryResidentChangeMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrimaryResidentMessageRouter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrimaryResidentMessageRouterFailureEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrimaryResidentMessageRouterMetricsDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDPrivateUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessExitInfoLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessLaunchInfoLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessMemoryPressureNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDProcessRelaunchThresholdLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRPIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRapportMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRapportMessaging
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRapportMessagingClientFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRecordChangedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRecordOperationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRecordsSavedLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteAccountManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteAccountMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteDeviceMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteDeviceReachabilityChangeLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterClientMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterClientRetryIntervals
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterPrimaryResidentClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteEventRouterServerMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteKeyedArchiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginAnisetteDataProviderBridge
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteLoginHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageExceedBudgetLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageForwarder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageNotifications
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRemovedUser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResetConfigPostCleanup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentDeviceManagerFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentDeviceManagerLegacy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentReachabilityContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentReachabilityNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDResidentUser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDRoom
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSBSRemoteAlertHandleProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSecureRemoteMessageTransportDefaultDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDServiceGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSetting
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingAlgorithm
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingConstraint
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingConstraintModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingGroupModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingRootGroupModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingsControllerDependency
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingsMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSettingsMetadataParser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSharedHomeUpdateHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSharedUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSharingDeviceDiscovery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDShortcutAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSignificantTimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriCommandEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointOnboardingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfile
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileMessageHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfileRoutineConfigurationEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriEndpointProfilesMessenger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriMultiUserNewLanguageNotificationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriMultiUserNewLanguageNotificationManagerContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriSecureAccessoryAccessController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSiriSyncEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateAutomaticUpdateToggledEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateFetchedEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSoftwareUpdateStartedEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSymptomManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSyncOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSyncOperationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSyncOperationOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDSyncOperationQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTargetControllerCommandEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTargetControllerErrorEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimeBasedFlagDaily
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimeBasedFlagNameSpecifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimeBasedFlagsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimeBasedFlagsPersistentStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTimerTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTriggerDeleteAfterExecutionPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTriggerDeletePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDTriggerPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedAirPlayAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedAppleHomePodAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedAppleMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedFaceCropModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedMediaAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnassociatedWACAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnexpectedNotificationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnifiedLanguageValueListSettingDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUnpairedHAPAccessory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUploadMaximumDelayLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserActionPredictionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserActionPredictionModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareManagerCreatorDependency
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareOwnerAdoptionDailyEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserCloudShareParticipantAdoptionDailyEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserDataController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserDataControllerTimerCreator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserDataModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserDataZoneControllerShareLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserListeningHistoryUpdateControlModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserManagementOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserManagementOperationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserPhotosPersonDataManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserPresenceFeeder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserPresenceUpdateReason
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserSettingsBackingStoreController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDUserSupportsAutomaticHH2MigrationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWACBrowser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWACScanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWHAAccessControlEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWHASettingEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWalletPassLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWatchManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWatchSystemState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWiFiReconfigurationLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWidgetConfigurationReader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDWidgetTimelineRefresher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCActivityInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCActivityRunReportLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCBackgroundMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCBackgroundMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCClientConnection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCClientConnectionFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCEntitlementMessageFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCEventRouterServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCKeyedArchiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageCountTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageCountersLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageSendPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageSendPolicyParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageTransport
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCMessageTransportFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDXPCRequestTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDZone
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMDarwinNotificationProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDConfigurationMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDRemoteMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDUserMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDXPCBackgroundMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMFObjectCacheHMDXPCMessagePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMIdentifierSaltStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMPBEncodeOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HMPBMetadata
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventRemoteLoginEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventRemoteLogoutEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventTriggerAddLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventTriggerExecutionSessionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventTriggerUpdateLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_HomeKitEventTriggerUserConfirmationSendLogEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__HMDAccountIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__HMDDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__HMDGlobalDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__HMDLocalDeviceHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$___HMDRegisteredAccountIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$___HMDRegisteredDeviceIdentity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$___HMDRegisteredIdentity
|| __TEXT.__const _AWDUnknownVendorInfoMaxLength
|| __TEXT.__const _HMDAccessoryReaderWriterMessageDefaultTimeout
|| __TEXT.__const _HMDAccessoryReaderWriterMessageWriteTimeout
|| __TEXT.__const _HMDAccessoryReaderWriterMessageWriteTimeoutForSuspendedAccessory
|| __TEXT.__const _HMDAccessorySetupManagerMinimumActivationUptimeRestartDelay
|| __TEXT.__const _HMDCameraAnalysisStatePublisherDebounceTimerInterval
|| __TEXT.__const _HMDCameraClipAppendStreamingAssetOperationMinimumRetryDelay
|| __TEXT.__const _HMDCameraProfileSettingsDefaultCameraAccessMode
|| __TEXT.__const _HMDCameraProfileSettingsVersionLatest
|| __TEXT.__const _HMDCameraRecordingDefaultBulkSendSessionReadTimeoutFactor
|| __TEXT.__const _HMDCameraRecordingEventsCleanupInterval
|| __TEXT.__const _HMDCameraRecordingSessionRequestTimeout
|| __TEXT.__const _HMDCameraSnapshotDisconnectOnIdleDuration
|| __TEXT.__const _HMDCharacteristicTupleTimeOutInSeconds
|| __TEXT.__const _HMDCloudShareInviteRetryDuration
|| __TEXT.__const _HMDCloudShareInviteRetryLimit
|| __TEXT.__const _HMDDoorbellBulletinUtilitiesRecentFaceClassificationsBackwardTimeInterval
|| __TEXT.__const _HMDDoorbellBulletinUtilitiesRecentFaceClassificationsForwardTimeInterval
|| __TEXT.__const _HMDDuplicateBulletinTimeOutInSeconds
|| __TEXT.__const _HMDFMFSessionResponseTimeout
|| __TEXT.__const _HMDHAPMetatadataCategoryIdentifierOther
|| __TEXT.__const _HMDHomeNFCNIST256PublicKeyExternalRepresentationLength
|| __TEXT.__const _HMDHomeNFCNIST256PublicKeyLength
|| __TEXT.__const _HMDHomeWalletKeyManagerRemoteMessageTimeoutInterval
|| __TEXT.__const _HMDLocationClusterKMeansClusteringIterations
|| __TEXT.__const _HMDLocationHorizontalAccuracyLimit
|| __TEXT.__const _HMDLocationHorizontalAccuracyLimitWhileUsingCoreRoutineAPI
|| __TEXT.__const _HMDMaxBulletinsCount
|| __TEXT.__const _HMDMaxFragmentAnalysisDuration
|| __TEXT.__const _HMDMaxFragmentDurationAllowanceFactor
|| __TEXT.__const _HMDMediaGroupsControllerMinimumGroupDestinationsCount
|| __TEXT.__const _HMDMediaSystemMinimumComponentsCount
|| __TEXT.__const _HMDMetricsManagerLimitPostRadarDialogInterval
|| __TEXT.__const _HMDNaturalLightingCurveEndTime
|| __TEXT.__const _HMDNaturalLightingCurveMaximumBrightness
|| __TEXT.__const _HMDNaturalLightingCurveMinimumBrightness
|| __TEXT.__const _HMDNaturalLightingCurveStartTime
|| __TEXT.__const _HMDPersonManagerUnassociatedFaceCropsCleanupInterval
|| __TEXT.__const _HMDProductDataGroupLength
|| __TEXT.__const _HMDProductDataNumberLength
|| __TEXT.__const _HMDRemoteEventRouterEventsFragmentSizeInBytes
|| __TEXT.__const _HMDRemoteEventRouterVersion
|| __TEXT.__const _HMDRemoteEventRouterVersionSupportingFragmentMessage
|| __TEXT.__const _HMDRemotePersonDataMessengerUpdatedDataDebounceTimerInterval
|| __TEXT.__const _HMDTargetControlInvalidIdentifier
|| __TEXT.__const _HMDTimelapseInterval
|| __TEXT.__const _HMDTimelapsePreferredFragmentDuration
|| __TEXT.__const _HMDWalletPassPaymentApplicationDPANSuffixLength
|| __TEXT.__const _HMDXPCEventRouterServerDefaultConnectionDebounceTime
|| __TEXT.__const _HMInstanceIDAccessoryInformationService
|| __TEXT.__const _HMVDBMinimumDataVersion
|| __TEXT.__const _HMVDBSupportedSchemaVersion
|| __TEXT.__const _destinationShift
|| __TEXT.__const _fieldMask
|| __TEXT.__const _kCameraStreamMTUForIPv4
|| __TEXT.__const _kCameraStreamMTUForIPv6
|| __TEXT.__const _kHMDHomePeriodicReaderDefaultInterval
|| __TEXT.__const _kIPCameraUnknownParameter
|| __TEXT.__const _kLastDecodedFrameCaptureWaitPeriod
|| __TEXT.__const _kLocalSnapshotCompletionPeriod
|| __TEXT.__const _kLocalStreamSetupWaitPeriod
|| __TEXT.__const _kMaximumReconfigureEventCount
|| __TEXT.__const _kMostRecentSnapshotValidPeriod
|| __TEXT.__const _kPresenceRegionStatusChangeWindow
|| __TEXT.__const _kReactivationDelay
|| __TEXT.__const _kReconfigureFlipFlopTimeWindow
|| __TEXT.__const _kReconfigureUpgradeBackoffDebouceTimer
|| __TEXT.__const _kRemoteInitiatorSnapshotCompletionPeriod
|| __TEXT.__const _kRemoteRTPPtime
|| __TEXT.__const _kRemoteReceiverSnapshotCompletionPeriod
|| __TEXT.__const _kRemoteRelayStreamSnapshotCompletionPeriod
|| __TEXT.__const _kRemoteStreamSetupWaitPeriod
|| __TEXT.__const _kRequestMaxRetries
|| __TEXT.__const _kSnapshotFileFragmentSize
|| __TEXT.__const _kSnapshotLocalNotificationCompletionPeriod
|| __TEXT.__const _kSnapshotRemoteNotificationCompletionPeriod
|| __TEXT.__const _kStatusChangeValidPeriod
|| __TEXT.__const _successShift
|| __TEXT.__const _versionFlagMask
|| __TEXT.__const _versionFlagV1
|| __TEXT.__text _AVCAudioCodecTypeAsString
|| __TEXT.__text _AVCCipherSuiteAsString
|| __TEXT.__text _AVCVideoCodecTypeAsString
|| __TEXT.__text _AVCVideoResolutionAsString
|| __TEXT.__text _AWDHomeKitAccessoryNetworkProtectionReportReadFrom
|| __TEXT.__text _AWDHomeKitAccessoryPairingReadFrom
|| __TEXT.__text _AWDHomeKitAccessoryReadWriteReadFrom
|| __TEXT.__text _AWDHomeKitAccessoryRelaySetupReadFrom
|| __TEXT.__text _AWDHomeKitActionSetTriggeredReadFrom
|| __TEXT.__text _AWDHomeKitAddEventTriggerReadFrom
|| __TEXT.__text _AWDHomeKitAssistantAccessControlReadFrom
|| __TEXT.__text _AWDHomeKitBackingStoreCKOperationZoneCompletionEventReadFrom
|| __TEXT.__text _AWDHomeKitBackingStoreCKRebuildEventReadFrom
|| __TEXT.__text _AWDHomeKitBroadcastEventKeyGenerationReadFrom
|| __TEXT.__text _AWDHomeKitBroadcastEventReceivedReadFrom
|| __TEXT.__text _AWDHomeKitCalendarEventReadFrom
|| __TEXT.__text _AWDHomeKitCameraConfigurationDataReadFrom
|| __TEXT.__text _AWDHomeKitCameraIDSSessionSetupReadFrom
|| __TEXT.__text _AWDHomeKitCameraRecordingBulkSendDataReadReadFrom
|| __TEXT.__text _AWDHomeKitCameraRecordingClipNotificationReadFrom
|| __TEXT.__text _AWDHomeKitCameraRecordingFragmentAnalyzedReadFrom
|| __TEXT.__text _AWDHomeKitCameraRecordingUploadOperationReadFrom
|| __TEXT.__text _AWDHomeKitCameraSettingsReadFrom
|| __TEXT.__text _AWDHomeKitCameraSnapshotIDSTransferReadFrom
|| __TEXT.__text _AWDHomeKitCameraSnapshotMessagingReadFrom
|| __TEXT.__text _AWDHomeKitCameraSnapshotReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamConfigureReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamIDSConnSetupParametersReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamIDSConnSetupReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamMessagingReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamReadFrom
|| __TEXT.__text _AWDHomeKitCameraStreamReconfigureReadFrom
|| __TEXT.__text _AWDHomeKitCameraUserSettingsReadFrom
|| __TEXT.__text _AWDHomeKitCharacteristicEventReadFrom
|| __TEXT.__text _AWDHomeKitCharacteristicReadFrom
|| __TEXT.__text _AWDHomeKitCharacteristicThresholdEventReadFrom
|| __TEXT.__text _AWDHomeKitCloudSyncInfoTupleReadFrom
|| __TEXT.__text _AWDHomeKitCloudSyncReadFrom
|| __TEXT.__text _AWDHomeKitConfigurationDataReadFrom
|| __TEXT.__text _AWDHomeKitDataModelMigrationReadFrom
|| __TEXT.__text _AWDHomeKitDatabaseCKOperationCompletionEventReadFrom
|| __TEXT.__text _AWDHomeKitDurationEventReadFrom
|| __TEXT.__text _AWDHomeKitEventTriggerEventReadFrom
|| __TEXT.__text _AWDHomeKitEventTriggerExecutionSessionReadFrom
|| __TEXT.__text _AWDHomeKitEventTriggerReadFrom
|| __TEXT.__text _AWDHomeKitEventTriggerUserConfirmationReceiverSessionReadFrom
|| __TEXT.__text _AWDHomeKitEventTriggerUserConfirmationSendReadFrom
|| __TEXT.__text _AWDHomeKitEventsAggregationReportReadFrom
|| __TEXT.__text _AWDHomeKitHAPServiceReadFrom
|| __TEXT.__text _AWDHomeKitHomeCameraConfigurationsReadFrom
|| __TEXT.__text _AWDHomeKitHomeConfigurationReadFrom
|| __TEXT.__text _AWDHomeKitHomeSharingReadFrom
|| __TEXT.__text _AWDHomeKitLocationEventReadFrom
|| __TEXT.__text _AWDHomeKitMessageHomeLocationReportReadFrom
|| __TEXT.__text _AWDHomeKitMessageLocationReadFrom
|| __TEXT.__text _AWDHomeKitMessageTransportedReadFrom
|| __TEXT.__text _AWDHomeKitMultiUserSettingsReadFrom
|| __TEXT.__text _AWDHomeKitMultiUserSettingsValueByKeyPathReadFrom
|| __TEXT.__text _AWDHomeKitNetworkProtectionReportReadFrom
|| __TEXT.__text _AWDHomeKitPredicateReadFrom
|| __TEXT.__text _AWDHomeKitPresenceEventReadFrom
|| __TEXT.__text _AWDHomeKitPresenceRegionReadFrom
|| __TEXT.__text _AWDHomeKitPresenceReportReadFrom
|| __TEXT.__text _AWDHomeKitProcessMemoryPressureEventReadFrom
|| __TEXT.__text _AWDHomeKitRelaySessionReadFrom
|| __TEXT.__text _AWDHomeKitRemoteLoginReadFrom
|| __TEXT.__text _AWDHomeKitRemoteLogoutReadFrom
|| __TEXT.__text _AWDHomeKitRemoteSessionReadFrom
|| __TEXT.__text _AWDHomeKitResetConfigurationReadFrom
|| __TEXT.__text _AWDHomeKitSignificantTimeEventReadFrom
|| __TEXT.__text _AWDHomeKitSiriCommandReadFrom
|| __TEXT.__text _AWDHomeKitSiriSyncReadFrom
|| __TEXT.__text _AWDHomeKitSoftwareUpdateAutomaticUpdateToggledReadFrom
|| __TEXT.__text _AWDHomeKitSoftwareUpdateFetchedReadFrom
|| __TEXT.__text _AWDHomeKitSoftwareUpdateStartedReadFrom
|| __TEXT.__text _AWDHomeKitTargetControllerCommandReadFrom
|| __TEXT.__text _AWDHomeKitTargetControllerErrorReadFrom
|| __TEXT.__text _AWDHomeKitUpdateEventTriggerReadFrom
|| __TEXT.__text _AWDHomeKitUserPresenceAuthorizationReadFrom
|| __TEXT.__text _AWDHomeKitUserPresenceComputeReadFrom
|| __TEXT.__text _AWDHomeKitValueReadFrom
|| __TEXT.__text _AWDHomeKitVendorInformationReadFrom
|| __TEXT.__text _AWDHomeKitVideoResolutionCountReadFrom
|| __TEXT.__text _AWDHomeKitWHAAccessControlReadFrom
|| __TEXT.__text _AWDHomeKitWHASettingReadFrom
|| __TEXT.__text _AWDHomeKitWatchCompanionConnectivityReportReadFrom
|| __TEXT.__text _Clear_HMD_HH2_Mode
|| __TEXT.__text _CompositeSettings_Database_log
|| __TEXT.__text _CreatePasswordSettingTLV
|| __TEXT.__text _DecodePasswordSettingTLV
|| __TEXT.__text _HMCLAuthorizationStatusAsString
|| __TEXT.__text _HMCLRegionStateAsString
|| __TEXT.__text _HMDAVOutputDeviceFromMRAVOutputDevice
|| __TEXT.__text _HMDAccessoryFirmwareUpdateAccessoryIdentifierAsString
|| __TEXT.__text _HMDAccessoryFirmwareUpdateSessionStateAsString
|| __TEXT.__text _HMDAccessorySettingMergeStrategyTypeAsString
|| __TEXT.__text _HMDAccessorySettingsAuditReasonAsString
|| __TEXT.__text _HMDAccessorySoftwareUpdateApplyEventStatusAsString
|| __TEXT.__text _HMDAppleAccessoryVariantToString
|| __TEXT.__text _HMDApplicationStateDescription
|| __TEXT.__text _HMDAudioCodecGroupTypeAsString
|| __TEXT.__text _HMDAudioSampleRateTypeAsString
|| __TEXT.__text _HMDBackingStoreObjectChangeTypeToString
|| __TEXT.__text _HMDBackingStoreTransactionSourceIsCurrentDevice
|| __TEXT.__text _HMDBitRateSettingTypeAsString
|| __TEXT.__text _HMDCLClientLocationReferenceFrameAsString
|| __TEXT.__text _HMDCameraClipSegmentMetadataReadFrom
|| __TEXT.__text _HMDCameraClipsQuotaDisableCameraMessageReadFrom
|| __TEXT.__text _HMDCameraClipsQuotaDisableCameraResponseReadFrom
|| __TEXT.__text _HMDCameraClipsQuotaEnableCameraMessageReadFrom
|| __TEXT.__text _HMDCameraClipsQuotaEnableCameraResponseReadFrom
|| __TEXT.__text _HMDCameraLocalStreamSessionStateAsString
|| __TEXT.__text _HMDCameraRecordingAudioBitRateModeTypeAsString
|| __TEXT.__text _HMDCameraRecordingAudioCodecTypeAsString
|| __TEXT.__text _HMDCameraRecordingAudioSampleRateTypeAsString
|| __TEXT.__text _HMDCameraRecordingEventTriggerOptionsAsString
|| __TEXT.__text _HMDCameraRecordingH264LevelTypeAsString
|| __TEXT.__text _HMDCameraRecordingH264ProfileTypeAsString
|| __TEXT.__text _HMDCameraRecordingMediaContainerTypeAsString
|| __TEXT.__text _HMDCameraRecordingVideoCodecTypeAsString
|| __TEXT.__text _HMDCameraRecordingVideoResolutionTypeAsString
|| __TEXT.__text _HMDCameraRemoteStreamSessionStateAsString
|| __TEXT.__text _HMDCameraShouldNotifyAboutSignificantEvent
|| __TEXT.__text _HMDCameraSnapshotReasonAsString
|| __TEXT.__text _HMDCameraStreamInterfaceStateAsString
|| __TEXT.__text _HMDCameraVideoAnalyzerEventTypesFromSignificantEventTypes
|| __TEXT.__text _HMDCloudManagerModelFailureCodeAsString
|| __TEXT.__text _HMDCloudShareTrustManagerErrorCodeAsString
|| __TEXT.__text _HMDCloudShareTrustManagerTrustActivityTypeAsString
|| __TEXT.__text _HMDCountOneBits
|| __TEXT.__text _HMDCreateCoordinationLocalElectionMeshController
|| __TEXT.__text _HMDCreateUniquePSKClientConfiguration
|| __TEXT.__text _HMDDefaultRoomName
|| __TEXT.__text _HMDEventTriggerActivationTypeAsString
|| __TEXT.__text _HMDEventTriggerExecutionStateAsString
|| __TEXT.__text _HMDFMFStatusAsString
|| __TEXT.__text _HMDFirmwareUpdateAutoApplyPolicyForAccessory
|| __TEXT.__text _HMDFirmwareUpdatePolicyForAccessory
|| __TEXT.__text _HMDFirmwareUpdateStagingPolicyForAccessory
|| __TEXT.__text _HMDH264LevelTypeAsString
|| __TEXT.__text _HMDH264ProfileTypeAsString
|| __TEXT.__text _HMDHomeKitDaemonCacheDirectory
|| __TEXT.__text _HMDHomeKitDaemonDemoModePersistencePath
|| __TEXT.__text _HMDHomeLocationSourceToString
|| __TEXT.__text _HMDLocalizedStringForKey
|| __TEXT.__text _HMDLocalizedStringForKeyWithCount
|| __TEXT.__text _HMDLocationAuthorizationAsString
|| __TEXT.__text _HMDMediaDestinationControllerErrorCodeAsString
|| __TEXT.__text _HMDMediaDestinationManagerFailureCodeAsString
|| __TEXT.__text _HMDMessageHandlerFailureEventTypeAsString
|| __TEXT.__text _HMDMinimumHomeKitVersionSupportingHH2
|| __TEXT.__text _HMDNetworkRouterAccessViolationControlOperationTypeAsString
|| __TEXT.__text _HMDNetworkRouterAccessViolationQueryEnabled
|| __TEXT.__text _HMDNetworkRouterAdvertisementProtocolTypeAsString
|| __TEXT.__text _HMDNetworkRouterClientStatusControlOperationTypeAsString
|| __TEXT.__text _HMDNetworkRouterControlOperationStatusTypeAsString
|| __TEXT.__text _HMDNetworkRouterControlOperationTypeAsString
|| __TEXT.__text _HMDNetworkRouterFirewallRuleIPProtocolAsString
|| __TEXT.__text _HMDNetworkRouterFirewallRuleLANPurposeAsString
|| __TEXT.__text _HMDNetworkRouterFirewallRuleWANPurposeAsString
|| __TEXT.__text _HMDNetworkRouterIPProtocolVersionTypeAsString
|| __TEXT.__text _HMDNetworkRouterLANFirewallTypeAsString
|| __TEXT.__text _HMDNetworkRouterLANIdentifierTypeAsString
|| __TEXT.__text _HMDNetworkRouterProtocolTypeAsString
|| __TEXT.__text _HMDNetworkRouterRuleDirectionTypeAsString
|| __TEXT.__text _HMDNetworkRouterSupportAsString
|| __TEXT.__text _HMDNetworkRouterWANFirewallTypeAsString
|| __TEXT.__text _HMDNetworkRouterWANIdentifierTypeAsString
|| __TEXT.__text _HMDNetworkRouterWANRulesFromFirewallRuleWan
|| __TEXT.__text _HMDNumLSBZeroBits
|| __TEXT.__text _HMDPBHomeLightBrightnessEventReadFrom
|| __TEXT.__text _HMDPacketizationModeTypeAsString
|| __TEXT.__text _HMDPrimaryResidentMessageRouterFailureTypeAsString
|| __TEXT.__text _HMDProductDataFromHAPAccessory
|| __TEXT.__text _HMDRegionStateString
|| __TEXT.__text _HMDRemoteDeviceReachabilityChangeReasonAsString
|| __TEXT.__text _HMDRemoteEventRouterProtoChangeRegistrationsMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoChangeRegistrationsResponseReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoConnectMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoConnectResponseReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoDisconnectMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoEventsMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoFetchEventsMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoFetchEventsResponseReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoFragmentedMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoKeepAliveMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoServerMessageReadFrom
|| __TEXT.__text _HMDRemoteEventRouterProtoTopicReadFrom
|| __TEXT.__text _HMDRemoteLoginAccountTypeAsString
|| __TEXT.__text _HMDRemoteMessagePayloadKeysForTransportMetadata
|| __TEXT.__text _HMDRemoteMessageTransportDirectRestriction
|| __TEXT.__text _HMDRemoteMessageTransportTypeToString
|| __TEXT.__text _HMDRemoteMessageTypeToString
|| __TEXT.__text _HMDResetConfigPostCleanupReasonToString
|| __TEXT.__text _HMDResetConfigPostCleanupStepsToString
|| __TEXT.__text _HMDResidentDeviceConfigurationStateString
|| __TEXT.__text _HMDResidentDeviceManagerConfirmationCriteriaAsString
|| __TEXT.__text _HMDResidentDeviceManagerElectionReasonAsString
|| __TEXT.__text _HMDSRTPCryptoSuiteTypeAsString
|| __TEXT.__text _HMDSecureRemoteStreamRoleToString
|| __TEXT.__text _HMDSessionControlCommandAsString
|| __TEXT.__text _HMDSetupModeString
|| __TEXT.__text _HMDSiriActivationTypeAsString
|| __TEXT.__text _HMDSiriEndpointSessionStateTypeAsString
|| __TEXT.__text _HMDSleepConfigurationOperationStatusAsString
|| __TEXT.__text _HMDSleepConfigurationOperationTypeAsString
|| __TEXT.__text _HMDSleepConfigurationWakePacketTypeAsString
|| __TEXT.__text _HMDSleepConfigurationWakeUpTypeAsString
|| __TEXT.__text _HMDSoftwareUpdateUpdateTypeOfAccessory
|| __TEXT.__text _HMDStreamControlPointResponseStatusAsString
|| __TEXT.__text _HMDStreamingStatusTypeAsString
|| __TEXT.__text _HMDStreamingTierTypeAsString
|| __TEXT.__text _HMDStringFromDataStreamMessageStatus
|| __TEXT.__text _HMDTransformCompositeSettingToSettingValue
|| __TEXT.__text _HMDTriggerReEvaluateReasonAsString
|| __TEXT.__text _HMDTriggerTypeAsString
|| __TEXT.__text _HMDUserConfirmationResponseAsString
|| __TEXT.__text _HMDUserManagementOperationTypeToString
|| __TEXT.__text _HMDUserPresenceRegionStatusAsString
|| __TEXT.__text _HMDUserPresenceUpdateReasonStatusAsString
|| __TEXT.__text _HMDUserPrivilegeAsString
|| __TEXT.__text _HMDUserPrivilegeCompare
|| __TEXT.__text _HMDUserPrivilegeFromPrivilege
|| __TEXT.__text _HMDVideoCodecTypeAsString
|| __TEXT.__text _HMDVideoResolutionAspectRatioAsString
|| __TEXT.__text _HMDVideoResolutionTypeAsString
|| __TEXT.__text _HMDWakeConfigurationParameterTypeAsString
|| __TEXT.__text _HMDWakeTypeAsString
|| __TEXT.__text _HMDWatchSyncOptionAsString
|| __TEXT.__text _HMDXPCCounterTypeAsString
|| __TEXT.__text _HMD_HH2_Mode
|| __TEXT.__text _HMDispatchQueueNameString
|| __TEXT.__text _HMIsValidRegion
|| __TEXT.__text _HMMediaGroupProtoMediaParticipantDataReadFrom
|| __TEXT.__text _HMMediaPlaybackStateForHAPMediaWriteValue
|| __TEXT.__text _HMPBEncodeOptionReadFrom
|| __TEXT.__text _HMPBMetadataReadFrom
|| __TEXT.__text _HMStringFromIntentRequestType
|| __TEXT.__text _HMXPCClientEntitlementsToComponents
|| __TEXT.__text _HomeKitDataMigrationOptionsAsString
|| __TEXT.__text _Siri_log
|| __TEXT.__text ___accessoryReachabilityUpdateMessages
|| __TEXT.__text ___createAddAccessoryProgressHandler
|| __TEXT.__text ___decodeRemoteClientRequest
|| __TEXT.__text ___isValueValid
|| __TEXT.__text ___redactThirdPartyBundleIds
|| __TEXT.__text __homeManagerOptionsFromPayload
|| __TEXT.__text __legacyMultiUserSettings
|| __TEXT.__text __multiUserSettingsValueTypeForKeyPath
|| __TEXT.__text _accessoryToEncodeForXPCTransportForAccessory
|| __TEXT.__text _actionSetFromObject
|| __TEXT.__text _addressFromHMFNetAddress
|| __TEXT.__text _anonymizeUnknownVendorString
|| __TEXT.__text _appendToShortDescription
|| __TEXT.__text _areWeRunningWithHH2DaemonFramework
|| __TEXT.__text _asString
|| __TEXT.__text _awdValueFromValue
|| __TEXT.__text _buttonConfigurationAsString
|| __TEXT.__text _callCompletionHandler
|| __TEXT.__text _cameraStreamNetworkAdaptationEnabled
|| __TEXT.__text _celsiusToFahrenheit
|| __TEXT.__text _characteristicPolicyHandlerForFormat
|| __TEXT.__text _cleanDirectory
|| __TEXT.__text _compareCharacteristicValue
|| __TEXT.__text _compareNumbers
|| __TEXT.__text _configurationDescription
|| __TEXT.__text _convertToAWDEventTrigger
|| __TEXT.__text _convertToAWDEventTriggerList
|| __TEXT.__text _convertToAWDPredicate
|| __TEXT.__text _convertToAWDPresenceEvent
|| __TEXT.__text _convertToAWDPresenceEventActivationGranualrity
|| __TEXT.__text _convertToAWDPresenceEventList
|| __TEXT.__text _convertToAWDPresenceEventType
|| __TEXT.__text _convertToAWDTriggerActivationState
|| __TEXT.__text _convertToAWDTriggerActivationType
|| __TEXT.__text _convertToAWDTriggerEvent
|| __TEXT.__text _convertToAWDTriggerEventList
|| __TEXT.__text _convertToAWDTriggerRequestType
|| __TEXT.__text _convertToAWDTriggerUpdateType
|| __TEXT.__text _convertValue
|| __TEXT.__text _createAccessoryCapabilities
|| __TEXT.__text _createDirectory
|| __TEXT.__text _createHMDFetchedSettingsDriverPreferences
|| __TEXT.__text _createHMFNetAddressFromIPAddressString
|| __TEXT.__text _createResidentCapabilities
|| __TEXT.__text _createResizedImage
|| __TEXT.__text _createStateData
|| __TEXT.__text _dataFromCKRecord
|| __TEXT.__text _debugMessageName
|| __TEXT.__text _decodeAddressFromJSONDictionary
|| __TEXT.__text _decodePortFromJSONDictionary
|| __TEXT.__text _decodeStringFromJSONDictionary
|| __TEXT.__text _decodeTimeFromJSONDictionary
|| __TEXT.__text _decodeUnsignedIntegerFromJSONDictionary
|| __TEXT.__text _defaultAccessoryShouldDisconnectOnIdleForHome
|| __TEXT.__text _defaultMinimumNetworkRouterSupportHomeKitVersion
|| __TEXT.__text _deobfuscateSettingsName
|| __TEXT.__text _determineHomeKitDaemonRootStorePath
|| __TEXT.__text _deviceName
|| __TEXT.__text _encodeBulletinBoardNotificationServiceGroup
|| __TEXT.__text _encodeRootObject
|| __TEXT.__text _encodeRootObjectForIncomingXPCMessage
|| __TEXT.__text _encodeRootObjectForRemote
|| __TEXT.__text _encodeRootObjectForRemoteAdministrator
|| __TEXT.__text _encodeRootObjectForRemoteDeviceOnSameAccount
|| __TEXT.__text _encodeRootObjectForRemoteDeviceOnSameAccountMigrateToHH2
|| __TEXT.__text _encodeRootObjectForRemoteGateway
|| __TEXT.__text _encodeRootObjectForSPIClients
|| __TEXT.__text _encodeRootObjectForXPC
|| __TEXT.__text _entityForMediaProfile
|| __TEXT.__text _entityForService
|| __TEXT.__text _entityFromObject
|| __TEXT.__text _errorAsString
|| __TEXT.__text _fahrenheitToCelsius
|| __TEXT.__text _findImageAspectRatio
|| __TEXT.__text _fixHomeKitVersion
|| __TEXT.__text _generateDataForDisplayOrder
|| __TEXT.__text _generateURLForHomeKitObject
|| __TEXT.__text _generateWiFiUniquePreSharedKey
|| __TEXT.__text _getAcceptPolicyForAccessory
|| __TEXT.__text _getAccessoryConnectivityWaitPeriod
|| __TEXT.__text _getAggressiveControllerKeyPollInterval
|| __TEXT.__text _getAllowAnonymousServerConnections
|| __TEXT.__text _getAppleConfigurationServer
|| __TEXT.__text _getAssistantClientActionSetTimeoutSeconds
|| __TEXT.__text _getAssistantClientReadWriteTimeoutSeconds
|| __TEXT.__text _getAttestationInfoFetchPeriod
|| __TEXT.__text _getAuthServerRetryCount
|| __TEXT.__text _getAuthServerRetryTimeInterval
|| __TEXT.__text _getBLEAccessoryCachePath
|| __TEXT.__text _getBTLEReachabilityLeewayNanoseconds
|| __TEXT.__text _getBTLEReachabilityProbeReduceFactor
|| __TEXT.__text _getBTLEReachabilityTimerNanoseconds
|| __TEXT.__text _getBackgroundOperationsDataStorePath
|| __TEXT.__text _getBatchLocationCollectPeriod
|| __TEXT.__text _getBlacklistedBundlesPath
|| __TEXT.__text _getBluetoothGSNMaxValue
|| __TEXT.__text _getBridgedAccessoriesForBridge
|| __TEXT.__text _getBroadcastKeyRefreshPeriod
|| __TEXT.__text _getBuiltinMetadataDictionaryPath
|| __TEXT.__text _getBulletinBoardPath
|| __TEXT.__text _getBulletinImagesPath
|| __TEXT.__text _getBulletinSecureTriggerTimeoutInSeconds
|| __TEXT.__text _getCKContainer
|| __TEXT.__text _getCameraPolicyForAccessory
|| __TEXT.__text _getCapabilityForElecting
|| __TEXT.__text _getCharacteristicBasedPolicyForAccessory
|| __TEXT.__text _getCheckRemoteAccessTimeout
|| __TEXT.__text _getCloudCachePath
|| __TEXT.__text _getCloudDataSyncInProgressWaitPeriod
|| __TEXT.__text _getCloudKitContainerEnvironment
|| __TEXT.__text _getCloudPushBatchLimit
|| __TEXT.__text _getCloudRecordSizeLimit
|| __TEXT.__text _getCloudUploadMaximumTimerInterval
|| __TEXT.__text _getCloudUploadTimerInterval
|| __TEXT.__text _getCloudUploadTimerIntervalExponentialFactor
|| __TEXT.__text _getCloudZoneUploadTimerInitialInterval
|| __TEXT.__text _getCloudZoneUploadTimerInterval
|| __TEXT.__text _getCoalesceNotificationsPeriod
|| __TEXT.__text _getComfortNoisePayloadType
|| __TEXT.__text _getConfigurationURLForPath
|| __TEXT.__text _getControllerKeyNotLandingShortCircuitWaitPeriod
|| __TEXT.__text _getControllerKeyNotLandingWaitPeriod
|| __TEXT.__text _getControllerKeyPollInterval
|| __TEXT.__text _getCoreDataPath
|| __TEXT.__text _getDefaultAudioPayloadType
|| __TEXT.__text _getDefaultVideoPayloadType
|| __TEXT.__text _getDelayNotificationsPeriod
|| __TEXT.__text _getDenyPolicyForAccessory
|| __TEXT.__text _getDeviceClass
|| __TEXT.__text _getDeviceConnectionKeepAliveResponseTimeoutPeriod
|| __TEXT.__text _getDeviceConnectionKeepAliveTimerPeriod
|| __TEXT.__text _getDisableNotificationsDeferPeriod
|| __TEXT.__text _getDisableReprovisionBrowsingPeriod
|| __TEXT.__text _getDiscoveryBackoffPeriod
|| __TEXT.__text _getEventCountersDataStoreLegacyPath
|| __TEXT.__text _getEventCountersDataStorePath
|| __TEXT.__text _getEventFlagsDataStorePath
|| __TEXT.__text _getEventStorePath
|| __TEXT.__text _getFirmwareUpdatePolicies
|| __TEXT.__text _getHH1TestArchiveDirectoryPath
|| __TEXT.__text _getHH1ToHH2PerDeviceMigrationDirectoryPath
|| __TEXT.__text _getHH2MigrationFailureRecordDataStorePath
|| __TEXT.__text _getHH2MigrationLogEventDataStorePath
|| __TEXT.__text _getHH2MigratorRecordDataStorePath
|| __TEXT.__text _getHMCloudSyncUploadErrorCount
|| __TEXT.__text _getHMCloudSyncUploadReasonCount
|| __TEXT.__text _getHMMaximumAccessoriesPerBridge
|| __TEXT.__text _getHMMaximumAccessoriesPerHome
|| __TEXT.__text _getHMMaximumAccessoriesPerRoom
|| __TEXT.__text _getHMMaximumActionSetsPerHome
|| __TEXT.__text _getHMMaximumActionsPerActionSet
|| __TEXT.__text _getHMMaximumCharacteristicsPerService
|| __TEXT.__text _getHMMaximumDataSyncFragmentSize
|| __TEXT.__text _getHMMaximumHomes
|| __TEXT.__text _getHMMaximumRoomsPerHome
|| __TEXT.__text _getHMMaximumRoomsPerZone
|| __TEXT.__text _getHMMaximumServiceGroupsPerHome
|| __TEXT.__text _getHMMaximumServicesPerAccessory
|| __TEXT.__text _getHMMaximumServicesPerServiceGroup
|| __TEXT.__text _getHMMaximumTriggersPerHome
|| __TEXT.__text _getHMMaximumUsersPerHome
|| __TEXT.__text _getHMMaximumZonesPerHome
|| __TEXT.__text _getHMTimerMinimumRecurrence
|| __TEXT.__text _getHRSCommitTimeoutNanoseconds
|| __TEXT.__text _getHRSIdleClientTimeoutNanoseconds
|| __TEXT.__text _getHRSIdleServertTimeoutNanoseconds
|| __TEXT.__text _getHRSSendInternalRequestTimeoutNanoseconds
|| __TEXT.__text _getHRSSendInternalRequestToWatchTimeoutNanoseconds
|| __TEXT.__text _getHRSSendUserRequestTimeoutNanoseconds
|| __TEXT.__text _getHomeKitConfigurationPath
|| __TEXT.__text _getHomedSupportedFeatures
|| __TEXT.__text _getHomedVersion
|| __TEXT.__text _getIDSDataSyncJournalPath
|| __TEXT.__text _getIDSSessionOptionsAllowedClasses
|| __TEXT.__text _getImagesPath
|| __TEXT.__text _getKeyTransferBroadcastMaximumDelay
|| __TEXT.__text _getKeychainPopupTimerInterval
|| __TEXT.__text _getLaunchAssertionPlistPath
|| __TEXT.__text _getMaxCloudOperationRetries
|| __TEXT.__text _getMaximumSecureRemoteStreams
|| __TEXT.__text _getMaximumSimultaneousRemoteStreams
|| __TEXT.__text _getMediaBrowserProcessingInterval
|| __TEXT.__text _getMediaRouteIdentifier
|| __TEXT.__text _getMinimumSupportedResidentHomeKitVersion
|| __TEXT.__text _getMinimumTrustZoneCapableHomeKitVersion
|| __TEXT.__text _getPairingInterruptionGracePeriod
|| __TEXT.__text _getPairingReconfirmWaitPeriod
|| __TEXT.__text _getPendingResponseMaxPeriod
|| __TEXT.__text _getPendingResponseTickPeriod
|| __TEXT.__text _getPlainMetadataPath
|| __TEXT.__text _getPoliciesFromServiceConfiguration
|| __TEXT.__text _getPreferredPrimaryForHome
|| __TEXT.__text _getPresenceFeedRefreshInMinutes
|| __TEXT.__text _getPresenceMonitorAuditInMinutes
|| __TEXT.__text _getPresenceMonitorRefreshGracePeriodInMinutes
|| __TEXT.__text _getPresencePolicyForAccessory
|| __TEXT.__text _getProtectedMetadataPath
|| __TEXT.__text _getProtectedStorePath
|| __TEXT.__text _getRTPPtime
|| __TEXT.__text _getRegisteredApplicationsPath
|| __TEXT.__text _getRemoteDeviceMonitorHealthTimerTimeInterval
|| __TEXT.__text _getRemoteDeviceMonitorRetryTimerFactor
|| __TEXT.__text _getRemoteDeviceMonitorRetryTimerMaximumTimeInterval
|| __TEXT.__text _getRemoteDeviceMonitorRetryTimerMinimumTimeInterval
|| __TEXT.__text _getRemotePendingResponseDecayScale
|| __TEXT.__text _getRemotePendingResponseLeewayNanoseconds
|| __TEXT.__text _getRemotePendingResponseTimerNanoseconds
|| __TEXT.__text _getRemoteReachabilityDeregistrationDeferPeriod
|| __TEXT.__text _getRemoteReachabilityNotificationsDeferPeriod
|| __TEXT.__text _getReportingUnits
|| __TEXT.__text _getRequestHomeDataSyncRetryPeriodInMinutes
|| __TEXT.__text _getSQLitePath
|| __TEXT.__text _getSecureAccessErrorCode
|| __TEXT.__text _getSecureSessionMessageTimeout
|| __TEXT.__text _getSecureTriggerUserResponseTimeoutInSeconds
|| __TEXT.__text _getServerTokenPath
|| __TEXT.__text _getSnapshotCacheValidPeriod
|| __TEXT.__text _getSnapshotResolution
|| __TEXT.__text _getStartCharacteristicsMonitorWaitPeriod
|| __TEXT.__text _getStoreDirectoryPath
|| __TEXT.__text _getSupportedAudioCodecs
|| __TEXT.__text _getSupportedResolutions
|| __TEXT.__text _getSupportedSRTPAuths
|| __TEXT.__text _getSupportedVideoCodecs
|| __TEXT.__text _getTimeWindowPolicyForAccessory
|| __TEXT.__text _getTimedAutomationPolicyForAccessory
|| __TEXT.__text _getTransactionJournalPath
|| __TEXT.__text _getTupleForCharacteristic
|| __TEXT.__text _getUniqueDeviceId
|| __TEXT.__text _getUserPushCacheTimeInterval
|| __TEXT.__text _getVendorIDStorePath
|| __TEXT.__text _getVendorInfoDatabaseServerURLOverride
|| __TEXT.__text _getVendorInfoFetchPeriod
|| __TEXT.__text _getVideoAttributesDowngradeDebouceTimer
|| __TEXT.__text _getVideoAttributesUpgradeDebouceTimer
|| __TEXT.__text _getWatchdogControllerKeyPollTimeout
|| __TEXT.__text _hapLinkTypeDescription
|| __TEXT.__text _hapOperationTypeDescription
|| __TEXT.__text _hasAssistantHashingKeyChanged
|| __TEXT.__text _hds_log
|| __TEXT.__text _identifierForTargetWithUUID
|| __TEXT.__text _initializeCapabilitiesAndTimeouts
|| __TEXT.__text _initializePaths
|| __TEXT.__text _inputStreamFromCKRecord
|| __TEXT.__text _isAppleTV
|| __TEXT.__text _isAutoLockEnabledOnThisDevice
|| __TEXT.__text _isBTLECapableDevice
|| __TEXT.__text _isCarrierBuild
|| __TEXT.__text _isDeveloperBuild
|| __TEXT.__text _isDeviceLocked
|| __TEXT.__text _isEqualDeepCompare
|| __TEXT.__text _isFeatureHomeTheaterQFAEnabled
|| __TEXT.__text _isHomePod
|| __TEXT.__text _isInternalBuild
|| __TEXT.__text _isLinkQualityBetterThanThresholdQuality
|| __TEXT.__text _isMac
|| __TEXT.__text _isMetricLocale
|| __TEXT.__text _isModernTransportEnabled
|| __TEXT.__text _isPasscodeEnabledOnThisDevice
|| __TEXT.__text _isPersistedConnectionRequiredForAccessory
|| __TEXT.__text _isSimulator
|| __TEXT.__text _isThisDeviceDesignatedFMFDevice
|| __TEXT.__text _isThisOSCapableOfRunningHH2
|| __TEXT.__text _isTinkerWatch
|| __TEXT.__text _isTruePredicate
|| __TEXT.__text _isValidAudioStreamSetting
|| __TEXT.__text _isValidSignificantEvent
|| __TEXT.__text _isWatch
|| __TEXT.__text _isWatchLegacy
|| __TEXT.__text _isWatchUnlocked
|| __TEXT.__text _isiOSDevice
|| __TEXT.__text _isiPadDevice
|| __TEXT.__text _isiPhoneDevice
|| __TEXT.__text _launchURL
|| __TEXT.__text _linkQualityAsString
|| __TEXT.__text _localizedDescriptionKeyForError
|| __TEXT.__text _locationAsString
|| __TEXT.__text _logAndPostNotification
|| __TEXT.__text _mapFromSiriSceneType
|| __TEXT.__text _mapProfilesToAccessoryUUIDs
|| __TEXT.__text _mapProfilesToServiceUUIDs
|| __TEXT.__text _mapTargetCategory
|| __TEXT.__text _mapToHMMediaPlaybackState
|| __TEXT.__text _mapToHMMediaPlaybackStateFromMPCPlayerState
|| __TEXT.__text _mapToHMMediaRepeatState
|| __TEXT.__text _mapToHMMediaShuffleState
|| __TEXT.__text _mapToSiriMediaProfileAttribute
|| __TEXT.__text _mapToSiriSceneType
|| __TEXT.__text _mapUARPFirmwareStagingCompletionStatusToString
|| __TEXT.__text _mapUARPFirmwareUpdateAvailabilityStatusToString
|| __TEXT.__text _parseMediaSourceDisplayOrder
|| __TEXT.__text _parseMessageSource
|| __TEXT.__text _playbackStateAsString
|| __TEXT.__text _policyObjectFromPolicies
|| __TEXT.__text _populateAccessoryMigrationModelsForHome
|| __TEXT.__text _populateTransactionForNewAccessory
|| __TEXT.__text _populateTransactionForUpdatedAccessory
|| __TEXT.__text _privateString
|| __TEXT.__text _productIsResidentCapable
|| __TEXT.__text _productSupportsAccessCodes
|| __TEXT.__text _productSupportsAnnounce
|| __TEXT.__text _productSupportsAssistantAccessControl
|| __TEXT.__text _productSupportsCHIP
|| __TEXT.__text _productSupportsCameraActivityZones
|| __TEXT.__text _productSupportsCameraPackageDetection
|| __TEXT.__text _productSupportsCameraRecording
|| __TEXT.__text _productSupportsCameraRecordingReachabilityNotifications
|| __TEXT.__text _productSupportsCameraSignificantEventNotifications
|| __TEXT.__text _productSupportsCaptiveNetworks
|| __TEXT.__text _productSupportsCloudDataSync
|| __TEXT.__text _productSupportsCompanionInitiatedRestart
|| __TEXT.__text _productSupportsCoordinationDoorbellChime
|| __TEXT.__text _productSupportsDeviceSetup
|| __TEXT.__text _productSupportsDoorbellChime
|| __TEXT.__text _productSupportsFaceClassification
|| __TEXT.__text _productSupportsFirmwareUpdate
|| __TEXT.__text _productSupportsHomeHub
|| __TEXT.__text _productSupportsHomeInvitation
|| __TEXT.__text _productSupportsHomeLevelLocationServiceSetting
|| __TEXT.__text _productSupportsKeyTransferClient
|| __TEXT.__text _productSupportsKeyTransferServer
|| __TEXT.__text _productSupportsKeychainSync
|| __TEXT.__text _productSupportsLockNotificationContext
|| __TEXT.__text _productSupportsManagedConfigurationProfile
|| __TEXT.__text _productSupportsMediaActions
|| __TEXT.__text _productSupportsMessagedHomePodSettings
|| __TEXT.__text _productSupportsMultiUser
|| __TEXT.__text _productSupportsMusicAlarm
|| __TEXT.__text _productSupportsNaturalLighting
|| __TEXT.__text _productSupportsPreferredMediaUser
|| __TEXT.__text _productSupportsResidentFirmwareUpdate
|| __TEXT.__text _productSupportsResidentFirstAccessoryCommunication
|| __TEXT.__text _productSupportsRouterManagement
|| __TEXT.__text _productSupportsShortcutActions
|| __TEXT.__text _productSupportsSiriEndpointSetup
|| __TEXT.__text _productSupportsStandaloneMode
|| __TEXT.__text _productSupportsTargetControl
|| __TEXT.__text _productSupportsThirdPartyMusic
|| __TEXT.__text _productSupportsThreadBorderRouter
|| __TEXT.__text _productSupportsThreadNetworkCredentialSharing
|| __TEXT.__text _productSupportsUnifiedMediaNotifications
|| __TEXT.__text _productSupportsUserMediaSettings
|| __TEXT.__text _productSupportsWakeOnLAN
|| __TEXT.__text _productSupportsWalletKey
|| __TEXT.__text _productSupportsWholeHouseAudio
|| __TEXT.__text _redactThirdPartyBundleIds
|| __TEXT.__text _regionAsString
|| __TEXT.__text _resizeImageData
|| __TEXT.__text _setMediaRouteIdentifier
|| __TEXT.__text _shortHAPTypeDescription
|| __TEXT.__text _shouldDelayBatchedReadWrite
|| __TEXT.__text _shouldDisableCloudDataSync
|| __TEXT.__text _shouldDisableLegacyCloudDataSync
|| __TEXT.__text _shouldDisableWACBrowser
|| __TEXT.__text _shouldDisconnectOnIdleForAccessory
|| __TEXT.__text _shouldEnableInternalDebugInterfaces
|| __TEXT.__text _shouldEnableNetworkLogging
|| __TEXT.__text _shouldEnableRetailDemoSetup
|| __TEXT.__text _shouldEnableWakeNotifications
|| __TEXT.__text _shouldLogPrivateInformation
|| __TEXT.__text _shouldShowAuthDialog
|| __TEXT.__text _shouldSkipAuthPromptDialog
|| __TEXT.__text _shouldSkipLocalAccessoryNotificationRegistration
|| __TEXT.__text _shouldSkipRemoteAccessoryNotificationRegistration
|| __TEXT.__text _sourceAsString
|| __TEXT.__text _spiClientIdentifierForUUID
|| __TEXT.__text _spiClientIdentifierForUUIDAndSalts
|| __TEXT.__text _stringFromCKRecord
|| __TEXT.__text _translateAVCAudioCodec
|| __TEXT.__text _translateAVCCipherSuite
|| __TEXT.__text _translateAVCVideoCodec
|| __TEXT.__text _translateAVCVideoResolution
|| __TEXT.__text _translateAudioCodec
|| __TEXT.__text _translateHMDCipherSuite
|| __TEXT.__text _translateImageResolution
|| __TEXT.__text _translateVideoCodec
|| __TEXT.__text _translateVideoResolution
|| __TEXT.__text _underlyingRequestGroupName
|| __TEXT.__text _updateAssistantHashingKey
|| __TEXT.__text _validateHomeKitServerChallenge
|| __TEXT.__text _validateHostNameForWANFirewallRule
|| __TEXT.__text _valueWithAssistantUnits
__ AVConference: _OBJC_CLASS_$_AVAudioClient
__ AVConference: _OBJC_CLASS_$_AVCAudioStream
__ AVConference: _OBJC_CLASS_$_AVCMediaStreamConfig
__ AVConference: _OBJC_CLASS_$_AVCNetworkAddress
__ AVConference: _OBJC_CLASS_$_AVCPacketFilterRTP
__ AVConference: _OBJC_CLASS_$_AVCPacketRelay
__ AVConference: _OBJC_CLASS_$_AVCPacketRelayConnection
__ AVConference: _OBJC_CLASS_$_AVCRemoteVideoClient
__ AVConference: _OBJC_CLASS_$_AVCVideoStream
__ AVConference: _OBJC_METACLASS_$_AVCMediaStreamConfig
__ AVConference: _kAVCKeyRTPLocalSSRC
__ AVConference: _kAVCKeySharedSocket
__ AVConference: _kAVCKeySupportedAudioCodecs
__ AVConference: _kAVCKeySupportedVideoDecodingCodecs
__ AVConference: _kAVCKeySupportedVideoDecodingResolutions
__ AVConference: _kAVCKeyVideoStreamDownlinkIsOperatingAtMaxBitrate
__ AVConference: _kAVCKeyVideoStreamDownlinkIsOperatingAtMinBitrate
__ AVConference: _kAVCKeyVideoStreamDownlinkOperatingBitrate
__ AVConference: _kAVCKeyVideoStreamDownlinkOptimalBitrate
__ AVFoundation: _AVOutputDeviceConfigurationOptionCancelConfigurationIfAuthRequired
__ AVFoundation: _OBJC_CLASS_$_AVOutputDevice
__ AVFoundation: _OBJC_CLASS_$_AVOutputDeviceAuthorizedPeer
__ Accounts: _ACAccountDataclassCloudPhotos
__ Accounts: _ACAccountIdentifierKey
__ Accounts: _ACAccountTypeIdentifierKey
__ Accounts: _ACAccountTypeIdentifieriTunesStore
__ Accounts: _ACDAccountStoreDidChangeNotification
__ Accounts: _OBJC_CLASS_$_ACAccount
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ Accounts: _kAccountDataclassHome
__ AppSupport: _CPCopyBundleIdentifierAndTeamFromAuditToken
__ AppleMediaServices: _OBJC_CLASS_$_AMSAuthenticateOptions
__ AppleMediaServices: _OBJC_CLASS_$_AMSAuthenticateRequest
__ AppleMediaServices: _OBJC_CLASS_$_AMSAuthenticateTask
__ ApplePushService: _APSConnectionOverrideNamedDelegatePort
__ ApplePushService: _APSEnvironmentProduction
__ ApplePushService: _OBJC_CLASS_$_APSConnection
__ AssistantServices: _AFPreferencesMultiUserCompanionNotificationLanguageCodesForHomePodVersion
__ AssistantServices: _OBJC_CLASS_$_AFPreferences
__ AssistantServices: _OBJC_CLASS_$_AFSecurityConnection
__ AssistantServices: _OBJC_CLASS_$_AFSettingsConnection
__ AssistantServices: _OBJC_CLASS_$_AFSiriHomeAutomationBackgroundRequest
__ AssistantServices: _OBJC_CLASS_$_AFSiriHomeAutomationRequestInfo
__ AuthKit: _AKAuthenticationAlternateDSIDKey
__ AuthKit: _AKAuthenticationDSIDKey
__ AuthKit: _AKAuthenticationIsHSA2Key
__ AuthKit: _AKAuthenticationPasswordKey
__ AuthKit: _AKAuthenticationRawPasswordKey
__ AuthKit: _AKAuthenticationUsernameKey
__ AuthKit: _OBJC_CLASS_$_AKAccountManager
__ AuthKit: _OBJC_CLASS_$_AKAnisetteData
__ AuthKit: _OBJC_CLASS_$_AKAnisetteProvisioningController
__ AuthKit: _OBJC_CLASS_$_AKAppleIDAuthenticationContext
__ AuthKit: _OBJC_CLASS_$_AKAppleIDAuthenticationController
__ AuthKit: _OBJC_CLASS_$_AKDevice
__ BackgroundSystemTasks: _OBJC_CLASS_$_BGRepeatingSystemTaskRequest
__ BackgroundSystemTasks: _OBJC_CLASS_$_BGSystemTaskScheduler
__ BaseBoard: _OBJC_CLASS_$_BSPortDeathWatcher
__ BiomeFoundation: _OBJC_CLASS_$_BMPublicStreamUtilities
__ BiomeStorage: _OBJC_CLASS_$_BMStoreConfig
__ BiomeStorage: _OBJC_CLASS_$_BMStreamDatastorePruner
__ BiomeStreams: _OBJC_CLASS_$_BMEventBase
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientAccessoryControlEvent
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientAccessoryControlStream
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientActionSetEvent
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientActionSetStream
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientBase
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientMediaAccessoryControlEvent
__ BiomeStreams: _OBJC_CLASS_$_BMHomeKitClientMediaAccessoryControlStream
__ BiomeStreams: _OBJC_CLASS_$_BMStoreStream
__ BiomeStreams: _OBJC_METACLASS_$_BMEventBase
__ CBORLibrary: _OBJC_CLASS_$_COSEKey
__ CHIPPlugin: _OBJC_CLASS_$_CHIPAccessoryServer
__ CHIPPlugin: _OBJC_CLASS_$_CHIPAccessoryServerBrowser
__ CHIPPlugin: _OBJC_CLASS_$_CHIPPluginAccessorySetupPayload
__ CHIPPlugin: _OBJC_CLASS_$_CHIPPluginMutableAccessorySetupPayload
__ CHIPPlugin: _OBJC_CLASS_$_CHIPPluginPairing
__ CallKit: _OBJC_CLASS_$_CXCallObserver
__ CarKit: _OBJC_CLASS_$_CARSessionStatus
__ ChronoServices: _OBJC_CLASS_$_CHSTimelineController
__ ChronoServices: _OBJC_CLASS_$_CHSWidgetConfigurationReader
__ CloudKit: _CKAccountChangedNotification
__ CloudKit: _CKContainerEnvironmentFromString
__ CloudKit: _CKContainerEnvironmentString
__ CloudKit: _CKCurrentUserDefaultName
__ CloudKit: _CKErrorDomain
__ CloudKit: _CKErrorRetryAfterKey
__ CloudKit: _CKPartialErrorsByItemIDKey
__ CloudKit: _OBJC_CLASS_$_CKAsset
__ CloudKit: _OBJC_CLASS_$_CKContainer
__ CloudKit: _OBJC_CLASS_$_CKContainerID
__ CloudKit: _OBJC_CLASS_$_CKContainerOptions
__ CloudKit: _OBJC_CLASS_$_CKFetchDatabaseChangesOperation
__ CloudKit: _OBJC_CLASS_$_CKFetchRecordZoneChangesConfiguration
__ CloudKit: _OBJC_CLASS_$_CKFetchRecordZoneChangesOperation
__ CloudKit: _OBJC_CLASS_$_CKFetchRecordZonesOperation
__ CloudKit: _OBJC_CLASS_$_CKFetchRecordsOperation
__ CloudKit: _OBJC_CLASS_$_CKFetchSubscriptionsOperation
__ CloudKit: _OBJC_CLASS_$_CKModifyRecordZonesOperation
__ CloudKit: _OBJC_CLASS_$_CKModifyRecordsOperation
__ CloudKit: _OBJC_CLASS_$_CKModifySubscriptionsOperation
__ CloudKit: _OBJC_CLASS_$_CKOperationConfiguration
__ CloudKit: _OBJC_CLASS_$_CKOperationGroup
__ CloudKit: _OBJC_CLASS_$_CKQuery
__ CloudKit: _OBJC_CLASS_$_CKQueryOperation
__ CloudKit: _OBJC_CLASS_$_CKRecord
__ CloudKit: _OBJC_CLASS_$_CKRecordID
__ CloudKit: _OBJC_CLASS_$_CKRecordZone
__ CloudKit: _OBJC_CLASS_$_CKRecordZoneID
__ CloudKit: _OBJC_CLASS_$_CKRecordZoneSubscription
__ CloudKit: _OBJC_CLASS_$_CKServerChangeToken
__ CloudKit: _OBJC_CLASS_$_CKStreamingAssetAppendContext
__ CloudKit: _OBJC_CLASS_$_CKUserIdentityLookupInfo
__ Contacts: _CNContactEmailAddressesKey
__ Contacts: _CNContactPhoneNumbersKey
__ Contacts: _CNContactStoreDidChangeNotification
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ Contacts: _OBJC_CLASS_$_CNPhoneNumber
__ CoordinationCore: _OBJC_CLASS_$_COMeshAddOn
__ CoordinationCore: _OBJC_CLASS_$_COMeshCommand
__ CoordinationCore: _OBJC_CLASS_$_COMeshController
__ CoordinationCore: _OBJC_CLASS_$_COMeshNotification
__ CoordinationCore: _OBJC_CLASS_$_COMeshRequest
__ CoordinationCore: _OBJC_CLASS_$_COMeshResponse
__ CoordinationCore: _OBJC_METACLASS_$_COMeshAddOn
__ CoordinationCore: _OBJC_METACLASS_$_COMeshCommand
__ CoordinationCore: _OBJC_METACLASS_$_COMeshController
__ CoordinationCore: _OBJC_METACLASS_$_COMeshNotification
__ CoordinationCore: _OBJC_METACLASS_$_COMeshRequest
__ CoordinationCore: _OBJC_METACLASS_$_COMeshResponse
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreDuet: _OBJC_CLASS_$__DKEvent
__ CoreDuet: _OBJC_CLASS_$__DKEventQuery
__ CoreDuet: _OBJC_CLASS_$__DKEventStream
__ CoreDuet: _OBJC_CLASS_$__DKHomeKitAccessoryControlIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKHomeKitSceneIdentifier
__ CoreDuet: _OBJC_CLASS_$__DKKnowledgeStore
__ CoreDuet: _OBJC_CLASS_$__DKMetadataHomeKitAccessoryControl
__ CoreDuet: _OBJC_CLASS_$__DKMetadataHomeKitScene
__ CoreDuet: _OBJC_CLASS_$__DKQuery
__ CoreDuet: _OBJC_CLASS_$__DKSystemEventStreams
__ CoreDuetContext: _OBJC_CLASS_$__CDClientContext
__ CoreFollowUp: _FLFollowUpPreferencesBundleIdentifier
__ CoreFollowUp: _OBJC_CLASS_$_FLFollowUpAction
__ CoreFollowUp: _OBJC_CLASS_$_FLFollowUpController
__ CoreFollowUp: _OBJC_CLASS_$_FLFollowUpItem
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFAutorelease
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberGetType
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyMultiple
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFUserNotificationCancel
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationGetResponseValue
__ CoreFoundation: _CFUserNotificationReceiveResponse
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleUsesMetricSystem
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _NSURLNameKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSOutputStream
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFXPCCreateCFObjectFromXPCObject
__ CoreFoundation: __CFXPCCreateXPCObjectFromCFObject
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFBundleVersionKey
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlertTopMostKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGImageGetAlphaInfo
__ CoreGraphics: _CGImageGetBitsPerComponent
__ CoreGraphics: _CGImageGetBytesPerRow
__ CoreGraphics: _CGImageGetColorSpace
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGRectZero
__ CoreHAP: _HAPAccessCodeResponseStatusAsString
__ CoreHAP: _HAPAccessoryDuration
__ CoreHAP: _HAPAccessoryExpectedDuration
__ CoreHAP: _HAPAccessoryInstanceID
__ CoreHAP: _HAPAccessoryLinkType
__ CoreHAP: _HAPAccessoryReachable
__ CoreHAP: _HAPAccessorySuspendedStateDescription
__ CoreHAP: _HAPAccessorySuspendedStatePostfixName
__ CoreHAP: _HAPAccessoryUptimeDuration
__ CoreHAP: _HAPAttributeDatabaseKey_Accessories
__ CoreHAP: _HAPAttributeDatabaseKey_AccessoryInstanceID
__ CoreHAP: _HAPAuthMethodToString
__ CoreHAP: _HAPCharacteristicEventNotification
__ CoreHAP: _HAPCharacteristicEventsUserInfoKey
__ CoreHAP: _HAPCharacteristicUUID_Active
__ CoreHAP: _HAPCharacteristicUUID_AirParticulateDensity
__ CoreHAP: _HAPCharacteristicUUID_AirQuality
__ CoreHAP: _HAPCharacteristicUUID_CarbonDioxideDetected
__ CoreHAP: _HAPCharacteristicUUID_CarbonMonoxideDetected
__ CoreHAP: _HAPCharacteristicUUID_ContactState
__ CoreHAP: _HAPCharacteristicUUID_CoolingThreshold
__ CoreHAP: _HAPCharacteristicUUID_CurrentDoorState
__ CoreHAP: _HAPCharacteristicUUID_CurrentHeaterCoolerState
__ CoreHAP: _HAPCharacteristicUUID_CurrentHeatingCooling
__ CoreHAP: _HAPCharacteristicUUID_CurrentHorizontalTilt
__ CoreHAP: _HAPCharacteristicUUID_CurrentLockMechanismState
__ CoreHAP: _HAPCharacteristicUUID_CurrentPosition
__ CoreHAP: _HAPCharacteristicUUID_CurrentRelativeHumidity
__ CoreHAP: _HAPCharacteristicUUID_CurrentSecuritySystemState
__ CoreHAP: _HAPCharacteristicUUID_CurrentTemperature
__ CoreHAP: _HAPCharacteristicUUID_CurrentTilt
__ CoreHAP: _HAPCharacteristicUUID_CurrentVerticalTilt
__ CoreHAP: _HAPCharacteristicUUID_FirmwareRevision
__ CoreHAP: _HAPCharacteristicUUID_HeatingThreshold
__ CoreHAP: _HAPCharacteristicUUID_Identify
__ CoreHAP: _HAPCharacteristicUUID_InUse
__ CoreHAP: _HAPCharacteristicUUID_InputEvent
__ CoreHAP: _HAPCharacteristicUUID_LeakDetected
__ CoreHAP: _HAPCharacteristicUUID_MotionDetected
__ CoreHAP: _HAPCharacteristicUUID_Name
__ CoreHAP: _HAPCharacteristicUUID_ObstructionDetected
__ CoreHAP: _HAPCharacteristicUUID_OccupancyDetected
__ CoreHAP: _HAPCharacteristicUUID_On
__ CoreHAP: _HAPCharacteristicUUID_PM10Density
__ CoreHAP: _HAPCharacteristicUUID_PM2_5Density
__ CoreHAP: _HAPCharacteristicUUID_Ping
__ CoreHAP: _HAPCharacteristicUUID_PositionState
__ CoreHAP: _HAPCharacteristicUUID_ProgramMode
__ CoreHAP: _HAPCharacteristicUUID_RemainingDuration
__ CoreHAP: _HAPCharacteristicUUID_SecuritySystemAlarmType
__ CoreHAP: _HAPCharacteristicUUID_SelectedStreamConfiguration
__ CoreHAP: _HAPCharacteristicUUID_SetupStreamEndpoint
__ CoreHAP: _HAPCharacteristicUUID_SmokeDetected
__ CoreHAP: _HAPCharacteristicUUID_StreamingStatus
__ CoreHAP: _HAPCharacteristicUUID_SupportedAudioStreamConfiguration
__ CoreHAP: _HAPCharacteristicUUID_SupportedRTPConfiguration
__ CoreHAP: _HAPCharacteristicUUID_SupportedVideoStreamConfiguration
__ CoreHAP: _HAPCharacteristicUUID_TargetDoorState
__ CoreHAP: _HAPCharacteristicUUID_TargetHeaterCoolerState
__ CoreHAP: _HAPCharacteristicUUID_TargetHeatingCooling
__ CoreHAP: _HAPCharacteristicUUID_TargetHorizontalTilt
__ CoreHAP: _HAPCharacteristicUUID_TargetLockMechanismState
__ CoreHAP: _HAPCharacteristicUUID_TargetPosition
__ CoreHAP: _HAPCharacteristicUUID_TargetRelativeHumidity
__ CoreHAP: _HAPCharacteristicUUID_TargetSecuritySystemState
__ CoreHAP: _HAPCharacteristicUUID_TargetTemperature
__ CoreHAP: _HAPCharacteristicUUID_TargetTilt
__ CoreHAP: _HAPCharacteristicUUID_TargetVerticalTilt
__ CoreHAP: _HAPCharacteristicUUID_TimeUpdate
__ CoreHAP: _HAPCommunicationProtocolDescription
__ CoreHAP: _HAPDataStreamTransportCommandStatusAsString
__ CoreHAP: _HAPDispatchQueueName
__ CoreHAP: _HAPErrorDomain
__ CoreHAP: _HAPFirmwareUpdateStateAsString
__ CoreHAP: _HAPLinkTypeDescription
__ CoreHAP: _HAPMetadataFirmwareUpdateAutoApplyPolicyKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePoliciesKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyAnyUserAtHomeKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyCharacteristicValueSettlingTimeKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyCharacteristicValuesKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyCharacteristicsKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyCheckForScheduledAutomationKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyDefaultCategoryKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyNoUserAtHomeKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyServicesKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyTimeWindowEndKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyTimeWindowKey
__ CoreHAP: _HAPMetadataFirmwareUpdatePolicyTimeWindowStartKey
__ CoreHAP: _HAPMetadataFirmwareUpdateStagingPolicyKey
__ CoreHAP: _HAPNFCData
__ CoreHAP: _HAPNFCProxSetupNotification
__ CoreHAP: _HAPNotificationPingFailedAccessoryNotReachable
__ CoreHAP: _HAPNotificationPingSucceededAccessoryReachable
__ CoreHAP: _HAPOperatingStateAbnormalReasonsAsString
__ CoreHAP: _HAPOperatingStateAsString
__ CoreHAP: _HAPServiceType_Lightbulb
__ CoreHAP: _HAPServiceType_LockMechanism
__ CoreHAP: _HAPServiceType_SecuritySystem
__ CoreHAP: _HAPServiceUUID_AccessoryInformation
__ CoreHAP: _HAPServiceUUID_AccessoryInformation_BTLE
__ CoreHAP: _HAPServiceUUID_AccessoryRuntimeInformation
__ CoreHAP: _HAPServiceUUID_AirPurifier
__ CoreHAP: _HAPServiceUUID_CameraRTPStreamManagement
__ CoreHAP: _HAPServiceUUID_Door
__ CoreHAP: _HAPServiceUUID_Doorbell
__ CoreHAP: _HAPServiceUUID_Fan
__ CoreHAP: _HAPServiceUUID_Faucet
__ CoreHAP: _HAPServiceUUID_GarageDoorOpener
__ CoreHAP: _HAPServiceUUID_HeaterCooler
__ CoreHAP: _HAPServiceUUID_HumidifierDehumidifier
__ CoreHAP: _HAPServiceUUID_IrrigationSystem
__ CoreHAP: _HAPServiceUUID_Lightbulb
__ CoreHAP: _HAPServiceUUID_LockMechanism
__ CoreHAP: _HAPServiceUUID_Outlet
__ CoreHAP: _HAPServiceUUID_ProgrammableSwitch_Stateless
__ CoreHAP: _HAPServiceUUID_SecuritySystem
__ CoreHAP: _HAPServiceUUID_Sensor_AirQuality
__ CoreHAP: _HAPServiceUUID_Sensor_CarbonDioxide
__ CoreHAP: _HAPServiceUUID_Sensor_CarbonMonoxide
__ CoreHAP: _HAPServiceUUID_Sensor_Contact
__ CoreHAP: _HAPServiceUUID_Sensor_Humidity
__ CoreHAP: _HAPServiceUUID_Sensor_Leak
__ CoreHAP: _HAPServiceUUID_Sensor_Light
__ CoreHAP: _HAPServiceUUID_Sensor_Motion
__ CoreHAP: _HAPServiceUUID_Sensor_Occupancy
__ CoreHAP: _HAPServiceUUID_Sensor_Smoke
__ CoreHAP: _HAPServiceUUID_Sensor_Temperature
__ CoreHAP: _HAPServiceUUID_Switch
__ CoreHAP: _HAPServiceUUID_Thermostat
__ CoreHAP: _HAPServiceUUID_TimeInformation
__ CoreHAP: _HAPServiceUUID_Valve
__ CoreHAP: _HAPServiceUUID_VentilationFan
__ CoreHAP: _HAPServiceUUID_Window
__ CoreHAP: _HAPServiceUUID_WindowCovering
__ CoreHAP: _HAPShortUUIDType
__ CoreHAP: _HAPStagingNotReadyReasonsAsString
__ CoreHAP: _HAPStringFromAccessoryServerSession
__ CoreHAP: _HAPSystemKeychainStoreUpdatedNotification
__ CoreHAP: _HAPTLVCreateParseArrayToString
__ CoreHAP: _HAPTLVParseContiguousTlvs
__ CoreHAP: _HAPTLVParseUInt64
__ CoreHAP: _HAPTLVWriteUInt64
__ CoreHAP: _HAPURLComponent_ResourceImage
__ CoreHAP: _HAPURLComponent_ResourceImageHeight
__ CoreHAP: _HAPURLComponent_ResourceImageWidth
__ CoreHAP: _HAPURLComponent_ResourceRequestReason
__ CoreHAP: _HAPURLComponent_ResourceType
__ CoreHAP: _HAPUpdateNotReadyReasonsAsString
__ CoreHAP: _HAPUserPermissionTypeDescription
__ CoreHAP: _HAPValidateSetupHash
__ CoreHAP: _HMErrorCodeFromHAPErrorCode
__ CoreHAP: _HMErrorFromOSStatus
__ CoreHAP: _OBJC_CLASS_$_HAP2TLVThreadControl
__ CoreHAP: _OBJC_CLASS_$_HAP2TLVThreadNetworkCredentials
__ CoreHAP: _OBJC_CLASS_$_HAP2TLVThreadOperationTypeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeCharacterSetWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeConfiguration
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeControl
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeControlRequest
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeControlResponse
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeFlagsWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeOperationTypeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPAccessCodeResponseStatusWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPAccessory
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryInfo
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryPairingRequest
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServer
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerBTLE
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerBrowser
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerBrowserBTLE
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerBrowserHAP2Adapter
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerBrowserIP
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerHAP2Adapter
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryServerIP
__ CoreHAP: _OBJC_CLASS_$_HAPAccessoryWakeTuple
__ CoreHAP: _OBJC_CLASS_$_HAPArrayWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPBTLECentralManager
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristic
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicConfigurationRequestTuple
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicContextData
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicNotificationContext
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicResponseTuple
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueActiveTransitionContext
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueLinearDerivedTransition
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueLinearDerivedTransitionPoint
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueRange
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransition
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionControl
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionControlResponse
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionControllerContext
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionEndBehaviorWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionFetch
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionStart
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicValueTransitionState
__ CoreHAP: _OBJC_CLASS_$_HAPCharacteristicWriteRequestTuple
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamHAPAccessoryPayload
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamHAPControllerPayload
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportCommandWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportInterruptPayload
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportProtocolWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportSetup
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportSetupResponse
__ CoreHAP: _OBJC_CLASS_$_HAPDataStreamTransportSupportedConfiguration
__ CoreHAP: _OBJC_CLASS_$_HAPDataWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPDeviceID
__ CoreHAP: _OBJC_CLASS_$_HAPFirmwareUpdateReadiness
__ CoreHAP: _OBJC_CLASS_$_HAPFirmwareUpdateStatus
__ CoreHAP: _OBJC_CLASS_$_HAPFragmentationPacket
__ CoreHAP: _OBJC_CLASS_$_HAPFragmentationStream
__ CoreHAP: _OBJC_CLASS_$_HAPHardwareFinish
__ CoreHAP: _OBJC_CLASS_$_HAPMetadata
__ CoreHAP: _OBJC_CLASS_$_HAPMetadataTuple
__ CoreHAP: _OBJC_CLASS_$_HAPMetricsDispatcher
__ CoreHAP: _OBJC_CLASS_$_HAPMetricsPairVerifyEvent
__ CoreHAP: _OBJC_CLASS_$_HAPMutableKeychainItem
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessControl
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessDeviceCredentialKeyRequest
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessKeyStateWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessKeyTypeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessOperationTypeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPNFCAccessReaderKeyRequest
__ CoreHAP: _OBJC_CLASS_$_HAPNFCReaderNotification
__ CoreHAP: _OBJC_CLASS_$_HAPNotification
__ CoreHAP: _OBJC_CLASS_$_HAPNumberParser
__ CoreHAP: _OBJC_CLASS_$_HAPNumberWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPOperatingStateResponse
__ CoreHAP: _OBJC_CLASS_$_HAPPairSetupSession
__ CoreHAP: _OBJC_CLASS_$_HAPPairingIdentity
__ CoreHAP: _OBJC_CLASS_$_HAPSelectedAudioStreamConfiguration
__ CoreHAP: _OBJC_CLASS_$_HAPStringWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPSupportedAudioStreamConfigurations
__ CoreHAP: _OBJC_CLASS_$_HAPSupportedCharacteristicValueTransitionConfiguration
__ CoreHAP: _OBJC_CLASS_$_HAPSupportedDiagnosticsSnapshot
__ CoreHAP: _OBJC_CLASS_$_HAPSuspendedAccessoryIP
__ CoreHAP: _OBJC_CLASS_$_HAPSystemKeychainStore
__ CoreHAP: _OBJC_CLASS_$_HAPTLVBase
__ CoreHAP: _OBJC_CLASS_$_HAPTLVCreator
__ CoreHAP: _OBJC_CLASS_$_HAPTLVFloatNumberValue
__ CoreHAP: _OBJC_CLASS_$_HAPTLVSignedNumberValue
__ CoreHAP: _OBJC_CLASS_$_HAPTLVUnsignedNumberValue
__ CoreHAP: _OBJC_CLASS_$_HAPThreadNetworkMetadata
__ CoreHAP: _OBJC_CLASS_$_HAPUUIDWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPWiFiConfigurationControl
__ CoreHAP: _OBJC_CLASS_$_HAPWiFiConfigurationOperationTypeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPWiFiSecurityModeWrapper
__ CoreHAP: _OBJC_CLASS_$_HAPWiFiStationConfiguration
__ CoreHAP: _OBJC_IVAR_$_HAPAccessoryServer._identifier
__ CoreHAP: _OBJC_IVAR_$_HAPAccessoryServer._name
__ CoreHAP: _OBJC_METACLASS_$_HAPAccessoryServer
__ CoreHAP: _OBJC_METACLASS_$_HAPAccessoryServerBrowser
__ CoreHAP: _OBJC_METACLASS_$_HAPNumberParser
__ CoreHAP: _OBJC_METACLASS_$_HAPTLVBase
__ CoreHAP: __parseSerializedAccessory
__ CoreHAP: _compareStateNumberWithRollover
__ CoreHAP: _dateWithTimeIntervalSince1970
__ CoreHAP: _hap2LogInitialize
__ CoreHAP: _hap2Log_accessory
__ CoreHAP: _hap2Log_browser
__ CoreHAP: _kControllerKeyPairGeneratedNotification
__ CoreHAP: _kHAPMetadataKey
__ CoreHAP: _kHAPPrimaryAccessoryInstanceID
__ CoreHAP: _kHMMetadataKey
__ CoreHAP: _kMetadataAllowableSecuringWritesKey
__ CoreHAP: _kMetadataAssistantKey
__ CoreHAP: _kMetadataBulletinBoardEnabledKey
__ CoreHAP: _kMetadataCategoriesKey
__ CoreHAP: _kMetadataCharacteristicsKey
__ CoreHAP: _kMetadataCoalesceNotificationsKey
__ CoreHAP: _kMetadataDefaultDescriptionKey
__ CoreHAP: _kMetadataDenylistFromApplicationsKey
__ CoreHAP: _kMetadataDenylistKey
__ CoreHAP: _kMetadataFormatKey
__ CoreHAP: _kMetadataIdentifierKey
__ CoreHAP: _kMetadataLegacyV3CloudDataKey
__ CoreHAP: _kMetadataLegacyV3IDSDataKey
__ CoreHAP: _kMetadataNotificationAutoEnabledKey
__ CoreHAP: _kMetadataNotificationKey
__ CoreHAP: _kMetadataOutValuesKey
__ CoreHAP: _kMetadataPlistDictionaryKey
__ CoreHAP: _kMetadataReadKey
__ CoreHAP: _kMetadataReadWriteKey
__ CoreHAP: _kMetadataRequiresDeviceUnlockKey
__ CoreHAP: _kMetadataSchemaVersionKey
__ CoreHAP: _kMetadataServicesKey
__ CoreHAP: _kMetadataSupportsLocalizationKey
__ CoreHAP: _kMetadataUUIDKey
__ CoreHAP: _kMetadataUnitsKey
__ CoreHAP: _kMetadataValuesKey
__ CoreHAP: _kMetadataVersionKey
__ CoreHAP: _kMetadataWakeOnOperationsFilter
__ CoreHAP: _kMetadataWakeOnOperationsKey
__ CoreHAP: _kMetadataWriteKey
__ CoreIDCredBuilder: _OBJC_CLASS_$_CIDCBuilderSignatureDetails
__ CoreIDCredBuilder: _OBJC_CLASS_$_CIDCElement
__ CoreIDCredBuilder: _OBJC_CLASS_$_CIDCPayloadBuilder
__ CoreIDCredBuilder: _OBJC_CLASS_$_CIDCPayloadBuilderDetails
__ CoreLocation: _CLLocationCoordinate2DMake
__ CoreLocation: _CLLocationDistanceMax
__ CoreLocation: _OBJC_CLASS_$_CLBeaconRegion
__ CoreLocation: _OBJC_CLASS_$_CLCircularRegion
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ CoreLocation: _OBJC_CLASS_$_CLLocationManager
__ CoreLocation: _OBJC_CLASS_$_CLRegion
__ CoreLocation: _OBJC_CLASS_$__CLSignificantRegion
__ CoreLocation: _kCLLocationAccuracyBestForNavigation
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimeRangeGetIntersection
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimeZero
__ CoreRoutine: _OBJC_CLASS_$_RTRoutineManager
__ CoreServices: _OBJC_CLASS_$_LSApplicationExtensionRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _kUTTypeJPEG
__ CoreSpotlight: _OBJC_CLASS_$_CSSearchableIndex
__ CoreUARP: _OBJC_CLASS_$_UARPAccessory
__ CoreUARP: _OBJC_CLASS_$_UARPAssetID
__ CoreUARP: _OBJC_CLASS_$_UARPController
__ CoreUARP: _OBJC_CLASS_$_UARPSupportedAccessory
__ CoreUARP: _UARPAssetDownloadStatusToString
__ CoreUARP: _UARPFirmwareStagingCompletionStatusToString
__ CoreUARP: _UARPFirmwareUpdateAvailabilityStatusToString
__ CoreUtils: _CFPrefs_CopyTypedValue
__ CoreUtils: _CFPrefs_GetDouble
__ CoreUtils: _CFPrefs_GetInt64
__ CoreUtils: _DebugGetErrorString
__ CoreUtils: _GetPrimaryIPAddress
__ CoreUtils: _HardwareAddressToCString
__ CoreUtils: _IsAppleTV
__ CoreUtils: _LogPrintF
__ CoreUtils: _NSAppendPrintF
__ CoreUtils: _NSPrintF
__ CoreUtils: _OBJC_CLASS_$_CUBLEAdvertiser
__ CoreUtils: _OBJC_CLASS_$_CUBLEScanner
__ CoreUtils: _OBJC_CLASS_$_CULiveAction
__ CoreUtils: _OBJC_CLASS_$_CUWACSession
__ CoreUtils: _OBJC_CLASS_$_CUWiFiScanner
__ CoreUtils: _OPACKDecodeBytes
__ CoreUtils: _OPACKEncoderCreateData
__ CoreUtils: _PairingSessionCreate
__ CoreUtils: _PairingSessionDeriveKey
__ CoreUtils: _PairingSessionExchange
__ CoreUtils: _PairingSessionSetLogging
__ CoreUtils: _RandomBytes
__ CoreUtils: _SocketGetInterfaceInfo
__ CoreUtils: _TLV8BufferAppend
__ CoreUtils: _TLV8BufferAppendUInt64
__ CoreUtils: _TLV8BufferFree
__ CoreUtils: _TLV8BufferInit
__ CoreUtils: _TLV8Get
__ CoreUtils: _TLV8GetNext
__ CoreUtils: _TLV8GetOrCopyCoalesced
__ CoreUtils: _TLV8GetUInt64
__ CoreUtils: _UpTicksToMilliseconds
__ CoreUtils: _UpTicksToSeconds
__ CoreUtils: _WiFiCopyNetworkInfo
__ CoreUtils: __LogCategory_Initialize
__ CoreUtils: _cced25519_sign_compat
__ CoreUtils: _cced25519_verify_compat
__ CoreUtils: _chacha20_poly1305_decrypt_all_64x64
__ CoreUtils: _chacha20_poly1305_decrypt_all_96x32
__ CoreUtils: _chacha20_poly1305_encrypt_all_64x64
__ CoreUtils: _chacha20_poly1305_encrypt_all_96x32
__ DataMigration: _DMGetUserDataDisposition
__ FMF: _FMFDevicesChangedNotification
__ FMF: _FMFMeDeviceChangedNotification
__ FMF: _OBJC_CLASS_$_FMFSession
__ FamilyCircle: _OBJC_CLASS_$_FAFetchFamilyCircleRequest
__ FindMyDevice: _FMDLostModeExitAuthCompleteNotification
__ FindMyDevice: _OBJC_CLASS_$_FMDFMIPManager
__ FindMyDevice: _kLostModeChangedNotification
__ Foundation: _NSAllMapTableValues
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSDetailedErrorsKey
__ Foundation: _NSFilePosixPermissions
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLocalizedFileSizeDescription
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromBOOL
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSBackgroundActivityScheduler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCoder
__ Foundation: _OBJC_CLASS_$_NSComparisonPredicate
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantFloatNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDataDetector
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDateInterval
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExpression
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSFormatter
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSListFormatter
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLCredential
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSFormatter
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ FrontBoardServices: _FBSSceneVisibilityEndowmentNamespace
__ GeoServices: _GEOAlmanacAltitudeSunset
__ GeoServices: _OBJC_CLASS_$_GEOAlmanac
__ HMFoundation: _HMFAreStringsEqualIgnoringCase
__ HMFoundation: _HMFBooleanToString
__ HMFoundation: _HMFCreateOsLogHandle
__ HMFoundation: _HMFDataIsReversed
__ HMFoundation: _HMFDigestAlgorithmToString
__ HMFoundation: _HMFDispatchQueueName
__ HMFoundation: _HMFEnabledStatusToString
__ HMFoundation: _HMFEqualObjects
__ HMFoundation: _HMFErrorDomain
__ HMFoundation: _HMFEventDictionaryFromFormatWithUUID
__ HMFoundation: _HMFGetActivityIdentifier
__ HMFoundation: _HMFGetLogIdentifier
__ HMFoundation: _HMFGetOsLogHandle
__ HMFoundation: _HMFHomeKitLoggingSubsystem
__ HMFoundation: _HMFKeySizeIRK128
__ HMFoundation: _HMFKeyTypeIRK
__ HMFoundation: _HMFMemoryMonitorProcessMemoryPressureNotification
__ HMFoundation: _HMFMethodDescription
__ HMFoundation: _HMFObjectDescription
__ HMFoundation: _HMFOperatingSystemVersionCompare
__ HMFoundation: _HMFPowerLogEventTypeKey
__ HMFoundation: _HMFPowerLogHomeKitCameraConfigurationTable
__ HMFoundation: _HMFPowerLogHomeKitHomeConfigurationTable
__ HMFoundation: _HMFPowerManagerBatteryLevelDidChangeNotification
__ HMFoundation: _HMFPowerManagerBatteryStateDidChangeNotification
__ HMFoundation: _HMFProcessMemoryStateUpdateKey
__ HMFoundation: _HMFProductClassFromString
__ HMFoundation: _HMFProductClassToString
__ HMFoundation: _HMFProductColorToString
__ HMFoundation: _HMFProductInfoArcherBOSVersion
__ HMFoundation: _HMFProductInfoArcherEOSVersion
__ HMFoundation: _HMFProductInfoArcherGOSVersion
__ HMFoundation: _HMFProductInfoArcherHWOSVersion
__ HMFoundation: _HMFProductInfoArcherOSVersion
__ HMFoundation: _HMFProductInfoAzulBOSVersion
__ HMFoundation: _HMFProductInfoAzulEOSVersion
__ HMFoundation: _HMFProductInfoAzulGOSVersion
__ HMFoundation: _HMFProductInfoAzulHWOSVersion
__ HMFoundation: _HMFProductInfoAzulOSVersion
__ HMFoundation: _HMFProductInfoBlowfishOSVersion
__ HMFoundation: _HMFProductInfoBondiOSVersion
__ HMFoundation: _HMFProductInfoBugleOSVersion
__ HMFoundation: _HMFProductInfoButlerOSVersion
__ HMFoundation: _HMFProductInfoCatamaranOSVersion
__ HMFoundation: _HMFProductInfoCinarOSVersion
__ HMFoundation: _HMFProductInfoCoralOSVersion
__ HMFoundation: _HMFProductInfoCoyoteOSVersion
__ HMFoundation: _HMFProductInfoDaytonaOSVersion
__ HMFoundation: _HMFProductInfoDonnerTideOSVersion
__ HMFoundation: _HMFProductInfoEagleOSVersion
__ HMFoundation: _HMFProductInfoEatonOSVersion
__ HMFoundation: _HMFProductInfoElectricOSVersion
__ HMFoundation: _HMFProductInfoEmeraldOSVersion
__ HMFoundation: _HMFProductInfoEmetOSVersion
__ HMFoundation: _HMFProductInfoEmperorOSVersion
__ HMFoundation: _HMFProductInfoErieOSVersion
__ HMFoundation: _HMFProductInfoFatsaOSVersion
__ HMFoundation: _HMFProductInfoFerryOSVersion
__ HMFoundation: _HMFProductInfoFortuneOSVersion
__ HMFoundation: _HMFProductInfoFrancisOSVersion
__ HMFoundation: _HMFProductInfoGloryCOSVersion
__ HMFoundation: _HMFProductInfoGloryGOSVersion
__ HMFoundation: _HMFProductInfoGloryOSVersion
__ HMFoundation: _HMFProductInfoGoldenGateEOSVersion
__ HMFoundation: _HMFProductInfoGoldenGateGOSVersion
__ HMFoundation: _HMFProductInfoGoldenGateOSVersion
__ HMFoundation: _HMFProductInfoGraceBOSVersion
__ HMFoundation: _HMFProductInfoGraceFOSVersion
__ HMFoundation: _HMFProductInfoGraceOSVersion
__ HMFoundation: _HMFProductInfoHopeBOSVersion
__ HMFoundation: _HMFProductInfoHopeCOSVersion
__ HMFoundation: _HMFProductInfoHopeGOSVersion
__ HMFoundation: _HMFProductInfoHopeOSVersion
__ HMFoundation: _HMFProductInfoHunterBOSVersion
__ HMFoundation: _HMFProductInfoHunterEOSVersion
__ HMFoundation: _HMFProductInfoHunterGOSVersion
__ HMFoundation: _HMFProductInfoHunterOSVersion
__ HMFoundation: _HMFProductInfoJazzBOSVersion
__ HMFoundation: _HMFProductInfoJazzFOSVersion
__ HMFoundation: _HMFProductInfoJazzOSVersion
__ HMFoundation: _HMFProductInfoJupiterBOSVersion
__ HMFoundation: _HMFProductInfoJupiterCOSVersion
__ HMFoundation: _HMFProductInfoJupiterEOSVersion
__ HMFoundation: _HMFProductInfoJupiterFOSVersion
__ HMFoundation: _HMFProductInfoJupiterOSVersion
__ HMFoundation: _HMFProductInfoKincaidOSVersion
__ HMFoundation: _HMFProductInfoLibertyCOSVersion
__ HMFoundation: _HMFProductInfoLibertyGOSVersion
__ HMFoundation: _HMFProductInfoMonarchOSVersion
__ HMFoundation: _HMFProductInfoParisOSVersion
__ HMFoundation: _HMFProductInfoPeaceCOSVersion
__ HMFoundation: _HMFProductInfoPeaceGOSVersion
__ HMFoundation: _HMFProductInfoPeaceOSVersion
__ HMFoundation: _HMFProductInfoRomeOSVersion
__ HMFoundation: _HMFProductInfoSatelliteBOSVersion
__ HMFoundation: _HMFProductInfoSatelliteCOSVersion
__ HMFoundation: _HMFProductInfoSatelliteEOSVersion
__ HMFoundation: _HMFProductInfoSatelliteFOSVersion
__ HMFoundation: _HMFProductInfoSatelliteOSVersion
__ HMFoundation: _HMFProductInfoSkyBOSVersion
__ HMFoundation: _HMFProductInfoSkyCOSVersion
__ HMFoundation: _HMFProductInfoSkyEchoOSVersion
__ HMFoundation: _HMFProductInfoSkyFOSVersion
__ HMFoundation: _HMFProductInfoSkyOSVersion
__ HMFoundation: _HMFProductInfoStarBravoOSVersion
__ HMFoundation: _HMFProductInfoStarCOSVersion
__ HMFoundation: _HMFProductInfoStarEOSVersion
__ HMFoundation: _HMFProductInfoStarFOSVersion
__ HMFoundation: _HMFProductInfoStarOSVersion
__ HMFoundation: _HMFProductInfoSydneyOSVersion
__ HMFoundation: _HMFProductInfoTigrisOSVersion
__ HMFoundation: _HMFProductInfoTildenOSVersion
__ HMFoundation: _HMFProductInfoTopazOSVersion
__ HMFoundation: _HMFProductInfoUnionOSVersion
__ HMFoundation: _HMFProductInfoWhitetailOSVersion
__ HMFoundation: _HMFProductInfoYagerBOSVersion
__ HMFoundation: _HMFProductInfoYagerFOSVersion
__ HMFoundation: _HMFProductInfoYagerOSVersion
__ HMFoundation: _HMFProductInfoYukonBOSVersion
__ HMFoundation: _HMFProductInfoYukonFOSVersion
__ HMFoundation: _HMFProductInfoYukonOSVersion
__ HMFoundation: _HMFProductInfoYukonPreOSVersion
__ HMFoundation: _HMFProductPlatformFromString
__ HMFoundation: _HMFProductPlatformToString
__ HMFoundation: _HMFQOSClassFromQualityOfService
__ HMFoundation: _HMFQualityOfServiceCompare
__ HMFoundation: _HMFQualityOfServiceToString
__ HMFoundation: _HMFSystemInfoMigratingUpdatedNotification
__ HMFoundation: _HMFSystemInfoNameNotificationKey
__ HMFoundation: _HMFSystemInfoNameUpdatedNotification
__ HMFoundation: _HMFTimeIntervalDescription
__ HMFoundation: _HMFWiFiManagerCurrentNetworkDidChangeNotification
__ HMFoundation: _OBJC_CLASS_$_HMFActivity
__ HMFoundation: _OBJC_CLASS_$_HMFAssertion
__ HMFoundation: _OBJC_CLASS_$_HMFAttributeDescription
__ HMFoundation: _OBJC_CLASS_$_HMFBlockOperation
__ HMFoundation: _OBJC_CLASS_$_HMFBoolean
__ HMFoundation: _OBJC_CLASS_$_HMFCache
__ HMFoundation: _OBJC_CLASS_$_HMFDigest
__ HMFoundation: _OBJC_CLASS_$_HMFDispatchContext
__ HMFoundation: _OBJC_CLASS_$_HMFDumpCategory
__ HMFoundation: _OBJC_CLASS_$_HMFExponentialBackoffTimer
__ HMFoundation: _OBJC_CLASS_$_HMFFuture
__ HMFoundation: _OBJC_CLASS_$_HMFHTTPClient
__ HMFoundation: _OBJC_CLASS_$_HMFHTTPClientConfiguration
__ HMFoundation: _OBJC_CLASS_$_HMFHTTPRequestHandler
__ HMFoundation: _OBJC_CLASS_$_HMFHTTPServer
__ HMFoundation: _OBJC_CLASS_$_HMFKey
__ HMFoundation: _OBJC_CLASS_$_HMFLocationAuthorization
__ HMFoundation: _OBJC_CLASS_$_HMFLogEventSession
__ HMFoundation: _OBJC_CLASS_$_HMFLogEventSessionVoucher
__ HMFoundation: _OBJC_CLASS_$_HMFMACAddress
__ HMFoundation: _OBJC_CLASS_$_HMFMemoryMonitor
__ HMFoundation: _OBJC_CLASS_$_HMFMessage
__ HMFoundation: _OBJC_CLASS_$_HMFMessageDestination
__ HMFoundation: _OBJC_CLASS_$_HMFMessageDispatcher
__ HMFoundation: _OBJC_CLASS_$_HMFMessageFilter
__ HMFoundation: _OBJC_CLASS_$_HMFMessagePolicy
__ HMFoundation: _OBJC_CLASS_$_HMFMessageTransport
__ HMFoundation: _OBJC_CLASS_$_HMFMutableHTTPRequest
__ HMFoundation: _OBJC_CLASS_$_HMFMutableMessage
__ HMFoundation: _OBJC_CLASS_$_HMFNetAddress
__ HMFoundation: _OBJC_CLASS_$_HMFNetManager
__ HMFoundation: _OBJC_CLASS_$_HMFNetMonitor
__ HMFoundation: _OBJC_CLASS_$_HMFNetService
__ HMFoundation: _OBJC_CLASS_$_HMFNetServiceBrowser
__ HMFoundation: _OBJC_CLASS_$_HMFOSTransaction
__ HMFoundation: _OBJC_CLASS_$_HMFObject
__ HMFoundation: _OBJC_CLASS_$_HMFObjectCacheNSString
__ HMFoundation: _OBJC_CLASS_$_HMFObjectCacheNSUUID
__ HMFoundation: _OBJC_CLASS_$_HMFObjectObserver
__ HMFoundation: _OBJC_CLASS_$_HMFOperation
__ HMFoundation: _OBJC_CLASS_$_HMFOperationBudget
__ HMFoundation: _OBJC_CLASS_$_HMFPairingIdentity
__ HMFoundation: _OBJC_CLASS_$_HMFPairingKey
__ HMFoundation: _OBJC_CLASS_$_HMFPowerLogger
__ HMFoundation: _OBJC_CLASS_$_HMFPowerManager
__ HMFoundation: _OBJC_CLASS_$_HMFPreference
__ HMFoundation: _OBJC_CLASS_$_HMFPreferences
__ HMFoundation: _OBJC_CLASS_$_HMFPrivateObjectFormatter
__ HMFoundation: _OBJC_CLASS_$_HMFProcessInfo
__ HMFoundation: _OBJC_CLASS_$_HMFProductInfo
__ HMFoundation: _OBJC_CLASS_$_HMFScheduler
__ HMFoundation: _OBJC_CLASS_$_HMFSoftwareVersion
__ HMFoundation: _OBJC_CLASS_$_HMFStagedValue
__ HMFoundation: _OBJC_CLASS_$_HMFStringIndentation
__ HMFoundation: _OBJC_CLASS_$_HMFSystemInfo
__ HMFoundation: _OBJC_CLASS_$_HMFSystemPreference
__ HMFoundation: _OBJC_CLASS_$_HMFTimer
__ HMFoundation: _OBJC_CLASS_$_HMFVersion
__ HMFoundation: _OBJC_CLASS_$_HMFWiFiManager
__ HMFoundation: _OBJC_CLASS_$_HMFWiFiNetworkInfo
__ HMFoundation: _OBJC_METACLASS_$_HMFAssertion
__ HMFoundation: _OBJC_METACLASS_$_HMFMessage
__ HMFoundation: _OBJC_METACLASS_$_HMFMessageDestination
__ HMFoundation: _OBJC_METACLASS_$_HMFMessageDispatcher
__ HMFoundation: _OBJC_METACLASS_$_HMFMessageFilter
__ HMFoundation: _OBJC_METACLASS_$_HMFMessagePolicy
__ HMFoundation: _OBJC_METACLASS_$_HMFMessageTransport
__ HMFoundation: _OBJC_METACLASS_$_HMFObject
__ HMFoundation: _OBJC_METACLASS_$_HMFOperation
__ HMFoundation: _OBJC_METACLASS_$_HMFPreference
__ HMFoundation: _OBJC_METACLASS_$_HMFProcessInfo
__ HMFoundation: _OBJC_METACLASS_$_HMFSoftwareVersion
__ HMFoundation: _OBJC_METACLASS_$_HMFTimer
__ HMFoundation: _OBJC_METACLASS_$_HMFVersion
__ HMFoundation: __HMFPreconditionFailure
__ HMFoundation: ___HMFActivityScopeLeave
__ HMFoundation: _isEqualToObject
__ HMFoundation: _kDumpStateAccessoryCategoryKey
__ HMFoundation: _kDumpStateAccessoryKey
__ HMFoundation: _kDumpStateAccessoryProfileKey
__ HMFoundation: _kDumpStateAccessorySetupHashKey
__ HMFoundation: _kDumpStateAccessoryTransportKey
__ HMFoundation: _kDumpStateActionSetKey
__ HMFoundation: _kDumpStateApplicationDataKey
__ HMFoundation: _kDumpStateBridgeAccessoryKey
__ HMFoundation: _kDumpStateBridgedAccessoryKey
__ HMFoundation: _kDumpStateBulletinNotificationGroupCamerasKey
__ HMFoundation: _kDumpStateBulletinNotificationGroupKey
__ HMFoundation: _kDumpStateBulletinNotificationGroupServicesKey
__ HMFoundation: _kDumpStateBulletinNotificationKey
__ HMFoundation: _kDumpStateCharacteristicKey
__ HMFoundation: _kDumpStateCurrentUser
__ HMFoundation: _kDumpStateEventKey
__ HMFoundation: _kDumpStateExecuteOnceKey
__ HMFoundation: _kDumpStateExecuteSessionKey
__ HMFoundation: _kDumpStateHomeDaemonVersionKey
__ HMFoundation: _kDumpStateHomeKey
__ HMFoundation: _kDumpStateHomeManagerKey
__ HMFoundation: _kDumpStateHomeNotificationRegistrationsKey
__ HMFoundation: _kDumpStateIdentityKey
__ HMFoundation: _kDumpStateIncomingInvitesKey
__ HMFoundation: _kDumpStateInvitesKey
__ HMFoundation: _kDumpStateKeychainKey
__ HMFoundation: _kDumpStateLocationKey
__ HMFoundation: _kDumpStateMetadataKey
__ HMFoundation: _kDumpStateNetServiceKey
__ HMFoundation: _kDumpStateOutgoingInvitesKey
__ HMFoundation: _kDumpStatePendingResponses
__ HMFoundation: _kDumpStatePredicateKey
__ HMFoundation: _kDumpStateRecurrenceKey
__ HMFoundation: _kDumpStateRemovedUserKey
__ HMFoundation: _kDumpStateResidentKey
__ HMFoundation: _kDumpStateRoomKey
__ HMFoundation: _kDumpStateServiceGroupKey
__ HMFoundation: _kDumpStateServiceKey
__ HMFoundation: _kDumpStateSharedHomeSourceVersion
__ HMFoundation: _kDumpStateSharedHomeUpdateHandler
__ HMFoundation: _kDumpStateSharedHomeUpdateSession
__ HMFoundation: _kDumpStateStateKey
__ HMFoundation: _kDumpStateSyncManagerKey
__ HMFoundation: _kDumpStateTimerTriggerKey
__ HMFoundation: _kDumpStateTriggerKey
__ HMFoundation: _kDumpStateUserKey
__ HMFoundation: _kDumpStateZoneKey
__ HMFoundation: _randomDataWithLength
__ HMFoundation: _randomUInt32
__ HomeAI: _OBJC_CLASS_$_HMIAnalysisStateManager
__ HomeAI: _OBJC_CLASS_$_HMIAnalysisStateUpdate
__ HomeAI: _OBJC_CLASS_$_HMICamera
__ HomeAI: _OBJC_CLASS_$_HMICameraActivityZone
__ HomeAI: _OBJC_CLASS_$_HMIExternalPersonManager
__ HomeAI: _OBJC_CLASS_$_HMIFaceCrop
__ HomeAI: _OBJC_CLASS_$_HMIFaceprint
__ HomeAI: _OBJC_CLASS_$_HMIFeedback
__ HomeAI: _OBJC_CLASS_$_HMIHomePersonManager
__ HomeAI: _OBJC_CLASS_$_HMIMutableExternalPersonManagerSettings
__ HomeAI: _OBJC_CLASS_$_HMIMutableHomePersonManagerSettings
__ HomeAI: _OBJC_CLASS_$_HMIPerson
__ HomeAI: _OBJC_CLASS_$_HMIPersonFaceCrop
__ HomeAI: _OBJC_CLASS_$_HMIPoint
__ HomeAI: _OBJC_CLASS_$_HMISystemResourceUsageMonitor
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzer
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerConfiguration
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerDynamicConfiguration
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventFace
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventMotion
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventPackage
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventPerson
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventPet
__ HomeAI: _OBJC_CLASS_$_HMIVideoAnalyzerEventVehicle
__ HomeAI: _OBJC_CLASS_$_HMIVideoFragment
__ HomeAI: _systemResourceUsageLevelAsString
__ HomeKit: _HMAccessCodeManagerDidAddAccessoryAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerDidAddHomeAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerDidRemoveAccessoryAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerDidRemoveHomeAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerDidUpdateAccessoryAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerDidUpdateHomeAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerFetchAccessCodeConstraintsMessage
__ HomeKit: _HMAccessCodeManagerFetchAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerFetchCachedAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerFetchHomeAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerGenerateNewUserAccessCodeMessage
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessCodeModificationRequests
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessCodeModificationResponseValues
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessCodeString
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessCodeValue
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessoryAccessCodeConstraintsFetchResponseValues
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessoryAccessCodeFetchResponseValues
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessoryAccessCodeValues
__ HomeKit: _HMAccessCodeManagerMessageKeyAccessoryUUIDs
__ HomeKit: _HMAccessCodeManagerMessageKeyHomeAccessCodeValue
__ HomeKit: _HMAccessCodeManagerMessageKeyHomeAccessCodeValues
__ HomeKit: _HMAccessCodeManagerMessageKeyUserInformationValue
__ HomeKit: _HMAccessCodeManagerMessageKeyUserUUIDString
__ HomeKit: _HMAccessCodeManagerRemoveHomeAccessCodeMessage
__ HomeKit: _HMAccessCodeManagerRemoveSimpleLabelAccessCodeMessage
__ HomeKit: _HMAccessCodeManagerResetAccessoryAccessCodesMessage
__ HomeKit: _HMAccessCodeManagerSetAccessCodeForUserMessage
__ HomeKit: _HMAccessCodeManagerSetUserInformationMessage
__ HomeKit: _HMAccessCodeManagerSubmitAccessCodeModificationRequestsMessage
__ HomeKit: _HMAccessCodeManagerSubscribeMessage
__ HomeKit: _HMAccessCodeManagerUnsubscribeMessage
__ HomeKit: _HMAccessControlUserCodingKey
__ HomeKit: _HMAccessoryActivateCHIPPairingModeAndCreateSetupPayloadStringMessage
__ HomeKit: _HMAccessoryActivateCHIPPairingModeMessage
__ HomeKit: _HMAccessoryAddControlTargetsMessageKey
__ HomeKit: _HMAccessoryAllowedHostAddressesCodingKey
__ HomeKit: _HMAccessoryAllowedHostNameCodingKey
__ HomeKit: _HMAccessoryAllowedHostPurposeCodingKey
__ HomeKit: _HMAccessoryAllowedHostUnrestrictedCodingKey
__ HomeKit: _HMAccessoryAllowedHostsCodingKey
__ HomeKit: _HMAccessoryAssociationOptionsCodingKey
__ HomeKit: _HMAccessoryAudioDestinationCodingKey
__ HomeKit: _HMAccessoryAudioDestinationControllerCodingKey
__ HomeKit: _HMAccessoryAudioDestinationControllerDataCodingKey
__ HomeKit: _HMAccessoryAuditPairingsMessageKey
__ HomeKit: _HMAccessoryAuthMethodMessageKey
__ HomeKit: _HMAccessoryCHIPPairingsMessageKey
__ HomeKit: _HMAccessoryCHIPSetupPayloadStringMessageKey
__ HomeKit: _HMAccessoryCategoryTypeAirConditioner
__ HomeKit: _HMAccessoryCategoryTypeAirDehumidifier
__ HomeKit: _HMAccessoryCategoryTypeAirHeater
__ HomeKit: _HMAccessoryCategoryTypeAirHumidifier
__ HomeKit: _HMAccessoryCategoryTypeAirPort
__ HomeKit: _HMAccessoryCategoryTypeAirPurifier
__ HomeKit: _HMAccessoryCategoryTypeAppleTV
__ HomeKit: _HMAccessoryCategoryTypeDoor
__ HomeKit: _HMAccessoryCategoryTypeDoorLock
__ HomeKit: _HMAccessoryCategoryTypeFan
__ HomeKit: _HMAccessoryCategoryTypeFaucet
__ HomeKit: _HMAccessoryCategoryTypeGarageDoorOpener
__ HomeKit: _HMAccessoryCategoryTypeHomePod
__ HomeKit: _HMAccessoryCategoryTypeIPCamera
__ HomeKit: _HMAccessoryCategoryTypeLightbulb
__ HomeKit: _HMAccessoryCategoryTypeOutlet
__ HomeKit: _HMAccessoryCategoryTypeProgrammableSwitch
__ HomeKit: _HMAccessoryCategoryTypeSecuritySystem
__ HomeKit: _HMAccessoryCategoryTypeSensor
__ HomeKit: _HMAccessoryCategoryTypeShowerHead
__ HomeKit: _HMAccessoryCategoryTypeSpeaker
__ HomeKit: _HMAccessoryCategoryTypeSprinkler
__ HomeKit: _HMAccessoryCategoryTypeSwitch
__ HomeKit: _HMAccessoryCategoryTypeTelevision
__ HomeKit: _HMAccessoryCategoryTypeTelevisionDeprecated
__ HomeKit: _HMAccessoryCategoryTypeTelevisionSetTopBox
__ HomeKit: _HMAccessoryCategoryTypeTelevisionStreamingStick
__ HomeKit: _HMAccessoryCategoryTypeThermostat
__ HomeKit: _HMAccessoryCategoryTypeVideoDoorbell
__ HomeKit: _HMAccessoryCategoryTypeWiFiRouter
__ HomeKit: _HMAccessoryCategoryTypeWindow
__ HomeKit: _HMAccessoryCategoryTypeWindowCovering
__ HomeKit: _HMAccessoryCertificationStatusCodingKey
__ HomeKit: _HMAccessoryCertificationStatusToString
__ HomeKit: _HMAccessoryConfigureControlTargetsMessage
__ HomeKit: _HMAccessoryConfiguredProtectionGroupUUIDCodingKey
__ HomeKit: _HMAccessoryConnectivityChangedNotification
__ HomeKit: _HMAccessoryConnectivityInfoCodingKey
__ HomeKit: _HMAccessoryControlTargetsCodingKey
__ HomeKit: _HMAccessoryControllableCodingKey
__ HomeKit: _HMAccessoryControllableMessageKey
__ HomeKit: _HMAccessoryControllableUpdatedMessage
__ HomeKit: _HMAccessoryCurrentAccessoryCodingKey
__ HomeKit: _HMAccessoryCurrentNetworkProtectionModeCodingKey
__ HomeKit: _HMAccessoryDeleteSiriHistoryRequestMessage
__ HomeKit: _HMAccessoryDeviceCodingKey
__ HomeKit: _HMAccessoryDeviceIRKCodingKey
__ HomeKit: _HMAccessoryDiagnosticsMetadataCodingKey
__ HomeKit: _HMAccessoryDiagnosticsTransferRequestMessage
__ HomeKit: _HMAccessoryDiagnosticsTransferSupportCodingKey
__ HomeKit: _HMAccessoryDiagnosticsTransferSupportMessageKey
__ HomeKit: _HMAccessoryDiagnosticsTransferUpdatedMessage
__ HomeKit: _HMAccessoryEventTopicSuffixIDAccessoryCapabilities
__ HomeKit: _HMAccessoryEventTopicSuffixIDAccountInfo
__ HomeKit: _HMAccessoryEventTopicSuffixIDDeviceIRK
__ HomeKit: _HMAccessoryEventTopicSuffixIDParticipantData
__ HomeKit: _HMAccessoryEventTopicSuffixIDPrimaryUser
__ HomeKit: _HMAccessoryEventTopicSuffixIDPublicPairingIdentity
__ HomeKit: _HMAccessoryEventTopicSuffixIDResidentCapabilities
__ HomeKit: _HMAccessoryEventTopicSuffixIDSoftwareVersion
__ HomeKit: _HMAccessoryEventTopicSuffixIDWifiInfo
__ HomeKit: _HMAccessoryFetchCHIPPairingsMessage
__ HomeKit: _HMAccessoryFetchManagedConfigurationProfilesMessage
__ HomeKit: _HMAccessoryHasOnboardedForNaturalLightingKey
__ HomeKit: _HMAccessoryHomeLevelLocationServiceSettingCodingKey
__ HomeKit: _HMAccessoryListControlTargetsMessageKey
__ HomeKit: _HMAccessoryManagedConfigurationIdentifierMessageKey
__ HomeKit: _HMAccessoryManagedConfigurationProfilesCodingKey
__ HomeKit: _HMAccessoryMultiUserSupportCodingKey
__ HomeKit: _HMAccessoryNetworkAccessViolationCodingKey
__ HomeKit: _HMAccessoryNetworkAccessViolationLastOccurrenceDateCodingKey
__ HomeKit: _HMAccessoryNetworkAccessViolationLastResetDateCodingKey
__ HomeKit: _HMAccessoryNetworkConfigurationRestrictedCodingKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupAddedNotification
__ HomeKit: _HMAccessoryNetworkProtectionGroupCategoryCodingKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupManufacturerCodingKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupMessageKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupProtectionModeCodingKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupProtectionModeMessageKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupProtectionModeUpdateRequest
__ HomeKit: _HMAccessoryNetworkProtectionGroupRemovedNotification
__ HomeKit: _HMAccessoryNetworkProtectionGroupUUIDCodingKey
__ HomeKit: _HMAccessoryNetworkProtectionGroupUUIDMessageKey
__ HomeKit: _HMAccessoryNetworkProtectionModeAsString
__ HomeKit: _HMAccessoryNetworkProtectionSupportCodingKey
__ HomeKit: _HMAccessoryPairingIdentityCodingKey
__ HomeKit: _HMAccessoryPairingIdentityIncludePrivateKeyMessageKey
__ HomeKit: _HMAccessoryPairingIdentityRequestMessage
__ HomeKit: _HMAccessoryPairingIdentityUpdatedNotification
__ HomeKit: _HMAccessoryPendingConfigurationIdentifierKey
__ HomeKit: _HMAccessoryPreferredMediaUserCodingKey
__ HomeKit: _HMAccessoryPreferredMediaUserSelectionTypeMessageKey
__ HomeKit: _HMAccessoryPreferredUserSelectionTypeCodingKey
__ HomeKit: _HMAccessoryProtectionGroupUUIDCodingKey
__ HomeKit: _HMAccessoryReachableTransportsMessageKey
__ HomeKit: _HMAccessoryRemoteLoginCodingKey
__ HomeKit: _HMAccessoryRemoveCHIPPairingsMessage
__ HomeKit: _HMAccessoryRemoveControlTargetsMessageKey
__ HomeKit: _HMAccessoryRemoveManagedConfigurationProfileMessage
__ HomeKit: _HMAccessoryResetControlTargetsMessageKey
__ HomeKit: _HMAccessoryRootSettingsCodingKey
__ HomeKit: _HMAccessorySetHasOnboardedForNaturalLightingMessage
__ HomeKit: _HMAccessorySettingAddConstraintMessage
__ HomeKit: _HMAccessorySettingConstraintAddMessageKey
__ HomeKit: _HMAccessorySettingConstraintMessageKey
__ HomeKit: _HMAccessorySettingConstraintRemoveMessageKey
__ HomeKit: _HMAccessorySettingConstraintTypeFromString
__ HomeKit: _HMAccessorySettingConstraintsCodingKey
__ HomeKit: _HMAccessorySettingGroupGroupsCodingKey
__ HomeKit: _HMAccessorySettingGroupIdentifierCodingKey
__ HomeKit: _HMAccessorySettingGroupNameCodingKey
__ HomeKit: _HMAccessorySettingGroupSettingsCodingKey
__ HomeKit: _HMAccessorySettingIdentifierCodingKey
__ HomeKit: _HMAccessorySettingNameCodingKey
__ HomeKit: _HMAccessorySettingPropertiesCodingKey
__ HomeKit: _HMAccessorySettingPropertiesFromString
__ HomeKit: _HMAccessorySettingPropertiesToString
__ HomeKit: _HMAccessorySettingReflectedCodingKey
__ HomeKit: _HMAccessorySettingRemoveConstraintMessage
__ HomeKit: _HMAccessorySettingReplaceConstraintsMessage
__ HomeKit: _HMAccessorySettingTypeCodingKey
__ HomeKit: _HMAccessorySettingTypeFromString
__ HomeKit: _HMAccessorySettingTypeToString
__ HomeKit: _HMAccessorySettingUpdateConstraintsMessage
__ HomeKit: _HMAccessorySettingUpdateValueMessage
__ HomeKit: _HMAccessorySettingValueCodingKey
__ HomeKit: _HMAccessorySettingValueMessageKey
__ HomeKit: _HMAccessorySettingsFetchRequestMessage
__ HomeKit: _HMAccessorySettingsRootGroupKeyPath
__ HomeKit: _HMAccessorySettingsUpdateRequestMessage
__ HomeKit: _HMAccessorySetupCoordinatorCancelStagedCHIPAccessoryPairingMessage
__ HomeKit: _HMAccessorySetupCoordinatorCreateCHIPSetupAccessoryPayloadMessage
__ HomeKit: _HMAccessorySetupCoordinatorCreateCHIPSetupPayloadStringMessage
__ HomeKit: _HMAccessorySetupCoordinatorMessageKeyCHIPAccessoryPairingIdentifier
__ HomeKit: _HMAccessorySetupCoordinatorMessageKeyCHIPSetupPayloadDecimalStringRepresentation
__ HomeKit: _HMAccessorySetupCoordinatorMessageKeySetupAccessoryPayload
__ HomeKit: _HMAccessorySetupCoordinatorMessageKeySetupPayloadString
__ HomeKit: _HMAccessorySetupCoordinatorMessageKeySetupPayloadURL
__ HomeKit: _HMAccessorySetupCoordinatorStageCHIPAccessoryPairingMessage
__ HomeKit: _HMAccessorySetupManagerFailAccessorySetupMessage
__ HomeKit: _HMAccessorySetupManagerFetchPendingSetupAccessoryDescriptionMessage
__ HomeKit: _HMAccessorySetupManagerFinishAccessorySetupMessage
__ HomeKit: _HMAccessorySetupManagerMessageKeyAccessorySetupCompletedInfo
__ HomeKit: _HMAccessorySetupManagerMessageKeyError
__ HomeKit: _HMAccessorySetupManagerMessageKeyMatterTopology
__ HomeKit: _HMAccessorySetupManagerMessageKeyRequest
__ HomeKit: _HMAccessorySetupManagerMessageKeyResult
__ HomeKit: _HMAccessorySetupManagerMessageKeySetupAccessoryDescription
__ HomeKit: _HMAccessorySetupManagerMessageKeyUserInfo
__ HomeKit: _HMAccessorySetupManagerPerformAccessorySetupMessage
__ HomeKit: _HMAccessorySetupManagerPerformMatterEcosystemAccessorySetupMessage
__ HomeKit: _HMAccessorySetupManagerResumeAccessorySetupMessage
__ HomeKit: _HMAccessorySoftwareUpdateCodingKey
__ HomeKit: _HMAccessorySoftwareUpdateControllerV2ScanMessage
__ HomeKit: _HMAccessorySoftwareVersionCodingKey
__ HomeKit: _HMAccessorySupportedDiagnosticsCodingKey
__ HomeKit: _HMAccessorySupportsAccessCodeCodingKey
__ HomeKit: _HMAccessorySupportsAnnounceCodingKey
__ HomeKit: _HMAccessorySupportsCHIPCodingKey
__ HomeKit: _HMAccessorySupportsCompanionInitiatedRestartCodingKey
__ HomeKit: _HMAccessorySupportsCoordinationDoorbellChimeCodingKey
__ HomeKit: _HMAccessorySupportsDoorbellChimeCodingKey
__ HomeKit: _HMAccessorySupportsIdentifyCodingKey
__ HomeKit: _HMAccessorySupportsManagedConfigurationProfileCodingKey
__ HomeKit: _HMAccessorySupportsMediaAccessControlCodingKey
__ HomeKit: _HMAccessorySupportsMediaActionsCodingKey
__ HomeKit: _HMAccessorySupportsMessagedHomePodSettingsCodingKey
__ HomeKit: _HMAccessorySupportsMusicAlarmCodingKey
__ HomeKit: _HMAccessorySupportsPreferredMediaUserCodingKey
__ HomeKit: _HMAccessorySupportsSoftwareUpdateV2CodingKey
__ HomeKit: _HMAccessorySupportsThirdPartyMusicCodingKey
__ HomeKit: _HMAccessorySupportsUserMediaSettingsCodingKey
__ HomeKit: _HMAccessorySupportsWalletCodingKey
__ HomeKit: _HMAccessorySuspendStateCodingKey
__ HomeKit: _HMAccessorySymptomsHandlerUpdatedMessage
__ HomeKit: _HMAccessoryTargetControlSupportCodingKey
__ HomeKit: _HMAccessoryTargetControlSupportMessageKey
__ HomeKit: _HMAccessoryTargetControlUpdatedMessage
__ HomeKit: _HMAccessoryTargetControllerHardwareSupportCodingKey
__ HomeKit: _HMAccessoryTargetControllerHardwareSupportMessageKey
__ HomeKit: _HMAccessoryTargetControllerSupportCodingKey
__ HomeKit: _HMAccessoryTargetControllerSupportMessageKey
__ HomeKit: _HMAccessoryTargetNetworkProtectionModeCodingKey
__ HomeKit: _HMAccessoryTransportTypesToString
__ HomeKit: _HMAccessoryTriggerPairingIdentityUpdatedNotificationRequest
__ HomeKit: _HMAccessoryUUIDPayloadKey
__ HomeKit: _HMAccessoryUpdateCharacteristicAuthorizationDataMessage
__ HomeKit: _HMAccessoryUpdatePendingConfigurationIdentifierMessage
__ HomeKit: _HMAccessoryUpdatePreferredMediaUserRequestMessage
__ HomeKit: _HMAccessoryUpdateShouldProcessTransactionRemovalValuePayloadKey
__ HomeKit: _HMAccessoryUpdateShouldProcessTransactionRemovalValueRequestMessage
__ HomeKit: _HMAccessoryValidateAuthMethodRequestMessage
__ HomeKit: _HMAccessoryWakeSuspendedAccessoryMessage
__ HomeKit: _HMAccessoryWakeSuspendedAccessoryWakeTypeKey
__ HomeKit: _HMAccessoryWiFiCredentialTypeAsString
__ HomeKit: _HMAccessoryWiFiCredentialTypeCodingKey
__ HomeKit: _HMAccessoryWiFiNetworkInfoCodingKey
__ HomeKit: _HMAccessoryWiFiReconfigurationSupportCodingKey
__ HomeKit: _HMActionSetNameKeyHomeArrival
__ HomeKit: _HMActionSetNameKeyHomeDeparture
__ HomeKit: _HMActionSetNameKeySleep
__ HomeKit: _HMActionSetNameKeyWakeUp
__ HomeKit: _HMActionSetSerializedDataKey
__ HomeKit: _HMActionSetSerializedDictionaryProtocolKey
__ HomeKit: _HMActionSetSerializedDictionaryProtocolProtoBuf
__ HomeKit: _HMActionSetSerializedDictionaryVersionKey
__ HomeKit: _HMActionSetSerializedDictionaryVersion_1_0
__ HomeKit: _HMActionSetTypeHomeArrival
__ HomeKit: _HMActionSetTypeHomeDeparture
__ HomeKit: _HMActionSetTypeShortcutsComponent
__ HomeKit: _HMActionSetTypeSleep
__ HomeKit: _HMActionSetTypeTriggerOwned
__ HomeKit: _HMActionSetTypeUserDefined
__ HomeKit: _HMActionSetTypeWakeUp
__ HomeKit: _HMActionTypeAsString
__ HomeKit: _HMActiveAssertionAdaptiveMessageKey
__ HomeKit: _HMActiveAssertionMessage
__ HomeKit: _HMActiveAssertionStateMessageKey
__ HomeKit: _HMActivityIdentifierKey
__ HomeKit: _HMActivityMetricIdentifierKey
__ HomeKit: _HMActivityNameKey
__ HomeKit: _HMAddAccessoryRequestAccessoryDescriptionCodingKey
__ HomeKit: _HMAddAccessoryRequestAccessoryNameCodingKey
__ HomeKit: _HMAddAccessoryRequestCategoryCodingKey
__ HomeKit: _HMAddAccessoryRequestIdentifierCodingKey
__ HomeKit: _HMAppleTVAccessoriesConfiguredStatusKey
__ HomeKit: _HMArabicNumeralByChineseNumeralDictionary
__ HomeKit: _HMAreSnapshotsAllowedForCameraAccessMode
__ HomeKit: _HMAssistantAccessControlAccessoriesCodingKey
__ HomeKit: _HMAssistantAccessControlActivityNotificationsEnabledForPersonalRequestsCodingKey
__ HomeKit: _HMAssistantAccessControlEnabledCodingKey
__ HomeKit: _HMAssistantAccessControlOptionsCodingKey
__ HomeKit: _HMAssistantAccessControlOptionsToString
__ HomeKit: _HMAssistantObjectTagAccessory
__ HomeKit: _HMAssistantObjectTagActionSet
__ HomeKit: _HMAssistantObjectTagDestinationController
__ HomeKit: _HMAssistantObjectTagHome
__ HomeKit: _HMAssistantObjectTagMediaGroup
__ HomeKit: _HMAssistantObjectTagRoom
__ HomeKit: _HMAssistantObjectTagService
__ HomeKit: _HMAssistantObjectTagServiceGroup
__ HomeKit: _HMAssistantObjectTagTrigger
__ HomeKit: _HMAssistantObjectTagZone
__ HomeKit: _HMAssistantSyncDataCacheFileName
__ HomeKit: _HMAssistantSyncDataCacheUpdatedNotification
__ HomeKit: _HMBulletinCameraClipIDKey
__ HomeKit: _HMBulletinCameraNotificationIDKey
__ HomeKit: _HMBulletinCameraProfileIDKey
__ HomeKit: _HMBulletinCameraSignificantEventUUIDsKey
__ HomeKit: _HMBulletinContextAccessoryIDKey
__ HomeKit: _HMBulletinContextCharacteristicIDKey
__ HomeKit: _HMBulletinContextHomeIDKey
__ HomeKit: _HMBulletinContextHomeNameKey
__ HomeKit: _HMBulletinContextRoomServiceNameKey
__ HomeKit: _HMBulletinContextServiceIDKey
__ HomeKit: _HMBulletinContextTriggerIDKey
__ HomeKit: _HMBulletinContextTriggerNameKey
__ HomeKit: _HMBulletinReasonDoorbellPressed
__ HomeKit: _HMBulletinReasonKey
__ HomeKit: _HMBulletinReasonMotionDetected
__ HomeKit: _HMBulletinReasonSignificantEvent
__ HomeKit: _HMCameraAccessModeAsString
__ HomeKit: _HMCameraAudioStreamSettingAsString
__ HomeKit: _HMCameraClipExpirationTimeInterval
__ HomeKit: _HMCameraClipManagerDeleteAllClipsMessage
__ HomeKit: _HMCameraClipManagerDeleteClipMessage
__ HomeKit: _HMCameraClipManagerDidChangeClipsMessage
__ HomeKit: _HMCameraClipManagerDidChangeSignificantEventsMessage
__ HomeKit: _HMCameraClipManagerFetchClipForSignificantEventMessage
__ HomeKit: _HMCameraClipManagerFetchClipMessage
__ HomeKit: _HMCameraClipManagerFetchClipsMessage
__ HomeKit: _HMCameraClipManagerFetchCountOfClipsMessage
__ HomeKit: _HMCameraClipManagerFetchFaceCropDataRepresentationMessage
__ HomeKit: _HMCameraClipManagerFetchFaceCropURLMessage
__ HomeKit: _HMCameraClipManagerFetchHeroFrameDataRepresentationMessage
__ HomeKit: _HMCameraClipManagerFetchHeroFrameURLMessage
__ HomeKit: _HMCameraClipManagerFetchSignificantEventsMessage
__ HomeKit: _HMCameraClipManagerFetchVideoSegmentsAssetContextMessage
__ HomeKit: _HMCameraClipManagerHandleFaceMisclassificationMessage
__ HomeKit: _HMCameraClipManagerImportClipsMessage
__ HomeKit: _HMCameraClipManagerMessageKeyAssetContext
__ HomeKit: _HMCameraClipManagerMessageKeyClip
__ HomeKit: _HMCameraClipManagerMessageKeyClipImportData
__ HomeKit: _HMCameraClipManagerMessageKeyClipUUID
__ HomeKit: _HMCameraClipManagerMessageKeyClipUUIDs
__ HomeKit: _HMCameraClipManagerMessageKeyCountOfClips
__ HomeKit: _HMCameraClipManagerMessageKeyDataRepresentation
__ HomeKit: _HMCameraClipManagerMessageKeyDateAfter
__ HomeKit: _HMCameraClipManagerMessageKeyDateBefore
__ HomeKit: _HMCameraClipManagerMessageKeyFetchedURL
__ HomeKit: _HMCameraClipManagerMessageKeyLimit
__ HomeKit: _HMCameraClipManagerMessageKeyQuality
__ HomeKit: _HMCameraClipManagerMessageKeyRemovedClipUUIDs
__ HomeKit: _HMCameraClipManagerMessageKeyRemovedSignificantEventUUIDs
__ HomeKit: _HMCameraClipManagerMessageKeyShouldOrderAscending
__ HomeKit: _HMCameraClipManagerMessageKeySignificantEventUUIDs
__ HomeKit: _HMCameraClipManagerMessageKeySignificantEvents
__ HomeKit: _HMCameraClipManagerMessageKeyUpdatedClips
__ HomeKit: _HMCameraClipManagerMessageKeyUpdatedSignificantEvents
__ HomeKit: _HMCameraClipManagerPerformCloudPullMessage
__ HomeKit: _HMCameraClipManagerSubmitClipsMessage
__ HomeKit: _HMCameraClipManagerSubscribeMessage
__ HomeKit: _HMCameraClipManagerUnsubscribeMessage
__ HomeKit: _HMCameraProfileCodingKeyMostRecentSnapshot
__ HomeKit: _HMCameraProfileCodingKeyUserSettings
__ HomeKit: _HMCameraRecordingEventsExpirationTimeInterval
__ HomeKit: _HMCameraRecordingReachabilityEventManagerDeleteAllEventsMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerDidChangeEventsMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerFetchCountOfEventsMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerFetchEventsMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyCountOfEvents
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyDateAfter
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyDateBefore
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyLimit
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyRemovedEventsUUIDs
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyShouldOrderAscending
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageKeyUpdatedEvents
__ HomeKit: _HMCameraRecordingReachabilityEventManagerMessageResponseKeyFetchedEvents
__ HomeKit: _HMCameraRecordingReachabilityEventManagerPerformCloudPullMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerSubscribeMessage
__ HomeKit: _HMCameraRecordingReachabilityEventManagerUnsubscribeMessage
__ HomeKit: _HMCameraSignificantEventTypesAsString
__ HomeKit: _HMCameraSignificantEventTypesFromReasons
__ HomeKit: _HMCameraSnapshotCreateSnapshotFromBulletinContextMessage
__ HomeKit: _HMCameraSnapshotFillSnapshotSlotMessage
__ HomeKit: _HMCameraSnapshotIsNotificationSnapshot
__ HomeKit: _HMCameraSnapshotReleaseSnapshotMessage
__ HomeKit: _HMCameraSnapshotTakeSnapshotMessage
__ HomeKit: _HMCameraStreamAudioVolumeSettingMessageKey
__ HomeKit: _HMCameraStreamNegotiateStreamMessage
__ HomeKit: _HMCameraStreamSetAudioStreamSettingMessage
__ HomeKit: _HMCameraStreamSetAudioVolumeMessage
__ HomeKit: _HMCameraStreamStopStreamMessage
__ HomeKit: _HMCameraStreamStoppedMessage
__ HomeKit: _HMCameraSupportedFeaturesAsString
__ HomeKit: _HMCameraUserNotificationSettingsVersionLatest
__ HomeKit: _HMCameraUserSettingsAccessModeChangeNotificationEnabledMessageKey
__ HomeKit: _HMCameraUserSettingsAccessModeIndicatorEnabledMessageKey
__ HomeKit: _HMCameraUserSettingsAccessModeMessageKey
__ HomeKit: _HMCameraUserSettingsActivityZonesIncludedForSignificantEventDetectionMessageKey
__ HomeKit: _HMCameraUserSettingsDidUpdateMessage
__ HomeKit: _HMCameraUserSettingsMessageKey
__ HomeKit: _HMCameraUserSettingsNightVisionModeEnabledMessageKey
__ HomeKit: _HMCameraUserSettingsPresenceTypeMessageKey
__ HomeKit: _HMCameraUserSettingsReachabilityEventNotificationEnabledMessageKey
__ HomeKit: _HMCameraUserSettingsRecordingAudioEnabledMessageKey
__ HomeKit: _HMCameraUserSettingsRecordingTriggerMessageKey
__ HomeKit: _HMCameraUserSettingsSnapshotsAllowedMessageKey
__ HomeKit: _HMCameraUserSettingsUpdateAccessModeChangeNotificationEnabledMessage
__ HomeKit: _HMCameraUserSettingsUpdateAccessModeIndicatorEnabledMessage
__ HomeKit: _HMCameraUserSettingsUpdateAccessModeMessage
__ HomeKit: _HMCameraUserSettingsUpdateActivityZonesMessage
__ HomeKit: _HMCameraUserSettingsUpdateActivityZonesMessageKey
__ HomeKit: _HMCameraUserSettingsUpdateNightVisionModeEnabledMessage
__ HomeKit: _HMCameraUserSettingsUpdateReachabilityEventNotificationEnabledMessage
__ HomeKit: _HMCameraUserSettingsUpdateRecordingAudioEnabledMessage
__ HomeKit: _HMCameraUserSettingsUpdateRecordingTriggerEventsMessage
__ HomeKit: _HMCameraUserSettingsUpdateSnapshotsAllowedMessage
__ HomeKit: _HMCharacteristicMetadataFormatBool
__ HomeKit: _HMCharacteristicMetadataFormatFloat
__ HomeKit: _HMCharacteristicMetadataFormatInt
__ HomeKit: _HMCharacteristicMetadataFormatString
__ HomeKit: _HMCharacteristicMetadataFormatUInt16
__ HomeKit: _HMCharacteristicMetadataFormatUInt32
__ HomeKit: _HMCharacteristicMetadataFormatUInt64
__ HomeKit: _HMCharacteristicMetadataFormatUInt8
__ HomeKit: _HMCharacteristicMetadataUnitsCelsius
__ HomeKit: _HMCharacteristicMetadataUnitsFahrenheit
__ HomeKit: _HMCharacteristicTypeActive
__ HomeKit: _HMCharacteristicTypeActiveIdentifier
__ HomeKit: _HMCharacteristicTypeBrightness
__ HomeKit: _HMCharacteristicTypeButtonEvent
__ HomeKit: _HMCharacteristicTypeCameraOperatingModeIndicator
__ HomeKit: _HMCharacteristicTypeColorTemperature
__ HomeKit: _HMCharacteristicTypeConfiguredName
__ HomeKit: _HMCharacteristicTypeContactState
__ HomeKit: _HMCharacteristicTypeCurrentDoorState
__ HomeKit: _HMCharacteristicTypeCurrentHeatingCooling
__ HomeKit: _HMCharacteristicTypeCurrentHorizontalTilt
__ HomeKit: _HMCharacteristicTypeCurrentLightLevel
__ HomeKit: _HMCharacteristicTypeCurrentLockMechanismState
__ HomeKit: _HMCharacteristicTypeCurrentMediaState
__ HomeKit: _HMCharacteristicTypeCurrentPosition
__ HomeKit: _HMCharacteristicTypeCurrentRelativeHumidity
__ HomeKit: _HMCharacteristicTypeCurrentSecuritySystemState
__ HomeKit: _HMCharacteristicTypeCurrentTemperature
__ HomeKit: _HMCharacteristicTypeCurrentVerticalTilt
__ HomeKit: _HMCharacteristicTypeEventSnapshotsActive
__ HomeKit: _HMCharacteristicTypeFirmwareVersion
__ HomeKit: _HMCharacteristicTypeHue
__ HomeKit: _HMCharacteristicTypeIdentifier
__ HomeKit: _HMCharacteristicTypeInputEvent
__ HomeKit: _HMCharacteristicTypeManufacturer
__ HomeKit: _HMCharacteristicTypeModel
__ HomeKit: _HMCharacteristicTypeMotionDetected
__ HomeKit: _HMCharacteristicTypeMute
__ HomeKit: _HMCharacteristicTypeName
__ HomeKit: _HMCharacteristicTypeNightVision
__ HomeKit: _HMCharacteristicTypePowerState
__ HomeKit: _HMCharacteristicTypeRecordingAudioActive
__ HomeKit: _HMCharacteristicTypeRotationDirection
__ HomeKit: _HMCharacteristicTypeRotationSpeed
__ HomeKit: _HMCharacteristicTypeSaturation
__ HomeKit: _HMCharacteristicTypeSelectedAudioStreamConfiguration
__ HomeKit: _HMCharacteristicTypeSerialNumber
__ HomeKit: _HMCharacteristicTypeSleepDiscoveryMode
__ HomeKit: _HMCharacteristicTypeSupportedAudioStreamConfiguration
__ HomeKit: _HMCharacteristicTypeSupportedDiagnosticsSnapshot
__ HomeKit: _HMCharacteristicTypeSupportedTargetConfiguration
__ HomeKit: _HMCharacteristicTypeSwingMode
__ HomeKit: _HMCharacteristicTypeTargetDoorState
__ HomeKit: _HMCharacteristicTypeTargetHeaterCoolerState
__ HomeKit: _HMCharacteristicTypeTargetHeatingCooling
__ HomeKit: _HMCharacteristicTypeTargetHorizontalTilt
__ HomeKit: _HMCharacteristicTypeTargetList
__ HomeKit: _HMCharacteristicTypeTargetLockMechanismState
__ HomeKit: _HMCharacteristicTypeTargetMediaState
__ HomeKit: _HMCharacteristicTypeTargetPosition
__ HomeKit: _HMCharacteristicTypeTargetRelativeHumidity
__ HomeKit: _HMCharacteristicTypeTargetSecuritySystemState
__ HomeKit: _HMCharacteristicTypeTargetTemperature
__ HomeKit: _HMCharacteristicTypeTargetVerticalTilt
__ HomeKit: _HMCharacteristicTypeVersion
__ HomeKit: _HMCharacteristicTypeVolume
__ HomeKit: _HMClientConnectionIDMSAccountUsernameModified
__ HomeKit: _HMDailyRotatedUUID
__ HomeKit: _HMDeviceIDSDestinationStringCodingKey
__ HomeKit: _HMDeviceIDSIdentifierCodingKey
__ HomeKit: _HMDeviceProductInfoCodingKey
__ HomeKit: _HMDeviceRPDeviceIRKCodingKey
__ HomeKit: _HMDeviceSetupFollowupIdentifier
__ HomeKit: _HMDeviceSetupSessionCloseMessage
__ HomeKit: _HMDeviceSetupSessionDataMessageKey
__ HomeKit: _HMDeviceSetupSessionErrorMessageKey
__ HomeKit: _HMDeviceSetupSessionIdentifierMessageKey
__ HomeKit: _HMDeviceSetupSessionOpenMessage
__ HomeKit: _HMDeviceSetupSessionReceiveDataMessage
__ HomeKit: _HMDeviceSetupSessionRoleMessageKey
__ HomeKit: _HMDeviceSetupSessionUserInfoMessageKey
__ HomeKit: _HMDeviceSupportsHH2CodingKey
__ HomeKit: _HMDurationsApproximatelyEqual
__ HomeKit: _HMEventTriggerActivationStateAsString
__ HomeKit: _HMFaceCropEntireImageFaceBoundingBox
__ HomeKit: _HMFetchAppleMediaAccessorySleepWakeStateKey
__ HomeKit: _HMFetchAppleMediaAccessorySleepWakeStateMessage
__ HomeKit: _HMHomeAccessControlOverrideCodingKey
__ HomeKit: _HMHomeAccessNotAllowedReasonCodeCodingKey
__ HomeKit: _HMHomeAccessoryErrorMessage
__ HomeKit: _HMHomeAccessoryNetworkProtectionGroupsCodingKey
__ HomeKit: _HMHomeAccessorySetupCodeFailureMessage
__ HomeKit: _HMHomeAddAccessoryRequestDumpStateKey
__ HomeKit: _HMHomeAddNetworkRouterEnabledCodingKey
__ HomeKit: _HMHomeAddNetworkRouterEnabledMessageKey
__ HomeKit: _HMHomeAddWalletKeyMessage
__ HomeKit: _HMHomeAddWalletKeyMessageKeyOptions
__ HomeKit: _HMHomeAddWalletKeyOptionsDescription
__ HomeKit: _HMHomeAddWalletKeyToPairedWatchesMessage
__ HomeKit: _HMHomeAppBundleIdentifier
__ HomeKit: _HMHomeAudioGroupsCodingKey
__ HomeKit: _HMHomeAudioGroupsControllerIdentifierCodingKey
__ HomeKit: _HMHomeAutomaticSoftwareUpdateEnabledCodingKey
__ HomeKit: _HMHomeAutomaticThirdPartyAccessorySoftwareUpdateEnabledCodingKey
__ HomeKit: _HMHomeBulletinNotificationsSupportedCodingKey
__ HomeKit: _HMHomeConfirmResidentRequestKey
__ HomeKit: _HMHomeDidAddWalletKeyMessage
__ HomeKit: _HMHomeDidOnboardLocationServicesCodingKey
__ HomeKit: _HMHomeDidRemoveWalletKeyMessage
__ HomeKit: _HMHomeEnableExpressForWalletKeyMessage
__ HomeKit: _HMHomeEnableExpressForWalletKeyMessageKeyAuthData
__ HomeKit: _HMHomeEnableHomeAppleMediaNotificationsKey
__ HomeKit: _HMHomeEnableMultiUserRequestKey
__ HomeKit: _HMHomeErrorMessageKey
__ HomeKit: _HMHomeEventTopicSuffixIDAggregateData
__ HomeKit: _HMHomeExecuteActionsActionInfoKey
__ HomeKit: _HMHomeExecuteActionsRequestKey
__ HomeKit: _HMHomeFetchAvailableWalletKeyEncodedPKPassMessage
__ HomeKit: _HMHomeFetchAvailableWalletKeyEncodedPKPassMessageKeyFileHandle
__ HomeKit: _HMHomeFetchLastModifiedServiceOfTypeMessage
__ HomeKit: _HMHomeFetchLightProfilesSettingsMessage
__ HomeKit: _HMHomeFetchWalletKeyColorMessage
__ HomeKit: _HMHomeFetchWalletKeyColorMessageKeyColor
__ HomeKit: _HMHomeHasAnyUserAcknowledgedCameraRecordingOnboardingValueCodingKey
__ HomeKit: _HMHomeHasOnboardedForAccessCodeCodingKey
__ HomeKit: _HMHomeHasOnboardedForWalletKeyCodingKey
__ HomeKit: _HMHomeHubStateCodingKey
__ HomeKit: _HMHomeHubStateMessageKey
__ HomeKit: _HMHomeHubStateUpdatedMessage
__ HomeKit: _HMHomeInternalSetMinHomeKitVersionForAccessoryNetworkProtectionChangeRequest
__ HomeKit: _HMHomeInternalSetMiniumumNetworkRouterSupportHomeKitVersionRequest
__ HomeKit: _HMHomeIsUserAllowedAccessCodingKey
__ HomeKit: _HMHomeJoinOrFormThreadNetworkMessageKey
__ HomeKit: _HMHomeLocationForFeedbackLocationUpdateTimeStampKey
__ HomeKit: _HMHomeLocationServicesEnabledCodingKey
__ HomeKit: _HMHomeLocationStatusUpdateNotificationKey
__ HomeKit: _HMHomeLocationStatusValueCodingKey
__ HomeKit: _HMHomeLocationStatusValueKey
__ HomeKit: _HMHomeManagerAccessAllowedWhenLockedUpdatedNotificationKey
__ HomeKit: _HMHomeManagerAddRequestKey
__ HomeKit: _HMHomeManagerAppleTVAccessoryAddedNotification
__ HomeKit: _HMHomeManagerAreAnyAccessoriesConfigured
__ HomeKit: _HMHomeManagerAreAnyAppleTVAccessoriesConfigured
__ HomeKit: _HMHomeManagerAreAnySpeakersConfigured
__ HomeKit: _HMHomeManagerAreAnyTelevisionAccessoriesConfigured
__ HomeKit: _HMHomeManagerAssistantIdentifierSaltKey
__ HomeKit: _HMHomeManagerAttemptHH2AutoMigrationMessage
__ HomeKit: _HMHomeManagerAutoAddWalletKeySupressionAssertionAcquireMessage
__ HomeKit: _HMHomeManagerAutoAddWalletKeySupressionAssertionReleaseMessage
__ HomeKit: _HMHomeManagerCheckForAddAccessoryRequestsMessageKey
__ HomeKit: _HMHomeManagerConnectivityInfoRequestMessage
__ HomeKit: _HMHomeManagerConvertFirewallRulesMessageKey
__ HomeKit: _HMHomeManagerDataSyncStateMessageKey
__ HomeKit: _HMHomeManagerDestinationMessageKey
__ HomeKit: _HMHomeManagerDevicesMessageKey
__ HomeKit: _HMHomeManagerDevicesUpdatedMessage
__ HomeKit: _HMHomeManagerDumpDatabaseMessage
__ HomeKit: _HMHomeManagerDumpStateCompositeSettingsMessageKey
__ HomeKit: _HMHomeManagerDumpStateDaemonStateMessageKey
__ HomeKit: _HMHomeManagerDumpStateEventRouterStateMessageKey
__ HomeKit: _HMHomeManagerDumpStateMessage
__ HomeKit: _HMHomeManagerDumpStateXPCMessagesCountersMessageKey
__ HomeKit: _HMHomeManagerEnableUARPPacketCaptureEnableMessageKey
__ HomeKit: _HMHomeManagerEnableUARPPacketCaptureMessage
__ HomeKit: _HMHomeManagerEnableUARPPacketCapturePathMessageKey
__ HomeKit: _HMHomeManagerEventRouterChangeRegistrationsMessageName
__ HomeKit: _HMHomeManagerEventRouterEventUpdatesMessageName
__ HomeKit: _HMHomeManagerFetchAddAccessoryRequestsMessageKey
__ HomeKit: _HMHomeManagerFetchDevicesMessage
__ HomeKit: _HMHomeManagerForceFailROARMigrationMessageKey
__ HomeKit: _HMHomeManagerGenerationCounterNotification
__ HomeKit: _HMHomeManagerHH2ManualMigrationEnabled
__ HomeKit: _HMHomeManagerHH2MigrationDryRunMessageKey
__ HomeKit: _HMHomeManagerHH2MigrationFailedErrorKey
__ HomeKit: _HMHomeManagerHH2MigrationInProgressKey
__ HomeKit: _HMHomeManagerHomePodMiniConfiguredChangedNotification
__ HomeKit: _HMHomeManagerHomePodsConfiguredChangedNotification
__ HomeKit: _HMHomeManagerIsDaemonRunningWithROARFramework
__ HomeKit: _HMHomeManagerIsThisOSCapableOfRunningHH2
__ HomeKit: _HMHomeManagerJSONDataRequestMessageKey
__ HomeKit: _HMHomeManagerJSONToTLVFileDataMessageKey
__ HomeKit: _HMHomeManagerLastRemovedCurrentAccessoryUUIDCodingKey
__ HomeKit: _HMHomeManagerLocalNetworkPingMessageKey
__ HomeKit: _HMHomeManagerMediaAccessoryControlRequestMessage
__ HomeKit: _HMHomeManagerMessageKeyHomeUUID
__ HomeKit: _HMHomeManagerMonitorDeviceMessageKey
__ HomeKit: _HMHomeManagerMultiUserStatusMessageKey
__ HomeKit: _HMHomeManagerNameValidationOptionsMessageKey
__ HomeKit: _HMHomeManagerNameValidationOptionsToString
__ HomeKit: _HMHomeManagerOptionsMessageKey
__ HomeKit: _HMHomeManagerOptionsShortDescription
__ HomeKit: _HMHomeManagerOptionsToString
__ HomeKit: _HMHomeManagerPairingIdentityRequestMessage
__ HomeKit: _HMHomeManagerPendingRequestsMessageKey
__ HomeKit: _HMHomeManagerPreferencesChangedNotification
__ HomeKit: _HMHomeManagerQueryHomeNamepaceMessage
__ HomeKit: _HMHomeManagerQueryMetadataMessage
__ HomeKit: _HMHomeManagerQueryNameMessageKey
__ HomeKit: _HMHomeManagerQueryVersionMessage
__ HomeKit: _HMHomeManagerRemoveAccountRequestMessage
__ HomeKit: _HMHomeManagerResolveAccountRequestMessage
__ HomeKit: _HMHomeManagerRuntimeStateUpdateNotificationMessage
__ HomeKit: _HMHomeManagerRuntimeStateUpdateRequestMessage
__ HomeKit: _HMHomeManagerRuntimeStateUpdateRequestMessageKey
__ HomeKit: _HMHomeManagerSecurePingMessageKey
__ HomeKit: _HMHomeManagerSetMetadataMessage
__ HomeKit: _HMHomeManagerShouldFetchMessageKey
__ HomeKit: _HMHomeManagerShouldSkipKeyRollForROARMessageKey
__ HomeKit: _HMHomeManagerSpeakersConfiguredChangedNotification
__ HomeKit: _HMHomeManagerStatusMessageKey
__ HomeKit: _HMHomeManagerStatusUpdatedMessage
__ HomeKit: _HMHomeManagerTelevisionAccessoryAddedNotification
__ HomeKit: _HMHomeManagerTestHH2MigrationMessage
__ HomeKit: _HMHomeManagerUpgradeToHH2Message
__ HomeKit: _HMHomeManagerUserOptedToHH2
__ HomeKit: _HMHomeMediaMinimumUserPrivilegeCodingKey
__ HomeKit: _HMHomeMediaPasswordCodingKey
__ HomeKit: _HMHomeMediaPasswordMessageKey
__ HomeKit: _HMHomeMediaPeerToPeerEnabledCodingKey
__ HomeKit: _HMHomeMessageKeyLightProfileUUIDs
__ HomeKit: _HMHomeMessageKeySettingsByLightProfileUUIDs
__ HomeKit: _HMHomeMultiUserEnabledChangeNotificationKey
__ HomeKit: _HMHomeMultiUserEnabledValueCodingKey
__ HomeKit: _HMHomeNetworkProtectionModeCodingKey
__ HomeKit: _HMHomeNetworkRouterSupportDisableReasonCodingKey
__ HomeKit: _HMHomeNetworkRouterSupportDisableReasonMessageKey
__ HomeKit: _HMHomeNetworkRouterSupportDisableReasonUpdatedNotification
__ HomeKit: _HMHomePersonManagerSettingsCodingKey
__ HomeKit: _HMHomePersonManagerSettingsMessageKey
__ HomeKit: _HMHomePodMiniConfiguredStatusKey
__ HomeKit: _HMHomePodVariantCodingKey
__ HomeKit: _HMHomePodsConfiguredStatusKey
__ HomeKit: _HMHomeReplacedAccessoryUUIDMessageKey
__ HomeKit: _HMHomeReportDomainMessageKey
__ HomeKit: _HMHomeReportTimeoutMessageKey
__ HomeKit: _HMHomeRequestInfoMessageKey
__ HomeKit: _HMHomeResetAndRemoveAllCHIPPairingsFromAccessoryMessage
__ HomeKit: _HMHomeResidentDevicesListMessageKey
__ HomeKit: _HMHomeResolveThreadNetworkRequestKey
__ HomeKit: _HMHomeRetrieveAsyncResultsMessage
__ HomeKit: _HMHomeRetriveHomeLocationForFeedbackMessage
__ HomeKit: _HMHomeSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequestKey
__ HomeKit: _HMHomeSetHasOnboardedForAccessCodeMessage
__ HomeKit: _HMHomeSetHasOnboardedForWalletKeyMessage
__ HomeKit: _HMHomeSetSoundCheckRequestKey
__ HomeKit: _HMHomeSiriEndpointSupportedCodingKey
__ HomeKit: _HMHomeSoundCheckCodingKey
__ HomeKit: _HMHomeTestUpdateToROARCodingKey
__ HomeKit: _HMHomeTestUpgradeToROARFrameworkRequestKey
__ HomeKit: _HMHomeTheaterQFAEnabledCodingKey
__ HomeKit: _HMHomeThreadNetworkCredentialsMessageKey
__ HomeKit: _HMHomeThreadNetworkIDCodingKey
__ HomeKit: _HMHomeUIServiceBundleIdentifier
__ HomeKit: _HMHomeUnjoinThreadNetworkMessageKey
__ HomeKit: _HMHomeUpdateAutomaticSoftwareUpdateMessage
__ HomeKit: _HMHomeUpdateAutomaticThirdPartyAccessorySoftwareUpdateMessage
__ HomeKit: _HMHomeUpdateDidOnboardLocationServicesRequestKey
__ HomeKit: _HMHomeUpdateLocationServicesEnabledRequestKey
__ HomeKit: _HMHomeUpdateMediaPasswordMessage
__ HomeKit: _HMHomeUpdateMediaPeerToPeerEnabledMessage
__ HomeKit: _HMHomeUpdateMinimumMediaUserPrivilegeMessage
__ HomeKit: _HMHomeUpdateNetworkProtectionModeRequest
__ HomeKit: _HMHomeUpdatePersonManagerSettingsMessage
__ HomeKit: _HMHomeUpdateUserAnnounceAccessRequestKey
__ HomeKit: _HMHomeUpdatedToROARCodingKey
__ HomeKit: _HMHomeUserAnnounceAccessInformationKey
__ HomeKit: _HMHomeUserConsentForAccessoryReplacementRequestKey
__ HomeKit: _HMHomeUserConsentResponseForAccessoryMessageKey
__ HomeKit: _HMHomeUserInviteInformationKey
__ HomeKit: _HMHomeWalletKeyColorAsString
__ HomeKit: _HMHomeWalletKeyColorDefault
__ HomeKit: _HMHomeWalletKeyErrorDomain
__ HomeKit: _HMHomeWalletKeyErrorUserInfoKeyErrorByDevice
__ HomeKit: _HMHomeWalletKeyManagerFetchDeviceStateForPairedWatchesMessage
__ HomeKit: _HMHomeWalletKeyManagerFetchDeviceStateMessage
__ HomeKit: _HMHomeWalletKeyManagerMessageKeyDeviceState
__ HomeKit: _HMHomeWalletKeyManagerMessageKeyDeviceStateForPairedWatches
__ HomeKit: _HMHomeWalletKeyManagerMessageKeyIgnoredErrorCodes
__ HomeKit: _HMHomeWalletKeyManagerMessageKeyWalletKeyUUID
__ HomeKit: _HMINControlHomeIntentShortDescription
__ HomeKit: _HMImmutableSettingChangeEventComponentsFromTopic
__ HomeKit: _HMImmutableSettingChangeEventTopicFromComponents
__ HomeKit: _HMImmutableSettingChangeEventTopicFromComponentsLegacy
__ HomeKit: _HMImmutableSettingChangeEventTopicFromMediaGroup
__ HomeKit: _HMImmutableSettingChangeEventTopicFromMediaSystem
__ HomeKit: _HMIntentOutcomeFailure
__ HomeKit: _HMIntentOutcomeInProgress
__ HomeKit: _HMIsHAPMetadataNeededForHMHomeManagerOptions
__ HomeKit: _HMIsMotionDetectionAllowedForCameraAccessMode
__ HomeKit: _HMIsRecordingAllowedForCameraAccessMode
__ HomeKit: _HMIsSignificantEventDetectionAllowedForCameraAccessMode
__ HomeKit: _HMIsStreamingAllowedForCameraAccessMode
__ HomeKit: _HMLightProfileBrightnessMessageKey
__ HomeKit: _HMLightProfileColorTemperatureMessageKey
__ HomeKit: _HMLightProfileFetchNaturalLightColorTemperatureForBrightnessMessage
__ HomeKit: _HMLightProfileNaturalLightingEnabledKey
__ HomeKit: _HMLightProfileSetNaturalLightingEnabledMessage
__ HomeKit: _HMLightProfileSetNaturalLightingEnabledMessageKey
__ HomeKit: _HMLightProfileSetNaturalLightingEnabledShouldRetryOnFailureMessageKey
__ HomeKit: _HMLightProfileSettingsCodingKey
__ HomeKit: _HMLightProfileSettingsDidUpdateMessage
__ HomeKit: _HMLightProfileUUIDCodingKey
__ HomeKit: _HMLogEventSessionRootUUIDKey
__ HomeKit: _HMLogEventSessionServiceNameKey
__ HomeKit: _HMMaxLengthForNaming
__ HomeKit: _HMMediaDestinationAudioGroupIdentifierPayloadKey
__ HomeKit: _HMMediaDestinationControllerUpateOptionsAsString
__ HomeKit: _HMMediaDestinationControllerUpdateDestinationRequestMessage
__ HomeKit: _HMMediaDestinationControllerUpdateOptionsPayloadKey
__ HomeKit: _HMMediaDestinationDerivedDestinationChangedReason
__ HomeKit: _HMMediaDestinationIdentifierPayloadKey
__ HomeKit: _HMMediaDestinationNullIdentifierString
__ HomeKit: _HMMediaDestinationSupportOptionsAsString
__ HomeKit: _HMMediaDestinationSupportedOptionsPayloadKey
__ HomeKit: _HMMediaDestinationTypeAsString
__ HomeKit: _HMMediaDestinationUpdateAudioGroupIdentifierRequestMessage
__ HomeKit: _HMMediaDestinationUpdateSupportedOptionsRequestMessage
__ HomeKit: _HMMediaDestinationUpdatedNotification
__ HomeKit: _HMMediaGroupDestinationIdentifiersPayloadKey
__ HomeKit: _HMMediaGroupIdentifierPayloadKey
__ HomeKit: _HMMediaGroupNamePayloadKey
__ HomeKit: _HMMediaGroupNullNameString
__ HomeKit: _HMMediaGroupParentIdentifierPayloadKey
__ HomeKit: _HMMediaGroupProtoMediaDestinationControllerDataReadFrom
__ HomeKit: _HMMediaGroupProtoMediaDestinationReadFrom
__ HomeKit: _HMMediaGroupsControllerCreateGroupRequestMessage
__ HomeKit: _HMMediaGroupsControllerRemoveGroupRequestMessage
__ HomeKit: _HMMediaGroupsControllerUpdateGroupRequestMessage
__ HomeKit: _HMMediaPlaybackActionPlaybackArchiveCodingKey
__ HomeKit: _HMMediaPlaybackActionPlaybackArchiveMessageKey
__ HomeKit: _HMMediaPlaybackActionProfilesCodingKey
__ HomeKit: _HMMediaPlaybackActionProfilesMessageKey
__ HomeKit: _HMMediaPlaybackActionStateCodingKey
__ HomeKit: _HMMediaPlaybackActionStateMessageKey
__ HomeKit: _HMMediaPlaybackActionVolumeCodingKey
__ HomeKit: _HMMediaPlaybackActionVolumeMessageKey
__ HomeKit: _HMMediaProfileCapabilitiesCodingKey
__ HomeKit: _HMMediaProfileRouteUIDCodingKey
__ HomeKit: _HMMediaProfileSessionCodingKey
__ HomeKit: _HMMediaProfileSessionUUIDCodingKey
__ HomeKit: _HMMediaSessionAudioControlMutedCodingKey
__ HomeKit: _HMMediaSessionAudioControlMutedMessageKey
__ HomeKit: _HMMediaSessionAudioControlUpdatedMessage
__ HomeKit: _HMMediaSessionAudioControlVolumeCodingKey
__ HomeKit: _HMMediaSessionAudioControlVolumeMessageKey
__ HomeKit: _HMMediaSessionIdentifierKey
__ HomeKit: _HMMediaSessionMediaUniqueIdentifierCodingKey
__ HomeKit: _HMMediaSessionMediaUniqueIdentifierMessageKey
__ HomeKit: _HMMediaSessionMutedMessageKey
__ HomeKit: _HMMediaSessionPlaybackStateCodingKey
__ HomeKit: _HMMediaSessionPlaybackStateMessageKey
__ HomeKit: _HMMediaSessionPlaybackUpdatedMessage
__ HomeKit: _HMMediaSessionPropertyListMessageKey
__ HomeKit: _HMMediaSessionRefreshPlaybackMessage
__ HomeKit: _HMMediaSessionRepeatStateCodingKey
__ HomeKit: _HMMediaSessionRepeatStateMessageKey
__ HomeKit: _HMMediaSessionRequestMessageInformationKey
__ HomeKit: _HMMediaSessionRouteUIDCodingKey
__ HomeKit: _HMMediaSessionSetAudioControlMessage
__ HomeKit: _HMMediaSessionSetPlaybackMessage
__ HomeKit: _HMMediaSessionShuffleStateCodingKey
__ HomeKit: _HMMediaSessionShuffleStateMessageKey
__ HomeKit: _HMMediaSessionUUIDMessageKey
__ HomeKit: _HMMediaSessionVolumeMessageKey
__ HomeKit: _HMMediaSystemAudioDestinationCodingKey
__ HomeKit: _HMMediaSystemMessageIdentifierCodingKey
__ HomeKit: _HMMediaSystemRoleTypeAsString
__ HomeKit: _HMNanoHomeAppBundleIdentifier
__ HomeKit: _HMNetworkConfigurationProfileAccessViolationMessageKey
__ HomeKit: _HMNetworkConfigurationProfileAccessViolationUpdatedNotification
__ HomeKit: _HMNetworkConfigurationProfileAllowedHostsMessageKey
__ HomeKit: _HMNetworkConfigurationProfileHostsUpdatedNotification
__ HomeKit: _HMNetworkConfigurationProfilePreviewAllowedHostsRequest
__ HomeKit: _HMNetworkConfigurationProfileWiFiCredentialTypeMessageKey
__ HomeKit: _HMNetworkConfigurationProfileWiFiReconfigurationRequest
__ HomeKit: _HMNetworkConfigurationProfileWiFiReconfigurationSupportMessageKey
__ HomeKit: _HMNetworkConfigurationProfileWiFiReconfigurationUpdatedNotification
__ HomeKit: _HMNetworkConfigurationProfileWiFiRotateCredentialMessageKey
__ HomeKit: _HMNetworkProtectionModeAsString
__ HomeKit: _HMNetworkRouterFirewallRuleManagerAddOverridesDataKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerAddOverridesMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerAddOverridesReplaceKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsListOnlyKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsProductGroupKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsProductNumberKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsRawOutputKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsResponseKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpCloudRecordsVerifySignaturesKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesFirmwareVersionKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesIgnoreOverridesKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesProductGroupKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesProductNumberKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesRawOutputKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpLocalRulesResponseKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataFirmwareVersionKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataIgnoreOverridesKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataProductGroupKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataProductNumberKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataRawOutputKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerDumpPairedMetadataResponseKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerFetchCloudChangesForceChangeNotificationsKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerFetchCloudChangesMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerRemoveLocalRulesMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerRemoveOverridesMessageKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerRemoveOverridesProductGroupKey
__ HomeKit: _HMNetworkRouterFirewallRuleManagerRemoveOverridesProductNumberKey
__ HomeKit: _HMNetworkRouterProfileIsSatelliteCodingKey
__ HomeKit: _HMNetworkRouterProfileNetworkStatusCodingKey
__ HomeKit: _HMNetworkRouterProfileNetworkStatusMessageKey
__ HomeKit: _HMNetworkRouterProfileNetworkStatusUpdatedNotification
__ HomeKit: _HMNetworkRouterProfileSatelliteProfilesCodingKey
__ HomeKit: _HMNetworkRouterProfileSatelliteProfilesUpdatedNotification
__ HomeKit: _HMNetworkRouterSatelliteProfileIdentifiersMessageKey
__ HomeKit: _HMNetworkRouterSupportDisableReasonAsString
__ HomeKit: _HMPBMetadataCategoryReadFrom
__ HomeKit: _HMPBMetadataCharacteristicReadFrom
__ HomeKit: _HMPBMetadataServiceReadFrom
__ HomeKit: _HMPersonManagerAddOrUpdateFaceCropsMessage
__ HomeKit: _HMPersonManagerAddOrUpdateFaceprintsMessage
__ HomeKit: _HMPersonManagerAddOrUpdatePersonsMessage
__ HomeKit: _HMPersonManagerAssociateFaceCropsMessage
__ HomeKit: _HMPersonManagerDidChangePersonDataMessage
__ HomeKit: _HMPersonManagerDisassociateFaceCropsMessage
__ HomeKit: _HMPersonManagerFetchFaceCropsMessage
__ HomeKit: _HMPersonManagerFetchFaceprintsMessage
__ HomeKit: _HMPersonManagerFetchPersonFaceCropsMessage
__ HomeKit: _HMPersonManagerFetchPersonsMessage
__ HomeKit: _HMPersonManagerFetchUnassociatedFaceCropsMessage
__ HomeKit: _HMPersonManagerMessageKeyFaceCropUUIDs
__ HomeKit: _HMPersonManagerMessageKeyFaceCrops
__ HomeKit: _HMPersonManagerMessageKeyFaceprintUUIDs
__ HomeKit: _HMPersonManagerMessageKeyFaceprints
__ HomeKit: _HMPersonManagerMessageKeyPersonUUIDs
__ HomeKit: _HMPersonManagerMessageKeyPersons
__ HomeKit: _HMPersonManagerMessageKeyRemovedFaceCropUUIDs
__ HomeKit: _HMPersonManagerMessageKeyRemovedFaceprintUUIDs
__ HomeKit: _HMPersonManagerMessageKeyRemovedPersonUUIDs
__ HomeKit: _HMPersonManagerMessageKeySource
__ HomeKit: _HMPersonManagerMessageKeyUpdatedFaceprints
__ HomeKit: _HMPersonManagerMessageKeyUpdatedPersonFaceCrops
__ HomeKit: _HMPersonManagerMessageKeyUpdatedPersons
__ HomeKit: _HMPersonManagerMessageKeyUpdatedUnassociatedFaceCrops
__ HomeKit: _HMPersonManagerPerformCloudPullMessage
__ HomeKit: _HMPersonManagerRemoveFaceCropsMessage
__ HomeKit: _HMPersonManagerRemoveFaceprintsMessage
__ HomeKit: _HMPersonManagerRemovePersonsMessage
__ HomeKit: _HMPersonManagerSubscribeMessage
__ HomeKit: _HMPersonManagerUnsubscribeMessage
__ HomeKit: _HMPersonSettingsManagerClassificationNotificationsEnabledKey
__ HomeKit: _HMPersonSettingsManagerFetchClassificationNotificationsEnabledForPersonMessage
__ HomeKit: _HMPersonSettingsManagerPersonUUIDKey
__ HomeKit: _HMPersonSettingsManagerSetClassificationNotificationsEnabledForPersonMessage
__ HomeKit: _HMPresenceEventTypeAsString
__ HomeKit: _HMPresenceTypeAnyUserAtHome
__ HomeKit: _HMPresenceTypeCurrentUserAtHome
__ HomeKit: _HMPresenceTypeCurrentUserNotAtHome
__ HomeKit: _HMPresenceTypeNoUserAtHome
__ HomeKit: _HMPresenceTypeUsersAtHome
__ HomeKit: _HMPresenceTypeUsersNotAtHome
__ HomeKit: _HMPrincipalClassKey
__ HomeKit: _HMProcessNameKey
__ HomeKit: _HMProductColorCodingKey
__ HomeKit: _HMRemoteLoginHandlerUpdateLoggedInAccountMessage
__ HomeKit: _HMReportDomainAssistant
__ HomeKit: _HMReportDomainHomeUtil
__ HomeKit: _HMResidentDeviceCapabilitiesMessageKey
__ HomeKit: _HMResidentDeviceDeviceCodingKey
__ HomeKit: _HMResidentDeviceEnabledMessageKey
__ HomeKit: _HMResidentDeviceStatusMessageKey
__ HomeKit: _HMServiceLastKnownOperatingStateAbnormalReasonsCodingKey
__ HomeKit: _HMServiceLastKnownOperatingStateCodingKey
__ HomeKit: _HMServiceMediaSourceDisplayOrderCodingKey
__ HomeKit: _HMServiceMediaSourceDisplayOrderModifiableCodingKey
__ HomeKit: _HMServiceMediaSourceIdentifierCodingKey
__ HomeKit: _HMServiceMediaSourceIdentifierMessageKey
__ HomeKit: _HMServiceMediaSourceIdentifierUpdatedNotification
__ HomeKit: _HMServiceNameModifiableCodingKey
__ HomeKit: _HMServiceSubtypeGenericValve
__ HomeKit: _HMServiceSubtypeIrrigationValve
__ HomeKit: _HMServiceSubtypeShowerheadValve
__ HomeKit: _HMServiceSubtypeUnknown
__ HomeKit: _HMServiceSubtypeWaterFaucetValve
__ HomeKit: _HMServiceTargetAccessoryUUID
__ HomeKit: _HMServiceTypeAccessoryInformation
__ HomeKit: _HMServiceTypeAirPurifier
__ HomeKit: _HMServiceTypeAirQualitySensor
__ HomeKit: _HMServiceTypeBattery
__ HomeKit: _HMServiceTypeCameraControl
__ HomeKit: _HMServiceTypeCameraOperatingMode
__ HomeKit: _HMServiceTypeCameraRTPStreamManagement
__ HomeKit: _HMServiceTypeCameraRecordingManagement
__ HomeKit: _HMServiceTypeCarbonDioxideSensor
__ HomeKit: _HMServiceTypeCarbonMonoxideSensor
__ HomeKit: _HMServiceTypeContactSensor
__ HomeKit: _HMServiceTypeDiagnostics
__ HomeKit: _HMServiceTypeDoor
__ HomeKit: _HMServiceTypeDoorbell
__ HomeKit: _HMServiceTypeFan
__ HomeKit: _HMServiceTypeFaucet
__ HomeKit: _HMServiceTypeGarageDoorOpener
__ HomeKit: _HMServiceTypeHeaterCooler
__ HomeKit: _HMServiceTypeHumidifierDehumidifier
__ HomeKit: _HMServiceTypeHumiditySensor
__ HomeKit: _HMServiceTypeInputSource
__ HomeKit: _HMServiceTypeIrrigationSystem
__ HomeKit: _HMServiceTypeLeakSensor
__ HomeKit: _HMServiceTypeLightSensor
__ HomeKit: _HMServiceTypeLightbulb
__ HomeKit: _HMServiceTypeLockMechanism
__ HomeKit: _HMServiceTypeMicrophone
__ HomeKit: _HMServiceTypeMotionSensor
__ HomeKit: _HMServiceTypeOccupancySensor
__ HomeKit: _HMServiceTypeOutlet
__ HomeKit: _HMServiceTypeSecuritySystem
__ HomeKit: _HMServiceTypeSmokeSensor
__ HomeKit: _HMServiceTypeSpeaker
__ HomeKit: _HMServiceTypeStatelessProgrammableSwitch
__ HomeKit: _HMServiceTypeSwitch
__ HomeKit: _HMServiceTypeTargetControl
__ HomeKit: _HMServiceTypeTargetControlManagement
__ HomeKit: _HMServiceTypeTelevision
__ HomeKit: _HMServiceTypeTemperatureSensor
__ HomeKit: _HMServiceTypeThermostat
__ HomeKit: _HMServiceTypeValve
__ HomeKit: _HMServiceTypeVentilationFan
__ HomeKit: _HMServiceTypeWindow
__ HomeKit: _HMServiceTypeWindowCovering
__ HomeKit: _HMSettingConstraintIdentifierCodingKey
__ HomeKit: _HMSettingConstraintTypeCodingKey
__ HomeKit: _HMSettingConstraintTypeToString
__ HomeKit: _HMSettingConstraintValueCodingKey
__ HomeKit: _HMSettingKeyPathMessageKey
__ HomeKit: _HMSettingTargetTypeMessageKey
__ HomeKit: _HMSettingUpdateValueMessage
__ HomeKit: _HMSettingVersionValueTypeAsString
__ HomeKit: _HMSettingsContainerSettingsInitializedKey
__ HomeKit: _HMSetupAccessoryProgressAsString
__ HomeKit: _HMSiriEndpointApplyOnboardingSelectionsRequestMessage
__ HomeKit: _HMSiriEndpointOnboardingResultAsString
__ HomeKit: _HMSiriEndpointProfileActiveIdentifierCodingKey
__ HomeKit: _HMSiriEndpointProfileAssistantActiveCodingKey
__ HomeKit: _HMSiriEndpointProfileAssistantIdentifierCodingKey
__ HomeKit: _HMSiriEndpointProfileAssistantNameCodingKey
__ HomeKit: _HMSiriEndpointProfileAssistantsCodingKey
__ HomeKit: _HMSiriEndpointProfileCapabilityCodingKey
__ HomeKit: _HMSiriEndpointProfileEnableNotificationEnableKey
__ HomeKit: _HMSiriEndpointProfileEnableNotificationMessage
__ HomeKit: _HMSiriEndpointProfileEnableNotificationOptionsKey
__ HomeKit: _HMSiriEndpointProfileManuallyDisabledCodingKey
__ HomeKit: _HMSiriEndpointProfileMultifunctionButtonCodingKey
__ HomeKit: _HMSiriEndpointProfilePropertyListMessageKey
__ HomeKit: _HMSiriEndpointProfileRefreshStateMessage
__ HomeKit: _HMSiriEndpointProfileSessionCodingKey
__ HomeKit: _HMSiriEndpointProfileSessionHubIdentifierCodingKey
__ HomeKit: _HMSiriEndpointProfileSessionStateCodingKey
__ HomeKit: _HMSiriEndpointProfileSessionStateTypeToString
__ HomeKit: _HMSiriEndpointProfileSettingsCodingKey
__ HomeKit: _HMSiriEndpointProfileSiriEngineVersionCodingKey
__ HomeKit: _HMSiriEndpointProfileUpdateStateMessage
__ HomeKit: _HMSiriEndpointProfileVersionCodingKey
__ HomeKit: _HMSoftwareUpdateAssetSourceAsString
__ HomeKit: _HMSoftwareUpdateControllerChangeUpdateSourceMessage
__ HomeKit: _HMSoftwareUpdateControllerFetchMessage
__ HomeKit: _HMSoftwareUpdateControllerRemoveStagedUpdateMessage
__ HomeKit: _HMSoftwareUpdateControllerStartUpdateMessage
__ HomeKit: _HMSoftwareUpdateControllerUpdateDocumentationPathKey
__ HomeKit: _HMSoftwareUpdateControllerUpdateMessageKey
__ HomeKit: _HMSoftwareUpdateControllerUpdatePathKey
__ HomeKit: _HMSoftwareUpdateControllerUpdateSourceKey
__ HomeKit: _HMSoftwareUpdateControllerUpdateUserInitiatedStagingKey
__ HomeKit: _HMSoftwareUpdateDocumentationCodingKey
__ HomeKit: _HMSoftwareUpdateDocumentationMessageKey
__ HomeKit: _HMSoftwareUpdateDocumentationMetadataCodingKey
__ HomeKit: _HMSoftwareUpdateDocumentationMetadataMessageKey
__ HomeKit: _HMSoftwareUpdateDocumentationUpdatedMessage
__ HomeKit: _HMSoftwareUpdateDownloadSizeCodingKey
__ HomeKit: _HMSoftwareUpdateIdentifierCodingKey
__ HomeKit: _HMSoftwareUpdateInstallDurationCodingKey
__ HomeKit: _HMSoftwareUpdateManagerFetchMessage
__ HomeKit: _HMSoftwareUpdateManagerIdentifierMessageKey
__ HomeKit: _HMSoftwareUpdateManagerStartMessage
__ HomeKit: _HMSoftwareUpdateManagerStartUpdateMessage
__ HomeKit: _HMSoftwareUpdateManagerStopMessage
__ HomeKit: _HMSoftwareUpdateManagerTargetIdentifierString
__ HomeKit: _HMSoftwareUpdateManagerUpdateAvailableUpdateMessage
__ HomeKit: _HMSoftwareUpdateManagerUpdateMessageKey
__ HomeKit: _HMSoftwareUpdateNeedsAttentionReasonsMessage
__ HomeKit: _HMSoftwareUpdateNeedsAttentionReasonsMessageKey
__ HomeKit: _HMSoftwareUpdateNeedsAttentionReasonsToString
__ HomeKit: _HMSoftwareUpdateReleaseDateCodingKey
__ HomeKit: _HMSoftwareUpdateRequestDocumentationMessage
__ HomeKit: _HMSoftwareUpdateRequestNeedsAttentionReasonsMessage
__ HomeKit: _HMSoftwareUpdateStateCodingKey
__ HomeKit: _HMSoftwareUpdateStateMessageKey
__ HomeKit: _HMSoftwareUpdateStateToString
__ HomeKit: _HMSoftwareUpdateUpdateDocumentationMetadataMessage
__ HomeKit: _HMSoftwareUpdateUpdateStateMessage
__ HomeKit: _HMSoftwareUpdateUpdateTypeCodingKey
__ HomeKit: _HMSoftwareUpdateUpdateTypeToString
__ HomeKit: _HMSoftwareUpdateVersionCodingKey
__ HomeKit: _HMStringFromCameraClipQuality
__ HomeKit: _HMStringFromCameraSignificantEventConfidenceLevel
__ HomeKit: _HMStringFromCameraSignificantEventReason
__ HomeKit: _HMStringFromHomeLocation
__ HomeKit: _HMSupportedStereoPairVersionsCodingKey
__ HomeKit: _HMSymptomsHandlerCodingKey
__ HomeKit: _HMSymptomsHandlerFixErrorMessage
__ HomeKit: _HMSymptomsHandlerSFDeviceIdentifierCodingKey
__ HomeKit: _HMSymptomsHandlerSFDeviceIdentifierMessageKey
__ HomeKit: _HMSymptomsHandlerSFDeviceIdentifierUpdatedMessage
__ HomeKit: _HMSymptomsHandlerSymptomsUpdatedMessage
__ HomeKit: _HMTelevisionAccessoriesConfiguredStatusKey
__ HomeKit: _HMTelevisionProfileSourceDisplayOrderMessageKey
__ HomeKit: _HMTelevisionProfileSourceDisplayOrderUpdateRequest
__ HomeKit: _HMTelevisionProfileSourceDisplayOrderUpdatedNotification
__ HomeKit: _HMTriggerConfiguredNameCodingKey
__ HomeKit: _HMTriggerConfiguredNameKey
__ HomeKit: _HMTriggerDeleteAfterExecutionPolicyIdentifierString
__ HomeKit: _HMTriggerDeleteAfterExecutionPolicyKey
__ HomeKit: _HMTriggerPolicyCodingKey
__ HomeKit: _HMTriggerPolicyKey
__ HomeKit: _HMTriggerPolicyUUIDCodingKey
__ HomeKit: _HMTriggerPolicyUUIDKey
__ HomeKit: _HMTriggerRemovePolicyKey
__ HomeKit: _HMTriggerUpdatePolicyKey
__ HomeKit: _HMUserActionPredictionRefreshMessage
__ HomeKit: _HMUserAnnounceAccessCodingKey
__ HomeKit: _HMUserAnnounceSettingsCodingKey
__ HomeKit: _HMUserAnnounceSettingsUpdateMessage
__ HomeKit: _HMUserAssistantAccessControlAccessoryIDsMessageKey
__ HomeKit: _HMUserAssistantAccessControlCodingKey
__ HomeKit: _HMUserAssistantAccessControlMessageKey
__ HomeKit: _HMUserAssistantAccessControlUpdateMessage
__ HomeKit: _HMUserCameraAccessLevelAsString
__ HomeKit: _HMUserCameraAccessLevelKey
__ HomeKit: _HMUserCloudShareManagerAccountEncodedClientInfoKey
__ HomeKit: _HMUserCloudShareManagerContainerDidAcceptCodingKey
__ HomeKit: _HMUserCloudShareManagerContainerIDsCodingKey
__ HomeKit: _HMUserCloudShareManagerDidReceiveRepairMessage
__ HomeKit: _HMUserCloudShareManagerDidReceiveShareMessage
__ HomeKit: _HMUserCloudShareManagerRegisterMessage
__ HomeKit: _HMUserCloudShareManagerRepairWakePrefix
__ HomeKit: _HMUserCloudShareManagerTargetIdentifierUUIDString
__ HomeKit: _HMUserCloudShareManagerWakePrefix
__ HomeKit: _HMUserCloudShareMultiUserStatusChangedNotification
__ HomeKit: _HMUserDefaultCamerasAccessLevel
__ HomeKit: _HMUserHomeAccessSettingsCodingKey
__ HomeKit: _HMUserIsRecordingAllowedWithCameraAccessLevel
__ HomeKit: _HMUserIsStreamingAllowedWithCameraAccessLevel
__ HomeKit: _HMUserIsValidCameraAccessLevel
__ HomeKit: _HMUserListeningHistoryUpdateControlAccessoriesCodingKey
__ HomeKit: _HMUserListeningHistoryUpdateControlAccessoryIDsMessageKey
__ HomeKit: _HMUserListeningHistoryUpdateControlUpdateMessage
__ HomeKit: _HMUserMediaContentProfileAccessControlAccessoriesCodingKey
__ HomeKit: _HMUserMediaContentProfileAccessControlAccessoryIDsMessageKey
__ HomeKit: _HMUserMediaContentProfileAccessControlUpdateMessage
__ HomeKit: _HMUserNeedsMultiUserItunesRepairCodingKey
__ HomeKit: _HMUserNeedsMultiUseriTunesRepairMessage
__ HomeKit: _HMUserNotificationContentActionURLKey
__ HomeKit: _HMUserPairingIdentityCodingKey
__ HomeKit: _HMUserPairingIdentityRequestMessage
__ HomeKit: _HMUserPhotosPersonManagerSettingsCodingKey
__ HomeKit: _HMUserPhotosPersonManagerSettingsMessageKey
__ HomeKit: _HMUserPrivateSettingsCodingKey
__ HomeKit: _HMUserPrivilegeToString
__ HomeKit: _HMUserSenderCorrelationIdentifierCodingKey
__ HomeKit: _HMUserShareClientInfoCodingKey
__ HomeKit: _HMUserShareClientPayloadRequestMessage
__ HomeKit: _HMUserShareContainerIDCodingKey
__ HomeKit: _HMUserShareFromUserCodingKey
__ HomeKit: _HMUserShareHomeCodingKey
__ HomeKit: _HMUserShareLookupInfoKey
__ HomeKit: _HMUserShareLookupRequestMessage
__ HomeKit: _HMUserShareRepairInfoMessageKey
__ HomeKit: _HMUserShareRepairRequestMessage
__ HomeKit: _HMUserShareToUserCodingKey
__ HomeKit: _HMUserShareTokenCodingKey
__ HomeKit: _HMUserShareURLCodingKey
__ HomeKit: _HMUserSharedSettingsCodingKey
__ HomeKit: _HMUserSupportsAutomaticHH2MigrationCodingKey
__ HomeKit: _HMUserUpdatePhotosPersonManagerSettingsMessage
__ HomeKit: _HMWorkflowDataKey
__ HomeKit: _HMXPCAccessorySetupMachServiceName
__ HomeKit: _HMXPCClientEntitlementsShortDescription
__ HomeKit: _HMXPCClientUUIDKey
__ HomeKit: _HMXPCEventRouterSubscriptionEventsMessageKey
__ HomeKit: _HMXPCEventRouterSubscriptionMessagePayloadKey
__ HomeKit: _HMXPCMachServiceName
__ HomeKit: _HMXPCMessageSentDateKey
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeAddRequestValue
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeConstraints
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeManager
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeModificationResponseValue
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeRemoveRequestValue
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeUpdateRequestValue
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeUserInformationValue
__ HomeKit: _OBJC_CLASS_$_HMAccessCodeValue
__ HomeKit: _OBJC_CLASS_$_HMAccessoryAccessCodeConstraintsFetchResponseValue
__ HomeKit: _OBJC_CLASS_$_HMAccessoryAccessCodeFetchResponseValue
__ HomeKit: _OBJC_CLASS_$_HMAccessoryAccessCodeValue
__ HomeKit: _OBJC_CLASS_$_HMAccessoryCapabilities
__ HomeKit: _OBJC_CLASS_$_HMAccessoryCategory
__ HomeKit: _OBJC_CLASS_$_HMAccessoryCollectionSettingItem
__ HomeKit: _OBJC_CLASS_$_HMAccessoryDiagnosticsMetadata
__ HomeKit: _OBJC_CLASS_$_HMAccessoryDiagnosticsOptions
__ HomeKit: _OBJC_CLASS_$_HMAccessoryEventTopic
__ HomeKit: _OBJC_CLASS_$_HMAccessoryInfoAccount
__ HomeKit: _OBJC_CLASS_$_HMAccessoryInfoPrimaryUser
__ HomeKit: _OBJC_CLASS_$_HMAccessoryInfoProtoPublicPairingIdentity
__ HomeKit: _OBJC_CLASS_$_HMAccessoryInfoSoftwareVersion
__ HomeKit: _OBJC_CLASS_$_HMAccessoryInfoWifiInfo
__ HomeKit: _OBJC_CLASS_$_HMAccessorySelectionSettingItem
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingConstraint
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingFetchResult
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsAdapter
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsDataSource
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsFetchRequestMessagePayload
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsFetchResponseMessagePayload
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsMessenger
__ HomeKit: _OBJC_CLASS_$_HMAccessorySettingsUpdateRequestMessagePayload
__ HomeKit: _OBJC_CLASS_$_HMAccessorySetupCompletedInfo
__ HomeKit: _OBJC_CLASS_$_HMAccessorySetupCoordinator
__ HomeKit: _OBJC_CLASS_$_HMAccessorySetupManager
__ HomeKit: _OBJC_CLASS_$_HMAccessorySetupRequest
__ HomeKit: _OBJC_CLASS_$_HMAccessorySetupResult
__ HomeKit: _OBJC_CLASS_$_HMAnnounceUserSettings
__ HomeKit: _OBJC_CLASS_$_HMAssistantAccessControl
__ HomeKit: _OBJC_CLASS_$_HMBooleanSetting
__ HomeKit: _OBJC_CLASS_$_HMBoundedIntegerSetting
__ HomeKit: _OBJC_CLASS_$_HMBulletinObjectTuple
__ HomeKit: _OBJC_CLASS_$_HMCHIPAccessoryPairing
__ HomeKit: _OBJC_CLASS_$_HMCHIPAccessorySetupPayload
__ HomeKit: _OBJC_CLASS_$_HMCHIPEcosystem
__ HomeKit: _OBJC_CLASS_$_HMCHIPHome
__ HomeKit: _OBJC_CLASS_$_HMCameraActivityZone
__ HomeKit: _OBJC_CLASS_$_HMCameraBulletinBoardNotificationCondition
__ HomeKit: _OBJC_CLASS_$_HMCameraBulletinBoardSmartNotification
__ HomeKit: _OBJC_CLASS_$_HMCameraClip
__ HomeKit: _OBJC_CLASS_$_HMCameraClipAssetContext
__ HomeKit: _OBJC_CLASS_$_HMCameraClipEncryptionContext
__ HomeKit: _OBJC_CLASS_$_HMCameraClipEncryptionManager
__ HomeKit: _OBJC_CLASS_$_HMCameraClipSignificantEvent
__ HomeKit: _OBJC_CLASS_$_HMCameraClipVideoDataSegment
__ HomeKit: _OBJC_CLASS_$_HMCameraClipVideoInitSegment
__ HomeKit: _OBJC_CLASS_$_HMCameraObjectFetchServer
__ HomeKit: _OBJC_CLASS_$_HMCameraRecordingReachabilityEvent
__ HomeKit: _OBJC_CLASS_$_HMCameraSignificantEvent
__ HomeKit: _OBJC_CLASS_$_HMCameraSignificantEventReasonNotificationCondition
__ HomeKit: _OBJC_CLASS_$_HMCameraStreamPreferences
__ HomeKit: _OBJC_CLASS_$_HMCameraUserNotificationSettings
__ HomeKit: _OBJC_CLASS_$_HMCharacteristicWriteAction
__ HomeKit: _OBJC_CLASS_$_HMEventTopicHelper
__ HomeKit: _OBJC_CLASS_$_HMFObjectCacheHMAccessoryCategory
__ HomeKit: _OBJC_CLASS_$_HMFaceClassification
__ HomeKit: _OBJC_CLASS_$_HMFaceCrop
__ HomeKit: _OBJC_CLASS_$_HMFaceprint
__ HomeKit: _OBJC_CLASS_$_HMHTMLDocument
__ HomeKit: _OBJC_CLASS_$_HMHome
__ HomeKit: _OBJC_CLASS_$_HMHomeAccessCodeValue
__ HomeKit: _OBJC_CLASS_$_HMHomeEventTopic
__ HomeKit: _OBJC_CLASS_$_HMHomeFetchLightProfileSettingsResult
__ HomeKit: _OBJC_CLASS_$_HMHomeInvitationData
__ HomeKit: _OBJC_CLASS_$_HMHomeManager
__ HomeKit: _OBJC_CLASS_$_HMHomePersonManager
__ HomeKit: _OBJC_CLASS_$_HMHomePersonManagerSettings
__ HomeKit: _OBJC_CLASS_$_HMHomeWalletKey
__ HomeKit: _OBJC_CLASS_$_HMHomeWalletKeyDeviceState
__ HomeKit: _OBJC_CLASS_$_HMImmutableSettingChangeEvent
__ HomeKit: _OBJC_CLASS_$_HMImmutableStringSetting
__ HomeKit: _OBJC_CLASS_$_HMIncomingHomeInvitationData
__ HomeKit: _OBJC_CLASS_$_HMLanguageSetting
__ HomeKit: _OBJC_CLASS_$_HMLanguageValueListSetting
__ HomeKit: _OBJC_CLASS_$_HMLightProfileSettings
__ HomeKit: _OBJC_CLASS_$_HMManagedConfigurationProfileInfo
__ HomeKit: _OBJC_CLASS_$_HMMatterTopology
__ HomeKit: _OBJC_CLASS_$_HMMediaDestination
__ HomeKit: _OBJC_CLASS_$_HMMediaDestinationControllerData
__ HomeKit: _OBJC_CLASS_$_HMMediaGroup
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupCreateRequestPayload
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupProtoMediaDestination
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupProtoMediaDestinationAggregateData
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupProtoMediaDestinationControllerData
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupProtoMediaGroupData
__ HomeKit: _OBJC_CLASS_$_HMMediaGroupUpdateRequestPayload
__ HomeKit: _OBJC_CLASS_$_HMMediaSystemBuilderPayload
__ HomeKit: _OBJC_CLASS_$_HMMediaSystemData
__ HomeKit: _OBJC_CLASS_$_HMMediaSystemRole
__ HomeKit: _OBJC_CLASS_$_HMMultiUserSettingsForMetrics
__ HomeKit: _OBJC_CLASS_$_HMMutableAccessorySettingsPartialFetchFailureInformation
__ HomeKit: _OBJC_CLASS_$_HMMutableCHIPVendor
__ HomeKit: _OBJC_CLASS_$_HMMutableCameraBulletinBoardNotificationCondition
__ HomeKit: _OBJC_CLASS_$_HMMutableCameraUserNotificationSettings
__ HomeKit: _OBJC_CLASS_$_HMMutableHomePersonManagerSettings
__ HomeKit: _OBJC_CLASS_$_HMMutablePerson
__ HomeKit: _OBJC_CLASS_$_HMMutablePersonFaceCrop
__ HomeKit: _OBJC_CLASS_$_HMMutablePhotosPersonManagerSettings
__ HomeKit: _OBJC_CLASS_$_HMMutableReportContext
__ HomeKit: _OBJC_CLASS_$_HMMutableSetupAccessoryPayload
__ HomeKit: _OBJC_CLASS_$_HMMutableUserHomeAccessSettings
__ HomeKit: _OBJC_CLASS_$_HMMutableXPCMessageTransportConfiguration
__ HomeKit: _OBJC_CLASS_$_HMOutgoingHomeInvitationData
__ HomeKit: _OBJC_CLASS_$_HMPBActionSet
__ HomeKit: _OBJC_CLASS_$_HMPBMetadataCategory
__ HomeKit: _OBJC_CLASS_$_HMPBMetadataCharacteristic
__ HomeKit: _OBJC_CLASS_$_HMPBMetadataService
__ HomeKit: _OBJC_CLASS_$_HMPerson
__ HomeKit: _OBJC_CLASS_$_HMPersonFaceCrop
__ HomeKit: _OBJC_CLASS_$_HMPersonLink
__ HomeKit: _OBJC_CLASS_$_HMPersonSettingsManager
__ HomeKit: _OBJC_CLASS_$_HMPhotosPersonManager
__ HomeKit: _OBJC_CLASS_$_HMPhotosPersonManagerSettings
__ HomeKit: _OBJC_CLASS_$_HMPlainTextDocument
__ HomeKit: _OBJC_CLASS_$_HMPresenceEventActivation
__ HomeKit: _OBJC_CLASS_$_HMRemovedUserInfo
__ HomeKit: _OBJC_CLASS_$_HMResidentCapabilities
__ HomeKit: _OBJC_CLASS_$_HMSettingBooleanValue
__ HomeKit: _OBJC_CLASS_$_HMSettingIntegerValue
__ HomeKit: _OBJC_CLASS_$_HMSettingLanguageValue
__ HomeKit: _OBJC_CLASS_$_HMSettingStringValue
__ HomeKit: _OBJC_CLASS_$_HMSettingValue
__ HomeKit: _OBJC_CLASS_$_HMSettingVersionValue
__ HomeKit: _OBJC_CLASS_$_HMSetupAccessoryDescription
__ HomeKit: _OBJC_CLASS_$_HMSetupAccessoryPayload
__ HomeKit: _OBJC_CLASS_$_HMSiriEndpointApplyOnboardingSelectionsPayload
__ HomeKit: _OBJC_CLASS_$_HMSiriEndpointApplyOnboardingSelectionsResponsePayload
__ HomeKit: _OBJC_CLASS_$_HMSiriEndpointDeleteSiriHistoryMessagePayload
__ HomeKit: _OBJC_CLASS_$_HMSiriEndpointProfilesMessenger
__ HomeKit: _OBJC_CLASS_$_HMSoftwareUpdateDocumentation
__ HomeKit: _OBJC_CLASS_$_HMSoftwareUpdateDocumentationMetadata
__ HomeKit: _OBJC_CLASS_$_HMSupportedAccessoryDiagnostics
__ HomeKit: _OBJC_CLASS_$_HMSymptom
__ HomeKit: _OBJC_CLASS_$_HMThreadNetworkMetadata
__ HomeKit: _OBJC_CLASS_$_HMUserActionPrediction
__ HomeKit: _OBJC_CLASS_$_HMUserCloudShareRepairInfo
__ HomeKit: _OBJC_CLASS_$_HMUserHomeAccessSettings
__ HomeKit: _OBJC_CLASS_$_HMUserInviteInformation
__ HomeKit: _OBJC_CLASS_$_HMUserPresenceAuthorization
__ HomeKit: _OBJC_CLASS_$_HMUserPresenceCompute
__ HomeKit: _OBJC_CLASS_$_HMXPCEventRouterProtoChangeRegistrationsMessage
__ HomeKit: _OBJC_CLASS_$_HMXPCEventRouterProtoEventsMessage
__ HomeKit: _OBJC_CLASS_$__HMAccessorySetting
__ HomeKit: _OBJC_CLASS_$__HMCameraUserSettings
__ HomeKit: _OBJC_CLASS_$__HMMutableCameraUserSettings
__ HomeKit: _OBJC_IVAR_$_HMAccessorySettingConstraint._identifierUUIDBytes
__ HomeKit: _VOLUME_MIN_DELTA
__ HomeKit: _allowedCharValueTypes
__ HomeKit: _areAnyHomePodMiniConfigured
__ HomeKit: _areAnyHomePodsConfigured
__ HomeKit: _areHomesConfigured
__ HomeKit: _areIncomingInvitesPresent
__ HomeKit: _describeDataSyncState
__ HomeKit: _getAssistantConfigurationSnapshot
__ HomeKit: _getAssistantConfigurationVersion
__ HomeKit: _getLastSyncedAssistantConfigurationVersion
__ HomeKit: _hm_assistantIdentifier
__ HomeKit: _hm_assistantIdentifierWithSalts
__ HomeKit: _initializeMappingsAndPaths
__ HomeKit: _isAllowedCharType
__ HomeKit: _isEqualAllowingNil
__ HomeKit: _isPresenceAuthorizationValid
__ HomeKit: _isRestoreSupportedForCharacteristic
__ HomeKit: _isValidHMSoftwareUpdateAssetSourceString
__ HomeKit: _kAccessoriesConfiguredStatusKey
__ HomeKit: _kAccessoryIsSuspendCapableCodingKey
__ HomeKit: _kAccessoryPairingStateChangedNotification
__ HomeKit: _kAccessoryReachableTransportsCodingKey
__ HomeKit: _kAccessoryReprovisionStateUpdateNotificationKey
__ HomeKit: _kAccessoryReprovisionedNotificationKey
__ HomeKit: _kAccessoryReprovisonStateKey
__ HomeKit: _kAddAccessoryProgressNotificationKey
__ HomeKit: _kAddMediaSystemRequest
__ HomeKit: _kAddServiceGroupRequestKey
__ HomeKit: _kAddServiceRequestKey
__ HomeKit: _kAssistantCurrentHomeIdentifierKey
__ HomeKit: _kAssistantCurrentHomeNameKey
__ HomeKit: _kBulletinBoardNotificationCommitRequestKey
__ HomeKit: _kBulletinBoardNotificationConditionCodingKey
__ HomeKit: _kBulletinBoardNotificationEnabledCodingKey
__ HomeKit: _kBulletinBoardNotificationServiceGroupCodingKey
__ HomeKit: _kBulletinBoardNotificationServiceGroupRequestKey
__ HomeKit: _kCacheConfigurationsDirName
__ HomeKit: _kDumpStateAllKey
__ HomeKit: _kDumpStateDaemonStateKey
__ HomeKit: _kEnableHomeNotificationsNotificationKey
__ HomeKit: _kEnableHomeNotificationsRequestKey
__ HomeKit: _kHomeNetworkProtectionModeMessageKey
__ HomeKit: _kHomesConfiguredStatusKey
__ HomeKit: _kIncomingInvitesPresentKey
__ HomeKit: _kMediaSystemBuilderSessionIDKey
__ HomeKit: _kMediaSystemCodingKey
__ HomeKit: _kMediaSystemCompatibleCodingKey
__ HomeKit: _kMediaSystemComponentRoleCodingKey
__ HomeKit: _kMediaSystemComponentUUIDCodingKey
__ HomeKit: _kMediaSystemComponentsCodingKey
__ HomeKit: _kMediaSystemConfiguredNameCodingKey
__ HomeKit: _kMediaSystemHandlerCodingKey
__ HomeKit: _kMediaSystemNameCodingKey
__ HomeKit: _kMediaSystemRemovedMessage
__ HomeKit: _kMediaSystemRootSettingsCodingKey
__ HomeKit: _kMediaSystemSetAppDataRequestKey
__ HomeKit: _kMediaSystemUUIDCodingKey
__ HomeKit: _kMediaSystemUpdatedNotification
__ HomeKit: _kMediaSystemsCodingKey
__ HomeKit: _kRemoveMediaSystemRequest
__ HomeKit: _kRemoveServiceGroupRequestKey
__ HomeKit: _kRemoveServiceRequestKey
__ HomeKit: _kRenameServiceGroupRequestKey
__ HomeKit: _kRenameServiceRequestKey
__ HomeKit: _kReprovisionAccessoryRequestKey
__ HomeKit: _kSearchForAccessoriesNeedingReprovisioningRequestKey
__ HomeKit: _kServiceConfigurationStateCodingKey
__ HomeKit: _kServiceConfigurationStateKey
__ HomeKit: _kServiceConfigurationStateUpdatedNotificationKey
__ HomeKit: _kServiceConfiguredNameCodingKey
__ HomeKit: _kServiceDefaultNameCodingKey
__ HomeKit: _kServiceDefaultNameUpdatedNotificationKey
__ HomeKit: _kServiceGroupNameCodingKey
__ HomeKit: _kServiceGroupNameKey
__ HomeKit: _kServiceGroupServiceUUIDsCodingKey
__ HomeKit: _kServiceGroupServicesCodingKey
__ HomeKit: _kServiceGroupUUIDCodingKey
__ HomeKit: _kServiceGroupUUIDKey
__ HomeKit: _kServiceGroupsCodingKey
__ HomeKit: _kServiceLabelIndexCodingKey
__ HomeKit: _kServiceLabelNamespaceCodingKey
__ HomeKit: _kServiceSubtypeCodingKey
__ HomeKit: _kServiceSubtypeKey
__ HomeKit: _kServiceSubtypeUpdatedNotificationKey
__ HomeKit: _kSiriIntentKey
__ HomeKit: _kSiriIntentRequestKey
__ HomeKit: _kSiriIntentRequestTypeKey
__ HomeKit: _kSiriSyncDataValidityKey
__ HomeKit: _kSlotIdentifierKey
__ HomeKit: _kSnapshotCaptureDate
__ HomeKit: _kSnapshotFilePath
__ HomeKit: _kSourceAspectRatioKey
__ HomeKit: _kSpeakersConfiguredStatusKey
__ HomeKit: _kSymptomsCodingKey
__ HomeKit: _kUpdateMediaSystemRequest
__ HomeKit: _kUpdateUserCamerasAccessLevelRequestKey
__ HomeKit: _localizationKeyForCharacteristicType
__ HomeKit: _localizedWiFiStringKey
__ HomeKit: _resolveCacheDirectory
__ HomeKit: _resolveHomeKitCacheDirectory
__ HomeKit: _stringToHMSoftwareUpdateAssetSource
__ HomeKit: _usersListApplicable
__ HomeKitBackingStore: _HMBCKErrorNoRetryDelay
__ HomeKitBackingStore: _HMBCloudDatabaseConfigurationDefaultSourceApplicationBundleIdentifier
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBAction
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudDatabase
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudDatabaseConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudPushHandler
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudZone
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudZoneConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudZoneID
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBCloudZoneStateModel
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBLocalDatabase
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBLocalZoneMirrorInput
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModel
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelCloudReference
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelContainer
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelCountMatchesQuery
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelField
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelFieldOption
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelInfiniteQuery
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelQueryArgument
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBModelReference
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableAction
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableCloudDatabaseConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableCloudZoneConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableLocalDatabaseConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableLocalZoneConfiguration
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableModelContainer
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBMutableModelField
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBProcessingOptions
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBShareInvitation
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBShareInvitationContext
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBShareUserID
__ HomeKitBackingStore: _OBJC_CLASS_$_HMBStreamingAsset
__ HomeKitBackingStore: _OBJC_IVAR_$_HMBCloudDatabase._propertyLock
__ HomeKitBackingStore: _OBJC_IVAR_$_HMBCloudZone._propertyLock
__ HomeKitBackingStore: _OBJC_METACLASS_$_HMBCloudZone
__ HomeKitBackingStore: _OBJC_METACLASS_$_HMBModel
__ HomeKitEventRouter: _HMEErrorDomain
__ HomeKitEventRouter: _HMEProtoEventInfoReadFrom
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEDelegatingEventRouter
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEEvent
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEEventInfo
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEEventMetadata
__ HomeKitEventRouter: _OBJC_CLASS_$_HMELastEventStore
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEMemoryEventBus
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEMessageDatagramClient
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEMessageDatagramServer
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEPersistentConnectionServer
__ HomeKitEventRouter: _OBJC_CLASS_$_HMEProtoEventInfo
__ HomeKitMetrics: _HMMSafeHomeUUIDFromLogEvent
__ HomeKitMetrics: _OBJC_CLASS_$_HMMHomeLogEvent
__ HomeKitMetrics: _OBJC_CLASS_$_HMMIntervalMapper
__ HomeKitMetrics: _OBJC_CLASS_$_HMMLogEvent
__ HomeKitMetrics: _OBJC_METACLASS_$_HMMHomeLogEvent
__ HomeKitMetrics: _OBJC_METACLASS_$_HMMLogEvent
__ IDS: _IDSActivityMonitorPresenceSubActivity
__ IDS: _IDSCopyAddressDestinationForDestination
__ IDS: _IDSCopyIDForBusinessID
__ IDS: _IDSCopyIDForDevice
__ IDS: _IDSCopyIDForEmailAddress
__ IDS: _IDSCopyIDForPhoneNumber
__ IDS: _IDSCopyIDForTokenWithID
__ IDS: _IDSCopyLocalDeviceUniqueID
__ IDS: _IDSCopyRawAddressForDestination
__ IDS: _IDSErrorDomain
__ IDS: _IDSLinkPreferenceOptionInputBytesPerSecondKey
__ IDS: _IDSLinkPreferenceOptionIntent
__ IDS: _IDSLinkPreferenceOptionOutputBytesPerSecondKey
__ IDS: _IDSLinkPreferenceOptionPacketsPerSecondKey
__ IDS: _IDSOpenSocketOptionPriorityKey
__ IDS: _IDSOpenSocketOptionStreamNameKey
__ IDS: _IDSOpenSocketOptionTransportKey
__ IDS: _IDSRegistrationPropertySupportsHomeKitResident
__ IDS: _IDSSendMessageOptionAlwaysSkipSelfKey
__ IDS: _IDSSendMessageOptionFireAndForgetKey
__ IDS: _IDSSendMessageOptionFromIDKey
__ IDS: _IDSSendMessageOptionLiveMessageDeliveryKey
__ IDS: _IDSSendMessageOptionNonWakingKey
__ IDS: _IDSSendMessageOptionPushPriorityKey
__ IDS: _IDSSendMessageOptionQueueOneIdentifierKey
__ IDS: _IDSSendMessageOptionRequireAllRegistrationPropertiesKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _IDSSessionClientUUIDKey
__ IDS: _IDSSessionConnectionCountHintKey
__ IDS: _IDSSessionPreferredAddressFamilyKey
__ IDS: _IDSSessionSingleChannelDirectModeKey
__ IDS: _IDSSessionTransportTypeKey
__ IDS: _OBJC_CLASS_$_IDSAccount
__ IDS: _OBJC_CLASS_$_IDSActivityMonitor
__ IDS: _OBJC_CLASS_$_IDSCurrentServerTime
__ IDS: _OBJC_CLASS_$_IDSDevice
__ IDS: _OBJC_CLASS_$_IDSDeviceConnection
__ IDS: _OBJC_CLASS_$_IDSFirewallEntry
__ IDS: _OBJC_CLASS_$_IDSIDQueryController
__ IDS: _OBJC_CLASS_$_IDSServerBag
__ IDS: _OBJC_CLASS_$_IDSService
__ IDS: _OBJC_CLASS_$_IDSSession
__ IDS: _OBJC_CLASS_$_IDSURI
__ IDS: _kIDSGeneralSpamReportMessageIDKey
__ IDS: _kIDSGeneralSpamReportRecipientURIKey
__ IDS: _kIDSGeneralSpamReportSenderURIKey
__ IDS: _kIDSGeneralSpamReportSpamMessageTypeKey
__ IDS: _kIDSGeneralSpamReportTimeOfMessageKey
__ IDS: _kIDSServiceDefaultsSentinelAlias
__ IDS: _kIDSServiceDefaultsSentinelSelfAlias
__ IOKit: _IOPMAssertionCreateWithDescription
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IOPSDrawingUnlimitedPower
__ ImageIO: _CGImageDestinationAddImage
__ ImageIO: _CGImageDestinationCreateWithData
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceCreateWithURL
__ ImageIO: _kCGImageSourceShouldAllowFloat
__ ImageIO: _kCGImageSourceShouldCache
__ InstallCoordination: _IXStringForAppRemovability
__ InstallCoordination: _OBJC_CLASS_$_IXAppInstallCoordinator
__ Intents: _OBJC_CLASS_$_INControlHomeIntent
__ Intents: _OBJC_CLASS_$_INHomeAction
__ Intents: _OBJC_CLASS_$_INHomeContent
__ Intents: _OBJC_CLASS_$_INHomeFilter
__ Intents: _OBJC_CLASS_$_INInteraction
__ Intents: _OBJC_CLASS_$_INSpeakableString
__ MFAAuthentication: _MFAATokenManagerErrorDomain
__ MFAAuthentication: _OBJC_CLASS_$_MFAACertificateManager
__ MFAAuthentication: _OBJC_CLASS_$_MFAATokenManager
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfile
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ Matter: _MTRErrorDomain
__ MediaExperience: _AVSystemController_UplinkMuteAttribute
__ MediaExperience: _OBJC_CLASS_$_AVSystemController
__ MediaExperience: _kMXSessionProperty_AllowSystemSoundsWhileRecording
__ MediaPlaybackCore: _MPCAssistantErrorIsInformational
__ MediaPlaybackCore: _MPCAssistantMediaRemoteSendCommandErrorDomain
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCAssistantCommand
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCAssistantConnection
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCAssistantDiscovery
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCAssistantRemoteControlDestination
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerPath
__ MediaPlaybackCore: _OBJC_CLASS_$_MPCPlayerRequest
__ MediaPlayer: _OBJC_CLASS_$_MPPlaybackArchive
__ MediaPlayer: _OBJC_CLASS_$_MPRequestResponseController
__ MediaRemote: _MRAVEndpointCopyLocalizedName
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointCopyUniqueIdentifier
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVEndpointGetOutputDeviceUIDVolumeControlCapabilities
__ MediaRemote: _MRAVEndpointSetOutputDeviceUIDVolume
__ MediaRemote: _MRAVOutputDeviceCopyModelID
__ MediaRemote: _MRAVOutputDeviceCopyName
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceGetAVOutputDevice
__ MediaRemote: _MRAVOutputDeviceGetSubtype
__ MediaRemote: _MRAVOutputDeviceSupportsBufferedAirPlay
__ MediaRemote: _MRAVOutputDeviceSupportsHAP
__ MediaRemote: _MRAVReconnaissanceSessionBeginSearch
__ MediaRemote: _MRAVReconnaissanceSessionCancelSearch
__ MediaRemote: _MRAVReconnaissanceSessionCreateWithEndpointFeatures
__ MediaRemote: _MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback
__ MediaRemote: _MRAVRoutingDiscoverySessionCopyAvailableOutputDevices
__ MediaRemote: _MRAVRoutingDiscoverySessionCreate
__ MediaRemote: _MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback
__ MediaRemote: _MRAVRoutingDiscoverySessionSetDiscoveryMode
__ MediaRemote: _MRExternalDeviceConnect
__ MediaRemote: _MRExternalDeviceCopyCustomOrigin
__ MediaRemote: _MRExternalDeviceDisconnect
__ MediaRemote: _MRExternalDeviceGetConnectionState
__ MediaRemote: _MRExternalDeviceSetConnectionStateCallback
__ MediaRemote: _MRExternalDeviceSetWantsNowPlayingUpdates
__ MediaRemote: _MRMediaRemoteErrorIsInformational
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetLocalReceiverPairingIdentity
__ MediaRemote: _MRMediaRemoteGetNowPlayingApplicationPlaybackStateForOrigin
__ MediaRemote: _MRMediaRemoteRegisterForNowPlayingNotifications
__ MediaRemote: _MRMediaRemoteSendCommandForOriginWithReply
__ MediaRemote: _MRMediaRemoteUnregisterForNowPlayingNotifications
__ MediaRemote: _MROriginGetUniqueIdentifier
__ MediaRemote: _MROriginIsLocalOrigin
__ MediaRemote: _OBJC_CLASS_$_MRAVOutputDevice
__ MediaRemote: _kMRMediaRemoteOptionCommandSequenceUUID
__ MediaRemote: _kMRMediaRemoteOriginNowPlayingApplicationPlaybackStateDidChangeNotification
__ MediaRemote: _kMRMediaRemoteOriginUserInfoKey
__ MediaRemote: _kMRMediaRemotePickedRouteVolumeDidChangeNotification
__ MediaRemote: _kMRMediaRemotePickedRouteVolumeUserInfoKey
__ MediaRemote: _kMRMediaRemotePlaybackStateUserInfoKey
__ MobileAsset: _ASAttributeCompatibilityVersion
__ MobileAsset: _ASAttributeContentVersion
__ MobileAsset: _OBJC_CLASS_$_MAAsset
__ MobileAsset: _OBJC_CLASS_$_MAAssetQuery
__ MobileAsset: _OBJC_CLASS_$_MADownloadOptions
__ MobileKeyBag: _MKBDeviceGetGracePeriod
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ MobileKeyBag: _MKBGetDeviceLockState
__ NanoRegistry: _NRWatchOSVersion
__ NetAppsUtilities: _NAEmptyResult
__ NetAppsUtilities: _OBJC_CLASS_$_NAFuture
__ NetAppsUtilities: _OBJC_CLASS_$_NAPromise
__ NetAppsUtilities: _OBJC_CLASS_$_NAScheduler
__ Network: __nw_content_context_default_message
__ Network: __nw_parameters_configure_protocol_default_configuration
__ Network: __nw_parameters_configure_protocol_disable
__ Network: _nw_connection_cancel
__ Network: _nw_connection_create
__ Network: _nw_connection_receive
__ Network: _nw_connection_receive_message
__ Network: _nw_connection_reset_traffic_class
__ Network: _nw_connection_send
__ Network: _nw_connection_set_queue
__ Network: _nw_connection_set_read_close_handler
__ Network: _nw_connection_set_state_changed_handler
__ Network: _nw_connection_start
__ Network: _nw_context_create
__ Network: _nw_context_set_isolate_protocol_stack
__ Network: _nw_context_set_scheduling_mode
__ Network: _nw_endpoint_create_host_with_numeric_port
__ Network: _nw_error_copy_cf_error
__ Network: _nw_parameters_create_secure_tcp
__ Network: _nw_parameters_set_context
__ Network: _nw_parameters_set_data_mode
__ Network: _nw_path_create_default_evaluator
__ Network: _nw_path_evaluator_copy_path
__ Network: _nw_path_uses_interface_type
__ PairedSync: _OBJC_CLASS_$_PSYSyncCoordinator
__ PassKitCore: _OBJC_CLASS_$_PKAddHomeKeyPassConfiguration
__ PassKitCore: _OBJC_CLASS_$_PKAssertion
__ PassKitCore: _OBJC_CLASS_$_PKExpressPassInformation
__ PassKitCore: _OBJC_CLASS_$_PKFileDataAccessor
__ PassKitCore: _OBJC_CLASS_$_PKPass
__ PassKitCore: _OBJC_CLASS_$_PKPassLibrary
__ PassKitCore: _OBJC_CLASS_$_PKPaymentPass
__ PassKitCore: _OBJC_CLASS_$_PKPaymentService
__ PassKitCore: _OBJC_CLASS_$_PKSecureElement
__ PassKitCore: _OBJC_CLASS_$_PKWalletVisibility
__ PassKitCore: _PKPassLibraryAddedPassesUserInfoKey
__ PassKitCore: _PKPassLibraryCanAddPassChangeNotification
__ PassKitCore: _PKPassLibraryDidChangeNotification
__ PassKitCore: _PKPassLibraryPassTypeIdentifierUserInfoKey
__ PassKitCore: _PKPassLibraryRemovedPassInfosUserInfoKey
__ PassKitCore: _PKPassLibrarySerialNumberUserInfoKey
__ Photos: _OBJC_CLASS_$_PHFace
__ Photos: _OBJC_CLASS_$_PHFaceCrop
__ Photos: _OBJC_CLASS_$_PHFetchResult
__ Photos: _OBJC_CLASS_$_PHPerson
__ Photos: _OBJC_CLASS_$_PHPhotoLibrary
__ Photos: _PHInsertedLocalIdentifiersKey
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteDoubleField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteInt64Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ QuartzCore: _CARenderServerGetServerPort
__ QuartzCore: _OBJC_CLASS_$_CAContext
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ Rapport: _OBJC_CLASS_$_RPClient
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkClient
__ Rapport: _OBJC_CLASS_$_RPCompanionLinkDevice
__ Rapport: _RPOptionPeerHomeKitUserIdentifier
__ Rapport: _RPOptionSenderIDSDeviceID
__ Rapport: _RPOptionTimeoutSeconds
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessHandle
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessIdentifier
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessMonitor
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessPredicate
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessStateDescriptor
__ SAObjects: _AceObjectAceIdPlistKey
__ SAObjects: _OBJC_CLASS_$_SAHAAction
__ SAObjects: _OBJC_CLASS_$_SAHAActionRequest
__ SAObjects: _OBJC_CLASS_$_SAHAActionResult
__ SAObjects: _OBJC_CLASS_$_SAHAAttributeValue
__ SAObjects: _OBJC_CLASS_$_SAHABooleanValue
__ SAObjects: _OBJC_CLASS_$_SAHACommand
__ SAObjects: _OBJC_CLASS_$_SAHACommandCompleted
__ SAObjects: _OBJC_CLASS_$_SAHACurrentHome
__ SAObjects: _OBJC_CLASS_$_SAHAEntity
__ SAObjects: _OBJC_CLASS_$_SAHAFilter
__ SAObjects: _OBJC_CLASS_$_SAHAFloatValue
__ SAObjects: _OBJC_CLASS_$_SAHAIdentifierListFilter
__ SAObjects: _OBJC_CLASS_$_SAHAIntegerValue
__ SAObjects: _OBJC_CLASS_$_SAHASceneAction
__ SAObjects: _OBJC_CLASS_$_SAHASearchCriteriaFilter
__ SAObjects: _OBJC_CLASS_$_SAHAStringValue
__ SAObjects: _OBJC_METACLASS_$_SAHACommand
__ SAObjects: _SAHAActionActionTypePListKey
__ SAObjects: _SAHAActionAttributePListKey
__ SAObjects: _SAHAActionOutcomeALREADY_AT_MAX_VALUEValue
__ SAObjects: _SAHAActionOutcomeALREADY_AT_MIN_VALUEValue
__ SAObjects: _SAHAActionOutcomeBLUETOOTH_WAKEUPValue
__ SAObjects: _SAHAActionOutcomeBRIDGED_ACCESSORY_UNREACHABLEValue
__ SAObjects: _SAHAActionOutcomeFAILUREValue
__ SAObjects: _SAHAActionOutcomeFOUND_NO_MATCHING_ENTITIESValue
__ SAObjects: _SAHAActionOutcomeIN_PROGRESSValue
__ SAObjects: _SAHAActionOutcomeLARGER_THAN_MAX_VALUEValue
__ SAObjects: _SAHAActionOutcomeNO_REMOTE_ACCESSValue
__ SAObjects: _SAHAActionOutcomeREAD_ONLYValue
__ SAObjects: _SAHAActionOutcomeREQUIRES_UNLOCKValue
__ SAObjects: _SAHAActionOutcomeSCENE_NOT_SET_UPValue
__ SAObjects: _SAHAActionOutcomeSECURED_ACCESS_DENIEDValue
__ SAObjects: _SAHAActionOutcomeSECURING_FAILUREValue
__ SAObjects: _SAHAActionOutcomeSET_TO_MAX_VALUEValue
__ SAObjects: _SAHAActionOutcomeSET_TO_MIN_VALUEValue
__ SAObjects: _SAHAActionOutcomeSMALLER_THAN_MIN_VALUEValue
__ SAObjects: _SAHAActionOutcomeSUCCESSValue
__ SAObjects: _SAHAActionOutcomeUNREACHABLEValue
__ SAObjects: _SAHAActionRequestActionsPListKey
__ SAObjects: _SAHAActionRequestExecutionOrderPListKey
__ SAObjects: _SAHAActionResultEntityPListKey
__ SAObjects: _SAHAActionResultOutcomePListKey
__ SAObjects: _SAHAActionResultRequestActionIdPListKey
__ SAObjects: _SAHAActionResultResultAttributePListKey
__ SAObjects: _SAHAActionResultResultValuePListKey
__ SAObjects: _SAHAActionTypeDECREASEValue
__ SAObjects: _SAHAActionTypeGETValue
__ SAObjects: _SAHAActionTypeGET_MAXIMUMValue
__ SAObjects: _SAHAActionTypeGET_MINIMUMValue
__ SAObjects: _SAHAActionTypeGET_STEP_VALUEValue
__ SAObjects: _SAHAActionTypeGET_TARGET_VALUEValue
__ SAObjects: _SAHAActionTypeINCREASEValue
__ SAObjects: _SAHAActionTypeSETValue
__ SAObjects: _SAHAActionTypeSET_TO_MAXIMUMValue
__ SAObjects: _SAHAActionTypeSET_TO_MINIMUMValue
__ SAObjects: _SAHAActionTypeTOGGLEValue
__ SAObjects: _SAHAActionValuePListKey
__ SAObjects: _SAHAAttributeADAPTIVE_LIGHTINGValue
__ SAObjects: _SAHAAttributeCOLOR_VALUEValue
__ SAObjects: _SAHAAttributeCOOLINGValue
__ SAObjects: _SAHAAttributeCOOLING_THRESHOLDValue
__ SAObjects: _SAHAAttributeENABLEDValue
__ SAObjects: _SAHAAttributeHEATINGValue
__ SAObjects: _SAHAAttributeHEATING_THRESHOLDValue
__ SAObjects: _SAHAAttributeIN_USEValue
__ SAObjects: _SAHAAttributeMEDIAValue
__ SAObjects: _SAHAAttributePARTICULATE_MATTER_10_DENSITYValue
__ SAObjects: _SAHAAttributePARTICULATE_MATTER_2_5_DENSITYValue
__ SAObjects: _SAHAAttributePOWERValue
__ SAObjects: _SAHAAttributeTEMPERATUREValue
__ SAObjects: _SAHAAttributeValueUnitsPListKey
__ SAObjects: _SAHABooleanValueClassIdentifier
__ SAObjects: _SAHACommandActionRequestsPListKey
__ SAObjects: _SAHACommandActionsPListKey
__ SAObjects: _SAHACommandCommandTimeoutPListKey
__ SAObjects: _SAHACommandCompletedClientValidityPListKey
__ SAObjects: _SAHACommandCompletedCommandOutcomePListKey
__ SAObjects: _SAHACommandCompletedHomeIdentifierPListKey
__ SAObjects: _SAHACommandCompletedServerValidityPListKey
__ SAObjects: _SAHACommandFilterPListKey
__ SAObjects: _SAHACommandOutcomeCOMMAND_FAILUREValue
__ SAObjects: _SAHACommandOutcomeCOMMAND_SUCCESSValue
__ SAObjects: _SAHACommandOutcomeFOUND_NO_MATCHING_ENTITIESValue
__ SAObjects: _SAHACommandOutcomeINCOMPLETE_SYNC_DATAValue
__ SAObjects: _SAHACommandOutcomeREMOTE_ACCESS_NOT_SETUPValue
__ SAObjects: _SAHACommandOutcomeREQUIRES_UNLOCKValue
__ SAObjects: _SAHACommandOutcomeSCENE_IN_PROGRESSValue
__ SAObjects: _SAHACommandOutcomeSCENE_NOT_SET_UPValue
__ SAObjects: _SAHACommandOutcomeSCENE_PARTIAL_FAILUREValue
__ SAObjects: _SAHACommandOutcomeSCENE_SECURING_FAILUREValue
__ SAObjects: _SAHACommandOutcomeSECURED_ACCESS_DENIEDValue
__ SAObjects: _SAHACommandServerValidityPListKey
__ SAObjects: _SAHAEntityAccessoryIdentifierPListKey
__ SAObjects: _SAHAEntityAccessoryPListKey
__ SAObjects: _SAHAEntityAttributesPListKey
__ SAObjects: _SAHAEntityCurrentDevicePListKey
__ SAObjects: _SAHAEntityEntityTypePListKey
__ SAObjects: _SAHAEntityHashedRouteUIDPListKey
__ SAObjects: _SAHAEntityHomeIdentifierPListKey
__ SAObjects: _SAHAEntityHomePListKey
__ SAObjects: _SAHAEntityNamePListKey
__ SAObjects: _SAHAEntityRoomIdentifierPListKey
__ SAObjects: _SAHAEntityRoomPListKey
__ SAObjects: _SAHAEntitySceneTypePListKey
__ SAObjects: _SAHAEntityServiceGroupIdentifiersPListKey
__ SAObjects: _SAHAEntityServiceGroupPListKey
__ SAObjects: _SAHAEntityServiceSubTypePListKey
__ SAObjects: _SAHAEntityServiceTypePListKey
__ SAObjects: _SAHAEntityStatusPListKey
__ SAObjects: _SAHAEntityStatusSCENE_INCLUDES_MUSICValue
__ SAObjects: _SAHAEntityStatusSCENE_INCLUDES_SECURING_ACTIONSValue
__ SAObjects: _SAHAEntityStatusSCENE_INCLUDES_UNSECURING_ACTIONSValue
__ SAObjects: _SAHAEntityStatusSCENE_NOT_SETUPValue
__ SAObjects: _SAHAEntityTargetAttributesPListKey
__ SAObjects: _SAHAEntityTypeACCESSORYValue
__ SAObjects: _SAHAEntityTypeGROUPValue
__ SAObjects: _SAHAEntityTypeHOMEValue
__ SAObjects: _SAHAEntityTypeROOMValue
__ SAObjects: _SAHAEntityTypeSCENEValue
__ SAObjects: _SAHAEntityTypeSERVICEValue
__ SAObjects: _SAHAEntityTypeZONEValue
__ SAObjects: _SAHAEntityZoneIdentifiersPListKey
__ SAObjects: _SAHAEntityZonePListKey
__ SAObjects: _SAHAFloatValueClassIdentifier
__ SAObjects: _SAHAGroupTypeHOME_THEATERValue
__ SAObjects: _SAHAGroupTypeMEDIA_SYSTEMValue
__ SAObjects: _SAHAGroupTypeSERVICE_GROUPValue
__ SAObjects: _SAHAIdentifierListFilterIdentifiersPListKey
__ SAObjects: _SAHAIntegerValueClassIdentifier
__ SAObjects: _SAHASceneTypeGOOD_MORNINGValue
__ SAObjects: _SAHASceneTypeGOOD_NIGHTValue
__ SAObjects: _SAHASceneTypeIM_HOMEValue
__ SAObjects: _SAHASceneTypeIM_LEAVINGValue
__ SAObjects: _SAHASceneTypeUSER_DEFINEDValue
__ SAObjects: _SAHASearchCriteriaFilterAccessoryIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterAccessoryNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterAttributePListKey
__ SAObjects: _SAHASearchCriteriaFilterEntityTypePListKey
__ SAObjects: _SAHASearchCriteriaFilterGroupNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterHomeIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterHomeNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterRoomIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterRoomNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterSceneIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterSceneNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterSceneTypePListKey
__ SAObjects: _SAHASearchCriteriaFilterServiceGroupIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterServiceIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterServiceNamePListKey
__ SAObjects: _SAHASearchCriteriaFilterServiceTypePListKey
__ SAObjects: _SAHASearchCriteriaFilterZoneIdentifierPListKey
__ SAObjects: _SAHASearchCriteriaFilterZoneNamePListKey
__ SAObjects: _SAHAServiceSubTypeAIRPLAY_2Value
__ SAObjects: _SAHAServiceSubTypeAIR_CONDITIONER_FANValue
__ SAObjects: _SAHAServiceSubTypeAIR_PURIFIER_FANValue
__ SAObjects: _SAHAServiceSubTypeCIRCULATION_FANValue
__ SAObjects: _SAHAServiceSubTypeCLIMATE_TEMPERATURE_CONTROLLERValue
__ SAObjects: _SAHAServiceSubTypeDOORValue
__ SAObjects: _SAHAServiceSubTypeGARAGE_DOORValue
__ SAObjects: _SAHAServiceSubTypeGENERIC_FAUCETValue
__ SAObjects: _SAHAServiceSubTypeHORSEMANValue
__ SAObjects: _SAHAServiceSubTypeHORSEMAN_STEREO_PAIRValue
__ SAObjects: _SAHAServiceSubTypeHUMIDIFIER_DEHUMIDIFIER_FANValue
__ SAObjects: _SAHAServiceSubTypeIRRIGATIONValue
__ SAObjects: _SAHAServiceSubTypeLIGHTBULBValue
__ SAObjects: _SAHAServiceSubTypeSHOWER_HEADValue
__ SAObjects: _SAHAServiceSubTypeVENTILATION_FANValue
__ SAObjects: _SAHAServiceSubTypeWATER_FAUCETValue
__ SAObjects: _SAHAServiceSubTypeWATER_TEMPERATURE_CONTROLLERValue
__ SAObjects: _SAHAServiceSubTypeWINDOWValue
__ SAObjects: _SAHAServiceSubTypeWINDOW_COVERINGValue
__ SAObjects: _SAHAServiceTypeAIRPORT_EXRESSValue
__ SAObjects: _SAHAServiceTypeAPPLE_TVValue
__ SAObjects: _SAHAServiceTypeCUSTOMValue
__ SAObjects: _SAHAServiceTypeIP_CAMERAValue
__ SAObjects: _SAHAServiceTypeIRRIGATION_SYSTEMValue
__ SAObjects: _SAHAServiceTypeSPEAKERValue
__ SAObjects: _SAHAServiceTypeVALVEValue
__ SAObjects: _SAHAStringValueClassIdentifier
__ SAObjects: _SAHAValueUnitsFAHRENHEITValue
__ Security: _SOSCCIsHomeKitSyncing
__ Security: _SOSCCIsIcloudKeychainSyncing
__ Security: _SecCertificateCreateWithData
__ Security: _SecKeyCopyExternalRepresentation
__ Security: _SecKeyCreateRandomKey
__ Security: _SecKeyVerifySignature
__ Security: _SecPasswordGenerate
__ Security: _SecPolicyCreateAppleHomeKitServerAuth
__ Security: _SecPolicyCreateApplePinned
__ Security: _SecRandomCopyBytes
__ Security: _SecTrustCopyPublicKey
__ Security: _SecTrustCreateWithCertificates
__ Security: _SecTrustEvaluate
__ Security: _SecTrustEvaluateWithError
__ Security: _SecTrustGetCertificateAtIndex
__ Security: _SecTrustGetCertificateCount
__ Security: _kSOSCCCircleChangedNotification
__ Security: _kSOSCCViewMembershipChangedNotification
__ Security: _kSecAttrKeySizeInBits
__ Security: _kSecAttrKeyType
__ Security: _kSecAttrKeyTypeECSECPrimeRandom
__ Security: _kSecKeyAlgorithmECDSASignatureDigestX962SHA256
__ Security: _kSecRandomDefault
__ Sharing: _OBJC_CLASS_$_SFClient
__ Sharing: _OBJC_CLASS_$_SFDeviceDiscovery
__ SoftLinking: __sl_dlopen
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertConfigurationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandle
__ SpringBoardServices: _SBUserNotificationAlternateButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationDefaultButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationDontDismissOnUnlock
__ StreamingZip: _OBJC_CLASS_$_SZExtractor
__ StreamingZip: _SZArchiverCreateStreamableZip
__ StreamingZip: _SZExtractorHashTypeSHA1
__ StreamingZip: _SZExtractorHashTypeSHA224
__ StreamingZip: _SZExtractorHashTypeSHA256
__ StreamingZip: _SZExtractorHashTypeSHA384
__ StreamingZip: _SZExtractorHashTypeSHA512
__ StreamingZip: _SZExtractorOptionsDenyInvalidSymlinks
__ StreamingZip: _SZExtractorOptionsHashType
__ StreamingZip: _SZExtractorOptionsHashedChunkSize
__ StreamingZip: _SZExtractorOptionsHashesArray
__ StreamingZip: _kSZArchiverCompressionMethodDEFLATE
__ StreamingZip: _kSZArchiverOptionCompressionMethod
__ SymptomDiagnosticReporter: _OBJC_CLASS_$_SDRDiagnosticReporter
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureContext
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignaturePID
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureSubTypeContext
__ SymptomDiagnosticReporter: _kSymptomDiagnosticSignatureThresholdValues
__ SymptomDiagnosticReporter: _kSymptomDiagnosticTypeFunctional
__ SymptomDiagnosticReporter: _kSymptomDiagnosticTypePerformance
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _SCError
__ SystemConfiguration: _kSCCompAnyRegex
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCEntNetLink
__ SystemStatus: _OBJC_CLASS_$_STDynamicActivityAttributionPublisher
__ TCC: _TCCAccessCheckAuditToken
__ TCC: _kTCCServiceMicrophone
__ TCC: _kTCCServiceWillow
__ ThreadNetwork: _OBJC_CLASS_$_THClient
__ UserManagement: _OBJC_CLASS_$_UMUserManager
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotificationAction
__ UserNotifications: _OBJC_CLASS_$_UNNotificationActionIcon
__ UserNotifications: _OBJC_CLASS_$_UNNotificationAttachment
__ UserNotifications: _OBJC_CLASS_$_UNNotificationCategory
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNNotificationSound
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ UserNotifications: _UNNotificationDismissActionIdentifier
__ VoiceShortcutClient: _OBJC_CLASS_$_VCVoiceShortcutClient
__ WirelessDiagnostics: _AWDPostMetric
__ WirelessDiagnostics: _OBJC_CLASS_$_AWDServerConnection
__ libMemoryResourceException.dylib: _MREExceptionTypeToString
__ libMemoryResourceException.dylib: _ReportMemoryExceptionFromTask
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetProductType
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: _CC_SHA1_Final
__ libSystem.B.dylib: _CC_SHA1_Init
__ libSystem.B.dylib: _CC_SHA1_Update
__ libSystem.B.dylib: _CC_SHA256
__ libSystem.B.dylib: _CC_SHA256_Final
__ libSystem.B.dylib: _CC_SHA256_Init
__ libSystem.B.dylib: _CC_SHA256_Update
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: _NEHelperCacheClearUUIDs
__ libSystem.B.dylib: _NEHelperCacheCopyAppUUIDMapping
__ libSystem.B.dylib: _NEHelperCacheCopySigningIdentifierMapping
__ libSystem.B.dylib: _XPC_ACTIVITY_ALLOW_BATTERY
__ libSystem.B.dylib: _XPC_ACTIVITY_CHECK_IN
__ libSystem.B.dylib: _XPC_ACTIVITY_DELAY
__ libSystem.B.dylib: _XPC_ACTIVITY_EXPECTED_DURATION
__ libSystem.B.dylib: _XPC_ACTIVITY_GRACE_PERIOD
__ libSystem.B.dylib: _XPC_ACTIVITY_GROUP_CONCURRENCY_LIMIT
__ libSystem.B.dylib: _XPC_ACTIVITY_GROUP_NAME
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_1_DAY
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_1_MIN
__ libSystem.B.dylib: _XPC_ACTIVITY_INTERVAL_7_DAYS
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD
__ libSystem.B.dylib: _XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_UPLOAD
__ libSystem.B.dylib: _XPC_ACTIVITY_POWER_NAP
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_MAINTENANCE
__ libSystem.B.dylib: _XPC_ACTIVITY_PRIORITY_UTILITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REPEATING
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY
__ libSystem.B.dylib: _XPC_ACTIVITY_SHOULD_WAKE_DEVICE
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_signature
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_write
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_event_key_name
__ libSystem.B.dylib: __xpc_type_array
__ libSystem.B.dylib: __xpc_type_connection
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uuid
__ libSystem.B.dylib: _abort_report_np
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _atoll
__ libSystem.B.dylib: _bind
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _cchkdf
__ libSystem.B.dylib: _ccsha512_di
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _csops_audittoken
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_data_create
__ libSystem.B.dylib: _dispatch_data_create_concat
__ libSystem.B.dylib: _dispatch_data_create_map
__ libSystem.B.dylib: _dispatch_data_create_subrange
__ libSystem.B.dylib: _dispatch_data_get_size
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_qos_class_fallback
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dispatch_workloop_create
__ libSystem.B.dylib: _dispatch_workloop_create_inactive
__ libSystem.B.dylib: _dispatch_workloop_set_autorelease_frequency
__ libSystem.B.dylib: _dispatch_workloop_set_cpupercent
__ libSystem.B.dylib: _dispatch_workloop_set_scheduler_priority
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeifaddrs
__ libSystem.B.dylib: _getifaddrs
__ libSystem.B.dylib: _getpeername
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getsockname
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _in6addr_any
__ libSystem.B.dylib: _inet_ntop
__ libSystem.B.dylib: _inet_pton
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log2
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memorystatus_control
__ libSystem.B.dylib: _memset_s
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_is_valid_token
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_state_add_handler
__ libSystem.B.dylib: _os_state_remove_handler
__ libSystem.B.dylib: _os_unfair_lock_assert_not_owner
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock_with_options
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_unfair_recursive_lock_lock_with_options
__ libSystem.B.dylib: _os_unfair_recursive_lock_unlock
__ libSystem.B.dylib: _proc_pid_rusage
__ libSystem.B.dylib: _proc_reset_footprint_interval
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _recvfrom
__ libSystem.B.dylib: _send
__ libSystem.B.dylib: _setenv
__ libSystem.B.dylib: _setsockopt
__ libSystem.B.dylib: _socket
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlcpy
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _task_generate_corpse
__ libSystem.B.dylib: _unlink
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libSystem.B.dylib: _xpc_activity_copy_criteria
__ libSystem.B.dylib: _xpc_activity_get_state
__ libSystem.B.dylib: _xpc_activity_register
__ libSystem.B.dylib: _xpc_activity_set_criteria
__ libSystem.B.dylib: _xpc_activity_set_state
__ libSystem.B.dylib: _xpc_activity_should_defer
__ libSystem.B.dylib: _xpc_activity_unregister
__ libSystem.B.dylib: _xpc_array_apply
__ libSystem.B.dylib: _xpc_bool_get_value
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_copy_entitlement_value
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_connection_suspend
__ libSystem.B.dylib: _xpc_date_create
__ libSystem.B.dylib: _xpc_date_get_value
__ libSystem.B.dylib: _xpc_dictionary_apply
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_create_empty
__ libSystem.B.dylib: _xpc_dictionary_create_reply
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_send_reply
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_date
__ libSystem.B.dylib: _xpc_dictionary_set_fd
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_set_event
__ libSystem.B.dylib: _xpc_set_event_stream_handler
__ libSystem.B.dylib: _xpc_string_get_length
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uuid_get_bytes
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_addMethod
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x10
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x2
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_removeAssociatedObjects
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x10
__ libobjc.A.dylib: _objc_retain_x11
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x6
__ libobjc.A.dylib: _objc_retain_x7
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libsqlite3.dylib: _sqlite3_bind_blob64
__ libsqlite3.dylib: _sqlite3_bind_int64
__ libsqlite3.dylib: _sqlite3_bind_null
__ libsqlite3.dylib: _sqlite3_bind_parameter_count
__ libsqlite3.dylib: _sqlite3_bind_parameter_name
__ libsqlite3.dylib: _sqlite3_bind_text
__ libsqlite3.dylib: _sqlite3_bind_zeroblob
__ libsqlite3.dylib: _sqlite3_close
__ libsqlite3.dylib: _sqlite3_column_blob
__ libsqlite3.dylib: _sqlite3_column_bytes
__ libsqlite3.dylib: _sqlite3_column_count
__ libsqlite3.dylib: _sqlite3_column_double
__ libsqlite3.dylib: _sqlite3_column_int64
__ libsqlite3.dylib: _sqlite3_column_text
__ libsqlite3.dylib: _sqlite3_column_type
__ libsqlite3.dylib: _sqlite3_config
__ libsqlite3.dylib: _sqlite3_db_handle
__ libsqlite3.dylib: _sqlite3_errcode
__ libsqlite3.dylib: _sqlite3_errmsg
__ libsqlite3.dylib: _sqlite3_exec
__ libsqlite3.dylib: _sqlite3_finalize
__ libsqlite3.dylib: _sqlite3_get_autocommit
__ libsqlite3.dylib: _sqlite3_initialize
__ libsqlite3.dylib: _sqlite3_last_insert_rowid
__ libsqlite3.dylib: _sqlite3_open_v2
__ libsqlite3.dylib: _sqlite3_prepare_v2
__ libsqlite3.dylib: _sqlite3_reset
__ libsqlite3.dylib: _sqlite3_sql
__ libsqlite3.dylib: _sqlite3_step
__ libz.1.dylib: _deflate
__ libz.1.dylib: _deflateBound
__ libz.1.dylib: _deflateEnd
__ libz.1.dylib: _deflateInit2_
__ libz.1.dylib: _inflate
__ libz.1.dylib: _inflateEnd
__ libz.1.dylib: _inflateInit2_
HMDTimer : NSObject <HMDTimerProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDTimer timerWithTimeInterval:options:]


HMDAccessoryTransaction : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSString *configuredName
 @property  NSString *providedName
 @property  NSNumber *accessoryCategory
 @property  NSString *identifier
 @property  NSString *roomUUID
 @property  NSString *hostAccessoryUUID
 @property  NSString *model
 @property  NSString *manufacturer
 @property  NSString *firmwareVersion
 @property  NSString *serialNumber
 @property  NSString *configurationAppIdentifier
 @property  NSNumber *networkClientIdentifier
 @property  NSString *networkRouterUUID
 @property  NSNumber *currentNetworkProtectionMode
 @property  NSNumber *networkClientLAN
 @property  NSString *networkClientProfileFingerprint
 @property  NSData *wiFiUniquePreSharedKey
 @property  NSNumber *wiFiCredentialType
 @property  NSArray *appliedFirewallWANRules
 @property  NSNumber *lastNetworkAccessViolationOccurrenceSince1970
 @property  NSNumber *lastNetworkAccessViolationResetSince1970
 @property  NSString *configuredNetworkProtectionGroupUUIDString
 @property  NSString *pendingConfigurationIdentifier
 @property  NSObject<OS_dispatch_group> *configurationTracker
 @property  NSNumber *suspendCapable
 @property  NSString *primaryProfileVersion
 @property  NSString *productData
 @property  NSString *productDataV2
 @property  NSString *initialManufacturer
 @property  NSString *initialModel
 @property  NSNumber *initialCategoryIdentifier
 @property  HMDUserManagementOperationTimestamp *sharedAdminAddedTimestamp
 @property  HMDUserManagementOperationTimestamp *pairingsAuditedTimestamp
 @property  NSUUID *preferredMediaUserUUID
 @property  NSNumber *preferredUserSelectionType

  // class methods
  +[HMDAccessoryTransaction properties]

  // instance methods
  -[HMDAccessoryTransaction .cxx_destruct]
  -[HMDAccessoryTransaction dependentUUIDs]
  -[HMDAccessoryTransaction configuredNetworkProtectionGroupUUIDString]
  -[HMDAccessoryTransaction setConfiguredNetworkProtectionGroupUUIDString:]
  -[HMDAccessoryTransaction configurationTracker]
  -[HMDAccessoryTransaction setConfigurationTracker:]


HMDDate : NSObject <HMDDateProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDDate timeIntervalSince1970]


HMDIDSDate : NSObject <HMDDateProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDIDSDate timeIntervalSince1970]


AWDHomeKitRemoteSession : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDeviceType
 @property  unsigned int deviceType
 @property  BOOL hasRole
 @property  unsigned int role
 @property  BOOL hasDuration
 @property  unsigned long duration
 @property  BOOL hasCloseReason
 @property  unsigned int closeReason
 @property  BOOL hasErrorCode
 @property  int errorCode

  // instance methods
  -[AWDHomeKitRemoteSession hasErrorCode]
  -[AWDHomeKitRemoteSession setErrorCode:]
  -[AWDHomeKitRemoteSession errorCode]
  -[AWDHomeKitRemoteSession setDuration:]
  -[AWDHomeKitRemoteSession setTimestamp:]
  -[AWDHomeKitRemoteSession hasDuration]
  -[AWDHomeKitRemoteSession copyTo:]
  -[AWDHomeKitRemoteSession role]
  -[AWDHomeKitRemoteSession hasDeviceType]
  -[AWDHomeKitRemoteSession setHasErrorCode:]
  -[AWDHomeKitRemoteSession deviceType]
  -[AWDHomeKitRemoteSession duration]
  -[AWDHomeKitRemoteSession mergeFrom:]
  -[AWDHomeKitRemoteSession setHasTimestamp:]
  -[AWDHomeKitRemoteSession setRole:]
  -[AWDHomeKitRemoteSession dictionaryRepresentation]
  -[AWDHomeKitRemoteSession hasTimestamp]
  -[AWDHomeKitRemoteSession copyWithZone:]
  -[AWDHomeKitRemoteSession timestamp]
  -[AWDHomeKitRemoteSession closeReason]
  -[AWDHomeKitRemoteSession readFrom:]
  -[AWDHomeKitRemoteSession setHasDeviceType:]
  -[AWDHomeKitRemoteSession setHasDuration:]
  -[AWDHomeKitRemoteSession setDeviceType:]
  -[AWDHomeKitRemoteSession writeTo:]
  -[AWDHomeKitRemoteSession isEqual:]
  -[AWDHomeKitRemoteSession setHasRole:]
  -[AWDHomeKitRemoteSession hasRole]
  -[AWDHomeKitRemoteSession setCloseReason:]
  -[AWDHomeKitRemoteSession setHasCloseReason:]
  -[AWDHomeKitRemoteSession hasCloseReason]


HMDNetworkRouterFirewallRuleLANDynamic : HMDNetworkRouterFirewallRuleLAN
 @property  unsigned char transportProtocol
 @property  unsigned char advertisingProtocol
 @property  BOOL advertisingOnly
 @property  NSString *serviceType

  // class methods
  +[HMDNetworkRouterFirewallRuleLANDynamic __advertisingProtocolToString:]
  +[HMDNetworkRouterFirewallRuleLANDynamic __decodeAdvertisingProtocol:advertisingProtocol:error:]
  +[HMDNetworkRouterFirewallRuleLANDynamic __decodeFlags:advertisingOnly:error:]
  +[HMDNetworkRouterFirewallRuleLANDynamic __decodeServiceType:serviceType:error:]
  +[HMDNetworkRouterFirewallRuleLANDynamic createWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:ruleDictionary:error:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleLANDynamic attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleLANDynamic .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleLANDynamic transportProtocol]
  -[HMDNetworkRouterFirewallRuleLANDynamic serviceType]
  -[HMDNetworkRouterFirewallRuleLANDynamic isEqual:]
  -[HMDNetworkRouterFirewallRuleLANDynamic prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleLANDynamic initWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:transportProtocol:advertisingProtocol:advertisingOnly:serviceType:]
  -[HMDNetworkRouterFirewallRuleLANDynamic advertisingProtocol]
  -[HMDNetworkRouterFirewallRuleLANDynamic isAdvertisingOnly]


AWDHomeKitCameraUserSettings : PBCodable <NSCopying>
 @property  BOOL hasIsSharingFaceClassificationsEnabled
 @property  BOOL isSharingFaceClassificationsEnabled
 @property  BOOL hasIsImportingFromPhotoLibraryEnabled
 @property  BOOL isImportingFromPhotoLibraryEnabled
 @property  BOOL hasIsOwner
 @property  BOOL isOwner

  // instance methods
  -[AWDHomeKitCameraUserSettings copyTo:]
  -[AWDHomeKitCameraUserSettings mergeFrom:]
  -[AWDHomeKitCameraUserSettings dictionaryRepresentation]
  -[AWDHomeKitCameraUserSettings copyWithZone:]
  -[AWDHomeKitCameraUserSettings readFrom:]
  -[AWDHomeKitCameraUserSettings writeTo:]
  -[AWDHomeKitCameraUserSettings isEqual:]
  -[AWDHomeKitCameraUserSettings isOwner]
  -[AWDHomeKitCameraUserSettings setIsOwner:]
  -[AWDHomeKitCameraUserSettings isImportingFromPhotoLibraryEnabled]
  -[AWDHomeKitCameraUserSettings isSharingFaceClassificationsEnabled]
  -[AWDHomeKitCameraUserSettings setIsSharingFaceClassificationsEnabled:]
  -[AWDHomeKitCameraUserSettings setHasIsSharingFaceClassificationsEnabled:]
  -[AWDHomeKitCameraUserSettings hasIsSharingFaceClassificationsEnabled]
  -[AWDHomeKitCameraUserSettings setIsImportingFromPhotoLibraryEnabled:]
  -[AWDHomeKitCameraUserSettings setHasIsImportingFromPhotoLibraryEnabled:]
  -[AWDHomeKitCameraUserSettings hasIsImportingFromPhotoLibraryEnabled]
  -[AWDHomeKitCameraUserSettings setHasIsOwner:]
  -[AWDHomeKitCameraUserSettings hasIsOwner]


HMDSettingValueSelectionItem : NSObject
 @property  NSUUID *identifier
 @property  NSString *selection

  // instance methods
  -[HMDSettingValueSelectionItem selection]
  -[HMDSettingValueSelectionItem identifier]
  -[HMDSettingValueSelectionItem .cxx_destruct]
  -[HMDSettingValueSelectionItem isEqual:]
  -[HMDSettingValueSelectionItem initWithIdentifier:selection:]


HMDSetting : NSObject <HMDSettingBaseProtocol>
 @property  BOOL readOnly
 @property  NSNumber *type
 @property  NSNumber *properties
 @property  HMSettingValue *internalValue
 @property  NSMutableArray *constraints
 @property  NSUUID *parentIdentifier
 @property  NSUUID *identifier
 @property  id value
 @property  NSString *name
 @property  NSString *keyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSetting supportsSecureCoding]
  +[HMDSetting logCategory]
  +[HMDSetting settingValueWithModel:]

  // instance methods
  -[HMDSetting isReadOnly]
  -[HMDSetting setProperties:]
  -[HMDSetting parentIdentifier]
  -[HMDSetting setReadOnly:]
  -[HMDSetting initWithModel:]
  -[HMDSetting identifier]
  -[HMDSetting logIdentifier]
  -[HMDSetting properties]
  -[HMDSetting encodeWithCoder:]
  -[HMDSetting type]
  -[HMDSetting setConstraints:]
  -[HMDSetting .cxx_destruct]
  -[HMDSetting keyPath]
  -[HMDSetting setType:]
  -[HMDSetting value]
  -[HMDSetting name]
  -[HMDSetting setKeyPath:]
  -[HMDSetting constraints]
  -[HMDSetting initWithCoder:]
  -[HMDSetting addConstraint:]
  -[HMDSetting isValidValue:error:]
  -[HMDSetting internalValue]
  -[HMDSetting initWithIdentifier:parentIdentifier:name:properties:type:value:constraints:]
  -[HMDSetting updateWithSettingValue:]
  -[HMDSetting wouldValueUpdate:]
  -[HMDSetting constraintsByKeyPathWithCurrentKeyPath:]
  -[HMDSetting setInternalValue:]


HMDSettingConstraint : NSObject <HMDSettingBaseProtocol>
 @property  NSNumber *numberValue
 @property  NSData *dataValue
 @property  NSUUID *identifier
 @property  NSNumber *type
 @property  id value
 @property  NSString *name
 @property  NSUUID *parentIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingConstraint supportsSecureCoding]

  // instance methods
  -[HMDSettingConstraint parentIdentifier]
  -[HMDSettingConstraint dataValue]
  -[HMDSettingConstraint identifier]
  -[HMDSettingConstraint encodeWithCoder:]
  -[HMDSettingConstraint type]
  -[HMDSettingConstraint .cxx_destruct]
  -[HMDSettingConstraint numberValue]
  -[HMDSettingConstraint value]
  -[HMDSettingConstraint name]
  -[HMDSettingConstraint initWithCoder:]
  -[HMDSettingConstraint initWithIdentifier:parentIdentifier:type:numberValue:dataValue:]


HMDRemoteLoginInitiatorProxyAuthentication : HMDRemoteLoginInitiatorAuthentication
 @property  NSDictionary *authResults

  // class methods
  +[HMDRemoteLoginInitiatorProxyAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginInitiatorProxyAuthentication dealloc]
  -[HMDRemoteLoginInitiatorProxyAuthentication .cxx_destruct]
  -[HMDRemoteLoginInitiatorProxyAuthentication _authenticate]
  -[HMDRemoteLoginInitiatorProxyAuthentication authResults]
  -[HMDRemoteLoginInitiatorProxyAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:authResults:]
  -[HMDRemoteLoginInitiatorProxyAuthentication loginType]
  -[HMDRemoteLoginInitiatorProxyAuthentication authenticate]


HMDHAP2Storage : NSObject <HAP2Storage>
 @property  <HAP2StorageDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHAP2Storage setDelegate:]
  -[HMDHAP2Storage delegate]
  -[HMDHAP2Storage registerPairedAccessoryWithIdentifier:]
  -[HMDHAP2Storage .cxx_destruct]
  -[HMDHAP2Storage hasKeysForIdentifiers:completion:]
  -[HMDHAP2Storage fetchKeysForIdentifiers:completion:]
  -[HMDHAP2Storage fetchControllerKeyForDeviceId:completion:]
  -[HMDHAP2Storage fetchCacheForIdentifier:completion:]
  -[HMDHAP2Storage removeKeysForIdentifiers:completion:]
  -[HMDHAP2Storage removeCacheForIdentifier:completion:]
  -[HMDHAP2Storage saveKeysForIdentifiers:completion:]
  -[HMDHAP2Storage saveCacheForIdentifier:data:completion:]
  -[HMDHAP2Storage removeControllerKeyWithCompletion:]
  -[HMDHAP2Storage saveControllerIdentity:completion:]
  -[HMDHAP2Storage initWithAccessoryBrowser:]
  -[HMDHAP2Storage resetPairedAccessoryIdentifiers]
  -[HMDHAP2Storage deregisterPairedAccessoryWithIdentifier:]
  -[HMDHAP2Storage _removeKeysForIdentifiers:completion:]


HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper : HMFObject <HMFLogging>
 @property  HMFActivity *activity
 @property  HMBProcessingOptions *options
 @property  CKOperationGroup *operationGroup
 @property  BOOL shouldRetry
 @property  double retryIntervalSeconds
 @property  unsigned long retryCount
 @property  NSDate *operationStartTime
 @property  BOOL finished
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper maxRetryCount]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper __integerForPreferenceKey:defaultValue:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper maxOperationDurationSeconds]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper finishWithError:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper finishWithResult:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper finishWithResult:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper retryCount]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper setRetryCount:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper dealloc]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper finished]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper options]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper shouldRetry]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper activity]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper setShouldRetry:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper operationGroup]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper operationStartTime]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper setOperationStartTime:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper initWithActivity:options:container:useAnonymousRequests:promise:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper setRetryIntervalSeconds:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper retryIntervalSeconds]


HMDFaceCropModel : HMBModel
 @property  NSData *faceBoundingBoxData
 @property  NSNumber *sourceField
 @property  NSData *dataRepresentation
 @property  NSDate *dateCreated
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} faceBoundingBox
 @property  HMBModelCloudReference *person
 @property  NSUUID *unassociatedFaceCropUUID
 @property  long long source

  // class methods
  +[HMDFaceCropModel hmbProperties]
  +[HMDFaceCropModel hmbQueries]
  +[HMDFaceCropModel sentinelParentUUID]
  +[HMDFaceCropModel faceCropsForPersonQuery]
  +[HMDFaceCropModel faceCropsWithUnassociatedFaceCropUUIDQuery]

  // instance methods
  -[HMDFaceCropModel source]
  -[HMDFaceCropModel setSource:]
  -[HMDFaceCropModel faceBoundingBox]
  -[HMDFaceCropModel initWithPersonFaceCrop:]
  -[HMDFaceCropModel createPersonFaceCrop]
  -[HMDFaceCropModel setFaceBoundingBox:]


AWDHomeKitMultiUserSettingsValueByKeyPath : PBCodable <NSCopying>
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasHomeKitMultiUserSettingsValueString
 @property  NSString *homeKitMultiUserSettingsValueString
 @property  BOOL hasHomeKitMultiUserSettingsValueInteger
 @property  long long homeKitMultiUserSettingsValueInteger
 @property  BOOL hasHomeKitMultiUserSettingsValueData
 @property  NSData *homeKitMultiUserSettingsValueData

  // instance methods
  -[AWDHomeKitMultiUserSettingsValueByKeyPath typeAsString:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setHasType:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath copyTo:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath type]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath StringAsType:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath .cxx_destruct]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath mergeFrom:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setType:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath dictionaryRepresentation]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath copyWithZone:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath hasType]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath readFrom:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath writeTo:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath isEqual:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath hasHomeKitMultiUserSettingsValueString]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setHomeKitMultiUserSettingsValueInteger:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setHasHomeKitMultiUserSettingsValueInteger:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath hasHomeKitMultiUserSettingsValueInteger]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath hasHomeKitMultiUserSettingsValueData]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath homeKitMultiUserSettingsValueString]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setHomeKitMultiUserSettingsValueString:]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath homeKitMultiUserSettingsValueInteger]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath homeKitMultiUserSettingsValueData]
  -[AWDHomeKitMultiUserSettingsValueByKeyPath setHomeKitMultiUserSettingsValueData:]


HMDBulletinCharacteristicTuple : HMFObject
 @property  NSDate *lastPostingTime
 @property  NSString *serviceContextID
 @property  NSString *currentType
 @property  id targetValue
 @property  NSNumber *targetStateNumber
 @property  BOOL changedByThisDevice

  // class methods
  +[HMDBulletinCharacteristicTuple tupleWithServiceContextID:currentType:targetValue:targetStateNumber:changedByThisDevice:]

  // instance methods
  -[HMDBulletinCharacteristicTuple targetValue]
  -[HMDBulletinCharacteristicTuple .cxx_destruct]
  -[HMDBulletinCharacteristicTuple initWithServiceContextID:currentType:targetValue:targetStateNumber:changedByThisDevice:]
  -[HMDBulletinCharacteristicTuple updatePostingTime]
  -[HMDBulletinCharacteristicTuple serviceContextID]
  -[HMDBulletinCharacteristicTuple currentType]
  -[HMDBulletinCharacteristicTuple lastPostingTime]
  -[HMDBulletinCharacteristicTuple setLastPostingTime:]
  -[HMDBulletinCharacteristicTuple targetStateNumber]
  -[HMDBulletinCharacteristicTuple changedByThisDevice]


HMDTrigger : HMFObject <HMDBulletinIdentifiers, HMDHomeMessageReceiver, NSSecureCoding, HMFDumpState, HMFLogging, HMDDevicePreferenceDataSource, HMDBackingStoreObjectProtocol>
 @property  NSDictionary *actionContext
 @property  NSDictionary *bulletinContext
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  NSString *urlString
 @property  NSMutableDictionary *actionSetMappings
 @property  NSMutableArray *actionSetUUIDs
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  BOOL active
 @property  BOOL configured
 @property  unsigned long triggerType
 @property  NSDate *mostRecentFireDate
 @property  NSString *name
 @property  NSString *configuredName
 @property  NSUUID *uuid
 @property  HMDHome *home
 @property  HMDUser *owner
 @property  HMDDevice *owningDevice
 @property  HMDTriggerPolicy *policy
 @property  BOOL ownedByThisDevice
 @property  BOOL requiresDataVersion4
 @property  NSArray *actionSets
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDTrigger supportsSecureCoding]
  +[HMDTrigger logCategory]
  +[HMDTrigger hasMessageReceiverChildren]

  // instance methods
  -[HMDTrigger dumpState]
  -[HMDTrigger owner]
  -[HMDTrigger setOwner:]
  -[HMDTrigger removeService:]
  -[HMDTrigger home]
  -[HMDTrigger _activateWithCompletion:]
  -[HMDTrigger active]
  -[HMDTrigger setTriggerType:]
  -[HMDTrigger logIdentifier]
  -[HMDTrigger activateWithCompletion:]
  -[HMDTrigger encodeWithCoder:]
  -[HMDTrigger workQueue]
  -[HMDTrigger setWorkQueue:]
  -[HMDTrigger attributeDescriptions]
  -[HMDTrigger dealloc]
  -[HMDTrigger removeAccessory:]
  -[HMDTrigger uuid]
  -[HMDTrigger .cxx_destruct]
  -[HMDTrigger setUuid:]
  -[HMDTrigger messageTargetUUID]
  -[HMDTrigger triggerType]
  -[HMDTrigger setActive:]
  -[HMDTrigger contextID]
  -[HMDTrigger setName:]
  -[HMDTrigger invalidate]
  -[HMDTrigger name]
  -[HMDTrigger messageReceiveQueue]
  -[HMDTrigger setPolicy:]
  -[HMDTrigger msgDispatcher]
  -[HMDTrigger isConfigured]
  -[HMDTrigger urlString]
  -[HMDTrigger policy]
  -[HMDTrigger initWithCoder:]
  -[HMDTrigger setHome:]
  -[HMDTrigger setConfiguredName:]
  -[HMDTrigger configuredName]
  -[HMDTrigger actionSets]
  -[HMDTrigger setMsgDispatcher:]
  -[HMDTrigger _registerForMessages]
  -[HMDTrigger initWithName:uuid:]
  -[HMDTrigger actionContext]
  -[HMDTrigger _handleRenameRequest:]
  -[HMDTrigger _handleUpdateActionSetRequest:]
  -[HMDTrigger _handleActivateTriggerRequest:]
  -[HMDTrigger _handleUpdateTriggerPolicyRequest:]
  -[HMDTrigger _handleRemoveTriggerPolicyRequest:]
  -[HMDTrigger messageReceiverChildren]
  -[HMDTrigger supportsDeviceWithCapabilities:]
  -[HMDTrigger transactionObjectUpdated:newValues:message:]
  -[HMDTrigger transactionObjectRemoved:message:]
  -[HMDTrigger initWithModel:home:]
  -[HMDTrigger setActionSetForKey:value:]
  -[HMDTrigger actionSetForKey:]
  -[HMDTrigger removeActionSetForKey:]
  -[HMDTrigger removeAllActionSets]
  -[HMDTrigger actionSetMapKeys]
  -[HMDTrigger requiresDataVersion4]
  -[HMDTrigger compatible:user:]
  -[HMDTrigger setEnabled:message:]
  -[HMDTrigger hasNoActions]
  -[HMDTrigger _checkForNoActions]
  -[HMDTrigger _forceEvaluate]
  -[HMDTrigger removeActionSet:postUpdate:]
  -[HMDTrigger removeCharacteristic:]
  -[HMDTrigger fixupForReplacementAccessory:]
  -[HMDTrigger reEvaluate:]
  -[HMDTrigger triggerFired]
  -[HMDTrigger _recentFireDateUpdated:]
  -[HMDTrigger sendTriggerFiredNotification:]
  -[HMDTrigger _isTriggerFiredNotificationEntitled]
  -[HMDTrigger isAssociatedWithAccessory:]
  -[HMDTrigger configure:messageDispatcher:queue:]
  -[HMDTrigger isOwnedByThisDevice]
  -[HMDTrigger shouldActivateOnLocalDevice]
  -[HMDTrigger activateAfterResidentChangeWithCompletion:]
  -[HMDTrigger modelContainsTriggerFired:]
  -[HMDTrigger markChangedForMessage:]
  -[HMDTrigger markChangedForMessage:triggerModel:]
  -[HMDTrigger _activate:completionHandler:]
  -[HMDTrigger _renameRequest:]
  -[HMDTrigger canRenameTriggerWithNewName:configuredName:error:]
  -[HMDTrigger _handleAddActionSetRequest:]
  -[HMDTrigger _handleAddTriggerOwnedActionSetRequest:]
  -[HMDTrigger _handleRemoveActionSetRequest:postUpdate:]
  -[HMDTrigger _handleRemoveTriggerOwnedActionSetRequest:postUpdate:]
  -[HMDTrigger _updateActionSetRequest:postUpdate:]
  -[HMDTrigger _actionSetsUpdated:message:]
  -[HMDTrigger _activateTriggerRequest:]
  -[HMDTrigger _executeActionSetsWithCompletionHandler:]
  -[HMDTrigger _executeActionSets:captureCurrentState:completionHandler:]
  -[HMDTrigger userDidConfirmExecute:completionHandler:]
  -[HMDTrigger _fillBaseObjectChangeModel:]
  -[HMDTrigger _handleTriggerUpdate:message:]
  -[HMDTrigger shouldEncodeLastFireDate:]
  -[HMDTrigger executeCompleteWithError:]
  -[HMDTrigger _transactionObjectUpdated:newValues:message:]
  -[HMDTrigger _transactionObjectRemoved:message:]
  -[HMDTrigger modelObjectWithChangeType:version:]
  -[HMDTrigger modelObjectWithChangeType:]
  -[HMDTrigger backingStoreObjects:]
  -[HMDTrigger emptyModelObject]
  -[HMDTrigger updateEventTriggerMessage:message:relay:]
  -[HMDTrigger confirmResident]
  -[HMDTrigger _addActionSet:]
  -[HMDTrigger owningDevice]
  -[HMDTrigger setOwningDevice:]
  -[HMDTrigger actionSetMappings]
  -[HMDTrigger setActionSetMappings:]
  -[HMDTrigger actionSetUUIDs]
  -[HMDTrigger setActionSetUUIDs:]
  -[HMDTrigger mostRecentFireDate]
  -[HMDTrigger setMostRecentFireDate:]
  -[HMDTrigger contextSPIUniqueIdentifier]
  -[HMDTrigger bulletinContext]


HMDTriggerModel : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSString *configuredName
 @property  NSArray *currentActionSets
 @property  NSNumber *active
 @property  NSDate *mostRecentFireDate
 @property  HMDUser *owner
 @property  HMDDevice *owningDevice
 @property  NSNumber *autoDelete

  // class methods
  +[HMDTriggerModel properties]

  // instance methods
  -[HMDTriggerModel createPayload]
  -[HMDTriggerModel dependentUUIDs]


HMDBiomeLogEventObserver : HMFObject <HMMLogEventObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBiomeLogEventObserver shortDescription]

  // instance methods
  -[HMDBiomeLogEventObserver .cxx_destruct]
  -[HMDBiomeLogEventObserver didReceiveEventFromDispatcher:]
  -[HMDBiomeLogEventObserver initWithBiomeEventManager:dataSource:]


HMDAppleMediaAccessoriesStateManager : HMFObject <HMDAppleMediaAccessoriesStateMessengerDelegate, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *identifier
 @property  HMDAppleMediaAccessoriesStateMessenger *messenger
 @property  HMDAppleMediaAccessoriesStateManagerMetricsDispatcher *metricsDispatcher
 @property  <HMDAppleMediaAccessoriesStateManagerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoriesStateManager logCategory]

  // instance methods
  -[HMDAppleMediaAccessoriesStateManager identifier]
  -[HMDAppleMediaAccessoriesStateManager logIdentifier]
  -[HMDAppleMediaAccessoriesStateManager dataSource]
  -[HMDAppleMediaAccessoriesStateManager run]
  -[HMDAppleMediaAccessoriesStateManager .cxx_destruct]
  -[HMDAppleMediaAccessoriesStateManager messenger]
  -[HMDAppleMediaAccessoriesStateManager setDataSource:]
  -[HMDAppleMediaAccessoriesStateManager metricsDispatcher]
  -[HMDAppleMediaAccessoriesStateManager initWithIdentifier:messenger:metricsDispatcher:]
  -[HMDAppleMediaAccessoriesStateManager runMultipleIdentifierCorrectionSequence]
  -[HMDAppleMediaAccessoriesStateManager correctStateForMatchingIdentifier:appleMediaAccessories:]
  -[HMDAppleMediaAccessoriesStateManager _correctStateForMatchingIdentifier:appleMediaAccessories:sendList:]
  -[HMDAppleMediaAccessoriesStateManager sendModelIdentifierRequestMessageForAppleMediaAccessory:accessoryIdentifier:]
  -[HMDAppleMediaAccessoriesStateManager correctStateForMatchingAppleMediaAccessories:modelIdentifier:]
  -[HMDAppleMediaAccessoriesStateManager remoteAppleMediaAccessoriesByIdentifier]
  -[HMDAppleMediaAccessoriesStateManager remoteAppleMediaAccessories]
  -[HMDAppleMediaAccessoriesStateManager dataSourceAppleMediaAccessories]
  -[HMDAppleMediaAccessoriesStateManager appleMediaAccessoriesStateMessenger:didReceiveModelIdentiferRequestMessage:withAccessoryIdentifier:]


HMDUserActionPredictionManager : HMFObject <HMDDatabaseZoneManagerDataSource, HMDDatabaseZoneManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMBLocalZone *localZone
 @property  HMDDatabaseZoneManager *zoneManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDUserActionPredictionManager configure]
  -[HMDUserActionPredictionManager workQueue]
  -[HMDUserActionPredictionManager .cxx_destruct]
  -[HMDUserActionPredictionManager zoneManager]
  -[HMDUserActionPredictionManager localZone]
  -[HMDUserActionPredictionManager initWithHome:]
  -[HMDUserActionPredictionManager setLocalZone:]
  -[HMDUserActionPredictionManager manager:shouldShareWithUser:]
  -[HMDUserActionPredictionManager zoneManagerDidStart:]
  -[HMDUserActionPredictionManager zoneManagerDidStop:]
  -[HMDUserActionPredictionManager initWithZoneManager:workQueue:]
  -[HMDUserActionPredictionManager removeZones]
  -[HMDUserActionPredictionManager _removeZones]


HMDHAPAccessoryAdvertisement : HMDAccessoryAdvertisement
 @property  BOOL pairingPresent
 @property  NSData *setupHash

  // instance methods
  -[HMDHAPAccessoryAdvertisement .cxx_destruct]
  -[HMDHAPAccessoryAdvertisement isEqual:]
  -[HMDHAPAccessoryAdvertisement setupHash]
  -[HMDHAPAccessoryAdvertisement setSetupHash:]
  -[HMDHAPAccessoryAdvertisement initWithIdentifier:name:categoryIdentifier:pairingPresent:setupHash:]
  -[HMDHAPAccessoryAdvertisement pairingPresent]


HMDUserPresenceFeed : HMFObject
 @property  HMDUser *user
 @property  HMUserPresenceAuthorization *presenceAuthStatus
 @property  HMUserPresenceCompute *presenceComputeStatus
 @property  HMDUserPresenceRegion *presenceRegion
 @property  HMDUserPresenceUpdateReason *reason

  // instance methods
  -[HMDUserPresenceFeed user]
  -[HMDUserPresenceFeed .cxx_destruct]
  -[HMDUserPresenceFeed reason]
  -[HMDUserPresenceFeed isEqual:]
  -[HMDUserPresenceFeed presenceAuthStatus]
  -[HMDUserPresenceFeed presenceComputeStatus]
  -[HMDUserPresenceFeed initWithUser:presenceAuthStatus:presenceComputeStatus:presenceRegion:reason:]
  -[HMDUserPresenceFeed presenceRegion]


HMDCameraRecordingManager : HMFObject <HMDCameraRecordingBulkSendSessionReaderDelegate, HMDCameraRecordingSessionDelegate, HMDCameraRecordingSessionNotificationTriggerDelegate, HMDCameraRecordingSettingsControlDelegate, HMDDevicePreferenceDataSource, HMFLogging, HMFMessageReceiver, HMFTimerDelegate, HMDCameraClipManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDCameraRecordingLoadBalancer *cameraLoadBalancer
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  HMDCameraSignificantEventServer *significantEventServer
 @property  NSUUID *cameraUUID
 @property  NSNotificationCenter *notificationCenter
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  NSMutableSet *activeRecordingSessions
 @property  HMDCameraRecordingSessionNotificationTrigger *notificationTrigger
 @property  HMDCameraRecordingSettingsControl *recordingSettingsControl
 @property  <HMDCameraRecordingManagerDependencyFactory> *dependencyFactory
 @property  HMDCameraRecordingBulkSendSessionInitiator *bulkSendSessionInitiator
 @property  HMDHAPAccessory *accessory
 @property  HMDCameraProfile *camera
 @property  HMDCameraRecordingSession *currentRecordingSession
 @property  HMDCameraRecordingBulkSendSessionReader *currentBulkSendSessionReader
 @property  HMFTimer *sessionRetryTimer
 @property  HMDCameraRecordingSessionRetryContext *sessionRetryContext
 @property  BOOL didShutDown
 @property  BOOL motionActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraRecordingManager logCategory]

  // instance methods
  -[HMDCameraRecordingManager shutDown]
  -[HMDCameraRecordingManager notificationCenter]
  -[HMDCameraRecordingManager accessory]
  -[HMDCameraRecordingManager camera]
  -[HMDCameraRecordingManager timerDidFire:]
  -[HMDCameraRecordingManager logIdentifier]
  -[HMDCameraRecordingManager setAccessory:]
  -[HMDCameraRecordingManager workQueue]
  -[HMDCameraRecordingManager dealloc]
  -[HMDCameraRecordingManager _start]
  -[HMDCameraRecordingManager .cxx_destruct]
  -[HMDCameraRecordingManager messageTargetUUID]
  -[HMDCameraRecordingManager setCamera:]
  -[HMDCameraRecordingManager start]
  -[HMDCameraRecordingManager messageReceiveQueue]
  -[HMDCameraRecordingManager msgDispatcher]
  -[HMDCameraRecordingManager dependencyFactory]
  -[HMDCameraRecordingManager supportsDeviceWithCapabilities:]
  -[HMDCameraRecordingManager handleStartRecordingSessionRequest:]
  -[HMDCameraRecordingManager handleCameraSettingsDidChangeNotification:]
  -[HMDCameraRecordingManager handleConfirmedPrimaryResidentUpdatedNotification:]
  -[HMDCameraRecordingManager bulkSendSessionReader:didReadFragment:]
  -[HMDCameraRecordingManager bulkSendSessionReader:didFinishWithReason:]
  -[HMDCameraRecordingManager session:didEndWithError:]
  -[HMDCameraRecordingManager notificationTrigger:didObserveTriggerType:changeToActive:]
  -[HMDCameraRecordingManager recordingSettingsControlDidConfigure:]
  -[HMDCameraRecordingManager clipManagerDidStartUpCloudZone:]
  -[HMDCameraRecordingManager clipManagerDidStop:]
  -[HMDCameraRecordingManager initWithCamera:recordingManagementService:]
  -[HMDCameraRecordingManager initWithCamera:recordingManagementService:workQueue:dependencyFactory:notificationCenter:]
  -[HMDCameraRecordingManager _shutDown]
  -[HMDCameraRecordingManager _clipManagerDidStartUpCloudZone]
  -[HMDCameraRecordingManager _coordinateRecordingSessionForTrigger:]
  -[HMDCameraRecordingManager homePresenceByPairingIdentity]
  -[HMDCameraRecordingManager _forwardRecordingSessionForTrigger:withLoadBalancerDecision:deviceFilter:sessionCoordinationLogEvent:retryAttemptNumber:]
  -[HMDCameraRecordingManager _submitLoadBalancingEventWithDecision:numberOfRetries:]
  -[HMDCameraRecordingManager _createRecordingSessionWithHomePresenceByPairingIdentity:]
  -[HMDCameraRecordingManager _configureRecordingSession:withTrigger:]
  -[HMDCameraRecordingManager bulkSendSessionOpenReasonWithError:]
  -[HMDCameraRecordingManager _prepareRecordingSessionForTrigger:homePresenceByPairingIdentity:reason:]
  -[HMDCameraRecordingManager _prepareRecordingSessionForTrigger:homePresenceByPairingIdentity:reason:completionCallback:]
  -[HMDCameraRecordingManager _startRecordingSessionForTrigger:homePresenceByPairingIdentity:reason:completionCallback:]
  -[HMDCameraRecordingManager _handleBulkSendSessionCreated:]
  -[HMDCameraRecordingManager _closeEventReasonForRecordingSessionError:]
  -[HMDCameraRecordingManager _closeCurrentSessionsWithReason:]
  -[HMDCameraRecordingManager _resetRetryContextWithReason:]
  -[HMDCameraRecordingManager _startSessionRetryTimer]
  -[HMDCameraRecordingManager _resetCurrentRecordingSession:]
  -[HMDCameraRecordingManager _updateSessionRestoreRegistration]
  -[HMDCameraRecordingManager cameraLoadBalancer]
  -[HMDCameraRecordingManager featuresDataSource]
  -[HMDCameraRecordingManager significantEventServer]
  -[HMDCameraRecordingManager cameraUUID]
  -[HMDCameraRecordingManager logEventSubmitter]
  -[HMDCameraRecordingManager activeRecordingSessions]
  -[HMDCameraRecordingManager notificationTrigger]
  -[HMDCameraRecordingManager recordingSettingsControl]
  -[HMDCameraRecordingManager bulkSendSessionInitiator]
  -[HMDCameraRecordingManager currentRecordingSession]
  -[HMDCameraRecordingManager setCurrentRecordingSession:]
  -[HMDCameraRecordingManager currentBulkSendSessionReader]
  -[HMDCameraRecordingManager setCurrentBulkSendSessionReader:]
  -[HMDCameraRecordingManager sessionRetryTimer]
  -[HMDCameraRecordingManager setSessionRetryTimer:]
  -[HMDCameraRecordingManager sessionRetryContext]
  -[HMDCameraRecordingManager setSessionRetryContext:]
  -[HMDCameraRecordingManager didShutDown]
  -[HMDCameraRecordingManager setDidShutDown:]
  -[HMDCameraRecordingManager isMotionActive]
  -[HMDCameraRecordingManager setMotionActive:]


HMDServiceNameComponents : HMFObject
 @property  NSString *rawServiceName
 @property  NSString *serviceName
 @property  NSString *roomName
 @property  NSString *format

  // class methods
  +[HMDServiceNameComponents componentsWithRawServiceName:rawRoomName:]
  +[HMDServiceNameComponents componentsWithRawServiceName:rawRoomName:localizedFormat:]

  // instance methods
  -[HMDServiceNameComponents setServiceName:]
  -[HMDServiceNameComponents serviceName]
  -[HMDServiceNameComponents .cxx_destruct]
  -[HMDServiceNameComponents setFormat:]
  -[HMDServiceNameComponents format]
  -[HMDServiceNameComponents roomName]
  -[HMDServiceNameComponents setRoomName:]
  -[HMDServiceNameComponents initWithRawServiceName:rawRoomName:localizedFormat:]
  -[HMDServiceNameComponents composedName]
  -[HMDServiceNameComponents rawServiceName]
  -[HMDServiceNameComponents setRawServiceName:]


HMDCharacteristicWriteTuple : NSObject
  // instance methods
  -[HMDCharacteristicWriteTuple .cxx_destruct]


HMDShortcutAction : HMDAction <NSCopying>
  // class methods
  +[HMDShortcutAction supportsSecureCoding]
  +[HMDShortcutAction logCategory]
  +[HMDShortcutAction actionWithDictionaryRepresentation:home:]
  +[HMDShortcutAction actionWithDictionaryRepresentation:home:actionSet:]

  // instance methods
  -[HMDShortcutAction modelClass]
  -[HMDShortcutAction encodeWithCoder:]
  -[HMDShortcutAction type]
  -[HMDShortcutAction dealloc]
  -[HMDShortcutAction .cxx_destruct]
  -[HMDShortcutAction dictionaryRepresentation]
  -[HMDShortcutAction copyWithZone:]
  -[HMDShortcutAction initWithCoder:]
  -[HMDShortcutAction requiresDeviceUnlock]
  -[HMDShortcutAction associatedAccessories]
  -[HMDShortcutAction transactionObjectUpdated:newValues:message:]
  -[HMDShortcutAction isAssociatedWithAccessory:]
  -[HMDShortcutAction modelObjectWithChangeType:version:]
  -[HMDShortcutAction stateDump]
  -[HMDShortcutAction entitlementsForNotification]
  -[HMDShortcutAction initWithSerializedShortcut:uuid:actionSet:]
  -[HMDShortcutAction removeShortcut]
  -[HMDShortcutAction executeWithSource:clientName:completionHandler:]
  -[HMDShortcutAction isUnsecuringAction]
  -[HMDShortcutAction initWithModelObject:parent:error:]


HMDUserCloudShareManagerCreatorDependency : NSObject <HMDUserCloudShareManagerCreatorDependency>
  // instance methods
  -[HMDUserCloudShareManagerCreatorDependency init]
  -[HMDUserCloudShareManagerCreatorDependency createUserCloudShareControllerWithDelegate:queue:]


HMDUserCloudShareManager : NSObject <HMFMessageReceiver, HMDUserCloudShareControllerDelegate>
 @property  NSUUID *identifier
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMDHomeManager *homeManager
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDUserCloudShareController *userCloudShareController
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserCloudShareManager logCategory]

  // instance methods
  -[HMDUserCloudShareManager initWithHomeManager:]
  -[HMDUserCloudShareManager identifier]
  -[HMDUserCloudShareManager clientQueue]
  -[HMDUserCloudShareManager .cxx_destruct]
  -[HMDUserCloudShareManager messageTargetUUID]
  -[HMDUserCloudShareManager messageDestination]
  -[HMDUserCloudShareManager homeManager]
  -[HMDUserCloudShareManager messageReceiveQueue]
  -[HMDUserCloudShareManager messageDispatcher]
  -[HMDUserCloudShareManager registerForMessages]
  -[HMDUserCloudShareManager handleHomeChangedNotification:]
  -[HMDUserCloudShareManager handleXPCConnectionInvalidated:]
  -[HMDUserCloudShareManager _handleAccessoryAdded:]
  -[HMDUserCloudShareManager _handleEnableMultiUserChangedNotification:]
  -[HMDUserCloudShareManager _handleUserSettingsUpdatedNotification:]
  -[HMDUserCloudShareManager _handleLocalHomeDataRemovedNotification:]
  -[HMDUserCloudShareManager handleUsersChangedNotification:]
  -[HMDUserCloudShareManager _handleRegisterRequest:]
  -[HMDUserCloudShareManager userCloudShareController:sendShareRequestMessageWithConnection:fromUser:toUser:home:shareURL:shareToken:containerID:completion:]
  -[HMDUserCloudShareManager userCloudShareController:sendRepairInfo:toConnection:home:containerID:]
  -[HMDUserCloudShareManager userCloudShareController:wakeClientWithContainerID:]
  -[HMDUserCloudShareManager userCloudShareController:wakeClientForRepairWithContainerID:]
  -[HMDUserCloudShareManager userCloudShareController:timerWithInterval:]
  -[HMDUserCloudShareManager currentDateForUserCloudShareController:]
  -[HMDUserCloudShareManager initWithHomeManager:dependency:]
  -[HMDUserCloudShareManager configureWithMessageDispatcher:]
  -[HMDUserCloudShareManager _postMultiUserStatusChangedNotification]
  -[HMDUserCloudShareManager handleRemoteUserClientCloudShareRequest:]
  -[HMDUserCloudShareManager handleRemoteUserClientCloudShareRepairRequest:]
  -[HMDUserCloudShareManager _handleDeregisterRequest:]
  -[HMDUserCloudShareManager setMessageDispatcher:]
  -[HMDUserCloudShareManager userCloudShareController]


HMDRemoteEventRouterServerConnection : NSObject <HMEMessageDatagramConnection>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRemoteEventRouterServerConnection .cxx_destruct]
  -[HMDRemoteEventRouterServerConnection initWithDevice:connectionMode:supportsFragmentMessage:userAccessControlProviderUUID:]
  -[HMDRemoteEventRouterServerConnection initWithDeviceIdentifier:device:connectionMode:supportsFragmentMessage:userAccessControlProviderUUID:]


HMDDeviceSetupTrackingInfo : HMFObject <HMDDeviceSetupTrackingInfo>
 @property  NSUUID *accessoryUUID
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  NSError *sessionError
 @property  long long role
 @property  NSUUID *identifier

  // instance methods
  -[HMDDeviceSetupTrackingInfo accessoryUUID]
  -[HMDDeviceSetupTrackingInfo identifier]
  -[HMDDeviceSetupTrackingInfo startTime]
  -[HMDDeviceSetupTrackingInfo endTime]
  -[HMDDeviceSetupTrackingInfo role]
  -[HMDDeviceSetupTrackingInfo .cxx_destruct]
  -[HMDDeviceSetupTrackingInfo setAccessoryUUID:]
  -[HMDDeviceSetupTrackingInfo sessionError]
  -[HMDDeviceSetupTrackingInfo initWithIdentifier:startTime:endTime:role:accessoryUUID:]


HMDHouseholdMetricsClient : HMFObject <HMDHouseholdMetricsLogEventProviding>
 @property  HMDEventCountersManager *countersManager
 @property  HMDMetricsDateProvider *dateProvider
 @property  <HMDHouseholdMetricsMessaging> *remoteMessageDispatcher
 @property  <HMDHouseholdMetricsRequestCountProvider> *requestCountProvider
 @property  NSDictionary *logEventFactories
 @property  @? isDNUEnabledBlock

  // class methods
  +[HMDHouseholdMetricsClient logCategory]

  // instance methods
  -[HMDHouseholdMetricsClient dateProvider]
  -[HMDHouseholdMetricsClient dealloc]
  -[HMDHouseholdMetricsClient .cxx_destruct]
  -[HMDHouseholdMetricsClient householdMetricsForHomeWithUUID:associatedWithDate:]
  -[HMDHouseholdMetricsClient initWithCountersManager:dateProvider:remoteMessageDispatcher:requestCountProvider:logEventFactories:]
  -[HMDHouseholdMetricsClient initWithCountersManager:dateProvider:remoteMessageDispatcher:requestCountProvider:logEventFactories:isDNUEnabledBlock:]
  -[HMDHouseholdMetricsClient handleRequestMessageWithPayload:outError:]
  -[HMDHouseholdMetricsClient deleteExpiredCounters]
  -[HMDHouseholdMetricsClient countersManager]
  -[HMDHouseholdMetricsClient remoteMessageDispatcher]
  -[HMDHouseholdMetricsClient requestCountProvider]
  -[HMDHouseholdMetricsClient logEventFactories]
  -[HMDHouseholdMetricsClient isDNUEnabledBlock]


HMDCameraRecordingSessionSignificantEvent : HMFObject <NSCopying, NSMutableCopying>
 @property  unsigned long reason
 @property  NSDate *dateOfOccurrence
 @property  unsigned long confidenceLevel
 @property  NSUUID *sessionEntityUUID
 @property  NSSet *faceClassifications
 @property  NSData *heroFrameData
 @property  NSData *faceCropData
 @property  double timeOffsetWithinClip
 @property  NSUUID *UUID

  // instance methods
  -[HMDCameraRecordingSessionSignificantEvent confidenceLevel]
  -[HMDCameraRecordingSessionSignificantEvent setConfidenceLevel:]
  -[HMDCameraRecordingSessionSignificantEvent attributeDescriptions]
  -[HMDCameraRecordingSessionSignificantEvent .cxx_destruct]
  -[HMDCameraRecordingSessionSignificantEvent UUID]
  -[HMDCameraRecordingSessionSignificantEvent reason]
  -[HMDCameraRecordingSessionSignificantEvent initWithUUID:]
  -[HMDCameraRecordingSessionSignificantEvent copyWithZone:]
  -[HMDCameraRecordingSessionSignificantEvent mutableCopyWithZone:]
  -[HMDCameraRecordingSessionSignificantEvent setReason:]
  -[HMDCameraRecordingSessionSignificantEvent isEqual:]
  -[HMDCameraRecordingSessionSignificantEvent dateOfOccurrence]
  -[HMDCameraRecordingSessionSignificantEvent timeOffsetWithinClip]
  -[HMDCameraRecordingSessionSignificantEvent faceCropData]
  -[HMDCameraRecordingSessionSignificantEvent setDateOfOccurrence:]
  -[HMDCameraRecordingSessionSignificantEvent sessionEntityUUID]
  -[HMDCameraRecordingSessionSignificantEvent setSessionEntityUUID:]
  -[HMDCameraRecordingSessionSignificantEvent faceClassifications]
  -[HMDCameraRecordingSessionSignificantEvent setFaceClassifications:]
  -[HMDCameraRecordingSessionSignificantEvent heroFrameData]
  -[HMDCameraRecordingSessionSignificantEvent setHeroFrameData:]
  -[HMDCameraRecordingSessionSignificantEvent setFaceCropData:]
  -[HMDCameraRecordingSessionSignificantEvent setTimeOffsetWithinClip:]


HMDMutableCameraRecordingSessionSignificantEvent : HMDCameraRecordingSessionSignificantEvent
 @property  unsigned long reason
 @property  NSDate *dateOfOccurrence
 @property  unsigned long confidenceLevel
 @property  NSUUID *sessionEntityUUID
 @property  NSSet *faceClassifications
 @property  NSData *heroFrameData
 @property  NSData *faceCropData
 @property  double timeOffsetWithinClip

  // instance methods
  -[HMDMutableCameraRecordingSessionSignificantEvent copyWithZone:]


HMDHomeObjectChangeHandler : HMFObject
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue

  // instance methods
  -[HMDHomeObjectChangeHandler home]
  -[HMDHomeObjectChangeHandler workQueue]
  -[HMDHomeObjectChangeHandler .cxx_destruct]
  -[HMDHomeObjectChangeHandler initWithHome:]
  -[HMDHomeObjectChangeHandler handleObjectAdd:message:]
  -[HMDHomeObjectChangeHandler handleObjectRemove:message:]
  -[HMDHomeObjectChangeHandler handleObjectUpdate:newValues:message:]


HMDResetConfigPostCleanup : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDResetConfigPostCleanup logCategory]
  +[HMDResetConfigPostCleanup writePostCleanupRecordWithReason:steps:]
  +[HMDResetConfigPostCleanup performAnyPostCleanupStepsIfNecessary]
  +[HMDResetConfigPostCleanup performResetConfigPostCleanupSteps:dueToReason:]
  +[HMDResetConfigPostCleanup performIndividualCleanupTasks:onRootDirectory:]
  +[HMDResetConfigPostCleanup filesToExcludeFromCacheDirectory]
  +[HMDResetConfigPostCleanup sqlFileListToRemove:fromRootDirectory:]
  +[HMDResetConfigPostCleanup removeFilesAtLocation:]
  +[HMDResetConfigPostCleanup removeFilesAtLocation:usingFileManager:]
  +[HMDResetConfigPostCleanup deleteFilesInsideDirectory:excludingFiles:shouldSkipDirectories:]
  +[HMDResetConfigPostCleanup deleteFilesInsideDirectory:excludingFiles:shouldSkipDirectories:usingFileManager:]
  +[HMDResetConfigPostCleanup writePostCleanupRecordToRemoveAllCoreDataFilesWithReason:]
  +[HMDResetConfigPostCleanup resetConfigPostCleanupFileLocation]


HMDAccessCodeManagerContext : NSObject <HMFLogging, HMDAccessCodeManagerContext>
 @property  HMDAccessCodeDemoDataMocker *demoDataMocker
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDHome *home
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *UUID
 @property  NSNotificationCenter *notificationCenter
 @property  HMDHomeAdministratorHandler *administratorHandler
 @property  BOOL featureEnabled
 @property  BOOL currentDevicePrimaryResident
 @property  BOOL primaryResidentSupportsAccessCodes
 @property  BOOL demoDataMockerEnabled
 @property  long long accessoryReadWriteRetries
 @property  double accessoryReadWriteRetryTimeInterval
 @property  double removedUserAccessCodeTimeToLive
 @property  double dataCleanUpCheckTimerInterval
 @property  long long residentDataSyncVerificationRetries
 @property  double residentDataSyncVerificationRetryTimeInterval
 @property  BOOL currentDeviceResidentCapable
 @property  BOOL currentDeviceOwnerUser
 @property  BOOL currentDeviceOwnerController
 @property  BOOL currentDeviceWatch
 @property  BOOL residentSupported
 @property  BOOL homeAppForegrounded
 @property  BOOL homeOnboardedForAccessCodes
 @property  HMDDevice *residentCommunicationHandlerPreferredDevice
 @property  NSArray *accessoriesSupportingAccessCodes
 @property  NSArray *UUIDsOfAccessoriesSupportingAccessCodes
 @property  NSArray *UUIDsOfUsersWithoutAccessCodes
 @property  HMDBulletinBoard *bulletinBoard
 @property  HMDRemoteMessageForwarder *remoteMessageForwarder
 @property  HMDHomeWalletKeyManager *walletKeyManager

  // class methods
  +[HMDAccessCodeManagerContext logCategory]

  // instance methods
  -[HMDAccessCodeManagerContext notificationCenter]
  -[HMDAccessCodeManagerContext configure]
  -[HMDAccessCodeManagerContext home]
  -[HMDAccessCodeManagerContext workQueue]
  -[HMDAccessCodeManagerContext .cxx_destruct]
  -[HMDAccessCodeManagerContext isFeatureEnabled]
  -[HMDAccessCodeManagerContext UUID]
  -[HMDAccessCodeManagerContext messageDispatcher]
  -[HMDAccessCodeManagerContext generateAccessCodeValueFromConstraints:accessoryAccessCodes:homeAccessCodes:]
  -[HMDAccessCodeManagerContext accessoriesSupportingAccessCodes]
  -[HMDAccessCodeManagerContext userWithUUID:]
  -[HMDAccessCodeManagerContext performWriteRequests:withRetries:timeInterval:loggingObject:]
  -[HMDAccessCodeManagerContext performReadRequests:withRetries:timeInterval:loggingObject:]
  -[HMDAccessCodeManagerContext redispatchToResidentMessage:]
  -[HMDAccessCodeManagerContext userForMessage:]
  -[HMDAccessCodeManagerContext hapAccessoryWithUUID:]
  -[HMDAccessCodeManagerContext administratorHandler]
  -[HMDAccessCodeManagerContext isCurrentDevicePrimaryResident]
  -[HMDAccessCodeManagerContext primaryResidentSupportsAccessCodes]
  -[HMDAccessCodeManagerContext isDemoDataMockerEnabled]
  -[HMDAccessCodeManagerContext accessoryReadWriteRetries]
  -[HMDAccessCodeManagerContext accessoryReadWriteRetryTimeInterval]
  -[HMDAccessCodeManagerContext removedUserAccessCodeTimeToLive]
  -[HMDAccessCodeManagerContext dataCleanUpCheckTimerInterval]
  -[HMDAccessCodeManagerContext residentDataSyncVerificationRetries]
  -[HMDAccessCodeManagerContext residentDataSyncVerificationRetryTimeInterval]
  -[HMDAccessCodeManagerContext isCurrentDeviceResidentCapable]
  -[HMDAccessCodeManagerContext isCurrentDeviceOwnerUser]
  -[HMDAccessCodeManagerContext isCurrentDeviceOwnerController]
  -[HMDAccessCodeManagerContext isCurrentDeviceWatch]
  -[HMDAccessCodeManagerContext isResidentSupported]
  -[HMDAccessCodeManagerContext isHomeAppForegrounded]
  -[HMDAccessCodeManagerContext hasHomeOnboardedForAccessCodes]
  -[HMDAccessCodeManagerContext residentCommunicationHandlerPreferredDevice]
  -[HMDAccessCodeManagerContext UUIDsOfAccessoriesSupportingAccessCodes]
  -[HMDAccessCodeManagerContext UUIDsOfUsersWithoutAccessCodes]
  -[HMDAccessCodeManagerContext bulletinBoard]
  -[HMDAccessCodeManagerContext remoteMessageForwarder]
  -[HMDAccessCodeManagerContext walletKeyManager]
  -[HMDAccessCodeManagerContext initWithHome:messageDispatcher:workQueue:]
  -[HMDAccessCodeManagerContext initWithHome:messageDispatcher:workQueue:UUID:]
  -[HMDAccessCodeManagerContext _performMockedWriteRequests:]
  -[HMDAccessCodeManagerContext _performMockedReadRequests:]
  -[HMDAccessCodeManagerContext demoDataMocker]


HMDAccessCodeManagerUtilities : HMFObject <HMDAccessCodeManagerUtilitiesProtocol, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessCodeManagerUtilities logCategory]
  +[HMDAccessCodeManagerUtilities addedAccessoryAccessCodesFromModificationResponses:]
  +[HMDAccessCodeManagerUtilities updatedAccessoryAccessCodesFromModificationResponses:]
  +[HMDAccessCodeManagerUtilities removedAccessoryAccessCodesFromModificationResponses:]
  +[HMDAccessCodeManagerUtilities filteredFetchResponses:forUser:]
  +[HMDAccessCodeManagerUtilities anyModificationFailed:]
  +[HMDAccessCodeManagerUtilities allModificationRequests:areAddingAccessCode:]


HMDAccessCodeManager : HMFObject <HMFLogging, HMFMessageReceiver, HMDAccessCodeDataManagerDelegate>
 @property  <HMDAccessCodeManagerContext> *context
 @property  Class utilities
 @property  HMDAccessoryAccessCodeReaderWriter *accessoryReaderWriter
 @property  BOOL homeAppForegrounded
 @property  NSHashTable *subscribedClientConnections
 @property  HMDAccessCodeDataManager *dataManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessCodeManager logCategory]

  // instance methods
  -[HMDAccessCodeManager configure]
  -[HMDAccessCodeManager logIdentifier]
  -[HMDAccessCodeManager initWithContext:]
  -[HMDAccessCodeManager .cxx_destruct]
  -[HMDAccessCodeManager messageTargetUUID]
  -[HMDAccessCodeManager utilities]
  -[HMDAccessCodeManager dataManager]
  -[HMDAccessCodeManager context]
  -[HMDAccessCodeManager messageReceiveQueue]
  -[HMDAccessCodeManager isHomeAppForegrounded]
  -[HMDAccessCodeManager handleSubscribeMessage:]
  -[HMDAccessCodeManager handleUnsubscribeMessage:]
  -[HMDAccessCodeManager handleFetchAccessCodesMessage:]
  -[HMDAccessCodeManager handleFetchAccessCodeConstraintsMessage:]
  -[HMDAccessCodeManager handleFetchHomeAccessCodesMessage:]
  -[HMDAccessCodeManager handleFetchCachedAccessCodesMessage:]
  -[HMDAccessCodeManager handleResetAccessoryAccessCodesMessage:]
  -[HMDAccessCodeManager handleSetAccessCodeForUserMessage:]
  -[HMDAccessCodeManager handleSubmitAccessCodeModificationRequestsMessage:]
  -[HMDAccessCodeManager handleConfirmDataHasSyncedToResidentMessage:]
  -[HMDAccessCodeManager handleSetUserInformationMessage:]
  -[HMDAccessCodeManager handleRemoveHomeAccessCodeMessage:]
  -[HMDAccessCodeManager handleGenerateNewUserAccessCodeMessage:]
  -[HMDAccessCodeManager handleRemoveSimpleLabelAccessCodeMessage:]
  -[HMDAccessCodeManager handleHomeUserRemovedNotification:]
  -[HMDAccessCodeManager handleAccessorySupportsAccessCodeDidChangeNotification:]
  -[HMDAccessCodeManager handleHomeDidEnableCharacteristicNotification:]
  -[HMDAccessCodeManager handleHomeDidDisableCharacteristicNotification:]
  -[HMDAccessCodeManager accessCodeDataManager:didAddHomeAccessCodes:addedByUserUUID:]
  -[HMDAccessCodeManager accessCodeDataManager:didUpdateHomeAccessCodes:changedByUserUUID:]
  -[HMDAccessCodeManager accessCodeDataManager:didRemoveHomeAccessCodes:removedByUserUUID:]
  -[HMDAccessCodeManager accessCodeDataManager:didAddAccessoryAccessCodes:]
  -[HMDAccessCodeManager accessCodeDataManager:didUpdateAccessoryAccessCodes:]
  -[HMDAccessCodeManager accessCodeDataManager:didRemoveAccessoryAccessCodes:]
  -[HMDAccessCodeManager initWithContext:utilities:accessoryReaderWriter:dataManager:]
  -[HMDAccessCodeManager fetchAccessCodeForIdentifier:accessoryUUID:completion:]
  -[HMDAccessCodeManager hasCurrentUserAccessCodeChangedWithChangedAccessCodes:home:]
  -[HMDAccessCodeManager _updateCacheWithModificationRespponses:]
  -[HMDAccessCodeManager _redispatchToResidentIfNeccesaryForMessage:withNewResponseHandler:]
  -[HMDAccessCodeManager _fetchAccessCodesForMessage:]
  -[HMDAccessCodeManager _fetchAccessCodeConstraintsForMessage:]
  -[HMDAccessCodeManager _submitAccessCodeModificationRequestsForMessage:]
  -[HMDAccessCodeManager _removeSimpleLabelAccessCodeMessage:]
  -[HMDAccessCodeManager _removeAccessCodeFromAccessoriesKeepingiCloudDataUponFailure:]
  -[HMDAccessCodeManager _setAccessCodeForUserForMessage:]
  -[HMDAccessCodeManager _removeAccessCode:forUserWithUUID:removedByUserUUID:]
  -[HMDAccessCodeManager _removeAccessCode:forUser:removedByUserUUID:]
  -[HMDAccessCodeManager _removeAccessCode:forUserBeingRemoved:]
  -[HMDAccessCodeManager _resetAccessoryAccessCodesForMessage:]
  -[HMDAccessCodeManager _generateNewUserAccessCodeForMessage:]
  -[HMDAccessCodeManager _notifySubscribersOfMessageWithName:payload:]
  -[HMDAccessCodeManager _createNewAccessCodeForUserWithUUID:]
  -[HMDAccessCodeManager _resetAccessCodesForHomeAccessCode:]
  -[HMDAccessCodeManager _updateAccessCode:toNewValue:onAccessoriesWithFetchResponses:withRetries:]
  -[HMDAccessCodeManager _addNewAccessCode:toAccessoriesWithUUIDs:withRetries:]
  -[HMDAccessCodeManager _generateNewAccessCodeWithCompletion:]
  -[HMDAccessCodeManager _accessCodeForUserWithUUID:inHome:]
  -[HMDAccessCodeManager _updateAccessoryAccessCodeCache]
  -[HMDAccessCodeManager _waitUntilDataHasSyncedToResidentIfNecessaryForAccessoryUUIDs:]
  -[HMDAccessCodeManager _waitUntilDataHasSyncedToResidentForAccessoryUUIDs:]
  -[HMDAccessCodeManager accessoryReaderWriter]
  -[HMDAccessCodeManager setHomeAppForegrounded:]
  -[HMDAccessCodeManager subscribedClientConnections]


HMDAudioStreamInterfaceDataSource : HMFObject <HMDAudioStreamInterfaceDataSource>
 @property  BOOL muted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAudioStreamInterfaceDataSource isMuted]
  -[HMDAudioStreamInterfaceDataSource setMuted:]
  -[HMDAudioStreamInterfaceDataSource setAudioSessionPropertiesWithShouldAllowSystemSounds:]


HMDCameraClipsQuotaDisableCameraResponse : PBCodable <CKCodeOperationMessageMutation, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraClipsQuotaDisableCameraResponse copyTo:]
  -[HMDCameraClipsQuotaDisableCameraResponse mergeFrom:]
  -[HMDCameraClipsQuotaDisableCameraResponse dictionaryRepresentation]
  -[HMDCameraClipsQuotaDisableCameraResponse copyWithZone:]
  -[HMDCameraClipsQuotaDisableCameraResponse readFrom:]
  -[HMDCameraClipsQuotaDisableCameraResponse writeTo:]
  -[HMDCameraClipsQuotaDisableCameraResponse isEqual:]


HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL autoThirdPartySoftwareUpdateEnable
 @property  unsigned long numHAPAccessories
 @property  unsigned long numCameraAccessories
 @property  unsigned long numCameraAccessoriesRecordingEnabled
 @property  unsigned long numSecurityClassAccessories
 @property  unsigned long numCriticalSensorAccessories
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithAutoThirdPartyUpdateEnable:numHAPAccessories:numCameraAccessories:numCameraAccessoriesRecordingEnabled:numSecurityClassAccessories:numCriticalSensorAccessories:]
  +[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventWithHome:]

  // instance methods
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent eventName]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent serializedEvent]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent initWithAutoThirdPartyUpdateEnable:numHAPAccessories:numCameraAccessories:numCameraAccessoriesRecordingEnabled:numSecurityClassAccessories:numCriticalSensorAccessories:]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent autoThirdPartySoftwareUpdateEnable]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent numHAPAccessories]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent numCameraAccessories]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent numCameraAccessoriesRecordingEnabled]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent numSecurityClassAccessories]
  -[HMDAccessorySoftwareUpdateAutoThirdPartyToggledEvent numCriticalSensorAccessories]


HMDCameraClipsQuotaDisableCameraMessage : PBCodable <CKCodeOperationMessageMutation, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL hasZoneName
 @property  NSString *zoneName

  // instance methods
  -[HMDCameraClipsQuotaDisableCameraMessage copyTo:]
  -[HMDCameraClipsQuotaDisableCameraMessage zoneName]
  -[HMDCameraClipsQuotaDisableCameraMessage .cxx_destruct]
  -[HMDCameraClipsQuotaDisableCameraMessage mergeFrom:]
  -[HMDCameraClipsQuotaDisableCameraMessage dictionaryRepresentation]
  -[HMDCameraClipsQuotaDisableCameraMessage copyWithZone:]
  -[HMDCameraClipsQuotaDisableCameraMessage setZoneName:]
  -[HMDCameraClipsQuotaDisableCameraMessage hasZoneName]
  -[HMDCameraClipsQuotaDisableCameraMessage readFrom:]
  -[HMDCameraClipsQuotaDisableCameraMessage writeTo:]
  -[HMDCameraClipsQuotaDisableCameraMessage isEqual:]


HMDMicroLocationLogEventObserver : HMFObject <HMFLogging, HMMLogEventObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMicroLocationLogEventObserver logCategory]

  // instance methods
  -[HMDMicroLocationLogEventObserver .cxx_destruct]
  -[HMDMicroLocationLogEventObserver didReceiveEventFromDispatcher:]
  -[HMDMicroLocationLogEventObserver initWithDataSource:microLocationManager:]


AWDHomeKitSoftwareUpdateFetched : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasResultErrorCode
 @property  unsigned int resultErrorCode
 @property  BOOL hasSource
 @property  int source
 @property  BOOL hasWasNewUpdateFetched
 @property  BOOL wasNewUpdateFetched

  // instance methods
  -[AWDHomeKitSoftwareUpdateFetched source]
  -[AWDHomeKitSoftwareUpdateFetched setHasSource:]
  -[AWDHomeKitSoftwareUpdateFetched sourceAsString:]
  -[AWDHomeKitSoftwareUpdateFetched hasSource]
  -[AWDHomeKitSoftwareUpdateFetched setDuration:]
  -[AWDHomeKitSoftwareUpdateFetched setSource:]
  -[AWDHomeKitSoftwareUpdateFetched setTimestamp:]
  -[AWDHomeKitSoftwareUpdateFetched hasDuration]
  -[AWDHomeKitSoftwareUpdateFetched copyTo:]
  -[AWDHomeKitSoftwareUpdateFetched StringAsSource:]
  -[AWDHomeKitSoftwareUpdateFetched duration]
  -[AWDHomeKitSoftwareUpdateFetched mergeFrom:]
  -[AWDHomeKitSoftwareUpdateFetched setHasTimestamp:]
  -[AWDHomeKitSoftwareUpdateFetched dictionaryRepresentation]
  -[AWDHomeKitSoftwareUpdateFetched hasTimestamp]
  -[AWDHomeKitSoftwareUpdateFetched copyWithZone:]
  -[AWDHomeKitSoftwareUpdateFetched timestamp]
  -[AWDHomeKitSoftwareUpdateFetched readFrom:]
  -[AWDHomeKitSoftwareUpdateFetched setHasDuration:]
  -[AWDHomeKitSoftwareUpdateFetched writeTo:]
  -[AWDHomeKitSoftwareUpdateFetched isEqual:]
  -[AWDHomeKitSoftwareUpdateFetched setResultErrorCode:]
  -[AWDHomeKitSoftwareUpdateFetched setHasResultErrorCode:]
  -[AWDHomeKitSoftwareUpdateFetched hasResultErrorCode]
  -[AWDHomeKitSoftwareUpdateFetched setWasNewUpdateFetched:]
  -[AWDHomeKitSoftwareUpdateFetched setHasWasNewUpdateFetched:]
  -[AWDHomeKitSoftwareUpdateFetched hasWasNewUpdateFetched]
  -[AWDHomeKitSoftwareUpdateFetched resultErrorCode]
  -[AWDHomeKitSoftwareUpdateFetched wasNewUpdateFetched]


AWDHomeKitVideoResolutionCount : PBCodable <NSCopying>
 @property  BOOL hasResolution
 @property  int resolution
 @property  BOOL hasCount
 @property  unsigned int count

  // instance methods
  -[AWDHomeKitVideoResolutionCount setCount:]
  -[AWDHomeKitVideoResolutionCount copyTo:]
  -[AWDHomeKitVideoResolutionCount setResolution:]
  -[AWDHomeKitVideoResolutionCount resolution]
  -[AWDHomeKitVideoResolutionCount count]
  -[AWDHomeKitVideoResolutionCount mergeFrom:]
  -[AWDHomeKitVideoResolutionCount dictionaryRepresentation]
  -[AWDHomeKitVideoResolutionCount copyWithZone:]
  -[AWDHomeKitVideoResolutionCount readFrom:]
  -[AWDHomeKitVideoResolutionCount writeTo:]
  -[AWDHomeKitVideoResolutionCount isEqual:]
  -[AWDHomeKitVideoResolutionCount setHasCount:]
  -[AWDHomeKitVideoResolutionCount hasCount]
  -[AWDHomeKitVideoResolutionCount hasResolution]
  -[AWDHomeKitVideoResolutionCount setHasResolution:]
  -[AWDHomeKitVideoResolutionCount resolutionAsString:]
  -[AWDHomeKitVideoResolutionCount StringAsResolution:]


HMDMediaDestinationsManager : HMFObject <HMDMediaDestinationsMessageHandlerDelegate, HMFLogging, HMDMediaDestinationsMessageHandlerDataSource, HMDMediaDestinationManager>
 @property  <HMDMediaDestinationsManagerDataSource> *dataSource
 @property  <HMDMediaDestinationsManagerDelegate> *delegate
 @property  HMMediaDestination *destination
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *identifier
 @property  HMMediaDestination *committedDestination
 @property  HMDMediaDestinationMessageHandler *messageHandler

  // class methods
  +[HMDMediaDestinationsManager logCategory]
  +[HMDMediaDestinationsManager deriveSupportedOptionsFromDestinations:]
  +[HMDMediaDestinationsManager deriveAudioGroupIdentifierFromDestinations:]

  // instance methods
  -[HMDMediaDestinationsManager setDestination:]
  -[HMDMediaDestinationsManager identifier]
  -[HMDMediaDestinationsManager logIdentifier]
  -[HMDMediaDestinationsManager destination]
  -[HMDMediaDestinationsManager dataSource]
  -[HMDMediaDestinationsManager setDelegate:]
  -[HMDMediaDestinationsManager messageHandler]
  -[HMDMediaDestinationsManager delegate]
  -[HMDMediaDestinationsManager attributeDescriptions]
  -[HMDMediaDestinationsManager privateDescription]
  -[HMDMediaDestinationsManager .cxx_destruct]
  -[HMDMediaDestinationsManager setDataSource:]
  -[HMDMediaDestinationsManager mediaDestinationMessageHandler:didReceiveUpdateSupportedOptionsRequestMessage:supportOptions:]
  -[HMDMediaDestinationsManager mediaDestinationMessageHandler:didReceiveUpdateAudioGroupIdentifierRequestMessage:audioGroupIdentifier:]
  -[HMDMediaDestinationsManager mediaDestinationsMessageHandler:didReceiveDestinationUpdatedNotification:destination:]
  -[HMDMediaDestinationsManager messageHandler:shouldRelayIncomingMessage:]
  -[HMDMediaDestinationsManager messageHandler:deviceForOutgoingMessage:]
  -[HMDMediaDestinationsManager messageHandler:isReadyForIncomingMessage:]
  -[HMDMediaDestinationsManager stageAudioGroupIdentifier:]
  -[HMDMediaDestinationsManager requestToUpdateAudioGroupIdentifier:completion:]
  -[HMDMediaDestinationsManager committedDestination]
  -[HMDMediaDestinationsManager initWithDestination:messageDispatcher:notificationCenter:dataSource:delegate:]
  -[HMDMediaDestinationsManager initWithDestination:messageHandler:dataSource:delegate:]
  -[HMDMediaDestinationsManager configureWithHome:]
  -[HMDMediaDestinationsManager _requestToUpdateAudioGroupIdentifier:completion:]
  -[HMDMediaDestinationsManager legacyRequestToUpdateAudioGroupIdentifier:completion:]
  -[HMDMediaDestinationsManager refreshDestination]
  -[HMDMediaDestinationsManager sendRequestsToUpdateSupportOptions:]
  -[HMDMediaDestinationsManager sendRequestsToUpdateAudioGroupIdentifier:]
  -[HMDMediaDestinationsManager deriveAudioDestination]
  -[HMDMediaDestinationsManager defaultDestination]
  -[HMDMediaDestinationsManager mediaGroupsAggregatorMessenger]
  -[HMDMediaDestinationsManager dataSourceAssociatedDestinations]
  -[HMDMediaDestinationsManager dataSourceAssociatedDestinationManagers]
  -[HMDMediaDestinationsManager dataSourceTargetAccessory]
  -[HMDMediaDestinationsManager dataSourceDestinationControllerWithIdentifier:]


HMDAccessoryAccessCodeReaderWriter : HMFObject <HMFLogging>
 @property  HMDAccessCodeManagerContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryAccessCodeReaderWriter logCategory]
  +[HMDAccessoryAccessCodeReaderWriter _createListWriteRequestsForCharacteristics:]
  +[HMDAccessoryAccessCodeReaderWriter _createReadWriteRequestsForAccessCodeIdentifiersByCharacteristic:]
  +[HMDAccessoryAccessCodeReaderWriter accessCodeFetchResponsesForReadWriteResponses:ofWriteRequests:]
  +[HMDAccessoryAccessCodeReaderWriter identifiersFromListWriteResponses:ofWriteRequests:]
  +[HMDAccessoryAccessCodeReaderWriter createConstraintsFromReadResponses:readRequests:]
  +[HMDAccessoryAccessCodeReaderWriter _accessCodeControlFromWriteResponses:forWriteRequest:]
  +[HMDAccessoryAccessCodeReaderWriter createModificationResponsesForWriteResponses:ofRequestPairs:]
  +[HMDAccessoryAccessCodeReaderWriter genericModificationResponseForFailedRequest:]
  +[HMDAccessoryAccessCodeReaderWriter modificationResponseForControlResponse:operationType:accessoryUUID:]
  +[HMDAccessoryAccessCodeReaderWriter hmPrivateErrorCodeForHAPAccessCodeError:]
  +[HMDAccessoryAccessCodeReaderWriter createWriteRequestsForModificationRequests:hapAccessories:]
  +[HMDAccessoryAccessCodeReaderWriter createWriteRequestForAddRequests:characteristic:]
  +[HMDAccessoryAccessCodeReaderWriter createWriteRequestForUpdateRequests:characteristic:]
  +[HMDAccessoryAccessCodeReaderWriter createWriteRequestForRemoveRequests:characteristic:]

  // instance methods
  -[HMDAccessoryAccessCodeReaderWriter configure]
  -[HMDAccessoryAccessCodeReaderWriter logIdentifier]
  -[HMDAccessoryAccessCodeReaderWriter initWithContext:]
  -[HMDAccessoryAccessCodeReaderWriter .cxx_destruct]
  -[HMDAccessoryAccessCodeReaderWriter context]
  -[HMDAccessoryAccessCodeReaderWriter readAccessCodesFromAccessoriesWithUUIDs:]
  -[HMDAccessoryAccessCodeReaderWriter readAccessCodeWithIdentifier:accessoryUUID:]
  -[HMDAccessoryAccessCodeReaderWriter removeAllAccessCodesWithValue:]
  -[HMDAccessoryAccessCodeReaderWriter _readAccessCodeWithIdentifier:accessoryUUID:]
  -[HMDAccessoryAccessCodeReaderWriter readConstraintsFromAccessoriesWithUUIDs:]
  -[HMDAccessoryAccessCodeReaderWriter readConstraintsAndAccessCodesFromAccessoriesWithUUIDs:completion:]
  -[HMDAccessoryAccessCodeReaderWriter _readConstraintsAndAccessCodesFromAccessoriesWithUUIDs:completion:]
  -[HMDAccessoryAccessCodeReaderWriter _performWriteRequests:withRetries:]
  -[HMDAccessoryAccessCodeReaderWriter _performReadRequests:withRetries:]
  -[HMDAccessoryAccessCodeReaderWriter performAccessCodeModificationRequests:withRetries:]
  -[HMDAccessoryAccessCodeReaderWriter _readConstraintsFromAccessoriesWithUUIDs:withRetries:]
  -[HMDAccessoryAccessCodeReaderWriter _readAccessCodesFromAccessoriesWithUUIDs:withRetries:]
  -[HMDAccessoryAccessCodeReaderWriter _createConstraintsReadRequestsForAccessoriesWithUUIDs:]
  -[HMDAccessoryAccessCodeReaderWriter _createListWriteRequestsForAccessoriesWithUUIDS:]
  -[HMDAccessoryAccessCodeReaderWriter _characteristicsOfType:fromAccessoriesWithUUIDs:]
  -[HMDAccessoryAccessCodeReaderWriter _createReadWriteRequestsForAccessCodeIdentifiers:]
  -[HMDAccessoryAccessCodeReaderWriter _createWriteRequestsForModificationRequests:]
  -[HMDAccessoryAccessCodeReaderWriter _createModificationResponsesForWriteResponses:ofRequestPairs:]


HMProvisionAnisetteDataRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMProvisionAnisetteDataRequest supportsSecureCoding]
  +[HMProvisionAnisetteDataRequest messageName]
  +[HMProvisionAnisetteDataRequest objWithDict:]
  +[HMProvisionAnisetteDataRequest objWithMessage:]
  +[HMProvisionAnisetteDataRequest xpcMessageName]

  // instance methods
  -[HMProvisionAnisetteDataRequest messagePayload]
  -[HMProvisionAnisetteDataRequest messageName]
  -[HMProvisionAnisetteDataRequest xpcMessageName]


HMProvisionAnisetteDataResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  BOOL didSucceed
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMProvisionAnisetteDataResponse supportsSecureCoding]
  +[HMProvisionAnisetteDataResponse messageName]
  +[HMProvisionAnisetteDataResponse objWithDict:]
  +[HMProvisionAnisetteDataResponse objWithMessage:]
  +[HMProvisionAnisetteDataResponse xpcMessageName]

  // instance methods
  -[HMProvisionAnisetteDataResponse encodeWithCoder:]
  -[HMProvisionAnisetteDataResponse messagePayload]
  -[HMProvisionAnisetteDataResponse messageName]
  -[HMProvisionAnisetteDataResponse initWithCoder:]
  -[HMProvisionAnisetteDataResponse didSucceed]
  -[HMProvisionAnisetteDataResponse setDidSucceed:]
  -[HMProvisionAnisetteDataResponse xpcMessageName]


HMSyncAnisetteDataRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  NSData *simData
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMSyncAnisetteDataRequest supportsSecureCoding]
  +[HMSyncAnisetteDataRequest messageName]
  +[HMSyncAnisetteDataRequest objWithDict:]
  +[HMSyncAnisetteDataRequest objWithMessage:]
  +[HMSyncAnisetteDataRequest xpcMessageName]

  // instance methods
  -[HMSyncAnisetteDataRequest encodeWithCoder:]
  -[HMSyncAnisetteDataRequest messagePayload]
  -[HMSyncAnisetteDataRequest messageName]
  -[HMSyncAnisetteDataRequest .cxx_destruct]
  -[HMSyncAnisetteDataRequest initWithCoder:]
  -[HMSyncAnisetteDataRequest xpcMessageName]
  -[HMSyncAnisetteDataRequest simData]
  -[HMSyncAnisetteDataRequest setSimData:]


HMSyncAnisetteDataResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  BOOL didSucceed
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMSyncAnisetteDataResponse supportsSecureCoding]
  +[HMSyncAnisetteDataResponse messageName]
  +[HMSyncAnisetteDataResponse objWithDict:]
  +[HMSyncAnisetteDataResponse objWithMessage:]
  +[HMSyncAnisetteDataResponse xpcMessageName]

  // instance methods
  -[HMSyncAnisetteDataResponse encodeWithCoder:]
  -[HMSyncAnisetteDataResponse messagePayload]
  -[HMSyncAnisetteDataResponse messageName]
  -[HMSyncAnisetteDataResponse initWithCoder:]
  -[HMSyncAnisetteDataResponse didSucceed]
  -[HMSyncAnisetteDataResponse setDidSucceed:]
  -[HMSyncAnisetteDataResponse xpcMessageName]


HMEraseAnisetteDataRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMEraseAnisetteDataRequest supportsSecureCoding]
  +[HMEraseAnisetteDataRequest messageName]
  +[HMEraseAnisetteDataRequest objWithDict:]
  +[HMEraseAnisetteDataRequest objWithMessage:]
  +[HMEraseAnisetteDataRequest xpcMessageName]

  // instance methods
  -[HMEraseAnisetteDataRequest messagePayload]
  -[HMEraseAnisetteDataRequest messageName]
  -[HMEraseAnisetteDataRequest xpcMessageName]


HMEraseAnisetteDataResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  BOOL didSucceed
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMEraseAnisetteDataResponse supportsSecureCoding]
  +[HMEraseAnisetteDataResponse messageName]
  +[HMEraseAnisetteDataResponse objWithDict:]
  +[HMEraseAnisetteDataResponse objWithMessage:]
  +[HMEraseAnisetteDataResponse xpcMessageName]

  // instance methods
  -[HMEraseAnisetteDataResponse encodeWithCoder:]
  -[HMEraseAnisetteDataResponse messagePayload]
  -[HMEraseAnisetteDataResponse messageName]
  -[HMEraseAnisetteDataResponse initWithCoder:]
  -[HMEraseAnisetteDataResponse didSucceed]
  -[HMEraseAnisetteDataResponse setDidSucceed:]
  -[HMEraseAnisetteDataResponse xpcMessageName]


HMFetchAnisetteDataRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  BOOL shouldProvision
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMFetchAnisetteDataRequest supportsSecureCoding]
  +[HMFetchAnisetteDataRequest messageName]
  +[HMFetchAnisetteDataRequest objWithDict:]
  +[HMFetchAnisetteDataRequest objWithMessage:]
  +[HMFetchAnisetteDataRequest xpcMessageName]

  // instance methods
  -[HMFetchAnisetteDataRequest encodeWithCoder:]
  -[HMFetchAnisetteDataRequest messagePayload]
  -[HMFetchAnisetteDataRequest messageName]
  -[HMFetchAnisetteDataRequest initWithCoder:]
  -[HMFetchAnisetteDataRequest xpcMessageName]
  -[HMFetchAnisetteDataRequest shouldProvision]
  -[HMFetchAnisetteDataRequest setShouldProvision:]


HMFetchAnisetteDataResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  AKAnisetteData *anisetteData
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMFetchAnisetteDataResponse supportsSecureCoding]
  +[HMFetchAnisetteDataResponse messageName]
  +[HMFetchAnisetteDataResponse objWithDict:]
  +[HMFetchAnisetteDataResponse objWithMessage:]
  +[HMFetchAnisetteDataResponse xpcMessageName]

  // instance methods
  -[HMFetchAnisetteDataResponse encodeWithCoder:]
  -[HMFetchAnisetteDataResponse messagePayload]
  -[HMFetchAnisetteDataResponse messageName]
  -[HMFetchAnisetteDataResponse .cxx_destruct]
  -[HMFetchAnisetteDataResponse initWithCoder:]
  -[HMFetchAnisetteDataResponse xpcMessageName]
  -[HMFetchAnisetteDataResponse anisetteData]
  -[HMFetchAnisetteDataResponse setAnisetteData:]


HMLegacyAnisetteDataRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  NSString *dsid
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMLegacyAnisetteDataRequest supportsSecureCoding]
  +[HMLegacyAnisetteDataRequest messageName]
  +[HMLegacyAnisetteDataRequest objWithDict:]
  +[HMLegacyAnisetteDataRequest objWithMessage:]
  +[HMLegacyAnisetteDataRequest xpcMessageName]

  // instance methods
  -[HMLegacyAnisetteDataRequest dsid]
  -[HMLegacyAnisetteDataRequest setDsid:]
  -[HMLegacyAnisetteDataRequest encodeWithCoder:]
  -[HMLegacyAnisetteDataRequest messagePayload]
  -[HMLegacyAnisetteDataRequest messageName]
  -[HMLegacyAnisetteDataRequest .cxx_destruct]
  -[HMLegacyAnisetteDataRequest initWithCoder:]
  -[HMLegacyAnisetteDataRequest xpcMessageName]


HMLegacyAnisetteDataResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  AKAnisetteData *anisetteData
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMLegacyAnisetteDataResponse supportsSecureCoding]
  +[HMLegacyAnisetteDataResponse messageName]
  +[HMLegacyAnisetteDataResponse objWithDict:]
  +[HMLegacyAnisetteDataResponse objWithMessage:]
  +[HMLegacyAnisetteDataResponse xpcMessageName]

  // instance methods
  -[HMLegacyAnisetteDataResponse encodeWithCoder:]
  -[HMLegacyAnisetteDataResponse messagePayload]
  -[HMLegacyAnisetteDataResponse messageName]
  -[HMLegacyAnisetteDataResponse .cxx_destruct]
  -[HMLegacyAnisetteDataResponse initWithCoder:]
  -[HMLegacyAnisetteDataResponse xpcMessageName]
  -[HMLegacyAnisetteDataResponse anisetteData]
  -[HMLegacyAnisetteDataResponse setAnisetteData:]


HMDMediaDestinationControllerBackingStoreHandler : HMDBackingStoreHandler <HMFLogging>
 @property  <HMDMediaDestinationControllerBackingStoreHandlerDelegate> *delegate
 @property  HMDMediaDestinationControllerMetricsEventDispatcher *metricsEventDispatcher
 @property  HMMediaDestinationControllerData *data
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationControllerBackingStoreHandler logCategory]
  +[HMDMediaDestinationControllerBackingStoreHandler backingStoreObjectForData:]

  // instance methods
  -[HMDMediaDestinationControllerBackingStoreHandler logIdentifier]
  -[HMDMediaDestinationControllerBackingStoreHandler setDelegate:]
  -[HMDMediaDestinationControllerBackingStoreHandler delegate]
  -[HMDMediaDestinationControllerBackingStoreHandler .cxx_destruct]
  -[HMDMediaDestinationControllerBackingStoreHandler data]
  -[HMDMediaDestinationControllerBackingStoreHandler transactionObjectUpdated:newValues:message:]
  -[HMDMediaDestinationControllerBackingStoreHandler transactionObjectRemoved:message:]
  -[HMDMediaDestinationControllerBackingStoreHandler initWithData:backingStore:metricsEventDispatcher:delegate:]
  -[HMDMediaDestinationControllerBackingStoreHandler updateDestinationIdentifier:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler updateAvailableDestinationIdentifiers:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler removeControllerWithCompletion:]
  -[HMDMediaDestinationControllerBackingStoreHandler mergeData:]
  -[HMDMediaDestinationControllerBackingStoreHandler migrateWithHome:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler recoverDueToNoRecordInCloudWithHome:migrationQueue:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler migrateWithCurrentCloudRecord:home:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler recoverDueToInvalidRecordInCloudWithHome:migrationQueue:completion:]
  -[HMDMediaDestinationControllerBackingStoreHandler updateDestinationIdentifier:]
  -[HMDMediaDestinationControllerBackingStoreHandler updateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationControllerBackingStoreHandler notifyDidUpdateDestinationIdentifier:]
  -[HMDMediaDestinationControllerBackingStoreHandler notifyDidUpdateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationControllerBackingStoreHandler transactionObjectUpdatedDestinationIdentifier:message:]
  -[HMDMediaDestinationControllerBackingStoreHandler transactionObjectUpdatedAvailableDestinationIdentifiers:message:]
  -[HMDMediaDestinationControllerBackingStoreHandler metricsEventDispatcher]
  -[HMDMediaDestinationControllerBackingStoreHandler setMetricsEventDispatcher:]


_HMDIDSProxyLinkPreferenceAssertion : HMFObject
 @property  <HMDIDSService> *proxyService

  // instance methods
  -[_HMDIDSProxyLinkPreferenceAssertion dealloc]
  -[_HMDIDSProxyLinkPreferenceAssertion .cxx_destruct]
  -[_HMDIDSProxyLinkPreferenceAssertion initWithIDSProxyService:]
  -[_HMDIDSProxyLinkPreferenceAssertion proxyService]


HMDIDSServiceManager : HMFObject <HMFLogging>
 @property  <HMDIDSService> *service
 @property  <HMDIDSService> *modernService
 @property  <HMDIDSService> *proxyService
 @property  <HMDIDSService> *streamService
 @property  HMDIDSActivityMonitorBroadcaster *activityBroadcaster
 @property  HMDIDSActivityMonitorObserver *activityObserver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSServiceManager sharedManager]
  +[HMDIDSServiceManager logCategory]
  +[HMDIDSServiceManager sharedIDSServiceName]

  // instance methods
  -[HMDIDSServiceManager configure]
  -[HMDIDSServiceManager .cxx_destruct]
  -[HMDIDSServiceManager service]
  -[HMDIDSServiceManager initWithDefaults]
  -[HMDIDSServiceManager retrieveFirewallWithQueue:completion:]
  -[HMDIDSServiceManager unconfigure]
  -[HMDIDSServiceManager proxyService]
  -[HMDIDSServiceManager initWithMainService:modernService:proxyService:streamService:notificationCenter:]
  -[HMDIDSServiceManager setActivityMonitorDataSource:]
  -[HMDIDSServiceManager addProxyServiceLinkPreferencesAssertionHolder:]
  -[HMDIDSServiceManager handleProcessInfoStateChanged:]
  -[HMDIDSServiceManager modernService]
  -[HMDIDSServiceManager streamService]
  -[HMDIDSServiceManager activityBroadcaster]
  -[HMDIDSServiceManager activityObserver]


HMDAppleMediaAccessoryMatchingIdentifierEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSNumber *matchingIdentifiersCount
 @property  NSNumber *expectedRemovalCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent eventName]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent attributeDescriptions]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent .cxx_destruct]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent serializedEvent]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent initWithMatchingIdentifiersCount:]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent matchingIdentifiersCount]
  -[HMDAppleMediaAccessoryMatchingIdentifierEvent expectedRemovalCount]


HMDCameraRecordingSessionCoordinationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL usingRemoteDeviceAnalysisNode
 @property  unsigned long retryCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCameraRecordingSessionCoordinationLogEvent eventName]
  -[HMDCameraRecordingSessionCoordinationLogEvent retryCount]
  -[HMDCameraRecordingSessionCoordinationLogEvent setRetryCount:]
  -[HMDCameraRecordingSessionCoordinationLogEvent serializedEvent]
  -[HMDCameraRecordingSessionCoordinationLogEvent isUsingRemoteDeviceAnalysisNode]
  -[HMDCameraRecordingSessionCoordinationLogEvent setUsingRemoteDeviceAnalysisNode:]


HMDCameraRecordingBulkSessionStartLogEvent : HMMLogEvent
 @property  NSString *accessoryIdentifier

  // instance methods
  -[HMDCameraRecordingBulkSessionStartLogEvent .cxx_destruct]
  -[HMDCameraRecordingBulkSessionStartLogEvent accessoryIdentifier]
  -[HMDCameraRecordingBulkSessionStartLogEvent initWithAccessoryIdentifier:]


HMDCameraRecordingBulkSessionEndLogEvent : HMMLogEvent
 @property  NSString *accessoryIdentifier

  // instance methods
  -[HMDCameraRecordingBulkSessionEndLogEvent .cxx_destruct]
  -[HMDCameraRecordingBulkSessionEndLogEvent accessoryIdentifier]
  -[HMDCameraRecordingBulkSessionEndLogEvent initWithAccessoryIdentifier:]


HMDFetchedSettingsDriverHomePodSettings : NSObject <HMDHPSAccessorySettingServiceDelegate, HMDFetchedSettingsDriver, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDHPSAccessorySettingService> *service
 @property  <HMDHPSSettingsObjectFactoryProtocol> *hmdhpsObjectFactory
 @property  <HMDFetchedSettingsDriverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDFetchedSettingsDriverHomePodSettings logCategory]

  // instance methods
  -[HMDFetchedSettingsDriverHomePodSettings setDelegate:]
  -[HMDFetchedSettingsDriverHomePodSettings delegate]
  -[HMDFetchedSettingsDriverHomePodSettings .cxx_destruct]
  -[HMDFetchedSettingsDriverHomePodSettings didReconnect]
  -[HMDFetchedSettingsDriverHomePodSettings service]
  -[HMDFetchedSettingsDriverHomePodSettings queue]
  -[HMDFetchedSettingsDriverHomePodSettings didUpdateSetting:forKeyPath:]
  -[HMDFetchedSettingsDriverHomePodSettings startWithKeyPaths:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings fetchSettingsForKeyPaths:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings updateSettingWithKeyPath:boolSettingValue:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings updateSettingWithKeyPath:integerSettingValue:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings updateSettingWithKeyPath:languageSettingValue:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings languageValueListWithCompletion:]
  -[HMDFetchedSettingsDriverHomePodSettings updateSettingWithKeyPath:primaryUserInfo:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings initWithQueue:settingsObjectFactory:]
  -[HMDFetchedSettingsDriverHomePodSettings _hpLanguageValueFromLanguageValue:]
  -[HMDFetchedSettingsDriverHomePodSettings _transformToImmutableSetting:]
  -[HMDFetchedSettingsDriverHomePodSettings _transformPreferredMediaUserEvent:]
  -[HMDFetchedSettingsDriverHomePodSettings _readSettingsAtKeyPaths:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings _processReadResults:error:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings _writeSetting:keyPath:completion:]
  -[HMDFetchedSettingsDriverHomePodSettings _languageValueList]
  -[HMDFetchedSettingsDriverHomePodSettings serviceDidInitializeForCurrentAccessory:]
  -[HMDFetchedSettingsDriverHomePodSettings hmdhpsObjectFactory]


HMDMobileAssetManager : NSObject
 @property  BOOL indexDownloaded
 @property  NSBackgroundActivityScheduler *scheduler
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDMobileAssetManagerDelegate> *delegate

  // instance methods
  -[HMDMobileAssetManager scheduler]
  -[HMDMobileAssetManager setDelegate:]
  -[HMDMobileAssetManager workQueue]
  -[HMDMobileAssetManager delegate]
  -[HMDMobileAssetManager setWorkQueue:]
  -[HMDMobileAssetManager .cxx_destruct]
  -[HMDMobileAssetManager _updateMetadata]
  -[HMDMobileAssetManager init]
  -[HMDMobileAssetManager purgeAllInstalledAssets]
  -[HMDMobileAssetManager handleMetadataAssetUpdated]
  -[HMDMobileAssetManager _downloadNewAsset:availableVersion:newVersion:]
  -[HMDMobileAssetManager _installAvailableAsset:version:]
  -[HMDMobileAssetManager _downloadCatalogAndUpdateMetadataIfAble]
  -[HMDMobileAssetManager _handleMetadataAssetUpdated]
  -[HMDMobileAssetManager indexDownloaded]
  -[HMDMobileAssetManager setIndexDownloaded:]


HMDStreamingStatus : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  unsigned long streamingStatus
 @property  NSData *tlvData

  // class methods
  +[HMDStreamingStatus supportsSecureCoding]

  // instance methods
  -[HMDStreamingStatus encodeWithCoder:]
  -[HMDStreamingStatus initWithCoder:]
  -[HMDStreamingStatus description:indent:]
  -[HMDStreamingStatus _parseFromTLVData]
  -[HMDStreamingStatus tlvData]
  -[HMDStreamingStatus streamingStatus]


HMDH264Profile : HAPNumberParser <NSSecureCoding>
 @property  unsigned long h264Profile

  // class methods
  +[HMDH264Profile supportsSecureCoding]
  +[HMDH264Profile arrayWithProfiles:]

  // instance methods
  -[HMDH264Profile encodeWithCoder:]
  -[HMDH264Profile isEqual:]
  -[HMDH264Profile initWithCoder:]
  -[HMDH264Profile description:indent:]
  -[HMDH264Profile initWithTLVData:]
  -[HMDH264Profile initWithH264Profile:]
  -[HMDH264Profile h264Profile]


HMDH264Level : HAPNumberParser <NSSecureCoding>
 @property  unsigned long h264Level

  // class methods
  +[HMDH264Level supportsSecureCoding]
  +[HMDH264Level arrayWithLevels:]

  // instance methods
  -[HMDH264Level encodeWithCoder:]
  -[HMDH264Level isEqual:]
  -[HMDH264Level initWithCoder:]
  -[HMDH264Level description:indent:]
  -[HMDH264Level initWithTLVData:]
  -[HMDH264Level initWithH264Level:]
  -[HMDH264Level h264Level]


HMDPacketizationMode : HAPNumberParser <NSSecureCoding>
 @property  unsigned long packetizationMode

  // class methods
  +[HMDPacketizationMode supportsSecureCoding]
  +[HMDPacketizationMode arrayWithModes:]

  // instance methods
  -[HMDPacketizationMode encodeWithCoder:]
  -[HMDPacketizationMode isEqual:]
  -[HMDPacketizationMode initWithCoder:]
  -[HMDPacketizationMode description:indent:]
  -[HMDPacketizationMode initWithTLVData:]
  -[HMDPacketizationMode initWithPacketizationMode:]
  -[HMDPacketizationMode packetizationMode]


HMDVideoCodecParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSArray *h264Profiles
 @property  NSArray *levels
 @property  NSArray *packetizationModes
 @property  NSData *tlvData

  // class methods
  +[HMDVideoCodecParameters supportsSecureCoding]

  // instance methods
  -[HMDVideoCodecParameters encodeWithCoder:]
  -[HMDVideoCodecParameters .cxx_destruct]
  -[HMDVideoCodecParameters initWithCoder:]
  -[HMDVideoCodecParameters levels]
  -[HMDVideoCodecParameters description:indent:]
  -[HMDVideoCodecParameters _parseFromTLVData]
  -[HMDVideoCodecParameters tlvData]
  -[HMDVideoCodecParameters initWithProfiles:levels:packetizationModes:]
  -[HMDVideoCodecParameters h264Profiles]
  -[HMDVideoCodecParameters packetizationModes]


HMDVideoResolution : HAPNumberParser <NSSecureCoding, NSCopying>
 @property  NSNumber *imageWidth
 @property  NSNumber *imageHeight
 @property  unsigned long resolutionType

  // class methods
  +[HMDVideoResolution supportsSecureCoding]
  +[HMDVideoResolution arrayWithResolutions:]

  // instance methods
  -[HMDVideoResolution encodeWithCoder:]
  -[HMDVideoResolution .cxx_destruct]
  -[HMDVideoResolution copyWithZone:]
  -[HMDVideoResolution isEqual:]
  -[HMDVideoResolution initWithCoder:]
  -[HMDVideoResolution imageWidth]
  -[HMDVideoResolution imageHeight]
  -[HMDVideoResolution description:indent:]
  -[HMDVideoResolution initWithTLVData:]
  -[HMDVideoResolution resolutionType]
  -[HMDVideoResolution initWithResolution:]
  -[HMDVideoResolution _extractWidthAndHeight]


HMDVideoAttributes : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *imageWidth
 @property  NSNumber *imageHeight
 @property  HMDVideoResolution *videoResolution
 @property  NSNumber *framerate
 @property  NSData *tlvData

  // class methods
  +[HMDVideoAttributes supportsSecureCoding]
  +[HMDVideoAttributes translateImageResolution:imageWidth:imageHeight:]

  // instance methods
  -[HMDVideoAttributes framerate]
  -[HMDVideoAttributes encodeWithCoder:]
  -[HMDVideoAttributes .cxx_destruct]
  -[HMDVideoAttributes initWithCoder:]
  -[HMDVideoAttributes imageWidth]
  -[HMDVideoAttributes imageHeight]
  -[HMDVideoAttributes videoResolution]
  -[HMDVideoAttributes description:indent:]
  -[HMDVideoAttributes _parseFromTLVData]
  -[HMDVideoAttributes tlvData]
  -[HMDVideoAttributes initWithResolution:framerate:]
  -[HMDVideoAttributes translateImageWidth:imageHeight:]


HMDVideoCodec : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long codecType

  // class methods
  +[HMDVideoCodec supportsSecureCoding]
  +[HMDVideoCodec arrayWithCodecTypes:]

  // instance methods
  -[HMDVideoCodec encodeWithCoder:]
  -[HMDVideoCodec copyWithZone:]
  -[HMDVideoCodec isEqual:]
  -[HMDVideoCodec initWithCoder:]
  -[HMDVideoCodec description:indent:]
  -[HMDVideoCodec initWithTLVData:]
  -[HMDVideoCodec codecType]
  -[HMDVideoCodec initWithCodec:]


HMDVideoCodecConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDVideoCodec *videoCodec
 @property  HMDVideoCodecParameters *codecParameters
 @property  NSArray *videoAttributes
 @property  NSData *tlvData

  // class methods
  +[HMDVideoCodecConfiguration supportsSecureCoding]

  // instance methods
  -[HMDVideoCodecConfiguration encodeWithCoder:]
  -[HMDVideoCodecConfiguration .cxx_destruct]
  -[HMDVideoCodecConfiguration videoCodec]
  -[HMDVideoCodecConfiguration initWithCoder:]
  -[HMDVideoCodecConfiguration videoAttributes]
  -[HMDVideoCodecConfiguration description:indent:]
  -[HMDVideoCodecConfiguration codecParameters]
  -[HMDVideoCodecConfiguration _parseFromTLVData]
  -[HMDVideoCodecConfiguration tlvData]
  -[HMDVideoCodecConfiguration initWithCodec:codecParameters:attributes:]


HMDSupportedVideoStreamConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSDictionary *codecConfigurations
 @property  NSData *tlvData

  // class methods
  +[HMDSupportedVideoStreamConfiguration supportsSecureCoding]

  // instance methods
  -[HMDSupportedVideoStreamConfiguration encodeWithCoder:]
  -[HMDSupportedVideoStreamConfiguration .cxx_destruct]
  -[HMDSupportedVideoStreamConfiguration initWithCoder:]
  -[HMDSupportedVideoStreamConfiguration description:indent:]
  -[HMDSupportedVideoStreamConfiguration _parseFromTLVData]
  -[HMDSupportedVideoStreamConfiguration tlvData]
  -[HMDSupportedVideoStreamConfiguration initWithCodecConfigurations:]
  -[HMDSupportedVideoStreamConfiguration codecConfigurations]


HMDBitRateSetting : HAPNumberParser <NSSecureCoding>
 @property  unsigned long bitrateSetting

  // class methods
  +[HMDBitRateSetting supportsSecureCoding]
  +[HMDBitRateSetting arrayWithSettings:]

  // instance methods
  -[HMDBitRateSetting encodeWithCoder:]
  -[HMDBitRateSetting isEqual:]
  -[HMDBitRateSetting initWithCoder:]
  -[HMDBitRateSetting description:indent:]
  -[HMDBitRateSetting initWithTLVData:]
  -[HMDBitRateSetting initWithBitRateSetting:]
  -[HMDBitRateSetting bitrateSetting]


HMDAudioSampleRate : HAPNumberParser <NSSecureCoding>
 @property  unsigned long sampleRate

  // class methods
  +[HMDAudioSampleRate supportsSecureCoding]
  +[HMDAudioSampleRate arrayWithRates:]

  // instance methods
  -[HMDAudioSampleRate encodeWithCoder:]
  -[HMDAudioSampleRate sampleRate]
  -[HMDAudioSampleRate isEqual:]
  -[HMDAudioSampleRate initWithCoder:]
  -[HMDAudioSampleRate description:indent:]
  -[HMDAudioSampleRate initWithTLVData:]
  -[HMDAudioSampleRate initWithSampleRate:]


HMDAudioCodecParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *audioChannelCount
 @property  NSArray *bitRateSettings
 @property  NSArray *audioSampleRates
 @property  NSNumber *rtpPtime
 @property  NSData *tlvData

  // class methods
  +[HMDAudioCodecParameters supportsSecureCoding]

  // instance methods
  -[HMDAudioCodecParameters encodeWithCoder:]
  -[HMDAudioCodecParameters .cxx_destruct]
  -[HMDAudioCodecParameters initWithCoder:]
  -[HMDAudioCodecParameters audioChannelCount]
  -[HMDAudioCodecParameters description:indent:]
  -[HMDAudioCodecParameters _parseFromTLVData]
  -[HMDAudioCodecParameters tlvData]
  -[HMDAudioCodecParameters initWithChannelCount:bitRateSetting:audioSampleRate:rtpPtime:]
  -[HMDAudioCodecParameters bitRateSettings]
  -[HMDAudioCodecParameters audioSampleRates]
  -[HMDAudioCodecParameters rtpPtime]


HMDAudioCodecGroup : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  unsigned long codec

  // class methods
  +[HMDAudioCodecGroup supportsSecureCoding]
  +[HMDAudioCodecGroup arrayWithCodecs:]

  // instance methods
  -[HMDAudioCodecGroup encodeWithCoder:]
  -[HMDAudioCodecGroup codec]
  -[HMDAudioCodecGroup copyWithZone:]
  -[HMDAudioCodecGroup isEqual:]
  -[HMDAudioCodecGroup initWithCoder:]
  -[HMDAudioCodecGroup description:indent:]
  -[HMDAudioCodecGroup initWithTLVData:]
  -[HMDAudioCodecGroup initWithAudioCodecGroup:]


HMDAudioCodecConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDAudioCodecGroup *codecGroup
 @property  HMDAudioCodecParameters *audioCodecParameters
 @property  NSData *tlvData

  // class methods
  +[HMDAudioCodecConfiguration supportsSecureCoding]

  // instance methods
  -[HMDAudioCodecConfiguration encodeWithCoder:]
  -[HMDAudioCodecConfiguration .cxx_destruct]
  -[HMDAudioCodecConfiguration initWithCoder:]
  -[HMDAudioCodecConfiguration description:indent:]
  -[HMDAudioCodecConfiguration _parseFromTLVData]
  -[HMDAudioCodecConfiguration tlvData]
  -[HMDAudioCodecConfiguration initWithAudioCodecGroup:codecParameter:]
  -[HMDAudioCodecConfiguration codecGroup]
  -[HMDAudioCodecConfiguration audioCodecParameters]


HMDSupportedAudioStreamConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *supportsComfortNoise
 @property  NSDictionary *codecConfigurations
 @property  NSData *tlvData

  // class methods
  +[HMDSupportedAudioStreamConfiguration supportsSecureCoding]

  // instance methods
  -[HMDSupportedAudioStreamConfiguration encodeWithCoder:]
  -[HMDSupportedAudioStreamConfiguration .cxx_destruct]
  -[HMDSupportedAudioStreamConfiguration initWithCoder:]
  -[HMDSupportedAudioStreamConfiguration description:indent:]
  -[HMDSupportedAudioStreamConfiguration _parseFromTLVData]
  -[HMDSupportedAudioStreamConfiguration tlvData]
  -[HMDSupportedAudioStreamConfiguration codecConfigurations]
  -[HMDSupportedAudioStreamConfiguration initWithComfortNoise:CodecConfigurations:]
  -[HMDSupportedAudioStreamConfiguration supportsComfortNoise]


HMDSRTPCryptoSuite : HAPNumberParser <NSSecureCoding>
 @property  unsigned long srtpCryptoSuite

  // class methods
  +[HMDSRTPCryptoSuite supportsSecureCoding]
  +[HMDSRTPCryptoSuite arrayWithSuites:]

  // instance methods
  -[HMDSRTPCryptoSuite encodeWithCoder:]
  -[HMDSRTPCryptoSuite isEqual:]
  -[HMDSRTPCryptoSuite initWithCoder:]
  -[HMDSRTPCryptoSuite description:indent:]
  -[HMDSRTPCryptoSuite initWithTLVData:]
  -[HMDSRTPCryptoSuite initWithCryptoSuite:]
  -[HMDSRTPCryptoSuite srtpCryptoSuite]


HMDSupportedRTPConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSArray *srtpCryptoSuites
 @property  NSData *tlvData

  // class methods
  +[HMDSupportedRTPConfiguration supportsSecureCoding]

  // instance methods
  -[HMDSupportedRTPConfiguration encodeWithCoder:]
  -[HMDSupportedRTPConfiguration .cxx_destruct]
  -[HMDSupportedRTPConfiguration initWithCoder:]
  -[HMDSupportedRTPConfiguration description:indent:]
  -[HMDSupportedRTPConfiguration _parseFromTLVData]
  -[HMDSupportedRTPConfiguration tlvData]
  -[HMDSupportedRTPConfiguration initWithCryptoSuites:]
  -[HMDSupportedRTPConfiguration srtpCryptoSuites]


HMDEndPointAddress : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSString *ipAddress
 @property  BOOL isIPv6Address
 @property  NSNumber *videoRTPPort
 @property  NSNumber *audioRTPPort
 @property  NSData *tlvData

  // class methods
  +[HMDEndPointAddress supportsSecureCoding]

  // instance methods
  -[HMDEndPointAddress encodeWithCoder:]
  -[HMDEndPointAddress .cxx_destruct]
  -[HMDEndPointAddress initWithCoder:]
  -[HMDEndPointAddress ipAddress]
  -[HMDEndPointAddress description:indent:]
  -[HMDEndPointAddress _parseFromTLVData]
  -[HMDEndPointAddress tlvData]
  -[HMDEndPointAddress initWithIPAddress:isIPv6Address:videoRTPPort:audioRTPPort:]
  -[HMDEndPointAddress compatibleWithRemoteEndPoint:]
  -[HMDEndPointAddress isIPv6Address]
  -[HMDEndPointAddress videoRTPPort]
  -[HMDEndPointAddress audioRTPPort]


HMDSRTPParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDSRTPCryptoSuite *srtpCryptoSuite
 @property  NSData *srtpMasterKey
 @property  NSData *srtpMasterSalt
 @property  NSData *tlvData

  // class methods
  +[HMDSRTPParameters supportsSecureCoding]

  // instance methods
  -[HMDSRTPParameters encodeWithCoder:]
  -[HMDSRTPParameters .cxx_destruct]
  -[HMDSRTPParameters initWithCoder:]
  -[HMDSRTPParameters description:indent:]
  -[HMDSRTPParameters _parseFromTLVData]
  -[HMDSRTPParameters tlvData]
  -[HMDSRTPParameters srtpCryptoSuite]
  -[HMDSRTPParameters compatibleWithRemoteEndPoint:]
  -[HMDSRTPParameters initWithCryptoSuite:masterKey:masterSalt:]
  -[HMDSRTPParameters srtpMasterKey]
  -[HMDSRTPParameters srtpMasterSalt]


HMDSetupEndPointWrite : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSUUID *sessionID
 @property  HMDEndPointAddress *address
 @property  HMDSRTPParameters *videoSrtpParameters
 @property  HMDSRTPParameters *audioSrtpParameters
 @property  NSData *tlvData

  // class methods
  +[HMDSetupEndPointWrite supportsSecureCoding]

  // instance methods
  -[HMDSetupEndPointWrite sessionID]
  -[HMDSetupEndPointWrite encodeWithCoder:]
  -[HMDSetupEndPointWrite .cxx_destruct]
  -[HMDSetupEndPointWrite address]
  -[HMDSetupEndPointWrite initWithCoder:]
  -[HMDSetupEndPointWrite description:indent:]
  -[HMDSetupEndPointWrite _parseFromTLVData]
  -[HMDSetupEndPointWrite tlvData]
  -[HMDSetupEndPointWrite initWithSessionIdentifier:address:videoSrtpParameters:audioSrtpParameters:]
  -[HMDSetupEndPointWrite _parseFromTLVDataImpl]
  -[HMDSetupEndPointWrite _parseFromTLVDataOnSuccess]
  -[HMDSetupEndPointWrite _parseFromTLVDataOnFailure]
  -[HMDSetupEndPointWrite videoSrtpParameters]
  -[HMDSetupEndPointWrite audioSrtpParameters]


HMDSetupEndPointRead : HMDSetupEndPointWrite <NSSecureCoding>
 @property  unsigned long responseStatus
 @property  NSNumber *videoSSRC
 @property  NSNumber *audioSSRC

  // class methods
  +[HMDSetupEndPointRead supportsSecureCoding]

  // instance methods
  -[HMDSetupEndPointRead encodeWithCoder:]
  -[HMDSetupEndPointRead .cxx_destruct]
  -[HMDSetupEndPointRead responseStatus]
  -[HMDSetupEndPointRead initWithCoder:]
  -[HMDSetupEndPointRead description:indent:]
  -[HMDSetupEndPointRead _parseFromTLVData]
  -[HMDSetupEndPointRead tlvData]
  -[HMDSetupEndPointRead _parseFromTLVDataOnSuccess]
  -[HMDSetupEndPointRead _parseFromTLVDataOnFailure]
  -[HMDSetupEndPointRead initWithSessionIdentifier:address:videoSrtpParameters:audioSrtpParameters:responseStatus:videoSSRC:audioSSRC:]
  -[HMDSetupEndPointRead videoSSRC]
  -[HMDSetupEndPointRead audioSSRC]


HMDSessionControl : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  unsigned long controlCommand
 @property  NSUUID *sessionID
 @property  NSData *tlvData

  // class methods
  +[HMDSessionControl supportsSecureCoding]

  // instance methods
  -[HMDSessionControl sessionID]
  -[HMDSessionControl encodeWithCoder:]
  -[HMDSessionControl .cxx_destruct]
  -[HMDSessionControl initWithCoder:]
  -[HMDSessionControl description:indent:]
  -[HMDSessionControl _parseFromTLVData]
  -[HMDSessionControl tlvData]
  -[HMDSessionControl initWithCommand:sessionIdentifier:]
  -[HMDSessionControl controlCommand]


HMDSelectedRTPParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *payloadType
 @property  NSNumber *synchronizationSource
 @property  NSNumber *maximumBitrate
 @property  NSNumber *minimumBitrate
 @property  NSNumber *rtcpInterval
 @property  NSNumber *maxMTU
 @property  NSNumber *comfortNoisePayloadType
 @property  NSData *tlvData

  // class methods
  +[HMDSelectedRTPParameters supportsSecureCoding]

  // instance methods
  -[HMDSelectedRTPParameters encodeWithCoder:]
  -[HMDSelectedRTPParameters .cxx_destruct]
  -[HMDSelectedRTPParameters initWithCoder:]
  -[HMDSelectedRTPParameters maxMTU]
  -[HMDSelectedRTPParameters payloadType]
  -[HMDSelectedRTPParameters description:indent:]
  -[HMDSelectedRTPParameters minimumBitrate]
  -[HMDSelectedRTPParameters _parseFromTLVData]
  -[HMDSelectedRTPParameters tlvData]
  -[HMDSelectedRTPParameters initWithPayloadType:maximumBitrate:minimumBitrate:rtcpInterval:comfortNoisePayloadType:]
  -[HMDSelectedRTPParameters synchronizationSource]
  -[HMDSelectedRTPParameters setSynchronizationSource:]
  -[HMDSelectedRTPParameters maximumBitrate]
  -[HMDSelectedRTPParameters rtcpInterval]
  -[HMDSelectedRTPParameters setMaxMTU:]
  -[HMDSelectedRTPParameters comfortNoisePayloadType]


HMDSelectedVideoParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDVideoCodec *codec
 @property  HMDVideoCodecParameters *codecParameters
 @property  HMDVideoAttributes *videoAttributes
 @property  HMDSelectedRTPParameters *rtpParameters
 @property  NSData *tlvData

  // class methods
  +[HMDSelectedVideoParameters supportsSecureCoding]

  // instance methods
  -[HMDSelectedVideoParameters encodeWithCoder:]
  -[HMDSelectedVideoParameters .cxx_destruct]
  -[HMDSelectedVideoParameters codec]
  -[HMDSelectedVideoParameters initWithCoder:]
  -[HMDSelectedVideoParameters videoAttributes]
  -[HMDSelectedVideoParameters description:indent:]
  -[HMDSelectedVideoParameters codecParameters]
  -[HMDSelectedVideoParameters _parseFromTLVData]
  -[HMDSelectedVideoParameters tlvData]
  -[HMDSelectedVideoParameters initWithCodec:codecParameter:attribute:rtpParameter:]
  -[HMDSelectedVideoParameters rtpParameters]


HMDSelectedAudioParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDAudioCodecGroup *codecGroup
 @property  HMDAudioCodecParameters *codecParameters
 @property  HMDSelectedRTPParameters *rtpParameters
 @property  NSNumber *comfortNoiseEnabled
 @property  NSData *tlvData

  // class methods
  +[HMDSelectedAudioParameters supportsSecureCoding]

  // instance methods
  -[HMDSelectedAudioParameters encodeWithCoder:]
  -[HMDSelectedAudioParameters .cxx_destruct]
  -[HMDSelectedAudioParameters initWithCoder:]
  -[HMDSelectedAudioParameters description:indent:]
  -[HMDSelectedAudioParameters codecParameters]
  -[HMDSelectedAudioParameters _parseFromTLVData]
  -[HMDSelectedAudioParameters tlvData]
  -[HMDSelectedAudioParameters codecGroup]
  -[HMDSelectedAudioParameters rtpParameters]
  -[HMDSelectedAudioParameters initWithCodecGroup:codecParameter:rtpParameter:comfortNoiseEnabled:]
  -[HMDSelectedAudioParameters comfortNoiseEnabled]


HMDSelectedStreamConfigurationWrite : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDSessionControl *sessionControl
 @property  HMDSelectedVideoParameters *videoParameters
 @property  HMDSelectedAudioParameters *audioParameters
 @property  NSData *tlvData

  // class methods
  +[HMDSelectedStreamConfigurationWrite supportsSecureCoding]

  // instance methods
  -[HMDSelectedStreamConfigurationWrite encodeWithCoder:]
  -[HMDSelectedStreamConfigurationWrite .cxx_destruct]
  -[HMDSelectedStreamConfigurationWrite audioParameters]
  -[HMDSelectedStreamConfigurationWrite initWithCoder:]
  -[HMDSelectedStreamConfigurationWrite description:indent:]
  -[HMDSelectedStreamConfigurationWrite _parseFromTLVData]
  -[HMDSelectedStreamConfigurationWrite tlvData]
  -[HMDSelectedStreamConfigurationWrite initWithSessionControl:videoParameters:audioParameters:]
  -[HMDSelectedStreamConfigurationWrite initWithSessionControl:]
  -[HMDSelectedStreamConfigurationWrite sessionControl]
  -[HMDSelectedStreamConfigurationWrite videoParameters]


HMDReselectedRTPParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *maximumBitrate
 @property  NSNumber *minimumBitrate
 @property  NSNumber *rtcpInterval
 @property  NSData *tlvData

  // class methods
  +[HMDReselectedRTPParameters supportsSecureCoding]

  // instance methods
  -[HMDReselectedRTPParameters encodeWithCoder:]
  -[HMDReselectedRTPParameters .cxx_destruct]
  -[HMDReselectedRTPParameters initWithCoder:]
  -[HMDReselectedRTPParameters description:indent:]
  -[HMDReselectedRTPParameters minimumBitrate]
  -[HMDReselectedRTPParameters _parseFromTLVData]
  -[HMDReselectedRTPParameters tlvData]
  -[HMDReselectedRTPParameters maximumBitrate]
  -[HMDReselectedRTPParameters rtcpInterval]
  -[HMDReselectedRTPParameters initWithMaximumBitrate:minimumBitrate:rtcpInterval:]


HMDReselectedVideoParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDVideoAttributes *videoAttributes
 @property  HMDReselectedRTPParameters *rtpParameters
 @property  NSData *tlvData

  // class methods
  +[HMDReselectedVideoParameters supportsSecureCoding]

  // instance methods
  -[HMDReselectedVideoParameters encodeWithCoder:]
  -[HMDReselectedVideoParameters .cxx_destruct]
  -[HMDReselectedVideoParameters initWithCoder:]
  -[HMDReselectedVideoParameters videoAttributes]
  -[HMDReselectedVideoParameters description:indent:]
  -[HMDReselectedVideoParameters _parseFromTLVData]
  -[HMDReselectedVideoParameters tlvData]
  -[HMDReselectedVideoParameters rtpParameters]
  -[HMDReselectedVideoParameters initWithAttribute:rtpParameter:]


HMDReselectedStreamConfigurationWrite : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDSessionControl *sessionControl
 @property  HMDReselectedVideoParameters *videoParameters
 @property  NSData *tlvData

  // class methods
  +[HMDReselectedStreamConfigurationWrite supportsSecureCoding]

  // instance methods
  -[HMDReselectedStreamConfigurationWrite encodeWithCoder:]
  -[HMDReselectedStreamConfigurationWrite .cxx_destruct]
  -[HMDReselectedStreamConfigurationWrite initWithCoder:]
  -[HMDReselectedStreamConfigurationWrite description:indent:]
  -[HMDReselectedStreamConfigurationWrite _parseFromTLVData]
  -[HMDReselectedStreamConfigurationWrite tlvData]
  -[HMDReselectedStreamConfigurationWrite initWithSessionControl:]
  -[HMDReselectedStreamConfigurationWrite sessionControl]
  -[HMDReselectedStreamConfigurationWrite videoParameters]
  -[HMDReselectedStreamConfigurationWrite initWithSessionControl:videoParameters:]


AWDHomeKitUserPresenceCompute : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasCompute
 @property  int compute

  // instance methods
  -[AWDHomeKitUserPresenceCompute setTimestamp:]
  -[AWDHomeKitUserPresenceCompute copyTo:]
  -[AWDHomeKitUserPresenceCompute compute]
  -[AWDHomeKitUserPresenceCompute mergeFrom:]
  -[AWDHomeKitUserPresenceCompute setHasTimestamp:]
  -[AWDHomeKitUserPresenceCompute dictionaryRepresentation]
  -[AWDHomeKitUserPresenceCompute hasTimestamp]
  -[AWDHomeKitUserPresenceCompute copyWithZone:]
  -[AWDHomeKitUserPresenceCompute timestamp]
  -[AWDHomeKitUserPresenceCompute readFrom:]
  -[AWDHomeKitUserPresenceCompute writeTo:]
  -[AWDHomeKitUserPresenceCompute isEqual:]
  -[AWDHomeKitUserPresenceCompute setCompute:]
  -[AWDHomeKitUserPresenceCompute setHasCompute:]
  -[AWDHomeKitUserPresenceCompute hasCompute]
  -[AWDHomeKitUserPresenceCompute computeAsString:]
  -[AWDHomeKitUserPresenceCompute StringAsCompute:]


HMDPrimaryResidentMessageRouterFailureEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *messageName
 @property  NSNumber *failureType
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDPrimaryResidentMessageRouterFailureEvent eventName]
  -[HMDPrimaryResidentMessageRouterFailureEvent messageName]
  -[HMDPrimaryResidentMessageRouterFailureEvent attributeDescriptions]
  -[HMDPrimaryResidentMessageRouterFailureEvent .cxx_destruct]
  -[HMDPrimaryResidentMessageRouterFailureEvent failureType]
  -[HMDPrimaryResidentMessageRouterFailureEvent serializedEvent]
  -[HMDPrimaryResidentMessageRouterFailureEvent initWithMessageName:failureType:]


HMDSettingGroupModel : HMBModel <HMDSettingGroupModelProtocol>
 @property  NSString *name
 @property  NSUUID *hmbModelID
 @property  NSUUID *hmbParentModelID
 @property  NSString *nameForKeyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingGroupModel hmbProperties]

  // instance methods
  -[HMDSettingGroupModel copyWithNewParentModelID:]
  -[HMDSettingGroupModel nameForKeyPath]


HMDFamiliarFacesBulletinLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  long long numberOfKnownPersons
 @property  long long numberOfUnknownPersons
 @property  NSString *bulletinReason
 @property  BOOL doorbellPressed
 @property  double secondsFromDoorbellToFaceClassification

  // instance methods
  -[HMDFamiliarFacesBulletinLogEvent eventName]
  -[HMDFamiliarFacesBulletinLogEvent .cxx_destruct]
  -[HMDFamiliarFacesBulletinLogEvent serializedEvent]
  -[HMDFamiliarFacesBulletinLogEvent initWithNumberOfKnownPersons:numberOfUnknownPersons:bulletinReason:doorbellPressed:secondsFromDoorbellToFaceClassification:]
  -[HMDFamiliarFacesBulletinLogEvent numberOfKnownPersons]
  -[HMDFamiliarFacesBulletinLogEvent numberOfUnknownPersons]
  -[HMDFamiliarFacesBulletinLogEvent bulletinReason]
  -[HMDFamiliarFacesBulletinLogEvent doorbellPressed]
  -[HMDFamiliarFacesBulletinLogEvent secondsFromDoorbellToFaceClassification]


HMDAccessorySetupManager : HMFObject <HMDSBSRemoteAlertHandleObserver, HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHomeManager *homeManager
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDSBSRemoteAlertHandleProvider *alertHandleProvider
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  @? pendingAccessorySetupCompletionHandler
 @property  HMDAddAccessoryRequestInformation *pendingAddAccessoryRequestInformation
 @property  <HMDSBSRemoteAlertHandle> *alertHandle
 @property  double activationStartTime
 @property  HMDXPCClientConnection *accessorySetupHostClientConnection
 @property  HMDAccessorySetupCoordinator *accessorySetupCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessorySetupManager logCategory]
  +[HMDAccessorySetupManager accessorySetupHostBundleIdentifier]

  // instance methods
  -[HMDAccessorySetupManager configure]
  -[HMDAccessorySetupManager workQueue]
  -[HMDAccessorySetupManager .cxx_destruct]
  -[HMDAccessorySetupManager messageTargetUUID]
  -[HMDAccessorySetupManager homeManager]
  -[HMDAccessorySetupManager remoteAlertHandleDidDeactivate:]
  -[HMDAccessorySetupManager setHomeManager:]
  -[HMDAccessorySetupManager remoteAlertHandle:didInvalidateWithError:]
  -[HMDAccessorySetupManager remoteAlertHandleDidActivate:]
  -[HMDAccessorySetupManager messageReceiveQueue]
  -[HMDAccessorySetupManager messageDispatcher]
  -[HMDAccessorySetupManager accessorySetupCoordinator]
  -[HMDAccessorySetupManager featuresDataSource]
  -[HMDAccessorySetupManager handleHomeUIServiceXPCConnectionStateDidChangeNotification:]
  -[HMDAccessorySetupManager _handlePerformAccessorySetupMessage:]
  -[HMDAccessorySetupManager _handlePerformMatterEcosystemAccessorySetupMessage:]
  -[HMDAccessorySetupManager _handleFetchPendingSetupAccessoryDescriptionMessage:]
  -[HMDAccessorySetupManager _handleResumeAccessorySetupMessage:]
  -[HMDAccessorySetupManager _handleFinishAccessorySetupMessage:]
  -[HMDAccessorySetupManager _handleFailAccessorySetupMessage:]
  -[HMDAccessorySetupManager handleNFCProxSetupNotification:]
  -[HMDAccessorySetupManager initWithWorkQueue:homeManager:]
  -[HMDAccessorySetupManager initWithWorkQueue:homeManager:messageDispatcher:alertHandleProvider:featuresDataSource:]
  -[HMDAccessorySetupManager pendingAddAccessoryRequestInformation]
  -[HMDAccessorySetupManager setPendingAddAccessoryRequestInformation:]
  -[HMDAccessorySetupManager accessorySetupHostClientConnection]
  -[HMDAccessorySetupManager setAccessorySetupHostClientConnection:]
  -[HMDAccessorySetupManager clearPendingAddAccessoryRequestInformation]
  -[HMDAccessorySetupManager launchAccessorySetupHostToRequestSetupCodeForAccessoryWithUUID:accessoryName:homeUUID:clientConnection:completionHandler:]
  -[HMDAccessorySetupManager _createSetupAccessoryPayloadWithSetupPayloadURL:error:]
  -[HMDAccessorySetupManager _launchHUISWithNFCProxSetupURL:]
  -[HMDAccessorySetupManager _launchHUISWithRequest:matterTopology:connection:completionHandler:]
  -[HMDAccessorySetupManager _launchHUISWithSetupAccessoryDescription:resumeSetupUserInfo:connection:completionHandler:]
  -[HMDAccessorySetupManager _finishAccessorySetupWithSetupCompletedInfo:setupError:]
  -[HMDAccessorySetupManager _accessorySetupResultFromCompletedInfo:clientIdentifierSalt:]
  -[HMDAccessorySetupManager setAccessorySetupCoordinator:]
  -[HMDAccessorySetupManager alertHandleProvider]
  -[HMDAccessorySetupManager pendingAccessorySetupCompletionHandler]
  -[HMDAccessorySetupManager setPendingAccessorySetupCompletionHandler:]
  -[HMDAccessorySetupManager alertHandle]
  -[HMDAccessorySetupManager setAlertHandle:]
  -[HMDAccessorySetupManager activationStartTime]
  -[HMDAccessorySetupManager setActivationStartTime:]


HMDCloudShareTrustManagerMetricsEventDispatcher : HMFObject <HMFLogging, HMDLogEventDailyTaskRunner>
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  <HMDCloudShareTrustManagerMetricsEventDispatcherDataSource> *dataSource
 @property  BOOL registered
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudShareTrustManagerMetricsEventDispatcher logCategory]

  // instance methods
  -[HMDCloudShareTrustManagerMetricsEventDispatcher identifier]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher logIdentifier]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher dataSource]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher registered]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher .cxx_destruct]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher setRegistered:]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher logEventSubmitter]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher runDailyTask]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher initWithIdentifier:logEventSubmitter:dailyScheduler:dataSource:]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher registerForDailyTrustManagerEvents]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitTrustZoneCreatedEvent]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitTrustZoneRemovedEvent]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitTrustActivityEvent:]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitFailureEventWithEventErrorCode:]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitFailureEventWithEventErrorCode:error:]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher submitCloudShareTrustStatusDailyEvent]
  -[HMDCloudShareTrustManagerMetricsEventDispatcher dailyScheduler]


HMDCameraStreamManagerSession : HMFObject <HMFLogging>
 @property  HMDCameraStreamSessionID *sessionID
 @property  NSString *destinationID
 @property  HMDXPCClientConnection *streamClientConnection
 @property  <HMDCameraStreamControlManagerProtocol> *streamControlManager
 @property  HMFTimer *streamSetupTimer
 @property  HMFMessage *currentMessage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamManagerSession logCategory]

  // instance methods
  -[HMDCameraStreamManagerSession logIdentifier]
  -[HMDCameraStreamManagerSession sessionID]
  -[HMDCameraStreamManagerSession currentMessage]
  -[HMDCameraStreamManagerSession .cxx_destruct]
  -[HMDCameraStreamManagerSession destinationID]
  -[HMDCameraStreamManagerSession initWithSessionID:destinationID:streamClientConnection:streamControlManager:setupWaitPeriod:]
  -[HMDCameraStreamManagerSession initWithSessionID:destinationID:streamClientConnection:streamControlManager:streamSetupTimer:]
  -[HMDCameraStreamManagerSession canStartWithError:]
  -[HMDCameraStreamManagerSession streamClientConnection]
  -[HMDCameraStreamManagerSession setStreamClientConnection:]
  -[HMDCameraStreamManagerSession streamControlManager]
  -[HMDCameraStreamManagerSession streamSetupTimer]
  -[HMDCameraStreamManagerSession setCurrentMessage:]


AWDHomeKitMessageLocation : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasLongitude
 @property  double longitude
 @property  BOOL hasLatitude
 @property  double latitude
 @property  BOOL hasAccuracy
 @property  double accuracy
 @property  BOOL hasNumOfReachableIPAcc
 @property  unsigned int numOfReachableIPAcc
 @property  BOOL hasNumOfReachableBTLEAcc
 @property  unsigned int numOfReachableBTLEAcc

  // instance methods
  -[AWDHomeKitMessageLocation latitude]
  -[AWDHomeKitMessageLocation hasLongitude]
  -[AWDHomeKitMessageLocation setTimestamp:]
  -[AWDHomeKitMessageLocation setHasLatitude:]
  -[AWDHomeKitMessageLocation copyTo:]
  -[AWDHomeKitMessageLocation setLatitude:]
  -[AWDHomeKitMessageLocation hasLatitude]
  -[AWDHomeKitMessageLocation setLongitude:]
  -[AWDHomeKitMessageLocation setHasLongitude:]
  -[AWDHomeKitMessageLocation longitude]
  -[AWDHomeKitMessageLocation mergeFrom:]
  -[AWDHomeKitMessageLocation setHasTimestamp:]
  -[AWDHomeKitMessageLocation dictionaryRepresentation]
  -[AWDHomeKitMessageLocation hasTimestamp]
  -[AWDHomeKitMessageLocation copyWithZone:]
  -[AWDHomeKitMessageLocation timestamp]
  -[AWDHomeKitMessageLocation readFrom:]
  -[AWDHomeKitMessageLocation accuracy]
  -[AWDHomeKitMessageLocation writeTo:]
  -[AWDHomeKitMessageLocation isEqual:]
  -[AWDHomeKitMessageLocation setAccuracy:]
  -[AWDHomeKitMessageLocation setHasAccuracy:]
  -[AWDHomeKitMessageLocation hasAccuracy]
  -[AWDHomeKitMessageLocation setNumOfReachableIPAcc:]
  -[AWDHomeKitMessageLocation setHasNumOfReachableIPAcc:]
  -[AWDHomeKitMessageLocation hasNumOfReachableIPAcc]
  -[AWDHomeKitMessageLocation setNumOfReachableBTLEAcc:]
  -[AWDHomeKitMessageLocation setHasNumOfReachableBTLEAcc:]
  -[AWDHomeKitMessageLocation hasNumOfReachableBTLEAcc]
  -[AWDHomeKitMessageLocation numOfReachableIPAcc]
  -[AWDHomeKitMessageLocation numOfReachableBTLEAcc]


HMDNetworkRouterFirewallRuleLANMulticast : HMDNetworkRouterFirewallRuleLAN
 @property  HMFNetAddress *ipAddress
 @property  unsigned short port

  // class methods
  +[HMDNetworkRouterFirewallRuleLANMulticast createWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:ruleDictionary:error:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleLANMulticast port]
  -[HMDNetworkRouterFirewallRuleLANMulticast attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleLANMulticast .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleLANMulticast isEqual:]
  -[HMDNetworkRouterFirewallRuleLANMulticast ipAddress]
  -[HMDNetworkRouterFirewallRuleLANMulticast prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleLANMulticast initWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:ipAddress:port:]


HMDMainDriver : NSObject <HMFLogging, HMDRelaunchHandling>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHomeManager *homeManager
 @property  HMDAccessoryBrowser *accessoryBrowser
 @property  HMDCloudManager *cloudDataSyncManager
 @property  HMDUpdater *updater
 @property  HMDRetailDemoModeRequestHandler *retailDemoModeRequestHandler
 @property  HMBLocalDatabase *localDatabase
 @property  HMDCoreData *coreData
 @property  HMDMetricsManager *metricsManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMainDriver driver]
  +[HMDMainDriver logCategory]
  +[HMDMainDriver loadHomeDataFromLocalStore:decryptionFailed:]
  +[HMDMainDriver loadHomeDataFromLocalStore:fromLocation:decryptionFailed:forHH2Migration:]
  +[HMDMainDriver loadHomeDataFromDemoModeStore:]
  +[HMDMainDriver loadSQLArchiveWithDecryptionFail:fromLocation:forHH2Migration:error:]
  +[HMDMainDriver getLocalStoreFrom:]

  // instance methods
  -[HMDMainDriver localeChanged]
  -[HMDMainDriver coreData]
  -[HMDMainDriver workQueue]
  -[HMDMainDriver setWorkQueue:]
  -[HMDMainDriver setUpdater:]
  -[HMDMainDriver .cxx_destruct]
  -[HMDMainDriver homeManager]
  -[HMDMainDriver setLocalDatabase:]
  -[HMDMainDriver setHomeManager:]
  -[HMDMainDriver start]
  -[HMDMainDriver updater]
  -[HMDMainDriver localDatabase]
  -[HMDMainDriver init]
  -[HMDMainDriver relaunch]
  -[HMDMainDriver relaunchAfterDelay:]
  -[HMDMainDriver relaunchHomed]
  -[HMDMainDriver metricsManager]
  -[HMDMainDriver accessoryBrowser]
  -[HMDMainDriver setAccessoryBrowser:]
  -[HMDMainDriver cloudDataSyncManager]
  -[HMDMainDriver setCloudDataSyncManager:]
  -[HMDMainDriver retailDemoModeRequestHandler]
  -[HMDMainDriver setRetailDemoModeRequestHandler:]


HMDUserPresenceFeedRetryTimer : HMFObject <HMFLogging>
 @property  NSUUID *timerID
 @property  double retryTimeInterval
 @property  HMFTimer *retryTimer
 @property  unsigned long retryCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserPresenceFeedRetryTimer logCategory]

  // instance methods
  -[HMDUserPresenceFeedRetryTimer logIdentifier]
  -[HMDUserPresenceFeedRetryTimer timerID]
  -[HMDUserPresenceFeedRetryTimer retryCount]
  -[HMDUserPresenceFeedRetryTimer setRetryCount:]
  -[HMDUserPresenceFeedRetryTimer attributeDescriptions]
  -[HMDUserPresenceFeedRetryTimer .cxx_destruct]
  -[HMDUserPresenceFeedRetryTimer setRetryTimer:]
  -[HMDUserPresenceFeedRetryTimer cancel]
  -[HMDUserPresenceFeedRetryTimer retryTimer]
  -[HMDUserPresenceFeedRetryTimer init]
  -[HMDUserPresenceFeedRetryTimer startWithDelegate:delegateQueue:responseTime:]
  -[HMDUserPresenceFeedRetryTimer retryTimeInterval]
  -[HMDUserPresenceFeedRetryTimer shouldRetryImmediately:]


HMDCarPlayDataSource : HMFObject <HMDCarPlayDataSource>
  // instance methods
  -[HMDCarPlayDataSource synchronouslyFetchIsCarPlayConnectedStatus]


HMDAccessoryFirmwareUpdateConcurrencyLogEvent : HMMLogEvent
 @property  unsigned long peakConcurrentIPAccessoryUpdateStaging
 @property  unsigned long peakConcurrentIPAccessoryUpdateApply
 @property  unsigned long peakConcurrentBLEAccessoryUpdateStaging
 @property  unsigned long peakConcurrentBLEAccessoryUpdateApply
 @property  unsigned long peakConcurrentThreadAccessoryUpdateStaging
 @property  unsigned long peakConcurrentThreadAccessoryUpdateApply

  // instance methods
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent initWithPeakConcurrentIPAccessoryUpdateStaging:peakConcurrentIPAccessoryUpdateApply:peakConcurrentBLEAccessoryUpdateStaging:peakConcurrentBLEAccessoryUpdateApply:peakConcurrentThreadAccessoryUpdateStaging:peakConcurrentThreadAccessoryUpdateApply:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentIPAccessoryUpdateStaging]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentIPAccessoryUpdateApply]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentBLEAccessoryUpdateStaging]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentBLEAccessoryUpdateApply]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentThreadAccessoryUpdateStaging]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEvent peakConcurrentThreadAccessoryUpdateApply]


HMDPBHomeLightBrightnessEvent : PBCodable <NSCopying>
 @property  BOOL hasHomeUUID
 @property  NSString *homeUUID
 @property  BOOL hasAccessoryUUID
 @property  NSString *accessoryUUID
 @property  BOOL hasCharacteristicUUID
 @property  NSString *characteristicUUID
 @property  BOOL hasBrightness
 @property  NSString *brightness

  // instance methods
  -[HMDPBHomeLightBrightnessEvent accessoryUUID]
  -[HMDPBHomeLightBrightnessEvent brightness]
  -[HMDPBHomeLightBrightnessEvent copyTo:]
  -[HMDPBHomeLightBrightnessEvent setBrightness:]
  -[HMDPBHomeLightBrightnessEvent .cxx_destruct]
  -[HMDPBHomeLightBrightnessEvent homeUUID]
  -[HMDPBHomeLightBrightnessEvent mergeFrom:]
  -[HMDPBHomeLightBrightnessEvent dictionaryRepresentation]
  -[HMDPBHomeLightBrightnessEvent copyWithZone:]
  -[HMDPBHomeLightBrightnessEvent readFrom:]
  -[HMDPBHomeLightBrightnessEvent writeTo:]
  -[HMDPBHomeLightBrightnessEvent isEqual:]
  -[HMDPBHomeLightBrightnessEvent hasBrightness]
  -[HMDPBHomeLightBrightnessEvent setAccessoryUUID:]
  -[HMDPBHomeLightBrightnessEvent hasHomeUUID]
  -[HMDPBHomeLightBrightnessEvent setHomeUUID:]
  -[HMDPBHomeLightBrightnessEvent characteristicUUID]
  -[HMDPBHomeLightBrightnessEvent hasAccessoryUUID]
  -[HMDPBHomeLightBrightnessEvent hasCharacteristicUUID]
  -[HMDPBHomeLightBrightnessEvent setCharacteristicUUID:]


HMDRemoteMessageLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int transportType
 @property  BOOL sending
 @property  NSString *msgIdentifier
 @property  NSString *transactionIdentifier
 @property  BOOL secure
 @property  NSString *msgName
 @property  long long msgType
 @property  NSString *peerInformation
 @property  long long msgQoS

  // class methods
  +[HMDRemoteMessageLogEvent receivedRemoteMessage:identifier:transactionIdentifier:messageType:peerInformation:secure:transportType:messageQoS:]
  +[HMDRemoteMessageLogEvent receivedRemoteMessage:transportType:]
  +[HMDRemoteMessageLogEvent sendingRemoteMessage:identifier:transactionIdentifier:messageType:peerInformation:secure:transportType:messageQoS:]
  +[HMDRemoteMessageLogEvent sendingRemoteMessage:transportType:]
  +[HMDRemoteMessageLogEvent awdMessageTypeFromHMDMessageType:]

  // instance methods
  -[HMDRemoteMessageLogEvent secure]
  -[HMDRemoteMessageLogEvent .cxx_destruct]
  -[HMDRemoteMessageLogEvent transportType]
  -[HMDRemoteMessageLogEvent sending]
  -[HMDRemoteMessageLogEvent transactionIdentifier]
  -[HMDRemoteMessageLogEvent msgType]
  -[HMDRemoteMessageLogEvent msgName]
  -[HMDRemoteMessageLogEvent initWithRemoteMessage:identifier:transactionIdentifier:messageType:peerInformation:secure:transportType:sending:messageQoS:]
  -[HMDRemoteMessageLogEvent msgIdentifier]
  -[HMDRemoteMessageLogEvent peerInformation]
  -[HMDRemoteMessageLogEvent msgQoS]
  -[HMDRemoteMessageLogEvent AWDMessageType]
  -[HMDRemoteMessageLogEvent metricForAWD]
  -[HMDRemoteMessageLogEvent toAWDType:]


HMDHomeMetricsDispatcher : HMFObject <HMFLogging>
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeMetricsDispatcher logCategory]

  // instance methods
  -[HMDHomeMetricsDispatcher identifier]
  -[HMDHomeMetricsDispatcher logIdentifier]
  -[HMDHomeMetricsDispatcher .cxx_destruct]
  -[HMDHomeMetricsDispatcher logEventSubmitter]
  -[HMDHomeMetricsDispatcher initWithIdentifier:logEventSubmitter:]
  -[HMDHomeMetricsDispatcher submitMigrationEventMetricsForModels:reason:]
  -[HMDHomeMetricsDispatcher submitMigrationEventMetricsForModel:reason:]


HMDXPCEventRouterServer : NSObject <HMFMessageReceiver, HMEPersistentConnectionServerDelegate, HMEPersistentConnectionServerDataSource, HMFLogging>
 @property  HMEPersistentConnectionServer *persistentConnectionServer
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *messageUUID
 @property  NSString *changeRegistrationsMessageName
 @property  NSString *updateEventsMessageName
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSNotificationCenter *notificationCenter
 @property  <HMDXPCEventRouterServerDataSource> *dataSource
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDXPCEventRouterServer logCategory]

  // instance methods
  -[HMDXPCEventRouterServer notificationCenter]
  -[HMDXPCEventRouterServer configure]
  -[HMDXPCEventRouterServer logIdentifier]
  -[HMDXPCEventRouterServer dataSource]
  -[HMDXPCEventRouterServer workQueue]
  -[HMDXPCEventRouterServer .cxx_destruct]
  -[HMDXPCEventRouterServer messageTargetUUID]
  -[HMDXPCEventRouterServer messageUUID]
  -[HMDXPCEventRouterServer dumpStateDescription]
  -[HMDXPCEventRouterServer messageReceiveQueue]
  -[HMDXPCEventRouterServer messageDispatcher]
  -[HMDXPCEventRouterServer changeRegistrationsMessageName]
  -[HMDXPCEventRouterServer registerForMessages]
  -[HMDXPCEventRouterServer server:expandedTopicsForTopics:]
  -[HMDXPCEventRouterServer shouldAllowEvent:topic:connection:]
  -[HMDXPCEventRouterServer sendUpdatedEvents:toConnection:]
  -[HMDXPCEventRouterServer sendUpdatedCachedEvents:toConnection:]
  -[HMDXPCEventRouterServer server:upstreamTopicsForTopic:]
  -[HMDXPCEventRouterServer handleXPCConnectionInvalidated:]
  -[HMDXPCEventRouterServer _handleChangeRegistrationsRequest:]
  -[HMDXPCEventRouterServer handleConnectionActiveStateChange:]
  -[HMDXPCEventRouterServer debounceTimeForConnection:]
  -[HMDXPCEventRouterServer initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:subscriptionProvider:registrationEventRouter:storeReadHandle:]
  -[HMDXPCEventRouterServer initWithMessageUUID:dataSource:changeRegistrationsMessageName:updateEventsMessageName:messageDispatcher:queue:notificationCenter:persistentConnectionServerFactory:]
  -[HMDXPCEventRouterServer persistentConnectionServer]
  -[HMDXPCEventRouterServer updateEventsMessageName]


HMDAggregationAnalysisLogEvent : HMMLogEvent <HMDAWDLogEvent, HMMCoreAnalyticsLogging>
 @property  HMDEventCountersManager *eventCountersManager
 @property  NSString *dataSyncState
 @property  unsigned long processLaunchCount
 @property  unsigned long processJetsamCount
 @property  unsigned long processCrashCount
 @property  unsigned long jetsamReasonHighwaterCount
 @property  unsigned long jetsamReasonProcessLimitCount
 @property  unsigned long jetsamReasonOtherCount
 @property  unsigned long processMemoryPressureStateWarningCount
 @property  unsigned long processMemoryPressureStateCriticalCount
 @property  unsigned long sampledAverageProcessMemoryUsageMB
 @property  unsigned long sampledPeakProcessMemoryUsageMB
 @property  unsigned long remoteMessagesSentCount
 @property  unsigned long remoteMessagesReceivedCount
 @property  unsigned long txIDSMessagesCount
 @property  unsigned long rxIDSMessagesCount
 @property  unsigned long txIDSProxyMessagesCount
 @property  unsigned long rxIDSProxyMessagesCount
 @property  unsigned long txLoxyMessagesCount
 @property  unsigned long rxLoxyMessagesCount
 @property  unsigned long txRapportMessagesCount
 @property  unsigned long rxRapportMessagesCount
 @property  unsigned long txSecureMessagesCount
 @property  unsigned long rxSecureMessagesCount
 @property  unsigned long cloudSyncPushCount
 @property  unsigned long legacyCloudSyncPushCount
 @property  unsigned long cloudSyncFetchCount
 @property  unsigned long cloudSyncUploadCount
 @property  unsigned long cloudSyncUploadErrorCount
 @property  unsigned long homeDataBytesFetched
 @property  unsigned long homeDataBytesPushed
 @property  unsigned long legacyHomeDataBytesFetched
 @property  unsigned long legacyHomeDataBytesPushed
 @property  unsigned long cloudSyncDecryptionFailedCount
 @property  BOOL cloudSyncLastDecryptionFailed
 @property  BOOL cloudSyncMaximumDelayReached
 @property  unsigned long numReadSiri
 @property  unsigned long numWriteSiri
 @property  unsigned long numReadFirstPartyApp
 @property  unsigned long numWriteFirstPartyApp
 @property  unsigned long numReadThirdPartyApp
 @property  unsigned long numWriteThirdPartyApp
 @property  unsigned long numReadInternalRequested
 @property  unsigned long numWriteInternalRequested
 @property  unsigned long numReadUnknownSource
 @property  unsigned long numWriteUnknownSource
 @property  unsigned long numReadWriteSuccessIP
 @property  unsigned long numReadWriteFailureIP
 @property  unsigned long numReadWriteSuccessBT
 @property  unsigned long numReadWriteFailureBT
 @property  unsigned long numReadWriteSuccessIDS
 @property  unsigned long numReadWriteFailureIDS
 @property  unsigned long averageLatencyIP
 @property  unsigned long averageLatencyBT
 @property  unsigned long averageLatencyIDS
 @property  unsigned long numAccessoriesAdded
 @property  unsigned long numScenesAdded
 @property  unsigned long numTriggersAdded
 @property  unsigned long numShortcutsAdded
 @property  unsigned long numScenesUserRun
 @property  unsigned long numShortcutsRun
 @property  unsigned long numTriggersFired
 @property  unsigned long hapIPInvalidationCount
 @property  unsigned long hapIPSentHTTPRequestsCount
 @property  unsigned long hapIPReceivedHTTPResponsesCount
 @property  unsigned long hapIPReceivedHTTPEventCount
 @property  unsigned long hapBTLEConnectionsCount
 @property  unsigned long hapBTLEConnectionPerReasonsCount
 @property  unsigned long hapBTLEDiscoveriesCount
 @property  unsigned long cameraStreamStartSuccessCount
 @property  unsigned long cameraStreamStartFailureCount
 @property  unsigned long fetchCameraClipVideoSegmentAssetCount
 @property  unsigned long acceptedXPCRequestsCount
 @property  unsigned long erroredXPCRequestsCount
 @property  unsigned long sentXPCNotificationsCount
 @property  unsigned long filteredXPCNotificationsCount
 @property  unsigned long cameraRecordingReachabilityChangedCount
 @property  unsigned long cameraRecordingReachabilityOfflineDuration
 @property  unsigned long homeHubReachabilityChangedCount
 @property  unsigned long ipAccessoryReachabilityChangedCount
 @property  unsigned long currentDeviceStartedLegacyElectionCount
 @property  unsigned long v2ElectionCoordinationMeshUpdateCount
 @property  unsigned long v2ElectionCoordinationMeshLeaderElectedCount
 @property  unsigned long v2ElectionCoordinationMeshLeaderChangedCount
 @property  unsigned long v2ElectionPrimaryResidentElectionRunCount
 @property  unsigned long v2ElectionPrimaryResidentChangedCount
 @property  BOOL v2ElectionCurrentDeviceInSecondaryCoordinationMesh
 @property  BOOL activeDay
 @property  unsigned long activeDaysPerMonthCount
 @property  long long countOfDaysSinceLastActive
 @property  unsigned long peakConcurrentIPAccessoryUpdateStaging
 @property  unsigned long peakConcurrentIPAccessoryUpdateApply
 @property  unsigned long peakConcurrentBLEAccessoryUpdateStaging
 @property  unsigned long peakConcurrentBLEAccessoryUpdateApply
 @property  unsigned long peakConcurrentThreadAccessoryUpdateStaging
 @property  unsigned long peakConcurrentThreadAccessoryUpdateApply
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAggregationAnalysisLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDAggregationAnalysisLogEvent eventName]
  -[HMDAggregationAnalysisLogEvent .cxx_destruct]
  -[HMDAggregationAnalysisLogEvent dataSyncState]
  -[HMDAggregationAnalysisLogEvent setDataSyncState:]
  -[HMDAggregationAnalysisLogEvent serializedEvent]
  -[HMDAggregationAnalysisLogEvent submitAtDate:]
  -[HMDAggregationAnalysisLogEvent logEventWithAppendedCommonDimensions]
  -[HMDAggregationAnalysisLogEvent peakConcurrentIPAccessoryUpdateStaging]
  -[HMDAggregationAnalysisLogEvent peakConcurrentIPAccessoryUpdateApply]
  -[HMDAggregationAnalysisLogEvent peakConcurrentBLEAccessoryUpdateStaging]
  -[HMDAggregationAnalysisLogEvent peakConcurrentBLEAccessoryUpdateApply]
  -[HMDAggregationAnalysisLogEvent peakConcurrentThreadAccessoryUpdateStaging]
  -[HMDAggregationAnalysisLogEvent peakConcurrentThreadAccessoryUpdateApply]
  -[HMDAggregationAnalysisLogEvent AWDMessageType]
  -[HMDAggregationAnalysisLogEvent metricForAWD]
  -[HMDAggregationAnalysisLogEvent initWithDataSyncStateDescription:eventCountersManager:]
  -[HMDAggregationAnalysisLogEvent alertMessageForRadarDialog]
  -[HMDAggregationAnalysisLogEvent alertMessageForRadarDialogWithCloudSyncBytesThreshold:remoteMessageCountThreshold:]
  -[HMDAggregationAnalysisLogEvent processLaunchCount]
  -[HMDAggregationAnalysisLogEvent setProcessLaunchCount:]
  -[HMDAggregationAnalysisLogEvent processJetsamCount]
  -[HMDAggregationAnalysisLogEvent setProcessJetsamCount:]
  -[HMDAggregationAnalysisLogEvent processCrashCount]
  -[HMDAggregationAnalysisLogEvent setProcessCrashCount:]
  -[HMDAggregationAnalysisLogEvent jetsamReasonHighwaterCount]
  -[HMDAggregationAnalysisLogEvent setJetsamReasonHighwaterCount:]
  -[HMDAggregationAnalysisLogEvent jetsamReasonProcessLimitCount]
  -[HMDAggregationAnalysisLogEvent setJetsamReasonProcessLimitCount:]
  -[HMDAggregationAnalysisLogEvent jetsamReasonOtherCount]
  -[HMDAggregationAnalysisLogEvent setJetsamReasonOtherCount:]
  -[HMDAggregationAnalysisLogEvent processMemoryPressureStateWarningCount]
  -[HMDAggregationAnalysisLogEvent setProcessMemoryPressureStateWarningCount:]
  -[HMDAggregationAnalysisLogEvent processMemoryPressureStateCriticalCount]
  -[HMDAggregationAnalysisLogEvent setProcessMemoryPressureStateCriticalCount:]
  -[HMDAggregationAnalysisLogEvent sampledAverageProcessMemoryUsageMB]
  -[HMDAggregationAnalysisLogEvent setSampledAverageProcessMemoryUsageMB:]
  -[HMDAggregationAnalysisLogEvent sampledPeakProcessMemoryUsageMB]
  -[HMDAggregationAnalysisLogEvent setSampledPeakProcessMemoryUsageMB:]
  -[HMDAggregationAnalysisLogEvent remoteMessagesSentCount]
  -[HMDAggregationAnalysisLogEvent setRemoteMessagesSentCount:]
  -[HMDAggregationAnalysisLogEvent remoteMessagesReceivedCount]
  -[HMDAggregationAnalysisLogEvent setRemoteMessagesReceivedCount:]
  -[HMDAggregationAnalysisLogEvent txIDSMessagesCount]
  -[HMDAggregationAnalysisLogEvent setTxIDSMessagesCount:]
  -[HMDAggregationAnalysisLogEvent rxIDSMessagesCount]
  -[HMDAggregationAnalysisLogEvent setRxIDSMessagesCount:]
  -[HMDAggregationAnalysisLogEvent txIDSProxyMessagesCount]
  -[HMDAggregationAnalysisLogEvent setTxIDSProxyMessagesCount:]
  -[HMDAggregationAnalysisLogEvent rxIDSProxyMessagesCount]
  -[HMDAggregationAnalysisLogEvent setRxIDSProxyMessagesCount:]
  -[HMDAggregationAnalysisLogEvent txLoxyMessagesCount]
  -[HMDAggregationAnalysisLogEvent setTxLoxyMessagesCount:]
  -[HMDAggregationAnalysisLogEvent rxLoxyMessagesCount]
  -[HMDAggregationAnalysisLogEvent setRxLoxyMessagesCount:]
  -[HMDAggregationAnalysisLogEvent txRapportMessagesCount]
  -[HMDAggregationAnalysisLogEvent setTxRapportMessagesCount:]
  -[HMDAggregationAnalysisLogEvent rxRapportMessagesCount]
  -[HMDAggregationAnalysisLogEvent setRxRapportMessagesCount:]
  -[HMDAggregationAnalysisLogEvent txSecureMessagesCount]
  -[HMDAggregationAnalysisLogEvent setTxSecureMessagesCount:]
  -[HMDAggregationAnalysisLogEvent rxSecureMessagesCount]
  -[HMDAggregationAnalysisLogEvent setRxSecureMessagesCount:]
  -[HMDAggregationAnalysisLogEvent cloudSyncPushCount]
  -[HMDAggregationAnalysisLogEvent setCloudSyncPushCount:]
  -[HMDAggregationAnalysisLogEvent legacyCloudSyncPushCount]
  -[HMDAggregationAnalysisLogEvent setLegacyCloudSyncPushCount:]
  -[HMDAggregationAnalysisLogEvent cloudSyncFetchCount]
  -[HMDAggregationAnalysisLogEvent setCloudSyncFetchCount:]
  -[HMDAggregationAnalysisLogEvent cloudSyncUploadCount]
  -[HMDAggregationAnalysisLogEvent setCloudSyncUploadCount:]
  -[HMDAggregationAnalysisLogEvent cloudSyncUploadErrorCount]
  -[HMDAggregationAnalysisLogEvent setCloudSyncUploadErrorCount:]
  -[HMDAggregationAnalysisLogEvent homeDataBytesFetched]
  -[HMDAggregationAnalysisLogEvent setHomeDataBytesFetched:]
  -[HMDAggregationAnalysisLogEvent homeDataBytesPushed]
  -[HMDAggregationAnalysisLogEvent setHomeDataBytesPushed:]
  -[HMDAggregationAnalysisLogEvent legacyHomeDataBytesFetched]
  -[HMDAggregationAnalysisLogEvent setLegacyHomeDataBytesFetched:]
  -[HMDAggregationAnalysisLogEvent legacyHomeDataBytesPushed]
  -[HMDAggregationAnalysisLogEvent setLegacyHomeDataBytesPushed:]
  -[HMDAggregationAnalysisLogEvent cloudSyncDecryptionFailedCount]
  -[HMDAggregationAnalysisLogEvent setCloudSyncDecryptionFailedCount:]
  -[HMDAggregationAnalysisLogEvent cloudSyncLastDecryptionFailed]
  -[HMDAggregationAnalysisLogEvent setCloudSyncLastDecryptionFailed:]
  -[HMDAggregationAnalysisLogEvent cloudSyncMaximumDelayReached]
  -[HMDAggregationAnalysisLogEvent setCloudSyncMaximumDelayReached:]
  -[HMDAggregationAnalysisLogEvent numReadSiri]
  -[HMDAggregationAnalysisLogEvent setNumReadSiri:]
  -[HMDAggregationAnalysisLogEvent numWriteSiri]
  -[HMDAggregationAnalysisLogEvent setNumWriteSiri:]
  -[HMDAggregationAnalysisLogEvent numReadFirstPartyApp]
  -[HMDAggregationAnalysisLogEvent setNumReadFirstPartyApp:]
  -[HMDAggregationAnalysisLogEvent numWriteFirstPartyApp]
  -[HMDAggregationAnalysisLogEvent setNumWriteFirstPartyApp:]
  -[HMDAggregationAnalysisLogEvent numReadThirdPartyApp]
  -[HMDAggregationAnalysisLogEvent setNumReadThirdPartyApp:]
  -[HMDAggregationAnalysisLogEvent numWriteThirdPartyApp]
  -[HMDAggregationAnalysisLogEvent setNumWriteThirdPartyApp:]
  -[HMDAggregationAnalysisLogEvent numReadInternalRequested]
  -[HMDAggregationAnalysisLogEvent setNumReadInternalRequested:]
  -[HMDAggregationAnalysisLogEvent numWriteInternalRequested]
  -[HMDAggregationAnalysisLogEvent setNumWriteInternalRequested:]
  -[HMDAggregationAnalysisLogEvent numReadUnknownSource]
  -[HMDAggregationAnalysisLogEvent setNumReadUnknownSource:]
  -[HMDAggregationAnalysisLogEvent numWriteUnknownSource]
  -[HMDAggregationAnalysisLogEvent setNumWriteUnknownSource:]
  -[HMDAggregationAnalysisLogEvent numReadWriteSuccessIP]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteSuccessIP:]
  -[HMDAggregationAnalysisLogEvent numReadWriteFailureIP]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteFailureIP:]
  -[HMDAggregationAnalysisLogEvent numReadWriteSuccessBT]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteSuccessBT:]
  -[HMDAggregationAnalysisLogEvent numReadWriteFailureBT]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteFailureBT:]
  -[HMDAggregationAnalysisLogEvent numReadWriteSuccessIDS]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteSuccessIDS:]
  -[HMDAggregationAnalysisLogEvent numReadWriteFailureIDS]
  -[HMDAggregationAnalysisLogEvent setNumReadWriteFailureIDS:]
  -[HMDAggregationAnalysisLogEvent averageLatencyIP]
  -[HMDAggregationAnalysisLogEvent setAverageLatencyIP:]
  -[HMDAggregationAnalysisLogEvent averageLatencyBT]
  -[HMDAggregationAnalysisLogEvent setAverageLatencyBT:]
  -[HMDAggregationAnalysisLogEvent averageLatencyIDS]
  -[HMDAggregationAnalysisLogEvent setAverageLatencyIDS:]
  -[HMDAggregationAnalysisLogEvent numAccessoriesAdded]
  -[HMDAggregationAnalysisLogEvent setNumAccessoriesAdded:]
  -[HMDAggregationAnalysisLogEvent numScenesAdded]
  -[HMDAggregationAnalysisLogEvent setNumScenesAdded:]
  -[HMDAggregationAnalysisLogEvent numTriggersAdded]
  -[HMDAggregationAnalysisLogEvent setNumTriggersAdded:]
  -[HMDAggregationAnalysisLogEvent numShortcutsAdded]
  -[HMDAggregationAnalysisLogEvent setNumShortcutsAdded:]
  -[HMDAggregationAnalysisLogEvent numScenesUserRun]
  -[HMDAggregationAnalysisLogEvent setNumScenesUserRun:]
  -[HMDAggregationAnalysisLogEvent numShortcutsRun]
  -[HMDAggregationAnalysisLogEvent setNumShortcutsRun:]
  -[HMDAggregationAnalysisLogEvent numTriggersFired]
  -[HMDAggregationAnalysisLogEvent setNumTriggersFired:]
  -[HMDAggregationAnalysisLogEvent hapIPInvalidationCount]
  -[HMDAggregationAnalysisLogEvent setHapIPInvalidationCount:]
  -[HMDAggregationAnalysisLogEvent hapIPSentHTTPRequestsCount]
  -[HMDAggregationAnalysisLogEvent setHapIPSentHTTPRequestsCount:]
  -[HMDAggregationAnalysisLogEvent hapIPReceivedHTTPResponsesCount]
  -[HMDAggregationAnalysisLogEvent setHapIPReceivedHTTPResponsesCount:]
  -[HMDAggregationAnalysisLogEvent hapIPReceivedHTTPEventCount]
  -[HMDAggregationAnalysisLogEvent setHapIPReceivedHTTPEventCount:]
  -[HMDAggregationAnalysisLogEvent hapBTLEConnectionsCount]
  -[HMDAggregationAnalysisLogEvent setHapBTLEConnectionsCount:]
  -[HMDAggregationAnalysisLogEvent hapBTLEConnectionPerReasonsCount]
  -[HMDAggregationAnalysisLogEvent setHapBTLEConnectionPerReasonsCount:]
  -[HMDAggregationAnalysisLogEvent hapBTLEDiscoveriesCount]
  -[HMDAggregationAnalysisLogEvent setHapBTLEDiscoveriesCount:]
  -[HMDAggregationAnalysisLogEvent cameraStreamStartSuccessCount]
  -[HMDAggregationAnalysisLogEvent setCameraStreamStartSuccessCount:]
  -[HMDAggregationAnalysisLogEvent cameraStreamStartFailureCount]
  -[HMDAggregationAnalysisLogEvent setCameraStreamStartFailureCount:]
  -[HMDAggregationAnalysisLogEvent fetchCameraClipVideoSegmentAssetCount]
  -[HMDAggregationAnalysisLogEvent setFetchCameraClipVideoSegmentAssetCount:]
  -[HMDAggregationAnalysisLogEvent acceptedXPCRequestsCount]
  -[HMDAggregationAnalysisLogEvent setAcceptedXPCRequestsCount:]
  -[HMDAggregationAnalysisLogEvent erroredXPCRequestsCount]
  -[HMDAggregationAnalysisLogEvent setErroredXPCRequestsCount:]
  -[HMDAggregationAnalysisLogEvent sentXPCNotificationsCount]
  -[HMDAggregationAnalysisLogEvent setSentXPCNotificationsCount:]
  -[HMDAggregationAnalysisLogEvent filteredXPCNotificationsCount]
  -[HMDAggregationAnalysisLogEvent setFilteredXPCNotificationsCount:]
  -[HMDAggregationAnalysisLogEvent cameraRecordingReachabilityChangedCount]
  -[HMDAggregationAnalysisLogEvent setCameraRecordingReachabilityChangedCount:]
  -[HMDAggregationAnalysisLogEvent cameraRecordingReachabilityOfflineDuration]
  -[HMDAggregationAnalysisLogEvent setCameraRecordingReachabilityOfflineDuration:]
  -[HMDAggregationAnalysisLogEvent homeHubReachabilityChangedCount]
  -[HMDAggregationAnalysisLogEvent setHomeHubReachabilityChangedCount:]
  -[HMDAggregationAnalysisLogEvent ipAccessoryReachabilityChangedCount]
  -[HMDAggregationAnalysisLogEvent setIpAccessoryReachabilityChangedCount:]
  -[HMDAggregationAnalysisLogEvent currentDeviceStartedLegacyElectionCount]
  -[HMDAggregationAnalysisLogEvent setCurrentDeviceStartedLegacyElectionCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionCoordinationMeshUpdateCount]
  -[HMDAggregationAnalysisLogEvent setV2ElectionCoordinationMeshUpdateCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionCoordinationMeshLeaderElectedCount]
  -[HMDAggregationAnalysisLogEvent setV2ElectionCoordinationMeshLeaderElectedCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionCoordinationMeshLeaderChangedCount]
  -[HMDAggregationAnalysisLogEvent setV2ElectionCoordinationMeshLeaderChangedCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionPrimaryResidentElectionRunCount]
  -[HMDAggregationAnalysisLogEvent setV2ElectionPrimaryResidentElectionRunCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionPrimaryResidentChangedCount]
  -[HMDAggregationAnalysisLogEvent setV2ElectionPrimaryResidentChangedCount:]
  -[HMDAggregationAnalysisLogEvent v2ElectionCurrentDeviceInSecondaryCoordinationMesh]
  -[HMDAggregationAnalysisLogEvent setV2ElectionCurrentDeviceInSecondaryCoordinationMesh:]
  -[HMDAggregationAnalysisLogEvent isActiveDay]
  -[HMDAggregationAnalysisLogEvent setActiveDay:]
  -[HMDAggregationAnalysisLogEvent activeDaysPerMonthCount]
  -[HMDAggregationAnalysisLogEvent setActiveDaysPerMonthCount:]
  -[HMDAggregationAnalysisLogEvent countOfDaysSinceLastActive]
  -[HMDAggregationAnalysisLogEvent setCountOfDaysSinceLastActive:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentIPAccessoryUpdateStaging:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentIPAccessoryUpdateApply:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentBLEAccessoryUpdateStaging:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentBLEAccessoryUpdateApply:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentThreadAccessoryUpdateStaging:]
  -[HMDAggregationAnalysisLogEvent setPeakConcurrentThreadAccessoryUpdateApply:]
  -[HMDAggregationAnalysisLogEvent eventCountersManager]


HMDCameraAudioParameterSelection : HMDCameraParameterSelection
 @property  HMDSupportedAudioStreamConfiguration *supportedAudioStreamConfiguration
 @property  HMDSupportedRTPConfiguration *rtpConfiguration
 @property  HMDSelectedAudioParameters *selectedAudioParameters
 @property  HMDStreamingCapabilities *streamingCapabilities
 @property  NSArray *audioCodecsPreference
 @property  NSArray *bitrateSettingsPreference
 @property  NSArray *sampleRatesPreference
 @property  NSArray *validAudioParameterCombinations
 @property  HMDAudioCodecGroup *selectedCodecGroupType
 @property  HMDBitRateSetting *selectedBitRateSetting
 @property  HMDAudioSampleRate *selectedSampleRate
 @property  NSNumber *selectedAudioChannelCount
 @property  HMDCameraAudioParameterCombination *selectedAudioParameterCombination
 @property  NSNumber *comfortNoiseSupported

  // class methods
  +[HMDCameraAudioParameterSelection logCategory]

  // instance methods
  -[HMDCameraAudioParameterSelection logIdentifier]
  -[HMDCameraAudioParameterSelection .cxx_destruct]
  -[HMDCameraAudioParameterSelection initWithSessionID:supportedAudioConfiguration:supportedRTPConfiguration:streamingCapabilities:]
  -[HMDCameraAudioParameterSelection selectAudioParameters]
  -[HMDCameraAudioParameterSelection _selectParametersFromCodec:bitRateSettings:sampleRates:audioChannelCount:]
  -[HMDCameraAudioParameterSelection createSRTPParamters]
  -[HMDCameraAudioParameterSelection createSelectedAudioParameters]
  -[HMDCameraAudioParameterSelection _generateAllCombinations:]
  -[HMDCameraAudioParameterSelection supportedAudioStreamConfiguration]
  -[HMDCameraAudioParameterSelection rtpConfiguration]
  -[HMDCameraAudioParameterSelection selectedAudioParameters]
  -[HMDCameraAudioParameterSelection setSelectedAudioParameters:]
  -[HMDCameraAudioParameterSelection streamingCapabilities]
  -[HMDCameraAudioParameterSelection audioCodecsPreference]
  -[HMDCameraAudioParameterSelection bitrateSettingsPreference]
  -[HMDCameraAudioParameterSelection sampleRatesPreference]
  -[HMDCameraAudioParameterSelection validAudioParameterCombinations]
  -[HMDCameraAudioParameterSelection selectedCodecGroupType]
  -[HMDCameraAudioParameterSelection setSelectedCodecGroupType:]
  -[HMDCameraAudioParameterSelection selectedBitRateSetting]
  -[HMDCameraAudioParameterSelection setSelectedBitRateSetting:]
  -[HMDCameraAudioParameterSelection selectedSampleRate]
  -[HMDCameraAudioParameterSelection setSelectedSampleRate:]
  -[HMDCameraAudioParameterSelection selectedAudioChannelCount]
  -[HMDCameraAudioParameterSelection setSelectedAudioChannelCount:]
  -[HMDCameraAudioParameterSelection selectedAudioParameterCombination]
  -[HMDCameraAudioParameterSelection setSelectedAudioParameterCombination:]
  -[HMDCameraAudioParameterSelection comfortNoiseSupported]
  -[HMDCameraAudioParameterSelection setComfortNoiseSupported:]


HMDHomeInvitation : HMFObject <HMFTimerDelegate, NSSecureCoding>
 @property  HMDHome *home
 @property  HMHomeInvitationData *invitationData
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  @? resolutionHandler
 @property  @? expirationHandler
 @property  HMFTimer *timer
 @property  NSArray *operations
 @property  NSUUID *identifier
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  long long invitationState
 @property  BOOL expired
 @property  BOOL pending
 @property  BOOL accepted
 @property  BOOL declined
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeInvitation supportsSecureCoding]

  // instance methods
  -[HMDHomeInvitation isDeclined]
  -[HMDHomeInvitation home]
  -[HMDHomeInvitation setClientQueue:]
  -[HMDHomeInvitation timerDidFire:]
  -[HMDHomeInvitation endDate]
  -[HMDHomeInvitation identifier]
  -[HMDHomeInvitation operations]
  -[HMDHomeInvitation setOperations:]
  -[HMDHomeInvitation clientQueue]
  -[HMDHomeInvitation encodeWithCoder:]
  -[HMDHomeInvitation expire]
  -[HMDHomeInvitation .cxx_destruct]
  -[HMDHomeInvitation setTimer:]
  -[HMDHomeInvitation timer]
  -[HMDHomeInvitation setEndDate:]
  -[HMDHomeInvitation isPending]
  -[HMDHomeInvitation isExpired]
  -[HMDHomeInvitation startDate]
  -[HMDHomeInvitation initWithCoder:]
  -[HMDHomeInvitation expirationHandler]
  -[HMDHomeInvitation setExpirationHandler:]
  -[HMDHomeInvitation setHome:]
  -[HMDHomeInvitation _clearTimer]
  -[HMDHomeInvitation invitationState]
  -[HMDHomeInvitation resolutionHandler]
  -[HMDHomeInvitation setResolutionHandler:]
  -[HMDHomeInvitation setInvitationState:]
  -[HMDHomeInvitation initWithCoder:invitationData:]
  -[HMDHomeInvitation invitationData]
  -[HMDHomeInvitation setInvitationData:]
  -[HMDHomeInvitation isAccepted]
  -[HMDHomeInvitation decline]
  -[HMDHomeInvitation initWithInvitationData:forHome:]
  -[HMDHomeInvitation refreshDisplayName]
  -[HMDHomeInvitation notifyStateChangedForMessage:]
  -[HMDHomeInvitation updateInvitationState:]
  -[HMDHomeInvitation updateTimer:clientQueue:]
  -[HMDHomeInvitation accept]
  -[HMDHomeInvitation _configureTimer]
  -[HMDHomeInvitation _resolve:]
  -[HMDHomeInvitation describeWithFormat]


HMDOutgoingHomeInvitation : HMDHomeInvitation <HMDBackingStoreObjectProtocol>
 @property  NSArray *operationIdentifiers
 @property  NSString *inviteeDestinationAddress
 @property  NSArray *accessoryInvitationsInformation
 @property  NSUUID *uuid
 @property  HMDUser *user
 @property  NSArray *operations
 @property  BOOL complete
 @property  BOOL responseReceived
 @property  NSUUID *messageIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDOutgoingHomeInvitation supportsSecureCoding]

  // instance methods
  -[HMDOutgoingHomeInvitation setUser:]
  -[HMDOutgoingHomeInvitation isComplete]
  -[HMDOutgoingHomeInvitation operations]
  -[HMDOutgoingHomeInvitation encodeWithCoder:]
  -[HMDOutgoingHomeInvitation uuid]
  -[HMDOutgoingHomeInvitation user]
  -[HMDOutgoingHomeInvitation .cxx_destruct]
  -[HMDOutgoingHomeInvitation shortDescription]
  -[HMDOutgoingHomeInvitation messageIdentifier]
  -[HMDOutgoingHomeInvitation cancel]
  -[HMDOutgoingHomeInvitation initWithCoder:]
  -[HMDOutgoingHomeInvitation responseReceived]
  -[HMDOutgoingHomeInvitation transactionObjectUpdated:newValues:message:]
  -[HMDOutgoingHomeInvitation transactionObjectRemoved:message:]
  -[HMDOutgoingHomeInvitation modelObjectWithChangeType:version:]
  -[HMDOutgoingHomeInvitation refreshDisplayName]
  -[HMDOutgoingHomeInvitation notifyStateChangedForMessage:]
  -[HMDOutgoingHomeInvitation updateInvitationState:]
  -[HMDOutgoingHomeInvitation describeWithFormat]
  -[HMDOutgoingHomeInvitation initWithInvitee:invitationState:forHome:expiryDate:messageIdentifier:]
  -[HMDOutgoingHomeInvitation initWithUUID:invitee:invitationState:forHome:expiryDate:messageIdentifier:]
  -[HMDOutgoingHomeInvitation accessoryInvitationsInformation]
  -[HMDOutgoingHomeInvitation updateUser:]
  -[HMDOutgoingHomeInvitation operationIdentifiers]
  -[HMDOutgoingHomeInvitation setOperationIdentifiers:]
  -[HMDOutgoingHomeInvitation updateUserManagementOperations:]
  -[HMDOutgoingHomeInvitation processUserManagementOperationIdentifiers:]
  -[HMDOutgoingHomeInvitation _transactionOutgoingInvitationUpdated:newValues:message:]
  -[HMDOutgoingHomeInvitation emptyModelObjectWithChangeType:]
  -[HMDOutgoingHomeInvitation inviteeDestinationAddress]
  -[HMDOutgoingHomeInvitation setInviteeDestinationAddress:]


HMDOutgoingHomeInvitationModel : HMDBackingStoreModelObject
 @property  NSDictionary *user
 @property  NSNumber *invitationState
 @property  NSDate *expiryDate
 @property  NSString *messageIdentifier
 @property  NSNumber *responseReceived
 @property  NSString *inviteeDestinationAddress
 @property  NSArray *operations
 @property  NSArray *operationIdentifiers

  // class methods
  +[HMDOutgoingHomeInvitationModel properties]

  // instance methods
  -[HMDOutgoingHomeInvitationModel dependentUUIDs]


HMDIncomingHomeInvitation : HMDHomeInvitation
 @property  NSDictionary *bulletinContext
 @property  NSString *homeName
 @property  NSUUID *homeUUID
 @property  HMDAccount *inviterAccount
 @property  HMFPairingIdentity *inviterIdentity
 @property  NSString *inviterUserID
 @property  NSString *inviterMergeID

  // class methods
  +[HMDIncomingHomeInvitation supportsSecureCoding]

  // instance methods
  -[HMDIncomingHomeInvitation encodeWithCoder:]
  -[HMDIncomingHomeInvitation .cxx_destruct]
  -[HMDIncomingHomeInvitation homeUUID]
  -[HMDIncomingHomeInvitation initWithCoder:]
  -[HMDIncomingHomeInvitation homeName]
  -[HMDIncomingHomeInvitation inviterUserID]
  -[HMDIncomingHomeInvitation inviterMergeID]
  -[HMDIncomingHomeInvitation bulletinContext]
  -[HMDIncomingHomeInvitation refreshDisplayName]
  -[HMDIncomingHomeInvitation describeWithFormat]
  -[HMDIncomingHomeInvitation initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:expiryDate:]
  -[HMDIncomingHomeInvitation initWithInviterAccount:invitationIdentifier:invitationState:homeName:homeUUID:inviterIdentity:inviterMergeID:expiryDate:]
  -[HMDIncomingHomeInvitation inviterAccount]
  -[HMDIncomingHomeInvitation inviterIdentity]


_HMDNEHelperClientCacheEntry : NSObject
 @property  NSString *signingId
 @property  NSArray *identifiers

  // instance methods
  -[_HMDNEHelperClientCacheEntry identifiers]
  -[_HMDNEHelperClientCacheEntry .cxx_destruct]
  -[_HMDNEHelperClientCacheEntry initWithSigningId:identifiers:]
  -[_HMDNEHelperClientCacheEntry signingId]


HMDNEHelperClient : NSObject <HMFLogging, HMDNEHelperClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNEHelperClient logCategory]

  // instance methods
  -[HMDNEHelperClient .cxx_destruct]
  -[HMDNEHelperClient init]
  -[HMDNEHelperClient cacheCopyAppUUIDForSigningIdentifier:executablePath:]
  -[HMDNEHelperClient cacheCopySigningIdentifierForProcessIdentifier:]
  -[HMDNEHelperClient cacheClearUUIDs]
  -[HMDNEHelperClient _addIdentifiers:signingId:]
  -[HMDNEHelperClient _signingIdentifierWithProcessId:]


HMDAccessCodeWriteRequestModificationRequestPair : HMFObject
 @property  HMDCharacteristicWriteRequest *writeRequest
 @property  NSArray *modificationRequests

  // instance methods
  -[HMDAccessCodeWriteRequestModificationRequestPair .cxx_destruct]
  -[HMDAccessCodeWriteRequestModificationRequestPair initWithWriteRequest:modificationRequests:]
  -[HMDAccessCodeWriteRequestModificationRequestPair writeRequest]
  -[HMDAccessCodeWriteRequestModificationRequestPair modificationRequests]


HMDHomeAIPersonDataInterface : HMFObject <HMIPersonManagerDataSource, HMDPersonDataInterface>
 @property  HMIPersonManager *personManager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDPersonDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMIHomePersonManager *homePersonManager
 @property  HMIExternalPersonManager *photosPersonManager

  // instance methods
  -[HMDHomeAIPersonDataInterface dataSource]
  -[HMDHomeAIPersonDataInterface workQueue]
  -[HMDHomeAIPersonDataInterface .cxx_destruct]
  -[HMDHomeAIPersonDataInterface setDataSource:]
  -[HMDHomeAIPersonDataInterface performCloudPullWithCompletion:]
  -[HMDHomeAIPersonDataInterface fetchPersonsWithUUIDs:completion:]
  -[HMDHomeAIPersonDataInterface fetchAllPersonsWithCompletion:]
  -[HMDHomeAIPersonDataInterface fetchFaceCropsForPersonsWithUUIDs:completion:]
  -[HMDHomeAIPersonDataInterface fetchAllPersonFaceCropsWithCompletion:]
  -[HMDHomeAIPersonDataInterface fetchFaceprintsForFaceCropsWithUUIDs:completion:]
  -[HMDHomeAIPersonDataInterface fetchAllFaceprintsWithCompletion:]
  -[HMDHomeAIPersonDataInterface personManager]
  -[HMDHomeAIPersonDataInterface configureWithDataSource:home:]
  -[HMDHomeAIPersonDataInterface handleUpdatedPerson:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleUpdatedPersonFaceCrop:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleUpdatedFaceprint:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleRemovedPersonWithUUID:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleRemovedFaceCropWithUUID:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleRemovedFaceprintWithUUID:mirrorOutputFuture:]
  -[HMDHomeAIPersonDataInterface handleUpdatedIsCurrentDeviceAvailableResident:]
  -[HMDHomeAIPersonDataInterface handleUpdatedIsDataSyncInProgress:]
  -[HMDHomeAIPersonDataInterface initWithPersonManager:workQueue:]


HMDRemoteEventRouterProtoConnectResponse : PBCodable <NSCopying>
 @property  NSMutableArray *cachedEvents

  // class methods
  +[HMDRemoteEventRouterProtoConnectResponse cachedEventsType]

  // instance methods
  -[HMDRemoteEventRouterProtoConnectResponse copyTo:]
  -[HMDRemoteEventRouterProtoConnectResponse .cxx_destruct]
  -[HMDRemoteEventRouterProtoConnectResponse mergeFrom:]
  -[HMDRemoteEventRouterProtoConnectResponse dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoConnectResponse copyWithZone:]
  -[HMDRemoteEventRouterProtoConnectResponse readFrom:]
  -[HMDRemoteEventRouterProtoConnectResponse writeTo:]
  -[HMDRemoteEventRouterProtoConnectResponse isEqual:]
  -[HMDRemoteEventRouterProtoConnectResponse clearCachedEvents]
  -[HMDRemoteEventRouterProtoConnectResponse addCachedEvents:]
  -[HMDRemoteEventRouterProtoConnectResponse cachedEventsCount]
  -[HMDRemoteEventRouterProtoConnectResponse cachedEventsAtIndex:]
  -[HMDRemoteEventRouterProtoConnectResponse cachedEvents]
  -[HMDRemoteEventRouterProtoConnectResponse setCachedEvents:]


HMDBulletinBoardNotificationServiceGroup : HMFObject <NSSecureCoding, HMFMessageReceiver, HMFLogging, HMFDumpState>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSHashTable *cameraProfilesTable
 @property  NSHashTable *associatedServicesTable
 @property  NSSet *cameraProfileUUIDs
 @property  NSSet *associatedServiceUUIDs
 @property  HMDBulletinBoardNotification *bulletinBoardNotification
 @property  NSArray *associatedServices
 @property  NSArray *cameraProfiles
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBulletinBoardNotificationServiceGroup supportsSecureCoding]
  +[HMDBulletinBoardNotificationServiceGroup logCategory]

  // instance methods
  -[HMDBulletinBoardNotificationServiceGroup dumpState]
  -[HMDBulletinBoardNotificationServiceGroup logIdentifier]
  -[HMDBulletinBoardNotificationServiceGroup encodeWithCoder:]
  -[HMDBulletinBoardNotificationServiceGroup workQueue]
  -[HMDBulletinBoardNotificationServiceGroup setWorkQueue:]
  -[HMDBulletinBoardNotificationServiceGroup dealloc]
  -[HMDBulletinBoardNotificationServiceGroup .cxx_destruct]
  -[HMDBulletinBoardNotificationServiceGroup messageTargetUUID]
  -[HMDBulletinBoardNotificationServiceGroup _sendNotification:]
  -[HMDBulletinBoardNotificationServiceGroup messageReceiveQueue]
  -[HMDBulletinBoardNotificationServiceGroup msgDispatcher]
  -[HMDBulletinBoardNotificationServiceGroup initWithCoder:]
  -[HMDBulletinBoardNotificationServiceGroup _registerNotificationHandlers]
  -[HMDBulletinBoardNotificationServiceGroup cameraProfiles]
  -[HMDBulletinBoardNotificationServiceGroup setCameraProfiles:]
  -[HMDBulletinBoardNotificationServiceGroup cameraProfileUUIDs]
  -[HMDBulletinBoardNotificationServiceGroup setCameraProfileUUIDs:]
  -[HMDBulletinBoardNotificationServiceGroup associatedServices]
  -[HMDBulletinBoardNotificationServiceGroup setAssociatedServices:]
  -[HMDBulletinBoardNotificationServiceGroup associatedServiceUUIDs]
  -[HMDBulletinBoardNotificationServiceGroup setAssociatedServiceUUIDs:]
  -[HMDBulletinBoardNotificationServiceGroup bulletinBoardNotification]
  -[HMDBulletinBoardNotificationServiceGroup initWithBulletinBoardNotification:]
  -[HMDBulletinBoardNotificationServiceGroup setMsgDispatcher:]
  -[HMDBulletinBoardNotificationServiceGroup _handleBulletinBoardNotificationServiceGroupRequest:]
  -[HMDBulletinBoardNotificationServiceGroup configureWithWorkQueue:messageDispatcher:]
  -[HMDBulletinBoardNotificationServiceGroup _isSupportedAssociationService:]
  -[HMDBulletinBoardNotificationServiceGroup _isAlarmService:]
  -[HMDBulletinBoardNotificationServiceGroup _isNotificationGeneratingService:]
  -[HMDBulletinBoardNotificationServiceGroup configureBulletinNotification]
  -[HMDBulletinBoardNotificationServiceGroup _isDefaultRoom:ofHome:]
  -[HMDBulletinBoardNotificationServiceGroup _accessoriesInRoom:ofHome:]
  -[HMDBulletinBoardNotificationServiceGroup _cameraNotificationGeneratingServicesForAccessory:]
  -[HMDBulletinBoardNotificationServiceGroup _configureServices]
  -[HMDBulletinBoardNotificationServiceGroup _updateAssociatedServices:associatedCameras:]
  -[HMDBulletinBoardNotificationServiceGroup _updateAssociatedServicesTable:]
  -[HMDBulletinBoardNotificationServiceGroup _prepareServiceGroupPayload]
  -[HMDBulletinBoardNotificationServiceGroup cameraProfilesTable]
  -[HMDBulletinBoardNotificationServiceGroup setCameraProfilesTable:]
  -[HMDBulletinBoardNotificationServiceGroup associatedServicesTable]
  -[HMDBulletinBoardNotificationServiceGroup setAssociatedServicesTable:]
  -[HMDBulletinBoardNotificationServiceGroup _cameraProfileWithID:]
  -[HMDBulletinBoardNotificationServiceGroup actionContextForCameraProfileID:]
  -[HMDBulletinBoardNotificationServiceGroup setBulletinBoardNotification:]


HMDarwinNotificationProvider : HMFObject <HMDarwinNotificationProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDarwinNotificationProvider notifyRegisterDispatch:outToken:queue:handler:]
  -[HMDarwinNotificationProvider notifyRegisterCheck:outToken:]
  -[HMDarwinNotificationProvider notifyGetState:state:]
  -[HMDarwinNotificationProvider notifySetState:state:]
  -[HMDarwinNotificationProvider notifyCancel:]
  -[HMDarwinNotificationProvider notifyPost:]


HMDCalendarEvent : HMDTimeEvent <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSDateComponents *fireDateComponents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCalendarEvent supportsSecureCoding]
  +[HMDCalendarEvent logCategory]

  // instance methods
  -[HMDCalendarEvent encodeWithCoder:]
  -[HMDCalendarEvent .cxx_destruct]
  -[HMDCalendarEvent initWithCoder:]
  -[HMDCalendarEvent fireDateComponents]
  -[HMDCalendarEvent setFireDateComponents:]
  -[HMDCalendarEvent createPayload]
  -[HMDCalendarEvent initWithModel:home:]
  -[HMDCalendarEvent _transactionObjectUpdated:newValues:message:]
  -[HMDCalendarEvent _transactionObjectRemoved:message:]
  -[HMDCalendarEvent modelObjectWithChangeType:]
  -[HMDCalendarEvent emptyModelObject]
  -[HMDCalendarEvent _handleUpdateRequest:]
  -[HMDCalendarEvent areMonthDayNotMatching:]
  -[HMDCalendarEvent _nextTimerDate]
  -[HMDCalendarEvent _nextTimerDateAfterDate:timeZone:]
  -[HMDCalendarEvent _nextRecurrentFireDateAfterDate:]
  -[HMDCalendarEvent _nextRecurrentFireDateAfterDate:recurrences:]
  -[HMDCalendarEvent analyticsTriggerEventData]


HMDCalendarEventModel : HMDEventModel
 @property  NSData *fireDateComponents

  // class methods
  +[HMDCalendarEventModel properties]
  +[HMDCalendarEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]


HMDCHIPHomeStorage : HMFObject <HMFLogging, NSCopying, NSSecureCoding>
 @property  NSNumber *fabricID
 @property  NSNumber *fabricIndex
 @property  NSNumber *lastNodeID
 @property  NSData *rootCertificate
 @property  NSData *operationalCertificate
 @property  NSData *intermediateCertificate
 @property  NSDictionary *keyValueStore
 @property  NSDictionary *debugDictionaryRepresentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCHIPHomeStorage supportsSecureCoding]
  +[HMDCHIPHomeStorage logCategory]

  // instance methods
  -[HMDCHIPHomeStorage logIdentifier]
  -[HMDCHIPHomeStorage encodeWithCoder:]
  -[HMDCHIPHomeStorage attributeDescriptions]
  -[HMDCHIPHomeStorage .cxx_destruct]
  -[HMDCHIPHomeStorage keyValueStore]
  -[HMDCHIPHomeStorage setKeyValueStore:]
  -[HMDCHIPHomeStorage copyWithZone:]
  -[HMDCHIPHomeStorage isEqual:]
  -[HMDCHIPHomeStorage initWithCoder:]
  -[HMDCHIPHomeStorage debugDictionaryRepresentation]
  -[HMDCHIPHomeStorage updateUsingHomeModel:]
  -[HMDCHIPHomeStorage updateHomeModel:]
  -[HMDCHIPHomeStorage fabricID]
  -[HMDCHIPHomeStorage setFabricID:]
  -[HMDCHIPHomeStorage fabricIndex]
  -[HMDCHIPHomeStorage setFabricIndex:]
  -[HMDCHIPHomeStorage lastNodeID]
  -[HMDCHIPHomeStorage setLastNodeID:]
  -[HMDCHIPHomeStorage rootCertificate]
  -[HMDCHIPHomeStorage setRootCertificate:]
  -[HMDCHIPHomeStorage operationalCertificate]
  -[HMDCHIPHomeStorage setOperationalCertificate:]
  -[HMDCHIPHomeStorage intermediateCertificate]
  -[HMDCHIPHomeStorage setIntermediateCertificate:]


HMDRemoteLoginInitiatorSignoutSession : HMDRemoteLoginInitiatorSession
  // instance methods
  -[HMDRemoteLoginInitiatorSignoutSession dealloc]
  -[HMDRemoteLoginInitiatorSignoutSession initWithSessionID:home:]


HMDDynamicActivityAttributionPublisher : HMFObject
  // instance methods
  -[HMDDynamicActivityAttributionPublisher setCurrentAttributionKey:andApp:]


HMDPendingResponse : HMFObject
 @property  HMFMessage *requestMessage
 @property  NSString *originalRequestIdentifier
 @property  unsigned long pendingResponseCount
 @property  unsigned long totalRequestsCount
 @property  NSMutableArray *allResponses
 @property  NSMutableArray *latestResponses
 @property  @? responseHandler
 @property  double creationTime

  // class methods
  +[HMDPendingResponse tupleForMessage:originalRequestIdentifier:requestCount:withCompletionHandler:]

  // instance methods
  -[HMDPendingResponse responseHandler]
  -[HMDPendingResponse creationTime]
  -[HMDPendingResponse .cxx_destruct]
  -[HMDPendingResponse setCreationTime:]
  -[HMDPendingResponse setResponseHandler:]
  -[HMDPendingResponse requestMessage]
  -[HMDPendingResponse addToPendingResponses:]
  -[HMDPendingResponse addResponsesToPendingResponse:]
  -[HMDPendingResponse retrieveAndClearAllResponses]
  -[HMDPendingResponse retrieveAndClearLatestResponses]
  -[HMDPendingResponse setRequestMessage:]
  -[HMDPendingResponse originalRequestIdentifier]
  -[HMDPendingResponse setOriginalRequestIdentifier:]
  -[HMDPendingResponse pendingResponseCount]
  -[HMDPendingResponse setPendingResponseCount:]
  -[HMDPendingResponse totalRequestsCount]
  -[HMDPendingResponse setTotalRequestsCount:]
  -[HMDPendingResponse allResponses]
  -[HMDPendingResponse setAllResponses:]
  -[HMDPendingResponse latestResponses]
  -[HMDPendingResponse setLatestResponses:]


HMDAccessoryReachabilityTuple : HMFObject
 @property  NSString *accessoryUUID
 @property  BOOL previouslySentReachability
 @property  BOOL currentReachability
 @property  unsigned long previouslySentSuspendedState
 @property  unsigned long currentSuspendedState

  // class methods
  +[HMDAccessoryReachabilityTuple tupleWithAccessoryUUID:reachable:]

  // instance methods
  -[HMDAccessoryReachabilityTuple accessoryUUID]
  -[HMDAccessoryReachabilityTuple .cxx_destruct]
  -[HMDAccessoryReachabilityTuple currentReachability]
  -[HMDAccessoryReachabilityTuple setCurrentReachability:]
  -[HMDAccessoryReachabilityTuple isEqual:]
  -[HMDAccessoryReachabilityTuple setAccessoryUUID:]
  -[HMDAccessoryReachabilityTuple previouslySentReachability]
  -[HMDAccessoryReachabilityTuple setPreviouslySentReachability:]
  -[HMDAccessoryReachabilityTuple previouslySentSuspendedState]
  -[HMDAccessoryReachabilityTuple setPreviouslySentSuspendedState:]
  -[HMDAccessoryReachabilityTuple currentSuspendedState]
  -[HMDAccessoryReachabilityTuple setCurrentSuspendedState:]


HMDDeviceRegistrationEntry : HMFObject
 @property  HMDDevice *device
 @property  NSArray *accessoryUUIDList

  // instance methods
  -[HMDDeviceRegistrationEntry .cxx_destruct]
  -[HMDDeviceRegistrationEntry device]
  -[HMDDeviceRegistrationEntry isEqual:]
  -[HMDDeviceRegistrationEntry initWithDevice:accessoryList:]
  -[HMDDeviceRegistrationEntry accessoryUUIDList]


HMDHome : HMFObject <HMDBulletinIdentifiers, HMDHomeResidentMessagingContext, HMDAppleMediaAccessoriesStateManagerFactory, HMDAppleMediaAccessoriesStateManagerDataSource, HMDPrimaryResidentMessageRouterFactory, HMDAccessorySettingsLocalMessageHandlerFactory, HMDUnifiedLanguageValueListSettingDataProviderDataSource, HMDSiriEndpointProfileMessageHandlerFactory, HMDPrimaryResidentMessageRouterMetricsDispatcherFactory, HMDAccessorySettingsMessengerFactory, HMDAppleMediaAccessoriesStateManagerMetricsDispatcherFactory, HMDPrimaryResidentMessageRouterDataSource, HMDSiriEndpointProfilesMessengerFactory, HMDAccessorySettingsLocalMessageHandlerDataSource, HMDUnifiedLanguageValueListSettingDataProviderFactory, HMDAppleMediaAccessoryMessageRouterDataSource, HMDDelegatingMessageRouterDataSource, HMDResidentDeviceManagerDelegate, HMEDelegatingEventRouterDataSource, HMDHomeMediaSystemHandlerDataSource, HMDHomeMediaSystemHandlerDelegate, HMDHomeRemoteEventAccessControllerDataSource, HMDMediaGroupsAggregatorDataSource, HMDMediaGroupsAggregatorMessengerDataSource, HMDMediaGroupsLocalDataStorageDataSource, HMDMediaGroupsUnconfiguredParticipantOnboardingManagerDataSource, HMDMediaGroupsControllerDataSource, HMDMediaGroupsMessageHandlerDataSource, HMDMediaGroupSettingsControllerDataSource, HMDPrimaryResidentCapabilitiesAggregatorDelegate, HMDPrimaryResidentCapabilitiesAggregatorDataSource, HMDRemoteEventAccessControlProvider, HMDHomeRemoteEventRouterClientControllerDataSource, HMDRemoteEventRouterServerDataSource, HMDDevicePreferenceDataSource, HMDSiriSecureAccessoryAccessControllerDataSource, HMDResidentAppleMediaStateManagerDataSource, HMDResidentAppleMediaStateManagerDelegate, HMDPrimaryResidentChangeMonitorDataSource, HMDLogEventDailyTaskRunner, HMDMediaGroupsAggregateConsumerDelegate, HMDAccessoryBrowserDelegate, HMDHomeMessageReceiver, HMFTimerDelegate, HMFDumpState, HMDUserManagementOperationDelegate, HMDCoordinationStateManagerProviding, HMDAppleMediaAccessoryDataSource, HMDMediaActionRouterDataSource, HMFLogging, NSSecureCoding, HMDBackingStoreObjectProtocol, HMDHomeConfigurationLogEventDataSource>
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  BOOL hasAnyAccessoryWithWalletKeySupport
 @property  BOOL hasAnyAccessoryWithWalletKeyAndAccessCodeSupport
 @property  NSArray *accessoriesWithWalletKeySupport
 @property  BOOL hasPostedWalletKeyOnboardingBulletinForAnyAccessory
 @property  HMDCHIPHomeStorage *chipStorage
 @property  BOOL bulletinBoardNotificationsMigrationFileExistsOnDisk
 @property  BOOL cameraNotificationSettingsMigrationFileExistsOnDisk
 @property  NSArray *enabledResidents
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSUUID *messageTargetUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDAccessoryCount *accessoryCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *accessoriesRequiringManualReconfigurationOnRouterRemoval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  long long protectionMode
 @property  unsigned long networkRouterSupport
 @property  HMDNetworkRouterClientManager *routerClientManager
 @property  NSArray *wiFiRouterAccessories
 @property  HMDHAPAccessory *activeNetworkRouterAccessory
 @property  BOOL supportsRouterManagement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long accessNotAllowedReasonCode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  @? currentUserFactory
 @property  <HMDXPCMessageTransportFactory> *xpcMessageTransportFactory
 @property  NSHashTable *removeAccessoryInProgressForHMDAccessories
 @property  HMDApplicationData *appData
 @property  long long atHomeLevel
 @property  BOOL residentSupported
 @property  unsigned long homeHubState
 @property  <HMDHomeLocalDeviceCapabilitiesDataSource> *localCapabilitiesDataSource
 @property  <NSObject> *WiFiAssertion
 @property  NSMutableDictionary *newlyConfiguredAccessories
 @property  NSMutableDictionary *addPendingAccessorySetupCodeHandlers
 @property  NSMutableDictionary *addPendingAccessorySetupCodes
 @property  NSMapTable *addPendingAccessories
 @property  NSMutableDictionary *addAccessoryRequestMap
 @property  NSMutableDictionary *notificationHandlerMap
 @property  NSArray *mediaSessions
 @property  NSArray *mediaSessionStates
 @property  HMDHomeReprovisionHandler *homeReprovisionHandler
 @property  unsigned long stateHandle
 @property  NSHashTable *connectionsDiscoveringSymptomsForNearbyDevices
 @property  BOOL multiUserEnabled
 @property  BOOL soundCheckEnabled
 @property  BOOL locationServicesEnabled
 @property  BOOL didOnboardLocationServices
 @property  BOOL hasAnyUserAcknowledgedCameraRecordingOnboarding
 @property  BOOL hasOnboardedForAccessCode
 @property  BOOL hasOnboardedForWalletKey
 @property  BOOL shouldEncodeHasOnboardedForWalletKey
 @property  BOOL shouldEncodeNFCReaderKey
 @property  BOOL ownerTrustZoneCapable
 @property  HMDMediaGroupsController *audioGroupsController
 @property  HMDMediaGroupsAggregator *mediaGroupsAggregator
 @property  HMDMediaGroupsUnconfiguredParticipantOnboardingManager *mediaGroupsUnconfiguredParticipantOnboardingManager
 @property  HMDMediaGroupSettingsController *mediaGroupSettingsController
 @property  HMDUserActionPredictionManager *userActionPredictionManager
 @property  HMDRemoteEventRouterServer *remoteEventRouterServer
 @property  NSMutableArray *currentTriggers
 @property  long long previousReachableAccessoriesCount
 @property  long long previousReachableAppleMediaAccessoriesCount
 @property  HMDHomePersonDataManager *personDataManager
 @property  HMDHomeNaturalLightingContextUpdater *naturalLightingContextUpdater
 @property  HMDNaturalLightingContext *naturalLightingContext
 @property  HMDHAPAccessoryConnectionCoordinator *accessoryConnectionCoordinator
 @property  HMDHAPAccessoryReaderWriter *accessoryReaderWriter
 @property  BOOL isNetworkAvailable
 @property  HMDHomeNFCReaderKey *nfcReaderKey
 @property  HMDHomeLightBrightnessLogger *lightBrightnessLogger
 @property  HMDHomeMetricsDispatcher *metricsDispatcher
 @property  HMDHAPMetadata *hapMetadata
 @property  HMDDeviceLockStateDataSource *deviceLockStateDataSource
 @property  NSNotificationCenter *notificationCenter
 @property  HMDResidentAppleMediaStateManager *mediaStateManager
 @property  BOOL residentFirstAccessoryCommunicationEnabled
 @property  BOOL restrictedUserSupported
 @property  HMEDelegatingEventRouter *serverDelegatingEventRouter
 @property  HMDPrimaryResidentCapabilitiesAggregator *capabilitiesAggregator
 @property  HMDHomeMediaSystemHandler *mediaSystemController
 @property  BOOL overrideSentinelZoneForConvergencePeriod
 @property  HMDHomeKitVersion *currentHomeKitVersion
 @property  HMDHomeRemoteEventRouterClientController *remoteEventRouterClientController
 @property  HMDUnifiedLanguageValueListSettingDataProvider *unifiedLanguageValueListSettingDataProvider
 @property  HMDSiriEndpointProfilesMessenger *siriEndpointProfilesMessenger
 @property  HMDMultiuserSettingsMessenger *multiuserSettingsMessenger
 @property  HMDAppleMediaAccessoriesStateManager *appleMediaAccessoriesStateManager
 @property  HMDAccessorySettingsMessenger *accessorySettingsMessenger
 @property  HMDHomeObjectChangeHandler *homeObjectChangeHandler
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  <HMDAccessoryBrowserProtocol> *accessoryBrowser
 @property  HMDBackingStore *backingStore
 @property  HMDPrimaryResidentMessageRouter *primaryResidentMessageRouter
 @property  HMDAppleMediaAccessoryMessageRouter *appleDeviceRouter
 @property  HMDDelegatingMessageRouter *accessoryMessageRouterViaPrimary
 @property  NSMutableArray *rooms
 @property  NSMutableArray *zones
 @property  NSMutableArray *discoveredAccessories
 @property  NSMutableArray *services
 @property  NSMutableArray *serviceGroups
 @property  NSMutableArray *actionSets
 @property  NSMutableArray *triggerOwnedActionSets
 @property  NSMutableArray *outgoingInvitations
 @property  NSMutableArray *retrievalAccessoryCompletionTuples
 @property  NSArray *usersSupportingPresence
 @property  NSMutableArray *pendingUsers
 @property  NSMutableArray *removedUsers
 @property  NSMutableArray *unconfiguredResidentDevices
 @property  HMDRoom *roomForEntireHome
 @property  long long configurationVersion
 @property  long long lastSyncedConfigurationVersion
 @property  long long expectedConfigurationVersion
 @property  NSString *ownerName
 @property  NSDate *creationDate
 @property  NSDate *firstHAPAccessoryAddedDate
 @property  HMDNotificationRegistry *notificationRegistry
 @property  BOOL remoteAccessIsEnabled
 @property  NSMutableSet *heartbeatPingMessagesQueuedWithServer
 @property  NSMutableSet *pendingResponsesForRemoteAccessSetup
 @property  BOOL adminUser
 @property  BOOL sharedAdmin
 @property  BOOL watchSkipVersionCheck
 @property  BOOL registeredNotificationWithRemoteGateway
 @property  BOOL allowsRemoteAccess
 @property  BOOL migratingAfterResidentChange
 @property  NSMutableArray *assistantOperations
 @property  NSMutableDictionary *enableNotificationPayload
 @property  NSMutableDictionary *disableNotificationPayload
 @property  HMFTimer *modifyNotificationsCoalesceTimer
 @property  NSHashTable *unpairedSecondaryHAPAccessories
 @property  <HMDResidentDeviceManager> *residentDeviceManager
 @property  HMDSharedHomeUpdateHandler *sharedHomeUpdateHandler
 @property  BOOL currentRemoteReachabilityRegistration
 @property  HMDManagedStagedValue *stagedRemoteReachabilityRegistration
 @property  BOOL migrationNeeded
 @property  BOOL isUpdatedToHH2
 @property  NSMutableArray *reachabilityRegisteredDevices
 @property  HMFTimer *reachabilityNotificationTimer
 @property  NSMutableArray *remoteReachabilityNotificationPendingAccessories
 @property  HMFTimer *disableNotificationTimer
 @property  NSMutableDictionary *pendingResponses
 @property  HMFTimer *pendingResponsesTimer
 @property  NSArray *residentCapableDevices
 @property  NSArray *residentEnabledDevices
 @property  NSMutableArray *ownedTriggers
 @property  NSMapTable *uuidToHAPAccessoryConfigTable
 @property  NSArray *accessories
 @property  HMDPredicateUtilities *predicateUtility
 @property  HMDHomeKitVersion *sharedHomeSourceVersion
 @property  HMDMediaActionRouter *mediaActionRouter
 @property  long long protectionMode
 @property  unsigned long networkRouterSupportDisableReason
 @property  unsigned long networkRouterSupport
 @property  HMDNetworkRouterClientManager *routerClientManager
 @property  HMDAccessoryNetworkProtectionGroupRegistry *networkProtectionGroupRegistry
 @property  NSUUID *activeNetworkRouterUUID
 @property  BOOL activeNetworkRouterInitialSetupNeeded
 @property  NSUUID *primaryNetworkRouterManagingDeviceUUID
 @property  HMDHomeKitVersion *minimumNetworkRouterSupportHomeKitVersion
 @property  HMDHomeKitVersion *minHomeKitVersionForAccessoryNetworkProtectionChange
 @property  HMFMessageDestination *messageDestination
 @property  HMHomePersonManagerSettings *personManagerSettings
 @property  NSUUID *personManagerZoneUUID
 @property  HMDResidentReachabilityNotificationManager *reachabilityNotificationManager
 @property  HMDAccessory *currentAccessory
 @property  <HMDCOStateManager> *coordinationStateManager
 @property  BOOL supportsSiriEndpointOnBoarding
 @property  BOOL currentDeviceSupportsSidekickSettings
 @property  BOOL enabledResidentsSupportsHomeHub
 @property  HMDHomeRemoteEventAccessController *homeRemoteEventAccessController
 @property  unsigned long nonIPadResidentDeviceCountForHH2Migration
 @property  HMDAppleAccountSettings *accountSettings
 @property  HMDCHIPHomeStorage *chipStorage
 @property  BOOL automaticThirdPartyAccessorySoftwareUpdateEnabled
 @property  BOOL bulletinNotificationsSupported
 @property  HMDMediaGroupsAggregateConsumer *mediaGroupsAggregateConsumer
 @property  BOOL hasNeverAddedAnyHAPAccessory
 @property  long long reachableAccessoriesCount
 @property  long long reachableAppleMediaAccessoriesCount
 @property  NSNumber *availableBSPsCount
 @property  NSNumber *availableBorderRouters
 @property  NSString *unfilteredThreadNetworkID
 @property  unsigned long threadNetworkSequenceNumber
 @property  NSArray *mediaSystems
 @property  HMDSiriSecureAccessoryAccessController *siriSecureAccessoryAccessController
 @property  <HMDCarPlayDataSource> *carPlayDataSource
 @property  NSNumber *overriddenHomeAccessControl
 @property  NSString *name
 @property  HMDHomeObjectLookup *lookup
 @property  HMDHomeManager *homeManager
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  NSUUID *zoneID
 @property  HMDHomeLocationHandler *homeLocationHandler
 @property  HMUserPresenceAuthorization *presenceAuthStatus
 @property  HMUserPresenceCompute *presenceComputeStatus
 @property  HMDHomeAdministratorHandler *administratorHandler
 @property  NSArray *appleMediaAccessories
 @property  NSArray *hapAccessories
 @property  NSArray *cameraAccessories
 @property  NSArray *audioGroups
 @property  NSArray *audioGroupsWithoutMediaSystems
 @property  NSArray *mediaDestinations
 @property  BOOL anyBTLEAccessoryReachable
 @property  NSDate *notificationsUpdatedTime
 @property  NSSet *notificationRegistrations
 @property  NSSet *notificationDeregistrations
 @property  BOOL hasCharacteristicNotificationRegistrations
 @property  long long homeLocation
 @property  BOOL hasReachableAccessories
 @property  HMDHomePresenceMonitor *presenceMonitor
 @property  HMDUserPresenceFeeder *presenceFeeder
 @property  HMDHomePeriodicReader *periodicReader
 @property  NSArray *enabledResidents
 @property  HMDPrimaryResidentChangeMonitor *primaryResidentChangeMonitor
 @property  BOOL currentDevicePrimaryResident
 @property  NSString *threadNetworkID
 @property  HMDHomePersonManager *personManager
 @property  HMDCameraAnalysisStatePublisher *analysisStatePublisher
 @property  NSArray *triggers
 @property  HMDHomeNaturalLightingCurveWriter *naturalLightingCurveWriter
 @property  HMDHomeWalletKeyManager *walletKeyManager
 @property  HMDHomeNFCReaderKeyManager *nfcReaderKeyManager
 @property  HMDAccessCodeManager *accessCodeManager
 @property  NSMutableDictionary *labelsByAccessCode
 @property  NSMutableDictionary *removedUserInfoByAccessCode
 @property  HMDHomeLockNotificationManager *lockNotificationManager
 @property  HMDAccessoryReachabilityChangedLogEventManager *reachabilityChangedLogEventManager
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  BOOL currentDeviceAvailableResident
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  HMDDevice *companionDevice
 @property  BOOL companionReachable
 @property  HMDHome *home
 @property  BOOL ownerUser
 @property  NSArray *users

  // class methods
  +[HMDHome supportsSecureCoding]
  +[HMDHome _initialize]
  +[HMDHome shortDescription]
  +[HMDHome logCategory]
  +[HMDHome hasMessageReceiverChildren]
  +[HMDHome nfcIssuerKeyIdentifierWithPairingIdentity:]
  +[HMDHome updateCHIPPropertiesOnHomeModel:forAddedHAPAccessoryServer:]
  +[HMDHome updateCHIPPropertiesOnAccessoryModel:forAddedHAPAccessoryServer:]
  +[HMDHome migrationBulletinBoardNotificationsForHome:]
  +[HMDHome migrationCameraNotificationSettingsForHome:]
  +[HMDHome encodedMigrationBulletinBoardNotifications:]
  +[HMDHome encodedMigrationCameraNotificationSettings:]
  +[HMDHome decodedMigrationBulletinBoardNotifications:]
  +[HMDHome decodedMigrationCameraNotificationSettings:]
  +[HMDHome getBuiltinActionSets]
  +[HMDHome isObjectContainedInHome:]
  +[HMDHome zoneIDFromHomeUUID:]
  +[HMDHome filterUsersSupportingPresence:]
  +[HMDHome notificationPayloadForChangedCharacteristics:destinationIsXPCTransport:]
  +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteWrite:message:]
  +[HMDHome appendCharacteristicsToAccessoryList:responseTuples:forMultipleCharacteristicsRemoteRead:]
  +[HMDHome supportedAccessoryClasses]

  // instance methods
  -[HMDHome dumpState]
  -[HMDHome notificationCenter]
  -[HMDHome stateHandle]
  -[HMDHome owner]
  -[HMDHome eventStoreReadHandle]
  -[HMDHome removeService:]
  -[HMDHome home]
  -[HMDHome _registerStateHandler]
  -[HMDHome addName:]
  -[HMDHome currentAccessory]
  -[HMDHome timerDidFire:]
  -[HMDHome _registerForNotifications]
  -[HMDHome isAdminUser]
  -[HMDHome isNetworkAvailable]
  -[HMDHome accessoryWithIdentifier:]
  -[HMDHome triggers]
  -[HMDHome logIdentifier]
  -[HMDHome configurationVersion]
  -[HMDHome migrationNeeded]
  -[HMDHome encodeWithCoder:]
  -[HMDHome workQueue]
  -[HMDHome handleSignificantTimeChange]
  -[HMDHome outgoingInvitations]
  -[HMDHome lookup]
  -[HMDHome zoneID]
  -[HMDHome services]
  -[HMDHome setWorkQueue:]
  -[HMDHome removeUser:]
  -[HMDHome dealloc]
  -[HMDHome removeAccessory:]
  -[HMDHome setStateHandle:]
  -[HMDHome uuid]
  -[HMDHome .cxx_destruct]
  -[HMDHome messageTargetUUID]
  -[HMDHome removeTrigger:]
  -[HMDHome creationDate]
  -[HMDHome setSoundCheckEnabled:]
  -[HMDHome evaluatePredicate:]
  -[HMDHome messageDestination]
  -[HMDHome homeManager]
  -[HMDHome locationServicesEnabled]
  -[HMDHome setAccessories:]
  -[HMDHome contextID]
  -[HMDHome setConfigurationVersion:]
  -[HMDHome shortDescription]
  -[HMDHome setName:]
  -[HMDHome setHomeManager:]
  -[HMDHome users]
  -[HMDHome setCreationDate:]
  -[HMDHome setBackingStore:]
  -[HMDHome ownerName]
  -[HMDHome name]
  -[HMDHome setServices:]
  -[HMDHome backingStore]
  -[HMDHome soundCheckEnabled]
  -[HMDHome validateName:]
  -[HMDHome messageReceiveQueue]
  -[HMDHome accessories]
  -[HMDHome msgDispatcher]
  -[HMDHome addAccessory:]
  -[HMDHome currentUser]
  -[HMDHome setLocationServicesEnabled:]
  -[HMDHome urlString]
  -[HMDHome preferredDevice]
  -[HMDHome initWithCoder:]
  -[HMDHome setOwnerName:]
  -[HMDHome zones]
  -[HMDHome setZones:]
  -[HMDHome serviceGroups]
  -[HMDHome setServiceGroups:]
  -[HMDHome mediaPassword]
  -[HMDHome mediaSystems]
  -[HMDHome isMediaPeerToPeerEnabled]
  -[HMDHome minimumMediaUserPrivilege]
  -[HMDHome resetConfiguration]
  -[HMDHome companionDevice]
  -[HMDHome accountSettings]
  -[HMDHome descriptionWithPointer:]
  -[HMDHome presenceAuthStatus]
  -[HMDHome setPresenceAuthStatus:]
  -[HMDHome presenceComputeStatus]
  -[HMDHome setPresenceComputeStatus:]
  -[HMDHome accessNotAllowedReasonCode]
  -[HMDHome rooms]
  -[HMDHome metricsDispatcher]
  -[HMDHome hasOnboardedForAccessCode]
  -[HMDHome unconfigure]
  -[HMDHome hasOnboardedForWalletKey]
  -[HMDHome actionSets]
  -[HMDHome personManagerSettings]
  -[HMDHome supportsRouterManagement]
  -[HMDHome setMsgDispatcher:]
  -[HMDHome _registerForMessages]
  -[HMDHome homeLocation]
  -[HMDHome notificationsUpdatedTime]
  -[HMDHome setNotificationsUpdatedTime:]
  -[HMDHome protectionMode]
  -[HMDHome setProtectionMode:]
  -[HMDHome networkRouterSupport]
  -[HMDHome setNetworkRouterSupport:]
  -[HMDHome networkRouterSupportDisableReason]
  -[HMDHome setNetworkRouterSupportDisableReason:]
  -[HMDHome setBulletinNotificationsSupported:]
  -[HMDHome isMultiUserEnabled]
  -[HMDHome setMultiUserEnabled:]
  -[HMDHome hasAnyUserAcknowledgedCameraRecordingOnboarding]
  -[HMDHome setHasAnyUserAcknowledgedCameraRecordingOnboarding:]
  -[HMDHome setHasOnboardedForAccessCode:]
  -[HMDHome setHasOnboardedForWalletKey:]
  -[HMDHome roomWithUUID:]
  -[HMDHome roomWithName:]
  -[HMDHome zoneWithUUID:]
  -[HMDHome zoneWithName:]
  -[HMDHome serviceGroupWithUUID:]
  -[HMDHome serviceGroupWithName:]
  -[HMDHome actionSetWithUUID:]
  -[HMDHome triggerOwnedActionSetWithUUID:]
  -[HMDHome actionSetWithName:]
  -[HMDHome triggerWithUUID:]
  -[HMDHome triggerWithName:]
  -[HMDHome accessoryWithUUID:]
  -[HMDHome userWithUUID:]
  -[HMDHome mediaSystemWithUUID:]
  -[HMDHome mediaProfileWithUUID:]
  -[HMDHome personManager]
  -[HMDHome setPersonManagerSettings:]
  -[HMDHome audioGroupsController]
  -[HMDHome setAudioGroupsController:]
  -[HMDHome threadNetworkID]
  -[HMDHome setThreadNetworkID:]
  -[HMDHome homeHubState]
  -[HMDHome currentTriggers]
  -[HMDHome setCurrentTriggers:]
  -[HMDHome isOwnerUser]
  -[HMDHome setOwnerUser:]
  -[HMDHome setAdminUser:]
  -[HMDHome didOnboardLocationServices]
  -[HMDHome setDidOnboardLocationServices:]
  -[HMDHome automaticThirdPartyAccessorySoftwareUpdateEnabled]
  -[HMDHome triggerOwnedActionSets]
  -[HMDHome bulletinNotificationsSupported]
  -[HMDHome removeAccessory:completionHandler:]
  -[HMDHome _removeAccessory:completionHandler:]
  -[HMDHome roomForEntireHome]
  -[HMDHome isAutomaticSoftwareUpdateEnabled]
  -[HMDHome setAutomaticSoftwareUpdateEnabled:]
  -[HMDHome isAutomaticThirdPartyAccessorySoftwareUpdateEnabled]
  -[HMDHome setAutomaticThirdPartyAccessorySoftwareUpdateEnabled:]
  -[HMDHome setMinimumMediaUserPrivilege:]
  -[HMDHome setMediaPeerToPeerEnabled:]
  -[HMDHome setMediaPassword:]
  -[HMDHome accessoryWithEndpointIdentifier:]
  -[HMDHome discoveredAccessories]
  -[HMDHome _removeCharacteristic:]
  -[HMDHome delegatingRouter:filteredTopics:forRouter:]
  -[HMDHome delegatingRouter:upstreamTopicsFor:]
  -[HMDHome setAppData:]
  -[HMDHome appData]
  -[HMDHome _removeService:]
  -[HMDHome pendingResponses]
  -[HMDHome messageReceiverChildren]
  -[HMDHome supportsDeviceWithCapabilities:]
  -[HMDHome transactionObjectUpdated:newValues:message:]
  -[HMDHome transactionObjectRemoved:message:]
  -[HMDHome removeCharacteristic:]
  -[HMDHome modelObjectWithChangeType:version:]
  -[HMDHome modelObjectWithChangeType:]
  -[HMDHome backingStoreObjects:]
  -[HMDHome contextSPIUniqueIdentifier]
  -[HMDHome homeBulletinContext]
  -[HMDHome logEventSubmitter]
  -[HMDHome hasAnyAccessoryWithWalletKeySupport]
  -[HMDHome hasAnyAccessoryWithWalletKeyAndAccessCodeSupport]
  -[HMDHome accessoriesWithWalletKeySupport]
  -[HMDHome hasPostedWalletKeyOnboardingBulletinForAnyAccessory]
  -[HMDHome updateHasOnboardedForWalletKey:message:]
  -[HMDHome handleXPCConnectionInvalidated:]
  -[HMDHome performWriteRequests:withRetries:timeInterval:loggingObject:]
  -[HMDHome performReadRequests:withRetries:timeInterval:loggingObject:]
  -[HMDHome administratorHandler]
  -[HMDHome isCurrentDevicePrimaryResident]
  -[HMDHome isResidentSupported]
  -[HMDHome walletKeyManager]
  -[HMDHome accessoryReaderWriter]
  -[HMDHome runDailyTask]
  -[HMDHome dailyScheduler]
  -[HMDHome accessoryBrowser]
  -[HMDHome setAccessoryBrowser:]
  -[HMDHome handleUpdatedCHIPPropertiesOnHomeModel:actions:]
  -[HMDHome finishPairingForServer:]
  -[HMDHome handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:]
  -[HMDHome _handleResetAndRemoveAllCHIPPairingsFromAccessoryMessage:]
  -[HMDHome chipStorage]
  -[HMDHome synchronouslyFetchIsCarPlayConnectedStatus]
  -[HMDHome emptyModelObjectWithChangeType:]
  -[HMDHome configureBulletinNotification]
  -[HMDHome bulletinBoardNotificationsMigrationFileExistsOnDisk]
  -[HMDHome cameraNotificationSettingsMigrationFileExistsOnDisk]
  -[HMDHome getBulletinBoardNotificationSerializedFileName]
  -[HMDHome getCameraNotificationSettingsSerializedFileName]
  -[HMDHome storeMigrationBulletinBoardNotificationsToDisk]
  -[HMDHome storeMigrationCameraNotificationSettingsToDisk]
  -[HMDHome loadMigrationBulletinBoardNotificationsFromDisk]
  -[HMDHome loadMigrationCameraNotificationSettingsFromDisk]
  -[HMDHome removeBulletinBoardNotificationsMigrationFileFromDisk]
  -[HMDHome removeCameraNotificationSettingsMigrationFileFromDisk]
  -[HMDHome _handleRename:]
  -[HMDHome _handleAddRoom:]
  -[HMDHome _handleRemoveRoom:]
  -[HMDHome _handleAddZone:]
  -[HMDHome _handleRemoveZone:]
  -[HMDHome _handleAddServiceGroup:]
  -[HMDHome _handleRemoveServiceGroup:]
  -[HMDHome _handleAddActionSet:]
  -[HMDHome _handleRemoveActionSet:]
  -[HMDHome _handleRemoveTrigger:]
  -[HMDHome _handleUpdateUserAccess:]
  -[HMDHome _handleUpdateUserCamerasAccessLevel:]
  -[HMDHome _handleRemoveUser:]
  -[HMDHome _handleSetAppData:]
  -[HMDHome _handleUpdateMinimumMediaUserPrivilege:]
  -[HMDHome _handleUpdateMediaPeerToPeerEnabled:]
  -[HMDHome _handleUpdateMediaPassword:]
  -[HMDHome _handleSetHasAnyUserAcknowledgedCameraRecordingOnboardingRequest:]
  -[HMDHome _handleSetHasOnboardedForAccessCodeMessage:]
  -[HMDHome _handleSetHasOnboardedForWalletKeyMessage:]
  -[HMDHome _handleUpdateNetworkProtection:]
  -[HMDHome _handleUpdateUserAnnounceAccess:]
  -[HMDHome _handleResolveThreadNetworkRequest:]
  -[HMDHome _handleSoundCheckUpdateRequest:]
  -[HMDHome _handleHomeUpdateLocationServicesEnabledRequest:]
  -[HMDHome _handleHomeUpdateDidOnboardLocationServicesRequest:]
  -[HMDHome _handleUpdateOutgoingInvitationState:]
  -[HMDHome _handleAddEventTrigger:]
  -[HMDHome _handleAddTimerTrigger:]
  -[HMDHome _handleAddTriggers:]
  -[HMDHome _handleAddAccessory:]
  -[HMDHome _handleAddAccessories:]
  -[HMDHome _handleUserConsentResponseForAccessory:]
  -[HMDHome _handleContinuePairingAccessory:]
  -[HMDHome _handleCancelPairingAccessory:]
  -[HMDHome _handleRemoveAccessory:]
  -[HMDHome _handleUserInvitations:]
  -[HMDHome _handleEnableMultiUserRequest:]
  -[HMDHome _handleOutgoingInvitations:]
  -[HMDHome _handleCreateUniquePSKClientConfiguration:]
  -[HMDHome _handleRemoveClientConfiguration:]
  -[HMDHome _handleHomeLocationUpdateFromSharedAdmin:]
  -[HMDHome _handleSetMinimumNetworkRouterHomeKitVersion:]
  -[HMDHome _handleSetMinHomeKitVersionForAccessoryNetworkProtectionChange:]
  -[HMDHome _handleRetrieveHomeLocationForFeedback:]
  -[HMDHome _handleUpdatePresenceConsent:]
  -[HMDHome _handleRetrieveAsyncResults:]
  -[HMDHome _handleExecuteActionSet:]
  -[HMDHome _handleMultipleCharacteristicWrite:]
  -[HMDHome _handleMultipleCharacteristicRead:]
  -[HMDHome _handleCharacteristicWrite:]
  -[HMDHome _handleCharacteristicRead:]
  -[HMDHome _handleCharacteristicEnableNotification:]
  -[HMDHome _handleModifyCharacteristicNotifications:]
  -[HMDHome _handleAccessoryReachabilityRegistrationAndEnable:]
  -[HMDHome _handleAccessoryReachabilityRegistration:]
  -[HMDHome _handleRequestHomeDataSync:]
  -[HMDHome _handleCharacteristicsChangedNotification:]
  -[HMDHome _handleQueryUserIsAdmin:]
  -[HMDHome _handleAccessoryReachabilityChange:]
  -[HMDHome _handleAccessoryReachabilityEventNotificationsRegistration:]
  -[HMDHome _handleExecuteConfirmationOfTrigger:]
  -[HMDHome handleEvaluatePredicateMessage:]
  -[HMDHome _handleUpdateAutomaticSoftwareUpdate:]
  -[HMDHome _handleUpdateAutomaticThirdPartyAccessorySoftwareUpdate:]
  -[HMDHome _handleQueryResidentReachabilityForAccessories:]
  -[HMDHome executeActionsFromMessage:]
  -[HMDHome _handleUpdateRequestForHomeInvitationFromInvitee:]
  -[HMDHome _handleEnableNotifications:]
  -[HMDHome _handleMediaPropertiesWrite:]
  -[HMDHome _handleMediaPropertiesRead:]
  -[HMDHome _handleStartDiscoveringSymptomsForNearbyDevicesMessage:]
  -[HMDHome _handleStopDiscoveringSymptomsForNearbyDevicesMessage:]
  -[HMDHome _handleAssistantAccessControlUpdate:]
  -[HMDHome _handleMediaContentProfileAccessControlUpdate:]
  -[HMDHome _handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:]
  -[HMDHome _handleRemoteUserClientCloudShareRequest:]
  -[HMDHome _handleRemoteUserClientCloudShareRepairRequest:]
  -[HMDHome _handleFetchLastModifiedServiceOfType:]
  -[HMDHome _handleTestUpgradeToROAR:]
  -[HMDHome handleFetchLightProfileSettingsMessage:]
  -[HMDHome handleActive:]
  -[HMDHome handleInactive:]
  -[HMDHome handleAdaptiveClientDisconnected:]
  -[HMDHome handleNetworkRouterProfileAdded:]
  -[HMDHome handleNetworkRouterProfileRemoved:]
  -[HMDHome handleCurrentUserPrivilegeChanged:]
  -[HMDHome handleActiveAccountChanged:]
  -[HMDHome handleAccountHandlesUpdated:]
  -[HMDHome __handleProcessStateChange:]
  -[HMDHome handleAccessoryReachabilityChangeNotification:]
  -[HMDHome handleRemovedMediaSessions:]
  -[HMDHome handleDeviceCapabilitiesUpdated:]
  -[HMDHome handlePrimaryResidentChangeNotification:]
  -[HMDHome handleDidReceiveIDSMessageWithNoListener:]
  -[HMDHome handleSiriEndPointAddedNotification:]
  -[HMDHome handleRemoteDeviceBecameReachableNotification:]
  -[HMDHome deviceForAppleMediaAccessoryMessageRouter:message:]
  -[HMDHome router:shouldHandleMessage:usingRouter:]
  -[HMDHome residentDeviceManager:didUpdateResidentAvailable:]
  -[HMDHome residentDeviceManager:didUpdatePrimaryResident:previousPrimaryResident:]
  -[HMDHome residentDeviceManagerDidUpdateResidents:]
  -[HMDHome destinationForMediaSystem:]
  -[HMDHome mediaSystemController:accessoryForUUID:]
  -[HMDHome mediaSystemController:removeAccessories:fromAssistantAccessControl:]
  -[HMDHome mediaSystemController:didRemoveMediaSystem:]
  -[HMDHome isAppleMediaAccessory:]
  -[HMDHome isSidekickAccessory:]
  -[HMDHome isMediaSystem:]
  -[HMDHome isMediaGroup:]
  -[HMDHome aggregateDataTopicForMediaGroupsAggregator:]
  -[HMDHome participantDataTopicForAccessory:mediaGroupsAggregator:]
  -[HMDHome eventSourceForMediaGroupsAggregator:]
  -[HMDHome appleMediaAccessoriesForMediaGroupsAggregator:]
  -[HMDHome roomForAllDestinationParentIdentifiers:mediaGroupsAggregator:]
  -[HMDHome roomsForMediaGroupsAggregator:]
  -[HMDHome routerForMediaGroupsAggregatorMessenger:]
  -[HMDHome routerForParticipantAccessoryUUID:mediaGroupsLocalDataStorage:]
  -[HMDHome receiverForParticipantAccessoryUUID:mediaGroupsLocalDataStorage:]
  -[HMDHome mediaDestinationManagerWithParticipantAccessoryUUID:forMediaGroupsUnconfiguredParticipantOnboardingManager:]
  -[HMDHome destinationManagersForMediaGroupsController:]
  -[HMDHome mediaGroupsController:targetAccessoriesForDestinationIdentifiers:]
  -[HMDHome routerForMediaGroupsMessageHandler:]
  -[HMDHome targetAccessoriesWithDestinationIdentifiers:]
  -[HMDHome aggregator:changedAccessoryCapabilities:rawCapabilities:accessoryUUID:homeUUID:]
  -[HMDHome aggregator:changedResidentCapabilities:rawCapabilities:accessoryUUID:homeUUID:]
  -[HMDHome aggregatorDidBecomePrimary:]
  -[HMDHome aggregator:accessoryCapabilitiesWithUUID:completion:]
  -[HMDHome aggregator:residentCapabilitiesWithUUID:completion:]
  -[HMDHome aggregator:didReceivePublicPairingKeyWithUUID:pairingIdentity:]
  -[HMDHome aggregator:didReceiveSoftwareVersionWithUUID:softwareVersion:]
  -[HMDHome aggregator:didReceiveDeviceIRKWithUUID:deviceIRK:]
  -[HMDHome localAndRemoteSubscriptionProvider]
  -[HMDHome eventForwarder]
  -[HMDHome primaryResidentChangeMonitor]
  -[HMDHome remoteEventAllowedForTopic:deviceType:userType:]
  -[HMDHome eventStoreReadHandleForRemoteEventRouterClientController:]
  -[HMDHome eventStoreWriteHandleForRemoteEventRouterClientController:]
  -[HMDHome messageDispatcherForRemoteEventRouterClientController:]
  -[HMDHome notificationCenterForRemoteEventRouterClientController:]
  -[HMDHome primaryResidentChangeMonitorForRemoteEventRouterClientController:]
  -[HMDHome isNetworkAvailableForRemoteEventRouterClientController:]
  -[HMDHome isCurrentDeviceResidentCapableForRemoteEventRouterClientController:]
  -[HMDHome isCurrentDevicePrimaryResidentForRemoteEventRouterClientController:]
  -[HMDHome primaryResidentDeviceIdentifierForRemoteEventRouterClientController:]
  -[HMDHome deviceForAccessoryUUID:forRemoteEventRouterClientController:]
  -[HMDHome deviceForPrimaryResidentForRemoteEventRouterClientController:]
  -[HMDHome isMessagedHomepodSettingsEnabledForClientController:]
  -[HMDHome primaryResidentChangeMonitorForRouterServer:]
  -[HMDHome routerServerUserAccessControlProviderIdentifierForMessage:]
  -[HMDHome routerServerUserAccessControlProviderForIdentifier:]
  -[HMDHome remoteEventAccessControlProvider]
  -[HMDHome shouldAllowTopic:forDeviceWithMessageIdentifier:]
  -[HMDHome canTopicBeForwardedToPrimaryFromResident:]
  -[HMDHome isDeviceIdentifierPrimaryResident:]
  -[HMDHome messageTargetForDeviceIdentifier:]
  -[HMDHome expandedTopicsWithTopics:]
  -[HMDHome homeLocationForSiriSecureAccessoryAccessController:]
  -[HMDHome isCurrentDevicePairedWithWatchForSiriSecureAccessoryAccessController:]
  -[HMDHome currentDeviceSupportsSiriUnsecuringActionsWithWatchAuthForSiriSecureAccessoryAccessController:]
  -[HMDHome currentDeviceSupportsSiriUnsecuringActionsWithNoPasscodeForSiriSecureAccessoryAccessController:]
  -[HMDHome mediaProfileForUniqueIdentifier:]
  -[HMDHome accessoryForMediaProfileUniqueIdentifier:]
  -[HMDHome propertiesRegisteredForMediaProfileUniqueIdentifier:]
  -[HMDHome timerWithTimerInterval:]
  -[HMDHome readProfileState:viaDevice:forStateManager:]
  -[HMDHome enableMediaNotifications:directlyOnMediaAccessory:forStateManager:completion:]
  -[HMDHome confirmedPrimaryResidentDeviceForPrimaryResidentChangeMonitor:]
  -[HMDHome didUpdateAggregateDataForMediaGroupsAggregateConsumer:]
  -[HMDHome accessoryBrowser:didAddAccessoryAdvertisement:]
  -[HMDHome accessoryBrowser:didRemoveAccessoryAdvertisement:]
  -[HMDHome accessoryBrowser:didFindAccessoryServer:stateChanged:stateNumber:completion:]
  -[HMDHome accessoryBrowser:didTombstoneAccessoryServer:]
  -[HMDHome accessoryBrowser:didRemoveAccessoryServer:error:]
  -[HMDHome accessoryBrowser:didFindAccessoryServerNeedingReprovisioning:error:]
  -[HMDHome accessoryBrowser:didFinishWACForAccessoryWithIdentifier:error:]
  -[HMDHome accessoryBrowser:didUpdateReachability:forBTLEAccessoriesWithServerIdentifier:]
  -[HMDHome accessoryBrowser:accessoryServer:didStopPairingWithError:]
  -[HMDHome accessoryBrowser:accessoryServer:didDiscoverAccessories:transaction:error:]
  -[HMDHome accessoryBrowser:identifier:reachable:]
  -[HMDHome accessoryBrowser:accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:]
  -[HMDHome accessoryBrowser:accessoryServer:didUpdateHasPairings:]
  -[HMDHome accessoryBrowser:accessoryServer:didUpdateCategory:]
  -[HMDHome accessoryBrowser:discoveryFailedWithError:accessoryServer:linkType:]
  -[HMDHome accessoryBrowser:didUpdateEndpoint:]
  -[HMDHome userManagementOperationDidFinish:]
  -[HMDHome coordinationStateManager]
  -[HMDHome destinationControllerDataForAppleMediaAccessory:]
  -[HMDHome destinationForAppleMediaAccessory:]
  -[HMDHome enabledResidents]
  -[HMDHome appleMediaAccessories]
  -[HMDHome isCompanionReachable]
  -[HMDHome isResidentFirstAccessoryCommunicationEnabled]
  -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:]
  -[HMDHome initWithName:uuid:defaultRoomUUID:owner:homeManager:presenceAuth:metricsDispatcherFactory:logEventSubmitter:dailyScheduler:currentUserFactory:residentDeviceManagerFactory:locationHandlerFactory:hapMetadata:siriSecureAccessoryAccessController:carPlayDataSource:deviceLockStateDataSource:notificationRegistry:administratorHandlerFactory:xpcMessageTransportFactory:localCapabilitiesDataSource:notificationCenter:]
  -[HMDHome isAnyBTLEAccessoryReachable]
  -[HMDHome setAnyBTLEAccessoryReachable:]
  -[HMDHome allNewlyConfiguredAccessories]
  -[HMDHome addNewlyConfiguredAccessories:addSessionIdentifier:]
  -[HMDHome addToCurrentTriggers:]
  -[HMDHome removeFromCurrentTriggers:]
  -[HMDHome removeAccessoryInProgressForHMDAccessories]
  -[HMDHome addPendingAccessorySetupCodeHandlers]
  -[HMDHome addPendingAccessories]
  -[HMDHome retrieveAndResetNewlyConfiguredAccessoriesForAddSessionIdentifier:]
  -[HMDHome minimumNetworkRouterSupportHomeKitVersion]
  -[HMDHome setMinimumNetworkRouterSupportHomeKitVersion:]
  -[HMDHome minHomeKitVersionForAccessoryNetworkProtectionChange]
  -[HMDHome setMinHomeKitVersionForAccessoryNetworkProtectionChange:]
  -[HMDHome routerClientManager]
  -[HMDHome setRouterClientManager:]
  -[HMDHome activeNetworkRouterUUID]
  -[HMDHome setActiveNetworkRouterUUID:]
  -[HMDHome isActiveNetworkRouterInitialSetupNeeded]
  -[HMDHome setActiveNetworkRouterInitialSetupNeeded:]
  -[HMDHome primaryNetworkRouterManagingDeviceUUID]
  -[HMDHome setPrimaryNetworkRouterManagingDeviceUUID:]
  -[HMDHome _cleanAddAccessoryOperations]
  -[HMDHome _disableNotificationsForClient:]
  -[HMDHome _disableDirectCharacteristicNotificationsForClient:]
  -[HMDHome _startHomeNotificationDeregistrationTimer]
  -[HMDHome computeBridgedAccessoriesForAllBridges]
  -[HMDHome filterBuiltinActionSets:]
  -[HMDHome updateActionSetExecutionDates:]
  -[HMDHome createActionSetWithName:uuid:type:]
  -[HMDHome _createBuiltinActionSets]
  -[HMDHome __addMediaSession:]
  -[HMDHome _addMediaSessionForCurrentAccessory:]
  -[HMDHome _createMediaSessionWithEndpoint:]
  -[HMDHome _removeMediaSessionWithIdentifier:]
  -[HMDHome _addUserToIdentityRegistry:]
  -[HMDHome watchSkipVersionCheck]
  -[HMDHome setWatchSkipVersionCheck:]
  -[HMDHome setupBackingStore]
  -[HMDHome _setupActiveNetworkRouterAccessory:existingRouterAccessories:]
  -[HMDHome configureWithHomeManager:accessoriesPresent:uncommittedTransactions:source:]
  -[HMDHome configureAfterAccessoriesConfigurationTrackerNotificationsWithCurrentAccessory:accessories:uncommittedTransactions:]
  -[HMDHome configureRemoteEventRouterClientControllerForAccessories:]
  -[HMDHome createRemoteEventRouterServerIfNeeded]
  -[HMDHome enableLocationServiceSettings]
  -[HMDHome isLocationServiceSettingsEnabled]
  -[HMDHome migrateLegacyLocationServiceSettings]
  -[HMDHome registerForDeviceWithCapabilities]
  -[HMDHome hasSiriEndpointAccessory]
  -[HMDHome configureMediaSystems]
  -[HMDHome configureMediaDestinationControllersForAccessories:]
  -[HMDHome configureNaturalLightingWithDemoModeEnabled:]
  -[HMDHome accessoriesWithUUIDs:]
  -[HMDHome configureMediaGroupObjects]
  -[HMDHome mergeMediaGroupsAggregateDataWithConsumer:]
  -[HMDHome mergeMediaDestinationControllerDataWithConsumer:]
  -[HMDHome mergeMediaDestinationsWithConsumer:]
  -[HMDHome configureMediaGroupsUnconfiguredParticipantOnboardingManager]
  -[HMDHome configureMediaGroupsAggregator]
  -[HMDHome roomForAllAccessoryUUIDs:]
  -[HMDHome configureMediaGroupsAggregateConsumer]
  -[HMDHome audioGroups]
  -[HMDHome audioGroupsWithoutMediaSystems]
  -[HMDHome audioGroupsControllerIdentifier]
  -[HMDHome configureAudioGroupsController]
  -[HMDHome applyDeviceLockStatus:]
  -[HMDHome _handleRemoteGatewayNotificationRegistration:enable:]
  -[HMDHome _characteristicNotificationPayloadsOnDirectTransports:]
  -[HMDHome addCompanionAsResidentUser:]
  -[HMDHome redispatchToResidentMessage:target:responseQueue:]
  -[HMDHome redispatchToResidentMessage:target:responseQueue:viaDevice:]
  -[HMDHome remotelySetNotificationsEnabled:forCharacteristics:]
  -[HMDHome _remotelySetNotificationsEnabled:forCharacteristics:]
  -[HMDHome subscribeForNotificationsFromRemoteGateway]
  -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:]
  -[HMDHome _subscribeForHomeNotificationsFromRemoteGateway:accessories:]
  -[HMDHome enableHomeNotificationsForMediaAccessory:]
  -[HMDHome enableMediaNotifications:directlyOnMediaAccessory:completion:]
  -[HMDHome _modifyCharacteristicNotificationsOnResident:mediaNotifications:enableNotification:]
  -[HMDHome _modifyCharacteristicNotificationsOnRemoteGateways:mediaNotifications:enableNotification:]
  -[HMDHome enableNotificationsForDevices:]
  -[HMDHome _enableNotificationsForDevices:]
  -[HMDHome disableNotificationsForDevices:]
  -[HMDHome _disableNotificationsForDevices:]
  -[HMDHome registerCameraReachabilityEventNotificationsWithCompletionHandler:]
  -[HMDHome _registerCameraReachabilityEventNotificationsWithCompletionHandler:]
  -[HMDHome setCameraReachabilityEventNotificationsEnabled:forAccessory:completionHandler:]
  -[HMDHome _canCurrentDeviceRegisterForReachabilityEventNotification]
  -[HMDHome _registerResidentReachabilityNotificationWithEnableAccessories:disableAccessories:completionHandler:]
  -[HMDHome resubscribeForNotificationsOnResident:]
  -[HMDHome _resubscribeForNotificationsOnResident:]
  -[HMDHome shouldRestrictAllMessagingToLocalTransportsForUser:]
  -[HMDHome modifyCharacteristicNotifications:mediaNotifications:enableNotification:withDevice:]
  -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:enableNotification:withDevice:]
  -[HMDHome _modifyCharacteristicNotifications:mediaNotifications:enableNotification:withDevice:completion:]
  -[HMDHome auditUsersForNotifications:]
  -[HMDHome __saveConfigurationVersionTransaction]
  -[HMDHome _updateConfigurationVersion]
  -[HMDHome _updateExpectConfigurationVersion]
  -[HMDHome saveSharedHomeToAccountWithReason:postSyncNotification:options:]
  -[HMDHome _saveSharedHomeToAccountWithReason:postSyncNotification:options:]
  -[HMDHome saveToCurrentAccountWithReason:]
  -[HMDHome saveWithReason:postSyncNotification:]
  -[HMDHome saveWithReason:postSyncNotification:objectChange:]
  -[HMDHome saveWithReason:information:postSyncNotification:]
  -[HMDHome saveWithReason:information:postSyncNotification:objectChange:]
  -[HMDHome performPostSaveActionsWithReason:]
  -[HMDHome _performPostSaveActionsWithReason:]
  -[HMDHome _configureBulletinNotification]
  -[HMDHome roomWithUniqueIdentifier:forClientIdentifierSalt:]
  -[HMDHome accessoryWithDeviceIdentifier:]
  -[HMDHome accessoryWithSPIClientIdentifier:]
  -[HMDHome ownerTrustZoneCapable]
  -[HMDHome setOwnerTrustZoneCapable:]
  -[HMDHome _isSharedHomeVersionTrustZoneCapable]
  -[HMDHome _handleReceivedNonCloudSourcedSharedHomeModel]
  -[HMDHome _evaluateOwnerTrustZoneCapabilityAndNotify]
  -[HMDHome outgoingInvitationWithUUID:]
  -[HMDHome setOutgoingInvitations:]
  -[HMDHome addOutgoingInvitation:]
  -[HMDHome removeOutgoingInvitation:]
  -[HMDHome reEvaluateTriggers]
  -[HMDHome removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:]
  -[HMDHome addActionSetName:]
  -[HMDHome removeName:]
  -[HMDHome replaceName:withNewName:]
  -[HMDHome replaceActionSetName:withNewName:]
  -[HMDHome reachabilityChangedForAccessory:reachable:]
  -[HMDHome suspendedStateChangedForAccessory:suspededState:]
  -[HMDHome regionStateUpdated]
  -[HMDHome writeCharacteristicValues:source:transactionId:qualityOfService:withCompletionHandler:]
  -[HMDHome performWriteRequests:loggingObject:]
  -[HMDHome performReadRequests:loggingObject:]
  -[HMDHome migrateOwnedTriggers]
  -[HMDHome checkTimerTriggers]
  -[HMDHome getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:]
  -[HMDHome _getRunTimeStateUpdateWithOptions:includeMediaAccessorySessionState:includeResidentDeviceState:completion:]
  -[HMDHome readProfileState:viaDevice:]
  -[HMDHome hapAccessoriesForServer:linkType:]
  -[HMDHome hapAccessoriesForServer:]
  -[HMDHome _primaryAccessoryForServer:]
  -[HMDHome _discoveredAccessoriesForServer:linkType:]
  -[HMDHome _discoveredAccessoriesForServer:]
  -[HMDHome currentRemoteReachabilityRegistration]
  -[HMDHome __registerForRemoteAccessoryReachabilityNotifications:applicationBundleIdentifier:]
  -[HMDHome _registerForReachabilityChangeNotificationsEnabled:completionHandler:]
  -[HMDHome _hasPairedReachableBTLEAccessories]
  -[HMDHome namesOfServicesWithNewFirmwareAvailableInHome]
  -[HMDHome reEvaluateHomeHubState]
  -[HMDHome evaluateResidentUpdate]
  -[HMDHome getServiceTransaction:parentUUID:changeType:]
  -[HMDHome getTransactionFromHAPAccessory:hmdAccessory:uuid:hostAccessoryUUID:configurationAppIdentifier:objectChangeType:]
  -[HMDHome evaluateShouldRelaunchAndSetRelaunch]
  -[HMDHome _evaluateShouldRelaunchAndSetRelaunch]
  -[HMDHome notifyClientOfVendorInfoUpdatedForManufacturers:withCompletion:]
  -[HMDHome _updateWoWState:]
  -[HMDHome _logPersistentCharacteristicRegistrations:]
  -[HMDHome _handleRenameHomeModel:message:]
  -[HMDHome _handleAddRoomModel:message:]
  -[HMDHome _handleRemoveRoomModel:message:]
  -[HMDHome _handleAddZoneModel:message:]
  -[HMDHome _handleRemoveZoneModel:message:]
  -[HMDHome mediaSystemForAppleMediaAccessory:]
  -[HMDHome destinationManagersWithDestinationIdentifiers:supportedOptions:]
  -[HMDHome rootDestinationManagerWithDescendantDestinationIdentifier:]
  -[HMDHome destinationManagerWithParentIdentifier:]
  -[HMDHome mediaDestinationManagersWithHomeTheaterSupportedOptions]
  -[HMDHome mediaDestinationManagers]
  -[HMDHome mediaDestinationManagerWithParentIdentifier:]
  -[HMDHome mediaDestinationManagersWithSupportedOptions:]
  -[HMDHome mediaDestinations]
  -[HMDHome mediaDestinationsInRoom:]
  -[HMDHome destinationTypeForDestinationWithIdentifier:]
  -[HMDHome destinationControllers]
  -[HMDHome destinationControllerWithIdentifier:]
  -[HMDHome destinationControllerWithDestinatonIdentifier:]
  -[HMDHome destinationControllerWithCommittedDestinatonIdentifier:]
  -[HMDHome shouldEncodeLegacyLocationServiceSettingForSettingsParentUUID:]
  -[HMDHome assistantAccessCapableAccessoryCount]
  -[HMDHome __shouldAllowAddingWiFiRouterAccessoryWithRequestMessage:error:]
  -[HMDHome _setupDescriptionFromData:error:]
  -[HMDHome _shouldAllowAddingAccessoryOfCategory:requestMessage:error:]
  -[HMDHome _shouldAllowAddingAccessoryWithDescription:requestMessage:error:]
  -[HMDHome _handleAddActivityRequestTimerFiredForInfo:]
  -[HMDHome removeAddAccessoryRequestWithIdentifier:]
  -[HMDHome saveAddAccessoryRequest:]
  -[HMDHome addAccessoryRequestMap]
  -[HMDHome addAccessoryRequestsForMessage:]
  -[HMDHome _handleLegacyAddAccessory:]
  -[HMDHome _continueLegacyAddAccessoryWithUUID:unassociatedAccessory:setupCode:appID:message:]
  -[HMDHome _continuePairingAfterUserConsentWithAccessoryUUID:orUnassociatedAccessory:message:]
  -[HMDHome _pairAccessoryWithAccessoryDescription:unpairedAccessory:configuration:pairingEvent:requestMessage:]
  -[HMDHome _accessoryPairingDidComplete:configuration:pairingEvent:accessoryServer:certificationStatus:requestMessage:]
  -[HMDHome _removePendingAccessoryAdd:]
  -[HMDHome _handleAddAccessoryWithDescription:]
  -[HMDHome _continuePairingAfterUserConsentWithAccessoryDescription:message:]
  -[HMDHome _pairAccessoryWithAccessoryDescription:configuration:pairingEvent:progressHandler:requestMessage:]
  -[HMDHome _handleUserConsentForAccessoryReplacement:consent:message:]
  -[HMDHome _handleAddAccessoryModel:message:]
  -[HMDHome __handleAddHAPAccessoryModel:message:]
  -[HMDHome __handleAddMediaAccessoryModel:message:]
  -[HMDHome handleRemoveAccessory:]
  -[HMDHome _handleRemoveAccessoryAfterUserConsent:message:]
  -[HMDHome _handleRemoveAccessoryModel:message:]
  -[HMDHome notifyOfRemovedAccessory:source:]
  -[HMDHome notifyOfAddedAccessory:]
  -[HMDHome notifyOfNewlyAddedAccessoryByThisOwnerDevice:]
  -[HMDHome removeWithMergeSecondaryAccessory:removedFromBridgeAccessory:completionHandler:]
  -[HMDHome _removeWithMergeSecondaryAccessory:removedFromBridgeAccessory:completionHandler:]
  -[HMDHome hapAccessoryWithIdentifier:]
  -[HMDHome hapAccessoryWithIdentifier:instanceID:]
  -[HMDHome hmdHAPAccessoryWithHAPAccessory:]
  -[HMDHome scheduleRemoval]
  -[HMDHome accessoryCountForRoom:]
  -[HMDHome hapAccessoryServerIdentifiers]
  -[HMDHome hapAccessoryUniqueIdentifiers]
  -[HMDHome _registerPairedAccessory:transports:setupHash:]
  -[HMDHome _deregisterPairedAccessory:]
  -[HMDHome _addOwnerToPrimaryAccessory:error:]
  -[HMDHome _notifyOwnerOfAddedAccessories:completion:]
  -[HMDHome _sharedAdminDidFailToAddAccessories:]
  -[HMDHome _notifyClientOfNewlyAddedAccessories:requestMessage:]
  -[HMDHome _sendRemoveCompletionStatusForHMDAccessories:withCompletion:error:]
  -[HMDHome _removeAccessoriesForPrimaryAccessory:error:completionHandler:]
  -[HMDHome _removeAccessoryWithUUID:message:]
  -[HMDHome _removeAccessoriesFromContainers:]
  -[HMDHome _removeAccessoriesCommon:]
  -[HMDHome removeAccessoriesFromContainers:]
  -[HMDHome _removeAccessories:message:]
  -[HMDHome _removeAllHomeContentsAndAccessoryPairings:queue:completionHandler:]
  -[HMDHome _removeCloudData]
  -[HMDHome notifyClientsOfAccessoryInfoUpdatedForAccessories:]
  -[HMDHome _notifyClientsOfAccessoryInfoUpdatedForAccessories:shouldRefreshBadge:withCompletion:]
  -[HMDHome _reevaluateAccessoryInfoWithBadgeRefresh:]
  -[HMDHome reevaluateAccessoryInfo]
  -[HMDHome evaluateNotificationConditionForCharacteristics:homePresence:completion:]
  -[HMDHome dispatchRequestToEvaluateCondition:forCharacteristics:completion:]
  -[HMDHome btleAccessoryReachabilityProbeTimer:]
  -[HMDHome _registerDeviceForReachabilityNotification:accessoryList:]
  -[HMDHome _deregisterDeviceForReachabilityNotification:]
  -[HMDHome getReachabilityTupleForAccessoryUUID:]
  -[HMDHome _updateReachabilityChangeToRegisteredDevices:]
  -[HMDHome _handleRemoteReachabilityNotificationTimerFired]
  -[HMDHome _reachabilityChangedForAccessory:reachable:]
  -[HMDHome reachableAccessoriesCount]
  -[HMDHome reachableAppleMediaAccessoriesCount]
  -[HMDHome getReachableIPAccessories:btleAccessories:mediaAccessories:]
  -[HMDHome retrieveStateForTrackedAccessory:stateNumber:isReachable:linkQuality:lastSeen:]
  -[HMDHome _setupCodeProviderForMessage:]
  -[HMDHome _cancelPairingWithAccessoryDescription:]
  -[HMDHome _processPairingRequestForMessage:cancelPairing:]
  -[HMDHome _cancelPairingWithAccessoryUUID:completionHandler:]
  -[HMDHome _processLegacyPairingRequestForMessage:cancelPairing:]
  -[HMDHome hasNeverAddedAnyHAPAccessory]
  -[HMDHome _processAccessoriesToAddForUnpairedAccessory:certificationStatus:accessoryServer:networkCredential:pairingEvent:message:completionHandler:]
  -[HMDHome updateHomeFirstHAPAccessoryAddedDateToNow]
  -[HMDHome _handleAddServiceGroupModel:message:]
  -[HMDHome _handleRemoveServiceGroupModel:message:]
  -[HMDHome builtInActionSetInfo]
  -[HMDHome _handleAddTriggerOwnedActionSet:]
  -[HMDHome _handleAddHomeOwnedActionSet:]
  -[HMDHome _handleAddActionSetModel:message:]
  -[HMDHome _handleRemoveActionSetModel:message:]
  -[HMDHome executeActionSet:]
  -[HMDHome _updateOwnedTriggers]
  -[HMDHome _handleAddEventTrigger:eventTriggerModel:]
  -[HMDHome _handleAddEventTriggerModel:message:]
  -[HMDHome _validateAddingNewTriggerWithName:message:]
  -[HMDHome _relayAddTriggerToResident:]
  -[HMDHome _handleAddTimerTriggerModel:message:]
  -[HMDHome _addNewTrigger:message:payloadAnnex:triggerModel:]
  -[HMDHome _handleRemoveTriggerModel:message:]
  -[HMDHome removeTriggerNoNotification:]
  -[HMDHome _removeTrigger:message:]
  -[HMDHome _getContainerForAppData:keyName:]
  -[HMDHome _handleUpdateAppDataModel:message:]
  -[HMDHome _handleRemoveAppDataModel:message:]
  -[HMDHome usersSupportingPresence]
  -[HMDHome addUser:]
  -[HMDHome _removeUser:]
  -[HMDHome isSharedAdmin]
  -[HMDHome _updateCurrentUserForSharedHome]
  -[HMDHome userWithPairingIdentity:]
  -[HMDHome userWithPairingIdentityIdentifier:]
  -[HMDHome userWithMergeID:]
  -[HMDHome _residentUserForResidentDevice:]
  -[HMDHome _residentDeviceForResidentUser:]
  -[HMDHome _notifyClientsOfUpdatedResidentUser:]
  -[HMDHome _purgeResidentUsers]
  -[HMDHome _verifyUserManagementPermissionForAccessory:error:]
  -[HMDHome _isUserValid:error:]
  -[HMDHome removeAllUsersFromAccessory:completionHandler:]
  -[HMDHome _addUsers:accessory:]
  -[HMDHome _addAllUsersToAccessory:]
  -[HMDHome prepareUserManagementOperationForUser:accessories:type:error:]
  -[HMDHome prepareUserManagementOperationForUser:accessory:type:model:error:]
  -[HMDHome _cleanRemovedUsers:]
  -[HMDHome isRestrictedUserSupported]
  -[HMDHome _handleAddOutgoingHomeInvitationModel:message:]
  -[HMDHome _handleRemoveOutgoingHomeInvitationModel:message:]
  -[HMDHome __sendOutgoingInvitations:suppressHomeInviteNotification:]
  -[HMDHome _addUsersWithInviteInformations:message:]
  -[HMDHome removeUserWithUserID:]
  -[HMDHome _removeOutgoingInvitationForUser:]
  -[HMDHome _removeUser:message:]
  -[HMDHome _removeUserFromContainer:]
  -[HMDHome _addUserToContainer:]
  -[HMDHome refreshUserDisplayNames]
  -[HMDHome _refreshUserDisplayNames]
  -[HMDHome containsRemovedUser:]
  -[HMDHome overriddenHomeAccessControl]
  -[HMDHome setOverriddenHomeAccessControl:]
  -[HMDHome _processOutgoingInvitationsRequest:]
  -[HMDHome _outgoingInvitationForUserWithHandle:]
  -[HMDHome _addOutgoingInvitations:message:transactionCompleted:]
  -[HMDHome _sendInvitation:message:shareURL:shareToken:suppressHomeInviteNotification:]
  -[HMDHome _handleUpdateRequestForHomeInvitation:controllerPublicKey:controllerUsername:invitationState:presenceAuthStatus:preferredUserID:fromHandle:fromAddress:message:messageResponseHandler:]
  -[HMDHome _updateOutgoingInviationsWithCompleteUserManagementOperation:]
  -[HMDHome _handleAddUserModel:message:]
  -[HMDHome _handleRemoveUserModel:message:]
  -[HMDHome __handleAcceptedOutgoingInvitationResponse:destinationAddress:publicKey:username:presenceAuthStatus:completionHandler:]
  -[HMDHome __handleCancelledOutgoingInvitation:]
  -[HMDHome __handleCompletedOutgoingInvitation:]
  -[HMDHome _sendInvitationCancelationRequestToInvitee:]
  -[HMDHome _splitCharacteristicChanges:changedAccessories:]
  -[HMDHome _notifyChangedCharacteristics:message:modifiedCharacteristics:broadcast:]
  -[HMDHome shouldRelayNotificationToRegisteredDevicesForSource:]
  -[HMDHome _shouldRegisterForNotificationsWithDevice:]
  -[HMDHome _notifyRemoteUsersOfChangedCharacteristics:message:broadcast:]
  -[HMDHome _userForDevice:]
  -[HMDHome _shouldSendToDestination:device:remoteSourceDevice:]
  -[HMDHome _notifyChangedCharacteristics:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:broadcast:]
  -[HMDHome _notifyUpdatedCharacteristic:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:completion:]
  -[HMDHome notifyRemoteUsersOfChangedProperties:requestMessageInformation:]
  -[HMDHome _notifyRemoteUsersOfChangedProperties:requestMessageInformation:]
  -[HMDHome _notifyChangedProperties:withRequestIdentifier:notificationUpdateIdentifier:toUserDeviceAddress:]
  -[HMDHome _disablePayloadFromRemotelyUpdatedCharacteristicNotifications:]
  -[HMDHome _postInternalNotificationForChangedCharacteristics:modifiedCharacteristics:changedByThisDevice:residentShouldNotifyPeers:message:broadcast:]
  -[HMDHome notifyOfChangedCharacteristic:changedByThisDevice:residentShouldNotifyPeers:message:]
  -[HMDHome notifyRemoteUsersOfChangedCharacteristics:message:broadcast:]
  -[HMDHome _updateBulletinBoardOfChangedCharacteristics:changedByThisDevice:homePresence:]
  -[HMDHome _sendClientCharacteristicsChangedNotificationWithIdentifier:requestMessage:multiPartResponse:moreInMultiPartResponse:characteristicChanges:completionHandler:]
  -[HMDHome _notifyChangedCharacteristics:identifier:multiPartResponse:moreMessagesInMultipart:requestMessage:withCompletionHandler:]
  -[HMDHome writeCharacteristicValues:source:identifier:qualityOfService:withCompletionHandler:]
  -[HMDHome isAccessAllowedForCharacteristicsWithMessage:]
  -[HMDHome requiresUnlockToAccessCharacteristics:withMessage:]
  -[HMDHome _writeCharacteristicValuesForAccessories:writeRequestMap:responseTuples:requestMessage:viaDevice:source:completionHandler:]
  -[HMDHome __residentDeviceForAccessory:fromMap:]
  -[HMDHome _addAccessoryToBalancedResidentMap:residentDevice:balancedResidentMap:]
  -[HMDHome _loadBalancedRedispatchForAccessories:source:dispatchGroup:writeRequestMap:requestMessage:responseTuples:]
  -[HMDHome _reallyRedispatchWritesToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:]
  -[HMDHome _redispatchWriteForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:]
  -[HMDHome _buildCharacteristicWriteRequest:accessoryWriteRequestMapTable:accessoryList:responseTuples:user:]
  -[HMDHome _loadBalanceWriteRequestOnResidentForAccessory:accessoryWriteRequestMapTable:requestMessage:source:responseTuples:withCompletionHandler:]
  -[HMDHome _passWriteRequestToCompanion:requestMessage:source:remoteAccessories:responseTuples:withCompletionHandler:]
  -[HMDHome _sendWriteRequestToAccessoryServer:requestMessage:source:failedAccessories:responseTuples:activity:waitGroup:unreachableWaitGroup:]
  -[HMDHome _waitForEarlyDispatchTimeout:requestMessage:source:failedAccessories:responseTuples:activity:unreachableWaitGroup:failureWaitGroup:]
  -[HMDHome _waitForWriteRequestFanOut:requestMessage:source:responseTuples:failedAccessories:activity:waitGroup:failureWaitGroup:]
  -[HMDHome _createMessageForReadWriteRequest:withCompletionHandler:]
  -[HMDHome _writeCharacteristicValues:requestMessage:source:withCompletionHandler:]
  -[HMDHome _addResponseTuplesFromDictionary:accessoryRequestMapTable:responseTuples:completedGroup:logEvents:]
  -[HMDHome __readWriteResponseHandler:unhandledRequests:]
  -[HMDHome _areWriteRequestsAllowed:message:completion:]
  -[HMDHome writeRequestTuplesFromMessage:outUnhandledRequests:]
  -[HMDHome _shouldWaitForAccessoriesToBeReachable]
  -[HMDHome _performOperation:completion:]
  -[HMDHome readCharacteristicValues:identifier:source:qualityOfService:withCompletionHandler:]
  -[HMDHome _getLogEventsForOperation:accessories:requestMap:identifier:source:bundleID:]
  -[HMDHome _readCharacteristicValuesForAccessories:readRequestMap:responseTuples:requestMessage:source:viaDevice:completionHandler:]
  -[HMDHome _reallyRedispatchReadsToDevice:accessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:activity:]
  -[HMDHome _redispatchReadForAccessories:dispatchGroup:requestMap:requestMessage:source:responseTuples:errorResponseTuples:]
  -[HMDHome readCharacteristicValues:source:qualityOfService:withCompletionHandler:]
  -[HMDHome _setupPendingResponseTimerIdentifier:originalRequestIdentifier:]
  -[HMDHome _buildRequestMapTableFromRequests:pendingResponses:]
  -[HMDHome _passReadRequestToCompanion:requestMessage:source:pendingResponses:remoteAccessories:withCompletionHandler:]
  -[HMDHome _handleFailedAccessories:requestMessage:source:pendingResponses:fastFailedAccessories:slowFailedAccessories:tmpErrorResponseTuples:waitGroup:failureWaitGroup:activity:]
  -[HMDHome _waitForEarlyDispatchTimeoutOnReadRequest:requestMessage:source:pendingResponses:activity:slowFailedAccessories:tmpErrorResponseTuples:unreachableWaitGroup:failureWaitGroup:]
  -[HMDHome _sendReadRequestToAccessoryServer:requestMessage:source:pendingResponses:slowFailedAccessories:fastFailedAccessories:unreachableWaitGroup:waitGroup:activity:]
  -[HMDHome _readCharacteristicValues:requestMessage:source:withCompletionHandler:]
  -[HMDHome _readRequestTuplesFromMessage:outUnhandledRequests:]
  -[HMDHome _isReadRequestAllowForCharacteristics:message:error:]
  -[HMDHome _handleSendingNotificationsForRequest:requestIdentifier:supportsMultiPartResponse:characteristicUpdates:completion:]
  -[HMDHome _handlePendingResponsesTimerFired:]
  -[HMDHome primaryResident]
  -[HMDHome confirmedPrimaryResidentDevice]
  -[HMDHome isCurrentDeviceConfirmedPrimaryResident]
  -[HMDHome areAllResidentsUnreachable]
  -[HMDHome _updateResidentFirstAccessoryCommunicationEnabled]
  -[HMDHome shouldEnableResidentFirstAccessoryCommunication]
  -[HMDHome residentCapableDevices]
  -[HMDHome residentEnabledDevices]
  -[HMDHome addResidentCapableDevice:]
  -[HMDHome removeResidentCapableDevice:]
  -[HMDHome migrateAfterResidentChange]
  -[HMDHome _handleResidentChange]
  -[HMDHome isRemoteAccessDeviceReachable]
  -[HMDHome _residentUsers]
  -[HMDHome _residentDeviceAvailable]
  -[HMDHome updateNetworkConnectivity:companionReachable:]
  -[HMDHome setRemoteAccessEnabled:]
  -[HMDHome remoteAccessIsEnabled]
  -[HMDHome remoteAccessEnabled:]
  -[HMDHome _remoteAccessEnabled:]
  -[HMDHome notifyNewRemotePeersFound:remoteUsersRemoved:forceRemoteNotificationRegistration:]
  -[HMDHome _updateConfigurationStateForResidentDevice:desiredConfigState:message:]
  -[HMDHome _configureUnconfiguredResident:desiredConfigState:]
  -[HMDHome _sendResidentInviteWithDestination:]
  -[HMDHome _addResidentWithUsername:publicKey:destination:]
  -[HMDHome _configureConfiguredResident:desiredConfigState:message:]
  -[HMDHome enableMultiUser]
  -[HMDHome _handleMultiUserEnabledChange:message:]
  -[HMDHome _handleSoundCheckChange:message:]
  -[HMDHome _handleLocationServicesEnabledChange:message:]
  -[HMDHome runLocationServicesEnabledUpdateWithValue:]
  -[HMDHome runLocationServicesEnabledUpdateWithValue:message:]
  -[HMDHome _handleDidOnboardLocationServicesChange:message:]
  -[HMDHome _handleHasAnyUserAcknowledgedCameraRecordingOnboardingChange:message:]
  -[HMDHome _handleSetHasOnboardedForAccessCodeChange:message:]
  -[HMDHome _handleSetHasOnboardedForWalletKeyChange:message:]
  -[HMDHome _refreshCharacteristicValuesOnHomeNotificationEnable]
  -[HMDHome _refreshMediaProfilesOnHomeNotificationEnable]
  -[HMDHome supportsSiriEndpointOnBoarding]
  -[HMDHome currentDeviceSupportsSidekickSettings]
  -[HMDHome enabledResidentsSupportsHomeHub]
  -[HMDHome atHomeLevel]
  -[HMDHome setAtHomeLevel:]
  -[HMDHome hasReachableAccessories]
  -[HMDHome _handleHomeLocationChange:previousLocation:]
  -[HMDHome setHomeLocation:]
  -[HMDHome updateHomeLocation]
  -[HMDHome _updateHomeLocation]
  -[HMDHome queryPrimaryResidentReachabilityForAccessories:completion:]
  -[HMDHome updateAppData:identifierKey:lookup:]
  -[HMDHome fixupHomeAfterDecoding]
  -[HMDHome __encodeAccessoriesWithCoder:options:]
  -[HMDHome _encodeObjectsWithAccessoriesWithCoder:]
  -[HMDHome encodeMediaSystemsWithCoder:modifiedOptions:]
  -[HMDHome _encodeActionSets:coder:]
  -[HMDHome _removeCorruptAccessories]
  -[HMDHome retrieveHAPAccessoryForHMDAccessory:linkType:forceRetrieve:queue:completion:]
  -[HMDHome _isRegisteredForNotificationsWithRemoteGateway:]
  -[HMDHome _isRegisteredForNotificationsForClients:]
  -[HMDHome _isEventTriggerOnRemoteGatewayForAccessory:]
  -[HMDHome _isEventTriggerOnLocalDeviceForAccessory:]
  -[HMDHome _shouldAvoidTombstoningAccessoryServer:accessory:]
  -[HMDHome isCurrentDeviceAvailableResident]
  -[HMDHome _hmdCharacteristicsForUpdatedHAPcharacteristics:accessoryServer:]
  -[HMDHome _changedHMDCharacteristicsForHAPCharacteristics:stateNumber:broadcast:accessoryServer:]
  -[HMDHome handleUpdatedCharacteristics:accessoryServer:]
  -[HMDHome _handleUpdatedCharacteristics:accessoryServer:stateNumber:broadcast:internal:]
  -[HMDHome _isSecureClassTriggeredByCharactersitics:]
  -[HMDHome __updateServiceTransaction:accessoryTransaction:service:accessory:hapService:]
  -[HMDHome getUpdateTransactionForAccessory:hapAccessory:accessoryTransaction:addSvcTransactions:updateSvcTransactions:removeSvcTransactions:]
  -[HMDHome _productDataFromHAPAccessory:]
  -[HMDHome _processProductDataForNewlyAddedAccessory:transaction:]
  -[HMDHome _processUpdatedProductDataForAccessory:hapAccessory:transaction:]
  -[HMDHome _processUpdatedAccessoryServer:reAddServices:]
  -[HMDHome _unconfigurePairedAccessoriesForServer:updateReachability:]
  -[HMDHome _configurePairedAccessoriesForServer:reAddServices:]
  -[HMDHome retrieveThreadNetworkMetadataWithCompletion:]
  -[HMDHome removeThreadNetworkPreferredNetworkWithCompletion:]
  -[HMDHome _checkResidentCapabilitiesForCredentialSharing:]
  -[HMDHome _fetchMetadataFromPrimaryResidentWithCompletion:]
  -[HMDHome balancedResidentMapForAccessories:]
  -[HMDHome _handleCoalescedModifyNotifications]
  -[HMDHome _handleDisableNotificationsTimerFired]
  -[HMDHome notifyClientsOfReachabilityUpdateForAccessory:]
  -[HMDHome _handleAccessoryReachabilityUpdatesTimerFired]
  -[HMDHome addUnconfiguredResidentDevice:]
  -[HMDHome removeUnconfiguredResidentDeviceWithUserID:]
  -[HMDHome _handleDidReceiveIDSMessageWithNoListenerFromAddress:]
  -[HMDHome remoteAccessHealthMonitorTimerDidFire]
  -[HMDHome _remoteAccessHealthMonitorTimerDidFire]
  -[HMDHome _handleResponseForElectMessageToResident:error:]
  -[HMDHome _isValidEventIdentifier:]
  -[HMDHome validateDuetEventIdentifiers:completion:]
  -[HMDHome dumpActionSetDescription]
  -[HMDHome dumpCharacteristicNotificationRegistry]
  -[HMDHome dumpMediaSessionDescription]
  -[HMDHome setAvailableBSPsCount:]
  -[HMDHome availableBSPsCount]
  -[HMDHome setAvailableBorderRouters:]
  -[HMDHome availableBorderRouters]
  -[HMDHome awdPrimaryReportingDevice]
  -[HMDHome _handleUpdateNetworkProtectionWithHomeModel:message:]
  -[HMDHome updateHomeWithModel:message:]
  -[HMDHome updateHomeConfigurationWithModel:message:]
  -[HMDHome updateNetworkRouterSettingsWithModel:message:]
  -[HMDHome updateROARStatus:message:]
  -[HMDHome setHomeUpdatedToROARAndInformClients]
  -[HMDHome updateNetworkRouterManagingDeviceSettingsWithModel:message:]
  -[HMDHome deletedBackingStoreObject]
  -[HMDHome sharedHomeModel]
  -[HMDHome homeConfigurationUUID]
  -[HMDHome homeConfigurationModelObjectWithChangeType:]
  -[HMDHome dropAllChangesWithArrayOfObjectIDs:]
  -[HMDHome dropAllChangesWithObjectID:]
  -[HMDHome cleanChangesIfNoAddChangeObjectID:completion:]
  -[HMDHome _migrateResidentDevicesCloudZone:migrationQueue:completion:]
  -[HMDHome _migrateHomeSettingsCloudZone:migrationQueue:completion:]
  -[HMDHome _migrateHomeMediaSettingsCloudZone:migrationQueue:completion:]
  -[HMDHome _migrateHomeUsersCloudZone:migrationQueue:completion:]
  -[HMDHome _migrateAppleMediaAccessoriesWithCloudZone:migrationQueue:completion:]
  -[HMDHome _migrateHomeObjectCloudZone:defaultModel:completion:]
  -[HMDHome _migrateHomeAllObjectsCloudZone:migrationGroup:migrationQueue:saveModels:runModels:]
  -[HMDHome _migrateUnknownAccessoriesWithCloudZone:accessoryUUIDs:migrationQueue:completion:]
  -[HMDHome fetchAllMigratedObjectsForCloudZone:completion:]
  -[HMDHome migrateCloudZone:completion:]
  -[HMDHome migrateAfterCloudMerge:]
  -[HMDHome _deregisterStateHandler]
  -[HMDHome mediaSessions]
  -[HMDHome mediaSessionWithIdentifier:]
  -[HMDHome mediaSessionWithUUID:]
  -[HMDHome addMediaSession:]
  -[HMDHome removeMediaSession:]
  -[HMDHome mediaSessionStates]
  -[HMDHome mediaSessionStateWithIdentifier:]
  -[HMDHome addMediaSessionState:]
  -[HMDHome removeMediaSessionState:]
  -[HMDHome evaluateIfMediaPlaybackStateChanged:]
  -[HMDHome redispatchMediaReadRequests:viaDevice:completion:]
  -[HMDHome _handleReadMediaProperties:source:message:completionHandler:]
  -[HMDHome redispatchMediaWriteRequests:viaDevice:completion:]
  -[HMDHome _handleWriteMediaProperties:source:requestMessage:completionHandler:]
  -[HMDHome hapAccessories]
  -[HMDHome cameraAccessories]
  -[HMDHome userAssistantAccessControlDidUpdate:accessories:]
  -[HMDHome _ensureDevicesSymptomDiscoveryMessageCanBeHandled:]
  -[HMDHome _removeConnectionFromConnectionsDiscoveringSymptomsForNearbyDevices:]
  -[HMDHome configurePersonDataManager]
  -[HMDHome updatePersonManagerSettings:]
  -[HMDHome configureAccessCodeManager]
  -[HMDHome threadNetworkSequenceNumber]
  -[HMDHome setThreadNetworkSequenceNumber:]
  -[HMDHome unfilteredThreadNetworkID]
  -[HMDHome attemptToUpdateThreadNetworkID:]
  -[HMDHome _wol_processChangedCharacteristicResponses:]
  -[HMDHome setNaturalLightingContext:]
  -[HMDHome naturalLightingContext]
  -[HMDHome configureNaturalLightingForDemoMode]
  -[HMDHome setNfcReaderKey:]
  -[HMDHome nfcReaderKey]
  -[HMDHome notificationRegistrations]
  -[HMDHome notificationRegistrationsForAppleMediaAccessories]
  -[HMDHome addNotificationRegistrationForApplicationBundleIdentifier:includesAppleMediaAccessories:]
  -[HMDHome notificationDeregistrations]
  -[HMDHome addNotificationDeregistrationForApplicationBundleIdentifier:]
  -[HMDHome removeNotificationDeregistrationForApplicationBundleIdentifier:]
  -[HMDHome _applyNotificationDeregistrations]
  -[HMDHome hasCharacteristicNotificationRegistrations]
  -[HMDHome cacheResponsesForMessage:]
  -[HMDHome reportCompletionForMessage:]
  -[HMDHome eventRouterDumpStateInfo]
  -[HMDHome isDevicePrimaryResident:]
  -[HMDHome didReceiveAccessorySetting:accessoryUUID:]
  -[HMDHome _writeAccessoryCapabilities:accessoryUUID:homeUUID:]
  -[HMDHome _writeResidentCapabilities:accessoryUUID:homeUUID:]
  -[HMDHome _processTestModeHomeLocationStatusOverride:]
  -[HMDHome _processTestModeHomeAccessControlOverride:]
  -[HMDHome mediaGroupsAggregateDataTopicName]
  -[HMDHome setMediaSessions:]
  -[HMDHome setMediaSessionStates:]
  -[HMDHome networkProtectionGroupRegistry]
  -[HMDHome setNetworkProtectionGroupRegistry:]
  -[HMDHome newlyConfiguredAccessories]
  -[HMDHome isOwnerTrustZoneCapable]
  -[HMDHome setMigrationNeeded:]
  -[HMDHome spiClientIdentifier]
  -[HMDHome homeLocationHandler]
  -[HMDHome mediaGroupsAggregator]
  -[HMDHome setMediaGroupsAggregator:]
  -[HMDHome mediaGroupsUnconfiguredParticipantOnboardingManager]
  -[HMDHome setMediaGroupsUnconfiguredParticipantOnboardingManager:]
  -[HMDHome presenceMonitor]
  -[HMDHome presenceFeeder]
  -[HMDHome mediaSystemController]
  -[HMDHome setMediaSystemController:]
  -[HMDHome periodicReader]
  -[HMDHome analysisStatePublisher]
  -[HMDHome userActionPredictionManager]
  -[HMDHome setUserActionPredictionManager:]
  -[HMDHome naturalLightingCurveWriter]
  -[HMDHome nfcReaderKeyManager]
  -[HMDHome accessCodeManager]
  -[HMDHome setAccessCodeManager:]
  -[HMDHome labelsByAccessCode]
  -[HMDHome setLabelsByAccessCode:]
  -[HMDHome removedUserInfoByAccessCode]
  -[HMDHome setRemovedUserInfoByAccessCode:]
  -[HMDHome lockNotificationManager]
  -[HMDHome reachabilityChangedLogEventManager]
  -[HMDHome currentUserFactory]
  -[HMDHome xpcMessageTransportFactory]
  -[HMDHome setRemoveAccessoryInProgressForHMDAccessories:]
  -[HMDHome setHomeHubState:]
  -[HMDHome localCapabilitiesDataSource]
  -[HMDHome WiFiAssertion]
  -[HMDHome setWiFiAssertion:]
  -[HMDHome setAddPendingAccessorySetupCodeHandlers:]
  -[HMDHome addPendingAccessorySetupCodes]
  -[HMDHome setAddPendingAccessorySetupCodes:]
  -[HMDHome setAddPendingAccessories:]
  -[HMDHome setAddAccessoryRequestMap:]
  -[HMDHome notificationHandlerMap]
  -[HMDHome setNotificationHandlerMap:]
  -[HMDHome homeReprovisionHandler]
  -[HMDHome setHomeReprovisionHandler:]
  -[HMDHome connectionsDiscoveringSymptomsForNearbyDevices]
  -[HMDHome shouldEncodeHasOnboardedForWalletKey]
  -[HMDHome shouldEncodeNFCReaderKey]
  -[HMDHome mediaGroupSettingsController]
  -[HMDHome setMediaGroupSettingsController:]
  -[HMDHome remoteEventRouterServer]
  -[HMDHome setRemoteEventRouterServer:]
  -[HMDHome previousReachableAccessoriesCount]
  -[HMDHome setPreviousReachableAccessoriesCount:]
  -[HMDHome previousReachableAppleMediaAccessoriesCount]
  -[HMDHome setPreviousReachableAppleMediaAccessoriesCount:]
  -[HMDHome personDataManager]
  -[HMDHome setPersonDataManager:]
  -[HMDHome naturalLightingContextUpdater]
  -[HMDHome setNaturalLightingContextUpdater:]
  -[HMDHome accessoryConnectionCoordinator]
  -[HMDHome setAccessoryConnectionCoordinator:]
  -[HMDHome setAccessoryReaderWriter:]
  -[HMDHome setIsNetworkAvailable:]
  -[HMDHome lightBrightnessLogger]
  -[HMDHome hapMetadata]
  -[HMDHome deviceLockStateDataSource]
  -[HMDHome mediaStateManager]
  -[HMDHome setMediaStateManager:]
  -[HMDHome setResidentFirstAccessoryCommunicationEnabled:]
  -[HMDHome serverDelegatingEventRouter]
  -[HMDHome capabilitiesAggregator]
  -[HMDHome setCapabilitiesAggregator:]
  -[HMDHome overrideSentinelZoneForConvergencePeriod]
  -[HMDHome setOverrideSentinelZoneForConvergencePeriod:]
  -[HMDHome currentHomeKitVersion]
  -[HMDHome setCurrentHomeKitVersion:]
  -[HMDHome remoteEventRouterClientController]
  -[HMDHome setRemoteEventRouterClientController:]
  -[HMDHome unifiedLanguageValueListSettingDataProvider]
  -[HMDHome setUnifiedLanguageValueListSettingDataProvider:]
  -[HMDHome siriEndpointProfilesMessenger]
  -[HMDHome setSiriEndpointProfilesMessenger:]
  -[HMDHome multiuserSettingsMessenger]
  -[HMDHome setMultiuserSettingsMessenger:]
  -[HMDHome appleMediaAccessoriesStateManager]
  -[HMDHome setAppleMediaAccessoriesStateManager:]
  -[HMDHome accessorySettingsMessenger]
  -[HMDHome setAccessorySettingsMessenger:]
  -[HMDHome homeObjectChangeHandler]
  -[HMDHome primaryResidentMessageRouter]
  -[HMDHome setPrimaryResidentMessageRouter:]
  -[HMDHome appleDeviceRouter]
  -[HMDHome setAppleDeviceRouter:]
  -[HMDHome accessoryMessageRouterViaPrimary]
  -[HMDHome setAccessoryMessageRouterViaPrimary:]
  -[HMDHome setRooms:]
  -[HMDHome setDiscoveredAccessories:]
  -[HMDHome setActionSets:]
  -[HMDHome setTriggerOwnedActionSets:]
  -[HMDHome retrievalAccessoryCompletionTuples]
  -[HMDHome setRetrievalAccessoryCompletionTuples:]
  -[HMDHome pendingUsers]
  -[HMDHome setPendingUsers:]
  -[HMDHome removedUsers]
  -[HMDHome setRemovedUsers:]
  -[HMDHome unconfiguredResidentDevices]
  -[HMDHome setUnconfiguredResidentDevices:]
  -[HMDHome setRoomForEntireHome:]
  -[HMDHome lastSyncedConfigurationVersion]
  -[HMDHome setLastSyncedConfigurationVersion:]
  -[HMDHome expectedConfigurationVersion]
  -[HMDHome setExpectedConfigurationVersion:]
  -[HMDHome firstHAPAccessoryAddedDate]
  -[HMDHome setFirstHAPAccessoryAddedDate:]
  -[HMDHome notificationRegistry]
  -[HMDHome setNotificationRegistry:]
  -[HMDHome setRemoteAccessIsEnabled:]
  -[HMDHome heartbeatPingMessagesQueuedWithServer]
  -[HMDHome setHeartbeatPingMessagesQueuedWithServer:]
  -[HMDHome pendingResponsesForRemoteAccessSetup]
  -[HMDHome setPendingResponsesForRemoteAccessSetup:]
  -[HMDHome setSharedAdmin:]
  -[HMDHome registeredNotificationWithRemoteGateway]
  -[HMDHome setRegisteredNotificationWithRemoteGateway:]
  -[HMDHome allowsRemoteAccess]
  -[HMDHome setAllowsRemoteAccess:]
  -[HMDHome isMigratingAfterResidentChange]
  -[HMDHome setMigratingAfterResidentChange:]
  -[HMDHome assistantOperations]
  -[HMDHome setAssistantOperations:]
  -[HMDHome enableNotificationPayload]
  -[HMDHome disableNotificationPayload]
  -[HMDHome modifyNotificationsCoalesceTimer]
  -[HMDHome setModifyNotificationsCoalesceTimer:]
  -[HMDHome unpairedSecondaryHAPAccessories]
  -[HMDHome residentDeviceManager]
  -[HMDHome sharedHomeUpdateHandler]
  -[HMDHome setCurrentRemoteReachabilityRegistration:]
  -[HMDHome stagedRemoteReachabilityRegistration]
  -[HMDHome isUpdatedToHH2]
  -[HMDHome setIsUpdatedToHH2:]
  -[HMDHome reachabilityRegisteredDevices]
  -[HMDHome setReachabilityRegisteredDevices:]
  -[HMDHome reachabilityNotificationTimer]
  -[HMDHome setReachabilityNotificationTimer:]
  -[HMDHome remoteReachabilityNotificationPendingAccessories]
  -[HMDHome setRemoteReachabilityNotificationPendingAccessories:]
  -[HMDHome disableNotificationTimer]
  -[HMDHome setDisableNotificationTimer:]
  -[HMDHome setPendingResponses:]
  -[HMDHome pendingResponsesTimer]
  -[HMDHome setPendingResponsesTimer:]
  -[HMDHome ownedTriggers]
  -[HMDHome setOwnedTriggers:]
  -[HMDHome uuidToHAPAccessoryConfigTable]
  -[HMDHome setUuidToHAPAccessoryConfigTable:]
  -[HMDHome predicateUtility]
  -[HMDHome sharedHomeSourceVersion]
  -[HMDHome setSharedHomeSourceVersion:]
  -[HMDHome mediaActionRouter]
  -[HMDHome setMediaActionRouter:]
  -[HMDHome personManagerZoneUUID]
  -[HMDHome setPersonManagerZoneUUID:]
  -[HMDHome reachabilityNotificationManager]
  -[HMDHome setCoordinationStateManager:]
  -[HMDHome homeRemoteEventAccessController]
  -[HMDHome nonIPadResidentDeviceCountForHH2Migration]
  -[HMDHome setChipStorage:]
  -[HMDHome mediaGroupsAggregateConsumer]
  -[HMDHome siriSecureAccessoryAccessController]
  -[HMDHome carPlayDataSource]
  -[HMDHome setMediaSettingsValue:mediaPassword:enabled:]
  -[HMDHome _handleJoinOrFormThreadNetworkMessage:]
  -[HMDHome _handleUnjoinThreadNetworkMessage:]
  -[HMDHome _registerThreadResidentCommissioningMessageHandlers]
  -[HMDHome startThreadNetwork:]
  -[HMDHome stopThreadNetwork:]
  -[HMDHome stopThreadNetworkWithCompletion:completion:]
  -[HMDHome _updateThreadNetworkWithModel:message:]
  -[HMDHome actionWithDictionaryRepresentation:]
  -[HMDHome configureAppleMediaAccessoriesStateManagerWithStateManagerWithFactory:messengerFactory:metricsDispatcherFactory:]
  -[HMDHome createAppleMediaAccessoriesStateManagerWithIdentifier:messenger:metricsDispatcher:]
  -[HMDHome _auditAndDeregisterCharacteristicsForHAPAccessory:]
  -[HMDHome _auditChangedCharactersitics:]
  -[HMDHome appleMediaAccessoriesForStateManager:]
  -[HMDHome lightProfileWithUUID:]
  -[HMDHome updateLightProfilesSettingsWithRequiresHomeNotificationsEnabled:]
  -[HMDHome updateLightProfilesSettings:]
  -[HMDHome configurePrimaryResidentMessageRouterWithFactory:metricsDispatcherFactory:]
  -[HMDHome createPrimaryResidentMessageRouterWithMessageDispatcher:metricsDispatcher:]
  -[HMDHome createAccessorySettingsLocalMessageHandlerWithHomeUUID:languageValuesDataProvider:]
  -[HMDHome dataProvidersForUnifiedLanguageValueListSettingDataProvider:]
  -[HMDHome accessoryCount]
  -[HMDHome createSiriEndpointProfileMessageHandlerWithHomeUUID:]
  -[HMDHome multiUserSettings]
  -[HMDHome createPrimaryResidentMessageRouterMetricsDispatcherWithLogEventSubmitter:]
  -[HMDHome accessoriesRequiringManualReconfigurationOnRouterRemoval]
  -[HMDHome _reconfigureAccessoriesOnRouterRemovalWithCompletion:]
  -[HMDHome playbackArchiveWithSessionIdentifier:]
  -[HMDHome accessorySettingsMessengerMessageTargetUUID]
  -[HMDHome configureAccessorySettingsMessengerWithMessengerFactory:messageHandlerFactory:]
  -[HMDHome createAccessorySettingsMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:legacyMessageReceiver:]
  -[HMDHome hubAccessories]
  -[HMDHome createAppleMediaAccessoriesStateMessengerWithIdentifier:messageDispatcher:]
  -[HMDHome isCarPlayAccessAllowedForCharacteristic:withMessage:fromSource:]
  -[HMDHome isCarPlayAccessAllowedForActionSet:withMessage:fromSource:]
  -[HMDHome assistantObject]
  -[HMDHome _currentDeviceCapabilities]
  -[HMDHome _isNetworkRouterSupportEnabledForCurrentDevice]
  -[HMDHome wiFiRouterAccessories]
  -[HMDHome activeNetworkRouterAccessory]
  -[HMDHome checkForNetworkRouterSupport:error:]
  -[HMDHome deriveNetworkRouterSupport:]
  -[HMDHome _addTransactionWithProtectionMode:message:]
  -[HMDHome _addTransactionForActiveNetworkRouterAccessory:isReplacement:]
  -[HMDHome _updateActiveNetworkRouterAccessory:isReplacement:withTransaction:]
  -[HMDHome _clearAccessoryNetworkProtectionStateWithTransaction:]
  -[HMDHome _addTransactionForMinimumNetworkRouterHomeKitVersion:message:]
  -[HMDHome _addTransactionForMinimumHomeKitVersionForAccessoryNetworkProtectionChange:message:]
  -[HMDHome _configureNetworkRouterClientManager:]
  -[HMDHome _unconfigureNetworkRouterClientManager]
  -[HMDHome _scheduleApplyNetworkRouterSettingsAction:]
  -[HMDHome _evaluateNetworkRouterManagementForTransaction:]
  -[HMDHome _handleNetworkProtectionModeChangeForTransaction:]
  -[HMDHome _evaluateNetworkProtectionAndRouterManagement]
  -[HMDHome _createUniquePSKClientConfigurationWithRequestMessage:pairingEvent:completion:]
  -[HMDHome _requestUniquePSKClientConfigurationWithCompletion:]
  -[HMDHome _removeClientConfigurationWithIdentifier:]
  -[HMDHome _removeClientConfigurationWithIdentifier:completion:]
  -[HMDHome _requestRemoveClientConfigurationWithIdentifier:]
  -[HMDHome _evaluateNetworkProtectionSupport]
  -[HMDHome createAppleMediaAccessoriesStateManagerMetricsDispatcherWithIdentifier:logEventSubmitter:]
  -[HMDHome configureMultiuserSettingsMessengerWithMessengerFactory:]
  -[HMDHome createMultiuserSettingsMessenger:messageDispatcher:]
  -[HMDHome primaryResidentDeviceForPrimaryResidentMessageRouter:]
  -[HMDHome isAccessToHomeAllowed]
  -[HMDHome isThisHomeMigratedToHH2]
  -[HMDHome _processTestModeSkipHH2MigrationOverride:]
  -[HMDHome storeMigrationCharacteristicsAuthorizationData]
  -[HMDHome configureSiriEndpointProfilesMessengerWithMessengerFactory:messageHandlerFactory:]
  -[HMDHome createSiriEndpointProfilesMessengerWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:]
  -[HMDHome _isRetrievalInProgressForPrimaryAccessory:linkType:]
  -[HMDHome _enqueueRetrievalTupleForAccessory:linkType:inProgress:completion:]
  -[HMDHome _dequeueRetrievalForAccessory:linkType:error:]
  -[HMDHome _retrieveHAPAccessoryForHMDHAPAccessory:linkType:forceRetrieve:completion:]
  -[HMDHome _notifyRetrievalError:accessoryServer:linkType:accessoryOperationBlock:]
  -[HMDHome _unitTest_setRetrievalCompletionsTimeout:]
  -[HMDHome accessorySettingsLocalMessageHandler:callerPrivilegeWithMessage:]
  -[HMDHome configureUnifiedLanguageValueListSettingDataProviderWithFactory:]
  -[HMDHome createUnifiedLanguageValueListSettingDataProvider]


HMDVideoStreamReconfigure : HMFObject <HMFTimerDelegate, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDVideoStreamReconfigure logCategory]

  // instance methods
  -[HMDVideoStreamReconfigure timerDidFire:]
  -[HMDVideoStreamReconfigure logIdentifier]
  -[HMDVideoStreamReconfigure .cxx_destruct]
  -[HMDVideoStreamReconfigure initWithSessionID:workQueue:delegate:delegateQueue:]
  -[HMDVideoStreamReconfigure updateReconfigurationMode:]
  -[HMDVideoStreamReconfigure downlinkQualityChanged:]


__HMDRegisteredIdentity : HMFObject
 @property  HMFPairingIdentity *identity
 @property  NSMutableArray *registeredObjects

  // instance methods
  -[__HMDRegisteredIdentity initWithIdentity:]
  -[__HMDRegisteredIdentity .cxx_destruct]
  -[__HMDRegisteredIdentity identity]
  -[__HMDRegisteredIdentity init]
  -[__HMDRegisteredIdentity registeredObjects]


__HMDRegisteredDeviceIdentity : __HMDRegisteredIdentity
 @property  HMDDevice *device

  // instance methods
  -[__HMDRegisteredDeviceIdentity initWithIdentity:]
  -[__HMDRegisteredDeviceIdentity .cxx_destruct]
  -[__HMDRegisteredDeviceIdentity device]
  -[__HMDRegisteredDeviceIdentity initWithIdentity:device:]


__HMDRegisteredAccountIdentity : __HMDRegisteredIdentity
 @property  HMDAccount *account

  // instance methods
  -[__HMDRegisteredAccountIdentity account]
  -[__HMDRegisteredAccountIdentity initWithIdentity:]
  -[__HMDRegisteredAccountIdentity .cxx_destruct]
  -[__HMDRegisteredAccountIdentity initWithIdentity:account:]


HMDIdentityRegistry : HMFObject <HMFLogging, HMFDumpState>
 @property  HMDHomeManager *homeManager
 @property  NSRecursiveLock *lock
 @property  NSArray *registeredIdentities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIdentityRegistry logCategory]
  +[HMDIdentityRegistry sharedRegistry]

  // instance methods
  -[HMDIdentityRegistry dumpState]
  -[HMDIdentityRegistry attributeDescriptions]
  -[HMDIdentityRegistry reset]
  -[HMDIdentityRegistry .cxx_destruct]
  -[HMDIdentityRegistry homeManager]
  -[HMDIdentityRegistry setHomeManager:]
  -[HMDIdentityRegistry identityForIdentifier:]
  -[HMDIdentityRegistry lock]
  -[HMDIdentityRegistry init]
  -[HMDIdentityRegistry registeredIdentities]
  -[HMDIdentityRegistry configureWithHomeManager:]
  -[HMDIdentityRegistry _userForIdenity:]
  -[HMDIdentityRegistry userForDevice:]
  -[HMDIdentityRegistry identitiesForDevice:]
  -[HMDIdentityRegistry identitiesForAccount:]
  -[HMDIdentityRegistry accountsForIdentity:]
  -[HMDIdentityRegistry registerIdentity:device:object:]
  -[HMDIdentityRegistry registerIdentity:account:object:]
  -[HMDIdentityRegistry deregisterIdentity:object:]


HMDCameraSnapshotRemoteStreamSender : HMDCameraSnapshotSender <HMDCameraGetSnapshotProtocol, HMDCameraSnapshotSenderProtocol, HMDCameraSnapshotLocalDelegate, HMDCameraSnapshotIDSStreamInitiatorDelegate, HMFLogging>
 @property  HMDCameraSnapshotLocal *snapshotLocal
 @property  <HMDCameraSnapshotRemoteStreamSenderDelegate> *delegate
 @property  HMDCameraSnapshotIDSStreamInitiator *streamInitiator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotRemoteStreamSender logCategory]

  // instance methods
  -[HMDCameraSnapshotRemoteStreamSender logIdentifier]
  -[HMDCameraSnapshotRemoteStreamSender delegate]
  -[HMDCameraSnapshotRemoteStreamSender dealloc]
  -[HMDCameraSnapshotRemoteStreamSender .cxx_destruct]
  -[HMDCameraSnapshotRemoteStreamSender getSnapshot:]
  -[HMDCameraSnapshotRemoteStreamSender snapShotTransferComplete]
  -[HMDCameraSnapshotRemoteStreamSender snapshotLocal:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotRemoteStreamSender streamInitiator:didFailToSendFile:]
  -[HMDCameraSnapshotRemoteStreamSender initWithSessionID:workQueue:device:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:]
  -[HMDCameraSnapshotRemoteStreamSender sendSnapshotAtPath:]
  -[HMDCameraSnapshotRemoteStreamSender _callDidStartCaptureImageDelegate:]
  -[HMDCameraSnapshotRemoteStreamSender _callDidCompleteSendImageDelegate:]
  -[HMDCameraSnapshotRemoteStreamSender snapshotLocal]
  -[HMDCameraSnapshotRemoteStreamSender streamInitiator]


HMDApplicationData : HMFObject <NSSecureCoding, NSCopying, HMFDumpState>
 @property  NSUUID *uuid
 @property  NSMutableDictionary *appDataDictionary
 @property  NSUUID *parentUUID
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDApplicationData supportsSecureCoding]

  // instance methods
  -[HMDApplicationData dumpState]
  -[HMDApplicationData encodeWithCoder:]
  -[HMDApplicationData uuid]
  -[HMDApplicationData .cxx_destruct]
  -[HMDApplicationData setUuid:]
  -[HMDApplicationData isEmpty]
  -[HMDApplicationData removeApplicationDataForIdentifier:]
  -[HMDApplicationData copyWithZone:]
  -[HMDApplicationData initWithCoder:]
  -[HMDApplicationData dictionary]
  -[HMDApplicationData parentUUID]
  -[HMDApplicationData setParentUUID:]
  -[HMDApplicationData updateWithModel:]
  -[HMDApplicationData modelObjectWithChangeType:]
  -[HMDApplicationData initWithParentUUID:]
  -[HMDApplicationData initWithDictionary:parentUUID:]
  -[HMDApplicationData setApplicationData:forIdentifier:]
  -[HMDApplicationData applicationDataForIdentifier:]
  -[HMDApplicationData updateParentUUIDIfNil:]
  -[HMDApplicationData encodeForXPCTransportWithCoder:key:]
  -[HMDApplicationData appDataDictionary]
  -[HMDApplicationData setAppDataDictionary:]


HMDApplicationDataModel : HMDBackingStoreModelObject
 @property  NSDictionary *appDataDictionary

  // class methods
  +[HMDApplicationDataModel properties]
  +[HMDApplicationDataModel schemaHashRoot]


HMDPhotosPersonManager : HMDPersonManager <HMFLogging, HMDDatabaseZoneManagerDataSource>
 @property  HMPhotosPersonManagerSettings *dataUnavailableExternalSettings
 @property  HMDUser *user
 @property  HMIExternalPersonManager *hmiPersonManager
 @property  HMPhotosPersonManagerSettings *settings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPhotosPersonManager logCategory]
  +[HMDPhotosPersonManager zoneNameForZoneUUID:]

  // instance methods
  -[HMDPhotosPersonManager setUser:]
  -[HMDPhotosPersonManager user]
  -[HMDPhotosPersonManager .cxx_destruct]
  -[HMDPhotosPersonManager settings]
  -[HMDPhotosPersonManager manager:shouldShareWithUser:]
  -[HMDPhotosPersonManager zoneManager:shouldRequestShareInvitationFromUser:]
  -[HMDPhotosPersonManager initWithUser:zoneUUID:workQueue:]
  -[HMDPhotosPersonManager initWithUUID:zoneManager:dataInterfaces:workQueue:user:]
  -[HMDPhotosPersonManager sharesFaceClassifications]
  -[HMDPhotosPersonManager hmiPersonManager]
  -[HMDPhotosPersonManager handleUpdatedSettings:]
  -[HMDPhotosPersonManager dataUnavailableExternalSettings]


HMDPrimaryResidentMessageRouter : HMFObject <HMFLogging, HMDMessageRouter>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDPrimaryResidentMessageRouterMetricsDispatcher *metricsDispatcher
 @property  <HMDPrimaryResidentMessageRouterDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPrimaryResidentMessageRouter logCategory]

  // instance methods
  -[HMDPrimaryResidentMessageRouter dataSource]
  -[HMDPrimaryResidentMessageRouter .cxx_destruct]
  -[HMDPrimaryResidentMessageRouter setDataSource:]
  -[HMDPrimaryResidentMessageRouter messageDispatcher]
  -[HMDPrimaryResidentMessageRouter metricsDispatcher]
  -[HMDPrimaryResidentMessageRouter routeMessage:localHandler:]
  -[HMDPrimaryResidentMessageRouter routeMessage:allowRemoteRelayFromPrimary:localHandler:]
  -[HMDPrimaryResidentMessageRouter initWithMessageDispatcher:metricsDispatcher:]
  -[HMDPrimaryResidentMessageRouter dataSourcePrimaryResidentDeviceWithMessage:]
  -[HMDPrimaryResidentMessageRouter relayMessage:device:]


HMDSiriEndpointSessionStateTLV : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSUUID *hubUUID
 @property  HMDSiriEndpointSessionStateTypeWrapper *sessionState
 @property  NSData *hubIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointSessionStateTLV parsedFromData:error:]

  // instance methods
  -[HMDSiriEndpointSessionStateTLV parseFromData:error:]
  -[HMDSiriEndpointSessionStateTLV .cxx_destruct]
  -[HMDSiriEndpointSessionStateTLV setSessionState:]
  -[HMDSiriEndpointSessionStateTLV copyWithZone:]
  -[HMDSiriEndpointSessionStateTLV isEqual:]
  -[HMDSiriEndpointSessionStateTLV init]
  -[HMDSiriEndpointSessionStateTLV sessionState]
  -[HMDSiriEndpointSessionStateTLV serializeWithError:]
  -[HMDSiriEndpointSessionStateTLV initWithSessionState:hubIdentifier:]
  -[HMDSiriEndpointSessionStateTLV hubIdentifier]
  -[HMDSiriEndpointSessionStateTLV setHubIdentifier:]
  -[HMDSiriEndpointSessionStateTLV hubUUID]


HMDSiriAccessoryInfo : NSObject
 @property  id targetsAccessory
 @property  BOOL supportsDragonSiri

  // class methods
  +[HMDSiriAccessoryInfo infoWithTargetableAccessory:]

  // instance methods
  -[HMDSiriAccessoryInfo .cxx_destruct]
  -[HMDSiriAccessoryInfo isActiveAndSupportsDragonSiri]
  -[HMDSiriAccessoryInfo targetsAccessory]
  -[HMDSiriAccessoryInfo setTargetsAccessory:]
  -[HMDSiriAccessoryInfo supportsDragonSiri]
  -[HMDSiriAccessoryInfo setSupportsDragonSiri:]


HMDSiriAccessoryMonitor : NSObject
 @property  <HMDSiriAccessoryMonitorDelegate> *delegate
 @property  NSMapTable *accessories

  // instance methods
  -[HMDSiriAccessoryMonitor delegate]
  -[HMDSiriAccessoryMonitor .cxx_destruct]
  -[HMDSiriAccessoryMonitor initWithDelegate:]
  -[HMDSiriAccessoryMonitor setAccessories:]
  -[HMDSiriAccessoryMonitor _removeAccessory:]
  -[HMDSiriAccessoryMonitor accessories]
  -[HMDSiriAccessoryMonitor _getInfoForAccessory:]
  -[HMDSiriAccessoryMonitor hasAnyActiveTargetingAccessories]
  -[HMDSiriAccessoryMonitor _accessoriesTargetingAccessory:]
  -[HMDSiriAccessoryMonitor _addAccessory:withTarget:]
  -[HMDSiriAccessoryMonitor setTargetableAccessory:withControllers:]
  -[HMDSiriAccessoryMonitor accessory:setSupportsDragonSiri:]


HMDNaturalLightingActiveTransitionContext : HMFObject <NSCopying>
 @property  NSDate *startDate
 @property  unsigned long millisecondsElapsedSinceStartDate
 @property  NSNumber *transitionChecksum

  // instance methods
  -[HMDNaturalLightingActiveTransitionContext attributeDescriptions]
  -[HMDNaturalLightingActiveTransitionContext .cxx_destruct]
  -[HMDNaturalLightingActiveTransitionContext copyWithZone:]
  -[HMDNaturalLightingActiveTransitionContext startDate]
  -[HMDNaturalLightingActiveTransitionContext isEqual:]
  -[HMDNaturalLightingActiveTransitionContext transitionChecksum]
  -[HMDNaturalLightingActiveTransitionContext initWithStartDate:millisecondsElapsedSinceStartDate:transitionChecksum:]
  -[HMDNaturalLightingActiveTransitionContext millisecondsElapsedSinceStartDate]


AWDHomeKitPresenceReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasAuthStatus
 @property  int authStatus
 @property  BOOL hasComputeStatus
 @property  int computeStatus
 @property  BOOL hasReason
 @property  int reason
 @property  BOOL hasDirection
 @property  int direction
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode

  // instance methods
  -[AWDHomeKitPresenceReport setHasReason:]
  -[AWDHomeKitPresenceReport setDirection:]
  -[AWDHomeKitPresenceReport hasReason]
  -[AWDHomeKitPresenceReport setTimestamp:]
  -[AWDHomeKitPresenceReport copyTo:]
  -[AWDHomeKitPresenceReport mergeFrom:]
  -[AWDHomeKitPresenceReport reason]
  -[AWDHomeKitPresenceReport setHasTimestamp:]
  -[AWDHomeKitPresenceReport direction]
  -[AWDHomeKitPresenceReport dictionaryRepresentation]
  -[AWDHomeKitPresenceReport hasTimestamp]
  -[AWDHomeKitPresenceReport StringAsReason:]
  -[AWDHomeKitPresenceReport copyWithZone:]
  -[AWDHomeKitPresenceReport timestamp]
  -[AWDHomeKitPresenceReport readFrom:]
  -[AWDHomeKitPresenceReport reasonAsString:]
  -[AWDHomeKitPresenceReport writeTo:]
  -[AWDHomeKitPresenceReport setReason:]
  -[AWDHomeKitPresenceReport isEqual:]
  -[AWDHomeKitPresenceReport hasDirection]
  -[AWDHomeKitPresenceReport setHasDirection:]
  -[AWDHomeKitPresenceReport directionAsString:]
  -[AWDHomeKitPresenceReport StringAsDirection:]
  -[AWDHomeKitPresenceReport authStatus]
  -[AWDHomeKitPresenceReport setAuthStatus:]
  -[AWDHomeKitPresenceReport setHasAuthStatus:]
  -[AWDHomeKitPresenceReport hasAuthStatus]
  -[AWDHomeKitPresenceReport authStatusAsString:]
  -[AWDHomeKitPresenceReport StringAsAuthStatus:]
  -[AWDHomeKitPresenceReport setResultErrorCode:]
  -[AWDHomeKitPresenceReport setHasResultErrorCode:]
  -[AWDHomeKitPresenceReport hasResultErrorCode]
  -[AWDHomeKitPresenceReport resultErrorCode]
  -[AWDHomeKitPresenceReport computeStatus]
  -[AWDHomeKitPresenceReport setComputeStatus:]
  -[AWDHomeKitPresenceReport setHasComputeStatus:]
  -[AWDHomeKitPresenceReport hasComputeStatus]
  -[AWDHomeKitPresenceReport computeStatusAsString:]
  -[AWDHomeKitPresenceReport StringAsComputeStatus:]


HMDNetworkRouterFirewallRuleManagerOverrideParser : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerOverrideParser logCategory]
  +[HMDNetworkRouterFirewallRuleManagerOverrideParser parseFromData:]
  +[HMDNetworkRouterFirewallRuleManagerOverrideParser _parseOverrideNetworkDeclarationsWithProductGroup:productNumber:productNumberDictionary:accessoryIdentifier:]
  +[HMDNetworkRouterFirewallRuleManagerOverrideParser _parseOverridePairedMetadataWithProductGroup:productNumber:productNumberDictionary:accessoryIdentifier:]


HMDProcessExitInfoLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *exitType
 @property  NSString *exitReason
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDProcessExitInfoLogEvent eventName]
  -[HMDProcessExitInfoLogEvent .cxx_destruct]
  -[HMDProcessExitInfoLogEvent exitReason]
  -[HMDProcessExitInfoLogEvent exitType]
  -[HMDProcessExitInfoLogEvent serializedEvent]
  -[HMDProcessExitInfoLogEvent initWithExitType:reason:]


HMDHomePresenceMonitor : HMDHomePresenceBase <HMFLogging, NSSecureCoding>
 @property  NSString *timerID
 @property  NSDictionary *presenceMap
 @property  HMDHomePresence *currentHomePresence
 @property  HMDHomePresenceUpdate *homePresenceUpdate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomePresenceMonitor supportsSecureCoding]
  +[HMDHomePresenceMonitor logCategory]

  // instance methods
  -[HMDHomePresenceMonitor timerID]
  -[HMDHomePresenceMonitor encodeWithCoder:]
  -[HMDHomePresenceMonitor removeUser:]
  -[HMDHomePresenceMonitor dealloc]
  -[HMDHomePresenceMonitor .cxx_destruct]
  -[HMDHomePresenceMonitor init]
  -[HMDHomePresenceMonitor initWithCoder:]
  -[HMDHomePresenceMonitor _registerForMessages]
  -[HMDHomePresenceMonitor configure:messageDispatcher:]
  -[HMDHomePresenceMonitor handleUserPresenceUpdate:]
  -[HMDHomePresenceMonitor handleUserPresenceUpdateNotification:]
  -[HMDHomePresenceMonitor handleTimerFiredNotification:]
  -[HMDHomePresenceMonitor presenceMap]
  -[HMDHomePresenceMonitor currentHomePresence]
  -[HMDHomePresenceMonitor setCurrentHomePresence:]
  -[HMDHomePresenceMonitor handleHomeDataLoadedNotification:]
  -[HMDHomePresenceMonitor residentChanged]
  -[HMDHomePresenceMonitor _reEvaluatePresenceWithReason:]
  -[HMDHomePresenceMonitor _auditPresenceMap]
  -[HMDHomePresenceMonitor _startAuditTimer]
  -[HMDHomePresenceMonitor _preparePresenceMap]
  -[HMDHomePresenceMonitor _removeNonExistingUsers]
  -[HMDHomePresenceMonitor _addUser:]
  -[HMDHomePresenceMonitor addNewUser:]
  -[HMDHomePresenceMonitor handleUserHomePresencePayload:device:user:completion:]
  -[HMDHomePresenceMonitor _updateUserPresence:presenceAuth:completion:]
  -[HMDHomePresenceMonitor _evaluatePresence:newUserPresence:presenceStatusUpdateReason:]
  -[HMDHomePresenceMonitor homePresenceUpdate]
  -[HMDHomePresenceMonitor setHomePresenceUpdate:]


HMDLocationEvent : HMDEvent <HMDLocationDelegate, NSSecureCoding>
 @property  CLRegion *region
 @property  CLRegion *uniqueRegion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLocationEvent supportsSecureCoding]
  +[HMDLocationEvent logCategory]

  // instance methods
  -[HMDLocationEvent dumpState]
  -[HMDLocationEvent encodeWithCoder:]
  -[HMDLocationEvent isActive]
  -[HMDLocationEvent .cxx_destruct]
  -[HMDLocationEvent region]
  -[HMDLocationEvent setRegion:]
  -[HMDLocationEvent initWithCoder:]
  -[HMDLocationEvent _registerForMessages]
  -[HMDLocationEvent createPayload]
  -[HMDLocationEvent initWithModel:home:]
  -[HMDLocationEvent _activate:completionHandler:]
  -[HMDLocationEvent _transactionObjectUpdated:newValues:message:]
  -[HMDLocationEvent _transactionObjectRemoved:message:]
  -[HMDLocationEvent modelObjectWithChangeType:]
  -[HMDLocationEvent emptyModelObject]
  -[HMDLocationEvent _handleUpdateRequest:]
  -[HMDLocationEvent analyticsTriggerEventData]
  -[HMDLocationEvent _handleRetrieveLocationEventForEventTrigger:]
  -[HMDLocationEvent _handleLocationEventOccured:]
  -[HMDLocationEvent fmfStatusUpdateNotification:]
  -[HMDLocationEvent didEnterRegion:]
  -[HMDLocationEvent didExitRegion:]
  -[HMDLocationEvent checkFMFStatus:]
  -[HMDLocationEvent uniqueRegion]
  -[HMDLocationEvent locationEventOccured]
  -[HMDLocationEvent informLocationEventOccuranceToResident]


HMDLocationEventModel : HMDEventModel
 @property  NSData *region

  // class methods
  +[HMDLocationEventModel properties]
  +[HMDLocationEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]


AWDHomeKitAccessoryNetworkProtectionReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasStatus
 @property  int status
 @property  BOOL hasHadViolationsInLast24h
 @property  BOOL hadViolationsInLast24h

  // instance methods
  -[AWDHomeKitAccessoryNetworkProtectionReport setTimestamp:]
  -[AWDHomeKitAccessoryNetworkProtectionReport copyTo:]
  -[AWDHomeKitAccessoryNetworkProtectionReport setHasStatus:]
  -[AWDHomeKitAccessoryNetworkProtectionReport hasStatus]
  -[AWDHomeKitAccessoryNetworkProtectionReport status]
  -[AWDHomeKitAccessoryNetworkProtectionReport setStatus:]
  -[AWDHomeKitAccessoryNetworkProtectionReport statusAsString:]
  -[AWDHomeKitAccessoryNetworkProtectionReport .cxx_destruct]
  -[AWDHomeKitAccessoryNetworkProtectionReport mergeFrom:]
  -[AWDHomeKitAccessoryNetworkProtectionReport setHasTimestamp:]
  -[AWDHomeKitAccessoryNetworkProtectionReport StringAsStatus:]
  -[AWDHomeKitAccessoryNetworkProtectionReport dictionaryRepresentation]
  -[AWDHomeKitAccessoryNetworkProtectionReport hasTimestamp]
  -[AWDHomeKitAccessoryNetworkProtectionReport copyWithZone:]
  -[AWDHomeKitAccessoryNetworkProtectionReport timestamp]
  -[AWDHomeKitAccessoryNetworkProtectionReport readFrom:]
  -[AWDHomeKitAccessoryNetworkProtectionReport writeTo:]
  -[AWDHomeKitAccessoryNetworkProtectionReport isEqual:]
  -[AWDHomeKitAccessoryNetworkProtectionReport hasVendorDetails]
  -[AWDHomeKitAccessoryNetworkProtectionReport setHadViolationsInLast24h:]
  -[AWDHomeKitAccessoryNetworkProtectionReport setHasHadViolationsInLast24h:]
  -[AWDHomeKitAccessoryNetworkProtectionReport hasHadViolationsInLast24h]
  -[AWDHomeKitAccessoryNetworkProtectionReport vendorDetails]
  -[AWDHomeKitAccessoryNetworkProtectionReport setVendorDetails:]
  -[AWDHomeKitAccessoryNetworkProtectionReport hadViolationsInLast24h]


HMDAssistantColorCharacteristic : HMFObject
 @property  NSString *readCharacteristicType
 @property  NSString *writeCharacteristicType
 @property  NSString *format
 @property  BOOL mandatory

  // instance methods
  -[HMDAssistantColorCharacteristic .cxx_destruct]
  -[HMDAssistantColorCharacteristic format]
  -[HMDAssistantColorCharacteristic initWithReadCharacteristicType:writeCharacteristicType:format:mandatory:]
  -[HMDAssistantColorCharacteristic readCharacteristicType]
  -[HMDAssistantColorCharacteristic writeCharacteristicType]
  -[HMDAssistantColorCharacteristic mandatory]


HMDAssistantCommand : SAHACommand <AFServiceCommand, HMFLogging>
 @property  HMDAssistantGather *gather
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSArray *homeKitObjects
 @property  long long numberOfHomes
 @property  NSString *primaryHomeName
 @property  NSString *primaryHomeAssistantIdentifier
 @property  NSString *currentHomeName
 @property  NSString *currentHomeAssistantIdentifier
 @property  HMDAssistantCommandHelper *assistantCommandHelper
 @property  BOOL completionHandlerCalled
 @property  HMDHome *home
 @property  unsigned long startTime
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantCommand initialize]
  +[HMDAssistantCommand logCategory]

  // instance methods
  -[HMDAssistantCommand home]
  -[HMDAssistantCommand startTime]
  -[HMDAssistantCommand setStartTime:]
  -[HMDAssistantCommand .cxx_destruct]
  -[HMDAssistantCommand currentHomeName]
  -[HMDAssistantCommand homeManager]
  -[HMDAssistantCommand setQueue:]
  -[HMDAssistantCommand setHomeManager:]
  -[HMDAssistantCommand _logEvent:]
  -[HMDAssistantCommand queue]
  -[HMDAssistantCommand setCurrentHomeName:]
  -[HMDAssistantCommand setHome:]
  -[HMDAssistantCommand gather]
  -[HMDAssistantCommand homeKitObjects]
  -[HMDAssistantCommand serviceFromObject:]
  -[HMDAssistantCommand mediaProfileFromObject:]
  -[HMDAssistantCommand populateResult:withService:serviceType:characteristic:resultAttribute:action:]
  -[HMDAssistantCommand populateResult:withObject:serviceType:action:]
  -[HMDAssistantCommand populateResultWithEntity:action:entity:]
  -[HMDAssistantCommand populateMediaProfileWriteResult:withValue:serviceType:action:]
  -[HMDAssistantCommand entityFromActionSet:]
  -[HMDAssistantCommand failedActionResultsFromResponse:inActionSet:withAction:]
  -[HMDAssistantCommand actionResultForMediaProfile:action:objects:error:]
  -[HMDAssistantCommand actionResultForCharacteristic:actionSet:action:objects:error:]
  -[HMDAssistantCommand getLocaleUnits:]
  -[HMDAssistantCommand getValueOfType:action:]
  -[HMDAssistantCommand isAttributeValue:equalTo:]
  -[HMDAssistantCommand adjustSetValue:type:units:attribute:]
  -[HMDAssistantCommand adjustGetValue:type:units:attribute:]
  -[HMDAssistantCommand objectsWithIdentifierList:error:]
  -[HMDAssistantCommand filteredObjectsFromObjects:forHomeName:roomName:zoneName:]
  -[HMDAssistantCommand filteredObjectsFromObjects:forGroup:]
  -[HMDAssistantCommand filteredObjectsFromObjects:byAttribute:forActionType:]
  -[HMDAssistantCommand filteredObjectsFromObjects:byCharacteristicType:]
  -[HMDAssistantCommand _evaluateHomeOptionallyMatchingHomeName:]
  -[HMDAssistantCommand _homeWithSearchFilter:]
  -[HMDAssistantCommand objectsWithSearchFilter:inHome:serviceTypeIsATV:overrideServiceTypeIfNeeded:]
  -[HMDAssistantCommand filterObjects:forCharacteristicTypes:]
  -[HMDAssistantCommand filterObjects:forCharacteristics:]
  -[HMDAssistantCommand reportOutcome:results:handler:]
  -[HMDAssistantCommand reportResults:handler:]
  -[HMDAssistantCommand reportUnlockRequired:]
  -[HMDAssistantCommand returnResults:serviceType:forAction:completionHandler:]
  -[HMDAssistantCommand actionOutcomeFromError:]
  -[HMDAssistantCommand executeActionSet:action:withCompletionHandler:]
  -[HMDAssistantCommand handleGetMetadataActionTypes:serviceType:forObjects:completionHandler:]
  -[HMDAssistantCommand populateResult:fromResponse:responses:forAction:serviceType:forObjects:]
  -[HMDAssistantCommand handleMediaAccessorySetActionType:forObjects:withServiceType:completionHandler:]
  -[HMDAssistantCommand handleGetActionTypes:serviceType:forObjects:completionHandler:]
  -[HMDAssistantCommand compareCurrentValue:newValue:withMetadata:]
  -[HMDAssistantCommand compareForBoundary:withMetadata:]
  -[HMDAssistantCommand handleGetNaturalLightingAction:forObjects:serviceType:completionHandler:]
  -[HMDAssistantCommand handleSetNaturalLightingAction:serviceType:forObjects:completionHandler:]
  -[HMDAssistantCommand handleSetActionTypes:serviceType:forObjects:completionHandler:]
  -[HMDAssistantCommand updateValueToBoundary:valueType:fudgeMinimum:metadata:]
  -[HMDAssistantCommand updateValue:forAction:]
  -[HMDAssistantCommand handleUpdateActionTypes:serviceType:forObjects:completionHandler:]
  -[HMDAssistantCommand _handleCommandForMediaAccessoryAction:objects:serviceType:completionHandler:]
  -[HMDAssistantCommand _handleCommandForHAPAction:serviceType:objects:completionHandler:]
  -[HMDAssistantCommand handleCommandWithCompletionHandler:]
  -[HMDAssistantCommand parseColorEncoding:]
  -[HMDAssistantCommand populateColorResult:serviceType:service:action:responses:forObjects:]
  -[HMDAssistantCommand handleReadWriteResponses:error:forAction:inServiceType:results:forObjects:]
  -[HMDAssistantCommand handleMediaReadWriteResponse:forAction:inServiceType:inHome:requestProperty:results:forObjects:]
  -[HMDAssistantCommand addIfNeededActivationCharacteristic:fromService:toCollection:]
  -[HMDAssistantCommand addActivationCharacteristicsIfNeeded:forCharacteristic:]
  -[HMDAssistantCommand addCharacteristicWithType:fromService:toCollection:assistantObjects:]
  -[HMDAssistantCommand addCharacteristicsFromRelatedServicesFor:assistantObjects:]
  -[HMDAssistantCommand addBridgedAcessoryCharacteristicsFor:toCollection:assistantObjects:]
  -[HMDAssistantCommand addLinkedServiceCharacteristicsFor:toCollection:assistantObjects:]
  -[HMDAssistantCommand addStatusCharacteristicsIfNeeded:]
  -[HMDAssistantCommand readRequestsForCharacteristic:]
  -[HMDAssistantCommand handleSetColor:forObjects:service:completionHandler:]
  -[HMDAssistantCommand handleGetColor:forObjects:serviceType:completionHandler:]
  -[HMDAssistantCommand performWithGather:queue:msgDispatcher:completion:]
  -[HMDAssistantCommand timeoutAndReportResults]
  -[HMDAssistantCommand setGather:]
  -[HMDAssistantCommand setHomeKitObjects:]
  -[HMDAssistantCommand numberOfHomes]
  -[HMDAssistantCommand setNumberOfHomes:]
  -[HMDAssistantCommand primaryHomeName]
  -[HMDAssistantCommand setPrimaryHomeName:]
  -[HMDAssistantCommand primaryHomeAssistantIdentifier]
  -[HMDAssistantCommand setPrimaryHomeAssistantIdentifier:]
  -[HMDAssistantCommand currentHomeAssistantIdentifier]
  -[HMDAssistantCommand setCurrentHomeAssistantIdentifier:]
  -[HMDAssistantCommand assistantCommandHelper]
  -[HMDAssistantCommand setAssistantCommandHelper:]
  -[HMDAssistantCommand completionHandlerCalled]
  -[HMDAssistantCommand setCompletionHandlerCalled:]


HMDDeviceNotificationHandlerDefaultDataSource : NSObject <HMDDeviceNotificationHandlerDataSource>
 @property  HMDHome *home
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDDeviceNotificationHandlerDefaultDataSource home]
  -[HMDDeviceNotificationHandlerDefaultDataSource .cxx_destruct]
  -[HMDDeviceNotificationHandlerDefaultDataSource setHome:]
  -[HMDDeviceNotificationHandlerDefaultDataSource initWithHome:]
  -[HMDDeviceNotificationHandlerDefaultDataSource timerWithType:]


HMDDeviceNotificationHandler : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *destination
 @property  HMFTimer *coalesceTimer
 @property  HMFTimer *delayTimer
 @property  BOOL delaySupported
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDDeviceNotificationHandlerDataSource> *dataSource
 @property  NSMutableOrderedSet *deviceNotificationsByRequestIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDeviceNotificationHandler logCategory]

  // instance methods
  -[HMDDeviceNotificationHandler home]
  -[HMDDeviceNotificationHandler timerDidFire:]
  -[HMDDeviceNotificationHandler setDestination:]
  -[HMDDeviceNotificationHandler logIdentifier]
  -[HMDDeviceNotificationHandler destination]
  -[HMDDeviceNotificationHandler dataSource]
  -[HMDDeviceNotificationHandler setDelayTimer:]
  -[HMDDeviceNotificationHandler delayTimer]
  -[HMDDeviceNotificationHandler workQueue]
  -[HMDDeviceNotificationHandler setWorkQueue:]
  -[HMDDeviceNotificationHandler .cxx_destruct]
  -[HMDDeviceNotificationHandler messageDispatcher]
  -[HMDDeviceNotificationHandler setHome:]
  -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:]
  -[HMDDeviceNotificationHandler initWithDestination:watchDevice:withRequestIdentifier:messageDispatcher:home:dataSource:]
  -[HMDDeviceNotificationHandler sendNotificationForCharacteristicUpdates:withRequestIdentifier:notificationUpdateIdentifier:completion:]
  -[HMDDeviceNotificationHandler _notificationUpdateWithRequestID:allowAdd:]
  -[HMDDeviceNotificationHandler sendNotificationForMediaProperties:withRequestIdentifier:notificationUpdateIdentifier:]
  -[HMDDeviceNotificationHandler _beginCoalesce:]
  -[HMDDeviceNotificationHandler _dispatchNotification]
  -[HMDDeviceNotificationHandler _dispatchNotificationUpdate:]
  -[HMDDeviceNotificationHandler coalesceTimer]
  -[HMDDeviceNotificationHandler setCoalesceTimer:]
  -[HMDDeviceNotificationHandler delaySupported]
  -[HMDDeviceNotificationHandler setDelaySupported:]
  -[HMDDeviceNotificationHandler deviceNotificationsByRequestIDs]
  -[HMDDeviceNotificationHandler setDeviceNotificationsByRequestIDs:]


HMDCharacteristicUpdateTuple : HMFObject
 @property  id value
 @property  HMDCharacteristic *characteristic
 @property  id updatedValue
 @property  BOOL broadcast
 @property  HMDCharacteristicResponse *characteristicResponse

  // class methods
  +[HMDCharacteristicUpdateTuple characteristicUpdateTuplesWithCharacteristics:isBroadcast:]

  // instance methods
  -[HMDCharacteristicUpdateTuple .cxx_destruct]
  -[HMDCharacteristicUpdateTuple setValue:]
  -[HMDCharacteristicUpdateTuple value]
  -[HMDCharacteristicUpdateTuple updatedValue]
  -[HMDCharacteristicUpdateTuple isBroadcast]
  -[HMDCharacteristicUpdateTuple characteristic]
  -[HMDCharacteristicUpdateTuple initWithCharacteristic:updatedValue:isBroadcast:]
  -[HMDCharacteristicUpdateTuple characteristicResponse]
  -[HMDCharacteristicUpdateTuple setCharacteristicResponse:]


HMDDeviceNotificationUpdate : HMFObject
 @property  NSString *requestID
 @property  NSString *notificationUpdateID
 @property  NSArray *completions
 @property  NSArray *characteristicUpdateTuples
 @property  NSArray *mediaProperties

  // instance methods
  -[HMDDeviceNotificationUpdate initWithRequestID:]
  -[HMDDeviceNotificationUpdate .cxx_destruct]
  -[HMDDeviceNotificationUpdate requestID]
  -[HMDDeviceNotificationUpdate completions]
  -[HMDDeviceNotificationUpdate _updateWithNotificationUpdateID:completion:]
  -[HMDDeviceNotificationUpdate updateWithUpdatedMediaPropertiesByMediaResponses:notificationUpdateID:completion:]
  -[HMDDeviceNotificationUpdate updateWithCharacteristicUpdates:notificationUpdateID:completion:]
  -[HMDDeviceNotificationUpdate mediaProperties]
  -[HMDDeviceNotificationUpdate characteristicUpdateTuples]
  -[HMDDeviceNotificationUpdate notificationUpdateID]


HMDCameraRecordingReachabilityLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  BOOL reachable
 @property  BOOL didCreateEventModel
 @property  unsigned long reachabilityChangeDebounceCount
 @property  double offlineDuration
 @property  HMDAccessoryVersion *firmwareVersion
 @property  NSString *manufacturer
 @property  NSString *model

  // instance methods
  -[HMDCameraRecordingReachabilityLogEvent firmwareVersion]
  -[HMDCameraRecordingReachabilityLogEvent model]
  -[HMDCameraRecordingReachabilityLogEvent eventName]
  -[HMDCameraRecordingReachabilityLogEvent .cxx_destruct]
  -[HMDCameraRecordingReachabilityLogEvent manufacturer]
  -[HMDCameraRecordingReachabilityLogEvent reachable]
  -[HMDCameraRecordingReachabilityLogEvent serializedEvent]
  -[HMDCameraRecordingReachabilityLogEvent initWithReachability:didCreateEventModel:reachabilityChangeDebounceCount:offlineDuration:hapAccessory:]
  -[HMDCameraRecordingReachabilityLogEvent didCreateEventModel]
  -[HMDCameraRecordingReachabilityLogEvent reachabilityChangeDebounceCount]
  -[HMDCameraRecordingReachabilityLogEvent offlineDuration]


HMDAppleMediaAccessoryMetricsDispatcher : HMFObject <HMDLogEventDailyTaskRunner>
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  <HMDAppleMediaAccessoryMetricsDispatcherDataSource> *dataSource
 @property  NSString *previousRoomName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAppleMediaAccessoryMetricsDispatcher dataSource]
  -[HMDAppleMediaAccessoryMetricsDispatcher .cxx_destruct]
  -[HMDAppleMediaAccessoryMetricsDispatcher logEventSubmitter]
  -[HMDAppleMediaAccessoryMetricsDispatcher runDailyTask]
  -[HMDAppleMediaAccessoryMetricsDispatcher dailyScheduler]
  -[HMDAppleMediaAccessoryMetricsDispatcher initWithDataSource:logEventSubmitter:dailyScheduler:]
  -[HMDAppleMediaAccessoryMetricsDispatcher registerForDailySetRoomLogEvents]
  -[HMDAppleMediaAccessoryMetricsDispatcher submitDailySetRoomEvent]
  -[HMDAppleMediaAccessoryMetricsDispatcher submitRoomChangeEvent:previousRoom:]
  -[HMDAppleMediaAccessoryMetricsDispatcher previousRoomName]
  -[HMDAppleMediaAccessoryMetricsDispatcher setPreviousRoomName:]


HMDAccessoryServerBrowserDemo : HAPAccessoryServerBrowser
 @property  <HAPAccessoryServerBrowserDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSMutableArray *servers
 @property  NSDictionary *demoData
 @property  BOOL accessoryPaired

  // instance methods
  -[HMDAccessoryServerBrowserDemo linkType]
  -[HMDAccessoryServerBrowserDemo stopDiscoveringAccessoryServers]
  -[HMDAccessoryServerBrowserDemo setDelegate:]
  -[HMDAccessoryServerBrowserDemo startDiscoveringAccessoryServers]
  -[HMDAccessoryServerBrowserDemo delegate]
  -[HMDAccessoryServerBrowserDemo setDelegateQueue:]
  -[HMDAccessoryServerBrowserDemo .cxx_destruct]
  -[HMDAccessoryServerBrowserDemo delegateQueue]
  -[HMDAccessoryServerBrowserDemo setDelegate:queue:]
  -[HMDAccessoryServerBrowserDemo _delegateRespondsToSelector:]
  -[HMDAccessoryServerBrowserDemo discoverAccessoryServerWithIdentifier:]
  -[HMDAccessoryServerBrowserDemo servers]
  -[HMDAccessoryServerBrowserDemo discoverServer]
  -[HMDAccessoryServerBrowserDemo loadDemoData:finalized:]
  -[HMDAccessoryServerBrowserDemo appendDemoData:]
  -[HMDAccessoryServerBrowserDemo resetDemoAccessory:]
  -[HMDAccessoryServerBrowserDemo _handleTestAccessorySetValue:]
  -[HMDAccessoryServerBrowserDemo _handleTestAccessorySetReachability:]
  -[HMDAccessoryServerBrowserDemo _handleTestAccessoryGenerateNotification:]
  -[HMDAccessoryServerBrowserDemo _handleTestAccessoryReadValue:]
  -[HMDAccessoryServerBrowserDemo _handleTestModeConfigRequest:]
  -[HMDAccessoryServerBrowserDemo setServers:]
  -[HMDAccessoryServerBrowserDemo demoData]
  -[HMDAccessoryServerBrowserDemo setDemoData:]
  -[HMDAccessoryServerBrowserDemo accessoryPaired]
  -[HMDAccessoryServerBrowserDemo setAccessoryPaired:]


HMDSettingTransaction : NSObject <HMDSettingTransaction>
 @property  NSString *transactionLabel
 @property  NSMutableSet *updateModels
 @property  NSMutableSet *removeUUIDs
 @property  BOOL initialCreation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDSettingTransaction addModel:]
  -[HMDSettingTransaction .cxx_destruct]
  -[HMDSettingTransaction addSettingModel:]
  -[HMDSettingTransaction removeModelWithIdentifier:]
  -[HMDSettingTransaction initWithTransactionLabel:]
  -[HMDSettingTransaction initForInitialCreationWithTransactionLabel:]
  -[HMDSettingTransaction addModelToBeUpdated:]
  -[HMDSettingTransaction transactionLabel]
  -[HMDSettingTransaction updateModels]
  -[HMDSettingTransaction removeUUIDs]
  -[HMDSettingTransaction initialCreation]


HMDUserSettingsBackingStoreController : NSObject <HMBLocalZoneModelObserver, HMFLogging, HMDCloudShareParticipantsManagerDataSource, HMDCloudShareParticipantsManagerDelegate, HMDCloudShareMessengerDelegate, HMDDatabaseDelegate, HMDSettingsBackingStoreController>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *zoneName
 @property  <HMDDatabase> *database
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDCloudShareMessenger *shareMessenger
 @property  HMDCloudShareParticipantsManager *participantsManager
 @property  HMBCloudZone *cloudZone
 @property  HMBLocalZone *localZone
 @property  long long runState
 @property  long long logEventRunState
 @property  <HMDSettingTransactionReceiverProtocol> *transactionReceiver
 @property  <HMDAssistantAccessControlModelUpdateReceiver> *assistantAccessControlModelUpdateReceiver
 @property  NSUUID *assistantAccessControlModelID
 @property  <HMDMediaContentProfileAccessControlModelUpdateReceiver> *mediaContentProfileAccessControlModelUpdateReceiver
 @property  NSUUID *mediaContentProfileAccessControlModelID
 @property  NSUUID *userListeningHistoryUpdateModelID
 @property  <HMDUserListeningHistoryUpdateControlModelUpdateReceiver> *userListeningHistoryUpdateControlModelUpdateReceiver
 @property  NSUUID *userSupportsAutomaticHH2MigrationModelID
 @property  <HMDUserSupportsAutomaticHH2MigrationModelUpdateReceiver> *userSupportsAutomaticHH2MigrationModelUpdateReceiver
 @property  NSUUID *sharedUserDataModelUpdateModelID
 @property  <HMDSharedUserDataModelUpdateReceiver> *sharedUserDataModelUpdateReceiver
 @property  <HMDUserSettingsBackingStoreControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserSettingsBackingStoreController logCategory]

  // instance methods
  -[HMDUserSettingsBackingStoreController setRunState:]
  -[HMDUserSettingsBackingStoreController runState]
  -[HMDUserSettingsBackingStoreController logIdentifier]
  -[HMDUserSettingsBackingStoreController _invalidate]
  -[HMDUserSettingsBackingStoreController clearParticipants]
  -[HMDUserSettingsBackingStoreController workQueue]
  -[HMDUserSettingsBackingStoreController delegate]
  -[HMDUserSettingsBackingStoreController zoneName]
  -[HMDUserSettingsBackingStoreController .cxx_destruct]
  -[HMDUserSettingsBackingStoreController cloudZone]
  -[HMDUserSettingsBackingStoreController localZone:didProcessModelDeletion:]
  -[HMDUserSettingsBackingStoreController localZone:didProcessModelUpdate:]
  -[HMDUserSettingsBackingStoreController database]
  -[HMDUserSettingsBackingStoreController localZone:didProcessModelCreation:]
  -[HMDUserSettingsBackingStoreController localZone]
  -[HMDUserSettingsBackingStoreController start]
  -[HMDUserSettingsBackingStoreController updateParticipants]
  -[HMDUserSettingsBackingStoreController setCloudZone:]
  -[HMDUserSettingsBackingStoreController setLocalZone:]
  -[HMDUserSettingsBackingStoreController manager:shouldShareWithUser:]
  -[HMDUserSettingsBackingStoreController logEventSubmitter]
  -[HMDUserSettingsBackingStoreController manager:didRequestSendForInvitation:toUser:]
  -[HMDUserSettingsBackingStoreController manager:didRequestSendForInvitation:toDevice:]
  -[HMDUserSettingsBackingStoreController messenger:didReceiveInvitationData:completion:]
  -[HMDUserSettingsBackingStoreController messenger:didReceiveInvitationRequestFromUser:device:]
  -[HMDUserSettingsBackingStoreController database:didCreateZoneWithName:isPrivate:]
  -[HMDUserSettingsBackingStoreController database:didRemoveZoneWithName:isPrivate:]
  -[HMDUserSettingsBackingStoreController registerForSettingsTransactions:]
  -[HMDUserSettingsBackingStoreController settingTransactionWithName:]
  -[HMDUserSettingsBackingStoreController runSettingTransaction:completion:]
  -[HMDUserSettingsBackingStoreController runSettingTransaction:waitForCloudPush:completion:]
  -[HMDUserSettingsBackingStoreController initWithDelegate:queue:zoneName:database:shareMessenger:]
  -[HMDUserSettingsBackingStoreController loadPrivateUserDataModelWithError:]
  -[HMDUserSettingsBackingStoreController loadSharedUserDataModelWithError:]
  -[HMDUserSettingsBackingStoreController loadAssistantAccessControlModelWithModelID:error:]
  -[HMDUserSettingsBackingStoreController registerForAssistantAccessControlModelUpdates:modelID:]
  -[HMDUserSettingsBackingStoreController loadMediaContentAccessControlModelWithModelID:error:]
  -[HMDUserSettingsBackingStoreController registerForMediaContentAccessControlModelUpdates:modelID:]
  -[HMDUserSettingsBackingStoreController loadUserListeningHistoryUpdateControlModelWithModelID:error:]
  -[HMDUserSettingsBackingStoreController registerForUserListeningHistoryUpdateControlModelUpdates:modelID:]
  -[HMDUserSettingsBackingStoreController loadUserSupportsAutomaticHH2MigrationModelWithModelID:error:]
  -[HMDUserSettingsBackingStoreController registerForUserSupportsAutomaticHH2MigrationModelUpdates:modelID:]
  -[HMDUserSettingsBackingStoreController registerForSharedUserDataModelUpdates:modelID:]
  -[HMDUserSettingsBackingStoreController destroyZone]
  -[HMDUserSettingsBackingStoreController registerObserverDeviceIdentifier:observerPushToken:subActivity:subjectDeviceIdentifier:]
  -[HMDUserSettingsBackingStoreController updateObserverDeviceIdentifier:observerPushToken:]
  -[HMDUserSettingsBackingStoreController deregisterObserverDeviceIdentifier:observerPushToken:subActivity:subjectDeviceIdentifier:]
  -[HMDUserSettingsBackingStoreController deregisterObserverDeviceIdentifier:]
  -[HMDUserSettingsBackingStoreController queryPushTokensForDevicesObservingSubjectDevice:subActivity:]
  -[HMDUserSettingsBackingStoreController _startWithOwnedZone]
  -[HMDUserSettingsBackingStoreController _startWithSharedZone]
  -[HMDUserSettingsBackingStoreController _didFetchZonesWithResult:isOwnedZone:error:]
  -[HMDUserSettingsBackingStoreController loadUserSettings]
  -[HMDUserSettingsBackingStoreController _updateRunState:]
  -[HMDUserSettingsBackingStoreController _updateLogEventRunState:]
  -[HMDUserSettingsBackingStoreController _sendShareInvitation:toUser:device:]
  -[HMDUserSettingsBackingStoreController _localZone:updatedModel:previousModel:options:result:]
  -[HMDUserSettingsBackingStoreController runTransaction:waitForCloudPush:completion:]
  -[HMDUserSettingsBackingStoreController shareMessenger]
  -[HMDUserSettingsBackingStoreController participantsManager]
  -[HMDUserSettingsBackingStoreController setParticipantsManager:]
  -[HMDUserSettingsBackingStoreController logEventRunState]
  -[HMDUserSettingsBackingStoreController setLogEventRunState:]
  -[HMDUserSettingsBackingStoreController transactionReceiver]
  -[HMDUserSettingsBackingStoreController setTransactionReceiver:]
  -[HMDUserSettingsBackingStoreController assistantAccessControlModelUpdateReceiver]
  -[HMDUserSettingsBackingStoreController setAssistantAccessControlModelUpdateReceiver:]
  -[HMDUserSettingsBackingStoreController assistantAccessControlModelID]
  -[HMDUserSettingsBackingStoreController setAssistantAccessControlModelID:]
  -[HMDUserSettingsBackingStoreController mediaContentProfileAccessControlModelUpdateReceiver]
  -[HMDUserSettingsBackingStoreController setMediaContentProfileAccessControlModelUpdateReceiver:]
  -[HMDUserSettingsBackingStoreController mediaContentProfileAccessControlModelID]
  -[HMDUserSettingsBackingStoreController setMediaContentProfileAccessControlModelID:]
  -[HMDUserSettingsBackingStoreController userListeningHistoryUpdateModelID]
  -[HMDUserSettingsBackingStoreController setUserListeningHistoryUpdateModelID:]
  -[HMDUserSettingsBackingStoreController userListeningHistoryUpdateControlModelUpdateReceiver]
  -[HMDUserSettingsBackingStoreController setUserListeningHistoryUpdateControlModelUpdateReceiver:]
  -[HMDUserSettingsBackingStoreController userSupportsAutomaticHH2MigrationModelID]
  -[HMDUserSettingsBackingStoreController setUserSupportsAutomaticHH2MigrationModelID:]
  -[HMDUserSettingsBackingStoreController userSupportsAutomaticHH2MigrationModelUpdateReceiver]
  -[HMDUserSettingsBackingStoreController setUserSupportsAutomaticHH2MigrationModelUpdateReceiver:]
  -[HMDUserSettingsBackingStoreController sharedUserDataModelUpdateModelID]
  -[HMDUserSettingsBackingStoreController setSharedUserDataModelUpdateModelID:]
  -[HMDUserSettingsBackingStoreController sharedUserDataModelUpdateReceiver]
  -[HMDUserSettingsBackingStoreController setSharedUserDataModelUpdateReceiver:]


HMDHTTPMessageTransport : HMDRemoteMessageTransport <HMDHTTPServerMessageTransportDelegate, HMFNetServiceBrowserDelegate, HMDHTTPClientMessageTransportDelegate>
 @property  HMDHTTPServerMessageTransport *serverTransport
 @property  HMFNetServiceBrowser *clientBrowser
 @property  NSArray *clientTransports
 @property  HMDHTTPDevice *currentDevice
 @property  BOOL serverEnabled
 @property  NSDictionary *TXTRecord
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHTTPMessageTransport protocolVersion]
  +[HMDHTTPMessageTransport shortDescription]
  +[HMDHTTPMessageTransport logCategory]
  +[HMDHTTPMessageTransport restriction]
  +[HMDHTTPMessageTransport shouldHostMessageServer]
  +[HMDHTTPMessageTransport protocolVersionSupportsExtendedMessages:]

  // instance methods
  -[HMDHTTPMessageTransport dumpState]
  -[HMDHTTPMessageTransport currentDevice]
  -[HMDHTTPMessageTransport logIdentifier]
  -[HMDHTTPMessageTransport sendMessage:completionHandler:]
  -[HMDHTTPMessageTransport setCurrentDevice:]
  -[HMDHTTPMessageTransport qualityOfService]
  -[HMDHTTPMessageTransport .cxx_destruct]
  -[HMDHTTPMessageTransport transportType]
  -[HMDHTTPMessageTransport shortDescription]
  -[HMDHTTPMessageTransport _stopServer]
  -[HMDHTTPMessageTransport descriptionWithPointer:]
  -[HMDHTTPMessageTransport netServiceBrowser:didStopBrowsingWithError:]
  -[HMDHTTPMessageTransport netServiceBrowser:didAddService:]
  -[HMDHTTPMessageTransport netServiceBrowser:didRemoveService:]
  -[HMDHTTPMessageTransport server:didStopWithError:]
  -[HMDHTTPMessageTransport TXTRecord]
  -[HMDHTTPMessageTransport setTXTRecordValue:forKey:]
  -[HMDHTTPMessageTransport removeTXTRecordValueForKey:]
  -[HMDHTTPMessageTransport canSendMessage:]
  -[HMDHTTPMessageTransport initWithAccountRegistry:]
  -[HMDHTTPMessageTransport server:didAddDevice:]
  -[HMDHTTPMessageTransport server:didRemoveDevice:]
  -[HMDHTTPMessageTransport server:didReceiveMessage:fromDevice:completionHandler:]
  -[HMDHTTPMessageTransport client:didStopWithError:]
  -[HMDHTTPMessageTransport client:didReceiveMessage:completionHandler:]
  -[HMDHTTPMessageTransport initWithAccountRegistry:clientBrowser:]
  -[HMDHTTPMessageTransport isDeviceConnected:]
  -[HMDHTTPMessageTransport _sendMessage:destination:timeout:responseHandler:]
  -[HMDHTTPMessageTransport _handleReceivedRequestMessage:fromDevice:completionHandler:]
  -[HMDHTTPMessageTransport isServerEnabled]
  -[HMDHTTPMessageTransport setServerEnabled:]
  -[HMDHTTPMessageTransport handleServerEnabled:]
  -[HMDHTTPMessageTransport serverTransport]
  -[HMDHTTPMessageTransport setServerTransport:]
  -[HMDHTTPMessageTransport deviceForHTTPDevice:]
  -[HMDHTTPMessageTransport clientTransports]
  -[HMDHTTPMessageTransport clientTransportForDevice:]
  -[HMDHTTPMessageTransport clientTransportForService:]
  -[HMDHTTPMessageTransport addClientTransport:]
  -[HMDHTTPMessageTransport removeClientTransport:]
  -[HMDHTTPMessageTransport removeAllClientTransports]
  -[HMDHTTPMessageTransport _serviceForDevice:]
  -[HMDHTTPMessageTransport configureWithDevice:]
  -[HMDHTTPMessageTransport _startServerWithDevice:]
  -[HMDHTTPMessageTransport _connectToDevice:completionHandler:]
  -[HMDHTTPMessageTransport startObservingIsPublishingForService:]
  -[HMDHTTPMessageTransport clientBrowser]


HMDDoorbellChimeNotificationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  unsigned long coreUtilsLatency
 @property  unsigned long coreUtilsDestinationCount
 @property  BOOL coordinationPathTriggered
 @property  unsigned long coordinationLatency
 @property  NSError *coordinationError
 @property  unsigned long coordinationMode
 @property  unsigned long numHomePodsWithDoorbellChimeEnabled

  // instance methods
  -[HMDDoorbellChimeNotificationLogEvent eventName]
  -[HMDDoorbellChimeNotificationLogEvent .cxx_destruct]
  -[HMDDoorbellChimeNotificationLogEvent init]
  -[HMDDoorbellChimeNotificationLogEvent serializedEvent]
  -[HMDDoorbellChimeNotificationLogEvent coreUtilsLatency]
  -[HMDDoorbellChimeNotificationLogEvent setCoreUtilsLatency:]
  -[HMDDoorbellChimeNotificationLogEvent coreUtilsDestinationCount]
  -[HMDDoorbellChimeNotificationLogEvent setCoreUtilsDestinationCount:]
  -[HMDDoorbellChimeNotificationLogEvent coordinationPathTriggered]
  -[HMDDoorbellChimeNotificationLogEvent setCoordinationPathTriggered:]
  -[HMDDoorbellChimeNotificationLogEvent coordinationLatency]
  -[HMDDoorbellChimeNotificationLogEvent setCoordinationLatency:]
  -[HMDDoorbellChimeNotificationLogEvent coordinationError]
  -[HMDDoorbellChimeNotificationLogEvent setCoordinationError:]
  -[HMDDoorbellChimeNotificationLogEvent coordinationMode]
  -[HMDDoorbellChimeNotificationLogEvent setCoordinationMode:]
  -[HMDDoorbellChimeNotificationLogEvent numHomePodsWithDoorbellChimeEnabled]
  -[HMDDoorbellChimeNotificationLogEvent setNumHomePodsWithDoorbellChimeEnabled:]


HMDAccessorySymptomHandler : HMFObject <HMFLogging, HMFMessageReceiver, HMDAccessorySymptomsDelegate, NSSecureCoding>
 @property  HMDSymptomManager *symptomManager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSSet *symptoms
 @property  NSUUID *sfDeviceIdentifier
 @property  NSUUID *accessoryUUID
 @property  NSUUID *uuid
 @property  HMDAccessory *accessory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessorySymptomHandler supportsSecureCoding]
  +[HMDAccessorySymptomHandler logCategory]

  // instance methods
  -[HMDAccessorySymptomHandler accessoryUUID]
  -[HMDAccessorySymptomHandler accessory]
  -[HMDAccessorySymptomHandler logIdentifier]
  -[HMDAccessorySymptomHandler encodeWithCoder:]
  -[HMDAccessorySymptomHandler workQueue]
  -[HMDAccessorySymptomHandler setWorkQueue:]
  -[HMDAccessorySymptomHandler uuid]
  -[HMDAccessorySymptomHandler .cxx_destruct]
  -[HMDAccessorySymptomHandler messageTargetUUID]
  -[HMDAccessorySymptomHandler messageReceiveQueue]
  -[HMDAccessorySymptomHandler msgDispatcher]
  -[HMDAccessorySymptomHandler initWithCoder:]
  -[HMDAccessorySymptomHandler symptoms]
  -[HMDAccessorySymptomHandler setMsgDispatcher:]
  -[HMDAccessorySymptomHandler sfDeviceIdentifier]
  -[HMDAccessorySymptomHandler setSymptoms:]
  -[HMDAccessorySymptomHandler configureWithWorkQueue:messageDispatcher:]
  -[HMDAccessorySymptomHandler _handleFixErrorMessage:]
  -[HMDAccessorySymptomHandler symptomManager:didChangeSymptoms:]
  -[HMDAccessorySymptomHandler symptomManager:didChangeSFDeviceIdentifier:]
  -[HMDAccessorySymptomHandler initWithAccessory:symptoms:]
  -[HMDAccessorySymptomHandler initWithAccessory:symptoms:symptomManager:]
  -[HMDAccessorySymptomHandler handleAccessoryDeviceUpdated]
  -[HMDAccessorySymptomHandler updateSymptoms:]
  -[HMDAccessorySymptomHandler _updateStateWithNewSymptoms:]
  -[HMDAccessorySymptomHandler _sendStatusUpdate]
  -[HMDAccessorySymptomHandler _updateStateWithNewSFDeviceIdentifier:]
  -[HMDAccessorySymptomHandler _registerMessages]
  -[HMDAccessorySymptomHandler _filteredSymptomsForSymptoms:]
  -[HMDAccessorySymptomHandler symptomManager]
  -[HMDAccessorySymptomHandler setSfDeviceIdentifier:]


HMDSettingMessageMapper : HMFObject <HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDSettingMessageMapper identifier]
  -[HMDSettingMessageMapper .cxx_destruct]
  -[HMDSettingMessageMapper messageTargetUUID]
  -[HMDSettingMessageMapper queue]
  -[HMDSettingMessageMapper messageReceiveQueue]
  -[HMDSettingMessageMapper messageDispatcher]
  -[HMDSettingMessageMapper initWithIdentifier:queue:]
  -[HMDSettingMessageMapper setMessageDispatcher:]
  -[HMDSettingMessageMapper registerForMessage:policies:messageDispatcher:messageHandler:]
  -[HMDSettingMessageMapper deregisterFromAllMessages]


HMDVideoStreamInterface : HMDStreamInterface <AVCVideoStreamDelegate, HMDVideoStreamReconfigureDelegate>
 @property  BOOL rtcpEnabled
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutIntervalSec
 @property  double rtcpTimeOutIntervalSec
 @property  double rtcpSendIntervalSec
 @property  NSNumber *syncSource
 @property  NSNumber *streamToken
 @property  HMDVideoStreamReconfigure *videoStreamReconfigure
 @property  AVCVideoStream *videoStream
 @property  <HMDVideoStreamInterfaceDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *lastFrameDelegateQueue
 @property  <HMDVideoStreamLastDecodedFrameDelegate> *lastFrameDelegate
 @property  HMFOSTransaction *snapshotDataTrasaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDVideoStreamInterface logCategory]

  // instance methods
  -[HMDVideoStreamInterface logIdentifier]
  -[HMDVideoStreamInterface delegate]
  -[HMDVideoStreamInterface dealloc]
  -[HMDVideoStreamInterface .cxx_destruct]
  -[HMDVideoStreamInterface streamDidStop:]
  -[HMDVideoStreamInterface captureSnapshot]
  -[HMDVideoStreamInterface streamToken]
  -[HMDVideoStreamInterface stopStream]
  -[HMDVideoStreamInterface setRtcpTimeOutIntervalSec:]
  -[HMDVideoStreamInterface isRTPTimeOutEnabled]
  -[HMDVideoStreamInterface setRtcpEnabled:]
  -[HMDVideoStreamInterface setRtpTimeOutIntervalSec:]
  -[HMDVideoStreamInterface setRtcpSendInterval:]
  -[HMDVideoStreamInterface setRtpTimeOutEnabled:]
  -[HMDVideoStreamInterface setRtcpSendIntervalSec:]
  -[HMDVideoStreamInterface setRtcpTimeOutEnabled:]
  -[HMDVideoStreamInterface stream:didStart:error:]
  -[HMDVideoStreamInterface streamDidRTPTimeOut:]
  -[HMDVideoStreamInterface streamDidRTCPTimeOut:]
  -[HMDVideoStreamInterface streamDidServerDie:]
  -[HMDVideoStreamInterface stream:didUpdateVideoConfiguration:error:]
  -[HMDVideoStreamInterface stream:didGetLastDecodedFrame:]
  -[HMDVideoStreamInterface stream:downlinkQualityDidChange:]
  -[HMDVideoStreamInterface isRTCPEnabled]
  -[HMDVideoStreamInterface isRTCPTimeOutEnabled]
  -[HMDVideoStreamInterface rtpTimeOutIntervalSec]
  -[HMDVideoStreamInterface rtcpTimeOutIntervalSec]
  -[HMDVideoStreamInterface rtcpSendIntervalSec]
  -[HMDVideoStreamInterface videoStreamReconfigureDidNetworkImprove:]
  -[HMDVideoStreamInterface videoStreamReconfigureDidNetworkDeteriorate:]
  -[HMDVideoStreamInterface updateReconfigurationMode:]
  -[HMDVideoStreamInterface initWithSessionID:workQueue:delegate:delegateQueue:sessionHandler:localNetworkConfig:]
  -[HMDVideoStreamInterface syncSource]
  -[HMDVideoStreamInterface _createLocalSocketWithNetworkConfig:]
  -[HMDVideoStreamInterface _initializeStreamRemoteDestinationReceiver:]
  -[HMDVideoStreamInterface _initializeStreamRemoteSocketReceiver:]
  -[HMDVideoStreamInterface _initializeStreamRemoteSender:localNetworkConfig:]
  -[HMDVideoStreamInterface _initializeLocalStreamWithLocalNetworkConfig:]
  -[HMDVideoStreamInterface startStreamWithConfig:]
  -[HMDVideoStreamInterface _startStreamWithConfig:]
  -[HMDVideoStreamInterface updateStreamConfiguration:]
  -[HMDVideoStreamInterface setSnapshotDelegate:delegateQueue:]
  -[HMDVideoStreamInterface _callStarted:]
  -[HMDVideoStreamInterface _callStopped:]
  -[HMDVideoStreamInterface _callNetworkImproved]
  -[HMDVideoStreamInterface _callNetworkDeteriorated]
  -[HMDVideoStreamInterface _callDidUpdateConfiguration]
  -[HMDVideoStreamInterface _callDidGetLastDecodedFrame:]
  -[HMDVideoStreamInterface videoStreamReconfigure]
  -[HMDVideoStreamInterface videoStream]
  -[HMDVideoStreamInterface setVideoStream:]
  -[HMDVideoStreamInterface lastFrameDelegateQueue]
  -[HMDVideoStreamInterface setLastFrameDelegateQueue:]
  -[HMDVideoStreamInterface lastFrameDelegate]
  -[HMDVideoStreamInterface setLastFrameDelegate:]
  -[HMDVideoStreamInterface snapshotDataTrasaction]
  -[HMDVideoStreamInterface setSnapshotDataTrasaction:]


HMDBackingStoreModelObjectStorageInfoDeprecatedField : HMFObject

HMDBackingStoreModelObjectStorageInfo : HMFObject
 @property  HMFVersion *readOnly
 @property  HMFVersion *unavailable
 @property  Class classObj
 @property  unsigned long logging
 @property  id defaultValue
 @property  BOOL defaultValueSet
 @property  NSSet *decodeClasses

  // class methods
  +[HMDBackingStoreModelObjectStorageInfo deprecatedField]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:logging:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:logging:readOnly:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:logging:readOnly:unavailable:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:defaultValue:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:defaultValue:logging:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:defaultValue:logging:readOnly:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:defaultValue:logging:readOnly:unavailable:]
  +[HMDBackingStoreModelObjectStorageInfo infoWithClass:additionalDecodeClasses:]

  // instance methods
  -[HMDBackingStoreModelObjectStorageInfo defaultValue]
  -[HMDBackingStoreModelObjectStorageInfo setReadOnly:]
  -[HMDBackingStoreModelObjectStorageInfo .cxx_destruct]
  -[HMDBackingStoreModelObjectStorageInfo readOnly]
  -[HMDBackingStoreModelObjectStorageInfo setUnavailable:]
  -[HMDBackingStoreModelObjectStorageInfo classObj]
  -[HMDBackingStoreModelObjectStorageInfo logging]
  -[HMDBackingStoreModelObjectStorageInfo unavailable]
  -[HMDBackingStoreModelObjectStorageInfo initWithClass:logging:readOnly:unavailable:defaultSet:defaultValue:additonalDecodeClasses:]
  -[HMDBackingStoreModelObjectStorageInfo defaultValueSet]
  -[HMDBackingStoreModelObjectStorageInfo decodeClasses]


HMDStreamingManager : HMFObject <HMDVideoStreamInterfaceDelegate, HMDAudioStreamInterfaceDelegate, AVCRemoteVideoClientDelegate, HMFLogging>
 @property  HMDCameraStreamSessionID *sessionID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDStreamingManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  HMDCameraStreamSnapshotHandler *streamSnapshotHandler
 @property  NSNumber *slotIdentifier
 @property  NSNumber *aspectRatio
 @property  AVCRemoteVideoClient *avcRemoteVideo
 @property  unsigned long audioStreamSetting
 @property  HMDVideoStreamInterface *videoStreamInterface
 @property  HMDAudioStreamInterface *audioStreamInterface
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDStreamingManager logCategory]

  // instance methods
  -[HMDStreamingManager logIdentifier]
  -[HMDStreamingManager setDelegate:]
  -[HMDStreamingManager aspectRatio]
  -[HMDStreamingManager sessionID]
  -[HMDStreamingManager workQueue]
  -[HMDStreamingManager delegate]
  -[HMDStreamingManager dealloc]
  -[HMDStreamingManager .cxx_destruct]
  -[HMDStreamingManager delegateQueue]
  -[HMDStreamingManager setAspectRatio:]
  -[HMDStreamingManager remoteVideoClientDidReceiveFirstFrame:]
  -[HMDStreamingManager remoteVideoClientDidReceiveLastFrame:]
  -[HMDStreamingManager remoteVideoServerDidDie:]
  -[HMDStreamingManager remoteVideoClient:remoteVideoAttributesDidChange:]
  -[HMDStreamingManager audioStreamSetting]
  -[HMDStreamingManager slotIdentifier]
  -[HMDStreamingManager updateReconfigurationMode:]
  -[HMDStreamingManager videoStream:didStart:]
  -[HMDStreamingManager videoStream:didStop:]
  -[HMDStreamingManager videoStreamDidNetworkImprove:]
  -[HMDStreamingManager videoStreamDidNetworkDeteriorate:]
  -[HMDStreamingManager videoStreamDidUpdateConfiguration:]
  -[HMDStreamingManager updateStreamConfiguration:]
  -[HMDStreamingManager _callNetworkImproved]
  -[HMDStreamingManager _callNetworkDeteriorated]
  -[HMDStreamingManager audioStream:didStart:]
  -[HMDStreamingManager audioStream:didPause:]
  -[HMDStreamingManager audioStream:didResume:]
  -[HMDStreamingManager audioStream:didStop:]
  -[HMDStreamingManager initWithSessionID:streamSnapshotHandler:workQueue:delegate:delegateQueue:localVideoNetworkConfig:localAudioNetworkConfig:sessionHandler:]
  -[HMDStreamingManager startStreamWithVideoConfig:audioConfig:]
  -[HMDStreamingManager _startStreamWithVideoConfig:audioConfig:]
  -[HMDStreamingManager _stopStream]
  -[HMDStreamingManager updateAudioSetting:]
  -[HMDStreamingManager updateAudioVolume:callback:]
  -[HMDStreamingManager _callStreamStarted:]
  -[HMDStreamingManager _callReceivedFirstFrame]
  -[HMDStreamingManager _callRelayStarted]
  -[HMDStreamingManager _callStreamStoppedWithError:]
  -[HMDStreamingManager _callConfigurationUpdated]
  -[HMDStreamingManager setSlotIdentifier:]
  -[HMDStreamingManager videoStreamInterface]
  -[HMDStreamingManager audioStreamInterface]
  -[HMDStreamingManager streamSnapshotHandler]
  -[HMDStreamingManager avcRemoteVideo]
  -[HMDStreamingManager setAvcRemoteVideo:]


HMDUserPhotosPersonDataManager : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *homeUUID
 @property  NSUUID *userUUID
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMBLocalZone *localZone
 @property  BOOL supportsFaceClassification
 @property  HMDUser *user
 @property  HMDPhotosPersonManagerSettingsModel *settingsModel
 @property  HMDPhotosPersonManager *personManager
 @property  HMDCloudPhotosSettingObserver *cloudPhotosSettingObserver
 @property  @? personManagerFactory
 @property  HMPhotosPersonManagerSettings *settings
 @property  NSUUID *zoneUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDUserPhotosPersonDataManager defaultSettings]
  +[HMDUserPhotosPersonDataManager logCategory]
  +[HMDUserPhotosPersonDataManager settingsModelUUIDWithUUID:]

  // instance methods
  -[HMDUserPhotosPersonDataManager setUser:]
  -[HMDUserPhotosPersonDataManager configure]
  -[HMDUserPhotosPersonDataManager logIdentifier]
  -[HMDUserPhotosPersonDataManager workQueue]
  -[HMDUserPhotosPersonDataManager userUUID]
  -[HMDUserPhotosPersonDataManager user]
  -[HMDUserPhotosPersonDataManager .cxx_destruct]
  -[HMDUserPhotosPersonDataManager messageTargetUUID]
  -[HMDUserPhotosPersonDataManager settings]
  -[HMDUserPhotosPersonDataManager homeUUID]
  -[HMDUserPhotosPersonDataManager localZone]
  -[HMDUserPhotosPersonDataManager messageReceiveQueue]
  -[HMDUserPhotosPersonDataManager messageDispatcher]
  -[HMDUserPhotosPersonDataManager supportsFaceClassification]
  -[HMDUserPhotosPersonDataManager personManager]
  -[HMDUserPhotosPersonDataManager setPersonManager:]
  -[HMDUserPhotosPersonDataManager handleUpdatePersonManagerSettingsMessage:]
  -[HMDUserPhotosPersonDataManager handleUserCamerasAccessLevelDidChangeNotification:]
  -[HMDUserPhotosPersonDataManager handleUserRemoteAccessDidChangeNotification:]
  -[HMDUserPhotosPersonDataManager handleHomePersonManagerSettingsDidChangeNotification:]
  -[HMDUserPhotosPersonDataManager initWithUser:messageDispatcher:localZone:workQueue:]
  -[HMDUserPhotosPersonDataManager initWithUser:messageDispatcher:localZone:workQueue:supportsFaceClassification:cloudPhotosSettingObserver:]
  -[HMDUserPhotosPersonDataManager zoneUUID]
  -[HMDUserPhotosPersonDataManager recoverDueToUUIDChangeFromOldUUID:]
  -[HMDUserPhotosPersonDataManager removeCloudData]
  -[HMDUserPhotosPersonDataManager updateSettingsModelWithSettings:]
  -[HMDUserPhotosPersonDataManager handleUpdatedSettingsModel:]
  -[HMDUserPhotosPersonDataManager settingsModelUUID]
  -[HMDUserPhotosPersonDataManager persistedSettingsModel]
  -[HMDUserPhotosPersonDataManager photosPersonManagerZoneUUIDForAnyOtherHomeCurrentUser]
  -[HMDUserPhotosPersonDataManager configurePhotosPersonManagerWithSettingsModel:]
  -[HMDUserPhotosPersonDataManager updateSettingsForCurrentCameraClipsAccess]
  -[HMDUserPhotosPersonDataManager removeCloudDataForZoneUUID:]
  -[HMDUserPhotosPersonDataManager settingsModel]
  -[HMDUserPhotosPersonDataManager setSettingsModel:]
  -[HMDUserPhotosPersonDataManager cloudPhotosSettingObserver]
  -[HMDUserPhotosPersonDataManager personManagerFactory]
  -[HMDUserPhotosPersonDataManager setPersonManagerFactory:]


HMDHomeEventsGenerated : NSObject
  // class methods
  +[HMDHomeEventsGenerated upstreamTopicsForTopic:]
  +[HMDHomeEventsGenerated topicMap]
  +[HMDHomeEventsGenerated allTopics]
  +[HMDHomeEventsGenerated indexTopicForTopicSuffix:indexName:]
  +[HMDHomeEventsGenerated homeInfoIndexForHomeUUID:]
  +[HMDHomeEventsGenerated isHomeInfoIndexTopic:homeUUID:]
  +[HMDHomeEventsGenerated clientIndexToHomeTopicsForHomeUUID:]
  +[HMDHomeEventsGenerated forwardingTopicsWithTopics:forHomeRouterWithUUID:]
  +[HMDHomeEventsGenerated upstreamClientTopicForTopic:]
  +[HMDHomeEventsGenerated upstreamHomeTopicForTopic:homeUUID:]
  +[HMDHomeEventsGenerated upstreamHomeAndAccessoryTopicsForTopic:homeUUID:accessoryUUID:]
  +[HMDHomeEventsGenerated accessoryTopicsForAccessory:homeUUID:]
  +[HMDHomeEventsGenerated expandedTopicsWithTopics:homeManager:]


HMDWatchSync : HMFObject <NSCopying>
 @property  unsigned long syncOption
 @property  NSUUID *identifier
 @property  BOOL inProgress
 @property  BOOL isRetry

  // instance methods
  -[HMDWatchSync identifier]
  -[HMDWatchSync setInProgress:]
  -[HMDWatchSync attributeDescriptions]
  -[HMDWatchSync .cxx_destruct]
  -[HMDWatchSync copyWithZone:]
  -[HMDWatchSync inProgress]
  -[HMDWatchSync isEqual:]
  -[HMDWatchSync isRetry]
  -[HMDWatchSync initWithIdentifier:syncOption:inProgress:isRetry:]
  -[HMDWatchSync initWithSyncOption:]
  -[HMDWatchSync initWithIdentifier:syncOption:]
  -[HMDWatchSync syncOption]
  -[HMDWatchSync setSyncOption:]


HMDWatchSyncRetryContext : HMFObject <NSCopying>
 @property  double initialRetryInterval
 @property  long long maximumRetryAttempts
 @property  HMDWatchSync *watchSync
 @property  NSString *watchIdentifier
 @property  long long retryAttempt
 @property  double retryInterval

  // class methods
  +[HMDWatchSyncRetryContext createWithWatchIdentifier:watchSync:retryAttempt:]

  // instance methods
  -[HMDWatchSyncRetryContext attributeDescriptions]
  -[HMDWatchSyncRetryContext .cxx_destruct]
  -[HMDWatchSyncRetryContext copyWithZone:]
  -[HMDWatchSyncRetryContext initWithWatchIdentifier:watchSync:retryAttempt:initialRetryInterval:maximumRetryAttempts:]
  -[HMDWatchSyncRetryContext retryInterval]
  -[HMDWatchSyncRetryContext watchSync]
  -[HMDWatchSyncRetryContext watchIdentifier]
  -[HMDWatchSyncRetryContext retryAttempt]
  -[HMDWatchSyncRetryContext initialRetryInterval]
  -[HMDWatchSyncRetryContext maximumRetryAttempts]


HMDBackingStoreCacheZone : HMFObject
 @property  NSMutableArray *actualGroups
 @property  long long zoneID
 @property  NSString *zoneName
 @property  NSArray *groups

  // instance methods
  -[HMDBackingStoreCacheZone groups]
  -[HMDBackingStoreCacheZone zoneID]
  -[HMDBackingStoreCacheZone zoneName]
  -[HMDBackingStoreCacheZone .cxx_destruct]
  -[HMDBackingStoreCacheZone dumpDebug]
  -[HMDBackingStoreCacheZone initWithZoneID:name:]
  -[HMDBackingStoreCacheZone actualGroups]
  -[HMDBackingStoreCacheZone setActualGroups:]


HMDBackingStoreCacheCreateZoneOperation : HMDBackingStoreOperation
 @property  NSString *zoneName
 @property  @? creationBlock

  // instance methods
  -[HMDBackingStoreCacheCreateZoneOperation setCreationBlock:]
  -[HMDBackingStoreCacheCreateZoneOperation creationBlock]
  -[HMDBackingStoreCacheCreateZoneOperation zoneName]
  -[HMDBackingStoreCacheCreateZoneOperation .cxx_destruct]
  -[HMDBackingStoreCacheCreateZoneOperation setZoneName:]
  -[HMDBackingStoreCacheCreateZoneOperation initWithZoneName:creationBlock:]
  -[HMDBackingStoreCacheCreateZoneOperation mainReturningError]


HMDBackingStoreCacheFetchZonesOperation : HMDBackingStoreOperation
 @property  @? fetchResult

  // instance methods
  -[HMDBackingStoreCacheFetchZonesOperation setFetchResult:]
  -[HMDBackingStoreCacheFetchZonesOperation .cxx_destruct]
  -[HMDBackingStoreCacheFetchZonesOperation initWithFetchResult:]
  -[HMDBackingStoreCacheFetchZonesOperation fetchResult]
  -[HMDBackingStoreCacheFetchZonesOperation mainReturningError]


HMDBackingStoreCacheDeleteZoneOperation : HMDBackingStoreOperation
 @property  @? creationBlock
 @property  HMDBackingStoreCacheZone *zone

  // instance methods
  -[HMDBackingStoreCacheDeleteZoneOperation setCreationBlock:]
  -[HMDBackingStoreCacheDeleteZoneOperation creationBlock]
  -[HMDBackingStoreCacheDeleteZoneOperation .cxx_destruct]
  -[HMDBackingStoreCacheDeleteZoneOperation zone]
  -[HMDBackingStoreCacheDeleteZoneOperation setZone:]
  -[HMDBackingStoreCacheDeleteZoneOperation mainReturningError]
  -[HMDBackingStoreCacheDeleteZoneOperation initWithZone:resultBlock:]


HMDBackingStoreCacheGroup : HMFObject
 @property  long long groupID
 @property  CKServerChangeToken *serverChangeToken
 @property  CKRecordZoneSubscription *subscription
 @property  HMDBackingStoreCacheZone *zone
 @property  NSString *rootRecordName
 @property  NSString *subscriptionName
 @property  NSString *owner

  // instance methods
  -[HMDBackingStoreCacheGroup owner]
  -[HMDBackingStoreCacheGroup subscription]
  -[HMDBackingStoreCacheGroup setGroupID:]
  -[HMDBackingStoreCacheGroup setSubscription:]
  -[HMDBackingStoreCacheGroup groupID]
  -[HMDBackingStoreCacheGroup .cxx_destruct]
  -[HMDBackingStoreCacheGroup serverChangeToken]
  -[HMDBackingStoreCacheGroup setServerChangeToken:]
  -[HMDBackingStoreCacheGroup zone]
  -[HMDBackingStoreCacheGroup dumpDebug]
  -[HMDBackingStoreCacheGroup initWithGroupID:zone:rootRecord:serverChangeToken:subscriptionName:owner:subscription:]
  -[HMDBackingStoreCacheGroup rootRecordName]
  -[HMDBackingStoreCacheGroup subscriptionName]


HMDBackingStoreCacheCreateGroupOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *record
 @property  @? creationBlock

  // instance methods
  -[HMDBackingStoreCacheCreateGroupOperation setCreationBlock:]
  -[HMDBackingStoreCacheCreateGroupOperation creationBlock]
  -[HMDBackingStoreCacheCreateGroupOperation setRecord:]
  -[HMDBackingStoreCacheCreateGroupOperation record]
  -[HMDBackingStoreCacheCreateGroupOperation .cxx_destruct]
  -[HMDBackingStoreCacheCreateGroupOperation mainReturningError]
  -[HMDBackingStoreCacheCreateGroupOperation initWithZone:owner:rootRecord:subscriptionName:subscription:creationBlock:]


HMDBackingStoreCacheUpdateGroupTokenOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *record
 @property  CKServerChangeToken *serverChangeToken

  // instance methods
  -[HMDBackingStoreCacheUpdateGroupTokenOperation setRecord:]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation record]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation .cxx_destruct]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation serverChangeToken]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation setServerChangeToken:]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation mainReturningError]
  -[HMDBackingStoreCacheUpdateGroupTokenOperation initWithGroup:serverChangeToken:resultBlock:]


HMDBackingStoreCacheUpdateGroupSubscriptionOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *record
 @property  CKRecordZoneSubscription *subscription

  // instance methods
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation setRecord:]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation subscription]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation setSubscription:]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation record]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation .cxx_destruct]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation mainReturningError]
  -[HMDBackingStoreCacheUpdateGroupSubscriptionOperation initWithGroup:subscription:resultBlock:]


HMDBackingStoreCacheUpdateRecordOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  NSString *recordName
 @property  CKRecord *record
 @property  NSData *data
 @property  HMDBackingStoreModelObject *model
 @property  unsigned long encoding

  // instance methods
  -[HMDBackingStoreCacheUpdateRecordOperation model]
  -[HMDBackingStoreCacheUpdateRecordOperation encoding]
  -[HMDBackingStoreCacheUpdateRecordOperation record]
  -[HMDBackingStoreCacheUpdateRecordOperation .cxx_destruct]
  -[HMDBackingStoreCacheUpdateRecordOperation group]
  -[HMDBackingStoreCacheUpdateRecordOperation recordName]
  -[HMDBackingStoreCacheUpdateRecordOperation data]
  -[HMDBackingStoreCacheUpdateRecordOperation mainReturningError]
  -[HMDBackingStoreCacheUpdateRecordOperation initWithGroup:name:record:data:encoding:model:resultBlock:]
  -[HMDBackingStoreCacheUpdateRecordOperation initWithGroup:record:data:encoding:resultBlock:]
  -[HMDBackingStoreCacheUpdateRecordOperation initWithGroup:record:resultBlock:]
  -[HMDBackingStoreCacheUpdateRecordOperation initWithGroup:name:model:resultBlock:]


HMDBackingStoreCacheDeleteRecordOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  NSArray *recordNames

  // instance methods
  -[HMDBackingStoreCacheDeleteRecordOperation .cxx_destruct]
  -[HMDBackingStoreCacheDeleteRecordOperation group]
  -[HMDBackingStoreCacheDeleteRecordOperation setGroup:]
  -[HMDBackingStoreCacheDeleteRecordOperation recordNames]
  -[HMDBackingStoreCacheDeleteRecordOperation mainReturningError]
  -[HMDBackingStoreCacheDeleteRecordOperation initWithGroup:recordNames:resultBlock:]
  -[HMDBackingStoreCacheDeleteRecordOperation setRecordNames:]


HMDBackingStoreCacheFetchRecordResult : HMFObject
 @property  HMDBackingStoreCacheGroup *group
 @property  NSData *data
 @property  CKRecord *record
 @property  unsigned long encoding
 @property  NSUUID *uuid

  // instance methods
  -[HMDBackingStoreCacheFetchRecordResult encoding]
  -[HMDBackingStoreCacheFetchRecordResult record]
  -[HMDBackingStoreCacheFetchRecordResult uuid]
  -[HMDBackingStoreCacheFetchRecordResult .cxx_destruct]
  -[HMDBackingStoreCacheFetchRecordResult group]
  -[HMDBackingStoreCacheFetchRecordResult data]
  -[HMDBackingStoreCacheFetchRecordResult initWithGroup:record:data:encoding:uuid:]


HMDBackingStoreCacheFetchGroupInformation : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  @? fetchResult

  // instance methods
  -[HMDBackingStoreCacheFetchGroupInformation setFetchResult:]
  -[HMDBackingStoreCacheFetchGroupInformation .cxx_destruct]
  -[HMDBackingStoreCacheFetchGroupInformation fetchResult]
  -[HMDBackingStoreCacheFetchGroupInformation group]
  -[HMDBackingStoreCacheFetchGroupInformation setGroup:]
  -[HMDBackingStoreCacheFetchGroupInformation mainReturningError]
  -[HMDBackingStoreCacheFetchGroupInformation initWithGroup:fetchResult:]


HMDBackingStoreCacheFetchRecords : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  @? fetchResult
 @property  NSArray *recordNames
 @property  NSArray *uuids
 @property  NSArray *parentUuids
 @property  BOOL recursive

  // instance methods
  -[HMDBackingStoreCacheFetchRecords recursive]
  -[HMDBackingStoreCacheFetchRecords setFetchResult:]
  -[HMDBackingStoreCacheFetchRecords setRecursive:]
  -[HMDBackingStoreCacheFetchRecords .cxx_destruct]
  -[HMDBackingStoreCacheFetchRecords setUuids:]
  -[HMDBackingStoreCacheFetchRecords fetchResult]
  -[HMDBackingStoreCacheFetchRecords uuids]
  -[HMDBackingStoreCacheFetchRecords group]
  -[HMDBackingStoreCacheFetchRecords setGroup:]
  -[HMDBackingStoreCacheFetchRecords recordNames]
  -[HMDBackingStoreCacheFetchRecords mainReturningError]
  -[HMDBackingStoreCacheFetchRecords setRecordNames:]
  -[HMDBackingStoreCacheFetchRecords initWithGroup:uuids:fetchResult:]
  -[HMDBackingStoreCacheFetchRecords initWithGroup:parentUuids:fetchResult:]
  -[HMDBackingStoreCacheFetchRecords initWithGroup:records:fetchResult:]
  -[HMDBackingStoreCacheFetchRecords parentUuids]
  -[HMDBackingStoreCacheFetchRecords setParentUuids:]


HMDBackingStoreCacheFetchModelObjectResult : HMFObject
 @property  CKRecord *record
 @property  HMDBackingStoreModelObject *object

  // instance methods
  -[HMDBackingStoreCacheFetchModelObjectResult record]
  -[HMDBackingStoreCacheFetchModelObjectResult .cxx_destruct]
  -[HMDBackingStoreCacheFetchModelObjectResult object]
  -[HMDBackingStoreCacheFetchModelObjectResult initWithRecord:data:encoding:error:]


HMDBackingStoreCacheFetchModelObjects : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  @? fetchResult
 @property  NSArray *uuids
 @property  NSArray *names
 @property  NSUUID *parent
 @property  NSString *type

  // instance methods
  -[HMDBackingStoreCacheFetchModelObjects setParent:]
  -[HMDBackingStoreCacheFetchModelObjects setNames:]
  -[HMDBackingStoreCacheFetchModelObjects names]
  -[HMDBackingStoreCacheFetchModelObjects setFetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects type]
  -[HMDBackingStoreCacheFetchModelObjects .cxx_destruct]
  -[HMDBackingStoreCacheFetchModelObjects setType:]
  -[HMDBackingStoreCacheFetchModelObjects setUuids:]
  -[HMDBackingStoreCacheFetchModelObjects fetchResult]
  -[HMDBackingStoreCacheFetchModelObjects uuids]
  -[HMDBackingStoreCacheFetchModelObjects group]
  -[HMDBackingStoreCacheFetchModelObjects parent]
  -[HMDBackingStoreCacheFetchModelObjects setGroup:]
  -[HMDBackingStoreCacheFetchModelObjects mainReturningError]
  -[HMDBackingStoreCacheFetchModelObjects initWithGroup:uuids:fetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects initWithUUIDs:fetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects initWithNames:fetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects initWithGroup:names:fetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects initWithParent:type:fetchResult:]
  -[HMDBackingStoreCacheFetchModelObjects initWithGroup:parent:type:fetchResult:]


HMDBackingStoreCacheFetchRecordMappingResult : HMFObject <HMDBackingStoreRecordMapping>
 @property  HMDBackingStoreCacheGroup *group
 @property  NSString *recordName
 @property  NSUUID *uuid
 @property  NSUUID *parentUuid
 @property  NSString *type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBackingStoreCacheFetchRecordMappingResult type]
  -[HMDBackingStoreCacheFetchRecordMappingResult uuid]
  -[HMDBackingStoreCacheFetchRecordMappingResult .cxx_destruct]
  -[HMDBackingStoreCacheFetchRecordMappingResult group]
  -[HMDBackingStoreCacheFetchRecordMappingResult recordName]
  -[HMDBackingStoreCacheFetchRecordMappingResult parentUuid]
  -[HMDBackingStoreCacheFetchRecordMappingResult initWithGroup:recordName:uuid:parentUuid:type:]


HMDBackingStoreCacheFetchRecordMappings : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  @? fetchResult

  // instance methods
  -[HMDBackingStoreCacheFetchRecordMappings setFetchResult:]
  -[HMDBackingStoreCacheFetchRecordMappings .cxx_destruct]
  -[HMDBackingStoreCacheFetchRecordMappings fetchResult]
  -[HMDBackingStoreCacheFetchRecordMappings group]
  -[HMDBackingStoreCacheFetchRecordMappings setGroup:]
  -[HMDBackingStoreCacheFetchRecordMappings mainReturningError]
  -[HMDBackingStoreCacheFetchRecordMappings initWithGroup:fetchResult:]


HMDBackingStoreCacheFetchMigratedResult : HMDBackingStoreOperation
 @property  HMDBackingStoreCacheGroup *group
 @property  BOOL update
 @property  BOOL migration
 @property  @? fetchResult

  // instance methods
  -[HMDBackingStoreCacheFetchMigratedResult setFetchResult:]
  -[HMDBackingStoreCacheFetchMigratedResult .cxx_destruct]
  -[HMDBackingStoreCacheFetchMigratedResult update]
  -[HMDBackingStoreCacheFetchMigratedResult migration]
  -[HMDBackingStoreCacheFetchMigratedResult fetchResult]
  -[HMDBackingStoreCacheFetchMigratedResult group]
  -[HMDBackingStoreCacheFetchMigratedResult setGroup:]
  -[HMDBackingStoreCacheFetchMigratedResult mainReturningError]
  -[HMDBackingStoreCacheFetchMigratedResult initWithGroup:update:migration:fetchResult:]


HMDHAPMetrics : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *firmwareVersion
 @property  NSString *manufacturer
 @property  NSString *model
 @property  NSString *category
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDHAPMetrics setCategory:]
  -[HMDHAPMetrics setModel:]
  -[HMDHAPMetrics firmwareVersion]
  -[HMDHAPMetrics model]
  -[HMDHAPMetrics eventName]
  -[HMDHAPMetrics category]
  -[HMDHAPMetrics .cxx_destruct]
  -[HMDHAPMetrics setManufacturer:]
  -[HMDHAPMetrics manufacturer]
  -[HMDHAPMetrics setFirmwareVersion:]
  -[HMDHAPMetrics serializedEvent]
  -[HMDHAPMetrics initWithHMDAccessory:]


HMFObjectCacheHMDConfigurationMessagePolicy : NSObject
  // class methods
  +[HMFObjectCacheHMDConfigurationMessagePolicy cachedInstanceForConfigurationMessagePolicy:]


HMDConfigurationMessagePolicy : HMFMessagePolicy
 @property  unsigned long operationTypes

  // class methods
  +[HMDConfigurationMessagePolicy policyWithOperationTypes:]

  // instance methods
  -[HMDConfigurationMessagePolicy copyWithZone:]
  -[HMDConfigurationMessagePolicy isEqual:]
  -[HMDConfigurationMessagePolicy init]
  -[HMDConfigurationMessagePolicy __initWithOperationTypes:]
  -[HMDConfigurationMessagePolicy operationTypes]


AWDHomeKitPresenceEvent : PBCodable <NSCopying>
 @property  BOOL hasPresenceEventType
 @property  int presenceEventType
 @property  BOOL hasPresenceEventGranularity
 @property  int presenceEventGranularity

  // instance methods
  -[AWDHomeKitPresenceEvent copyTo:]
  -[AWDHomeKitPresenceEvent mergeFrom:]
  -[AWDHomeKitPresenceEvent dictionaryRepresentation]
  -[AWDHomeKitPresenceEvent copyWithZone:]
  -[AWDHomeKitPresenceEvent readFrom:]
  -[AWDHomeKitPresenceEvent writeTo:]
  -[AWDHomeKitPresenceEvent isEqual:]
  -[AWDHomeKitPresenceEvent presenceEventType]
  -[AWDHomeKitPresenceEvent setPresenceEventType:]
  -[AWDHomeKitPresenceEvent setHasPresenceEventType:]
  -[AWDHomeKitPresenceEvent hasPresenceEventType]
  -[AWDHomeKitPresenceEvent presenceEventTypeAsString:]
  -[AWDHomeKitPresenceEvent StringAsPresenceEventType:]
  -[AWDHomeKitPresenceEvent presenceEventGranularity]
  -[AWDHomeKitPresenceEvent setPresenceEventGranularity:]
  -[AWDHomeKitPresenceEvent setHasPresenceEventGranularity:]
  -[AWDHomeKitPresenceEvent hasPresenceEventGranularity]
  -[AWDHomeKitPresenceEvent presenceEventGranularityAsString:]
  -[AWDHomeKitPresenceEvent StringAsPresenceEventGranularity:]


HMDRemoteEventRouterClient : NSObject <HMFMessageReceiver, HMFLogging, HMEMessageDatagramClientDataSource, HMEMessageDatagramClientDelegate, HMDRemoteEventRouterAssertionClient>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSString *requestMessageName
 @property  NSString *updateMessageName
 @property  NSNotificationCenter *notificationCenter
 @property  BOOL isConnected
 @property  BOOL isNetworkAvailable
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long messageTransportRestriction
 @property  NSUUID *identifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDRemoteEventRouterClientDataSource> *dataSource
 @property  BOOL isPrimaryResident
 @property  HMEMessageDatagramClient *eventRouterClient
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteEventRouterClient logCategory]
  +[HMDRemoteEventRouterClient routerClientWithQueue:storeReadHandle:storeWriteHandle:logCategory:]

  // instance methods
  -[HMDRemoteEventRouterClient notificationCenter]
  -[HMDRemoteEventRouterClient isNetworkAvailable]
  -[HMDRemoteEventRouterClient identifier]
  -[HMDRemoteEventRouterClient logIdentifier]
  -[HMDRemoteEventRouterClient isConnected]
  -[HMDRemoteEventRouterClient dataSource]
  -[HMDRemoteEventRouterClient setIsConnected:]
  -[HMDRemoteEventRouterClient updateMessageName]
  -[HMDRemoteEventRouterClient workQueue]
  -[HMDRemoteEventRouterClient clientDidDisconnect:]
  -[HMDRemoteEventRouterClient .cxx_destruct]
  -[HMDRemoteEventRouterClient messageTargetUUID]
  -[HMDRemoteEventRouterClient dumpStateDescription]
  -[HMDRemoteEventRouterClient eventRouterClient]
  -[HMDRemoteEventRouterClient messageReceiveQueue]
  -[HMDRemoteEventRouterClient eventRouter]
  -[HMDRemoteEventRouterClient messageDispatcher]
  -[HMDRemoteEventRouterClient sendChangeRegistrationsMessageWithAddedFilters:removedFilters:completion:]
  -[HMDRemoteEventRouterClient clientDidConnect:serverIdentifier:]
  -[HMDRemoteEventRouterClient client:upstreamTopicsForTopic:]
  -[HMDRemoteEventRouterClient client:sendConnectWithAddedFilters:completion:]
  -[HMDRemoteEventRouterClient client:sendChangeRegistrationsWithAddedFilters:removedFilters:completion:]
  -[HMDRemoteEventRouterClient sendKeepAliveForClient:completion:]
  -[HMDRemoteEventRouterClient client:isConnectionTerminatingError:]
  -[HMDRemoteEventRouterClient sendDisconnectForClient:completion:]
  -[HMDRemoteEventRouterClient client:forwardingTopicsForTopics:]
  -[HMDRemoteEventRouterClient client:fetchWithFilters:completion:]
  -[HMDRemoteEventRouterClient clientIsEnabled:]
  -[HMDRemoteEventRouterClient logEventSubmitter]
  -[HMDRemoteEventRouterClient setIsNetworkAvailable:]
  -[HMDRemoteEventRouterClient _handleUpdateMessage:]
  -[HMDRemoteEventRouterClient handlePrimaryResidentConfirmedDeviceIdentifierChangeNotification:]
  -[HMDRemoteEventRouterClient didChangeHasForegroundClient:]
  -[HMDRemoteEventRouterClient didChangeFetchAvailableCondition:]
  -[HMDRemoteEventRouterClient initWithMessageTargetUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:]
  -[HMDRemoteEventRouterClient initWithMessageTargetUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:logCategory:]
  -[HMDRemoteEventRouterClient initWithMessageTargetUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:retryIntervalProvider:logCategory:]
  -[HMDRemoteEventRouterClient initWithMessageTargetUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:logCategory:logEventSubmitter:eventRouterClientFactory:]
  -[HMDRemoteEventRouterClient isPrimaryResident]
  -[HMDRemoteEventRouterClient messageTransportRestriction]
  -[HMDRemoteEventRouterClient _registerForMessages:]
  -[HMDRemoteEventRouterClient _handleUpdatedEventsRequest:originalMessage:]
  -[HMDRemoteEventRouterClient _handleEventUpdateMessage:fromServer:events:]
  -[HMDRemoteEventRouterClient _handleCachedEventMessage:fromServer:events:]
  -[HMDRemoteEventRouterClient _underlyingMessageDataFromFragmentMessageData:error:]
  -[HMDRemoteEventRouterClient sendChangeRegistrationsMessageWithAddedFilters:removedFilters:client:completion:]
  -[HMDRemoteEventRouterClient sendMessageWithPayloadMessage:client:messageType:completion:]
  -[HMDRemoteEventRouterClient sendMessageWithPayloadMessage:messageType:destination:serverIdentifier:completion:]
  -[HMDRemoteEventRouterClient configureIsPrimaryResident:networkAvailable:additionalPolicies:]
  -[HMDRemoteEventRouterClient networkAvailabilityDidChange:]
  -[HMDRemoteEventRouterClient requestMessageName]


HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSNumber *removalCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent eventName]
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent attributeDescriptions]
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent .cxx_destruct]
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent serializedEvent]
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent initWithRemovalCount:]
  -[HMDAppleMediaAccessoryMatchingIdentifierRemovalEvent removalCount]


AWDHomeKitPresenceRegion : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasNumUsers
 @property  unsigned int numUsers
 @property  BOOL hasNumPresenceAuthUsers
 @property  unsigned int numPresenceAuthUsers
 @property  BOOL hasNumPresenceRegionValidUsers
 @property  unsigned int numPresenceRegionValidUsers
 @property  BOOL hasPrimaryResident
 @property  BOOL primaryResident

  // instance methods
  -[AWDHomeKitPresenceRegion setTimestamp:]
  -[AWDHomeKitPresenceRegion copyTo:]
  -[AWDHomeKitPresenceRegion mergeFrom:]
  -[AWDHomeKitPresenceRegion setHasTimestamp:]
  -[AWDHomeKitPresenceRegion dictionaryRepresentation]
  -[AWDHomeKitPresenceRegion hasTimestamp]
  -[AWDHomeKitPresenceRegion copyWithZone:]
  -[AWDHomeKitPresenceRegion timestamp]
  -[AWDHomeKitPresenceRegion readFrom:]
  -[AWDHomeKitPresenceRegion writeTo:]
  -[AWDHomeKitPresenceRegion isEqual:]
  -[AWDHomeKitPresenceRegion primaryResident]
  -[AWDHomeKitPresenceRegion setNumUsers:]
  -[AWDHomeKitPresenceRegion setHasNumUsers:]
  -[AWDHomeKitPresenceRegion hasNumUsers]
  -[AWDHomeKitPresenceRegion setNumPresenceAuthUsers:]
  -[AWDHomeKitPresenceRegion setHasNumPresenceAuthUsers:]
  -[AWDHomeKitPresenceRegion hasNumPresenceAuthUsers]
  -[AWDHomeKitPresenceRegion setNumPresenceRegionValidUsers:]
  -[AWDHomeKitPresenceRegion setHasNumPresenceRegionValidUsers:]
  -[AWDHomeKitPresenceRegion hasNumPresenceRegionValidUsers]
  -[AWDHomeKitPresenceRegion setPrimaryResident:]
  -[AWDHomeKitPresenceRegion setHasPrimaryResident:]
  -[AWDHomeKitPresenceRegion hasPrimaryResident]
  -[AWDHomeKitPresenceRegion numUsers]
  -[AWDHomeKitPresenceRegion numPresenceAuthUsers]
  -[AWDHomeKitPresenceRegion numPresenceRegionValidUsers]


HMDAccountIdentifier : HMFObject <HMFObject, NSCopying, NSSecureCoding>
 @property  _HMDAccountIdentifier *internal
 @property  BOOL authenticated
 @property  NSString *senderCorrelationIdentifier
 @property  NSUUID *identifier
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccountIdentifier supportsSecureCoding]
  +[HMDAccountIdentifier accountIdentifierForAccountHandle:]
  +[HMDAccountIdentifier accountIdentifierForAppleAccountContext:]
  +[HMDAccountIdentifier accountIdentifierForMessageContext:]
  +[HMDAccountIdentifier accountIdentifierForSenderCorrelationIdentifier:]

  // instance methods
  -[HMDAccountIdentifier identifier]
  -[HMDAccountIdentifier senderCorrelationIdentifier]
  -[HMDAccountIdentifier encodeWithCoder:]
  -[HMDAccountIdentifier isAuthenticated]
  -[HMDAccountIdentifier attributeDescriptions]
  -[HMDAccountIdentifier .cxx_destruct]
  -[HMDAccountIdentifier shortDescription]
  -[HMDAccountIdentifier copyWithZone:]
  -[HMDAccountIdentifier internal]
  -[HMDAccountIdentifier isEqual:]
  -[HMDAccountIdentifier init]
  -[HMDAccountIdentifier initWithCoder:]
  -[HMDAccountIdentifier initWithInternal:]


_HMDAccountIdentifier : HMFObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSString *kind
 @property  BOOL authenticated
 @property  NSString *senderCorrelationIdentifier

  // class methods
  +[_HMDAccountIdentifier supportsSecureCoding]

  // instance methods
  -[_HMDAccountIdentifier identifier]
  -[_HMDAccountIdentifier kind]
  -[_HMDAccountIdentifier senderCorrelationIdentifier]
  -[_HMDAccountIdentifier encodeWithCoder:]
  -[_HMDAccountIdentifier isAuthenticated]
  -[_HMDAccountIdentifier .cxx_destruct]
  -[_HMDAccountIdentifier initWithIdentifier:]
  -[_HMDAccountIdentifier copyWithZone:]
  -[_HMDAccountIdentifier isEqual:]
  -[_HMDAccountIdentifier init]
  -[_HMDAccountIdentifier initWithCoder:]


_HMDAccountHandleIdentifer : _HMDAccountIdentifier
 @property  HMDAccountHandle *accountHandle

  // class methods
  +[_HMDAccountHandleIdentifer supportsSecureCoding]

  // instance methods
  -[_HMDAccountHandleIdentifer identifier]
  -[_HMDAccountHandleIdentifer kind]
  -[_HMDAccountHandleIdentifer encodeWithCoder:]
  -[_HMDAccountHandleIdentifer .cxx_destruct]
  -[_HMDAccountHandleIdentifer initWithIdentifier:]
  -[_HMDAccountHandleIdentifer isEqual:]
  -[_HMDAccountHandleIdentifer initWithCoder:]
  -[_HMDAccountHandleIdentifer initWithAccountHandle:]
  -[_HMDAccountHandleIdentifer accountHandle]


_HMDAppleAccountIdentifier : _HMDAccountIdentifier
 @property  NSString *identifierString

  // class methods
  +[_HMDAppleAccountIdentifier supportsSecureCoding]
  +[_HMDAppleAccountIdentifier namespace]

  // instance methods
  -[_HMDAppleAccountIdentifier kind]
  -[_HMDAppleAccountIdentifier encodeWithCoder:]
  -[_HMDAppleAccountIdentifier identifierString]
  -[_HMDAppleAccountIdentifier isAuthenticated]
  -[_HMDAppleAccountIdentifier .cxx_destruct]
  -[_HMDAppleAccountIdentifier initWithIdentifier:]
  -[_HMDAppleAccountIdentifier isEqual:]
  -[_HMDAppleAccountIdentifier initWithCoder:]
  -[_HMDAppleAccountIdentifier initWithIdentifierString:]


_HMDIDSAccountIdentifier : _HMDAccountIdentifier
 @property  NSString *identifierString

  // class methods
  +[_HMDIDSAccountIdentifier supportsSecureCoding]
  +[_HMDIDSAccountIdentifier namespace]

  // instance methods
  -[_HMDIDSAccountIdentifier kind]
  -[_HMDIDSAccountIdentifier senderCorrelationIdentifier]
  -[_HMDIDSAccountIdentifier encodeWithCoder:]
  -[_HMDIDSAccountIdentifier identifierString]
  -[_HMDIDSAccountIdentifier isAuthenticated]
  -[_HMDIDSAccountIdentifier .cxx_destruct]
  -[_HMDIDSAccountIdentifier initWithIdentifier:]
  -[_HMDIDSAccountIdentifier isEqual:]
  -[_HMDIDSAccountIdentifier initWithCoder:]
  -[_HMDIDSAccountIdentifier initWithIdentifierString:]


HMDDataStreamFragmentAssembler : HMFObject
 @property  NSString *type
 @property  NSMutableData *data
 @property  NSNumber *currentChunkSequenceNumber
 @property  HMDDataStreamFragment *assembledFragment
 @property  NSNumber *sequenceNumber

  // instance methods
  -[HMDDataStreamFragmentAssembler type]
  -[HMDDataStreamFragmentAssembler attributeDescriptions]
  -[HMDDataStreamFragmentAssembler .cxx_destruct]
  -[HMDDataStreamFragmentAssembler sequenceNumber]
  -[HMDDataStreamFragmentAssembler data]
  -[HMDDataStreamFragmentAssembler initWithSequenceNumber:type:]
  -[HMDDataStreamFragmentAssembler addFragmentChunk:error:]
  -[HMDDataStreamFragmentAssembler assembledFragment]
  -[HMDDataStreamFragmentAssembler setAssembledFragment:]
  -[HMDDataStreamFragmentAssembler currentChunkSequenceNumber]
  -[HMDDataStreamFragmentAssembler setCurrentChunkSequenceNumber:]


AWDHomeKitAccessoryReadWrite : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasIsWrite
 @property  BOOL isWrite
 @property  BOOL hasIsRemote
 @property  BOOL isRemote
 @property  NSMutableArray *characteristics
 @property  BOOL hasTransportType
 @property  int transportType
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasTransaction
 @property  NSString *transaction
 @property  BOOL hasIsTimedWrite
 @property  BOOL isTimedWrite
 @property  BOOL hasTransportProtocolVersion
 @property  NSString *transportProtocolVersion
 @property  BOOL hasSource
 @property  int source
 @property  BOOL hasCertified
 @property  int certified
 @property  BOOL hasIsCached
 @property  BOOL isCached
 @property  BOOL hasUnderlyingErrorDomain
 @property  NSString *underlyingErrorDomain
 @property  BOOL hasUnderlyingErrorCode
 @property  unsigned int underlyingErrorCode
 @property  BOOL hasPrimaryServiceType
 @property  NSString *primaryServiceType
 @property  BOOL hasIsResidentAvailable
 @property  BOOL isResidentAvailable
 @property  BOOL hasIsRemoteAccessAllowed
 @property  BOOL isRemoteAccessAllowed
 @property  BOOL hasIsRemotelyReachable
 @property  BOOL isRemotelyReachable
 @property  BOOL hasConsecutiveFailureCount
 @property  unsigned int consecutiveFailureCount
 @property  BOOL hasTimeElapsedSinceFirstFailure
 @property  unsigned int timeElapsedSinceFirstFailure
 @property  BOOL hasIsNoeAccessory
 @property  BOOL isNoeAccessory
 @property  BOOL hasIsSentOverNoe
 @property  BOOL isSentOverNoe
 @property  BOOL hasAppIdentifier
 @property  NSString *appIdentifier
 @property  BOOL hasClientMetricIdentifier
 @property  NSString *clientMetricIdentifier

  // class methods
  +[AWDHomeKitAccessoryReadWrite characteristicsType]

  // instance methods
  -[AWDHomeKitAccessoryReadWrite source]
  -[AWDHomeKitAccessoryReadWrite hasErrorCode]
  -[AWDHomeKitAccessoryReadWrite setErrorCode:]
  -[AWDHomeKitAccessoryReadWrite isRemote]
  -[AWDHomeKitAccessoryReadWrite setHasSource:]
  -[AWDHomeKitAccessoryReadWrite sourceAsString:]
  -[AWDHomeKitAccessoryReadWrite errorCode]
  -[AWDHomeKitAccessoryReadWrite hasSource]
  -[AWDHomeKitAccessoryReadWrite setDuration:]
  -[AWDHomeKitAccessoryReadWrite setSource:]
  -[AWDHomeKitAccessoryReadWrite appIdentifier]
  -[AWDHomeKitAccessoryReadWrite setTimestamp:]
  -[AWDHomeKitAccessoryReadWrite hasDuration]
  -[AWDHomeKitAccessoryReadWrite copyTo:]
  -[AWDHomeKitAccessoryReadWrite StringAsSource:]
  -[AWDHomeKitAccessoryReadWrite setTransportType:]
  -[AWDHomeKitAccessoryReadWrite transaction]
  -[AWDHomeKitAccessoryReadWrite setCharacteristics:]
  -[AWDHomeKitAccessoryReadWrite .cxx_destruct]
  -[AWDHomeKitAccessoryReadWrite setHasErrorCode:]
  -[AWDHomeKitAccessoryReadWrite duration]
  -[AWDHomeKitAccessoryReadWrite mergeFrom:]
  -[AWDHomeKitAccessoryReadWrite transportType]
  -[AWDHomeKitAccessoryReadWrite characteristics]
  -[AWDHomeKitAccessoryReadWrite setTransaction:]
  -[AWDHomeKitAccessoryReadWrite setHasTimestamp:]
  -[AWDHomeKitAccessoryReadWrite hasAppIdentifier]
  -[AWDHomeKitAccessoryReadWrite dictionaryRepresentation]
  -[AWDHomeKitAccessoryReadWrite hasTimestamp]
  -[AWDHomeKitAccessoryReadWrite clientMetricIdentifier]
  -[AWDHomeKitAccessoryReadWrite copyWithZone:]
  -[AWDHomeKitAccessoryReadWrite StringAsTransportType:]
  -[AWDHomeKitAccessoryReadWrite timestamp]
  -[AWDHomeKitAccessoryReadWrite readFrom:]
  -[AWDHomeKitAccessoryReadWrite hasTransportType]
  -[AWDHomeKitAccessoryReadWrite setClientMetricIdentifier:]
  -[AWDHomeKitAccessoryReadWrite setHasDuration:]
  -[AWDHomeKitAccessoryReadWrite writeTo:]
  -[AWDHomeKitAccessoryReadWrite setHasTransportType:]
  -[AWDHomeKitAccessoryReadWrite isEqual:]
  -[AWDHomeKitAccessoryReadWrite transportTypeAsString:]
  -[AWDHomeKitAccessoryReadWrite setAppIdentifier:]
  -[AWDHomeKitAccessoryReadWrite setUnderlyingErrorDomain:]
  -[AWDHomeKitAccessoryReadWrite hasUnderlyingErrorDomain]
  -[AWDHomeKitAccessoryReadWrite setUnderlyingErrorCode:]
  -[AWDHomeKitAccessoryReadWrite setHasUnderlyingErrorCode:]
  -[AWDHomeKitAccessoryReadWrite hasUnderlyingErrorCode]
  -[AWDHomeKitAccessoryReadWrite underlyingErrorDomain]
  -[AWDHomeKitAccessoryReadWrite underlyingErrorCode]
  -[AWDHomeKitAccessoryReadWrite isCached]
  -[AWDHomeKitAccessoryReadWrite setIsCached:]
  -[AWDHomeKitAccessoryReadWrite setIsRemote:]
  -[AWDHomeKitAccessoryReadWrite clearCharacteristics]
  -[AWDHomeKitAccessoryReadWrite addCharacteristics:]
  -[AWDHomeKitAccessoryReadWrite characteristicsCount]
  -[AWDHomeKitAccessoryReadWrite characteristicsAtIndex:]
  -[AWDHomeKitAccessoryReadWrite isRemoteAccessAllowed]
  -[AWDHomeKitAccessoryReadWrite primaryServiceType]
  -[AWDHomeKitAccessoryReadWrite setHasIsCached:]
  -[AWDHomeKitAccessoryReadWrite hasIsCached]
  -[AWDHomeKitAccessoryReadWrite setHasIsRemote:]
  -[AWDHomeKitAccessoryReadWrite hasIsRemote]
  -[AWDHomeKitAccessoryReadWrite hasVendorDetails]
  -[AWDHomeKitAccessoryReadWrite vendorDetails]
  -[AWDHomeKitAccessoryReadWrite setVendorDetails:]
  -[AWDHomeKitAccessoryReadWrite setIsWrite:]
  -[AWDHomeKitAccessoryReadWrite setHasIsWrite:]
  -[AWDHomeKitAccessoryReadWrite hasIsWrite]
  -[AWDHomeKitAccessoryReadWrite hasTransaction]
  -[AWDHomeKitAccessoryReadWrite setIsTimedWrite:]
  -[AWDHomeKitAccessoryReadWrite setHasIsTimedWrite:]
  -[AWDHomeKitAccessoryReadWrite hasIsTimedWrite]
  -[AWDHomeKitAccessoryReadWrite hasTransportProtocolVersion]
  -[AWDHomeKitAccessoryReadWrite certified]
  -[AWDHomeKitAccessoryReadWrite setCertified:]
  -[AWDHomeKitAccessoryReadWrite setHasCertified:]
  -[AWDHomeKitAccessoryReadWrite hasCertified]
  -[AWDHomeKitAccessoryReadWrite certifiedAsString:]
  -[AWDHomeKitAccessoryReadWrite StringAsCertified:]
  -[AWDHomeKitAccessoryReadWrite hasPrimaryServiceType]
  -[AWDHomeKitAccessoryReadWrite setIsResidentAvailable:]
  -[AWDHomeKitAccessoryReadWrite setHasIsResidentAvailable:]
  -[AWDHomeKitAccessoryReadWrite hasIsResidentAvailable]
  -[AWDHomeKitAccessoryReadWrite setIsRemoteAccessAllowed:]
  -[AWDHomeKitAccessoryReadWrite setHasIsRemoteAccessAllowed:]
  -[AWDHomeKitAccessoryReadWrite hasIsRemoteAccessAllowed]
  -[AWDHomeKitAccessoryReadWrite setIsRemotelyReachable:]
  -[AWDHomeKitAccessoryReadWrite setHasIsRemotelyReachable:]
  -[AWDHomeKitAccessoryReadWrite hasIsRemotelyReachable]
  -[AWDHomeKitAccessoryReadWrite setConsecutiveFailureCount:]
  -[AWDHomeKitAccessoryReadWrite setHasConsecutiveFailureCount:]
  -[AWDHomeKitAccessoryReadWrite hasConsecutiveFailureCount]
  -[AWDHomeKitAccessoryReadWrite setTimeElapsedSinceFirstFailure:]
  -[AWDHomeKitAccessoryReadWrite setHasTimeElapsedSinceFirstFailure:]
  -[AWDHomeKitAccessoryReadWrite hasTimeElapsedSinceFirstFailure]
  -[AWDHomeKitAccessoryReadWrite setIsNoeAccessory:]
  -[AWDHomeKitAccessoryReadWrite setHasIsNoeAccessory:]
  -[AWDHomeKitAccessoryReadWrite hasIsNoeAccessory]
  -[AWDHomeKitAccessoryReadWrite setIsSentOverNoe:]
  -[AWDHomeKitAccessoryReadWrite setHasIsSentOverNoe:]
  -[AWDHomeKitAccessoryReadWrite hasIsSentOverNoe]
  -[AWDHomeKitAccessoryReadWrite hasClientMetricIdentifier]
  -[AWDHomeKitAccessoryReadWrite isWrite]
  -[AWDHomeKitAccessoryReadWrite isTimedWrite]
  -[AWDHomeKitAccessoryReadWrite transportProtocolVersion]
  -[AWDHomeKitAccessoryReadWrite setTransportProtocolVersion:]
  -[AWDHomeKitAccessoryReadWrite setPrimaryServiceType:]
  -[AWDHomeKitAccessoryReadWrite isResidentAvailable]
  -[AWDHomeKitAccessoryReadWrite isRemotelyReachable]
  -[AWDHomeKitAccessoryReadWrite consecutiveFailureCount]
  -[AWDHomeKitAccessoryReadWrite timeElapsedSinceFirstFailure]
  -[AWDHomeKitAccessoryReadWrite isNoeAccessory]
  -[AWDHomeKitAccessoryReadWrite isSentOverNoe]


HMDPendingBulkSendListener : NSObject
 @property  <HMDDataStreamBulkSendListener> *listener
 @property  NSString *fileType

  // instance methods
  -[HMDPendingBulkSendListener fileType]
  -[HMDPendingBulkSendListener .cxx_destruct]
  -[HMDPendingBulkSendListener setListener:]
  -[HMDPendingBulkSendListener setFileType:]
  -[HMDPendingBulkSendListener listener]
  -[HMDPendingBulkSendListener initWithListener:fileType:]


HMDDataStreamSetupOperation : NSObject
 @property  HMDHAPAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *logIdentifier
 @property  HMDService *transferManagementService
 @property  NSMutableSet *pendingBulkSendListeners
 @property  <HMDDataStreamSetupOperationDelegate> *delegate

  // class methods
  +[HMDDataStreamSetupOperation tcpSetupOperationWithAccessory:queue:logIdentifier:transferManagementService:]
  +[HMDDataStreamSetupOperation hapSetupOperationWithAccessory:queue:logIdentifier:transferManagementService:maxControllerTransportMTU:setupOperationReadRequired:]

  // instance methods
  -[HMDDataStreamSetupOperation accessory]
  -[HMDDataStreamSetupOperation logIdentifier]
  -[HMDDataStreamSetupOperation setDelegate:]
  -[HMDDataStreamSetupOperation delegate]
  -[HMDDataStreamSetupOperation dealloc]
  -[HMDDataStreamSetupOperation startSetup]
  -[HMDDataStreamSetupOperation .cxx_destruct]
  -[HMDDataStreamSetupOperation queue]
  -[HMDDataStreamSetupOperation initWithAccessory:queue:logIdentifier:transferManagementService:]
  -[HMDDataStreamSetupOperation postDidFailWithError:]
  -[HMDDataStreamSetupOperation postDidSucceedWithTransport:sessionEncryption:]
  -[HMDDataStreamSetupOperation continueStreamSetupWithResponse:]
  -[HMDDataStreamSetupOperation _clearPendingBulkSendListeners]
  -[HMDDataStreamSetupOperation cancelSetup]
  -[HMDDataStreamSetupOperation processTransportSetupResponse:]
  -[HMDDataStreamSetupOperation addBulkSendListener:fileType:]
  -[HMDDataStreamSetupOperation removeBulkSendListener:]
  -[HMDDataStreamSetupOperation movePendingBulkSendListenersToBulkSendProtocol:]
  -[HMDDataStreamSetupOperation transferManagementService]
  -[HMDDataStreamSetupOperation pendingBulkSendListeners]


HMDDataStreamTCPSetupOperation : HMDDataStreamSetupOperation
 @property  HMFNetAddress *remoteNetAddress
 @property  NSData *controllerKeySalt
 @property  NSData *accessoryKeySalt
 @property  long long remoteTcpPort
 @property  HAPSecuritySessionEncryption *sessionEncryption

  // class methods
  +[HMDDataStreamTCPSetupOperation logCategory]

  // instance methods
  -[HMDDataStreamTCPSetupOperation startSetup]
  -[HMDDataStreamTCPSetupOperation .cxx_destruct]
  -[HMDDataStreamTCPSetupOperation _isComplete]
  -[HMDDataStreamTCPSetupOperation controllerKeySalt]
  -[HMDDataStreamTCPSetupOperation accessoryKeySalt]
  -[HMDDataStreamTCPSetupOperation setAccessoryKeySalt:]
  -[HMDDataStreamTCPSetupOperation initWithAccessory:queue:logIdentifier:transferManagementService:]
  -[HMDDataStreamTCPSetupOperation processTransportSetupResponse:]
  -[HMDDataStreamTCPSetupOperation _fullKeySalt]
  -[HMDDataStreamTCPSetupOperation _generateStreamKeys]
  -[HMDDataStreamTCPSetupOperation _createTCPTransport]
  -[HMDDataStreamTCPSetupOperation _finishStreamTransport]
  -[HMDDataStreamTCPSetupOperation remoteNetAddress]
  -[HMDDataStreamTCPSetupOperation setRemoteNetAddress:]
  -[HMDDataStreamTCPSetupOperation remoteTcpPort]
  -[HMDDataStreamTCPSetupOperation setRemoteTcpPort:]
  -[HMDDataStreamTCPSetupOperation sessionEncryption]
  -[HMDDataStreamTCPSetupOperation setSessionEncryption:]


HMDDataStreamHAPSetupOperation : HMDDataStreamSetupOperation <HMDDataStreamSetupOperationMTU>
 @property  unsigned long maxControllerTransportMTU
 @property  long long sessionIdentifier

  // class methods
  +[HMDDataStreamHAPSetupOperation logCategory]

  // instance methods
  -[HMDDataStreamHAPSetupOperation setSessionIdentifier:]
  -[HMDDataStreamHAPSetupOperation sessionIdentifier]
  -[HMDDataStreamHAPSetupOperation startSetup]
  -[HMDDataStreamHAPSetupOperation processTransportSetupResponse:]
  -[HMDDataStreamHAPSetupOperation setMaxControllerTransportMTU:]
  -[HMDDataStreamHAPSetupOperation initWithAccessory:queue:logIdentifier:transferManagementService:maxControllerTransportMTU:setupOperationReadRequired:]
  -[HMDDataStreamHAPSetupOperation _readRequiredTransportCharacteristics]
  -[HMDDataStreamHAPSetupOperation maxControllerTransportMTU]


HMDHAPMetadataAssistantCharacteristic : HMFObject
 @property  NSString *name
 @property  NSString *readHAPCharacteristicName
 @property  NSString *writeHAPCharacteristicName
 @property  NSString *format
 @property  BOOL supportsLocalization
 @property  NSDictionary *values
 @property  NSDictionary *outValues

  // instance methods
  -[HMDHAPMetadataAssistantCharacteristic values]
  -[HMDHAPMetadataAssistantCharacteristic setValues:]
  -[HMDHAPMetadataAssistantCharacteristic .cxx_destruct]
  -[HMDHAPMetadataAssistantCharacteristic setFormat:]
  -[HMDHAPMetadataAssistantCharacteristic setName:]
  -[HMDHAPMetadataAssistantCharacteristic name]
  -[HMDHAPMetadataAssistantCharacteristic format]
  -[HMDHAPMetadataAssistantCharacteristic init]
  -[HMDHAPMetadataAssistantCharacteristic initWithName:readHAPCharacteristic:writeHAPCharacteristic:format:]
  -[HMDHAPMetadataAssistantCharacteristic readHAPCharacteristicName]
  -[HMDHAPMetadataAssistantCharacteristic setReadHAPCharacteristicName:]
  -[HMDHAPMetadataAssistantCharacteristic writeHAPCharacteristicName]
  -[HMDHAPMetadataAssistantCharacteristic setWriteHAPCharacteristicName:]
  -[HMDHAPMetadataAssistantCharacteristic supportsLocalization]
  -[HMDHAPMetadataAssistantCharacteristic setSupportsLocalization:]
  -[HMDHAPMetadataAssistantCharacteristic outValues]
  -[HMDHAPMetadataAssistantCharacteristic setOutValues:]


HMDHAPMetadataCategory : HMFObject
 @property  NSNumber *identifier
 @property  NSString *uuidStr
 @property  NSString *name
 @property  NSString *catDescription

  // instance methods
  -[HMDHAPMetadataCategory identifier]
  -[HMDHAPMetadataCategory setUuidStr:]
  -[HMDHAPMetadataCategory uuidStr]
  -[HMDHAPMetadataCategory .cxx_destruct]
  -[HMDHAPMetadataCategory setIdentifier:]
  -[HMDHAPMetadataCategory setName:]
  -[HMDHAPMetadataCategory name]
  -[HMDHAPMetadataCategory init]
  -[HMDHAPMetadataCategory initWithIdentifier:uuid:name:description:]
  -[HMDHAPMetadataCategory catDescription]
  -[HMDHAPMetadataCategory setCatDescription:]


HMDHAPMetadata : HMFObject <HMProtoBufEncode>
 @property  HAPMetadata *hapMetadata
 @property  NSNumber *version
 @property  NSNumber *schemaVersion
 @property  BOOL incomplete
 @property  NSSet *hmRequiresDeviceUnlockTuples
 @property  NSDictionary *hmAllowableSecuringWrites
 @property  NSDictionary *hmWakeOnOperationsFilter
 @property  NSDictionary *hmAccessoryCategories
 @property  NSSet *hmBlacklistedServices
 @property  NSSet *hmBlacklistedCharacteristics
 @property  NSSet *hmBlacklistedServicesFromApp
 @property  NSSet *hmBlacklistedCharacteristicsFromApp
 @property  NSSet *hmNotificationAutoEnabledTuples
 @property  NSSet *hmBulletinBoardEnabledTuples
 @property  NSSet *hmCoalesceNotificationsTuples
 @property  NSDictionary *assistantServiceNameHAPTypeMap
 @property  NSDictionary *assistantServiceHAPTypeNameMap
 @property  NSDictionary *assistantCharacteristics
 @property  NSDictionary *assistantChrHAPTypeNameMap
 @property  NSDictionary *assistantUnits
 @property  NSDictionary *firmwareUpdateStagingPolicies
 @property  NSDictionary *firmwareUpdateAutoApplyPolicies
 @property  NSDictionary *rawPlist
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHAPMetadata initWithDictionary:error:]
  +[HMDHAPMetadata metadataCache]
  +[HMDHAPMetadata initWithPath:error:]
  +[HMDHAPMetadata getSharedInstance]
  +[HMDHAPMetadata getBuiltinInstance]
  +[HMDHAPMetadata _logCurrentMetadata]
  +[HMDHAPMetadata updateLocalMetadataWithBuiltinMetadata]
  +[HMDHAPMetadata updateLocalMetadataWithMetadata:]
  +[HMDHAPMetadata isServiceType:compatibleWithAccessoryCategoryType:]
  +[HMDHAPMetadata legacyV3DataForIDS]
  +[HMDHAPMetadata legacyV3DataForCloud]
  +[HMDHAPMetadata dataFromMetadataDictionaryWithKey:]
  +[HMDHAPMetadata isOwnerPrivilegeRequiredForWritingCharacteristicType:serviceType:]
  +[HMDHAPMetadata isAdminPrivilegeRequiredForWritingCharacteristicType:serviceType:]
  +[HMDHAPMetadata prepareMetadata]
  +[HMDHAPMetadata shouldUploadToCloudAfterHomedReady]
  +[HMDHAPMetadata resetShouldUploadToCloudAfterHomedReady]
  +[HMDHAPMetadata isHomedVersionSupported:]

  // instance methods
  -[HMDHAPMetadata setSchemaVersion:]
  -[HMDHAPMetadata schemaVersion]
  -[HMDHAPMetadata .cxx_destruct]
  -[HMDHAPMetadata shouldNotCacheCharacteristicOfType:]
  -[HMDHAPMetadata rawPlist]
  -[HMDHAPMetadata version]
  -[HMDHAPMetadata categoryForIdentifier:]
  -[HMDHAPMetadata setVersion:]
  -[HMDHAPMetadata categoryForType:]
  -[HMDHAPMetadata hapMetadata]
  -[HMDHAPMetadata protoBufObjectWithEncodingOption:]
  -[HMDHAPMetadata initWithDictionary:hapMetadata:error:]
  -[HMDHAPMetadata xpcData:]
  -[HMDHAPMetadata characteristicNameFromType:]
  -[HMDHAPMetadata characteristicTypeFromName:]
  -[HMDHAPMetadata serviceNameFromType:]
  -[HMDHAPMetadata serviceTypeFromName:]
  -[HMDHAPMetadata isStandardCharacteristicType:]
  -[HMDHAPMetadata isStandardServiceType:]
  -[HMDHAPMetadata supportsAuthorizationData:forService:]
  -[HMDHAPMetadata validateAssociatedServiceType:forService:]
  -[HMDHAPMetadata descriptionForServiceType:]
  -[HMDHAPMetadata descriptionForCharacteristicType:]
  -[HMDHAPMetadata allowsSecuringWriteFor:withValue:]
  -[HMDHAPMetadata shouldAllowToWakeSuspendedAccessoryForOperation:service:characteristicType:value:]
  -[HMDHAPMetadata requiresDeviceUnlock:forService:]
  -[HMDHAPMetadata requiresTimedWrite:forService:]
  -[HMDHAPMetadata isTargetCharacteristic:]
  -[HMDHAPMetadata shouldCoalesceCharacteristicNotifications:forService:]
  -[HMDHAPMetadata shouldFilterServiceOfType:]
  -[HMDHAPMetadata shouldFilterCharacteristicOfType:]
  -[HMDHAPMetadata shouldFilterServiceOfTypeFromApp:]
  -[HMDHAPMetadata shouldFilterCharacteristicOfTypeFromApp:]
  -[HMDHAPMetadata generateNotificationOnConfigurationForCharacteristicType:serviceType:]
  -[HMDHAPMetadata isSecondsDownCounterCharacteristicType:]
  -[HMDHAPMetadata shouldAutoEnableNotificationForCharacteristic:ofService:]
  -[HMDHAPMetadata shouldEnableHomeNotificationForCharacteristicType:serviceType:]
  -[HMDHAPMetadata shouldHomeAppShowTileForServiceType:]
  -[HMDHAPMetadata shouldFilterChangeNotificationsForCharacteristicType:serviceType:]
  -[HMDHAPMetadata shouldFilterEnableNotificationsForCharacteristicType:serviceType:]
  -[HMDHAPMetadata shouldRefreshValueForCharacteristicWithType:serviceType:]
  -[HMDHAPMetadata categoryForOther]
  -[HMDHAPMetadata audioAccessoryCategory]
  -[HMDHAPMetadata categoryTypeFromName:]
  -[HMDHAPMetadata serviceSubtypeForValue:forServiceType:]
  -[HMDHAPMetadata supportsLocalization:]
  -[HMDHAPMetadata mapToAssistantServiceName:]
  -[HMDHAPMetadata mapFromAssistantServiceName:]
  -[HMDHAPMetadata mapToAssistantServiceSubtypeName:]
  -[HMDHAPMetadata mapToAssistantServiceSubtypeName:accessoryCategory:]
  -[HMDHAPMetadata mapToAssistantCharacteristicName:]
  -[HMDHAPMetadata mapReadCharacteristicFromAssistantName:]
  -[HMDHAPMetadata mapWriteCharacteristicFromAssistantName:]
  -[HMDHAPMetadata getAliasedServiceType:]
  -[HMDHAPMetadata getServiceTypeAlias:]
  -[HMDHAPMetadata getAliasedCharacteristicTypes:]
  -[HMDHAPMetadata getCharacteristicTypeAlias:]
  -[HMDHAPMetadata getStatusCharacteristicTypes:forServiceType:]
  -[HMDHAPMetadata characteristicValueUnit:]
  -[HMDHAPMetadata mapCharacteristicValueType:]
  -[HMDHAPMetadata mapToAssistantUnitName:]
  -[HMDHAPMetadata mapFromAssistantUnitName:]
  -[HMDHAPMetadata mapFromAssistantCharacteristicValue:name:]
  -[HMDHAPMetadata mapToAssistantCharacteristicValue:name:getActionType:]
  -[HMDHAPMetadata stagingPolicyConfigurationForService:category:]
  -[HMDHAPMetadata autoApplyPolicyConfigurationForService:category:]
  -[HMDHAPMetadata parseAndSetRawPlist:]
  -[HMDHAPMetadata parseAndSetHMMetadataWithHMPlist:]
  -[HMDHAPMetadata parseAndSetAssistantMetadataWithAssistantPlist:]
  -[HMDHAPMetadata parseMetadataTupleSetFromPlist:]
  -[HMDHAPMetadata parseAndSetAllowableSecuringWrites:]
  -[HMDHAPMetadata parseAndSetWakeOnOperationsFilter:]
  -[HMDHAPMetadata parseAndSetHMCategories:]
  -[HMDHAPMetadata parseAndSetHMAccessoryFirmwareUpdatePolicies:]
  -[HMDHAPMetadata policyConfigurationAvailableForAllHAPServices]
  -[HMDHAPMetadata parseHMAccessoryFirmwareUpdatePolicyServices:]
  -[HMDHAPMetadata parseHMAccessoryFirmwareUpdatePolicyCriteria:]
  -[HMDHAPMetadata parseHMAccessoryFirmwareUpdatePolicyCharacteristics:]
  -[HMDHAPMetadata parseServiceArray:]
  -[HMDHAPMetadata parseCharacteristicArray:]
  -[HMDHAPMetadata parseAndSetAssistantServices:]
  -[HMDHAPMetadata parseAndSetAssistantCharacteristics:]
  -[HMDHAPMetadata parseAndSetAssistantUnits:]
  -[HMDHAPMetadata checkTupleExistsInSet:forChrType:svcType:]
  -[HMDHAPMetadata aliasedHAPCharacteristicTypes]
  -[HMDHAPMetadata aliasedHAPServiceTypes]
  -[HMDHAPMetadata statusHAPCharacteristicTypesForServiceType]
  -[HMDHAPMetadata incomplete]
  -[HMDHAPMetadata setIncomplete:]
  -[HMDHAPMetadata setHapMetadata:]
  -[HMDHAPMetadata hmRequiresDeviceUnlockTuples]
  -[HMDHAPMetadata setHmRequiresDeviceUnlockTuples:]
  -[HMDHAPMetadata hmAllowableSecuringWrites]
  -[HMDHAPMetadata setHmAllowableSecuringWrites:]
  -[HMDHAPMetadata hmWakeOnOperationsFilter]
  -[HMDHAPMetadata setHmWakeOnOperationsFilter:]
  -[HMDHAPMetadata hmAccessoryCategories]
  -[HMDHAPMetadata setHmAccessoryCategories:]
  -[HMDHAPMetadata hmBlacklistedServices]
  -[HMDHAPMetadata setHmBlacklistedServices:]
  -[HMDHAPMetadata hmBlacklistedCharacteristics]
  -[HMDHAPMetadata setHmBlacklistedCharacteristics:]
  -[HMDHAPMetadata hmBlacklistedServicesFromApp]
  -[HMDHAPMetadata setHmBlacklistedServicesFromApp:]
  -[HMDHAPMetadata hmBlacklistedCharacteristicsFromApp]
  -[HMDHAPMetadata setHmBlacklistedCharacteristicsFromApp:]
  -[HMDHAPMetadata hmNotificationAutoEnabledTuples]
  -[HMDHAPMetadata setHmNotificationAutoEnabledTuples:]
  -[HMDHAPMetadata hmBulletinBoardEnabledTuples]
  -[HMDHAPMetadata setHmBulletinBoardEnabledTuples:]
  -[HMDHAPMetadata hmCoalesceNotificationsTuples]
  -[HMDHAPMetadata setHmCoalesceNotificationsTuples:]
  -[HMDHAPMetadata assistantServiceNameHAPTypeMap]
  -[HMDHAPMetadata setAssistantServiceNameHAPTypeMap:]
  -[HMDHAPMetadata assistantServiceHAPTypeNameMap]
  -[HMDHAPMetadata setAssistantServiceHAPTypeNameMap:]
  -[HMDHAPMetadata assistantCharacteristics]
  -[HMDHAPMetadata setAssistantCharacteristics:]
  -[HMDHAPMetadata assistantChrHAPTypeNameMap]
  -[HMDHAPMetadata setAssistantChrHAPTypeNameMap:]
  -[HMDHAPMetadata assistantUnits]
  -[HMDHAPMetadata setAssistantUnits:]
  -[HMDHAPMetadata firmwareUpdateStagingPolicies]
  -[HMDHAPMetadata setFirmwareUpdateStagingPolicies:]
  -[HMDHAPMetadata firmwareUpdateAutoApplyPolicies]
  -[HMDHAPMetadata setFirmwareUpdateAutoApplyPolicies:]


HMDHAPMetadataModel : HMDBackingStoreModelObject
 @property  NSNumber *metadataVersion
 @property  NSNumber *schemaVersion
 @property  NSDictionary *rawPlist
 @property  NSData *legacyIDSData
 @property  NSData *legacyCloudData

  // class methods
  +[HMDHAPMetadataModel properties]
  +[HMDHAPMetadataModel allowedTypes]
  +[HMDHAPMetadataModel metadataModelObjectUUID]
  +[HMDHAPMetadataModel modelWithDictionary:]

  // instance methods
  -[HMDHAPMetadataModel metadataDictionary]


HMDCameraIDSSessionInitiator : HMDCameraIDSSessionHandler <AVCPacketRelayDelegate, IDSSessionDelegate, HMDCameraRemoteStreamSenderProtocol>
 @property  AVCPacketRelay *packetRelay
 @property  HMFOSTransaction *packetRelayTransaction
 @property  <HMDCameraIDSSessionInitiatorDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  HMDDevice *device
 @property  HMDCameraNetworkConfig *localNetworkConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSNumber *mtu

  // class methods
  +[HMDCameraIDSSessionInitiator logCategory]

  // instance methods
  -[HMDCameraIDSSessionInitiator logIdentifier]
  -[HMDCameraIDSSessionInitiator setDelegate:]
  -[HMDCameraIDSSessionInitiator mtu]
  -[HMDCameraIDSSessionInitiator delegate]
  -[HMDCameraIDSSessionInitiator dealloc]
  -[HMDCameraIDSSessionInitiator .cxx_destruct]
  -[HMDCameraIDSSessionInitiator delegateQueue]
  -[HMDCameraIDSSessionInitiator device]
  -[HMDCameraIDSSessionInitiator sessionStarted:]
  -[HMDCameraIDSSessionInitiator sessionEnded:withReason:error:]
  -[HMDCameraIDSSessionInitiator session:receivedInvitationAcceptFromID:]
  -[HMDCameraIDSSessionInitiator session:receivedInvitationDeclineFromID:]
  -[HMDCameraIDSSessionInitiator session:receivedInvitationCancelFromID:]
  -[HMDCameraIDSSessionInitiator openRelaySession]
  -[HMDCameraIDSSessionInitiator startPacketRelayWithVideoSocket:videoNetworkConfig:cameraVideoSSRC:audioSocket:audioNetworkConfig:cameraAudioSSRC:]
  -[HMDCameraIDSSessionInitiator packetRelay:didStart:error:]
  -[HMDCameraIDSSessionInitiator packetRelay:didStop:error:]
  -[HMDCameraIDSSessionInitiator initWithSessionID:workQueue:device:localNetworkConfig:delegate:delegateQueue:]
  -[HMDCameraIDSSessionInitiator _sendInvitation]
  -[HMDCameraIDSSessionInitiator _startPacketRelayWithVideoSocket:videoNetworkConfig:cameraVideoSSRC:audioSocket:audioNetworkConfig:cameraAudioSSRC:]
  -[HMDCameraIDSSessionInitiator _callSessionStarted]
  -[HMDCameraIDSSessionInitiator _callSessionEndedWithError:]
  -[HMDCameraIDSSessionInitiator localNetworkConfig]
  -[HMDCameraIDSSessionInitiator packetRelay]
  -[HMDCameraIDSSessionInitiator setPacketRelay:]
  -[HMDCameraIDSSessionInitiator packetRelayTransaction]
  -[HMDCameraIDSSessionInitiator setPacketRelayTransaction:]


HMDCompositeSettingsControllerFetchLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *keyPath

  // instance methods
  -[HMDCompositeSettingsControllerFetchLogEvent eventName]
  -[HMDCompositeSettingsControllerFetchLogEvent .cxx_destruct]
  -[HMDCompositeSettingsControllerFetchLogEvent keyPath]
  -[HMDCompositeSettingsControllerFetchLogEvent dictionaryRepresentation]
  -[HMDCompositeSettingsControllerFetchLogEvent initWithKeyPath:date:]
  -[HMDCompositeSettingsControllerFetchLogEvent serializedEvent]


HMDSettingsMessageHandler : HMFObject <HMFMessageReceiver, HMDSettingsMessageHandlerProtocol, HMFLogging>
 @property  NSUUID *messageTargetUUID
 @property  <HMDSettingsMessageController> *privateMessageController
 @property  <HMDSettingsMessageController> *sharedMessageController
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingsMessageHandler logCategory]

  // instance methods
  -[HMDSettingsMessageHandler .cxx_destruct]
  -[HMDSettingsMessageHandler messageTargetUUID]
  -[HMDSettingsMessageHandler initWithQueue:]
  -[HMDSettingsMessageHandler messageReceiveQueue]
  -[HMDSettingsMessageHandler setMessageTargetUUID:]
  -[HMDSettingsMessageHandler _handleUpdateValue:]
  -[HMDSettingsMessageHandler setPrivateMessageController:]
  -[HMDSettingsMessageHandler setSharedMessageController:]
  -[HMDSettingsMessageHandler configureWithMessageDispatcher:home:]
  -[HMDSettingsMessageHandler privateMessageController]
  -[HMDSettingsMessageHandler sharedMessageController]


AWDHomeKitCameraSnapshotMessaging : PBCodable <NSCopying>
 @property  BOOL hasReceivedSnapshotRequest
 @property  unsigned int receivedSnapshotRequest
 @property  BOOL hasSentSnapshotRequest
 @property  unsigned int sentSnapshotRequest
 @property  BOOL hasSentSnapshotResponse
 @property  unsigned int sentSnapshotResponse

  // instance methods
  -[AWDHomeKitCameraSnapshotMessaging copyTo:]
  -[AWDHomeKitCameraSnapshotMessaging mergeFrom:]
  -[AWDHomeKitCameraSnapshotMessaging dictionaryRepresentation]
  -[AWDHomeKitCameraSnapshotMessaging copyWithZone:]
  -[AWDHomeKitCameraSnapshotMessaging readFrom:]
  -[AWDHomeKitCameraSnapshotMessaging writeTo:]
  -[AWDHomeKitCameraSnapshotMessaging isEqual:]
  -[AWDHomeKitCameraSnapshotMessaging setReceivedSnapshotRequest:]
  -[AWDHomeKitCameraSnapshotMessaging setHasReceivedSnapshotRequest:]
  -[AWDHomeKitCameraSnapshotMessaging hasReceivedSnapshotRequest]
  -[AWDHomeKitCameraSnapshotMessaging setSentSnapshotRequest:]
  -[AWDHomeKitCameraSnapshotMessaging setHasSentSnapshotRequest:]
  -[AWDHomeKitCameraSnapshotMessaging hasSentSnapshotRequest]
  -[AWDHomeKitCameraSnapshotMessaging setSentSnapshotResponse:]
  -[AWDHomeKitCameraSnapshotMessaging setHasSentSnapshotResponse:]
  -[AWDHomeKitCameraSnapshotMessaging hasSentSnapshotResponse]
  -[AWDHomeKitCameraSnapshotMessaging receivedSnapshotRequest]
  -[AWDHomeKitCameraSnapshotMessaging sentSnapshotRequest]
  -[AWDHomeKitCameraSnapshotMessaging sentSnapshotResponse]


HMDAccessoryFirmwareUpdateCameraPolicy : HMDAccessoryFirmwareUpdatePolicy
  // class methods
  +[HMDAccessoryFirmwareUpdateCameraPolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateCameraPolicy configure]
  -[HMDAccessoryFirmwareUpdateCameraPolicy evaluate]
  -[HMDAccessoryFirmwareUpdateCameraPolicy registerForNotifications]
  -[HMDAccessoryFirmwareUpdateCameraPolicy isEqual:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy handleAccessoryConnectedNotification:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy handleAccessoryDisconnectedNotification:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy handleSettingsChange:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy handleCharacteristicValuesChanged:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy monitorStreamStatus:]
  -[HMDAccessoryFirmwareUpdateCameraPolicy _handleStreamStatusCharacteristicChanges]
  -[HMDAccessoryFirmwareUpdateCameraPolicy _checkStreamingStatus]
  -[HMDAccessoryFirmwareUpdateCameraPolicy _processStreamingStatus:]


HMDCameraSnapshotLocal : HMFObject <HMFLogging, HMDCameraGetSnapshotProtocol>
 @property  HMDSnapshotFile *snapshotFile
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDAccessory *accessory
 @property  <HMDCameraSnapshotLocalDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <HMDSnapshotRequestHandlerProtocol> *snapshotRequestHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotLocal logCategory]

  // instance methods
  -[HMDCameraSnapshotLocal accessory]
  -[HMDCameraSnapshotLocal logIdentifier]
  -[HMDCameraSnapshotLocal setDelegate:]
  -[HMDCameraSnapshotLocal sessionID]
  -[HMDCameraSnapshotLocal setAccessory:]
  -[HMDCameraSnapshotLocal workQueue]
  -[HMDCameraSnapshotLocal delegate]
  -[HMDCameraSnapshotLocal dealloc]
  -[HMDCameraSnapshotLocal .cxx_destruct]
  -[HMDCameraSnapshotLocal delegateQueue]
  -[HMDCameraSnapshotLocal getSnapshot:]
  -[HMDCameraSnapshotLocal initWithSessionID:workQueue:accessory:delegate:delegateQueue:snapshotRequestHandler:]
  -[HMDCameraSnapshotLocal _getSnapshot:]
  -[HMDCameraSnapshotLocal _handleSnapshotFile:error:]
  -[HMDCameraSnapshotLocal snapshotFile]
  -[HMDCameraSnapshotLocal setSnapshotFile:]
  -[HMDCameraSnapshotLocal snapshotRequestHandler]


AWDHomeKitCameraSnapshotIDSTransfer : PBCodable <NSCopying>
 @property  BOOL hasSentImage
 @property  unsigned int sentImage
 @property  BOOL hasReceivedImage
 @property  unsigned int receivedImage

  // instance methods
  -[AWDHomeKitCameraSnapshotIDSTransfer copyTo:]
  -[AWDHomeKitCameraSnapshotIDSTransfer mergeFrom:]
  -[AWDHomeKitCameraSnapshotIDSTransfer dictionaryRepresentation]
  -[AWDHomeKitCameraSnapshotIDSTransfer copyWithZone:]
  -[AWDHomeKitCameraSnapshotIDSTransfer readFrom:]
  -[AWDHomeKitCameraSnapshotIDSTransfer writeTo:]
  -[AWDHomeKitCameraSnapshotIDSTransfer isEqual:]
  -[AWDHomeKitCameraSnapshotIDSTransfer setSentImage:]
  -[AWDHomeKitCameraSnapshotIDSTransfer setHasSentImage:]
  -[AWDHomeKitCameraSnapshotIDSTransfer hasSentImage]
  -[AWDHomeKitCameraSnapshotIDSTransfer setReceivedImage:]
  -[AWDHomeKitCameraSnapshotIDSTransfer setHasReceivedImage:]
  -[AWDHomeKitCameraSnapshotIDSTransfer hasReceivedImage]
  -[AWDHomeKitCameraSnapshotIDSTransfer sentImage]
  -[AWDHomeKitCameraSnapshotIDSTransfer receivedImage]


HMDLogEventMessageEventsAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  double lastRemoteMessageEventsPeriodicSubmissionTime
 @property  double lastXPCMessageEventsPeriodicSubmissionTime
 @property  unsigned long periodicLoggingInterval
 @property  @? dateFactory
 @property  NSUserDefaults *userDefaults

  // class methods
  +[HMDLogEventMessageEventsAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventMessageEventsAnalyzer setUserDefaults:]
  -[HMDLogEventMessageEventsAnalyzer userDefaults]
  -[HMDLogEventMessageEventsAnalyzer .cxx_destruct]
  -[HMDLogEventMessageEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventMessageEventsAnalyzer logEventSubmitter]
  -[HMDLogEventMessageEventsAnalyzer eventCountersManager]
  -[HMDLogEventMessageEventsAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventMessageEventsAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventMessageEventsAnalyzer initWithEventCountersManager:logEventSubmitter:]
  -[HMDLogEventMessageEventsAnalyzer initWithEventCountersManager:logEventSubmitter:userDefaults:]
  -[HMDLogEventMessageEventsAnalyzer submitPeriodicAggregateCountersForXPCMessageCounterRequestGroup:]
  -[HMDLogEventMessageEventsAnalyzer transportTypeStringForRemoteMessageCounterRequestGroup:]
  -[HMDLogEventMessageEventsAnalyzer messageDirectionStringForRemoteMessageCounterRequestGroup:]
  -[HMDLogEventMessageEventsAnalyzer submitPeriodicAggregateCountersForRemoteMessageCounterRequestGroup:]
  -[HMDLogEventMessageEventsAnalyzer submitPeriodicXPCMessageCountersLogEventIfNeeded]
  -[HMDLogEventMessageEventsAnalyzer submitPeriodicRemoteMessageCountersLogEventIfNeeded]
  -[HMDLogEventMessageEventsAnalyzer periodicRemoteMessageCounterEventNameWithMessageName:peerInformation:]
  -[HMDLogEventMessageEventsAnalyzer _handleRemoteMessageLogEvent:]
  -[HMDLogEventMessageEventsAnalyzer _updateDailySubmissionGroupRemoteMessageEventCountersForTransportType:messageDirectionSending:]
  -[HMDLogEventMessageEventsAnalyzer _updatePeriodicSubmissionGroupRemoteMessageEventCountersForMessageName:peerInformation:transportType:messageDirectionSending:identifier:]
  -[HMDLogEventMessageEventsAnalyzer _handleXPCMessageCounterLogEvent:]
  -[HMDLogEventMessageEventsAnalyzer setLastXPCMessageEventsPeriodicSubmissionTime:]
  -[HMDLogEventMessageEventsAnalyzer lastXPCMessageEventsPeriodicSubmissionTime]
  -[HMDLogEventMessageEventsAnalyzer setLastRemoteMessageEventsPeriodicSubmissionTime:]
  -[HMDLogEventMessageEventsAnalyzer lastRemoteMessageEventsPeriodicSubmissionTime]
  -[HMDLogEventMessageEventsAnalyzer periodicLoggingInterval]
  -[HMDLogEventMessageEventsAnalyzer dateFactory]
  -[HMDLogEventMessageEventsAnalyzer setDateFactory:]


HMDPendingCharacteristic : NSObject
 @property  HMDCharacteristicWriteRequest *writeRequest
 @property  NSObject<OS_dispatch_queue> *queue
 @property  @? handler

  // instance methods
  -[HMDPendingCharacteristic .cxx_destruct]
  -[HMDPendingCharacteristic handler]
  -[HMDPendingCharacteristic queue]
  -[HMDPendingCharacteristic writeRequest]
  -[HMDPendingCharacteristic initWithCharacteristic:queue:handler:]


HMDNotificationRegistry : HMFObject <HMFLogging, HMFTimerDelegate, NSSecureCoding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNotificationRegistry supportsSecureCoding]
  +[HMDNotificationRegistry logCategory]

  // instance methods
  -[HMDNotificationRegistry timerDidFire:]
  -[HMDNotificationRegistry logIdentifier]
  -[HMDNotificationRegistry addDelegate:]
  -[HMDNotificationRegistry encodeWithCoder:]
  -[HMDNotificationRegistry .cxx_destruct]
  -[HMDNotificationRegistry shortDescription]
  -[HMDNotificationRegistry init]
  -[HMDNotificationRegistry initWithCoder:]
  -[HMDNotificationRegistry configureWithHome:]
  -[HMDNotificationRegistry propertiesRegisteredForMediaProfileUniqueIdentifier:]
  -[HMDNotificationRegistry initWithPendingRequestsRetryTimer:]
  -[HMDNotificationRegistry clearAllRegistrations]
  -[HMDNotificationRegistry removeRegistrationsForCharacteristics:]
  -[HMDNotificationRegistry removeRegistrationsForMediaProfile:]
  -[HMDNotificationRegistry filterCharacteristics:forUser:]
  -[HMDNotificationRegistry filterProperties:forUser:]
  -[HMDNotificationRegistry usersRegisteredForNotificationsForCharacteristics:]
  -[HMDNotificationRegistry usersRegisteredForNotificationsForProperties:]
  -[HMDNotificationRegistry auditUsersForNotifications:forHome:]
  -[HMDNotificationRegistry enableReachabilityEventNotificationForAccessoryUUIDs:forUserID:]
  -[HMDNotificationRegistry disableReachabilityEventNotificationForAccessoryUUIDs:forUserID:]
  -[HMDNotificationRegistry userIDsRegisteredForReachabilityEventNotificationsForAccessoryUUIDs:]
  -[HMDNotificationRegistry removeAllReachabilityEventNotificationRegistrations]
  -[HMDNotificationRegistry setNotificationsEnabled:forUserID:characteristicsPayload:mediaPropertiesPayload:]


HMDLogEventDailyScheduler : HMFObject <HMFLogging>
 @property  @? dateFactory
 @property  NSDate *lastRunTime
 @property  NSString *xpcActivityIdentifier
 @property  NSString *preferencesKey
 @property  NSHashTable *mutableTaskRunners
 @property  <HMDXPCActivityInterfacing> *xpcActivityInterface
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLogEventDailyScheduler logCategory]
  +[HMDLogEventDailyScheduler createSchedulerWithLogEventSubmitter:]

  // instance methods
  -[HMDLogEventDailyScheduler setLastRunTime:]
  -[HMDLogEventDailyScheduler .cxx_destruct]
  -[HMDLogEventDailyScheduler lastRunTime]
  -[HMDLogEventDailyScheduler _registerActivity]
  -[HMDLogEventDailyScheduler _runActivity:]
  -[HMDLogEventDailyScheduler logEventSubmitter]
  -[HMDLogEventDailyScheduler dateFactory]
  -[HMDLogEventDailyScheduler setDateFactory:]
  -[HMDLogEventDailyScheduler initWithIdentifier:preferencesKey:logEventSubmitter:xpcActivityInterface:dateFactory:]
  -[HMDLogEventDailyScheduler _criteriaForActivity]
  -[HMDLogEventDailyScheduler _handleCheckInForActivity:]
  -[HMDLogEventDailyScheduler registerDailyTaskRunner:]
  -[HMDLogEventDailyScheduler taskRunners]
  -[HMDLogEventDailyScheduler runDailyTasks]
  -[HMDLogEventDailyScheduler statusSummary]
  -[HMDLogEventDailyScheduler xpcActivityIdentifier]
  -[HMDLogEventDailyScheduler preferencesKey]
  -[HMDLogEventDailyScheduler mutableTaskRunners]
  -[HMDLogEventDailyScheduler setMutableTaskRunners:]
  -[HMDLogEventDailyScheduler xpcActivityInterface]
  -[HMDLogEventDailyScheduler setXpcActivityInterface:]


HMDHomeRemoteEventRouterClientFactory : NSObject <HMDHomeRemoteEventRouterClientFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeRemoteEventRouterClientFactory primaryResidentClientWithMessageTargetUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:]
  -[HMDHomeRemoteEventRouterClientFactory residentClientWithAccessoryUUID:homeUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:]


HMDHomeRemoteEventRouterClientController : NSObject <HMDRemoteEventRouterClientDataSource, HMEDelegatingEventRouterDataSource>
 @property  HMEDelegatingEventRouter *residentDelegatingEventRouter
 @property  NSUUID *homeUUID
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeRemoteEventRouterClientController isNetworkAvailable]
  -[HMDHomeRemoteEventRouterClientController .cxx_destruct]
  -[HMDHomeRemoteEventRouterClientController homeUUID]
  -[HMDHomeRemoteEventRouterClientController homeManager]
  -[HMDHomeRemoteEventRouterClientController setHomeManager:]
  -[HMDHomeRemoteEventRouterClientController dumpStateDescription]
  -[HMDHomeRemoteEventRouterClientController delegatingRouter:filteredTopics:forRouter:]
  -[HMDHomeRemoteEventRouterClientController client:forwardingTopicsForTopics:]
  -[HMDHomeRemoteEventRouterClientController delegatingRouter:upstreamTopicsFor:]
  -[HMDHomeRemoteEventRouterClientController isCurrentDevicePrimaryResident]
  -[HMDHomeRemoteEventRouterClientController networkAvailabilityDidChange:]
  -[HMDHomeRemoteEventRouterClientController routerClientPrimaryResidentDeviceIdentifier:]
  -[HMDHomeRemoteEventRouterClientController primaryResidentChangeMonitorForRouterClient:]
  -[HMDHomeRemoteEventRouterClientController routerClientMessageDestination:serverIdentifier:]
  -[HMDHomeRemoteEventRouterClientController routerClientSupportsFragmentMessageForServerIdentifier:]
  -[HMDHomeRemoteEventRouterClientController routerClientShouldRestrictMessagingToLocalOnly:]
  -[HMDHomeRemoteEventRouterClientController initWithMessageTargetUUID:workQueue:dataSource:requestMessageName:updateMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:]
  -[HMDHomeRemoteEventRouterClientController initWithMessageTargetUUID:workQueue:dataSource:routerClientFactory:requestMessageName:updateMessageName:clientUserMessagePolicy:currentAccessoryUUID:assertionController:delegatingRouterFactory:]
  -[HMDHomeRemoteEventRouterClientController updateCurrentAccessoryUUID:]
  -[HMDHomeRemoteEventRouterClientController createResidentRouterForAccessoryUUID:]
  -[HMDHomeRemoteEventRouterClientController removeResidentRouterForAccessoryUUID:]
  -[HMDHomeRemoteEventRouterClientController residentDelegatingEventRouter]


HMDCharacteristicMonitorEvent : HMDCharacteristicEvent
  // class methods
  +[HMDCharacteristicMonitorEvent logCategory]

  // instance methods
  -[HMDCharacteristicMonitorEvent _evaluateNewValue:]
  -[HMDCharacteristicMonitorEvent _compareEventValue:]


HMDSiriEndpointProfileMessageHandler : NSObject <HMFLogging>
 @property  NSUUID *homeUUID
 @property  <HMDSiriEndpointProfileMessageHandlerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointProfileMessageHandler logCategory]

  // instance methods
  -[HMDSiriEndpointProfileMessageHandler logIdentifier]
  -[HMDSiriEndpointProfileMessageHandler dataSource]
  -[HMDSiriEndpointProfileMessageHandler .cxx_destruct]
  -[HMDSiriEndpointProfileMessageHandler homeUUID]
  -[HMDSiriEndpointProfileMessageHandler setDataSource:]
  -[HMDSiriEndpointProfileMessageHandler initWithHomeUUID:]
  -[HMDSiriEndpointProfileMessageHandler handleSiriEndpointApplyOnboardingSelectionsRequestMessage:]
  -[HMDSiriEndpointProfileMessageHandler handleSiriEndpointDeleteSiriHistoryRequestMessage:]
  -[HMDSiriEndpointProfileMessageHandler deleteHistoryForAccessoryUUID:onHubAccessories:]
  -[HMDSiriEndpointProfileMessageHandler deleteHistoryForAccessoryUUID:onHubAccessory:]
  -[HMDSiriEndpointProfileMessageHandler dataSourceSiriEndpointOnboardingManager]
  -[HMDSiriEndpointProfileMessageHandler dataSourceHubAccessories]


HMDCHIPAccessoryStorage : HMFObject <NSCopying, NSSecureCoding>
 @property  NSNumber *nodeID
 @property  NSNumber *vendorID
 @property  NSNumber *productID
 @property  NSData *attributeDatabase
 @property  NSSet *pairings
 @property  NSDictionary *debugDictionaryRepresentation

  // class methods
  +[HMDCHIPAccessoryStorage supportsSecureCoding]
  +[HMDCHIPAccessoryStorage logCategory]

  // instance methods
  -[HMDCHIPAccessoryStorage vendorID]
  -[HMDCHIPAccessoryStorage logIdentifier]
  -[HMDCHIPAccessoryStorage productID]
  -[HMDCHIPAccessoryStorage encodeWithCoder:]
  -[HMDCHIPAccessoryStorage attributeDescriptions]
  -[HMDCHIPAccessoryStorage setVendorID:]
  -[HMDCHIPAccessoryStorage .cxx_destruct]
  -[HMDCHIPAccessoryStorage setProductID:]
  -[HMDCHIPAccessoryStorage copyWithZone:]
  -[HMDCHIPAccessoryStorage isEqual:]
  -[HMDCHIPAccessoryStorage nodeID]
  -[HMDCHIPAccessoryStorage initWithCoder:]
  -[HMDCHIPAccessoryStorage debugDictionaryRepresentation]
  -[HMDCHIPAccessoryStorage attributeDatabase]
  -[HMDCHIPAccessoryStorage pairings]
  -[HMDCHIPAccessoryStorage updateUsingAccessoryModel:]
  -[HMDCHIPAccessoryStorage updateAccessoryModel:]
  -[HMDCHIPAccessoryStorage setNodeID:]
  -[HMDCHIPAccessoryStorage setAttributeDatabase:]
  -[HMDCHIPAccessoryStorage setPairings:]


HMDServiceGroup : HMFObject <HMDHomeMessageReceiver, HMFDumpState, NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSString *name
 @property  NSMutableDictionary *serviceMapping
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHome *home
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDApplicationData *appData
 @property  NSArray *serviceUUIDs
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDServiceGroup supportsSecureCoding]
  +[HMDServiceGroup hasMessageReceiverChildren]

  // instance methods
  -[HMDServiceGroup dumpState]
  -[HMDServiceGroup removeService:]
  -[HMDServiceGroup home]
  -[HMDServiceGroup encodeWithCoder:]
  -[HMDServiceGroup workQueue]
  -[HMDServiceGroup setWorkQueue:]
  -[HMDServiceGroup dealloc]
  -[HMDServiceGroup uuid]
  -[HMDServiceGroup .cxx_destruct]
  -[HMDServiceGroup messageTargetUUID]
  -[HMDServiceGroup serviceUUIDs]
  -[HMDServiceGroup setName:]
  -[HMDServiceGroup name]
  -[HMDServiceGroup messageReceiveQueue]
  -[HMDServiceGroup msgDispatcher]
  -[HMDServiceGroup urlString]
  -[HMDServiceGroup initWithCoder:]
  -[HMDServiceGroup setHome:]
  -[HMDServiceGroup setMsgDispatcher:]
  -[HMDServiceGroup _registerForMessages]
  -[HMDServiceGroup setAppData:]
  -[HMDServiceGroup appData]
  -[HMDServiceGroup _handleRenameRequest:]
  -[HMDServiceGroup transactionObjectUpdated:newValues:message:]
  -[HMDServiceGroup transactionObjectRemoved:message:]
  -[HMDServiceGroup modelObjectWithChangeType:]
  -[HMDServiceGroup backingStoreObjects:]
  -[HMDServiceGroup _handleUpdateAppDataModel:message:]
  -[HMDServiceGroup _handleRemoveAppDataModel:message:]
  -[HMDServiceGroup spiClientIdentifier]
  -[HMDServiceGroup _handleAddServiceRequest:]
  -[HMDServiceGroup _handleRemoveServiceRequest:]
  -[HMDServiceGroup initWithName:uuid:home:queue:]
  -[HMDServiceGroup configure:queue:]
  -[HMDServiceGroup fixupServicesForReplacementAccessory:]
  -[HMDServiceGroup setServiceIfPresent:]
  -[HMDServiceGroup removeServicesForAccessory:]
  -[HMDServiceGroup updateServiceGroupWithModel:message:]
  -[HMDServiceGroup _transactionServiceGroupUpdated:newValues:message:]
  -[HMDServiceGroup _handleUpdateServicesTransaction:]
  -[HMDServiceGroup fixupServiceGroup]
  -[HMDServiceGroup serviceMapping]
  -[HMDServiceGroup setServiceMapping:]
  -[HMDServiceGroup assistantObject]


HMDServiceGroupModel : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSArray *services

  // class methods
  +[HMDServiceGroupModel properties]

  // instance methods
  -[HMDServiceGroupModel dependentUUIDs]


HMDCameraStreamMetrics : HMFObject
 @property  HMDCameraMetricsStreamLogEvent *cameraStreamMetricsLogEvent
 @property  NSError *error

  // instance methods
  -[HMDCameraStreamMetrics error]
  -[HMDCameraStreamMetrics dealloc]
  -[HMDCameraStreamMetrics .cxx_destruct]
  -[HMDCameraStreamMetrics setError:]
  -[HMDCameraStreamMetrics initWithSessionID:cameraAccessory:isLocal:]
  -[HMDCameraStreamMetrics cameraStreamMetricsLogEvent]


HMDRemoteLoginReceiverSession : HMFObject
 @property  NSString *sessionID
 @property  HMDRemoteLoginAuthentication *remoteAuthentication
 @property  @? completion

  // instance methods
  -[HMDRemoteLoginReceiverSession completion]
  -[HMDRemoteLoginReceiverSession sessionID]
  -[HMDRemoteLoginReceiverSession dealloc]
  -[HMDRemoteLoginReceiverSession .cxx_destruct]
  -[HMDRemoteLoginReceiverSession remoteAuthentication]
  -[HMDRemoteLoginReceiverSession initWithSessionID:remoteAuthentication:completion:]


HMDAccessorySettingsLegacyMessageReceiver : HMFObject <HMFMessageReceiver>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDAccessorySettingsMessenger *messenger
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAccessorySettingsLegacyMessageReceiver .cxx_destruct]
  -[HMDAccessorySettingsLegacyMessageReceiver messenger]
  -[HMDAccessorySettingsLegacyMessageReceiver messageTargetUUID]
  -[HMDAccessorySettingsLegacyMessageReceiver messageDispatcher]
  -[HMDAccessorySettingsLegacyMessageReceiver setMessenger:]
  -[HMDAccessorySettingsLegacyMessageReceiver initWithMessageTargetUUID:messageDispatcher:]
  -[HMDAccessorySettingsLegacyMessageReceiver routeAccessorySettingsFetchRequestMessage:]
  -[HMDAccessorySettingsLegacyMessageReceiver routeAccessorySettingsUpdateRequestMessage:]
  -[HMDAccessorySettingsLegacyMessageReceiver registerForMessagesWithHome:]


HMDAnnounceUserSettingsModel : HMDBackingStoreModelObject
 @property  NSNumber *announceNotificationModeForCurrentDevice

  // class methods
  +[HMDAnnounceUserSettingsModel properties]
  +[HMDAnnounceUserSettingsModel modelIDNamespace]

  // instance methods
  -[HMDAnnounceUserSettingsModel modelIDForUser:]
  -[HMDAnnounceUserSettingsModel initWithUserUUID:]


HMDActionSet : HMFObject <HMFLogging, HMFTimerDelegate, HMDHomeMessageReceiver, NSSecureCoding, HMFDumpState, HMDBackingStoreObjectProtocol>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSString *serializedIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDHome *home
 @property  NSMutableArray *currentActions
 @property  NSDate *lastExecutionDate
 @property  HMFTimer *executionTimeout
 @property  NSDate *executionStart
 @property  HMFMessage *executionMessage
 @property  NSDictionary *executionInitialStates
 @property  HMDActionSetEvent *executionActionSetEvent
 @property  HMDApplicationData *appData
 @property  BOOL containsMediaPlaybackActions
 @property  BOOL containsShortcutActions
 @property  NSString *name
 @property  NSString *type
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  NSArray *actions
 @property  NSArray *associatedAccessories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDActionSet supportsSecureCoding]
  +[HMDActionSet logCategory]
  +[HMDActionSet allowedActionClasses]
  +[HMDActionSet hasMessageReceiverChildren]
  +[HMDActionSet isBuiltinActionSetType:]

  // instance methods
  -[HMDActionSet dumpState]
  -[HMDActionSet removeService:]
  -[HMDActionSet home]
  -[HMDActionSet timerDidFire:]
  -[HMDActionSet currentActions]
  -[HMDActionSet execute:]
  -[HMDActionSet logIdentifier]
  -[HMDActionSet addAction:]
  -[HMDActionSet encodeWithCoder:]
  -[HMDActionSet workQueue]
  -[HMDActionSet type]
  -[HMDActionSet setWorkQueue:]
  -[HMDActionSet dealloc]
  -[HMDActionSet removeAccessory:]
  -[HMDActionSet uuid]
  -[HMDActionSet .cxx_destruct]
  -[HMDActionSet actions]
  -[HMDActionSet messageTargetUUID]
  -[HMDActionSet removeAllActions]
  -[HMDActionSet messageDestination]
  -[HMDActionSet setType:]
  -[HMDActionSet setName:]
  -[HMDActionSet invalidate]
  -[HMDActionSet name]
  -[HMDActionSet messageReceiveQueue]
  -[HMDActionSet msgDispatcher]
  -[HMDActionSet urlString]
  -[HMDActionSet initWithCoder:]
  -[HMDActionSet setHome:]
  -[HMDActionSet setMsgDispatcher:]
  -[HMDActionSet _registerForMessages]
  -[HMDActionSet lastExecutionDate]
  -[HMDActionSet setLastExecutionDate:]
  -[HMDActionSet setCurrentActions:]
  -[HMDActionSet setAppData:]
  -[HMDActionSet appData]
  -[HMDActionSet removeAction:]
  -[HMDActionSet associatedAccessories]
  -[HMDActionSet _handleRenameRequest:]
  -[HMDActionSet transactionObjectUpdated:newValues:message:]
  -[HMDActionSet transactionObjectRemoved:message:]
  -[HMDActionSet isAssociatedWithAccessory:]
  -[HMDActionSet configure:messageDispatcher:queue:]
  -[HMDActionSet modelObjectWithChangeType:]
  -[HMDActionSet backingStoreObjects:]
  -[HMDActionSet _handleUpdateAppDataModel:message:]
  -[HMDActionSet _handleRemoveAppDataModel:message:]
  -[HMDActionSet spiClientIdentifier]
  -[HMDActionSet _handleAddActionRequest:]
  -[HMDActionSet _handleRemoveActionRequest:]
  -[HMDActionSet _handleUpdateActionRequest:]
  -[HMDActionSet initWithName:uuid:type:home:queue:]
  -[HMDActionSet isAccessValidForExecutionWithMessage:completion:]
  -[HMDActionSet _execute:activity:]
  -[HMDActionSet executeWithTriggerSource:captureCurrentState:completionHandler:]
  -[HMDActionSet removeActionForCharacteristic:]
  -[HMDActionSet __handleActionsUpdated]
  -[HMDActionSet serializedIdentifier]
  -[HMDActionSet _fixupActions]
  -[HMDActionSet containsSecureCharacteristic]
  -[HMDActionSet containsUnsecuringAction]
  -[HMDActionSet containsMediaPlaybackActions]
  -[HMDActionSet containsShortcutActions]
  -[HMDActionSet actionWithUUID:]
  -[HMDActionSet _addCharacteristicWriteActionModelWithUUID:message:]
  -[HMDActionSet _addMediaPlaybackActionModelWithUUID:message:]
  -[HMDActionSet _addLightProfileNaturalLightingModelWithUUID:message:]
  -[HMDActionSet _handleAddNewAction:message:]
  -[HMDActionSet sendNotificationWithAction:message:]
  -[HMDActionSet _handleAddCharacteristicWriteActionTransaction:message:]
  -[HMDActionSet _handleAddMediaPlaybackActionTransaction:message:]
  -[HMDActionSet _handleAddShortcutActionTransaction:message:]
  -[HMDActionSet _handleAddLightProfileNaturalLightingActionTransaction:message:]
  -[HMDActionSet _removeAction:message:]
  -[HMDActionSet _handleRemoveAction:message:]
  -[HMDActionSet _handleRemoveActions:message:]
  -[HMDActionSet _handleRemoveActionTransaction:message:]
  -[HMDActionSet _removeDonatedIntent]
  -[HMDActionSet _handleRenameActionSetTransaction:message:]
  -[HMDActionSet _updateWriteAction:forMessage:]
  -[HMDActionSet _updatePlaybackAction:forMessage:]
  -[HMDActionSet _updateNaturalLightingAction:forMessage:]
  -[HMDActionSet _generateOverallError:forSource:]
  -[HMDActionSet handleExecutionCompletedWithOverallError:response:]
  -[HMDActionSet _execute:captureCurrentState:writeRequestTuples:]
  -[HMDActionSet _createActionExecutionLogEvent:]
  -[HMDActionSet _issueWriteRequests:]
  -[HMDActionSet _executeCharacteristicWriteRequests:message:]
  -[HMDActionSet _executeMediaPlaybackActions:message:]
  -[HMDActionSet _executeNaturalLightingActions:writeRequests:message:]
  -[HMDActionSet _executeNaturalLightingWriteRequests:message:naturalLightingActions:naturalLightingActionResultByActionUUID:]
  -[HMDActionSet _executeGenericActions:message:]
  -[HMDActionSet _issueReadRequests]
  -[HMDActionSet _executeMediaPlaybackActions:source:clientName:completionHandler:]
  -[HMDActionSet _executeGenericActions:source:clientName:completionHandler:]
  -[HMDActionSet _processActionSetModelUpdated:message:]
  -[HMDActionSet executionTimeout]
  -[HMDActionSet setExecutionTimeout:]
  -[HMDActionSet executionStart]
  -[HMDActionSet setExecutionStart:]
  -[HMDActionSet executionMessage]
  -[HMDActionSet setExecutionMessage:]
  -[HMDActionSet executionInitialStates]
  -[HMDActionSet setExecutionInitialStates:]
  -[HMDActionSet executionActionSetEvent]
  -[HMDActionSet setExecutionActionSetEvent:]
  -[HMDActionSet assistantObject]
  -[HMDActionSet _getActionsForActionSetObject]


HMDActionSetModel : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSString *type
 @property  NSDate *lastExecutionDate

  // class methods
  +[HMDActionSetModel properties]


HMDAssertionLogEvent : HMMLogEvent <HMDDiagnosticReportLogging>
 @property  NSString *diagnosticReportEventType
 @property  NSString *diagnosticReportEventSubType
 @property  NSString *reason

  // instance methods
  -[HMDAssertionLogEvent .cxx_destruct]
  -[HMDAssertionLogEvent initWithReason:]
  -[HMDAssertionLogEvent reason]
  -[HMDAssertionLogEvent updateDiagnosticReportSignature:]


HMDStereoPairSettingsControllerStateManager : HMDCompositeSettingControllerManagerStateManager
  // class methods
  +[HMDStereoPairSettingsControllerStateManager logCategory]


HMDStereoPairSettingsController : HMFObject <HMDCompositeSettingControllerManagerStateManagerDataSource, HMEEventConsumer, HMFLogging, HMDCompositeSettingControllerManagerStateTransitionDelegate>
 @property  <HMDStereoPairSettingsControllerDataSource> *dataSource
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDCompositeSettingControllerManagerStateManager> *residentRunStateManager
 @property  NSMutableDictionary *topicToLastReceivedEvent
 @property  NSArray *homes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDStereoPairSettingsController logCategory]

  // instance methods
  -[HMDStereoPairSettingsController homes]
  -[HMDStereoPairSettingsController didReceiveEvent:topic:]
  -[HMDStereoPairSettingsController logIdentifier]
  -[HMDStereoPairSettingsController dataSource]
  -[HMDStereoPairSettingsController workQueue]
  -[HMDStereoPairSettingsController .cxx_destruct]
  -[HMDStereoPairSettingsController didReceiveCachedEvent:topic:source:]
  -[HMDStereoPairSettingsController setDataSource:]
  -[HMDStereoPairSettingsController _homeUUID]
  -[HMDStereoPairSettingsController _mediaSystems]
  -[HMDStereoPairSettingsController didUpdateCurrentRunState:updatedState:forHome:]
  -[HMDStereoPairSettingsController initWithDataSource:workQueue:stateManagerFactory:]
  -[HMDStereoPairSettingsController initWithDataSource:workQueue:]
  -[HMDStereoPairSettingsController startIfPrimaryResident]
  -[HMDStereoPairSettingsController subscribeToAddedMediaSystemIfPrimaryResident:]
  -[HMDStereoPairSettingsController unsubscribeToRemovedMediaSystemIfPrimaryResident:]
  -[HMDStereoPairSettingsController stopIfPrimaryResidentChange]
  -[HMDStereoPairSettingsController _groupOwnerTopicsForMediaSystem:]
  -[HMDStereoPairSettingsController _subscribeToAddedMediaSystem:]
  -[HMDStereoPairSettingsController _processReceivedEvent:topic:home:mediaSystem:]
  -[HMDStereoPairSettingsController _postAsStereoPairEventsIfDifferentForHome:mediaSystem:keyPath:setting:]
  -[HMDStereoPairSettingsController _mediaSystemGroupOwnerAccessoryUUID:]
  -[HMDStereoPairSettingsController mediaSystemGroupOwner:]
  -[HMDStereoPairSettingsController _unsubscribeToRemovedMediaSystem:]
  -[HMDStereoPairSettingsController _currentDevicePrimaryResident]
  -[HMDStereoPairSettingsController _mediaSystemWithAccessorryUUID:]
  -[HMDStereoPairSettingsController pushLastEvent:topic:]
  -[HMDStereoPairSettingsController residentRunStateManager]
  -[HMDStereoPairSettingsController setResidentRunStateManager:]
  -[HMDStereoPairSettingsController topicToLastReceivedEvent]
  -[HMDStereoPairSettingsController setTopicToLastReceivedEvent:]


HMDCameraRecordingAnalysisNode : HMFObject
 @property  HMDResidentDevice *residentDevice
 @property  NSDictionary *metrics

  // instance methods
  -[HMDCameraRecordingAnalysisNode .cxx_destruct]
  -[HMDCameraRecordingAnalysisNode metrics]
  -[HMDCameraRecordingAnalysisNode residentDevice]
  -[HMDCameraRecordingAnalysisNode initWithResidentDevice:metrics:]


HMDMultiUserNewLanguageNotificationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *language
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDMultiUserNewLanguageNotificationLogEvent eventName]
  -[HMDMultiUserNewLanguageNotificationLogEvent attributeDescriptions]
  -[HMDMultiUserNewLanguageNotificationLogEvent .cxx_destruct]
  -[HMDMultiUserNewLanguageNotificationLogEvent language]
  -[HMDMultiUserNewLanguageNotificationLogEvent serializedEvent]
  -[HMDMultiUserNewLanguageNotificationLogEvent initWithLanugage:]


HMDSiriEndpointProfilesMessenger : NSObject <HMFLogging, HMFMessageReceiver>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDMessageRouter> *messageRouter
 @property  HMDSiriEndpointProfileMessageHandler *messageHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDSiriEndpointProfilesMessenger logCategory]

  // instance methods
  -[HMDSiriEndpointProfilesMessenger logIdentifier]
  -[HMDSiriEndpointProfilesMessenger messageHandler]
  -[HMDSiriEndpointProfilesMessenger .cxx_destruct]
  -[HMDSiriEndpointProfilesMessenger messageTargetUUID]
  -[HMDSiriEndpointProfilesMessenger messageDispatcher]
  -[HMDSiriEndpointProfilesMessenger registerForMessagesWithHome:]
  -[HMDSiriEndpointProfilesMessenger routeSiriEndpointApplyOnboardingSelectionsRequestMessage:]
  -[HMDSiriEndpointProfilesMessenger routeSiriEndpointDeleteSiriHistoryMessage:]
  -[HMDSiriEndpointProfilesMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:]
  -[HMDSiriEndpointProfilesMessenger intermediateApplyOnboardingSelectionsRequestMessageForMessage:error:]
  -[HMDSiriEndpointProfilesMessenger messageRouter]


HMDCameraClipUploadVideoSegmentOperation : HMDCameraClipAppendStreamingAssetOperation
  // class methods
  +[HMDCameraClipUploadVideoSegmentOperation shouldRetry]
  +[HMDCameraClipUploadVideoSegmentOperation logCategory]
  +[HMDCameraClipUploadVideoSegmentOperation cameraClipOperationType]
  +[HMDCameraClipUploadVideoSegmentOperation streamingAssetPropertyName]
  +[HMDCameraClipUploadVideoSegmentOperation metadataPropertyName]


HMDRemoteReadRequestMessage : HMFObject
 @property  HMFMessage *readMessage
 @property  NSUUID *accessoryUUID
 @property  NSObject<OS_dispatch_queue> *responseQueue
 @property  HMFActivity *activity

  // instance methods
  -[HMDRemoteReadRequestMessage accessoryUUID]
  -[HMDRemoteReadRequestMessage .cxx_destruct]
  -[HMDRemoteReadRequestMessage activity]
  -[HMDRemoteReadRequestMessage responseQueue]
  -[HMDRemoteReadRequestMessage initWithReadMessage:accessoryUUID:responseQueue:activity:]
  -[HMDRemoteReadRequestMessage readMessage]


HMDResidentCommunicationHandler : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMapTable *deviceMapping
 @property  NSMutableArray *pendingReadRequests
 @property  NSMapTable *dispatchedReadRequests
 @property  HMFTimer *multiReadCoalesceTimer
 @property  NSUUID *homeUUID
 @property  BOOL ownerUser
 @property  HMDMessageDispatcher *remoteDispatcher
 @property  int numOutstandingReadRequests
 @property  HMDDevice *preferredDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDResidentCommunicationHandler logCategory]
  +[HMDResidentCommunicationHandler _processResponseForMultireadRequest:overallError:response:]
  +[HMDResidentCommunicationHandler createResponseSubset:overallError:readRequest:error:]
  +[HMDResidentCommunicationHandler _clearAllGeneratedRequests:error:]
  +[HMDResidentCommunicationHandler _clearAllPendingRequests:error:]

  // instance methods
  -[HMDResidentCommunicationHandler timerDidFire:]
  -[HMDResidentCommunicationHandler logIdentifier]
  -[HMDResidentCommunicationHandler workQueue]
  -[HMDResidentCommunicationHandler containsDevice:]
  -[HMDResidentCommunicationHandler dealloc]
  -[HMDResidentCommunicationHandler .cxx_destruct]
  -[HMDResidentCommunicationHandler homeUUID]
  -[HMDResidentCommunicationHandler preferredDevice]
  -[HMDResidentCommunicationHandler isOwnerUser]
  -[HMDResidentCommunicationHandler deviceForType:]
  -[HMDResidentCommunicationHandler initWithHome:remoteDispatcher:]
  -[HMDResidentCommunicationHandler setDevice:forType:]
  -[HMDResidentCommunicationHandler removeDeviceForType:]
  -[HMDResidentCommunicationHandler preferredDeviceType]
  -[HMDResidentCommunicationHandler redispatchMessage:target:responseQueue:]
  -[HMDResidentCommunicationHandler _sendMultipleCharacteristicRead]
  -[HMDResidentCommunicationHandler _processResponse:overallError:messageIdentifier:]
  -[HMDResidentCommunicationHandler deviceMapping]
  -[HMDResidentCommunicationHandler setDeviceMapping:]
  -[HMDResidentCommunicationHandler pendingReadRequests]
  -[HMDResidentCommunicationHandler dispatchedReadRequests]
  -[HMDResidentCommunicationHandler multiReadCoalesceTimer]
  -[HMDResidentCommunicationHandler setMultiReadCoalesceTimer:]
  -[HMDResidentCommunicationHandler remoteDispatcher]
  -[HMDResidentCommunicationHandler numOutstandingReadRequests]
  -[HMDResidentCommunicationHandler setNumOutstandingReadRequests:]


HMDCameraIDSDeviceConnectionReceiver : HMDCameraIDSDeviceConnection <HMDCameraRemoteStreamReceiverSocketProtocol>
 @property  <HMDCameraIDSDeviceConnectionReceiverDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  int remoteAudioSocket
 @property  int remoteVideoSocket
 @property  IDSSession *session
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraIDSDeviceConnectionReceiver logCategory]

  // instance methods
  -[HMDCameraIDSDeviceConnectionReceiver session]
  -[HMDCameraIDSDeviceConnectionReceiver logIdentifier]
  -[HMDCameraIDSDeviceConnectionReceiver setDelegate:]
  -[HMDCameraIDSDeviceConnectionReceiver delegate]
  -[HMDCameraIDSDeviceConnectionReceiver setDelegateQueue:]
  -[HMDCameraIDSDeviceConnectionReceiver dealloc]
  -[HMDCameraIDSDeviceConnectionReceiver .cxx_destruct]
  -[HMDCameraIDSDeviceConnectionReceiver delegateQueue]
  -[HMDCameraIDSDeviceConnectionReceiver initWithSessionID:workQueue:delegate:delegateQueue:]
  -[HMDCameraIDSDeviceConnectionReceiver setUpRemoteConnectionWithDevice:]
  -[HMDCameraIDSDeviceConnectionReceiver remoteAudioSocket]
  -[HMDCameraIDSDeviceConnectionReceiver remoteVideoSocket]
  -[HMDCameraIDSDeviceConnectionReceiver _callSessionEndedWithError:]
  -[HMDCameraIDSDeviceConnectionReceiver _socketOpenedWithError:]


HMDCloudChangeNode : HMFObject
 @property  NSString *recordName
 @property  NSUUID *uuid
 @property  NSUUID *parentUuid
 @property  NSString *type
 @property  BOOL forceDelete
 @property  BOOL orphaned
 @property  HMDCloudChangeNode *parent
 @property  HMDCloudChange *change
 @property  NSMapTable *children

  // class methods
  +[HMDCloudChangeNode shortDescription]

  // instance methods
  -[HMDCloudChangeNode children]
  -[HMDCloudChangeNode setParent:]
  -[HMDCloudChangeNode initWithModel:]
  -[HMDCloudChangeNode change]
  -[HMDCloudChangeNode setChange:]
  -[HMDCloudChangeNode type]
  -[HMDCloudChangeNode setRecordName:]
  -[HMDCloudChangeNode setChildren:]
  -[HMDCloudChangeNode uuid]
  -[HMDCloudChangeNode .cxx_destruct]
  -[HMDCloudChangeNode setUuid:]
  -[HMDCloudChangeNode addChild:]
  -[HMDCloudChangeNode setType:]
  -[HMDCloudChangeNode shortDescription]
  -[HMDCloudChangeNode parent]
  -[HMDCloudChangeNode recordName]
  -[HMDCloudChangeNode init]
  -[HMDCloudChangeNode removeChild:]
  -[HMDCloudChangeNode initWithCloudRecord:]
  -[HMDCloudChangeNode initWithChange:]
  -[HMDCloudChangeNode parentUuid]
  -[HMDCloudChangeNode _initWithUUID:parentUUID:recordName:type:change:]
  -[HMDCloudChangeNode initWithRecordMapping:]
  -[HMDCloudChangeNode logChangeTreeWithIndent:]
  -[HMDCloudChangeNode updateRecordMapping:]
  -[HMDCloudChangeNode _updateWithModel:]
  -[HMDCloudChangeNode _updateWithChange:]
  -[HMDCloudChangeNode _updateWithCloudRecord:]
  -[HMDCloudChangeNode deleteChildren]
  -[HMDCloudChangeNode _allNodesInBranch]
  -[HMDCloudChangeNode _markBranchOrphaned]
  -[HMDCloudChangeNode setParentUuid:]
  -[HMDCloudChangeNode forceDelete]
  -[HMDCloudChangeNode orphaned]


HMDCloudChangeTree : HMFObject
 @property  NSMutableArray *objects
 @property  NSMapTable *objectMap
 @property  NSMapTable *recordMap
 @property  NSMapTable *branchMap
 @property  NSSet *validRootUUIDs
 @property  NSArray *objectsWithPotentialChanges
 @property  NSArray *allTransactionStoreRowIDs
 @property  NSArray *orphans
 @property  NSMutableArray *cloudChanges
 @property  NSMutableArray *invalidCloudChanges
 @property  BOOL hasValidChanges

  // class methods
  +[HMDCloudChangeTree shortDescription]
  +[HMDCloudChangeTree logCategory]
  +[HMDCloudChangeTree modelTypeCanBeOrphaned:]

  // instance methods
  -[HMDCloudChangeTree removeNode:]
  -[HMDCloudChangeTree _addNode:]
  -[HMDCloudChangeTree .cxx_destruct]
  -[HMDCloudChangeTree setObjects:]
  -[HMDCloudChangeTree objects]
  -[HMDCloudChangeTree shortDescription]
  -[HMDCloudChangeTree recordMap]
  -[HMDCloudChangeTree init]
  -[HMDCloudChangeTree orphans]
  -[HMDCloudChangeTree objectMap]
  -[HMDCloudChangeTree setObjectMap:]
  -[HMDCloudChangeTree logChangeTreeWithIndent:]
  -[HMDCloudChangeTree updateRecordMapping:]
  -[HMDCloudChangeTree initWithRootUUIDs:]
  -[HMDCloudChangeTree _objectForUUID:]
  -[HMDCloudChangeTree objectForUUID:]
  -[HMDCloudChangeTree _objectForRecordName:]
  -[HMDCloudChangeTree objectForRecordName:]
  -[HMDCloudChangeTree _findNodeWithRecordMapping:]
  -[HMDCloudChangeTree _updateNode:oldRecordName:]
  -[HMDCloudChangeTree updateModel:]
  -[HMDCloudChangeTree updateChange:]
  -[HMDCloudChangeTree updateNode:withCloudRecord:]
  -[HMDCloudChangeTree findAndDeletedChildren]
  -[HMDCloudChangeTree findAndMarkOrphanedBranches]
  -[HMDCloudChangeTree objectsWithPotentialChanges]
  -[HMDCloudChangeTree allTransactionStoreRowIDs]
  -[HMDCloudChangeTree cloudChanges]
  -[HMDCloudChangeTree invalidCloudChanges]
  -[HMDCloudChangeTree recordMapWithFilter:]
  -[HMDCloudChangeTree hasValidChanges]
  -[HMDCloudChangeTree setRecordMap:]
  -[HMDCloudChangeTree branchMap]
  -[HMDCloudChangeTree setBranchMap:]
  -[HMDCloudChangeTree validRootUUIDs]
  -[HMDCloudChangeTree setValidRootUUIDs:]


HMDCounterRateLoggingTrigger : NSObject <HMDEventCounterObserver>
 @property  unsigned long windowSize
 @property  unsigned long windowThreshold
 @property  NSString *counterName
 @property  BOOL uploadImmediately
 @property  @? timeSourceBlock
 @property  @? loggingBlock
 @property  unsigned long intervalSize
 @property  ^Q intervalCounts
 @property  unsigned long windowCount
 @property  unsigned long maxWindowCount
 @property  unsigned long lastUpdatedInterval

  // instance methods
  -[HMDCounterRateLoggingTrigger windowSize]
  -[HMDCounterRateLoggingTrigger dealloc]
  -[HMDCounterRateLoggingTrigger .cxx_destruct]
  -[HMDCounterRateLoggingTrigger counterName]
  -[HMDCounterRateLoggingTrigger updatedCounterForEventName:fromOldValue:toNewValue:]
  -[HMDCounterRateLoggingTrigger initWithThreshold:windowSize:counterName:]
  -[HMDCounterRateLoggingTrigger initWithThreshold:windowSize:counterName:uploadImmediately:]
  -[HMDCounterRateLoggingTrigger initWithThreshold:windowSize:counterName:uploadImmediately:timeSourceBlock:loggingBlock:]
  -[HMDCounterRateLoggingTrigger logRateTrigger:triggerValue:]
  -[HMDCounterRateLoggingTrigger windowThreshold]
  -[HMDCounterRateLoggingTrigger uploadImmediately]
  -[HMDCounterRateLoggingTrigger timeSourceBlock]
  -[HMDCounterRateLoggingTrigger loggingBlock]
  -[HMDCounterRateLoggingTrigger intervalSize]
  -[HMDCounterRateLoggingTrigger intervalCounts]
  -[HMDCounterRateLoggingTrigger setIntervalCounts:]
  -[HMDCounterRateLoggingTrigger windowCount]
  -[HMDCounterRateLoggingTrigger setWindowCount:]
  -[HMDCounterRateLoggingTrigger maxWindowCount]
  -[HMDCounterRateLoggingTrigger setMaxWindowCount:]
  -[HMDCounterRateLoggingTrigger lastUpdatedInterval]
  -[HMDCounterRateLoggingTrigger setLastUpdatedInterval:]


HMDMediaPreference : HMFPreference <HMFObject>
 @property  HMFPreference *appleMediaPreference
 @property  HMFPreference *airPlay2Preference
 @property  HMFSystemPreference *homeKitPreference
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaPreference loadEnableMediaAccessories]

  // instance methods
  -[HMDMediaPreference propertyDescription]
  -[HMDMediaPreference stringValue]
  -[HMDMediaPreference .cxx_destruct]
  -[HMDMediaPreference numberValue]
  -[HMDMediaPreference initWithKey:options:defaultValue:]
  -[HMDMediaPreference boolValue]
  -[HMDMediaPreference appleMediaPreference]
  -[HMDMediaPreference airPlay2Preference]
  -[HMDMediaPreference homeKitPreference]


HMDAirPlay2Preference : HMFPreference <HMFObject>
 @property  HMFSystemPreference *airPlayPreference
 @property  HMFSystemPreference *homeKitPreference
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAirPlay2Preference loadEnableAirPlay2Accessories]

  // instance methods
  -[HMDAirPlay2Preference propertyDescription]
  -[HMDAirPlay2Preference stringValue]
  -[HMDAirPlay2Preference .cxx_destruct]
  -[HMDAirPlay2Preference numberValue]
  -[HMDAirPlay2Preference initWithKey:options:defaultValue:]
  -[HMDAirPlay2Preference boolValue]
  -[HMDAirPlay2Preference homeKitPreference]
  -[HMDAirPlay2Preference airPlayPreference]


HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration : NSObject
 @property  NSString *type
 @property  NSString *format
 @property  NSArray *values
 @property  NSNumber *settlingTime

  // instance methods
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration values]
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration type]
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration .cxx_destruct]
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration format]
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration settlingTime]
  -[HMDAccessoryFirmwareUpdatePolicyCharacteristicConfiguration initWithType:format:values:settlingTime:]


HMDAccessoryFirmwareUpdatePolicyCriteria : NSObject
 @property  BOOL noUserAtHome
 @property  BOOL anyUserAtHome
 @property  BOOL checkForScheduledAutomation
 @property  NSArray *characteristicConfigurations
 @property  HMDAccessoryFirmwareUpdateTimeWindow *updateTimeWindow

  // instance methods
  -[HMDAccessoryFirmwareUpdatePolicyCriteria .cxx_destruct]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria init]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria noUserAtHome]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria setNoUserAtHome:]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria anyUserAtHome]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria setAnyUserAtHome:]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria checkForScheduledAutomation]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria setCheckForScheduledAutomation:]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria characteristicConfigurations]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria setCharacteristicConfigurations:]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria updateTimeWindow]
  -[HMDAccessoryFirmwareUpdatePolicyCriteria setUpdateTimeWindow:]


HMDAccessoryFirmwareUpdatePolicyServiceConfiguration : NSObject
 @property  NSString *type
 @property  NSString *category
 @property  HMDAccessoryFirmwareUpdatePolicyCriteria *criteria

  // instance methods
  -[HMDAccessoryFirmwareUpdatePolicyServiceConfiguration type]
  -[HMDAccessoryFirmwareUpdatePolicyServiceConfiguration category]
  -[HMDAccessoryFirmwareUpdatePolicyServiceConfiguration .cxx_destruct]
  -[HMDAccessoryFirmwareUpdatePolicyServiceConfiguration criteria]
  -[HMDAccessoryFirmwareUpdatePolicyServiceConfiguration initWithType:category:criteria:]


HMDPrimaryElectionMeshInformation : NSObject
 @property  HMDResidentDevice *responder
 @property  HMDResidentDevice *leader
 @property  HMDResidentDevice *primary
 @property  unsigned long reachableIPAccessories
 @property  unsigned long residentsInMesh

  // class methods
  +[HMDPrimaryElectionMeshInformation meshInformationWithMeshController:home:]
  +[HMDPrimaryElectionMeshInformation meshInformationFromMessagePayload:home:]

  // instance methods
  -[HMDPrimaryElectionMeshInformation leader]
  -[HMDPrimaryElectionMeshInformation responder]
  -[HMDPrimaryElectionMeshInformation .cxx_destruct]
  -[HMDPrimaryElectionMeshInformation primary]
  -[HMDPrimaryElectionMeshInformation redactedDescription]
  -[HMDPrimaryElectionMeshInformation initWithResponder:leader:primary:reachableIPAccessories:residentsInMesh:]
  -[HMDPrimaryElectionMeshInformation toMessagePayload]
  -[HMDPrimaryElectionMeshInformation reachableIPAccessories]
  -[HMDPrimaryElectionMeshInformation residentsInMesh]


HMDPrimaryElectionFindPrimaryMeshOperation : HMFOperation <HMFLogging>
 @property  NSArray *results
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPrimaryElectionFindPrimaryMeshOperation logCategory]

  // instance methods
  -[HMDPrimaryElectionFindPrimaryMeshOperation logIdentifier]
  -[HMDPrimaryElectionFindPrimaryMeshOperation .cxx_destruct]
  -[HMDPrimaryElectionFindPrimaryMeshOperation results]
  -[HMDPrimaryElectionFindPrimaryMeshOperation main]
  -[HMDPrimaryElectionFindPrimaryMeshOperation initWithContext:otherResidents:]


HMDMROutputDeviceStatus : NSObject
 @property  HMDMRAVEndpoint *outputEndpoint
 @property  NSString *outputUID
 @property  NSError *error

  // instance methods
  -[HMDMROutputDeviceStatus error]
  -[HMDMROutputDeviceStatus .cxx_destruct]
  -[HMDMROutputDeviceStatus isEqual:]
  -[HMDMROutputDeviceStatus initWithOutputUID:]
  -[HMDMROutputDeviceStatus initWithOutputEndpoint:]
  -[HMDMROutputDeviceStatus initWithOutputUID:error:]
  -[HMDMROutputDeviceStatus initWithOutputEndpoint:error:]
  -[HMDMROutputDeviceStatus outputEndpoint]
  -[HMDMROutputDeviceStatus outputUID]


HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface : HMFObject <HMDMRSetEndpointVolumeOperationExternalObjectInterface>
  // instance methods
  -[HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface createAssistantDiscovery]
  -[HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface createAssistantConnection]
  -[HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface copyMRAVEndpointOutputDevices:]
  -[HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface setMRAVOutputDeviceVolume:endpoint:outputDeviceUID:queue:]
  -[HMDMRSetEndpointVolumeOperationDefaultExternalObjectInterface getMRAVEndpointOutputDeviceUIDVolumeControlCapabilitiesForEndpoint:outputDeviceUID:queue:]


HMDMRSetEndpointVolumeOperation : HMFOperation <HMFLogging, HMFObject>
 @property  <HMDMPCAssistantDiscovery> *discovery
 @property  NSError *partialExecutionError
 @property  <HMDMRSetEndpointVolumeOperationExternalObjectInterface> *externalObjectInterface
 @property  NSNumber *volume
 @property  NSArray *routeIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDMRSetEndpointVolumeOperation shortDescription]
  +[HMDMRSetEndpointVolumeOperation logCategory]

  // instance methods
  -[HMDMRSetEndpointVolumeOperation attributeDescriptions]
  -[HMDMRSetEndpointVolumeOperation discovery]
  -[HMDMRSetEndpointVolumeOperation privateDescription]
  -[HMDMRSetEndpointVolumeOperation .cxx_destruct]
  -[HMDMRSetEndpointVolumeOperation volume]
  -[HMDMRSetEndpointVolumeOperation shortDescription]
  -[HMDMRSetEndpointVolumeOperation setDiscovery:]
  -[HMDMRSetEndpointVolumeOperation main]
  -[HMDMRSetEndpointVolumeOperation initWithRouteIDs:volume:externalObjectInterface:]
  -[HMDMRSetEndpointVolumeOperation initWithRouteIDs:volume:]
  -[HMDMRSetEndpointVolumeOperation generateOverallResultAndFinishWithDeviceStatuses:]
  -[HMDMRSetEndpointVolumeOperation cancelOnSetup]
  -[HMDMRSetEndpointVolumeOperation discoverRemoteControlEndpointsForUIDs:]
  -[HMDMRSetEndpointVolumeOperation connectToEndpoint:connection:]
  -[HMDMRSetEndpointVolumeOperation getVolumeCapabilitiesForEndpoint:outputDeviceUID:]
  -[HMDMRSetEndpointVolumeOperation setVolumeOnEndpoint:outputDeviceUID:]
  -[HMDMRSetEndpointVolumeOperation routeIDs]
  -[HMDMRSetEndpointVolumeOperation partialExecutionError]
  -[HMDMRSetEndpointVolumeOperation setPartialExecutionError:]
  -[HMDMRSetEndpointVolumeOperation externalObjectInterface]


HMDCameraSignificantEventFetchHeroFrameContext : HMFObject
 @property  HMCameraSignificantEvent *significantEvent
 @property  HMDCameraSnapshotIDSRelayReceiver *relayReceiver

  // instance methods
  -[HMDCameraSignificantEventFetchHeroFrameContext .cxx_destruct]
  -[HMDCameraSignificantEventFetchHeroFrameContext significantEvent]
  -[HMDCameraSignificantEventFetchHeroFrameContext initWithSignificantEvent:relayReceiver:]
  -[HMDCameraSignificantEventFetchHeroFrameContext relayReceiver]


HMDCameraSignificantEventListener : HMFObject <HMFMessageReceiver, HMFLogging, HMDCameraSnapshotIDSRelayReceiverDelegate>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMutableDictionary *fetchHeroFrameContextBySessionUUID
 @property  NSString *logIdentifier
 @property  @? idsRelayReceiverFactory
 @property  <HMDCameraSignificantEventListenerDelegate> *delegate
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSignificantEventListener logCategory]

  // instance methods
  -[HMDCameraSignificantEventListener logIdentifier]
  -[HMDCameraSignificantEventListener setDelegate:]
  -[HMDCameraSignificantEventListener workQueue]
  -[HMDCameraSignificantEventListener delegate]
  -[HMDCameraSignificantEventListener .cxx_destruct]
  -[HMDCameraSignificantEventListener messageTargetUUID]
  -[HMDCameraSignificantEventListener start]
  -[HMDCameraSignificantEventListener messageReceiveQueue]
  -[HMDCameraSignificantEventListener messageDispatcher]
  -[HMDCameraSignificantEventListener handleCameraSignificantEventDidOccurMessage:]
  -[HMDCameraSignificantEventListener relayReceiverDidAcceptIDSInvitation:]
  -[HMDCameraSignificantEventListener relayReceiverIDSSessionDidStart:]
  -[HMDCameraSignificantEventListener relayReceiver:didReceiveData:error:]
  -[HMDCameraSignificantEventListener initWithCamera:]
  -[HMDCameraSignificantEventListener initWithMessageTargetUUID:messageDispatcher:workQueue:logIdentifier:]
  -[HMDCameraSignificantEventListener fetchHeroFrameContextBySessionUUID]
  -[HMDCameraSignificantEventListener idsRelayReceiverFactory]
  -[HMDCameraSignificantEventListener setIdsRelayReceiverFactory:]


HMDDataStreamFragment : HMFObject <NSCopying>
 @property  NSData *data
 @property  NSNumber *sequenceNumber
 @property  NSString *type
 @property  BOOL initial

  // instance methods
  -[HMDDataStreamFragment type]
  -[HMDDataStreamFragment attributeDescriptions]
  -[HMDDataStreamFragment .cxx_destruct]
  -[HMDDataStreamFragment isInitial]
  -[HMDDataStreamFragment copyWithZone:]
  -[HMDDataStreamFragment sequenceNumber]
  -[HMDDataStreamFragment isEqual:]
  -[HMDDataStreamFragment data]
  -[HMDDataStreamFragment initWithData:sequenceNumber:type:]


HMDBulletinBoardNotification : HMFObject <NSSecureCoding, HMFMessageReceiver, HMFLogging, HMFDumpState>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDHome *home
 @property  HMDService *service
 @property  BOOL enabled
 @property  NSPredicate *condition
 @property  HMDBulletinBoardNotificationServiceGroup *notificationServiceGroup
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBulletinBoardNotification supportsSecureCoding]
  +[HMDBulletinBoardNotification logCategory]
  +[HMDBulletinBoardNotification supportsBulletinNotificationGroup:]

  // instance methods
  -[HMDBulletinBoardNotification dumpState]
  -[HMDBulletinBoardNotification home]
  -[HMDBulletinBoardNotification condition]
  -[HMDBulletinBoardNotification logIdentifier]
  -[HMDBulletinBoardNotification initWithService:]
  -[HMDBulletinBoardNotification encodeWithCoder:]
  -[HMDBulletinBoardNotification workQueue]
  -[HMDBulletinBoardNotification setWorkQueue:]
  -[HMDBulletinBoardNotification attributeDescriptions]
  -[HMDBulletinBoardNotification dealloc]
  -[HMDBulletinBoardNotification setService:]
  -[HMDBulletinBoardNotification .cxx_destruct]
  -[HMDBulletinBoardNotification setEnabled:]
  -[HMDBulletinBoardNotification messageTargetUUID]
  -[HMDBulletinBoardNotification service]
  -[HMDBulletinBoardNotification setCondition:]
  -[HMDBulletinBoardNotification messageReceiveQueue]
  -[HMDBulletinBoardNotification msgDispatcher]
  -[HMDBulletinBoardNotification init]
  -[HMDBulletinBoardNotification isEnabled]
  -[HMDBulletinBoardNotification initWithCoder:]
  -[HMDBulletinBoardNotification setMsgDispatcher:]
  -[HMDBulletinBoardNotification notificationServiceGroup]
  -[HMDBulletinBoardNotification configureWithWorkQueue:messageDispatcher:]
  -[HMDBulletinBoardNotification configureBulletinNotification]
  -[HMDBulletinBoardNotification _handleBulletinBoardNotificationCommitRequest:]
  -[HMDBulletinBoardNotification registerNotificationHandlers]
  -[HMDBulletinBoardNotification setNotificationServiceGroup:]
  -[HMDBulletinBoardNotification _updateLocalSettingsWithEnabled:condition:forMessage:]
  -[HMDBulletinBoardNotification registerForCharacteristicNotifications]


HMDMultiUserSettingsMetricsEventDispatcher : HMFObject <HMFLogging, HMDLogEventDailyTaskRunner>
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  <HMDMultiUserSettingsMetricsEventDispatcherDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMultiUserSettingsMetricsEventDispatcher logCategory]

  // instance methods
  -[HMDMultiUserSettingsMetricsEventDispatcher identifier]
  -[HMDMultiUserSettingsMetricsEventDispatcher logIdentifier]
  -[HMDMultiUserSettingsMetricsEventDispatcher dataSource]
  -[HMDMultiUserSettingsMetricsEventDispatcher .cxx_destruct]
  -[HMDMultiUserSettingsMetricsEventDispatcher setDataSource:]
  -[HMDMultiUserSettingsMetricsEventDispatcher logEventSubmitter]
  -[HMDMultiUserSettingsMetricsEventDispatcher runDailyTask]
  -[HMDMultiUserSettingsMetricsEventDispatcher dailyScheduler]
  -[HMDMultiUserSettingsMetricsEventDispatcher initWithIdentifier:logEventSubmitter:dailyScheduler:]
  -[HMDMultiUserSettingsMetricsEventDispatcher registerForDailyMultiUserSettingsEvents]
  -[HMDMultiUserSettingsMetricsEventDispatcher submitMultiUserSettingsDailyEvent]


HMDConfigurationLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long instanceId
 @property  NSArray *homeConfigurations
 @property  unsigned long totalHomes
 @property  unsigned long totalNonEmptyHomes
 @property  unsigned long totalOwnedHomes
 @property  unsigned long totalResidentEnabledHomes
 @property  unsigned long totalHomeCategoryBitMask
 @property  unsigned long totalAppleMediaCategoryBitMask
 @property  unsigned long totalThirdPartyMediaCategoryBitMask
 @property  unsigned long totalUsers
 @property  unsigned long totalAdminUsers
 @property  unsigned long totalAccessories
 @property  unsigned long totalCertifiedAccessories
 @property  unsigned long totalSmartHomeAccessories
 @property  unsigned long totalHAPAccessories
 @property  unsigned long totalHAPIPAccessories
 @property  unsigned long totalHAPBTAccessories
 @property  unsigned long totalCHIPAccessories
 @property  unsigned long totalThreadAccessories
 @property  unsigned long totalBridgedAccessories
 @property  unsigned long totalTelevisionServiceAccessories
 @property  unsigned long totalCameraAccessories
 @property  unsigned long totalCameraAccessoriesRecordingEnabled
 @property  unsigned long totalAppleMediaAccessories
 @property  unsigned long totalAppleAudioAccessories
 @property  unsigned long totalAppleTVAccessories
 @property  unsigned long totalThirdPartyMediaAccessories
 @property  unsigned long totalWholeHouseAudioAccessories
 @property  unsigned long totalHAPSpeakerAccessories
 @property  unsigned long totalEnabledResidents
 @property  unsigned long totalScenes
 @property  unsigned long totalTriggers
 @property  unsigned long totalActiveTriggers
 @property  unsigned int databaseSize
 @property  unsigned int metadataVersion
 @property  BOOL isResidentCapable
 @property  BOOL isResidentEnabled
 @property  BOOL isPrimaryResidentForSomeHome
 @property  BOOL isResidentFirstEnabledAnyHome
 @property  BOOL isResidentElectionV2EnabledAnyHome
 @property  BOOL isDeviceHH2Enabled
 @property  BOOL isTelevisionOnlyConfiguration
 @property  BOOL isMediaOnlyConfiguration
 @property  NSDictionary *homesCategorizationCommonDimensionsFormattedForCoreAnalytics
 @property  NSDictionary *deviceCapabilitiesAndEnablementsCommonDimensionsFormattedForCoreAnalytics
 @property  NSDictionary *histogrammedAggregateHomeDataCommonDimensionsFormattedForCoreAnalytics

  // instance methods
  -[HMDConfigurationLogEvent instanceId]
  -[HMDConfigurationLogEvent .cxx_destruct]
  -[HMDConfigurationLogEvent metadataVersion]
  -[HMDConfigurationLogEvent databaseSize]
  -[HMDConfigurationLogEvent isResidentCapable]
  -[HMDConfigurationLogEvent isSubmitted]
  -[HMDConfigurationLogEvent AWDMessageType]
  -[HMDConfigurationLogEvent metricForAWD]
  -[HMDConfigurationLogEvent initWithHomeManager:metadataVersion:]
  -[HMDConfigurationLogEvent initWithHomeConfigurations:]
  -[HMDConfigurationLogEvent createDeviceCapabilitiesAndEnablementsCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent createHomesCategorizationCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent createHistogrammedAggregateHomeDataCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent isTelevisionOnlyConfiguration]
  -[HMDConfigurationLogEvent isMediaOnlyConfiguration]
  -[HMDConfigurationLogEvent homeConfigurations]
  -[HMDConfigurationLogEvent totalHomes]
  -[HMDConfigurationLogEvent totalNonEmptyHomes]
  -[HMDConfigurationLogEvent totalOwnedHomes]
  -[HMDConfigurationLogEvent totalResidentEnabledHomes]
  -[HMDConfigurationLogEvent totalHomeCategoryBitMask]
  -[HMDConfigurationLogEvent totalAppleMediaCategoryBitMask]
  -[HMDConfigurationLogEvent totalThirdPartyMediaCategoryBitMask]
  -[HMDConfigurationLogEvent totalUsers]
  -[HMDConfigurationLogEvent totalAdminUsers]
  -[HMDConfigurationLogEvent totalAccessories]
  -[HMDConfigurationLogEvent totalCertifiedAccessories]
  -[HMDConfigurationLogEvent totalSmartHomeAccessories]
  -[HMDConfigurationLogEvent totalHAPAccessories]
  -[HMDConfigurationLogEvent totalHAPIPAccessories]
  -[HMDConfigurationLogEvent totalHAPBTAccessories]
  -[HMDConfigurationLogEvent totalCHIPAccessories]
  -[HMDConfigurationLogEvent totalThreadAccessories]
  -[HMDConfigurationLogEvent totalBridgedAccessories]
  -[HMDConfigurationLogEvent totalTelevisionServiceAccessories]
  -[HMDConfigurationLogEvent totalCameraAccessories]
  -[HMDConfigurationLogEvent totalCameraAccessoriesRecordingEnabled]
  -[HMDConfigurationLogEvent totalAppleMediaAccessories]
  -[HMDConfigurationLogEvent totalAppleAudioAccessories]
  -[HMDConfigurationLogEvent totalAppleTVAccessories]
  -[HMDConfigurationLogEvent totalThirdPartyMediaAccessories]
  -[HMDConfigurationLogEvent totalWholeHouseAudioAccessories]
  -[HMDConfigurationLogEvent totalHAPSpeakerAccessories]
  -[HMDConfigurationLogEvent totalEnabledResidents]
  -[HMDConfigurationLogEvent totalScenes]
  -[HMDConfigurationLogEvent totalTriggers]
  -[HMDConfigurationLogEvent totalActiveTriggers]
  -[HMDConfigurationLogEvent isResidentEnabled]
  -[HMDConfigurationLogEvent isPrimaryResidentForSomeHome]
  -[HMDConfigurationLogEvent isResidentFirstEnabledAnyHome]
  -[HMDConfigurationLogEvent isResidentElectionV2EnabledAnyHome]
  -[HMDConfigurationLogEvent isDeviceHH2Enabled]
  -[HMDConfigurationLogEvent homesCategorizationCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent deviceCapabilitiesAndEnablementsCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent histogrammedAggregateHomeDataCommonDimensionsFormattedForCoreAnalytics]
  -[HMDConfigurationLogEvent generateAWDHomeConfiguration:]
  -[HMDConfigurationLogEvent getHomeConfiguration:]
  -[HMDConfigurationLogEvent convertToAWDMultiUserSettingsList:]
  -[HMDConfigurationLogEvent convertToAWDMultiUserSettings:]
  -[HMDConfigurationLogEvent convertToAWDMultiUserValueType:]
  -[HMDConfigurationLogEvent convertToAWDNetworkProtectionStatus:]


_HMDDeviceHandle : HMFObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  BOOL local
 @property  BOOL global
 @property  HMDAccountHandle *accountHandle
 @property  NSString *destination

  // class methods
  +[_HMDDeviceHandle supportsSecureCoding]
  +[_HMDDeviceHandle identifierNamespace]
  +[_HMDDeviceHandle isValidDestination:]

  // instance methods
  -[_HMDDeviceHandle identifier]
  -[_HMDDeviceHandle destination]
  -[_HMDDeviceHandle initWithDestination:]
  -[_HMDDeviceHandle encodeWithCoder:]
  -[_HMDDeviceHandle .cxx_destruct]
  -[_HMDDeviceHandle initWithIdentifier:]
  -[_HMDDeviceHandle copyWithZone:]
  -[_HMDDeviceHandle isLocal]
  -[_HMDDeviceHandle init]
  -[_HMDDeviceHandle initWithCoder:]
  -[_HMDDeviceHandle accountHandle]
  -[_HMDDeviceHandle isGlobal]


_HMDGlobalDeviceHandle : _HMDDeviceHandle
 @property  HMDAccountHandle *accountHandle
 @property  NSData *pushToken

  // class methods
  +[_HMDGlobalDeviceHandle supportsSecureCoding]
  +[_HMDGlobalDeviceHandle isValidDestination:]

  // instance methods
  -[_HMDGlobalDeviceHandle pushToken]
  -[_HMDGlobalDeviceHandle destination]
  -[_HMDGlobalDeviceHandle initWithDestination:]
  -[_HMDGlobalDeviceHandle encodeWithCoder:]
  -[_HMDGlobalDeviceHandle privateDescription]
  -[_HMDGlobalDeviceHandle .cxx_destruct]
  -[_HMDGlobalDeviceHandle isEqual:]
  -[_HMDGlobalDeviceHandle initWithCoder:]
  -[_HMDGlobalDeviceHandle accountHandle]
  -[_HMDGlobalDeviceHandle isGlobal]
  -[_HMDGlobalDeviceHandle initWithPushToken:accountHandle:]


_HMDLocalDeviceHandle : _HMDDeviceHandle
 @property  NSUUID *deviceIdentifier

  // class methods
  +[_HMDLocalDeviceHandle supportsSecureCoding]
  +[_HMDLocalDeviceHandle isValidDestination:]

  // instance methods
  -[_HMDLocalDeviceHandle destination]
  -[_HMDLocalDeviceHandle deviceIdentifier]
  -[_HMDLocalDeviceHandle initWithDestination:]
  -[_HMDLocalDeviceHandle encodeWithCoder:]
  -[_HMDLocalDeviceHandle privateDescription]
  -[_HMDLocalDeviceHandle .cxx_destruct]
  -[_HMDLocalDeviceHandle isLocal]
  -[_HMDLocalDeviceHandle isEqual:]
  -[_HMDLocalDeviceHandle initWithCoder:]
  -[_HMDLocalDeviceHandle initWithDeviceIdentifier:]


HMDDeviceHandle : HMFObject <NSCopying, NSSecureCoding>
 @property  _HMDDeviceHandle *internal
 @property  HMDAccountHandle *accountHandle
 @property  NSString *destination
 @property  NSData *pushToken
 @property  BOOL local
 @property  BOOL global
 @property  NSUUID *identifier

  // class methods
  +[HMDDeviceHandle supportsSecureCoding]
  +[HMDDeviceHandle deviceHandleForDestination:]
  +[HMDDeviceHandle deviceHandleForDeviceIdentifier:]

  // instance methods
  -[HMDDeviceHandle pushToken]
  -[HMDDeviceHandle identifier]
  -[HMDDeviceHandle destination]
  -[HMDDeviceHandle encodeWithCoder:]
  -[HMDDeviceHandle attributeDescriptions]
  -[HMDDeviceHandle .cxx_destruct]
  -[HMDDeviceHandle shortDescription]
  -[HMDDeviceHandle copyWithZone:]
  -[HMDDeviceHandle isLocal]
  -[HMDDeviceHandle internal]
  -[HMDDeviceHandle isEqual:]
  -[HMDDeviceHandle init]
  -[HMDDeviceHandle initWithCoder:]
  -[HMDDeviceHandle initWithInternal:]
  -[HMDDeviceHandle accountHandle]
  -[HMDDeviceHandle isGlobal]
  -[HMDDeviceHandle matchesPushToken:]


HMDBiomeMigrationManager : HMFObject
 @property  HMDDuetEventManager *duetEventManager
 @property  HMDBiomeEventManager *biomeEventManager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDBiomeMigrationManagerDataSource> *dataSource

  // instance methods
  -[HMDBiomeMigrationManager dataSource]
  -[HMDBiomeMigrationManager workQueue]
  -[HMDBiomeMigrationManager .cxx_destruct]
  -[HMDBiomeMigrationManager initWithDuetEventManager:biomeEventManager:dataSource:]
  -[HMDBiomeMigrationManager migrateAllEvents:]
  -[HMDBiomeMigrationManager duetEventManager]
  -[HMDBiomeMigrationManager biomeEventManager]


HMDCloudShareTrustManager : HMFObject <HMBCloudZoneDelegate, HMBLocalZoneDelegate, HMDCloudShareMessengerDelegate, HMDCloudShareParticipantsManagerDataSource, HMDCloudShareParticipantsManagerDelegate, HMDCloudShareTrustManagerMetricsEventDispatcherDataSource, HMDDatabaseDelegate, HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDDatabase> *database
 @property  HMDCloudShareMessenger *cloudShareMessenger
 @property  BOOL ownedTrust
 @property  long long configureState
 @property  HMBCloudZone *cloudZone
 @property  HMBLocalZone *localZone
 @property  HMDCloudShareParticipantsManager *cloudShareParticipantManager
 @property  HMFTimer *requestInviteTimer
 @property  HMDCloudShareTrustManagerMetricsEventDispatcher *metricsEventDispatcher
 @property  HMBShareUserID *ownerCloudShareID
 @property  @? participantsManagerFactory
 @property  @? requestInviteTimerFactory
 @property  <HMDCloudShareTrustManagerDataSource> *dataSource
 @property  <HMDCloudShareTrustManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudShareTrustManager logCategory]

  // instance methods
  -[HMDCloudShareTrustManager _configure]
  -[HMDCloudShareTrustManager configure]
  -[HMDCloudShareTrustManager timerDidFire:]
  -[HMDCloudShareTrustManager logIdentifier]
  -[HMDCloudShareTrustManager dataSource]
  -[HMDCloudShareTrustManager setDelegate:]
  -[HMDCloudShareTrustManager delegate]
  -[HMDCloudShareTrustManager attributeDescriptions]
  -[HMDCloudShareTrustManager .cxx_destruct]
  -[HMDCloudShareTrustManager cloudZone]
  -[HMDCloudShareTrustManager localZone:didProcessModelDeletion:]
  -[HMDCloudShareTrustManager localZone:didProcessModelUpdate:]
  -[HMDCloudShareTrustManager database]
  -[HMDCloudShareTrustManager localZone:didProcessModelCreation:]
  -[HMDCloudShareTrustManager setDataSource:]
  -[HMDCloudShareTrustManager localZone]
  -[HMDCloudShareTrustManager queue]
  -[HMDCloudShareTrustManager setCloudZone:]
  -[HMDCloudShareTrustManager setLocalZone:]
  -[HMDCloudShareTrustManager cloudZone:didRemoveParticipantWithClientIdentifier:]
  -[HMDCloudShareTrustManager manager:shouldShareWithUser:]
  -[HMDCloudShareTrustManager canUseUntrustedAccountHandlesForParticipantManager:]
  -[HMDCloudShareTrustManager metricsEventDispatcher]
  -[HMDCloudShareTrustManager setMetricsEventDispatcher:]
  -[HMDCloudShareTrustManager manager:didRequestSendForInvitation:toUser:]
  -[HMDCloudShareTrustManager manager:didRequestSendForInvitation:toDevice:]
  -[HMDCloudShareTrustManager messenger:didReceiveInvitationData:completion:]
  -[HMDCloudShareTrustManager messenger:didReceiveInvitationRequestFromUser:device:]
  -[HMDCloudShareTrustManager database:didCreateZoneWithName:isPrivate:]
  -[HMDCloudShareTrustManager database:didRemoveZoneWithName:isPrivate:]
  -[HMDCloudShareTrustManager homeDidBecomeTrustZoneCapable:]
  -[HMDCloudShareTrustManager homeForCloudShareTrustManagerMetricsEventDispatcher:]
  -[HMDCloudShareTrustManager isFromOwnerForCloudShareTrustManagerMetricsEventDispatcher:]
  -[HMDCloudShareTrustManager trustConfigureStateForCloudShareTrustManagerMetricsEventDispatcher:]
  -[HMDCloudShareTrustManager trustStatusCountsForCloudShareTrustManagerMetricsEventDispatcher:]
  -[HMDCloudShareTrustManager initWithDatabase:isOwnedTrust:queue:shareMessenger:ownerCloudShareID:logEventSumbitter:dailyScheduler:]
  -[HMDCloudShareTrustManager _configureWithOwnedZone]
  -[HMDCloudShareTrustManager _configureWithSharedZone]
  -[HMDCloudShareTrustManager _requestShareInvitationForSharedZone]
  -[HMDCloudShareTrustManager _configureWithFetchZoneResult:error:]
  -[HMDCloudShareTrustManager _configureOwnerCloudShareIDWithCloudZone:]
  -[HMDCloudShareTrustManager _finishConfigure]
  -[HMDCloudShareTrustManager isTrustConfigured]
  -[HMDCloudShareTrustManager removeTrust]
  -[HMDCloudShareTrustManager updateCurrentUserCloudShareID]
  -[HMDCloudShareTrustManager updateSharedUsersCloudShareIDs]
  -[HMDCloudShareTrustManager discoverUntrustedUsers]
  -[HMDCloudShareTrustManager sendShareInvitation:toUser:device:]
  -[HMDCloudShareTrustManager _homeDidBecomeTrustZoneCapable:]
  -[HMDCloudShareTrustManager configureState]
  -[HMDCloudShareTrustManager setConfigureState:]
  -[HMDCloudShareTrustManager isFromOwner]
  -[HMDCloudShareTrustManager trustStatusCounts]
  -[HMDCloudShareTrustManager _didCreateZone]
  -[HMDCloudShareTrustManager _didRemoveZone]
  -[HMDCloudShareTrustManager _startRequestInviteTimer]
  -[HMDCloudShareTrustManager _cancelRequestInviteTimer]
  -[HMDCloudShareTrustManager cloudShareMessenger]
  -[HMDCloudShareTrustManager isOwnedTrust]
  -[HMDCloudShareTrustManager cloudShareParticipantManager]
  -[HMDCloudShareTrustManager setCloudShareParticipantManager:]
  -[HMDCloudShareTrustManager requestInviteTimer]
  -[HMDCloudShareTrustManager setRequestInviteTimer:]
  -[HMDCloudShareTrustManager ownerCloudShareID]
  -[HMDCloudShareTrustManager setOwnerCloudShareID:]
  -[HMDCloudShareTrustManager participantsManagerFactory]
  -[HMDCloudShareTrustManager setParticipantsManagerFactory:]
  -[HMDCloudShareTrustManager requestInviteTimerFactory]
  -[HMDCloudShareTrustManager setRequestInviteTimerFactory:]


HMDLightBrightnessLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *accessoryUUID
 @property  NSString *brightness
 @property  NSString *characteristicUUID
 @property  NSString *timeStamp
 @property  NSString *eventOrder
 @property  NSString *sunRiseTime
 @property  NSString *sunSetTime
 @property  NSString *homePresence
 @property  NSString *regionRange
 @property  NSString *luxLevel

  // instance methods
  -[HMDLightBrightnessLogEvent accessoryUUID]
  -[HMDLightBrightnessLogEvent brightness]
  -[HMDLightBrightnessLogEvent eventName]
  -[HMDLightBrightnessLogEvent luxLevel]
  -[HMDLightBrightnessLogEvent .cxx_destruct]
  -[HMDLightBrightnessLogEvent timeStamp]
  -[HMDLightBrightnessLogEvent eventOrder]
  -[HMDLightBrightnessLogEvent characteristicUUID]
  -[HMDLightBrightnessLogEvent serializedEvent]
  -[HMDLightBrightnessLogEvent initWithBrightness:accessoryUUID:characteristicUUID:timeStamp:homeUUID:eventOrder:sunRiseTime:sunSetTime:homePresence:regionRange:luxLevel:]
  -[HMDLightBrightnessLogEvent sunRiseTime]
  -[HMDLightBrightnessLogEvent sunSetTime]
  -[HMDLightBrightnessLogEvent homePresence]
  -[HMDLightBrightnessLogEvent regionRange]


AWDHomeKitHAPService : PBCodable <NSCopying>
 @property  BOOL hasServiceType
 @property  NSString *serviceType

  // instance methods
  -[AWDHomeKitHAPService hasServiceType]
  -[AWDHomeKitHAPService copyTo:]
  -[AWDHomeKitHAPService setServiceType:]
  -[AWDHomeKitHAPService .cxx_destruct]
  -[AWDHomeKitHAPService mergeFrom:]
  -[AWDHomeKitHAPService serviceType]
  -[AWDHomeKitHAPService dictionaryRepresentation]
  -[AWDHomeKitHAPService copyWithZone:]
  -[AWDHomeKitHAPService readFrom:]
  -[AWDHomeKitHAPService writeTo:]
  -[AWDHomeKitHAPService isEqual:]


HMDDeviceSetupSession : HMFObject <HMFLogging, HMDDeviceSetupTrackingInfoMutable, HMFMessageReceiver, HMDDeviceSetupTrackingInfoProviding>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMDDeviceSetupSessionInternal *internal
 @property  BOOL open
 @property  @? dateFactory
 @property  <HMDDeviceSetupSessionDelegate> *delegate
 @property  NSUUID *identifier
 @property  long long role
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *accessoryUUID
 @property  NSDate *startTime
 @property  NSDate *endTime
 @property  NSError *sessionError
 @property  NSString *category
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDDeviceSetupSession logCategory]
  +[HMDDeviceSetupSession isRoleSupported:]

  // instance methods
  -[HMDDeviceSetupSession accessoryUUID]
  -[HMDDeviceSetupSession setEndTime:]
  -[HMDDeviceSetupSession setCategory:]
  -[HMDDeviceSetupSession identifier]
  -[HMDDeviceSetupSession _closeWithError:]
  -[HMDDeviceSetupSession logIdentifier]
  -[HMDDeviceSetupSession startTime]
  -[HMDDeviceSetupSession clientQueue]
  -[HMDDeviceSetupSession endTime]
  -[HMDDeviceSetupSession setDelegate:]
  -[HMDDeviceSetupSession role]
  -[HMDDeviceSetupSession __registerForMessages]
  -[HMDDeviceSetupSession delegate]
  -[HMDDeviceSetupSession setStartTime:]
  -[HMDDeviceSetupSession category]
  -[HMDDeviceSetupSession .cxx_destruct]
  -[HMDDeviceSetupSession messageTargetUUID]
  -[HMDDeviceSetupSession open]
  -[HMDDeviceSetupSession messageDestination]
  -[HMDDeviceSetupSession homeManager]
  -[HMDDeviceSetupSession messageReceiveQueue]
  -[HMDDeviceSetupSession isOpen]
  -[HMDDeviceSetupSession messageDispatcher]
  -[HMDDeviceSetupSession internal]
  -[HMDDeviceSetupSession isEqual:]
  -[HMDDeviceSetupSession init]
  -[HMDDeviceSetupSession setOpen:]
  -[HMDDeviceSetupSession setAccessoryUUID:]
  -[HMDDeviceSetupSession sessionError]
  -[HMDDeviceSetupSession setSessionError:]
  -[HMDDeviceSetupSession dateFactory]
  -[HMDDeviceSetupSession _handleClose:]
  -[HMDDeviceSetupSession _handleReceiveData:]
  -[HMDDeviceSetupSession setupTrackingInfo]
  -[HMDDeviceSetupSession initWithIdentifier:role:homeManager:]
  -[HMDDeviceSetupSession initWithIdentifier:role:homeManager:dateFactory:]
  -[HMDDeviceSetupSession _sendRequestData:]


HMDDeviceSetupSessionInternal : HMFObject
 @property  unsigned long state
 @property  HMDHomeManager *homeManager
 @property  NSData *sessionData
 @property  NSDictionary *userInfo

  // class methods
  +[HMDDeviceSetupSessionInternal role]
  +[HMDDeviceSetupSessionInternal allowedClasses]
  +[HMDDeviceSetupSessionInternal isSupported]

  // instance methods
  -[HMDDeviceSetupSessionInternal initWithHomeManager:]
  -[HMDDeviceSetupSessionInternal setUserInfo:]
  -[HMDDeviceSetupSessionInternal userInfo]
  -[HMDDeviceSetupSessionInternal state]
  -[HMDDeviceSetupSessionInternal .cxx_destruct]
  -[HMDDeviceSetupSessionInternal homeManager]
  -[HMDDeviceSetupSessionInternal setState:]
  -[HMDDeviceSetupSessionInternal sessionData]
  -[HMDDeviceSetupSessionInternal setSessionData:]
  -[HMDDeviceSetupSessionInternal processSessionData:fromBundle:outAccessoryUUID:error:]


HMDDeviceSetupClientSession : HMDDeviceSetupSessionInternal <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDeviceSetupClientSession role]
  +[HMDDeviceSetupClientSession allowedClasses]
  +[HMDDeviceSetupClientSession isSupported]
  +[HMDDeviceSetupClientSession logCategory]

  // instance methods
  -[HMDDeviceSetupClientSession initWithHomeManager:]
  -[HMDDeviceSetupClientSession .cxx_destruct]
  -[HMDDeviceSetupClientSession processSessionData:fromBundle:outAccessoryUUID:error:]


HMDDeviceSetupServerSession : HMDDeviceSetupSessionInternal <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDeviceSetupServerSession role]
  +[HMDDeviceSetupServerSession allowedClasses]
  +[HMDDeviceSetupServerSession isSupported]
  +[HMDDeviceSetupServerSession logCategory]

  // instance methods
  -[HMDDeviceSetupServerSession initWithHomeManager:]
  -[HMDDeviceSetupServerSession .cxx_destruct]
  -[HMDDeviceSetupServerSession processSessionData:fromBundle:outAccessoryUUID:error:]


HMDAppleAccountSettings : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL educationMode
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  BOOL migrated
 @property  int circleChangedNotificationToken
 @property  int viewMembershipChangedNotificationToken
 @property  BOOL homeEnabled
 @property  BOOL keychainSyncEnabled
 @property  BOOL managed
 @property  BOOL ephemeral

  // class methods
  +[HMDAppleAccountSettings sharedSettings]
  +[HMDAppleAccountSettings logCategory]
  +[HMDAppleAccountSettings supportsCloudSettings]

  // instance methods
  -[HMDAppleAccountSettings synchronize]
  -[HMDAppleAccountSettings clientQueue]
  -[HMDAppleAccountSettings isManaged]
  -[HMDAppleAccountSettings isKeychainSyncEnabled]
  -[HMDAppleAccountSettings attributeDescriptions]
  -[HMDAppleAccountSettings dealloc]
  -[HMDAppleAccountSettings __synchronize]
  -[HMDAppleAccountSettings isEphemeral]
  -[HMDAppleAccountSettings .cxx_destruct]
  -[HMDAppleAccountSettings init]
  -[HMDAppleAccountSettings isEducationMode]
  -[HMDAppleAccountSettings isHomeEnabled]
  -[HMDAppleAccountSettings enableHome:userInitiated:]
  -[HMDAppleAccountSettings _notifyClientsOfUpdatedHomeState:userInitiated:]
  -[HMDAppleAccountSettings _notifyClientsOfUpdatedKeychainSyncState:]
  -[HMDAppleAccountSettings __registerForKeychainChangeNotifications]
  -[HMDAppleAccountSettings __migrateHomePreferences]
  -[HMDAppleAccountSettings updateHomeEnabled:completionHandler:]
  -[HMDAppleAccountSettings __updateHomeEnabled:userInitiated:completionHandler:]
  -[HMDAppleAccountSettings migrated]
  -[HMDAppleAccountSettings setMigrated:]
  -[HMDAppleAccountSettings circleChangedNotificationToken]
  -[HMDAppleAccountSettings setCircleChangedNotificationToken:]
  -[HMDAppleAccountSettings viewMembershipChangedNotificationToken]
  -[HMDAppleAccountSettings setViewMembershipChangedNotificationToken:]


HMDCloudShareMessenger : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDHome *home
 @property  BOOL configured
 @property  @? shareInvitationRetryHandler
 @property  <HMDCloudShareMessengerDelegate> *delegate
 @property  NSUUID *messageTargetUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCloudShareMessenger logCategory]

  // instance methods
  -[HMDCloudShareMessenger configure]
  -[HMDCloudShareMessenger home]
  -[HMDCloudShareMessenger logIdentifier]
  -[HMDCloudShareMessenger setDelegate:]
  -[HMDCloudShareMessenger workQueue]
  -[HMDCloudShareMessenger delegate]
  -[HMDCloudShareMessenger .cxx_destruct]
  -[HMDCloudShareMessenger messageTargetUUID]
  -[HMDCloudShareMessenger messageReceiveQueue]
  -[HMDCloudShareMessenger setConfigured:]
  -[HMDCloudShareMessenger messageDispatcher]
  -[HMDCloudShareMessenger isConfigured]
  -[HMDCloudShareMessenger setHome:]
  -[HMDCloudShareMessenger unconfigure]
  -[HMDCloudShareMessenger handleInviteMessage:]
  -[HMDCloudShareMessenger handleRequestInviteMessage:]
  -[HMDCloudShareMessenger initWithMessageTargetUUID:workQueue:home:]
  -[HMDCloudShareMessenger initWithMessageTargetUUID:workQueue:home:messageDispatcher:]
  -[HMDCloudShareMessenger sendShareInvitationData:toUser:minimumHomeKitVersion:requiredSupportedFeatures:completion:]
  -[HMDCloudShareMessenger sendShareInvitationData:toDevice:completion:]
  -[HMDCloudShareMessenger requestShareInvitationDataFromUser:]
  -[HMDCloudShareMessenger _sendShareInvitationData:toDestination:retryCount:activity:completion:]
  -[HMDCloudShareMessenger shareInvitationRetryHandler]
  -[HMDCloudShareMessenger setShareInvitationRetryHandler:]


HMDBulletinBoard : HMFObject <HMFLogging, HMDUserNotificationCenterDelegate, NSSecureCoding, HMDCameraBulletinBoard>
 @property  <HMDFileManager> *fileManager
 @property  NSSet *notificationCategories
 @property  NAFuture *isConfiguredFuture
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDUserNotificationCenter *notificationCenter
 @property  NSMutableDictionary *notificationRequests
 @property  NSMutableDictionary *characteristicTuples
 @property  HMDHomeManager *homeManager
 @property  Class persistentStoreClass
 @property  Class doorbellBulletinUtilitiesClass
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBulletinBoard supportsSecureCoding]
  +[HMDBulletinBoard notificationCategories]
  +[HMDBulletinBoard logCategory]
  +[HMDBulletinBoard sharedBulletinBoard]
  +[HMDBulletinBoard _supportedSecureServices]
  +[HMDBulletinBoard _supportedNonSecureServices]
  +[HMDBulletinBoard isBulletinSupportedForCharacteristicType:serviceType:]
  +[HMDBulletinBoard isBulletinSupportedForNonSecureCharacteristicType:serviceType:]
  +[HMDBulletinBoard isCriticalNonSecureServiceType:]
  +[HMDBulletinBoard bulletinSupportedCharacteristicsForService:]
  +[HMDBulletinBoard attachmentsWithFileURL:]
  +[HMDBulletinBoard createImageAttachmentByHardLinkingFile:fileManager:]
  +[HMDBulletinBoard interruptionLevelForChangedCharacteristic:]
  +[HMDBulletinBoard characteristicTupleKeyFromServiceContextID:currentType:]
  +[HMDBulletinBoard presentationValueOfCharacteristic:equalTo:]

  // instance methods
  -[HMDBulletinBoard notificationCenter]
  -[HMDBulletinBoard notificationRequests]
  -[HMDBulletinBoard encodeWithCoder:]
  -[HMDBulletinBoard workQueue]
  -[HMDBulletinBoard .cxx_destruct]
  -[HMDBulletinBoard notificationCategories]
  -[HMDBulletinBoard homeManager]
  -[HMDBulletinBoard archive]
  -[HMDBulletinBoard fileManager]
  -[HMDBulletinBoard setHomeManager:]
  -[HMDBulletinBoard setNotificationRequests:]
  -[HMDBulletinBoard init]
  -[HMDBulletinBoard initWithCoder:]
  -[HMDBulletinBoard logEventSubmitter]
  -[HMDBulletinBoard configureWithHomeManager:]
  -[HMDBulletinBoard notificationCenter:didReceiveNotificationResponse:withCompletionHandler:]
  -[HMDBulletinBoard insertImageBulletinsForChangedCharacteristics:snapshotData:completion:]
  -[HMDBulletinBoard removeBulletinWithRecordID:]
  -[HMDBulletinBoard removeCameraClipBulletinsForCameraProfile:]
  -[HMDBulletinBoard insertCameraClipSignificantEventBulletin:]
  -[HMDBulletinBoard updateDoorbellPressNotificationsWithSignificantEventBulletin:completion:]
  -[HMDBulletinBoard initWithNotificationCenter:fileManager:workQueue:]
  -[HMDBulletinBoard insertBulletinsForChangedCharacteristics:changedByThisDevice:completion:]
  -[HMDBulletinBoard insertBulletinForIncomingInvitation:]
  -[HMDBulletinBoard insertBulletinForSecureTrigger:]
  -[HMDBulletinBoard insertReachabilityEventBulletinForAccessory:reachable:date:]
  -[HMDBulletinBoard insertHomeHubReachabilityBulletinForHome:reachable:hasMultipleResidentsSupportingCameraRecording:]
  -[HMDBulletinBoard insertAccessCodeAddedBulletinForHome:]
  -[HMDBulletinBoard insertAccessCodeChangedBulletinForHome:]
  -[HMDBulletinBoard insertAccessCodeRemovedBulletinForHome:]
  -[HMDBulletinBoard insertLockOnboardingBulletinForHome:serviceType:]
  -[HMDBulletinBoard insertWalletKeySupportAddedBulletinForAccessory:]
  -[HMDBulletinBoard insertWalletKeyExpressModeSetUpBulletinForHome:]
  -[HMDBulletinBoard removeWalletKeyOnboardingBulletinForHome:]
  -[HMDBulletinBoard insertCameraAccessModeChangedBulletin:]
  -[HMDBulletinBoard insertConnectedCHIPEcosystemsChangedBulletin:]
  -[HMDBulletinBoard updateBulletinForFirmwareUpdateInHome:]
  -[HMDBulletinBoard fetchAreUserNotificationsEnabledWithCompletion:]
  -[HMDBulletinBoard insertNewRMVLanguageBulletinForHome:language:]
  -[HMDBulletinBoard refreshHomeBadgeNumber]
  -[HMDBulletinBoard removeBulletinsForHome:]
  -[HMDBulletinBoard removeBulletinsForAccessory:]
  -[HMDBulletinBoard removeBulletinsForService:]
  -[HMDBulletinBoard removeBulletinsForTrigger:]
  -[HMDBulletinBoard removeAllBulletins]
  -[HMDBulletinBoard notificationRequestsSortedByDate]
  -[HMDBulletinBoard updateContent:forNotificationWithRequestIdentifier:]
  -[HMDBulletinBoard cullBulletinsToCount:]
  -[HMDBulletinBoard removeBulletinsUsingPredicate:]
  -[HMDBulletinBoard removeNotificationRequestsWithIdentifiers:shouldDeleteAttachments:]
  -[HMDBulletinBoard addNotificationRequest:forIdentifier:]
  -[HMDBulletinBoard messageForChangedCharacteristic:withSignificantEvents:]
  -[HMDBulletinBoard messageForLockCharacteristic:personName:]
  -[HMDBulletinBoard titleNameForChangedCharacteristic:]
  -[HMDBulletinBoard removeRedundantSignificantEventNotificationsForSignificantEvents:]
  -[HMDBulletinBoard _insertImageBulletinsForChangedCharacteristics:snapshotData:completion:]
  -[HMDBulletinBoard _insertLockBulletinForChangedCharacteristic:]
  -[HMDBulletinBoard removeImageFilesForNotificationRequests:]
  -[HMDBulletinBoard _insertRequestWithTitle:snapshotData:message:requestIdentifier:date:bulletinType:actionURL:bulletinContext:actionContext:interruptionLevel:]
  -[HMDBulletinBoard _hasDuplicateBulletinForCharacteristic:]
  -[HMDBulletinBoard _hasDuplicateBulletinForSnapshotCharacteristic:]
  -[HMDBulletinBoard _updateCharacteristicTupleFor:withCurrentType:changedByThisDevice:]
  -[HMDBulletinBoard _shouldSkipBulletinForChangedCharacteristic:]
  -[HMDBulletinBoard _shouldPostBulletinOnCurrentValueChangeForCharacteristic:]
  -[HMDBulletinBoard _updateDoorbellPressNotificationsWithSignificantEventBulletin:]
  -[HMDBulletinBoard updateMessageForDoorbellPressNotificationRequestWithIdentifier:cameraProfile:]
  -[HMDBulletinBoard notificationRequestsForCameraClipUUIDs:]
  -[HMDBulletinBoard _doorbellPressNotificationsNearDate:forCameraProfile:]
  -[HMDBulletinBoard _copyItemAtURL:toDirectory:]
  -[HMDBulletinBoard _submitLogEventForDoorbellPressedBulletinWithDate:significantEvents:]
  -[HMDBulletinBoard _submitLogEventForSignificantEventBulletin:]
  -[HMDBulletinBoard _updateDoorbellUserInfo:withSignificantEventUserInfo:]
  -[HMDBulletinBoard _handleDidReceiveNotificationResponse:completionHandler:]
  -[HMDBulletinBoard isConfiguredFuture]
  -[HMDBulletinBoard characteristicTuples]
  -[HMDBulletinBoard persistentStoreClass]
  -[HMDBulletinBoard setPersistentStoreClass:]
  -[HMDBulletinBoard doorbellBulletinUtilitiesClass]
  -[HMDBulletinBoard setDoorbellBulletinUtilitiesClass:]
  -[HMDBulletinBoard setLogEventSubmitter:]


HMDAccessoryReachabilityChangedLogEventManager : HMFObject <HMFLogging, HMDLogEventDailyTaskRunner>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryReachabilityChangedLogEventManager logCategory]

  // instance methods
  -[HMDAccessoryReachabilityChangedLogEventManager configure]
  -[HMDAccessoryReachabilityChangedLogEventManager home]
  -[HMDAccessoryReachabilityChangedLogEventManager _reset]
  -[HMDAccessoryReachabilityChangedLogEventManager logIdentifier]
  -[HMDAccessoryReachabilityChangedLogEventManager workQueue]
  -[HMDAccessoryReachabilityChangedLogEventManager .cxx_destruct]
  -[HMDAccessoryReachabilityChangedLogEventManager _enable]
  -[HMDAccessoryReachabilityChangedLogEventManager initWithHome:]
  -[HMDAccessoryReachabilityChangedLogEventManager _submit]
  -[HMDAccessoryReachabilityChangedLogEventManager runDailyTask]
  -[HMDAccessoryReachabilityChangedLogEventManager handlePrimaryResidentUpdatedNotification:]
  -[HMDAccessoryReachabilityChangedLogEventManager logEventDispatcher]
  -[HMDAccessoryReachabilityChangedLogEventManager submitForAccessory:withTransportReport:reachable:]
  -[HMDAccessoryReachabilityChangedLogEventManager _submitForAccessory:withTransportReport:reachable:changed:]
  -[HMDAccessoryReachabilityChangedLogEventManager _submitDailyUpdateForAccessory:withTransportReport:]
  -[HMDAccessoryReachabilityChangedLogEventManager _submitForAccessory:]
  -[HMDAccessoryReachabilityChangedLogEventManager _disable]


HMDTimerTrigger : HMDTrigger
 @property  NSDate *fireDate
 @property  NSTimeZone *fireDateTimeZone
 @property  NSString *significantEvent
 @property  NSDateComponents *significantEventOffset
 @property  NSDateComponents *fireRepeatInterval
 @property  NSArray *recurrences
 @property  NSString *timerID
 @property  NSDate *currentFireDate

  // class methods
  +[HMDTimerTrigger supportsSecureCoding]
  +[HMDTimerTrigger logCategory]
  +[HMDTimerTrigger validateRecurrence:calendar:fireDate:]
  +[HMDTimerTrigger validateSignificantOffset:]
  +[HMDTimerTrigger validateRecurrences:]
  +[HMDTimerTrigger validateTriggerModel:message:currentFireDate:]
  +[HMDTimerTrigger validateWholeMinuteDate:onCalendar:]
  +[HMDTimerTrigger getCalendar:]

  // instance methods
  -[HMDTimerTrigger dumpState]
  -[HMDTimerTrigger _startTimer:]
  -[HMDTimerTrigger _activateWithCompletion:]
  -[HMDTimerTrigger timerID]
  -[HMDTimerTrigger fireDate]
  -[HMDTimerTrigger encodeWithCoder:]
  -[HMDTimerTrigger dealloc]
  -[HMDTimerTrigger .cxx_destruct]
  -[HMDTimerTrigger setSignificantEvent:]
  -[HMDTimerTrigger setFireDate:]
  -[HMDTimerTrigger triggerType]
  -[HMDTimerTrigger _startTimerWithFireDate:]
  -[HMDTimerTrigger setTimerID:]
  -[HMDTimerTrigger invalidate]
  -[HMDTimerTrigger _stopTimer]
  -[HMDTimerTrigger initWithCoder:]
  -[HMDTimerTrigger significantEvent]
  -[HMDTimerTrigger _serializeForAdd]
  -[HMDTimerTrigger recurrences]
  -[HMDTimerTrigger setRecurrences:]
  -[HMDTimerTrigger _registerForMessages]
  -[HMDTimerTrigger initWithName:uuid:]
  -[HMDTimerTrigger significantEventOffset]
  -[HMDTimerTrigger setSignificantEventOffset:]
  -[HMDTimerTrigger _nextFireDate]
  -[HMDTimerTrigger _timerTriggered]
  -[HMDTimerTrigger initWithModel:home:]
  -[HMDTimerTrigger configure:messageDispatcher:queue:]
  -[HMDTimerTrigger shouldActivateOnLocalDevice]
  -[HMDTimerTrigger _transactionObjectUpdated:newValues:message:]
  -[HMDTimerTrigger _transactionObjectRemoved:message:]
  -[HMDTimerTrigger modelObjectWithChangeType:]
  -[HMDTimerTrigger backingStoreObjects:]
  -[HMDTimerTrigger emptyModelObject]
  -[HMDTimerTrigger handleTimerFiredNotification:]
  -[HMDTimerTrigger _handleUpdateTimerTriggerPropertiesRequest:]
  -[HMDTimerTrigger currentFireDate]
  -[HMDTimerTrigger setCurrentFireDate:]
  -[HMDTimerTrigger completeConfiguration]
  -[HMDTimerTrigger timerTriggered]
  -[HMDTimerTrigger _startTimerWithSignificantEventDate:]
  -[HMDTimerTrigger _handleUpdateTimerTriggerPropertiesModel:message:]
  -[HMDTimerTrigger _handleTimerTriggerUpdate:message:]
  -[HMDTimerTrigger _reactivateTrigger]
  -[HMDTimerTrigger _reactivateFireDateTrigger]
  -[HMDTimerTrigger _reactivateSignificantEventTrigger]
  -[HMDTimerTrigger _disableTimerOffReactivationFailure]
  -[HMDTimerTrigger _nextSignificantEventFireDate]
  -[HMDTimerTrigger _shouldExecuteActionSet]
  -[HMDTimerTrigger _reactiveTriggerAfterDelay]
  -[HMDTimerTrigger _closestDatesForStartDate:earliestDate:timeZone:deliveryRepeatInterval:returnDateBefore:returnDateAfter:]
  -[HMDTimerTrigger getCalendar]
  -[HMDTimerTrigger getFireInterval]
  -[HMDTimerTrigger fireDateTimeZone]
  -[HMDTimerTrigger setFireDateTimeZone:]
  -[HMDTimerTrigger fireRepeatInterval]
  -[HMDTimerTrigger setFireRepeatInterval:]


HMDTimerTriggerModel : HMDTriggerModel
 @property  NSDate *fireDate
 @property  NSData *fireDateTimeZone
 @property  NSString *significantEvent
 @property  NSData *significantEventOffset
 @property  NSData *fireRepeatInterval
 @property  NSData *recurrences

  // class methods
  +[HMDTimerTriggerModel properties]

  // instance methods
  -[HMDTimerTriggerModel createPayload]


HMDCompositeSetting : HMFObject <HMDCompositeSettingIsEqualValueImplementing, HMFLogging>
 @property  HMFVersion *readVersion
 @property  HMFVersion *writeVersion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCompositeSetting logCategory]

  // instance methods
  -[HMDCompositeSetting attributeDescriptions]
  -[HMDCompositeSetting .cxx_destruct]
  -[HMDCompositeSetting isEqual:]
  -[HMDCompositeSetting isEqualValue:]
  -[HMDCompositeSetting initWithReadVersion:writeVersion:]
  -[HMDCompositeSetting readVersion]
  -[HMDCompositeSetting writeVersion]


HMDCompositeBoolSetting : HMDCompositeSetting <HMDCompositeSettingsBoolValueProviding>
 @property  BOOL boolValue

  // instance methods
  -[HMDCompositeBoolSetting attributeDescriptions]
  -[HMDCompositeBoolSetting boolValue]
  -[HMDCompositeBoolSetting isEqual:]
  -[HMDCompositeBoolSetting isEqualValue:]
  -[HMDCompositeBoolSetting initWithValue:readVersion:writeVersion:]


HMDCompositeStringSetting : HMDCompositeSetting <HMDCompositeSettingsStringValueProviding>
 @property  NSString *stringValue

  // instance methods
  -[HMDCompositeStringSetting stringValue]
  -[HMDCompositeStringSetting attributeDescriptions]
  -[HMDCompositeStringSetting .cxx_destruct]
  -[HMDCompositeStringSetting isEqual:]
  -[HMDCompositeStringSetting isEqualValue:]
  -[HMDCompositeStringSetting initWithValue:readVersion:writeVersion:]


HMDCompositeNumberSetting : HMDCompositeSetting <HMDCompositeSettingsNumberValueProviding>
 @property  NSNumber *numberValue

  // instance methods
  -[HMDCompositeNumberSetting attributeDescriptions]
  -[HMDCompositeNumberSetting .cxx_destruct]
  -[HMDCompositeNumberSetting numberValue]
  -[HMDCompositeNumberSetting isEqual:]
  -[HMDCompositeNumberSetting isEqualValue:]
  -[HMDCompositeNumberSetting initWithValue:readVersion:writeVersion:]


HMDCompositeLanguageSetting : HMDCompositeSetting <HMDCompositeSettingsLanguageValueProviding>
 @property  NSString *inputLanguageCode
 @property  NSString *outputVoiceLanguageCode
 @property  NSString *outputVoiceGenderCode
 @property  NSString *voiceName

  // instance methods
  -[HMDCompositeLanguageSetting attributeDescriptions]
  -[HMDCompositeLanguageSetting .cxx_destruct]
  -[HMDCompositeLanguageSetting isEqual:]
  -[HMDCompositeLanguageSetting voiceName]
  -[HMDCompositeLanguageSetting inputLanguageCode]
  -[HMDCompositeLanguageSetting outputVoiceLanguageCode]
  -[HMDCompositeLanguageSetting outputVoiceGenderCode]
  -[HMDCompositeLanguageSetting isEqualValue:]
  -[HMDCompositeLanguageSetting initWithInputLanguage:outputVoiceLanguageCode:outputVoiceGenderCode:voiceName:readVersion:writeVersion:]


HMDCompositeSettingValue : HMFObject <HMDCompositeSettingIsEqualValueImplementing>
  // class methods
  +[HMDCompositeSettingValue compositeSettingValueFromImmutableSettingsValue:]

  // instance methods
  -[HMDCompositeSettingValue init]
  -[HMDCompositeSettingValue isEqualValue:]


HMDCompositeSettingBoolValue : HMDCompositeSettingValue <HMDCompositeSettingsBoolValueProviding>
 @property  BOOL boolValue

  // instance methods
  -[HMDCompositeSettingBoolValue initWithValue:]
  -[HMDCompositeSettingBoolValue attributeDescriptions]
  -[HMDCompositeSettingBoolValue boolValue]
  -[HMDCompositeSettingBoolValue isEqualValue:]


HMDCompositeSettingNumberValue : HMDCompositeSettingValue <HMDCompositeSettingsNumberValueProviding>
 @property  NSNumber *numberValue

  // instance methods
  -[HMDCompositeSettingNumberValue initWithValue:]
  -[HMDCompositeSettingNumberValue attributeDescriptions]
  -[HMDCompositeSettingNumberValue .cxx_destruct]
  -[HMDCompositeSettingNumberValue numberValue]
  -[HMDCompositeSettingNumberValue isEqualValue:]


HMDCompositeSettingStringValue : HMDCompositeSettingValue <HMDCompositeSettingsStringValueProviding>
 @property  NSString *stringValue

  // instance methods
  -[HMDCompositeSettingStringValue initWithValue:]
  -[HMDCompositeSettingStringValue stringValue]
  -[HMDCompositeSettingStringValue attributeDescriptions]
  -[HMDCompositeSettingStringValue .cxx_destruct]
  -[HMDCompositeSettingStringValue isEqualValue:]


HMDCompositeSettingLanguageValue : HMDCompositeSettingValue <HMDCompositeSettingsLanguageValueProviding>
 @property  NSString *inputLanguageCode
 @property  NSString *outputVoiceLanguageCode
 @property  NSString *outputVoiceGenderCode
 @property  NSString *voiceName

  // instance methods
  -[HMDCompositeSettingLanguageValue attributeDescriptions]
  -[HMDCompositeSettingLanguageValue .cxx_destruct]
  -[HMDCompositeSettingLanguageValue voiceName]
  -[HMDCompositeSettingLanguageValue inputLanguageCode]
  -[HMDCompositeSettingLanguageValue outputVoiceLanguageCode]
  -[HMDCompositeSettingLanguageValue outputVoiceGenderCode]
  -[HMDCompositeSettingLanguageValue initWithInputLanguage:outputVoiceLanguageCode:outputVoiceGenderCode:voiceName:]


HMDCompositeSettingVersionValue : HMDCompositeSettingValue <HMDCompositeSettingsVersionValueProviding>
 @property  HMFVersion *version
 @property  long long type

  // instance methods
  -[HMDCompositeSettingVersionValue type]
  -[HMDCompositeSettingVersionValue attributeDescriptions]
  -[HMDCompositeSettingVersionValue .cxx_destruct]
  -[HMDCompositeSettingVersionValue version]
  -[HMDCompositeSettingVersionValue initWithVersion:type:]


HMDCompositeSettingOperationResult : HMFObject
 @property  HMDCompositeSettingMetadata *metadata
 @property  HMDCompositeSetting *setting
 @property  NSError *error
 @property  NSString *keyPath

  // class methods
  +[HMDCompositeSettingOperationResult frameWorkFetchResultsWithOperationResults:]

  // instance methods
  -[HMDCompositeSettingOperationResult error]
  -[HMDCompositeSettingOperationResult attributeDescriptions]
  -[HMDCompositeSettingOperationResult .cxx_destruct]
  -[HMDCompositeSettingOperationResult keyPath]
  -[HMDCompositeSettingOperationResult metadata]
  -[HMDCompositeSettingOperationResult setting]
  -[HMDCompositeSettingOperationResult initWithKeyPath:setting:metadata:error:]


HMDCameraSignificantEventNotificationModel : HMBModel
 @property  NSNumber *significantEvent
 @property  NSNumber *confidenceLevel
 @property  NSDate *dateOfOccurrence
 @property  NSNumber *timeOffsetWithinClip
 @property  HMBModelCloudReference *associatedClip
 @property  CKAsset *heroFrameAsset
 @property  CKAsset *faceCropAsset
 @property  NSDictionary *homePresenceByPairingIdentity

  // class methods
  +[HMDCameraSignificantEventNotificationModel hmbProperties]
  +[HMDCameraSignificantEventNotificationModel hmbExternalRecordType]
  +[HMDCameraSignificantEventNotificationModel hmbQueries]
  +[HMDCameraSignificantEventNotificationModel significantEventsBetweenDatesQueryWithIsAscending:]

  // instance methods
  -[HMDCameraSignificantEventNotificationModel createClipSignificantEventWithCameraProfileUUID:faceClassification:]


HMDTargetConfiguration : HMFObject
 @property  NSUUID *uuid
 @property  NSNumber *identifier
 @property  NSString *name
 @property  long long category
 @property  NSArray *buttonConfiguration

  // instance methods
  -[HMDTargetConfiguration identifier]
  -[HMDTargetConfiguration category]
  -[HMDTargetConfiguration uuid]
  -[HMDTargetConfiguration .cxx_destruct]
  -[HMDTargetConfiguration setName:]
  -[HMDTargetConfiguration name]
  -[HMDTargetConfiguration isEqual:]
  -[HMDTargetConfiguration init]
  -[HMDTargetConfiguration buttonConfiguration]
  -[HMDTargetConfiguration setButtonConfiguration:]
  -[HMDTargetConfiguration initWithIdentifier:name:category:buttonConfiguration:]
  -[HMDTargetConfiguration initWithAccessory:buttonConfiguration:]


HMDSleepConfigurationOperationStatusWrapper : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSleepConfigurationOperationStatusWrapper parsedFromData:error:]

  // instance methods
  -[HMDSleepConfigurationOperationStatusWrapper initWithValue:]
  -[HMDSleepConfigurationOperationStatusWrapper parseFromData:error:]
  -[HMDSleepConfigurationOperationStatusWrapper setValue:]
  -[HMDSleepConfigurationOperationStatusWrapper copyWithZone:]
  -[HMDSleepConfigurationOperationStatusWrapper value]
  -[HMDSleepConfigurationOperationStatusWrapper isEqual:]
  -[HMDSleepConfigurationOperationStatusWrapper init]
  -[HMDSleepConfigurationOperationStatusWrapper serializeWithError:]


HMDSleepConfigurationOperationTypeWrapper : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSleepConfigurationOperationTypeWrapper parsedFromData:error:]

  // instance methods
  -[HMDSleepConfigurationOperationTypeWrapper initWithValue:]
  -[HMDSleepConfigurationOperationTypeWrapper parseFromData:error:]
  -[HMDSleepConfigurationOperationTypeWrapper setValue:]
  -[HMDSleepConfigurationOperationTypeWrapper copyWithZone:]
  -[HMDSleepConfigurationOperationTypeWrapper value]
  -[HMDSleepConfigurationOperationTypeWrapper isEqual:]
  -[HMDSleepConfigurationOperationTypeWrapper init]
  -[HMDSleepConfigurationOperationTypeWrapper serializeWithError:]


HMDSleepConfigurationWakePacketTypeWrapper : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSleepConfigurationWakePacketTypeWrapper parsedFromData:error:]

  // instance methods
  -[HMDSleepConfigurationWakePacketTypeWrapper initWithValue:]
  -[HMDSleepConfigurationWakePacketTypeWrapper parseFromData:error:]
  -[HMDSleepConfigurationWakePacketTypeWrapper setValue:]
  -[HMDSleepConfigurationWakePacketTypeWrapper copyWithZone:]
  -[HMDSleepConfigurationWakePacketTypeWrapper value]
  -[HMDSleepConfigurationWakePacketTypeWrapper isEqual:]
  -[HMDSleepConfigurationWakePacketTypeWrapper init]
  -[HMDSleepConfigurationWakePacketTypeWrapper serializeWithError:]


HMDSleepConfigurationWakeUpTypeWrapper : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSleepConfigurationWakeUpTypeWrapper parsedFromData:error:]

  // instance methods
  -[HMDSleepConfigurationWakeUpTypeWrapper initWithValue:]
  -[HMDSleepConfigurationWakeUpTypeWrapper parseFromData:error:]
  -[HMDSleepConfigurationWakeUpTypeWrapper setValue:]
  -[HMDSleepConfigurationWakeUpTypeWrapper copyWithZone:]
  -[HMDSleepConfigurationWakeUpTypeWrapper value]
  -[HMDSleepConfigurationWakeUpTypeWrapper isEqual:]
  -[HMDSleepConfigurationWakeUpTypeWrapper init]
  -[HMDSleepConfigurationWakeUpTypeWrapper serializeWithError:]


HMDCompositeSettingMetadata : HMFObject
 @property  <HMDCompositeSettingConstraint> *constraint
 @property  HMDCompositeSettingPrivileges *privileges
 @property  NSString *keyPath

  // instance methods
  -[HMDCompositeSettingMetadata privileges]
  -[HMDCompositeSettingMetadata .cxx_destruct]
  -[HMDCompositeSettingMetadata keyPath]
  -[HMDCompositeSettingMetadata constraint]
  -[HMDCompositeSettingMetadata initWithKeyPath:constraint:privileges:]


HMDRemoteEventRouterProtoChangeRegistrationsMessage : PBCodable <NSCopying>
 @property  NSMutableArray *topicFilterAdditions
 @property  NSMutableArray *topicFilterRemovals
 @property  NSMutableArray *topicAdditions
 @property  NSMutableArray *topicRemovals

  // class methods
  +[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterAdditionsType]
  +[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterRemovalsType]
  +[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicAdditionsType]
  +[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicRemovalsType]

  // instance methods
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage addTopicFilterAdditions:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterAdditionsCount]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage copyTo:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterAdditionsAtIndex:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage clearTopicFilterRemovals]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterRemovalsAtIndex:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterAdditions]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterRemovalsCount]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicFilterRemovals]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage setTopicFilterRemovals:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage clearTopicFilterAdditions]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage addTopicFilterRemovals:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage readFrom:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage writeTo:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage setTopicFilterAdditions:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage isEqual:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage clearTopicAdditions]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage addTopicAdditions:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicAdditionsCount]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicAdditionsAtIndex:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage clearTopicRemovals]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage addTopicRemovals:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicRemovalsCount]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicRemovalsAtIndex:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicAdditions]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage setTopicAdditions:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage topicRemovals]
  -[HMDRemoteEventRouterProtoChangeRegistrationsMessage setTopicRemovals:]


AWDHomeKitBroadcastEventReceived : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasIsExpectedGSN
 @property  BOOL isExpectedGSN
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasCertified
 @property  int certified

  // instance methods
  -[AWDHomeKitBroadcastEventReceived setTimestamp:]
  -[AWDHomeKitBroadcastEventReceived copyTo:]
  -[AWDHomeKitBroadcastEventReceived .cxx_destruct]
  -[AWDHomeKitBroadcastEventReceived mergeFrom:]
  -[AWDHomeKitBroadcastEventReceived setHasTimestamp:]
  -[AWDHomeKitBroadcastEventReceived dictionaryRepresentation]
  -[AWDHomeKitBroadcastEventReceived hasTimestamp]
  -[AWDHomeKitBroadcastEventReceived copyWithZone:]
  -[AWDHomeKitBroadcastEventReceived timestamp]
  -[AWDHomeKitBroadcastEventReceived readFrom:]
  -[AWDHomeKitBroadcastEventReceived writeTo:]
  -[AWDHomeKitBroadcastEventReceived isEqual:]
  -[AWDHomeKitBroadcastEventReceived hasVendorDetails]
  -[AWDHomeKitBroadcastEventReceived vendorDetails]
  -[AWDHomeKitBroadcastEventReceived setVendorDetails:]
  -[AWDHomeKitBroadcastEventReceived certified]
  -[AWDHomeKitBroadcastEventReceived setCertified:]
  -[AWDHomeKitBroadcastEventReceived setHasCertified:]
  -[AWDHomeKitBroadcastEventReceived hasCertified]
  -[AWDHomeKitBroadcastEventReceived certifiedAsString:]
  -[AWDHomeKitBroadcastEventReceived StringAsCertified:]
  -[AWDHomeKitBroadcastEventReceived setIsExpectedGSN:]
  -[AWDHomeKitBroadcastEventReceived setHasIsExpectedGSN:]
  -[AWDHomeKitBroadcastEventReceived hasIsExpectedGSN]
  -[AWDHomeKitBroadcastEventReceived isExpectedGSN]


HMDAssistantSettingsConnection : HMFObject <HMFLogging, HMDAssistantSettingsConnectionDataSource>
 @property  HMFScheduler *scheduler
 @property  <HMDAssistantSettingsConnectionDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantSettingsConnection logCategory]

  // instance methods
  -[HMDAssistantSettingsConnection scheduler]
  -[HMDAssistantSettingsConnection dataSource]
  -[HMDAssistantSettingsConnection .cxx_destruct]
  -[HMDAssistantSettingsConnection initWithScheduler:]
  -[HMDAssistantSettingsConnection setDataSource:]
  -[HMDAssistantSettingsConnection connectionForEndpointUUID:]
  -[HMDAssistantSettingsConnection deleteSiriHistoryOperationWithConnection:]
  -[HMDAssistantSettingsConnection deleteSiriHistoryWithEndpointUUID:completionHandler:]


HMDAccessoryDataStreamAdapter : HMFObject <HMFLogging, HMDDataStreamBulkSendListener>
 @property  BOOL sessionOpenInProgress
 @property  BOOL bulkSendActive
 @property  <HMDDataStreamBulkSendSession> *currentBulkSendSession
 @property  @? pendingOpenSessionCallback
 @property  BOOL transportReady
 @property  BOOL didBulkSendFail
 @property  BOOL didBulkSendComplete
 @property  <HMDAccessoryDataStreamAdapterDelegate> *delegate
 @property  HMDHAPAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *fileType
 @property  NSDictionary *metadata
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryDataStreamAdapter logCategory]

  // instance methods
  -[HMDAccessoryDataStreamAdapter shutDown]
  -[HMDAccessoryDataStreamAdapter fileType]
  -[HMDAccessoryDataStreamAdapter readData]
  -[HMDAccessoryDataStreamAdapter accessory]
  -[HMDAccessoryDataStreamAdapter logIdentifier]
  -[HMDAccessoryDataStreamAdapter setDelegate:]
  -[HMDAccessoryDataStreamAdapter workQueue]
  -[HMDAccessoryDataStreamAdapter delegate]
  -[HMDAccessoryDataStreamAdapter attributeDescriptions]
  -[HMDAccessoryDataStreamAdapter dealloc]
  -[HMDAccessoryDataStreamAdapter .cxx_destruct]
  -[HMDAccessoryDataStreamAdapter reason]
  -[HMDAccessoryDataStreamAdapter metadata]
  -[HMDAccessoryDataStreamAdapter _openSession]
  -[HMDAccessoryDataStreamAdapter accessory:didReceiveBulkSessionCandidate:]
  -[HMDAccessoryDataStreamAdapter accessoryDidStartListening:]
  -[HMDAccessoryDataStreamAdapter accessoryDidCloseDataStream:]
  -[HMDAccessoryDataStreamAdapter initWithAccessory:workQueue:fileType:metadata:reason:]
  -[HMDAccessoryDataStreamAdapter isBulkSendActive]
  -[HMDAccessoryDataStreamAdapter setUpWithCallback:]
  -[HMDAccessoryDataStreamAdapter _setUpTransport]
  -[HMDAccessoryDataStreamAdapter callPendingOpenSessionCallbackWithResult:error:]
  -[HMDAccessoryDataStreamAdapter _callPendingOpenSessionCallbackWithResult:error:]
  -[HMDAccessoryDataStreamAdapter _handleAccessoryDidClose]
  -[HMDAccessoryDataStreamAdapter isSessionOpenInProgress]
  -[HMDAccessoryDataStreamAdapter _handleFrame:]
  -[HMDAccessoryDataStreamAdapter _bulkSendDidFail]
  -[HMDAccessoryDataStreamAdapter _bulkSendDidComplete]
  -[HMDAccessoryDataStreamAdapter currentBulkSendSession]
  -[HMDAccessoryDataStreamAdapter setCurrentBulkSendSession:]
  -[HMDAccessoryDataStreamAdapter pendingOpenSessionCallback]
  -[HMDAccessoryDataStreamAdapter setPendingOpenSessionCallback:]
  -[HMDAccessoryDataStreamAdapter transportReady]
  -[HMDAccessoryDataStreamAdapter setTransportReady:]
  -[HMDAccessoryDataStreamAdapter didBulkSendFail]
  -[HMDAccessoryDataStreamAdapter setDidBulkSendFail:]
  -[HMDAccessoryDataStreamAdapter didBulkSendComplete]
  -[HMDAccessoryDataStreamAdapter setDidBulkSendComplete:]


AWDHomeKitCharacteristicEvent : PBCodable <NSCopying>
 @property  BOOL hasContainsValue
 @property  BOOL containsValue

  // instance methods
  -[AWDHomeKitCharacteristicEvent copyTo:]
  -[AWDHomeKitCharacteristicEvent mergeFrom:]
  -[AWDHomeKitCharacteristicEvent dictionaryRepresentation]
  -[AWDHomeKitCharacteristicEvent copyWithZone:]
  -[AWDHomeKitCharacteristicEvent readFrom:]
  -[AWDHomeKitCharacteristicEvent writeTo:]
  -[AWDHomeKitCharacteristicEvent isEqual:]
  -[AWDHomeKitCharacteristicEvent setContainsValue:]
  -[AWDHomeKitCharacteristicEvent setHasContainsValue:]
  -[AWDHomeKitCharacteristicEvent hasContainsValue]
  -[AWDHomeKitCharacteristicEvent containsValue]


HMDHAPAccessoryConnectionCoordinator : NSObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHAPAccessoryConnectionCoordinator logCategory]

  // instance methods
  -[HMDHAPAccessoryConnectionCoordinator logIdentifier]
  -[HMDHAPAccessoryConnectionCoordinator .cxx_destruct]
  -[HMDHAPAccessoryConnectionCoordinator handleResidentStatusChanged:]
  -[HMDHAPAccessoryConnectionCoordinator handleResidentAddRemove:]
  -[HMDHAPAccessoryConnectionCoordinator handleIsResidentFirstAccessoryCommunicationEnabledDidChangeNotification:]
  -[HMDHAPAccessoryConnectionCoordinator handlePrimaryResidentChanged:]
  -[HMDHAPAccessoryConnectionCoordinator handleResidentUpdated:]
  -[HMDHAPAccessoryConnectionCoordinator initWithHome:notificationCenter:]
  -[HMDHAPAccessoryConnectionCoordinator configureWithIsResidentCapable:]
  -[HMDHAPAccessoryConnectionCoordinator handleCurrentResidentChanged:]
  -[HMDHAPAccessoryConnectionCoordinator handleResidentChangedOnNonResident]
  -[HMDHAPAccessoryConnectionCoordinator evaluateAccessoryConnectionStatus]
  -[HMDHAPAccessoryConnectionCoordinator _disableDisconnectOnIdleWithAccessoriesAndConnect:]
  -[HMDHAPAccessoryConnectionCoordinator _enableDisconnectOnIdleWithAccessories]


HMDIDSServerBag : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  IDSServerBag *idsServerBag
 @property  HMFTimer *refreshTimer
 @property  NSString *keySuffix
 @property  BOOL hh2SoftwareReleased
 @property  BOOL hh2ManualMigrationEnabled
 @property  BOOL hh2AutoMigrationEnabled
 @property  <HMDIDSServerBagDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSServerBag logCategory]

  // instance methods
  -[HMDIDSServerBag configure]
  -[HMDIDSServerBag timerDidFire:]
  -[HMDIDSServerBag setDelegate:]
  -[HMDIDSServerBag delegate]
  -[HMDIDSServerBag .cxx_destruct]
  -[HMDIDSServerBag init]
  -[HMDIDSServerBag initWithIDSServerBag:refreshTimer:keySuffix:]
  -[HMDIDSServerBag isHH2SoftwareReleased]
  -[HMDIDSServerBag setHh2SoftwareReleased:]
  -[HMDIDSServerBag isHH2ManualMigrationEnabled]
  -[HMDIDSServerBag setHh2ManualMigrationEnabled:]
  -[HMDIDSServerBag isHH2AutoMigrationEnabled]
  -[HMDIDSServerBag setHh2AutoMigrationEnabled:]
  -[HMDIDSServerBag idsServerBag]
  -[HMDIDSServerBag refreshTimer]
  -[HMDIDSServerBag keySuffix]


AWDHomeKitTargetControllerCommand : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasCommand
 @property  int command
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasTransportType
 @property  int transportType
 @property  BOOL hasCertified
 @property  int certified

  // instance methods
  -[AWDHomeKitTargetControllerCommand setCommand:]
  -[AWDHomeKitTargetControllerCommand command]
  -[AWDHomeKitTargetControllerCommand setTimestamp:]
  -[AWDHomeKitTargetControllerCommand copyTo:]
  -[AWDHomeKitTargetControllerCommand setTransportType:]
  -[AWDHomeKitTargetControllerCommand .cxx_destruct]
  -[AWDHomeKitTargetControllerCommand mergeFrom:]
  -[AWDHomeKitTargetControllerCommand transportType]
  -[AWDHomeKitTargetControllerCommand setHasTimestamp:]
  -[AWDHomeKitTargetControllerCommand dictionaryRepresentation]
  -[AWDHomeKitTargetControllerCommand hasTimestamp]
  -[AWDHomeKitTargetControllerCommand copyWithZone:]
  -[AWDHomeKitTargetControllerCommand StringAsTransportType:]
  -[AWDHomeKitTargetControllerCommand timestamp]
  -[AWDHomeKitTargetControllerCommand readFrom:]
  -[AWDHomeKitTargetControllerCommand hasTransportType]
  -[AWDHomeKitTargetControllerCommand writeTo:]
  -[AWDHomeKitTargetControllerCommand setHasTransportType:]
  -[AWDHomeKitTargetControllerCommand isEqual:]
  -[AWDHomeKitTargetControllerCommand transportTypeAsString:]
  -[AWDHomeKitTargetControllerCommand setHasCommand:]
  -[AWDHomeKitTargetControllerCommand hasCommand]
  -[AWDHomeKitTargetControllerCommand commandAsString:]
  -[AWDHomeKitTargetControllerCommand StringAsCommand:]
  -[AWDHomeKitTargetControllerCommand hasVendorDetails]
  -[AWDHomeKitTargetControllerCommand vendorDetails]
  -[AWDHomeKitTargetControllerCommand setVendorDetails:]
  -[AWDHomeKitTargetControllerCommand certified]
  -[AWDHomeKitTargetControllerCommand setCertified:]
  -[AWDHomeKitTargetControllerCommand setHasCertified:]
  -[AWDHomeKitTargetControllerCommand hasCertified]
  -[AWDHomeKitTargetControllerCommand certifiedAsString:]
  -[AWDHomeKitTargetControllerCommand StringAsCertified:]


HMDPowerLogObserverContext : NSObject
 @property  HMMIntervalMapper *homeConfigurationEventHistogram
 @property  HMMIntervalMapper *cameraConfigurationEventHistogram
 @property  <HMMLogEventDispatching> *logEventDispatcher
 @property  HMFPowerLogger *powerLogger

  // instance methods
  -[HMDPowerLogObserverContext .cxx_destruct]
  -[HMDPowerLogObserverContext powerLogger]
  -[HMDPowerLogObserverContext logEventDispatcher]
  -[HMDPowerLogObserverContext initWithLogEventDispatcher:powerLogger:]
  -[HMDPowerLogObserverContext homeConfigurationEventHistogram]
  -[HMDPowerLogObserverContext cameraConfigurationEventHistogram]


HMDPowerLogObserver : HMFObject <HMMLogEventObserver>
 @property  HMDPowerLogObserverContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPowerLogObserver supportedEventClasses]

  // instance methods
  -[HMDPowerLogObserver initWithContext:]
  -[HMDPowerLogObserver .cxx_destruct]
  -[HMDPowerLogObserver stop]
  -[HMDPowerLogObserver setContext:]
  -[HMDPowerLogObserver start]
  -[HMDPowerLogObserver context]
  -[HMDPowerLogObserver didReceiveEventFromDispatcher:]
  -[HMDPowerLogObserver initWithLogEventDispatcher:]
  -[HMDPowerLogObserver _reportConfiguration:]
  -[HMDPowerLogObserver _reportCameraSettingsConfiguration:]


HMDAccessoryAllowedHostsPreviewHelper : HMFObject <HMDNetworkRouterFirewallRuleManagerClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryAllowedHostsPreviewHelper helperForHome:]

  // instance methods
  -[HMDAccessoryAllowedHostsPreviewHelper attributeDescriptions]
  -[HMDAccessoryAllowedHostsPreviewHelper .cxx_destruct]
  -[HMDAccessoryAllowedHostsPreviewHelper watchedAccessoryIdentifiersForFirewallRuleManager:]
  -[HMDAccessoryAllowedHostsPreviewHelper fetchAllowedHostsForAccessory:completion:]


HMDHomeWalletKey : HMFObject <NSCopying, NSMutableCopying>
 @property  NSString *walletKeyDescription
 @property  NSString *homeName
 @property  long long state
 @property  NSString *accessCode
 @property  NSURL *changeAccessCodeHomeAppCustomURL
 @property  HMDHomeWalletKeySecureElementInfo *nfcInfo
 @property  NSURL *customURL
 @property  long long color
 @property  NSString *typeIdentifier
 @property  NSString *serialNumber
 @property  NSString *passColorValue
 @property  NSString *labelColorValue
 @property  NSUUID *uuid

  // instance methods
  -[HMDHomeWalletKey serialNumber]
  -[HMDHomeWalletKey typeIdentifier]
  -[HMDHomeWalletKey state]
  -[HMDHomeWalletKey attributeDescriptions]
  -[HMDHomeWalletKey uuid]
  -[HMDHomeWalletKey .cxx_destruct]
  -[HMDHomeWalletKey copyWithZone:]
  -[HMDHomeWalletKey color]
  -[HMDHomeWalletKey setColor:]
  -[HMDHomeWalletKey mutableCopyWithZone:]
  -[HMDHomeWalletKey isEqual:]
  -[HMDHomeWalletKey setState:]
  -[HMDHomeWalletKey homeName]
  -[HMDHomeWalletKey setHomeName:]
  -[HMDHomeWalletKey customURL]
  -[HMDHomeWalletKey accessCode]
  -[HMDHomeWalletKey setAccessCode:]
  -[HMDHomeWalletKey initWithTypeIdentifier:serialNumber:state:walletKeyDescription:homeName:color:nfcInfo:]
  -[HMDHomeWalletKey initWithPKPass:]
  -[HMDHomeWalletKey passColorValue]
  -[HMDHomeWalletKey labelColorValue]
  -[HMDHomeWalletKey xpcWalletKeyWithExpressEnabled:]
  -[HMDHomeWalletKey walletKeyDescription]
  -[HMDHomeWalletKey setWalletKeyDescription:]
  -[HMDHomeWalletKey nfcInfo]
  -[HMDHomeWalletKey setNfcInfo:]
  -[HMDHomeWalletKey changeAccessCodeHomeAppCustomURL]
  -[HMDHomeWalletKey setChangeAccessCodeHomeAppCustomURL:]
  -[HMDHomeWalletKey setCustomURL:]


HMDMutableHomeWalletKey : HMDHomeWalletKey
 @property  NSString *walletKeyDescription
 @property  NSString *homeName
 @property  long long state
 @property  NSString *accessCode
 @property  NSURL *changeAccessCodeHomeAppCustomURL
 @property  NSURL *customURL
 @property  long long color
 @property  HMDHomeWalletKeySecureElementInfo *nfcInfo

  // instance methods
  -[HMDMutableHomeWalletKey copyWithZone:]


HMDAggregateXPCMessageCountersLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *peerInformation
 @property  NSString *messageName
 @property  NSNumber *count
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAggregateXPCMessageCountersLogEvent xpcAcceptedCountersLogEventWithPeerInformation:messageName:count:]
  +[HMDAggregateXPCMessageCountersLogEvent xpcSentCountersLogEventWithPeerInformation:messageName:count:]
  +[HMDAggregateXPCMessageCountersLogEvent xpcFilteredCountersLogEventWithPeerInformation:messageName:count:]

  // instance methods
  -[HMDAggregateXPCMessageCountersLogEvent eventName]
  -[HMDAggregateXPCMessageCountersLogEvent messageName]
  -[HMDAggregateXPCMessageCountersLogEvent .cxx_destruct]
  -[HMDAggregateXPCMessageCountersLogEvent count]
  -[HMDAggregateXPCMessageCountersLogEvent serializedEvent]
  -[HMDAggregateXPCMessageCountersLogEvent peerInformation]
  -[HMDAggregateXPCMessageCountersLogEvent initWithEventName:peerInformation:messageName:count:]


HMDAssistantCharacteristicTuple : NSObject
 @property  NSString *attribute
 @property  SAHAAttributeValue *value

  // instance methods
  -[HMDAssistantCharacteristicTuple .cxx_destruct]
  -[HMDAssistantCharacteristicTuple value]
  -[HMDAssistantCharacteristicTuple attribute]
  -[HMDAssistantCharacteristicTuple init]
  -[HMDAssistantCharacteristicTuple initWithAttribute:value:]


HMDPresenceEvent : HMDEvent <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver, HMDTriggerEventProtocol>
 @property  NSString *presenceType
 @property  NSDictionary *users
 @property  NSArray *userUUIDs
 @property  BOOL currentStatus
 @property  HMDEventTriggerExecutionSession *executionSession
 @property  HMPresenceEventActivation *activation
 @property  unsigned long activationGranularity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDPresenceEvent supportsSecureCoding]
  +[HMDPresenceEvent logCategory]

  // instance methods
  -[HMDPresenceEvent currentStatus]
  -[HMDPresenceEvent encodeWithCoder:]
  -[HMDPresenceEvent removeUser:]
  -[HMDPresenceEvent dealloc]
  -[HMDPresenceEvent isActive]
  -[HMDPresenceEvent .cxx_destruct]
  -[HMDPresenceEvent setCurrentStatus:]
  -[HMDPresenceEvent users]
  -[HMDPresenceEvent initWithCoder:]
  -[HMDPresenceEvent activation]
  -[HMDPresenceEvent setUsers:]
  -[HMDPresenceEvent _registerForMessages]
  -[HMDPresenceEvent presenceType]
  -[HMDPresenceEvent setPresenceType:]
  -[HMDPresenceEvent activationGranularity]
  -[HMDPresenceEvent createPayload]
  -[HMDPresenceEvent initWithModel:home:]
  -[HMDPresenceEvent _activate:completionHandler:]
  -[HMDPresenceEvent _transactionObjectUpdated:newValues:message:]
  -[HMDPresenceEvent _transactionObjectRemoved:message:]
  -[HMDPresenceEvent modelObjectWithChangeType:]
  -[HMDPresenceEvent emptyModelObject]
  -[HMDPresenceEvent _handleUpdateRequest:]
  -[HMDPresenceEvent analyticsTriggerEventData]
  -[HMDPresenceEvent _addUser:]
  -[HMDPresenceEvent configure:messageDispatcher:queue:delegate:]
  -[HMDPresenceEvent _handleHomePresenceUpdate:]
  -[HMDPresenceEvent didEndExecutionSession:]
  -[HMDPresenceEvent createPresenceEventPayload:]
  -[HMDPresenceEvent createDaemonPayload]
  -[HMDPresenceEvent createClientPayload]
  -[HMDPresenceEvent thisUser]
  -[HMDPresenceEvent _evaluatePresenceEventForHomePresenceUpdate:]
  -[HMDPresenceEvent evaluateWithHomePresenceUpdate:presenceType:]
  -[HMDPresenceEvent evaluateWithUserPresence:presenceType:]
  -[HMDPresenceEvent _evaluateWithHomePresence:presenceType:users:]
  -[HMDPresenceEvent evaluateWithHomePresence:]
  -[HMDPresenceEvent compatibleWithUser:]
  -[HMDPresenceEvent _updateUsers:home:]
  -[HMDPresenceEvent _removeAllUsers]
  -[HMDPresenceEvent _presenceTypeForClient]
  -[HMDPresenceEvent analyticsPresenceEventData]
  -[HMDPresenceEvent userUUIDs]
  -[HMDPresenceEvent setUserUUIDs:]
  -[HMDPresenceEvent executionSession]
  -[HMDPresenceEvent setExecutionSession:]


HMDPresenceEventModel : HMDEventModel
 @property  NSString *presenceType
 @property  NSNumber *activation
 @property  NSArray *users

  // class methods
  +[HMDPresenceEventModel properties]
  +[HMDPresenceEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]


HMDBackgroundTaskLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  double fireDelay
 @property  double scheduledToExpectedFireInterval
 @property  BOOL didFire
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDBackgroundTaskLogEvent eventName]
  -[HMDBackgroundTaskLogEvent didFire]
  -[HMDBackgroundTaskLogEvent serializedEvent]
  -[HMDBackgroundTaskLogEvent initWithTask:didFire:now:]
  -[HMDBackgroundTaskLogEvent fireDelay]
  -[HMDBackgroundTaskLogEvent scheduledToExpectedFireInterval]


HMDDeviceDiscoveryOperation : HMFOperation <HMDIDSServiceDelegate>
 @property  <HMDIDSService> *service
 @property  HMDAccount *account
 @property  NSSet *devices
 @property  @? discoveryBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDeviceDiscoveryOperation timeout]
  +[HMDDeviceDiscoveryOperation logCategory]

  // instance methods
  -[HMDDeviceDiscoveryOperation account]
  -[HMDDeviceDiscoveryOperation initWithAccount:]
  -[HMDDeviceDiscoveryOperation setQualityOfService:]
  -[HMDDeviceDiscoveryOperation devices]
  -[HMDDeviceDiscoveryOperation .cxx_destruct]
  -[HMDDeviceDiscoveryOperation service]
  -[HMDDeviceDiscoveryOperation service:account:incomingMessage:fromID:context:]
  -[HMDDeviceDiscoveryOperation main]
  -[HMDDeviceDiscoveryOperation cancelWithError:]
  -[HMDDeviceDiscoveryOperation initWithAccount:timeout:]
  -[HMDDeviceDiscoveryOperation initWithAccount:service:timeout:]
  -[HMDDeviceDiscoveryOperation discoveryBlock]
  -[HMDDeviceDiscoveryOperation setDiscoveryBlock:]


HMDDatabaseCKOperationCompletionEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *containerIdentifier

  // instance methods
  -[HMDDatabaseCKOperationCompletionEvent containerIdentifier]
  -[HMDDatabaseCKOperationCompletionEvent .cxx_destruct]
  -[HMDDatabaseCKOperationCompletionEvent initWithContainerIdentifier:]
  -[HMDDatabaseCKOperationCompletionEvent AWDMessageType]
  -[HMDDatabaseCKOperationCompletionEvent metricForAWD]


HMDEventTriggerDependencyFactory : NSObject <HMDEventTriggerDependencyFactory>
 @property  HMDLaunchHandler *launchHandler

  // instance methods
  -[HMDEventTriggerDependencyFactory launchHandler]
  -[HMDEventTriggerDependencyFactory createTimerWithTimeInterval:options:]


HMDEventTrigger : HMDTrigger <HMFTimerDelegate, HMDEventDelegate, HMFLogging>
 @property  NSMutableArray *currentEvents
 @property  HMFTimer *debounceTriggerActivationTimer
 @property  NSArray *characteristicEvents
 @property  NSArray *characteristicBaseEvents
 @property  NSArray *locationEvents
 @property  NSArray *calendarEvents
 @property  NSArray *significantTimeEvents
 @property  NSArray *durationEvents
 @property  NSArray *charThresholdEvents
 @property  NSArray *presenceEvents
 @property  NSArray *triggerEvents
 @property  NSArray *endEvents
 @property  NSArray *events
 @property  NSPredicate *evaluationCondition
 @property  NSArray *recurrences
 @property  BOOL executeOnce
 @property  BOOL containsRecurrences
 @property  HMDPredicateUtilities *predicateUtilities
 @property  HMDEventTriggerExecutionSession *executionSession
 @property  HMDEventTriggerUserConfirmationSession *userConfirmationSession
 @property  unsigned long activationType
 @property  unsigned long activationState
 @property  BOOL computedActive
 @property  BOOL migratedEventsToRecords
 @property  NSArray *timeEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDEventTrigger supportsSecureCoding]
  +[HMDEventTrigger logCategory]
  +[HMDEventTrigger __validateRecurrences:]
  +[HMDEventTrigger hasMessageReceiverChildren]

  // instance methods
  -[HMDEventTrigger dumpState]
  -[HMDEventTrigger removeService:]
  -[HMDEventTrigger timerDidFire:]
  -[HMDEventTrigger _activateWithCompletion:]
  -[HMDEventTrigger events]
  -[HMDEventTrigger setActivationState:]
  -[HMDEventTrigger _removeEvents:]
  -[HMDEventTrigger encodeWithCoder:]
  -[HMDEventTrigger removeUser:]
  -[HMDEventTrigger dealloc]
  -[HMDEventTrigger removeAccessory:]
  -[HMDEventTrigger .cxx_destruct]
  -[HMDEventTrigger activationState]
  -[HMDEventTrigger triggerType]
  -[HMDEventTrigger invalidate]
  -[HMDEventTrigger removeEvent:]
  -[HMDEventTrigger addEvent:]
  -[HMDEventTrigger initWithCoder:]
  -[HMDEventTrigger activationType]
  -[HMDEventTrigger setActivationType:]
  -[HMDEventTrigger endEvents]
  -[HMDEventTrigger recurrences]
  -[HMDEventTrigger executeOnce]
  -[HMDEventTrigger setExecuteOnce:]
  -[HMDEventTrigger currentEvents]
  -[HMDEventTrigger setCurrentEvents:]
  -[HMDEventTrigger _registerForMessages]
  -[HMDEventTrigger messageReceiverChildren]
  -[HMDEventTrigger initWithModel:home:]
  -[HMDEventTrigger requiresDataVersion4]
  -[HMDEventTrigger compatible:user:]
  -[HMDEventTrigger removeCharacteristic:]
  -[HMDEventTrigger fixupForReplacementAccessory:]
  -[HMDEventTrigger sendTriggerFiredNotification:]
  -[HMDEventTrigger _isTriggerFiredNotificationEntitled]
  -[HMDEventTrigger configure:messageDispatcher:queue:]
  -[HMDEventTrigger shouldActivateOnLocalDevice]
  -[HMDEventTrigger userDidConfirmExecute:completionHandler:]
  -[HMDEventTrigger shouldEncodeLastFireDate:]
  -[HMDEventTrigger _transactionObjectUpdated:newValues:message:]
  -[HMDEventTrigger _transactionObjectRemoved:message:]
  -[HMDEventTrigger modelObjectWithChangeType:version:]
  -[HMDEventTrigger backingStoreObjects:]
  -[HMDEventTrigger emptyModelObject]
  -[HMDEventTrigger executionSession]
  -[HMDEventTrigger setExecutionSession:]
  -[HMDEventTrigger _handleLocationAuthorizationChangedNotification:]
  -[HMDEventTrigger _handleUpdateEventTriggerCondition:]
  -[HMDEventTrigger _handleUpdateEventTriggerRecurrences:]
  -[HMDEventTrigger _handleUpdateEventTriggerExecuteOnce:]
  -[HMDEventTrigger _handleAddEventToEventTrigger:]
  -[HMDEventTrigger _handleRemoveEventsFromEventTrigger:]
  -[HMDEventTrigger _handleUpdateEventsOnEventTrigger:]
  -[HMDEventTrigger _handleUserPermissionRequest:]
  -[HMDEventTrigger _handleUpdateOwningDevice:]
  -[HMDEventTrigger didOccurEvent:causingDevice:]
  -[HMDEventTrigger initWithModel:home:message:factory:]
  -[HMDEventTrigger initWithModel:home:message:]
  -[HMDEventTrigger triggerEvents]
  -[HMDEventTrigger characteristicEvents]
  -[HMDEventTrigger characteristicBaseEvents]
  -[HMDEventTrigger locationEvents]
  -[HMDEventTrigger calendarEvents]
  -[HMDEventTrigger significantTimeEvents]
  -[HMDEventTrigger timeEvents]
  -[HMDEventTrigger durationEvents]
  -[HMDEventTrigger charThresholdEvents]
  -[HMDEventTrigger presenceEvents]
  -[HMDEventTrigger computedActive]
  -[HMDEventTrigger _computeActivation]
  -[HMDEventTrigger _activateEvents:]
  -[HMDEventTrigger _reevaluateIfRelaunchRequired]
  -[HMDEventTrigger _migrateEventsToRecords]
  -[HMDEventTrigger _handleCharacteristicRemove:eventsToRemove:]
  -[HMDEventTrigger _updateCondition:]
  -[HMDEventTrigger _addEventToEventTrigger:]
  -[HMDEventTrigger createEventModel:endEvent:message:checkForSupport:error:]
  -[HMDEventTrigger _handleAddEventModel:message:]
  -[HMDEventTrigger _handleRemoveEventsFromEventTrigger:relay:]
  -[HMDEventTrigger _removeEventsFromEventTrigger:]
  -[HMDEventTrigger _handleRemoveEventModel:message:]
  -[HMDEventTrigger addEventsFromMessage:]
  -[HMDEventTrigger _checkAddEventModel:message:]
  -[HMDEventTrigger checkSharedEventTriggerActivationResidentRequirement:]
  -[HMDEventTrigger _updateEventsOnEventTrigger:]
  -[HMDEventTrigger _updateEventTriggerRecurrences:]
  -[HMDEventTrigger _eventTriggerRecurrencesUpdated:message:]
  -[HMDEventTrigger _updateEventTriggerCondition:]
  -[HMDEventTrigger _evaluationConditionUpdated:message:]
  -[HMDEventTrigger _updateOwningDevice:]
  -[HMDEventTrigger _updateEventTriggerExecuteOnce:]
  -[HMDEventTrigger _executeOnceUpdated:message:]
  -[HMDEventTrigger isEventTriggerOnRemoteGatewayForAccessory:]
  -[HMDEventTrigger isEventTriggerOnLocalDeviceForAccessory:]
  -[HMDEventTrigger executionComplete:error:]
  -[HMDEventTrigger resetExecutionState]
  -[HMDEventTrigger _resetExecutionState]
  -[HMDEventTrigger takeOverOwnershipOfTrigger]
  -[HMDEventTrigger _userDidConfirmExecute:completionHandler:]
  -[HMDEventTrigger processEventRecords:message:]
  -[HMDEventTrigger _handleEventTriggerUpdate:message:]
  -[HMDEventTrigger containsRecurrences]
  -[HMDEventTrigger isThisDeviceDesignatedFMFDevice]
  -[HMDEventTrigger isAuthorizedForLocation]
  -[HMDEventTrigger isOwnerOfHome]
  -[HMDEventTrigger migratedEventsToRecords]
  -[HMDEventTrigger setMigratedEventsToRecords:]
  -[HMDEventTrigger debounceTriggerActivationTimer]
  -[HMDEventTrigger setDebounceTriggerActivationTimer:]
  -[HMDEventTrigger evaluationCondition]
  -[HMDEventTrigger setEvaluationCondition:]
  -[HMDEventTrigger predicateUtilities]
  -[HMDEventTrigger setPredicateUtilities:]
  -[HMDEventTrigger userConfirmationSession]
  -[HMDEventTrigger setUserConfirmationSession:]


HMDEventTriggerModel : HMDTriggerModel
 @property  NSData *evaluationCondition
 @property  NSData *recurrences
 @property  NSNumber *executeOnce

  // class methods
  +[HMDEventTriggerModel properties]

  // instance methods
  -[HMDEventTriggerModel createPayload]


HMDRemoteLoginInitiator : HMDRemoteLoginBase <HMDRemoteLoginInitiatorAuthenticationDelegate>
 @property  HMDRemoteLoginInitiatorSession *loginSession
 @property  HMDRemoteLoginAnisetteDataProviderBridge *anisetteProviderBridge
 @property  HMDRemoteLoginMessageSender *remoteMessageSender
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginInitiator logCategory]
  +[HMDRemoteLoginInitiator hasMessageReceiverChildren]

  // instance methods
  -[HMDRemoteLoginInitiator .cxx_destruct]
  -[HMDRemoteLoginInitiator registerForMessages]
  -[HMDRemoteLoginInitiator messageReceiverChildren]
  -[HMDRemoteLoginInitiator configureWithWorkQueue:messageDispatcher:]
  -[HMDRemoteLoginInitiator initWithUUID:accessory:remoteLoginHandler:]
  -[HMDRemoteLoginInitiator _handleRemoteLoginCompanionAuthentication:]
  -[HMDRemoteLoginInitiator _handleRemoteLoginProxiedDevice:]
  -[HMDRemoteLoginInitiator _handleRemoteLoginProxyAuthentication:]
  -[HMDRemoteLoginInitiator _handleRemoteLoginSignout:]
  -[HMDRemoteLoginInitiator didCompleteAuthentication:error:loggedInAccount:]
  -[HMDRemoteLoginInitiator _companionLoginWithSessionID:account:remoteDevice:completion:]
  -[HMDRemoteLoginInitiator _handleProxyDeviceResponse:error:message:]
  -[HMDRemoteLoginInitiator _proxyLoginWithSessionID:authResults:remoteDevice:completion:]
  -[HMDRemoteLoginInitiator _handleSignoutResponse:error:message:]
  -[HMDRemoteLoginInitiator _callCompletion:loggedInAccount:authSession:]
  -[HMDRemoteLoginInitiator _resetCurrentSession:]
  -[HMDRemoteLoginInitiator loginSession]
  -[HMDRemoteLoginInitiator setLoginSession:]
  -[HMDRemoteLoginInitiator anisetteProviderBridge]
  -[HMDRemoteLoginInitiator setAnisetteProviderBridge:]
  -[HMDRemoteLoginInitiator remoteMessageSender]
  -[HMDRemoteLoginInitiator setRemoteMessageSender:]


HMDMessageHandlerFailureMetricEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *messageName
 @property  NSString *type

  // instance methods
  -[HMDMessageHandlerFailureMetricEvent eventName]
  -[HMDMessageHandlerFailureMetricEvent type]
  -[HMDMessageHandlerFailureMetricEvent messageName]
  -[HMDMessageHandlerFailureMetricEvent .cxx_destruct]
  -[HMDMessageHandlerFailureMetricEvent serializedEvent]
  -[HMDMessageHandlerFailureMetricEvent initWithFailureType:messageName:]


AWDHomeKitSignificantTimeEvent : PBCodable <NSCopying>
 @property  BOOL hasSignificantEvent
 @property  NSString *significantEvent
 @property  BOOL hasOffsetPresent
 @property  BOOL offsetPresent

  // instance methods
  -[AWDHomeKitSignificantTimeEvent copyTo:]
  -[AWDHomeKitSignificantTimeEvent .cxx_destruct]
  -[AWDHomeKitSignificantTimeEvent setSignificantEvent:]
  -[AWDHomeKitSignificantTimeEvent mergeFrom:]
  -[AWDHomeKitSignificantTimeEvent dictionaryRepresentation]
  -[AWDHomeKitSignificantTimeEvent copyWithZone:]
  -[AWDHomeKitSignificantTimeEvent readFrom:]
  -[AWDHomeKitSignificantTimeEvent writeTo:]
  -[AWDHomeKitSignificantTimeEvent isEqual:]
  -[AWDHomeKitSignificantTimeEvent significantEvent]
  -[AWDHomeKitSignificantTimeEvent hasSignificantEvent]
  -[AWDHomeKitSignificantTimeEvent setOffsetPresent:]
  -[AWDHomeKitSignificantTimeEvent setHasOffsetPresent:]
  -[AWDHomeKitSignificantTimeEvent hasOffsetPresent]
  -[AWDHomeKitSignificantTimeEvent offsetPresent]


HMDCameraAnalysisStatePublisher : HMFObject <HMFLogging, HMFMessageReceiver, HMFTimerDelegate, HMIAnalysisStateManagerDelegate>
 @property  <HMDHomeResidentMessagingContext> *messagingContext
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFTimer *cameraAnalysisStatePublisherDebounceTimer
 @property  HMIAnalysisStateUpdate *stateUpdate
 @property  HMIAnalysisStateManager *analysisStateManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraAnalysisStatePublisher logCategory]

  // instance methods
  -[HMDCameraAnalysisStatePublisher timerDidFire:]
  -[HMDCameraAnalysisStatePublisher workQueue]
  -[HMDCameraAnalysisStatePublisher .cxx_destruct]
  -[HMDCameraAnalysisStatePublisher messageTargetUUID]
  -[HMDCameraAnalysisStatePublisher messageReceiveQueue]
  -[HMDCameraAnalysisStatePublisher initWithHome:]
  -[HMDCameraAnalysisStatePublisher configureWithHome:]
  -[HMDCameraAnalysisStatePublisher _handleRemoteAnalysisStateUpdate:]
  -[HMDCameraAnalysisStatePublisher stateManager:didReceiveLocalUpdate:]
  -[HMDCameraAnalysisStatePublisher initWithHomeMessagingContext:analysisStateManager:workQueue:cameraAnalysisStatePublisherDebounceTimer:]
  -[HMDCameraAnalysisStatePublisher _processStateUpdate:]
  -[HMDCameraAnalysisStatePublisher _publishAnalysisStateUpdate]
  -[HMDCameraAnalysisStatePublisher analysisStateManager]
  -[HMDCameraAnalysisStatePublisher messagingContext]
  -[HMDCameraAnalysisStatePublisher setMessagingContext:]
  -[HMDCameraAnalysisStatePublisher cameraAnalysisStatePublisherDebounceTimer]
  -[HMDCameraAnalysisStatePublisher stateUpdate]
  -[HMDCameraAnalysisStatePublisher setStateUpdate:]


HMDCameraClipOperation : HMFOperation <HMFObject, HMFLogging>
 @property  NSDate *creationDate
 @property  NSString *logIdentifier
 @property  double executionDuration
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  <HMDCameraClipOperationDataSource> *dataSource
 @property  NSUUID *clipModelID
 @property  HMBLocalZone *localZone
 @property  HMDCameraRecordingUploadOperationEvent *uploadOperationEvent
 @property  double queuedDuration
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipOperation shortDescription]
  +[HMDCameraClipOperation logCategory]
  +[HMDCameraClipOperation cameraClipOperationType]

  // instance methods
  -[HMDCameraClipOperation endDate]
  -[HMDCameraClipOperation logIdentifier]
  -[HMDCameraClipOperation dataSource]
  -[HMDCameraClipOperation attributeDescriptions]
  -[HMDCameraClipOperation privateDescription]
  -[HMDCameraClipOperation .cxx_destruct]
  -[HMDCameraClipOperation setStartDate:]
  -[HMDCameraClipOperation creationDate]
  -[HMDCameraClipOperation setEndDate:]
  -[HMDCameraClipOperation finish]
  -[HMDCameraClipOperation shortDescription]
  -[HMDCameraClipOperation localZone]
  -[HMDCameraClipOperation startDate]
  -[HMDCameraClipOperation main]
  -[HMDCameraClipOperation cancelWithError:]
  -[HMDCameraClipOperation initWithClipModelID:localZone:]
  -[HMDCameraClipOperation initWithClipModelID:localZone:dataSource:]
  -[HMDCameraClipOperation queuedDuration]
  -[HMDCameraClipOperation fetchClipModel]
  -[HMDCameraClipOperation updateClipModel:]
  -[HMDCameraClipOperation executionDuration]
  -[HMDCameraClipOperation _markEndDateAndSubmitUploadOperationEvent]
  -[HMDCameraClipOperation clipModelID]
  -[HMDCameraClipOperation uploadOperationEvent]


HMDAssistantWatchAuthenticationDataSource : HMFObject
  // instance methods
  -[HMDAssistantWatchAuthenticationDataSource getCurrentRequestIsWatchAuthenticatedWithCompletion:]


HMDHomeWalletKeyISOCredential : HMFObject <CIDCPayloadBuilderDelegate, HMDHomeWalletKeyISOCredential>
 @property  HAPPairingIdentity *pairingIdentity
 @property  NSData *deviceCredentialKeyExternalRepresentation
 @property  CIDCPayloadBuilder *credentialBuilder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeWalletKeyISOCredential .cxx_destruct]
  -[HMDHomeWalletKeyISOCredential pairingIdentity]
  -[HMDHomeWalletKeyISOCredential signPayloadWithBuilder:data:completion:]
  -[HMDHomeWalletKeyISOCredential encodeWithCompletion:]
  -[HMDHomeWalletKeyISOCredential initWithHAPPairingIdentity:deviceCredentialKeyExternalRepresentation:]
  -[HMDHomeWalletKeyISOCredential deviceCredentialKeyExternalRepresentation]
  -[HMDHomeWalletKeyISOCredential credentialBuilder]


HMDBackgroundSystemTask : NSObject <HMDBackgroundSystemTask>
 @property  BGSystemTask *underlyingTask
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBackgroundSystemTask .cxx_destruct]
  -[HMDBackgroundSystemTask underlyingTask]
  -[HMDBackgroundSystemTask setTaskCompleted]
  -[HMDBackgroundSystemTask initWithUnderlyingTask:]


HMDBackgroundSystemTaskRequest : HMFObject
 @property  BGRepeatingSystemTaskRequest *taskRequest
 @property  NSString *identifier
 @property  BOOL requiresInexpensiveNetworkConnectivity
 @property  BOOL requiresSignificantUserInactivity
 @property  double interval
 @property  double minDurationBetweenInstances

  // instance methods
  -[HMDBackgroundSystemTaskRequest identifier]
  -[HMDBackgroundSystemTaskRequest attributeDescriptions]
  -[HMDBackgroundSystemTaskRequest setInterval:]
  -[HMDBackgroundSystemTaskRequest .cxx_destruct]
  -[HMDBackgroundSystemTaskRequest initWithIdentifier:]
  -[HMDBackgroundSystemTaskRequest interval]
  -[HMDBackgroundSystemTaskRequest requiresSignificantUserInactivity]
  -[HMDBackgroundSystemTaskRequest setRequiresSignificantUserInactivity:]
  -[HMDBackgroundSystemTaskRequest initWithTaskRequest:]
  -[HMDBackgroundSystemTaskRequest taskRequest]
  -[HMDBackgroundSystemTaskRequest requiresInexpensiveNetworkConnectivity]
  -[HMDBackgroundSystemTaskRequest setRequiresInexpensiveNetworkConnectivity:]
  -[HMDBackgroundSystemTaskRequest minDurationBetweenInstances]
  -[HMDBackgroundSystemTaskRequest setMinDurationBetweenInstances:]


HMDBackgroundSystemTaskScheduler : NSObject <HMDBackgroundSystemTaskSchedulerInterfacing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBackgroundSystemTaskScheduler registerForTaskWithIdentifier:usingQueue:launchHandler:]
  -[HMDBackgroundSystemTaskScheduler submitTaskRequest:error:]
  -[HMDBackgroundSystemTaskScheduler taskRequestForIdentifier:]
  -[HMDBackgroundSystemTaskScheduler cancelTaskRequestWithIdentifier:error:]
  -[HMDBackgroundSystemTaskScheduler getTaskStatusForIdentifier:completionHandler:]


HMDCameraRemoteStreamControlManager : HMDCameraStreamControlManager <HMDStreamingManagerDelegate, HMDCameraIDSSessionReceiverDelegate, HMDCameraIDSDeviceConnectionReceiverDelegate, HMDCameraIDSDeviceConnectionSenderDelegate, HMDCameraStreamControlManagerProtocol>
 @property  NSUUID *profileUniqueIdentifier
 @property  HMDCameraResidentMessageHandler *residentMessageHandler
 @property  HMDCameraMediaConfigGenerator *configGenerator
 @property  HMDCameraRemoteStreamSession *streamSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long audioStreamSetting
 @property  NSNumber *aspectRatio
 @property  NSNumber *slotIdentifier
 @property  HMDCameraStreamMetrics *streamMetrics

  // class methods
  +[HMDCameraRemoteStreamControlManager logCategory]

  // instance methods
  -[HMDCameraRemoteStreamControlManager aspectRatio]
  -[HMDCameraRemoteStreamControlManager dealloc]
  -[HMDCameraRemoteStreamControlManager .cxx_destruct]
  -[HMDCameraRemoteStreamControlManager audioStreamSetting]
  -[HMDCameraRemoteStreamControlManager profileUniqueIdentifier]
  -[HMDCameraRemoteStreamControlManager slotIdentifier]
  -[HMDCameraRemoteStreamControlManager _streamStarted]
  -[HMDCameraRemoteStreamControlManager setUpRemoteConnectionWithDevice:]
  -[HMDCameraRemoteStreamControlManager streamingManager:didStartStreamWithError:]
  -[HMDCameraRemoteStreamControlManager streamingManagerDidReceiveFirstFrame:]
  -[HMDCameraRemoteStreamControlManager streamingManagerDidStopStream:error:]
  -[HMDCameraRemoteStreamControlManager streamingManagerDidNetworkImprove:]
  -[HMDCameraRemoteStreamControlManager streamingManagerDidNetworkDeteriorate:]
  -[HMDCameraRemoteStreamControlManager streamingManagerDidUpdateConfiguration:]
  -[HMDCameraRemoteStreamControlManager updateAudioSetting:]
  -[HMDCameraRemoteStreamControlManager updateAudioVolume:callback:]
  -[HMDCameraRemoteStreamControlManager deviceConnectionReceiver:didSetUpWithError:]
  -[HMDCameraRemoteStreamControlManager deviceConnectionReceiver:didEndSessionWithError:]
  -[HMDCameraRemoteStreamControlManager sessionReceiver:didSetUpWithError:]
  -[HMDCameraRemoteStreamControlManager sessionReceiver:didEndSessionWithError:]
  -[HMDCameraRemoteStreamControlManager deviceConnectionSender:didSetUpWithError:]
  -[HMDCameraRemoteStreamControlManager deviceConnectionSender:didEndSessionWithError:]
  -[HMDCameraRemoteStreamControlManager negotiateStream]
  -[HMDCameraRemoteStreamControlManager startStreamWithRemoteSettings:]
  -[HMDCameraRemoteStreamControlManager reconfigureStream:]
  -[HMDCameraRemoteStreamControlManager stopStreamWithError:]
  -[HMDCameraRemoteStreamControlManager initWithSessionID:workQueue:streamSnapshotHandler:reachabilityPath:device:delegate:delegateQueue:accessory:streamManagementService:remoteCapabilities:profileUniqueIdentifier:residentMessageHandler:remoteAccessDevice:streamPreference:]
  -[HMDCameraRemoteStreamControlManager initWithSessionID:workQueue:streamSnapshotHandler:delegate:delegateQueue:accessory:streamManagementService:profileUniqueIdentifier:residentMessageHandler:streamSession:]
  -[HMDCameraRemoteStreamControlManager _negotiateStream]
  -[HMDCameraRemoteStreamControlManager _setParametersSelected:]
  -[HMDCameraRemoteStreamControlManager _idsSessionCreatedAndConfigNegotiated]
  -[HMDCameraRemoteStreamControlManager _relaySessionStarted:]
  -[HMDCameraRemoteStreamControlManager _startStreamWithRemoteSettings:]
  -[HMDCameraRemoteStreamControlManager _dispatchStartRequestToResidentWithVideoSSRC:audioSSRC:]
  -[HMDCameraRemoteStreamControlManager _reconfigureStream:]
  -[HMDCameraRemoteStreamControlManager _setUpRemoteConnectionWithDevice:]
  -[HMDCameraRemoteStreamControlManager _stopCurrentStreamSessionWithError:]
  -[HMDCameraRemoteStreamControlManager _sendStopMessageToResident]
  -[HMDCameraRemoteStreamControlManager _cleanUpStreamSessionWithError:]
  -[HMDCameraRemoteStreamControlManager _reconfigureStreams]
  -[HMDCameraRemoteStreamControlManager _dispatchReconfigureToResident:]
  -[HMDCameraRemoteStreamControlManager _sendUpdatedConfiguration]
  -[HMDCameraRemoteStreamControlManager residentMessageHandler]
  -[HMDCameraRemoteStreamControlManager configGenerator]
  -[HMDCameraRemoteStreamControlManager streamSession]
  -[HMDCameraRemoteStreamControlManager setStreamSession:]


AWDHomeKitAccessoryRelaySetup : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasReason
 @property  NSString *reason
 @property  BOOL hasActionType
 @property  int actionType
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasCertified
 @property  int certified

  // instance methods
  -[AWDHomeKitAccessoryRelaySetup hasErrorCode]
  -[AWDHomeKitAccessoryRelaySetup setErrorCode:]
  -[AWDHomeKitAccessoryRelaySetup errorCode]
  -[AWDHomeKitAccessoryRelaySetup setDuration:]
  -[AWDHomeKitAccessoryRelaySetup hasReason]
  -[AWDHomeKitAccessoryRelaySetup setActionType:]
  -[AWDHomeKitAccessoryRelaySetup setTimestamp:]
  -[AWDHomeKitAccessoryRelaySetup hasDuration]
  -[AWDHomeKitAccessoryRelaySetup actionType]
  -[AWDHomeKitAccessoryRelaySetup copyTo:]
  -[AWDHomeKitAccessoryRelaySetup actionTypeAsString:]
  -[AWDHomeKitAccessoryRelaySetup .cxx_destruct]
  -[AWDHomeKitAccessoryRelaySetup setHasErrorCode:]
  -[AWDHomeKitAccessoryRelaySetup duration]
  -[AWDHomeKitAccessoryRelaySetup mergeFrom:]
  -[AWDHomeKitAccessoryRelaySetup reason]
  -[AWDHomeKitAccessoryRelaySetup setHasTimestamp:]
  -[AWDHomeKitAccessoryRelaySetup setHasActionType:]
  -[AWDHomeKitAccessoryRelaySetup dictionaryRepresentation]
  -[AWDHomeKitAccessoryRelaySetup hasTimestamp]
  -[AWDHomeKitAccessoryRelaySetup copyWithZone:]
  -[AWDHomeKitAccessoryRelaySetup timestamp]
  -[AWDHomeKitAccessoryRelaySetup readFrom:]
  -[AWDHomeKitAccessoryRelaySetup setHasDuration:]
  -[AWDHomeKitAccessoryRelaySetup writeTo:]
  -[AWDHomeKitAccessoryRelaySetup StringAsActionType:]
  -[AWDHomeKitAccessoryRelaySetup setReason:]
  -[AWDHomeKitAccessoryRelaySetup hasActionType]
  -[AWDHomeKitAccessoryRelaySetup isEqual:]
  -[AWDHomeKitAccessoryRelaySetup hasVendorDetails]
  -[AWDHomeKitAccessoryRelaySetup vendorDetails]
  -[AWDHomeKitAccessoryRelaySetup setVendorDetails:]
  -[AWDHomeKitAccessoryRelaySetup certified]
  -[AWDHomeKitAccessoryRelaySetup setCertified:]
  -[AWDHomeKitAccessoryRelaySetup setHasCertified:]
  -[AWDHomeKitAccessoryRelaySetup hasCertified]
  -[AWDHomeKitAccessoryRelaySetup certifiedAsString:]
  -[AWDHomeKitAccessoryRelaySetup StringAsCertified:]


HMDHomeWalletKeyManager : HMFObject <HMFMessageReceiver, HMFLogging, HMDWalletPassLibraryDelegate, HMDHomeWalletKeyAccessoryManagerDelegate>
 @property  <HMDFileManager> *fileManager
 @property  <HMDWalletPassLibrary> *passLibrary
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *uuid
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter
 @property  HMDWatchManager *watchManager
 @property  NAFuture *addWalletKeyFuture
 @property  @? isoCredentialFactory
 @property  <HAPKeyStore> *keychainStore
 @property  HMDLostModeManager *lostModeManager
 @property  <HMDHomeWalletDataSource> *dataSource
 @property  NSMutableArray *pendingUpdateWalletKeyOperations
 @property  BOOL isWalletKeyUpdateOperationInProgress
 @property  HMDBulletinBoard *bulletinBoard
 @property  HMDApplicationRegistry *applicationRegistry
 @property  BOOL canSuspendWalletKey
 @property  HMFSystemInfo *systemInfo
 @property  NSString *passSerialNumber
 @property  BOOL hasHomeKeyInWallet
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeWalletKeyManager logCategory]
  +[HMDHomeWalletKeyManager preferenceKeyForShouldRollWalletKeyAfterHH2MigrationForHomeUUID:]
  +[HMDHomeWalletKeyManager _markHome:asNeedingWalletKeyRollAfterHH2Migration:]
  +[HMDHomeWalletKeyManager responsePayloadForPairedWatchesWithMessageName:responsePayloadByDevice:error:]
  +[HMDHomeWalletKeyManager homekitErrorWithPassLibraryError:]

  // instance methods
  -[HMDHomeWalletKeyManager notificationCenter]
  -[HMDHomeWalletKeyManager passLibrary]
  -[HMDHomeWalletKeyManager home]
  -[HMDHomeWalletKeyManager logIdentifier]
  -[HMDHomeWalletKeyManager dataSource]
  -[HMDHomeWalletKeyManager keychainStore]
  -[HMDHomeWalletKeyManager workQueue]
  -[HMDHomeWalletKeyManager uuid]
  -[HMDHomeWalletKeyManager .cxx_destruct]
  -[HMDHomeWalletKeyManager messageTargetUUID]
  -[HMDHomeWalletKeyManager fileManager]
  -[HMDHomeWalletKeyManager messageReceiveQueue]
  -[HMDHomeWalletKeyManager systemInfo]
  -[HMDHomeWalletKeyManager messageDispatcher]
  -[HMDHomeWalletKeyManager setHome:]
  -[HMDHomeWalletKeyManager passSerialNumber]
  -[HMDHomeWalletKeyManager addWalletKeyWithOptions:completion:]
  -[HMDHomeWalletKeyManager setMessageDispatcher:]
  -[HMDHomeWalletKeyManager bulletinBoard]
  -[HMDHomeWalletKeyManager handleHomeUserRemovedNotification:]
  -[HMDHomeWalletKeyManager handleAccessorySupportsAccessCodeDidChangeNotification:]
  -[HMDHomeWalletKeyManager configureWithHome:]
  -[HMDHomeWalletKeyManager handleAddWalletKeyMessage:]
  -[HMDHomeWalletKeyManager handleMessageForPairedWatches:]
  -[HMDHomeWalletKeyManager handleEnableExpressForWalletKeyMessage:]
  -[HMDHomeWalletKeyManager handlePersistWalletKeyAddOptionsRemoteMessage:]
  -[HMDHomeWalletKeyManager handleFetchDeviceStateMessage:]
  -[HMDHomeWalletKeyManager handleFetchAvailableWalletKeyEncodedPKPassMessage:]
  -[HMDHomeWalletKeyManager handleFetchWalletKeyColorMessage:]
  -[HMDHomeWalletKeyManager handleHomeRemovedNotification:]
  -[HMDHomeWalletKeyManager handleHomeNameChangedNotification:]
  -[HMDHomeWalletKeyManager handleHomeAddedAccessoryNotification:]
  -[HMDHomeWalletKeyManager handleHomeAccessoryRemovedNotification:]
  -[HMDHomeWalletKeyManager handleAccessorySupportsWalleyKeyDidChangeNotification:]
  -[HMDHomeWalletKeyManager handleHomeDidUpdateNFCReaderKeyNotification:]
  -[HMDHomeWalletKeyManager handleLostModeUpdated]
  -[HMDHomeWalletKeyManager handleHomeHasOnboardedForWalletKeyChangeNotification:]
  -[HMDHomeWalletKeyManager handleLostModeManagerDidExitLostModeWithAuthCompleteNotification]
  -[HMDHomeWalletKeyManager handleApplicationInstalled:]
  -[HMDHomeWalletKeyManager handleApplicationUninstalled:]
  -[HMDHomeWalletKeyManager handleSystemInfoMigrationUpdatedNotification:]
  -[HMDHomeWalletKeyManager passLibrary:didAddPassWithSerialNumber:typeIdentifier:]
  -[HMDHomeWalletKeyManager passLibrary:didRemovePassWithSerialNumber:typeIdentifier:]
  -[HMDHomeWalletKeyManager walletDidEnableAddingPassesForPassLibrary:]
  -[HMDHomeWalletKeyManager accessoryManager:didUpdateWalletKeyColor:]
  -[HMDHomeWalletKeyManager initWithUUID:workQueue:]
  -[HMDHomeWalletKeyManager initWithUUID:workQueue:fileManager:passLibrary:notificationCenter:watchManager:keychainStore:lostModeManager:dataSource:bulletinBoard:applicationRegistry:systemInfo:isoCredentialFactory:]
  -[HMDHomeWalletKeyManager recoverDueToUUIDChangeOfUser:fromOldUUID:]
  -[HMDHomeWalletKeyManager handleAccessCodeChanged]
  -[HMDHomeWalletKeyManager hasHomeKeyInWallet]
  -[HMDHomeWalletKeyManager autoAddWalletKey]
  -[HMDHomeWalletKeyManager canAutoAddWalletKeyWithError:]
  -[HMDHomeWalletKeyManager fetchExpressEnablementConflictingPassDescriptionWithCompletion:]
  -[HMDHomeWalletKeyManager updateDeviceStateWithCanAddWalletKey:completion:]
  -[HMDHomeWalletKeyManager fetchHomeKeySupportedWithCompletion:]
  -[HMDHomeWalletKeyManager updateDeviceStateWithWalletKey:completion:]
  -[HMDHomeWalletKeyManager updateDeviceStateWithExpressEnablementConflictingPassDescription:completion:]
  -[HMDHomeWalletKeyManager sendMessageWithName:payload:toWatches:completion:]
  -[HMDHomeWalletKeyManager fetchPayloadForAddWalletKeyRemoteMessage:]
  -[HMDHomeWalletKeyManager fetchOrCreateReaderKeyWithCompletion:]
  -[HMDHomeWalletKeyManager fetchWalletKeyColorOption]
  -[HMDHomeWalletKeyManager addWalletKeyWithOptions:nfcReaderKey:completion:]
  -[HMDHomeWalletKeyManager addWalletKey:withOptions:assertion:]
  -[HMDHomeWalletKeyManager enableExpressWithOptions:completion:]
  -[HMDHomeWalletKeyManager createExpressModeSetUpBulletin]
  -[HMDHomeWalletKeyManager removeWalletKeyOnboardingBulletin]
  -[HMDHomeWalletKeyManager syncDeviceCredentialKey:]
  -[HMDHomeWalletKeyManager enqueueWalletKeyUpdateOperation:]
  -[HMDHomeWalletKeyManager handlePendingWalletKeyUpdateOperations]
  -[HMDHomeWalletKeyManager addISOCredentialWithPassAtURL:walletKey:completion:]
  -[HMDHomeWalletKeyManager createPassDirectoryWithResourceFiles]
  -[HMDHomeWalletKeyManager createPassDirectoryWithoutResourceFiles]
  -[HMDHomeWalletKeyManager createPassDirectoryWithWalletKey:options:shouldSkipResourceFiles:shouldCreateZipArchive:completion:]
  -[HMDHomeWalletKeyManager updatePassJSONAtURL:withWalletKey:options:]
  -[HMDHomeWalletKeyManager passSerialNumberWithUserUUID:]
  -[HMDHomeWalletKeyManager walletKeyByAddingAccessCodeToWalletKey:]
  -[HMDHomeWalletKeyManager updateWalletKeyStateToState:]
  -[HMDHomeWalletKeyManager syncDeviceCredentialKeyForAccessory:]
  -[HMDHomeWalletKeyManager fetchShouldSuppressWalletNotificationWithCompletion:]
  -[HMDHomeWalletKeyManager updateWalletKeyAccessCodeFieldWithReason:]
  -[HMDHomeWalletKeyManager fetchShouldAutoEnableExpressWithCompletion:]
  -[HMDHomeWalletKeyManager autoAddWalletKeyWithReason:completion:]
  -[HMDHomeWalletKeyManager showExpressEnabledNotificationForWalletKey:]
  -[HMDHomeWalletKeyManager handleNFCReaderKeyUpdatedForWalletKey:]
  -[HMDHomeWalletKeyManager canSuspendWalletKey]
  -[HMDHomeWalletKeyManager watchManager]
  -[HMDHomeWalletKeyManager addWalletKeyFuture]
  -[HMDHomeWalletKeyManager setAddWalletKeyFuture:]
  -[HMDHomeWalletKeyManager isoCredentialFactory]
  -[HMDHomeWalletKeyManager lostModeManager]
  -[HMDHomeWalletKeyManager pendingUpdateWalletKeyOperations]
  -[HMDHomeWalletKeyManager isWalletKeyUpdateOperationInProgress]
  -[HMDHomeWalletKeyManager setIsWalletKeyUpdateOperationInProgress:]
  -[HMDHomeWalletKeyManager applicationRegistry]


HMDIDSMessageTransport : HMDRemoteMessageTransport <HMDIDSServiceDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDAppleAccountManager *appleAccountManager
 @property  HMDRemoteAccountManager *remoteAccountManager
 @property  NSMutableArray *messageContexts
 @property  HMFOperationBudget *sendMessageBudget
 @property  NSMutableDictionary *pendingResponses
 @property  NSMutableDictionary *receivedResponses
 @property  NSMutableDictionary *requestedCapabilities
 @property  NSMutableDictionary *destinationAddress
 @property  NSMutableDictionary *pendingResponseTimers
 @property  NSMutableOrderedSet *messageDedupBuffer
 @property  BOOL modernTransport
 @property  <HMDIDSService> *service
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSMessageTransport logCategory]
  +[HMDIDSMessageTransport restriction]
  +[HMDIDSMessageTransport priorityForMessage:]
  +[HMDIDSMessageTransport sendMessageLimit]
  +[HMDIDSMessageTransport sendMessageRate]

  // instance methods
  -[HMDIDSMessageTransport logIdentifier]
  -[HMDIDSMessageTransport sendMessage:completionHandler:]
  -[HMDIDSMessageTransport workQueue]
  -[HMDIDSMessageTransport qualityOfService]
  -[HMDIDSMessageTransport service:account:identifier:didSendWithSuccess:error:context:]
  -[HMDIDSMessageTransport .cxx_destruct]
  -[HMDIDSMessageTransport destinationAddress]
  -[HMDIDSMessageTransport service]
  -[HMDIDSMessageTransport transportType]
  -[HMDIDSMessageTransport service:account:incomingMessage:fromID:context:]
  -[HMDIDSMessageTransport start]
  -[HMDIDSMessageTransport isSecure]
  -[HMDIDSMessageTransport canSendMessage:]
  -[HMDIDSMessageTransport pendingResponses]
  -[HMDIDSMessageTransport initWithAccountRegistry:]
  -[HMDIDSMessageTransport initModernTransportWithAccountRegistry:]
  -[HMDIDSMessageTransport initModernTransportWithAccountRegistry:service:appleAccountManager:remoteAccountManager:]
  -[HMDIDSMessageTransport initWithAccountRegistry:service:appleAccountManager:remoteAccountManager:]
  -[HMDIDSMessageTransport deviceForSenderContext:]
  -[HMDIDSMessageTransport isValidMessage:]
  -[HMDIDSMessageTransport sendMessage:fromHandle:destination:priority:timeout:options:queueOneID:error:]
  -[HMDIDSMessageTransport _restartPendingResponseTimerFor:withReducedFactor:]
  -[HMDIDSMessageTransport _pendingResponseTimeoutFor:]
  -[HMDIDSMessageTransport _startPendingResponseTimer:responseTimeout:identifier:]
  -[HMDIDSMessageTransport _removePendingResponseTimerForTransaction:]
  -[HMDIDSMessageTransport _removePendingResponseTransaction:]
  -[HMDIDSMessageTransport legacyHandleIncomingRemoteMessage:sourceDevice:senderDeviceHandle:isSecure:incomingMessage:fromID:context:]
  -[HMDIDSMessageTransport appleAccountManager]
  -[HMDIDSMessageTransport remoteAccountManager]
  -[HMDIDSMessageTransport messageContexts]
  -[HMDIDSMessageTransport sendMessageBudget]
  -[HMDIDSMessageTransport receivedResponses]
  -[HMDIDSMessageTransport requestedCapabilities]
  -[HMDIDSMessageTransport pendingResponseTimers]
  -[HMDIDSMessageTransport messageDedupBuffer]
  -[HMDIDSMessageTransport isModernTransport]


HMDUnassociatedAppleMediaAccessory : HMDUnassociatedMediaAccessory <HMFLogging>
 @property  HMDCapabilityFlags *requiredPairingCapabilities
 @property  HMDDevice *device
 @property  unsigned long variant
 @property  NSString *model
 @property  NSString *serialNumber
 @property  HMFSoftwareVersion *softwareVersion
 @property  BOOL currentAccessory
 @property  unsigned long supportedStereoPairVersions
 @property  HMDHomeKitVersion *minimumRequiredPairingSoftwareVersion
 @property  long long productColor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUnassociatedAppleMediaAccessory supportsSecureCoding]
  +[HMDUnassociatedAppleMediaAccessory namespace]
  +[HMDUnassociatedAppleMediaAccessory logCategory]

  // instance methods
  -[HMDUnassociatedAppleMediaAccessory dumpDescription]
  -[HMDUnassociatedAppleMediaAccessory serialNumber]
  -[HMDUnassociatedAppleMediaAccessory setSerialNumber:]
  -[HMDUnassociatedAppleMediaAccessory setModel:]
  -[HMDUnassociatedAppleMediaAccessory logIdentifier]
  -[HMDUnassociatedAppleMediaAccessory productColor]
  -[HMDUnassociatedAppleMediaAccessory model]
  -[HMDUnassociatedAppleMediaAccessory softwareVersion]
  -[HMDUnassociatedAppleMediaAccessory variant]
  -[HMDUnassociatedAppleMediaAccessory encodeWithCoder:]
  -[HMDUnassociatedAppleMediaAccessory setVariant:]
  -[HMDUnassociatedAppleMediaAccessory .cxx_destruct]
  -[HMDUnassociatedAppleMediaAccessory setDevice:]
  -[HMDUnassociatedAppleMediaAccessory device]
  -[HMDUnassociatedAppleMediaAccessory initWithCoder:]
  -[HMDUnassociatedAppleMediaAccessory isCurrentAccessory]
  -[HMDUnassociatedAppleMediaAccessory setCurrentAccessory:]
  -[HMDUnassociatedAppleMediaAccessory setSupportedStereoPairVersions:]
  -[HMDUnassociatedAppleMediaAccessory supportedStereoPairVersions]
  -[HMDUnassociatedAppleMediaAccessory setSoftwareVersion:]
  -[HMDUnassociatedAppleMediaAccessory descriptionWithPointer:additionalDescription:]
  -[HMDUnassociatedAppleMediaAccessory addTransactionForHome:configurationAppIdentifier:]
  -[HMDUnassociatedAppleMediaAccessory modelForChangeType:uuid:parentUUID:]
  -[HMDUnassociatedAppleMediaAccessory initWithIdentifier:name:category:productColor:messageDispatcher:]
  -[HMDUnassociatedAppleMediaAccessory initWithIdentifier:name:category:requiredPairingCapabilities:minimumPairingSoftware:productColor:messageDispatcher:]
  -[HMDUnassociatedAppleMediaAccessory canPairGivenCapabilities:]
  -[HMDUnassociatedAppleMediaAccessory minimumRequiredPairingSoftwareVersion]
  -[HMDUnassociatedAppleMediaAccessory requiredPairingCapabilities]


HMDUnassociatedAppleHomePodAccessory : HMDUnassociatedAppleMediaAccessory
  // instance methods
  -[HMDUnassociatedAppleHomePodAccessory modelForChangeType:uuid:parentUUID:]
  -[HMDUnassociatedAppleHomePodAccessory initWithIdentifier:name:category:productColor:requiredPairingCapabilities:minimumPairingSoftware:messageDispatcher:]


HMDLocationTuple : HMFObject
 @property  CLLocation *location
 @property  unsigned long reachableIPAccessoryCount
 @property  unsigned long reachableBTLEAccessoryCount
 @property  unsigned long reachableMediaAccessoryCount

  // instance methods
  -[HMDLocationTuple attributeDescriptions]
  -[HMDLocationTuple .cxx_destruct]
  -[HMDLocationTuple location]
  -[HMDLocationTuple initWithLocation:reachableIPAccessoryCount:reachableBTLEAccessoryCount:reachableMediaAccessoryCount:]
  -[HMDLocationTuple reachableIPAccessoryCount]
  -[HMDLocationTuple reachableBTLEAccessoryCount]
  -[HMDLocationTuple reachableMediaAccessoryCount]


HMDAccessorySettingsMetadata : HMFObject <HMFObject>
 @property  HMDAccessorySettingGroupMetadata *rootGroup
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAccessorySettingsMetadata propertyDescription]
  -[HMDAccessorySettingsMetadata initWithURL:]
  -[HMDAccessorySettingsMetadata .cxx_destruct]
  -[HMDAccessorySettingsMetadata init]
  -[HMDAccessorySettingsMetadata rootGroup]


HMDAccessorySettingGroupMetadata : HMFObject <HMFObject>
 @property  NSString *name
 @property  NSString *keyPath
 @property  NSArray *groups
 @property  NSArray *settings
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessorySettingGroupMetadata groupsWithArrayRepresenation:parentKeyPath:]
  +[HMDAccessorySettingGroupMetadata groupWithDictonaryRepresentation:parentKeyPath:]

  // instance methods
  -[HMDAccessorySettingGroupMetadata groups]
  -[HMDAccessorySettingGroupMetadata propertyDescription]
  -[HMDAccessorySettingGroupMetadata .cxx_destruct]
  -[HMDAccessorySettingGroupMetadata keyPath]
  -[HMDAccessorySettingGroupMetadata settings]
  -[HMDAccessorySettingGroupMetadata name]
  -[HMDAccessorySettingGroupMetadata initWithName:settings:groups:]
  -[HMDAccessorySettingGroupMetadata initWithName:settings:groups:parentKeyPath:]
  -[HMDAccessorySettingGroupMetadata modelsWithParentIdentifier:]


HMDAccessorySettingMetadata : HMFObject <HMFObject>
 @property  NSString *name
 @property  NSString *keyPath
 @property  long long type
 @property  unsigned long properties
 @property  HMDAccessorySettingMergeStrategy *mergeStrategy
 @property  NSArray *constraints
 @property  id value
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessorySettingMetadata settingsWithArrayRepresenation:parentKeyPath:]
  +[HMDAccessorySettingMetadata settingWithDictonaryRepresentation:parentKeyPath:]
  +[HMDAccessorySettingMetadata valueWithType:constraints:representation:]

  // instance methods
  -[HMDAccessorySettingMetadata propertyDescription]
  -[HMDAccessorySettingMetadata properties]
  -[HMDAccessorySettingMetadata type]
  -[HMDAccessorySettingMetadata .cxx_destruct]
  -[HMDAccessorySettingMetadata keyPath]
  -[HMDAccessorySettingMetadata value]
  -[HMDAccessorySettingMetadata name]
  -[HMDAccessorySettingMetadata constraints]
  -[HMDAccessorySettingMetadata mergeStrategy]
  -[HMDAccessorySettingMetadata modelsWithParentIdentifier:]
  -[HMDAccessorySettingMetadata initWithName:type:properties:constraints:mergeStrategy:value:parentKeyPath:]
  -[HMDAccessorySettingMetadata modelWithParentIdentifier:]


HMDUserPresenceFeeder : HMDHomePresenceBase <HMDUserPresenceFeedSessionDelegate, HMFLogging>
 @property  long long ckAccountStatus
 @property  BOOL isAccountStatusFetchInProgress
 @property  NSString *timerID
 @property  unsigned long presenceRegionStatus
 @property  HMDUserPresenceFeedSession *currentFeedSession
 @property  HMDUserPresenceFeed *lastSentFeed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserPresenceFeeder logCategory]

  // instance methods
  -[HMDUserPresenceFeeder timerID]
  -[HMDUserPresenceFeeder .cxx_destruct]
  -[HMDUserPresenceFeeder init]
  -[HMDUserPresenceFeeder _registerForMessages]
  -[HMDUserPresenceFeeder _startRefreshTimer]
  -[HMDUserPresenceFeeder configure:messageDispatcher:]
  -[HMDUserPresenceFeeder handleTimerFiredNotification:]
  -[HMDUserPresenceFeeder handleHomeDataLoadedNotification:]
  -[HMDUserPresenceFeeder residentChanged]
  -[HMDUserPresenceFeeder fmfStatusUpdateNotification:]
  -[HMDUserPresenceFeeder _handleLocationAuthorizationChangedNotification:]
  -[HMDUserPresenceFeeder handleResidentDeviceConfirmed:]
  -[HMDUserPresenceFeeder accountAvailabilityChanged:]
  -[HMDUserPresenceFeeder didEndFeedSession:]
  -[HMDUserPresenceFeeder fetchCKAccountStatusAndSendPresenceReport]
  -[HMDUserPresenceFeeder homeDataProcessed]
  -[HMDUserPresenceFeeder _upgradePresenceAuth]
  -[HMDUserPresenceFeeder setPresenceRegionStatus:]
  -[HMDUserPresenceFeeder presenceAuthStatusChangedForUser:presenceAuthStatus:]
  -[HMDUserPresenceFeeder presenceAuthChanged]
  -[HMDUserPresenceFeeder _sendPresenceReport:]
  -[HMDUserPresenceFeeder _sendPresenceUpdateToResident:]
  -[HMDUserPresenceFeeder _sendPresenceUpdateToResidentForUser:presenceAuthStatus:authChanging:reason:]
  -[HMDUserPresenceFeeder _sendPresenceUpdateToResidentForUser:presenceAuthStatus:authChanging:reason:fmfStatus:]
  -[HMDUserPresenceFeeder _updatePresenceToResidentForUser:presenceAuthStatus:authChanging:reason:fmfStatus:]
  -[HMDUserPresenceFeeder _sendPresenceAuthStatusForUser:presenceAuthStatus:presenceRegionStatus:presenceComputeStatus:reason:]
  -[HMDUserPresenceFeeder _updatePresenceComputeStatus:]
  -[HMDUserPresenceFeeder notifyDidArriveHome]
  -[HMDUserPresenceFeeder notifyDidLeaveHome]
  -[HMDUserPresenceFeeder notifyDidEnterHomeRegion]
  -[HMDUserPresenceFeeder notifyDidLeaveHomeRegion]
  -[HMDUserPresenceFeeder presenceRegionStatus]
  -[HMDUserPresenceFeeder currentFeedSession]
  -[HMDUserPresenceFeeder setCurrentFeedSession:]
  -[HMDUserPresenceFeeder lastSentFeed]
  -[HMDUserPresenceFeeder setLastSentFeed:]
  -[HMDUserPresenceFeeder ckAccountStatus]
  -[HMDUserPresenceFeeder setCkAccountStatus:]
  -[HMDUserPresenceFeeder isAccountStatusFetchInProgress]
  -[HMDUserPresenceFeeder setIsAccountStatusFetchInProgress:]


HMDDataStreamFrameReader : NSObject
  // class methods
  +[HMDDataStreamFrameReader logCategory]

  // instance methods
  -[HMDDataStreamFrameReader reset]
  -[HMDDataStreamFrameReader .cxx_destruct]
  -[HMDDataStreamFrameReader hasFailed]
  -[HMDDataStreamFrameReader init]
  -[HMDDataStreamFrameReader hasCompleteFrame]
  -[HMDDataStreamFrameReader hasPartialData]
  -[HMDDataStreamFrameReader _getCurrentFrameSize]
  -[HMDDataStreamFrameReader bytesNeededForCurrentFrame]
  -[HMDDataStreamFrameReader pushFrameData:]
  -[HMDDataStreamFrameReader _readFrameHeaderIfPossible]
  -[HMDDataStreamFrameReader popRawFrame]


HMDPrimaryResidentMessageRouterMetricsDispatcher : HMFObject
 @property  <HMMLogEventSubmitting> *logEventSubmitter

  // instance methods
  -[HMDPrimaryResidentMessageRouterMetricsDispatcher .cxx_destruct]
  -[HMDPrimaryResidentMessageRouterMetricsDispatcher logEventSubmitter]
  -[HMDPrimaryResidentMessageRouterMetricsDispatcher initWithLogEventSubmitter:]
  -[HMDPrimaryResidentMessageRouterMetricsDispatcher submitFailureEventWithMessageName:failureType:]


HMDXPCMessageCountersLogEvent : HMMLogEvent
 @property  NSString *type
 @property  NSString *peerInformation
 @property  NSString *messageName
 @property  NSNumber *count

  // class methods
  +[HMDXPCMessageCountersLogEvent XPCMessageCountersLogEventWithType:peerInformation:messageName:count:]

  // instance methods
  -[HMDXPCMessageCountersLogEvent shouldSubmit]
  -[HMDXPCMessageCountersLogEvent type]
  -[HMDXPCMessageCountersLogEvent messageName]
  -[HMDXPCMessageCountersLogEvent .cxx_destruct]
  -[HMDXPCMessageCountersLogEvent count]
  -[HMDXPCMessageCountersLogEvent peerInformation]
  -[HMDXPCMessageCountersLogEvent __initWithType:peerInformation:messageName:count:]


HMDAssistantCommandHelper : HMFObject <HMFMessageReceiver, HMFLogging>
 @property  @? responseHandler
 @property  @? mediaResponseHandler
 @property  NSUUID *messageId
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *queue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSUUID *uuid
 @property  NSMutableArray *responses
 @property  unsigned long numErrors
 @property  BOOL executingActionSet
 @property  NSArray *requests
 @property  NSArray *mediaRequests
 @property  NSMutableArray *mediaResponses
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantCommandHelper logCategory]

  // instance methods
  -[HMDAssistantCommandHelper requests]
  -[HMDAssistantCommandHelper home]
  -[HMDAssistantCommandHelper responseHandler]
  -[HMDAssistantCommandHelper messageId]
  -[HMDAssistantCommandHelper responses]
  -[HMDAssistantCommandHelper _register]
  -[HMDAssistantCommandHelper dealloc]
  -[HMDAssistantCommandHelper uuid]
  -[HMDAssistantCommandHelper .cxx_destruct]
  -[HMDAssistantCommandHelper setUuid:]
  -[HMDAssistantCommandHelper messageTargetUUID]
  -[HMDAssistantCommandHelper setRequests:]
  -[HMDAssistantCommandHelper setQueue:]
  -[HMDAssistantCommandHelper queue]
  -[HMDAssistantCommandHelper messageReceiveQueue]
  -[HMDAssistantCommandHelper setResponseHandler:]
  -[HMDAssistantCommandHelper msgDispatcher]
  -[HMDAssistantCommandHelper setMessageId:]
  -[HMDAssistantCommandHelper setHome:]
  -[HMDAssistantCommandHelper setResponses:]
  -[HMDAssistantCommandHelper setMsgDispatcher:]
  -[HMDAssistantCommandHelper timeoutAndReportResults]
  -[HMDAssistantCommandHelper reportOperationStartedForAccessory:]
  -[HMDAssistantCommandHelper handleAccessoryCharacteristicsChangedNotification:]
  -[HMDAssistantCommandHelper initWithQueue:msgDispatcher:]
  -[HMDAssistantCommandHelper _reportResponsesForMediaRequests]
  -[HMDAssistantCommandHelper _reportResponses]
  -[HMDAssistantCommandHelper _reportOperationStartedForAccessory:]
  -[HMDAssistantCommandHelper __handleAccessoryCharacteristicsChanged:]
  -[HMDAssistantCommandHelper addMediaWriteRequests:withRequestProperty:completion:]
  -[HMDAssistantCommandHelper addReadRequests:home:completion:]
  -[HMDAssistantCommandHelper addWriteRequests:home:completion:]
  -[HMDAssistantCommandHelper addActionSetRequest:actionSet:completionHandler:]
  -[HMDAssistantCommandHelper removeResponses:]
  -[HMDAssistantCommandHelper mediaResponseHandler]
  -[HMDAssistantCommandHelper setMediaResponseHandler:]
  -[HMDAssistantCommandHelper numErrors]
  -[HMDAssistantCommandHelper setNumErrors:]
  -[HMDAssistantCommandHelper executingActionSet]
  -[HMDAssistantCommandHelper setExecutingActionSet:]
  -[HMDAssistantCommandHelper mediaRequests]
  -[HMDAssistantCommandHelper setMediaRequests:]
  -[HMDAssistantCommandHelper mediaResponses]
  -[HMDAssistantCommandHelper setMediaResponses:]


HMDPhotoLibrary : HMFObject <HMFLogging, PHPhotoLibraryChangeObserver>
 @property  PHPhotoLibrary *photoLibrary
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  PHFetchResult *suggestedPersonsFetchResult
 @property  NSSet *persons
 @property  <HMDPhotoLibraryChangeDelegate> *photoLibraryChangeDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPhotoLibrary logCategory]
  +[HMDPhotoLibrary _phPersonWithUUID:fromSuggestedPersonsFetchResult:]

  // instance methods
  -[HMDPhotoLibrary photoLibrary]
  -[HMDPhotoLibrary workQueue]
  -[HMDPhotoLibrary .cxx_destruct]
  -[HMDPhotoLibrary photoLibraryDidChange:]
  -[HMDPhotoLibrary persons]
  -[HMDPhotoLibrary initWithWorkQueue:]
  -[HMDPhotoLibrary photoLibraryChangeDelegate]
  -[HMDPhotoLibrary setPhotoLibraryChangeDelegate:]
  -[HMDPhotoLibrary fetchPersons]
  -[HMDPhotoLibrary fetchFaceCropDataByUUIDForPersonUUID:]
  -[HMDPhotoLibrary numberOfFaceCropsForPersonWithUUID:]
  -[HMDPhotoLibrary faceCropFromFaceCropData:]
  -[HMDPhotoLibrary suggestedPersonsFetchResult]
  -[HMDPhotoLibrary setSuggestedPersonsFetchResult:]


HMDUnifiedLanguageValueListSettingDataProvider : HMFObject <HMFLogging, HMDLanguageValueListSettingDataProvider>
 @property  <HMDUnifiedLanguageValueListSettingDataProviderDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUnifiedLanguageValueListSettingDataProvider logCategory]
  +[HMDUnifiedLanguageValueListSettingDataProvider unifyLanguageValues:withValues:]

  // instance methods
  -[HMDUnifiedLanguageValueListSettingDataProvider dataSource]
  -[HMDUnifiedLanguageValueListSettingDataProvider .cxx_destruct]
  -[HMDUnifiedLanguageValueListSettingDataProvider setDataSource:]
  -[HMDUnifiedLanguageValueListSettingDataProvider languageValueList]
  -[HMDUnifiedLanguageValueListSettingDataProvider dataSourceDataProviders]


HMDCloudGroupChange : HMFObject
 @property  HMDCloudGroup *cloudGroup
 @property  BOOL decryptionFailed
 @property  BOOL encryptionFailed
 @property  BOOL controllerIdentifierChanged
 @property  HMDCloudChangeTree *cloudChangeTree
 @property  NSMutableArray *cloudChanges
 @property  NSMutableArray *processingCloudChanges
 @property  NSMutableArray *processedCloudChanges
 @property  BOOL rootRecordRequired
 @property  HMDCloudManagerMetricsDispatcher *metricsDispatcher
 @property  NSArray *allTransactionStoreRowIDs
 @property  NSArray *processedTransactionStoreRowIDs
 @property  BOOL temporaryCache
 @property  BOOL hasValidChanges
 @property  BOOL doRecordsExistInCache
 @property  NSArray *objectChanges

  // class methods
  +[HMDCloudGroupChange shortDescription]

  // instance methods
  -[HMDCloudGroupChange _removeChange:]
  -[HMDCloudGroupChange .cxx_destruct]
  -[HMDCloudGroupChange shortDescription]
  -[HMDCloudGroupChange init]
  -[HMDCloudGroupChange metricsDispatcher]
  -[HMDCloudGroupChange allTransactionStoreRowIDs]
  -[HMDCloudGroupChange cloudChanges]
  -[HMDCloudGroupChange hasValidChanges]
  -[HMDCloudGroupChange initWithGroup:temporaryCache:]
  -[HMDCloudGroupChange initWithGroup:temporaryCache:metricsDispatcher:]
  -[HMDCloudGroupChange processedTransactionStoreRowIDs]
  -[HMDCloudGroupChange changeWithObjectID:]
  -[HMDCloudGroupChange cloudRecordWithObjectID:]
  -[HMDCloudGroupChange cachedCloudRecordWithObjectID:completionHandler:]
  -[HMDCloudGroupChange cachedCloudRecordWithObjectID:]
  -[HMDCloudGroupChange doRecordsExistInCache]
  -[HMDCloudGroupChange changeWithRecordName:]
  -[HMDCloudGroupChange cloudRecordWithName:]
  -[HMDCloudGroupChange addChangeWithObjectChange:]
  -[HMDCloudGroupChange addChangeWithRecord:]
  -[HMDCloudGroupChange _addChangeWithDeletedCloudRecord:]
  -[HMDCloudGroupChange addChangeWithDeletedRecordID:]
  -[HMDCloudGroupChange _loadTreeWithRecordMapping:]
  -[HMDCloudGroupChange loadCloudChangeTreeFromCache:]
  -[HMDCloudGroupChange _initializeCloudChanges]
  -[HMDCloudGroupChange loadCloudRecordsFromCache:]
  -[HMDCloudGroupChange loadCloudRecordsAndDetermineDeletesFromCache:]
  -[HMDCloudGroupChange moreChangesToProcess]
  -[HMDCloudGroupChange setAsProcessedChange:]
  -[HMDCloudGroupChange setAllChangedAsProcessed]
  -[HMDCloudGroupChange isRootRecordRequired]
  -[HMDCloudGroupChange rootRecordModelObject]
  -[HMDCloudGroupChange addRootRecordChange]
  -[HMDCloudGroupChange collectRecordsForBatch]
  -[HMDCloudGroupChange addChange:setAsProcessing:]
  -[HMDCloudGroupChange removeChangeWithObjectID:]
  -[HMDCloudGroupChange fetchBatchToUpload:]
  -[HMDCloudGroupChange setSaveAsProcessedWithRecord:]
  -[HMDCloudGroupChange resetRecordWithRecordID:]
  -[HMDCloudGroupChange setDeleteAsProcessedWithRecordID:]
  -[HMDCloudGroupChange flushAllChangesToCache]
  -[HMDCloudGroupChange isRootRecordName:]
  -[HMDCloudGroupChange isRootRecord:]
  -[HMDCloudGroupChange objectChanges]
  -[HMDCloudGroupChange isTemporaryCache]
  -[HMDCloudGroupChange decryptionFailed]
  -[HMDCloudGroupChange setDecryptionFailed:]
  -[HMDCloudGroupChange encryptionFailed]
  -[HMDCloudGroupChange setEncryptionFailed:]
  -[HMDCloudGroupChange controllerIdentifierChanged]
  -[HMDCloudGroupChange setControllerIdentifierChanged:]
  -[HMDCloudGroupChange cloudGroup]
  -[HMDCloudGroupChange cloudChangeTree]
  -[HMDCloudGroupChange setCloudChangeTree:]
  -[HMDCloudGroupChange setCloudChanges:]
  -[HMDCloudGroupChange processingCloudChanges]
  -[HMDCloudGroupChange setProcessingCloudChanges:]
  -[HMDCloudGroupChange processedCloudChanges]
  -[HMDCloudGroupChange setProcessedCloudChanges:]


HMDDataStreamPendingRequest : NSObject
 @property  NSNumber *identifier
 @property  NSString *topic
 @property  NSString *protocol
 @property  @? callback
 @property  NSDictionary *payload

  // instance methods
  -[HMDDataStreamPendingRequest callback]
  -[HMDDataStreamPendingRequest identifier]
  -[HMDDataStreamPendingRequest topic]
  -[HMDDataStreamPendingRequest payload]
  -[HMDDataStreamPendingRequest .cxx_destruct]
  -[HMDDataStreamPendingRequest protocol]
  -[HMDDataStreamPendingRequest isEqual:]
  -[HMDDataStreamPendingRequest initWithIdentifier:protocol:topic:payload:callback:]


HMDDataStreamPendingEvent : NSObject
 @property  NSString *topic
 @property  NSString *protocol
 @property  NSDictionary *payload
 @property  @? completion

  // instance methods
  -[HMDDataStreamPendingEvent completion]
  -[HMDDataStreamPendingEvent topic]
  -[HMDDataStreamPendingEvent payload]
  -[HMDDataStreamPendingEvent .cxx_destruct]
  -[HMDDataStreamPendingEvent protocol]
  -[HMDDataStreamPendingEvent initWithProtocol:topic:payload:completion:]


HMDDataStream : NSObject <HMFLogging, HMFTimerDelegate>
 @property  NSString *logIdentifier
 @property  BOOL active
 @property  <HMDDataStreamTransport> *transport
 @property  HAPSecuritySessionEncryption *sessionEncryption
 @property  NSMapTable *protocols
 @property  HMDDataStreamControlProtocol *controlProtocol
 @property  BOOL firstMessageReceived
 @property  HMFTimer *connectionTimer
 @property  HMFTimer *helloMessageResponseTimer
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long nextRequestIdentifier
 @property  NSMutableSet *pendingRequests
 @property  NSMutableArray *pendingEvents
 @property  <HMDDataStreamDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDataStream logCategory]

  // instance methods
  -[HMDDataStream transport]
  -[HMDDataStream setTransport:]
  -[HMDDataStream timerDidFire:]
  -[HMDDataStream connect]
  -[HMDDataStream logIdentifier]
  -[HMDDataStream pendingEvents]
  -[HMDDataStream protocols]
  -[HMDDataStream setDelegate:]
  -[HMDDataStream workQueue]
  -[HMDDataStream pendingRequests]
  -[HMDDataStream delegate]
  -[HMDDataStream close]
  -[HMDDataStream isActive]
  -[HMDDataStream .cxx_destruct]
  -[HMDDataStream setConnectionTimer:]
  -[HMDDataStream setActive:]
  -[HMDDataStream connectionTimer]
  -[HMDDataStream setTrafficClass:]
  -[HMDDataStream setProtocols:]
  -[HMDDataStream sessionEncryption]
  -[HMDDataStream setSessionEncryption:]
  -[HMDDataStream initWithTransport:sessionEncryption:workQueue:logIdentifier:]
  -[HMDDataStream initWithTransport:sessionEncryption:workQueue:logIdentifier:connectionTimer:helloMessageResponseTimer:]
  -[HMDDataStream addProtocol:name:]
  -[HMDDataStream protocolWithName:]
  -[HMDDataStream protocolDelegateHandle]
  -[HMDDataStream sendEventForProtocol:topic:payload:completion:]
  -[HMDDataStream sendResponseForRequestHeader:payload:status:completion:]
  -[HMDDataStream sendRequestForProtocol:topic:identifier:payload:completion:]
  -[HMDDataStream sendRequestForProtocol:topic:payload:completion:]
  -[HMDDataStream protocolDidUpdateActiveStatus:]
  -[HMDDataStream transport:didFailWithError:]
  -[HMDDataStream transportDidClose:]
  -[HMDDataStream transportDidOpen:]
  -[HMDDataStream transport:didReceiveRawFrame:]
  -[HMDDataStream controlProtocol]
  -[HMDDataStream setControlProtocol:]
  -[HMDDataStream firstMessageReceived]
  -[HMDDataStream setFirstMessageReceived:]
  -[HMDDataStream helloMessageResponseTimer]
  -[HMDDataStream setHelloMessageResponseTimer:]
  -[HMDDataStream nextRequestIdentifier]
  -[HMDDataStream setNextRequestIdentifier:]


HMDCloudZone : HMFObject
 @property  HMDBackingStoreCacheZone *backingStoreZone
 @property  HMDCloudCache *cache
 @property  NSString *zoneRootRecordName
 @property  CKRecordZone *zone
 @property  HMDCloudGroup *rootGroup
 @property  CKRecordID *privateZoneRootRecordID
 @property  BOOL processChangeEvenIfDecryptionFails
 @property  BOOL recordsAvailable
 @property  BOOL serverTokenAvaliable
 @property  BOOL decrypted
 @property  NSString *owner
 @property  NSString *subscriptionName
 @property  CKRecordZoneSubscription *subscription
 @property  CKServerChangeToken *serverChangeToken

  // class methods
  +[HMDCloudZone shortDescription]
  +[HMDCloudZone zoneRootRecordName]
  +[HMDCloudZone zoneSubscriptionName:]
  +[HMDCloudZone createZoneWithName:rootRecordName:subscriptionName:owner:cacheZone:cloudCache:completion:]

  // instance methods
  -[HMDCloudZone owner]
  -[HMDCloudZone subscription]
  -[HMDCloudZone setCache:]
  -[HMDCloudZone setSubscription:]
  -[HMDCloudZone cache]
  -[HMDCloudZone .cxx_destruct]
  -[HMDCloudZone serverChangeToken]
  -[HMDCloudZone shortDescription]
  -[HMDCloudZone setServerChangeToken:]
  -[HMDCloudZone zone]
  -[HMDCloudZone init]
  -[HMDCloudZone setZone:]
  -[HMDCloudZone rootGroup]
  -[HMDCloudZone setRootGroup:]
  -[HMDCloudZone subscriptionName]
  -[HMDCloudZone cloudRecordWithObjectID:]
  -[HMDCloudZone cloudRecordWithName:]
  -[HMDCloudZone isRootRecord:]
  -[HMDCloudZone zoneRootRecordName]
  -[HMDCloudZone initWithBackingStoreCacheZone:cloudCache:]
  -[HMDCloudZone doesProcessChangeEvenIfDecryptionFails]
  -[HMDCloudZone cloudRecordWithNames:completionHandler:]
  -[HMDCloudZone cloudRecordWithName:completionHandler:]
  -[HMDCloudZone createCloudRecordWithObjectID:recordName:]
  -[HMDCloudZone createCloudRecordWithFetchResult:]
  -[HMDCloudZone __cloudRecordWithObjectID:]
  -[HMDCloudZone cloudRecordWithObjectIDs:completionHandler:]
  -[HMDCloudZone cloudRecordWithObjectID:completionHandler:]
  -[HMDCloudZone cloudRecordsForParentID:completionHandler:]
  -[HMDCloudZone allDescendentsCloudRecordsForParentID:completionHandler:]
  -[HMDCloudZone fetchMigratedObjects:]
  -[HMDCloudZone markMigratedObjectsAsMigrated]
  -[HMDCloudZone addCloudRecord:ownerID:]
  -[HMDCloudZone privateZoneRootRecordID]
  -[HMDCloudZone isRootCloudRecord:]
  -[HMDCloudZone updateCloudRecord:]
  -[HMDCloudZone updateCloudRecord:completionHandler:]
  -[HMDCloudZone deleteCloudRecordNames:]
  -[HMDCloudZone deleteCloudRecord:]
  -[HMDCloudZone createCloudZoneChangeTemporaryCache:]
  -[HMDCloudZone hasServerTokenAvaliable]
  -[HMDCloudZone _initializeSubscription:]
  -[HMDCloudZone _initializeServerChangeToken:]
  -[HMDCloudZone deleteZone]
  -[HMDCloudZone updateCurrentServerChangeToken]
  -[HMDCloudZone updateServerChangeToken:]
  -[HMDCloudZone hasRecordsAvaliable]
  -[HMDCloudZone setRecordsAvailable:]
  -[HMDCloudZone hasDecrypted]
  -[HMDCloudZone setDecrypted:]
  -[HMDCloudZone setSubscriptionName:]
  -[HMDCloudZone backingStoreZone]
  -[HMDCloudZone setBackingStoreZone:]


HMDCloudLegacyZone : HMDCloudZone
 @property  NSUUID *metadataObjectID
 @property  CKRecordID *metadataRecordID
 @property  BOOL metadataRecordAvailable
 @property  NSUUID *homeDataObjectID
 @property  CKRecordID *homeDataRecordID
 @property  BOOL homeDataRecordAvailable
 @property  NSUUID *homeDataV3ObjectID
 @property  CKRecordID *homeDataV3RecordID
 @property  BOOL homeDataV3RecordAvailable

  // class methods
  +[HMDCloudLegacyZone zoneRootRecordName]
  +[HMDCloudLegacyZone zoneSubscriptionName:]
  +[HMDCloudLegacyZone createLegacyZoneWithName:owner:cacheZone:cloudCache:completion:]

  // instance methods
  -[HMDCloudLegacyZone .cxx_destruct]
  -[HMDCloudLegacyZone setServerChangeToken:]
  -[HMDCloudLegacyZone doesProcessChangeEvenIfDecryptionFails]
  -[HMDCloudLegacyZone createCloudRecordWithObjectID:recordName:]
  -[HMDCloudLegacyZone createCloudZoneChangeTemporaryCache:]
  -[HMDCloudLegacyZone metadataObjectID]
  -[HMDCloudLegacyZone metadataRecordID]
  -[HMDCloudLegacyZone isMetadataRecordAvailable]
  -[HMDCloudLegacyZone homeDataObjectID]
  -[HMDCloudLegacyZone homeDataRecordID]
  -[HMDCloudLegacyZone isHomeDataRecordAvailable]
  -[HMDCloudLegacyZone homeDataV3ObjectID]
  -[HMDCloudLegacyZone homeDataV3RecordID]
  -[HMDCloudLegacyZone isHomeDataV3RecordAvailable]
  -[HMDCloudLegacyZone metadataModelWithPushDataPush:]
  -[HMDCloudLegacyZone homeDataModelWithPushDataPush:]
  -[HMDCloudLegacyZone homeDataV3ModelWithPushDataPush:]
  -[HMDCloudLegacyZone dropCachedRecords]


HMDCloudMetadataZone : HMDCloudZone
 @property  HMDCloudRecord *metadataRecord

  // class methods
  +[HMDCloudMetadataZone zoneRootRecordName]
  +[HMDCloudMetadataZone zoneSubscriptionName:]
  +[HMDCloudMetadataZone createMetadataZoneWithName:owner:cacheZone:cloudCache:completion:]

  // instance methods
  -[HMDCloudMetadataZone .cxx_destruct]
  -[HMDCloudMetadataZone setServerChangeToken:]
  -[HMDCloudMetadataZone metadataRecord]
  -[HMDCloudMetadataZone setMetadataRecord:]


HMDCloudHomeManagerZone : HMDCloudZone
  // class methods
  +[HMDCloudHomeManagerZone zoneRootRecordName]
  +[HMDCloudHomeManagerZone zoneSubscriptionName:]
  +[HMDCloudHomeManagerZone createHomeManagerZoneWithName:owner:cacheZone:cloudCache:completion:]

  // instance methods
  -[HMDCloudHomeManagerZone setServerChangeToken:]
  -[HMDCloudHomeManagerZone createCloudZoneChangeTemporaryCache:]


HMDCloudHomeZone : HMDCloudZone
 @property  BOOL sharedHome

  // class methods
  +[HMDCloudHomeZone zoneRootRecordName]
  +[HMDCloudHomeZone zoneSubscriptionName:]
  +[HMDCloudHomeZone zoneSharedRootRecordName]
  +[HMDCloudHomeZone createHomeZoneWithName:owner:cacheZone:cloudCache:completion:]

  // instance methods
  -[HMDCloudHomeZone setServerChangeToken:]
  -[HMDCloudHomeZone createCloudZoneChangeTemporaryCache:]
  -[HMDCloudHomeZone isSharedHome]


AWDHomeKitWHAAccessControl : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasIsP2PEnabled
 @property  BOOL isP2PEnabled
 @property  BOOL hasPrivilegeLevel
 @property  int privilegeLevel
 @property  BOOL hasIsPasswordSet
 @property  BOOL isPasswordSet

  // instance methods
  -[AWDHomeKitWHAAccessControl setTimestamp:]
  -[AWDHomeKitWHAAccessControl copyTo:]
  -[AWDHomeKitWHAAccessControl mergeFrom:]
  -[AWDHomeKitWHAAccessControl setHasTimestamp:]
  -[AWDHomeKitWHAAccessControl dictionaryRepresentation]
  -[AWDHomeKitWHAAccessControl hasTimestamp]
  -[AWDHomeKitWHAAccessControl copyWithZone:]
  -[AWDHomeKitWHAAccessControl timestamp]
  -[AWDHomeKitWHAAccessControl readFrom:]
  -[AWDHomeKitWHAAccessControl writeTo:]
  -[AWDHomeKitWHAAccessControl isEqual:]
  -[AWDHomeKitWHAAccessControl setIsP2PEnabled:]
  -[AWDHomeKitWHAAccessControl setHasIsP2PEnabled:]
  -[AWDHomeKitWHAAccessControl hasIsP2PEnabled]
  -[AWDHomeKitWHAAccessControl privilegeLevel]
  -[AWDHomeKitWHAAccessControl setPrivilegeLevel:]
  -[AWDHomeKitWHAAccessControl setHasPrivilegeLevel:]
  -[AWDHomeKitWHAAccessControl hasPrivilegeLevel]
  -[AWDHomeKitWHAAccessControl privilegeLevelAsString:]
  -[AWDHomeKitWHAAccessControl StringAsPrivilegeLevel:]
  -[AWDHomeKitWHAAccessControl setIsPasswordSet:]
  -[AWDHomeKitWHAAccessControl setHasIsPasswordSet:]
  -[AWDHomeKitWHAAccessControl hasIsPasswordSet]
  -[AWDHomeKitWHAAccessControl isP2PEnabled]
  -[AWDHomeKitWHAAccessControl isPasswordSet]


HMDCameraAudioParameterCombination : HMFObject
 @property  HMDAudioCodecGroup *codecGroupType
 @property  HMDBitRateSetting *bitrateSetting
 @property  HMDAudioSampleRate *sampleRate
 @property  NSNumber *maximumBitrate
 @property  NSNumber *minimumBitrate
 @property  NSNumber *rtcpInterval
 @property  NSNumber *rtpPTime

  // instance methods
  -[HMDCameraAudioParameterCombination sampleRate]
  -[HMDCameraAudioParameterCombination .cxx_destruct]
  -[HMDCameraAudioParameterCombination isEqual:]
  -[HMDCameraAudioParameterCombination minimumBitrate]
  -[HMDCameraAudioParameterCombination bitrateSetting]
  -[HMDCameraAudioParameterCombination maximumBitrate]
  -[HMDCameraAudioParameterCombination rtcpInterval]
  -[HMDCameraAudioParameterCombination initWithCodecGroup:bitrateSetting:sampleRate:]
  -[HMDCameraAudioParameterCombination initWithCodecGroup:bitrateSetting:sampleRate:maximumBitrate:minimumBitrate:rtcpInterval:rtpPtime:]
  -[HMDCameraAudioParameterCombination codecGroupType]
  -[HMDCameraAudioParameterCombination rtpPTime]


HMDRemoteKeyedArchiver : HMFObject
 @property  NSKeyedArchiver *archiver
 @property  NSString *transportType
 @property  NSData *encodedData

  // instance methods
  -[HMDRemoteKeyedArchiver archiver]
  -[HMDRemoteKeyedArchiver encodedData]
  -[HMDRemoteKeyedArchiver setTransportType:]
  -[HMDRemoteKeyedArchiver encodeObject:forKey:]
  -[HMDRemoteKeyedArchiver dealloc]
  -[HMDRemoteKeyedArchiver .cxx_destruct]
  -[HMDRemoteKeyedArchiver transportType]
  -[HMDRemoteKeyedArchiver setArchiver:]
  -[HMDRemoteKeyedArchiver setClassName:forClass:]
  -[HMDRemoteKeyedArchiver finishEncoding]
  -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:dataVersion:supportedFeatures:]
  -[HMDRemoteKeyedArchiver initForWritingWithRemoteDeviceIsOnSameAccount:remoteGateway:remoteUserIsAdministrator:user:supportedFeatures:]


HMDUnassociatedAirPlayAccessory : HMDUnassociatedMediaAccessory <HMFLogging, HMDAccessoryAssociation>
 @property  HMFPairingIdentity *pairingIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL supportsAssociation

  // class methods
  +[HMDUnassociatedAirPlayAccessory logCategory]

  // instance methods
  -[HMDUnassociatedAirPlayAccessory logIdentifier]
  -[HMDUnassociatedAirPlayAccessory .cxx_destruct]
  -[HMDUnassociatedAirPlayAccessory pairingIdentity]
  -[HMDUnassociatedAirPlayAccessory setPairingIdentity:]
  -[HMDUnassociatedAirPlayAccessory associateToHome:completionHandler:]
  -[HMDUnassociatedAirPlayAccessory supportsAssociation]
  -[HMDUnassociatedAirPlayAccessory addTransactionForHome:configurationAppIdentifier:]
  -[HMDUnassociatedAirPlayAccessory modelForChangeType:uuid:parentUUID:]


AWDHomeKitCharacteristicThresholdEvent : PBCodable <NSCopying>
 @property  BOOL hasMinPresent
 @property  BOOL minPresent
 @property  BOOL hasMaxPresent
 @property  BOOL maxPresent

  // instance methods
  -[AWDHomeKitCharacteristicThresholdEvent copyTo:]
  -[AWDHomeKitCharacteristicThresholdEvent mergeFrom:]
  -[AWDHomeKitCharacteristicThresholdEvent dictionaryRepresentation]
  -[AWDHomeKitCharacteristicThresholdEvent copyWithZone:]
  -[AWDHomeKitCharacteristicThresholdEvent readFrom:]
  -[AWDHomeKitCharacteristicThresholdEvent writeTo:]
  -[AWDHomeKitCharacteristicThresholdEvent isEqual:]
  -[AWDHomeKitCharacteristicThresholdEvent setMinPresent:]
  -[AWDHomeKitCharacteristicThresholdEvent setHasMinPresent:]
  -[AWDHomeKitCharacteristicThresholdEvent hasMinPresent]
  -[AWDHomeKitCharacteristicThresholdEvent setMaxPresent:]
  -[AWDHomeKitCharacteristicThresholdEvent setHasMaxPresent:]
  -[AWDHomeKitCharacteristicThresholdEvent hasMaxPresent]
  -[AWDHomeKitCharacteristicThresholdEvent minPresent]
  -[AWDHomeKitCharacteristicThresholdEvent maxPresent]


HMDXPCRequest : HMFObject
 @property  NSDate *startTime
 @property  NSString *messageName
 @property  long long qualityOfService
 @property  @? responseHandler

  // instance methods
  -[HMDXPCRequest responseHandler]
  -[HMDXPCRequest startTime]
  -[HMDXPCRequest messageName]
  -[HMDXPCRequest qualityOfService]
  -[HMDXPCRequest .cxx_destruct]
  -[HMDXPCRequest initWithMessageName:qualityOfService:responseHandler:]


HMDXPCRequestTracker : HMFObject <HMFTimerDelegate>
 @property  NSSet *requestIdentifiers
 @property  NSMutableDictionary *pendingRequests
 @property  NSString *clientName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDXPCRequestTracker timerDidFire:]
  -[HMDXPCRequestTracker setClientName:]
  -[HMDXPCRequestTracker pendingRequests]
  -[HMDXPCRequestTracker clear]
  -[HMDXPCRequestTracker .cxx_destruct]
  -[HMDXPCRequestTracker initWithQueue:]
  -[HMDXPCRequestTracker clientName]
  -[HMDXPCRequestTracker init]
  -[HMDXPCRequestTracker __sendReponseForRequest:response:error:]
  -[HMDXPCRequestTracker addRequestWithIdentifier:messageName:qualityOfService:responseHandler:]
  -[HMDXPCRequestTracker removeRequestWithIdentifier:response:error:]
  -[HMDXPCRequestTracker containsMessageWithIdentifier:]
  -[HMDXPCRequestTracker requestIdentifiers]


HMDXPCClientConnection : HMFMessageTransport <HMFLogging, HMXPCServerMessageHandling>
 @property  NSString *clientName
 @property  NSUUID *clientUUID
 @property  NSString *logIdentifier
 @property  NSXPCConnection *xpcConnection
 @property  HMDXPCRequestTracker *requestTracker
 @property  BOOL activated
 @property  NSDictionary *privateAccessEntitlement
 @property  HMDXPCMessageSendPolicyParameters *sendPolicyParameters
 @property  HMDProcessInfo *processInfo
 @property  NSString *name
 @property  NSDictionary *userInfo
 @property  Class principalClass
 @property  int clientPid
 @property  NSSet *activeRequests
 @property  BOOL authorizedForHomeDataAccess
 @property  BOOL authorizedForMicrophoneAccess
 @property  unsigned long entitlements
 @property  BOOL entitledForAPIAccess
 @property  BOOL entitledForSPIAccess
 @property  BOOL authorizedForLocationAccess
 @property  BOOL entitledForBackgroundMode
 @property  BOOL entitledForHomeLocationAccess
 @property  BOOL entitledForCameraClipsAccess
 @property  BOOL entitledForMultiUserSetupAccess
 @property  BOOL entitledForShortcutsAutomationAccess
 @property  BOOL entitledToProvideAccessorySetupPayload
 @property  BOOL entitledToProvideMatterSetupPayload
 @property  BOOL entitledForPersonManagerAccess
 @property  BOOL entitledForWalletKeyAccess
 @property  BOOL entitledForSecureAccess
 @property  BOOL entitledForStateDump
 @property  BOOL entitledForAssistantIdentifiers
 @property  BOOL entitledForHomeLocationFeedbackAccess
 @property  BOOL platformBinary
 @property  NSString *applicationBundleIdentifier
 @property  NSString *companionAppBundleIdentifier
 @property  unsigned long homeManagerOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDXPCClientConnection logCategory]
  +[HMDXPCClientConnection entitlementsForConnection:]

  // instance methods
  -[HMDXPCClientConnection applicationBundleIdentifier]
  -[HMDXPCClientConnection isActivated]
  -[HMDXPCClientConnection setProcessInfo:]
  -[HMDXPCClientConnection logIdentifier]
  -[HMDXPCClientConnection sendMessage:completionHandler:]
  -[HMDXPCClientConnection activateWithCompletion:]
  -[HMDXPCClientConnection _displayName]
  -[HMDXPCClientConnection xpcConnection]
  -[HMDXPCClientConnection setLogIdentifier:]
  -[HMDXPCClientConnection setClientName:]
  -[HMDXPCClientConnection userInfo]
  -[HMDXPCClientConnection deactivate]
  -[HMDXPCClientConnection entitlements]
  -[HMDXPCClientConnection setActivated:]
  -[HMDXPCClientConnection attributeDescriptions]
  -[HMDXPCClientConnection dealloc]
  -[HMDXPCClientConnection .cxx_destruct]
  -[HMDXPCClientConnection clientPid]
  -[HMDXPCClientConnection clientUUID]
  -[HMDXPCClientConnection handleMessage:]
  -[HMDXPCClientConnection setXpcConnection:]
  -[HMDXPCClientConnection handleMessage:responseHandler:]
  -[HMDXPCClientConnection setClientUUID:]
  -[HMDXPCClientConnection processInfo]
  -[HMDXPCClientConnection shortDescription]
  -[HMDXPCClientConnection name]
  -[HMDXPCClientConnection clientName]
  -[HMDXPCClientConnection isPlatformBinary]
  -[HMDXPCClientConnection isAuthorizedForHomeDataAccess]
  -[HMDXPCClientConnection principalClass]
  -[HMDXPCClientConnection updateUserInfo:]
  -[HMDXPCClientConnection canSendMessage:]
  -[HMDXPCClientConnection activeRequests]
  -[HMDXPCClientConnection isEntitledForAPIAccess]
  -[HMDXPCClientConnection isEntitledForSPIAccess]
  -[HMDXPCClientConnection isAuthorizedForMicrophoneAccess]
  -[HMDXPCClientConnection isEntitledForBackgroundMode]
  -[HMDXPCClientConnection isAuthorizedForLocationAccess]
  -[HMDXPCClientConnection isEntitledForHomeLocationAccess]
  -[HMDXPCClientConnection isEntitledToProvideAccessorySetupPayload]
  -[HMDXPCClientConnection isEntitledToProvideMatterSetupPayload]
  -[HMDXPCClientConnection isEntitledForShortcutsAutomationAccess]
  -[HMDXPCClientConnection isEntitledForSecureAccess]
  -[HMDXPCClientConnection isEntitledForStateDump]
  -[HMDXPCClientConnection isEntitledForAssistantIdentifiers]
  -[HMDXPCClientConnection isEntitledForHomeLocationFeedbackAccess]
  -[HMDXPCClientConnection companionAppBundleIdentifier]
  -[HMDXPCClientConnection homeManagerOptions]
  -[HMDXPCClientConnection __handleApplicationStateChange:]
  -[HMDXPCClientConnection initWithConnection:counterTracker:]
  -[HMDXPCClientConnection counterIdentifierForMessage:]
  -[HMDXPCClientConnection sendPolicyParameters]
  -[HMDXPCClientConnection setSendPolicyParameters:]
  -[HMDXPCClientConnection updateSendPolicyParameters:]
  -[HMDXPCClientConnection shouldSendResponseForMessageIdentifier:]
  -[HMDXPCClientConnection _handleMessage:responseHandler:]
  -[HMDXPCClientConnection initiateRefresh]
  -[HMDXPCClientConnection isEntitledForCameraClipsAccess]
  -[HMDXPCClientConnection isEntitledForMultiUserSetupAccess]
  -[HMDXPCClientConnection isEntitledForPersonManagerAccess]
  -[HMDXPCClientConnection isEntitledForWalletKeyAccess]
  -[HMDXPCClientConnection requestTracker]
  -[HMDXPCClientConnection privateAccessEntitlement]
  -[HMDXPCClientConnection setPrivateAccessEntitlement:]


AWDHomeKitCameraIDSSessionSetup : PBCodable <NSCopying>
 @property  BOOL hasIdsSessionInvitationSent
 @property  unsigned int idsSessionInvitationSent
 @property  BOOL hasIdsSessionInvitationReceived
 @property  unsigned int idsSessionInvitationReceived
 @property  BOOL hasIdsSessionStartedOnResident
 @property  unsigned int idsSessionStartedOnResident
 @property  BOOL hasIdsSessionStartedOnReceiver
 @property  unsigned int idsSessionStartedOnReceiver

  // instance methods
  -[AWDHomeKitCameraIDSSessionSetup copyTo:]
  -[AWDHomeKitCameraIDSSessionSetup mergeFrom:]
  -[AWDHomeKitCameraIDSSessionSetup dictionaryRepresentation]
  -[AWDHomeKitCameraIDSSessionSetup copyWithZone:]
  -[AWDHomeKitCameraIDSSessionSetup readFrom:]
  -[AWDHomeKitCameraIDSSessionSetup writeTo:]
  -[AWDHomeKitCameraIDSSessionSetup isEqual:]
  -[AWDHomeKitCameraIDSSessionSetup setIdsSessionInvitationSent:]
  -[AWDHomeKitCameraIDSSessionSetup setHasIdsSessionInvitationSent:]
  -[AWDHomeKitCameraIDSSessionSetup hasIdsSessionInvitationSent]
  -[AWDHomeKitCameraIDSSessionSetup setIdsSessionInvitationReceived:]
  -[AWDHomeKitCameraIDSSessionSetup setHasIdsSessionInvitationReceived:]
  -[AWDHomeKitCameraIDSSessionSetup hasIdsSessionInvitationReceived]
  -[AWDHomeKitCameraIDSSessionSetup setIdsSessionStartedOnResident:]
  -[AWDHomeKitCameraIDSSessionSetup setHasIdsSessionStartedOnResident:]
  -[AWDHomeKitCameraIDSSessionSetup hasIdsSessionStartedOnResident]
  -[AWDHomeKitCameraIDSSessionSetup setIdsSessionStartedOnReceiver:]
  -[AWDHomeKitCameraIDSSessionSetup setHasIdsSessionStartedOnReceiver:]
  -[AWDHomeKitCameraIDSSessionSetup hasIdsSessionStartedOnReceiver]
  -[AWDHomeKitCameraIDSSessionSetup idsSessionInvitationSent]
  -[AWDHomeKitCameraIDSSessionSetup idsSessionInvitationReceived]
  -[AWDHomeKitCameraIDSSessionSetup idsSessionStartedOnResident]
  -[AWDHomeKitCameraIDSSessionSetup idsSessionStartedOnReceiver]


HMDLogEventHAPMetricsEventAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager

  // class methods
  +[HMDLogEventHAPMetricsEventAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventHAPMetricsEventAnalyzer .cxx_destruct]
  -[HMDLogEventHAPMetricsEventAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventHAPMetricsEventAnalyzer eventCountersManager]
  -[HMDLogEventHAPMetricsEventAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventHAPMetricsEventAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventHAPMetricsEventAnalyzer initWithEventCountersManager:]


AWDHomeKitLocationEvent : PBCodable <NSCopying>
 @property  BOOL hasNotifyOnEntry
 @property  BOOL notifyOnEntry
 @property  BOOL hasNotifyOnExit
 @property  BOOL notifyOnExit

  // instance methods
  -[AWDHomeKitLocationEvent copyTo:]
  -[AWDHomeKitLocationEvent mergeFrom:]
  -[AWDHomeKitLocationEvent dictionaryRepresentation]
  -[AWDHomeKitLocationEvent copyWithZone:]
  -[AWDHomeKitLocationEvent readFrom:]
  -[AWDHomeKitLocationEvent writeTo:]
  -[AWDHomeKitLocationEvent isEqual:]
  -[AWDHomeKitLocationEvent setNotifyOnEntry:]
  -[AWDHomeKitLocationEvent setNotifyOnExit:]
  -[AWDHomeKitLocationEvent notifyOnEntry]
  -[AWDHomeKitLocationEvent notifyOnExit]
  -[AWDHomeKitLocationEvent setHasNotifyOnEntry:]
  -[AWDHomeKitLocationEvent hasNotifyOnEntry]
  -[AWDHomeKitLocationEvent setHasNotifyOnExit:]
  -[AWDHomeKitLocationEvent hasNotifyOnExit]


HMDAccessorySettingsBackingStoreTransactionReceiver : HMFObject <HMDBackingStoreObjectProtocol>
 @property  <HMDAccessorySettingsBackingStoreTransactionReceiverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAccessorySettingsBackingStoreTransactionReceiver setDelegate:]
  -[HMDAccessorySettingsBackingStoreTransactionReceiver delegate]
  -[HMDAccessorySettingsBackingStoreTransactionReceiver .cxx_destruct]
  -[HMDAccessorySettingsBackingStoreTransactionReceiver initWithDelegate:]
  -[HMDAccessorySettingsBackingStoreTransactionReceiver transactionObjectUpdated:newValues:message:]
  -[HMDAccessorySettingsBackingStoreTransactionReceiver transactionObjectRemoved:message:]


HMDMediaDestinationBackingStoreHandler : HMDBackingStoreHandler
 @property  <HMDMediaDestinationBackingStoreHandlerDelegate> *delegate
 @property  HMDMediaDestinationManagerMetricsDispatcher *metricsDispatcher
 @property  HMMediaDestination *destination

  // class methods
  +[HMDMediaDestinationBackingStoreHandler logCategory]
  +[HMDMediaDestinationBackingStoreHandler backingStoreObjectForMediaDestination:]

  // instance methods
  -[HMDMediaDestinationBackingStoreHandler destination]
  -[HMDMediaDestinationBackingStoreHandler setDelegate:]
  -[HMDMediaDestinationBackingStoreHandler delegate]
  -[HMDMediaDestinationBackingStoreHandler .cxx_destruct]
  -[HMDMediaDestinationBackingStoreHandler setSupportedOptions:]
  -[HMDMediaDestinationBackingStoreHandler setAudioGroupIdentifier:]
  -[HMDMediaDestinationBackingStoreHandler metricsDispatcher]
  -[HMDMediaDestinationBackingStoreHandler transactionObjectUpdated:newValues:message:]
  -[HMDMediaDestinationBackingStoreHandler transactionObjectRemoved:message:]
  -[HMDMediaDestinationBackingStoreHandler migrateWithHome:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationBackingStoreHandler recoverDueToNoRecordInCloudWithHome:migrationQueue:completion:]
  -[HMDMediaDestinationBackingStoreHandler migrateWithCurrentCloudRecord:home:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationBackingStoreHandler recoverDueToInvalidRecordInCloudWithHome:migrationQueue:completion:]
  -[HMDMediaDestinationBackingStoreHandler initWithDestination:backingStore:metricsDispatcher:delegate:]
  -[HMDMediaDestinationBackingStoreHandler mergeDestination:]
  -[HMDMediaDestinationBackingStoreHandler updateSupportedOptions:completion:]
  -[HMDMediaDestinationBackingStoreHandler updateAudioGroupIdentifier:completion:]


HMDCameraRecordingLoadBalancerLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSNumber *numberOfResidents
 @property  NSNumber *numberOfRetries
 @property  NSNumber *totalNumberOfJobSlots
 @property  NSNumber *remainingNumberOfJobSlots
 @property  NSString *selectedResidentDeviceType
 @property  NSNumber *selectedResidentSystemResourceUsageLevel
 @property  NSNumber *selectedResidentNumberOfActiveStreams
 @property  NSNumber *selectedResidentJobSlots
 @property  NSNumber *selectedResidentPartialJobSlots
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCameraRecordingLoadBalancerLogEvent eventName]
  -[HMDCameraRecordingLoadBalancerLogEvent numberOfRetries]
  -[HMDCameraRecordingLoadBalancerLogEvent .cxx_destruct]
  -[HMDCameraRecordingLoadBalancerLogEvent serializedEvent]
  -[HMDCameraRecordingLoadBalancerLogEvent initWithNumberOfResidents:numberOfRetries:totalNumberOfJobSlots:remainingNumberOfJobSlots:selectedResidentDeviceType:selectedResidentNumberOfActiveStreams:selectedResidentSystemResourceUsageLevel:selectedResidentJobSlots:selectedResidentPartialJobSlots:]
  -[HMDCameraRecordingLoadBalancerLogEvent numberOfResidents]
  -[HMDCameraRecordingLoadBalancerLogEvent totalNumberOfJobSlots]
  -[HMDCameraRecordingLoadBalancerLogEvent remainingNumberOfJobSlots]
  -[HMDCameraRecordingLoadBalancerLogEvent selectedResidentDeviceType]
  -[HMDCameraRecordingLoadBalancerLogEvent selectedResidentSystemResourceUsageLevel]
  -[HMDCameraRecordingLoadBalancerLogEvent selectedResidentNumberOfActiveStreams]
  -[HMDCameraRecordingLoadBalancerLogEvent selectedResidentJobSlots]
  -[HMDCameraRecordingLoadBalancerLogEvent selectedResidentPartialJobSlots]


HMDNetworkRouterFirewallRuleManager : HMFObject <HMDNetworkRouterFirewallRuleManagerInternal, HMFLogging, HMDNetworkRouterFirewallRuleManager, HMDNetworkRouterFirewallRuleManagerDebug>
 @property  HMBLocalDatabase *localDatabase
 @property  NSNotificationCenter *notificationCenter
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinatorFactory> *coordinatorFactory
 @property  <HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator> *coordinator
 @property  long long state
 @property  NSMutableArray *clients
 @property  unsigned long operationsInProgressCount
 @property  NSArray *activeClients
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManager sharedInstance]
  +[HMDNetworkRouterFirewallRuleManager logCategory]
  +[HMDNetworkRouterFirewallRuleManager defaultCloudFetchInterval]
  +[HMDNetworkRouterFirewallRuleManager defaultCloudFetchRetryInterval]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManager notificationCenter]
  -[HMDNetworkRouterFirewallRuleManager clients]
  -[HMDNetworkRouterFirewallRuleManager workQueue]
  -[HMDNetworkRouterFirewallRuleManager callbackQueue]
  -[HMDNetworkRouterFirewallRuleManager state]
  -[HMDNetworkRouterFirewallRuleManager dealloc]
  -[HMDNetworkRouterFirewallRuleManager .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManager removeAllLocalRulesWithCompletion:]
  -[HMDNetworkRouterFirewallRuleManager dumpLocalRulesForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManager addOverrides:completion:]
  -[HMDNetworkRouterFirewallRuleManager dumpPairedMetadataForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManager removeAllOverridesWithCompletion:]
  -[HMDNetworkRouterFirewallRuleManager fetchCloudChangesWithCompletion:]
  -[HMDNetworkRouterFirewallRuleManager listCloudRecordsForProductGroup:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManager removeOverridesForProductGroup:productNumber:completion:]
  -[HMDNetworkRouterFirewallRuleManager dumpAllLocalRulesIgnoringOverrides:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManager setCoordinator:]
  -[HMDNetworkRouterFirewallRuleManager setOverrides:completion:]
  -[HMDNetworkRouterFirewallRuleManager dumpLocalRulesForProductGroup:ignoreOverrides:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManager initWithLocalDatabase:]
  -[HMDNetworkRouterFirewallRuleManager dumpCloudRecordsForProductGroup:productNumber:rawOutput:verifySignatures:completion:]
  -[HMDNetworkRouterFirewallRuleManager coordinator]
  -[HMDNetworkRouterFirewallRuleManager localDatabase]
  -[HMDNetworkRouterFirewallRuleManager init]
  -[HMDNetworkRouterFirewallRuleManager setState:]
  -[HMDNetworkRouterFirewallRuleManager activeClients]
  -[HMDNetworkRouterFirewallRuleManager startupForClient:completion:]
  -[HMDNetworkRouterFirewallRuleManager shutdownForClient:]
  -[HMDNetworkRouterFirewallRuleManager fetchRulesForAccessories:completion:]
  -[HMDNetworkRouterFirewallRuleManager fetchPairedMetadataVersionConfigurationsForAccessories:completion:]
  -[HMDNetworkRouterFirewallRuleManager didCompleteScheduledCloudFetch]
  -[HMDNetworkRouterFirewallRuleManager forceFetchCloudChangesAndForceChangeNotifications:completion:]
  -[HMDNetworkRouterFirewallRuleManager initWithLocalDatabase:notificationCenter:workQueue:coordinatorFactory:]
  -[HMDNetworkRouterFirewallRuleManager initWithLocalDatabase:coordinatorFactory:]
  -[HMDNetworkRouterFirewallRuleManager operationsInProgressCount]
  -[HMDNetworkRouterFirewallRuleManager setOperationsInProgressCount:]
  -[HMDNetworkRouterFirewallRuleManager _fetchCloudChangesIgnoringLastFetchedAccessories:forceChangeNotifications:completion:]
  -[HMDNetworkRouterFirewallRuleManager coordinatorFactory]


HMDTransientRuleManagerClient : NSObject <HMDNetworkRouterFirewallRuleManagerClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDTransientRuleManagerClient .cxx_destruct]
  -[HMDTransientRuleManagerClient initWithDescription:]


HMDNetworkRouterFirewallRuleManagerClientState : NSObject
 @property  <HMDNetworkRouterFirewallRuleManagerClient> *client
 @property  @? startupCompletion

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerClientState .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerClientState setClient:]
  -[HMDNetworkRouterFirewallRuleManagerClientState client]
  -[HMDNetworkRouterFirewallRuleManagerClientState startupCompletion]
  -[HMDNetworkRouterFirewallRuleManagerClientState setStartupCompletion:]


HMDHomeMediaSystemControllerMessageHandler : NSObject <HMFLogging, HMFMessageReceiver>
 @property  HMDHome *home
 @property  <HMDHomeMediaSystemControllerMessageHandlerDelegate> *delegate
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomeMediaSystemControllerMessageHandler logCategory]

  // instance methods
  -[HMDHomeMediaSystemControllerMessageHandler home]
  -[HMDHomeMediaSystemControllerMessageHandler logIdentifier]
  -[HMDHomeMediaSystemControllerMessageHandler setDelegate:]
  -[HMDHomeMediaSystemControllerMessageHandler delegate]
  -[HMDHomeMediaSystemControllerMessageHandler .cxx_destruct]
  -[HMDHomeMediaSystemControllerMessageHandler messageTargetUUID]
  -[HMDHomeMediaSystemControllerMessageHandler homeUUID]
  -[HMDHomeMediaSystemControllerMessageHandler messageDestination]
  -[HMDHomeMediaSystemControllerMessageHandler queue]
  -[HMDHomeMediaSystemControllerMessageHandler messageReceiveQueue]
  -[HMDHomeMediaSystemControllerMessageHandler messageDispatcher]
  -[HMDHomeMediaSystemControllerMessageHandler _registerForMessages]
  -[HMDHomeMediaSystemControllerMessageHandler mediaGroupsAggregator]
  -[HMDHomeMediaSystemControllerMessageHandler messageRouter]
  -[HMDHomeMediaSystemControllerMessageHandler routeAddMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler routeRemoveMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler initWithQueue:home:messageDispatcher:delegate:]
  -[HMDHomeMediaSystemControllerMessageHandler preProcessMediaSystemMessage:]
  -[HMDHomeMediaSystemControllerMessageHandler _routeAddMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler locallyAddMediaSystemUsingRequestMessage:]
  -[HMDHomeMediaSystemControllerMessageHandler updateMediaSystemCompletionBlockWithMessage:data:accessoryUUIDs:]
  -[HMDHomeMediaSystemControllerMessageHandler stagingMediaSystemDataFromData:accessoryUUIDs:]
  -[HMDHomeMediaSystemControllerMessageHandler mediaSystemNameFromRoomWithAccessoryUUIDs:]
  -[HMDHomeMediaSystemControllerMessageHandler updateParticipantWithAccessoryUUID:associatedGroupIdentifier:]
  -[HMDHomeMediaSystemControllerMessageHandler queueOnboardingForUnconfiguredParticipantWithAccessoryUUID:associatedGroupIdentifier:]
  -[HMDHomeMediaSystemControllerMessageHandler unconfiguredParticipantOnboardingManager]
  -[HMDHomeMediaSystemControllerMessageHandler _legacyHandleAddMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler _legacyHandleAddMediaSystemWithPreProcessedMessage:]
  -[HMDHomeMediaSystemControllerMessageHandler _routeRemoveMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler locallyRemoveMediaSystemUsingRemoveRequestMessage:]
  -[HMDHomeMediaSystemControllerMessageHandler _legacyHandleRemoveMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler routeUpdateMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler _routeUpdateMediaSystem:]
  -[HMDHomeMediaSystemControllerMessageHandler locallyUpdateMediaSystemUsingRequestMessage:]
  -[HMDHomeMediaSystemControllerMessageHandler _legacyHandleUpdateMediaSystem:]


HMDCameraStreamSnapshotHandler : HMFObject <HMFLogging, HMDCameraStreamSnapshotCaptureDelegate, HMDCameraGetSnapshotProtocol>
 @property  NSString *logIdentifier
 @property  BOOL streamAvailable
 @property  BOOL streamSetupInProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamSnapshotHandler logCategory]

  // instance methods
  -[HMDCameraStreamSnapshotHandler logIdentifier]
  -[HMDCameraStreamSnapshotHandler .cxx_destruct]
  -[HMDCameraStreamSnapshotHandler removeDelegate:]
  -[HMDCameraStreamSnapshotHandler getSnapshot:]
  -[HMDCameraStreamSnapshotHandler streamSnapshotCapture:didGetNewSnapshot:]
  -[HMDCameraStreamSnapshotHandler streamSnapshotCapture:didGetLastSnapshot:]
  -[HMDCameraStreamSnapshotHandler initWithWorkQueue:services:logID:]
  -[HMDCameraStreamSnapshotHandler addDelegate:delegateQueue:]
  -[HMDCameraStreamSnapshotHandler isStreamAvailable]
  -[HMDCameraStreamSnapshotHandler isStreamSetupInProgress]
  -[HMDCameraStreamSnapshotHandler setStreamSetupStatusForService:inProgress:]
  -[HMDCameraStreamSnapshotHandler addVideoStreamInterface:]
  -[HMDCameraStreamSnapshotHandler removeVideoStreamInterface:]


HMDSettingModel : HMBModel <HMDSettingModelProtocol>
 @property  NSNumber *type
 @property  NSNumber *properties
 @property  NSString *name
 @property  NSNumber *numberValue
 @property  NSString *stringValue
 @property  NSData *dataValue
 @property  NSUUID *selectionIdentifier
 @property  NSString *selectionValue
 @property  NSUUID *hmbModelID
 @property  NSUUID *hmbParentModelID
 @property  NSString *nameForKeyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingModel hmbProperties]

  // instance methods
  -[HMDSettingModel copyWithNewParentModelID:]
  -[HMDSettingModel nameForKeyPath]
  -[HMDSettingModel setSettingValue:]


HMDAccessoryTransportReachabilityReport : HMFObject
 @property  BOOL reachable
 @property  NSDate *reachableLastChangedTime
 @property  NSString *reason
 @property  BOOL hasAdvertisement
 @property  NSString *linkType
 @property  NSString *protocol
 @property  NSString *protocolVersion

  // instance methods
  -[HMDAccessoryTransportReachabilityReport linkType]
  -[HMDAccessoryTransportReachabilityReport protocolVersion]
  -[HMDAccessoryTransportReachabilityReport .cxx_destruct]
  -[HMDAccessoryTransportReachabilityReport reason]
  -[HMDAccessoryTransportReachabilityReport protocol]
  -[HMDAccessoryTransportReachabilityReport setReason:]
  -[HMDAccessoryTransportReachabilityReport hasAdvertisement]
  -[HMDAccessoryTransportReachabilityReport reachable]
  -[HMDAccessoryTransportReachabilityReport initWithLinkType:hasAdvertisement:protocol:protocolVersion:reachable:reachableLastChangedTime:reason:]
  -[HMDAccessoryTransportReachabilityReport reachableLastChangedTime]


HMDAccessoryReachabilityChangedLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL accessoryBatteryPowered
 @property  BOOL accessoryBridged
 @property  NSString *accessoryCategory
 @property  NSString *accessoryFirmwareVersion
 @property  NSString *accessoryManufacturer
 @property  NSString *accessoryModel
 @property  NSNumber *accessoryNumber
 @property  BOOL batteryLow
 @property  BOOL changed
 @property  long long duration
 @property  BOOL reachable
 @property  HMDAccessoryTransportReachabilityReport *transportReport
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAccessoryReachabilityChangedLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]
  +[HMDAccessoryReachabilityChangedLogEvent eventWithReachable:changed:duration:accessory:transportReport:]

  // instance methods
  -[HMDAccessoryReachabilityChangedLogEvent changed]
  -[HMDAccessoryReachabilityChangedLogEvent eventName]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryCategory]
  -[HMDAccessoryReachabilityChangedLogEvent .cxx_destruct]
  -[HMDAccessoryReachabilityChangedLogEvent duration]
  -[HMDAccessoryReachabilityChangedLogEvent init]
  -[HMDAccessoryReachabilityChangedLogEvent reachable]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryModel]
  -[HMDAccessoryReachabilityChangedLogEvent serializedEvent]
  -[HMDAccessoryReachabilityChangedLogEvent __initWithReachable:changed:duration:accessory:transportReport:]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryBatteryPowered]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryBridged]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryFirmwareVersion]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryManufacturer]
  -[HMDAccessoryReachabilityChangedLogEvent accessoryNumber]
  -[HMDAccessoryReachabilityChangedLogEvent batteryLow]
  -[HMDAccessoryReachabilityChangedLogEvent transportReport]


HMDRemoteEventRouterServerMessageLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  long long messageType
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDRemoteEventRouterServerMessageLogEvent submitEventWithDurationInMilliseconds]

  // instance methods
  -[HMDRemoteEventRouterServerMessageLogEvent eventName]
  -[HMDRemoteEventRouterServerMessageLogEvent messageType]
  -[HMDRemoteEventRouterServerMessageLogEvent serializedEvent]
  -[HMDRemoteEventRouterServerMessageLogEvent initWithMessageType:]


AWDHomeKitTargetControllerError : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasError
 @property  int error
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasTransportType
 @property  int transportType
 @property  BOOL hasCertified
 @property  int certified

  // instance methods
  -[AWDHomeKitTargetControllerError setTimestamp:]
  -[AWDHomeKitTargetControllerError copyTo:]
  -[AWDHomeKitTargetControllerError setTransportType:]
  -[AWDHomeKitTargetControllerError error]
  -[AWDHomeKitTargetControllerError .cxx_destruct]
  -[AWDHomeKitTargetControllerError setError:]
  -[AWDHomeKitTargetControllerError mergeFrom:]
  -[AWDHomeKitTargetControllerError transportType]
  -[AWDHomeKitTargetControllerError setHasTimestamp:]
  -[AWDHomeKitTargetControllerError hasError]
  -[AWDHomeKitTargetControllerError dictionaryRepresentation]
  -[AWDHomeKitTargetControllerError hasTimestamp]
  -[AWDHomeKitTargetControllerError copyWithZone:]
  -[AWDHomeKitTargetControllerError StringAsTransportType:]
  -[AWDHomeKitTargetControllerError timestamp]
  -[AWDHomeKitTargetControllerError readFrom:]
  -[AWDHomeKitTargetControllerError hasTransportType]
  -[AWDHomeKitTargetControllerError setHasError:]
  -[AWDHomeKitTargetControllerError writeTo:]
  -[AWDHomeKitTargetControllerError setHasTransportType:]
  -[AWDHomeKitTargetControllerError isEqual:]
  -[AWDHomeKitTargetControllerError transportTypeAsString:]
  -[AWDHomeKitTargetControllerError errorAsString:]
  -[AWDHomeKitTargetControllerError StringAsError:]
  -[AWDHomeKitTargetControllerError hasVendorDetails]
  -[AWDHomeKitTargetControllerError vendorDetails]
  -[AWDHomeKitTargetControllerError setVendorDetails:]
  -[AWDHomeKitTargetControllerError certified]
  -[AWDHomeKitTargetControllerError setCertified:]
  -[AWDHomeKitTargetControllerError setHasCertified:]
  -[AWDHomeKitTargetControllerError hasCertified]
  -[AWDHomeKitTargetControllerError certifiedAsString:]
  -[AWDHomeKitTargetControllerError StringAsCertified:]


HMDAudioStreamInterface : HMDStreamInterface <HMFLogging, AVCAudioStreamDelegate>
 @property  <HMDAVCAudioStream> *audioStream
 @property  <HMDAudioStreamInterfaceDataSource> *dataSource
 @property  BOOL streamStarted
 @property  unsigned long audioStreamSetting
 @property  BOOL muted
 @property  BOOL rtcpEnabled
 @property  BOOL rtpTimeOutEnabled
 @property  BOOL rtcpTimeOutEnabled
 @property  double rtpTimeOutIntervalSec
 @property  double rtcpTimeOutIntervalSec
 @property  double rtcpSendIntervalSec
 @property  @? stopStreamCompletionHandler
 @property  NSNumber *syncSource
 @property  <HMDAudioStreamInterfaceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAudioStreamInterface logCategory]

  // instance methods
  -[HMDAudioStreamInterface audioStream]
  -[HMDAudioStreamInterface logIdentifier]
  -[HMDAudioStreamInterface dataSource]
  -[HMDAudioStreamInterface setDelegate:]
  -[HMDAudioStreamInterface delegate]
  -[HMDAudioStreamInterface dealloc]
  -[HMDAudioStreamInterface isMuted]
  -[HMDAudioStreamInterface .cxx_destruct]
  -[HMDAudioStreamInterface setMuted:]
  -[HMDAudioStreamInterface streamDidStop:]
  -[HMDAudioStreamInterface stopStream]
  -[HMDAudioStreamInterface audioStreamSetting]
  -[HMDAudioStreamInterface setAudioStreamSetting:]
  -[HMDAudioStreamInterface setRtcpTimeOutIntervalSec:]
  -[HMDAudioStreamInterface isRTPTimeOutEnabled]
  -[HMDAudioStreamInterface setRtcpEnabled:]
  -[HMDAudioStreamInterface setRtpTimeOutIntervalSec:]
  -[HMDAudioStreamInterface setRtpTimeOutEnabled:]
  -[HMDAudioStreamInterface setRtcpSendIntervalSec:]
  -[HMDAudioStreamInterface setRtcpTimeOutEnabled:]
  -[HMDAudioStreamInterface stream:didStart:error:]
  -[HMDAudioStreamInterface stream:didPause:error:]
  -[HMDAudioStreamInterface stream:didResume:error:]
  -[HMDAudioStreamInterface streamDidRTPTimeOut:]
  -[HMDAudioStreamInterface streamDidRTCPTimeOut:]
  -[HMDAudioStreamInterface streamDidServerDie:]
  -[HMDAudioStreamInterface isRTCPEnabled]
  -[HMDAudioStreamInterface isRTCPTimeOutEnabled]
  -[HMDAudioStreamInterface rtpTimeOutIntervalSec]
  -[HMDAudioStreamInterface rtcpTimeOutIntervalSec]
  -[HMDAudioStreamInterface rtcpSendIntervalSec]
  -[HMDAudioStreamInterface initWithSessionID:workQueue:delegate:delegateQueue:sessionHandler:localNetworkConfig:]
  -[HMDAudioStreamInterface syncSource]
  -[HMDAudioStreamInterface startStreamWithConfig:]
  -[HMDAudioStreamInterface _startStreamWithConfig:]
  -[HMDAudioStreamInterface _callStarted:]
  -[HMDAudioStreamInterface _callStopped:]
  -[HMDAudioStreamInterface updateAudioSetting:]
  -[HMDAudioStreamInterface updateAudioVolume:callback:]
  -[HMDAudioStreamInterface initWithSessionID:workQueue:delegate:delegateQueue:sessionHandler:audioStream:localRTPSocket:dataSource:]
  -[HMDAudioStreamInterface _createAudioStreamWithSessionHandler:localNetworkConfig:localRTPSocket:]
  -[HMDAudioStreamInterface _createStreamWithRemoteDestinationReceiver:]
  -[HMDAudioStreamInterface _createStreamWithRemoteSocketReceiver:]
  -[HMDAudioStreamInterface _createLocalRTPSocketWithRemoteSender:localNetworkConfig:]
  -[HMDAudioStreamInterface _createLocalStreamAndRTPSocket:localNetworkConfig:]
  -[HMDAudioStreamInterface _updateAudioSetting:]
  -[HMDAudioStreamInterface _stopStreamWithCompletion:]
  -[HMDAudioStreamInterface _pauseStream]
  -[HMDAudioStreamInterface _resumeStream]
  -[HMDAudioStreamInterface startSynchronizationWithVideoStreamToken:]
  -[HMDAudioStreamInterface _callPaused:]
  -[HMDAudioStreamInterface _callResumed:]
  -[HMDAudioStreamInterface streamStarted]
  -[HMDAudioStreamInterface setStreamStarted:]
  -[HMDAudioStreamInterface stopStreamCompletionHandler]
  -[HMDAudioStreamInterface setStopStreamCompletionHandler:]


HMDAccessorySettingMergeStrategy : HMFObject
 @property  NSNumber *conflictValue
 @property  long long strategy

  // instance methods
  -[HMDAccessorySettingMergeStrategy strategy]
  -[HMDAccessorySettingMergeStrategy .cxx_destruct]
  -[HMDAccessorySettingMergeStrategy initWithMergeStrategy:]
  -[HMDAccessorySettingMergeStrategy conflictValue]


HMDCloudManager : HMFObject <HMBCloudPushObserver, HMFLogging>
 @property  <HMDCloudManagerDelegate> *delegate
 @property  <HMDCloudManagerDataSource> *dataSource
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  CKContainer *container
 @property  CKDatabase *database
 @property  HMDCloudCache *cloudCache
 @property  HMDCloudLegacyZone *legacyZone
 @property  HMDCloudMetadataZone *metadataZone
 @property  HMDCloudHomeManagerZone *homeManagerZone
 @property  HMFMessageDispatcher *configSyncDispatcher
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL accountActive
 @property  @? fetchCompletionHandler
 @property  NSObject<OS_dispatch_queue> *clientCallbackQueue
 @property  BOOL cloudHomeDataRecordExists
 @property  BOOL keychainSyncEnabled
 @property  BOOL decryptionFailed
 @property  NSObject<OS_dispatch_source> *retryTimer
 @property  NSObject<OS_dispatch_source> *pollTimer
 @property  NSObject<OS_dispatch_source> *controllerKeyPollTimer
 @property  NSObject<OS_dispatch_source> *watchdogControllerKeyPollTimer
 @property  @? cloudDataDeletedNotificationHandler
 @property  @? cloudMetadataDeletedNotificationHandler
 @property  @? controllerKeyAvailableNotificationHandler
 @property  HMDCloudDataSyncStateFilter *cloudDataSyncStateFilter
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDSyncOperationManager *syncManager
 @property  NSMutableArray *currentBackoffTimerValuesInMinutes
 @property  @? dataDecryptionFailedHandler
 @property  @? accountActiveUpdateHandler
 @property  BOOL firstV3FetchRun
 @property  BOOL firstDBQueryRun
 @property  NSData *serverTokenData
 @property  NSObject<OS_dispatch_queue> *callbackQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudManager logCategory]

  // instance methods
  -[HMDCloudManager clientCallbackQueue]
  -[HMDCloudManager dataSource]
  -[HMDCloudManager setCallbackQueue:]
  -[HMDCloudManager workQueue]
  -[HMDCloudManager handler:didReceiveCKNotification:]
  -[HMDCloudManager delegate]
  -[HMDCloudManager setDatabase:]
  -[HMDCloudManager callbackQueue]
  -[HMDCloudManager setWorkQueue:]
  -[HMDCloudManager dealloc]
  -[HMDCloudManager setFetchCompletionHandler:]
  -[HMDCloudManager .cxx_destruct]
  -[HMDCloudManager container]
  -[HMDCloudManager fetchCompletionHandler]
  -[HMDCloudManager registerForPushNotifications]
  -[HMDCloudManager setClientCallbackQueue:]
  -[HMDCloudManager database]
  -[HMDCloudManager cloudCache]
  -[HMDCloudManager setSyncManager:]
  -[HMDCloudManager homeManagerZone]
  -[HMDCloudManager msgDispatcher]
  -[HMDCloudManager syncManager]
  -[HMDCloudManager setRetryTimer:]
  -[HMDCloudManager retryTimer]
  -[HMDCloudManager setMsgDispatcher:]
  -[HMDCloudManager _accountIsActive]
  -[HMDCloudManager keychainSyncEnabled]
  -[HMDCloudManager handler:didReceivePushForTopic:]
  -[HMDCloudManager logEventSubmitter]
  -[HMDCloudManager decryptionFailed]
  -[HMDCloudManager resetCloudServerTokenData:]
  -[HMDCloudManager handleKeychainStateChangedNotification:]
  -[HMDCloudManager _auditProxSetupNotification:]
  -[HMDCloudManager initWithMessageDispatcher:cloudDataSyncStateFilter:cloudCache:delegate:dataSource:syncManager:logEventSubmitter:callbackQueue:]
  -[HMDCloudManager initWithMessageDispatcher:cloudDataSyncStateFilter:cloudCache:delegate:dataSource:syncManager:callbackQueue:container:logEventSubmitter:workQueue:]
  -[HMDCloudManager __addCKDatabaseOperation:]
  -[HMDCloudManager __fetchSubscriptionWithID:completionHandler:]
  -[HMDCloudManager __saveSubscription:completionHandler:]
  -[HMDCloudManager __fetchAllRecordZonesWithCompletionHandler:]
  -[HMDCloudManager __fetchRecordZoneWithID:completionHandler:]
  -[HMDCloudManager __saveRecordZone:completionHandler:]
  -[HMDCloudManager __deleteRecordZoneWithID:completionHandler:]
  -[HMDCloudManager __deleteRecordZonesWithIDs:completionHandler:]
  -[HMDCloudManager __deleteRecordWithID:completionHandler:]
  -[HMDCloudManager legacyZone]
  -[HMDCloudManager legacyZoneHasRecordsAvaliable]
  -[HMDCloudManager metadataZone]
  -[HMDCloudManager addHomeZoneName:owner:]
  -[HMDCloudManager _addHomeZoneName:owner:]
  -[HMDCloudManager removeHomeZoneName:]
  -[HMDCloudManager _removeHomeZoneName:]
  -[HMDCloudManager fetchTransaction:completionHandler:]
  -[HMDCloudManager _fetchTransaction:completionHandler:]
  -[HMDCloudManager uploadTransaction:completionHandler:]
  -[HMDCloudManager _createZoneAndUploadTransaction:completionHandler:]
  -[HMDCloudManager _verifyZoneHasBeenDeletedTransaction:completionHandler:]
  -[HMDCloudManager _checkZoneAndUploadTransaction:completionHandler:]
  -[HMDCloudManager _uploadTransaction:completionHandler:]
  -[HMDCloudManager removeZonesTransactions:completionHandler:]
  -[HMDCloudManager _removeZonesTransactions:completionHandler:]
  -[HMDCloudManager uploadLegacyTransaction:completionHandler:]
  -[HMDCloudManager _uploadLegacyTransaction:completionHandler:]
  -[HMDCloudManager _fetchAndVerifyZoneRootRecord:completionHandler:]
  -[HMDCloudManager resetCloudDataAndDeleteMetadataForCurrentAccount:completionHandler:]
  -[HMDCloudManager _removeAllHomeZonesCompletionHandler:]
  -[HMDCloudManager verifyAndRemoveZone:completionHandler:]
  -[HMDCloudManager _verifyAndRemoveZone:completionHandler:]
  -[HMDCloudManager _verifyAndRemoveAllHomeZonesCompletionHandler:]
  -[HMDCloudManager _resetCloudZonesIgnoreHomeManager:completionHandler:]
  -[HMDCloudManager _resetCloudDataAndDeleteMetadataForCurrentAccount:completionHandler:]
  -[HMDCloudManager _resetCloudServerTokenData]
  -[HMDCloudManager resetCloudCache:]
  -[HMDCloudManager _resetCloudCache:]
  -[HMDCloudManager serverTokenData]
  -[HMDCloudManager _serverTokenData]
  -[HMDCloudManager fetchCurrentAccountStateWithCompletionHandler:]
  -[HMDCloudManager setDataAvailableFromCloudCompletionBlock:]
  -[HMDCloudManager setCloudDataDeletedNotificationBlock:]
  -[HMDCloudManager setCloudMetadataDeletedNotificationBlock:]
  -[HMDCloudManager setControllerKeyAvailableNotificationBlock:]
  -[HMDCloudManager setDataDecryptionFailedCompletionBlock:]
  -[HMDCloudManager setAccountActiveUpdateCallback:]
  -[HMDCloudManager fetchLegacyTransaction:forceFetch:accountCompletionHandler:dataCompletionHandler:]
  -[HMDCloudManager _fetchLegacyTransaction:forceFetch:accountCompletionHandler:dataCompletionHandler:]
  -[HMDCloudManager _processFetchedTransaction:]
  -[HMDCloudManager _processFetchCompletedWithError:serverToken:fetchTransaction:migrationOptions:completionHandler:moreRecordsComing:emptyRecord:]
  -[HMDCloudManager updateAccountStatusChanged:completionHandler:]
  -[HMDCloudManager _handleAccountStatus:completionHandler:]
  -[HMDCloudManager _changeTokenFromData:]
  -[HMDCloudManager _resetHomeDataRecordState]
  -[HMDCloudManager _verifyZonesExist:zoneIndex:completion:]
  -[HMDCloudManager _createZoneAndFetchChanges:]
  -[HMDCloudManager setAccountActive:]
  -[HMDCloudManager updateCloudDataSyncFilterState:]
  -[HMDCloudManager _forceCleanCloud:fetchTransaction:completionHandler:]
  -[HMDCloudManager _validFetchRetryCKErrorCode:]
  -[HMDCloudManager initializeServerTokenStatusOnCloudFilter]
  -[HMDCloudManager updateServerTokenStatusOnCloudFilter]
  -[HMDCloudManager _updateServerTokenStatusOnCloudFilter]
  -[HMDCloudManager _startFetchRetryTimer]
  -[HMDCloudManager _stopFetchRetryTimer]
  -[HMDCloudManager _startFetchPollTimer]
  -[HMDCloudManager _stopFetchPollTimer]
  -[HMDCloudManager _handleKeychainSyncStateChanged:]
  -[HMDCloudManager _handleControllerKeyAvailable]
  -[HMDCloudManager _startWatchdogControllerKeyPollTimer]
  -[HMDCloudManager _stopWatchdogControllerKeyPollTimer]
  -[HMDCloudManager _startControllerKeyPollTimer]
  -[HMDCloudManager _startControllerKeyPollTimerWithBackoff]
  -[HMDCloudManager _startControllerKeyPollTimerWithValue:]
  -[HMDCloudManager _stopControllerKeyPollTimer]
  -[HMDCloudManager _registerForProxSetupNotifications]
  -[HMDCloudManager _setupSubscriptionForZone:]
  -[HMDCloudManager _scheduleZoneFetch:]
  -[HMDCloudManager fetchDatabaseZoneChanges]
  -[HMDCloudManager cacheDatabaseServerToken]
  -[HMDCloudManager _fetchDatabaseZoneChangesCompletion:]
  -[HMDCloudManager accountActive]
  -[HMDCloudManager setCloudCache:]
  -[HMDCloudManager configSyncDispatcher]
  -[HMDCloudManager setConfigSyncDispatcher:]
  -[HMDCloudManager cloudHomeDataRecordExists]
  -[HMDCloudManager setCloudHomeDataRecordExists:]
  -[HMDCloudManager setKeychainSyncEnabled:]
  -[HMDCloudManager pollTimer]
  -[HMDCloudManager setPollTimer:]
  -[HMDCloudManager controllerKeyPollTimer]
  -[HMDCloudManager setControllerKeyPollTimer:]
  -[HMDCloudManager watchdogControllerKeyPollTimer]
  -[HMDCloudManager setWatchdogControllerKeyPollTimer:]
  -[HMDCloudManager cloudDataDeletedNotificationHandler]
  -[HMDCloudManager setCloudDataDeletedNotificationHandler:]
  -[HMDCloudManager cloudMetadataDeletedNotificationHandler]
  -[HMDCloudManager setCloudMetadataDeletedNotificationHandler:]
  -[HMDCloudManager controllerKeyAvailableNotificationHandler]
  -[HMDCloudManager setControllerKeyAvailableNotificationHandler:]
  -[HMDCloudManager cloudDataSyncStateFilter]
  -[HMDCloudManager setCloudDataSyncStateFilter:]
  -[HMDCloudManager currentBackoffTimerValuesInMinutes]
  -[HMDCloudManager setCurrentBackoffTimerValuesInMinutes:]
  -[HMDCloudManager dataDecryptionFailedHandler]
  -[HMDCloudManager setDataDecryptionFailedHandler:]
  -[HMDCloudManager accountActiveUpdateHandler]
  -[HMDCloudManager setAccountActiveUpdateHandler:]
  -[HMDCloudManager isFirstV3FetchRun]
  -[HMDCloudManager setFirstV3FetchRun:]
  -[HMDCloudManager isFirstDBQueryRun]
  -[HMDCloudManager setFirstDBQueryRun:]


AWDHomeKitCharacteristic : PBCodable <NSCopying>
 @property  BOOL hasServiceType
 @property  NSString *serviceType
 @property  BOOL hasCharacteristicType
 @property  NSString *characteristicType

  // instance methods
  -[AWDHomeKitCharacteristic hasServiceType]
  -[AWDHomeKitCharacteristic copyTo:]
  -[AWDHomeKitCharacteristic setServiceType:]
  -[AWDHomeKitCharacteristic characteristicType]
  -[AWDHomeKitCharacteristic .cxx_destruct]
  -[AWDHomeKitCharacteristic mergeFrom:]
  -[AWDHomeKitCharacteristic serviceType]
  -[AWDHomeKitCharacteristic dictionaryRepresentation]
  -[AWDHomeKitCharacteristic copyWithZone:]
  -[AWDHomeKitCharacteristic readFrom:]
  -[AWDHomeKitCharacteristic writeTo:]
  -[AWDHomeKitCharacteristic isEqual:]
  -[AWDHomeKitCharacteristic hasCharacteristicType]
  -[AWDHomeKitCharacteristic setCharacteristicType:]


HMDUserActionPredictionModel : HMBModel
 @property  NSUUID *predictionTargetUUID
 @property  NSUUID *targetServiceUUID
 @property  NSUUID *targetServiceGroupUUID
 @property  NSUUID *targetGroupUUID
 @property  NSNumber *type
 @property  NSNumber *groupType
 @property  NSNumber *predictionScore

  // class methods
  +[HMDUserActionPredictionModel hmbProperties]
  +[HMDUserActionPredictionModel hmbExcludeFromCloudStorage]

  // instance methods
  -[HMDUserActionPredictionModel initWithUserActionPrediction:]
  -[HMDUserActionPredictionModel userActionPrediction]


HMDTargetControllerCommandEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long commandType
 @property  HMDHAPAccessory *accessory

  // class methods
  +[HMDTargetControllerCommandEvent commandEventWithCommandType:accessory:]

  // instance methods
  -[HMDTargetControllerCommandEvent accessory]
  -[HMDTargetControllerCommandEvent .cxx_destruct]
  -[HMDTargetControllerCommandEvent commandType]
  -[HMDTargetControllerCommandEvent AWDMessageType]
  -[HMDTargetControllerCommandEvent metricForAWD]
  -[HMDTargetControllerCommandEvent initWithCommandType:accessory:]


HMDUnassociatedFaceCropModel : HMBModel
 @property  NSData *faceBoundingBoxData
 @property  NSData *dataRepresentation
 @property  NSDate *dateCreated
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} faceBoundingBox

  // class methods
  +[HMDUnassociatedFaceCropModel hmbProperties]
  +[HMDUnassociatedFaceCropModel hmbExternalRecordType]
  +[HMDUnassociatedFaceCropModel hmbQueries]
  +[HMDUnassociatedFaceCropModel sentinelParentUUID]
  +[HMDUnassociatedFaceCropModel unassociatedFaceCropsBetweenDatesQueryWithIsAscending:]

  // instance methods
  -[HMDUnassociatedFaceCropModel faceBoundingBox]
  -[HMDUnassociatedFaceCropModel setFaceBoundingBox:]
  -[HMDUnassociatedFaceCropModel initWithFaceCrop:]
  -[HMDUnassociatedFaceCropModel createFaceCrop]


HMDAppleMediaAccessoryPowerActionModel : HMDActionModel

AWDHomeKitWHASetting : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasKeyPath
 @property  NSString *keyPath
 @property  BOOL hasValue
 @property  AWDHomeKitValue *value

  // instance methods
  -[AWDHomeKitWHASetting setTimestamp:]
  -[AWDHomeKitWHASetting copyTo:]
  -[AWDHomeKitWHASetting .cxx_destruct]
  -[AWDHomeKitWHASetting hasValue]
  -[AWDHomeKitWHASetting keyPath]
  -[AWDHomeKitWHASetting mergeFrom:]
  -[AWDHomeKitWHASetting setHasTimestamp:]
  -[AWDHomeKitWHASetting setValue:]
  -[AWDHomeKitWHASetting dictionaryRepresentation]
  -[AWDHomeKitWHASetting hasTimestamp]
  -[AWDHomeKitWHASetting copyWithZone:]
  -[AWDHomeKitWHASetting value]
  -[AWDHomeKitWHASetting timestamp]
  -[AWDHomeKitWHASetting readFrom:]
  -[AWDHomeKitWHASetting setKeyPath:]
  -[AWDHomeKitWHASetting writeTo:]
  -[AWDHomeKitWHASetting isEqual:]
  -[AWDHomeKitWHASetting hasKeyPath]


HMDUIDialogPresenter : HMFObject
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  ^{__CFUserNotification=} currentNotification
 @property  id currentContext
 @property  NSMutableArray *pendingContexts
 @property  BOOL selectedByPeerDevice
 @property  BOOL peerDeviceAcceptedSelection
 @property  NSObject<OS_dispatch_semaphore> *notificationSem
 @property  BOOL shouldSkipAuthPromptDialog

  // class methods
  +[HMDUIDialogPresenter sharedUIDialogPresenter]

  // instance methods
  -[HMDUIDialogPresenter workQueue]
  -[HMDUIDialogPresenter setWorkQueue:]
  -[HMDUIDialogPresenter dealloc]
  -[HMDUIDialogPresenter .cxx_destruct]
  -[HMDUIDialogPresenter setCurrentContext:]
  -[HMDUIDialogPresenter init]
  -[HMDUIDialogPresenter currentContext]
  -[HMDUIDialogPresenter setCurrentNotification:]
  -[HMDUIDialogPresenter dismissPendingDialogWithContext:queue:completionHandler:]
  -[HMDUIDialogPresenter dismissPendingDialogDueToPeerDeviceSelection:context:queue:completionHandler:]
  -[HMDUIDialogPresenter _isPendingContext:]
  -[HMDUIDialogPresenter _addToPendingContext:]
  -[HMDUIDialogPresenter _addCurrentNotification:withContext:]
  -[HMDUIDialogPresenter _removeCurrentNotification:currentSelection:selectedByPeerDevice:andContext:]
  -[HMDUIDialogPresenter requestUserPermissionForUnauthenticatedAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionForUnauthenticatedAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter requestUserPermissionForLegacyWACAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter requestUserPermissionWithAccessoryPPIDInfo:name:category:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionWithAccessoryPPIDInfo:name:category:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter requestUserPermissionForDeletionOfHomeWithName:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionForDeletionOfHomeWithName:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter requestUserPermissionForRemovalOfRouter:accessoriesRequiringManualReconfiguration:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionForRemovalOfRouter:accessoriesRequiringManualReconfiguration:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionForRemovalOfSpecificWiFiCredentialedAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter showUserDialogForIncompatibleAccessory:name:category:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _showUserDialogForIncompatibleAccessory:name:category:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _requestUserPermissionForLegacyWACAccessory:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter displayKeychainSyncForHome:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _displayKeychainSyncForHome:withContext:queue:completionHandler:]
  -[HMDUIDialogPresenter displayiCloudSwitchWithContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _displayiCloudSwitchWithContext:queue:completionHandler:]
  -[HMDUIDialogPresenter displayUpgradeNeededWithContext:queue:completionHandler:]
  -[HMDUIDialogPresenter _displayUpgradeNeededWithContext:queue:completionHandler:]
  -[HMDUIDialogPresenter displayInternalTTRErrorWithContext:message:radarTitle:]
  -[HMDUIDialogPresenter _displayInternalTTRErrorWithContext:message:radarTitle:]
  -[HMDUIDialogPresenter confirmReportAccessory:context:completionQueue:completionHandler:]
  -[HMDUIDialogPresenter displayExecutionErrorOfTrigger:partialSuccess:context:completionQueue:completionHandler:]
  -[HMDUIDialogPresenter shouldSkipAuthPromptDialog]
  -[HMDUIDialogPresenter _presentDialogWithInfo:options:targetResponse:textField:withContext:selectedByPeerDevice:timeout:]
  -[HMDUIDialogPresenter _presentDialogWithInfo:options:textField:withContext:]
  -[HMDUIDialogPresenter _presentDialogWithInfo:options:targetResponse:textField:withContext:]
  -[HMDUIDialogPresenter currentNotification]
  -[HMDUIDialogPresenter pendingContexts]
  -[HMDUIDialogPresenter setPendingContexts:]
  -[HMDUIDialogPresenter selectedByPeerDevice]
  -[HMDUIDialogPresenter setSelectedByPeerDevice:]
  -[HMDUIDialogPresenter peerDeviceAcceptedSelection]
  -[HMDUIDialogPresenter setPeerDeviceAcceptedSelection:]
  -[HMDUIDialogPresenter notificationSem]
  -[HMDUIDialogPresenter setNotificationSem:]


HMDMediaContentProfileAccessControlModel : HMBModel
 @property  NSArray *accessories

  // class methods
  +[HMDMediaContentProfileAccessControlModel hmbProperties]


HMDAppleMediaAccessoryDailySetRoomEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *currentRoom
 @property  NSString *previousRoom

  // class methods
  +[HMDAppleMediaAccessoryDailySetRoomEvent filterToAllowedRoomName:]

  // instance methods
  -[HMDAppleMediaAccessoryDailySetRoomEvent eventName]
  -[HMDAppleMediaAccessoryDailySetRoomEvent .cxx_destruct]
  -[HMDAppleMediaAccessoryDailySetRoomEvent currentRoom]
  -[HMDAppleMediaAccessoryDailySetRoomEvent serializedEvent]
  -[HMDAppleMediaAccessoryDailySetRoomEvent initWithCurrentRoom:previousRoom:]
  -[HMDAppleMediaAccessoryDailySetRoomEvent previousRoom]


AWDHomeKitEventTriggerExecutionSession : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasSessionID
 @property  NSString *sessionID
 @property  NSMutableArray *triggerEvents
 @property  NSMutableArray *endEvents
 @property  BOOL hasExecutionState
 @property  int executionState
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode

  // class methods
  +[AWDHomeKitEventTriggerExecutionSession triggerEventsType]
  +[AWDHomeKitEventTriggerExecutionSession endEventsType]

  // instance methods
  -[AWDHomeKitEventTriggerExecutionSession setTimestamp:]
  -[AWDHomeKitEventTriggerExecutionSession copyTo:]
  -[AWDHomeKitEventTriggerExecutionSession sessionID]
  -[AWDHomeKitEventTriggerExecutionSession .cxx_destruct]
  -[AWDHomeKitEventTriggerExecutionSession mergeFrom:]
  -[AWDHomeKitEventTriggerExecutionSession setHasTimestamp:]
  -[AWDHomeKitEventTriggerExecutionSession dictionaryRepresentation]
  -[AWDHomeKitEventTriggerExecutionSession hasTimestamp]
  -[AWDHomeKitEventTriggerExecutionSession copyWithZone:]
  -[AWDHomeKitEventTriggerExecutionSession timestamp]
  -[AWDHomeKitEventTriggerExecutionSession readFrom:]
  -[AWDHomeKitEventTriggerExecutionSession writeTo:]
  -[AWDHomeKitEventTriggerExecutionSession setSessionID:]
  -[AWDHomeKitEventTriggerExecutionSession isEqual:]
  -[AWDHomeKitEventTriggerExecutionSession hasSessionID]
  -[AWDHomeKitEventTriggerExecutionSession endEvents]
  -[AWDHomeKitEventTriggerExecutionSession executionState]
  -[AWDHomeKitEventTriggerExecutionSession setExecutionState:]
  -[AWDHomeKitEventTriggerExecutionSession setResultErrorCode:]
  -[AWDHomeKitEventTriggerExecutionSession setHasResultErrorCode:]
  -[AWDHomeKitEventTriggerExecutionSession hasResultErrorCode]
  -[AWDHomeKitEventTriggerExecutionSession resultErrorCode]
  -[AWDHomeKitEventTriggerExecutionSession triggerEvents]
  -[AWDHomeKitEventTriggerExecutionSession clearTriggerEvents]
  -[AWDHomeKitEventTriggerExecutionSession addTriggerEvents:]
  -[AWDHomeKitEventTriggerExecutionSession triggerEventsCount]
  -[AWDHomeKitEventTriggerExecutionSession triggerEventsAtIndex:]
  -[AWDHomeKitEventTriggerExecutionSession clearEndEvents]
  -[AWDHomeKitEventTriggerExecutionSession addEndEvents:]
  -[AWDHomeKitEventTriggerExecutionSession endEventsCount]
  -[AWDHomeKitEventTriggerExecutionSession endEventsAtIndex:]
  -[AWDHomeKitEventTriggerExecutionSession setHasExecutionState:]
  -[AWDHomeKitEventTriggerExecutionSession hasExecutionState]
  -[AWDHomeKitEventTriggerExecutionSession executionStateAsString:]
  -[AWDHomeKitEventTriggerExecutionSession StringAsExecutionState:]
  -[AWDHomeKitEventTriggerExecutionSession setTriggerEvents:]
  -[AWDHomeKitEventTriggerExecutionSession setEndEvents:]


HMDCameraClipsQuotaManager : NSObject <HMDDatabaseDelegate, HMFLogging>
 @property  HMBCloudDatabase *cloudDatabase
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipsQuotaManager logCategory]
  +[HMDCameraClipsQuotaManager defaultManager]
  +[HMDCameraClipsQuotaManager _quotaServerErrorFromServerError:]
  +[HMDCameraClipsQuotaManager _quotaErrorFromServerError:]

  // instance methods
  -[HMDCameraClipsQuotaManager initWithDatabase:]
  -[HMDCameraClipsQuotaManager logIdentifier]
  -[HMDCameraClipsQuotaManager .cxx_destruct]
  -[HMDCameraClipsQuotaManager cloudDatabase]
  -[HMDCameraClipsQuotaManager database:willRemoveZoneWithName:isPrivate:]
  -[HMDCameraClipsQuotaManager enableCloudStorageForZoneWithName:]
  -[HMDCameraClipsQuotaManager disableCloudStorageForZoneWithName:]
  -[HMDCameraClipsQuotaManager _addCodeOperationWithFunctionName:request:responseClass:]


HMDAccountRegistry : HMFObject <HMFLogging, NSFastEnumeration>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMDAppleAccountManager *appleAccountManager
 @property  HMDRemoteAccountManager *remoteAccountManager
 @property  BOOL started
 @property  NSArray *accounts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccountRegistry automaticallyNotifiesObserversForKey:]
  +[HMDAccountRegistry logCategory]
  +[HMDAccountRegistry sharedRegistry]

  // instance methods
  -[HMDAccountRegistry accounts]
  -[HMDAccountRegistry countByEnumeratingWithState:objects:count:]
  -[HMDAccountRegistry clientQueue]
  -[HMDAccountRegistry started]
  -[HMDAccountRegistry attributeDescriptions]
  -[HMDAccountRegistry reset]
  -[HMDAccountRegistry .cxx_destruct]
  -[HMDAccountRegistry stop]
  -[HMDAccountRegistry accountForHandle:]
  -[HMDAccountRegistry start]
  -[HMDAccountRegistry appleAccountManager]
  -[HMDAccountRegistry remoteAccountManager]
  -[HMDAccountRegistry __handleAppleAccountUpdate:]
  -[HMDAccountRegistry __handleAddedRemoteAccount:]
  -[HMDAccountRegistry __handleRemovedRemoteAccount:]
  -[HMDAccountRegistry initWithAppleAccountManager:remoteAccountManager:]
  -[HMDAccountRegistry accountExistsForHandle:]
  -[HMDAccountRegistry accountForHandle:exists:]
  -[HMDAccountRegistry deviceForIdentifier:]
  -[HMDAccountRegistry deviceForAddress:]
  -[HMDAccountRegistry deviceForHandle:]
  -[HMDAccountRegistry deviceForHandle:exists:]
  -[HMDAccountRegistry deviceExistsForDevice:]
  -[HMDAccountRegistry deviceForDevice:]
  -[HMDAccountRegistry deviceForDevice:exists:]
  -[HMDAccountRegistry deviceForPushToken:]
  -[HMDAccountRegistry deviceForIDSIdentifier:]
  -[HMDAccountRegistry __handleAppleAccountHandlesUpdated:]
  -[HMDAccountRegistry __handleAppleAccountDeviceAdded:]
  -[HMDAccountRegistry _resolveAccountForHandle:completionHandler:]


HMDHomePresenceUpdate : HMFObject
 @property  HMDHomePresence *homePresence
 @property  HMDUserPresence *userPresence
 @property  BOOL update
 @property  HMDDevice *causingDevice

  // instance methods
  -[HMDHomePresenceUpdate .cxx_destruct]
  -[HMDHomePresenceUpdate isUpdate]
  -[HMDHomePresenceUpdate homePresence]
  -[HMDHomePresenceUpdate initWithHomePresence:userPresence:update:causingDevice:]
  -[HMDHomePresenceUpdate userPresence]
  -[HMDHomePresenceUpdate causingDevice]


HMDBackgroundTaskManager : HMFObject <HMFLogging>
 @property  NSMutableDictionary *tasksByIdentifier
 @property  NSMutableDictionary *pendingTaskDateByIdentifier
 @property  HMDBackgroundTaskLogger *logger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackgroundTaskManager sharedManager]
  +[HMDBackgroundTaskManager logCategory]

  // instance methods
  -[HMDBackgroundTaskManager _configure]
  -[HMDBackgroundTaskManager _handleEvent:]
  -[HMDBackgroundTaskManager logger]
  -[HMDBackgroundTaskManager .cxx_destruct]
  -[HMDBackgroundTaskManager init]
  -[HMDBackgroundTaskManager scheduleTaskWithIdentifier:fireDate:onObserver:selector:error:]
  -[HMDBackgroundTaskManager cancelTaskWithIdentifier:onObserver:]
  -[HMDBackgroundTaskManager _handlePendingTaskWithIdentifier:]
  -[HMDBackgroundTaskManager _postNotificationWithIdentifier:]
  -[HMDBackgroundTaskManager _registerEventWithIdentifier:fireDate:]
  -[HMDBackgroundTaskManager _unregisterEventWithIdentifier:]
  -[HMDBackgroundTaskManager _setTask:forIdentifier:]
  -[HMDBackgroundTaskManager _taskForIdentifier:]
  -[HMDBackgroundTaskManager tasksByIdentifier]
  -[HMDBackgroundTaskManager pendingTaskDateByIdentifier]


HMDAppleMediaAccessoryLocalMessageHandler : NSObject <HMFLogging>
 @property  NSUUID *identifier
 @property  HMDAssistantSettingsConnection *assistantSettingsConnection
 @property  <HMDAppleMediaAccessoryLocalMessageHandlerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryLocalMessageHandler logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryLocalMessageHandler identifier]
  -[HMDAppleMediaAccessoryLocalMessageHandler logIdentifier]
  -[HMDAppleMediaAccessoryLocalMessageHandler dataSource]
  -[HMDAppleMediaAccessoryLocalMessageHandler .cxx_destruct]
  -[HMDAppleMediaAccessoryLocalMessageHandler setDataSource:]
  -[HMDAppleMediaAccessoryLocalMessageHandler assistantSettingsConnection]
  -[HMDAppleMediaAccessoryLocalMessageHandler initWithIdentifier:assistantSettingsConnection:]
  -[HMDAppleMediaAccessoryLocalMessageHandler handleSiriEndpointDeleteSiriHistoryMessage:]
  -[HMDAppleMediaAccessoryLocalMessageHandler dataSourceAccessoryWithUUID:]


HMDBTLEAdvertiser : HMFObject <HAPBTLECentralManagerDelegate, HMFTimerDelegate>
 @property  CUBLEAdvertiser *leAdvertiser
 @property  HMFTimer *advertisementTimer
 @property  HMDHAPAccessory *accessory
 @property  HAPBTLECentralManager *centralManager
 @property  HMDAccessoryQueues *powerOnQueues
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  double advertisementTimeInterval
 @property  double reachabilityTimeInterval
 @property  BOOL isReady
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBTLEAdvertiser sharedAdvertiser]
  +[HMDBTLEAdvertiser initializeAdvertiser]

  // instance methods
  -[HMDBTLEAdvertiser accessory]
  -[HMDBTLEAdvertiser timerDidFire:]
  -[HMDBTLEAdvertiser centralManager]
  -[HMDBTLEAdvertiser isReady]
  -[HMDBTLEAdvertiser setCentralManager:]
  -[HMDBTLEAdvertiser setAccessory:]
  -[HMDBTLEAdvertiser workQueue]
  -[HMDBTLEAdvertiser setWorkQueue:]
  -[HMDBTLEAdvertiser .cxx_destruct]
  -[HMDBTLEAdvertiser powerOn:]
  -[HMDBTLEAdvertiser init]
  -[HMDBTLEAdvertiser didUpdateBTLEState:]
  -[HMDBTLEAdvertiser _flushQueue:]
  -[HMDBTLEAdvertiser _flushQueues]
  -[HMDBTLEAdvertiser _clearAdvertiser]
  -[HMDBTLEAdvertiser _stopAdvertisement:]
  -[HMDBTLEAdvertiser stopAdvertisement:]
  -[HMDBTLEAdvertiser _completePendingPowerOnRequest:]
  -[HMDBTLEAdvertiser _cancelOn:]
  -[HMDBTLEAdvertiser cancelOn:]
  -[HMDBTLEAdvertiser _startAdvertising]
  -[HMDBTLEAdvertiser _advertisementTimeout]
  -[HMDBTLEAdvertiser isAdvertisingForAccessory:]
  -[HMDBTLEAdvertiser leAdvertiser]
  -[HMDBTLEAdvertiser setLeAdvertiser:]
  -[HMDBTLEAdvertiser advertisementTimer]
  -[HMDBTLEAdvertiser setAdvertisementTimer:]
  -[HMDBTLEAdvertiser powerOnQueues]
  -[HMDBTLEAdvertiser setPowerOnQueues:]
  -[HMDBTLEAdvertiser advertisementTimeInterval]
  -[HMDBTLEAdvertiser setAdvertisementTimeInterval:]
  -[HMDBTLEAdvertiser reachabilityTimeInterval]
  -[HMDBTLEAdvertiser setReachabilityTimeInterval:]


HMDMediaGroupsAggregatorBackupSender : HMFObject <HMFLogging, HMDMediaGroupsAggregateBackupMessageTimerDelegate, HMDMediaGroupsAggregateBackupMessageTimerProvider>
 @property  <HMDMediaGroupsAggregateBackupMessageTimerProvider> *backupTimerProvider
 @property  NSUUID *identifier
 @property  <HMDMediaGroupsAggregatorBackupSenderDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsAggregatorBackupSender logCategory]

  // instance methods
  -[HMDMediaGroupsAggregatorBackupSender identifier]
  -[HMDMediaGroupsAggregatorBackupSender logIdentifier]
  -[HMDMediaGroupsAggregatorBackupSender dataSource]
  -[HMDMediaGroupsAggregatorBackupSender .cxx_destruct]
  -[HMDMediaGroupsAggregatorBackupSender initWithIdentifier:]
  -[HMDMediaGroupsAggregatorBackupSender setDataSource:]
  -[HMDMediaGroupsAggregatorBackupSender clearCachedData]
  -[HMDMediaGroupsAggregatorBackupSender didFireTimerForMediaGroupsAggregateBackupMessageTimer:]
  -[HMDMediaGroupsAggregatorBackupSender mediaGroupsAggregateBackupMessageTimerWithParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender initWithIdentifier:backupTimerProvider:]
  -[HMDMediaGroupsAggregatorBackupSender sendBackupToParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender _sendBackupToParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender routeBackedUpGroupsMessage:toParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender locallyRouteGroupsBackupDataMessage:toParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender backupGroupsForParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender routerParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender receiverForParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender createNewBackupTimerForParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender setBackUpTimer:]
  -[HMDMediaGroupsAggregatorBackupSender backupTimerForParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender removeBackupTimerWithParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregatorBackupSender startBackupTimerWithParticipantAccessoryUUID:dueToFailedMessageIdentifier:]
  -[HMDMediaGroupsAggregatorBackupSender markAttemptForParticipantAccessoryUUID:withMessageIdentifier:]
  -[HMDMediaGroupsAggregatorBackupSender backupTimerProvider]
  -[HMDMediaGroupsAggregatorBackupSender setBackupTimerProvider:]


HMDTargetButtonConfiguration : HMFObject
 @property  unsigned char identifier
 @property  long long type
 @property  NSString *name

  // instance methods
  -[HMDTargetButtonConfiguration identifier]
  -[HMDTargetButtonConfiguration initWithType:identifier:name:]
  -[HMDTargetButtonConfiguration type]
  -[HMDTargetButtonConfiguration .cxx_destruct]
  -[HMDTargetButtonConfiguration setType:]
  -[HMDTargetButtonConfiguration shortDescription]
  -[HMDTargetButtonConfiguration setName:]
  -[HMDTargetButtonConfiguration name]
  -[HMDTargetButtonConfiguration isEqual:]
  -[HMDTargetButtonConfiguration init]
  -[HMDTargetButtonConfiguration buttonName]


HMDMediaDestinationControllerMetricsEventDispatcher : HMFObject <HMFLogging, HMDLogEventDailyTaskRunner>
 @property  <HMDMediaDestinationControllerMetricsEventDispatcherDataSource> *dataSource
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent *trackedStagedDestinationIdentifierEvent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationControllerMetricsEventDispatcher logCategory]

  // instance methods
  -[HMDMediaDestinationControllerMetricsEventDispatcher identifier]
  -[HMDMediaDestinationControllerMetricsEventDispatcher logIdentifier]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSource]
  -[HMDMediaDestinationControllerMetricsEventDispatcher .cxx_destruct]
  -[HMDMediaDestinationControllerMetricsEventDispatcher setDataSource:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher logEventSubmitter]
  -[HMDMediaDestinationControllerMetricsEventDispatcher runDailyTask]
  -[HMDMediaDestinationControllerMetricsEventDispatcher submitFailureEventWithEventErrorCode:error:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher initWithIdentifier:logEventSubmitter:dataSource:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher submitReceivedUpdateDestinationRequestMessageEventWithDestinationIdentifier:existingDestinationIdentifier:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher submitTransactionUpdatedDestinationEventWithDestinationIdentifier:existingDestinationIdentifier:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher startStagedDestinationIdentifierCommittedEventWithStagedDestinationIdentifier:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher submitStagedDestinationIdentifierCommittedEventWithCommittedDestinationIdentifier:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher submitDailySetDestinationEvent]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSourceCurrentUserPrivilege]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSourceCurrentUser]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSourceCurrentDestinationType]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSourceDestinationTypeWithIdentifier:]
  -[HMDMediaDestinationControllerMetricsEventDispatcher dataSourceIsTriggeredOnControllerDevice]
  -[HMDMediaDestinationControllerMetricsEventDispatcher trackedStagedDestinationIdentifierEvent]
  -[HMDMediaDestinationControllerMetricsEventDispatcher setTrackedStagedDestinationIdentifierEvent:]


HMDSBSRemoteAlertHandleProvider : HMFObject
  // instance methods
  -[HMDSBSRemoteAlertHandleProvider createRemoteAlertHandleWithServiceName:viewControllerClassName:userInfo:]


HMDResidentReachabilityContext : HMFObject <NSSecureCoding>
 @property  NSNumber *mostRecentReachability

  // class methods
  +[HMDResidentReachabilityContext supportsSecureCoding]

  // instance methods
  -[HMDResidentReachabilityContext encodeWithCoder:]
  -[HMDResidentReachabilityContext .cxx_destruct]
  -[HMDResidentReachabilityContext isEqual:]
  -[HMDResidentReachabilityContext init]
  -[HMDResidentReachabilityContext initWithCoder:]
  -[HMDResidentReachabilityContext initWithMostRecentReachability:]
  -[HMDResidentReachabilityContext mostRecentReachability]


HMDAccessorySettingConstraintModel : HMDBackingStoreModelObject
 @property  NSNumber *type
 @property  NSData *value

  // class methods
  +[HMDAccessorySettingConstraintModel properties]
  +[HMDAccessorySettingConstraintModel schemaHashRoot]


HMDRemoteLoginAuthenticationRequest : HMRemoteLoginMessage
 @property  unsigned long targetedAccountType

  // class methods
  +[HMDRemoteLoginAuthenticationRequest supportsSecureCoding]
  +[HMDRemoteLoginAuthenticationRequest messageName]
  +[HMDRemoteLoginAuthenticationRequest objWithDict:]
  +[HMDRemoteLoginAuthenticationRequest objWithMessage:]
  +[HMDRemoteLoginAuthenticationRequest xpcMessageName]

  // instance methods
  -[HMDRemoteLoginAuthenticationRequest encodeWithCoder:]
  -[HMDRemoteLoginAuthenticationRequest messagePayload]
  -[HMDRemoteLoginAuthenticationRequest messageName]
  -[HMDRemoteLoginAuthenticationRequest initWithCoder:]
  -[HMDRemoteLoginAuthenticationRequest xpcMessageName]
  -[HMDRemoteLoginAuthenticationRequest targetedAccountType]
  -[HMDRemoteLoginAuthenticationRequest setTargetedAccountType:]


HMDRemoteLoginCompanionAuthenticationRequest : HMDRemoteLoginAuthenticationRequest <HMRemoteLoginMessageProtocol>
 @property  ACAccount *account
 @property  AKDevice *companionDevice
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginCompanionAuthenticationRequest supportsSecureCoding]
  +[HMDRemoteLoginCompanionAuthenticationRequest messageName]
  +[HMDRemoteLoginCompanionAuthenticationRequest objWithDict:]
  +[HMDRemoteLoginCompanionAuthenticationRequest objWithMessage:]
  +[HMDRemoteLoginCompanionAuthenticationRequest xpcMessageName]

  // instance methods
  -[HMDRemoteLoginCompanionAuthenticationRequest account]
  -[HMDRemoteLoginCompanionAuthenticationRequest setAccount:]
  -[HMDRemoteLoginCompanionAuthenticationRequest encodeWithCoder:]
  -[HMDRemoteLoginCompanionAuthenticationRequest messagePayload]
  -[HMDRemoteLoginCompanionAuthenticationRequest messageName]
  -[HMDRemoteLoginCompanionAuthenticationRequest .cxx_destruct]
  -[HMDRemoteLoginCompanionAuthenticationRequest initWithCoder:]
  -[HMDRemoteLoginCompanionAuthenticationRequest setCompanionDevice:]
  -[HMDRemoteLoginCompanionAuthenticationRequest companionDevice]
  -[HMDRemoteLoginCompanionAuthenticationRequest xpcMessageName]


HMDRemoteLoginProxyAuthenticationRequest : HMDRemoteLoginAuthenticationRequest <HMRemoteLoginMessageProtocol>
 @property  NSString *username
 @property  NSString *rawPassword
 @property  NSString *passwordToken
 @property  NSString *altDSID
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginProxyAuthenticationRequest supportsSecureCoding]
  +[HMDRemoteLoginProxyAuthenticationRequest messageName]
  +[HMDRemoteLoginProxyAuthenticationRequest objWithDict:]
  +[HMDRemoteLoginProxyAuthenticationRequest objWithMessage:]
  +[HMDRemoteLoginProxyAuthenticationRequest xpcMessageName]

  // instance methods
  -[HMDRemoteLoginProxyAuthenticationRequest altDSID]
  -[HMDRemoteLoginProxyAuthenticationRequest setAltDSID:]
  -[HMDRemoteLoginProxyAuthenticationRequest setUsername:]
  -[HMDRemoteLoginProxyAuthenticationRequest rawPassword]
  -[HMDRemoteLoginProxyAuthenticationRequest encodeWithCoder:]
  -[HMDRemoteLoginProxyAuthenticationRequest messagePayload]
  -[HMDRemoteLoginProxyAuthenticationRequest messageName]
  -[HMDRemoteLoginProxyAuthenticationRequest .cxx_destruct]
  -[HMDRemoteLoginProxyAuthenticationRequest setRawPassword:]
  -[HMDRemoteLoginProxyAuthenticationRequest username]
  -[HMDRemoteLoginProxyAuthenticationRequest initWithCoder:]
  -[HMDRemoteLoginProxyAuthenticationRequest xpcMessageName]
  -[HMDRemoteLoginProxyAuthenticationRequest passwordToken]
  -[HMDRemoteLoginProxyAuthenticationRequest setPasswordToken:]


HMDRemoteLoginAuthenticationResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  ACAccount *loggedInAccount
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginAuthenticationResponse supportsSecureCoding]
  +[HMDRemoteLoginAuthenticationResponse messageName]
  +[HMDRemoteLoginAuthenticationResponse objWithDict:]
  +[HMDRemoteLoginAuthenticationResponse objWithMessage:]
  +[HMDRemoteLoginAuthenticationResponse xpcMessageName]

  // instance methods
  -[HMDRemoteLoginAuthenticationResponse encodeWithCoder:]
  -[HMDRemoteLoginAuthenticationResponse messagePayload]
  -[HMDRemoteLoginAuthenticationResponse messageName]
  -[HMDRemoteLoginAuthenticationResponse .cxx_destruct]
  -[HMDRemoteLoginAuthenticationResponse initWithCoder:]
  -[HMDRemoteLoginAuthenticationResponse xpcMessageName]
  -[HMDRemoteLoginAuthenticationResponse loggedInAccount]
  -[HMDRemoteLoginAuthenticationResponse setLoggedInAccount:]


HMDRemoteLoginProxyDeviceRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginProxyDeviceRequest supportsSecureCoding]
  +[HMDRemoteLoginProxyDeviceRequest messageName]
  +[HMDRemoteLoginProxyDeviceRequest objWithDict:]
  +[HMDRemoteLoginProxyDeviceRequest objWithMessage:]
  +[HMDRemoteLoginProxyDeviceRequest xpcMessageName]

  // instance methods
  -[HMDRemoteLoginProxyDeviceRequest messagePayload]
  -[HMDRemoteLoginProxyDeviceRequest messageName]
  -[HMDRemoteLoginProxyDeviceRequest xpcMessageName]


HMDRemoteLoginProxyDeviceResponse : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  AKDevice *proxyDevice
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginProxyDeviceResponse supportsSecureCoding]
  +[HMDRemoteLoginProxyDeviceResponse messageName]
  +[HMDRemoteLoginProxyDeviceResponse objWithDict:]
  +[HMDRemoteLoginProxyDeviceResponse objWithMessage:]
  +[HMDRemoteLoginProxyDeviceResponse xpcMessageName]

  // instance methods
  -[HMDRemoteLoginProxyDeviceResponse encodeWithCoder:]
  -[HMDRemoteLoginProxyDeviceResponse messagePayload]
  -[HMDRemoteLoginProxyDeviceResponse messageName]
  -[HMDRemoteLoginProxyDeviceResponse .cxx_destruct]
  -[HMDRemoteLoginProxyDeviceResponse initWithCoder:]
  -[HMDRemoteLoginProxyDeviceResponse xpcMessageName]
  -[HMDRemoteLoginProxyDeviceResponse setProxyDevice:]
  -[HMDRemoteLoginProxyDeviceResponse proxyDevice]


HMDRemoteLoginSignoutRequest : HMRemoteLoginMessage <HMRemoteLoginMessageProtocol>
 @property  ACAccount *account
 @property  NSString *messageName
 @property  NSString *xpcMessageName
 @property  NSDictionary *messagePayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginSignoutRequest supportsSecureCoding]
  +[HMDRemoteLoginSignoutRequest messageName]
  +[HMDRemoteLoginSignoutRequest objWithDict:]
  +[HMDRemoteLoginSignoutRequest objWithMessage:]
  +[HMDRemoteLoginSignoutRequest xpcMessageName]

  // instance methods
  -[HMDRemoteLoginSignoutRequest account]
  -[HMDRemoteLoginSignoutRequest setAccount:]
  -[HMDRemoteLoginSignoutRequest encodeWithCoder:]
  -[HMDRemoteLoginSignoutRequest messagePayload]
  -[HMDRemoteLoginSignoutRequest messageName]
  -[HMDRemoteLoginSignoutRequest .cxx_destruct]
  -[HMDRemoteLoginSignoutRequest initWithCoder:]
  -[HMDRemoteLoginSignoutRequest xpcMessageName]


HMDHTTPDevice : HMFObject <HMFLogging>
 @property  NSUUID *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHTTPDevice shortDescription]
  +[HMDHTTPDevice logCategory]

  // instance methods
  -[HMDHTTPDevice identifier]
  -[HMDHTTPDevice logIdentifier]
  -[HMDHTTPDevice .cxx_destruct]
  -[HMDHTTPDevice initWithIdentifier:]
  -[HMDHTTPDevice shortDescription]
  -[HMDHTTPDevice isEqual:]
  -[HMDHTTPDevice init]
  -[HMDHTTPDevice descriptionWithPointer:]


HMDSnapshotCATransactionHandler : HMFObject <HMFLogging>
 @property  CAContext *snapshotContext
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  BSPortDeathWatcher *backboardServicesWatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotCATransactionHandler logCategory]
  +[HMDSnapshotCATransactionHandler sharedHandler]

  // instance methods
  -[HMDSnapshotCATransactionHandler clientQueue]
  -[HMDSnapshotCATransactionHandler .cxx_destruct]
  -[HMDSnapshotCATransactionHandler snapshotContext]
  -[HMDSnapshotCATransactionHandler init]
  -[HMDSnapshotCATransactionHandler _createSnapshotContext]
  -[HMDSnapshotCATransactionHandler _backboardServicesRelaunched]
  -[HMDSnapshotCATransactionHandler createSlotWithFilePath:]
  -[HMDSnapshotCATransactionHandler fillSlotWithIdentifier:filePath:]
  -[HMDSnapshotCATransactionHandler clearSlotWithIdentifier:]
  -[HMDSnapshotCATransactionHandler _createSlotWithFilePath:snapshotCATransaction:]
  -[HMDSnapshotCATransactionHandler deleteSlotWithIdentifier:filePath:]
  -[HMDSnapshotCATransactionHandler _deleteSlotWithIdentifier:filePath:snapshotCATransaction:]
  -[HMDSnapshotCATransactionHandler createSnapshotCGImageRef:]
  -[HMDSnapshotCATransactionHandler setSnapshotContext:]
  -[HMDSnapshotCATransactionHandler backboardServicesWatcher]
  -[HMDSnapshotCATransactionHandler setBackboardServicesWatcher:]


HMDPhotoLibraryPerson : HMFObject
 @property  NSUUID *UUID
 @property  NSString *name
 @property  HMPerson *hmPerson

  // instance methods
  -[HMDPhotoLibraryPerson attributeDescriptions]
  -[HMDPhotoLibraryPerson .cxx_destruct]
  -[HMDPhotoLibraryPerson UUID]
  -[HMDPhotoLibraryPerson copyWithZone:]
  -[HMDPhotoLibraryPerson name]
  -[HMDPhotoLibraryPerson isEqual:]
  -[HMDPhotoLibraryPerson initWithUUID:name:]
  -[HMDPhotoLibraryPerson initWithHMPerson:]
  -[HMDPhotoLibraryPerson hmPerson]


HMDIDSSendMessageOperation : HMFOperation <HMFLogging, HMFObject, HMDIDSServiceDelegate>
 @property  <HMDIDSService> *service
 @property  HMFMessage *message
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDIDSSendMessageOperation timeout]
  +[HMDIDSSendMessageOperation shortDescription]
  +[HMDIDSSendMessageOperation logCategory]

  // instance methods
  -[HMDIDSSendMessageOperation logIdentifier]
  -[HMDIDSSendMessageOperation attributeDescriptions]
  -[HMDIDSSendMessageOperation privateDescription]
  -[HMDIDSSendMessageOperation service:account:identifier:didSendWithSuccess:error:context:]
  -[HMDIDSSendMessageOperation .cxx_destruct]
  -[HMDIDSSendMessageOperation service]
  -[HMDIDSSendMessageOperation initWithMessage:]
  -[HMDIDSSendMessageOperation shortDescription]
  -[HMDIDSSendMessageOperation main]
  -[HMDIDSSendMessageOperation message]
  -[HMDIDSSendMessageOperation initWithMessage:service:]


HMDCameraIDSDeviceConnection : HMFObject <HMFTimerDelegate, HMDIDSServiceDelegate, HMFLogging, HMDCameraRemoteStreamProtocol>
 @property  @? idsDeviceConnectionFactory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraStreamSessionID *sessionID
 @property  <HMDIDSService> *idsProxyStreamService
 @property  IDSDeviceConnection *watchVideoConnection
 @property  IDSDeviceConnection *watchAudioConnection
 @property  IDSDeviceConnection *keepAliveConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraIDSDeviceConnection logCategory]

  // instance methods
  -[HMDCameraIDSDeviceConnection timerDidFire:]
  -[HMDCameraIDSDeviceConnection logIdentifier]
  -[HMDCameraIDSDeviceConnection sessionID]
  -[HMDCameraIDSDeviceConnection workQueue]
  -[HMDCameraIDSDeviceConnection dealloc]
  -[HMDCameraIDSDeviceConnection .cxx_destruct]
  -[HMDCameraIDSDeviceConnection startKeepAlive]
  -[HMDCameraIDSDeviceConnection _callSessionEndedWithError:]
  -[HMDCameraIDSDeviceConnection initWithSessionID:workQueue:idsProxyStreamService:]
  -[HMDCameraIDSDeviceConnection _socketOpenedWithError:]
  -[HMDCameraIDSDeviceConnection _createStreamSocketWithDevice:]
  -[HMDCameraIDSDeviceConnection idsProxyStreamService]
  -[HMDCameraIDSDeviceConnection watchVideoConnection]
  -[HMDCameraIDSDeviceConnection setWatchVideoConnection:]
  -[HMDCameraIDSDeviceConnection watchAudioConnection]
  -[HMDCameraIDSDeviceConnection setWatchAudioConnection:]
  -[HMDCameraIDSDeviceConnection keepAliveConnection]
  -[HMDCameraIDSDeviceConnection setKeepAliveConnection:]
  -[HMDCameraIDSDeviceConnection idsDeviceConnectionFactory]
  -[HMDCameraIDSDeviceConnection setIdsDeviceConnectionFactory:]


HMDHomeMediaSystemHandler : HMFObject <HMDDevicePreferenceDataSource, HMDStereoPairSettingsControllerDataSource, HMDHomeMediaSystemControllerMessageHandlerDelegate, HMDMediaSystemDataSource, NSSecureCoding, HMFLogging>
 @property  <HMDHomeMediaSystemHandlerDelegate> *delegate
 @property  NSUUID *parentUUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messsageDispatcher
 @property  NSNotificationCenter *notificationCenter
 @property  HMDHome *home
 @property  HMDHomeMediaSystemControllerMessageHandler *messageHandler
 @property  HMDStereoPairSettingsController *stereoPairSettingsController
 @property  NSArray *mediaSystems
 @property  <HMDHomeMediaSystemHandlerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeMediaSystemHandler supportsSecureCoding]
  +[HMDHomeMediaSystemHandler logCategory]

  // instance methods
  -[HMDHomeMediaSystemHandler notificationCenter]
  -[HMDHomeMediaSystemHandler eventStoreReadHandle]
  -[HMDHomeMediaSystemHandler home]
  -[HMDHomeMediaSystemHandler setNotificationCenter:]
  -[HMDHomeMediaSystemHandler logIdentifier]
  -[HMDHomeMediaSystemHandler dataSource]
  -[HMDHomeMediaSystemHandler setDelegate:]
  -[HMDHomeMediaSystemHandler encodeWithCoder:]
  -[HMDHomeMediaSystemHandler workQueue]
  -[HMDHomeMediaSystemHandler messageHandler]
  -[HMDHomeMediaSystemHandler delegate]
  -[HMDHomeMediaSystemHandler setWorkQueue:]
  -[HMDHomeMediaSystemHandler setMessageHandler:]
  -[HMDHomeMediaSystemHandler attributeDescriptions]
  -[HMDHomeMediaSystemHandler privateDescription]
  -[HMDHomeMediaSystemHandler .cxx_destruct]
  -[HMDHomeMediaSystemHandler mediaSystemForAccessory:]
  -[HMDHomeMediaSystemHandler setDataSource:]
  -[HMDHomeMediaSystemHandler initWithCoder:]
  -[HMDHomeMediaSystemHandler parentUUID]
  -[HMDHomeMediaSystemHandler setParentUUID:]
  -[HMDHomeMediaSystemHandler setHome:]
  -[HMDHomeMediaSystemHandler mediaSystems]
  -[HMDHomeMediaSystemHandler mediaSystemWithUUID:]
  -[HMDHomeMediaSystemHandler supportsDeviceWithCapabilities:]
  -[HMDHomeMediaSystemHandler destinationForMediaSystem:]
  -[HMDHomeMediaSystemHandler localAndRemoteSubscriptionProvider]
  -[HMDHomeMediaSystemHandler eventForwarder]
  -[HMDHomeMediaSystemHandler uuidToMediaSystems]
  -[HMDHomeMediaSystemHandler messageHandlerAddMediaSystem:configuredName:leftUUID:leftAccessoryUUID:rightUUID:rightAccessoryUUID:builderSession:completion:]
  -[HMDHomeMediaSystemHandler messageHandlerUpdateMediaSystem:configuredName:leftUUID:leftAccessoryUUID:rightUUID:rightAccessoryUUID:builderSession:completion:]
  -[HMDHomeMediaSystemHandler messageHandlerRemoveMediaSystem:builderSession:message:]
  -[HMDHomeMediaSystemHandler initWithMediaSystems:]
  -[HMDHomeMediaSystemHandler filteredMediaSystems]
  -[HMDHomeMediaSystemHandler updateMediaSystem:]
  -[HMDHomeMediaSystemHandler removeMediaSystem:]
  -[HMDHomeMediaSystemHandler handleRemovedMediaSystem:]
  -[HMDHomeMediaSystemHandler unsubscribeToSettingsForMediaSystem:]
  -[HMDHomeMediaSystemHandler notifyOfRemovedMediaSystem:]
  -[HMDHomeMediaSystemHandler configure:delegate:dataSource:queue:messageDispatcher:notificationCenter:]
  -[HMDHomeMediaSystemHandler processedMediaSystemBuilderMessageFor:]
  -[HMDHomeMediaSystemHandler routeMediaSystemWithMessage:]
  -[HMDHomeMediaSystemHandler mergeMediaSystemData:]
  -[HMDHomeMediaSystemHandler identifiersInMediaSystemData:]
  -[HMDHomeMediaSystemHandler mediaSystemData:withIdentifier:]
  -[HMDHomeMediaSystemHandler addMediaSystemsWithIdentifiers:usingData:]
  -[HMDHomeMediaSystemHandler addMediaSystemWithGroupIdentifier:usingData:]
  -[HMDHomeMediaSystemHandler _handleAddMediaSystemModel:message:]
  -[HMDHomeMediaSystemHandler addMediaSystem:]
  -[HMDHomeMediaSystemHandler subscribeToSettingsForNewlyAddedMediaSystem:]
  -[HMDHomeMediaSystemHandler confirmPrimaryResidentIfFirstMediaSystem]
  -[HMDHomeMediaSystemHandler _handleRemoveMediaSystemModel:message:]
  -[HMDHomeMediaSystemHandler _handleUpdateMediaSystemModel:message:]
  -[HMDHomeMediaSystemHandler backingStoreObjectsForVersion:]
  -[HMDHomeMediaSystemHandler _currentMediaSystemIfPrimary]
  -[HMDHomeMediaSystemHandler _userAssistantAccessControlDidUpdate:accessories:]
  -[HMDHomeMediaSystemHandler messsageDispatcher]
  -[HMDHomeMediaSystemHandler setMesssageDispatcher:]
  -[HMDHomeMediaSystemHandler stereoPairSettingsController]
  -[HMDHomeMediaSystemHandler setStereoPairSettingsController:]


HMDAccessorySettingTransform : NSObject
  // class methods
  +[HMDAccessorySettingTransform modelsForGroup:]
  +[HMDAccessorySettingTransform modelsForGroupDiff:fromGroup:]
  +[HMDAccessorySettingTransform modelsForSettingDiff:fromSetting:]
  +[HMDAccessorySettingTransform modelForGroup:]
  +[HMDAccessorySettingTransform modelsForSetting:]
  +[HMDAccessorySettingTransform modelForSetting:]
  +[HMDAccessorySettingTransform modelForSetting:identifier:parentIdentifier:]
  +[HMDAccessorySettingTransform modelsForChangedConstraints:fromSetting:]
  +[HMDAccessorySettingTransform changeAccessorySettingType:home:]
  +[HMDAccessorySettingTransform mergeWithGroupMetadata:group:]


HMDRemoteEventRouterPrimaryResidentClient : HMDRemoteEventRouterClient
  // instance methods
  -[HMDRemoteEventRouterPrimaryResidentClient .cxx_destruct]
  -[HMDRemoteEventRouterPrimaryResidentClient dumpStateDescription]
  -[HMDRemoteEventRouterPrimaryResidentClient clientIsEnabled:]
  -[HMDRemoteEventRouterPrimaryResidentClient handlePrimaryResidentConfirmedDeviceIdentifierChangeNotification:]
  -[HMDRemoteEventRouterPrimaryResidentClient messageTransportRestriction]
  -[HMDRemoteEventRouterPrimaryResidentClient _clientIsEnabled:]


HMDMediaAccessoryBrowseOperation : HMFOperation <HMFLogging>
 @property  NSString *accessoryIdentifier
 @property  unsigned int endpointFeatures
 @property  HMDMediaEndpoint *endpoint
 @property  NSArray *outputDevices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaAccessoryBrowseOperation logCategory]
  +[HMDMediaAccessoryBrowseOperation defaultTimeout]

  // instance methods
  -[HMDMediaAccessoryBrowseOperation endpoint]
  -[HMDMediaAccessoryBrowseOperation dealloc]
  -[HMDMediaAccessoryBrowseOperation outputDevices]
  -[HMDMediaAccessoryBrowseOperation .cxx_destruct]
  -[HMDMediaAccessoryBrowseOperation endpointFeatures]
  -[HMDMediaAccessoryBrowseOperation main]
  -[HMDMediaAccessoryBrowseOperation cancel]
  -[HMDMediaAccessoryBrowseOperation setEndpointFeatures:]
  -[HMDMediaAccessoryBrowseOperation accessoryIdentifier]
  -[HMDMediaAccessoryBrowseOperation initWithAccessoryIdentifier:]
  -[HMDMediaAccessoryBrowseOperation initWithAccessoryIdentifier:timeout:]


HMDCameraSignificantEventFaceClassification : HMFObject <NSCopying, NSMutableCopying>
 @property  NSUUID *personUUID
 @property  NSString *personName
 @property  NSUUID *unassociatedFaceCropUUID
 @property  NSUUID *UUID
 @property  NSUUID *personManagerUUID

  // class methods
  +[HMDCameraSignificantEventFaceClassification faceClassificationWithHMIFaceClassification:person:]

  // instance methods
  -[HMDCameraSignificantEventFaceClassification attributeDescriptions]
  -[HMDCameraSignificantEventFaceClassification .cxx_destruct]
  -[HMDCameraSignificantEventFaceClassification UUID]
  -[HMDCameraSignificantEventFaceClassification copyWithZone:]
  -[HMDCameraSignificantEventFaceClassification mutableCopyWithZone:]
  -[HMDCameraSignificantEventFaceClassification isEqual:]
  -[HMDCameraSignificantEventFaceClassification personName]
  -[HMDCameraSignificantEventFaceClassification personUUID]
  -[HMDCameraSignificantEventFaceClassification setPersonUUID:]
  -[HMDCameraSignificantEventFaceClassification unassociatedFaceCropUUID]
  -[HMDCameraSignificantEventFaceClassification setUnassociatedFaceCropUUID:]
  -[HMDCameraSignificantEventFaceClassification personManagerUUID]
  -[HMDCameraSignificantEventFaceClassification setPersonName:]
  -[HMDCameraSignificantEventFaceClassification initWithUUID:personManagerUUID:]


HMDMutableCameraSignificantEventFaceClassification : HMDCameraSignificantEventFaceClassification
 @property  NSUUID *personUUID
 @property  NSString *personName
 @property  NSUUID *unassociatedFaceCropUUID

  // instance methods
  -[HMDMutableCameraSignificantEventFaceClassification copyWithZone:]


HMDAccessory : HMFObject <HMDBulletinIdentifiers, HMDSoftwareUpdateDataSource, NSSecureCoding, HMDHomeMessageReceiver, HMDBackingStoreObjectProtocol, HMFDumpState, HMFLogging>
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *metadataIdentifier
 @property  BOOL primary
 @property  BOOL suspendCapable
 @property  NSNumber *networkClientIdentifier
 @property  NSUUID *networkRouterUUID
 @property  long long currentNetworkProtectionMode
 @property  long long networkClientLAN
 @property  NSUUID *networkClientProfileFingerprint
 @property  long long wiFiCredentialType
 @property  NSArray *allowedHosts
 @property  NSData *wiFiUniquePreSharedKey
 @property  HMDAccessoryNetworkAccessViolation *networkAccessViolation
 @property  NSString *pendingConfigurationIdentifier
 @property  NSUUID *configuredNetworkProtectionGroupUUID
 @property  NSUUID *defaultNetworkProtectionGroupUUID
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  NSUUID *uuid
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  long long reachableTransports
 @property  BOOL remoteAccessEnabled
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMAccessoryCategory *category
 @property  NSNumber *categoryIdentifier
 @property  HMDRoom *room
 @property  NSString *configuredName
 @property  unsigned long configNumber
 @property  BOOL reachable
 @property  unsigned long accessoryReprovisionState
 @property  double lastPairingFailureTime
 @property  unsigned long consecutivePairingFailures
 @property  BOOL resetOnBackoffExpiry
 @property  HMDSoftwareUpdate *softwareUpdate
 @property  HMDUserManagementOperationTimestamp *sharedAdminAddedTimestamp
 @property  HMDUserManagementOperationTimestamp *pairingsAuditedTimestamp
 @property  NSUUID *preferredMediaUserUUID
 @property  NSNumber *preferredMediaUserSelectionTypeNumber
 @property  HMDAccessory *hostAccessory
 @property  BOOL supportsIdentify
 @property  NSUUID *spiClientIdentifier
 @property  NSUUID *endpointIdentifier
 @property  BOOL currentAccessory
 @property  NSString *identifier
 @property  NSNumber *initialCategoryIdentifier
 @property  NSString *name
 @property  HMDHome *home
 @property  NSString *providedName
 @property  NSString *model
 @property  NSString *initialModel
 @property  NSString *manufacturer
 @property  NSString *initialManufacturer
 @property  HMDAccessoryVersion *firmwareVersion
 @property  NSString *serialNumber
 @property  HMDVendorModelEntry *vendorInfo
 @property  NSString *productData
 @property  NSString *productGroup
 @property  BOOL hasBattery
 @property  BOOL suspended
 @property  BOOL remotelyReachable
 @property  BOOL supportsUserManagement
 @property  BOOL requiresHomeAppForManagement
 @property  BOOL supportsMediaContentProfile
 @property  BOOL supportsPersonalRequests
 @property  BOOL supportsHomeLevelLocationServiceSetting
 @property  NSString *configurationAppIdentifier
 @property  BOOL supportsTargetControl
 @property  BOOL supportsTargetController
 @property  BOOL supportsMultiUser
 @property  BOOL supportsDoorbellChime
 @property  BOOL supportsUserMediaSettings
 @property  BOOL supportsCompanionInitiatedRestart
 @property  BOOL supportsMusicAlarm
 @property  BOOL supportsAnnounce
 @property  BOOL supportsMediaActions
 @property  BOOL supportsCoordinationDoorbellChime
 @property  BOOL supportsThirdPartyMusic
 @property  BOOL supportsFirmwareUpdate
 @property  HMFVersion *primaryProfileVersion
 @property  NSArray *accessoryProfiles
 @property  HMDApplicationData *appData
 @property  BOOL reachabilityPingEnabled
 @property  BOOL reachablilityPingNotificationEnabled
 @property  NSDate *timeBecameUnreachable
 @property  NSDate *timeBecameReachable
 @property  BOOL shouldProcessTransactionRemoval
 @property  NSArray *transportReports
 @property  BOOL supportsManagedConfigurationProfile
 @property  BOOL supportsSoftwareUpdateV2
 @property  BOOL supportsMessagedHomePodSettings
 @property  BOOL requiresRemovalOnPrimaryResident
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessory supportsSecureCoding]
  +[HMDAccessory logCategory]
  +[HMDAccessory hasMessageReceiverChildren]
  +[HMDAccessory validateProductData:]
  +[HMDAccessory splitProductDataIntoProductGroupAndProductNumber:productGroup:productNumber:]

  // instance methods
  -[HMDAccessory dumpState]
  -[HMDAccessory serialNumber]
  -[HMDAccessory setCategory:]
  -[HMDAccessory home]
  -[HMDAccessory setSerialNumber:]
  -[HMDAccessory setModel:]
  -[HMDAccessory isPrimary]
  -[HMDAccessory supportsAnnounce]
  -[HMDAccessory supportsHomeLevelLocationServiceSetting]
  -[HMDAccessory setCategoryIdentifier:]
  -[HMDAccessory identifier]
  -[HMDAccessory firmwareVersion]
  -[HMDAccessory categoryIdentifier]
  -[HMDAccessory logIdentifier]
  -[HMDAccessory model]
  -[HMDAccessory supportsCoordinationDoorbellChime]
  -[HMDAccessory setPrimary:]
  -[HMDAccessory productGroup]
  -[HMDAccessory isSuspended]
  -[HMDAccessory isReachable]
  -[HMDAccessory encodeWithCoder:]
  -[HMDAccessory workQueue]
  -[HMDAccessory attributeDescriptions]
  -[HMDAccessory dealloc]
  -[HMDAccessory privateDescription]
  -[HMDAccessory category]
  -[HMDAccessory uuid]
  -[HMDAccessory .cxx_destruct]
  -[HMDAccessory setUuid:]
  -[HMDAccessory setReachable:]
  -[HMDAccessory messageTargetUUID]
  -[HMDAccessory supportsUserMediaSettings]
  -[HMDAccessory setManufacturer:]
  -[HMDAccessory supportsMultiUser]
  -[HMDAccessory messageDestination]
  -[HMDAccessory supportsMusicAlarm]
  -[HMDAccessory supportsThirdPartyMusic]
  -[HMDAccessory hasBattery]
  -[HMDAccessory supportsMediaActions]
  -[HMDAccessory supportsCompanionInitiatedRestart]
  -[HMDAccessory contextID]
  -[HMDAccessory setIdentifier:]
  -[HMDAccessory shortDescription]
  -[HMDAccessory supportsMessagedHomePodSettings]
  -[HMDAccessory endpointIdentifier]
  -[HMDAccessory name]
  -[HMDAccessory manufacturer]
  -[HMDAccessory setFirmwareVersion:]
  -[HMDAccessory messageReceiveQueue]
  -[HMDAccessory supportsManagedConfigurationProfile]
  -[HMDAccessory msgDispatcher]
  -[HMDAccessory submitLogEvent:]
  -[HMDAccessory supportsTargetControl]
  -[HMDAccessory setSuspended:]
  -[HMDAccessory urlString]
  -[HMDAccessory init]
  -[HMDAccessory initWithCoder:]
  -[HMDAccessory supportsDoorbellChime]
  -[HMDAccessory setHome:]
  -[HMDAccessory room]
  -[HMDAccessory setRoom:]
  -[HMDAccessory supportedTransports]
  -[HMDAccessory didEncounterError:]
  -[HMDAccessory unconfigure]
  -[HMDAccessory setConfiguredName:]
  -[HMDAccessory configuredName]
  -[HMDAccessory accessoryProfiles]
  -[HMDAccessory supportsFirmwareUpdate]
  -[HMDAccessory setMsgDispatcher:]
  -[HMDAccessory _registerForMessages]
  -[HMDAccessory allowedHosts]
  -[HMDAccessory setAllowedHosts:]
  -[HMDAccessory supportsWiFiReconfiguration]
  -[HMDAccessory accessoryReprovisionState]
  -[HMDAccessory reachableTransports]
  -[HMDAccessory supportsSoftwareUpdateV2]
  -[HMDAccessory isCurrentAccessory]
  -[HMDAccessory supportsTargetController]
  -[HMDAccessory pendingConfigurationIdentifier]
  -[HMDAccessory setPendingConfigurationIdentifier:]
  -[HMDAccessory setPreferredMediaUserUUID:]
  -[HMDAccessory preferredMediaUserUUID]
  -[HMDAccessory isSuspendCapable]
  -[HMDAccessory setSuspendCapable:]
  -[HMDAccessory supportsIdentify]
  -[HMDAccessory networkProtectionGroupUUID]
  -[HMDAccessory supportsDiagnosticsTransfer]
  -[HMDAccessory setAccessoryReprovisionState:]
  -[HMDAccessory setAccessoryProfiles:]
  -[HMDAccessory vendorInfo]
  -[HMDAccessory setAppData:]
  -[HMDAccessory appData]
  -[HMDAccessory metadataIdentifier]
  -[HMDAccessory productData]
  -[HMDAccessory setProductData:]
  -[HMDAccessory addAdvertisement:]
  -[HMDAccessory configNumber]
  -[HMDAccessory setConfigNumber:]
  -[HMDAccessory reachabilityPingEnabled]
  -[HMDAccessory setReachabilityPingEnabled:]
  -[HMDAccessory supportsUnreachablePing]
  -[HMDAccessory timeBecameReachable]
  -[HMDAccessory setTimeBecameReachable:]
  -[HMDAccessory providedName]
  -[HMDAccessory configurationAppIdentifier]
  -[HMDAccessory networkClientIdentifier]
  -[HMDAccessory networkRouterUUID]
  -[HMDAccessory currentNetworkProtectionMode]
  -[HMDAccessory networkClientLAN]
  -[HMDAccessory networkClientProfileFingerprint]
  -[HMDAccessory wiFiUniquePreSharedKey]
  -[HMDAccessory wiFiCredentialType]
  -[HMDAccessory primaryProfileVersion]
  -[HMDAccessory initialManufacturer]
  -[HMDAccessory initialModel]
  -[HMDAccessory initialCategoryIdentifier]
  -[HMDAccessory sharedAdminAddedTimestamp]
  -[HMDAccessory pairingsAuditedTimestamp]
  -[HMDAccessory messageReceiverChildren]
  -[HMDAccessory transactionObjectUpdated:newValues:message:]
  -[HMDAccessory transactionObjectRemoved:message:]
  -[HMDAccessory backingStoreObjects:]
  -[HMDAccessory contextSPIUniqueIdentifier]
  -[HMDAccessory accessoryBulletinContext]
  -[HMDAccessory featuresDataSource]
  -[HMDAccessory supportsMinimumUserPrivilege]
  -[HMDAccessory setRemoteAccessEnabled:]
  -[HMDAccessory remoteAccessEnabled:]
  -[HMDAccessory _remoteAccessEnabled:]
  -[HMDAccessory spiClientIdentifier]
  -[HMDAccessory supportsUserManagement]
  -[HMDAccessory removeCloudData]
  -[HMDAccessory isRemotelyReachable]
  -[HMDAccessory _handlePreviewAllowedHosts:]
  -[HMDAccessory __handleUpdateRoom:]
  -[HMDAccessory __handleRename:]
  -[HMDAccessory __handleSetAppData:]
  -[HMDAccessory __handleUpdatePendingConfigurationIdentifierMessage:]
  -[HMDAccessory __handleGetAccessoryAdvertisingParams:]
  -[HMDAccessory __handleListPairings:]
  -[HMDAccessory __handleAuditPairings:]
  -[HMDAccessory __handlePairingIdentityRequest:]
  -[HMDAccessory __handleIdentify:]
  -[HMDAccessory _handleWiFiReconfiguration:]
  -[HMDAccessory handleAccessoryUpdateShouldProcessTransactionRemovalValueRequestMessage:]
  -[HMDAccessory notificationCenterForSoftwareUpdate:]
  -[HMDAccessory notifyClientsOfConfigurationChangeWithReason:source:shouldFetch:]
  -[HMDAccessory initWithTransaction:home:]
  -[HMDAccessory runTransactionWithModel:label:completion:]
  -[HMDAccessory runTransactionWithModels:label:completion:]
  -[HMDAccessory transactionAccessoryUpdatedForPreferredMediaUser:completionHandler:]
  -[HMDAccessory decodePreferredMediaUser:]
  -[HMDAccessory encodePreferredMediaUser:]
  -[HMDAccessory setPreferredMediaUser:selectionType:completion:]
  -[HMDAccessory setDefaultPreferredMediaUserIfRemoved:defaultUser:completion:]
  -[HMDAccessory runTransactionWithPreferredMediaUserUUID:selectionType:completion:]
  -[HMDAccessory sendRemovalRequest]
  -[HMDAccessory sendRemovalRequestWithCompletion:]
  -[HMDAccessory transportReports]
  -[HMDAccessory transactionWithObjectChangeType:]
  -[HMDAccessory populateModelObject:version:]
  -[HMDAccessory _relayIdentifyAccessorytoResidentForMessage:]
  -[HMDAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:]
  -[HMDAccessory lastPairingFailureTime]
  -[HMDAccessory setLastPairingFailureTime:]
  -[HMDAccessory consecutivePairingFailure]
  -[HMDAccessory setConsecutivePairingFailure:]
  -[HMDAccessory resetOnBackoffExpiry]
  -[HMDAccessory setResetOnBackoffExpiry:]
  -[HMDAccessory updateRoom:source:]
  -[HMDAccessory modelWithUpdatedRoom:]
  -[HMDAccessory _updateRoom:source:]
  -[HMDAccessory updateCategory:]
  -[HMDAccessory _updateCategory:notifyClients:]
  -[HMDAccessory setInitialCategoryIdentifier:]
  -[HMDAccessory _handleUpdatedName:]
  -[HMDAccessory getConfiguredName]
  -[HMDAccessory setProvidedName:]
  -[HMDAccessory _renameAccessory:resetName:message:]
  -[HMDAccessory setInitialModel:]
  -[HMDAccessory setInitialManufacturer:]
  -[HMDAccessory updateMediaSession:]
  -[HMDAccessory notifyAccessoryNameChanged:]
  -[HMDAccessory setSharedAdminAddedTimestamp:]
  -[HMDAccessory setPairingsAuditedTimestamp:]
  -[HMDAccessory removeAdvertisement:]
  -[HMDAccessory requiresHomeAppForManagement]
  -[HMDAccessory supportsMediaContentProfile]
  -[HMDAccessory supportsPersonalRequests]
  -[HMDAccessory setSuspendedCapable:]
  -[HMDAccessory reachablilityPingNotificationEnabled]
  -[HMDAccessory setReachablilityPingNotificationEnabled:]
  -[HMDAccessory setTimeBecameUnreachable:]
  -[HMDAccessory timeBecameUnreachable]
  -[HMDAccessory setRemotelyReachable:]
  -[HMDAccessory isReachableForXPCClients]
  -[HMDAccessory messageSendPolicy]
  -[HMDAccessory _notifyConnectivityChangedWithReachabilityState:remoteAccessChanged:]
  -[HMDAccessory runtimeState]
  -[HMDAccessory _configNumberUpdated]
  -[HMDAccessory appDataUpdated:message:]
  -[HMDAccessory appDataRemoved:message:]
  -[HMDAccessory addAccessoryProfile:]
  -[HMDAccessory removeAccessoryProfile:]
  -[HMDAccessory setPrimaryProfileVersion:]
  -[HMDAccessory supportsNetworkProtection]
  -[HMDAccessory needsAirplayAccess]
  -[HMDAccessory setNetworkClientIdentifier:]
  -[HMDAccessory setNetworkRouterUUID:]
  -[HMDAccessory saveNetworkClientIdentifier:networkRouterUUID:clearProfileFingerprint:]
  -[HMDAccessory targetNetworkProtectionMode]
  -[HMDAccessory setCurrentNetworkProtectionMode:]
  -[HMDAccessory setNetworkClientLAN:]
  -[HMDAccessory setNetworkClientProfileFingerprint:]
  -[HMDAccessory saveCurrentNetworkProtectionMode:assignedLAN:allowedWANHosts:profileFingerprint:]
  -[HMDAccessory setWifiCredentialType:]
  -[HMDAccessory setWiFiUniquePreSharedKey:]
  -[HMDAccessory saveWiFiUniquePreSharedKey:credentialType:]
  -[HMDAccessory saveNetworkAccessViolation:]
  -[HMDAccessory defaultNetworkProtectionGroupUUID]
  -[HMDAccessory configuredNetworkProtectionGroupUUID]
  -[HMDAccessory setConfiguredNetworkProtectionGroupUUID:]
  -[HMDAccessory shouldEnableDaemonRelaunch]
  -[HMDAccessory didUpdateCurrentNetworkProtection]
  -[HMDAccessory dumpSimpleState]
  -[HMDAccessory dumpNetworkState]
  -[HMDAccessory handleIdentifyAccessoryMessage:]
  -[HMDAccessory autoConfigureTargetControllers]
  -[HMDAccessory _shouldFilterAccessoryProfile:]
  -[HMDAccessory providesHashRouteID]
  -[HMDAccessory hashRouteID]
  -[HMDAccessory addHostedAccessory:]
  -[HMDAccessory removeHostedAccessory:]
  -[HMDAccessory setHostAccessory:]
  -[HMDAccessory hostAccessory]
  -[HMDAccessory _updateHost:]
  -[HMDAccessory softwareUpdate]
  -[HMDAccessory setSoftwareUpdate:]
  -[HMDAccessory supportsSoftwareUpdate]
  -[HMDAccessory requiresRemovalOnPrimaryResident]
  -[HMDAccessory updateSoftwareUpdate:completionHandler:]
  -[HMDAccessory _applySoftwareUpdateModel:completion:]
  -[HMDAccessory _allowSoftwareUpdateChangeFromSource:]
  -[HMDAccessory handleUpdatedSoftwareUpdateModel:newValues:message:]
  -[HMDAccessory handleAddedSoftwareUpdateModel:message:]
  -[HMDAccessory handleRemovedSoftwareUpdateModel:message:]
  -[HMDAccessory startReachabilityCheck]
  -[HMDAccessory stopReachabilityCheck]
  -[HMDAccessory notifyClientsOfUpdatedAccessoryControllableValue:]
  -[HMDAccessory submitLogEvent:error:]
  -[HMDAccessory setWiFiCredentialType:]
  -[HMDAccessory consecutivePairingFailures]
  -[HMDAccessory setConsecutivePairingFailures:]
  -[HMDAccessory preferredMediaUserSelectionTypeNumber]
  -[HMDAccessory setPreferredMediaUserSelectionTypeNumber:]
  -[HMDAccessory setConfigurationAppIdentifier:]
  -[HMDAccessory shouldProcessTransactionRemoval]
  -[HMDAccessory setShouldProcessTransactionRemoval:]
  -[HMDAccessory setTransportReports:]
  -[HMDAccessory networkAccessViolation]
  -[HMDAccessory setNetworkAccessViolation:]
  -[HMDAccessory setFeaturesDataSource:]
  -[HMDAccessory isRemoteAccessEnabled]
  -[HMDAccessory metricLoggingVendorDetails]
  -[HMDAccessory vendorDetailsForAWD]
  -[HMDAccessory populateVendorDetailsForCoreAnalytics:keyPrefix:]
  -[HMDAccessory assistantObject]
  -[HMDAccessory networkProtectionStatusForAnalytics]
  -[HMDAccessory networkProtectionReportForAWD]


HMDRemoteMessageExceedBudgetLogEvent : HMMLogEvent <HMDDiagnosticReportLogging>
 @property  NSString *diagnosticReportEventType
 @property  NSString *diagnosticReportEventSubType
 @property  {_HMFRate=Qd} budgetRate

  // class methods
  +[HMDRemoteMessageExceedBudgetLogEvent eventWithBudgetRate:]

  // instance methods
  -[HMDRemoteMessageExceedBudgetLogEvent initWithBudgetRate:]
  -[HMDRemoteMessageExceedBudgetLogEvent budgetRate]
  -[HMDRemoteMessageExceedBudgetLogEvent updateDiagnosticReportSignature:]


HMDBackingStoreTransactionOptions : HMFObject <HMFLogging, NSSecureCoding>
 @property  NSString *label
 @property  unsigned long destination
 @property  unsigned long source
 @property  BOOL mustReplay
 @property  BOOL mustPush
 @property  BOOL mustSaveArchiveAtomically
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreTransactionOptions supportsSecureCoding]
  +[HMDBackingStoreTransactionOptions defaultIDSOptions]
  +[HMDBackingStoreTransactionOptions logCategory]
  +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:mustSaveArchiveAtomically:]
  +[HMDBackingStoreTransactionOptions optionsWithSource:destination:mustReplay:mustPush:]
  +[HMDBackingStoreTransactionOptions defaultLocalOptions]
  +[HMDBackingStoreTransactionOptions defaultXPCOptions]
  +[HMDBackingStoreTransactionOptions defaultCloudOptions]
  +[HMDBackingStoreTransactionOptions cloudRequiresPushOptions]
  +[HMDBackingStoreTransactionOptions localPushBackOptions]
  +[HMDBackingStoreTransactionOptions defaultLegacyCloudOptions]
  +[HMDBackingStoreTransactionOptions defaultMetadataCloudOptions]
  +[HMDBackingStoreTransactionOptions defaultResidenceOptions]
  +[HMDBackingStoreTransactionOptions defaultPreferencesOptions]
  +[HMDBackingStoreTransactionOptions defaultOutOfSyncOptions]
  +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreTransactionSource:]
  +[HMDBackingStoreTransactionOptions stringForHMDBackingStoreDestination:]

  // instance methods
  -[HMDBackingStoreTransactionOptions source]
  -[HMDBackingStoreTransactionOptions logIdentifier]
  -[HMDBackingStoreTransactionOptions destination]
  -[HMDBackingStoreTransactionOptions encodeWithCoder:]
  -[HMDBackingStoreTransactionOptions _description]
  -[HMDBackingStoreTransactionOptions setLabel:]
  -[HMDBackingStoreTransactionOptions .cxx_destruct]
  -[HMDBackingStoreTransactionOptions label]
  -[HMDBackingStoreTransactionOptions debugString:]
  -[HMDBackingStoreTransactionOptions isEqual:]
  -[HMDBackingStoreTransactionOptions initWithCoder:]
  -[HMDBackingStoreTransactionOptions initWithSource:destination:]
  -[HMDBackingStoreTransactionOptions initWithSource:destination:label:mustReplay:mustPush:mustSaveArchiveAtomically:]
  -[HMDBackingStoreTransactionOptions initWithSource:destination:label:mustReplay:mustPush:]
  -[HMDBackingStoreTransactionOptions mustReplay]
  -[HMDBackingStoreTransactionOptions mustPush]
  -[HMDBackingStoreTransactionOptions mustSaveArchiveAtomically]


HMDBackingStoreTransactionActions : HMDBackingStoreTransactionOptions
 @property  BOOL local
 @property  BOOL changed
 @property  BOOL saveToAssistant
 @property  BOOL saveToSharedUserAccount
 @property  HMDBackingStore *backingStore
 @property  NSMutableDictionary *userInfo

  // class methods
  +[HMDBackingStoreTransactionActions logCategory]

  // instance methods
  -[HMDBackingStoreTransactionActions changed]
  -[HMDBackingStoreTransactionActions local]
  -[HMDBackingStoreTransactionActions logIdentifier]
  -[HMDBackingStoreTransactionActions userInfo]
  -[HMDBackingStoreTransactionActions .cxx_destruct]
  -[HMDBackingStoreTransactionActions setBackingStore:]
  -[HMDBackingStoreTransactionActions backingStore]
  -[HMDBackingStoreTransactionActions initWithBackingStore:options:]
  -[HMDBackingStoreTransactionActions markLocalChanged]
  -[HMDBackingStoreTransactionActions markChanged]
  -[HMDBackingStoreTransactionActions markSaveToAssistant]
  -[HMDBackingStoreTransactionActions markSaveToSharedUserAccount]
  -[HMDBackingStoreTransactionActions addPostApplyActionUsingBlock:]
  -[HMDBackingStoreTransactionActions addPostApplyActionIfNotPresent:usingBlock:]
  -[HMDBackingStoreTransactionActions invokePostApplyActions]
  -[HMDBackingStoreTransactionActions saveToAssistant]
  -[HMDBackingStoreTransactionActions saveToSharedUserAccount]


HMDEventTriggerDevice : HMFObject
 @property  HMDDevice *device
 @property  BOOL currentDevice

  // instance methods
  -[HMDEventTriggerDevice isCurrentDevice]
  -[HMDEventTriggerDevice .cxx_destruct]
  -[HMDEventTriggerDevice device]
  -[HMDEventTriggerDevice isEqual:]
  -[HMDEventTriggerDevice initWithCurrentDeviceForHome:]
  -[HMDEventTriggerDevice initWithDevice:forHome:]


HMDPrimaryResidentCapabilitiesAggregator : NSObject <HMEEventConsumer, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPrimaryResidentCapabilitiesAggregator logCategory]

  // instance methods
  -[HMDPrimaryResidentCapabilitiesAggregator didReceiveEvent:topic:]
  -[HMDPrimaryResidentCapabilitiesAggregator logIdentifier]
  -[HMDPrimaryResidentCapabilitiesAggregator .cxx_destruct]
  -[HMDPrimaryResidentCapabilitiesAggregator didReceiveCachedEvent:topic:source:]
  -[HMDPrimaryResidentCapabilitiesAggregator startIfPrimaryResident]
  -[HMDPrimaryResidentCapabilitiesAggregator handlePrimaryResidentIsCurrentDeviceChangeNotification:]
  -[HMDPrimaryResidentCapabilitiesAggregator initWithDataSource:delegate:queue:notificationCenter:homeUUID:accessories:]
  -[HMDPrimaryResidentCapabilitiesAggregator didAddAccessory:]
  -[HMDPrimaryResidentCapabilitiesAggregator didRemoveAccessory:]
  -[HMDPrimaryResidentCapabilitiesAggregator accessoryCapabilitiesForAccessory:ifDifferentFrom:]
  -[HMDPrimaryResidentCapabilitiesAggregator residentCapabilitiesForAccessory:ifDifferentFrom:]
  -[HMDPrimaryResidentCapabilitiesAggregator publicPairingIdentityForAccessory:ifDifferentFrom:]


HMDCameraMediaConfigGenerator : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraMediaConfigGenerator logCategory]

  // instance methods
  -[HMDCameraMediaConfigGenerator extractSelectedConfigFromProtocolParameters:videoStreamConfig:audioStreamConfig:]
  -[HMDCameraMediaConfigGenerator _loadAVCAudioStreamConfig:protocolParameters:]
  -[HMDCameraMediaConfigGenerator _loadAVCVideoStreamConfig:protocolParameters:]
  -[HMDCameraMediaConfigGenerator extractReselectedConfigFromVideoTier:videoStreamConfig:]
  -[HMDCameraMediaConfigGenerator _loadConfig:sendSrtpParameters:receiveSrtpParameters:]
  -[HMDCameraMediaConfigGenerator _loadConfig:cipherCuite:]
  -[HMDCameraMediaConfigGenerator _loadMiscConfig:]


HMDAppleMediaAccessorySetupLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *role
 @property  NSDate *setupStartTime
 @property  NSDate *setupEndTime
 @property  NSDate *configurationEndTime
 @property  NSError *setupSessionError
 @property  NSString *category
 @property  NSNumber *retryCount
 @property  NSDate *firstSettingTime
 @property  NSDate *languageSettingTime

  // class methods
  +[HMDAppleMediaAccessorySetupLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDAppleMediaAccessorySetupLogEvent eventName]
  -[HMDAppleMediaAccessorySetupLogEvent role]
  -[HMDAppleMediaAccessorySetupLogEvent retryCount]
  -[HMDAppleMediaAccessorySetupLogEvent category]
  -[HMDAppleMediaAccessorySetupLogEvent .cxx_destruct]
  -[HMDAppleMediaAccessorySetupLogEvent serializedEvent]
  -[HMDAppleMediaAccessorySetupLogEvent initWithRole:setupStartTime:setupEndTime:configurationEndTime:setupSessionError:category:retryCount:firstSettingTime:languageSettingTime:]
  -[HMDAppleMediaAccessorySetupLogEvent setupStartTime]
  -[HMDAppleMediaAccessorySetupLogEvent setupEndTime]
  -[HMDAppleMediaAccessorySetupLogEvent configurationEndTime]
  -[HMDAppleMediaAccessorySetupLogEvent setupSessionError]
  -[HMDAppleMediaAccessorySetupLogEvent firstSettingTime]
  -[HMDAppleMediaAccessorySetupLogEvent languageSettingTime]


HMDSnapshotCompletionTimer : HMFTimer
 @property  HMDSnapshotSession *snapshotSession

  // instance methods
  -[HMDSnapshotCompletionTimer .cxx_destruct]
  -[HMDSnapshotCompletionTimer initWithSnapshotSession:timer:]
  -[HMDSnapshotCompletionTimer snapshotSession]


HMDLogEventAccessoryFirmwareUpdateEventAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager

  // class methods
  +[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer .cxx_destruct]
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer eventCountersManager]
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventAccessoryFirmwareUpdateEventAnalyzer initWithEventCountersManager:]


HMDAddActionSetLogEvent : HMMHomeLogEvent
 @property  NSString *actionSetType

  // instance methods
  -[HMDAddActionSetLogEvent actionSetType]
  -[HMDAddActionSetLogEvent .cxx_destruct]
  -[HMDAddActionSetLogEvent initWithActionSetType:homeUUID:]


HMDHomeManagerObjectLookup : HMDObjectLookup
 @property  HMDHomeManager *homeManager

  // class methods
  +[HMDHomeManagerObjectLookup logCategory]

  // instance methods
  -[HMDHomeManagerObjectLookup initWithHomeManager:]
  -[HMDHomeManagerObjectLookup .cxx_destruct]
  -[HMDHomeManagerObjectLookup homeManager]
  -[HMDHomeManagerObjectLookup setHomeManager:]
  -[HMDHomeManagerObjectLookup scanObjects]
  -[HMDHomeManagerObjectLookup _scanHomes]
  -[HMDHomeManagerObjectLookup _scanCloudZones]
  -[HMDHomeManagerObjectLookup _scanAccounts]


HMDUserPresenceFeedSession : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSString *logIdentifierString
 @property  <HMDUserPresenceFeedSessionDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *targetUUID
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDUser *user
 @property  HMUserPresenceAuthorization *presenceAuthStatus
 @property  HMUserPresenceCompute *presenceComputeStatus
 @property  HMDUserPresenceRegion *presenceRegionStatus
 @property  HMDUserPresenceUpdateReason *reason
 @property  NSDate *statusChangeDate
 @property  NSUUID *sessionID
 @property  HMDUserPresenceFeedRetryTimer *statusUpdateRetryTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserPresenceFeedSession logCategory]

  // instance methods
  -[HMDUserPresenceFeedSession send]
  -[HMDUserPresenceFeedSession timerDidFire:]
  -[HMDUserPresenceFeedSession logIdentifier]
  -[HMDUserPresenceFeedSession sessionID]
  -[HMDUserPresenceFeedSession workQueue]
  -[HMDUserPresenceFeedSession delegate]
  -[HMDUserPresenceFeedSession attributeDescriptions]
  -[HMDUserPresenceFeedSession dealloc]
  -[HMDUserPresenceFeedSession user]
  -[HMDUserPresenceFeedSession .cxx_destruct]
  -[HMDUserPresenceFeedSession reason]
  -[HMDUserPresenceFeedSession _send]
  -[HMDUserPresenceFeedSession messageDispatcher]
  -[HMDUserPresenceFeedSession setReason:]
  -[HMDUserPresenceFeedSession targetUUID]
  -[HMDUserPresenceFeedSession presenceAuthStatus]
  -[HMDUserPresenceFeedSession presenceComputeStatus]
  -[HMDUserPresenceFeedSession presenceRegionStatus]
  -[HMDUserPresenceFeedSession initWithDelegate:workQueue:targetUUID:messageDispatcher:user:presenceAuthStatus:presenceComputeStatus:presenceRegionStatus:reason:]
  -[HMDUserPresenceFeedSession _handleStatusUpdateMessageError:responseTime:]
  -[HMDUserPresenceFeedSession _callDelegate]
  -[HMDUserPresenceFeedSession statusChangeDate]
  -[HMDUserPresenceFeedSession statusUpdateRetryTimer]
  -[HMDUserPresenceFeedSession setStatusUpdateRetryTimer:]
  -[HMDUserPresenceFeedSession logIdentifierString]
  -[HMDUserPresenceFeedSession setLogIdentifierString:]


HMDDoorbellBulletinUtilities : HMFObject <HMFLogging, HMDDoorbellBulletinUtilities>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDoorbellBulletinUtilities logCategory]
  +[HMDDoorbellBulletinUtilities localizedDoorbellMessageForSignificantEvents:]
  +[HMDDoorbellBulletinUtilities localizedAudioAccessoryAnnounceMessageForSignificantEvents:]
  +[HMDDoorbellBulletinUtilities _localizedDoorbellMessageForSignificantEvents:forAudioAccessory:]
  +[HMDDoorbellBulletinUtilities localizedMessageForCharacteristic:]
  +[HMDDoorbellBulletinUtilities _significantEventsWithinTimeWindowOfDoorbellPress:forCameraProfile:]
  +[HMDDoorbellBulletinUtilities significantEventsRelevantToDoorbellPress:forCameraProfile:]
  +[HMDDoorbellBulletinUtilities faceClassificationsNearDateOfDoorbellPress:forCameraProfile:]
  +[HMDDoorbellBulletinUtilities clipUUIDsForCoalesceableSignificantEvents:]


HMDLogEventUserActivityAnalyzer : HMDHouseholdActivityLogEventContributor <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCounterGroup *counterGroup
 @property  HMDTimeBasedFlagsManager *flagsManager

  // class methods
  +[HMDLogEventUserActivityAnalyzer logCategory]
  +[HMDLogEventUserActivityAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventUserActivityAnalyzer .cxx_destruct]
  -[HMDLogEventUserActivityAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventUserActivityAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventUserActivityAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventUserActivityAnalyzer initWithEventCountersManager:flagsManager:dateProvider:]
  -[HMDLogEventUserActivityAnalyzer _handleReadWriteLogEvent:]
  -[HMDLogEventUserActivityAnalyzer updateLinkTypeActivityCountsForReadWriteLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleAccessoryPairingLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleAddActionSetLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleAddTriggerLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleActionSetRunLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleCameraStreamLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _handleCameraClipRequestLogEvent:]
  -[HMDLogEventUserActivityAnalyzer _isUserSource:]
  -[HMDLogEventUserActivityAnalyzer _isTriggerSource:]
  -[HMDLogEventUserActivityAnalyzer markActiveForEventName:logEvent:]
  -[HMDLogEventUserActivityAnalyzer populateLogEvent:forHomeWithUUID:associatedToDate:]
  -[HMDLogEventUserActivityAnalyzer contributeLogEvent:toSerializedMetric:]
  -[HMDLogEventUserActivityAnalyzer deserializeLogEvent:fromSerializedMetric:]
  -[HMDLogEventUserActivityAnalyzer contributeLogEvent:toCoreAnalyticsEvent:]
  -[HMDLogEventUserActivityAnalyzer coalesceLogEvent:fromSourceEvent:]
  -[HMDLogEventUserActivityAnalyzer finishCoalescingLogEvent:]
  -[HMDLogEventUserActivityAnalyzer flagsManager]
  -[HMDLogEventUserActivityAnalyzer counterGroup]


HMDUnassociatedMediaAccessory : HMDUnassociatedAccessory <HMFLogging>
 @property  HMDAccessoryAdvertisement *advertisement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUnassociatedMediaAccessory logCategory]

  // instance methods
  -[HMDUnassociatedMediaAccessory dumpDescription]
  -[HMDUnassociatedMediaAccessory logIdentifier]
  -[HMDUnassociatedMediaAccessory .cxx_destruct]
  -[HMDUnassociatedMediaAccessory setAdvertisement:]
  -[HMDUnassociatedMediaAccessory transportTypes]
  -[HMDUnassociatedMediaAccessory isEqual:]
  -[HMDUnassociatedMediaAccessory advertisement]
  -[HMDUnassociatedMediaAccessory associationOptions]
  -[HMDUnassociatedMediaAccessory initWithIdentifier:name:category:messageDispatcher:]
  -[HMDUnassociatedMediaAccessory addTransactionForHome:configurationAppIdentifier:]
  -[HMDUnassociatedMediaAccessory modelForChangeType:uuid:parentUUID:]
  -[HMDUnassociatedMediaAccessory initWithAdvertisement:messageDispatcher:]
  -[HMDUnassociatedMediaAccessory updateAdvertisementData:]
  -[HMDUnassociatedMediaAccessory isHAPAirPlay2Accessory]


HMFObjectCacheHMDRemoteMessagePolicy : NSObject
  // class methods
  +[HMFObjectCacheHMDRemoteMessagePolicy cachedInstanceForRemoteMessagePolicy:]


HMDRemoteMessagePolicy : HMFMessagePolicy <NSMutableCopying>
 @property  BOOL requiresSecureMessage
 @property  BOOL allowsAnonymousMessage
 @property  BOOL requiresAccountMessage
 @property  unsigned long transportRestriction
 @property  unsigned long roles

  // class methods
  +[HMDRemoteMessagePolicy defaultPolicy]
  +[HMDRemoteMessagePolicy remoteMessagePolicyWithRequiresSecureMessage:allowsAnonymousMessage:requiresAccountMessage:transportRestriction:roles:]
  +[HMDRemoteMessagePolicy defaultSecurePolicy]

  // instance methods
  -[HMDRemoteMessagePolicy roles]
  -[HMDRemoteMessagePolicy copyWithZone:]
  -[HMDRemoteMessagePolicy mutableCopyWithZone:]
  -[HMDRemoteMessagePolicy isEqual:]
  -[HMDRemoteMessagePolicy init]
  -[HMDRemoteMessagePolicy __initWithRequiresSecureMessage:allowsAnonymousMessage:requiresAccountMessage:transportRestriction:roles:]
  -[HMDRemoteMessagePolicy requiresSecureMessage]
  -[HMDRemoteMessagePolicy allowsAnonymousMessage]
  -[HMDRemoteMessagePolicy requiresAccountMessage]
  -[HMDRemoteMessagePolicy transportRestriction]


HMDMutableRemoteMessagePolicy : HMDRemoteMessagePolicy
 @property  BOOL requiresSecureMessage
 @property  BOOL allowsAnonymousMessage
 @property  BOOL requiresAccountMessage
 @property  unsigned long transportRestriction
 @property  unsigned long roles

  // class methods
  +[HMDMutableRemoteMessagePolicy remoteMessagePolicyWithRequiresSecureMessage:allowsAnonymousMessage:requiresAccountMessage:transportRestriction:roles:]

  // instance methods
  -[HMDMutableRemoteMessagePolicy copyWithZone:]
  -[HMDMutableRemoteMessagePolicy setRoles:]
  -[HMDMutableRemoteMessagePolicy setRequiresSecureMessage:]
  -[HMDMutableRemoteMessagePolicy setAllowsAnonymousMessage:]
  -[HMDMutableRemoteMessagePolicy setRequiresAccountMessage:]
  -[HMDMutableRemoteMessagePolicy setTransportRestriction:]


HMDAccessorySettingEventsGenerated : NSObject
  // class methods
  +[HMDAccessorySettingEventsGenerated allKeyPaths]
  +[HMDAccessorySettingEventsGenerated keyPathMap]
  +[HMDAccessorySettingEventsGenerated topicsForAccessoryUUID:homeUUID:]


HMDPendingSocketRequest : NSObject
 @property  NSString *applicationProtocolName
 @property  @? completion

  // instance methods
  -[HMDPendingSocketRequest completion]
  -[HMDPendingSocketRequest .cxx_destruct]
  -[HMDPendingSocketRequest initWithApplicationProtocolName:completion:]
  -[HMDPendingSocketRequest applicationProtocolName]


HMDDataStreamController : NSObject <HMDDataStreamHAPSetupOperationDelegate, HMFLogging, HMFTimerDelegate, HMDDataStreamDelegate, HMDDataStreamSocketController>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  HMDService *transferManagementService
 @property  HMDDataStream *defaultDataStream
 @property  NSMutableArray *pendingSocketRequests
 @property  HMDDataStreamSetupOperation *setupInProgress
 @property  @? dataStreamFactory
 @property  NSString *logIdentifier
 @property  BOOL supportsDataStreamOverTCP
 @property  BOOL supportsDataStreamOverHAP
 @property  unsigned long maxControllerTransportMTU
 @property  HMFTimer *idleTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDataStreamController logCategory]

  // instance methods
  -[HMDDataStreamController accessory]
  -[HMDDataStreamController timerDidFire:]
  -[HMDDataStreamController idleTimer]
  -[HMDDataStreamController logIdentifier]
  -[HMDDataStreamController setAccessory:]
  -[HMDDataStreamController workQueue]
  -[HMDDataStreamController setWorkQueue:]
  -[HMDDataStreamController .cxx_destruct]
  -[HMDDataStreamController setIdleTimer:]
  -[HMDDataStreamController registerForNotifications]
  -[HMDDataStreamController invalidate]
  -[HMDDataStreamController _stopIdleTimer]
  -[HMDDataStreamController _startIdleTimer]
  -[HMDDataStreamController addBulkSendListener:fileType:]
  -[HMDDataStreamController removeBulkSendListener:]
  -[HMDDataStreamController transferManagementService]
  -[HMDDataStreamController dataStreamSetupOperation:didSucceedWithTransport:sessionEncryption:]
  -[HMDDataStreamController dataStreamSetupOperation:didFailWithError:]
  -[HMDDataStreamController dataStreamInitializationSetupOperation:didCompleteSupportReadWithStatus:]
  -[HMDDataStreamController setMaxControllerTransportMTU:]
  -[HMDDataStreamController maxControllerTransportMTU]
  -[HMDDataStreamController handleAccessoryConnected:]
  -[HMDDataStreamController handleAccessoryDisconnected:]
  -[HMDDataStreamController dataStreamDidOpen:]
  -[HMDDataStreamController dataStreamDidClose:]
  -[HMDDataStreamController dataStream:didFailWithError:]
  -[HMDDataStreamController dataStreamDidUpdateActiveStatus:]
  -[HMDDataStreamController dataStreamDidReceiveRawFrame:]
  -[HMDDataStreamController openStreamSocketWithApplicationProtocol:completion:]
  -[HMDDataStreamController initWithAccessory:service:workQueue:]
  -[HMDDataStreamController initWithAccessory:service:workQueue:dataStreamFactory:]
  -[HMDDataStreamController deRegisterFromNotifications]
  -[HMDDataStreamController _resetTransportInfo]
  -[HMDDataStreamController handleAccessoryConnected]
  -[HMDDataStreamController _isDataStreamConfigurationValid]
  -[HMDDataStreamController _readRequiredTransportCharacteristicsIfNeededWithCompletion:]
  -[HMDDataStreamController _handleAccessoryConnected]
  -[HMDDataStreamController _getActiveProtocolWithName:]
  -[HMDDataStreamController canAcceptBulkSendListeners]
  -[HMDDataStreamController sendTargetControlWhoAmIWithIdentifier:]
  -[HMDDataStreamController _processPendingSocketRequests]
  -[HMDDataStreamController _failPendingSocketRequestsWithError:]
  -[HMDDataStreamController _getStreamProtocol]
  -[HMDDataStreamController _createStreamSocketWithStreamProtocol:applicationProtocolName:completion:]
  -[HMDDataStreamController _isDataStreamCapable]
  -[HMDDataStreamController setupRequiresCharactertisticReads]
  -[HMDDataStreamController _initiateStreamSetup]
  -[HMDDataStreamController _cancelStreamTransportWithError:]
  -[HMDDataStreamController _createBulkStreamProtocol]
  -[HMDDataStreamController _resetDefaultDataStream]
  -[HMDDataStreamController openBulkSendSessionForFileType:reason:metadata:queue:callback:]
  -[HMDDataStreamController setTransferManagementService:]
  -[HMDDataStreamController defaultDataStream]
  -[HMDDataStreamController setDefaultDataStream:]
  -[HMDDataStreamController pendingSocketRequests]
  -[HMDDataStreamController setPendingSocketRequests:]
  -[HMDDataStreamController setupInProgress]
  -[HMDDataStreamController setSetupInProgress:]
  -[HMDDataStreamController dataStreamFactory]
  -[HMDDataStreamController supportsDataStreamOverTCP]
  -[HMDDataStreamController setSupportsDataStreamOverTCP:]
  -[HMDDataStreamController supportsDataStreamOverHAP]
  -[HMDDataStreamController setSupportsDataStreamOverHAP:]


_HMDSecureRemoteQueuedMessage : HMFObject <HMFObject>
 @property  HMDRemoteMessage *message
 @property  HMFTimer *timer
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_HMDSecureRemoteQueuedMessage propertyDescription]
  -[_HMDSecureRemoteQueuedMessage .cxx_destruct]
  -[_HMDSecureRemoteQueuedMessage timer]
  -[_HMDSecureRemoteQueuedMessage initWithMessage:]
  -[_HMDSecureRemoteQueuedMessage shortDescription]
  -[_HMDSecureRemoteQueuedMessage message]
  -[_HMDSecureRemoteQueuedMessage init]


HMDSecureRemoteSession : HMFMessageTransport <HMDSecureRemoteStreamDelegate, HMFLogging, HMFTimerDelegate, HMDSecureRemoteSession>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMDRemoteDeviceMonitor *deviceMonitor
 @property  HMDAccountRegistry *accountRegistry
 @property  unsigned long maximumRemoteStreams
 @property  NSMutableArray *pendingMessages
 @property  NSMutableArray *clientStreams
 @property  NSMutableArray *serverStreams
 @property  long long state
 @property  BOOL reachable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDDevice *device
 @property  <HMFMessageTransportDelegate> *delegate

  // class methods
  +[HMDSecureRemoteSession logCategory]
  +[HMDSecureRemoteSession isSecureRemoteSessionMessage:]

  // instance methods
  -[HMDSecureRemoteSession dumpState]
  -[HMDSecureRemoteSession openWithCompletionHandler:]
  -[HMDSecureRemoteSession timerDidFire:]
  -[HMDSecureRemoteSession messageTransport:didReceiveMessage:]
  -[HMDSecureRemoteSession _closeWithError:]
  -[HMDSecureRemoteSession logIdentifier]
  -[HMDSecureRemoteSession sendMessage:completionHandler:]
  -[HMDSecureRemoteSession clientQueue]
  -[HMDSecureRemoteSession isReachable]
  -[HMDSecureRemoteSession state]
  -[HMDSecureRemoteSession dealloc]
  -[HMDSecureRemoteSession close]
  -[HMDSecureRemoteSession .cxx_destruct]
  -[HMDSecureRemoteSession setReachable:]
  -[HMDSecureRemoteSession device]
  -[HMDSecureRemoteSession pendingMessages]
  -[HMDSecureRemoteSession init]
  -[HMDSecureRemoteSession setState:]
  -[HMDSecureRemoteSession handleDeviceIsReachable:]
  -[HMDSecureRemoteSession handleDeviceIsNotReachable:]
  -[HMDSecureRemoteSession secureRemoteStream:receivedRequestToSendMessage:]
  -[HMDSecureRemoteSession secureRemoteStreamIsIdle:]
  -[HMDSecureRemoteSession secureRemoteStream:didCloseWithError:]
  -[HMDSecureRemoteSession receivedSecureMessage:fromDevice:fromTransport:]
  -[HMDSecureRemoteSession initWithDevice:deviceMonitor:accountRegistry:]
  -[HMDSecureRemoteSession _queueMessage:]
  -[HMDSecureRemoteSession _dequeMessage]
  -[HMDSecureRemoteSession _handleSecureClientMessage:fromDevice:transport:]
  -[HMDSecureRemoteSession _handleSecureServerMessage:fromDevice:transport:]
  -[HMDSecureRemoteSession _handleStreamInvalidationMessage:]
  -[HMDSecureRemoteSession _clientStreamWithIdentiifer:]
  -[HMDSecureRemoteSession _clientStreamForMessage:]
  -[HMDSecureRemoteSession _serverStreamWithIdentifier:]
  -[HMDSecureRemoteSession _openClientStreamWithCompletionHandler:]
  -[HMDSecureRemoteSession _closeClientStream:error:]
  -[HMDSecureRemoteSession _openServerStreamWithIdentifier:completionHandler:]
  -[HMDSecureRemoteSession _closeServerStream:error:]
  -[HMDSecureRemoteSession deviceMonitor]
  -[HMDSecureRemoteSession accountRegistry]
  -[HMDSecureRemoteSession maximumRemoteStreams]
  -[HMDSecureRemoteSession setMaximumRemoteStreams:]
  -[HMDSecureRemoteSession clientStreams]
  -[HMDSecureRemoteSession serverStreams]


AWDHomeKitCameraStreamMessaging : PBCodable <NSCopying>
 @property  BOOL hasReceivedNegotiationRequest
 @property  unsigned int receivedNegotiationRequest
 @property  BOOL hasSentNegotiationRequest
 @property  unsigned int sentNegotiationRequest
 @property  BOOL hasSentNegotiationResponse
 @property  unsigned int sentNegotiationResponse
 @property  BOOL hasReceivedStartRequest
 @property  unsigned int receivedStartRequest
 @property  BOOL hasSentStartRequest
 @property  unsigned int sentStartRequest
 @property  BOOL hasSentStartResponse
 @property  unsigned int sentStartResponse
 @property  BOOL hasSentConnSetup
 @property  unsigned int sentConnSetup
 @property  BOOL hasReceivedConnSetup
 @property  unsigned int receivedConnSetup

  // instance methods
  -[AWDHomeKitCameraStreamMessaging copyTo:]
  -[AWDHomeKitCameraStreamMessaging mergeFrom:]
  -[AWDHomeKitCameraStreamMessaging dictionaryRepresentation]
  -[AWDHomeKitCameraStreamMessaging copyWithZone:]
  -[AWDHomeKitCameraStreamMessaging readFrom:]
  -[AWDHomeKitCameraStreamMessaging writeTo:]
  -[AWDHomeKitCameraStreamMessaging isEqual:]
  -[AWDHomeKitCameraStreamMessaging setReceivedNegotiationRequest:]
  -[AWDHomeKitCameraStreamMessaging setHasReceivedNegotiationRequest:]
  -[AWDHomeKitCameraStreamMessaging hasReceivedNegotiationRequest]
  -[AWDHomeKitCameraStreamMessaging setSentNegotiationRequest:]
  -[AWDHomeKitCameraStreamMessaging setHasSentNegotiationRequest:]
  -[AWDHomeKitCameraStreamMessaging hasSentNegotiationRequest]
  -[AWDHomeKitCameraStreamMessaging setSentNegotiationResponse:]
  -[AWDHomeKitCameraStreamMessaging setHasSentNegotiationResponse:]
  -[AWDHomeKitCameraStreamMessaging hasSentNegotiationResponse]
  -[AWDHomeKitCameraStreamMessaging setReceivedStartRequest:]
  -[AWDHomeKitCameraStreamMessaging setHasReceivedStartRequest:]
  -[AWDHomeKitCameraStreamMessaging hasReceivedStartRequest]
  -[AWDHomeKitCameraStreamMessaging setSentStartRequest:]
  -[AWDHomeKitCameraStreamMessaging setHasSentStartRequest:]
  -[AWDHomeKitCameraStreamMessaging hasSentStartRequest]
  -[AWDHomeKitCameraStreamMessaging setSentStartResponse:]
  -[AWDHomeKitCameraStreamMessaging setHasSentStartResponse:]
  -[AWDHomeKitCameraStreamMessaging hasSentStartResponse]
  -[AWDHomeKitCameraStreamMessaging setSentConnSetup:]
  -[AWDHomeKitCameraStreamMessaging setHasSentConnSetup:]
  -[AWDHomeKitCameraStreamMessaging hasSentConnSetup]
  -[AWDHomeKitCameraStreamMessaging setReceivedConnSetup:]
  -[AWDHomeKitCameraStreamMessaging setHasReceivedConnSetup:]
  -[AWDHomeKitCameraStreamMessaging hasReceivedConnSetup]
  -[AWDHomeKitCameraStreamMessaging receivedNegotiationRequest]
  -[AWDHomeKitCameraStreamMessaging sentNegotiationRequest]
  -[AWDHomeKitCameraStreamMessaging sentNegotiationResponse]
  -[AWDHomeKitCameraStreamMessaging receivedStartRequest]
  -[AWDHomeKitCameraStreamMessaging sentStartRequest]
  -[AWDHomeKitCameraStreamMessaging sentStartResponse]
  -[AWDHomeKitCameraStreamMessaging sentConnSetup]
  -[AWDHomeKitCameraStreamMessaging receivedConnSetup]


AWDHomeKitResetConfiguration : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasErrorCode
 @property  int errorCode

  // instance methods
  -[AWDHomeKitResetConfiguration hasErrorCode]
  -[AWDHomeKitResetConfiguration setErrorCode:]
  -[AWDHomeKitResetConfiguration errorCode]
  -[AWDHomeKitResetConfiguration setTimestamp:]
  -[AWDHomeKitResetConfiguration copyTo:]
  -[AWDHomeKitResetConfiguration setHasErrorCode:]
  -[AWDHomeKitResetConfiguration mergeFrom:]
  -[AWDHomeKitResetConfiguration setHasTimestamp:]
  -[AWDHomeKitResetConfiguration dictionaryRepresentation]
  -[AWDHomeKitResetConfiguration hasTimestamp]
  -[AWDHomeKitResetConfiguration copyWithZone:]
  -[AWDHomeKitResetConfiguration timestamp]
  -[AWDHomeKitResetConfiguration readFrom:]
  -[AWDHomeKitResetConfiguration writeTo:]
  -[AWDHomeKitResetConfiguration isEqual:]


ScanContext : HMFObject

BTLEScanner : HMFObject <HMFTimerDelegate, HAPBTLECentralManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // instance methods
  -[BTLEScanner timerDidFire:]
  -[BTLEScanner .cxx_destruct]
  -[BTLEScanner _stopTimer]
  -[BTLEScanner init]
  -[BTLEScanner _flushQueue]
  -[BTLEScanner didUpdateBTLEState:]
  -[BTLEScanner _checkCanScan]
  -[BTLEScanner _stopScan]


HMDHAPAccessory : HMDAccessory <HMDSiriEndpointProfileMetricsDispatcherDataSource, HMDSiriEndpointProfileMetricsDispatcherFactory, CHIPAccessoryServerDelegate, HMDAccessoryMinimumUserPrivilegeCapable, HMDServiceOwner, HAPAccessoryDelegate, HMFTimerDelegate, HAPAccessoryServerNotification, HMDAccessoryUserManagement>
 @property  HMDWiFiManagementController *wiFiManagementController
 @property  HMDAccessoryFirmwareUpdateProfile *firmwareUpdateProfile
 @property  BOOL automaticThirdPartyAccessorySoftwareUpdateEnabled
 @property  unsigned long identityType
 @property  BOOL isAppleAccessory
 @property  BOOL hasResidentWithFirmwareUpdatesSupport
 @property  HMDAccessoryDiagnosticsManager *diagnosticsManager
 @property  HMDNetworkRouterController *networkRouterController
 @property  HMDNetworkRouterProfile *networkRouterProfile
 @property  HMDNetworkRouterSatelliteProfile *networkRouterSatelliteProfile
 @property  NSData *nfcReaderIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  HMDSiriEndpointProfile *siriEndpointProfile
 @property  BOOL isCertifiedForSiriEndpoint
 @property  BOOL supportsSiriEndpoint
 @property  BOOL hasSiriEndpointService
 @property  BOOL hasSiriSettingsService
 @property  BOOL supportsSiriEndpointOnBoarding
 @property  NSSet *lightProfiles
 @property  HMCameraUserNotificationSettings *cameraProfileNotificationSettings
 @property  BOOL supportsCameraRecordingFeature
 @property  BOOL supportsSiri
 @property  BOOL hasTelevisionService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned short threadCapabilities
 @property  unsigned short threadStatus
 @property  BOOL threadActiveTransport
 @property  unsigned short metric_threadCapabilities
 @property  HMDMediaProfile *mediaProfile
 @property  BOOL hasSmartSpeakerService
 @property  <HMDDataStreamSocketController> *dataStreamSocketController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDLowPowerModeProfile *lpmProfile
 @property  NSString *uniqueIdentifier
 @property  BOOL paired
 @property  unsigned long activationAttempts
 @property  unsigned long pairingAttempts
 @property  NSNumber *accessoryFlags
 @property  long long certificationStatus
 @property  NSNumber *backedOffStateNumber
 @property  HMFTimer *accessoryDiscoveryBackoffTimer
 @property  HMFTimer *accessoryKeyRefreshTimer
 @property  NSData *broadcastKey
 @property  NSNumber *keyUpdatedStateNumber
 @property  NSDate *keyUpdatedTime
 @property  unsigned char keyGenerationType
 @property  BOOL keyGenerationInProgress
 @property  NSSet *identifiersForBridgedAccessories
 @property  HMDAccessoryAdvertisement *accessoryAdvertisement
 @property  NSNumber *hasOnboardedForNaturalLighting
 @property  long long communicationProtocol
 @property  unsigned long siriEndpointCapabilities
 @property  NSMutableSet *activeSessionRestoreClients
 @property  HMFTimer *sessionRestoreTimer
 @property  double lastLinkChangeSessionCheckTime
 @property  unsigned long lastSessionStatus
 @property  NSArray *targetUUIDs
 @property  BOOL hardwareSupport
 @property  HMDTargetControllerManager *targetControllerManager
 @property  HMDAccessorySymptomHandler *symptomsHandler
 @property  NSNumber *sleepInterval
 @property  BOOL supportsAccessCode
 @property  BOOL supportsWalletKey
 @property  NSNumber *internalEnhancedAuthConfigNumber
 @property  NSNumber *internalEnhancedAuthMethod
 @property  HMDUser *cachedRemovedUser
 @property  HMDSiriEndpointProfileMetricsDispatcher *siriEndpointProfileMetricsDispatcher
 @property  NSString *serializedIdentifier
 @property  NSMutableArray *discoveredServices
 @property  NSData *publicKey
 @property  NSString *pairingUsername
 @property  HMDDataStreamController *dataStreamController
 @property  HMDNetworkRouterController *networkRouterController
 @property  NSData *setupHash
 @property  NSNumber *wiFiTransportCapabilities
 @property  HMDWiFiManagementController *wiFiManagementController
 @property  HMDPendingCharacteristic *pendingPowerOn
 @property  HMDAccessoryDiagnosticsManager *diagnosticsManager
 @property  <HMDMessageRouter> *primaryResidentMessageRouter
 @property  HMDDoorbellChimeController *doorbellChimeController
 @property  HMDBulletinBoard *bulletinBoard
 @property  NSMutableArray *powerOnCompletionRoutines
 @property  NSMutableArray *pendingReads
 @property  HMDAccessoryFirmwareUpdateProfile *firmwareUpdateProfile
 @property  HMCameraUserNotificationSettings *cameraProfileNotificationSettings
 @property  unsigned long suspendedState
 @property  BOOL reachableViaBSP
 @property  NSNumber *wakingViaCharacteristicWithIID
 @property  HMSupportedAccessoryDiagnostics *supportedDiagnostics
 @property  HMDHAPMetadata *hapMetadata
 @property  NSNumber *needsOnboarding
 @property  BOOL hasSiriEndpointService
 @property  NSArray *transportInformationInstances
 @property  NSNumber *internalThreadCapabilities
 @property  NSNumber *internalThreadStatus
 @property  NSNumber *internalThreadActive
 @property  unsigned long enhancedAuthMethod
 @property  NSArray *services
 @property  NSSet *serviceTypeUUIDs
 @property  NSSet *initialServiceTypeUUIDs
 @property  HMDService *primaryService
 @property  BOOL clientRegisteredForNotifications
 @property  NSNumber *hapInstanceId
 @property  HMFConnectivityInfo *connectivityInfo
 @property  HMDCameraProfileSettingsManager *cameraProfileSettingsManager
 @property  NSSet *cameraProfiles
 @property  BOOL hasCameraStreamService
 @property  BOOL shouldDisconnectOnIdle
 @property  BOOL shouldAutoDiscoverAccessoryServer
 @property  BOOL supportsHAP
 @property  BOOL supportsCHIP
 @property  NSMutableDictionary *accessCodeCache
 @property  BOOL hasPostedBulletinForAccessCodeOnboarding
 @property  BOOL hasPostedBulletinForWalletKeyOnboarding
 @property  HMDCHIPAccessoryStorage *chipStorage
 @property  HMDAnalyticsHAPServiceData *primaryHAPServiceForAnalytics
 @property  NSArray *hapServicesListForAnalytics
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  BOOL supportsUserManagement
 @property  HMFPairingIdentity *pairingIdentity

  // class methods
  +[HMDHAPAccessory supportsSecureCoding]
  +[HMDHAPAccessory hasMessageReceiverChildren]
  +[HMDHAPAccessory transactionClass]
  +[HMDHAPAccessory getAWDTransportTypeWithLinkType:]
  +[HMDHAPAccessory encodeServices:forXPCCoder:metadata:]
  +[HMDHAPAccessory chipPairingModeActiveDuration]

  // instance methods
  -[HMDHAPAccessory dumpState]
  -[HMDHAPAccessory setPublicKey:]
  -[HMDHAPAccessory eventStoreReadHandle]
  -[HMDHAPAccessory isAppleAccessory]
  -[HMDHAPAccessory supportsHAP]
  -[HMDHAPAccessory timerDidFire:]
  -[HMDHAPAccessory isPrimary]
  -[HMDHAPAccessory supportsAnnounce]
  -[HMDHAPAccessory setUniqueIdentifier:]
  -[HMDHAPAccessory stopScan]
  -[HMDHAPAccessory isPaired]
  -[HMDHAPAccessory logIdentifier]
  -[HMDHAPAccessory sleepInterval]
  -[HMDHAPAccessory _updateReachability]
  -[HMDHAPAccessory isSuspended]
  -[HMDHAPAccessory encodeWithCoder:]
  -[HMDHAPAccessory publicKey]
  -[HMDHAPAccessory services]
  -[HMDHAPAccessory attributeDescriptions]
  -[HMDHAPAccessory dealloc]
  -[HMDHAPAccessory .cxx_destruct]
  -[HMDHAPAccessory supportsUserMediaSettings]
  -[HMDHAPAccessory supportsMultiUser]
  -[HMDHAPAccessory indicateNotificationFromServer:notifyType:withDictionary:]
  -[HMDHAPAccessory pairingIdentity]
  -[HMDHAPAccessory supportsMusicAlarm]
  -[HMDHAPAccessory hasBattery]
  -[HMDHAPAccessory isNotificationEnabled]
  -[HMDHAPAccessory removeSession:]
  -[HMDHAPAccessory supportsPreferredMediaUser]
  -[HMDHAPAccessory shortDescription]
  -[HMDHAPAccessory supportsMessagedHomePodSettings]
  -[HMDHAPAccessory setSleepInterval:]
  -[HMDHAPAccessory addSession:]
  -[HMDHAPAccessory endpointIdentifier]
  -[HMDHAPAccessory name]
  -[HMDHAPAccessory uniqueIdentifier]
  -[HMDHAPAccessory bridge]
  -[HMDHAPAccessory isEqual:]
  -[HMDHAPAccessory urlString]
  -[HMDHAPAccessory init]
  -[HMDHAPAccessory reachabilityDidChange:]
  -[HMDHAPAccessory initWithCoder:]
  -[HMDHAPAccessory supportsDoorbellChime]
  -[HMDHAPAccessory identityType]
  -[HMDHAPAccessory mediaProfile]
  -[HMDHAPAccessory supportedTransports]
  -[HMDHAPAccessory removeTarget:]
  -[HMDHAPAccessory eventTimestamp]
  -[HMDHAPAccessory siriEndpointProfile]
  -[HMDHAPAccessory unconfigure]
  -[HMDHAPAccessory certificationStatus]
  -[HMDHAPAccessory setCertificationStatus:]
  -[HMDHAPAccessory cameraProfiles]
  -[HMDHAPAccessory symptomsHandler]
  -[HMDHAPAccessory _handleStartUpdate:]
  -[HMDHAPAccessory supportsFirmwareUpdate]
  -[HMDHAPAccessory supportsWalletKey]
  -[HMDHAPAccessory supportsCHIP]
  -[HMDHAPAccessory networkRouterProfile]
  -[HMDHAPAccessory _registerForMessages]
  -[HMDHAPAccessory supportsWiFiReconfiguration]
  -[HMDHAPAccessory setSupportsWalletKey:]
  -[HMDHAPAccessory removeUser:completionHandler:]
  -[HMDHAPAccessory isAutomaticThirdPartyAccessorySoftwareUpdateEnabled]
  -[HMDHAPAccessory reachableTransports]
  -[HMDHAPAccessory suspendedState]
  -[HMDHAPAccessory identifiersForBridgedAccessories]
  -[HMDHAPAccessory supportsTargetController]
  -[HMDHAPAccessory setSuspendedState:]
  -[HMDHAPAccessory supportsIdentify]
  -[HMDHAPAccessory setSymptomsHandler:]
  -[HMDHAPAccessory _notifyClientsOfTargetControlSupportUpdate]
  -[HMDHAPAccessory hasOnboardedForNaturalLighting]
  -[HMDHAPAccessory setHasOnboardedForNaturalLighting:]
  -[HMDHAPAccessory supportsDiagnosticsTransfer]
  -[HMDHAPAccessory supportedDiagnostics]
  -[HMDHAPAccessory accessoryFlags]
  -[HMDHAPAccessory setAccessoryFlags:]
  -[HMDHAPAccessory _supportsMediaAccessControl]
  -[HMDHAPAccessory lightProfiles]
  -[HMDHAPAccessory _handleUpdateAssociatedServiceType:]
  -[HMDHAPAccessory primaryService]
  -[HMDHAPAccessory needsOnboarding]
  -[HMDHAPAccessory communicationProtocol]
  -[HMDHAPAccessory supportsSiri]
  -[HMDHAPAccessory _addService:]
  -[HMDHAPAccessory _removeService:]
  -[HMDHAPAccessory addAdvertisement:]
  -[HMDHAPAccessory broadcastKey]
  -[HMDHAPAccessory setBroadcastKey:]
  -[HMDHAPAccessory keyUpdatedTime]
  -[HMDHAPAccessory setKeyUpdatedTime:]
  -[HMDHAPAccessory keyUpdatedStateNumber]
  -[HMDHAPAccessory setKeyUpdatedStateNumber:]
  -[HMDHAPAccessory setupHash]
  -[HMDHAPAccessory isSecuritySessionOpen]
  -[HMDHAPAccessory startPing]
  -[HMDHAPAccessory stopPing]
  -[HMDHAPAccessory updateActiveDisconnectOnIdleTimeout:]
  -[HMDHAPAccessory requestResource:queue:completionHandler:]
  -[HMDHAPAccessory isBLELinkConnected]
  -[HMDHAPAccessory hapInstanceId]
  -[HMDHAPAccessory setShouldDisconnectOnIdle:]
  -[HMDHAPAccessory shouldDisconnectOnIdle]
  -[HMDHAPAccessory setSetupHash:]
  -[HMDHAPAccessory supportsUnreachablePing]
  -[HMDHAPAccessory accessory:didUpdateReachabilityState:]
  -[HMDHAPAccessory accessory:didUpdateConnectionState:]
  -[HMDHAPAccessory messageReceiverChildren]
  -[HMDHAPAccessory transactionObjectUpdated:newValues:message:]
  -[HMDHAPAccessory transactionObjectRemoved:message:]
  -[HMDHAPAccessory modelObjectWithChangeType:version:]
  -[HMDHAPAccessory modelObjectWithChangeType:]
  -[HMDHAPAccessory backingStoreObjects:]
  -[HMDHAPAccessory bulletinBoard]
  -[HMDHAPAccessory handleHomeUserRemovedNotification:]
  -[HMDHAPAccessory _handleUpdatedServicesForWiFiManagementController]
  -[HMDHAPAccessory wiFiManagementController]
  -[HMDHAPAccessory chipStorage]
  -[HMDHAPAccessory configureBulletinNotification]
  -[HMDHAPAccessory _handleCharacteristicWrite:]
  -[HMDHAPAccessory _handleCharacteristicRead:]
  -[HMDHAPAccessory supportsMinimumUserPrivilege]
  -[HMDHAPAccessory handleUpdatedMinimumUserPrivilege:]
  -[HMDHAPAccessory handleUpdatedPassword:]
  -[HMDHAPAccessory eventForwarder]
  -[HMDHAPAccessory supportsSiriEndpointOnBoarding]
  -[HMDHAPAccessory hapMetadata]
  -[HMDHAPAccessory primaryResidentMessageRouter]
  -[HMDHAPAccessory setChipStorage:]
  -[HMDHAPAccessory addUser:completionHandler:]
  -[HMDHAPAccessory pairingsWithCompletionHandler:]
  -[HMDHAPAccessory supportsUserManagement]
  -[HMDHAPAccessory hasResidentWithFirmwareUpdatesSupport]
  -[HMDHAPAccessory firmwareUpdateManager]
  -[HMDHAPAccessory _evaluateAvailableSoftwareUpdate]
  -[HMDHAPAccessory _handleUpdatedServicesForFirmwareUpdateProfile:]
  -[HMDHAPAccessory _startManualUpdateFromBestSuitableDevice:]
  -[HMDHAPAccessory _startUpdateFromCurrentDeviceWithRequest:]
  -[HMDHAPAccessory _startUpdateSessionWithRequest:]
  -[HMDHAPAccessory _handleChangeUpdateSource:]
  -[HMDHAPAccessory _handleRemoveStagedSoftwareUpdate:]
  -[HMDHAPAccessory firmwareUpdateProfile]
  -[HMDHAPAccessory serializedIdentifier]
  -[HMDHAPAccessory initWithTransaction:home:]
  -[HMDHAPAccessory runTransactionWithPreferredMediaUserUUID:selectionType:completion:]
  -[HMDHAPAccessory transportReports]
  -[HMDHAPAccessory transactionWithObjectChangeType:]
  -[HMDHAPAccessory populateModelObject:version:]
  -[HMDHAPAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:]
  -[HMDHAPAccessory _handleUpdatedName:]
  -[HMDHAPAccessory getConfiguredName]
  -[HMDHAPAccessory _renameAccessory:resetName:message:]
  -[HMDHAPAccessory removeAdvertisement:]
  -[HMDHAPAccessory supportsPersonalRequests]
  -[HMDHAPAccessory messageSendPolicy]
  -[HMDHAPAccessory runtimeState]
  -[HMDHAPAccessory _configNumberUpdated]
  -[HMDHAPAccessory supportsNetworkProtection]
  -[HMDHAPAccessory needsAirplayAccess]
  -[HMDHAPAccessory shouldEnableDaemonRelaunch]
  -[HMDHAPAccessory dumpSimpleState]
  -[HMDHAPAccessory handleIdentifyAccessoryMessage:]
  -[HMDHAPAccessory _shouldFilterAccessoryProfile:]
  -[HMDHAPAccessory providesHashRouteID]
  -[HMDHAPAccessory addHostedAccessory:]
  -[HMDHAPAccessory removeHostedAccessory:]
  -[HMDHAPAccessory supportsSoftwareUpdate]
  -[HMDHAPAccessory requiresRemovalOnPrimaryResident]
  -[HMDHAPAccessory startReachabilityCheck]
  -[HMDHAPAccessory stopReachabilityCheck]
  -[HMDHAPAccessory _handleUpdatedServicesForDiagnosticsManager:]
  -[HMDHAPAccessory _createDiagnosticsManager:]
  -[HMDHAPAccessory _destroyDiagnosticsManager]
  -[HMDHAPAccessory diagnosticsManager]
  -[HMDHAPAccessory canAcceptBulkSendListeners]
  -[HMDHAPAccessory sendTargetControlWhoAmIWithIdentifier:]
  -[HMDHAPAccessory openBulkSendSessionForFileType:reason:metadata:queue:callback:]
  -[HMDHAPAccessory _stopScan]
  -[HMDHAPAccessory initializeBTLEScan]
  -[HMDHAPAccessory initiateScan:]
  -[HMDHAPAccessory scanningCompleteWithAccessoryFound:suspended:]
  -[HMDHAPAccessory reachabilityDidChangeUnreachable:]
  -[HMDHAPAccessory routeUpdatePreferredMediaUser:]
  -[HMDHAPAccessory _handleRenameService:]
  -[HMDHAPAccessory _handleUpdateCharacteristicAuthorizationDataMessage:]
  -[HMDHAPAccessory _handleConfigureTargets:]
  -[HMDHAPAccessory _handleUpdateMediaSourceDisplayOrder:]
  -[HMDHAPAccessory handleSetHasOnboardedForNaturalLighting:]
  -[HMDHAPAccessory handleFetchCHIPPairingsMessage:]
  -[HMDHAPAccessory handleRemoveCHIPPairingsMessage:]
  -[HMDHAPAccessory handleActivateCHIPPairingModeMessage:]
  -[HMDHAPAccessory handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage:]
  -[HMDHAPAccessory _handleValidatePairingAuthMethodMessage:]
  -[HMDHAPAccessory _handleUpdateAccessoryConnectionState:]
  -[HMDHAPAccessory handleCharacteristicsChangedNotification:]
  -[HMDHAPAccessory handleRoomChanged:]
  -[HMDHAPAccessory handleRoomNameChanged:]
  -[HMDHAPAccessory handleConnectedChanged:]
  -[HMDHAPAccessory handleResidentDeviceUpdated:]
  -[HMDHAPAccessory handlePrimaryResidentUpdateNotification:]
  -[HMDHAPAccessory makeServiceNameConsistent:withName:completionHandler:]
  -[HMDHAPAccessory createUpdateServiceTransationWithServiceUUID:]
  -[HMDHAPAccessory backingStoreTransactionWithName:]
  -[HMDHAPAccessory initWithHAPMetadata:]
  -[HMDHAPAccessory initWithTransaction:home:hapMetadata:]
  -[HMDHAPAccessory _validateConnectivityInfo:]
  -[HMDHAPAccessory canWakeViaCustomWoBLE]
  -[HMDHAPAccessory setDefaultPreferredMediaUserIfNeeded]
  -[HMDHAPAccessory setDefaultPreferredMediaUser]
  -[HMDHAPAccessory settingTopicForKeyPath:]
  -[HMDHAPAccessory eventSourceIdentifier]
  -[HMDHAPAccessory postUpdateEventsIfDifferentWithPerferredMediaUUID:selectionType:]
  -[HMDHAPAccessory _postUpdateEventsIfDifferent:]
  -[HMDHAPAccessory updateAccessoryFlags:]
  -[HMDHAPAccessory enhancedAuthMethod]
  -[HMDHAPAccessory internalEnhancedAuthConfigNumber]
  -[HMDHAPAccessory internalEnhancedAuthMethod]
  -[HMDHAPAccessory setInternalEnhancedAuthMethod:configNumber:]
  -[HMDHAPAccessory testSetInternalEnhancedAuthMethod:]
  -[HMDHAPAccessory _handleUpdatedAuthMethod]
  -[HMDHAPAccessory _updateBroadcastKey:keyUpdatedStateNumber:keyUpdatedTime:]
  -[HMDHAPAccessory setBroadcastKey:keyUpdatedStateNumber:keyUpdatedTime:]
  -[HMDHAPAccessory setConnectivityInfo:]
  -[HMDHAPAccessory connectivityInfo]
  -[HMDHAPAccessory setNeedsOnboarding:]
  -[HMDHAPAccessory evaluateSymptomHandler]
  -[HMDHAPAccessory targetUUIDs]
  -[HMDHAPAccessory setTargetUUIDs:]
  -[HMDHAPAccessory hardwareSupport]
  -[HMDHAPAccessory setHardwareSupport:]
  -[HMDHAPAccessory saveHardwareSupport:]
  -[HMDHAPAccessory _saveHardwareSupport:]
  -[HMDHAPAccessory targetControllerManager]
  -[HMDHAPAccessory setTargetControllerManager:]
  -[HMDHAPAccessory saveTargetUUIDs:]
  -[HMDHAPAccessory _saveTargetUUIDs:]
  -[HMDHAPAccessory updateTargetUUIDs:]
  -[HMDHAPAccessory _reconcileAccessControlSetting]
  -[HMDHAPAccessory shouldAutoDiscoverAccessoryServer]
  -[HMDHAPAccessory custom1WoBLE]
  -[HMDHAPAccessory setSiriEndpointCapabilities:]
  -[HMDHAPAccessory siriEndpointCapabilities]
  -[HMDHAPAccessory setSupportsAccessCode:]
  -[HMDHAPAccessory supportsAccessCode]
  -[HMDHAPAccessory _handleUpdatedServicesForAccessCodes]
  -[HMDHAPAccessory _handleUpdatedServicesForWalletKey]
  -[HMDHAPAccessory _serviceSupportsMinimumUserPrivilege:]
  -[HMDHAPAccessory _updateAuthMethodWithServer:completion:]
  -[HMDHAPAccessory _challengeAccessoryAuthMethod]
  -[HMDHAPAccessory _messagesForUpdatedRoom:]
  -[HMDHAPAccessory _handleRoomChangedFromOldRoomName:]
  -[HMDHAPAccessory __handleCharacteristicsChangedPayload:]
  -[HMDHAPAccessory isReadingRequiredForBTLEAccessoryCharacteristic:forceReadFWVersion:]
  -[HMDHAPAccessory updateAccessoryInformationWithCharacteristicType:serviceType:value:accessoryTransaction:]
  -[HMDHAPAccessory namesOfServicesShowingTilesInHomeApp]
  -[HMDHAPAccessory updateAccessoryFlagsAndNotifyClients:]
  -[HMDHAPAccessory handlePairedStateChange:]
  -[HMDHAPAccessory setPairingUsername:publicKey:]
  -[HMDHAPAccessory associateControllerKeyWithAccessory:error:]
  -[HMDHAPAccessory savePublicKeyToKeychain]
  -[HMDHAPAccessory verifyPairingWithCompletionHandler:]
  -[HMDHAPAccessory serviceTypeUUIDs]
  -[HMDHAPAccessory initialServiceTypeUUIDs]
  -[HMDHAPAccessory setInitialServiceTypeUUIDs:]
  -[HMDHAPAccessory wasUpdatedWithServiceType:]
  -[HMDHAPAccessory updatePrimaryServiceIfNeeded]
  -[HMDHAPAccessory _updatePrimaryServiceIfNeededWithService:]
  -[HMDHAPAccessory serviceWithUUID:]
  -[HMDHAPAccessory serviceWithSPIClientIdentfier:]
  -[HMDHAPAccessory _handleUpdatedServicesForProfilesAndControllers:]
  -[HMDHAPAccessory _handleAddServiceTransaction:message:]
  -[HMDHAPAccessory _handleServiceRemovedTransaction:message:]
  -[HMDHAPAccessory addTarget:buttonConfiguration:]
  -[HMDHAPAccessory updateTarget:name:buttonConfiguration:]
  -[HMDHAPAccessory registerForActiveIdentifierNotifications]
  -[HMDHAPAccessory targetControllerButtonConfiguration]
  -[HMDHAPAccessory targetControllerTicksPerSecond]
  -[HMDHAPAccessory notifyClientsOfTargetControlSupportUpdate]
  -[HMDHAPAccessory _setTargetControllerSession]
  -[HMDHAPAccessory _configureTargetControllerWithCompletion:]
  -[HMDHAPAccessory _autoConfigureTargetController]
  -[HMDHAPAccessory autoConfigureTargetController]
  -[HMDHAPAccessory acknowledgeTargetControlService:active:]
  -[HMDHAPAccessory updateButtonConfigurationForTarget:]
  -[HMDHAPAccessory setIdentifiersForBridgedAccessories:]
  -[HMDHAPAccessory transportInformationInstances]
  -[HMDHAPAccessory addTransportInformationInstance:]
  -[HMDHAPAccessory removeTransportInformationInstance:]
  -[HMDHAPAccessory hasCameraStreamService]
  -[HMDHAPAccessory dataStreamController]
  -[HMDHAPAccessory networkRouterController]
  -[HMDHAPAccessory setNetworkRouterController:]
  -[HMDHAPAccessory setDiagnosticsManager:]
  -[HMDHAPAccessory _addHAPAccessory:]
  -[HMDHAPAccessory hasIPLink]
  -[HMDHAPAccessory isIPSecureSessionEstablished]
  -[HMDHAPAccessory hasBTLELink]
  -[HMDHAPAccessory isBLESecureSessionEstablished]
  -[HMDHAPAccessory linkSpeed]
  -[HMDHAPAccessory preferredHAPAccessoryForOperation:linkType:]
  -[HMDHAPAccessory establishLocalHAPConnectionWithQueue:completion:]
  -[HMDHAPAccessory getPrimaryHAPAccessories]
  -[HMDHAPAccessory getHAPAccessoryMatchingInstanceId]
  -[HMDHAPAccessory configureService:]
  -[HMDHAPAccessory enableNotificationsWithHAPAccessory:homeNotificationsEnabled:]
  -[HMDHAPAccessory _configureWithAccessoryServices:changedCharacteristics:]
  -[HMDHAPAccessory configureWithAccessory:homeNotificationsEnabled:queue:completion:]
  -[HMDHAPAccessory unregisterFromAccessoryServer]
  -[HMDHAPAccessory cleanupNotificationCenterObservers]
  -[HMDHAPAccessory unconfigureAccessoryWithServerIdentifier:linkType:updateReachability:]
  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:instanceID:linkType:]
  -[HMDHAPAccessory matchingTransportInformation:]
  -[HMDHAPAccessory matchesHAPAccessoryWithServerIdentifier:instanceID:]
  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:linkType:]
  -[HMDHAPAccessory matchingTransportInformationWithServerIdentifier:]
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:linkType:]
  -[HMDHAPAccessory matchingHAPAccessoryWithServerIdentifier:]
  -[HMDHAPAccessory matchingHAPAccessoryWithLinkType:]
  -[HMDHAPAccessory matchingHAPAccessoryServerIdentifierWithLinkType:]
  -[HMDHAPAccessory matchesHAPAccessory:]
  -[HMDHAPAccessory matchesHAPAccessoryWithServerIdentifier:linkType:]
  -[HMDHAPAccessory performOperation:linkType:operationBlock:errorBlock:]
  -[HMDHAPAccessory _performOperation:linkType:operationBlock:errorBlock:]
  -[HMDHAPAccessory _retrieveHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:]
  -[HMDHAPAccessory residentCanWakeForWOL]
  -[HMDHAPAccessory _handleUnreachableAccessoryToPerformOperation:operationBlock:errorBlock:]
  -[HMDHAPAccessory canWakeBasedOnCharacteristicRequests:]
  -[HMDHAPAccessory writeCharacteristicValues:source:queue:completionHandler:]
  -[HMDHAPAccessory writeCharacteristicValues:source:message:queue:completionHandler:]
  -[HMDHAPAccessory writeCharacteristicValues:source:message:queue:logEvent:completionHandler:]
  -[HMDHAPAccessory wakeOrScanForSuspendedAccessoryForRequests:source:completion:]
  -[HMDHAPAccessory _writeCharacteristicValues:localOperationRequired:source:completionHandler:errorBlock:]
  -[HMDHAPAccessory _writeCharacteristicValues:localOperationRequired:source:message:completionHandler:logEvent:errorBlock:]
  -[HMDHAPAccessory getFullError:source:suspended:]
  -[HMDHAPAccessory _updatedResponseTuplesForRequests:error:source:suspended:]
  -[HMDHAPAccessory _updatedResponseForRemoteResponse:]
  -[HMDHAPAccessory readCharacteristicValues:source:queue:completionHandler:]
  -[HMDHAPAccessory readCharacteristicValues:source:message:queue:logEvent:completionHandler:]
  -[HMDHAPAccessory _wakeAccessoryIfNeededForCharacteristicRequests:source:activity:completion:]
  -[HMDHAPAccessory autoUpdateCachedCountDownCharacteristics:]
  -[HMDHAPAccessory _readCharacteristicValues:localOperationRequired:source:message:logEvent:completionHandler:errorBlock:]
  -[HMDHAPAccessory hmdCharacteristicFromHapCharacteristic:]
  -[HMDHAPAccessory hmdCharacteristicForInstanceId:]
  -[HMDHAPAccessory shouldConfigureTargetController]
  -[HMDHAPAccessory _createSymptomHandler]
  -[HMDHAPAccessory saveBluetoothAddress:]
  -[HMDHAPAccessory getBluetoothAddress]
  -[HMDHAPAccessory _handleHomeUserRemovedNotification:]
  -[HMDHAPAccessory handleUpdatePreferredMediaUser:]
  -[HMDHAPAccessory notifyValue:previousValue:error:forCharacteristic:requestMessage:]
  -[HMDHAPAccessory hapCharacteristicWriteRequests:hapAccessory:hmdResponses:mapping:]
  -[HMDHAPAccessory populateHMDCharacteristicResponses:hapResponses:mapping:overallError:requests:]
  -[HMDHAPAccessory _writeCharacteristicValues:hapAccessory:source:message:logEvent:completionHandler:]
  -[HMDHAPAccessory _readCharacteristicValues:hapAccessory:source:message:logEvent:completionHandler:]
  -[HMDHAPAccessory _writeValue:forCharacteristic:hapAccessory:authorizationData:message:]
  -[HMDHAPAccessory _prepareMessagePayloadForCharacteristicRemoteWrite:]
  -[HMDHAPAccessory _handleCharacteristicError:read:characteristic:didRelayMessage:]
  -[HMDHAPAccessory submitCharacteristicWriteErrorLogEvent:startDate:message:error:]
  -[HMDHAPAccessory _relayWriteToCharacteristic:toResidentForMessage:viaDevice:]
  -[HMDHAPAccessory _relayReadFromCharacteristic:toResidentForMessage:viaDevice:]
  -[HMDHAPAccessory _parseResponseFromRemotePeer:message:error:characteristic:]
  -[HMDHAPAccessory submitCharacteristicReadErrorLogEvent:message:error:]
  -[HMDHAPAccessory hasValidCachedValueForCharacteristic:shouldLog:]
  -[HMDHAPAccessory _readValueForCharacteristic:hapAccessory:requestMessage:]
  -[HMDHAPAccessory updateNotificationEnabled:forCharacteristics:onBehalfOf:]
  -[HMDHAPAccessory isClientRegisteredForNotifications]
  -[HMDHAPAccessory resetNotificationEnabledTime]
  -[HMDHAPAccessory handleRemoteGatewayNotificationRegistration:enable:enableTime:]
  -[HMDHAPAccessory _notifyCharacteristicNotificationChanges:enableNotification:message:clientIdentifier:]
  -[HMDHAPAccessory _notifyClientsWithNotificationChangesForCharacteristics:characteristicErrors:enableNotification:message:]
  -[HMDHAPAccessory disableNotificationsForBundleID:completionHandler:]
  -[HMDHAPAccessory _disableNotificationsForBundleID:completionHandler:]
  -[HMDHAPAccessory setNotificationsEnabled:forCharacteristics:clientIdentifier:]
  -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:clientIdentifier:matchingHAPAccessory:]
  -[HMDHAPAccessory enableNotification:forCharacteristicIDs:message:clientIdentifier:]
  -[HMDHAPAccessory enableNotification:forCharacteristics:message:clientIdentifier:]
  -[HMDHAPAccessory _enableNotification:forCharacteristics:message:clientIdentifier:]
  -[HMDHAPAccessory _remotelySetNotificationsEnabled:forCharacteristic:clientIdentifier:]
  -[HMDHAPAccessory _setNotificationsEnabled:forCharacteristics:hapAccessory:activity:completion:]
  -[HMDHAPAccessory _groupCharacteristicsNotificationWithCharacteristics:enable:activity:clientIdentifier:groupCharacteristicsError:characteristicsToModifyLocally:characteristicsToModifyOnResident:characteristicsToDisableOnResident:characteristicsErrorsMapFailingToModify:]
  -[HMDHAPAccessory _enableBroadcastNotifications:hapAccessory:forCharacteristics:]
  -[HMDHAPAccessory _forceEnableReachabilityPingForPrimaryResident:]
  -[HMDHAPAccessory _checkResidentDeviceForReachabilityPing]
  -[HMDHAPAccessory checkHAPSessionRestore]
  -[HMDHAPAccessory _doPrimaryResidentUpdated]
  -[HMDHAPAccessory _getDurationAndUpdateCurrentTime:currentTime:]
  -[HMDHAPAccessory _logServerReachabilityNotification:withDuration:withLinkType:]
  -[HMDHAPAccessory _logServerReachabilityNotification:]
  -[HMDHAPAccessory notifyClientsOfUpdatedAccessoryControllableValue]
  -[HMDHAPAccessory _reenableNotificationsOnWatch]
  -[HMDHAPAccessory cameraProfileNotificationSettings]
  -[HMDHAPAccessory setCameraProfileNotificationSettings:]
  -[HMDHAPAccessory _updateAccessoryTracking]
  -[HMDHAPAccessory _shouldTrackAccessoryWithPriority:]
  -[HMDHAPAccessory _containsSecureCharacteristic]
  -[HMDHAPAccessory updateTrackedAccessoryStateNumber:]
  -[HMDHAPAccessory _updateStateForTrackedAccessory:stateNumber:]
  -[HMDHAPAccessory _evaluateLocalOperation:state:completion:]
  -[HMDHAPAccessory findService:]
  -[HMDHAPAccessory findCharacteristic:forService:]
  -[HMDHAPAccessory findCharacteristic:]
  -[HMDHAPAccessory findCharacteristicType:forServiceType:]
  -[HMDHAPAccessory findCharacteristicsByType:forServiceType:]
  -[HMDHAPAccessory findCharacteristicsByTypes:forServiceType:]
  -[HMDHAPAccessory findServiceWithServiceType:]
  -[HMDHAPAccessory _checkRegisterForServerNotification]
  -[HMDHAPAccessory setReachability:serverIdentifier:linkType:]
  -[HMDHAPAccessory _doReachabilityUpdateForServer:]
  -[HMDHAPAccessory _submitStateNumberChangeMetric]
  -[HMDHAPAccessory _submitReachabilityDelayedMetric:]
  -[HMDHAPAccessory _renameService:name:message:completionBlock:]
  -[HMDHAPAccessory characteristicWithAuthorizationDataMessage:]
  -[HMDHAPAccessory characteristicsPassingTest:]
  -[HMDHAPAccessory _handleDiscoveryBackoffTimerFired]
  -[HMDHAPAccessory backOffAccessoryForStateNumber:backoffPeriod:]
  -[HMDHAPAccessory _removeBackedoffAccessoryForStateNumber:]
  -[HMDHAPAccessory _handleKeyRefreshTimerFired]
  -[HMDHAPAccessory associateWithAccessoryAdvertisement:]
  -[HMDHAPAccessory accessoryAdvertisement]
  -[HMDHAPAccessory doorbellChimeController]
  -[HMDHAPAccessory setDoorbellChimeController:]
  -[HMDHAPAccessory setWiFiManagementController:]
  -[HMDHAPAccessory wiFiTransportCapabilities]
  -[HMDHAPAccessory setWiFiTransportCapabilities:]
  -[HMDHAPAccessory _updateReachabilityMetric:withDuration:]
  -[HMDHAPAccessory handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:]
  -[HMDHAPAccessory _handleMultipleCharacteristicsUpdated:message:completionQueue:completionHandler:]
  -[HMDHAPAccessory notifyingCharacteristicStateNumberUpdated:]
  -[HMDHAPAccessory __updateNotifyingCharacteristicStateNumber:]
  -[HMDHAPAccessory isNotificationEnabledForClientIdentifier:]
  -[HMDHAPAccessory isNonClientNotificationEnabled]
  -[HMDHAPAccessory primaryIPServer]
  -[HMDHAPAccessory anyIPServer]
  -[HMDHAPAccessory getOrCreateServiceUpdateTransactionForKey:fromDictionary:]
  -[HMDHAPAccessory readInitialRequiredCharacteristicsForAccessory:]
  -[HMDHAPAccessory getTransportInformationArray]
  -[HMDHAPAccessory updateTransportInformation:localSource:]
  -[HMDHAPAccessory cameraProfileSettingsManager]
  -[HMDHAPAccessory setFirmwareUpdateProfile:]
  -[HMDHAPAccessory internalThreadCapabilities]
  -[HMDHAPAccessory setInternalThreadCapabilities:]
  -[HMDHAPAccessory internalThreadStatus]
  -[HMDHAPAccessory setInternalThreadStatus:]
  -[HMDHAPAccessory internalThreadActive]
  -[HMDHAPAccessory setInternalThreadActive:]
  -[HMDHAPAccessory setSuspendedState:shouldNotify:]
  -[HMDHAPAccessory setReachableViaBSP:]
  -[HMDHAPAccessory isReachableViaBSP]
  -[HMDHAPAccessory wakingViaCharacteristicWithIID]
  -[HMDHAPAccessory setWakingViaCharacteristicWithIID:]
  -[HMDHAPAccessory setBulletinBoard:]
  -[HMDHAPAccessory setCommunicationProtocol:]
  -[HMDHAPAccessory setCommunicationProtocolIfNeeded]
  -[HMDHAPAccessory isSecureSessionEstablished]
  -[HMDHAPAccessory registerForSessionRestore:]
  -[HMDHAPAccessory deregisterFromSessionRestore:]
  -[HMDHAPAccessory _deregisterAllClientsFromSessionRestore]
  -[HMDHAPAccessory _checkSession]
  -[HMDHAPAccessory _checkBridgedAccessoryOnConfigured]
  -[HMDHAPAccessory _notifyBridgedAccessoryReachabilityChange:]
  -[HMDHAPAccessory _stopSessionMonitor]
  -[HMDHAPAccessory _startSessionMonitor]
  -[HMDHAPAccessory _updateSessionRestoreOnServer:]
  -[HMDHAPAccessory _handleSessionRestoreTimerFired]
  -[HMDHAPAccessory _checkSessionRestoreOnLinkStateChange]
  -[HMDHAPAccessory keyGenerationInProgress]
  -[HMDHAPAccessory setKeyGenerationInProgress:]
  -[HMDHAPAccessory pendingPowerOn]
  -[HMDHAPAccessory setPendingPowerOn:]
  -[HMDHAPAccessory powerOnCompletionRoutines]
  -[HMDHAPAccessory setPowerOnCompletionRoutines:]
  -[HMDHAPAccessory setAccessoryAdvertisement:]
  -[HMDHAPAccessory accessCodeCache]
  -[HMDHAPAccessory setAccessCodeCache:]
  -[HMDHAPAccessory hasPostedBulletinForAccessCodeOnboarding]
  -[HMDHAPAccessory setHasPostedBulletinForAccessCodeOnboarding:]
  -[HMDHAPAccessory hasPostedBulletinForWalletKeyOnboarding]
  -[HMDHAPAccessory setHasPostedBulletinForWalletKeyOnboarding:]
  -[HMDHAPAccessory primaryHAPServiceForAnalytics]
  -[HMDHAPAccessory hapServicesListForAnalytics]
  -[HMDHAPAccessory activationAttempts]
  -[HMDHAPAccessory setActivationAttempts:]
  -[HMDHAPAccessory pairingAttempts]
  -[HMDHAPAccessory setPairingAttempts:]
  -[HMDHAPAccessory backedOffStateNumber]
  -[HMDHAPAccessory setBackedOffStateNumber:]
  -[HMDHAPAccessory accessoryDiscoveryBackoffTimer]
  -[HMDHAPAccessory setAccessoryDiscoveryBackoffTimer:]
  -[HMDHAPAccessory accessoryKeyRefreshTimer]
  -[HMDHAPAccessory setAccessoryKeyRefreshTimer:]
  -[HMDHAPAccessory keyGenerationType]
  -[HMDHAPAccessory setKeyGenerationType:]
  -[HMDHAPAccessory activeSessionRestoreClients]
  -[HMDHAPAccessory setActiveSessionRestoreClients:]
  -[HMDHAPAccessory sessionRestoreTimer]
  -[HMDHAPAccessory setSessionRestoreTimer:]
  -[HMDHAPAccessory lastLinkChangeSessionCheckTime]
  -[HMDHAPAccessory setLastLinkChangeSessionCheckTime:]
  -[HMDHAPAccessory lastSessionStatus]
  -[HMDHAPAccessory setLastSessionStatus:]
  -[HMDHAPAccessory cachedRemovedUser]
  -[HMDHAPAccessory setCachedRemovedUser:]
  -[HMDHAPAccessory siriEndpointProfileMetricsDispatcher]
  -[HMDHAPAccessory setSiriEndpointProfileMetricsDispatcher:]
  -[HMDHAPAccessory discoveredServices]
  -[HMDHAPAccessory setDiscoveredServices:]
  -[HMDHAPAccessory pairingUsername]
  -[HMDHAPAccessory setPairingUsername:]
  -[HMDHAPAccessory setDataStreamController:]
  -[HMDHAPAccessory pendingReads]
  -[HMDHAPAccessory setPendingReads:]
  -[HMDHAPAccessory hasSiriEndpointService]
  -[HMDHAPAccessory setHasSiriEndpointService:]
  -[HMDHAPAccessory saveCharacteristicsToLocalDiskForHH2Migration]
  -[HMDHAPAccessory _accessoryForHH2MigrationFileName]
  -[HMDHAPAccessory networkRouterSatelliteProfile]
  -[HMDHAPAccessory __createNetworkRouterController:]
  -[HMDHAPAccessory __removeNetworkRouterController]
  -[HMDHAPAccessory postNetworkRouterProfileNotification:object:]
  -[HMDHAPAccessory __createNetworkRouterProfileAndController:]
  -[HMDHAPAccessory __createSatelliteNetworkRouterProfile:]
  -[HMDHAPAccessory _handleUpdatedServicesForNetworkRouterProfileAndController:]
  -[HMDHAPAccessory profile:didUpdateWoWLANInfos:]
  -[HMDHAPAccessory profile:didUpdateAccessoryState:]
  -[HMDHAPAccessory hasAnyServiceWithTypes:]
  -[HMDHAPAccessory nfcReaderIdentifier]
  -[HMDHAPAccessory updateHasPostedBulletinForWalletKeyOnboarding:]
  -[HMDHAPAccessory threadCapabilities]
  -[HMDHAPAccessory threadStatus]
  -[HMDHAPAccessory shouldSubmitRoutineConfigurationEventForSiriEndpointProfileMetricsDispatcher:]
  -[HMDHAPAccessory accessoryCategoryTypeForSiriEndpointProfileMetricsDispatcher:]
  -[HMDHAPAccessory profileFieldsForSiriEndpointProfileMetricsDispatcher:]
  -[HMDHAPAccessory compositeSettingsControllerManagerForSiriEndpointProfileMetricsDispatcher:]
  -[HMDHAPAccessory _handleUpdatedServicesForDoorbellController]
  -[HMDHAPAccessory writeValue:toCharacteristic:queue:completion:]
  -[HMDHAPAccessory assistantObject]
  -[HMDHAPAccessory computeSiriEndpointCertification]
  -[HMDHAPAccessory isCertifiedForSiriEndpoint]
  -[HMDHAPAccessory supportsSiriEndpoint]
  -[HMDHAPAccessory hasSiriSettingsService]
  -[HMDHAPAccessory _handleUpdatedServicesForSiriEndpointProfile:]
  -[HMDHAPAccessory _checkForSiriEndpointServiceChange]
  -[HMDHAPAccessory _handleUpdatedServicesForLightProfiles:]
  -[HMDHAPAccessory updateBridgedAccessoryLightProfilesSettings]
  -[HMDHAPAccessory updateLightProfilesSettings]
  -[HMDHAPAccessory isCameraRecordingFeatureSupported]
  -[HMDHAPAccessory _handleUpdatedServicesForCameraProfiles:]
  -[HMDHAPAccessory encodeCameraProfileNotificationSettingsWithCoder:]
  -[HMDHAPAccessory cameraProfileNotificationSettingsFromCoder:]
  -[HMDHAPAccessory updateCameraProfileNotificationSettings:]
  -[HMDHAPAccessory getSupportedSiriAudioConfiguration:]
  -[HMDHAPAccessory _resolveAudioAbility:]
  -[HMDHAPAccessory _resolveSupportedSiriInputType:]
  -[HMDHAPAccessory setSelectedSiriAudioConfiguration:]
  -[HMDHAPAccessory _updateSiriAudioFormat:]
  -[HMDHAPAccessory hasTelevisionService]
  -[HMDHAPAccessory configureSiriEndpointProfileMetricsDispatcherWithFactory:logEventSubmitter:dailyScheduler:]
  -[HMDHAPAccessory createSiriEndpointProfileMetricsDispatcherWithAccessoryUUID:homeUUID:logEventSubmitter:]
  -[HMDHAPAccessory isThreadTheCurrentlyActiveTransport]
  -[HMDHAPAccessory supportsThreadCommissioning]
  -[HMDHAPAccessory handleUpdatedServicesForThreadManagementWithCompletion:]
  -[HMDHAPAccessory _handleUpdatedServicesForThreadManagementWithActivity:]
  -[HMDHAPAccessory _findThreadControlPointCharacteristicWithError:]
  -[HMDHAPAccessory _writeThreadControlPointCharacteristic:value:activity:completion:]
  -[HMDHAPAccessory maybeCommissionToThreadNetworkWithCompletion:]
  -[HMDHAPAccessory _maybeCommissionToThreadNetworkWithActivity:completion:]
  -[HMDHAPAccessory _validateCurrentThreadCredentials:metadata:]
  -[HMDHAPAccessory commissionToThreadNetworkWithPairingEvent:completion:]
  -[HMDHAPAccessory _commissionToThreadNetworkWithActivity:pairingEvent:completion:]
  -[HMDHAPAccessory _writeCredentialsForThreadNetworkWithActivity:pairingEvent:metadata:threadControlPointCharacteristic:completion:]
  -[HMDHAPAccessory metric_threadCapabilities]
  -[HMDHAPAccessory hasSmartSpeakerService]
  -[HMDHAPAccessory _handleUpdatedServicesForMediaProfile:]
  -[HMDHAPAccessory addDataStreamBulkSendListener:fileType:]
  -[HMDHAPAccessory removeDataStreamBulkSendListener:]
  -[HMDHAPAccessory canAcceptBulkSendListenersSync]
  -[HMDHAPAccessory bulkSendListenersRequireCharactertisticReadsSync]
  -[HMDHAPAccessory dataStreamSocketController]
  -[HMDHAPAccessory _handleUpdatedServicesForDataStreamController:]
  -[HMDHAPAccessory _handleHomeNameChangedNotification:]
  -[HMDHAPAccessory removeAllCHIPPairingsWithCompletion:]
  -[HMDHAPAccessory configureCHIPAccessory]
  -[HMDHAPAccessory handleUpdatedCHIPPropertiesOnAccessoryModel:actions:]
  -[HMDHAPAccessory chipAccessoryServer]
  -[HMDHAPAccessory _handleFetchCHIPPairingsMessage:]
  -[HMDHAPAccessory _handleRemoveCHIPPairingsMessage:]
  -[HMDHAPAccessory _handleActivateCHIPPairingModeMessage:]
  -[HMDHAPAccessory _handleActivateCHIPPairingModeAndCreateSetupPayloadStringMessage:]
  -[HMDHAPAccessory _handleUpdatedPairings:previousPairings:]
  -[HMDHAPAccessory _fetchPairingsAndUpdateTransaction]
  -[HMDHAPAccessory _updateCHIPAccessoryWithFabricLabel:completionHandler:]
  -[HMDHAPAccessory didUpdatePairingsForAccessoryServer:]
  -[HMDHAPAccessory _handleWakeSuspendedAccessoryMessage:]
  -[HMDHAPAccessory supportsWoL]
  -[HMDHAPAccessory lpmProfile]
  -[HMDHAPAccessory canProceedWithRequests:suspended:error:]
  -[HMDHAPAccessory canWakeUpViaWoL]
  -[HMDHAPAccessory canReturnCachedValueForCharacteristic:]
  -[HMDHAPAccessory shouldDiscoverSuspendCapableAccessoryServer:]
  -[HMDHAPAccessory updateSuspendedStateWithConnectionState:hapAccessory:]
  -[HMDHAPAccessory updateSuspendedStateWithWakeNumber:hapAccessory:]
  -[HMDHAPAccessory _handleUpdatedServicesForLowPowerModeProfile]
  -[HMDHAPAccessory _wakeSuspendedHAPAccessoryToPerformOperation:linkType:operationBlock:errorBlock:activity:]
  -[HMDHAPAccessory _wol_runAccessoryTransaction:localOnly:]
  -[HMDHAPAccessory _wol_updateSuspendCapableHAPAccessoryServer:]
  -[HMDHAPAccessory _wol_processDidRemoveHPAccessoryServer:]
  -[HMDHAPAccessory _wol_processReadWriteResponseForCharacteristic:isRead:error:]
  -[HMDHAPAccessory _wol_updateWakingViaCharacteristicForWriteRequests:]
  -[HMDHAPAccessory _wol_updateWakingViaCharacteristicForWriteResponses:]
  -[HMDHAPAccessory _wol_ignoreWakingViaCharacteristicUpdateFromChangedService:]
  -[HMDHAPAccessory _registerForMessages_lowPowerMode]
  -[HMDHAPAccessory _validateIncomingMessage:]
  -[HMDHAPAccessory wirelessResumeInit]
  -[HMDHAPAccessory powerOnComplete:]
  -[HMDHAPAccessory _wirelessPowerOn:]
  -[HMDHAPAccessory wirelessPowerOn:]
  -[HMDHAPAccessory _cancelPowerOn]
  -[HMDHAPAccessory cancelPowerOn]
  -[HMDHAPAccessory isPoweringOn]


HMDHAPAccessoryTransaction : HMDAccessoryTransaction
 @property  NSData *chipPairingsData
 @property  NSString *uniqueIdentifier
 @property  NSString *bridgeUUID
 @property  NSNumber *accessoryFlags
 @property  NSNumber *certificationStatus
 @property  NSData *broadcastKey
 @property  NSNumber *keyUpdatedStateNumber
 @property  NSDate *keyUpdatedTime
 @property  NSString *pairingUsername
 @property  NSData *publicKey
 @property  NSArray *transportInformation
 @property  NSNumber *communicationProtocol
 @property  NSData *accessorySetupHash
 @property  NSNumber *wiFiTransportCapabilities
 @property  NSArray *targetUUIDs
 @property  NSNumber *hardwareSupport
 @property  HMFConnectivityInfo *connectivityInfo
 @property  HAPAccessory *hapAccessoryLocal
 @property  NSNumber *sleepInterval
 @property  NSNumber *hasOnboardedForNaturalLighting
 @property  NSSet *initialServiceTypeUUIDs
 @property  NSNumber *needsOnboarding
 @property  NSNumber *suspendedState
 @property  NSNumber *chipNodeID
 @property  NSNumber *chipVendorID
 @property  NSNumber *chipProductID
 @property  NSData *chipAttributeDatabase
 @property  NSSet *chipPairings

  // class methods
  +[HMDHAPAccessoryTransaction properties]

  // instance methods
  -[HMDHAPAccessoryTransaction .cxx_destruct]
  -[HMDHAPAccessoryTransaction dependentUUIDs]
  -[HMDHAPAccessoryTransaction chipPairings]
  -[HMDHAPAccessoryTransaction setChipPairings:]
  -[HMDHAPAccessoryTransaction hapAccessoryLocal]
  -[HMDHAPAccessoryTransaction setHapAccessoryLocal:]


HMDAppleMediaAccessoryInfoController : NSObject
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDAppleMediaAccessoryInfoControllerDataSource> *dataSource
 @property  NSNotificationCenter *notificationCenter
 @property  HMFWiFiNetworkInfo *lastWifiNetworkInfo
 @property  HMFWiFiManager *wifiManager

  // class methods
  +[HMDAppleMediaAccessoryInfoController logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryInfoController notificationCenter]
  -[HMDAppleMediaAccessoryInfoController configure]
  -[HMDAppleMediaAccessoryInfoController setWifiManager:]
  -[HMDAppleMediaAccessoryInfoController setNotificationCenter:]
  -[HMDAppleMediaAccessoryInfoController dataSource]
  -[HMDAppleMediaAccessoryInfoController wifiManager]
  -[HMDAppleMediaAccessoryInfoController handleCurrentNetworkChangedNotification:]
  -[HMDAppleMediaAccessoryInfoController .cxx_destruct]
  -[HMDAppleMediaAccessoryInfoController queue]
  -[HMDAppleMediaAccessoryInfoController initWithQueue:dataSource:notificationCenter:wifiManager:]
  -[HMDAppleMediaAccessoryInfoController currentWifiNetworkInfo]
  -[HMDAppleMediaAccessoryInfoController _postUpdateWifiNetworkInfoIfDifferent:]
  -[HMDAppleMediaAccessoryInfoController _postUpdateSoftwareVersionIfDifferent:]
  -[HMDAppleMediaAccessoryInfoController lastWifiNetworkInfo]
  -[HMDAppleMediaAccessoryInfoController setLastWifiNetworkInfo:]


HMDHouseholdDataEventCounterGroupSpecifier : NSObject <HMDEventCounterGroupSpecifying>
 @property  NSString *groupName
 @property  NSUUID *homeUUID
 @property  NSDate *date
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHouseholdDataEventCounterGroupSpecifier supportsSecureCoding]
  +[HMDHouseholdDataEventCounterGroupSpecifier specifierWithGroupName:homeUUID:date:]

  // instance methods
  -[HMDHouseholdDataEventCounterGroupSpecifier encodeWithCoder:]
  -[HMDHouseholdDataEventCounterGroupSpecifier date]
  -[HMDHouseholdDataEventCounterGroupSpecifier .cxx_destruct]
  -[HMDHouseholdDataEventCounterGroupSpecifier groupName]
  -[HMDHouseholdDataEventCounterGroupSpecifier homeUUID]
  -[HMDHouseholdDataEventCounterGroupSpecifier copyWithZone:]
  -[HMDHouseholdDataEventCounterGroupSpecifier isEqual:]
  -[HMDHouseholdDataEventCounterGroupSpecifier initWithCoder:]
  -[HMDHouseholdDataEventCounterGroupSpecifier initWithGroupName:homeUUID:date:]


HMDWiFiManagementController : HMFObject <HMFTimerDelegate, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter
 @property  long long reconfigurationState
 @property  unsigned short reconfigurationCookie
 @property  HMFTimer *reconfigurationTimeoutTimer
 @property  @? reconfigurationVerificationCallback
 @property  @? reconfigurationCompletion
 @property  HMDWiFiReconfigurationLogEvent *reconfigurationLogEvent
 @property  HMDHAPAccessory *accessory
 @property  HMDService *service
 @property  BOOL supportsStationConfiguration
 @property  long long capabilities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWiFiManagementController logCategory]
  +[HMDWiFiManagementController sharedPSKForNetworkWithSSID:]

  // instance methods
  -[HMDWiFiManagementController notificationCenter]
  -[HMDWiFiManagementController accessory]
  -[HMDWiFiManagementController timerDidFire:]
  -[HMDWiFiManagementController logIdentifier]
  -[HMDWiFiManagementController workQueue]
  -[HMDWiFiManagementController .cxx_destruct]
  -[HMDWiFiManagementController capabilities]
  -[HMDWiFiManagementController service]
  -[HMDWiFiManagementController _accessoryDidBecomeReachable:]
  -[HMDWiFiManagementController initWithAccessory:wiFiTransportService:workQueue:]
  -[HMDWiFiManagementController supportsStationConfiguration]
  -[HMDWiFiManagementController reconfigureWithSSID:PSK:logEvent:completion:]
  -[HMDWiFiManagementController safelyReconfigureWithSSID:PSK:verificationCallback:logEvent:completion:]
  -[HMDWiFiManagementController _commitConfigurationUpdate]
  -[HMDWiFiManagementController _reconfigurationCompletedWithSuccess:error:]
  -[HMDWiFiManagementController _performWiFiConfigurationControlRequest:withDescription:completion:]
  -[HMDWiFiManagementController reconfigurationState]
  -[HMDWiFiManagementController setReconfigurationState:]
  -[HMDWiFiManagementController reconfigurationCookie]
  -[HMDWiFiManagementController setReconfigurationCookie:]
  -[HMDWiFiManagementController reconfigurationTimeoutTimer]
  -[HMDWiFiManagementController setReconfigurationTimeoutTimer:]
  -[HMDWiFiManagementController reconfigurationVerificationCallback]
  -[HMDWiFiManagementController setReconfigurationVerificationCallback:]
  -[HMDWiFiManagementController reconfigurationCompletion]
  -[HMDWiFiManagementController setReconfigurationCompletion:]
  -[HMDWiFiManagementController reconfigurationLogEvent]
  -[HMDWiFiManagementController setReconfigurationLogEvent:]


HMDAccessoryTransportInformation : HMFObject <NSSecureCoding>
 @property  NSString *serverIdentifier
 @property  NSNumber *instanceID
 @property  long long linkType
 @property  HAPAccessory *hapAccessory
 @property  NSString *protocolVersion
 @property  BOOL reachable
 @property  NSDate *reachableLastChangedTime
 @property  NSDictionary *transportInfoDictionary

  // class methods
  +[HMDAccessoryTransportInformation supportsSecureCoding]

  // instance methods
  -[HMDAccessoryTransportInformation linkType]
  -[HMDAccessoryTransportInformation instanceID]
  -[HMDAccessoryTransportInformation setProtocolVersion:]
  -[HMDAccessoryTransportInformation protocolVersion]
  -[HMDAccessoryTransportInformation isReachable]
  -[HMDAccessoryTransportInformation encodeWithCoder:]
  -[HMDAccessoryTransportInformation attributeDescriptions]
  -[HMDAccessoryTransportInformation report]
  -[HMDAccessoryTransportInformation .cxx_destruct]
  -[HMDAccessoryTransportInformation setReachable:]
  -[HMDAccessoryTransportInformation initWithCoder:]
  -[HMDAccessoryTransportInformation serverIdentifier]
  -[HMDAccessoryTransportInformation reachableLastChangedTime]
  -[HMDAccessoryTransportInformation initWithServerIdentifier:instanceID:linkType:]
  -[HMDAccessoryTransportInformation hapAccessory]
  -[HMDAccessoryTransportInformation setHapAccessory:]
  -[HMDAccessoryTransportInformation transportInfoDictionary]


HMDActionModel : HMDBackingStoreModelObject
  // class methods
  +[HMDActionModel properties]

  // instance methods
  -[HMDActionModel loadModelWithActionInformation:]


HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload : HMFObject <HMMessageEncoding>
 @property  NSUUID *modelIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload modelIdentifier]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload attributeDescriptions]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload initWithPayload:]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload .cxx_destruct]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload isEqual:]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload payloadCopy]
  -[HMDAppleMediaAccessoryModelIdentiferResponseMessagePayload initWithModelIdentifier:]


HMDMotionSensorLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *accessoryUUID
 @property  NSString *motionSensorStatus
 @property  NSString *characteristicUUID
 @property  NSString *timeStamp
 @property  NSString *homePresence

  // instance methods
  -[HMDMotionSensorLogEvent accessoryUUID]
  -[HMDMotionSensorLogEvent eventName]
  -[HMDMotionSensorLogEvent .cxx_destruct]
  -[HMDMotionSensorLogEvent timeStamp]
  -[HMDMotionSensorLogEvent characteristicUUID]
  -[HMDMotionSensorLogEvent serializedEvent]
  -[HMDMotionSensorLogEvent homePresence]
  -[HMDMotionSensorLogEvent initWithMotionSensorStatus:accessoryUUID:characteristicUUID:timeStamp:homeUUID:homePresence:]
  -[HMDMotionSensorLogEvent motionSensorStatus]


HMDAccountHandleResolveOperation : HMFOperation <HMFLogging, HMDIDSServiceDelegate>
 @property  <HMDIDSService> *service
 @property  HMDIDSMessageContext *messageContext
 @property  NSMutableArray *resolveBlocks
 @property  HMDAccountHandle *handle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccountHandleResolveOperation timeout]
  +[HMDAccountHandleResolveOperation logCategory]

  // instance methods
  -[HMDAccountHandleResolveOperation initWithHandle:]
  -[HMDAccountHandleResolveOperation service:account:identifier:didSendWithSuccess:error:context:]
  -[HMDAccountHandleResolveOperation handle]
  -[HMDAccountHandleResolveOperation .cxx_destruct]
  -[HMDAccountHandleResolveOperation service]
  -[HMDAccountHandleResolveOperation service:account:incomingMessage:fromID:context:]
  -[HMDAccountHandleResolveOperation initWithTimeout:]
  -[HMDAccountHandleResolveOperation main]
  -[HMDAccountHandleResolveOperation init]
  -[HMDAccountHandleResolveOperation messageContext]
  -[HMDAccountHandleResolveOperation setMessageContext:]
  -[HMDAccountHandleResolveOperation resolveBlocks]
  -[HMDAccountHandleResolveOperation initWithQualityOfService:timeout:]
  -[HMDAccountHandleResolveOperation addResolveBlock:]


HMDCameraVideoParameterCombination : HMFObject
 @property  HMDH264Profile *profile
 @property  HMDH264Level *level
 @property  HMDCameraVideoTier *videoTier

  // instance methods
  -[HMDCameraVideoParameterCombination profile]
  -[HMDCameraVideoParameterCombination .cxx_destruct]
  -[HMDCameraVideoParameterCombination level]
  -[HMDCameraVideoParameterCombination isEqual:]
  -[HMDCameraVideoParameterCombination initWithProfile:level:videoTier:]
  -[HMDCameraVideoParameterCombination videoTier]


HMDMediaGroupsParticipantData : NSObject <HMEProtoBufferCoding, NSCopying, NSMutableCopying>
 @property  HMMediaDestination *destination
 @property  HMMediaDestinationControllerData *destinationControllerData
 @property  NSArray *backedUpGroups

  // instance methods
  -[HMDMediaGroupsParticipantData setDestination:]
  -[HMDMediaGroupsParticipantData destination]
  -[HMDMediaGroupsParticipantData .cxx_destruct]
  -[HMDMediaGroupsParticipantData copyWithZone:]
  -[HMDMediaGroupsParticipantData mutableCopyWithZone:]
  -[HMDMediaGroupsParticipantData isEqual:]
  -[HMDMediaGroupsParticipantData encodeToProtoBufferData]
  -[HMDMediaGroupsParticipantData initWithProtoBufferData:]
  -[HMDMediaGroupsParticipantData initWithDestination:destinationControllerData:backedUpGroups:]
  -[HMDMediaGroupsParticipantData destinationControllerData]
  -[HMDMediaGroupsParticipantData setDestinationControllerData:]
  -[HMDMediaGroupsParticipantData backedUpGroups]
  -[HMDMediaGroupsParticipantData setBackedUpGroups:]


HMDMutableMediaGroupsParticipantData : HMDMediaGroupsParticipantData
 @property  HMMediaDestination *destination
 @property  HMMediaDestinationControllerData *destinationControllerData
 @property  NSArray *backedUpGroups

  // instance methods
  -[HMDMutableMediaGroupsParticipantData copyWithZone:]


HMDNetworkRouterFirewallRuleAccessoryIdentifier : HMFObject <NSCopying>
 @property  NSString *cloudKitZoneName
 @property  NSString *cloudKitRecordName
 @property  NSString *productGroup
 @property  NSString *productNumber
 @property  HMFVersion *firmwareVersion

  // class methods
  +[HMDNetworkRouterFirewallRuleAccessoryIdentifier createWithProductData:firmwareVersion:]
  +[HMDNetworkRouterFirewallRuleAccessoryIdentifier identifierFromRecordID:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier productNumber]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier firmwareVersion]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier productGroup]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier copyWithZone:]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier isEqual:]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier cloudKitRecordID]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier initWithProductGroup:productNumber:firmwareVersion:]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier cloudKitZoneName]
  -[HMDNetworkRouterFirewallRuleAccessoryIdentifier cloudKitRecordName]


HMDRemoteLoginReceiverCompanionAuthentication : HMDRemoteLoginReceiverAuthentication
 @property  HMDRemoteLoginCompanionAuthenticationRequest *request

  // class methods
  +[HMDRemoteLoginReceiverCompanionAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginReceiverCompanionAuthentication dealloc]
  -[HMDRemoteLoginReceiverCompanionAuthentication .cxx_destruct]
  -[HMDRemoteLoginReceiverCompanionAuthentication request]
  -[HMDRemoteLoginReceiverCompanionAuthentication _authenticate]
  -[HMDRemoteLoginReceiverCompanionAuthentication authenticate]
  -[HMDRemoteLoginReceiverCompanionAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:request:]
  -[HMDRemoteLoginReceiverCompanionAuthentication _authenticateAccount:alreadyExists:withCompanionDevice:]


HMDLogEventElectionEventsAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  BOOL isCurrentDeviceInSecondaryResidentCoordinationMesh
 @property  HMDEventCountersManager *eventCountersManager

  // class methods
  +[HMDLogEventElectionEventsAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventElectionEventsAnalyzer .cxx_destruct]
  -[HMDLogEventElectionEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventElectionEventsAnalyzer eventCountersManager]
  -[HMDLogEventElectionEventsAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventElectionEventsAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventElectionEventsAnalyzer initWithEventCountersManager:]
  -[HMDLogEventElectionEventsAnalyzer incrementCountForEventName:]
  -[HMDLogEventElectionEventsAnalyzer fetchCountForEventName:]
  -[HMDLogEventElectionEventsAnalyzer isCurrentDeviceInSecondaryResidentCoordinationMesh]
  -[HMDLogEventElectionEventsAnalyzer setIsCurrentDeviceInSecondaryResidentCoordinationMesh:]


HMDHomeAIPhotosPersonDataInterface : HMDHomeAIPersonDataInterface <HMFLogging, HMIExternalPersonManagerDataSource>
 @property  HMIExternalPersonManager *photosPersonManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeAIPhotosPersonDataInterface logCategory]

  // instance methods
  -[HMDHomeAIPhotosPersonDataInterface logIdentifier]
  -[HMDHomeAIPhotosPersonDataInterface .cxx_destruct]
  -[HMDHomeAIPhotosPersonDataInterface photosPersonManager]
  -[HMDHomeAIPhotosPersonDataInterface fetchSettingsWithCompletion:]
  -[HMDHomeAIPhotosPersonDataInterface handleUpdatedSettings:mirrorOutputFuture:]
  -[HMDHomeAIPhotosPersonDataInterface initWithPersonManagerUUID:homeUUID:workQueue:]
  -[HMDHomeAIPhotosPersonDataInterface initWithPhotosPersonManager:workQueue:]


HMDAssistantAccessControlModifiedEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isEnabled
 @property  unsigned long options
 @property  BOOL areActivityNotificationsEnabledForPersonalRequests
 @property  unsigned long numEnabledAccessories
 @property  unsigned long numCapableAccessories

  // class methods
  +[HMDAssistantAccessControlModifiedEvent eventWithIsEnabled:options:areActivityNotificationsEnabledForPersonalRequests:numEnabledAccessories:numCapableAccessories:]

  // instance methods
  -[HMDAssistantAccessControlModifiedEvent options]
  -[HMDAssistantAccessControlModifiedEvent setOptions:]
  -[HMDAssistantAccessControlModifiedEvent setIsEnabled:]
  -[HMDAssistantAccessControlModifiedEvent isEnabled]
  -[HMDAssistantAccessControlModifiedEvent areActivityNotificationsEnabledForPersonalRequests]
  -[HMDAssistantAccessControlModifiedEvent AWDMessageType]
  -[HMDAssistantAccessControlModifiedEvent metricForAWD]
  -[HMDAssistantAccessControlModifiedEvent setAreActivityNotificationsEnabledForPersonalRequests:]
  -[HMDAssistantAccessControlModifiedEvent numEnabledAccessories]
  -[HMDAssistantAccessControlModifiedEvent setNumEnabledAccessories:]
  -[HMDAssistantAccessControlModifiedEvent numCapableAccessories]
  -[HMDAssistantAccessControlModifiedEvent setNumCapableAccessories:]


AWDHomeKitConfigurationData : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDatabaseSize
 @property  unsigned int databaseSize
 @property  BOOL hasMetadataVersion
 @property  unsigned int metadataVersion
 @property  BOOL hasIsResidentCapable
 @property  BOOL isResidentCapable
 @property  BOOL hasIsResidentEnabled
 @property  BOOL isResidentEnabled
 @property  NSMutableArray *homeConfigurations
 @property  BOOL hasIsDemoConfiguration
 @property  BOOL isDemoConfiguration
 @property  BOOL hasHasWatchDevice
 @property  BOOL hasWatchDevice
 @property  BOOL hasHasActiveWatchDevice
 @property  BOOL hasActiveWatchDevice

  // class methods
  +[AWDHomeKitConfigurationData homeConfigurationsType]

  // instance methods
  -[AWDHomeKitConfigurationData setTimestamp:]
  -[AWDHomeKitConfigurationData copyTo:]
  -[AWDHomeKitConfigurationData .cxx_destruct]
  -[AWDHomeKitConfigurationData mergeFrom:]
  -[AWDHomeKitConfigurationData setHasTimestamp:]
  -[AWDHomeKitConfigurationData dictionaryRepresentation]
  -[AWDHomeKitConfigurationData metadataVersion]
  -[AWDHomeKitConfigurationData hasTimestamp]
  -[AWDHomeKitConfigurationData copyWithZone:]
  -[AWDHomeKitConfigurationData timestamp]
  -[AWDHomeKitConfigurationData readFrom:]
  -[AWDHomeKitConfigurationData writeTo:]
  -[AWDHomeKitConfigurationData isEqual:]
  -[AWDHomeKitConfigurationData databaseSize]
  -[AWDHomeKitConfigurationData isResidentCapable]
  -[AWDHomeKitConfigurationData setMetadataVersion:]
  -[AWDHomeKitConfigurationData hasMetadataVersion]
  -[AWDHomeKitConfigurationData homeConfigurations]
  -[AWDHomeKitConfigurationData isResidentEnabled]
  -[AWDHomeKitConfigurationData setDatabaseSize:]
  -[AWDHomeKitConfigurationData setHasDatabaseSize:]
  -[AWDHomeKitConfigurationData hasDatabaseSize]
  -[AWDHomeKitConfigurationData setHasMetadataVersion:]
  -[AWDHomeKitConfigurationData setIsResidentCapable:]
  -[AWDHomeKitConfigurationData setHasIsResidentCapable:]
  -[AWDHomeKitConfigurationData hasIsResidentCapable]
  -[AWDHomeKitConfigurationData setIsResidentEnabled:]
  -[AWDHomeKitConfigurationData setHasIsResidentEnabled:]
  -[AWDHomeKitConfigurationData hasIsResidentEnabled]
  -[AWDHomeKitConfigurationData clearHomeConfigurations]
  -[AWDHomeKitConfigurationData addHomeConfigurations:]
  -[AWDHomeKitConfigurationData homeConfigurationsCount]
  -[AWDHomeKitConfigurationData homeConfigurationsAtIndex:]
  -[AWDHomeKitConfigurationData setIsDemoConfiguration:]
  -[AWDHomeKitConfigurationData setHasIsDemoConfiguration:]
  -[AWDHomeKitConfigurationData hasIsDemoConfiguration]
  -[AWDHomeKitConfigurationData setHasWatchDevice:]
  -[AWDHomeKitConfigurationData setHasHasWatchDevice:]
  -[AWDHomeKitConfigurationData hasHasWatchDevice]
  -[AWDHomeKitConfigurationData setHasActiveWatchDevice:]
  -[AWDHomeKitConfigurationData setHasHasActiveWatchDevice:]
  -[AWDHomeKitConfigurationData hasHasActiveWatchDevice]
  -[AWDHomeKitConfigurationData setHomeConfigurations:]
  -[AWDHomeKitConfigurationData isDemoConfiguration]
  -[AWDHomeKitConfigurationData hasWatchDevice]
  -[AWDHomeKitConfigurationData hasActiveWatchDevice]


HMDPowerManager : HMFObject
 @property  BOOL networkAccessRequired

  // instance methods
  -[HMDPowerManager dealloc]
  -[HMDPowerManager .cxx_destruct]
  -[HMDPowerManager stop]
  -[HMDPowerManager start]
  -[HMDPowerManager _update]
  -[HMDPowerManager init]
  -[HMDPowerManager setNetworkAccessRequired:]
  -[HMDPowerManager _ensureNetworkInterfaceMonitorStarted]
  -[HMDPowerManager _ensureNetworkInterfaceMonitorStopped]
  -[HMDPowerManager isNetworkAccessRequired]


HMDSettingConstraintModel : HMBModel <HMDSettingConstraintModelProtocol>
 @property  NSNumber *type
 @property  NSNumber *numberValue
 @property  NSString *stringValue
 @property  NSData *dataValue
 @property  NSUUID *hmbModelID
 @property  NSUUID *hmbParentModelID
 @property  NSString *nameForKeyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingConstraintModel hmbProperties]

  // instance methods
  -[HMDSettingConstraintModel copyWithNewParentModelID:]
  -[HMDSettingConstraintModel nameForKeyPath]


AWDHomeKitCameraStream : PBCodable <NSCopying>
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasCertified
 @property  int certified
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasSessionID
 @property  NSString *sessionID
 @property  BOOL hasDuration
 @property  unsigned long duration
 @property  BOOL hasErrorCode
 @property  unsigned int errorCode
 @property  BOOL hasIsLocal
 @property  BOOL isLocal
 @property  BOOL hasInitialConfiguration
 @property  AWDHomeKitCameraStreamConfigure *initialConfiguration
 @property  NSMutableArray *reconfigurations
 @property  BOOL hasWatchIDSConnectionSetup
 @property  AWDHomeKitCameraStreamIDSConnSetup *watchIDSConnectionSetup
 @property  BOOL hasPhoneIDSConnectionSetup
 @property  AWDHomeKitCameraStreamIDSConnSetup *phoneIDSConnectionSetup
 @property  BOOL hasIdsSessionSetup
 @property  AWDHomeKitCameraIDSSessionSetup *idsSessionSetup
 @property  BOOL hasWatchMessaging
 @property  AWDHomeKitCameraStreamMessaging *watchMessaging
 @property  BOOL hasControllerMessaging
 @property  AWDHomeKitCameraStreamMessaging *controllerMessaging
 @property  BOOL hasResidentMessaging
 @property  AWDHomeKitCameraStreamMessaging *residentMessaging
 @property  BOOL hasReceivedFirstFrame
 @property  unsigned int receivedFirstFrame
 @property  BOOL hasUnderlyingErrorDomain
 @property  NSString *underlyingErrorDomain
 @property  BOOL hasUnderlyingErrorCode
 @property  unsigned int underlyingErrorCode
 @property  BOOL hasStartupDelay
 @property  unsigned long startupDelay
 @property  BOOL hasIsStreamStarted
 @property  BOOL isStreamStarted
 @property  BOOL hasResolutionOnClose
 @property  int resolutionOnClose
 @property  NSMutableArray *resolutionCounts

  // class methods
  +[AWDHomeKitCameraStream reconfigurationsType]
  +[AWDHomeKitCameraStream resolutionCountType]

  // instance methods
  -[AWDHomeKitCameraStream hasErrorCode]
  -[AWDHomeKitCameraStream setErrorCode:]
  -[AWDHomeKitCameraStream errorCode]
  -[AWDHomeKitCameraStream setDuration:]
  -[AWDHomeKitCameraStream setIsLocal:]
  -[AWDHomeKitCameraStream setTimestamp:]
  -[AWDHomeKitCameraStream hasDuration]
  -[AWDHomeKitCameraStream copyTo:]
  -[AWDHomeKitCameraStream sessionID]
  -[AWDHomeKitCameraStream .cxx_destruct]
  -[AWDHomeKitCameraStream setHasErrorCode:]
  -[AWDHomeKitCameraStream duration]
  -[AWDHomeKitCameraStream mergeFrom:]
  -[AWDHomeKitCameraStream setHasTimestamp:]
  -[AWDHomeKitCameraStream dictionaryRepresentation]
  -[AWDHomeKitCameraStream hasTimestamp]
  -[AWDHomeKitCameraStream copyWithZone:]
  -[AWDHomeKitCameraStream timestamp]
  -[AWDHomeKitCameraStream readFrom:]
  -[AWDHomeKitCameraStream isLocal]
  -[AWDHomeKitCameraStream setHasDuration:]
  -[AWDHomeKitCameraStream writeTo:]
  -[AWDHomeKitCameraStream setSessionID:]
  -[AWDHomeKitCameraStream isEqual:]
  -[AWDHomeKitCameraStream setUnderlyingErrorDomain:]
  -[AWDHomeKitCameraStream hasUnderlyingErrorDomain]
  -[AWDHomeKitCameraStream setUnderlyingErrorCode:]
  -[AWDHomeKitCameraStream setHasUnderlyingErrorCode:]
  -[AWDHomeKitCameraStream hasUnderlyingErrorCode]
  -[AWDHomeKitCameraStream underlyingErrorDomain]
  -[AWDHomeKitCameraStream underlyingErrorCode]
  -[AWDHomeKitCameraStream hasSessionID]
  -[AWDHomeKitCameraStream hasReceivedFirstFrame]
  -[AWDHomeKitCameraStream hasVendorDetails]
  -[AWDHomeKitCameraStream vendorDetails]
  -[AWDHomeKitCameraStream setVendorDetails:]
  -[AWDHomeKitCameraStream certified]
  -[AWDHomeKitCameraStream setCertified:]
  -[AWDHomeKitCameraStream setHasCertified:]
  -[AWDHomeKitCameraStream hasCertified]
  -[AWDHomeKitCameraStream certifiedAsString:]
  -[AWDHomeKitCameraStream StringAsCertified:]
  -[AWDHomeKitCameraStream setHasIsLocal:]
  -[AWDHomeKitCameraStream hasIsLocal]
  -[AWDHomeKitCameraStream hasInitialConfiguration]
  -[AWDHomeKitCameraStream clearReconfigurations]
  -[AWDHomeKitCameraStream addReconfigurations:]
  -[AWDHomeKitCameraStream reconfigurationsCount]
  -[AWDHomeKitCameraStream reconfigurationsAtIndex:]
  -[AWDHomeKitCameraStream hasWatchIDSConnectionSetup]
  -[AWDHomeKitCameraStream hasPhoneIDSConnectionSetup]
  -[AWDHomeKitCameraStream hasIdsSessionSetup]
  -[AWDHomeKitCameraStream hasWatchMessaging]
  -[AWDHomeKitCameraStream hasControllerMessaging]
  -[AWDHomeKitCameraStream hasResidentMessaging]
  -[AWDHomeKitCameraStream setReceivedFirstFrame:]
  -[AWDHomeKitCameraStream setHasReceivedFirstFrame:]
  -[AWDHomeKitCameraStream setStartupDelay:]
  -[AWDHomeKitCameraStream setHasStartupDelay:]
  -[AWDHomeKitCameraStream hasStartupDelay]
  -[AWDHomeKitCameraStream setIsStreamStarted:]
  -[AWDHomeKitCameraStream setHasIsStreamStarted:]
  -[AWDHomeKitCameraStream hasIsStreamStarted]
  -[AWDHomeKitCameraStream resolutionOnClose]
  -[AWDHomeKitCameraStream setResolutionOnClose:]
  -[AWDHomeKitCameraStream setHasResolutionOnClose:]
  -[AWDHomeKitCameraStream hasResolutionOnClose]
  -[AWDHomeKitCameraStream resolutionOnCloseAsString:]
  -[AWDHomeKitCameraStream StringAsResolutionOnClose:]
  -[AWDHomeKitCameraStream clearResolutionCounts]
  -[AWDHomeKitCameraStream addResolutionCount:]
  -[AWDHomeKitCameraStream resolutionCountsCount]
  -[AWDHomeKitCameraStream resolutionCountAtIndex:]
  -[AWDHomeKitCameraStream initialConfiguration]
  -[AWDHomeKitCameraStream setInitialConfiguration:]
  -[AWDHomeKitCameraStream reconfigurations]
  -[AWDHomeKitCameraStream setReconfigurations:]
  -[AWDHomeKitCameraStream watchIDSConnectionSetup]
  -[AWDHomeKitCameraStream setWatchIDSConnectionSetup:]
  -[AWDHomeKitCameraStream phoneIDSConnectionSetup]
  -[AWDHomeKitCameraStream setPhoneIDSConnectionSetup:]
  -[AWDHomeKitCameraStream idsSessionSetup]
  -[AWDHomeKitCameraStream setIdsSessionSetup:]
  -[AWDHomeKitCameraStream watchMessaging]
  -[AWDHomeKitCameraStream setWatchMessaging:]
  -[AWDHomeKitCameraStream controllerMessaging]
  -[AWDHomeKitCameraStream setControllerMessaging:]
  -[AWDHomeKitCameraStream residentMessaging]
  -[AWDHomeKitCameraStream setResidentMessaging:]
  -[AWDHomeKitCameraStream receivedFirstFrame]
  -[AWDHomeKitCameraStream startupDelay]
  -[AWDHomeKitCameraStream isStreamStarted]
  -[AWDHomeKitCameraStream resolutionCounts]
  -[AWDHomeKitCameraStream setResolutionCounts:]


AWDHomeKitCameraStreamIDSConnSetupParameters : PBCodable <NSCopying>
 @property  BOOL hasConnectionRequested
 @property  unsigned int connectionRequested
 @property  BOOL hasConnectionComplete
 @property  unsigned int connectionComplete

  // instance methods
  -[AWDHomeKitCameraStreamIDSConnSetupParameters copyTo:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters mergeFrom:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters dictionaryRepresentation]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters copyWithZone:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters readFrom:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters writeTo:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters isEqual:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters setConnectionRequested:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters setHasConnectionRequested:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters hasConnectionRequested]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters setConnectionComplete:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters setHasConnectionComplete:]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters hasConnectionComplete]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters connectionRequested]
  -[AWDHomeKitCameraStreamIDSConnSetupParameters connectionComplete]


HMDTargetControllerManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logID
 @property  unsigned char maximumTargets
 @property  unsigned long ticksPerSecond
 @property  NSArray *buttonConfiguration
 @property  NSMutableSet *configuredTargets
 @property  BOOL configurationRefreshed
 @property  HMDHAPAccessory *controller
 @property  NSArray *targetUUIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDTargetControllerManager logCategory]

  // instance methods
  -[HMDTargetControllerManager logIdentifier]
  -[HMDTargetControllerManager workQueue]
  -[HMDTargetControllerManager .cxx_destruct]
  -[HMDTargetControllerManager controller]
  -[HMDTargetControllerManager invalidate]
  -[HMDTargetControllerManager init]
  -[HMDTargetControllerManager buttonConfiguration]
  -[HMDTargetControllerManager logID]
  -[HMDTargetControllerManager setButtonConfiguration:]
  -[HMDTargetControllerManager targetUUIDs]
  -[HMDTargetControllerManager registerForActiveIdentifierNotifications]
  -[HMDTargetControllerManager acknowledgeTargetControlService:active:]
  -[HMDTargetControllerManager updateButtonConfigurationForTarget:]
  -[HMDTargetControllerManager __accessoryNameUpdated:]
  -[HMDTargetControllerManager __accessoryConnected:]
  -[HMDTargetControllerManager __accessoryDisconnected:]
  -[HMDTargetControllerManager __accessoryRemoved:]
  -[HMDTargetControllerManager __characteristicEventsReceived:]
  -[HMDTargetControllerManager initWithTargetControllerAccessory:targets:]
  -[HMDTargetControllerManager configuredTargets]
  -[HMDTargetControllerManager addConfiguredTarget:]
  -[HMDTargetControllerManager removeConfiguredTarget:]
  -[HMDTargetControllerManager resetConfiguredTargets]
  -[HMDTargetControllerManager ticksPerSecond]
  -[HMDTargetControllerManager setTicksPerSecond:]
  -[HMDTargetControllerManager _parseSupportedTargetConfiguration:]
  -[HMDTargetControllerManager __refreshedConfiguration:]
  -[HMDTargetControllerManager _notifyConfigurationRefresh:]
  -[HMDTargetControllerManager refreshConfigurationWithCompletion:]
  -[HMDTargetControllerManager _readSupportedConfigurationWithCompletion:]
  -[HMDTargetControllerManager _refreshConfigurationWithCompletion:]
  -[HMDTargetControllerManager _dataForListTargetsWithOutError:]
  -[HMDTargetControllerManager _listTargetsWithCompletionHandler:]
  -[HMDTargetControllerManager _auditTargets:]
  -[HMDTargetControllerManager _dataForUpdateTarget:name:buttonConfiguration:outError:]
  -[HMDTargetControllerManager _updateName:buttonConfiguration:target:]
  -[HMDTargetControllerManager updateTargetAccessory:name:buttonConfiguration:]
  -[HMDTargetControllerManager _dataForAddTargets:outError:]
  -[HMDTargetControllerManager _postSelectionChangeNotification:object:userInfo:]
  -[HMDTargetControllerManager _addTargets:]
  -[HMDTargetControllerManager addTargetAccessory:buttonConfiguration:]
  -[HMDTargetControllerManager _dataForRemoveTargets:outError:]
  -[HMDTargetControllerManager _removeTargets:]
  -[HMDTargetControllerManager removeTargetAccessory:]
  -[HMDTargetControllerManager _dataForResetTargetsWithOutError:]
  -[HMDTargetControllerManager _resetTargets]
  -[HMDTargetControllerManager __handleActiveIdentifierChange:forCharacteristic:]
  -[HMDTargetControllerManager _handleActiveIdentifierReadResponses:]
  -[HMDTargetControllerManager _registerForActiveIdentifierNotifications]
  -[HMDTargetControllerManager _saveTargetUUIDs]
  -[HMDTargetControllerManager autoConfigureTargets]
  -[HMDTargetControllerManager updateTargets:]
  -[HMDTargetControllerManager targetConfigurationMatchingIdentifier:]
  -[HMDTargetControllerManager targetConfigurationMatchingAccessory:]
  -[HMDTargetControllerManager handleConfigureTargets:responseHandler:]
  -[HMDTargetControllerManager _handleConfigureTargets:responseHandler:]
  -[HMDTargetControllerManager _configureTargetAccessories:reason:targetAccessories:responseHandler:]
  -[HMDTargetControllerManager setConfiguredTargets:]
  -[HMDTargetControllerManager maximumTargets]
  -[HMDTargetControllerManager setMaximumTargets:]
  -[HMDTargetControllerManager configurationRefreshed]
  -[HMDTargetControllerManager setConfigurationRefreshed:]


HMDCameraRecordingSessionSignificantEventManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  HMDCameraSignificantEventFaceClassificationResolver *faceClassificationResolver
 @property  NSMutableArray *significantEvents
 @property  @? significantEventUUIDFactory
 @property  @? faceClassificationUUIDFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSessionSignificantEventManager logCategory]

  // instance methods
  -[HMDCameraRecordingSessionSignificantEventManager resetState]
  -[HMDCameraRecordingSessionSignificantEventManager logIdentifier]
  -[HMDCameraRecordingSessionSignificantEventManager workQueue]
  -[HMDCameraRecordingSessionSignificantEventManager .cxx_destruct]
  -[HMDCameraRecordingSessionSignificantEventManager significantEvents]
  -[HMDCameraRecordingSessionSignificantEventManager initWithWorkQueue:faceClassificationResolver:logIdentifier:]
  -[HMDCameraRecordingSessionSignificantEventManager isAnyEventInAnalyzerFragmentResult:includedInRecordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager significantEventsForAnalyzerFragmentResult:dateOfOccurrence:timeOffsetWithinClip:recordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager _isAnyEventInAnalyzerFrameResults:includedInRecordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager _isAnyEventInAnalyzerEvents:includedInRecordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager _significantEventsForFrameResult:analyzerResult:dateOfOccurrence:timeOffsetWithinClip:recordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager _significantEventsForAnalyzerEvent:dateOfOccurrence:heroFrameData:timeOffsetWithinClip:recordingEventTriggers:]
  -[HMDCameraRecordingSessionSignificantEventManager _significantEventsForEmptyAnalyzerResult:dateOfOccurrence:timeOffsetWithinClip:]
  -[HMDCameraRecordingSessionSignificantEventManager _filteredAndUpdatedSignificantEventsFromSignificantEvents:]
  -[HMDCameraRecordingSessionSignificantEventManager _filteredFaceClassificationsFromFaceClassifications:]
  -[HMDCameraRecordingSessionSignificantEventManager _faceRecognitionSignificantEventForAnalyzerEvent:dateOfOccurrence:heroFrameData:timeOffsetWithinClip:confidenceLevel:]
  -[HMDCameraRecordingSessionSignificantEventManager faceClassificationResolver]
  -[HMDCameraRecordingSessionSignificantEventManager significantEventUUIDFactory]
  -[HMDCameraRecordingSessionSignificantEventManager setSignificantEventUUIDFactory:]
  -[HMDCameraRecordingSessionSignificantEventManager faceClassificationUUIDFactory]
  -[HMDCameraRecordingSessionSignificantEventManager setFaceClassificationUUIDFactory:]


AWDHomeKitCloudSync : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasPushCount
 @property  unsigned int pushCount
 @property  BOOL hasFetchCount
 @property  unsigned int fetchCount
 @property  BOOL hasUploadCount
 @property  unsigned int uploadCount
 @property  BOOL hasUploadErrorCount
 @property  unsigned int uploadErrorCount
 @property  NSMutableArray *topReasons
 @property  NSMutableArray *topErrors
 @property  BOOL hasUploadMaximumDelayReached
 @property  BOOL uploadMaximumDelayReached
 @property  BOOL hasHasDecryptionFailed
 @property  BOOL hasDecryptionFailed
 @property  BOOL hasLastDecryptionFailed
 @property  BOOL lastDecryptionFailed
 @property  BOOL hasDataSyncState
 @property  int dataSyncState
 @property  BOOL hasHomeManagerFetchCount
 @property  unsigned int homeManagerFetchCount
 @property  BOOL hasHomeZoneFetchCount
 @property  unsigned int homeZoneFetchCount
 @property  BOOL hasHomeManagerUploadCount
 @property  unsigned int homeManagerUploadCount
 @property  BOOL hasHomeZoneUploadCount
 @property  unsigned int homeZoneUploadCount
 @property  BOOL hasHomeDataMegabytesFetched
 @property  unsigned int homeDataMegabytesFetched
 @property  BOOL hasHomeDataMegabytesPushed
 @property  unsigned int homeDataMegabytesPushed
 @property  BOOL hasLegacyHomeDataMegabytesFetched
 @property  unsigned int legacyHomeDataMegabytesFetched
 @property  BOOL hasLegacyHomeDataMegabytesPushed
 @property  unsigned int legacyHomeDataMegabytesPushed

  // class methods
  +[AWDHomeKitCloudSync topReasonsType]
  +[AWDHomeKitCloudSync topErrorsType]

  // instance methods
  -[AWDHomeKitCloudSync setTimestamp:]
  -[AWDHomeKitCloudSync copyTo:]
  -[AWDHomeKitCloudSync .cxx_destruct]
  -[AWDHomeKitCloudSync mergeFrom:]
  -[AWDHomeKitCloudSync setHasTimestamp:]
  -[AWDHomeKitCloudSync dictionaryRepresentation]
  -[AWDHomeKitCloudSync hasTimestamp]
  -[AWDHomeKitCloudSync copyWithZone:]
  -[AWDHomeKitCloudSync timestamp]
  -[AWDHomeKitCloudSync readFrom:]
  -[AWDHomeKitCloudSync writeTo:]
  -[AWDHomeKitCloudSync isEqual:]
  -[AWDHomeKitCloudSync dataSyncState]
  -[AWDHomeKitCloudSync pushCount]
  -[AWDHomeKitCloudSync setPushCount:]
  -[AWDHomeKitCloudSync hasPushCount]
  -[AWDHomeKitCloudSync setDataSyncState:]
  -[AWDHomeKitCloudSync setHasPushCount:]
  -[AWDHomeKitCloudSync setFetchCount:]
  -[AWDHomeKitCloudSync setHasFetchCount:]
  -[AWDHomeKitCloudSync hasFetchCount]
  -[AWDHomeKitCloudSync setUploadCount:]
  -[AWDHomeKitCloudSync setHasUploadCount:]
  -[AWDHomeKitCloudSync hasUploadCount]
  -[AWDHomeKitCloudSync setUploadErrorCount:]
  -[AWDHomeKitCloudSync setHasUploadErrorCount:]
  -[AWDHomeKitCloudSync hasUploadErrorCount]
  -[AWDHomeKitCloudSync clearTopReasons]
  -[AWDHomeKitCloudSync addTopReasons:]
  -[AWDHomeKitCloudSync topReasonsCount]
  -[AWDHomeKitCloudSync topReasonsAtIndex:]
  -[AWDHomeKitCloudSync clearTopErrors]
  -[AWDHomeKitCloudSync addTopErrors:]
  -[AWDHomeKitCloudSync topErrorsCount]
  -[AWDHomeKitCloudSync topErrorsAtIndex:]
  -[AWDHomeKitCloudSync setUploadMaximumDelayReached:]
  -[AWDHomeKitCloudSync setHasUploadMaximumDelayReached:]
  -[AWDHomeKitCloudSync hasUploadMaximumDelayReached]
  -[AWDHomeKitCloudSync setHasDecryptionFailed:]
  -[AWDHomeKitCloudSync setHasHasDecryptionFailed:]
  -[AWDHomeKitCloudSync hasHasDecryptionFailed]
  -[AWDHomeKitCloudSync setLastDecryptionFailed:]
  -[AWDHomeKitCloudSync setHasLastDecryptionFailed:]
  -[AWDHomeKitCloudSync hasLastDecryptionFailed]
  -[AWDHomeKitCloudSync setHasDataSyncState:]
  -[AWDHomeKitCloudSync hasDataSyncState]
  -[AWDHomeKitCloudSync dataSyncStateAsString:]
  -[AWDHomeKitCloudSync StringAsDataSyncState:]
  -[AWDHomeKitCloudSync setHomeManagerFetchCount:]
  -[AWDHomeKitCloudSync setHasHomeManagerFetchCount:]
  -[AWDHomeKitCloudSync hasHomeManagerFetchCount]
  -[AWDHomeKitCloudSync setHomeZoneFetchCount:]
  -[AWDHomeKitCloudSync setHasHomeZoneFetchCount:]
  -[AWDHomeKitCloudSync hasHomeZoneFetchCount]
  -[AWDHomeKitCloudSync setHomeManagerUploadCount:]
  -[AWDHomeKitCloudSync setHasHomeManagerUploadCount:]
  -[AWDHomeKitCloudSync hasHomeManagerUploadCount]
  -[AWDHomeKitCloudSync setHomeZoneUploadCount:]
  -[AWDHomeKitCloudSync setHasHomeZoneUploadCount:]
  -[AWDHomeKitCloudSync hasHomeZoneUploadCount]
  -[AWDHomeKitCloudSync setHomeDataMegabytesFetched:]
  -[AWDHomeKitCloudSync setHasHomeDataMegabytesFetched:]
  -[AWDHomeKitCloudSync hasHomeDataMegabytesFetched]
  -[AWDHomeKitCloudSync setHomeDataMegabytesPushed:]
  -[AWDHomeKitCloudSync setHasHomeDataMegabytesPushed:]
  -[AWDHomeKitCloudSync hasHomeDataMegabytesPushed]
  -[AWDHomeKitCloudSync setLegacyHomeDataMegabytesFetched:]
  -[AWDHomeKitCloudSync setHasLegacyHomeDataMegabytesFetched:]
  -[AWDHomeKitCloudSync hasLegacyHomeDataMegabytesFetched]
  -[AWDHomeKitCloudSync setLegacyHomeDataMegabytesPushed:]
  -[AWDHomeKitCloudSync setHasLegacyHomeDataMegabytesPushed:]
  -[AWDHomeKitCloudSync hasLegacyHomeDataMegabytesPushed]
  -[AWDHomeKitCloudSync fetchCount]
  -[AWDHomeKitCloudSync uploadCount]
  -[AWDHomeKitCloudSync uploadErrorCount]
  -[AWDHomeKitCloudSync topReasons]
  -[AWDHomeKitCloudSync setTopReasons:]
  -[AWDHomeKitCloudSync topErrors]
  -[AWDHomeKitCloudSync setTopErrors:]
  -[AWDHomeKitCloudSync uploadMaximumDelayReached]
  -[AWDHomeKitCloudSync hasDecryptionFailed]
  -[AWDHomeKitCloudSync lastDecryptionFailed]
  -[AWDHomeKitCloudSync homeManagerFetchCount]
  -[AWDHomeKitCloudSync homeZoneFetchCount]
  -[AWDHomeKitCloudSync homeManagerUploadCount]
  -[AWDHomeKitCloudSync homeZoneUploadCount]
  -[AWDHomeKitCloudSync homeDataMegabytesFetched]
  -[AWDHomeKitCloudSync homeDataMegabytesPushed]
  -[AWDHomeKitCloudSync legacyHomeDataMegabytesFetched]
  -[AWDHomeKitCloudSync legacyHomeDataMegabytesPushed]


HMDSiriRemoteInputServer : NSObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_xpc_object> *xpcServer
 @property  NSObject<OS_xpc_object> *xpcConnection
 @property  NSHashTable *siriSessions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriRemoteInputServer logCategory]

  // instance methods
  -[HMDSiriRemoteInputServer xpcConnection]
  -[HMDSiriRemoteInputServer handleDisconnection]
  -[HMDSiriRemoteInputServer dealloc]
  -[HMDSiriRemoteInputServer sendMsg:args:]
  -[HMDSiriRemoteInputServer .cxx_destruct]
  -[HMDSiriRemoteInputServer setXpcConnection:]
  -[HMDSiriRemoteInputServer setQueue:]
  -[HMDSiriRemoteInputServer initWithQueue:]
  -[HMDSiriRemoteInputServer sessionForIdentifier:]
  -[HMDSiriRemoteInputServer invalidate]
  -[HMDSiriRemoteInputServer queue]
  -[HMDSiriRemoteInputServer handleConnection:]
  -[HMDSiriRemoteInputServer xpcServer]
  -[HMDSiriRemoteInputServer setXpcServer:]
  -[HMDSiriRemoteInputServer registerSiriSession:]
  -[HMDSiriRemoteInputServer deregisterSiriSession:]
  -[HMDSiriRemoteInputServer handleServerEvent:]
  -[HMDSiriRemoteInputServer handleConnectionEvent:]
  -[HMDSiriRemoteInputServer handleMsg:]
  -[HMDSiriRemoteInputServer sendMsgIfCheckedIn:args:]
  -[HMDSiriRemoteInputServer handleCheckInMsg:]
  -[HMDSiriRemoteInputServer handleStartStreamMsg:args:]
  -[HMDSiriRemoteInputServer handleStopStreamMsg:]
  -[HMDSiriRemoteInputServer siriSessions]
  -[HMDSiriRemoteInputServer setSiriSessions:]


HMDCameraSnapshotSender : HMFObject <HMFLogging>
 @property  NSUUID *uniqueIdentifier
 @property  HMDDevice *device
 @property  HMDAccessory *accessory
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotSender logCategory]

  // instance methods
  -[HMDCameraSnapshotSender accessory]
  -[HMDCameraSnapshotSender logIdentifier]
  -[HMDCameraSnapshotSender sessionID]
  -[HMDCameraSnapshotSender workQueue]
  -[HMDCameraSnapshotSender .cxx_destruct]
  -[HMDCameraSnapshotSender delegateQueue]
  -[HMDCameraSnapshotSender device]
  -[HMDCameraSnapshotSender uniqueIdentifier]
  -[HMDCameraSnapshotSender initWithSessionID:workQueue:device:accessory:delegateQueue:uniqueIdentifier:]
  -[HMDCameraSnapshotSender _sendImageSendFailure:]


HMDCameraSnapshotSessionID : HMDCameraSessionID
 @property  NSString *snapshotCharacteristicEventUUID
 @property  unsigned long snapshotReason
 @property  BOOL snapshotRequestForBulletin
 @property  NSNumber *streamingTier

  // instance methods
  -[HMDCameraSnapshotSessionID .cxx_destruct]
  -[HMDCameraSnapshotSessionID copyWithZone:]
  -[HMDCameraSnapshotSessionID snapshotReason]
  -[HMDCameraSnapshotSessionID initWithSessionID:remoteDevice:cameraSessionAppID:descriptionString:spiClient:snapshotReason:snapshotRequestForBulletin:snapshotCharacteristicEventUUID:streamingTier:]
  -[HMDCameraSnapshotSessionID initWithAccessory:message:]
  -[HMDCameraSnapshotSessionID snapshotCharacteristicEventUUID]
  -[HMDCameraSnapshotSessionID isSnapshotRequestForBulletin]
  -[HMDCameraSnapshotSessionID streamingTier]


HMDCameraClipFinalizeClipOperation : HMDCameraClipOperation
  // class methods
  +[HMDCameraClipFinalizeClipOperation logCategory]
  +[HMDCameraClipFinalizeClipOperation cameraClipOperationType]

  // instance methods
  -[HMDCameraClipFinalizeClipOperation main]


HMDWatchConnectivityLogEventManager : HMFObject <HMFTimerDelegate>
 @property  BOOL hasCompleteReport
 @property  unsigned long watchAddedNotificationCountForCurrentIncompleteReport
 @property  unsigned long watchRemovedNotificationCountForCurrentIncompleteReport
 @property  unsigned long watchAddedNotificationCountForLastCompleteReport
 @property  unsigned long watchRemovedNotificationCountForLastCompleteReport
 @property  HMFTimer *watchConnectivityLogEventManagerTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWatchConnectivityLogEventManager sharedInstance]

  // instance methods
  -[HMDWatchConnectivityLogEventManager timerDidFire:]
  -[HMDWatchConnectivityLogEventManager .cxx_destruct]
  -[HMDWatchConnectivityLogEventManager init]
  -[HMDWatchConnectivityLogEventManager incrementWatchAddedNotificationCount]
  -[HMDWatchConnectivityLogEventManager incrementWatchRemovedNotificationCount]
  -[HMDWatchConnectivityLogEventManager completeCurrentReport]
  -[HMDWatchConnectivityLogEventManager currentWatchConnectivitySnapshot]
  -[HMDWatchConnectivityLogEventManager hasCompleteReport]
  -[HMDWatchConnectivityLogEventManager setHasCompleteReport:]
  -[HMDWatchConnectivityLogEventManager watchAddedNotificationCountForCurrentIncompleteReport]
  -[HMDWatchConnectivityLogEventManager setWatchAddedNotificationCountForCurrentIncompleteReport:]
  -[HMDWatchConnectivityLogEventManager watchRemovedNotificationCountForCurrentIncompleteReport]
  -[HMDWatchConnectivityLogEventManager setWatchRemovedNotificationCountForCurrentIncompleteReport:]
  -[HMDWatchConnectivityLogEventManager watchAddedNotificationCountForLastCompleteReport]
  -[HMDWatchConnectivityLogEventManager setWatchAddedNotificationCountForLastCompleteReport:]
  -[HMDWatchConnectivityLogEventManager watchRemovedNotificationCountForLastCompleteReport]
  -[HMDWatchConnectivityLogEventManager setWatchRemovedNotificationCountForLastCompleteReport:]
  -[HMDWatchConnectivityLogEventManager watchConnectivityLogEventManagerTimer]
  -[HMDWatchConnectivityLogEventManager setWatchConnectivityLogEventManagerTimer:]


HMDWatchConnectivityLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long watchAddedNotificationCount
 @property  unsigned long watchRemovedNotificationCount
 @property  BOOL reportComplete

  // instance methods
  -[HMDWatchConnectivityLogEvent init]
  -[HMDWatchConnectivityLogEvent AWDMessageType]
  -[HMDWatchConnectivityLogEvent metricForAWD]
  -[HMDWatchConnectivityLogEvent watchAddedNotificationCount]
  -[HMDWatchConnectivityLogEvent setWatchAddedNotificationCount:]
  -[HMDWatchConnectivityLogEvent watchRemovedNotificationCount]
  -[HMDWatchConnectivityLogEvent setWatchRemovedNotificationCount:]
  -[HMDWatchConnectivityLogEvent isReportComplete]
  -[HMDWatchConnectivityLogEvent setReportComplete:]


HMDStreamInterface : HMFObject <HMFLogging>
 @property  HMDCameraStreamSessionID *sessionID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <HMDCameraRemoteStreamProtocol> *sessionHandler
 @property  int localRTPSocket
 @property  unsigned long state
 @property  NSObject<OS_dispatch_queue> *propertyQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDStreamInterface logCategory]

  // instance methods
  -[HMDStreamInterface propertyQueue]
  -[HMDStreamInterface logIdentifier]
  -[HMDStreamInterface sessionID]
  -[HMDStreamInterface workQueue]
  -[HMDStreamInterface state]
  -[HMDStreamInterface dealloc]
  -[HMDStreamInterface .cxx_destruct]
  -[HMDStreamInterface delegateQueue]
  -[HMDStreamInterface setState:]
  -[HMDStreamInterface sessionHandler]
  -[HMDStreamInterface initWithSessionID:workQueue:delegateQueue:sessionHandler:]
  -[HMDStreamInterface setStreamInterfaceState:]
  -[HMDStreamInterface openSocketWithNetworkConfig:]
  -[HMDStreamInterface extractNetworkConfig:peerNameExtractor:]
  -[HMDStreamInterface loadMiscFields:]
  -[HMDStreamInterface localRTPSocket]
  -[HMDStreamInterface setLocalRTPSocket:]


HMDAccessoryDiagnosticsSession : HMFObject <HMFLogging, HMDAccessoryDataStreamAdapterDelegate>
 @property  unsigned long maxBytes
 @property  unsigned long bytesWritten
 @property  HMDHAPAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *reason
 @property  HMDAccessoryDiagnosticsSettings *settings
 @property  HMDAccessoryDataStreamAdapter *dataStream
 @property  @? pendingCompletionHandler
 @property  NSString *filePath
 @property  NSDictionary *urlParameters
 @property  NSNumber *expectedDataSequenceNumber
 @property  NSFileHandle *fileHandle
 @property  BOOL readyForDataTransfer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryDiagnosticsSession logCategory]

  // instance methods
  -[HMDAccessoryDiagnosticsSession shutDown]
  -[HMDAccessoryDiagnosticsSession accessory]
  -[HMDAccessoryDiagnosticsSession setFilePath:]
  -[HMDAccessoryDiagnosticsSession logIdentifier]
  -[HMDAccessoryDiagnosticsSession _handleReceivedData:]
  -[HMDAccessoryDiagnosticsSession workQueue]
  -[HMDAccessoryDiagnosticsSession bytesWritten]
  -[HMDAccessoryDiagnosticsSession filePath]
  -[HMDAccessoryDiagnosticsSession attributeDescriptions]
  -[HMDAccessoryDiagnosticsSession dealloc]
  -[HMDAccessoryDiagnosticsSession fileHandle]
  -[HMDAccessoryDiagnosticsSession .cxx_destruct]
  -[HMDAccessoryDiagnosticsSession settings]
  -[HMDAccessoryDiagnosticsSession reason]
  -[HMDAccessoryDiagnosticsSession setFileHandle:]
  -[HMDAccessoryDiagnosticsSession setBytesWritten:]
  -[HMDAccessoryDiagnosticsSession readyForDataTransfer]
  -[HMDAccessoryDiagnosticsSession fileExtension]
  -[HMDAccessoryDiagnosticsSession urlParameters]
  -[HMDAccessoryDiagnosticsSession pendingCompletionHandler]
  -[HMDAccessoryDiagnosticsSession setPendingCompletionHandler:]
  -[HMDAccessoryDiagnosticsSession _createLogFile]
  -[HMDAccessoryDiagnosticsSession dataStreamAdapter:didReceiveData:]
  -[HMDAccessoryDiagnosticsSession dataStreamAdapterDidCompleteDataRead:]
  -[HMDAccessoryDiagnosticsSession dataStreamAdapterDidFailDataRead:]
  -[HMDAccessoryDiagnosticsSession initWithAccessory:workQueue:settings:]
  -[HMDAccessoryDiagnosticsSession setUpWithOptions:completion:]
  -[HMDAccessoryDiagnosticsSession _setUpWithOptions:completion:]
  -[HMDAccessoryDiagnosticsSession readDataWithCompletion:]
  -[HMDAccessoryDiagnosticsSession _validDataSequenceNumber:]
  -[HMDAccessoryDiagnosticsSession _callCompletionHandlerWithError:]
  -[HMDAccessoryDiagnosticsSession dataStream]
  -[HMDAccessoryDiagnosticsSession setDataStream:]
  -[HMDAccessoryDiagnosticsSession setUrlParameters:]
  -[HMDAccessoryDiagnosticsSession expectedDataSequenceNumber]
  -[HMDAccessoryDiagnosticsSession setExpectedDataSequenceNumber:]
  -[HMDAccessoryDiagnosticsSession setReadyForDataTransfer:]
  -[HMDAccessoryDiagnosticsSession maxBytes]
  -[HMDAccessoryDiagnosticsSession setMaxBytes:]


HMDHomeNFCReaderKey : HMFObject <NSSecureCoding, NSCopying>
 @property  NSData *publicKeyExternalRepresentation
 @property  NSData *publicKey
 @property  NSData *externalRepresentation
 @property  NSData *privateKey
 @property  NSData *identifier

  // class methods
  +[HMDHomeNFCReaderKey supportsSecureCoding]
  +[HMDHomeNFCReaderKey identifierForKey:]
  +[HMDHomeNFCReaderKey createRandomKey]
  +[HMDHomeNFCReaderKey createWithExternalRepresentation:]
  +[HMDHomeNFCReaderKey publicKeyWithPublicKeyExternalRepresentation:]
  +[HMDHomeNFCReaderKey keychainItemAccountAttributeValueWithHome:keyIdentifier:]
  +[HMDHomeNFCReaderKey createWithKeychainItem:]

  // instance methods
  -[HMDHomeNFCReaderKey identifier]
  -[HMDHomeNFCReaderKey privateKey]
  -[HMDHomeNFCReaderKey encodeWithCoder:]
  -[HMDHomeNFCReaderKey publicKey]
  -[HMDHomeNFCReaderKey attributeDescriptions]
  -[HMDHomeNFCReaderKey .cxx_destruct]
  -[HMDHomeNFCReaderKey copyWithZone:]
  -[HMDHomeNFCReaderKey externalRepresentation]
  -[HMDHomeNFCReaderKey isEqual:]
  -[HMDHomeNFCReaderKey initWithCoder:]
  -[HMDHomeNFCReaderKey initWithIdentifier:privateKey:publicKeyExternalRepresentation:]
  -[HMDHomeNFCReaderKey publicKeyExternalRepresentation]
  -[HMDHomeNFCReaderKey createKeychainItemForHome:]


HMDMediaPlaybackActionAsCharacteristicWriteRequests : HMFObject
 @property  HMDMediaPlaybackAction *residualAction
 @property  NSArray *characteristicWriteRequests

  // instance methods
  -[HMDMediaPlaybackActionAsCharacteristicWriteRequests .cxx_destruct]
  -[HMDMediaPlaybackActionAsCharacteristicWriteRequests init]
  -[HMDMediaPlaybackActionAsCharacteristicWriteRequests initWithAction:characteristicWriteRequests:]
  -[HMDMediaPlaybackActionAsCharacteristicWriteRequests residualAction]
  -[HMDMediaPlaybackActionAsCharacteristicWriteRequests characteristicWriteRequests]


HMDHomeLightBrightnessLoggerEvent : BMEventBase <BMStoreData, BMProtoBufWrapper>
 @property  NSString *homeUUID
 @property  NSString *accessoryUUID
 @property  NSString *characteristicUUID
 @property  NSString *brightness
 @property  unsigned int dataVersion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeLightBrightnessLoggerEvent eventWithData:dataVersion:]

  // instance methods
  -[HMDHomeLightBrightnessLoggerEvent accessoryUUID]
  -[HMDHomeLightBrightnessLoggerEvent brightness]
  -[HMDHomeLightBrightnessLoggerEvent encodeAsProto]
  -[HMDHomeLightBrightnessLoggerEvent .cxx_destruct]
  -[HMDHomeLightBrightnessLoggerEvent initWithProto:]
  -[HMDHomeLightBrightnessLoggerEvent homeUUID]
  -[HMDHomeLightBrightnessLoggerEvent proto]
  -[HMDHomeLightBrightnessLoggerEvent serialize]
  -[HMDHomeLightBrightnessLoggerEvent initWithProtoData:]
  -[HMDHomeLightBrightnessLoggerEvent dataVersion]
  -[HMDHomeLightBrightnessLoggerEvent characteristicUUID]
  -[HMDHomeLightBrightnessLoggerEvent initWithHomeUUID:accessoryUUID:characteristicUUID:brightness:]


HMDLockLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *accessoryUUID
 @property  NSString *lockStatus
 @property  NSString *characteristicUUID
 @property  NSString *timeStamp
 @property  NSString *homePresence

  // instance methods
  -[HMDLockLogEvent accessoryUUID]
  -[HMDLockLogEvent eventName]
  -[HMDLockLogEvent .cxx_destruct]
  -[HMDLockLogEvent timeStamp]
  -[HMDLockLogEvent characteristicUUID]
  -[HMDLockLogEvent serializedEvent]
  -[HMDLockLogEvent homePresence]
  -[HMDLockLogEvent initWithLockStatus:accessoryUUID:characteristicUUID:timeStamp:homeUUID:homePresence:]
  -[HMDLockLogEvent lockStatus]


HMDRemoteLoginInitiatorAuthenticationSession : HMDRemoteLoginInitiatorSession
 @property  HMDRemoteLoginInitiatorAuthentication *remoteAuthentication
 @property  @? completion

  // instance methods
  -[HMDRemoteLoginInitiatorAuthenticationSession completion]
  -[HMDRemoteLoginInitiatorAuthenticationSession dealloc]
  -[HMDRemoteLoginInitiatorAuthenticationSession .cxx_destruct]
  -[HMDRemoteLoginInitiatorAuthenticationSession remoteAuthentication]
  -[HMDRemoteLoginInitiatorAuthenticationSession initWithSessionID:remoteAuthentication:completion:home:]


HMDSiriEndpointProfileAccessorySettingFields : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointProfileAccessorySettingFields logCategory]
  +[HMDSiriEndpointProfileAccessorySettingFields keyPaths]
  +[HMDSiriEndpointProfileAccessorySettingFields fieldKeyForKeyPath:]
  +[HMDSiriEndpointProfileAccessorySettingFields booleanValueKeyPaths]
  +[HMDSiriEndpointProfileAccessorySettingFields numberValueKeyPaths]
  +[HMDSiriEndpointProfileAccessorySettingFields languageValueKeyPaths]

  // instance methods
  -[HMDSiriEndpointProfileAccessorySettingFields attributeDescriptions]
  -[HMDSiriEndpointProfileAccessorySettingFields .cxx_destruct]
  -[HMDSiriEndpointProfileAccessorySettingFields init]
  -[HMDSiriEndpointProfileAccessorySettingFields setBoolValue:forKeyPath:]
  -[HMDSiriEndpointProfileAccessorySettingFields setNumberValue:forKeyPath:]
  -[HMDSiriEndpointProfileAccessorySettingFields setLanguageValue:forKeyPath:]
  -[HMDSiriEndpointProfileAccessorySettingFields serializeFields]


HMDSiriEndpointSessionStateTypeWrapper : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long value
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointSessionStateTypeWrapper parsedFromData:error:]

  // instance methods
  -[HMDSiriEndpointSessionStateTypeWrapper initWithValue:]
  -[HMDSiriEndpointSessionStateTypeWrapper parseFromData:error:]
  -[HMDSiriEndpointSessionStateTypeWrapper setValue:]
  -[HMDSiriEndpointSessionStateTypeWrapper copyWithZone:]
  -[HMDSiriEndpointSessionStateTypeWrapper value]
  -[HMDSiriEndpointSessionStateTypeWrapper isEqual:]
  -[HMDSiriEndpointSessionStateTypeWrapper init]
  -[HMDSiriEndpointSessionStateTypeWrapper serializeWithError:]


HMDDatabaseZoneManagerConfiguration : HMFObject <NSCopying, NSMutableCopying>
 @property  BOOL zoneOwner
 @property  BOOL shouldCreateZone
 @property  NSSet *externalRecordTypesForSubscriptions
 @property  HMDHomeKitVersion *minimumHomeKitVersion
 @property  NSSet *requiredSupportedFeatures
 @property  HMBCloudZoneConfiguration *cloudZoneConfiguration

  // instance methods
  -[HMDDatabaseZoneManagerConfiguration attributeDescriptions]
  -[HMDDatabaseZoneManagerConfiguration .cxx_destruct]
  -[HMDDatabaseZoneManagerConfiguration copyWithZone:]
  -[HMDDatabaseZoneManagerConfiguration mutableCopyWithZone:]
  -[HMDDatabaseZoneManagerConfiguration isEqual:]
  -[HMDDatabaseZoneManagerConfiguration init]
  -[HMDDatabaseZoneManagerConfiguration isZoneOwner]
  -[HMDDatabaseZoneManagerConfiguration setZoneOwner:]
  -[HMDDatabaseZoneManagerConfiguration shouldCreateZone]
  -[HMDDatabaseZoneManagerConfiguration setShouldCreateZone:]
  -[HMDDatabaseZoneManagerConfiguration externalRecordTypesForSubscriptions]
  -[HMDDatabaseZoneManagerConfiguration setExternalRecordTypesForSubscriptions:]
  -[HMDDatabaseZoneManagerConfiguration minimumHomeKitVersion]
  -[HMDDatabaseZoneManagerConfiguration setMinimumHomeKitVersion:]
  -[HMDDatabaseZoneManagerConfiguration requiredSupportedFeatures]
  -[HMDDatabaseZoneManagerConfiguration setRequiredSupportedFeatures:]
  -[HMDDatabaseZoneManagerConfiguration cloudZoneConfiguration]
  -[HMDDatabaseZoneManagerConfiguration setCloudZoneConfiguration:]


HMDMutableDatabaseZoneManagerConfiguration : HMDDatabaseZoneManagerConfiguration
 @property  BOOL zoneOwner
 @property  BOOL shouldCreateZone
 @property  NSSet *externalRecordTypesForSubscriptions
 @property  HMDHomeKitVersion *minimumHomeKitVersion
 @property  NSSet *requiredSupportedFeatures
 @property  HMBCloudZoneConfiguration *cloudZoneConfiguration

  // instance methods
  -[HMDMutableDatabaseZoneManagerConfiguration copyWithZone:]


HMDPersonManager : HMFObject <HMBLocalZoneModelObserver, HMDDatabaseZoneManagerDataSource, HMDDatabaseZoneManagerDelegate, HMDPersonCoreDataManagerDelegate, HMFLogging, HMFTimerDelegate, HMDPersonDataSource>
 @property  NSString *logIdentifier
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  HMFTimer *unassociatedFaceCropsCleanupTimer
 @property  unsigned long fetchBatchLimit
 @property  @? unassociatedFaceCropsCleanupTimerFactory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDDatabaseZoneManager *zoneManager
 @property  NSSet *dataInterfaces
 @property  NSUUID *UUID
 @property  BOOL syncsPersonData
 @property  BOOL sharesFaceClassifications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL dataAvailable
 @property  BOOL currentDeviceAvailableResident
 @property  <HMDPersonManagerSettings> *settings

  // class methods
  +[HMDPersonManager logCategory]
  +[HMDPersonManager zoneNameForZoneUUID:]

  // instance methods
  -[HMDPersonManager timerDidFire:]
  -[HMDPersonManager logIdentifier]
  -[HMDPersonManager workQueue]
  -[HMDPersonManager attributeDescriptions]
  -[HMDPersonManager dealloc]
  -[HMDPersonManager .cxx_destruct]
  -[HMDPersonManager cloudZone]
  -[HMDPersonManager UUID]
  -[HMDPersonManager settings]
  -[HMDPersonManager zoneManager]
  -[HMDPersonManager localZone:didProcessModelDeletion:]
  -[HMDPersonManager localZone:didProcessModelUpdate:]
  -[HMDPersonManager localZone:didProcessModelCreation:]
  -[HMDPersonManager localZone]
  -[HMDPersonManager isDataSyncInProgress]
  -[HMDPersonManager isDataAvailable]
  -[HMDPersonManager setCloudZone:]
  -[HMDPersonManager setLocalZone:]
  -[HMDPersonManager manager:shouldShareWithUser:]
  -[HMDPersonManager zoneManagerDidStart:]
  -[HMDPersonManager zoneManagerDidStop:]
  -[HMDPersonManager configureWithHome:]
  -[HMDPersonManager handleFaceMisclassificationForFaceCropData:personUUID:]
  -[HMDPersonManager isCurrentDeviceAvailableResident]
  -[HMDPersonManager initWithUUID:zoneManager:dataInterfaces:workQueue:]
  -[HMDPersonManager sharesFaceClassifications]
  -[HMDPersonManager handleUserPrivilegeDidChangeNotification:]
  -[HMDPersonManager handleResidentWasAddedNotification:]
  -[HMDPersonManager handleResidentWasUpdatedNotification:]
  -[HMDPersonManager handleResidentWasRemovedNotification:]
  -[HMDPersonManager handleDataSyncInProgressChangedNotification:]
  -[HMDPersonManager coreDataManager:didUpdatePersons:]
  -[HMDPersonManager coreDataManager:didRemovePersonsWithUUIDs:]
  -[HMDPersonManager performCloudPull]
  -[HMDPersonManager enumeratePersonsUsingBlock:]
  -[HMDPersonManager enumerateFaceCropsUsingBlock:]
  -[HMDPersonManager enumerateUnassociatedFaceCropsUsingBlock:]
  -[HMDPersonManager enumeratePersonFaceCropsUsingBlock:]
  -[HMDPersonManager enumerateFaceprintsUsingBlock:]
  -[HMDPersonManager personsWithUUIDs:]
  -[HMDPersonManager faceCropsWithUUIDs:]
  -[HMDPersonManager faceCropUUIDsForPersonWithUUID:]
  -[HMDPersonManager faceCropsForPersonsWithUUIDs:]
  -[HMDPersonManager faceprintsForFaceCropsWithUUIDs:]
  -[HMDPersonManager addOrUpdatePersons:]
  -[HMDPersonManager addOrUpdateFaceCrops:]
  -[HMDPersonManager addOrUpdateFaceprints:]
  -[HMDPersonManager associateFaceCropsWithUUIDs:toPersonWithUUID:forSource:]
  -[HMDPersonManager disassociateFaceCropsWithUUIDs:]
  -[HMDPersonManager removePersonsWithUUIDs:]
  -[HMDPersonManager removeFaceCropsWithUUIDs:]
  -[HMDPersonManager removeFaceprintsWithUUIDs:]
  -[HMDPersonManager createBatchChange]
  -[HMDPersonManager removeAllAssociatedData]
  -[HMDPersonManager removePersonZones]
  -[HMDPersonManager syncsDataToAllUsers]
  -[HMDPersonManager personWithUUID:]
  -[HMDPersonManager unassociatedFaceCropWithUUID:]
  -[HMDPersonManager personFaceCropWithUnassociatedFaceCropUUID:]
  -[HMDPersonManager faceCropsForPersonWithUUID:]
  -[HMDPersonManager addUnassociatedFaceCropWithData:]
  -[HMDPersonManager _createOrRemoveZonesForSettings:]
  -[HMDPersonManager _unassociatedFaceCropsModelsWithUUIDs:]
  -[HMDPersonManager _faceCropsModelsWithUUIDs:]
  -[HMDPersonManager _removeFaceprintsForFaceCropsWithUUIDs:]
  -[HMDPersonManager _handleCreatedOrUpdatedModel:mirrorOutputFuture:]
  -[HMDPersonManager _handleDeletedModel:mirrorOutputFuture:]
  -[HMDPersonManager _notifyDataInterfacesOfCurrentIsCurrentDeviceAvailableResident]
  -[HMDPersonManager _notifyDataInterfacesOfCurrentIsDataSyncInProgress]
  -[HMDPersonManager _createZones]
  -[HMDPersonManager _cleanUpExpiredUnassociatedFaceCrops]
  -[HMDPersonManager syncsPersonData]
  -[HMDPersonManager unassociatedFaceCropsCleanupTimer]
  -[HMDPersonManager setUnassociatedFaceCropsCleanupTimer:]
  -[HMDPersonManager fetchBatchLimit]
  -[HMDPersonManager setFetchBatchLimit:]
  -[HMDPersonManager unassociatedFaceCropsCleanupTimerFactory]
  -[HMDPersonManager setUnassociatedFaceCropsCleanupTimerFactory:]
  -[HMDPersonManager dataInterfaces]


HMDHouseholdActivityLogEventFactory : HMFObject <HMDHouseholdMetricsLogEventFactory>
 @property  NSArray *contributors

  // instance methods
  -[HMDHouseholdActivityLogEventFactory .cxx_destruct]
  -[HMDHouseholdActivityLogEventFactory contributors]
  -[HMDHouseholdActivityLogEventFactory logEventsPopulatedForHomeWithUUID:associatedWithDate:]
  -[HMDHouseholdActivityLogEventFactory serializeLogEvents:]
  -[HMDHouseholdActivityLogEventFactory logEventsFromDictionary:]
  -[HMDHouseholdActivityLogEventFactory coalescedLogEventsFromLogEvents:homeUUID:]
  -[HMDHouseholdActivityLogEventFactory deleteCountersBeforeDate:]
  -[HMDHouseholdActivityLogEventFactory deleteCountersAfterDate:]
  -[HMDHouseholdActivityLogEventFactory initWithContributors:]


HMDHouseholdActivityLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSArray *contributors
 @property  unsigned long requestCount
 @property  unsigned long activeDeviceCount
 @property  unsigned long numReadSiri
 @property  unsigned long numWriteSiri
 @property  unsigned long numReadFirstPartyApp
 @property  unsigned long numWriteFirstPartyApp
 @property  unsigned long numReadThirdPartyApp
 @property  unsigned long numWriteThirdPartyApp
 @property  unsigned long numAccessoriesAdded
 @property  unsigned long numScenesAdded
 @property  unsigned long numTriggersAdded
 @property  unsigned long numShortcutsAdded
 @property  unsigned long numScenesUserRun
 @property  unsigned long numShortcutsRun
 @property  unsigned long numTriggersFired
 @property  unsigned long cameraStreamStartSuccessCount
 @property  unsigned long cameraStreamStartFailureCount
 @property  unsigned long fetchCameraClipVideoSegmentAssetCount
 @property  unsigned long activeDaysBitField
 @property  BOOL activeDay
 @property  long long countOfDaysSinceLastActive
 @property  long long activeDaysPerMonthCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDHouseholdActivityLogEvent logCategory]
  +[HMDHouseholdActivityLogEvent coalescedEventFromHouseholdActivityLogEvents:homeUUID:contributors:]

  // instance methods
  -[HMDHouseholdActivityLogEvent requestCount]
  -[HMDHouseholdActivityLogEvent eventName]
  -[HMDHouseholdActivityLogEvent setRequestCount:]
  -[HMDHouseholdActivityLogEvent .cxx_destruct]
  -[HMDHouseholdActivityLogEvent contributors]
  -[HMDHouseholdActivityLogEvent serializedEvent]
  -[HMDHouseholdActivityLogEvent submitEventWithHistogrammedHomeDataCommonDimensionsForSpecifiedHome]
  -[HMDHouseholdActivityLogEvent logEventWithAppendedCommonDimensions]
  -[HMDHouseholdActivityLogEvent numReadSiri]
  -[HMDHouseholdActivityLogEvent setNumReadSiri:]
  -[HMDHouseholdActivityLogEvent numWriteSiri]
  -[HMDHouseholdActivityLogEvent setNumWriteSiri:]
  -[HMDHouseholdActivityLogEvent numReadFirstPartyApp]
  -[HMDHouseholdActivityLogEvent setNumReadFirstPartyApp:]
  -[HMDHouseholdActivityLogEvent numWriteFirstPartyApp]
  -[HMDHouseholdActivityLogEvent setNumWriteFirstPartyApp:]
  -[HMDHouseholdActivityLogEvent numReadThirdPartyApp]
  -[HMDHouseholdActivityLogEvent setNumReadThirdPartyApp:]
  -[HMDHouseholdActivityLogEvent numWriteThirdPartyApp]
  -[HMDHouseholdActivityLogEvent setNumWriteThirdPartyApp:]
  -[HMDHouseholdActivityLogEvent numAccessoriesAdded]
  -[HMDHouseholdActivityLogEvent setNumAccessoriesAdded:]
  -[HMDHouseholdActivityLogEvent numScenesAdded]
  -[HMDHouseholdActivityLogEvent setNumScenesAdded:]
  -[HMDHouseholdActivityLogEvent numTriggersAdded]
  -[HMDHouseholdActivityLogEvent setNumTriggersAdded:]
  -[HMDHouseholdActivityLogEvent numShortcutsAdded]
  -[HMDHouseholdActivityLogEvent setNumShortcutsAdded:]
  -[HMDHouseholdActivityLogEvent numScenesUserRun]
  -[HMDHouseholdActivityLogEvent setNumScenesUserRun:]
  -[HMDHouseholdActivityLogEvent numShortcutsRun]
  -[HMDHouseholdActivityLogEvent setNumShortcutsRun:]
  -[HMDHouseholdActivityLogEvent numTriggersFired]
  -[HMDHouseholdActivityLogEvent setNumTriggersFired:]
  -[HMDHouseholdActivityLogEvent cameraStreamStartSuccessCount]
  -[HMDHouseholdActivityLogEvent setCameraStreamStartSuccessCount:]
  -[HMDHouseholdActivityLogEvent cameraStreamStartFailureCount]
  -[HMDHouseholdActivityLogEvent setCameraStreamStartFailureCount:]
  -[HMDHouseholdActivityLogEvent fetchCameraClipVideoSegmentAssetCount]
  -[HMDHouseholdActivityLogEvent setFetchCameraClipVideoSegmentAssetCount:]
  -[HMDHouseholdActivityLogEvent isActiveDay]
  -[HMDHouseholdActivityLogEvent setActiveDay:]
  -[HMDHouseholdActivityLogEvent activeDaysPerMonthCount]
  -[HMDHouseholdActivityLogEvent setActiveDaysPerMonthCount:]
  -[HMDHouseholdActivityLogEvent countOfDaysSinceLastActive]
  -[HMDHouseholdActivityLogEvent setCountOfDaysSinceLastActive:]
  -[HMDHouseholdActivityLogEvent initWithHomeUUID:contributors:]
  -[HMDHouseholdActivityLogEvent initPopulatedFromDate:homeUUID:contributors:]
  -[HMDHouseholdActivityLogEvent initWithDictionary:contributors:]
  -[HMDHouseholdActivityLogEvent serializedMetric]
  -[HMDHouseholdActivityLogEvent activeDeviceCount]
  -[HMDHouseholdActivityLogEvent setActiveDeviceCount:]
  -[HMDHouseholdActivityLogEvent activeDaysBitField]
  -[HMDHouseholdActivityLogEvent setActiveDaysBitField:]


HMDBackingStoreHandler : HMFObject <HMDBackingStoreObjectProtocol, HMFLogging>
 @property  NSUUID *identifier
 @property  HMDBackingStore *backingStore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreHandler logCategory]

  // instance methods
  -[HMDBackingStoreHandler identifier]
  -[HMDBackingStoreHandler logIdentifier]
  -[HMDBackingStoreHandler attributeDescriptions]
  -[HMDBackingStoreHandler privateDescription]
  -[HMDBackingStoreHandler .cxx_destruct]
  -[HMDBackingStoreHandler backingStore]
  -[HMDBackingStoreHandler initWithIdentifier:backingStore:]
  -[HMDBackingStoreHandler transactionObjectUpdated:newValues:message:]
  -[HMDBackingStoreHandler transactionObjectRemoved:message:]
  -[HMDBackingStoreHandler backingStoreObjectsForVersion:]
  -[HMDBackingStoreHandler runTransactionWithModel:reason:completion:]
  -[HMDBackingStoreHandler runTransactionWithModels:reason:completion:]
  -[HMDBackingStoreHandler runTransactionWithModel:options:reason:completion:]
  -[HMDBackingStoreHandler runTransactionWithModels:options:reason:completion:]


HMDSettingsMetadataParser : NSObject <HMFLogging, HMDSettingsMetadataParserProtocol>
 @property  <HMDSettingsControllerDependency> *dependency
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingsMetadataParser logCategory]

  // instance methods
  -[HMDSettingsMetadataParser logIdentifier]
  -[HMDSettingsMetadataParser .cxx_destruct]
  -[HMDSettingsMetadataParser dependency]
  -[HMDSettingsMetadataParser modelsFromMetadata:]
  -[HMDSettingsMetadataParser initWithDependency:]


HMDDeviceLockStateDataSource : HMFObject
 @property  BOOL isLocked
 @property  BOOL isPasscodeEnabled

  // instance methods
  -[HMDDeviceLockStateDataSource isLocked]
  -[HMDDeviceLockStateDataSource isPasscodeEnabled]


HMDHomeNaturalLightingCurveWriter : HMFObject <HMFLogging>
 @property  HMDHome *home
 @property  <HMDLightProfileDataSource> *dataSource
 @property  NSString *logIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeNaturalLightingCurveWriter logCategory]

  // instance methods
  -[HMDHomeNaturalLightingCurveWriter home]
  -[HMDHomeNaturalLightingCurveWriter logIdentifier]
  -[HMDHomeNaturalLightingCurveWriter dataSource]
  -[HMDHomeNaturalLightingCurveWriter .cxx_destruct]
  -[HMDHomeNaturalLightingCurveWriter initWithHome:]
  -[HMDHomeNaturalLightingCurveWriter initWithHome:dataSource:]
  -[HMDHomeNaturalLightingCurveWriter setNaturalLightingEnabled:forLightProfiles:completion:]


HMDAccessoryNetworkProtectionGroupRecord : NSObject
 @property  BOOL active
 @property  BOOL persisted
 @property  HMDAccessoryNetworkProtectionGroup *group

  // class methods
  +[HMDAccessoryNetworkProtectionGroupRecord recordWithGroup:active:persisted:]

  // instance methods
  -[HMDAccessoryNetworkProtectionGroupRecord isActive]
  -[HMDAccessoryNetworkProtectionGroupRecord .cxx_destruct]
  -[HMDAccessoryNetworkProtectionGroupRecord isPersisted]
  -[HMDAccessoryNetworkProtectionGroupRecord setActive:]
  -[HMDAccessoryNetworkProtectionGroupRecord group]
  -[HMDAccessoryNetworkProtectionGroupRecord setPersisted:]
  -[HMDAccessoryNetworkProtectionGroupRecord initWithGroup:active:persisted:]


HMDAccessoryNetworkProtectionGroupRegistry : NSObject <HMFMessageReceiver, HMFLogging>
 @property  HMDHome *home
 @property  NSNotificationCenter *notificationCenter
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSSet *activeGroups
 @property  NSSet *persistedGroups
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryNetworkProtectionGroupRegistry logCategory]

  // instance methods
  -[HMDAccessoryNetworkProtectionGroupRegistry notificationCenter]
  -[HMDAccessoryNetworkProtectionGroupRegistry configure]
  -[HMDAccessoryNetworkProtectionGroupRegistry home]
  -[HMDAccessoryNetworkProtectionGroupRegistry logIdentifier]
  -[HMDAccessoryNetworkProtectionGroupRegistry workQueue]
  -[HMDAccessoryNetworkProtectionGroupRegistry .cxx_destruct]
  -[HMDAccessoryNetworkProtectionGroupRegistry messageTargetUUID]
  -[HMDAccessoryNetworkProtectionGroupRegistry messageReceiveQueue]
  -[HMDAccessoryNetworkProtectionGroupRegistry _registerForMessages]
  -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleUpdateAccessoryNetworkProtectionGroupProtectionMode:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleUpdatedAccessoryInitialManufacturerOrCategory:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleUpdatedAccessoryConfiguredNetworkProtectionGroup:]
  -[HMDAccessoryNetworkProtectionGroupRegistry initWithHome:notificationCenter:persistedGroups:]
  -[HMDAccessoryNetworkProtectionGroupRegistry persistedGroups]
  -[HMDAccessoryNetworkProtectionGroupRegistry activeGroups]
  -[HMDAccessoryNetworkProtectionGroupRegistry groupRecordWithUUID:]
  -[HMDAccessoryNetworkProtectionGroupRegistry groupWithUUID:]
  -[HMDAccessoryNetworkProtectionGroupRegistry addActiveSurrogateGroup:]
  -[HMDAccessoryNetworkProtectionGroupRegistry removeGroupWithUUID:]
  -[HMDAccessoryNetworkProtectionGroupRegistry markGroupWithUUID:active:]
  -[HMDAccessoryNetworkProtectionGroupRegistry _registerForAccessoryChanges:]
  -[HMDAccessoryNetworkProtectionGroupRegistry _setupActiveGroupsForHome]
  -[HMDAccessoryNetworkProtectionGroupRegistry _setupProtectionGroupForAccessory:shouldNotifyChange:]
  -[HMDAccessoryNetworkProtectionGroupRegistry _evaluateActiveStatusForGroupWithUUID:]
  -[HMDAccessoryNetworkProtectionGroupRegistry _updateGroupWithUUID:active:]
  -[HMDAccessoryNetworkProtectionGroupRegistry notifyClientsOfAddedGroup:]
  -[HMDAccessoryNetworkProtectionGroupRegistry notifyClientsOfRemovedGroup:]
  -[HMDAccessoryNetworkProtectionGroupRegistry addActiveSurrogateGroupForAccessory:shouldNotifyChange:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleAddOrUpdateAccessoryNetworkProtectionGroupModel:message:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleRemoveAccessoryNetworkProtectionGroupModel:message:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleAddedAccessory:]
  -[HMDAccessoryNetworkProtectionGroupRegistry handleRemovedAccessory:]
  -[HMDAccessoryNetworkProtectionGroupRegistry targetProtectionModeForGroupWithUUID:]
  -[HMDAccessoryNetworkProtectionGroupRegistry updateTargetProtectionModeForGroupWithUUID:protectionMode:error:]
  -[HMDAccessoryNetworkProtectionGroupRegistry updateTargetProtectionModeForGroupWithUUID:protectionMode:error:requestMessage:]
  -[HMDAccessoryNetworkProtectionGroupRegistry accessoriesForGroupWithUUID:]


HMDAccount : HMFObject <HMFLogging, HMFMerging, HMDBackingStoreObjectProtocol, HMDBackingStoreModelBackedObjectProtocol, NSFastEnumeration, NSSecureCoding>
 @property  BOOL currentAccount
 @property  HMDDevice *currentDevice
 @property  NSArray *identities
 @property  <HMDAccountManager> *manager
 @property  BOOL presentInContacts
 @property  HMDAccountHandle *primaryHandle
 @property  NSString *senderCorrelationIdentifier
 @property  BOOL authenticated
 @property  BOOL shouldCache
 @property  HMDAccountIdentifier *identifier
 @property  NSString *name
 @property  CNContact *contact
 @property  NSArray *handles
 @property  NSArray *devices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  Class modelClass
 @property  NSUUID *modelIdentifier
 @property  NSUUID *modelParentIdentifier

  // class methods
  +[HMDAccount supportsSecureCoding]
  +[HMDAccount logCategory]
  +[HMDAccount accountWithHandle:]

  // instance methods
  -[HMDAccount currentDevice]
  -[HMDAccount modelClass]
  -[HMDAccount identities]
  -[HMDAccount countByEnumeratingWithState:objects:count:]
  -[HMDAccount identifier]
  -[HMDAccount logIdentifier]
  -[HMDAccount contact]
  -[HMDAccount setManager:]
  -[HMDAccount senderCorrelationIdentifier]
  -[HMDAccount encodeWithCoder:]
  -[HMDAccount devices]
  -[HMDAccount modelIdentifier]
  -[HMDAccount isAuthenticated]
  -[HMDAccount attributeDescriptions]
  -[HMDAccount .cxx_destruct]
  -[HMDAccount handles]
  -[HMDAccount shouldCache]
  -[HMDAccount isEqualToAccount:]
  -[HMDAccount shortDescription]
  -[HMDAccount manager]
  -[HMDAccount name]
  -[HMDAccount addDevice:]
  -[HMDAccount setHandles:]
  -[HMDAccount isEqual:]
  -[HMDAccount init]
  -[HMDAccount initWithCoder:]
  -[HMDAccount mergeObject:]
  -[HMDAccount shouldMergeObject:]
  -[HMDAccount setSenderCorrelationIdentifier:]
  -[HMDAccount initWithObjectModel:]
  -[HMDAccount transactionObjectUpdated:newValues:message:]
  -[HMDAccount transactionObjectRemoved:message:]
  -[HMDAccount modelObjectWithChangeType:version:]
  -[HMDAccount isCurrentAccount]
  -[HMDAccount deviceForIdentifier:]
  -[HMDAccount deviceForHandle:]
  -[HMDAccount backingStoreObjectsWithChangeType:version:]
  -[HMDAccount modelBackedObjects]
  -[HMDAccount modelParentIdentifier]
  -[HMDAccount initWithIdentifier:handles:devices:]
  -[HMDAccount isRelatedToAccount:]
  -[HMDAccount isPresentInContacts]
  -[HMDAccount appleAccountSenderCorrelationIdentifier]
  -[HMDAccount setAppleAccountSenderCorrelationIdentifier:]
  -[HMDAccount primaryHandle]
  -[HMDAccount addHandle:]
  -[HMDAccount removeHandle:]
  -[HMDAccount accountHandleWithModelIdentifier:]
  -[HMDAccount deviceWithModelIdentifier:]
  -[HMDAccount removeDevice:]
  -[HMDAccount currentDeviceModelsWithChangeType:version:]
  -[HMDAccount isPresentInFamilyCircleWithCompletion:]
  -[HMDAccount hasFamilyMember:]


HMDAccountModel : HMDBackingStoreModelObject
 @property  HMDAccountIdentifier *identifier

  // class methods
  +[HMDAccountModel properties]
  +[HMDAccountModel schemaHashRoot]


HMDCloudGroupRootRecordModelObject : HMDBackingStoreModelObject
 @property  NSDictionary *objectIDToRecordNameMap

  // class methods
  +[HMDCloudGroupRootRecordModelObject properties]


HMDCloudSharedGroupRootRecordModelObject : HMDBackingStoreModelObject
 @property  NSArray *recordNames

  // class methods
  +[HMDCloudSharedGroupRootRecordModelObject properties]


HMDCloudGroup : HMFObject <HMFLogging>
 @property  NSString *rootRecordName
 @property  HMDBackingStoreCacheGroup *backingStoreGroup
 @property  NSUUID *parentIdentifier
 @property  NSUUID *rootRecordObjectID
 @property  NSMutableDictionary *objectIDToRecordNameMap
 @property  HMDCloudRecord *rootRecord
 @property  HMDCloudCache *cache
 @property  HMDCloudZone *cloudZone
 @property  CKRecordID *privateZoneRootRecordID
 @property  NSUUID *ownerID
 @property  NSUUID *identifier
 @property  BOOL doRecordsExistInCache
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudGroup shortDescription]
  +[HMDCloudGroup logCategory]
  +[HMDCloudGroup createGroupWithRootRecordName:owner:subscriptionName:cloudZone:completion:]

  // instance methods
  -[HMDCloudGroup setCache:]
  -[HMDCloudGroup parentIdentifier]
  -[HMDCloudGroup identifier]
  -[HMDCloudGroup logIdentifier]
  -[HMDCloudGroup cache]
  -[HMDCloudGroup .cxx_destruct]
  -[HMDCloudGroup cloudZone]
  -[HMDCloudGroup shortDescription]
  -[HMDCloudGroup init]
  -[HMDCloudGroup rootRecord]
  -[HMDCloudGroup addCloudRecord:]
  -[HMDCloudGroup ownerID]
  -[HMDCloudGroup setCloudZone:]
  -[HMDCloudGroup rootRecordName]
  -[HMDCloudGroup cloudRecordWithObjectID:]
  -[HMDCloudGroup doRecordsExistInCache]
  -[HMDCloudGroup cloudRecordWithName:]
  -[HMDCloudGroup rootRecordModelObject]
  -[HMDCloudGroup isRootRecordName:]
  -[HMDCloudGroup isRootRecord:]
  -[HMDCloudGroup cloudRecordWithNames:completionHandler:]
  -[HMDCloudGroup cloudRecordWithName:completionHandler:]
  -[HMDCloudGroup __cloudRecordWithObjectID:]
  -[HMDCloudGroup cloudRecordWithObjectIDs:completionHandler:]
  -[HMDCloudGroup cloudRecordWithObjectID:completionHandler:]
  -[HMDCloudGroup cloudRecordsForParentID:completionHandler:]
  -[HMDCloudGroup allDescendentsCloudRecordsForParentID:completionHandler:]
  -[HMDCloudGroup privateZoneRootRecordID]
  -[HMDCloudGroup updateCloudRecord:]
  -[HMDCloudGroup updateCloudRecord:completionHandler:]
  -[HMDCloudGroup deleteCloudRecordNames:]
  -[HMDCloudGroup deleteCloudRecord:]
  -[HMDCloudGroup objectIDToRecordNameMap]
  -[HMDCloudGroup initWithBackingStoreCacheGroup:cloudZone:]
  -[HMDCloudGroup rootRecordObjectID]
  -[HMDCloudGroup fetchCloudRecordMap:]
  -[HMDCloudGroup _cloudRecordsForParentIDs:recursive:completionHandler:]
  -[HMDCloudGroup rootRecordCompletionHandler:]
  -[HMDCloudGroup backingStoreGroup]
  -[HMDCloudGroup setBackingStoreGroup:]


HMDAppleMediaProfile : HMDMediaProfile <MPRequestResponseControllerDelegate>
 @property  HMDAppleMediaAccessory *mediaAccessory
 @property  MPRequestResponseController *controller
 @property  HMDMediaSystem *mediaSystem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAppleMediaProfile .cxx_destruct]
  -[HMDAppleMediaProfile controller]
  -[HMDAppleMediaProfile didFinishLoadingRequestForController:]
  -[HMDAppleMediaProfile setMediaSystem:]
  -[HMDAppleMediaProfile mediaSystem]
  -[HMDAppleMediaProfile setMediaSession:]
  -[HMDAppleMediaProfile registerForMessages]
  -[HMDAppleMediaProfile initWithAccessory:uniqueIdentifier:services:workQueue:]
  -[HMDAppleMediaProfile configureWithMessageDispatcher:configurationTracker:]
  -[HMDAppleMediaProfile _handleSetPower:]
  -[HMDAppleMediaProfile _updatePlayback:]
  -[HMDAppleMediaProfile _updateRefreshPlayback:]
  -[HMDAppleMediaProfile sessionAudioControlUpdated:]
  -[HMDAppleMediaProfile mediaAccessory]
  -[HMDAppleMediaProfile _handleSetValue:withRequestProperty:withCompletionHandler:]


HMDCompositeSettingsControllerUpdateLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCompositeSettingsControllerUpdateLogEvent eventName]
  -[HMDCompositeSettingsControllerUpdateLogEvent .cxx_destruct]
  -[HMDCompositeSettingsControllerUpdateLogEvent dictionaryRepresentation]
  -[HMDCompositeSettingsControllerUpdateLogEvent initWithKeyPath:date:]
  -[HMDCompositeSettingsControllerUpdateLogEvent serializedEvent]


HMDHomeManagerXPCMessageSendPolicyParameters : HMDXPCMessageSendPolicyParameters <NSCopying, NSMutableCopying>
 @property  unsigned long options
 @property  BOOL active

  // instance methods
  -[HMDHomeManagerXPCMessageSendPolicyParameters signature]
  -[HMDHomeManagerXPCMessageSendPolicyParameters attributeDescriptions]
  -[HMDHomeManagerXPCMessageSendPolicyParameters isActive]
  -[HMDHomeManagerXPCMessageSendPolicyParameters options]
  -[HMDHomeManagerXPCMessageSendPolicyParameters copyWithZone:]
  -[HMDHomeManagerXPCMessageSendPolicyParameters mutableCopyWithZone:]
  -[HMDHomeManagerXPCMessageSendPolicyParameters isEqual:]
  -[HMDHomeManagerXPCMessageSendPolicyParameters initWithEntitlements:options:]


HMDMutableHomeManagerXPCMessageSendPolicyParameters : HMDHomeManagerXPCMessageSendPolicyParameters
 @property  BOOL active

  // instance methods
  -[HMDMutableHomeManagerXPCMessageSendPolicyParameters isActive]
  -[HMDMutableHomeManagerXPCMessageSendPolicyParameters setActive:]
  -[HMDMutableHomeManagerXPCMessageSendPolicyParameters copyWithZone:]


HMDLowPowerModeProfile : HMDAccessoryProfile <HMFTimerDelegate>
 @property  NSString *clientIdentifier
 @property  unsigned long internalState
 @property  unsigned long internalOldState
 @property  unsigned long retryCount
 @property  HMFTimer *backoffTimer
 @property  <HMDLowPowerModeProfileDelegate> *delegate
 @property  HAPSuspendedAccessory *suspendedAccessory
 @property  HMFTimer *waitForWakeTimer
 @property  @? pendingWakeBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLowPowerModeProfile logCategory]
  +[HMDLowPowerModeProfile WoWLANInfoForSupportedSleepConfiguration:]

  // instance methods
  -[HMDLowPowerModeProfile setInternalState:]
  -[HMDLowPowerModeProfile internalState]
  -[HMDLowPowerModeProfile timerDidFire:]
  -[HMDLowPowerModeProfile setClientIdentifier:]
  -[HMDLowPowerModeProfile setDelegate:]
  -[HMDLowPowerModeProfile clientIdentifier]
  -[HMDLowPowerModeProfile retryCount]
  -[HMDLowPowerModeProfile backoffTimer]
  -[HMDLowPowerModeProfile setRetryCount:]
  -[HMDLowPowerModeProfile delegate]
  -[HMDLowPowerModeProfile _enterState:]
  -[HMDLowPowerModeProfile dealloc]
  -[HMDLowPowerModeProfile .cxx_destruct]
  -[HMDLowPowerModeProfile enterState:]
  -[HMDLowPowerModeProfile unconfigure]
  -[HMDLowPowerModeProfile suspendedState]
  -[HMDLowPowerModeProfile registerForMessages]
  -[HMDLowPowerModeProfile _runStateMachine]
  -[HMDLowPowerModeProfile setBackoffTimer:]
  -[HMDLowPowerModeProfile setSuspendedAccessory:]
  -[HMDLowPowerModeProfile suspendedAccessory]
  -[HMDLowPowerModeProfile connectivityInfo]
  -[HMDLowPowerModeProfile hapAccessory]
  -[HMDLowPowerModeProfile handleAccessoryCharacteristicsChanged:]
  -[HMDLowPowerModeProfile handleAccessoryConnectionChanged:]
  -[HMDLowPowerModeProfile handleInitialState]
  -[HMDLowPowerModeProfile initWithAccessory:powerManagementservice:workQueue:]
  -[HMDLowPowerModeProfile wakeSuspendedAccessoryWithCompletion:]
  -[HMDLowPowerModeProfile wakeSuspendedAccessoryWithType:completion:]
  -[HMDLowPowerModeProfile _wakeSuspendedAccessory:activity:completion:]
  -[HMDLowPowerModeProfile _resetStateMachine]
  -[HMDLowPowerModeProfile _canEnterNewState:]
  -[HMDLowPowerModeProfile _stateMachine_backoffOperation]
  -[HMDLowPowerModeProfile _stateMachine_Idle]
  -[HMDLowPowerModeProfile _stateMachine_readAccessoryConfiguration]
  -[HMDLowPowerModeProfile _stateMachine_configureAccessory]
  -[HMDLowPowerModeProfile _stateMachine_unconfigureAccessory]
  -[HMDLowPowerModeProfile _readAccessorySelectedConfigWithCompletion:]
  -[HMDLowPowerModeProfile _configureAccessoryWithCompletion:]
  -[HMDLowPowerModeProfile _unconfigureAccessoryWithCompletion:]
  -[HMDLowPowerModeProfile _queryAccessoryWithOperation:completion:]
  -[HMDLowPowerModeProfile _processSupportedSleepConfigurationParametersWithCharacteristic:]
  -[HMDLowPowerModeProfile _processSelectedSleepConfigurationParametersWithCharacteristic:]
  -[HMDLowPowerModeProfile _writeToCharacteristic:value:completion:]
  -[HMDLowPowerModeProfile _readFromCharacteristic:completion:]
  -[HMDLowPowerModeProfile _readInitialRequiredCharacteristics]
  -[HMDLowPowerModeProfile _updateCharacteristicsNotifications:]
  -[HMDLowPowerModeProfile _shouldManageAccessoryLPM]
  -[HMDLowPowerModeProfile powerManagementService]
  -[HMDLowPowerModeProfile selectedSleepConfigurationCharacteristic]
  -[HMDLowPowerModeProfile supportedSleepConfigurationCharacteristic]
  -[HMDLowPowerModeProfile newHAPSuspendedAccessoryFromAccessoryConnectivityInfoWithType:]
  -[HMDLowPowerModeProfile _startTimerForType:]
  -[HMDLowPowerModeProfile _stopBackoffTimerForType:]
  -[HMDLowPowerModeProfile pendingWakeBlock]
  -[HMDLowPowerModeProfile setPendingWakeBlock:]
  -[HMDLowPowerModeProfile internalOldState]
  -[HMDLowPowerModeProfile setInternalOldState:]
  -[HMDLowPowerModeProfile waitForWakeTimer]
  -[HMDLowPowerModeProfile setWaitForWakeTimer:]


AWDHomeKitMessageTransported : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasPayloadSize
 @property  unsigned long payloadSize
 @property  BOOL hasIdentifier
 @property  NSString *identifier
 @property  BOOL hasTransactionID
 @property  NSString *transactionID
 @property  BOOL hasIsSecure
 @property  BOOL isSecure
 @property  BOOL hasMessageType
 @property  int messageType
 @property  BOOL hasTransport
 @property  int transport
 @property  BOOL hasDirection
 @property  int direction
 @property  BOOL hasMessageName
 @property  NSString *messageName

  // instance methods
  -[AWDHomeKitMessageTransported transport]
  -[AWDHomeKitMessageTransported setTransport:]
  -[AWDHomeKitMessageTransported messageTypeAsString:]
  -[AWDHomeKitMessageTransported setDirection:]
  -[AWDHomeKitMessageTransported identifier]
  -[AWDHomeKitMessageTransported setMessageType:]
  -[AWDHomeKitMessageTransported setTimestamp:]
  -[AWDHomeKitMessageTransported copyTo:]
  -[AWDHomeKitMessageTransported hasMessageType]
  -[AWDHomeKitMessageTransported messageName]
  -[AWDHomeKitMessageTransported transactionID]
  -[AWDHomeKitMessageTransported hasIdentifier]
  -[AWDHomeKitMessageTransported .cxx_destruct]
  -[AWDHomeKitMessageTransported setHasPayloadSize:]
  -[AWDHomeKitMessageTransported mergeFrom:]
  -[AWDHomeKitMessageTransported setHasTimestamp:]
  -[AWDHomeKitMessageTransported payloadSize]
  -[AWDHomeKitMessageTransported StringAsMessageType:]
  -[AWDHomeKitMessageTransported direction]
  -[AWDHomeKitMessageTransported setIdentifier:]
  -[AWDHomeKitMessageTransported dictionaryRepresentation]
  -[AWDHomeKitMessageTransported hasTimestamp]
  -[AWDHomeKitMessageTransported copyWithZone:]
  -[AWDHomeKitMessageTransported timestamp]
  -[AWDHomeKitMessageTransported readFrom:]
  -[AWDHomeKitMessageTransported messageType]
  -[AWDHomeKitMessageTransported setTransactionID:]
  -[AWDHomeKitMessageTransported isSecure]
  -[AWDHomeKitMessageTransported writeTo:]
  -[AWDHomeKitMessageTransported hasPayloadSize]
  -[AWDHomeKitMessageTransported isEqual:]
  -[AWDHomeKitMessageTransported setPayloadSize:]
  -[AWDHomeKitMessageTransported setHasMessageType:]
  -[AWDHomeKitMessageTransported hasDirection]
  -[AWDHomeKitMessageTransported hasMessageName]
  -[AWDHomeKitMessageTransported setMessageName:]
  -[AWDHomeKitMessageTransported setHasDirection:]
  -[AWDHomeKitMessageTransported directionAsString:]
  -[AWDHomeKitMessageTransported StringAsDirection:]
  -[AWDHomeKitMessageTransported hasTransactionID]
  -[AWDHomeKitMessageTransported setIsSecure:]
  -[AWDHomeKitMessageTransported setHasIsSecure:]
  -[AWDHomeKitMessageTransported hasIsSecure]
  -[AWDHomeKitMessageTransported setHasTransport:]
  -[AWDHomeKitMessageTransported hasTransport]
  -[AWDHomeKitMessageTransported transportAsString:]
  -[AWDHomeKitMessageTransported StringAsTransport:]


HMDRemoteLoginAnisetteDataProvider : HMFObject <AKAnisetteServiceProtocol, HMFLogging>
 @property  NSString *sessionID
 @property  HMDRemoteLoginMessageSender *remoteMessageSender
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginAnisetteDataProvider logCategory]

  // instance methods
  -[HMDRemoteLoginAnisetteDataProvider logIdentifier]
  -[HMDRemoteLoginAnisetteDataProvider sessionID]
  -[HMDRemoteLoginAnisetteDataProvider legacyAnisetteDataForDSID:withCompletion:]
  -[HMDRemoteLoginAnisetteDataProvider .cxx_destruct]
  -[HMDRemoteLoginAnisetteDataProvider copyWithZone:]
  -[HMDRemoteLoginAnisetteDataProvider fetchAnisetteDataAndProvisionIfNecessary:withCompletion:]
  -[HMDRemoteLoginAnisetteDataProvider provisionAnisetteWithCompletion:]
  -[HMDRemoteLoginAnisetteDataProvider syncAnisetteWithSIMData:completion:]
  -[HMDRemoteLoginAnisetteDataProvider eraseAnisetteWithCompletion:]
  -[HMDRemoteLoginAnisetteDataProvider remoteMessageSender]
  -[HMDRemoteLoginAnisetteDataProvider setRemoteMessageSender:]
  -[HMDRemoteLoginAnisetteDataProvider initWithSessionID:remoteMessageSender:]


HMDAppleMediaAccessoryMessenger : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDAppleMediaAccessoryLocalMessageHandler *localHandler
 @property  <HMDMessageRouter> *router
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAppleMediaAccessoryMessenger logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryMessenger identifier]
  -[HMDAppleMediaAccessoryMessenger logIdentifier]
  -[HMDAppleMediaAccessoryMessenger .cxx_destruct]
  -[HMDAppleMediaAccessoryMessenger messageTargetUUID]
  -[HMDAppleMediaAccessoryMessenger messageDispatcher]
  -[HMDAppleMediaAccessoryMessenger router]
  -[HMDAppleMediaAccessoryMessenger registerForMessagesWithHome:]
  -[HMDAppleMediaAccessoryMessenger routeSiriEndpointDeleteSiriHistoryMessage:]
  -[HMDAppleMediaAccessoryMessenger initWithIdentifier:messageDispatcher:router:localHandler:]
  -[HMDAppleMediaAccessoryMessenger sendDeleteSiriHistoryRequestForAccessoryWithUUID:completionHandler:]
  -[HMDAppleMediaAccessoryMessenger localHandler]


HMDCameraStreamControlMessageHandler : HMFObject <HMFTimerDelegate, HMDCameraStreamControlManagerDelegate, HMFLogging>
 @property  HMDPhoneCallObserver *phoneCallObserver
 @property  HMDCameraResidentMessageHandler *residentMessageHandler
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  NSUUID *uniqueIdentifier
 @property  NSUUID *profileUniqueIdentifier
 @property  HMDCameraStreamManagerSession *streamSession
 @property  HMDCameraSupportedConfigurationCache *supportedConfigCache
 @property  HMDCameraStreamSnapshotHandler *streamSnapshotHandler
 @property  HMFNetMonitor *networkMonitor
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDDynamicActivityAttributionPublisher *dynamicActivityAttributionPublisher
 @property  <HMDCameraStreamControlMessageHandlerDataSource> *dataSource
 @property  BOOL streamingSessionInProgress
 @property  HMDService *streamManagementService
 @property  NSString *streamSessionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamControlMessageHandler logCategory]

  // instance methods
  -[HMDCameraStreamControlMessageHandler accessory]
  -[HMDCameraStreamControlMessageHandler timerDidFire:]
  -[HMDCameraStreamControlMessageHandler networkMonitor]
  -[HMDCameraStreamControlMessageHandler logIdentifier]
  -[HMDCameraStreamControlMessageHandler dataSource]
  -[HMDCameraStreamControlMessageHandler workQueue]
  -[HMDCameraStreamControlMessageHandler dealloc]
  -[HMDCameraStreamControlMessageHandler .cxx_destruct]
  -[HMDCameraStreamControlMessageHandler handleMessage:]
  -[HMDCameraStreamControlMessageHandler uniqueIdentifier]
  -[HMDCameraStreamControlMessageHandler messageDispatcher]
  -[HMDCameraStreamControlMessageHandler isEqual:]
  -[HMDCameraStreamControlMessageHandler profileUniqueIdentifier]
  -[HMDCameraStreamControlMessageHandler streamSessionID]
  -[HMDCameraStreamControlMessageHandler handleCameraSettingsDidChangeNotification:]
  -[HMDCameraStreamControlMessageHandler configureWithMessageDispatcher:]
  -[HMDCameraStreamControlMessageHandler setMessageDispatcher:]
  -[HMDCameraStreamControlMessageHandler streamSnapshotHandler]
  -[HMDCameraStreamControlMessageHandler residentMessageHandler]
  -[HMDCameraStreamControlMessageHandler streamSession]
  -[HMDCameraStreamControlMessageHandler setStreamSession:]
  -[HMDCameraStreamControlMessageHandler handleAccessoryDisconnected:]
  -[HMDCameraStreamControlMessageHandler handleProcessStateChange:]
  -[HMDCameraStreamControlMessageHandler handleConnectionDeactivatedNotification:]
  -[HMDCameraStreamControlMessageHandler handleActivePhoneCallEstablishedNotification:]
  -[HMDCameraStreamControlMessageHandler streamControlManager:didNegotiateStreamWithSelectedParameters:]
  -[HMDCameraStreamControlMessageHandler streamControlManagerDidSetUpRemoteConnection:]
  -[HMDCameraStreamControlMessageHandler streamControlManagerDidStartStream:]
  -[HMDCameraStreamControlMessageHandler streamControlManagerDidReceiveFirstFrame:]
  -[HMDCameraStreamControlMessageHandler streamControlManagerDidReconfigureStream:]
  -[HMDCameraStreamControlMessageHandler streamControlManager:didStopStreamWithSessionID:error:]
  -[HMDCameraStreamControlMessageHandler initWithWorkQueue:streamSnapshotHandler:accessory:streamManagementService:profileUniqueIdentifier:networkMonitor:residentMessageHandler:phoneCallObserver:dataSource:]
  -[HMDCameraStreamControlMessageHandler initWithWorkQueue:streamSnapshotHandler:accessory:streamManagementService:profileUniqueIdentifier:networkMonitor:]
  -[HMDCameraStreamControlMessageHandler updateStreamClientUsingMessage:]
  -[HMDCameraStreamControlMessageHandler _isNegotiateMessage:]
  -[HMDCameraStreamControlMessageHandler _isStartMessage:]
  -[HMDCameraStreamControlMessageHandler _isReconfigureMessage:]
  -[HMDCameraStreamControlMessageHandler _isStopMessage:]
  -[HMDCameraStreamControlMessageHandler _isSetAudioStreamSettingMessage:]
  -[HMDCameraStreamControlMessageHandler _isSetAudioVolumeMessage:]
  -[HMDCameraStreamControlMessageHandler _isRemoteSetupMessage:]
  -[HMDCameraStreamControlMessageHandler _stopStreamWithError:]
  -[HMDCameraStreamControlMessageHandler _shouldHandleNegotiateMessage:accessoryReachable:]
  -[HMDCameraStreamControlMessageHandler _handleNegotiateMessage:]
  -[HMDCameraStreamControlMessageHandler _handleRemoteSetupMessage:]
  -[HMDCameraStreamControlMessageHandler _handleStartMessage:]
  -[HMDCameraStreamControlMessageHandler _handleReconfigureMessage:]
  -[HMDCameraStreamControlMessageHandler _handleStopMessage:]
  -[HMDCameraStreamControlMessageHandler _handleSetAudioVolume:]
  -[HMDCameraStreamControlMessageHandler setAudioVolume:callback:]
  -[HMDCameraStreamControlMessageHandler _handleSetAudioState:]
  -[HMDCameraStreamControlMessageHandler isStreamingSessionInProgress]
  -[HMDCameraStreamControlMessageHandler _shouldStopStreamSessionForProcessInfo:]
  -[HMDCameraStreamControlMessageHandler _attributeMicrophoneUsageToApplicationBundleIdentifier:]
  -[HMDCameraStreamControlMessageHandler _respondToLocalNegotiateStreamMessage:]
  -[HMDCameraStreamControlMessageHandler _sendStreamStoppedMessageWithError:]
  -[HMDCameraStreamControlMessageHandler _sendStreamStoppedRemoteNotificationWithError:]
  -[HMDCameraStreamControlMessageHandler _resetStreamSession:]
  -[HMDCameraStreamControlMessageHandler streamManagementService]
  -[HMDCameraStreamControlMessageHandler phoneCallObserver]
  -[HMDCameraStreamControlMessageHandler supportedConfigCache]
  -[HMDCameraStreamControlMessageHandler dynamicActivityAttributionPublisher]


HMDCameraProtocolParameters : HMFObject <NSSecureCoding>
 @property  HMDSupportedVideoStreamConfiguration *supportedVideoStreamConfiguration
 @property  HMDSupportedAudioStreamConfiguration *supportedAudioStreamConfiguration
 @property  HMDSupportedRTPConfiguration *supportedRTPConfiguration
 @property  HMDSetupEndPointRead *setupEndPointRead
 @property  HMDSetupEndPointWrite *setupEndPointWrite
 @property  HMDSelectedStreamConfigurationWrite *selectedStreamConfigurationWrite
 @property  HMDReselectedStreamConfigurationWrite *reselectedStreamConfigurationWrite

  // class methods
  +[HMDCameraProtocolParameters supportsSecureCoding]

  // instance methods
  -[HMDCameraProtocolParameters encodeWithCoder:]
  -[HMDCameraProtocolParameters .cxx_destruct]
  -[HMDCameraProtocolParameters initWithCoder:]
  -[HMDCameraProtocolParameters supportedAudioStreamConfiguration]
  -[HMDCameraProtocolParameters supportedVideoStreamConfiguration]
  -[HMDCameraProtocolParameters setSupportedVideoStreamConfiguration:]
  -[HMDCameraProtocolParameters setSupportedAudioStreamConfiguration:]
  -[HMDCameraProtocolParameters supportedRTPConfiguration]
  -[HMDCameraProtocolParameters setSupportedRTPConfiguration:]
  -[HMDCameraProtocolParameters setupEndPointRead]
  -[HMDCameraProtocolParameters setSetupEndPointRead:]
  -[HMDCameraProtocolParameters setupEndPointWrite]
  -[HMDCameraProtocolParameters setSetupEndPointWrite:]
  -[HMDCameraProtocolParameters selectedStreamConfigurationWrite]
  -[HMDCameraProtocolParameters setSelectedStreamConfigurationWrite:]
  -[HMDCameraProtocolParameters reselectedStreamConfigurationWrite]
  -[HMDCameraProtocolParameters setReselectedStreamConfigurationWrite:]


HMDRemoteDeviceReachabilityChangeLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  unsigned long reason
 @property  BOOL reachable
 @property  BOOL targetSupportsIDSPresence

  // instance methods
  -[HMDRemoteDeviceReachabilityChangeLogEvent eventName]
  -[HMDRemoteDeviceReachabilityChangeLogEvent reason]
  -[HMDRemoteDeviceReachabilityChangeLogEvent reachable]
  -[HMDRemoteDeviceReachabilityChangeLogEvent serializedEvent]
  -[HMDRemoteDeviceReachabilityChangeLogEvent initWithReason:reachable:targetSupportsIDSPresence:]
  -[HMDRemoteDeviceReachabilityChangeLogEvent targetSupportsIDSPresence]


HMDRemoteEventRouterProtoTopic : PBCodable <NSCopying>
 @property  BOOL hasTopic
 @property  NSString *topic
 @property  BOOL hasEventUUID
 @property  NSString *eventUUID

  // instance methods
  -[HMDRemoteEventRouterProtoTopic copyTo:]
  -[HMDRemoteEventRouterProtoTopic hasTopic]
  -[HMDRemoteEventRouterProtoTopic topic]
  -[HMDRemoteEventRouterProtoTopic setEventUUID:]
  -[HMDRemoteEventRouterProtoTopic .cxx_destruct]
  -[HMDRemoteEventRouterProtoTopic mergeFrom:]
  -[HMDRemoteEventRouterProtoTopic setTopic:]
  -[HMDRemoteEventRouterProtoTopic dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoTopic copyWithZone:]
  -[HMDRemoteEventRouterProtoTopic readFrom:]
  -[HMDRemoteEventRouterProtoTopic writeTo:]
  -[HMDRemoteEventRouterProtoTopic eventUUID]
  -[HMDRemoteEventRouterProtoTopic isEqual:]
  -[HMDRemoteEventRouterProtoTopic hasEventUUID]


HMDCameraClipsQuotaEnableCameraResponse : PBCodable <CKCodeOperationMessageMutation, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraClipsQuotaEnableCameraResponse copyTo:]
  -[HMDCameraClipsQuotaEnableCameraResponse mergeFrom:]
  -[HMDCameraClipsQuotaEnableCameraResponse dictionaryRepresentation]
  -[HMDCameraClipsQuotaEnableCameraResponse copyWithZone:]
  -[HMDCameraClipsQuotaEnableCameraResponse readFrom:]
  -[HMDCameraClipsQuotaEnableCameraResponse writeTo:]
  -[HMDCameraClipsQuotaEnableCameraResponse isEqual:]


HMDAccessoryCount : NSObject
 @property  HMDHome *home
 @property  unsigned long numHAPAccessories
 @property  unsigned long numHAPIPAccessoriesSupportAFU
 @property  unsigned long numHAPBLEAccessoriesSupportAFU
 @property  unsigned long numHAPThreadAccessoriesSupportAFU
 @property  unsigned long numCameraAccessories
 @property  unsigned long numCameraAccessoriesRecordingEnabled
 @property  unsigned long numSecurityClassAccessories
 @property  unsigned long numCriticalSensorAccessories

  // instance methods
  -[HMDAccessoryCount home]
  -[HMDAccessoryCount .cxx_destruct]
  -[HMDAccessoryCount setHome:]
  -[HMDAccessoryCount initWithHome:]
  -[HMDAccessoryCount numHAPAccessories]
  -[HMDAccessoryCount numCameraAccessories]
  -[HMDAccessoryCount numCameraAccessoriesRecordingEnabled]
  -[HMDAccessoryCount numSecurityClassAccessories]
  -[HMDAccessoryCount numCriticalSensorAccessories]
  -[HMDAccessoryCount numHAPIPAccessoriesSupportAFU]
  -[HMDAccessoryCount numHAPBLEAccessoriesSupportAFU]
  -[HMDAccessoryCount numHAPThreadAccessoriesSupportAFU]
  -[HMDAccessoryCount numHAPAccessoriesWithAnyServiceWithTypes:]


HMDRemoteEventRouterResidentClient : HMDRemoteEventRouterClient
 @property  NSUUID *homeUUID

  // instance methods
  -[HMDRemoteEventRouterResidentClient accessoryUUID]
  -[HMDRemoteEventRouterResidentClient .cxx_destruct]
  -[HMDRemoteEventRouterResidentClient homeUUID]
  -[HMDRemoteEventRouterResidentClient dumpStateDescription]
  -[HMDRemoteEventRouterResidentClient client:upstreamTopicsForTopic:]
  -[HMDRemoteEventRouterResidentClient clientIsEnabled:]
  -[HMDRemoteEventRouterResidentClient handlePrimaryResidentConfirmedDeviceIdentifierChangeNotification:]
  -[HMDRemoteEventRouterResidentClient initWitAccessoryUUID:homeUUID:queue:dataSource:messageDispatcher:notificationCenter:requestMessageName:updateMessageName:storeReadHandle:storeWriteHandle:retryIntervalProvider:logCategory:]
  -[HMDRemoteEventRouterResidentClient forwardingTopicsForTopics:downstreamRouter:]


HMDHomeData : HMFObject <NSCopying, NSMutableCopying>
 @property  long long dataVersion
 @property  NSArray *homes
 @property  NSArray *accessories
 @property  NSUUID *primaryHomeUUID
 @property  NSUUID *lastCurrentHomeUUID
 @property  long long schemaVersion
 @property  NSUUID *dataTag
 @property  NSArray *UUIDsOfRemovedHomes
 @property  NSArray *cloudZones
 @property  NSArray *incomingInvitations
 @property  NSString *currentDevice
 @property  NSArray *pendingReasonSaved
 @property  NSArray *pendingUserManagementOperations
 @property  NSArray *unprocessedOperationIdentifiers
 @property  HMDApplicationData *applicationData
 @property  long long residentEnabledState
 @property  HMDAccount *account
 @property  NSArray *remoteAccounts
 @property  BOOL accessAllowedWhenLocked
 @property  NSDictionary *demoAccessories
 @property  BOOL demoFinalized

  // class methods
  +[HMDHomeData configureKeyedArchiverClassMappings]

  // instance methods
  -[HMDHomeData homes]
  -[HMDHomeData currentDevice]
  -[HMDHomeData account]
  -[HMDHomeData schemaVersion]
  -[HMDHomeData .cxx_destruct]
  -[HMDHomeData incomingInvitations]
  -[HMDHomeData copyWithZone:]
  -[HMDHomeData accessories]
  -[HMDHomeData mutableCopyWithZone:]
  -[HMDHomeData dataVersion]
  -[HMDHomeData setDataVersion:]
  -[HMDHomeData applicationData]
  -[HMDHomeData accessAllowedWhenLocked]
  -[HMDHomeData homeWithUUID:]
  -[HMDHomeData primaryHomeUUID]
  -[HMDHomeData lastCurrentHomeUUID]
  -[HMDHomeData dataTag]
  -[HMDHomeData UUIDsOfRemovedHomes]
  -[HMDHomeData cloudZones]
  -[HMDHomeData pendingReasonSaved]
  -[HMDHomeData pendingUserManagementOperations]
  -[HMDHomeData unprocessedOperationIdentifiers]
  -[HMDHomeData residentEnabledState]
  -[HMDHomeData remoteAccounts]
  -[HMDHomeData demoAccessories]
  -[HMDHomeData demoFinalized]


HMDMutableHomeData : HMDHomeData <NSCopying, NSMutableCopying>
 @property  NSArray *homes
 @property  NSArray *accessories
 @property  NSUUID *primaryHomeUUID
 @property  NSUUID *lastCurrentHomeUUID
 @property  long long dataVersion
 @property  long long schemaVersion
 @property  NSUUID *dataTag
 @property  NSArray *UUIDsOfRemovedHomes
 @property  NSArray *cloudZones
 @property  NSArray *incomingInvitations
 @property  NSString *currentDevice
 @property  NSArray *pendingReasonSaved
 @property  NSArray *pendingUserManagementOperations
 @property  NSArray *unprocessedOperationIdentifiers
 @property  HMDApplicationData *applicationData
 @property  long long residentEnabledState
 @property  HMDAccount *account
 @property  NSArray *remoteAccounts
 @property  BOOL accessAllowedWhenLocked
 @property  NSDictionary *demoAccessories
 @property  BOOL demoFinalized

  // instance methods
  -[HMDMutableHomeData setAccount:]
  -[HMDMutableHomeData setCurrentDevice:]
  -[HMDMutableHomeData setSchemaVersion:]
  -[HMDMutableHomeData setAccessories:]
  -[HMDMutableHomeData copyWithZone:]
  -[HMDMutableHomeData setDataVersion:]
  -[HMDMutableHomeData setApplicationData:]
  -[HMDMutableHomeData setAccessAllowedWhenLocked:]
  -[HMDMutableHomeData setHomes:]
  -[HMDMutableHomeData setPrimaryHomeUUID:]
  -[HMDMutableHomeData setLastCurrentHomeUUID:]
  -[HMDMutableHomeData setDataTag:]
  -[HMDMutableHomeData setUUIDsOfRemovedHomes:]
  -[HMDMutableHomeData setCloudZones:]
  -[HMDMutableHomeData setIncomingInvitations:]
  -[HMDMutableHomeData setPendingReasonSaved:]
  -[HMDMutableHomeData setPendingUserManagementOperations:]
  -[HMDMutableHomeData setUnprocessedOperationIdentifiers:]
  -[HMDMutableHomeData setResidentEnabledState:]
  -[HMDMutableHomeData setRemoteAccounts:]
  -[HMDMutableHomeData setDemoAccessories:]
  -[HMDMutableHomeData setDemoFinalized:]


HMDPersistentStore : HMFObject <HMDPersistentStore, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPersistentStore resetConfiguration:]
  +[HMDPersistentStore logCategory]
  +[HMDPersistentStore readDataFromPath:]
  +[HMDPersistentStore writeData:toStorePath:dataLabel:]
  +[HMDPersistentStore _writeData:toStorePath:dataLabel:]
  +[HMDPersistentStore writeDictionary:toStorePath:]
  +[HMDPersistentStore deserializeHomeData:localStorage:fromData:]
  +[HMDPersistentStore deserializeHomeData:usingLocalStorage:fromData:forHH2Migration:]
  +[HMDPersistentStore removeLegacyHomeArchive:]
  +[HMDPersistentStore unarchiveHomeData:decryptionFailed:successfulKeyUserName:]
  +[HMDPersistentStore unarchiveHomeData:decryptionFailed:fromLocation:successfulKeyUserName:forHH2Migration:]
  +[HMDPersistentStore cleanupKeysInStore]
  +[HMDPersistentStore serializeHomeData:localStorage:remoteDeviceOnSameAccount:]
  +[HMDPersistentStore archiveHomeDataForTransaction:]
  +[HMDPersistentStore archiveHomeDataLegacy:]
  +[HMDPersistentStore archiveHomeDataLegacy:toLocation:]
  +[HMDPersistentStore archiveHomeData:toLocation:]
  +[HMDPersistentStore archiveVendorStore:]
  +[HMDPersistentStore unarchiveVendorStore]
  +[HMDPersistentStore loadPlainMetadataDictionary]
  +[HMDPersistentStore loadBuiltinPlainMetadataDictionary]
  +[HMDPersistentStore archiveMetadata:]
  +[HMDPersistentStore removeServerTokenDataFile]
  +[HMDPersistentStore archiveCloudServerTokenData:]
  +[HMDPersistentStore removeTransactionJournal]
  +[HMDPersistentStore archiveIDSDataSyncJournal:]
  +[HMDPersistentStore unarchiveIDSDataSyncJournal]
  +[HMDPersistentStore archiveBulletinBoard:]
  +[HMDPersistentStore unarchiveBulletinBoard]
  +[HMDPersistentStore archiveDataStoreWithPath:serializedData:forKey:]
  +[HMDPersistentStore unarchiveDataStoreWithPath:forKey:]
  +[HMDPersistentStore unarchiveData:forKey:]
  +[HMDPersistentStore encryptData:withKey:error:]
  +[HMDPersistentStore decryptData:withKey:error:]
  +[HMDPersistentStore encryptDataWithControllerKey:error:]
  +[HMDPersistentStore decryptDataWithControllerKey:totalKeysFound:deleteExtraKeys:allowControllerIdentifierToChange:controllerIdentifierChanged:successfulKeyUserName:error:]
  +[HMDPersistentStore hasControllerKeyWithUsername:error:]
  +[HMDPersistentStore controllerUsernameForPairingIdentity:error:]

  // instance methods
  -[HMDPersistentStore writeData:toStorePath:dataLabel:]


HMDRemoteLoginReceiverProxyAuthentication : HMDRemoteLoginReceiverAuthentication
 @property  HMDRemoteLoginProxyAuthenticationRequest *request

  // class methods
  +[HMDRemoteLoginReceiverProxyAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginReceiverProxyAuthentication dealloc]
  -[HMDRemoteLoginReceiverProxyAuthentication .cxx_destruct]
  -[HMDRemoteLoginReceiverProxyAuthentication request]
  -[HMDRemoteLoginReceiverProxyAuthentication _authenticate]
  -[HMDRemoteLoginReceiverProxyAuthentication authenticate]
  -[HMDRemoteLoginReceiverProxyAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:request:]


HMDMediaAccessory : HMDAccessory <HMFLogging>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  HMDMediaAccessoryAdvertisement *advertisement
 @property  HMDMediaProfile *mediaProfile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaAccessory supportsSecureCoding]

  // instance methods
  -[HMDMediaAccessory dumpState]
  -[HMDMediaAccessory encodeWithCoder:]
  -[HMDMediaAccessory .cxx_destruct]
  -[HMDMediaAccessory setAdvertisement:]
  -[HMDMediaAccessory name]
  -[HMDMediaAccessory urlString]
  -[HMDMediaAccessory init]
  -[HMDMediaAccessory initWithCoder:]
  -[HMDMediaAccessory mediaProfile]
  -[HMDMediaAccessory supportedTransports]
  -[HMDMediaAccessory advertisement]
  -[HMDMediaAccessory _registerForMessages]
  -[HMDMediaAccessory reachableTransports]
  -[HMDMediaAccessory addAdvertisement:]
  -[HMDMediaAccessory transactionObjectUpdated:newValues:message:]
  -[HMDMediaAccessory handleUpdatedMinimumUserPrivilege:]
  -[HMDMediaAccessory handleUpdatedPassword:]
  -[HMDMediaAccessory initWithTransaction:home:]
  -[HMDMediaAccessory transportReports]
  -[HMDMediaAccessory transactionWithObjectChangeType:]
  -[HMDMediaAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:]
  -[HMDMediaAccessory removeAdvertisement:]
  -[HMDMediaAccessory setRemotelyReachable:]
  -[HMDMediaAccessory dumpSimpleState]
  -[HMDMediaAccessory _shouldFilterAccessoryProfile:]
  -[HMDMediaAccessory providesHashRouteID]
  -[HMDMediaAccessory addHostedAccessory:]
  -[HMDMediaAccessory removeHostedAccessory:]
  -[HMDMediaAccessory handleRoomChanged:]
  -[HMDMediaAccessory handleRoomNameChanged:]
  -[HMDMediaAccessory _createMediaProfile]
  -[HMDMediaAccessory handleUpdatedAdvertisement:]
  -[HMDMediaAccessory notifyConnectivityChangedWithReachabilityState:]
  -[HMDMediaAccessory assistantObject]


HMDMediaAccessoryModel : HMDAccessoryTransaction
  // class methods
  +[HMDMediaAccessoryModel properties]


HMDCameraConfigurationsLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *homeSettingsConfigurations

  // instance methods
  -[HMDCameraConfigurationsLogEvent .cxx_destruct]
  -[HMDCameraConfigurationsLogEvent initWithHomes:]
  -[HMDCameraConfigurationsLogEvent AWDMessageType]
  -[HMDCameraConfigurationsLogEvent metricForAWD]
  -[HMDCameraConfigurationsLogEvent homeSettingsConfigurations]


HMDCameraHomeSettingsConfiguration : HMFObject
 @property  NSArray *cameraSettings
 @property  NSArray *userSettings
 @property  unsigned long enabledResidentsDeviceCapabilities
 @property  BOOL faceClassificationEnabled
 @property  BOOL owner

  // instance methods
  -[HMDCameraHomeSettingsConfiguration userSettings]
  -[HMDCameraHomeSettingsConfiguration .cxx_destruct]
  -[HMDCameraHomeSettingsConfiguration isOwner]
  -[HMDCameraHomeSettingsConfiguration isFaceClassificationEnabled]
  -[HMDCameraHomeSettingsConfiguration initWithHome:]
  -[HMDCameraHomeSettingsConfiguration cameraSettings]
  -[HMDCameraHomeSettingsConfiguration enabledResidentsDeviceCapabilities]


HMDCameraAccessorySettingsConfiguration : HMFObject
 @property  BOOL isRecordingCapable
 @property  BOOL isRecordingEnabled
 @property  BOOL isRecordingAudioEnabled
 @property  unsigned long recordingEventTriggers
 @property  unsigned long numActivityZones
 @property  BOOL inclusionZone
 @property  BOOL smartBulletinBoardNotificationEnabled
 @property  BOOL reachabilityNotificationEnabled

  // instance methods
  -[HMDCameraAccessorySettingsConfiguration smartBulletinBoardNotificationEnabled]
  -[HMDCameraAccessorySettingsConfiguration recordingEventTriggers]
  -[HMDCameraAccessorySettingsConfiguration isRecordingAudioEnabled]
  -[HMDCameraAccessorySettingsConfiguration initWithCameraAccessory:]
  -[HMDCameraAccessorySettingsConfiguration isRecordingCapable]
  -[HMDCameraAccessorySettingsConfiguration isRecordingEnabled]
  -[HMDCameraAccessorySettingsConfiguration numActivityZones]
  -[HMDCameraAccessorySettingsConfiguration inclusionZone]
  -[HMDCameraAccessorySettingsConfiguration reachabilityNotificationEnabled]


HMDCameraUserSettingsConfiguration : HMFObject
 @property  BOOL sharingFaceClassificationsEnabled
 @property  BOOL importingFromPhotoLibraryEnabled
 @property  BOOL owner

  // instance methods
  -[HMDCameraUserSettingsConfiguration initWithUser:]
  -[HMDCameraUserSettingsConfiguration isOwner]
  -[HMDCameraUserSettingsConfiguration isImportingFromPhotoLibraryEnabled]
  -[HMDCameraUserSettingsConfiguration isSharingFaceClassificationsEnabled]


HMDDatabaseZoneManager : HMFObject <HMFLogging, HMDDatabaseDelegate, HMDCloudShareMessengerDelegate, HMDCloudShareParticipantsManagerDelegate>
 @property  long long state
 @property  <HMDDatabase> *database
 @property  HMDCloudShareMessenger *shareMessenger
 @property  <HMBLocalZoneDelegate><HMBCloudZoneDelegate> *zoneDelegate
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCloudShareParticipantsManager *participantsManager
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  @? participantsManagerFactory
 @property  <HMDDatabaseZoneManagerDataSource> *dataSource
 @property  <HMDDatabaseZoneManagerDelegate> *delegate
 @property  NSString *containerIdentifier
 @property  NSString *zoneName
 @property  HMDHome *home
 @property  NSUUID *messageTargetUUID
 @property  HMDDatabaseZoneManagerConfiguration *defaultConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDatabaseZoneManager logCategory]

  // instance methods
  -[HMDDatabaseZoneManager configure]
  -[HMDDatabaseZoneManager home]
  -[HMDDatabaseZoneManager logIdentifier]
  -[HMDDatabaseZoneManager dataSource]
  -[HMDDatabaseZoneManager remove]
  -[HMDDatabaseZoneManager setDelegate:]
  -[HMDDatabaseZoneManager workQueue]
  -[HMDDatabaseZoneManager delegate]
  -[HMDDatabaseZoneManager zoneName]
  -[HMDDatabaseZoneManager containerIdentifier]
  -[HMDDatabaseZoneManager state]
  -[HMDDatabaseZoneManager .cxx_destruct]
  -[HMDDatabaseZoneManager cloudZone]
  -[HMDDatabaseZoneManager messageTargetUUID]
  -[HMDDatabaseZoneManager setDefaultConfiguration:]
  -[HMDDatabaseZoneManager database]
  -[HMDDatabaseZoneManager setDataSource:]
  -[HMDDatabaseZoneManager localZone]
  -[HMDDatabaseZoneManager start]
  -[HMDDatabaseZoneManager defaultConfiguration]
  -[HMDDatabaseZoneManager setState:]
  -[HMDDatabaseZoneManager setCloudZone:]
  -[HMDDatabaseZoneManager setLocalZone:]
  -[HMDDatabaseZoneManager manager:didRequestSendForInvitation:toUser:]
  -[HMDDatabaseZoneManager manager:didRequestSendForInvitation:toDevice:]
  -[HMDDatabaseZoneManager messenger:didReceiveInvitationData:completion:]
  -[HMDDatabaseZoneManager messenger:didReceiveInvitationRequestFromUser:device:]
  -[HMDDatabaseZoneManager database:didCreateZoneWithName:isPrivate:]
  -[HMDDatabaseZoneManager database:didRemoveZoneWithName:isPrivate:]
  -[HMDDatabaseZoneManager database:didReceiveMessageWithUserInfo:]
  -[HMDDatabaseZoneManager _sendShareInvitation:toUser:device:]
  -[HMDDatabaseZoneManager shareMessenger]
  -[HMDDatabaseZoneManager participantsManager]
  -[HMDDatabaseZoneManager setParticipantsManager:]
  -[HMDDatabaseZoneManager participantsManagerFactory]
  -[HMDDatabaseZoneManager setParticipantsManagerFactory:]
  -[HMDDatabaseZoneManager initWithDatabase:zoneName:home:messageTargetUUID:zoneDelegate:workQueue:]
  -[HMDDatabaseZoneManager initWithDatabase:zoneName:home:shareMessenger:zoneDelegate:workQueue:]
  -[HMDDatabaseZoneManager startWithConfiguration:]
  -[HMDDatabaseZoneManager updateShareParticipants]
  -[HMDDatabaseZoneManager _fetchPrivateZonesWithConfiguration:]
  -[HMDDatabaseZoneManager _fetchExistingPrivateZonesWithConfiguration:]
  -[HMDDatabaseZoneManager _fetchSharedZonesWithConfiguration:]
  -[HMDDatabaseZoneManager _handleFetchZonesResult:configuration:]
  -[HMDDatabaseZoneManager _tearDownState]
  -[HMDDatabaseZoneManager zoneDelegate]
  -[HMDDatabaseZoneManager setZoneDelegate:]


AWDHomeKitEventsAggregationReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDataSyncState
 @property  NSString *dataSyncState
 @property  BOOL hasProcessLaunchCount
 @property  unsigned int processLaunchCount
 @property  BOOL hasJetsamReasonHighwaterCount
 @property  unsigned int jetsamReasonHighwaterCount
 @property  BOOL hasJetsamReasonProcessLimitCount
 @property  unsigned int jetsamReasonProcessLimitCount
 @property  BOOL hasJetsamReasonUnknownKillCount
 @property  unsigned int jetsamReasonUnknownKillCount
 @property  BOOL hasJetsamReasonOtherCount
 @property  unsigned int jetsamReasonOtherCount
 @property  BOOL hasProcessMemoryPressureStateWarningCount
 @property  unsigned int processMemoryPressureStateWarningCount
 @property  BOOL hasProcessMemoryPressureStateCriticalCount
 @property  unsigned int processMemoryPressureStateCriticalCount
 @property  BOOL hasAverageSampledProcessMemoryUsage
 @property  unsigned int averageSampledProcessMemoryUsage
 @property  BOOL hasPeakSampledProcessMemoryUsage
 @property  unsigned int peakSampledProcessMemoryUsage
 @property  BOOL hasRemoteMessagesSentCount
 @property  unsigned int remoteMessagesSentCount
 @property  BOOL hasRemoteMessagesReceivedCount
 @property  unsigned int remoteMessagesReceivedCount
 @property  BOOL hasAcceptedXPCRequestsCount
 @property  unsigned int acceptedXPCRequestsCount
 @property  BOOL hasErroredXPCRequestsCount
 @property  unsigned int erroredXPCRequestsCount
 @property  BOOL hasSentXPCNotificationsCount
 @property  unsigned int sentXPCNotificationsCount
 @property  BOOL hasFilteredXPCNotificationsCount
 @property  unsigned int filteredXPCNotificationsCount
 @property  BOOL hasHapIPInvalidationCount
 @property  unsigned int hapIPInvalidationCount
 @property  BOOL hasHapIPSentHTTPRequestsCount
 @property  unsigned int hapIPSentHTTPRequestsCount
 @property  BOOL hasHapIPReceivedHTTPResponsesCount
 @property  unsigned int hapIPReceivedHTTPResponsesCount
 @property  BOOL hasHapIPReceivedHTTPEventCount
 @property  unsigned int hapIPReceivedHTTPEventCount
 @property  BOOL hasHapBTLEConnectionsCount
 @property  unsigned int hapBTLEConnectionsCount
 @property  BOOL hasHapBTLEConnectionPerReasonsCount
 @property  unsigned int hapBTLEConnectionPerReasonsCount
 @property  BOOL hasHapBTLEDiscoveriesCount
 @property  unsigned int hapBTLEDiscoveriesCount
 @property  BOOL hasActiveDay
 @property  unsigned int activeDay
 @property  BOOL hasActiveDaysPerMonthCount
 @property  unsigned int activeDaysPerMonthCount

  // instance methods
  -[AWDHomeKitEventsAggregationReport setTimestamp:]
  -[AWDHomeKitEventsAggregationReport copyTo:]
  -[AWDHomeKitEventsAggregationReport .cxx_destruct]
  -[AWDHomeKitEventsAggregationReport mergeFrom:]
  -[AWDHomeKitEventsAggregationReport setHasTimestamp:]
  -[AWDHomeKitEventsAggregationReport dictionaryRepresentation]
  -[AWDHomeKitEventsAggregationReport hasTimestamp]
  -[AWDHomeKitEventsAggregationReport copyWithZone:]
  -[AWDHomeKitEventsAggregationReport timestamp]
  -[AWDHomeKitEventsAggregationReport readFrom:]
  -[AWDHomeKitEventsAggregationReport writeTo:]
  -[AWDHomeKitEventsAggregationReport isEqual:]
  -[AWDHomeKitEventsAggregationReport dataSyncState]
  -[AWDHomeKitEventsAggregationReport setDataSyncState:]
  -[AWDHomeKitEventsAggregationReport processLaunchCount]
  -[AWDHomeKitEventsAggregationReport setProcessLaunchCount:]
  -[AWDHomeKitEventsAggregationReport jetsamReasonHighwaterCount]
  -[AWDHomeKitEventsAggregationReport setJetsamReasonHighwaterCount:]
  -[AWDHomeKitEventsAggregationReport jetsamReasonProcessLimitCount]
  -[AWDHomeKitEventsAggregationReport setJetsamReasonProcessLimitCount:]
  -[AWDHomeKitEventsAggregationReport jetsamReasonOtherCount]
  -[AWDHomeKitEventsAggregationReport setJetsamReasonOtherCount:]
  -[AWDHomeKitEventsAggregationReport processMemoryPressureStateWarningCount]
  -[AWDHomeKitEventsAggregationReport setProcessMemoryPressureStateWarningCount:]
  -[AWDHomeKitEventsAggregationReport processMemoryPressureStateCriticalCount]
  -[AWDHomeKitEventsAggregationReport setProcessMemoryPressureStateCriticalCount:]
  -[AWDHomeKitEventsAggregationReport remoteMessagesSentCount]
  -[AWDHomeKitEventsAggregationReport setRemoteMessagesSentCount:]
  -[AWDHomeKitEventsAggregationReport remoteMessagesReceivedCount]
  -[AWDHomeKitEventsAggregationReport setRemoteMessagesReceivedCount:]
  -[AWDHomeKitEventsAggregationReport hapIPInvalidationCount]
  -[AWDHomeKitEventsAggregationReport setHapIPInvalidationCount:]
  -[AWDHomeKitEventsAggregationReport hapIPSentHTTPRequestsCount]
  -[AWDHomeKitEventsAggregationReport setHapIPSentHTTPRequestsCount:]
  -[AWDHomeKitEventsAggregationReport hapIPReceivedHTTPResponsesCount]
  -[AWDHomeKitEventsAggregationReport setHapIPReceivedHTTPResponsesCount:]
  -[AWDHomeKitEventsAggregationReport hapIPReceivedHTTPEventCount]
  -[AWDHomeKitEventsAggregationReport setHapIPReceivedHTTPEventCount:]
  -[AWDHomeKitEventsAggregationReport hapBTLEConnectionsCount]
  -[AWDHomeKitEventsAggregationReport setHapBTLEConnectionsCount:]
  -[AWDHomeKitEventsAggregationReport hapBTLEConnectionPerReasonsCount]
  -[AWDHomeKitEventsAggregationReport setHapBTLEConnectionPerReasonsCount:]
  -[AWDHomeKitEventsAggregationReport hapBTLEDiscoveriesCount]
  -[AWDHomeKitEventsAggregationReport setHapBTLEDiscoveriesCount:]
  -[AWDHomeKitEventsAggregationReport acceptedXPCRequestsCount]
  -[AWDHomeKitEventsAggregationReport setAcceptedXPCRequestsCount:]
  -[AWDHomeKitEventsAggregationReport erroredXPCRequestsCount]
  -[AWDHomeKitEventsAggregationReport setErroredXPCRequestsCount:]
  -[AWDHomeKitEventsAggregationReport sentXPCNotificationsCount]
  -[AWDHomeKitEventsAggregationReport setSentXPCNotificationsCount:]
  -[AWDHomeKitEventsAggregationReport filteredXPCNotificationsCount]
  -[AWDHomeKitEventsAggregationReport setFilteredXPCNotificationsCount:]
  -[AWDHomeKitEventsAggregationReport setActiveDay:]
  -[AWDHomeKitEventsAggregationReport activeDaysPerMonthCount]
  -[AWDHomeKitEventsAggregationReport setActiveDaysPerMonthCount:]
  -[AWDHomeKitEventsAggregationReport activeDay]
  -[AWDHomeKitEventsAggregationReport hasDataSyncState]
  -[AWDHomeKitEventsAggregationReport setHasProcessLaunchCount:]
  -[AWDHomeKitEventsAggregationReport hasProcessLaunchCount]
  -[AWDHomeKitEventsAggregationReport setHasJetsamReasonHighwaterCount:]
  -[AWDHomeKitEventsAggregationReport hasJetsamReasonHighwaterCount]
  -[AWDHomeKitEventsAggregationReport setHasJetsamReasonProcessLimitCount:]
  -[AWDHomeKitEventsAggregationReport hasJetsamReasonProcessLimitCount]
  -[AWDHomeKitEventsAggregationReport setJetsamReasonUnknownKillCount:]
  -[AWDHomeKitEventsAggregationReport setHasJetsamReasonUnknownKillCount:]
  -[AWDHomeKitEventsAggregationReport hasJetsamReasonUnknownKillCount]
  -[AWDHomeKitEventsAggregationReport setHasJetsamReasonOtherCount:]
  -[AWDHomeKitEventsAggregationReport hasJetsamReasonOtherCount]
  -[AWDHomeKitEventsAggregationReport setHasProcessMemoryPressureStateWarningCount:]
  -[AWDHomeKitEventsAggregationReport hasProcessMemoryPressureStateWarningCount]
  -[AWDHomeKitEventsAggregationReport setHasProcessMemoryPressureStateCriticalCount:]
  -[AWDHomeKitEventsAggregationReport hasProcessMemoryPressureStateCriticalCount]
  -[AWDHomeKitEventsAggregationReport setAverageSampledProcessMemoryUsage:]
  -[AWDHomeKitEventsAggregationReport setHasAverageSampledProcessMemoryUsage:]
  -[AWDHomeKitEventsAggregationReport hasAverageSampledProcessMemoryUsage]
  -[AWDHomeKitEventsAggregationReport setPeakSampledProcessMemoryUsage:]
  -[AWDHomeKitEventsAggregationReport setHasPeakSampledProcessMemoryUsage:]
  -[AWDHomeKitEventsAggregationReport hasPeakSampledProcessMemoryUsage]
  -[AWDHomeKitEventsAggregationReport setHasRemoteMessagesSentCount:]
  -[AWDHomeKitEventsAggregationReport hasRemoteMessagesSentCount]
  -[AWDHomeKitEventsAggregationReport setHasRemoteMessagesReceivedCount:]
  -[AWDHomeKitEventsAggregationReport hasRemoteMessagesReceivedCount]
  -[AWDHomeKitEventsAggregationReport setHasAcceptedXPCRequestsCount:]
  -[AWDHomeKitEventsAggregationReport hasAcceptedXPCRequestsCount]
  -[AWDHomeKitEventsAggregationReport setHasErroredXPCRequestsCount:]
  -[AWDHomeKitEventsAggregationReport hasErroredXPCRequestsCount]
  -[AWDHomeKitEventsAggregationReport setHasSentXPCNotificationsCount:]
  -[AWDHomeKitEventsAggregationReport hasSentXPCNotificationsCount]
  -[AWDHomeKitEventsAggregationReport setHasFilteredXPCNotificationsCount:]
  -[AWDHomeKitEventsAggregationReport hasFilteredXPCNotificationsCount]
  -[AWDHomeKitEventsAggregationReport setHasHapIPInvalidationCount:]
  -[AWDHomeKitEventsAggregationReport hasHapIPInvalidationCount]
  -[AWDHomeKitEventsAggregationReport setHasHapIPSentHTTPRequestsCount:]
  -[AWDHomeKitEventsAggregationReport hasHapIPSentHTTPRequestsCount]
  -[AWDHomeKitEventsAggregationReport setHasHapIPReceivedHTTPResponsesCount:]
  -[AWDHomeKitEventsAggregationReport hasHapIPReceivedHTTPResponsesCount]
  -[AWDHomeKitEventsAggregationReport setHasHapIPReceivedHTTPEventCount:]
  -[AWDHomeKitEventsAggregationReport hasHapIPReceivedHTTPEventCount]
  -[AWDHomeKitEventsAggregationReport setHasHapBTLEConnectionsCount:]
  -[AWDHomeKitEventsAggregationReport hasHapBTLEConnectionsCount]
  -[AWDHomeKitEventsAggregationReport setHasHapBTLEConnectionPerReasonsCount:]
  -[AWDHomeKitEventsAggregationReport hasHapBTLEConnectionPerReasonsCount]
  -[AWDHomeKitEventsAggregationReport setHasHapBTLEDiscoveriesCount:]
  -[AWDHomeKitEventsAggregationReport hasHapBTLEDiscoveriesCount]
  -[AWDHomeKitEventsAggregationReport setHasActiveDay:]
  -[AWDHomeKitEventsAggregationReport hasActiveDay]
  -[AWDHomeKitEventsAggregationReport setHasActiveDaysPerMonthCount:]
  -[AWDHomeKitEventsAggregationReport hasActiveDaysPerMonthCount]
  -[AWDHomeKitEventsAggregationReport jetsamReasonUnknownKillCount]
  -[AWDHomeKitEventsAggregationReport averageSampledProcessMemoryUsage]
  -[AWDHomeKitEventsAggregationReport peakSampledProcessMemoryUsage]


HMDTimeBasedFlagNameSpecifier : NSObject <HMDTimeBasedFlagSpecifying>
 @property  NSString *flagName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDTimeBasedFlagNameSpecifier supportsSecureCoding]
  +[HMDTimeBasedFlagNameSpecifier specifierWithFlagName:]

  // instance methods
  -[HMDTimeBasedFlagNameSpecifier encodeWithCoder:]
  -[HMDTimeBasedFlagNameSpecifier .cxx_destruct]
  -[HMDTimeBasedFlagNameSpecifier copyWithZone:]
  -[HMDTimeBasedFlagNameSpecifier isEqual:]
  -[HMDTimeBasedFlagNameSpecifier initWithCoder:]
  -[HMDTimeBasedFlagNameSpecifier initWithFlagName:]
  -[HMDTimeBasedFlagNameSpecifier isEqualToGroupNameSpecifier:]
  -[HMDTimeBasedFlagNameSpecifier flagName]


HMDTimeBasedFlagNameAndHomeSpecifier : NSObject <HMDTimeBasedFlagSpecifying>
 @property  NSString *flagName
 @property  NSUUID *homeUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDTimeBasedFlagNameAndHomeSpecifier supportsSecureCoding]
  +[HMDTimeBasedFlagNameAndHomeSpecifier specifierWithFlagName:homeUUID:]

  // instance methods
  -[HMDTimeBasedFlagNameAndHomeSpecifier encodeWithCoder:]
  -[HMDTimeBasedFlagNameAndHomeSpecifier .cxx_destruct]
  -[HMDTimeBasedFlagNameAndHomeSpecifier homeUUID]
  -[HMDTimeBasedFlagNameAndHomeSpecifier copyWithZone:]
  -[HMDTimeBasedFlagNameAndHomeSpecifier isEqual:]
  -[HMDTimeBasedFlagNameAndHomeSpecifier initWithCoder:]
  -[HMDTimeBasedFlagNameAndHomeSpecifier flagName]
  -[HMDTimeBasedFlagNameAndHomeSpecifier initWithFlagName:homeUUID:]


HMDTimeBasedFlagsPersistentStore : NSObject <HMDTimeBasedFlagsStoring>
  // instance methods
  -[HMDTimeBasedFlagsPersistentStore unarchive]
  -[HMDTimeBasedFlagsPersistentStore archiveDictionary:]
  -[HMDTimeBasedFlagsPersistentStore unarchiveLegacyEventFlags]


HMDTimeBasedFlagsManager : HMFObject <HMDTimeBasedFlagContext>
 @property  HMDMetricsDateProvider *dateProvider
 @property  NSMutableDictionary *flags
 @property  <HMDTimeBasedFlagsStoring> *flagsStorage
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDTimeBasedFlagsManager _save]
  -[HMDTimeBasedFlagsManager dateProvider]
  -[HMDTimeBasedFlagsManager workQueue]
  -[HMDTimeBasedFlagsManager initWithDateProvider:]
  -[HMDTimeBasedFlagsManager setDateProvider:]
  -[HMDTimeBasedFlagsManager setFlags:]
  -[HMDTimeBasedFlagsManager .cxx_destruct]
  -[HMDTimeBasedFlagsManager flags]
  -[HMDTimeBasedFlagsManager flagChanged]
  -[HMDTimeBasedFlagsManager forceSave]
  -[HMDTimeBasedFlagsManager initWithStorage:dateProvider:]
  -[HMDTimeBasedFlagsManager flagForName:periodicity:]
  -[HMDTimeBasedFlagsManager flagForName:homeUUID:periodicity:]
  -[HMDTimeBasedFlagsManager flagForSpecifier:periodicity:]
  -[HMDTimeBasedFlagsManager newFlagForPeriodicity:]
  -[HMDTimeBasedFlagsManager _fetchAllFlags]
  -[HMDTimeBasedFlagsManager unarchiveFlags]
  -[HMDTimeBasedFlagsManager unarchiveLegacyFlags]
  -[HMDTimeBasedFlagsManager flagsStorage]


HMDDataStreamSocket : NSObject <HMFLogging, HMDDataStreamSocketPrivate>
 @property  HMDDataStreamStreamProtocol *streamProtocol
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL closing
 @property  BOOL closed
 @property  NSMutableArray *pendingReads
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDDataStreamSocketDelegate> *delegate
 @property  NSString *applicationProtocolName
 @property  unsigned long trafficClass

  // class methods
  +[HMDDataStreamSocket logCategory]

  // instance methods
  -[HMDDataStreamSocket readData]
  -[HMDDataStreamSocket trafficClass]
  -[HMDDataStreamSocket isClosed]
  -[HMDDataStreamSocket writeData:error:]
  -[HMDDataStreamSocket setDelegate:]
  -[HMDDataStreamSocket workQueue]
  -[HMDDataStreamSocket delegate]
  -[HMDDataStreamSocket isClosing]
  -[HMDDataStreamSocket close]
  -[HMDDataStreamSocket .cxx_destruct]
  -[HMDDataStreamSocket closeWithError:]
  -[HMDDataStreamSocket setClosed:]
  -[HMDDataStreamSocket setTrafficClass:]
  -[HMDDataStreamSocket writeData:completion:]
  -[HMDDataStreamSocket streamProtocol]
  -[HMDDataStreamSocket applicationProtocolName]
  -[HMDDataStreamSocket pendingReads]
  -[HMDDataStreamSocket handleIncomingData:]
  -[HMDDataStreamSocket closeInitiated]
  -[HMDDataStreamSocket initWithStreamProtocol:applicationProtocolName:workQueue:]
  -[HMDDataStreamSocket _writeData:completion:]
  -[HMDDataStreamSocket setClosing:]


HMDCompositeSettingIntegerConstraint : NSObject <HMDCompositeSettingConstraint>
 @property  long long min
 @property  long long max
 @property  long long step
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCompositeSettingIntegerConstraint min]
  -[HMDCompositeSettingIntegerConstraint step]
  -[HMDCompositeSettingIntegerConstraint max]
  -[HMDCompositeSettingIntegerConstraint isValidValue:error:]
  -[HMDCompositeSettingIntegerConstraint initWithMaxValue:minValue:stepValue:]


HMDCameraIDSSessionInviterDeviceVerifier : HMFObject <HMFLogging>
 @property  NSString *sessionID
 @property  HMDDevice *expectedInviter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraIDSSessionInviterDeviceVerifier logCategory]

  // instance methods
  -[HMDCameraIDSSessionInviterDeviceVerifier logIdentifier]
  -[HMDCameraIDSSessionInviterDeviceVerifier sessionID]
  -[HMDCameraIDSSessionInviterDeviceVerifier .cxx_destruct]
  -[HMDCameraIDSSessionInviterDeviceVerifier initWithSessionID:expectedInviter:]
  -[HMDCameraIDSSessionInviterDeviceVerifier canAcceptInvitationFromDeviceWithHandle:forSessionWithIdentifier:]
  -[HMDCameraIDSSessionInviterDeviceVerifier expectedInviter]


HMDStreamingCapabilities : HMFObject <NSSecureCoding>
 @property  NSDictionary *supportedAudioCodecs
 @property  NSSet *supportedVideoCodecs
 @property  NSSet *supportedVideoResolutions
 @property  NSSet *supportedH264Profiles
 @property  NSSet *supportedH264Levels
 @property  NSSet *supportedPacketizationModes
 @property  NSSet *supportedBitRateSettings
 @property  NSSet *supportedAudioSampleRates
 @property  unsigned long streamingTierType
 @property  BOOL supportsComfortNoise

  // class methods
  +[HMDStreamingCapabilities supportsSecureCoding]
  +[HMDStreamingCapabilities translateCapabilities:]
  +[HMDStreamingCapabilities aspectRatioOfResolution:]

  // instance methods
  -[HMDStreamingCapabilities encodeWithCoder:]
  -[HMDStreamingCapabilities .cxx_destruct]
  -[HMDStreamingCapabilities initWithCoder:]
  -[HMDStreamingCapabilities supportsComfortNoise]
  -[HMDStreamingCapabilities initWithStreamPreference:]
  -[HMDStreamingCapabilities _supportedResolutionsWithOverrides]
  -[HMDStreamingCapabilities _updateWithStreamPreference:]
  -[HMDStreamingCapabilities updateWithRemoteSettings:]
  -[HMDStreamingCapabilities supportedAudioCodecs]
  -[HMDStreamingCapabilities supportedVideoCodecs]
  -[HMDStreamingCapabilities supportedVideoResolutions]
  -[HMDStreamingCapabilities supportedH264Profiles]
  -[HMDStreamingCapabilities supportedH264Levels]
  -[HMDStreamingCapabilities supportedPacketizationModes]
  -[HMDStreamingCapabilities supportedBitRateSettings]
  -[HMDStreamingCapabilities supportedAudioSampleRates]
  -[HMDStreamingCapabilities streamingTierType]
  -[HMDStreamingCapabilities setStreamingTierType:]
  -[HMDStreamingCapabilities setSupportsComfortNoise:]


HMDMediaGroupsAggregateConsumer : HMFObject <HMFLogging, HMEEventConsumer, HMDMediaGroupsAggregateConsumerDataProvider>
 @property  NSUUID *identifier
 @property  <HMESubscriptionProviding> *subscriptionProvider
 @property  NSNotificationCenter *notificationCenter
 @property  HMDMediaGroupsAggregateData *aggregationData
 @property  <HMDMediaGroupsAggregateConsumerDelegate> *delegate
 @property  NSArray *groups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsAggregateConsumer logCategory]

  // instance methods
  -[HMDMediaGroupsAggregateConsumer notificationCenter]
  -[HMDMediaGroupsAggregateConsumer didReceiveEvent:topic:]
  -[HMDMediaGroupsAggregateConsumer groups]
  -[HMDMediaGroupsAggregateConsumer identifier]
  -[HMDMediaGroupsAggregateConsumer logIdentifier]
  -[HMDMediaGroupsAggregateConsumer setDelegate:]
  -[HMDMediaGroupsAggregateConsumer delegate]
  -[HMDMediaGroupsAggregateConsumer .cxx_destruct]
  -[HMDMediaGroupsAggregateConsumer didReceiveCachedEvent:topic:source:]
  -[HMDMediaGroupsAggregateConsumer unconfigure]
  -[HMDMediaGroupsAggregateConsumer subscriptionProvider]
  -[HMDMediaGroupsAggregateConsumer configureWithHome:]
  -[HMDMediaGroupsAggregateConsumer destinationControllerDataWithParentIdentifier:]
  -[HMDMediaGroupsAggregateConsumer destinationWithIdentifier:]
  -[HMDMediaGroupsAggregateConsumer destinationWithParentIdentifier:]
  -[HMDMediaGroupsAggregateConsumer groupWithIdentifier:]
  -[HMDMediaGroupsAggregateConsumer allMediaSystemData]
  -[HMDMediaGroupsAggregateConsumer mediaSystemDataWithIdentifier:]
  -[HMDMediaGroupsAggregateConsumer initWithIdentifier:subscriptionProvider:notificationCenter:]
  -[HMDMediaGroupsAggregateConsumer setAggregationData:]
  -[HMDMediaGroupsAggregateConsumer aggregationData]
  -[HMDMediaGroupsAggregateConsumer stopSubscription]
  -[HMDMediaGroupsAggregateConsumer startSubscriptionForHome:]
  -[HMDMediaGroupsAggregateConsumer notifyOfUpdatedAggregateData]
  -[HMDMediaGroupsAggregateConsumer isAggregateTopic:]


AWDHomeKitCameraSnapshot : PBCodable <NSCopying>
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasCertified
 @property  int certified
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasSessionID
 @property  NSString *sessionID
 @property  BOOL hasErrorCode
 @property  unsigned int errorCode
 @property  BOOL hasIsLocal
 @property  BOOL isLocal
 @property  BOOL hasForNotification
 @property  BOOL forNotification
 @property  BOOL hasIdsSessionSetup
 @property  AWDHomeKitCameraIDSSessionSetup *idsSessionSetup
 @property  BOOL hasSentSnapshotRequestToAccessory
 @property  unsigned int sentSnapshotRequestToAccessory
 @property  BOOL hasReceivedSnapshotFromAccessory
 @property  unsigned int receivedSnapshotFromAccessory
 @property  BOOL hasWatchMessaging
 @property  AWDHomeKitCameraSnapshotMessaging *watchMessaging
 @property  BOOL hasControllerMessaging
 @property  AWDHomeKitCameraSnapshotMessaging *controllerMessaging
 @property  BOOL hasResidentMessaging
 @property  AWDHomeKitCameraSnapshotMessaging *residentMessaging
 @property  BOOL hasResidentToPhone
 @property  AWDHomeKitCameraSnapshotIDSTransfer *residentToPhone
 @property  BOOL hasPhoneToWatch
 @property  AWDHomeKitCameraSnapshotIDSTransfer *phoneToWatch
 @property  BOOL hasUnderlyingErrorDomain
 @property  NSString *underlyingErrorDomain
 @property  BOOL hasUnderlyingErrorCode
 @property  unsigned int underlyingErrorCode

  // instance methods
  -[AWDHomeKitCameraSnapshot hasErrorCode]
  -[AWDHomeKitCameraSnapshot setErrorCode:]
  -[AWDHomeKitCameraSnapshot errorCode]
  -[AWDHomeKitCameraSnapshot forNotification]
  -[AWDHomeKitCameraSnapshot setIsLocal:]
  -[AWDHomeKitCameraSnapshot setTimestamp:]
  -[AWDHomeKitCameraSnapshot copyTo:]
  -[AWDHomeKitCameraSnapshot sessionID]
  -[AWDHomeKitCameraSnapshot .cxx_destruct]
  -[AWDHomeKitCameraSnapshot setHasErrorCode:]
  -[AWDHomeKitCameraSnapshot mergeFrom:]
  -[AWDHomeKitCameraSnapshot setHasTimestamp:]
  -[AWDHomeKitCameraSnapshot dictionaryRepresentation]
  -[AWDHomeKitCameraSnapshot hasTimestamp]
  -[AWDHomeKitCameraSnapshot copyWithZone:]
  -[AWDHomeKitCameraSnapshot setForNotification:]
  -[AWDHomeKitCameraSnapshot timestamp]
  -[AWDHomeKitCameraSnapshot readFrom:]
  -[AWDHomeKitCameraSnapshot isLocal]
  -[AWDHomeKitCameraSnapshot writeTo:]
  -[AWDHomeKitCameraSnapshot setSessionID:]
  -[AWDHomeKitCameraSnapshot isEqual:]
  -[AWDHomeKitCameraSnapshot setUnderlyingErrorDomain:]
  -[AWDHomeKitCameraSnapshot hasUnderlyingErrorDomain]
  -[AWDHomeKitCameraSnapshot setUnderlyingErrorCode:]
  -[AWDHomeKitCameraSnapshot setHasUnderlyingErrorCode:]
  -[AWDHomeKitCameraSnapshot hasUnderlyingErrorCode]
  -[AWDHomeKitCameraSnapshot underlyingErrorDomain]
  -[AWDHomeKitCameraSnapshot underlyingErrorCode]
  -[AWDHomeKitCameraSnapshot hasSessionID]
  -[AWDHomeKitCameraSnapshot hasVendorDetails]
  -[AWDHomeKitCameraSnapshot vendorDetails]
  -[AWDHomeKitCameraSnapshot setVendorDetails:]
  -[AWDHomeKitCameraSnapshot certified]
  -[AWDHomeKitCameraSnapshot setCertified:]
  -[AWDHomeKitCameraSnapshot setHasCertified:]
  -[AWDHomeKitCameraSnapshot hasCertified]
  -[AWDHomeKitCameraSnapshot certifiedAsString:]
  -[AWDHomeKitCameraSnapshot StringAsCertified:]
  -[AWDHomeKitCameraSnapshot setHasIsLocal:]
  -[AWDHomeKitCameraSnapshot hasIsLocal]
  -[AWDHomeKitCameraSnapshot hasIdsSessionSetup]
  -[AWDHomeKitCameraSnapshot hasWatchMessaging]
  -[AWDHomeKitCameraSnapshot hasControllerMessaging]
  -[AWDHomeKitCameraSnapshot hasResidentMessaging]
  -[AWDHomeKitCameraSnapshot idsSessionSetup]
  -[AWDHomeKitCameraSnapshot setIdsSessionSetup:]
  -[AWDHomeKitCameraSnapshot watchMessaging]
  -[AWDHomeKitCameraSnapshot setWatchMessaging:]
  -[AWDHomeKitCameraSnapshot controllerMessaging]
  -[AWDHomeKitCameraSnapshot setControllerMessaging:]
  -[AWDHomeKitCameraSnapshot residentMessaging]
  -[AWDHomeKitCameraSnapshot setResidentMessaging:]
  -[AWDHomeKitCameraSnapshot setHasForNotification:]
  -[AWDHomeKitCameraSnapshot hasForNotification]
  -[AWDHomeKitCameraSnapshot setSentSnapshotRequestToAccessory:]
  -[AWDHomeKitCameraSnapshot setHasSentSnapshotRequestToAccessory:]
  -[AWDHomeKitCameraSnapshot hasSentSnapshotRequestToAccessory]
  -[AWDHomeKitCameraSnapshot setReceivedSnapshotFromAccessory:]
  -[AWDHomeKitCameraSnapshot setHasReceivedSnapshotFromAccessory:]
  -[AWDHomeKitCameraSnapshot hasReceivedSnapshotFromAccessory]
  -[AWDHomeKitCameraSnapshot hasResidentToPhone]
  -[AWDHomeKitCameraSnapshot hasPhoneToWatch]
  -[AWDHomeKitCameraSnapshot sentSnapshotRequestToAccessory]
  -[AWDHomeKitCameraSnapshot receivedSnapshotFromAccessory]
  -[AWDHomeKitCameraSnapshot residentToPhone]
  -[AWDHomeKitCameraSnapshot setResidentToPhone:]
  -[AWDHomeKitCameraSnapshot phoneToWatch]
  -[AWDHomeKitCameraSnapshot setPhoneToWatch:]


HMDCameraRecordingSessionTimelineManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  double fragmentDuration
 @property  NSDate *fragmentCreationReferenceDate
 @property  NSMutableArray *motionActiveDateIntervals
 @property  NSMutableArray *doorbellActiveDateIntervals
 @property  NSString *logIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSessionTimelineManager logCategory]

  // instance methods
  -[HMDCameraRecordingSessionTimelineManager logIdentifier]
  -[HMDCameraRecordingSessionTimelineManager workQueue]
  -[HMDCameraRecordingSessionTimelineManager attributeDescriptions]
  -[HMDCameraRecordingSessionTimelineManager .cxx_destruct]
  -[HMDCameraRecordingSessionTimelineManager initWithWorkQueue:fragmentDuration:fragmentCreationReferenceDate:logIdentifier:]
  -[HMDCameraRecordingSessionTimelineManager creationDateForFragmentAtTimeOffset:]
  -[HMDCameraRecordingSessionTimelineManager isMotionTriggerActiveAtAnyTimeAfterOffset:forDuration:]
  -[HMDCameraRecordingSessionTimelineManager isDoorbellTriggerActiveAtAnyTimeAfterOffset:forDuration:]
  -[HMDCameraRecordingSessionTimelineManager handleMotionActive:didChangeAtDate:]
  -[HMDCameraRecordingSessionTimelineManager handleDoorbellDidActivateAtDate:]
  -[HMDCameraRecordingSessionTimelineManager isDoorbellTriggerActiveAtAnyTimeAfterOffset:]
  -[HMDCameraRecordingSessionTimelineManager isMotionTriggerActiveAtAnyTimeAfterOffset:]
  -[HMDCameraRecordingSessionTimelineManager fragmentDuration]
  -[HMDCameraRecordingSessionTimelineManager fragmentCreationReferenceDate]
  -[HMDCameraRecordingSessionTimelineManager motionActiveDateIntervals]
  -[HMDCameraRecordingSessionTimelineManager doorbellActiveDateIntervals]


AWDHomeKitNetworkProtectionReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp

  // instance methods
  -[AWDHomeKitNetworkProtectionReport setTimestamp:]
  -[AWDHomeKitNetworkProtectionReport copyTo:]
  -[AWDHomeKitNetworkProtectionReport mergeFrom:]
  -[AWDHomeKitNetworkProtectionReport setHasTimestamp:]
  -[AWDHomeKitNetworkProtectionReport dictionaryRepresentation]
  -[AWDHomeKitNetworkProtectionReport hasTimestamp]
  -[AWDHomeKitNetworkProtectionReport copyWithZone:]
  -[AWDHomeKitNetworkProtectionReport timestamp]
  -[AWDHomeKitNetworkProtectionReport readFrom:]
  -[AWDHomeKitNetworkProtectionReport writeTo:]
  -[AWDHomeKitNetworkProtectionReport isEqual:]


HMDNetworkRouterAccessViolationControlOperation : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long operation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterAccessViolationControlOperation parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterAccessViolationControlOperation initWithOperation:]
  -[HMDNetworkRouterAccessViolationControlOperation operation]
  -[HMDNetworkRouterAccessViolationControlOperation setOperation:]
  -[HMDNetworkRouterAccessViolationControlOperation parseFromData:error:]
  -[HMDNetworkRouterAccessViolationControlOperation copyWithZone:]
  -[HMDNetworkRouterAccessViolationControlOperation isEqual:]
  -[HMDNetworkRouterAccessViolationControlOperation init]
  -[HMDNetworkRouterAccessViolationControlOperation serializeWithError:]


HMDNetworkRouterAdvertisementProtocol : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long advertisementProtocol
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterAdvertisementProtocol parsedFromData:error:]
  +[HMDNetworkRouterAdvertisementProtocol protocolFromFirewallRuleAdvertisingProtocol:]

  // instance methods
  -[HMDNetworkRouterAdvertisementProtocol parseFromData:error:]
  -[HMDNetworkRouterAdvertisementProtocol copyWithZone:]
  -[HMDNetworkRouterAdvertisementProtocol isEqual:]
  -[HMDNetworkRouterAdvertisementProtocol init]
  -[HMDNetworkRouterAdvertisementProtocol serializeWithError:]
  -[HMDNetworkRouterAdvertisementProtocol initWithAdvertisementProtocol:]
  -[HMDNetworkRouterAdvertisementProtocol advertisementProtocol]
  -[HMDNetworkRouterAdvertisementProtocol setAdvertisementProtocol:]


HMDNetworkRouterClientStatusControlOperation : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long operation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatusControlOperation parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatusControlOperation initWithOperation:]
  -[HMDNetworkRouterClientStatusControlOperation operation]
  -[HMDNetworkRouterClientStatusControlOperation setOperation:]
  -[HMDNetworkRouterClientStatusControlOperation parseFromData:error:]
  -[HMDNetworkRouterClientStatusControlOperation copyWithZone:]
  -[HMDNetworkRouterClientStatusControlOperation isEqual:]
  -[HMDNetworkRouterClientStatusControlOperation init]
  -[HMDNetworkRouterClientStatusControlOperation serializeWithError:]


HMDNetworkRouterControlOperationStatus : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long status
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterControlOperationStatus parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterControlOperationStatus status]
  -[HMDNetworkRouterControlOperationStatus parseFromData:error:]
  -[HMDNetworkRouterControlOperationStatus setStatus:]
  -[HMDNetworkRouterControlOperationStatus initWithStatus:]
  -[HMDNetworkRouterControlOperationStatus copyWithZone:]
  -[HMDNetworkRouterControlOperationStatus isEqual:]
  -[HMDNetworkRouterControlOperationStatus init]
  -[HMDNetworkRouterControlOperationStatus serializeWithError:]


HMDNetworkRouterControlOperation : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long operation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterControlOperation parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterControlOperation initWithOperation:]
  -[HMDNetworkRouterControlOperation operation]
  -[HMDNetworkRouterControlOperation setOperation:]
  -[HMDNetworkRouterControlOperation parseFromData:error:]
  -[HMDNetworkRouterControlOperation copyWithZone:]
  -[HMDNetworkRouterControlOperation isEqual:]
  -[HMDNetworkRouterControlOperation init]
  -[HMDNetworkRouterControlOperation serializeWithError:]


HMDNetworkRouterIPProtocolVersion : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long protocol
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterIPProtocolVersion parsedFromData:error:]
  +[HMDNetworkRouterIPProtocolVersion protocolFromIPProtocolVersion:]

  // instance methods
  -[HMDNetworkRouterIPProtocolVersion initWithProtocol:]
  -[HMDNetworkRouterIPProtocolVersion parseFromData:error:]
  -[HMDNetworkRouterIPProtocolVersion setProtocol:]
  -[HMDNetworkRouterIPProtocolVersion copyWithZone:]
  -[HMDNetworkRouterIPProtocolVersion protocol]
  -[HMDNetworkRouterIPProtocolVersion isEqual:]
  -[HMDNetworkRouterIPProtocolVersion init]
  -[HMDNetworkRouterIPProtocolVersion serializeWithError:]


HMDNetworkRouterLANFirewall : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterLANFirewall parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterLANFirewall type]
  -[HMDNetworkRouterLANFirewall parseFromData:error:]
  -[HMDNetworkRouterLANFirewall initWithType:]
  -[HMDNetworkRouterLANFirewall setType:]
  -[HMDNetworkRouterLANFirewall copyWithZone:]
  -[HMDNetworkRouterLANFirewall isEqual:]
  -[HMDNetworkRouterLANFirewall init]
  -[HMDNetworkRouterLANFirewall serializeWithError:]


HMDNetworkRouterProtocol : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long protocol
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterProtocol parsedFromData:error:]
  +[HMDNetworkRouterProtocol protocolFromTransportProtocol:]

  // instance methods
  -[HMDNetworkRouterProtocol initWithProtocol:]
  -[HMDNetworkRouterProtocol parseFromData:error:]
  -[HMDNetworkRouterProtocol setProtocol:]
  -[HMDNetworkRouterProtocol copyWithZone:]
  -[HMDNetworkRouterProtocol protocol]
  -[HMDNetworkRouterProtocol isEqual:]
  -[HMDNetworkRouterProtocol init]
  -[HMDNetworkRouterProtocol serializeWithError:]


HMDNetworkRouterRuleDirection : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long direction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterRuleDirection parsedFromData:error:]
  +[HMDNetworkRouterRuleDirection directionFromLANDirection:]

  // instance methods
  -[HMDNetworkRouterRuleDirection setDirection:]
  -[HMDNetworkRouterRuleDirection parseFromData:error:]
  -[HMDNetworkRouterRuleDirection direction]
  -[HMDNetworkRouterRuleDirection copyWithZone:]
  -[HMDNetworkRouterRuleDirection isEqual:]
  -[HMDNetworkRouterRuleDirection init]
  -[HMDNetworkRouterRuleDirection initWithDirection:]
  -[HMDNetworkRouterRuleDirection serializeWithError:]


HMDNetworkRouterWANFirewall : NSObject <NSCopying, HAPTLVProtocol>
 @property  long long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANFirewall parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANFirewall type]
  -[HMDNetworkRouterWANFirewall parseFromData:error:]
  -[HMDNetworkRouterWANFirewall initWithType:]
  -[HMDNetworkRouterWANFirewall setType:]
  -[HMDNetworkRouterWANFirewall copyWithZone:]
  -[HMDNetworkRouterWANFirewall isEqual:]
  -[HMDNetworkRouterWANFirewall init]
  -[HMDNetworkRouterWANFirewall serializeWithError:]


HMDNetworkRouterAccessViolation : NSObject <NSCopying, HAPTLVProtocol>
 @property  HAPTLVUnsignedNumberValue *clientIdentifier
 @property  HAPTLVUnsignedNumberValue *lastViolationTimestamp
 @property  HAPTLVUnsignedNumberValue *lastResetTimestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterAccessViolation parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterAccessViolation setClientIdentifier:]
  -[HMDNetworkRouterAccessViolation lastResetTimestamp]
  -[HMDNetworkRouterAccessViolation clientIdentifier]
  -[HMDNetworkRouterAccessViolation parseFromData:error:]
  -[HMDNetworkRouterAccessViolation .cxx_destruct]
  -[HMDNetworkRouterAccessViolation copyWithZone:]
  -[HMDNetworkRouterAccessViolation isEqual:]
  -[HMDNetworkRouterAccessViolation init]
  -[HMDNetworkRouterAccessViolation serializeWithError:]
  -[HMDNetworkRouterAccessViolation initWithClientIdentifier:lastViolationTimestamp:lastResetTimestamp:]
  -[HMDNetworkRouterAccessViolation lastViolationTimestamp]
  -[HMDNetworkRouterAccessViolation setLastViolationTimestamp:]
  -[HMDNetworkRouterAccessViolation setLastResetTimestamp:]


HMDNetworkRouterAccessViolationControl : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterAccessViolationControlOperation *operation
 @property  HMDNetworkRouterClientIdentifierList *clientIdentifierList
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterAccessViolationControl parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterAccessViolationControl operation]
  -[HMDNetworkRouterAccessViolationControl setOperation:]
  -[HMDNetworkRouterAccessViolationControl parseFromData:error:]
  -[HMDNetworkRouterAccessViolationControl .cxx_destruct]
  -[HMDNetworkRouterAccessViolationControl copyWithZone:]
  -[HMDNetworkRouterAccessViolationControl isEqual:]
  -[HMDNetworkRouterAccessViolationControl init]
  -[HMDNetworkRouterAccessViolationControl serializeWithError:]
  -[HMDNetworkRouterAccessViolationControl initWithOperation:clientIdentifierList:]
  -[HMDNetworkRouterAccessViolationControl clientIdentifierList]
  -[HMDNetworkRouterAccessViolationControl setClientIdentifierList:]


HMDNetworkRouterAccessViolationControlResponse : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *violations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterAccessViolationControlResponse parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterAccessViolationControlResponse parseFromData:error:]
  -[HMDNetworkRouterAccessViolationControlResponse .cxx_destruct]
  -[HMDNetworkRouterAccessViolationControlResponse copyWithZone:]
  -[HMDNetworkRouterAccessViolationControlResponse isEqual:]
  -[HMDNetworkRouterAccessViolationControlResponse init]
  -[HMDNetworkRouterAccessViolationControlResponse serializeWithError:]
  -[HMDNetworkRouterAccessViolationControlResponse initWithViolations:]
  -[HMDNetworkRouterAccessViolationControlResponse violations]
  -[HMDNetworkRouterAccessViolationControlResponse setViolations:]


HMDNetworkRouterClientConfiguration : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSUUID *fingerprint
 @property  HAPTLVUnsignedNumberValue *clientIdentifier
 @property  HAPTLVUnsignedNumberValue *lanIdentifier
 @property  HMDNetworkRouterCredential *credential
 @property  HMDNetworkRouterWANFirewallConfiguration *wanFirewallConfiguration
 @property  HMDNetworkRouterLANFirewallConfiguration *lanFirewallConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientConfiguration parsedFromData:error:]
  +[HMDNetworkRouterClientConfiguration configurationWithClientIdentifier:lanIdentifier:]
  +[HMDNetworkRouterClientConfiguration configurationForOpenProtectionWithClientIdentifier:]
  +[HMDNetworkRouterClientConfiguration configurationForFirewallConfiguration:hapAccessory:airplayAccessory:withClientIdentifier:]

  // instance methods
  -[HMDNetworkRouterClientConfiguration setClientIdentifier:]
  -[HMDNetworkRouterClientConfiguration credential]
  -[HMDNetworkRouterClientConfiguration fingerprint]
  -[HMDNetworkRouterClientConfiguration clientIdentifier]
  -[HMDNetworkRouterClientConfiguration parseFromData:error:]
  -[HMDNetworkRouterClientConfiguration .cxx_destruct]
  -[HMDNetworkRouterClientConfiguration copyWithZone:]
  -[HMDNetworkRouterClientConfiguration isEqual:]
  -[HMDNetworkRouterClientConfiguration init]
  -[HMDNetworkRouterClientConfiguration setCredential:]
  -[HMDNetworkRouterClientConfiguration serializeWithError:]
  -[HMDNetworkRouterClientConfiguration initWithClientIdentifier:lanIdentifier:credential:wanFirewallConfiguration:lanFirewallConfiguration:]
  -[HMDNetworkRouterClientConfiguration lanIdentifier]
  -[HMDNetworkRouterClientConfiguration setLanIdentifier:]
  -[HMDNetworkRouterClientConfiguration wanFirewallConfiguration]
  -[HMDNetworkRouterClientConfiguration setWanFirewallConfiguration:]
  -[HMDNetworkRouterClientConfiguration lanFirewallConfiguration]
  -[HMDNetworkRouterClientConfiguration setLanFirewallConfiguration:]


HMDNetworkRouterClientControl : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *operations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientControl parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientControl operations]
  -[HMDNetworkRouterClientControl setOperations:]
  -[HMDNetworkRouterClientControl parseFromData:error:]
  -[HMDNetworkRouterClientControl .cxx_destruct]
  -[HMDNetworkRouterClientControl initWithOperations:]
  -[HMDNetworkRouterClientControl copyWithZone:]
  -[HMDNetworkRouterClientControl isEqual:]
  -[HMDNetworkRouterClientControl init]
  -[HMDNetworkRouterClientControl serializeWithError:]


HMDNetworkRouterClientControlOperation : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterControlOperation *operation
 @property  HMDNetworkRouterClientConfiguration *configuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientControlOperation parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientControlOperation setConfiguration:]
  -[HMDNetworkRouterClientControlOperation operation]
  -[HMDNetworkRouterClientControlOperation setOperation:]
  -[HMDNetworkRouterClientControlOperation configuration]
  -[HMDNetworkRouterClientControlOperation parseFromData:error:]
  -[HMDNetworkRouterClientControlOperation .cxx_destruct]
  -[HMDNetworkRouterClientControlOperation copyWithZone:]
  -[HMDNetworkRouterClientControlOperation isEqual:]
  -[HMDNetworkRouterClientControlOperation init]
  -[HMDNetworkRouterClientControlOperation serializeWithError:]
  -[HMDNetworkRouterClientControlOperation initWithOperation:configuration:]


HMDNetworkRouterClientControlOperationResponse : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterControlOperationStatus *status
 @property  HMDNetworkRouterClientConfiguration *configuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientControlOperationResponse parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientControlOperationResponse setConfiguration:]
  -[HMDNetworkRouterClientControlOperationResponse configuration]
  -[HMDNetworkRouterClientControlOperationResponse status]
  -[HMDNetworkRouterClientControlOperationResponse parseFromData:error:]
  -[HMDNetworkRouterClientControlOperationResponse setStatus:]
  -[HMDNetworkRouterClientControlOperationResponse .cxx_destruct]
  -[HMDNetworkRouterClientControlOperationResponse copyWithZone:]
  -[HMDNetworkRouterClientControlOperationResponse isEqual:]
  -[HMDNetworkRouterClientControlOperationResponse init]
  -[HMDNetworkRouterClientControlOperationResponse serializeWithError:]
  -[HMDNetworkRouterClientControlOperationResponse initWithStatus:configuration:]


HMDNetworkRouterClientControlResponse : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *operationResponses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientControlResponse parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientControlResponse parseFromData:error:]
  -[HMDNetworkRouterClientControlResponse .cxx_destruct]
  -[HMDNetworkRouterClientControlResponse copyWithZone:]
  -[HMDNetworkRouterClientControlResponse isEqual:]
  -[HMDNetworkRouterClientControlResponse init]
  -[HMDNetworkRouterClientControlResponse serializeWithError:]
  -[HMDNetworkRouterClientControlResponse initWithOperationResponses:]
  -[HMDNetworkRouterClientControlResponse operationResponses]
  -[HMDNetworkRouterClientControlResponse setOperationResponses:]


HMDNetworkRouterClientIdentifierList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *clientIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientIdentifierList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientIdentifierList clientIdentifiers]
  -[HMDNetworkRouterClientIdentifierList parseFromData:error:]
  -[HMDNetworkRouterClientIdentifierList .cxx_destruct]
  -[HMDNetworkRouterClientIdentifierList copyWithZone:]
  -[HMDNetworkRouterClientIdentifierList isEqual:]
  -[HMDNetworkRouterClientIdentifierList init]
  -[HMDNetworkRouterClientIdentifierList setClientIdentifiers:]
  -[HMDNetworkRouterClientIdentifierList initWithClientIdentifiers:]
  -[HMDNetworkRouterClientIdentifierList serializeWithError:]


HMDNetworkRouterClientStatus : NSObject <NSCopying, HAPTLVProtocol>
 @property  HAPTLVUnsignedNumberValue *clientIdentifier
 @property  NSData *macAddress
 @property  HMDNetworkRouterIPAddressList *ipAddressList
 @property  HAPTLVUnsignedNumberValue *lanIdentifier
 @property  NSString *name
 @property  HAPTLVSignedNumberValue *rssi
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatus parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatus macAddress]
  -[HMDNetworkRouterClientStatus setClientIdentifier:]
  -[HMDNetworkRouterClientStatus setRssi:]
  -[HMDNetworkRouterClientStatus clientIdentifier]
  -[HMDNetworkRouterClientStatus rssi]
  -[HMDNetworkRouterClientStatus parseFromData:error:]
  -[HMDNetworkRouterClientStatus .cxx_destruct]
  -[HMDNetworkRouterClientStatus setMacAddress:]
  -[HMDNetworkRouterClientStatus setName:]
  -[HMDNetworkRouterClientStatus copyWithZone:]
  -[HMDNetworkRouterClientStatus name]
  -[HMDNetworkRouterClientStatus isEqual:]
  -[HMDNetworkRouterClientStatus init]
  -[HMDNetworkRouterClientStatus serializeWithError:]
  -[HMDNetworkRouterClientStatus lanIdentifier]
  -[HMDNetworkRouterClientStatus setLanIdentifier:]
  -[HMDNetworkRouterClientStatus initWithClientIdentifier:macAddress:ipAddressList:lanIdentifier:name:rssi:]
  -[HMDNetworkRouterClientStatus ipAddressList]
  -[HMDNetworkRouterClientStatus setIpAddressList:]


HMDNetworkRouterClientStatusControl : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterClientStatusControlOperation *operation
 @property  HMDNetworkRouterClientStatusIdentifierList *clientStatusIdentifierList
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatusControl parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatusControl operation]
  -[HMDNetworkRouterClientStatusControl setOperation:]
  -[HMDNetworkRouterClientStatusControl parseFromData:error:]
  -[HMDNetworkRouterClientStatusControl .cxx_destruct]
  -[HMDNetworkRouterClientStatusControl copyWithZone:]
  -[HMDNetworkRouterClientStatusControl isEqual:]
  -[HMDNetworkRouterClientStatusControl init]
  -[HMDNetworkRouterClientStatusControl serializeWithError:]
  -[HMDNetworkRouterClientStatusControl initWithOperation:clientStatusIdentifierList:]
  -[HMDNetworkRouterClientStatusControl clientStatusIdentifierList]
  -[HMDNetworkRouterClientStatusControl setClientStatusIdentifierList:]


HMDNetworkRouterClientStatusIdentifier : NSObject <NSCopying, HAPTLVProtocol>
 @property  HAPTLVUnsignedNumberValue *clientIdentifier
 @property  NSData *macAddress
 @property  HMDNetworkRouterIPAddress *ipAddress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatusIdentifier parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatusIdentifier macAddress]
  -[HMDNetworkRouterClientStatusIdentifier setClientIdentifier:]
  -[HMDNetworkRouterClientStatusIdentifier clientIdentifier]
  -[HMDNetworkRouterClientStatusIdentifier parseFromData:error:]
  -[HMDNetworkRouterClientStatusIdentifier .cxx_destruct]
  -[HMDNetworkRouterClientStatusIdentifier setMacAddress:]
  -[HMDNetworkRouterClientStatusIdentifier copyWithZone:]
  -[HMDNetworkRouterClientStatusIdentifier isEqual:]
  -[HMDNetworkRouterClientStatusIdentifier init]
  -[HMDNetworkRouterClientStatusIdentifier ipAddress]
  -[HMDNetworkRouterClientStatusIdentifier setIpAddress:]
  -[HMDNetworkRouterClientStatusIdentifier serializeWithError:]
  -[HMDNetworkRouterClientStatusIdentifier initWithClientIdentifier:macAddress:ipAddress:]


HMDNetworkRouterClientStatusIdentifierList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *clientStatusIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatusIdentifierList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatusIdentifierList parseFromData:error:]
  -[HMDNetworkRouterClientStatusIdentifierList .cxx_destruct]
  -[HMDNetworkRouterClientStatusIdentifierList copyWithZone:]
  -[HMDNetworkRouterClientStatusIdentifierList isEqual:]
  -[HMDNetworkRouterClientStatusIdentifierList init]
  -[HMDNetworkRouterClientStatusIdentifierList serializeWithError:]
  -[HMDNetworkRouterClientStatusIdentifierList initWithClientStatusIdentifiers:]
  -[HMDNetworkRouterClientStatusIdentifierList clientStatusIdentifiers]
  -[HMDNetworkRouterClientStatusIdentifierList setClientStatusIdentifiers:]


HMDNetworkRouterClientStatusList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *clientStatuses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientStatusList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterClientStatusList parseFromData:error:]
  -[HMDNetworkRouterClientStatusList .cxx_destruct]
  -[HMDNetworkRouterClientStatusList copyWithZone:]
  -[HMDNetworkRouterClientStatusList isEqual:]
  -[HMDNetworkRouterClientStatusList init]
  -[HMDNetworkRouterClientStatusList serializeWithError:]
  -[HMDNetworkRouterClientStatusList initWithClientStatuses:]
  -[HMDNetworkRouterClientStatusList clientStatuses]
  -[HMDNetworkRouterClientStatusList setClientStatuses:]


HMDNetworkRouterCredential : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSData *macAddress
 @property  NSData *psk
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterCredential parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterCredential macAddress]
  -[HMDNetworkRouterCredential parseFromData:error:]
  -[HMDNetworkRouterCredential .cxx_destruct]
  -[HMDNetworkRouterCredential setMacAddress:]
  -[HMDNetworkRouterCredential copyWithZone:]
  -[HMDNetworkRouterCredential isEqual:]
  -[HMDNetworkRouterCredential init]
  -[HMDNetworkRouterCredential psk]
  -[HMDNetworkRouterCredential setPsk:]
  -[HMDNetworkRouterCredential serializeWithError:]
  -[HMDNetworkRouterCredential initWithMacAddress:psk:]


HMDNetworkRouterDynamicPortRule : NSObject <HMDNetworkRouterLANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDNetworkRouterRuleDirection *direction
 @property  HMDNetworkRouterLANIdentifierList *lanIdentifierList
 @property  HMDNetworkRouterProtocol *protocol
 @property  HMDNetworkRouterAdvertisementProtocol *advertisementProtocol
 @property  HAPTLVUnsignedNumberValue *flags
 @property  HMDNetworkRouterServiceType *serviceType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterDynamicPortRule parsedFromData:error:]
  +[HMDNetworkRouterDynamicPortRule ruleForHAP]
  +[HMDNetworkRouterDynamicPortRule ruleFromFirewallRuleLAN:]

  // instance methods
  -[HMDNetworkRouterDynamicPortRule setDirection:]
  -[HMDNetworkRouterDynamicPortRule setServiceType:]
  -[HMDNetworkRouterDynamicPortRule parseFromData:error:]
  -[HMDNetworkRouterDynamicPortRule setProtocol:]
  -[HMDNetworkRouterDynamicPortRule setFlags:]
  -[HMDNetworkRouterDynamicPortRule .cxx_destruct]
  -[HMDNetworkRouterDynamicPortRule flags]
  -[HMDNetworkRouterDynamicPortRule direction]
  -[HMDNetworkRouterDynamicPortRule serviceType]
  -[HMDNetworkRouterDynamicPortRule copyWithZone:]
  -[HMDNetworkRouterDynamicPortRule protocol]
  -[HMDNetworkRouterDynamicPortRule isEqual:]
  -[HMDNetworkRouterDynamicPortRule init]
  -[HMDNetworkRouterDynamicPortRule serializeWithError:]
  -[HMDNetworkRouterDynamicPortRule addTo:]
  -[HMDNetworkRouterDynamicPortRule advertisementProtocol]
  -[HMDNetworkRouterDynamicPortRule setAdvertisementProtocol:]
  -[HMDNetworkRouterDynamicPortRule initWithDirection:lanIdentifierList:protocol:advertisementProtocol:flags:serviceType:]
  -[HMDNetworkRouterDynamicPortRule lanIdentifierList]
  -[HMDNetworkRouterDynamicPortRule setLanIdentifierList:]


HMDNetworkRouterICMPType : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterIPProtocolVersion *protocol
 @property  HAPTLVUnsignedNumberValue *typeValue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterICMPType parsedFromData:error:]
  +[HMDNetworkRouterICMPType typeFromICMPType:]

  // instance methods
  -[HMDNetworkRouterICMPType parseFromData:error:]
  -[HMDNetworkRouterICMPType setProtocol:]
  -[HMDNetworkRouterICMPType .cxx_destruct]
  -[HMDNetworkRouterICMPType copyWithZone:]
  -[HMDNetworkRouterICMPType protocol]
  -[HMDNetworkRouterICMPType isEqual:]
  -[HMDNetworkRouterICMPType init]
  -[HMDNetworkRouterICMPType typeValue]
  -[HMDNetworkRouterICMPType setTypeValue:]
  -[HMDNetworkRouterICMPType serializeWithError:]
  -[HMDNetworkRouterICMPType initWithProtocol:typeValue:]


HMDNetworkRouterICMPTypeList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *types
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterICMPTypeList parsedFromData:error:]
  +[HMDNetworkRouterICMPTypeList typeListFromICMPTypes:]

  // instance methods
  -[HMDNetworkRouterICMPTypeList types]
  -[HMDNetworkRouterICMPTypeList parseFromData:error:]
  -[HMDNetworkRouterICMPTypeList .cxx_destruct]
  -[HMDNetworkRouterICMPTypeList initWithTypes:]
  -[HMDNetworkRouterICMPTypeList copyWithZone:]
  -[HMDNetworkRouterICMPTypeList setTypes:]
  -[HMDNetworkRouterICMPTypeList isEqual:]
  -[HMDNetworkRouterICMPTypeList init]
  -[HMDNetworkRouterICMPTypeList serializeWithError:]


HMDNetworkRouterIPAddress : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSData *v4
 @property  NSData *v6
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterIPAddress parsedFromData:error:]
  +[HMDNetworkRouterIPAddress ipAddressFromNetAddress:error:]
  +[HMDNetworkRouterIPAddress ipAddressFromRuleAddress:allowWildcard:]

  // instance methods
  -[HMDNetworkRouterIPAddress parseFromData:error:]
  -[HMDNetworkRouterIPAddress .cxx_destruct]
  -[HMDNetworkRouterIPAddress v4]
  -[HMDNetworkRouterIPAddress copyWithZone:]
  -[HMDNetworkRouterIPAddress setV4:]
  -[HMDNetworkRouterIPAddress isEqual:]
  -[HMDNetworkRouterIPAddress init]
  -[HMDNetworkRouterIPAddress serializeWithError:]
  -[HMDNetworkRouterIPAddress initWithV4:v6:]
  -[HMDNetworkRouterIPAddress v6]
  -[HMDNetworkRouterIPAddress setV6:]


HMDNetworkRouterIPAddressList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *addresses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterIPAddressList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterIPAddressList parseFromData:error:]
  -[HMDNetworkRouterIPAddressList .cxx_destruct]
  -[HMDNetworkRouterIPAddressList copyWithZone:]
  -[HMDNetworkRouterIPAddressList isEqual:]
  -[HMDNetworkRouterIPAddressList init]
  -[HMDNetworkRouterIPAddressList addresses]
  -[HMDNetworkRouterIPAddressList setAddresses:]
  -[HMDNetworkRouterIPAddressList serializeWithError:]
  -[HMDNetworkRouterIPAddressList initWithAddresses:]


HMDNetworkRouterLANFirewallConfiguration : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterLANFirewall *type
 @property  HMDNetworkRouterLANFirewallRuleList *ruleList
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterLANFirewallConfiguration parsedFromData:error:]
  +[HMDNetworkRouterLANFirewallConfiguration configurationWithFullAccess]
  +[HMDNetworkRouterLANFirewallConfiguration configurationFromFirewallRuleConfiguration:]

  // instance methods
  -[HMDNetworkRouterLANFirewallConfiguration type]
  -[HMDNetworkRouterLANFirewallConfiguration parseFromData:error:]
  -[HMDNetworkRouterLANFirewallConfiguration .cxx_destruct]
  -[HMDNetworkRouterLANFirewallConfiguration setType:]
  -[HMDNetworkRouterLANFirewallConfiguration copyWithZone:]
  -[HMDNetworkRouterLANFirewallConfiguration isEqual:]
  -[HMDNetworkRouterLANFirewallConfiguration init]
  -[HMDNetworkRouterLANFirewallConfiguration serializeWithError:]
  -[HMDNetworkRouterLANFirewallConfiguration addRulesFromFirewallConfiguration:]
  -[HMDNetworkRouterLANFirewallConfiguration initWithType:ruleList:]
  -[HMDNetworkRouterLANFirewallConfiguration ruleList]
  -[HMDNetworkRouterLANFirewallConfiguration setRuleList:]


HMDNetworkRouterLANFirewallRuleList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *multicastBridgingRules
 @property  NSMutableArray *staticPortRules
 @property  NSMutableArray *dynamicPortRules
 @property  NSMutableArray *staticICMPRules
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterLANFirewallRuleList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterLANFirewallRuleList parseFromData:error:]
  -[HMDNetworkRouterLANFirewallRuleList .cxx_destruct]
  -[HMDNetworkRouterLANFirewallRuleList copyWithZone:]
  -[HMDNetworkRouterLANFirewallRuleList isEqual:]
  -[HMDNetworkRouterLANFirewallRuleList init]
  -[HMDNetworkRouterLANFirewallRuleList serializeWithError:]
  -[HMDNetworkRouterLANFirewallRuleList initWithMulticastBridgingRules:staticPortRules:dynamicPortRules:staticICMPRules:]
  -[HMDNetworkRouterLANFirewallRuleList multicastBridgingRules]
  -[HMDNetworkRouterLANFirewallRuleList setMulticastBridgingRules:]
  -[HMDNetworkRouterLANFirewallRuleList staticPortRules]
  -[HMDNetworkRouterLANFirewallRuleList setStaticPortRules:]
  -[HMDNetworkRouterLANFirewallRuleList dynamicPortRules]
  -[HMDNetworkRouterLANFirewallRuleList setDynamicPortRules:]
  -[HMDNetworkRouterLANFirewallRuleList staticICMPRules]
  -[HMDNetworkRouterLANFirewallRuleList setStaticICMPRules:]


HMDNetworkRouterLANIdentifierList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *identifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterLANIdentifierList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterLANIdentifierList identifiers]
  -[HMDNetworkRouterLANIdentifierList parseFromData:error:]
  -[HMDNetworkRouterLANIdentifierList .cxx_destruct]
  -[HMDNetworkRouterLANIdentifierList initWithIdentifiers:]
  -[HMDNetworkRouterLANIdentifierList copyWithZone:]
  -[HMDNetworkRouterLANIdentifierList setIdentifiers:]
  -[HMDNetworkRouterLANIdentifierList isEqual:]
  -[HMDNetworkRouterLANIdentifierList init]
  -[HMDNetworkRouterLANIdentifierList serializeWithError:]


HMDNetworkRouterMulticastBridgingRule : NSObject <HMDNetworkRouterLANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDNetworkRouterRuleDirection *direction
 @property  HMDNetworkRouterLANIdentifierList *lanIdentifierList
 @property  HMDNetworkRouterIPAddress *destinationIPAddress
 @property  HAPTLVUnsignedNumberValue *destinationPort
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterMulticastBridgingRule parsedFromData:error:]
  +[HMDNetworkRouterMulticastBridgingRule ruleFromFirewallRuleLAN:]

  // instance methods
  -[HMDNetworkRouterMulticastBridgingRule setDirection:]
  -[HMDNetworkRouterMulticastBridgingRule parseFromData:error:]
  -[HMDNetworkRouterMulticastBridgingRule .cxx_destruct]
  -[HMDNetworkRouterMulticastBridgingRule direction]
  -[HMDNetworkRouterMulticastBridgingRule copyWithZone:]
  -[HMDNetworkRouterMulticastBridgingRule isEqual:]
  -[HMDNetworkRouterMulticastBridgingRule init]
  -[HMDNetworkRouterMulticastBridgingRule serializeWithError:]
  -[HMDNetworkRouterMulticastBridgingRule addTo:]
  -[HMDNetworkRouterMulticastBridgingRule lanIdentifierList]
  -[HMDNetworkRouterMulticastBridgingRule setLanIdentifierList:]
  -[HMDNetworkRouterMulticastBridgingRule initWithDirection:lanIdentifierList:destinationIPAddress:destinationPort:]
  -[HMDNetworkRouterMulticastBridgingRule destinationIPAddress]
  -[HMDNetworkRouterMulticastBridgingRule setDestinationIPAddress:]
  -[HMDNetworkRouterMulticastBridgingRule destinationPort]
  -[HMDNetworkRouterMulticastBridgingRule setDestinationPort:]


HMDNetworkRouterServiceType : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterServiceType parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterServiceType parseFromData:error:]
  -[HMDNetworkRouterServiceType .cxx_destruct]
  -[HMDNetworkRouterServiceType setName:]
  -[HMDNetworkRouterServiceType copyWithZone:]
  -[HMDNetworkRouterServiceType initWithName:]
  -[HMDNetworkRouterServiceType name]
  -[HMDNetworkRouterServiceType isEqual:]
  -[HMDNetworkRouterServiceType init]
  -[HMDNetworkRouterServiceType serializeWithError:]


HMDNetworkRouterStaticICMPRule : NSObject <HMDNetworkRouterLANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDNetworkRouterRuleDirection *direction
 @property  HMDNetworkRouterLANIdentifierList *lanIdentifierList
 @property  HMDNetworkRouterIPAddress *destinationIPAddress
 @property  HMDNetworkRouterICMPTypeList *icmpTypeList
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterStaticICMPRule parsedFromData:error:]
  +[HMDNetworkRouterStaticICMPRule ruleFromFirewallRuleLAN:]

  // instance methods
  -[HMDNetworkRouterStaticICMPRule setDirection:]
  -[HMDNetworkRouterStaticICMPRule parseFromData:error:]
  -[HMDNetworkRouterStaticICMPRule .cxx_destruct]
  -[HMDNetworkRouterStaticICMPRule direction]
  -[HMDNetworkRouterStaticICMPRule copyWithZone:]
  -[HMDNetworkRouterStaticICMPRule isEqual:]
  -[HMDNetworkRouterStaticICMPRule init]
  -[HMDNetworkRouterStaticICMPRule serializeWithError:]
  -[HMDNetworkRouterStaticICMPRule addTo:]
  -[HMDNetworkRouterStaticICMPRule lanIdentifierList]
  -[HMDNetworkRouterStaticICMPRule setLanIdentifierList:]
  -[HMDNetworkRouterStaticICMPRule destinationIPAddress]
  -[HMDNetworkRouterStaticICMPRule setDestinationIPAddress:]
  -[HMDNetworkRouterStaticICMPRule initWithDirection:lanIdentifierList:destinationIPAddress:icmpTypeList:]
  -[HMDNetworkRouterStaticICMPRule icmpTypeList]
  -[HMDNetworkRouterStaticICMPRule setIcmpTypeList:]


HMDNetworkRouterStaticPortRule : NSObject <HMDNetworkRouterLANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDNetworkRouterRuleDirection *direction
 @property  HMDNetworkRouterLANIdentifierList *lanIdentifierList
 @property  HMDNetworkRouterProtocol *protocol
 @property  HMDNetworkRouterIPAddress *destinationIPAddress
 @property  HAPTLVUnsignedNumberValue *destinationPortStart
 @property  HAPTLVUnsignedNumberValue *destinationPortEnd
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterStaticPortRule parsedFromData:error:]
  +[HMDNetworkRouterStaticPortRule ruleFromFirewallRuleLAN:]

  // instance methods
  -[HMDNetworkRouterStaticPortRule setDirection:]
  -[HMDNetworkRouterStaticPortRule parseFromData:error:]
  -[HMDNetworkRouterStaticPortRule setProtocol:]
  -[HMDNetworkRouterStaticPortRule .cxx_destruct]
  -[HMDNetworkRouterStaticPortRule direction]
  -[HMDNetworkRouterStaticPortRule copyWithZone:]
  -[HMDNetworkRouterStaticPortRule protocol]
  -[HMDNetworkRouterStaticPortRule isEqual:]
  -[HMDNetworkRouterStaticPortRule init]
  -[HMDNetworkRouterStaticPortRule serializeWithError:]
  -[HMDNetworkRouterStaticPortRule addTo:]
  -[HMDNetworkRouterStaticPortRule lanIdentifierList]
  -[HMDNetworkRouterStaticPortRule setLanIdentifierList:]
  -[HMDNetworkRouterStaticPortRule destinationIPAddress]
  -[HMDNetworkRouterStaticPortRule setDestinationIPAddress:]
  -[HMDNetworkRouterStaticPortRule initWithDirection:lanIdentifierList:protocol:destinationIPAddress:destinationPortStart:destinationPortEnd:]
  -[HMDNetworkRouterStaticPortRule destinationPortStart]
  -[HMDNetworkRouterStaticPortRule setDestinationPortStart:]
  -[HMDNetworkRouterStaticPortRule destinationPortEnd]
  -[HMDNetworkRouterStaticPortRule setDestinationPortEnd:]


HMDNetworkRouterWANFirewallConfiguration : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDNetworkRouterWANFirewall *type
 @property  HMDNetworkRouterWANFirewallRuleList *ruleList
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANFirewallConfiguration parsedFromData:error:]
  +[HMDNetworkRouterWANFirewallConfiguration configurationWithFullAccess]
  +[HMDNetworkRouterWANFirewallConfiguration configurationFromFirewallRuleConfiguration:]

  // instance methods
  -[HMDNetworkRouterWANFirewallConfiguration type]
  -[HMDNetworkRouterWANFirewallConfiguration parseFromData:error:]
  -[HMDNetworkRouterWANFirewallConfiguration .cxx_destruct]
  -[HMDNetworkRouterWANFirewallConfiguration setType:]
  -[HMDNetworkRouterWANFirewallConfiguration copyWithZone:]
  -[HMDNetworkRouterWANFirewallConfiguration isEqual:]
  -[HMDNetworkRouterWANFirewallConfiguration init]
  -[HMDNetworkRouterWANFirewallConfiguration serializeWithError:]
  -[HMDNetworkRouterWANFirewallConfiguration initWithType:ruleList:]
  -[HMDNetworkRouterWANFirewallConfiguration ruleList]
  -[HMDNetworkRouterWANFirewallConfiguration setRuleList:]


HMDNetworkRouterWANFirewallRuleList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *portRules
 @property  NSMutableArray *icmpRules
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANFirewallRuleList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANFirewallRuleList parseFromData:error:]
  -[HMDNetworkRouterWANFirewallRuleList .cxx_destruct]
  -[HMDNetworkRouterWANFirewallRuleList copyWithZone:]
  -[HMDNetworkRouterWANFirewallRuleList isEqual:]
  -[HMDNetworkRouterWANFirewallRuleList init]
  -[HMDNetworkRouterWANFirewallRuleList serializeWithError:]
  -[HMDNetworkRouterWANFirewallRuleList initWithPortRules:icmpRules:]
  -[HMDNetworkRouterWANFirewallRuleList portRules]
  -[HMDNetworkRouterWANFirewallRuleList setPortRules:]
  -[HMDNetworkRouterWANFirewallRuleList icmpRules]
  -[HMDNetworkRouterWANFirewallRuleList setIcmpRules:]


HMDNetworkRouterWANICMPRule : NSObject <HMDNetworkRouterWANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *hostDNSName
 @property  HMDNetworkRouterIPAddress *hostIPStart
 @property  HMDNetworkRouterIPAddress *hostIPEnd
 @property  HMDNetworkRouterICMPTypeList *icmpTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANICMPRule parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANICMPRule parseFromData:error:]
  -[HMDNetworkRouterWANICMPRule .cxx_destruct]
  -[HMDNetworkRouterWANICMPRule copyWithZone:]
  -[HMDNetworkRouterWANICMPRule isEqual:]
  -[HMDNetworkRouterWANICMPRule init]
  -[HMDNetworkRouterWANICMPRule serializeWithError:]
  -[HMDNetworkRouterWANICMPRule addTo:]
  -[HMDNetworkRouterWANICMPRule initWithHostDNSName:hostIPStart:hostIPEnd:icmpTypes:]
  -[HMDNetworkRouterWANICMPRule hostDNSName]
  -[HMDNetworkRouterWANICMPRule setHostDNSName:]
  -[HMDNetworkRouterWANICMPRule hostIPStart]
  -[HMDNetworkRouterWANICMPRule setHostIPStart:]
  -[HMDNetworkRouterWANICMPRule hostIPEnd]
  -[HMDNetworkRouterWANICMPRule setHostIPEnd:]
  -[HMDNetworkRouterWANICMPRule icmpTypes]
  -[HMDNetworkRouterWANICMPRule setIcmpTypes:]


HMDNetworkRouterWANPortRule : NSObject <HMDNetworkRouterWANRule, NSCopying, HAPTLVProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDNetworkRouterProtocol *protocol
 @property  NSString *hostDNSName
 @property  HMDNetworkRouterIPAddress *hostIPStart
 @property  HMDNetworkRouterIPAddress *hostIPEnd
 @property  HAPTLVUnsignedNumberValue *hostPortStart
 @property  HAPTLVUnsignedNumberValue *hostPortEnd
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANPortRule parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANPortRule parseFromData:error:]
  -[HMDNetworkRouterWANPortRule setProtocol:]
  -[HMDNetworkRouterWANPortRule .cxx_destruct]
  -[HMDNetworkRouterWANPortRule copyWithZone:]
  -[HMDNetworkRouterWANPortRule protocol]
  -[HMDNetworkRouterWANPortRule isEqual:]
  -[HMDNetworkRouterWANPortRule init]
  -[HMDNetworkRouterWANPortRule serializeWithError:]
  -[HMDNetworkRouterWANPortRule addTo:]
  -[HMDNetworkRouterWANPortRule hostDNSName]
  -[HMDNetworkRouterWANPortRule setHostDNSName:]
  -[HMDNetworkRouterWANPortRule hostIPStart]
  -[HMDNetworkRouterWANPortRule setHostIPStart:]
  -[HMDNetworkRouterWANPortRule hostIPEnd]
  -[HMDNetworkRouterWANPortRule setHostIPEnd:]
  -[HMDNetworkRouterWANPortRule initWithProtocol:hostDNSName:hostIPStart:hostIPEnd:hostPortStart:hostPortEnd:]
  -[HMDNetworkRouterWANPortRule hostPortStart]
  -[HMDNetworkRouterWANPortRule setHostPortStart:]
  -[HMDNetworkRouterWANPortRule hostPortEnd]
  -[HMDNetworkRouterWANPortRule setHostPortEnd:]


HMDNetworkRouterWANStatus : NSObject <NSCopying, HAPTLVProtocol>
 @property  HAPTLVUnsignedNumberValue *identifier
 @property  HAPTLVUnsignedNumberValue *status
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANStatus parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANStatus identifier]
  -[HMDNetworkRouterWANStatus status]
  -[HMDNetworkRouterWANStatus parseFromData:error:]
  -[HMDNetworkRouterWANStatus setStatus:]
  -[HMDNetworkRouterWANStatus .cxx_destruct]
  -[HMDNetworkRouterWANStatus setIdentifier:]
  -[HMDNetworkRouterWANStatus copyWithZone:]
  -[HMDNetworkRouterWANStatus isEqual:]
  -[HMDNetworkRouterWANStatus init]
  -[HMDNetworkRouterWANStatus serializeWithError:]
  -[HMDNetworkRouterWANStatus initWithIdentifier:status:]


HMDNetworkRouterWANStatusList : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSMutableArray *statuses
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterWANStatusList parsedFromData:error:]

  // instance methods
  -[HMDNetworkRouterWANStatusList parseFromData:error:]
  -[HMDNetworkRouterWANStatusList .cxx_destruct]
  -[HMDNetworkRouterWANStatusList copyWithZone:]
  -[HMDNetworkRouterWANStatusList isEqual:]
  -[HMDNetworkRouterWANStatusList init]
  -[HMDNetworkRouterWANStatusList statuses]
  -[HMDNetworkRouterWANStatusList setStatuses:]
  -[HMDNetworkRouterWANStatusList serializeWithError:]
  -[HMDNetworkRouterWANStatusList initWithStatuses:]


HMDAccessoryMetricVendorDetails : HMFObject
 @property  NSString *productData
 @property  NSString *manufacturer
 @property  NSString *model
 @property  NSString *firmwareVersion
 @property  NSString *category
 @property  NSNumber *differentiationNumber

  // class methods
  +[HMDAccessoryMetricVendorDetails maximumDifferentiationNumber]

  // instance methods
  -[HMDAccessoryMetricVendorDetails setCategory:]
  -[HMDAccessoryMetricVendorDetails setModel:]
  -[HMDAccessoryMetricVendorDetails firmwareVersion]
  -[HMDAccessoryMetricVendorDetails model]
  -[HMDAccessoryMetricVendorDetails category]
  -[HMDAccessoryMetricVendorDetails .cxx_destruct]
  -[HMDAccessoryMetricVendorDetails setManufacturer:]
  -[HMDAccessoryMetricVendorDetails manufacturer]
  -[HMDAccessoryMetricVendorDetails setFirmwareVersion:]
  -[HMDAccessoryMetricVendorDetails initWithAccessory:]
  -[HMDAccessoryMetricVendorDetails productData]
  -[HMDAccessoryMetricVendorDetails setProductData:]
  -[HMDAccessoryMetricVendorDetails differentiationNumber]
  -[HMDAccessoryMetricVendorDetails setDifferentiationNumber:]


AWDHomeKitCameraStreamIDSConnSetup : PBCodable <NSCopying>
 @property  BOOL hasVideoConnection
 @property  AWDHomeKitCameraStreamIDSConnSetupParameters *videoConnection
 @property  BOOL hasAudioConnection
 @property  AWDHomeKitCameraStreamIDSConnSetupParameters *audioConnection
 @property  BOOL hasKeepaliveConnection
 @property  AWDHomeKitCameraStreamIDSConnSetupParameters *keepaliveConnection

  // instance methods
  -[AWDHomeKitCameraStreamIDSConnSetup copyTo:]
  -[AWDHomeKitCameraStreamIDSConnSetup .cxx_destruct]
  -[AWDHomeKitCameraStreamIDSConnSetup mergeFrom:]
  -[AWDHomeKitCameraStreamIDSConnSetup dictionaryRepresentation]
  -[AWDHomeKitCameraStreamIDSConnSetup copyWithZone:]
  -[AWDHomeKitCameraStreamIDSConnSetup readFrom:]
  -[AWDHomeKitCameraStreamIDSConnSetup writeTo:]
  -[AWDHomeKitCameraStreamIDSConnSetup isEqual:]
  -[AWDHomeKitCameraStreamIDSConnSetup audioConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup videoConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup setVideoConnection:]
  -[AWDHomeKitCameraStreamIDSConnSetup hasVideoConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup hasAudioConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup hasKeepaliveConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup setAudioConnection:]
  -[AWDHomeKitCameraStreamIDSConnSetup keepaliveConnection]
  -[AWDHomeKitCameraStreamIDSConnSetup setKeepaliveConnection:]


HMDKeyTransferAgentClient : HMDKeyTransferAgent <HMFNetServiceDelegate, HMFTimerDelegate, HMFNetMonitorDelegate, HMFNetServiceBrowserDelegate>
 @property  HMFNetServiceBrowser *serviceBrowser
 @property  NSMutableDictionary *idsKeys
 @property  NSMutableDictionary *bonjourKeys
 @property  NSMutableSet *targetsToProcess
 @property  BOOL resolutionInProgress
 @property  NSString *pairingWithUUID
 @property  HMFExponentialBackoffTimer *atHomeRetryTimer
 @property  unsigned long residentProvisioningStatus
 @property  HMFNetMonitor *netMonitor
 @property  BOOL haveCulledPlist
 @property  long long tfaState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDKeyTransferAgentClient logCategory]

  // instance methods
  -[HMDKeyTransferAgentClient initWithHomeManager:]
  -[HMDKeyTransferAgentClient _startBrowser]
  -[HMDKeyTransferAgentClient timerDidFire:]
  -[HMDKeyTransferAgentClient _stopBrowser]
  -[HMDKeyTransferAgentClient dealloc]
  -[HMDKeyTransferAgentClient .cxx_destruct]
  -[HMDKeyTransferAgentClient _handleResidentProvisioningStatusChanged:]
  -[HMDKeyTransferAgentClient residentProvisioningStatus]
  -[HMDKeyTransferAgentClient setResidentProvisioningStatus:]
  -[HMDKeyTransferAgentClient networkMonitorIsReachable:]
  -[HMDKeyTransferAgentClient netServiceBrowser:didStopBrowsingWithError:]
  -[HMDKeyTransferAgentClient netServiceBrowser:didAddService:]
  -[HMDKeyTransferAgentClient netService:didUpdateTXTRecord:]
  -[HMDKeyTransferAgentClient _handleKeyTransferAgentMessage:]
  -[HMDKeyTransferAgentClient __accessoryIsReachable:]
  -[HMDKeyTransferAgentClient __deviceAddedToAccount:]
  -[HMDKeyTransferAgentClient __deviceUpdated:]
  -[HMDKeyTransferAgentClient __deviceRemovedFromAccount:]
  -[HMDKeyTransferAgentClient __accountChanged:]
  -[HMDKeyTransferAgentClient _saveKeyPlist]
  -[HMDKeyTransferAgentClient _deviceWithUUID:]
  -[HMDKeyTransferAgentClient queryPlistDevices]
  -[HMDKeyTransferAgentClient resetConfig]
  -[HMDKeyTransferAgentClient _reallyBeginBonjourResolution]
  -[HMDKeyTransferAgentClient _beginBonjourResolution:]
  -[HMDKeyTransferAgentClient _endPairingWithError:suspendingTimer:]
  -[HMDKeyTransferAgentClient _startPairingWithKeyUUID:forTarget:]
  -[HMDKeyTransferAgentClient _tfaVerificationCompleteForKeyUUID:forTarget:]
  -[HMDKeyTransferAgentClient _tryPairingWithAccessories:completionHandler:]
  -[HMDKeyTransferAgentClient _haveVerifiedTwoFactorAuthenticationWithKeyUUID:forTarget:]
  -[HMDKeyTransferAgentClient _havePairVerifiedAccessoryWithKeyUUID:forDevice:]
  -[HMDKeyTransferAgentClient _sendIOSPublicKey:withDevice:]
  -[HMDKeyTransferAgentClient _sendATVPrivateKey:withDevice:retry:]
  -[HMDKeyTransferAgentClient _newDeviceSeen:]
  -[HMDKeyTransferAgentClient _device:addedToAccount:]
  -[HMDKeyTransferAgentClient _device:removedFromAccount:]
  -[HMDKeyTransferAgentClient _restartKeyTransfer:]
  -[HMDKeyTransferAgentClient receivedBonjourTXTFrom:withUUIDData:]
  -[HMDKeyTransferAgentClient serviceBrowser]
  -[HMDKeyTransferAgentClient setServiceBrowser:]
  -[HMDKeyTransferAgentClient idsKeys]
  -[HMDKeyTransferAgentClient setIdsKeys:]
  -[HMDKeyTransferAgentClient bonjourKeys]
  -[HMDKeyTransferAgentClient setBonjourKeys:]
  -[HMDKeyTransferAgentClient targetsToProcess]
  -[HMDKeyTransferAgentClient setTargetsToProcess:]
  -[HMDKeyTransferAgentClient resolutionInProgress]
  -[HMDKeyTransferAgentClient setResolutionInProgress:]
  -[HMDKeyTransferAgentClient pairingWithUUID]
  -[HMDKeyTransferAgentClient setPairingWithUUID:]
  -[HMDKeyTransferAgentClient atHomeRetryTimer]
  -[HMDKeyTransferAgentClient setAtHomeRetryTimer:]
  -[HMDKeyTransferAgentClient netMonitor]
  -[HMDKeyTransferAgentClient setNetMonitor:]
  -[HMDKeyTransferAgentClient haveCulledPlist]
  -[HMDKeyTransferAgentClient setHaveCulledPlist:]
  -[HMDKeyTransferAgentClient tfaState]
  -[HMDKeyTransferAgentClient setTfaState:]


HMDHomeConfigurationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSUUID *homeUUID
 @property  unsigned long homeIndex
 @property  BOOL ownerUser
 @property  BOOL adminUser
 @property  int networkProtectionStatus
 @property  BOOL isResidentAvailable
 @property  BOOL isAutomaticThirdPartyAccessorySoftwareUpdateEnabled
 @property  BOOL primaryReportingDevice
 @property  BOOL isCurrentDeviceResidentCapable
 @property  BOOL isCurrentDeviceResidentEnabled
 @property  BOOL isCurrentDevicePrimaryResident
 @property  BOOL isCurrentDeviceLocalToHome
 @property  BOOL isResidentFirstEnabled
 @property  BOOL isResidentElectionV2Enabled
 @property  BOOL networkProtectionEnabled
 @property  unsigned long homeCategoryBitMask
 @property  unsigned long appleMediaCategoryBitMask
 @property  unsigned long thirdPartyMediaCategoryBitMask
 @property  unsigned long numAccessories
 @property  unsigned long numCertifiedAccessories
 @property  unsigned long numBridgedAccessories
 @property  unsigned long numNotCertifiedAccessories
 @property  unsigned long numSmartHomeAccessories
 @property  unsigned long numThirdPartyMediaAccessories
 @property  unsigned long numAppleMediaAccessories
 @property  unsigned long numHAPAccessories
 @property  unsigned long numCHIPAccessories
 @property  unsigned long numIPAccessories
 @property  unsigned long numBTAccessories
 @property  unsigned long numBTOnlyAccessories
 @property  unsigned long numThreadAccessories
 @property  unsigned long numHAPIPAccessories
 @property  unsigned long numHAPBTAccessories
 @property  unsigned long numHAPBatteryServiceAccessories
 @property  unsigned long numAppleAudioAccessories
 @property  unsigned long numAppleTVAccessories
 @property  unsigned long numAppleTV4K2ndGenAccessories
 @property  unsigned long numTelevisionServiceAccessories
 @property  unsigned long numTelevisionAccessories
 @property  unsigned long numTelevisionSetTopBoxAccessories
 @property  unsigned long numTelevisionStreamingStickAccessories
 @property  unsigned long numThirdPartyAudioAccessories
 @property  unsigned long numHAPSpeakerServiceAccessories
 @property  unsigned long numPrimaryHAPSpeakerServiceAccessories
 @property  unsigned long numWholeHouseAudioAccessories
 @property  unsigned long numCapableSiriEndpointAccessories
 @property  unsigned long numEnabledSiriEndpointAccessories
 @property  unsigned long numAccessoriesWiFiPPSKCredential
 @property  unsigned long numAccessoriesNetworkProtectionUnprotected
 @property  unsigned long numAccessoriesNetworkProtectionAutoFullAccess
 @property  unsigned long numAccessoriesNetworkProtectionAutoProtectedMainLAN
 @property  unsigned long numAccessoriesNetworkProtectionAutoProtectedHomeKitLAN
 @property  unsigned long numAccessoriesNetworkProtectionFullAccess
 @property  unsigned long numAccessoriesNetworkProtectionHomeKitOnly
 @property  unsigned long numCameraAccessories
 @property  unsigned long numCameraAccessoriesSupportRecording
 @property  unsigned long numCameraAccessoriesRecordingEnabled
 @property  unsigned long numCameraAccessoriesReachabilityNotificationEnabled
 @property  unsigned long numCameraAccessoriesWithActivityZonesEnabled
 @property  unsigned long numLightProfilesWithNaturalLightingSupported
 @property  unsigned long numLightProfilesWithNaturalLightingEnabled
 @property  unsigned long numLightProfilesWithNaturalLightingUsed
 @property  unsigned long numResidentsEnabled
 @property  unsigned long enabledResidentsDeviceCapabilities
 @property  unsigned long numServices
 @property  unsigned long numTriggers
 @property  unsigned long numActiveTriggers
 @property  unsigned long numEventTriggers
 @property  unsigned long numTimerTriggers
 @property  unsigned long numShortcuts
 @property  unsigned long numTargetControllers
 @property  unsigned long numCertifiedTargetControllers
 @property  unsigned long numBridgedTargetControllers
 @property  unsigned long numCertifiedBridgedTargetControllers
 @property  unsigned long numAdmins
 @property  unsigned long numUsers
 @property  unsigned long numConfiguredScenes
 @property  unsigned long numTriggerOwnedConfiguredScenes
 @property  unsigned long numScenes
 @property  unsigned long numRooms
 @property  unsigned long numZones
 @property  unsigned long numAccessoryServiceGroups
 @property  long long homeCreationCohortWeek
 @property  long long firstHAPAccessoryAddedCohortWeek
 @property  long long numHomeWidgetsEnabled
 @property  unsigned long numThreadAccessoryMinCapable
 @property  unsigned long numThreadAccessorySleepCapable
 @property  unsigned long numThreadAccessoryFullCapable
 @property  unsigned long numThreadAccessoryRouterCapable
 @property  unsigned long numThreadAccessoryBorderRouterCapable
 @property  unsigned long numThreadBorderRouters
 @property  BOOL autoThirdPartyJetEnable
 @property  unsigned long numHAPIPAccessoriesSupportJet
 @property  unsigned long numHAPBLEAccessoriesSupportJet
 @property  unsigned long numHAPThreadAccessoriesSupportJet
 @property  NSArray *multiUserSettings
 @property  NSArray *eventTriggers
 @property  NSArray *hapServices
 @property  long long currentMediaAccessoryFallbackMediaUserType
 @property  unsigned long numHomePods
 @property  unsigned long numHomePodMinis
 @property  unsigned long numMediaSystems
 @property  unsigned long numHomePodStereoPairs
 @property  unsigned long numHomePodMiniStereoPairs
 @property  NSNumber *numBSPs
 @property  unsigned long numWoLAccessories
 @property  unsigned int databaseSize
 @property  unsigned int metadataVersion
 @property  unsigned long numAccessoriesWithWalletKeySupported
 @property  BOOL hasHomeKeyInWallet
 @property  NSDictionary *histogrammedHomeDataCommonDimensionsFormattedForCoreAnalytics
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDHomeConfigurationLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDHomeConfigurationLogEvent isAdminUser]
  -[HMDHomeConfigurationLogEvent eventName]
  -[HMDHomeConfigurationLogEvent numAccessories]
  -[HMDHomeConfigurationLogEvent .cxx_destruct]
  -[HMDHomeConfigurationLogEvent homeUUID]
  -[HMDHomeConfigurationLogEvent hapServices]
  -[HMDHomeConfigurationLogEvent metadataVersion]
  -[HMDHomeConfigurationLogEvent databaseSize]
  -[HMDHomeConfigurationLogEvent initWithHome:]
  -[HMDHomeConfigurationLogEvent setHomeUUID:]
  -[HMDHomeConfigurationLogEvent isOwnerUser]
  -[HMDHomeConfigurationLogEvent isAutomaticThirdPartyAccessorySoftwareUpdateEnabled]
  -[HMDHomeConfigurationLogEvent setMetadataVersion:]
  -[HMDHomeConfigurationLogEvent initForUnitTesting]
  -[HMDHomeConfigurationLogEvent serializedEvent]
  -[HMDHomeConfigurationLogEvent isSubmitted]
  -[HMDHomeConfigurationLogEvent isCurrentDevicePrimaryResident]
  -[HMDHomeConfigurationLogEvent isCurrentDeviceResidentCapable]
  -[HMDHomeConfigurationLogEvent logEventWithAppendedCommonDimensions]
  -[HMDHomeConfigurationLogEvent numHAPAccessories]
  -[HMDHomeConfigurationLogEvent numCameraAccessories]
  -[HMDHomeConfigurationLogEvent numCameraAccessoriesRecordingEnabled]
  -[HMDHomeConfigurationLogEvent numUsers]
  -[HMDHomeConfigurationLogEvent isResidentAvailable]
  -[HMDHomeConfigurationLogEvent createHistogrammedAggregateHomeDataCommonDimensionsFormattedForCoreAnalytics]
  -[HMDHomeConfigurationLogEvent hasHomeKeyInWallet]
  -[HMDHomeConfigurationLogEvent setDatabaseSize:]
  -[HMDHomeConfigurationLogEvent enabledResidentsDeviceCapabilities]
  -[HMDHomeConfigurationLogEvent setHomeConfigurationBitMasks]
  -[HMDHomeConfigurationLogEvent daysSinceDate:trimAtMaximumValue:]
  -[HMDHomeConfigurationLogEvent weeksSinceDate:trimAtMaximumValue:]
  -[HMDHomeConfigurationLogEvent initWithDataSource:home:]
  -[HMDHomeConfigurationLogEvent updateConfigWithAccessory:reportNetworkProtectionMetrics:networkProtectionEnabled:hapServiceTypes:primaryHAPServiceTypes:]
  -[HMDHomeConfigurationLogEvent numTelevisionServiceAccessories]
  -[HMDHomeConfigurationLogEvent numThirdPartyAudioAccessories]
  -[HMDHomeConfigurationLogEvent initWithIsOwnerUser:isResidentAvailable:isAutomaticThirdPartyAccessorySoftwareUpdateEnabled:isPrimaryReportingDevice:isCurrentDeviceResidentEnabled:isPrimaryResident:isCurrentDeviceLocalToHome:isNetworkProtectionEnabled:isAutoThirdPartyJetEnable:isUserRoeProvisioned:isResidentFirstEnabled:isResidentElectionV2Enabled:]
  -[HMDHomeConfigurationLogEvent homeIndex]
  -[HMDHomeConfigurationLogEvent setHomeIndex:]
  -[HMDHomeConfigurationLogEvent networkProtectionStatus]
  -[HMDHomeConfigurationLogEvent primaryReportingDevice]
  -[HMDHomeConfigurationLogEvent isCurrentDeviceResidentEnabled]
  -[HMDHomeConfigurationLogEvent isCurrentDeviceLocalToHome]
  -[HMDHomeConfigurationLogEvent isResidentFirstEnabled]
  -[HMDHomeConfigurationLogEvent isResidentElectionV2Enabled]
  -[HMDHomeConfigurationLogEvent networkProtectionEnabled]
  -[HMDHomeConfigurationLogEvent homeCategoryBitMask]
  -[HMDHomeConfigurationLogEvent appleMediaCategoryBitMask]
  -[HMDHomeConfigurationLogEvent thirdPartyMediaCategoryBitMask]
  -[HMDHomeConfigurationLogEvent numCertifiedAccessories]
  -[HMDHomeConfigurationLogEvent numBridgedAccessories]
  -[HMDHomeConfigurationLogEvent numNotCertifiedAccessories]
  -[HMDHomeConfigurationLogEvent numSmartHomeAccessories]
  -[HMDHomeConfigurationLogEvent numThirdPartyMediaAccessories]
  -[HMDHomeConfigurationLogEvent numAppleMediaAccessories]
  -[HMDHomeConfigurationLogEvent numCHIPAccessories]
  -[HMDHomeConfigurationLogEvent numIPAccessories]
  -[HMDHomeConfigurationLogEvent numBTAccessories]
  -[HMDHomeConfigurationLogEvent numBTOnlyAccessories]
  -[HMDHomeConfigurationLogEvent numThreadAccessories]
  -[HMDHomeConfigurationLogEvent numHAPIPAccessories]
  -[HMDHomeConfigurationLogEvent numHAPBTAccessories]
  -[HMDHomeConfigurationLogEvent numHAPBatteryServiceAccessories]
  -[HMDHomeConfigurationLogEvent numAppleAudioAccessories]
  -[HMDHomeConfigurationLogEvent numAppleTVAccessories]
  -[HMDHomeConfigurationLogEvent numAppleTV4K2ndGenAccessories]
  -[HMDHomeConfigurationLogEvent numTelevisionAccessories]
  -[HMDHomeConfigurationLogEvent numTelevisionSetTopBoxAccessories]
  -[HMDHomeConfigurationLogEvent numTelevisionStreamingStickAccessories]
  -[HMDHomeConfigurationLogEvent numHAPSpeakerServiceAccessories]
  -[HMDHomeConfigurationLogEvent numPrimaryHAPSpeakerServiceAccessories]
  -[HMDHomeConfigurationLogEvent numWholeHouseAudioAccessories]
  -[HMDHomeConfigurationLogEvent numCapableSiriEndpointAccessories]
  -[HMDHomeConfigurationLogEvent numEnabledSiriEndpointAccessories]
  -[HMDHomeConfigurationLogEvent numAccessoriesWiFiPPSKCredential]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionUnprotected]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionAutoFullAccess]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionAutoProtectedMainLAN]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionAutoProtectedHomeKitLAN]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionFullAccess]
  -[HMDHomeConfigurationLogEvent numAccessoriesNetworkProtectionHomeKitOnly]
  -[HMDHomeConfigurationLogEvent numCameraAccessoriesSupportRecording]
  -[HMDHomeConfigurationLogEvent numCameraAccessoriesReachabilityNotificationEnabled]
  -[HMDHomeConfigurationLogEvent numCameraAccessoriesWithActivityZonesEnabled]
  -[HMDHomeConfigurationLogEvent numLightProfilesWithNaturalLightingSupported]
  -[HMDHomeConfigurationLogEvent numLightProfilesWithNaturalLightingEnabled]
  -[HMDHomeConfigurationLogEvent numLightProfilesWithNaturalLightingUsed]
  -[HMDHomeConfigurationLogEvent numResidentsEnabled]
  -[HMDHomeConfigurationLogEvent numServices]
  -[HMDHomeConfigurationLogEvent numTriggers]
  -[HMDHomeConfigurationLogEvent numActiveTriggers]
  -[HMDHomeConfigurationLogEvent numEventTriggers]
  -[HMDHomeConfigurationLogEvent numTimerTriggers]
  -[HMDHomeConfigurationLogEvent numShortcuts]
  -[HMDHomeConfigurationLogEvent numTargetControllers]
  -[HMDHomeConfigurationLogEvent numCertifiedTargetControllers]
  -[HMDHomeConfigurationLogEvent numBridgedTargetControllers]
  -[HMDHomeConfigurationLogEvent numCertifiedBridgedTargetControllers]
  -[HMDHomeConfigurationLogEvent numAdmins]
  -[HMDHomeConfigurationLogEvent numConfiguredScenes]
  -[HMDHomeConfigurationLogEvent numTriggerOwnedConfiguredScenes]
  -[HMDHomeConfigurationLogEvent numScenes]
  -[HMDHomeConfigurationLogEvent numRooms]
  -[HMDHomeConfigurationLogEvent numZones]
  -[HMDHomeConfigurationLogEvent numAccessoryServiceGroups]
  -[HMDHomeConfigurationLogEvent homeCreationCohortWeek]
  -[HMDHomeConfigurationLogEvent firstHAPAccessoryAddedCohortWeek]
  -[HMDHomeConfigurationLogEvent numHomeWidgetsEnabled]
  -[HMDHomeConfigurationLogEvent setNumHomeWidgetsEnabled:]
  -[HMDHomeConfigurationLogEvent numThreadAccessoryMinCapable]
  -[HMDHomeConfigurationLogEvent numThreadAccessorySleepCapable]
  -[HMDHomeConfigurationLogEvent numThreadAccessoryFullCapable]
  -[HMDHomeConfigurationLogEvent numThreadAccessoryRouterCapable]
  -[HMDHomeConfigurationLogEvent numThreadAccessoryBorderRouterCapable]
  -[HMDHomeConfigurationLogEvent numThreadBorderRouters]
  -[HMDHomeConfigurationLogEvent autoThirdPartyJetEnable]
  -[HMDHomeConfigurationLogEvent numHAPIPAccessoriesSupportJet]
  -[HMDHomeConfigurationLogEvent numHAPBLEAccessoriesSupportJet]
  -[HMDHomeConfigurationLogEvent numHAPThreadAccessoriesSupportJet]
  -[HMDHomeConfigurationLogEvent multiUserSettings]
  -[HMDHomeConfigurationLogEvent setMultiUserSettings:]
  -[HMDHomeConfigurationLogEvent eventTriggers]
  -[HMDHomeConfigurationLogEvent setEventTriggers:]
  -[HMDHomeConfigurationLogEvent currentMediaAccessoryFallbackMediaUserType]
  -[HMDHomeConfigurationLogEvent numHomePods]
  -[HMDHomeConfigurationLogEvent numHomePodMinis]
  -[HMDHomeConfigurationLogEvent numMediaSystems]
  -[HMDHomeConfigurationLogEvent numHomePodStereoPairs]
  -[HMDHomeConfigurationLogEvent numHomePodMiniStereoPairs]
  -[HMDHomeConfigurationLogEvent numBSPs]
  -[HMDHomeConfigurationLogEvent numWoLAccessories]
  -[HMDHomeConfigurationLogEvent numAccessoriesWithWalletKeySupported]
  -[HMDHomeConfigurationLogEvent histogrammedHomeDataCommonDimensionsFormattedForCoreAnalytics]


HMDAnalyticsMultiUserSettingsValueByKeyPath : HMFObject
 @property  long long multiUserSettingsValueInteger
 @property  NSData *multiUserSettingsValueData
 @property  NSString *multiUserSettingsValueString
 @property  int type

  // instance methods
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath type]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath .cxx_destruct]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath setType:]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath multiUserSettingsValueInteger]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath setMultiUserSettingsValueInteger:]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath multiUserSettingsValueData]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath setMultiUserSettingsValueData:]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath multiUserSettingsValueString]
  -[HMDAnalyticsMultiUserSettingsValueByKeyPath setMultiUserSettingsValueString:]


HMDAnalyticsMultiUserSettings : HMFObject
 @property  NSArray *multiUserSettingsValuesByKeyPaths
 @property  BOOL isOwner

  // instance methods
  -[HMDAnalyticsMultiUserSettings .cxx_destruct]
  -[HMDAnalyticsMultiUserSettings isOwner]
  -[HMDAnalyticsMultiUserSettings setIsOwner:]
  -[HMDAnalyticsMultiUserSettings multiUserSettingsValuesByKeyPaths]
  -[HMDAnalyticsMultiUserSettings setMultiUserSettingsValuesByKeyPaths:]


HMDAnalyticsHAPServiceData : HMFObject
 @property  NSString *serviceType
 @property  BOOL isPrimary
 @property  BOOL ownerUser

  // instance methods
  -[HMDAnalyticsHAPServiceData isPrimary]
  -[HMDAnalyticsHAPServiceData .cxx_destruct]
  -[HMDAnalyticsHAPServiceData serviceType]
  -[HMDAnalyticsHAPServiceData ownerUser]
  -[HMDAnalyticsHAPServiceData initWithServiceType:isPrimary:ownerUser:]


HMDHH2AutoMigrationEligibilityChecker : HMFObject <HMFLogging>
 @property  @? isHSA2EnabledDeterminationHandler
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHH2AutoMigrationEligibilityChecker logCategory]

  // instance methods
  -[HMDHH2AutoMigrationEligibilityChecker initWithHomeManager:]
  -[HMDHH2AutoMigrationEligibilityChecker .cxx_destruct]
  -[HMDHH2AutoMigrationEligibilityChecker homeManager]
  -[HMDHH2AutoMigrationEligibilityChecker setHomeManager:]
  -[HMDHH2AutoMigrationEligibilityChecker initWithHomeManager:accountManager:featuresDataSource:]
  -[HMDHH2AutoMigrationEligibilityChecker fetchIsCurrentUserEligibleForAutoMigrationWithCompletion:]
  -[HMDHH2AutoMigrationEligibilityChecker fetchIsCurrentUserEligibleForAutoMigrationByHomeOwnerWithCompletion:]
  -[HMDHH2AutoMigrationEligibilityChecker isHSA2EnabledDeterminationHandler]
  -[HMDHH2AutoMigrationEligibilityChecker setIsHSA2EnabledDeterminationHandler:]


HMDSignificantTimeEvent : HMDTimeEvent <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSString *significantEvent
 @property  NSDateComponents *offset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDSignificantTimeEvent supportsSecureCoding]
  +[HMDSignificantTimeEvent logCategory]
  +[HMDSignificantTimeEvent nextTimerDateFromHomeLocation:signifiantEvent:offset:loggingObject:]

  // instance methods
  -[HMDSignificantTimeEvent encodeWithCoder:]
  -[HMDSignificantTimeEvent .cxx_destruct]
  -[HMDSignificantTimeEvent setSignificantEvent:]
  -[HMDSignificantTimeEvent offset]
  -[HMDSignificantTimeEvent setOffset:]
  -[HMDSignificantTimeEvent initWithCoder:]
  -[HMDSignificantTimeEvent significantEvent]
  -[HMDSignificantTimeEvent createPayload]
  -[HMDSignificantTimeEvent initWithModel:home:]
  -[HMDSignificantTimeEvent _transactionObjectUpdated:newValues:message:]
  -[HMDSignificantTimeEvent _transactionObjectRemoved:message:]
  -[HMDSignificantTimeEvent modelObjectWithChangeType:]
  -[HMDSignificantTimeEvent emptyModelObject]
  -[HMDSignificantTimeEvent _handleUpdateRequest:]
  -[HMDSignificantTimeEvent _nextTimerDate]
  -[HMDSignificantTimeEvent analyticsTriggerEventData]


HMDSignificantTimeEventModel : HMDEventModel
 @property  NSString *significantEvent
 @property  NSData *offset

  // class methods
  +[HMDSignificantTimeEventModel properties]
  +[HMDSignificantTimeEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]


HMDCharacteristicMetadata : HMFObject <NSSecureCoding, NSCopying, HMFDumpState>
 @property  NSNumber *minimumValue
 @property  NSNumber *maximumValue
 @property  NSNumber *stepValue
 @property  NSNumber *maxLength
 @property  NSString *format
 @property  NSString *units
 @property  NSString *manufacturerDescription
 @property  NSArray *validValues
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCharacteristicMetadata supportsSecureCoding]
  +[HMDCharacteristicMetadata characteristicMetadataWithDictionary:]

  // instance methods
  -[HMDCharacteristicMetadata dumpState]
  -[HMDCharacteristicMetadata stepValue]
  -[HMDCharacteristicMetadata units]
  -[HMDCharacteristicMetadata encodeWithCoder:]
  -[HMDCharacteristicMetadata maxLength]
  -[HMDCharacteristicMetadata maximumValue]
  -[HMDCharacteristicMetadata .cxx_destruct]
  -[HMDCharacteristicMetadata validValues]
  -[HMDCharacteristicMetadata dictionaryRepresentation]
  -[HMDCharacteristicMetadata minimumValue]
  -[HMDCharacteristicMetadata copyWithZone:]
  -[HMDCharacteristicMetadata format]
  -[HMDCharacteristicMetadata isEqual:]
  -[HMDCharacteristicMetadata init]
  -[HMDCharacteristicMetadata initWithCoder:]
  -[HMDCharacteristicMetadata manufacturerDescription]
  -[HMDCharacteristicMetadata initWithMinimumValue:maximumValue:stepValue:maxLength:validValues:format:units:manufacturerDescription:]
  -[HMDCharacteristicMetadata _descriptionDetails]


HMDXPCActivityInterface : HMFObject <HMDXPCActivityInterfacing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDXPCActivityInterface registerXPCActivityWithActivityIdentifier:criteria:activityBlock:]
  -[HMDXPCActivityInterface criteriaForXPCActivity:]
  -[HMDXPCActivityInterface setCriteria:forXPCActivity:]
  -[HMDXPCActivityInterface setState:forXPCActivity:]
  -[HMDXPCActivityInterface stateForXPCActivity:]
  -[HMDXPCActivityInterface unregisterXPCActivityWithActivityIdentifier:]


HMDAccessoryFirmwareUpdateSchedulerWingman : NSObject <HMDAccessoryFirmwareUpdateSchedulerWingman>
 @property  NSNotificationCenter *notificationCenter

  // instance methods
  -[HMDAccessoryFirmwareUpdateSchedulerWingman notificationCenter]
  -[HMDAccessoryFirmwareUpdateSchedulerWingman newBackgroundSchedulerWithIdentifier:]
  -[HMDAccessoryFirmwareUpdateSchedulerWingman policyForAccessory:sessionState:workQueue:]
  -[HMDAccessoryFirmwareUpdateSchedulerWingman newInitialDelayTimerWithDelay:options:]


HMDAccessoryFirmwareUpdateScheduler : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  HMDAccessoryFirmwareUpdateSession *updateSession
 @property  <HMDAccessoryFirmwareUpdateSchedulerWingman> *wingman
 @property  HMFTimer *initialDelayTimer
 @property  NSBackgroundActivityScheduler *backgroundScheduler
 @property  @? activityCompletion
 @property  HMFTimer *deferCheckTimer
 @property  <HMDAccessoryFirmwareUpdateTask> *currentTask
 @property  long long currentState
 @property  BOOL needsToStop
 @property  BOOL needsToScheduleRegister
 @property  BOOL needsToScheduleStaging
 @property  BOOL needsToScheduleApply
 @property  BOOL idle
 @property  BOOL stagingInProgress
 @property  <HMDAccessoryFirmwareUpdatePolicy> *updatePolicy
 @property  HMDAccessoryFirmwareUpdateProfile *updateProfile
 @property  long long state
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateScheduler logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateScheduler accessory]
  -[HMDAccessoryFirmwareUpdateScheduler _stop]
  -[HMDAccessoryFirmwareUpdateScheduler configure]
  -[HMDAccessoryFirmwareUpdateScheduler setCurrentState:]
  -[HMDAccessoryFirmwareUpdateScheduler backgroundScheduler]
  -[HMDAccessoryFirmwareUpdateScheduler timerDidFire:]
  -[HMDAccessoryFirmwareUpdateScheduler _registerForNotifications]
  -[HMDAccessoryFirmwareUpdateScheduler updatePolicy]
  -[HMDAccessoryFirmwareUpdateScheduler logIdentifier]
  -[HMDAccessoryFirmwareUpdateScheduler setCurrentTask:]
  -[HMDAccessoryFirmwareUpdateScheduler workQueue]
  -[HMDAccessoryFirmwareUpdateScheduler state]
  -[HMDAccessoryFirmwareUpdateScheduler dealloc]
  -[HMDAccessoryFirmwareUpdateScheduler privateDescription]
  -[HMDAccessoryFirmwareUpdateScheduler .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateScheduler currentTask]
  -[HMDAccessoryFirmwareUpdateScheduler isIdle]
  -[HMDAccessoryFirmwareUpdateScheduler scheduleWithDelay:]
  -[HMDAccessoryFirmwareUpdateScheduler currentState]
  -[HMDAccessoryFirmwareUpdateScheduler handlePrimaryResidentChanged:]
  -[HMDAccessoryFirmwareUpdateScheduler handleUpdateStateChanged:]
  -[HMDAccessoryFirmwareUpdateScheduler handleStagingNotReadyReasonsChanged:]
  -[HMDAccessoryFirmwareUpdateScheduler handleApplyNotReadyReasonsChanged:]
  -[HMDAccessoryFirmwareUpdateScheduler handleAccessoryReachabilityChanged:]
  -[HMDAccessoryFirmwareUpdateScheduler handleBridgeUpdate:]
  -[HMDAccessoryFirmwareUpdateScheduler handlePolicyStatusChange:]
  -[HMDAccessoryFirmwareUpdateScheduler initWithAccessory:firmwareUpdateSession:workQueue:]
  -[HMDAccessoryFirmwareUpdateScheduler initWithAccessory:firmwareUpdateSession:wingman:workQueue:]
  -[HMDAccessoryFirmwareUpdateScheduler updateProfile]
  -[HMDAccessoryFirmwareUpdateScheduler _handleSchedulingConditionChanged]
  -[HMDAccessoryFirmwareUpdateScheduler needsToStop]
  -[HMDAccessoryFirmwareUpdateScheduler needsToScheduleRegister]
  -[HMDAccessoryFirmwareUpdateScheduler needsToScheduleStaging]
  -[HMDAccessoryFirmwareUpdateScheduler needsToScheduleApply]
  -[HMDAccessoryFirmwareUpdateScheduler isStagingInProgress]
  -[HMDAccessoryFirmwareUpdateScheduler _invalidateExistingScheduling]
  -[HMDAccessoryFirmwareUpdateScheduler _scheduleCurrentTask]
  -[HMDAccessoryFirmwareUpdateScheduler _scheduleCurrentTaskBackgroundRun]
  -[HMDAccessoryFirmwareUpdateScheduler _defer]
  -[HMDAccessoryFirmwareUpdateScheduler _taskCanRunInCurrentDevice:]
  -[HMDAccessoryFirmwareUpdateScheduler _logDebugStates:]
  -[HMDAccessoryFirmwareUpdateScheduler _startDeferCheckTimer]
  -[HMDAccessoryFirmwareUpdateScheduler _stopDeferCheckTimer]
  -[HMDAccessoryFirmwareUpdateScheduler _startTaskInitialDelayTimer]
  -[HMDAccessoryFirmwareUpdateScheduler _stopInitialDelayTimer]
  -[HMDAccessoryFirmwareUpdateScheduler removeUpdatePolicy]
  -[HMDAccessoryFirmwareUpdateScheduler _createUpdatePolicy]
  -[HMDAccessoryFirmwareUpdateScheduler _removeUpdatePolicy]
  -[HMDAccessoryFirmwareUpdateScheduler updateSession]
  -[HMDAccessoryFirmwareUpdateScheduler wingman]
  -[HMDAccessoryFirmwareUpdateScheduler initialDelayTimer]
  -[HMDAccessoryFirmwareUpdateScheduler setInitialDelayTimer:]
  -[HMDAccessoryFirmwareUpdateScheduler setBackgroundScheduler:]
  -[HMDAccessoryFirmwareUpdateScheduler activityCompletion]
  -[HMDAccessoryFirmwareUpdateScheduler setActivityCompletion:]
  -[HMDAccessoryFirmwareUpdateScheduler deferCheckTimer]
  -[HMDAccessoryFirmwareUpdateScheduler setDeferCheckTimer:]
  -[HMDAccessoryFirmwareUpdateScheduler setUpdatePolicy:]


HMDNaturalLightingCurve : HMFObject <HMFLogging, NSSecureCoding, NSCopying>
 @property  unsigned long colorTemperatureNotifyIntervalThresholdInMilliseconds
 @property  unsigned long colorTemperatureUpdateIntervalInMilliseconds
 @property  unsigned long colorTemperatureNotifyValueChangeThreshold
 @property  unsigned long version
 @property  NSArray *transitionPoints
 @property  long long minimumBrightness
 @property  long long maximumBrightness
 @property  long long minimumColorTemperature
 @property  long long maximumColorTemperature
 @property  unsigned long checksum
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNaturalLightingCurve supportsSecureCoding]
  +[HMDNaturalLightingCurve logCategory]
  +[HMDNaturalLightingCurve colorTemperatureMiredsFromKelvins:]

  // instance methods
  -[HMDNaturalLightingCurve maximumBrightness]
  -[HMDNaturalLightingCurve encodeWithCoder:]
  -[HMDNaturalLightingCurve attributeDescriptions]
  -[HMDNaturalLightingCurve .cxx_destruct]
  -[HMDNaturalLightingCurve version]
  -[HMDNaturalLightingCurve copyWithZone:]
  -[HMDNaturalLightingCurve mutableCopyWithZone:]
  -[HMDNaturalLightingCurve checksum]
  -[HMDNaturalLightingCurve isEqual:]
  -[HMDNaturalLightingCurve initWithCoder:]
  -[HMDNaturalLightingCurve transitionPoints]
  -[HMDNaturalLightingCurve initWithVersion:transitionPoints:minimumBrightness:maximumBrightness:minimumColorTemperature:maximumColorTemperature:]
  -[HMDNaturalLightingCurve initWithCurve:minimumColorTemperature:maximumColorTemperature:]
  -[HMDNaturalLightingCurve colorTemperatureForBrightness:millisecondsElapsedSinceStartOfDay:]
  -[HMDNaturalLightingCurve transitionPointsWithmillisecondsElapsedSinceStartOfDay:]
  -[HMDNaturalLightingCurve minimumBrightness]
  -[HMDNaturalLightingCurve minimumColorTemperature]
  -[HMDNaturalLightingCurve maximumColorTemperature]
  -[HMDNaturalLightingCurve colorTemperatureNotifyValueChangeThreshold]
  -[HMDNaturalLightingCurve setColorTemperatureNotifyValueChangeThreshold:]
  -[HMDNaturalLightingCurve colorTemperatureNotifyIntervalThresholdInMilliseconds]
  -[HMDNaturalLightingCurve setColorTemperatureNotifyIntervalThresholdInMilliseconds:]
  -[HMDNaturalLightingCurve colorTemperatureUpdateIntervalInMilliseconds]
  -[HMDNaturalLightingCurve setColorTemperatureUpdateIntervalInMilliseconds:]


HMDMutableNaturalLightingCurve : HMDNaturalLightingCurve
 @property  unsigned long colorTemperatureNotifyValueChangeThreshold
 @property  unsigned long colorTemperatureNotifyIntervalThresholdInMilliseconds
 @property  unsigned long colorTemperatureUpdateIntervalInMilliseconds

  // instance methods
  -[HMDMutableNaturalLightingCurve copyWithZone:]


HMDXPCCachedResponseEntry : NSObject
 @property  HMReportContext *reportContext
 @property  NSMutableArray *messages
 @property  HMFMessageTransport *transport
 @property  HMFTimer *reportTimer
 @property  HMFTimer *retrievalTimer

  // instance methods
  -[HMDXPCCachedResponseEntry transport]
  -[HMDXPCCachedResponseEntry setTransport:]
  -[HMDXPCCachedResponseEntry messages]
  -[HMDXPCCachedResponseEntry .cxx_destruct]
  -[HMDXPCCachedResponseEntry reportContext]
  -[HMDXPCCachedResponseEntry initWithReportContext:transport:]
  -[HMDXPCCachedResponseEntry reportTimer]
  -[HMDXPCCachedResponseEntry setReportTimer:]
  -[HMDXPCCachedResponseEntry retrievalTimer]
  -[HMDXPCCachedResponseEntry setRetrievalTimer:]


HMDXPCMessageTransport : HMFMessageTransport <NSXPCListenerDelegate, HMFLogging, HMFMessageTransportDelegate, HMFTimerDelegate>
 @property  NSXPCListener *listener
 @property  HMXPCMessageTransportConfiguration *configuration
 @property  HMDXPCClientConnectionFactory *clientConnectionFactory
 @property  NSDictionary *activeRequests
 @property  HMDProcessMonitor *processMonitor
 @property  NSArray *connections
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDXPCMessageTransport logCategory]
  +[HMDXPCMessageTransport defaultTransport]
  +[HMDXPCMessageTransport accessorySetupTransport]

  // instance methods
  -[HMDXPCMessageTransport dumpState]
  -[HMDXPCMessageTransport timerDidFire:]
  -[HMDXPCMessageTransport messageTransport:didReceiveMessage:]
  -[HMDXPCMessageTransport logIdentifier]
  -[HMDXPCMessageTransport sendMessage:completionHandler:]
  -[HMDXPCMessageTransport connections]
  -[HMDXPCMessageTransport processMonitor]
  -[HMDXPCMessageTransport configuration]
  -[HMDXPCMessageTransport .cxx_destruct]
  -[HMDXPCMessageTransport stop]
  -[HMDXPCMessageTransport initWithConfiguration:]
  -[HMDXPCMessageTransport start]
  -[HMDXPCMessageTransport listener]
  -[HMDXPCMessageTransport listener:shouldAcceptNewConnection:]
  -[HMDXPCMessageTransport activeRequests]
  -[HMDXPCMessageTransport _reportCompletion:]
  -[HMDXPCMessageTransport initWithConfiguration:listener:clientConnectionFactory:]
  -[HMDXPCMessageTransport submitCounters]
  -[HMDXPCMessageTransport cacheResponseMessage:]
  -[HMDXPCMessageTransport cacheResponsesForMessageWithIdentifier:transport:reportContext:]
  -[HMDXPCMessageTransport __retrieveAndClearMessagesForCachedResponseEntry:]
  -[HMDXPCMessageTransport retrieveAndClearMessagesForRequestInfo:]
  -[HMDXPCMessageTransport reportCompletionForMessageWithIdentifier:]
  -[HMDXPCMessageTransport clientConnectionFactory]


HMDActiveSiriSessionInfo : NSObject <HMFLogging>
 @property  <HMDActiveSiriSessionInfoDelegate> *delegate
 @property  BOOL didBulkSendSessionFail
 @property  BOOL didBulkSendSessionComplete
 @property  BOOL didSiriSessionStart
 @property  BOOL didSiriSessionStop
 @property  <HMDDataStreamBulkSendSession> *bulkSendSession
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDActiveSiriSessionInfo logCategory]

  // instance methods
  -[HMDActiveSiriSessionInfo identifier]
  -[HMDActiveSiriSessionInfo initWithIdentifier:delegate:]
  -[HMDActiveSiriSessionInfo setDelegate:]
  -[HMDActiveSiriSessionInfo delegate]
  -[HMDActiveSiriSessionInfo .cxx_destruct]
  -[HMDActiveSiriSessionInfo invalidate]
  -[HMDActiveSiriSessionInfo isBulkSendActive]
  -[HMDActiveSiriSessionInfo _handleFrame:]
  -[HMDActiveSiriSessionInfo _bulkSendDidFail]
  -[HMDActiveSiriSessionInfo _bulkSendDidComplete]
  -[HMDActiveSiriSessionInfo isSiriSessionActive]
  -[HMDActiveSiriSessionInfo markSiriPluginReady]
  -[HMDActiveSiriSessionInfo markSiriPluginStopped]
  -[HMDActiveSiriSessionInfo setActiveBulkSendSession:]
  -[HMDActiveSiriSessionInfo readFirstFrame]
  -[HMDActiveSiriSessionInfo _maybeHandleFrame:error:]
  -[HMDActiveSiriSessionInfo _doReadAudioFrames]
  -[HMDActiveSiriSessionInfo didBulkSendSessionFail]
  -[HMDActiveSiriSessionInfo setDidBulkSendSessionFail:]
  -[HMDActiveSiriSessionInfo didBulkSendSessionComplete]
  -[HMDActiveSiriSessionInfo setDidBulkSendSessionComplete:]
  -[HMDActiveSiriSessionInfo didSiriSessionStart]
  -[HMDActiveSiriSessionInfo setDidSiriSessionStart:]
  -[HMDActiveSiriSessionInfo didSiriSessionStop]
  -[HMDActiveSiriSessionInfo setDidSiriSessionStop:]
  -[HMDActiveSiriSessionInfo bulkSendSession]
  -[HMDActiveSiriSessionInfo setBulkSendSession:]


HMDMediaSystemsAggregateDataGenerator : NSObject <HMDMediaGroupsAggregateDataGenerator>
 @property  <HMDMediaSystemsAggregateDataGeneratorDataSource> *dataSource

  // class methods
  +[HMDMediaSystemsAggregateDataGenerator isValidLeftDestination:rightDestination:]
  +[HMDMediaSystemsAggregateDataGenerator derivedDestinationForGroup:leftDestination:rightDestination:]
  +[HMDMediaSystemsAggregateDataGenerator derivedMediaDestinationIdentifierForGroupIdentifier:]
  +[HMDMediaSystemsAggregateDataGenerator deriveSupportedOptionsFromLeftDestination:rightDestination:]

  // instance methods
  -[HMDMediaSystemsAggregateDataGenerator dataSource]
  -[HMDMediaSystemsAggregateDataGenerator .cxx_destruct]
  -[HMDMediaSystemsAggregateDataGenerator setDataSource:]
  -[HMDMediaSystemsAggregateDataGenerator aggregateDataWithDestinations:controllers:groups:]
  -[HMDMediaSystemsAggregateDataGenerator nameForMediaSystemData:room:]
  -[HMDMediaSystemsAggregateDataGenerator roomForAllDestinationParentIdentifiers:]
  -[HMDMediaSystemsAggregateDataGenerator destinationWithRoleType:mediaSystemData:destinations:]
  -[HMDMediaSystemsAggregateDataGenerator hasRoleType:mediaSystemData:destination:]


HMDCompanionManager : HMFObject <HMFLogging, HMDIDSServiceDelegate>
 @property  <HMDIDSService> *service
 @property  HMDDevice *companion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCompanionManager sharedManager]
  +[HMDCompanionManager shortDescription]
  +[HMDCompanionManager logCategory]
  +[HMDCompanionManager isCompatibleCompanionDevice:]

  // instance methods
  -[HMDCompanionManager service:devicesChanged:]
  -[HMDCompanionManager service:connectedDevicesChanged:]
  -[HMDCompanionManager attributeDescriptions]
  -[HMDCompanionManager .cxx_destruct]
  -[HMDCompanionManager service]
  -[HMDCompanionManager init]
  -[HMDCompanionManager companion]
  -[HMDCompanionManager __initializeConnectedDevices]


HMDResidentAppleMediaStateManager : HMFObject <HMDNotificationRegistryDelegate, HMFTimerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDResidentAppleMediaStateManager timerDidFire:]
  -[HMDResidentAppleMediaStateManager .cxx_destruct]
  -[HMDResidentAppleMediaStateManager initWithDataSource:delegate:]
  -[HMDResidentAppleMediaStateManager mediaPropertyRegistrationsDidChangeForMediaProfiles:]
  -[HMDResidentAppleMediaStateManager handleAppleMediaAccessoryReachabilityChanged:]
  -[HMDResidentAppleMediaStateManager configureWithNotificationRegistry:notificationCenter:]


HMDEventTriggerSession : HMFObject <HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSUUID *sessionID
 @property  NSString *logString
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDEventTrigger *eventTrigger
 @property  NSUUID *eventTriggerUUID
 @property  HMDDevice *currentDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDEventTriggerSession logCategory]
  +[HMDEventTriggerSession hasMessageReceiverChildren]

  // instance methods
  -[HMDEventTriggerSession dumpState]
  -[HMDEventTriggerSession currentDevice]
  -[HMDEventTriggerSession logIdentifier]
  -[HMDEventTriggerSession sessionID]
  -[HMDEventTriggerSession logString]
  -[HMDEventTriggerSession workQueue]
  -[HMDEventTriggerSession dealloc]
  -[HMDEventTriggerSession .cxx_destruct]
  -[HMDEventTriggerSession messageTargetUUID]
  -[HMDEventTriggerSession messageReceiveQueue]
  -[HMDEventTriggerSession msgDispatcher]
  -[HMDEventTriggerSession eventTrigger]
  -[HMDEventTriggerSession setEventTrigger:]
  -[HMDEventTriggerSession _registerForMessages]
  -[HMDEventTriggerSession initWithSessionID:eventTrigger:workQueue:msgDispatcher:]
  -[HMDEventTriggerSession sendResidentMessage:payload:responseHandler:]
  -[HMDEventTriggerSession sendMessage:payload:device:responseHandler:]
  -[HMDEventTriggerSession sendMessage:payload:device:target:responseHandler:]
  -[HMDEventTriggerSession eventTriggerUUID]


HMDZone : HMFObject <HMDHomeMessageReceiver, HMFDumpState, NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSString *name
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHome *home
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  NSArray *roomUUIDs
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDZone supportsSecureCoding]
  +[HMDZone hasMessageReceiverChildren]

  // instance methods
  -[HMDZone dumpState]
  -[HMDZone home]
  -[HMDZone encodeWithCoder:]
  -[HMDZone workQueue]
  -[HMDZone setWorkQueue:]
  -[HMDZone dealloc]
  -[HMDZone uuid]
  -[HMDZone .cxx_destruct]
  -[HMDZone messageTargetUUID]
  -[HMDZone setName:]
  -[HMDZone name]
  -[HMDZone messageReceiveQueue]
  -[HMDZone msgDispatcher]
  -[HMDZone urlString]
  -[HMDZone initWithCoder:]
  -[HMDZone setHome:]
  -[HMDZone rooms]
  -[HMDZone setMsgDispatcher:]
  -[HMDZone _registerForMessages]
  -[HMDZone removeRoom:]
  -[HMDZone transactionObjectUpdated:newValues:message:]
  -[HMDZone transactionObjectRemoved:message:]
  -[HMDZone modelObjectWithChangeType:]
  -[HMDZone backingStoreObjects:]
  -[HMDZone _handleRename:]
  -[HMDZone _handleAddRoom:]
  -[HMDZone _handleRemoveRoom:]
  -[HMDZone spiClientIdentifier]
  -[HMDZone initWithName:uuid:home:queue:]
  -[HMDZone configure:queue:]
  -[HMDZone roomUUIDs]
  -[HMDZone _checkForAddValidity:]
  -[HMDZone _handleSetRoomsTransactionWithRoomUUIDStrings:error:]
  -[HMDZone addRoomIfNotPresent:]
  -[HMDZone updateZoneWithModel:message:]
  -[HMDZone assistantObject]


HMDZoneModel : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSArray *roomUUIDs

  // class methods
  +[HMDZoneModel properties]

  // instance methods
  -[HMDZoneModel dependentUUIDs]


HMDMobileGestaltClient : HMFObject <HMDMobileGestaltClient>
 @property  BOOL supportsSiriHub
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDMobileGestaltClient supportsSiriHub]


HMDUnassociatedWACAccessory : HMDUnassociatedAccessory <HMFLogging, HMFTimerDelegate>
 @property  <HMDWACDevice> *wacDevice
 @property  <HMDWACAccessoryConfigurationDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSString *wacDeviceID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUnassociatedWACAccessory logCategory]

  // instance methods
  -[HMDUnassociatedWACAccessory timerDidFire:]
  -[HMDUnassociatedWACAccessory logIdentifier]
  -[HMDUnassociatedWACAccessory delegate]
  -[HMDUnassociatedWACAccessory .cxx_destruct]
  -[HMDUnassociatedWACAccessory delegateQueue]
  -[HMDUnassociatedWACAccessory startConfigurationWithCompletionHandler:]
  -[HMDUnassociatedWACAccessory transportTypes]
  -[HMDUnassociatedWACAccessory wacDevice]
  -[HMDUnassociatedWACAccessory _abort:]
  -[HMDUnassociatedWACAccessory setDelegate:withQueue:]
  -[HMDUnassociatedWACAccessory initWithIdentifier:name:category:messageDispatcher:wacDevice:]
  -[HMDUnassociatedWACAccessory setWACDevice:]
  -[HMDUnassociatedWACAccessory wacDeviceID]
  -[HMDUnassociatedWACAccessory cancelConfigurationWithCompletionHandler:]
  -[HMDUnassociatedWACAccessory updateWithMatchingUnassociatedAccessory:]
  -[HMDUnassociatedWACAccessory _requestUserPermission]
  -[HMDUnassociatedWACAccessory _userPermissionResponse:]
  -[HMDUnassociatedWACAccessory _configureDevice]
  -[HMDUnassociatedWACAccessory _configureDeviceCompleted:]
  -[HMDUnassociatedWACAccessory _waitForPostWACMatch]
  -[HMDUnassociatedWACAccessory _postWACMatchTimeout]
  -[HMDUnassociatedWACAccessory _postWACMatchingAccessoryFound:]


HMDActiveXPCConnectionLogEvent : HMMLogEvent
 @property  NSString *name
 @property  BOOL activated
 @property  BOOL added

  // class methods
  +[HMDActiveXPCConnectionLogEvent initWithNewXPCConnectionAdded:]
  +[HMDActiveXPCConnectionLogEvent initWithXPCConnectionRemoved:]

  // instance methods
  -[HMDActiveXPCConnectionLogEvent isActivated]
  -[HMDActiveXPCConnectionLogEvent .cxx_destruct]
  -[HMDActiveXPCConnectionLogEvent name]
  -[HMDActiveXPCConnectionLogEvent added]
  -[HMDActiveXPCConnectionLogEvent initWithXPCConnection:added:]


HMDRemoteMessageFilter : HMFMessageFilter
  // class methods
  +[HMDRemoteMessageFilter filterMessage:withPolicies:error:]


HMDXPCMessageCountTracker : NSObject <HMFLogging>
 @property  NSDate *lastResetDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDXPCMessageCountTracker logCategory]
  +[HMDXPCMessageCountTracker xpcCounterTracker]

  // instance methods
  -[HMDXPCMessageCountTracker dumpState]
  -[HMDXPCMessageCountTracker .cxx_destruct]
  -[HMDXPCMessageCountTracker _resetCounters]
  -[HMDXPCMessageCountTracker __init]
  -[HMDXPCMessageCountTracker init]
  -[HMDXPCMessageCountTracker lastResetDate]
  -[HMDXPCMessageCountTracker submitCounters]
  -[HMDXPCMessageCountTracker _countersOfType:]
  -[HMDXPCMessageCountTracker countersOfType:]
  -[HMDXPCMessageCountTracker incrementCounterOfType:identifier:]
  -[HMDXPCMessageCountTracker _incrementCounterOfType:identifier:]
  -[HMDXPCMessageCountTracker sampleCountersAndReset:]
  -[HMDXPCMessageCountTracker setLastResetDate:]


HMDSnapshotLocalSession : HMDSnapshotSession
  // instance methods
  -[HMDSnapshotLocalSession addMessage:]
  -[HMDSnapshotLocalSession initWithSessionID:accessory:snapshotGetter:message:waitPeriod:reachabilityPath:cameraLocallyReachable:snapshotForNotification:]


HMDAccessoryNetworkProtectionGroup : NSObject <NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  HMDHome *home
 @property  long long targetProtectionMode
 @property  NSString *manufacturer
 @property  NSNumber *category
 @property  NSUUID *uuid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryNetworkProtectionGroup supportsSecureCoding]

  // instance methods
  -[HMDAccessoryNetworkProtectionGroup setCategory:]
  -[HMDAccessoryNetworkProtectionGroup home]
  -[HMDAccessoryNetworkProtectionGroup initWithModel:]
  -[HMDAccessoryNetworkProtectionGroup encodeWithCoder:]
  -[HMDAccessoryNetworkProtectionGroup category]
  -[HMDAccessoryNetworkProtectionGroup uuid]
  -[HMDAccessoryNetworkProtectionGroup .cxx_destruct]
  -[HMDAccessoryNetworkProtectionGroup setManufacturer:]
  -[HMDAccessoryNetworkProtectionGroup manufacturer]
  -[HMDAccessoryNetworkProtectionGroup isEqual:]
  -[HMDAccessoryNetworkProtectionGroup initWithCoder:]
  -[HMDAccessoryNetworkProtectionGroup setHome:]
  -[HMDAccessoryNetworkProtectionGroup targetProtectionMode]
  -[HMDAccessoryNetworkProtectionGroup setTargetProtectionMode:]
  -[HMDAccessoryNetworkProtectionGroup transactionObjectUpdated:newValues:message:]
  -[HMDAccessoryNetworkProtectionGroup transactionObjectRemoved:message:]
  -[HMDAccessoryNetworkProtectionGroup configureWithHome:]
  -[HMDAccessoryNetworkProtectionGroup initWithUUID:manufacturer:category:targetProtectionMode:]
  -[HMDAccessoryNetworkProtectionGroup modelWithObjectChangeType:]
  -[HMDAccessoryNetworkProtectionGroup modelForVersion:]


HMDAuthServer : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  MFAATokenManager *tokenManager
 @property  HMFTimer *retryTimer
 @property  long long retryCount
 @property  NSLocale *locale
 @property  NSString *model
 @property  id context
 @property  NSData *token
 @property  NSUUID *uuid
 @property  unsigned long authFeatures
 @property  unsigned long currentOperation
 @property  <HMDAuthServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAuthServer logCategory]

  // instance methods
  -[HMDAuthServer timerDidFire:]
  -[HMDAuthServer setModel:]
  -[HMDAuthServer token]
  -[HMDAuthServer model]
  -[HMDAuthServer retryCount]
  -[HMDAuthServer workQueue]
  -[HMDAuthServer setRetryCount:]
  -[HMDAuthServer delegate]
  -[HMDAuthServer currentOperation]
  -[HMDAuthServer uuid]
  -[HMDAuthServer .cxx_destruct]
  -[HMDAuthServer setUuid:]
  -[HMDAuthServer initWithDelegate:]
  -[HMDAuthServer locale]
  -[HMDAuthServer setLocale:]
  -[HMDAuthServer setContext:]
  -[HMDAuthServer setToken:]
  -[HMDAuthServer context]
  -[HMDAuthServer setRetryTimer:]
  -[HMDAuthServer retryTimer]
  -[HMDAuthServer setCurrentOperation:]
  -[HMDAuthServer authFeatures]
  -[HMDAuthServer _reportFailureWithContext:error:]
  -[HMDAuthServer retryOrReportFailure:context:]
  -[HMDAuthServer _handleResponseMetadata:ppid:locale:context:error:]
  -[HMDAuthServer saveRetryOperation:token:authFeatures:uuid:context:locale:model:]
  -[HMDAuthServer resetRetryOperation]
  -[HMDAuthServer resumeRetryIfPending]
  -[HMDAuthServer getPPIDInfo:model:cert:context:]
  -[HMDAuthServer sendPPIDInfoRequest:model:token:authFeatures:uuid:context:]
  -[HMDAuthServer sendActivationRequest:uuid:context:]
  -[HMDAuthServer sendActivationConfirmation:uuid:context:]
  -[HMDAuthServer tokenManager]
  -[HMDAuthServer setAuthFeatures:]


HMDLightProfileNaturalLightingAction : HMDAction
 @property  BOOL naturalLightingEnabled
 @property  NSNotificationCenter *notificationCenter
 @property  NSArray *lightServices
 @property  NSUUID *lightProfileUUID
 @property  HMDLightProfile *lightProfile

  // class methods
  +[HMDLightProfileNaturalLightingAction supportsSecureCoding]
  +[HMDLightProfileNaturalLightingAction logCategory]
  +[HMDLightProfileNaturalLightingAction actionWithDictionaryRepresentation:home:]
  +[HMDLightProfileNaturalLightingAction actionWithDictionaryRepresentation:actionSet:]

  // instance methods
  -[HMDLightProfileNaturalLightingAction notificationCenter]
  -[HMDLightProfileNaturalLightingAction modelClass]
  -[HMDLightProfileNaturalLightingAction encodeWithCoder:]
  -[HMDLightProfileNaturalLightingAction type]
  -[HMDLightProfileNaturalLightingAction attributeDescriptions]
  -[HMDLightProfileNaturalLightingAction .cxx_destruct]
  -[HMDLightProfileNaturalLightingAction dictionaryRepresentation]
  -[HMDLightProfileNaturalLightingAction initWithCoder:]
  -[HMDLightProfileNaturalLightingAction isNaturalLightingEnabled]
  -[HMDLightProfileNaturalLightingAction setNaturalLightingEnabled:]
  -[HMDLightProfileNaturalLightingAction lightProfileUUID]
  -[HMDLightProfileNaturalLightingAction lightProfile]
  -[HMDLightProfileNaturalLightingAction setLightProfile:]
  -[HMDLightProfileNaturalLightingAction associatedAccessories]
  -[HMDLightProfileNaturalLightingAction transactionObjectUpdated:newValues:message:]
  -[HMDLightProfileNaturalLightingAction isAssociatedWithAccessory:]
  -[HMDLightProfileNaturalLightingAction modelObjectWithChangeType:version:]
  -[HMDLightProfileNaturalLightingAction stateDump]
  -[HMDLightProfileNaturalLightingAction isUnsecuringAction]
  -[HMDLightProfileNaturalLightingAction initWithModelObject:parent:error:]
  -[HMDLightProfileNaturalLightingAction configureWithHome:]
  -[HMDLightProfileNaturalLightingAction handleAccessoryProfileAddedNotification:]
  -[HMDLightProfileNaturalLightingAction initWithUUID:lightProfileUUID:naturalLightingEnabled:actionSet:notificationCenter:]
  -[HMDLightProfileNaturalLightingAction initWithUUID:lightProfileUUID:naturalLightingEnabled:actionSet:]
  -[HMDLightProfileNaturalLightingAction writeRequestForTransitionStartWithLightProfile:startDate:type:]
  -[HMDLightProfileNaturalLightingAction isActionForCharacteristic:]
  -[HMDLightProfileNaturalLightingAction lightServices]
  -[HMDLightProfileNaturalLightingAction setLightServices:]


HMDCloudSyncLogEventDataSyncStateManager : HMFObject <HMDLogEventDataSyncStateContext>
 @property  BOOL firstDataSyncEventReceived
 @property  unsigned long dataSyncState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudSyncLogEventDataSyncStateManager currentContext]

  // instance methods
  -[HMDCloudSyncLogEventDataSyncStateManager init]
  -[HMDCloudSyncLogEventDataSyncStateManager dataSyncState]
  -[HMDCloudSyncLogEventDataSyncStateManager firstDataSyncEventReceived]
  -[HMDCloudSyncLogEventDataSyncStateManager setFirstDataSyncEventReceived:]
  -[HMDCloudSyncLogEventDataSyncStateManager updateWithDataSyncState:]


HMDIncomingCloudPushLogEvent : HMMLogEvent
 @property  NSString *topic

  // class methods
  +[HMDIncomingCloudPushLogEvent incomingCloudPush:]

  // instance methods
  -[HMDIncomingCloudPushLogEvent topic]
  -[HMDIncomingCloudPushLogEvent .cxx_destruct]
  -[HMDIncomingCloudPushLogEvent initWithTopic:]


HMDCloudSyncOperationLogEvent : HMMLogEvent
  // instance methods
  -[HMDCloudSyncOperationLogEvent initWithError:]


HMDCloudSyncFetchLogEvent : HMDCloudSyncOperationLogEvent
  // class methods
  +[HMDCloudSyncFetchLogEvent fetchCompletedWithError:]


HMDCloudSyncLegacyFetchLogEvent : HMDCloudSyncFetchLogEvent
  // class methods
  +[HMDCloudSyncLegacyFetchLogEvent fetchCompletedWithError:]


HMDCloudSyncUploadLogEvent : HMDCloudSyncOperationLogEvent
  // class methods
  +[HMDCloudSyncUploadLogEvent uploadCompletedWithError:]


HMDCloudSyncLegacyUploadLogEvent : HMDCloudSyncUploadLogEvent
  // class methods
  +[HMDCloudSyncLegacyUploadLogEvent uploadCompletedWithError:]


HMDCloudSyncUploadReasonLogEvent : HMMLogEvent
 @property  long long legacyPushCount
 @property  long long homeZonePushCount
 @property  long long homeManagerPushCount
 @property  NSString *saveReason

  // class methods
  +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedLegacyPush:]
  +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedHomeZonePush:]
  +[HMDCloudSyncUploadReasonLogEvent uploadReason:acceptedHomeManagerZonePush:]

  // instance methods
  -[HMDCloudSyncUploadReasonLogEvent .cxx_destruct]
  -[HMDCloudSyncUploadReasonLogEvent initWithUploadReason:legacyPushCount:homeZonePushCount:homeManagerPushCount:]
  -[HMDCloudSyncUploadReasonLogEvent legacyPushCount]
  -[HMDCloudSyncUploadReasonLogEvent homeZonePushCount]
  -[HMDCloudSyncUploadReasonLogEvent homeManagerPushCount]
  -[HMDCloudSyncUploadReasonLogEvent saveReason]


HMDUploadMaximumDelayLogEvent : HMMLogEvent
  // class methods
  +[HMDUploadMaximumDelayLogEvent uploadMaximumDelay]


HMDDecryptionCompletedLogEvent : HMMLogEvent
 @property  BOOL didDecryptionFail

  // class methods
  +[HMDDecryptionCompletedLogEvent decryptionCompletedWithFailure:]

  // instance methods
  -[HMDDecryptionCompletedLogEvent initWithFailure:]
  -[HMDDecryptionCompletedLogEvent didDecryptionFail]


HMDDataSyncStateLogEvent : HMMLogEvent
 @property  unsigned long dataSyncState

  // class methods
  +[HMDDataSyncStateLogEvent dataSyncStateEstablished:]

  // instance methods
  -[HMDDataSyncStateLogEvent shouldSubmit]
  -[HMDDataSyncStateLogEvent dataSyncState]
  -[HMDDataSyncStateLogEvent setDataSyncState:]
  -[HMDDataSyncStateLogEvent initWithDataSyncState:]
  -[HMDDataSyncStateLogEvent initWithDataSyncState:currentDataSyncContext:]


HMDRecordOperationLogEvent : HMMLogEvent
 @property  unsigned long size
 @property  BOOL legacy

  // instance methods
  -[HMDRecordOperationLogEvent isLegacy]
  -[HMDRecordOperationLogEvent size]
  -[HMDRecordOperationLogEvent initWithSize:isLegacy:]


HMDRecordsSavedLogEvent : HMDRecordOperationLogEvent
  // class methods
  +[HMDRecordsSavedLogEvent recordsSaved:]
  +[HMDRecordsSavedLogEvent legacyRecordsSaved:]

  // instance methods
  -[HMDRecordsSavedLogEvent initWithSavedRecords:isLegacy:]


HMDRecordChangedLogEvent : HMDRecordOperationLogEvent
  // class methods
  +[HMDRecordChangedLogEvent recordChanged:]
  +[HMDRecordChangedLogEvent legacyRecordChanged:]

  // instance methods
  -[HMDRecordChangedLogEvent initWithChangedRecord:isLegacy:]


HMDCameraClipManagerRequestLogEvent : HMMHomeLogEvent
 @property  NSString *requestName

  // instance methods
  -[HMDCameraClipManagerRequestLogEvent .cxx_destruct]
  -[HMDCameraClipManagerRequestLogEvent requestName]
  -[HMDCameraClipManagerRequestLogEvent initWithRequestName:homeUUID:]


HMDIDSFirewallManagerContext : HMFObject <HMFLogging>
 @property  HMDIDSFirewallManager *firewallManager
 @property  HMDHomeManager *homeManager
 @property  IDSFirewall *firewall
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter
 @property  NSArray *userIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSFirewallManagerContext logCategory]

  // instance methods
  -[HMDIDSFirewallManagerContext notificationCenter]
  -[HMDIDSFirewallManagerContext configure]
  -[HMDIDSFirewallManagerContext workQueue]
  -[HMDIDSFirewallManagerContext .cxx_destruct]
  -[HMDIDSFirewallManagerContext homeManager]
  -[HMDIDSFirewallManagerContext handleHomeUserRemovedNotification:]
  -[HMDIDSFirewallManagerContext handleHomeRemovedNotification:]
  -[HMDIDSFirewallManagerContext handleHomeAddedNotification:]
  -[HMDIDSFirewallManagerContext handleHomeUserAddedNotification:]
  -[HMDIDSFirewallManagerContext initWithHomeManager:IDSFirewall:notificationCenter:workQueue:]
  -[HMDIDSFirewallManagerContext registerForHomeUserNotifications]
  -[HMDIDSFirewallManagerContext userIDs]
  -[HMDIDSFirewallManagerContext replaceFireWallEntries:]
  -[HMDIDSFirewallManagerContext addFirewallEntries:]
  -[HMDIDSFirewallManagerContext firewall]
  -[HMDIDSFirewallManagerContext firewallManager]
  -[HMDIDSFirewallManagerContext setFirewallManager:]


HMDIDSFirewallManager : HMFObject <HMFLogging>
 @property  HMDIDSFirewallManagerContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSFirewallManager logCategory]
  +[HMDIDSFirewallManager firewallEntriesForUserIDs:]

  // instance methods
  -[HMDIDSFirewallManager initWithContext:]
  -[HMDIDSFirewallManager .cxx_destruct]
  -[HMDIDSFirewallManager start]
  -[HMDIDSFirewallManager context]
  -[HMDIDSFirewallManager replaceFireWallEntriesWithUserIDs:]
  -[HMDIDSFirewallManager addFireWallEntryForUserIDs:]
  -[HMDIDSFirewallManager handleDidAddHome]
  -[HMDIDSFirewallManager handleDidRemoveHome]
  -[HMDIDSFirewallManager handleDidAddUserWithUserID:]
  -[HMDIDSFirewallManager handleDidRemoveUser]


HMDAccessoryNetworkAccessViolation : HMFObject <NSSecureCoding>
 @property  NSDate *lastViolationDate
 @property  NSDate *lastResetDate
 @property  BOOL currentViolation

  // class methods
  +[HMDAccessoryNetworkAccessViolation supportsSecureCoding]
  +[HMDAccessoryNetworkAccessViolation noViolation]

  // instance methods
  -[HMDAccessoryNetworkAccessViolation encodeWithCoder:]
  -[HMDAccessoryNetworkAccessViolation attributeDescriptions]
  -[HMDAccessoryNetworkAccessViolation .cxx_destruct]
  -[HMDAccessoryNetworkAccessViolation isEqual:]
  -[HMDAccessoryNetworkAccessViolation initWithCoder:]
  -[HMDAccessoryNetworkAccessViolation initWithLastViolationDate:lastViolationResetDate:]
  -[HMDAccessoryNetworkAccessViolation hasCurrentViolation]
  -[HMDAccessoryNetworkAccessViolation lastViolationDate]
  -[HMDAccessoryNetworkAccessViolation lastResetDate]
  -[HMDAccessoryNetworkAccessViolation initWithLastViolationTimeInterval:lastViolationResetTimeInterval:]


HMDUserSupportsAutomaticHH2MigrationModel : HMBModel
 @property  NSNumber *supportsAutomaticHH2Migration

  // class methods
  +[HMDUserSupportsAutomaticHH2MigrationModel hmbProperties]


HMDRemoteEventRouterServerMessageReceiver : NSObject <HMFMessageReceiver>
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRemoteEventRouterServerMessageReceiver .cxx_destruct]
  -[HMDRemoteEventRouterServerMessageReceiver messageTargetUUID]
  -[HMDRemoteEventRouterServerMessageReceiver messageReceiveQueue]
  -[HMDRemoteEventRouterServerMessageReceiver handleRequestMessage:]


HMDRemoteEventRouterServer : NSObject <HMFLogging, HMFMessageReceiver, HMEMessageDatagramServerDataSource, HMEMessageDatagramServerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDRemoteEventRouterServer logCategory]

  // instance methods
  -[HMDRemoteEventRouterServer logIdentifier]
  -[HMDRemoteEventRouterServer .cxx_destruct]
  -[HMDRemoteEventRouterServer messageTargetUUID]
  -[HMDRemoteEventRouterServer dumpStateDescription]
  -[HMDRemoteEventRouterServer messageReceiveQueue]
  -[HMDRemoteEventRouterServer submitLogEvent:]
  -[HMDRemoteEventRouterServer server:expandedTopicsForTopics:]
  -[HMDRemoteEventRouterServer serverTimerProvider:]
  -[HMDRemoteEventRouterServer server:connectionDidExpire:]
  -[HMDRemoteEventRouterServer shouldAllowEvent:topic:connection:]
  -[HMDRemoteEventRouterServer serverSupportFragmentCachedEvents:]
  -[HMDRemoteEventRouterServer serverFragmentEventsDataSize:]
  -[HMDRemoteEventRouterServer serverDebounceTimeInterval:]
  -[HMDRemoteEventRouterServer server:upstreamTopicsForTopic:]
  -[HMDRemoteEventRouterServer server:timeoutIntervalForConnection:]
  -[HMDRemoteEventRouterServer server:shouldProcessEventsForConnection:shouldLogState:]
  -[HMDRemoteEventRouterServer server:sendEvents:cachedEvents:connection:completion:]
  -[HMDRemoteEventRouterServer server:isConnectionTerminatingError:]
  -[HMDRemoteEventRouterServer _registerForMessages:]
  -[HMDRemoteEventRouterServer _underlyingMessageDataFromFragmentMessageData:error:]
  -[HMDRemoteEventRouterServer submitLogEvent:error:]
  -[HMDRemoteEventRouterServer handlePrimaryResidentIsCurrentDeviceChangeNotification:]
  -[HMDRemoteEventRouterServer _handlePrimaryRequestMessage:]
  -[HMDRemoteEventRouterServer server:forwardingTopicsForTopics:]
  -[HMDRemoteEventRouterServer initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:subscriptionProvider:registrationEventRouter:storeReadHandle:]
  -[HMDRemoteEventRouterServer initWithPrimaryModeUUID:residentModeUUID:queue:messageDispatcher:dataSource:notificationCenter:requestMessageName:updateMessageName:logCategory:logEventSubmitter:connectionServerFactory:]
  -[HMDRemoteEventRouterServer _registerForAccessoryMessages:]
  -[HMDRemoteEventRouterServer messageTargetForMode:]
  -[HMDRemoteEventRouterServer respondToMessage:underlyingResponseData:connection:label:]
  -[HMDRemoteEventRouterServer respondToMessage:underlyingResponseData:supportsFragmentMessage:label:]
  -[HMDRemoteEventRouterServer _handleRequestMessage:connectionMode:]
  -[HMDRemoteEventRouterServer _handleProtoRequest:originalMessage:connectionMode:]
  -[HMDRemoteEventRouterServer _handleConnectRequest:originalMessage:connectionMode:]
  -[HMDRemoteEventRouterServer _handleDisconnectRequest:originalMessage:]
  -[HMDRemoteEventRouterServer _handleChangeRegistrationsRequest:originalMessage:]
  -[HMDRemoteEventRouterServer _handleKeepAliveRequest:originalMessage:]
  -[HMDRemoteEventRouterServer _handleFetchEventsRequest:originalMessage:]
  -[HMDRemoteEventRouterServer sendMessageWithPayloadMessage:destination:messageType:completion:]
  -[HMDRemoteEventRouterServer configureIsPrimaryResident:isResidentEventProviding:additionalPolicies:]


HMDAccessoryInvitation : HMFObject <NSSecureCoding>
 @property  NSUUID *identifier
 @property  HMDAccessory *accessory
 @property  long long state

  // class methods
  +[HMDAccessoryInvitation supportsSecureCoding]

  // instance methods
  -[HMDAccessoryInvitation accessory]
  -[HMDAccessoryInvitation identifier]
  -[HMDAccessoryInvitation encodeWithCoder:]
  -[HMDAccessoryInvitation state]
  -[HMDAccessoryInvitation .cxx_destruct]
  -[HMDAccessoryInvitation initWithCoder:]
  -[HMDAccessoryInvitation initWithAccessory:identifier:state:]


HMDSiriSession : NSObject <HMDActiveSiriSessionInfoDelegate, HMFLogging>
 @property  HMDLogEventDispatcher *logEventDispatcher
 @property  HMDSiriStreamStartEvent *streamStartMetric
 @property  HMDSiriRemoteInputServer *server
 @property  HMDActiveSiriSessionInfo *activeSessionInfo
 @property  NSNumber *deviceType
 @property  BOOL isActivationPending
 @property  NSObject<OS_xpc_object> *boostMessage
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriSession logCategory]
  +[HMDSiriSession siriSessionForUI]

  // instance methods
  -[HMDSiriSession identifier]
  -[HMDSiriSession deactivate]
  -[HMDSiriSession sendMsg:args:]
  -[HMDSiriSession .cxx_destruct]
  -[HMDSiriSession deviceType]
  -[HMDSiriSession server]
  -[HMDSiriSession publish]
  -[HMDSiriSession invalidate]
  -[HMDSiriSession setServer:]
  -[HMDSiriSession setDeviceType:]
  -[HMDSiriSession stopStream]
  -[HMDSiriSession logEventDispatcher]
  -[HMDSiriSession setActiveBulkSendSession:]
  -[HMDSiriSession activeSiriSessionDidStop:]
  -[HMDSiriSession activeSiriSession:didCreateAudioFrame:sequenceNumber:gain:]
  -[HMDSiriSession activeSiriSession:didReceiveButtonUpWithDuration:]
  -[HMDSiriSession activeSiriSession:didReceiveFirstPassMetadata:]
  -[HMDSiriSession initWithIdentifier:logEventDispatcher:deviceType:]
  -[HMDSiriSession initWithIdentifier:deviceType:]
  -[HMDSiriSession activateWithAccessory:metadata:]
  -[HMDSiriSession activateAfterHubInitiation]
  -[HMDSiriSession activeSessionToken]
  -[HMDSiriSession handleStartStream]
  -[HMDSiriSession handleStopStream]
  -[HMDSiriSession handleResetStream]
  -[HMDSiriSession beginTrackingStreamStartMetricWithActivationType:]
  -[HMDSiriSession maybeSubmitStreamStartMetricWithError:]
  -[HMDSiriSession _startStream]
  -[HMDSiriSession _createArgsDictionaryWithError:]
  -[HMDSiriSession streamStartMetric]
  -[HMDSiriSession setStreamStartMetric:]
  -[HMDSiriSession activeSessionInfo]
  -[HMDSiriSession setActiveSessionInfo:]
  -[HMDSiriSession isActivationPending]
  -[HMDSiriSession setIsActivationPending:]
  -[HMDSiriSession boostMessage]
  -[HMDSiriSession setBoostMessage:]


HMDAccessoryPairingProgressStateMap : NSObject
 @property  NSMutableDictionary *progressStateMap
 @property  NSString *lastProgressState
 @property  NSString *longestProgressState
 @property  NSDate *lastProgressStateEventTime

  // instance methods
  -[HMDAccessoryPairingProgressStateMap .cxx_destruct]
  -[HMDAccessoryPairingProgressStateMap initWithDate:]
  -[HMDAccessoryPairingProgressStateMap updateWithProgressState:date:]
  -[HMDAccessoryPairingProgressStateMap longestProgressState]
  -[HMDAccessoryPairingProgressStateMap lastProgressState]
  -[HMDAccessoryPairingProgressStateMap getTimeDurationForLongestProgressState]
  -[HMDAccessoryPairingProgressStateMap progressStateMap]
  -[HMDAccessoryPairingProgressStateMap setProgressStateMap:]
  -[HMDAccessoryPairingProgressStateMap setLastProgressState:]
  -[HMDAccessoryPairingProgressStateMap setLongestProgressState:]
  -[HMDAccessoryPairingProgressStateMap lastProgressStateEventTime]
  -[HMDAccessoryPairingProgressStateMap setLastProgressStateEventTime:]


HMDAccessoryPairingLogEventStateManager : NSObject
 @property  NSMutableDictionary *retryCountMap
 @property  NSMutableDictionary *pairingProgressStateTracker

  // class methods
  +[HMDAccessoryPairingLogEventStateManager sharedInstance]

  // instance methods
  -[HMDAccessoryPairingLogEventStateManager .cxx_destruct]
  -[HMDAccessoryPairingLogEventStateManager init]
  -[HMDAccessoryPairingLogEventStateManager incrementRetryCount:]
  -[HMDAccessoryPairingLogEventStateManager _handlePairingStateProgressNotification:]
  -[HMDAccessoryPairingLogEventStateManager retryCountForIdentifier:]
  -[HMDAccessoryPairingLogEventStateManager clearRetryCountMap]
  -[HMDAccessoryPairingLogEventStateManager startProgressStateTrackerWithDate:identifier:]
  -[HMDAccessoryPairingLogEventStateManager updatePairingProgressState:]
  -[HMDAccessoryPairingLogEventStateManager updateLastPairingProgressStateEventForIdentifier:withDate:]
  -[HMDAccessoryPairingLogEventStateManager clearPairingProgressStateTrackerForIdentifier:]
  -[HMDAccessoryPairingLogEventStateManager getLongestProgressStateForAccessory:]
  -[HMDAccessoryPairingLogEventStateManager getLastProgressStateForAccessory:]
  -[HMDAccessoryPairingLogEventStateManager getTimeDurationForLongestProgressStateForAccessory:]
  -[HMDAccessoryPairingLogEventStateManager getTimeDurationForProgressStateForIdentifier:state:]
  -[HMDAccessoryPairingLogEventStateManager retryCountMap]
  -[HMDAccessoryPairingLogEventStateManager pairingProgressStateTracker]


HMDAccessoryPairingEvent : HMMHomeLogEvent <HMDAWDLogEvent, HMMCoreAnalyticsLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSDictionary *vendorDetailsForCoreAnalytics
 @property  NSUUID *accessoryUUID
 @property  NSString *accessoryServerIdentifier
 @property  NSString *accessoryAddRequestIdentifier
 @property  HMDAccessory *pairedAccessory
 @property  NSString *accessoryModel
 @property  NSString *accessoryManufacturer
 @property  NSString *accessoryCategory
 @property  NSString *primaryServiceType
 @property  HMDAccessoryMetricVendorDetails *vendorDetailsForReporting
 @property  NSString *appIdentifier
 @property  long long linkType
 @property  long long communicationProtocol
 @property  long long certificationStatus
 @property  BOOL addOperation
 @property  BOOL addViaWAC
 @property  BOOL wacLegacy
 @property  unsigned long authMethod
 @property  BOOL usedWiFiPPSK
 @property  BOOL usedOwnershipProof
 @property  BOOL networkRouterAdd
 @property  BOOL networkRouterReplace
 @property  BOOL firstHAPAccessoryInHome
 @property  BOOL firstHAPAccessoryInAnyHome
 @property  long long retryCount
 @property  BOOL threadAccessory
 @property  BOOL btCommissioned
 @property  NSError *threadCommissioningError
 @property  double threadCommissioningDuration
 @property  unsigned int threadCapabilities
 @property  unsigned int threadStatus
 @property  NSString *lastAccessoryPairingState
 @property  NSString *longestPairingState
 @property  double longestPairingProgressStateDurationInMilliseconds
 @property  BOOL accessorySupportsWoL
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAccessoryPairingEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]
  +[HMDAccessoryPairingEvent pairingAccessoryWithDescription:home:]
  +[HMDAccessoryPairingEvent pairingAccessory:home:]
  +[HMDAccessoryPairingEvent removingAccessory:hapAccessory:]

  // instance methods
  -[HMDAccessoryPairingEvent accessoryUUID]
  -[HMDAccessoryPairingEvent linkType]
  -[HMDAccessoryPairingEvent setAccessoryCategory:]
  -[HMDAccessoryPairingEvent appIdentifier]
  -[HMDAccessoryPairingEvent eventName]
  -[HMDAccessoryPairingEvent retryCount]
  -[HMDAccessoryPairingEvent setRetryCount:]
  -[HMDAccessoryPairingEvent accessoryCategory]
  -[HMDAccessoryPairingEvent .cxx_destruct]
  -[HMDAccessoryPairingEvent setLinkType:]
  -[HMDAccessoryPairingEvent setAppIdentifier:]
  -[HMDAccessoryPairingEvent setAccessoryUUID:]
  -[HMDAccessoryPairingEvent certificationStatus]
  -[HMDAccessoryPairingEvent setCertificationStatus:]
  -[HMDAccessoryPairingEvent accessoryServerIdentifier]
  -[HMDAccessoryPairingEvent setAccessoryServerIdentifier:]
  -[HMDAccessoryPairingEvent communicationProtocol]
  -[HMDAccessoryPairingEvent setAuthenticationMethod:]
  -[HMDAccessoryPairingEvent accessoryModel]
  -[HMDAccessoryPairingEvent setAccessoryModel:]
  -[HMDAccessoryPairingEvent primaryServiceType]
  -[HMDAccessoryPairingEvent isWacLegacy]
  -[HMDAccessoryPairingEvent setWacLegacy:]
  -[HMDAccessoryPairingEvent serializedEvent]
  -[HMDAccessoryPairingEvent authMethod]
  -[HMDAccessoryPairingEvent setAuthMethod:]
  -[HMDAccessoryPairingEvent submitAtDate:]
  -[HMDAccessoryPairingEvent AWDMessageType]
  -[HMDAccessoryPairingEvent metricForAWD]
  -[HMDAccessoryPairingEvent setPrimaryServiceType:]
  -[HMDAccessoryPairingEvent accessoryManufacturer]
  -[HMDAccessoryPairingEvent setCommunicationProtocol:]
  -[HMDAccessoryPairingEvent initWithUnpairedAccessory:pairedAccessory:hapAccessory:home:isAddOperation:]
  -[HMDAccessoryPairingEvent initWithAccessoryDescription:home:]
  -[HMDAccessoryPairingEvent setAddedViaWAC:]
  -[HMDAccessoryPairingEvent pairedToServer:certificationStatus:addedViaWAC:legacyWAC:]
  -[HMDAccessoryPairingEvent updateEventPropertiesWithPairedAccessory:]
  -[HMDAccessoryPairingEvent _updateThreadPropertiesWithPairedAccessory:]
  -[HMDAccessoryPairingEvent accessoryAddRequestIdentifier]
  -[HMDAccessoryPairingEvent setAccessoryAddRequestIdentifier:]
  -[HMDAccessoryPairingEvent pairedAccessory]
  -[HMDAccessoryPairingEvent setPairedAccessory:]
  -[HMDAccessoryPairingEvent setAccessoryManufacturer:]
  -[HMDAccessoryPairingEvent vendorDetailsForReporting]
  -[HMDAccessoryPairingEvent setVendorDetailsForReporting:]
  -[HMDAccessoryPairingEvent isAddOperation]
  -[HMDAccessoryPairingEvent isAddViaWAC]
  -[HMDAccessoryPairingEvent setAddViaWAC:]
  -[HMDAccessoryPairingEvent didUseWiFiPPSK]
  -[HMDAccessoryPairingEvent setUsedWiFiPPSK:]
  -[HMDAccessoryPairingEvent didUseOwnershipProof]
  -[HMDAccessoryPairingEvent setUsedOwnershipProof:]
  -[HMDAccessoryPairingEvent isNetworkRouterAdd]
  -[HMDAccessoryPairingEvent setNetworkRouterAdd:]
  -[HMDAccessoryPairingEvent isNetworkRouterReplace]
  -[HMDAccessoryPairingEvent setNetworkRouterReplace:]
  -[HMDAccessoryPairingEvent isFirstHAPAccessoryInHome]
  -[HMDAccessoryPairingEvent setFirstHAPAccessoryInHome:]
  -[HMDAccessoryPairingEvent isFirstHAPAccessoryInAnyHome]
  -[HMDAccessoryPairingEvent setFirstHAPAccessoryInAnyHome:]
  -[HMDAccessoryPairingEvent isThreadAccessory]
  -[HMDAccessoryPairingEvent setThreadAccessory:]
  -[HMDAccessoryPairingEvent isBTCommissioned]
  -[HMDAccessoryPairingEvent setBtCommissioned:]
  -[HMDAccessoryPairingEvent threadCommissioningError]
  -[HMDAccessoryPairingEvent setThreadCommissioningError:]
  -[HMDAccessoryPairingEvent threadCommissioningDuration]
  -[HMDAccessoryPairingEvent setThreadCommissioningDuration:]
  -[HMDAccessoryPairingEvent threadCapabilities]
  -[HMDAccessoryPairingEvent setThreadCapabilities:]
  -[HMDAccessoryPairingEvent threadStatus]
  -[HMDAccessoryPairingEvent setThreadStatus:]
  -[HMDAccessoryPairingEvent lastAccessoryPairingState]
  -[HMDAccessoryPairingEvent setLastAccessoryPairingState:]
  -[HMDAccessoryPairingEvent longestPairingState]
  -[HMDAccessoryPairingEvent setLongestPairingState:]
  -[HMDAccessoryPairingEvent longestPairingProgressStateDurationInMilliseconds]
  -[HMDAccessoryPairingEvent setLongestPairingProgressStateDurationInMilliseconds:]
  -[HMDAccessoryPairingEvent accessorySupportsWoL]
  -[HMDAccessoryPairingEvent vendorDetailsForCoreAnalytics]
  -[HMDAccessoryPairingEvent setVendorDetailsForCoreAnalytics:]


HMDConfigurationMessageFilter : HMFMessageFilter
  // class methods
  +[HMDConfigurationMessageFilter filterMessage:withPolicies:error:]


HMDMRAVEndpoint : HMFObject
 @property  ^v mravEndpoint

  // instance methods
  -[HMDMRAVEndpoint attributeDescriptions]
  -[HMDMRAVEndpoint dealloc]
  -[HMDMRAVEndpoint initWithMRAVEndpoint:]
  -[HMDMRAVEndpoint isEqual:]
  -[HMDMRAVEndpoint mravEndpoint]


HMDXPCMessageSendPolicy : HMFObject <NSCopying>
  // instance methods
  -[HMDXPCMessageSendPolicy copyWithZone:]
  -[HMDXPCMessageSendPolicy isEqual:]
  -[HMDXPCMessageSendPolicy canSendWithPolicyParameters:]


HMDHomePodSetupLatencyLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  double setupLatency
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDHomePodSetupLatencyLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDHomePodSetupLatencyLogEvent eventName]
  -[HMDHomePodSetupLatencyLogEvent serializedEvent]
  -[HMDHomePodSetupLatencyLogEvent initWithSetupLatency:]
  -[HMDHomePodSetupLatencyLogEvent setupLatency]


HMDDefaultResidentDeviceManagerLegacyDataSource : NSObject <HMDResidentDeviceManagerLegacyDataSource>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSNotificationCenter *notificationCenter
 @property  HMDAppleAccountManager *appleAccountManager
 @property  BOOL isResidentCapable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDDefaultResidentDeviceManagerLegacyDataSource notificationCenter]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource .cxx_destruct]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource queue]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource init]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource isResidentCapable]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource appleAccountManager]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource logIdentifierForHome:]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource createElectionAddOnWithContext:]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource createResidentDeviceWithModel:]
  -[HMDDefaultResidentDeviceManagerLegacyDataSource createInitialReachabilityManagerWithUUID:]


HMDResidentDeviceManagerLegacy : HMFObject <HMDPrimaryResidentElectionAddOnDelegate, HMDResidentDeviceManagerContext, NSSecureCoding, HMDResidentDeviceManager>
 @property  <HMDResidentDeviceManagerLegacyDataSource> *dataSource
 @property  NSString *logIdentifier
 @property  NSHashTable *devicePreferenceDataSources
 @property  NSNotificationCenter *notificationCenter
 @property  HMDHomePrimaryResidentInitialReachabilityManager *primaryResidentInitialReachabilityManager
 @property  HMFPromise *cloudReadyPromise
 @property  HMDPrimaryElectionLegacyAddOn *legacyElection
 @property  HMDPrimaryElectionCoordinationAddOn *localNetworkElection
 @property  BOOL firstLegacyFetch
 @property  BOOL firstHomeManagerZoneFetch
 @property  BOOL firstHomeZoneFetch
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isResidentSupported
 @property  BOOL isResidentEnabled
 @property  BOOL isOwnerUser
 @property  HMDResidentDevice *currentResidentDevice
 @property  HMDResidentDevice *primaryResidentDevice
 @property  NSArray *availableResidentDevices
 @property  BOOL isCurrentDeviceAvailableResident
 @property  HMDHome *home
 @property  HMDMessageDispatcher *messageDispatcher
 @property  HMFFuture *cloudReady
 @property  NSObject<OS_dispatch_queue> *queue
 @property  long long atHomeLevel
 @property  <HMDResidentDeviceManagerDelegate> *delegate
 @property  NSArray *residentDevices
 @property  BOOL residentAvailable
 @property  BOOL currentDeviceAvailableResident
 @property  BOOL currentDevicePrimaryResident
 @property  BOOL currentDeviceConfirmedPrimaryResident
 @property  HMDDevice *confirmedPrimaryResidentDevice
 @property  BOOL isResidentElectionV2Enabled
 @property  BOOL hasTrustZoneCapableResident
 @property  NSUUID *primaryResidentUUID
 @property  BOOL residentSupported
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDResidentDeviceManagerLegacy supportsSecureCoding]
  +[HMDResidentDeviceManagerLegacy shortDescription]
  +[HMDResidentDeviceManagerLegacy logCategory]
  +[HMDResidentDeviceManagerLegacy hasMessageReceiverChildren]

  // instance methods
  -[HMDResidentDeviceManagerLegacy addDataSource:]
  -[HMDResidentDeviceManagerLegacy dumpState]
  -[HMDResidentDeviceManagerLegacy notificationCenter]
  -[HMDResidentDeviceManagerLegacy home]
  -[HMDResidentDeviceManagerLegacy initWithDataSource:]
  -[HMDResidentDeviceManagerLegacy logIdentifier]
  -[HMDResidentDeviceManagerLegacy dataSource]
  -[HMDResidentDeviceManagerLegacy setDelegate:]
  -[HMDResidentDeviceManagerLegacy encodeWithCoder:]
  -[HMDResidentDeviceManagerLegacy delegate]
  -[HMDResidentDeviceManagerLegacy _run]
  -[HMDResidentDeviceManagerLegacy run]
  -[HMDResidentDeviceManagerLegacy dealloc]
  -[HMDResidentDeviceManagerLegacy .cxx_destruct]
  -[HMDResidentDeviceManagerLegacy messageTargetUUID]
  -[HMDResidentDeviceManagerLegacy shortDescription]
  -[HMDResidentDeviceManagerLegacy invalidate]
  -[HMDResidentDeviceManagerLegacy queue]
  -[HMDResidentDeviceManagerLegacy messageReceiveQueue]
  -[HMDResidentDeviceManagerLegacy messageDispatcher]
  -[HMDResidentDeviceManagerLegacy init]
  -[HMDResidentDeviceManagerLegacy initWithCoder:]
  -[HMDResidentDeviceManagerLegacy setHome:]
  -[HMDResidentDeviceManagerLegacy descriptionWithPointer:]
  -[HMDResidentDeviceManagerLegacy _registerForMessages]
  -[HMDResidentDeviceManagerLegacy isOwnerUser]
  -[HMDResidentDeviceManagerLegacy residentDevices]
  -[HMDResidentDeviceManagerLegacy transactionObjectUpdated:newValues:message:]
  -[HMDResidentDeviceManagerLegacy transactionObjectRemoved:message:]
  -[HMDResidentDeviceManagerLegacy isCurrentDevicePrimaryResident]
  -[HMDResidentDeviceManagerLegacy isResidentSupported]
  -[HMDResidentDeviceManagerLegacy confirmedPrimaryResidentDevice]
  -[HMDResidentDeviceManagerLegacy isCurrentDeviceConfirmedPrimaryResident]
  -[HMDResidentDeviceManagerLegacy atHomeLevel]
  -[HMDResidentDeviceManagerLegacy isCurrentDeviceAvailableResident]
  -[HMDResidentDeviceManagerLegacy isResidentAvailable]
  -[HMDResidentDeviceManagerLegacy isResidentEnabled]
  -[HMDResidentDeviceManagerLegacy isResidentElectionV2Enabled]
  -[HMDResidentDeviceManagerLegacy _handleCloudZoneReadyNotification:]
  -[HMDResidentDeviceManagerLegacy handleCurrentDeviceChanged:]
  -[HMDResidentDeviceManagerLegacy handleResidentDeviceIsReachable:]
  -[HMDResidentDeviceManagerLegacy handleResidentDeviceIsNotReachable:]
  -[HMDResidentDeviceManagerLegacy handleHomeUpdatedAccessories:]
  -[HMDResidentDeviceManagerLegacy handleDeviceUpdated:]
  -[HMDResidentDeviceManagerLegacy _handleResidentDeviceUpdateEnabled:]
  -[HMDResidentDeviceManagerLegacy primaryElectionAddOn:didElectPrimaryResident:confirmed:electionLogEvent:]
  -[HMDResidentDeviceManagerLegacy primaryElectionAddOn:didFailToElectWithError:]
  -[HMDResidentDeviceManagerLegacy primaryElectionAddOn:didUpdateResidentDevice:]
  -[HMDResidentDeviceManagerLegacy primaryElectionAddOn:didUpdateActiveNodes:]
  -[HMDResidentDeviceManagerLegacy residentDeviceForDevice:]
  -[HMDResidentDeviceManagerLegacy currentResidentDevice]
  -[HMDResidentDeviceManagerLegacy primaryResidentDevice]
  -[HMDResidentDeviceManagerLegacy availableResidentDevices]
  -[HMDResidentDeviceManagerLegacy cloudReady]
  -[HMDResidentDeviceManagerLegacy configureWithHome:messageDispatcher:]
  -[HMDResidentDeviceManagerLegacy removeResidentDevice:]
  -[HMDResidentDeviceManagerLegacy atHomeLevelChanged:]
  -[HMDResidentDeviceManagerLegacy updateResidentAvailability]
  -[HMDResidentDeviceManagerLegacy notifyClientsOfUpdatedResidentDevice:]
  -[HMDResidentDeviceManagerLegacy electResidentDevice:]
  -[HMDResidentDeviceManagerLegacy confirmAsResident]
  -[HMDResidentDeviceManagerLegacy confirmOnAvailability]
  -[HMDResidentDeviceManagerLegacy foundNewPrimaryResident:]
  -[HMDResidentDeviceManagerLegacy updatePrimaryResidentWithUUID:actions:]
  -[HMDResidentDeviceManagerLegacy confirmWithCompletionHandler:]
  -[HMDResidentDeviceManagerLegacy hasTrustZoneCapableResident]
  -[HMDResidentDeviceManagerLegacy primaryResidentUUID]
  -[HMDResidentDeviceManagerLegacy setResidentSupported:]
  -[HMDResidentDeviceManagerLegacy _setupSessionWithPrimaryResidentDevice]
  -[HMDResidentDeviceManagerLegacy _teardownSessionWithPrimaryResidentDevice]
  -[HMDResidentDeviceManagerLegacy hasFirstLegacyFetch]
  -[HMDResidentDeviceManagerLegacy setFirstLegacyFetch:]
  -[HMDResidentDeviceManagerLegacy hasFirstHomeManagerZoneFetch]
  -[HMDResidentDeviceManagerLegacy setFirstHomeManagerZoneFetch:]
  -[HMDResidentDeviceManagerLegacy hasFirstHomeZoneFetch]
  -[HMDResidentDeviceManagerLegacy setFirstHomeZoneFetch:]
  -[HMDResidentDeviceManagerLegacy residentWithUUID:]
  -[HMDResidentDeviceManagerLegacy ourSelf]
  -[HMDResidentDeviceManagerLegacy _fixUpRemoteResidentDevice:existingResidentDevice:]
  -[HMDResidentDeviceManagerLegacy _shouldEnableCoordinationElection]
  -[HMDResidentDeviceManagerLegacy _stopCoordinationElectionWithReason:]
  -[HMDResidentDeviceManagerLegacy _stopLegacyElectionWithReason:]
  -[HMDResidentDeviceManagerLegacy _startElectionAddOn]
  -[HMDResidentDeviceManagerLegacy _addResidentDevice:]
  -[HMDResidentDeviceManagerLegacy _removeResidentDevice:]
  -[HMDResidentDeviceManagerLegacy _removeResidentDevice:reason:]
  -[HMDResidentDeviceManagerLegacy _updateResidentAvailability]
  -[HMDResidentDeviceManagerLegacy setResidentAvailable:]
  -[HMDResidentDeviceManagerLegacy notifyResidentAvailable:]
  -[HMDResidentDeviceManagerLegacy notifyUpdatedPrimaryResident:]
  -[HMDResidentDeviceManagerLegacy _sendResidentDeviceNotificationWithName:forResidentDevice:]
  -[HMDResidentDeviceManagerLegacy __currentDeviceUpdated:completion:]
  -[HMDResidentDeviceManagerLegacy _electResidentDevice:]
  -[HMDResidentDeviceManagerLegacy _updateReachability:forResidentDevice:]
  -[HMDResidentDeviceManagerLegacy _verifyCurrentResidentDevice]
  -[HMDResidentDeviceManagerLegacy _createResidentDeviceWithModel:]
  -[HMDResidentDeviceManagerLegacy _removeResidentDeviceWithModel:message:]
  -[HMDResidentDeviceManagerLegacy devicePreferenceDataSources]
  -[HMDResidentDeviceManagerLegacy primaryResidentInitialReachabilityManager]
  -[HMDResidentDeviceManagerLegacy setPrimaryResidentInitialReachabilityManager:]
  -[HMDResidentDeviceManagerLegacy cloudReadyPromise]
  -[HMDResidentDeviceManagerLegacy setCloudReadyPromise:]
  -[HMDResidentDeviceManagerLegacy legacyElection]
  -[HMDResidentDeviceManagerLegacy setLegacyElection:]
  -[HMDResidentDeviceManagerLegacy localNetworkElection]
  -[HMDResidentDeviceManagerLegacy setLocalNetworkElection:]


HMDCameraSnapshotRemoteRelayStream : HMFObject <HMDCameraGetSnapshotProtocol, HMDCameraSnapshotSenderProtocol, HMDCameraSnapshotReceiverProtocol, HMDCameraSnapshotRemoteStreamSenderDelegate, HMDCameraSnapshotRemoteRelayReceiverDelegate, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraSnapshotRemoteStreamSender *streamSender
 @property  HMDCameraSnapshotRemoteRelayReceiver *relayReceiver
 @property  <HMDCameraSnapshotRemoteRelayStreamDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotRemoteRelayStream logCategory]

  // instance methods
  -[HMDCameraSnapshotRemoteRelayStream logIdentifier]
  -[HMDCameraSnapshotRemoteRelayStream workQueue]
  -[HMDCameraSnapshotRemoteRelayStream delegate]
  -[HMDCameraSnapshotRemoteRelayStream dealloc]
  -[HMDCameraSnapshotRemoteRelayStream .cxx_destruct]
  -[HMDCameraSnapshotRemoteRelayStream delegateQueue]
  -[HMDCameraSnapshotRemoteRelayStream snapshotStreamSender:didStartCaptureImage:sessionID:]
  -[HMDCameraSnapshotRemoteRelayStream snapshotStreamSender:didCompleteSendImage:sessionID:]
  -[HMDCameraSnapshotRemoteRelayStream getSnapshot:]
  -[HMDCameraSnapshotRemoteRelayStream snapShotTransferComplete]
  -[HMDCameraSnapshotRemoteRelayStream _callDidStartCaptureImageDelegate:]
  -[HMDCameraSnapshotRemoteRelayStream _callDidCompleteSendImageDelegate:]
  -[HMDCameraSnapshotRemoteRelayStream relayReceiver]
  -[HMDCameraSnapshotRemoteRelayStream _sendImageSendFailure:]
  -[HMDCameraSnapshotRemoteRelayStream snapShotSendFailed:]
  -[HMDCameraSnapshotRemoteRelayStream snapshotRelayReceiver:didStartGettingImage:sessionID:]
  -[HMDCameraSnapshotRemoteRelayStream snapshotRelayReceiver:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotRemoteRelayStream initWithSessionID:workQueue:device:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:residentMessageHandler:]
  -[HMDCameraSnapshotRemoteRelayStream streamSender]


HMDCameraProfileSettingsModel : HMBModel
 @property  NSNumber *versionField
 @property  NSNumber *accessModeAtHomeField
 @property  NSNumber *accessModeNotAtHomeField
 @property  NSNumber *recordingEventTriggersField
 @property  NSNumber *accessModeIndicatorEnabledField
 @property  NSNumber *nightVisionModeEnabledField
 @property  NSNumber *snapshotsAllowedField
 @property  NSNumber *periodicSnapshotsAllowedField
 @property  NSNumber *recordingAudioEnabledField
 @property  NSNumber *accessModeChangeNotificationEnabledField
 @property  NSNumber *reachabilityEventNotificationEnabledField
 @property  NSData *smartBulletinBoardNotificationDataField
 @property  NSData *activityZonesField
 @property  NSNumber *activityZonesIncludedForSignificantEventDetectionField
 @property  unsigned long currentAccessMode
 @property  BOOL hasAnyNotificationFieldsSet
 @property  unsigned long mostPrivateAccessMode
 @property  long long version
 @property  unsigned long accessModeAtHome
 @property  unsigned long accessModeNotAtHome
 @property  unsigned long recordingEventTriggers
 @property  BOOL accessModeIndicatorEnabled
 @property  BOOL nightVisionModeEnabled
 @property  BOOL snapshotsAllowed
 @property  BOOL periodicSnapshotsAllowed
 @property  BOOL recordingAudioEnabled
 @property  BOOL cameraManuallyDisabled
 @property  NSSet *activityZones
 @property  BOOL activityZonesIncludedForSignificantEventDetection
 @property  BOOL accessModeChangeNotificationEnabled
 @property  HMDBulletinBoardNotification *smartBulletinBoardNotification
 @property  BOOL reachabilityEventNotificationEnabled

  // class methods
  +[HMDCameraProfileSettingsModel hmbProperties]

  // instance methods
  -[HMDCameraProfileSettingsModel version]
  -[HMDCameraProfileSettingsModel setVersion:]
  -[HMDCameraProfileSettingsModel accessModeChangeNotificationEnabled]
  -[HMDCameraProfileSettingsModel reachabilityEventNotificationEnabled]
  -[HMDCameraProfileSettingsModel accessModeAtHome]
  -[HMDCameraProfileSettingsModel accessModeNotAtHome]
  -[HMDCameraProfileSettingsModel currentAccessMode]
  -[HMDCameraProfileSettingsModel recordingEventTriggers]
  -[HMDCameraProfileSettingsModel activityZones]
  -[HMDCameraProfileSettingsModel cameraManuallyDisabled]
  -[HMDCameraProfileSettingsModel activityZonesIncludedForSignificantEventDetection]
  -[HMDCameraProfileSettingsModel snapshotsAllowed]
  -[HMDCameraProfileSettingsModel accessModeIndicatorEnabled]
  -[HMDCameraProfileSettingsModel nightVisionModeEnabled]
  -[HMDCameraProfileSettingsModel recordingAudioEnabled]
  -[HMDCameraProfileSettingsModel setAccessModeAtHome:]
  -[HMDCameraProfileSettingsModel setAccessModeNotAtHome:]
  -[HMDCameraProfileSettingsModel setCurrentAccessMode:]
  -[HMDCameraProfileSettingsModel setRecordingEventTriggers:]
  -[HMDCameraProfileSettingsModel setSnapshotsAllowed:]
  -[HMDCameraProfileSettingsModel setPeriodicSnapshotsAllowed:]
  -[HMDCameraProfileSettingsModel setAccessModeIndicatorEnabled:]
  -[HMDCameraProfileSettingsModel setNightVisionModeEnabled:]
  -[HMDCameraProfileSettingsModel setRecordingAudioEnabled:]
  -[HMDCameraProfileSettingsModel setCameraManuallyDisabled:]
  -[HMDCameraProfileSettingsModel setActivityZones:]
  -[HMDCameraProfileSettingsModel setActivityZonesIncludedForSignificantEventDetection:]
  -[HMDCameraProfileSettingsModel periodicSnapshotsAllowed]
  -[HMDCameraProfileSettingsModel hasAnyNotificationFieldsSet]
  -[HMDCameraProfileSettingsModel mostPrivateAccessMode]
  -[HMDCameraProfileSettingsModel smartBulletinBoardNotification]


HMDCameraProfileSettingsDerivedPropertiesModel : HMBModel
 @property  NSNumber *currentAccessModeField
 @property  NSNumber *currentAccessModeChangeReasonField
 @property  unsigned long currentAccessMode
 @property  long long currentAccessModeChangeReason
 @property  NSDate *currentAccessModeChangeDate

  // class methods
  +[HMDCameraProfileSettingsDerivedPropertiesModel hmbProperties]

  // instance methods
  -[HMDCameraProfileSettingsDerivedPropertiesModel currentAccessMode]
  -[HMDCameraProfileSettingsDerivedPropertiesModel setCurrentAccessMode:]
  -[HMDCameraProfileSettingsDerivedPropertiesModel setCurrentAccessModeChangeReason:]
  -[HMDCameraProfileSettingsDerivedPropertiesModel currentAccessModeChangeReason]


HMDCameraSupportedConfigurationCache : HMFObject
 @property  BOOL valid
 @property  HMDSupportedVideoStreamConfiguration *supportedVideoStreamConfiguration
 @property  HMDSupportedAudioStreamConfiguration *supportedAudioStreamConfiguration
 @property  HMDSupportedRTPConfiguration *supportedRTPConfiguration

  // instance methods
  -[HMDCameraSupportedConfigurationCache isValid]
  -[HMDCameraSupportedConfigurationCache .cxx_destruct]
  -[HMDCameraSupportedConfigurationCache supportedAudioStreamConfiguration]
  -[HMDCameraSupportedConfigurationCache supportedVideoStreamConfiguration]
  -[HMDCameraSupportedConfigurationCache setSupportedVideoStreamConfiguration:]
  -[HMDCameraSupportedConfigurationCache setSupportedAudioStreamConfiguration:]
  -[HMDCameraSupportedConfigurationCache supportedRTPConfiguration]
  -[HMDCameraSupportedConfigurationCache setSupportedRTPConfiguration:]


HMDLightProfileNaturalLightingActionModel : HMDActionModel
 @property  NSNumber *naturalLightingEnabledField
 @property  NSUUID *lightProfileUUID
 @property  BOOL naturalLightingEnabled
 @property  NSUUID *accessoryUUID
 @property  NSSet *serviceUUIDs

  // class methods
  +[HMDLightProfileNaturalLightingActionModel properties]

  // instance methods
  -[HMDLightProfileNaturalLightingActionModel isNaturalLightingEnabled]
  -[HMDLightProfileNaturalLightingActionModel setNaturalLightingEnabled:]
  -[HMDLightProfileNaturalLightingActionModel dependentUUIDs]


HMDSiriSyncEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long duration
 @property  NSArray *notificationReasons
 @property  unsigned long lastSyncedConfigurationVersion
 @property  unsigned long configurationVersion
 @property  unsigned long serverConfigurationVersion

  // class methods
  +[HMDSiriSyncEvent syncRequestWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:]

  // instance methods
  -[HMDSiriSyncEvent configurationVersion]
  -[HMDSiriSyncEvent .cxx_destruct]
  -[HMDSiriSyncEvent duration]
  -[HMDSiriSyncEvent AWDMessageType]
  -[HMDSiriSyncEvent metricForAWD]
  -[HMDSiriSyncEvent lastSyncedConfigurationVersion]
  -[HMDSiriSyncEvent initWithDuration:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:notificationReasons:]
  -[HMDSiriSyncEvent notificationReasons]
  -[HMDSiriSyncEvent serverConfigurationVersion]


HMDSharedHomeUpdateHandler : HMFObject <HMDSharedHomeUpdateSessionDelegate, HMFLogging, HMFDumpState>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL firstFetchComplete
 @property  BOOL suspended
 @property  BOOL pendingRequestDataFromResident
 @property  HMDSharedHomeUpdateSession *pendingRequestDataFromResidentSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSharedHomeUpdateHandler logCategory]

  // instance methods
  -[HMDSharedHomeUpdateHandler dumpState]
  -[HMDSharedHomeUpdateHandler home]
  -[HMDSharedHomeUpdateHandler logIdentifier]
  -[HMDSharedHomeUpdateHandler isSuspended]
  -[HMDSharedHomeUpdateHandler workQueue]
  -[HMDSharedHomeUpdateHandler setWorkQueue:]
  -[HMDSharedHomeUpdateHandler pause]
  -[HMDSharedHomeUpdateHandler .cxx_destruct]
  -[HMDSharedHomeUpdateHandler resume]
  -[HMDSharedHomeUpdateHandler setSuspended:]
  -[HMDSharedHomeUpdateHandler setHome:]
  -[HMDSharedHomeUpdateHandler registerForMessages]
  -[HMDSharedHomeUpdateHandler configureWithHome:]
  -[HMDSharedHomeUpdateHandler residentsChanged:]
  -[HMDSharedHomeUpdateHandler handleHomeCloudZoneReadyNotification:]
  -[HMDSharedHomeUpdateHandler didCompleteHomeUpdateSession:withError:]
  -[HMDSharedHomeUpdateHandler requestHomeDataSync]
  -[HMDSharedHomeUpdateHandler _evaluateNeedForSync]
  -[HMDSharedHomeUpdateHandler receivedHomeDataFromSourceVersion:forceUpdateVersion:completion:]
  -[HMDSharedHomeUpdateHandler _receivedHomeDataFromSourceVersion:forceUpdateVersion:completion:]
  -[HMDSharedHomeUpdateHandler pendingRequestDataFromResident]
  -[HMDSharedHomeUpdateHandler setPendingRequestDataFromResidentSession:]
  -[HMDSharedHomeUpdateHandler pendingRequestDataFromResidentSession]
  -[HMDSharedHomeUpdateHandler firstFetchComplete]
  -[HMDSharedHomeUpdateHandler setFirstFetchComplete:]
  -[HMDSharedHomeUpdateHandler setPendingRequestDataFromResident:]


AWDHomeKitHomeSharing : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasResponseType
 @property  int responseType
 @property  BOOL hasStage
 @property  int stage

  // instance methods
  -[AWDHomeKitHomeSharing stage]
  -[AWDHomeKitHomeSharing hasErrorCode]
  -[AWDHomeKitHomeSharing setErrorCode:]
  -[AWDHomeKitHomeSharing errorCode]
  -[AWDHomeKitHomeSharing setTimestamp:]
  -[AWDHomeKitHomeSharing copyTo:]
  -[AWDHomeKitHomeSharing setHasErrorCode:]
  -[AWDHomeKitHomeSharing mergeFrom:]
  -[AWDHomeKitHomeSharing setHasTimestamp:]
  -[AWDHomeKitHomeSharing dictionaryRepresentation]
  -[AWDHomeKitHomeSharing hasTimestamp]
  -[AWDHomeKitHomeSharing copyWithZone:]
  -[AWDHomeKitHomeSharing setStage:]
  -[AWDHomeKitHomeSharing timestamp]
  -[AWDHomeKitHomeSharing readFrom:]
  -[AWDHomeKitHomeSharing writeTo:]
  -[AWDHomeKitHomeSharing isEqual:]
  -[AWDHomeKitHomeSharing responseType]
  -[AWDHomeKitHomeSharing setResponseType:]
  -[AWDHomeKitHomeSharing setHasStage:]
  -[AWDHomeKitHomeSharing hasStage]
  -[AWDHomeKitHomeSharing stageAsString:]
  -[AWDHomeKitHomeSharing StringAsStage:]
  -[AWDHomeKitHomeSharing setHasResponseType:]
  -[AWDHomeKitHomeSharing hasResponseType]
  -[AWDHomeKitHomeSharing responseTypeAsString:]
  -[AWDHomeKitHomeSharing StringAsResponseType:]


HMDService : HMFObject <HMDBulletinIdentifiers, NSSecureCoding, HMFDumpState, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver>
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSNumber *instanceID
 @property  BOOL hidden
 @property  BOOL primary
 @property  unsigned long serviceProperties
 @property  NSArray *linkedServices
 @property  NSArray *characteristics
 @property  NSUUID *cachedAccessoryUUID
 @property  <HMDServiceOwner> *owner
 @property  NSString *serviceSubtype
 @property  NSNumber *configurationState
 @property  NSNumber *labelIndex
 @property  NSNumber *labelNamespace
 @property  NSString *configuredName
 @property  NSString *defaultName
 @property  NSString *expectedConfiguredName
 @property  NSString *lastSeenConfiguredName
 @property  NSNumber *lastKnownDiscoveryMode
 @property  NSNumber *lastKnownOperatingState
 @property  NSNumber *lastKnownOperatingStateAbnormalReasons
 @property  NSNumber *mediaSourceIdentifier
 @property  NSArray *mediaSourceDisplayOrder
 @property  NSMutableDictionary *deviceLastRequestPresenceDateMap
 @property  NSString *logID
 @property  NSString *providedName
 @property  HMDHAPAccessory *accessory
 @property  NSString *name
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  NSString *type
 @property  NSString *associatedServiceType
 @property  NSString *serviceType
 @property  HMDApplicationData *appData
 @property  HMDBulletinBoardNotification *bulletinBoardNotification
 @property  NSString *serviceIdentifier
 @property  BOOL custom
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDService supportsSecureCoding]
  +[HMDService logCategory]
  +[HMDService hasMessageReceiverChildren]
  +[HMDService generateUUIDWithAccessoryUUID:serviceID:]
  +[HMDService validateProvidedName:]
  +[HMDService processUpdateForCharacteristicType:value:serviceType:service:serviceTransactionGetter:accessory:accessoryTransaction:accessoryTransactionChanged:]
  +[HMDService _processUpdateOnPowerManagementServiceForCharacteristicType:value:serviceType:accessory:accessoryTransaction:]
  +[HMDService _parseOperatingStateResponseValue:intoState:abnormalReasons:]

  // instance methods
  -[HMDService dumpState]
  -[HMDService owner]
  -[HMDService accessory]
  -[HMDService setServiceProperties:]
  -[HMDService setOwner:]
  -[HMDService instanceID]
  -[HMDService home]
  -[HMDService isPrimary]
  -[HMDService serviceProperties]
  -[HMDService serviceIdentifier]
  -[HMDService logIdentifier]
  -[HMDService setPrimary:]
  -[HMDService encodeWithCoder:]
  -[HMDService workQueue]
  -[HMDService type]
  -[HMDService setServiceType:]
  -[HMDService setLinkedServices:]
  -[HMDService setCharacteristics:]
  -[HMDService setWorkQueue:]
  -[HMDService dealloc]
  -[HMDService uuid]
  -[HMDService .cxx_destruct]
  -[HMDService messageTargetUUID]
  -[HMDService setInstanceID:]
  -[HMDService characteristics]
  -[HMDService contextID]
  -[HMDService serviceType]
  -[HMDService setName:]
  -[HMDService isHidden]
  -[HMDService name]
  -[HMDService setHidden:]
  -[HMDService linkedServices]
  -[HMDService messageReceiveQueue]
  -[HMDService messageDispatcher]
  -[HMDService urlString]
  -[HMDService init]
  -[HMDService initWithCoder:]
  -[HMDService defaultName]
  -[HMDService configurationState]
  -[HMDService isCustom]
  -[HMDService setConfiguredName:]
  -[HMDService configuredName]
  -[HMDService bulletinBoardNotification]
  -[HMDService logID]
  -[HMDService _registerForMessages]
  -[HMDService setDefaultName:]
  -[HMDService mediaSourceDisplayOrder]
  -[HMDService setMediaSourceDisplayOrder:]
  -[HMDService associatedServiceType]
  -[HMDService serviceSubtype]
  -[HMDService setServiceSubtype:]
  -[HMDService setConfigurationState:]
  -[HMDService lastKnownOperatingState]
  -[HMDService lastKnownOperatingStateAbnormalReasons]
  -[HMDService mediaSourceIdentifier]
  -[HMDService setMediaSourceIdentifier:]
  -[HMDService lastKnownDiscoveryMode]
  -[HMDService setLastKnownDiscoveryMode:]
  -[HMDService setAppData:]
  -[HMDService appData]
  -[HMDService providedName]
  -[HMDService transactionObjectUpdated:newValues:message:]
  -[HMDService transactionObjectRemoved:message:]
  -[HMDService modelObjectWithChangeType:]
  -[HMDService backingStoreObjects:]
  -[HMDService contextSPIUniqueIdentifier]
  -[HMDService configureWithWorkQueue:messageDispatcher:]
  -[HMDService configureBulletinNotification]
  -[HMDService setBulletinBoardNotification:]
  -[HMDService _handleSetAppData:]
  -[HMDService spiClientIdentifier]
  -[HMDService transactionWithObjectChangeType:]
  -[HMDService getConfiguredName]
  -[HMDService setProvidedName:]
  -[HMDService appDataUpdated:message:]
  -[HMDService appDataRemoved:message:]
  -[HMDService shouldEnableDaemonRelaunch]
  -[HMDService findCharacteristic:]
  -[HMDService initWithTransaction:accessory:owner:]
  -[HMDService initWithAccessory:owner:instance:uuid:]
  -[HMDService _recalculateUUID]
  -[HMDService expectedConfiguredName]
  -[HMDService setExpectedConfiguredName:]
  -[HMDService lastSeenConfiguredName]
  -[HMDService setLastSeenConfiguredName:]
  -[HMDService configureWithService:accessory:]
  -[HMDService _sanitizeNameToWriteToAccessory:]
  -[HMDService configureWithService:accessory:shouldRead:added:]
  -[HMDService _createNotification]
  -[HMDService _supportsBulletinNotification]
  -[HMDService _shouldServiceBeHidden]
  -[HMDService _updateProvidedName:]
  -[HMDService isReadingRequiredForBTLEServiceCharacteristic:]
  -[HMDService gatherRequiredReadRequestsForceReadFWVersion:]
  -[HMDService _readRequiredCharacteristicValuesForceReadFWVersion:]
  -[HMDService findCharacteristicWithType:]
  -[HMDService _deriveDefaultName]
  -[HMDService _updateDefaultName]
  -[HMDService _checkIfDefaultNameChanged]
  -[HMDService nameChangedMessage]
  -[HMDService messagesForUpdatedRoom:]
  -[HMDService updateAssociatedServiceType:error:]
  -[HMDService getConfiguredNameForXPCClients]
  -[HMDService getLastSeenConfiguredName]
  -[HMDService updateLastKnownValues]
  -[HMDService shouldIncludePresenceForDeviceWithDestination:]
  -[HMDService updatePresenceRequestTimeForDeviceWithDestination:]
  -[HMDService _messagesForConfiguredNameChange]
  -[HMDService _saveForExpectedConfiguredNameUpdate]
  -[HMDService _saveForLastSeenConfiguredNameUpdate]
  -[HMDService _saveLastSeenAndExpectedConfiguredName:]
  -[HMDService _processTransactionForNameComponents:messagesToSendToAcccessory:result:]
  -[HMDService _transactionServiceUpdated:newValues:message:]
  -[HMDService updateCharacteristics:]
  -[HMDService isEmptyConfiguredNameAllowed]
  -[HMDService persistMediaSourceDisplayOrder:requestMessage:]
  -[HMDService updateMediaSourceDisplayOrder:requestMessage:]
  -[HMDService _createAndRunTransactionWithName:transaction:message:]
  -[HMDService populateModelObjectWithChangeType:version:]
  -[HMDService fillCharacteristicsInServiceBackingStoreObject:]
  -[HMDService _saveCurrentNameAsExpectedAndLastSeen:]
  -[HMDService _writeConfiguredNameToAccessory:]
  -[HMDService shouldUpdateLastSeenConfiguredName:]
  -[HMDService labelIndex]
  -[HMDService setLabelIndex:]
  -[HMDService labelNamespace]
  -[HMDService setLabelNamespace:]
  -[HMDService cachedAccessoryUUID]
  -[HMDService setCachedAccessoryUUID:]
  -[HMDService setLastKnownOperatingState:]
  -[HMDService setLastKnownOperatingStateAbnormalReasons:]
  -[HMDService deviceLastRequestPresenceDateMap]
  -[HMDService setDeviceLastRequestPresenceDateMap:]
  -[HMDService assistantObject]
  -[HMDService _serviceSubtypeFromLinkedServicesForServiceType:accessoryCategory:]


HMDServiceTransaction : HMDBackingStoreModelObject
 @property  NSNumber *instanceID
 @property  NSString *lastSeenConfiguredNameLocal
 @property  NSString *name
 @property  NSString *providedName
 @property  NSString *expectedConfiguredName
 @property  NSString *serviceType
 @property  NSString *associatedServiceType
 @property  NSString *serviceSubtype
 @property  NSNumber *labelIndex
 @property  NSNumber *labelNamespace
 @property  NSNumber *configurationState
 @property  NSArray *linkedServices
 @property  NSNumber *lastKnownDiscoveryMode
 @property  NSNumber *lastKnownOperatingState
 @property  NSNumber *lastKnownOperatingStateAbnormalReasons
 @property  NSNumber *mediaSourceIdentifier
 @property  NSArray *mediaSourceDisplayOrder
 @property  NSNumber *serviceProperties
 @property  NSArray *characteristics
 @property  NSObject<OS_dispatch_group> *configurationTracker
 @property  NSNumber *hidden
 @property  NSNumber *primary

  // class methods
  +[HMDServiceTransaction properties]

  // instance methods
  -[HMDServiceTransaction .cxx_destruct]
  -[HMDServiceTransaction configurationTracker]
  -[HMDServiceTransaction setConfigurationTracker:]
  -[HMDServiceTransaction lastSeenConfiguredNameLocal]
  -[HMDServiceTransaction setLastSeenConfiguredNameLocal:]


HMDAggregateRemoteMessageCountersLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *transportType
 @property  NSString *direction
 @property  NSString *deviceType
 @property  NSString *messageName
 @property  NSNumber *count
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAggregateRemoteMessageCountersLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]
  +[HMDAggregateRemoteMessageCountersLogEvent aggregateRemoteCountersLogEventWithMessageName:deviceType:transportType:direction:count:]

  // instance methods
  -[HMDAggregateRemoteMessageCountersLogEvent eventName]
  -[HMDAggregateRemoteMessageCountersLogEvent messageName]
  -[HMDAggregateRemoteMessageCountersLogEvent .cxx_destruct]
  -[HMDAggregateRemoteMessageCountersLogEvent deviceType]
  -[HMDAggregateRemoteMessageCountersLogEvent count]
  -[HMDAggregateRemoteMessageCountersLogEvent transportType]
  -[HMDAggregateRemoteMessageCountersLogEvent direction]
  -[HMDAggregateRemoteMessageCountersLogEvent init]
  -[HMDAggregateRemoteMessageCountersLogEvent serializedEvent]
  -[HMDAggregateRemoteMessageCountersLogEvent __initWithMessageName:deviceType:transportType:direction:count:]


HMDVideoStreamReconfigureEvent : HMFObject
 @property  unsigned long eventType
 @property  NSDate *timestamp

  // instance methods
  -[HMDVideoStreamReconfigureEvent initWithEventType:]
  -[HMDVideoStreamReconfigureEvent compare:]
  -[HMDVideoStreamReconfigureEvent .cxx_destruct]
  -[HMDVideoStreamReconfigureEvent eventType]
  -[HMDVideoStreamReconfigureEvent timestamp]
  -[HMDVideoStreamReconfigureEvent isEqual:]


HMDCameraRecordingLogEvent : HMMLogEvent
 @property  NSUUID *sessionID
 @property  unsigned long sequenceNumber
 @property  NSUUID *ephemeralCameraID
 @property  NSUUID *cameraID
 @property  unsigned long startTimestamp
 @property  unsigned long endTimestamp

  // instance methods
  -[HMDCameraRecordingLogEvent endTimestamp]
  -[HMDCameraRecordingLogEvent startTimestamp]
  -[HMDCameraRecordingLogEvent sessionID]
  -[HMDCameraRecordingLogEvent attributeDescriptions]
  -[HMDCameraRecordingLogEvent setSequenceNumber:]
  -[HMDCameraRecordingLogEvent .cxx_destruct]
  -[HMDCameraRecordingLogEvent sequenceNumber]
  -[HMDCameraRecordingLogEvent initWithSessionID:cameraID:sequenceNumber:]
  -[HMDCameraRecordingLogEvent ephemeralCameraID]
  -[HMDCameraRecordingLogEvent cameraID]


HMDCameraRecordingFragmentAnalyzedEvent : HMDCameraRecordingLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long analysisResultCode
 @property  NSUUID *clipModelID
 @property  int recordingReason

  // instance methods
  -[HMDCameraRecordingFragmentAnalyzedEvent attributeDescriptions]
  -[HMDCameraRecordingFragmentAnalyzedEvent .cxx_destruct]
  -[HMDCameraRecordingFragmentAnalyzedEvent AWDMessageType]
  -[HMDCameraRecordingFragmentAnalyzedEvent metricForAWD]
  -[HMDCameraRecordingFragmentAnalyzedEvent clipModelID]
  -[HMDCameraRecordingFragmentAnalyzedEvent initWithSessionID:cameraID:sequenceNumber:]
  -[HMDCameraRecordingFragmentAnalyzedEvent analysisResultCode]
  -[HMDCameraRecordingFragmentAnalyzedEvent setAnalysisResultCode:]
  -[HMDCameraRecordingFragmentAnalyzedEvent setClipModelID:]
  -[HMDCameraRecordingFragmentAnalyzedEvent recordingReason]
  -[HMDCameraRecordingFragmentAnalyzedEvent setRecordingReason:]


HMDCameraRecordingClipNotificationEvent : HMDCameraRecordingLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long recordingEventTriggers

  // instance methods
  -[HMDCameraRecordingClipNotificationEvent attributeDescriptions]
  -[HMDCameraRecordingClipNotificationEvent recordingEventTriggers]
  -[HMDCameraRecordingClipNotificationEvent AWDMessageType]
  -[HMDCameraRecordingClipNotificationEvent metricForAWD]
  -[HMDCameraRecordingClipNotificationEvent initWithSessionID:cameraID:sequenceNumber:recordingEventTriggers:]


HMDSharingDeviceDiscovery : HMFObject <HMDSharingDeviceDiscovery>
 @property  SFDeviceDiscovery *deviceDiscovery
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  unsigned long discoveryFlags
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDSharingDeviceDiscovery setDeviceLostHandler:]
  -[HMDSharingDeviceDiscovery setDeviceFoundHandler:]
  -[HMDSharingDeviceDiscovery dealloc]
  -[HMDSharingDeviceDiscovery setDeviceChangedHandler:]
  -[HMDSharingDeviceDiscovery .cxx_destruct]
  -[HMDSharingDeviceDiscovery stop]
  -[HMDSharingDeviceDiscovery setDispatchQueue:]
  -[HMDSharingDeviceDiscovery deviceFoundHandler]
  -[HMDSharingDeviceDiscovery deviceDiscovery]
  -[HMDSharingDeviceDiscovery deviceLostHandler]
  -[HMDSharingDeviceDiscovery dispatchQueue]
  -[HMDSharingDeviceDiscovery repairDevice:flags:completion:]
  -[HMDSharingDeviceDiscovery discoveryFlags]
  -[HMDSharingDeviceDiscovery setDeviceDiscovery:]
  -[HMDSharingDeviceDiscovery start]
  -[HMDSharingDeviceDiscovery setDiscoveryFlags:]
  -[HMDSharingDeviceDiscovery deviceChangedHandler]


HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload : HMFObject <HMFLogging, HMMessageEncoding>
 @property  NSString *accessoryIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload messageName]
  +[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload attributeDescriptions]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload initWithPayload:]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload .cxx_destruct]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload isEqual:]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload accessoryIdentifier]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload payloadCopy]
  -[HMDAppleMediaAccessoryModelIdentiferRequestMessagePayload initWithAccessoryIdentifier:]


HMDAppleAccountContext : HMFObject <HMFObject>
 @property  NSString *identifier
 @property  NSString *username
 @property  NSString *alternateDSID
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAppleAccountContext initWithAccount:]
  -[HMDAppleAccountContext identifier]
  -[HMDAppleAccountContext alternateDSID]
  -[HMDAppleAccountContext attributeDescriptions]
  -[HMDAppleAccountContext .cxx_destruct]
  -[HMDAppleAccountContext username]
  -[HMDAppleAccountContext isEqual:]
  -[HMDAppleAccountContext init]


HMDSettingAlgorithm : NSObject
  // class methods
  +[HMDSettingAlgorithm allSettingsFromRootGroup:]
  +[HMDSettingAlgorithm allGroupsFromRootGroup:]
  +[HMDSettingAlgorithm findChangedSettingsWithRootGroup:currentGroups:currentSettings:completion:]


HMDSnapshotFile : HMFObject <HMFLogging>
 @property  NSNumber *slotIdentifier
 @property  BOOL filled
 @property  NSString *directory
 @property  NSString *filePath
 @property  NSDate *snapshotTimestamp
 @property  NSNumber *aspectRatio
 @property  BOOL externalFilePath
 @property  NSData *encodedDataForIDSSend
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotFile logCategory]

  // instance methods
  -[HMDSnapshotFile logIdentifier]
  -[HMDSnapshotFile directory]
  -[HMDSnapshotFile aspectRatio]
  -[HMDSnapshotFile filePath]
  -[HMDSnapshotFile attributeDescriptions]
  -[HMDSnapshotFile dealloc]
  -[HMDSnapshotFile .cxx_destruct]
  -[HMDSnapshotFile isEqual:]
  -[HMDSnapshotFile snapshotTimestamp]
  -[HMDSnapshotFile setFilled:]
  -[HMDSnapshotFile isFilled]
  -[HMDSnapshotFile slotIdentifier]
  -[HMDSnapshotFile setSlotIdentifier:]
  -[HMDSnapshotFile initWithImageDirectory:]
  -[HMDSnapshotFile initWithImageDirectory:snapshotData:]
  -[HMDSnapshotFile initWithImageDirectory:filePath:snapshotTimestamp:]
  -[HMDSnapshotFile initWithImageDirectory:externalFilePath:snapshotTimestamp:]
  -[HMDSnapshotFile copyFileAtPath:snapshotTimestamp:]
  -[HMDSnapshotFile updateSlotIdentifier]
  -[HMDSnapshotFile fillSlot]
  -[HMDSnapshotFile clearSlot]
  -[HMDSnapshotFile prepareParametersWithFilePath:snapshotData:directory:snapshotTimestamp:resize:writeBack:]
  -[HMDSnapshotFile encodedDataForIDSSend]
  -[HMDSnapshotFile decodeIDSDataReceived:snapshotDataTransaction:]
  -[HMDSnapshotFile externalFilePath]


HMDAccountHandle : HMFObject <HMFLogging, HMDBackingStoreObjectProtocol, HMDBackingStoreModelBackedObjectProtocol, HMDRemoteAddressable, NSCopying, NSSecureCoding>
 @property  IDSURI *URI
 @property  NSUUID *modelParentIdentifier
 @property  BOOL locallyTracked
 @property  long long type
 @property  NSString *value
 @property  NSUUID *identifier
 @property  BOOL local
 @property  CNContact *contact
 @property  CKUserIdentityLookupInfo *cloudKitLookupInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  Class modelClass
 @property  NSUUID *modelIdentifier

  // class methods
  +[HMDAccountHandle supportsSecureCoding]
  +[HMDAccountHandle logCategory]
  +[HMDAccountHandle accountHandleForDestination:]

  // instance methods
  -[HMDAccountHandle modelClass]
  -[HMDAccountHandle identifier]
  -[HMDAccountHandle logIdentifier]
  -[HMDAccountHandle contact]
  -[HMDAccountHandle encodeWithCoder:]
  -[HMDAccountHandle type]
  -[HMDAccountHandle modelIdentifier]
  -[HMDAccountHandle attributeDescriptions]
  -[HMDAccountHandle .cxx_destruct]
  -[HMDAccountHandle shortDescription]
  -[HMDAccountHandle copyWithZone:]
  -[HMDAccountHandle initWithURI:]
  -[HMDAccountHandle value]
  -[HMDAccountHandle URI]
  -[HMDAccountHandle isLocal]
  -[HMDAccountHandle isEqual:]
  -[HMDAccountHandle init]
  -[HMDAccountHandle initWithCoder:]
  -[HMDAccountHandle initWithObjectModel:]
  -[HMDAccountHandle isBackingStorageEqual:]
  -[HMDAccountHandle transactionObjectUpdated:newValues:message:]
  -[HMDAccountHandle transactionObjectRemoved:message:]
  -[HMDAccountHandle modelObjectWithChangeType:version:]
  -[HMDAccountHandle backingStoreObjectsWithChangeType:version:]
  -[HMDAccountHandle modelBackedObjects]
  -[HMDAccountHandle modelParentIdentifier]
  -[HMDAccountHandle remoteDestinationString]
  -[HMDAccountHandle initWithURI:local:]
  -[HMDAccountHandle cloudKitLookupInfo]
  -[HMDAccountHandle setModelParentIdentifier:]
  -[HMDAccountHandle isLocallyTracked]
  -[HMDAccountHandle setLocallyTracked:]


HMDAccountHandleModel : HMDBackingStoreModelObject
 @property  IDSURI *idsURI
 @property  NSNumber *local

  // class methods
  +[HMDAccountHandleModel properties]
  +[HMDAccountHandleModel schemaHashRoot]


HMDRPIdentity : HMFObject <NSCopying, NSSecureCoding>
 @property  HMFKey *deviceIRK

  // class methods
  +[HMDRPIdentity supportsSecureCoding]
  +[HMDRPIdentity logCategory]
  +[HMDRPIdentity identityWithRPIdentity:]

  // instance methods
  -[HMDRPIdentity logIdentifier]
  -[HMDRPIdentity encodeWithCoder:]
  -[HMDRPIdentity .cxx_destruct]
  -[HMDRPIdentity shortDescription]
  -[HMDRPIdentity copyWithZone:]
  -[HMDRPIdentity isEqual:]
  -[HMDRPIdentity init]
  -[HMDRPIdentity initWithCoder:]
  -[HMDRPIdentity deviceIRK]
  -[HMDRPIdentity initWithDeviceIRK:]
  -[HMDRPIdentity isEqualToRPIndentity:]


HMDHomeLockNotificationManager : HMFObject <HMFMessageReceiver, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *uuid
 @property  HMDHome *home
 @property  HMFMessageDispatcher *msgDispatcher
 @property  <HMDHomeLockNotificationManagerDataSource> *dataSource
 @property  BOOL hasReachablePrimaryResidentSupportingLockNotificationContext
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeLockNotificationManager logCategory]

  // instance methods
  -[HMDHomeLockNotificationManager home]
  -[HMDHomeLockNotificationManager logIdentifier]
  -[HMDHomeLockNotificationManager dataSource]
  -[HMDHomeLockNotificationManager workQueue]
  -[HMDHomeLockNotificationManager uuid]
  -[HMDHomeLockNotificationManager .cxx_destruct]
  -[HMDHomeLockNotificationManager messageTargetUUID]
  -[HMDHomeLockNotificationManager messageReceiveQueue]
  -[HMDHomeLockNotificationManager msgDispatcher]
  -[HMDHomeLockNotificationManager setHome:]
  -[HMDHomeLockNotificationManager setMsgDispatcher:]
  -[HMDHomeLockNotificationManager configureWithHome:]
  -[HMDHomeLockNotificationManager initWithUUID:workQueue:]
  -[HMDHomeLockNotificationManager handleResolveNotificationContextIdentifierMessage:]
  -[HMDHomeLockNotificationManager initWithUUID:workQueue:dataSource:]
  -[HMDHomeLockNotificationManager hasReachablePrimaryResidentSupportingLockNotificationContext]
  -[HMDHomeLockNotificationManager shouldResolveNotificationContextForCharacteristic:]
  -[HMDHomeLockNotificationManager resolveEncodedCharacteristicNotificationContext:accessoryUUID:completion:]
  -[HMDHomeLockNotificationManager displayNameForNotificationContextResolutionResult:]
  -[HMDHomeLockNotificationManager resolveKeypadContextIdentifier:accessoryUUID:withCompletion:]
  -[HMDHomeLockNotificationManager _sendResolveLockNotificationContextIdentifierMessage:accessoryUUID:withCompletion:]
  -[HMDHomeLockNotificationManager _resolveKeypadContextIdentifier:accessoryUUID:completion:]
  -[HMDHomeLockNotificationManager contextResolutionResultFromAccessCode:]
  -[HMDHomeLockNotificationManager contextResolutionResultFromHAPContextId:]
  -[HMDHomeLockNotificationManager contextResolutionResultFromNFCContextId:]


HMFObjectCacheHMDCharacteristicMetadata : NSObject
  // class methods
  +[HMFObjectCacheHMDCharacteristicMetadata cachedInstanceForCharacteristicMetadata:]


HAPCharacteristicTuple : HMFObject
 @property  HAPCharacteristic *hapCharacteristic
 @property  NSString *serverIdentifier
 @property  long long linkType

  // instance methods
  -[HAPCharacteristicTuple linkType]
  -[HAPCharacteristicTuple .cxx_destruct]
  -[HAPCharacteristicTuple setLinkType:]
  -[HAPCharacteristicTuple serverIdentifier]
  -[HAPCharacteristicTuple setServerIdentifier:]
  -[HAPCharacteristicTuple initWithHAPCharacteristic:serverIdentifier:linkType:]
  -[HAPCharacteristicTuple hapCharacteristic]
  -[HAPCharacteristicTuple setHapCharacteristic:]


HMDCharacteristic : HMFObject <HMDBulletinIdentifiers, HMFLogging, NSSecureCoding, HMFDumpState>
 @property  NSDictionary *bulletinContext
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  NSSet *hapCharacteristicTuples
 @property  id previousValue
 @property  NSString *serializedIdentifier
 @property  NSString *characteristicType
 @property  id lastKnownValue
 @property  NSDate *lastKnownValueUpdateTime
 @property  NSNumber *characteristicInstanceID
 @property  long long characteristicProperties
 @property  NSSet *notificationRegistrations
 @property  NSDate *notificationEnabledTime
 @property  BOOL notificationRegisteredWithRemoteGateway
 @property  NSData *notificationContext
 @property  HMDHAPAccessory *accessory
 @property  HMDService *service
 @property  NSString *type
 @property  NSNumber *instanceID
 @property  long long properties
 @property  id value
 @property  NSNumber *stateNumber
 @property  HMDCharacteristicMetadata *metadata
 @property  NSUUID *spiClientIdentifier
 @property  NSData *authorizationData
 @property  BOOL broadcastNotificationEnabled
 @property  BOOL shouldIgnoreCacheValueForRead
 @property  BOOL supportsNotificationContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCharacteristic supportsSecureCoding]
  +[HMDCharacteristic logCategory]
  +[HMDCharacteristic sortComparatorForCharacteristicDictionary]
  +[HMDCharacteristic value:differentThan:]
  +[HMDCharacteristic currentTargetStateCharacteristicTypeMap]

  // instance methods
  -[HMDCharacteristic dumpState]
  -[HMDCharacteristic accessory]
  -[HMDCharacteristic instanceID]
  -[HMDCharacteristic updateWithDictionary:]
  -[HMDCharacteristic logIdentifier]
  -[HMDCharacteristic properties]
  -[HMDCharacteristic encodeWithCoder:]
  -[HMDCharacteristic type]
  -[HMDCharacteristic setPreviousValue:]
  -[HMDCharacteristic attributeDescriptions]
  -[HMDCharacteristic characteristicType]
  -[HMDCharacteristic .cxx_destruct]
  -[HMDCharacteristic service]
  -[HMDCharacteristic isNotificationEnabled]
  -[HMDCharacteristic previousValue]
  -[HMDCharacteristic contextID]
  -[HMDCharacteristic shortDescription]
  -[HMDCharacteristic value]
  -[HMDCharacteristic metadata]
  -[HMDCharacteristic notificationContext]
  -[HMDCharacteristic init]
  -[HMDCharacteristic initWithCoder:]
  -[HMDCharacteristic setCharacteristicType:]
  -[HMDCharacteristic notificationEnabledTime]
  -[HMDCharacteristic setNotificationEnabledTime:]
  -[HMDCharacteristic unconfigure]
  -[HMDCharacteristic stateNumber]
  -[HMDCharacteristic setStateNumber:]
  -[HMDCharacteristic characteristicProperties]
  -[HMDCharacteristic setCharacteristicProperties:]
  -[HMDCharacteristic validateValue:outValue:]
  -[HMDCharacteristic setNotificationContext:]
  -[HMDCharacteristic characteristicInstanceID]
  -[HMDCharacteristic authorizationData]
  -[HMDCharacteristic setAuthorizationData:]
  -[HMDCharacteristic contextSPIUniqueIdentifier]
  -[HMDCharacteristic bulletinContext]
  -[HMDCharacteristic notificationRegistrations]
  -[HMDCharacteristic spiClientIdentifier]
  -[HMDCharacteristic serializedIdentifier]
  -[HMDCharacteristic isNotificationEnabledForClientIdentifier:]
  -[HMDCharacteristic isNonClientNotificationEnabled]
  -[HMDCharacteristic initWithCharacteristic:service:accessory:]
  -[HMDCharacteristic setNotificationRegisteredWithRemoteGateway:]
  -[HMDCharacteristic notificationRegisteredWithRemoteGateway]
  -[HMDCharacteristic hapCharacteristicTuples]
  -[HMDCharacteristic setHapCharacteristicTuples:]
  -[HMDCharacteristic lastKnownValue]
  -[HMDCharacteristic setLastKnownValue:]
  -[HMDCharacteristic lastKnownValueUpdateTime]
  -[HMDCharacteristic setLastKnownValueUpdateTime:]
  -[HMDCharacteristic characteristicTypeDescription]
  -[HMDCharacteristic hapCharacteristicTupleWithIdentifier:linkType:]
  -[HMDCharacteristic getCharacteristicDictionary]
  -[HMDCharacteristic _characteristicDictionaryWithAuthData:]
  -[HMDCharacteristic configureWithCharacteristic:]
  -[HMDCharacteristic unconfigureForServerIdentifier:linkType:]
  -[HMDCharacteristic characteristicForHAPAccessory:]
  -[HMDCharacteristic updateValue:updatedTime:stateNumber:notificationContext:]
  -[HMDCharacteristic updateLastKnownValue]
  -[HMDCharacteristic isValueUpdatedFromHAPCharacteristic:]
  -[HMDCharacteristic validateValueForWrite:outValue:]
  -[HMDCharacteristic validateValueForNotify:outValue:]
  -[HMDCharacteristic supportsNotification]
  -[HMDCharacteristic supportsRead]
  -[HMDCharacteristic supportsWrite]
  -[HMDCharacteristic isClientNotificationEnabled]
  -[HMDCharacteristic isNonHomeNotificationsEnabled]
  -[HMDCharacteristic localClientIdentifiersWithNotificationsEnabled]
  -[HMDCharacteristic isNotificationEnabledForClientIdentifierPrefix:]
  -[HMDCharacteristic setNotificationEnabled:forClientIdentifier:removeLast:]
  -[HMDCharacteristic setNotificationEnabled:forClientIdentifier:]
  -[HMDCharacteristic deregisterNotificationIfNotLastForClientIdentifier:]
  -[HMDCharacteristic deregisterNotificationForClientIdentifier:]
  -[HMDCharacteristic updateService:accessory:]
  -[HMDCharacteristic shouldIgnoreCacheValueForRead]
  -[HMDCharacteristic supportsNotificationContext]
  -[HMDCharacteristic contextDataForWriteRequestWithIdentifier:]
  -[HMDCharacteristic broadcastNotificationEnabled]
  -[HMDCharacteristic setBroadcastNotificationEnabled:]
  -[HMDCharacteristic setCharacteristicInstanceID:]


HMDResidentDeviceManagerFactory : NSObject
  // class methods
  +[HMDResidentDeviceManagerFactory createManager]


HMDRemoteMessageForwarder : HMFObject <HMFMessageReceiver, HMFLogging>
 @property  HMDHome *home
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *UUID
 @property  NSUUID *contextUUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMutableDictionary *messagesByIdentifier
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteMessageForwarder logCategory]
  +[HMDRemoteMessageForwarder remoteMessageForwarderUUIDFromUUID:]

  // instance methods
  -[HMDRemoteMessageForwarder configure]
  -[HMDRemoteMessageForwarder home]
  -[HMDRemoteMessageForwarder workQueue]
  -[HMDRemoteMessageForwarder .cxx_destruct]
  -[HMDRemoteMessageForwarder messageTargetUUID]
  -[HMDRemoteMessageForwarder UUID]
  -[HMDRemoteMessageForwarder messageReceiveQueue]
  -[HMDRemoteMessageForwarder messageDispatcher]
  -[HMDRemoteMessageForwarder redispatchToResidentMessage:]
  -[HMDRemoteMessageForwarder handleResponseMessage:]
  -[HMDRemoteMessageForwarder initWithHome:messageDispatcher:UUID:workQueue:]
  -[HMDRemoteMessageForwarder messageForForwardedMessage:]
  -[HMDRemoteMessageForwarder contextUUID]
  -[HMDRemoteMessageForwarder messagesByIdentifier]


HMDHouseholdMetricsServer : NSObject
 @property  <HMDHouseholdMetricsDataSource> *dataSource
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  <HMDHouseholdMetricsLogEventProviding> *householdMetricsProvider
 @property  <HMDHouseholdMetricsMessaging> *remoteMessageDispatcher
 @property  HMDMetricsDateProvider *dateProvider
 @property  HMDHouseholdMetricsRequestContributor *requestContributor
 @property  NSDictionary *logEventFactories
 @property  NSObject<OS_dispatch_queue> *workQueue

  // class methods
  +[HMDHouseholdMetricsServer logCategory]

  // instance methods
  -[HMDHouseholdMetricsServer dateProvider]
  -[HMDHouseholdMetricsServer dataSource]
  -[HMDHouseholdMetricsServer workQueue]
  -[HMDHouseholdMetricsServer .cxx_destruct]
  -[HMDHouseholdMetricsServer logEventSubmitter]
  -[HMDHouseholdMetricsServer remoteMessageDispatcher]
  -[HMDHouseholdMetricsServer logEventFactories]
  -[HMDHouseholdMetricsServer initWithDataSource:logEventSubmitter:dateProvider:householdMetricsProvider:remoteMessageDispatcher:logEventFactories:workQueue:]
  -[HMDHouseholdMetricsServer evaluateHouseholdActivityLogEventForSubmission:]
  -[HMDHouseholdMetricsServer evaluateMetricResponsesForSubmission:]
  -[HMDHouseholdMetricsServer sendHouseholdMetricsCollectionRequestToDevices:forHomeWithUUID:associatedToDate:completion:]
  -[HMDHouseholdMetricsServer runHouseholdMetricsDataCollection]
  -[HMDHouseholdMetricsServer householdMetricsProvider]
  -[HMDHouseholdMetricsServer requestContributor]


HMDHomePersonManager : HMDPersonManager <HMFLogging, HMDDatabaseZoneManagerDataSource>
 @property  HMDHome *home
 @property  HMIHomePersonManager *hmiPersonManager
 @property  HMHomePersonManagerSettings *settings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomePersonManager logCategory]
  +[HMDHomePersonManager zoneNameForZoneUUID:]

  // instance methods
  -[HMDHomePersonManager home]
  -[HMDHomePersonManager .cxx_destruct]
  -[HMDHomePersonManager settings]
  -[HMDHomePersonManager setHome:]
  -[HMDHomePersonManager manager:shouldShareWithUser:]
  -[HMDHomePersonManager manager:shouldGrantWriteAccessToUser:]
  -[HMDHomePersonManager zoneManager:shouldRequestShareInvitationFromUser:]
  -[HMDHomePersonManager configureWithHome:]
  -[HMDHomePersonManager sharesFaceClassifications]
  -[HMDHomePersonManager hmiPersonManager]
  -[HMDHomePersonManager handleUpdatedSettings:]
  -[HMDHomePersonManager handleUserCamerasAccessLevelDidChangeNotification:]
  -[HMDHomePersonManager handleUserRemoteAccessDidChangeNotification:]
  -[HMDHomePersonManager syncsPersonData]
  -[HMDHomePersonManager initWithHome:zoneUUID:workQueue:]
  -[HMDHomePersonManager initWithUUID:zoneManager:dataInterfaces:workQueue:home:]


HMDCameraSnapshotMetrics : HMFObject
 @property  HMDCameraMetricsSnapshotLogEvent *cameraSnapshotMetricsLogEvent
 @property  NSError *error

  // instance methods
  -[HMDCameraSnapshotMetrics error]
  -[HMDCameraSnapshotMetrics dealloc]
  -[HMDCameraSnapshotMetrics .cxx_destruct]
  -[HMDCameraSnapshotMetrics setError:]
  -[HMDCameraSnapshotMetrics initWithSessionID:cameraAccessory:isLocal:snapshotForNotification:]
  -[HMDCameraSnapshotMetrics cameraSnapshotMetricsLogEvent]


HMDSiriServer : NSObject <HMDDataStreamBulkSendListener, HMDSiriAccessoryMonitorDelegate, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSObject<OS_dispatch_workloop> *audioWorkloop
 @property  HMDNotificationRegistration *notificationRegistration
 @property  HMDSiriRemoteInputServer *siriInputServer
 @property  HMDSiriAccessoryMonitor *siriAccessoryMonitor
 @property  HMDSiriSession *siriUISession
 @property  unsigned int targetControlIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriServer logCategory]
  +[HMDSiriServer sharedSiriServer]

  // instance methods
  -[HMDSiriServer .cxx_destruct]
  -[HMDSiriServer setQueue:]
  -[HMDSiriServer queue]
  -[HMDSiriServer init]
  -[HMDSiriServer registerForMessages]
  -[HMDSiriServer setTargetableAccessory:withControllers:]
  -[HMDSiriServer accessory:didReceiveBulkSessionCandidate:]
  -[HMDSiriServer accessoryDidStartListening:]
  -[HMDSiriServer accessoryDidCloseDataStream:]
  -[HMDSiriServer handleAccessoryConnected:]
  -[HMDSiriServer handleAccessoryDisconnected:]
  -[HMDSiriServer handleAccessoryHasBulkSendDataStream:]
  -[HMDSiriServer handleAccessoryRemoved:]
  -[HMDSiriServer monitor:needsSiriCapabilityForAccessory:]
  -[HMDSiriServer monitor:willAllowAccessoryForDragonSiri:]
  -[HMDSiriServer monitor:willNotAllowAccessoryForDragonSiri:]
  -[HMDSiriServer monitorHasNoAccessoriesForDragonSiri:]
  -[HMDSiriServer _handleDisconnectForAccessory:]
  -[HMDSiriServer _setupSiriPlugin]
  -[HMDSiriServer _maybeTearDownSiriPlugin]
  -[HMDSiriServer _setupSiriUIContext]
  -[HMDSiriServer _tearDownSiriUIContext]
  -[HMDSiriServer _checkSiriSupportByAccessory:]
  -[HMDSiriServer _isSiriInputType:supportedOnAccessory:siriAudioConfiguration:]
  -[HMDSiriServer _getBestAudioCodecConfiguration:]
  -[HMDSiriServer _isAudioCodecSupported:]
  -[HMDSiriServer _removeDataStreamListenerForAccessory:]
  -[HMDSiriServer _getSiriSessionForAccessory:]
  -[HMDSiriServer audioWorkloop]
  -[HMDSiriServer setAudioWorkloop:]
  -[HMDSiriServer notificationRegistration]
  -[HMDSiriServer siriInputServer]
  -[HMDSiriServer setSiriInputServer:]
  -[HMDSiriServer siriAccessoryMonitor]
  -[HMDSiriServer setSiriAccessoryMonitor:]
  -[HMDSiriServer siriUISession]
  -[HMDSiriServer setSiriUISession:]
  -[HMDSiriServer targetControlIdentifier]
  -[HMDSiriServer setTargetControlIdentifier:]


HMDCounterThresholdLoggingTrigger : NSObject <HMDEventCounterObserver>
 @property  unsigned long threshold
 @property  NSString *counterName
 @property  BOOL uploadImmediately
 @property  @? loggingBlock

  // instance methods
  -[HMDCounterThresholdLoggingTrigger threshold]
  -[HMDCounterThresholdLoggingTrigger .cxx_destruct]
  -[HMDCounterThresholdLoggingTrigger counterName]
  -[HMDCounterThresholdLoggingTrigger updatedCounterForEventName:fromOldValue:toNewValue:]
  -[HMDCounterThresholdLoggingTrigger uploadImmediately]
  -[HMDCounterThresholdLoggingTrigger loggingBlock]
  -[HMDCounterThresholdLoggingTrigger initWithThreshold:counterName:]
  -[HMDCounterThresholdLoggingTrigger initWithThreshold:counterName:uploadImmediately:]
  -[HMDCounterThresholdLoggingTrigger initWithThreshold:counterName:uploadImmediately:loggingBlock:]
  -[HMDCounterThresholdLoggingTrigger logThresholdTrigger:triggerValue:]


HMDMediaDestinationManager : HMFObject <HMDMediaDestinationBackingStoreHandlerDelegate, HMFLogging, HMFStagedValueDelegate, HMDMediaDestinationManager, HMDMediaDestinationMessageHandlerDataSource, HMDMediaDestinationMessageHandlerDelegate>
 @property  <HMDMediaDestinationManagerDataSource> *dataSource
 @property  <HMDMediaDestinationManagerDelegate> *delegate
 @property  BOOL targetDevice
 @property  HMDMediaDestinationManagerMetricsDispatcher *metricsDispatcher
 @property  HMFStagedValue *stagedAudioGroupIdentifier
 @property  HMDMediaDestinationBackingStoreHandler *backingStoreHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *identifier
 @property  HMMediaDestination *destination
 @property  HMMediaDestination *committedDestination
 @property  HMDMediaDestinationMessageHandler *messageHandler

  // class methods
  +[HMDMediaDestinationManager logCategory]

  // instance methods
  -[HMDMediaDestinationManager identifier]
  -[HMDMediaDestinationManager logIdentifier]
  -[HMDMediaDestinationManager destination]
  -[HMDMediaDestinationManager dataSource]
  -[HMDMediaDestinationManager setDelegate:]
  -[HMDMediaDestinationManager messageHandler]
  -[HMDMediaDestinationManager delegate]
  -[HMDMediaDestinationManager attributeDescriptions]
  -[HMDMediaDestinationManager privateDescription]
  -[HMDMediaDestinationManager .cxx_destruct]
  -[HMDMediaDestinationManager setDataSource:]
  -[HMDMediaDestinationManager metricsDispatcher]
  -[HMDMediaDestinationManager stagedValue:didExpireValue:]
  -[HMDMediaDestinationManager mediaDestinationMessageHandler:didReceiveUpdateSupportedOptionsRequestMessage:supportOptions:]
  -[HMDMediaDestinationManager mediaDestinationMessageHandler:didReceiveUpdateAudioGroupIdentifierRequestMessage:audioGroupIdentifier:]
  -[HMDMediaDestinationManager messageHandler:shouldRelayIncomingMessage:]
  -[HMDMediaDestinationManager messageHandler:deviceForOutgoingMessage:]
  -[HMDMediaDestinationManager stageAudioGroupIdentifier:]
  -[HMDMediaDestinationManager requestToUpdateAudioGroupIdentifier:completion:]
  -[HMDMediaDestinationManager committedDestination]
  -[HMDMediaDestinationManager dataSourceTargetAccessory]
  -[HMDMediaDestinationManager dataSourceDestinationControllerWithIdentifier:]
  -[HMDMediaDestinationManager migrateWithHome:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationManager mergeDestination:]
  -[HMDMediaDestinationManager mediaDestinationBackingStoreHandler:didUpdateDestination:]
  -[HMDMediaDestinationManager initWithDestination:messageDispatcher:notificationCenter:backingStore:targetDevice:dataSource:delegate:]
  -[HMDMediaDestinationManager initWithDestination:messageHandler:backingStoreHandler:metricsDispatcher:targetDevice:dataSource:delegate:]
  -[HMDMediaDestinationManager configureWithHome:currentAccessory:]
  -[HMDMediaDestinationManager migrateToAudioGroups]
  -[HMDMediaDestinationManager enableAudioGroupFeature]
  -[HMDMediaDestinationManager isAudioGroupFeatureEnabled]
  -[HMDMediaDestinationManager mediaGroupParticipantLocalDataStorage]
  -[HMDMediaDestinationManager dataSourceRootDestinationManager]
  -[HMDMediaDestinationManager updateSupportedOptions:]
  -[HMDMediaDestinationManager _updateSupportedOptions:]
  -[HMDMediaDestinationManager legacyUpdateSupportedOptions:]
  -[HMDMediaDestinationManager updateAudioGroupIdentifier:]
  -[HMDMediaDestinationManager _updateAudioGroupIdentifier:]
  -[HMDMediaDestinationManager legacyUpdateAudioGroupIdentifier:]
  -[HMDMediaDestinationManager notifyDelegateDidUpdateStagedValues]
  -[HMDMediaDestinationManager triggerStageValueDidExpireValueForAudioDestinationIdentifier]
  -[HMDMediaDestinationManager backingStoreHandler]
  -[HMDMediaDestinationManager isTargetDevice]
  -[HMDMediaDestinationManager stagedAudioGroupIdentifier]


HMDBLEBroadcastEventReceived : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDAccessory *accessory
 @property  BOOL hasExpectedGSN

  // class methods
  +[HMDBLEBroadcastEventReceived broadcastEventFromAccessory:withExpectedGSN:]

  // instance methods
  -[HMDBLEBroadcastEventReceived accessory]
  -[HMDBLEBroadcastEventReceived .cxx_destruct]
  -[HMDBLEBroadcastEventReceived AWDMessageType]
  -[HMDBLEBroadcastEventReceived metricForAWD]
  -[HMDBLEBroadcastEventReceived initBroadcastEventFromAccessory:withExpectedGSN:]
  -[HMDBLEBroadcastEventReceived hasExpectedGSN]


HMDCameraResidentMessageHandler : HMFObject <HMFLogging>
 @property  HMDMessageDispatcher *messageDispatcher
 @property  NSString *logIdentifier
 @property  NSMutableDictionary *queuedMessagesByDeviceIdentifier
 @property  HMDAccessory *accessory
 @property  HMDDevice *remoteAccessDevice
 @property  BOOL usingCompanionForRemoteAccessDevice
 @property  BOOL remoteAccessDeviceReachable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraResidentMessageHandler logCategory]

  // instance methods
  -[HMDCameraResidentMessageHandler accessory]
  -[HMDCameraResidentMessageHandler logIdentifier]
  -[HMDCameraResidentMessageHandler .cxx_destruct]
  -[HMDCameraResidentMessageHandler messageDispatcher]
  -[HMDCameraResidentMessageHandler isRemoteAccessDeviceReachable]
  -[HMDCameraResidentMessageHandler initWithAccessory:logIdentifier:]
  -[HMDCameraResidentMessageHandler initWithAccessory:logIdentifier:messageDispatcher:]
  -[HMDCameraResidentMessageHandler sendMessageWithName:cameraSessionID:payload:target:device:responseQueue:responseHandler:]
  -[HMDCameraResidentMessageHandler sendMessageWithName:cameraSessionID:payload:target:responseQueue:responseHandler:]
  -[HMDCameraResidentMessageHandler remoteAccessDevice]
  -[HMDCameraResidentMessageHandler isUsingCompanionForRemoteAccessDevice]
  -[HMDCameraResidentMessageHandler enqueueMessage:forDeviceIdentifier:]
  -[HMDCameraResidentMessageHandler dequeueRespondedMessageForDeviceIdentifier:]
  -[HMDCameraResidentMessageHandler nextMessageForDeviceIdentifier:]
  -[HMDCameraResidentMessageHandler sendNextMessageForDeviceIdentifier:]
  -[HMDCameraResidentMessageHandler queuedMessagesByDeviceIdentifier]


AWDHomeKitCameraStreamConfigure : PBCodable <NSCopying>
 @property  BOOL hasResolution
 @property  int resolution
 @property  BOOL hasFramerate
 @property  unsigned int framerate
 @property  BOOL hasAudioCodec
 @property  int audioCodec
 @property  BOOL hasSampleRate
 @property  int sampleRate
 @property  BOOL hasCryptoSuite
 @property  int cryptoSuite

  // instance methods
  -[AWDHomeKitCameraStreamConfigure framerate]
  -[AWDHomeKitCameraStreamConfigure copyTo:]
  -[AWDHomeKitCameraStreamConfigure setResolution:]
  -[AWDHomeKitCameraStreamConfigure sampleRate]
  -[AWDHomeKitCameraStreamConfigure resolution]
  -[AWDHomeKitCameraStreamConfigure mergeFrom:]
  -[AWDHomeKitCameraStreamConfigure setFramerate:]
  -[AWDHomeKitCameraStreamConfigure dictionaryRepresentation]
  -[AWDHomeKitCameraStreamConfigure copyWithZone:]
  -[AWDHomeKitCameraStreamConfigure readFrom:]
  -[AWDHomeKitCameraStreamConfigure writeTo:]
  -[AWDHomeKitCameraStreamConfigure isEqual:]
  -[AWDHomeKitCameraStreamConfigure setSampleRate:]
  -[AWDHomeKitCameraStreamConfigure setHasSampleRate:]
  -[AWDHomeKitCameraStreamConfigure hasSampleRate]
  -[AWDHomeKitCameraStreamConfigure audioCodec]
  -[AWDHomeKitCameraStreamConfigure hasResolution]
  -[AWDHomeKitCameraStreamConfigure setHasResolution:]
  -[AWDHomeKitCameraStreamConfigure setAudioCodec:]
  -[AWDHomeKitCameraStreamConfigure hasAudioCodec]
  -[AWDHomeKitCameraStreamConfigure setHasAudioCodec:]
  -[AWDHomeKitCameraStreamConfigure resolutionAsString:]
  -[AWDHomeKitCameraStreamConfigure StringAsResolution:]
  -[AWDHomeKitCameraStreamConfigure setHasFramerate:]
  -[AWDHomeKitCameraStreamConfigure hasFramerate]
  -[AWDHomeKitCameraStreamConfigure audioCodecAsString:]
  -[AWDHomeKitCameraStreamConfigure StringAsAudioCodec:]
  -[AWDHomeKitCameraStreamConfigure sampleRateAsString:]
  -[AWDHomeKitCameraStreamConfigure StringAsSampleRate:]
  -[AWDHomeKitCameraStreamConfigure cryptoSuite]
  -[AWDHomeKitCameraStreamConfigure setCryptoSuite:]
  -[AWDHomeKitCameraStreamConfigure setHasCryptoSuite:]
  -[AWDHomeKitCameraStreamConfigure hasCryptoSuite]
  -[AWDHomeKitCameraStreamConfigure cryptoSuiteAsString:]
  -[AWDHomeKitCameraStreamConfigure StringAsCryptoSuite:]


HMDMessageDispatcher : HMFMessageDispatcher
 @property  NSMutableDictionary *remoteGateways
 @property  HMDSecureRemoteMessageFilter *secureRemoteMessageFilter
 @property  HMDHomeManager *homeManager
 @property  HMDXPCMessageTransport *XPCTransport
 @property  HMDSecureRemoteMessageTransport *secureRemoteTransport
 @property  HMDMessageFilterChain *messageFilterChain

  // class methods
  +[HMDMessageDispatcher logCategory]
  +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:]
  +[HMDMessageDispatcher destinationWithTarget:userID:destination:multicast:accountRegistry:]
  +[HMDMessageDispatcher defaultDispatcher]

  // instance methods
  -[HMDMessageDispatcher dispatchMessage:]
  -[HMDMessageDispatcher sendMessage:completionHandler:]
  -[HMDMessageDispatcher dealloc]
  -[HMDMessageDispatcher reset]
  -[HMDMessageDispatcher .cxx_destruct]
  -[HMDMessageDispatcher sendMessageExpectingResponse:]
  -[HMDMessageDispatcher homeManager]
  -[HMDMessageDispatcher setHomeManager:]
  -[HMDMessageDispatcher filterClasses]
  -[HMDMessageDispatcher handleSecureSessionError:]
  -[HMDMessageDispatcher initWithXPCTransport:secureRemoteTransport:messageFilterChain:]
  -[HMDMessageDispatcher configureHomeManager:]
  -[HMDMessageDispatcher httpMessageTransport]
  -[HMDMessageDispatcher enableMessageServer]
  -[HMDMessageDispatcher disableMessageServer]
  -[HMDMessageDispatcher configureHTTPTransport:]
  -[HMDMessageDispatcher XPCTransport]
  -[HMDMessageDispatcher secureRemoteTransport]
  -[HMDMessageDispatcher messageFilterChain]
  -[HMDMessageDispatcher remoteGateways]
  -[HMDMessageDispatcher setRemoteGateways:]
  -[HMDMessageDispatcher secureRemoteMessageFilter]
  -[HMDMessageDispatcher setSecureRemoteMessageFilter:]
  -[HMDMessageDispatcher setCompanionDevice:forHome:]
  -[HMDMessageDispatcher setRemoteAccessDevice:forHome:]
  -[HMDMessageDispatcher _setRemoteAccessDevice:forHome:sendNotification:]
  -[HMDMessageDispatcher residentCommunicationHandlerForHome:]
  -[HMDMessageDispatcher remoteAccessDeviceForHome:]
  -[HMDMessageDispatcher sendSecureMessage:target:userID:destination:responseQueue:responseHandler:]
  -[HMDMessageDispatcher electDeviceForHH1User:destination:deviceCapabilities:responseTimeout:responseQueue:responseHandler:]
  -[HMDMessageDispatcher updateHome:configurationVersion:]
  -[HMDMessageDispatcher removeHome:]
  -[HMDMessageDispatcher prepareAnswerForRequestedCapabilities:]


HMDCAMDBlockManager : NSObject
  // instance methods
  -[HMDCAMDBlockManager initWithService:]
  -[HMDCAMDBlockManager .cxx_destruct]
  -[HMDCAMDBlockManager count]
  -[HMDCAMDBlockManager addBlockNoCopy:forKey:]
  -[HMDCAMDBlockManager addBlock:forKey:]
  -[HMDCAMDBlockManager removeBlock:]
  -[HMDCAMDBlockManager removeBlockForKey:]
  -[HMDCAMDBlockManager blockForKey:]
  -[HMDCAMDBlockManager keyForBlock:]
  -[HMDCAMDBlockManager invokeForwardedBlockWithArguments:forKey:]
  -[HMDCAMDBlockManager forwardingBlockWithArgumentCount:forKey:]


HMDCAMDEmbeddedDeviceService : HMDCAMDEmbeddedDevice <HMDCAMDEmbeddedDeviceServerProxy, HMDCAMDEmbeddedDeviceClientProxy, HMFLogging>
 @property  HMDCAMDBlockManager *blockInvoker
 @property  BOOL isRoot
 @property  BOOL isValid
 @property  BOOL directInvocations
 @property  unsigned long requestTimeout
 @property  @? interruptionHandler
 @property  @? invalidationHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCAMDEmbeddedDeviceService logCategory]
  +[HMDCAMDEmbeddedDeviceService confirmSemaphoreAndSignal:]

  // instance methods
  -[HMDCAMDEmbeddedDeviceService isRoot]
  -[HMDCAMDEmbeddedDeviceService setInvalidationHandler:]
  -[HMDCAMDEmbeddedDeviceService resetConnection]
  -[HMDCAMDEmbeddedDeviceService logIdentifier]
  -[HMDCAMDEmbeddedDeviceService interruptionHandler]
  -[HMDCAMDEmbeddedDeviceService setRequestTimeout:]
  -[HMDCAMDEmbeddedDeviceService dealloc]
  -[HMDCAMDEmbeddedDeviceService isValid]
  -[HMDCAMDEmbeddedDeviceService .cxx_destruct]
  -[HMDCAMDEmbeddedDeviceService setInterruptionHandler:]
  -[HMDCAMDEmbeddedDeviceService requestTimeout]
  -[HMDCAMDEmbeddedDeviceService remoteObjectProxyWithErrorHandler:]
  -[HMDCAMDEmbeddedDeviceService invalidationHandler]
  -[HMDCAMDEmbeddedDeviceService start]
  -[HMDCAMDEmbeddedDeviceService remoteObjectProxy]
  -[HMDCAMDEmbeddedDeviceService init]
  -[HMDCAMDEmbeddedDeviceService blockReleased:]
  -[HMDCAMDEmbeddedDeviceService _performCommandFromClass:method:arguments:reply:]
  -[HMDCAMDEmbeddedDeviceService _testCommunication:]
  -[HMDCAMDEmbeddedDeviceService _fireActualBlockWithArguments:forKey:]
  -[HMDCAMDEmbeddedDeviceService _removeActualBlockForKey:]
  -[HMDCAMDEmbeddedDeviceService performCommandFromClass:method:arguments:error:]
  -[HMDCAMDEmbeddedDeviceService _initAsRoot:]
  -[HMDCAMDEmbeddedDeviceService initAsRoot]
  -[HMDCAMDEmbeddedDeviceService initAsMobile]
  -[HMDCAMDEmbeddedDeviceService testCommunication]
  -[HMDCAMDEmbeddedDeviceService directInvocations]
  -[HMDCAMDEmbeddedDeviceService setDirectInvocations:]
  -[HMDCAMDEmbeddedDeviceService blockInvoker]


HMDHAPAccessoryReaderWriterMetricHelper : NSObject
  // class methods
  +[HMDHAPAccessoryReaderWriterMetricHelper updateLogEvents:withResponses:shouldSubmit:]
  +[HMDHAPAccessoryReaderWriterMetricHelper updateLogEvents:withResponses:remoteMessageResponse:shouldSubmit:]


HMDRemoteLoginInitiatorCompanionAuthentication : HMDRemoteLoginInitiatorAuthentication
 @property  ACAccount *account

  // class methods
  +[HMDRemoteLoginInitiatorCompanionAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginInitiatorCompanionAuthentication account]
  -[HMDRemoteLoginInitiatorCompanionAuthentication dealloc]
  -[HMDRemoteLoginInitiatorCompanionAuthentication .cxx_destruct]
  -[HMDRemoteLoginInitiatorCompanionAuthentication _authenticate]
  -[HMDRemoteLoginInitiatorCompanionAuthentication loginType]
  -[HMDRemoteLoginInitiatorCompanionAuthentication authenticate]
  -[HMDRemoteLoginInitiatorCompanionAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:account:]


HMDObjectLookup : HMFObject <HMFLogging>
 @property  NSMapTable *uuidToObjectMapping
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDObjectLookup logCategory]

  // instance methods
  -[HMDObjectLookup workQueue]
  -[HMDObjectLookup .cxx_destruct]
  -[HMDObjectLookup initWithWorkQueue:]
  -[HMDObjectLookup scanObjects]
  -[HMDObjectLookup lookUpAndApplyObjectChange:previous:result:completionHandler:]
  -[HMDObjectLookup _lookUpObjectWithUUID:applyObjectChange:previous:result:completionHandler:]
  -[HMDObjectLookup resetObjects]
  -[HMDObjectLookup applyChange:previous:onObject:result:completionHandler:]
  -[HMDObjectLookup uuidToObjectMapping]


HMFObjectCacheHMDXPCMessagePolicy : NSObject
  // class methods
  +[HMFObjectCacheHMDXPCMessagePolicy cachedInstanceForXPCMessagePolicy:]


HMDXPCMessagePolicy : HMFMessagePolicy
 @property  unsigned long entitlements

  // class methods
  +[HMDXPCMessagePolicy defaultPolicy]
  +[HMDXPCMessagePolicy policyWithEntitlements:]

  // instance methods
  -[HMDXPCMessagePolicy entitlements]
  -[HMDXPCMessagePolicy copyWithZone:]
  -[HMDXPCMessagePolicy isEqual:]
  -[HMDXPCMessagePolicy init]
  -[HMDXPCMessagePolicy __initWithEntitlements:]


HMDBiomeEventManager : HMFObject
 @property  BMHomeKitClientActionSetStream *actionSetStream
 @property  BMHomeKitClientMediaAccessoryControlStream *mediaAccessoryStream
 @property  BMHomeKitClientAccessoryControlStream *hapAccessoryStream
 @property  @? prunableStreamFactory
 @property  NSNotificationCenter *notificationCenter
 @property  NSObject<OS_dispatch_queue> *workQueue

  // instance methods
  -[HMDBiomeEventManager notificationCenter]
  -[HMDBiomeEventManager workQueue]
  -[HMDBiomeEventManager .cxx_destruct]
  -[HMDBiomeEventManager deleteAllEvents]
  -[HMDBiomeEventManager init]
  -[HMDBiomeEventManager _handleHomeRemovedNotification:]
  -[HMDBiomeEventManager _handleAccessoryRemovedNotification:]
  -[HMDBiomeEventManager _handleActionSetEmptiedNotification:]
  -[HMDBiomeEventManager _handleServiceRemovedNotification:]
  -[HMDBiomeEventManager initWithNotificationCenter:actionSetStream:mediaAccessoryStream:accessoryStream:prunableStreamFactory:workQueue:]
  -[HMDBiomeEventManager fetchMostRecentEventWithCharacteristicType:serviceType:homeSPIClientIdentifier:completion:]
  -[HMDBiomeEventManager submitActionSetEvent:]
  -[HMDBiomeEventManager _submitActionSetEvent:]
  -[HMDBiomeEventManager submitAccessoryEvent:]
  -[HMDBiomeEventManager _submitAccessoryEvent:]
  -[HMDBiomeEventManager submitMediaAccessoryEvent:]
  -[HMDBiomeEventManager _submitMediaAccessoryEvent:]
  -[HMDBiomeEventManager actionSetStream]
  -[HMDBiomeEventManager mediaAccessoryStream]
  -[HMDBiomeEventManager hapAccessoryStream]
  -[HMDBiomeEventManager prunableStreamFactory]


HMDSnapshotRemoteSession : HMDSnapshotSession
  // instance methods
  -[HMDSnapshotRemoteSession initWithSessionID:accessory:snapshotGetter:message:waitPeriod:streamingTierType:cameraLocallyReachable:]


HMDPrimaryResidentChangeMonitor : HMFObject <HMFLogging>
 @property  NSNotificationCenter *notificationCenter
 @property  NSUUID *confirmedPrimaryResidentDeviceIdentifier
 @property  BOOL isCurrentDevicePrimaryResident
 @property  <HMDPrimaryResidentChangeMonitorDataSource> *dataSource
 @property  NSUUID *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPrimaryResidentChangeMonitor logCategory]

  // instance methods
  -[HMDPrimaryResidentChangeMonitor notificationCenter]
  -[HMDPrimaryResidentChangeMonitor identifier]
  -[HMDPrimaryResidentChangeMonitor logIdentifier]
  -[HMDPrimaryResidentChangeMonitor dataSource]
  -[HMDPrimaryResidentChangeMonitor .cxx_destruct]
  -[HMDPrimaryResidentChangeMonitor setDataSource:]
  -[HMDPrimaryResidentChangeMonitor isCurrentDevicePrimaryResident]
  -[HMDPrimaryResidentChangeMonitor configureWithHome:]
  -[HMDPrimaryResidentChangeMonitor confirmedPrimaryResidentDevice]
  -[HMDPrimaryResidentChangeMonitor handlePrimaryResidentChangedNotification:]
  -[HMDPrimaryResidentChangeMonitor initWithIdentifier:notificationCenter:]
  -[HMDPrimaryResidentChangeMonitor registerForNotificationsWithHome:]
  -[HMDPrimaryResidentChangeMonitor refreshMonitor]
  -[HMDPrimaryResidentChangeMonitor notifyChangeToIsCurrentPrimaryResident]
  -[HMDPrimaryResidentChangeMonitor notifyChangeToConfirmedPrimaryResidentDeviceIdentifier]
  -[HMDPrimaryResidentChangeMonitor confirmedPrimaryResidentDeviceIdentifier]
  -[HMDPrimaryResidentChangeMonitor setConfirmedPrimaryResidentDeviceIdentifier:]
  -[HMDPrimaryResidentChangeMonitor setIsCurrentDevicePrimaryResident:]


HMDMetricsManager : NSObject <HMFMessageReceiver, HMDLogEventDailyTaskRunner, HMMLogEventDispatchingDataSource, HMDCoreAnalyticsLogObserverDataSource, HMDHouseholdMetricsDataSource>
 @property  BOOL metricsCollectionStarted
 @property  HMDMessageDispatcher *messageDispatcher
 @property  HMDEventCountersManager *countersManager
 @property  HMDTimeBasedFlagsManager *flagsManager
 @property  HMDCoreAnalyticsLogObserver *coreAnalyticsLogObserver
 @property  HMDHouseholdMetricsManager *householdMetricsManager
 @property  HMDDiagnosticReporterLogObserver *diagnosticReporterLogObserver
 @property  HMDPowerLogObserver *powerLogObserver
 @property  HMDCloudSyncLogEventsAnalyzer *cloudSyncLogEventsAnalyzer
 @property  HMDLogEventElectionEventsAnalyzer *electionEventsAnalyzer
 @property  HMDLogEventErrorEventsAnalyzer *errorEventsAnalyzer
 @property  HMDLogEventHAPMetricsEventAnalyzer *hapEventsAnalyzer
 @property  HMDLogEventMessageEventsAnalyzer *messagingEventsAnalyzer
 @property  HMDLogEventProcessLaunchAnalyzer *processLaunchEventsAnalyzer
 @property  HMDLogEventProcessMemoryEventsAnalyzer *processMemoryEventsAnalyzer
 @property  HMDLogEventReachabilityEventsAnalyzer *reachabilityEventsAnalyzer
 @property  HMDLogEventUserActivityAnalyzer *userActivityEventsAnalyzer
 @property  HMDLogEventAccessoryFirmwareUpdateEventAnalyzer *firmwareUpdateEventsAnalyzer
 @property  NSMutableArray *aggregationAnalysisEventContributingAnalyzers
 @property  HMDHomeManager *homeManager
 @property  BOOL isDemoModeConfigured
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  <HMMLogEventDispatching> *logEventDispatcher
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isSubmissionEnabled
 @property  HMDConfigurationLogEvent *cachedConfiguration
 @property  NSString *PRKitUUIDString
 @property  NSString *PRKitDateString

  // class methods
  +[HMDMetricsManager namespaceUUID]

  // instance methods
  -[HMDMetricsManager homes]
  -[HMDMetricsManager .cxx_destruct]
  -[HMDMetricsManager messageTargetUUID]
  -[HMDMetricsManager messageDestination]
  -[HMDMetricsManager homeManager]
  -[HMDMetricsManager setHomeManager:]
  -[HMDMetricsManager messageReceiveQueue]
  -[HMDMetricsManager messageDispatcher]
  -[HMDMetricsManager init]
  -[HMDMetricsManager _registerForMessages]
  -[HMDMetricsManager logEventSubmitter]
  -[HMDMetricsManager countersManager]
  -[HMDMetricsManager runDailyTask]
  -[HMDMetricsManager dailyScheduler]
  -[HMDMetricsManager logEventDispatcher]
  -[HMDMetricsManager flagsManager]
  -[HMDMetricsManager _handleFetchEventCounters:]
  -[HMDMetricsManager _handleResetEventCounters:]
  -[HMDMetricsManager _handleLogEventDailySchedulerStatusRequest:]
  -[HMDMetricsManager _handleLogEventDailySchedulerSubmitRequest:]
  -[HMDMetricsManager isSubmissionEnabled]
  -[HMDMetricsManager cachedHomeConfigurationForHomeUUID:]
  -[HMDMetricsManager cachedConfiguration]
  -[HMDMetricsManager PRKitUUIDString]
  -[HMDMetricsManager PRKitDateString]
  -[HMDMetricsManager currentDeviceProductInfo]
  -[HMDMetricsManager devicesOnCurrentAccount]
  -[HMDMetricsManager initWithMessageDispatcher:logEventDispatcher:dailyScheduler:countersManager:flagsManager:]
  -[HMDMetricsManager addAnalyzer:toListOfAggregationAnalysisEventContributing:]
  -[HMDMetricsManager configureHAPMetricsDispatcher:]
  -[HMDMetricsManager startMetricsCollection]
  -[HMDMetricsManager startMetricsCollectionWithDailyScheduler:]
  -[HMDMetricsManager submitCurrentUserSettings]
  -[HMDMetricsManager submitDailyAggregationAnalysisEvents]
  -[HMDMetricsManager currentDataSyncStateDescription]
  -[HMDMetricsManager homeKitAggregationAnalysisLogEvent]
  -[HMDMetricsManager populateHomeKitAggregationAnalysisLogEvent:]
  -[HMDMetricsManager resetHomeKitAggregationAnalysisContext]
  -[HMDMetricsManager logHomeKitAggregationAnalysisSummary]
  -[HMDMetricsManager logHomeKitErrorAggregationSummary]
  -[HMDMetricsManager homeKitConfigurationChanged]
  -[HMDMetricsManager updateWidgetStatusInCachedConfiguration]
  -[HMDMetricsManager isDemoModeConfigured]
  -[HMDMetricsManager logHomeConfiguration]
  -[HMDMetricsManager startCoreAnalyticsObserver:]
  -[HMDMetricsManager startAnalyzers]
  -[HMDMetricsManager registerEWSTriggers]
  -[HMDMetricsManager addThresholdTrigger:forEventName:requestGroup:atThreshold:]
  -[HMDMetricsManager addRateTrigger:forEventName:requestGroup:atThreshold:windowSize:]
  -[HMDMetricsManager presentRadarDialog:withPostIntervalLimit:]
  -[HMDMetricsManager metricsCollectionStarted]
  -[HMDMetricsManager setMetricsCollectionStarted:]
  -[HMDMetricsManager coreAnalyticsLogObserver]
  -[HMDMetricsManager householdMetricsManager]
  -[HMDMetricsManager diagnosticReporterLogObserver]
  -[HMDMetricsManager powerLogObserver]
  -[HMDMetricsManager cloudSyncLogEventsAnalyzer]
  -[HMDMetricsManager electionEventsAnalyzer]
  -[HMDMetricsManager errorEventsAnalyzer]
  -[HMDMetricsManager hapEventsAnalyzer]
  -[HMDMetricsManager messagingEventsAnalyzer]
  -[HMDMetricsManager processLaunchEventsAnalyzer]
  -[HMDMetricsManager processMemoryEventsAnalyzer]
  -[HMDMetricsManager reachabilityEventsAnalyzer]
  -[HMDMetricsManager userActivityEventsAnalyzer]
  -[HMDMetricsManager firmwareUpdateEventsAnalyzer]
  -[HMDMetricsManager aggregationAnalysisEventContributingAnalyzers]


HMFConnectivityInfo : HMFObject <NSSecureCoding>
 @property  HMFWoBLEInfo *woBLEInfo
 @property  NSArray *woWLANInfos
 @property  NSString *accessoryIdentifier
 @property  HMFWoWLANInfo *woWLANInfo

  // class methods
  +[HMFConnectivityInfo supportsSecureCoding]
  +[HMFConnectivityInfo shortDescription]
  +[HMFConnectivityInfo connectivityInfoWithAccessoryIdentifier:wakeConfiguration:]

  // instance methods
  -[HMFConnectivityInfo encodeWithCoder:]
  -[HMFConnectivityInfo .cxx_destruct]
  -[HMFConnectivityInfo isEqual:]
  -[HMFConnectivityInfo initWithCoder:]
  -[HMFConnectivityInfo accessoryIdentifier]
  -[HMFConnectivityInfo initWithAccessoryIdentifier:woBLEInfo:woWLANInfos:]
  -[HMFConnectivityInfo woWLANInfo]
  -[HMFConnectivityInfo woBLEInfo]
  -[HMFConnectivityInfo setWoBLEInfo:]
  -[HMFConnectivityInfo woWLANInfos]
  -[HMFConnectivityInfo setWoWLANInfos:]


HMFWoBLEInfo : HMFObject <NSSecureCoding>
 @property  NSData *bleIdentifier

  // class methods
  +[HMFWoBLEInfo supportsSecureCoding]

  // instance methods
  -[HMFWoBLEInfo encodeWithCoder:]
  -[HMFWoBLEInfo .cxx_destruct]
  -[HMFWoBLEInfo isEqual:]
  -[HMFWoBLEInfo initWithCoder:]
  -[HMFWoBLEInfo initWithBLEIdentifier:]
  -[HMFWoBLEInfo bleIdentifier]


HMFWoWLANInfo : HMFObject <NSSecureCoding>
 @property  NSData *primaryMACAddress
 @property  NSArray *additionalMACAddresses
 @property  BOOL supportsSleepConfig
 @property  unsigned short wakePort
 @property  NSData *wakeAddress
 @property  long long wakeType
 @property  long long wakePacketType
 @property  unsigned char version
 @property  NSData *wakePattern
 @property  NSString *wakeAddressString

  // class methods
  +[HMFWoWLANInfo supportsSecureCoding]

  // instance methods
  -[HMFWoWLANInfo encodeWithCoder:]
  -[HMFWoWLANInfo .cxx_destruct]
  -[HMFWoWLANInfo version]
  -[HMFWoWLANInfo isEqual:]
  -[HMFWoWLANInfo initWithCoder:]
  -[HMFWoWLANInfo wakeType]
  -[HMFWoWLANInfo wakeAddress]
  -[HMFWoWLANInfo wakePort]
  -[HMFWoWLANInfo wakePattern]
  -[HMFWoWLANInfo setWakeAddress:]
  -[HMFWoWLANInfo initWithPrimaryIdentifier:wifiIdentifiers:]
  -[HMFWoWLANInfo initWithWakeVersion:wakePort:wakeAddress:wakeType:wakePacketType:wakePattern:]
  -[HMFWoWLANInfo wakeAddressString]
  -[HMFWoWLANInfo primaryMACAddress]
  -[HMFWoWLANInfo additionalMACAddresses]
  -[HMFWoWLANInfo supportsSleepConfig]
  -[HMFWoWLANInfo wakePacketType]
  -[HMFWoWLANInfo setWakePattern:]


HMDRemoteEventRouterProtoDisconnectMessage : PBCodable <NSCopying>
  // instance methods
  -[HMDRemoteEventRouterProtoDisconnectMessage copyTo:]
  -[HMDRemoteEventRouterProtoDisconnectMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoDisconnectMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoDisconnectMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoDisconnectMessage readFrom:]
  -[HMDRemoteEventRouterProtoDisconnectMessage writeTo:]
  -[HMDRemoteEventRouterProtoDisconnectMessage isEqual:]


HMDSnapshotSessionApplicationID : HMFObject <NSCopying>
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  HMDProcessInfo *processInfo

  // instance methods
  -[HMDSnapshotSessionApplicationID sessionID]
  -[HMDSnapshotSessionApplicationID .cxx_destruct]
  -[HMDSnapshotSessionApplicationID processInfo]
  -[HMDSnapshotSessionApplicationID copyWithZone:]
  -[HMDSnapshotSessionApplicationID isEqual:]
  -[HMDSnapshotSessionApplicationID initWithSessionID:processInfo:]


HMDSettingAttachedSettingUpdate : HMFObject
 @property  NSString *keyPath
 @property  HMSettingValue *settingValue

  // instance methods
  -[HMDSettingAttachedSettingUpdate .cxx_destruct]
  -[HMDSettingAttachedSettingUpdate keyPath]
  -[HMDSettingAttachedSettingUpdate settingValue]
  -[HMDSettingAttachedSettingUpdate initWithKeyPath:settingValue:]


HMDSettingOnChangeAttachedUpdatesResult : HMFObject
 @property  NSArray *settingsToUpdate
 @property  NSArray *modelsToUpdate
 @property  @? onCommitCompletion

  // instance methods
  -[HMDSettingOnChangeAttachedUpdatesResult .cxx_destruct]
  -[HMDSettingOnChangeAttachedUpdatesResult initWithSettingsToUpdate:models:onCommitCompletion:]
  -[HMDSettingOnChangeAttachedUpdatesResult settingsToUpdate]
  -[HMDSettingOnChangeAttachedUpdatesResult modelsToUpdate]
  -[HMDSettingOnChangeAttachedUpdatesResult onCommitCompletion]


HMDSettingsController : HMFObject <HMFLogging, HMDSettingsControllerProtocol, HMDSettingsMessageController, HMDSettingTransactionReceiverProtocol>
 @property  NSArray *allObjectIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  NSUUID *userUUID

  // class methods
  +[HMDSettingsController logCategory]

  // instance methods
  -[HMDSettingsController configure]
  -[HMDSettingsController logIdentifier]
  -[HMDSettingsController encodeWithCoder:]
  -[HMDSettingsController userUUID]
  -[HMDSettingsController .cxx_destruct]
  -[HMDSettingsController settingForKeyPath:]
  -[HMDSettingsController settingValuesByKeyPathWithPrefix:]
  -[HMDSettingsController migrateSettingsTransactionWithTransaction:error:]
  -[HMDSettingsController modelsToMakeSettings]
  -[HMDSettingsController loadWithModels:]
  -[HMDSettingsController updateWithValue:onSetting:completion:]
  -[HMDSettingsController allObjectIdentifiers]
  -[HMDSettingsController updateWithEncodedValue:onSettingKeyPath:completion:]
  -[HMDSettingsController transactionSettingGroupModelUpdated:previousModel:completion:]
  -[HMDSettingsController transactionSettingGroupModelRemoved:completion:]
  -[HMDSettingsController transactionSettingModelUpdated:previousModel:completion:]
  -[HMDSettingsController transactionSettingModelRemoved:completion:]
  -[HMDSettingsController transactionSettingConstraintModelUpdated:previousModel:completion:]
  -[HMDSettingsController transactionSettingConstraintModelRemoved:completion:]
  -[HMDSettingsController initWithDependency:delegate:]
  -[HMDSettingsController updateRootGroup:]
  -[HMDSettingsController modelsToMigrateSettings]
  -[HMDSettingsController _prunedSettingsGroupByRemovingKeyPathsFromGroup:]


HMDHomeModel : HMDBackingStoreModelObject
 @property  NSData *encodedNaturalLightingContext
 @property  NSString *name
 @property  NSString *ownerName
 @property  NSString *ownerUserID
 @property  NSString *ownerUUID
 @property  NSDate *creationDate
 @property  NSDate *firstHAPAccessoryAddedDate
 @property  NSString *defaultRoomUUID
 @property  NSNumber *presenceAuthorizationStatus
 @property  NSNumber *presenceComputeStatus
 @property  NSData *ownerPublicKey
 @property  NSData *homeLocationData
 @property  NSString *primaryResidentUUID
 @property  HMDHomeKitVersion *sharedHomeSourceVersion
 @property  NSNumber *networkProtectionMode
 @property  NSNumber *multiUserEnabled
 @property  NSNumber *soundCheckEnabled
 @property  NSNumber *hasAnyUserAcknowledgedCameraRecordingOnboarding
 @property  NSNumber *hasOnboardedForAccessCode
 @property  NSNumber *hasOnboardedForWalletKey
 @property  HMDNaturalLightingContext *naturalLightingContext
 @property  NSNumber *chipFabricID
 @property  NSNumber *chipFabricIndex
 @property  NSNumber *chipLastNodeID
 @property  NSData *chipRootCertificate
 @property  NSData *chipOperationalCertificate
 @property  NSData *chipIntermediateCertificate
 @property  NSDictionary *chipKeyValueStore
 @property  NSNumber *locationServicesEnabled
 @property  NSNumber *didOnboardLocationServices

  // class methods
  +[HMDHomeModel properties]

  // instance methods
  -[HMDHomeModel setNaturalLightingContext:]
  -[HMDHomeModel naturalLightingContext]


HMDHomeConfigurationModel : HMDBackingStoreModelObject
 @property  NSNumber *configurationVersion
 @property  BOOL homeHasLocalChanges

  // class methods
  +[HMDHomeConfigurationModel properties]

  // instance methods
  -[HMDHomeConfigurationModel homeHasLocalChanges]
  -[HMDHomeConfigurationModel setHomeHasLocalChanges:]


HMDSharedHomeModel : HMDBackingStoreModelObject
 @property  NSData *homeData
 @property  NSNumber *configurationVersion

  // class methods
  +[HMDSharedHomeModel properties]

  // instance methods
  -[HMDSharedHomeModel isReplayable]


HMDHomeSettingsBaseModel : HMDBackingStoreModelObject
  // class methods
  +[HMDHomeSettingsBaseModel modelIDForHomeUUID:]
  +[HMDHomeSettingsBaseModel defaultModelForHomeUUID:]


HMDHomeSettingsModel : HMDHomeSettingsBaseModel
 @property  NSNumber *automaticSoftwareUpdateEnabled
 @property  NSNumber *automaticThirdPartyAccessorySoftwareUpdateEnabled

  // class methods
  +[HMDHomeSettingsModel properties]
  +[HMDHomeSettingsModel modelIDForHomeUUID:]
  +[HMDHomeSettingsModel defaultModelForHomeUUID:]
  +[HMDHomeSettingsModel modelNamespace]


HMDHomeMediaSettingsModel : HMDHomeSettingsBaseModel
 @property  NSNumber *minimumMediaUserPrivilege
 @property  NSNumber *mediaPeerToPeerEnabled
 @property  NSString *mediaPassword

  // class methods
  +[HMDHomeMediaSettingsModel properties]
  +[HMDHomeMediaSettingsModel modelIDForHomeUUID:]
  +[HMDHomeMediaSettingsModel defaultModelForHomeUUID:]
  +[HMDHomeMediaSettingsModel modelNamespace]


HMDHomeNetworkRouterManagingDeviceSettingsModel : HMDHomeSettingsBaseModel
 @property  NSString *primaryNetworkRouterManagingDeviceUUID

  // class methods
  +[HMDHomeNetworkRouterManagingDeviceSettingsModel properties]
  +[HMDHomeNetworkRouterManagingDeviceSettingsModel modelIDForHomeUUID:]
  +[HMDHomeNetworkRouterManagingDeviceSettingsModel defaultModelForHomeUUID:]
  +[HMDHomeNetworkRouterManagingDeviceSettingsModel modelNamespace]

  // instance methods
  -[HMDHomeNetworkRouterManagingDeviceSettingsModel dependentUUIDs]


HMDHomeNetworkRouterSettingsModel : HMDHomeSettingsBaseModel
 @property  NSString *activeNetworkRouterAccessoryUUID
 @property  NSString *activeNetworkRouterInitialSetupNeededUUID
 @property  NSString *minimumNetworkRouterSupportHomeKitVersion
 @property  NSString *minHomeKitVersionForAccessoryNetworkProtectionChange

  // class methods
  +[HMDHomeNetworkRouterSettingsModel properties]
  +[HMDHomeNetworkRouterSettingsModel modelIDForHomeUUID:]
  +[HMDHomeNetworkRouterSettingsModel defaultModelForHomeUUID:]
  +[HMDHomeNetworkRouterSettingsModel modelNamespace]

  // instance methods
  -[HMDHomeNetworkRouterSettingsModel dependentUUIDs]


HMDHomeThreadNetworkModel : HMDBackingStoreModelObject
 @property  NSString *threadNetworkID

  // class methods
  +[HMDHomeThreadNetworkModel properties]
  +[HMDHomeThreadNetworkModel modelIDForHome:]
  +[HMDHomeThreadNetworkModel defaultModelForHome:]


HMDHomeNFCReaderKeyModel : HMDBackingStoreModelObject
 @property  NSData *encodedNfcReaderKey
 @property  HMDHomeNFCReaderKey *nfcReaderKey

  // class methods
  +[HMDHomeNFCReaderKeyModel properties]
  +[HMDHomeNFCReaderKeyModel modelIDForHome:]
  +[HMDHomeNFCReaderKeyModel defaultModelForHome:]

  // instance methods
  -[HMDHomeNFCReaderKeyModel setNfcReaderKey:]
  -[HMDHomeNFCReaderKeyModel nfcReaderKey]


HMDHomeUpgradedToROAR : HMDBackingStoreModelObject
  // class methods
  +[HMDHomeUpgradedToROAR properties]
  +[HMDHomeUpgradedToROAR modelIDForHome:]
  +[HMDHomeUpgradedToROAR defaultModelForHome:]


HMDRemoteEventRouterProtoFragmentedMessage : PBCodable <NSCopying>
 @property  BOOL hasFragmentData
 @property  NSData *fragmentData
 @property  BOOL hasFragmentNumber
 @property  unsigned int fragmentNumber
 @property  BOOL hasTotalSize
 @property  unsigned long totalSize
 @property  BOOL hasTotalFragments
 @property  unsigned long totalFragments
 @property  BOOL hasRouterVersion
 @property  unsigned int routerVersion

  // instance methods
  -[HMDRemoteEventRouterProtoFragmentedMessage copyTo:]
  -[HMDRemoteEventRouterProtoFragmentedMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoFragmentedMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoFragmentedMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoFragmentedMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoFragmentedMessage readFrom:]
  -[HMDRemoteEventRouterProtoFragmentedMessage writeTo:]
  -[HMDRemoteEventRouterProtoFragmentedMessage isEqual:]
  -[HMDRemoteEventRouterProtoFragmentedMessage totalSize]
  -[HMDRemoteEventRouterProtoFragmentedMessage fragmentNumber]
  -[HMDRemoteEventRouterProtoFragmentedMessage totalFragments]
  -[HMDRemoteEventRouterProtoFragmentedMessage setTotalSize:]
  -[HMDRemoteEventRouterProtoFragmentedMessage hasFragmentData]
  -[HMDRemoteEventRouterProtoFragmentedMessage setFragmentNumber:]
  -[HMDRemoteEventRouterProtoFragmentedMessage setHasFragmentNumber:]
  -[HMDRemoteEventRouterProtoFragmentedMessage hasFragmentNumber]
  -[HMDRemoteEventRouterProtoFragmentedMessage setHasTotalSize:]
  -[HMDRemoteEventRouterProtoFragmentedMessage hasTotalSize]
  -[HMDRemoteEventRouterProtoFragmentedMessage setTotalFragments:]
  -[HMDRemoteEventRouterProtoFragmentedMessage setHasTotalFragments:]
  -[HMDRemoteEventRouterProtoFragmentedMessage hasTotalFragments]
  -[HMDRemoteEventRouterProtoFragmentedMessage setRouterVersion:]
  -[HMDRemoteEventRouterProtoFragmentedMessage setHasRouterVersion:]
  -[HMDRemoteEventRouterProtoFragmentedMessage hasRouterVersion]
  -[HMDRemoteEventRouterProtoFragmentedMessage fragmentData]
  -[HMDRemoteEventRouterProtoFragmentedMessage setFragmentData:]
  -[HMDRemoteEventRouterProtoFragmentedMessage routerVersion]


HMDRemoteEventRouterProtoFetchEventsResponse : PBCodable <NSCopying>
 @property  NSMutableArray *changedEvents

  // class methods
  +[HMDRemoteEventRouterProtoFetchEventsResponse changedEventsType]

  // instance methods
  -[HMDRemoteEventRouterProtoFetchEventsResponse copyTo:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse .cxx_destruct]
  -[HMDRemoteEventRouterProtoFetchEventsResponse mergeFrom:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoFetchEventsResponse copyWithZone:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse readFrom:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse writeTo:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse isEqual:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse clearChangedEvents]
  -[HMDRemoteEventRouterProtoFetchEventsResponse addChangedEvents:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse changedEventsCount]
  -[HMDRemoteEventRouterProtoFetchEventsResponse changedEventsAtIndex:]
  -[HMDRemoteEventRouterProtoFetchEventsResponse changedEvents]
  -[HMDRemoteEventRouterProtoFetchEventsResponse setChangedEvents:]


HMDMediaDestinationModel : HMDBackingStoreModelObject <HMFLogging>
 @property  NSNumber *type
 @property  NSNumber *supportedOptions
 @property  NSUUID *audioGroupIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationModel properties]
  +[HMDMediaDestinationModel logCategory]

  // instance methods
  -[HMDMediaDestinationModel logIdentifier]
  -[HMDMediaDestinationModel attributeDescriptions]
  -[HMDMediaDestinationModel privateDescription]
  -[HMDMediaDestinationModel initWithDestination:changeType:]


HMDCompositeSettingsKeyPathValueItem : NSObject
 @property  NSString *keyPath
 @property  HMDCompositeSettingValue *value

  // instance methods
  -[HMDCompositeSettingsKeyPathValueItem .cxx_destruct]
  -[HMDCompositeSettingsKeyPathValueItem keyPath]
  -[HMDCompositeSettingsKeyPathValueItem value]
  -[HMDCompositeSettingsKeyPathValueItem initWithKeyPath:value:]


HMDCompositeSettingsController : NSObject <HMFLogging, HMDCompositeSettingsDatabaseAdapterDelegate, HMDCompositeSettingsControllerPrivate, HMDCompositeSettingsController>
 @property  HMDCompositeSettingsZoneManager *zoneManager
 @property  NSUUID *uuid
 @property  NSUUID *homeUUID
 @property  BOOL configured
 @property  <HMDCompositeSettingsControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCompositeSettingsController logCategory]

  // instance methods
  -[HMDCompositeSettingsController logIdentifier]
  -[HMDCompositeSettingsController setDelegate:]
  -[HMDCompositeSettingsController delegate]
  -[HMDCompositeSettingsController uuid]
  -[HMDCompositeSettingsController .cxx_destruct]
  -[HMDCompositeSettingsController setZoneManager:]
  -[HMDCompositeSettingsController zoneManager]
  -[HMDCompositeSettingsController homeUUID]
  -[HMDCompositeSettingsController start]
  -[HMDCompositeSettingsController configured]
  -[HMDCompositeSettingsController setConfigured:]
  -[HMDCompositeSettingsController database:didConfigureWithError:]
  -[HMDCompositeSettingsController database:didProcessCreationForModel:]
  -[HMDCompositeSettingsController database:didProcessDeletionForModel:]
  -[HMDCompositeSettingsController database:didProcessUpdateForModel:]
  -[HMDCompositeSettingsController fetchSettingForKeyPath:callerVersion:callerPrivilege:completion:]
  -[HMDCompositeSettingsController fetchSettingsForKeyPaths:callerVersion:callerPrivilege:completion:]
  -[HMDCompositeSettingsController updateSettingForKeyPath:value:callerVersion:completion:]
  -[HMDCompositeSettingsController updateSettingsForKeyPaths:callerVersion:completion:]
  -[HMDCompositeSettingsController fetchSynchronousSettingsForKeyPaths:callerVersion:callerPrivilege:]
  -[HMDCompositeSettingsController initWithDatabaseAdapter:model:homeUUID:ownerUUID:settingKeyPathBlockList:]
  -[HMDCompositeSettingsController initWithDatabaseAdapter:model:homeUUID:ownerUUID:logEventDispatcher:settingKeyPathBlockList:]
  -[HMDCompositeSettingsController _createSettingsFromModel:]
  -[HMDCompositeSettingsController _settingFromSetting:value:error:]


HMDRemoteLoginAuthentication : HMFObject <HMFLogging>
 @property  NSString *sessionID
 @property  HMDDevice *remoteDevice
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDRemoteLoginMessageSender *remoteMessageSender
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginAuthentication remoteDevice]
  -[HMDRemoteLoginAuthentication logIdentifier]
  -[HMDRemoteLoginAuthentication sessionID]
  -[HMDRemoteLoginAuthentication workQueue]
  -[HMDRemoteLoginAuthentication .cxx_destruct]
  -[HMDRemoteLoginAuthentication authenticate]
  -[HMDRemoteLoginAuthentication remoteMessageSender]
  -[HMDRemoteLoginAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:]


AWDHomeKitVendorInformation : PBCodable <NSCopying>
 @property  BOOL hasManufacturer
 @property  NSString *manufacturer
 @property  BOOL hasModel
 @property  NSString *model
 @property  BOOL hasFirmwareVersion
 @property  NSString *firmwareVersion
 @property  BOOL hasName
 @property  NSString *name
 @property  BOOL hasProductData
 @property  NSString *productData
 @property  BOOL hasCategory
 @property  NSString *category

  // instance methods
  -[AWDHomeKitVendorInformation hasName]
  -[AWDHomeKitVendorInformation setCategory:]
  -[AWDHomeKitVendorInformation setModel:]
  -[AWDHomeKitVendorInformation hasCategory]
  -[AWDHomeKitVendorInformation firmwareVersion]
  -[AWDHomeKitVendorInformation model]
  -[AWDHomeKitVendorInformation copyTo:]
  -[AWDHomeKitVendorInformation hasFirmwareVersion]
  -[AWDHomeKitVendorInformation category]
  -[AWDHomeKitVendorInformation .cxx_destruct]
  -[AWDHomeKitVendorInformation setManufacturer:]
  -[AWDHomeKitVendorInformation mergeFrom:]
  -[AWDHomeKitVendorInformation dictionaryRepresentation]
  -[AWDHomeKitVendorInformation setName:]
  -[AWDHomeKitVendorInformation copyWithZone:]
  -[AWDHomeKitVendorInformation name]
  -[AWDHomeKitVendorInformation manufacturer]
  -[AWDHomeKitVendorInformation readFrom:]
  -[AWDHomeKitVendorInformation setFirmwareVersion:]
  -[AWDHomeKitVendorInformation writeTo:]
  -[AWDHomeKitVendorInformation isEqual:]
  -[AWDHomeKitVendorInformation hasManufacturer]
  -[AWDHomeKitVendorInformation hasModel]
  -[AWDHomeKitVendorInformation productData]
  -[AWDHomeKitVendorInformation setProductData:]
  -[AWDHomeKitVendorInformation hasProductData]


HMDCameraRecordingSessionRetryContext : NSObject
 @property  double maxRetryInterval
 @property  double retryInterval
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSDictionary *homePresenceByPairingIdentity

  // instance methods
  -[HMDCameraRecordingSessionRetryContext workQueue]
  -[HMDCameraRecordingSessionRetryContext .cxx_destruct]
  -[HMDCameraRecordingSessionRetryContext homePresenceByPairingIdentity]
  -[HMDCameraRecordingSessionRetryContext retryInterval]
  -[HMDCameraRecordingSessionRetryContext initWithWorkQueue:homePresenceByPairingIdentity:]
  -[HMDCameraRecordingSessionRetryContext initWithWorkQueue:homePresenceByPairingIdentity:preferences:]
  -[HMDCameraRecordingSessionRetryContext setRetryInterval:]
  -[HMDCameraRecordingSessionRetryContext computeNextRetryInterval]
  -[HMDCameraRecordingSessionRetryContext maxRetryInterval]


HMDHAPMetricsReachabilityTimerLateEvent : HMDHAPMetrics <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *duration
 @property  NSNumber *expectedDuration

  // instance methods
  -[HMDHAPMetricsReachabilityTimerLateEvent eventName]
  -[HMDHAPMetricsReachabilityTimerLateEvent .cxx_destruct]
  -[HMDHAPMetricsReachabilityTimerLateEvent duration]
  -[HMDHAPMetricsReachabilityTimerLateEvent serializedEvent]
  -[HMDHAPMetricsReachabilityTimerLateEvent initWithAccessory:duration:expectedDuration:]
  -[HMDHAPMetricsReachabilityTimerLateEvent expectedDuration]


AWDHomeKitCloudSyncInfoTuple : PBCodable <NSCopying>
 @property  BOOL hasValue
 @property  NSString *value
 @property  BOOL hasCount
 @property  unsigned int count

  // instance methods
  -[AWDHomeKitCloudSyncInfoTuple setCount:]
  -[AWDHomeKitCloudSyncInfoTuple copyTo:]
  -[AWDHomeKitCloudSyncInfoTuple .cxx_destruct]
  -[AWDHomeKitCloudSyncInfoTuple hasValue]
  -[AWDHomeKitCloudSyncInfoTuple count]
  -[AWDHomeKitCloudSyncInfoTuple mergeFrom:]
  -[AWDHomeKitCloudSyncInfoTuple setValue:]
  -[AWDHomeKitCloudSyncInfoTuple dictionaryRepresentation]
  -[AWDHomeKitCloudSyncInfoTuple copyWithZone:]
  -[AWDHomeKitCloudSyncInfoTuple value]
  -[AWDHomeKitCloudSyncInfoTuple readFrom:]
  -[AWDHomeKitCloudSyncInfoTuple writeTo:]
  -[AWDHomeKitCloudSyncInfoTuple isEqual:]
  -[AWDHomeKitCloudSyncInfoTuple setHasCount:]
  -[AWDHomeKitCloudSyncInfoTuple hasCount]


HMDSettingSelectionItem : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *identifier
 @property  NSString *title

  // class methods
  +[HMDSettingSelectionItem supportsSecureCoding]

  // instance methods
  -[HMDSettingSelectionItem identifier]
  -[HMDSettingSelectionItem encodeWithCoder:]
  -[HMDSettingSelectionItem initWithTitle:]
  -[HMDSettingSelectionItem .cxx_destruct]
  -[HMDSettingSelectionItem title]
  -[HMDSettingSelectionItem copyWithZone:]
  -[HMDSettingSelectionItem isEqual:]
  -[HMDSettingSelectionItem initWithCoder:]


HMDCompositeSettingsAccessorySettingsModel : HMBModel <HMDCompositeSettingsModel>
 @property  NSString *root_general_accessibility_interaction_tapAssistance_selection_value
 @property  NSString *root_general_accessibility_interaction_tapAssistance_selection_readVersion
 @property  NSString *root_general_accessibility_interaction_tapAssistance_selection_writeVersion
 @property  NSNumber *root_siri_soundAlert_value
 @property  NSString *root_siri_soundAlert_readVersion
 @property  NSString *root_siri_soundAlert_writeVersion
 @property  NSNumber *root_siri_lightWhenUsingSiri_value
 @property  NSString *root_siri_lightWhenUsingSiri_readVersion
 @property  NSString *root_siri_lightWhenUsingSiri_writeVersion
 @property  NSNumber *root_siri_siriEnabled_value
 @property  NSString *root_siri_siriEnabled_readVersion
 @property  NSString *root_siri_siriEnabled_writeVersion
 @property  NSString *root_siri_language_inputLanguageCodeValueName
 @property  NSString *root_siri_language_outputLanguageVoiceCodeValueName
 @property  NSString *root_siri_language_outputLanguageGenderCodeValueName
 @property  NSString *root_siri_language_voiceNameValueName
 @property  NSString *root_siri_language_readVersion
 @property  NSString *root_siri_language_writeVersion
 @property  NSNumber *root_home_dismissedHomePodHasNonMemberMediaAccountWarning_value
 @property  NSString *root_home_dismissedHomePodHasNonMemberMediaAccountWarning_readVersion
 @property  NSString *root_home_dismissedHomePodHasNonMemberMediaAccountWarning_writeVersion
 @property  NSNumber *root_locationServices_enabled_value
 @property  NSString *root_locationServices_enabled_readVersion
 @property  NSString *root_locationServices_enabled_writeVersion
 @property  NSNumber *root_doorbellChime_enabled_value
 @property  NSString *root_doorbellChime_enabled_readVersion
 @property  NSString *root_doorbellChime_enabled_writeVersion
 @property  NSNumber *root_announce_enabled_value
 @property  NSString *root_announce_enabled_readVersion
 @property  NSString *root_announce_enabled_writeVersion
 @property  NSNumber *root_general_accessibility_vision_doubleTapSettings_timeoutSettings_timeoutInterval_value
 @property  NSString *root_general_accessibility_vision_doubleTapSettings_timeoutSettings_timeoutInterval_readVersion
 @property  NSString *root_general_accessibility_vision_doubleTapSettings_timeoutSettings_timeoutInterval_writeVersion
 @property  NSNumber *root_general_accessibility_vision_voiceOver_enabled_value
 @property  NSString *root_general_accessibility_vision_voiceOver_enabled_readVersion
 @property  NSString *root_general_accessibility_vision_voiceOver_enabled_writeVersion
 @property  NSNumber *root_general_accessibility_vision_voiceOver_audioDuckingEnabled_value
 @property  NSString *root_general_accessibility_vision_voiceOver_audioDuckingEnabled_readVersion
 @property  NSString *root_general_accessibility_vision_voiceOver_audioDuckingEnabled_writeVersion
 @property  NSNumber *root_general_accessibility_vision_speakingRateSection_speakingRate_value
 @property  NSString *root_general_accessibility_vision_speakingRateSection_speakingRate_readVersion
 @property  NSString *root_general_accessibility_vision_speakingRateSection_speakingRate_writeVersion
 @property  NSNumber *root_general_accessibility_interaction_holdDuration_enabled_value
 @property  NSString *root_general_accessibility_interaction_holdDuration_enabled_readVersion
 @property  NSString *root_general_accessibility_interaction_holdDuration_enabled_writeVersion
 @property  NSNumber *root_general_accessibility_interaction_holdDuration_seconds_value
 @property  NSString *root_general_accessibility_interaction_holdDuration_seconds_readVersion
 @property  NSString *root_general_accessibility_interaction_holdDuration_seconds_writeVersion
 @property  NSNumber *root_general_accessibility_interaction_touchAccommodations_enabled_value
 @property  NSString *root_general_accessibility_interaction_touchAccommodations_enabled_readVersion
 @property  NSString *root_general_accessibility_interaction_touchAccommodations_enabled_writeVersion
 @property  NSNumber *root_general_accessibility_interaction_ignoreRepeat_enabled_value
 @property  NSString *root_general_accessibility_interaction_ignoreRepeat_enabled_readVersion
 @property  NSString *root_general_accessibility_interaction_ignoreRepeat_enabled_writeVersion
 @property  NSNumber *root_general_accessibility_interaction_ignoreRepeat_seconds_value
 @property  NSString *root_general_accessibility_interaction_ignoreRepeat_seconds_readVersion
 @property  NSString *root_general_accessibility_interaction_ignoreRepeat_seconds_writeVersion
 @property  NSNumber *root_general_analytics_shareSiriAnalytics_value
 @property  NSString *root_general_analytics_shareSiriAnalytics_readVersion
 @property  NSString *root_general_analytics_shareSiriAnalytics_writeVersion
 @property  NSNumber *root_general_analytics_shareSpeakerAnalytics_value
 @property  NSString *root_general_analytics_shareSpeakerAnalytics_readVersion
 @property  NSString *root_general_analytics_shareSpeakerAnalytics_writeVersion
 @property  NSNumber *root_music_allowExplicitContent_value
 @property  NSString *root_music_allowExplicitContent_readVersion
 @property  NSString *root_music_allowExplicitContent_writeVersion
 @property  NSNumber *root_airPlay_airPlayEnabled_value
 @property  NSString *root_airPlay_airPlayEnabled_readVersion
 @property  NSString *root_airPlay_airPlayEnabled_writeVersion
 @property  NSNumber *root_siriEndpoint_enabled_value
 @property  NSString *root_siriEndpoint_enabled_readVersion
 @property  NSString *root_siriEndpoint_enabled_writeVersion

  // class methods
  +[HMDCompositeSettingsAccessorySettingsModel hmbProperties]
  +[HMDCompositeSettingsAccessorySettingsModel allKeyPaths]

  // instance methods
  -[HMDCompositeSettingsAccessorySettingsModel keyPathsToSettingsForMigration]
  -[HMDCompositeSettingsAccessorySettingsModel keyPathsToSettings]
  -[HMDCompositeSettingsAccessorySettingsModel setSetting:forKeyPath:withError:]
  -[HMDCompositeSettingsAccessorySettingsModel keyPathsToSettingMetadata]


HMDAssistantAccessControlModelV2 : HMBModel
 @property  NSArray *accessoryUUIDs
 @property  NSArray *siriEndpointAccessoryUUIDs
 @property  NSNumber *activityNotificationsEnabledForPersonalRequests
 @property  NSNumber *requiresAuthenticationForSecureRequests

  // class methods
  +[HMDAssistantAccessControlModelV2 hmbProperties]


HMDMediaOutputDevice : HMFObject
 @property  AVOutputDevice *av_OutputDevice
 @property  ^v outputDevice
 @property  NSString *uniqueIdentifier
 @property  NSString *name
 @property  NSString *modelID
 @property  unsigned int deviceSubtype
 @property  BOOL supportsWHA
 @property  BOOL supportsHAP

  // instance methods
  -[HMDMediaOutputDevice supportsHAP]
  -[HMDMediaOutputDevice modelID]
  -[HMDMediaOutputDevice deviceSubtype]
  -[HMDMediaOutputDevice dealloc]
  -[HMDMediaOutputDevice .cxx_destruct]
  -[HMDMediaOutputDevice outputDevice]
  -[HMDMediaOutputDevice name]
  -[HMDMediaOutputDevice uniqueIdentifier]
  -[HMDMediaOutputDevice initWithOutputDevice:]
  -[HMDMediaOutputDevice isEqual:]
  -[HMDMediaOutputDevice av_OutputDevice]
  -[HMDMediaOutputDevice supportsWHA]
  -[HMDMediaOutputDevice shouldCreateAppleMediaAccessory]
  -[HMDMediaOutputDevice setOutputDevice:]


HMDShortcutActionModel : HMDActionModel
 @property  NSData *data

  // class methods
  +[HMDShortcutActionModel properties]
  +[HMDShortcutActionModel backedObjectClass]

  // instance methods
  -[HMDShortcutActionModel loadModelWithActionInformation:]


HMDSiriSecureAccessoryAccessController : NSObject
  // instance methods
  -[HMDSiriSecureAccessoryAccessController initWithDataSource:]
  -[HMDSiriSecureAccessoryAccessController .cxx_destruct]
  -[HMDSiriSecureAccessoryAccessController initWithDataSource:watchAuthDataSource:pineBoardUserDefaults:]
  -[HMDSiriSecureAccessoryAccessController isUnsecuringSiriActionAllowedWithCompletion:]


HMDCloudManagerModelFailureEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *model
 @property  NSNumber *failureCode
 @property  NSString *errorDomain
 @property  NSNumber *errorCode
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCloudManagerModelFailureEvent errorCode]
  -[HMDCloudManagerModelFailureEvent model]
  -[HMDCloudManagerModelFailureEvent eventName]
  -[HMDCloudManagerModelFailureEvent attributeDescriptions]
  -[HMDCloudManagerModelFailureEvent errorDomain]
  -[HMDCloudManagerModelFailureEvent .cxx_destruct]
  -[HMDCloudManagerModelFailureEvent failureCode]
  -[HMDCloudManagerModelFailureEvent serializedEvent]
  -[HMDCloudManagerModelFailureEvent initWithModel:failureCode:error:]


HMDMediaGroupsLocalDataStorage : HMFObject <HMDMediaGroupsAggregatorBackupSenderDataSource>
 @property  NSUUID *identifier
 @property  HMDMediaGroupsAggregatorBackupSender *backupDataSender
 @property  <HMDMediaGroupsLocalDataStorageDataSource> *dataSource
 @property  NSArray *groups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsLocalDataStorage logCategory]

  // instance methods
  -[HMDMediaGroupsLocalDataStorage groups]
  -[HMDMediaGroupsLocalDataStorage identifier]
  -[HMDMediaGroupsLocalDataStorage logIdentifier]
  -[HMDMediaGroupsLocalDataStorage dataSource]
  -[HMDMediaGroupsLocalDataStorage .cxx_destruct]
  -[HMDMediaGroupsLocalDataStorage updateGroup:]
  -[HMDMediaGroupsLocalDataStorage setDataSource:]
  -[HMDMediaGroupsLocalDataStorage clearCachedData]
  -[HMDMediaGroupsLocalDataStorage backupGroupsForParticipantAccessoryUUID:]
  -[HMDMediaGroupsLocalDataStorage receiverForParticipantAccessoryUUID:]
  -[HMDMediaGroupsLocalDataStorage groupWithIdentifier:]
  -[HMDMediaGroupsLocalDataStorage backupGroupsForParticipantAccessoryUUID:mediaGroupsAggregatorBackupSender:]
  -[HMDMediaGroupsLocalDataStorage routerForParticipantAccessoryUUID:mediaGroupsAggregatorBackupSender:]
  -[HMDMediaGroupsLocalDataStorage receiverForParticipantAccessoryUUID:mediaGroupsAggregatorBackupSender:]
  -[HMDMediaGroupsLocalDataStorage initWithIdentifier:backupSender:]
  -[HMDMediaGroupsLocalDataStorage updateUsingParticipantAccessoryUUID:associatedGroupIdentifier:backedUpGroupData:]
  -[HMDMediaGroupsLocalDataStorage updateGroup:participantAccessoryUUIDs:]
  -[HMDMediaGroupsLocalDataStorage backupData]
  -[HMDMediaGroupsLocalDataStorage associatedGroupsWithGroupIdentifier:]
  -[HMDMediaGroupsLocalDataStorage allParticipantAccessoryUUIDs]
  -[HMDMediaGroupsLocalDataStorage associatedGroupIdentifierForParticipantAccessoryUUID:]
  -[HMDMediaGroupsLocalDataStorage unsetParticipantAccessoryUUIDsWithAssociatedGroupIdentifier:]
  -[HMDMediaGroupsLocalDataStorage nullSentinalUUID]
  -[HMDMediaGroupsLocalDataStorage setParticipantAccessoryUUID:associatedGroupIdentifier:]
  -[HMDMediaGroupsLocalDataStorage addBackedUpGroups:]
  -[HMDMediaGroupsLocalDataStorage addBackedUpGroup:]
  -[HMDMediaGroupsLocalDataStorage removeGroupWithIdentifier:]
  -[HMDMediaGroupsLocalDataStorage routerForParticipantAccessoryUUID:]
  -[HMDMediaGroupsLocalDataStorage backupDataSender]


HMDAccessoryFirmwareUpdateConcurrencyLogEventManager : HMFObject
 @property  NSMutableArray *currentActivity
 @property  NSMutableArray *peakActivity
 @property  NSMutableDictionary *inProgress

  // instance methods
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager currentActivity]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager setInProgress:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager setCurrentActivity:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager inProgress]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager init]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager startStagingWithAccessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager startApplyWithAccessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager stopStagingWithAccessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager stopApplyWithAccessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager startWithCategory:accessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager stopWithCategory:accessory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager differenceFromCounterWithCategory:]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager submitLogEvent]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager peakActivity]
  -[HMDAccessoryFirmwareUpdateConcurrencyLogEventManager setPeakActivity:]


HMDMediaEndpoint : HMFObject <HMFLogging>
 @property  ^v retainedEndpoint
 @property  ^v externalDevice
 @property  NSString *localizedName
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSSet *outputDeviceIdentifiers
 @property  unsigned int connectionState
 @property  NSMutableArray *pendingBlocks
 @property  NSString *logID
 @property  HMDMediaBrowser *browser
 @property  NSString *sessionIdentifier
 @property  NSArray *advertisements
 @property  BOOL connected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaEndpoint logCategory]

  // instance methods
  -[HMDMediaEndpoint sessionIdentifier]
  -[HMDMediaEndpoint connectionState]
  -[HMDMediaEndpoint initWithEndpoint:]
  -[HMDMediaEndpoint logIdentifier]
  -[HMDMediaEndpoint isConnected]
  -[HMDMediaEndpoint disconnectWithCompletionHandler:]
  -[HMDMediaEndpoint advertisements]
  -[HMDMediaEndpoint workQueue]
  -[HMDMediaEndpoint browser]
  -[HMDMediaEndpoint setConnectionState:]
  -[HMDMediaEndpoint dealloc]
  -[HMDMediaEndpoint .cxx_destruct]
  -[HMDMediaEndpoint isEqualToEndpoint:]
  -[HMDMediaEndpoint localizedName]
  -[HMDMediaEndpoint externalDevice]
  -[HMDMediaEndpoint isEqual:]
  -[HMDMediaEndpoint setBrowser:]
  -[HMDMediaEndpoint pendingBlocks]
  -[HMDMediaEndpoint setPendingBlocks:]
  -[HMDMediaEndpoint logID]
  -[HMDMediaEndpoint setPlaybackState:completionHandler:]
  -[HMDMediaEndpoint updateWithEndpoint:]
  -[HMDMediaEndpoint retainedEndpoint]
  -[HMDMediaEndpoint setRetainedEndpoint:]
  -[HMDMediaEndpoint _updateOutputDeviceIdentifiers]
  -[HMDMediaEndpoint outputDeviceIdentifiers]
  -[HMDMediaEndpoint setOutputDeviceIdentifiers:]
  -[HMDMediaEndpoint copyOrigin]
  -[HMDMediaEndpoint disconnectFromEndpoint:]
  -[HMDMediaEndpoint _updateOutputDevicesAndConnectWithCompletionHandler:]
  -[HMDMediaEndpoint updateOutputDevicesAndConnectWithCompletionHandler:]
  -[HMDMediaEndpoint _connectWithCompletionHandler:]
  -[HMDMediaEndpoint registerForNowPlayingUpdates:]
  -[HMDMediaEndpoint doesContainAnyAccessory:]
  -[HMDMediaEndpoint evaluateIfMediaPlaybackStateChanged:withCompletion:]
  -[HMDMediaEndpoint _notifyPendingBlocksOfError:]
  -[HMDMediaEndpoint getPlaybackStateWithCompletionHandler:]
  -[HMDMediaEndpoint _getPlaybackStateWithCompletionHandler:]
  -[HMDMediaEndpoint _setPlaybackState:completionHandler:]


HMDBulletinUIManager : HMFObject
  // class methods
  +[HMDBulletinUIManager openHomeAppWithURL:]
  +[HMDBulletinUIManager presentExecutionErrorDialogForTrigger:partialSuccess:]


HMDCameraRecordingMetricUUIDUtilities : HMFObject
  // class methods
  +[HMDCameraRecordingMetricUUIDUtilities UUIDRotationSalt]
  +[HMDCameraRecordingMetricUUIDUtilities ephemeralUUIDWithUUID:forTimestamp:rotationSchedule:]
  +[HMDCameraRecordingMetricUUIDUtilities currentEphemeralUUIDWithUUID:rotationScheduleDays:]
  +[HMDCameraRecordingMetricUUIDUtilities ephemeralUUIDWithUUID:forTimestamp:rotationScheduleDays:]


AWDHomeKitAddEventTrigger : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasResultErrorCode
 @property  unsigned int resultErrorCode
 @property  BOOL hasEventTrigger
 @property  AWDHomeKitEventTrigger *eventTrigger
 @property  BOOL hasRequestOrigin
 @property  int requestOrigin

  // instance methods
  -[AWDHomeKitAddEventTrigger setTimestamp:]
  -[AWDHomeKitAddEventTrigger copyTo:]
  -[AWDHomeKitAddEventTrigger .cxx_destruct]
  -[AWDHomeKitAddEventTrigger mergeFrom:]
  -[AWDHomeKitAddEventTrigger setHasTimestamp:]
  -[AWDHomeKitAddEventTrigger dictionaryRepresentation]
  -[AWDHomeKitAddEventTrigger hasTimestamp]
  -[AWDHomeKitAddEventTrigger copyWithZone:]
  -[AWDHomeKitAddEventTrigger timestamp]
  -[AWDHomeKitAddEventTrigger readFrom:]
  -[AWDHomeKitAddEventTrigger writeTo:]
  -[AWDHomeKitAddEventTrigger isEqual:]
  -[AWDHomeKitAddEventTrigger eventTrigger]
  -[AWDHomeKitAddEventTrigger setEventTrigger:]
  -[AWDHomeKitAddEventTrigger setResultErrorCode:]
  -[AWDHomeKitAddEventTrigger setHasResultErrorCode:]
  -[AWDHomeKitAddEventTrigger hasResultErrorCode]
  -[AWDHomeKitAddEventTrigger resultErrorCode]
  -[AWDHomeKitAddEventTrigger hasEventTrigger]
  -[AWDHomeKitAddEventTrigger requestOrigin]
  -[AWDHomeKitAddEventTrigger setRequestOrigin:]
  -[AWDHomeKitAddEventTrigger setHasRequestOrigin:]
  -[AWDHomeKitAddEventTrigger hasRequestOrigin]
  -[AWDHomeKitAddEventTrigger requestOriginAsString:]
  -[AWDHomeKitAddEventTrigger StringAsRequestOrigin:]


HMDProcessRelaunchThresholdLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *timeIntervalSincePreviousProcessLaunch

  // instance methods
  -[HMDProcessRelaunchThresholdLogEvent eventName]
  -[HMDProcessRelaunchThresholdLogEvent .cxx_destruct]
  -[HMDProcessRelaunchThresholdLogEvent serializedEvent]
  -[HMDProcessRelaunchThresholdLogEvent initWithTimeSincePreviousLaunch:]
  -[HMDProcessRelaunchThresholdLogEvent timeIntervalSincePreviousProcessLaunch]


HMDHH2MigratorRecord : HMFObject <HMFLogging>
 @property  NSString *hh2MigratorRecordDataStorePath
 @property  BOOL isMigrationInProgress
 @property  unsigned int currentMigrationAttempt
 @property  BOOL shouldSkipKeyRollOperations
 @property  BOOL forceMigrationFailureForTesting
 @property  BOOL migrateFromTestDirectory
 @property  BOOL dryRun
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHH2MigratorRecord logCategory]
  +[HMDHH2MigratorRecord singleRecord]
  +[HMDHH2MigratorRecord prepareDictionary:]
  +[HMDHH2MigratorRecord prepareDictionary:attempt:skipKeyRoll:forceFailForTesting:migrateFromTestDirectory:dryRun:]
  +[HMDHH2MigratorRecord archiveMigratorDict:]
  +[HMDHH2MigratorRecord unarchiveMigratorDict:]
  +[HMDHH2MigratorRecord recordMigrationFailureWithError:]
  +[HMDHH2MigratorRecord lastMigrationFailure]
  +[HMDHH2MigratorRecord removeMigrationFailureRecord]

  // instance methods
  -[HMDHH2MigratorRecord writeToDisk]
  -[HMDHH2MigratorRecord initWithLocalStorePath:]
  -[HMDHH2MigratorRecord attributeDescriptions]
  -[HMDHH2MigratorRecord .cxx_destruct]
  -[HMDHH2MigratorRecord dryRun]
  -[HMDHH2MigratorRecord setDryRun:]
  -[HMDHH2MigratorRecord isMigrationInProgress]
  -[HMDHH2MigratorRecord readMigratorRecord]
  -[HMDHH2MigratorRecord unarchiveRecordFromData:]
  -[HMDHH2MigratorRecord updateValuesFromDict:]
  -[HMDHH2MigratorRecord writeNewMigrationRecord]
  -[HMDHH2MigratorRecord writeMigratorRecord:]
  -[HMDHH2MigratorRecord beginMigration]
  -[HMDHH2MigratorRecord isMaximumMigrationAttemptReached]
  -[HMDHH2MigratorRecord finishMigration]
  -[HMDHH2MigratorRecord setIsMigrationInProgress:]
  -[HMDHH2MigratorRecord currentMigrationAttempt]
  -[HMDHH2MigratorRecord setCurrentMigrationAttempt:]
  -[HMDHH2MigratorRecord shouldSkipKeyRollOperations]
  -[HMDHH2MigratorRecord setShouldSkipKeyRollOperations:]
  -[HMDHH2MigratorRecord forceMigrationFailureForTesting]
  -[HMDHH2MigratorRecord setForceMigrationFailureForTesting:]
  -[HMDHH2MigratorRecord migrateFromTestDirectory]
  -[HMDHH2MigratorRecord setMigrateFromTestDirectory:]
  -[HMDHH2MigratorRecord hh2MigratorRecordDataStorePath]
  -[HMDHH2MigratorRecord setHh2MigratorRecordDataStorePath:]


HMDHomePeriodicReader : HMFObject <HMFLogging>
 @property  NSString *timerID
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomePeriodicReader logCategory]

  // instance methods
  -[HMDHomePeriodicReader configure:]
  -[HMDHomePeriodicReader home]
  -[HMDHomePeriodicReader logIdentifier]
  -[HMDHomePeriodicReader timerID]
  -[HMDHomePeriodicReader workQueue]
  -[HMDHomePeriodicReader setWorkQueue:]
  -[HMDHomePeriodicReader dealloc]
  -[HMDHomePeriodicReader .cxx_destruct]
  -[HMDHomePeriodicReader _startTimer]
  -[HMDHomePeriodicReader setHome:]
  -[HMDHomePeriodicReader handleTimerFiredNotification:]
  -[HMDHomePeriodicReader handleCharacteristicBasedEventAdded:]
  -[HMDHomePeriodicReader residentUpdated]
  -[HMDHomePeriodicReader _characteristicsToRead]
  -[HMDHomePeriodicReader startReadTimer]
  -[HMDHomePeriodicReader checkToIssueRead]
  -[HMDHomePeriodicReader _checkToIssueRead]
  -[HMDHomePeriodicReader _issueCharacteristicRequests:]


HMDActionSetEvent : HMMHomeLogEvent <HMDBiomeLogEvent, HMDMicroLocationLogEvent, HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long triggerSource
 @property  NSUUID *actionSetUUID
 @property  NSUUID *actionSetUniqueIdentifier
 @property  NSString *bundleId
 @property  NSUUID *transactionId
 @property  NSString *clientMetricIdentifier
 @property  unsigned int numAccessoriesModified
 @property  unsigned int numAccessoriesInHome
 @property  unsigned int numNonEmptyScenesInHome
 @property  NSString *serializedIdentifier
 @property  NSString *actionSetName
 @property  NSString *actionSetType
 @property  HMDHome *home
 @property  NSString *homeName
 @property  NSArray *accessoryUUIDs
 @property  NSArray *accessoryUniqueIdentifiers

  // instance methods
  -[HMDActionSetEvent home]
  -[HMDActionSetEvent actionSetType]
  -[HMDActionSetEvent .cxx_destruct]
  -[HMDActionSetEvent actionSetName]
  -[HMDActionSetEvent bundleId]
  -[HMDActionSetEvent clientMetricIdentifier]
  -[HMDActionSetEvent actionSetUUID]
  -[HMDActionSetEvent transactionId]
  -[HMDActionSetEvent homeName]
  -[HMDActionSetEvent actionSetUniqueIdentifier]
  -[HMDActionSetEvent accessoryUniqueIdentifiers]
  -[HMDActionSetEvent accessoryUUIDs]
  -[HMDActionSetEvent biomeEventsRepresentationForLogObserver:]
  -[HMDActionSetEvent shouldTriggerMicroLocationRecordingScanForLogEventObserver:]
  -[HMDActionSetEvent shouldTriggerMicroLocationLocalizationScanForLogEventObserver:]
  -[HMDActionSetEvent microLocationMetadataForLogEventObserver:]
  -[HMDActionSetEvent microLocationScanTriggerTypeForLogEventObserver:]
  -[HMDActionSetEvent AWDMessageType]
  -[HMDActionSetEvent metricForAWD]
  -[HMDActionSetEvent serializedIdentifier]
  -[HMDActionSetEvent initWithActionSet:source:numAccessories:bundleId:transactionId:]
  -[HMDActionSetEvent triggerSource]
  -[HMDActionSetEvent numAccessoriesModified]
  -[HMDActionSetEvent numAccessoriesInHome]
  -[HMDActionSetEvent numNonEmptyScenesInHome]


HMDApplicationInfo : HMFObject <HMFLogging>
 @property  NSData *vendorIdentifier
 @property  BOOL installed
 @property  BOOL entitledForAPIAccess
 @property  BOOL entitledForSPIAccess
 @property  BOOL independent
 @property  HMDApplicationInfo *companionApplicationInfo
 @property  NSString *bundleIdentifier
 @property  NSURL *bundleURL
 @property  HMDApplicationInfo *hostApplicationInfo
 @property  NSArray *processes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDApplicationInfo logCategory]
  +[HMDApplicationInfo applicationInfoForBundleIdentifier:]
  +[HMDApplicationInfo privateVendorIdentifier]
  +[HMDApplicationInfo applicationInfoForBundleURL:]

  // instance methods
  -[HMDApplicationInfo isInstalled]
  -[HMDApplicationInfo logIdentifier]
  -[HMDApplicationInfo vendorIdentifier]
  -[HMDApplicationInfo bundleURL]
  -[HMDApplicationInfo removeProcess:]
  -[HMDApplicationInfo processes]
  -[HMDApplicationInfo attributeDescriptions]
  -[HMDApplicationInfo .cxx_destruct]
  -[HMDApplicationInfo initWithBundleIdentifier:]
  -[HMDApplicationInfo bundleIdentifier]
  -[HMDApplicationInfo shortDescription]
  -[HMDApplicationInfo addProcess:]
  -[HMDApplicationInfo isEqual:]
  -[HMDApplicationInfo init]
  -[HMDApplicationInfo isEntitledForAPIAccess]
  -[HMDApplicationInfo isEntitledForSPIAccess]
  -[HMDApplicationInfo hostApplicationInfo]
  -[HMDApplicationInfo clientIdentifierSalt:]
  -[HMDApplicationInfo isIndependent]
  -[HMDApplicationInfo companionApplicationInfo]


__HMDBundleApplicationInfo : HMDApplicationInfo
  // instance methods
  -[__HMDBundleApplicationInfo initWithRecord:]
  -[__HMDBundleApplicationInfo .cxx_destruct]
  -[__HMDBundleApplicationInfo initWithBundleIdentifier:]
  -[__HMDBundleApplicationInfo isEntitledForAPIAccess]
  -[__HMDBundleApplicationInfo isEntitledForSPIAccess]


__HMDApplicationInfo : __HMDBundleApplicationInfo
  // instance methods
  -[__HMDApplicationInfo isInstalled]
  -[__HMDApplicationInfo initWithRecord:]
  -[__HMDApplicationInfo vendorIdentifier]
  -[__HMDApplicationInfo .cxx_destruct]
  -[__HMDApplicationInfo isEqual:]


__HMDExtensionApplicationInfo : __HMDBundleApplicationInfo
  // instance methods
  -[__HMDExtensionApplicationInfo isInstalled]
  -[__HMDExtensionApplicationInfo initWithRecord:]
  -[__HMDExtensionApplicationInfo vendorIdentifier]
  -[__HMDExtensionApplicationInfo attributeDescriptions]
  -[__HMDExtensionApplicationInfo .cxx_destruct]
  -[__HMDExtensionApplicationInfo isEqual:]
  -[__HMDExtensionApplicationInfo hostApplicationInfo]


HMDHomeInviteLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL received
 @property  BOOL filtered
 @property  BOOL suppressedNotification
 @property  BOOL accepted
 @property  BOOL declined
 @property  BOOL ignored
 @property  BOOL expired
 @property  BOOL isFMFDevice
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDHomeInviteLogEvent updateWithState:isFMFDevice:]
  +[HMDHomeInviteLogEvent updateWithInvitationState:isFMFDevice:]

  // instance methods
  -[HMDHomeInviteLogEvent received]
  -[HMDHomeInviteLogEvent eventName]
  -[HMDHomeInviteLogEvent expired]
  -[HMDHomeInviteLogEvent filtered]
  -[HMDHomeInviteLogEvent ignored]
  -[HMDHomeInviteLogEvent accepted]
  -[HMDHomeInviteLogEvent declined]
  -[HMDHomeInviteLogEvent serializedEvent]
  -[HMDHomeInviteLogEvent initWithHomeInviteLogEventState:isFMFDevice:]
  -[HMDHomeInviteLogEvent suppressedNotification]
  -[HMDHomeInviteLogEvent isFMFDevice]


HMDSoftwareUpdate : HMFObject <HMFLogging, HMFObject, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver, NSSecureCoding>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *identifier
 @property  BOOL allowExtraUpdate
 @property  <HMDSoftwareUpdateDataSource> *dataSource
 @property  HMDSoftwareUpdateModel *model
 @property  HMDAccessory *accessory
 @property  HMFSoftwareVersion *version
 @property  long long state
 @property  unsigned long downloadSize
 @property  double installDuration
 @property  HMSoftwareUpdateDocumentationMetadata *documentationMetadata
 @property  unsigned long updateType
 @property  unsigned long needsAttentionReasons
 @property  NSDate *releaseDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDSoftwareUpdate supportsSecureCoding]
  +[HMDSoftwareUpdate logCategory]
  +[HMDSoftwareUpdate hasMessageReceiverChildren]
  +[HMDSoftwareUpdate modelNamespace]

  // instance methods
  -[HMDSoftwareUpdate setReleaseDate:]
  -[HMDSoftwareUpdate accessory]
  -[HMDSoftwareUpdate releaseDate]
  -[HMDSoftwareUpdate initWithModel:]
  -[HMDSoftwareUpdate identifier]
  -[HMDSoftwareUpdate logIdentifier]
  -[HMDSoftwareUpdate propertyDescription]
  -[HMDSoftwareUpdate dataSource]
  -[HMDSoftwareUpdate model]
  -[HMDSoftwareUpdate setAccessory:]
  -[HMDSoftwareUpdate encodeWithCoder:]
  -[HMDSoftwareUpdate state]
  -[HMDSoftwareUpdate dealloc]
  -[HMDSoftwareUpdate setUpdateType:]
  -[HMDSoftwareUpdate .cxx_destruct]
  -[HMDSoftwareUpdate messageTargetUUID]
  -[HMDSoftwareUpdate messageDestination]
  -[HMDSoftwareUpdate version]
  -[HMDSoftwareUpdate setIdentifier:]
  -[HMDSoftwareUpdate updateType]
  -[HMDSoftwareUpdate setDataSource:]
  -[HMDSoftwareUpdate invalidate]
  -[HMDSoftwareUpdate messageReceiveQueue]
  -[HMDSoftwareUpdate downloadSize]
  -[HMDSoftwareUpdate messageDispatcher]
  -[HMDSoftwareUpdate isEqual:]
  -[HMDSoftwareUpdate setState:]
  -[HMDSoftwareUpdate initWithCoder:]
  -[HMDSoftwareUpdate documentationMetadata]
  -[HMDSoftwareUpdate setDocumentationMetadata:]
  -[HMDSoftwareUpdate initWithVersion:downloadSize:state:installDuration:documentationMetadata:releaseDate:]
  -[HMDSoftwareUpdate needsAttentionReasons]
  -[HMDSoftwareUpdate setNeedsAttentionReasons:]
  -[HMDSoftwareUpdate installDuration]
  -[HMDSoftwareUpdate registerForMessages]
  -[HMDSoftwareUpdate transactionObjectUpdated:newValues:message:]
  -[HMDSoftwareUpdate transactionObjectRemoved:message:]
  -[HMDSoftwareUpdate setMessageDispatcher:]
  -[HMDSoftwareUpdate transactionWithObjectChangeType:]
  -[HMDSoftwareUpdate _handleUpdateState:]
  -[HMDSoftwareUpdate _handleUpdateDocumentationMetadata:]
  -[HMDSoftwareUpdate _handleDocumentationRequest:]
  -[HMDSoftwareUpdate _handleNeedsAttentionReasonsRequest:]
  -[HMDSoftwareUpdate configureWithAccessory:dataSource:messageDispatcher:]
  -[HMDSoftwareUpdate updateLocalState:]
  -[HMDSoftwareUpdate _updateState:message:options:]
  -[HMDSoftwareUpdate _handleDocumentationStateNotification:]
  -[HMDSoftwareUpdate transactionWithObjectChangeType:forAccessoryUUID:]
  -[HMDSoftwareUpdate allowExtraUpdate]
  -[HMDSoftwareUpdate setAllowExtraUpdate:]


HMDSoftwareUpdateModel : HMDBackingStoreModelObject
 @property  HMFSoftwareVersion *softwareVersion
 @property  NSNumber *state
 @property  NSNumber *downloadSize
 @property  NSNumber *installDuration
 @property  HMSoftwareUpdateDocumentationMetadata *documentationMetadata
 @property  NSDate *releaseDate

  // class methods
  +[HMDSoftwareUpdateModel properties]


HMDHomeReprovisioningPendingInformation : NSObject
 @property  NSUUID *messageIdentifier
 @property  HMDAccessoryNetworkCredential *networkCredential

  // instance methods
  -[HMDHomeReprovisioningPendingInformation .cxx_destruct]
  -[HMDHomeReprovisioningPendingInformation messageIdentifier]
  -[HMDHomeReprovisioningPendingInformation initWithMessageUUID:networkCredential:]
  -[HMDHomeReprovisioningPendingInformation networkCredential]


HMDHomeReprovisionHandler : HMFObject <HMFTimerDelegate, HMFLogging, HMDHomeMessageReceiver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomeReprovisionHandler logCategory]
  +[HMDHomeReprovisionHandler hasMessageReceiverChildren]

  // instance methods
  -[HMDHomeReprovisionHandler timerDidFire:]
  -[HMDHomeReprovisionHandler logIdentifier]
  -[HMDHomeReprovisionHandler dealloc]
  -[HMDHomeReprovisionHandler .cxx_destruct]
  -[HMDHomeReprovisionHandler messageTargetUUID]
  -[HMDHomeReprovisionHandler messageReceiveQueue]
  -[HMDHomeReprovisionHandler init]
  -[HMDHomeReprovisionHandler _handleRequestSearchForAccessoriesNeedingReprovisioning:]
  -[HMDHomeReprovisionHandler _handleReprovisionAccessory:]
  -[HMDHomeReprovisionHandler configure:queue:messageDispatcher:]
  -[HMDHomeReprovisionHandler handleFoundAccessoryNeedingReprovisioning:error:]
  -[HMDHomeReprovisionHandler handleReprovionedAccessory:identifier:error:]


HMDProcessMemoryPressureNotificationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging, HMDAWDLogEvent>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *processMemoryState
 @property  NSString *dataSyncState

  // class methods
  +[HMDProcessMemoryPressureNotificationLogEvent createEventWithProcessMemoryState:dataSyncState:]

  // instance methods
  -[HMDProcessMemoryPressureNotificationLogEvent eventName]
  -[HMDProcessMemoryPressureNotificationLogEvent .cxx_destruct]
  -[HMDProcessMemoryPressureNotificationLogEvent dataSyncState]
  -[HMDProcessMemoryPressureNotificationLogEvent serializedEvent]
  -[HMDProcessMemoryPressureNotificationLogEvent AWDMessageType]
  -[HMDProcessMemoryPressureNotificationLogEvent metricForAWD]
  -[HMDProcessMemoryPressureNotificationLogEvent initWithProcessMemoryState:dataSyncState:]
  -[HMDProcessMemoryPressureNotificationLogEvent processMemoryState]


HMDEventCounter : NSObject
 @property  unsigned long count
 @property  NSArray *observers

  // instance methods
  -[HMDEventCounter setCount:]
  -[HMDEventCounter initWithCount:]
  -[HMDEventCounter .cxx_destruct]
  -[HMDEventCounter count]
  -[HMDEventCounter setObservers:]
  -[HMDEventCounter init]
  -[HMDEventCounter observers]


HMDEventCounterGroup : HMFObject
 @property  NSMutableDictionary *mutableEventCounters
 @property  <HMDEventCounterContext> *context
 @property  NSDictionary *eventCounters
 @property  unsigned long summedEventCounters

  // instance methods
  -[HMDEventCounterGroup setObject:forKeyedSubscript:]
  -[HMDEventCounterGroup .cxx_destruct]
  -[HMDEventCounterGroup objectForKeyedSubscript:]
  -[HMDEventCounterGroup context]
  -[HMDEventCounterGroup forceSave]
  -[HMDEventCounterGroup initWithContext:serializedEventCounters:]
  -[HMDEventCounterGroup addObserver:forEventName:]
  -[HMDEventCounterGroup _getOrCreateEventCounterForEventName:]
  -[HMDEventCounterGroup incrementEventCounterForEventName:withValue:]
  -[HMDEventCounterGroup incrementEventCounterForEventName:]
  -[HMDEventCounterGroup fetchEventCounterForEventName:]
  -[HMDEventCounterGroup eventCounters]
  -[HMDEventCounterGroup summedEventCounters]
  -[HMDEventCounterGroup resetEventCounterForEventName:]
  -[HMDEventCounterGroup _resetEventCounterForEventName:]
  -[HMDEventCounterGroup resetEventCounters]
  -[HMDEventCounterGroup mutableEventCounters]


AWDHomeKitActionSetTriggered : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasTransaction
 @property  NSString *transaction
 @property  BOOL hasTriggerSource
 @property  int triggerSource
 @property  BOOL hasNumAccessories
 @property  unsigned int numAccessories
 @property  BOOL hasClientMetricIdentifier
 @property  NSString *clientMetricIdentifier

  // instance methods
  -[AWDHomeKitActionSetTriggered hasErrorCode]
  -[AWDHomeKitActionSetTriggered setErrorCode:]
  -[AWDHomeKitActionSetTriggered errorCode]
  -[AWDHomeKitActionSetTriggered setDuration:]
  -[AWDHomeKitActionSetTriggered setTimestamp:]
  -[AWDHomeKitActionSetTriggered hasDuration]
  -[AWDHomeKitActionSetTriggered copyTo:]
  -[AWDHomeKitActionSetTriggered numAccessories]
  -[AWDHomeKitActionSetTriggered transaction]
  -[AWDHomeKitActionSetTriggered .cxx_destruct]
  -[AWDHomeKitActionSetTriggered setNumAccessories:]
  -[AWDHomeKitActionSetTriggered setHasErrorCode:]
  -[AWDHomeKitActionSetTriggered duration]
  -[AWDHomeKitActionSetTriggered mergeFrom:]
  -[AWDHomeKitActionSetTriggered setTransaction:]
  -[AWDHomeKitActionSetTriggered setHasTimestamp:]
  -[AWDHomeKitActionSetTriggered dictionaryRepresentation]
  -[AWDHomeKitActionSetTriggered hasTimestamp]
  -[AWDHomeKitActionSetTriggered clientMetricIdentifier]
  -[AWDHomeKitActionSetTriggered copyWithZone:]
  -[AWDHomeKitActionSetTriggered timestamp]
  -[AWDHomeKitActionSetTriggered readFrom:]
  -[AWDHomeKitActionSetTriggered setClientMetricIdentifier:]
  -[AWDHomeKitActionSetTriggered setHasDuration:]
  -[AWDHomeKitActionSetTriggered writeTo:]
  -[AWDHomeKitActionSetTriggered isEqual:]
  -[AWDHomeKitActionSetTriggered hasTransaction]
  -[AWDHomeKitActionSetTriggered hasClientMetricIdentifier]
  -[AWDHomeKitActionSetTriggered triggerSource]
  -[AWDHomeKitActionSetTriggered setTriggerSource:]
  -[AWDHomeKitActionSetTriggered setHasTriggerSource:]
  -[AWDHomeKitActionSetTriggered hasTriggerSource]
  -[AWDHomeKitActionSetTriggered triggerSourceAsString:]
  -[AWDHomeKitActionSetTriggered StringAsTriggerSource:]
  -[AWDHomeKitActionSetTriggered setHasNumAccessories:]
  -[AWDHomeKitActionSetTriggered hasNumAccessories]


HMDAccessoryServerDemo : HAPAccessoryServer
 @property  HMDAccessoryServerBrowserDemo *browser
 @property  BOOL _paired
 @property  BOOL _hasPairings
 @property  NSDictionary *accessoryInfo
 @property  BOOL testMode

  // instance methods
  -[HMDAccessoryServerDemo testMode]
  -[HMDAccessoryServerDemo linkType]
  -[HMDAccessoryServerDemo setCategory:]
  -[HMDAccessoryServerDemo isPaired]
  -[HMDAccessoryServerDemo browser]
  -[HMDAccessoryServerDemo category]
  -[HMDAccessoryServerDemo .cxx_destruct]
  -[HMDAccessoryServerDemo _delegateRespondsToSelector:]
  -[HMDAccessoryServerDemo setBrowser:]
  -[HMDAccessoryServerDemo _paired]
  -[HMDAccessoryServerDemo hasPairings]
  -[HMDAccessoryServerDemo _hasPairings]
  -[HMDAccessoryServerDemo discoverAccessories]
  -[HMDAccessoryServerDemo startPairingWithRequest:]
  -[HMDAccessoryServerDemo continuePairingAfterAuthPrompt]
  -[HMDAccessoryServerDemo tryPairingPassword:error:]
  -[HMDAccessoryServerDemo stopPairingWithError:]
  -[HMDAccessoryServerDemo readCharacteristicValues:timeout:completionQueue:completionHandler:]
  -[HMDAccessoryServerDemo writeCharacteristicValues:timeout:completionQueue:completionHandler:]
  -[HMDAccessoryServerDemo handleUpdatesForCharacteristics:stateNumber:]
  -[HMDAccessoryServerDemo enableEvents:forCharacteristics:withCompletionHandler:queue:]
  -[HMDAccessoryServerDemo addPairing:completionQueue:completionHandler:]
  -[HMDAccessoryServerDemo removePairing:completionQueue:completionHandler:]
  -[HMDAccessoryServerDemo removePairingForCurrentControllerOnQueue:completion:]
  -[HMDAccessoryServerDemo listPairingsWithCompletionQueue:completionHandler:]
  -[HMDAccessoryServerDemo identifyWithCompletion:]
  -[HMDAccessoryServerDemo initCommon:browser:]
  -[HMDAccessoryServerDemo initWithName:identifier:deviceInfo:paired:keyStore:testMode:browser:]
  -[HMDAccessoryServerDemo _parseAttributeDatabase:]
  -[HMDAccessoryServerDemo sendDelayedResponse:responses:readOperation:completionQueue:completionHandler:]
  -[HMDAccessoryServerDemo processCharacteristicWrite:value:]
  -[HMDAccessoryServerDemo accessoryInfo]
  -[HMDAccessoryServerDemo setAccessoryInfo:]
  -[HMDAccessoryServerDemo set_paired:]
  -[HMDAccessoryServerDemo set_hasPairings:]


HMDLogEventAnalyzer : HMFObject <HMFLogging, HMMLogEventObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLogEventAnalyzer logCategory]
  +[HMDLogEventAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventAnalyzer didReceiveEventFromDispatcher:]


HMDMessageFilter : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *name
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMessageFilter logCategory]

  // instance methods
  -[HMDMessageFilter workQueue]
  -[HMDMessageFilter setWorkQueue:]
  -[HMDMessageFilter .cxx_destruct]
  -[HMDMessageFilter initWithName:]
  -[HMDMessageFilter name]
  -[HMDMessageFilter queue]
  -[HMDMessageFilter resetConfiguration]
  -[HMDMessageFilter acceptMessage:target:errorReason:]
  -[HMDMessageFilter shouldCloudSyncData]


HMDMessageFilterChain : HMFObject
 @property  NSArray *filters

  // instance methods
  -[HMDMessageFilterChain filters]
  -[HMDMessageFilterChain .cxx_destruct]
  -[HMDMessageFilterChain init]
  -[HMDMessageFilterChain shouldCloudSyncData]
  -[HMDMessageFilterChain addMessageFilter:]
  -[HMDMessageFilterChain removeMessageFilter:]
  -[HMDMessageFilterChain acceptMessage:error:]
  -[HMDMessageFilterChain resetConfiguration:completionHandler:]


HMDCloudDataSyncStateFilter : HMDMessageFilter <HMFMessageReceiver, HMFTimerDelegate, HMFLogging>
 @property  NSUUID *uuid
 @property  BOOL keychainSyncEnabled
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSObject<OS_dispatch_source> *popupTimer
 @property  NSObject<OS_dispatch_source> *iCloudSwitchPopupTimer
 @property  BOOL keychainSyncRequiredPopShown
 @property  BOOL iCloudSwitchRequiredPopShown
 @property  BOOL iCloudAccountActive
 @property  BOOL cloudDataSyncCompleted
 @property  BOOL serverTokenAvailable
 @property  BOOL iCloudSwitchStateEnabled
 @property  BOOL localDataDecryptionFailed
 @property  long long totalHomes
 @property  BOOL networkConnectivityAvailable
 @property  HMFTimer *cloudDataSyncInProgressTimer
 @property  double remainingDataSyncPeriod
 @property  NSDate *dataSyncTimerStartTimestamp
 @property  HMFTimer *resetConfigDisplayTimer
 @property  double remainingResetConfigDisplayPeriod
 @property  NSDate *resetConfigDisplayTimerStartTimestamp
 @property  BOOL resetConfigDisplayTimeHasElapsed
 @property  BOOL hasHH2MigrationAlreadyRequested
 @property  HMDHomeManager *homeManager
 @property  BOOL keychainSyncPeerAvailable
 @property  BOOL cloudDataSyncPeerAvailable
 @property  BOOL homeManagerFirstFetchFinished
 @property  BOOL decryptionFailed
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudDataSyncStateFilter logCategory]
  +[HMDCloudDataSyncStateFilter isWhitelistedMessage:]

  // instance methods
  -[HMDCloudDataSyncStateFilter timerDidFire:]
  -[HMDCloudDataSyncStateFilter dealloc]
  -[HMDCloudDataSyncStateFilter uuid]
  -[HMDCloudDataSyncStateFilter .cxx_destruct]
  -[HMDCloudDataSyncStateFilter setUuid:]
  -[HMDCloudDataSyncStateFilter messageTargetUUID]
  -[HMDCloudDataSyncStateFilter homeManager]
  -[HMDCloudDataSyncStateFilter setHomeManager:]
  -[HMDCloudDataSyncStateFilter messageReceiveQueue]
  -[HMDCloudDataSyncStateFilter msgDispatcher]
  -[HMDCloudDataSyncStateFilter resetConfiguration]
  -[HMDCloudDataSyncStateFilter setMsgDispatcher:]
  -[HMDCloudDataSyncStateFilter _registerForMessages]
  -[HMDCloudDataSyncStateFilter keychainSyncEnabled]
  -[HMDCloudDataSyncStateFilter totalHomes]
  -[HMDCloudDataSyncStateFilter decryptionFailed]
  -[HMDCloudDataSyncStateFilter setDecryptionFailed:]
  -[HMDCloudDataSyncStateFilter setKeychainSyncEnabled:]
  -[HMDCloudDataSyncStateFilter _handleCloudZoneReadyNotification:]
  -[HMDCloudDataSyncStateFilter acceptMessage:target:errorReason:]
  -[HMDCloudDataSyncStateFilter shouldCloudSyncData]
  -[HMDCloudDataSyncStateFilter handleKeychainSyncStateChangedNotification:]
  -[HMDCloudDataSyncStateFilter initWithName:homeManager:messageDispatcher:serverTokenAvailable:homeDataHasBeenDecrypted:homeManagerServerTokenAvailable:localDataDecryptionFailed:totalHomes:currentAccount:]
  -[HMDCloudDataSyncStateFilter _updateKeychainSyncEnabled:]
  -[HMDCloudDataSyncStateFilter _postNotificationForDataSyncInProgress:dataSyncState:forcePost:]
  -[HMDCloudDataSyncStateFilter areWeAllowedToAutoMigrateEmptyAccountsToHH2]
  -[HMDCloudDataSyncStateFilter _evaluateMoveToHH2]
  -[HMDCloudDataSyncStateFilter _verifyAccountStatusForMigration]
  -[HMDCloudDataSyncStateFilter _moveDirectlyToHH2IfAccountIsEmpty]
  -[HMDCloudDataSyncStateFilter moveDirectlyToHH2IfAccountOnlyHasUpgradedSharedHomes]
  -[HMDCloudDataSyncStateFilter totalHomesInCloudZones:]
  -[HMDCloudDataSyncStateFilter startDataConfigResetTimers]
  -[HMDCloudDataSyncStateFilter _startDataConfigResetTimers]
  -[HMDCloudDataSyncStateFilter _stopDataConfigResetTimers]
  -[HMDCloudDataSyncStateFilter updateNetworkConnectivity:]
  -[HMDCloudDataSyncStateFilter _startCloudDataSyncTimer]
  -[HMDCloudDataSyncStateFilter _stopCloudDataSyncTimer]
  -[HMDCloudDataSyncStateFilter _resetCloudDataSyncTimer]
  -[HMDCloudDataSyncStateFilter _stallCloudDataSyncTimer]
  -[HMDCloudDataSyncStateFilter kickResetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter _startResetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter _stopResetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter _clearResetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter _stallResetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter _handleAccountStatusChanged:]
  -[HMDCloudDataSyncStateFilter _startPopupTimer]
  -[HMDCloudDataSyncStateFilter _stopPopupTimer]
  -[HMDCloudDataSyncStateFilter _startiCloudSwitchPopupTimer]
  -[HMDCloudDataSyncStateFilter _stopiCloudSwitchPopupTimer]
  -[HMDCloudDataSyncStateFilter updateTotalHomes:]
  -[HMDCloudDataSyncStateFilter updateCurrentAccount:]
  -[HMDCloudDataSyncStateFilter _updateCurrentAccount:]
  -[HMDCloudDataSyncStateFilter dataSyncInProgressWithState:withMessage:]
  -[HMDCloudDataSyncStateFilter _cloudSyncinProgressCheck:supressPopup:sendCanceledError:dataSyncState:]
  -[HMDCloudDataSyncStateFilter updateCloudDataSyncState:]
  -[HMDCloudDataSyncStateFilter _updateCloudDataSyncState:]
  -[HMDCloudDataSyncStateFilter updateWithoutDataSynCheckServerTokenAvailable:]
  -[HMDCloudDataSyncStateFilter updateServerTokenAvailable:]
  -[HMDCloudDataSyncStateFilter updateiCloudSwitchState:]
  -[HMDCloudDataSyncStateFilter isiCloudSwitchEnabled]
  -[HMDCloudDataSyncStateFilter updateLocalDataDecryptionFailed:]
  -[HMDCloudDataSyncStateFilter isLocalDataDecryptionFailed]
  -[HMDCloudDataSyncStateFilter popupTimer]
  -[HMDCloudDataSyncStateFilter setPopupTimer:]
  -[HMDCloudDataSyncStateFilter iCloudSwitchPopupTimer]
  -[HMDCloudDataSyncStateFilter setICloudSwitchPopupTimer:]
  -[HMDCloudDataSyncStateFilter keychainSyncRequiredPopShown]
  -[HMDCloudDataSyncStateFilter setKeychainSyncRequiredPopShown:]
  -[HMDCloudDataSyncStateFilter iCloudSwitchRequiredPopShown]
  -[HMDCloudDataSyncStateFilter setICloudSwitchRequiredPopShown:]
  -[HMDCloudDataSyncStateFilter iCloudAccountActive]
  -[HMDCloudDataSyncStateFilter setICloudAccountActive:]
  -[HMDCloudDataSyncStateFilter cloudDataSyncCompleted]
  -[HMDCloudDataSyncStateFilter setCloudDataSyncCompleted:]
  -[HMDCloudDataSyncStateFilter serverTokenAvailable]
  -[HMDCloudDataSyncStateFilter setServerTokenAvailable:]
  -[HMDCloudDataSyncStateFilter iCloudSwitchStateEnabled]
  -[HMDCloudDataSyncStateFilter setICloudSwitchStateEnabled:]
  -[HMDCloudDataSyncStateFilter localDataDecryptionFailed]
  -[HMDCloudDataSyncStateFilter setLocalDataDecryptionFailed:]
  -[HMDCloudDataSyncStateFilter setTotalHomes:]
  -[HMDCloudDataSyncStateFilter networkConnectivityAvailable]
  -[HMDCloudDataSyncStateFilter setNetworkConnectivityAvailable:]
  -[HMDCloudDataSyncStateFilter cloudDataSyncInProgressTimer]
  -[HMDCloudDataSyncStateFilter setCloudDataSyncInProgressTimer:]
  -[HMDCloudDataSyncStateFilter remainingDataSyncPeriod]
  -[HMDCloudDataSyncStateFilter setRemainingDataSyncPeriod:]
  -[HMDCloudDataSyncStateFilter dataSyncTimerStartTimestamp]
  -[HMDCloudDataSyncStateFilter setDataSyncTimerStartTimestamp:]
  -[HMDCloudDataSyncStateFilter resetConfigDisplayTimer]
  -[HMDCloudDataSyncStateFilter setResetConfigDisplayTimer:]
  -[HMDCloudDataSyncStateFilter remainingResetConfigDisplayPeriod]
  -[HMDCloudDataSyncStateFilter setRemainingResetConfigDisplayPeriod:]
  -[HMDCloudDataSyncStateFilter resetConfigDisplayTimerStartTimestamp]
  -[HMDCloudDataSyncStateFilter setResetConfigDisplayTimerStartTimestamp:]
  -[HMDCloudDataSyncStateFilter resetConfigDisplayTimeHasElapsed]
  -[HMDCloudDataSyncStateFilter setResetConfigDisplayTimeHasElapsed:]
  -[HMDCloudDataSyncStateFilter hasHH2MigrationAlreadyRequested]
  -[HMDCloudDataSyncStateFilter setHasHH2MigrationAlreadyRequested:]
  -[HMDCloudDataSyncStateFilter isKeychainSyncPeerAvailable]
  -[HMDCloudDataSyncStateFilter setKeychainSyncPeerAvailable:]
  -[HMDCloudDataSyncStateFilter isCloudDataSyncPeerAvailable]
  -[HMDCloudDataSyncStateFilter setCloudDataSyncPeerAvailable:]
  -[HMDCloudDataSyncStateFilter isHomeManagerFirstFetchFinished]
  -[HMDCloudDataSyncStateFilter setHomeManagerFirstFetchFinished:]


HMDRemoteAccountMessageFilter : HMDMessageFilter
 @property  HMDAppleAccountManager *appleAccountManager
 @property  <HAPKeyStore> *systemKeychainStore
 @property  HMFMessageDestination *target
 @property  NSArray *whitelistedMessages

  // class methods
  +[HMDRemoteAccountMessageFilter logCategory]

  // instance methods
  -[HMDRemoteAccountMessageFilter initWithTarget:]
  -[HMDRemoteAccountMessageFilter logIdentifier]
  -[HMDRemoteAccountMessageFilter target]
  -[HMDRemoteAccountMessageFilter .cxx_destruct]
  -[HMDRemoteAccountMessageFilter initWithName:]
  -[HMDRemoteAccountMessageFilter appleAccountManager]
  -[HMDRemoteAccountMessageFilter acceptMessage:target:errorReason:]
  -[HMDRemoteAccountMessageFilter initWithTarget:whitelistedMessages:]
  -[HMDRemoteAccountMessageFilter initWithTarget:whitelistedMessages:appleAccountManager:systemKeychainStore:]
  -[HMDRemoteAccountMessageFilter whitelistedMessages]
  -[HMDRemoteAccountMessageFilter setAppleAccountManager:]
  -[HMDRemoteAccountMessageFilter systemKeychainStore]
  -[HMDRemoteAccountMessageFilter setSystemKeychainStore:]


HMDSecureRemoteMessageFilter : HMDMessageFilter
  // class methods
  +[HMDSecureRemoteMessageFilter logCategory]
  +[HMDSecureRemoteMessageFilter isWhitelistedMessage:]

  // instance methods
  -[HMDSecureRemoteMessageFilter logIdentifier]
  -[HMDSecureRemoteMessageFilter acceptMessage:target:errorReason:]


HomeKitEventRemoteLoginEvent : HMMLogEvent <HMDAWDLogEvent, HomeKitEventRemoteLoginMetricProtocol>
 @property  AWDHomeKitRemoteLogin *metric
 @property  NSDate *startTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventRemoteLoginEvent startTime]
  -[HomeKitEventRemoteLoginEvent metric]
  -[HomeKitEventRemoteLoginEvent .cxx_destruct]
  -[HomeKitEventRemoteLoginEvent setError:]
  -[HomeKitEventRemoteLoginEvent initWithSessionID:]
  -[HomeKitEventRemoteLoginEvent AWDMessageType]
  -[HomeKitEventRemoteLoginEvent metricForAWD]


HomeKitEventRemoteLogoutEvent : HMMLogEvent <HMDAWDLogEvent, HomeKitEventRemoteLoginMetricProtocol>
 @property  AWDHomeKitRemoteLogout *metric
 @property  NSDate *startTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventRemoteLogoutEvent startTime]
  -[HomeKitEventRemoteLogoutEvent metric]
  -[HomeKitEventRemoteLogoutEvent .cxx_destruct]
  -[HomeKitEventRemoteLogoutEvent setError:]
  -[HomeKitEventRemoteLogoutEvent initWithSessionID:]
  -[HomeKitEventRemoteLogoutEvent AWDMessageType]
  -[HomeKitEventRemoteLogoutEvent metricForAWD]


HMDPersonSettingsManagerDependencyFactory : NSObject <HMDPersonSettingsManagerDependencyFactory>
 @property  <HMDFileManager> *fileManager
 @property  <HMDPersistentStore> *persistentStore

  // instance methods
  -[HMDPersonSettingsManagerDependencyFactory persistentStore]
  -[HMDPersonSettingsManagerDependencyFactory fileManager]


HMDPersonSettingsManager : HMFObject <HMFMessageReceiver, HMFLogging>
 @property  HMDHome *home
 @property  HMBLocalZone *localZone
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDPersonSettingsManagerDependencyFactory> *dependencyFactory
 @property  NSUUID *UUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSURL *personSettingsManagerMigrationFileURL
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPersonSettingsManager logCategory]

  // instance methods
  -[HMDPersonSettingsManager configure]
  -[HMDPersonSettingsManager home]
  -[HMDPersonSettingsManager logIdentifier]
  -[HMDPersonSettingsManager remove]
  -[HMDPersonSettingsManager workQueue]
  -[HMDPersonSettingsManager .cxx_destruct]
  -[HMDPersonSettingsManager messageTargetUUID]
  -[HMDPersonSettingsManager UUID]
  -[HMDPersonSettingsManager localZone]
  -[HMDPersonSettingsManager messageReceiveQueue]
  -[HMDPersonSettingsManager messageDispatcher]
  -[HMDPersonSettingsManager dependencyFactory]
  -[HMDPersonSettingsManager _registerForMessages]
  -[HMDPersonSettingsManager _handleFetchClassificationNotificationsEnabledForPersonMessage:]
  -[HMDPersonSettingsManager _handleSetClassificationNotificationsEnabledForPersonMessage:]
  -[HMDPersonSettingsManager initWithHome:localZone:workQueue:]
  -[HMDPersonSettingsManager initWithHome:localZone:dependencyFactory:workQueue:]
  -[HMDPersonSettingsManager areClassificationNotificationsEnabledForPersonUUID:]
  -[HMDPersonSettingsManager personSettingsManagerMigrationFileURL]
  -[HMDPersonSettingsManager savePersonManagerSettingsToLocalDiskForMigration]
  -[HMDPersonSettingsManager _setClassificationNotificationsEnabled:forPersonUUID:]


HMDActiveXPCClientConnectionsPeriodicTimer : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  NSHashTable *mutableClientConnections
 @property  HMFTimer *timer
 @property  @? timerFactory
 @property  double timeInterval
 @property  NSSet *clientConnections
 @property  <HMDActiveXPCClientConnectionsPeriodicTimerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDActiveXPCClientConnectionsPeriodicTimer logCategory]

  // instance methods
  -[HMDActiveXPCClientConnectionsPeriodicTimer clientConnections]
  -[HMDActiveXPCClientConnectionsPeriodicTimer timerDidFire:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer logIdentifier]
  -[HMDActiveXPCClientConnectionsPeriodicTimer setDelegate:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer timeInterval]
  -[HMDActiveXPCClientConnectionsPeriodicTimer workQueue]
  -[HMDActiveXPCClientConnectionsPeriodicTimer delegate]
  -[HMDActiveXPCClientConnectionsPeriodicTimer .cxx_destruct]
  -[HMDActiveXPCClientConnectionsPeriodicTimer setTimer:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer _updateTimer]
  -[HMDActiveXPCClientConnectionsPeriodicTimer timer]
  -[HMDActiveXPCClientConnectionsPeriodicTimer removeClientConnection:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer timerFactory]
  -[HMDActiveXPCClientConnectionsPeriodicTimer setTimerFactory:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer handleClientConnectionDidActivate:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer handleClientConnectionDidDeactivate:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer initWithTimeInterval:logIdentifier:workQueue:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer addClientConnection:]
  -[HMDActiveXPCClientConnectionsPeriodicTimer mutableClientConnections]


AWDHomeKitSiriCommand : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasActionType
 @property  int actionType
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasOutcome
 @property  int outcome
 @property  BOOL hasNumEntities
 @property  unsigned int numEntities
 @property  BOOL hasNumFailures
 @property  unsigned int numFailures
 @property  BOOL hasNumIncompleteOperations
 @property  unsigned int numIncompleteOperations
 @property  BOOL hasCurrentConfigurationVersion
 @property  unsigned int currentConfigurationVersion
 @property  BOOL hasLastSyncedConfigurationVersion
 @property  unsigned int lastSyncedConfigurationVersion
 @property  BOOL hasServerConfigurationVersion
 @property  unsigned int serverConfigurationVersion
 @property  BOOL hasClientMetricIdentifier
 @property  NSString *clientMetricIdentifier

  // instance methods
  -[AWDHomeKitSiriCommand setDuration:]
  -[AWDHomeKitSiriCommand setActionType:]
  -[AWDHomeKitSiriCommand setTimestamp:]
  -[AWDHomeKitSiriCommand hasDuration]
  -[AWDHomeKitSiriCommand actionType]
  -[AWDHomeKitSiriCommand copyTo:]
  -[AWDHomeKitSiriCommand actionTypeAsString:]
  -[AWDHomeKitSiriCommand .cxx_destruct]
  -[AWDHomeKitSiriCommand duration]
  -[AWDHomeKitSiriCommand mergeFrom:]
  -[AWDHomeKitSiriCommand setHasTimestamp:]
  -[AWDHomeKitSiriCommand setHasActionType:]
  -[AWDHomeKitSiriCommand dictionaryRepresentation]
  -[AWDHomeKitSiriCommand hasTimestamp]
  -[AWDHomeKitSiriCommand clientMetricIdentifier]
  -[AWDHomeKitSiriCommand copyWithZone:]
  -[AWDHomeKitSiriCommand timestamp]
  -[AWDHomeKitSiriCommand readFrom:]
  -[AWDHomeKitSiriCommand setClientMetricIdentifier:]
  -[AWDHomeKitSiriCommand setHasDuration:]
  -[AWDHomeKitSiriCommand writeTo:]
  -[AWDHomeKitSiriCommand StringAsActionType:]
  -[AWDHomeKitSiriCommand hasActionType]
  -[AWDHomeKitSiriCommand isEqual:]
  -[AWDHomeKitSiriCommand outcome]
  -[AWDHomeKitSiriCommand setOutcome:]
  -[AWDHomeKitSiriCommand hasOutcome]
  -[AWDHomeKitSiriCommand setHasOutcome:]
  -[AWDHomeKitSiriCommand outcomeAsString:]
  -[AWDHomeKitSiriCommand StringAsOutcome:]
  -[AWDHomeKitSiriCommand lastSyncedConfigurationVersion]
  -[AWDHomeKitSiriCommand setLastSyncedConfigurationVersion:]
  -[AWDHomeKitSiriCommand hasClientMetricIdentifier]
  -[AWDHomeKitSiriCommand serverConfigurationVersion]
  -[AWDHomeKitSiriCommand setNumEntities:]
  -[AWDHomeKitSiriCommand setHasNumEntities:]
  -[AWDHomeKitSiriCommand hasNumEntities]
  -[AWDHomeKitSiriCommand setNumFailures:]
  -[AWDHomeKitSiriCommand setHasNumFailures:]
  -[AWDHomeKitSiriCommand hasNumFailures]
  -[AWDHomeKitSiriCommand setNumIncompleteOperations:]
  -[AWDHomeKitSiriCommand setHasNumIncompleteOperations:]
  -[AWDHomeKitSiriCommand hasNumIncompleteOperations]
  -[AWDHomeKitSiriCommand setCurrentConfigurationVersion:]
  -[AWDHomeKitSiriCommand setHasCurrentConfigurationVersion:]
  -[AWDHomeKitSiriCommand hasCurrentConfigurationVersion]
  -[AWDHomeKitSiriCommand setHasLastSyncedConfigurationVersion:]
  -[AWDHomeKitSiriCommand hasLastSyncedConfigurationVersion]
  -[AWDHomeKitSiriCommand setServerConfigurationVersion:]
  -[AWDHomeKitSiriCommand setHasServerConfigurationVersion:]
  -[AWDHomeKitSiriCommand hasServerConfigurationVersion]
  -[AWDHomeKitSiriCommand numEntities]
  -[AWDHomeKitSiriCommand numFailures]
  -[AWDHomeKitSiriCommand numIncompleteOperations]
  -[AWDHomeKitSiriCommand currentConfigurationVersion]


HMDXPCMessageSendPolicyParameters : HMFObject
 @property  unsigned long entitlements
 @property  NSString *signature

  // instance methods
  -[HMDXPCMessageSendPolicyParameters signature]
  -[HMDXPCMessageSendPolicyParameters entitlements]
  -[HMDXPCMessageSendPolicyParameters attributeDescriptions]
  -[HMDXPCMessageSendPolicyParameters initWithEntitlements:]
  -[HMDXPCMessageSendPolicyParameters copyWithZone:]
  -[HMDXPCMessageSendPolicyParameters isEqual:]


HMDCharacteristicValueUpdate : HMFObject
 @property  id value
 @property  NSString *updateIdentifier
 @property  NSError *error
 @property  HMDDevice *remoteDevice
 @property  NSDate *valueUpatedTime
 @property  NSNumber *valueUpdatedStateNumber

  // instance methods
  -[HMDCharacteristicValueUpdate remoteDevice]
  -[HMDCharacteristicValueUpdate error]
  -[HMDCharacteristicValueUpdate .cxx_destruct]
  -[HMDCharacteristicValueUpdate initWithError:]
  -[HMDCharacteristicValueUpdate value]
  -[HMDCharacteristicValueUpdate updateIdentifier]
  -[HMDCharacteristicValueUpdate initWithValue:updateIdentifier:remoteDevice:]
  -[HMDCharacteristicValueUpdate setValueUpdatedTime:stateNumber:]
  -[HMDCharacteristicValueUpdate valueUpatedTime]
  -[HMDCharacteristicValueUpdate valueUpdatedStateNumber]


HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy : HMDAccessoryFirmwareUpdatePolicy <HMFTimerDelegate>
 @property  NSString *serviceType
 @property  NSString *characteristicType
 @property  HMDCharacteristic *characteristic
 @property  @? policyHandler
 @property  HMFTimer *debounceTimer
 @property  unsigned long debounceDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy configure]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy timerDidFire:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy evaluate]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy debounceTimer]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy characteristicType]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy dealloc]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy setDebounceTimer:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy serviceType]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy registerForNotifications]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy isEqual:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy characteristic]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy handleCharacteristicValuesChanged:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy initWithAccessory:serviceType:characteristicType:debounceDuration:policyHandler:workQueue:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy _policyStatusFromCharacteristic:]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy _startDebounceTimer]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy _stopDebounceTimer]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy policyHandler]
  -[HMDAccessoryFirmwareUpdateCharacteristicBasedPolicy debounceDuration]


HMDCloudZoneInformation : HMFObject <NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  NSUUID *uuid
 @property  NSString *ownerName
 @property  BOOL fetchFailed
 @property  BOOL firstFetch
 @property  BOOL zoneCreated
 @property  long long schemaVersion
 @property  BOOL handlesCloudRecord
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudZoneInformation supportsSecureCoding]
  +[HMDCloudZoneInformation shortDescription]
  +[HMDCloudZoneInformation cloudZonesWithDictionary:]
  +[HMDCloudZoneInformation cloudZoneInformationWithCloudZones:]
  +[HMDCloudZoneInformation cloudZonesArrayWithCloudZones:]

  // instance methods
  -[HMDCloudZoneInformation encodeWithCoder:]
  -[HMDCloudZoneInformation setSchemaVersion:]
  -[HMDCloudZoneInformation schemaVersion]
  -[HMDCloudZoneInformation uuid]
  -[HMDCloudZoneInformation .cxx_destruct]
  -[HMDCloudZoneInformation shortDescription]
  -[HMDCloudZoneInformation ownerName]
  -[HMDCloudZoneInformation isEqual:]
  -[HMDCloudZoneInformation init]
  -[HMDCloudZoneInformation initWithCoder:]
  -[HMDCloudZoneInformation setOwnerName:]
  -[HMDCloudZoneInformation descriptionWithPointer:]
  -[HMDCloudZoneInformation transactionObjectUpdated:newValues:message:]
  -[HMDCloudZoneInformation transactionObjectRemoved:message:]
  -[HMDCloudZoneInformation initWithOwnerName:uuid:]
  -[HMDCloudZoneInformation updateCloudZoneInformationWithModel:message:]
  -[HMDCloudZoneInformation modelObjectWithChangeType:parent:]
  -[HMDCloudZoneInformation modelObjectWithChangeType:version:parent:]
  -[HMDCloudZoneInformation emptyModelObjectWithChangeType:parent:]
  -[HMDCloudZoneInformation didFetchFailed]
  -[HMDCloudZoneInformation setFetchFailed:]
  -[HMDCloudZoneInformation isFirstFetch]
  -[HMDCloudZoneInformation setFirstFetch:]
  -[HMDCloudZoneInformation isZoneCreated]
  -[HMDCloudZoneInformation setZoneCreated:]
  -[HMDCloudZoneInformation doesHandlesCloudRecord]
  -[HMDCloudZoneInformation setHandlesCloudRecord:]


HMDCloudZoneInformationModel : HMDBackingStoreModelObject
 @property  NSString *ownerName
 @property  BOOL requiresHomeManagerUpdate

  // class methods
  +[HMDCloudZoneInformationModel properties]

  // instance methods
  -[HMDCloudZoneInformationModel dependentUUIDs]
  -[HMDCloudZoneInformationModel requiresHomeManagerUpdate]
  -[HMDCloudZoneInformationModel setRequiresHomeManagerUpdate:]


HMDCameraSignificantEventFaceClassificationResolver : HMFObject <HMFLogging>
 @property  HMDHome *home
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSignificantEventFaceClassificationResolver logCategory]

  // instance methods
  -[HMDCameraSignificantEventFaceClassificationResolver home]
  -[HMDCameraSignificantEventFaceClassificationResolver logIdentifier]
  -[HMDCameraSignificantEventFaceClassificationResolver .cxx_destruct]
  -[HMDCameraSignificantEventFaceClassificationResolver setHome:]
  -[HMDCameraSignificantEventFaceClassificationResolver initWithHome:]
  -[HMDCameraSignificantEventFaceClassificationResolver personManagerWithUUID:]
  -[HMDCameraSignificantEventFaceClassificationResolver faceClassificationForSignificantEventFaceClassifications:]
  -[HMDCameraSignificantEventFaceClassificationResolver faceClassificationForSignificantEventFaceClassifications:user:]
  -[HMDCameraSignificantEventFaceClassificationResolver _faceClassificationForSignificantEventFaceClassifications:user:]


HMDCameraNetworkConfig : HMFObject <NSCopying>
 @property  NSString *ipAddress
 @property  BOOL ipv6
 @property  NSNumber *rtpPort

  // class methods
  +[HMDCameraNetworkConfig localIPAddress]

  // instance methods
  -[HMDCameraNetworkConfig .cxx_destruct]
  -[HMDCameraNetworkConfig copyWithZone:]
  -[HMDCameraNetworkConfig init]
  -[HMDCameraNetworkConfig setIpv6:]
  -[HMDCameraNetworkConfig ipv6]
  -[HMDCameraNetworkConfig ipAddress]
  -[HMDCameraNetworkConfig setIpAddress:]
  -[HMDCameraNetworkConfig initWithAddress:ipv6:rtpPort:]
  -[HMDCameraNetworkConfig rtpPort]
  -[HMDCameraNetworkConfig setRtpPort:]


HMDModernRemoteMessageTransport : HMDRemoteMessageTransport <HMDRemoteMessageTransportReachabilityDelegate, HMFMessageTransportDelegate>
 @property  BOOL started
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDRemoteMessageTransport *rapportTransport
 @property  HMDRemoteMessageTransport *idsTransport
 @property  HMDModernTransportMessageContextManager *contextManager
 @property  <HMDDateProvider> *systemDateProvider
 @property  <HMDDateProvider> *idsDateProvider
 @property  <HMDTimerProvider> *timerProvider
 @property  NSMutableOrderedSet *messageIDDedupeBuffer
 @property  BOOL rapportLinkSlow
 @property  <HMDDeviceResidencyProvider> *residencyProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDModernRemoteMessageTransport logCategory]
  +[HMDModernRemoteMessageTransport requestStartTimeHeaderKey]
  +[HMDModernRemoteMessageTransport timeToLiveHeaderKey]

  // instance methods
  -[HMDModernRemoteMessageTransport idsTransport]
  -[HMDModernRemoteMessageTransport messageTransport:didReceiveMessage:]
  -[HMDModernRemoteMessageTransport sendMessage:completionHandler:]
  -[HMDModernRemoteMessageTransport isStarted]
  -[HMDModernRemoteMessageTransport workQueue]
  -[HMDModernRemoteMessageTransport qualityOfService]
  -[HMDModernRemoteMessageTransport .cxx_destruct]
  -[HMDModernRemoteMessageTransport timerProvider]
  -[HMDModernRemoteMessageTransport start]
  -[HMDModernRemoteMessageTransport isSecure]
  -[HMDModernRemoteMessageTransport setStarted:]
  -[HMDModernRemoteMessageTransport canSendMessage:]
  -[HMDModernRemoteMessageTransport contextManager]
  -[HMDModernRemoteMessageTransport initWithAccountRegistry:]
  -[HMDModernRemoteMessageTransport transport:idsIdentifier:didAppearReachable:]
  -[HMDModernRemoteMessageTransport initWithAccountRegistry:rapportTransport:idsTransport:contextManager:systemDateProvider:idsDateProvider:timerProvider:]
  -[HMDModernRemoteMessageTransport residencyProvider]
  -[HMDModernRemoteMessageTransport setResidencyProvider:]
  -[HMDModernRemoteMessageTransport rapportTransport]
  -[HMDModernRemoteMessageTransport systemDateProvider]
  -[HMDModernRemoteMessageTransport idsDateProvider]
  -[HMDModernRemoteMessageTransport messageIDDedupeBuffer]
  -[HMDModernRemoteMessageTransport isRapportLinkSlow]
  -[HMDModernRemoteMessageTransport setRapportLinkSlow:]


HMDMediaSession : HMFObject <HMFTimerDelegate, HMDHomeMessageReceiver, HMFDumpState, HMFLogging, NSSecureCoding>
 @property  HMDMediaEndpoint *endpoint
 @property  HMDMediaSessionState *state
 @property  NSMutableArray *setPlaybackStateCompletionHandlers
 @property  BOOL connected
 @property  BOOL currentAccessorySession
 @property  NSString *logID
 @property  HMFTimer *setPlaybackStateTimer
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *uuid
 @property  NSString *sessionIdentifier
 @property  NSArray *mediaProfiles
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMediaSession supportsSecureCoding]
  +[HMDMediaSession logCategory]
  +[HMDMediaSession hasMessageReceiverChildren]
  +[HMDMediaSession sessionForCurrentAccessoryWithSessionIdentifier:mediaProfile:]
  +[HMDMediaSession mediaPropertyMessageKeys]
  +[HMDMediaSession mediaPropertyValueTypeWithMessageKey:]

  // instance methods
  -[HMDMediaSession dumpState]
  -[HMDMediaSession sessionIdentifier]
  -[HMDMediaSession timerDidFire:]
  -[HMDMediaSession logIdentifier]
  -[HMDMediaSession isConnected]
  -[HMDMediaSession setEndpoint:]
  -[HMDMediaSession setConnected:]
  -[HMDMediaSession encodeWithCoder:]
  -[HMDMediaSession workQueue]
  -[HMDMediaSession endpoint]
  -[HMDMediaSession state]
  -[HMDMediaSession dealloc]
  -[HMDMediaSession uuid]
  -[HMDMediaSession .cxx_destruct]
  -[HMDMediaSession messageTargetUUID]
  -[HMDMediaSession messageReceiveQueue]
  -[HMDMediaSession isEqual:]
  -[HMDMediaSession setState:]
  -[HMDMediaSession initWithCoder:]
  -[HMDMediaSession logID]
  -[HMDMediaSession mediaProfiles]
  -[HMDMediaSession evaluateIfMediaPlaybackStateChanged:]
  -[HMDMediaSession _initWithEndpoint:mediaProfiles:state:]
  -[HMDMediaSession initWithEndpoint:mediaProfiles:state:]
  -[HMDMediaSession _initWithMediaProfiles:state:]
  -[HMDMediaSession _getPlaybackStateWithCompletion:]
  -[HMDMediaSession _handleGetPlaybackState:]
  -[HMDMediaSession handleRefreshPlayback:]
  -[HMDMediaSession handleMediaPlaybackStateNotification:]
  -[HMDMediaSession _registerForSessionUpdates:]
  -[HMDMediaSession _postNotificationOfMediaStateUpdate]
  -[HMDMediaSession _postNotificationOfMediaStateUpdateWithRequestMessageInformation:]
  -[HMDMediaSession _postNotificationOfMediaStateUpdateWithPayload:]
  -[HMDMediaSession updateWithResponses:requestMessageInformation:]
  -[HMDMediaSession _invokePendingSetPlaybackStateBlocksOfError:]
  -[HMDMediaSession _queueSetPlaybackStateCompletion:]
  -[HMDMediaSession _setPlaybackState:completion:]
  -[HMDMediaSession _handleSetPlayback:]
  -[HMDMediaSession handleSetPlayback:]
  -[HMDMediaSession _notifyClientsOfUpdatedVolume:muted:inResponseToMessage:]
  -[HMDMediaSession handleMediaSessionSetAudioControl:]
  -[HMDMediaSession _handleMediaSessionSetAudioControl:]
  -[HMDMediaSession _handleMediaUpdateVolume:]
  -[HMDMediaSession _handleMediaUpdateMuted:]
  -[HMDMediaSession registerForSessionUpdates:]
  -[HMDMediaSession updateEndpoint:]
  -[HMDMediaSession addMediaProfile:]
  -[HMDMediaSession removeMediaProfile:]
  -[HMDMediaSession readProperties:completion:]
  -[HMDMediaSession writeProperties:completion:]
  -[HMDMediaSession isCurrentAccessorySession]
  -[HMDMediaSession setCurrentAccessorySession:]
  -[HMDMediaSession setLogID:]
  -[HMDMediaSession setPlaybackStateCompletionHandlers]
  -[HMDMediaSession setSetPlaybackStateCompletionHandlers:]
  -[HMDMediaSession setPlaybackStateTimer]
  -[HMDMediaSession setSetPlaybackStateTimer:]


HMDModernTransportMessageContext : NSObject <HMFTimerDelegate>
 @property  @? completionHandler
 @property  <HMDDateProvider> *dateProvider
 @property  <HMDTimerProvider> *timerProvider
 @property  HMFTimer *responseTimer
 @property  @? responseCompletionBlock
 @property  HMFTimer *fallbackTimer
 @property  @? fallbackCompletionBlock
 @property  double requestStartTime
 @property  HMDRemoteMessage *message
 @property  NSUUID *identifier
 @property  NSUUID *messageID
 @property  HMFMessageDestination *destination
 @property  HMDModernTransportMessageContextOptions *options
 @property  double timeout
 @property  BOOL expectsResponse
 @property  NSSet *remainingTransports
 @property  NSSet *inProgressTransports
 @property  BOOL didSucceedSending
 @property  BOOL didNotifyDeviceReachability
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDModernTransportMessageContext timerDidFire:]
  -[HMDModernTransportMessageContext dateProvider]
  -[HMDModernTransportMessageContext identifier]
  -[HMDModernTransportMessageContext destination]
  -[HMDModernTransportMessageContext done]
  -[HMDModernTransportMessageContext .cxx_destruct]
  -[HMDModernTransportMessageContext timerProvider]
  -[HMDModernTransportMessageContext timeout]
  -[HMDModernTransportMessageContext options]
  -[HMDModernTransportMessageContext requestStartTime]
  -[HMDModernTransportMessageContext messageID]
  -[HMDModernTransportMessageContext setRequestStartTime:]
  -[HMDModernTransportMessageContext message]
  -[HMDModernTransportMessageContext setCompletionHandler:]
  -[HMDModernTransportMessageContext completionHandler]
  -[HMDModernTransportMessageContext expectsResponse]
  -[HMDModernTransportMessageContext fallbackTimer]
  -[HMDModernTransportMessageContext setFallbackTimer:]
  -[HMDModernTransportMessageContext responseTimer]
  -[HMDModernTransportMessageContext setResponseTimer:]
  -[HMDModernTransportMessageContext initWithMessage:options:completionHandler:dateProvider:timerProvider:]
  -[HMDModernTransportMessageContext startSendingOverTransport:]
  -[HMDModernTransportMessageContext completeSendingOverTransport:withError:]
  -[HMDModernTransportMessageContext preparedMessageWithTimeout:]
  -[HMDModernTransportMessageContext timeoutRemaining]
  -[HMDModernTransportMessageContext startResponseTimerWithTimeInterval:queue:completionHandler:]
  -[HMDModernTransportMessageContext startTransportFallbackTimerWithTimeInterval:queue:completionHandler:]
  -[HMDModernTransportMessageContext remainingTransports]
  -[HMDModernTransportMessageContext inProgressTransports]
  -[HMDModernTransportMessageContext didSucceedSending]
  -[HMDModernTransportMessageContext didNotifyDeviceReachability]
  -[HMDModernTransportMessageContext setDidNotifyDeviceReachability:]
  -[HMDModernTransportMessageContext responseCompletionBlock]
  -[HMDModernTransportMessageContext setResponseCompletionBlock:]
  -[HMDModernTransportMessageContext fallbackCompletionBlock]
  -[HMDModernTransportMessageContext setFallbackCompletionBlock:]


HMDNetworkRouterFirewallRule : HMFObject <HMFLogging>
 @property  NSString *name
 @property  BOOL critical
 @property  NSDictionary *prettyJSONDictionary
 @property  NSDictionary *jsonDictionary
 @property  NSString *jsonString
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRule logCategory]
  +[HMDNetworkRouterFirewallRule __transportProtocolToString:]

  // instance methods
  -[HMDNetworkRouterFirewallRule attributeDescriptions]
  -[HMDNetworkRouterFirewallRule jsonDictionary]
  -[HMDNetworkRouterFirewallRule .cxx_destruct]
  -[HMDNetworkRouterFirewallRule isCritical]
  -[HMDNetworkRouterFirewallRule name]
  -[HMDNetworkRouterFirewallRule isEqual:]
  -[HMDNetworkRouterFirewallRule jsonString]
  -[HMDNetworkRouterFirewallRule prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRule initWithJSONDictionary:name:critical:]
  -[HMDNetworkRouterFirewallRule initWithJSONDictionary:critical:]


HMDCameraSnapshotIDSStream : HMFObject <HMDIDSServiceDelegate, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  <HMDIDSService> *idsProxyService
 @property  HMFOSTransaction *snapshotStreamTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSStream logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSStream logIdentifier]
  -[HMDCameraSnapshotIDSStream sessionID]
  -[HMDCameraSnapshotIDSStream workQueue]
  -[HMDCameraSnapshotIDSStream dealloc]
  -[HMDCameraSnapshotIDSStream .cxx_destruct]
  -[HMDCameraSnapshotIDSStream initWithSessionID:workQueue:]
  -[HMDCameraSnapshotIDSStream idsProxyService]
  -[HMDCameraSnapshotIDSStream snapshotStreamTransaction]
  -[HMDCameraSnapshotIDSStream setSnapshotStreamTransaction:]


HMDMediaActionRouter : HMFObject <HMDMPCSessionDataMediaProfileSource, HMFMessageReceiver>
 @property  <HMDMediaActionRouterDataSource> *dataSource
 @property  BOOL shouldExecuteOnCurrentDevice
 @property  HMDResidentDevice *targetResidentDeviceOverride
 @property  HMDMPCSessionController *mpcSessionController
 @property  HMDHome *home
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDMediaActionRouter home]
  -[HMDMediaActionRouter initWithDataSource:]
  -[HMDMediaActionRouter dataSource]
  -[HMDMediaActionRouter dealloc]
  -[HMDMediaActionRouter .cxx_destruct]
  -[HMDMediaActionRouter messageTargetUUID]
  -[HMDMediaActionRouter messageReceiveQueue]
  -[HMDMediaActionRouter init]
  -[HMDMediaActionRouter _registerForMessages]
  -[HMDMediaActionRouter mediaProfileWithUUID:]
  -[HMDMediaActionRouter routeMessage:]
  -[HMDMediaActionRouter routeMediaActionForExecution:source:clientName:completion:]
  -[HMDMediaActionRouter routeSessionDataForExecution:encodePlaybackArchive:completion:]
  -[HMDMediaActionRouter handleNonResidentMediaActionExecutionWithSessionData:encodePlaybackArchive:completion:]
  -[HMDMediaActionRouter sendMediaActionMessageToResident:sessionData:encodePlaybackArchive:completion:]
  -[HMDMediaActionRouter sendMediaActionMessageToCompanionWithSessionData:encodePlaybackArchive:completion:]
  -[HMDMediaActionRouter sendMediaActionMessageToDevice:sessionData:encodePlaybackArchive:canForwardMessage:completion:]
  -[HMDMediaActionRouter targetResidentDeviceForExecutingMediaActionWithProfiles:]
  -[HMDMediaActionRouter executeMediaActionWithSessionData:completion:]
  -[HMDMediaActionRouter shouldExecuteOnCurrentDevice]
  -[HMDMediaActionRouter targetResidentDeviceOverride]
  -[HMDMediaActionRouter setTargetResidentDeviceOverride:]
  -[HMDMediaActionRouter mpcSessionController]


HMDAccessorySettingsLocalMessageHandler : HMFObject <HMFLogging>
 @property  NSUUID *homeUUID
 @property  <HMDLanguageValueListSettingDataProvider> *languageValuesDataProvider
 @property  <HMDAccessorySettingsLocalMessageHandlerDataSource> *dataSource
 @property  <HMDAccessorySettingsLocalMessageHandlerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessorySettingsLocalMessageHandler logCategory]

  // instance methods
  -[HMDAccessorySettingsLocalMessageHandler dataSource]
  -[HMDAccessorySettingsLocalMessageHandler setDelegate:]
  -[HMDAccessorySettingsLocalMessageHandler delegate]
  -[HMDAccessorySettingsLocalMessageHandler .cxx_destruct]
  -[HMDAccessorySettingsLocalMessageHandler homeUUID]
  -[HMDAccessorySettingsLocalMessageHandler setDataSource:]
  -[HMDAccessorySettingsLocalMessageHandler initWithHomeUUID:languageValuesDataProvider:]
  -[HMDAccessorySettingsLocalMessageHandler handleAccessorySettingsFetchRequestMessage:]
  -[HMDAccessorySettingsLocalMessageHandler siriAvailableLanguagesSetting]
  -[HMDAccessorySettingsLocalMessageHandler handleAccessorySettingsUpdateRequestMessage:]
  -[HMDAccessorySettingsLocalMessageHandler dataSourceCallerPrivilegeWithMessage:error:]
  -[HMDAccessorySettingsLocalMessageHandler callerVersionForMessage:]
  -[HMDAccessorySettingsLocalMessageHandler languageValuesDataProvider]


HMDDeviceAddress : NSObject <NSCopying>
 @property  NSUUID *idsIdentifier
 @property  NSString *idsDestination
 @property  BOOL currentDevice

  // class methods
  +[HMDDeviceAddress addressWithIDSIdentifier:idsDestination:]
  +[HMDDeviceAddress localDeviceIDSIdentifier]

  // instance methods
  -[HMDDeviceAddress idsIdentifier]
  -[HMDDeviceAddress isCurrentDevice]
  -[HMDDeviceAddress .cxx_destruct]
  -[HMDDeviceAddress copyWithZone:]
  -[HMDDeviceAddress isEqual:]
  -[HMDDeviceAddress idsDestination]
  -[HMDDeviceAddress initWithIDSIdentifier:idsDestination:]


HMDCameraSettingProactiveReader : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *sessionID
 @property  HMDAccessory *accessory
 @property  NSSet *streamControlMessageHandlers
 @property  HMCameraStreamPreferences *streamPreferences
 @property  NSString *logIdentifier
 @property  HMFMessage *pendingMessage
 @property  <HMDCameraSettingProactiveReaderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSettingProactiveReader logCategory]
  +[HMDCameraSettingProactiveReader _streamingStatusForResponse:]

  // instance methods
  -[HMDCameraSettingProactiveReader accessory]
  -[HMDCameraSettingProactiveReader logIdentifier]
  -[HMDCameraSettingProactiveReader setDelegate:]
  -[HMDCameraSettingProactiveReader sessionID]
  -[HMDCameraSettingProactiveReader setAccessory:]
  -[HMDCameraSettingProactiveReader workQueue]
  -[HMDCameraSettingProactiveReader delegate]
  -[HMDCameraSettingProactiveReader .cxx_destruct]
  -[HMDCameraSettingProactiveReader handleMessage:]
  -[HMDCameraSettingProactiveReader initWithWorkQueue:sessionID:accessory:message:streamControlMessageHandlers:streamPreferences:logIdentifier:]
  -[HMDCameraSettingProactiveReader hasPendingNegotiateMessageForSessionWithIdentifier:]
  -[HMDCameraSettingProactiveReader readSetting]
  -[HMDCameraSettingProactiveReader _handleStreamStatusMultireadResponse:]
  -[HMDCameraSettingProactiveReader _availableStreamControlMessageHandlersForReadResponses:]
  -[HMDCameraSettingProactiveReader _inUseStreamControlMessageHandlersForReadResponses:]
  -[HMDCameraSettingProactiveReader _callDidCompleteReadDelegateCallback]
  -[HMDCameraSettingProactiveReader streamControlMessageHandlers]
  -[HMDCameraSettingProactiveReader streamPreferences]
  -[HMDCameraSettingProactiveReader pendingMessage]
  -[HMDCameraSettingProactiveReader setPendingMessage:]


HMDSiriStreamStartEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  unsigned long activationType
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDSiriStreamStartEvent eventName]
  -[HMDSiriStreamStartEvent activationType]
  -[HMDSiriStreamStartEvent serializedEvent]
  -[HMDSiriStreamStartEvent initWithActivationType:]


HMDSiriCommandEvent : HMMLogEvent <HMDAWDLogEvent, HMMCoreAnalyticsLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long duration
 @property  NSString *actionType
 @property  NSString *outcome
 @property  unsigned long numberOfEntities
 @property  unsigned long numberOfFailures
 @property  unsigned long numberOfIncompletions
 @property  unsigned long configurationVersion
 @property  unsigned long lastSyncedConfigurationVersion
 @property  unsigned long serverConfigurationVersion
 @property  NSString *clientMetricIdentifier
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDSiriCommandEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]
  +[HMDSiriCommandEvent generateErrorCodeWithNumberOfFailures:numberOfIncompletions:commandOutcome:]
  +[HMDSiriCommandEvent commandEventWithDuration:actionType:outcome:numberOfEntities:numberOfFailures:numberOfIncompletions:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:]

  // instance methods
  -[HMDSiriCommandEvent configurationVersion]
  -[HMDSiriCommandEvent actionType]
  -[HMDSiriCommandEvent eventName]
  -[HMDSiriCommandEvent .cxx_destruct]
  -[HMDSiriCommandEvent duration]
  -[HMDSiriCommandEvent clientMetricIdentifier]
  -[HMDSiriCommandEvent outcome]
  -[HMDSiriCommandEvent serializedEvent]
  -[HMDSiriCommandEvent AWDMessageType]
  -[HMDSiriCommandEvent metricForAWD]
  -[HMDSiriCommandEvent lastSyncedConfigurationVersion]
  -[HMDSiriCommandEvent serverConfigurationVersion]
  -[HMDSiriCommandEvent initWithDuration:actionType:outcome:numberOfEntities:numberOfFailures:numberOfIncompletions:serverConfigurationVersion:configurationVersion:lastSyncedConfigurationVersion:]
  -[HMDSiriCommandEvent numberOfEntities]
  -[HMDSiriCommandEvent numberOfFailures]
  -[HMDSiriCommandEvent numberOfIncompletions]


AWDHomeKitRemoteLogout : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode
 @property  BOOL hasDelay
 @property  unsigned long delay
 @property  BOOL hasRequester
 @property  int requester

  // instance methods
  -[AWDHomeKitRemoteLogout setTimestamp:]
  -[AWDHomeKitRemoteLogout copyTo:]
  -[AWDHomeKitRemoteLogout setDelay:]
  -[AWDHomeKitRemoteLogout setRequester:]
  -[AWDHomeKitRemoteLogout requester]
  -[AWDHomeKitRemoteLogout mergeFrom:]
  -[AWDHomeKitRemoteLogout setHasTimestamp:]
  -[AWDHomeKitRemoteLogout dictionaryRepresentation]
  -[AWDHomeKitRemoteLogout hasTimestamp]
  -[AWDHomeKitRemoteLogout copyWithZone:]
  -[AWDHomeKitRemoteLogout delay]
  -[AWDHomeKitRemoteLogout timestamp]
  -[AWDHomeKitRemoteLogout readFrom:]
  -[AWDHomeKitRemoteLogout writeTo:]
  -[AWDHomeKitRemoteLogout isEqual:]
  -[AWDHomeKitRemoteLogout setHasDelay:]
  -[AWDHomeKitRemoteLogout hasDelay]
  -[AWDHomeKitRemoteLogout setHasRequester:]
  -[AWDHomeKitRemoteLogout hasRequester]
  -[AWDHomeKitRemoteLogout requesterAsString:]
  -[AWDHomeKitRemoteLogout StringAsRequester:]
  -[AWDHomeKitRemoteLogout setResultErrorCode:]
  -[AWDHomeKitRemoteLogout setHasResultErrorCode:]
  -[AWDHomeKitRemoteLogout hasResultErrorCode]
  -[AWDHomeKitRemoteLogout resultErrorCode]


HMDAssistantCommandExecutor : NSObject <HMFTimerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantCommandExecutor executorWithCommand:workQueue:messageDispatcher:]

  // instance methods
  -[HMDAssistantCommandExecutor timerDidFire:]
  -[HMDAssistantCommandExecutor performWithCompletion:]
  -[HMDAssistantCommandExecutor .cxx_destruct]
  -[HMDAssistantCommandExecutor _command]
  -[HMDAssistantCommandExecutor initWithCommand:workQueue:messageDispatcher:]


HMDNetworkConnection : NSObject <HMDNetworkConnection>
 @property  NSObject<OS_nw_connection> *nwConnection
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDNetworkConnection .cxx_destruct]
  -[HMDNetworkConnection setStateChangedHandler:]
  -[HMDNetworkConnection initWithEndpoint:parameters:]
  -[HMDNetworkConnection setQueue:]
  -[HMDNetworkConnection queue]
  -[HMDNetworkConnection start]
  -[HMDNetworkConnection cancel]
  -[HMDNetworkConnection sendData:context:isComplete:completion:]
  -[HMDNetworkConnection receiveMessageWithCompletion:]
  -[HMDNetworkConnection nwConnection]
  -[HMDNetworkConnection receiveWithMinLength:maxLength:completion:]
  -[HMDNetworkConnection setReadCloseHandler:]
  -[HMDNetworkConnection resetTrafficClass:]


HMDAirPlayAccessory : HMDMediaAccessory <HMDAccessoryMinimumUserPrivilegeCapable, HMDDevicePreferenceDataSource, HMFTimerDelegate, HMDAccessoryDisassociation, HMDAccessoryUserManagement, HMFLogging>
 @property  HMFExponentialBackoffTimer *configurationRetryTimer
 @property  NSString *password
 @property  long long minimumUserPriviledge
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL supportsDisassociation
 @property  BOOL supportsUserManagement
 @property  HMFPairingIdentity *pairingIdentity

  // class methods
  +[HMDAirPlayAccessory supportsSecureCoding]
  +[HMDAirPlayAccessory initialize]

  // instance methods
  -[HMDAirPlayAccessory timerDidFire:]
  -[HMDAirPlayAccessory encodeWithCoder:]
  -[HMDAirPlayAccessory .cxx_destruct]
  -[HMDAirPlayAccessory setReachable:]
  -[HMDAirPlayAccessory setAdvertisement:]
  -[HMDAirPlayAccessory pairingIdentity]
  -[HMDAirPlayAccessory password]
  -[HMDAirPlayAccessory setPassword:]
  -[HMDAirPlayAccessory initWithCoder:]
  -[HMDAirPlayAccessory advertisement]
  -[HMDAirPlayAccessory removeUser:completionHandler:]
  -[HMDAirPlayAccessory setPairingIdentity:]
  -[HMDAirPlayAccessory supportsDeviceWithCapabilities:]
  -[HMDAirPlayAccessory transactionObjectUpdated:newValues:message:]
  -[HMDAirPlayAccessory backingStoreObjects:]
  -[HMDAirPlayAccessory disassociateWithCompletionHandler:]
  -[HMDAirPlayAccessory supportsDisassociation]
  -[HMDAirPlayAccessory supportsMinimumUserPrivilege]
  -[HMDAirPlayAccessory handleUpdatedMinimumUserPrivilege:]
  -[HMDAirPlayAccessory handleUpdatedPassword:]
  -[HMDAirPlayAccessory addUser:completionHandler:]
  -[HMDAirPlayAccessory pairingsWithCompletionHandler:]
  -[HMDAirPlayAccessory supportsUserManagement]
  -[HMDAirPlayAccessory initWithTransaction:home:]
  -[HMDAirPlayAccessory transactionWithObjectChangeType:]
  -[HMDAirPlayAccessory populateModelObject:version:]
  -[HMDAirPlayAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:]
  -[HMDAirPlayAccessory _handleUpdatedName:]
  -[HMDAirPlayAccessory messageSendPolicy]
  -[HMDAirPlayAccessory handleUpdatedAdvertisement:]
  -[HMDAirPlayAccessory minimumUserPriviledge]
  -[HMDAirPlayAccessory setMinimumUserPriviledge:]
  -[HMDAirPlayAccessory disassociateUser:completionHandler:]
  -[HMDAirPlayAccessory configurationRetryTimer]


HMDAirPlayAccessoryModel : HMDMediaAccessoryModel
 @property  HMFPairingIdentity *pairingIdentity
 @property  NSString *password
 @property  NSNumber *minimumUserPriviledge

  // class methods
  +[HMDAirPlayAccessoryModel properties]


AWDHomeKitCalendarEvent : PBCodable <NSCopying>
  // instance methods
  -[AWDHomeKitCalendarEvent copyTo:]
  -[AWDHomeKitCalendarEvent mergeFrom:]
  -[AWDHomeKitCalendarEvent dictionaryRepresentation]
  -[AWDHomeKitCalendarEvent copyWithZone:]
  -[AWDHomeKitCalendarEvent readFrom:]
  -[AWDHomeKitCalendarEvent writeTo:]
  -[AWDHomeKitCalendarEvent isEqual:]


HMDCameraRecordingMediaContainer : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long type

  // class methods
  +[HMDCameraRecordingMediaContainer supportsSecureCoding]
  +[HMDCameraRecordingMediaContainer arrayWithContainerTypes:]

  // instance methods
  -[HMDCameraRecordingMediaContainer initWithContainer:]
  -[HMDCameraRecordingMediaContainer encodeWithCoder:]
  -[HMDCameraRecordingMediaContainer type]
  -[HMDCameraRecordingMediaContainer copyWithZone:]
  -[HMDCameraRecordingMediaContainer isEqual:]
  -[HMDCameraRecordingMediaContainer initWithCoder:]
  -[HMDCameraRecordingMediaContainer description:indent:]


HMDCameraRecordingMediaContainerParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *fragmentLength
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingMediaContainerParameters supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingMediaContainerParameters encodeWithCoder:]
  -[HMDCameraRecordingMediaContainerParameters .cxx_destruct]
  -[HMDCameraRecordingMediaContainerParameters initWithCoder:]
  -[HMDCameraRecordingMediaContainerParameters description:indent:]
  -[HMDCameraRecordingMediaContainerParameters _parseFromTLVData]
  -[HMDCameraRecordingMediaContainerParameters tlvData]
  -[HMDCameraRecordingMediaContainerParameters initWithFragmentLength:]
  -[HMDCameraRecordingMediaContainerParameters fragmentLength]


HMDCameraRecordingMediaContainerConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDCameraRecordingMediaContainer *container
 @property  HMDCameraRecordingMediaContainerParameters *parameters
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingMediaContainerConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingMediaContainerConfiguration parameters]
  -[HMDCameraRecordingMediaContainerConfiguration encodeWithCoder:]
  -[HMDCameraRecordingMediaContainerConfiguration .cxx_destruct]
  -[HMDCameraRecordingMediaContainerConfiguration container]
  -[HMDCameraRecordingMediaContainerConfiguration initWithCoder:]
  -[HMDCameraRecordingMediaContainerConfiguration description:indent:]
  -[HMDCameraRecordingMediaContainerConfiguration _parseFromTLVData]
  -[HMDCameraRecordingMediaContainerConfiguration tlvData]
  -[HMDCameraRecordingMediaContainerConfiguration initWithMediaContainer:containerParameters:]


HMDCameraRecordingGeneralConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *prebufferLength
 @property  unsigned long eventTriggerOptions
 @property  NSArray *mediaContainerConfigurations
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingGeneralConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingGeneralConfiguration encodeWithCoder:]
  -[HMDCameraRecordingGeneralConfiguration .cxx_destruct]
  -[HMDCameraRecordingGeneralConfiguration initWithCoder:]
  -[HMDCameraRecordingGeneralConfiguration description:indent:]
  -[HMDCameraRecordingGeneralConfiguration _parseFromTLVData]
  -[HMDCameraRecordingGeneralConfiguration tlvData]
  -[HMDCameraRecordingGeneralConfiguration initWithPrebufferLength:eventTriggerOptions:mediaContainerConfigurations:]
  -[HMDCameraRecordingGeneralConfiguration prebufferLength]
  -[HMDCameraRecordingGeneralConfiguration eventTriggerOptions]
  -[HMDCameraRecordingGeneralConfiguration mediaContainerConfigurations]


HMDCameraRecordingSelectedConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDCameraRecordingGeneralConfiguration *generalConfiguration
 @property  HMDCameraRecordingVideoCodecConfiguration *videoConfiguration
 @property  HMDCameraRecordingAudioCodecConfiguration *audioConfiguration
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingSelectedConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingSelectedConfiguration encodeWithCoder:]
  -[HMDCameraRecordingSelectedConfiguration .cxx_destruct]
  -[HMDCameraRecordingSelectedConfiguration audioConfiguration]
  -[HMDCameraRecordingSelectedConfiguration videoConfiguration]
  -[HMDCameraRecordingSelectedConfiguration initWithCoder:]
  -[HMDCameraRecordingSelectedConfiguration description:indent:]
  -[HMDCameraRecordingSelectedConfiguration generalConfiguration]
  -[HMDCameraRecordingSelectedConfiguration _parseFromTLVData]
  -[HMDCameraRecordingSelectedConfiguration tlvData]
  -[HMDCameraRecordingSelectedConfiguration initWithGeneralConfiguration:videoCodecConfiguration:audioCodecConfiguration:]


HMDHH2MigrationStateLogger : HMFObject
 @property  NSDictionary *logEventRecord
 @property  BOOL autoMigration
 @property  long long totalTimeTakenForMigration
 @property  BOOL migrationSuccessful

  // class methods
  +[HMDHH2MigrationStateLogger allowedValues]
  +[HMDHH2MigrationStateLogger recordMigrationStart:isDryRun:]
  +[HMDHH2MigrationStateLogger recordMigrationEnd:]
  +[HMDHH2MigrationStateLogger recordIsDryRun:]
  +[HMDHH2MigrationStateLogger recordMigrationFailedWithError:withReason:]
  +[HMDHH2MigrationStateLogger _addInfoFromCoreDataError:logEvent:]
  +[HMDHH2MigrationStateLogger setAutoMigration:]
  +[HMDHH2MigrationStateLogger recordMigrationStartTimeWithValue:]
  +[HMDHH2MigrationStateLogger recordMigrationEndTimeWithValue:]
  +[HMDHH2MigrationStateLogger setMigrationSuccessful:]
  +[HMDHH2MigrationStateLogger incrementMigrationAttempt]
  +[HMDHH2MigrationStateLogger migrationAttempt]
  +[HMDHH2MigrationStateLogger commitMigrationLogEventToDiskWithKey:value:]
  +[HMDHH2MigrationStateLogger commitMigrationLogEventToDisk:]
  +[HMDHH2MigrationStateLogger doesLogEventExistOnDisk]
  +[HMDHH2MigrationStateLogger migrationLogEventRecord]
  +[HMDHH2MigrationStateLogger removeMigrationLogEventRecordFromDisk]

  // instance methods
  -[HMDHH2MigrationStateLogger migrationStartTime]
  -[HMDHH2MigrationStateLogger .cxx_destruct]
  -[HMDHH2MigrationStateLogger init]
  -[HMDHH2MigrationStateLogger migrationError]
  -[HMDHH2MigrationStateLogger resetStoredMigrationState]
  -[HMDHH2MigrationStateLogger populateLogEvent]
  -[HMDHH2MigrationStateLogger shouldSubmitLogEvent]
  -[HMDHH2MigrationStateLogger populateTotalMigrationTime]
  -[HMDHH2MigrationStateLogger isAutoMigration]
  -[HMDHH2MigrationStateLogger migrationEndTime]
  -[HMDHH2MigrationStateLogger isMigrationSuccessful]
  -[HMDHH2MigrationStateLogger totalTimeTakenForMigration]
  -[HMDHH2MigrationStateLogger logEventRecord]
  -[HMDHH2MigrationStateLogger setLogEventRecord:]


HMDHH2MigrationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL autoMigration
 @property  BOOL dryRun
 @property  double totalTimeTakenForMigration
 @property  BOOL migrationSuccessful
 @property  long long migrationAttempt
 @property  NSString *failureReason
 @property  NSString *coreDataValidationEntityClassName
 @property  NSString *coreDataValidationAttributeName
 @property  NSString *localizedErrorDescription
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDHH2MigrationLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDHH2MigrationLogEvent eventName]
  -[HMDHH2MigrationLogEvent isDryRun]
  -[HMDHH2MigrationLogEvent .cxx_destruct]
  -[HMDHH2MigrationLogEvent failureReason]
  -[HMDHH2MigrationLogEvent serializedEvent]
  -[HMDHH2MigrationLogEvent logEventWithAppendedCommonDimensions]
  -[HMDHH2MigrationLogEvent migrationAttempt]
  -[HMDHH2MigrationLogEvent isAutoMigration]
  -[HMDHH2MigrationLogEvent isMigrationSuccessful]
  -[HMDHH2MigrationLogEvent totalTimeTakenForMigration]
  -[HMDHH2MigrationLogEvent initWithAutoMigration:isDryRun:migrationSuccessful:totalMigrationTime:totalMigrationAttempt:migrationError:failureReason:coreDataValidationEntityClassName:coreDataValidationAttributeName:localizedErrorDescription:]
  -[HMDHH2MigrationLogEvent coreDataValidationEntityClassName]
  -[HMDHH2MigrationLogEvent coreDataValidationAttributeName]
  -[HMDHH2MigrationLogEvent localizedErrorDescription]


HMDLegacyAccessorySettingsAdaptor : NSObject <HMEEventConsumer, HMFLogging, HMDLegacyAccessorySettingsAdaptor>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSUUID *homeUUID
 @property  NSUUID *accessoryUUID
 @property  <HMESubscriptionProviding> *subscriptionProvider
 @property  <HMDLegacyAccessorySettingsAdaptorSettingsOperationProvider> *currentAccessorySettingsController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDLegacyAccessorySettingsAdaptorDelegate> *delegate

  // class methods
  +[HMDLegacyAccessorySettingsAdaptor logCategory]
  +[HMDLegacyAccessorySettingsAdaptor parsedBoolSettingEvent:topic:]
  +[HMDLegacyAccessorySettingsAdaptor parsedIntegerSettingEvent:topic:]
  +[HMDLegacyAccessorySettingsAdaptor parsedLanguageSetting:topic:]
  +[HMDLegacyAccessorySettingsAdaptor parsedLanguageListSetting:topic:]

  // instance methods
  -[HMDLegacyAccessorySettingsAdaptor accessoryUUID]
  -[HMDLegacyAccessorySettingsAdaptor didReceiveEvent:topic:]
  -[HMDLegacyAccessorySettingsAdaptor startup]
  -[HMDLegacyAccessorySettingsAdaptor setDelegate:]
  -[HMDLegacyAccessorySettingsAdaptor delegate]
  -[HMDLegacyAccessorySettingsAdaptor .cxx_destruct]
  -[HMDLegacyAccessorySettingsAdaptor homeUUID]
  -[HMDLegacyAccessorySettingsAdaptor queue]
  -[HMDLegacyAccessorySettingsAdaptor subscriptionProvider]
  -[HMDLegacyAccessorySettingsAdaptor languageValueList]
  -[HMDLegacyAccessorySettingsAdaptor updateSettingWithKeyPath:settingValue:completion:]
  -[HMDLegacyAccessorySettingsAdaptor initWithQueue:homeUUID:accessoryUUID:settingsController:subscriptionProvider:]
  -[HMDLegacyAccessorySettingsAdaptor _settingValueForKeyPath:value:]
  -[HMDLegacyAccessorySettingsAdaptor _transformLegacyLanguageSettingValueToImmutableSetting:]
  -[HMDLegacyAccessorySettingsAdaptor currentAccessorySettingsController]


HMDTargetControlManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMutableArray *activeControlServices
 @property  NSMutableArray *eventReceivers
 @property  NSString *logID
 @property  HMDSiriServer *siriServer
 @property  HMDAccessory *targetAccessory
 @property  NSMutableArray *configuredControllers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDTargetControlManager logCategory]

  // instance methods
  -[HMDTargetControlManager logIdentifier]
  -[HMDTargetControlManager workQueue]
  -[HMDTargetControlManager .cxx_destruct]
  -[HMDTargetControlManager invalidate]
  -[HMDTargetControlManager init]
  -[HMDTargetControlManager logID]
  -[HMDTargetControlManager addReceiver:]
  -[HMDTargetControlManager removeReceiver:]
  -[HMDTargetControlManager __accessoryNameUpdated:]
  -[HMDTargetControlManager __accessoryConnected:]
  -[HMDTargetControlManager __accessoryDisconnected:]
  -[HMDTargetControlManager __accessoryRemoved:]
  -[HMDTargetControlManager __targetAccessoryConfiguredForControl:]
  -[HMDTargetControlManager __targetAccessoryUnconfiguredForControl:]
  -[HMDTargetControlManager __controllerRefreshedConfiguration:]
  -[HMDTargetControlManager __activeSelectionChanged:]
  -[HMDTargetControlManager __activeSelectionReset:]
  -[HMDTargetControlManager __characteristicsEventsReceived:]
  -[HMDTargetControlManager __accessoryAdded:]
  -[HMDTargetControlManager __serviceRemoved:]
  -[HMDTargetControlManager initWithTargetAccessory:controllers:]
  -[HMDTargetControlManager configuredControllers]
  -[HMDTargetControlManager _addController:]
  -[HMDTargetControlManager _removeController:]
  -[HMDTargetControlManager activeControlServices]
  -[HMDTargetControlManager addControlService:]
  -[HMDTargetControlManager removeControlService:]
  -[HMDTargetControlManager eventReceivers]
  -[HMDTargetControlManager addTargetControllers:]
  -[HMDTargetControlManager __selectButtonConfiguration:receiver:]
  -[HMDTargetControlManager _targetAccessoryRefreshConfigurationWithController:userInfo:]
  -[HMDTargetControlManager __getOrCreateEventReceiver:]
  -[HMDTargetControlManager _handleButtonEvent:fromControlService:]
  -[HMDTargetControlManager _targetAccessoryConfiguredWithController:]
  -[HMDTargetControlManager _targetAccessoryUnconfiguredWithController:]
  -[HMDTargetControlManager _handleControllerDisconnected:]
  -[HMDTargetControlManager _handleTargetControlServiceSelection:]
  -[HMDTargetControlManager _handleTargetControlServiceDeselection:]
  -[HMDTargetControlManager targetAccessory]
  -[HMDTargetControlManager siriServer]
  -[HMDTargetControlManager setSiriServer:]


HMDUnexpectedNotificationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  long long count
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDUnexpectedNotificationLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDUnexpectedNotificationLogEvent eventName]
  -[HMDUnexpectedNotificationLogEvent initWithCount:]
  -[HMDUnexpectedNotificationLogEvent count]
  -[HMDUnexpectedNotificationLogEvent serializedEvent]


HMDUserCloudShareRequest : NSObject
 @property  NSUUID *identifier
 @property  NSDate *startDate
 @property  NSString *containerID
 @property  HMDHome *home

  // instance methods
  -[HMDUserCloudShareRequest home]
  -[HMDUserCloudShareRequest containerID]
  -[HMDUserCloudShareRequest identifier]
  -[HMDUserCloudShareRequest .cxx_destruct]
  -[HMDUserCloudShareRequest startDate]
  -[HMDUserCloudShareRequest initWithStartDate:containerID:home:]


HMDUserCloudShareRepairRequest : HMDUserCloudShareRequest
 @property  HMUserCloudShareRepairInfo *repairInfo

  // instance methods
  -[HMDUserCloudShareRepairRequest .cxx_destruct]
  -[HMDUserCloudShareRepairRequest initWithStartDate:containerID:home:repairInfo:]
  -[HMDUserCloudShareRepairRequest repairInfo]


HMDUserCloudShareEstablishShareRequest : HMDUserCloudShareRequest
 @property  HMDUser *fromUser
 @property  HMDUser *toUser
 @property  NSData *encodedShareURL
 @property  NSData *shareToken
 @property  @? completion

  // instance methods
  -[HMDUserCloudShareEstablishShareRequest completion]
  -[HMDUserCloudShareEstablishShareRequest .cxx_destruct]
  -[HMDUserCloudShareEstablishShareRequest shareToken]
  -[HMDUserCloudShareEstablishShareRequest fromUser]
  -[HMDUserCloudShareEstablishShareRequest initWithHome:fromUser:toUser:encodedShareURL:shareToken:containerID:currentDate:completion:]
  -[HMDUserCloudShareEstablishShareRequest toUser]
  -[HMDUserCloudShareEstablishShareRequest encodedShareURL]


HMDUserCloudShareController : NSObject <HMFTimerDelegate, HMFLogging>
 @property  <HMDUserCloudShareControllerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  NSHashTable *connectedClients
 @property  NSMutableDictionary *containerIdToConnectionIdentifierMap
 @property  NSMutableArray *pendingRequests
 @property  double pendingRequestTimeoutInterval
 @property  HMFTimer *pendingRequestTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserCloudShareController logCategory]
  +[HMDUserCloudShareController identifierForConnection:]

  // instance methods
  -[HMDUserCloudShareController configure]
  -[HMDUserCloudShareController timerDidFire:]
  -[HMDUserCloudShareController connectedClients]
  -[HMDUserCloudShareController clientQueue]
  -[HMDUserCloudShareController setDelegate:]
  -[HMDUserCloudShareController pendingRequests]
  -[HMDUserCloudShareController delegate]
  -[HMDUserCloudShareController .cxx_destruct]
  -[HMDUserCloudShareController initWithDelegate:queue:pendingRequestTimeoutInterval:]
  -[HMDUserCloudShareController _connectionForContainerID:]
  -[HMDUserCloudShareController _startTimerIfNeeded]
  -[HMDUserCloudShareController _removeTimerIfNotNeeded]
  -[HMDUserCloudShareController _addRequestToPending:]
  -[HMDUserCloudShareController _handlePendingRequestTimeouts]
  -[HMDUserCloudShareController _resumeRequestsForContainerID:connection:]
  -[HMDUserCloudShareController _sendShareRequest:toConnection:]
  -[HMDUserCloudShareController _sendRepairRequest:toConnection:]
  -[HMDUserCloudShareController _handleShareForRemoteClientRequest:]
  -[HMDUserCloudShareController handleShareForRemoteClientRequest:home:completionHandler:]
  -[HMDUserCloudShareController handleShareRepairForRemoteClientRequest:home:completion:]
  -[HMDUserCloudShareController containerIdToConnectionIdentifierMap]
  -[HMDUserCloudShareController _registerWithXpcClient:containerIDs:]
  -[HMDUserCloudShareController registerWithXpcClient:containerIDs:]
  -[HMDUserCloudShareController _deregisterXpcClient:]
  -[HMDUserCloudShareController deregisterXpcClient:]
  -[HMDUserCloudShareController _invalidateXpcClient:]
  -[HMDUserCloudShareController invalidateXpcClient:]
  -[HMDUserCloudShareController setContainerIdToConnectionIdentifierMap:]
  -[HMDUserCloudShareController pendingRequestTimeoutInterval]
  -[HMDUserCloudShareController pendingRequestTimer]
  -[HMDUserCloudShareController setPendingRequestTimer:]


HomeKitEventTriggerExecutionSessionLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  HMDAnalyticsEventTriggerExecutionSessionData *analyticsData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventTriggerExecutionSessionLogEvent .cxx_destruct]
  -[HomeKitEventTriggerExecutionSessionLogEvent initWithSessionID:]
  -[HomeKitEventTriggerExecutionSessionLogEvent analyticsData]
  -[HomeKitEventTriggerExecutionSessionLogEvent AWDMessageType]
  -[HomeKitEventTriggerExecutionSessionLogEvent metricForAWD]
  -[HomeKitEventTriggerExecutionSessionLogEvent toAWDExecutionState:]


HomeKitEventTriggerUserConfirmationSendLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  HMDAnalyticsEventTriggerUserConfirmationSendData *analyticsData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventTriggerUserConfirmationSendLogEvent .cxx_destruct]
  -[HomeKitEventTriggerUserConfirmationSendLogEvent initWithSessionID:]
  -[HomeKitEventTriggerUserConfirmationSendLogEvent analyticsData]
  -[HomeKitEventTriggerUserConfirmationSendLogEvent AWDMessageType]
  -[HomeKitEventTriggerUserConfirmationSendLogEvent metricForAWD]


HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData *analyticsData
 @property  NSDate *startTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent startTime]
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent .cxx_destruct]
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent initWithSessionID:]
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent analyticsData]
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent AWDMessageType]
  -[HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent metricForAWD]


HomeKitEventTriggerAddLogEvent : HMMHomeLogEvent <HMDAWDLogEvent>
 @property  HMDAnalyticsAddEventTriggerData *analyticsData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventTriggerAddLogEvent .cxx_destruct]
  -[HomeKitEventTriggerAddLogEvent analyticsData]
  -[HomeKitEventTriggerAddLogEvent initWithHomeUUID:]
  -[HomeKitEventTriggerAddLogEvent AWDMessageType]
  -[HomeKitEventTriggerAddLogEvent metricForAWD]


HomeKitEventTriggerUpdateLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  HMDAnalyticsUpdateEventTriggerData *analyticsData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HomeKitEventTriggerUpdateLogEvent .cxx_destruct]
  -[HomeKitEventTriggerUpdateLogEvent analyticsData]
  -[HomeKitEventTriggerUpdateLogEvent init]
  -[HomeKitEventTriggerUpdateLogEvent AWDMessageType]
  -[HomeKitEventTriggerUpdateLogEvent metricForAWD]


HMDAnalyticsLocationEventData : HMFObject
 @property  BOOL notifyOnEntry
 @property  BOOL notifyOnExit

  // instance methods
  -[HMDAnalyticsLocationEventData setNotifyOnEntry:]
  -[HMDAnalyticsLocationEventData setNotifyOnExit:]
  -[HMDAnalyticsLocationEventData notifyOnEntry]
  -[HMDAnalyticsLocationEventData notifyOnExit]


HMDAnalyticsPredicateData : HMFObject
  // instance methods
  -[HMDAnalyticsPredicateData .cxx_destruct]
  -[HMDAnalyticsPredicateData init]


HMDAnalyticsPresenceEventData : HMFObject
 @property  int presenceEventGranularity
 @property  int presenceEventType

  // instance methods
  -[HMDAnalyticsPresenceEventData presenceEventType]
  -[HMDAnalyticsPresenceEventData setPresenceEventType:]
  -[HMDAnalyticsPresenceEventData presenceEventGranularity]
  -[HMDAnalyticsPresenceEventData setPresenceEventGranularity:]


HMDAnalyticsSignificantTimeEventData : HMFObject
 @property  NSString *significantEvent
 @property  BOOL offsetPresent

  // instance methods
  -[HMDAnalyticsSignificantTimeEventData .cxx_destruct]
  -[HMDAnalyticsSignificantTimeEventData setSignificantEvent:]
  -[HMDAnalyticsSignificantTimeEventData significantEvent]
  -[HMDAnalyticsSignificantTimeEventData setOffsetPresent:]
  -[HMDAnalyticsSignificantTimeEventData offsetPresent]


HMDAnalyticsCalendarEventData : HMFObject

HMDAnalyticsCharacteristicEventData : HMFObject
 @property  BOOL containsValue

  // instance methods
  -[HMDAnalyticsCharacteristicEventData setContainsValue:]
  -[HMDAnalyticsCharacteristicEventData containsValue]


HMDAnalyticsCharacteristicThresholdEventData : HMFObject
 @property  BOOL maxPresent
 @property  BOOL minPresent

  // instance methods
  -[HMDAnalyticsCharacteristicThresholdEventData setMinPresent:]
  -[HMDAnalyticsCharacteristicThresholdEventData setMaxPresent:]
  -[HMDAnalyticsCharacteristicThresholdEventData minPresent]
  -[HMDAnalyticsCharacteristicThresholdEventData maxPresent]


HMDAnalyticsDurationEventData : HMFObject

HMDAnalyticsEventTriggerData : HMFObject
 @property  int activationState
 @property  int activationType
 @property  NSArray *events
 @property  HMDAnalyticsPredicateData *predicate
 @property  BOOL containsRecurrences
 @property  BOOL executeOnce

  // instance methods
  -[HMDAnalyticsEventTriggerData setPredicate:]
  -[HMDAnalyticsEventTriggerData events]
  -[HMDAnalyticsEventTriggerData setActivationState:]
  -[HMDAnalyticsEventTriggerData predicate]
  -[HMDAnalyticsEventTriggerData .cxx_destruct]
  -[HMDAnalyticsEventTriggerData setEvents:]
  -[HMDAnalyticsEventTriggerData activationState]
  -[HMDAnalyticsEventTriggerData activationType]
  -[HMDAnalyticsEventTriggerData setActivationType:]
  -[HMDAnalyticsEventTriggerData executeOnce]
  -[HMDAnalyticsEventTriggerData setExecuteOnce:]
  -[HMDAnalyticsEventTriggerData containsRecurrences]
  -[HMDAnalyticsEventTriggerData initWithEventTrigger:isAdding:]
  -[HMDAnalyticsEventTriggerData setContainsRecurrences:]


HMDAnalyticsTriggerEventData : HMFObject
 @property  HMDAnalyticsCalendarEventData *calendarEvent
 @property  HMDAnalyticsCharacteristicEventData *charEvent
 @property  HMDAnalyticsCharacteristicThresholdEventData *charThresholdEvent
 @property  HMDAnalyticsDurationEventData *durationEvent
 @property  HMDAnalyticsLocationEventData *locationEvent
 @property  HMDAnalyticsPresenceEventData *presenceEvent
 @property  HMDAnalyticsSignificantTimeEventData *significantTimeEvent
 @property  HMDAnalyticsCharacteristicThresholdEventData *thresholdEvent
 @property  BOOL endEvent

  // instance methods
  -[HMDAnalyticsTriggerEventData setEndEvent:]
  -[HMDAnalyticsTriggerEventData .cxx_destruct]
  -[HMDAnalyticsTriggerEventData endEvent]
  -[HMDAnalyticsTriggerEventData presenceEvent]
  -[HMDAnalyticsTriggerEventData calendarEvent]
  -[HMDAnalyticsTriggerEventData setCalendarEvent:]
  -[HMDAnalyticsTriggerEventData charEvent]
  -[HMDAnalyticsTriggerEventData setCharEvent:]
  -[HMDAnalyticsTriggerEventData charThresholdEvent]
  -[HMDAnalyticsTriggerEventData setCharThresholdEvent:]
  -[HMDAnalyticsTriggerEventData durationEvent]
  -[HMDAnalyticsTriggerEventData setDurationEvent:]
  -[HMDAnalyticsTriggerEventData locationEvent]
  -[HMDAnalyticsTriggerEventData setLocationEvent:]
  -[HMDAnalyticsTriggerEventData setPresenceEvent:]
  -[HMDAnalyticsTriggerEventData significantTimeEvent]
  -[HMDAnalyticsTriggerEventData setSignificantTimeEvent:]
  -[HMDAnalyticsTriggerEventData thresholdEvent]
  -[HMDAnalyticsTriggerEventData setThresholdEvent:]


HMDAnalyticsAddEventTriggerData : HMFObject
 @property  unsigned long timestamp
 @property  HMDAnalyticsEventTriggerData *eventTrigger
 @property  int requestOrigin
 @property  unsigned int resultErrorCode

  // instance methods
  -[HMDAnalyticsAddEventTriggerData setTimestamp:]
  -[HMDAnalyticsAddEventTriggerData .cxx_destruct]
  -[HMDAnalyticsAddEventTriggerData timestamp]
  -[HMDAnalyticsAddEventTriggerData eventTrigger]
  -[HMDAnalyticsAddEventTriggerData setEventTrigger:]
  -[HMDAnalyticsAddEventTriggerData setResultErrorCode:]
  -[HMDAnalyticsAddEventTriggerData resultErrorCode]
  -[HMDAnalyticsAddEventTriggerData requestOrigin]
  -[HMDAnalyticsAddEventTriggerData setRequestOrigin:]


HMDAnalyticsEventTriggerExecutionSessionData : HMFObject
 @property  unsigned long timestamp
 @property  int executionState
 @property  int resultErrorCode
 @property  NSString *sessionID
 @property  NSArray *triggerEvents
 @property  NSArray *endEvents

  // instance methods
  -[HMDAnalyticsEventTriggerExecutionSessionData setTimestamp:]
  -[HMDAnalyticsEventTriggerExecutionSessionData sessionID]
  -[HMDAnalyticsEventTriggerExecutionSessionData .cxx_destruct]
  -[HMDAnalyticsEventTriggerExecutionSessionData timestamp]
  -[HMDAnalyticsEventTriggerExecutionSessionData setSessionID:]
  -[HMDAnalyticsEventTriggerExecutionSessionData endEvents]
  -[HMDAnalyticsEventTriggerExecutionSessionData executionState]
  -[HMDAnalyticsEventTriggerExecutionSessionData setExecutionState:]
  -[HMDAnalyticsEventTriggerExecutionSessionData setResultErrorCode:]
  -[HMDAnalyticsEventTriggerExecutionSessionData resultErrorCode]
  -[HMDAnalyticsEventTriggerExecutionSessionData triggerEvents]
  -[HMDAnalyticsEventTriggerExecutionSessionData setTriggerEvents:]
  -[HMDAnalyticsEventTriggerExecutionSessionData setEndEvents:]


HMDAnalyticsUpdateEventTriggerData : HMFObject
 @property  unsigned long timestamp
 @property  int requestOrigin
 @property  unsigned int resultErrorCode
 @property  int updateType

  // instance methods
  -[HMDAnalyticsUpdateEventTriggerData setTimestamp:]
  -[HMDAnalyticsUpdateEventTriggerData setUpdateType:]
  -[HMDAnalyticsUpdateEventTriggerData updateType]
  -[HMDAnalyticsUpdateEventTriggerData timestamp]
  -[HMDAnalyticsUpdateEventTriggerData setResultErrorCode:]
  -[HMDAnalyticsUpdateEventTriggerData resultErrorCode]
  -[HMDAnalyticsUpdateEventTriggerData requestOrigin]
  -[HMDAnalyticsUpdateEventTriggerData setRequestOrigin:]


HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData : HMFObject
 @property  unsigned long timestamp
 @property  unsigned long userResponseDelay
 @property  int resultErrorCode
 @property  NSString *sessionID

  // instance methods
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData setTimestamp:]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData sessionID]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData .cxx_destruct]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData timestamp]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData setSessionID:]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData setResultErrorCode:]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData resultErrorCode]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData userResponseDelay]
  -[HMDAnalyticsEventTriggerUserConfirmationReceiverSessionData setUserResponseDelay:]


HMDAnalyticsEventTriggerUserConfirmationSendData : HMFObject
 @property  unsigned long timestamp
 @property  int resultErrorCode
 @property  NSString *sessionID

  // instance methods
  -[HMDAnalyticsEventTriggerUserConfirmationSendData setTimestamp:]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData sessionID]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData .cxx_destruct]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData timestamp]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData setSessionID:]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData setResultErrorCode:]
  -[HMDAnalyticsEventTriggerUserConfirmationSendData resultErrorCode]


AWDHomeKitHomeConfiguration : PBCodable <NSCopying>
 @property  BOOL hasNumAccessories
 @property  unsigned int numAccessories
 @property  BOOL hasNumServices
 @property  unsigned int numServices
 @property  BOOL hasNumUsers
 @property  unsigned int numUsers
 @property  BOOL hasNumAdmins
 @property  unsigned int numAdmins
 @property  BOOL hasNumScenes
 @property  unsigned int numScenes
 @property  BOOL hasNumTriggers
 @property  unsigned int numTriggers
 @property  BOOL hasNumEventTriggers
 @property  unsigned int numEventTriggers
 @property  BOOL hasNumTimerTriggers
 @property  unsigned int numTimerTriggers
 @property  BOOL hasNumAccessoryServiceGroups
 @property  unsigned int numAccessoryServiceGroups
 @property  BOOL hasNumRooms
 @property  unsigned int numRooms
 @property  BOOL hasNumZones
 @property  unsigned int numZones
 @property  BOOL hasIsResidentAvailable
 @property  BOOL isResidentAvailable
 @property  BOOL hasIsPrimaryResident
 @property  BOOL isPrimaryResident
 @property  BOOL hasNumBridgedAccessories
 @property  unsigned int numBridgedAccessories
 @property  BOOL hasNumNotCertifiedAccessories
 @property  unsigned int numNotCertifiedAccessories
 @property  BOOL hasNumCertifiedAccessories
 @property  unsigned int numCertifiedAccessories
 @property  NSMutableArray *eventTriggers
 @property  BOOL hasNumHAPAccessories
 @property  unsigned int numHAPAccessories
 @property  BOOL hasNumAppleMediaAccessories
 @property  unsigned int numAppleMediaAccessories
 @property  BOOL hasNumWholeHouseAudioAccessories
 @property  unsigned int numWholeHouseAudioAccessories
 @property  BOOL hasNumAppleAudioAccessories
 @property  unsigned int numAppleAudioAccessories
 @property  BOOL hasNumAppleTVAccessories
 @property  unsigned int numAppleTVAccessories
 @property  BOOL hasNumCameraAccessories
 @property  unsigned int numCameraAccessories
 @property  BOOL hasNumMediaSystems
 @property  unsigned int numMediaSystems
 @property  BOOL hasNumTargetControllers
 @property  unsigned int numTargetControllers
 @property  BOOL hasNumCertifiedTargetControllers
 @property  unsigned int numCertifiedTargetControllers
 @property  BOOL hasNumBridgedTargetControllers
 @property  unsigned int numBridgedTargetControllers
 @property  BOOL hasNumCertifiedBridgedTargetControllers
 @property  unsigned int numCertifiedBridgedTargetControllers
 @property  BOOL hasNumConfiguredScenes
 @property  unsigned int numConfiguredScenes
 @property  BOOL hasIsOwner
 @property  BOOL isOwner
 @property  BOOL hasNumResidentsEnabled
 @property  unsigned int numResidentsEnabled
 @property  BOOL hasPrimaryReportingDevice
 @property  BOOL primaryReportingDevice
 @property  BOOL hasNumTelevisionAccessories
 @property  unsigned int numTelevisionAccessories
 @property  BOOL hasNetworkProtectionStatus
 @property  int networkProtectionStatus
 @property  BOOL hasNumAccessoriesWiFiPPSKCredential
 @property  unsigned int numAccessoriesWiFiPPSKCredential
 @property  BOOL hasNumAccessoriesNetworkProtectionAutoFullAccess
 @property  unsigned int numAccessoriesNetworkProtectionAutoFullAccess
 @property  BOOL hasNumAccessoriesNetworkProtectionAutoProtectedMainLAN
 @property  unsigned int numAccessoriesNetworkProtectionAutoProtectedMainLAN
 @property  BOOL hasNumAccessoriesNetworkProtectionAutoProtectedHomeKitLAN
 @property  unsigned int numAccessoriesNetworkProtectionAutoProtectedHomeKitLAN
 @property  BOOL hasNumAccessoriesNetworkProtectionFullAccess
 @property  unsigned int numAccessoriesNetworkProtectionFullAccess
 @property  BOOL hasNumAccessoriesNetworkProtectionHomeKitOnly
 @property  unsigned int numAccessoriesNetworkProtectionHomeKitOnly
 @property  BOOL hasNumAccessoriesNetworkProtectionUnprotected
 @property  unsigned int numAccessoriesNetworkProtectionUnprotected
 @property  BOOL hasNumShortcuts
 @property  unsigned int numShortcuts
 @property  NSMutableArray *homeKitMultiUserSettings
 @property  BOOL hasNumHAPIPAccessories
 @property  unsigned int numHAPIPAccessories
 @property  BOOL hasNumHAPBTAccessories
 @property  unsigned int numHAPBTAccessories
 @property  BOOL hasNumHAPBatteryServiceAccessories
 @property  unsigned int numHAPBatteryServiceAccessories
 @property  BOOL hasNumCameraAccessoriesSupportRecording
 @property  unsigned int numCameraAccessoriesSupportRecording
 @property  BOOL hasHomeCreationMonth
 @property  unsigned int homeCreationMonth
 @property  BOOL hasHomeCreationYear
 @property  unsigned int homeCreationYear
 @property  NSMutableArray *hapServicesLists
 @property  NSMutableArray *primaryHAPServicesLists
 @property  NSMutableArray *hapServicesListCertifieds
 @property  NSMutableArray *primaryHAPServicesListCertifieds
 @property  BOOL hasNumHAPSpeakerServiceAccessories
 @property  unsigned int numHAPSpeakerServiceAccessories
 @property  BOOL hasNumPrimaryHAPSpeakerServiceAccessories
 @property  unsigned int numPrimaryHAPSpeakerServiceAccessories
 @property  BOOL hasNumTriggerOwnedConfiguredScenes
 @property  unsigned int numTriggerOwnedConfiguredScenes
 @property  BOOL hasNumCameraAccessoriesRecordingEnabled
 @property  unsigned int numCameraAccessoriesRecordingEnabled
 @property  BOOL hasNumCameraAccessoriesRecordingAudioEnabled
 @property  unsigned int numCameraAccessoriesRecordingAudioEnabled
 @property  BOOL hasNumCameraAccessoriesSmartBulletinNotificationEnabled
 @property  unsigned int numCameraAccessoriesSmartBulletinNotificationEnabled
 @property  BOOL hasNumCameraAccessoriesReachabilityNotificationEnabled
 @property  unsigned int numCameraAccessoriesReachabilityNotificationEnabled
 @property  BOOL hasNumCameraAccessoriesWithActivityZonesEnabled
 @property  unsigned int numCameraAccessoriesWithActivityZonesEnabled
 @property  BOOL hasEnabledResidentsDeviceCapabilities
 @property  unsigned int enabledResidentsDeviceCapabilities
 @property  BOOL hasNumLightProfilesWithNaturalLightingSupported
 @property  unsigned int numLightProfilesWithNaturalLightingSupported
 @property  BOOL hasNumLightProfilesWithNaturalLightingEnabled
 @property  unsigned int numLightProfilesWithNaturalLightingEnabled
 @property  BOOL hasNumLightProfilesWithNaturalLightingUsed
 @property  unsigned int numLightProfilesWithNaturalLightingUsed
 @property  BOOL hasNumNoeBRs
 @property  unsigned int numNoeBRs
 @property  BOOL hasNumNoeAccessories
 @property  unsigned int numNoeAccessories
 @property  BOOL hasNumNoeFullCap
 @property  unsigned int numNoeFullCap
 @property  BOOL hasNumNoeSleepCap
 @property  unsigned int numNoeSleepCap
 @property  BOOL hasNumNoeMinCap
 @property  unsigned int numNoeMinCap
 @property  BOOL hasNumNoeRoutCap
 @property  unsigned int numNoeRoutCap
 @property  BOOL hasNumNoeBRCap
 @property  unsigned int numNoeBRCap
 @property  BOOL hasAutoThirdPartyJetEnable
 @property  BOOL autoThirdPartyJetEnable
 @property  BOOL hasNumHAPBLEAccessoriesSupportJet
 @property  unsigned int numHAPBLEAccessoriesSupportJet
 @property  BOOL hasNumHAPIPAccessoriesSupportJet
 @property  unsigned int numHAPIPAccessoriesSupportJet
 @property  BOOL hasNumHAPNoeAccessoriesSupportJet
 @property  unsigned int numHAPNoeAccessoriesSupportJet
 @property  BOOL hasHomeCreationCohortWeek
 @property  int homeCreationCohortWeek
 @property  BOOL hasFirstHAPAccessoryAddedCohortWeek
 @property  int firstHAPAccessoryAddedCohortWeek
 @property  BOOL hasCurrentMediaAccessoryFallbackMediaUserType
 @property  int currentMediaAccessoryFallbackMediaUserType
 @property  BOOL hasNumPoeCount
 @property  int numPoeCount
 @property  BOOL hasNumPoe2Count
 @property  int numPoe2Count
 @property  BOOL hasNumMoe1Accessories
 @property  unsigned int numMoe1Accessories
 @property  BOOL hasNumMoe2Accessories
 @property  unsigned int numMoe2Accessories
 @property  BOOL hasHomepodSynchLatency
 @property  unsigned int homepodSynchLatency
 @property  BOOL hasNumHomePods
 @property  unsigned int numHomePods
 @property  BOOL hasNumBSPs
 @property  unsigned int numBSPs
 @property  BOOL hasNumWoLAccessories
 @property  unsigned int numWoLAccessories
 @property  BOOL hasNumOfParticipantsHaveAccepted
 @property  unsigned int numOfParticipantsHaveAccepted
 @property  BOOL hasNumOfParticipantsHaveCloudShareIDAndHaveAccepted
 @property  unsigned int numOfParticipantsHaveCloudShareIDAndHaveAccepted
 @property  BOOL hasNumOfParticipantsHaveCloudShareIDButNotAccepted
 @property  unsigned int numOfParticipantsHaveCloudShareIDButNotAccepted
 @property  BOOL hasNumOfNonAcceptedParticipantsWithKnownCapability
 @property  unsigned int numOfNonAcceptedParticipantsWithKnownCapability
 @property  BOOL hasNumAppleTV4K2ndGenAccessories
 @property  unsigned int numAppleTV4K2ndGenAccessories

  // class methods
  +[AWDHomeKitHomeConfiguration eventTriggersType]
  +[AWDHomeKitHomeConfiguration homeKitMultiUserSettingsType]
  +[AWDHomeKitHomeConfiguration hapServicesListType]
  +[AWDHomeKitHomeConfiguration primaryHAPServicesListType]
  +[AWDHomeKitHomeConfiguration hapServicesListCertifiedType]
  +[AWDHomeKitHomeConfiguration primaryHAPServicesListCertifiedType]

  // instance methods
  -[AWDHomeKitHomeConfiguration copyTo:]
  -[AWDHomeKitHomeConfiguration numAccessories]
  -[AWDHomeKitHomeConfiguration .cxx_destruct]
  -[AWDHomeKitHomeConfiguration setNumAccessories:]
  -[AWDHomeKitHomeConfiguration mergeFrom:]
  -[AWDHomeKitHomeConfiguration dictionaryRepresentation]
  -[AWDHomeKitHomeConfiguration copyWithZone:]
  -[AWDHomeKitHomeConfiguration readFrom:]
  -[AWDHomeKitHomeConfiguration writeTo:]
  -[AWDHomeKitHomeConfiguration isEqual:]
  -[AWDHomeKitHomeConfiguration isOwner]
  -[AWDHomeKitHomeConfiguration setIsOwner:]
  -[AWDHomeKitHomeConfiguration setHasIsOwner:]
  -[AWDHomeKitHomeConfiguration hasIsOwner]
  -[AWDHomeKitHomeConfiguration numHAPAccessories]
  -[AWDHomeKitHomeConfiguration numCameraAccessories]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesRecordingEnabled]
  -[AWDHomeKitHomeConfiguration isPrimaryResident]
  -[AWDHomeKitHomeConfiguration setNumUsers:]
  -[AWDHomeKitHomeConfiguration setHasNumUsers:]
  -[AWDHomeKitHomeConfiguration hasNumUsers]
  -[AWDHomeKitHomeConfiguration numUsers]
  -[AWDHomeKitHomeConfiguration setIsResidentAvailable:]
  -[AWDHomeKitHomeConfiguration setHasIsResidentAvailable:]
  -[AWDHomeKitHomeConfiguration hasIsResidentAvailable]
  -[AWDHomeKitHomeConfiguration isResidentAvailable]
  -[AWDHomeKitHomeConfiguration enabledResidentsDeviceCapabilities]
  -[AWDHomeKitHomeConfiguration networkProtectionStatus]
  -[AWDHomeKitHomeConfiguration primaryReportingDevice]
  -[AWDHomeKitHomeConfiguration numCertifiedAccessories]
  -[AWDHomeKitHomeConfiguration numBridgedAccessories]
  -[AWDHomeKitHomeConfiguration numNotCertifiedAccessories]
  -[AWDHomeKitHomeConfiguration numAppleMediaAccessories]
  -[AWDHomeKitHomeConfiguration numHAPIPAccessories]
  -[AWDHomeKitHomeConfiguration numHAPBTAccessories]
  -[AWDHomeKitHomeConfiguration numHAPBatteryServiceAccessories]
  -[AWDHomeKitHomeConfiguration numAppleAudioAccessories]
  -[AWDHomeKitHomeConfiguration numAppleTVAccessories]
  -[AWDHomeKitHomeConfiguration numAppleTV4K2ndGenAccessories]
  -[AWDHomeKitHomeConfiguration numTelevisionAccessories]
  -[AWDHomeKitHomeConfiguration numHAPSpeakerServiceAccessories]
  -[AWDHomeKitHomeConfiguration numPrimaryHAPSpeakerServiceAccessories]
  -[AWDHomeKitHomeConfiguration numWholeHouseAudioAccessories]
  -[AWDHomeKitHomeConfiguration numAccessoriesWiFiPPSKCredential]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionUnprotected]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionAutoFullAccess]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionAutoProtectedMainLAN]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionAutoProtectedHomeKitLAN]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionFullAccess]
  -[AWDHomeKitHomeConfiguration numAccessoriesNetworkProtectionHomeKitOnly]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesSupportRecording]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesReachabilityNotificationEnabled]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesWithActivityZonesEnabled]
  -[AWDHomeKitHomeConfiguration numLightProfilesWithNaturalLightingSupported]
  -[AWDHomeKitHomeConfiguration numLightProfilesWithNaturalLightingEnabled]
  -[AWDHomeKitHomeConfiguration numLightProfilesWithNaturalLightingUsed]
  -[AWDHomeKitHomeConfiguration numResidentsEnabled]
  -[AWDHomeKitHomeConfiguration numServices]
  -[AWDHomeKitHomeConfiguration numTriggers]
  -[AWDHomeKitHomeConfiguration numEventTriggers]
  -[AWDHomeKitHomeConfiguration numTimerTriggers]
  -[AWDHomeKitHomeConfiguration numShortcuts]
  -[AWDHomeKitHomeConfiguration numTargetControllers]
  -[AWDHomeKitHomeConfiguration numCertifiedTargetControllers]
  -[AWDHomeKitHomeConfiguration numBridgedTargetControllers]
  -[AWDHomeKitHomeConfiguration numCertifiedBridgedTargetControllers]
  -[AWDHomeKitHomeConfiguration numAdmins]
  -[AWDHomeKitHomeConfiguration numConfiguredScenes]
  -[AWDHomeKitHomeConfiguration numTriggerOwnedConfiguredScenes]
  -[AWDHomeKitHomeConfiguration numScenes]
  -[AWDHomeKitHomeConfiguration numRooms]
  -[AWDHomeKitHomeConfiguration numZones]
  -[AWDHomeKitHomeConfiguration numAccessoryServiceGroups]
  -[AWDHomeKitHomeConfiguration homeCreationCohortWeek]
  -[AWDHomeKitHomeConfiguration firstHAPAccessoryAddedCohortWeek]
  -[AWDHomeKitHomeConfiguration autoThirdPartyJetEnable]
  -[AWDHomeKitHomeConfiguration numHAPIPAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration numHAPBLEAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration eventTriggers]
  -[AWDHomeKitHomeConfiguration setEventTriggers:]
  -[AWDHomeKitHomeConfiguration currentMediaAccessoryFallbackMediaUserType]
  -[AWDHomeKitHomeConfiguration numHomePods]
  -[AWDHomeKitHomeConfiguration numMediaSystems]
  -[AWDHomeKitHomeConfiguration numBSPs]
  -[AWDHomeKitHomeConfiguration numWoLAccessories]
  -[AWDHomeKitHomeConfiguration setHasNumAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumAccessories]
  -[AWDHomeKitHomeConfiguration setNumServices:]
  -[AWDHomeKitHomeConfiguration setHasNumServices:]
  -[AWDHomeKitHomeConfiguration hasNumServices]
  -[AWDHomeKitHomeConfiguration setNumAdmins:]
  -[AWDHomeKitHomeConfiguration setHasNumAdmins:]
  -[AWDHomeKitHomeConfiguration hasNumAdmins]
  -[AWDHomeKitHomeConfiguration setNumScenes:]
  -[AWDHomeKitHomeConfiguration setHasNumScenes:]
  -[AWDHomeKitHomeConfiguration hasNumScenes]
  -[AWDHomeKitHomeConfiguration setNumTriggers:]
  -[AWDHomeKitHomeConfiguration setHasNumTriggers:]
  -[AWDHomeKitHomeConfiguration hasNumTriggers]
  -[AWDHomeKitHomeConfiguration setNumEventTriggers:]
  -[AWDHomeKitHomeConfiguration setHasNumEventTriggers:]
  -[AWDHomeKitHomeConfiguration hasNumEventTriggers]
  -[AWDHomeKitHomeConfiguration setNumTimerTriggers:]
  -[AWDHomeKitHomeConfiguration setHasNumTimerTriggers:]
  -[AWDHomeKitHomeConfiguration hasNumTimerTriggers]
  -[AWDHomeKitHomeConfiguration setNumAccessoryServiceGroups:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoryServiceGroups:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoryServiceGroups]
  -[AWDHomeKitHomeConfiguration setNumRooms:]
  -[AWDHomeKitHomeConfiguration setHasNumRooms:]
  -[AWDHomeKitHomeConfiguration hasNumRooms]
  -[AWDHomeKitHomeConfiguration setNumZones:]
  -[AWDHomeKitHomeConfiguration setHasNumZones:]
  -[AWDHomeKitHomeConfiguration hasNumZones]
  -[AWDHomeKitHomeConfiguration setIsPrimaryResident:]
  -[AWDHomeKitHomeConfiguration setHasIsPrimaryResident:]
  -[AWDHomeKitHomeConfiguration hasIsPrimaryResident]
  -[AWDHomeKitHomeConfiguration setNumBridgedAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumBridgedAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumBridgedAccessories]
  -[AWDHomeKitHomeConfiguration setNumNotCertifiedAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumNotCertifiedAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumNotCertifiedAccessories]
  -[AWDHomeKitHomeConfiguration setNumCertifiedAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumCertifiedAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumCertifiedAccessories]
  -[AWDHomeKitHomeConfiguration clearEventTriggers]
  -[AWDHomeKitHomeConfiguration addEventTriggers:]
  -[AWDHomeKitHomeConfiguration eventTriggersCount]
  -[AWDHomeKitHomeConfiguration eventTriggersAtIndex:]
  -[AWDHomeKitHomeConfiguration setNumHAPAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumHAPAccessories]
  -[AWDHomeKitHomeConfiguration setNumAppleMediaAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumAppleMediaAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumAppleMediaAccessories]
  -[AWDHomeKitHomeConfiguration setNumWholeHouseAudioAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumWholeHouseAudioAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumWholeHouseAudioAccessories]
  -[AWDHomeKitHomeConfiguration setNumAppleAudioAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumAppleAudioAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumAppleAudioAccessories]
  -[AWDHomeKitHomeConfiguration setNumAppleTVAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumAppleTVAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumAppleTVAccessories]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessories]
  -[AWDHomeKitHomeConfiguration setNumMediaSystems:]
  -[AWDHomeKitHomeConfiguration setHasNumMediaSystems:]
  -[AWDHomeKitHomeConfiguration hasNumMediaSystems]
  -[AWDHomeKitHomeConfiguration setNumTargetControllers:]
  -[AWDHomeKitHomeConfiguration setHasNumTargetControllers:]
  -[AWDHomeKitHomeConfiguration hasNumTargetControllers]
  -[AWDHomeKitHomeConfiguration setNumCertifiedTargetControllers:]
  -[AWDHomeKitHomeConfiguration setHasNumCertifiedTargetControllers:]
  -[AWDHomeKitHomeConfiguration hasNumCertifiedTargetControllers]
  -[AWDHomeKitHomeConfiguration setNumBridgedTargetControllers:]
  -[AWDHomeKitHomeConfiguration setHasNumBridgedTargetControllers:]
  -[AWDHomeKitHomeConfiguration hasNumBridgedTargetControllers]
  -[AWDHomeKitHomeConfiguration setNumCertifiedBridgedTargetControllers:]
  -[AWDHomeKitHomeConfiguration setHasNumCertifiedBridgedTargetControllers:]
  -[AWDHomeKitHomeConfiguration hasNumCertifiedBridgedTargetControllers]
  -[AWDHomeKitHomeConfiguration setNumConfiguredScenes:]
  -[AWDHomeKitHomeConfiguration setHasNumConfiguredScenes:]
  -[AWDHomeKitHomeConfiguration hasNumConfiguredScenes]
  -[AWDHomeKitHomeConfiguration setNumResidentsEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumResidentsEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumResidentsEnabled]
  -[AWDHomeKitHomeConfiguration setPrimaryReportingDevice:]
  -[AWDHomeKitHomeConfiguration setHasPrimaryReportingDevice:]
  -[AWDHomeKitHomeConfiguration hasPrimaryReportingDevice]
  -[AWDHomeKitHomeConfiguration setNumTelevisionAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumTelevisionAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumTelevisionAccessories]
  -[AWDHomeKitHomeConfiguration setNetworkProtectionStatus:]
  -[AWDHomeKitHomeConfiguration setHasNetworkProtectionStatus:]
  -[AWDHomeKitHomeConfiguration hasNetworkProtectionStatus]
  -[AWDHomeKitHomeConfiguration networkProtectionStatusAsString:]
  -[AWDHomeKitHomeConfiguration StringAsNetworkProtectionStatus:]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesWiFiPPSKCredential:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesWiFiPPSKCredential:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesWiFiPPSKCredential]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionAutoFullAccess:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionAutoFullAccess:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionAutoFullAccess]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionAutoProtectedMainLAN:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionAutoProtectedMainLAN:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionAutoProtectedMainLAN]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionAutoProtectedHomeKitLAN:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionAutoProtectedHomeKitLAN:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionAutoProtectedHomeKitLAN]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionFullAccess:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionFullAccess:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionFullAccess]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionHomeKitOnly:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionHomeKitOnly:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionHomeKitOnly]
  -[AWDHomeKitHomeConfiguration setNumAccessoriesNetworkProtectionUnprotected:]
  -[AWDHomeKitHomeConfiguration setHasNumAccessoriesNetworkProtectionUnprotected:]
  -[AWDHomeKitHomeConfiguration hasNumAccessoriesNetworkProtectionUnprotected]
  -[AWDHomeKitHomeConfiguration setNumShortcuts:]
  -[AWDHomeKitHomeConfiguration setHasNumShortcuts:]
  -[AWDHomeKitHomeConfiguration hasNumShortcuts]
  -[AWDHomeKitHomeConfiguration clearHomeKitMultiUserSettings]
  -[AWDHomeKitHomeConfiguration addHomeKitMultiUserSettings:]
  -[AWDHomeKitHomeConfiguration homeKitMultiUserSettingsCount]
  -[AWDHomeKitHomeConfiguration homeKitMultiUserSettingsAtIndex:]
  -[AWDHomeKitHomeConfiguration setNumHAPIPAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPIPAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumHAPIPAccessories]
  -[AWDHomeKitHomeConfiguration setNumHAPBTAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPBTAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumHAPBTAccessories]
  -[AWDHomeKitHomeConfiguration setNumHAPBatteryServiceAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPBatteryServiceAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumHAPBatteryServiceAccessories]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesSupportRecording:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesSupportRecording:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesSupportRecording]
  -[AWDHomeKitHomeConfiguration setHomeCreationMonth:]
  -[AWDHomeKitHomeConfiguration setHasHomeCreationMonth:]
  -[AWDHomeKitHomeConfiguration hasHomeCreationMonth]
  -[AWDHomeKitHomeConfiguration setHomeCreationYear:]
  -[AWDHomeKitHomeConfiguration setHasHomeCreationYear:]
  -[AWDHomeKitHomeConfiguration hasHomeCreationYear]
  -[AWDHomeKitHomeConfiguration clearHapServicesLists]
  -[AWDHomeKitHomeConfiguration addHapServicesList:]
  -[AWDHomeKitHomeConfiguration hapServicesListsCount]
  -[AWDHomeKitHomeConfiguration hapServicesListAtIndex:]
  -[AWDHomeKitHomeConfiguration clearPrimaryHAPServicesLists]
  -[AWDHomeKitHomeConfiguration addPrimaryHAPServicesList:]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesListsCount]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesListAtIndex:]
  -[AWDHomeKitHomeConfiguration clearHapServicesListCertifieds]
  -[AWDHomeKitHomeConfiguration addHapServicesListCertified:]
  -[AWDHomeKitHomeConfiguration hapServicesListCertifiedsCount]
  -[AWDHomeKitHomeConfiguration hapServicesListCertifiedAtIndex:]
  -[AWDHomeKitHomeConfiguration clearPrimaryHAPServicesListCertifieds]
  -[AWDHomeKitHomeConfiguration addPrimaryHAPServicesListCertified:]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesListCertifiedsCount]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesListCertifiedAtIndex:]
  -[AWDHomeKitHomeConfiguration setNumHAPSpeakerServiceAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPSpeakerServiceAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumHAPSpeakerServiceAccessories]
  -[AWDHomeKitHomeConfiguration setNumPrimaryHAPSpeakerServiceAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumPrimaryHAPSpeakerServiceAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumPrimaryHAPSpeakerServiceAccessories]
  -[AWDHomeKitHomeConfiguration setNumTriggerOwnedConfiguredScenes:]
  -[AWDHomeKitHomeConfiguration setHasNumTriggerOwnedConfiguredScenes:]
  -[AWDHomeKitHomeConfiguration hasNumTriggerOwnedConfiguredScenes]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesRecordingEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesRecordingEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesRecordingEnabled]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesRecordingAudioEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesRecordingAudioEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesRecordingAudioEnabled]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesSmartBulletinNotificationEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesSmartBulletinNotificationEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesSmartBulletinNotificationEnabled]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesReachabilityNotificationEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesReachabilityNotificationEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesReachabilityNotificationEnabled]
  -[AWDHomeKitHomeConfiguration setNumCameraAccessoriesWithActivityZonesEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumCameraAccessoriesWithActivityZonesEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumCameraAccessoriesWithActivityZonesEnabled]
  -[AWDHomeKitHomeConfiguration setEnabledResidentsDeviceCapabilities:]
  -[AWDHomeKitHomeConfiguration setHasEnabledResidentsDeviceCapabilities:]
  -[AWDHomeKitHomeConfiguration hasEnabledResidentsDeviceCapabilities]
  -[AWDHomeKitHomeConfiguration setNumLightProfilesWithNaturalLightingSupported:]
  -[AWDHomeKitHomeConfiguration setHasNumLightProfilesWithNaturalLightingSupported:]
  -[AWDHomeKitHomeConfiguration hasNumLightProfilesWithNaturalLightingSupported]
  -[AWDHomeKitHomeConfiguration setNumLightProfilesWithNaturalLightingEnabled:]
  -[AWDHomeKitHomeConfiguration setHasNumLightProfilesWithNaturalLightingEnabled:]
  -[AWDHomeKitHomeConfiguration hasNumLightProfilesWithNaturalLightingEnabled]
  -[AWDHomeKitHomeConfiguration setNumLightProfilesWithNaturalLightingUsed:]
  -[AWDHomeKitHomeConfiguration setHasNumLightProfilesWithNaturalLightingUsed:]
  -[AWDHomeKitHomeConfiguration hasNumLightProfilesWithNaturalLightingUsed]
  -[AWDHomeKitHomeConfiguration setNumNoeBRs:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeBRs:]
  -[AWDHomeKitHomeConfiguration hasNumNoeBRs]
  -[AWDHomeKitHomeConfiguration setNumNoeAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumNoeAccessories]
  -[AWDHomeKitHomeConfiguration setNumNoeFullCap:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeFullCap:]
  -[AWDHomeKitHomeConfiguration hasNumNoeFullCap]
  -[AWDHomeKitHomeConfiguration setNumNoeSleepCap:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeSleepCap:]
  -[AWDHomeKitHomeConfiguration hasNumNoeSleepCap]
  -[AWDHomeKitHomeConfiguration setNumNoeMinCap:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeMinCap:]
  -[AWDHomeKitHomeConfiguration hasNumNoeMinCap]
  -[AWDHomeKitHomeConfiguration setNumNoeRoutCap:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeRoutCap:]
  -[AWDHomeKitHomeConfiguration hasNumNoeRoutCap]
  -[AWDHomeKitHomeConfiguration setNumNoeBRCap:]
  -[AWDHomeKitHomeConfiguration setHasNumNoeBRCap:]
  -[AWDHomeKitHomeConfiguration hasNumNoeBRCap]
  -[AWDHomeKitHomeConfiguration setAutoThirdPartyJetEnable:]
  -[AWDHomeKitHomeConfiguration setHasAutoThirdPartyJetEnable:]
  -[AWDHomeKitHomeConfiguration hasAutoThirdPartyJetEnable]
  -[AWDHomeKitHomeConfiguration setNumHAPBLEAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPBLEAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration hasNumHAPBLEAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration setNumHAPIPAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPIPAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration hasNumHAPIPAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration setNumHAPNoeAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration setHasNumHAPNoeAccessoriesSupportJet:]
  -[AWDHomeKitHomeConfiguration hasNumHAPNoeAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration setHomeCreationCohortWeek:]
  -[AWDHomeKitHomeConfiguration setHasHomeCreationCohortWeek:]
  -[AWDHomeKitHomeConfiguration hasHomeCreationCohortWeek]
  -[AWDHomeKitHomeConfiguration setFirstHAPAccessoryAddedCohortWeek:]
  -[AWDHomeKitHomeConfiguration setHasFirstHAPAccessoryAddedCohortWeek:]
  -[AWDHomeKitHomeConfiguration hasFirstHAPAccessoryAddedCohortWeek]
  -[AWDHomeKitHomeConfiguration setCurrentMediaAccessoryFallbackMediaUserType:]
  -[AWDHomeKitHomeConfiguration setHasCurrentMediaAccessoryFallbackMediaUserType:]
  -[AWDHomeKitHomeConfiguration hasCurrentMediaAccessoryFallbackMediaUserType]
  -[AWDHomeKitHomeConfiguration currentMediaAccessoryFallbackMediaUserTypeAsString:]
  -[AWDHomeKitHomeConfiguration StringAsCurrentMediaAccessoryFallbackMediaUserType:]
  -[AWDHomeKitHomeConfiguration setNumPoeCount:]
  -[AWDHomeKitHomeConfiguration setHasNumPoeCount:]
  -[AWDHomeKitHomeConfiguration hasNumPoeCount]
  -[AWDHomeKitHomeConfiguration setNumPoe2Count:]
  -[AWDHomeKitHomeConfiguration setHasNumPoe2Count:]
  -[AWDHomeKitHomeConfiguration hasNumPoe2Count]
  -[AWDHomeKitHomeConfiguration setNumMoe1Accessories:]
  -[AWDHomeKitHomeConfiguration setHasNumMoe1Accessories:]
  -[AWDHomeKitHomeConfiguration hasNumMoe1Accessories]
  -[AWDHomeKitHomeConfiguration setNumMoe2Accessories:]
  -[AWDHomeKitHomeConfiguration setHasNumMoe2Accessories:]
  -[AWDHomeKitHomeConfiguration hasNumMoe2Accessories]
  -[AWDHomeKitHomeConfiguration setHomepodSynchLatency:]
  -[AWDHomeKitHomeConfiguration setHasHomepodSynchLatency:]
  -[AWDHomeKitHomeConfiguration hasHomepodSynchLatency]
  -[AWDHomeKitHomeConfiguration setNumHomePods:]
  -[AWDHomeKitHomeConfiguration setHasNumHomePods:]
  -[AWDHomeKitHomeConfiguration hasNumHomePods]
  -[AWDHomeKitHomeConfiguration setNumBSPs:]
  -[AWDHomeKitHomeConfiguration setHasNumBSPs:]
  -[AWDHomeKitHomeConfiguration hasNumBSPs]
  -[AWDHomeKitHomeConfiguration setNumWoLAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumWoLAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumWoLAccessories]
  -[AWDHomeKitHomeConfiguration setNumOfParticipantsHaveAccepted:]
  -[AWDHomeKitHomeConfiguration setHasNumOfParticipantsHaveAccepted:]
  -[AWDHomeKitHomeConfiguration hasNumOfParticipantsHaveAccepted]
  -[AWDHomeKitHomeConfiguration setNumOfParticipantsHaveCloudShareIDAndHaveAccepted:]
  -[AWDHomeKitHomeConfiguration setHasNumOfParticipantsHaveCloudShareIDAndHaveAccepted:]
  -[AWDHomeKitHomeConfiguration hasNumOfParticipantsHaveCloudShareIDAndHaveAccepted]
  -[AWDHomeKitHomeConfiguration setNumOfParticipantsHaveCloudShareIDButNotAccepted:]
  -[AWDHomeKitHomeConfiguration setHasNumOfParticipantsHaveCloudShareIDButNotAccepted:]
  -[AWDHomeKitHomeConfiguration hasNumOfParticipantsHaveCloudShareIDButNotAccepted]
  -[AWDHomeKitHomeConfiguration setNumOfNonAcceptedParticipantsWithKnownCapability:]
  -[AWDHomeKitHomeConfiguration setHasNumOfNonAcceptedParticipantsWithKnownCapability:]
  -[AWDHomeKitHomeConfiguration hasNumOfNonAcceptedParticipantsWithKnownCapability]
  -[AWDHomeKitHomeConfiguration setNumAppleTV4K2ndGenAccessories:]
  -[AWDHomeKitHomeConfiguration setHasNumAppleTV4K2ndGenAccessories:]
  -[AWDHomeKitHomeConfiguration hasNumAppleTV4K2ndGenAccessories]
  -[AWDHomeKitHomeConfiguration homeKitMultiUserSettings]
  -[AWDHomeKitHomeConfiguration setHomeKitMultiUserSettings:]
  -[AWDHomeKitHomeConfiguration homeCreationMonth]
  -[AWDHomeKitHomeConfiguration homeCreationYear]
  -[AWDHomeKitHomeConfiguration hapServicesLists]
  -[AWDHomeKitHomeConfiguration setHapServicesLists:]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesLists]
  -[AWDHomeKitHomeConfiguration setPrimaryHAPServicesLists:]
  -[AWDHomeKitHomeConfiguration hapServicesListCertifieds]
  -[AWDHomeKitHomeConfiguration setHapServicesListCertifieds:]
  -[AWDHomeKitHomeConfiguration primaryHAPServicesListCertifieds]
  -[AWDHomeKitHomeConfiguration setPrimaryHAPServicesListCertifieds:]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesRecordingAudioEnabled]
  -[AWDHomeKitHomeConfiguration numCameraAccessoriesSmartBulletinNotificationEnabled]
  -[AWDHomeKitHomeConfiguration numNoeBRs]
  -[AWDHomeKitHomeConfiguration numNoeAccessories]
  -[AWDHomeKitHomeConfiguration numNoeFullCap]
  -[AWDHomeKitHomeConfiguration numNoeSleepCap]
  -[AWDHomeKitHomeConfiguration numNoeMinCap]
  -[AWDHomeKitHomeConfiguration numNoeRoutCap]
  -[AWDHomeKitHomeConfiguration numNoeBRCap]
  -[AWDHomeKitHomeConfiguration numHAPNoeAccessoriesSupportJet]
  -[AWDHomeKitHomeConfiguration numPoeCount]
  -[AWDHomeKitHomeConfiguration numPoe2Count]
  -[AWDHomeKitHomeConfiguration numMoe1Accessories]
  -[AWDHomeKitHomeConfiguration numMoe2Accessories]
  -[AWDHomeKitHomeConfiguration homepodSynchLatency]
  -[AWDHomeKitHomeConfiguration numOfParticipantsHaveAccepted]
  -[AWDHomeKitHomeConfiguration numOfParticipantsHaveCloudShareIDAndHaveAccepted]
  -[AWDHomeKitHomeConfiguration numOfParticipantsHaveCloudShareIDButNotAccepted]
  -[AWDHomeKitHomeConfiguration numOfNonAcceptedParticipantsWithKnownCapability]


HMDApplicationVendorIDStoreValue : HMFObject <NSSecureCoding>
 @property  NSData *vendorIdSha1
 @property  NSString *applicationBundleId
 @property  NSString *companionAppBundleId
 @property  BOOL spiClient

  // class methods
  +[HMDApplicationVendorIDStoreValue supportsSecureCoding]

  // instance methods
  -[HMDApplicationVendorIDStoreValue encodeWithCoder:]
  -[HMDApplicationVendorIDStoreValue .cxx_destruct]
  -[HMDApplicationVendorIDStoreValue initWithCoder:]
  -[HMDApplicationVendorIDStoreValue applicationBundleId]
  -[HMDApplicationVendorIDStoreValue initWithVendorIDSha1:applicationBundleId:companionAppBundleId:spiClient:]
  -[HMDApplicationVendorIDStoreValue vendorIdSha1]
  -[HMDApplicationVendorIDStoreValue companionAppBundleId]
  -[HMDApplicationVendorIDStoreValue spiClient]


HMDApplicationVendorIDStore : HMFObject <NSSecureCoding>
 @property  NSMutableDictionary *applicationVendorIdMapping
 @property  NSMutableDictionary *applicationMachUUIDMapping
 @property  NSObject<OS_dispatch_queue> *clientQueue

  // class methods
  +[HMDApplicationVendorIDStore supportsSecureCoding]
  +[HMDApplicationVendorIDStore sharedStore]

  // instance methods
  -[HMDApplicationVendorIDStore _save]
  -[HMDApplicationVendorIDStore clientQueue]
  -[HMDApplicationVendorIDStore encodeWithCoder:]
  -[HMDApplicationVendorIDStore .cxx_destruct]
  -[HMDApplicationVendorIDStore init]
  -[HMDApplicationVendorIDStore initWithCoder:]
  -[HMDApplicationVendorIDStore __handleUninstalledApplication:]
  -[HMDApplicationVendorIDStore checkCorrectness]
  -[HMDApplicationVendorIDStore vendorIDForApplication:]
  -[HMDApplicationVendorIDStore _vendorIDForApplication:]
  -[HMDApplicationVendorIDStore _extractVendorIDForApplication:]
  -[HMDApplicationVendorIDStore addVendorID:applicationBundleId:spiClient:]
  -[HMDApplicationVendorIDStore addVendorID:applicationBundleId:]
  -[HMDApplicationVendorIDStore addVendorID:applicationBundleId:companionAppBundleId:]
  -[HMDApplicationVendorIDStore _setAndSaveVendorID:applicationBundleId:companionAppBundleId:spiClient:]
  -[HMDApplicationVendorIDStore _addVendorID:forApplication:companionAppBundleId:spiClient:]
  -[HMDApplicationVendorIDStore removeVendorIDForApplicationBundleId:]
  -[HMDApplicationVendorIDStore machUUIDsForApplication:]
  -[HMDApplicationVendorIDStore _machUUIDsForApplication:]
  -[HMDApplicationVendorIDStore applicationVendorIdMapping]
  -[HMDApplicationVendorIDStore applicationMachUUIDMapping]


HMDPreferredMediaUserEventController : NSObject <HMDFetchedSettingsDriverDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDFetchedSettingsDriver> *driver
 @property  <HMDPreferredMediaUserEventControllerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDPreferredMediaUserEventController eventSource]
  -[HMDPreferredMediaUserEventController dataSource]
  -[HMDPreferredMediaUserEventController .cxx_destruct]
  -[HMDPreferredMediaUserEventController driver]
  -[HMDPreferredMediaUserEventController setQueue:]
  -[HMDPreferredMediaUserEventController queue]
  -[HMDPreferredMediaUserEventController eventTimestamp]
  -[HMDPreferredMediaUserEventController _postUpdateEventsIfDifferent:]
  -[HMDPreferredMediaUserEventController driver:didUpdateSettings:]
  -[HMDPreferredMediaUserEventController driver:didUpdatePrimaryUserInfo:]
  -[HMDPreferredMediaUserEventController driverDidReload:]
  -[HMDPreferredMediaUserEventController initWithDataSource:queue:driver:]
  -[HMDPreferredMediaUserEventController updatePreferredMediaUserWithPrimaryUserInfo:completion:]


HMDNameValidator : HMFObject
 @property  NSMutableDictionary *namespaceList
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *homeManagerUUID
 @property  NSPredicate *nonZeroLengthPredicate

  // instance methods
  -[HMDNameValidator workQueue]
  -[HMDNameValidator setWorkQueue:]
  -[HMDNameValidator .cxx_destruct]
  -[HMDNameValidator initWithUUID:]
  -[HMDNameValidator validateName:]
  -[HMDNameValidator addNamespace:]
  -[HMDNameValidator _validateName:]
  -[HMDNameValidator _addNamespace:]
  -[HMDNameValidator _removeNamespace:]
  -[HMDNameValidator despaceName:]
  -[HMDNameValidator trimNotAllowedCharactersFromName:error:]
  -[HMDNameValidator _checkForConflict:namespace:]
  -[HMDNameValidator _addName:namespace:]
  -[HMDNameValidator _removeName:namespace:]
  -[HMDNameValidator _replaceName:withNewName:inNamespaces:]
  -[HMDNameValidator removeNamespace:]
  -[HMDNameValidator checkForConflict:namespace:]
  -[HMDNameValidator addName:namespace:]
  -[HMDNameValidator addActionSetName:namespace:]
  -[HMDNameValidator addName:namespace:voiceShortcutCheck:]
  -[HMDNameValidator removeName:namespace:]
  -[HMDNameValidator replaceName:withNewName:inNamespaces:]
  -[HMDNameValidator replaceActionSetName:withNewName:inNamespaces:]
  -[HMDNameValidator replaceName:withNewName:inNamespaces:voiceShortcutCheck:]
  -[HMDNameValidator namespaceList]
  -[HMDNameValidator setNamespaceList:]
  -[HMDNameValidator homeManagerUUID]
  -[HMDNameValidator setHomeManagerUUID:]
  -[HMDNameValidator nonZeroLengthPredicate]
  -[HMDNameValidator setNonZeroLengthPredicate:]


HMDWACScanner : NSObject <HMFLogging, HAPAirPlayAccessoryBrowserDelegate, HMDWACScanner>
 @property  <HMDWACScannerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWACScanner logCategory]

  // instance methods
  -[HMDWACScanner setDelegate:]
  -[HMDWACScanner delegate]
  -[HMDWACScanner setDelegateQueue:]
  -[HMDWACScanner .cxx_destruct]
  -[HMDWACScanner delegateQueue]
  -[HMDWACScanner resume]
  -[HMDWACScanner stop]
  -[HMDWACScanner backoff]
  -[HMDWACScanner setDelegate:queue:]
  -[HMDWACScanner start]
  -[HMDWACScanner init]
  -[HMDWACScanner wacBrowser:didUpdateAirPlayDevice:]
  -[HMDWACScanner wacBrowser:didRemoveAirPlayDevice:]
  -[HMDWACScanner wacBrowser:didFindAirPlayDevice:]
  -[HMDWACScanner startDiscoveringAirPlayAccessoriesWithBrowser:]


HMDCUWiFiDeviceWrapper : NSObject <HMDWACDevice, HMFLogging>
 @property  NSUUID *identifier
 @property  NSString *deviceID
 @property  NSString *ssid
 @property  NSString *name
 @property  BOOL isConfigured
 @property  BOOL supportsAirPlay2
 @property  id underlyingDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCUWiFiDeviceWrapper logCategory]

  // instance methods
  -[HMDCUWiFiDeviceWrapper deviceID]
  -[HMDCUWiFiDeviceWrapper identifier]
  -[HMDCUWiFiDeviceWrapper logIdentifier]
  -[HMDCUWiFiDeviceWrapper .cxx_destruct]
  -[HMDCUWiFiDeviceWrapper ssid]
  -[HMDCUWiFiDeviceWrapper startConfigurationWithCompletionHandler:]
  -[HMDCUWiFiDeviceWrapper name]
  -[HMDCUWiFiDeviceWrapper underlyingDevice]
  -[HMDCUWiFiDeviceWrapper isConfigured]
  -[HMDCUWiFiDeviceWrapper supportsAirPlay2]
  -[HMDCUWiFiDeviceWrapper cancelConfigurationWithCompletionHandler:]
  -[HMDCUWiFiDeviceWrapper initWithCUWiFiDevice:dispatchQueue:]


HMDCoreAnalyticsLogObserver : HMFObject <HMFLogging, HMMLogEventObserver>
 @property  <HMDCoreAnalyticsLogObserverDataSource> *dataSource
 @property  NSDictionary *homeConfigurationCommonDimensions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCoreAnalyticsLogObserver logCategory]

  // instance methods
  -[HMDCoreAnalyticsLogObserver initWithDataSource:]
  -[HMDCoreAnalyticsLogObserver dataSource]
  -[HMDCoreAnalyticsLogObserver .cxx_destruct]
  -[HMDCoreAnalyticsLogObserver didReceiveEventFromDispatcher:]
  -[HMDCoreAnalyticsLogObserver addHomesCategorizationCommonDimensionToEventDictionary:]
  -[HMDCoreAnalyticsLogObserver addDeviceCapabilitiesAndEnablementsCommonDimensionsToEventDictionary:]
  -[HMDCoreAnalyticsLogObserver addHistogrammedCommonConfigurationDimensionsForLogEvent:toEventDictionary:]
  -[HMDCoreAnalyticsLogObserver addAccessoryDetailsFromLogEvent:toEventDictionary:]
  -[HMDCoreAnalyticsLogObserver addErrorDetailsFromLogEvent:toEventDictionary:]
  -[HMDCoreAnalyticsLogObserver addEventDurationInMillisecondsFromLogEvent:toEventDictionary:]
  -[HMDCoreAnalyticsLogObserver dictionaryFromEvent:]
  -[HMDCoreAnalyticsLogObserver homeConfigurationCommonDimensions]
  -[HMDCoreAnalyticsLogObserver setHomeConfigurationCommonDimensions:]


HMDDatabase : HMFObject <HMBLocalDatabaseDelegate, HMBCloudDatabaseDelegate, HMDDatabaseZoneDelegate, HMFLogging, HMDDatabase>
 @property  NSHashTable *delegates
 @property  NSMapTable *zoneDelegatesByLocalZone
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  BOOL hasStarted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMBCloudDatabase *cloudDatabase
 @property  HMBLocalDatabase *localDatabase

  // class methods
  +[HMDDatabase defaultDatabase]
  +[HMDDatabase logCategory]
  +[HMDDatabase cameraClipsDatabase]
  +[HMDDatabase defaultLocalDatabaseFileURL]
  +[HMDDatabase registerQueries]

  // instance methods
  -[HMDDatabase delegates]
  -[HMDDatabase logIdentifier]
  -[HMDDatabase addDelegate:]
  -[HMDDatabase registerSharedSubscriptionForExternalRecordType:]
  -[HMDDatabase .cxx_destruct]
  -[HMDDatabase removeDelegate:]
  -[HMDDatabase performDelegateCallback:]
  -[HMDDatabase hasStarted]
  -[HMDDatabase cloudDatabase:encounteredError:withOperation:onContainer:]
  -[HMDDatabase cloudDatabase:didCreateZoneWithID:]
  -[HMDDatabase start]
  -[HMDDatabase cloudDatabase:encounteredError:withOperation:onZone:]
  -[HMDDatabase localDatabase]
  -[HMDDatabase acceptInvitation:]
  -[HMDDatabase cloudDatabase:didRemoveZoneWithID:]
  -[HMDDatabase unregisterSharedSubscriptionForExternalRecordType:]
  -[HMDDatabase setHasStarted:]
  -[HMDDatabase cloudDatabase]
  -[HMDDatabase cloudZone:didChangeRebuildStatus:]
  -[HMDDatabase localDatabase:willRemoveZoneWithID:]
  -[HMDDatabase cloudDatabase:willRemoveZoneWithID:]
  -[HMDDatabase cloudDatabase:didReceiveMessageWithUserInfo:]
  -[HMDDatabase localZone:didCompleteProcessingWithResult:]
  -[HMDDatabase localDatabaseShouldLogPrivateInformation:]
  -[HMDDatabase localDatabase:detectedLocalCorruptionWithInfo:]
  -[HMDDatabase cloudZone:didRemoveParticipantWithClientIdentifier:]
  -[HMDDatabase logEventSubmitter]
  -[HMDDatabase existingPrivateZonesWithName:configuration:delegate:error:]
  -[HMDDatabase privateZonesWithName:configuration:delegate:error:]
  -[HMDDatabase existingSharedZoneIDWithName:]
  -[HMDDatabase sharedZonesWithID:configuration:delegate:error:]
  -[HMDDatabase removePrivateZonesWithName:]
  -[HMDDatabase removeSharedZonesWithName:]
  -[HMDDatabase removeLocalAndCloudDataForLocalZone:]
  -[HMDDatabase initWithFileURL:cloudContainerIdentifier:cloudContainerSourceApplicationBundleIdentifier:]
  -[HMDDatabase initWithLocalDatabase:cloudDatabase:logEventSubmitter:]
  -[HMDDatabase zonesWithID:isPrivate:shouldCreate:configuration:delegate:error:]
  -[HMDDatabase removeZonesWithID:isPrivate:]
  -[HMDDatabase zoneDelegatesByLocalZone]
  -[HMDDatabase addZoneDelegate:forLocalZone:]
  -[HMDDatabase removeZoneDelegate:forLocalZone:]
  -[HMDDatabase performZoneDelegateCallback:forLocalZone:]
  -[HMDDatabase mergedActionFutureForActionFutures:]


HMDDatabaseFetchZonesResult : NSObject
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone

  // instance methods
  -[HMDDatabaseFetchZonesResult .cxx_destruct]
  -[HMDDatabaseFetchZonesResult cloudZone]
  -[HMDDatabaseFetchZonesResult localZone]
  -[HMDDatabaseFetchZonesResult initWithLocalZone:cloudZone:]


HMDBulletinCategory : HMFObject
  // class methods
  +[HMDBulletinCategory _enumerationValueLocalizationKeys]
  +[HMDBulletinCategory _secureStateMap]
  +[HMDBulletinCategory _sensorMap]
  +[HMDBulletinCategory localizedStringForItems:]
  +[HMDBulletinCategory localizedActionForCharacteristic:]
  +[HMDBulletinCategory localizedStateForCharacteristic:]
  +[HMDBulletinCategory trimLeadingAndTailingSpacesInName:]
  +[HMDBulletinCategory trimLeadingAndTailingDotInName:]
  +[HMDBulletinCategory composedNameForCharacteristic:]
  +[HMDBulletinCategory isSensorDetectedCharacteristic:]
  +[HMDBulletinCategory isSecureServiceType:]
  +[HMDBulletinCategory bulletinReasonForChangedCharacteristic:]
  +[HMDBulletinCategory targetCurrentCharacteristicTypeMap]
  +[HMDBulletinCategory _localizedStateForValue:characteristicType:]
  +[HMDBulletinCategory _presentationTypeForType:]
  +[HMDBulletinCategory presentationValueForValue:type:]


HMDMessageHandlerQueuedMessage : HMFObject <HMFTimerDelegate>
 @property  HMFTimer *timer
 @property  <HMDMessageHandlerQueuedMessageDelegate> *delegate
 @property  NSUUID *identifier
 @property  NSString *name
 @property  HMFMessage *message
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMessageHandlerQueuedMessage logCategory]

  // instance methods
  -[HMDMessageHandlerQueuedMessage timerDidFire:]
  -[HMDMessageHandlerQueuedMessage identifier]
  -[HMDMessageHandlerQueuedMessage logIdentifier]
  -[HMDMessageHandlerQueuedMessage resumeTimer]
  -[HMDMessageHandlerQueuedMessage setDelegate:]
  -[HMDMessageHandlerQueuedMessage delegate]
  -[HMDMessageHandlerQueuedMessage attributeDescriptions]
  -[HMDMessageHandlerQueuedMessage privateDescription]
  -[HMDMessageHandlerQueuedMessage .cxx_destruct]
  -[HMDMessageHandlerQueuedMessage timer]
  -[HMDMessageHandlerQueuedMessage initWithMessage:]
  -[HMDMessageHandlerQueuedMessage name]
  -[HMDMessageHandlerQueuedMessage message]
  -[HMDMessageHandlerQueuedMessage initWithMessage:timeInterval:]
  -[HMDMessageHandlerQueuedMessage suspendTimer]


HMDSiriEndpointProfileMetricsDispatcher : HMFObject <HMFLogging, HMDLogEventDailyTaskRunner>
 @property  NSUUID *homeUUID
 @property  NSUUID *accessoryUUID
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  <HMDSiriEndpointProfileMetricsDispatcherDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointProfileMetricsDispatcher logCategory]

  // instance methods
  -[HMDSiriEndpointProfileMetricsDispatcher accessoryUUID]
  -[HMDSiriEndpointProfileMetricsDispatcher logIdentifier]
  -[HMDSiriEndpointProfileMetricsDispatcher dataSource]
  -[HMDSiriEndpointProfileMetricsDispatcher .cxx_destruct]
  -[HMDSiriEndpointProfileMetricsDispatcher homeUUID]
  -[HMDSiriEndpointProfileMetricsDispatcher setDataSource:]
  -[HMDSiriEndpointProfileMetricsDispatcher logEventSubmitter]
  -[HMDSiriEndpointProfileMetricsDispatcher runDailyTask]
  -[HMDSiriEndpointProfileMetricsDispatcher initWithAccessoryUUID:homeUUID:logEventSubmitter:]
  -[HMDSiriEndpointProfileMetricsDispatcher submitRoutineConfigurationEvent]
  -[HMDSiriEndpointProfileMetricsDispatcher submitRoutineConfigurationEventWithAccessorySettingFields:]
  -[HMDSiriEndpointProfileMetricsDispatcher fetchAccessorySettingFields]
  -[HMDSiriEndpointProfileMetricsDispatcher dataSourceShouldSubmitRoutineConfigurationEvent]
  -[HMDSiriEndpointProfileMetricsDispatcher dataSourceAccessoryCategoryType]
  -[HMDSiriEndpointProfileMetricsDispatcher dataSourceCompositeSettingsControllerManager]
  -[HMDSiriEndpointProfileMetricsDispatcher dataSourceProfileFields]


HMDCameraClipAddSignificantEventOperation : HMDCameraClipAddModelsOperation <HMBLocalZoneMirrorOutputObserver>
 @property  HMDCameraRecordingSessionSignificantEvent *significantEvent
 @property  NSDictionary *homePresenceByPairingIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipAddSignificantEventOperation logCategory]
  +[HMDCameraClipAddSignificantEventOperation cameraClipOperationType]

  // instance methods
  -[HMDCameraClipAddSignificantEventOperation attributeDescriptions]
  -[HMDCameraClipAddSignificantEventOperation .cxx_destruct]
  -[HMDCameraClipAddSignificantEventOperation significantEvent]
  -[HMDCameraClipAddSignificantEventOperation homePresenceByPairingIdentity]
  -[HMDCameraClipAddSignificantEventOperation modelsToAdd]
  -[HMDCameraClipAddSignificantEventOperation initWithClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:]
  -[HMDCameraClipAddSignificantEventOperation initWithClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:dataSource:]
  -[HMDCameraClipAddSignificantEventOperation updateMirrorOutputModel:]


HMDDataStreamStreamProtocol : NSObject <HMFLogging, HMDDataStreamProtocol>
 @property  NSMapTable *sockets
 @property  <HMDDataStreamProtocolDelegate> *dataStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL active

  // class methods
  +[HMDDataStreamStreamProtocol logCategory]
  +[HMDDataStreamStreamProtocol protocolName]

  // instance methods
  -[HMDDataStreamStreamProtocol isActive]
  -[HMDDataStreamStreamProtocol .cxx_destruct]
  -[HMDDataStreamStreamProtocol dataStreamDidOpen:]
  -[HMDDataStreamStreamProtocol dataStreamDidClose:]
  -[HMDDataStreamStreamProtocol dataStream:didFailWithError:]
  -[HMDDataStreamStreamProtocol dataStream]
  -[HMDDataStreamStreamProtocol dataStreamInitiatedClose:]
  -[HMDDataStreamStreamProtocol dataStream:didReceiveEvent:header:payload:]
  -[HMDDataStreamStreamProtocol dataStream:didReceiveRequest:header:payload:]
  -[HMDDataStreamStreamProtocol dataStream:didReceiveResponse:header:payload:]
  -[HMDDataStreamStreamProtocol initWithDataStream:]
  -[HMDDataStreamStreamProtocol registerSocket:]
  -[HMDDataStreamStreamProtocol unregisterSocket:]
  -[HMDDataStreamStreamProtocol evaluateOptionsForSocket:]
  -[HMDDataStreamStreamProtocol _reevaluateTrafficClassForDataStream]
  -[HMDDataStreamStreamProtocol _notifyActiveStatusChangedFromPreviousValue:]
  -[HMDDataStreamStreamProtocol sendData:socket:completion:]
  -[HMDDataStreamStreamProtocol _closeAllSocketsWithError:]
  -[HMDDataStreamStreamProtocol sockets]


HMDDuetPredictionSubscriber : HMFObject
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDDuetPredictionSubscriberDataSource> *dataSource
 @property  int duetPredictionsChangedNotificationToken

  // instance methods
  -[HMDDuetPredictionSubscriber _registerForNotifications]
  -[HMDDuetPredictionSubscriber dataSource]
  -[HMDDuetPredictionSubscriber _unregisterForNotifications]
  -[HMDDuetPredictionSubscriber workQueue]
  -[HMDDuetPredictionSubscriber dealloc]
  -[HMDDuetPredictionSubscriber .cxx_destruct]
  -[HMDDuetPredictionSubscriber setDataSource:]
  -[HMDDuetPredictionSubscriber messageDispatcher]
  -[HMDDuetPredictionSubscriber initWithWorkQueue:messageDispatcher:dataSource:]
  -[HMDDuetPredictionSubscriber duetPredictionsChangedNotificationToken]
  -[HMDDuetPredictionSubscriber setDuetPredictionsChangedNotificationToken:]


HMDUserDataModel : HMBModel
 @property  NSUUID *settingsRootUUID

  // class methods
  +[HMDUserDataModel hmbProperties]


HMDSharedUserDataModel : HMDUserDataModel
 @property  NSUUID *assistantAccessControlModelUUID
 @property  NSUUID *mediaContentProfileAccessControlModelUUID
 @property  NSUUID *userListeningHistoryUpdateControlModelUUID
 @property  NSUUID *supportsAutomaticHH2MigrationModelUUID

  // class methods
  +[HMDSharedUserDataModel hmbProperties]


HMDPrivateUserDataModel : HMDUserDataModel
  // class methods
  +[HMDPrivateUserDataModel hmbProperties]


HMDAppleMediaAccessoryDependencyFactory : NSObject <HMDAppleMediaAccessoryDependencyFactory>
  // instance methods
  -[HMDAppleMediaAccessoryDependencyFactory deviceWithAddress:]
  -[HMDAppleMediaAccessoryDependencyFactory deviceController]
  -[HMDAppleMediaAccessoryDependencyFactory deviceControllerWithDeviceIdentifier:]
  -[HMDAppleMediaAccessoryDependencyFactory deviceControllerWithDevice:]


HMDAppleMediaAccessory : HMDMediaAccessory <HMDAppleMediaAccessoryLocalMessageHandlerDataSource, HMDLanguageValueListSettingDataProvider, HMDAppleMediaAccessoryMessengerFactory, HMDAppleMediaAccessoryMessageRouterDataSource, HMDAppleMediaAccessoryMetricsDispatcherDataSource, HMDAppleMediaAccessorySleepWakeStateControllerDataSource, HMDDeviceControllerDelegate, HMDFetchedAccessorySettingsControllerDataSource, HMDAppleMediaAccessoryInfoControllerDataSource, HMDAppleMediaAccessoryInfoSubscriberDataSource, HMDAppleMediaAccessoryInfoSubscriberDelegate, HMDMediaDestinationControllerDataSource, HMDMediaDestinationControllerDelegate, HMDMediaDestinationControllerFactory, HMDMediaDestinationManagerDataSource, HMDMediaDestinationManagerDelegate, HMDMediaDestinationManagerFactory, HMDPreferredMediaUserEventControllerDataSource, HMDAccessorySettingsControllerDataSource, HMDAccessorySettingsControllerDelegate, HMDAccessoryUserManagement, HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDTargetControlManager *targetControlManager
 @property  BOOL fixedPairingIdentityInCloud
 @property  HMFPairingIdentity *lastCreatedPairingIdentity
 @property  NSArray *supportedMultiUserLanguageCodes
 @property  unsigned long supportedStereoPairVersions
 @property  <HMDAppleMediaAccessoryModelDataSource> *modelDataSource
 @property  @? deviceMediaRouteIdentifierFactory
 @property  HMDMediaDestinationController *audioDestinationController
 @property  HMDMediaDestinationManager *audioDestinationManager
 @property  HMFWiFiNetworkInfo *lastStagedWifiNetworkInfo
 @property  HMDAppleMediaAccessoryMetricsDispatcher *metricsDispatcher
 @property  HMDAppleMediaAccessorySleepWakeStateController *sleepWakeStateController
 @property  HMDPreferredMediaUserEventController *preferredMediaUserEventController
 @property  HMAccessoryCapabilities *capabilitiesInternal
 @property  NSData *rawCapabilities
 @property  <HMDAppleMediaAccessoryDependencyFactory> *dependencyFactory
 @property  HMDAppleMediaAccessoryMessenger *messenger
 @property  <HMDMediaDestinationControllerFactory> *mediaDestinationControllerFactory
 @property  <HMDMediaDestinationManagerFactory> *mediaDestinationManagerFactory
 @property  HMFWiFiManager *wifiManager
 @property  NSNotificationCenter *notificationCenter
 @property  HMDAccessorySettingsController *settingsController
 @property  long long productColor
 @property  <HMDAppleMediaAccessoryDataSource> *dataSource
 @property  HMDFetchedAccessorySettingsController *currentAccessorySettingsController
 @property  HMDAppleMediaAccessoryInfoController *currentAccessoryInfoController
 @property  HMDAppleMediaAccessoryInfoSubscriber *accessoryInfoSubscriber
 @property  @? settingsConnectionFactory
 @property  HMDDevice *device
 @property  HMDDevice *deviceForDirectMessaging
 @property  <HMDMessageRouter> *messageRouter
 @property  HMFPairingIdentity *pairingIdentity
 @property  HMDRemoteLoginHandler *remoteLoginHandler
 @property  HMDAccessorySymptomHandler *symptomsHandler
 @property  BOOL deviceReachable
 @property  HMFSoftwareVersion *softwareVersion
 @property  unsigned long homePodVariant
 @property  HMFWiFiNetworkInfo *wifiNetworkInfo
 @property  BOOL legacyLocationServicesEnabled
 @property  HMMediaDestination *audioDestination
 @property  HMMediaDestinationControllerData *audioDestinationControllerData
 @property  long long fallbackMediaUserType
 @property  <HMAccessoryCapabilities> *capabilities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMEEventForwarder> *eventForwarder
 @property  <HMELastEventStoreReadHandle> *eventStoreReadHandle
 @property  double setupStartTimestamp
 @property  HMFActivity *setupActivity
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  <HMESubscriptionProviding> *subscriptionProvider
 @property  HMDBackingStore *backingStore
 @property  HMDHome *home
 @property  BOOL supportsUserMediaSettings
 @property  HMDAccessorySetupMetricDispatcher *accessorySetupMetricDispatcher
 @property  BOOL supportsUserManagement

  // class methods
  +[HMDAppleMediaAccessory supportsSecureCoding]
  +[HMDAppleMediaAccessory logCategory]
  +[HMDAppleMediaAccessory hasMessageReceiverChildren]
  +[HMDAppleMediaAccessory shouldAcceptMessage:home:privilege:]

  // instance methods
  -[HMDAppleMediaAccessory dumpState]
  -[HMDAppleMediaAccessory accessoryUUID]
  -[HMDAppleMediaAccessory notificationCenter]
  -[HMDAppleMediaAccessory eventStoreReadHandle]
  -[HMDAppleMediaAccessory setWifiManager:]
  -[HMDAppleMediaAccessory supportsHomeHub]
  -[HMDAppleMediaAccessory setNotificationCenter:]
  -[HMDAppleMediaAccessory supportsAnnounce]
  -[HMDAppleMediaAccessory supportsHomeLevelLocationServiceSetting]
  -[HMDAppleMediaAccessory logIdentifier]
  -[HMDAppleMediaAccessory dataSource]
  -[HMDAppleMediaAccessory wifiManager]
  -[HMDAppleMediaAccessory productColor]
  -[HMDAppleMediaAccessory handleCurrentNetworkChangedNotification:]
  -[HMDAppleMediaAccessory supportsCoordinationDoorbellChime]
  -[HMDAppleMediaAccessory softwareVersion]
  -[HMDAppleMediaAccessory encodeWithCoder:]
  -[HMDAppleMediaAccessory dealloc]
  -[HMDAppleMediaAccessory .cxx_destruct]
  -[HMDAppleMediaAccessory messenger]
  -[HMDAppleMediaAccessory supportsUserMediaSettings]
  -[HMDAppleMediaAccessory capabilities]
  -[HMDAppleMediaAccessory supportsMultiUser]
  -[HMDAppleMediaAccessory homeUUID]
  -[HMDAppleMediaAccessory pairingIdentity]
  -[HMDAppleMediaAccessory supportsMusicAlarm]
  -[HMDAppleMediaAccessory device]
  -[HMDAppleMediaAccessory supportsThirdPartyMusic]
  -[HMDAppleMediaAccessory supportsPreferredMediaUser]
  -[HMDAppleMediaAccessory supportsMediaActions]
  -[HMDAppleMediaAccessory supportsCompanionInitiatedRestart]
  -[HMDAppleMediaAccessory supportsMessagedHomePodSettings]
  -[HMDAppleMediaAccessory setDataSource:]
  -[HMDAppleMediaAccessory backingStore]
  -[HMDAppleMediaAccessory supportsManagedConfigurationProfile]
  -[HMDAppleMediaAccessory supportsTargetControl]
  -[HMDAppleMediaAccessory init]
  -[HMDAppleMediaAccessory initWithCoder:]
  -[HMDAppleMediaAccessory supportsDoorbellChime]
  -[HMDAppleMediaAccessory dependencyFactory]
  -[HMDAppleMediaAccessory metricsDispatcher]
  -[HMDAppleMediaAccessory subscriptionProvider]
  -[HMDAppleMediaAccessory symptomsHandler]
  -[HMDAppleMediaAccessory audioDestination]
  -[HMDAppleMediaAccessory settingsController]
  -[HMDAppleMediaAccessory _registerForMessages]
  -[HMDAppleMediaAccessory removeUser:completionHandler:]
  -[HMDAppleMediaAccessory setMessenger:]
  -[HMDAppleMediaAccessory remoteLoginHandler]
  -[HMDAppleMediaAccessory reachableTransports]
  -[HMDAppleMediaAccessory wifiNetworkInfo]
  -[HMDAppleMediaAccessory audioDestinationController]
  -[HMDAppleMediaAccessory homePodVariant]
  -[HMDAppleMediaAccessory supportsSoftwareUpdateV2]
  -[HMDAppleMediaAccessory isCurrentAccessory]
  -[HMDAppleMediaAccessory setWifiNetworkInfo:]
  -[HMDAppleMediaAccessory setSupportedStereoPairVersions:]
  -[HMDAppleMediaAccessory supportedStereoPairVersions]
  -[HMDAppleMediaAccessory setProductColor:]
  -[HMDAppleMediaAccessory setSoftwareVersion:]
  -[HMDAppleMediaAccessory setAudioDestinationController:]
  -[HMDAppleMediaAccessory setPairingIdentity:]
  -[HMDAppleMediaAccessory setSettingsController:]
  -[HMDAppleMediaAccessory addAdvertisement:]
  -[HMDAppleMediaAccessory deleteSiriHistoryForAccessoryWithUUID:completionHandler:]
  -[HMDAppleMediaAccessory messageReceiverChildren]
  -[HMDAppleMediaAccessory transactionObjectUpdated:newValues:message:]
  -[HMDAppleMediaAccessory transactionObjectRemoved:message:]
  -[HMDAppleMediaAccessory modelObjectWithChangeType:]
  -[HMDAppleMediaAccessory backingStoreObjects:]
  -[HMDAppleMediaAccessory logEventSubmitter]
  -[HMDAppleMediaAccessory isCurrentDevicePrimaryResident]
  -[HMDAppleMediaAccessory handleHomeUserRemovedNotification:]
  -[HMDAppleMediaAccessory deviceForAppleMediaAccessoryMessageRouter:message:]
  -[HMDAppleMediaAccessory eventForwarder]
  -[HMDAppleMediaAccessory addUser:completionHandler:]
  -[HMDAppleMediaAccessory pairingsWithCompletionHandler:]
  -[HMDAppleMediaAccessory supportsUserManagement]
  -[HMDAppleMediaAccessory isRemotelyReachable]
  -[HMDAppleMediaAccessory messageRouter]
  -[HMDAppleMediaAccessory languageValueList]
  -[HMDAppleMediaAccessory initWithTransaction:home:]
  -[HMDAppleMediaAccessory runTransactionWithPreferredMediaUserUUID:selectionType:completion:]
  -[HMDAppleMediaAccessory transactionWithObjectChangeType:]
  -[HMDAppleMediaAccessory populateModelObject:version:]
  -[HMDAppleMediaAccessory configureWithHome:msgDispatcher:configurationTracker:initialConfiguration:]
  -[HMDAppleMediaAccessory _handleUpdatedName:]
  -[HMDAppleMediaAccessory removeAdvertisement:]
  -[HMDAppleMediaAccessory requiresHomeAppForManagement]
  -[HMDAppleMediaAccessory supportsMediaContentProfile]
  -[HMDAppleMediaAccessory supportsPersonalRequests]
  -[HMDAppleMediaAccessory setRemotelyReachable:]
  -[HMDAppleMediaAccessory messageSendPolicy]
  -[HMDAppleMediaAccessory runtimeState]
  -[HMDAppleMediaAccessory dumpSimpleState]
  -[HMDAppleMediaAccessory autoConfigureTargetControllers]
  -[HMDAppleMediaAccessory _shouldFilterAccessoryProfile:]
  -[HMDAppleMediaAccessory supportsSoftwareUpdate]
  -[HMDAppleMediaAccessory _applySoftwareUpdateModel:completion:]
  -[HMDAppleMediaAccessory _allowSoftwareUpdateChangeFromSource:]
  -[HMDAppleMediaAccessory notifyClientsOfUpdatedAccessoryControllableValue:]
  -[HMDAppleMediaAccessory handleDeviceIsReachable:]
  -[HMDAppleMediaAccessory handleDeviceIsNotReachable:]
  -[HMDAppleMediaAccessory deviceMonitor]
  -[HMDAppleMediaAccessory handleRoomChanged:]
  -[HMDAppleMediaAccessory handleRoomNameChanged:]
  -[HMDAppleMediaAccessory handleUpdatePreferredMediaUser:]
  -[HMDAppleMediaAccessory accessoryWithUUID:forAppleMediaAccessoryLocalMessageHandler:]
  -[HMDAppleMediaAccessory _createMediaProfile]
  -[HMDAppleMediaAccessory currentAccessorySettingsController]
  -[HMDAppleMediaAccessory handleFetchManagedConfigurationProfiles:]
  -[HMDAppleMediaAccessory handleRemoveManagedConfigurationProfile:]
  -[HMDAppleMediaAccessory _fetchAvailableUpdate:]
  -[HMDAppleMediaAccessory _startUpdate:]
  -[HMDAppleMediaAccessory handleDeleteSiriHistoryRequest:]
  -[HMDAppleMediaAccessory handleSoftwareUpdateV2Scan:]
  -[HMDAppleMediaAccessory _handleTriggerPairingIdentityUpdateNotification:]
  -[HMDAppleMediaAccessory handleCurrentDeviceUpdated:]
  -[HMDAppleMediaAccessory handleCurrentDeviceIRKUpdated:]
  -[HMDAppleMediaAccessory handleDeviceIsPublishingChangedNotification:]
  -[HMDAppleMediaAccessory currentRoomForAppleMediaAccessoryMetricsDispatcher:]
  -[HMDAppleMediaAccessory deviceForAppleMediaAccessorySleepWakeStateController:]
  -[HMDAppleMediaAccessory currentDeviceProductInfoForAppleMediaAccessorySleepWakeStateController:]
  -[HMDAppleMediaAccessory appleMediaProfileForAccessoryUUID:]
  -[HMDAppleMediaAccessory deviceController:didUpdateDevice:]
  -[HMDAppleMediaAccessory controller:topicForKeyPath:]
  -[HMDAppleMediaAccessory eventSourceIdentifierNameForFetchedSettingsController:]
  -[HMDAppleMediaAccessory setupStartTimestamp]
  -[HMDAppleMediaAccessory setSetupStartTimestamp:]
  -[HMDAppleMediaAccessory setupActivity]
  -[HMDAppleMediaAccessory accessoryInfoControllerSoftwareVersionTopicForController:]
  -[HMDAppleMediaAccessory accessoryInfoControllerTopicForWifiInfo]
  -[HMDAppleMediaAccessory eventSourceIdentifierNameForAccessoryInfoController:]
  -[HMDAppleMediaAccessory currentAccessorySoftwareVersion]
  -[HMDAppleMediaAccessory infoSubscriber:didReceiveWiFiInfoUpdate:]
  -[HMDAppleMediaAccessory mediaDestinationControllerMetricsEventDispatcher:destinationTypeForDestinationWithIdentifier:]
  -[HMDAppleMediaAccessory currentDestinationTypeForMediaDestinationControllerMetricsEventDispatcher:]
  -[HMDAppleMediaAccessory isTriggeredOnControllerDeviceForMediaDestinationControllerMetricsEventDispatcher:]
  -[HMDAppleMediaAccessory currentUserForMediaDestinationControllerMetricsEventDispatcher:]
  -[HMDAppleMediaAccessory targetAccessoryForMediaDestinationController:]
  -[HMDAppleMediaAccessory mediaDestinationController:destinationManagerWithIdentifier:]
  -[HMDAppleMediaAccessory mediaDestinationController:destinationWithParentIdentifier:]
  -[HMDAppleMediaAccessory mediaDestinationController:rootDestinationWithDecendantIdentifier:]
  -[HMDAppleMediaAccessory availableDestinationIdentifiersForMediaDestinationController:]
  -[HMDAppleMediaAccessory mediaGroupLocalDataStorageForMediaDestinationController:]
  -[HMDAppleMediaAccessory mediaDestinationControllerDidUpdateStagedValues:]
  -[HMDAppleMediaAccessory mediaDestinationControllerWithData:backingStore:messageDispatcher:notificationCenter:logEventSubmitter:dailyScheduler:targetDevice:dataSource:delegate:]
  -[HMDAppleMediaAccessory targetAccessoryForMediaDestinationManager:]
  -[HMDAppleMediaAccessory mediaDestinationManager:destinationControllerWithIdentifier:]
  -[HMDAppleMediaAccessory rootDestinationManagerForMediaDestinationManager:]
  -[HMDAppleMediaAccessory mediaGroupParticipantLocalDataStorageForMediaDestinationManager:]
  -[HMDAppleMediaAccessory mediaDestinationManagerDidUpdateStagedValues:]
  -[HMDAppleMediaAccessory mediaDestinationManagerWithDestination:messageDispatcher:notificationCenter:backingStore:targetDevice:dataSource:delegate:]
  -[HMDAppleMediaAccessory updatePreferredMediaUser:selectionType:]
  -[HMDAppleMediaAccessory modelsToMakeSettingsForController:parentUUID:]
  -[HMDAppleMediaAccessory modelsToMigrateSettingsForController:]
  -[HMDAppleMediaAccessory removeManagedConfigurationProfileWithProfileData:completion:]
  -[HMDAppleMediaAccessory setSetupActivity:]
  -[HMDAppleMediaAccessory accessorySetupMetricDispatcher]
  -[HMDAppleMediaAccessory accessorySettingsController:saveWithReason:]
  -[HMDAppleMediaAccessory accessorySettingsController:saveWithReason:model:]
  -[HMDAppleMediaAccessory remoteMessageDestinationForAccessorySettingsController:target:]
  -[HMDAppleMediaAccessory supportedMultiUserLanguageCodesForAccessorySettingsController:]
  -[HMDAppleMediaAccessory isMultiUserEnabledForAccessorySettingsController:]
  -[HMDAppleMediaAccessory assistantAccessControlModelWithRemovedAccessoriesForAccessorySettingsController:]
  -[HMDAppleMediaAccessory languagesChangedForAccessorySettingsController:]
  -[HMDAppleMediaAccessory initWithTransaction:home:dependencyFactory:]
  -[HMDAppleMediaAccessory initWithDeviceController:deviceIdentifierFactory:]
  -[HMDAppleMediaAccessory _configureGroupParticipantLocalDataStorageWithHome:]
  -[HMDAppleMediaAccessory updateProductInformation]
  -[HMDAppleMediaAccessory configureAccessoryInfoSubscriberIfNeeded]
  -[HMDAppleMediaAccessory audioDestinationControllerData]
  -[HMDAppleMediaAccessory roarAudioDestinationControllerData]
  -[HMDAppleMediaAccessory legacyAudioDestinationControllerData]
  -[HMDAppleMediaAccessory committedAudioDestinationControllerData]
  -[HMDAppleMediaAccessory roarCommittedAudioDestinationControllerData]
  -[HMDAppleMediaAccessory legacyCommittedAudioDestinationControllerData]
  -[HMDAppleMediaAccessory unsetAudioDestinationControllerData]
  -[HMDAppleMediaAccessory mergeAudioDestinationControllerData:]
  -[HMDAppleMediaAccessory configureAudioDestinationController]
  -[HMDAppleMediaAccessory createAudioDestinationController]
  -[HMDAppleMediaAccessory _createAudioDestinationControllerWithControllerIdentifier:]
  -[HMDAppleMediaAccessory legacyCreateAudioDestinationControllerWithControllerIdentifier:]
  -[HMDAppleMediaAccessory committedAudioDestination]
  -[HMDAppleMediaAccessory roarCommittedAudioDestination]
  -[HMDAppleMediaAccessory legacyCommittedAudioDestination]
  -[HMDAppleMediaAccessory roarAudioDestination]
  -[HMDAppleMediaAccessory legacyAudioDestination]
  -[HMDAppleMediaAccessory unsetAudioDestination]
  -[HMDAppleMediaAccessory mergeAudioDestination:]
  -[HMDAppleMediaAccessory configureAudioDestinationManager]
  -[HMDAppleMediaAccessory migrateLocalParticipantData]
  -[HMDAppleMediaAccessory expectedDestinationSupportOptions]
  -[HMDAppleMediaAccessory createAudioDestination]
  -[HMDAppleMediaAccessory _createAudioDestinationWithIdentifier:supportedOptions:]
  -[HMDAppleMediaAccessory defaultAudioGroupIdentifier]
  -[HMDAppleMediaAccessory legacyCreateAudioDestinationWithIdentifier:supportedOptions:]
  -[HMDAppleMediaAccessory mediaGroupParticipantDataLocalStorage]
  -[HMDAppleMediaAccessory removeAudioDestination]
  -[HMDAppleMediaAccessory _fetchMultiUserLanguages]
  -[HMDAppleMediaAccessory _fixCloudKeyIfNeeded]
  -[HMDAppleMediaAccessory legacyLocationServicesEnabled]
  -[HMDAppleMediaAccessory isB520Accessory]
  -[HMDAppleMediaAccessory deviceForDirectMessaging]
  -[HMDAppleMediaAccessory setDeviceController:]
  -[HMDAppleMediaAccessory updateWithDevice:]
  -[HMDAppleMediaAccessory shouldUpdateWithDevice:initialConfiguration:]
  -[HMDAppleMediaAccessory _removeManagedConfigurationProfileWithIdentifier:completion:]
  -[HMDAppleMediaAccessory registerForPublishingNotifications]
  -[HMDAppleMediaAccessory updateRechabilityFromDevicePublishingState]
  -[HMDAppleMediaAccessory isDeviceReachable]
  -[HMDAppleMediaAccessory setDeviceReachable:]
  -[HMDAppleMediaAccessory startMonitoringReachability]
  -[HMDAppleMediaAccessory notifyFrameworkOfUpdatedPairingIdentity]
  -[HMDAppleMediaAccessory createPairingIdentity]
  -[HMDAppleMediaAccessory supportsSettings]
  -[HMDAppleMediaAccessory postDeviceIRKIfDifferent:]
  -[HMDAppleMediaAccessory _updateSoftwareVersion:]
  -[HMDAppleMediaAccessory updatePreferredMediaUserWithUUID:selectionType:completion:]
  -[HMDAppleMediaAccessory createSoftwareUpdateEventProviderIfNecessary]
  -[HMDAppleMediaAccessory createSoftwareUpdateEventListenerIfNecessary]
  -[HMDAppleMediaAccessory setLastStagedWifiNetworkInfo:]
  -[HMDAppleMediaAccessory lastStagedWifiNetworkInfo]
  -[HMDAppleMediaAccessory updateWiFiNetworkInfo]
  -[HMDAppleMediaAccessory _relayRequestMessage:responseHandler:]
  -[HMDAppleMediaAccessory remoteMessageDestination]
  -[HMDAppleMediaAccessory migrateWithCloudZone:migrationQueue:completion:]
  -[HMDAppleMediaAccessory migrateAudioDestinationControllerWithCloudZone:migrationQueue:completion:]
  -[HMDAppleMediaAccessory migrateAudioDestinationWithCloudZone:migrationQueue:completion:]
  -[HMDAppleMediaAccessory backingStoreObjectForMediaDestination]
  -[HMDAppleMediaAccessory backingStoreObjectForMediaDestinationControllerData]
  -[HMDAppleMediaAccessory handleTransactionUpdatedPublicPairingIdentity:result:]
  -[HMDAppleMediaAccessory handleUpdatedMediaDestinationControllerModel:message:]
  -[HMDAppleMediaAccessory handleUpdatedMediaDestinationModel:message:]
  -[HMDAppleMediaAccessory handleRemovedMediaDestinationModel:message:]
  -[HMDAppleMediaAccessory handleRemovedMediaDestinationControllerModel:message:]
  -[HMDAppleMediaAccessory _encodeMediaDestinationAndControllerDataWithCoder:]
  -[HMDAppleMediaAccessory _legacyEncodeMediaDestinationAndControllerDataWithCoder:]
  -[HMDAppleMediaAccessory dumpStateLocalSettings]
  -[HMDAppleMediaAccessory _dumpStateCachedSettingsForHome:accessory:eventStoreReadHandle:]
  -[HMDAppleMediaAccessory targetControlManager]
  -[HMDAppleMediaAccessory setTargetControlManager:]
  -[HMDAppleMediaAccessory supportedMultiUserLanguageCodes]
  -[HMDAppleMediaAccessory setSupportedMultiUserLanguageCodes:]
  -[HMDAppleMediaAccessory audioDestinationManager]
  -[HMDAppleMediaAccessory setAudioDestinationManager:]
  -[HMDAppleMediaAccessory fallbackMediaUserType]
  -[HMDAppleMediaAccessory fixedPairingIdentityInCloud]
  -[HMDAppleMediaAccessory setFixedPairingIdentityInCloud:]
  -[HMDAppleMediaAccessory lastCreatedPairingIdentity]
  -[HMDAppleMediaAccessory setLastCreatedPairingIdentity:]
  -[HMDAppleMediaAccessory modelDataSource]
  -[HMDAppleMediaAccessory deviceMediaRouteIdentifierFactory]
  -[HMDAppleMediaAccessory setMetricsDispatcher:]
  -[HMDAppleMediaAccessory sleepWakeStateController]
  -[HMDAppleMediaAccessory setSleepWakeStateController:]
  -[HMDAppleMediaAccessory preferredMediaUserEventController]
  -[HMDAppleMediaAccessory setPreferredMediaUserEventController:]
  -[HMDAppleMediaAccessory capabilitiesInternal]
  -[HMDAppleMediaAccessory setCapabilitiesInternal:]
  -[HMDAppleMediaAccessory rawCapabilities]
  -[HMDAppleMediaAccessory setRawCapabilities:]
  -[HMDAppleMediaAccessory setDependencyFactory:]
  -[HMDAppleMediaAccessory mediaDestinationControllerFactory]
  -[HMDAppleMediaAccessory setMediaDestinationControllerFactory:]
  -[HMDAppleMediaAccessory mediaDestinationManagerFactory]
  -[HMDAppleMediaAccessory setMediaDestinationManagerFactory:]
  -[HMDAppleMediaAccessory setCurrentAccessorySettingsController:]
  -[HMDAppleMediaAccessory currentAccessoryInfoController]
  -[HMDAppleMediaAccessory setCurrentAccessoryInfoController:]
  -[HMDAppleMediaAccessory accessoryInfoSubscriber]
  -[HMDAppleMediaAccessory setAccessoryInfoSubscriber:]
  -[HMDAppleMediaAccessory settingsConnectionFactory]
  -[HMDAppleMediaAccessory setSettingsConnectionFactory:]
  -[HMDAppleMediaAccessory assistantObject]
  -[HMDAppleMediaAccessory configureAppleMediaAccessoryMessengerWithFactory:]
  -[HMDAppleMediaAccessory createAppleMediaAccessoryMessengerWithIdentifier:messageDispatcher:router:localHandler:]


HMDAppleHomePodAccessory : HMDAppleMediaAccessory
  // instance methods
  -[HMDAppleHomePodAccessory isB520Accessory]


HMDAppleMediaAccessoryModelDataSource : HMFObject <HMDAppleMediaAccessoryModelDataSource>
  // class methods
  +[HMDAppleMediaAccessoryModelDataSource shortDescription]

  // instance methods
  -[HMDAppleMediaAccessoryModelDataSource modelforAccessory:changeType:uuid:parentUUID:]


HMDAppleMediaAccessoryModel : HMDMediaAccessoryModel
 @property  NSString *deviceUUID
 @property  HMDDevice *device
 @property  HMFPairingIdentity *pairingIdentity
 @property  NSData *loggedInAccount
 @property  HMFSoftwareVersion *softwareVersion
 @property  HMFWiFiNetworkInfo *wifiNetworkInfo
 @property  NSString *appleMediaAccessoryChangeTag
 @property  NSNumber *supportedStereoPairVersions
 @property  NSNumber *productColor

  // class methods
  +[HMDAppleMediaAccessoryModel properties]
  +[HMDAppleMediaAccessoryModel appleMediaAccessoryModelWithChangeType:uuid:parentUUID:]
  +[HMDAppleMediaAccessoryModel homePodAccessoryModelWithChangeType:uuid:parentUUID:]

  // instance methods
  -[HMDAppleMediaAccessoryModel _initWithObjectChangeType:uuid:parentUUID:]


HMDAppleHomePodAccessoryModel : HMDAppleMediaAccessoryModel
  // instance methods
  -[HMDAppleHomePodAccessoryModel _initWithObjectChangeType:uuid:parentUUID:]


HMDMediaSessionRequestMessageInformation : HMFObject <HMFLogging>
 @property  HMFMessage *message
 @property  NSUUID *messageIdentifier
 @property  HMDDevice *remoteSourceDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaSessionRequestMessageInformation logCategory]

  // instance methods
  -[HMDMediaSessionRequestMessageInformation attributeDescriptions]
  -[HMDMediaSessionRequestMessageInformation .cxx_destruct]
  -[HMDMediaSessionRequestMessageInformation initWithMessage:]
  -[HMDMediaSessionRequestMessageInformation messageIdentifier]
  -[HMDMediaSessionRequestMessageInformation message]
  -[HMDMediaSessionRequestMessageInformation remoteSourceDevice]


HMDHomeObjectLookup : HMDObjectLookup
 @property  HMDHome *home

  // class methods
  +[HMDHomeObjectLookup logCategory]

  // instance methods
  -[HMDHomeObjectLookup home]
  -[HMDHomeObjectLookup logIdentifier]
  -[HMDHomeObjectLookup .cxx_destruct]
  -[HMDHomeObjectLookup setHome:]
  -[HMDHomeObjectLookup initWithHome:]
  -[HMDHomeObjectLookup scanObjects]
  -[HMDHomeObjectLookup _scanAccessoriesAndServices]
  -[HMDHomeObjectLookup _scanSettings:]
  -[HMDHomeObjectLookup _scanRooms]
  -[HMDHomeObjectLookup _scanZones]
  -[HMDHomeObjectLookup _scanActionSets]
  -[HMDHomeObjectLookup _scanServiceGroups]
  -[HMDHomeObjectLookup _scanTriggers]
  -[HMDHomeObjectLookup _scanResidentDevices]
  -[HMDHomeObjectLookup _scanMediaSystems]
  -[HMDHomeObjectLookup _scanUsers]


HMDAccessoryAllowedHost : HMFObject <NSSecureCoding>
 @property  HMDNetworkRouterFirewallRuleWAN *wanRule
 @property  NSString *name
 @property  NSSet *addresses
 @property  unsigned long purpose
 @property  NSString *jsonWANRule

  // class methods
  +[HMDAccessoryAllowedHost supportsSecureCoding]
  +[HMDAccessoryAllowedHost allowedHostForFullWANAccess]
  +[HMDAccessoryAllowedHost allowedHostsFromJSONFirewallWANRules:]
  +[HMDAccessoryAllowedHost allowedHostsFromFirewallRuleConfiguration:]

  // instance methods
  -[HMDAccessoryAllowedHost encodeWithCoder:]
  -[HMDAccessoryAllowedHost purpose]
  -[HMDAccessoryAllowedHost attributeDescriptions]
  -[HMDAccessoryAllowedHost .cxx_destruct]
  -[HMDAccessoryAllowedHost name]
  -[HMDAccessoryAllowedHost isEqual:]
  -[HMDAccessoryAllowedHost initWithCoder:]
  -[HMDAccessoryAllowedHost addresses]
  -[HMDAccessoryAllowedHost initWithJSONFirewallWANRule:]
  -[HMDAccessoryAllowedHost initWithWANRule:]
  -[HMDAccessoryAllowedHost wanRule]
  -[HMDAccessoryAllowedHost _encodeForSPIEntitledXPCTransportWithCoder:]
  -[HMDAccessoryAllowedHost jsonWANRule]


HMDCameraRemoteStreamSession : HMDCameraStreamSession <HMFLogging>
 @property  <HMDCameraRemoteStreamSenderProtocol> *streamSender
 @property  <HMDCameraRemoteStreamReceiverProtocol> *streamReceiver
 @property  unsigned long streamState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRemoteStreamSession logCategory]

  // instance methods
  -[HMDCameraRemoteStreamSession updateState:]
  -[HMDCameraRemoteStreamSession logIdentifier]
  -[HMDCameraRemoteStreamSession dealloc]
  -[HMDCameraRemoteStreamSession .cxx_destruct]
  -[HMDCameraRemoteStreamSession streamState]
  -[HMDCameraRemoteStreamSession setStreamState:]
  -[HMDCameraRemoteStreamSession stateAsString]
  -[HMDCameraRemoteStreamSession streamSender]
  -[HMDCameraRemoteStreamSession initWithSessionID:reachabilityPath:streamSender:streamReceiver:remoteCapabilities:streamPreference:]
  -[HMDCameraRemoteStreamSession containsState:]
  -[HMDCameraRemoteStreamSession streamReceiver]


HMDHouseholdMetricsManager : HMFObject <HMFMessageReceiver, HMDLogEventDailyTaskRunner>
 @property  HMDHouseholdMetricsClient *client
 @property  HMDHouseholdMetricsServer *server
 @property  HMDHouseholdMetricsMessagingProvider *messagingProvider
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHouseholdMetricsManager logCategory]

  // instance methods
  -[HMDHouseholdMetricsManager workQueue]
  -[HMDHouseholdMetricsManager .cxx_destruct]
  -[HMDHouseholdMetricsManager messageTargetUUID]
  -[HMDHouseholdMetricsManager messagingProvider]
  -[HMDHouseholdMetricsManager client]
  -[HMDHouseholdMetricsManager server]
  -[HMDHouseholdMetricsManager runDailyTask]
  -[HMDHouseholdMetricsManager initWithCountersManager:dataSource:dailyScheduler:logEventSubmitter:dateProvider:activityContributors:]
  -[HMDHouseholdMetricsManager initWithCountersManager:dataSource:dailyScheduler:logEventSubmitter:dateProvider:requestCountProvider:logEventFactories:]


HMIdentifierSaltStore : NSObject
 @property  NSData *identifierSalt
 @property  NSData *assistantIdentifierSalt

  // instance methods
  -[HMIdentifierSaltStore .cxx_destruct]
  -[HMIdentifierSaltStore identifierSalt]
  -[HMIdentifierSaltStore setIdentifierSalt:]
  -[HMIdentifierSaltStore assistantIdentifierSalt]
  -[HMIdentifierSaltStore setAssistantIdentifierSalt:]


HMDMediaGroupsMessageHandler : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  <HMDMediaGroupsMessageHandlerDataSource> *dataSource
 @property  <HMDMediaGroupsMessageHandlerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMediaGroupsMessageHandler logCategory]

  // instance methods
  -[HMDMediaGroupsMessageHandler logIdentifier]
  -[HMDMediaGroupsMessageHandler dataSource]
  -[HMDMediaGroupsMessageHandler setDelegate:]
  -[HMDMediaGroupsMessageHandler delegate]
  -[HMDMediaGroupsMessageHandler .cxx_destruct]
  -[HMDMediaGroupsMessageHandler messageTargetUUID]
  -[HMDMediaGroupsMessageHandler setDataSource:]
  -[HMDMediaGroupsMessageHandler router]
  -[HMDMediaGroupsMessageHandler routeMessage:localHandler:]
  -[HMDMediaGroupsMessageHandler configureWithHome:messageDispatcher:]
  -[HMDMediaGroupsMessageHandler routeMediaGroupsControllerCreateGroupRequestMessage:]
  -[HMDMediaGroupsMessageHandler routeMediaGroupsControllerUpdateGroupRequestMessage:]
  -[HMDMediaGroupsMessageHandler routeMediaGroupsControllerRemoveGroupRequestMessage:]
  -[HMDMediaGroupsMessageHandler initWithMessageTargetUUID:]
  -[HMDMediaGroupsMessageHandler registerForMessagesWithHome:messageDispatcher:]
  -[HMDMediaGroupsMessageHandler destinationIdentifiersInMessage:error:]
  -[HMDMediaGroupsMessageHandler identifierInMessage:]
  -[HMDMediaGroupsMessageHandler nameInMessage:error:]
  -[HMDMediaGroupsMessageHandler handleMediaGroupsControllerCreateGroupRequestMessage:]
  -[HMDMediaGroupsMessageHandler handleMediaGroupsControllerUpdateGroupRequestMessage:]
  -[HMDMediaGroupsMessageHandler handleMediaGroupsControllerRemoveGroupRequestMessage:]


HMDNetworkRouterHomeKitOnlyFirewallConfiguration : HMDNetworkRouterFirewallRuleConfiguration
  // class methods
  +[HMDNetworkRouterHomeKitOnlyFirewallConfiguration fallbackIdentifier]
  +[HMDNetworkRouterHomeKitOnlyFirewallConfiguration fallbackConfigurationForRuleset:]

  // instance methods
  -[HMDNetworkRouterHomeKitOnlyFirewallConfiguration initWithAccessory:sourceConfiguration:]


HMDPhotoLibraryPersonImporter : HMFObject <HMDPhotoLibraryChangeDelegate, HMFTimerDelegate, HMFLogging, HMDPersonDataInterface>
 @property  NSUUID *UUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDPhotoLibrary *photoLibrary
 @property  <HMDPersonDataSource> *dataSource
 @property  HMFTimer *frequentUpdateTimer
 @property  HMFTimer *infrequentUpdateTimer
 @property  HMDCloudPhotosSettingObserver *cloudPhotosSettingObserver
 @property  @? frequentUpdateTimerFactory
 @property  @? infrequentUpdateTimerFactory
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMIHomePersonManager *homePersonManager
 @property  HMIExternalPersonManager *photosPersonManager

  // class methods
  +[HMDPhotoLibraryPersonImporter logCategory]

  // instance methods
  -[HMDPhotoLibraryPersonImporter _configure]
  -[HMDPhotoLibraryPersonImporter timerDidFire:]
  -[HMDPhotoLibraryPersonImporter _registerForNotifications]
  -[HMDPhotoLibraryPersonImporter photoLibrary]
  -[HMDPhotoLibraryPersonImporter logIdentifier]
  -[HMDPhotoLibraryPersonImporter dataSource]
  -[HMDPhotoLibraryPersonImporter workQueue]
  -[HMDPhotoLibraryPersonImporter .cxx_destruct]
  -[HMDPhotoLibraryPersonImporter UUID]
  -[HMDPhotoLibraryPersonImporter initWithUUID:]
  -[HMDPhotoLibraryPersonImporter setDataSource:]
  -[HMDPhotoLibraryPersonImporter _unconfigure]
  -[HMDPhotoLibraryPersonImporter logEventSubmitter]
  -[HMDPhotoLibraryPersonImporter configureWithDataSource:home:]
  -[HMDPhotoLibraryPersonImporter cloudPhotosSettingObserver]
  -[HMDPhotoLibraryPersonImporter setLogEventSubmitter:]
  -[HMDPhotoLibraryPersonImporter handleCloudPhotosEnabledDidChangeNotification:]
  -[HMDPhotoLibraryPersonImporter photoLibraryPersonsDidChange]
  -[HMDPhotoLibraryPersonImporter initWithUUID:photoLibrary:workQueue:cloudPhotosSettingObserver:]
  -[HMDPhotoLibraryPersonImporter _updatePersonsAndFaceCrops:]
  -[HMDPhotoLibraryPersonImporter _updatePersonsUsingBatchChange:]
  -[HMDPhotoLibraryPersonImporter _updateFaceCropsForAllPersonsUsingBatchChange:]
  -[HMDPhotoLibraryPersonImporter _updateFaceCropsForPersonsWithUpdatedPhotosFaceCropsUsingBatchChange:]
  -[HMDPhotoLibraryPersonImporter _updateFaceCropsForPersons:usingBatchChange:]
  -[HMDPhotoLibraryPersonImporter _updateFaceCropsWithCurrentPhotoLibraryFaceCrops:forPersonWithUUID:usingBatchChange:]
  -[HMDPhotoLibraryPersonImporter _setUpAndStartUpdateTimers]
  -[HMDPhotoLibraryPersonImporter _submitLogEventsForUpdatedPersonsWithCurrentPersons:previousPersons:]
  -[HMDPhotoLibraryPersonImporter _submitLogEventForFaceCrops:]
  -[HMDPhotoLibraryPersonImporter _handleUpdatedCloudPhotosSetting]
  -[HMDPhotoLibraryPersonImporter frequentUpdateTimer]
  -[HMDPhotoLibraryPersonImporter setFrequentUpdateTimer:]
  -[HMDPhotoLibraryPersonImporter infrequentUpdateTimer]
  -[HMDPhotoLibraryPersonImporter setInfrequentUpdateTimer:]
  -[HMDPhotoLibraryPersonImporter frequentUpdateTimerFactory]
  -[HMDPhotoLibraryPersonImporter setFrequentUpdateTimerFactory:]
  -[HMDPhotoLibraryPersonImporter infrequentUpdateTimerFactory]
  -[HMDPhotoLibraryPersonImporter setInfrequentUpdateTimerFactory:]


HMDSiriEndpointHAPSettings : HMFObject
 @property  NSNumber *siriEnable
 @property  NSNumber *siriListening
 @property  NSNumber *siriTouchToUse
 @property  NSNumber *siriLightOnUse
 @property  NSString *siriEndpointVersion
 @property  NSString *siriEngineVersion
 @property  NSNumber *activeIdentifier
 @property  NSNumber *manuallyDisabled
 @property  NSNumber *multifunctionButton
 @property  BOOL assistantsUpdated

  // instance methods
  -[HMDSiriEndpointHAPSettings .cxx_destruct]
  -[HMDSiriEndpointHAPSettings siriEndpointVersion]
  -[HMDSiriEndpointHAPSettings setSiriEndpointVersion:]
  -[HMDSiriEndpointHAPSettings siriEngineVersion]
  -[HMDSiriEndpointHAPSettings setSiriEngineVersion:]
  -[HMDSiriEndpointHAPSettings activeIdentifier]
  -[HMDSiriEndpointHAPSettings setActiveIdentifier:]
  -[HMDSiriEndpointHAPSettings manuallyDisabled]
  -[HMDSiriEndpointHAPSettings setManuallyDisabled:]
  -[HMDSiriEndpointHAPSettings multifunctionButton]
  -[HMDSiriEndpointHAPSettings setMultifunctionButton:]
  -[HMDSiriEndpointHAPSettings siriEnable]
  -[HMDSiriEndpointHAPSettings setSiriEnable:]
  -[HMDSiriEndpointHAPSettings siriListening]
  -[HMDSiriEndpointHAPSettings setSiriListening:]
  -[HMDSiriEndpointHAPSettings siriTouchToUse]
  -[HMDSiriEndpointHAPSettings setSiriTouchToUse:]
  -[HMDSiriEndpointHAPSettings siriLightOnUse]
  -[HMDSiriEndpointHAPSettings setSiriLightOnUse:]
  -[HMDSiriEndpointHAPSettings assistantsUpdated]
  -[HMDSiriEndpointHAPSettings setAssistantsUpdated:]


HMDSiriEndpointProfile : HMDAccessoryProfile <HMFStagedValueDelegate, HMFLogging>
 @property  NSNotificationCenter *notificationCenter
 @property  unsigned long notifications
 @property  long long sessionState
 @property  NSUUID *sessionHubIdentifer
 @property  NSString *siriEndpointVersion
 @property  NSArray *profileServices
 @property  long long siriEnable
 @property  long long siriListening
 @property  long long siriTouchToUse
 @property  long long siriLightOnUse
 @property  NSString *siriEngineVersion
 @property  HMFStagedValue *stagedNeedsOnboarding
 @property  NSNumber *needsOnboarding
 @property  NSString *clientEndpointIdentifier
 @property  NSString *clientSettingsIdentifier
 @property  NSNumber *activeIdentifier
 @property  BOOL manuallyDisabled
 @property  long long multifunctionButton
 @property  NSArray *assistants
 @property  unsigned long _capability
 @property  NSArray *_allEndpointCharacteristicsToMonitor
 @property  NSArray *_allSettingsCharacteristicsToMonitor
 @property  long long siriSoundOnUse
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointProfile supportsSecureCoding]
  +[HMDSiriEndpointProfile namespace]
  +[HMDSiriEndpointProfile initialize]
  +[HMDSiriEndpointProfile logCategory]
  +[HMDSiriEndpointProfile uniqueIdentifierFromAccessory:]

  // instance methods
  -[HMDSiriEndpointProfile notificationCenter]
  -[HMDSiriEndpointProfile addService:]
  -[HMDSiriEndpointProfile unregisterForNotifications]
  -[HMDSiriEndpointProfile encodeWithCoder:]
  -[HMDSiriEndpointProfile services]
  -[HMDSiriEndpointProfile attributeDescriptions]
  -[HMDSiriEndpointProfile .cxx_destruct]
  -[HMDSiriEndpointProfile setSessionState:]
  -[HMDSiriEndpointProfile notifications]
  -[HMDSiriEndpointProfile registerForNotifications]
  -[HMDSiriEndpointProfile setNotifications:]
  -[HMDSiriEndpointProfile sessionState]
  -[HMDSiriEndpointProfile _capability]
  -[HMDSiriEndpointProfile sessionHubIdentifer]
  -[HMDSiriEndpointProfile setSessionHubIdentifer:]
  -[HMDSiriEndpointProfile siriEndpointVersion]
  -[HMDSiriEndpointProfile setSiriEndpointVersion:]
  -[HMDSiriEndpointProfile siriEngineVersion]
  -[HMDSiriEndpointProfile setSiriEngineVersion:]
  -[HMDSiriEndpointProfile activeIdentifier]
  -[HMDSiriEndpointProfile setActiveIdentifier:]
  -[HMDSiriEndpointProfile manuallyDisabled]
  -[HMDSiriEndpointProfile setManuallyDisabled:]
  -[HMDSiriEndpointProfile multifunctionButton]
  -[HMDSiriEndpointProfile setMultifunctionButton:]
  -[HMDSiriEndpointProfile assistants]
  -[HMDSiriEndpointProfile setAssistants:]
  -[HMDSiriEndpointProfile refreshStateWithCompletionHandler:]
  -[HMDSiriEndpointProfile registerForMessages]
  -[HMDSiriEndpointProfile needsOnboarding]
  -[HMDSiriEndpointProfile stagedValue:didExpireValue:]
  -[HMDSiriEndpointProfile handleDeviceCapabilitiesUpdated:]
  -[HMDSiriEndpointProfile handlePrimaryResidentChanged:]
  -[HMDSiriEndpointProfile handleAccessoryConnected:]
  -[HMDSiriEndpointProfile siriEnable]
  -[HMDSiriEndpointProfile setSiriEnable:]
  -[HMDSiriEndpointProfile siriListening]
  -[HMDSiriEndpointProfile setSiriListening:]
  -[HMDSiriEndpointProfile siriTouchToUse]
  -[HMDSiriEndpointProfile setSiriTouchToUse:]
  -[HMDSiriEndpointProfile siriLightOnUse]
  -[HMDSiriEndpointProfile setSiriLightOnUse:]
  -[HMDSiriEndpointProfile _handleRefreshProfileState:]
  -[HMDSiriEndpointProfile handleEnableNotifications:]
  -[HMDSiriEndpointProfile handleHomeCharacteristicValuesChanged:]
  -[HMDSiriEndpointProfile handleUpdateNeedsOnboarding:]
  -[HMDSiriEndpointProfile initWithSiriEndpointServices:]
  -[HMDSiriEndpointProfile initWithSiriEndpointServices:notificationCenter:]
  -[HMDSiriEndpointProfile _siriService]
  -[HMDSiriEndpointProfile _siriEndpointService]
  -[HMDSiriEndpointProfile _siriSettingSiriEnableCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingSiriEnableReadRequest]
  -[HMDSiriEndpointProfile _siriSettingSiriListeningCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingSiriListeningReadRequest]
  -[HMDSiriEndpointProfile _siriSettingSiriTouchCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingSiriTouchReadRequest]
  -[HMDSiriEndpointProfile _siriSettingSiriLightOnUseCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingSiriLightOnUseReadRequest]
  -[HMDSiriEndpointProfile _siriSettingSiriEngineVersionCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingSiriEngineVersionReadRequest]
  -[HMDSiriEndpointProfile _siriEndpointSessionStatusCharacteristic]
  -[HMDSiriEndpointProfile _siriEndpointSessionStatusReadRequest]
  -[HMDSiriEndpointProfile _siriEndpointVersionCharacteristic]
  -[HMDSiriEndpointProfile _siriEndpointVersionReadRequest]
  -[HMDSiriEndpointProfile _siriEndpointActiveIdentifierCharacteristic]
  -[HMDSiriEndpointProfile _siriEndpointActiveIdentifierReadRequest]
  -[HMDSiriEndpointProfile _siriEndpointManuallyDisabledCharacteristic]
  -[HMDSiriEndpointProfile _siriEndpointManuallyDisabledReadRequest]
  -[HMDSiriEndpointProfile _siriSettingMultifunctionButtonCharacteristic]
  -[HMDSiriEndpointProfile _siriSettingMultifunctionButtonReadRequest]
  -[HMDSiriEndpointProfile setProfileServices:]
  -[HMDSiriEndpointProfile profileServices]
  -[HMDSiriEndpointProfile stageNeedsOnboarding:]
  -[HMDSiriEndpointProfile stageNeedsOnboarding:withTimeout:]
  -[HMDSiriEndpointProfile siriSoundOnUse]
  -[HMDSiriEndpointProfile _handleCharacteristicChanges:]
  -[HMDSiriEndpointProfile updateNeedsOnboarding:withTimeout:]
  -[HMDSiriEndpointProfile notifyClientsDidUpdateStagedNeedsOnboarding]
  -[HMDSiriEndpointProfile _handleRefreshProfileState:completionHandler:]
  -[HMDSiriEndpointProfile _notifyProfileSettingsUpdated:]
  -[HMDSiriEndpointProfile _updateSessionState:settings:message:]
  -[HMDSiriEndpointProfile setEnable:completionHandler:]
  -[HMDSiriEndpointProfile setListening:completionHandler:]
  -[HMDSiriEndpointProfile setTouchToUse:completionHandler:]
  -[HMDSiriEndpointProfile setLightOnUse:completionHandler:]
  -[HMDSiriEndpointProfile setSoundOnUse:completionHandler:]
  -[HMDSiriEndpointProfile _notificationEnabledForType:]
  -[HMDSiriEndpointProfile _notificationEnable:forType:]
  -[HMDSiriEndpointProfile _allEndpointCharacteristicsToMonitor]
  -[HMDSiriEndpointProfile _allSettingsCharacteristicsToMonitor]
  -[HMDSiriEndpointProfile setNotifications:options:]
  -[HMDSiriEndpointProfile _setNotifications:options:]
  -[HMDSiriEndpointProfile stagedNeedsOnboarding]
  -[HMDSiriEndpointProfile clientEndpointIdentifier]
  -[HMDSiriEndpointProfile clientSettingsIdentifier]


HMDCompositeSettingStringConstraint : HMFObject <HMDCompositeSettingConstraint>
 @property  NSSet *validValues
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCompositeSettingStringConstraint .cxx_destruct]
  -[HMDCompositeSettingStringConstraint validValues]
  -[HMDCompositeSettingStringConstraint isValidValue:error:]
  -[HMDCompositeSettingStringConstraint setValidValues:]
  -[HMDCompositeSettingStringConstraint initWithValidValues:]


HMPBEncodeOption : PBCodable <NSCopying>
 @property  BOOL hasIsXPC
 @property  BOOL isXPC
 @property  BOOL hasIsSPI
 @property  BOOL isSPI

  // instance methods
  -[HMPBEncodeOption isXPC]
  -[HMPBEncodeOption copyTo:]
  -[HMPBEncodeOption mergeFrom:]
  -[HMPBEncodeOption dictionaryRepresentation]
  -[HMPBEncodeOption copyWithZone:]
  -[HMPBEncodeOption readFrom:]
  -[HMPBEncodeOption writeTo:]
  -[HMPBEncodeOption isEqual:]
  -[HMPBEncodeOption setIsXPC:]
  -[HMPBEncodeOption setHasIsXPC:]
  -[HMPBEncodeOption hasIsXPC]
  -[HMPBEncodeOption setIsSPI:]
  -[HMPBEncodeOption setHasIsSPI:]
  -[HMPBEncodeOption hasIsSPI]
  -[HMPBEncodeOption isSPI]


HMDSyncOperationQueue : HMFObject <HMFLogging>
 @property  HMDSyncOperationManager *manager
 @property  NSArray *stagedOperations
 @property  NSArray *waitingOperations
 @property  double initialDelay
 @property  double initialBackoff
 @property  BOOL hasExponentialBackoff
 @property  HMFExponentialBackoffTimer *backoffTimer
 @property  NSString *name
 @property  long long count
 @property  long long countTotal
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSyncOperationQueue logCategory]

  // instance methods
  -[HMDSyncOperationQueue setInitialDelay:]
  -[HMDSyncOperationQueue setManager:]
  -[HMDSyncOperationQueue initialDelay]
  -[HMDSyncOperationQueue backoffTimer]
  -[HMDSyncOperationQueue .cxx_destruct]
  -[HMDSyncOperationQueue count]
  -[HMDSyncOperationQueue allOperations]
  -[HMDSyncOperationQueue manager]
  -[HMDSyncOperationQueue name]
  -[HMDSyncOperationQueue nextOperation]
  -[HMDSyncOperationQueue setBackoffTimer:]
  -[HMDSyncOperationQueue initName:syncManager:initialDelay:initialBackoff:hasBackoff:]
  -[HMDSyncOperationQueue stagedOperations]
  -[HMDSyncOperationQueue waitingOperations]
  -[HMDSyncOperationQueue _addStagedOperation:]
  -[HMDSyncOperationQueue _removeStagedOperation:]
  -[HMDSyncOperationQueue _addWaitingOperation:]
  -[HMDSyncOperationQueue _removeWaitingOperation:]
  -[HMDSyncOperationQueue countTotal]
  -[HMDSyncOperationQueue _createBackoffTimer]
  -[HMDSyncOperationQueue resetBackoffTimer]
  -[HMDSyncOperationQueue _addOperation:]
  -[HMDSyncOperationQueue addOperation:withDelay:]
  -[HMDSyncOperationQueue stageOperation:]
  -[HMDSyncOperationQueue dropOperation:]
  -[HMDSyncOperationQueue dropAllOperations]
  -[HMDSyncOperationQueue processFiredTimer:]
  -[HMDSyncOperationQueue isInMaximumTimeInterval]
  -[HMDSyncOperationQueue operationsToCancel]
  -[HMDSyncOperationQueue initialBackoff]
  -[HMDSyncOperationQueue setInitialBackoff:]
  -[HMDSyncOperationQueue hasExponentialBackoff]
  -[HMDSyncOperationQueue setHasExponentialBackoff:]


HMDSyncOperationManager : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMDSyncOperationQueue *cloudPushOperations
 @property  NSArray *cloudVerifyAccountOperations
 @property  HMDSyncOperationQueue *cloudFetchOperations
 @property  NSArray *cloudZonePushOperationQueues
 @property  NSArray *cloudZoneFetchOperationQueues
 @property  NSArray *cloudCancelPauseOperations
 @property  NSArray *cloudQueryDatabaseOperations
 @property  NSArray *cloudPostFetchOperations
 @property  BOOL pauseQueue
 @property  long long pauseCloudPushLevel
 @property  HMFExponentialBackoffTimer *cloudPushDelayTimer
 @property  BOOL syncLoopDialogDisplayed
 @property  HMDSyncOperation *currentOperation
 @property  <HMDSyncOperationManagerDataSource> *dataSource
 @property  @? timerFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSyncOperationManager logCategory]

  // instance methods
  -[HMDSyncOperationManager dumpState]
  -[HMDSyncOperationManager kick]
  -[HMDSyncOperationManager timerDidFire:]
  -[HMDSyncOperationManager dataSource]
  -[HMDSyncOperationManager clientQueue]
  -[HMDSyncOperationManager addOperation:]
  -[HMDSyncOperationManager workQueue]
  -[HMDSyncOperationManager pause]
  -[HMDSyncOperationManager currentOperation]
  -[HMDSyncOperationManager .cxx_destruct]
  -[HMDSyncOperationManager resume]
  -[HMDSyncOperationManager pauseQueue]
  -[HMDSyncOperationManager timerFactory]
  -[HMDSyncOperationManager setCurrentOperation:]
  -[HMDSyncOperationManager addOperation:withDelay:]
  -[HMDSyncOperationManager initWithClientQueue:dataSource:]
  -[HMDSyncOperationManager initWithClientQueue:dataSource:timerFactory:]
  -[HMDSyncOperationManager cloudPushOperations]
  -[HMDSyncOperationManager cloudVerifyAccountOperations]
  -[HMDSyncOperationManager cloudFetchOperations]
  -[HMDSyncOperationManager cloudZonePushOperationQueues]
  -[HMDSyncOperationManager cloudZoneFetchOperations]
  -[HMDSyncOperationManager cloudCancelPauseOperations]
  -[HMDSyncOperationManager cloudQueryDatabaseOperations]
  -[HMDSyncOperationManager cloudPostFetchOperations]
  -[HMDSyncOperationManager addCloudVerifyAccountOperation:]
  -[HMDSyncOperationManager popCloudVerifyAccountOperation]
  -[HMDSyncOperationManager addCloudZonePushOperation:delay:]
  -[HMDSyncOperationManager removeCloudZonePushOperationQueue:]
  -[HMDSyncOperationManager popCloudZonePushOperationAndMoveQueueToEnd]
  -[HMDSyncOperationManager addCloudZoneFetchOperation:delay:]
  -[HMDSyncOperationManager removeCloudZoneFetchOperationQueue:]
  -[HMDSyncOperationManager popCloudZoneFetchOperationAndMoveQueueToEnd:]
  -[HMDSyncOperationManager addCloudCancelPauseOperation:]
  -[HMDSyncOperationManager popCloudCancelPauseOperation]
  -[HMDSyncOperationManager addCloudQueryDatabaseOperationIfNonePresent:]
  -[HMDSyncOperationManager popCloudQueryDatabaseOperation]
  -[HMDSyncOperationManager addCloudPostFetchOperationIfNonePresent:]
  -[HMDSyncOperationManager dropCloudPostFetchOperationsIfPresent]
  -[HMDSyncOperationManager popCloudPostFetchOperation]
  -[HMDSyncOperationManager _reportPossibleSyncLoop]
  -[HMDSyncOperationManager addOperationRespectingOptions:withDelay:]
  -[HMDSyncOperationManager pauseAndWaitForCurrentOperationCompletion:]
  -[HMDSyncOperationManager cancelOperations]
  -[HMDSyncOperationManager _dequeueNextOperation]
  -[HMDSyncOperationManager _handleNextOperation]
  -[HMDSyncOperationManager _handleCancelledOperations:]
  -[HMDSyncOperationManager pauseCloudPush]
  -[HMDSyncOperationManager resumeCloudPush]
  -[HMDSyncOperationManager killCloudPushAndResume]
  -[HMDSyncOperationManager resetCloudPushTimer:]
  -[HMDSyncOperationManager cloudZoneFetchOperationQueues]
  -[HMDSyncOperationManager setPauseQueue:]
  -[HMDSyncOperationManager pauseCloudPushLevel]
  -[HMDSyncOperationManager setPauseCloudPushLevel:]
  -[HMDSyncOperationManager cloudPushDelayTimer]
  -[HMDSyncOperationManager setCloudPushDelayTimer:]
  -[HMDSyncOperationManager wasSyncLoopDialogDisplayed]
  -[HMDSyncOperationManager setSyncLoopDialogDisplayed:]


HMDSyncOperationOptions : HMFObject
 @property  unsigned long operationType
 @property  NSString *zoneName
 @property  BOOL cloudConflict
 @property  BOOL delayRespected

  // instance methods
  -[HMDSyncOperationOptions operationType]
  -[HMDSyncOperationOptions zoneName]
  -[HMDSyncOperationOptions .cxx_destruct]
  -[HMDSyncOperationOptions initWithOperationType:zoneName:cloudConflict:delayRespected:]
  -[HMDSyncOperationOptions initWithOperationType:zoneName:delayRespected:]
  -[HMDSyncOperationOptions isCloudConflict]
  -[HMDSyncOperationOptions setCloudConflict:]
  -[HMDSyncOperationOptions isDelayRespected]
  -[HMDSyncOperationOptions setDelayRespected:]


HMDSyncOperation : HMFObject
 @property  NSUUID *identifier
 @property  NSString *zoneName
 @property  unsigned long operationType
 @property  HMFTimer *delayTimer
 @property  @? operationBlock
 @property  HMDSyncOperationOptions *options

  // class methods
  +[HMDSyncOperation queryDatabaseOperationWithBlock:]
  +[HMDSyncOperation postFetchOperationWithBlock:]
  +[HMDSyncOperation cancelOperationWithBlock:]
  +[HMDSyncOperation cloudPushSyncOperationWithBlock:]
  +[HMDSyncOperation cloudForcePushSyncOperationWithBlock:]
  +[HMDSyncOperation cloudVerifyAccountSyncOperationWithBlock:]
  +[HMDSyncOperation cloudFetchSyncOperationWithCloudConflict:block:]
  +[HMDSyncOperation cloudZonePushSyncOperation:block:]
  +[HMDSyncOperation cloudZoneFetchSyncOperation:cloudConflict:block:]
  +[HMDSyncOperation cloudOperation:withBlock:]

  // instance methods
  -[HMDSyncOperation operationType]
  -[HMDSyncOperation identifier]
  -[HMDSyncOperation setDelayTimer:]
  -[HMDSyncOperation delayTimer]
  -[HMDSyncOperation zoneName]
  -[HMDSyncOperation .cxx_destruct]
  -[HMDSyncOperation options]
  -[HMDSyncOperation operationBlock]
  -[HMDSyncOperation setOperationBlock:]
  -[HMDSyncOperation _initWithOptions:syncBlock:]


HMDKeyTransferAgent : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHomeManager *homeManager
 @property  NSUUID *uuid
 @property  NSString *progressState
 @property  HMFMessageDestination *messageDestination
 @property  unsigned long residentProvisioningStatus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDKeyTransferAgent logCategory]

  // instance methods
  -[HMDKeyTransferAgent initWithHomeManager:]
  -[HMDKeyTransferAgent workQueue]
  -[HMDKeyTransferAgent setWorkQueue:]
  -[HMDKeyTransferAgent uuid]
  -[HMDKeyTransferAgent .cxx_destruct]
  -[HMDKeyTransferAgent setUuid:]
  -[HMDKeyTransferAgent messageTargetUUID]
  -[HMDKeyTransferAgent messageDestination]
  -[HMDKeyTransferAgent homeManager]
  -[HMDKeyTransferAgent setProgressState:]
  -[HMDKeyTransferAgent setHomeManager:]
  -[HMDKeyTransferAgent progressState]
  -[HMDKeyTransferAgent messageReceiveQueue]
  -[HMDKeyTransferAgent residentProvisioningStatus]
  -[HMDKeyTransferAgent resetConfig]
  -[HMDKeyTransferAgent beginPairingWithCompletionHandler:]


HMDMediaSystem : HMFObject <HMDMediaDestinationsManagerDataSource, HMDMediaDestinationsManagerDelegate, HMDAccessorySettingsControllerDataSource, HMDAccessorySettingsControllerDelegate, NSSecureCoding, HMFDumpState, HMFLogging, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver>
 @property  HMMediaSystemData *data
 @property  HMDMediaDestinationsManager *audioDestinationsManager
 @property  <HMDMediaGroupsAggregateConsumerDataProvider> *aggregateDataProvider
 @property  NSNotificationCenter *notificationCenter
 @property  @? audioDestinationsManagerFactory
 @property  <HMDMediaSystemDataSource> *dataSource
 @property  NSUUID *uuid
 @property  NSString *name
 @property  NSString *configuredName
 @property  HMDHome *home
 @property  HMDRoom *room
 @property  NSArray *components
 @property  NSArray *accessories
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDMediaSession *mediaSession
 @property  HMDApplicationData *appData
 @property  HMDAppleMediaAccessory *targetAccessory
 @property  HMDAccessorySettingsController *settingsController
 @property  HMMediaDestination *audioDestination
 @property  <HMDMediaDestinationManager> *audioDestinationManager
 @property  NSArray *associatedAudioDestinationManagers
 @property  HMDBackingStore *backingStore
 @property  BOOL supportsUserMediaSettings
 @property  HMFActivity *setupActivity
 @property  double setupStartTimestamp
 @property  HMDAccessorySetupMetricDispatcher *accessorySetupMetricDispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMediaSystem supportsSecureCoding]
  +[HMDMediaSystem logCategory]
  +[HMDMediaSystem hasMessageReceiverChildren]
  +[HMDMediaSystem initalizeDataWithIdentifier:parentIdentifier:name:defaultName:components:]
  +[HMDMediaSystem destinationIdentifierForComponentRoleType:components:]
  +[HMDMediaSystem _configureMediaSystemComponents:mediaSystem:]
  +[HMDMediaSystem sortMediaComponents:]

  // instance methods
  -[HMDMediaSystem dumpState]
  -[HMDMediaSystem notificationCenter]
  -[HMDMediaSystem home]
  -[HMDMediaSystem _registerForNotifications]
  -[HMDMediaSystem setNotificationCenter:]
  -[HMDMediaSystem logIdentifier]
  -[HMDMediaSystem dataSource]
  -[HMDMediaSystem setComponents:]
  -[HMDMediaSystem encodeWithCoder:]
  -[HMDMediaSystem workQueue]
  -[HMDMediaSystem setWorkQueue:]
  -[HMDMediaSystem attributeDescriptions]
  -[HMDMediaSystem dealloc]
  -[HMDMediaSystem privateDescription]
  -[HMDMediaSystem uuid]
  -[HMDMediaSystem isValid]
  -[HMDMediaSystem .cxx_destruct]
  -[HMDMediaSystem messageTargetUUID]
  -[HMDMediaSystem supportsUserMediaSettings]
  -[HMDMediaSystem messageDestination]
  -[HMDMediaSystem legacyName]
  -[HMDMediaSystem setData:]
  -[HMDMediaSystem setName:]
  -[HMDMediaSystem setDataSource:]
  -[HMDMediaSystem name]
  -[HMDMediaSystem backingStore]
  -[HMDMediaSystem serialize]
  -[HMDMediaSystem messageReceiveQueue]
  -[HMDMediaSystem components]
  -[HMDMediaSystem accessories]
  -[HMDMediaSystem msgDispatcher]
  -[HMDMediaSystem urlString]
  -[HMDMediaSystem data]
  -[HMDMediaSystem initWithCoder:]
  -[HMDMediaSystem room]
  -[HMDMediaSystem audioDestinationIdentifier]
  -[HMDMediaSystem mediaSession]
  -[HMDMediaSystem setMediaSession:]
  -[HMDMediaSystem setConfiguredName:]
  -[HMDMediaSystem configuredName]
  -[HMDMediaSystem audioDestination]
  -[HMDMediaSystem settingsController]
  -[HMDMediaSystem setMsgDispatcher:]
  -[HMDMediaSystem _registerForMessages]
  -[HMDMediaSystem _updateAppData:]
  -[HMDMediaSystem setAppData:]
  -[HMDMediaSystem appData]
  -[HMDMediaSystem __name]
  -[HMDMediaSystem messageReceiverChildren]
  -[HMDMediaSystem transactionObjectUpdated:newValues:message:]
  -[HMDMediaSystem transactionObjectRemoved:message:]
  -[HMDMediaSystem modelObjectWithChangeType:]
  -[HMDMediaSystem configureWithMessageDispatcher:]
  -[HMDMediaSystem _routeUpdateMediaSystem:]
  -[HMDMediaSystem mergeMediaSystemData:]
  -[HMDMediaSystem backingStoreObjectsForVersion:]
  -[HMDMediaSystem handleRemovedAccessory:]
  -[HMDMediaSystem handleHomeCloudZoneReadyNotification:]
  -[HMDMediaSystem targetAccessory]
  -[HMDMediaSystem setupStartTimestamp]
  -[HMDMediaSystem setSetupStartTimestamp:]
  -[HMDMediaSystem setupActivity]
  -[HMDMediaSystem targetAccessoryForMediaDestinationManager:]
  -[HMDMediaSystem modelsToMakeSettingsForController:parentUUID:]
  -[HMDMediaSystem modelsToMigrateSettingsForController:]
  -[HMDMediaSystem removeManagedConfigurationProfileWithProfileData:completion:]
  -[HMDMediaSystem setSetupActivity:]
  -[HMDMediaSystem accessorySetupMetricDispatcher]
  -[HMDMediaSystem accessorySettingsController:saveWithReason:]
  -[HMDMediaSystem accessorySettingsController:saveWithReason:model:]
  -[HMDMediaSystem remoteMessageDestinationForAccessorySettingsController:target:]
  -[HMDMediaSystem supportedMultiUserLanguageCodesForAccessorySettingsController:]
  -[HMDMediaSystem isMultiUserEnabledForAccessorySettingsController:]
  -[HMDMediaSystem assistantAccessControlModelWithRemovedAccessoriesForAccessorySettingsController:]
  -[HMDMediaSystem languagesChangedForAccessorySettingsController:]
  -[HMDMediaSystem legacyAudioDestination]
  -[HMDMediaSystem audioDestinationManager]
  -[HMDMediaSystem _handleAppData:]
  -[HMDMediaSystem handleAccessorySoftwareUpdated:]
  -[HMDMediaSystem associatedDestinationManagersForMediaDestinationsManager:]
  -[HMDMediaSystem mediaDestinationsManager:destinationControllerWithIdentifier:]
  -[HMDMediaSystem mediaGroupsAggregatorMessengerForMediaDestinationsManager:]
  -[HMDMediaSystem mediaDestinationsManager:didUpdateDestination:]
  -[HMDMediaSystem initWithMediaSystemData:home:]
  -[HMDMediaSystem initWithUUID:configuredName:home:data:components:]
  -[HMDMediaSystem initWithUUID:configuredName:home:data:components:settingsControllerCreator:]
  -[HMDMediaSystem initWithMediaSystemModel:home:]
  -[HMDMediaSystem modelForMediaSystem]
  -[HMDMediaSystem configureMediaSystemComponents:]
  -[HMDMediaSystem associatedAudioDestinationManagers]
  -[HMDMediaSystem configureAudioDestinationsManager]
  -[HMDMediaSystem createNewAudioDestination]
  -[HMDMediaSystem repairAnyPreExistingAudioGroups]
  -[HMDMediaSystem destinationControllerGroupedWithAssociatedDestination]
  -[HMDMediaSystem isCurrentComponent]
  -[HMDMediaSystem unconfigureMediaSystemComponents]
  -[HMDMediaSystem unconfigureMediaSystemComponents:]
  -[HMDMediaSystem auditMediaComponents]
  -[HMDMediaSystem relayMessage:]
  -[HMDMediaSystem __configuredName]
  -[HMDMediaSystem legacyConfiguredName]
  -[HMDMediaSystem generateComponents]
  -[HMDMediaSystem legacyComponents]
  -[HMDMediaSystem targetAccessoryBySerial]
  -[HMDMediaSystem _transactionMediaSystemUpdated:message:]
  -[HMDMediaSystem _appDataUpdated:message:]
  -[HMDMediaSystem _appDataRemoved:message:]
  -[HMDMediaSystem componentsSupportsHomeLevelLocationServiceSetting]
  -[HMDMediaSystem audioDestinationsManager]
  -[HMDMediaSystem setAudioDestinationsManager:]
  -[HMDMediaSystem aggregateDataProvider]
  -[HMDMediaSystem audioDestinationsManagerFactory]
  -[HMDMediaSystem setAudioDestinationsManagerFactory:]
  -[HMDMediaSystem assistantObject]


HMDMediaSystemModel : HMDBackingStoreModelObject
 @property  NSString *name
 @property  NSString *configuredName
 @property  NSArray *mediaSystemComponents

  // class methods
  +[HMDMediaSystemModel properties]
  +[HMDMediaSystemModel schemaHashRoot]

  // instance methods
  -[HMDMediaSystemModel dependentUUIDs]


HMDMediaSystemExtended : HMDMediaSystem

HMDMediaSystemModelExtended : HMDMediaSystemModel

HMDDoorbellChimeController : HMFObject <HMDCharacteristicsAvailabilityListenerDelegate, HMFLogging>
 @property  <HMDDoorbellChimeControllerContext> *context
 @property  NSSet *availableCharacteristics
 @property  NSDate *lastUnidentifiedChimeDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDoorbellChimeController logCategory]

  // instance methods
  -[HMDDoorbellChimeController configure]
  -[HMDDoorbellChimeController logIdentifier]
  -[HMDDoorbellChimeController initWithContext:]
  -[HMDDoorbellChimeController clientIdentifier]
  -[HMDDoorbellChimeController dealloc]
  -[HMDDoorbellChimeController .cxx_destruct]
  -[HMDDoorbellChimeController context]
  -[HMDDoorbellChimeController _numHomePodsWithDoorbellChimeEnabled]
  -[HMDDoorbellChimeController handleCharacteristicsValueUpdatedNotification:]
  -[HMDDoorbellChimeController listener:didUpdateAvailableCharacteristics:]
  -[HMDDoorbellChimeController initWithWorkQueue:accessory:]
  -[HMDDoorbellChimeController handleUpdatedPersonIdentificationInformation]
  -[HMDDoorbellChimeController _handleCharacteristicsValueUpdatedNotification:]
  -[HMDDoorbellChimeController _notifyAllAccessoriesForDoorbellPressAndPlayChimeSound:attemptCloudPullIfNoPersonsFound:]
  -[HMDDoorbellChimeController _chimeCoreUtilDoorbellWithDestination:shouldPlayChime:logEvent:personIdentificationText:]
  -[HMDDoorbellChimeController _destinationIDsToNotifyForDoorbellChimeUsingCoreUtilAction]
  -[HMDDoorbellChimeController _isDoorbellChimeSettingEnabledForHomePodAccessory:]
  -[HMDDoorbellChimeController availableCharacteristics]
  -[HMDDoorbellChimeController setAvailableCharacteristics:]
  -[HMDDoorbellChimeController lastUnidentifiedChimeDate]
  -[HMDDoorbellChimeController setLastUnidentifiedChimeDate:]


HMDDoorbellChimeControllerContext : NSObject <HMDDoorbellChimeControllerContext>
 @property  <HMDCOStateManager> *stateManager
 @property  <HMDCoordinationStateManagerProviding> *stateManagerProvider
 @property  HMDHAPAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter
 @property  HMDCharacteristicsAvailabilityListener *listener
 @property  BOOL featureEnabled
 @property  BOOL currentDevicePrimaryResident
 @property  Class doorbellBulletinUtilitiesClass
 @property  double doorbellChimeMaximumAnnounceDelay
 @property  NSUUID *currentAccessoryUUID
 @property  BOOL coordinationPathEnabled
 @property  <HMMLogEventSubmitting> *logEventDispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDDoorbellChimeControllerContext notificationCenter]
  -[HMDDoorbellChimeControllerContext accessory]
  -[HMDDoorbellChimeControllerContext setAccessory:]
  -[HMDDoorbellChimeControllerContext workQueue]
  -[HMDDoorbellChimeControllerContext .cxx_destruct]
  -[HMDDoorbellChimeControllerContext isFeatureEnabled]
  -[HMDDoorbellChimeControllerContext stateManager]
  -[HMDDoorbellChimeControllerContext listener]
  -[HMDDoorbellChimeControllerContext isCurrentDevicePrimaryResident]
  -[HMDDoorbellChimeControllerContext doorbellBulletinUtilitiesClass]
  -[HMDDoorbellChimeControllerContext logEventDispatcher]
  -[HMDDoorbellChimeControllerContext initWithWorkQueue:accessory:]
  -[HMDDoorbellChimeControllerContext postCULiveAction:]
  -[HMDDoorbellChimeControllerContext postCoordinationState:]
  -[HMDDoorbellChimeControllerContext keyPathFromComponents:]
  -[HMDDoorbellChimeControllerContext clearCoordinationStateForKeyPaths:]
  -[HMDDoorbellChimeControllerContext fetchDoorbellDelay]
  -[HMDDoorbellChimeControllerContext accessorySupportsCoordinationDoorbellChime:]
  -[HMDDoorbellChimeControllerContext doorbellChimeMaximumAnnounceDelay]
  -[HMDDoorbellChimeControllerContext currentAccessoryUUID]
  -[HMDDoorbellChimeControllerContext isCoordinationPathEnabled]
  -[HMDDoorbellChimeControllerContext stateManagerProvider]


HMDDeviceController : HMFObject <HMFLogging>
 @property  <HMDDeviceControllerDelegate> *delegate
 @property  NSUUID *identifier
 @property  HMDDevice *device
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDeviceController allocWithZone:]
  +[HMDDeviceController logCategory]

  // instance methods
  -[HMDDeviceController identifier]
  -[HMDDeviceController logIdentifier]
  -[HMDDeviceController setDelegate:]
  -[HMDDeviceController delegate]
  -[HMDDeviceController attributeDescriptions]
  -[HMDDeviceController dealloc]
  -[HMDDeviceController .cxx_destruct]
  -[HMDDeviceController initWithIdentifier:]
  -[HMDDeviceController device]
  -[HMDDeviceController initWithDevice:]
  -[HMDDeviceController init]
  -[HMDDeviceController updateWithDevice:completionHandler:]


__HMDPlaceholderDeviceController : HMDDeviceController
  // class methods
  +[__HMDPlaceholderDeviceController sharedPlaceholder]

  // instance methods
  -[__HMDPlaceholderDeviceController initWithDevice:]
  -[__HMDPlaceholderDeviceController init]
  -[__HMDPlaceholderDeviceController updateWithDevice:completionHandler:]


__HMDDeviceController : HMDDeviceController
  // instance methods
  -[__HMDDeviceController dealloc]
  -[__HMDDeviceController observeValueForKeyPath:ofObject:change:context:]
  -[__HMDDeviceController initWithDevice:]
  -[__HMDDeviceController init]
  -[__HMDDeviceController updateWithDevice:completionHandler:]
  -[__HMDDeviceController __handleAddedAccount:]
  -[__HMDDeviceController __handleAddedDevice:]


__HMDCurrentDeviceController : HMDDeviceController
  // instance methods
  -[__HMDCurrentDeviceController initWithIdentifier:]
  -[__HMDCurrentDeviceController initWithDevice:]
  -[__HMDCurrentDeviceController init]
  -[__HMDCurrentDeviceController updateWithDevice:completionHandler:]
  -[__HMDCurrentDeviceController __handleDeviceUpdated:]


HMMediaGroupProtoMediaParticipantData : PBCodable <NSCopying>
 @property  BOOL hasDestination
 @property  HMMediaGroupProtoMediaDestination *destination
 @property  BOOL hasDestinationController
 @property  HMMediaGroupProtoMediaDestinationControllerData *destinationController
 @property  NSMutableArray *backupGroups

  // class methods
  +[HMMediaGroupProtoMediaParticipantData backupGroupsType]

  // instance methods
  -[HMMediaGroupProtoMediaParticipantData setDestination:]
  -[HMMediaGroupProtoMediaParticipantData destination]
  -[HMMediaGroupProtoMediaParticipantData copyTo:]
  -[HMMediaGroupProtoMediaParticipantData .cxx_destruct]
  -[HMMediaGroupProtoMediaParticipantData setDestinationController:]
  -[HMMediaGroupProtoMediaParticipantData mergeFrom:]
  -[HMMediaGroupProtoMediaParticipantData destinationController]
  -[HMMediaGroupProtoMediaParticipantData dictionaryRepresentation]
  -[HMMediaGroupProtoMediaParticipantData copyWithZone:]
  -[HMMediaGroupProtoMediaParticipantData readFrom:]
  -[HMMediaGroupProtoMediaParticipantData writeTo:]
  -[HMMediaGroupProtoMediaParticipantData isEqual:]
  -[HMMediaGroupProtoMediaParticipantData hasDestination]
  -[HMMediaGroupProtoMediaParticipantData hasDestinationController]
  -[HMMediaGroupProtoMediaParticipantData clearBackupGroups]
  -[HMMediaGroupProtoMediaParticipantData addBackupGroups:]
  -[HMMediaGroupProtoMediaParticipantData backupGroupsCount]
  -[HMMediaGroupProtoMediaParticipantData backupGroupsAtIndex:]
  -[HMMediaGroupProtoMediaParticipantData backupGroups]
  -[HMMediaGroupProtoMediaParticipantData setBackupGroups:]


HMDHAPMetricsLogEvent : HMMLogEvent
 @property  unsigned long sentHTTPRequests
 @property  unsigned long receivedHTTPResponses
 @property  unsigned long receivedHTTPEvents
 @property  unsigned long accessoryServerInvalidations
 @property  unsigned long btleConnections
 @property  unsigned long btleDiscoveries
 @property  unsigned long btleConnectionPerReasons

  // instance methods
  -[HMDHAPMetricsLogEvent updateWithHAPAccessoryServer:]
  -[HMDHAPMetricsLogEvent sentHTTPRequests]
  -[HMDHAPMetricsLogEvent receivedHTTPResponses]
  -[HMDHAPMetricsLogEvent receivedHTTPEvents]
  -[HMDHAPMetricsLogEvent accessoryServerInvalidations]
  -[HMDHAPMetricsLogEvent btleConnections]
  -[HMDHAPMetricsLogEvent btleDiscoveries]
  -[HMDHAPMetricsLogEvent btleConnectionPerReasons]


AWDHomeKitBroadcastEventKeyGeneration : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasReason
 @property  int reason
 @property  BOOL hasCertified
 @property  int certified

  // instance methods
  -[AWDHomeKitBroadcastEventKeyGeneration setHasReason:]
  -[AWDHomeKitBroadcastEventKeyGeneration hasReason]
  -[AWDHomeKitBroadcastEventKeyGeneration setTimestamp:]
  -[AWDHomeKitBroadcastEventKeyGeneration copyTo:]
  -[AWDHomeKitBroadcastEventKeyGeneration .cxx_destruct]
  -[AWDHomeKitBroadcastEventKeyGeneration mergeFrom:]
  -[AWDHomeKitBroadcastEventKeyGeneration reason]
  -[AWDHomeKitBroadcastEventKeyGeneration setHasTimestamp:]
  -[AWDHomeKitBroadcastEventKeyGeneration dictionaryRepresentation]
  -[AWDHomeKitBroadcastEventKeyGeneration hasTimestamp]
  -[AWDHomeKitBroadcastEventKeyGeneration StringAsReason:]
  -[AWDHomeKitBroadcastEventKeyGeneration copyWithZone:]
  -[AWDHomeKitBroadcastEventKeyGeneration timestamp]
  -[AWDHomeKitBroadcastEventKeyGeneration readFrom:]
  -[AWDHomeKitBroadcastEventKeyGeneration reasonAsString:]
  -[AWDHomeKitBroadcastEventKeyGeneration writeTo:]
  -[AWDHomeKitBroadcastEventKeyGeneration setReason:]
  -[AWDHomeKitBroadcastEventKeyGeneration isEqual:]
  -[AWDHomeKitBroadcastEventKeyGeneration hasVendorDetails]
  -[AWDHomeKitBroadcastEventKeyGeneration vendorDetails]
  -[AWDHomeKitBroadcastEventKeyGeneration setVendorDetails:]
  -[AWDHomeKitBroadcastEventKeyGeneration certified]
  -[AWDHomeKitBroadcastEventKeyGeneration setCertified:]
  -[AWDHomeKitBroadcastEventKeyGeneration setHasCertified:]
  -[AWDHomeKitBroadcastEventKeyGeneration hasCertified]
  -[AWDHomeKitBroadcastEventKeyGeneration certifiedAsString:]
  -[AWDHomeKitBroadcastEventKeyGeneration StringAsCertified:]


HMDMediaSessionState : HMFObject <HMFDumpState>
 @property  long long playbackState
 @property  long long shuffleState
 @property  long long repeatState
 @property  NSNumber *volume
 @property  NSNumber *muted
 @property  NSString *mediaUniqueIdentifier
 @property  NSString *sessionIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDMediaSessionState dumpState]
  -[HMDMediaSessionState muted]
  -[HMDMediaSessionState sessionIdentifier]
  -[HMDMediaSessionState playbackState]
  -[HMDMediaSessionState setPlaybackState:]
  -[HMDMediaSessionState .cxx_destruct]
  -[HMDMediaSessionState setVolume:]
  -[HMDMediaSessionState volume]
  -[HMDMediaSessionState initWithSessionIdentifier:]
  -[HMDMediaSessionState setMuted:]
  -[HMDMediaSessionState isEqual:]
  -[HMDMediaSessionState shuffleState]
  -[HMDMediaSessionState setShuffleState:]
  -[HMDMediaSessionState repeatState]
  -[HMDMediaSessionState setRepeatState:]
  -[HMDMediaSessionState mediaUniqueIdentifier]
  -[HMDMediaSessionState setMediaUniqueIdentifier:]


HMDHomeManagerModel : HMDBackingStoreModelObject
 @property  NSString *controllerKeyIdentifier
 @property  NSString *primaryHomeUUID
 @property  NSDictionary *cloudZoneInformation

  // class methods
  +[HMDHomeManagerModel properties]


HMDFeatures : NSObject
  // class methods
  +[HMDFeatures enableFeatureHomeTheaterQFAForTests]
  +[HMDFeatures disableFeatureHomeTheaterQFAForTests]
  +[HMDFeatures unsetFeatureHomeTheaterQFAForTests]


HMDProcessLaunchInfoLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  long long submissionState
 @property  NSString *dataSyncState
 @property  double timeIntervalSincePreviousProcessLaunch
 @property  unsigned long millisecondsSinceLaunchToDataSyncStateGood
 @property  long long numUncommittedRecords
 @property  long long numUncommittedAndPushedRecords
 @property  NSString *processExitType
 @property  NSString *processExitReason
 @property  unsigned long processLaunchCount
 @property  unsigned long processJetsamCount
 @property  unsigned long processCrashCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDProcessLaunchInfoLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDProcessLaunchInfoLogEvent eventName]
  -[HMDProcessLaunchInfoLogEvent .cxx_destruct]
  -[HMDProcessLaunchInfoLogEvent dataSyncState]
  -[HMDProcessLaunchInfoLogEvent serializedEvent]
  -[HMDProcessLaunchInfoLogEvent processLaunchCount]
  -[HMDProcessLaunchInfoLogEvent processJetsamCount]
  -[HMDProcessLaunchInfoLogEvent processCrashCount]
  -[HMDProcessLaunchInfoLogEvent timeIntervalSincePreviousProcessLaunch]
  -[HMDProcessLaunchInfoLogEvent initWithSubmissionState:dataSyncState:timeIntervalSincePreviousProcessLaunch:millisecondsSinceLaunchToDataSyncStateGood:numUncommittedRecords:numUncommittedAndPushedRecords:processExitType:processExitReason:processLaunchCount:processJetsamCount:processCrashCount:]
  -[HMDProcessLaunchInfoLogEvent submissionState]
  -[HMDProcessLaunchInfoLogEvent millisecondsSinceLaunchToDataSyncStateGood]
  -[HMDProcessLaunchInfoLogEvent numUncommittedRecords]
  -[HMDProcessLaunchInfoLogEvent numUncommittedAndPushedRecords]
  -[HMDProcessLaunchInfoLogEvent processExitType]
  -[HMDProcessLaunchInfoLogEvent processExitReason]


HMDCHIPDataSource : HMFObject <CHIPPluginResidentStateManagerDataSource, CHIPPluginStorageDataSource, CHIPPluginUIDialogPresenterDelegate, HMFLogging, HMFTimerDelegate>
 @property  NSNotificationCenter *notificationCenter
 @property  HMFTimer *vendorMetadataRefreshTimer
 @property  HMFTimer *attestationDataRefreshTimer
 @property  HMDUIDialogPresenter *dialogPresenter
 @property  CHIPPluginResidentStateManager *chipResidentStateManager
 @property  CHIPPluginStorage *chipStorage
 @property  HMDHomeManager *homeManager
 @property  NSNumber *pairingTargetFabricIndex
 @property  NSUUID *pairingTargetHomeUUID
 @property  CHIPPluginVendorMetadataStore *vendorMetadataStore
 @property  CHIPPluginAttestationDataStore *attestationDataStore
 @property  CHIPPluginUIDialogPresenter *uiDialogPresenter
 @property  BOOL currentDevicePrimaryResident
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *allPairedHAPServerIdentifiers
 @property  NSSet *allFabricIndexes
 @property  NSNumber *currentFabricIndex
 @property  NSDictionary *keyValueStore

  // class methods
  +[HMDCHIPDataSource logCategory]

  // instance methods
  -[HMDCHIPDataSource initWithHomeManager:]
  -[HMDCHIPDataSource notificationCenter]
  -[HMDCHIPDataSource home]
  -[HMDCHIPDataSource timerDidFire:]
  -[HMDCHIPDataSource .cxx_destruct]
  -[HMDCHIPDataSource dialogPresenter]
  -[HMDCHIPDataSource homeManager]
  -[HMDCHIPDataSource setHomeManager:]
  -[HMDCHIPDataSource isCurrentDevicePrimaryResident]
  -[HMDCHIPDataSource chipStorage]
  -[HMDCHIPDataSource setChipStorage:]
  -[HMDCHIPDataSource handlePrimaryResidentUpdatedNotification:]
  -[HMDCHIPDataSource handleHomeRemovedNotification:]
  -[HMDCHIPDataSource requestUserPermissionForUnauthenticatedAccessory:withContext:queue:completionHandler:]
  -[HMDCHIPDataSource handleHomeCHIPStorageChangedNotification:]
  -[HMDCHIPDataSource handleAccessoryCHIPStorageChangedNotification:]
  -[HMDCHIPDataSource storageDataSourceForFabricWithIndex:]
  -[HMDCHIPDataSource allPairedHAPServerIdentifiers]
  -[HMDCHIPDataSource allFabricIndexes]
  -[HMDCHIPDataSource currentFabricIndex]
  -[HMDCHIPDataSource initWithHomeManager:notificationCenter:vendorMetadataRefreshTimer:attestationDataRefreshTimer:dialogPresenter:]
  -[HMDCHIPDataSource pairingTargetFabricIndex]
  -[HMDCHIPDataSource configureWithResidentStateManager:]
  -[HMDCHIPDataSource configureWithStorage:]
  -[HMDCHIPDataSource configureWithVendorMetadataStore:]
  -[HMDCHIPDataSource configureWithAttestationDataStore:]
  -[HMDCHIPDataSource configureWithUIDialogPresenter:]
  -[HMDCHIPDataSource homeWithCHIPFabricID:]
  -[HMDCHIPDataSource pairingTargetHomeUUID]
  -[HMDCHIPDataSource setPairingTargetHomeUUID:]
  -[HMDCHIPDataSource vendorMetadataStore]
  -[HMDCHIPDataSource setVendorMetadataStore:]
  -[HMDCHIPDataSource attestationDataStore]
  -[HMDCHIPDataSource setAttestationDataStore:]
  -[HMDCHIPDataSource uiDialogPresenter]
  -[HMDCHIPDataSource setUiDialogPresenter:]
  -[HMDCHIPDataSource vendorMetadataRefreshTimer]
  -[HMDCHIPDataSource attestationDataRefreshTimer]
  -[HMDCHIPDataSource chipResidentStateManager]
  -[HMDCHIPDataSource setChipResidentStateManager:]


AWDHomeKitUpdateEventTrigger : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasResultErrorCode
 @property  unsigned int resultErrorCode
 @property  BOOL hasUpdateType
 @property  int updateType
 @property  BOOL hasRequestOrigin
 @property  int requestOrigin

  // instance methods
  -[AWDHomeKitUpdateEventTrigger setTimestamp:]
  -[AWDHomeKitUpdateEventTrigger copyTo:]
  -[AWDHomeKitUpdateEventTrigger setUpdateType:]
  -[AWDHomeKitUpdateEventTrigger mergeFrom:]
  -[AWDHomeKitUpdateEventTrigger setHasTimestamp:]
  -[AWDHomeKitUpdateEventTrigger dictionaryRepresentation]
  -[AWDHomeKitUpdateEventTrigger updateType]
  -[AWDHomeKitUpdateEventTrigger hasTimestamp]
  -[AWDHomeKitUpdateEventTrigger copyWithZone:]
  -[AWDHomeKitUpdateEventTrigger timestamp]
  -[AWDHomeKitUpdateEventTrigger readFrom:]
  -[AWDHomeKitUpdateEventTrigger writeTo:]
  -[AWDHomeKitUpdateEventTrigger isEqual:]
  -[AWDHomeKitUpdateEventTrigger setResultErrorCode:]
  -[AWDHomeKitUpdateEventTrigger setHasResultErrorCode:]
  -[AWDHomeKitUpdateEventTrigger hasResultErrorCode]
  -[AWDHomeKitUpdateEventTrigger resultErrorCode]
  -[AWDHomeKitUpdateEventTrigger requestOrigin]
  -[AWDHomeKitUpdateEventTrigger setRequestOrigin:]
  -[AWDHomeKitUpdateEventTrigger setHasRequestOrigin:]
  -[AWDHomeKitUpdateEventTrigger hasRequestOrigin]
  -[AWDHomeKitUpdateEventTrigger requestOriginAsString:]
  -[AWDHomeKitUpdateEventTrigger StringAsRequestOrigin:]
  -[AWDHomeKitUpdateEventTrigger setHasUpdateType:]
  -[AWDHomeKitUpdateEventTrigger hasUpdateType]
  -[AWDHomeKitUpdateEventTrigger updateTypeAsString:]
  -[AWDHomeKitUpdateEventTrigger StringAsUpdateType:]


HMDCameraVideoParameterSelection : HMDCameraParameterSelection
 @property  HMDSupportedVideoStreamConfiguration *supportedVideoStreamConfiguration
 @property  HMDSupportedRTPConfiguration *rtpConfiguration
 @property  NSNumber *syncSource
 @property  HMDSelectedVideoParameters *selectedVideoParameters
 @property  HMDStreamingCapabilities *streamingCapabilities
 @property  NSArray *videoCodecsPreference
 @property  NSArray *h264ProfilesPreference
 @property  NSArray *h264LevelsPreference
 @property  NSArray *h264PacketizationPreference
 @property  NSArray *videoResolutionsPreference
 @property  NSArray *validVideoParameterCombinations
 @property  HMDCameraVideoTierParameters *videoTierParameters
 @property  HMDH264Profile *selectedProfile
 @property  HMDH264Level *selectedLevel
 @property  HMDPacketizationMode *selectedPacketizationMode
 @property  NSNumber *selectedFramerate
 @property  HMDCameraVideoTier *selectedVideoTier
 @property  HMDVideoCodec *selectedCodecType

  // class methods
  +[HMDCameraVideoParameterSelection logCategory]

  // instance methods
  -[HMDCameraVideoParameterSelection logIdentifier]
  -[HMDCameraVideoParameterSelection .cxx_destruct]
  -[HMDCameraVideoParameterSelection createSRTPParamters]
  -[HMDCameraVideoParameterSelection rtpConfiguration]
  -[HMDCameraVideoParameterSelection streamingCapabilities]
  -[HMDCameraVideoParameterSelection syncSource]
  -[HMDCameraVideoParameterSelection supportedVideoStreamConfiguration]
  -[HMDCameraVideoParameterSelection initWithSessionID:videoTierParameters:supportedVideoConfiguration:supportedRTPConfiguration:streamingCapabilities:]
  -[HMDCameraVideoParameterSelection _setVideoResolutionPreference]
  -[HMDCameraVideoParameterSelection selectVideoParameters]
  -[HMDCameraVideoParameterSelection _selectParametersFromCodec:profiles:levels:packetizationModes:videoAttributes:]
  -[HMDCameraVideoParameterSelection createSelectedVideoParameters]
  -[HMDCameraVideoParameterSelection createReselectedVideoParameters:]
  -[HMDCameraVideoParameterSelection _generateAllCombinations]
  -[HMDCameraVideoParameterSelection selectedVideoParameters]
  -[HMDCameraVideoParameterSelection setSelectedVideoParameters:]
  -[HMDCameraVideoParameterSelection videoCodecsPreference]
  -[HMDCameraVideoParameterSelection h264ProfilesPreference]
  -[HMDCameraVideoParameterSelection h264LevelsPreference]
  -[HMDCameraVideoParameterSelection h264PacketizationPreference]
  -[HMDCameraVideoParameterSelection videoResolutionsPreference]
  -[HMDCameraVideoParameterSelection validVideoParameterCombinations]
  -[HMDCameraVideoParameterSelection videoTierParameters]
  -[HMDCameraVideoParameterSelection selectedProfile]
  -[HMDCameraVideoParameterSelection setSelectedProfile:]
  -[HMDCameraVideoParameterSelection selectedLevel]
  -[HMDCameraVideoParameterSelection setSelectedLevel:]
  -[HMDCameraVideoParameterSelection selectedPacketizationMode]
  -[HMDCameraVideoParameterSelection setSelectedPacketizationMode:]
  -[HMDCameraVideoParameterSelection selectedFramerate]
  -[HMDCameraVideoParameterSelection setSelectedFramerate:]
  -[HMDCameraVideoParameterSelection selectedVideoTier]
  -[HMDCameraVideoParameterSelection setSelectedVideoTier:]
  -[HMDCameraVideoParameterSelection selectedCodecType]
  -[HMDCameraVideoParameterSelection setSelectedCodecType:]


HMDCameraRecordingReachabilityEventModel : HMBModel
 @property  NSNumber *reachableField
 @property  NSDate *dateOfOccurrence
 @property  BOOL reachable

  // class methods
  +[HMDCameraRecordingReachabilityEventModel hmbProperties]
  +[HMDCameraRecordingReachabilityEventModel hmbExternalRecordType]

  // instance methods
  -[HMDCameraRecordingReachabilityEventModel createEvent]
  -[HMDCameraRecordingReachabilityEventModel setReachable:]
  -[HMDCameraRecordingReachabilityEventModel reachable]


HMDMediaGroupSettingsController : NSObject <HMFLogging, HMEEventConsumer, HMDMediaGroupsAggregatorDelegate>
 @property  <HMDMediaGroupSettingsControllerDataSource> *dataSource
 @property  <HMEEventForwarder> *eventForwarder
 @property  <HMESubscriptionProviding> *subscriptionProvider
 @property  <HMELastEventStoreReadHandle> *eventStoreReadHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupSettingsController logCategory]

  // instance methods
  -[HMDMediaGroupSettingsController eventStoreReadHandle]
  -[HMDMediaGroupSettingsController didReceiveEvent:topic:]
  -[HMDMediaGroupSettingsController dataSource]
  -[HMDMediaGroupSettingsController .cxx_destruct]
  -[HMDMediaGroupSettingsController didReceiveCachedEvent:topic:source:]
  -[HMDMediaGroupSettingsController setDataSource:]
  -[HMDMediaGroupSettingsController clearCachedData]
  -[HMDMediaGroupSettingsController subscriptionProvider]
  -[HMDMediaGroupSettingsController targetAccessoriesWithDestinationIdentifiers:]
  -[HMDMediaGroupSettingsController eventForwarder]
  -[HMDMediaGroupSettingsController didStopMediaGroupsAggregator:]
  -[HMDMediaGroupSettingsController mediaGroupsAggregator:didUpdateGroup:]
  -[HMDMediaGroupSettingsController initWithDataSource:EventForwarder:subscriptionProvider:eventStoreReadHandle:]
  -[HMDMediaGroupSettingsController deriveTargetAccessoryUUIDForGroup:]
  -[HMDMediaGroupSettingsController _targetAccessoryTopicsHomeUUID:targetAccessoryUUID:]
  -[HMDMediaGroupSettingsController _processReceivedEvent:topic:home:mediaGroup:]
  -[HMDMediaGroupSettingsController _postAsMediaGroupEventsIfDifferentForHome:groupIdentifier:keyPath:setting:]
  -[HMDMediaGroupSettingsController _subscribeToHomeUUID:targetAccessoryUUID:groupIdentifier:]
  -[HMDMediaGroupSettingsController _unsubscribeToHomeUUID:targetAccessoryUUID:]
  -[HMDMediaGroupSettingsController updateRegisteredSettingsForGroup:]
  -[HMDMediaGroupSettingsController unregisterForAllSettings]
  -[HMDMediaGroupSettingsController setTargetAccessoryUUID:forGroupIdentifier:]
  -[HMDMediaGroupSettingsController targetAccessoryUUIDForGroupIdentifier:]
  -[HMDMediaGroupSettingsController groupIdentifierForTargetAccessoryUUID:]


HMDMediaPlaybackActionEvent : HMMLogEvent <HMDBiomeLogEvent, HMDMicroLocationLogEvent, HMMCoreAnalyticsLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  BOOL isPlaybackArchivePresent
 @property  NSNumber *playbackStateNumber
 @property  NSNumber *volumeNumber
 @property  NSNumber *sourceNumber
 @property  NSString *sourceClientName
 @property  NSString *clientMetricIdentifier
 @property  unsigned long numberOfMediaProfiles
 @property  NSArray *accessories
 @property  unsigned long numAccessoriesInHome
 @property  unsigned long numNonEmptyScenesInHome
 @property  NSString *playbackStateString
 @property  NSString *sourceString

  // instance methods
  -[HMDMediaPlaybackActionEvent eventName]
  -[HMDMediaPlaybackActionEvent .cxx_destruct]
  -[HMDMediaPlaybackActionEvent clientMetricIdentifier]
  -[HMDMediaPlaybackActionEvent accessories]
  -[HMDMediaPlaybackActionEvent sourceString]
  -[HMDMediaPlaybackActionEvent serializedEvent]
  -[HMDMediaPlaybackActionEvent biomeEventsRepresentationForLogObserver:]
  -[HMDMediaPlaybackActionEvent shouldTriggerMicroLocationRecordingScanForLogEventObserver:]
  -[HMDMediaPlaybackActionEvent shouldTriggerMicroLocationLocalizationScanForLogEventObserver:]
  -[HMDMediaPlaybackActionEvent microLocationMetadataForLogEventObserver:]
  -[HMDMediaPlaybackActionEvent microLocationScanTriggerTypeForLogEventObserver:]
  -[HMDMediaPlaybackActionEvent numAccessoriesInHome]
  -[HMDMediaPlaybackActionEvent numNonEmptyScenesInHome]
  -[HMDMediaPlaybackActionEvent initWithIsPlaybackArchivePresent:playbackStateNumber:volumeNumber:sourceNumber:sourceClientName:accessories:]
  -[HMDMediaPlaybackActionEvent playbackStateString]
  -[HMDMediaPlaybackActionEvent isPlaybackArchivePresent]
  -[HMDMediaPlaybackActionEvent playbackStateNumber]
  -[HMDMediaPlaybackActionEvent volumeNumber]
  -[HMDMediaPlaybackActionEvent sourceNumber]
  -[HMDMediaPlaybackActionEvent sourceClientName]
  -[HMDMediaPlaybackActionEvent numberOfMediaProfiles]


HMDCameraSignificantEventFaceClassificationModel : HMBModel
 @property  NSUUID *personManagerUUID
 @property  NSUUID *personUUID
 @property  NSString *personName
 @property  NSUUID *unassociatedFaceCropUUID

  // class methods
  +[HMDCameraSignificantEventFaceClassificationModel hmbProperties]
  +[HMDCameraSignificantEventFaceClassificationModel hmbExternalRecordType]

  // instance methods
  -[HMDCameraSignificantEventFaceClassificationModel createFaceClassification]


HMDCloudPhotosSettingObserver : HMFObject <HMFLogging>
 @property  BOOL cloudPhotosEnabled
 @property  @? accountFactory
 @property  NSNotificationCenter *notificationCenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudPhotosSettingObserver sharedInstance]
  +[HMDCloudPhotosSettingObserver logCategory]

  // instance methods
  -[HMDCloudPhotosSettingObserver notificationCenter]
  -[HMDCloudPhotosSettingObserver .cxx_destruct]
  -[HMDCloudPhotosSettingObserver init]
  -[HMDCloudPhotosSettingObserver accountFactory]
  -[HMDCloudPhotosSettingObserver handleAccountStoreDidChangeNotification:]
  -[HMDCloudPhotosSettingObserver initWithAccountFactory:notificationCenter:]
  -[HMDCloudPhotosSettingObserver fetchCloudPhotosEnabled]
  -[HMDCloudPhotosSettingObserver isCloudPhotosEnabled]
  -[HMDCloudPhotosSettingObserver setCloudPhotosEnabled:]


HMDAccessoryEventsGenerated : NSObject
  // class methods
  +[HMDAccessoryEventsGenerated topicMap]
  +[HMDAccessoryEventsGenerated allTopics]
  +[HMDAccessoryEventsGenerated indexTopicForTopic:]
  +[HMDAccessoryEventsGenerated appleMediaAccessoryTopicsForAccessoryUUID:homeUUID:]
  +[HMDAccessoryEventsGenerated homePodAccessoryTopicsForAccessoryUUID:homeUUID:]
  +[HMDAccessoryEventsGenerated endpointAccessoryTopicsForAccessoryUUID:homeUUID:]
  +[HMDAccessoryEventsGenerated forwardingTopicsForTopics:residentAccessoryUUID:homeUUID:]
  +[HMDAccessoryEventsGenerated accessoryIndexForAccessoryUUID:homeUUID:]
  +[HMDAccessoryEventsGenerated topicSuffix:isPartOfIndex:]
  +[HMDAccessoryEventsGenerated topicsRemovingAccessoryTopics:accessoryUUID:]


AWDHomeKitValue : PBCodable <NSCopying>
 @property  BOOL hasStringVal
 @property  NSString *stringVal
 @property  BOOL hasIntVal
 @property  long long intVal
 @property  BOOL hasFloatVal
 @property  float floatVal
 @property  BOOL hasDoubleVal
 @property  double doubleVal
 @property  BOOL hasBoolVal
 @property  BOOL boolVal
 @property  BOOL hasDataVal
 @property  NSData *dataVal

  // instance methods
  -[AWDHomeKitValue copyTo:]
  -[AWDHomeKitValue .cxx_destruct]
  -[AWDHomeKitValue mergeFrom:]
  -[AWDHomeKitValue dictionaryRepresentation]
  -[AWDHomeKitValue copyWithZone:]
  -[AWDHomeKitValue readFrom:]
  -[AWDHomeKitValue writeTo:]
  -[AWDHomeKitValue isEqual:]
  -[AWDHomeKitValue hasStringVal]
  -[AWDHomeKitValue setIntVal:]
  -[AWDHomeKitValue setHasIntVal:]
  -[AWDHomeKitValue hasIntVal]
  -[AWDHomeKitValue setFloatVal:]
  -[AWDHomeKitValue setHasFloatVal:]
  -[AWDHomeKitValue hasFloatVal]
  -[AWDHomeKitValue setDoubleVal:]
  -[AWDHomeKitValue setHasDoubleVal:]
  -[AWDHomeKitValue hasDoubleVal]
  -[AWDHomeKitValue setBoolVal:]
  -[AWDHomeKitValue setHasBoolVal:]
  -[AWDHomeKitValue hasBoolVal]
  -[AWDHomeKitValue hasDataVal]
  -[AWDHomeKitValue stringVal]
  -[AWDHomeKitValue setStringVal:]
  -[AWDHomeKitValue intVal]
  -[AWDHomeKitValue floatVal]
  -[AWDHomeKitValue doubleVal]
  -[AWDHomeKitValue boolVal]
  -[AWDHomeKitValue dataVal]
  -[AWDHomeKitValue setDataVal:]


HMDCameraClipsQuotaServerNotification : HMFObject
 @property  NSString *containerIdentifier
 @property  long long reason
 @property  NSString *requestID
 @property  NSString *userDSID
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[HMDCameraClipsQuotaServerNotification containerIdentifier]
  -[HMDCameraClipsQuotaServerNotification .cxx_destruct]
  -[HMDCameraClipsQuotaServerNotification initWithDictionaryRepresentation:]
  -[HMDCameraClipsQuotaServerNotification reason]
  -[HMDCameraClipsQuotaServerNotification dictionaryRepresentation]
  -[HMDCameraClipsQuotaServerNotification requestID]
  -[HMDCameraClipsQuotaServerNotification userDSID]
  -[HMDCameraClipsQuotaServerNotification initWithContainerIdentifier:reason:requestID:userDSID:]


HMDMetricsUtilities : NSObject
  // class methods
  +[HMDMetricsUtilities primaryServiceTypeForHAPAccessory:]
  +[HMDMetricsUtilities stringForSource:]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID : HMFObject <HMBLocalZoneID>
 @property  NSData *token
 @property  NSString *name
 @property  NSArray *labels
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID sharedInstance]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID labels]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID token]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID initWithToken:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID copyWithZone:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorLocalZoneID name]


HMDMPCAssistantRemoteControlDestinationFactory : NSObject <HMDMPCAssistantRemoteControlDestinationFactory>
  // instance methods
  -[HMDMPCAssistantRemoteControlDestinationFactory systemMediaApplicationDestination]
  -[HMDMPCAssistantRemoteControlDestinationFactory nowPlayingApplicationDestination]
  -[HMDMPCAssistantRemoteControlDestinationFactory resolveMPCDestination:withHashedRouteIdentifiers:audioRoutingInfo:completion:]
  -[HMDMPCAssistantRemoteControlDestinationFactory mutableCopyForMPCDestination:]


HMDMPCResolveDestinationOperation : HMFOperation <HMFLogging, HMFObject>
 @property  MPCAssistantMutableRemoteControlDestination *resolvedDestination
 @property  @? resolveDestinationCompletionBlock
 @property  <HMDMPCAssistantRemoteControlDestinationFactory> *remoteControlDestinationFactory
 @property  long long mediaApplicationDestination
 @property  BOOL forceSingleGroup
 @property  NSArray *hashedRouteIDs
 @property  NSString *mediaApplicationIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDMPCResolveDestinationOperation shortDescription]
  +[HMDMPCResolveDestinationOperation logCategory]

  // instance methods
  -[HMDMPCResolveDestinationOperation setCompletionBlock:]
  -[HMDMPCResolveDestinationOperation attributeDescriptions]
  -[HMDMPCResolveDestinationOperation privateDescription]
  -[HMDMPCResolveDestinationOperation .cxx_destruct]
  -[HMDMPCResolveDestinationOperation shortDescription]
  -[HMDMPCResolveDestinationOperation main]
  -[HMDMPCResolveDestinationOperation initWithHashedRouteIDs:mediaApplicationDestination:forceSingleGroup:completion:]
  -[HMDMPCResolveDestinationOperation initWithHashedRouteIDs:mediaApplicationDestination:forceSingleGroup:completion:remoteControlDestinationFactory:]
  -[HMDMPCResolveDestinationOperation resolvedDestination]
  -[HMDMPCResolveDestinationOperation setResolvedDestination:]
  -[HMDMPCResolveDestinationOperation hashedRouteIDs]
  -[HMDMPCResolveDestinationOperation mediaApplicationIdentifier]
  -[HMDMPCResolveDestinationOperation resolveDestinationCompletionBlock]
  -[HMDMPCResolveDestinationOperation setResolveDestinationCompletionBlock:]
  -[HMDMPCResolveDestinationOperation remoteControlDestinationFactory]
  -[HMDMPCResolveDestinationOperation setRemoteControlDestinationFactory:]
  -[HMDMPCResolveDestinationOperation mediaApplicationDestination]
  -[HMDMPCResolveDestinationOperation forceSingleGroup]


HMDCompositeSettingsCloudStartupLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCompositeSettingsCloudStartupLogEvent eventName]
  -[HMDCompositeSettingsCloudStartupLogEvent dictionaryRepresentation]
  -[HMDCompositeSettingsCloudStartupLogEvent serializedEvent]


HMDAccessoryDiagnosticsSettings : NSObject
 @property  HMDService *diagnosticsService
 @property  HAPSupportedDiagnosticsSnapshot *currentSnapshot
 @property  NSString *transport

  // instance methods
  -[HMDAccessoryDiagnosticsSettings transport]
  -[HMDAccessoryDiagnosticsSettings initWithService:]
  -[HMDAccessoryDiagnosticsSettings attributeDescriptions]
  -[HMDAccessoryDiagnosticsSettings currentSnapshot]
  -[HMDAccessoryDiagnosticsSettings .cxx_destruct]
  -[HMDAccessoryDiagnosticsSettings setCurrentSnapshot:]
  -[HMDAccessoryDiagnosticsSettings diagnosticsService]


HMDRemoteLoginMessageSender : HMFObject <HMFLogging>
 @property  NSUUID *target
 @property  HMDDevice *device
 @property  HMDAppleMediaAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginMessageSender logCategory]

  // instance methods
  -[HMDRemoteLoginMessageSender accessory]
  -[HMDRemoteLoginMessageSender logIdentifier]
  -[HMDRemoteLoginMessageSender target]
  -[HMDRemoteLoginMessageSender workQueue]
  -[HMDRemoteLoginMessageSender .cxx_destruct]
  -[HMDRemoteLoginMessageSender device]
  -[HMDRemoteLoginMessageSender messageDispatcher]
  -[HMDRemoteLoginMessageSender initWithTarget:accessory:device:workQueue:messageDispatcher:]
  -[HMDRemoteLoginMessageSender sendRemoteMessageWithName:payload:responseHandler:]


HMDHomePresenceBase : HMFObject <HMFLogging, HMDHomeMessageReceiver>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logString
 @property  NSUUID *uuid
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDNotificationRegistration *notificationRegistration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomePresenceBase logCategory]
  +[HMDHomePresenceBase hasMessageReceiverChildren]

  // instance methods
  -[HMDHomePresenceBase home]
  -[HMDHomePresenceBase logIdentifier]
  -[HMDHomePresenceBase logString]
  -[HMDHomePresenceBase workQueue]
  -[HMDHomePresenceBase setWorkQueue:]
  -[HMDHomePresenceBase uuid]
  -[HMDHomePresenceBase .cxx_destruct]
  -[HMDHomePresenceBase setUuid:]
  -[HMDHomePresenceBase messageTargetUUID]
  -[HMDHomePresenceBase messageReceiveQueue]
  -[HMDHomePresenceBase msgDispatcher]
  -[HMDHomePresenceBase setHome:]
  -[HMDHomePresenceBase setMsgDispatcher:]
  -[HMDHomePresenceBase _registerForMessages]
  -[HMDHomePresenceBase configure:messageDispatcher:]
  -[HMDHomePresenceBase handleHomeDataLoadedNotification:]
  -[HMDHomePresenceBase residentChanged]
  -[HMDHomePresenceBase notificationRegistration]
  -[HMDHomePresenceBase _initialize:]
  -[HMDHomePresenceBase setLogString:]


HMDHomeWalletDataSource : HMFObject <HMDHomeWalletDataSource>
 @property  int passCodeChangeNotificationToken
 @property  BOOL residentCapable
 @property  BOOL isWatch
 @property  long long accessoryWriteMaxRetryCount
 @property  double accessoryWriteRetryInterval
 @property  long long walletKeyColor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeWalletDataSource isWatch]
  -[HMDHomeWalletDataSource dealloc]
  -[HMDHomeWalletDataSource init]
  -[HMDHomeWalletDataSource isResidentCapable]
  -[HMDHomeWalletDataSource registerForPasscodeChangeNotificationWithQueue:callback:]
  -[HMDHomeWalletDataSource persistNumberValueToNoBackupStore:withKey:]
  -[HMDHomeWalletDataSource numberValueFromNoBackupStoreWithKey:]
  -[HMDHomeWalletDataSource showExpressEnabledUserNotificationForWalletKeyWithPassUniqueID:completion:]
  -[HMDHomeWalletDataSource canNotifyAboutExpressModeWithCompletion:]
  -[HMDHomeWalletDataSource accessoryWriteMaxRetryCount]
  -[HMDHomeWalletDataSource accessoryWriteRetryInterval]
  -[HMDHomeWalletDataSource walletKeyColor]
  -[HMDHomeWalletDataSource passCodeChangeNotificationToken]
  -[HMDHomeWalletDataSource setPassCodeChangeNotificationToken:]


HMDCameraRemoteStreamTracker : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMutableSet *currentStreamIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRemoteStreamTracker sharedTracker]
  +[HMDCameraRemoteStreamTracker logCategory]

  // instance methods
  -[HMDCameraRemoteStreamTracker workQueue]
  -[HMDCameraRemoteStreamTracker .cxx_destruct]
  -[HMDCameraRemoteStreamTracker init]
  -[HMDCameraRemoteStreamTracker startTrackingStreamSession:]
  -[HMDCameraRemoteStreamTracker stopTrackingStreamWithSessionID:]
  -[HMDCameraRemoteStreamTracker currentStreamIdentifiers]


_HMDCameraRemoteStreamTrackerAssertion : HMFObject
 @property  HMDCameraRemoteStreamTracker *streamTracker
 @property  HMDCameraStreamSessionID *streamSessionID

  // instance methods
  -[_HMDCameraRemoteStreamTrackerAssertion dealloc]
  -[_HMDCameraRemoteStreamTrackerAssertion .cxx_destruct]
  -[_HMDCameraRemoteStreamTrackerAssertion streamSessionID]
  -[_HMDCameraRemoteStreamTrackerAssertion initWithStreamTracker:streamIdentifier:]
  -[_HMDCameraRemoteStreamTrackerAssertion streamTracker]
  -[_HMDCameraRemoteStreamTrackerAssertion setStreamTracker:]


HMDCameraClipCreateClipOperation : HMDCameraClipAddModelsOperation
 @property  double targetFragmentDuration
 @property  NSDate *clipStartDate
 @property  long long quality
 @property  HMCameraClipEncryptionManager *encryptionManager

  // class methods
  +[HMDCameraClipCreateClipOperation logCategory]
  +[HMDCameraClipCreateClipOperation cameraClipOperationType]

  // instance methods
  -[HMDCameraClipCreateClipOperation quality]
  -[HMDCameraClipCreateClipOperation encryptionManager]
  -[HMDCameraClipCreateClipOperation attributeDescriptions]
  -[HMDCameraClipCreateClipOperation .cxx_destruct]
  -[HMDCameraClipCreateClipOperation targetFragmentDuration]
  -[HMDCameraClipCreateClipOperation clipStartDate]
  -[HMDCameraClipCreateClipOperation modelsToAdd]
  -[HMDCameraClipCreateClipOperation initWithClipModelID:localZone:targetFragmentDuration:clipStartDate:quality:encryptionManager:]
  -[HMDCameraClipCreateClipOperation initWithClipModelID:localZone:targetFragmentDuration:clipStartDate:quality:encryptionManager:dataSource:]


HMDSettingsControllerDependency : NSObject <HMDSettingsControllerDependency>
 @property  <HMDSettingsMetadataParserProtocol> *metadataParser
 @property  <HMDSettingsMessageHandlerProtocol> *messageHandler
 @property  <HMDSettingTransactionReceiverProtocol> *transactionReceiver
 @property  <HMDSettingsBackingStoreController> *backingStoreController
 @property  NSString *codingKey
 @property  <HMDUserSettingsInitialValueProviding> *migrationProvider
 @property  NSArray *keyPathsToPrune
 @property  NSUUID *parentIdentifier
 @property  NSString *logIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDSettingsControllerDependency parentIdentifier]
  -[HMDSettingsControllerDependency logIdentifier]
  -[HMDSettingsControllerDependency loadMetadata]
  -[HMDSettingsControllerDependency messageHandler]
  -[HMDSettingsControllerDependency .cxx_destruct]
  -[HMDSettingsControllerDependency codingKey]
  -[HMDSettingsControllerDependency transactionReceiver]
  -[HMDSettingsControllerDependency setTransactionReceiver:]
  -[HMDSettingsControllerDependency metadataParser]
  -[HMDSettingsControllerDependency backingStoreController]
  -[HMDSettingsControllerDependency createSettingRootGroupModelWithParentModelID:]
  -[HMDSettingsControllerDependency createSettingGroupModelWithName:parent:]
  -[HMDSettingsControllerDependency createSettingModelWithName:parent:type:properties:]
  -[HMDSettingsControllerDependency settingModelForUpdateWithIdentifier:parentIdentifier:value:]
  -[HMDSettingsControllerDependency settingValueForValue:type:constraintModels:error:]
  -[HMDSettingsControllerDependency migrationProvider]
  -[HMDSettingsControllerDependency keyPathsToPrune]
  -[HMDSettingsControllerDependency initWithParentUUID:logName:queue:metadataFileName:codingKey:messageHandler:migrationProvider:keyPathsToPrune:]
  -[HMDSettingsControllerDependency initWithParentUUID:logName:queue:metadataFileName:codingKey:messageHandler:migrationProvider:]
  -[HMDSettingsControllerDependency configureWithHome:messageDispatcher:backingStoreController:]


HMDCameraSnapshotMonitorEvents : HMFObject <HMFTimerDelegate, HMFLogging, HMDCharacteristicsAvailabilityListenerDelegate, HMDHomeMessageReceiver>
 @property  NSString *logIdentifier
 @property  NSUUID *uniqueIdentifier
 @property  NSSet *bulletinSnapshotCharacteristics
 @property  HMDCharacteristicsAvailabilityListener *characteristicsAvailabilityListener
 @property  NSString *clientIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraSnapshotMonitorEvents logCategory]
  +[HMDCameraSnapshotMonitorEvents hasMessageReceiverChildren]

  // instance methods
  -[HMDCameraSnapshotMonitorEvents timerDidFire:]
  -[HMDCameraSnapshotMonitorEvents logIdentifier]
  -[HMDCameraSnapshotMonitorEvents clientIdentifier]
  -[HMDCameraSnapshotMonitorEvents dealloc]
  -[HMDCameraSnapshotMonitorEvents .cxx_destruct]
  -[HMDCameraSnapshotMonitorEvents messageTargetUUID]
  -[HMDCameraSnapshotMonitorEvents uniqueIdentifier]
  -[HMDCameraSnapshotMonitorEvents messageReceiveQueue]
  -[HMDCameraSnapshotMonitorEvents registerForMessages]
  -[HMDCameraSnapshotMonitorEvents handleCharacteristicsChangedNotification:]
  -[HMDCameraSnapshotMonitorEvents listener:didUpdateAvailableCharacteristics:]
  -[HMDCameraSnapshotMonitorEvents handleCameraSettingsDidUpdateNotification:]
  -[HMDCameraSnapshotMonitorEvents handleBulletinBoardNotificationDidUpdateNotification:]
  -[HMDCameraSnapshotMonitorEvents initWithSnapshotManager:accessory:workQueue:msgDispatcher:]
  -[HMDCameraSnapshotMonitorEvents bulletinSnapshotCharacteristics]
  -[HMDCameraSnapshotMonitorEvents setBulletinSnapshotCharacteristics:]
  -[HMDCameraSnapshotMonitorEvents characteristicsAvailabilityListener]
  -[HMDCameraSnapshotMonitorEvents setCharacteristicsAvailabilityListener:]


HMDAppleMediaAccessoryMessageRouter : HMFObject <HMFLogging, HMDMessageRouter>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *identifier
 @property  <HMDAppleMediaAccessoryMessageRouterDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryMessageRouter logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryMessageRouter identifier]
  -[HMDAppleMediaAccessoryMessageRouter logIdentifier]
  -[HMDAppleMediaAccessoryMessageRouter dataSource]
  -[HMDAppleMediaAccessoryMessageRouter .cxx_destruct]
  -[HMDAppleMediaAccessoryMessageRouter setDataSource:]
  -[HMDAppleMediaAccessoryMessageRouter messageDispatcher]
  -[HMDAppleMediaAccessoryMessageRouter routeMessage:localHandler:]
  -[HMDAppleMediaAccessoryMessageRouter routeMessage:allowRemoteRelayFromPrimary:localHandler:]
  -[HMDAppleMediaAccessoryMessageRouter initWithIdentifier:messageDispatcher:]
  -[HMDAppleMediaAccessoryMessageRouter relayMessage:device:allowRemoteRelayFromPrimary:]
  -[HMDAppleMediaAccessoryMessageRouter dataSourceDeviceForMessage:]


HMDRoom : HMFObject <HMFLogging, HMDHomeMessageReceiver, HMFDumpState, NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSString *name
 @property  NSString *serializedIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDApplicationData *appData
 @property  NSUUID *uuid
 @property  NSUUID *spiClientIdentifier
 @property  HMDHome *home
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDRoom supportsSecureCoding]
  +[HMDRoom logCategory]
  +[HMDRoom hasMessageReceiverChildren]

  // instance methods
  -[HMDRoom dumpState]
  -[HMDRoom home]
  -[HMDRoom logIdentifier]
  -[HMDRoom encodeWithCoder:]
  -[HMDRoom workQueue]
  -[HMDRoom setWorkQueue:]
  -[HMDRoom attributeDescriptions]
  -[HMDRoom dealloc]
  -[HMDRoom privateDescription]
  -[HMDRoom uuid]
  -[HMDRoom .cxx_destruct]
  -[HMDRoom messageTargetUUID]
  -[HMDRoom messageDestination]
  -[HMDRoom setName:]
  -[HMDRoom name]
  -[HMDRoom messageReceiveQueue]
  -[HMDRoom msgDispatcher]
  -[HMDRoom urlString]
  -[HMDRoom initWithCoder:]
  -[HMDRoom setHome:]
  -[HMDRoom setMsgDispatcher:]
  -[HMDRoom _registerForMessages]
  -[HMDRoom setAppData:]
  -[HMDRoom appData]
  -[HMDRoom _handleRenameRequest:]
  -[HMDRoom transactionObjectUpdated:newValues:message:]
  -[HMDRoom transactionObjectRemoved:message:]
  -[HMDRoom backingStoreObjects:]
  -[HMDRoom _handleUpdateAppDataModel:message:]
  -[HMDRoom _handleRemoveAppDataModel:message:]
  -[HMDRoom spiClientIdentifier]
  -[HMDRoom configure:queue:]
  -[HMDRoom serializedIdentifier]
  -[HMDRoom initWithName:uuid:home:]
  -[HMDRoom _handleUpdateRoomModel:message:]
  -[HMDRoom assistantObject]


HMDRoomModel : HMDBackingStoreModelObject
 @property  NSString *name

  // class methods
  +[HMDRoomModel properties]


HMDAccessoryFirmwareUpdatePolicy : NSObject <HMDAccessoryFirmwareUpdatePolicy>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL status
 @property  HMDHAPAccessory *accessory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdatePolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdatePolicy accessory]
  -[HMDAccessoryFirmwareUpdatePolicy configure]
  -[HMDAccessoryFirmwareUpdatePolicy logIdentifier]
  -[HMDAccessoryFirmwareUpdatePolicy evaluate]
  -[HMDAccessoryFirmwareUpdatePolicy workQueue]
  -[HMDAccessoryFirmwareUpdatePolicy status]
  -[HMDAccessoryFirmwareUpdatePolicy notify:]
  -[HMDAccessoryFirmwareUpdatePolicy setStatus:]
  -[HMDAccessoryFirmwareUpdatePolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdatePolicy initWithAccessory:workQueue:]
  -[HMDAccessoryFirmwareUpdatePolicy evaluateAndNotify]


HMDAccessoryFirmwareUpdateAggregatePolicy : HMDAccessoryFirmwareUpdatePolicy
 @property  NSArray *policies

  // class methods
  +[HMDAccessoryFirmwareUpdateAggregatePolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateAggregatePolicy policies]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy configure]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy _registerForNotifications]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy evaluate]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy handlePolicyStatusChange:]
  -[HMDAccessoryFirmwareUpdateAggregatePolicy initWithPolicies:accessory:workQueue:]


HMDAccessoryFirmwareUpdateDenyPolicy : HMDAccessoryFirmwareUpdatePolicy
  // class methods
  +[HMDAccessoryFirmwareUpdateDenyPolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateDenyPolicy configure]


HMDAccessoryFirmwareUpdateAllowPolicy : HMDAccessoryFirmwareUpdatePolicy <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateAllowPolicy logCategory]


HMDDataStreamHAPPendingWrite : NSObject
 @property  NSData *data
 @property  @? completion
 @property  unsigned long bytesWritten

  // instance methods
  -[HMDDataStreamHAPPendingWrite completion]
  -[HMDDataStreamHAPPendingWrite isComplete]
  -[HMDDataStreamHAPPendingWrite bytesWritten]
  -[HMDDataStreamHAPPendingWrite .cxx_destruct]
  -[HMDDataStreamHAPPendingWrite setBytesWritten:]
  -[HMDDataStreamHAPPendingWrite data]
  -[HMDDataStreamHAPPendingWrite initWithData:completion:]
  -[HMDDataStreamHAPPendingWrite popNextFrameUpToMaxLength:]


HMDDataStreamHAPTransport : NSObject <HMFLogging, HMDDataStreamTransport>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  HMDCharacteristic *transportCharacteristic
 @property  HMDCharacteristic *interruptCharacteristic
 @property  NSNumber *sessionIdentifier
 @property  unsigned long maxControllerTransportMTU
 @property  HMDDataStreamFrameReader *byteReader
 @property  NSString *logIdentifier
 @property  NSString *notificationClientIdentifier
 @property  NSMutableArray *pendingWrites
 @property  BOOL isWriteInProgress
 @property  BOOL lastAccessoryRequestToSendFlag
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDDataStreamTransportDelegate> *delegate

  // class methods
  +[HMDDataStreamHAPTransport logCategory]

  // instance methods
  -[HMDDataStreamHAPTransport accessory]
  -[HMDDataStreamHAPTransport sessionIdentifier]
  -[HMDDataStreamHAPTransport connect]
  -[HMDDataStreamHAPTransport logIdentifier]
  -[HMDDataStreamHAPTransport _handleReceivedData:]
  -[HMDDataStreamHAPTransport setDelegate:]
  -[HMDDataStreamHAPTransport workQueue]
  -[HMDDataStreamHAPTransport delegate]
  -[HMDDataStreamHAPTransport dealloc]
  -[HMDDataStreamHAPTransport close]
  -[HMDDataStreamHAPTransport .cxx_destruct]
  -[HMDDataStreamHAPTransport _isRunning]
  -[HMDDataStreamHAPTransport setTrafficClass:]
  -[HMDDataStreamHAPTransport pendingWrites]
  -[HMDDataStreamHAPTransport _registerForMessages]
  -[HMDDataStreamHAPTransport _stopWithError:]
  -[HMDDataStreamHAPTransport maxControllerTransportMTU]
  -[HMDDataStreamHAPTransport _handleCharacteristicsValueUpdated:]
  -[HMDDataStreamHAPTransport sendRawFrame:completion:]
  -[HMDDataStreamHAPTransport initWithAccessory:sessionIdentifier:maxControllerTransportMTU:workQueue:logIdentifier:]
  -[HMDDataStreamHAPTransport _teardownSessionWithError:]
  -[HMDDataStreamHAPTransport _deregisterForMessages]
  -[HMDDataStreamHAPTransport _notifyDelegateDidOpen]
  -[HMDDataStreamHAPTransport _notifyDelegateDidClose]
  -[HMDDataStreamHAPTransport _notifyDelegateDidFailWithError:]
  -[HMDDataStreamHAPTransport _notifyDelegateDidReceiveFrame:]
  -[HMDDataStreamHAPTransport _getPendingWritesUpToLength:]
  -[HMDDataStreamHAPTransport _buildWriteRequestWithError:shouldForceClose:]
  -[HMDDataStreamHAPTransport _writeCharacteristicRequests:completion:]
  -[HMDDataStreamHAPTransport _doNextWriteOperation]
  -[HMDDataStreamHAPTransport _handleCompletionWithResponseTuples:]
  -[HMDDataStreamHAPTransport _stopTransportForWriteFailureError:]
  -[HMDDataStreamHAPTransport _removeAndMarkCompleteAllCompletedWrites]
  -[HMDDataStreamHAPTransport _cancelAllPendingWritesWithError:]
  -[HMDDataStreamHAPTransport _notifyWriteOperation:didCompleteWithError:]
  -[HMDDataStreamHAPTransport _handleInterruptCharacteristicValue:]
  -[HMDDataStreamHAPTransport transportCharacteristic]
  -[HMDDataStreamHAPTransport setTransportCharacteristic:]
  -[HMDDataStreamHAPTransport interruptCharacteristic]
  -[HMDDataStreamHAPTransport setInterruptCharacteristic:]
  -[HMDDataStreamHAPTransport byteReader]
  -[HMDDataStreamHAPTransport notificationClientIdentifier]
  -[HMDDataStreamHAPTransport isWriteInProgress]
  -[HMDDataStreamHAPTransport setIsWriteInProgress:]
  -[HMDDataStreamHAPTransport lastAccessoryRequestToSendFlag]
  -[HMDDataStreamHAPTransport setLastAccessoryRequestToSendFlag:]


_HMDHTTPServerClientConnection : HMFObject
 @property  HMDHTTPDevice *device
 @property  HMFHTTPClientConnection *connection
 @property  NSOperationQueue *requestOperationQueue
 @property  NSMutableArray *receiveMessageRequests
 @property  NSOperationQueue *transactionOperationQueue
 @property  BOOL connected
 @property  HMFTimer *lostConnectionTimer

  // class methods
  +[_HMDHTTPServerClientConnection shortDescription]

  // instance methods
  -[_HMDHTTPServerClientConnection isConnected]
  -[_HMDHTTPServerClientConnection .cxx_destruct]
  -[_HMDHTTPServerClientConnection connection]
  -[_HMDHTTPServerClientConnection device]
  -[_HMDHTTPServerClientConnection shortDescription]
  -[_HMDHTTPServerClientConnection invalidate]
  -[_HMDHTTPServerClientConnection initWithDevice:]
  -[_HMDHTTPServerClientConnection init]
  -[_HMDHTTPServerClientConnection setConnection:]
  -[_HMDHTTPServerClientConnection descriptionWithPointer:]
  -[_HMDHTTPServerClientConnection requestOperationQueue]
  -[_HMDHTTPServerClientConnection queueRequest:]
  -[_HMDHTTPServerClientConnection addCompletionHandler:forTransactionIdentifier:]
  -[_HMDHTTPServerClientConnection removeCompletionHandlerForTransactionIdentifier:]
  -[_HMDHTTPServerClientConnection dequeueRequest]
  -[_HMDHTTPServerClientConnection sendMessage:timeout:completionHandler:]
  -[_HMDHTTPServerClientConnection _reallySendMessage:timeout:completionHandler:]
  -[_HMDHTTPServerClientConnection receiveMessageRequests]
  -[_HMDHTTPServerClientConnection transactionOperationQueue]
  -[_HMDHTTPServerClientConnection lostConnectionTimer]


HMDHTTPServerMessageTransport : HMFObject <HMFHTTPServerDelegate, HMFTimerDelegate, HMFDumpState>
 @property  HMFHTTPServer *server
 @property  NSArray *clientConnections
 @property  <HMDHTTPServerMessageTransportDelegate> *delegate
 @property  NSUUID *identifier
 @property  NSArray *devices
 @property  NSDictionary *TXTRecord
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHTTPServerMessageTransport shortDescription]
  +[HMDHTTPServerMessageTransport maximumSupportedProtocolVersion]

  // instance methods
  -[HMDHTTPServerMessageTransport dumpState]
  -[HMDHTTPServerMessageTransport clientConnections]
  -[HMDHTTPServerMessageTransport timerDidFire:]
  -[HMDHTTPServerMessageTransport identifier]
  -[HMDHTTPServerMessageTransport setDelegate:]
  -[HMDHTTPServerMessageTransport delegate]
  -[HMDHTTPServerMessageTransport devices]
  -[HMDHTTPServerMessageTransport .cxx_destruct]
  -[HMDHTTPServerMessageTransport stop]
  -[HMDHTTPServerMessageTransport server]
  -[HMDHTTPServerMessageTransport shortDescription]
  -[HMDHTTPServerMessageTransport startWithCompletionHandler:]
  -[HMDHTTPServerMessageTransport init]
  -[HMDHTTPServerMessageTransport removeClientConnection:]
  -[HMDHTTPServerMessageTransport descriptionWithPointer:]
  -[HMDHTTPServerMessageTransport server:didStopWithError:]
  -[HMDHTTPServerMessageTransport server:shouldAcceptConnection:]
  -[HMDHTTPServerMessageTransport server:didOpenConnection:]
  -[HMDHTTPServerMessageTransport server:didCloseConnection:]
  -[HMDHTTPServerMessageTransport _stopWithError:]
  -[HMDHTTPServerMessageTransport TXTRecord]
  -[HMDHTTPServerMessageTransport setTXTRecordValue:forKey:]
  -[HMDHTTPServerMessageTransport removeTXTRecordValueForKey:]
  -[HMDHTTPServerMessageTransport addClientConnection:]
  -[HMDHTTPServerMessageTransport initWithServerIdentifier:]
  -[HMDHTTPServerMessageTransport removeAllClientConnections]
  -[HMDHTTPServerMessageTransport confirmDevice:completionHandler:]
  -[HMDHTTPServerMessageTransport sendMessage:toDevices:timeout:completionHandler:]
  -[HMDHTTPServerMessageTransport _clientConnectionForDevice:]
  -[HMDHTTPServerMessageTransport __registerReceiveMessageHandler]
  -[HMDHTTPServerMessageTransport __registerSendResponseHandler]
  -[HMDHTTPServerMessageTransport __registerSendMessageHandler]
  -[HMDHTTPServerMessageTransport __registerPingHandler]


HMDPersonModel : HMBModel
 @property  NSData *personLinksData
 @property  NSString *name
 @property  NSSet *personLinks

  // class methods
  +[HMDPersonModel hmbProperties]
  +[HMDPersonModel sentinelParentUUID]

  // instance methods
  -[HMDPersonModel initWithPerson:]
  -[HMDPersonModel personLinks]
  -[HMDPersonModel setPersonLinks:]
  -[HMDPersonModel createPerson]


HMDResidentDevice : HMFObject <HMDDeviceControllerDelegate, HMDBackingStoreObjectProtocol, HMFDumpState, HMFLogging, NSSecureCoding>
 @property  unsigned long status
 @property  NSData *rawCapabilities
 @property  HMResidentCapabilities *capabilitiesInternal
 @property  NSUUID *identifier
 @property  HMDDevice *device
 @property  BOOL enabled
 @property  BOOL reachable
 @property  long long batteryState
 @property  BOOL lowBattery
 @property  HMDHome *home
 @property  <HMDResidentDeviceManager> *residentDeviceManager
 @property  unsigned long legacyResidentCapabilities
 @property  BOOL currentDevice
 @property  NSString *name
 @property  BOOL confirmed
 @property  BOOL supportsSharedEventTriggerActivation
 @property  BOOL supportsMediaSystem
 @property  BOOL supportsMediaActions
 @property  BOOL supportsShortcutActions
 @property  BOOL supportsFirmwareUpdate
 @property  BOOL supportsResidentFirmwareUpdate
 @property  <HMResidentCapabilities> *capabilities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDResidentDevice supportsSecureCoding]
  +[HMDResidentDevice shortDescription]
  +[HMDResidentDevice logCategory]
  +[HMDResidentDevice batteryStateAsString:]
  +[HMDResidentDevice deriveUUIDFromHomeUUID:deviceUUID:]

  // instance methods
  -[HMDResidentDevice isLowBattery]
  -[HMDResidentDevice dumpState]
  -[HMDResidentDevice isBlocked]
  -[HMDResidentDevice home]
  -[HMDResidentDevice initWithModel:]
  -[HMDResidentDevice identifier]
  -[HMDResidentDevice logIdentifier]
  -[HMDResidentDevice isCurrentDevice]
  -[HMDResidentDevice isReachable]
  -[HMDResidentDevice encodeWithCoder:]
  -[HMDResidentDevice status]
  -[HMDResidentDevice dealloc]
  -[HMDResidentDevice privateDescription]
  -[HMDResidentDevice .cxx_destruct]
  -[HMDResidentDevice setEnabled:]
  -[HMDResidentDevice setReachable:]
  -[HMDResidentDevice capabilities]
  -[HMDResidentDevice setDevice:]
  -[HMDResidentDevice device]
  -[HMDResidentDevice supportsMediaActions]
  -[HMDResidentDevice setLowBattery:]
  -[HMDResidentDevice setIdentifier:]
  -[HMDResidentDevice shortDescription]
  -[HMDResidentDevice name]
  -[HMDResidentDevice isEqual:]
  -[HMDResidentDevice init]
  -[HMDResidentDevice isEnabled]
  -[HMDResidentDevice initWithCoder:]
  -[HMDResidentDevice batteryState]
  -[HMDResidentDevice setHome:]
  -[HMDResidentDevice initWithDevice:identifier:]
  -[HMDResidentDevice isConfirmed]
  -[HMDResidentDevice descriptionWithPointer:]
  -[HMDResidentDevice supportsShortcutActions]
  -[HMDResidentDevice supportsFirmwareUpdate]
  -[HMDResidentDevice supportsResidentFirmwareUpdate]
  -[HMDResidentDevice setBatteryState:]
  -[HMDResidentDevice transactionObjectUpdated:newValues:message:]
  -[HMDResidentDevice transactionObjectRemoved:message:]
  -[HMDResidentDevice modelObjectWithChangeType:version:]
  -[HMDResidentDevice configureWithHome:]
  -[HMDResidentDevice residentDeviceManager]
  -[HMDResidentDevice runtimeState]
  -[HMDResidentDevice __deviceUpdated:]
  -[HMDResidentDevice _handleResidentDeviceUpdateEnabled:]
  -[HMDResidentDevice deviceController]
  -[HMDResidentDevice deviceController:didUpdateDevice:]
  -[HMDResidentDevice capabilitiesInternal]
  -[HMDResidentDevice rawCapabilities]
  -[HMDResidentDevice __initWithDeviceController:identifier:]
  -[HMDResidentDevice legacyResidentCapabilities]
  -[HMDResidentDevice supportsSharedEventTriggerActivation]
  -[HMDResidentDevice supportsMediaSystem]
  -[HMDResidentDevice _residentDeviceModelUpdated:newValues:message:]
  -[HMDResidentDevice _handleResidentDeviceUpdateConfirmed:]
  -[HMDResidentDevice _updateRawCapabilities:]
  -[HMDResidentDevice setResidentDeviceManager:]


HMDResidentDeviceModel : HMDBackingStoreModelObject
 @property  NSString *deviceUUID
 @property  NSNumber *enabled
 @property  NSNumber *confirmed
 @property  HMDDevice *device
 @property  NSString *changeToken

  // class methods
  +[HMDResidentDeviceModel properties]


HMDAccessoryBundle : HMFObject
 @property  HMDHAPAccessory *accessory
 @property  HMFObject *context

  // instance methods
  -[HMDAccessoryBundle accessory]
  -[HMDAccessoryBundle setAccessory:]
  -[HMDAccessoryBundle .cxx_destruct]
  -[HMDAccessoryBundle setContext:]
  -[HMDAccessoryBundle context]
  -[HMDAccessoryBundle initWithAccessory:context:]


HMDAccessoryQueues : HMFObject
 @property  NSMutableDictionary *queues

  // instance methods
  -[HMDAccessoryQueues removeAccessory:]
  -[HMDAccessoryQueues .cxx_destruct]
  -[HMDAccessoryQueues init]
  -[HMDAccessoryQueues createQueue:]
  -[HMDAccessoryQueues addAccessory:toQueue:context:]
  -[HMDAccessoryQueues getContextForAccessory:]
  -[HMDAccessoryQueues popAccessoryFromQueue:]
  -[HMDAccessoryQueues _inQueue:queue:]
  -[HMDAccessoryQueues whichQueueForAccessory:]
  -[HMDAccessoryQueues countForQueue:]
  -[HMDAccessoryQueues getAccessoryForContext:fromQueue:]
  -[HMDAccessoryQueues queues]
  -[HMDAccessoryQueues setQueues:]
  -[HMDAccessoryQueues enumerateQueue:enumerateAccessory:]


HMDCameraStreamControlMessageHandlerDataSource : HMFObject <HMDCameraStreamControlMessageHandlerDataSource>
 @property  BOOL supportsReceivingRemoteCameraStream
 @property  BOOL supportsChangingVolume
 @property  BOOL supportsBidirectionalAudioForCameraStreaming
 @property  BOOL residentCapable
 @property  HMDCameraNetworkConfig *localNetworkConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraStreamControlMessageHandlerDataSource isResidentCapable]
  -[HMDCameraStreamControlMessageHandlerDataSource localNetworkConfig]
  -[HMDCameraStreamControlMessageHandlerDataSource createLocalStreamControlManagerWithSessionID:workQueue:streamSnapshotHandler:reachabilityPath:device:delegate:delegateQueue:accessory:streamManagementService:localNetworkConfig:remoteCapabilities:supportedConfigCache:streamPreference:]
  -[HMDCameraStreamControlMessageHandlerDataSource createRemoteStreamControlManagerWithSessionID:workQueue:streamSnapshotHandler:reachabilityPath:device:delegate:delegateQueue:accessory:streamManagementService:remoteCapabilities:profileUniqueIdentifier:residentMessageHandler:remoteAccessDevice:streamPreference:]
  -[HMDCameraStreamControlMessageHandlerDataSource createStreamManagerSessionWithSessionID:destinationID:streamClientConnection:streamControlManager:setupWaitPeriod:]
  -[HMDCameraStreamControlMessageHandlerDataSource createDynamicActivityAttributionPublisher]
  -[HMDCameraStreamControlMessageHandlerDataSource supportsReceivingRemoteCameraStream]
  -[HMDCameraStreamControlMessageHandlerDataSource supportsChangingVolume]
  -[HMDCameraStreamControlMessageHandlerDataSource supportsBidirectionalAudioForCameraStreaming]


HMDUpdater : HMFObject <HMFLogging>
 @property  NSBackgroundActivityScheduler *backgroundScheduler
 @property  NSString *model
 @property  NSString *targetKitUUID
 @property  NSString *targetKitURLString
 @property  NSString *targetKitDateString
 @property  NSString *currentKitUUID
 @property  NSString *platformString
 @property  NSString *buildid
 @property  BOOL internal
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUpdater sharedInstance]
  +[HMDUpdater initialize]
  +[HMDUpdater logCategory]

  // instance methods
  -[HMDUpdater backgroundScheduler]
  -[HMDUpdater setModel:]
  -[HMDUpdater logIdentifier]
  -[HMDUpdater model]
  -[HMDUpdater dealloc]
  -[HMDUpdater platformString]
  -[HMDUpdater .cxx_destruct]
  -[HMDUpdater setInternal:]
  -[HMDUpdater updateWithCompletion:]
  -[HMDUpdater _info]
  -[HMDUpdater internal]
  -[HMDUpdater init]
  -[HMDUpdater _clean]
  -[HMDUpdater _downloadURL]
  -[HMDUpdater _download]
  -[HMDUpdater _install]
  -[HMDUpdater setBackgroundScheduler:]
  -[HMDUpdater _fetchManifestWithCompletion:]
  -[HMDUpdater _handleServerResponse:withData:error:]
  -[HMDUpdater _rebuild]
  -[HMDUpdater _uninstall]
  -[HMDUpdater _reboot]
  -[HMDUpdater _clearInstalledRootUUID]
  -[HMDUpdater _executeScript:]
  -[HMDUpdater _scheduleUpdateCheck]
  -[HMDUpdater targetKitUUID]
  -[HMDUpdater setTargetKitUUID:]
  -[HMDUpdater targetKitURLString]
  -[HMDUpdater setTargetKitURLString:]
  -[HMDUpdater targetKitDateString]
  -[HMDUpdater setTargetKitDateString:]
  -[HMDUpdater currentKitUUID]
  -[HMDUpdater setCurrentKitUUID:]
  -[HMDUpdater setPlatformString:]
  -[HMDUpdater buildid]
  -[HMDUpdater setBuildid:]


HMDCameraSnapshotRemoteRelayReceiver : HMDCameraSnapshotReceiver <HMDCameraGetSnapshotProtocol, HMDCameraSnapshotReceiverProtocol, HMDCameraSnapshotIDSRelayReceiverDelegate, HMFLogging>
 @property  <HMDCameraSnapshotRemoteRelayReceiverDelegate> *delegate
 @property  HMDCameraSnapshotIDSRelayReceiver *relayReceiver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotRemoteRelayReceiver logCategory]

  // instance methods
  -[HMDCameraSnapshotRemoteRelayReceiver logIdentifier]
  -[HMDCameraSnapshotRemoteRelayReceiver setDelegate:]
  -[HMDCameraSnapshotRemoteRelayReceiver delegate]
  -[HMDCameraSnapshotRemoteRelayReceiver dealloc]
  -[HMDCameraSnapshotRemoteRelayReceiver .cxx_destruct]
  -[HMDCameraSnapshotRemoteRelayReceiver getSnapshot:]
  -[HMDCameraSnapshotRemoteRelayReceiver _getSnapshot:]
  -[HMDCameraSnapshotRemoteRelayReceiver relayReceiver]
  -[HMDCameraSnapshotRemoteRelayReceiver relayReceiverDidAcceptIDSInvitation:]
  -[HMDCameraSnapshotRemoteRelayReceiver relayReceiverIDSSessionDidStart:]
  -[HMDCameraSnapshotRemoteRelayReceiver relayReceiver:didReceiveData:error:]
  -[HMDCameraSnapshotRemoteRelayReceiver snapShotSendFailed:]
  -[HMDCameraSnapshotRemoteRelayReceiver initWithSessionID:workQueue:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:residentMessageHandler:]
  -[HMDCameraSnapshotRemoteRelayReceiver _callGettingImageDelegate:]
  -[HMDCameraSnapshotRemoteRelayReceiver _callDidSaveImageDelegateWithError:]
  -[HMDCameraSnapshotRemoteRelayReceiver setRelayReceiver:]


HMDMediaGroupsUnconfiguredParticipantOnboardingManager : NSObject <HMFLogging>
 @property  NSUUID *identifier
 @property  <HMDMediaGroupsUnconfiguredParticipantOnboardingManagerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsUnconfiguredParticipantOnboardingManager logCategory]

  // instance methods
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager identifier]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager logIdentifier]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager dataSource]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager .cxx_destruct]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager initWithIdentifier:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager setDataSource:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager handleMediaGroupsAggregateConsumerUpdatedAggregateDataNotification:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager configureWithNotificationCenter:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager queueOnboardingParticipantWithAccessoryUUID:withAssociatedGroupIdentifier:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager dequeueAvailableOnboadedParticipants]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager attemptOnboardingForParticipantAccessoryUUID:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager setQueuedAssociatedGroupIdentifier:forParticipantAccessoryUUID:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager queuedParticipantAccessoryUUIDs]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager dequeuedAssociatedGroupIdentifierForParticipantAccessoryUUID:]
  -[HMDMediaGroupsUnconfiguredParticipantOnboardingManager mediaDestinationManagerWithParticipantAccessoryUUID:]


HMDCHIPConnectedEcosystemsChangedBulletin : HMFObject
 @property  NSString *title
 @property  NSString *body
 @property  NSString *threadIdentifier
 @property  NSDate *dateOfOccurrence
 @property  NSDictionary *userInfo
 @property  BOOL timeSensitive

  // class methods
  +[HMDCHIPConnectedEcosystemsChangedBulletin localizedTitleForAddedEcosystemName:]
  +[HMDCHIPConnectedEcosystemsChangedBulletin localizedBodyForAddedEcosystemName:accessoryName:]

  // instance methods
  -[HMDCHIPConnectedEcosystemsChangedBulletin userInfo]
  -[HMDCHIPConnectedEcosystemsChangedBulletin attributeDescriptions]
  -[HMDCHIPConnectedEcosystemsChangedBulletin .cxx_destruct]
  -[HMDCHIPConnectedEcosystemsChangedBulletin title]
  -[HMDCHIPConnectedEcosystemsChangedBulletin threadIdentifier]
  -[HMDCHIPConnectedEcosystemsChangedBulletin body]
  -[HMDCHIPConnectedEcosystemsChangedBulletin dateOfOccurrence]
  -[HMDCHIPConnectedEcosystemsChangedBulletin initWithTitle:body:threadIdentifier:dateOfOccurrence:userInfo:isTimeSensitive:]
  -[HMDCHIPConnectedEcosystemsChangedBulletin initWithAddedPairing:accessory:]
  -[HMDCHIPConnectedEcosystemsChangedBulletin isTimeSensitive]


HMDCameraIDSSessionHandler : HMFObject <HMDIDSServiceDelegate, HMFLogging, HMDCameraRemoteStreamProtocol>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraStreamSessionID *sessionID
 @property  <HMDIDSService> *idsStreamService
 @property  IDSSession *idsSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraIDSSessionHandler logCategory]

  // instance methods
  -[HMDCameraIDSSessionHandler logIdentifier]
  -[HMDCameraIDSSessionHandler sessionID]
  -[HMDCameraIDSSessionHandler workQueue]
  -[HMDCameraIDSSessionHandler dealloc]
  -[HMDCameraIDSSessionHandler .cxx_destruct]
  -[HMDCameraIDSSessionHandler startKeepAlive]
  -[HMDCameraIDSSessionHandler initWithSessionID:workQueue:]
  -[HMDCameraIDSSessionHandler idsStreamService]
  -[HMDCameraIDSSessionHandler idsSession]
  -[HMDCameraIDSSessionHandler setIdsSession:]


HMDCameraSnapshotData : HMFObject
 @property  NSData *snapshotData
 @property  HMFOSTransaction *snapshotDataTrasaction
 @property  HMDVideoResolution *videoResolution

  // instance methods
  -[HMDCameraSnapshotData dealloc]
  -[HMDCameraSnapshotData .cxx_destruct]
  -[HMDCameraSnapshotData videoResolution]
  -[HMDCameraSnapshotData snapshotDataTrasaction]
  -[HMDCameraSnapshotData initWithSnapshotData:videoResolution:snapshotDataTrasaction:]
  -[HMDCameraSnapshotData initWithSnapshotFile:videoResolution:]
  -[HMDCameraSnapshotData snapshotData]


HMDKeyTransferAgentServer : HMDKeyTransferAgent <HMFTimerDelegate>
 @property  NSUUID *currentKeyUUID
 @property  NSObject<OS_dispatch_group> *broadcastGroup
 @property  NSMutableSet *broadcastNotifiedDevices
 @property  HMFExponentialBackoffTimer *broadcastUUIDTimer
 @property  BOOL broadcastFailure
 @property  @? finalCompletionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDKeyTransferAgentServer logCategory]
  +[HMDKeyTransferAgentServer isPeerAvailable]

  // instance methods
  -[HMDKeyTransferAgentServer initWithHomeManager:]
  -[HMDKeyTransferAgentServer timerDidFire:]
  -[HMDKeyTransferAgentServer dealloc]
  -[HMDKeyTransferAgentServer .cxx_destruct]
  -[HMDKeyTransferAgentServer _handleKeyTransferAgentMessage:]
  -[HMDKeyTransferAgentServer __deviceAddedToAccount:]
  -[HMDKeyTransferAgentServer __deviceUpdated:]
  -[HMDKeyTransferAgentServer __deviceRemovedFromAccount:]
  -[HMDKeyTransferAgentServer resetConfig]
  -[HMDKeyTransferAgentServer _device:addedToAccount:]
  -[HMDKeyTransferAgentServer _device:removedFromAccount:]
  -[HMDKeyTransferAgentServer beginPairingWithCompletionHandler:]
  -[HMDKeyTransferAgentServer __resetTimer:]
  -[HMDKeyTransferAgentServer _startAdvertiseUUIDWithError:]
  -[HMDKeyTransferAgentServer _endAdvertiseUUIDWithError:]
  -[HMDKeyTransferAgentServer _httpMessageTransport]
  -[HMDKeyTransferAgentServer _endPairingWithError:]
  -[HMDKeyTransferAgentServer currentKeyUUID]
  -[HMDKeyTransferAgentServer setCurrentKeyUUID:]
  -[HMDKeyTransferAgentServer broadcastGroup]
  -[HMDKeyTransferAgentServer setBroadcastGroup:]
  -[HMDKeyTransferAgentServer broadcastNotifiedDevices]
  -[HMDKeyTransferAgentServer setBroadcastNotifiedDevices:]
  -[HMDKeyTransferAgentServer broadcastUUIDTimer]
  -[HMDKeyTransferAgentServer setBroadcastUUIDTimer:]
  -[HMDKeyTransferAgentServer broadcastFailure]
  -[HMDKeyTransferAgentServer setBroadcastFailure:]
  -[HMDKeyTransferAgentServer finalCompletionHandler]
  -[HMDKeyTransferAgentServer setFinalCompletionHandler:]


HMDAppleMediaAccessoryDeleteSiriHistoryOperation : HMFOperation <HMFLogging>
 @property  AFSettingsConnection *settingsConnection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryDeleteSiriHistoryOperation logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryDeleteSiriHistoryOperation .cxx_destruct]
  -[HMDAppleMediaAccessoryDeleteSiriHistoryOperation settingsConnection]
  -[HMDAppleMediaAccessoryDeleteSiriHistoryOperation main]
  -[HMDAppleMediaAccessoryDeleteSiriHistoryOperation initWithSettingsConnection:]


HMDCameraSnapshotManager : HMFObject <HMDCameraSnapshotLocalDelegate, HMDCameraSnapshotRemoteRelayReceiverDelegate, HMDCameraSnapshotRemoteRelaySenderDelegate, HMDCameraSnapshotRemoteRelayStreamDelegate, HMDCameraSnapshotRemoteStreamReceiverDelegate, HMDCameraSnapshotRemoteStreamSenderDelegate, HMFLogging, HMFTimerDelegate, HMDCameraStreamSnapshotHandlerDelegate, HMDHomeMessageReceiver>
 @property  NSString *logIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *uniqueIdentifier
 @property  NSDictionary *encodedMostRecentSnapshot
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraSnapshotManager logCategory]
  +[HMDCameraSnapshotManager hasMessageReceiverChildren]
  +[HMDCameraSnapshotManager auditSnapshotDirectories:]

  // instance methods
  -[HMDCameraSnapshotManager timerDidFire:]
  -[HMDCameraSnapshotManager logIdentifier]
  -[HMDCameraSnapshotManager workQueue]
  -[HMDCameraSnapshotManager dealloc]
  -[HMDCameraSnapshotManager .cxx_destruct]
  -[HMDCameraSnapshotManager messageTargetUUID]
  -[HMDCameraSnapshotManager uniqueIdentifier]
  -[HMDCameraSnapshotManager messageReceiveQueue]
  -[HMDCameraSnapshotManager registerForMessages]
  -[HMDCameraSnapshotManager messageReceiverChildren]
  -[HMDCameraSnapshotManager handleCameraSettingsDidChangeNotification:]
  -[HMDCameraSnapshotManager snapshotStreamSender:didStartCaptureImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotStreamSender:didCompleteSendImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotLocal:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotManager streamSnapshotHandler:didGetNewSnapshot:]
  -[HMDCameraSnapshotManager streamSnapshotHandler:didGetLastSnapshot:]
  -[HMDCameraSnapshotManager streamSnapshotHandler:didChangeStreamSetupInProgress:]
  -[HMDCameraSnapshotManager handleAccessoryDisconnected:]
  -[HMDCameraSnapshotManager snapshotRelayStream:didStartCaptureImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotRelayStream:didCompleteSendImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotRelayReceiver:didStartGettingImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotRelayReceiver:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotManager _handleTakeRemoteSnapshotMessage:]
  -[HMDCameraSnapshotManager _handleRemoteSnapshotReceivedMessage:]
  -[HMDCameraSnapshotManager _handleTakeRemoteSnapshotFailureMessage:]
  -[HMDCameraSnapshotManager _handleTakeSnapshotMessage:]
  -[HMDCameraSnapshotManager _handleReleaseSnapshotMessage:]
  -[HMDCameraSnapshotManager _handleFillSnapshotSlotMessage:]
  -[HMDCameraSnapshotManager _handleCreateSnapshotFromBulletinContextMessage:]
  -[HMDCameraSnapshotManager snapshotRelaySender:didStartCaptureImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotRelaySender:didCompleteSendImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotRelaySender:didSaveSnapshotFile:sessionID:]
  -[HMDCameraSnapshotManager snapshotStreamReceiver:didStartGettingImage:sessionID:]
  -[HMDCameraSnapshotManager snapshotStreamReceiver:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotManager initWithAccessory:workQueue:streamSnapshotHandler:uniqueIdentifier:msgDispatcher:networkMonitor:]
  -[HMDCameraSnapshotManager initWithAccessory:workQueue:streamSnapshotHandler:uniqueIdentifier:msgDispatcher:networkMonitor:logIdentifier:imageCacheDirectory:residentMessageHandler:snapshotSlotManager:dataSource:]
  -[HMDCameraSnapshotManager takeSnapshot:]
  -[HMDCameraSnapshotManager releaseSnapshotWithSlotIdentifier:]
  -[HMDCameraSnapshotManager encodedMostRecentSnapshot]


HMDHomeWalletKeySecureElementInfo : HMFObject
 @property  NSData *deviceCredentialKey
 @property  NSString *applicationIdentifier
 @property  NSString *subCredentialIdentifier
 @property  NSString *secureElementIdentifier
 @property  NSString *pairedReaderIdentifier

  // class methods
  +[HMDHomeWalletKeySecureElementInfo shortDescription]
  +[HMDHomeWalletKeySecureElementInfo createForEasyProvisioning]
  +[HMDHomeWalletKeySecureElementInfo createForExpressConflictCheckWithSecureElementIdentifier:]

  // instance methods
  -[HMDHomeWalletKeySecureElementInfo applicationIdentifier]
  -[HMDHomeWalletKeySecureElementInfo attributeDescriptions]
  -[HMDHomeWalletKeySecureElementInfo privateDescription]
  -[HMDHomeWalletKeySecureElementInfo .cxx_destruct]
  -[HMDHomeWalletKeySecureElementInfo shortDescription]
  -[HMDHomeWalletKeySecureElementInfo copyWithZone:]
  -[HMDHomeWalletKeySecureElementInfo isEqual:]
  -[HMDHomeWalletKeySecureElementInfo secureElementIdentifier]
  -[HMDHomeWalletKeySecureElementInfo subCredentialIdentifier]
  -[HMDHomeWalletKeySecureElementInfo pairedReaderIdentifier]
  -[HMDHomeWalletKeySecureElementInfo initWithPKPass:]
  -[HMDHomeWalletKeySecureElementInfo initWithDeviceCredentialKey:applicationIdentifier:subCredentialIdentifier:secureElementIdentifier:pairedReaderIdentifier:]
  -[HMDHomeWalletKeySecureElementInfo deviceCredentialKey]


HMDMediaSystemComponent : HMFObject <NSSecureCoding, HMFDumpState, HMFLogging>
 @property  HMDMediaProfile *mediaProfile
 @property  NSUUID *uuid
 @property  HMDAccessory *accessory
 @property  HMMediaSystemRole *role
 @property  NSObject<OS_dispatch_queue> *propertyQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaSystemComponent supportsSecureCoding]
  +[HMDMediaSystemComponent logCategory]
  +[HMDMediaSystemComponent mediaSystemComponentWithDictionary:home:]
  +[HMDMediaSystemComponent accessoryForMediaSystemComponentWithDictionary:home:]

  // instance methods
  -[HMDMediaSystemComponent propertyQueue]
  -[HMDMediaSystemComponent dumpState]
  -[HMDMediaSystemComponent accessory]
  -[HMDMediaSystemComponent logIdentifier]
  -[HMDMediaSystemComponent role]
  -[HMDMediaSystemComponent encodeWithCoder:]
  -[HMDMediaSystemComponent attributeDescriptions]
  -[HMDMediaSystemComponent privateDescription]
  -[HMDMediaSystemComponent uuid]
  -[HMDMediaSystemComponent .cxx_destruct]
  -[HMDMediaSystemComponent setRole:]
  -[HMDMediaSystemComponent serialize]
  -[HMDMediaSystemComponent initWithCoder:]
  -[HMDMediaSystemComponent mediaProfile]
  -[HMDMediaSystemComponent initWithUUID:accessory:role:]


HMDResidentMeshMeshStorage : HMFObject
 @property  HMDResidentMesh *owner
 @property  HMDResidentDevice *residentDevice
 @property  NSDictionary *metrics
 @property  NSMutableSet *accessoryUUIDs
 @property  unsigned long generationCount
 @property  BOOL enabled
 @property  NSMutableDictionary *accessoryListWithLinkQuality
 @property  unsigned long nestedStatusRequests

  // instance methods
  -[HMDResidentMeshMeshStorage owner]
  -[HMDResidentMeshMeshStorage setOwner:]
  -[HMDResidentMeshMeshStorage generationCount]
  -[HMDResidentMeshMeshStorage .cxx_destruct]
  -[HMDResidentMeshMeshStorage setEnabled:]
  -[HMDResidentMeshMeshStorage enabled]
  -[HMDResidentMeshMeshStorage metrics]
  -[HMDResidentMeshMeshStorage setMetrics:]
  -[HMDResidentMeshMeshStorage setGenerationCount:]
  -[HMDResidentMeshMeshStorage _requestStatus]
  -[HMDResidentMeshMeshStorage residentDevice]
  -[HMDResidentMeshMeshStorage accessoryUUIDs]
  -[HMDResidentMeshMeshStorage initWithResidentDevice:owner:]
  -[HMDResidentMeshMeshStorage setAccessoryUUIDs:]
  -[HMDResidentMeshMeshStorage accessoryListWithLinkQuality]
  -[HMDResidentMeshMeshStorage setAccessoryListWithLinkQuality:]
  -[HMDResidentMeshMeshStorage nestedStatusRequests]
  -[HMDResidentMeshMeshStorage setNestedStatusRequests:]


HMDResidentMeshResidentStorage : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  HMDResidentMesh *owner
 @property  HMDResidentDevice *residentDevice
 @property  NSMutableSet *accessoryUUIDs
 @property  NSSet *lastSentAccessoryUUIDs
 @property  NSMutableDictionary *metrics
 @property  NSDictionary *lastSentMetrics
 @property  HMFTimer *transmitTimer
 @property  NSMutableDictionary *accessoryListWithLinkQuality
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDResidentMeshResidentStorage logCategory]

  // instance methods
  -[HMDResidentMeshResidentStorage owner]
  -[HMDResidentMeshResidentStorage setOwner:]
  -[HMDResidentMeshResidentStorage timerDidFire:]
  -[HMDResidentMeshResidentStorage logIdentifier]
  -[HMDResidentMeshResidentStorage .cxx_destruct]
  -[HMDResidentMeshResidentStorage metrics]
  -[HMDResidentMeshResidentStorage setMetrics:]
  -[HMDResidentMeshResidentStorage residentDevice]
  -[HMDResidentMeshResidentStorage accessoryUUIDs]
  -[HMDResidentMeshResidentStorage initWithResidentDevice:owner:]
  -[HMDResidentMeshResidentStorage setAccessoryUUIDs:]
  -[HMDResidentMeshResidentStorage accessoryListWithLinkQuality]
  -[HMDResidentMeshResidentStorage setAccessoryListWithLinkQuality:]
  -[HMDResidentMeshResidentStorage _addAccessoryWithLinkQuality:toList:]
  -[HMDResidentMeshResidentStorage _addAccessory:activateTimer:]
  -[HMDResidentMeshResidentStorage _removeAccessory:activateTimer:]
  -[HMDResidentMeshResidentStorage _residentDidChange]
  -[HMDResidentMeshResidentStorage _transmitAfter:]
  -[HMDResidentMeshResidentStorage _buildPayload]
  -[HMDResidentMeshResidentStorage _transmitStatus:]
  -[HMDResidentMeshResidentStorage setResidentDevice:]
  -[HMDResidentMeshResidentStorage lastSentAccessoryUUIDs]
  -[HMDResidentMeshResidentStorage setLastSentAccessoryUUIDs:]
  -[HMDResidentMeshResidentStorage lastSentMetrics]
  -[HMDResidentMeshResidentStorage setLastSentMetrics:]
  -[HMDResidentMeshResidentStorage transmitTimer]
  -[HMDResidentMeshResidentStorage setTransmitTimer:]


HMDResidentMesh : HMFObject <HMFLogging, HMFMessageReceiver, HMFTimerDelegate>
 @property  HMDHomeManager *homeManager
 @property  HMDMessageDispatcher *messageDispatcher
 @property  NSMutableArray *residents
 @property  HMDResidentMeshMeshStorage *resident
 @property  NSMutableArray *reachableAccessories
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFTimer *startupTimer
 @property  long long startupTickCount
 @property  HMFTimer *devicesChangedTimer
 @property  NSSet *primaryResidentForHomes
 @property  HMFTimer *linkQualityMonitorTimer
 @property  NSMutableDictionary *loadMetrics
 @property  NSUUID *uuid
 @property  unsigned long broadcastRate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDResidentMesh logCategory]

  // instance methods
  -[HMDResidentMesh dumpState]
  -[HMDResidentMesh _dumpState]
  -[HMDResidentMesh timerDidFire:]
  -[HMDResidentMesh workQueue]
  -[HMDResidentMesh setWorkQueue:]
  -[HMDResidentMesh dealloc]
  -[HMDResidentMesh uuid]
  -[HMDResidentMesh .cxx_destruct]
  -[HMDResidentMesh setUuid:]
  -[HMDResidentMesh messageTargetUUID]
  -[HMDResidentMesh messageDestination]
  -[HMDResidentMesh homeManager]
  -[HMDResidentMesh setHomeManager:]
  -[HMDResidentMesh messageReceiveQueue]
  -[HMDResidentMesh messageDispatcher]
  -[HMDResidentMesh dumpDebug]
  -[HMDResidentMesh setMessageDispatcher:]
  -[HMDResidentMesh balancedResidentMapForAccessories:]
  -[HMDResidentMesh __accessoryIsReachable:]
  -[HMDResidentMesh __accessoryIsNotReachable:]
  -[HMDResidentMesh __residentDeviceAddedOrUpdatedNotification:]
  -[HMDResidentMesh __residentDeviceRemovedNotification:]
  -[HMDResidentMesh __rebuildResidents:]
  -[HMDResidentMesh __deviceResidentChanged:]
  -[HMDResidentMesh __deviceIsNotReachable:]
  -[HMDResidentMesh __deviceIsReachable:]
  -[HMDResidentMesh __accessoryDidUpdateSuspendedState:]
  -[HMDResidentMesh _handleMeshUpdateRequestMessage:]
  -[HMDResidentMesh _handleMeshUpdateMessage:]
  -[HMDResidentMesh initWithHomeManager:residentEnabled:]
  -[HMDResidentMesh _updateAccessoryLinkQuality]
  -[HMDResidentMesh _handleResidentDeviceManagerAddOrUpdateNotification]
  -[HMDResidentMesh _deviceIsReachable:]
  -[HMDResidentMesh _deviceIsNotReachable:]
  -[HMDResidentMesh _buildResidentsWithElection:device:]
  -[HMDResidentMesh _meshStorageForResidentDevice:]
  -[HMDResidentMesh _meshStorageForDeviceIdentifier:]
  -[HMDResidentMesh _addMeshStorageResidentDevice:]
  -[HMDResidentMesh _residentStorageForResidentDevice:]
  -[HMDResidentMesh _addResidentStorageResidentDevice:]
  -[HMDResidentMesh _checkReachabilityWithTimerActivation:]
  -[HMDResidentMesh _addConnectivityFromDeviceToAccessory:activateTimer:]
  -[HMDResidentMesh _removeConnectivityFromDeviceToAccessory:activateTimer:]
  -[HMDResidentMesh _sendMessage:payload:target:force:responseHandler:]
  -[HMDResidentMesh bestResidentDeviceForAccessory:]
  -[HMDResidentMesh cameraRecordingAnalysisNodesForCameraAccessory:]
  -[HMDResidentMesh _residentMapForAccessories:]
  -[HMDResidentMesh deviceForAccessory:residentOrder:reachableResidents:]
  -[HMDResidentMesh _flushWorkQueue]
  -[HMDResidentMesh setMetricForCurrentDevice:withValue:isUrgent:]
  -[HMDResidentMesh _dumpDebug]
  -[HMDResidentMesh broadcastRate]
  -[HMDResidentMesh setBroadcastRate:]
  -[HMDResidentMesh residents]
  -[HMDResidentMesh setResidents:]
  -[HMDResidentMesh resident]
  -[HMDResidentMesh setResident:]
  -[HMDResidentMesh reachableAccessories]
  -[HMDResidentMesh setReachableAccessories:]
  -[HMDResidentMesh startupTimer]
  -[HMDResidentMesh startupTickCount]
  -[HMDResidentMesh setStartupTickCount:]
  -[HMDResidentMesh devicesChangedTimer]
  -[HMDResidentMesh primaryResidentForHomes]
  -[HMDResidentMesh setPrimaryResidentForHomes:]
  -[HMDResidentMesh linkQualityMonitorTimer]
  -[HMDResidentMesh loadMetrics]


HMDLastEventStoreController : NSObject
 @property  HMELastEventStore *eventStore

  // instance methods
  -[HMDLastEventStoreController eventStore]
  -[HMDLastEventStoreController .cxx_destruct]
  -[HMDLastEventStoreController didRemoveAccessory:]
  -[HMDLastEventStoreController initWithWithEventStore:]
  -[HMDLastEventStoreController didRemoveHome:]
  -[HMDLastEventStoreController didRemoveMediaSystem:]


HMDDataStreamTCPTransport : NSObject <HMFLogging, HMDDataStreamTransport>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFNetAddress *remoteAddress
 @property  <HMDNetworkConnection> *tcpConnection
 @property  HMDDataStreamFrameReader *byteReader
 @property  NSString *logIdentifier
 @property  @? connectionFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDDataStreamTransportDelegate> *delegate

  // class methods
  +[HMDDataStreamTCPTransport logCategory]

  // instance methods
  -[HMDDataStreamTCPTransport connect]
  -[HMDDataStreamTCPTransport _closeWithError:]
  -[HMDDataStreamTCPTransport logIdentifier]
  -[HMDDataStreamTCPTransport setDelegate:]
  -[HMDDataStreamTCPTransport workQueue]
  -[HMDDataStreamTCPTransport delegate]
  -[HMDDataStreamTCPTransport remoteAddress]
  -[HMDDataStreamTCPTransport dealloc]
  -[HMDDataStreamTCPTransport close]
  -[HMDDataStreamTCPTransport _start]
  -[HMDDataStreamTCPTransport .cxx_destruct]
  -[HMDDataStreamTCPTransport setTrafficClass:]
  -[HMDDataStreamTCPTransport _stopWithError:]
  -[HMDDataStreamTCPTransport tcpConnection]
  -[HMDDataStreamTCPTransport setTcpConnection:]
  -[HMDDataStreamTCPTransport sendRawFrame:completion:]
  -[HMDDataStreamTCPTransport byteReader]
  -[HMDDataStreamTCPTransport initWithAddress:port:workQueue:logIdentifier:]
  -[HMDDataStreamTCPTransport initWithAddress:port:targetQueue:logIdentifier:]
  -[HMDDataStreamTCPTransport _createTcpConnection]
  -[HMDDataStreamTCPTransport _handleReadClose]
  -[HMDDataStreamTCPTransport _registerForConnectionEvents]
  -[HMDDataStreamTCPTransport _consumeReceivedData:]
  -[HMDDataStreamTCPTransport _doReceive]
  -[HMDDataStreamTCPTransport connectionFactory]
  -[HMDDataStreamTCPTransport setConnectionFactory:]


HMDRemoteLoginBase : HMFObject <HMFLogging, HMDHomeMessageReceiver>
 @property  NSUUID *uuid
 @property  HMDAppleMediaAccessory *accessory
 @property  HMDRemoteLoginHandler *remoteLoginHandler
 @property  NSString *logString
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDRemoteLoginBase logCategory]
  +[HMDRemoteLoginBase hasMessageReceiverChildren]

  // instance methods
  -[HMDRemoteLoginBase accessory]
  -[HMDRemoteLoginBase logIdentifier]
  -[HMDRemoteLoginBase logString]
  -[HMDRemoteLoginBase workQueue]
  -[HMDRemoteLoginBase setWorkQueue:]
  -[HMDRemoteLoginBase uuid]
  -[HMDRemoteLoginBase .cxx_destruct]
  -[HMDRemoteLoginBase messageTargetUUID]
  -[HMDRemoteLoginBase messageReceiveQueue]
  -[HMDRemoteLoginBase msgDispatcher]
  -[HMDRemoteLoginBase setMsgDispatcher:]
  -[HMDRemoteLoginBase remoteLoginHandler]
  -[HMDRemoteLoginBase registerForMessages]
  -[HMDRemoteLoginBase configureWithWorkQueue:messageDispatcher:]
  -[HMDRemoteLoginBase initWithUUID:accessory:remoteLoginHandler:]


HMDMediaDestinationControllerLogEvent : HMMLogEvent
 @property  NSString *isTriggeredOnControllerDevice
 @property  NSString *userPrivilege

  // instance methods
  -[HMDMediaDestinationControllerLogEvent .cxx_destruct]
  -[HMDMediaDestinationControllerLogEvent initWithIsTriggeredOnControllerDevice:userPrivilege:]
  -[HMDMediaDestinationControllerLogEvent isTriggeredOnControllerDevice]
  -[HMDMediaDestinationControllerLogEvent userPrivilege]


HMDMediaDestinationControllerDestinationLogEvent : HMDMediaDestinationControllerLogEvent
 @property  NSString *existingDestinationType
 @property  NSString *destinationType

  // instance methods
  -[HMDMediaDestinationControllerDestinationLogEvent .cxx_destruct]
  -[HMDMediaDestinationControllerDestinationLogEvent destinationType]
  -[HMDMediaDestinationControllerDestinationLogEvent initWithExistingDestinationType:destinationType:isTriggeredOnControllerDevice:userPrivilege:]
  -[HMDMediaDestinationControllerDestinationLogEvent existingDestinationType]


HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent : HMDMediaDestinationControllerDestinationLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent eventName]
  -[HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent serializedEvent]
  -[HMDMediaDestinationControllerReceivedUpdateDestinationRequestMessageLogEvent initWithExistingDestinationType:destinationType:isTriggeredOnControllerDevice:userPrivilege:]


HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent : HMDMediaDestinationControllerDestinationLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent eventName]
  -[HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent serializedEvent]
  -[HMDMediaDestinationControllerTransactionUpdatedDestinationLogEvent initWithExistingDestinationType:destinationType:isTriggeredOnControllerDevice:userPrivilege:]


HMDMediaDestinationControllerFailureLogEvent : HMDMediaDestinationControllerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *destinationControllerErrorCode
 @property  NSString *errorCode
 @property  NSString *errorDomain

  // instance methods
  -[HMDMediaDestinationControllerFailureLogEvent errorCode]
  -[HMDMediaDestinationControllerFailureLogEvent eventName]
  -[HMDMediaDestinationControllerFailureLogEvent errorDomain]
  -[HMDMediaDestinationControllerFailureLogEvent .cxx_destruct]
  -[HMDMediaDestinationControllerFailureLogEvent serializedEvent]
  -[HMDMediaDestinationControllerFailureLogEvent initWithDestinationControllerErrorCode:errorCode:errorDomain:isTriggeredOnControllerDevice:userPrivilege:]
  -[HMDMediaDestinationControllerFailureLogEvent destinationControllerErrorCode]


HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent : HMDMediaDestinationControllerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSUUID *stagedDestinationIdentifier

  // instance methods
  -[HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent eventName]
  -[HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent .cxx_destruct]
  -[HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent serializedEvent]
  -[HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent initWithStagedDestinationIdentifier:isTriggeredOnControllerDevice:userPrivilege:]
  -[HMDMediaDestinationControllerStagedDestinationIdentifierCommittedEvent stagedDestinationIdentifier]


HMDMediaDestinationControllerDailySetDestinationEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *existingDestinationType

  // instance methods
  -[HMDMediaDestinationControllerDailySetDestinationEvent eventName]
  -[HMDMediaDestinationControllerDailySetDestinationEvent .cxx_destruct]
  -[HMDMediaDestinationControllerDailySetDestinationEvent serializedEvent]
  -[HMDMediaDestinationControllerDailySetDestinationEvent existingDestinationType]
  -[HMDMediaDestinationControllerDailySetDestinationEvent initWithExistingDestinationType:]


HMDLogEventDispatcher : HMFObject <HMMLogEventDispatching>
 @property  NSMapTable *observersByClass
 @property  NSMapTable *observersByProtocol
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  <HMMLogEventDispatchingDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLogEventDispatcher sharedInstance]
  +[HMDLogEventDispatcher initialize]

  // instance methods
  -[HMDLogEventDispatcher dataSource]
  -[HMDLogEventDispatcher clientQueue]
  -[HMDLogEventDispatcher .cxx_destruct]
  -[HMDLogEventDispatcher setDataSource:]
  -[HMDLogEventDispatcher submitLogEvent:]
  -[HMDLogEventDispatcher removeObserver:]
  -[HMDLogEventDispatcher init]
  -[HMDLogEventDispatcher submitLogEvent:error:]
  -[HMDLogEventDispatcher addObserver:forEventClass:]
  -[HMDLogEventDispatcher addObserver:forEventClasses:]
  -[HMDLogEventDispatcher addObserver:forProtocol:]
  -[HMDLogEventDispatcher _getOrCreateObserversForEventClass:]
  -[HMDLogEventDispatcher observersByClass]
  -[HMDLogEventDispatcher observersByProtocol]


HMDCameraIDSDeviceConnectionSender : HMDCameraIDSDeviceConnection <HMDCameraRemoteStreamSenderProtocol>
 @property  HMDDevice *device
 @property  AVCPacketRelay *videoPacketRelay
 @property  AVCPacketRelay *audioPacketRelay
 @property  HMFOSTransaction *packetRelayTransaction
 @property  <HMDCameraIDSDeviceConnectionSenderDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSNumber *mtu
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraIDSDeviceConnectionSender logCategory]

  // instance methods
  -[HMDCameraIDSDeviceConnectionSender logIdentifier]
  -[HMDCameraIDSDeviceConnectionSender setDelegate:]
  -[HMDCameraIDSDeviceConnectionSender mtu]
  -[HMDCameraIDSDeviceConnectionSender delegate]
  -[HMDCameraIDSDeviceConnectionSender dealloc]
  -[HMDCameraIDSDeviceConnectionSender .cxx_destruct]
  -[HMDCameraIDSDeviceConnectionSender delegateQueue]
  -[HMDCameraIDSDeviceConnectionSender device]
  -[HMDCameraIDSDeviceConnectionSender openRelaySession]
  -[HMDCameraIDSDeviceConnectionSender startPacketRelayWithVideoSocket:videoNetworkConfig:cameraVideoSSRC:audioSocket:audioNetworkConfig:cameraAudioSSRC:]
  -[HMDCameraIDSDeviceConnectionSender startPacketRelayWithIDSDeviceSession:cameraVideoSSRC:cameraAudioSSRC:]
  -[HMDCameraIDSDeviceConnectionSender _startPacketRelayWithVideoSocket:videoNetworkConfig:cameraVideoSSRC:audioSocket:audioNetworkConfig:cameraAudioSSRC:]
  -[HMDCameraIDSDeviceConnectionSender _callSessionEndedWithError:]
  -[HMDCameraIDSDeviceConnectionSender packetRelayTransaction]
  -[HMDCameraIDSDeviceConnectionSender setPacketRelayTransaction:]
  -[HMDCameraIDSDeviceConnectionSender _socketOpenedWithError:]
  -[HMDCameraIDSDeviceConnectionSender initWithSessionID:workQueue:device:delegate:delegateQueue:]
  -[HMDCameraIDSDeviceConnectionSender initWithSessionID:workQueue:device:delegate:delegateQueue:idsProxyStreamService:]
  -[HMDCameraIDSDeviceConnectionSender _startPacketRelayWithIDSDeviceSession:cameraVideoSSRC:cameraAudioSSRC:]
  -[HMDCameraIDSDeviceConnectionSender _startVideoPacketRelay:ipAddress:port:]
  -[HMDCameraIDSDeviceConnectionSender _startAudioPacketRelay:ipAddress:port:]
  -[HMDCameraIDSDeviceConnectionSender videoPacketRelay]
  -[HMDCameraIDSDeviceConnectionSender setVideoPacketRelay:]
  -[HMDCameraIDSDeviceConnectionSender audioPacketRelay]
  -[HMDCameraIDSDeviceConnectionSender setAudioPacketRelay:]


HMDConfigurationResetLogEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDConfigurationResetLogEvent configurationReset]

  // instance methods
  -[HMDConfigurationResetLogEvent AWDMessageType]
  -[HMDConfigurationResetLogEvent metricForAWD]


HMDCloudShareParticipantsManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMBCloudZone *cloudZone
 @property  HMDHome *home
 @property  <HMDCloudShareParticipantsManagerDataSource> *dataSource
 @property  <HMDCloudShareParticipantsManagerDelegate> *delegate
 @property  NSSet *participatingUsers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudShareParticipantsManager logCategory]

  // instance methods
  -[HMDCloudShareParticipantsManager configure]
  -[HMDCloudShareParticipantsManager home]
  -[HMDCloudShareParticipantsManager logIdentifier]
  -[HMDCloudShareParticipantsManager dataSource]
  -[HMDCloudShareParticipantsManager setDelegate:]
  -[HMDCloudShareParticipantsManager clearParticipants]
  -[HMDCloudShareParticipantsManager workQueue]
  -[HMDCloudShareParticipantsManager delegate]
  -[HMDCloudShareParticipantsManager .cxx_destruct]
  -[HMDCloudShareParticipantsManager cloudZone]
  -[HMDCloudShareParticipantsManager setDataSource:]
  -[HMDCloudShareParticipantsManager setHome:]
  -[HMDCloudShareParticipantsManager handleHomeUserRemovedNotification:]
  -[HMDCloudShareParticipantsManager updateShareParticipants]
  -[HMDCloudShareParticipantsManager handleHomeUserAddedNotification:]
  -[HMDCloudShareParticipantsManager initWithQueue:cloudZone:home:]
  -[HMDCloudShareParticipantsManager participatingUsers]
  -[HMDCloudShareParticipantsManager inviteUser:usingDevice:]
  -[HMDCloudShareParticipantsManager isAcceptedParticipatingUser:]
  -[HMDCloudShareParticipantsManager _inviteUser:usingDevice:]
  -[HMDCloudShareParticipantsManager fetchInvitationToUser:shouldGrantWriteAccess:]
  -[HMDCloudShareParticipantsManager fetchInvitationContextForUser:shouldGrantWriteAccess:]
  -[HMDCloudShareParticipantsManager _untrustedInvitationContextForUser:shouldGrantWriteAccess:]


HMDAccessoryFirmwareUpdatePresencePolicy : HMDAccessoryFirmwareUpdatePolicy <NSCopying>
 @property  HMDHome *home
 @property  BOOL presenceNeeded

  // class methods
  +[HMDAccessoryFirmwareUpdatePresencePolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdatePresencePolicy configure]
  -[HMDAccessoryFirmwareUpdatePresencePolicy home]
  -[HMDAccessoryFirmwareUpdatePresencePolicy evaluate]
  -[HMDAccessoryFirmwareUpdatePresencePolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdatePresencePolicy registerForNotifications]
  -[HMDAccessoryFirmwareUpdatePresencePolicy copyWithZone:]
  -[HMDAccessoryFirmwareUpdatePresencePolicy isEqual:]
  -[HMDAccessoryFirmwareUpdatePresencePolicy handlePresenceChange:]
  -[HMDAccessoryFirmwareUpdatePresencePolicy initWithAccessory:presenceNeeded:workQueue:]
  -[HMDAccessoryFirmwareUpdatePresencePolicy presenceNeeded]


HMDMediaGroupsAggregator : HMFObject <HMDMediaSystemsAggregateDataGeneratorDataSource, HMDMediaRoomGroupsDataGeneratorDataSource, HMDTimerProvider, HMFLogging, HMFTimerDelegate, HMEEventConsumer, HMDMediaGroupsAggregatorMessengerDelegate>
 @property  <HMDTimerProvider> *timerProvider
 @property  NSUUID *identifier
 @property  <HMEEventForwarder> *eventForwarder
 @property  <HMESubscriptionProviding> *subscriptionProvider
 @property  <HMELastEventStoreReadHandle> *eventStoreReadHandle
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  HMFTimer *warmUpTimer
 @property  HMDMediaGroupsAggregateData *aggregateData
 @property  NSArray *generators
 @property  HMDMediaGroupsLocalDataStorage *groupLocalDataStorage
 @property  <HMDMediaGroupsAggregatorDataSource> *dataSource
 @property  <HMDMediaGroupsAggregatorDelegate> *delegate
 @property  HMDMediaGroupsAggregatorMessenger *messenger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsAggregator logCategory]

  // instance methods
  -[HMDMediaGroupsAggregator eventSource]
  -[HMDMediaGroupsAggregator eventStoreReadHandle]
  -[HMDMediaGroupsAggregator didReceiveEvent:topic:]
  -[HMDMediaGroupsAggregator groups]
  -[HMDMediaGroupsAggregator timerDidFire:]
  -[HMDMediaGroupsAggregator setDestination:]
  -[HMDMediaGroupsAggregator identifier]
  -[HMDMediaGroupsAggregator logIdentifier]
  -[HMDMediaGroupsAggregator dataSource]
  -[HMDMediaGroupsAggregator setDelegate:]
  -[HMDMediaGroupsAggregator delegate]
  -[HMDMediaGroupsAggregator run]
  -[HMDMediaGroupsAggregator isRunning]
  -[HMDMediaGroupsAggregator .cxx_destruct]
  -[HMDMediaGroupsAggregator didReceiveCachedEvent:topic:source:]
  -[HMDMediaGroupsAggregator messenger]
  -[HMDMediaGroupsAggregator destinations]
  -[HMDMediaGroupsAggregator updateGroup:]
  -[HMDMediaGroupsAggregator timerProvider]
  -[HMDMediaGroupsAggregator stop]
  -[HMDMediaGroupsAggregator registerForEvents]
  -[HMDMediaGroupsAggregator setDataSource:]
  -[HMDMediaGroupsAggregator clearCachedData]
  -[HMDMediaGroupsAggregator subscriptionProvider]
  -[HMDMediaGroupsAggregator generators]
  -[HMDMediaGroupsAggregator timerWithTimeInterval:options:]
  -[HMDMediaGroupsAggregator featuresDataSource]
  -[HMDMediaGroupsAggregator eventForwarder]
  -[HMDMediaGroupsAggregator appleMediaAccessories]
  -[HMDMediaGroupsAggregator handleHomeAddedAccessoryNotification:]
  -[HMDMediaGroupsAggregator handlePrimaryResidentIsCurrentDeviceChangeNotification:]
  -[HMDMediaGroupsAggregator setDestinationControllerData:]
  -[HMDMediaGroupsAggregator updateGroup:participantAccessoryUUIDs:]
  -[HMDMediaGroupsAggregator removeGroupWithIdentifier:]
  -[HMDMediaGroupsAggregator handleHomeRemovedAccessoryNotification:]
  -[HMDMediaGroupsAggregator handleAccessoryChangedRoomNotification:]
  -[HMDMediaGroupsAggregator roomForAllDestinationParentIdentifiers:mediaSystemsAggregateDataGenerator:]
  -[HMDMediaGroupsAggregator roomsForMediaRoomGroupsDataGenerator:]
  -[HMDMediaGroupsAggregator roomForDestination:mediaRoomGroupsDataGenerator:]
  -[HMDMediaGroupsAggregator didReceiveUpdateAssociatedGroupRequestMessage:withGroupIdentifier:associatedGroupIdentifier:messenger:]
  -[HMDMediaGroupsAggregator initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:]
  -[HMDMediaGroupsAggregator initWithIdentifier:messenger:eventForwarder:subscriptionProvider:eventStoreReadHandle:groupsLocalDataStorage:timerProvider:featuresDataSource:]
  -[HMDMediaGroupsAggregator createGenerators]
  -[HMDMediaGroupsAggregator configureWithHome:messageDispatcher:notificationCenter:primaryResidentChangeMonitor:]
  -[HMDMediaGroupsAggregator registerForNotificationsWithHome:notificationCenter:primaryResidentChangeMonitor:]
  -[HMDMediaGroupsAggregator refreshRunningStateUsingPrimaryResidentChangeMonitor:]
  -[HMDMediaGroupsAggregator registerForEventsForAccessory:]
  -[HMDMediaGroupsAggregator unregisterForAllEvents]
  -[HMDMediaGroupsAggregator unregisterForEventsForAccessory:]
  -[HMDMediaGroupsAggregator refreshAggregateData]
  -[HMDMediaGroupsAggregator notifyOfUpdateAggregateData:]
  -[HMDMediaGroupsAggregator notifyOfStoppedState]
  -[HMDMediaGroupsAggregator forwardAggregateData]
  -[HMDMediaGroupsAggregator shouldWarmUp]
  -[HMDMediaGroupsAggregator aggregateDataTopic]
  -[HMDMediaGroupsAggregator participantDataTopicForAccessory:]
  -[HMDMediaGroupsAggregator startWarmUpTimer]
  -[HMDMediaGroupsAggregator stopWarmUpTimer]
  -[HMDMediaGroupsAggregator removeDestinationWithParentIdentifier:]
  -[HMDMediaGroupsAggregator removeDestinationControllerDataWithParentIdentifier:]
  -[HMDMediaGroupsAggregator localGroupWithIdentifier:]
  -[HMDMediaGroupsAggregator destinationControllersData]
  -[HMDMediaGroupsAggregator clearCachedDataForParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregator participantAccessoryUUIDFromTopic:]
  -[HMDMediaGroupsAggregator handleParticipantDataEvent:accessoryUUID:]
  -[HMDMediaGroupsAggregator updateAssociatedGroupIdentifier:forGroupIdentifier:error:]
  -[HMDMediaGroupsAggregator handleParticipantDestinationControllerEventData:]
  -[HMDMediaGroupsAggregator handleParticipantDestinationEventData:backedUpGroupsEventData:participantAccessoryUUID:]
  -[HMDMediaGroupsAggregator setTimerProvider:]
  -[HMDMediaGroupsAggregator warmUpTimer]
  -[HMDMediaGroupsAggregator setWarmUpTimer:]
  -[HMDMediaGroupsAggregator aggregateData]
  -[HMDMediaGroupsAggregator setAggregateData:]
  -[HMDMediaGroupsAggregator groupLocalDataStorage]
  -[HMDMediaGroupsAggregator setGroupLocalDataStorage:]


HMDVendorModelCollection : HMFObject
 @property  NSMutableSet *entries
 @property  HMDVendorModelEntry *defaultEntry

  // instance methods
  -[HMDVendorModelCollection addEntry:]
  -[HMDVendorModelCollection entries]
  -[HMDVendorModelCollection attributeDescriptions]
  -[HMDVendorModelCollection .cxx_destruct]
  -[HMDVendorModelCollection isEqual:]
  -[HMDVendorModelCollection init]
  -[HMDVendorModelCollection lookupModel:]
  -[HMDVendorModelCollection lookupProductData:]
  -[HMDVendorModelCollection defaultEntry]
  -[HMDVendorModelCollection setDefaultEntry:]


HMDCharacteristicThresholdRangeEvent : HMDCharacteristicEventBase <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSNumber *min
 @property  NSNumber *max
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCharacteristicThresholdRangeEvent supportsSecureCoding]
  +[HMDCharacteristicThresholdRangeEvent logCategory]

  // instance methods
  -[HMDCharacteristicThresholdRangeEvent min]
  -[HMDCharacteristicThresholdRangeEvent encodeWithCoder:]
  -[HMDCharacteristicThresholdRangeEvent .cxx_destruct]
  -[HMDCharacteristicThresholdRangeEvent max]
  -[HMDCharacteristicThresholdRangeEvent setMax:]
  -[HMDCharacteristicThresholdRangeEvent initWithCoder:]
  -[HMDCharacteristicThresholdRangeEvent setMin:]
  -[HMDCharacteristicThresholdRangeEvent createPayload]
  -[HMDCharacteristicThresholdRangeEvent initWithModel:home:]
  -[HMDCharacteristicThresholdRangeEvent _transactionObjectUpdated:newValues:message:]
  -[HMDCharacteristicThresholdRangeEvent _transactionObjectRemoved:message:]
  -[HMDCharacteristicThresholdRangeEvent modelObjectWithChangeType:]
  -[HMDCharacteristicThresholdRangeEvent emptyModelObject]
  -[HMDCharacteristicThresholdRangeEvent _handleUpdateRequest:]
  -[HMDCharacteristicThresholdRangeEvent analyticsTriggerEventData]
  -[HMDCharacteristicThresholdRangeEvent _evaluateNewValue:]
  -[HMDCharacteristicThresholdRangeEvent _isValueInRange:]


HMDCharacteristicThresholdRangeEventModel : HMDCharacteristicEventBaseModel
 @property  NSNumber *min
 @property  NSNumber *max

  // class methods
  +[HMDCharacteristicThresholdRangeEventModel properties]
  +[HMDCharacteristicThresholdRangeEventModel eventModelWithDictionary:home:eventTriggerUUID:message:checkForSupport:]


HMDMediaGroupsAggregateBackupMessageTimer : NSObject <HMDTimerProvider, HMFTimerDelegate>
 @property  <HMDTimerProvider> *timerProvider
 @property  HMFTimer *timer
 @property  NSUUID *currentMessageIdentifier
 @property  unsigned long attemptCount
 @property  <HMDMediaGroupsAggregateBackupMessageTimerDelegate> *delegate
 @property  NSUUID *participantAccessoryUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsAggregateBackupMessageTimer logCategory]

  // instance methods
  -[HMDMediaGroupsAggregateBackupMessageTimer setAttemptCount:]
  -[HMDMediaGroupsAggregateBackupMessageTimer timerDidFire:]
  -[HMDMediaGroupsAggregateBackupMessageTimer attemptCount]
  -[HMDMediaGroupsAggregateBackupMessageTimer logIdentifier]
  -[HMDMediaGroupsAggregateBackupMessageTimer setDelegate:]
  -[HMDMediaGroupsAggregateBackupMessageTimer delegate]
  -[HMDMediaGroupsAggregateBackupMessageTimer .cxx_destruct]
  -[HMDMediaGroupsAggregateBackupMessageTimer setTimer:]
  -[HMDMediaGroupsAggregateBackupMessageTimer timerProvider]
  -[HMDMediaGroupsAggregateBackupMessageTimer timer]
  -[HMDMediaGroupsAggregateBackupMessageTimer timerWithTimeInterval:options:]
  -[HMDMediaGroupsAggregateBackupMessageTimer setTimerProvider:]
  -[HMDMediaGroupsAggregateBackupMessageTimer initWithParticipantAccessoryUUID:]
  -[HMDMediaGroupsAggregateBackupMessageTimer initWithParticipantAccessoryUUID:timerProvider:]
  -[HMDMediaGroupsAggregateBackupMessageTimer markAttemptWithMessageIdentifier:]
  -[HMDMediaGroupsAggregateBackupMessageTimer startRetryTimer]
  -[HMDMediaGroupsAggregateBackupMessageTimer nextTimeInterval]
  -[HMDMediaGroupsAggregateBackupMessageTimer participantAccessoryUUID]
  -[HMDMediaGroupsAggregateBackupMessageTimer currentMessageIdentifier]
  -[HMDMediaGroupsAggregateBackupMessageTimer setCurrentMessageIdentifier:]


HMDRemoteLoginAnisetteDataProviderBridge : HMFObject <HMFLogging, HMDHomeMessageReceiver, NSSecureCoding>
 @property  NSUUID *uuid
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDRemoteLoginMessageSender *remoteMessageSender
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDRemoteLoginAnisetteDataProviderBridge supportsSecureCoding]
  +[HMDRemoteLoginAnisetteDataProviderBridge logCategory]
  +[HMDRemoteLoginAnisetteDataProviderBridge hasMessageReceiverChildren]

  // instance methods
  -[HMDRemoteLoginAnisetteDataProviderBridge logIdentifier]
  -[HMDRemoteLoginAnisetteDataProviderBridge encodeWithCoder:]
  -[HMDRemoteLoginAnisetteDataProviderBridge workQueue]
  -[HMDRemoteLoginAnisetteDataProviderBridge setWorkQueue:]
  -[HMDRemoteLoginAnisetteDataProviderBridge uuid]
  -[HMDRemoteLoginAnisetteDataProviderBridge .cxx_destruct]
  -[HMDRemoteLoginAnisetteDataProviderBridge messageTargetUUID]
  -[HMDRemoteLoginAnisetteDataProviderBridge initWithUUID:]
  -[HMDRemoteLoginAnisetteDataProviderBridge messageReceiveQueue]
  -[HMDRemoteLoginAnisetteDataProviderBridge msgDispatcher]
  -[HMDRemoteLoginAnisetteDataProviderBridge initWithCoder:]
  -[HMDRemoteLoginAnisetteDataProviderBridge setMsgDispatcher:]
  -[HMDRemoteLoginAnisetteDataProviderBridge registerForMessages]
  -[HMDRemoteLoginAnisetteDataProviderBridge remoteMessageSender]
  -[HMDRemoteLoginAnisetteDataProviderBridge setRemoteMessageSender:]
  -[HMDRemoteLoginAnisetteDataProviderBridge configureWithWorkQueue:messageDispatcher:remoteMessageSender:]


HMDAppleAccountManager : HMFObject <HMDAPSConnectionDelegate, HMDAccountManager, HMFLogging, HMFMessageReceiver, HMFTimerDelegate, IDSAccountDelegate, IDSAccountRegistrationDelegate, HMDIDSServiceDelegate>
 @property  <HMDAPSConnection> *pushConnection
 @property  HMFExponentialBackoffTimer *accountChangeBackoffTimer
 @property  HMFTimer *devicesChangeBackoffTimer
 @property  BOOL monitoring
 @property  int rapportIdentitiesChangedNotificationToken
 @property  BOOL rapportIdentitiesChangedNotificationTokenValid
 @property  NSData *pendingPushToken
 @property  <HMDIDSService> *service
 @property  HMDIDSActivityMonitorBroadcaster *activityBroadcaster
 @property  HMDAccount *account
 @property  HMDAppleAccountContext *accountContext
 @property  HMDBackingStore *backingStore
 @property  HMDCloudCache *cloudCache
 @property  HMDDevice *device
 @property  HMDAppleAccountSettings *settings
 @property  ACAccountStore *accountStore
 @property  BOOL loggedIn
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAppleAccountManager sharedManager]
  +[HMDAppleAccountManager logCategory]

  // instance methods
  -[HMDAppleAccountManager account]
  -[HMDAppleAccountManager service:devicesChanged:]
  -[HMDAppleAccountManager timerDidFire:]
  -[HMDAppleAccountManager isMonitoring]
  -[HMDAppleAccountManager connection:didReceivePublicToken:]
  -[HMDAppleAccountManager accountStore]
  -[HMDAppleAccountManager setAccount:]
  -[HMDAppleAccountManager pushConnection]
  -[HMDAppleAccountManager setMonitoring:]
  -[HMDAppleAccountManager .cxx_destruct]
  -[HMDAppleAccountManager messageTargetUUID]
  -[HMDAppleAccountManager stop]
  -[HMDAppleAccountManager settings]
  -[HMDAppleAccountManager service]
  -[HMDAppleAccountManager device]
  -[HMDAppleAccountManager account:aliasesChanged:]
  -[HMDAppleAccountManager account:isActiveChanged:]
  -[HMDAppleAccountManager cloudCache]
  -[HMDAppleAccountManager backingStore]
  -[HMDAppleAccountManager start]
  -[HMDAppleAccountManager messageReceiveQueue]
  -[HMDAppleAccountManager service:activeAccountsChanged:]
  -[HMDAppleAccountManager init]
  -[HMDAppleAccountManager activityBroadcaster]
  -[HMDAppleAccountManager setCloudCache:]
  -[HMDAppleAccountManager primaryHandleForAccount:]
  -[HMDAppleAccountManager shouldCacheAccount:]
  -[HMDAppleAccountManager shouldSyncAccount:]
  -[HMDAppleAccountManager shouldSyncDevice:]
  -[HMDAppleAccountManager shouldAccount:pushbackModel:actions:]
  -[HMDAppleAccountManager shouldDevice:processModel:actions:]
  -[HMDAppleAccountManager initWithIDSService:activityBroadcaster:]
  -[HMDAppleAccountManager initWithIDSService:activityBroadcaster:queue:pushConnection:]
  -[HMDAppleAccountManager _registerForRapportNotifications]
  -[HMDAppleAccountManager _deregisterForRapportNotifications]
  -[HMDAppleAccountManager configureWithBackingStore:]
  -[HMDAppleAccountManager __localDataReset:]
  -[HMDAppleAccountManager __handleModifiedAccount:]
  -[HMDAppleAccountManager __handleRemovedAccount:]
  -[HMDAppleAccountManager __handleUpdatedName:]
  -[HMDAppleAccountManager __handleMigrationUpdated:]
  -[HMDAppleAccountManager accountContext]
  -[HMDAppleAccountManager __updateMergeIDOnAccount]
  -[HMDAppleAccountManager updateSenderCorrelationIdentifier:]
  -[HMDAppleAccountManager __deviceAddedToCurrentAccount:]
  -[HMDAppleAccountManager __deviceRemovedFromCurrentAccount:]
  -[HMDAppleAccountManager isModelCurrentAccount:]
  -[HMDAppleAccountManager processAccountModel:message:]
  -[HMDAppleAccountManager processAccountModelRemove:message:]
  -[HMDAppleAccountManager _updatePushToken:]
  -[HMDAppleAccountManager isLoggedInToPrimaryAccount]
  -[HMDAppleAccountManager accountChangeBackoffTimer]
  -[HMDAppleAccountManager devicesChangeBackoffTimer]
  -[HMDAppleAccountManager rapportIdentitiesChangedNotificationToken]
  -[HMDAppleAccountManager setRapportIdentitiesChangedNotificationToken:]
  -[HMDAppleAccountManager isRapportIdentitiesChangedNotificationTokenValid]
  -[HMDAppleAccountManager setRapportIdentitiesChangedNotificationTokenValid:]
  -[HMDAppleAccountManager pendingPushToken]
  -[HMDAppleAccountManager setPendingPushToken:]


HMDCameraRecordingBulkSendSessionInitiator : HMFObject <HMFLogging, HMDCameraRecordingBulkSendListenerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  BOOL waitingForAccessory
 @property  HMDCameraRecordingBulkSendListener *currentListener
 @property  BOOL sessionOpenInProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingBulkSendSessionInitiator logCategory]

  // instance methods
  -[HMDCameraRecordingBulkSendSessionInitiator accessory]
  -[HMDCameraRecordingBulkSendSessionInitiator configure]
  -[HMDCameraRecordingBulkSendSessionInitiator logIdentifier]
  -[HMDCameraRecordingBulkSendSessionInitiator setAccessory:]
  -[HMDCameraRecordingBulkSendSessionInitiator workQueue]
  -[HMDCameraRecordingBulkSendSessionInitiator .cxx_destruct]
  -[HMDCameraRecordingBulkSendSessionInitiator stop]
  -[HMDCameraRecordingBulkSendSessionInitiator isSessionOpenInProgress]
  -[HMDCameraRecordingBulkSendSessionInitiator initWithWorkQueue:accessory:]
  -[HMDCameraRecordingBulkSendSessionInitiator handleAccessoryDoesSupportBulkSendDataStreamNotification:]
  -[HMDCameraRecordingBulkSendSessionInitiator listenerDidReceiveDataStreamStart:]
  -[HMDCameraRecordingBulkSendSessionInitiator listenerDidReceiveDataStreamClose:]
  -[HMDCameraRecordingBulkSendSessionInitiator openNewSessionWithReason:completion:]
  -[HMDCameraRecordingBulkSendSessionInitiator _registerBulkSendListener]
  -[HMDCameraRecordingBulkSendSessionInitiator isWaitingForAccessory]
  -[HMDCameraRecordingBulkSendSessionInitiator setWaitingForAccessory:]
  -[HMDCameraRecordingBulkSendSessionInitiator currentListener]
  -[HMDCameraRecordingBulkSendSessionInitiator setCurrentListener:]


HMDHomeAccessCodeModel : HMDBackingStoreModelObject
 @property  NSString *label
 @property  NSString *value

  // class methods
  +[HMDHomeAccessCodeModel properties]
  +[HMDHomeAccessCodeModel modelUUIDForHomeUUID:accessCodeValue:]

  // instance methods
  -[HMDHomeAccessCodeModel initWithHomeUUID:value:label:]


HMDCameraClipOperationDataSource : HMFObject <HMDCameraClipOperationDataSource>
 @property  double operationTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraClipOperationDataSource operationTimeout]
  -[HMDCameraClipOperationDataSource timerWithTimeInterval:options:]
  -[HMDCameraClipOperationDataSource appendData:toStreamingAssetAppendContext:completion:]
  -[HMDCameraClipOperationDataSource submitOperationEvent:]


HMDAssistantIntent : NSObject <HMFLogging>
 @property  NSArray *homeKitObjects
 @property  INControlHomeIntent *intent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantIntent logCategory]

  // instance methods
  -[HMDAssistantIntent setIntent:]
  -[HMDAssistantIntent initWithIntent:]
  -[HMDAssistantIntent .cxx_destruct]
  -[HMDAssistantIntent intent]
  -[HMDAssistantIntent homeKitObjects]
  -[HMDAssistantIntent setHomeKitObjects:]
  -[HMDAssistantIntent performWithGather:message:]
  -[HMDAssistantIntent _handleIntentRequestMessage:]
  -[HMDAssistantIntent _getObjectsWithUUID]
  -[HMDAssistantIntent _handleActionSetForConfirmation:message:]
  -[HMDAssistantIntent _handleActionSetForExecution:message:]


HMFObjectCacheHMDUserMessagePolicy : NSObject
  // class methods
  +[HMFObjectCacheHMDUserMessagePolicy cachedInstanceForUserMessagePolicy:]


HMDUserMessagePolicy : HMFMessagePolicy <NSMutableCopying>
 @property  HMDHome *home
 @property  unsigned long userPrivilege
 @property  BOOL requiresRemoteAccess
 @property  BOOL requiresCameraStreamingAccess

  // class methods
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:requiresCameraStreamingAccess:]
  +[HMDUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:]

  // instance methods
  -[HMDUserMessagePolicy home]
  -[HMDUserMessagePolicy .cxx_destruct]
  -[HMDUserMessagePolicy copyWithZone:]
  -[HMDUserMessagePolicy mutableCopyWithZone:]
  -[HMDUserMessagePolicy isEqual:]
  -[HMDUserMessagePolicy init]
  -[HMDUserMessagePolicy userPrivilege]
  -[HMDUserMessagePolicy __initWithHome:userPrivilege:remoteAccessRequired:requiresCameraStreamingAccess:]
  -[HMDUserMessagePolicy requiresRemoteAccess]
  -[HMDUserMessagePolicy requiresCameraStreamingAccess]


HMDMutableUserMessagePolicy : HMDUserMessagePolicy
 @property  unsigned long userPrivilege
 @property  BOOL requiresRemoteAccess
 @property  BOOL requiresCameraStreamingAccess

  // class methods
  +[HMDMutableUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:requiresCameraStreamingAccess:]
  +[HMDMutableUserMessagePolicy userMessagePolicyWithHome:userPrivilege:remoteAccessRequired:]

  // instance methods
  -[HMDMutableUserMessagePolicy copyWithZone:]
  -[HMDMutableUserMessagePolicy setUserPrivilege:]
  -[HMDMutableUserMessagePolicy setRequiresRemoteAccess:]
  -[HMDMutableUserMessagePolicy setRequiresCameraStreamingAccess:]


HMDPhotosPersonManagerSettingsModel : HMBModel
 @property  NSNumber *sharingFaceClassificationsEnabled
 @property  NSUUID *zoneUUID

  // class methods
  +[HMDPhotosPersonManagerSettingsModel hmbProperties]
  +[HMDPhotosPersonManagerSettingsModel sentinelParentUUID]

  // instance methods
  -[HMDPhotosPersonManagerSettingsModel initWithModelID:settings:]
  -[HMDPhotosPersonManagerSettingsModel createSettings]


HMDCameraLocalStreamControlManager : HMDCameraStreamControlManager <HMDStreamingManagerDelegate, HMDCameraIDSSessionInitiatorDelegate, HMDCameraIDSDeviceConnectionSenderDelegate, HMDCameraStreamControlManagerProtocol>
 @property  HMDCameraLocalStreamSession *streamSession
 @property  HMDCameraMediaConfigGenerator *configGenerator
 @property  HMDCameraSupportedConfigurationCache *supportedConfigCache
 @property  BOOL sendingStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long audioStreamSetting
 @property  NSNumber *aspectRatio
 @property  NSNumber *slotIdentifier
 @property  HMDCameraStreamMetrics *streamMetrics

  // class methods
  +[HMDCameraLocalStreamControlManager logCategory]

  // instance methods
  -[HMDCameraLocalStreamControlManager aspectRatio]
  -[HMDCameraLocalStreamControlManager dealloc]
  -[HMDCameraLocalStreamControlManager .cxx_destruct]
  -[HMDCameraLocalStreamControlManager audioStreamSetting]
  -[HMDCameraLocalStreamControlManager slotIdentifier]
  -[HMDCameraLocalStreamControlManager _streamStarted]
  -[HMDCameraLocalStreamControlManager setUpRemoteConnectionWithDevice:]
  -[HMDCameraLocalStreamControlManager streamingManager:didStartStreamWithError:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidReceiveFirstFrame:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidStartRelay:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidStopStream:error:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidNetworkImprove:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidNetworkDeteriorate:]
  -[HMDCameraLocalStreamControlManager streamingManagerDidUpdateConfiguration:]
  -[HMDCameraLocalStreamControlManager updateAudioSetting:]
  -[HMDCameraLocalStreamControlManager updateAudioVolume:callback:]
  -[HMDCameraLocalStreamControlManager sessionInitiator:didSetUpWithError:]
  -[HMDCameraLocalStreamControlManager sessionInitiator:didEndSessionWithError:]
  -[HMDCameraLocalStreamControlManager deviceConnectionSender:didSetUpWithError:]
  -[HMDCameraLocalStreamControlManager deviceConnectionSender:didEndSessionWithError:]
  -[HMDCameraLocalStreamControlManager negotiateStream]
  -[HMDCameraLocalStreamControlManager startStreamWithRemoteSettings:]
  -[HMDCameraLocalStreamControlManager reconfigureStream:]
  -[HMDCameraLocalStreamControlManager stopStreamWithError:]
  -[HMDCameraLocalStreamControlManager _negotiateStream]
  -[HMDCameraLocalStreamControlManager _startStreamWithRemoteSettings:]
  -[HMDCameraLocalStreamControlManager _reconfigureStream:]
  -[HMDCameraLocalStreamControlManager _stopCurrentStreamSessionWithError:]
  -[HMDCameraLocalStreamControlManager _cleanUpStreamSessionWithError:]
  -[HMDCameraLocalStreamControlManager _reconfigureStreams]
  -[HMDCameraLocalStreamControlManager _sendUpdatedConfiguration]
  -[HMDCameraLocalStreamControlManager configGenerator]
  -[HMDCameraLocalStreamControlManager streamSession]
  -[HMDCameraLocalStreamControlManager setStreamSession:]
  -[HMDCameraLocalStreamControlManager supportedConfigCache]
  -[HMDCameraLocalStreamControlManager initWithSessionID:workQueue:streamSnapshotHandler:reachabilityPath:device:delegate:delegateQueue:accessory:streamManagementService:localNetworkConfig:remoteCapabilities:supportedConfigCache:streamPreference:]
  -[HMDCameraLocalStreamControlManager initWithSessionID:workQueue:streamSnapshotHandler:delegate:delegateQueue:accessory:streamManagementService:supportedConfigCache:streamSession:]
  -[HMDCameraLocalStreamControlManager isSendingStream]
  -[HMDCameraLocalStreamControlManager _getSupportedConfigurations]
  -[HMDCameraLocalStreamControlManager _handleSupportedParameters:]
  -[HMDCameraLocalStreamControlManager _writeSetupEndPoint]
  -[HMDCameraLocalStreamControlManager _sendSetupEndPointRead]
  -[HMDCameraLocalStreamControlManager _handleSetupEndPointRead:]
  -[HMDCameraLocalStreamControlManager _validateSetupEndPointReadWithWrite]
  -[HMDCameraLocalStreamControlManager _addServerStreamSession]
  -[HMDCameraLocalStreamControlManager _removeServerStreamSession]
  -[HMDCameraLocalStreamControlManager _calculateMTU]
  -[HMDCameraLocalStreamControlManager _startStreamingManager]
  -[HMDCameraLocalStreamControlManager _writeStartConfig]
  -[HMDCameraLocalStreamControlManager _writeReselectConfig]
  -[HMDCameraLocalStreamControlManager _writeSelectConfig:reconfigure:]
  -[HMDCameraLocalStreamControlManager _writeStopConfig:]


HMDSiriEndpointSettingsSyncManager : HMFObject <HMFLogging, HMEEventConsumer, HMDCompositeSettingsSiriEndpointProfileBridge>
 @property  <HMDSiriEndpointSettingsSyncManagerDataSource> *dataSource
 @property  <HMESubscriptionProviding> *subcriptionProvider
 @property  NSMutableSet *homeUUIDsManagedByCurrentDevice
 @property  NSNotificationCenter *notificationCenter
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriEndpointSettingsSyncManager logCategory]
  +[HMDSiriEndpointSettingsSyncManager siriEndPointHomeKitBackedKeyPaths]

  // instance methods
  -[HMDSiriEndpointSettingsSyncManager notificationCenter]
  -[HMDSiriEndpointSettingsSyncManager didReceiveEvent:topic:]
  -[HMDSiriEndpointSettingsSyncManager configure]
  -[HMDSiriEndpointSettingsSyncManager dataSource]
  -[HMDSiriEndpointSettingsSyncManager workQueue]
  -[HMDSiriEndpointSettingsSyncManager .cxx_destruct]
  -[HMDSiriEndpointSettingsSyncManager handleSiriEndPointAddedNotification:]
  -[HMDSiriEndpointSettingsSyncManager handleHomeRemovedNotification:]
  -[HMDSiriEndpointSettingsSyncManager handlePrimaryResidentUpdateNotification:]
  -[HMDSiriEndpointSettingsSyncManager handleHomeAddedNotification:]
  -[HMDSiriEndpointSettingsSyncManager handleCompositeSettingsControllerDidConfigureNotification:]
  -[HMDSiriEndpointSettingsSyncManager handleAccessoryIsReachableNotification:]
  -[HMDSiriEndpointSettingsSyncManager handleHAPMediaProfileAddedNotification:]
  -[HMDSiriEndpointSettingsSyncManager readValueValueForAccessoryUUID:homeUUID:forKeyPath:]
  -[HMDSiriEndpointSettingsSyncManager writeSettingValue:accessoryUUID:homeUUID:forKeyPath:completionHandler:]
  -[HMDSiriEndpointSettingsSyncManager siriEndpointCertificationReasonForAccessoryUUID:homeUUID:error:]
  -[HMDSiriEndpointSettingsSyncManager initWithDataSource:subcriptionProvider:notificationCenter:workQueue:]
  -[HMDSiriEndpointSettingsSyncManager _beginManagingHome:]
  -[HMDSiriEndpointSettingsSyncManager _stopManagingHome:]
  -[HMDSiriEndpointSettingsSyncManager _beginManagingAccessory:forHome:]
  -[HMDSiriEndpointSettingsSyncManager _stopManagingAccessory:forHome:]
  -[HMDSiriEndpointSettingsSyncManager registerForAccessoryNotificationsOnHapAccessory:]
  -[HMDSiriEndpointSettingsSyncManager unregisterFromAccessoryNotificationsOnHapAccessory:]
  -[HMDSiriEndpointSettingsSyncManager _updateManagedHomes]
  -[HMDSiriEndpointSettingsSyncManager _synchronizeSettingsForAccessoryUUID:homeUUID:]
  -[HMDSiriEndpointSettingsSyncManager _writeSetting:toAccessory:forKeyPath:]
  -[HMDSiriEndpointSettingsSyncManager _writeSettingValue:toAccessory:forKeyPath:]
  -[HMDSiriEndpointSettingsSyncManager _writeSettingValue:toAccessory:forKeyPath:completionHandler:]
  -[HMDSiriEndpointSettingsSyncManager _matchingHomeforUUID:accessoryUUID:home:accessory:]
  -[HMDSiriEndpointSettingsSyncManager subcriptionProvider]
  -[HMDSiriEndpointSettingsSyncManager homeUUIDsManagedByCurrentDevice]


HMDMultiUserSettingsLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  HMMultiUserSettingsForMetrics *multiUserSettings

  // instance methods
  -[HMDMultiUserSettingsLogEvent eventName]
  -[HMDMultiUserSettingsLogEvent .cxx_destruct]
  -[HMDMultiUserSettingsLogEvent serializedEvent]
  -[HMDMultiUserSettingsLogEvent multiUserSettings]
  -[HMDMultiUserSettingsLogEvent initWithMultiUserSettings:]


HMDNetworkRouterFirewallRuleManagerUtils : NSObject
  // class methods
  +[HMDNetworkRouterFirewallRuleManagerUtils dumpTLVsFromJSONData:error:]


HMDCloudManagerDataSource : HMFObject
 @property  HMDHomeManager *homeManager

  // instance methods
  -[HMDCloudManagerDataSource initWithHomeManager:]
  -[HMDCloudManagerDataSource isKeychainSyncEnabled]
  -[HMDCloudManagerDataSource .cxx_destruct]
  -[HMDCloudManagerDataSource supportsKeyTransferServer]
  -[HMDCloudManagerDataSource homeManager]
  -[HMDCloudManagerDataSource queryDatabaseOperationWithBlock:]
  -[HMDCloudManagerDataSource isControllerKeyAvailable]
  -[HMDCloudManagerDataSource dataMigrationOptions]
  -[HMDCloudManagerDataSource keyTransferAgent]


HMDWidgetFetchSpecification : HMFObject
 @property  NSString *name
 @property  NSSet *serviceTypes
 @property  NSSet *associatedServiceTypes
 @property  NSString *characteristicType
 @property  NSSet *affectedWidgetKinds

  // class methods
  +[HMDWidgetFetchSpecification allHomeWidgetKinds]
  +[HMDWidgetFetchSpecification lightsFetchSpecifications]
  +[HMDWidgetFetchSpecification mainHomeSecurityFetchSpecifications]
  +[HMDWidgetFetchSpecification allOtherHomesSingleAccessorySecurityFetchSpecifications]

  // instance methods
  -[HMDWidgetFetchSpecification serviceTypes]
  -[HMDWidgetFetchSpecification attributeDescriptions]
  -[HMDWidgetFetchSpecification characteristicType]
  -[HMDWidgetFetchSpecification .cxx_destruct]
  -[HMDWidgetFetchSpecification name]
  -[HMDWidgetFetchSpecification initWithName:serviceTypes:associatedServiceTypes:characteristicType:affectedWidgetKinds:]
  -[HMDWidgetFetchSpecification associatedServiceTypes]
  -[HMDWidgetFetchSpecification affectedWidgetKinds]


HMDHomeMetricsDispatcherFactory : HMFObject <HMDHomeMetricsDispatcherFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeMetricsDispatcherFactory createHomeMetricsDispatcherWithIdentifier:logEventSubmitter:]


HMDEvent : HMFObject <NSSecureCoding, HMFDumpState, HMDHomeMessageReceiver, HMFLogging, HMDBackingStoreObjectProtocol>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  <HMDEventDelegate> *delegate
 @property  HMDHome *home
 @property  HMDEventTrigger *eventTrigger
 @property  NSUUID *uuid
 @property  NSString *triggerType
 @property  NSString *logString
 @property  BOOL endEvent
 @property  unsigned long activationType
 @property  BOOL active
 @property  BOOL configured
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDEvent supportsSecureCoding]
  +[HMDEvent logCategory]
  +[HMDEvent hasMessageReceiverChildren]

  // instance methods
  -[HMDEvent dumpState]
  -[HMDEvent home]
  -[HMDEvent logIdentifier]
  -[HMDEvent setDelegate:]
  -[HMDEvent logString]
  -[HMDEvent encodeWithCoder:]
  -[HMDEvent workQueue]
  -[HMDEvent delegate]
  -[HMDEvent setWorkQueue:]
  -[HMDEvent isActive]
  -[HMDEvent uuid]
  -[HMDEvent .cxx_destruct]
  -[HMDEvent messageTargetUUID]
  -[HMDEvent triggerType]
  -[HMDEvent _setup]
  -[HMDEvent invalidate]
  -[HMDEvent messageReceiveQueue]
  -[HMDEvent msgDispatcher]
  -[HMDEvent isConfigured]
  -[HMDEvent isEqual:]
  -[HMDEvent initWithCoder:]
  -[HMDEvent activationType]
  -[HMDEvent setActivationType:]
  -[HMDEvent setHome:]
  -[HMDEvent eventTrigger]
  -[HMDEvent setEventTrigger:]
  -[HMDEvent _updateTriggerType]
  -[HMDEvent isEndEvent]
  -[HMDEvent setMsgDispatcher:]
  -[HMDEvent _registerForMessages]
  -[HMDEvent createPayload]
  -[HMDEvent transactionObjectUpdated:newValues:message:]
  -[HMDEvent transactionObjectRemoved:message:]
  -[HMDEvent initWithModel:home:]
  -[HMDEvent _activate:completionHandler:]
  -[HMDEvent _transactionObjectUpdated:newValues:message:]
  -[HMDEvent _transactionObjectRemoved:message:]
  -[HMDEvent modelObjectWithChangeType:]
  -[HMDEvent emptyModelObject]
  -[HMDEvent _handleUpdateRequest:]
  -[HMDEvent analyticsTriggerEventData]
  -[HMDEvent configure:messageDispatcher:queue:delegate:]
  -[HMDEvent setLogString:]


HMDEventModel : HMDBackingStoreModelObject
 @property  NSNumber *endEvent

  // class methods
  +[HMDEventModel properties]
  +[HMDEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]
  +[HMDEventModel eventModelWithDictionary:home:eventTriggerUUID:className:message:]


HMDProcessMonitor : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *xpcListenerQueue
 @property  HMFTimer *spiClientTerminationDelayTimer
 @property  NSMutableSet *pendingTerminatedApplications
 @property  NSArray *processes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDProcessMonitor logCategory]

  // instance methods
  -[HMDProcessMonitor timerDidFire:]
  -[HMDProcessMonitor removeProcess:]
  -[HMDProcessMonitor processes]
  -[HMDProcessMonitor dealloc]
  -[HMDProcessMonitor .cxx_destruct]
  -[HMDProcessMonitor _removeProcess:]
  -[HMDProcessMonitor init]
  -[HMDProcessMonitor initWithXpcListenerQueue:]
  -[HMDProcessMonitor updateApplicationMonitor]
  -[HMDProcessMonitor processInfoForPID:]
  -[HMDProcessMonitor processInfoForConnection:]
  -[HMDProcessMonitor removeFromPendingTerminated:]
  -[HMDProcessMonitor _processAppStateChange:]
  -[HMDProcessMonitor xpcListenerQueue]
  -[HMDProcessMonitor spiClientTerminationDelayTimer]
  -[HMDProcessMonitor setSpiClientTerminationDelayTimer:]
  -[HMDProcessMonitor pendingTerminatedApplications]


HMDSymptomManager : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDSharingDeviceDiscovery> *deviceDiscovery
 @property  <HMDCompanionLinkClient> *companionLinkClient
 @property  HMFWiFiManager *wifiManager
 @property  NSMapTable *symptomContainerByRegisteredAccessory
 @property  NSMapTable *nearbySFDevices
 @property  NSMapTable *networkReachableRPCompanionLinkDevices
 @property  unsigned long deviceDiscoveryFlags
 @property  BOOL supportsRegisteringAccessories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSymptomManager sharedManager]
  +[HMDSymptomManager logCategory]
  +[HMDSymptomManager _symptomsForProblemFlags:]

  // instance methods
  -[HMDSymptomManager _stop]
  -[HMDSymptomManager wifiManager]
  -[HMDSymptomManager workQueue]
  -[HMDSymptomManager dealloc]
  -[HMDSymptomManager _start]
  -[HMDSymptomManager .cxx_destruct]
  -[HMDSymptomManager deviceDiscovery]
  -[HMDSymptomManager companionLinkClient]
  -[HMDSymptomManager init]
  -[HMDSymptomManager handleAccessoryRemovedNotification:]
  -[HMDSymptomManager handleAccessoryWiFiNetworkInfoUpdatedNotification:]
  -[HMDSymptomManager handleCurrentNetworkDidChangeNotification:]
  -[HMDSymptomManager initWithQueue:deviceDiscovery:companionLinkClient:wifiManager:]
  -[HMDSymptomManager registerAccessory:delegate:]
  -[HMDSymptomManager deregisterAccessory:]
  -[HMDSymptomManager startDiscoveringSymptomsRequiringNearbyInfo]
  -[HMDSymptomManager stopDiscoveringSymptomsRequiringNearbyInfo]
  -[HMDSymptomManager initiateFixForAccessory:completion:]
  -[HMDSymptomManager setDeviceDiscoveryFlags:]
  -[HMDSymptomManager _startDeviceDiscovery]
  -[HMDSymptomManager _startCompanionLinkClient]
  -[HMDSymptomManager _stopDeviceDiscovery]
  -[HMDSymptomManager _stopCompanionLinkClient]
  -[HMDSymptomManager _symptomsForRegisteredAccessory:]
  -[HMDSymptomManager _initiateFixForAccessory:completion:]
  -[HMDSymptomManager _registeredAccessoryWithIDSIdentifier:]
  -[HMDSymptomManager _updateSymptomsForRegisteredAccessoryWithIDSIdentifier:]
  -[HMDSymptomManager _updateSymptomsForRegisteredAccessory:]
  -[HMDSymptomManager _updateSymptomsForAllRegisteredAccessories]
  -[HMDSymptomManager _sfDeviceFoundHandler:]
  -[HMDSymptomManager _sfDeviceChangedHandler:]
  -[HMDSymptomManager _sfDeviceLostHandler:]
  -[HMDSymptomManager _rpDeviceFoundHandler:]
  -[HMDSymptomManager _rpDeviceChangedHandler:]
  -[HMDSymptomManager _rpDeviceLostHandler:]
  -[HMDSymptomManager symptomContainerByRegisteredAccessory]
  -[HMDSymptomManager nearbySFDevices]
  -[HMDSymptomManager networkReachableRPCompanionLinkDevices]
  -[HMDSymptomManager deviceDiscoveryFlags]
  -[HMDSymptomManager supportsRegisteringAccessories]
  -[HMDSymptomManager setSupportsRegisteringAccessories:]


HMDSymptomContainer : NSObject
 @property  NSString *idsIdentifier
 @property  <HMDAccessorySymptomsDelegate> *delegate
 @property  NSSet *symptoms

  // instance methods
  -[HMDSymptomContainer idsIdentifier]
  -[HMDSymptomContainer setDelegate:]
  -[HMDSymptomContainer delegate]
  -[HMDSymptomContainer .cxx_destruct]
  -[HMDSymptomContainer symptoms]
  -[HMDSymptomContainer setSymptoms:]
  -[HMDSymptomContainer initWithIDSIdentifier:]


HMDUserManagementOperationManager : HMFObject <HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMFTimer *saveTimer
 @property  NSHashTable *observedAccessories
 @property  NSArray *operations
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserManagementOperationManager initialize]
  +[HMDUserManagementOperationManager sharedManager]
  +[HMDUserManagementOperationManager setSharedManager:]

  // instance methods
  -[HMDUserManagementOperationManager cancelAllOperations]
  -[HMDUserManagementOperationManager timerDidFire:]
  -[HMDUserManagementOperationManager operations]
  -[HMDUserManagementOperationManager clientQueue]
  -[HMDUserManagementOperationManager addOperation:]
  -[HMDUserManagementOperationManager dealloc]
  -[HMDUserManagementOperationManager removeOperation:]
  -[HMDUserManagementOperationManager .cxx_destruct]
  -[HMDUserManagementOperationManager initWithOperations:]
  -[HMDUserManagementOperationManager homeManager]
  -[HMDUserManagementOperationManager shortDescription]
  -[HMDUserManagementOperationManager setHomeManager:]
  -[HMDUserManagementOperationManager _handleAccessoryIsReachable:]
  -[HMDUserManagementOperationManager init]
  -[HMDUserManagementOperationManager _filteredOperationsForAccessory:]
  -[HMDUserManagementOperationManager _filteredOperationsWithDependency:]
  -[HMDUserManagementOperationManager _cleanPriorOperations:]
  -[HMDUserManagementOperationManager _handleAddedOperation:]
  -[HMDUserManagementOperationManager removeOperationWithIdentifier:]
  -[HMDUserManagementOperationManager _handleRemovedOperation:]
  -[HMDUserManagementOperationManager operationCancelled:]
  -[HMDUserManagementOperationManager operationStoppedBackingOff:]
  -[HMDUserManagementOperationManager __executeOperation:]
  -[HMDUserManagementOperationManager __removeOperationAndProcessDependantOperations:]
  -[HMDUserManagementOperationManager __registerIfNeededForReachablityChangeNotifications]
  -[HMDUserManagementOperationManager __registerIfNeededForReachablityChangeNotificationsForAccessory:]
  -[HMDUserManagementOperationManager __deregisterIfNeededForReachablityChangeNotificationsForAccessory:]
  -[HMDUserManagementOperationManager __save]
  -[HMDUserManagementOperationManager _reallySave]
  -[HMDUserManagementOperationManager saveTimer]
  -[HMDUserManagementOperationManager observedAccessories]


HMDUserManagementOperation : HMFObject <HMFTimerDelegate, NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  BOOL executing
 @property  HMFTimer *expirationTimer
 @property  HMDUserManagementOperationManager *operationManager
 @property  double backoffInterval
 @property  HMFTimer *backoffTimer
 @property  BOOL backingOff
 @property  unsigned long state
 @property  HMDAccessory *accessory
 @property  BOOL addOperation
 @property  BOOL removeOperation
 @property  BOOL auditOperation
 @property  NSArray *auditUsersToBeAdded
 @property  BOOL lastOperationFailed
 @property  HMDAccessoryInvitation *accessoryInvitation
 @property  NSDictionary *accessoryInvitationInformation
 @property  <HMDUserManagementOperationDelegate> *delegate
 @property  NSUUID *identifier
 @property  unsigned long operationType
 @property  HMDUser *user
 @property  BOOL finished
 @property  BOOL cancelled
 @property  BOOL ready
 @property  BOOL expired
 @property  NSDate *expirationDate
 @property  NSArray *dependencies
 @property  HAPPairingIdentity *ownerPairingIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserManagementOperation supportsSecureCoding]
  +[HMDUserManagementOperation initialize]
  +[HMDUserManagementOperation shortDescription]
  +[HMDUserManagementOperation auditUserManagementOperationAccessory:model:]
  +[HMDUserManagementOperation addUserManagementOperationForUser:accessory:model:]
  +[HMDUserManagementOperation removeUserManagementOperationForUser:accessory:model:]
  +[HMDUserManagementOperation operationWithDictionary:home:]

  // instance methods
  -[HMDUserManagementOperation operationType]
  -[HMDUserManagementOperation dependencies]
  -[HMDUserManagementOperation accessory]
  -[HMDUserManagementOperation timerDidFire:]
  -[HMDUserManagementOperation isReady]
  -[HMDUserManagementOperation isFinished]
  -[HMDUserManagementOperation expirationDate]
  -[HMDUserManagementOperation identifier]
  -[HMDUserManagementOperation clientQueue]
  -[HMDUserManagementOperation setDelegate:]
  -[HMDUserManagementOperation setAccessory:]
  -[HMDUserManagementOperation encodeWithCoder:]
  -[HMDUserManagementOperation backoffTimer]
  -[HMDUserManagementOperation delegate]
  -[HMDUserManagementOperation state]
  -[HMDUserManagementOperation expirationTimer]
  -[HMDUserManagementOperation user]
  -[HMDUserManagementOperation isValid]
  -[HMDUserManagementOperation .cxx_destruct]
  -[HMDUserManagementOperation isExecuting]
  -[HMDUserManagementOperation _isFinished]
  -[HMDUserManagementOperation shortDescription]
  -[HMDUserManagementOperation setExecuting:]
  -[HMDUserManagementOperation isExpired]
  -[HMDUserManagementOperation isCancelled]
  -[HMDUserManagementOperation cancel]
  -[HMDUserManagementOperation init]
  -[HMDUserManagementOperation setState:]
  -[HMDUserManagementOperation initWithCoder:]
  -[HMDUserManagementOperation addDependency:]
  -[HMDUserManagementOperation descriptionWithPointer:]
  -[HMDUserManagementOperation updateDelegate:]
  -[HMDUserManagementOperation setOperationManager:]
  -[HMDUserManagementOperation setBackoffTimer:]
  -[HMDUserManagementOperation backoffInterval]
  -[HMDUserManagementOperation modelObjectWithChangeType:]
  -[HMDUserManagementOperation isAddOperation]
  -[HMDUserManagementOperation populateModelObjectWithChangeType:version:]
  -[HMDUserManagementOperation initWithOperationType:identifier:user:accessory:expiration:]
  -[HMDUserManagementOperation _setupExpirationTimer]
  -[HMDUserManagementOperation isRemoveOperation]
  -[HMDUserManagementOperation isAuditOperation]
  -[HMDUserManagementOperation lastOperationFailed]
  -[HMDUserManagementOperation setLastOperationFailed:]
  -[HMDUserManagementOperation operationManager]
  -[HMDUserManagementOperation isBackingOff]
  -[HMDUserManagementOperation setBackingOff:]
  -[HMDUserManagementOperation nextBackoffInterval]
  -[HMDUserManagementOperation _startBackoffTimer]
  -[HMDUserManagementOperation _endBackoffTimer]
  -[HMDUserManagementOperation executeWithCompletionQueue:completionHandler:]
  -[HMDUserManagementOperation _findConflictingAccessory:]
  -[HMDUserManagementOperation _addPairingToHAPAccessory:completionHandler:]
  -[HMDUserManagementOperation _removePairingFromHAPAccessory:completionHandler:]
  -[HMDUserManagementOperation _auditPairingsForHAPAccessory:completionHandler:]
  -[HMDUserManagementOperation mergeWithOperation:]
  -[HMDUserManagementOperation _accessoryInvitationState]
  -[HMDUserManagementOperation accessoryInvitation]
  -[HMDUserManagementOperation accessoryInvitationInformation]
  -[HMDUserManagementOperation dictionaryEncoding]
  -[HMDUserManagementOperation transactionWithObjectChangeType:parentUUID:]
  -[HMDUserManagementOperation modelObjectWithChangeType:parentUUID:]
  -[HMDUserManagementOperation ownerPairingIdentity]
  -[HMDUserManagementOperation setOwnerPairingIdentity:]
  -[HMDUserManagementOperation auditUsersToBeAdded]
  -[HMDUserManagementOperation setAuditUsersToBeAdded:]


HMDUserManagementOperationModel : HMDBackingStoreModelObject
 @property  NSNumber *operationType
 @property  HAPPairingIdentity *userPairingIdentity
 @property  HMFPairingIdentity *accessoryPairingIdentity
 @property  HAPPairingIdentity *ownerPairingIdentity
 @property  NSDate *expirationDate
 @property  NSArray *dependencies

  // class methods
  +[HMDUserManagementOperationModel properties]

  // instance methods
  -[HMDUserManagementOperationModel dependentUUIDs]


HMDWACBrowser : NSObject <HMDWACScannerDelegate, HMFLogging>
 @property  <HMDWACBrowserDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  BOOL scanIsActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWACBrowser logCategory]

  // instance methods
  -[HMDWACBrowser setDelegate:]
  -[HMDWACBrowser delegate]
  -[HMDWACBrowser setDelegateQueue:]
  -[HMDWACBrowser .cxx_destruct]
  -[HMDWACBrowser delegateQueue]
  -[HMDWACBrowser setDelegate:queue:]
  -[HMDWACBrowser scanner:didAddDevice:]
  -[HMDWACBrowser scanner:didRemoveDevice:]
  -[HMDWACBrowser scanner:didUpdateDevice:]
  -[HMDWACBrowser scanner:didError:]
  -[HMDWACBrowser scannerDidStop:]
  -[HMDWACBrowser initWithWACScanner:messageDispatcher:]
  -[HMDWACBrowser startBrowsingForAccessories]
  -[HMDWACBrowser startBrowsingForAirPlayWACAccessoriesWithBrowser:]
  -[HMDWACBrowser stopBrowsingForAccessories]
  -[HMDWACBrowser requestBackoff]
  -[HMDWACBrowser clearBackoff]
  -[HMDWACBrowser scanIsActive]
  -[HMDWACBrowser setScanIsActive:]


HMDSiriEndpointProfileFields : HMFObject
 @property  NSString *needsOnboardingField
 @property  NSString *supportsOnboardingField
 @property  NSString *isSiriEnableField
 @property  NSString *isSiriListeningField
 @property  NSString *siriTouchToUseField
 @property  NSString *siriLightOnUseField
 @property  NSString *siriSoundOnUseField

  // instance methods
  -[HMDSiriEndpointProfileFields attributeDescriptions]
  -[HMDSiriEndpointProfileFields .cxx_destruct]
  -[HMDSiriEndpointProfileFields serializeFields]
  -[HMDSiriEndpointProfileFields initWithNeedsOnboardingField:supportsOnboardingField:siriEnableField:siriListeningField:siriTouchToUseField:siriLightOnUseField:siriSoundOnUseField:]
  -[HMDSiriEndpointProfileFields needsOnboardingField]
  -[HMDSiriEndpointProfileFields supportsOnboardingField]
  -[HMDSiriEndpointProfileFields isSiriEnableField]
  -[HMDSiriEndpointProfileFields isSiriListeningField]
  -[HMDSiriEndpointProfileFields siriTouchToUseField]
  -[HMDSiriEndpointProfileFields siriLightOnUseField]
  -[HMDSiriEndpointProfileFields siriSoundOnUseField]


HMDHomeAssistantOperation : HMFObject <HMFTimerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeAssistantOperation homeAssistantOperationWithWriteRequests:queue:]
  +[HMDHomeAssistantOperation homeAssistantOperationWithReadRequests:queue:]
  +[HMDHomeAssistantOperation homeAssistantOperationWithActionSet:queue:]

  // instance methods
  -[HMDHomeAssistantOperation timerDidFire:]
  -[HMDHomeAssistantOperation startWithCompletion:]
  -[HMDHomeAssistantOperation dealloc]
  -[HMDHomeAssistantOperation .cxx_destruct]
  -[HMDHomeAssistantOperation handleAccessoryIsReachable:]


HMDNotificationRegistryRequest : HMFObject
 @property  BOOL enable
 @property  NSString *userID
 @property  long long retryCount

  // instance methods
  -[HMDNotificationRegistryRequest enable]
  -[HMDNotificationRegistryRequest retryCount]
  -[HMDNotificationRegistryRequest setRetryCount:]
  -[HMDNotificationRegistryRequest attributeDescriptions]
  -[HMDNotificationRegistryRequest userID]
  -[HMDNotificationRegistryRequest .cxx_destruct]
  -[HMDNotificationRegistryRequest initWithEnable:userID:]


HMDNotificationRegistryCharacteristicsRequest : HMDNotificationRegistryRequest
 @property  NSUUID *accessoryUUID
 @property  NSMutableSet *characteristicInstanceIDs

  // instance methods
  -[HMDNotificationRegistryCharacteristicsRequest accessoryUUID]
  -[HMDNotificationRegistryCharacteristicsRequest attributeDescriptions]
  -[HMDNotificationRegistryCharacteristicsRequest .cxx_destruct]
  -[HMDNotificationRegistryCharacteristicsRequest initWithEnable:userID:accessoryUUID:]
  -[HMDNotificationRegistryCharacteristicsRequest characteristicInstanceIDs]
  -[HMDNotificationRegistryCharacteristicsRequest setCharacteristicInstanceIDs:]


HMDNotificationRegistryMediaPropertiesRequest : HMDNotificationRegistryRequest
 @property  NSUUID *mediaProfileUUID
 @property  NSMutableSet *mediaProperties

  // instance methods
  -[HMDNotificationRegistryMediaPropertiesRequest attributeDescriptions]
  -[HMDNotificationRegistryMediaPropertiesRequest .cxx_destruct]
  -[HMDNotificationRegistryMediaPropertiesRequest mediaProperties]
  -[HMDNotificationRegistryMediaPropertiesRequest initWithEnable:userID:mediaProfileUUID:]
  -[HMDNotificationRegistryMediaPropertiesRequest mediaProfileUUID]
  -[HMDNotificationRegistryMediaPropertiesRequest setMediaProperties:]


HMDCHIPAccessoryDataSource : HMFObject <CHIPPluginDeviceStorageDataSource>
 @property  HMDHAPAccessory *accessory
 @property  NSNumber *nodeID
 @property  NSNumber *vendorID
 @property  NSNumber *productID
 @property  NSData *attributeDatabase
 @property  NSSet *pairings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCHIPAccessoryDataSource logCategory]

  // instance methods
  -[HMDCHIPAccessoryDataSource accessory]
  -[HMDCHIPAccessoryDataSource vendorID]
  -[HMDCHIPAccessoryDataSource logIdentifier]
  -[HMDCHIPAccessoryDataSource productID]
  -[HMDCHIPAccessoryDataSource setAccessory:]
  -[HMDCHIPAccessoryDataSource .cxx_destruct]
  -[HMDCHIPAccessoryDataSource nodeID]
  -[HMDCHIPAccessoryDataSource attributeDatabase]
  -[HMDCHIPAccessoryDataSource pairings]
  -[HMDCHIPAccessoryDataSource updateNodeID:completion:]
  -[HMDCHIPAccessoryDataSource updateVendorID:completion:]
  -[HMDCHIPAccessoryDataSource updateProductID:completion:]
  -[HMDCHIPAccessoryDataSource updateAttributeDatabase:completion:]
  -[HMDCHIPAccessoryDataSource updatePairings:completion:]
  -[HMDCHIPAccessoryDataSource initWithNodeID:accessory:]
  -[HMDCHIPAccessoryDataSource _updateAccessoryModelWithLabel:completion:block:]


HMDUserPresenceRegion : NSObject
 @property  NSNumber *number
 @property  unsigned long value

  // class methods
  +[HMDUserPresenceRegion regionWithValue:]
  +[HMDUserPresenceRegion regionWithNumber:]
  +[HMDUserPresenceRegion regionWithMessage:]
  +[HMDUserPresenceRegion regionWithDict:]
  +[HMDUserPresenceRegion regionWithCoder:]

  // instance methods
  -[HMDUserPresenceRegion number]
  -[HMDUserPresenceRegion value]
  -[HMDUserPresenceRegion isEqual:]
  -[HMDUserPresenceRegion initWithNumber:]
  -[HMDUserPresenceRegion addToCoder:]
  -[HMDUserPresenceRegion addToPayload:]


HMDRemoteLoginAnisetteDataHandler : HMFObject <HMFLogging, HMDHomeMessageReceiver>
 @property  HMDAppleMediaAccessory *accessory
 @property  NSUUID *uuid
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  AKAnisetteProvisioningController *provisioningController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDRemoteLoginAnisetteDataHandler logCategory]
  +[HMDRemoteLoginAnisetteDataHandler hasMessageReceiverChildren]

  // instance methods
  -[HMDRemoteLoginAnisetteDataHandler accessory]
  -[HMDRemoteLoginAnisetteDataHandler logIdentifier]
  -[HMDRemoteLoginAnisetteDataHandler workQueue]
  -[HMDRemoteLoginAnisetteDataHandler setWorkQueue:]
  -[HMDRemoteLoginAnisetteDataHandler uuid]
  -[HMDRemoteLoginAnisetteDataHandler .cxx_destruct]
  -[HMDRemoteLoginAnisetteDataHandler messageTargetUUID]
  -[HMDRemoteLoginAnisetteDataHandler messageReceiveQueue]
  -[HMDRemoteLoginAnisetteDataHandler msgDispatcher]
  -[HMDRemoteLoginAnisetteDataHandler provisioningController]
  -[HMDRemoteLoginAnisetteDataHandler setMsgDispatcher:]
  -[HMDRemoteLoginAnisetteDataHandler registerForMessages]
  -[HMDRemoteLoginAnisetteDataHandler configureWithWorkQueue:messageDispatcher:]
  -[HMDRemoteLoginAnisetteDataHandler _handleProvisionAnisetteDataRequestMessage:]
  -[HMDRemoteLoginAnisetteDataHandler _handleSyncAnisetteDataRequestMessage:]
  -[HMDRemoteLoginAnisetteDataHandler _handleEraseAnisetteDataRequestMessage:]
  -[HMDRemoteLoginAnisetteDataHandler _handleFetchAnisetteDataRequestMessage:]
  -[HMDRemoteLoginAnisetteDataHandler _handleLegacyAnisetteDataRequestMessage:]
  -[HMDRemoteLoginAnisetteDataHandler initWithUUID:accessory:]


HMDUserDataZoneControllerShareLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  unsigned long result
 @property  BOOL didAccept

  // instance methods
  -[HMDUserDataZoneControllerShareLogEvent eventName]
  -[HMDUserDataZoneControllerShareLogEvent result]
  -[HMDUserDataZoneControllerShareLogEvent serializedEvent]
  -[HMDUserDataZoneControllerShareLogEvent initWithResult:didAccept:]
  -[HMDUserDataZoneControllerShareLogEvent didAccept]


HMDCameraSnapshotIDSRelay : HMFObject <HMDIDSServiceDelegate, HMFLogging>
 @property  NSString *logIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *sessionID
 @property  <HMDIDSService> *idsStreamService
 @property  HMFOSTransaction *snapshotRelayTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSRelay logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSRelay logIdentifier]
  -[HMDCameraSnapshotIDSRelay sessionID]
  -[HMDCameraSnapshotIDSRelay workQueue]
  -[HMDCameraSnapshotIDSRelay dealloc]
  -[HMDCameraSnapshotIDSRelay .cxx_destruct]
  -[HMDCameraSnapshotIDSRelay idsStreamService]
  -[HMDCameraSnapshotIDSRelay initWithSessionID:logIdentifier:workQueue:]
  -[HMDCameraSnapshotIDSRelay snapshotRelayTransaction]


HMDHomeAIHomePersonDataInterface : HMDHomeAIPersonDataInterface <HMFLogging, HMIHomePersonManagerDataSource>
 @property  HMIHomePersonManager *homePersonManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeAIHomePersonDataInterface logCategory]

  // instance methods
  -[HMDHomeAIHomePersonDataInterface logIdentifier]
  -[HMDHomeAIHomePersonDataInterface .cxx_destruct]
  -[HMDHomeAIHomePersonDataInterface fetchAllUnassociatedFaceCropsWithCompletion:]
  -[HMDHomeAIHomePersonDataInterface removePersonsWithUUIDs:completion:]
  -[HMDHomeAIHomePersonDataInterface removeFaceCropsWithUUIDs:completion:]
  -[HMDHomeAIHomePersonDataInterface removeFaceprintsWithUUIDs:completion:]
  -[HMDHomeAIHomePersonDataInterface fetchSettingsWithCompletion:]
  -[HMDHomeAIHomePersonDataInterface addFaceprints:completion:]
  -[HMDHomeAIHomePersonDataInterface handleUpdatedUnassociatedFaceCrop:mirrorOutputFuture:]
  -[HMDHomeAIHomePersonDataInterface handleUpdatedSettings:mirrorOutputFuture:]
  -[HMDHomeAIHomePersonDataInterface handleFaceMisclassificationForFaceCropData:personUUID:]
  -[HMDHomeAIHomePersonDataInterface homePersonManager]
  -[HMDHomeAIHomePersonDataInterface initWithPersonManagerUUID:homeUUID:workQueue:]
  -[HMDHomeAIHomePersonDataInterface addPersons:completion:]
  -[HMDHomeAIHomePersonDataInterface addFaceCrops:completion:]
  -[HMDHomeAIHomePersonDataInterface addPersonFaceCrops:completion:]
  -[HMDHomeAIHomePersonDataInterface initWithHomePersonManager:workQueue:]


HMDCompositeSettingsLegacyDatabaseAdapter : NSObject <HMBLocalZoneModelObserver, HMFLogging, HMDCompositeSettingsDatabaseAdapter>
 @property  <HMDCompositeSettingsDatabaseAdapterDelegate> *delegate
 @property  HMDCompositeSettingsZoneManager *zoneManager
 @property  Class modelClass
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *queue
 @property  id rawDatabase

  // class methods
  +[HMDCompositeSettingsLegacyDatabaseAdapter logCategory]

  // instance methods
  -[HMDCompositeSettingsLegacyDatabaseAdapter modelClass]
  -[HMDCompositeSettingsLegacyDatabaseAdapter delegate]
  -[HMDCompositeSettingsLegacyDatabaseAdapter .cxx_destruct]
  -[HMDCompositeSettingsLegacyDatabaseAdapter zoneManager]
  -[HMDCompositeSettingsLegacyDatabaseAdapter localZone:didProcessModelDeletion:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter localZone:didProcessModelUpdate:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter localZone:didProcessModelCreation:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter queue]
  -[HMDCompositeSettingsLegacyDatabaseAdapter startWithDelegate:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter startObservingModelWithID:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter stopObservingModelWithID:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter fetchModelWithID:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter addModel:withOptionsLabel:completion:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter emptyModelWithID:parentModelID:modelClass:]
  -[HMDCompositeSettingsLegacyDatabaseAdapter rawDatabase]
  -[HMDCompositeSettingsLegacyDatabaseAdapter initWithZoneManager:modelClass:]


HMDCameraRecordingSessionVariantFragmentManager : HMFObject <HMFLogging>
 @property  NSMutableArray *fullFragmentTimeRanges
 @property  NSMutableArray *variantFragments
 @property  NSString *logIdentifier
 @property  BOOL expectsVariantFragment
 @property  <HMDCameraRecordingSessionVariantFragmentManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSessionVariantFragmentManager logCategory]

  // instance methods
  -[HMDCameraRecordingSessionVariantFragmentManager logIdentifier]
  -[HMDCameraRecordingSessionVariantFragmentManager setDelegate:]
  -[HMDCameraRecordingSessionVariantFragmentManager delegate]
  -[HMDCameraRecordingSessionVariantFragmentManager .cxx_destruct]
  -[HMDCameraRecordingSessionVariantFragmentManager initWithLogIdentifier:]
  -[HMDCameraRecordingSessionVariantFragmentManager expectsVariantFragment]
  -[HMDCameraRecordingSessionVariantFragmentManager handleFullFragment:]
  -[HMDCameraRecordingSessionVariantFragmentManager handleVariantFragment:]
  -[HMDCameraRecordingSessionVariantFragmentManager _drainVariantFragmentQueue]
  -[HMDCameraRecordingSessionVariantFragmentManager fullFragmentTimeRanges]
  -[HMDCameraRecordingSessionVariantFragmentManager variantFragments]


HMDCameraMetricsLogEvent : HMMHomeLogEvent
 @property  HMDCameraSessionID *sessionID
 @property  HMDAccessory *accessory
 @property  BOOL isLocal

  // instance methods
  -[HMDCameraMetricsLogEvent accessory]
  -[HMDCameraMetricsLogEvent sessionID]
  -[HMDCameraMetricsLogEvent .cxx_destruct]
  -[HMDCameraMetricsLogEvent isLocal]
  -[HMDCameraMetricsLogEvent initWithSessionID:cameraAccessory:isLocal:]


HMDCameraMetricsStreamLogEvent : HMDCameraMetricsLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSNumber *referenceTimestamp

  // instance methods
  -[HMDCameraMetricsStreamLogEvent .cxx_destruct]
  -[HMDCameraMetricsStreamLogEvent AWDMessageType]
  -[HMDCameraMetricsStreamLogEvent metricForAWD]
  -[HMDCameraMetricsStreamLogEvent initWithSessionID:cameraAccessory:isLocal:]
  -[HMDCameraMetricsStreamLogEvent referenceTimestamp]
  -[HMDCameraMetricsStreamLogEvent setReferenceTimestamp:]
  -[HMDCameraMetricsStreamLogEvent timeSinceReference:]
  -[HMDCameraMetricsStreamLogEvent addInitialConfiguration:]
  -[HMDCameraMetricsStreamLogEvent addReconfiguration:]
  -[HMDCameraMetricsStreamLogEvent addIDSConnectionSetup:]
  -[HMDCameraMetricsStreamLogEvent addIDSSession:]
  -[HMDCameraMetricsStreamLogEvent addStreamMessaging:]


HMDCameraMetricsSnapshotLogEvent : HMDCameraMetricsLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL snapshotForNotification
 @property  NSNumber *referenceTimestamp

  // instance methods
  -[HMDCameraMetricsSnapshotLogEvent .cxx_destruct]
  -[HMDCameraMetricsSnapshotLogEvent AWDMessageType]
  -[HMDCameraMetricsSnapshotLogEvent metricForAWD]
  -[HMDCameraMetricsSnapshotLogEvent initWithSessionID:cameraAccessory:isLocal:snapshotForNotification:]
  -[HMDCameraMetricsSnapshotLogEvent referenceTimestamp]
  -[HMDCameraMetricsSnapshotLogEvent setReferenceTimestamp:]
  -[HMDCameraMetricsSnapshotLogEvent snapshotForNotification]
  -[HMDCameraMetricsSnapshotLogEvent timeSinceReference:]
  -[HMDCameraMetricsSnapshotLogEvent addIDSSession:]
  -[HMDCameraMetricsSnapshotLogEvent addSnapshotMessaging:]
  -[HMDCameraMetricsSnapshotLogEvent addIDSTransfer:]


HMDHomeLockNotificationManagerDataSource : HMFObject <HMDHomeLockNotificationManagerDataSource>
 @property  BOOL residentCapable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeLockNotificationManagerDataSource isResidentCapable]


HMDEducationModeMessageFilter : HMFMessageFilter
  // class methods
  +[HMDEducationModeMessageFilter filterMessage:withPolicies:error:]


HMDCoordinationPrimaryElectionLogEvent : HMMLogEvent
 @property  BOOL isPrimary
 @property  BOOL didChangePrimary

  // instance methods
  -[HMDCoordinationPrimaryElectionLogEvent isPrimary]
  -[HMDCoordinationPrimaryElectionLogEvent setIsPrimary:]
  -[HMDCoordinationPrimaryElectionLogEvent didChangePrimary]
  -[HMDCoordinationPrimaryElectionLogEvent setDidChangePrimary:]


HMDCoordinationPrimaryMeshLogEvent : HMMLogEvent
 @property  BOOL isLeader
 @property  BOOL didChangeLeader
 @property  BOOL didElectLeader
 @property  BOOL isInSecondaryMesh

  // instance methods
  -[HMDCoordinationPrimaryMeshLogEvent isLeader]
  -[HMDCoordinationPrimaryMeshLogEvent setIsLeader:]
  -[HMDCoordinationPrimaryMeshLogEvent didChangeLeader]
  -[HMDCoordinationPrimaryMeshLogEvent setDidChangeLeader:]
  -[HMDCoordinationPrimaryMeshLogEvent didElectLeader]
  -[HMDCoordinationPrimaryMeshLogEvent setDidElectLeader:]
  -[HMDCoordinationPrimaryMeshLogEvent isInSecondaryMesh]
  -[HMDCoordinationPrimaryMeshLogEvent setIsInSecondaryMesh:]


HMDHomeAdministratorConfigurationOperation : HMFOperation <HMFLogging>
 @property  HMFMessage *message
 @property  HMDHome *home
 @property  HMFMessageDispatcher *dispatcher
 @property  BOOL shouldSuspendSyncing
 @property  @? sendCompletionBlock
 @property  @? responseHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeAdministratorConfigurationOperation timeout]
  +[HMDHomeAdministratorConfigurationOperation logCategory]

  // instance methods
  -[HMDHomeAdministratorConfigurationOperation home]
  -[HMDHomeAdministratorConfigurationOperation responseHandler]
  -[HMDHomeAdministratorConfigurationOperation logIdentifier]
  -[HMDHomeAdministratorConfigurationOperation .cxx_destruct]
  -[HMDHomeAdministratorConfigurationOperation setResponseHandler:]
  -[HMDHomeAdministratorConfigurationOperation dispatcher]
  -[HMDHomeAdministratorConfigurationOperation main]
  -[HMDHomeAdministratorConfigurationOperation message]
  -[HMDHomeAdministratorConfigurationOperation initWithMessage:home:dispatcher:]
  -[HMDHomeAdministratorConfigurationOperation shouldSuspendSyncing]
  -[HMDHomeAdministratorConfigurationOperation setShouldSuspendSyncing:]
  -[HMDHomeAdministratorConfigurationOperation sendCompletionBlock]
  -[HMDHomeAdministratorConfigurationOperation setSendCompletionBlock:]


HMDApplicationRegistry : HMFObject <HMFLogging, LSApplicationWorkspaceObserverProtocol>
 @property  NSArray *applications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDApplicationRegistry logCategory]
  +[HMDApplicationRegistry sharedRegistry]

  // instance methods
  -[HMDApplicationRegistry applicationsDidInstall:]
  -[HMDApplicationRegistry applications]
  -[HMDApplicationRegistry applicationsDidUninstall:]
  -[HMDApplicationRegistry dealloc]
  -[HMDApplicationRegistry .cxx_destruct]
  -[HMDApplicationRegistry applicationInfoForBundleIdentifier:]
  -[HMDApplicationRegistry init]
  -[HMDApplicationRegistry applicationInfoForBundleURL:]


HMDCHIPHomeDataSource : HMFObject <CHIPPluginFabricStorageDataSource>
 @property  HMDHome *home
 @property  NSNumber *fabricID
 @property  NSNumber *fabricIndex
 @property  NSNumber *lastNodeID
 @property  NSData *rootCertificate
 @property  NSData *operationalCertificate
 @property  NSData *intermediateCertificate
 @property  NSDictionary *keyValueStore
 @property  NSSet *allNodeIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCHIPHomeDataSource logCategory]

  // instance methods
  -[HMDCHIPHomeDataSource home]
  -[HMDCHIPHomeDataSource logIdentifier]
  -[HMDCHIPHomeDataSource .cxx_destruct]
  -[HMDCHIPHomeDataSource keyValueStore]
  -[HMDCHIPHomeDataSource setHome:]
  -[HMDCHIPHomeDataSource fabricID]
  -[HMDCHIPHomeDataSource fabricIndex]
  -[HMDCHIPHomeDataSource lastNodeID]
  -[HMDCHIPHomeDataSource rootCertificate]
  -[HMDCHIPHomeDataSource operationalCertificate]
  -[HMDCHIPHomeDataSource intermediateCertificate]
  -[HMDCHIPHomeDataSource updateKeyValueStore:completion:]
  -[HMDCHIPHomeDataSource updateFabricID:completion:]
  -[HMDCHIPHomeDataSource updateFabricIndex:completion:]
  -[HMDCHIPHomeDataSource updateLastNodeID:completion:]
  -[HMDCHIPHomeDataSource updateRootCertificate:completion:]
  -[HMDCHIPHomeDataSource updateOperationalCertificate:completion:]
  -[HMDCHIPHomeDataSource updateIntermediateCertificate:completion:]
  -[HMDCHIPHomeDataSource storageDataSourceForDeviceWithNodeID:]
  -[HMDCHIPHomeDataSource allNodeIDs]
  -[HMDCHIPHomeDataSource initWithFabricID:fabricIndex:home:]
  -[HMDCHIPHomeDataSource _updateHomeModelWithLabel:completion:block:]


HMDRemovedUser : HMFObject <NSSecureCoding>
 @property  HMDUser *user
 @property  NSDate *expirationDate
 @property  BOOL removalInProgress

  // class methods
  +[HMDRemovedUser supportsSecureCoding]
  +[HMDRemovedUser removedUserWithUser:]

  // instance methods
  -[HMDRemovedUser expirationDate]
  -[HMDRemovedUser encodeWithCoder:]
  -[HMDRemovedUser isEqualToUser:]
  -[HMDRemovedUser user]
  -[HMDRemovedUser .cxx_destruct]
  -[HMDRemovedUser isExpired]
  -[HMDRemovedUser initWithCoder:]
  -[HMDRemovedUser initWithUser:expiration:]
  -[HMDRemovedUser isEqualToUserID:]
  -[HMDRemovedUser isRemovalInProgress]
  -[HMDRemovedUser setRemovalInProgress:]


HMDRetailDemoModeRequestHandler : HMFObject <HMFMessageReceiver>
 @property  HMDHomeManager *homeManager
 @property  NSUUID *identifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDRelaunchHandling> *relaunchHandler
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRetailDemoModeRequestHandler configure]
  -[HMDRetailDemoModeRequestHandler identifier]
  -[HMDRetailDemoModeRequestHandler workQueue]
  -[HMDRetailDemoModeRequestHandler .cxx_destruct]
  -[HMDRetailDemoModeRequestHandler messageTargetUUID]
  -[HMDRetailDemoModeRequestHandler homeManager]
  -[HMDRetailDemoModeRequestHandler messageReceiveQueue]
  -[HMDRetailDemoModeRequestHandler messageDispatcher]
  -[HMDRetailDemoModeRequestHandler _handleConfigRetailDemoModeMessage:]
  -[HMDRetailDemoModeRequestHandler initWithHomeManager:messageDispatcher:relaunchHandler:]
  -[HMDRetailDemoModeRequestHandler _handleConfigRetailDemoModeMessageForPrepare:]
  -[HMDRetailDemoModeRequestHandler _handleConfigRetailDemoModeMessageForFinalize:]
  -[HMDRetailDemoModeRequestHandler relaunchHandler]


HMDRemoteSendMessageOperation : HMFOperation <HMFLogging, HMFObject>
 @property  HMDSecureRemoteMessageTransport *transport
 @property  BOOL messageResponseHandled
 @property  HMFMessage *message
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDRemoteSendMessageOperation shortDescription]
  +[HMDRemoteSendMessageOperation logCategory]

  // instance methods
  -[HMDRemoteSendMessageOperation transport]
  -[HMDRemoteSendMessageOperation logIdentifier]
  -[HMDRemoteSendMessageOperation attributeDescriptions]
  -[HMDRemoteSendMessageOperation privateDescription]
  -[HMDRemoteSendMessageOperation .cxx_destruct]
  -[HMDRemoteSendMessageOperation shortDescription]
  -[HMDRemoteSendMessageOperation main]
  -[HMDRemoteSendMessageOperation message]
  -[HMDRemoteSendMessageOperation cancelWithError:]
  -[HMDRemoteSendMessageOperation initWithMessage:transport:]
  -[HMDRemoteSendMessageOperation _respondWithError:playload:]
  -[HMDRemoteSendMessageOperation isMessageResponseHandled]
  -[HMDRemoteSendMessageOperation setMessageResponseHandled:]


HMDCompositeSettingsControllerManagerOnboardingLogEvent : HMMLogEvent <HMDCompositeSettingsControllerManagerOnboardingLogEvent, HMMCoreAnalyticsLogging>
 @property  NSError *error
 @property  long long siriEndpointCertificationReason
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDCompositeSettingsControllerManagerOnboardingLogEvent eventName]
  -[HMDCompositeSettingsControllerManagerOnboardingLogEvent serializedEvent]
  -[HMDCompositeSettingsControllerManagerOnboardingLogEvent siriEndpointCertificationReason]
  -[HMDCompositeSettingsControllerManagerOnboardingLogEvent initWithError:siriEndpointCertificationReason:]


HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler : HMFObject <HMFLogging, HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler>
 @property  BOOL running
 @property  NSObject<OS_xpc_object> *runningActivity
 @property  NSObject<OS_xpc_object> *overrideCriteria
 @property  double currentInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *identifier
 @property  double interval
 @property  double retryInterval
 @property  <HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchSchedulerDelegate> *delegate

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __unregisterActivity:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler setRunning:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler identifier]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler delegate]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler dealloc]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler isRunning]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler stop]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler currentInterval]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler start]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler interval]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler retryInterval]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler initWithIdentifier:interval:retryInterval:delegate:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __initialCriteria]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __registerActivity]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __checkInActivity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __runActivity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __unregisterActivity]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler __transitionActivity:state:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler runningActivity]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler setRunningActivity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler overrideCriteria]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler setOverrideCriteria:]


THAButton : NSObject
 @property  unsigned char identifier
 @property  unsigned long type

  // instance methods
  -[THAButton identifier]
  -[THAButton type]
  -[THAButton initWithType:identifier:]
  -[THAButton setType:]
  -[THAButton setIdentifier:]
  -[THAButton isEqual:]


THAButtonEvent : NSObject
 @property  THAButton *button
 @property  unsigned long state
 @property  double timestamp

  // instance methods
  -[THAButtonEvent setTimestamp:]
  -[THAButtonEvent button]
  -[THAButtonEvent state]
  -[THAButtonEvent .cxx_destruct]
  -[THAButtonEvent setButton:]
  -[THAButtonEvent timestamp]
  -[THAButtonEvent serialize]
  -[THAButtonEvent setState:]


THAController : NSObject
 @property  NSSet *selectedButtons
 @property  NSString *name
 @property  unsigned int identifier
 @property  unsigned long ticksPerSecond
 @property  BOOL supportsSiri
 @property  BOOL connected
 @property  BOOL selected

  // class methods
  +[THAController selectButtonConfiguration:supportsSiri:]

  // instance methods
  -[THAController identifier]
  -[THAController setConnected:]
  -[THAController connected]
  -[THAController setSelected:]
  -[THAController .cxx_destruct]
  -[THAController setName:]
  -[THAController name]
  -[THAController selected]
  -[THAController supportsSiri]
  -[THAController setSupportsSiri:]
  -[THAController ticksPerSecond]
  -[THAController setTicksPerSecond:]
  -[THAController initWithName:identifier:ticksPerSecond:supportedButtons:supportsSiri:]
  -[THAController updateSelectedButtons:]
  -[THAController dispatchButtonEvent:]
  -[THAController selectedButtons]
  -[THAController setSelectedButtons:]


HMDSelectedSleepConfigurationTLV : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDSleepConfigurationOperationTypeWrapper *operationType
 @property  HMDSleepConfigurationOperationStatusWrapper *operationStatus
 @property  HAPTLVUnsignedNumberValue *backoffTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSelectedSleepConfigurationTLV parsedFromData:error:]

  // instance methods
  -[HMDSelectedSleepConfigurationTLV operationType]
  -[HMDSelectedSleepConfigurationTLV setOperationType:]
  -[HMDSelectedSleepConfigurationTLV parseFromData:error:]
  -[HMDSelectedSleepConfigurationTLV .cxx_destruct]
  -[HMDSelectedSleepConfigurationTLV copyWithZone:]
  -[HMDSelectedSleepConfigurationTLV isEqual:]
  -[HMDSelectedSleepConfigurationTLV init]
  -[HMDSelectedSleepConfigurationTLV serializeWithError:]
  -[HMDSelectedSleepConfigurationTLV initWithOperationType:operationStatus:backoffTime:]
  -[HMDSelectedSleepConfigurationTLV operationStatus]
  -[HMDSelectedSleepConfigurationTLV setOperationStatus:]
  -[HMDSelectedSleepConfigurationTLV backoffTime]
  -[HMDSelectedSleepConfigurationTLV setBackoffTime:]


HMDSupportedSleepConfigurationTLV : NSObject <NSCopying, HAPTLVProtocol>
 @property  HAPTLVUnsignedNumberValue *version
 @property  NSMutableArray *supportedWoLPacketConfigurations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSupportedSleepConfigurationTLV parsedFromData:error:]

  // instance methods
  -[HMDSupportedSleepConfigurationTLV parseFromData:error:]
  -[HMDSupportedSleepConfigurationTLV .cxx_destruct]
  -[HMDSupportedSleepConfigurationTLV version]
  -[HMDSupportedSleepConfigurationTLV copyWithZone:]
  -[HMDSupportedSleepConfigurationTLV setVersion:]
  -[HMDSupportedSleepConfigurationTLV isEqual:]
  -[HMDSupportedSleepConfigurationTLV init]
  -[HMDSupportedSleepConfigurationTLV serializeWithError:]
  -[HMDSupportedSleepConfigurationTLV initWithVersion:supportedWoLPacketConfigurations:]
  -[HMDSupportedSleepConfigurationTLV supportedWoLPacketConfigurations]
  -[HMDSupportedSleepConfigurationTLV setSupportedWoLPacketConfigurations:]


HMDWakePacketConfigurationTLV : NSObject <NSCopying, HAPTLVProtocol>
 @property  HMDSleepConfigurationWakePacketTypeWrapper *wakePacketType
 @property  HAPTLVUnsignedNumberValue *wakeDestinationPort
 @property  NSData *wakeDestinationAddress
 @property  HMDSleepConfigurationWakeUpTypeWrapper *wakeType
 @property  NSData *wakePattern
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWakePacketConfigurationTLV parsedFromData:error:]

  // instance methods
  -[HMDWakePacketConfigurationTLV parseFromData:error:]
  -[HMDWakePacketConfigurationTLV .cxx_destruct]
  -[HMDWakePacketConfigurationTLV copyWithZone:]
  -[HMDWakePacketConfigurationTLV isEqual:]
  -[HMDWakePacketConfigurationTLV init]
  -[HMDWakePacketConfigurationTLV wakeType]
  -[HMDWakePacketConfigurationTLV serializeWithError:]
  -[HMDWakePacketConfigurationTLV wakePattern]
  -[HMDWakePacketConfigurationTLV wakePacketType]
  -[HMDWakePacketConfigurationTLV setWakePattern:]
  -[HMDWakePacketConfigurationTLV initWithWakePacketType:wakeDestinationPort:wakeDestinationAddress:wakeType:wakePattern:]
  -[HMDWakePacketConfigurationTLV setWakePacketType:]
  -[HMDWakePacketConfigurationTLV wakeDestinationPort]
  -[HMDWakePacketConfigurationTLV setWakeDestinationPort:]
  -[HMDWakePacketConfigurationTLV wakeDestinationAddress]
  -[HMDWakePacketConfigurationTLV setWakeDestinationAddress:]
  -[HMDWakePacketConfigurationTLV setWakeType:]


HMDMediaGroupsAggregateData : NSObject <HMEProtoBufferCoding, NSCopying, NSMutableCopying>
 @property  NSArray *destinations
 @property  NSArray *destinationControllersData
 @property  NSArray *groups

  // instance methods
  -[HMDMediaGroupsAggregateData setGroups:]
  -[HMDMediaGroupsAggregateData groups]
  -[HMDMediaGroupsAggregateData setDestinations:]
  -[HMDMediaGroupsAggregateData .cxx_destruct]
  -[HMDMediaGroupsAggregateData destinations]
  -[HMDMediaGroupsAggregateData copyWithZone:]
  -[HMDMediaGroupsAggregateData mutableCopyWithZone:]
  -[HMDMediaGroupsAggregateData isEqual:]
  -[HMDMediaGroupsAggregateData encodeToProtoBufferData]
  -[HMDMediaGroupsAggregateData initWithProtoBufferData:]
  -[HMDMediaGroupsAggregateData groupWithIdentifier:]
  -[HMDMediaGroupsAggregateData destinationControllersData]
  -[HMDMediaGroupsAggregateData initWithDestinations:destinationControllersData:groups:]
  -[HMDMediaGroupsAggregateData initWithDestinations:destinationControllersData:]
  -[HMDMediaGroupsAggregateData decodeDestinationsWithEncodedDestinations:]
  -[HMDMediaGroupsAggregateData decodeDestinationControllersWithEncodedDestinationControllers:]
  -[HMDMediaGroupsAggregateData decodeMediaGroupsWithEncodedMediaGroups:]
  -[HMDMediaGroupsAggregateData encodedDestinationEvents]
  -[HMDMediaGroupsAggregateData encodedDestinationControllerEvents]
  -[HMDMediaGroupsAggregateData encodedMediaGroupEvents]
  -[HMDMediaGroupsAggregateData sentinelIdentifier]
  -[HMDMediaGroupsAggregateData sentinelDestinationControllerData]
  -[HMDMediaGroupsAggregateData sentinelDestination]
  -[HMDMediaGroupsAggregateData sentinelGroup]
  -[HMDMediaGroupsAggregateData setDestinationControllersData:]


HMDMutableMediaGroupsAggregateData : HMDMediaGroupsAggregateData
 @property  NSArray *destinations
 @property  NSArray *destinationControllersData
 @property  NSArray *groups

  // instance methods
  -[HMDMutableMediaGroupsAggregateData copyWithZone:]


HMDMessageHandlerMetricsDispatcher : HMFObject
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter

  // class methods
  +[HMDMessageHandlerMetricsDispatcher logCategory]

  // instance methods
  -[HMDMessageHandlerMetricsDispatcher identifier]
  -[HMDMessageHandlerMetricsDispatcher logIdentifier]
  -[HMDMessageHandlerMetricsDispatcher attributeDescriptions]
  -[HMDMessageHandlerMetricsDispatcher privateDescription]
  -[HMDMessageHandlerMetricsDispatcher .cxx_destruct]
  -[HMDMessageHandlerMetricsDispatcher logEventSubmitter]
  -[HMDMessageHandlerMetricsDispatcher initWithIdentifier:logEventSubmitter:]
  -[HMDMessageHandlerMetricsDispatcher submitFailureEventOfType:message:]


HMDNetworkRouterFirewallRuleLAN : HMDNetworkRouterFirewallRule
 @property  unsigned long purpose
 @property  BOOL allowInterAccessoryConnections
 @property  unsigned char direction
 @property  BOOL requiredForHAPFunctionality

  // class methods
  +[HMDNetworkRouterFirewallRuleLAN createWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:ruleDictionary:error:]
  +[HMDNetworkRouterFirewallRuleLAN __decodePurpose:purpose:error:]
  +[HMDNetworkRouterFirewallRuleLAN __decodeFlags:critical:allowInterAccessoryConnections:requiredForHAPFunctionality:error:]
  +[HMDNetworkRouterFirewallRuleLAN __decodeType:type:error:]
  +[HMDNetworkRouterFirewallRuleLAN __decodeDirection:direction:error:]
  +[HMDNetworkRouterFirewallRuleLAN __decodeTransportProtocolFromJSONDictionary:key:transportProtocol:error:]
  +[HMDNetworkRouterFirewallRuleLAN createWithJSONDictionary:error:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleLAN purpose]
  -[HMDNetworkRouterFirewallRuleLAN attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleLAN direction]
  -[HMDNetworkRouterFirewallRuleLAN isEqual:]
  -[HMDNetworkRouterFirewallRuleLAN initWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:]
  -[HMDNetworkRouterFirewallRuleLAN prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleLAN areConnectionsWithOtherAccessoriesAllowed]
  -[HMDNetworkRouterFirewallRuleLAN isRequiredForHAPFunctionality]


HMDDevice : HMFObject <HMFObject, HMFLogging, HMDBackingStoreObjectProtocol, HMDBackingStoreModelBackedObjectProtocol, HMDRemoteAddressable, HMFMerging, NSSecureCoding>
 @property  NSArray *identities
 @property  NSUUID *idsIdentifierHash
 @property  HMFProductInfo *productInfo
 @property  HMDAccount *account
 @property  BOOL dirty
 @property  BOOL locallyTracked
 @property  BOOL cloudTracked
 @property  HMDDeviceCapabilities *capabilities
 @property  NSData *pushToken
 @property  NSUUID *idsIdentifier
 @property  NSUUID *sharedUserIDSIdentifier
 @property  NSUUID *identifier
 @property  BOOL currentDevice
 @property  NSString *name
 @property  HMDHomeKitVersion *version
 @property  HMDRPIdentity *rpIdentity
 @property  HMDDeviceAddress *deviceAddress
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  Class modelClass
 @property  NSUUID *modelIdentifier
 @property  NSUUID *modelParentIdentifier

  // class methods
  +[HMDDevice supportsSecureCoding]
  +[HMDDevice logCategory]
  +[HMDDevice destinationForDevice:service:]
  +[HMDDevice deviceWithDestination:]
  +[HMDDevice deviceWithHandle:]

  // instance methods
  -[HMDDevice pushToken]
  -[HMDDevice modelClass]
  -[HMDDevice setDirty:]
  -[HMDDevice identities]
  -[HMDDevice isDirty]
  -[HMDDevice account]
  -[HMDDevice idsIdentifier]
  -[HMDDevice setAccount:]
  -[HMDDevice identifier]
  -[HMDDevice logIdentifier]
  -[HMDDevice isCurrentDevice]
  -[HMDDevice setRpIdentity:]
  -[HMDDevice encodeWithCoder:]
  -[HMDDevice productInfo]
  -[HMDDevice modelIdentifier]
  -[HMDDevice attributeDescriptions]
  -[HMDDevice dealloc]
  -[HMDDevice .cxx_destruct]
  -[HMDDevice capabilities]
  -[HMDDevice handles]
  -[HMDDevice version]
  -[HMDDevice rpIdentity]
  -[HMDDevice shortDescription]
  -[HMDDevice setName:]
  -[HMDDevice setCapabilities:]
  -[HMDDevice name]
  -[HMDDevice setHandles:]
  -[HMDDevice setVersion:]
  -[HMDDevice isEqual:]
  -[HMDDevice init]
  -[HMDDevice initWithCoder:]
  -[HMDDevice updateVersion:]
  -[HMDDevice deviceAddress]
  -[HMDDevice setProductInfo:]
  -[HMDDevice mergeObject:]
  -[HMDDevice initWithObjectModel:]
  -[HMDDevice isBackingStorageEqual:]
  -[HMDDevice initWithService:device:]
  -[HMDDevice deviceForIDSService:]
  -[HMDDevice transactionObjectUpdated:newValues:message:]
  -[HMDDevice transactionObjectRemoved:message:]
  -[HMDDevice modelObjectWithChangeType:version:]
  -[HMDDevice startObservingIsPublishingForService:]
  -[HMDDevice backingStoreObjectsWithChangeType:version:]
  -[HMDDevice modelBackedObjects]
  -[HMDDevice modelParentIdentifier]
  -[HMDDevice remoteDestinationString]
  -[HMDDevice isLocallyTracked]
  -[HMDDevice setLocallyTracked:]
  -[HMDDevice updateWithDevice:]
  -[HMDDevice initWithIdentifier:handles:name:productInfo:version:capabilities:]
  -[HMDDevice isRelatedToDevice:]
  -[HMDDevice localHandles]
  -[HMDDevice globalHandles]
  -[HMDDevice globalDestination]
  -[HMDDevice __handleAccountHandleUpdated:]
  -[HMDDevice idsIdentifierHash]
  -[HMDDevice setIDSIdentifierHash:]
  -[HMDDevice __updateDeviceWithActions:]
  -[HMDDevice isPublishingOnObservedNetService]
  -[HMDDevice isCloudTracked]
  -[HMDDevice setCloudTracked:]
  -[HMDDevice sharedUserIDSIdentifier]
  -[HMDDevice setSharedUserIDSIdentifier:]


HMDDeviceModel : HMDBackingStoreModelObject
 @property  NSUUID *identifier
 @property  NSArray *handles
 @property  NSString *name
 @property  HMDHomeKitVersion *version
 @property  HMFProductInfo *productInfo
 @property  HMDRPIdentity *rpIdentity
 @property  NSArray *deviceHandles

  // class methods
  +[HMDDeviceModel properties]
  +[HMDDeviceModel schemaHashRoot]

  // instance methods
  -[HMDDeviceModel diff:differingFields:]
  -[HMDDeviceModel deviceHandles]


HMDPrimaryElectionLegacyAddOn : NSObject <HMFTimerDelegate, HMFLogging, HMFMessageReceiver, HMDPrimaryResidentElectionAddOn>
 @property  BOOL confirming
 @property  HMDResidentDevice *preferredElector
 @property  BOOL isAtHome
 @property  HMFTimer *residentMonitorTimer
 @property  NSHashTable *devicePreferenceDataSources
 @property  <HMDResidentDeviceManagerContext> *context
 @property  <HMDPrimaryResidentElectionAddOnDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDPrimaryElectionLegacyAddOn logCategory]
  +[HMDPrimaryElectionLegacyAddOn compareElectionVersions:otherVersion:]

  // instance methods
  -[HMDPrimaryElectionLegacyAddOn addDataSource:]
  -[HMDPrimaryElectionLegacyAddOn dumpState]
  -[HMDPrimaryElectionLegacyAddOn timerDidFire:]
  -[HMDPrimaryElectionLegacyAddOn logIdentifier]
  -[HMDPrimaryElectionLegacyAddOn initWithContext:]
  -[HMDPrimaryElectionLegacyAddOn setDelegate:]
  -[HMDPrimaryElectionLegacyAddOn delegate]
  -[HMDPrimaryElectionLegacyAddOn .cxx_destruct]
  -[HMDPrimaryElectionLegacyAddOn messageTargetUUID]
  -[HMDPrimaryElectionLegacyAddOn stop]
  -[HMDPrimaryElectionLegacyAddOn isConfirming]
  -[HMDPrimaryElectionLegacyAddOn start]
  -[HMDPrimaryElectionLegacyAddOn context]
  -[HMDPrimaryElectionLegacyAddOn messageReceiveQueue]
  -[HMDPrimaryElectionLegacyAddOn setConfirming:]
  -[HMDPrimaryElectionLegacyAddOn registerForMessages]
  -[HMDPrimaryElectionLegacyAddOn atHomeLevelChanged:]
  -[HMDPrimaryElectionLegacyAddOn confirmAsResident]
  -[HMDPrimaryElectionLegacyAddOn confirmOnAvailability]
  -[HMDPrimaryElectionLegacyAddOn confirmWithCompletionHandler:]
  -[HMDPrimaryElectionLegacyAddOn devicePreferenceDataSources]
  -[HMDPrimaryElectionLegacyAddOn handleBatteryStateChange:]
  -[HMDPrimaryElectionLegacyAddOn handleBatteryLevelChange:]
  -[HMDPrimaryElectionLegacyAddOn _handleResidentElectionParameters:]
  -[HMDPrimaryElectionLegacyAddOn __handleConfirmationRequest:]
  -[HMDPrimaryElectionLegacyAddOn _handleConfirmResidentDevice:]
  -[HMDPrimaryElectionLegacyAddOn performElection]
  -[HMDPrimaryElectionLegacyAddOn performElectionWithReason:]
  -[HMDPrimaryElectionLegacyAddOn primaryResidentChanged:previousResidentDevice:]
  -[HMDPrimaryElectionLegacyAddOn computePreferredElector:]
  -[HMDPrimaryElectionLegacyAddOn confirmPrimaryResident]
  -[HMDPrimaryElectionLegacyAddOn isAtHome]
  -[HMDPrimaryElectionLegacyAddOn preferredElector]
  -[HMDPrimaryElectionLegacyAddOn residentMonitorTimer]
  -[HMDPrimaryElectionLegacyAddOn setResidentMonitorTimer:]


HMDSnapshotSession : HMFObject <HMFLogging>
 @property  HMDCameraSnapshotMetrics *snapshotMetrics
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  <HMDCameraGetSnapshotProtocol> *snapshotGetter
 @property  HMDSnapshotCompletionTimer *snapshotCompletionTimer
 @property  NSMutableArray *sessionMessages
 @property  unsigned long streamingTierType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotSession logCategory]

  // instance methods
  -[HMDSnapshotSession logIdentifier]
  -[HMDSnapshotSession sessionID]
  -[HMDSnapshotSession dealloc]
  -[HMDSnapshotSession .cxx_destruct]
  -[HMDSnapshotSession streamingTierType]
  -[HMDSnapshotSession initWithSessionID:accessory:snapshotGetter:message:waitPeriod:streamingTierType:cameraLocallyReachable:snapshotForNotification:]
  -[HMDSnapshotSession respond:payload:]
  -[HMDSnapshotSession snapshotGetter]
  -[HMDSnapshotSession snapshotCompletionTimer]
  -[HMDSnapshotSession sessionMessages]
  -[HMDSnapshotSession snapshotMetrics]


HMDSoftwareUpdateStartedEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL automaticUpdateEnabled

  // class methods
  +[HMDSoftwareUpdateStartedEvent eventUpdateStartedWithAutomaticUpdateEnabled:]

  // instance methods
  -[HMDSoftwareUpdateStartedEvent AWDMessageType]
  -[HMDSoftwareUpdateStartedEvent metricForAWD]
  -[HMDSoftwareUpdateStartedEvent isAutomaticUpdateEnabled]
  -[HMDSoftwareUpdateStartedEvent setAutomaticUpdateEnabled:]


HMDAccessoryProfile : HMFObject <HMDBulletinIdentifiers, HMDHomeMessageReceiver, HMFDumpState, HMFLogging, NSSecureCoding>
 @property  NSString *contextID
 @property  NSUUID *contextSPIUniqueIdentifier
 @property  NSString *logIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSUUID *uniqueIdentifier
 @property  HMDAccessory *accessory
 @property  NSArray *services
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryProfile supportsSecureCoding]
  +[HMDAccessoryProfile logCategory]
  +[HMDAccessoryProfile hasMessageReceiverChildren]

  // instance methods
  -[HMDAccessoryProfile dumpState]
  -[HMDAccessoryProfile accessory]
  -[HMDAccessoryProfile logIdentifier]
  -[HMDAccessoryProfile encodeWithCoder:]
  -[HMDAccessoryProfile workQueue]
  -[HMDAccessoryProfile services]
  -[HMDAccessoryProfile .cxx_destruct]
  -[HMDAccessoryProfile messageTargetUUID]
  -[HMDAccessoryProfile contextID]
  -[HMDAccessoryProfile uniqueIdentifier]
  -[HMDAccessoryProfile messageReceiveQueue]
  -[HMDAccessoryProfile msgDispatcher]
  -[HMDAccessoryProfile isEqual:]
  -[HMDAccessoryProfile initWithCoder:]
  -[HMDAccessoryProfile unconfigure]
  -[HMDAccessoryProfile registerForMessages]
  -[HMDAccessoryProfile contextSPIUniqueIdentifier]
  -[HMDAccessoryProfile removeCloudData]
  -[HMDAccessoryProfile runtimeState]
  -[HMDAccessoryProfile initWithAccessory:uniqueIdentifier:services:workQueue:]
  -[HMDAccessoryProfile configureWithMessageDispatcher:configurationTracker:]
  -[HMDAccessoryProfile handleInitialState]
  -[HMDAccessoryProfile initWithAccessory:uniqueIdentifier:services:]
  -[HMDAccessoryProfile findServiceWithType:]


HMDBackingStoreLogRecord : NSObject
 @property  long long rowID
 @property  long long xactID
 @property  long long pushed
 @property  NSData *data
 @property  long long type
 @property  long long encoding
 @property  CKRecordID *root

  // instance methods
  -[HMDBackingStoreLogRecord rowID]
  -[HMDBackingStoreLogRecord encoding]
  -[HMDBackingStoreLogRecord type]
  -[HMDBackingStoreLogRecord .cxx_destruct]
  -[HMDBackingStoreLogRecord initWithArray:]
  -[HMDBackingStoreLogRecord root]
  -[HMDBackingStoreLogRecord data]
  -[HMDBackingStoreLogRecord xactID]
  -[HMDBackingStoreLogRecord pushed]


HMDBackingStoreLocal : HMFObject <HMFLogging>
 @property  BOOL isTransactionReplayFeatureEnabled
 @property  NSMutableArray *zoneCache
 @property  NSMutableDictionary *storeCache
 @property  NSString *datastoreFile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreLocal logCategory]
  +[HMDBackingStoreLocal cleanDatastoreFilesAt:everything:]

  // instance methods
  -[HMDBackingStoreLocal logIdentifier]
  -[HMDBackingStoreLocal storeCache]
  -[HMDBackingStoreLocal flush:]
  -[HMDBackingStoreLocal dealloc]
  -[HMDBackingStoreLocal .cxx_destruct]
  -[HMDBackingStoreLocal _begin]
  -[HMDBackingStoreLocal setStoreCache:]
  -[HMDBackingStoreLocal initWithDatastore:]
  -[HMDBackingStoreLocal _commit]
  -[HMDBackingStoreLocal _freeResources]
  -[HMDBackingStoreLocal _rollback]
  -[HMDBackingStoreLocal _runSQLite3:bind:error:]
  -[HMDBackingStoreLocal _createNewDatastore:]
  -[HMDBackingStoreLocal _createDatastoreTables:]
  -[HMDBackingStoreLocal initWithDB:migrate:error:]
  -[HMDBackingStoreLocal initWithDB:migrate:shouldEnableTransactionReplayMode:error:]
  -[HMDBackingStoreLocal initWithDatastore:shouldEnableTransactionReplayMode:]
  -[HMDBackingStoreLocal _updateRecordWithGroupID:name:schema:]
  -[HMDBackingStoreLocal _instanceResources:migrate:]
  -[HMDBackingStoreLocal _fillStoreCache]
  -[HMDBackingStoreLocal _numUncommittedTransactions]
  -[HMDBackingStoreLocal _dropUncommittedUnpushedTransactions]
  -[HMDBackingStoreLocal _fetchUncommittedAndPushedTransactions]
  -[HMDBackingStoreLocal _fetchIDForStore:error:]
  -[HMDBackingStoreLocal _fillZoneCache]
  -[HMDBackingStoreLocal _insertZoneWithName:error:]
  -[HMDBackingStoreLocal _deleteZoneWithID:]
  -[HMDBackingStoreLocal _fetchZonesWithError:]
  -[HMDBackingStoreLocal _insertGroupWithZoneID:root:owner:subscription:error:]
  -[HMDBackingStoreLocal _deleteGroupWithID:]
  -[HMDBackingStoreLocal _updateGroupWithID:serverChangeToken:]
  -[HMDBackingStoreLocal _updateGroupWithID:subscription:]
  -[HMDBackingStoreLocal _fetchGroupsForZone:withError:]
  -[HMDBackingStoreLocal _updateRecordWithGroupID:store:name:record:uuid:parentUUID:type:data:encoding:schema:]
  -[HMDBackingStoreLocal _updateRecordWithGroupID:store:record:data:encoding:]
  -[HMDBackingStoreLocal _updateRecordWithGroupID:store:record:]
  -[HMDBackingStoreLocal _updateRecordWithGroupID:store:name:model:]
  -[HMDBackingStoreLocal _deleteRecordWithGroupID:recordName:]
  -[HMDBackingStoreLocal _fetchRecordCountWithGroupID:callback:]
  -[HMDBackingStoreLocal _fetchRecordTypeSchemaWithGroupID:callback:]
  -[HMDBackingStoreLocal _fetchRecordMapWithGroupID:callback:]
  -[HMDBackingStoreLocal _fetchRecordsWithGroupID:callback:]
  -[HMDBackingStoreLocal _fetchRecordsWithGroupID:uuids:callback:]
  -[HMDBackingStoreLocal _fetchRecordWithUUID:root:error:]
  -[HMDBackingStoreLocal _fetchRecordsWithGroupID:parentUuids:callback:]
  -[HMDBackingStoreLocal _fetchRecordsWithGroupID:parent:type:callback:]
  -[HMDBackingStoreLocal _fetchRecordsWithGroupID:names:callback:]
  -[HMDBackingStoreLocal _selectAllRecords:]
  -[HMDBackingStoreLocal _insertLogWithRoot:transaction:set:error:]
  -[HMDBackingStoreLocal _selectLogWithRoot:after:mask:compare:callback:]
  -[HMDBackingStoreLocal _selectLogWithMask:compare:callback:]
  -[HMDBackingStoreLocal _insertLogOptionsWithID:options:]
  -[HMDBackingStoreLocal _selectLogOptionsWithID:]
  -[HMDBackingStoreLocal _selectAllLog:]
  -[HMDBackingStoreLocal _updateLog:mask:set:]
  -[HMDBackingStoreLocal _deleteLog:]
  -[HMDBackingStoreLocal _insertArchive:identifier:controllerUserName:error:]
  -[HMDBackingStoreLocal _selectArchiveWithIdentifier:archive:controllerUserName:error:]
  -[HMDBackingStoreLocal datastoreFile]
  -[HMDBackingStoreLocal isTransactionReplayFeatureEnabled]
  -[HMDBackingStoreLocal zoneCache]
  -[HMDBackingStoreLocal setZoneCache:]


HMDBackingStoreLocalFlushOperation : NSOperation
 @property  HMDBackingStoreLocal *store
 @property  @? resultHandler
 @property  BOOL clearCloud

  // instance methods
  -[HMDBackingStoreLocalFlushOperation resultHandler]
  -[HMDBackingStoreLocalFlushOperation store]
  -[HMDBackingStoreLocalFlushOperation setResultHandler:]
  -[HMDBackingStoreLocalFlushOperation setStore:]
  -[HMDBackingStoreLocalFlushOperation .cxx_destruct]
  -[HMDBackingStoreLocalFlushOperation main]
  -[HMDBackingStoreLocalFlushOperation initWithStore:clearCloud:resultHandler:]
  -[HMDBackingStoreLocalFlushOperation clearCloud]
  -[HMDBackingStoreLocalFlushOperation setClearCloud:]


HMDMediaGroupModel : HMDBackingStoreModelObject <HMFLogging>
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupModel properties]
  +[HMDMediaGroupModel logCategory]

  // instance methods
  -[HMDMediaGroupModel logIdentifier]
  -[HMDMediaGroupModel attributeDescriptions]
  -[HMDMediaGroupModel privateDescription]
  -[HMDMediaGroupModel initWithUUID:parentUUID:name:changeType:]


AWDHomeKitHomeCameraConfigurations : PBCodable <NSCopying>
 @property  NSMutableArray *homeKitCameraUserSettings
 @property  NSMutableArray *homeKitCameraSettings
 @property  BOOL hasEnabledResidentsDeviceCapabilities
 @property  unsigned int enabledResidentsDeviceCapabilities
 @property  BOOL hasIsFaceClassificationEnabled
 @property  BOOL isFaceClassificationEnabled
 @property  BOOL hasIsOwner
 @property  BOOL isOwner

  // class methods
  +[AWDHomeKitHomeCameraConfigurations homeKitCameraUserSettingsType]
  +[AWDHomeKitHomeCameraConfigurations homeKitCameraSettingsType]

  // instance methods
  -[AWDHomeKitHomeCameraConfigurations copyTo:]
  -[AWDHomeKitHomeCameraConfigurations .cxx_destruct]
  -[AWDHomeKitHomeCameraConfigurations mergeFrom:]
  -[AWDHomeKitHomeCameraConfigurations dictionaryRepresentation]
  -[AWDHomeKitHomeCameraConfigurations copyWithZone:]
  -[AWDHomeKitHomeCameraConfigurations readFrom:]
  -[AWDHomeKitHomeCameraConfigurations writeTo:]
  -[AWDHomeKitHomeCameraConfigurations isEqual:]
  -[AWDHomeKitHomeCameraConfigurations isOwner]
  -[AWDHomeKitHomeCameraConfigurations setIsOwner:]
  -[AWDHomeKitHomeCameraConfigurations isFaceClassificationEnabled]
  -[AWDHomeKitHomeCameraConfigurations setHasIsOwner:]
  -[AWDHomeKitHomeCameraConfigurations hasIsOwner]
  -[AWDHomeKitHomeCameraConfigurations enabledResidentsDeviceCapabilities]
  -[AWDHomeKitHomeCameraConfigurations setEnabledResidentsDeviceCapabilities:]
  -[AWDHomeKitHomeCameraConfigurations setHasEnabledResidentsDeviceCapabilities:]
  -[AWDHomeKitHomeCameraConfigurations hasEnabledResidentsDeviceCapabilities]
  -[AWDHomeKitHomeCameraConfigurations clearHomeKitCameraUserSettings]
  -[AWDHomeKitHomeCameraConfigurations addHomeKitCameraUserSettings:]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraUserSettingsCount]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraUserSettingsAtIndex:]
  -[AWDHomeKitHomeCameraConfigurations clearHomeKitCameraSettings]
  -[AWDHomeKitHomeCameraConfigurations addHomeKitCameraSettings:]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraSettingsCount]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraSettingsAtIndex:]
  -[AWDHomeKitHomeCameraConfigurations setIsFaceClassificationEnabled:]
  -[AWDHomeKitHomeCameraConfigurations setHasIsFaceClassificationEnabled:]
  -[AWDHomeKitHomeCameraConfigurations hasIsFaceClassificationEnabled]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraUserSettings]
  -[AWDHomeKitHomeCameraConfigurations setHomeKitCameraUserSettings:]
  -[AWDHomeKitHomeCameraConfigurations homeKitCameraSettings]
  -[AWDHomeKitHomeCameraConfigurations setHomeKitCameraSettings:]


HMDFMFQuery : HMFObject
 @property  NSString *queryID
 @property  NSObject<OS_dispatch_queue> *responseQueue
 @property  @? completion

  // instance methods
  -[HMDFMFQuery completion]
  -[HMDFMFQuery queryID]
  -[HMDFMFQuery .cxx_destruct]
  -[HMDFMFQuery responseQueue]
  -[HMDFMFQuery initWithResponseQueue:completion:]


HMDFMFRequest : HMFObject
 @property  NSString *requestID
 @property  FMFSession *fmfSession
 @property  HMFTimer *fmfSessionResponseTimer

  // instance methods
  -[HMDFMFRequest .cxx_destruct]
  -[HMDFMFRequest requestID]
  -[HMDFMFRequest fmfSession]
  -[HMDFMFRequest initWithResponseTimerDelegate:]
  -[HMDFMFRequest fmfSessionResponseTimer]


HMDFMFHandler : HMFObject <FMFSessionDelegate, HMFTimerDelegate, HMFLogging>
 @property  HMDFMF *fmfStatus
 @property  HMDFMFRequest *currentFMFRequest
 @property  NSMutableArray *queries
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDFMFHandler logCategory]
  +[HMDFMFHandler sharedHandler]

  // instance methods
  -[HMDFMFHandler queries]
  -[HMDFMFHandler timerDidFire:]
  -[HMDFMFHandler workQueue]
  -[HMDFMFHandler .cxx_destruct]
  -[HMDFMFHandler meDeviceChanged]
  -[HMDFMFHandler init]
  -[HMDFMFHandler sendNotification]
  -[HMDFMFHandler homeDataLoaded:]
  -[HMDFMFHandler fmfDevicesChanged]
  -[HMDFMFHandler _initiateFMFRequest]
  -[HMDFMFHandler _processDevices:error:]
  -[HMDFMFHandler _computeFMFStatus:]
  -[HMDFMFHandler queryFMFStatusWithQueue:completion:]
  -[HMDFMFHandler _respondToPendingRequests:]
  -[HMDFMFHandler isThisDesignatedFMFDevice]
  -[HMDFMFHandler fmfStatus]
  -[HMDFMFHandler setFmfStatus:]
  -[HMDFMFHandler currentFMFRequest]
  -[HMDFMFHandler setCurrentFMFRequest:]


HMDRemoteEventRouterAccessControl : NSObject
 @property  unsigned long allowedUserTypes
 @property  unsigned long allowedDeviceTypes

  // class methods
  +[HMDRemoteEventRouterAccessControl allowAllUsersAndDevicesAccessControl]
  +[HMDRemoteEventRouterAccessControl allowSharedAdminsAndAllDevicesAccessControl]
  +[HMDRemoteEventRouterAccessControl remoteUserAccessControlFromNumber:]
  +[HMDRemoteEventRouterAccessControl remoteDeviceAccessControlFromNumber:]

  // instance methods
  -[HMDRemoteEventRouterAccessControl initWithAllowedUserTypes:deviceCategories:]
  -[HMDRemoteEventRouterAccessControl allowedUserTypes]
  -[HMDRemoteEventRouterAccessControl allowedDeviceTypes]


HMDUnassociatedAccessory : HMFObject <HMFLogging, HMFMessageReceiver, NSSecureCoding>
 @property  HMDAccessoryAdvertisement *accessoryAdvertisement
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSString *name
 @property  HMAccessoryCategory *category
 @property  NSUUID *uuid
 @property  NSString *identifier
 @property  BOOL reachable
 @property  long long associationOptions
 @property  unsigned long transportTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDUnassociatedAccessory supportsSecureCoding]
  +[HMDUnassociatedAccessory shortDescription]
  +[HMDUnassociatedAccessory logCategory]
  +[HMDUnassociatedAccessory otherAccessoryCategory]

  // instance methods
  -[HMDUnassociatedAccessory dumpDescription]
  -[HMDUnassociatedAccessory setCategory:]
  -[HMDUnassociatedAccessory identifier]
  -[HMDUnassociatedAccessory logIdentifier]
  -[HMDUnassociatedAccessory isReachable]
  -[HMDUnassociatedAccessory encodeWithCoder:]
  -[HMDUnassociatedAccessory dealloc]
  -[HMDUnassociatedAccessory category]
  -[HMDUnassociatedAccessory uuid]
  -[HMDUnassociatedAccessory setUUID:]
  -[HMDUnassociatedAccessory .cxx_destruct]
  -[HMDUnassociatedAccessory messageTargetUUID]
  -[HMDUnassociatedAccessory messageDestination]
  -[HMDUnassociatedAccessory shortDescription]
  -[HMDUnassociatedAccessory setName:]
  -[HMDUnassociatedAccessory name]
  -[HMDUnassociatedAccessory transportTypes]
  -[HMDUnassociatedAccessory messageDispatcher]
  -[HMDUnassociatedAccessory isEqual:]
  -[HMDUnassociatedAccessory init]
  -[HMDUnassociatedAccessory initWithCoder:]
  -[HMDUnassociatedAccessory _registerForMessages]
  -[HMDUnassociatedAccessory associationOptions]
  -[HMDUnassociatedAccessory identifyWithCompletionHandler:]
  -[HMDUnassociatedAccessory initWithIdentifier:name:category:messageDispatcher:]
  -[HMDUnassociatedAccessory descriptionWithPointer:additionalDescription:]
  -[HMDUnassociatedAccessory associateWithAccessoryAdvertisement:]
  -[HMDUnassociatedAccessory accessoryAdvertisement]
  -[HMDUnassociatedAccessory setAccessoryAdvertisement:]
  -[HMDUnassociatedAccessory _handleIdentify:]
  -[HMDUnassociatedAccessory updateCategoryWithCategoryIdentifier:]


HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator : HMFObject <HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchSchedulerDelegate, HMFLogging, HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator>
 @property  BOOL running
 @property  NSNotificationCenter *notificationCenter
 @property  <HMDNetworkRouterFirewallRuleManagerBackingStoreCloudFetchScheduler> *cloudFetchScheduler
 @property  NSObject<OS_dispatch_queue> *ownerQueue
 @property  HMBLocalZone *mirroredLocalZone
 @property  <HMDNetworkRouterFirewallRuleManagerBackingStoreMirror> *mirror
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDNetworkRouterFirewallRuleManagerInternal> *firewallRuleManager

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator ckContainerIdentifier]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator ckContainerEnvironment]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator ckUseAnonymousAccount]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __jsonValueForCKRecordValue:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __jsonStringFromDictionary:rawOutput:error:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __jsonFromDeclarations:rawOutput:error:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __jsonFromPairedMetadata:rawOutput:error:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __networkDeclarationsFromRecord:recordKey:identifier:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __pairedMetadataFromRecord:recordKey:identifier:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __jsonFromRecords:validateWithPublicKeys:rawOutput:error:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __createProcessingOptionsWithLabel:qualityOfService:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __createProcessingOptionsWithLabel:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __networkDeclarationDataDictionaryFromOverrideObjectDictionary:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __pairedMetadataDictionaryFromOverrideObjectDictionary:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __networkDeclarationDataDictionaryFromRecordDictionary:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __pairedMetadataDataDictionaryFromRecordDictionary:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator notificationCenter]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator isRunning]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator mirror]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator firewallRuleManager]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator firewallRuleManagerClientsDidChange]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator cloudFetchSchedulerFired:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator startupWithLocalDatabase:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator shutdownWithCompletion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator fetchCloudChangesWithQualityOfService:ignoreLastFetchedAccessories:forceChangeNotifications:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator fetchRulesForAccessories:qualityOfService:ignoreOverrides:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator fetchPairedMetadataVersionConfigurationsForAccessories:qualityOfService:ignoreOverrides:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator dumpCloudRecordsForProductGroup:productNumber:rawOutput:listOnly:verifySignatures:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator dumpLocalRulesForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator dumpPairedMetadataForProductGroup:productNumber:firmwareVersion:ignoreOverrides:rawOutput:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator removeAllLocalRulesWithError:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator addOverrides:replace:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator removeAllOverridesWithError:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator removeOverridesForProductGroup:productNumber:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator ruleConfigurationForAccessory:declarations:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator pairedMetadataVersionConfigurationForAccessory:pairedMetadata:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator initWithFirewallRuleManager:notificationCenter:ownerQueue:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator initWithFirewallRuleManager:notificationCenter:cloudFetchScheduler:ownerQueue:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator initWithFirewallRuleManager:notificationCenter:cloudFetchInterval:cloudFetchRetryInterval:ownerQueue:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator setMirror:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __startupWithMirroredLocalZone:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __startupWithMirror:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchCloudChangesWithQualityOfService:ignoreLastFetchedAccessories:forceChangeNotifications:requiredRecordIDs:schedulerXpcActivity:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchAllDataForProductGroup:productNumber:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchNetworkDeclarationsForRecordIDs:options:ignoreOverrides:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchPairedMetadataForAccessories:options:ignoreOverrides:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchCloudChangesIfNeededForRecordIDs:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _listCloudRecordsForProductGroup:rawOutput:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _dumpCloudRecordsForProductGroup:productNumber:rawOutput:verifySignatures:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator _fetchAllOverridesForProductGroup:productNumber:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __maybeStartOrStopCloudFetchScheduler]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __stopCloudFetchScheduler]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator __cloudFetchSchedulerFired:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator cloudFetchScheduler]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator ownerQueue]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator mirroredLocalZone]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCoordinator setMirroredLocalZone:]


HMDRemoteMessageDestination : HMFMessageDestination <HMDRemoteAddressable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteMessageDestination allocWithZone:]
  +[HMDRemoteMessageDestination allMessageDestinations]

  // instance methods
  -[HMDRemoteMessageDestination remoteDestinationString]


HMDRemoteAccountHandleMessageDestination : HMDRemoteMessageDestination
 @property  HMDAccountHandle *handle
 @property  BOOL multicast
 @property  BOOL restrictToResidentCapable
 @property  NSDictionary *deviceCapabilities

  // class methods
  +[HMDRemoteAccountHandleMessageDestination shortDescription]

  // instance methods
  -[HMDRemoteAccountHandleMessageDestination initWithTarget:]
  -[HMDRemoteAccountHandleMessageDestination privateDescription]
  -[HMDRemoteAccountHandleMessageDestination handle]
  -[HMDRemoteAccountHandleMessageDestination deviceCapabilities]
  -[HMDRemoteAccountHandleMessageDestination .cxx_destruct]
  -[HMDRemoteAccountHandleMessageDestination shortDescription]
  -[HMDRemoteAccountHandleMessageDestination isEqual:]
  -[HMDRemoteAccountHandleMessageDestination descriptionWithPointer:]
  -[HMDRemoteAccountHandleMessageDestination remoteDestinationString]
  -[HMDRemoteAccountHandleMessageDestination initWithTarget:handle:multicast:]
  -[HMDRemoteAccountHandleMessageDestination initWithTarget:handle:multicast:deviceCapabilities:]
  -[HMDRemoteAccountHandleMessageDestination isMulticast]
  -[HMDRemoteAccountHandleMessageDestination restrictToResidentCapable]
  -[HMDRemoteAccountHandleMessageDestination setRestrictToResidentCapable:]


HMDRemoteAccountMessageDestination : HMDRemoteAccountHandleMessageDestination
 @property  HMDAccount *account

  // class methods
  +[HMDRemoteAccountMessageDestination shortDescription]

  // instance methods
  -[HMDRemoteAccountMessageDestination account]
  -[HMDRemoteAccountMessageDestination privateDescription]
  -[HMDRemoteAccountMessageDestination .cxx_destruct]
  -[HMDRemoteAccountMessageDestination shortDescription]
  -[HMDRemoteAccountMessageDestination isEqual:]
  -[HMDRemoteAccountMessageDestination descriptionWithPointer:]
  -[HMDRemoteAccountMessageDestination remoteDestinationString]
  -[HMDRemoteAccountMessageDestination initWithTarget:handle:multicast:deviceCapabilities:]
  -[HMDRemoteAccountMessageDestination initWithTarget:account:multicast:]
  -[HMDRemoteAccountMessageDestination initWithTarget:account:multicast:deviceCapabilities:]


HMDRemoteDeviceMessageDestination : HMDRemoteMessageDestination
 @property  HMDDeviceHandle *preferredHandle
 @property  HMDDevice *device

  // class methods
  +[HMDRemoteDeviceMessageDestination shortDescription]

  // instance methods
  -[HMDRemoteDeviceMessageDestination initWithTarget:]
  -[HMDRemoteDeviceMessageDestination privateDescription]
  -[HMDRemoteDeviceMessageDestination .cxx_destruct]
  -[HMDRemoteDeviceMessageDestination device]
  -[HMDRemoteDeviceMessageDestination setPreferredHandle:]
  -[HMDRemoteDeviceMessageDestination preferredHandle]
  -[HMDRemoteDeviceMessageDestination shortDescription]
  -[HMDRemoteDeviceMessageDestination isEqual:]
  -[HMDRemoteDeviceMessageDestination descriptionWithPointer:]
  -[HMDRemoteDeviceMessageDestination remoteDestinationString]
  -[HMDRemoteDeviceMessageDestination initWithTarget:device:]


HMDSoftwareUpdateDocumentationAsset : HMFObject <HMFLogging, HMFObject, NSURLSessionDownloadDelegate, SZExtractorDelegate, NSSecureCoding>
 @property  NSURLSession *URLSession
 @property  SZExtractor *extrator
 @property  NSInputStream *archivedFileStream
 @property  BOOL shouldAutomaticallyCache
 @property  NSUUID *identifier
 @property  HMSoftwareUpdateDocumentationMetadata *metadata
 @property  long long state
 @property  NSURL *URL
 @property  HMSoftwareUpdateDocumentation *documentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDSoftwareUpdateDocumentationAsset supportsSecureCoding]
  +[HMDSoftwareUpdateDocumentationAsset logCategory]
  +[HMDSoftwareUpdateDocumentationAsset assetWithURL:]
  +[HMDSoftwareUpdateDocumentationAsset assetDirectoryURL]

  // instance methods
  -[HMDSoftwareUpdateDocumentationAsset URLSession]
  -[HMDSoftwareUpdateDocumentationAsset cancelDownload]
  -[HMDSoftwareUpdateDocumentationAsset setURLSession:]
  -[HMDSoftwareUpdateDocumentationAsset URLSession:task:didCompleteWithError:]
  -[HMDSoftwareUpdateDocumentationAsset identifier]
  -[HMDSoftwareUpdateDocumentationAsset logIdentifier]
  -[HMDSoftwareUpdateDocumentationAsset propertyDescription]
  -[HMDSoftwareUpdateDocumentationAsset URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:]
  -[HMDSoftwareUpdateDocumentationAsset bundleURL]
  -[HMDSoftwareUpdateDocumentationAsset encodeWithCoder:]
  -[HMDSoftwareUpdateDocumentationAsset metadataURL]
  -[HMDSoftwareUpdateDocumentationAsset state]
  -[HMDSoftwareUpdateDocumentationAsset .cxx_destruct]
  -[HMDSoftwareUpdateDocumentationAsset saveWithError:]
  -[HMDSoftwareUpdateDocumentationAsset URLSession:downloadTask:didFinishDownloadingToURL:]
  -[HMDSoftwareUpdateDocumentationAsset shortDescription]
  -[HMDSoftwareUpdateDocumentationAsset metadata]
  -[HMDSoftwareUpdateDocumentationAsset URL]
  -[HMDSoftwareUpdateDocumentationAsset isEqual:]
  -[HMDSoftwareUpdateDocumentationAsset init]
  -[HMDSoftwareUpdateDocumentationAsset setState:]
  -[HMDSoftwareUpdateDocumentationAsset initWithCoder:]
  -[HMDSoftwareUpdateDocumentationAsset archiveURL]
  -[HMDSoftwareUpdateDocumentationAsset documentation]
  -[HMDSoftwareUpdateDocumentationAsset setExtractionProgress:]
  -[HMDSoftwareUpdateDocumentationAsset initWithDocumentationMetadata:]
  -[HMDSoftwareUpdateDocumentationAsset startCaching]
  -[HMDSoftwareUpdateDocumentationAsset startDownload]
  -[HMDSoftwareUpdateDocumentationAsset finishDownload]
  -[HMDSoftwareUpdateDocumentationAsset startUnarchive]
  -[HMDSoftwareUpdateDocumentationAsset cancelUnarchive]
  -[HMDSoftwareUpdateDocumentationAsset finishUnarchive]
  -[HMDSoftwareUpdateDocumentationAsset shouldAutomaticallyCache]
  -[HMDSoftwareUpdateDocumentationAsset archivedFileStream]
  -[HMDSoftwareUpdateDocumentationAsset setArchivedFileStream:]
  -[HMDSoftwareUpdateDocumentationAsset purgeWithError:]
  -[HMDSoftwareUpdateDocumentationAsset setShouldAutomaticallyCache:]
  -[HMDSoftwareUpdateDocumentationAsset extrator]
  -[HMDSoftwareUpdateDocumentationAsset setExtrator:]


HMDLocation : HMFObject <HMFLogging, HMFTimerDelegate, HMDCLLocationManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  <HMDCLLocationManager> *locationManager
 @property  int authStatus
 @property  long long locationAuthorized
 @property  NSHashTable *singleLocationDelegates
 @property  NSMutableSet *batchLocationContexts
 @property  NSMapTable *regionStateDelegatesByRegionIdentifier
 @property  NSMapTable *pendingRegionMonitoringRequests
 @property  NSMapTable *pendingRegionCallbacks
 @property  NSMapTable *regionStates
 @property  BOOL beingConfigured
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLocation sharedManager]
  +[HMDLocation logCategory]
  +[HMDLocation bundleForLocationManager]
  +[HMDLocation _getAlmanacWithLocation:]
  +[HMDLocation _getAlmanacWithLocation:date:]
  +[HMDLocation findEvent:withGeo:]
  +[HMDLocation sunriseTimeForLocation:]
  +[HMDLocation nextSunriseTimeForLocation:date:]
  +[HMDLocation sunsetTimeForLocation:]
  +[HMDLocation nextSunsetTimeForLocation:date:]
  +[HMDLocation isAccurateLocation:]
  +[HMDLocation timeZoneISOCountryCodeForCLLocationAsync:withCompletion:]

  // instance methods
  -[HMDLocation locationManager:didFailWithError:]
  -[HMDLocation locationManager:didDetermineState:forRegion:]
  -[HMDLocation timerDidFire:]
  -[HMDLocation locationManager:didExitRegion:]
  -[HMDLocation locationManager:didEnterRegion:]
  -[HMDLocation dealloc]
  -[HMDLocation .cxx_destruct]
  -[HMDLocation getCurrentLocation]
  -[HMDLocation locationManagerDidChangeAuthorization:]
  -[HMDLocation locationManager]
  -[HMDLocation handlerQueue]
  -[HMDLocation locationManager:didUpdateLocations:]
  -[HMDLocation init]
  -[HMDLocation authStatus]
  -[HMDLocation setAuthStatus:]
  -[HMDLocation initWithLocationManager:handlerQueue:]
  -[HMDLocation startExtractingBatchLocationsForDelegate:]
  -[HMDLocation stopExtractingBatchLocationsForDelegate:]
  -[HMDLocation startExtractingSingleLocationForDelegate:]
  -[HMDLocation _canLocationBeExtracted]
  -[HMDLocation _extractSingleLocationForDelegate:]
  -[HMDLocation registerForRegionUpdate:withDelegate:completionHandler:]
  -[HMDLocation deregisterForRegionUpdate:completionHandler:]
  -[HMDLocation _notifySingleLocationDelegatesWithLocation:]
  -[HMDLocation _notifySingleLocationDelegate:withLocation:]
  -[HMDLocation _startExtractingBatchLocationsForDelegate:]
  -[HMDLocation _stopExtractingBatchLocationsForContext:]
  -[HMDLocation _updateWithLocationAuthorizationStatus:]
  -[HMDLocation _delegateforRegion:]
  -[HMDLocation _updateRegionState:forRegion:]
  -[HMDLocation _updateEntryForRegion:]
  -[HMDLocation _updateExitForRegion:]
  -[HMDLocation beingConfigured:completionHandler:]
  -[HMDLocation _handleDeterminedState:forRegion:]
  -[HMDLocation getLOIForCurrentLocationWithCompletionHandler:]
  -[HMDLocation getCoreRoutineLOIForCurrentLocationWithCompletionHandler:]
  -[HMDLocation requestMicroLocationRecordingScanWithMetadata:]
  -[HMDLocation requestMicroLocationLocalizationScanWithMetadata:]
  -[HMDLocation locationAuthorized]
  -[HMDLocation setLocationAuthorized:]
  -[HMDLocation singleLocationDelegates]
  -[HMDLocation batchLocationContexts]
  -[HMDLocation regionStateDelegatesByRegionIdentifier]
  -[HMDLocation pendingRegionMonitoringRequests]
  -[HMDLocation pendingRegionCallbacks]
  -[HMDLocation regionStates]
  -[HMDLocation beingConfigured]
  -[HMDLocation setBeingConfigured:]


HMDBatchLocationContext : NSObject
 @property  <HMDBatchLocationDelegate> *delegate
 @property  NSMutableArray *tuples
 @property  HMFTimer *timer
 @property  NSDate *startDate

  // instance methods
  -[HMDBatchLocationContext setDelegate:]
  -[HMDBatchLocationContext delegate]
  -[HMDBatchLocationContext .cxx_destruct]
  -[HMDBatchLocationContext timer]
  -[HMDBatchLocationContext initWithDelegate:]
  -[HMDBatchLocationContext startDate]
  -[HMDBatchLocationContext tuples]


HMDAccessoryFirmwareUpdateTimeWindow : NSObject <HMFLogging>
 @property  NSDateComponents *startTimeComponents
 @property  NSDateComponents *endTimeComponents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateTimeWindow logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateTimeWindow .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateTimeWindow initWithStartTime:endTime:]
  -[HMDAccessoryFirmwareUpdateTimeWindow startTimeComponents]
  -[HMDAccessoryFirmwareUpdateTimeWindow endTimeComponents]


HMDAccessoryFirmwareUpdateTimeWindowPolicy : HMDAccessoryFirmwareUpdatePolicy <HMFTimerDelegate, NSCopying>
 @property  HMDAccessoryFirmwareUpdateTimeWindow *updateTimeWindow
 @property  HMFTimer *reevaluateTimer
 @property  NSDateFormatter *dateFormatter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateTimeWindowPolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy dateFormatter]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy configure]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy timerDidFire:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy evaluate]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy copyWithZone:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy setDateFormatter:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy isEqual:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy updateTimeWindow]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy initWithAccessory:timeWindow:workQueue:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy _startReevaluateTimer:]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy _stopReevaluateTimer]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy reevaluateTimer]
  -[HMDAccessoryFirmwareUpdateTimeWindowPolicy setReevaluateTimer:]


HMDBonjourBrowserHelper : HMFObject <HMFNetServiceBrowserDelegate, HMFTimerDelegate>
 @property  double browsingInterval
 @property  double browsingPeriodicity
 @property  unsigned long state
 @property  HMFTimer *timer
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSArray *serviceTypes
 @property  NSMutableArray *browsers
 @property  NSDictionary *latestDiscoveredServices
 @property  NSMutableDictionary *internalDiscoveredServices
 @property  NSMutableArray *browsingCompletions
 @property  BOOL started
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBonjourBrowserHelper timerDidFire:]
  -[HMDBonjourBrowserHelper isStarted]
  -[HMDBonjourBrowserHelper workQueue]
  -[HMDBonjourBrowserHelper serviceTypes]
  -[HMDBonjourBrowserHelper state]
  -[HMDBonjourBrowserHelper .cxx_destruct]
  -[HMDBonjourBrowserHelper setTimer:]
  -[HMDBonjourBrowserHelper stop]
  -[HMDBonjourBrowserHelper timer]
  -[HMDBonjourBrowserHelper setState:]
  -[HMDBonjourBrowserHelper browsers]
  -[HMDBonjourBrowserHelper setBrowsers:]
  -[HMDBonjourBrowserHelper netServiceBrowser:didStopBrowsingWithError:]
  -[HMDBonjourBrowserHelper netServiceBrowser:didAddService:]
  -[HMDBonjourBrowserHelper netServiceBrowser:didRemoveService:]
  -[HMDBonjourBrowserHelper setServiceTypes:]
  -[HMDBonjourBrowserHelper initWithServicesOfTypes:browsingTimeInterval:browsingPeriodicity:workQueue:]
  -[HMDBonjourBrowserHelper startWithBrowsingCompletion:]
  -[HMDBonjourBrowserHelper _startBrowsers]
  -[HMDBonjourBrowserHelper _stopBrowsers]
  -[HMDBonjourBrowserHelper discoveredServicesCountForServiceType:]
  -[HMDBonjourBrowserHelper _addBrowser:]
  -[HMDBonjourBrowserHelper _removeBrowser:]
  -[HMDBonjourBrowserHelper _updateTimerWithTimeout:]
  -[HMDBonjourBrowserHelper browsingInterval]
  -[HMDBonjourBrowserHelper setBrowsingInterval:]
  -[HMDBonjourBrowserHelper browsingPeriodicity]
  -[HMDBonjourBrowserHelper setBrowsingPeriodicity:]
  -[HMDBonjourBrowserHelper latestDiscoveredServices]
  -[HMDBonjourBrowserHelper setLatestDiscoveredServices:]
  -[HMDBonjourBrowserHelper internalDiscoveredServices]
  -[HMDBonjourBrowserHelper setInternalDiscoveredServices:]
  -[HMDBonjourBrowserHelper browsingCompletions]
  -[HMDBonjourBrowserHelper setBrowsingCompletions:]


HMDCloudPairedMetadataDiagnostics : HMFObject
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *accessoryIdentifier
 @property  NSURL *privacyPolicyURL
 @property  NSURL *uploadDestination
 @property  unsigned long consentVersion
 @property  unsigned long uploadType
 @property  NSDictionary *prettyJSONDictionary

  // class methods
  +[HMDCloudPairedMetadataDiagnostics logCategory]

  // instance methods
  -[HMDCloudPairedMetadataDiagnostics attributeDescriptions]
  -[HMDCloudPairedMetadataDiagnostics .cxx_destruct]
  -[HMDCloudPairedMetadataDiagnostics privacyPolicyURL]
  -[HMDCloudPairedMetadataDiagnostics accessoryIdentifier]
  -[HMDCloudPairedMetadataDiagnostics uploadDestination]
  -[HMDCloudPairedMetadataDiagnostics consentVersion]
  -[HMDCloudPairedMetadataDiagnostics uploadType]
  -[HMDCloudPairedMetadataDiagnostics prettyJSONDictionary]
  -[HMDCloudPairedMetadataDiagnostics initWithAccessoryIdentifier:jsonDictionary:]
  -[HMDCloudPairedMetadataDiagnostics initWithAccessoryIdentifier:privacyPolicyURL:uploadDestination:consentVersion:uploadType:]


HMDCharacteristicWriteAction : HMDAction <NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  HMDCharacteristic *characteristic
 @property  id targetValue
 @property  NSDictionary *actionInformation
 @property  NSString *dumpState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCharacteristicWriteAction supportsSecureCoding]
  +[HMDCharacteristicWriteAction logCategory]
  +[HMDCharacteristicWriteAction actionWithDictionaryRepresentation:home:]

  // instance methods
  -[HMDCharacteristicWriteAction targetValue]
  -[HMDCharacteristicWriteAction dumpState]
  -[HMDCharacteristicWriteAction setTargetValue:]
  -[HMDCharacteristicWriteAction encodeWithCoder:]
  -[HMDCharacteristicWriteAction type]
  -[HMDCharacteristicWriteAction attributeDescriptions]
  -[HMDCharacteristicWriteAction .cxx_destruct]
  -[HMDCharacteristicWriteAction dictionaryRepresentation]
  -[HMDCharacteristicWriteAction init]
  -[HMDCharacteristicWriteAction initWithCoder:]
  -[HMDCharacteristicWriteAction requiresDeviceUnlock]
  -[HMDCharacteristicWriteAction characteristic]
  -[HMDCharacteristicWriteAction associatedAccessories]
  -[HMDCharacteristicWriteAction transactionObjectUpdated:newValues:message:]
  -[HMDCharacteristicWriteAction transactionObjectRemoved:message:]
  -[HMDCharacteristicWriteAction isAssociatedWithAccessory:]
  -[HMDCharacteristicWriteAction modelObjectWithChangeType:]
  -[HMDCharacteristicWriteAction stateDump]
  -[HMDCharacteristicWriteAction entitlementsForNotification]
  -[HMDCharacteristicWriteAction isUnsecuringAction]
  -[HMDCharacteristicWriteAction isActionForCharacteristic:]
  -[HMDCharacteristicWriteAction initWithUUID:characteristic:targetValue:actionSet:]
  -[HMDCharacteristicWriteAction isSecureAction]
  -[HMDCharacteristicWriteAction _processWriteActionModelUpdated:message:]
  -[HMDCharacteristicWriteAction actionInformation]


HMDCharacteristicWriteActionModel : HMDActionModel
 @property  NSString *accessory
 @property  NSNumber *serviceID
 @property  NSNumber *characteristicID
 @property  id targetValue

  // class methods
  +[HMDCharacteristicWriteActionModel properties]

  // instance methods
  -[HMDCharacteristicWriteActionModel dependentUUIDs]
  -[HMDCharacteristicWriteActionModel loadModelWithActionInformation:]


HMDCameraSnapshotReceiver : HMFObject <HMFLogging>
 @property  NSUUID *uniqueIdentifier
 @property  HMDCameraSnapshotSessionID *sessionID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  HMDSnapshotFile *snapshotFile
 @property  HMDSnapshotRequestHandler *snapshotRequestHandler
 @property  HMDCameraResidentMessageHandler *residentMessageHandler
 @property  HMDCameraSnapshotMetrics *snapshotMetrics
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotReceiver logCategory]

  // instance methods
  -[HMDCameraSnapshotReceiver accessory]
  -[HMDCameraSnapshotReceiver logIdentifier]
  -[HMDCameraSnapshotReceiver sessionID]
  -[HMDCameraSnapshotReceiver workQueue]
  -[HMDCameraSnapshotReceiver .cxx_destruct]
  -[HMDCameraSnapshotReceiver delegateQueue]
  -[HMDCameraSnapshotReceiver uniqueIdentifier]
  -[HMDCameraSnapshotReceiver _sendMessageWithName:payload:responseHandler:]
  -[HMDCameraSnapshotReceiver snapshotFile]
  -[HMDCameraSnapshotReceiver setSnapshotFile:]
  -[HMDCameraSnapshotReceiver snapshotRequestHandler]
  -[HMDCameraSnapshotReceiver residentMessageHandler]
  -[HMDCameraSnapshotReceiver initWithSessionID:workQueue:accessory:delegateQueue:uniqueIdentifier:snapshotRequestHandler:residentMessageHandler:]
  -[HMDCameraSnapshotReceiver snapshotMetrics]
  -[HMDCameraSnapshotReceiver _sendRequestWithTierType:toResident:]
  -[HMDCameraSnapshotReceiver _sendConfirmationToResident:]
  -[HMDCameraSnapshotReceiver setSnapshotMetrics:]


HMDUserPresence : HMFObject <NSSecureCoding>
 @property  HMDUser *user
 @property  HMDUserPresenceRegion *presenceRegionStatus
 @property  NSDate *updateTimestamp
 @property  BOOL atHome
 @property  BOOL notAtHome

  // class methods
  +[HMDUserPresence supportsSecureCoding]

  // instance methods
  -[HMDUserPresence encodeWithCoder:]
  -[HMDUserPresence attributeDescriptions]
  -[HMDUserPresence user]
  -[HMDUserPresence .cxx_destruct]
  -[HMDUserPresence isEqual:]
  -[HMDUserPresence initWithCoder:]
  -[HMDUserPresence updateTimestamp]
  -[HMDUserPresence setPresenceRegionStatus:]
  -[HMDUserPresence presenceRegionStatus]
  -[HMDUserPresence isAtHome]
  -[HMDUserPresence initWithUser:presenceRegionStatus:]
  -[HMDUserPresence initWithUser:presenceRegionStatus:timeStamp:]
  -[HMDUserPresence isNotAtHome]


HMDCameraRecordingSessionFactory : HMFObject <HMDCameraRecordingSessionFactory>
 @property  double maximumClipDuration
 @property  double recordingExtensionDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraRecordingSessionFactory createVideoAnalyzerWithConfiguration:identifier:]
  -[HMDCameraRecordingSessionFactory createSignificantEventManagerWithWorkQueue:faceClassificationResolver:logIdentifier:]
  -[HMDCameraRecordingSessionFactory createTimelapseFragmentManagerWithLogIdentifier:]
  -[HMDCameraRecordingSessionFactory createUploaderWithClipUUID:startDate:targetFragmentDuration:quality:localZone:workQueue:logIdentifier:]
  -[HMDCameraRecordingSessionFactory isVideoInitData:combinableWithVideoInitData:]
  -[HMDCameraRecordingSessionFactory maximumClipDuration]
  -[HMDCameraRecordingSessionFactory recordingExtensionDuration]


HMDXPCEntitlementMessageFilter : HMFMessageFilter <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDXPCEntitlementMessageFilter logCategory]
  +[HMDXPCEntitlementMessageFilter filterMessage:withPolicies:error:]


HMDFileManager : HMFObject <HMDFileManager>
 @property  NSURL *heroFrameStoreDirectoryURL
 @property  NSURL *legacyHeroFrameStoreDirectoryURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDFileManager fileExistsAtURL:]
  -[HMDFileManager removeItemAtURL:error:]
  -[HMDFileManager copyItemAtURL:toURL:error:]
  -[HMDFileManager fileHandleForReadingFromURL:error:]
  -[HMDFileManager dataWithContentsOfURL:options:error:]
  -[HMDFileManager isDeletableFileAtPath:]
  -[HMDFileManager linkItemAtURL:toURL:error:]
  -[HMDFileManager createDirectoryAtURL:withIntermediateDirectories:attributes:error:]
  -[HMDFileManager writeData:toURL:options:error:]
  -[HMDFileManager writeDictionary:toURL:error:]
  -[HMDFileManager zipItemAtURL:toURL:error:]
  -[HMDFileManager JSONObjectWithURL:error:]
  -[HMDFileManager writeJSONObject:toURL:error:]
  -[HMDFileManager enumerateItemsAtURL:includingPropertiesForKeys:usingBlock:]
  -[HMDFileManager heroFrameStoreDirectoryURL]
  -[HMDFileManager legacyHeroFrameStoreDirectoryURL]


HMDAction : HMFObject <NSSecureCoding, HMDBackingStoreModelBackedObjectProtocol, HMDBackingStoreObjectProtocol, HMFLogging>
 @property  HMDActionSet *actionSet
 @property  NSUUID *uuid
 @property  unsigned long type
 @property  NSDictionary *dictionaryRepresentation
 @property  NSString *stateDump
 @property  BOOL requiresDeviceUnlock
 @property  unsigned long entitlementsForNotification
 @property  NSArray *associatedAccessories
 @property  BOOL isUnsecuringAction
 @property  Class modelClass
 @property  NSUUID *modelIdentifier
 @property  NSUUID *modelParentIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAction supportsSecureCoding]
  +[HMDAction logCategory]
  +[HMDAction actionWithDictionaryRepresentation:home:]

  // instance methods
  -[HMDAction modelClass]
  -[HMDAction logIdentifier]
  -[HMDAction encodeWithCoder:]
  -[HMDAction type]
  -[HMDAction modelIdentifier]
  -[HMDAction attributeDescriptions]
  -[HMDAction uuid]
  -[HMDAction .cxx_destruct]
  -[HMDAction dictionaryRepresentation]
  -[HMDAction init]
  -[HMDAction initWithCoder:]
  -[HMDAction requiresDeviceUnlock]
  -[HMDAction actionSet]
  -[HMDAction setActionSet:]
  -[HMDAction associatedAccessories]
  -[HMDAction transactionObjectUpdated:newValues:message:]
  -[HMDAction transactionObjectRemoved:message:]
  -[HMDAction isAssociatedWithAccessory:]
  -[HMDAction modelObjectWithChangeType:version:]
  -[HMDAction modelObjectWithChangeType:]
  -[HMDAction initWithUUID:actionSet:]
  -[HMDAction stateDump]
  -[HMDAction entitlementsForNotification]
  -[HMDAction executeWithSource:clientName:completionHandler:]
  -[HMDAction isUnsecuringAction]
  -[HMDAction configureWithHome:]
  -[HMDAction backingStoreObjectsWithChangeType:version:]
  -[HMDAction modelBackedObjects]
  -[HMDAction modelParentIdentifier]
  -[HMDAction updateActionSetIfNil:]


HMDCloudChange : HMFObject <HMDBackingStoreChangeObject, HMDBackingStoreRecordMapping>
 @property  HMDBackingStoreModelObject *objectChange
 @property  unsigned long changeType
 @property  unsigned long applyType
 @property  NSMutableSet *rowIDsSet
 @property  NSUUID *parentObjectID
 @property  NSUUID *objectID
 @property  NSString *recordName
 @property  BOOL addChange
 @property  BOOL updateChange
 @property  BOOL deleteChange
 @property  BOOL invalidChange
 @property  BOOL dropAndDoNotApply
 @property  BOOL dropAfterApply
 @property  BOOL dropStagedAfterApply
 @property  BOOL pushAfterApply
 @property  NSArray *rowIDs
 @property  HMDCloudRecord *cloudRecord
 @property  HMDCloudRecord *deletedCloudRecord
 @property  CKRecord *record
 @property  CKRecordID *recordID
 @property  HMDBackingStoreModelObject *change
 @property  NSSet *dependentUUIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *uuid
 @property  NSUUID *parentUuid
 @property  NSString *type

  // class methods
  +[HMDCloudChange shortDescription]

  // instance methods
  -[HMDCloudChange objectID]
  -[HMDCloudChange isDeleted]
  -[HMDCloudChange recordID]
  -[HMDCloudChange change]
  -[HMDCloudChange record]
  -[HMDCloudChange type]
  -[HMDCloudChange isInvalid]
  -[HMDCloudChange changeType]
  -[HMDCloudChange uuid]
  -[HMDCloudChange .cxx_destruct]
  -[HMDCloudChange isUpdated]
  -[HMDCloudChange shortDescription]
  -[HMDCloudChange setChangeType:]
  -[HMDCloudChange recordName]
  -[HMDCloudChange init]
  -[HMDCloudChange isAdded]
  -[HMDCloudChange cloudRecord]
  -[HMDCloudChange dependentUUIDs]
  -[HMDCloudChange parentUuid]
  -[HMDCloudChange updateCloudRecord:]
  -[HMDCloudChange _initWithObjectChange:cloudObjectRecord:]
  -[HMDCloudChange initWithObjectChange:]
  -[HMDCloudChange initWithCloudObjectRecord:]
  -[HMDCloudChange parentObjectID]
  -[HMDCloudChange isDropAndDoNotApply]
  -[HMDCloudChange isDropAfterApply]
  -[HMDCloudChange isDropStagedAfterApply]
  -[HMDCloudChange isPushAfterApply]
  -[HMDCloudChange rowIDs]
  -[HMDCloudChange forceChangeToDelete]
  -[HMDCloudChange forceChangeToInvalid]
  -[HMDCloudChange updateDeletedCloudRecord:]
  -[HMDCloudChange updateWithObjectChange:]
  -[HMDCloudChange updateChangeWithRecord:]
  -[HMDCloudChange resetRecord]
  -[HMDCloudChange replayChange:stagedChange:]
  -[HMDCloudChange objectChange]
  -[HMDCloudChange setObjectChange:]
  -[HMDCloudChange deletedCloudRecord]
  -[HMDCloudChange applyType]
  -[HMDCloudChange setApplyType:]
  -[HMDCloudChange rowIDsSet]


HMDCameraClipAppendStreamingAssetOperation : HMDCameraClipOperation <HMFTimerDelegate>
 @property  HMFTimer *retryTimer
 @property  NSData *data
 @property  HMDCameraClipSegmentMetadata *metadata
 @property  HMCameraClipEncryptionManager *encryptionManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipAppendStreamingAssetOperation shouldRetry]
  +[HMDCameraClipAppendStreamingAssetOperation logCategory]
  +[HMDCameraClipAppendStreamingAssetOperation streamingAssetPropertyName]
  +[HMDCameraClipAppendStreamingAssetOperation metadataPropertyName]

  // instance methods
  -[HMDCameraClipAppendStreamingAssetOperation timerDidFire:]
  -[HMDCameraClipAppendStreamingAssetOperation encryptionManager]
  -[HMDCameraClipAppendStreamingAssetOperation attributeDescriptions]
  -[HMDCameraClipAppendStreamingAssetOperation .cxx_destruct]
  -[HMDCameraClipAppendStreamingAssetOperation finish]
  -[HMDCameraClipAppendStreamingAssetOperation metadata]
  -[HMDCameraClipAppendStreamingAssetOperation main]
  -[HMDCameraClipAppendStreamingAssetOperation cancelWithError:]
  -[HMDCameraClipAppendStreamingAssetOperation setRetryTimer:]
  -[HMDCameraClipAppendStreamingAssetOperation retryTimer]
  -[HMDCameraClipAppendStreamingAssetOperation data]
  -[HMDCameraClipAppendStreamingAssetOperation initWithClipModelID:localZone:data:metadata:encryptionManager:]
  -[HMDCameraClipAppendStreamingAssetOperation initWithClipModelID:localZone:data:metadata:encryptionManager:dataSource:]
  -[HMDCameraClipAppendStreamingAssetOperation _updateClipModel:usingStreamingAsset:]
  -[HMDCameraClipAppendStreamingAssetOperation _retryDelayForError:]


HMDClientConnection : HMFObject <HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSMutableArray *commandsBeingExecuted
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDHomeManager *homeManager
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDClientConnection workQueue]
  -[HMDClientConnection setWorkQueue:]
  -[HMDClientConnection dealloc]
  -[HMDClientConnection .cxx_destruct]
  -[HMDClientConnection messageTargetUUID]
  -[HMDClientConnection homeManager]
  -[HMDClientConnection setHomeManager:]
  -[HMDClientConnection messageReceiveQueue]
  -[HMDClientConnection msgDispatcher]
  -[HMDClientConnection setMsgDispatcher:]
  -[HMDClientConnection _registerForMessages]
  -[HMDClientConnection _handleSiriIntentRequest:]
  -[HMDClientConnection _handleSiriCommand:]
  -[HMDClientConnection _handleDaemonRequest:]
  -[HMDClientConnection _handleSiriSyncDataRequest:]
  -[HMDClientConnection _handleIdmsAccountUsernameModified:]
  -[HMDClientConnection initWithHomeManager:queue:messageDispatcher:]
  -[HMDClientConnection commandsBeingExecuted]
  -[HMDClientConnection setCommandsBeingExecuted:]


HMDLostModeManager : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL lost

  // class methods
  +[HMDLostModeManager sharedManager]
  +[HMDLostModeManager logCategory]

  // instance methods
  -[HMDLostModeManager attributeDescriptions]
  -[HMDLostModeManager init]
  -[HMDLostModeManager isLost]


HMDDataStreamBulkSendPendingSessionContext : NSObject
 @property  @? sessionStartCallback
 @property  HMFTimer *handleOpenRequestResponseTimer
 @property  HMFTimer *sendCloseEventTimer
 @property  BOOL shouldCloseSessionWithTimeoutReason

  // instance methods
  -[HMDDataStreamBulkSendPendingSessionContext .cxx_destruct]
  -[HMDDataStreamBulkSendPendingSessionContext initWithSessionStartCallback:handleOpenRequestResponseTimer:sendCloseEventTimer:]
  -[HMDDataStreamBulkSendPendingSessionContext shouldCloseSessionWithTimeoutReason]
  -[HMDDataStreamBulkSendPendingSessionContext sessionStartCallback]
  -[HMDDataStreamBulkSendPendingSessionContext handleOpenRequestResponseTimer]
  -[HMDDataStreamBulkSendPendingSessionContext setHandleOpenRequestResponseTimer:]
  -[HMDDataStreamBulkSendPendingSessionContext sendCloseEventTimer]
  -[HMDDataStreamBulkSendPendingSessionContext setSendCloseEventTimer:]


HMDDataStreamBulkSendProtocol : NSObject <HMFLogging, HMDDataStreamProtocol, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  id accessory
 @property  NSMapTable *listeners
 @property  BOOL isConnected
 @property  NSString *logIdentifier
 @property  unsigned int nextSessionIdentifier
 @property  NSMapTable *activeBulkSendSessions
 @property  NSMutableDictionary *pendingBulkSendSessionContextBySessionIdentifier
 @property  @? bulkSendSessionContextFactory
 @property  <HMDDataStreamProtocolDelegate> *dataStream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL active

  // class methods
  +[HMDDataStreamBulkSendProtocol logCategory]
  +[HMDDataStreamBulkSendProtocol protocolName]

  // instance methods
  -[HMDDataStreamBulkSendProtocol accessory]
  -[HMDDataStreamBulkSendProtocol timerDidFire:]
  -[HMDDataStreamBulkSendProtocol logIdentifier]
  -[HMDDataStreamBulkSendProtocol isConnected]
  -[HMDDataStreamBulkSendProtocol setIsConnected:]
  -[HMDDataStreamBulkSendProtocol removeListener:]
  -[HMDDataStreamBulkSendProtocol setListeners:]
  -[HMDDataStreamBulkSendProtocol setAccessory:]
  -[HMDDataStreamBulkSendProtocol listeners]
  -[HMDDataStreamBulkSendProtocol isActive]
  -[HMDDataStreamBulkSendProtocol .cxx_destruct]
  -[HMDDataStreamBulkSendProtocol setQueue:]
  -[HMDDataStreamBulkSendProtocol queue]
  -[HMDDataStreamBulkSendProtocol setNextSessionIdentifier:]
  -[HMDDataStreamBulkSendProtocol nextSessionIdentifier]
  -[HMDDataStreamBulkSendProtocol dataStreamDidOpen:]
  -[HMDDataStreamBulkSendProtocol dataStreamDidClose:]
  -[HMDDataStreamBulkSendProtocol dataStream:didFailWithError:]
  -[HMDDataStreamBulkSendProtocol dataStream]
  -[HMDDataStreamBulkSendProtocol setDataStream:]
  -[HMDDataStreamBulkSendProtocol dataStreamInitiatedClose:]
  -[HMDDataStreamBulkSendProtocol dataStream:didReceiveEvent:header:payload:]
  -[HMDDataStreamBulkSendProtocol dataStream:didReceiveRequest:header:payload:]
  -[HMDDataStreamBulkSendProtocol dataStream:didReceiveResponse:header:payload:]
  -[HMDDataStreamBulkSendProtocol _notifyActiveStatusChangedFromPreviousValue:]
  -[HMDDataStreamBulkSendProtocol initWithQueue:accessory:logIdentifier:]
  -[HMDDataStreamBulkSendProtocol initWithQueue:accessory:logIdentifier:bulkSendSessionContextFactory:]
  -[HMDDataStreamBulkSendProtocol addListener:fileType:]
  -[HMDDataStreamBulkSendProtocol _closeAllSessionsWithError:]
  -[HMDDataStreamBulkSendProtocol asyncBulkSendSessionCandidate:didAcceptOnQueue:callback:]
  -[HMDDataStreamBulkSendProtocol asyncBulkSendSessionCandidate:didRejectWithStatus:]
  -[HMDDataStreamBulkSendProtocol asyncBulkSendSessionDidCancelSessionWithIdentifier:reason:hadReceivedEof:]
  -[HMDDataStreamBulkSendProtocol _createSessionCandidateWithRequestHeader:metadata:]
  -[HMDDataStreamBulkSendProtocol _createSessionFromCandidate:queue:]
  -[HMDDataStreamBulkSendProtocol _sendOpenResponseWithRequestHeader:streamIdentifier:]
  -[HMDDataStreamBulkSendProtocol _sendOpenResponseWithRequestHeader:bulkSendStatus:]
  -[HMDDataStreamBulkSendProtocol _sendOpenResponseWithRequestHeader:payload:status:]
  -[HMDDataStreamBulkSendProtocol _sendOpenResponseWithRequestHeader:status:]
  -[HMDDataStreamBulkSendProtocol _createSessionIdentifier]
  -[HMDDataStreamBulkSendProtocol _startSessionCandidate:queue:callback:]
  -[HMDDataStreamBulkSendProtocol _rejectSessionCandidate:status:]
  -[HMDDataStreamBulkSendProtocol _getBulkSendSessionForSessionIdentifier:]
  -[HMDDataStreamBulkSendProtocol _removeBulkSendSessionForSessionIdentifier:]
  -[HMDDataStreamBulkSendProtocol _handleOpenWithRequestHeader:payload:]
  -[HMDDataStreamBulkSendProtocol _maybeSubmitMetricForDroppedOpenRequestOfType:]
  -[HMDDataStreamBulkSendProtocol _handleCloseMessage:]
  -[HMDDataStreamBulkSendProtocol _handleDataMessage:]
  -[HMDDataStreamBulkSendProtocol _pumpMessage:session:]
  -[HMDDataStreamBulkSendProtocol _pumpReceiveFailure:session:]
  -[HMDDataStreamBulkSendProtocol _cancelSessionWithIdentifier:reason:hadReceivedEof:]
  -[HMDDataStreamBulkSendProtocol _sendCloseMessageWithIdentifier:reason:]
  -[HMDDataStreamBulkSendProtocol _sendAckMessageWithIdentifier:]
  -[HMDDataStreamBulkSendProtocol openSessionForFileType:reason:metadata:queue:callback:]
  -[HMDDataStreamBulkSendProtocol _openSessionForFileType:reason:metadata:queue:callback:]
  -[HMDDataStreamBulkSendProtocol activeBulkSendSessions]
  -[HMDDataStreamBulkSendProtocol pendingBulkSendSessionContextBySessionIdentifier]
  -[HMDDataStreamBulkSendProtocol bulkSendSessionContextFactory]


HMDRemoteAccountManager : HMFObject <HMDAccountManager, HMFLogging, HMFObject, HMDIDSServiceDelegate, NSFastEnumeration>
 @property  <HMDIDSService> *service
 @property  BOOL monitoring
 @property  NSMutableArray *resolveOperations
 @property  NSArray *accounts
 @property  HMDBackingStore *backingStore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDRemoteAccountManager sharedManager]
  +[HMDRemoteAccountManager logCategory]

  // instance methods
  -[HMDRemoteAccountManager addAccount:]
  -[HMDRemoteAccountManager accounts]
  -[HMDRemoteAccountManager removeAccount:]
  -[HMDRemoteAccountManager isMonitoring]
  -[HMDRemoteAccountManager countByEnumeratingWithState:objects:count:]
  -[HMDRemoteAccountManager setMonitoring:]
  -[HMDRemoteAccountManager attributeDescriptions]
  -[HMDRemoteAccountManager service:account:identifier:didSendWithSuccess:error:context:]
  -[HMDRemoteAccountManager reset]
  -[HMDRemoteAccountManager accountForIdentifier:]
  -[HMDRemoteAccountManager .cxx_destruct]
  -[HMDRemoteAccountManager setAccounts:]
  -[HMDRemoteAccountManager stop]
  -[HMDRemoteAccountManager service]
  -[HMDRemoteAccountManager accountForHandle:]
  -[HMDRemoteAccountManager initWithIDSService:]
  -[HMDRemoteAccountManager setBackingStore:]
  -[HMDRemoteAccountManager backingStore]
  -[HMDRemoteAccountManager start]
  -[HMDRemoteAccountManager init]
  -[HMDRemoteAccountManager deviceForSenderContext:]
  -[HMDRemoteAccountManager _resolveAccountForHandle:completionHandler:]
  -[HMDRemoteAccountManager shouldCacheAccount:]
  -[HMDRemoteAccountManager shouldSyncAccount:]
  -[HMDRemoteAccountManager shouldSyncDevice:]
  -[HMDRemoteAccountManager shouldAccount:pushbackModel:actions:]
  -[HMDRemoteAccountManager shouldDevice:processModel:actions:]
  -[HMDRemoteAccountManager processAccountModel:message:]
  -[HMDRemoteAccountManager processAccountModelRemove:message:]
  -[HMDRemoteAccountManager accountForModelIdentifier:]
  -[HMDRemoteAccountManager resolveOperations]
  -[HMDRemoteAccountManager accountForSenderContext:]
  -[HMDRemoteAccountManager __handleSendMessageFailureWithError:destination:]


HMDRemoteMessageNotifications : HMFObject
 @property  NSMapTable *sessionNotificationPayloads

  // class methods
  +[HMDRemoteMessageNotifications initialize]
  +[HMDRemoteMessageNotifications messagesWithNotificationResponses]
  +[HMDRemoteMessageNotifications messageExpectsNotificationResponse:]

  // instance methods
  -[HMDRemoteMessageNotifications .cxx_destruct]
  -[HMDRemoteMessageNotifications init]
  -[HMDRemoteMessageNotifications _notificationPayloadsForDevice:]
  -[HMDRemoteMessageNotifications addNotificationPayload:identifier:device:]
  -[HMDRemoteMessageNotifications removeNotificationPayloadWithIdentifier:device:]
  -[HMDRemoteMessageNotifications notificationPayloadWithIdentifier:device:]
  -[HMDRemoteMessageNotifications clearNotificationsForDevice:]
  -[HMDRemoteMessageNotifications sessionNotificationPayloads]
  -[HMDRemoteMessageNotifications setSessionNotificationPayloads:]


HMDSecureRemoteMessageTransportDefaultDataSource : NSObject <HMDSecureRemoteMessageTransportDataSource>
 @property  NSArray *transports
 @property  HMDAccountRegistry *accountRegistry
 @property  HMDRemoteDeviceMonitor *deviceMonitor
 @property  HMDModernTransportDeviceReachabilityObserver *reachabilityObserver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDSecureRemoteMessageTransportDefaultDataSource .cxx_destruct]
  -[HMDSecureRemoteMessageTransportDefaultDataSource init]
  -[HMDSecureRemoteMessageTransportDefaultDataSource transports]
  -[HMDSecureRemoteMessageTransportDefaultDataSource deviceMonitor]
  -[HMDSecureRemoteMessageTransportDefaultDataSource accountRegistry]
  -[HMDSecureRemoteMessageTransportDefaultDataSource secureSessionWithDevice:]
  -[HMDSecureRemoteMessageTransportDefaultDataSource reachabilityObserver]


HMDSecureRemoteMessageTransport : HMFMessageTransport <HMDSecureRemoteSessionDelegate, HMFLogging, HMFMessageTransportDelegate, HMFDumpState>
 @property  <HMDSecureRemoteMessageTransportDataSource> *dataSource
 @property  HMFPromise *startPromise
 @property  HMDRemoteMessageNotifications *sessionNotifications
 @property  NSMutableDictionary *currentHomeConfigurations
 @property  HMDCloudDataSyncStateFilter *cloudDataSyncStateFilter
 @property  NSArray *transports
 @property  HMDRemoteDeviceMonitor *deviceMonitor
 @property  HMFFuture *startFuture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSecureRemoteMessageTransport shortDescription]
  +[HMDSecureRemoteMessageTransport logCategory]
  +[HMDSecureRemoteMessageTransport defaultTransport]

  // instance methods
  -[HMDSecureRemoteMessageTransport dumpState]
  -[HMDSecureRemoteMessageTransport initWithDataSource:]
  -[HMDSecureRemoteMessageTransport _reset]
  -[HMDSecureRemoteMessageTransport messageTransport:didReceiveMessage:]
  -[HMDSecureRemoteMessageTransport sendMessage:completionHandler:]
  -[HMDSecureRemoteMessageTransport dataSource]
  -[HMDSecureRemoteMessageTransport reset]
  -[HMDSecureRemoteMessageTransport .cxx_destruct]
  -[HMDSecureRemoteMessageTransport shortDescription]
  -[HMDSecureRemoteMessageTransport start]
  -[HMDSecureRemoteMessageTransport transports]
  -[HMDSecureRemoteMessageTransport descriptionWithPointer:]
  -[HMDSecureRemoteMessageTransport cloudDataSyncStateFilter]
  -[HMDSecureRemoteMessageTransport setCloudDataSyncStateFilter:]
  -[HMDSecureRemoteMessageTransport secureRemoteSession:receivedRequestToSendMessage:]
  -[HMDSecureRemoteMessageTransport secureRemoteSession:didCloseWithError:]
  -[HMDSecureRemoteMessageTransport deviceMonitor]
  -[HMDSecureRemoteMessageTransport electDeviceForHH1User:destination:deviceCapabilities:responseTimeout:responseQueue:responseHandler:]
  -[HMDSecureRemoteMessageTransport updateHome:configurationVersion:]
  -[HMDSecureRemoteMessageTransport removeHome:]
  -[HMDSecureRemoteMessageTransport prepareAnswerForRequestedCapabilities:]
  -[HMDSecureRemoteMessageTransport configureWithCloudDataSyncStateFilter:]
  -[HMDSecureRemoteMessageTransport _preferredTransportForMessage:]
  -[HMDSecureRemoteMessageTransport _handleReceivedMessage:transport:]
  -[HMDSecureRemoteMessageTransport _handleElectDeviceForUserResponse:error:responseQueue:completion:]
  -[HMDSecureRemoteMessageTransport _haveAllCapabilities:]
  -[HMDSecureRemoteMessageTransport _handleElectDeviceForIDSSession:]
  -[HMDSecureRemoteMessageTransport _updateDeviceInformationFromMessage:]
  -[HMDSecureRemoteMessageTransport _handlePingMessage:]
  -[HMDSecureRemoteMessageTransport pingDevice:completionHandler:]
  -[HMDSecureRemoteMessageTransport _pingDevice:completionHandler:]
  -[HMDSecureRemoteMessageTransport _sendPingToDevice:timeout:restriction:responseHandler:]
  -[HMDSecureRemoteMessageTransport _handleNotificationMessage:]
  -[HMDSecureRemoteMessageTransport _secureRemoteSessionForDevice:]
  -[HMDSecureRemoteMessageTransport _sendSecureMessage:completionHandler:]
  -[HMDSecureRemoteMessageTransport openSecureSessionToDevice:completionHandler:]
  -[HMDSecureRemoteMessageTransport _openSecureSessionToDevice:completionHandler:]
  -[HMDSecureRemoteMessageTransport _handleSecureMessage:fromDevice:transport:]
  -[HMDSecureRemoteMessageTransport startFuture]
  -[HMDSecureRemoteMessageTransport startPromise]
  -[HMDSecureRemoteMessageTransport sessionNotifications]
  -[HMDSecureRemoteMessageTransport setSessionNotifications:]
  -[HMDSecureRemoteMessageTransport currentHomeConfigurations]
  -[HMDSecureRemoteMessageTransport setCurrentHomeConfigurations:]


HMDAccessoryFirmwareUpdateSessionWingman : NSObject <HMDAccessoryFirmwareUpdateSessionWingman>
 @property  unsigned long initialSessionState

  // instance methods
  -[HMDAccessoryFirmwareUpdateSessionWingman newSchedulerWithAccessory:firmwareUpdateSession:workQueue:]
  -[HMDAccessoryFirmwareUpdateSessionWingman initialSessionState]


HMDAccessoryFirmwareUpdateSession : HMFObject <HMDDataStreamSocketDelegate, HMFTimerDelegate, UARPControllerDelegateProtocol, HMFLogging>
 @property  HMDAccessoryFirmwareUpdateManager *accessoryFirmwareUpdateManager
 @property  HMDAccessoryFirmwareUpdateConcurrencyLogEventManager *logEventManager
 @property  <HMDAccessoryFirmwareUpdateSessionWingman> *wingman
 @property  UARPAccessory *uarpAccessory
 @property  UARPAssetID *assetID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDDataStreamSocket> *dataStreamSocket
 @property  BOOL dataStreamOpenInProgress
 @property  unsigned long internalState
 @property  HMDAccessoryFirmwareUpdateScheduler *updateScheduler
 @property  HMFTimer *allowedApplyDurationTimer
 @property  HMFTimer *expectedApplyDurationTimer
 @property  HMFTimer *queryFirmwareUpdateResultDurationTimer
 @property  HMFTimer *registerFailureRetryTimer
 @property  BOOL remoteApplyInProgress
 @property  HMFTimer *socketIdleTimer
 @property  BOOL sessionEnded
 @property  BOOL assetOfferedForCurrentDataStream
 @property  BOOL firmwareVersionUpToDate
 @property  BOOL currentUpdateLatest
 @property  BOOL currentlyStaging
 @property  BOOL isVerifyingUpdate
 @property  unsigned long currentAutomaticApplyRetriesCount
 @property  unsigned long currentCommunicationErrorCount
 @property  HMFSoftwareVersion *lastStagedVersion
 @property  HMFSoftwareVersion *accessoryVersion
 @property  unsigned long sessionState
 @property  BOOL userInitiatedStaging
 @property  BOOL userInitiatedInstall
 @property  NSString *documentationPath
 @property  unsigned long applyHDSRetryCount
 @property  double expectedApplyDuration
 @property  double allowedApplyDuration
 @property  unsigned long currentRegisterFailureCount
 @property  @? registerFailureRetryTimerFactory
 @property  HMDHAPAccessory *hapAccessory
 @property  BOOL readyForStaging
 @property  BOOL readyToApplyUpdate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateSession logCategory]
  +[HMDAccessoryFirmwareUpdateSession __calculateDigestDataFromFile:maxDataSize:error:]

  // instance methods
  -[HMDAccessoryFirmwareUpdateSession setInternalState:]
  -[HMDAccessoryFirmwareUpdateSession internalState]
  -[HMDAccessoryFirmwareUpdateSession configure]
  -[HMDAccessoryFirmwareUpdateSession timerDidFire:]
  -[HMDAccessoryFirmwareUpdateSession logIdentifier]
  -[HMDAccessoryFirmwareUpdateSession assetID]
  -[HMDAccessoryFirmwareUpdateSession _register]
  -[HMDAccessoryFirmwareUpdateSession workQueue]
  -[HMDAccessoryFirmwareUpdateSession pause]
  -[HMDAccessoryFirmwareUpdateSession firmwareStagingComplete:assetID:withStatus:]
  -[HMDAccessoryFirmwareUpdateSession dealloc]
  -[HMDAccessoryFirmwareUpdateSession privateDescription]
  -[HMDAccessoryFirmwareUpdateSession setAssetID:]
  -[HMDAccessoryFirmwareUpdateSession .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateSession socketDidClose:]
  -[HMDAccessoryFirmwareUpdateSession assetAvailablityUpdateForAccessoryID:assetID:]
  -[HMDAccessoryFirmwareUpdateSession firmwareStagingProgress:assetID:bytesSent:bytesTotal:]
  -[HMDAccessoryFirmwareUpdateSession _endSession]
  -[HMDAccessoryFirmwareUpdateSession stagedFirmwareRescindComplete:withStatus:]
  -[HMDAccessoryFirmwareUpdateSession firmwareUpdateResult:vendorSpecificStatus:error:]
  -[HMDAccessoryFirmwareUpdateSession updateScheduler]
  -[HMDAccessoryFirmwareUpdateSession init]
  -[HMDAccessoryFirmwareUpdateSession sessionState]
  -[HMDAccessoryFirmwareUpdateSession _schedule]
  -[HMDAccessoryFirmwareUpdateSession documentationAvailable]
  -[HMDAccessoryFirmwareUpdateSession setUpdateScheduler:]
  -[HMDAccessoryFirmwareUpdateSession hapAccessory]
  -[HMDAccessoryFirmwareUpdateSession _logDebugStates:]
  -[HMDAccessoryFirmwareUpdateSession wingman]
  -[HMDAccessoryFirmwareUpdateSession _handleAutomaticUpdateEnabledChanged:]
  -[HMDAccessoryFirmwareUpdateSession handleAccessoryFirmwareVersionChangedNotification:]
  -[HMDAccessoryFirmwareUpdateSession handleStagedFirmwareVersionChangedNotification:]
  -[HMDAccessoryFirmwareUpdateSession handleFirmwareUpdateStateChangedNotification:]
  -[HMDAccessoryFirmwareUpdateSession handleNotReadyReasonsChanged:]
  -[HMDAccessoryFirmwareUpdateSession socket:didFailWithError:]
  -[HMDAccessoryFirmwareUpdateSession socketDidReceiveData:]
  -[HMDAccessoryFirmwareUpdateSession sendMessageToAccessory:uarpMsg:error:]
  -[HMDAccessoryFirmwareUpdateSession initWithHAPAccessory:uarpAccessory:accessoryFirmwareUpdateManager:logEventManager:]
  -[HMDAccessoryFirmwareUpdateSession initWithHAPAccessory:uarpAccessory:accessoryFirmwareUpdateManager:logEventManager:wingman:]
  -[HMDAccessoryFirmwareUpdateSession dataStreamSocket]
  -[HMDAccessoryFirmwareUpdateSession setDataStreamSocket:]
  -[HMDAccessoryFirmwareUpdateSession sessionEnded]
  -[HMDAccessoryFirmwareUpdateSession setSessionEnded:]
  -[HMDAccessoryFirmwareUpdateSession isUserInitiatedStaging]
  -[HMDAccessoryFirmwareUpdateSession setUserInitiatedStaging:]
  -[HMDAccessoryFirmwareUpdateSession isUserInitiatedInstall]
  -[HMDAccessoryFirmwareUpdateSession setUserInitiatedInstall:]
  -[HMDAccessoryFirmwareUpdateSession accessoryVersion]
  -[HMDAccessoryFirmwareUpdateSession startManualUpdate:error:]
  -[HMDAccessoryFirmwareUpdateSession resumeWithState:]
  -[HMDAccessoryFirmwareUpdateSession _startSocketIdleTimer]
  -[HMDAccessoryFirmwareUpdateSession _resetSocketIdleTimer]
  -[HMDAccessoryFirmwareUpdateSession _cancelSocketIdleTimer]
  -[HMDAccessoryFirmwareUpdateSession _handleSocketTimeout]
  -[HMDAccessoryFirmwareUpdateSession _cancelQueryFirmwareUpdateResultTimer]
  -[HMDAccessoryFirmwareUpdateSession _handleQueryFirmwareUpdateResultTimeout]
  -[HMDAccessoryFirmwareUpdateSession _cancelRegisterFailureRetryTimer]
  -[HMDAccessoryFirmwareUpdateSession _handleRegisterFailureRetryTimeout]
  -[HMDAccessoryFirmwareUpdateSession _withOpenSocketDoBlock:error:]
  -[HMDAccessoryFirmwareUpdateSession _syncStateWithAccessoryOnResume]
  -[HMDAccessoryFirmwareUpdateSession _evaluateHDSRetryForApplyFirmware]
  -[HMDAccessoryFirmwareUpdateSession isStagedFirmwareVersionUpToDate]
  -[HMDAccessoryFirmwareUpdateSession isFirmwareVersionUpToDate]
  -[HMDAccessoryFirmwareUpdateSession isCurrentlyStaging]
  -[HMDAccessoryFirmwareUpdateSession isReadyForStaging]
  -[HMDAccessoryFirmwareUpdateSession isCurrentlyApplying]
  -[HMDAccessoryFirmwareUpdateSession isCurrentUpdateLatest]
  -[HMDAccessoryFirmwareUpdateSession isReadyToApplyUpdate]
  -[HMDAccessoryFirmwareUpdateSession nextStateToSchedule]
  -[HMDAccessoryFirmwareUpdateSession stageFirmware]
  -[HMDAccessoryFirmwareUpdateSession stagingComplete]
  -[HMDAccessoryFirmwareUpdateSession applyFirmware]
  -[HMDAccessoryFirmwareUpdateSession _applyFirmware]
  -[HMDAccessoryFirmwareUpdateSession startApplyDurationTimers]
  -[HMDAccessoryFirmwareUpdateSession allowedApplyDuration]
  -[HMDAccessoryFirmwareUpdateSession expectedApplyDuration]
  -[HMDAccessoryFirmwareUpdateSession _allowedApplyDuration]
  -[HMDAccessoryFirmwareUpdateSession _expectedApplyDuration]
  -[HMDAccessoryFirmwareUpdateSession _automaticUpdateEnabledChanged:]
  -[HMDAccessoryFirmwareUpdateSession _stagingFailed]
  -[HMDAccessoryFirmwareUpdateSession _applyFailed]
  -[HMDAccessoryFirmwareUpdateSession _cancelApplyTimer]
  -[HMDAccessoryFirmwareUpdateSession updateAccessoryFirmwareVersion]
  -[HMDAccessoryFirmwareUpdateSession updateAccessoryStagedFirmwareVersion]
  -[HMDAccessoryFirmwareUpdateSession _updateSoftwareUpdateNotReadyReasons]
  -[HMDAccessoryFirmwareUpdateSession updateAvailableSoftwareUpdate]
  -[HMDAccessoryFirmwareUpdateSession _updateAvailableSoftwareUpdate]
  -[HMDAccessoryFirmwareUpdateSession _resetAvailableSoftwareUpdate]
  -[HMDAccessoryFirmwareUpdateSession updateAvailableSoftwareUpdateState:]
  -[HMDAccessoryFirmwareUpdateSession _updateAvailableSoftwareUpdateState:]
  -[HMDAccessoryFirmwareUpdateSession _updateAvailableSoftwareUpdateDocumentation]
  -[HMDAccessoryFirmwareUpdateSession newSoftwareUpdateWithState:]
  -[HMDAccessoryFirmwareUpdateSession newDocumentationMetadata]
  -[HMDAccessoryFirmwareUpdateSession registerAccessory]
  -[HMDAccessoryFirmwareUpdateSession unregisterAccessory]
  -[HMDAccessoryFirmwareUpdateSession _logApplyEventWithStatus:]
  -[HMDAccessoryFirmwareUpdateSession _verifyUpdateComplete]
  -[HMDAccessoryFirmwareUpdateSession _handleApplyTimerFired]
  -[HMDAccessoryFirmwareUpdateSession logDebugStates]
  -[HMDAccessoryFirmwareUpdateSession rescindStagedAsset:]
  -[HMDAccessoryFirmwareUpdateSession allowedApplyDurationTimer]
  -[HMDAccessoryFirmwareUpdateSession setAllowedApplyDurationTimer:]
  -[HMDAccessoryFirmwareUpdateSession assetOfferedForCurrentDataStream]
  -[HMDAccessoryFirmwareUpdateSession setAssetOfferedForCurrentDataStream:]
  -[HMDAccessoryFirmwareUpdateSession expectedApplyDurationTimer]
  -[HMDAccessoryFirmwareUpdateSession setExpectedApplyDurationTimer:]
  -[HMDAccessoryFirmwareUpdateSession queryFirmwareUpdateResultDurationTimer]
  -[HMDAccessoryFirmwareUpdateSession setQueryFirmwareUpdateResultDurationTimer:]
  -[HMDAccessoryFirmwareUpdateSession socketIdleTimer]
  -[HMDAccessoryFirmwareUpdateSession setSocketIdleTimer:]
  -[HMDAccessoryFirmwareUpdateSession dataStreamOpenInProgress]
  -[HMDAccessoryFirmwareUpdateSession setDataStreamOpenInProgress:]
  -[HMDAccessoryFirmwareUpdateSession accessoryFirmwareUpdateManager]
  -[HMDAccessoryFirmwareUpdateSession logEventManager]
  -[HMDAccessoryFirmwareUpdateSession uarpAccessory]
  -[HMDAccessoryFirmwareUpdateSession registerFailureRetryTimer]
  -[HMDAccessoryFirmwareUpdateSession setRegisterFailureRetryTimer:]
  -[HMDAccessoryFirmwareUpdateSession remoteApplyInProgress]
  -[HMDAccessoryFirmwareUpdateSession setRemoteApplyInProgress:]
  -[HMDAccessoryFirmwareUpdateSession isVerifyingUpdate]
  -[HMDAccessoryFirmwareUpdateSession setIsVerifyingUpdate:]
  -[HMDAccessoryFirmwareUpdateSession currentAutomaticApplyRetriesCount]
  -[HMDAccessoryFirmwareUpdateSession setCurrentAutomaticApplyRetriesCount:]
  -[HMDAccessoryFirmwareUpdateSession currentCommunicationErrorCount]
  -[HMDAccessoryFirmwareUpdateSession setCurrentCommunicationErrorCount:]
  -[HMDAccessoryFirmwareUpdateSession lastStagedVersion]
  -[HMDAccessoryFirmwareUpdateSession setLastStagedVersion:]
  -[HMDAccessoryFirmwareUpdateSession documentationPath]
  -[HMDAccessoryFirmwareUpdateSession setDocumentationPath:]
  -[HMDAccessoryFirmwareUpdateSession applyHDSRetryCount]
  -[HMDAccessoryFirmwareUpdateSession setApplyHDSRetryCount:]
  -[HMDAccessoryFirmwareUpdateSession currentRegisterFailureCount]
  -[HMDAccessoryFirmwareUpdateSession setCurrentRegisterFailureCount:]
  -[HMDAccessoryFirmwareUpdateSession registerFailureRetryTimerFactory]
  -[HMDAccessoryFirmwareUpdateSession setRegisterFailureRetryTimerFactory:]


_HMDCameraPowerAssertion : HMFObject
 @property  HMDCameraPowerAssertionHandler *assertionHandler
 @property  HMDCameraSessionID *remoteRequestHandlerSessionID

  // instance methods
  -[_HMDCameraPowerAssertion dealloc]
  -[_HMDCameraPowerAssertion .cxx_destruct]
  -[_HMDCameraPowerAssertion initWithPowerAssertionHandler:remoteRequestHandlerSessionID:]
  -[_HMDCameraPowerAssertion assertionHandler]
  -[_HMDCameraPowerAssertion remoteRequestHandlerSessionID]


HMDCameraPowerAssertionHandler : HMFObject <HMFLogging>
 @property  NSMutableSet *currentRequestHandlerSessionIDs
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned int powerAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraPowerAssertionHandler logCategory]
  +[HMDCameraPowerAssertionHandler sharedHandler]

  // instance methods
  -[HMDCameraPowerAssertionHandler workQueue]
  -[HMDCameraPowerAssertionHandler .cxx_destruct]
  -[HMDCameraPowerAssertionHandler powerAssertion]
  -[HMDCameraPowerAssertionHandler setPowerAssertion:]
  -[HMDCameraPowerAssertionHandler init]
  -[HMDCameraPowerAssertionHandler registerRemoteRequestHandler:forSessionID:]
  -[HMDCameraPowerAssertionHandler deregisterRemoteRequestHandler:]
  -[HMDCameraPowerAssertionHandler currentRequestHandlerSessionIDs]


HMDRemoteEventRouterProcessStateChangeAssertion : NSObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMETimerProvider> *timerProvider
 @property  <HMETimer> *backgroundTimer
 @property  <HMDRemoteEventRouterProcessStateChangeAssertionDelegate> *delegate
 @property  NSDictionary *applicationsAndIntervals
 @property  BOOL isProcessForeground
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteEventRouterProcessStateChangeAssertion logCategory]

  // instance methods
  -[HMDRemoteEventRouterProcessStateChangeAssertion delegate]
  -[HMDRemoteEventRouterProcessStateChangeAssertion .cxx_destruct]
  -[HMDRemoteEventRouterProcessStateChangeAssertion timerProvider]
  -[HMDRemoteEventRouterProcessStateChangeAssertion queue]
  -[HMDRemoteEventRouterProcessStateChangeAssertion initWithQueue:timerProvider:applicationsAndIntervals:delegate:]
  -[HMDRemoteEventRouterProcessStateChangeAssertion foregroundStateChangedWithBundleIdentifier:applicationState:]
  -[HMDRemoteEventRouterProcessStateChangeAssertion _enableBackgroundTimerIfNeeded:]
  -[HMDRemoteEventRouterProcessStateChangeAssertion _removeBackgroundTimer]
  -[HMDRemoteEventRouterProcessStateChangeAssertion _backgroundTimerDidExpire]
  -[HMDRemoteEventRouterProcessStateChangeAssertion isProcessForeground]
  -[HMDRemoteEventRouterProcessStateChangeAssertion setIsProcessForeground:]
  -[HMDRemoteEventRouterProcessStateChangeAssertion backgroundTimer]
  -[HMDRemoteEventRouterProcessStateChangeAssertion setBackgroundTimer:]
  -[HMDRemoteEventRouterProcessStateChangeAssertion applicationsAndIntervals]


AWDHomeKitEventTriggerEvent : PBCodable <NSCopying>
 @property  BOOL hasEndEvent
 @property  BOOL endEvent
 @property  BOOL hasCharEvent
 @property  AWDHomeKitCharacteristicEvent *charEvent
 @property  BOOL hasLocationEvent
 @property  AWDHomeKitLocationEvent *locationEvent
 @property  BOOL hasCharThresholdEvent
 @property  AWDHomeKitCharacteristicThresholdEvent *charThresholdEvent
 @property  BOOL hasCalendarEvent
 @property  AWDHomeKitCalendarEvent *calendarEvent
 @property  BOOL hasSignificantTimeEvent
 @property  AWDHomeKitSignificantTimeEvent *significantTimeEvent
 @property  BOOL hasThresholdEvent
 @property  AWDHomeKitCharacteristicThresholdEvent *thresholdEvent
 @property  BOOL hasPresenceEvent
 @property  AWDHomeKitPresenceEvent *presenceEvent
 @property  BOOL hasDurationEvent
 @property  AWDHomeKitDurationEvent *durationEvent

  // instance methods
  -[AWDHomeKitEventTriggerEvent setEndEvent:]
  -[AWDHomeKitEventTriggerEvent copyTo:]
  -[AWDHomeKitEventTriggerEvent .cxx_destruct]
  -[AWDHomeKitEventTriggerEvent mergeFrom:]
  -[AWDHomeKitEventTriggerEvent dictionaryRepresentation]
  -[AWDHomeKitEventTriggerEvent copyWithZone:]
  -[AWDHomeKitEventTriggerEvent readFrom:]
  -[AWDHomeKitEventTriggerEvent writeTo:]
  -[AWDHomeKitEventTriggerEvent endEvent]
  -[AWDHomeKitEventTriggerEvent isEqual:]
  -[AWDHomeKitEventTriggerEvent presenceEvent]
  -[AWDHomeKitEventTriggerEvent calendarEvent]
  -[AWDHomeKitEventTriggerEvent setCalendarEvent:]
  -[AWDHomeKitEventTriggerEvent charEvent]
  -[AWDHomeKitEventTriggerEvent setCharEvent:]
  -[AWDHomeKitEventTriggerEvent charThresholdEvent]
  -[AWDHomeKitEventTriggerEvent setCharThresholdEvent:]
  -[AWDHomeKitEventTriggerEvent durationEvent]
  -[AWDHomeKitEventTriggerEvent setDurationEvent:]
  -[AWDHomeKitEventTriggerEvent locationEvent]
  -[AWDHomeKitEventTriggerEvent setLocationEvent:]
  -[AWDHomeKitEventTriggerEvent setPresenceEvent:]
  -[AWDHomeKitEventTriggerEvent significantTimeEvent]
  -[AWDHomeKitEventTriggerEvent setSignificantTimeEvent:]
  -[AWDHomeKitEventTriggerEvent thresholdEvent]
  -[AWDHomeKitEventTriggerEvent setThresholdEvent:]
  -[AWDHomeKitEventTriggerEvent setHasEndEvent:]
  -[AWDHomeKitEventTriggerEvent hasEndEvent]
  -[AWDHomeKitEventTriggerEvent hasCharEvent]
  -[AWDHomeKitEventTriggerEvent hasLocationEvent]
  -[AWDHomeKitEventTriggerEvent hasCharThresholdEvent]
  -[AWDHomeKitEventTriggerEvent hasCalendarEvent]
  -[AWDHomeKitEventTriggerEvent hasSignificantTimeEvent]
  -[AWDHomeKitEventTriggerEvent hasThresholdEvent]
  -[AWDHomeKitEventTriggerEvent hasPresenceEvent]
  -[AWDHomeKitEventTriggerEvent hasDurationEvent]


HMDXPCMessageTransportFactory : NSObject <HMDXPCMessageTransportFactory>
 @property  HMDXPCMessageTransport *defaultTransport

  // instance methods
  -[HMDXPCMessageTransportFactory defaultTransport]


HMDRemoteLoginReceiverAuthentication : HMDRemoteLoginAuthentication
 @property  <HMDRemoteLoginReceiverAuthenticationDelegate> *delegate

  // class methods
  +[HMDRemoteLoginReceiverAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginReceiverAuthentication delegate]
  -[HMDRemoteLoginReceiverAuthentication .cxx_destruct]
  -[HMDRemoteLoginReceiverAuthentication _saveRemoteVerifiedAccount:completion:]
  -[HMDRemoteLoginReceiverAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:]
  -[HMDRemoteLoginReceiverAuthentication _authenticateForAccountType:usingAuthenticationResults:completionHandler:]
  -[HMDRemoteLoginReceiverAuthentication _authenticateStoreWithAuthenticationResults:completionHandler:]
  -[HMDRemoteLoginReceiverAuthentication _authenticateAccount:targetedAccountType:]
  -[HMDRemoteLoginReceiverAuthentication _handleAuthenticationResults:error:targetedAccountType:]
  -[HMDRemoteLoginReceiverAuthentication _completedAuthenticationRequest:loggedInAccount:]


HMDCameraStreamSessionID : HMDCameraSessionID
  // instance methods
  -[HMDCameraStreamSessionID initWithAccessory:service:sessionID:message:]


HMDMediaDestinationMessageHandler : HMDAppleMediaAccessoryMessageHandler
 @property  <HMDMediaDestinationMessageHandlerDataSource> *dataSource
 @property  <HMDMediaDestinationMessageHandlerDelegate> *delegate

  // class methods
  +[HMDMediaDestinationMessageHandler logCategory]

  // instance methods
  -[HMDMediaDestinationMessageHandler dataSource]
  -[HMDMediaDestinationMessageHandler setDelegate:]
  -[HMDMediaDestinationMessageHandler delegate]
  -[HMDMediaDestinationMessageHandler .cxx_destruct]
  -[HMDMediaDestinationMessageHandler setDataSource:]
  -[HMDMediaDestinationMessageHandler initWithDestination:messageDispatcher:notificationCenter:dataSource:delegate:]
  -[HMDMediaDestinationMessageHandler initWithDestination:messageDispatcher:notificationCenter:notifications:dataSource:delegate:]
  -[HMDMediaDestinationMessageHandler sendRequestToUpdateAudioGroupIdentifier:completion:]
  -[HMDMediaDestinationMessageHandler sendRequestToUpdateSupportOptions:completion:]
  -[HMDMediaDestinationMessageHandler handleUpdatedDestination:]
  -[HMDMediaDestinationMessageHandler audioGroupIdentifierInMessage:error:]
  -[HMDMediaDestinationMessageHandler supportedOptionsInMessage:error:]
  -[HMDMediaDestinationMessageHandler handleMediaDestinationUpdateAudioGroupIdentifierRequestMessage:]
  -[HMDMediaDestinationMessageHandler handleMediaDestinationUpdateSupportedOptionsRequestMessage:]


HMDHH2FrameworkSwitchDefaultDataSource : NSObject <HMDHH2FrameworkSwitchDataSource>
 @property  BOOL isHH2Enabled
 @property  unsigned long setupMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHH2FrameworkSwitchDefaultDataSource isHH2Enabled]
  -[HMDHH2FrameworkSwitchDefaultDataSource controller:cloudDatabaseWithContainerID:]
  -[HMDHH2FrameworkSwitchDefaultDataSource setupMode]


HMDHH2FrameworkSwitch : HMFObject <HMFLogging, HMBCloudDatabaseDelegate, HMBCloudZoneDelegate>
 @property  BOOL autoFrameworkSwitch
 @property  BOOL isTapToSetupOngoing
 @property  HMBCloudDatabase *cloudDatabaseToDetectHH2Zone
 @property  CKContainer *containerToCheckCloudKitReachability
 @property  NSObject<OS_dispatch_queue> *callbackQueueToCheckCloudKitReachability
 @property  @? blockToBeCalledBeforeSwitchingFramework
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHomeManager *homeManager
 @property  <HMDHH2FrameworkSwitchDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHH2FrameworkSwitch logCategory]
  +[HMDHH2FrameworkSwitch setHH2EnablementPreferenceKey:]
  +[HMDHH2FrameworkSwitch setHH2SettingsMigrationKey:]
  +[HMDHH2FrameworkSwitch relaunchHomedAfterSettingEnvironmentTo:blockToExecuteBeforeReLaunch:]
  +[HMDHH2FrameworkSwitch switchBackToHH1AndDoNotLaunchDueToPrimaryAccountRemoval]
  +[HMDHH2FrameworkSwitch switchBackToHH1AndRelaunchDueToHH2MigrationFailed]
  +[HMDHH2FrameworkSwitch switchBackToHH1AndRelaunch]
  +[HMDHH2FrameworkSwitch switchToHH2AndRelaunchHomed]

  // instance methods
  -[HMDHH2FrameworkSwitch dataSource]
  -[HMDHH2FrameworkSwitch workQueue]
  -[HMDHH2FrameworkSwitch setWorkQueue:]
  -[HMDHH2FrameworkSwitch .cxx_destruct]
  -[HMDHH2FrameworkSwitch homeManager]
  -[HMDHH2FrameworkSwitch setHomeManager:]
  -[HMDHH2FrameworkSwitch cloudDatabase:didCreateZoneWithID:]
  -[HMDHH2FrameworkSwitch setDataSource:]
  -[HMDHH2FrameworkSwitch handleTapToSetupFinished:]
  -[HMDHH2FrameworkSwitch initWithAutoSwitchEnabledWithHomeManager:dataSource:callBeforeFrameworkSwitchCompletionHandler:]
  -[HMDHH2FrameworkSwitch initWithAutoSwitchEnabledWithHomeManager:callBeforeFrameworkSwitchCompletionHandler:]
  -[HMDHH2FrameworkSwitch initWithAutoSwitchDisabledWithHomeManager:]
  -[HMDHH2FrameworkSwitch initWithAutoSwitch:callBeforeFrameworkSwitch:homeManager:dataSource:]
  -[HMDHH2FrameworkSwitch createHH2CloudDatabaseAndStartSyncing]
  -[HMDHH2FrameworkSwitch performInitialSyncAndSwitchFrameworkIfRequired]
  -[HMDHH2FrameworkSwitch forceFetchAllCloudZones]
  -[HMDHH2FrameworkSwitch waitForHH2SentinelZoneToBeFetchedFromCloud]
  -[HMDHH2FrameworkSwitch performInitialSync:]
  -[HMDHH2FrameworkSwitch createHH2SentinelZoneWithCompletionHandler:]
  -[HMDHH2FrameworkSwitch waitForHH2SentinelZoneToBeCreated:]
  -[HMDHH2FrameworkSwitch checkExistenceOfHH2SentinelZone]
  -[HMDHH2FrameworkSwitch makeSureWeAreRunningInRightEnvironment]
  -[HMDHH2FrameworkSwitch _makeSureWeAreRunningInRightEnvironment]
  -[HMDHH2FrameworkSwitch _areWeRunningInRightEnvironment]
  -[HMDHH2FrameworkSwitch waitForHH2SentinelZoneToBeRemoved]
  -[HMDHH2FrameworkSwitch removeHH2SentinelZoneWithCompletion:]
  -[HMDHH2FrameworkSwitch _clearSetupModeIfNeeded]
  -[HMDHH2FrameworkSwitch switchToHH2AndRelaunchHomedToPerformHH2Migration]
  -[HMDHH2FrameworkSwitch switchToHH2AfterPerformingHH2PreRebootTask]
  -[HMDHH2FrameworkSwitch areCloudKitServersReachable]
  -[HMDHH2FrameworkSwitch waitForCloudKitAccountToBeAvailable]
  -[HMDHH2FrameworkSwitch autoFrameworkSwitch]
  -[HMDHH2FrameworkSwitch setAutoFrameworkSwitch:]
  -[HMDHH2FrameworkSwitch isTapToSetupOngoing]
  -[HMDHH2FrameworkSwitch setIsTapToSetupOngoing:]
  -[HMDHH2FrameworkSwitch cloudDatabaseToDetectHH2Zone]
  -[HMDHH2FrameworkSwitch setCloudDatabaseToDetectHH2Zone:]
  -[HMDHH2FrameworkSwitch containerToCheckCloudKitReachability]
  -[HMDHH2FrameworkSwitch setContainerToCheckCloudKitReachability:]
  -[HMDHH2FrameworkSwitch callbackQueueToCheckCloudKitReachability]
  -[HMDHH2FrameworkSwitch setCallbackQueueToCheckCloudKitReachability:]
  -[HMDHH2FrameworkSwitch blockToBeCalledBeforeSwitchingFramework]
  -[HMDHH2FrameworkSwitch setBlockToBeCalledBeforeSwitchingFramework:]


HMDBLEBroadcastEventKeyGeneration : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDAccessory *accessory
 @property  int reason

  // class methods
  +[HMDBLEBroadcastEventKeyGeneration broadcastKeyGenerationEventForAccessory:reason:]

  // instance methods
  -[HMDBLEBroadcastEventKeyGeneration accessory]
  -[HMDBLEBroadcastEventKeyGeneration .cxx_destruct]
  -[HMDBLEBroadcastEventKeyGeneration reason]
  -[HMDBLEBroadcastEventKeyGeneration AWDMessageType]
  -[HMDBLEBroadcastEventKeyGeneration metricForAWD]
  -[HMDBLEBroadcastEventKeyGeneration initBroadcastKeyGenerationEventForAccessory:reason:]


HMDSoftwareUpdateAutomaticUpdateToggledEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL enabled

  // class methods
  +[HMDSoftwareUpdateAutomaticUpdateToggledEvent eventWithAutomaticUpdateEnabled:]

  // instance methods
  -[HMDSoftwareUpdateAutomaticUpdateToggledEvent setEnabled:]
  -[HMDSoftwareUpdateAutomaticUpdateToggledEvent isEnabled]
  -[HMDSoftwareUpdateAutomaticUpdateToggledEvent AWDMessageType]
  -[HMDSoftwareUpdateAutomaticUpdateToggledEvent metricForAWD]


HMDCameraRecordingBulkSendSessionReader : HMFObject <HMFTimerDelegate, HMFLogging>
 @property  NSString *logIdentifier
 @property  <HMDDataStreamBulkSendSession> *session
 @property  <HMDCameraRecordingBulkSendSessionReaderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingBulkSendSessionReader logCategory]

  // instance methods
  -[HMDCameraRecordingBulkSendSessionReader timerDidFire:]
  -[HMDCameraRecordingBulkSendSessionReader session]
  -[HMDCameraRecordingBulkSendSessionReader logIdentifier]
  -[HMDCameraRecordingBulkSendSessionReader setDelegate:]
  -[HMDCameraRecordingBulkSendSessionReader delegate]
  -[HMDCameraRecordingBulkSendSessionReader .cxx_destruct]
  -[HMDCameraRecordingBulkSendSessionReader start]
  -[HMDCameraRecordingBulkSendSessionReader stopWithReason:]
  -[HMDCameraRecordingBulkSendSessionReader initWithWorkQueue:session:readTimeout:logIdentifier:]
  -[HMDCameraRecordingBulkSendSessionReader initWithWorkQueue:session:readCallbackTimer:logIdentifier:]


HMDAccessoryFirmwareUpdateManagerWingman : NSObject <HMDAccessoryFirmwareUpdateManagerWingman>
 @property  UARPController *uarpController
 @property  double registerDelay

  // instance methods
  -[HMDAccessoryFirmwareUpdateManagerWingman .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateManagerWingman init]
  -[HMDAccessoryFirmwareUpdateManagerWingman newAccessoryFirmwareUpdateSessionWithHAPAccessory:uarpAccessory:accessoryFirmwareUpdateManager:logEventManager:]
  -[HMDAccessoryFirmwareUpdateManagerWingman uarpController]
  -[HMDAccessoryFirmwareUpdateManagerWingman registerDelay]


HMDAccessoryFirmwareUpdateManager : NSObject <HMFLogging, UARPControllerDelegateProtocol, HMFTimerDelegate>
 @property  HMDHomeManager *homeManager
 @property  NSMutableDictionary *activeSessions
 @property  HMDAccessoryFirmwareUpdateConcurrencyLogEventManager *logEventManager
 @property  <HMDAccessoryFirmwareUpdateManagerWingman> *wingman
 @property  NSMapTable *registeredAccessories
 @property  NSMutableDictionary *accessoryRetries
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFTimer *statusTimer
 @property  UARPController *uarpController
 @property  NSURL *documentationPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateManager logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateManager initWithHomeManager:]
  -[HMDAccessoryFirmwareUpdateManager timerDidFire:]
  -[HMDAccessoryFirmwareUpdateManager stagedFirmwareApplicationComplete:withStatus:]
  -[HMDAccessoryFirmwareUpdateManager workQueue]
  -[HMDAccessoryFirmwareUpdateManager firmwareStagingComplete:assetID:withStatus:]
  -[HMDAccessoryFirmwareUpdateManager dealloc]
  -[HMDAccessoryFirmwareUpdateManager .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateManager activeSessions]
  -[HMDAccessoryFirmwareUpdateManager homeManager]
  -[HMDAccessoryFirmwareUpdateManager removeSession:]
  -[HMDAccessoryFirmwareUpdateManager assetAvailablityUpdateForAccessoryID:assetID:]
  -[HMDAccessoryFirmwareUpdateManager firmwareStagingProgress:assetID:bytesSent:bytesTotal:]
  -[HMDAccessoryFirmwareUpdateManager assetSolicitationComplete:assetID:withStatus:]
  -[HMDAccessoryFirmwareUpdateManager assetSolicitationProgress:assetID:bytesReceived:bytesTotal:]
  -[HMDAccessoryFirmwareUpdateManager firmwareUpdateResult:vendorSpecificStatus:error:]
  -[HMDAccessoryFirmwareUpdateManager setActiveSessions:]
  -[HMDAccessoryFirmwareUpdateManager init]
  -[HMDAccessoryFirmwareUpdateManager statusTimer]
  -[HMDAccessoryFirmwareUpdateManager setStatusTimer:]
  -[HMDAccessoryFirmwareUpdateManager handleHomeAccessoryRemovedNotification:]
  -[HMDAccessoryFirmwareUpdateManager wingman]
  -[HMDAccessoryFirmwareUpdateManager sendMessageToAccessory:uarpMsg:error:]
  -[HMDAccessoryFirmwareUpdateManager logEventManager]
  -[HMDAccessoryFirmwareUpdateManager documentationPath]
  -[HMDAccessoryFirmwareUpdateManager uarpController]
  -[HMDAccessoryFirmwareUpdateManager handleAccessoryFirmwareVersionUpdateNotification:]
  -[HMDAccessoryFirmwareUpdateManager initWithHomeManager:wingman:]
  -[HMDAccessoryFirmwareUpdateManager deviceSupportsFirmwareUpdate]
  -[HMDAccessoryFirmwareUpdateManager isAccessoryRegistered:]
  -[HMDAccessoryFirmwareUpdateManager _handleAccessoryFirmwareVersionUpdateNotification:]
  -[HMDAccessoryFirmwareUpdateManager defaultUpdateAssetSourceWithAccessory:]
  -[HMDAccessoryFirmwareUpdateManager defaultProductDataUpdateAssetSource]
  -[HMDAccessoryFirmwareUpdateManager registerAccessory:]
  -[HMDAccessoryFirmwareUpdateManager _registerAccessory:source:path:]
  -[HMDAccessoryFirmwareUpdateManager changeAccessory:source:path:documentationPath:userInitiatedStaging:]
  -[HMDAccessoryFirmwareUpdateManager _handleHomeAccessoryRemovedNotification:]
  -[HMDAccessoryFirmwareUpdateManager unregisterAccessory:]
  -[HMDAccessoryFirmwareUpdateManager checkForUpdateForAccessory:]
  -[HMDAccessoryFirmwareUpdateManager startStatusTimer]
  -[HMDAccessoryFirmwareUpdateManager sessionForAccessory:]
  -[HMDAccessoryFirmwareUpdateManager addSessionForUARPAccessory:]
  -[HMDAccessoryFirmwareUpdateManager sessionForUARPAccessory:]
  -[HMDAccessoryFirmwareUpdateManager findHMDHAPAccessoryWithUARPAccessory:]
  -[HMDAccessoryFirmwareUpdateManager UARPAccessoryForHMDAccessory:]
  -[HMDAccessoryFirmwareUpdateManager hasAccessoryUsedAllFirmwareUpdateRetries:forAsset:]
  -[HMDAccessoryFirmwareUpdateManager isFirmwareUpdateRetryAllowedForAccessory:forAsset:]
  -[HMDAccessoryFirmwareUpdateManager resetFirmwareUpdateAccessoryRetryTracking:forAsset:]
  -[HMDAccessoryFirmwareUpdateManager startUARPPacketCapture:]
  -[HMDAccessoryFirmwareUpdateManager stopUARPPacketCapture]
  -[HMDAccessoryFirmwareUpdateManager rescindStagedAsset:completion:]
  -[HMDAccessoryFirmwareUpdateManager registeredAccessories]
  -[HMDAccessoryFirmwareUpdateManager setRegisteredAccessories:]
  -[HMDAccessoryFirmwareUpdateManager accessoryRetries]
  -[HMDAccessoryFirmwareUpdateManager setAccessoryRetries:]


HMDCloudPairedMetadata : HMFObject <HMFLogging>
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *baseAccessoryIdentifier
 @property  NSArray *versionConfigurations
 @property  NSDictionary *prettyJSONDictionary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudPairedMetadata logCategory]
  +[HMDCloudPairedMetadata __decodeVersionConfigurationWithVersionString:versionConfigurationValue:baseAccessoryIdentifier:]
  +[HMDCloudPairedMetadata _decodeVersionConfigurationsFromJSONDictionary:baseAccessoryIdentifier:allowUnzippedData:]

  // instance methods
  -[HMDCloudPairedMetadata attributeDescriptions]
  -[HMDCloudPairedMetadata .cxx_destruct]
  -[HMDCloudPairedMetadata prettyJSONDictionary]
  -[HMDCloudPairedMetadata initWithBaseAccessoryIdentifier:versionConfigurations:]
  -[HMDCloudPairedMetadata initWithBaseAccessoryIdentifier:data:]
  -[HMDCloudPairedMetadata initWithBaseAccessoryIdentifier:data:allowUnzippedData:]
  -[HMDCloudPairedMetadata baseAccessoryIdentifier]
  -[HMDCloudPairedMetadata versionConfigurations]


AWDHomeKitBackingStoreCKOperationZoneCompletionEvent : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDidSucceed
 @property  BOOL didSucceed
 @property  BOOL hasErrorCode
 @property  long long errorCode
 @property  BOOL hasContainerType
 @property  int containerType
 @property  BOOL hasZoneType
 @property  int zoneType
 @property  BOOL hasErrorDomain
 @property  NSString *errorDomain

  // instance methods
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasErrorCode]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setErrorCode:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent errorCode]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setErrorDomain:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setTimestamp:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent copyTo:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasErrorDomain]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent errorDomain]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent .cxx_destruct]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setHasErrorCode:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent mergeFrom:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setHasTimestamp:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent dictionaryRepresentation]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasTimestamp]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent copyWithZone:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent timestamp]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent readFrom:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent zoneType]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent writeTo:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent isEqual:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent containerType]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setContainerType:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent didSucceed]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setDidSucceed:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setHasContainerType:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasContainerType]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent containerTypeAsString:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent StringAsContainerType:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setHasDidSucceed:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasDidSucceed]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setZoneType:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent setHasZoneType:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent hasZoneType]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent zoneTypeAsString:]
  -[AWDHomeKitBackingStoreCKOperationZoneCompletionEvent StringAsZoneType:]


HMDVendorDataManager : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSURLSession *urlSession
 @property  HMFTimer *fetchTimer
 @property  NSURL *urlForBundledPlist
 @property  NSURL *urlForBundledInternalPlist
 @property  long long dataVersion
 @property  NSDictionary *collectionsByManufacturer
 @property  NSDictionary *entriesByProductData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDVendorDataManager logCategory]
  +[HMDVendorDataManager dbURL]
  +[HMDVendorDataManager sharedVendorDataManager]

  // instance methods
  -[HMDVendorDataManager timerDidFire:]
  -[HMDVendorDataManager urlSession]
  -[HMDVendorDataManager workQueue]
  -[HMDVendorDataManager _start]
  -[HMDVendorDataManager .cxx_destruct]
  -[HMDVendorDataManager dataVersion]
  -[HMDVendorDataManager init]
  -[HMDVendorDataManager initWithDefaults]
  -[HMDVendorDataManager setDataVersion:]
  -[HMDVendorDataManager _handleServerResponse:withData:error:]
  -[HMDVendorDataManager initWithWorkQueue:urlSession:fetchTimer:]
  -[HMDVendorDataManager vendorModelEntryForManufacturer:model:]
  -[HMDVendorDataManager vendorModelEntryForProductData:]
  -[HMDVendorDataManager urlForBundledPlist]
  -[HMDVendorDataManager urlForBundledInternalPlist]
  -[HMDVendorDataManager _loadDatabaseFromDictionary:]
  -[HMDVendorDataManager _loadDatabaseFromFileURL:fileDescription:]
  -[HMDVendorDataManager _loadDatabaseFromFilePath:fileDescription:]
  -[HMDVendorDataManager _loadDatabaseFromLocalFiles]
  -[HMDVendorDataManager _fetchDataFromServer]
  -[HMDVendorDataManager _handleDataFromServer:]
  -[HMDVendorDataManager _parseDatabaseFromDictionary:dataVersion:collectionsByManufacturer:entriesByProductData:]
  -[HMDVendorDataManager _modelsStringForManufacturer:model:dictionary:key:]
  -[HMDVendorDataManager _parseVendorModelEntryForManufacturer:model:dictionary:]
  -[HMDVendorDataManager _parseManufacturersList:collectionsByManufacturer:entriesByProductData:]
  -[HMDVendorDataManager fetchTimer]
  -[HMDVendorDataManager collectionsByManufacturer]
  -[HMDVendorDataManager setCollectionsByManufacturer:]
  -[HMDVendorDataManager entriesByProductData]
  -[HMDVendorDataManager setEntriesByProductData:]


HMDTimeEvent : HMDEvent <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSString *timerID
 @property  BOOL repetitive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDTimeEvent supportsSecureCoding]
  +[HMDTimeEvent logCategory]
  +[HMDTimeEvent isValidAbsoluteDateComponents:]
  +[HMDTimeEvent isValidOffsetDateComponents:]

  // instance methods
  -[HMDTimeEvent timerID]
  -[HMDTimeEvent _initialize]
  -[HMDTimeEvent encodeWithCoder:]
  -[HMDTimeEvent isActive]
  -[HMDTimeEvent .cxx_destruct]
  -[HMDTimeEvent invalidate]
  -[HMDTimeEvent initWithCoder:]
  -[HMDTimeEvent initWithModel:home:]
  -[HMDTimeEvent _activate:completionHandler:]
  -[HMDTimeEvent _nextTimerDate]
  -[HMDTimeEvent handleTimerFiredNotification:]
  -[HMDTimeEvent _updateRepetitive]
  -[HMDTimeEvent _reactivateTriggerAfterDelay]
  -[HMDTimeEvent repetitive]


HMDDataStreamFragmentChunk : HMFObject <NSCopying>
 @property  NSData *data
 @property  NSNumber *sequenceNumber
 @property  NSNumber *fragmentSequenceNumber
 @property  NSString *type
 @property  BOOL last
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[HMDDataStreamFragmentChunk type]
  -[HMDDataStreamFragmentChunk attributeDescriptions]
  -[HMDDataStreamFragmentChunk .cxx_destruct]
  -[HMDDataStreamFragmentChunk initWithDictionaryRepresentation:]
  -[HMDDataStreamFragmentChunk dictionaryRepresentation]
  -[HMDDataStreamFragmentChunk copyWithZone:]
  -[HMDDataStreamFragmentChunk sequenceNumber]
  -[HMDDataStreamFragmentChunk isEqual:]
  -[HMDDataStreamFragmentChunk data]
  -[HMDDataStreamFragmentChunk isLast]
  -[HMDDataStreamFragmentChunk initWithData:sequenceNumber:fragmentSequenceNumber:type:isLast:]
  -[HMDDataStreamFragmentChunk fragmentSequenceNumber]


HMDWatchSystemState : HMFObject
 @property  NSHashTable *watchSystemStateDelegates
 @property  BOOL companionReachable

  // class methods
  +[HMDWatchSystemState sharedState]

  // instance methods
  -[HMDWatchSystemState .cxx_destruct]
  -[HMDWatchSystemState registerDelegate:]
  -[HMDWatchSystemState init]
  -[HMDWatchSystemState isCompanionReachable]
  -[HMDWatchSystemState setCompanionReachable:]
  -[HMDWatchSystemState watchSystemStateDelegates]
  -[HMDWatchSystemState _callDidUpdateReachabilityChangeForCompanion:forDelegate:]


HMDCoordinationLocalElectionMeshController : COMeshController <HMDCoordinationAddOnImplDelegate, HMFLogging, HMDLocalElectionMeshController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDLocalElectionMeshControllerDelegate> *delegate
 @property  BOOL isLeader
 @property  BOOL isProcessing
 @property  NSArray *meshNodes
 @property  <HMDLocalElectionMeshNode> *leaderNode

  // class methods
  +[HMDCoordinationLocalElectionMeshController logCategory]

  // instance methods
  -[HMDCoordinationLocalElectionMeshController logIdentifier]
  -[HMDCoordinationLocalElectionMeshController setDelegate:]
  -[HMDCoordinationLocalElectionMeshController delegate]
  -[HMDCoordinationLocalElectionMeshController .cxx_destruct]
  -[HMDCoordinationLocalElectionMeshController stop]
  -[HMDCoordinationLocalElectionMeshController initWithQueue:]
  -[HMDCoordinationLocalElectionMeshController isProcessing]
  -[HMDCoordinationLocalElectionMeshController isLeader]
  -[HMDCoordinationLocalElectionMeshController meshControllerDidElectLeader]
  -[HMDCoordinationLocalElectionMeshController meshControllerDidStartElection]
  -[HMDCoordinationLocalElectionMeshController meshControllerDidUpdatesNodes]
  -[HMDCoordinationLocalElectionMeshController startMeshWithName:]
  -[HMDCoordinationLocalElectionMeshController sendPingCommandToLeaderWithCompletion:]
  -[HMDCoordinationLocalElectionMeshController sendPingNotificationToFollowers]
  -[HMDCoordinationLocalElectionMeshController sendPingRequestToNode:withCompletion:]
  -[HMDCoordinationLocalElectionMeshController debugDescriptionForControllerType]
  -[HMDCoordinationLocalElectionMeshController debugDescriptionForMeshState]
  -[HMDCoordinationLocalElectionMeshController meshNodes]
  -[HMDCoordinationLocalElectionMeshController leaderNode]
  -[HMDCoordinationLocalElectionMeshController _setupMessageRegistrations]
  -[HMDCoordinationLocalElectionMeshController meshNodeFor:]


HMDCoordinationAddOnImpl : COMeshAddOn
 @property  <HMDCoordinationAddOnImplDelegate> *delegate

  // instance methods
  -[HMDCoordinationAddOnImpl setDelegate:]
  -[HMDCoordinationAddOnImpl delegate]
  -[HMDCoordinationAddOnImpl .cxx_destruct]
  -[HMDCoordinationAddOnImpl meshController:didTransitionToState:]
  -[HMDCoordinationAddOnImpl didChangeNodesForMeshController:]


HMDCoordinationPingCommand : COMeshCommand

HMDCoordinationPingRequest : COMeshRequest
  // class methods
  +[HMDCoordinationPingRequest supportsSecureCoding]
  +[HMDCoordinationPingRequest acceptableResponses]

  // instance methods
  -[HMDCoordinationPingRequest encodeWithCoder:]
  -[HMDCoordinationPingRequest initWithCoder:]


HMDCoordinationPingResponse : COMeshResponse
  // class methods
  +[HMDCoordinationPingResponse supportsSecureCoding]

  // instance methods
  -[HMDCoordinationPingResponse encodeWithCoder:]
  -[HMDCoordinationPingResponse initWithCoder:]


HMDCoordinationPingNotification : COMeshNotification

HMDCoordinationLocalElectionMeshNode : NSObject <HMDLocalElectionMeshNode>
 @property  COMeshNode *meshNode
 @property  NSString *idsIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCoordinationLocalElectionMeshNode setIdsIdentifier:]
  -[HMDCoordinationLocalElectionMeshNode idsIdentifier]
  -[HMDCoordinationLocalElectionMeshNode .cxx_destruct]
  -[HMDCoordinationLocalElectionMeshNode isEqual:]
  -[HMDCoordinationLocalElectionMeshNode initWithMeshNode:]
  -[HMDCoordinationLocalElectionMeshNode meshNode]


AWDHomeKitAccessoryPairing : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasIsAdd
 @property  BOOL isAdd
 @property  BOOL hasIsAddedViaWAC
 @property  BOOL isAddedViaWAC
 @property  BOOL hasTransportType
 @property  int transportType
 @property  BOOL hasVendorDetails
 @property  AWDHomeKitVendorInformation *vendorDetails
 @property  BOOL hasCertified
 @property  int certified
 @property  BOOL hasIsSecureWAC
 @property  BOOL isSecureWAC
 @property  BOOL hasRetryCount
 @property  unsigned int retryCount
 @property  BOOL hasCredentialType
 @property  int credentialType
 @property  BOOL hasIsAddWithOwnershipProof
 @property  BOOL isAddWithOwnershipProof
 @property  BOOL hasIsNetworkRouterAdd
 @property  BOOL isNetworkRouterAdd
 @property  BOOL hasIsNetworkRouterReplace
 @property  BOOL isNetworkRouterReplace
 @property  BOOL hasAppIdentifier
 @property  NSString *appIdentifier
 @property  BOOL hasIsFirstHAPAccessoryInAnyHome
 @property  BOOL isFirstHAPAccessoryInAnyHome
 @property  BOOL hasIsFirstHAPAccessoryInHome
 @property  BOOL isFirstHAPAccessoryInHome
 @property  BOOL hasIsNoeAccessory
 @property  BOOL isNoeAccessory
 @property  BOOL hasNoeCapabilities
 @property  unsigned int noeCapabilities
 @property  BOOL hasNoeStatus
 @property  unsigned int noeStatus
 @property  BOOL hasIsBTOnboard
 @property  BOOL isBTOnboard
 @property  BOOL hasIsNoeOnboard
 @property  BOOL isNoeOnboard
 @property  BOOL hasNoeOnboardDuration
 @property  unsigned int noeOnboardDuration
 @property  BOOL hasNoeOnboardErrorCode
 @property  int noeOnboardErrorCode
 @property  BOOL hasNoeOnboardErrorDomain
 @property  NSString *noeOnboardErrorDomain
 @property  BOOL hasErrorDomain
 @property  NSString *errorDomain

  // instance methods
  -[AWDHomeKitAccessoryPairing credentialType]
  -[AWDHomeKitAccessoryPairing hasErrorCode]
  -[AWDHomeKitAccessoryPairing setErrorCode:]
  -[AWDHomeKitAccessoryPairing errorCode]
  -[AWDHomeKitAccessoryPairing setDuration:]
  -[AWDHomeKitAccessoryPairing appIdentifier]
  -[AWDHomeKitAccessoryPairing setErrorDomain:]
  -[AWDHomeKitAccessoryPairing setTimestamp:]
  -[AWDHomeKitAccessoryPairing hasDuration]
  -[AWDHomeKitAccessoryPairing copyTo:]
  -[AWDHomeKitAccessoryPairing setTransportType:]
  -[AWDHomeKitAccessoryPairing retryCount]
  -[AWDHomeKitAccessoryPairing setRetryCount:]
  -[AWDHomeKitAccessoryPairing hasErrorDomain]
  -[AWDHomeKitAccessoryPairing errorDomain]
  -[AWDHomeKitAccessoryPairing .cxx_destruct]
  -[AWDHomeKitAccessoryPairing setHasErrorCode:]
  -[AWDHomeKitAccessoryPairing duration]
  -[AWDHomeKitAccessoryPairing mergeFrom:]
  -[AWDHomeKitAccessoryPairing transportType]
  -[AWDHomeKitAccessoryPairing setHasTimestamp:]
  -[AWDHomeKitAccessoryPairing hasAppIdentifier]
  -[AWDHomeKitAccessoryPairing dictionaryRepresentation]
  -[AWDHomeKitAccessoryPairing hasTimestamp]
  -[AWDHomeKitAccessoryPairing copyWithZone:]
  -[AWDHomeKitAccessoryPairing StringAsTransportType:]
  -[AWDHomeKitAccessoryPairing timestamp]
  -[AWDHomeKitAccessoryPairing readFrom:]
  -[AWDHomeKitAccessoryPairing hasTransportType]
  -[AWDHomeKitAccessoryPairing setCredentialType:]
  -[AWDHomeKitAccessoryPairing setHasDuration:]
  -[AWDHomeKitAccessoryPairing writeTo:]
  -[AWDHomeKitAccessoryPairing setHasTransportType:]
  -[AWDHomeKitAccessoryPairing isEqual:]
  -[AWDHomeKitAccessoryPairing transportTypeAsString:]
  -[AWDHomeKitAccessoryPairing setAppIdentifier:]
  -[AWDHomeKitAccessoryPairing hasCredentialType]
  -[AWDHomeKitAccessoryPairing isAdd]
  -[AWDHomeKitAccessoryPairing hasRetryCount]
  -[AWDHomeKitAccessoryPairing setHasRetryCount:]
  -[AWDHomeKitAccessoryPairing hasVendorDetails]
  -[AWDHomeKitAccessoryPairing vendorDetails]
  -[AWDHomeKitAccessoryPairing setVendorDetails:]
  -[AWDHomeKitAccessoryPairing certified]
  -[AWDHomeKitAccessoryPairing setCertified:]
  -[AWDHomeKitAccessoryPairing setHasCertified:]
  -[AWDHomeKitAccessoryPairing hasCertified]
  -[AWDHomeKitAccessoryPairing certifiedAsString:]
  -[AWDHomeKitAccessoryPairing StringAsCertified:]
  -[AWDHomeKitAccessoryPairing setIsNoeAccessory:]
  -[AWDHomeKitAccessoryPairing setHasIsNoeAccessory:]
  -[AWDHomeKitAccessoryPairing hasIsNoeAccessory]
  -[AWDHomeKitAccessoryPairing isNoeAccessory]
  -[AWDHomeKitAccessoryPairing isNetworkRouterAdd]
  -[AWDHomeKitAccessoryPairing isNetworkRouterReplace]
  -[AWDHomeKitAccessoryPairing isFirstHAPAccessoryInHome]
  -[AWDHomeKitAccessoryPairing isFirstHAPAccessoryInAnyHome]
  -[AWDHomeKitAccessoryPairing setIsAdd:]
  -[AWDHomeKitAccessoryPairing setHasIsAdd:]
  -[AWDHomeKitAccessoryPairing hasIsAdd]
  -[AWDHomeKitAccessoryPairing setIsAddedViaWAC:]
  -[AWDHomeKitAccessoryPairing setHasIsAddedViaWAC:]
  -[AWDHomeKitAccessoryPairing hasIsAddedViaWAC]
  -[AWDHomeKitAccessoryPairing setIsSecureWAC:]
  -[AWDHomeKitAccessoryPairing setHasIsSecureWAC:]
  -[AWDHomeKitAccessoryPairing hasIsSecureWAC]
  -[AWDHomeKitAccessoryPairing setHasCredentialType:]
  -[AWDHomeKitAccessoryPairing credentialTypeAsString:]
  -[AWDHomeKitAccessoryPairing StringAsCredentialType:]
  -[AWDHomeKitAccessoryPairing setIsAddWithOwnershipProof:]
  -[AWDHomeKitAccessoryPairing setHasIsAddWithOwnershipProof:]
  -[AWDHomeKitAccessoryPairing hasIsAddWithOwnershipProof]
  -[AWDHomeKitAccessoryPairing setIsNetworkRouterAdd:]
  -[AWDHomeKitAccessoryPairing setHasIsNetworkRouterAdd:]
  -[AWDHomeKitAccessoryPairing hasIsNetworkRouterAdd]
  -[AWDHomeKitAccessoryPairing setIsNetworkRouterReplace:]
  -[AWDHomeKitAccessoryPairing setHasIsNetworkRouterReplace:]
  -[AWDHomeKitAccessoryPairing hasIsNetworkRouterReplace]
  -[AWDHomeKitAccessoryPairing setIsFirstHAPAccessoryInAnyHome:]
  -[AWDHomeKitAccessoryPairing setHasIsFirstHAPAccessoryInAnyHome:]
  -[AWDHomeKitAccessoryPairing hasIsFirstHAPAccessoryInAnyHome]
  -[AWDHomeKitAccessoryPairing setIsFirstHAPAccessoryInHome:]
  -[AWDHomeKitAccessoryPairing setHasIsFirstHAPAccessoryInHome:]
  -[AWDHomeKitAccessoryPairing hasIsFirstHAPAccessoryInHome]
  -[AWDHomeKitAccessoryPairing setNoeCapabilities:]
  -[AWDHomeKitAccessoryPairing setHasNoeCapabilities:]
  -[AWDHomeKitAccessoryPairing hasNoeCapabilities]
  -[AWDHomeKitAccessoryPairing setNoeStatus:]
  -[AWDHomeKitAccessoryPairing setHasNoeStatus:]
  -[AWDHomeKitAccessoryPairing hasNoeStatus]
  -[AWDHomeKitAccessoryPairing setIsBTOnboard:]
  -[AWDHomeKitAccessoryPairing setHasIsBTOnboard:]
  -[AWDHomeKitAccessoryPairing hasIsBTOnboard]
  -[AWDHomeKitAccessoryPairing setIsNoeOnboard:]
  -[AWDHomeKitAccessoryPairing setHasIsNoeOnboard:]
  -[AWDHomeKitAccessoryPairing hasIsNoeOnboard]
  -[AWDHomeKitAccessoryPairing setNoeOnboardDuration:]
  -[AWDHomeKitAccessoryPairing setHasNoeOnboardDuration:]
  -[AWDHomeKitAccessoryPairing hasNoeOnboardDuration]
  -[AWDHomeKitAccessoryPairing setNoeOnboardErrorCode:]
  -[AWDHomeKitAccessoryPairing setHasNoeOnboardErrorCode:]
  -[AWDHomeKitAccessoryPairing hasNoeOnboardErrorCode]
  -[AWDHomeKitAccessoryPairing hasNoeOnboardErrorDomain]
  -[AWDHomeKitAccessoryPairing isAddedViaWAC]
  -[AWDHomeKitAccessoryPairing isSecureWAC]
  -[AWDHomeKitAccessoryPairing isAddWithOwnershipProof]
  -[AWDHomeKitAccessoryPairing noeCapabilities]
  -[AWDHomeKitAccessoryPairing noeStatus]
  -[AWDHomeKitAccessoryPairing isBTOnboard]
  -[AWDHomeKitAccessoryPairing isNoeOnboard]
  -[AWDHomeKitAccessoryPairing noeOnboardDuration]
  -[AWDHomeKitAccessoryPairing noeOnboardErrorCode]
  -[AWDHomeKitAccessoryPairing noeOnboardErrorDomain]
  -[AWDHomeKitAccessoryPairing setNoeOnboardErrorDomain:]


HMDNetworkRouterController : NSObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *accessory
 @property  HMDService *routerService
 @property  NSString *wiFiSSID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterController logCategory]

  // instance methods
  -[HMDNetworkRouterController accessory]
  -[HMDNetworkRouterController setAccessory:]
  -[HMDNetworkRouterController workQueue]
  -[HMDNetworkRouterController setWorkQueue:]
  -[HMDNetworkRouterController .cxx_destruct]
  -[HMDNetworkRouterController isEqual:]
  -[HMDNetworkRouterController initWithAccessory:service:workQueue:]
  -[HMDNetworkRouterController wiFiSSID]
  -[HMDNetworkRouterController writeManagedNetworkEnable:completion:]
  -[HMDNetworkRouterController getClientStatusWithIdentifiers:completion:]
  -[HMDNetworkRouterController getClientStatusWithIdentifier:completion:]
  -[HMDNetworkRouterController addClientConfiguration:completion:]
  -[HMDNetworkRouterController readClientConfigurationWithClientIdentifier:completion:]
  -[HMDNetworkRouterController updateClientConfiguration:completion:]
  -[HMDNetworkRouterController removeClientConfigurationWithClientIdentifier:completion:]
  -[HMDNetworkRouterController getAccessViolationList:]
  -[HMDNetworkRouterController resetAccessViolationForClientIdentifier:completion:]
  -[HMDNetworkRouterController _writeClientConfigurationControlRequest:operationName:completion:]
  -[HMDNetworkRouterController _writeValueIfDifferent:characteristicType:operationName:completion:]
  -[HMDNetworkRouterController _writeTLVWithValueInResponse:characteristicType:operationName:completion:]
  -[HMDNetworkRouterController _writeValue:forCharacteristic:completion:]
  -[HMDNetworkRouterController routerService]
  -[HMDNetworkRouterController setRouterService:]


HMDHomeNFCReaderKeyManager : HMFObject <HMFMessageReceiver, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HAPSystemKeychainStore> *keychainStore
 @property  NSUUID *uuid
 @property  HMDHome *home
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDHomeWalletDataSource> *dataSource
 @property  HMDDevice *primaryResidentDevice
 @property  NAFuture *createKeychainItemFuture
 @property  HMDHomeWalletKeyAccessoryManager *accessoryManager
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeNFCReaderKeyManager logCategory]

  // instance methods
  -[HMDHomeNFCReaderKeyManager home]
  -[HMDHomeNFCReaderKeyManager logIdentifier]
  -[HMDHomeNFCReaderKeyManager dataSource]
  -[HMDHomeNFCReaderKeyManager keychainStore]
  -[HMDHomeNFCReaderKeyManager workQueue]
  -[HMDHomeNFCReaderKeyManager uuid]
  -[HMDHomeNFCReaderKeyManager .cxx_destruct]
  -[HMDHomeNFCReaderKeyManager messageTargetUUID]
  -[HMDHomeNFCReaderKeyManager messageReceiveQueue]
  -[HMDHomeNFCReaderKeyManager accessoryManager]
  -[HMDHomeNFCReaderKeyManager messageDispatcher]
  -[HMDHomeNFCReaderKeyManager setHome:]
  -[HMDHomeNFCReaderKeyManager setMessageDispatcher:]
  -[HMDHomeNFCReaderKeyManager configureWithHome:]
  -[HMDHomeNFCReaderKeyManager handleHomeRemovedNotification:]
  -[HMDHomeNFCReaderKeyManager handleHomeDidUpdateNFCReaderKeyNotification:]
  -[HMDHomeNFCReaderKeyManager initWithUUID:workQueue:]
  -[HMDHomeNFCReaderKeyManager primaryResidentDevice]
  -[HMDHomeNFCReaderKeyManager handleFetchOrCreateReaderKeyMessage:]
  -[HMDHomeNFCReaderKeyManager handleCreateKeychainItemForReaderKeyMessage:]
  -[HMDHomeNFCReaderKeyManager handleDeleteKeychainItemForNFCReaderKey:]
  -[HMDHomeNFCReaderKeyManager handleSystemKeychainStoreUpdatedNotification:]
  -[HMDHomeNFCReaderKeyManager initWithUUID:workQueue:keychainStore:dataSource:]
  -[HMDHomeNFCReaderKeyManager deleteKeychainItemForNFCReaderKey]
  -[HMDHomeNFCReaderKeyManager fetchOrCreateReaderKeyWithRequiresPrivateKey:completion:]
  -[HMDHomeNFCReaderKeyManager deleteKeychainItemForNFCReaderKeyWithCompletion:]
  -[HMDHomeNFCReaderKeyManager readerKeyWithKeychainItemIdentifier:error:]
  -[HMDHomeNFCReaderKeyManager createReaderKeyKeychainItemForHome:withCompletion:]
  -[HMDHomeNFCReaderKeyManager createNFCReaderKeyModelWithHome:nfcReaderKey:]
  -[HMDHomeNFCReaderKeyManager removeKeychainItemForReaderKey:home:]
  -[HMDHomeNFCReaderKeyManager requestDevice:toCreateKeychainItemForReaderKeyWithCompletion:]
  -[HMDHomeNFCReaderKeyManager requestPrimaryResidentToFetchOrCreateReaderKeyWithCompletion:]
  -[HMDHomeNFCReaderKeyManager createKeychainItemFuture]
  -[HMDHomeNFCReaderKeyManager setCreateKeychainItemFuture:]


HMDCharacteristicEventBase : HMDEvent
 @property  HMDCharacteristic *characteristic
 @property  NSUUID *accessoryUUID
 @property  NSNumber *serviceID
 @property  NSNumber *characteristicInstanceID
 @property  id previousValue

  // class methods
  +[HMDCharacteristicEventBase supportsSecureCoding]
  +[HMDCharacteristicEventBase logCategory]
  +[HMDCharacteristicEventBase compareValueOfCharacteristic:againstValue:operatorType:]
  +[HMDCharacteristicEventBase lookForCharacteristicByAccessoryUUID:serviceID:characteristicID:inHome:checkForSupport:outError:shouldLog:]

  // instance methods
  -[HMDCharacteristicEventBase accessoryUUID]
  -[HMDCharacteristicEventBase serviceID]
  -[HMDCharacteristicEventBase encodeWithCoder:]
  -[HMDCharacteristicEventBase setPreviousValue:]
  -[HMDCharacteristicEventBase isActive]
  -[HMDCharacteristicEventBase .cxx_destruct]
  -[HMDCharacteristicEventBase previousValue]
  -[HMDCharacteristicEventBase initWithCoder:]
  -[HMDCharacteristicEventBase characteristic]
  -[HMDCharacteristicEventBase setCharacteristic:]
  -[HMDCharacteristicEventBase _registerForMessages]
  -[HMDCharacteristicEventBase createPayload]
  -[HMDCharacteristicEventBase characteristicInstanceID]
  -[HMDCharacteristicEventBase initWithModel:home:]
  -[HMDCharacteristicEventBase _activate:completionHandler:]
  -[HMDCharacteristicEventBase _evaluateNewValue:]
  -[HMDCharacteristicEventBase handleCharacteristicsChangedNotification:]
  -[HMDCharacteristicEventBase __handleCharacteristicsChangedPayload:]
  -[HMDCharacteristicEventBase replaceCharacteristic:]
  -[HMDCharacteristicEventBase fixCharacteristicInHome:]


HMDCharacteristicEventBaseModel : HMDEventModel
 @property  NSString *accessory
 @property  NSNumber *serviceID
 @property  NSNumber *characteristicID

  // class methods
  +[HMDCharacteristicEventBaseModel properties]
  +[HMDCharacteristicEventBaseModel eventModelWithDictionary:home:eventTriggerUUID:className:message:checkForSupport:outCharateristic:]

  // instance methods
  -[HMDCharacteristicEventBaseModel dependentUUIDs]


HMDCameraRecordingPreferredVideoConfiguration : NSObject
 @property  NSDictionary *bitRateByFrameRate
 @property  NSNumber *keyFrameInterval
 @property  long long resolution
 @property  long long h264Level

  // instance methods
  -[HMDCameraRecordingPreferredVideoConfiguration .cxx_destruct]
  -[HMDCameraRecordingPreferredVideoConfiguration resolution]
  -[HMDCameraRecordingPreferredVideoConfiguration h264Level]
  -[HMDCameraRecordingPreferredVideoConfiguration initWithResolution:bitRateByFrameRate:keyFrameInterval:h264Level:]
  -[HMDCameraRecordingPreferredVideoConfiguration bitRateByFrameRate]
  -[HMDCameraRecordingPreferredVideoConfiguration keyFrameInterval]


HMDCameraRecordingPreferredAudioConfiguration : NSObject
 @property  NSNumber *bitRate
 @property  long long sampleRate

  // instance methods
  -[HMDCameraRecordingPreferredAudioConfiguration sampleRate]
  -[HMDCameraRecordingPreferredAudioConfiguration .cxx_destruct]
  -[HMDCameraRecordingPreferredAudioConfiguration bitRate]
  -[HMDCameraRecordingPreferredAudioConfiguration initWithSampleRate:bitRate:]


HMDCameraRecordingSettingsControl : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDService *recordingService
 @property  HMDHAPAccessory *accessory
 @property  NSNotificationCenter *notificationCenter
 @property  NSString *clientIdentifier
 @property  NSArray *videoConfigurationsByPreferenceOrder
 @property  NSMutableArray *pendingConfigureCompletionHandlers
 @property  HMDCharacteristic *recordingActiveCharacteristic
 @property  HMDCharacteristic *recordingSelectedConfigurationCharacteristic
 @property  HMDCameraRecordingGeneralConfiguration *supportedRecordingConfiguration
 @property  HMDCameraRecordingSupportedVideoConfiguration *supportedVideoConfiguration
 @property  HMDCameraRecordingSupportedAudioConfiguration *supportedAudioConfiguration
 @property  HMDCameraRecordingSelectedConfiguration *currentSelectedConfiguration
 @property  NSDictionary *recordingConfigurationOverrides
 @property  NSNumber *configuredBitRate
 @property  NSNumber *configuredIFrameInterval
 @property  NSNumber *configuredImageWidth
 @property  NSNumber *configuredImageHeight
 @property  double configuredFragmentDuration
 @property  double configuredPrebufferDuration
 @property  BOOL cameraConfiguredForRecording
 @property  <HMDCameraRecordingSettingsControlDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSettingsControl logCategory]
  +[HMDCameraRecordingSettingsControl audioConfigurationsByPreferenceOrder]
  +[HMDCameraRecordingSettingsControl isSupportedVideoCodec:]
  +[HMDCameraRecordingSettingsControl isSupportedH264Profile:]
  +[HMDCameraRecordingSettingsControl h264ProfileForCodecConfiguration:]
  +[HMDCameraRecordingSettingsControl videoCodecForCodecConfiguration:]
  +[HMDCameraRecordingSettingsControl isSupportedAudioCodec:]
  +[HMDCameraRecordingSettingsControl audioBitRateForCodecConfiguration:]
  +[HMDCameraRecordingSettingsControl audioCodecForCodecConfiguration:]

  // instance methods
  -[HMDCameraRecordingSettingsControl notificationCenter]
  -[HMDCameraRecordingSettingsControl accessory]
  -[HMDCameraRecordingSettingsControl logIdentifier]
  -[HMDCameraRecordingSettingsControl setDelegate:]
  -[HMDCameraRecordingSettingsControl clientIdentifier]
  -[HMDCameraRecordingSettingsControl workQueue]
  -[HMDCameraRecordingSettingsControl delegate]
  -[HMDCameraRecordingSettingsControl dealloc]
  -[HMDCameraRecordingSettingsControl .cxx_destruct]
  -[HMDCameraRecordingSettingsControl handleCharacteristicValueUpdated:]
  -[HMDCameraRecordingSettingsControl start]
  -[HMDCameraRecordingSettingsControl handleHomePersonManagerSettingsDidChangeNotification:]
  -[HMDCameraRecordingSettingsControl handleAccessoryConnected:]
  -[HMDCameraRecordingSettingsControl handleAccessoryDisconnected:]
  -[HMDCameraRecordingSettingsControl handleCharacteristicsUpdated:]
  -[HMDCameraRecordingSettingsControl handleCameraProfileSettingsDidWriteToAccessory:]
  -[HMDCameraRecordingSettingsControl initWithWorkQueue:accessory:recordingManagementService:]
  -[HMDCameraRecordingSettingsControl initWithWorkQueue:accessory:recordingManagementService:notificationCenter:]
  -[HMDCameraRecordingSettingsControl configuredBitRate]
  -[HMDCameraRecordingSettingsControl configuredIFrameInterval]
  -[HMDCameraRecordingSettingsControl configuredImageWidth]
  -[HMDCameraRecordingSettingsControl configuredImageHeight]
  -[HMDCameraRecordingSettingsControl videoConfigurationsByPreferenceOrder]
  -[HMDCameraRecordingSettingsControl _recordingGeneralConfiguration]
  -[HMDCameraRecordingSettingsControl _preferredVideoConfigurationOverride]
  -[HMDCameraRecordingSettingsControl _preferredAudioConfigurationOverride]
  -[HMDCameraRecordingSettingsControl _recordingVideoConfiguration]
  -[HMDCameraRecordingSettingsControl characteristicsToMonitor]
  -[HMDCameraRecordingSettingsControl recordingActiveCharacteristic]
  -[HMDCameraRecordingSettingsControl recordingSelectedConfigurationCharacteristic]
  -[HMDCameraRecordingSettingsControl _recordingAudioConfiguration]
  -[HMDCameraRecordingSettingsControl enableCharacteristicNotifications]
  -[HMDCameraRecordingSettingsControl configureCameraRecordingSettings]
  -[HMDCameraRecordingSettingsControl configureCameraRecordingSettingsWithCompletion:]
  -[HMDCameraRecordingSettingsControl reconfigureCameraRecordingSettingsWithReason:]
  -[HMDCameraRecordingSettingsControl handleAccessoryIsNotConfiguredError]
  -[HMDCameraRecordingSettingsControl _writeCameraRecordingSettings]
  -[HMDCameraRecordingSettingsControl _updateSelectedRecordingConfiguration:]
  -[HMDCameraRecordingSettingsControl _readCameraRecordingSettings]
  -[HMDCameraRecordingSettingsControl _handleCurrentIsRecordingActive:selectedConfiguration:]
  -[HMDCameraRecordingSettingsControl _readSupportedCameraRecordingConfiguration]
  -[HMDCameraRecordingSettingsControl _handleSupportedConfigurationCharacteristicsReadResponses:]
  -[HMDCameraRecordingSettingsControl _isRecordingActiveValueInResponses:]
  -[HMDCameraRecordingSettingsControl _selectedRecordingConfigurationInResponses:]
  -[HMDCameraRecordingSettingsControl _generalRecordingConfigurationInResponses:]
  -[HMDCameraRecordingSettingsControl _supportedAudioConfigurationInResponses:]
  -[HMDCameraRecordingSettingsControl _supportedVideoConfigurationInResponses:]
  -[HMDCameraRecordingSettingsControl _dataValueForCharacteristicOfType:inResponses:]
  -[HMDCameraRecordingSettingsControl _numberValueForCharacteristicOfType:inResponses:]
  -[HMDCameraRecordingSettingsControl _invokePendingConfigureCompletionHandlersWithError:]
  -[HMDCameraRecordingSettingsControl _setSelectedRecordingConfiguration:]
  -[HMDCameraRecordingSettingsControl isCameraConfiguredForRecording]
  -[HMDCameraRecordingSettingsControl configuredFragmentDuration]
  -[HMDCameraRecordingSettingsControl configuredPrebufferDuration]
  -[HMDCameraRecordingSettingsControl recordingService]
  -[HMDCameraRecordingSettingsControl pendingConfigureCompletionHandlers]
  -[HMDCameraRecordingSettingsControl supportedRecordingConfiguration]
  -[HMDCameraRecordingSettingsControl setSupportedRecordingConfiguration:]
  -[HMDCameraRecordingSettingsControl supportedVideoConfiguration]
  -[HMDCameraRecordingSettingsControl setSupportedVideoConfiguration:]
  -[HMDCameraRecordingSettingsControl supportedAudioConfiguration]
  -[HMDCameraRecordingSettingsControl setSupportedAudioConfiguration:]
  -[HMDCameraRecordingSettingsControl currentSelectedConfiguration]
  -[HMDCameraRecordingSettingsControl setCurrentSelectedConfiguration:]
  -[HMDCameraRecordingSettingsControl recordingConfigurationOverrides]
  -[HMDCameraRecordingSettingsControl setRecordingConfigurationOverrides:]


HMDRemoteEventRouterProtoFetchEventsMessage : PBCodable <NSCopying>
 @property  NSMutableArray *topics

  // class methods
  +[HMDRemoteEventRouterProtoFetchEventsMessage topicsType]

  // instance methods
  -[HMDRemoteEventRouterProtoFetchEventsMessage setTopics:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage copyTo:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage topics]
  -[HMDRemoteEventRouterProtoFetchEventsMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoFetchEventsMessage clearTopics]
  -[HMDRemoteEventRouterProtoFetchEventsMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoFetchEventsMessage addTopics:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage readFrom:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage topicsAtIndex:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage writeTo:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage isEqual:]
  -[HMDRemoteEventRouterProtoFetchEventsMessage topicsCount]


HMDMPCSessionData : HMFObject
 @property  NSSet *mediaProfiles
 @property  NSNumber *playbackStateNumber
 @property  NSNumber *playbackVolumeNumber
 @property  MPPlaybackArchive *playbackArchive
 @property  NSNumber *source
 @property  NSString *clientName

  // instance methods
  -[HMDMPCSessionData source]
  -[HMDMPCSessionData .cxx_destruct]
  -[HMDMPCSessionData clientName]
  -[HMDMPCSessionData playbackArchive]
  -[HMDMPCSessionData mediaProfiles]
  -[HMDMPCSessionData playbackStateNumber]
  -[HMDMPCSessionData initWithMediaProfiles:playbackState:playbackVolume:playbackArchive:source:clientName:]
  -[HMDMPCSessionData initWithDictionaryRepresentation:profileSource:]
  -[HMDMPCSessionData initWithMediaAction:source:clientName:]
  -[HMDMPCSessionData dictionaryRepresentation:]
  -[HMDMPCSessionData playbackVolumeNumber]


HMDLaunchHandler : HMFObject <HMFLogging>
 @property  NSURL *relaunchPlistFileURL
 @property  <HMDFileManager> *fileManager
 @property  @? jetsamPriorityHandler
 @property  NSObject<OS_dispatch_queue> *handlerQueue
 @property  NSMutableSet *registeredRelaunchClients
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLaunchHandler logCategory]
  +[HMDLaunchHandler sharedHandler]

  // instance methods
  -[HMDLaunchHandler .cxx_destruct]
  -[HMDLaunchHandler handlerQueue]
  -[HMDLaunchHandler fileManager]
  -[HMDLaunchHandler init]
  -[HMDLaunchHandler initWithRelaunchPlistFileURL:fileManager:jetsamPriorityHandler:]
  -[HMDLaunchHandler removePersistentRelaunchRegistrationsIfNecessary]
  -[HMDLaunchHandler registerRelaunchClientWithUUID:]
  -[HMDLaunchHandler deregisterRelaunchClientWithUUID:]
  -[HMDLaunchHandler _updateOrRemoveRelaunchPlist]
  -[HMDLaunchHandler _setJetsamPriorityElevated:]
  -[HMDLaunchHandler relaunchPlistFileURL]
  -[HMDLaunchHandler jetsamPriorityHandler]
  -[HMDLaunchHandler registeredRelaunchClients]


HMDCameraRecordingReachabilityEventManager : HMFObject <HMBLocalZoneModelObserver, HMFTimerDelegate, HMFMessageReceiver, HMFLogging, HMDCameraClipManagerDelegate, HMFNetMonitorDelegate>
 @property  HMDHAPAccessory *hapAccessory
 @property  NSUUID *uniqueIdentifier
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDBulletinBoard *bulletinBoard
 @property  HMDAppleAccountSettings *accountSettings
 @property  NSNotificationCenter *notificationCenter
 @property  double initialReachabilityTimeout
 @property  double reachabilityChangeReachableDebounceTimeout
 @property  double reachabilityChangeUnreachableDebounceTimeout
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSHashTable *clientConnections
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  BOOL lastKnownCameraReachability
 @property  BOOL currentCameraReachability
 @property  BOOL currentBridgedCameraReachability
 @property  BOOL currentDeviceConfirmedPrimaryResident
 @property  BOOL currentDeviceConnectedToNetwork
 @property  unsigned long reachabilityChangeDebounceCount
 @property  _HMCameraUserSettings *currentSettings
 @property  HMDCameraRecordingReachabilityEventModel *mostRecentReachabilityEventModel
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  HMFTimer *initialReachabilityTimer
 @property  HMFTimer *reachabilityChangeDebounceTimer
 @property  NSDate *reachabilityChangeDebounceStartDate
 @property  NSDate *suppressNotificationsBeforeDate
 @property  @? initialReachabilityTimerFactory
 @property  @? reachabilityChangeDebounceTimerFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraRecordingReachabilityEventManager logCategory]

  // instance methods
  -[HMDCameraRecordingReachabilityEventManager notificationCenter]
  -[HMDCameraRecordingReachabilityEventManager clientConnections]
  -[HMDCameraRecordingReachabilityEventManager timerDidFire:]
  -[HMDCameraRecordingReachabilityEventManager logIdentifier]
  -[HMDCameraRecordingReachabilityEventManager setCurrentSettings:]
  -[HMDCameraRecordingReachabilityEventManager workQueue]
  -[HMDCameraRecordingReachabilityEventManager .cxx_destruct]
  -[HMDCameraRecordingReachabilityEventManager cloudZone]
  -[HMDCameraRecordingReachabilityEventManager messageTargetUUID]
  -[HMDCameraRecordingReachabilityEventManager setClientConnections:]
  -[HMDCameraRecordingReachabilityEventManager localZone:didProcessModelDeletion:]
  -[HMDCameraRecordingReachabilityEventManager localZone:didProcessModelUpdate:]
  -[HMDCameraRecordingReachabilityEventManager localZone:didProcessModelCreation:]
  -[HMDCameraRecordingReachabilityEventManager currentSettings]
  -[HMDCameraRecordingReachabilityEventManager localZone]
  -[HMDCameraRecordingReachabilityEventManager uniqueIdentifier]
  -[HMDCameraRecordingReachabilityEventManager messageReceiveQueue]
  -[HMDCameraRecordingReachabilityEventManager messageDispatcher]
  -[HMDCameraRecordingReachabilityEventManager accountSettings]
  -[HMDCameraRecordingReachabilityEventManager networkMonitorIsReachable:]
  -[HMDCameraRecordingReachabilityEventManager networkMonitorIsUnreachable:]
  -[HMDCameraRecordingReachabilityEventManager setCloudZone:]
  -[HMDCameraRecordingReachabilityEventManager setLocalZone:]
  -[HMDCameraRecordingReachabilityEventManager clipManagerDidStart:]
  -[HMDCameraRecordingReachabilityEventManager clipManagerDidStop:]
  -[HMDCameraRecordingReachabilityEventManager logEventSubmitter]
  -[HMDCameraRecordingReachabilityEventManager setMessageDispatcher:]
  -[HMDCameraRecordingReachabilityEventManager bulletinBoard]
  -[HMDCameraRecordingReachabilityEventManager handleSubscribeMessage:]
  -[HMDCameraRecordingReachabilityEventManager handleUnsubscribeMessage:]
  -[HMDCameraRecordingReachabilityEventManager isCurrentDeviceConfirmedPrimaryResident]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeDebounceCount]
  -[HMDCameraRecordingReachabilityEventManager setLogEventSubmitter:]
  -[HMDCameraRecordingReachabilityEventManager handleAccessoryConnected:]
  -[HMDCameraRecordingReachabilityEventManager handleAccessoryDisconnected:]
  -[HMDCameraRecordingReachabilityEventManager handleResidentDeviceUpdated:]
  -[HMDCameraRecordingReachabilityEventManager hapAccessory]
  -[HMDCameraRecordingReachabilityEventManager handleRemoteCameraReachabilityChange:]
  -[HMDCameraRecordingReachabilityEventManager handleFetchEventsMessage:]
  -[HMDCameraRecordingReachabilityEventManager handleFetchCountOfEventsMessage:]
  -[HMDCameraRecordingReachabilityEventManager handlePerformCloudPullMessage:]
  -[HMDCameraRecordingReachabilityEventManager handleDeleteAllEventsMessage:]
  -[HMDCameraRecordingReachabilityEventManager handleCameraProfileSettingsDidChange:]
  -[HMDCameraRecordingReachabilityEventManager handleAppleAccountSettingsHomeStateUpdated:]
  -[HMDCameraRecordingReachabilityEventManager handleHMDBridgedAccessoryReachableNotification:]
  -[HMDCameraRecordingReachabilityEventManager handleHMDBridgedAccessoryUnreachableNotification:]
  -[HMDCameraRecordingReachabilityEventManager initWithAccessory:workQueue:identifier:bulletinBoard:logEventSubmitter:accountSettings:notificationCenter:]
  -[HMDCameraRecordingReachabilityEventManager initWithHAPAccessory:workQueue:]
  -[HMDCameraRecordingReachabilityEventManager configureWithMessageDispatcher:isCurrentDeviceConfirmedPrimaryResident:isCurrentDeviceConnectedToNetwork:]
  -[HMDCameraRecordingReachabilityEventManager cleanUpEvents]
  -[HMDCameraRecordingReachabilityEventManager isAccessoryReachable]
  -[HMDCameraRecordingReachabilityEventManager setCurrentDeviceConfirmedPrimaryResident:]
  -[HMDCameraRecordingReachabilityEventManager isCurrentDeviceConnectedToNetwork]
  -[HMDCameraRecordingReachabilityEventManager setCurrentDeviceConnectedToNetwork:]
  -[HMDCameraRecordingReachabilityEventManager handleUpdatedCameraReachability:]
  -[HMDCameraRecordingReachabilityEventManager handleInitialCameraReachability]
  -[HMDCameraRecordingReachabilityEventManager shouldAddInitialReachabilityEventForCurrentCameraReachability:]
  -[HMDCameraRecordingReachabilityEventManager fetchReachabilityEventsWithDateInterval:]
  -[HMDCameraRecordingReachabilityEventManager addCameraReachabilityEventForCurrentCameraReachability:dateOfOccurrence:]
  -[HMDCameraRecordingReachabilityEventManager notifySubscribersOfRemoteCameraReachabilityEvent]
  -[HMDCameraRecordingReachabilityEventManager notifyTransportOfUpdatedEvents:removedEventUUIDs:]
  -[HMDCameraRecordingReachabilityEventManager reachabilityEventModelForCurrentCameraReachability:dateOfOccurrence:]
  -[HMDCameraRecordingReachabilityEventManager submitLogEventWithCurrentModel:]
  -[HMDCameraRecordingReachabilityEventManager performCloudPullWithLabel:]
  -[HMDCameraRecordingReachabilityEventManager initialReachabilityTimeout]
  -[HMDCameraRecordingReachabilityEventManager startInitialReachabilityTimer]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeReachableDebounceTimeout]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeUnreachableDebounceTimeout]
  -[HMDCameraRecordingReachabilityEventManager startReachabilityChangeDebounceTimerWithReachability:]
  -[HMDCameraRecordingReachabilityEventManager mostRecentReachabilityEventModelInModels:]
  -[HMDCameraRecordingReachabilityEventManager lastKnownCameraReachability]
  -[HMDCameraRecordingReachabilityEventManager setLastKnownCameraReachability:]
  -[HMDCameraRecordingReachabilityEventManager currentCameraReachability]
  -[HMDCameraRecordingReachabilityEventManager setCurrentCameraReachability:]
  -[HMDCameraRecordingReachabilityEventManager currentBridgedCameraReachability]
  -[HMDCameraRecordingReachabilityEventManager setCurrentBridgedCameraReachability:]
  -[HMDCameraRecordingReachabilityEventManager setReachabilityChangeDebounceCount:]
  -[HMDCameraRecordingReachabilityEventManager mostRecentReachabilityEventModel]
  -[HMDCameraRecordingReachabilityEventManager setMostRecentReachabilityEventModel:]
  -[HMDCameraRecordingReachabilityEventManager initialReachabilityTimer]
  -[HMDCameraRecordingReachabilityEventManager setInitialReachabilityTimer:]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeDebounceTimer]
  -[HMDCameraRecordingReachabilityEventManager setReachabilityChangeDebounceTimer:]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeDebounceStartDate]
  -[HMDCameraRecordingReachabilityEventManager setReachabilityChangeDebounceStartDate:]
  -[HMDCameraRecordingReachabilityEventManager suppressNotificationsBeforeDate]
  -[HMDCameraRecordingReachabilityEventManager setSuppressNotificationsBeforeDate:]
  -[HMDCameraRecordingReachabilityEventManager initialReachabilityTimerFactory]
  -[HMDCameraRecordingReachabilityEventManager setInitialReachabilityTimerFactory:]
  -[HMDCameraRecordingReachabilityEventManager reachabilityChangeDebounceTimerFactory]
  -[HMDCameraRecordingReachabilityEventManager setReachabilityChangeDebounceTimerFactory:]


HMDLogEventProcessLaunchAnalyzer : HMDLogEventAnalyzer <HMFTimerDelegate, HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMFTimer *submitProcessLaunchInfoTimer
 @property  double processRelaunchEventTimeIntervalThreshold
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLogEventProcessLaunchAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventProcessLaunchAnalyzer timerDidFire:]
  -[HMDLogEventProcessLaunchAnalyzer .cxx_destruct]
  -[HMDLogEventProcessLaunchAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventProcessLaunchAnalyzer logEventSubmitter]
  -[HMDLogEventProcessLaunchAnalyzer eventCountersManager]
  -[HMDLogEventProcessLaunchAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventProcessLaunchAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventProcessLaunchAnalyzer initWithProcessLaunchInfoTimer:eventCountersManager:logEventSubmitter:]
  -[HMDLogEventProcessLaunchAnalyzer handleProcessLaunchLogEvent:]
  -[HMDLogEventProcessLaunchAnalyzer submitMigrationLogEvent]
  -[HMDLogEventProcessLaunchAnalyzer handleDataSyncStateUpdateLogEvent:]
  -[HMDLogEventProcessLaunchAnalyzer submitProcessLaunchInfoEventPendingConfiguration]
  -[HMDLogEventProcessLaunchAnalyzer updateProcessLaunchInfoFromDisk]
  -[HMDLogEventProcessLaunchAnalyzer handleExitContextForHomed:]
  -[HMDLogEventProcessLaunchAnalyzer submitProcessLaunchEventWithCurrentAnalysis]
  -[HMDLogEventProcessLaunchAnalyzer submitProcessLaunchInfoTimer]
  -[HMDLogEventProcessLaunchAnalyzer processRelaunchEventTimeIntervalThreshold]


HMDAsset : HMFObject <NSSecureCoding>
 @property  NSString *identifier
 @property  NSDictionary *metadata
 @property  NSURL *resourceURL
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[HMDAsset supportsSecureCoding]

  // instance methods
  -[HMDAsset identifier]
  -[HMDAsset encodeWithCoder:]
  -[HMDAsset .cxx_destruct]
  -[HMDAsset dictionaryRepresentation]
  -[HMDAsset resourceURL]
  -[HMDAsset metadata]
  -[HMDAsset isEqual:]
  -[HMDAsset initWithCoder:]
  -[HMDAsset initWithIdentifier:metadata:resourceURL:]


HMDCapabilitiesController : NSObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCapabilitiesController logCategory]

  // instance methods
  -[HMDCapabilitiesController logIdentifier]
  -[HMDCapabilitiesController initWithQueue:dataSource:]
  -[HMDCapabilitiesController .cxx_destruct]
  -[HMDCapabilitiesController currentAccessoryCapabilities]
  -[HMDCapabilitiesController currentResidentCapabilities]
  -[HMDCapabilitiesController encodedCurrentAccessoryCapabilities]
  -[HMDCapabilitiesController encodedCurrentResidentCapabilities]
  -[HMDCapabilitiesController didFinishConfiguringHomes]
  -[HMDCapabilitiesController currentAccessoryDidBecomeAvailable]
  -[HMDCapabilitiesController areCurrentAccessoryCapabilitiesPresentAndDifferent:]
  -[HMDCapabilitiesController areCurrentResidentCapabilitiesPresentAndDifferent:]


HMDRapportMessageTransport : HMDRemoteMessageTransport <HMDRapportMessagingReachabilityDelegate>
 @property  HMDRapportMessaging *rapportMessaging
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDAppleAccountManager *appleAccountManager

  // class methods
  +[HMDRapportMessageTransport logCategory]
  +[HMDRapportMessageTransport restriction]

  // instance methods
  -[HMDRapportMessageTransport sendMessage:completionHandler:]
  -[HMDRapportMessageTransport .cxx_destruct]
  -[HMDRapportMessageTransport transportType]
  -[HMDRapportMessageTransport start]
  -[HMDRapportMessageTransport isSecure]
  -[HMDRapportMessageTransport canSendMessage:]
  -[HMDRapportMessageTransport logEventSubmitter]
  -[HMDRapportMessageTransport initWithAccountRegistry:]
  -[HMDRapportMessageTransport isValidMessage:]
  -[HMDRapportMessageTransport appleAccountManager]
  -[HMDRapportMessageTransport rapportMessaging:idsIdentifier:didAppearReachable:]
  -[HMDRapportMessageTransport initWithAccountRegistry:rapportMessaging:logEventSubmitter:appleAccountManager:]
  -[HMDRapportMessageTransport _configureRapport]
  -[HMDRapportMessageTransport _IDSIdentifierForDestination:]
  -[HMDRapportMessageTransport _deviceForIDSIdentifier:deviceIdentifier:]
  -[HMDRapportMessageTransport _setSharedUserIDSIdentifierForDevice:idsIdentifier:]
  -[HMDRapportMessageTransport _sendMessage:completionHandler:]
  -[HMDRapportMessageTransport _serializeRemoteMessage:withResponseErrorData:serializationError:]
  -[HMDRapportMessageTransport _addSourceDeviceIdentifierToPayload:withRemoteMessage:]
  -[HMDRapportMessageTransport _didReceiveRequest:options:responseHandler:]
  -[HMDRapportMessageTransport _rpOptions:stringForKey:]
  -[HMDRapportMessageTransport rapportMessaging]


HMDRemoteDestinationFormatter : NSFormatter
  // class methods
  +[HMDRemoteDestinationFormatter defaultFormatter]

  // instance methods
  -[HMDRemoteDestinationFormatter getObjectValue:forString:errorDescription:]
  -[HMDRemoteDestinationFormatter stringForObjectValue:]


HMDMultiuserSettingsMessenger : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDHome *home
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMultiuserSettingsMessenger logCategory]

  // instance methods
  -[HMDMultiuserSettingsMessenger home]
  -[HMDMultiuserSettingsMessenger logIdentifier]
  -[HMDMultiuserSettingsMessenger .cxx_destruct]
  -[HMDMultiuserSettingsMessenger messageTargetUUID]
  -[HMDMultiuserSettingsMessenger messageDispatcher]
  -[HMDMultiuserSettingsMessenger registerForMessages]
  -[HMDMultiuserSettingsMessenger handleFetchMultiuserSettingsRequest:]
  -[HMDMultiuserSettingsMessenger initWithHome:messageDispatcher:]


HMDLegacyPrimaryElectionConfirmationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  unsigned long availableResidentCount
 @property  unsigned long residentsRespondedCount
 @property  NSString *criteria
 @property  BOOL changedPrimary
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDLegacyPrimaryElectionConfirmationLogEvent setCriteria:]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent eventName]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent .cxx_destruct]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent criteria]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent init]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent serializedEvent]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent availableResidentCount]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent setAvailableResidentCount:]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent residentsRespondedCount]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent setResidentsRespondedCount:]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent changedPrimary]
  -[HMDLegacyPrimaryElectionConfirmationLogEvent setChangedPrimary:]


HMDAccessorySoftwareUpdateApplyEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  HMDAccessoryMetricVendorDetails *metricVendorDetails
 @property  HMFSoftwareVersion *stagedVersion
 @property  unsigned long advertisedDuration
 @property  unsigned long totalAllowedDuration
 @property  long long status
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDAccessorySoftwareUpdateApplyEvent eventWithMetricVendorDetails:stagedVersion:advertisedDuration:totalAllowedDuration:status:]

  // instance methods
  -[HMDAccessorySoftwareUpdateApplyEvent eventName]
  -[HMDAccessorySoftwareUpdateApplyEvent status]
  -[HMDAccessorySoftwareUpdateApplyEvent .cxx_destruct]
  -[HMDAccessorySoftwareUpdateApplyEvent serializedEvent]
  -[HMDAccessorySoftwareUpdateApplyEvent initWithDetails:stagedVersion:advertisedDuration:totalAllowedDuration:status:]
  -[HMDAccessorySoftwareUpdateApplyEvent metricVendorDetails]
  -[HMDAccessorySoftwareUpdateApplyEvent stagedVersion]
  -[HMDAccessorySoftwareUpdateApplyEvent advertisedDuration]
  -[HMDAccessorySoftwareUpdateApplyEvent totalAllowedDuration]


HMDHomePersonDataManager : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *homeUUID
 @property  HMDHome *home
 @property  HMDHomePersonManager *personManager
 @property  @? personManagerFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomePersonDataManager logCategory]

  // instance methods
  -[HMDHomePersonDataManager configure]
  -[HMDHomePersonDataManager home]
  -[HMDHomePersonDataManager logIdentifier]
  -[HMDHomePersonDataManager workQueue]
  -[HMDHomePersonDataManager .cxx_destruct]
  -[HMDHomePersonDataManager messageTargetUUID]
  -[HMDHomePersonDataManager homeUUID]
  -[HMDHomePersonDataManager messageReceiveQueue]
  -[HMDHomePersonDataManager setHome:]
  -[HMDHomePersonDataManager personManager]
  -[HMDHomePersonDataManager setPersonManager:]
  -[HMDHomePersonDataManager removeCloudData]
  -[HMDHomePersonDataManager updateSettingsModelWithSettings:]
  -[HMDHomePersonDataManager personManagerFactory]
  -[HMDHomePersonDataManager setPersonManagerFactory:]
  -[HMDHomePersonDataManager handleUpdateSettingsMessage:]
  -[HMDHomePersonDataManager initWithHome:workQueue:]
  -[HMDHomePersonDataManager handleUpdatedSettingsModel:previousSettingsModel:message:]
  -[HMDHomePersonDataManager configurePersonManager]


HMDCameraRecordingBulkSendListener : HMFObject <HMFLogging, HMDDataStreamBulkSendListener>
 @property  NSUUID *UUID
 @property  <HMDCameraRecordingBulkSendListenerDelegate> *delegate
 @property  BOOL sessionOpenInProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingBulkSendListener logCategory]

  // instance methods
  -[HMDCameraRecordingBulkSendListener logIdentifier]
  -[HMDCameraRecordingBulkSendListener setDelegate:]
  -[HMDCameraRecordingBulkSendListener delegate]
  -[HMDCameraRecordingBulkSendListener attributeDescriptions]
  -[HMDCameraRecordingBulkSendListener .cxx_destruct]
  -[HMDCameraRecordingBulkSendListener UUID]
  -[HMDCameraRecordingBulkSendListener initWithWorkQueue:]
  -[HMDCameraRecordingBulkSendListener accessory:didReceiveBulkSessionCandidate:]
  -[HMDCameraRecordingBulkSendListener accessoryDidStartListening:]
  -[HMDCameraRecordingBulkSendListener accessoryDidCloseDataStream:]
  -[HMDCameraRecordingBulkSendListener isSessionOpenInProgress]
  -[HMDCameraRecordingBulkSendListener addPendingBulkSendSessionOpenReason:pendingBulkSendSessionCallback:]
  -[HMDCameraRecordingBulkSendListener openBulkSendSessionWithAccessory:reason:callback:]


HMDEventTriggerUserConfirmationSession : HMDEventTriggerSession <HMFDumpState, HMFLogging, HMFTimerDelegate, HMDHomeMessageReceiver>
 @property  HMDEventTriggerExecutionSession *executionSession
 @property  HMDEventTriggerDevice *requestingDevice
 @property  HMDTriggerConfirmationTimer *userResponseTimer
 @property  HomeKitEventTriggerUserConfirmationReceiverSessionLogEvent *analyticsEvent
 @property  NSMutableArray *analyticsSendEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDEventTriggerUserConfirmationSession logCategory]

  // instance methods
  -[HMDEventTriggerUserConfirmationSession timerDidFire:]
  -[HMDEventTriggerUserConfirmationSession setAnalyticsEvent:]
  -[HMDEventTriggerUserConfirmationSession dealloc]
  -[HMDEventTriggerUserConfirmationSession .cxx_destruct]
  -[HMDEventTriggerUserConfirmationSession analyticsEvent]
  -[HMDEventTriggerUserConfirmationSession _registerForMessages]
  -[HMDEventTriggerUserConfirmationSession userDidConfirmExecute:completionHandler:]
  -[HMDEventTriggerUserConfirmationSession executionSession]
  -[HMDEventTriggerUserConfirmationSession setExecutionSession:]
  -[HMDEventTriggerUserConfirmationSession _handleUserPermissionRemoveDialogRequest:]
  -[HMDEventTriggerUserConfirmationSession _handleUserPermissionRemoteResponse:]
  -[HMDEventTriggerUserConfirmationSession initWithSessionID:eventTrigger:workQueue:msgDispatcher:requestingDevice:]
  -[HMDEventTriggerUserConfirmationSession askForUserPermission:]
  -[HMDEventTriggerUserConfirmationSession _askForUserPermissionFromDevice:executionSessionID:]
  -[HMDEventTriggerUserConfirmationSession createBulletinNotification]
  -[HMDEventTriggerUserConfirmationSession _createBulletinNotification]
  -[HMDEventTriggerUserConfirmationSession _userResponse:completionHandler:]
  -[HMDEventTriggerUserConfirmationSession _removeUserDialog:]
  -[HMDEventTriggerUserConfirmationSession _sessionComplete]
  -[HMDEventTriggerUserConfirmationSession requestingDevice]
  -[HMDEventTriggerUserConfirmationSession userResponseTimer]
  -[HMDEventTriggerUserConfirmationSession setUserResponseTimer:]
  -[HMDEventTriggerUserConfirmationSession analyticsSendEvents]
  -[HMDEventTriggerUserConfirmationSession setAnalyticsSendEvents:]


HMDMediaGroupsController : HMFObject <HMFLogging, HMDMediaGroupsMessageHandlerDelegate>
 @property  NSUUID *parentIdentifier
 @property  HMDMediaGroupsAggregator *aggregator
 @property  <HMDMediaGroupsControllerDataSource> *dataSource
 @property  NSUUID *identifier
 @property  HMDMediaGroupsMessageHandler *messageHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsController logCategory]

  // instance methods
  -[HMDMediaGroupsController parentIdentifier]
  -[HMDMediaGroupsController identifier]
  -[HMDMediaGroupsController logIdentifier]
  -[HMDMediaGroupsController dataSource]
  -[HMDMediaGroupsController messageHandler]
  -[HMDMediaGroupsController attributeDescriptions]
  -[HMDMediaGroupsController aggregator]
  -[HMDMediaGroupsController privateDescription]
  -[HMDMediaGroupsController .cxx_destruct]
  -[HMDMediaGroupsController setDataSource:]
  -[HMDMediaGroupsController removeGroup:]
  -[HMDMediaGroupsController configureWithHome:messageDispatcher:]
  -[HMDMediaGroupsController removeGroupWithIdentifier:]
  -[HMDMediaGroupsController localGroupWithIdentifier:]
  -[HMDMediaGroupsController mediaGroupsMessageHandler:didReceiveCreateGroupRequestMessage:payload:]
  -[HMDMediaGroupsController mediaGroupsMessageHandler:didReceiveUpdateGroupRequestMessage:payload:]
  -[HMDMediaGroupsController mediaGroupsMessageHandler:didReceiveRemoveGroupRequestMessage:identifier:]
  -[HMDMediaGroupsController initWithIdentifier:parentIdentifier:aggregator:messageHandler:]
  -[HMDMediaGroupsController destinationManagersWithGroupableDestinations]
  -[HMDMediaGroupsController groupableDestinations]
  -[HMDMediaGroupsController createGroupWithIdentifier:name:destinationIdentifiers:destinationParentIdentifiers:]
  -[HMDMediaGroupsController locallyCreateGroupWithIdentifer:name:destinationIdentifiers:destinationParentIdentifiers:]
  -[HMDMediaGroupsController updateGroupWithIdentifier:name:destinationIdentifiers:destinationParentIdentifiers:]
  -[HMDMediaGroupsController locallyUpdateGroup:name:destinationIdentifiers:destinationParentIdentifiers:]
  -[HMDMediaGroupsController removedDestinationIdentifiersForGroup:destinationIdentifiers:]
  -[HMDMediaGroupsController addedDestinationIdentifiersForGroup:destinationIdentifiers:]
  -[HMDMediaGroupsController sendRequestsToUpdateAudioGroupIdentifier:destinationIdentifiers:]
  -[HMDMediaGroupsController sendRequestsToUpdateAudioGroupIdentifier:destinationManager:]
  -[HMDMediaGroupsController associatedAccessoriesWithDestinationIdentifiers:]


HMDAccessoryFirmwareUpdateTimedAutomationPolicy : HMDAccessoryFirmwareUpdatePolicy <HMFTimerDelegate>
 @property  HMFTimer *reevaluateTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateTimedAutomationPolicy logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy configure]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy timerDidFire:]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy evaluate]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy status]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy isEqual:]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy _startReevaluateTimer:]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy _stopReevaluateTimer]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy reevaluateTimer]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy setReevaluateTimer:]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy _getMaxUpdateApplyEndTime]
  -[HMDAccessoryFirmwareUpdateTimedAutomationPolicy _getTriggerFireDateBeforeEndTime:]


HMDNetworkRouterFirewallRuleICMPType : NSObject
 @property  unsigned char protocol
 @property  NSNumber *typeValue
 @property  NSDictionary *prettyJSONDictionary
 @property  NSDictionary *jsonDictionary

  // class methods
  +[HMDNetworkRouterFirewallRuleICMPType createWithJSONDictionary:]
  +[HMDNetworkRouterFirewallRuleICMPType createListWithJSONDictionary:key:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleICMPType jsonDictionary]
  -[HMDNetworkRouterFirewallRuleICMPType .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleICMPType protocol]
  -[HMDNetworkRouterFirewallRuleICMPType isEqual:]
  -[HMDNetworkRouterFirewallRuleICMPType typeValue]
  -[HMDNetworkRouterFirewallRuleICMPType prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleICMPType initWithJSONDictionary:protocol:typeValue:]


HMDHomeRemoteEventAccessController : NSObject <HMDRemoteEventAccessControlProvider>
 @property  <HMDHomeRemoteEventAccessControllerDataSource> *dataSource
 @property  HMDAccessorySettingsEventHelper *settingsHelper

  // instance methods
  -[HMDHomeRemoteEventAccessController initWithDataSource:]
  -[HMDHomeRemoteEventAccessController dataSource]
  -[HMDHomeRemoteEventAccessController .cxx_destruct]
  -[HMDHomeRemoteEventAccessController remoteEventAllowedForTopic:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController remoteEventAllowForMediaSystemSettingEventTopic:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController remoteEventAllowForMediaGroupSettingEventTopic:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController remoteEventAllowedForAccessoryEventTopic:parsedEventTopic:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController remoteEventAllowedForHomeEventTopic:parsedEventTopic:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController remoteEventAllowedForAccessoryInfoWithTopicSuffix:deviceType:userType:]
  -[HMDHomeRemoteEventAccessController isAppleMediaAccessoryUUID:error:]
  -[HMDHomeRemoteEventAccessController isSiriEndpointAccessoryUUID:error:]
  -[HMDHomeRemoteEventAccessController isMediaSystemUUID:error:]
  -[HMDHomeRemoteEventAccessController isMediaGroupUUID:error:]
  -[HMDHomeRemoteEventAccessController settingsHelper]


HMDBackingStoreOperation : NSOperation <HMFLogging>
 @property  HMDBackingStore *store
 @property  @? resultBlock
 @property  NSUUID *operationUUID
 @property  @? operationFinishBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreOperation logCategory]

  // instance methods
  -[HMDBackingStoreOperation logIdentifier]
  -[HMDBackingStoreOperation store]
  -[HMDBackingStoreOperation operationUUID]
  -[HMDBackingStoreOperation setStore:]
  -[HMDBackingStoreOperation resultBlock]
  -[HMDBackingStoreOperation .cxx_destruct]
  -[HMDBackingStoreOperation initWithResultBlock:]
  -[HMDBackingStoreOperation main]
  -[HMDBackingStoreOperation init]
  -[HMDBackingStoreOperation setResultBlock:]
  -[HMDBackingStoreOperation mainReturningError]
  -[HMDBackingStoreOperation operationFinishBlock]
  -[HMDBackingStoreOperation setOperationFinishBlock:]


HMDBackingStoreLogAddTransactionOperation : HMDBackingStoreOperation
 @property  HMDBackingStoreTransactionBlock *transaction
 @property  long long pushFlags
 @property  BOOL isAtomicSaveEnabled

  // instance methods
  -[HMDBackingStoreLogAddTransactionOperation setPushFlags:]
  -[HMDBackingStoreLogAddTransactionOperation pushFlags]
  -[HMDBackingStoreLogAddTransactionOperation transaction]
  -[HMDBackingStoreLogAddTransactionOperation .cxx_destruct]
  -[HMDBackingStoreLogAddTransactionOperation setTransaction:]
  -[HMDBackingStoreLogAddTransactionOperation initWithTransaction:]
  -[HMDBackingStoreLogAddTransactionOperation mainReturningError]
  -[HMDBackingStoreLogAddTransactionOperation initWithAtomicSaveEnabled:transaction:]
  -[HMDBackingStoreLogAddTransactionOperation isAtomicSaveEnabled]


HMDBackingStoreLogFetchOperation : HMDBackingStoreOperation
 @property  @? fetchBlock
 @property  id sentinal
 @property  long long maskValue
 @property  long long compareValue

  // instance methods
  -[HMDBackingStoreLogFetchOperation fetchBlock]
  -[HMDBackingStoreLogFetchOperation .cxx_destruct]
  -[HMDBackingStoreLogFetchOperation setFetchBlock:]
  -[HMDBackingStoreLogFetchOperation mainReturningError]
  -[HMDBackingStoreLogFetchOperation initWithSentinal:mask:compare:fetchResult:]
  -[HMDBackingStoreLogFetchOperation initWithNeedsPushTo:result:]
  -[HMDBackingStoreLogFetchOperation initWithSentinal:needsPushTo:fetchResult:]
  -[HMDBackingStoreLogFetchOperation initWithAlreadyPushedTo:result:]
  -[HMDBackingStoreLogFetchOperation initWithSentinal:alreadyPushedTo:fetchResult:]
  -[HMDBackingStoreLogFetchOperation sentinal]
  -[HMDBackingStoreLogFetchOperation setSentinal:]
  -[HMDBackingStoreLogFetchOperation maskValue]
  -[HMDBackingStoreLogFetchOperation setMaskValue:]
  -[HMDBackingStoreLogFetchOperation compareValue]
  -[HMDBackingStoreLogFetchOperation setCompareValue:]


HMDBackingStoreLogChangesExistFetchOperation : HMDBackingStoreOperation
 @property  @? fetchBlock
 @property  long long maskValue
 @property  long long compareValue

  // instance methods
  -[HMDBackingStoreLogChangesExistFetchOperation fetchBlock]
  -[HMDBackingStoreLogChangesExistFetchOperation .cxx_destruct]
  -[HMDBackingStoreLogChangesExistFetchOperation setFetchBlock:]
  -[HMDBackingStoreLogChangesExistFetchOperation mainReturningError]
  -[HMDBackingStoreLogChangesExistFetchOperation initWithNeedsPushTo:result:]
  -[HMDBackingStoreLogChangesExistFetchOperation maskValue]
  -[HMDBackingStoreLogChangesExistFetchOperation setMaskValue:]
  -[HMDBackingStoreLogChangesExistFetchOperation compareValue]
  -[HMDBackingStoreLogChangesExistFetchOperation setCompareValue:]


HMDBackingStoreLogUpdateOperation : HMDBackingStoreOperation
 @property  NSArray *values
 @property  long long maskValue
 @property  long long setValue

  // instance methods
  -[HMDBackingStoreLogUpdateOperation values]
  -[HMDBackingStoreLogUpdateOperation setValues:]
  -[HMDBackingStoreLogUpdateOperation .cxx_destruct]
  -[HMDBackingStoreLogUpdateOperation setValue]
  -[HMDBackingStoreLogUpdateOperation setSetValue:]
  -[HMDBackingStoreLogUpdateOperation mainReturningError]
  -[HMDBackingStoreLogUpdateOperation maskValue]
  -[HMDBackingStoreLogUpdateOperation setMaskValue:]
  -[HMDBackingStoreLogUpdateOperation initWithRowIDs:mask:set:]
  -[HMDBackingStoreLogUpdateOperation initWithRowIDs:successfullyPushedTo:]
  -[HMDBackingStoreLogUpdateOperation initWithRowIDs:failedPushedTo:]


HMDBackingStoreLogPrunePushedOperation : HMDBackingStoreOperation
  // instance methods
  -[HMDBackingStoreLogPrunePushedOperation main]
  -[HMDBackingStoreLogPrunePushedOperation init]


HMDBackingStoreLogDropOperationsWithUUID : HMDBackingStoreOperation
 @property  NSUUID *uuid
 @property  long long maskValue
 @property  long long compareValue

  // instance methods
  -[HMDBackingStoreLogDropOperationsWithUUID uuid]
  -[HMDBackingStoreLogDropOperationsWithUUID .cxx_destruct]
  -[HMDBackingStoreLogDropOperationsWithUUID setUuid:]
  -[HMDBackingStoreLogDropOperationsWithUUID mainReturningError]
  -[HMDBackingStoreLogDropOperationsWithUUID maskValue]
  -[HMDBackingStoreLogDropOperationsWithUUID setMaskValue:]
  -[HMDBackingStoreLogDropOperationsWithUUID compareValue]
  -[HMDBackingStoreLogDropOperationsWithUUID setCompareValue:]
  -[HMDBackingStoreLogDropOperationsWithUUID initWithUUID:pushingTo:resultBlock:]


HMDSoftwareUpdateDocumentationManager : HMFObject <HMFLogging, HMFNetMonitorDelegate>
 @property  NSMutableSet *registeredMetadata
 @property  NSArray *assets
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSoftwareUpdateDocumentationManager sharedManager]
  +[HMDSoftwareUpdateDocumentationManager logCategory]

  // instance methods
  -[HMDSoftwareUpdateDocumentationManager assets]
  -[HMDSoftwareUpdateDocumentationManager assetForDocumentationMetadata:]
  -[HMDSoftwareUpdateDocumentationManager workQueue]
  -[HMDSoftwareUpdateDocumentationManager .cxx_destruct]
  -[HMDSoftwareUpdateDocumentationManager init]
  -[HMDSoftwareUpdateDocumentationManager addAsset:]
  -[HMDSoftwareUpdateDocumentationManager removeAsset:]
  -[HMDSoftwareUpdateDocumentationManager networkMonitorIsReachable:]
  -[HMDSoftwareUpdateDocumentationManager parseCachedAssets]
  -[HMDSoftwareUpdateDocumentationManager registerDocumentationMetadata:]
  -[HMDSoftwareUpdateDocumentationManager unregisterDocumentationMetadata:]
  -[HMDSoftwareUpdateDocumentationManager auditAsset:]
  -[HMDSoftwareUpdateDocumentationManager registeredMetadata]


HMDUserAccessCodeModel : HMDBackingStoreModelObject
 @property  NSString *value
 @property  NSUUID *changedByUserUUID

  // class methods
  +[HMDUserAccessCodeModel properties]
  +[HMDUserAccessCodeModel modelUUIDWithUUID:]

  // instance methods
  -[HMDUserAccessCodeModel initWithUserUUID:]


HMDAssistantGather : HMFObject <HMFLogging>
 @property  HMDHomeManager *manager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSArray *currentHomekitObjects
 @property  NSArray *homeKitObjects
 @property  long long homeCount
 @property  NSString *primaryHomeName
 @property  NSString *primaryHomeAssistantIdentifier
 @property  NSString *currentHomeName
 @property  NSString *currentHomeAssistantIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAssistantGather logCategory]

  // instance methods
  -[HMDAssistantGather setManager:]
  -[HMDAssistantGather workQueue]
  -[HMDAssistantGather setWorkQueue:]
  -[HMDAssistantGather initWithHomeManager:queue:]
  -[HMDAssistantGather .cxx_destruct]
  -[HMDAssistantGather currentHomeName]
  -[HMDAssistantGather manager]
  -[HMDAssistantGather homeCount]
  -[HMDAssistantGather homeKitObjects]
  -[HMDAssistantGather primaryHomeName]
  -[HMDAssistantGather primaryHomeAssistantIdentifier]
  -[HMDAssistantGather currentHomeAssistantIdentifier]
  -[HMDAssistantGather _getPrimaryHome]
  -[HMDAssistantGather _getCurrentHome]
  -[HMDAssistantGather _gatherHomeKitObjects]
  -[HMDAssistantGather gatherHomeKitObjectsWithCompletion:]
  -[HMDAssistantGather getSyncEntityObjectsWithCompletionHandler:]
  -[HMDAssistantGather currentHomekitObjects]
  -[HMDAssistantGather setCurrentHomekitObjects:]


HMDFairPlaySAPSession : HMFObject
 @property  ^{FPSAPContextOpaque_=} session
 @property  {FairPlayHWInfo_=I[20C]} hardwareInfo
 @property  unsigned long state
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  <HMDFairPlaySAPSessionDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSUUID *sessionIdentifier

  // instance methods
  -[HMDFairPlaySAPSession initWithDelegate:delegateQueue:]
  -[HMDFairPlaySAPSession sessionIdentifier]
  -[HMDFairPlaySAPSession session]
  -[HMDFairPlaySAPSession _closeWithError:]
  -[HMDFairPlaySAPSession clientQueue]
  -[HMDFairPlaySAPSession delegate]
  -[HMDFairPlaySAPSession state]
  -[HMDFairPlaySAPSession dealloc]
  -[HMDFairPlaySAPSession close]
  -[HMDFairPlaySAPSession .cxx_destruct]
  -[HMDFairPlaySAPSession delegateQueue]
  -[HMDFairPlaySAPSession _teardown]
  -[HMDFairPlaySAPSession setState:]
  -[HMDFairPlaySAPSession hardwareInfo]
  -[HMDFairPlaySAPSession openWithCompletionQueue:completionHandler:]
  -[HMDFairPlaySAPSession _setupSAPSessionWithCompletionQueue:completionHandler:]
  -[HMDFairPlaySAPSession _handleServerCertificate:error:completionQueue:completionHandler:]
  -[HMDFairPlaySAPSession _handleServerSAPExchangeData:error:completionQueue:completionHandler:]
  -[HMDFairPlaySAPSession signatureForData:completionQueue:completionHandler:]
  -[HMDFairPlaySAPSession verifySignedData:signature:completionQueue:completionHandler:]


HMDUserSettingsPerHomeLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  BOOL isOwner
 @property  BOOL isAdmin
 @property  BOOL isRemoteAccessAllowed
 @property  BOOL isRecognizeMyVoiceEnabled
 @property  BOOL isPersonalRequestsEnabled
 @property  BOOL isAnnounceAccessAllowed
 @property  unsigned long camerasAccessLevel
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDUserSettingsPerHomeLogEvent eventName]
  -[HMDUserSettingsPerHomeLogEvent initWithUser:]
  -[HMDUserSettingsPerHomeLogEvent isOwner]
  -[HMDUserSettingsPerHomeLogEvent isAdmin]
  -[HMDUserSettingsPerHomeLogEvent isRemoteAccessAllowed]
  -[HMDUserSettingsPerHomeLogEvent camerasAccessLevel]
  -[HMDUserSettingsPerHomeLogEvent isAnnounceAccessAllowed]
  -[HMDUserSettingsPerHomeLogEvent serializedEvent]
  -[HMDUserSettingsPerHomeLogEvent submitEventWithHistogrammedHomeDataCommonDimensionsForSpecifiedHome]
  -[HMDUserSettingsPerHomeLogEvent initWithUser:userDataController:homeUUID:]
  -[HMDUserSettingsPerHomeLogEvent isRecognizeMyVoiceEnabled]
  -[HMDUserSettingsPerHomeLogEvent isPersonalRequestsEnabled]


HMDSoftwareUpdateFetchedEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL userInitiated
 @property  BOOL newUpdateFetched

  // class methods
  +[HMDSoftwareUpdateFetchedEvent eventWasUserInitiated:wasNewUpdateFetched:]

  // instance methods
  -[HMDSoftwareUpdateFetchedEvent setUserInitiated:]
  -[HMDSoftwareUpdateFetchedEvent wasUserInitiated]
  -[HMDSoftwareUpdateFetchedEvent wasNewUpdateFetched]
  -[HMDSoftwareUpdateFetchedEvent AWDMessageType]
  -[HMDSoftwareUpdateFetchedEvent metricForAWD]
  -[HMDSoftwareUpdateFetchedEvent setNewUpdateFetched:]


HMDAccessoryNetworkProtectionGroupModel : HMDBackingStoreModelObject
 @property  NSString *manufacturer
 @property  NSNumber *category
 @property  NSNumber *targetProtectionMode

  // class methods
  +[HMDAccessoryNetworkProtectionGroupModel properties]
  +[HMDAccessoryNetworkProtectionGroupModel modelNamespace]
  +[HMDAccessoryNetworkProtectionGroupModel modelIDForHome:manufacturer:category:]


AWDHomeKitCameraConfigurationData : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  NSMutableArray *homeConfigurations
 @property  BOOL hasIsDemoConfiguration
 @property  BOOL isDemoConfiguration

  // class methods
  +[AWDHomeKitCameraConfigurationData homeConfigurationsType]

  // instance methods
  -[AWDHomeKitCameraConfigurationData setTimestamp:]
  -[AWDHomeKitCameraConfigurationData copyTo:]
  -[AWDHomeKitCameraConfigurationData .cxx_destruct]
  -[AWDHomeKitCameraConfigurationData mergeFrom:]
  -[AWDHomeKitCameraConfigurationData setHasTimestamp:]
  -[AWDHomeKitCameraConfigurationData dictionaryRepresentation]
  -[AWDHomeKitCameraConfigurationData hasTimestamp]
  -[AWDHomeKitCameraConfigurationData copyWithZone:]
  -[AWDHomeKitCameraConfigurationData timestamp]
  -[AWDHomeKitCameraConfigurationData readFrom:]
  -[AWDHomeKitCameraConfigurationData writeTo:]
  -[AWDHomeKitCameraConfigurationData isEqual:]
  -[AWDHomeKitCameraConfigurationData homeConfigurations]
  -[AWDHomeKitCameraConfigurationData clearHomeConfigurations]
  -[AWDHomeKitCameraConfigurationData addHomeConfigurations:]
  -[AWDHomeKitCameraConfigurationData homeConfigurationsCount]
  -[AWDHomeKitCameraConfigurationData homeConfigurationsAtIndex:]
  -[AWDHomeKitCameraConfigurationData setIsDemoConfiguration:]
  -[AWDHomeKitCameraConfigurationData setHasIsDemoConfiguration:]
  -[AWDHomeKitCameraConfigurationData hasIsDemoConfiguration]
  -[AWDHomeKitCameraConfigurationData setHomeConfigurations:]
  -[AWDHomeKitCameraConfigurationData isDemoConfiguration]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo : HMFObject
 @property  CKRecordZoneID *zoneID
 @property  NSMutableSet *recordIDs
 @property  BOOL zoneHasChanged
 @property  BOOL zoneWasDeleted
 @property  BOOL ignoreChangeToken
 @property  HMDNetworkRouterFirewallRuleCloudZone *cloudZone
 @property  HMBLocalZone *mirroredLocalZone

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo initWithZoneID:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo recordIDs]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo zoneID]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo forceRefresh]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo cloudZone]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo setCloudZone:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo markChanged]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo mirroredLocalZone]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo setMirroredLocalZone:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo markDeleted]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo zoneHasChanged]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo zoneWasDeleted]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorZoneInfo ignoreChangeToken]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo : HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper
 @property  NSSet *requestedRecordIDs
 @property  NSDictionary *zoneInfoMap
 @property  CKServerChangeToken *databaseChangeToken
 @property  CKServerChangeToken *originalDatabaseChangeToken
 @property  NSMutableSet *modifiedRecordIDs
 @property  BOOL zonesHaveChanged
 @property  BOOL zonesWereDeleted
 @property  NSArray *signatureVerificationPublicKeys

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo finishWithResult:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo initWithActivity:options:databaseChangeToken:promise:xpcActivity:database:useAnonymousRequests:recordIDs:lastSynchronizedRecordIDs:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo markZonesChanged]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo markZonesDeleted]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo __cleanupMirroredZones:cloudZones:result:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo requestedRecordIDs]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo zoneInfoMap]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo databaseChangeToken]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo setDatabaseChangeToken:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo originalDatabaseChangeToken]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo setOriginalDatabaseChangeToken:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo modifiedRecordIDs]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo zonesHaveChanged]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo zonesWereDeleted]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo signatureVerificationPublicKeys]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchChangesInfo setSignatureVerificationPublicKeys:]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo : HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper
 @property  CKRecordZoneID *zoneID
 @property  CKRecordID *recordID
 @property  NSArray *desiredKeys
 @property  NSMutableSet *records

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo records]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo desiredKeys]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo recordID]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo zoneID]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorFetchRecordsInfo initWithActivity:options:promise:database:useAnonymousRequests:zoneID:recordID:desiredKeys:]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirror : HMFObject <HMFLogging, HMDNetworkRouterFirewallRuleManagerBackingStoreMirror, HMBMirrorProtocol>
 @property  HMBCloudDatabase *cloudDatabase
 @property  HMBLocalDatabase *localDatabase
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL useAnonymousRequests
 @property  NAPromise *startupPromise
 @property  NAPromise *shutdownPromise
 @property  <NAScheduler> *workQueueScheduler
 @property  BOOL running
 @property  BOOL shuttingDown
 @property  HMBLocalZone *localZone
 @property  NAFuture *lastAsyncFuture
 @property  HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel *internalState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NAFuture *startupFuture
 @property  NAFuture *shutdownFuture
 @property  <HMBLocalZoneID> *zoneID
 @property  NAFuture *startUp

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __maxSizeForCKRecordSignatureVerificationCertificateChain]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __createSignatureVerificationPolicy]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __certificatesRecordID]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __recordKeyCertificatePrefix:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __publicKeyFromCertificateRecord:dataKey:assetKey:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror publicKeysFromCertificateRecord:]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __overrideParentModelID]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __errorIsNotFound:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror setInternalState:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror internalState]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror desiredKeys]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror workQueue]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror zoneID]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror isRunning]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror startUp]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror isShuttingDown]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror localZone]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror shutdown]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror destroy]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror shutdownFuture]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror flush]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror localDatabase]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror startUpWithLocalZone:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror triggerOutputForOutputRow:options:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror cloudDatabase]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror setLocalZone:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __shouldFailCloudRecordFetchError:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchCloudRecordsWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchRecordByID:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchRecordsByQuery:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __startQueryOperation:operation:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __loadOrCreateInternalStateModelWithLocalZone:activity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __startupWithLocalZone:activity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __shutdownWithActivity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchVerificationCertificatesRecordWithOperationGroup:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchVerificationCertificatesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchVerificationCertificatesCompleted:record:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __canRecoverFromVerificationCertificatesError:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __retryFetchVerificationCertificatesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __createCloudZoneIDForZoneID:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __openLocalZoneForCloudZoneID:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __shutdownLocalZones:activity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __localZonesForRecordIDs:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchAllDataForRecordIDs:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchAllDataForZoneID:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchAllDataForZoneName:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeAllLocalRulesWithOptions:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchOverridesForRecordIDs:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchOverridesForZoneName:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __addOverrides:replace:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeAllOverridesWithOptions:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeOverridesForRecordIDs:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeOverridesForZoneName:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeOverridesForZoneName:recordName:options:activity:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __updateChangeTokenWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror cloudFetchNeededForRecordIDs:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchCloudChangesForRecordIDs:options:ignoreLastSynchronizedRecords:xpcActivity:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchCloudRecordIDsForZoneID:options:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchCloudRecordsForZoneID:recordID:options:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchAllDataForRecordIDs:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchAllDataWithOptions:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchAllDataForZoneName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror removeAllLocalRulesWithOptions:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchOverridesForRecordIDs:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchAllOverridesWithOptions:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror fetchOverridesForZoneName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror addOverrides:replace:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror removeOverridesForRecordIDs:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror removeAllOverridesWithOptions:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror removeOverridesForZoneName:recordName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror startupFuture]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __removeDeletedZonesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror initWithLocalDatabase:cloudDatabase:useAnonymousRequests:ownerQueue:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror lastAsyncFuture]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror setLastAsyncFuture:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __asyncFutureWithActivity:ignoreErrors:block:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror _fetchCloudRecordsForZoneID:recordID:options:desiredKeys:completion:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror _fetchAllDataForZoneName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror _fetchOverridesForZoneName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror _removeOverridesForZoneName:recordName:options:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __saveInternalStateWithActivity:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror setShuttingDown:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror useAnonymousRequests]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror startupPromise]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror shutdownPromise]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror workQueueScheduler]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchZoneChangesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchDatabaseChangesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __fetchDatabaseChangesCompleted:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __canRecoverFromFetchDatabaseChangesError:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __retryFetchDatabaseChangesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __createCloudZonesForFetchInfo:error:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __startUpCloudZonesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirror __performCloudZonePullsWithFetchInfo:]


HMDHomeKitPersonDataInterface : HMFObject <HMFLogging, HMFMessageReceiver, HMDActiveXPCClientConnectionsPeriodicTimerDelegate, HMDPersonDataInterface>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *UUID
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDActiveXPCClientConnectionsPeriodicTimer *clientConnectionsTimer
 @property  <HMDPersonDataSource> *dataSource
 @property  @? fetchServerFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  HMIHomePersonManager *homePersonManager
 @property  HMIExternalPersonManager *photosPersonManager

  // class methods
  +[HMDHomeKitPersonDataInterface logCategory]

  // instance methods
  -[HMDHomeKitPersonDataInterface logIdentifier]
  -[HMDHomeKitPersonDataInterface dataSource]
  -[HMDHomeKitPersonDataInterface workQueue]
  -[HMDHomeKitPersonDataInterface .cxx_destruct]
  -[HMDHomeKitPersonDataInterface messageTargetUUID]
  -[HMDHomeKitPersonDataInterface UUID]
  -[HMDHomeKitPersonDataInterface setDataSource:]
  -[HMDHomeKitPersonDataInterface messageReceiveQueue]
  -[HMDHomeKitPersonDataInterface messageDispatcher]
  -[HMDHomeKitPersonDataInterface handleSubscribeMessage:]
  -[HMDHomeKitPersonDataInterface handleUnsubscribeMessage:]
  -[HMDHomeKitPersonDataInterface _notifySubscribersOfMessageWithName:payload:]
  -[HMDHomeKitPersonDataInterface configureWithDataSource:home:]
  -[HMDHomeKitPersonDataInterface handleUpdatedPerson:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleUpdatedUnassociatedFaceCrop:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleUpdatedPersonFaceCrop:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleUpdatedFaceprint:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleRemovedPersonWithUUID:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleRemovedFaceCropWithUUID:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handleRemovedFaceprintWithUUID:mirrorOutputFuture:]
  -[HMDHomeKitPersonDataInterface handlePerformCloudPullMessage:]
  -[HMDHomeKitPersonDataInterface handleFetchPersonsMessage:]
  -[HMDHomeKitPersonDataInterface handleFetchFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleFetchPersonFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleFetchUnassociatedFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleFetchFaceprintsMessage:]
  -[HMDHomeKitPersonDataInterface handleAddOrUpdatePersonsMessage:]
  -[HMDHomeKitPersonDataInterface handleAddOrUpdateFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleAddOrUpdateFaceprintsMessage:]
  -[HMDHomeKitPersonDataInterface handleAssociateFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleDisassociateFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleRemovePersonsMessage:]
  -[HMDHomeKitPersonDataInterface handleRemoveFaceCropsMessage:]
  -[HMDHomeKitPersonDataInterface handleRemoveFaceprintsMessage:]
  -[HMDHomeKitPersonDataInterface clientConnectionsTimerDidFire:]
  -[HMDHomeKitPersonDataInterface initWithUUID:messageDispatcher:workQueue:]
  -[HMDHomeKitPersonDataInterface initWithUUID:messageDispatcher:workQueue:clientConnectionsTimer:]
  -[HMDHomeKitPersonDataInterface clientConnectionsTimer]
  -[HMDHomeKitPersonDataInterface fetchServerFactory]
  -[HMDHomeKitPersonDataInterface setFetchServerFactory:]


HMDCameraIDSSessionReceiver : HMDCameraIDSSessionHandler <IDSSessionDelegate, HMDCameraRemoteStreamReceiverDestinationProtocol>
 @property  HMDCameraIDSSessionInviterDeviceVerifier *sessionInviterDeviceVerifier
 @property  <HMDCameraIDSSessionReceiverDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *remoteDestination
 @property  IDSSession *session

  // class methods
  +[HMDCameraIDSSessionReceiver logCategory]

  // instance methods
  -[HMDCameraIDSSessionReceiver service:account:inviteReceivedForSession:fromID:withContext:]
  -[HMDCameraIDSSessionReceiver session]
  -[HMDCameraIDSSessionReceiver logIdentifier]
  -[HMDCameraIDSSessionReceiver setDelegate:]
  -[HMDCameraIDSSessionReceiver delegate]
  -[HMDCameraIDSSessionReceiver setDelegateQueue:]
  -[HMDCameraIDSSessionReceiver dealloc]
  -[HMDCameraIDSSessionReceiver .cxx_destruct]
  -[HMDCameraIDSSessionReceiver delegateQueue]
  -[HMDCameraIDSSessionReceiver sessionStarted:]
  -[HMDCameraIDSSessionReceiver sessionEnded:withReason:error:]
  -[HMDCameraIDSSessionReceiver setUpRemoteConnectionWithDevice:]
  -[HMDCameraIDSSessionReceiver remoteDestination]
  -[HMDCameraIDSSessionReceiver _callSessionEndedWithError:]
  -[HMDCameraIDSSessionReceiver initWithSessionID:workQueue:sessionInviterDeviceVerifier:delegate:delegateQueue:]
  -[HMDCameraIDSSessionReceiver _callSessionSetup:]
  -[HMDCameraIDSSessionReceiver _receivedIDSSession:]
  -[HMDCameraIDSSessionReceiver sessionInviterDeviceVerifier]


HMDAccessoryDiagnosticsManager : HMFObject <HMDNetworkRouterFirewallRuleManagerClient, HMFLogging, HMFMessageReceiver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMDHAPAccessory *accessory
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDService *diagnosticsService
 @property  HMDAccessoryDiagnosticsSettings *diagnosticsSettings
 @property  HMDAccessoryDiagnosticsSession *currentDiagnosticsSession
 @property  NSString *clientIdentifier
 @property  BOOL didShutDown
 @property  BOOL cloudFetchInProgress
 @property  BOOL cloudFetchCompleted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessoryDiagnosticsManager logCategory]

  // instance methods
  -[HMDAccessoryDiagnosticsManager shutDown]
  -[HMDAccessoryDiagnosticsManager accessory]
  -[HMDAccessoryDiagnosticsManager logIdentifier]
  -[HMDAccessoryDiagnosticsManager clientIdentifier]
  -[HMDAccessoryDiagnosticsManager workQueue]
  -[HMDAccessoryDiagnosticsManager attributeDescriptions]
  -[HMDAccessoryDiagnosticsManager dealloc]
  -[HMDAccessoryDiagnosticsManager _start]
  -[HMDAccessoryDiagnosticsManager .cxx_destruct]
  -[HMDAccessoryDiagnosticsManager messageTargetUUID]
  -[HMDAccessoryDiagnosticsManager start]
  -[HMDAccessoryDiagnosticsManager messageReceiveQueue]
  -[HMDAccessoryDiagnosticsManager msgDispatcher]
  -[HMDAccessoryDiagnosticsManager _shutDown]
  -[HMDAccessoryDiagnosticsManager didShutDown]
  -[HMDAccessoryDiagnosticsManager setDidShutDown:]
  -[HMDAccessoryDiagnosticsManager handleAccessoryConnectedNotification:]
  -[HMDAccessoryDiagnosticsManager watchedAccessoryIdentifiersForFirewallRuleManager:]
  -[HMDAccessoryDiagnosticsManager diagnosticsService]
  -[HMDAccessoryDiagnosticsManager _handleDiagnosticsTransferRequest:]
  -[HMDAccessoryDiagnosticsManager handleCharacteristicsUpdatedNotification:]
  -[HMDAccessoryDiagnosticsManager handleCharacteristicValueUpdatedNotification:]
  -[HMDAccessoryDiagnosticsManager initWithAccessory:service:msgDispatcher:workQueue:]
  -[HMDAccessoryDiagnosticsManager _registerForMessagesAndNotifications]
  -[HMDAccessoryDiagnosticsManager _updateDiagnosticSettings]
  -[HMDAccessoryDiagnosticsManager _notifyClientsOfDiagnosticsTransferSupportUpdated]
  -[HMDAccessoryDiagnosticsManager _isRequestSupported:]
  -[HMDAccessoryDiagnosticsManager _readRequiredDiagnosticCharacteristicsIfNeededWithCompletion:]
  -[HMDAccessoryDiagnosticsManager _handleDiagnosticsTransferRequestWithOptions:completion:]
  -[HMDAccessoryDiagnosticsManager _readDiagnosticsDataWithCloudKitMetadataRequirement:completion:]
  -[HMDAccessoryDiagnosticsManager _clearCurrentDiagnosticsSession:]
  -[HMDAccessoryDiagnosticsManager diagnosticsSettings]
  -[HMDAccessoryDiagnosticsManager setDiagnosticsSettings:]
  -[HMDAccessoryDiagnosticsManager currentDiagnosticsSession]
  -[HMDAccessoryDiagnosticsManager setCurrentDiagnosticsSession:]
  -[HMDAccessoryDiagnosticsManager cloudFetchInProgress]
  -[HMDAccessoryDiagnosticsManager setCloudFetchInProgress:]
  -[HMDAccessoryDiagnosticsManager cloudFetchCompleted]
  -[HMDAccessoryDiagnosticsManager setCloudFetchCompleted:]
  -[HMDAccessoryDiagnosticsManager _fetchCloudDiagnosticsMetadata]
  -[HMDAccessoryDiagnosticsManager __fetchCloudDiagnosticsMetadataForAccessory:completion:]
  -[HMDAccessoryDiagnosticsManager _fetchModelDiagnosticsMetadataForAccessory:withCompletion:]
  -[HMDAccessoryDiagnosticsManager _callCompletionHandler:diagnostics:error:]
  -[HMDAccessoryDiagnosticsManager _invalidateCloudDiagnosticsMetadata]


HMDThreadNetworkMetadataStore : HMFObject <HMFLogging, HMDThreadNetworkMetadataStore>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDThreadNetworkMetadataStore new]
  +[HMDThreadNetworkMetadataStore defaultStore]
  +[HMDThreadNetworkMetadataStore logCategory]

  // instance methods
  -[HMDThreadNetworkMetadataStore initInternal]
  -[HMDThreadNetworkMetadataStore workQueue]
  -[HMDThreadNetworkMetadataStore .cxx_destruct]
  -[HMDThreadNetworkMetadataStore init]
  -[HMDThreadNetworkMetadataStore retrieveMetadataWithCompletion:]
  -[HMDThreadNetworkMetadataStore removePreferredNetworkWithCompletion:]
  -[HMDThreadNetworkMetadataStore _retrieveMetadataWithCompletion:]
  -[HMDThreadNetworkMetadataStore _removePreferredNetworkWithCompletion:]


HMDPredicateUtilities : HMFObject <HMFLogging>
 @property  NSString *logIdentifier
 @property  unsigned long cameraSignificantEvent
 @property  unsigned long personFamiliarityOptions
 @property  HMDHome *home
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPredicateUtilities logCategory]

  // instance methods
  -[HMDPredicateUtilities home]
  -[HMDPredicateUtilities logIdentifier]
  -[HMDPredicateUtilities .cxx_destruct]
  -[HMDPredicateUtilities sunset]
  -[HMDPredicateUtilities sunrise]
  -[HMDPredicateUtilities setHome:]
  -[HMDPredicateUtilities containsPresenceEvents:]
  -[HMDPredicateUtilities personFamiliarityOptions]
  -[HMDPredicateUtilities compareValueOfCharacteristic:againstValue:operatorType:]
  -[HMDPredicateUtilities initWithHome:logIdentifier:]
  -[HMDPredicateUtilities rewritePredicate:currentCharacteristicInPredicate:characteristicsToRead:homePresence:]
  -[HMDPredicateUtilities comparePresence:operatorType:homePresence:]
  -[HMDPredicateUtilities updatePredicate:currentCharacteristicInPredicate:conditionModified:removedCharacteristic:underService:underAccessory:]
  -[HMDPredicateUtilities updatePredicate:removedUser:conditionModified:]
  -[HMDPredicateUtilities predicateWithoutStaleCharacteristicsFromPredicate:accessory:conditionModified:]
  -[HMDPredicateUtilities _updatePredicate:staleCharacteristicInCurrentPredicate:accessory:conditionModified:]
  -[HMDPredicateUtilities rewriteNowAdjustedForHomeTimeZone:]
  -[HMDPredicateUtilities addDeltaToNow:]
  -[HMDPredicateUtilities dateTodayMatchingComponents:]
  -[HMDPredicateUtilities rewritePredicateForClient:]
  -[HMDPredicateUtilities rewritePredicateForDaemon:message:]
  -[HMDPredicateUtilities rewritePredicate:forDaemon:message:]
  -[HMDPredicateUtilities generateAnalyticsData:]
  -[HMDPredicateUtilities fillAnalyticsData:forPredicate:]
  -[HMDPredicateUtilities cameraSignificantEvent]
  -[HMDPredicateUtilities setCameraSignificantEvent:]
  -[HMDPredicateUtilities setPersonFamiliarityOptions:]


HMDAWDLogEventObserver : HMFObject <HMMLogEventObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAWDLogEventObserver initialize]
  +[HMDAWDLogEventObserver sharedAWDServerConnection]
  +[HMDAWDLogEventObserver stringForAWDMetricType:]
  +[HMDAWDLogEventObserver _submitAWDMetric:type:]

  // instance methods
  -[HMDAWDLogEventObserver init]
  -[HMDAWDLogEventObserver didReceiveEventFromDispatcher:]


HMDCompositeSettingControllerManagerStateManager : NSObject <HMFLogging, HMDCompositeSettingControllerManagerStateManager>
 @property  unsigned long notificationOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDCompositeSettingNotificationRegistrationProviding> *notificationRegistrationProvider
 @property  <HMDCompositeSettingControllerManagerStateTransitionDelegate> *delegate
 @property  NSUUID *uuid
 @property  <HMDCompositeSettingControllerManagerStateManagerDataSource> *dataSource

  // class methods
  +[HMDCompositeSettingControllerManagerStateManager logCategory]

  // instance methods
  -[HMDCompositeSettingControllerManagerStateManager _registerForNotifications]
  -[HMDCompositeSettingControllerManagerStateManager logIdentifier]
  -[HMDCompositeSettingControllerManagerStateManager dataSource]
  -[HMDCompositeSettingControllerManagerStateManager _unregisterForNotifications]
  -[HMDCompositeSettingControllerManagerStateManager delegate]
  -[HMDCompositeSettingControllerManagerStateManager uuid]
  -[HMDCompositeSettingControllerManagerStateManager .cxx_destruct]
  -[HMDCompositeSettingControllerManagerStateManager _handleAccessoryRemovedNotification:]
  -[HMDCompositeSettingControllerManagerStateManager _handleResidentDeviceUpdated:]
  -[HMDCompositeSettingControllerManagerStateManager _handleHomeAdded:]
  -[HMDCompositeSettingControllerManagerStateManager _handleSiriEndpointProfileCreation:]
  -[HMDCompositeSettingControllerManagerStateManager _handleSiriEndpointProfileSettingsUpdate:]
  -[HMDCompositeSettingControllerManagerStateManager _handleCompositeSettingsControllerConfiguredNotification:]
  -[HMDCompositeSettingControllerManagerStateManager _handleAccessoryLanguagesChangedNotification:]
  -[HMDCompositeSettingControllerManagerStateManager stateForHomeUUID:]
  -[HMDCompositeSettingControllerManagerStateManager notificationRegistrationProvider]
  -[HMDCompositeSettingControllerManagerStateManager initWithDataSource:notificationRegistrationProvider:subscribeWithOptions:delegate:uuid:]
  -[HMDCompositeSettingControllerManagerStateManager _createStateForHomeUUIDIfNotExist:]
  -[HMDCompositeSettingControllerManagerStateManager _computeResidentStateChangeForHome:]
  -[HMDCompositeSettingControllerManagerStateManager notificationOptions]


HMDSiriEndpointOnboardingManager : NSObject
 @property  <HMDSiriEndpointOnboardingManagerDataSource> *dataSource

  // instance methods
  -[HMDSiriEndpointOnboardingManager initWithDataSource:]
  -[HMDSiriEndpointOnboardingManager dataSource]
  -[HMDSiriEndpointOnboardingManager .cxx_destruct]
  -[HMDSiriEndpointOnboardingManager setDataSource:]
  -[HMDSiriEndpointOnboardingManager applyOnboardingSelections:accessoryUUID:homeUUID:completion:]
  -[HMDSiriEndpointOnboardingManager handleCompositeSettingsControllerConfigured:]
  -[HMDSiriEndpointOnboardingManager handleAccessoryConfigured:]
  -[HMDSiriEndpointOnboardingManager applyCachedOnboardingSelectionsWithAccessoryUUID:homeUUID:]
  -[HMDSiriEndpointOnboardingManager _setNeedsOnboardingCompleteWitHomeUUID:accessoryUUID:completion:]
  -[HMDSiriEndpointOnboardingManager readyToApplyOnboardingSelectionsWithHomeUUID:accessoryUUID:]


HMDRemoteEventRouterClientMessageLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  long long messageType
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDRemoteEventRouterClientMessageLogEvent submitEventWithDurationInMilliseconds]

  // instance methods
  -[HMDRemoteEventRouterClientMessageLogEvent eventName]
  -[HMDRemoteEventRouterClientMessageLogEvent messageType]
  -[HMDRemoteEventRouterClientMessageLogEvent serializedEvent]
  -[HMDRemoteEventRouterClientMessageLogEvent initWithMessageType:]


HMDCameraParameterSelection : HMFObject <HMFLogging>
 @property  HMDCameraStreamSessionID *sessionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraParameterSelection logCategory]
  +[HMDCameraParameterSelection selectedParametersFromPreferredParameters:deviceSupportedParameters:cameraSupportedParameters:overriddenParameters:parameterDescription:]
  +[HMDCameraParameterSelection selectedSRTPParametersFromCryptoSuites:]
  +[HMDCameraParameterSelection _selectedCryptoSuiteFromCameraCryptoSuites:]

  // instance methods
  -[HMDCameraParameterSelection logIdentifier]
  -[HMDCameraParameterSelection sessionID]
  -[HMDCameraParameterSelection .cxx_destruct]
  -[HMDCameraParameterSelection initWithSessionID:]


HMDCloudPairedMetadataVersionConfiguration : HMFObject <HMFLogging>
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *accessoryIdentifier
 @property  HMDCloudPairedMetadataDiagnostics *diagnostics
 @property  NSDictionary *prettyJSONDictionary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudPairedMetadataVersionConfiguration logCategory]

  // instance methods
  -[HMDCloudPairedMetadataVersionConfiguration attributeDescriptions]
  -[HMDCloudPairedMetadataVersionConfiguration diagnostics]
  -[HMDCloudPairedMetadataVersionConfiguration .cxx_destruct]
  -[HMDCloudPairedMetadataVersionConfiguration accessoryIdentifier]
  -[HMDCloudPairedMetadataVersionConfiguration prettyJSONDictionary]
  -[HMDCloudPairedMetadataVersionConfiguration initWithAccessoryIdentifier:jsonDictionary:]
  -[HMDCloudPairedMetadataVersionConfiguration initWithAccessoryIdentifier:diagnostics:]


HMDAWDRemoteSessionMetric : HMMLogEvent <HMDAWDLogEvent>
 @property  BOOL submitted
 @property  NSDate *creation
 @property  int role
 @property  BOOL authenticated
 @property  int closeReason
 @property  NSUUID *sessionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAWDRemoteSessionMetric closeReasonFromError:]

  // instance methods
  -[HMDAWDRemoteSessionMetric role]
  -[HMDAWDRemoteSessionMetric sessionID]
  -[HMDAWDRemoteSessionMetric isAuthenticated]
  -[HMDAWDRemoteSessionMetric .cxx_destruct]
  -[HMDAWDRemoteSessionMetric open]
  -[HMDAWDRemoteSessionMetric setSubmitted:]
  -[HMDAWDRemoteSessionMetric setCreation:]
  -[HMDAWDRemoteSessionMetric closeReason]
  -[HMDAWDRemoteSessionMetric submitted]
  -[HMDAWDRemoteSessionMetric creation]
  -[HMDAWDRemoteSessionMetric setAuthenticated:]
  -[HMDAWDRemoteSessionMetric AWDMessageType]
  -[HMDAWDRemoteSessionMetric metricForAWD]
  -[HMDAWDRemoteSessionMetric initWithClientMode:sessionID:]


HMDRemoteEventRouterProtoConnectMessage : PBCodable <NSCopying>
 @property  BOOL hasRouterVersion
 @property  unsigned int routerVersion
 @property  BOOL hasConnectEvent
 @property  HMEProtoEventInfo *connectEvent
 @property  BOOL hasUnregisterEvent
 @property  HMEProtoEventInfo *unregisterEvent
 @property  NSMutableArray *topicFilterAdditions
 @property  NSMutableArray *topicAdditions

  // class methods
  +[HMDRemoteEventRouterProtoConnectMessage topicFilterAdditionsType]
  +[HMDRemoteEventRouterProtoConnectMessage topicAdditionsType]

  // instance methods
  -[HMDRemoteEventRouterProtoConnectMessage addTopicFilterAdditions:]
  -[HMDRemoteEventRouterProtoConnectMessage topicFilterAdditionsCount]
  -[HMDRemoteEventRouterProtoConnectMessage copyTo:]
  -[HMDRemoteEventRouterProtoConnectMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoConnectMessage topicFilterAdditionsAtIndex:]
  -[HMDRemoteEventRouterProtoConnectMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoConnectMessage topicFilterAdditions]
  -[HMDRemoteEventRouterProtoConnectMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoConnectMessage clearTopicFilterAdditions]
  -[HMDRemoteEventRouterProtoConnectMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoConnectMessage readFrom:]
  -[HMDRemoteEventRouterProtoConnectMessage writeTo:]
  -[HMDRemoteEventRouterProtoConnectMessage setTopicFilterAdditions:]
  -[HMDRemoteEventRouterProtoConnectMessage isEqual:]
  -[HMDRemoteEventRouterProtoConnectMessage clearTopicAdditions]
  -[HMDRemoteEventRouterProtoConnectMessage addTopicAdditions:]
  -[HMDRemoteEventRouterProtoConnectMessage topicAdditionsCount]
  -[HMDRemoteEventRouterProtoConnectMessage topicAdditionsAtIndex:]
  -[HMDRemoteEventRouterProtoConnectMessage topicAdditions]
  -[HMDRemoteEventRouterProtoConnectMessage setTopicAdditions:]
  -[HMDRemoteEventRouterProtoConnectMessage setRouterVersion:]
  -[HMDRemoteEventRouterProtoConnectMessage setHasRouterVersion:]
  -[HMDRemoteEventRouterProtoConnectMessage hasRouterVersion]
  -[HMDRemoteEventRouterProtoConnectMessage routerVersion]
  -[HMDRemoteEventRouterProtoConnectMessage hasConnectEvent]
  -[HMDRemoteEventRouterProtoConnectMessage hasUnregisterEvent]
  -[HMDRemoteEventRouterProtoConnectMessage connectEvent]
  -[HMDRemoteEventRouterProtoConnectMessage setConnectEvent:]
  -[HMDRemoteEventRouterProtoConnectMessage unregisterEvent]
  -[HMDRemoteEventRouterProtoConnectMessage setUnregisterEvent:]


HMDCameraRecordingVideoCodec : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long type

  // class methods
  +[HMDCameraRecordingVideoCodec supportsSecureCoding]
  +[HMDCameraRecordingVideoCodec arrayWithCodecTypes:]

  // instance methods
  -[HMDCameraRecordingVideoCodec encodeWithCoder:]
  -[HMDCameraRecordingVideoCodec type]
  -[HMDCameraRecordingVideoCodec copyWithZone:]
  -[HMDCameraRecordingVideoCodec isEqual:]
  -[HMDCameraRecordingVideoCodec initWithCoder:]
  -[HMDCameraRecordingVideoCodec description:indent:]
  -[HMDCameraRecordingVideoCodec initWithTLVData:]
  -[HMDCameraRecordingVideoCodec initWithCodec:]


HMDCameraRecordingH264Profile : HAPNumberParser <NSSecureCoding>
 @property  long long h264Profile

  // class methods
  +[HMDCameraRecordingH264Profile supportsSecureCoding]
  +[HMDCameraRecordingH264Profile arrayWithProfiles:]

  // instance methods
  -[HMDCameraRecordingH264Profile encodeWithCoder:]
  -[HMDCameraRecordingH264Profile isEqual:]
  -[HMDCameraRecordingH264Profile initWithCoder:]
  -[HMDCameraRecordingH264Profile description:indent:]
  -[HMDCameraRecordingH264Profile initWithTLVData:]
  -[HMDCameraRecordingH264Profile initWithH264Profile:]
  -[HMDCameraRecordingH264Profile h264Profile]


HMDCameraRecordingH264Level : HAPNumberParser <NSSecureCoding>
 @property  long long h264Level

  // class methods
  +[HMDCameraRecordingH264Level supportsSecureCoding]
  +[HMDCameraRecordingH264Level arrayWithLevels:]

  // instance methods
  -[HMDCameraRecordingH264Level encodeWithCoder:]
  -[HMDCameraRecordingH264Level isEqual:]
  -[HMDCameraRecordingH264Level initWithCoder:]
  -[HMDCameraRecordingH264Level description:indent:]
  -[HMDCameraRecordingH264Level initWithTLVData:]
  -[HMDCameraRecordingH264Level initWithH264Level:]
  -[HMDCameraRecordingH264Level h264Level]


HMDCameraRecordingVideoCodecParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSArray *profiles
 @property  NSArray *levels
 @property  NSNumber *bitRate
 @property  NSNumber *iFrameInterval
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingVideoCodecParameters supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingVideoCodecParameters profiles]
  -[HMDCameraRecordingVideoCodecParameters encodeWithCoder:]
  -[HMDCameraRecordingVideoCodecParameters .cxx_destruct]
  -[HMDCameraRecordingVideoCodecParameters bitRate]
  -[HMDCameraRecordingVideoCodecParameters initWithCoder:]
  -[HMDCameraRecordingVideoCodecParameters levels]
  -[HMDCameraRecordingVideoCodecParameters description:indent:]
  -[HMDCameraRecordingVideoCodecParameters _parseFromTLVData]
  -[HMDCameraRecordingVideoCodecParameters tlvData]
  -[HMDCameraRecordingVideoCodecParameters initWithProfiles:levels:bitRate:iFrameInterval:]
  -[HMDCameraRecordingVideoCodecParameters iFrameInterval]


HMDCameraRecordingVideoAttributes : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *imageWidth
 @property  NSNumber *imageHeight
 @property  long long resolution
 @property  NSNumber *frameRate
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingVideoAttributes supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingVideoAttributes encodeWithCoder:]
  -[HMDCameraRecordingVideoAttributes frameRate]
  -[HMDCameraRecordingVideoAttributes .cxx_destruct]
  -[HMDCameraRecordingVideoAttributes resolution]
  -[HMDCameraRecordingVideoAttributes initWithCoder:]
  -[HMDCameraRecordingVideoAttributes imageWidth]
  -[HMDCameraRecordingVideoAttributes imageHeight]
  -[HMDCameraRecordingVideoAttributes description:indent:]
  -[HMDCameraRecordingVideoAttributes _parseFromTLVData]
  -[HMDCameraRecordingVideoAttributes tlvData]
  -[HMDCameraRecordingVideoAttributes initWithResolution:frameRate:]
  -[HMDCameraRecordingVideoAttributes initWithImageWidth:imageHeight:frameRate:]


HMDCameraRecordingVideoCodecConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDCameraRecordingVideoCodec *codec
 @property  HMDCameraRecordingVideoCodecParameters *parameters
 @property  NSArray *videoAttributes
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingVideoCodecConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingVideoCodecConfiguration parameters]
  -[HMDCameraRecordingVideoCodecConfiguration encodeWithCoder:]
  -[HMDCameraRecordingVideoCodecConfiguration .cxx_destruct]
  -[HMDCameraRecordingVideoCodecConfiguration codec]
  -[HMDCameraRecordingVideoCodecConfiguration initWithCoder:]
  -[HMDCameraRecordingVideoCodecConfiguration videoAttributes]
  -[HMDCameraRecordingVideoCodecConfiguration description:indent:]
  -[HMDCameraRecordingVideoCodecConfiguration _parseFromTLVData]
  -[HMDCameraRecordingVideoCodecConfiguration tlvData]
  -[HMDCameraRecordingVideoCodecConfiguration initWithCodec:codecParameters:videoAttributes:]


HMDCameraRecordingSupportedVideoConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSArray *codecConfigurations
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingSupportedVideoConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingSupportedVideoConfiguration encodeWithCoder:]
  -[HMDCameraRecordingSupportedVideoConfiguration .cxx_destruct]
  -[HMDCameraRecordingSupportedVideoConfiguration initWithCoder:]
  -[HMDCameraRecordingSupportedVideoConfiguration description:indent:]
  -[HMDCameraRecordingSupportedVideoConfiguration _parseFromTLVData]
  -[HMDCameraRecordingSupportedVideoConfiguration tlvData]
  -[HMDCameraRecordingSupportedVideoConfiguration initWithCodecConfigurations:]
  -[HMDCameraRecordingSupportedVideoConfiguration codecConfigurations]


HMDCameraRecordingManagerDependencyFactory : HMFObject <HMDCameraRecordingManagerDependencyFactory>
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  HMFPreferences *preferences
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraRecordingManagerDependencyFactory preferences]
  -[HMDCameraRecordingManagerDependencyFactory featuresDataSource]
  -[HMDCameraRecordingManagerDependencyFactory logEventSubmitter]
  -[HMDCameraRecordingManagerDependencyFactory createSettingsControl:accessory:managementService:]
  -[HMDCameraRecordingManagerDependencyFactory createTimelineManagerWithWorkQueue:fragmentDuration:fragmentCreationReferenceDate:logIdentifier:]
  -[HMDCameraRecordingManagerDependencyFactory createRecordingSessionWithWorkQueue:camera:hapAccessory:home:localZone:configuredFragmentDuration:timelineManager:significantEventServer:homePresenceByPairingIdentity:]
  -[HMDCameraRecordingManagerDependencyFactory createSessionNotificationTrigger:workQueue:]
  -[HMDCameraRecordingManagerDependencyFactory createBulkSendSessionInitiatorWithWorkQueue:accessory:]
  -[HMDCameraRecordingManagerDependencyFactory createBulkSendSessionReaderWithWorkQueue:session:readTimeout:logIdentifier:]
  -[HMDCameraRecordingManagerDependencyFactory createTimerWithTimeInterval:]
  -[HMDCameraRecordingManagerDependencyFactory createRecordingSessionRetryContextWithWorkQueue:homePresenceByPairingIdentity:]
  -[HMDCameraRecordingManagerDependencyFactory createSignificantEventServerWithWorkQueue:camera:]


HMDIDSActivityMonitor : NSObject <HMFLogging>
 @property  IDSActivityMonitor *activityMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSActivityMonitor logCategory]

  // instance methods
  -[HMDIDSActivityMonitor logIdentifier]
  -[HMDIDSActivityMonitor .cxx_destruct]
  -[HMDIDSActivityMonitor initWithActivity:serviceIdentifier:]
  -[HMDIDSActivityMonitor activityMonitor]
  -[HMDIDSActivityMonitor listenWithDelegate:]
  -[HMDIDSActivityMonitor broadcastSubActivity:toPushTokens:]
  -[HMDIDSActivityMonitor stopBroadcastingSubActivity:]


HMDIDSActivityMonitorBroadcaster : NSObject <HMFLogging, HMFTimerDelegate, HMDIDSActivityMonitorBroadcasterPushTokenDataSourceDelegate>
 @property  HMDIDSActivityMonitor *activityMonitor
 @property  <HMDIDSActivityMonitorBroadcasterPushTokenDataSource> *dataSource
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDXPCActivityInterfacing> *xpcActivityInterface
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSActivityMonitorBroadcaster criteria]
  +[HMDIDSActivityMonitorBroadcaster logCategory]

  // instance methods
  -[HMDIDSActivityMonitorBroadcaster timerDidFire:]
  -[HMDIDSActivityMonitorBroadcaster logIdentifier]
  -[HMDIDSActivityMonitorBroadcaster dataSource]
  -[HMDIDSActivityMonitorBroadcaster .cxx_destruct]
  -[HMDIDSActivityMonitorBroadcaster setQueue:]
  -[HMDIDSActivityMonitorBroadcaster activityMonitor]
  -[HMDIDSActivityMonitorBroadcaster setDataSource:]
  -[HMDIDSActivityMonitorBroadcaster queue]
  -[HMDIDSActivityMonitorBroadcaster initWithActivityMonitor:]
  -[HMDIDSActivityMonitorBroadcaster xpcActivityInterface]
  -[HMDIDSActivityMonitorBroadcaster dataSourceDidUpdate:]
  -[HMDIDSActivityMonitorBroadcaster initWithActivityMonitor:timer:xpcActivityInterface:]
  -[HMDIDSActivityMonitorBroadcaster configureWithQueue:]
  -[HMDIDSActivityMonitorBroadcaster configureWithDataSource:]
  -[HMDIDSActivityMonitorBroadcaster _registerForXPCPoll]
  -[HMDIDSActivityMonitorBroadcaster _refreshBroadcastSubscription]


HMDIDSActivityMonitorObserver : NSObject <IDSActivityMonitorListenerDelegate, HMFLogging>
 @property  HMDIDSActivityMonitor *activityMonitor
 @property  NSMutableDictionary *subactivityToDelegatesMap
 @property  <HMDIDSActivityMonitorObserverRegistrationManager> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDIDSActivityMonitorObserver logCategory]

  // instance methods
  -[HMDIDSActivityMonitorObserver logIdentifier]
  -[HMDIDSActivityMonitorObserver dataSource]
  -[HMDIDSActivityMonitorObserver .cxx_destruct]
  -[HMDIDSActivityMonitorObserver activityMonitor]
  -[HMDIDSActivityMonitorObserver setDataSource:]
  -[HMDIDSActivityMonitorObserver activityMonitor:didReceiveActivityUpdate:]
  -[HMDIDSActivityMonitorObserver initWithActivityMonitor:]
  -[HMDIDSActivityMonitorObserver configureWithDataSource:]
  -[HMDIDSActivityMonitorObserver addObserver:forSubActivity:]
  -[HMDIDSActivityMonitorObserver removeObserver:forSubActivity:]
  -[HMDIDSActivityMonitorObserver startObservingPresenceForDevice:]
  -[HMDIDSActivityMonitorObserver stopObservingPresenceForDevice:]
  -[HMDIDSActivityMonitorObserver subactivityToDelegatesMap]


HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel : HMBModel <HMFLogging>
 @property  NSData *networkDeclarationsData
 @property  NSData *pairedMetadataData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel hmbProperties]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel namespaceID]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel modelIDForRecordID:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel initWithModelID:parentModelID:networkDeclarationsData:pairedMetadataData:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel initWithModelID:parentModelID:networkDeclarationsData:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel initWithCloudZoneID:recordID:networkDeclarationsData:pairedMetadataData:]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreCloudAccessoryModel initWithCloudZoneID:recordID:networkDeclarationsData:]


HMDNetworkRouterClientManager : NSObject <HMFLogging, HMDDevicePreferenceDataSource, HMDNetworkRouterFirewallRuleManagerClient>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter
 @property  <HMDNetworkRouterFirewallRuleManager> *firewallRuleManager
 @property  HMDHAPAccessory *networkRouterAccessory
 @property  HMDHome *home
 @property  HMDNetworkRouterController *routerController
 @property  BOOL started
 @property  BOOL managedNetworkEnabled
 @property  BOOL staleClientIdentifiersResetNeeded
 @property  BOOL staleClientIdentifiersResetInProgress
 @property  BOOL startPending
 @property  NSMutableSet *accessoriesInReconfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterClientManager logCategory]

  // instance methods
  -[HMDNetworkRouterClientManager notificationCenter]
  -[HMDNetworkRouterClientManager _stop]
  -[HMDNetworkRouterClientManager home]
  -[HMDNetworkRouterClientManager workQueue]
  -[HMDNetworkRouterClientManager started]
  -[HMDNetworkRouterClientManager _start]
  -[HMDNetworkRouterClientManager .cxx_destruct]
  -[HMDNetworkRouterClientManager stop]
  -[HMDNetworkRouterClientManager setStarted:]
  -[HMDNetworkRouterClientManager firewallRuleManager]
  -[HMDNetworkRouterClientManager supportsDeviceWithCapabilities:]
  -[HMDNetworkRouterClientManager watchedAccessoryIdentifiersForFirewallRuleManager:]
  -[HMDNetworkRouterClientManager handleAccessoryConnected:]
  -[HMDNetworkRouterClientManager handleAccessoryRemoved:]
  -[HMDNetworkRouterClientManager handleRouterAccessoryReachable:]
  -[HMDNetworkRouterClientManager handleAccessoryAdded:]
  -[HMDNetworkRouterClientManager handleHomeNetworkProtectionChanged:]
  -[HMDNetworkRouterClientManager handleFirewallRulesUpdated:]
  -[HMDNetworkRouterClientManager handleNetworkProtectionGroupActivated:]
  -[HMDNetworkRouterClientManager handleNetworkProtectionGroupDeactivated:]
  -[HMDNetworkRouterClientManager handleAccessoryFirmwareVersionUpdated:]
  -[HMDNetworkRouterClientManager handleNetworkProtectionGroupProtectionChanged:]
  -[HMDNetworkRouterClientManager initWithNetworkRouterAccessory:workQueue:firewallRuleManager:notificationCenter:]
  -[HMDNetworkRouterClientManager networkRouterAccessory]
  -[HMDNetworkRouterClientManager evaluateManagement]
  -[HMDNetworkRouterClientManager replaceActiveNetworkRouterAccessory:]
  -[HMDNetworkRouterClientManager migrateAccessory:toCredentialType:rotate:completion:]
  -[HMDNetworkRouterClientManager routerController]
  -[HMDNetworkRouterClientManager setNetworkRouterAccessory:]
  -[HMDNetworkRouterClientManager __registerForNetworkRouterAccessoryReachable:]
  -[HMDNetworkRouterClientManager __deregisterForNetworkRouterAccessoryReachable:]
  -[HMDNetworkRouterClientManager _evaluateManagement]
  -[HMDNetworkRouterClientManager _resetStaleClientIdentifiersBeforeStart]
  -[HMDNetworkRouterClientManager _handleRouterAccessoryReachable:]
  -[HMDNetworkRouterClientManager _startManagingAccessory:initialHomeSetup:]
  -[HMDNetworkRouterClientManager _reconcileClientConfigurationForReachableAccessory:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _reconcileClientConfigurationForAccessory:clientStatus:networkRouterUUID:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _replaceNetworkClientIdentifierForAccessory:networkClientIdentifier:networkRouterUUID:clientStatus:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _replaceClientConfigurationForAccessory:credential:clientStatus:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _createClientConfigurationForAccessory:credential:clientStatus:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _updateClientConfigurationForAllAccessoriesWithClientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _updateOrCreateClientConfigurationForAccessory:preferReconcile:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _updateExistingClientConfiguration:forAccessory:clientStatus:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _updateClientConfiguration:forAccessory:protectionMode:clientStatus:skipIfFingerprintMatches:clientReconfigurationAllowed:]
  -[HMDNetworkRouterClientManager _migrateAccessory:withConfiguration:clientStatus:fromCredentialType:toCredentialType:rotate:completion:]
  -[HMDNetworkRouterClientManager _getNetworkConfigurationForAccessory:targetProtectionMode:completion:]
  -[HMDNetworkRouterClientManager _fetchFirewallRulesForAccessory:completion:]
  -[HMDNetworkRouterClientManager _registerForChangesToManagedAccessory:]
  -[HMDNetworkRouterClientManager _deregisterForChangesToManagedAccessory:]
  -[HMDNetworkRouterClientManager _registerForNetworkProtectionChangesToGroup:]
  -[HMDNetworkRouterClientManager _unregisterForNetworkProtectionChangesToGroup:]
  -[HMDNetworkRouterClientManager _transactionBlockForAccessoriesWithStaleClientIdentifier]
  -[HMDNetworkRouterClientManager managedNetworkEnabled]
  -[HMDNetworkRouterClientManager setManagedNetworkEnabled:]
  -[HMDNetworkRouterClientManager staleClientIdentifiersResetNeeded]
  -[HMDNetworkRouterClientManager setStaleClientIdentifiersResetNeeded:]
  -[HMDNetworkRouterClientManager staleClientIdentifiersResetInProgress]
  -[HMDNetworkRouterClientManager setStaleClientIdentifiersResetInProgress:]
  -[HMDNetworkRouterClientManager startPending]
  -[HMDNetworkRouterClientManager setStartPending:]
  -[HMDNetworkRouterClientManager accessoriesInReconfiguration]


HMDLogEventReachabilityEventsAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager

  // class methods
  +[HMDLogEventReachabilityEventsAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventReachabilityEventsAnalyzer .cxx_destruct]
  -[HMDLogEventReachabilityEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventReachabilityEventsAnalyzer eventCountersManager]
  -[HMDLogEventReachabilityEventsAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventReachabilityEventsAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventReachabilityEventsAnalyzer initWithEventCountersManager:]
  -[HMDLogEventReachabilityEventsAnalyzer _handleReachabiltiyAddRemoveEvent:]
  -[HMDLogEventReachabilityEventsAnalyzer _handleRemoteDeviceReachabilityChangedLogEvent:]
  -[HMDLogEventReachabilityEventsAnalyzer _handleCameraRecordingReachabilityLogEvent:]


HMDResidentReachabilityNotificationManager : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  HMDHome *home
 @property  HMDRemoteDeviceMonitor *deviceMonitor
 @property  BOOL hasReachableResidentSupportingCameraRecording
 @property  BOOL anyEnabledResidentSupportsCameraRecordingReachabilityNotifications
 @property  BOOL reachabilityEventNotificationEnabledForAnyCamera
 @property  BOOL hasMultipleResidentsSupportingCameraRecording
 @property  @? timerFactory
 @property  HMDBulletinBoard *bulletinBoard
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFTimer *notificationDebounceTimer
 @property  HMDResidentReachabilityContext *reachabilityContext
 @property  BOOL notificationEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDResidentReachabilityNotificationManager logCategory]

  // instance methods
  -[HMDResidentReachabilityNotificationManager home]
  -[HMDResidentReachabilityNotificationManager timerDidFire:]
  -[HMDResidentReachabilityNotificationManager logIdentifier]
  -[HMDResidentReachabilityNotificationManager workQueue]
  -[HMDResidentReachabilityNotificationManager .cxx_destruct]
  -[HMDResidentReachabilityNotificationManager setNotificationEnabled:]
  -[HMDResidentReachabilityNotificationManager notificationEnabled]
  -[HMDResidentReachabilityNotificationManager timerFactory]
  -[HMDResidentReachabilityNotificationManager bulletinBoard]
  -[HMDResidentReachabilityNotificationManager deviceMonitor]
  -[HMDResidentReachabilityNotificationManager _startDebounceTimer]
  -[HMDResidentReachabilityNotificationManager _handleCameraProfileSettingsDidChange:]
  -[HMDResidentReachabilityNotificationManager _handleCameraProfileUnconfigured:]
  -[HMDResidentReachabilityNotificationManager _handleResidentUpdated:]
  -[HMDResidentReachabilityNotificationManager _handleResidentAdded:]
  -[HMDResidentReachabilityNotificationManager _handleResidentRemoved:]
  -[HMDResidentReachabilityNotificationManager _handleNetworkReachabilityChange:]
  -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:]
  -[HMDResidentReachabilityNotificationManager initWithResidentReachabilityContext:workQueue:timerFactory:bulletinBoard:]
  -[HMDResidentReachabilityNotificationManager configureWithHome:deviceMonitor:]
  -[HMDResidentReachabilityNotificationManager configureWithHome:deviceMonitor:notificationCenter:completionHandler:]
  -[HMDResidentReachabilityNotificationManager _evaluateReachabilityBulletin]
  -[HMDResidentReachabilityNotificationManager hasReachableResidentSupportingCameraRecording]
  -[HMDResidentReachabilityNotificationManager hasMultipleResidentsSupportingCameraRecording]
  -[HMDResidentReachabilityNotificationManager isReachabilityEventNotificationEnabledForAnyCamera]
  -[HMDResidentReachabilityNotificationManager anyEnabledResidentSupportsCameraRecordingReachabilityNotifications]
  -[HMDResidentReachabilityNotificationManager shouldPostReachableNotification]
  -[HMDResidentReachabilityNotificationManager shouldPostUnreachableNotification]
  -[HMDResidentReachabilityNotificationManager updateNotificationEnabled]
  -[HMDResidentReachabilityNotificationManager reachabilityContext]
  -[HMDResidentReachabilityNotificationManager setReachabilityContext:]
  -[HMDResidentReachabilityNotificationManager notificationDebounceTimer]
  -[HMDResidentReachabilityNotificationManager setNotificationDebounceTimer:]


AWDHomeKitWatchCompanionConnectivityReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasNumWatchAddEvents
 @property  unsigned int numWatchAddEvents
 @property  BOOL hasNumWatchRemoveEvents
 @property  unsigned int numWatchRemoveEvents
 @property  BOOL hasReportComplete
 @property  BOOL reportComplete

  // instance methods
  -[AWDHomeKitWatchCompanionConnectivityReport setTimestamp:]
  -[AWDHomeKitWatchCompanionConnectivityReport copyTo:]
  -[AWDHomeKitWatchCompanionConnectivityReport mergeFrom:]
  -[AWDHomeKitWatchCompanionConnectivityReport setHasTimestamp:]
  -[AWDHomeKitWatchCompanionConnectivityReport dictionaryRepresentation]
  -[AWDHomeKitWatchCompanionConnectivityReport hasTimestamp]
  -[AWDHomeKitWatchCompanionConnectivityReport copyWithZone:]
  -[AWDHomeKitWatchCompanionConnectivityReport timestamp]
  -[AWDHomeKitWatchCompanionConnectivityReport readFrom:]
  -[AWDHomeKitWatchCompanionConnectivityReport writeTo:]
  -[AWDHomeKitWatchCompanionConnectivityReport isEqual:]
  -[AWDHomeKitWatchCompanionConnectivityReport setReportComplete:]
  -[AWDHomeKitWatchCompanionConnectivityReport reportComplete]
  -[AWDHomeKitWatchCompanionConnectivityReport setNumWatchAddEvents:]
  -[AWDHomeKitWatchCompanionConnectivityReport setHasNumWatchAddEvents:]
  -[AWDHomeKitWatchCompanionConnectivityReport hasNumWatchAddEvents]
  -[AWDHomeKitWatchCompanionConnectivityReport setNumWatchRemoveEvents:]
  -[AWDHomeKitWatchCompanionConnectivityReport setHasNumWatchRemoveEvents:]
  -[AWDHomeKitWatchCompanionConnectivityReport hasNumWatchRemoveEvents]
  -[AWDHomeKitWatchCompanionConnectivityReport setHasReportComplete:]
  -[AWDHomeKitWatchCompanionConnectivityReport hasReportComplete]
  -[AWDHomeKitWatchCompanionConnectivityReport numWatchAddEvents]
  -[AWDHomeKitWatchCompanionConnectivityReport numWatchRemoveEvents]


AWDHomeKitEventTrigger : PBCodable <NSCopying>
 @property  NSMutableArray *events
 @property  BOOL hasExecuteOnce
 @property  BOOL executeOnce
 @property  BOOL hasContainsRecurrences
 @property  BOOL containsRecurrences
 @property  BOOL hasPredicate
 @property  AWDHomeKitPredicate *predicate
 @property  BOOL hasActivationState
 @property  int activationState
 @property  BOOL hasActivationType
 @property  int activationType

  // class methods
  +[AWDHomeKitEventTrigger eventsType]

  // instance methods
  -[AWDHomeKitEventTrigger addEvents:]
  -[AWDHomeKitEventTrigger setPredicate:]
  -[AWDHomeKitEventTrigger events]
  -[AWDHomeKitEventTrigger setActivationState:]
  -[AWDHomeKitEventTrigger copyTo:]
  -[AWDHomeKitEventTrigger clearEvents]
  -[AWDHomeKitEventTrigger eventsCount]
  -[AWDHomeKitEventTrigger predicate]
  -[AWDHomeKitEventTrigger .cxx_destruct]
  -[AWDHomeKitEventTrigger mergeFrom:]
  -[AWDHomeKitEventTrigger setEvents:]
  -[AWDHomeKitEventTrigger activationState]
  -[AWDHomeKitEventTrigger dictionaryRepresentation]
  -[AWDHomeKitEventTrigger copyWithZone:]
  -[AWDHomeKitEventTrigger readFrom:]
  -[AWDHomeKitEventTrigger eventsAtIndex:]
  -[AWDHomeKitEventTrigger writeTo:]
  -[AWDHomeKitEventTrigger isEqual:]
  -[AWDHomeKitEventTrigger hasPredicate]
  -[AWDHomeKitEventTrigger activationType]
  -[AWDHomeKitEventTrigger setActivationType:]
  -[AWDHomeKitEventTrigger executeOnce]
  -[AWDHomeKitEventTrigger setExecuteOnce:]
  -[AWDHomeKitEventTrigger containsRecurrences]
  -[AWDHomeKitEventTrigger setContainsRecurrences:]
  -[AWDHomeKitEventTrigger setHasExecuteOnce:]
  -[AWDHomeKitEventTrigger hasExecuteOnce]
  -[AWDHomeKitEventTrigger setHasContainsRecurrences:]
  -[AWDHomeKitEventTrigger hasContainsRecurrences]
  -[AWDHomeKitEventTrigger setHasActivationState:]
  -[AWDHomeKitEventTrigger hasActivationState]
  -[AWDHomeKitEventTrigger activationStateAsString:]
  -[AWDHomeKitEventTrigger StringAsActivationState:]
  -[AWDHomeKitEventTrigger setHasActivationType:]
  -[AWDHomeKitEventTrigger hasActivationType]
  -[AWDHomeKitEventTrigger activationTypeAsString:]
  -[AWDHomeKitEventTrigger StringAsActivationType:]


HMDPersonDataBatchChange : HMFObject <HMFLogging>
 @property  HMBLocalZoneLocalInput *localInput
 @property  NSUUID *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPersonDataBatchChange logCategory]

  // instance methods
  -[HMDPersonDataBatchChange commit]
  -[HMDPersonDataBatchChange logIdentifier]
  -[HMDPersonDataBatchChange attributeDescriptions]
  -[HMDPersonDataBatchChange .cxx_destruct]
  -[HMDPersonDataBatchChange UUID]
  -[HMDPersonDataBatchChange initWithLocalInput:]
  -[HMDPersonDataBatchChange addOrUpdatePerson:]
  -[HMDPersonDataBatchChange addOrUpdateFaceCrop:]
  -[HMDPersonDataBatchChange removePersonWithUUID:]
  -[HMDPersonDataBatchChange removeFaceCropWithUUID:]
  -[HMDPersonDataBatchChange localInput]


AWDHomeKitRemoteLogin : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasLoginType
 @property  int loginType
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode
 @property  BOOL hasDelay
 @property  unsigned long delay
 @property  BOOL hasRequester
 @property  int requester

  // instance methods
  -[AWDHomeKitRemoteLogin setTimestamp:]
  -[AWDHomeKitRemoteLogin copyTo:]
  -[AWDHomeKitRemoteLogin setDelay:]
  -[AWDHomeKitRemoteLogin setRequester:]
  -[AWDHomeKitRemoteLogin requester]
  -[AWDHomeKitRemoteLogin mergeFrom:]
  -[AWDHomeKitRemoteLogin setHasTimestamp:]
  -[AWDHomeKitRemoteLogin dictionaryRepresentation]
  -[AWDHomeKitRemoteLogin hasTimestamp]
  -[AWDHomeKitRemoteLogin copyWithZone:]
  -[AWDHomeKitRemoteLogin delay]
  -[AWDHomeKitRemoteLogin timestamp]
  -[AWDHomeKitRemoteLogin readFrom:]
  -[AWDHomeKitRemoteLogin writeTo:]
  -[AWDHomeKitRemoteLogin isEqual:]
  -[AWDHomeKitRemoteLogin setHasDelay:]
  -[AWDHomeKitRemoteLogin hasDelay]
  -[AWDHomeKitRemoteLogin setLoginType:]
  -[AWDHomeKitRemoteLogin setHasRequester:]
  -[AWDHomeKitRemoteLogin hasRequester]
  -[AWDHomeKitRemoteLogin requesterAsString:]
  -[AWDHomeKitRemoteLogin StringAsRequester:]
  -[AWDHomeKitRemoteLogin loginType]
  -[AWDHomeKitRemoteLogin setResultErrorCode:]
  -[AWDHomeKitRemoteLogin setHasResultErrorCode:]
  -[AWDHomeKitRemoteLogin hasResultErrorCode]
  -[AWDHomeKitRemoteLogin resultErrorCode]
  -[AWDHomeKitRemoteLogin setHasLoginType:]
  -[AWDHomeKitRemoteLogin hasLoginType]
  -[AWDHomeKitRemoteLogin loginTypeAsString:]
  -[AWDHomeKitRemoteLogin StringAsLoginType:]


HMDBackingStoreModelObject : HMFObject <HMFLogging, NSCopying>
 @property  NSUUID *uuid
 @property  NSUUID *parentUUID
 @property  NSString *bsoType
 @property  CKRecord *bsoRecord
 @property  BOOL bsoDataVersionOverride
 @property  unsigned long objectChangeType
 @property  NSSet *dependentUUIDs
 @property  <HMDBackingStoreObjectProtocol> *bsoDelegate
 @property  unsigned long bsoLogRowID
 @property  HMFVersion *bsoDataVersion
 @property  BOOL isReadOnly
 @property  BOOL isGenericRepresentation
 @property  BOOL replayable
 @property  HMFVersion *bsoIgnoredBefore
 @property  BOOL bsoIgnoreModel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreModelObject resolveInstanceMethod:]
  +[HMDBackingStoreModelObject properties]
  +[HMDBackingStoreModelObject logCategory]
  +[HMDBackingStoreModelObject schemaHashRoot]
  +[HMDBackingStoreModelObject backedObjectClass]
  +[HMDBackingStoreModelObject bsoSchemaHash]
  +[HMDBackingStoreModelObject readonlyBefore]
  +[HMDBackingStoreModelObject genericRepresentation]
  +[HMDBackingStoreModelObject objectFromDictionaryData:type:error:]
  +[HMDBackingStoreModelObject objectFromDictionaryData:error:]
  +[HMDBackingStoreModelObject objectFromData:encoding:error:]
  +[HMDBackingStoreModelObject objectFromData:encoding:rowID:error:]
  +[HMDBackingStoreModelObject objectFromData:encoding:record:error:]
  +[HMDBackingStoreModelObject objectFromCloud:error:]
  +[HMDBackingStoreModelObject formatValue:]

  // instance methods
  -[HMDBackingStoreModelObject merge:]
  -[HMDBackingStoreModelObject isReadOnly]
  -[HMDBackingStoreModelObject logIdentifier]
  -[HMDBackingStoreModelObject uuid]
  -[HMDBackingStoreModelObject .cxx_destruct]
  -[HMDBackingStoreModelObject setUuid:]
  -[HMDBackingStoreModelObject initWithUUID:]
  -[HMDBackingStoreModelObject setProperties]
  -[HMDBackingStoreModelObject copyWithZone:]
  -[HMDBackingStoreModelObject debugString:]
  -[HMDBackingStoreModelObject isEqual:]
  -[HMDBackingStoreModelObject parentUUID]
  -[HMDBackingStoreModelObject setParentUUID:]
  -[HMDBackingStoreModelObject merge:error:]
  -[HMDBackingStoreModelObject encodeWithError:]
  -[HMDBackingStoreModelObject isReplayable]
  -[HMDBackingStoreModelObject _validateType:error:]
  -[HMDBackingStoreModelObject validateType:path:]
  -[HMDBackingStoreModelObject dumpDebug:]
  -[HMDBackingStoreModelObject dumpDebug]
  -[HMDBackingStoreModelObject dependentUUIDs]
  -[HMDBackingStoreModelObject initWithObjectChangeType:uuid:parentUUID:]
  -[HMDBackingStoreModelObject diff:differingFields:]
  -[HMDBackingStoreModelObject typeNameForDebug]
  -[HMDBackingStoreModelObject initWithVersion:changeType:uuid:parentUUID:]
  -[HMDBackingStoreModelObject initWithUUID:parentUUID:]
  -[HMDBackingStoreModelObject backedObjectWithParent:error:]
  -[HMDBackingStoreModelObject setBsoIgnoredBefore:]
  -[HMDBackingStoreModelObject bsoIgnoredBefore]
  -[HMDBackingStoreModelObject bsoIgnoreModel]
  -[HMDBackingStoreModelObject prepareFor:]
  -[HMDBackingStoreModelObject encodeAsNSDictionaryFor:error:]
  -[HMDBackingStoreModelObject encodeWithEncoding:error:]
  -[HMDBackingStoreModelObject encodeFor:error:]
  -[HMDBackingStoreModelObject encodeWithEncoding:for:error:]
  -[HMDBackingStoreModelObject encodeForCloud:]
  -[HMDBackingStoreModelObject setParentUUIDIfNotNil:]
  -[HMDBackingStoreModelObject propertyWasSet:]
  -[HMDBackingStoreModelObject isGenericRepresentation]
  -[HMDBackingStoreModelObject propertyIsReadOnly:]
  -[HMDBackingStoreModelObject propertyIsAvailable:]
  -[HMDBackingStoreModelObject validForStorage]
  -[HMDBackingStoreModelObject merge:from:]
  -[HMDBackingStoreModelObject setPropertyIfNotNil:named:]
  -[HMDBackingStoreModelObject defaultValueForPropertyNamed:isSet:]
  -[HMDBackingStoreModelObject dumpWithVerbosity:prefix:logType:]
  -[HMDBackingStoreModelObject debugString:prefix:]
  -[HMDBackingStoreModelObject clearVersionOverride]
  -[HMDBackingStoreModelObject bsoDelegate]
  -[HMDBackingStoreModelObject setBsoDelegate:]
  -[HMDBackingStoreModelObject bsoType]
  -[HMDBackingStoreModelObject setBsoType:]
  -[HMDBackingStoreModelObject bsoLogRowID]
  -[HMDBackingStoreModelObject bsoDataVersion]
  -[HMDBackingStoreModelObject objectChangeType]
  -[HMDBackingStoreModelObject setObjectChangeType:]
  -[HMDBackingStoreModelObject bsoRecord]
  -[HMDBackingStoreModelObject setBsoRecord:]
  -[HMDBackingStoreModelObject bsoDataVersionOverride]
  -[HMDBackingStoreModelObject setBsoDataVersionOverride:]


HMDBackingStoreModelObjectUnsupported : HMDBackingStoreModelObject
  // instance methods
  -[HMDBackingStoreModelObjectUnsupported dumpDebug:]
  -[HMDBackingStoreModelObjectUnsupported dumpDebug]
  -[HMDBackingStoreModelObjectUnsupported dumpWithVerbosity:prefix:logType:]


HMDFaceprintModel : HMBModel
 @property  NSData *data
 @property  NSUUID *modelUUID
 @property  HMBModelReference *faceCrop

  // class methods
  +[HMDFaceprintModel hmbProperties]
  +[HMDFaceprintModel hmbExcludeFromCloudStorage]

  // instance methods
  -[HMDFaceprintModel initWithFaceprint:]
  -[HMDFaceprintModel createFaceprint]


HMDCloudShareTrustManagerLogEvent : HMMLogEvent

HMDCloudShareTrustManagerTrustActivityLogEvent : HMDCloudShareTrustManagerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *trustActivityType
 @property  NSNumber *privilege
 @property  NSNumber *isPrimaryResident

  // instance methods
  -[HMDCloudShareTrustManagerTrustActivityLogEvent eventName]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent .cxx_destruct]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent serializedEvent]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent isPrimaryResident]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent initWithTrustActivityType:privilege:isPrimaryResident:]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent trustActivityType]
  -[HMDCloudShareTrustManagerTrustActivityLogEvent privilege]


HMDCloudShareTrustManagerFailureLogEvent : HMDCloudShareTrustManagerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *trustManagerErrorCode

  // instance methods
  -[HMDCloudShareTrustManagerFailureLogEvent eventName]
  -[HMDCloudShareTrustManagerFailureLogEvent .cxx_destruct]
  -[HMDCloudShareTrustManagerFailureLogEvent serializedEvent]
  -[HMDCloudShareTrustManagerFailureLogEvent initWithTrustManagerErrorCode:error:]
  -[HMDCloudShareTrustManagerFailureLogEvent trustManagerErrorCode]


HMDUserCloudShareOwnerAdoptionDailyEvent : HMDCloudShareTrustManagerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *configureState
 @property  NSNumber *isPrimaryResident
 @property  NSNumber *hasSharedUser
 @property  NSNumber *percentageOfParticipantsHaveAccepted
 @property  NSNumber *percentageOfParticipantsHaveCloudShareIDAndHaveAccepted
 @property  NSNumber *percentageOfParticipantsHaveCloudShareIDButNotAccepted
 @property  NSNumber *percentageOfNonAcceptedParticipantsWithKnownCapability
 @property  NSNumber *percentageOfUsersThatAreNotParticipant
 @property  NSNumber *percentageOfParticipatingUsersThatNotAccepted
 @property  NSNumber *percentageOfAcceptedParticipantsWithoutCloudShareID

  // instance methods
  -[HMDUserCloudShareOwnerAdoptionDailyEvent eventName]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent .cxx_destruct]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent serializedEvent]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent isPrimaryResident]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent configureState]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent initWithConfigureState:isPrimaryResident:trustStatusCounts:]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent hasSharedUser]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfParticipantsHaveAccepted]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfParticipantsHaveCloudShareIDAndHaveAccepted]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfParticipantsHaveCloudShareIDButNotAccepted]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfNonAcceptedParticipantsWithKnownCapability]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfUsersThatAreNotParticipant]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfParticipatingUsersThatNotAccepted]
  -[HMDUserCloudShareOwnerAdoptionDailyEvent percentageOfAcceptedParticipantsWithoutCloudShareID]


HMDUserCloudShareParticipantAdoptionDailyEvent : HMDCloudShareTrustManagerLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSNumber *configureState
 @property  NSNumber *hasOwnerCloudShareID

  // instance methods
  -[HMDUserCloudShareParticipantAdoptionDailyEvent eventName]
  -[HMDUserCloudShareParticipantAdoptionDailyEvent .cxx_destruct]
  -[HMDUserCloudShareParticipantAdoptionDailyEvent serializedEvent]
  -[HMDUserCloudShareParticipantAdoptionDailyEvent configureState]
  -[HMDUserCloudShareParticipantAdoptionDailyEvent initWithConfigureState:hasOwnerCloudShareID:]
  -[HMDUserCloudShareParticipantAdoptionDailyEvent hasOwnerCloudShareID]


HMDMediaDestinationControllerAggregateDataGenerator : NSObject <HMDMediaGroupsAggregateDataGenerator>
  // instance methods
  -[HMDMediaDestinationControllerAggregateDataGenerator aggregateDataWithDestinations:controllers:groups:]
  -[HMDMediaDestinationControllerAggregateDataGenerator validDestinationForDestinationControllerData:inDestinations:]


HMDFetchedSettingsDriverPreferences : NSObject <HMFLogging, HMDFetchedSettingsDriver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDFetchedSettingsDriverDelegate> *delegate

  // class methods
  +[HMDFetchedSettingsDriverPreferences logCategory]

  // instance methods
  -[HMDFetchedSettingsDriverPreferences setDelegate:]
  -[HMDFetchedSettingsDriverPreferences delegate]
  -[HMDFetchedSettingsDriverPreferences .cxx_destruct]
  -[HMDFetchedSettingsDriverPreferences startWithKeyPaths:completion:]
  -[HMDFetchedSettingsDriverPreferences fetchSettingsForKeyPaths:completion:]
  -[HMDFetchedSettingsDriverPreferences updateSettingWithKeyPath:boolSettingValue:completion:]
  -[HMDFetchedSettingsDriverPreferences updateSettingWithKeyPath:integerSettingValue:completion:]
  -[HMDFetchedSettingsDriverPreferences updateSettingWithKeyPath:languageSettingValue:completion:]
  -[HMDFetchedSettingsDriverPreferences languageValueListWithCompletion:]
  -[HMDFetchedSettingsDriverPreferences updateSettingWithKeyPath:primaryUserInfo:completion:]
  -[HMDFetchedSettingsDriverPreferences initWithQueue:userDefaults:prefix:defaultValues:]


HMDCameraSnapshotManagerDataSource : HMFObject <HMDCameraSnapshotManagerDataSource>
 @property  BOOL supportsCameraSnapshotRequestViaRelay
 @property  BOOL watchDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraSnapshotManagerDataSource createSnapshotLocalWithSessionID:workQueue:accessory:delegate:delegateQueue:snapshotRequestHandler:]
  -[HMDCameraSnapshotManagerDataSource createSnapshotRemoteRelayReceiverWithSessionID:workQueue:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:residentMessageHandler:]
  -[HMDCameraSnapshotManagerDataSource createLocalSnapshotSessionWithID:accessory:snapshotGetter:message:waitPeriod:reachabilityPath:cameraLocallyReachable:snapshotForNotification:]
  -[HMDCameraSnapshotManagerDataSource supportsCameraSnapshotRequestViaRelay]
  -[HMDCameraSnapshotManagerDataSource isWatchDevice]


HMDHomePresence : HMFObject <HMFLogging, HMDHomePresenceCheck>
 @property  HMDHome *home
 @property  NSDictionary *userPresenceMap
 @property  NSArray *authorizedUsers
 @property  HMDDevice *lastUpdateByDevice
 @property  BOOL hasPresenceRegionForAllUsers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomePresence logCategory]

  // instance methods
  -[HMDHomePresence home]
  -[HMDHomePresence logIdentifier]
  -[HMDHomePresence attributeDescriptions]
  -[HMDHomePresence .cxx_destruct]
  -[HMDHomePresence isEqual:]
  -[HMDHomePresence isUserAtHome:]
  -[HMDHomePresence isUserNotAtHome:]
  -[HMDHomePresence areUsersAtHome:]
  -[HMDHomePresence areUsersNotAtHome:]
  -[HMDHomePresence isNoUserAtHome]
  -[HMDHomePresence isAnyUserAtHome]
  -[HMDHomePresence initWithHome:userPresenceMap:lastUpdateByDevice:]
  -[HMDHomePresence authorizedUsers]
  -[HMDHomePresence serializedUUIDDictionary]
  -[HMDHomePresence serializedIdentifierDictionary]
  -[HMDHomePresence hasPresenceRegionForAllUsers]
  -[HMDHomePresence isPresenceRegionKnownForUser:]
  -[HMDHomePresence userPresenceMap]
  -[HMDHomePresence lastUpdateByDevice]


HMDHomePresenceRemote : HMFObject <HMDHomePresenceCheck>
 @property  NSDictionary *userPresenceMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomePresenceRemote .cxx_destruct]
  -[HMDHomePresenceRemote isEqual:]
  -[HMDHomePresenceRemote isUserAtHome:]
  -[HMDHomePresenceRemote isUserNotAtHome:]
  -[HMDHomePresenceRemote areUsersAtHome:]
  -[HMDHomePresenceRemote areUsersNotAtHome:]
  -[HMDHomePresenceRemote isNoUserAtHome]
  -[HMDHomePresenceRemote isAnyUserAtHome]
  -[HMDHomePresenceRemote userPresenceMap]
  -[HMDHomePresenceRemote initWithPresenceByUserId:]
  -[HMDHomePresenceRemote initWithPresenceByPairingIdentity:]
  -[HMDHomePresenceRemote regionForUser:]


HMDLegacyPrimaryElectionLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *reason
 @property  NSString *criteria
 @property  unsigned long availableResidentCount
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDLegacyPrimaryElectionLogEvent setCriteria:]
  -[HMDLegacyPrimaryElectionLogEvent eventName]
  -[HMDLegacyPrimaryElectionLogEvent .cxx_destruct]
  -[HMDLegacyPrimaryElectionLogEvent reason]
  -[HMDLegacyPrimaryElectionLogEvent criteria]
  -[HMDLegacyPrimaryElectionLogEvent setReason:]
  -[HMDLegacyPrimaryElectionLogEvent serializedEvent]
  -[HMDLegacyPrimaryElectionLogEvent availableResidentCount]
  -[HMDLegacyPrimaryElectionLogEvent setAvailableResidentCount:]


HMDCloudSyncAnalysisResultLogEvent : HMMLogEvent <HMDAWDLogEvent, HMMCoreAnalyticsLogging>
 @property  NSDate *creationDate
 @property  unsigned long dataSyncState
 @property  BOOL uploadMaximumDelayReached
 @property  BOOL lastDecryptionFailed
 @property  unsigned long incomingPushCount
 @property  unsigned long fetchCount
 @property  unsigned long legacyFetchCount
 @property  unsigned long fetchErrorCount
 @property  unsigned long legacyFetchErrorCount
 @property  unsigned long uploadCount
 @property  unsigned long legacyUploadCount
 @property  unsigned long uploadErrorCount
 @property  unsigned long legacyUploadErrorCount
 @property  unsigned long decryptionFailedCount
 @property  unsigned long bytesFetched
 @property  unsigned long bytesPushed
 @property  unsigned long legacyBytesFetched
 @property  unsigned long legacyBytesPushed
 @property  NSDictionary *legacyUploadReasonCountMap
 @property  NSDictionary *uploadErrorCountMap
 @property  NSDictionary *legacyUploadErrorCountMap
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDCloudSyncAnalysisResultLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]

  // instance methods
  -[HMDCloudSyncAnalysisResultLogEvent eventName]
  -[HMDCloudSyncAnalysisResultLogEvent .cxx_destruct]
  -[HMDCloudSyncAnalysisResultLogEvent creationDate]
  -[HMDCloudSyncAnalysisResultLogEvent setCreationDate:]
  -[HMDCloudSyncAnalysisResultLogEvent dataSyncState]
  -[HMDCloudSyncAnalysisResultLogEvent setDataSyncState:]
  -[HMDCloudSyncAnalysisResultLogEvent bytesFetched]
  -[HMDCloudSyncAnalysisResultLogEvent serializedEvent]
  -[HMDCloudSyncAnalysisResultLogEvent logEventWithAppendedCommonDimensions]
  -[HMDCloudSyncAnalysisResultLogEvent AWDMessageType]
  -[HMDCloudSyncAnalysisResultLogEvent metricForAWD]
  -[HMDCloudSyncAnalysisResultLogEvent setFetchCount:]
  -[HMDCloudSyncAnalysisResultLogEvent setUploadCount:]
  -[HMDCloudSyncAnalysisResultLogEvent setUploadErrorCount:]
  -[HMDCloudSyncAnalysisResultLogEvent setUploadMaximumDelayReached:]
  -[HMDCloudSyncAnalysisResultLogEvent setLastDecryptionFailed:]
  -[HMDCloudSyncAnalysisResultLogEvent fetchCount]
  -[HMDCloudSyncAnalysisResultLogEvent uploadCount]
  -[HMDCloudSyncAnalysisResultLogEvent uploadErrorCount]
  -[HMDCloudSyncAnalysisResultLogEvent uploadMaximumDelayReached]
  -[HMDCloudSyncAnalysisResultLogEvent lastDecryptionFailed]
  -[HMDCloudSyncAnalysisResultLogEvent incomingPushCount]
  -[HMDCloudSyncAnalysisResultLogEvent setIncomingPushCount:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyFetchCount]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyFetchCount:]
  -[HMDCloudSyncAnalysisResultLogEvent fetchErrorCount]
  -[HMDCloudSyncAnalysisResultLogEvent setFetchErrorCount:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyFetchErrorCount]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyFetchErrorCount:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyUploadCount]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyUploadCount:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyUploadErrorCount]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyUploadErrorCount:]
  -[HMDCloudSyncAnalysisResultLogEvent decryptionFailedCount]
  -[HMDCloudSyncAnalysisResultLogEvent setDecryptionFailedCount:]
  -[HMDCloudSyncAnalysisResultLogEvent setBytesFetched:]
  -[HMDCloudSyncAnalysisResultLogEvent bytesPushed]
  -[HMDCloudSyncAnalysisResultLogEvent setBytesPushed:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyBytesFetched]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyBytesFetched:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyBytesPushed]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyBytesPushed:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyUploadReasonCountMap]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyUploadReasonCountMap:]
  -[HMDCloudSyncAnalysisResultLogEvent uploadErrorCountMap]
  -[HMDCloudSyncAnalysisResultLogEvent setUploadErrorCountMap:]
  -[HMDCloudSyncAnalysisResultLogEvent legacyUploadErrorCountMap]
  -[HMDCloudSyncAnalysisResultLogEvent setLegacyUploadErrorCountMap:]


HMDCloudSyncLogEventsAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long dataSyncState

  // class methods
  +[HMDCloudSyncLogEventsAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDCloudSyncLogEventsAnalyzer .cxx_destruct]
  -[HMDCloudSyncLogEventsAnalyzer resetDataSource]
  -[HMDCloudSyncLogEventsAnalyzer dataSyncState]
  -[HMDCloudSyncLogEventsAnalyzer setDataSyncState:]
  -[HMDCloudSyncLogEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDCloudSyncLogEventsAnalyzer logEventSubmitter]
  -[HMDCloudSyncLogEventsAnalyzer eventCountersManager]
  -[HMDCloudSyncLogEventsAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer resetAggregationAnalysisContext]
  -[HMDCloudSyncLogEventsAnalyzer initWithEventCountersManager:logEventSubmitter:]
  -[HMDCloudSyncLogEventsAnalyzer handleIncomingCloudPushLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleFetchLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleUploadLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleUploadReasonLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleMaximumDelayLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleDecryptionCompletedEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleDataSyncStateEvent:]
  -[HMDCloudSyncLogEventsAnalyzer handleRecordOperationLogEvent:]
  -[HMDCloudSyncLogEventsAnalyzer cloudSyncAnalysisResult]
  -[HMDCloudSyncLogEventsAnalyzer setEventCountersManager:]


HMDHomeDataPushDestination : NSObject
 @property  NSString *username
 @property  HMDUser *user
 @property  NSString *destination
 @property  NSString *pushDestination
 @property  BOOL ignoreConfigCompare

  // instance methods
  -[HMDHomeDataPushDestination destination]
  -[HMDHomeDataPushDestination user]
  -[HMDHomeDataPushDestination .cxx_destruct]
  -[HMDHomeDataPushDestination username]
  -[HMDHomeDataPushDestination initWithUser:destination:]
  -[HMDHomeDataPushDestination pushDestination]
  -[HMDHomeDataPushDestination ignoreConfigCompare]
  -[HMDHomeDataPushDestination setIgnoreConfigCompare:]


HMDCharacteristicReadWriteLogEventManager : NSObject
 @property  NSMutableDictionary *consecutiveFailureCountByHMDAccessoryUUID
 @property  NSMutableDictionary *timeOfFirstFailureByHMDAccessoryUUID

  // class methods
  +[HMDCharacteristicReadWriteLogEventManager sharedInstance]

  // instance methods
  -[HMDCharacteristicReadWriteLogEventManager .cxx_destruct]
  -[HMDCharacteristicReadWriteLogEventManager init]
  -[HMDCharacteristicReadWriteLogEventManager handleSubmittedErrorCode:forAccessoryUUID:]
  -[HMDCharacteristicReadWriteLogEventManager consecutiveFailureCountForAccessoryUUID:]
  -[HMDCharacteristicReadWriteLogEventManager timeIntervalSinceFirstFailureForAccessoryUUID:]
  -[HMDCharacteristicReadWriteLogEventManager consecutiveFailureCountByHMDAccessoryUUID]
  -[HMDCharacteristicReadWriteLogEventManager timeOfFirstFailureByHMDAccessoryUUID]


HMDCharacteristicReadWriteLogEvent : HMMHomeLogEvent <HMDBiomeLogEvent, HMDMicroLocationLogEvent, HMDAWDLogEvent, HMMCoreAnalyticsLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSMutableDictionary *vendorDetailsForCoreAnalytics
 @property  unsigned long triggerSource
 @property  NSString *bundleId
 @property  NSString *accessoryManufacturer
 @property  NSString *accessoryModel
 @property  NSString *accessoryFirmwareVersion
 @property  long long accessoryCertificationStatus
 @property  NSString *accessoryCategory
 @property  AWDHomeKitVendorInformation *vendorDetailsForAWD
 @property  BOOL isLocal
 @property  BOOL isCached
 @property  BOOL isWriteOperation
 @property  BOOL isTimedWrite
 @property  NSString *primaryServiceType
 @property  long long linkType
 @property  long long communicationProtocol
 @property  NSString *transportProtocolVersion
 @property  BOOL isSentOverThread
 @property  double localDurationInMilliseconds
 @property  double residentFirstDurationInMilliseconds
 @property  double totalDurationInMilliseconds
 @property  BOOL isResidentFirstEnabled
 @property  NSError *residentFirstError
 @property  int transportType
 @property  BOOL isModernTransport
 @property  BOOL isSlowRapport
 @property  BOOL isDeviceAtHome
 @property  BOOL isResidentAvailable
 @property  BOOL isPrimaryResidentReachable
 @property  BOOL isCurrentDeviceAvailableResident
 @property  BOOL isCurrentDevicePrimaryResident
 @property  BOOL isCurrentDeviceConfirmedPrimaryResident
 @property  BOOL isRemoteAccessAllowed
 @property  BOOL isRemotelyReachable
 @property  unsigned long consecutiveFailureCount
 @property  double timeIntervalSinceFirstFailure
 @property  BOOL threadAccessory
 @property  NSUUID *homeUniqueIdentifier
 @property  NSString *homeName
 @property  BOOL isAtHome
 @property  NSString *userUUID
 @property  unsigned int numAccessoriesInHome
 @property  unsigned int numNonEmptyScenesInHome
 @property  NSString *accessoryName
 @property  NSUUID *accessoryUUID
 @property  NSUUID *accessoryUniqueIdentifier
 @property  NSUUID *accessoryRoomUniqueIdentifier
 @property  NSString *accessoryRoomName
 @property  NSString *accessoryMediaRouteID
 @property  NSDictionary *serviceUUIDToServiceGroupUniqueIdentifier
 @property  NSDictionary *serviceUUIDToServiceGroupName
 @property  NSArray *accessoryZoneUniqueIdentifiers
 @property  NSArray *accessoryZoneNames
 @property  NSArray *characteristicsInRequest
 @property  NSArray *writtenValues
 @property  NSString *transactionIdentifier
 @property  NSString *clientMetricIdentifier
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToRead:hmdAccessory:hapAccessory:source:isLocal:transactionId:isCached:bundleId:]
  +[HMDCharacteristicReadWriteLogEvent eventWithCharacteristicsToWrite:hmdAccessory:hapAccessory:source:isTimedWrite:isLocal:transactionId:bundleId:writtenValues:]

  // instance methods
  -[HMDCharacteristicReadWriteLogEvent accessoryUUID]
  -[HMDCharacteristicReadWriteLogEvent accessoryName]
  -[HMDCharacteristicReadWriteLogEvent linkType]
  -[HMDCharacteristicReadWriteLogEvent setIsLocal:]
  -[HMDCharacteristicReadWriteLogEvent setLocal:]
  -[HMDCharacteristicReadWriteLogEvent eventName]
  -[HMDCharacteristicReadWriteLogEvent setTransportType:]
  -[HMDCharacteristicReadWriteLogEvent accessoryCategory]
  -[HMDCharacteristicReadWriteLogEvent userUUID]
  -[HMDCharacteristicReadWriteLogEvent .cxx_destruct]
  -[HMDCharacteristicReadWriteLogEvent transportType]
  -[HMDCharacteristicReadWriteLogEvent bundleId]
  -[HMDCharacteristicReadWriteLogEvent clientMetricIdentifier]
  -[HMDCharacteristicReadWriteLogEvent isLocal]
  -[HMDCharacteristicReadWriteLogEvent setLinkType:]
  -[HMDCharacteristicReadWriteLogEvent isCached]
  -[HMDCharacteristicReadWriteLogEvent setIsCached:]
  -[HMDCharacteristicReadWriteLogEvent homeName]
  -[HMDCharacteristicReadWriteLogEvent accessoryUniqueIdentifier]
  -[HMDCharacteristicReadWriteLogEvent homeUniqueIdentifier]
  -[HMDCharacteristicReadWriteLogEvent transactionIdentifier]
  -[HMDCharacteristicReadWriteLogEvent isRemoteAccessAllowed]
  -[HMDCharacteristicReadWriteLogEvent communicationProtocol]
  -[HMDCharacteristicReadWriteLogEvent accessoryModel]
  -[HMDCharacteristicReadWriteLogEvent primaryServiceType]
  -[HMDCharacteristicReadWriteLogEvent serializedEvent]
  -[HMDCharacteristicReadWriteLogEvent submitAtDate:]
  -[HMDCharacteristicReadWriteLogEvent biomeEventsRepresentationForLogObserver:]
  -[HMDCharacteristicReadWriteLogEvent isCurrentDevicePrimaryResident]
  -[HMDCharacteristicReadWriteLogEvent shouldTriggerMicroLocationRecordingScanForLogEventObserver:]
  -[HMDCharacteristicReadWriteLogEvent shouldTriggerMicroLocationLocalizationScanForLogEventObserver:]
  -[HMDCharacteristicReadWriteLogEvent microLocationMetadataForLogEventObserver:]
  -[HMDCharacteristicReadWriteLogEvent microLocationScanTriggerTypeForLogEventObserver:]
  -[HMDCharacteristicReadWriteLogEvent AWDMessageType]
  -[HMDCharacteristicReadWriteLogEvent metricForAWD]
  -[HMDCharacteristicReadWriteLogEvent isCurrentDeviceConfirmedPrimaryResident]
  -[HMDCharacteristicReadWriteLogEvent isCurrentDeviceAvailableResident]
  -[HMDCharacteristicReadWriteLogEvent setIsTimedWrite:]
  -[HMDCharacteristicReadWriteLogEvent setConsecutiveFailureCount:]
  -[HMDCharacteristicReadWriteLogEvent isTimedWrite]
  -[HMDCharacteristicReadWriteLogEvent transportProtocolVersion]
  -[HMDCharacteristicReadWriteLogEvent isResidentAvailable]
  -[HMDCharacteristicReadWriteLogEvent isRemotelyReachable]
  -[HMDCharacteristicReadWriteLogEvent consecutiveFailureCount]
  -[HMDCharacteristicReadWriteLogEvent isModernTransport]
  -[HMDCharacteristicReadWriteLogEvent accessoryFirmwareVersion]
  -[HMDCharacteristicReadWriteLogEvent accessoryManufacturer]
  -[HMDCharacteristicReadWriteLogEvent vendorDetailsForAWD]
  -[HMDCharacteristicReadWriteLogEvent isResidentFirstEnabled]
  -[HMDCharacteristicReadWriteLogEvent isThreadAccessory]
  -[HMDCharacteristicReadWriteLogEvent setThreadAccessory:]
  -[HMDCharacteristicReadWriteLogEvent vendorDetailsForCoreAnalytics]
  -[HMDCharacteristicReadWriteLogEvent setVendorDetailsForCoreAnalytics:]
  -[HMDCharacteristicReadWriteLogEvent triggerSource]
  -[HMDCharacteristicReadWriteLogEvent numAccessoriesInHome]
  -[HMDCharacteristicReadWriteLogEvent numNonEmptyScenesInHome]
  -[HMDCharacteristicReadWriteLogEvent isAtHome]
  -[HMDCharacteristicReadWriteLogEvent initWithCharacteristics:hmdAccessory:hapAccessory:source:isWriteOperation:isTimedWrite:isLocal:transactionId:isCached:bundleId:writtenValues:]
  -[HMDCharacteristicReadWriteLogEvent setResidentFirstDurationWithEndDate:]
  -[HMDCharacteristicReadWriteLogEvent accessoryCertificationStatus]
  -[HMDCharacteristicReadWriteLogEvent isWriteOperation]
  -[HMDCharacteristicReadWriteLogEvent isSentOverThread]
  -[HMDCharacteristicReadWriteLogEvent setIsSentOverThread:]
  -[HMDCharacteristicReadWriteLogEvent localDurationInMilliseconds]
  -[HMDCharacteristicReadWriteLogEvent setLocalDurationInMilliseconds:]
  -[HMDCharacteristicReadWriteLogEvent residentFirstDurationInMilliseconds]
  -[HMDCharacteristicReadWriteLogEvent setResidentFirstDurationInMilliseconds:]
  -[HMDCharacteristicReadWriteLogEvent totalDurationInMilliseconds]
  -[HMDCharacteristicReadWriteLogEvent setTotalDurationInMilliseconds:]
  -[HMDCharacteristicReadWriteLogEvent setIsResidentFirstEnabled:]
  -[HMDCharacteristicReadWriteLogEvent residentFirstError]
  -[HMDCharacteristicReadWriteLogEvent setResidentFirstError:]
  -[HMDCharacteristicReadWriteLogEvent setIsModernTransport:]
  -[HMDCharacteristicReadWriteLogEvent isSlowRapport]
  -[HMDCharacteristicReadWriteLogEvent setIsSlowRapport:]
  -[HMDCharacteristicReadWriteLogEvent isDeviceAtHome]
  -[HMDCharacteristicReadWriteLogEvent setIsDeviceAtHome:]
  -[HMDCharacteristicReadWriteLogEvent isPrimaryResidentReachable]
  -[HMDCharacteristicReadWriteLogEvent timeIntervalSinceFirstFailure]
  -[HMDCharacteristicReadWriteLogEvent setTimeIntervalSinceFirstFailure:]
  -[HMDCharacteristicReadWriteLogEvent accessoryRoomUniqueIdentifier]
  -[HMDCharacteristicReadWriteLogEvent accessoryRoomName]
  -[HMDCharacteristicReadWriteLogEvent accessoryMediaRouteID]
  -[HMDCharacteristicReadWriteLogEvent serviceUUIDToServiceGroupUniqueIdentifier]
  -[HMDCharacteristicReadWriteLogEvent serviceUUIDToServiceGroupName]
  -[HMDCharacteristicReadWriteLogEvent accessoryZoneUniqueIdentifiers]
  -[HMDCharacteristicReadWriteLogEvent accessoryZoneNames]
  -[HMDCharacteristicReadWriteLogEvent characteristicsInRequest]
  -[HMDCharacteristicReadWriteLogEvent writtenValues]


HMDSnapshotRequest : HMFObject
 @property  @? completion

  // instance methods
  -[HMDSnapshotRequest completion]
  -[HMDSnapshotRequest .cxx_destruct]
  -[HMDSnapshotRequest initWithCompletion:]


HMDHouseholdActivityLogEventContributor : HMDLogEventAnalyzer <HMDHouseholdActivityLogEventContributing>
 @property  NSString *householdGroupName
 @property  HMDEventCountersManager *countersManager
 @property  HMDMetricsDateProvider *dateProvider

  // class methods
  +[HMDHouseholdActivityLogEventContributor logCategory]

  // instance methods
  -[HMDHouseholdActivityLogEventContributor dateProvider]
  -[HMDHouseholdActivityLogEventContributor .cxx_destruct]
  -[HMDHouseholdActivityLogEventContributor countersManager]
  -[HMDHouseholdActivityLogEventContributor initWithHouseholdGroupName:countersManager:dateProvider:]
  -[HMDHouseholdActivityLogEventContributor populateLogEvent:forHomeWithUUID:associatedToDate:]
  -[HMDHouseholdActivityLogEventContributor contributeLogEvent:toSerializedMetric:]
  -[HMDHouseholdActivityLogEventContributor deserializeLogEvent:fromSerializedMetric:]
  -[HMDHouseholdActivityLogEventContributor contributeLogEvent:toCoreAnalyticsEvent:]
  -[HMDHouseholdActivityLogEventContributor coalesceLogEvent:fromSourceEvent:]
  -[HMDHouseholdActivityLogEventContributor finishCoalescingLogEvent:]
  -[HMDHouseholdActivityLogEventContributor deleteCountersBeforeDate:]
  -[HMDHouseholdActivityLogEventContributor deleteCountersAfterDate:]
  -[HMDHouseholdActivityLogEventContributor startCoalescingLogEvent:]
  -[HMDHouseholdActivityLogEventContributor householdGroupForHomeWithUUID:associatedWithDate:]
  -[HMDHouseholdActivityLogEventContributor householdGroupForLogEvent:]
  -[HMDHouseholdActivityLogEventContributor householdGroupName]


HMDNetworkRouterFirewallRuleCloudZoneFetchInfo : HMDNetworkRouterFirewallRuleManagerBackingStoreFetchHelper <HMFLogging>
 @property  NSSet *interestedRecordIDs
 @property  CKServerChangeToken *changeToken
 @property  CKServerChangeToken *originalChangeToken
 @property  HMBLocalZoneMirrorInput *mirrorInput
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo logCategory]

  // instance methods
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo finishWithError:]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo setChangeToken:]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo changeToken]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo initWithOptions:changeToken:promise:database:useAnonymousRequests:interestedRecordIDs:mirrorInput:]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo interestedRecordIDs]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo originalChangeToken]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo mirrorInput]
  -[HMDNetworkRouterFirewallRuleCloudZoneFetchInfo setMirrorInput:]


HMDNetworkRouterFirewallRuleCloudZone : HMBCloudZone
 @property  BOOL useAnonymousRequests
 @property  NSSet *watchedRecordIDs
 @property  NSArray *signatureVerificationPublicKeys
 @property  NSSet *modifiedRecordIDsFromLastPull
 @property  NSMutableSet *uncommittedModifiedRecordIDsFromLastPull

  // class methods
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeFromPreferenceWithKey:defaultValue:]
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeForCKRecordNetworkDeclarations]
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeForCKRecordNetworkDeclarationsSignature]
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeForCKRecordPairedMetadata]
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeForCKRecordPairedMetadataSignature]
  +[HMDNetworkRouterFirewallRuleCloudZone __maxSizeForCKRecordString]
  +[HMDNetworkRouterFirewallRuleCloudZone __createBaseAccessoryIdentifierFromRecord:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone __calculateDigestDataFromRecord:dataKey:dataAssetKey:maxDataSize:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone __getSignatureDataFromRecord:signatureKey:signatureAssetKey:maxSignatureSize:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone __verifyDigestDataAgainstSignatureFromRecord:digestData:signatureData:signatureVerificationPublicKeys:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone __getDataFromRecord:dataKey:dataAssetKey:maxDataSize:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone __verifyDataFromRecord:signatureVerificationPublicKeys:dataKey:dataAssetKey:maxDataSize:signatureKey:signatureAssetKey:maxSignatureSize:baseAccessoryIdentifier:data:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone verifyNetworkDeclarationsFromRecord:signatureVerificationPublicKeys:baseAccessoryIdentifier:data:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone verifyNetworkDeclarationsFromRecord:signatureVerificationPublicKeys:error:]
  +[HMDNetworkRouterFirewallRuleCloudZone verifyPairedMetadataFromRecord:signatureVerificationPublicKeys:error:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleCloudZone attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleCloudZone .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleCloudZone startUpWithLocalZone:]
  -[HMDNetworkRouterFirewallRuleCloudZone performCloudPullWithFetchToken:options:]
  -[HMDNetworkRouterFirewallRuleCloudZone decodeModelFrom:recordSource:error:]
  -[HMDNetworkRouterFirewallRuleCloudZone signatureVerificationPublicKeys]
  -[HMDNetworkRouterFirewallRuleCloudZone useAnonymousRequests]
  -[HMDNetworkRouterFirewallRuleCloudZone initWithCloudDatabase:state:useAnonymousRequests:watchedRecordIDs:signatureVerificationPublicKeys:]
  -[HMDNetworkRouterFirewallRuleCloudZone modifiedRecordIDsFromLastPull]
  -[HMDNetworkRouterFirewallRuleCloudZone setModifiedRecordIDsFromLastPull:]
  -[HMDNetworkRouterFirewallRuleCloudZone uncommittedModifiedRecordIDsFromLastPull]
  -[HMDNetworkRouterFirewallRuleCloudZone setUncommittedModifiedRecordIDsFromLastPull:]
  -[HMDNetworkRouterFirewallRuleCloudZone __fetchZoneChangesWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __noteUpdatedRecordID:]
  -[HMDNetworkRouterFirewallRuleCloudZone __finalizeUpdatedRecordIDs]
  -[HMDNetworkRouterFirewallRuleCloudZone __recordChanged:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __recordDeleted:recordType:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __zoneChangeTokensUpdated:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __zoneFetchCompletedWithChangeToken:error:moreComing:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __zoneChangesCompleted:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __commitLocalChanges:error:]
  -[HMDNetworkRouterFirewallRuleCloudZone __canRecoverFromError:fetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone __retryFetchWithFetchInfo:]
  -[HMDNetworkRouterFirewallRuleCloudZone watchedRecordIDs]


HMDAccessCodeDataManager : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  <HMDAccessCodeDataManagerDelegate> *delegate
 @property  HMDAccessCodeManagerContext *context
 @property  NSArray *homeAccessCodeValuesWithSimpleLabels
 @property  NSArray *homeAccessCodeValuesWithUserLabels
 @property  NSArray *homeAccessCodeValuesWithRemovedUserInfo
 @property  HMFTimer *dataCleanUpTimer
 @property  NSArray *homeAccessCodeValues
 @property  NSSet *accessCodeValuesWithUserLabel
 @property  NSSet *accessCodeValuesWithSimpleLabel
 @property  NSSet *accessCodeValuesWithRemovedUserInfo
 @property  NSArray *cachedAccessCodes
 @property  @? dataCleanUpTimerFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessCodeDataManager logCategory]
  +[HMDAccessCodeDataManager createHomeAccessCodeModelsFromLabelsByAccessCode:forHome:]
  +[HMDAccessCodeDataManager createRemovedUserInfoModelsFromRemovedUserInfoByAccessCode:forHome:]
  +[HMDAccessCodeDataManager createUserAccessCodeModelFromAccessCode:forUserUUID:changedByUserUUID:]
  +[HMDAccessCodeDataManager userWithAccessCode:inHome:]
  +[HMDAccessCodeDataManager _accessCodeInHome:forHomeAccessCodeModel:]
  +[HMDAccessCodeDataManager _accessCodeInHome:forRemovedUserAccessCodeModel:]

  // instance methods
  -[HMDAccessCodeDataManager configure]
  -[HMDAccessCodeDataManager timerDidFire:]
  -[HMDAccessCodeDataManager logIdentifier]
  -[HMDAccessCodeDataManager delegate]
  -[HMDAccessCodeDataManager .cxx_destruct]
  -[HMDAccessCodeDataManager context]
  -[HMDAccessCodeDataManager initWithContext:delegate:]
  -[HMDAccessCodeDataManager homeAccessCodeValues]
  -[HMDAccessCodeDataManager homeAccessCodeValuesWithSimpleLabels]
  -[HMDAccessCodeDataManager homeAccessCodeValuesWithUserLabels]
  -[HMDAccessCodeDataManager homeAccessCodeValuesWithRemovedUserInfo]
  -[HMDAccessCodeDataManager homeAccessCodeWithRemovedUserInfoWithUUID:]
  -[HMDAccessCodeDataManager setUserInformation:forHomeAccessCodeWithValue:changedByUserUUID:]
  -[HMDAccessCodeDataManager removeHomeAccessCodeWithValue:removedByUserUUID:]
  -[HMDAccessCodeDataManager updateUserInformation:forHomeAccessCodeWithOldValue:newAccessCodeValue:]
  -[HMDAccessCodeDataManager removeAllHomeAccessCodes]
  -[HMDAccessCodeDataManager _setUpAndStartTimer]
  -[HMDAccessCodeDataManager _setUserWithUUID:forAccessCodeValue:changedByUserUUID:]
  -[HMDAccessCodeDataManager _removeUserAccessCodeValue:removedByUserUUID:]
  -[HMDAccessCodeDataManager _setSimpleLabel:forAccessCodeValue:]
  -[HMDAccessCodeDataManager _removeSimpleLabelAccessCodeValue:]
  -[HMDAccessCodeDataManager _cleanUpOldRemovedUserData]
  -[HMDAccessCodeDataManager removeHMDRemovedUserAccessCodeWithAccessCode:]
  -[HMDAccessCodeDataManager _removeHMDRemovedUserAccessCodeWithAccessCode:]
  -[HMDAccessCodeDataManager accessCodeValuesWithSimpleLabel]
  -[HMDAccessCodeDataManager accessCodeValuesWithUserLabel]
  -[HMDAccessCodeDataManager accessCodeValuesWithRemovedUserInfo]
  -[HMDAccessCodeDataManager addOrUpdateUserAccessCodeModel:]
  -[HMDAccessCodeDataManager removeUserAccessCodeModel:]
  -[HMDAccessCodeDataManager addOrUpdateHomeAccessCodeModel:]
  -[HMDAccessCodeDataManager removeHomeAccessCodeModel:]
  -[HMDAccessCodeDataManager saveRemovedUserAccessCode:withRemovedUserInfo:]
  -[HMDAccessCodeDataManager removeHMDRemovedUserAccessCodeWithCode:removedUserInfo:]
  -[HMDAccessCodeDataManager addOrUpdateHMDRemovedUserAccessCodeModel:]
  -[HMDAccessCodeDataManager removeHMDRemovedUserAccessCodeModel:]
  -[HMDAccessCodeDataManager handleUpdatedUserAccessCodeModel:forUser:message:]
  -[HMDAccessCodeDataManager handleUpdatedHomeAccessCodeModel:message:]
  -[HMDAccessCodeDataManager handleRemovedUserAccessCodeModel:forUser:message:]
  -[HMDAccessCodeDataManager handleRemovedHomeAccessCodeModel:message:]
  -[HMDAccessCodeDataManager handleUpdatedHMDRemovedUserAccessCodeModel:message:]
  -[HMDAccessCodeDataManager handleRemovedHMDRemovedUserAccessCodeModel:message:]
  -[HMDAccessCodeDataManager cachedAccessCodes]
  -[HMDAccessCodeDataManager cachedAccessCodeForIdentifier:accessoryUUID:]
  -[HMDAccessCodeDataManager updateCacheWithFetchResponses:]
  -[HMDAccessCodeDataManager updateCacheWithAddedAccessCodes:]
  -[HMDAccessCodeDataManager updateCacheWithUpdatedAccessCodes:]
  -[HMDAccessCodeDataManager updateCacheWithRemovedAccessCodes:]
  -[HMDAccessCodeDataManager dataCleanUpTimerFactory]
  -[HMDAccessCodeDataManager setDataCleanUpTimerFactory:]
  -[HMDAccessCodeDataManager dataCleanUpTimer]
  -[HMDAccessCodeDataManager setDataCleanUpTimer:]


HMDUserDataControllerTimerCreator : NSObject <HMDUserDataControllerTimerCreator>
  // instance methods
  -[HMDUserDataControllerTimerCreator createExponentialBackoffTimerForZoneFetch]


HMDUserDataController : NSObject <HMDAssistantAccessControlModelUpdateReceiver, HMDMediaContentProfileAccessControlModelUpdateReceiver, HMDUserListeningHistoryUpdateControlModelUpdateReceiver, HMDSharedUserDataModelUpdateReceiver, HMDUserSupportsAutomaticHH2MigrationModelUpdateReceiver, HMFLogging, HMFTimerDelegate>
 @property  NSUUID *homeUUID
 @property  NSUUID *userUUID
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  <HMDUserDataControllerDelegate> *delegate
 @property  <HMDUserDataControllerDataSource> *dataSource
 @property  <HMDUserDataControllerTimerCreator> *timerCreator
 @property  NSUUID *sharedSettingsRootUUID
 @property  NSUUID *assistantAccessControlModelUUID
 @property  NSMutableSet *assistantAccessControlAccessoryUUIDs
 @property  BOOL assistantAccessControlRequiresAuthenticationForSecureRequests
 @property  BOOL assistantAccessControlActivityNotificationsEnabledForPersonalRequests
 @property  NSUUID *mediaContentProfileAccessControlModelUUID
 @property  NSMutableSet *mediaContentProfileAccessControlAccessories
 @property  NSUUID *userListeningHistoryUpdateControlModelUUID
 @property  NSMutableSet *userListeningHistoryUpdateControlModelAccessories
 @property  NSUUID *supportsAutomaticHH2MigrationModelUUID
 @property  BOOL supportsAutomaticHH2Migration
 @property  NSUUID *privateSettingsRootUUID
 @property  unsigned long state
 @property  HMFTimer *sharedZoneFirstLoadTimer
 @property  HMFTimer *privateZoneFirstLoadTimer
 @property  NSNotificationCenter *notificationCenter
 @property  BOOL isCurrentUser
 @property  <HMDSettingsControllerProtocol> *sharedSettingsController
 @property  <HMDSettingsControllerProtocol> *privateSettingsController
 @property  NSArray *assistantAccessControlAccessoriesToEncode
 @property  NSArray *mediaContentProfileAccessControlAccessoriesToEncode
 @property  NSArray *userListeningHistoryUpdateControlModelAccessoriesToEncode
 @property  NSDictionary *sharedSettingValuesByKeyPath
 @property  NSDictionary *privateSettingValuesByKeyPath
 @property  HMBModel *assistantAccessControlModelToReset
 @property  BOOL isInitialized
 @property  BOOL isRecognizeMyVoiceEnabled
 @property  BOOL hasUserSeenRMVNewLanguageNotification
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserDataController logCategory]

  // instance methods
  -[HMDUserDataController notificationCenter]
  -[HMDUserDataController configure]
  -[HMDUserDataController timerDidFire:]
  -[HMDUserDataController isInitialized]
  -[HMDUserDataController setNotificationCenter:]
  -[HMDUserDataController logIdentifier]
  -[HMDUserDataController dataSource]
  -[HMDUserDataController clientQueue]
  -[HMDUserDataController encodeWithCoder:]
  -[HMDUserDataController delegate]
  -[HMDUserDataController state]
  -[HMDUserDataController userUUID]
  -[HMDUserDataController .cxx_destruct]
  -[HMDUserDataController homeUUID]
  -[HMDUserDataController setState:]
  -[HMDUserDataController isCurrentUser]
  -[HMDUserDataController privateSettingsController]
  -[HMDUserDataController handleRemovedAccessory:]
  -[HMDUserDataController supportsAutomaticHH2Migration]
  -[HMDUserDataController assistantAccessControlModelUUID]
  -[HMDUserDataController mediaContentProfileAccessControlModelUUID]
  -[HMDUserDataController userListeningHistoryUpdateControlModelUUID]
  -[HMDUserDataController supportsAutomaticHH2MigrationModelUUID]
  -[HMDUserDataController isRecognizeMyVoiceEnabled]
  -[HMDUserDataController assistantAccessControlModelUpdated:previousModel:completion:]
  -[HMDUserDataController assistantAccessControlModelRemoved:completion:]
  -[HMDUserDataController mediaContentProfileAccessControlModelUpdated:previousModel:completion:]
  -[HMDUserDataController mediaContentProfileAccessControlModelRemoved:completion:]
  -[HMDUserDataController userListeningHistoryUpdateControlModelUpdated:previousModel:completion:]
  -[HMDUserDataController userListeningHistoryUpdateControlModelRemoved:completion:]
  -[HMDUserDataController sharedUserDataModelUpdated:previousModel:completion:]
  -[HMDUserDataController userSupportsAutomaticHH2MigrationModelUpdated:previousModel:completion:]
  -[HMDUserDataController userSupportsAutomaticHH2MigrationModelRemoved:completion:]
  -[HMDUserDataController initWithDelegate:dataSource:queue:userID:homeID:sharedSettingsController:privateSettingsController:timerCreator:isCurrentUser:]
  -[HMDUserDataController initWithDelegate:dataSource:queue:userID:homeID:sharedSettingsController:privateSettingsController:isCurrentUser:]
  -[HMDUserDataController assistantAccessControlAccessoriesToEncode]
  -[HMDUserDataController mediaContentProfileAccessControlAccessoriesToEncode]
  -[HMDUserDataController userListeningHistoryUpdateControlModelAccessoriesToEncode]
  -[HMDUserDataController eventDidInitializePrivateZone]
  -[HMDUserDataController eventDidInitializeSharedZone]
  -[HMDUserDataController initializeSharedZoneController:userDataModel:]
  -[HMDUserDataController _migrateUserListeningHistoryUpdateControlWithUserCurrentDataModel:transaction:settingModels:]
  -[HMDUserDataController _userListeningHistoryValueFromModels:]
  -[HMDUserDataController _keyPathToModelFromKeyPath:models:]
  -[HMDUserDataController _migrateUserSupportsAutomaticHH2MigrationUserCurrentDataModel:transaction:]
  -[HMDUserDataController initializePrivateZoneController:userDataModel:]
  -[HMDUserDataController performFirstRunOperationsOnSharedZoneController:]
  -[HMDUserDataController _startSharedZoneFirstLoadTimer]
  -[HMDUserDataController _invalidateSharedZoneFirstLoadTimer]
  -[HMDUserDataController performFirstRunOperationsOnPrivateZoneController:]
  -[HMDUserDataController _startPrivateZoneFirstLoadTimer]
  -[HMDUserDataController _invalidatePrivateZoneFirstLoadTimer]
  -[HMDUserDataController _startupSharedZone]
  -[HMDUserDataController _startupPrivateZone]
  -[HMDUserDataController handleStartForZoneController:]
  -[HMDUserDataController handleAssistantAccessControlAccessoryUUIDsUpdated:requireAuthenticationForSecureRequests:activityNotificationsEnabledForPersonalRequests:completion:]
  -[HMDUserDataController handleMediaContentProfileAccessControlUpdatedAccessoryUUIDs:completion:]
  -[HMDUserDataController handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:completion:]
  -[HMDUserDataController updateSupportsAutomaticHH2Migration:completion:]
  -[HMDUserDataController assistantAccessControlModelToReset]
  -[HMDUserDataController updateListeningHistoryModelToReset]
  -[HMDUserDataController sharedSettingValuesByKeyPath]
  -[HMDUserDataController privateSettingValuesByKeyPath]
  -[HMDUserDataController hasUserSeenRMVNewLanguageNotification]
  -[HMDUserDataController setHasUserSeenRMVNewLanguageNotification:]
  -[HMDUserDataController sharedUserSettingsLogEventBackingStoreControllerRunState]
  -[HMDUserDataController assistantAccessControlRequiresAuthenticationForSecureRequests]
  -[HMDUserDataController setAssistantAccessControlRequiresAuthenticationForSecureRequests:]
  -[HMDUserDataController assistantAccessControlActivityNotificationsEnabledForPersonalRequests]
  -[HMDUserDataController setAssistantAccessControlActivityNotificationsEnabledForPersonalRequests:]
  -[HMDUserDataController setSupportsAutomaticHH2Migration:]
  -[HMDUserDataController timerCreator]
  -[HMDUserDataController sharedSettingsRootUUID]
  -[HMDUserDataController setSharedSettingsRootUUID:]
  -[HMDUserDataController setAssistantAccessControlModelUUID:]
  -[HMDUserDataController assistantAccessControlAccessoryUUIDs]
  -[HMDUserDataController setAssistantAccessControlAccessoryUUIDs:]
  -[HMDUserDataController setMediaContentProfileAccessControlModelUUID:]
  -[HMDUserDataController mediaContentProfileAccessControlAccessories]
  -[HMDUserDataController setMediaContentProfileAccessControlAccessories:]
  -[HMDUserDataController setUserListeningHistoryUpdateControlModelUUID:]
  -[HMDUserDataController userListeningHistoryUpdateControlModelAccessories]
  -[HMDUserDataController setUserListeningHistoryUpdateControlModelAccessories:]
  -[HMDUserDataController setSupportsAutomaticHH2MigrationModelUUID:]
  -[HMDUserDataController privateSettingsRootUUID]
  -[HMDUserDataController setPrivateSettingsRootUUID:]
  -[HMDUserDataController sharedZoneFirstLoadTimer]
  -[HMDUserDataController setSharedZoneFirstLoadTimer:]
  -[HMDUserDataController privateZoneFirstLoadTimer]
  -[HMDUserDataController setPrivateZoneFirstLoadTimer:]
  -[HMDUserDataController sharedSettingsController]


HMDIDSMessageContext : HMFObject
 @property  NSUUID *identifier
 @property  HMFMessageDestination *destination
 @property  NSDictionary *userInfo

  // instance methods
  -[HMDIDSMessageContext identifier]
  -[HMDIDSMessageContext destination]
  -[HMDIDSMessageContext userInfo]
  -[HMDIDSMessageContext .cxx_destruct]
  -[HMDIDSMessageContext init]
  -[HMDIDSMessageContext initWithIdentifier:destination:userInfo:]


HMDHomeKitVersion : HMFVersion <NSCopying, NSSecureCoding>
  // class methods
  +[HMDHomeKitVersion currentVersion]


HMDNetworkRouterFirewallRuleWANAddressRange : HMFObject
 @property  HMFNetAddress *addressStart
 @property  HMFNetAddress *addressEnd

  // instance methods
  -[HMDNetworkRouterFirewallRuleWANAddressRange attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleWANAddressRange .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleWANAddressRange isEqual:]
  -[HMDNetworkRouterFirewallRuleWANAddressRange prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleWANAddressRange initWithAddressStart:addressEnd:]
  -[HMDNetworkRouterFirewallRuleWANAddressRange addressStart]
  -[HMDNetworkRouterFirewallRuleWANAddressRange addressEnd]


HMDNetworkRouterFirewallRuleWANSubject : HMFObject
 @property  NSArray *hostnames
 @property  NSArray *addresses
 @property  HMDNetworkRouterFirewallRuleWANAddressRange *addressRange

  // instance methods
  -[HMDNetworkRouterFirewallRuleWANSubject attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleWANSubject .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleWANSubject addressRange]
  -[HMDNetworkRouterFirewallRuleWANSubject isEqual:]
  -[HMDNetworkRouterFirewallRuleWANSubject addresses]
  -[HMDNetworkRouterFirewallRuleWANSubject hostnames]
  -[HMDNetworkRouterFirewallRuleWANSubject prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleWANSubject initWithHostnames:addresses:addressRange:]


HMDNetworkRouterFirewallRuleWAN : HMDNetworkRouterFirewallRule
 @property  unsigned long purpose
 @property  unsigned char transportProtocol
 @property  HMDNetworkRouterFirewallRuleWANSubject *subject
 @property  unsigned short portStart
 @property  unsigned short portEnd
 @property  NSArray *icmpTypes

  // class methods
  +[HMDNetworkRouterFirewallRuleWAN createWithJSONDictionary:error:]
  +[HMDNetworkRouterFirewallRuleWAN ipAddressAnyIPv4]
  +[HMDNetworkRouterFirewallRuleWAN ipAddressAnyIPv6]
  +[HMDNetworkRouterFirewallRuleWAN ipAddressAny]
  +[HMDNetworkRouterFirewallRuleWAN __decodePurpose:purpose:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeFlags:critical:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeType:transportProtocol:error:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeHostnames:subject:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeAddress:subject:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeAddresses:subject:]
  +[HMDNetworkRouterFirewallRuleWAN __nonWildcardAddressFrom:key:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeAddressRange:endValue:subject:]
  +[HMDNetworkRouterFirewallRuleWAN __decodeSubject:subject:]
  +[HMDNetworkRouterFirewallRuleWAN __decodePorts:portStart:portEnd:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleWAN subject]
  -[HMDNetworkRouterFirewallRuleWAN purpose]
  -[HMDNetworkRouterFirewallRuleWAN attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleWAN .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleWAN transportProtocol]
  -[HMDNetworkRouterFirewallRuleWAN isEqual:]
  -[HMDNetworkRouterFirewallRuleWAN prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleWAN icmpTypes]
  -[HMDNetworkRouterFirewallRuleWAN initWithJSONDictionary:name:critical:purpose:transportProtocol:subject:portStart:portEnd:icmpTypes:]
  -[HMDNetworkRouterFirewallRuleWAN portStart]
  -[HMDNetworkRouterFirewallRuleWAN portEnd]


HMDCloudZoneChange : HMFObject
 @property  NSUUID *identifier
 @property  HMDCloudZone *cloudZone
 @property  HMDCloudGroupChange *rootGroupChange
 @property  CKRecordID *privateZoneRootRecordID
 @property  NSArray *allTransactionStoreRowIDs
 @property  NSArray *processedTransactionStoreRowIDs
 @property  BOOL temporaryCache
 @property  BOOL decryptionFailed
 @property  BOOL encryptionFailed
 @property  BOOL controllerIdentifierChanged
 @property  NSArray *objectChanges
 @property  BOOL hasValidChanges
 @property  BOOL doRecordsExistInCache

  // class methods
  +[HMDCloudZoneChange shortDescription]

  // instance methods
  -[HMDCloudZoneChange identifier]
  -[HMDCloudZoneChange .cxx_destruct]
  -[HMDCloudZoneChange cloudZone]
  -[HMDCloudZoneChange shortDescription]
  -[HMDCloudZoneChange init]
  -[HMDCloudZoneChange setCloudZone:]
  -[HMDCloudZoneChange allTransactionStoreRowIDs]
  -[HMDCloudZoneChange hasValidChanges]
  -[HMDCloudZoneChange processedTransactionStoreRowIDs]
  -[HMDCloudZoneChange changeWithObjectID:]
  -[HMDCloudZoneChange cachedCloudRecordWithObjectID:completionHandler:]
  -[HMDCloudZoneChange cachedCloudRecordWithObjectID:]
  -[HMDCloudZoneChange doRecordsExistInCache]
  -[HMDCloudZoneChange changeWithRecordName:]
  -[HMDCloudZoneChange addChangeWithObjectChange:]
  -[HMDCloudZoneChange addChangeWithRecord:]
  -[HMDCloudZoneChange addChangeWithDeletedRecordID:]
  -[HMDCloudZoneChange loadCloudRecordsAndDetermineDeletesFromCache:]
  -[HMDCloudZoneChange moreChangesToProcess]
  -[HMDCloudZoneChange setAllChangedAsProcessed]
  -[HMDCloudZoneChange removeChangeWithObjectID:]
  -[HMDCloudZoneChange fetchBatchToUpload:]
  -[HMDCloudZoneChange setSaveAsProcessedWithRecord:]
  -[HMDCloudZoneChange resetRecordWithRecordID:]
  -[HMDCloudZoneChange setDeleteAsProcessedWithRecordID:]
  -[HMDCloudZoneChange flushAllChangesToCache]
  -[HMDCloudZoneChange objectChanges]
  -[HMDCloudZoneChange isTemporaryCache]
  -[HMDCloudZoneChange decryptionFailed]
  -[HMDCloudZoneChange encryptionFailed]
  -[HMDCloudZoneChange controllerIdentifierChanged]
  -[HMDCloudZoneChange privateZoneRootRecordID]
  -[HMDCloudZoneChange initWithZone:temporaryCache:]
  -[HMDCloudZoneChange doesRecordExistWithObjectID:]
  -[HMDCloudZoneChange doesRecordExistInCacheWithObjectID:]
  -[HMDCloudZoneChange rootGroupChange]
  -[HMDCloudZoneChange setRootGroupChange:]


HMDCloudLegacyZoneChange : HMDCloudZoneChange
  // instance methods
  -[HMDCloudLegacyZoneChange decryptionFailed]
  -[HMDCloudLegacyZoneChange controllerIdentifierChanged]
  -[HMDCloudLegacyZoneChange initWithZone:temporaryCache:]


HMDCloudMetadataZoneChange : HMDCloudZoneChange
  // instance methods
  -[HMDCloudMetadataZoneChange initWithZone:temporaryCache:]


HMDCloudHomeManagerZoneChange : HMDCloudZoneChange
  // instance methods
  -[HMDCloudHomeManagerZoneChange initWithZone:temporaryCache:]


HMDCloudHomeZoneChange : HMDCloudZoneChange
  // instance methods
  -[HMDCloudHomeZoneChange initWithZone:temporaryCache:]


HMDAccessorySettingsEventHelper : NSObject
  // instance methods
  -[HMDAccessorySettingsEventHelper .cxx_destruct]
  -[HMDAccessorySettingsEventHelper init]
  -[HMDAccessorySettingsEventHelper initWithKeyPathMap:keyPathList:]
  -[HMDAccessorySettingsEventHelper remoteUserAccessControlForTopic:]
  -[HMDAccessorySettingsEventHelper remoteDeviceAccessControlForTopic:]
  -[HMDAccessorySettingsEventHelper allTopicsForHome:accessory:]
  -[HMDAccessorySettingsEventHelper remoteEventAllowedForKeyPath:deviceType:userType:]


HMDCameraStreamControlManager : HMFObject <HMFLogging>
 @property  <HMDCameraStreamControlManagerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  HMDAccessory *accessory
 @property  HMDService *streamManagementService
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraStreamSessionID *sessionID
 @property  HMDCameraStreamSnapshotHandler *streamSnapshotHandler
 @property  HMDCameraStreamMetrics *streamMetrics
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamControlManager logCategory]

  // instance methods
  -[HMDCameraStreamControlManager accessory]
  -[HMDCameraStreamControlManager logIdentifier]
  -[HMDCameraStreamControlManager setDelegate:]
  -[HMDCameraStreamControlManager sessionID]
  -[HMDCameraStreamControlManager setAccessory:]
  -[HMDCameraStreamControlManager workQueue]
  -[HMDCameraStreamControlManager delegate]
  -[HMDCameraStreamControlManager .cxx_destruct]
  -[HMDCameraStreamControlManager delegateQueue]
  -[HMDCameraStreamControlManager managerProtocol]
  -[HMDCameraStreamControlManager _callStreamStoppedWithError:]
  -[HMDCameraStreamControlManager streamSnapshotHandler]
  -[HMDCameraStreamControlManager initWithSessionID:workQueue:streamSnapshotHandler:delegate:delegateQueue:accessory:streamManagementService:isLocal:]
  -[HMDCameraStreamControlManager streamMetrics]
  -[HMDCameraStreamControlManager _cleanUpStreamSessionWithError:]
  -[HMDCameraStreamControlManager streamManagementService]
  -[HMDCameraStreamControlManager _reportErrorCode:]
  -[HMDCameraStreamControlManager _reportInternalErrorCode:]
  -[HMDCameraStreamControlManager _callStreamNegotiated:]
  -[HMDCameraStreamControlManager _callStreamRemoteConnectionSetup]
  -[HMDCameraStreamControlManager _callStreamStarted]
  -[HMDCameraStreamControlManager _callStreamFirstFrameReceived]
  -[HMDCameraStreamControlManager _callStreamReconfigured]


HMDAccessoryVersion : HMFSoftwareVersion <NSCopying, NSSecureCoding>
 @property  NSString *rawVersionString

  // class methods
  +[HMDAccessoryVersion supportsSecureCoding]

  // instance methods
  -[HMDAccessoryVersion encodeWithCoder:]
  -[HMDAccessoryVersion .cxx_destruct]
  -[HMDAccessoryVersion initWithCoder:]
  -[HMDAccessoryVersion initWithVersionString:]
  -[HMDAccessoryVersion rawVersionString]


HMDCameraSnapshotIDSStreamReceiver : HMDCameraSnapshotIDSStream <IDSServiceDelegate, IDSSessionDelegate, HMFLogging>
 @property  IDSSession *idsSession
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <HMDCameraSnapshotIDSStreamReceiverDelegate> *delegate
 @property  HMDSnapshotFile *snapshotFile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSStreamReceiver logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSStreamReceiver logIdentifier]
  -[HMDCameraSnapshotIDSStreamReceiver setDelegate:]
  -[HMDCameraSnapshotIDSStreamReceiver delegate]
  -[HMDCameraSnapshotIDSStreamReceiver setDelegateQueue:]
  -[HMDCameraSnapshotIDSStreamReceiver dealloc]
  -[HMDCameraSnapshotIDSStreamReceiver .cxx_destruct]
  -[HMDCameraSnapshotIDSStreamReceiver delegateQueue]
  -[HMDCameraSnapshotIDSStreamReceiver service:account:incomingResourceAtURL:metadata:fromID:context:]
  -[HMDCameraSnapshotIDSStreamReceiver snapshotFile]
  -[HMDCameraSnapshotIDSStreamReceiver idsSession]
  -[HMDCameraSnapshotIDSStreamReceiver setIdsSession:]
  -[HMDCameraSnapshotIDSStreamReceiver initWithSessionID:workQueue:snapshotFile:delegate:queue:]
  -[HMDCameraSnapshotIDSStreamReceiver _callFileReceived:]


HMDCameraClipManager : HMFObject <HMBLocalZoneModelObserver, HMFLogging, HMFMessageReceiver, HMDDatabaseZoneManagerDataSource, HMDDatabaseZoneManagerDelegate, HMDActiveXPCClientConnectionsPeriodicTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDDatabaseZoneManager *zoneManager
 @property  HMDCameraClipsQuotaManager *quotaManager
 @property  HMDCameraSignificantEventFaceClassificationResolver *faceClassificationResolver
 @property  HMDActiveXPCClientConnectionsPeriodicTimer *clientConnectionsTimer
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *cameraProfileUUID
 @property  <HMDFileManager> *fileManager
 @property  NSString *logIdentifier
 @property  HMDFeaturesDataSource *featuresDataSource
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  HMDCameraClipFeedbackManager *feedbackManager
 @property  NSDate *suppressNotificationsBeforeDate
 @property  unsigned long fetchBatchLimit
 @property  @? fetchServerFactory
 @property  <HMDCameraClipManagerDelegate> *delegate
 @property  BOOL hasWriteAccess
 @property  BOOL hasStartedUpCloudZone
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraClipManager logCategory]
  +[HMDCameraClipManager maximumClipDuration]

  // instance methods
  -[HMDCameraClipManager configure]
  -[HMDCameraClipManager home]
  -[HMDCameraClipManager logIdentifier]
  -[HMDCameraClipManager remove]
  -[HMDCameraClipManager setDelegate:]
  -[HMDCameraClipManager workQueue]
  -[HMDCameraClipManager delegate]
  -[HMDCameraClipManager .cxx_destruct]
  -[HMDCameraClipManager cloudZone]
  -[HMDCameraClipManager messageTargetUUID]
  -[HMDCameraClipManager zoneManager]
  -[HMDCameraClipManager localZone:didProcessModelDeletion:]
  -[HMDCameraClipManager localZone:didProcessModelUpdate:]
  -[HMDCameraClipManager fileManager]
  -[HMDCameraClipManager localZone:didProcessModelCreation:]
  -[HMDCameraClipManager localZone]
  -[HMDCameraClipManager messageReceiveQueue]
  -[HMDCameraClipManager messageDispatcher]
  -[HMDCameraClipManager cameraProfileUUID]
  -[HMDCameraClipManager setCloudZone:]
  -[HMDCameraClipManager setLocalZone:]
  -[HMDCameraClipManager hasWriteAccess]
  -[HMDCameraClipManager manager:shouldShareWithUser:]
  -[HMDCameraClipManager manager:shouldGrantWriteAccessToUser:]
  -[HMDCameraClipManager areShareModificationsEnabledForManager:]
  -[HMDCameraClipManager zoneManager:shouldRequestShareInvitationFromUser:]
  -[HMDCameraClipManager zoneManagerDidStart:]
  -[HMDCameraClipManager zoneManagerDidStop:]
  -[HMDCameraClipManager zoneManager:didReceiveMessageWithUserInfo:]
  -[HMDCameraClipManager featuresDataSource]
  -[HMDCameraClipManager handleSubscribeMessage:]
  -[HMDCameraClipManager handleUnsubscribeMessage:]
  -[HMDCameraClipManager handleUserCamerasAccessLevelDidChangeNotification:]
  -[HMDCameraClipManager handleUserRemoteAccessDidChangeNotification:]
  -[HMDCameraClipManager handleHomePersonManagerSettingsDidChangeNotification:]
  -[HMDCameraClipManager submitLogEvent:error:]
  -[HMDCameraClipManager faceClassificationResolver]
  -[HMDCameraClipManager handleUserPrivilegeDidChangeNotification:]
  -[HMDCameraClipManager performCloudPull]
  -[HMDCameraClipManager fetchBatchLimit]
  -[HMDCameraClipManager setFetchBatchLimit:]
  -[HMDCameraClipManager handlePerformCloudPullMessage:]
  -[HMDCameraClipManager suppressNotificationsBeforeDate]
  -[HMDCameraClipManager setSuppressNotificationsBeforeDate:]
  -[HMDCameraClipManager clientConnectionsTimerDidFire:]
  -[HMDCameraClipManager clientConnectionsTimer]
  -[HMDCameraClipManager fetchServerFactory]
  -[HMDCameraClipManager setFetchServerFactory:]
  -[HMDCameraClipManager handleFetchVideoSegmentsAssetContextMessage:]
  -[HMDCameraClipManager handleFetchClipMessage:]
  -[HMDCameraClipManager handleFetchClipsMessage:]
  -[HMDCameraClipManager handleFetchClipForSignificantEventMessage:]
  -[HMDCameraClipManager handleFetchCountOfClipsMessage:]
  -[HMDCameraClipManager handleFetchHeroFrameDataRepresentationMessage:]
  -[HMDCameraClipManager handleFetchHeroFrameURLMessage:]
  -[HMDCameraClipManager handleFetchFaceCropDataRepresentationMessage:]
  -[HMDCameraClipManager handleFetchFaceCropURLMessage:]
  -[HMDCameraClipManager handleFetchSignificantEventsMessage:]
  -[HMDCameraClipManager handleDeleteClipMessage:]
  -[HMDCameraClipManager handleDeleteAllClipsMessage:]
  -[HMDCameraClipManager handleHandleFaceMisclassificationMessage:]
  -[HMDCameraClipManager handleRemoteHandleFaceMisclassificationMessage:]
  -[HMDCameraClipManager handleImportClipsMessage:]
  -[HMDCameraClipManager initWithHome:zoneUUID:messageDispatcher:workQueue:cameraProfileUUID:]
  -[HMDCameraClipManager initWithZoneManager:quotaManager:faceClassificationResolver:clientConnectionsTimer:messageDispatcher:workQueue:cameraProfileUUID:fileManager:featuresDataSource:]
  -[HMDCameraClipManager significantEventsForClipWithUUID:]
  -[HMDCameraClipManager significantEventsWithDateInterval:]
  -[HMDCameraClipManager setHasWriteAccess:]
  -[HMDCameraClipManager hasStartedUpCloudZone]
  -[HMDCameraClipManager heroFrameURLForSignificantEventWithUUID:]
  -[HMDCameraClipManager fetchHeroFrameURLForSignificantEventWithUUID:]
  -[HMDCameraClipManager enableCloudStorage]
  -[HMDCameraClipManager disableCloudStorage]
  -[HMDCameraClipManager cleanUpClips]
  -[HMDCameraClipManager significantEventsForClipContainingDate:]
  -[HMDCameraClipManager _significantEventModelsWithUUIDs:]
  -[HMDCameraClipManager _significantEventModelsForClipWithUUID:]
  -[HMDCameraClipManager _significantEventFromSignificantEventModel:]
  -[HMDCameraClipManager _significantEventsWithUUIDs:]
  -[HMDCameraClipManager _faceClassificationsForSignificantEventWithUUID:]
  -[HMDCameraClipManager _fetchSignificantEventsWithDateInterval:isAscending:error:handler:]
  -[HMDCameraClipManager _fetchClipsWithDateInterval:quality:isAscending:error:handler:]
  -[HMDCameraClipManager _fetchCanonicalHeroFrameURLForClipModel:]
  -[HMDCameraClipManager _fetchHeroFrameURLForSignificantEventModel:]
  -[HMDCameraClipManager _fetchFaceCropURLForSignificantEventModel:]
  -[HMDCameraClipManager _performCloudPull]
  -[HMDCameraClipManager _cleanUpClipsForInitialStartup:]
  -[HMDCameraClipManager _cleanUpIncompleteClipsForInitialStartup:]
  -[HMDCameraClipManager _cleanUpExpiredClips]
  -[HMDCameraClipManager _notifyTransportsOfUpdatedClips:removedClipUUIDs:]
  -[HMDCameraClipManager _notifyTransportsOfUpdatedSignificantEvents:removedSignificantEventUUIDs:]
  -[HMDCameraClipManager _fetchAssetContextForMessage:propertyName:]
  -[HMDCameraClipManager _handleChangedClipModel:wasCreated:mirrorOutputFuture:]
  -[HMDCameraClipManager _handleChangedSignificantEventNotificationModel:mirrorOutputFuture:]
  -[HMDCameraClipManager _handleChangedFaceClassificationModel:]
  -[HMDCameraClipManager _notifyForChangedSignificantEventModel:mirrorOutputFuture:]
  -[HMDCameraClipManager _handleFaceMisclassificationForFaceCropURL:personUUID:personManagerUUID:significantEventModel:]
  -[HMDCameraClipManager _notifyPrimaryResidentAboutFaceMisclassificationForFaceCropData:personUUID:personManagerUUID:]
  -[HMDCameraClipManager _removeClipsWithUUIDs:options:]
  -[HMDCameraClipManager _removeAllFaceClassificationModels]
  -[HMDCameraClipManager quotaManager]
  -[HMDCameraClipManager feedbackManager]
  -[HMDCameraClipManager setFeedbackManager:]


HMDSettingGroup : NSObject <HMDSettingGroup>
 @property  NSMutableSet *settingsInternal
 @property  NSMutableSet *groupsInternal
 @property  NSUUID *identifier
 @property  NSUUID *parentIdentifier
 @property  NSString *name
 @property  NSArray *settings
 @property  NSArray *groups
 @property  NSString *keyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSettingGroup supportsSecureCoding]

  // instance methods
  -[HMDSettingGroup groups]
  -[HMDSettingGroup parentIdentifier]
  -[HMDSettingGroup initWithModel:]
  -[HMDSettingGroup identifier]
  -[HMDSettingGroup encodeWithCoder:]
  -[HMDSettingGroup .cxx_destruct]
  -[HMDSettingGroup keyPath]
  -[HMDSettingGroup settings]
  -[HMDSettingGroup name]
  -[HMDSettingGroup setKeyPath:]
  -[HMDSettingGroup initWithCoder:]
  -[HMDSettingGroup addGroup:]
  -[HMDSettingGroup addSetting:]
  -[HMDSettingGroup initWithIdentifier:parentIdentifier:name:groups:settings:]
  -[HMDSettingGroup settingsInternal]
  -[HMDSettingGroup setSettingsInternal:]
  -[HMDSettingGroup groupsInternal]
  -[HMDSettingGroup setGroupsInternal:]


HMDBackgroundTask : HMFObject
 @property  NSDate *expectedFireDate
 @property  NSDate *scheduledDate
 @property  NSString *identifier

  // instance methods
  -[HMDBackgroundTask identifier]
  -[HMDBackgroundTask attributeDescriptions]
  -[HMDBackgroundTask .cxx_destruct]
  -[HMDBackgroundTask scheduledDate]
  -[HMDBackgroundTask initWithIdentifier:expectedFireDate:scheduledDate:]
  -[HMDBackgroundTask expectedFireDate]


HMDUnpairedHAPAccessoryProgressHandler : HMFObject
 @property  NSUUID *accessoryUUID
 @property  @? progressHandler

  // instance methods
  -[HMDUnpairedHAPAccessoryProgressHandler accessoryUUID]
  -[HMDUnpairedHAPAccessoryProgressHandler progressHandler]
  -[HMDUnpairedHAPAccessoryProgressHandler .cxx_destruct]
  -[HMDUnpairedHAPAccessoryProgressHandler setProgressHandler:]
  -[HMDUnpairedHAPAccessoryProgressHandler setAccessoryUUID:]
  -[HMDUnpairedHAPAccessoryProgressHandler initWithAccessoryUUID:progressHandler:]


HMDUnpairedHAPAccessoryPairingInformation : HMFObject
 @property  long long linkType
 @property  HMFTimer *pairingInterruptionTimer
 @property  @? addAccessoryCompletionHandler
 @property  @? addAccessoryProgressHandler
 @property  @? setupCodeProviderCompletionHandler
 @property  HMFTimer *pairingRetryTimer
 @property  HMFTimer *reconfirmTimer
 @property  BOOL allowAddUnauthenticatedAccessory
 @property  BOOL provideNetworkCredentialsToAccessory
 @property  BOOL setupCodeProvided
 @property  HMFActivity *pairingActivity
 @property  HAPAccessoryPairingRequest *pairingRequest
 @property  NSString *accessoryName
 @property  NSUUID *accessoryUUID
 @property  NSString *accessoryServerIdentifier
 @property  NSString *setupCode
 @property  NSString *setupID
 @property  BOOL wacAccessory
 @property  BOOL legacyWAC

  // instance methods
  -[HMDUnpairedHAPAccessoryPairingInformation accessoryUUID]
  -[HMDUnpairedHAPAccessoryPairingInformation accessoryName]
  -[HMDUnpairedHAPAccessoryPairingInformation linkType]
  -[HMDUnpairedHAPAccessoryPairingInformation .cxx_destruct]
  -[HMDUnpairedHAPAccessoryPairingInformation pairingRequest]
  -[HMDUnpairedHAPAccessoryPairingInformation setLinkType:]
  -[HMDUnpairedHAPAccessoryPairingInformation setAccessoryName:]
  -[HMDUnpairedHAPAccessoryPairingInformation setSetupCode:]
  -[HMDUnpairedHAPAccessoryPairingInformation setupCode]
  -[HMDUnpairedHAPAccessoryPairingInformation setupID]
  -[HMDUnpairedHAPAccessoryPairingInformation setAccessoryUUID:]
  -[HMDUnpairedHAPAccessoryPairingInformation accessoryServerIdentifier]
  -[HMDUnpairedHAPAccessoryPairingInformation setAccessoryServerIdentifier:]
  -[HMDUnpairedHAPAccessoryPairingInformation setSetupID:]
  -[HMDUnpairedHAPAccessoryPairingInformation setWacAccessory:]
  -[HMDUnpairedHAPAccessoryPairingInformation wacAccessory]
  -[HMDUnpairedHAPAccessoryPairingInformation pairingActivity]
  -[HMDUnpairedHAPAccessoryPairingInformation setPairingActivity:]
  -[HMDUnpairedHAPAccessoryPairingInformation matchesAccessoryServer:]
  -[HMDUnpairedHAPAccessoryPairingInformation initWithAccessoryUUID:accessoryName:linkType:setupCode:completionHandler:setupCodeProvider:pairingRequest:]
  -[HMDUnpairedHAPAccessoryPairingInformation initWithAccessoryDescription:linkType:completionHandler:progressHandler:pairingRequest:]
  -[HMDUnpairedHAPAccessoryPairingInformation matchesUnpairedAccessory:]
  -[HMDUnpairedHAPAccessoryPairingInformation pairingInterruptionTimer]
  -[HMDUnpairedHAPAccessoryPairingInformation setPairingInterruptionTimer:]
  -[HMDUnpairedHAPAccessoryPairingInformation addAccessoryCompletionHandler]
  -[HMDUnpairedHAPAccessoryPairingInformation setAddAccessoryCompletionHandler:]
  -[HMDUnpairedHAPAccessoryPairingInformation addAccessoryProgressHandler]
  -[HMDUnpairedHAPAccessoryPairingInformation setAddAccessoryProgressHandler:]
  -[HMDUnpairedHAPAccessoryPairingInformation setupCodeProviderCompletionHandler]
  -[HMDUnpairedHAPAccessoryPairingInformation setSetupCodeProviderCompletionHandler:]
  -[HMDUnpairedHAPAccessoryPairingInformation pairingRetryTimer]
  -[HMDUnpairedHAPAccessoryPairingInformation setPairingRetryTimer:]
  -[HMDUnpairedHAPAccessoryPairingInformation reconfirmTimer]
  -[HMDUnpairedHAPAccessoryPairingInformation setReconfirmTimer:]
  -[HMDUnpairedHAPAccessoryPairingInformation allowAddUnauthenticatedAccessory]
  -[HMDUnpairedHAPAccessoryPairingInformation setAllowAddUnauthenticatedAccessory:]
  -[HMDUnpairedHAPAccessoryPairingInformation provideNetworkCredentialsToAccessory]
  -[HMDUnpairedHAPAccessoryPairingInformation setProvideNetworkCredentialsToAccessory:]
  -[HMDUnpairedHAPAccessoryPairingInformation setupCodeProvided]
  -[HMDUnpairedHAPAccessoryPairingInformation setSetupCodeProvided:]
  -[HMDUnpairedHAPAccessoryPairingInformation legacyWAC]
  -[HMDUnpairedHAPAccessoryPairingInformation setLegacyWAC:]


HMDAddAccessoryProgressState : HMFObject
 @property  NSUUID *accessoryUUID
 @property  NSString *accessoryName
 @property  NSString *manufacturerName
 @property  HMAccessoryCategory *category
 @property  unsigned long certificationStatus
 @property  NSString *productData

  // instance methods
  -[HMDAddAccessoryProgressState accessoryUUID]
  -[HMDAddAccessoryProgressState accessoryName]
  -[HMDAddAccessoryProgressState manufacturerName]
  -[HMDAddAccessoryProgressState category]
  -[HMDAddAccessoryProgressState .cxx_destruct]
  -[HMDAddAccessoryProgressState certificationStatus]
  -[HMDAddAccessoryProgressState productData]
  -[HMDAddAccessoryProgressState initWithUUID:accessoryName:manufacturerName:category:certificationStatus:productData:]


HMDAccessoryBrowserInjectedSettingsDevice : NSObject <HMDAccessoryBrowserInjectedSettings>
 @property  BOOL chipEnabled

  // instance methods
  -[HMDAccessoryBrowserInjectedSettingsDevice workQueue]
  -[HMDAccessoryBrowserInjectedSettingsDevice .cxx_destruct]
  -[HMDAccessoryBrowserInjectedSettingsDevice init]
  -[HMDAccessoryBrowserInjectedSettingsDevice createIpAccessoryBrowser]
  -[HMDAccessoryBrowserInjectedSettingsDevice createBtleAccessoryBrowser]
  -[HMDAccessoryBrowserInjectedSettingsDevice createHap2AccessoryBrowserWithStorage:]
  -[HMDAccessoryBrowserInjectedSettingsDevice createCHIPAccessoryBrowser]
  -[HMDAccessoryBrowserInjectedSettingsDevice createAuthServerWithDelegate:]
  -[HMDAccessoryBrowserInjectedSettingsDevice isCHIPEnabled]


HMDPairedAccessoryInformation : NSObject
 @property  NSString *identifier
 @property  NSData *setupHash
 @property  unsigned long transports
 @property  <HMDAccessoryBrowserDelegate> *delegate

  // instance methods
  -[HMDPairedAccessoryInformation identifier]
  -[HMDPairedAccessoryInformation delegate]
  -[HMDPairedAccessoryInformation .cxx_destruct]
  -[HMDPairedAccessoryInformation isEqual:]
  -[HMDPairedAccessoryInformation init]
  -[HMDPairedAccessoryInformation transports]
  -[HMDPairedAccessoryInformation setupHash]
  -[HMDPairedAccessoryInformation initWithIdentifier:transports:setupHash:delegate:]


HMDAccessoryBrowser : HMFObject <HAPAccessoryServerBrowserDelegate, HAPAccessoryServerDelegate, HMFMessageReceiver, HMFTimerDelegate, HMDMediaBrowserDelegate, HMDWACBrowserDelegate, HMDWACAccessoryConfigurationDelegate, HMDWatchSystemStateDelegate, HMDAuthServerDelegate, HMFLogging, HMDAccessoryBrowserProtocol, HMDAccessoryBrowserHapProtocol>
 @property  BOOL internalDiscoveryRequest
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSUUID *uuid
 @property  HMFMessageDispatcher *messageDispatcher
 @property  unsigned long generationCounter
 @property  HMDHomeManager *homeManager
 @property  <HMDAccessoryBrowserManagerDelegate> *managerDelegate
 @property  NSMutableArray *accessoryServerBrowsers
 @property  NSHashTable *discoveringAccessoryServerBrowsers
 @property  HAPAccessoryServerBrowserIP *ipAccessoryServerBrowser
 @property  HAPAccessoryServerBrowserBTLE *btleAccessoryServerBrowser
 @property  HAPAccessoryServerBrowser *hap2AccessoryServerBrowser
 @property  HMDHAP2Storage *hap2Storage
 @property  HMDMediaBrowser *mediaBrowser
 @property  HMDWACBrowser *wacBrowser
 @property  HMDUnassociatedWACAccessory *accessoryPerformingWAC
 @property  HMDAuthServer *authServer
 @property  HMDAccessoryServerBrowserDemo *demoAccessoryServerBrowser
 @property  HMFTimer *stopReprovisioningTimer
 @property  HMFTimer *stopBrowsingAccessoriesNeedingReprovisioningTimer
 @property  NSString *identifierOfAccessoryBeingReprovisioned
 @property  NSData *wiFiPSKForAccessoryReprovisioning
 @property  NSString *countrycodeForAccessoryReprovisioning
 @property  BOOL active
 @property  NSMutableArray *pairedAccessories
 @property  NSObject<OS_dispatch_source> *reachabilityTimerForBTLE
 @property  NSArray *unpairedHAPAccessories
 @property  NSArray *unassociatedMediaAccessories
 @property  NSArray *deviceSetupMediaAccessories
 @property  NSMutableArray *currentlyPairingAccessories
 @property  NSMutableArray *currentlyPairingProgressHandlers
 @property  NSHashTable *tombstonedHAPAccessoryServers
 @property  NSHashTable *discoveringBLEAccessoryServerIdentifiers
 @property  NSMutableSet *discoveredAccessoryServerIdentifiers
 @property  NSArray *browseableLinkTypes
 @property  CHIPAccessoryServerBrowser *chipAccessoryServerBrowser
 @property  BOOL btlePowerState
 @property  unsigned long unitTestBTLEReachabilityInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  NSArray *unassociatedAccessories

  // class methods
  +[HMDAccessoryBrowser logCategory]

  // instance methods
  -[HMDAccessoryBrowser updateBroadcastKeyForIdentifer:key:keyUpdatedStateNumber:keyUpdatedTime:]
  -[HMDAccessoryBrowser timerDidFire:]
  -[HMDAccessoryBrowser _registerForNotifications]
  -[HMDAccessoryBrowser active]
  -[HMDAccessoryBrowser workQueue]
  -[HMDAccessoryBrowser setWorkQueue:]
  -[HMDAccessoryBrowser stopTrackingBTLEAccessoriesWithIdentifiers:]
  -[HMDAccessoryBrowser dealloc]
  -[HMDAccessoryBrowser uuid]
  -[HMDAccessoryBrowser discoveredAccessoryServers]
  -[HMDAccessoryBrowser .cxx_destruct]
  -[HMDAccessoryBrowser setUuid:]
  -[HMDAccessoryBrowser messageTargetUUID]
  -[HMDAccessoryBrowser accessoryServerBrowser:didStopDiscoveringWithError:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didStartDiscoveringWithError:]
  -[HMDAccessoryBrowser messageDestination]
  -[HMDAccessoryBrowser wacBrowser]
  -[HMDAccessoryBrowser homeManager]
  -[HMDAccessoryBrowser setActive:]
  -[HMDAccessoryBrowser setHomeManager:]
  -[HMDAccessoryBrowser updateStateForIdentifier:stateNumber:]
  -[HMDAccessoryBrowser retrieveCurrentStateForIdentifer:stateNumber:isReachable:linkQuality:lastSeen:]
  -[HMDAccessoryBrowser messageReceiveQueue]
  -[HMDAccessoryBrowser resetPairedAccessories]
  -[HMDAccessoryBrowser messageDispatcher]
  -[HMDAccessoryBrowser activate:]
  -[HMDAccessoryBrowser generationCounter]
  -[HMDAccessoryBrowser resetConfiguration]
  -[HMDAccessoryBrowser _registerForMessages]
  -[HMDAccessoryBrowser setGenerationCounter:]
  -[HMDAccessoryBrowser endActiveAssertion:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didChangeReachability:forAccessoryServerWithIdentifier:]
  -[HMDAccessoryBrowser accessoryServerBrowser:accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:]
  -[HMDAccessoryBrowser accessoryServerBrowser:saveCache:serverIdentifier:]
  -[HMDAccessoryBrowser accessoryServerBrowser:removeCacheForAccessoryWithIdentifier:]
  -[HMDAccessoryBrowser isServerLinkTypeBrowseable:]
  -[HMDAccessoryBrowser accessoryServer:updatePairingProgress:]
  -[HMDAccessoryBrowser accessoryServer:didStopPairingWithError:]
  -[HMDAccessoryBrowser accessoryServerNeedsOwnershipToken:]
  -[HMDAccessoryBrowser accessoryServer:didDiscoverAccessories:transaction:error:]
  -[HMDAccessoryBrowser accessoryServer:requestUserPermission:accessoryInfo:error:]
  -[HMDAccessoryBrowser accessoryServer:validateCert:model:]
  -[HMDAccessoryBrowser accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:]
  -[HMDAccessoryBrowser accessoryServer:didUpdateWakeNumber:]
  -[HMDAccessoryBrowser accessoryServer:didDisconnectWithError:]
  -[HMDAccessoryBrowser accessoryServer:didReceiveBadPasswordThrottleAttemptsWithDelay:]
  -[HMDAccessoryBrowser accessoryServer:promptUserForPasswordWithType:]
  -[HMDAccessoryBrowser accessoryServer:validateUUID:token:model:]
  -[HMDAccessoryBrowser accessoryServer:didFinishAuth:]
  -[HMDAccessoryBrowser accessoryServer:authenticateUUID:token:]
  -[HMDAccessoryBrowser accessoryServer:confirmUUID:token:]
  -[HMDAccessoryBrowser accessoryServer:didUpdateHasPairings:]
  -[HMDAccessoryBrowser accessoryServerDidUpdateStateNumber:]
  -[HMDAccessoryBrowser accessoryServer:didUpdateCategory:]
  -[HMDAccessoryBrowser accessoryServer:didUpdateName:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didFailToDiscoverAccessoryServerWithIdentifier:]
  -[HMDAccessoryBrowser accessoryServerBrowser:getCacheForAccessoryWithIdentifier:withCompletion:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didRemoveAccessoryServer:error:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didFindAccessoryServer:stateChanged:stateNumber:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didFinishWACForAccessoryWithIdentifier:error:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didFindAccessoryServerNeedingReprovisioning:error:]
  -[HMDAccessoryBrowser accessoryServerBrowser:didFindAccessoryServerForReprovisioning:]
  -[HMDAccessoryBrowser handleXPCConnectionInvalidated:]
  -[HMDAccessoryBrowser setMessageDispatcher:]
  -[HMDAccessoryBrowser __handleProcessStateChange:]
  -[HMDAccessoryBrowser btleAccessoryReachabilityProbeTimer:]
  -[HMDAccessoryBrowser configureWithHomeManager:]
  -[HMDAccessoryBrowser _handleTestModeConfigRequest:]
  -[HMDAccessoryBrowser handleAddedAccessory:]
  -[HMDAccessoryBrowser handleRemovedAccessory:]
  -[HMDAccessoryBrowser handlePPIDInfoResponse:context:error:]
  -[HMDAccessoryBrowser handleActivationResponse:context:]
  -[HMDAccessoryBrowser didFinishActivation:context:]
  -[HMDAccessoryBrowser homeLocationChangeNotification:]
  -[HMDAccessoryBrowser handleConnectionDeactivation:]
  -[HMDAccessoryBrowser _handleRequestFetchNewAccessories:]
  -[HMDAccessoryBrowser _handleRequestSearchForNewAccessories:]
  -[HMDAccessoryBrowser accessoryServerBrowser:getThreadNetworkCredentialsForAccessoryWithIdentifier:withCompletion:]
  -[HMDAccessoryBrowser browser:didAddAdvertisements:]
  -[HMDAccessoryBrowser browser:didRemoveAdvertisements:]
  -[HMDAccessoryBrowser browser:didRemoveSessions:]
  -[HMDAccessoryBrowser browser:didUpdateEndpoints:]
  -[HMDAccessoryBrowser addUnassociatedWACAccessory:]
  -[HMDAccessoryBrowser removeUnassociatedWACAccessory:]
  -[HMDAccessoryBrowser updateUnassociatedWACAccessory:]
  -[HMDAccessoryBrowser requestPermissionToAssociateWACAccessory:completionHandler:]
  -[HMDAccessoryBrowser unassociatedWACAccessoryDidStartAssociation:]
  -[HMDAccessoryBrowser unassociatedWACAccessoryDidFinishAssociation:withError:]
  -[HMDAccessoryBrowser setQOS:]
  -[HMDAccessoryBrowser unpairedAccessoryWithUUID:]
  -[HMDAccessoryBrowser beginActiveAssertionWithReason:]
  -[HMDAccessoryBrowser isDiscoveringAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser startDiscoveringAccessories]
  -[HMDAccessoryBrowser startDiscoveringAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser stopDiscoveringAccessories]
  -[HMDAccessoryBrowser stopDiscoveringAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser stopDiscoveringForUnpairedAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser startDiscoveringPairedAccessories]
  -[HMDAccessoryBrowser startDiscoveringPairedAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser startDiscoveringAccessoriesNeedingReprovisioning]
  -[HMDAccessoryBrowser evaluateAccessoryDiscoveryState]
  -[HMDAccessoryBrowser restartBrowsers]
  -[HMDAccessoryBrowser registerProgressHandler:unpairedAccessoryUUID:]
  -[HMDAccessoryBrowser pairAccessory:configuration:completionHandler:]
  -[HMDAccessoryBrowser pairAccessoryWithDescription:configuration:progressHandler:completionHandler:]
  -[HMDAccessoryBrowser didReceiveUserConsentResponseForSetupAccessoryDetail:consent:]
  -[HMDAccessoryBrowser handleSetupCodeAvailable:]
  -[HMDAccessoryBrowser cancelPairingWithAccessory:error:]
  -[HMDAccessoryBrowser cancelPairingWithAccessoryDescription:error:]
  -[HMDAccessoryBrowser registerPairedAccessory:transports:setupHash:delegate:]
  -[HMDAccessoryBrowser deregisterPairedAccessory:]
  -[HMDAccessoryBrowser tombstoneAccessoryServer:]
  -[HMDAccessoryBrowser resurrectAccessoryServer:]
  -[HMDAccessoryBrowser addUnpairedAccessoryServer:identifier:]
  -[HMDAccessoryBrowser probeReachabilityForBTLEAccessoryServersWithIdentifiers:onQueue:withCompletion:]
  -[HMDAccessoryBrowser reprovisionAccessoryWithIdentifier:wiFiPSK:countryCode:withCompletion:]
  -[HMDAccessoryBrowser dumpUnassociatedAccessories]
  -[HMDAccessoryBrowser dumpRegisteredPairedAccessories]
  -[HMDAccessoryBrowser dumpBrowsingConnections]
  -[HMDAccessoryBrowser hasClientRequestedMediaAccessoryControl:]
  -[HMDAccessoryBrowser discoverAccessories:]
  -[HMDAccessoryBrowser discoverAccessoryServer:linkType:errorHandler:]
  -[HMDAccessoryBrowser isBrowsingAllowed]
  -[HMDAccessoryBrowser handleNewlyPairedAccessory:linkType:]
  -[HMDAccessoryBrowser currentlyFoundHAPAccessoryServerWithIdentifier:linkType:completion:]
  -[HMDAccessoryBrowser handleStartDiscoveringAssociatedMediaAccessories:forTransport:completionHandler:]
  -[HMDAccessoryBrowser acessoryBrowserHapProtocol]
  -[HMDAccessoryBrowser addUnassociatedAccessory:forDeviceSetup:]
  -[HMDAccessoryBrowser removeUnassociatedAccessory:]
  -[HMDAccessoryBrowser removeUnassociatedAccessoryWithIdentifier:]
  -[HMDAccessoryBrowser unpairedHAPAccessoryWithAccessoryDescription:]
  -[HMDAccessoryBrowser removePairingInformationForAccessoryServer:]
  -[HMDAccessoryBrowser setBrowseableLinkTypes:]
  -[HMDAccessoryBrowser unassociatedAccessories]
  -[HMDAccessoryBrowser mediaBrowser]
  -[HMDAccessoryBrowser configureAccessory:trackState:connectionPriority:]
  -[HMDAccessoryBrowser initWithMessageDispatcher:]
  -[HMDAccessoryBrowser initWithMessageDispatcher:injectedSettings:]
  -[HMDAccessoryBrowser validateLinkTypes:]
  -[HMDAccessoryBrowser configureDemoBrowserWithDemoAccessories:finalized:]
  -[HMDAccessoryBrowser unassociatedAccessoriesForClientRequest:]
  -[HMDAccessoryBrowser _unassociatedMediaAccessoryWithIdentifier:]
  -[HMDAccessoryBrowser unassociatedMediaAccessories]
  -[HMDAccessoryBrowser deviceSetupMediaAccessories]
  -[HMDAccessoryBrowser _handleAddedAccessory:]
  -[HMDAccessoryBrowser _handleRemovedAccessory:]
  -[HMDAccessoryBrowser _sendNewAccessoryData:messageName:]
  -[HMDAccessoryBrowser mediaAccessoryControlConnections]
  -[HMDAccessoryBrowser resetMediaAccessoryControlConnections]
  -[HMDAccessoryBrowser __removeMediaAccessoryControlObserver:]
  -[HMDAccessoryBrowser __addMediaAccessoryControlObserver:]
  -[HMDAccessoryBrowser _removeMediaAccessoryControlObserverMatchingConnection:]
  -[HMDAccessoryBrowser internalDiscoveryRequest]
  -[HMDAccessoryBrowser setInternalDiscoveryRequest:]
  -[HMDAccessoryBrowser browsingConnections]
  -[HMDAccessoryBrowser __resetBrowsingConnections]
  -[HMDAccessoryBrowser __isAccessoryBrowsingRequested]
  -[HMDAccessoryBrowser __isMediaAccessoryBrowsingRequested]
  -[HMDAccessoryBrowser __removeBrowsingObserver:error:]
  -[HMDAccessoryBrowser __addBrowsingConnection:]
  -[HMDAccessoryBrowser _removeBrowsingConnection:error:]
  -[HMDAccessoryBrowser pairedAccessories]
  -[HMDAccessoryBrowser addPairedAccessory:]
  -[HMDAccessoryBrowser removePairedAccessory:]
  -[HMDAccessoryBrowser removePairedAccessoryInfoWithIdentifier:]
  -[HMDAccessoryBrowser pairedAccessoryInformationWithIdentifier:]
  -[HMDAccessoryBrowser pairedAccessoryInformationWithSetupID:]
  -[HMDAccessoryBrowser pairedHMDHAPAccessoryWithAccessoryServer:]
  -[HMDAccessoryBrowser __identifiersOfPairedAccessoriesWithTransports:]
  -[HMDAccessoryBrowser areThereAnyPairedAccessories]
  -[HMDAccessoryBrowser identifiersOfPairedBTLEAccessories]
  -[HMDAccessoryBrowser areThereAnyPairedBTLEAccessories]
  -[HMDAccessoryBrowser identifiersOfAssociatedMediaAccessories]
  -[HMDAccessoryBrowser areThereAnyAssociatedAirPlayAccessories]
  -[HMDAccessoryBrowser numPairedIPAccessories]
  -[HMDAccessoryBrowser __activate]
  -[HMDAccessoryBrowser __inactivate]
  -[HMDAccessoryBrowser _notifyDelegateOfReachabilityChange:forAccessoryWithIdentifier:]
  -[HMDAccessoryBrowser _handleAddedAccessoryAdvertisements:]
  -[HMDAccessoryBrowser _handleRemovedAccessoryAdvertisements:]
  -[HMDAccessoryBrowser startDiscoveringMediaAccessories]
  -[HMDAccessoryBrowser stopDiscoveringMediaAccessories]
  -[HMDAccessoryBrowser _reprovisionAccessoryWithIdentifier:wiFiPSK:countryCode:withCompletion:]
  -[HMDAccessoryBrowser unpairedHAPAccessories]
  -[HMDAccessoryBrowser _unpairedAccessoryMatchingPairingInfo:]
  -[HMDAccessoryBrowser _pairingInformationForUnpairedAccessory:]
  -[HMDAccessoryBrowser _pairingInformationForAccessoryIdentifier:]
  -[HMDAccessoryBrowser _progressHandlerForUnpairedAccessory:]
  -[HMDAccessoryBrowser addUnassociatedMediaAccessory:forDeviceSetup:]
  -[HMDAccessoryBrowser _associate:hapAccessoryWithAdvertisement:]
  -[HMDAccessoryBrowser _associateMediaAccessoryForServer:]
  -[HMDAccessoryBrowser removeUnassociatedMediaAccessory:]
  -[HMDAccessoryBrowser setActiveWACSession:]
  -[HMDAccessoryBrowser getActiveWACSession]
  -[HMDAccessoryBrowser addUnpairedHAPAccessory:]
  -[HMDAccessoryBrowser removeUnpairedHAPAccessory:]
  -[HMDAccessoryBrowser _handleRemovedUnpairedHAPAccessory:]
  -[HMDAccessoryBrowser _removePairingInformationForUnpairedAccessory:]
  -[HMDAccessoryBrowser _handleWACAccessoryFound]
  -[HMDAccessoryBrowser _addUnpairedAccessoryForServer:]
  -[HMDAccessoryBrowser _addDiscoveredAccessoryServerIdentifier:]
  -[HMDAccessoryBrowser _removeDiscoveredAccessoryServerIdentifier:]
  -[HMDAccessoryBrowser _btleAccessoryReachabilityProbeTimer:]
  -[HMDAccessoryBrowser _stopBtleAccessoryReachabilityProbeTimer]
  -[HMDAccessoryBrowser _startOrStopAccessoryDiscovery]
  -[HMDAccessoryBrowser _stopReprovisioningTimerHandler]
  -[HMDAccessoryBrowser _discoverAccessoryServer:linkType:errorHandler:]
  -[HMDAccessoryBrowser _startDiscoveringPairedAccessories:]
  -[HMDAccessoryBrowser _startDiscoveringAccessoriesWithLinkType:]
  -[HMDAccessoryBrowser _startDiscoveryForAccessoryServerBrowser:]
  -[HMDAccessoryBrowser _startDiscoveringMediaAccessories]
  -[HMDAccessoryBrowser _stopDiscoveringMediaAccessories]
  -[HMDAccessoryBrowser _stopDiscoveringAccessoriesWithLinkType:force:error:]
  -[HMDAccessoryBrowser _stopDiscoveringAccessoriesWithError:]
  -[HMDAccessoryBrowser _stopDiscoveryForAccessoryServerBrowser:]
  -[HMDAccessoryBrowser _startDiscoveringAccessoriesNeedingReprovisioning]
  -[HMDAccessoryBrowser _restartBrowsers]
  -[HMDAccessoryBrowser setManagerDelegate:]
  -[HMDAccessoryBrowser _cancelCurrentlyPairingAccessories:linkType:]
  -[HMDAccessoryBrowser _setBTLEPowerChangeCompletionHandler]
  -[HMDAccessoryBrowser unpairedAccessoryWithServerIdentifier:]
  -[HMDAccessoryBrowser unpairedAccessoryForServer:]
  -[HMDAccessoryBrowser _notifyManagerOfNewAccessory]
  -[HMDAccessoryBrowser _handleSetupCodeAvailable:]
  -[HMDAccessoryBrowser _cancelPairingWithAccessory:error:]
  -[HMDAccessoryBrowser findAccessoryServerForAccessoryDescription:]
  -[HMDAccessoryBrowser currentControllerPairingIdentity]
  -[HMDAccessoryBrowser _cancelPairingWithAccessoryDescription:error:]
  -[HMDAccessoryBrowser _pairAccessoryWithDescription:configuration:progressHandler:completionHandler:]
  -[HMDAccessoryBrowser _pairAccessory:configuration:completionHandler:]
  -[HMDAccessoryBrowser _promptForPairingPasswordForServer:reason:]
  -[HMDAccessoryBrowser _updatePairingRetryTimerForAccessory:delay:]
  -[HMDAccessoryBrowser _sendPairingCompletionStatusForServer:error:completionHandler:]
  -[HMDAccessoryBrowser _isAccessoryServerTombstoned:]
  -[HMDAccessoryBrowser _tombstonedAccessoryServerWithServerIdentifier:]
  -[HMDAccessoryBrowser _shouldAccessoryServerBeTombstoned:]
  -[HMDAccessoryBrowser _notifyDelegateOfTombstonedAccessoryServer:]
  -[HMDAccessoryBrowser _tombstoneAccessoryServer:forceNotify:]
  -[HMDAccessoryBrowser _requiredCharacteristicsTypesToReadFromBTLEServer:]
  -[HMDAccessoryBrowser _discoverAccessories:]
  -[HMDAccessoryBrowser _resurrectAccessoryServer:]
  -[HMDAccessoryBrowser _notifyDelegateOfNewPairedAccessoryServer:stateChanged:stateNumber:]
  -[HMDAccessoryBrowser _removePairingInformation:error:]
  -[HMDAccessoryBrowser _checkIfPairingWithPairedAccessoryServer:errorCode:]
  -[HMDAccessoryBrowser _notifyDelegateOfWACCompletionForAccessoryServerWithIdentifier:error:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServerNeedingReprovisioning:error:]
  -[HMDAccessoryBrowser _notifyDelegateOfRemovedAccessoryServer:error:]
  -[HMDAccessoryBrowser _handlePairingInterruptedTimeout:error:]
  -[HMDAccessoryBrowser _stopReconfirmTimer:]
  -[HMDAccessoryBrowser _startPairingInterruptionTimer:]
  -[HMDAccessoryBrowser _addReconfirmTimer:accessoryServer:]
  -[HMDAccessoryBrowser _notifyDelegateOfDiscoveryFailure:accessoryServer:linkType:]
  -[HMDAccessoryBrowser _notifyDelegateOfReachabilityChangeChange:forBTLEAccessories:]
  -[HMDAccessoryBrowser saveAccessoryCache:forIdentifier:]
  -[HMDAccessoryBrowser fetchAccessoryCacheForIdentifier:completion:]
  -[HMDAccessoryBrowser removeAccessoryCacheForIdentifier:]
  -[HMDAccessoryBrowser _getHAPMetadataFromHMMetadata:]
  -[HMDAccessoryBrowser _continueAfterPPIDValidation:server:]
  -[HMDAccessoryBrowser _callProgressOrErrorOut:pairingInfo:accessoryInfo:unpairedAccessory:progress:certStatus:]
  -[HMDAccessoryBrowser accessoryServer:promtDialog:forNotCertifiedAccessory:completion:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServer:didStopPairingWithError:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServer:didDiscoverAccessories:transaction:error:]
  -[HMDAccessoryBrowser continueAddingAccessoryToHomeAfterUserConfirmation:withError:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServer:didUpdateHasPairings:]
  -[HMDAccessoryBrowser _notifyDelegateOfAccessoryServer:didUpdateCategory:]
  -[HMDAccessoryBrowser vendorModel:vendorManufacturer:accessoryInfo:]
  -[HMDAccessoryBrowser btlePowerState]
  -[HMDAccessoryBrowser setBtlePowerState:]
  -[HMDAccessoryBrowser managerDelegate]
  -[HMDAccessoryBrowser chipAccessoryServerBrowser]
  -[HMDAccessoryBrowser unitTestBTLEReachabilityInterval]
  -[HMDAccessoryBrowser setUnitTestBTLEReachabilityInterval:]
  -[HMDAccessoryBrowser accessoryServerBrowsers]
  -[HMDAccessoryBrowser setAccessoryServerBrowsers:]
  -[HMDAccessoryBrowser discoveringAccessoryServerBrowsers]
  -[HMDAccessoryBrowser setDiscoveringAccessoryServerBrowsers:]
  -[HMDAccessoryBrowser ipAccessoryServerBrowser]
  -[HMDAccessoryBrowser setIpAccessoryServerBrowser:]
  -[HMDAccessoryBrowser btleAccessoryServerBrowser]
  -[HMDAccessoryBrowser setBtleAccessoryServerBrowser:]
  -[HMDAccessoryBrowser hap2AccessoryServerBrowser]
  -[HMDAccessoryBrowser setHap2AccessoryServerBrowser:]
  -[HMDAccessoryBrowser hap2Storage]
  -[HMDAccessoryBrowser setHap2Storage:]
  -[HMDAccessoryBrowser setMediaBrowser:]
  -[HMDAccessoryBrowser setWacBrowser:]
  -[HMDAccessoryBrowser authServer]
  -[HMDAccessoryBrowser setAuthServer:]
  -[HMDAccessoryBrowser demoAccessoryServerBrowser]
  -[HMDAccessoryBrowser setDemoAccessoryServerBrowser:]
  -[HMDAccessoryBrowser stopReprovisioningTimer]
  -[HMDAccessoryBrowser stopBrowsingAccessoriesNeedingReprovisioningTimer]
  -[HMDAccessoryBrowser identifierOfAccessoryBeingReprovisioned]
  -[HMDAccessoryBrowser setIdentifierOfAccessoryBeingReprovisioned:]
  -[HMDAccessoryBrowser wiFiPSKForAccessoryReprovisioning]
  -[HMDAccessoryBrowser setWiFiPSKForAccessoryReprovisioning:]
  -[HMDAccessoryBrowser countrycodeForAccessoryReprovisioning]
  -[HMDAccessoryBrowser setCountrycodeForAccessoryReprovisioning:]
  -[HMDAccessoryBrowser setPairedAccessories:]
  -[HMDAccessoryBrowser reachabilityTimerForBTLE]
  -[HMDAccessoryBrowser setReachabilityTimerForBTLE:]
  -[HMDAccessoryBrowser currentlyPairingAccessories]
  -[HMDAccessoryBrowser setCurrentlyPairingAccessories:]
  -[HMDAccessoryBrowser currentlyPairingProgressHandlers]
  -[HMDAccessoryBrowser setCurrentlyPairingProgressHandlers:]
  -[HMDAccessoryBrowser tombstonedHAPAccessoryServers]
  -[HMDAccessoryBrowser discoveringBLEAccessoryServerIdentifiers]
  -[HMDAccessoryBrowser discoveredAccessoryServerIdentifiers]
  -[HMDAccessoryBrowser setDiscoveredAccessoryServerIdentifiers:]
  -[HMDAccessoryBrowser browseableLinkTypes]


__HMDPairedAccessoryBrowseAssertion : HMFAssertion
 @property  HMDAccessoryBrowser *accessoryBrowser

  // instance methods
  -[__HMDPairedAccessoryBrowseAssertion .cxx_destruct]
  -[__HMDPairedAccessoryBrowseAssertion initWithName:]
  -[__HMDPairedAccessoryBrowseAssertion invalidate]
  -[__HMDPairedAccessoryBrowseAssertion accessoryBrowser]
  -[__HMDPairedAccessoryBrowseAssertion initWithAccessoryBrowser:reason:]


HMDManagedStagedValue : NSObject
 @property  @? commitBlock
 @property  HMFStagedValue *stagedValue
 @property  id initialValue
 @property  long long state
 @property  id value

  // instance methods
  -[HMDManagedStagedValue state]
  -[HMDManagedStagedValue .cxx_destruct]
  -[HMDManagedStagedValue initialValue]
  -[HMDManagedStagedValue value]
  -[HMDManagedStagedValue setState:]
  -[HMDManagedStagedValue stageValue:]
  -[HMDManagedStagedValue commitBlock]
  -[HMDManagedStagedValue setCommitBlock:]
  -[HMDManagedStagedValue initWithValue:commitBlock:]
  -[HMDManagedStagedValue resetAndStagePriorValue]
  -[HMDManagedStagedValue _resetStagedValue]
  -[HMDManagedStagedValue _commitIfStaged:]
  -[HMDManagedStagedValue _handleCommitCompletionWithStagedValue:success:committingValue:]
  -[HMDManagedStagedValue stagedValue]
  -[HMDManagedStagedValue setStagedValue:]


HMDDonationHandler : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDonationHandler logCategory]
  +[HMDDonationHandler sharedDonationHandler]

  // instance methods
  -[HMDDonationHandler workQueue]
  -[HMDDonationHandler setWorkQueue:]
  -[HMDDonationHandler .cxx_destruct]
  -[HMDDonationHandler _init]
  -[HMDDonationHandler init]
  -[HMDDonationHandler donateActionSet:withMessage:]
  -[HMDDonationHandler removeIntentForActionSet:]
  -[HMDDonationHandler _donateActionSet:withMessage:]
  -[HMDDonationHandler _donateIntent:withActionSet:]
  -[HMDDonationHandler _removeIntentForActionSet:]


AWDHomeKitPredicate : PBCodable <NSCopying>
 @property  NSMutableArray *presenceEvents
 @property  BOOL hasContainsCharacteristicValue
 @property  BOOL containsCharacteristicValue
 @property  BOOL hasContainsSignificantTime
 @property  BOOL containsSignificantTime
 @property  BOOL hasContainsSignificantTimeOffset
 @property  BOOL containsSignificantTimeOffset
 @property  BOOL hasContainsCalendarTime
 @property  BOOL containsCalendarTime

  // class methods
  +[AWDHomeKitPredicate presenceEventsType]

  // instance methods
  -[AWDHomeKitPredicate copyTo:]
  -[AWDHomeKitPredicate .cxx_destruct]
  -[AWDHomeKitPredicate mergeFrom:]
  -[AWDHomeKitPredicate dictionaryRepresentation]
  -[AWDHomeKitPredicate copyWithZone:]
  -[AWDHomeKitPredicate readFrom:]
  -[AWDHomeKitPredicate writeTo:]
  -[AWDHomeKitPredicate isEqual:]
  -[AWDHomeKitPredicate presenceEvents]
  -[AWDHomeKitPredicate clearPresenceEvents]
  -[AWDHomeKitPredicate addPresenceEvents:]
  -[AWDHomeKitPredicate presenceEventsCount]
  -[AWDHomeKitPredicate presenceEventsAtIndex:]
  -[AWDHomeKitPredicate setContainsCharacteristicValue:]
  -[AWDHomeKitPredicate setHasContainsCharacteristicValue:]
  -[AWDHomeKitPredicate hasContainsCharacteristicValue]
  -[AWDHomeKitPredicate setContainsSignificantTime:]
  -[AWDHomeKitPredicate setHasContainsSignificantTime:]
  -[AWDHomeKitPredicate hasContainsSignificantTime]
  -[AWDHomeKitPredicate setContainsSignificantTimeOffset:]
  -[AWDHomeKitPredicate setHasContainsSignificantTimeOffset:]
  -[AWDHomeKitPredicate hasContainsSignificantTimeOffset]
  -[AWDHomeKitPredicate setContainsCalendarTime:]
  -[AWDHomeKitPredicate setHasContainsCalendarTime:]
  -[AWDHomeKitPredicate hasContainsCalendarTime]
  -[AWDHomeKitPredicate setPresenceEvents:]
  -[AWDHomeKitPredicate containsCharacteristicValue]
  -[AWDHomeKitPredicate containsSignificantTime]
  -[AWDHomeKitPredicate containsSignificantTimeOffset]
  -[AWDHomeKitPredicate containsCalendarTime]


HMDAccessorySettingGroup : HMFObject <HMFLogging, NSSecureCoding, HMDSettingGroup>
 @property  NSUUID *parentIdentifier
 @property  <HMDAccessorySettingGroupDataSource> *dataSource
 @property  NSUUID *identifier
 @property  NSString *name
 @property  NSArray *settings
 @property  NSArray *groups
 @property  HMDAccessorySettingGroup *mediaSystemSettingGroup
 @property  NSString *keyPath
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessorySettingGroup supportsSecureCoding]
  +[HMDAccessorySettingGroup logCategory]
  +[HMDAccessorySettingGroup supportedSettingsClasses]
  +[HMDAccessorySettingGroup supportedGroupsClasses]

  // instance methods
  -[HMDAccessorySettingGroup groups]
  -[HMDAccessorySettingGroup parentIdentifier]
  -[HMDAccessorySettingGroup initWithModel:]
  -[HMDAccessorySettingGroup identifier]
  -[HMDAccessorySettingGroup logIdentifier]
  -[HMDAccessorySettingGroup dataSource]
  -[HMDAccessorySettingGroup setParentIdentifier:]
  -[HMDAccessorySettingGroup fullDescription]
  -[HMDAccessorySettingGroup encodeWithCoder:]
  -[HMDAccessorySettingGroup .cxx_destruct]
  -[HMDAccessorySettingGroup keyPath]
  -[HMDAccessorySettingGroup settings]
  -[HMDAccessorySettingGroup setDataSource:]
  -[HMDAccessorySettingGroup copyWithZone:]
  -[HMDAccessorySettingGroup name]
  -[HMDAccessorySettingGroup isEqual:]
  -[HMDAccessorySettingGroup init]
  -[HMDAccessorySettingGroup initWithCoder:]
  -[HMDAccessorySettingGroup addGroup:]
  -[HMDAccessorySettingGroup removeGroup:]
  -[HMDAccessorySettingGroup settingWithName:]
  -[HMDAccessorySettingGroup addSetting:]
  -[HMDAccessorySettingGroup removeSetting:]
  -[HMDAccessorySettingGroup description:indent:]
  -[HMDAccessorySettingGroup groupWithIdentifier:]
  -[HMDAccessorySettingGroup initWithName:identifier:parentIdentifier:]
  -[HMDAccessorySettingGroup subGroupWithName:]
  -[HMDAccessorySettingGroup settingWithKeyPath:]
  -[HMDAccessorySettingGroup _settingWithKeys:]
  -[HMDAccessorySettingGroup copyIdentical]
  -[HMDAccessorySettingGroup copyReplica]
  -[HMDAccessorySettingGroup isPrivateToDevice]
  -[HMDAccessorySettingGroup settingWithIdentifier:]
  -[HMDAccessorySettingGroup _reevaluateParentGroup:]
  -[HMDAccessorySettingGroup _setParentGroup:]
  -[HMDAccessorySettingGroup shouldEncodeForCoder:]
  -[HMDAccessorySettingGroup dataSourceShouldEncodeSetting:withCoder:]
  -[HMDAccessorySettingGroup intersectSettingGroup:groupMetadata:shouldAddMissingItems:]
  -[HMDAccessorySettingGroup compareSettingsTree:]
  -[HMDAccessorySettingGroup mediaSystemSettingGroup]
  -[HMDAccessorySettingGroup setMediaSystemSettingGroup:]


HMDAccessorySettingGroupModel : HMDBackingStoreModelObject
 @property  NSString *name

  // class methods
  +[HMDAccessorySettingGroupModel properties]
  +[HMDAccessorySettingGroupModel schemaHashRoot]


AWDHomeKitCameraRecordingUploadOperation : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasClipModelUUID
 @property  NSString *clipModelUUID
 @property  BOOL hasDidCausePreviousClipToFinalizeBecauseMaxDurationExceeded
 @property  BOOL didCausePreviousClipToFinalizeBecauseMaxDurationExceeded
 @property  BOOL hasErrorCode
 @property  long long errorCode
 @property  BOOL hasTotalClipDuration
 @property  unsigned long totalClipDuration
 @property  BOOL hasRunTime
 @property  unsigned long runTime
 @property  BOOL hasRetryCount
 @property  unsigned long retryCount
 @property  BOOL hasOperationType
 @property  int operationType
 @property  BOOL hasErrorDomain
 @property  NSString *errorDomain
 @property  BOOL hasOperationStartTime
 @property  unsigned long operationStartTime

  // instance methods
  -[AWDHomeKitCameraRecordingUploadOperation operationType]
  -[AWDHomeKitCameraRecordingUploadOperation hasErrorCode]
  -[AWDHomeKitCameraRecordingUploadOperation setErrorCode:]
  -[AWDHomeKitCameraRecordingUploadOperation errorCode]
  -[AWDHomeKitCameraRecordingUploadOperation setOperationType:]
  -[AWDHomeKitCameraRecordingUploadOperation setErrorDomain:]
  -[AWDHomeKitCameraRecordingUploadOperation setTimestamp:]
  -[AWDHomeKitCameraRecordingUploadOperation copyTo:]
  -[AWDHomeKitCameraRecordingUploadOperation runTime]
  -[AWDHomeKitCameraRecordingUploadOperation retryCount]
  -[AWDHomeKitCameraRecordingUploadOperation setRetryCount:]
  -[AWDHomeKitCameraRecordingUploadOperation hasErrorDomain]
  -[AWDHomeKitCameraRecordingUploadOperation hasOperationType]
  -[AWDHomeKitCameraRecordingUploadOperation errorDomain]
  -[AWDHomeKitCameraRecordingUploadOperation .cxx_destruct]
  -[AWDHomeKitCameraRecordingUploadOperation setHasErrorCode:]
  -[AWDHomeKitCameraRecordingUploadOperation mergeFrom:]
  -[AWDHomeKitCameraRecordingUploadOperation setHasTimestamp:]
  -[AWDHomeKitCameraRecordingUploadOperation dictionaryRepresentation]
  -[AWDHomeKitCameraRecordingUploadOperation hasTimestamp]
  -[AWDHomeKitCameraRecordingUploadOperation copyWithZone:]
  -[AWDHomeKitCameraRecordingUploadOperation setRunTime:]
  -[AWDHomeKitCameraRecordingUploadOperation timestamp]
  -[AWDHomeKitCameraRecordingUploadOperation readFrom:]
  -[AWDHomeKitCameraRecordingUploadOperation writeTo:]
  -[AWDHomeKitCameraRecordingUploadOperation isEqual:]
  -[AWDHomeKitCameraRecordingUploadOperation operationStartTime]
  -[AWDHomeKitCameraRecordingUploadOperation setOperationStartTime:]
  -[AWDHomeKitCameraRecordingUploadOperation hasRetryCount]
  -[AWDHomeKitCameraRecordingUploadOperation setHasRetryCount:]
  -[AWDHomeKitCameraRecordingUploadOperation setHasOperationType:]
  -[AWDHomeKitCameraRecordingUploadOperation operationTypeAsString:]
  -[AWDHomeKitCameraRecordingUploadOperation StringAsOperationType:]
  -[AWDHomeKitCameraRecordingUploadOperation hasRunTime]
  -[AWDHomeKitCameraRecordingUploadOperation setHasRunTime:]
  -[AWDHomeKitCameraRecordingUploadOperation hasClipModelUUID]
  -[AWDHomeKitCameraRecordingUploadOperation setDidCausePreviousClipToFinalizeBecauseMaxDurationExceeded:]
  -[AWDHomeKitCameraRecordingUploadOperation setHasDidCausePreviousClipToFinalizeBecauseMaxDurationExceeded:]
  -[AWDHomeKitCameraRecordingUploadOperation hasDidCausePreviousClipToFinalizeBecauseMaxDurationExceeded]
  -[AWDHomeKitCameraRecordingUploadOperation setTotalClipDuration:]
  -[AWDHomeKitCameraRecordingUploadOperation setHasTotalClipDuration:]
  -[AWDHomeKitCameraRecordingUploadOperation hasTotalClipDuration]
  -[AWDHomeKitCameraRecordingUploadOperation setHasOperationStartTime:]
  -[AWDHomeKitCameraRecordingUploadOperation hasOperationStartTime]
  -[AWDHomeKitCameraRecordingUploadOperation clipModelUUID]
  -[AWDHomeKitCameraRecordingUploadOperation setClipModelUUID:]
  -[AWDHomeKitCameraRecordingUploadOperation didCausePreviousClipToFinalizeBecauseMaxDurationExceeded]
  -[AWDHomeKitCameraRecordingUploadOperation totalClipDuration]


HMDXPCActivityRunReportLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *activityName
 @property  long long activityDefinedIntervalInMinutes
 @property  BOOL activityShouldWake
 @property  long long activityRunHourOfDay
 @property  long long activityTimeSinceLastRunInMinutes
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDXPCActivityRunReportLogEvent eventName]
  -[HMDXPCActivityRunReportLogEvent .cxx_destruct]
  -[HMDXPCActivityRunReportLogEvent activityName]
  -[HMDXPCActivityRunReportLogEvent serializedEvent]
  -[HMDXPCActivityRunReportLogEvent initWithActivityName:definedInterval:activityShouldWake:timeSinceLastRun:]
  -[HMDXPCActivityRunReportLogEvent activityDefinedIntervalInMinutes]
  -[HMDXPCActivityRunReportLogEvent activityShouldWake]
  -[HMDXPCActivityRunReportLogEvent activityRunHourOfDay]
  -[HMDXPCActivityRunReportLogEvent activityTimeSinceLastRunInMinutes]


HMDWidgetTimelineRefresher : HMFObject <HMFLogging>
 @property  HMDHomeManager *homeManager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *clientIdentifier
 @property  NSNotificationCenter *notificationCenter
 @property  NSUUID *currentHomeUUID
 @property  NSSet *widgetKindsToUpdate
 @property  NSMutableDictionary *accessoryIsReachableByUUID
 @property  NSObject<OS_dispatch_source> *widgetRefreshDispatchTimer
 @property  NSMutableDictionary *characteristicsToPreviouslySeenValues
 @property  @? forceUpdateWidgetTimelineHandler
 @property  @? fetchAndStoreActiveWidgetKindsHandler
 @property  NSSet *monitoredCharacteristics
 @property  NSSet *activeWidgetKinds
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWidgetTimelineRefresher logCategory]
  +[HMDWidgetTimelineRefresher fetchSpecificationsForWidgetKinds:]

  // instance methods
  -[HMDWidgetTimelineRefresher initWithHomeManager:]
  -[HMDWidgetTimelineRefresher notificationCenter]
  -[HMDWidgetTimelineRefresher configure]
  -[HMDWidgetTimelineRefresher clientIdentifier]
  -[HMDWidgetTimelineRefresher workQueue]
  -[HMDWidgetTimelineRefresher .cxx_destruct]
  -[HMDWidgetTimelineRefresher homeManager]
  -[HMDWidgetTimelineRefresher setHomeManager:]
  -[HMDWidgetTimelineRefresher handleHomeRemovedNotification:]
  -[HMDWidgetTimelineRefresher handleHomeAddedNotification:]
  -[HMDWidgetTimelineRefresher handleAccessoryRemovedNotification:]
  -[HMDWidgetTimelineRefresher processCharacteristicsChangedNotification:]
  -[HMDWidgetTimelineRefresher handleCurrentOrPrimaryHomeChangedNotification:]
  -[HMDWidgetTimelineRefresher handleAccessoryAddedNotification:]
  -[HMDWidgetTimelineRefresher handleResidentDeviceChangedNotification:]
  -[HMDWidgetTimelineRefresher handleAccessoryReachabilityChangedNotification:]
  -[HMDWidgetTimelineRefresher handleNotificationOfPossibleNewWidget:]
  -[HMDWidgetTimelineRefresher initWithHomeManager:notificationCenter:]
  -[HMDWidgetTimelineRefresher updateMonitoredCharacteristicsAndRefreshWidgetTimelines]
  -[HMDWidgetTimelineRefresher internalMonitorCharacteristicsForCurrentHome:activeWidgetKinds:]
  -[HMDWidgetTimelineRefresher monitorCharacteristicsForHome:fetchSpecifications:]
  -[HMDWidgetTimelineRefresher stopMonitoringOldCharacteristics]
  -[HMDWidgetTimelineRefresher internalProcessChangedCharacteristics:activeWidgetKinds:]
  -[HMDWidgetTimelineRefresher widgetKindsToUpdateFromFetchSpecifications:changedCharacteristics:]
  -[HMDWidgetTimelineRefresher widgetKindsToUpdateFromFetchSpecifications:assumingChangedCharacteristic:]
  -[HMDWidgetTimelineRefresher forceUpdateTimelineForWidgetKinds:]
  -[HMDWidgetTimelineRefresher fetchAndStoreActiveWidgetKinds]
  -[HMDWidgetTimelineRefresher monitoredCharacteristics]
  -[HMDWidgetTimelineRefresher setMonitoredCharacteristics:]
  -[HMDWidgetTimelineRefresher activeWidgetKinds]
  -[HMDWidgetTimelineRefresher setActiveWidgetKinds:]
  -[HMDWidgetTimelineRefresher currentHomeUUID]
  -[HMDWidgetTimelineRefresher setCurrentHomeUUID:]
  -[HMDWidgetTimelineRefresher widgetKindsToUpdate]
  -[HMDWidgetTimelineRefresher setWidgetKindsToUpdate:]
  -[HMDWidgetTimelineRefresher accessoryIsReachableByUUID]
  -[HMDWidgetTimelineRefresher widgetRefreshDispatchTimer]
  -[HMDWidgetTimelineRefresher characteristicsToPreviouslySeenValues]
  -[HMDWidgetTimelineRefresher forceUpdateWidgetTimelineHandler]
  -[HMDWidgetTimelineRefresher setForceUpdateWidgetTimelineHandler:]
  -[HMDWidgetTimelineRefresher fetchAndStoreActiveWidgetKindsHandler]
  -[HMDWidgetTimelineRefresher setFetchAndStoreActiveWidgetKindsHandler:]


HMDCameraClipSegmentMetadata : PBCodable <NSCopying>
 @property  BOOL hasByteOffset
 @property  unsigned long byteOffset
 @property  BOOL hasByteLength
 @property  unsigned long byteLength
 @property  BOOL hasTimeOffset
 @property  double timeOffset
 @property  BOOL hasDuration
 @property  double duration
 @property  BOOL hasType
 @property  int type
 @property  BOOL hasWidth
 @property  unsigned int width
 @property  BOOL hasHeight
 @property  unsigned int height

  // instance methods
  -[HMDCameraClipSegmentMetadata typeAsString:]
  -[HMDCameraClipSegmentMetadata setDuration:]
  -[HMDCameraClipSegmentMetadata hasHeight]
  -[HMDCameraClipSegmentMetadata setHasWidth:]
  -[HMDCameraClipSegmentMetadata setHasType:]
  -[HMDCameraClipSegmentMetadata hasDuration]
  -[HMDCameraClipSegmentMetadata setHasHeight:]
  -[HMDCameraClipSegmentMetadata hasWidth]
  -[HMDCameraClipSegmentMetadata copyTo:]
  -[HMDCameraClipSegmentMetadata width]
  -[HMDCameraClipSegmentMetadata type]
  -[HMDCameraClipSegmentMetadata height]
  -[HMDCameraClipSegmentMetadata StringAsType:]
  -[HMDCameraClipSegmentMetadata setWidth:]
  -[HMDCameraClipSegmentMetadata setTimeOffset:]
  -[HMDCameraClipSegmentMetadata duration]
  -[HMDCameraClipSegmentMetadata mergeFrom:]
  -[HMDCameraClipSegmentMetadata setType:]
  -[HMDCameraClipSegmentMetadata dictionaryRepresentation]
  -[HMDCameraClipSegmentMetadata copyWithZone:]
  -[HMDCameraClipSegmentMetadata hasType]
  -[HMDCameraClipSegmentMetadata setHeight:]
  -[HMDCameraClipSegmentMetadata readFrom:]
  -[HMDCameraClipSegmentMetadata timeOffset]
  -[HMDCameraClipSegmentMetadata setHasDuration:]
  -[HMDCameraClipSegmentMetadata writeTo:]
  -[HMDCameraClipSegmentMetadata setByteOffset:]
  -[HMDCameraClipSegmentMetadata isEqual:]
  -[HMDCameraClipSegmentMetadata byteOffset]
  -[HMDCameraClipSegmentMetadata setByteLength:]
  -[HMDCameraClipSegmentMetadata byteLength]
  -[HMDCameraClipSegmentMetadata setHasByteOffset:]
  -[HMDCameraClipSegmentMetadata hasByteOffset]
  -[HMDCameraClipSegmentMetadata setHasByteLength:]
  -[HMDCameraClipSegmentMetadata hasByteLength]
  -[HMDCameraClipSegmentMetadata setHasTimeOffset:]
  -[HMDCameraClipSegmentMetadata hasTimeOffset]


HMDWHASettingEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *keyPath
 @property  AWDHomeKitValue *value

  // class methods
  +[HMDWHASettingEvent eventWithKeyPath:value:]

  // instance methods
  -[HMDWHASettingEvent .cxx_destruct]
  -[HMDWHASettingEvent keyPath]
  -[HMDWHASettingEvent setValue:]
  -[HMDWHASettingEvent value]
  -[HMDWHASettingEvent setKeyPath:]
  -[HMDWHASettingEvent AWDMessageType]
  -[HMDWHASettingEvent metricForAWD]


HMDAppleMediaAccessoriesStateManagerMetricsDispatcher : HMFObject <HMFLogging>
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher logCategory]

  // instance methods
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher identifier]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher logIdentifier]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher .cxx_destruct]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher logEventSubmitter]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher initWithIdentifier:logEventSubmitter:]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher submitMatchingIdentifierEventWithMatchingCount:]
  -[HMDAppleMediaAccessoriesStateManagerMetricsDispatcher submitMatchingIdentifierRemovalEventWithRemovalCount:]


HMDLogEventHistograms : NSObject
  // class methods
  +[HMDLogEventHistograms initialize]
  +[HMDLogEventHistograms memoryHistogram]
  +[HMDLogEventHistograms latencyHistogram]
  +[HMDLogEventHistograms successRateHistogram]
  +[HMDLogEventHistograms lowVolumeHistogram]
  +[HMDLogEventHistograms highVolumeHistogram]
  +[HMDLogEventHistograms configurationDataHistogram]
  +[HMDLogEventHistograms fileSizeHistogram]


HMDCameraStreamSnapshotCapture : HMFObject <HMDVideoStreamLastDecodedFrameDelegate, HMFTimerDelegate, HMFLogging>
 @property  HMDVideoStreamInterface *videoStreamInterface
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamSnapshotCapture logCategory]

  // instance methods
  -[HMDCameraStreamSnapshotCapture timerDidFire:]
  -[HMDCameraStreamSnapshotCapture logIdentifier]
  -[HMDCameraStreamSnapshotCapture .cxx_destruct]
  -[HMDCameraStreamSnapshotCapture videoStream:didGetLastDecodedFrame:]
  -[HMDCameraStreamSnapshotCapture videoStreamInterface]
  -[HMDCameraStreamSnapshotCapture initWithWorkQueue:videoStreamInterface:delegate:delegateQueue:]
  -[HMDCameraStreamSnapshotCapture captureCurrentFrame]
  -[HMDCameraStreamSnapshotCapture captureLastFrame]


HMDRemoteEventRouterProtoServerMessage : PBCodable <NSCopying>
 @property  BOOL hasIdentifier
 @property  NSString *identifier
 @property  BOOL hasUpdatedEvents
 @property  HMDRemoteEventRouterProtoEventsMessage *updatedEvents
 @property  BOOL hasConnectResponse
 @property  HMDRemoteEventRouterProtoConnectResponse *connectResponse
 @property  BOOL hasChangeRegistrationsResponse
 @property  HMDRemoteEventRouterProtoChangeRegistrationsResponse *changeRegistrationsResponse
 @property  BOOL hasMessage
 @property  int message

  // instance methods
  -[HMDRemoteEventRouterProtoServerMessage setMessage:]
  -[HMDRemoteEventRouterProtoServerMessage identifier]
  -[HMDRemoteEventRouterProtoServerMessage copyTo:]
  -[HMDRemoteEventRouterProtoServerMessage hasIdentifier]
  -[HMDRemoteEventRouterProtoServerMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoServerMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoServerMessage setIdentifier:]
  -[HMDRemoteEventRouterProtoServerMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoServerMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoServerMessage readFrom:]
  -[HMDRemoteEventRouterProtoServerMessage writeTo:]
  -[HMDRemoteEventRouterProtoServerMessage message]
  -[HMDRemoteEventRouterProtoServerMessage isEqual:]
  -[HMDRemoteEventRouterProtoServerMessage hasMessage]
  -[HMDRemoteEventRouterProtoServerMessage setHasMessage:]
  -[HMDRemoteEventRouterProtoServerMessage hasUpdatedEvents]
  -[HMDRemoteEventRouterProtoServerMessage setUpdatedEvents:]
  -[HMDRemoteEventRouterProtoServerMessage hasConnectResponse]
  -[HMDRemoteEventRouterProtoServerMessage setConnectResponse:]
  -[HMDRemoteEventRouterProtoServerMessage hasChangeRegistrationsResponse]
  -[HMDRemoteEventRouterProtoServerMessage setChangeRegistrationsResponse:]
  -[HMDRemoteEventRouterProtoServerMessage messageAsString:]
  -[HMDRemoteEventRouterProtoServerMessage StringAsMessage:]
  -[HMDRemoteEventRouterProtoServerMessage clearOneofValuesForMessage]
  -[HMDRemoteEventRouterProtoServerMessage updatedEvents]
  -[HMDRemoteEventRouterProtoServerMessage connectResponse]
  -[HMDRemoteEventRouterProtoServerMessage changeRegistrationsResponse]


HMDXPCBackgroundMessageFilter : HMFMessageFilter
  // class methods
  +[HMDXPCBackgroundMessageFilter filterMessage:withPolicies:error:]


HMDSupportedSiriAudioConfigurations : NSObject
 @property  long long siriInputType
 @property  NSArray *supportedConfigurations
 @property  HAPAudioStreamCodecConfiguration *selectedConfiguration

  // instance methods
  -[HMDSupportedSiriAudioConfigurations setSelectedConfiguration:]
  -[HMDSupportedSiriAudioConfigurations selectedConfiguration]
  -[HMDSupportedSiriAudioConfigurations .cxx_destruct]
  -[HMDSupportedSiriAudioConfigurations supportedConfigurations]
  -[HMDSupportedSiriAudioConfigurations setSupportedConfigurations:]
  -[HMDSupportedSiriAudioConfigurations siriInputType]
  -[HMDSupportedSiriAudioConfigurations setSiriInputType:]


AWDHomeKitCameraRecordingFragmentAnalyzed : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned long duration
 @property  BOOL hasCameraUUID
 @property  NSString *cameraUUID
 @property  BOOL hasSessionUUID
 @property  NSString *sessionUUID
 @property  BOOL hasSequenceNumber
 @property  unsigned long sequenceNumber
 @property  BOOL hasAnalysisResultCode
 @property  unsigned long analysisResultCode
 @property  BOOL hasClipModelID
 @property  NSString *clipModelID
 @property  BOOL hasRecordingReason
 @property  int recordingReason

  // instance methods
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setDuration:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasSequenceNumber]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setSessionUUID:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed sessionUUID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setHasSequenceNumber:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setTimestamp:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasDuration]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed copyTo:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setSequenceNumber:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed .cxx_destruct]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed duration]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed mergeFrom:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setHasTimestamp:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed dictionaryRepresentation]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasTimestamp]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed copyWithZone:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed sequenceNumber]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed timestamp]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed readFrom:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setHasDuration:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed writeTo:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed isEqual:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasSessionUUID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed cameraUUID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed clipModelID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed analysisResultCode]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setAnalysisResultCode:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setClipModelID:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed recordingReason]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setRecordingReason:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasCameraUUID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setHasAnalysisResultCode:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasAnalysisResultCode]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasClipModelID]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setHasRecordingReason:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed hasRecordingReason]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed recordingReasonAsString:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed StringAsRecordingReason:]
  -[AWDHomeKitCameraRecordingFragmentAnalyzed setCameraUUID:]


HMDMediaDestinationsMessageHandler : HMDMediaDestinationMessageHandler
 @property  <HMDMediaDestinationsMessageHandlerDataSource> *dataSource
 @property  <HMDMediaDestinationsMessageHandlerDelegate> *delegate

  // instance methods
  -[HMDMediaDestinationsMessageHandler dataSource]
  -[HMDMediaDestinationsMessageHandler setDelegate:]
  -[HMDMediaDestinationsMessageHandler delegate]
  -[HMDMediaDestinationsMessageHandler .cxx_destruct]
  -[HMDMediaDestinationsMessageHandler setDataSource:]
  -[HMDMediaDestinationsMessageHandler initWithDestination:messageDispatcher:notificationCenter:dataSource:delegate:]
  -[HMDMediaDestinationsMessageHandler handleUpdatedDestination:]
  -[HMDMediaDestinationsMessageHandler handleMediaDestinationUpdatedNotification:]


HMDCharacteristicEvent : HMDCharacteristicEventBase <NSSecureCoding>
 @property  id eventValue

  // class methods
  +[HMDCharacteristicEvent supportsSecureCoding]
  +[HMDCharacteristicEvent logCategory]

  // instance methods
  -[HMDCharacteristicEvent dumpState]
  -[HMDCharacteristicEvent encodeWithCoder:]
  -[HMDCharacteristicEvent .cxx_destruct]
  -[HMDCharacteristicEvent initWithCoder:]
  -[HMDCharacteristicEvent eventValue]
  -[HMDCharacteristicEvent setEventValue:]
  -[HMDCharacteristicEvent createPayload]
  -[HMDCharacteristicEvent initWithModel:home:]
  -[HMDCharacteristicEvent _transactionObjectUpdated:newValues:message:]
  -[HMDCharacteristicEvent _transactionObjectRemoved:message:]
  -[HMDCharacteristicEvent modelObjectWithChangeType:]
  -[HMDCharacteristicEvent emptyModelObject]
  -[HMDCharacteristicEvent _handleUpdateRequest:]
  -[HMDCharacteristicEvent analyticsTriggerEventData]
  -[HMDCharacteristicEvent _evaluateNewValue:]
  -[HMDCharacteristicEvent _compareEventValue:]


HMDCharacteristicEventModel : HMDCharacteristicEventBaseModel
 @property  id eventValue

  // class methods
  +[HMDCharacteristicEventModel properties]
  +[HMDCharacteristicEventModel eventModelWithDictionary:home:eventTriggerUUID:message:checkForSupport:error:]


HMDPhoneCallObserver : HMFObject <CXCallObserverDelegate>
 @property  CXCallObserver *observer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDPhoneCallObserver sharedPhoneCallObserver]

  // instance methods
  -[HMDPhoneCallObserver startObserving]
  -[HMDPhoneCallObserver .cxx_destruct]
  -[HMDPhoneCallObserver observer]
  -[HMDPhoneCallObserver callObserver:callChanged:]
  -[HMDPhoneCallObserver hasActiveCalls]
  -[HMDPhoneCallObserver isActiveCall:]


AWDHomeKitDatabaseCKOperationCompletionEvent : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDidSucceed
 @property  BOOL didSucceed
 @property  BOOL hasErrorCode
 @property  long long errorCode
 @property  BOOL hasContainerType
 @property  int containerType
 @property  BOOL hasErrorDomain
 @property  NSString *errorDomain

  // instance methods
  -[AWDHomeKitDatabaseCKOperationCompletionEvent hasErrorCode]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setErrorCode:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent errorCode]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setErrorDomain:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setTimestamp:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent copyTo:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent hasErrorDomain]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent errorDomain]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent .cxx_destruct]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setHasErrorCode:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent mergeFrom:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setHasTimestamp:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent dictionaryRepresentation]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent hasTimestamp]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent copyWithZone:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent timestamp]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent readFrom:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent writeTo:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent isEqual:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent containerType]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setContainerType:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent didSucceed]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setDidSucceed:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setHasContainerType:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent hasContainerType]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent containerTypeAsString:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent StringAsContainerType:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent setHasDidSucceed:]
  -[AWDHomeKitDatabaseCKOperationCompletionEvent hasDidSucceed]


HMDSiriEndpointProfileRoutineConfigurationEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *accessoryCategoryType
 @property  HMDSiriEndpointProfileFields *profileFields
 @property  HMDSiriEndpointProfileAccessorySettingFields *accessorySettingFields
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDSiriEndpointProfileRoutineConfigurationEvent eventName]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent attributeDescriptions]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent .cxx_destruct]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent serializedEvent]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent initWithAccessoryCategoryType:profileFields:accessorySettingFields:]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent accessoryCategoryType]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent profileFields]
  -[HMDSiriEndpointProfileRoutineConfigurationEvent accessorySettingFields]


HMDHomeSaveRequest : HMFObject
 @property  HMDHome *home
 @property  NSString *reason
 @property  NSDictionary *information
 @property  unsigned long saveOptions
 @property  BOOL objectChange
 @property  BOOL incrementGeneration

  // instance methods
  -[HMDHomeSaveRequest home]
  -[HMDHomeSaveRequest .cxx_destruct]
  -[HMDHomeSaveRequest reason]
  -[HMDHomeSaveRequest information]
  -[HMDHomeSaveRequest saveOptions]
  -[HMDHomeSaveRequest objectChange]
  -[HMDHomeSaveRequest _initWithHome:reason:information:postSyncNotification:objectChange:saveOptions:]
  -[HMDHomeSaveRequest initWithHome:reason:information:postSyncNotification:objectChange:]
  -[HMDHomeSaveRequest initWithReason:information:postSyncNotification:]
  -[HMDHomeSaveRequest initWithReason:information:saveOptions:]
  -[HMDHomeSaveRequest _updateSaveOptions:reason:]
  -[HMDHomeSaveRequest incrementGeneration]


HMDLostModeMessageFilter : HMFMessageFilter
  // class methods
  +[HMDLostModeMessageFilter filterMessage:withPolicies:error:]


HMDAccessorySetupCoordinator : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  CHIPAccessoryServerBrowser *chipAccessoryServerBrowser
 @property  HMDCHIPDataSource *chipDataSource
 @property  @? urlStringCHIPAccessorySetupPayloadFactory
 @property  @? decimalStringRepresentationCHIPAccessorySetupPayloadFactory
 @property  @? payloadCHIPAccessorySetupPayloadFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessorySetupCoordinator logCategory]

  // instance methods
  -[HMDAccessorySetupCoordinator configure]
  -[HMDAccessorySetupCoordinator logIdentifier]
  -[HMDAccessorySetupCoordinator workQueue]
  -[HMDAccessorySetupCoordinator .cxx_destruct]
  -[HMDAccessorySetupCoordinator messageTargetUUID]
  -[HMDAccessorySetupCoordinator messageReceiveQueue]
  -[HMDAccessorySetupCoordinator messageDispatcher]
  -[HMDAccessorySetupCoordinator chipAccessoryServerBrowser]
  -[HMDAccessorySetupCoordinator handleCreateCHIPSetupAccessoryPayloadMessage:]
  -[HMDAccessorySetupCoordinator handleStageCHIPAccessoryPairingMessage:]
  -[HMDAccessorySetupCoordinator handleCreateCHIPSetupCodeMessage:]
  -[HMDAccessorySetupCoordinator handleCancelStagedCHIPAccessoryPairingMessage:]
  -[HMDAccessorySetupCoordinator initWithWorkQueue:messageDispatcher:chipAccessoryServerBrowser:chipDataSource:]
  -[HMDAccessorySetupCoordinator createCHIPSetupAccessoryPayloadWithSetupPayloadURL:error:]
  -[HMDAccessorySetupCoordinator createSetupAccessoryPayloadWithCHIPSetupPayload:error:]
  -[HMDAccessorySetupCoordinator _createCHIPSetupAccessoryPayloadWithSetupPayloadDecimalStringRepresentation:error:]
  -[HMDAccessorySetupCoordinator _setupPayloadWithCHIPSetupPayload:setupPayloadURL:]
  -[HMDAccessorySetupCoordinator chipDataSource]
  -[HMDAccessorySetupCoordinator urlStringCHIPAccessorySetupPayloadFactory]
  -[HMDAccessorySetupCoordinator setUrlStringCHIPAccessorySetupPayloadFactory:]
  -[HMDAccessorySetupCoordinator decimalStringRepresentationCHIPAccessorySetupPayloadFactory]
  -[HMDAccessorySetupCoordinator setDecimalStringRepresentationCHIPAccessorySetupPayloadFactory:]
  -[HMDAccessorySetupCoordinator payloadCHIPAccessorySetupPayloadFactory]
  -[HMDAccessorySetupCoordinator setPayloadCHIPAccessorySetupPayloadFactory:]


HMDNetworkRouterSatelliteProfile : HMDAccessoryProfile
 @property  long long satelliteStatus
 @property  unsigned long networkStatus

  // class methods
  +[HMDNetworkRouterSatelliteProfile supportsSecureCoding]
  +[HMDNetworkRouterSatelliteProfile logCategory]

  // instance methods
  -[HMDNetworkRouterSatelliteProfile _registerForNotifications]
  -[HMDNetworkRouterSatelliteProfile encodeWithCoder:]
  -[HMDNetworkRouterSatelliteProfile dealloc]
  -[HMDNetworkRouterSatelliteProfile setNetworkStatus:]
  -[HMDNetworkRouterSatelliteProfile networkStatus]
  -[HMDNetworkRouterSatelliteProfile isEqual:]
  -[HMDNetworkRouterSatelliteProfile unconfigure]
  -[HMDNetworkRouterSatelliteProfile registerForMessages]
  -[HMDNetworkRouterSatelliteProfile runtimeState]
  -[HMDNetworkRouterSatelliteProfile handleAccessoryConnected:]
  -[HMDNetworkRouterSatelliteProfile handleCharacteristicsChangedNotification:]
  -[HMDNetworkRouterSatelliteProfile handleInitialState]
  -[HMDNetworkRouterSatelliteProfile _handleCharacteristicChanges:]
  -[HMDNetworkRouterSatelliteProfile handleAccessoryIsReachable:]
  -[HMDNetworkRouterSatelliteProfile initWithRouterSatelliteService:msgDispatcher:]
  -[HMDNetworkRouterSatelliteProfile __notifyClientsOfNetworkStatusUpdate:]
  -[HMDNetworkRouterSatelliteProfile _updateNetworkStatus]
  -[HMDNetworkRouterSatelliteProfile __updateSatelliteStatus:]
  -[HMDNetworkRouterSatelliteProfile _handleCharacteristicsChangedPayload:]
  -[HMDNetworkRouterSatelliteProfile _registerForRemoteNotifications]
  -[HMDNetworkRouterSatelliteProfile __handleAccessoryConnected]
  -[HMDNetworkRouterSatelliteProfile _readAndProcessCharacteristics:withCompletion:]
  -[HMDNetworkRouterSatelliteProfile _readAndUpdateCharacteristic]
  -[HMDNetworkRouterSatelliteProfile satelliteStatus]
  -[HMDNetworkRouterSatelliteProfile setSatelliteStatus:]


HMDCameraSnapshotRemoteStreamReceiver : HMDCameraSnapshotReceiver <HMDCameraGetSnapshotProtocol, HMDCameraSnapshotReceiverProtocol, HMDCameraSnapshotIDSStreamReceiverDelegate, HMFLogging>
 @property  <HMDCameraSnapshotRemoteStreamReceiverDelegate> *delegate
 @property  HMDCameraSnapshotIDSStreamReceiver *relayReceiver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotRemoteStreamReceiver logCategory]

  // instance methods
  -[HMDCameraSnapshotRemoteStreamReceiver logIdentifier]
  -[HMDCameraSnapshotRemoteStreamReceiver delegate]
  -[HMDCameraSnapshotRemoteStreamReceiver dealloc]
  -[HMDCameraSnapshotRemoteStreamReceiver .cxx_destruct]
  -[HMDCameraSnapshotRemoteStreamReceiver getSnapshot:]
  -[HMDCameraSnapshotRemoteStreamReceiver _getSnapshot:]
  -[HMDCameraSnapshotRemoteStreamReceiver relayReceiver]
  -[HMDCameraSnapshotRemoteStreamReceiver snapShotSendFailed:]
  -[HMDCameraSnapshotRemoteStreamReceiver initWithSessionID:workQueue:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:residentMessageHandler:]
  -[HMDCameraSnapshotRemoteStreamReceiver _callGettingImageDelegate:]
  -[HMDCameraSnapshotRemoteStreamReceiver _callDidSaveImageDelegateWithError:]
  -[HMDCameraSnapshotRemoteStreamReceiver setRelayReceiver:]
  -[HMDCameraSnapshotRemoteStreamReceiver relayReceiver:didReceiveFile:]


HMDMediaDestinationControllerModel : HMDBackingStoreModelObject <HMFLogging>
 @property  NSArray *availableDestinationModelIdentifierStrings
 @property  NSNumber *type
 @property  NSArray *availableDestinationModelIdentifiers
 @property  NSUUID *destinationModelIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationControllerModel properties]
  +[HMDMediaDestinationControllerModel logCategory]

  // instance methods
  -[HMDMediaDestinationControllerModel logIdentifier]
  -[HMDMediaDestinationControllerModel attributeDescriptions]
  -[HMDMediaDestinationControllerModel privateDescription]
  -[HMDMediaDestinationControllerModel initWithData:changeType:]
  -[HMDMediaDestinationControllerModel availableDestinationModelIdentifiers]
  -[HMDMediaDestinationControllerModel setAvailableDestinationModelIdentifiers:]


HMDHH2AutoMigrationMonitor : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHH2AutoMigrationMonitor logCategory]

  // instance methods
  -[HMDHH2AutoMigrationMonitor .cxx_destruct]
  -[HMDHH2AutoMigrationMonitor stopMonitoring]
  -[HMDHH2AutoMigrationMonitor startMonitoring]
  -[HMDHH2AutoMigrationMonitor handleFMFStatusUpdatedNotification:]
  -[HMDHH2AutoMigrationMonitor initWithHomeManager:eligibilityChecker:]
  -[HMDHH2AutoMigrationMonitor initWithHomeManager:fmfHandler:backgroundTaskScheduler:eligibilityChecker:featuresDataSource:]
  -[HMDHH2AutoMigrationMonitor attemptAutoMigrationWithCompletionHandler:]


AWDHomeKitCameraRecordingBulkSendDataRead : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned long duration
 @property  BOOL hasCameraUUID
 @property  NSString *cameraUUID
 @property  BOOL hasSessionUUID
 @property  NSString *sessionUUID
 @property  BOOL hasSequenceNumber
 @property  unsigned long sequenceNumber
 @property  BOOL hasChunkSequenceNumber
 @property  unsigned long chunkSequenceNumber
 @property  BOOL hasBytesRead
 @property  unsigned long bytesRead
 @property  BOOL hasStatus
 @property  unsigned int status
 @property  BOOL hasBitRate
 @property  unsigned long bitRate
 @property  BOOL hasImageHeight
 @property  unsigned long imageHeight
 @property  BOOL hasImageWidth
 @property  unsigned long imageWidth
 @property  BOOL hasIFrameInterval
 @property  unsigned long iFrameInterval

  // instance methods
  -[AWDHomeKitCameraRecordingBulkSendDataRead setDuration:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasSequenceNumber]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setSessionUUID:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead sessionUUID]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasSequenceNumber:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setTimestamp:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasDuration]
  -[AWDHomeKitCameraRecordingBulkSendDataRead copyTo:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasStatus:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasStatus]
  -[AWDHomeKitCameraRecordingBulkSendDataRead status]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setStatus:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setSequenceNumber:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead .cxx_destruct]
  -[AWDHomeKitCameraRecordingBulkSendDataRead duration]
  -[AWDHomeKitCameraRecordingBulkSendDataRead mergeFrom:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasTimestamp:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead dictionaryRepresentation]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasTimestamp]
  -[AWDHomeKitCameraRecordingBulkSendDataRead copyWithZone:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead sequenceNumber]
  -[AWDHomeKitCameraRecordingBulkSendDataRead timestamp]
  -[AWDHomeKitCameraRecordingBulkSendDataRead readFrom:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasDuration:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead writeTo:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead bitRate]
  -[AWDHomeKitCameraRecordingBulkSendDataRead isEqual:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead imageWidth]
  -[AWDHomeKitCameraRecordingBulkSendDataRead imageHeight]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setBitRate:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasSessionUUID]
  -[AWDHomeKitCameraRecordingBulkSendDataRead bytesRead]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasBitRate:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasBitRate]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setImageHeight:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setImageWidth:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead cameraUUID]
  -[AWDHomeKitCameraRecordingBulkSendDataRead iFrameInterval]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasCameraUUID]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setCameraUUID:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setChunkSequenceNumber:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasChunkSequenceNumber:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasChunkSequenceNumber]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setBytesRead:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasBytesRead:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasBytesRead]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasImageHeight:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasImageHeight]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasImageWidth:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasImageWidth]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setIFrameInterval:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead setHasIFrameInterval:]
  -[AWDHomeKitCameraRecordingBulkSendDataRead hasIFrameInterval]
  -[AWDHomeKitCameraRecordingBulkSendDataRead chunkSequenceNumber]


HMDFMF : NSObject
 @property  NSNumber *number
 @property  unsigned long value

  // class methods
  +[HMDFMF fmfStatusWithValue:]
  +[HMDFMF fmfStatusWithNumber:]
  +[HMDFMF fmfStatusWithMessage:]
  +[HMDFMF fmfStatusWithDict:]
  +[HMDFMF fmfStatusWithCoder:]

  // instance methods
  -[HMDFMF number]
  -[HMDFMF value]
  -[HMDFMF isEqual:]
  -[HMDFMF initWithNumber:]
  -[HMDFMF addToCoder:]
  -[HMDFMF addToPayload:]


HMDBackingStoreTransactionItem : HMFObject <HMDBackingStoreChangeObject>
 @property  HMFMessage *message
 @property  HMDBackingStoreModelObject *change
 @property  NSSet *dependentUUIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBackingStoreTransactionItem change]
  -[HMDBackingStoreTransactionItem .cxx_destruct]
  -[HMDBackingStoreTransactionItem message]
  -[HMDBackingStoreTransactionItem dependentUUIDs]
  -[HMDBackingStoreTransactionItem initWithChange:message:]


HMDBackingStoreTransactionBlock : HMFObject <HMFLogging>
 @property  HMDBackingStore *backingStore
 @property  NSMutableArray *objects
 @property  BOOL committed
 @property  HMDBackingStoreTransactionOptions *options
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreTransactionBlock logCategory]
  +[HMDBackingStoreTransactionBlock sort:]

  // instance methods
  -[HMDBackingStoreTransactionBlock save:]
  -[HMDBackingStoreTransactionBlock add:]
  -[HMDBackingStoreTransactionBlock logIdentifier]
  -[HMDBackingStoreTransactionBlock setCommitted:]
  -[HMDBackingStoreTransactionBlock run:]
  -[HMDBackingStoreTransactionBlock run]
  -[HMDBackingStoreTransactionBlock .cxx_destruct]
  -[HMDBackingStoreTransactionBlock options]
  -[HMDBackingStoreTransactionBlock setObjects:]
  -[HMDBackingStoreTransactionBlock objects]
  -[HMDBackingStoreTransactionBlock setBackingStore:]
  -[HMDBackingStoreTransactionBlock backingStore]
  -[HMDBackingStoreTransactionBlock save]
  -[HMDBackingStoreTransactionBlock committed]
  -[HMDBackingStoreTransactionBlock dumpDebug:]
  -[HMDBackingStoreTransactionBlock dumpDebug]
  -[HMDBackingStoreTransactionBlock dumpWithVerbosity:prefix:logType:]
  -[HMDBackingStoreTransactionBlock initWithBackingStore:options:label:]
  -[HMDBackingStoreTransactionBlock add:withMessage:]
  -[HMDBackingStoreTransactionBlock addObjects:]
  -[HMDBackingStoreTransactionBlock runWithoutSave:]


HMDDeviceCapabilities : HMFObject <HMDBackingStoreObjectProtocol, HMDBackingStoreModelBackedObjectProtocol, HMFLogging, HMAccessoryCapabilities, HMResidentCapabilities, NSCopying, NSSecureCoding>
 @property  BOOL messagedHomePodSettingsFeatureEnabled
 @property  NSUUID *modelParentIdentifier
 @property  BOOL supportsKeychainSync
 @property  BOOL supportsDeviceSetup
 @property  BOOL supportsKeyTransferClient
 @property  BOOL supportsKeyTransferServer
 @property  BOOL supportsStandaloneMode
 @property  BOOL supportsCloudDataSync
 @property  BOOL supportsWholeHouseAudio
 @property  BOOL supportsAssistantAccessControl
 @property  BOOL residentCapable
 @property  BOOL remoteGatewayCapable
 @property  BOOL supportsHomeInvitation
 @property  BOOL supportsTargetControl
 @property  BOOL supportsMultiUser
 @property  BOOL supportsHomeLevelLocationServiceSetting
 @property  BOOL supportsCompanionInitiatedRestart
 @property  BOOL supportsCameraRecording
 @property  BOOL supportsRouterManagement
 @property  BOOL supportsShortcutActions
 @property  BOOL supportsMediaActions
 @property  BOOL supportsCameraSignificantEventNotifications
 @property  BOOL supportsFirmwareUpdate
 @property  BOOL supportsResidentFirmwareUpdate
 @property  BOOL supportsCameraActivityZones
 @property  BOOL supportsMusicAlarm
 @property  BOOL supportsFaceClassification
 @property  BOOL supportsNaturalLighting
 @property  BOOL supportsIDSActivityMonitorPresence
 @property  BOOL supportsCameraRecordingReachabilityNotifications
 @property  BOOL supportsAnnounce
 @property  BOOL supportsThirdPartyMusic
 @property  BOOL supportsPreferredMediaUser
 @property  BOOL supportsDoorbellChime
 @property  BOOL supportsUserMediaSettings
 @property  BOOL supportsThreadBorderRouter
 @property  BOOL supportsSiriEndpointSetup
 @property  BOOL supportsHomeHub
 @property  BOOL supportsWakeOnLAN
 @property  BOOL supportsLockNotificationContext
 @property  BOOL supportsCoordinationDoorbellChime
 @property  BOOL supportsWalletKey
 @property  BOOL supportsCameraPackageDetection
 @property  BOOL supportsAccessCodes
 @property  BOOL supportsCHIP
 @property  BOOL supportsUnifiedMediaNotifications
 @property  BOOL supportsManagedConfigurationProfile
 @property  BOOL supportsCaptiveNetworks
 @property  BOOL supportsModernTransport
 @property  BOOL supportsResidentFirstAccessoryCommunication
 @property  BOOL supportsMessagedHomePodSettings
 @property  BOOL supportsThreadNetworkCredentialSharing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  Class modelClass
 @property  NSUUID *modelIdentifier
 @property  BOOL isResidentCapable

  // class methods
  +[HMDDeviceCapabilities supportsSecureCoding]
  +[HMDDeviceCapabilities deviceCapabilities]
  +[HMDDeviceCapabilities logCategory]
  +[HMDDeviceCapabilities isCompanionCapable]
  +[HMDDeviceCapabilities supportsLocalization]
  +[HMDDeviceCapabilities supportsReceivingRemoteCameraStream]
  +[HMDDeviceCapabilities supportsBidirectionalAudioForCameraStreaming]
  +[HMDDeviceCapabilities supportsCameraSnapshotRequestViaRelay]
  +[HMDDeviceCapabilities supportsHomeApp]
  +[HMDDeviceCapabilities supportsIntentDonation]
  +[HMDDeviceCapabilities supportsSymptomsHandler]
  +[HMDDeviceCapabilities supportsDeviceLock]
  +[HMDDeviceCapabilities supportsCustomerReset]
  +[HMDDeviceCapabilities isAppleMediaAccessory]
  +[HMDDeviceCapabilities appleMediaAccessoryVariant]
  +[HMDDeviceCapabilities requiresHomePodMiniPairing]
  +[HMDDeviceCapabilities supportsRemoteAccess]
  +[HMDDeviceCapabilities supportsTargetControllerAutoConfigure]
  +[HMDDeviceCapabilities supportsUserNotifications]
  +[HMDDeviceCapabilities supportsDismissUserNotificationAndDialog]
  +[HMDDeviceCapabilities supportsAddingAccessory]
  +[HMDDeviceCapabilities supportsSyncingToSharedUsers]
  +[HMDDeviceCapabilities supportsBackboard]
  +[HMDDeviceCapabilities supportsHomeKitDataStream]
  +[HMDDeviceCapabilities supportsBulletinBoard]
  +[HMDDeviceCapabilities supportsStereoPairingV1]
  +[HMDDeviceCapabilities supportsStereoPairingV2]
  +[HMDDeviceCapabilities supportsStereoPairingV3]
  +[HMDDeviceCapabilities supportsSiriUnsecuringActionsWithNoPasscode]
  +[HMDDeviceCapabilities supportsSiriUnsecuringActionsWithWatchAuth]
  +[HMDDeviceCapabilities supportsAudioDestinationControllerCreation]
  +[HMDDeviceCapabilities supportsAudioDestinationCreation]
  +[HMDDeviceCapabilities supportedPairingCapabilities]
  +[HMDDeviceCapabilities deviceCapabilitiesModelIdentifierWithParentIdentifier:]

  // instance methods
  -[HMDDeviceCapabilities modelClass]
  -[HMDDeviceCapabilities supportsHomeHub]
  -[HMDDeviceCapabilities supportsAnnounce]
  -[HMDDeviceCapabilities supportsHomeLevelLocationServiceSetting]
  -[HMDDeviceCapabilities supportsCoordinationDoorbellChime]
  -[HMDDeviceCapabilities supportsKeychainSync]
  -[HMDDeviceCapabilities encodeWithCoder:]
  -[HMDDeviceCapabilities supportsStandaloneMode]
  -[HMDDeviceCapabilities supportsCloudDataSync]
  -[HMDDeviceCapabilities modelIdentifier]
  -[HMDDeviceCapabilities attributeDescriptions]
  -[HMDDeviceCapabilities supportsThreadBorderRouter]
  -[HMDDeviceCapabilities .cxx_destruct]
  -[HMDDeviceCapabilities supportsUserMediaSettings]
  -[HMDDeviceCapabilities supportsKeyTransferServer]
  -[HMDDeviceCapabilities supportsMultiUser]
  -[HMDDeviceCapabilities supportsAssistantAccessControl]
  -[HMDDeviceCapabilities supportsMusicAlarm]
  -[HMDDeviceCapabilities supportsThirdPartyMusic]
  -[HMDDeviceCapabilities supportsPreferredMediaUser]
  -[HMDDeviceCapabilities supportsMediaActions]
  -[HMDDeviceCapabilities supportsCompanionInitiatedRestart]
  -[HMDDeviceCapabilities supportsDeviceSetup]
  -[HMDDeviceCapabilities shortDescription]
  -[HMDDeviceCapabilities supportsMessagedHomePodSettings]
  -[HMDDeviceCapabilities copyWithZone:]
  -[HMDDeviceCapabilities supportsCaptiveNetworks]
  -[HMDDeviceCapabilities supportsWholeHouseAudio]
  -[HMDDeviceCapabilities supportsManagedConfigurationProfile]
  -[HMDDeviceCapabilities supportsKeyTransferClient]
  -[HMDDeviceCapabilities supportsHomeInvitation]
  -[HMDDeviceCapabilities supportsTargetControl]
  -[HMDDeviceCapabilities isEqual:]
  -[HMDDeviceCapabilities initWithCoder:]
  -[HMDDeviceCapabilities supportsDoorbellChime]
  -[HMDDeviceCapabilities isResidentCapable]
  -[HMDDeviceCapabilities supportsCameraRecording]
  -[HMDDeviceCapabilities supportsRouterManagement]
  -[HMDDeviceCapabilities supportsShortcutActions]
  -[HMDDeviceCapabilities supportsCameraSignificantEventNotifications]
  -[HMDDeviceCapabilities supportsFirmwareUpdate]
  -[HMDDeviceCapabilities supportsResidentFirmwareUpdate]
  -[HMDDeviceCapabilities supportsCameraActivityZones]
  -[HMDDeviceCapabilities supportsFaceClassification]
  -[HMDDeviceCapabilities supportsNaturalLighting]
  -[HMDDeviceCapabilities supportsCameraRecordingReachabilityNotifications]
  -[HMDDeviceCapabilities supportsWakeOnLAN]
  -[HMDDeviceCapabilities supportsLockNotificationContext]
  -[HMDDeviceCapabilities supportsWalletKey]
  -[HMDDeviceCapabilities supportsCameraPackageDetection]
  -[HMDDeviceCapabilities supportsAccessCodes]
  -[HMDDeviceCapabilities supportsCHIP]
  -[HMDDeviceCapabilities supportsSiriEndpointSetup]
  -[HMDDeviceCapabilities supportsUnifiedMediaNotifications]
  -[HMDDeviceCapabilities supportsResidentFirstAccessoryCommunication]
  -[HMDDeviceCapabilities supportsThreadNetworkCredentialSharing]
  -[HMDDeviceCapabilities initWithObjectModel:]
  -[HMDDeviceCapabilities transactionObjectUpdated:newValues:message:]
  -[HMDDeviceCapabilities transactionObjectRemoved:message:]
  -[HMDDeviceCapabilities modelObjectWithChangeType:version:]
  -[HMDDeviceCapabilities backingStoreObjectsWithChangeType:version:]
  -[HMDDeviceCapabilities modelBackedObjects]
  -[HMDDeviceCapabilities modelParentIdentifier]
  -[HMDDeviceCapabilities setModelParentIdentifier:]
  -[HMDDeviceCapabilities initWithProductInfo:]
  -[HMDDeviceCapabilities initWithProductInfo:mobileGestaltClient:]
  -[HMDDeviceCapabilities initWithProductInfo:mobileGestaltClient:homekitVersion:]
  -[HMDDeviceCapabilities isRemoteGatewayCapable]
  -[HMDDeviceCapabilities supportsIDSActivityMonitorPresence]
  -[HMDDeviceCapabilities supportsModernTransport]
  -[HMDDeviceCapabilities isMessagedHomePodSettingsFeatureEnabled]
  -[HMDDeviceCapabilities setMessagedHomePodSettingsFeatureEnabled:]


HMDDeviceCapabilitiesModel : HMDBackingStoreModelObject
 @property  NSNumber *supportsKeychainSync
 @property  NSNumber *supportsDeviceSetup
 @property  NSNumber *supportsKeyTransferClient
 @property  NSNumber *supportsKeyTransferServer
 @property  NSNumber *supportsStandaloneMode
 @property  NSNumber *supportsCloudDataSync
 @property  NSNumber *supportsWholeHouseAudio
 @property  NSNumber *supportsAssistantAccessControl
 @property  NSNumber *residentCapable
 @property  NSNumber *remoteGatewayCapable
 @property  NSNumber *supportsHomeInvitation
 @property  NSNumber *supportsTargetControl
 @property  NSNumber *supportsMultiUser
 @property  NSNumber *supportsHomeLevelLocationServiceSetting
 @property  NSNumber *supportsCompanionInitiatedRestart
 @property  NSNumber *supportsCameraRecording
 @property  NSNumber *supportsRouterManagement
 @property  NSNumber *supportsShortcutActions
 @property  NSNumber *supportsMediaActions
 @property  NSNumber *supportsCameraSignificantEventNotifications
 @property  NSNumber *supportsCameraActivityZones
 @property  NSNumber *supportsMusicAlarm
 @property  NSNumber *supportsFirmwareUpdate
 @property  NSNumber *supportsResidentFirmwareUpdate
 @property  NSNumber *supportsFaceClassification
 @property  NSNumber *supportsNaturalLighting
 @property  NSNumber *supportsIDSActivityMonitorPresence
 @property  NSNumber *supportsCameraRecordingReachabilityNotifications
 @property  NSNumber *supportsAnnounce
 @property  NSNumber *supportsThirdPartyMusic
 @property  NSNumber *supportsPreferredMediaUser
 @property  NSNumber *supportsThreadBorderRouter
 @property  NSNumber *supportsDoorbellChime
 @property  NSNumber *supportsUserMediaSettings
 @property  NSNumber *supportsSiriEndpointSetup
 @property  NSNumber *supportsHomeHub
 @property  NSNumber *supportsWakeOnLAN
 @property  NSNumber *supportsLockNotificationContext
 @property  NSNumber *supportsCoordinationDoorbellChime
 @property  NSNumber *supportsWalletKey
 @property  NSNumber *supportsCameraPackageDetection
 @property  NSNumber *supportsAccessCodes
 @property  NSNumber *supportsCHIP
 @property  NSNumber *supportsUnifiedMediaNotifications
 @property  NSNumber *supportsManagedConfigurationProfile
 @property  NSNumber *supportsCaptiveNetworks
 @property  NSNumber *supportsModernTransport
 @property  NSNumber *supportsResidentFirstAccessoryCommunication
 @property  NSNumber *supportsMessagedHomePodSettings
 @property  NSNumber *supportsThreadNetworkCredentialSharing

  // class methods
  +[HMDDeviceCapabilitiesModel properties]
  +[HMDDeviceCapabilitiesModel schemaHashRoot]


HMDWalletPassLibrary : HMFObject <HMDWalletPassLibrary>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  PKPassLibrary *passLibrary
 @property  <HMDWalletPassLibraryDelegate> *delegate
 @property  NSString *secureElementIdentifier
 @property  NSSet *walletKeys
 @property  BOOL walletVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDWalletPassLibrary deleteKeyMaterialForSubCredentialId:]
  -[HMDWalletPassLibrary passLibrary]
  -[HMDWalletPassLibrary setDelegate:]
  -[HMDWalletPassLibrary isWalletVisible]
  -[HMDWalletPassLibrary workQueue]
  -[HMDWalletPassLibrary delegate]
  -[HMDWalletPassLibrary .cxx_destruct]
  -[HMDWalletPassLibrary start]
  -[HMDWalletPassLibrary secureElementIdentifier]
  -[HMDWalletPassLibrary acquireAssertionOfType:withReason:completion:]
  -[HMDWalletPassLibrary initWithWorkQueue:]
  -[HMDWalletPassLibrary fetchHomeKeySupportedWithCompletion:]
  -[HMDWalletPassLibrary handlePassLibraryDidChangeNotification:]
  -[HMDWalletPassLibrary handlePassLibraryCanAddPassChangeNotification:]
  -[HMDWalletPassLibrary addPassAtURL:completion:]
  -[HMDWalletPassLibrary updatePassAtURL:completion:]
  -[HMDWalletPassLibrary enableExpressWithAuthData:passTypeIdentifier:serialNumber:completion:]
  -[HMDWalletPassLibrary passUniqueIDOfWalletKeyWithTypeIdentifier:serialNumber:]
  -[HMDWalletPassLibrary walletKeyWithTypeIdentifier:serialNumber:]
  -[HMDWalletPassLibrary urlForWalletKeyWithTypeIdentifier:serialNumber:]
  -[HMDWalletPassLibrary generateHomeKeyNFCInfoWithReaderPublicKey:readerIdentifier:completion:]
  -[HMDWalletPassLibrary fetchTransactionKeyForPassWithTypeIdentifier:serialNumber:completion:]
  -[HMDWalletPassLibrary fetchIsExpressEnabledForPassWithTypeIdentifier:serialNumber:completion:]
  -[HMDWalletPassLibrary fetchExpressEnablementConflictingPassDescriptionForPassAtURL:completion:]
  -[HMDWalletPassLibrary removePassWithTypeIdentifier:serialNumber:]
  -[HMDWalletPassLibrary createTemporaryPassDirectoryURL]
  -[HMDWalletPassLibrary walletKeys]


AWDHomeKitMessageHomeLocationReport : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  NSMutableArray *rawLocations
 @property  BOOL hasSelectedHomeLocation
 @property  AWDHomeKitMessageLocation *selectedHomeLocation
 @property  BOOL hasNumIterationToConverge
 @property  unsigned int numIterationToConverge
 @property  BOOL hasNearestLOI
 @property  AWDHomeKitMessageLocation *nearestLOI

  // class methods
  +[AWDHomeKitMessageHomeLocationReport rawLocationsType]

  // instance methods
  -[AWDHomeKitMessageHomeLocationReport setTimestamp:]
  -[AWDHomeKitMessageHomeLocationReport copyTo:]
  -[AWDHomeKitMessageHomeLocationReport .cxx_destruct]
  -[AWDHomeKitMessageHomeLocationReport mergeFrom:]
  -[AWDHomeKitMessageHomeLocationReport setHasTimestamp:]
  -[AWDHomeKitMessageHomeLocationReport dictionaryRepresentation]
  -[AWDHomeKitMessageHomeLocationReport hasTimestamp]
  -[AWDHomeKitMessageHomeLocationReport copyWithZone:]
  -[AWDHomeKitMessageHomeLocationReport timestamp]
  -[AWDHomeKitMessageHomeLocationReport readFrom:]
  -[AWDHomeKitMessageHomeLocationReport writeTo:]
  -[AWDHomeKitMessageHomeLocationReport isEqual:]
  -[AWDHomeKitMessageHomeLocationReport clearRawLocations]
  -[AWDHomeKitMessageHomeLocationReport addRawLocations:]
  -[AWDHomeKitMessageHomeLocationReport rawLocationsCount]
  -[AWDHomeKitMessageHomeLocationReport rawLocationsAtIndex:]
  -[AWDHomeKitMessageHomeLocationReport hasSelectedHomeLocation]
  -[AWDHomeKitMessageHomeLocationReport setNumIterationToConverge:]
  -[AWDHomeKitMessageHomeLocationReport setHasNumIterationToConverge:]
  -[AWDHomeKitMessageHomeLocationReport hasNumIterationToConverge]
  -[AWDHomeKitMessageHomeLocationReport hasNearestLOI]
  -[AWDHomeKitMessageHomeLocationReport rawLocations]
  -[AWDHomeKitMessageHomeLocationReport setRawLocations:]
  -[AWDHomeKitMessageHomeLocationReport selectedHomeLocation]
  -[AWDHomeKitMessageHomeLocationReport setSelectedHomeLocation:]
  -[AWDHomeKitMessageHomeLocationReport numIterationToConverge]
  -[AWDHomeKitMessageHomeLocationReport nearestLOI]
  -[AWDHomeKitMessageHomeLocationReport setNearestLOI:]


HMDWatchManager : HMFObject <HMFLogging, HMDIDSServiceDelegate>
 @property  <HMDIDSService> *service
 @property  NSArray *watches
 @property  NSArray *connectedWatches
 @property  BOOL pairedWithWatch
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWatchManager sharedManager]
  +[HMDWatchManager shortDescription]
  +[HMDWatchManager logCategory]
  +[HMDWatchManager isCompatibleWatchDevice:]

  // instance methods
  -[HMDWatchManager service:devicesChanged:]
  -[HMDWatchManager service:connectedDevicesChanged:]
  -[HMDWatchManager attributeDescriptions]
  -[HMDWatchManager .cxx_destruct]
  -[HMDWatchManager service]
  -[HMDWatchManager init]
  -[HMDWatchManager __initializeConnectedDevices]
  -[HMDWatchManager watches]
  -[HMDWatchManager isPairedWithWatch]
  -[HMDWatchManager connectedWatches]
  -[HMDWatchManager connectedWatchFromDeviceID:]


HMDCompositeSettingsControllerManager : NSObject <HMDAccessorySettingsLocalMessageHandlerDelegate, HMFLogging, HMDCompositeSettingsControllerDelegate, HMDCompositeSettingControllerManagerStateTransitionDelegate, HMDCompositeSettingControllerManagerStateManagerDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMMLogEventSubmitting> *logEventDispatcher
 @property  NSMapTable *stringToCompositeSettingsController
 @property  <HMDCompositeSettingControllerManagerStateManager> *stateManager
 @property  <HMDCompositeSettingsControllerManagerDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *homes

  // class methods
  +[HMDCompositeSettingsControllerManager logCategory]
  +[HMDCompositeSettingsControllerManager immutableSettingFromFetchReturn:]
  +[HMDCompositeSettingsControllerManager zoneNameForHomeUUID:]

  // instance methods
  -[HMDCompositeSettingsControllerManager homes]
  -[HMDCompositeSettingsControllerManager initWithDataSource:]
  -[HMDCompositeSettingsControllerManager dataSource]
  -[HMDCompositeSettingsControllerManager .cxx_destruct]
  -[HMDCompositeSettingsControllerManager stateManager]
  -[HMDCompositeSettingsControllerManager didUpdateCurrentRunState:updatedState:forHome:]
  -[HMDCompositeSettingsControllerManager didUpdateSiriEndpointSettingForHomeUUID:accessoryUUID:]
  -[HMDCompositeSettingsControllerManager didConfigureCompositeSettingsControllerForHomeUUID:accessoryUUID:]
  -[HMDCompositeSettingsControllerManager languagesDidChangeForHome:]
  -[HMDCompositeSettingsControllerManager logEventDispatcher]
  -[HMDCompositeSettingsControllerManager applyOnboardingSelections:accessoryUUID:homeUUID:completion:]
  -[HMDCompositeSettingsControllerManager settingsController:didUpdateSettings:metadata:]
  -[HMDCompositeSettingsControllerManager initWithDataSource:registry:controllerFactory:stateManagerFactory:logEventDispatcher:]
  -[HMDCompositeSettingsControllerManager _createSettingControllerForAccessory:homeUUID:]
  -[HMDCompositeSettingsControllerManager localFetchSettingsForUUID:homeUUID:withKeyPaths:callerVersion:callerPrivilege:completion:]
  -[HMDCompositeSettingsControllerManager localFetchSettingsForUUID:homeUUID:withKeyPaths:completion:]
  -[HMDCompositeSettingsControllerManager localUpdateSettingForUUID:homeUUID:keyPath:value:callerVersion:completion:]
  -[HMDCompositeSettingsControllerManager localUpdateSettingForUUID:homeUUID:keyPath:value:completion:]
  -[HMDCompositeSettingsControllerManager dumpStateInfo]
  -[HMDCompositeSettingsControllerManager removeHomeZone:]
  -[HMDCompositeSettingsControllerManager stringToCompositeSettingsController]
  -[HMDCompositeSettingsControllerManager accessorySettingsLocalMessageHandler:didRecieveFetchRequestMessage:withHomeUUID:accessoryUUID:keyPaths:callerVersion:callerPrivilege:siriAvailableLanguagesSetting:]
  -[HMDCompositeSettingsControllerManager accessorySettingsLocalMessageHandler:didRecieveUpdateRequestMessage:withHomeUUID:accessoryUUID:keyPath:value:callerVersion:]


HMDCompositeSettingsOwnerToDatabaseAdapterRegistry : NSObject
  // instance methods
  -[HMDCompositeSettingsOwnerToDatabaseAdapterRegistry .cxx_destruct]
  -[HMDCompositeSettingsOwnerToDatabaseAdapterRegistry init]
  -[HMDCompositeSettingsOwnerToDatabaseAdapterRegistry databaseAdapterForUUID:]
  -[HMDCompositeSettingsOwnerToDatabaseAdapterRegistry createDatabaseAdapterIfNotExistForUUID:homeUUID:accessory:workQueue:zoneName:]
  -[HMDCompositeSettingsOwnerToDatabaseAdapterRegistry removeZoneWithZoneName:uuid:workQueue:]


HMDAccessorySettingsControllerDependencyFactory : HMFObject <HMDAccessorySettingsControllerDependencyFactory>
  // instance methods
  -[HMDAccessorySettingsControllerDependencyFactory timerWithReason:interval:]
  -[HMDAccessorySettingsControllerDependencyFactory settingModelForUpdateWithIdentifier:parent:value:configNumber:]
  -[HMDAccessorySettingsControllerDependencyFactory createMessageHandlerWithQueue:delegate:]
  -[HMDAccessorySettingsControllerDependencyFactory assertWithCondition:message:]


HMDAccessorySettingConstraintModifyOperation : HMFOperation
 @property  @? executionBlock

  // instance methods
  -[HMDAccessorySettingConstraintModifyOperation .cxx_destruct]
  -[HMDAccessorySettingConstraintModifyOperation main]
  -[HMDAccessorySettingConstraintModifyOperation executionBlock]
  -[HMDAccessorySettingConstraintModifyOperation setExecutionBlock:]


HMDAccessorySettingsController : HMFObject <HMFLogging, HMFTimerDelegate, HMDAccessorySettingGroupDataSource, HMDLegacyAccessorySettingsAdaptorDelegate, HMDAccessorySettingsBackingStoreTransactionReceiverDelegate, HMDAccessorySettingsMessageController, NSSecureCoding>
 @property  <HMDAccessorySettingsControllerDependencyFactory> *factory
 @property  NSMutableArray *allChildrenIdentifiers
 @property  <HMDAccessorySettingsControllerDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *codingKey
 @property  NSMutableSet *dependantControllers
 @property  NSMapTable *groupsMap
 @property  NSMapTable *settingsMap
 @property  HMDAccessorySettingsController *ownerController
 @property  BOOL isSettingOwner
 @property  BOOL isMigrationOwner
 @property  BOOL hasCreatedUnprocessedRootGroup
 @property  HMFTimer *fixupSettingsTimer
 @property  HMFTimer *auditSettingsTimer
 @property  NSNotificationCenter *notificationCenter
 @property  NSMutableSet *constraintItemsMarkedForRemoval
 @property  BOOL didInitiateSettingsCreationForOlderSoftwareCounterpart
 @property  NSOperationQueue *constraintModifyOperationQueue
 @property  HMFTimer *languageChangeDebounceTimer
 @property  <HMDLegacyAccessorySettingsAdaptor> *legacySettingsAdaptor
 @property  HMDAccessorySettingGroup *rootGroup
 @property  <HMDAccessorySettingsControllerDataSource> *dataSource
 @property  NSUUID *parentUUID
 @property  <HMDAccessorySettingsMessageHandler> *messageHandler
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  <HMDBackingStoreObjectProtocol> *transactionReceiver
 @property  NSArray *childrenIdentifiers
 @property  NSString *siriLanguage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  HMDHome *home

  // class methods
  +[HMDAccessorySettingsController supportsSecureCoding]
  +[HMDAccessorySettingsController logCategory]

  // instance methods
  -[HMDAccessorySettingsController notificationCenter]
  -[HMDAccessorySettingsController home]
  -[HMDAccessorySettingsController timerDidFire:]
  -[HMDAccessorySettingsController logIdentifier]
  -[HMDAccessorySettingsController dataSource]
  -[HMDAccessorySettingsController encodeWithCoder:]
  -[HMDAccessorySettingsController workQueue]
  -[HMDAccessorySettingsController messageHandler]
  -[HMDAccessorySettingsController delegate]
  -[HMDAccessorySettingsController .cxx_destruct]
  -[HMDAccessorySettingsController messageTargetUUID]
  -[HMDAccessorySettingsController isProxy]
  -[HMDAccessorySettingsController setDataSource:]
  -[HMDAccessorySettingsController factory]
  -[HMDAccessorySettingsController initWithCoder:]
  -[HMDAccessorySettingsController parentUUID]
  -[HMDAccessorySettingsController decodeWithCoder:]
  -[HMDAccessorySettingsController rootGroup]
  -[HMDAccessorySettingsController codingKey]
  -[HMDAccessorySettingsController setRootGroup:]
  -[HMDAccessorySettingsController settingForKeyPath:]
  -[HMDAccessorySettingsController logEventSubmitter]
  -[HMDAccessorySettingsController transactionReceiver]
  -[HMDAccessorySettingsController languageValueList]
  -[HMDAccessorySettingsController shouldEncodeSetting:withCoder:forAccessorySettingGroup:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didLoadSettingKeyPath:boolValue:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didUpdateSettingKeyPath:boolValue:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didLoadSettingKeyPath:numberValue:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didUpdateSettingKeyPath:numberValue:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didLoadSettingKeyPath:selectedLanguageValue:availableLanguageList:]
  -[HMDAccessorySettingsController legacySettingsAdaptor:didUpdateSettingKeyPath:selectedLanguageValue:availableLanguageList:]
  -[HMDAccessorySettingsController handleUpdatedSettingModel:completion:]
  -[HMDAccessorySettingsController handleRemovedSettingModel:completion:]
  -[HMDAccessorySettingsController handleUpdatedGroupModel:completion:]
  -[HMDAccessorySettingsController handleRemovedGroupModel:completion:]
  -[HMDAccessorySettingsController handleUpdatedSettingConstraintModel:completion:]
  -[HMDAccessorySettingsController handleRemovedSettingConstraintModel:completion:]
  -[HMDAccessorySettingsController onMessageUpdateValue:settingIdentifier:senderVersion:senderProductClass:completion:]
  -[HMDAccessorySettingsController onMessageUpdateValue:settingKeyPath:senderVersion:senderProductClass:completion:]
  -[HMDAccessorySettingsController onMessageAddConstraint:keyPath:completion:]
  -[HMDAccessorySettingsController onMessageRemoveConstraint:keyPath:completion:]
  -[HMDAccessorySettingsController onMessageUpdateConstraints:keyPath:completion:]
  -[HMDAccessorySettingsController onMessageReplaceConstraintsWithAdditions:constraintIdsToRemove:keyPath:senderProductClass:isRemote:completion:]
  -[HMDAccessorySettingsController onMessageReplaceConstraintsWithAdditions:constraintIdsToRemove:settingIdentifier:senderProductClass:isRemote:completion:]
  -[HMDAccessorySettingsController canUser:editConstraintsForSettingWithKeyPath:]
  -[HMDAccessorySettingsController initWithQueue:delegate:dataSource:parentUUID:codingKey:logEventSubmitter:settingOwner:migrationOwner:factory:rootGroup:notificationCenter:]
  -[HMDAccessorySettingsController initWithQueue:delegate:dataSource:parentUUID:codingKey:logEventSubmitter:]
  -[HMDAccessorySettingsController initWithParentUUID:codingKey:]
  -[HMDAccessorySettingsController shouldEncodeForNonAdminSharedUserForSetting:]
  -[HMDAccessorySettingsController shouldEncodeForXPCTransportForSetting:]
  -[HMDAccessorySettingsController isSettingOwner]
  -[HMDAccessorySettingsController setIsSettingOwner:]
  -[HMDAccessorySettingsController hasCreatedUnprocessedRootGroup]
  -[HMDAccessorySettingsController setHasCreatedUnprocessedRootGroup:]
  -[HMDAccessorySettingsController hasDependants]
  -[HMDAccessorySettingsController groupsMap]
  -[HMDAccessorySettingsController setGroupsMap:]
  -[HMDAccessorySettingsController settingsMap]
  -[HMDAccessorySettingsController setSettingsMap:]
  -[HMDAccessorySettingsController _keyPathsForSettings]
  -[HMDAccessorySettingsController settingsHierarchyDidChange]
  -[HMDAccessorySettingsController _scheduleAuditWithReason:]
  -[HMDAccessorySettingsController scheduleAuditWithReason:from:]
  -[HMDAccessorySettingsController _performSettingsAudit]
  -[HMDAccessorySettingsController _reevaluateDependantSettings]
  -[HMDAccessorySettingsController _createSettings]
  -[HMDAccessorySettingsController _migrateSettingsWithCompletion:]
  -[HMDAccessorySettingsController mergeWithSettingsMetadata:]
  -[HMDAccessorySettingsController _removeDependant:]
  -[HMDAccessorySettingsController _performDependantFixup]
  -[HMDAccessorySettingsController scheduleDependantFixup]
  -[HMDAccessorySettingsController owner:didUpdateSettings:]
  -[HMDAccessorySettingsController haveGroupWithUUID:]
  -[HMDAccessorySettingsController groupForKeyPath:]
  -[HMDAccessorySettingsController _onMessageUpdateValue:settingKeyPath:senderVersion:senderProductClass:completion:]
  -[HMDAccessorySettingsController _updateValue:forSetting:senderVersion:senderProductClass:completion:]
  -[HMDAccessorySettingsController _runUpdateTransactionWithValue:setting:completion:]
  -[HMDAccessorySettingsController _cacheConstraintAdditions:removals:setting:]
  -[HMDAccessorySettingsController _replaceConstraintsOnSetting:additions:removals:completion:]
  -[HMDAccessorySettingsController _replaceConstraintsOnMessageToChildWithAdditions:removedChildConstraints:settingKeyPath:senderProductClass:completion:]
  -[HMDAccessorySettingsController _removeManagedConfigurationProfile:completion:]
  -[HMDAccessorySettingsController updatedSetting:model:completion:]
  -[HMDAccessorySettingsController addedSettingModel:completion:]
  -[HMDAccessorySettingsController handleLanguageChangeTimerFired]
  -[HMDAccessorySettingsController _didAddGroup:]
  -[HMDAccessorySettingsController _didRemoveGroup:]
  -[HMDAccessorySettingsController _didAddSetting:]
  -[HMDAccessorySettingsController _didRemoveSetting:]
  -[HMDAccessorySettingsController didChangeSetting:]
  -[HMDAccessorySettingsController didUpdateSettingConstraints:]
  -[HMDAccessorySettingsController didChangeDependantSettings:ownerSettingsKeyPaths:]
  -[HMDAccessorySettingsController didBecomeIndependantOwner]
  -[HMDAccessorySettingsController setNestedGroupsDataSourcesWithGroup:]
  -[HMDAccessorySettingsController siriLanguage]
  -[HMDAccessorySettingsController childrenIdentifiers]
  -[HMDAccessorySettingsController configureIsSettingOwner:home:]
  -[HMDAccessorySettingsController configureIsSettingOwner:home:legacySettingsAdaptor:]
  -[HMDAccessorySettingsController configureIsSettingOwner:migrationOwner:home:legacySettingsAdaptor:]
  -[HMDAccessorySettingsController modelObjectsForSettings]
  -[HMDAccessorySettingsController addDependant:]
  -[HMDAccessorySettingsController removeDependant:]
  -[HMDAccessorySettingsController removeAllDependants]
  -[HMDAccessorySettingsController auditOnFirstFetch]
  -[HMDAccessorySettingsController updateSettingOwner:]
  -[HMDAccessorySettingsController didDetectCounterpartUsesSoftwareVersionBasedMigrationOwner]
  -[HMDAccessorySettingsController boolSettingForKeyPath:completion:]
  -[HMDAccessorySettingsController allChildrenIdentifiers]
  -[HMDAccessorySettingsController dependantControllers]
  -[HMDAccessorySettingsController ownerController]
  -[HMDAccessorySettingsController setOwnerController:]
  -[HMDAccessorySettingsController isMigrationOwner]
  -[HMDAccessorySettingsController setIsMigrationOwner:]
  -[HMDAccessorySettingsController fixupSettingsTimer]
  -[HMDAccessorySettingsController setFixupSettingsTimer:]
  -[HMDAccessorySettingsController auditSettingsTimer]
  -[HMDAccessorySettingsController setAuditSettingsTimer:]
  -[HMDAccessorySettingsController constraintItemsMarkedForRemoval]
  -[HMDAccessorySettingsController setConstraintItemsMarkedForRemoval:]
  -[HMDAccessorySettingsController didInitiateSettingsCreationForOlderSoftwareCounterpart]
  -[HMDAccessorySettingsController setDidInitiateSettingsCreationForOlderSoftwareCounterpart:]
  -[HMDAccessorySettingsController constraintModifyOperationQueue]
  -[HMDAccessorySettingsController setConstraintModifyOperationQueue:]
  -[HMDAccessorySettingsController languageChangeDebounceTimer]
  -[HMDAccessorySettingsController setLanguageChangeDebounceTimer:]
  -[HMDAccessorySettingsController legacySettingsAdaptor]
  -[HMDAccessorySettingsController setLegacySettingsAdaptor:]


HMDCameraClipImporter : HMFObject <HMFLogging>
 @property  HMBLocalZone *localZone
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  NSUUID *cameraProfileUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipImporter logCategory]

  // instance methods
  -[HMDCameraClipImporter logIdentifier]
  -[HMDCameraClipImporter workQueue]
  -[HMDCameraClipImporter .cxx_destruct]
  -[HMDCameraClipImporter localZone]
  -[HMDCameraClipImporter cameraProfileUUID]
  -[HMDCameraClipImporter initWithLocalZone:cameraProfileUUID:]
  -[HMDCameraClipImporter importClipsWithImportData:]


HMDCameraClipImportMetadata : NSObject
 @property  NSDate *startDate
 @property  double targetFragmentDuration
 @property  NSArray *videoSegments

  // instance methods
  -[HMDCameraClipImportMetadata .cxx_destruct]
  -[HMDCameraClipImportMetadata startDate]
  -[HMDCameraClipImportMetadata targetFragmentDuration]
  -[HMDCameraClipImportMetadata videoSegments]
  -[HMDCameraClipImportMetadata initClipData:]


HMDCameraClipImportVideoSegmentMetadata : NSObject
 @property  NSString *resourcePath
 @property  BOOL header
 @property  double duration

  // instance methods
  -[HMDCameraClipImportVideoSegmentMetadata resourcePath]
  -[HMDCameraClipImportVideoSegmentMetadata isHeader]
  -[HMDCameraClipImportVideoSegmentMetadata .cxx_destruct]
  -[HMDCameraClipImportVideoSegmentMetadata duration]
  -[HMDCameraClipImportVideoSegmentMetadata initWithVideoSegmentMetadata:]


HMDPairedSync : HMFObject <PSYSyncCoordinatorDelegate>
 @property  <HMDPairedSyncDelegate> *delegate
 @property  PSYSyncCoordinator *coordinator
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long currentOperationCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDPairedSync initWithDelegate:queue:]
  -[HMDPairedSync workQueue]
  -[HMDPairedSync delegate]
  -[HMDPairedSync .cxx_destruct]
  -[HMDPairedSync syncCoordinatorDidChangeSyncRestriction:]
  -[HMDPairedSync syncCoordinator:didInvalidateSyncSession:]
  -[HMDPairedSync syncCoordinator:beginSyncSession:]
  -[HMDPairedSync coordinator]
  -[HMDPairedSync restrictionAsString:]
  -[HMDPairedSync needToSync]
  -[HMDPairedSync _callStartSync]
  -[HMDPairedSync syncComplete]
  -[HMDPairedSync syncPartiallyComplete]
  -[HMDPairedSync currentOperationCount]
  -[HMDPairedSync setCurrentOperationCount:]


HMDCameraRecordingUploadOperationEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double runTime
 @property  unsigned long runTimeInMilliseconds
 @property  unsigned long operationType
 @property  BOOL didCausePreviousClipToFinalizeDueToDurationLimit
 @property  unsigned long totalClipDurationMilliseconds
 @property  double totalClipDuration
 @property  unsigned long retryCount
 @property  NSUUID *clipModelID
 @property  unsigned long startTimestamp

  // class methods
  +[HMDCameraRecordingUploadOperationEvent awdOperationEnumFromCameraClipOperationType:]

  // instance methods
  -[HMDCameraRecordingUploadOperationEvent operationType]
  -[HMDCameraRecordingUploadOperationEvent startTimestamp]
  -[HMDCameraRecordingUploadOperationEvent setOperationType:]
  -[HMDCameraRecordingUploadOperationEvent runTime]
  -[HMDCameraRecordingUploadOperationEvent retryCount]
  -[HMDCameraRecordingUploadOperationEvent setRetryCount:]
  -[HMDCameraRecordingUploadOperationEvent attributeDescriptions]
  -[HMDCameraRecordingUploadOperationEvent .cxx_destruct]
  -[HMDCameraRecordingUploadOperationEvent setRunTime:]
  -[HMDCameraRecordingUploadOperationEvent runTimeInMilliseconds]
  -[HMDCameraRecordingUploadOperationEvent AWDMessageType]
  -[HMDCameraRecordingUploadOperationEvent metricForAWD]
  -[HMDCameraRecordingUploadOperationEvent clipModelID]
  -[HMDCameraRecordingUploadOperationEvent setTotalClipDuration:]
  -[HMDCameraRecordingUploadOperationEvent totalClipDuration]
  -[HMDCameraRecordingUploadOperationEvent initWithClipModelID:operation:]
  -[HMDCameraRecordingUploadOperationEvent totalClipDurationMilliseconds]
  -[HMDCameraRecordingUploadOperationEvent didCausePreviousClipToFinalizeDueToDurationLimit]
  -[HMDCameraRecordingUploadOperationEvent setDidCausePreviousClipToFinalizeDueToDurationLimit:]


HMDCameraSnapshotRemoteRelaySender : HMDCameraSnapshotSender <HMDCameraGetSnapshotProtocol, HMDCameraSnapshotSenderProtocol, HMDCameraSnapshotLocalDelegate, HMDCameraSnapshotIDSRelayInitiatorDelegate, HMFLogging>
 @property  HMDCameraSnapshotLocal *snapshotLocal
 @property  <HMDCameraSnapshotRemoteRelaySenderDelegate> *delegate
 @property  HMDCameraSnapshotIDSRelayInitiator *relayInitiator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotRemoteRelaySender logCategory]

  // instance methods
  -[HMDCameraSnapshotRemoteRelaySender logIdentifier]
  -[HMDCameraSnapshotRemoteRelaySender delegate]
  -[HMDCameraSnapshotRemoteRelaySender dealloc]
  -[HMDCameraSnapshotRemoteRelaySender .cxx_destruct]
  -[HMDCameraSnapshotRemoteRelaySender getSnapshot:]
  -[HMDCameraSnapshotRemoteRelaySender snapShotTransferComplete]
  -[HMDCameraSnapshotRemoteRelaySender snapshotLocal:didSaveSnapshotFile:error:sessionID:]
  -[HMDCameraSnapshotRemoteRelaySender initWithSessionID:workQueue:device:accessory:delegate:delegateQueue:uniqueIdentifier:snapshotRequestHandler:]
  -[HMDCameraSnapshotRemoteRelaySender _callDidStartCaptureImageDelegate:]
  -[HMDCameraSnapshotRemoteRelaySender _callDidCompleteSendImageDelegate:]
  -[HMDCameraSnapshotRemoteRelaySender snapshotLocal]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiatorIDSSessionDidStart:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiatorDidSendIDSInvitation:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiator:didEndIDSSessionWithError:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiatorDidSendDataSuccessfully:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiatorDidStartDataSend:]
  -[HMDCameraSnapshotRemoteRelaySender _callDidSaveSnapshotFileDelegate:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiator:didSendData:]
  -[HMDCameraSnapshotRemoteRelaySender relayInitiator]


HMDCloudRecord : HMFObject
 @property  NSUUID *objectID
 @property  BOOL decryptionFailed
 @property  BOOL encryptionFailed
 @property  BOOL controllerIdentifierChanged
 @property  NSString *recordType
 @property  NSString *recordName
 @property  HMDCloudZone *cloudZone
 @property  CKRecordID *recordID
 @property  NSData *cachedData
 @property  NSData *data
 @property  CKRecord *record
 @property  BOOL recordCreated
 @property  BOOL recordCached
 @property  unsigned long objectEncoding

  // class methods
  +[HMDCloudRecord shortDescription]
  +[HMDCloudRecord logCategory]

  // instance methods
  -[HMDCloudRecord setRecord:]
  -[HMDCloudRecord objectID]
  -[HMDCloudRecord setCachedData:]
  -[HMDCloudRecord cachedData]
  -[HMDCloudRecord setRecordID:]
  -[HMDCloudRecord setObjectID:]
  -[HMDCloudRecord recordID]
  -[HMDCloudRecord record]
  -[HMDCloudRecord .cxx_destruct]
  -[HMDCloudRecord cloudZone]
  -[HMDCloudRecord recordType]
  -[HMDCloudRecord setData:]
  -[HMDCloudRecord shortDescription]
  -[HMDCloudRecord clearData]
  -[HMDCloudRecord recordName]
  -[HMDCloudRecord init]
  -[HMDCloudRecord data]
  -[HMDCloudRecord setCloudZone:]
  -[HMDCloudRecord decryptionFailed]
  -[HMDCloudRecord setDecryptionFailed:]
  -[HMDCloudRecord encryptionFailed]
  -[HMDCloudRecord setEncryptionFailed:]
  -[HMDCloudRecord controllerIdentifierChanged]
  -[HMDCloudRecord setControllerIdentifierChanged:]
  -[HMDCloudRecord initWithObjectID:recordName:cloudZone:]
  -[HMDCloudRecord extractObjectChange]
  -[HMDCloudRecord encodeObjectChange:]
  -[HMDCloudRecord isRecordCached]
  -[HMDCloudRecord objectEncoding]
  -[HMDCloudRecord isRecordCreated]


HMDCloudLegacyModelObject : HMDBackingStoreModelObject
 @property  NSNumber *legacyRecordType
 @property  NSData *data1
 @property  NSData *data2

  // class methods
  +[HMDCloudLegacyModelObject properties]


HMDCloudLegacyMetadataRecord : HMDCloudRecord
  // class methods
  +[HMDCloudLegacyMetadataRecord legacyModelWithMetadata:]

  // instance methods
  -[HMDCloudLegacyMetadataRecord recordType]
  -[HMDCloudLegacyMetadataRecord setData:]
  -[HMDCloudLegacyMetadataRecord clearData]
  -[HMDCloudLegacyMetadataRecord data]
  -[HMDCloudLegacyMetadataRecord extractObjectChange]
  -[HMDCloudLegacyMetadataRecord encodeObjectChange:]
  -[HMDCloudLegacyMetadataRecord objectEncoding]


HMDCloudLegacyHomeDataRecord : HMDCloudRecord
 @property  NSData *dataVersion2

  // class methods
  +[HMDCloudLegacyHomeDataRecord legacyModelWithHomeDataV0:homeDataV2:]

  // instance methods
  -[HMDCloudLegacyHomeDataRecord recordType]
  -[HMDCloudLegacyHomeDataRecord setData:]
  -[HMDCloudLegacyHomeDataRecord clearData]
  -[HMDCloudLegacyHomeDataRecord data]
  -[HMDCloudLegacyHomeDataRecord extractObjectChange]
  -[HMDCloudLegacyHomeDataRecord encodeObjectChange:]
  -[HMDCloudLegacyHomeDataRecord objectEncoding]
  -[HMDCloudLegacyHomeDataRecord dataVersion2]
  -[HMDCloudLegacyHomeDataRecord setDataVersion2:]


HMDCloudLegacyHomeDataVersion3Record : HMDCloudRecord
  // class methods
  +[HMDCloudLegacyHomeDataVersion3Record legacyModelWithHomeDataV3:]

  // instance methods
  -[HMDCloudLegacyHomeDataVersion3Record recordType]
  -[HMDCloudLegacyHomeDataVersion3Record setData:]
  -[HMDCloudLegacyHomeDataVersion3Record clearData]
  -[HMDCloudLegacyHomeDataVersion3Record data]
  -[HMDCloudLegacyHomeDataVersion3Record extractObjectChange]
  -[HMDCloudLegacyHomeDataVersion3Record encodeObjectChange:]
  -[HMDCloudLegacyHomeDataVersion3Record objectEncoding]


HMDHomePrimaryResidentInitialReachabilityManagerDataSource : NSObject <HMDHomePrimaryResidentInitialReachabilityManagerDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomePrimaryResidentInitialReachabilityManagerDataSource persistDataValueToNoBackupStore:withKey:]
  -[HMDHomePrimaryResidentInitialReachabilityManagerDataSource dataValueFromNoBackupStoreWithKey:]


HMDHomePrimaryResidentInitialReachabilityManager : HMFObject <HMFLogging>
 @property  <HMDHomePrimaryResidentInitialReachabilityManagerDataSource> *dataSource
 @property  NSUUID *uuid
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *key
 @property  HMDHome *home
 @property  NSNotificationCenter *notificationCenter
 @property  HMDResidentReachabilityState *persistedState
 @property  NSNumber *initialReachability
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomePrimaryResidentInitialReachabilityManager logCategory]

  // instance methods
  -[HMDHomePrimaryResidentInitialReachabilityManager notificationCenter]
  -[HMDHomePrimaryResidentInitialReachabilityManager home]
  -[HMDHomePrimaryResidentInitialReachabilityManager persistedState]
  -[HMDHomePrimaryResidentInitialReachabilityManager logIdentifier]
  -[HMDHomePrimaryResidentInitialReachabilityManager dataSource]
  -[HMDHomePrimaryResidentInitialReachabilityManager workQueue]
  -[HMDHomePrimaryResidentInitialReachabilityManager uuid]
  -[HMDHomePrimaryResidentInitialReachabilityManager .cxx_destruct]
  -[HMDHomePrimaryResidentInitialReachabilityManager key]
  -[HMDHomePrimaryResidentInitialReachabilityManager setHome:]
  -[HMDHomePrimaryResidentInitialReachabilityManager configureWithHome:]
  -[HMDHomePrimaryResidentInitialReachabilityManager handleHomeRemovedNotification:]
  -[HMDHomePrimaryResidentInitialReachabilityManager initWithUUID:workQueue:]
  -[HMDHomePrimaryResidentInitialReachabilityManager handlePrimaryResidentUpdateNotification:]
  -[HMDHomePrimaryResidentInitialReachabilityManager handleResidentDeviceManagerUpdateResidentNotification:]
  -[HMDHomePrimaryResidentInitialReachabilityManager handleResidentDeviceEnabledStateChangeNotification:]
  -[HMDHomePrimaryResidentInitialReachabilityManager initWithUUID:workQueue:notificationCenter:dataSource:]
  -[HMDHomePrimaryResidentInitialReachabilityManager initialReachability]
  -[HMDHomePrimaryResidentInitialReachabilityManager handlePrimaryResidentUpdated:reason:]
  -[HMDHomePrimaryResidentInitialReachabilityManager persistState:]
  -[HMDHomePrimaryResidentInitialReachabilityManager clearPersistedState]


HMDAccessorySettingMergeHandler : NSObject
  // class methods
  +[HMDAccessorySettingMergeHandler mergeFirst:second:mergeStrategy:shouldAddMissing:]
  +[HMDAccessorySettingMergeHandler _mergeFirst:second:mergedConstraints:mergeStrategy:]
  +[HMDAccessorySettingMergeHandler _isNumber:betweenStart:andEnd:first:]
  +[HMDAccessorySettingMergeHandler _mergeRangeConstraintsFirst:second:shouldAddMissing:]
  +[HMDAccessorySettingMergeHandler _extractMinMaxStep:minConstraint:maxConstraint:stepConstraint:first:]
  +[HMDAccessorySettingMergeHandler _mergeValidValueConstraintsFirst:second:shouldAddMissing:]


HMDUserManagementOperationTimestamp : HMFObject <NSSecureCoding>
 @property  HMDDevice *device
 @property  NSDate *timestamp
 @property  NSNumber *state

  // class methods
  +[HMDUserManagementOperationTimestamp supportsSecureCoding]

  // instance methods
  -[HMDUserManagementOperationTimestamp encodeWithCoder:]
  -[HMDUserManagementOperationTimestamp state]
  -[HMDUserManagementOperationTimestamp attributeDescriptions]
  -[HMDUserManagementOperationTimestamp .cxx_destruct]
  -[HMDUserManagementOperationTimestamp device]
  -[HMDUserManagementOperationTimestamp shortDescription]
  -[HMDUserManagementOperationTimestamp timestamp]
  -[HMDUserManagementOperationTimestamp isEqual:]
  -[HMDUserManagementOperationTimestamp initWithCoder:]
  -[HMDUserManagementOperationTimestamp initWithDevice:state:]


AWDHomeKitDurationEvent : PBCodable <NSCopying>
  // instance methods
  -[AWDHomeKitDurationEvent copyTo:]
  -[AWDHomeKitDurationEvent mergeFrom:]
  -[AWDHomeKitDurationEvent dictionaryRepresentation]
  -[AWDHomeKitDurationEvent copyWithZone:]
  -[AWDHomeKitDurationEvent readFrom:]
  -[AWDHomeKitDurationEvent writeTo:]
  -[AWDHomeKitDurationEvent isEqual:]


HMDUserMessageFilter : HMFMessageFilter <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserMessageFilter logCategory]
  +[HMDUserMessageFilter filterMessage:withPolicies:error:]


HMDResidentReachabilityState : HMFObject <NSSecureCoding, NSCopying>
 @property  NSUUID *residentDeviceIdentifier
 @property  BOOL isReachable

  // class methods
  +[HMDResidentReachabilityState supportsSecureCoding]

  // instance methods
  -[HMDResidentReachabilityState isReachable]
  -[HMDResidentReachabilityState encodeWithCoder:]
  -[HMDResidentReachabilityState attributeDescriptions]
  -[HMDResidentReachabilityState .cxx_destruct]
  -[HMDResidentReachabilityState copyWithZone:]
  -[HMDResidentReachabilityState isEqual:]
  -[HMDResidentReachabilityState initWithCoder:]
  -[HMDResidentReachabilityState initWithResidentDeviceIdentifier:isReachable:]
  -[HMDResidentReachabilityState residentDeviceIdentifier]


HMDAppleMediaAccessoriesStateMessenger : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDAppleMediaAccessoriesStateMessengerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAppleMediaAccessoriesStateMessenger logCategory]

  // instance methods
  -[HMDAppleMediaAccessoriesStateMessenger identifier]
  -[HMDAppleMediaAccessoriesStateMessenger logIdentifier]
  -[HMDAppleMediaAccessoriesStateMessenger setDelegate:]
  -[HMDAppleMediaAccessoriesStateMessenger delegate]
  -[HMDAppleMediaAccessoriesStateMessenger .cxx_destruct]
  -[HMDAppleMediaAccessoriesStateMessenger messageTargetUUID]
  -[HMDAppleMediaAccessoriesStateMessenger messageDispatcher]
  -[HMDAppleMediaAccessoriesStateMessenger registerForMessagesWithHome:]
  -[HMDAppleMediaAccessoriesStateMessenger initWithIdentifier:messageDispatcher:]
  -[HMDAppleMediaAccessoriesStateMessenger handleAppleMediaAccessoryModelIdentiferRequestMessage:]
  -[HMDAppleMediaAccessoriesStateMessenger sendModelIdentifierRequestMessageToAppleMediaAccessory:withAccessoryIdentifier:completion:]
  -[HMDAppleMediaAccessoriesStateMessenger relayMessageName:payload:toAppleMediaAccessory:]


HMDCameraProfile : HMDAccessoryProfile <HMDCameraSettingProactiveReaderDelegate, HMDCameraProfileSettingsManagerDelegate, HMDCameraSignificantEventListenerDelegate, HMFNetMonitorDelegate, HMFTimerDelegate, HMDCameraClipManagerDelegate>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSSet *cameraStreamManagers
 @property  HMDCameraSnapshotManager *snapshotManager
 @property  HMDCameraStreamSnapshotHandler *streamSnapshotHandler
 @property  NSMutableArray *settingProactiveReaders
 @property  HMFNetMonitor *networkMonitor
 @property  HMDCameraProfileSettingsManager *cameraSettingsManager
 @property  HMDCameraRecordingReachabilityEventManager *reachabilityEventManager
 @property  HMDCameraClipUserNotificationCenter *clipUserNotificationCenter
 @property  NSNotificationCenter *notificationCenter
 @property  HMFTimer *recordingEventsCleanupTimer
 @property  HMDPredicateUtilities *predicateUtilities
 @property  HMDCameraRecordingManager *cameraRecordingManager
 @property  @? recordingEventsCleanupTimerFactory
 @property  @? recordingManagerFactory
 @property  BOOL microphonePresent
 @property  BOOL speakerPresent
 @property  _HMCameraUserSettings *currentSettings
 @property  HMDCameraClipManager *clipManager
 @property  HMDService *recordingManagementService
 @property  HMDCameraSignificantEventListener *significantEventListener
 @property  HMDHAPAccessory *hapAccessory
 @property  BOOL supportsCameraRecordingFeature
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraProfile supportsSecureCoding]
  +[HMDCameraProfile logCategory]
  +[HMDCameraProfile hasMessageReceiverChildren]
  +[HMDCameraProfile bulletinBoard]
  +[HMDCameraProfile setBulletinBoard:]

  // instance methods
  -[HMDCameraProfile dumpState]
  -[HMDCameraProfile notificationCenter]
  -[HMDCameraProfile timerDidFire:]
  -[HMDCameraProfile networkMonitor]
  -[HMDCameraProfile encodeWithCoder:]
  -[HMDCameraProfile dealloc]
  -[HMDCameraProfile .cxx_destruct]
  -[HMDCameraProfile currentSettings]
  -[HMDCameraProfile setUp]
  -[HMDCameraProfile isEqual:]
  -[HMDCameraProfile urlString]
  -[HMDCameraProfile unconfigure]
  -[HMDCameraProfile reachabilityEventManager]
  -[HMDCameraProfile clipManager]
  -[HMDCameraProfile registerForMessages]
  -[HMDCameraProfile networkMonitorIsReachable:]
  -[HMDCameraProfile networkMonitorIsUnreachable:]
  -[HMDCameraProfile snapshotManager]
  -[HMDCameraProfile messageReceiverChildren]
  -[HMDCameraProfile clipManagerDidStart:]
  -[HMDCameraProfile clipManagerDidStartUpCloudZone:]
  -[HMDCameraProfile clipManagerDidStop:]
  -[HMDCameraProfile clipManager:didUpdateSignificantEvent:withHomePresence:]
  -[HMDCameraProfile clipManager:didDeleteClipWithUUID:]
  -[HMDCameraProfile clipManagerDidDisableCloudStorage:]
  -[HMDCameraProfile streamSnapshotHandler]
  -[HMDCameraProfile removeCloudData]
  -[HMDCameraProfile predicateUtilities]
  -[HMDCameraProfile setPredicateUtilities:]
  -[HMDCameraProfile hapAccessory]
  -[HMDCameraProfile cameraSettingProactiveReaderDidCompleteRead:]
  -[HMDCameraProfile assistantObject]
  -[HMDCameraProfile isCameraRecordingFeatureSupported]
  -[HMDCameraProfile _handleNegotiateStreamRequest:]
  -[HMDCameraProfile _handleStreamControlRequest:]
  -[HMDCameraProfile handleCameraProfileSettingsDidChangeNotification:]
  -[HMDCameraProfile handleResidentsChangedNotification:]
  -[HMDCameraProfile cameraProfileSettingsManager:canEnableRecordingWithCompletion:]
  -[HMDCameraProfile cameraProfileSettingsManager:canDisableRecordingWithCompletion:]
  -[HMDCameraProfile listener:didReceiveSignificantEvent:heroFrameData:]
  -[HMDCameraProfile initWithAccessory:services:msgDispatcher:settingsManager:workQueue:]
  -[HMDCameraProfile initWithAccessory:services:recordingManagementService:msgDispatcher:settingsManager:workQueue:uniqueIdentifier:clipManager:clipUserNotificationCenter:reachabilityEventManager:networkMonitor:streamSnapshotHandler:snapshotManager:cameraStreamManagers:notificationCenter:]
  -[HMDCameraProfile tearDownWithReplacementCameraProfile:]
  -[HMDCameraProfile _createCameraRecordingManager]
  -[HMDCameraProfile _createSignificantEventListener]
  -[HMDCameraProfile _setUpBulletinNotificationManagerObserver]
  -[HMDCameraProfile _setControlSupport]
  -[HMDCameraProfile _areFaceClassificationsSuppressedForSignificantEvent:]
  -[HMDCameraProfile _shouldNotifyForSignificantEvent:homePresence:]
  -[HMDCameraProfile _postNotificationForUpdatedSignificantEvent:homePresence:]
  -[HMDCameraProfile isMicrophonePresent]
  -[HMDCameraProfile isSpeakerPresent]
  -[HMDCameraProfile recordingManagementService]
  -[HMDCameraProfile significantEventListener]
  -[HMDCameraProfile setSignificantEventListener:]
  -[HMDCameraProfile cameraStreamManagers]
  -[HMDCameraProfile settingProactiveReaders]
  -[HMDCameraProfile cameraSettingsManager]
  -[HMDCameraProfile clipUserNotificationCenter]
  -[HMDCameraProfile recordingEventsCleanupTimer]
  -[HMDCameraProfile setRecordingEventsCleanupTimer:]
  -[HMDCameraProfile cameraRecordingManager]
  -[HMDCameraProfile setCameraRecordingManager:]
  -[HMDCameraProfile recordingEventsCleanupTimerFactory]
  -[HMDCameraProfile setRecordingEventsCleanupTimerFactory:]
  -[HMDCameraProfile recordingManagerFactory]
  -[HMDCameraProfile setRecordingManagerFactory:]


HMDDeviceSetupManagerDataSource : NSObject <HMDDeviceSetupManagerDataSource>
  // instance methods
  -[HMDDeviceSetupManagerDataSource followUpControllerForDeviceSetupManager:]
  -[HMDDeviceSetupManagerDataSource followUpItemForDeviceSetupManager:]
  -[HMDDeviceSetupManagerDataSource followUpActionForDeviceSetupManager:]
  -[HMDDeviceSetupManagerDataSource followUpPreferencesBundleIdentifierForDeviceSetupManager:]
  -[HMDDeviceSetupManagerDataSource currentDeviceSupportsDeviceSetup]
  -[HMDDeviceSetupManagerDataSource currentDeviceIsAnAppleTV]


HMDDeviceSetupManager : HMFObject
 @property  NSNotificationCenter *notificationCenter
 @property  <HMDDeviceSetupManagerDataSource> *dataSource
 @property  BOOL running

  // class methods
  +[HMDDeviceSetupManager sharedManager]

  // instance methods
  -[HMDDeviceSetupManager notificationCenter]
  -[HMDDeviceSetupManager startAdvertising:]
  -[HMDDeviceSetupManager dataSource]
  -[HMDDeviceSetupManager dealloc]
  -[HMDDeviceSetupManager isRunning]
  -[HMDDeviceSetupManager stopAdvertising:]
  -[HMDDeviceSetupManager .cxx_destruct]
  -[HMDDeviceSetupManager initWithDataSource:notificationCenter:]
  -[HMDDeviceSetupManager removeAllFollowUpItemsWithCompletion:]


HMDBackingStoreCKOperationZoneCompletionEvent : HMDHMBLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDBackingStoreCKOperationZoneCompletionEvent AWDMessageType]
  -[HMDBackingStoreCKOperationZoneCompletionEvent metricForAWD]


HMDRapportMessagingClientFactory : NSObject <HMDRapportMessagingClientFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRapportMessagingClientFactory newCompanionLinkClient]
  -[HMDRapportMessagingClientFactory newRapportDeviceClientWrapperWithClient:]


HMDRapportMessaging : HMFObject <HMFLogging>
 @property  <HMDRapportMessagingReachabilityDelegate> *reachabilityDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRapportMessaging sharedInstance]
  +[HMDRapportMessaging logCategory]

  // instance methods
  -[HMDRapportMessaging .cxx_destruct]
  -[HMDRapportMessaging registerRequestHandler:]
  -[HMDRapportMessaging initWithClientFactory:]
  -[HMDRapportMessaging configureDiscoveryClientWithCompletion:]
  -[HMDRapportMessaging canSendRequestToDestinationID:]
  -[HMDRapportMessaging sendRequest:destinationID:options:responseHandler:]
  -[HMDRapportMessaging _configureDiscoveryClientWithCompletion:]
  -[HMDRapportMessaging _handleRequest:options:responseHandler:]
  -[HMDRapportMessaging _queueRequest:options:responseHandler:]
  -[HMDRapportMessaging _completeQueuedRequests]
  -[HMDRapportMessaging _clientForIDSIdentifier:]
  -[HMDRapportMessaging _activeDeviceForIDSIdentifier:]
  -[HMDRapportMessaging _createRapportClientForDevice:]
  -[HMDRapportMessaging _invalidateDestinationDevice:]
  -[HMDRapportMessaging _updateDevice:reachable:]
  -[HMDRapportMessaging reachabilityDelegate]
  -[HMDRapportMessaging setReachabilityDelegate:]


HMDBackgroundTaskLogger : HMFObject <HMFLogging>
 @property  <HMMLogEventSubmitting> *submitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackgroundTaskLogger logCategory]

  // instance methods
  -[HMDBackgroundTaskLogger .cxx_destruct]
  -[HMDBackgroundTaskLogger init]
  -[HMDBackgroundTaskLogger initWithLogEventSubmitter:]
  -[HMDBackgroundTaskLogger submitLogEventForTask:]
  -[HMDBackgroundTaskLogger submitNotFiredLogEventForTask:]
  -[HMDBackgroundTaskLogger submitter]


AWDHomeKitEventTriggerUserConfirmationSend : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasSessionID
 @property  NSString *sessionID
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode

  // instance methods
  -[AWDHomeKitEventTriggerUserConfirmationSend setTimestamp:]
  -[AWDHomeKitEventTriggerUserConfirmationSend copyTo:]
  -[AWDHomeKitEventTriggerUserConfirmationSend sessionID]
  -[AWDHomeKitEventTriggerUserConfirmationSend .cxx_destruct]
  -[AWDHomeKitEventTriggerUserConfirmationSend mergeFrom:]
  -[AWDHomeKitEventTriggerUserConfirmationSend setHasTimestamp:]
  -[AWDHomeKitEventTriggerUserConfirmationSend dictionaryRepresentation]
  -[AWDHomeKitEventTriggerUserConfirmationSend hasTimestamp]
  -[AWDHomeKitEventTriggerUserConfirmationSend copyWithZone:]
  -[AWDHomeKitEventTriggerUserConfirmationSend timestamp]
  -[AWDHomeKitEventTriggerUserConfirmationSend readFrom:]
  -[AWDHomeKitEventTriggerUserConfirmationSend writeTo:]
  -[AWDHomeKitEventTriggerUserConfirmationSend setSessionID:]
  -[AWDHomeKitEventTriggerUserConfirmationSend isEqual:]
  -[AWDHomeKitEventTriggerUserConfirmationSend hasSessionID]
  -[AWDHomeKitEventTriggerUserConfirmationSend setResultErrorCode:]
  -[AWDHomeKitEventTriggerUserConfirmationSend setHasResultErrorCode:]
  -[AWDHomeKitEventTriggerUserConfirmationSend hasResultErrorCode]
  -[AWDHomeKitEventTriggerUserConfirmationSend resultErrorCode]


HMDAppleMediaAccessoryAdvertisement : HMDMediaAccessoryAdvertisement
 @property  HMDDevice *device

  // instance methods
  -[HMDAppleMediaAccessoryAdvertisement .cxx_destruct]
  -[HMDAppleMediaAccessoryAdvertisement device]
  -[HMDAppleMediaAccessoryAdvertisement initWithOutputDevice:device:]


HMDAccessoryFirmwareUpdateProfile : HMFObject <HMFLogging>
 @property  HMDHAPAccessory *accessory
 @property  HMDService *service
 @property  NSNotificationCenter *notificationCenter
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  unsigned long updateDuration
 @property  long long updateState
 @property  HMFSoftwareVersion *currentVersion
 @property  unsigned long stagingNotReadyReasons
 @property  unsigned long updateNotReadyReasons
 @property  HMFSoftwareVersion *stagedFirmwareVersion
 @property  BOOL notificationsEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessoryFirmwareUpdateProfile logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateProfile setNotificationsEnabled:]
  -[HMDAccessoryFirmwareUpdateProfile notificationCenter]
  -[HMDAccessoryFirmwareUpdateProfile accessory]
  -[HMDAccessoryFirmwareUpdateProfile configure]
  -[HMDAccessoryFirmwareUpdateProfile notificationsEnabled]
  -[HMDAccessoryFirmwareUpdateProfile currentVersion]
  -[HMDAccessoryFirmwareUpdateProfile _registerForNotifications]
  -[HMDAccessoryFirmwareUpdateProfile logIdentifier]
  -[HMDAccessoryFirmwareUpdateProfile workQueue]
  -[HMDAccessoryFirmwareUpdateProfile dealloc]
  -[HMDAccessoryFirmwareUpdateProfile privateDescription]
  -[HMDAccessoryFirmwareUpdateProfile .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateProfile service]
  -[HMDAccessoryFirmwareUpdateProfile characteristics]
  -[HMDAccessoryFirmwareUpdateProfile updateState]
  -[HMDAccessoryFirmwareUpdateProfile isEqual:]
  -[HMDAccessoryFirmwareUpdateProfile setUpdateState:]
  -[HMDAccessoryFirmwareUpdateProfile setCurrentVersion:]
  -[HMDAccessoryFirmwareUpdateProfile stagingNotReadyReasons]
  -[HMDAccessoryFirmwareUpdateProfile setStagingNotReadyReasons:]
  -[HMDAccessoryFirmwareUpdateProfile updateNotReadyReasons]
  -[HMDAccessoryFirmwareUpdateProfile setUpdateNotReadyReasons:]
  -[HMDAccessoryFirmwareUpdateProfile updateDuration]
  -[HMDAccessoryFirmwareUpdateProfile setUpdateDuration:]
  -[HMDAccessoryFirmwareUpdateProfile stagedFirmwareVersion]
  -[HMDAccessoryFirmwareUpdateProfile setStagedFirmwareVersion:]
  -[HMDAccessoryFirmwareUpdateProfile handleCharacteristicValuesChanged:]
  -[HMDAccessoryFirmwareUpdateProfile initWithAccessory:service:workQueue:]
  -[HMDAccessoryFirmwareUpdateProfile _handleCharacteristicChanges:]
  -[HMDAccessoryFirmwareUpdateProfile handleAccessoryIsReachable:]
  -[HMDAccessoryFirmwareUpdateProfile monitorCharacteristics:]
  -[HMDAccessoryFirmwareUpdateProfile _enableCharacteristicsNotifications:]
  -[HMDAccessoryFirmwareUpdateProfile readinessCharacteristic]
  -[HMDAccessoryFirmwareUpdateProfile firmwareVersionCharacteristic]
  -[HMDAccessoryFirmwareUpdateProfile statusCharacteristic]
  -[HMDAccessoryFirmwareUpdateProfile updateProfileWithStagedFirmwareVersion:]
  -[HMDAccessoryFirmwareUpdateProfile updateProfileWithCompletion:]
  -[HMDAccessoryFirmwareUpdateProfile readAndProcessCharacteristics:withCompletion:]
  -[HMDAccessoryFirmwareUpdateProfile _updateFirmwareUpdateDuration:]
  -[HMDAccessoryFirmwareUpdateProfile _updateFirmwareUpdateState:]
  -[HMDAccessoryFirmwareUpdateProfile _updateFirmwareStagingNotReadyReasons:]
  -[HMDAccessoryFirmwareUpdateProfile _updateFirmwareUpdateNotReadyReasons:]
  -[HMDAccessoryFirmwareUpdateProfile _updateAccessoryFirmwareVersion:]
  -[HMDAccessoryFirmwareUpdateProfile __handleAccessoryIsReachable]
  -[HMDAccessoryFirmwareUpdateProfile __handleFirmwareUpdateStatusUpdate:]
  -[HMDAccessoryFirmwareUpdateProfile __handleFirmwareUpdateReadinessUpdate:]
  -[HMDAccessoryFirmwareUpdateProfile __handleStagedFirmwareVersionUpdate:]
  -[HMDAccessoryFirmwareUpdateProfile _updateStagedFirmwareVersion:]
  -[HMDAccessoryFirmwareUpdateProfile __handleFirmwareVersionUpdate:]


HMDHAPMetricsReachabilityAddRemoveEvent : HMDHAPMetrics <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  unsigned long addRemoveEvent
 @property  NSNumber *linkType

  // instance methods
  -[HMDHAPMetricsReachabilityAddRemoveEvent linkType]
  -[HMDHAPMetricsReachabilityAddRemoveEvent eventName]
  -[HMDHAPMetricsReachabilityAddRemoveEvent .cxx_destruct]
  -[HMDHAPMetricsReachabilityAddRemoveEvent serializedEvent]
  -[HMDHAPMetricsReachabilityAddRemoveEvent initWithAccessory:hmdAddRemoveEvent:forLinkType:]
  -[HMDHAPMetricsReachabilityAddRemoveEvent addRemoveEvent]


HMDModernTransportMessageContextManager : HMFObject <HMDModernTransportMessageContextFactory, HMFLogging>
 @property  <HMDModernTransportMessageContextFactory> *factory
 @property  NSMutableDictionary *contexts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDModernTransportMessageContextManager logCategory]

  // instance methods
  -[HMDModernTransportMessageContextManager contextForIdentifier:]
  -[HMDModernTransportMessageContextManager .cxx_destruct]
  -[HMDModernTransportMessageContextManager contexts]
  -[HMDModernTransportMessageContextManager factory]
  -[HMDModernTransportMessageContextManager init]
  -[HMDModernTransportMessageContextManager initWithFactory:]
  -[HMDModernTransportMessageContextManager contextWithMessage:options:completionHandler:dateProvider:timerProvider:]
  -[HMDModernTransportMessageContextManager createContextWithMessage:options:completionHandler:dateProvider:timerProvider:]
  -[HMDModernTransportMessageContextManager completeContext:withPayload:error:isFinal:]


HMDModernTransportDeviceReachabilityObserverListenerContext : NSObject
 @property  NSHashTable *listeners
 @property  NSNumber *reachability
 @property  HMDDeviceAddress *address
 @property  double unreachableStartTime

  // instance methods
  -[HMDModernTransportDeviceReachabilityObserverListenerContext reachability]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext setReachability:]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext setAddress:]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext listeners]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext .cxx_destruct]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext address]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext initWithAddress:]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext unreachableStartTime]
  -[HMDModernTransportDeviceReachabilityObserverListenerContext setUnreachableStartTime:]


HMDModernTransportDeviceReachabilityObserver : HMFObject <HMFTimerDelegate, HMDRemoteMessageTransportReachabilityDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDModernTransportDeviceReachabilityObserver logCategory]

  // instance methods
  -[HMDModernTransportDeviceReachabilityObserver timerDidFire:]
  -[HMDModernTransportDeviceReachabilityObserver .cxx_destruct]
  -[HMDModernTransportDeviceReachabilityObserver init]
  -[HMDModernTransportDeviceReachabilityObserver transport:idsIdentifier:didAppearReachable:]
  -[HMDModernTransportDeviceReachabilityObserver initWithTimerProvider:dateProvider:]
  -[HMDModernTransportDeviceReachabilityObserver addListener:forDeviceAddress:]
  -[HMDModernTransportDeviceReachabilityObserver removeListener:forDeviceAddress:]
  -[HMDModernTransportDeviceReachabilityObserver isDeviceAddressReachable:]
  -[HMDModernTransportDeviceReachabilityObserver _evaluateDebounceTimer]
  -[HMDModernTransportDeviceReachabilityObserver _setUnreachablePendingForContext:]
  -[HMDModernTransportDeviceReachabilityObserver _clearUnreachablePendingForContext:]
  -[HMDModernTransportDeviceReachabilityObserver _notifyListeners:address:isReachable:]
  -[HMDModernTransportDeviceReachabilityObserver _serviceExpiredUnreachableDevices]


HMDCameraVideoTier : HMFObject <NSSecureCoding>
 @property  HMDVideoResolution *videoResolution
 @property  NSNumber *maxBitRate
 @property  NSNumber *minBitRate
 @property  NSNumber *rtcpInterval
 @property  NSNumber *framerate

  // class methods
  +[HMDCameraVideoTier supportsSecureCoding]

  // instance methods
  -[HMDCameraVideoTier framerate]
  -[HMDCameraVideoTier encodeWithCoder:]
  -[HMDCameraVideoTier .cxx_destruct]
  -[HMDCameraVideoTier setFramerate:]
  -[HMDCameraVideoTier isEqual:]
  -[HMDCameraVideoTier initWithCoder:]
  -[HMDCameraVideoTier videoResolution]
  -[HMDCameraVideoTier rtcpInterval]
  -[HMDCameraVideoTier initWithVideoResolution:framerate:minBitRate:maxBitRate:rtcpInterval:]
  -[HMDCameraVideoTier maxBitRate]
  -[HMDCameraVideoTier minBitRate]


HMDHomeWalletKeyAccessoryConfigureState : HMFObject
 @property  BOOL readerKeyConfigureInProgress
 @property  BOOL readerKeyConfigured
 @property  BOOL shouldRetryReaderKeyConfigureOnFailure

  // instance methods
  -[HMDHomeWalletKeyAccessoryConfigureState readerKeyConfigureInProgress]
  -[HMDHomeWalletKeyAccessoryConfigureState setReaderKeyConfigureInProgress:]
  -[HMDHomeWalletKeyAccessoryConfigureState readerKeyConfigured]
  -[HMDHomeWalletKeyAccessoryConfigureState setReaderKeyConfigured:]
  -[HMDHomeWalletKeyAccessoryConfigureState shouldRetryReaderKeyConfigureOnFailure]
  -[HMDHomeWalletKeyAccessoryConfigureState setShouldRetryReaderKeyConfigureOnFailure:]


HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation : HMFObject <NSCopying>
 @property  NSData *deviceCredentialKey
 @property  NSSet *accessoriesUUIDs
 @property  HMDUser *user

  // instance methods
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation attributeDescriptions]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation user]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation .cxx_destruct]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation copyWithZone:]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation deviceCredentialKey]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation initWithDeviceCredentialKey:accessoriesUUIDs:user:]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation initWithDeviceCredentialKey:accessories:user:]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation operationByMergingWithOperation:]
  -[HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation accessoriesUUIDs]


HMDHomeWalletKeyAccessoryManager : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  HMDHome *home
 @property  NSUUID *uuid
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSNotificationCenter *notificationCenter
 @property  <HMDHomeWalletDataSource> *dataSource
 @property  BOOL currentDevicePrimaryResident
 @property  BOOL canConfigureAccessories
 @property  NSMutableDictionary *pendingAccessoryDeviceCredentialKeyOperationByDeviceUUID
 @property  HMDHomeWalletKeyAccessoryManagerDeviceCredentialKeyOperation *pendingPrimaryResidentDeviceCredentialKeyOperation
 @property  NSMutableDictionary *accessoriesUUIDsByDeviceCredentialKey
 @property  NSMutableDictionary *nfcReaderKeyConfigureStateByAccessoryUUID
 @property  HMDDevice *primaryResidentDevice
 @property  NSNumber *walletKeyColor
 @property  NSString *walletKeyColorPreferenceKey
 @property  <HMDHomeWalletKeyAccessoryManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomeWalletKeyAccessoryManager logCategory]

  // instance methods
  -[HMDHomeWalletKeyAccessoryManager notificationCenter]
  -[HMDHomeWalletKeyAccessoryManager home]
  -[HMDHomeWalletKeyAccessoryManager logIdentifier]
  -[HMDHomeWalletKeyAccessoryManager dataSource]
  -[HMDHomeWalletKeyAccessoryManager setDelegate:]
  -[HMDHomeWalletKeyAccessoryManager workQueue]
  -[HMDHomeWalletKeyAccessoryManager delegate]
  -[HMDHomeWalletKeyAccessoryManager uuid]
  -[HMDHomeWalletKeyAccessoryManager .cxx_destruct]
  -[HMDHomeWalletKeyAccessoryManager messageTargetUUID]
  -[HMDHomeWalletKeyAccessoryManager messageReceiveQueue]
  -[HMDHomeWalletKeyAccessoryManager messageDispatcher]
  -[HMDHomeWalletKeyAccessoryManager setHome:]
  -[HMDHomeWalletKeyAccessoryManager fetchWalletKeyColorWithCompletion:]
  -[HMDHomeWalletKeyAccessoryManager setMessageDispatcher:]
  -[HMDHomeWalletKeyAccessoryManager isCurrentDevicePrimaryResident]
  -[HMDHomeWalletKeyAccessoryManager handleHomeDidEnableCharacteristicNotification:]
  -[HMDHomeWalletKeyAccessoryManager handleHomeDidDisableCharacteristicNotification:]
  -[HMDHomeWalletKeyAccessoryManager configureWithHome:]
  -[HMDHomeWalletKeyAccessoryManager handleHomeAddedAccessoryNotification:]
  -[HMDHomeWalletKeyAccessoryManager handleHomeAccessoryRemovedNotification:]
  -[HMDHomeWalletKeyAccessoryManager initWithUUID:workQueue:]
  -[HMDHomeWalletKeyAccessoryManager handleAccessoryCharacteristicsChangedNotification:]
  -[HMDHomeWalletKeyAccessoryManager handleAccessoryConnected:]
  -[HMDHomeWalletKeyAccessoryManager handlePrimaryResidentUpdateNotification:]
  -[HMDHomeWalletKeyAccessoryManager primaryResidentDevice]
  -[HMDHomeWalletKeyAccessoryManager walletKeyColor]
  -[HMDHomeWalletKeyAccessoryManager handleConfigureAccessoriesWithDeviceCredentialKeyMessage:]
  -[HMDHomeWalletKeyAccessoryManager handleWalletKeySupportDidChange:]
  -[HMDHomeWalletKeyAccessoryManager handleHomeNFCReaderKeyKeychainItemAvailableNotification:]
  -[HMDHomeWalletKeyAccessoryManager initWithUUID:workQueue:dataSource:notificationCenter:]
  -[HMDHomeWalletKeyAccessoryManager configureAccessory:withDeviceCredentialKey:completion:]
  -[HMDHomeWalletKeyAccessoryManager configureAllAccessoriesWithDeviceCredentialKey:completion:]
  -[HMDHomeWalletKeyAccessoryManager handleWalletKeyRemoved]
  -[HMDHomeWalletKeyAccessoryManager createAccessoryDeviceCredentialKeyPendingOperationWithAccessoriesUUIDs:deviceCredentialKey:user:deviceUUID:]
  -[HMDHomeWalletKeyAccessoryManager createAccessoryDeviceCredentialKeyPendingOperationWithAccessories:deviceCredentialKey:user:deviceUUID:]
  -[HMDHomeWalletKeyAccessoryManager walletKeyColorPreferenceKey]
  -[HMDHomeWalletKeyAccessoryManager configureAccessories:withDeviceCredentialKey:completion:]
  -[HMDHomeWalletKeyAccessoryManager requestPrimaryResident:toConfigureAccessories:withDeviceCredentialKey:completion:]
  -[HMDHomeWalletKeyAccessoryManager configureNFCReaderKeyForAllAccessories]
  -[HMDHomeWalletKeyAccessoryManager configureNFCReaderKeyForAccessory:]
  -[HMDHomeWalletKeyAccessoryManager fetchOrConfigureNFCReaderKeyForAccessory:completion:]
  -[HMDHomeWalletKeyAccessoryManager fetchIsAccessoryConfiguredWithReaderKey:accessory:completion:]
  -[HMDHomeWalletKeyAccessoryManager removeNfcReaderKeyWithIdentifier:accessory:completion:]
  -[HMDHomeWalletKeyAccessoryManager configureAccessoryWithNfcReaderKey:accessory:completion:]
  -[HMDHomeWalletKeyAccessoryManager configureNotificationsWithReason:]
  -[HMDHomeWalletKeyAccessoryManager registerForNotificationsWithReason:]
  -[HMDHomeWalletKeyAccessoryManager handlePendingDeviceCredentialKeysSyncForAccessory:withReason:]
  -[HMDHomeWalletKeyAccessoryManager handlePendingDeviceCredentialKeysSyncForAccessories:withReason:]
  -[HMDHomeWalletKeyAccessoryManager unregisterForNotificationsWithReason:]
  -[HMDHomeWalletKeyAccessoryManager configureAccessories:withDeviceCredentialKey:forDeviceWithUUID:user:completion:]
  -[HMDHomeWalletKeyAccessoryManager writeRequestsWithAccessories:home:deviceCredentialKey:user:]
  -[HMDHomeWalletKeyAccessoryManager fetchWalletKeyColorWithAccessory:]
  -[HMDHomeWalletKeyAccessoryManager walletKeyColorWithCharacteristicValue:]
  -[HMDHomeWalletKeyAccessoryManager fetchWalletKeyColorForAccessories:withCompletion:]
  -[HMDHomeWalletKeyAccessoryManager setCurrentDevicePrimaryResident:]
  -[HMDHomeWalletKeyAccessoryManager canConfigureAccessories]
  -[HMDHomeWalletKeyAccessoryManager setCanConfigureAccessories:]
  -[HMDHomeWalletKeyAccessoryManager pendingAccessoryDeviceCredentialKeyOperationByDeviceUUID]
  -[HMDHomeWalletKeyAccessoryManager pendingPrimaryResidentDeviceCredentialKeyOperation]
  -[HMDHomeWalletKeyAccessoryManager setPendingPrimaryResidentDeviceCredentialKeyOperation:]
  -[HMDHomeWalletKeyAccessoryManager accessoriesUUIDsByDeviceCredentialKey]
  -[HMDHomeWalletKeyAccessoryManager nfcReaderKeyConfigureStateByAccessoryUUID]


HMDPhotoLibraryImportingPersonsImportedLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  long long totalNumberOfImportedPersons
 @property  long long numberOfNamedImportedPersons

  // instance methods
  -[HMDPhotoLibraryImportingPersonsImportedLogEvent eventName]
  -[HMDPhotoLibraryImportingPersonsImportedLogEvent serializedEvent]
  -[HMDPhotoLibraryImportingPersonsImportedLogEvent initWithTotalNumberOfImportedPersons:numberOfNamedImportedPersons:]
  -[HMDPhotoLibraryImportingPersonsImportedLogEvent totalNumberOfImportedPersons]
  -[HMDPhotoLibraryImportingPersonsImportedLogEvent numberOfNamedImportedPersons]


HMDPhotoLibraryImportingFaceCropsImportedLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  long long numberOfImportedFaceCrops

  // instance methods
  -[HMDPhotoLibraryImportingFaceCropsImportedLogEvent eventName]
  -[HMDPhotoLibraryImportingFaceCropsImportedLogEvent serializedEvent]
  -[HMDPhotoLibraryImportingFaceCropsImportedLogEvent initWithNumberOfImportedFaceCrops:]
  -[HMDPhotoLibraryImportingFaceCropsImportedLogEvent numberOfImportedFaceCrops]


HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  long long numberOfRenamedPersons

  // instance methods
  -[HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent eventName]
  -[HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent serializedEvent]
  -[HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent initWithNumberOfRenamedPersons:]
  -[HMDPhotoLibraryImportingPhotoLibraryRenamedPersonsLogEvent numberOfRenamedPersons]


HMDLaunchEvent : HMMLogEvent <HMDDiagnosticReportLogging, HMMCoreAnalyticsLogging>
 @property  double diagnosticReportThreshold
 @property  NSString *diagnosticReportEventType
 @property  NSString *diagnosticReportEventSubType
 @property  HMFActivity *activity
 @property  unsigned long systemUptimeMillisecondsRecordedAtLaunch
 @property  BOOL hasUncommittedRecords
 @property  BOOL hasUncommittedAndPushedRecords
 @property  long long numUncommittedRecords
 @property  long long numUncommittedAndPushedRecords
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDLaunchEvent eventName]
  -[HMDLaunchEvent .cxx_destruct]
  -[HMDLaunchEvent activity]
  -[HMDLaunchEvent setActivity:]
  -[HMDLaunchEvent init]
  -[HMDLaunchEvent serializedEvent]
  -[HMDLaunchEvent numUncommittedRecords]
  -[HMDLaunchEvent numUncommittedAndPushedRecords]
  -[HMDLaunchEvent markXPCMessageTransportStarted]
  -[HMDLaunchEvent systemUptimeMillisecondsRecordedAtLaunch]
  -[HMDLaunchEvent hasUncommittedRecords]
  -[HMDLaunchEvent setHasUncommittedRecords:]
  -[HMDLaunchEvent hasUncommittedAndPushedRecords]
  -[HMDLaunchEvent setHasUncommittedAndPushedRecords:]
  -[HMDLaunchEvent setNumUncommittedRecords:]
  -[HMDLaunchEvent setNumUncommittedAndPushedRecords:]
  -[HMDLaunchEvent updateDiagnosticReportSignature:]
  -[HMDLaunchEvent diagnosticReportEventType]
  -[HMDLaunchEvent diagnosticReportEventSubType]
  -[HMDLaunchEvent diagnosticReportThreshold]


HMDBackingStoreCKRebuildEvent : HMDHMBLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int rebuildStatus

  // instance methods
  -[HMDBackingStoreCKRebuildEvent AWDMessageType]
  -[HMDBackingStoreCKRebuildEvent metricForAWD]
  -[HMDBackingStoreCKRebuildEvent initWithCloudZoneID:rebuildStatus:]
  -[HMDBackingStoreCKRebuildEvent rebuildStatus]


HMDLightProfileDataSource : HMFObject <HMDLightProfileDataSource>
 @property  NSDate *date
 @property  NSTimeZone *localTimeZone
 @property  NSDictionary *naturalLightingCurveResourceFileContent
 @property  double naturalLightingCurveUpdateInterval
 @property  double naturalLightingCurveUpdateAccessoryTimeDifferenceThreshold
 @property  long long naturalLightingEnabledMaxRetryCount
 @property  double naturalLightingEnabledRetryInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDLightProfileDataSource date]
  -[HMDLightProfileDataSource localTimeZone]
  -[HMDLightProfileDataSource millisecondsElapsedSinceStartOfDayWithDate:timeZone:]
  -[HMDLightProfileDataSource dispatchAfterTimeInterval:queue:block:]
  -[HMDLightProfileDataSource naturalLightingCurveResourceFileContent]
  -[HMDLightProfileDataSource naturalLightingCurveUpdateInterval]
  -[HMDLightProfileDataSource naturalLightingCurveUpdateAccessoryTimeDifferenceThreshold]
  -[HMDLightProfileDataSource naturalLightingEnabledMaxRetryCount]
  -[HMDLightProfileDataSource naturalLightingEnabledRetryInterval]


HMDCameraVideoTierParameters : HMFObject <NSSecureCoding, HMFLogging>
 @property  HMDCameraVideoTier *firstPickedTier
 @property  NSArray *tierOrder
 @property  NSDictionary *videoTierCombinations
 @property  HMDCameraStreamSessionID *sessionID
 @property  HMDCameraVideoTier *currentPickedTier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraVideoTierParameters supportsSecureCoding]
  +[HMDCameraVideoTierParameters logCategory]

  // instance methods
  -[HMDCameraVideoTierParameters logIdentifier]
  -[HMDCameraVideoTierParameters sessionID]
  -[HMDCameraVideoTierParameters encodeWithCoder:]
  -[HMDCameraVideoTierParameters .cxx_destruct]
  -[HMDCameraVideoTierParameters initWithCoder:]
  -[HMDCameraVideoTierParameters initWithSessionID:streamingCapabilities:]
  -[HMDCameraVideoTierParameters _generateAllVideoTiers:]
  -[HMDCameraVideoTierParameters updateTierOrder:]
  -[HMDCameraVideoTierParameters updateTierParameters:firstPickedParameter:]
  -[HMDCameraVideoTierParameters updateFirstPickedTier:]
  -[HMDCameraVideoTierParameters pickLowerTier]
  -[HMDCameraVideoTierParameters pickHigherTier]
  -[HMDCameraVideoTierParameters videoTierCombinations]
  -[HMDCameraVideoTierParameters tierOrder]
  -[HMDCameraVideoTierParameters setTierOrder:]
  -[HMDCameraVideoTierParameters firstPickedTier]
  -[HMDCameraVideoTierParameters setFirstPickedTier:]
  -[HMDCameraVideoTierParameters currentPickedTier]
  -[HMDCameraVideoTierParameters setCurrentPickedTier:]


HMDHomeLockNotificationContextResolutionResult : HMFObject <NSSecureCoding, NSCopying>
 @property  NSUUID *userUUID
 @property  NSString *label

  // class methods
  +[HMDHomeLockNotificationContextResolutionResult supportsSecureCoding]

  // instance methods
  -[HMDHomeLockNotificationContextResolutionResult encodeWithCoder:]
  -[HMDHomeLockNotificationContextResolutionResult attributeDescriptions]
  -[HMDHomeLockNotificationContextResolutionResult userUUID]
  -[HMDHomeLockNotificationContextResolutionResult .cxx_destruct]
  -[HMDHomeLockNotificationContextResolutionResult copyWithZone:]
  -[HMDHomeLockNotificationContextResolutionResult label]
  -[HMDHomeLockNotificationContextResolutionResult isEqual:]
  -[HMDHomeLockNotificationContextResolutionResult initWithCoder:]
  -[HMDHomeLockNotificationContextResolutionResult initWithUserUUID:label:]


HMDHomePersonManagerSettingsModel : HMDHomeSettingsBaseModel
 @property  NSString *zoneUUIDString
 @property  NSUUID *zoneUUID

  // class methods
  +[HMDHomePersonManagerSettingsModel properties]
  +[HMDHomePersonManagerSettingsModel modelIDForHomeUUID:]
  +[HMDHomePersonManagerSettingsModel defaultModelForHomeUUID:]

  // instance methods
  -[HMDHomePersonManagerSettingsModel initWithHomeUUID:]
  -[HMDHomePersonManagerSettingsModel zoneUUID]
  -[HMDHomePersonManagerSettingsModel createSettings]
  -[HMDHomePersonManagerSettingsModel setZoneUUID:]


AWDHomeKitRelaySession : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasErrorCode
 @property  int errorCode
 @property  BOOL hasStatusCode
 @property  int statusCode
 @property  BOOL hasActionType
 @property  int actionType

  // instance methods
  -[AWDHomeKitRelaySession statusCode]
  -[AWDHomeKitRelaySession hasErrorCode]
  -[AWDHomeKitRelaySession setErrorCode:]
  -[AWDHomeKitRelaySession errorCode]
  -[AWDHomeKitRelaySession setDuration:]
  -[AWDHomeKitRelaySession setActionType:]
  -[AWDHomeKitRelaySession setTimestamp:]
  -[AWDHomeKitRelaySession hasDuration]
  -[AWDHomeKitRelaySession actionType]
  -[AWDHomeKitRelaySession copyTo:]
  -[AWDHomeKitRelaySession actionTypeAsString:]
  -[AWDHomeKitRelaySession setHasErrorCode:]
  -[AWDHomeKitRelaySession duration]
  -[AWDHomeKitRelaySession mergeFrom:]
  -[AWDHomeKitRelaySession setHasTimestamp:]
  -[AWDHomeKitRelaySession setHasActionType:]
  -[AWDHomeKitRelaySession dictionaryRepresentation]
  -[AWDHomeKitRelaySession hasTimestamp]
  -[AWDHomeKitRelaySession copyWithZone:]
  -[AWDHomeKitRelaySession timestamp]
  -[AWDHomeKitRelaySession readFrom:]
  -[AWDHomeKitRelaySession setStatusCode:]
  -[AWDHomeKitRelaySession setHasDuration:]
  -[AWDHomeKitRelaySession writeTo:]
  -[AWDHomeKitRelaySession StringAsActionType:]
  -[AWDHomeKitRelaySession hasActionType]
  -[AWDHomeKitRelaySession isEqual:]
  -[AWDHomeKitRelaySession setHasStatusCode:]
  -[AWDHomeKitRelaySession hasStatusCode]


HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload : HMFObject <HMMessageEncoding>
 @property  NSUUID *groupIdentifier
 @property  NSUUID *associatedGroupIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload messageName]

  // instance methods
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload groupIdentifier]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload attributeDescriptions]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload initWithPayload:]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload .cxx_destruct]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload isEqual:]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload associatedGroupIdentifier]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload payloadCopy]
  -[HMDMediaGroupsAggregatorUpdateAssociatedGroupIdentifierPayload initWithGroupIdentifier:associatedGroupIdentifier:]


HMDAppleMediaAccessoryMessageHandler : HMDMessageHandler
  // instance methods
  -[HMDAppleMediaAccessoryMessageHandler initWithMessageTargetUUID:messageDispatcher:notificationCenter:ownerPrivateRemoteMessages:adminPrivateRemoteMessages:internalMessages:notifications:notificationsToObject:]
  -[HMDAppleMediaAccessoryMessageHandler handleAppleMediaAccessoryDeviceUpdatedNotification:]
  -[HMDAppleMediaAccessoryMessageHandler handleAppleMediaAccessoryDeviceIsReachableNotification:]


HMPBMetadata : PBCodable <NSCopying>
 @property  BOOL hasVersion
 @property  int version
 @property  NSMutableArray *hapCharacteristics
 @property  NSMutableArray *hapServices
 @property  NSMutableArray *hapCategories

  // class methods
  +[HMPBMetadata hapCharacteristicsType]
  +[HMPBMetadata hapServicesType]
  +[HMPBMetadata hapCategoriesType]

  // instance methods
  -[HMPBMetadata copyTo:]
  -[HMPBMetadata .cxx_destruct]
  -[HMPBMetadata mergeFrom:]
  -[HMPBMetadata hapServices]
  -[HMPBMetadata hasVersion]
  -[HMPBMetadata version]
  -[HMPBMetadata dictionaryRepresentation]
  -[HMPBMetadata copyWithZone:]
  -[HMPBMetadata setHasVersion:]
  -[HMPBMetadata readFrom:]
  -[HMPBMetadata setVersion:]
  -[HMPBMetadata hapCharacteristics]
  -[HMPBMetadata writeTo:]
  -[HMPBMetadata isEqual:]
  -[HMPBMetadata clearHapCharacteristics]
  -[HMPBMetadata addHapCharacteristics:]
  -[HMPBMetadata hapCharacteristicsCount]
  -[HMPBMetadata hapCharacteristicsAtIndex:]
  -[HMPBMetadata clearHapServices]
  -[HMPBMetadata addHapServices:]
  -[HMPBMetadata hapServicesCount]
  -[HMPBMetadata hapServicesAtIndex:]
  -[HMPBMetadata clearHapCategories]
  -[HMPBMetadata addHapCategories:]
  -[HMPBMetadata hapCategoriesCount]
  -[HMPBMetadata hapCategoriesAtIndex:]
  -[HMPBMetadata setHapCharacteristics:]
  -[HMPBMetadata setHapServices:]
  -[HMPBMetadata hapCategories]
  -[HMPBMetadata setHapCategories:]


HMDAccessoryFirmwareUpdateTask : HMFObject <HMFLogging, HMDAccessoryFirmwareUpdateTask>
 @property  HMDAccessoryFirmwareUpdateSession *session
 @property  HMDAccessoryFirmwareUpdateProfile *profile
 @property  HMDHAPAccessory *accessory
 @property  long long accessoryActiveTransport
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double initialDelay
 @property  NSObject<OS_xpc_object> *criteria
 @property  BOOL shouldRun
 @property  BOOL shouldRunOnCurrentDevice
 @property  BOOL userInitiated

  // class methods
  +[HMDAccessoryFirmwareUpdateTask logCategory]

  // instance methods
  -[HMDAccessoryFirmwareUpdateTask accessory]
  -[HMDAccessoryFirmwareUpdateTask session]
  -[HMDAccessoryFirmwareUpdateTask initialDelay]
  -[HMDAccessoryFirmwareUpdateTask run]
  -[HMDAccessoryFirmwareUpdateTask privateDescription]
  -[HMDAccessoryFirmwareUpdateTask profile]
  -[HMDAccessoryFirmwareUpdateTask .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateTask isUserInitiated]
  -[HMDAccessoryFirmwareUpdateTask criteria]
  -[HMDAccessoryFirmwareUpdateTask shouldRun]
  -[HMDAccessoryFirmwareUpdateTask shouldRunOnCurrentDevice]
  -[HMDAccessoryFirmwareUpdateTask initWithSession:profile:initialDelay:]
  -[HMDAccessoryFirmwareUpdateTask accessoryActiveTransport]


HMDAccessoryFirmwareUpdateRegisterTask : HMDAccessoryFirmwareUpdateTask
  // instance methods
  -[HMDAccessoryFirmwareUpdateRegisterTask run]
  -[HMDAccessoryFirmwareUpdateRegisterTask isUserInitiated]
  -[HMDAccessoryFirmwareUpdateRegisterTask criteria]
  -[HMDAccessoryFirmwareUpdateRegisterTask shouldRun]
  -[HMDAccessoryFirmwareUpdateRegisterTask initWithSession:profile:initialDelay:]


HMDAccessoryFirmwareUpdateStagingTask : HMDAccessoryFirmwareUpdateTask
  // instance methods
  -[HMDAccessoryFirmwareUpdateStagingTask run]
  -[HMDAccessoryFirmwareUpdateStagingTask isUserInitiated]
  -[HMDAccessoryFirmwareUpdateStagingTask criteria]
  -[HMDAccessoryFirmwareUpdateStagingTask shouldRun]
  -[HMDAccessoryFirmwareUpdateStagingTask initWithSession:profile:userInitiated:delay:]


HMDAccessoryFirmwareUpdateApplyTask : HMDAccessoryFirmwareUpdateTask <HMFLogging>
 @property  <HMDAccessoryFirmwareUpdatePolicy> *policy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAccessoryFirmwareUpdateApplyTask run]
  -[HMDAccessoryFirmwareUpdateApplyTask .cxx_destruct]
  -[HMDAccessoryFirmwareUpdateApplyTask isUserInitiated]
  -[HMDAccessoryFirmwareUpdateApplyTask criteria]
  -[HMDAccessoryFirmwareUpdateApplyTask shouldRun]
  -[HMDAccessoryFirmwareUpdateApplyTask policy]
  -[HMDAccessoryFirmwareUpdateApplyTask initWithSession:profile:policy:userInitiated:delay:]
  -[HMDAccessoryFirmwareUpdateApplyTask _isApplyAllowedByPolicy]


HMDCompanionLinkClient : NSObject <HMDCompanionLinkClient>
 @property  RPCompanionLinkClient *client
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? deviceFoundHandler
 @property  @? deviceLostHandler
 @property  @? deviceChangedHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCompanionLinkClient setDeviceLostHandler:]
  -[HMDCompanionLinkClient setDeviceFoundHandler:]
  -[HMDCompanionLinkClient dealloc]
  -[HMDCompanionLinkClient setDeviceChangedHandler:]
  -[HMDCompanionLinkClient .cxx_destruct]
  -[HMDCompanionLinkClient setClient:]
  -[HMDCompanionLinkClient stop]
  -[HMDCompanionLinkClient setDispatchQueue:]
  -[HMDCompanionLinkClient deviceFoundHandler]
  -[HMDCompanionLinkClient client]
  -[HMDCompanionLinkClient deviceLostHandler]
  -[HMDCompanionLinkClient dispatchQueue]
  -[HMDCompanionLinkClient start]
  -[HMDCompanionLinkClient deviceChangedHandler]


HMDAccessCodeDemoDataMocker : HMFObject <HMFLogging>
 @property  NSMutableDictionary *accessCodes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessCodeDemoDataMocker logCategory]

  // instance methods
  -[HMDAccessCodeDemoDataMocker .cxx_destruct]
  -[HMDAccessCodeDemoDataMocker init]
  -[HMDAccessCodeDemoDataMocker _handleUpdateRequest:]
  -[HMDAccessCodeDemoDataMocker handleWriteRequests:]
  -[HMDAccessCodeDemoDataMocker handleReadRequests:]
  -[HMDAccessCodeDemoDataMocker _controlResponseForReadRequest:]
  -[HMDAccessCodeDemoDataMocker _controlResponseForWriteRequest:]
  -[HMDAccessCodeDemoDataMocker _handleListRequest]
  -[HMDAccessCodeDemoDataMocker _handleReadRequest:]
  -[HMDAccessCodeDemoDataMocker _handleAddRequest:]
  -[HMDAccessCodeDemoDataMocker _handleRemoveRequest:]
  -[HMDAccessCodeDemoDataMocker accessCodes]


HMDWHAAccessControlEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isP2PEnabled
 @property  int privilegeLevel
 @property  BOOL isPasswordSet

  // class methods
  +[HMDWHAAccessControlEvent eventWithP2PEnabled:privilegeLevel:passwordSet:]
  +[HMDWHAAccessControlEvent awdUserPrivilegeFromHMUserPrivilege:]

  // instance methods
  -[HMDWHAAccessControlEvent AWDMessageType]
  -[HMDWHAAccessControlEvent metricForAWD]
  -[HMDWHAAccessControlEvent setIsP2PEnabled:]
  -[HMDWHAAccessControlEvent privilegeLevel]
  -[HMDWHAAccessControlEvent setPrivilegeLevel:]
  -[HMDWHAAccessControlEvent setIsPasswordSet:]
  -[HMDWHAAccessControlEvent isP2PEnabled]
  -[HMDWHAAccessControlEvent isPasswordSet]


HMDHomeManagerXPCMessageSendPolicy : HMDXPCMessageSendPolicy
 @property  unsigned long options
 @property  unsigned long entitlements
 @property  BOOL active

  // instance methods
  -[HMDHomeManagerXPCMessageSendPolicy entitlements]
  -[HMDHomeManagerXPCMessageSendPolicy attributeDescriptions]
  -[HMDHomeManagerXPCMessageSendPolicy isActive]
  -[HMDHomeManagerXPCMessageSendPolicy options]
  -[HMDHomeManagerXPCMessageSendPolicy copyWithZone:]
  -[HMDHomeManagerXPCMessageSendPolicy isEqual:]
  -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:]
  -[HMDHomeManagerXPCMessageSendPolicy canSendWithPolicyParameters:]
  -[HMDHomeManagerXPCMessageSendPolicy initWithEntitlements:options:active:]


HMDTriggerPolicy : HMFObject <NSSecureCoding>
 @property  NSUUID *uuid

  // class methods
  +[HMDTriggerPolicy supportsSecureCoding]

  // instance methods
  -[HMDTriggerPolicy encodeWithCoder:]
  -[HMDTriggerPolicy uuid]
  -[HMDTriggerPolicy .cxx_destruct]
  -[HMDTriggerPolicy initWithIdentifier:]
  -[HMDTriggerPolicy isEqual:]
  -[HMDTriggerPolicy init]
  -[HMDTriggerPolicy initWithCoder:]
  -[HMDTriggerPolicy applyPolicy:]


HMDTriggerDeletePolicy : HMDTriggerPolicy
  // class methods
  +[HMDTriggerDeletePolicy supportsSecureCoding]

  // instance methods
  -[HMDTriggerDeletePolicy encodeWithCoder:]
  -[HMDTriggerDeletePolicy initWithIdentifier:]
  -[HMDTriggerDeletePolicy isEqual:]
  -[HMDTriggerDeletePolicy init]
  -[HMDTriggerDeletePolicy initWithCoder:]
  -[HMDTriggerDeletePolicy applyPolicy:]


HMDTriggerDeleteAfterExecutionPolicy : HMDTriggerDeletePolicy
  // class methods
  +[HMDTriggerDeleteAfterExecutionPolicy supportsSecureCoding]

  // instance methods
  -[HMDTriggerDeleteAfterExecutionPolicy encodeWithCoder:]
  -[HMDTriggerDeleteAfterExecutionPolicy isEqual:]
  -[HMDTriggerDeleteAfterExecutionPolicy init]
  -[HMDTriggerDeleteAfterExecutionPolicy initWithCoder:]
  -[HMDTriggerDeleteAfterExecutionPolicy applyPolicy:]


HMDMediaGroupsAggregatorBackupReceiver : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  <HMDMediaGroupsAggregatorBackupReceiverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMediaGroupsAggregatorBackupReceiver logCategory]

  // instance methods
  -[HMDMediaGroupsAggregatorBackupReceiver identifier]
  -[HMDMediaGroupsAggregatorBackupReceiver logIdentifier]
  -[HMDMediaGroupsAggregatorBackupReceiver setDelegate:]
  -[HMDMediaGroupsAggregatorBackupReceiver delegate]
  -[HMDMediaGroupsAggregatorBackupReceiver .cxx_destruct]
  -[HMDMediaGroupsAggregatorBackupReceiver messageTargetUUID]
  -[HMDMediaGroupsAggregatorBackupReceiver setIdentifier:]
  -[HMDMediaGroupsAggregatorBackupReceiver init]
  -[HMDMediaGroupsAggregatorBackupReceiver configureWithHome:messageDispatcher:]
  -[HMDMediaGroupsAggregatorBackupReceiver registerForMessagesWithHome:messageDispatcher:]
  -[HMDMediaGroupsAggregatorBackupReceiver handleGroupsBackupDataMessage:]


HMDRemoteDeviceConfirmationHandler : HMFObject <HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFTimer *timeoutTimer
 @property  @? handler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRemoteDeviceConfirmationHandler timerDidFire:]
  -[HMDRemoteDeviceConfirmationHandler setHandler:]
  -[HMDRemoteDeviceConfirmationHandler workQueue]
  -[HMDRemoteDeviceConfirmationHandler .cxx_destruct]
  -[HMDRemoteDeviceConfirmationHandler handler]
  -[HMDRemoteDeviceConfirmationHandler timeoutTimer]
  -[HMDRemoteDeviceConfirmationHandler initWithTimeoutTimer:workQueue:handler:]


HMDRemoteDeviceInformation : HMFObject
  // instance methods
  -[HMDRemoteDeviceInformation attributeDescriptions]
  -[HMDRemoteDeviceInformation .cxx_destruct]
  -[HMDRemoteDeviceInformation init]


HMDRemoteDeviceMonitor : HMFObject <HMFLogging, HMFTimerDelegate, HMDIDSServiceDelegate, IDSAccountDelegate, IDSAccountRegistrationDelegate, HMDIDSActivityMonitorObserverDelegate, HMFNetMonitorDelegate, HMDRemoteDeviceMonitorFactory, HMDModernTransportDeviceReachabilityObserverListener>
 @property  HMDModernTransportDeviceReachabilityObserver *transportReachabilityObserver
 @property  HMDAccountRegistry *accountRegistry
 @property  BOOL reachable
 @property  NSArray *unreachableDevices
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteDeviceMonitor logCategory]
  +[HMDRemoteDeviceMonitor pingMessageForDevice:timeout:restriction:]

  // instance methods
  -[HMDRemoteDeviceMonitor dumpState]
  -[HMDRemoteDeviceMonitor timerDidFire:]
  -[HMDRemoteDeviceMonitor isReachable]
  -[HMDRemoteDeviceMonitor dealloc]
  -[HMDRemoteDeviceMonitor .cxx_destruct]
  -[HMDRemoteDeviceMonitor service:account:incomingMessage:fromID:context:]
  -[HMDRemoteDeviceMonitor account:isActiveChanged:]
  -[HMDRemoteDeviceMonitor account:loginChanged:]
  -[HMDRemoteDeviceMonitor start]
  -[HMDRemoteDeviceMonitor service:activeAccountsChanged:]
  -[HMDRemoteDeviceMonitor init]
  -[HMDRemoteDeviceMonitor networkMonitorIsReachable:]
  -[HMDRemoteDeviceMonitor networkMonitorIsUnreachable:]
  -[HMDRemoteDeviceMonitor accountRegistry]
  -[HMDRemoteDeviceMonitor handleCurrentDeviceUpdate:]
  -[HMDRemoteDeviceMonitor handleAccountRemoved:]
  -[HMDRemoteDeviceMonitor handleDeviceRemovedFromAccount:]
  -[HMDRemoteDeviceMonitor observer:didUpdateDevice:isOnline:]
  -[HMDRemoteDeviceMonitor newInitialDeviceHealthTimer]
  -[HMDRemoteDeviceMonitor newRepeatingDeviceHealthTimer]
  -[HMDRemoteDeviceMonitor newDeviceMonitoringTimer]
  -[HMDRemoteDeviceMonitor newSendMessageOperationWithMessage:]
  -[HMDRemoteDeviceMonitor newConfirmationHandlerWithTimeout:workQueue:handler:]
  -[HMDRemoteDeviceMonitor modernTransportDeviceReachabilityObserverDidUpdate:isReachable:]
  -[HMDRemoteDeviceMonitor initWithAccountRegistry:activityObserver:accountManager:]
  -[HMDRemoteDeviceMonitor initWithAccountRegistry:activityObserver:queue:service:modernService:accountManager:remoteAccountManager:netMonitor:factory:]
  -[HMDRemoteDeviceMonitor transportReachabilityObserver]
  -[HMDRemoteDeviceMonitor setTransportReachabilityObserver:]
  -[HMDRemoteDeviceMonitor unreachableDevices]
  -[HMDRemoteDeviceMonitor startMonitoringDevice:withInitialReachability:]
  -[HMDRemoteDeviceMonitor stopMonitoringDevice:]
  -[HMDRemoteDeviceMonitor _handleGlobalReachabilityChange]
  -[HMDRemoteDeviceMonitor confirmDevice:timeout:completionHandler:]
  -[HMDRemoteDeviceMonitor _handleIncomingMessageForDevice:]


HMDMediaDestinationControllerMessageHandler : HMDAppleMediaAccessoryMessageHandler <HMFLogging>
 @property  <HMDMediaDestinationControllerMessageHandlerDataSource> *dataSource
 @property  <HMDMediaDestinationControllerMessageHandlerDelegate> *delegate
 @property  HMDMediaDestinationControllerMetricsEventDispatcher *metricsEventDispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationControllerMessageHandler logCategory]

  // instance methods
  -[HMDMediaDestinationControllerMessageHandler logIdentifier]
  -[HMDMediaDestinationControllerMessageHandler dataSource]
  -[HMDMediaDestinationControllerMessageHandler setDelegate:]
  -[HMDMediaDestinationControllerMessageHandler delegate]
  -[HMDMediaDestinationControllerMessageHandler .cxx_destruct]
  -[HMDMediaDestinationControllerMessageHandler setDataSource:]
  -[HMDMediaDestinationControllerMessageHandler metricsEventDispatcher]
  -[HMDMediaDestinationControllerMessageHandler setMetricsEventDispatcher:]
  -[HMDMediaDestinationControllerMessageHandler handleHomeAccessoryRemovedNotification:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaGroupsAggregateConsumerUpdatedAggregateDataNotification:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaDestinationUpdatedNotification:]
  -[HMDMediaDestinationControllerMessageHandler initWithMessageTargetUUID:messageDispatcher:notificationCenter:metricsEventDispatcher:targetDevice:dataSource:delegate:]
  -[HMDMediaDestinationControllerMessageHandler notifyUpdatedDestinationWithIdentifier:]
  -[HMDMediaDestinationControllerMessageHandler destinationIdentifierInMessage:error:]
  -[HMDMediaDestinationControllerMessageHandler upateOptionsInMessage:error:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaDestinationControllerUpdateDestinationRequestMessage:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaSystemAddedNotification:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaSystemRemovedNotification:]
  -[HMDMediaDestinationControllerMessageHandler handleNotificationAccessoryChangedRoom:]
  -[HMDMediaDestinationControllerMessageHandler handleMediaDestinationControllerUpdatedDestinationNotification:]


HMDSnapshotCacheEntry : HMFObject
 @property  HMDSnapshotFile *snapshotFile
 @property  NSString *snapshotCharacteristicEventUUID
 @property  HMFTimer *timer
 @property  @? snapshotRequestCompletion

  // instance methods
  -[HMDSnapshotCacheEntry .cxx_destruct]
  -[HMDSnapshotCacheEntry timer]
  -[HMDSnapshotCacheEntry snapshotFile]
  -[HMDSnapshotCacheEntry snapshotCharacteristicEventUUID]
  -[HMDSnapshotCacheEntry initWithSnapshotCharacteristicEventUUID:snapshotFile:timer:]
  -[HMDSnapshotCacheEntry snapshotRequestCompletion]
  -[HMDSnapshotCacheEntry setSnapshotRequestCompletion:]


AWDHomeKitAssistantAccessControl : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasIsEnabled
 @property  BOOL isEnabled
 @property  BOOL hasOptions
 @property  unsigned long options
 @property  BOOL hasNumEnabledAccessories
 @property  unsigned long numEnabledAccessories
 @property  BOOL hasNumCapableAccessories
 @property  unsigned long numCapableAccessories

  // instance methods
  -[AWDHomeKitAssistantAccessControl setTimestamp:]
  -[AWDHomeKitAssistantAccessControl copyTo:]
  -[AWDHomeKitAssistantAccessControl options]
  -[AWDHomeKitAssistantAccessControl mergeFrom:]
  -[AWDHomeKitAssistantAccessControl setHasTimestamp:]
  -[AWDHomeKitAssistantAccessControl dictionaryRepresentation]
  -[AWDHomeKitAssistantAccessControl hasTimestamp]
  -[AWDHomeKitAssistantAccessControl copyWithZone:]
  -[AWDHomeKitAssistantAccessControl setOptions:]
  -[AWDHomeKitAssistantAccessControl timestamp]
  -[AWDHomeKitAssistantAccessControl readFrom:]
  -[AWDHomeKitAssistantAccessControl setIsEnabled:]
  -[AWDHomeKitAssistantAccessControl writeTo:]
  -[AWDHomeKitAssistantAccessControl isEqual:]
  -[AWDHomeKitAssistantAccessControl isEnabled]
  -[AWDHomeKitAssistantAccessControl hasOptions]
  -[AWDHomeKitAssistantAccessControl setHasIsEnabled:]
  -[AWDHomeKitAssistantAccessControl hasIsEnabled]
  -[AWDHomeKitAssistantAccessControl setHasOptions:]
  -[AWDHomeKitAssistantAccessControl numEnabledAccessories]
  -[AWDHomeKitAssistantAccessControl setNumEnabledAccessories:]
  -[AWDHomeKitAssistantAccessControl numCapableAccessories]
  -[AWDHomeKitAssistantAccessControl setNumCapableAccessories:]
  -[AWDHomeKitAssistantAccessControl setHasNumEnabledAccessories:]
  -[AWDHomeKitAssistantAccessControl hasNumEnabledAccessories]
  -[AWDHomeKitAssistantAccessControl setHasNumCapableAccessories:]
  -[AWDHomeKitAssistantAccessControl hasNumCapableAccessories]


HMDCameraRecordingSession : HMFObject <HMFLogging, HMDCameraRecordingSessionVideoAnalyzerDelegate, HMDCameraClipUploaderDelegate, HMDCameraRecordingSessionVariantFragmentManagerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDCameraProfile *camera
 @property  NSString *logIdentifier
 @property  HMBLocalZone *localZone
 @property  <HMDCameraRecordingSessionFactory> *factory
 @property  <HMDCameraRecordingSessionVideoAnalyzer> *videoAnalyzer
 @property  HMFActivity *sessionActivity
 @property  HMDCameraSignificantEventServer *significantEventServer
 @property  HMDCameraRecordingSessionSignificantEventManager *significantEventManager
 @property  HMDCameraRecordingSessionVariantFragmentManager *timelapseFragmentManager
 @property  unsigned long recordingEventTriggers
 @property  BOOL noMoreFragmentsAvailable
 @property  BOOL active
 @property  unsigned long currentFragmentNumber
 @property  unsigned long pendingFragmentsCount
 @property  {?=qiIq} clipStartTime
 @property  {?=qiIq} timelapseClipStartTime
 @property  HMDCameraClipUploader *clipUploader
 @property  HMDCameraClipUploader *timelapseClipUploader
 @property  HMDDataStreamFragment *cameraVideoInitFragment
 @property  HMIVideoFragment *introFragment
 @property  HMIVideoAnalyzerFragmentResult *introAnalyzerResult
 @property  NSData *analysisVideoInitData
 @property  NSData *analysisTimelapseVideoInitData
 @property  NSNumber *remainingRecordingExtensionDuration
 @property  NSString *fragmentDirectoryPath
 @property  NSUUID *identifier
 @property  double configuredFragmentDuration
 @property  NSDictionary *homePresenceByPairingIdentity
 @property  HMDCameraRecordingSessionTimelineManager *timelineManager
 @property  <HMDCameraRecordingSessionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSession logCategory]

  // instance methods
  -[HMDCameraRecordingSession camera]
  -[HMDCameraRecordingSession configure]
  -[HMDCameraRecordingSession identifier]
  -[HMDCameraRecordingSession logIdentifier]
  -[HMDCameraRecordingSession setDelegate:]
  -[HMDCameraRecordingSession workQueue]
  -[HMDCameraRecordingSession delegate]
  -[HMDCameraRecordingSession attributeDescriptions]
  -[HMDCameraRecordingSession dealloc]
  -[HMDCameraRecordingSession isActive]
  -[HMDCameraRecordingSession .cxx_destruct]
  -[HMDCameraRecordingSession setActive:]
  -[HMDCameraRecordingSession localZone]
  -[HMDCameraRecordingSession factory]
  -[HMDCameraRecordingSession recordingEventTriggers]
  -[HMDCameraRecordingSession activityZones]
  -[HMDCameraRecordingSession activityZonesIncludedForSignificantEventDetection]
  -[HMDCameraRecordingSession timelineManager]
  -[HMDCameraRecordingSession homePresenceByPairingIdentity]
  -[HMDCameraRecordingSession significantEventServer]
  -[HMDCameraRecordingSession configuredFragmentDuration]
  -[HMDCameraRecordingSession analyzer:didAnalyzeFragmentWithResult:]
  -[HMDCameraRecordingSession analyzer:didAnalyzeFrameWithResult:]
  -[HMDCameraRecordingSession analyzer:didFailWithError:]
  -[HMDCameraRecordingSession analyzer:didCreateTimelapseFragment:]
  -[HMDCameraRecordingSession uploaderDidFailUpload:]
  -[HMDCameraRecordingSession variantFragmentManager:didSelectVariantFragment:overlapsFullFragment:]
  -[HMDCameraRecordingSession initWithWorkQueue:camera:hapAccessory:home:localZone:configuredFragmentDuration:timelineManager:significantEventServer:homePresenceByPairingIdentity:]
  -[HMDCameraRecordingSession initWithWorkQueue:camera:hapAccessory:home:localZone:configuredFragmentDuration:timelineManager:significantEventServer:homePresenceByPairingIdentity:factory:]
  -[HMDCameraRecordingSession currentFragmentNumber]
  -[HMDCameraRecordingSession setCurrentFragmentNumber:]
  -[HMDCameraRecordingSession handleFragment:]
  -[HMDCameraRecordingSession handleNoMoreFragmentsAvailable]
  -[HMDCameraRecordingSession _handleFragmentResult:]
  -[HMDCameraRecordingSession _uploadFragment:withDuration:clipFinalizedBecauseMaxDurationExceeded:]
  -[HMDCameraRecordingSession _uploadTimelapseFragment:]
  -[HMDCameraRecordingSession _notifyForAnalyzerResult:fragment:timeOffsetWithinClip:recordingEventTriggers:]
  -[HMDCameraRecordingSession _notifyForSignificantEvent:recordingEventTriggers:fragmentNumber:]
  -[HMDCameraRecordingSession _submitNotificationSuccessMetricWithRecordingEventTriggers:fragmentNumber:]
  -[HMDCameraRecordingSession _handleDidFailAnalysisWithError:]
  -[HMDCameraRecordingSession _endSessionWithError:]
  -[HMDCameraRecordingSession _shouldRecordFragmentWithAnalyzerResult:sequenceNumber:recordingEventTriggers:fragmentAnalyzedEvent:]
  -[HMDCameraRecordingSession _shouldEndSessionAfterFragment:]
  -[HMDCameraRecordingSession _writeFragment:]
  -[HMDCameraRecordingSession _isValidFirstSessionFragment:]
  -[HMDCameraRecordingSession _isValidNonFirstSessionFragment:]
  -[HMDCameraRecordingSession _finishCurrentClipUploader]
  -[HMDCameraRecordingSession _finishCurrentTimelapseClipUploader]
  -[HMDCameraRecordingSession videoAnalyzer]
  -[HMDCameraRecordingSession sessionActivity]
  -[HMDCameraRecordingSession significantEventManager]
  -[HMDCameraRecordingSession timelapseFragmentManager]
  -[HMDCameraRecordingSession noMoreFragmentsAvailable]
  -[HMDCameraRecordingSession setNoMoreFragmentsAvailable:]
  -[HMDCameraRecordingSession pendingFragmentsCount]
  -[HMDCameraRecordingSession setPendingFragmentsCount:]
  -[HMDCameraRecordingSession clipStartTime]
  -[HMDCameraRecordingSession setClipStartTime:]
  -[HMDCameraRecordingSession timelapseClipStartTime]
  -[HMDCameraRecordingSession setTimelapseClipStartTime:]
  -[HMDCameraRecordingSession clipUploader]
  -[HMDCameraRecordingSession setClipUploader:]
  -[HMDCameraRecordingSession timelapseClipUploader]
  -[HMDCameraRecordingSession setTimelapseClipUploader:]
  -[HMDCameraRecordingSession cameraVideoInitFragment]
  -[HMDCameraRecordingSession setCameraVideoInitFragment:]
  -[HMDCameraRecordingSession introFragment]
  -[HMDCameraRecordingSession setIntroFragment:]
  -[HMDCameraRecordingSession introAnalyzerResult]
  -[HMDCameraRecordingSession setIntroAnalyzerResult:]
  -[HMDCameraRecordingSession analysisVideoInitData]
  -[HMDCameraRecordingSession setAnalysisVideoInitData:]
  -[HMDCameraRecordingSession analysisTimelapseVideoInitData]
  -[HMDCameraRecordingSession setAnalysisTimelapseVideoInitData:]
  -[HMDCameraRecordingSession remainingRecordingExtensionDuration]
  -[HMDCameraRecordingSession setRemainingRecordingExtensionDuration:]
  -[HMDCameraRecordingSession fragmentDirectoryPath]
  -[HMDCameraRecordingSession setFragmentDirectoryPath:]


HMDMediaAccessoryAdvertisement : HMDAccessoryAdvertisement <HMDWACAccessoryAssociation>
 @property  HMDMediaOutputDevice *outputDevice
 @property  BOOL associated

  // class methods
  +[HMDMediaAccessoryAdvertisement canAirPortExpressSupportMediaAccessory:]

  // instance methods
  -[HMDMediaAccessoryAdvertisement .cxx_destruct]
  -[HMDMediaAccessoryAdvertisement outputDevice]
  -[HMDMediaAccessoryAdvertisement isAssociated]
  -[HMDMediaAccessoryAdvertisement initWithOutputDevice:]
  -[HMDMediaAccessoryAdvertisement setAssociated:]
  -[HMDMediaAccessoryAdvertisement associationOptions]
  -[HMDMediaAccessoryAdvertisement setOutputDevice:]
  -[HMDMediaAccessoryAdvertisement matchesWACDeviceID:]


HMDFragmentationStreamTuple : HMFObject
 @property  HAPFragmentationStream *fragmentationStream
 @property  NSString *objectUUID
 @property  HMFMessage *lastMessage
 @property  NSDate *expirationDate
 @property  BOOL expired

  // class methods
  +[HMDFragmentationStreamTuple tupleWithFragmentationStreamForObject:delegate:]

  // instance methods
  -[HMDFragmentationStreamTuple expirationDate]
  -[HMDFragmentationStreamTuple setLastMessage:]
  -[HMDFragmentationStreamTuple lastMessage]
  -[HMDFragmentationStreamTuple close]
  -[HMDFragmentationStreamTuple .cxx_destruct]
  -[HMDFragmentationStreamTuple isExpired]
  -[HMDFragmentationStreamTuple objectUUID]
  -[HMDFragmentationStreamTuple initWithFragmentationStreamForObject:delegate:]
  -[HMDFragmentationStreamTuple fragmentationStream]


HMDObsoleteUserModel : HMDBackingStoreModelObject
 @property  NSString *changeTag

  // class methods
  +[HMDObsoleteUserModel properties]


HMDUserDataSource : NSObject <HMDUserDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDUserDataSource userDataControllerWithDelegate:dataSource:queue:userID:homeID:sharedSettingsController:privateSettingsController:isCurrentUser:]
  -[HMDUserDataSource userDataBackingStoreControllerWithDelegate:queue:zoneName:shareMessenger:]
  -[HMDUserDataSource isCurrentUser:]


HMDUser : HMFObject <HMDCloudShareTrustManagerDataSource, HMDCloudShareTrustManagerDelegate, HMDUserDataControllerDelegate, HMDUserSettingsBackingStoreControllerDelegate, HMDUserDataControllerDataSource, HMFLogging, HMFDumpState, HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver, HMDSettingsControllerDelegate, HMDRemoteEventRouterUserAccessControlProvider, HMDUserSettingsInitialValueProviding, NSSecureCoding>
 @property  AVOutputDeviceAuthorizedPeer *av_authorizedPeer
 @property  BOOL hasCameraClipsAccess
 @property  NSData *nfcIssuerKeyIdentifier
 @property  NSString *encodingRemoteDisplayName
 @property  HMDAssistantAccessControl *assistantAccessControl
 @property  HMDSettingsControllerDependency *sharedSettingsControllerDependency
 @property  HMDSettingsControllerDependency *privateSettingsControllerDependency
 @property  HMDCloudShareMessenger *shareMessenger
 @property  HMDUserSettingsBackingStoreController *privateBackingStoreController
 @property  HMDPersonSettingsManager *personSettingsManager
 @property  BOOL needsiTunesMultiUserRepair
 @property  <HMDUserDataSource> *dataSource
 @property  HMDSiriMultiUserNewLanguageNotificationManager *siriMultiUserNewLanguageNotificationManager
 @property  NSUUID *uuid
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMBShareUserID *cloudShareID
 @property  HMUserPresenceAuthorization *presenceAuthStatus
 @property  unsigned long privilege
 @property  BOOL remoteAccessAllowed
 @property  unsigned long camerasAccessLevel
 @property  unsigned long announceAccessLevel
 @property  HMUserHomeAccessSettings *homeAccessSettings
 @property  unsigned long announceNotificationModeForCurrentDevice
 @property  HAPPairingIdentity *pairingIdentity
 @property  HMDAccountIdentifier *accountIdentifier
 @property  HMDCloudShareTrustManager *cloudShareTrustManager
 @property  HMDUserSettingsBackingStoreController *sharedBackingStoreController
 @property  HMDUserPhotosPersonDataManager *photosPersonDataManager
 @property  NSString *userID
 @property  NSNumber *notificationContextHAPIdentifier
 @property  NSNumber *notificationContextNFCIdentifier
 @property  long long userCloudShareWithOwnerMessagingState
 @property  NAFuture *cloudShareIDFuture
 @property  HMDHome *home
 @property  NSString *displayName
 @property  BOOL administrator
 @property  BOOL owner
 @property  BOOL remoteGateway
 @property  BOOL currentUser
 @property  BOOL valid
 @property  NSUUID *assistantAccessControlModelUUID
 @property  HMPhotosPersonManagerSettings *photosPersonManagerSettings
 @property  HMDPhotosPersonManager *photosPersonManager
 @property  BOOL announceAccessAllowed
 @property  NSString *accessCode
 @property  NSUUID *accessCodeChangedByUserUUID
 @property  HMDUserDataController *userDataController
 @property  NSString *pairingUsername
 @property  NSData *publicKey
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *userUUID
 @property  BOOL isRunningOnHomeOwnersDevice
 @property  BOOL isCurrentUser
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDUser supportsSecureCoding]
  +[HMDUser logCategory]
  +[HMDUser hasMessageReceiverChildren]
  +[HMDUser currentUserWithPrivilege:forHome:forceHH1Key:]
  +[HMDUser currentUserWithPrivilege:forHome:]
  +[HMDUser ownerWithUserID:home:pairingIdentity:homeManager:]
  +[HMDUser userIDForAccountHandle:]
  +[HMDUser UUIDWithUserID:forHomeIdentifier:uuid:pairingIdentity:]
  +[HMDUser privateZoneNameForUserUUID:]
  +[HMDUser sharedZoneNameForUserUUID:]
  +[HMDUser userWithDictionary:]
  +[HMDUser userWithDictionary:home:]
  +[HMDUser userDictionaryWithUserID:privilege:remoteAccessAllowed:cameraAccessLevel:announceAccessAllowed:announceAccessLevel:homeAccessSettings:]

  // instance methods
  -[HMDUser dumpState]
  -[HMDUser home]
  -[HMDUser account]
  -[HMDUser logIdentifier]
  -[HMDUser dataSource]
  -[HMDUser setAccountIdentifier:]
  -[HMDUser encodeWithCoder:]
  -[HMDUser publicKey]
  -[HMDUser attributeDescriptions]
  -[HMDUser dealloc]
  -[HMDUser userUUID]
  -[HMDUser uuid]
  -[HMDUser setUUID:]
  -[HMDUser isValid]
  -[HMDUser userID]
  -[HMDUser .cxx_destruct]
  -[HMDUser isAdministrator]
  -[HMDUser messageTargetUUID]
  -[HMDUser setDisplayName:]
  -[HMDUser pairingIdentity]
  -[HMDUser messageDestination]
  -[HMDUser accountIdentifier]
  -[HMDUser shortDescription]
  -[HMDUser setUserID:]
  -[HMDUser displayName]
  -[HMDUser messageReceiveQueue]
  -[HMDUser messageDispatcher]
  -[HMDUser isEqual:]
  -[HMDUser initWithCoder:]
  -[HMDUser setHome:]
  -[HMDUser isCurrentUser]
  -[HMDUser isOwner]
  -[HMDUser initWithModelObject:]
  -[HMDUser isRemoteAccessAllowed]
  -[HMDUser setRemoteAccessAllowed:]
  -[HMDUser presenceAuthStatus]
  -[HMDUser setPresenceAuthStatus:]
  -[HMDUser camerasAccessLevel]
  -[HMDUser isAnnounceAccessAllowed]
  -[HMDUser unconfigure]
  -[HMDUser photosPersonManager]
  -[HMDUser photosPersonManagerSettings]
  -[HMDUser personSettingsManager]
  -[HMDUser registerForMessages]
  -[HMDUser setPairingIdentity:]
  -[HMDUser assistantAccessControl]
  -[HMDUser setAssistantAccessControl:]
  -[HMDUser needsiTunesMultiUserRepair]
  -[HMDUser setNeedsiTunesMultiUserRepair:]
  -[HMDUser homeAccessSettings]
  -[HMDUser setHomeAccessSettings:]
  -[HMDUser cloudShareID]
  -[HMDUser accessCode]
  -[HMDUser setAccessCode:]
  -[HMDUser transactionObjectUpdated:newValues:message:]
  -[HMDUser transactionObjectRemoved:message:]
  -[HMDUser modelObjectWithChangeType:version:]
  -[HMDUser modelObjectWithChangeType:]
  -[HMDUser backingStoreObjects:]
  -[HMDUser setMessageDispatcher:]
  -[HMDUser configureWithHome:]
  -[HMDUser refreshDisplayName]
  -[HMDUser _handleAssistantAccessControlUpdate:]
  -[HMDUser _handleMediaContentProfileAccessControlUpdate:]
  -[HMDUser _handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:]
  -[HMDUser shareMessenger]
  -[HMDUser removeCloudData]
  -[HMDUser accountHandle]
  -[HMDUser announceNotificationModeForCurrentDevice]
  -[HMDUser av_authorizedPeer]
  -[HMDUser pairingUsername]
  -[HMDUser handleRemovedAccessory:]
  -[HMDUser hasCameraClipsAccess]
  -[HMDUser assistantAccessControlModelUUID]
  -[HMDUser __handleAddedAccount:]
  -[HMDUser nfcIssuerKeyIdentifier]
  -[HMDUser __handleRemovedAccount:]
  -[HMDUser dictionaryEncoding]
  -[HMDUser privilege]
  -[HMDUser sharedSettingValuesByKeyPath]
  -[HMDUser privateSettingValuesByKeyPath]
  -[HMDUser sharedUserSettingsLogEventBackingStoreControllerRunState]
  -[HMDUser handleUserDataControllerInitialized:]
  -[HMDUser _handlePairingIdentityRequest:]
  -[HMDUser _handleShareLookupInfoRequest:]
  -[HMDUser _handleMultiUserSharePayloadRequest:]
  -[HMDUser _handleShareClientRepairRequest:]
  -[HMDUser _handleNeedsiTunesMultiUserRepair:]
  -[HMDUser _handleAnnounceSettingsUpdate:]
  -[HMDUser cloudShareTrustManager:shouldShareTrustWithUser:]
  -[HMDUser zoneNameForCloudShareTrustManager:]
  -[HMDUser ownerForCloudShareTrustManager:]
  -[HMDUser homeForCloudShareTrustManager:]
  -[HMDUser isOwnerCapableForTrustManager:]
  -[HMDUser cloudShareTrustManager:didFetchOwnerCloudShareID:]
  -[HMDUser didFinishConfiguringForCloudShareTrustManager:]
  -[HMDUser didRemoveTrustZoneInCloudShareTrustManager:]
  -[HMDUser cloudShareTrustManager:didRemoveUserWithUUID:]
  -[HMDUser userDataController:isMediaContentProfileCapableAccessoryID:]
  -[HMDUser userDataController:isAccessoryUserListeningHistoryUpdateCapable:]
  -[HMDUser userDataController:isPersonalRequestCapableAccessoryID:]
  -[HMDUser userDataController:isAppleMediaAccessory:]
  -[HMDUser userDataController:isHAPAccessory:]
  -[HMDUser userDataControllerDidUpdateAssistantAccessControl:]
  -[HMDUser userDataControllerDidUpdateMediaContentProfile:]
  -[HMDUser userDataControllerDidUpdateUserListeningHistoryUpdateControl:]
  -[HMDUser userDataControllerDidUpdateSupportsAutomaticHH2Migration:]
  -[HMDUser sharedZoneControllerForUserDataController:]
  -[HMDUser privateZoneControllerForUserDataController:]
  -[HMDUser didStartBackingStoreController:]
  -[HMDUser didStartLocalZoneForBackingStoreController:]
  -[HMDUser didStopBackingStoreController:]
  -[HMDUser backingStoreController:createParticipantManagerForCloudZone:]
  -[HMDUser ownerForUserSettingsBackingStoreController:]
  -[HMDUser backingStoreController:didUpdatePhotosPersonManagerSettingsModel:previousPhotosPersonManagerSettingsModel:]
  -[HMDUser isRunningOnHomeOwnersDevice]
  -[HMDUser allAccessoryUUID]
  -[HMDUser settingsController:didUpdateWithCompletion:]
  -[HMDUser settingsController:willUpdateSettingAtKeyPath:withValue:]
  -[HMDUser settingsControllerFollowerKeyPaths:]
  -[HMDUser allowedRemoteEventAccessUserTypes]
  -[HMDUser applyConditionalValueUpdateToModels:]
  -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:]
  -[HMDUser initWithAccountHandle:home:pairingIdentity:privilege:dataSource:]
  -[HMDUser initWithAccountHandle:homeUUID:pairingIdentity:privilege:]
  -[HMDUser initWithAccountHandle:homeUUID:pairingIdentity:privilege:dataSource:]
  -[HMDUser isAccountEqualWithUser:]
  -[HMDUser hasDeviceWithHomeKitVersionGreaterThanVersion:]
  -[HMDUser privateZoneName]
  -[HMDUser sharedZoneName]
  -[HMDUser initializeUserSettingsWithHome:]
  -[HMDUser userCloudShareWithOwnerMessagingState]
  -[HMDUser setUserCloudShareWithOwnerMessagingState:]
  -[HMDUser _handleCloudShareWithOwnerMessageError]
  -[HMDUser recoverUserCloudDataDueToUUIDChangeFromOldUUID:]
  -[HMDUser _recoverUserSettingsDueToUUIDChange]
  -[HMDUser updateSharedBackingStoreControllerParticipants]
  -[HMDUser _recoverTrustManagerDueToUUIDChange]
  -[HMDUser deregisterForMessages]
  -[HMDUser _compatiblePrivilege]
  -[HMDUser setPrivilege:]
  -[HMDUser updateAdministrator:]
  -[HMDUser setAccountHandle:]
  -[HMDUser registerIdentity]
  -[HMDUser deregisterIdentity]
  -[HMDUser matchingPairingIdentityIdentifier:]
  -[HMDUser _sendSecureShareClientPayloadToMostEligibleDevice:completion:]
  -[HMDUser _sendAccountMessage:payload:deviceCapabilities:multicast:completion:]
  -[HMDUser requiresMakoSupport]
  -[HMDUser setCamerasAccessLevel:]
  -[HMDUser defaultAnnounceUserAccessLevel]
  -[HMDUser setAnnounceAccessLevel:]
  -[HMDUser announceAccessLevel]
  -[HMDUser isRemoteGateway]
  -[HMDUser isCurrentUserAndOwner]
  -[HMDUser handleAssistantAccessControlUpdate:]
  -[HMDUser handleMediaContentProfileAccessControlUpdate:]
  -[HMDUser handleUserListeningHistoryUpdateControlUpdatedAccessoryUUIDs:]
  -[HMDUser removeAccessoriesFromAssistantAccessControlList:]
  -[HMDUser saveAnnounceNotificationModeForCurrentUserToLocalDisk]
  -[HMDUser savePersonClassificationSettingsForCurrentUserToLocalDisk]
  -[HMDUser announceNotificationFileNameForUserUUID:]
  -[HMDUser announceNotificationFileName]
  -[HMDUser syncDataFileNameWithHomeUUID:]
  -[HMDUser saveSyncDataToLocalDisk:]
  -[HMDUser updatePhotosPersonManagerSettings:]
  -[HMDUser configurePhotosPersonDataManager]
  -[HMDUser configurePersonSettingsManager]
  -[HMDUser notificationContextHAPIdentifier]
  -[HMDUser notificationContextNFCIdentifier]
  -[HMDUser encodingRemoteDisplayName]
  -[HMDUser _transactionUserUpdated:newValues:message:]
  -[HMDUser migrateCloudZone:migrationQueue:completion:]
  -[HMDUser announceUserSettingsModelWithChangeType:]
  -[HMDUser postUserSettingsUpdatedNotificationWithReason:]
  -[HMDUser updateSupportsAutomaticHH2Migration:]
  -[HMDUser removeCloudShareID]
  -[HMDUser updateCloudShareID:]
  -[HMDUser trustTargetUUID]
  -[HMDUser configureCloudShareTrustManager]
  -[HMDUser registerIDSActivityObserver:subActivity:subjectDevice:]
  -[HMDUser updateIDSActivityObserver:]
  -[HMDUser deregisterIDSActivityObserver:subActivity:subjectDevice:]
  -[HMDUser deregisterIDSActivityObserver:]
  -[HMDUser pushTokensForDevicesObservingSubjectDevice:subActivity:]
  -[HMDUser _isExplicitContentValueEnabledForAppleMediaAccessory:]
  -[HMDUser setCloudShareID:]
  -[HMDUser cloudShareIDFuture]
  -[HMDUser photosPersonDataManager]
  -[HMDUser setPhotosPersonDataManager:]
  -[HMDUser setPersonSettingsManager:]
  -[HMDUser accessCodeChangedByUserUUID]
  -[HMDUser setAccessCodeChangedByUserUUID:]
  -[HMDUser userDataController]
  -[HMDUser setUserDataController:]
  -[HMDUser sharedSettingsControllerDependency]
  -[HMDUser setSharedSettingsControllerDependency:]
  -[HMDUser privateSettingsControllerDependency]
  -[HMDUser setPrivateSettingsControllerDependency:]
  -[HMDUser setShareMessenger:]
  -[HMDUser privateBackingStoreController]
  -[HMDUser setPrivateBackingStoreController:]
  -[HMDUser siriMultiUserNewLanguageNotificationManager]
  -[HMDUser setSiriMultiUserNewLanguageNotificationManager:]
  -[HMDUser setAnnounceNotificationModeForCurrentDevice:]
  -[HMDUser cloudShareTrustManager]
  -[HMDUser setCloudShareTrustManager:]
  -[HMDUser sharedBackingStoreController]
  -[HMDUser setSharedBackingStoreController:]


HMDUserModel : HMDBackingStoreModelObject
 @property  HMDAccountHandle *accountHandle
 @property  HMDAccountIdentifier *accountIdentifier
 @property  NSDictionary *pairingIdentity
 @property  NSNumber *privilege
 @property  NSNumber *remoteAccessAllowed
 @property  NSNumber *presenceAuthorizationStatus
 @property  NSString *changeTag
 @property  NSString *userID
 @property  NSNumber *camerasAccessLevel
 @property  NSNumber *announceAccessAllowed
 @property  NSNumber *announceAccessLevel
 @property  NSArray *allowedAccessoryUUIDStrings
 @property  NSArray *allowedAccessoryCategories
 @property  NSArray *allowedRoomUUIDStrings
 @property  HMUserHomeAccessSettings *homeAccessSettings

  // class methods
  +[HMDUserModel properties]

  // instance methods
  -[HMDUserModel homeAccessSettings]


HMDResidentUser : HMDUser
 @property  unsigned long configurationState
 @property  HMDDevice *device
 @property  BOOL blocked
 @property  NSString *deviceIdentifier

  // class methods
  +[HMDResidentUser supportsSecureCoding]

  // instance methods
  -[HMDResidentUser isBlocked]
  -[HMDResidentUser deviceIdentifier]
  -[HMDResidentUser encodeWithCoder:]
  -[HMDResidentUser userID]
  -[HMDResidentUser .cxx_destruct]
  -[HMDResidentUser setDevice:]
  -[HMDResidentUser device]
  -[HMDResidentUser displayName]
  -[HMDResidentUser initWithCoder:]
  -[HMDResidentUser configurationState]
  -[HMDResidentUser initWithModelObject:]
  -[HMDResidentUser setConfigurationState:]
  -[HMDResidentUser transactionObjectUpdated:newValues:message:]
  -[HMDResidentUser modelObjectWithChangeType:version:]
  -[HMDResidentUser configureWithHome:]
  -[HMDResidentUser refreshDisplayName]
  -[HMDResidentUser updateWithDevice:]
  -[HMDResidentUser registerIdentity]
  -[HMDResidentUser requiresMakoSupport]
  -[HMDResidentUser encodingRemoteDisplayName]
  -[HMDResidentUser initWithDevice:home:pairingIdentity:configurationState:]
  -[HMDResidentUser legacyUser]


__HMDLegacyResidentUser : HMDUser
 @property  HMDResidentUser *residentUser

  // class methods
  +[__HMDLegacyResidentUser supportsSecureCoding]
  +[__HMDLegacyResidentUser initialize]

  // instance methods
  -[__HMDLegacyResidentUser encodeWithCoder:]
  -[__HMDLegacyResidentUser .cxx_destruct]
  -[__HMDLegacyResidentUser initWithCoder:]
  -[__HMDLegacyResidentUser isRemoteGateway]
  -[__HMDLegacyResidentUser initWithResidentUser:]
  -[__HMDLegacyResidentUser residentUser]


HMDResidentUserModel : HMDUserModel
 @property  HMDDevice *device
 @property  NSNumber *configState
 @property  NSString *displayName
 @property  NSString *deviceIdentifier

  // class methods
  +[HMDResidentUserModel properties]

  // instance methods
  -[HMDResidentUserModel .cxx_destruct]
  -[HMDResidentUserModel setDisplayName:]
  -[HMDResidentUserModel displayName]


AWDHomeKitProcessMemoryPressureEvent : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasProcessMemoryState
 @property  NSString *processMemoryState
 @property  BOOL hasDataSyncState
 @property  NSString *dataSyncState

  // instance methods
  -[AWDHomeKitProcessMemoryPressureEvent setTimestamp:]
  -[AWDHomeKitProcessMemoryPressureEvent copyTo:]
  -[AWDHomeKitProcessMemoryPressureEvent .cxx_destruct]
  -[AWDHomeKitProcessMemoryPressureEvent mergeFrom:]
  -[AWDHomeKitProcessMemoryPressureEvent setHasTimestamp:]
  -[AWDHomeKitProcessMemoryPressureEvent dictionaryRepresentation]
  -[AWDHomeKitProcessMemoryPressureEvent hasTimestamp]
  -[AWDHomeKitProcessMemoryPressureEvent copyWithZone:]
  -[AWDHomeKitProcessMemoryPressureEvent timestamp]
  -[AWDHomeKitProcessMemoryPressureEvent readFrom:]
  -[AWDHomeKitProcessMemoryPressureEvent writeTo:]
  -[AWDHomeKitProcessMemoryPressureEvent isEqual:]
  -[AWDHomeKitProcessMemoryPressureEvent dataSyncState]
  -[AWDHomeKitProcessMemoryPressureEvent setDataSyncState:]
  -[AWDHomeKitProcessMemoryPressureEvent hasDataSyncState]
  -[AWDHomeKitProcessMemoryPressureEvent processMemoryState]
  -[AWDHomeKitProcessMemoryPressureEvent hasProcessMemoryState]
  -[AWDHomeKitProcessMemoryPressureEvent setProcessMemoryState:]


AWDHomeKitSoftwareUpdateStarted : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  BOOL hasResultErrorCode
 @property  unsigned int resultErrorCode
 @property  BOOL hasIsAutomaticUpdateEnabled
 @property  BOOL isAutomaticUpdateEnabled

  // instance methods
  -[AWDHomeKitSoftwareUpdateStarted setDuration:]
  -[AWDHomeKitSoftwareUpdateStarted setTimestamp:]
  -[AWDHomeKitSoftwareUpdateStarted hasDuration]
  -[AWDHomeKitSoftwareUpdateStarted copyTo:]
  -[AWDHomeKitSoftwareUpdateStarted duration]
  -[AWDHomeKitSoftwareUpdateStarted mergeFrom:]
  -[AWDHomeKitSoftwareUpdateStarted setHasTimestamp:]
  -[AWDHomeKitSoftwareUpdateStarted dictionaryRepresentation]
  -[AWDHomeKitSoftwareUpdateStarted hasTimestamp]
  -[AWDHomeKitSoftwareUpdateStarted copyWithZone:]
  -[AWDHomeKitSoftwareUpdateStarted timestamp]
  -[AWDHomeKitSoftwareUpdateStarted readFrom:]
  -[AWDHomeKitSoftwareUpdateStarted setHasDuration:]
  -[AWDHomeKitSoftwareUpdateStarted writeTo:]
  -[AWDHomeKitSoftwareUpdateStarted isEqual:]
  -[AWDHomeKitSoftwareUpdateStarted setResultErrorCode:]
  -[AWDHomeKitSoftwareUpdateStarted setHasResultErrorCode:]
  -[AWDHomeKitSoftwareUpdateStarted hasResultErrorCode]
  -[AWDHomeKitSoftwareUpdateStarted resultErrorCode]
  -[AWDHomeKitSoftwareUpdateStarted isAutomaticUpdateEnabled]
  -[AWDHomeKitSoftwareUpdateStarted setIsAutomaticUpdateEnabled:]
  -[AWDHomeKitSoftwareUpdateStarted setHasIsAutomaticUpdateEnabled:]
  -[AWDHomeKitSoftwareUpdateStarted hasIsAutomaticUpdateEnabled]


HMDCameraClipUploader : HMFObject <HMFLogging>
 @property  NSDate *startDate
 @property  double targetFragmentDuration
 @property  long long quality
 @property  HMBLocalZone *localZone
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  HMCameraClipEncryptionManager *encryptionManager
 @property  <HMDCameraClipUploaderFactory> *factory
 @property  NSMutableArray *operations
 @property  NAFuture *didCreateClipFuture
 @property  NSUUID *clipUUID
 @property  <HMDCameraClipUploaderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipUploader logCategory]

  // instance methods
  -[HMDCameraClipUploader quality]
  -[HMDCameraClipUploader logIdentifier]
  -[HMDCameraClipUploader operations]
  -[HMDCameraClipUploader setDelegate:]
  -[HMDCameraClipUploader workQueue]
  -[HMDCameraClipUploader delegate]
  -[HMDCameraClipUploader encryptionManager]
  -[HMDCameraClipUploader attributeDescriptions]
  -[HMDCameraClipUploader .cxx_destruct]
  -[HMDCameraClipUploader finish]
  -[HMDCameraClipUploader localZone]
  -[HMDCameraClipUploader startDate]
  -[HMDCameraClipUploader factory]
  -[HMDCameraClipUploader clipUUID]
  -[HMDCameraClipUploader targetFragmentDuration]
  -[HMDCameraClipUploader initWithClipUUID:startDate:targetFragmentDuration:quality:localZone:workQueue:logIdentifier:]
  -[HMDCameraClipUploader initWithClipUUID:startDate:targetFragmentDuration:quality:localZone:workQueue:logIdentifier:encryptionManager:factory:]
  -[HMDCameraClipUploader createClip]
  -[HMDCameraClipUploader addNotificationForSignificantEvent:homePresenceByPairingIdentity:]
  -[HMDCameraClipUploader addVideoInitData:]
  -[HMDCameraClipUploader addVideoSegmentData:duration:timeOffsetWithinClip:clipFinalizedBecauseMaxDurationExceeded:]
  -[HMDCameraClipUploader hasAddedCreateClipOperation]
  -[HMDCameraClipUploader _createClip]
  -[HMDCameraClipUploader _createClipWithSignificantEvent:homePresenceByPairingIdentity:]
  -[HMDCameraClipUploader _addOperation:finalizeClipOnError:]
  -[HMDCameraClipUploader _operationCompleted:finalizeOnError:future:]
  -[HMDCameraClipUploader _startNextOperation]
  -[HMDCameraClipUploader _handleFatalOperationFailure]
  -[HMDCameraClipUploader _isCancelledError:]
  -[HMDCameraClipUploader didCreateClipFuture]
  -[HMDCameraClipUploader setDidCreateClipFuture:]


HMDCameraClipUploaderFactory : NSObject <HMDCameraClipUploaderFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCameraClipUploaderFactory createCreateClipOperationForClipModelID:localZone:targetFragmentDuration:clipStartDate:quality:encryptionManager:]
  -[HMDCameraClipUploaderFactory createCreateClipWithSignificantEventOperationForClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:targetFragmentDuration:clipStartDate:quality:encryptionManager:]
  -[HMDCameraClipUploaderFactory createUploadVideoSegmentOperationForModelID:localZone:data:metadata:encryptionManager:]
  -[HMDCameraClipUploaderFactory createAddSignificantEventOperationForClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:]
  -[HMDCameraClipUploaderFactory createFinalizeClipOperationForModelID:localZone:]


HMDMPCSendMRCommandOperationDefaultExternalObjectInterface : HMFObject <HMDMPCSendMRCommandOperationExternalObjectInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDMPCSendMRCommandOperationDefaultExternalObjectInterface createMPCAssistantCommand]


HMDMPCSendMRCommandOperation : HMFOperation <HMFLogging, HMFObject>
 @property  <HMDMPCSendMRCommandOperationExternalObjectInterface> *externalObjectInterface
 @property  MPCAssistantRemoteControlDestination *destination
 @property  MPPlaybackArchive *playbackArchive
 @property  NSDictionary *options
 @property  NSNumber *mediaRemoteCommand
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDMPCSendMRCommandOperation shortDescription]
  +[HMDMPCSendMRCommandOperation logCategory]

  // instance methods
  -[HMDMPCSendMRCommandOperation destination]
  -[HMDMPCSendMRCommandOperation attributeDescriptions]
  -[HMDMPCSendMRCommandOperation privateDescription]
  -[HMDMPCSendMRCommandOperation .cxx_destruct]
  -[HMDMPCSendMRCommandOperation options]
  -[HMDMPCSendMRCommandOperation shortDescription]
  -[HMDMPCSendMRCommandOperation main]
  -[HMDMPCSendMRCommandOperation playbackArchive]
  -[HMDMPCSendMRCommandOperation externalObjectInterface]
  -[HMDMPCSendMRCommandOperation initWithCommand:options:destination:]
  -[HMDMPCSendMRCommandOperation initWithCommand:destination:options:externalObjectInterface:]
  -[HMDMPCSendMRCommandOperation initWithPlaybackArchive:options:destination:]
  -[HMDMPCSendMRCommandOperation initWithPlaybackArchive:destination:options:externalObjectInterface:]
  -[HMDMPCSendMRCommandOperation mediaRemoteCommand]


HMDBackingStoreUpdateObjectReference : NSOperation
 @property  id object
 @property  NSUUID *uuid

  // instance methods
  -[HMDBackingStoreUpdateObjectReference uuid]
  -[HMDBackingStoreUpdateObjectReference .cxx_destruct]
  -[HMDBackingStoreUpdateObjectReference setUuid:]
  -[HMDBackingStoreUpdateObjectReference object]
  -[HMDBackingStoreUpdateObjectReference setObject:]
  -[HMDBackingStoreUpdateObjectReference main]
  -[HMDBackingStoreUpdateObjectReference initWithObject:uuid:]


HMDBackingStoreDispatchModelChange : NSOperation
 @property  HMDBackingStoreModelObject *modelChange

  // instance methods
  -[HMDBackingStoreDispatchModelChange .cxx_destruct]
  -[HMDBackingStoreDispatchModelChange main]
  -[HMDBackingStoreDispatchModelChange initWithModelChange:]
  -[HMDBackingStoreDispatchModelChange modelChange]
  -[HMDBackingStoreDispatchModelChange setModelChange:]


HMDBackingStoreSaveToPersistentStore : HMDBackingStoreOperation
 @property  HMDHomeManager *homeManager
 @property  NSString *reason
 @property  BOOL incrementGeneration

  // instance methods
  -[HMDBackingStoreSaveToPersistentStore .cxx_destruct]
  -[HMDBackingStoreSaveToPersistentStore reason]
  -[HMDBackingStoreSaveToPersistentStore homeManager]
  -[HMDBackingStoreSaveToPersistentStore mainReturningError]
  -[HMDBackingStoreSaveToPersistentStore incrementGeneration]
  -[HMDBackingStoreSaveToPersistentStore initWithHomeManager:reason:incrementGeneration:]


HMDBackingStore : HMFObject <HMDBackingStoreDataSource, HMFLogging>
 @property  CKRecordID *root
 @property  HMDBackingStoreLocal *local
 @property  HMDHomeManager *homeManager
 @property  HMDHome *home
 @property  NSUUID *uuid
 @property  HMDObjectLookup *lookup
 @property  <HMDBackingStoreObjectProtocol> *delegate
 @property  NSString *activeControllerKeyUsername
 @property  BOOL isAtomicSaveFeatureEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStore currentDevice]
  +[HMDBackingStore logCategory]
  +[HMDBackingStore allowedTypes]
  +[HMDBackingStore start]
  +[HMDBackingStore internalAllowedTypes]
  +[HMDBackingStore deeplyProblematicObjectTypes]
  +[HMDBackingStore flushBackingStore]
  +[HMDBackingStore resetBackingStore]
  +[HMDBackingStore saveToPersistentStoreWithReason:homeManager:shouldIncrementGenerationCounter:backingStore:completionHandler:]
  +[HMDBackingStore _saveToLocalStoreWithReason:homeManager:shouldIncrementGenerationCounter:backingStore:]

  // instance methods
  -[HMDBackingStore home]
  -[HMDBackingStore local]
  -[HMDBackingStore logIdentifier]
  -[HMDBackingStore setLocal:]
  -[HMDBackingStore setDelegate:]
  -[HMDBackingStore lookup]
  -[HMDBackingStore delegate]
  -[HMDBackingStore uuid]
  -[HMDBackingStore .cxx_destruct]
  -[HMDBackingStore setUuid:]
  -[HMDBackingStore submit:]
  -[HMDBackingStore homeManager]
  -[HMDBackingStore initWithUUID:]
  -[HMDBackingStore setHomeManager:]
  -[HMDBackingStore root]
  -[HMDBackingStore setHome:]
  -[HMDBackingStore setLookup:]
  -[HMDBackingStore submitBlock:]
  -[HMDBackingStore createBackingStoreLogAddTransactionOperationWithTransaction:]
  -[HMDBackingStore createBackingStoreOperation]
  -[HMDBackingStore localBackingStore]
  -[HMDBackingStore backingStoreOperationQueue]
  -[HMDBackingStore createHomeObjectLookupWithHome:]
  -[HMDBackingStore dataForPersistentStoreIncrementingGeneration:reason:]
  -[HMDBackingStore activeControllerKeyUsername]
  -[HMDBackingStore isAtomicSaveFeatureEnabled]
  -[HMDBackingStore initWithUUID:homeManager:home:dataSource:]
  -[HMDBackingStore initWithUUID:homeManager:]
  -[HMDBackingStore initWithUUID:home:]
  -[HMDBackingStore transaction:options:]
  -[HMDBackingStore commit:run:save:completionHandler:]
  -[HMDBackingStore commit:run:save:archiveInline:completionHandler:]
  -[HMDBackingStore updateModelObjects:destination:]
  -[HMDBackingStore deleteModelObjects:destination:]
  -[HMDBackingStore saveToPersistentStoreWithReason:incrementGeneration:]
  -[HMDBackingStore __fetchWithGroup:uuids:error:]


HMDBackingStoreSingleton : HMFObject <HMFLogging>
 @property  HMDBackingStoreLocal *local
 @property  NSMapTable *objectLookup
 @property  NSMapTable *classToNameTransform
 @property  NSMapTable *nameToClassTransform
 @property  NSMapTable *objectPropertyHashLookup
 @property  HMDHomeManager *homeManager
 @property  NSOperationQueue *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDBackingStoreSingleton sharedInstance]
  +[HMDBackingStoreSingleton logCategory]
  +[HMDBackingStoreSingleton start]
  +[HMDBackingStoreSingleton dataVersion]
  +[HMDBackingStoreSingleton setClass:forClassName:]
  +[HMDBackingStoreSingleton resetClassMappings]
  +[HMDBackingStoreSingleton resetSchemaHash]

  // instance methods
  -[HMDBackingStoreSingleton local]
  -[HMDBackingStoreSingleton logIdentifier]
  -[HMDBackingStoreSingleton setLocal:]
  -[HMDBackingStoreSingleton .cxx_destruct]
  -[HMDBackingStoreSingleton homeManager]
  -[HMDBackingStoreSingleton nameToClassTransform]
  -[HMDBackingStoreSingleton setHomeManager:]
  -[HMDBackingStoreSingleton classToNameTransform]
  -[HMDBackingStoreSingleton queue]
  -[HMDBackingStoreSingleton objectPropertyHashLookup]
  -[HMDBackingStoreSingleton init]
  -[HMDBackingStoreSingleton flushBackingStore]
  -[HMDBackingStoreSingleton resetBackingStore]
  -[HMDBackingStoreSingleton schemaHashForObject:]
  -[HMDBackingStoreSingleton objectLookup]


HMDBackingStoreFetchArchiveOperation : HMDBackingStoreOperation
 @property  @? fetchResult
 @property  NSString *identifier

  // instance methods
  -[HMDBackingStoreFetchArchiveOperation identifier]
  -[HMDBackingStoreFetchArchiveOperation setFetchResult:]
  -[HMDBackingStoreFetchArchiveOperation .cxx_destruct]
  -[HMDBackingStoreFetchArchiveOperation initWithFetchResult:]
  -[HMDBackingStoreFetchArchiveOperation setIdentifier:]
  -[HMDBackingStoreFetchArchiveOperation fetchResult]
  -[HMDBackingStoreFetchArchiveOperation mainReturningError]


AWDHomeKitBackingStoreCKRebuildEvent : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasRebuildStatus
 @property  int rebuildStatus
 @property  BOOL hasContainerType
 @property  int containerType
 @property  BOOL hasZoneType
 @property  int zoneType

  // instance methods
  -[AWDHomeKitBackingStoreCKRebuildEvent setTimestamp:]
  -[AWDHomeKitBackingStoreCKRebuildEvent copyTo:]
  -[AWDHomeKitBackingStoreCKRebuildEvent mergeFrom:]
  -[AWDHomeKitBackingStoreCKRebuildEvent setHasTimestamp:]
  -[AWDHomeKitBackingStoreCKRebuildEvent dictionaryRepresentation]
  -[AWDHomeKitBackingStoreCKRebuildEvent hasTimestamp]
  -[AWDHomeKitBackingStoreCKRebuildEvent copyWithZone:]
  -[AWDHomeKitBackingStoreCKRebuildEvent timestamp]
  -[AWDHomeKitBackingStoreCKRebuildEvent readFrom:]
  -[AWDHomeKitBackingStoreCKRebuildEvent zoneType]
  -[AWDHomeKitBackingStoreCKRebuildEvent writeTo:]
  -[AWDHomeKitBackingStoreCKRebuildEvent isEqual:]
  -[AWDHomeKitBackingStoreCKRebuildEvent containerType]
  -[AWDHomeKitBackingStoreCKRebuildEvent setContainerType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent setHasContainerType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent hasContainerType]
  -[AWDHomeKitBackingStoreCKRebuildEvent containerTypeAsString:]
  -[AWDHomeKitBackingStoreCKRebuildEvent StringAsContainerType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent setZoneType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent setHasZoneType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent hasZoneType]
  -[AWDHomeKitBackingStoreCKRebuildEvent zoneTypeAsString:]
  -[AWDHomeKitBackingStoreCKRebuildEvent StringAsZoneType:]
  -[AWDHomeKitBackingStoreCKRebuildEvent rebuildStatus]
  -[AWDHomeKitBackingStoreCKRebuildEvent setRebuildStatus:]
  -[AWDHomeKitBackingStoreCKRebuildEvent setHasRebuildStatus:]
  -[AWDHomeKitBackingStoreCKRebuildEvent hasRebuildStatus]
  -[AWDHomeKitBackingStoreCKRebuildEvent rebuildStatusAsString:]
  -[AWDHomeKitBackingStoreCKRebuildEvent StringAsRebuildStatus:]


HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel : HMBModel <HMFLogging>
 @property  NSData *archivedLastSynchronizedRecordIDs
 @property  NSSet *lastSynchronizedRecordIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel modelID]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel logCategory]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel hmbProperties]
  +[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel parentModelID]

  // instance methods
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel init]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel lastSynchronizedRecordIDs]
  -[HMDNetworkRouterFirewallRuleManagerBackingStoreMirrorInternalStateModel setLastSynchronizedRecordIDs:]


HMDHelperExternalProtocolImpl : NSObject <HMDHelperExternalProtocol>
  // instance methods
  -[HMDHelperExternalProtocolImpl init]
  -[HMDHelperExternalProtocolImpl createAFSecurityConnection]


HMDHelper : NSObject
 @property  <HMDHelperExternalProtocol> *externalProtocol

  // class methods
  +[HMDHelper sharedHelper]
  +[HMDHelper setSharedHelper:]

  // instance methods
  -[HMDHelper .cxx_destruct]
  -[HMDHelper initWithExternalProtocol:]
  -[HMDHelper hashedRouteIDForIdentifier:]
  -[HMDHelper externalProtocol]
  -[HMDHelper setExternalProtocol:]


HMDNetworkRouterFirewallRuleCloudNetworkDeclarations : HMFObject <HMFLogging>
 @property  NSDictionary *ruleConfigurationsByVersionString
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *baseAccessoryIdentifier
 @property  NSString *name
 @property  NSDate *lastModifiedTime
 @property  NSArray *ruleConfigurations
 @property  NSDictionary *prettyJSONDictionary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations logCategory]
  +[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations __decodeRuleConfigurationsFromJSONDictionary:baseAccessoryIdentifier:allowUnzippedData:]
  +[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations __decodeRuleConfigurationWithVersionString:ruleConfigurationValue:baseAccessoryIdentifier:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations name]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations isEqual:]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations lastModifiedTime]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations initWithBaseAccessoryIdentifier:data:]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations initWithBaseAccessoryIdentifier:data:allowUnzippedData:]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations baseAccessoryIdentifier]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations initWithBaseAccessoryIdentifier:name:lastModifiedTime:ruleConfigurationsByVersionString:]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations ruleConfigurations]
  -[HMDNetworkRouterFirewallRuleCloudNetworkDeclarations ruleConfigurationsByVersionString]


HMDCameraRecordingLoadBalancerDecision : HMFObject
 @property  NSUUID *cameraUUID
 @property  long long numberOfAvailableDevices
 @property  long long totalNumberOfJobSlots
 @property  long long remainingNumberOfJobSlots
 @property  HMDCameraRecordingAnalysisNode *analysisNode
 @property  NSUUID *deviceUUID
 @property  NSDate *decisionDate
 @property  BOOL expired

  // instance methods
  -[HMDCameraRecordingLoadBalancerDecision attributeDescriptions]
  -[HMDCameraRecordingLoadBalancerDecision .cxx_destruct]
  -[HMDCameraRecordingLoadBalancerDecision isExpired]
  -[HMDCameraRecordingLoadBalancerDecision deviceUUID]
  -[HMDCameraRecordingLoadBalancerDecision cameraUUID]
  -[HMDCameraRecordingLoadBalancerDecision totalNumberOfJobSlots]
  -[HMDCameraRecordingLoadBalancerDecision remainingNumberOfJobSlots]
  -[HMDCameraRecordingLoadBalancerDecision initWithCameraUUID:numberOfAvailableDevices:totalNumberOfJobSlots:remainingNumberOfJobSlots:analysisNode:decisionDate:]
  -[HMDCameraRecordingLoadBalancerDecision numberOfAvailableDevices]
  -[HMDCameraRecordingLoadBalancerDecision analysisNode]
  -[HMDCameraRecordingLoadBalancerDecision decisionDate]


HMDUnpairedHAPAccessoryConfiguration : NSObject
 @property  NSString *setupCode
 @property  @? setupCodeProvider
 @property  BOOL requiresUserConsent
 @property  HMDAccessoryNetworkCredential *networkCredential
 @property  NSString *isoCountryCode
 @property  NSNumber *chipFabricIndex

  // instance methods
  -[HMDUnpairedHAPAccessoryConfiguration setIsoCountryCode:]
  -[HMDUnpairedHAPAccessoryConfiguration .cxx_destruct]
  -[HMDUnpairedHAPAccessoryConfiguration isoCountryCode]
  -[HMDUnpairedHAPAccessoryConfiguration setSetupCode:]
  -[HMDUnpairedHAPAccessoryConfiguration setupCode]
  -[HMDUnpairedHAPAccessoryConfiguration requiresUserConsent]
  -[HMDUnpairedHAPAccessoryConfiguration setRequiresUserConsent:]
  -[HMDUnpairedHAPAccessoryConfiguration chipFabricIndex]
  -[HMDUnpairedHAPAccessoryConfiguration setChipFabricIndex:]
  -[HMDUnpairedHAPAccessoryConfiguration networkCredential]
  -[HMDUnpairedHAPAccessoryConfiguration setupCodeProvider]
  -[HMDUnpairedHAPAccessoryConfiguration setSetupCodeProvider:]
  -[HMDUnpairedHAPAccessoryConfiguration setNetworkCredential:]


HMDUnpairedHAPAccessory : HMDUnassociatedAccessory
 @property  NSArray *accessoryServers
 @property  unsigned long transportTypes
 @property  long long certificationStatus
 @property  NSData *setupHash
 @property  long long linkType

  // instance methods
  -[HMDUnpairedHAPAccessory dumpDescription]
  -[HMDUnpairedHAPAccessory linkType]
  -[HMDUnpairedHAPAccessory isReachable]
  -[HMDUnpairedHAPAccessory .cxx_destruct]
  -[HMDUnpairedHAPAccessory transportTypes]
  -[HMDUnpairedHAPAccessory certificationStatus]
  -[HMDUnpairedHAPAccessory setCertificationStatus:]
  -[HMDUnpairedHAPAccessory associationOptions]
  -[HMDUnpairedHAPAccessory identifyWithCompletionHandler:]
  -[HMDUnpairedHAPAccessory setupHash]
  -[HMDUnpairedHAPAccessory initWithIdentifier:name:category:messageDispatcher:]
  -[HMDUnpairedHAPAccessory descriptionWithPointer:additionalDescription:]
  -[HMDUnpairedHAPAccessory hasIPLink]
  -[HMDUnpairedHAPAccessory hasBTLELink]
  -[HMDUnpairedHAPAccessory initWithAccessoryServer:messageDispatcher:]
  -[HMDUnpairedHAPAccessory accessoryServers]
  -[HMDUnpairedHAPAccessory addAccessoryServer:]
  -[HMDUnpairedHAPAccessory removeAccessoryServer:]
  -[HMDUnpairedHAPAccessory preferredAccessoryServer]


HMDHAPAccessoryNotificationEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  HMDHAPAccessory *accessory
 @property  HMDCharacteristic *characteristic
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDHAPAccessoryNotificationEvent accessory]
  -[HMDHAPAccessoryNotificationEvent eventName]
  -[HMDHAPAccessoryNotificationEvent setAccessory:]
  -[HMDHAPAccessoryNotificationEvent .cxx_destruct]
  -[HMDHAPAccessoryNotificationEvent characteristic]
  -[HMDHAPAccessoryNotificationEvent setCharacteristic:]
  -[HMDHAPAccessoryNotificationEvent serializedEvent]
  -[HMDHAPAccessoryNotificationEvent initWithAccessory:characteristic:]
  -[HMDHAPAccessoryNotificationEvent isThreadAccessory:]


HMDCameraClipSignificantEventBulletin : NSObject
 @property  NSSet *significantEvents
 @property  NSUUID *previewImageNotificationUUID
 @property  NSURL *previewImageFilePathURL
 @property  NSDate *dateOfOccurrence
 @property  HMDCameraProfile *camera
 @property  HMDHome *home
 @property  HMDAccessory *accessory
 @property  HMDService *service
 @property  NSUUID *clipUUID
 @property  BOOL shouldShowProvideFeedbackButton
 @property  NSDictionary *userInfo
 @property  NSString *title
 @property  NSString *body
 @property  NSString *threadIdentifier
 @property  NSString *requestIdentifier

  // class methods
  +[HMDCameraClipSignificantEventBulletin effectiveReasonForSignificantEvent:]
  +[HMDCameraClipSignificantEventBulletin localizedMessageForSignificantEvents:cameraAccessory:]
  +[HMDCameraClipSignificantEventBulletin actionURLForHomeUUID:cameraUUID:]

  // instance methods
  -[HMDCameraClipSignificantEventBulletin accessory]
  -[HMDCameraClipSignificantEventBulletin camera]
  -[HMDCameraClipSignificantEventBulletin home]
  -[HMDCameraClipSignificantEventBulletin requestIdentifier]
  -[HMDCameraClipSignificantEventBulletin userInfo]
  -[HMDCameraClipSignificantEventBulletin .cxx_destruct]
  -[HMDCameraClipSignificantEventBulletin service]
  -[HMDCameraClipSignificantEventBulletin title]
  -[HMDCameraClipSignificantEventBulletin threadIdentifier]
  -[HMDCameraClipSignificantEventBulletin body]
  -[HMDCameraClipSignificantEventBulletin clipUUID]
  -[HMDCameraClipSignificantEventBulletin dateOfOccurrence]
  -[HMDCameraClipSignificantEventBulletin significantEvents]
  -[HMDCameraClipSignificantEventBulletin initWithSignificantEvents:previewImageNotificationUUID:previewImageFilePathURL:dateOfOccurrence:camera:home:accessory:recordingService:requestIdentifier:clipUUID:shouldShowProvideFeedbackButton:]
  -[HMDCameraClipSignificantEventBulletin initWithSignificantEvents:previewImageNotificationUUID:previewImageFilePathURL:dateOfOccurrence:camera:home:accessory:recordingService:clipUUID:shouldShowProvideFeedbackButton:]
  -[HMDCameraClipSignificantEventBulletin initWithSignificantEvent:previewImageFilePathURL:dateOfOccurrence:camera:home:accessory:recordingService:shouldShowProvideFeedbackButton:]
  -[HMDCameraClipSignificantEventBulletin createUserInfoWithWithSignificantEvents:previewImageNotificationUUID:camera:home:accessory:recordingService:clipUUID:]
  -[HMDCameraClipSignificantEventBulletin previewImageNotificationUUID]
  -[HMDCameraClipSignificantEventBulletin previewImageFilePathURL]
  -[HMDCameraClipSignificantEventBulletin shouldShowProvideFeedbackButton]


HMDLogEventProcessMemoryEventsAnalyzer : HMDLogEventAnalyzer <HMDAggregationAnalysisEventContributing>
 @property  HMDEventCountersManager *eventCountersManager
 @property  unsigned long storedAverageProcessMemoryKB
 @property  unsigned long storedPeakProcessMemoryKB

  // class methods
  +[HMDLogEventProcessMemoryEventsAnalyzer managedEventCounterRequestGroups]

  // instance methods
  -[HMDLogEventProcessMemoryEventsAnalyzer .cxx_destruct]
  -[HMDLogEventProcessMemoryEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventProcessMemoryEventsAnalyzer eventCountersManager]
  -[HMDLogEventProcessMemoryEventsAnalyzer populateAggregationAnalysisLogEvent:]
  -[HMDLogEventProcessMemoryEventsAnalyzer resetAggregationAnalysisContext]
  -[HMDLogEventProcessMemoryEventsAnalyzer initWithEventCountersManager:]
  -[HMDLogEventProcessMemoryEventsAnalyzer storedAverageProcessMemoryKB]
  -[HMDLogEventProcessMemoryEventsAnalyzer storedPeakProcessMemoryKB]
  -[HMDLogEventProcessMemoryEventsAnalyzer _handleMemoryPressureNotificationLogEvent:]
  -[HMDLogEventProcessMemoryEventsAnalyzer _handleMemorySampleLogEvent:]


HMDIDSActivityMonitorHomeManagerDataSource : NSObject <HMFLogging, HMDIDSActivityMonitorDataSource>
 @property  HMDHomeManager *homeManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <HMDIDSActivityMonitorBroadcasterPushTokenDataSourceDelegate> *delegate

  // class methods
  +[HMDIDSActivityMonitorHomeManagerDataSource logCategory]

  // instance methods
  -[HMDIDSActivityMonitorHomeManagerDataSource initWithHomeManager:]
  -[HMDIDSActivityMonitorHomeManagerDataSource currentDevice]
  -[HMDIDSActivityMonitorHomeManagerDataSource setDelegate:]
  -[HMDIDSActivityMonitorHomeManagerDataSource delegate]
  -[HMDIDSActivityMonitorHomeManagerDataSource .cxx_destruct]
  -[HMDIDSActivityMonitorHomeManagerDataSource homeManager]
  -[HMDIDSActivityMonitorHomeManagerDataSource start]
  -[HMDIDSActivityMonitorHomeManagerDataSource handleDeviceAdded:]
  -[HMDIDSActivityMonitorHomeManagerDataSource handleDeviceRemoved:]
  -[HMDIDSActivityMonitorHomeManagerDataSource handleRegistrationUpdated:]
  -[HMDIDSActivityMonitorHomeManagerDataSource startObservingDevice:subActivity:]
  -[HMDIDSActivityMonitorHomeManagerDataSource stopObservingDevice:subActivity:]
  -[HMDIDSActivityMonitorHomeManagerDataSource pushTokensForDevicesObservingSubjectDevice:subActivity:queue:completionHandler:]
  -[HMDIDSActivityMonitorHomeManagerDataSource startWithNotificationCenter:]
  -[HMDIDSActivityMonitorHomeManagerDataSource homeHasCamera:]


HMDLocationCluster : HMFObject <HMFLogging>
 @property  NSArray *locations
 @property  CLLocation *bestLocation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLocationCluster logCategory]

  // instance methods
  -[HMDLocationCluster locations]
  -[HMDLocationCluster attributeDescriptions]
  -[HMDLocationCluster initWithLocations:]
  -[HMDLocationCluster .cxx_destruct]
  -[HMDLocationCluster bestLocation]
  -[HMDLocationCluster kMeansClusteredGroups]
  -[HMDLocationCluster clusterWithGroups:]
  -[HMDLocationCluster generateNewGroupsFromGroups:]
  -[HMDLocationCluster locationFromKMeansClusteredGroups:]


HMDLocationClusterGroup : HMFObject
 @property  CLLocation *center
 @property  NSMutableArray *locations

  // instance methods
  -[HMDLocationClusterGroup center]
  -[HMDLocationClusterGroup locations]
  -[HMDLocationClusterGroup attributeDescriptions]
  -[HMDLocationClusterGroup .cxx_destruct]
  -[HMDLocationClusterGroup initWithCenter:]


HMDCompositeSettingsZoneManager : NSObject <HMFLogging, HMDDatabaseDelegate>
 @property  <HMDDatabase> *database
 @property  BOOL createZoneIfNotExist
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  NSString *zoneName
 @property  BOOL configured
 @property  NAFuture *configurationFuture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCompositeSettingsZoneManager logCategory]

  // instance methods
  -[HMDCompositeSettingsZoneManager logIdentifier]
  -[HMDCompositeSettingsZoneManager remove]
  -[HMDCompositeSettingsZoneManager workQueue]
  -[HMDCompositeSettingsZoneManager zoneName]
  -[HMDCompositeSettingsZoneManager .cxx_destruct]
  -[HMDCompositeSettingsZoneManager cloudZone]
  -[HMDCompositeSettingsZoneManager database]
  -[HMDCompositeSettingsZoneManager localZone]
  -[HMDCompositeSettingsZoneManager isConfigured]
  -[HMDCompositeSettingsZoneManager setCloudZone:]
  -[HMDCompositeSettingsZoneManager setLocalZone:]
  -[HMDCompositeSettingsZoneManager database:didCreateZoneWithName:isPrivate:]
  -[HMDCompositeSettingsZoneManager database:willRemoveZoneWithName:isPrivate:]
  -[HMDCompositeSettingsZoneManager database:didRemoveZoneWithName:isPrivate:]
  -[HMDCompositeSettingsZoneManager database:didReceiveMessageWithUserInfo:]
  -[HMDCompositeSettingsZoneManager initWithDatabase:workQueue:zoneName:createZoneIfNotExists:]
  -[HMDCompositeSettingsZoneManager createZoneIfNotExist]
  -[HMDCompositeSettingsZoneManager configurationFuture]


HMDCameraLocalStreamSession : HMDCameraStreamSession <HMFLogging>
 @property  <HMDCameraRemoteStreamSenderProtocol> *streamSender
 @property  HMDCameraMediaParameterSelection *parameterSelection
 @property  unsigned long streamState
 @property  HMDCameraNetworkConfig *localNetworkConfig
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraLocalStreamSession logCategory]

  // instance methods
  -[HMDCameraLocalStreamSession updateState:]
  -[HMDCameraLocalStreamSession logIdentifier]
  -[HMDCameraLocalStreamSession dealloc]
  -[HMDCameraLocalStreamSession .cxx_destruct]
  -[HMDCameraLocalStreamSession streamState]
  -[HMDCameraLocalStreamSession setStreamState:]
  -[HMDCameraLocalStreamSession stateAsString]
  -[HMDCameraLocalStreamSession localNetworkConfig]
  -[HMDCameraLocalStreamSession streamSender]
  -[HMDCameraLocalStreamSession containsState:]
  -[HMDCameraLocalStreamSession initWithSessionID:reachabilityPath:streamSender:remoteCapabilities:localNetworkConfig:streamPreference:]
  -[HMDCameraLocalStreamSession parameterSelection]
  -[HMDCameraLocalStreamSession setParameterSelection:]


HMDMediaProfile : HMDAccessoryProfile <HMFLogging>
 @property  NSString *urlString
 @property  NSDictionary *assistantObject
 @property  NSString *mediaRouteID
 @property  HMDMediaSession *mediaSession
 @property  unsigned long capability
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaProfile supportsSecureCoding]
  +[HMDMediaProfile namespace]
  +[HMDMediaProfile logCategory]
  +[HMDMediaProfile uniqueIdentifierFromAccessory:]
  +[HMDMediaProfile sessionNamespace]
  +[HMDMediaProfile uniqueIdentifierFromAccessoryUUID:]

  // instance methods
  -[HMDMediaProfile mediaRouteID]
  -[HMDMediaProfile unregisterForNotifications]
  -[HMDMediaProfile encodeWithCoder:]
  -[HMDMediaProfile .cxx_destruct]
  -[HMDMediaProfile registerForNotifications]
  -[HMDMediaProfile urlString]
  -[HMDMediaProfile mediaSession]
  -[HMDMediaProfile setMediaSession:]
  -[HMDMediaProfile capability]
  -[HMDMediaProfile initWithAccessory:]
  -[HMDMediaProfile registerForMessages]
  -[HMDMediaProfile initWithAccessory:uniqueIdentifier:services:workQueue:]
  -[HMDMediaProfile configureWithMessageDispatcher:configurationTracker:]
  -[HMDMediaProfile _handleSetPower:]
  -[HMDMediaProfile _updatePlayback:]
  -[HMDMediaProfile _updateRefreshPlayback:]
  -[HMDMediaProfile sessionAudioControlUpdated:]
  -[HMDMediaProfile _handleSetValue:withRequestProperty:withCompletionHandler:]
  -[HMDMediaProfile updateWithResponses:requestMessageInformation:]
  -[HMDMediaProfile _handleSetPlayback:]
  -[HMDMediaProfile _handleMediaSessionSetAudioControl:]
  -[HMDMediaProfile assistantObject]
  -[HMDMediaProfile _handleRefreshPlayback:]
  -[HMDMediaProfile handleSessionPlaybackStateUpdatedNotification:]
  -[HMDMediaProfile handleSessionVolumeUpdatedNotification:]
  -[HMDMediaProfile _updateAudioControl:]
  -[HMDMediaProfile _handleMediaResponses:message:]
  -[HMDMediaProfile _sessionPlaybackStateUpdated:notifyXPCClients:]
  -[HMDMediaProfile handleSetValue:withRequestProperty:withCompletionHandler:]
  -[HMDMediaProfile handleSessionUpdatedNotification:]


HMDHomeMigrationEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *model
 @property  NSString *reason
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDHomeMigrationEvent model]
  -[HMDHomeMigrationEvent eventName]
  -[HMDHomeMigrationEvent attributeDescriptions]
  -[HMDHomeMigrationEvent .cxx_destruct]
  -[HMDHomeMigrationEvent reason]
  -[HMDHomeMigrationEvent serializedEvent]
  -[HMDHomeMigrationEvent initWithModel:reason:]


HMDMediaRoomGroupsDataGenerator : NSObject <HMFLogging, HMDMediaGroupsAggregateDataGenerator>
 @property  <HMDMediaRoomGroupsDataGeneratorDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaRoomGroupsDataGenerator logCategory]

  // instance methods
  -[HMDMediaRoomGroupsDataGenerator dataSource]
  -[HMDMediaRoomGroupsDataGenerator .cxx_destruct]
  -[HMDMediaRoomGroupsDataGenerator setDataSource:]
  -[HMDMediaRoomGroupsDataGenerator rooms]
  -[HMDMediaRoomGroupsDataGenerator aggregateDataWithDestinations:controllers:groups:]
  -[HMDMediaRoomGroupsDataGenerator roomGroupForRoom:destinations:]
  -[HMDMediaRoomGroupsDataGenerator destinationIdentifiersAssignedToRoom:destinations:]
  -[HMDMediaRoomGroupsDataGenerator destination:isInRoom:]
  -[HMDMediaRoomGroupsDataGenerator roomForDestination:]


HMDProcessInfo : HMFProcessInfo <HMFLogging>
 @property  unsigned long state
 @property  RBSProcessState *processState
 @property  RBSProcessHandle *processHandle
 @property  NSArray *connections
 @property  NSString *bundleIdentifier
 @property  BOOL active
 @property  BOOL entitledForAPIAccess
 @property  BOOL entitledForSPIAccess
 @property  BOOL foreground
 @property  BOOL backgroundUpgradedToForeground
 @property  BOOL background
 @property  BOOL suspended
 @property  BOOL terminated
 @property  BOOL shouldMonitor
 @property  HMDApplicationInfo *applicationInfo
 @property  HMFLocationAuthorization *locationAuthorization
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDProcessInfo automaticallyNotifiesObserversForKey:]
  +[HMDProcessInfo logCategory]
  +[HMDProcessInfo privateClientIdentifierSalt]
  +[HMDProcessInfo processInfoWithConnection:]

  // instance methods
  -[HMDProcessInfo addConnection:]
  -[HMDProcessInfo logIdentifier]
  -[HMDProcessInfo connections]
  -[HMDProcessInfo processHandle]
  -[HMDProcessInfo initWithAuditToken:]
  -[HMDProcessInfo isSuspended]
  -[HMDProcessInfo state]
  -[HMDProcessInfo attributeDescriptions]
  -[HMDProcessInfo isActive]
  -[HMDProcessInfo .cxx_destruct]
  -[HMDProcessInfo initWithIdentifier:]
  -[HMDProcessInfo bundleIdentifier]
  -[HMDProcessInfo removeConnection:]
  -[HMDProcessInfo processState]
  -[HMDProcessInfo isEqual:]
  -[HMDProcessInfo locationAuthorization]
  -[HMDProcessInfo init]
  -[HMDProcessInfo setState:]
  -[HMDProcessInfo isBackgrounded]
  -[HMDProcessInfo applicationInfo]
  -[HMDProcessInfo isEntitledForAPIAccess]
  -[HMDProcessInfo isEntitledForSPIAccess]
  -[HMDProcessInfo clientIdentifierSalt:]
  -[HMDProcessInfo shouldMonitor]
  -[HMDProcessInfo _updateProcessState:]
  -[HMDProcessInfo isForegrounded]
  -[HMDProcessInfo isBackgroundUpgradedToForeground]
  -[HMDProcessInfo isTerminated]


AWDHomeKitSoftwareUpdateAutomaticUpdateToggled : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasIsEnabled
 @property  BOOL isEnabled

  // instance methods
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled setTimestamp:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled copyTo:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled mergeFrom:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled setHasTimestamp:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled dictionaryRepresentation]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled hasTimestamp]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled copyWithZone:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled timestamp]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled readFrom:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled setIsEnabled:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled writeTo:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled isEqual:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled isEnabled]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled setHasIsEnabled:]
  -[AWDHomeKitSoftwareUpdateAutomaticUpdateToggled hasIsEnabled]


HMDDelegatingMessageRouter : NSObject <HMFLogging, HMDMessageRouter>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSArray *routers
 @property  <HMDDelegatingMessageRouterDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDelegatingMessageRouter logCategory]

  // instance methods
  -[HMDDelegatingMessageRouter dataSource]
  -[HMDDelegatingMessageRouter .cxx_destruct]
  -[HMDDelegatingMessageRouter setDataSource:]
  -[HMDDelegatingMessageRouter messageDispatcher]
  -[HMDDelegatingMessageRouter routeMessage:localHandler:]
  -[HMDDelegatingMessageRouter routeMessage:allowRemoteRelayFromPrimary:localHandler:]
  -[HMDDelegatingMessageRouter initWithMessageDispatcher:routers:]
  -[HMDDelegatingMessageRouter routers]


HMDSnapshotSlotManager : HMFObject <HMFLogging>
 @property  NSString *logIdentifier
 @property  NSUUID *uniqueIdentifier
 @property  NSDictionary *encodedMostRecentSnapshot
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotSlotManager logCategory]

  // instance methods
  -[HMDSnapshotSlotManager logIdentifier]
  -[HMDSnapshotSlotManager .cxx_destruct]
  -[HMDSnapshotSlotManager uniqueIdentifier]
  -[HMDSnapshotSlotManager registerForMessages]
  -[HMDSnapshotSlotManager handleProcessStateChange:]
  -[HMDSnapshotSlotManager encodedMostRecentSnapshot]
  -[HMDSnapshotSlotManager backboardServicesRelaunched:]
  -[HMDSnapshotSlotManager initWithAccessory:workQueue:imageCacheDirectory:logID:uniqueIdentifier:msgDispatcher:]
  -[HMDSnapshotSlotManager handleFillSnapshotSlot:]
  -[HMDSnapshotSlotManager handleReleaseSnapshot:]
  -[HMDSnapshotSlotManager createSlotForSnapshotFile:requestMessages:shouldNotifyClients:]
  -[HMDSnapshotSlotManager encodedMostRecentSnapshotForMessage:]


HMDRemoteEventRouterProtoEventsMessage : PBCodable <NSCopying>
 @property  NSMutableArray *events
 @property  NSMutableArray *cachedEvents

  // class methods
  +[HMDRemoteEventRouterProtoEventsMessage eventsType]
  +[HMDRemoteEventRouterProtoEventsMessage cachedEventsType]

  // instance methods
  -[HMDRemoteEventRouterProtoEventsMessage addEvents:]
  -[HMDRemoteEventRouterProtoEventsMessage events]
  -[HMDRemoteEventRouterProtoEventsMessage copyTo:]
  -[HMDRemoteEventRouterProtoEventsMessage clearEvents]
  -[HMDRemoteEventRouterProtoEventsMessage eventsCount]
  -[HMDRemoteEventRouterProtoEventsMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoEventsMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoEventsMessage setEvents:]
  -[HMDRemoteEventRouterProtoEventsMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoEventsMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoEventsMessage readFrom:]
  -[HMDRemoteEventRouterProtoEventsMessage eventsAtIndex:]
  -[HMDRemoteEventRouterProtoEventsMessage writeTo:]
  -[HMDRemoteEventRouterProtoEventsMessage isEqual:]
  -[HMDRemoteEventRouterProtoEventsMessage clearCachedEvents]
  -[HMDRemoteEventRouterProtoEventsMessage addCachedEvents:]
  -[HMDRemoteEventRouterProtoEventsMessage cachedEventsCount]
  -[HMDRemoteEventRouterProtoEventsMessage cachedEventsAtIndex:]
  -[HMDRemoteEventRouterProtoEventsMessage cachedEvents]
  -[HMDRemoteEventRouterProtoEventsMessage setCachedEvents:]


HMDModernTransportMessageContextOptions : NSObject
 @property  NSSet *transports
 @property  double timeoutOverride
 @property  double timeToLive
 @property  BOOL expectsMultipleResponses
 @property  BOOL trackingDeviceReachability
 @property  NSString *requestStartTimeHeaderKey
 @property  NSString *timeToLiveHeaderKey

  // class methods
  +[HMDModernTransportMessageContextOptions newWithBuilder:]

  // instance methods
  -[HMDModernTransportMessageContextOptions initWithBuilder:]
  -[HMDModernTransportMessageContextOptions timeToLive]
  -[HMDModernTransportMessageContextOptions .cxx_destruct]
  -[HMDModernTransportMessageContextOptions transports]
  -[HMDModernTransportMessageContextOptions timeoutOverride]
  -[HMDModernTransportMessageContextOptions requestStartTimeHeaderKey]
  -[HMDModernTransportMessageContextOptions timeToLiveHeaderKey]
  -[HMDModernTransportMessageContextOptions expectsMultipleResponses]
  -[HMDModernTransportMessageContextOptions isTrackingDeviceReachability]


HMDModernTransportMessageContextOptionsBuilder : NSObject
 @property  NSSet *transports
 @property  double timeoutOverride
 @property  double timeToLive
 @property  BOOL expectsMultipleResponses
 @property  BOOL trackingDeviceReachability
 @property  NSString *requestStartTimeHeaderKey
 @property  NSString *timeToLiveHeaderKey

  // instance methods
  -[HMDModernTransportMessageContextOptionsBuilder setTransports:]
  -[HMDModernTransportMessageContextOptionsBuilder timeToLive]
  -[HMDModernTransportMessageContextOptionsBuilder .cxx_destruct]
  -[HMDModernTransportMessageContextOptionsBuilder setTimeToLive:]
  -[HMDModernTransportMessageContextOptionsBuilder transports]
  -[HMDModernTransportMessageContextOptionsBuilder timeoutOverride]
  -[HMDModernTransportMessageContextOptionsBuilder setTimeoutOverride:]
  -[HMDModernTransportMessageContextOptionsBuilder requestStartTimeHeaderKey]
  -[HMDModernTransportMessageContextOptionsBuilder timeToLiveHeaderKey]
  -[HMDModernTransportMessageContextOptionsBuilder expectsMultipleResponses]
  -[HMDModernTransportMessageContextOptionsBuilder trackingDeviceReachability]
  -[HMDModernTransportMessageContextOptionsBuilder setExpectsMultipleResponses:]
  -[HMDModernTransportMessageContextOptionsBuilder setTrackingDeviceReachability:]
  -[HMDModernTransportMessageContextOptionsBuilder setRequestStartTimeHeaderKey:]
  -[HMDModernTransportMessageContextOptionsBuilder setTimeToLiveHeaderKey:]


HMDRemoteEventRouterProtoChangeRegistrationsResponse : PBCodable <NSCopying>
 @property  NSMutableArray *cachedEvents

  // class methods
  +[HMDRemoteEventRouterProtoChangeRegistrationsResponse cachedEventsType]

  // instance methods
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse copyTo:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse .cxx_destruct]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse mergeFrom:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse copyWithZone:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse readFrom:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse writeTo:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse isEqual:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse clearCachedEvents]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse addCachedEvents:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse cachedEventsCount]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse cachedEventsAtIndex:]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse cachedEvents]
  -[HMDRemoteEventRouterProtoChangeRegistrationsResponse setCachedEvents:]


HMDHAPMediaProfile : HMDMediaProfile
 @property  long long airPlayEnable
 @property  NSString *clientIdentifier

  // class methods
  +[HMDHAPMediaProfile supportsSecureCoding]

  // instance methods
  -[HMDHAPMediaProfile clientIdentifier]
  -[HMDHAPMediaProfile encodeWithCoder:]
  -[HMDHAPMediaProfile .cxx_destruct]
  -[HMDHAPMediaProfile registerForNotifications]
  -[HMDHAPMediaProfile capability]
  -[HMDHAPMediaProfile handlePrimaryResidentChanged:]
  -[HMDHAPMediaProfile handleAccessoryConnected:]
  -[HMDHAPMediaProfile _updatePlayback:]
  -[HMDHAPMediaProfile _updateRefreshPlayback:]
  -[HMDHAPMediaProfile handleHomeCharacteristicValuesChanged:]
  -[HMDHAPMediaProfile _handleCharacteristicChanges:]
  -[HMDHAPMediaProfile _notifyProfileSettingsUpdated:]
  -[HMDHAPMediaProfile setEnable:completionHandler:]
  -[HMDHAPMediaProfile handleCharacteristicsUpdated:]
  -[HMDHAPMediaProfile _updateAudioControl:]
  -[HMDHAPMediaProfile handleResidentAdded:]
  -[HMDHAPMediaProfile initWithMediaServices:]
  -[HMDHAPMediaProfile _smartSpeakerService]
  -[HMDHAPMediaProfile _smartSpeakerTargetMediaStateCharacteristic]
  -[HMDHAPMediaProfile playStateWriteRequestWithPlaybackState:]
  -[HMDHAPMediaProfile _smartSpeakerTargetMediaStateWriteRequestWithPlaybackState:]
  -[HMDHAPMediaProfile _smartSpeakerCurrentMediaStateCharacteristic]
  -[HMDHAPMediaProfile _smartSpeakerCurrentMediaStateReadRequest]
  -[HMDHAPMediaProfile _smartSpeakerVolumeCharacteristic]
  -[HMDHAPMediaProfile _smartSpeakerVolumeReadRequest]
  -[HMDHAPMediaProfile volumeWriteRequestWithVolumePercentage:]
  -[HMDHAPMediaProfile _smartSpeakerVolumeWriteRequestWithVolumePercentage:]
  -[HMDHAPMediaProfile _smartSpeakerMutedCharacteristic]
  -[HMDHAPMediaProfile _smartSpeakerMutedReadRequest]
  -[HMDHAPMediaProfile _smartSpeakerMutedWriteRequestWithMuted:]
  -[HMDHAPMediaProfile _smartSpeakerAirPlayEnableCharacteristic]
  -[HMDHAPMediaProfile _smartSpeakerAirPlayEnableReadRequest]
  -[HMDHAPMediaProfile setAirPlayEnable:]
  -[HMDHAPMediaProfile airPlayEnable]
  -[HMDHAPMediaProfile mediaSessionFromProfile]
  -[HMDHAPMediaProfile _mediaSessionStateFromProfile]
  -[HMDHAPMediaProfile updateMediaSessionState:usingServices:]
  -[HMDHAPMediaProfile updateMediaSessionState:usingCharacteristics:]
  -[HMDHAPMediaProfile _updateCharacteristicChanges]
  -[HMDHAPMediaProfile _allCharacteristicsToMonitor]
  -[HMDHAPMediaProfile _setCharacteristicNotifications:]
  -[HMDHAPMediaProfile _disableCharacteristicNotifications]
  -[HMDHAPMediaProfile _updateCurrentMediaState:volumePercentage:muted:enable:message:]


HMDCloudCache : HMFObject
 @property  HMDCloudZone *homeDataInformation
 @property  HMDCloudLegacyZone *legacyZone
 @property  HMDCloudMetadataZone *metadataZone
 @property  HMDCloudHomeManagerZone *homeManagerZone
 @property  NSMutableDictionary *homeZones
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDBackingStore *backingStore
 @property  CKServerChangeToken *databaseServerChangeToken

  // instance methods
  -[HMDCloudCache workQueue]
  -[HMDCloudCache setWorkQueue:]
  -[HMDCloudCache .cxx_destruct]
  -[HMDCloudCache deleteAllZones]
  -[HMDCloudCache setBackingStore:]
  -[HMDCloudCache backingStore]
  -[HMDCloudCache setHomeManagerZone:]
  -[HMDCloudCache homeManagerZone]
  -[HMDCloudCache init]
  -[HMDCloudCache legacyZone]
  -[HMDCloudCache metadataZone]
  -[HMDCloudCache initWithBackingStore:workQueue:]
  -[HMDCloudCache setHomeDataInformation:]
  -[HMDCloudCache homeDataInformation]
  -[HMDCloudCache setLegacyZone:]
  -[HMDCloudCache setMetadataZone:]
  -[HMDCloudCache _findStoreCacheZone:byName:]
  -[HMDCloudCache _createZones:completion:]
  -[HMDCloudCache createAndFetchZonesFromBackingStore:]
  -[HMDCloudCache allHomeZones]
  -[HMDCloudCache homeZoneExists:]
  -[HMDCloudCache homeZoneWithName:owner:completion:]
  -[HMDCloudCache deleteHomeZoneWithName:]
  -[HMDCloudCache databaseServerChangeToken]
  -[HMDCloudCache setDatabaseServerChangeToken:]
  -[HMDCloudCache persistDatabaseServerChangeToken]
  -[HMDCloudCache homeZones]
  -[HMDCloudCache setHomeZones:]


HMDSiriEndpointProfileAssistant : HMFObject <NSSecureCoding>
 @property  NSNumber *identifier
 @property  NSString *name
 @property  NSNumber *active
 @property  HMDService *service
 @property  NSArray *characteristicsToMonitor
 @property  NSArray *allCharacteristics

  // class methods
  +[HMDSiriEndpointProfileAssistant supportsSecureCoding]
  +[HMDSiriEndpointProfileAssistant shortDescription]
  +[HMDSiriEndpointProfileAssistant logCategory]

  // instance methods
  -[HMDSiriEndpointProfileAssistant active]
  -[HMDSiriEndpointProfileAssistant identifier]
  -[HMDSiriEndpointProfileAssistant initWithService:]
  -[HMDSiriEndpointProfileAssistant encodeWithCoder:]
  -[HMDSiriEndpointProfileAssistant .cxx_destruct]
  -[HMDSiriEndpointProfileAssistant service]
  -[HMDSiriEndpointProfileAssistant setActive:]
  -[HMDSiriEndpointProfileAssistant setIdentifier:]
  -[HMDSiriEndpointProfileAssistant setName:]
  -[HMDSiriEndpointProfileAssistant name]
  -[HMDSiriEndpointProfileAssistant initWithCoder:]
  -[HMDSiriEndpointProfileAssistant characteristicsToMonitor]
  -[HMDSiriEndpointProfileAssistant _identifierCharacteristic]
  -[HMDSiriEndpointProfileAssistant _nameCharacteristic]
  -[HMDSiriEndpointProfileAssistant _activeCharacteristic]
  -[HMDSiriEndpointProfileAssistant allCharacteristics]
  -[HMDSiriEndpointProfileAssistant containsCharacteristic:]
  -[HMDSiriEndpointProfileAssistant updateCharacteristic:value:]


HMDEventCountersPersistentStore : NSObject <HMDEventCountersStoring>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDEventCountersPersistentStore unarchive]
  -[HMDEventCountersPersistentStore archiveDictionary:]


HMDEventCounterGroupNameSpecifier : NSObject <HMDEventCounterGroupSpecifying>
 @property  NSString *groupName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDEventCounterGroupNameSpecifier supportsSecureCoding]
  +[HMDEventCounterGroupNameSpecifier specifierWithGroupName:]

  // instance methods
  -[HMDEventCounterGroupNameSpecifier encodeWithCoder:]
  -[HMDEventCounterGroupNameSpecifier .cxx_destruct]
  -[HMDEventCounterGroupNameSpecifier groupName]
  -[HMDEventCounterGroupNameSpecifier copyWithZone:]
  -[HMDEventCounterGroupNameSpecifier isEqual:]
  -[HMDEventCounterGroupNameSpecifier initWithCoder:]
  -[HMDEventCounterGroupNameSpecifier initWithGroupName:]
  -[HMDEventCounterGroupNameSpecifier isEqualToGroupNameSpecifier:]


HMDEventCountersManager : HMFObject <HMDEventCounterContext>
 @property  NSMutableDictionary *counterGroups
 @property  NSDate *lastSaveTime
 @property  <HMDEventCountersStoring> *counterStorage
 @property  double saveInterval
 @property  NSObject<OS_dispatch_queue> *workQueue

  // class methods
  +[HMDEventCountersManager sharedEventCountersManager]

  // instance methods
  -[HMDEventCountersManager _save]
  -[HMDEventCountersManager workQueue]
  -[HMDEventCountersManager .cxx_destruct]
  -[HMDEventCountersManager objectForKeyedSubscript:]
  -[HMDEventCountersManager init]
  -[HMDEventCountersManager forceSave]
  -[HMDEventCountersManager counterChanged]
  -[HMDEventCountersManager initWithEventCountersStorage:saveInterval:]
  -[HMDEventCountersManager counterGroupForName:]
  -[HMDEventCountersManager counterGroupForSpecifier:]
  -[HMDEventCountersManager removeCounterGroupForName:]
  -[HMDEventCountersManager removeCounterGroupForSpecifier:]
  -[HMDEventCountersManager removeCounterGroupsBasedOnPredicate:]
  -[HMDEventCountersManager _removeCounterGroupForSpecifier:]
  -[HMDEventCountersManager addObserver:forEventName:requestGroup:]
  -[HMDEventCountersManager incrementEventCounterForEventName:requestGroup:withValue:]
  -[HMDEventCountersManager incrementEventCounterForEventName:requestGroup:]
  -[HMDEventCountersManager fetchEventCounterForEventName:requestGroup:]
  -[HMDEventCountersManager fetchEventCountersForRequestGroup:]
  -[HMDEventCountersManager fetchAggregatedEventCountersForRequestGroup:]
  -[HMDEventCountersManager fetchAllEventCounters]
  -[HMDEventCountersManager resetEventCounterForEventName:requestGroup:]
  -[HMDEventCountersManager resetEventCountersForRequestGroup:]
  -[HMDEventCountersManager resetAllEventCounters]
  -[HMDEventCountersManager _fetchAllEventCounters]
  -[HMDEventCountersManager unarchiveEventCounters]
  -[HMDEventCountersManager counterGroups]
  -[HMDEventCountersManager setCounterGroups:]
  -[HMDEventCountersManager lastSaveTime]
  -[HMDEventCountersManager setLastSaveTime:]
  -[HMDEventCountersManager counterStorage]
  -[HMDEventCountersManager saveInterval]
  -[HMDEventCountersManager setSaveInterval:]


HMDFeaturesDataSource : NSObject <HMDFeaturesDataSource>
 @property  BOOL chipFeatureEnabled
 @property  BOOL significantEventNotificationsFeatureEnabled
 @property  BOOL hh2AutoMigrationEnabled
 @property  BOOL audioGroupingEnabled
 @property  BOOL hh2MigrationDryRunEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDFeaturesDataSource isCHIPFeatureEnabled]
  -[HMDFeaturesDataSource isHH2AutoMigrationEnabled]
  -[HMDFeaturesDataSource isSignificantEventNotificationsFeatureEnabled]
  -[HMDFeaturesDataSource isAudioGroupingEnabled]
  -[HMDFeaturesDataSource isHH2MigrationDryRunEnabled]


HMDCameraSnapshotNotificationTimer : HMFTimer
 @property  NSSet *changedCharacteristics
 @property  NSString *sessionID
 @property  NSArray *postedBulletins

  // instance methods
  -[HMDCameraSnapshotNotificationTimer sessionID]
  -[HMDCameraSnapshotNotificationTimer .cxx_destruct]
  -[HMDCameraSnapshotNotificationTimer initWithCameraSessionID:changedCharacteristics:timeInterval:]
  -[HMDCameraSnapshotNotificationTimer changedCharacteristics]
  -[HMDCameraSnapshotNotificationTimer postedBulletins]
  -[HMDCameraSnapshotNotificationTimer setPostedBulletins:]


HMDCameraRecordingSessionNotificationTrigger : HMFObject <HMDCharacteristicsAvailabilityListenerDelegate, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *cameraAccessory
 @property  HMDCharacteristicsAvailabilityListener *availabilityListener
 @property  NSNotificationCenter *notificationCenter
 @property  NSString *logIdentifier
 @property  NSSet *availableCharacteristics
 @property  NSString *clientIdentifier
 @property  <HMDCameraRecordingSessionNotificationTriggerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingSessionNotificationTrigger logCategory]

  // instance methods
  -[HMDCameraRecordingSessionNotificationTrigger notificationCenter]
  -[HMDCameraRecordingSessionNotificationTrigger logIdentifier]
  -[HMDCameraRecordingSessionNotificationTrigger setDelegate:]
  -[HMDCameraRecordingSessionNotificationTrigger clientIdentifier]
  -[HMDCameraRecordingSessionNotificationTrigger workQueue]
  -[HMDCameraRecordingSessionNotificationTrigger delegate]
  -[HMDCameraRecordingSessionNotificationTrigger dealloc]
  -[HMDCameraRecordingSessionNotificationTrigger .cxx_destruct]
  -[HMDCameraRecordingSessionNotificationTrigger start]
  -[HMDCameraRecordingSessionNotificationTrigger handleAccessoryConnected:]
  -[HMDCameraRecordingSessionNotificationTrigger listener:didUpdateAvailableCharacteristics:]
  -[HMDCameraRecordingSessionNotificationTrigger availableCharacteristics]
  -[HMDCameraRecordingSessionNotificationTrigger setAvailableCharacteristics:]
  -[HMDCameraRecordingSessionNotificationTrigger handleCharacteristicsValueUpdated:]
  -[HMDCameraRecordingSessionNotificationTrigger initWithCamera:workQueue:]
  -[HMDCameraRecordingSessionNotificationTrigger initWithCamera:workQueue:availabilityListener:notificationCenter:]
  -[HMDCameraRecordingSessionNotificationTrigger _handleObservedCharacteristicsValueUpdate:]
  -[HMDCameraRecordingSessionNotificationTrigger cameraAccessory]
  -[HMDCameraRecordingSessionNotificationTrigger availabilityListener]


HMDLogEventWeekBasedFilter : NSObject <HMDLogEventFiltering>
 @property  HMDMetricsDateProvider *dateProvider
 @property  NSUUID *deviceSalt
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDLogEventWeekBasedFilter deviceSalt]
  -[HMDLogEventWeekBasedFilter dateProvider]
  -[HMDLogEventWeekBasedFilter .cxx_destruct]
  -[HMDLogEventWeekBasedFilter isEventInSample:]
  -[HMDLogEventWeekBasedFilter initWithDeviceUUID:dateProvider:]
  -[HMDLogEventWeekBasedFilter resultHashWithEvent:]


HMDSettingRootGroupModel : HMDSettingGroupModel <HMDConflictResolutionModel>
 @property  NSUUID *conflictResolutionToken

  // class methods
  +[HMDSettingRootGroupModel hmbProperties]

  // instance methods
  -[HMDSettingRootGroupModel initWithModelID:parentModelID:]
  -[HMDSettingRootGroupModel copyWithNewParentModelID:]
  -[HMDSettingRootGroupModel nameForKeyPath]


HMDHomeLocationHandler : HMFObject <HMDBatchLocationDelegate, HMFLogging, HMFTimerDelegate, HMDHomeMessageReceiver, NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  HMDHome *home
 @property  NSDate *locationUpdateTimestamp
 @property  long long locationAuthorization
 @property  CLRegion *regionAtHome
 @property  CLRegion *regionNearbyHome
 @property  long long regionStateAtHome
 @property  long long regionStateNearbyHome
 @property  NSString *isoCountryCode
 @property  HMFTimer *homeRegionUpdateTimer
 @property  _HMDPendingRegionUpdate *pendingAtHomeRegionUpdate
 @property  _HMDPendingRegionUpdate *pendingNearbyHomeRegionUpdate
 @property  double coalesceRegionUpdateIntervalInSeconds
 @property  CLLocation *location
 @property  NSTimeZone *timeZone
 @property  HMDHomeLocationData *locationData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomeLocationHandler supportsSecureCoding]
  +[HMDHomeLocationHandler logCategory]
  +[HMDHomeLocationHandler hasMessageReceiverChildren]

  // instance methods
  -[HMDHomeLocationHandler home]
  -[HMDHomeLocationHandler timeZone]
  -[HMDHomeLocationHandler timerDidFire:]
  -[HMDHomeLocationHandler setTimeZone:]
  -[HMDHomeLocationHandler logIdentifier]
  -[HMDHomeLocationHandler setIsoCountryCode:]
  -[HMDHomeLocationHandler setLocationAuthorization:]
  -[HMDHomeLocationHandler encodeWithCoder:]
  -[HMDHomeLocationHandler workQueue]
  -[HMDHomeLocationHandler setWorkQueue:]
  -[HMDHomeLocationHandler dealloc]
  -[HMDHomeLocationHandler .cxx_destruct]
  -[HMDHomeLocationHandler messageTargetUUID]
  -[HMDHomeLocationHandler messageDestination]
  -[HMDHomeLocationHandler setLocation:]
  -[HMDHomeLocationHandler isoCountryCode]
  -[HMDHomeLocationHandler location]
  -[HMDHomeLocationHandler messageReceiveQueue]
  -[HMDHomeLocationHandler msgDispatcher]
  -[HMDHomeLocationHandler locationAuthorization]
  -[HMDHomeLocationHandler init]
  -[HMDHomeLocationHandler initWithCoder:]
  -[HMDHomeLocationHandler setHome:]
  -[HMDHomeLocationHandler locationData]
  -[HMDHomeLocationHandler setMsgDispatcher:]
  -[HMDHomeLocationHandler _registerForMessages]
  -[HMDHomeLocationHandler updateHomeLocation]
  -[HMDHomeLocationHandler didDetermineState:forRegion:]
  -[HMDHomeLocationHandler didDetermineLocation:]
  -[HMDHomeLocationHandler _handleLocationAuthorizationChangedNotification:]
  -[HMDHomeLocationHandler configure:queue:messageDispatcher:]
  -[HMDHomeLocationHandler _handleRetrieveLocation:]
  -[HMDHomeLocationHandler getReachableIPAccessory:btleAccessory:mediaAccessory:]
  -[HMDHomeLocationHandler didDetermineBatchLocation:]
  -[HMDHomeLocationHandler _registerForRegionUpdate]
  -[HMDHomeLocationHandler _handleLocationAuthorization:]
  -[HMDHomeLocationHandler accessoriesBecomeReachable]
  -[HMDHomeLocationHandler accessoriesBecomeUnreachable]
  -[HMDHomeLocationHandler _canExtractBatchLocations]
  -[HMDHomeLocationHandler _needToExtractBatchLocations]
  -[HMDHomeLocationHandler _evaluateHomeRegionStateForCurrentDeviceLocation:]
  -[HMDHomeLocationHandler _updateTimeZone:]
  -[HMDHomeLocationHandler _handleHomeLocationData:message:]
  -[HMDHomeLocationHandler _handleHomeLocationDataForHH2:fromMessage:]
  -[HMDHomeLocationHandler shouldUpdateLocationFromLocationData:]
  -[HMDHomeLocationHandler runTransactionWithLocation:updatedTime:source:]
  -[HMDHomeLocationHandler isNewHomeLocationTooCloseToPreviousLocation:newLocation:]
  -[HMDHomeLocationHandler _sendLocationUpdateToClients]
  -[HMDHomeLocationHandler isLocation:closeToLocation:]
  -[HMDHomeLocationHandler isDate:laterThanDate:]
  -[HMDHomeLocationHandler updateHomeLocationFromCoreRoutine]
  -[HMDHomeLocationHandler calculateAndUpdateRegionState:]
  -[HMDHomeLocationHandler updateRegionStateFromLocation:]
  -[HMDHomeLocationHandler coalesceRegionUpdateState:forRegion:]
  -[HMDHomeLocationHandler _processPendingRegionStateUpdates]
  -[HMDHomeLocationHandler __initForUnitTesting:home:queue:messageDispatcher:location:]
  -[HMDHomeLocationHandler __simulateAtHomeRegionState:]
  -[HMDHomeLocationHandler __simulateNearByHomeRegionState:]
  -[HMDHomeLocationHandler __getAtHomeCalculatedState]
  -[HMDHomeLocationHandler __getNearByHomeCalculatedState]
  -[HMDHomeLocationHandler regionStateAtHome]
  -[HMDHomeLocationHandler setRegionStateAtHome:]
  -[HMDHomeLocationHandler regionStateNearbyHome]
  -[HMDHomeLocationHandler setRegionStateNearbyHome:]
  -[HMDHomeLocationHandler locationUpdateTimestamp]
  -[HMDHomeLocationHandler setLocationUpdateTimestamp:]
  -[HMDHomeLocationHandler regionAtHome]
  -[HMDHomeLocationHandler setRegionAtHome:]
  -[HMDHomeLocationHandler regionNearbyHome]
  -[HMDHomeLocationHandler setRegionNearbyHome:]
  -[HMDHomeLocationHandler homeRegionUpdateTimer]
  -[HMDHomeLocationHandler setHomeRegionUpdateTimer:]
  -[HMDHomeLocationHandler pendingAtHomeRegionUpdate]
  -[HMDHomeLocationHandler setPendingAtHomeRegionUpdate:]
  -[HMDHomeLocationHandler pendingNearbyHomeRegionUpdate]
  -[HMDHomeLocationHandler setPendingNearbyHomeRegionUpdate:]
  -[HMDHomeLocationHandler coalesceRegionUpdateIntervalInSeconds]
  -[HMDHomeLocationHandler setCoalesceRegionUpdateIntervalInSeconds:]


HMDHomeLocationData : HMFObject <NSSecureCoding>
 @property  CLLocation *location
 @property  NSDate *locationUpdateTimestamp

  // class methods
  +[HMDHomeLocationData supportsSecureCoding]

  // instance methods
  -[HMDHomeLocationData encodeWithCoder:]
  -[HMDHomeLocationData .cxx_destruct]
  -[HMDHomeLocationData location]
  -[HMDHomeLocationData initWithCoder:]
  -[HMDHomeLocationData locationUpdateTimestamp]
  -[HMDHomeLocationData initWithLocation:locationUpdateTimestamp:]


_HMDPendingRegionUpdate : HMFObject <HMFLogging>
 @property  long long state
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_HMDPendingRegionUpdate logCategory]

  // instance methods
  -[_HMDPendingRegionUpdate state]
  -[_HMDPendingRegionUpdate attributeDescriptions]
  -[_HMDPendingRegionUpdate setState:]


HMDHomeAdministratorHandler : HMFMessageDispatcher <HMFLogging>
 @property  HMFMessageDispatcher *dispatcher
 @property  HMDHome *home
 @property  BOOL shouldRelayMessages
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeAdministratorHandler logCategory]

  // instance methods
  -[HMDHomeAdministratorHandler home]
  -[HMDHomeAdministratorHandler logIdentifier]
  -[HMDHomeAdministratorHandler registerForMessage:receiver:policies:messageHandler:]
  -[HMDHomeAdministratorHandler addOperation:]
  -[HMDHomeAdministratorHandler initWithTransport:]
  -[HMDHomeAdministratorHandler deregisterReceiver:]
  -[HMDHomeAdministratorHandler .cxx_destruct]
  -[HMDHomeAdministratorHandler observeValueForKeyPath:ofObject:change:context:]
  -[HMDHomeAdministratorHandler dispatcher]
  -[HMDHomeAdministratorHandler registerForMessage:receiver:policies:selector:]
  -[HMDHomeAdministratorHandler initWithHome:]
  -[HMDHomeAdministratorHandler initWithHome:dispatcher:]
  -[HMDHomeAdministratorHandler syncOperationManager]
  -[HMDHomeAdministratorHandler shouldRelayMessages]
  -[HMDHomeAdministratorHandler operationForMessage:error:]


__HMDHomeAdministratorReceiver : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  <HMFMessageReceiver> *receiver
 @property  HMDHomeAdministratorHandler *handler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[__HMDHomeAdministratorReceiver logCategory]

  // instance methods
  -[__HMDHomeAdministratorReceiver logIdentifier]
  -[__HMDHomeAdministratorReceiver dealloc]
  -[__HMDHomeAdministratorReceiver .cxx_destruct]
  -[__HMDHomeAdministratorReceiver messageTargetUUID]
  -[__HMDHomeAdministratorReceiver shortDescription]
  -[__HMDHomeAdministratorReceiver handler]
  -[__HMDHomeAdministratorReceiver receiver]
  -[__HMDHomeAdministratorReceiver __handleXPCMessage:]
  -[__HMDHomeAdministratorReceiver initWithReceiver:handler:]
  -[__HMDHomeAdministratorReceiver registerForMessage:policies:]


__HMDHomeAdministratorRemoteRelay : __HMDHomeAdministratorReceiver
  // class methods
  +[__HMDHomeAdministratorRemoteRelay logCategory]

  // instance methods
  -[__HMDHomeAdministratorRemoteRelay __handleXPCMessage:]


__HMDHomeAdministratorRemoteReceiver : __HMDHomeAdministratorReceiver
  // class methods
  +[__HMDHomeAdministratorRemoteReceiver logCategory]

  // instance methods
  -[__HMDHomeAdministratorRemoteReceiver registerForMessage:policies:]
  -[__HMDHomeAdministratorRemoteReceiver __handleRemoteMessage:]


HMDCameraSnapshotIDSRelayInitiator : HMDCameraSnapshotIDSRelay <IDSSessionDelegate>
 @property  IDSSession *idsSession
 @property  <HMDCameraSnapshotIDSRelayInitiatorDelegate> *delegate
 @property  BOOL idsSessionStarted
 @property  HMDDevice *device
 @property  NSMutableData *data
 @property  NSObject<OS_dispatch_source> *socketSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSRelayInitiator logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSRelayInitiator delegate]
  -[HMDCameraSnapshotIDSRelayInitiator dealloc]
  -[HMDCameraSnapshotIDSRelayInitiator .cxx_destruct]
  -[HMDCameraSnapshotIDSRelayInitiator device]
  -[HMDCameraSnapshotIDSRelayInitiator setData:]
  -[HMDCameraSnapshotIDSRelayInitiator data]
  -[HMDCameraSnapshotIDSRelayInitiator sendData:]
  -[HMDCameraSnapshotIDSRelayInitiator sessionStarted:]
  -[HMDCameraSnapshotIDSRelayInitiator sessionEnded:withReason:error:]
  -[HMDCameraSnapshotIDSRelayInitiator session:receivedInvitationAcceptFromID:]
  -[HMDCameraSnapshotIDSRelayInitiator session:receivedInvitationDeclineFromID:]
  -[HMDCameraSnapshotIDSRelayInitiator session:receivedInvitationCancelFromID:]
  -[HMDCameraSnapshotIDSRelayInitiator idsSession]
  -[HMDCameraSnapshotIDSRelayInitiator setIdsSession:]
  -[HMDCameraSnapshotIDSRelayInitiator initWithSessionID:logIdentifier:workQueue:device:delegate:]
  -[HMDCameraSnapshotIDSRelayInitiator _sendData]
  -[HMDCameraSnapshotIDSRelayInitiator sendIDSInvitation]
  -[HMDCameraSnapshotIDSRelayInitiator _startDataTransfer]
  -[HMDCameraSnapshotIDSRelayInitiator _callFileTransferFailed:]
  -[HMDCameraSnapshotIDSRelayInitiator idsSessionStarted]
  -[HMDCameraSnapshotIDSRelayInitiator setIdsSessionStarted:]
  -[HMDCameraSnapshotIDSRelayInitiator socketSource]
  -[HMDCameraSnapshotIDSRelayInitiator setSocketSource:]


HMDSiriMultiUserNewLanguageNotificationManagerContext : HMFObject <HMFLogging>
 @property  <HMDSiriMultiUserNewLanguageNotificationManagerContextDelegate> *delegate
 @property  BOOL cachedHasCurrentUserSeenNotification
 @property  HMDUser *user
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL hasCurrentUserSeenNotification
 @property  BOOL RMVEnabledForCurrentUser
 @property  NSString *currentDeviceSiriLanguage
 @property  NSArray *mediaAccessories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriMultiUserNewLanguageNotificationManagerContext logCategory]
  +[HMDSiriMultiUserNewLanguageNotificationManagerContext userReadableLanguageFromCode:]

  // instance methods
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext configure]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext setDelegate:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext workQueue]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext delegate]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext user]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext .cxx_destruct]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext handleMediaAccessorySoftwareVersionUpdated:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext initWithUser:workQueue:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext mediaAccessories]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext hasCurrentUserSeenNotification]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext setCurrentUserHasSeenNotification]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext isRMVEnabledForCurrentUser]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext currentDeviceSiriLanguage]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext siriLanguagesRequiringNotificationForVersion:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext siriLanguageForMediaAccessory:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext showNotificationForNewlySupportedLanguage:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext submitLogEventForShownNotificationWithLanguage:]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext cachedHasCurrentUserSeenNotification]
  -[HMDSiriMultiUserNewLanguageNotificationManagerContext setCachedHasCurrentUserSeenNotification:]


HMDSiriMultiUserNewLanguageNotificationManager : HMFObject <HMFLogging, HMDSiriMultiUserNewLanguageNotificationManagerContextDelegate>
 @property  HMDSiriMultiUserNewLanguageNotificationManagerContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSiriMultiUserNewLanguageNotificationManager logCategory]

  // instance methods
  -[HMDSiriMultiUserNewLanguageNotificationManager initWithContext:]
  -[HMDSiriMultiUserNewLanguageNotificationManager .cxx_destruct]
  -[HMDSiriMultiUserNewLanguageNotificationManager context]
  -[HMDSiriMultiUserNewLanguageNotificationManager mediaAccessory:didUpdateSoftwareToVersion:]
  -[HMDSiriMultiUserNewLanguageNotificationManager checkAllMediaAccessoriesAndPostNotificationIfNecessary]
  -[HMDSiriMultiUserNewLanguageNotificationManager _postNotificationIfNecessaryForMediaAccessory:]


HMDCameraClipUserNotificationCenter : HMFObject <HMFLogging>
 @property  <HMDCameraBulletinBoard> *bulletinBoard
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDFileManager> *fileManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipUserNotificationCenter logCategory]

  // instance methods
  -[HMDCameraClipUserNotificationCenter workQueue]
  -[HMDCameraClipUserNotificationCenter .cxx_destruct]
  -[HMDCameraClipUserNotificationCenter fileManager]
  -[HMDCameraClipUserNotificationCenter bulletinBoard]
  -[HMDCameraClipUserNotificationCenter initWithBulletinBoard:workQueue:]
  -[HMDCameraClipUserNotificationCenter initWithBulletinBoard:workQueue:fileManager:]
  -[HMDCameraClipUserNotificationCenter postNotificationForSignificantEvent:heroFrameData:cameraProfile:]
  -[HMDCameraClipUserNotificationCenter bulletinForClipSignificantEvent:cameraProfile:]
  -[HMDCameraClipUserNotificationCenter postNotificationForBulletin:significantEvent:]
  -[HMDCameraClipUserNotificationCenter removeEventNotificationForClipWithUUID:]
  -[HMDCameraClipUserNotificationCenter removeEventNotificationsForCameraProfile:]
  -[HMDCameraClipUserNotificationCenter removeCachedHeroFrameImages]
  -[HMDCameraClipUserNotificationCenter _insertClipSignificantEventBulletin:]
  -[HMDCameraClipUserNotificationCenter _writeHeroFrameData:]
  -[HMDCameraClipUserNotificationCenter _firstAvailableHeroFrameURLForSignificantEvents:cameraProfile:]


HMDMemoryLogEvent : HMMLogEvent <HMDDiagnosticReportLogging>
 @property  NSString *diagnosticReportEventType
 @property  NSString *diagnosticReportEventSubType
 @property  long long reason
 @property  unsigned long currentMemoryUsage
 @property  unsigned long intervalMaxMemoryUsage

  // instance methods
  -[HMDMemoryLogEvent reason]
  -[HMDMemoryLogEvent currentMemoryUsage]
  -[HMDMemoryLogEvent init]
  -[HMDMemoryLogEvent initWithReason:currentMemoryUsage:intervalMaxMemoryUsage:]
  -[HMDMemoryLogEvent intervalMaxMemoryUsage]
  -[HMDMemoryLogEvent updateDiagnosticReportSignature:]


HMDRemoteMessageSenderContext : HMFObject <HMFObject, NSCopying>
 @property  HMDDeviceHandle *deviceHandle
 @property  HMDDeviceHandle *localDeviceHandle
 @property  HMDAccountIdentifier *accountIdentifier
 @property  NSString *mergeID
 @property  HMDAccountHandle *accountHandle
 @property  HMDHomeKitVersion *deviceVersion
 @property  NSString *pairingIdentityIdentifier
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDRemoteMessageSenderContext deviceVersion]
  -[HMDRemoteMessageSenderContext propertyDescription]
  -[HMDRemoteMessageSenderContext .cxx_destruct]
  -[HMDRemoteMessageSenderContext accountIdentifier]
  -[HMDRemoteMessageSenderContext copyWithZone:]
  -[HMDRemoteMessageSenderContext mergeID]
  -[HMDRemoteMessageSenderContext deviceHandle]
  -[HMDRemoteMessageSenderContext accountHandle]
  -[HMDRemoteMessageSenderContext initWithDeviceHandle:accountHandle:accountIdentifier:deviceVersion:pairingIdentityIdentifier:]
  -[HMDRemoteMessageSenderContext localDeviceHandle]
  -[HMDRemoteMessageSenderContext setLocalDeviceHandle:]
  -[HMDRemoteMessageSenderContext pairingIdentityIdentifier]


HMDCameraProfileSettingsManager : HMFObject <HMFLogging, HMBLocalZoneDelegate, HMBCloudZoneDelegate, HMBLocalZoneModelObserver, HMDCharacteristicsAvailabilityListenerDelegate, HMDDatabaseZoneManagerDataSource, HMDDatabaseZoneManagerDelegate, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDHAPAccessory *hapAccessory
 @property  NSNotificationCenter *notificationCenter
 @property  HMDCameraProfileSettingsModel *defaultSettingsModel
 @property  HMDCameraProfileSettingsDerivedPropertiesModel *derivedPropertiesModel
 @property  HMDBulletinBoard *bulletinBoard
 @property  HMDCharacteristicsAvailabilityListener *characteristicsAvailabilityListener
 @property  BOOL cameraManuallyDisabled
 @property  NSString *clientIdentifier
 @property  HMDFeaturesDataSource *featuresDataSource
 @property  HMDDatabaseZoneManager *zoneManager
 @property  HMDAppleAccountManager *accountManager
 @property  HMFMessageDispatcher *msgDispatcher
 @property  NSNumber *anyUserAtHome
 @property  NSString *zoneName
 @property  NSUUID *uniqueIdentifier
 @property  NSUUID *derivedPropertiesModelID
 @property  _HMCameraUserSettings *currentSettings
 @property  unsigned long supportedFeatures
 @property  <HMDCameraProfileSettingsManagerDelegate> *delegate
 @property  BOOL recordingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraProfileSettingsManager logCategory]
  +[HMDCameraProfileSettingsManager zoneNameForHome:]

  // instance methods
  -[HMDCameraProfileSettingsManager notificationCenter]
  -[HMDCameraProfileSettingsManager accountManager]
  -[HMDCameraProfileSettingsManager logIdentifier]
  -[HMDCameraProfileSettingsManager remove]
  -[HMDCameraProfileSettingsManager setDelegate:]
  -[HMDCameraProfileSettingsManager clientIdentifier]
  -[HMDCameraProfileSettingsManager workQueue]
  -[HMDCameraProfileSettingsManager delegate]
  -[HMDCameraProfileSettingsManager zoneName]
  -[HMDCameraProfileSettingsManager dealloc]
  -[HMDCameraProfileSettingsManager .cxx_destruct]
  -[HMDCameraProfileSettingsManager messageTargetUUID]
  -[HMDCameraProfileSettingsManager zoneManager]
  -[HMDCameraProfileSettingsManager messageDestination]
  -[HMDCameraProfileSettingsManager localZone:didProcessModelDeletion:]
  -[HMDCameraProfileSettingsManager localZone:didProcessModelUpdate:]
  -[HMDCameraProfileSettingsManager localZone:didProcessModelCreation:]
  -[HMDCameraProfileSettingsManager currentSettings]
  -[HMDCameraProfileSettingsManager uniqueIdentifier]
  -[HMDCameraProfileSettingsManager start]
  -[HMDCameraProfileSettingsManager messageReceiveQueue]
  -[HMDCameraProfileSettingsManager msgDispatcher]
  -[HMDCameraProfileSettingsManager supportedFeatures]
  -[HMDCameraProfileSettingsManager setMsgDispatcher:]
  -[HMDCameraProfileSettingsManager isCameraManuallyDisabled]
  -[HMDCameraProfileSettingsManager manager:shouldShareWithUser:]
  -[HMDCameraProfileSettingsManager zoneManager:shouldRequestShareInvitationFromUser:]
  -[HMDCameraProfileSettingsManager zoneManagerDidStart:]
  -[HMDCameraProfileSettingsManager zoneManagerDidStop:]
  -[HMDCameraProfileSettingsManager featuresDataSource]
  -[HMDCameraProfileSettingsManager bulletinBoard]
  -[HMDCameraProfileSettingsManager isCurrentDeviceConfirmedPrimaryResident]
  -[HMDCameraProfileSettingsManager handleUserRemoteAccessDidChangeNotification:]
  -[HMDCameraProfileSettingsManager handleAccessoryConnectedNotification:]
  -[HMDCameraProfileSettingsManager setAnyUserAtHome:]
  -[HMDCameraProfileSettingsManager handlePrimaryResidentUpdatedNotification:]
  -[HMDCameraProfileSettingsManager hapAccessory]
  -[HMDCameraProfileSettingsManager setHapAccessory:]
  -[HMDCameraProfileSettingsManager isRecordingEnabled]
  -[HMDCameraProfileSettingsManager handleCharacteristicsValueUpdatedNotification:]
  -[HMDCameraProfileSettingsManager listener:didUpdateAvailableCharacteristics:]
  -[HMDCameraProfileSettingsManager characteristicsAvailabilityListener]
  -[HMDCameraProfileSettingsManager initWithHAPAccessory:workQueue:]
  -[HMDCameraProfileSettingsManager isAnyUserAtHome]
  -[HMDCameraProfileSettingsManager _handleUpdateAccessModeMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateRecordingTriggerEventsMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateAccessModeIndicatorEnabledMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateSnapshotsAllowedMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateNightVisionModeEnabledMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateRecordingAudioEnabledMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateActivityZonesMessage:]
  -[HMDCameraProfileSettingsManager _handleBulletinBoardNotificationCommitMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateAccessModeChangeNotificationEnabledMessage:]
  -[HMDCameraProfileSettingsManager _handleUpdateReachabilityEventNotificationEnabledMessage:]
  -[HMDCameraProfileSettingsManager handleHomePresenceEvaluatedNotification:]
  -[HMDCameraProfileSettingsManager handleRecordingManagementServiceDidUpdateNotification:]
  -[HMDCameraProfileSettingsManager handleBulletinNotificationEnableStateDidChangeNotification:]
  -[HMDCameraProfileSettingsManager initWithUniqueIdentifier:hapAccessory:workQueue:zoneManager:notificationCenter:bulletinBoard:characteristicsAvailabilityListener:featuresDataSource:accountManager:]
  -[HMDCameraProfileSettingsManager configureWithMessageDispatcher:adminMessageDispatcher:deviceIsResidentCapable:]
  -[HMDCameraProfileSettingsManager currentNotificationSettings]
  -[HMDCameraProfileSettingsManager currentSettingsModel]
  -[HMDCameraProfileSettingsManager defaultSettingsModel]
  -[HMDCameraProfileSettingsManager disableRecordingAccessModes]
  -[HMDCameraProfileSettingsManager _evaluateHomePresence]
  -[HMDCameraProfileSettingsManager _handleConnectedToAccessory]
  -[HMDCameraProfileSettingsManager derivedPropertiesModel]
  -[HMDCameraProfileSettingsManager _processingOptionsForMessage:]
  -[HMDCameraProfileSettingsManager _localZoneUpdateCompletionForMessage:]
  -[HMDCameraProfileSettingsManager _initializeNotificationSettingsUsingSettingsModel:]
  -[HMDCameraProfileSettingsManager _createNotificationSettingsUsingSettingsModel:]
  -[HMDCameraProfileSettingsManager _migrateNotificationSettings:]
  -[HMDCameraProfileSettingsManager _migrateSettingsModel:]
  -[HMDCameraProfileSettingsManager manuallyDisabledCharacteristic]
  -[HMDCameraProfileSettingsManager doorbellInputEventCharacteristic]
  -[HMDCameraProfileSettingsManager _isAnyUserAtHomeForPresence:]
  -[HMDCameraProfileSettingsManager _updateDerivedPropertiesModelWithSettingsModel:userInitiated:reason:]
  -[HMDCameraProfileSettingsManager _updatedDerivedPropertiesModelWithSettingsModel:userInitiated:didCreateModel:]
  -[HMDCameraProfileSettingsManager _populateCurrentAccessModeFieldForDerivedProperties:currentSettings:userInitiated:didUpdateField:]
  -[HMDCameraProfileSettingsManager _synchronizeAllSettingsToCamera]
  -[HMDCameraProfileSettingsManager _settingsModelForUpdate]
  -[HMDCameraProfileSettingsManager derivedPropertiesModelID]
  -[HMDCameraProfileSettingsManager _settingsFromSettingsModel:]
  -[HMDCameraProfileSettingsManager _payloadForSettings:]
  -[HMDCameraProfileSettingsManager _notifyClientsOfCurrentSettings]
  -[HMDCameraProfileSettingsManager _notifyClientsOfChangedSettingsModel:isInitialSettingsUpdate:]
  -[HMDCameraProfileSettingsManager _notifyClientsOfChangedSettings:isInitialSettingsUpdate:]
  -[HMDCameraProfileSettingsManager _updateNotificationSettings:forMessage:]
  -[HMDCameraProfileSettingsManager _handleCharacteristicWriteRequests:completion:]
  -[HMDCameraProfileSettingsManager _addWriteRequestToArray:forCharacteristicWithType:ofServiceWithType:value:]
  -[HMDCameraProfileSettingsManager _addNightVisionCharacteristicWriteRequestToArray:nightVisionEnabled:]
  -[HMDCameraProfileSettingsManager _addOperatingModeIndicatorCharacteristicWriteRequestToArray:accessModeIndicatorEnabled:]
  -[HMDCameraProfileSettingsManager _addPeriodicSnapshotsActiveCharacteristicWriteRequestToArray:periodicSnapshotsAllowed:]
  -[HMDCameraProfileSettingsManager _addSnapshotsActiveCharacteristicWriteRequestToArray:snapshotsAllowed:]
  -[HMDCameraProfileSettingsManager _addHomeKitCameraActiveCharacteristicWriteRequestToArray:currentAccessMode:]
  -[HMDCameraProfileSettingsManager _addAccessModeCharacteristicWriteRequestsToArray:currentAccessMode:]
  -[HMDCameraProfileSettingsManager _addRecordingAudioEnabledWriteRequestToArray:recordingAudioEnabled:]
  -[HMDCameraProfileSettingsManager _addVideoAnalysisActiveWriteRequestToArray:currentAccessMode:]
  -[HMDCameraProfileSettingsManager _shouldQueryCanEnableRecordingForAccessMode:currentSettings:]
  -[HMDCameraProfileSettingsManager _shouldQueryCanDisableRecordingForAccessMode:isAtHome:currentSettings:]
  -[HMDCameraProfileSettingsManager _coordinateSmartBulletinNotificationWithServiceBulletinNotification:]
  -[HMDCameraProfileSettingsManager _setManuallyDisabledCharacteristicNotificationsEnabled:]
  -[HMDCameraProfileSettingsManager _enablePackageNotificationsOnSettings:]
  -[HMDCameraProfileSettingsManager canRevealCurrentAccessMode]
  -[HMDCameraProfileSettingsManager _handleModelUpdate:previousModel:]
  -[HMDCameraProfileSettingsManager _handleUpdatedDerivedProperties:previousProperties:]
  -[HMDCameraProfileSettingsManager _updateDerivedPropertiesOnSettingsModel:]
  -[HMDCameraProfileSettingsManager _handleUpdatedSettings:previousSettings:]


HMDRemoteLoginReceiver : HMDRemoteLoginBase <HMDRemoteLoginReceiverAuthenticationDelegate>
 @property  HMDRemoteLoginReceiverSession *loginSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginReceiver logCategory]

  // instance methods
  -[HMDRemoteLoginReceiver .cxx_destruct]
  -[HMDRemoteLoginReceiver registerForNotifications]
  -[HMDRemoteLoginReceiver registerForMessages]
  -[HMDRemoteLoginReceiver configureWithWorkQueue:messageDispatcher:]
  -[HMDRemoteLoginReceiver loginSession]
  -[HMDRemoteLoginReceiver setLoginSession:]
  -[HMDRemoteLoginReceiver didCompleteAuthentication:response:]
  -[HMDRemoteLoginReceiver _handleCompanionAuthenticationRequest:]
  -[HMDRemoteLoginReceiver _handleProxyDeviceRequest:]
  -[HMDRemoteLoginReceiver _handleProxyAuthenticationRequest:]
  -[HMDRemoteLoginReceiver _handleSignoutRequest:]
  -[HMDRemoteLoginReceiver _handleACAccountDidChangeNotification:]
  -[HMDRemoteLoginReceiver _authenticate:message:]
  -[HMDRemoteLoginReceiver auditLoggedInAccount]
  -[HMDRemoteLoginReceiver auditLoggedInAccountFor:]
  -[HMDRemoteLoginReceiver _auditLoggedInAccountFor:]
  -[HMDRemoteLoginReceiver _callCompletion:]


HMDRemoteEventRouterClientRetryIntervals : NSObject <HMETimerIntervalProvider>
 @property  NSArray *intervals
 @property  long long currentIndex

  // class methods
  +[HMDRemoteEventRouterClientRetryIntervals retryIntervalsForResidentClient]

  // instance methods
  -[HMDRemoteEventRouterClientRetryIntervals currentIndex]
  -[HMDRemoteEventRouterClientRetryIntervals intervals]
  -[HMDRemoteEventRouterClientRetryIntervals reset]
  -[HMDRemoteEventRouterClientRetryIntervals .cxx_destruct]
  -[HMDRemoteEventRouterClientRetryIntervals setCurrentIndex:]
  -[HMDRemoteEventRouterClientRetryIntervals init]
  -[HMDRemoteEventRouterClientRetryIntervals nextInterval]
  -[HMDRemoteEventRouterClientRetryIntervals initWithIntervals:]


HMDAccessorySettingsMessenger : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDMessageRouter> *messageRouter
 @property  HMDAccessorySettingsLocalMessageHandler *messageHandler
 @property  HMDAccessorySettingsLegacyMessageReceiver *legacyMessageReceiver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessorySettingsMessenger logCategory]

  // instance methods
  -[HMDAccessorySettingsMessenger logIdentifier]
  -[HMDAccessorySettingsMessenger messageHandler]
  -[HMDAccessorySettingsMessenger .cxx_destruct]
  -[HMDAccessorySettingsMessenger messageTargetUUID]
  -[HMDAccessorySettingsMessenger messageDispatcher]
  -[HMDAccessorySettingsMessenger sendFetchAccessorySettingsRequestWithAccessoryUUID:keyPaths:completionHandler:]
  -[HMDAccessorySettingsMessenger sendUpdateAccessorySettingRequestWithAccessoryUUID:keyPath:settingValue:completionHandler:]
  -[HMDAccessorySettingsMessenger routeAccessorySettingsFetchRequestMessage:]
  -[HMDAccessorySettingsMessenger routeAccessorySettingsUpdateRequestMessage:]
  -[HMDAccessorySettingsMessenger registerForMessagesWithHome:]
  -[HMDAccessorySettingsMessenger messageRouter]
  -[HMDAccessorySettingsMessenger initWithMessageTargetUUID:messageDispatcher:messageRouter:messageHandler:legacyMessageReceiver:]
  -[HMDAccessorySettingsMessenger legacyMessageForMessage:]
  -[HMDAccessorySettingsMessenger legacyMessageReceiver]


HMDRapportDeviceClientWrapper : NSObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRapportDeviceClientWrapper logCategory]

  // instance methods
  -[HMDRapportDeviceClientWrapper initWithClient:]
  -[HMDRapportDeviceClientWrapper activateWithCompletion:]
  -[HMDRapportDeviceClientWrapper .cxx_destruct]
  -[HMDRapportDeviceClientWrapper invalidate]
  -[HMDRapportDeviceClientWrapper sendRequestID:request:options:responseHandler:]
  -[HMDRapportDeviceClientWrapper _queueRequestID:request:options:responseHandler:]
  -[HMDRapportDeviceClientWrapper _completeQueuedRequestsWithError:]


HMDWatchConfiguration : HMFObject
 @property  NSString *uniqueId
 @property  NSDictionary *metadataConfig
 @property  NSDictionary *homeConfig
 @property  NSUUID *primaryHome

  // instance methods
  -[HMDWatchConfiguration setUniqueId:]
  -[HMDWatchConfiguration .cxx_destruct]
  -[HMDWatchConfiguration uniqueId]
  -[HMDWatchConfiguration primaryHome]
  -[HMDWatchConfiguration setPrimaryHome:]
  -[HMDWatchConfiguration initWithUniqueID:]
  -[HMDWatchConfiguration setHomeConfiguration:]
  -[HMDWatchConfiguration setConfigVersion:forHome:]
  -[HMDWatchConfiguration metadataConfig]
  -[HMDWatchConfiguration setMetadataConfig:]
  -[HMDWatchConfiguration homeConfig]
  -[HMDWatchConfiguration setHomeConfig:]


HMDWatchSyncState : HMFObject
 @property  NSString *deviceId
 @property  NSString *identifier
 @property  HMDWatchSync *currentSync
 @property  HMDPairedSync *pairedSync

  // class methods
  +[HMDWatchSyncState isNewBetter:present:]

  // instance methods
  -[HMDWatchSyncState deviceId]
  -[HMDWatchSyncState identifier]
  -[HMDWatchSyncState dealloc]
  -[HMDWatchSyncState .cxx_destruct]
  -[HMDWatchSyncState initWithDeviceId:pairedSync:]
  -[HMDWatchSyncState currentSync]
  -[HMDWatchSyncState addNewSync:]
  -[HMDWatchSyncState removeSync]
  -[HMDWatchSyncState pairedSync]


HMDUserPushCache : HMFObject
 @property  HMDDevice *device
 @property  NSDate *expirationDate
 @property  BOOL expired

  // instance methods
  -[HMDUserPushCache expirationDate]
  -[HMDUserPushCache setExpirationDate:]
  -[HMDUserPushCache .cxx_destruct]
  -[HMDUserPushCache device]
  -[HMDUserPushCache isExpired]
  -[HMDUserPushCache initWithDevice:]
  -[HMDUserPushCache init]


HMDHomeManager : HMFObject <HMDSiriEndpointProfileMessageHandlerDataSource, HMDSiriEndpointOnboardingManagerDataSource, HMDMultiUserSettingsMetricsEventDispatcherDataSource, HMDBiomeMigrationManagerDataSource, HMDBiomeLogEventObserverDataSource, HMDCapabilitiesControllerDataSource, HMDCloudManagerDelegate, HMDCompositeSettingsControllerManagerDataSource, HMDDeviceSetupSessionDelegate, HMDDuetPredictionSubscriberDataSource, HMDMicroLocationLogEventObserverDataSource, HMDMobileAssetManagerDelegate, HMDMultiUserStatusControllerDelegate, HMDSiriEndpointSettingsSyncManagerDataSource, HMDSyncOperationManagerDataSource, HMDMediaGroupParticipantLocalDataStorageDataSource, HMDXPCEventRouterServerDataSource, HMEDelegatingEventRouterDataSource, HMEMemoryEventBusDataSource, HMFMessageReceiver, HMFLogging, HMDAccessoryBrowserManagerDelegate, HMFTimerDelegate, HAPFragmentationStreamDelegate, HMDPairedSyncDelegate, HMFNetMonitorDelegate, HMDIDSServerBagDelegate, HMDUserManagementOperationDelegate, HMDBackingStoreObjectProtocol>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *homeUUIDsWithAutoAddWalletKeySuppressed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  HMFTimer *debounceHomesUpdateTimer
 @property  HMFTimer *periodicMobileCatalogUpdateTimer
 @property  HMFTimer *memoryMonitorLogEventTimer
 @property  HMFTimer *messagingCounterLoggingTimer
 @property  unsigned long generationCounter
 @property  unsigned long stateHandle
 @property  NSMutableSet *pendingHomesBeingRemoved
 @property  HMDCompanionManager *companionManager
 @property  BOOL residentEnabled
 @property  BOOL pcsEnabled
 @property  long long residentEnabledState
 @property  BOOL accessAllowedWhenLocked
 @property  BOOL cacheUseAllowed
 @property  NSMutableDictionary *userPushCacheMap
 @property  NSMutableArray *deviceSetupSessions
 @property  NSMutableArray *accessorySetupMetricDispatchers
 @property  NSDictionary *demoAccessories
 @property  BOOL speakersAreConfigured
 @property  BOOL speakersAreConfiguredInOwnedHomes
 @property  <HMDarwinNotificationProvider> *darwinNotificationProvider
 @property  NSNotificationCenter *notificationCenter
 @property  HMDRemoteAccountManager *remoteAccountManager
 @property  NSMutableSet *unprocessedOperationModelIdentifiers
 @property  HMDAssistantGather *gatherer
 @property  HMDUserCloudShareManager *userCloudShareManager
 @property  HMDMultiUserStatusController *multiUserStatusController
 @property  HMDCloudManagerDataSource *cloudDataSource
 @property  HMDAccessorySetupCoordinator *accessorySetupCoordinator
 @property  HMDMemoryUtilizationTracker *memoryTracker
 @property  HMDCameraRecordingLoadBalancer *cameraLoadBalancer
 @property  HMDBonjourBrowserHelper *bonjourBrowser
 @property  HMDDuetPredictionSubscriber *duetSubscriber
 @property  HMDAWDLogEventObserver *awdLogEventObserver
 @property  HMDBiomeLogEventObserver *biomeLogEventObserver
 @property  HMDMicroLocationLogEventObserver *microLocationLogEventObserver
 @property  HMDMicroLocationManager *microLocationManager
 @property  NSMutableSet *activeConnections
 @property  id browseAssertion
 @property  NSDate *hapMetricsLastSubmissionDate
 @property  NSDate *bonjourBrowserHelperLastCompletionDate
 @property  NSDate *eventAggregationAnalysisLogDate
 @property  NSDate *homeConfigurationLogDate
 @property  HMEDelegatingEventRouter *registrationForwardingEventRouter
 @property  HMEMemoryEventBus *memoryEventRouter
 @property  HMDXPCEventRouterServer *eventRouterXPCServer
 @property  HMDRemoteEventRouterAssertionController *eventRouterAssertionController
 @property  HMDSiriEndpointSettingsSyncManager *siriEndPointSettingsSyncManager
 @property  NSUUID *currentHomeUUIDOverride
 @property  HMFBoolean *overrideCurrentHomeUUIDToNil
 @property  HMDMultiUserSettingsMetricsEventDispatcher *multiUserSettingsMetricEventDispatcher
 @property  BOOL missingHomeDataRecord
 @property  BOOL homeDataLoadInProgress
 @property  NSUUID *lastRemovedCurrentAccessoryUUID
 @property  HMDIDSFirewallManager *idsFirewallManager
 @property  HMFNetMonitor *cloudReachabilityMonitor
 @property  HMDWidgetTimelineRefresher *widgetTimelineRefresher
 @property  HMFTimer *debounceGenerationCounterUpdateTimer
 @property  <HAPKeyStore> *hapKeyStore
 @property  <HMDDatabase> *defaultDatabase
 @property  HMDHomeManagerObjectChangeHandler *homeManagerObjectChangeHandler
 @property  NSUUID *uuid
 @property  NSArray *homes
 @property  BOOL homeManagerZoneFirstFetch
 @property  NSMutableArray *cloudZones
 @property  NSMutableArray *uuidsOfRemovedHomes
 @property  NSUUID *primaryHomeUUID
 @property  NSUUID *currentHomeUUID
 @property  NSUUID *lastCurrentHomeUUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSObject<OS_dispatch_queue> *sysdiagnoseQueue
 @property  HMDMessageDispatcher *messageDispatcher
 @property  <HMDAccessoryBrowserProtocol> *accessoryBrowser
 @property  NSMutableSet *unassociatedRemotePeers
 @property  NSMutableDictionary *associatedRemotePeers
 @property  NSMutableSet *fullSyncedWatchPeers
 @property  NSMutableDictionary *associatedWatchPeers
 @property  NSMutableDictionary *watchSyncStateMap
 @property  NSMutableDictionary *watchSyncRetryContextBySyncIdentifier
 @property  NSMapTable *watchSyncRetryContextByRetryTimer
 @property  HMDPairedSync *pairedSync
 @property  int generationCounterToken
 @property  unsigned long assistantGenerationCounter
 @property  HMDNameValidator *nameValidator
 @property  NSObject<OS_dispatch_source> *accessoryFinderTimer
 @property  NSMutableArray *pendingResponsesForAccessoryFinder
 @property  HMDPowerManager *powerManager
 @property  HMDCloudManager *cloudDataSyncManager
 @property  HMFActivity *setupActivity
 @property  double setupStartTimestamp
 @property  unsigned long homepodSetupRetryCount
 @property  HMDWatchManager *watchManager
 @property  HMDBackingStore *backingStore
 @property  NSUUID *dataTag
 @property  NSMutableDictionary *pendingDataSyncAcks
 @property  NSMutableDictionary *pendingRemoteSessions
 @property  NSMutableSet *pendingResidentSetupSessions
 @property  HMDMessageFilterChain *msgFilterChain
 @property  NSMutableSet *dialogCancelationContexts
 @property  HMDIdentityRegistry *identityRegistry
 @property  BOOL accountActive
 @property  BOOL accountStatusFailedDueToNetworkFailure
 @property  BOOL backOffOperationInProgress
 @property  unsigned long cloudOperationRetryCount
 @property  BOOL uploadToCloudIsPending
 @property  BOOL uploadHomeDataToCloud
 @property  BOOL forceFetchHomeManagerZone
 @property  BOOL lastAnswerForShouldCloudSyncData
 @property  NSObject<OS_dispatch_source> *cloudOperationRetryTimer
 @property  HMDCloudDataSyncStateFilter *cloudDataSyncStateFilter
 @property  BOOL uploadMetadataToCloud
 @property  HMDAppleAccountManager *appleAccountManager
 @property  HMDLocation *locationHandler
 @property  HMDFMFHandler *fmfHandler
 @property  HMDAccountRegistry *accountRegistry
 @property  HMFDumpCategory *dumpCategory
 @property  NSMutableArray *incomingInvitations
 @property  BOOL ignoreFirstTimeReachabilityChanged
 @property  HMDDevice *companionDevice
 @property  BOOL companionReachable
 @property  HMDClientConnection *clientConnection
 @property  NSObject<OS_dispatch_queue> *clientConnectionQueue
 @property  BOOL accountStatusIsAuthenticated
 @property  HMFTimer *remoteAccessHealthMonitorTimer
 @property  unsigned short nextRequestTransactionIdentifier
 @property  NSMutableDictionary *pendingFragmentationStream
 @property  BOOL homeDataLoadedFromArchive
 @property  HMFTimer *watchPushDelayTimer
 @property  HMFTimer *sharedHomesPushDelayTimer
 @property  BOOL cloudkitAccountStatusDetermined
 @property  BOOL needToCleanUpKeys
 @property  BOOL zoneFetchFailed
 @property  HMDApplicationData *appData
 @property  HMDResidentMesh *residentMesh
 @property  NSUserDefaults *userDefaults
 @property  HMDKeyTransferAgent *keyTransferAgent
 @property  HMDAccessorySetupManager *accessorySetupManager
 @property  HMDHH2FrameworkSwitch *hh2FrameworkSwitch
 @property  BOOL switchingToHH2AsSharedUser
 @property  HMDHH2AutoMigrationMonitor *hh2AutoMigrationMonitor
 @property  HMDHH2AutoMigrationEligibilityChecker *hh2AutoMigrationEligibilityChecker
 @property  HMDSiriEndpointOnboardingManager *siriEndpointOnboardingManager
 @property  BOOL hh2MigrationInProgress
 @property  HMDSyncOperationManager *syncManager
 @property  HMDCloudAccount *cloudAccount
 @property  HMDAppleAccessoryPairingController *legacyAccessoryPairingController
 @property  unsigned long siriSyncNotificationTime
 @property  NSMutableArray *siriSyncNotificationReasons
 @property  HMDAccessoryFirmwareUpdateManager *accessoryFirmwareUpdateManager
 @property  HMDLogEventDispatcher *logEventDispatcher
 @property  HMFTimer *debounceRegenerateAssistantSyncDataTimer
 @property  HMDBiomeEventManager *biomeEventManager
 @property  HMDAccessoryBrowser *accessoryBrowserInternal
 @property  HMELastEventStore *lastEventStore
 @property  HMDLastEventStoreController *lastEventStoreController
 @property  HMDMobileAssetManager *mobileAssetManager
 @property  HMDMediaGroupParticipantLocalDataStorage *mediaGroupParticipantDataLocalStorage
 @property  NSMapTable *homeUUIDsByWalletKeyAssertionXPCConnection
 @property  HMDIDSServerBag *idsServerBag
 @property  BOOL assistantIdentifierChanged
 @property  HMFNetMonitor *reachabilityMonitor
 @property  HMDSoftwareUpdateManager *softwareUpdateManager
 @property  HMDWidgetConfigurationReader *widgetConfigurationReader
 @property  unsigned long status
 @property  BOOL active
 @property  NSString *currentEventSource
 @property  HMDCompositeSettingsControllerManager *compositeSettingsControllerManager
 @property  HMDCHIPDataSource *chipDataSource
 @property  HMDCapabilitiesController *capabilitiesController
 @property  HMDHomeManagerObjectLookup *lookup
 @property  BOOL dataSyncInProgress
 @property  BOOL isResidentCapable
 @property  BOOL isResidentEnabled
 @property  unsigned long homeDatabaseSize
 @property  BOOL networkConnectionAvailable
 @property  BOOL demoFinalized
 @property  HMDDuetEventManager *duetEventManger
 @property  HMDMetricsManager *metricsManager
 @property  HMFFuture *startupCompleted
 @property  <HMDCompositeSettingsSiriEndpointProfileBridge> *siriEndpointBridge
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL legacyZoneHasRecordsAvaliable
 @property  BOOL isCloudAccountActive
 @property  BOOL isNetworkConnectionAvailable
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDHomeManager logCategory]
  +[HMDHomeManager saveAccessoryCache:forIdentifier:]
  +[HMDHomeManager removeAccessoryCacheForIdentifier:]
  +[HMDHomeManager _eraseAllAccessoryKeysAndIdentifiers]
  +[HMDHomeManager relaunchHomedDueToResetConfigurationWithDelay:]
  +[HMDHomeManager getContainersToCleanUp]
  +[HMDHomeManager getAccessoryCacheForIdentifer:]
  +[HMDHomeManager convertSaveReasonToTransationReason:]
  +[HMDHomeManager doesSaveReasonAffectHomeManager:]
  +[HMDHomeManager doesSaveReasonAffectOnlyLocalData:]
  +[HMDHomeManager doesSaveReasonRequireForceSyncToWatch:]
  +[HMDHomeManager shouldIncrementGenerationCounterForReason:]
  +[HMDHomeManager shouldIgnoreExpectedConfigurationVersionUpdateForReason:]
  +[HMDHomeManager doesSaveReasonNotAffectLocalData:]
  +[HMDHomeManager legacyDataSizeLimit]
  +[HMDHomeManager getUniqueDeviceIdSalt]
  +[HMDHomeManager deriveIntentGroupIdentifierFromBaseUUID:]
  +[HMDHomeManager _getIntentGroupClientIdentifierSalt]
  +[HMDHomeManager createIdentifierSalt:deviceSpecific:]
  +[HMDHomeManager saltForDeviceSpecificIdentifier]
  +[HMDHomeManager isThisDeviceAdminOfHome:]
  +[HMDHomeManager remotePeerDeviceAddress:]
  +[HMDHomeManager getAllBackingStoreObjects:primaryHomeUUID:cloudZone:appData:]
  +[HMDHomeManager emptyModelObjectWithChangeType:homeManagerUUID:]

  // instance methods
  -[HMDHomeManager homes]
  -[HMDHomeManager notificationCenter]
  -[HMDHomeManager upstreamTopicsForTopic:]
  -[HMDHomeManager stateHandle]
  -[HMDHomeManager eventStoreReadHandle]
  -[HMDHomeManager eventStoreWriteHandle]
  -[HMDHomeManager timerDidFire:]
  -[HMDHomeManager clientConnection]
  -[HMDHomeManager userDefaults]
  -[HMDHomeManager setPowerManager:]
  -[HMDHomeManager powerManager]
  -[HMDHomeManager setClientConnection:]
  -[HMDHomeManager workQueue]
  -[HMDHomeManager lookup]
  -[HMDHomeManager setWorkQueue:]
  -[HMDHomeManager status]
  -[HMDHomeManager activeConnections]
  -[HMDHomeManager dealloc]
  -[HMDHomeManager isActive]
  -[HMDHomeManager setStateHandle:]
  -[HMDHomeManager uuid]
  -[HMDHomeManager expandedTopicsForTopics:]
  -[HMDHomeManager .cxx_destruct]
  -[HMDHomeManager clientConnectionQueue]
  -[HMDHomeManager setUuid:]
  -[HMDHomeManager messageTargetUUID]
  -[HMDHomeManager defaultDatabase]
  -[HMDHomeManager incomingInvitations]
  -[HMDHomeManager messageDestination]
  -[HMDHomeManager registerStateHandler]
  -[HMDHomeManager getOrCreateLocalPairingIdentity:]
  -[HMDHomeManager hh2FrameworkSwitch]
  -[HMDHomeManager setClientConnectionQueue:]
  -[HMDHomeManager setBackingStore:]
  -[HMDHomeManager invalidate]
  -[HMDHomeManager _fetchAllZones:]
  -[HMDHomeManager backingStore]
  -[HMDHomeManager messageReceiveQueue]
  -[HMDHomeManager startWithCompletionHandler:]
  -[HMDHomeManager syncManager]
  -[HMDHomeManager messageDispatcher]
  -[HMDHomeManager _handleSignificantTimeChange]
  -[HMDHomeManager init]
  -[HMDHomeManager generationCounter]
  -[HMDHomeManager companionDevice]
  -[HMDHomeManager _currentHome]
  -[HMDHomeManager setupSession:didCloseWithError:]
  -[HMDHomeManager isResidentCapable]
  -[HMDHomeManager _registerForMessages]
  -[HMDHomeManager accessoryWithUUID:]
  -[HMDHomeManager lastEventStore]
  -[HMDHomeManager setHh2MigrationInProgress:]
  -[HMDHomeManager isHH2MigrationInProgress]
  -[HMDHomeManager isDataSyncInProgress]
  -[HMDHomeManager isAccessAllowedWhenLocked]
  -[HMDHomeManager setAccessAllowedWhenLocked:]
  -[HMDHomeManager _homeWithUUID:]
  -[HMDHomeManager lastRemovedCurrentAccessoryUUID]
  -[HMDHomeManager darwinNotificationProvider]
  -[HMDHomeManager setGenerationCounter:]
  -[HMDHomeManager userCloudShareManager]
  -[HMDHomeManager accessorySetupCoordinator]
  -[HMDHomeManager delegatingRouter:filteredTopics:forRouter:]
  -[HMDHomeManager delegatingRouter:upstreamTopicsFor:]
  -[HMDHomeManager networkMonitorIsReachable:]
  -[HMDHomeManager networkMonitorIsUnreachable:]
  -[HMDHomeManager reachabilityMonitor]
  -[HMDHomeManager setAppData:]
  -[HMDHomeManager appData]
  -[HMDHomeManager cloudAccount]
  -[HMDHomeManager setHomes:]
  -[HMDHomeManager setDefaultDatabase:]
  -[HMDHomeManager fragmentationStream:didReceiveData:transactionIdentifier:error:]
  -[HMDHomeManager fragmentationStream:didCloseWithError:]
  -[HMDHomeManager registerForSignificantTimeChangeNotification]
  -[HMDHomeManager deregisterForSignificantTimeChangeNotification]
  -[HMDHomeManager transactionObjectUpdated:newValues:message:]
  -[HMDHomeManager transactionObjectRemoved:message:]
  -[HMDHomeManager modelObjectWithChangeType:version:]
  -[HMDHomeManager modelObjectWithChangeType:]
  -[HMDHomeManager backingStoreObjects:]
  -[HMDHomeManager cameraLoadBalancer]
  -[HMDHomeManager handleRemoteUserClientCloudShareRequest:]
  -[HMDHomeManager handleRemoteUserClientCloudShareRepairRequest:]
  -[HMDHomeManager setMessageDispatcher:]
  -[HMDHomeManager metricsManager]
  -[HMDHomeManager accessoryBrowser]
  -[HMDHomeManager cloudDataSyncManager]
  -[HMDHomeManager setCloudDataSyncManager:]
  -[HMDHomeManager _handleSetAppData:]
  -[HMDHomeManager localAndRemoteSubscriptionProvider]
  -[HMDHomeManager eventForwarder]
  -[HMDHomeManager userManagementOperationDidFinish:]
  -[HMDHomeManager companionReachable]
  -[HMDHomeManager saveWithReason:information:postSyncNotification:]
  -[HMDHomeManager mediaSystemForAppleMediaAccessory:]
  -[HMDHomeManager evaluateIfMediaPlaybackStateChanged:]
  -[HMDHomeManager _processTestModeHomeLocationStatusOverride:]
  -[HMDHomeManager _processTestModeHomeAccessControlOverride:]
  -[HMDHomeManager _handleTestModeConfigRequest:]
  -[HMDHomeManager isResidentEnabled]
  -[HMDHomeManager biomeEventManager]
  -[HMDHomeManager logEventDispatcher]
  -[HMDHomeManager idsServerBagDidUpdate:]
  -[HMDHomeManager idsServerBag]
  -[HMDHomeManager watchManager]
  -[HMDHomeManager appleAccountManager]
  -[HMDHomeManager remoteAccountManager]
  -[HMDHomeManager accountAvailabilityChanged:]
  -[HMDHomeManager needsOnboardingForHomeUUID:accessoryUUID:]
  -[HMDHomeManager setNeedsOnboardingCompleteWitHomeUUID:accessoryUUID:completion:]
  -[HMDHomeManager applyOnboardingSelections:accessoryUUID:homeUUID:completion:]
  -[HMDHomeManager accessoryWithHomeUUID:accessoryUUID:]
  -[HMDHomeManager siriEndpointOnboardingManagerForSiriEndpointProfileMessageHandler:]
  -[HMDHomeManager hubAccessoriesWithHomeUUID:forSiriEndpointProfileMessageHandler:]
  -[HMDHomeManager legacyZoneHasRecordsAvaliable]
  -[HMDHomeManager setAccountActive:]
  -[HMDHomeManager _handleControllerKeyAvailable]
  -[HMDHomeManager accountActive]
  -[HMDHomeManager cloudDataSyncStateFilter]
  -[HMDHomeManager setCloudDataSyncStateFilter:]
  -[HMDHomeManager notifyClientsOfConfigurationChangeWithReason:source:shouldFetch:]
  -[HMDHomeManager accountRegistry]
  -[HMDHomeManager _legacyContainer]
  -[HMDHomeManager _legacyHomeZoneIDFromHomeUUID:]
  -[HMDHomeManager _legacyHomeAcceptedZoneIDFromHomeUUID:]
  -[HMDHomeManager _queryLegacyHomeAndAcceptedZoneExists:completion:]
  -[HMDHomeManager _maybeCreateLegacyHomeAcceptedZone:]
  -[HMDHomeManager handleAutoAddWalletKeySupressionAssertionAcquireMessage:]
  -[HMDHomeManager handleAutoAddWalletKeySupressionAssertionReleaseMessage:]
  -[HMDHomeManager configureForWalletKey]
  -[HMDHomeManager addWalletKeyWithHomeUUID:reason:]
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressedSync]
  -[HMDHomeManager handleWalletKeyAssertionsXPCConnectionRemoved:]
  -[HMDHomeManager homeUUIDsWithAutoAddWalletKeySuppressed]
  -[HMDHomeManager removeHomeWalletKeysExcludingSerialNumbers:]
  -[HMDHomeManager autoAddWalletKeysOncePerDeviceSetup]
  -[HMDHomeManager primaryHomeUUID]
  -[HMDHomeManager lastCurrentHomeUUID]
  -[HMDHomeManager dataTag]
  -[HMDHomeManager cloudZones]
  -[HMDHomeManager residentEnabledState]
  -[HMDHomeManager demoAccessories]
  -[HMDHomeManager demoFinalized]
  -[HMDHomeManager setPrimaryHomeUUID:]
  -[HMDHomeManager setLastCurrentHomeUUID:]
  -[HMDHomeManager setDataTag:]
  -[HMDHomeManager setCloudZones:]
  -[HMDHomeManager setIncomingInvitations:]
  -[HMDHomeManager setResidentEnabledState:]
  -[HMDHomeManager setDemoAccessories:]
  -[HMDHomeManager sendSecureMessage:target:userID:destination:responseQueue:responseHandler:]
  -[HMDHomeManager removeHome:]
  -[HMDHomeManager addName:namespace:]
  -[HMDHomeManager removeName:namespace:]
  -[HMDHomeManager replaceName:withNewName:inNamespaces:]
  -[HMDHomeManager setupStartTimestamp]
  -[HMDHomeManager setSetupStartTimestamp:]
  -[HMDHomeManager setupActivity]
  -[HMDHomeManager setSetupActivity:]
  -[HMDHomeManager mediaGroupParticipantDataLocalStorage]
  -[HMDHomeManager currentAccessoryUUID]
  -[HMDHomeManager keyTransferAgent]
  -[HMDHomeManager _sendAssistantTeamIdentifierToWatches:]
  -[HMDHomeManager __generateAssistantTeamIdentifier]
  -[HMDHomeManager _getAssistantHashingData]
  -[HMDHomeManager _saveAssistantHashingData:]
  -[HMDHomeManager _setAssistantHashingData:]
  -[HMDHomeManager _setHomekitAssistantConfigurationVersion:]
  -[HMDHomeManager _setHomekitAssistantNumEntities:]
  -[HMDHomeManager __setLastSyncedAssistantConfigurationVersion:]
  -[HMDHomeManager _incrementAssistantGenerationCounter]
  -[HMDHomeManager _writeSyncDataCache]
  -[HMDHomeManager _generateAssistantSyncDataAndIncrementVersion:requestSync:urgent:completion:]
  -[HMDHomeManager _assistantSyncDataChanged:]
  -[HMDHomeManager _setAssistantSyncRequest:]
  -[HMDHomeManager _resetSiriSyncNotification]
  -[HMDHomeManager writeAssistantCurrentHome:]
  -[HMDHomeManager _handleAssistantTeamIdentifierChanged:]
  -[HMDHomeManager _handleAssistantSyncDataRequest:]
  -[HMDHomeManager accessoryFirmwareUpdateManager]
  -[HMDHomeManager waitForHH2SentinelZoneToBeRemoved]
  -[HMDHomeManager setCompanionReachable:]
  -[HMDHomeManager multiUserSettingsForMultiUserSettingsMetricsEventDispatcherDataSource]
  -[HMDHomeManager pairedAccessories]
  -[HMDHomeManager currentHomeUUID]
  -[HMDHomeManager setCurrentHomeUUID:]
  -[HMDHomeManager _processTestModeSkipHH2MigrationOverride:]
  -[HMDHomeManager chipDataSource]
  -[HMDHomeManager isPairedWithWatch]
  -[HMDHomeManager pairedSyncDidStart:]
  -[HMDHomeManager _handleResetConfiguration:]
  -[HMDHomeManager _eraseConfiguration:completionHandler:]
  -[HMDHomeManager _eraseLocalHomeConfigurationWithReason:]
  -[HMDHomeManager _eraseLocalHomeConfiguration]
  -[HMDHomeManager _eraseLocalHomeConfigurationAfterSignOut]
  -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:completionQueue:completion:]
  -[HMDHomeManager _eraseLocalHomeConfigurationAndDeleteMetadata:reason:completionQueue:completion:]
  -[HMDHomeManager _eraseLocalMetadata]
  -[HMDHomeManager deleteZonesFromLegacyAndCameraContainers]
  -[HMDHomeManager deleteAllZonesFromContainer:]
  -[HMDHomeManager deleteLocalZone:localDatabase:containerID:]
  -[HMDHomeManager createCloudDatabaseAndPerformInitialSync:]
  -[HMDHomeManager sendFragmentedMessageForData:objectUUID:withMessageName:toUser:destination:completionHandler:]
  -[HMDHomeManager handleDataFragmentedSync:]
  -[HMDHomeManager _fragmentationStream:didCloseWithError:]
  -[HMDHomeManager _fragmentationStream:didReceiveData:transactionIdentifier:error:]
  -[HMDHomeManager _sendFragmentedMessage:messageIndex:messageIdentity:userID:destination:completionHandler:]
  -[HMDHomeManager _handlePairingIdentityRequest:]
  -[HMDHomeManager pairedSync]
  -[HMDHomeManager cloudHomeSettingsUpdated:]
  -[HMDHomeManager __handleDeviceCapabilitiesUpdated:]
  -[HMDHomeManager __handleUpdatedCurrentDevice:]
  -[HMDHomeManager _handleCurrentAccessoryRemovedNotification:]
  -[HMDHomeManager _handleCurrentAccessoryAddedNotification:]
  -[HMDHomeManager _handleHH2SentinelZonePresent:]
  -[HMDHomeManager handleAccountSettingsUpdate:]
  -[HMDHomeManager __handleWatchConnected:]
  -[HMDHomeManager __handleWatchDisconnected:]
  -[HMDHomeManager __handleCompanionUpdated:]
  -[HMDHomeManager __handleAddedXPCConnection:]
  -[HMDHomeManager __handleRemovedXPCConnection:]
  -[HMDHomeManager __handleXPCConnectionStateChange:]
  -[HMDHomeManager handleHomeCurrentDeviceResidentEligibleNotification:]
  -[HMDHomeManager handleContactStoreChanged:]
  -[HMDHomeManager __handleActiveAssertion:]
  -[HMDHomeManager _handleRequestFetchHomeConfiguration:]
  -[HMDHomeManager _handleRequestRemoveHome:]
  -[HMDHomeManager _handleRequestAddHome:]
  -[HMDHomeManager _handleRequestSetPrimaryHome:]
  -[HMDHomeManager _handleRequestIsUserUsingHomeKit:]
  -[HMDHomeManager _handleAccessHomeInvite:]
  -[HMDHomeManager _handleAddRemoteAccessRequest:]
  -[HMDHomeManager _handleDoYouSeeUnpairedAccessories:]
  -[HMDHomeManager _handleAreYouAtHome:]
  -[HMDHomeManager _handleEnableResidentForThisDeviceRequest:]
  -[HMDHomeManager _handleDismissBulletinRequest:]
  -[HMDHomeManager _handleDismissDialogRequest:]
  -[HMDHomeManager _handleAccessAllowedWhenLockedRequest:]
  -[HMDHomeManager _handleHomeDataSync:]
  -[HMDHomeManager _handleUserRemoved:]
  -[HMDHomeManager _handleResetHome:]
  -[HMDHomeManager _handleCompanionKeysSync:]
  -[HMDHomeManager _handleHomesConfigSync:]
  -[HMDHomeManager _handleCurrentHomeChanged:]
  -[HMDHomeManager _handleMetadataSync:]
  -[HMDHomeManager _handleHomeManagerSyncWalletKeysPassSerialNumbersMessage:]
  -[HMDHomeManager _handleRequestForCompanionKeysSync:]
  -[HMDHomeManager _handleRetrieveVendorIdentifier:]
  -[HMDHomeManager _handleShouldDisplayiCloudSwitch:]
  -[HMDHomeManager _handleQueryiCloudSwitchState:]
  -[HMDHomeManager _handleUpdateiCloudSwitchState:]
  -[HMDHomeManager _handleQueryHomeNamespace:]
  -[HMDHomeManager _handleRemoteSessionTornDown:]
  -[HMDHomeManager _handleQueryMetadata:]
  -[HMDHomeManager _handleSetMetadata:]
  -[HMDHomeManager _handleQueryVersionInformation:]
  -[HMDHomeManager _handleDumpState:]
  -[HMDHomeManager _handleDeleteDuetEvent:]
  -[HMDHomeManager _handleRequestToUpdateHomeInvitationFromLocalUser:]
  -[HMDHomeManager _handleRequestToUpdateHomeInvitationFromInviter:]
  -[HMDHomeManager _handleFetchAddAccessoryRequests:]
  -[HMDHomeManager _handleSysdiagnoseRequest:]
  -[HMDHomeManager _handleDeviceSetupSessionOpen:]
  -[HMDHomeManager _handleResolveAccount:]
  -[HMDHomeManager _handleRemoveAccount:]
  -[HMDHomeManager _handlePing:]
  -[HMDHomeManager _handleHomeUtilRemoteMessageRequest:]
  -[HMDHomeManager _handleRequestRuntimeStateUpdate:]
  -[HMDHomeManager _handleRequestMediaAccessoryControl:]
  -[HMDHomeManager _handleFetchDevicesMessage:]
  -[HMDHomeManager _handleNetworkFirewallDumpCloudRecordsRequest:]
  -[HMDHomeManager _handleNetworkFirewallAddOverridesRequest:]
  -[HMDHomeManager _handleNetworkFirewallRemoveOverridesRequest:]
  -[HMDHomeManager _handleNetworkFirewallDumpLocalRulesRequest:]
  -[HMDHomeManager _handleNetworkFirewallDumpPairedMetadataRequest:]
  -[HMDHomeManager _handleNetworkFirewallRemoveLocalRulesRequest:]
  -[HMDHomeManager _handleNetworkFirewallFetchCloudChangesRequest:]
  -[HMDHomeManager _handleGetTLVForJSON:]
  -[HMDHomeManager _handleEnableUARPPacketCaptureRequest:]
  -[HMDHomeManager _handleDumpDatabase:]
  -[HMDHomeManager _handleConnectivityInfoRequest:]
  -[HMDHomeManager controllerKeyPairGenerated:]
  -[HMDHomeManager forcePushLocalDataToCloud:]
  -[HMDHomeManager dataSyncInProgressUpdatedNotification:]
  -[HMDHomeManager _handleSaveRequest:]
  -[HMDHomeManager handleVendorInfoUpdated:]
  -[HMDHomeManager auditDuplicatePreviouslyAddedAccessory:]
  -[HMDHomeManager __handleInitialFetch:]
  -[HMDHomeManager __handleAppleAccountUpdated:]
  -[HMDHomeManager __accountRegistryAddedAccount:]
  -[HMDHomeManager __accountRegistryRemovedAccount:]
  -[HMDHomeManager __accountAddedDevice:]
  -[HMDHomeManager __handleDeviceUpdatedNotification:]
  -[HMDHomeManager __accountRemovedDevice:]
  -[HMDHomeManager __handleProcessMemoryPressureEvent:]
  -[HMDHomeManager homesForBiomeMigrationManager:]
  -[HMDHomeManager hapMetadataForBiomeMigrationManager:]
  -[HMDHomeManager hapMetadataForBiomeLogEventObserver:]
  -[HMDHomeManager currentAccessoryHomeUUID]
  -[HMDHomeManager createCurrentAccessoryCapabilities]
  -[HMDHomeManager createCurrentResidentCapabilities]
  -[HMDHomeManager archiveServerToken:]
  -[HMDHomeManager eraseLocalHomeData]
  -[HMDHomeManager reloadHomeDataFromLocalStore:]
  -[HMDHomeManager kickAccountAvailabilityCheck]
  -[HMDHomeManager uploadHomeConfigToCloud:withDelay:]
  -[HMDHomeManager verifyHomeDataFromCloud:]
  -[HMDHomeManager fetchHomeDataFromCloudWithCloudConflict:withDelay:]
  -[HMDHomeManager fetchHomeManagerCloudConflict:withDelay:]
  -[HMDHomeManager fetchAllZones]
  -[HMDHomeManager notifyZonesCloudZoneReady:]
  -[HMDHomeManager fetchHomeFromCloudZone:cloudConflict:withDelay:]
  -[HMDHomeManager schedulePostFetch]
  -[HMDHomeManager eventSourceForCompositeSettingsController]
  -[HMDHomeManager languageListProviderForHomeUUID:]
  -[HMDHomeManager settingsControllerForAccessoryUUID:homeUUID:]
  -[HMDHomeManager siriEndpointBridge]
  -[HMDHomeManager updateMessageTargetForDuetPredictionSubscriber:]
  -[HMDHomeManager hapMetadataForMicroLocationLogEventObserver:]
  -[HMDHomeManager mobileAssetManager:didReceiveMetadata:]
  -[HMDHomeManager multiUserStatusController:statusDidChange:]
  -[HMDHomeManager homesForSiriEndpointSettingsSyncManager:]
  -[HMDHomeManager compositeSettingsControllerManagerForSiriEndpointSettingsSyncManager:]
  -[HMDHomeManager forceCloudFetch]
  -[HMDHomeManager isCloudAccountActive]
  -[HMDHomeManager zoneFetchFailed]
  -[HMDHomeManager isNetworkConnectionAvailable]
  -[HMDHomeManager topicNameForMediaGroupParticipantDataLocalStorage:]
  -[HMDHomeManager eventSourceForMediaGroupParticipantDataLocalStorage:]
  -[HMDHomeManager accessoryBrowserDidFindNewAccessory]
  -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:uncommittedTransactions:]
  -[HMDHomeManager initWithMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:metricsManager:darwinNotificationProvider:notificationCenter:backingStoreFactory:appleAccountManager:remoteAccountManager:userDefaults:logEventDispatcher:widgetConfigurationReader:uncommittedTransactions:]
  -[HMDHomeManager currentEventSource]
  -[HMDHomeManager localOnlySubscriptionProvider]
  -[HMDHomeManager _migrateUniqueIdentifierPrefsIfNeeded]
  -[HMDHomeManager _loadMessageDispatcher:accessoryBrowser:messageFilterChain:homeData:localDataDecryptionFailed:identityRegistry:accountRegistry:uncommittedTransactions:backingStoreFactory:reloadData:]
  -[HMDHomeManager _monitorMemoryUsage]
  -[HMDHomeManager _submitCounters]
  -[HMDHomeManager _submitHAPMetricsCounters]
  -[HMDHomeManager _updateHomesDiscoveredBonjourServicesMetrics]
  -[HMDHomeManager _logEventAggregationAnalysisLogEvents]
  -[HMDHomeManager _logCachedHomeKitConfigurationDataLogEvent]
  -[HMDHomeManager _reloadHomeDataFromLocalStore:]
  -[HMDHomeManager migrateModelObjectsToCloud:schemaVersion:]
  -[HMDHomeManager _accountAvailabilityChanged:]
  -[HMDHomeManager fetchAndUpdatePCSStatus]
  -[HMDHomeManager _setAccountAvailabilityChanged]
  -[HMDHomeManager _registerForXPCConnectionNotifications]
  -[HMDHomeManager __addActiveConnection:]
  -[HMDHomeManager __removeActiveConnection:]
  -[HMDHomeManager __registerIncomingInvitations:]
  -[HMDHomeManager accessoriesMatchingIdentifier:]
  -[HMDHomeManager hasHAPAccessoryInAnyHome]
  -[HMDHomeManager _removeLegacyHomeArchive:]
  -[HMDHomeManager _saveToPersistentStore:reason:]
  -[HMDHomeManager _dataForPersistentStoreIncrementingGeneration:reason:]
  -[HMDHomeManager _homeDataForPersistentStoreIncrementingGeneration:reason:]
  -[HMDHomeManager numberOfAccessoryWithNewFirmwareAvailable]
  -[HMDHomeManager _saveWithReason:postSyncNotification:]
  -[HMDHomeManager saveWithReason:information:saveOptions:]
  -[HMDHomeManager _saveWithReason:information:saveOptions:]
  -[HMDHomeManager _saveWithReason:information:postSyncNotification:]
  -[HMDHomeManager saveWithRequest:]
  -[HMDHomeManager _saveWithRequest:]
  -[HMDHomeManager performPostSaveRequestActionsWithReason:]
  -[HMDHomeManager performPostSaveRequestActionsWithRequest:]
  -[HMDHomeManager _performPostSaveRequestActionsWithRequest:]
  -[HMDHomeManager _pushMetadataToCloud]
  -[HMDHomeManager updateUserPushCachedForUser:device:]
  -[HMDHomeManager _updateUserPushCachedForUser:device:]
  -[HMDHomeManager _userPushCachedGetDeviceForUser:]
  -[HMDHomeManager _schedulePushChangesToAllUsersOfAllHomes]
  -[HMDHomeManager _pushChangesToAllUsersOfAllHomesForMigration]
  -[HMDHomeManager _pushChangesToAllUsersOfAllHomes]
  -[HMDHomeManager _pushChangesToUsersThatHaveNotAcknowledged]
  -[HMDHomeManager _pushChangesToUsers:forHome:]
  -[HMDHomeManager _pushUserRemovedForHome:]
  -[HMDHomeManager _nextTransactionIdentifier]
  -[HMDHomeManager _pushChangesForHome:toRemoteDevicesOnSameAccount:addedUser:]
  -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:]
  -[HMDHomeManager _prepareDataForDevicesOnSameAccountForHome:remoteGateway:isAtLeastV4:migrateToHH2:]
  -[HMDHomeManager _pushChangesToWatch:payload:group:completionHandler:]
  -[HMDHomeManager generateDataForSharedHomeModel:]
  -[HMDHomeManager generatePayloadFromHome:forAdmin:user:supportedFeatures:]
  -[HMDHomeManager _compressHomeData:]
  -[HMDHomeManager _pushChangesForHome:toRegularUsersOfHome:adminUsersOfHome:]
  -[HMDHomeManager _archiveSyncDataForHome:]
  -[HMDHomeManager _archiveSyncDataForHome:toUser:]
  -[HMDHomeManager checkAndPushMetadataToUser:destination:userInfo:]
  -[HMDHomeManager _getListOfUsersToPushMetadataChangesTo]
  -[HMDHomeManager _pushMetadataChangesToUsers]
  -[HMDHomeManager pushMetadataToAllWatches]
  -[HMDHomeManager _addPendingDataSyncAcksForUser:forHome:]
  -[HMDHomeManager _removePendingDataSyncAcksForUser:forHome:]
  -[HMDHomeManager _pushChangesToCloud:withDelay:]
  -[HMDHomeManager _pushChangesToCloud:withDelay:reason:]
  -[HMDHomeManager _uploadHomeConfigToCloud:withDelay:]
  -[HMDHomeManager _uploadHomeConfigToCloud:withDelay:reason:]
  -[HMDHomeManager _runUploadHomeConfigToCloudForcePush:reason:syncCompletion:]
  -[HMDHomeManager _runUploadHomeConfigToCloud:rowIDs:reasons:forcePush:syncCompletion:]
  -[HMDHomeManager _startCloudOperationRetryWithTimeout:completionHandler:]
  -[HMDHomeManager _stopCloudOperationRetryTimer]
  -[HMDHomeManager _resetCloudOperationRetryCounters]
  -[HMDHomeManager isDataSyncInProgressWithMessage:]
  -[HMDHomeManager _handleAccountStatusDeterminedWithError:homeDataRecordExists:metadataRecordExists:completion:]
  -[HMDHomeManager _postCloudSyncNotificationWithSuccess:]
  -[HMDHomeManager _notifyClientsOfConfigurationChange]
  -[HMDHomeManager notifyClientsOfConfigurationChange]
  -[HMDHomeManager notifyClientsOfUserSettingsChangeWithReason:]
  -[HMDHomeManager _updateGenerationCounterWithReason:source:]
  -[HMDHomeManager _notifyXPCClientsOfHomeConfigurationChange]
  -[HMDHomeManager sendUserAdded:destination:toHome:]
  -[HMDHomeManager sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:]
  -[HMDHomeManager electDeviceForUser:destination:deviceCapabilities:queue:completionHandler:]
  -[HMDHomeManager sendUnsecureMessage:target:userID:responseQueue:responseHandler:]
  -[HMDHomeManager uploadHomeManagerToCloudWithDelay:]
  -[HMDHomeManager _uploadHomeManagerToCloudWithDelay:]
  -[HMDHomeManager _processRemoveHomeModels:processIndex:completion:]
  -[HMDHomeManager _uploadHomeManagerToCloudSyncCompletion:]
  -[HMDHomeManager _loadHomeManagerTransactionsToPush:mustReplay:forLegacyPush:includeAllChanges:completion:]
  -[HMDHomeManager _updateHomeManagerModelChangesAsPushed:legacyPush:]
  -[HMDHomeManager _updateHomeManagerModelChangesAsPushed:pushMask:completion:]
  -[HMDHomeManager _fetchHomeManagerCloundConflict:withDelay:completionHandler:]
  -[HMDHomeManager _runFetchHomeManagerCloudConflict:syncCompletion:]
  -[HMDHomeManager _handleHomeManagerTransactionsFetched:stagedTransaction:mustReplay:cloudConflict:transactionError:syncCompletion:]
  -[HMDHomeManager uploadHomeToCloudZone:withDelay:]
  -[HMDHomeManager _uploadHomeToCloud:withDelay:]
  -[HMDHomeManager _loadHomeManagerHomeModelChanges:mustReplay:legacyPush:home:completion:]
  -[HMDHomeManager _loadHomeModelChanges:mustReplay:legacyPush:home:completion:]
  -[HMDHomeManager _updateModelChangesAsPushed:home:pushMask:completion:]
  -[HMDHomeManager _pushZoneInfromationForHome:]
  -[HMDHomeManager _uploadTransaction:home:completion:]
  -[HMDHomeManager _runUploadHomeToCloud:syncCompletion:]
  -[HMDHomeManager _schedulePostFetch]
  -[HMDHomeManager _fetchHomeFromCloudZone:cloudConflict:withDelay:completionHandler:]
  -[HMDHomeManager hasiCloudAndControllerKey]
  -[HMDHomeManager hasValidControllerKeyToSave]
  -[HMDHomeManager _runFetchHomeFromCloudZone:cloudConflict:syncCompletion:]
  -[HMDHomeManager _handleFetchModifyHome:isLegacyTransaction:completion:]
  -[HMDHomeManager _handleFetchObjectChange:home:isLegacyTransaction:completion:]
  -[HMDHomeManager _handleTransactionsFetched:stagedTransaction:mustReplay:zoneID:cloudConflict:transactionError:syncCompletion:]
  -[HMDHomeManager determineLocalChangesAndSchedulePush]
  -[HMDHomeManager _determineLocalChangesAndSchedulePush]
  -[HMDHomeManager _determineLegacyLocalChanges:]
  -[HMDHomeManager currentHomeUUIDOverride]
  -[HMDHomeManager setCurrentHomeUUIDOverride:]
  -[HMDHomeManager overrideCurrentHomeUUIDToNil]
  -[HMDHomeManager setOverrideCurrentHomeUUIDToNil:]
  -[HMDHomeManager addHome:]
  -[HMDHomeManager checkConflictInHomeNamespaceWithName:options:namespaceUUID:error:]
  -[HMDHomeManager _homeWithName:]
  -[HMDHomeManager _homeWithUniqueIdentifier:forClientIdentifierSalt:]
  -[HMDHomeManager _homeWithAssistantIdentifier:]
  -[HMDHomeManager _homeWithZoneID:]
  -[HMDHomeManager _zoneInformationWithUUID:]
  -[HMDHomeManager _homeFromEventIdentifier:]
  -[HMDHomeManager _setHomeConfigurationKey:value:applicationIdentifier:]
  -[HMDHomeManager _setHomeConfigurationKey:value:]
  -[HMDHomeManager _updateHomesConfigured]
  -[HMDHomeManager _updateIncomingInvitesPresent]
  -[HMDHomeManager updateHomeKitInUsePreferences]
  -[HMDHomeManager registerForMediaPlaybackStateChangeNotifications:]
  -[HMDHomeManager setMediaAccessoriesPresent:homePodsPresent:inOwnedHomes:]
  -[HMDHomeManager _updateAccessoriesConfigured]
  -[HMDHomeManager _setUniqueDeviceIdSalt:]
  -[HMDHomeManager accessoriesAreLocallyReachableOnTransientDevice:forHome:]
  -[HMDHomeManager startLocalTransport]
  -[HMDHomeManager stopLocalTransport]
  -[HMDHomeManager _checkNameConflict:withNamespaceUUIDs:]
  -[HMDHomeManager _checkActionSetNameConflict:withNamespaceUUIDs:]
  -[HMDHomeManager _configureHomes:uncommittedTransactions:]
  -[HMDHomeManager _configureHomesImpl:uncommittedTransactions:]
  -[HMDHomeManager initalizeMediaGroupParticipantDataLocalStorage]
  -[HMDHomeManager migrateLocalMediaGroupParticipantData]
  -[HMDHomeManager migrateLocalHomeTheaterDataForCurrentAccessory:currentMediaSystem:]
  -[HMDHomeManager migrateLocalStereoPairDataForCurrentMediaSystem:]
  -[HMDHomeManager destinationIdentifierForMediaSystem:role:]
  -[HMDHomeManager _checkForAccountChanged]
  -[HMDHomeManager _postMergeWatchPush]
  -[HMDHomeManager _fetchDataFromCloud]
  -[HMDHomeManager _fetchHomeDataFromCloudWithCloudConflict:forceFetch:withDelay:accountCompletion:]
  -[HMDHomeManager _runFetchHomeDataFromCloudWithCloudConflict:forceFetch:accountCompletion:syncCompletion:]
  -[HMDHomeManager _requestHomeDataSync]
  -[HMDHomeManager _updateCloudDataSyncWithAccountState:]
  -[HMDHomeManager _updateCloudDataSyncWithAccountState:completion:]
  -[HMDHomeManager identifiersOfAccessoriesForHome:]
  -[HMDHomeManager identifiersOfAccessories:]
  -[HMDHomeManager _filterAccessories:withIdentifiers:]
  -[HMDHomeManager _filterAccessories:inHome:]
  -[HMDHomeManager _suspendXPCWithCompletionHanlder:]
  -[HMDHomeManager _resumeXPCWithCompletionHanlder:]
  -[HMDHomeManager _deviceForIdentifier:]
  -[HMDHomeManager _transactionalizeAndApplyCloudHomeData:cachedHomeData:version:migrationOptions:dataWasMerged:syncCompletion:]
  -[HMDHomeManager _transactionalizeAndApplyHomeData:cachedHomeData:syncCompletion:]
  -[HMDHomeManager _preferLocalHomesOverCloudHomes:migrationOptions:]
  -[HMDHomeManager _auditKeychainEntries]
  -[HMDHomeManager _associateAccessories:withHomes:]
  -[HMDHomeManager _setPrimaryHome:idsDataSync:]
  -[HMDHomeManager _detectGuestHomesAddedAndRemovedWithCloudHomes:]
  -[HMDHomeManager _registerForLogging]
  -[HMDHomeManager _notifyMetricsManagerOfConfigurationChange]
  -[HMDHomeManager registerQueriableAwdMetrics]
  -[HMDHomeManager _submitAccessoryNetworkProtectionReportsToAWD:]
  -[HMDHomeManager _startTimerToResetCloudOperationRetryCounter]
  -[HMDHomeManager _retryCloudOperationWithName:completionHandler:]
  -[HMDHomeManager homesToSendForNonSPIClients]
  -[HMDHomeManager _accessoryOfCurrentDevice]
  -[HMDHomeManager _appleMediaAccessoryOfCurrentDevice]
  -[HMDHomeManager __handleRequestFetchHomeConfiguration:]
  -[HMDHomeManager _addAccessoryRequestsForMessage:]
  -[HMDHomeManager notifyAboutAddAccessoryRequest]
  -[HMDHomeManager _runtimeState]
  -[HMDHomeManager _getRuntimeStateUpdateForHomeManager:includeMediaAccessorySessionState:options:includeResidentDeviceState:completion:]
  -[HMDHomeManager sendPairingIdentity:includePrivateKey:requestMessage:]
  -[HMDHomeManager __nominateCurrentHomeUUID]
  -[HMDHomeManager _nominateCurrentHomeUUID]
  -[HMDHomeManager _updateCurrentHomeIfNecessary]
  -[HMDHomeManager _notifyCurrentHomeUpdated:isLocalUpdate:]
  -[HMDHomeManager _sendCurrentHomeToWatch:]
  -[HMDHomeManager _findHomeModelChange:]
  -[HMDHomeManager _findHomeOwnerModelChange:]
  -[HMDHomeManager _findHomeSharedUserModelChange:]
  -[HMDHomeManager _findHomeModel:]
  -[HMDHomeManager _findHomeConfigurationModelChange:]
  -[HMDHomeManager processHomeModelAdd:message:]
  -[HMDHomeManager _removeHome:withMessage:saveToStore:notifyUsers:shouldRemovePairings:]
  -[HMDHomeManager scheduleRemovalForHome:message:options:]
  -[HMDHomeManager _handleRemoveHomeOperation:message:]
  -[HMDHomeManager processHomeModelRemoved:message:]
  -[HMDHomeManager _changePrimaryHome:]
  -[HMDHomeManager processHomeManagerModelUpdate:message:]
  -[HMDHomeManager _zonesFetched]
  -[HMDHomeManager _addCloudZone:ownerName:]
  -[HMDHomeManager addTransactionAfterPush:]
  -[HMDHomeManager _removeCloudZone:updateHomeManager:]
  -[HMDHomeManager processCloudZoneModelAdd:message:]
  -[HMDHomeManager processCloudZoneModelRemoved:message:]
  -[HMDHomeManager reprocessUserManagementModels]
  -[HMDHomeManager _processUserManagementOperationModel:message:]
  -[HMDHomeManager _processRemoveUserManagementOperationModel:message:]
  -[HMDHomeManager operationsWithIdentifiers:outOperations:]
  -[HMDHomeManager cleanupOperationsForAccessory:user:completion:]
  -[HMDHomeManager _monitorReachability]
  -[HMDHomeManager _reachabilityMonitorChanged:]
  -[HMDHomeManager _cloudReachabilityMonitorChanged:]
  -[HMDHomeManager _startAccessoryFinderTimer]
  -[HMDHomeManager _startAccessoryFinderTimerExpired]
  -[HMDHomeManager _cancelAccessoryFinderTimer]
  -[HMDHomeManager processAnyPendingRequestsForRemoteAccess]
  -[HMDHomeManager _processAnyPendingRequestsForRemoteAccess:]
  -[HMDHomeManager _startScanningForAccessories:]
  -[HMDHomeManager _findAnyAccessoryWithIdentities:inAccessoryServers:]
  -[HMDHomeManager shouldAcceptInvitationPayload:error:]
  -[HMDHomeManager shouldAcceptInvitationWithHomeName:]
  -[HMDHomeManager _handleAccessHomeInviteFromAccount:mergeID:idsInvitationIdentifier:payload:messageResponseHandler:]
  -[HMDHomeManager dismissBulletinOnAllMyTransientDevicesWithContext:]
  -[HMDHomeManager dismissDialogOnAllMyTransientDevicesWithContext:selection:]
  -[HMDHomeManager _trackIncomingInvitationFromAccount:mergeID:idsInvitationIdentifier:payload:invitationState:error:]
  -[HMDHomeManager _postIncomingInvitationStateChangedNotification:newInvitationState:]
  -[HMDHomeManager _acceptHomeInviteFromAccount:message:trackInvite:]
  -[HMDHomeManager _sendUserAdded:destination:toHome:]
  -[HMDHomeManager _sendUserRemoved:fromHome:pairingUsername:pushToCloud:completionHandler:]
  -[HMDHomeManager _removeAllUsersOfHome:]
  -[HMDHomeManager homeUserFromMessage:home:]
  -[HMDHomeManager processSharedHomeModelRemoved:message:]
  -[HMDHomeManager _shouldHandleHomeDataSync:remoteHome:sourceDeviceVersion:]
  -[HMDHomeManager _loadCloudTransactionForRemoteHome:localHome:cachedHome:version:cloudTransaction:stagedTransaction:mustReplayTransaction:]
  -[HMDHomeManager processSharedHomeModelUpdate:message:]
  -[HMDHomeManager _processSharedHomeModel:message:]
  -[HMDHomeManager processTransactionsFromHomeDataSync:accessories:version:completion:]
  -[HMDHomeManager _prepareHomesVersionDict]
  -[HMDHomeManager setLocalPairingIdentity:error:]
  -[HMDHomeManager _removeAndAddKeyPair:userName:eraseReason:]
  -[HMDHomeManager _auditDuplicatePreviouslyAddedAccessory:]
  -[HMDHomeManager _checkAndAddWatchDevicesWithResend:]
  -[HMDHomeManager _checkAndAddWatchDevices:resend:requestFromWatch:]
  -[HMDHomeManager _addSyncOperation:]
  -[HMDHomeManager _addSyncOperation:forWatchWithIdentifier:]
  -[HMDHomeManager _pairedSyncDidStart]
  -[HMDHomeManager _addWatch:completionHandler:]
  -[HMDHomeManager _sendKeysToWatch:completionHandler:]
  -[HMDHomeManager _addWatch:toAssociatedList:]
  -[HMDHomeManager _scheduleSendHomeDataToAllWatches]
  -[HMDHomeManager sendHomeDataToAllWatchesWithCompletion:]
  -[HMDHomeManager _sendHomeDataToAllWatchesWithCompletion:]
  -[HMDHomeManager _sendHomeDataToAllWatchesMigrateToHH2:completionHandler:]
  -[HMDHomeManager _sendHomeDataToWatch:completionHandler:]
  -[HMDHomeManager _sendHomeDataToWatch:migrateToHH2:completionHandler:]
  -[HMDHomeManager syncWalletKeyPassSerialNumbersToWatch:withCompletion:]
  -[HMDHomeManager _checkAndInformCompanionDevice]
  -[HMDHomeManager checkForRemotePeers]
  -[HMDHomeManager _checkForRemotePeers]
  -[HMDHomeManager _remotePeers]
  -[HMDHomeManager _checkForRemotePeersAndRegisterForRemoteNotifications:]
  -[HMDHomeManager removeFromUnassociatedPeers:home:]
  -[HMDHomeManager _removeFromUnassociatedPeers:home:]
  -[HMDHomeManager _removeFromAssociatedPeers:home:]
  -[HMDHomeManager _accessoriesAreLocallyReachableOnTransientDevice:forHome:]
  -[HMDHomeManager atHomeLevelChanged:formerLevel:home:]
  -[HMDHomeManager _findRemotePeerContainingAccessories:forHome:]
  -[HMDHomeManager _updateHomesAboutNetworkConnectivity:]
  -[HMDHomeManager _electRemoteGatewayForHomesAfterReachabilityChanges]
  -[HMDHomeManager electRemoteAccessPeerForHome:]
  -[HMDHomeManager _electRemoteAccessPeerForHome:]
  -[HMDHomeManager _electRemoteAccessPeerForHome:retryCount:]
  -[HMDHomeManager _electRemoteAccessDeviceForHome:retryCount:]
  -[HMDHomeManager _electCompanionForRemoteAccess:]
  -[HMDHomeManager updateAccountAvailabilityChanged:]
  -[HMDHomeManager _handleAccountAvailabilityChanged:]
  -[HMDHomeManager _eraseLocalHomeData]
  -[HMDHomeManager pushMetadataToCloud]
  -[HMDHomeManager evaluateToPushMetadataWhenHomeKitInUse]
  -[HMDHomeManager handleMetadataDictionary:message:]
  -[HMDHomeManager _notifyMetadata:limitToSPIClients:message:invokeResponseHandler:]
  -[HMDHomeManager processMetadataModel:message:]
  -[HMDHomeManager _handleContactStoreChanged]
  -[HMDHomeManager _getRequestedState:activity:]
  -[HMDHomeManager _dumpHomeManagerData]
  -[HMDHomeManager configureRetailDemoModeWithKeyPair:controllerName:demoAccessories:completionHandler:]
  -[HMDHomeManager finalizeRetailDemoModeWithAllowEditing:completionHandler:]
  -[HMDHomeManager _processTestModeCurrentHomeOverride:]
  -[HMDHomeManager _processTestModeConfiguration:]
  -[HMDHomeManager _dumpToLog:withState:]
  -[HMDHomeManager _logState:key:indent:]
  -[HMDHomeManager __startupFirewallRuleManagerForMessage:completion:]
  -[HMDHomeManager _addIncomingInvitation:]
  -[HMDHomeManager _removeIncomingInvitation:]
  -[HMDHomeManager numberOfPendingIncomingInvitation]
  -[HMDHomeManager _pruneExpiredIncomingInvitations]
  -[HMDHomeManager _handleRequestToCancelHomeInvitation:saveReason:]
  -[HMDHomeManager processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:]
  -[HMDHomeManager _processRequestToUpdateHomeInvitation:invitationState:homeUUID:authStatus:messageName:message:]
  -[HMDHomeManager _processLocalRequestToUpdateHomeInvitation:newState:authStatus:]
  -[HMDHomeManager _submitSpamReportToIDS:]
  -[HMDHomeManager getOrCreateControllerPublicKey:controllerUsername:error:]
  -[HMDHomeManager __sendUpdateRequestToAdminForInvitation:homeUUID:invitationState:authStatus:]
  -[HMDHomeManager teardownRemoteAccessForHome:]
  -[HMDHomeManager _teardownRemoteAccessForHome:]
  -[HMDHomeManager _teardownRemoteAccessForHomeThroughCompanion:]
  -[HMDHomeManager _teardownRemoteAccessForHomeCommon:isCompanion:]
  -[HMDHomeManager _postiCloudSigninState:]
  -[HMDHomeManager processAppDataModelUpdate:message:]
  -[HMDHomeManager processAppDataModelRemove:message:]
  -[HMDHomeManager notifyClientsResidentCapable:]
  -[HMDHomeManager _updateResidentEnabledOnThisDevice:forceNotify:message:]
  -[HMDHomeManager _addCurrentResidentDeviceToHomes:]
  -[HMDHomeManager _removeCurrentResidentDeviceFromHomes:]
  -[HMDHomeManager pingDevice:secure:restrictToLocalNetwork:completionHandler:]
  -[HMDHomeManager __pingDestination:secure:restrictToLocalNetwork:completionHandler:]
  -[HMDHomeManager areThereAnyTTSUSessionsOngoing]
  -[HMDHomeManager _notifyClientsOfUpdatedStatus]
  -[HMDHomeManager _statusPayloadForMessage:]
  -[HMDHomeManager statusForMessage:]
  -[HMDHomeManager accessAllowedWhenLockedSettingFileName]
  -[HMDHomeManager notifySPIClientsAboutAccessAllowedWhenLocked:]
  -[HMDHomeManager _updateAccessAllowedWhenLocked:message:]
  -[HMDHomeManager saveAccessAllowedWhenLockedSettingToLocalDisk]
  -[HMDHomeManager updateCurrentUserEligibleForOwnerToAutoMigration]
  -[HMDHomeManager _updateCurrentUserEligibleForOwnerToAutoMigration]
  -[HMDHomeManager _notifyXPCClientsOfUpdatedDevices]
  -[HMDHomeManager verifyCurrentDeviceResidentStatus]
  -[HMDHomeManager _handleUpdatedCurrentDevice:]
  -[HMDHomeManager _remoteAccessHealthMonitorTimerDidFire:]
  -[HMDHomeManager _cleanChangesIfNoAddChangeObjectID:completion:]
  -[HMDHomeManager assistantSyncDataChanged:]
  -[HMDHomeManager handleSiriSyncDataRequest:]
  -[HMDHomeManager _evaluateHH2TvOSFollowUpRequirements]
  -[HMDHomeManager accessorySetupMetricDispatcherForAccessoryUUID:]
  -[HMDHomeManager addAccessorySetupMetricDispatcher:]
  -[HMDHomeManager removeAccessorySetupMetricDispatcherForAccessoryUUID:]
  -[HMDHomeManager homeDatabaseSize]
  -[HMDHomeManager pcsEnabled]
  -[HMDHomeManager setPcsEnabled:]
  -[HMDHomeManager softwareUpdateManager]
  -[HMDHomeManager widgetConfigurationReader]
  -[HMDHomeManager gatherer]
  -[HMDHomeManager setGatherer:]
  -[HMDHomeManager compositeSettingsControllerManager]
  -[HMDHomeManager setIdsServerBag:]
  -[HMDHomeManager capabilitiesController]
  -[HMDHomeManager setCameraLoadBalancer:]
  -[HMDHomeManager isHomeDataLoadInProgress]
  -[HMDHomeManager setHomeDataLoadInProgress:]
  -[HMDHomeManager duetEventManger]
  -[HMDHomeManager startupCompleted]
  -[HMDHomeManager debounceHomesUpdateTimer]
  -[HMDHomeManager setDebounceHomesUpdateTimer:]
  -[HMDHomeManager periodicMobileCatalogUpdateTimer]
  -[HMDHomeManager setPeriodicMobileCatalogUpdateTimer:]
  -[HMDHomeManager memoryMonitorLogEventTimer]
  -[HMDHomeManager setMemoryMonitorLogEventTimer:]
  -[HMDHomeManager messagingCounterLoggingTimer]
  -[HMDHomeManager setMessagingCounterLoggingTimer:]
  -[HMDHomeManager pendingHomesBeingRemoved]
  -[HMDHomeManager setPendingHomesBeingRemoved:]
  -[HMDHomeManager companionManager]
  -[HMDHomeManager cacheUseAllowed]
  -[HMDHomeManager setCacheUseAllowed:]
  -[HMDHomeManager userPushCacheMap]
  -[HMDHomeManager deviceSetupSessions]
  -[HMDHomeManager accessorySetupMetricDispatchers]
  -[HMDHomeManager speakersAreConfigured]
  -[HMDHomeManager setSpeakersAreConfigured:]
  -[HMDHomeManager speakersAreConfiguredInOwnedHomes]
  -[HMDHomeManager setSpeakersAreConfiguredInOwnedHomes:]
  -[HMDHomeManager unprocessedOperationModelIdentifiers]
  -[HMDHomeManager setUnprocessedOperationModelIdentifiers:]
  -[HMDHomeManager multiUserStatusController]
  -[HMDHomeManager cloudDataSource]
  -[HMDHomeManager memoryTracker]
  -[HMDHomeManager bonjourBrowser]
  -[HMDHomeManager setBonjourBrowser:]
  -[HMDHomeManager duetSubscriber]
  -[HMDHomeManager setDuetSubscriber:]
  -[HMDHomeManager awdLogEventObserver]
  -[HMDHomeManager setAwdLogEventObserver:]
  -[HMDHomeManager biomeLogEventObserver]
  -[HMDHomeManager setBiomeLogEventObserver:]
  -[HMDHomeManager microLocationLogEventObserver]
  -[HMDHomeManager setMicroLocationLogEventObserver:]
  -[HMDHomeManager microLocationManager]
  -[HMDHomeManager setMicroLocationManager:]
  -[HMDHomeManager browseAssertion]
  -[HMDHomeManager setBrowseAssertion:]
  -[HMDHomeManager hapMetricsLastSubmissionDate]
  -[HMDHomeManager setHapMetricsLastSubmissionDate:]
  -[HMDHomeManager bonjourBrowserHelperLastCompletionDate]
  -[HMDHomeManager setBonjourBrowserHelperLastCompletionDate:]
  -[HMDHomeManager eventAggregationAnalysisLogDate]
  -[HMDHomeManager setEventAggregationAnalysisLogDate:]
  -[HMDHomeManager homeConfigurationLogDate]
  -[HMDHomeManager setHomeConfigurationLogDate:]
  -[HMDHomeManager registrationForwardingEventRouter]
  -[HMDHomeManager setRegistrationForwardingEventRouter:]
  -[HMDHomeManager memoryEventRouter]
  -[HMDHomeManager setMemoryEventRouter:]
  -[HMDHomeManager eventRouterXPCServer]
  -[HMDHomeManager setEventRouterXPCServer:]
  -[HMDHomeManager eventRouterAssertionController]
  -[HMDHomeManager setEventRouterAssertionController:]
  -[HMDHomeManager siriEndPointSettingsSyncManager]
  -[HMDHomeManager setSiriEndPointSettingsSyncManager:]
  -[HMDHomeManager multiUserSettingsMetricEventDispatcher]
  -[HMDHomeManager missingHomeDataRecord]
  -[HMDHomeManager setMissingHomeDataRecord:]
  -[HMDHomeManager setLastRemovedCurrentAccessoryUUID:]
  -[HMDHomeManager idsFirewallManager]
  -[HMDHomeManager setIdsFirewallManager:]
  -[HMDHomeManager cloudReachabilityMonitor]
  -[HMDHomeManager setCloudReachabilityMonitor:]
  -[HMDHomeManager widgetTimelineRefresher]
  -[HMDHomeManager debounceGenerationCounterUpdateTimer]
  -[HMDHomeManager setDebounceGenerationCounterUpdateTimer:]
  -[HMDHomeManager hapKeyStore]
  -[HMDHomeManager setHapKeyStore:]
  -[HMDHomeManager homeManagerObjectChangeHandler]
  -[HMDHomeManager isHomeManagerZoneFirstFetch]
  -[HMDHomeManager setHomeManagerZoneFirstFetch:]
  -[HMDHomeManager uuidsOfRemovedHomes]
  -[HMDHomeManager setUuidsOfRemovedHomes:]
  -[HMDHomeManager sysdiagnoseQueue]
  -[HMDHomeManager setSysdiagnoseQueue:]
  -[HMDHomeManager unassociatedRemotePeers]
  -[HMDHomeManager setUnassociatedRemotePeers:]
  -[HMDHomeManager associatedRemotePeers]
  -[HMDHomeManager setAssociatedRemotePeers:]
  -[HMDHomeManager fullSyncedWatchPeers]
  -[HMDHomeManager setFullSyncedWatchPeers:]
  -[HMDHomeManager associatedWatchPeers]
  -[HMDHomeManager watchSyncStateMap]
  -[HMDHomeManager watchSyncRetryContextBySyncIdentifier]
  -[HMDHomeManager watchSyncRetryContextByRetryTimer]
  -[HMDHomeManager generationCounterToken]
  -[HMDHomeManager setGenerationCounterToken:]
  -[HMDHomeManager assistantGenerationCounter]
  -[HMDHomeManager setAssistantGenerationCounter:]
  -[HMDHomeManager nameValidator]
  -[HMDHomeManager setNameValidator:]
  -[HMDHomeManager accessoryFinderTimer]
  -[HMDHomeManager setAccessoryFinderTimer:]
  -[HMDHomeManager pendingResponsesForAccessoryFinder]
  -[HMDHomeManager setPendingResponsesForAccessoryFinder:]
  -[HMDHomeManager homepodSetupRetryCount]
  -[HMDHomeManager setHomepodSetupRetryCount:]
  -[HMDHomeManager pendingDataSyncAcks]
  -[HMDHomeManager setPendingDataSyncAcks:]
  -[HMDHomeManager pendingRemoteSessions]
  -[HMDHomeManager setPendingRemoteSessions:]
  -[HMDHomeManager pendingResidentSetupSessions]
  -[HMDHomeManager setPendingResidentSetupSessions:]
  -[HMDHomeManager msgFilterChain]
  -[HMDHomeManager setMsgFilterChain:]
  -[HMDHomeManager dialogCancelationContexts]
  -[HMDHomeManager setDialogCancelationContexts:]
  -[HMDHomeManager identityRegistry]
  -[HMDHomeManager setIdentityRegistry:]
  -[HMDHomeManager accountStatusFailedDueToNetworkFailure]
  -[HMDHomeManager setAccountStatusFailedDueToNetworkFailure:]
  -[HMDHomeManager backOffOperationInProgress]
  -[HMDHomeManager setBackOffOperationInProgress:]
  -[HMDHomeManager cloudOperationRetryCount]
  -[HMDHomeManager setCloudOperationRetryCount:]
  -[HMDHomeManager uploadToCloudIsPending]
  -[HMDHomeManager setUploadToCloudIsPending:]
  -[HMDHomeManager uploadHomeDataToCloud]
  -[HMDHomeManager setUploadHomeDataToCloud:]
  -[HMDHomeManager forceFetchHomeManagerZone]
  -[HMDHomeManager setForceFetchHomeManagerZone:]
  -[HMDHomeManager lastAnswerForShouldCloudSyncData]
  -[HMDHomeManager setLastAnswerForShouldCloudSyncData:]
  -[HMDHomeManager cloudOperationRetryTimer]
  -[HMDHomeManager setCloudOperationRetryTimer:]
  -[HMDHomeManager uploadMetadataToCloud]
  -[HMDHomeManager setUploadMetadataToCloud:]
  -[HMDHomeManager locationHandler]
  -[HMDHomeManager setLocationHandler:]
  -[HMDHomeManager fmfHandler]
  -[HMDHomeManager setFmfHandler:]
  -[HMDHomeManager dumpCategory]
  -[HMDHomeManager ignoreFirstTimeReachabilityChanged]
  -[HMDHomeManager setIgnoreFirstTimeReachabilityChanged:]
  -[HMDHomeManager accountStatusIsAuthenticated]
  -[HMDHomeManager setAccountStatusIsAuthenticated:]
  -[HMDHomeManager remoteAccessHealthMonitorTimer]
  -[HMDHomeManager setRemoteAccessHealthMonitorTimer:]
  -[HMDHomeManager nextRequestTransactionIdentifier]
  -[HMDHomeManager pendingFragmentationStream]
  -[HMDHomeManager setPendingFragmentationStream:]
  -[HMDHomeManager homeDataLoadedFromArchive]
  -[HMDHomeManager setHomeDataLoadedFromArchive:]
  -[HMDHomeManager watchPushDelayTimer]
  -[HMDHomeManager sharedHomesPushDelayTimer]
  -[HMDHomeManager cloudkitAccountStatusDetermined]
  -[HMDHomeManager setCloudkitAccountStatusDetermined:]
  -[HMDHomeManager needToCleanUpKeys]
  -[HMDHomeManager setNeedToCleanUpKeys:]
  -[HMDHomeManager residentMesh]
  -[HMDHomeManager setResidentMesh:]
  -[HMDHomeManager accessorySetupManager]
  -[HMDHomeManager setHh2FrameworkSwitch:]
  -[HMDHomeManager switchingToHH2AsSharedUser]
  -[HMDHomeManager setSwitchingToHH2AsSharedUser:]
  -[HMDHomeManager hh2AutoMigrationMonitor]
  -[HMDHomeManager setHh2AutoMigrationMonitor:]
  -[HMDHomeManager hh2AutoMigrationEligibilityChecker]
  -[HMDHomeManager setHh2AutoMigrationEligibilityChecker:]
  -[HMDHomeManager siriEndpointOnboardingManager]
  -[HMDHomeManager legacyAccessoryPairingController]
  -[HMDHomeManager siriSyncNotificationTime]
  -[HMDHomeManager setSiriSyncNotificationTime:]
  -[HMDHomeManager siriSyncNotificationReasons]
  -[HMDHomeManager setSiriSyncNotificationReasons:]
  -[HMDHomeManager debounceRegenerateAssistantSyncDataTimer]
  -[HMDHomeManager setBiomeEventManager:]
  -[HMDHomeManager accessoryBrowserInternal]
  -[HMDHomeManager setAccessoryBrowserInternal:]
  -[HMDHomeManager setLastEventStore:]
  -[HMDHomeManager lastEventStoreController]
  -[HMDHomeManager setLastEventStoreController:]
  -[HMDHomeManager mobileAssetManager]
  -[HMDHomeManager setMobileAssetManager:]
  -[HMDHomeManager setMediaGroupParticipantDataLocalStorage:]
  -[HMDHomeManager homeUUIDsByWalletKeyAssertionXPCConnection]
  -[HMDHomeManager assistantIdentifierChanged]
  -[HMDHomeManager setAssistantIdentifierChanged:]
  -[HMDHomeManager setReachabilityMonitor:]
  -[HMDHomeManager _handleUpgradeToHH2Message:]
  -[HMDHomeManager _handleTestHH2Migration:]
  -[HMDHomeManager _handleAttemptHH2AutoMigrationMessage:]
  -[HMDHomeManager initializeHH2FrameworkSwitch:]
  -[HMDHomeManager _performPreHH2RebootTasks]
  -[HMDHomeManager _migrateCurrentAccessoryDataIfNeeded]
  -[HMDHomeManager _storeAllLocalSettingsForThisDevice]
  -[HMDHomeManager maybeStashOwnerMetadataForPostMigrationPingUsingMigratorRecord:]
  -[HMDHomeManager _registerForFrameworkSwitch]
  -[HMDHomeManager _initializeAutoMigration]
  -[HMDHomeManager autoMigrateToHH2WithCompletionHandler:]
  -[HMDHomeManager dryRunHH2MigrationWithCompletionHandler:]
  -[HMDHomeManager canPerformDryRunOfHH2Migration]
  -[HMDHomeManager _performAutoMigrationToHH2WithIsDryRun:completionHandler:]
  -[HMDHomeManager _handleUpgradeToHH2Message:autoMigration:]
  -[HMDHomeManager moveDirectlyToHH2]
  -[HMDHomeManager _onlyHH2SharedHomesExist]
  -[HMDHomeManager checkAndMoveDirectlyToHH2IfOnlyHH2SharedHomesExist]
  -[HMDHomeManager moveDirectlyToHH2IfOnlyHH2SharedHomesExist]
  -[HMDHomeManager _startHH2MigrationWithRequestMessage:isAutoMigration:]
  -[HMDHomeManager _startHH2MigrationWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:isAutoMigration:dryRun:completionHandler:]
  -[HMDHomeManager refreshHomeDataAndArchiveLocallyWithCompletionHandler:]
  -[HMDHomeManager saveToPersistentStoreForHH2MigrationWithCompletionHandler:]
  -[HMDHomeManager canHH2MigrationBeStarted:]
  -[HMDHomeManager writeMigrationRecordWithShouldSkipKeyRollOperations:forceMigrationFailureForTesting:migrateFromTestDirectory:dryRun:]


HMDAccessoryReachabilityElectionParameter : HMFObject
 @property  NSDictionary *dictionaryRepresentation
 @property  NSUUID *identifier
 @property  BOOL reachable

  // instance methods
  -[HMDAccessoryReachabilityElectionParameter identifier]
  -[HMDAccessoryReachabilityElectionParameter isReachable]
  -[HMDAccessoryReachabilityElectionParameter attributeDescriptions]
  -[HMDAccessoryReachabilityElectionParameter .cxx_destruct]
  -[HMDAccessoryReachabilityElectionParameter initWithDictionaryRepresentation:]
  -[HMDAccessoryReachabilityElectionParameter dictionaryRepresentation]
  -[HMDAccessoryReachabilityElectionParameter isEqual:]
  -[HMDAccessoryReachabilityElectionParameter initWithIdentifier:isReachable:]


HMDResidentDeviceElectionParameters : HMFObject
 @property  HMFProductInfo *productInfo
 @property  HMDHomeKitVersion *version
 @property  HMDResidentDevice *resident
 @property  HMFBoolean *enabled
 @property  long long location
 @property  NSSet *accessories
 @property  NSDictionary *dictionaryRepresentation

  // instance methods
  -[HMDResidentDeviceElectionParameters compare:]
  -[HMDResidentDeviceElectionParameters productInfo]
  -[HMDResidentDeviceElectionParameters attributeDescriptions]
  -[HMDResidentDeviceElectionParameters .cxx_destruct]
  -[HMDResidentDeviceElectionParameters version]
  -[HMDResidentDeviceElectionParameters dictionaryRepresentation]
  -[HMDResidentDeviceElectionParameters location]
  -[HMDResidentDeviceElectionParameters accessories]
  -[HMDResidentDeviceElectionParameters isEqual:]
  -[HMDResidentDeviceElectionParameters isEnabled]
  -[HMDResidentDeviceElectionParameters resident]
  -[HMDResidentDeviceElectionParameters initWithResident:dictionaryRepresentation:]
  -[HMDResidentDeviceElectionParameters initWithResident:enabled:location:accessories:]
  -[HMDResidentDeviceElectionParameters compare:outCriteria:]


HMDBulletinBoardCameraNotificationAssociation : HMFObject
 @property  HMDCameraProfile *cameraProfile
 @property  NSMutableSet *notificationGeneratingServicesWithCamera

  // instance methods
  -[HMDBulletinBoardCameraNotificationAssociation cameraProfile]
  -[HMDBulletinBoardCameraNotificationAssociation .cxx_destruct]
  -[HMDBulletinBoardCameraNotificationAssociation initWithCameraProfile:]
  -[HMDBulletinBoardCameraNotificationAssociation notificationGeneratingServicesWithCamera]


HMDCameraClipCreateClipWithSignificantEventOperation : HMDCameraClipAddSignificantEventOperation
 @property  double targetFragmentDuration
 @property  NSDate *clipStartDate
 @property  long long quality
 @property  HMCameraClipEncryptionManager *encryptionManager

  // class methods
  +[HMDCameraClipCreateClipWithSignificantEventOperation logCategory]
  +[HMDCameraClipCreateClipWithSignificantEventOperation cameraClipOperationType]

  // instance methods
  -[HMDCameraClipCreateClipWithSignificantEventOperation quality]
  -[HMDCameraClipCreateClipWithSignificantEventOperation encryptionManager]
  -[HMDCameraClipCreateClipWithSignificantEventOperation attributeDescriptions]
  -[HMDCameraClipCreateClipWithSignificantEventOperation .cxx_destruct]
  -[HMDCameraClipCreateClipWithSignificantEventOperation targetFragmentDuration]
  -[HMDCameraClipCreateClipWithSignificantEventOperation clipStartDate]
  -[HMDCameraClipCreateClipWithSignificantEventOperation modelsToAdd]
  -[HMDCameraClipCreateClipWithSignificantEventOperation initWithClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:targetFragmentDuration:clipStartDate:quality:encryptionManager:]
  -[HMDCameraClipCreateClipWithSignificantEventOperation initWithClipModelID:localZone:significantEvent:homePresenceByPairingIdentity:targetFragmentDuration:clipStartDate:quality:encryptionManager:dataSource:]


HMDCameraSessionID : HMFObject <NSCopying>
 @property  NSString *sessionID
 @property  NSString *descriptionString
 @property  NSString *cameraSessionAppID
 @property  HMDDevice *remoteDevice
 @property  BOOL spiClient
 @property  NSMutableDictionary *milestones
 @property  NSString *deviceSectionName
 @property  NSMutableDictionary *deviceMilestones

  // class methods
  +[HMDCameraSessionID applicationIdentiferForMessage:]
  +[HMDCameraSessionID millisecondsSince1970]

  // instance methods
  -[HMDCameraSessionID remoteDevice]
  -[HMDCameraSessionID descriptionString]
  -[HMDCameraSessionID sessionID]
  -[HMDCameraSessionID .cxx_destruct]
  -[HMDCameraSessionID copyWithZone:]
  -[HMDCameraSessionID isEqual:]
  -[HMDCameraSessionID milestones]
  -[HMDCameraSessionID initWithSessionID:remoteDevice:cameraSessionAppID:descriptionString:spiClient:]
  -[HMDCameraSessionID markMilestoneFor:]
  -[HMDCameraSessionID markMilestoneForPath:]
  -[HMDCameraSessionID setParameterFor:value:]
  -[HMDCameraSessionID setParameterForPath:value:]
  -[HMDCameraSessionID addParameterFor:value:]
  -[HMDCameraSessionID _prepareDeviceMilestones]
  -[HMDCameraSessionID cameraSessionAppID]
  -[HMDCameraSessionID isSPIClient]
  -[HMDCameraSessionID deviceSectionName]
  -[HMDCameraSessionID deviceMilestones]


HMDHMBLogEvent : HMMLogEvent
 @property  int containerType
 @property  int zoneType

  // instance methods
  -[HMDHMBLogEvent zoneType]
  -[HMDHMBLogEvent containerType]
  -[HMDHMBLogEvent initWithCloudZoneID:]


HMDRemoteEventRouterAssertionController : NSObject <HMFLogging, HMDRemoteEventRouterProcessStateChangeAssertionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteEventRouterAssertionController logCategory]

  // instance methods
  -[HMDRemoteEventRouterAssertionController configure]
  -[HMDRemoteEventRouterAssertionController .cxx_destruct]
  -[HMDRemoteEventRouterAssertionController _handleProcessStateChange:]
  -[HMDRemoteEventRouterAssertionController registerClient:]
  -[HMDRemoteEventRouterAssertionController didChangeForegroundState:]
  -[HMDRemoteEventRouterAssertionController didExpireHysteresis:]
  -[HMDRemoteEventRouterAssertionController initWithQueue:notificationCenter:]


HMDDoorLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *accessoryUUID
 @property  NSString *doorStatus
 @property  NSString *characteristicUUID
 @property  NSString *timeStamp
 @property  NSString *homePresence

  // instance methods
  -[HMDDoorLogEvent accessoryUUID]
  -[HMDDoorLogEvent eventName]
  -[HMDDoorLogEvent .cxx_destruct]
  -[HMDDoorLogEvent timeStamp]
  -[HMDDoorLogEvent characteristicUUID]
  -[HMDDoorLogEvent serializedEvent]
  -[HMDDoorLogEvent homePresence]
  -[HMDDoorLogEvent initWithDoorStatus:accessoryUUID:characteristicUUID:timeStamp:homeUUID:homePresence:]
  -[HMDDoorLogEvent doorStatus]


HMDCAMDEmbeddedDevice : NSObject <HMDCAMCommunicationProtocols>
 @property  BOOL filterNSDataLogging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDCAMDEmbeddedDevice valueForUndefinedKey:]
  -[HMDCAMDEmbeddedDevice .cxx_destruct]
  -[HMDCAMDEmbeddedDevice init]
  -[HMDCAMDEmbeddedDevice performCommandFromClass:method:arguments:error:]
  -[HMDCAMDEmbeddedDevice instanceOfClass:forShortName:]
  -[HMDCAMDEmbeddedDevice filterNSDataLogging]
  -[HMDCAMDEmbeddedDevice setFilterNSDataLogging:]


HMDRemoteEventRouterProtoKeepAliveMessage : PBCodable <NSCopying>
  // instance methods
  -[HMDRemoteEventRouterProtoKeepAliveMessage copyTo:]
  -[HMDRemoteEventRouterProtoKeepAliveMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoKeepAliveMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoKeepAliveMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoKeepAliveMessage readFrom:]
  -[HMDRemoteEventRouterProtoKeepAliveMessage writeTo:]
  -[HMDRemoteEventRouterProtoKeepAliveMessage isEqual:]


HMDMultiUserStatusController : HMFObject <HMFLogging>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDMultiUserStatusControllerDelegate> *delegate
 @property  long long multiUserState
 @property  unsigned long haveActiveSignedInAccount
 @property  unsigned long dataSyncState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMultiUserStatusController logCategory]

  // instance methods
  -[HMDMultiUserStatusController delegate]
  -[HMDMultiUserStatusController .cxx_destruct]
  -[HMDMultiUserStatusController initWithQueue:delegate:]
  -[HMDMultiUserStatusController queue]
  -[HMDMultiUserStatusController dataSyncState]
  -[HMDMultiUserStatusController setDataSyncState:]
  -[HMDMultiUserStatusController multiUserState]
  -[HMDMultiUserStatusController setMultiUserState:]
  -[HMDMultiUserStatusController didUpdateDataSyncState:]
  -[HMDMultiUserStatusController didChangeHasActiveAccountState:]
  -[HMDMultiUserStatusController haveActiveSignedInAccount]
  -[HMDMultiUserStatusController setHaveActiveSignedInAccount:]


AWDHomeKitCameraSettings : PBCodable <NSCopying>
 @property  BOOL hasIsRecordingEnabled
 @property  BOOL isRecordingEnabled
 @property  BOOL hasIsRecordingAudioEnabled
 @property  BOOL isRecordingAudioEnabled
 @property  BOOL hasRecordingEventTriggers
 @property  unsigned int recordingEventTriggers
 @property  BOOL hasIsSmartBulletinBoardNotificationEnabled
 @property  BOOL isSmartBulletinBoardNotificationEnabled
 @property  BOOL hasIsInclusionZone
 @property  BOOL isInclusionZone
 @property  BOOL hasIsReachabilityNotificationEnabled
 @property  BOOL isReachabilityNotificationEnabled
 @property  BOOL hasIsRecordingCapable
 @property  BOOL isRecordingCapable
 @property  BOOL hasNumActivityZonesBinString
 @property  NSString *numActivityZonesBinString

  // instance methods
  -[AWDHomeKitCameraSettings copyTo:]
  -[AWDHomeKitCameraSettings .cxx_destruct]
  -[AWDHomeKitCameraSettings mergeFrom:]
  -[AWDHomeKitCameraSettings dictionaryRepresentation]
  -[AWDHomeKitCameraSettings copyWithZone:]
  -[AWDHomeKitCameraSettings readFrom:]
  -[AWDHomeKitCameraSettings writeTo:]
  -[AWDHomeKitCameraSettings isEqual:]
  -[AWDHomeKitCameraSettings isSmartBulletinBoardNotificationEnabled]
  -[AWDHomeKitCameraSettings recordingEventTriggers]
  -[AWDHomeKitCameraSettings isRecordingAudioEnabled]
  -[AWDHomeKitCameraSettings setRecordingEventTriggers:]
  -[AWDHomeKitCameraSettings isRecordingCapable]
  -[AWDHomeKitCameraSettings isRecordingEnabled]
  -[AWDHomeKitCameraSettings setIsRecordingEnabled:]
  -[AWDHomeKitCameraSettings setHasIsRecordingEnabled:]
  -[AWDHomeKitCameraSettings hasIsRecordingEnabled]
  -[AWDHomeKitCameraSettings setIsRecordingAudioEnabled:]
  -[AWDHomeKitCameraSettings setHasIsRecordingAudioEnabled:]
  -[AWDHomeKitCameraSettings hasIsRecordingAudioEnabled]
  -[AWDHomeKitCameraSettings setHasRecordingEventTriggers:]
  -[AWDHomeKitCameraSettings hasRecordingEventTriggers]
  -[AWDHomeKitCameraSettings setIsSmartBulletinBoardNotificationEnabled:]
  -[AWDHomeKitCameraSettings setHasIsSmartBulletinBoardNotificationEnabled:]
  -[AWDHomeKitCameraSettings hasIsSmartBulletinBoardNotificationEnabled]
  -[AWDHomeKitCameraSettings setIsInclusionZone:]
  -[AWDHomeKitCameraSettings setHasIsInclusionZone:]
  -[AWDHomeKitCameraSettings hasIsInclusionZone]
  -[AWDHomeKitCameraSettings setIsReachabilityNotificationEnabled:]
  -[AWDHomeKitCameraSettings setHasIsReachabilityNotificationEnabled:]
  -[AWDHomeKitCameraSettings hasIsReachabilityNotificationEnabled]
  -[AWDHomeKitCameraSettings setIsRecordingCapable:]
  -[AWDHomeKitCameraSettings setHasIsRecordingCapable:]
  -[AWDHomeKitCameraSettings hasIsRecordingCapable]
  -[AWDHomeKitCameraSettings hasNumActivityZonesBinString]
  -[AWDHomeKitCameraSettings isInclusionZone]
  -[AWDHomeKitCameraSettings isReachabilityNotificationEnabled]
  -[AWDHomeKitCameraSettings numActivityZonesBinString]
  -[AWDHomeKitCameraSettings setNumActivityZonesBinString:]


HMDCloudAccount : HMFObject
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  NSOperationQueue *queue

  // instance methods
  -[HMDCloudAccount clientQueue]
  -[HMDCloudAccount .cxx_destruct]
  -[HMDCloudAccount queue]
  -[HMDCloudAccount initWithClientQueue:]
  -[HMDCloudAccount addAccountOperation:]


HMDCloudAccountOperation : NSOperation
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  @? operationBlock
 @property  NSUUID *identifier

  // instance methods
  -[HMDCloudAccountOperation identifier]
  -[HMDCloudAccountOperation clientQueue]
  -[HMDCloudAccountOperation .cxx_destruct]
  -[HMDCloudAccountOperation main]
  -[HMDCloudAccountOperation operationBlock]
  -[HMDCloudAccountOperation setOperationBlock:]
  -[HMDCloudAccountOperation initWithBlock:clientQueue:]


AWDHomeKitEventTriggerUserConfirmationReceiverSession : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasSessionID
 @property  NSString *sessionID
 @property  BOOL hasResultErrorCode
 @property  int resultErrorCode
 @property  BOOL hasUserResponseDelay
 @property  unsigned long userResponseDelay

  // instance methods
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setTimestamp:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession copyTo:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession sessionID]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession .cxx_destruct]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession mergeFrom:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setHasTimestamp:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession dictionaryRepresentation]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession hasTimestamp]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession copyWithZone:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession timestamp]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession readFrom:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession writeTo:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setSessionID:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession isEqual:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession hasSessionID]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setResultErrorCode:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setHasResultErrorCode:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession hasResultErrorCode]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession resultErrorCode]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession userResponseDelay]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setUserResponseDelay:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession setHasUserResponseDelay:]
  -[AWDHomeKitEventTriggerUserConfirmationReceiverSession hasUserResponseDelay]


HMDMediaGroupsAggregateDataGenerator : NSObject <HMDMediaGroupsAggregateDataGenerator>
  // instance methods
  -[HMDMediaGroupsAggregateDataGenerator aggregateDataWithDestinations:controllers:groups:]
  -[HMDMediaGroupsAggregateDataGenerator shouldIgnoreGroup:]
  -[HMDMediaGroupsAggregateDataGenerator transformGroup:withDestinations:]
  -[HMDMediaGroupsAggregateDataGenerator validDestinationsIdentifiersForGroup:withDestinations:]
  -[HMDMediaGroupsAggregateDataGenerator matchingDestinationWithIdentifier:withDestinations:]


HMDFetchedAccessorySettingsControllerKeyPathMapItem : NSObject
 @property  NSArray *keyPaths
 @property  <HMDFetchedSettingsDriver> *driver

  // instance methods
  -[HMDFetchedAccessorySettingsControllerKeyPathMapItem .cxx_destruct]
  -[HMDFetchedAccessorySettingsControllerKeyPathMapItem driver]
  -[HMDFetchedAccessorySettingsControllerKeyPathMapItem keyPaths]
  -[HMDFetchedAccessorySettingsControllerKeyPathMapItem initWithDriver:keyPaths:]


HMDFetchedAccessorySettingsControllerMutableKeyPathMap : NSObject
  // instance methods
  -[HMDFetchedAccessorySettingsControllerMutableKeyPathMap .cxx_destruct]


HMDFetchedAccessorySettingsController : NSObject <HMDFetchedSettingsDriverDelegate, HMFLogging, HMDLegacyAccessorySettingsAdaptorSettingsOperationProvider>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <HMDFetchedAccessorySettingsControllerDataSource> *dataSource
 @property  HMDFetchedAccessorySettingsControllerMutableKeyPathMap *driverMap
 @property  NSMutableSet *pendingFetchKeyPaths
 @property  NSNotificationCenter *notificationCenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDFetchedAccessorySettingsController logCategory]

  // instance methods
  -[HMDFetchedAccessorySettingsController notificationCenter]
  -[HMDFetchedAccessorySettingsController dataSource]
  -[HMDFetchedAccessorySettingsController .cxx_destruct]
  -[HMDFetchedAccessorySettingsController queue]
  -[HMDFetchedAccessorySettingsController start]
  -[HMDFetchedAccessorySettingsController fetchSettingsForKeyPaths:completion:]
  -[HMDFetchedAccessorySettingsController languageValueListWithCompletion:]
  -[HMDFetchedAccessorySettingsController updateSettingWithKeyPath:settingValue:completion:]
  -[HMDFetchedAccessorySettingsController driver:didUpdateSettings:]
  -[HMDFetchedAccessorySettingsController driver:didUpdatePrimaryUserInfo:]
  -[HMDFetchedAccessorySettingsController driverDidReload:]
  -[HMDFetchedAccessorySettingsController initWithQueue:dataSource:drivers:]
  -[HMDFetchedAccessorySettingsController initWithQueue:dataSource:drivers:notificationCenter:]
  -[HMDFetchedAccessorySettingsController cachedSettingForKeyPath:]
  -[HMDFetchedAccessorySettingsController driverMap]
  -[HMDFetchedAccessorySettingsController pendingFetchKeyPaths]
  -[HMDFetchedAccessorySettingsController setPendingFetchKeyPaths:]


HMDCameraSnapshotIDSRelayReceiver : HMDCameraSnapshotIDSRelay <IDSServiceDelegate, IDSSessionDelegate, HMFLogging>
 @property  IDSSession *idsSession
 @property  <HMDCameraSnapshotIDSRelayReceiverDelegate> *delegate
 @property  HMDCameraIDSSessionInviterDeviceVerifier *sessionInviterDeviceVerifier
 @property  NSUUID *machOUUID
 @property  NSMutableData *relayData
 @property  NSMutableData *expectedByteCountData
 @property  unsigned long expectedByteCount
 @property  unsigned long receivedByteCount
 @property  NSObject<OS_dispatch_source> *socketSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSRelayReceiver logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSRelayReceiver service:account:inviteReceivedForSession:fromID:withContext:]
  -[HMDCameraSnapshotIDSRelayReceiver logIdentifier]
  -[HMDCameraSnapshotIDSRelayReceiver delegate]
  -[HMDCameraSnapshotIDSRelayReceiver dealloc]
  -[HMDCameraSnapshotIDSRelayReceiver .cxx_destruct]
  -[HMDCameraSnapshotIDSRelayReceiver receivedByteCount]
  -[HMDCameraSnapshotIDSRelayReceiver sessionStarted:]
  -[HMDCameraSnapshotIDSRelayReceiver sessionEnded:withReason:error:]
  -[HMDCameraSnapshotIDSRelayReceiver setReceivedByteCount:]
  -[HMDCameraSnapshotIDSRelayReceiver idsSession]
  -[HMDCameraSnapshotIDSRelayReceiver setIdsSession:]
  -[HMDCameraSnapshotIDSRelayReceiver sessionInviterDeviceVerifier]
  -[HMDCameraSnapshotIDSRelayReceiver socketSource]
  -[HMDCameraSnapshotIDSRelayReceiver setSocketSource:]
  -[HMDCameraSnapshotIDSRelayReceiver initWithSessionID:logIdentifier:machOUUID:workQueue:sessionInviterDeviceVerifier:delegate:]
  -[HMDCameraSnapshotIDSRelayReceiver _startDataReceive]
  -[HMDCameraSnapshotIDSRelayReceiver _handleDataFromSocket:]
  -[HMDCameraSnapshotIDSRelayReceiver _didReceiveData:error:]
  -[HMDCameraSnapshotIDSRelayReceiver machOUUID]
  -[HMDCameraSnapshotIDSRelayReceiver relayData]
  -[HMDCameraSnapshotIDSRelayReceiver expectedByteCountData]
  -[HMDCameraSnapshotIDSRelayReceiver expectedByteCount]
  -[HMDCameraSnapshotIDSRelayReceiver setExpectedByteCount:]


HMDCloudTransaction : HMFObject
 @property  unsigned long transactionType
 @property  HMDCloudZoneChange *cloudZoneChange
 @property  NSArray *objectChanges
 @property  HMDCloudChange *homeDataChange
 @property  NSUUID *identifier
 @property  HMDCloudZone *cloudZone
 @property  HMFOSTransaction *osTransaction
 @property  CKRecordID *privateZoneRootRecordID
 @property  NSArray *allTransactionStoreRowIDs
 @property  NSArray *processedTransactionStoreRowIDs
 @property  BOOL decryptionFailed
 @property  BOOL encryptionFailed
 @property  BOOL controllerIdentifierChanged
 @property  BOOL needConflictResolution
 @property  BOOL iCloudSwitchStateEnabled
 @property  BOOL legacyTransaction
 @property  BOOL metadataTransaction
 @property  BOOL homeManagerTransaction
 @property  BOOL homeTransaction
 @property  CKServerChangeToken *updatedServerChangeToken
 @property  BOOL temporaryCache
 @property  BOOL zoneHasNoLocalData
 @property  BOOL createZone
 @property  BOOL zoneWasCreated
 @property  BOOL deleteZone
 @property  BOOL zoneWasDeleted
 @property  NSArray *recordsToSave
 @property  NSArray *recordsToDelete
 @property  BOOL hasValidChanges
 @property  BOOL doRecordsExistInCache

  // class methods
  +[HMDCloudTransaction shortDescription]

  // instance methods
  -[HMDCloudTransaction recordsToSave]
  -[HMDCloudTransaction identifier]
  -[HMDCloudTransaction .cxx_destruct]
  -[HMDCloudTransaction transactionType]
  -[HMDCloudTransaction cloudZone]
  -[HMDCloudTransaction shortDescription]
  -[HMDCloudTransaction setTransactionType:]
  -[HMDCloudTransaction init]
  -[HMDCloudTransaction setCloudZone:]
  -[HMDCloudTransaction allTransactionStoreRowIDs]
  -[HMDCloudTransaction hasValidChanges]
  -[HMDCloudTransaction processedTransactionStoreRowIDs]
  -[HMDCloudTransaction changeWithObjectID:]
  -[HMDCloudTransaction cachedCloudRecordWithObjectID:completionHandler:]
  -[HMDCloudTransaction cachedCloudRecordWithObjectID:]
  -[HMDCloudTransaction doRecordsExistInCache]
  -[HMDCloudTransaction changeWithRecordName:]
  -[HMDCloudTransaction addChangeWithObjectChange:]
  -[HMDCloudTransaction addChangeWithRecord:]
  -[HMDCloudTransaction addChangeWithDeletedRecordID:]
  -[HMDCloudTransaction loadCloudRecordsAndDetermineDeletesFromCache:]
  -[HMDCloudTransaction moreChangesToProcess]
  -[HMDCloudTransaction setAllChangedAsProcessed]
  -[HMDCloudTransaction removeChangeWithObjectID:]
  -[HMDCloudTransaction fetchBatchToUpload:]
  -[HMDCloudTransaction setSaveAsProcessedWithRecord:]
  -[HMDCloudTransaction resetRecordWithRecordID:]
  -[HMDCloudTransaction setDeleteAsProcessedWithRecordID:]
  -[HMDCloudTransaction objectChanges]
  -[HMDCloudTransaction isTemporaryCache]
  -[HMDCloudTransaction decryptionFailed]
  -[HMDCloudTransaction encryptionFailed]
  -[HMDCloudTransaction controllerIdentifierChanged]
  -[HMDCloudTransaction privateZoneRootRecordID]
  -[HMDCloudTransaction shouldCreateZone]
  -[HMDCloudTransaction iCloudSwitchStateEnabled]
  -[HMDCloudTransaction setICloudSwitchStateEnabled:]
  -[HMDCloudTransaction doesRecordExistWithObjectID:]
  -[HMDCloudTransaction doesRecordExistInCacheWithObjectID:]
  -[HMDCloudTransaction initWithType:temporaryCache:]
  -[HMDCloudTransaction initWithType:temporaryCache:noLocalData:]
  -[HMDCloudTransaction updateCloudZone:]
  -[HMDCloudTransaction osTransaction]
  -[HMDCloudTransaction setOsTransaction:]
  -[HMDCloudTransaction updateCloudCache]
  -[HMDCloudTransaction isLegacyTransaction]
  -[HMDCloudTransaction isMetadataTransaction]
  -[HMDCloudTransaction isHomeManagerTransaction]
  -[HMDCloudTransaction isHomeTransaction]
  -[HMDCloudTransaction loadObjectChanges]
  -[HMDCloudTransaction replayTransaction:stagedTransaction:]
  -[HMDCloudTransaction needConflictResolution]
  -[HMDCloudTransaction setNeedConflictResolution:]
  -[HMDCloudTransaction updatedServerChangeToken]
  -[HMDCloudTransaction setUpdatedServerChangeToken:]
  -[HMDCloudTransaction zoneHasNoLocalData]
  -[HMDCloudTransaction setCreateZone:]
  -[HMDCloudTransaction wasZoneCreated]
  -[HMDCloudTransaction setZoneWasCreated:]
  -[HMDCloudTransaction shouldDeleteZone]
  -[HMDCloudTransaction setDeleteZone:]
  -[HMDCloudTransaction wasZoneDeleted]
  -[HMDCloudTransaction setZoneWasDeleted:]
  -[HMDCloudTransaction recordsToDelete]
  -[HMDCloudTransaction cloudZoneChange]
  -[HMDCloudTransaction setCloudZoneChange:]
  -[HMDCloudTransaction homeDataChange]
  -[HMDCloudTransaction setHomeDataChange:]


HMDHomeNaturalLightingContextUpdater : HMFObject <HMFLogging>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDLightProfileDataSource> *dataSource
 @property  long long curveMinimumBrightness
 @property  long long curveMaximumBrightness
 @property  NSString *logIdentifier
 @property  NSNotificationCenter *notificationCenter
 @property  HMDNaturalLightingCurve *curve
 @property  BOOL demoModeEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeNaturalLightingContextUpdater logCategory]

  // instance methods
  -[HMDHomeNaturalLightingContextUpdater notificationCenter]
  -[HMDHomeNaturalLightingContextUpdater configure]
  -[HMDHomeNaturalLightingContextUpdater setCurve:]
  -[HMDHomeNaturalLightingContextUpdater home]
  -[HMDHomeNaturalLightingContextUpdater curve]
  -[HMDHomeNaturalLightingContextUpdater logIdentifier]
  -[HMDHomeNaturalLightingContextUpdater dataSource]
  -[HMDHomeNaturalLightingContextUpdater workQueue]
  -[HMDHomeNaturalLightingContextUpdater .cxx_destruct]
  -[HMDHomeNaturalLightingContextUpdater isDemoModeEnabled]
  -[HMDHomeNaturalLightingContextUpdater handleResidentDeviceUpdated:]
  -[HMDHomeNaturalLightingContextUpdater initWithHome:demoModeEnabled:]
  -[HMDHomeNaturalLightingContextUpdater initWithHome:workQueue:demoModeEnabled:logIdentifier:notificationCenter:dataSource:]
  -[HMDHomeNaturalLightingContextUpdater initalizeCurve]
  -[HMDHomeNaturalLightingContextUpdater areEncodedBrightnessLevelTransitionPointsValid:]
  -[HMDHomeNaturalLightingContextUpdater colorTemperatureTransitionPointsForMaximumBrightnessWithEncodeNaturalLightingCurve:]
  -[HMDHomeNaturalLightingContextUpdater colorTemperatureTransitionPointsForMinimumBrightnessWithEncodeNaturalLightingCurve:]
  -[HMDHomeNaturalLightingContextUpdater timeOfDayForMinimumBrightnessTransitionPoint:maximumBrighnessTransitionPoint:]
  -[HMDHomeNaturalLightingContextUpdater colorTemperatureForTransitionPoint:]
  -[HMDHomeNaturalLightingContextUpdater updateNaturalLightingContext]
  -[HMDHomeNaturalLightingContextUpdater curveMinimumBrightness]
  -[HMDHomeNaturalLightingContextUpdater setCurveMinimumBrightness:]
  -[HMDHomeNaturalLightingContextUpdater curveMaximumBrightness]
  -[HMDHomeNaturalLightingContextUpdater setCurveMaximumBrightness:]


HMDUserNotificationCenter : HMFObject <UNUserNotificationCenterDelegate>
 @property  UNUserNotificationCenter *userNotificationCenter
 @property  <HMDUserNotificationCenterDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDUserNotificationCenter logCategory]

  // instance methods
  -[HMDUserNotificationCenter setDelegate:]
  -[HMDUserNotificationCenter delegate]
  -[HMDUserNotificationCenter .cxx_destruct]
  -[HMDUserNotificationCenter userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]
  -[HMDUserNotificationCenter userNotificationCenter]
  -[HMDUserNotificationCenter initWithBundleIdentifier:]
  -[HMDUserNotificationCenter setBadgeNumber:]
  -[HMDUserNotificationCenter fetchAreUserNotificationsEnabledWithCompletion:]
  -[HMDUserNotificationCenter updateContent:forNotificationWithRequestIdentifier:]
  -[HMDUserNotificationCenter configureWithNotificationCategories:]
  -[HMDUserNotificationCenter showNotificationWithTitle:body:threadIdentifier:categoryIdentifier:requestIdentifier:date:attachments:userInfo:shouldIgnoreDoNotDisturb:interruptionLevel:]
  -[HMDUserNotificationCenter removeNotificationRequestsWithIdentifiers:]
  -[HMDUserNotificationCenter _showNotification:]


HMDAddAccessoryRequestInformation : NSObject <NSSecureCoding>
 @property  NSString *bundleID
 @property  NSString *accessoryName
 @property  HMAccessoryCategory *accessoryCategory
 @property  HMDAccessory *accessory
 @property  HMSetupAccessoryDescription *accessoryDescription
 @property  NSUUID *identifier
 @property  HMFTimer *cleanupTimer

  // class methods
  +[HMDAddAccessoryRequestInformation supportsSecureCoding]

  // instance methods
  -[HMDAddAccessoryRequestInformation accessoryName]
  -[HMDAddAccessoryRequestInformation accessory]
  -[HMDAddAccessoryRequestInformation identifier]
  -[HMDAddAccessoryRequestInformation encodeWithCoder:]
  -[HMDAddAccessoryRequestInformation accessoryCategory]
  -[HMDAddAccessoryRequestInformation .cxx_destruct]
  -[HMDAddAccessoryRequestInformation bundleID]
  -[HMDAddAccessoryRequestInformation initWithCoder:]
  -[HMDAddAccessoryRequestInformation accessoryDescription]
  -[HMDAddAccessoryRequestInformation initWithAccessoryName:category:bundleID:accessoryDescription:]
  -[HMDAddAccessoryRequestInformation startCleanupTimerForDelegate:delegateQueue:]
  -[HMDAddAccessoryRequestInformation cancelCleanupTimer]
  -[HMDAddAccessoryRequestInformation storeIdentifierFromUnassociatedAccessory:setupCode:]
  -[HMDAddAccessoryRequestInformation cleanupTimer]


HMDMediaGroupParticipantLocalDataStorage : HMFObject <HMFLogging, HMDMediaDestinationControllerLocalDataStorageHandler, HMDMediaDestinationLocalDataStorageHandler, HMDMediaGroupsAggregatorBackupReceiverDelegate, HMDMediaGroupsBackupLocalDataStorageHandler>
 @property  NSUUID *identifier
 @property  NSUserDefaults *userDefaults
 @property  <HMEEventForwarder> *eventForwarder
 @property  <HMELastEventStoreReadHandle> *eventStoreReadHandle
 @property  <HMDFeaturesDataSource> *featuresDataSource
 @property  HMMediaDestinationControllerData *destinationController
 @property  HMMediaDestination *destination
 @property  <HMDMediaGroupParticipantLocalDataStorageDataSource> *dataSource
 @property  HMDMediaGroupsAggregatorBackupReceiver *groupsBackupReceiver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaGroupParticipantLocalDataStorage logCategory]

  // instance methods
  -[HMDMediaGroupParticipantLocalDataStorage eventSource]
  -[HMDMediaGroupParticipantLocalDataStorage eventStoreReadHandle]
  -[HMDMediaGroupParticipantLocalDataStorage identifier]
  -[HMDMediaGroupParticipantLocalDataStorage userDefaults]
  -[HMDMediaGroupParticipantLocalDataStorage logIdentifier]
  -[HMDMediaGroupParticipantLocalDataStorage destination]
  -[HMDMediaGroupParticipantLocalDataStorage dataSource]
  -[HMDMediaGroupParticipantLocalDataStorage .cxx_destruct]
  -[HMDMediaGroupParticipantLocalDataStorage destinationController]
  -[HMDMediaGroupParticipantLocalDataStorage setDataSource:]
  -[HMDMediaGroupParticipantLocalDataStorage participantData]
  -[HMDMediaGroupParticipantLocalDataStorage topicName]
  -[HMDMediaGroupParticipantLocalDataStorage featuresDataSource]
  -[HMDMediaGroupParticipantLocalDataStorage eventForwarder]
  -[HMDMediaGroupParticipantLocalDataStorage configureWithHome:messageDispatcher:]
  -[HMDMediaGroupParticipantLocalDataStorage updateAudioGroupIdentifier:]
  -[HMDMediaGroupParticipantLocalDataStorage updateDestinationController:]
  -[HMDMediaGroupParticipantLocalDataStorage updateDestinationControllerDestinationIdentifier:]
  -[HMDMediaGroupParticipantLocalDataStorage updateDestinationControllerAvailableDestinationIdentifiers:]
  -[HMDMediaGroupParticipantLocalDataStorage updateMediaDestination:]
  -[HMDMediaGroupParticipantLocalDataStorage updateDestinationSupportOptions:]
  -[HMDMediaGroupParticipantLocalDataStorage didReceiveBackupData:forBackupReceiver:]
  -[HMDMediaGroupParticipantLocalDataStorage updateBackupGroupData:]
  -[HMDMediaGroupParticipantLocalDataStorage initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:]
  -[HMDMediaGroupParticipantLocalDataStorage initWithIdentifier:backUpReciever:userDefaults:eventForwarder:eventStoreReadHandle:featuresDataSource:]
  -[HMDMediaGroupParticipantLocalDataStorage protoParticipantData]
  -[HMDMediaGroupParticipantLocalDataStorage lastCachedEventParticipantData]
  -[HMDMediaGroupParticipantLocalDataStorage createDefaultParticipantData]
  -[HMDMediaGroupParticipantLocalDataStorage migrateWithExpectedSupportOptions:]
  -[HMDMediaGroupParticipantLocalDataStorage _migratedDestinationFromDestination:withSupportOptions:]
  -[HMDMediaGroupParticipantLocalDataStorage _migratedDestinationForRoomGroupsFromDestination:]
  -[HMDMediaGroupParticipantLocalDataStorage hasDataToPublishInParticipantData:]
  -[HMDMediaGroupParticipantLocalDataStorage publishCachedObjectIfNeeded]
  -[HMDMediaGroupParticipantLocalDataStorage publishCachedObject]
  -[HMDMediaGroupParticipantLocalDataStorage groupsBackupReceiver]


HMDCameraStreamSession : HMFObject <HMFLogging>
 @property  HMDCameraStreamSessionID *sessionID
 @property  HMDStreamingManager *streamingManager
 @property  HMDStreamingCapabilities *streamingCapabilities
 @property  HMDCameraProtocolParameters *protocolParameters
 @property  HMDCameraVideoTierParameters *videoTierParameters
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraStreamSession logCategory]

  // instance methods
  -[HMDCameraStreamSession logIdentifier]
  -[HMDCameraStreamSession sessionID]
  -[HMDCameraStreamSession .cxx_destruct]
  -[HMDCameraStreamSession streamingCapabilities]
  -[HMDCameraStreamSession initWithSessionID:streamingTierType:remoteCapabilities:streamPreference:]
  -[HMDCameraStreamSession videoTierParameters]
  -[HMDCameraStreamSession negotiatedParameters]
  -[HMDCameraStreamSession streamingManager]
  -[HMDCameraStreamSession setStreamingManager:]
  -[HMDCameraStreamSession protocolParameters]
  -[HMDCameraStreamSession setProtocolParameters:]
  -[HMDCameraStreamSession setVideoTierParameters:]


HMDTimeBasedFlagDaily : NSObject <HMDTimeBasedFlag>
 @property  <HMDTimeBasedFlagContext> *context
 @property  HMDMetricsDateProvider *dateProvider
 @property  unsigned long bits
 @property  NSDate *bit0Date

  // class methods
  +[HMDTimeBasedFlagDaily convertLegacyFlagBits:lastSaveTIme:]

  // instance methods
  -[HMDTimeBasedFlagDaily dateProvider]
  -[HMDTimeBasedFlagDaily bits]
  -[HMDTimeBasedFlagDaily .cxx_destruct]
  -[HMDTimeBasedFlagDaily context]
  -[HMDTimeBasedFlagDaily serializeToDictionary]
  -[HMDTimeBasedFlagDaily initWithSerializedFlag:context:dateProvider:]
  -[HMDTimeBasedFlagDaily setCurrentBit]
  -[HMDTimeBasedFlagDaily setBitForDate:]
  -[HMDTimeBasedFlagDaily currentBits]
  -[HMDTimeBasedFlagDaily bitsForDate:bitCount:outValidBitCount:]
  -[HMDTimeBasedFlagDaily initWithContext:dateProvider:]
  -[HMDTimeBasedFlagDaily _bitMaskForDate:]
  -[HMDTimeBasedFlagDaily setBits:]
  -[HMDTimeBasedFlagDaily bit0Date]
  -[HMDTimeBasedFlagDaily setBit0Date:]


HMDCameraClipAddModelsOperation : HMDCameraClipOperation <HMBLocalZoneMirrorOutputObserver>
 @property  NSSet *modelsToAdd
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraClipAddModelsOperation logCategory]

  // instance methods
  -[HMDCameraClipAddModelsOperation main]
  -[HMDCameraClipAddModelsOperation localZone:willPerformMirrorOutputForModel:]
  -[HMDCameraClipAddModelsOperation modelsToAdd]
  -[HMDCameraClipAddModelsOperation updateMirrorOutputModel:]


AWDHomeKitMultiUserSettings : PBCodable <NSCopying>
 @property  BOOL hasIsOwner
 @property  BOOL isOwner
 @property  NSMutableArray *homeKitMultiUserSettingsValuesByKeyPaths

  // class methods
  +[AWDHomeKitMultiUserSettings homeKitMultiUserSettingsValuesByKeyPathType]

  // instance methods
  -[AWDHomeKitMultiUserSettings copyTo:]
  -[AWDHomeKitMultiUserSettings .cxx_destruct]
  -[AWDHomeKitMultiUserSettings mergeFrom:]
  -[AWDHomeKitMultiUserSettings dictionaryRepresentation]
  -[AWDHomeKitMultiUserSettings copyWithZone:]
  -[AWDHomeKitMultiUserSettings readFrom:]
  -[AWDHomeKitMultiUserSettings writeTo:]
  -[AWDHomeKitMultiUserSettings isEqual:]
  -[AWDHomeKitMultiUserSettings isOwner]
  -[AWDHomeKitMultiUserSettings setIsOwner:]
  -[AWDHomeKitMultiUserSettings setHasIsOwner:]
  -[AWDHomeKitMultiUserSettings hasIsOwner]
  -[AWDHomeKitMultiUserSettings clearHomeKitMultiUserSettingsValuesByKeyPaths]
  -[AWDHomeKitMultiUserSettings addHomeKitMultiUserSettingsValuesByKeyPath:]
  -[AWDHomeKitMultiUserSettings homeKitMultiUserSettingsValuesByKeyPathsCount]
  -[AWDHomeKitMultiUserSettings homeKitMultiUserSettingsValuesByKeyPathAtIndex:]
  -[AWDHomeKitMultiUserSettings homeKitMultiUserSettingsValuesByKeyPaths]
  -[AWDHomeKitMultiUserSettings setHomeKitMultiUserSettingsValuesByKeyPaths:]


HMDNotificationRegistration : HMFObject <HMFLogging>
 @property  NSMutableSet *registeredNotifications
 @property  <HMFLogging> *registerer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNotificationRegistration logCategory]

  // instance methods
  -[HMDNotificationRegistration logIdentifier]
  -[HMDNotificationRegistration .cxx_destruct]
  -[HMDNotificationRegistration registeredNotifications]
  -[HMDNotificationRegistration initWithRegisterer:]
  -[HMDNotificationRegistration addObserver:name:object:]
  -[HMDNotificationRegistration registerer]


HMDHomeLocalDeviceCapabilitiesDataSource : NSObject <HMDHomeLocalDeviceCapabilitiesDataSource>
 @property  BOOL supportsHomeKitDataStream
 @property  BOOL isResidentCapable
 @property  BOOL supportsHomeInvitation
 @property  BOOL supportsRemoteAccess
 @property  BOOL supportsAddingAccessory
 @property  BOOL isCompanionCapable
 @property  BOOL supportsBulletinBoard
 @property  BOOL supportsSiriUnsecuringActionsWithWatchAuth
 @property  BOOL supportsSiriUnsecuringActionsWithNoPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsHomeInvitation]
  -[HMDHomeLocalDeviceCapabilitiesDataSource isCompanionCapable]
  -[HMDHomeLocalDeviceCapabilitiesDataSource isResidentCapable]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsRemoteAccess]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsAddingAccessory]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsHomeKitDataStream]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsBulletinBoard]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsSiriUnsecuringActionsWithNoPasscode]
  -[HMDHomeLocalDeviceCapabilitiesDataSource supportsSiriUnsecuringActionsWithWatchAuth]


HMDCameraClipFeedbackUploader : HMFObject
  // instance methods
  -[HMDCameraClipFeedbackUploader uploadFeedbackWithCameraProfileUUID:clipModel:completionHandler:]


HMDCameraClipFeedbackManager : HMFObject <HMFLogging, HMFMessageReceiver>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMBLocalZone *localZone
 @property  HMBCloudZone *cloudZone
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDCameraClipFeedbackUploader *feedbackUploader
 @property  NSUUID *cameraProfileUUID
 @property  HMDHome *home
 @property  NSNotificationCenter *notificationCenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDCameraClipFeedbackManager logCategory]

  // instance methods
  -[HMDCameraClipFeedbackManager notificationCenter]
  -[HMDCameraClipFeedbackManager home]
  -[HMDCameraClipFeedbackManager logIdentifier]
  -[HMDCameraClipFeedbackManager workQueue]
  -[HMDCameraClipFeedbackManager .cxx_destruct]
  -[HMDCameraClipFeedbackManager cloudZone]
  -[HMDCameraClipFeedbackManager messageTargetUUID]
  -[HMDCameraClipFeedbackManager localZone]
  -[HMDCameraClipFeedbackManager messageReceiveQueue]
  -[HMDCameraClipFeedbackManager messageDispatcher]
  -[HMDCameraClipFeedbackManager cameraProfileUUID]
  -[HMDCameraClipFeedbackManager isCurrentDeviceConfirmedPrimaryResident]
  -[HMDCameraClipFeedbackManager handlePrimaryResidentUpdateNotification:]
  -[HMDCameraClipFeedbackManager _performCloudPull]
  -[HMDCameraClipFeedbackManager _handleSubmitClipsMessage:]
  -[HMDCameraClipFeedbackManager _handleFindAndUploadSubmittedClipsMessage:]
  -[HMDCameraClipFeedbackManager initWithLocalZone:cloudZone:home:messageDispatcher:cameraProfileUUID:messageTargetUUID:feedbackUploader:workQueue:]
  -[HMDCameraClipFeedbackManager configureWithHome:deviceIsResidentCapable:]
  -[HMDCameraClipFeedbackManager findAndUploadSubmittedClips]
  -[HMDCameraClipFeedbackManager _uploadNextClipFromQueryResult:]
  -[HMDCameraClipFeedbackManager _notifyPrimaryResidentThatClipsWereSubmitted]
  -[HMDCameraClipFeedbackManager feedbackUploader]


HMDMediaPlaybackAction : HMDAction <NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  HMDHome *home
 @property  NSSet *mediaProfiles
 @property  NSNumber *volume
 @property  MPPlaybackArchive *playbackArchive
 @property  long long state
 @property  NSSet *profileUUIDs
 @property  HMDMediaPlaybackActionAsCharacteristicWriteRequests *convertedCharacteristicWriteRequests
 @property  BOOL encodePlaybackArchiveForExecution
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaPlaybackAction supportsSecureCoding]
  +[HMDMediaPlaybackAction logCategory]
  +[HMDMediaPlaybackAction actionWithDictionaryRepresentation:home:]
  +[HMDMediaPlaybackAction isPlaybackActionValidWithProfiles:state:volume:]

  // instance methods
  -[HMDMediaPlaybackAction modelClass]
  -[HMDMediaPlaybackAction home]
  -[HMDMediaPlaybackAction validate]
  -[HMDMediaPlaybackAction encodeWithCoder:]
  -[HMDMediaPlaybackAction type]
  -[HMDMediaPlaybackAction state]
  -[HMDMediaPlaybackAction .cxx_destruct]
  -[HMDMediaPlaybackAction setVolume:]
  -[HMDMediaPlaybackAction volume]
  -[HMDMediaPlaybackAction dictionaryRepresentation]
  -[HMDMediaPlaybackAction setState:]
  -[HMDMediaPlaybackAction initWithCoder:]
  -[HMDMediaPlaybackAction setHome:]
  -[HMDMediaPlaybackAction playbackArchive]
  -[HMDMediaPlaybackAction mediaProfiles]
  -[HMDMediaPlaybackAction setMediaProfiles:]
  -[HMDMediaPlaybackAction setPlaybackArchive:]
  -[HMDMediaPlaybackAction associatedAccessories]
  -[HMDMediaPlaybackAction transactionObjectUpdated:newValues:message:]
  -[HMDMediaPlaybackAction transactionObjectRemoved:message:]
  -[HMDMediaPlaybackAction isAssociatedWithAccessory:]
  -[HMDMediaPlaybackAction modelObjectWithChangeType:version:]
  -[HMDMediaPlaybackAction stateDump]
  -[HMDMediaPlaybackAction executeWithSource:clientName:completionHandler:]
  -[HMDMediaPlaybackAction isUnsecuringAction]
  -[HMDMediaPlaybackAction initWithModelObject:parent:error:]
  -[HMDMediaPlaybackAction configureWithHome:]
  -[HMDMediaPlaybackAction initWithUUID:mediaProfiles:playbackState:volume:playbackArchive:actionSet:]
  -[HMDMediaPlaybackAction convertedCharacteristicWriteRequests]
  -[HMDMediaPlaybackAction _processPlaybackActionModelUpdated:message:]
  -[HMDMediaPlaybackAction modelObjectWithUpdatedMediaProfiles:]
  -[HMDMediaPlaybackAction encodePlaybackArchiveForExecution]
  -[HMDMediaPlaybackAction setEncodePlaybackArchiveForExecution:]
  -[HMDMediaPlaybackAction profileUUIDs]
  -[HMDMediaPlaybackAction setProfileUUIDs:]


HMDMediaPlaybackActionModel : HMDActionModel
 @property  NSSet *profiles
 @property  NSSet *accessories
 @property  NSSet *services
 @property  NSNumber *volume
 @property  MPPlaybackArchive *encodedPlaybackArchive
 @property  NSNumber *state

  // class methods
  +[HMDMediaPlaybackActionModel properties]
  +[HMDMediaPlaybackActionModel schemaHashRoot]

  // instance methods
  -[HMDMediaPlaybackActionModel validate]
  -[HMDMediaPlaybackActionModel dependentUUIDs]
  -[HMDMediaPlaybackActionModel loadModelWithActionInformation:]
  -[HMDMediaPlaybackActionModel validForStorage]


HMDAccessoryRetrievalCompletionTuple : HMFObject <HMFTimerDelegate>
 @property  HMDHome *home
 @property  HMDAccessory *accessory
 @property  NSMutableArray *completions
 @property  long long linkType
 @property  double retrievalTimeout
 @property  HMFTimer *timer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAccessoryRetrievalCompletionTuple accessory]
  -[HMDAccessoryRetrievalCompletionTuple linkType]
  -[HMDAccessoryRetrievalCompletionTuple home]
  -[HMDAccessoryRetrievalCompletionTuple timerDidFire:]
  -[HMDAccessoryRetrievalCompletionTuple addCompletion:]
  -[HMDAccessoryRetrievalCompletionTuple setAccessory:]
  -[HMDAccessoryRetrievalCompletionTuple .cxx_destruct]
  -[HMDAccessoryRetrievalCompletionTuple setTimer:]
  -[HMDAccessoryRetrievalCompletionTuple stop]
  -[HMDAccessoryRetrievalCompletionTuple timer]
  -[HMDAccessoryRetrievalCompletionTuple setCompletions:]
  -[HMDAccessoryRetrievalCompletionTuple start]
  -[HMDAccessoryRetrievalCompletionTuple completions]
  -[HMDAccessoryRetrievalCompletionTuple setLinkType:]
  -[HMDAccessoryRetrievalCompletionTuple setHome:]
  -[HMDAccessoryRetrievalCompletionTuple initWithHome:accessory:linkType:]
  -[HMDAccessoryRetrievalCompletionTuple retrievalTimeout]
  -[HMDAccessoryRetrievalCompletionTuple setRetrievalTimeout:]


HMDMessageHandler : HMFObject <HMDMessageHandlerQueuedMessageDelegate, HMFLogging, HMFMessageReceiver>
 @property  HMDMessageHandlerMetricsDispatcher *metricsDispatcher
 @property  HMDAppleAccountManager *appleAccountManager
 @property  <HMDMessageHandlerDataSource> *dataSource
 @property  NSArray *ownerPrivateRemoteMessages
 @property  NSArray *adminPrivateRemoteMessages
 @property  NSArray *internalMessages
 @property  NSArray *notifications
 @property  NSDictionary *notificationsToObject
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSNotificationCenter *notificationCenter
 @property  BOOL hasQueuedIncomingMessages
 @property  BOOL hasQueuedOutgoingMessages
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMessageHandler logCategory]

  // instance methods
  -[HMDMessageHandler notificationCenter]
  -[HMDMessageHandler logIdentifier]
  -[HMDMessageHandler dataSource]
  -[HMDMessageHandler attributeDescriptions]
  -[HMDMessageHandler privateDescription]
  -[HMDMessageHandler .cxx_destruct]
  -[HMDMessageHandler messageTargetUUID]
  -[HMDMessageHandler notifications]
  -[HMDMessageHandler registerForNotifications]
  -[HMDMessageHandler setDataSource:]
  -[HMDMessageHandler messageDispatcher]
  -[HMDMessageHandler metricsDispatcher]
  -[HMDMessageHandler configureWithHome:]
  -[HMDMessageHandler registerForMessagesWithHome:]
  -[HMDMessageHandler appleAccountManager]
  -[HMDMessageHandler routeMessage:]
  -[HMDMessageHandler relayMessage:]
  -[HMDMessageHandler initWithMessageTargetUUID:messageDispatcher:notificationCenter:ownerPrivateRemoteMessages:adminPrivateRemoteMessages:internalMessages:notifications:notificationsToObject:]
  -[HMDMessageHandler didTriggerMessageHandlerQueuedMessage:]
  -[HMDMessageHandler initWithMessageTargetUUID:messageDispatcher:notificationCenter:ownerPrivateRemoteMessages:adminPrivateRemoteMessages:internalMessages:notifications:notificationsToObject:appleAccountManager:metricsDispatcher:]
  -[HMDMessageHandler registerForSPIRemoteMessages:home:userPrivilege:internalBuildOnly:]
  -[HMDMessageHandler hasQueuedIncomingMessages]
  -[HMDMessageHandler queuedIncomingMessages]
  -[HMDMessageHandler queueIncomingMessage:]
  -[HMDMessageHandler dequeueIncomingMessage:]
  -[HMDMessageHandler dequeueQueuedIncomingMessages]
  -[HMDMessageHandler hasQueuedIncomingMessage:]
  -[HMDMessageHandler queueOutgoingMessage:]
  -[HMDMessageHandler associateDevice:withOutgoingMessage:]
  -[HMDMessageHandler dequeueOutgoingMessage:]
  -[HMDMessageHandler _cleanUpDeviceMappingsForMessage:]
  -[HMDMessageHandler hasQueuedOutgoingMessage:]
  -[HMDMessageHandler queuedOutgoingMessages]
  -[HMDMessageHandler queuedOutgoingMessagesForDevice:]
  -[HMDMessageHandler routeMessage:shouldQueue:]
  -[HMDMessageHandler relayMessage:shouldQueue:]
  -[HMDMessageHandler isReadyForIncomingMessage:error:]
  -[HMDMessageHandler shouldRelayIncomingMessage:error:]
  -[HMDMessageHandler hasQueuedOutgoingMessages]
  -[HMDMessageHandler hasQueuedOutgoingMessagesForDevice:]
  -[HMDMessageHandler sendQueuedOutgoingMessages]
  -[HMDMessageHandler sendQueuedOutgoingMessagesForDevice:]
  -[HMDMessageHandler sendQueuedOutgoingMessages:]
  -[HMDMessageHandler routeQueuedIncomingMessages]
  -[HMDMessageHandler selectorForName:]
  -[HMDMessageHandler deviceForMessage:]
  -[HMDMessageHandler currentAccountDevice]
  -[HMDMessageHandler isReadyForOutgoingMessaging]
  -[HMDMessageHandler handleAccountAddedDeviceNotification:]
  -[HMDMessageHandler triggerQueuedOutgoingMessagesTimeouts]
  -[HMDMessageHandler triggerQueuedIncomingMessagesTimeouts]
  -[HMDMessageHandler didTriggerQueuedIncomingMessage:]
  -[HMDMessageHandler didTriggerQueuedOutgoingMessage:]
  -[HMDMessageHandler ownerPrivateRemoteMessages]
  -[HMDMessageHandler adminPrivateRemoteMessages]
  -[HMDMessageHandler internalMessages]
  -[HMDMessageHandler notificationsToObject]


HMDXPCKeyedArchiver : HMFObject
 @property  NSKeyedArchiver *archiver

  // instance methods
  -[HMDXPCKeyedArchiver _configure]
  -[HMDXPCKeyedArchiver archiver]
  -[HMDXPCKeyedArchiver encodedData]
  -[HMDXPCKeyedArchiver encodeObject:forKey:]
  -[HMDXPCKeyedArchiver dealloc]
  -[HMDXPCKeyedArchiver .cxx_destruct]
  -[HMDXPCKeyedArchiver finishEncoding]
  -[HMDXPCKeyedArchiver initForWritingWithMessage:]


HMDSoftwareUpdateManager : HMFObject <HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  NSHashTable *activeClients
 @property  HMDAppleMediaAccessory *accessory
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSoftwareUpdateManager isSupported]

  // instance methods
  -[HMDSoftwareUpdateManager accessory]
  -[HMDSoftwareUpdateManager identifier]
  -[HMDSoftwareUpdateManager clientQueue]
  -[HMDSoftwareUpdateManager setAccessory:]
  -[HMDSoftwareUpdateManager .cxx_destruct]
  -[HMDSoftwareUpdateManager messageTargetUUID]
  -[HMDSoftwareUpdateManager messageDestination]
  -[HMDSoftwareUpdateManager messageReceiveQueue]
  -[HMDSoftwareUpdateManager messageDispatcher]
  -[HMDSoftwareUpdateManager init]
  -[HMDSoftwareUpdateManager fetchAvailableUpdateWithCompletionHandler:]
  -[HMDSoftwareUpdateManager startUpdate:completionHandler:]
  -[HMDSoftwareUpdateManager registerForMessages]
  -[HMDSoftwareUpdateManager activeClients]
  -[HMDSoftwareUpdateManager _handleStart:]
  -[HMDSoftwareUpdateManager _handleStop:]
  -[HMDSoftwareUpdateManager _handleUpdateAvailableUpdate:]
  -[HMDSoftwareUpdateManager updateAvailableUpdate:]


HMDIDSProxyMessageTransport : HMDIDSMessageTransport
 @property  HMDWatchManager *watchManager
 @property  HMDCompanionManager *companionManager

  // class methods
  +[HMDIDSProxyMessageTransport logCategory]
  +[HMDIDSProxyMessageTransport restriction]
  +[HMDIDSProxyMessageTransport priorityForMessage:]
  +[HMDIDSProxyMessageTransport transportSupportsDevice:]

  // instance methods
  -[HMDIDSProxyMessageTransport qualityOfService]
  -[HMDIDSProxyMessageTransport .cxx_destruct]
  -[HMDIDSProxyMessageTransport transportType]
  -[HMDIDSProxyMessageTransport service:account:incomingMessage:fromID:context:]
  -[HMDIDSProxyMessageTransport isSecure]
  -[HMDIDSProxyMessageTransport canSendMessage:]
  -[HMDIDSProxyMessageTransport initWithAccountRegistry:]
  -[HMDIDSProxyMessageTransport isDeviceConnected:]
  -[HMDIDSProxyMessageTransport watchManager]
  -[HMDIDSProxyMessageTransport deviceForSenderContext:]
  -[HMDIDSProxyMessageTransport sendMessage:fromHandle:destination:priority:timeout:options:queueOneID:error:]
  -[HMDIDSProxyMessageTransport deviceForHandle:]
  -[HMDIDSProxyMessageTransport companionManager]
  -[HMDIDSProxyMessageTransport remoteMessageFromMessage:]
  -[HMDIDSProxyMessageTransport watchDeviceForDevice:]


HMDSnapshotCacheRequestHandler : HMFObject <HMFLogging, HMFTimerDelegate, HMDSnapshotRequestHandlerProtocol>
 @property  NSString *logIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotCacheRequestHandler logCategory]

  // instance methods
  -[HMDSnapshotCacheRequestHandler timerDidFire:]
  -[HMDSnapshotCacheRequestHandler logIdentifier]
  -[HMDSnapshotCacheRequestHandler .cxx_destruct]
  -[HMDSnapshotCacheRequestHandler requestSnapshot:streamingTierType:completionHandler:]
  -[HMDSnapshotCacheRequestHandler initWithWorkQueue:logID:]
  -[HMDSnapshotCacheRequestHandler addSnapshotFileToCache:]
  -[HMDSnapshotCacheRequestHandler removeSnapshotFileToCache:error:]
  -[HMDSnapshotCacheRequestHandler setSnapshotFileToCache:snapshotCharacteristicEventUUID:]
  -[HMDSnapshotCacheRequestHandler isSnapshotPresentForCharacteristicEventUUID:]


HMDVendorModelEntry : HMFObject
 @property  NSString *model
 @property  NSString *manufacturer
 @property  NSString *appBundleID
 @property  NSString *appStoreID
 @property  HMDAccessoryVersion *firmwareVersion
 @property  NSString *productData
 @property  NSArray *productDataAlternates

  // instance methods
  -[HMDVendorModelEntry firmwareVersion]
  -[HMDVendorModelEntry model]
  -[HMDVendorModelEntry compare:]
  -[HMDVendorModelEntry attributeDescriptions]
  -[HMDVendorModelEntry .cxx_destruct]
  -[HMDVendorModelEntry appBundleID]
  -[HMDVendorModelEntry manufacturer]
  -[HMDVendorModelEntry isEqual:]
  -[HMDVendorModelEntry productData]
  -[HMDVendorModelEntry initWithManufacturer:model:appBundleID:appStoreID:firmwareVersion:productData:productDataAlternates:]
  -[HMDVendorModelEntry appStoreID]
  -[HMDVendorModelEntry productDataAlternates]


HMDPrimaryElectionCoordinationAddOn : NSObject <HMFLogging, HMFMessageReceiver, HMDLocalElectionMeshControllerDelegate, HMFTimerDelegate, HMDPrimaryResidentElectionAddOn>
 @property  unsigned long messageTransportRestriction
 @property  <HMDResidentDeviceManagerContext> *context
 @property  BOOL notifyNodesChanged
 @property  <HMDPrimaryElectionCoordinationAddOnDataSource> *dataSource
 @property  unsigned long residentCountDuringLastElection
 @property  HMFTimer *debounceTimer
 @property  HMFTimer *pingTimer
 @property  HMFTimer *secondaryMeshTimer
 @property  HMFTimer *meshLeaderToPrimaryResidentPingResponseTimer
 @property  HMDPrimaryElectionFindPrimaryMeshOperation *findPrimaryMeshOperation
 @property  HMFFuture *findPrimaryMeshFuture
 @property  HMDRemoteDeviceMonitor *remoteDeviceMonitor
 @property  <HMDLocalElectionMeshNode> *lastKnownLeaderNode
 @property  unsigned long state
 @property  __HMDPrimaryElectionCandidate *selectedPrimaryResidentCandidate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  <HMDPrimaryResidentElectionAddOnDelegate> *delegate

  // class methods
  +[HMDPrimaryElectionCoordinationAddOn logCategory]

  // instance methods
  -[HMDPrimaryElectionCoordinationAddOn dumpState]
  -[HMDPrimaryElectionCoordinationAddOn timerDidFire:]
  -[HMDPrimaryElectionCoordinationAddOn logIdentifier]
  -[HMDPrimaryElectionCoordinationAddOn dataSource]
  -[HMDPrimaryElectionCoordinationAddOn initWithContext:]
  -[HMDPrimaryElectionCoordinationAddOn setDelegate:]
  -[HMDPrimaryElectionCoordinationAddOn debounceTimer]
  -[HMDPrimaryElectionCoordinationAddOn delegate]
  -[HMDPrimaryElectionCoordinationAddOn state]
  -[HMDPrimaryElectionCoordinationAddOn pingTimer]
  -[HMDPrimaryElectionCoordinationAddOn .cxx_destruct]
  -[HMDPrimaryElectionCoordinationAddOn messageTargetUUID]
  -[HMDPrimaryElectionCoordinationAddOn stop]
  -[HMDPrimaryElectionCoordinationAddOn setPingTimer:]
  -[HMDPrimaryElectionCoordinationAddOn setDebounceTimer:]
  -[HMDPrimaryElectionCoordinationAddOn start]
  -[HMDPrimaryElectionCoordinationAddOn context]
  -[HMDPrimaryElectionCoordinationAddOn messageReceiveQueue]
  -[HMDPrimaryElectionCoordinationAddOn setState:]
  -[HMDPrimaryElectionCoordinationAddOn registerForMessages]
  -[HMDPrimaryElectionCoordinationAddOn messageTransportRestriction]
  -[HMDPrimaryElectionCoordinationAddOn performElection]
  -[HMDPrimaryElectionCoordinationAddOn performElectionWithReason:]
  -[HMDPrimaryElectionCoordinationAddOn primaryResidentChanged:previousResidentDevice:]
  -[HMDPrimaryElectionCoordinationAddOn handleDeviceCapabilitiesRequest:]
  -[HMDPrimaryElectionCoordinationAddOn handleCurrentPrimaryRequest:]
  -[HMDPrimaryElectionCoordinationAddOn handleCurrentPrimaryNotification:]
  -[HMDPrimaryElectionCoordinationAddOn handleMeshInformationRequest:]
  -[HMDPrimaryElectionCoordinationAddOn meshControllerDidStartElection:]
  -[HMDPrimaryElectionCoordinationAddOn meshControllerDidElectLeader:]
  -[HMDPrimaryElectionCoordinationAddOn meshControllerDidUpdatesNodes:]
  -[HMDPrimaryElectionCoordinationAddOn meshControllerDidReceivePingFromLeader:]
  -[HMDPrimaryElectionCoordinationAddOn initWithContext:meshController:dataSource:]
  -[HMDPrimaryElectionCoordinationAddOn _findPrimaryMeshWithContext:otherResidents:]
  -[HMDPrimaryElectionCoordinationAddOn _selectPrimaryResident]
  -[HMDPrimaryElectionCoordinationAddOn primarySortComparatorForCurrentPrimary:]
  -[HMDPrimaryElectionCoordinationAddOn notifyNodesChanged]
  -[HMDPrimaryElectionCoordinationAddOn setNotifyNodesChanged:]
  -[HMDPrimaryElectionCoordinationAddOn residentCountDuringLastElection]
  -[HMDPrimaryElectionCoordinationAddOn setResidentCountDuringLastElection:]
  -[HMDPrimaryElectionCoordinationAddOn secondaryMeshTimer]
  -[HMDPrimaryElectionCoordinationAddOn setSecondaryMeshTimer:]
  -[HMDPrimaryElectionCoordinationAddOn meshLeaderToPrimaryResidentPingResponseTimer]
  -[HMDPrimaryElectionCoordinationAddOn setMeshLeaderToPrimaryResidentPingResponseTimer:]
  -[HMDPrimaryElectionCoordinationAddOn findPrimaryMeshOperation]
  -[HMDPrimaryElectionCoordinationAddOn setFindPrimaryMeshOperation:]
  -[HMDPrimaryElectionCoordinationAddOn findPrimaryMeshFuture]
  -[HMDPrimaryElectionCoordinationAddOn setFindPrimaryMeshFuture:]
  -[HMDPrimaryElectionCoordinationAddOn remoteDeviceMonitor]
  -[HMDPrimaryElectionCoordinationAddOn lastKnownLeaderNode]
  -[HMDPrimaryElectionCoordinationAddOn setLastKnownLeaderNode:]
  -[HMDPrimaryElectionCoordinationAddOn selectedPrimaryResidentCandidate]
  -[HMDPrimaryElectionCoordinationAddOn setSelectedPrimaryResidentCandidate:]


__HMDPrimaryElectionCandidate : NSObject <NSSecureCoding>
 @property  HMDResidentDevice *residentDevice
 @property  HMDHomeKitVersion *homeKitVersion
 @property  NSUUID *deviceIdentifier
 @property  NSString *name
 @property  NSUUID *currentPrimaryIdentifier
 @property  BOOL enabledAsResident
 @property  unsigned long capabilities
 @property  unsigned long connectionType
 @property  BOOL pcsEnabled

  // class methods
  +[__HMDPrimaryElectionCandidate supportsSecureCoding]
  +[__HMDPrimaryElectionCandidate fromMessagePayload:]
  +[__HMDPrimaryElectionCandidate setSupportsPingRequest:capabilities:]
  +[__HMDPrimaryElectionCandidate supportsPingRequest:]

  // instance methods
  -[__HMDPrimaryElectionCandidate deviceIdentifier]
  -[__HMDPrimaryElectionCandidate encodeWithCoder:]
  -[__HMDPrimaryElectionCandidate .cxx_destruct]
  -[__HMDPrimaryElectionCandidate capabilities]
  -[__HMDPrimaryElectionCandidate connectionType]
  -[__HMDPrimaryElectionCandidate setCapabilities:]
  -[__HMDPrimaryElectionCandidate name]
  -[__HMDPrimaryElectionCandidate redactedDescription]
  -[__HMDPrimaryElectionCandidate initWithCoder:]
  -[__HMDPrimaryElectionCandidate residentDevice]
  -[__HMDPrimaryElectionCandidate toMessagePayload]
  -[__HMDPrimaryElectionCandidate setResidentDevice:]
  -[__HMDPrimaryElectionCandidate pcsEnabled]
  -[__HMDPrimaryElectionCandidate initWithVersion:deviceIdentifier:name:currentPrimaryIdentifier:enabledAsResident:supportsPingRequest:connectionType:pcsEnabled:]
  -[__HMDPrimaryElectionCandidate supportsPingRequest]
  -[__HMDPrimaryElectionCandidate compare:currentPrimary:outCriteria:]
  -[__HMDPrimaryElectionCandidate homeKitVersion]
  -[__HMDPrimaryElectionCandidate currentPrimaryIdentifier]
  -[__HMDPrimaryElectionCandidate enabledAsResident]


HMDCameraSignificantEventServerDataSource : HMFObject
  // instance methods
  -[HMDCameraSignificantEventServerDataSource deviceWithDestination:]


HMDCameraSignificantEventServer : HMFObject <HMFMessageReceiver, HMFLogging, HMDCameraSnapshotIDSRelayInitiatorDelegate, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSMutableDictionary *heroFrameDataByNotificationUUID
 @property  NSMutableDictionary *relayInitiatorBySessionUUID
 @property  NSMapTable *notificationUUIDByHeroFrameExpiryTimer
 @property  HMDCharacteristic *motionCharacteristic
 @property  HMDNotificationRegistry *notificationRegistry
 @property  HMDCameraSignificantEventServerDataSource *dataSource
 @property  NSString *logIdentifier
 @property  @? heroFrameExpiryTimerFactory
 @property  @? idsRelayInitiatorFactory
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSignificantEventServer logCategory]

  // instance methods
  -[HMDCameraSignificantEventServer timerDidFire:]
  -[HMDCameraSignificantEventServer logIdentifier]
  -[HMDCameraSignificantEventServer dataSource]
  -[HMDCameraSignificantEventServer workQueue]
  -[HMDCameraSignificantEventServer .cxx_destruct]
  -[HMDCameraSignificantEventServer messageTargetUUID]
  -[HMDCameraSignificantEventServer start]
  -[HMDCameraSignificantEventServer messageReceiveQueue]
  -[HMDCameraSignificantEventServer messageDispatcher]
  -[HMDCameraSignificantEventServer notificationRegistry]
  -[HMDCameraSignificantEventServer relayInitiatorIDSSessionDidStart:]
  -[HMDCameraSignificantEventServer relayInitiatorDidSendIDSInvitation:]
  -[HMDCameraSignificantEventServer relayInitiator:didEndIDSSessionWithError:]
  -[HMDCameraSignificantEventServer relayInitiatorDidSendDataSuccessfully:]
  -[HMDCameraSignificantEventServer relayInitiatorDidStartDataSend:]
  -[HMDCameraSignificantEventServer handleCameraSignificantEventFetchHeroFrameMessage:]
  -[HMDCameraSignificantEventServer initWithWorkQueue:camera:]
  -[HMDCameraSignificantEventServer initWithWorkQueue:logIdentifier:messageDispatcher:messageTargetUUID:motionCharacteristic:notificationRegistry:dataSource:]
  -[HMDCameraSignificantEventServer notifyListenersAboutEvent:]
  -[HMDCameraSignificantEventServer _notifyDevice:aboutEvent:]
  -[HMDCameraSignificantEventServer heroFrameDataByNotificationUUID]
  -[HMDCameraSignificantEventServer relayInitiatorBySessionUUID]
  -[HMDCameraSignificantEventServer notificationUUIDByHeroFrameExpiryTimer]
  -[HMDCameraSignificantEventServer motionCharacteristic]
  -[HMDCameraSignificantEventServer heroFrameExpiryTimerFactory]
  -[HMDCameraSignificantEventServer setHeroFrameExpiryTimerFactory:]
  -[HMDCameraSignificantEventServer idsRelayInitiatorFactory]
  -[HMDCameraSignificantEventServer setIdsRelayInitiatorFactory:]


HMDAssistantAccessControl : HMFObject <HMFLogging, HMFObject, NSSecureCoding, HMDBackingStoreObjectProtocol>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  unsigned long cachedHash
 @property  NSUUID *modelID
 @property  HMDAssistantAccessControlModel *model
 @property  unsigned long options
 @property  BOOL activityNotificationsEnabledForPersonalRequests
 @property  HMDUser *user
 @property  BOOL enabled
 @property  NSArray *accessories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDAssistantAccessControl supportsSecureCoding]
  +[HMDAssistantAccessControl logCategory]
  +[HMDAssistantAccessControl isAccessorySupported:]
  +[HMDAssistantAccessControl modelIDNamespace]
  +[HMDAssistantAccessControl accessControlWithMessage:user:currentAccessories:error:]

  // instance methods
  -[HMDAssistantAccessControl setUser:]
  -[HMDAssistantAccessControl configure]
  -[HMDAssistantAccessControl modelID]
  -[HMDAssistantAccessControl logIdentifier]
  -[HMDAssistantAccessControl propertyDescription]
  -[HMDAssistantAccessControl model]
  -[HMDAssistantAccessControl clientQueue]
  -[HMDAssistantAccessControl encodeWithCoder:]
  -[HMDAssistantAccessControl dealloc]
  -[HMDAssistantAccessControl removeAccessory:]
  -[HMDAssistantAccessControl cachedHash]
  -[HMDAssistantAccessControl user]
  -[HMDAssistantAccessControl .cxx_destruct]
  -[HMDAssistantAccessControl setEnabled:]
  -[HMDAssistantAccessControl options]
  -[HMDAssistantAccessControl initWithUser:]
  -[HMDAssistantAccessControl setOptions:]
  -[HMDAssistantAccessControl accessories]
  -[HMDAssistantAccessControl addAccessory:]
  -[HMDAssistantAccessControl isEqual:]
  -[HMDAssistantAccessControl init]
  -[HMDAssistantAccessControl isEnabled]
  -[HMDAssistantAccessControl initWithCoder:]
  -[HMDAssistantAccessControl setActivityNotificationsEnabledForPersonalRequests:]
  -[HMDAssistantAccessControl areActivityNotificationsEnabledForPersonalRequests]
  -[HMDAssistantAccessControl transactionObjectUpdated:newValues:message:]
  -[HMDAssistantAccessControl transactionObjectRemoved:message:]
  -[HMDAssistantAccessControl transactionWithObjectChangeType:]
  -[HMDAssistantAccessControl handleRemovedAccessory:]
  -[HMDAssistantAccessControl initWithUser:model:]
  -[HMDAssistantAccessControl initWithUser:appleAccessories:enabled:]
  -[HMDAssistantAccessControl initWithUser:appleAccessories:hapAccessoryIdentifiers:enabled:activityNotificationsEnabledForPersonalRequests:]
  -[HMDAssistantAccessControl setHapAccessoryIdentifiers:]
  -[HMDAssistantAccessControl setAppleMediaAccessories:]
  -[HMDAssistantAccessControl removeAccessoriesAddedByOldController:]
  -[HMDAssistantAccessControl notifyClientOfUpdateWithMessage:]
  -[HMDAssistantAccessControl assistantAccessControlModelWithRemovedAccessories:]


HMDAssistantAccessControlModel : HMDBackingStoreModelObject
 @property  NSNumber *enabled
 @property  NSNumber *options
 @property  NSNumber *activityNotificationsEnabledForPersonalRequests
 @property  NSArray *accessoryModelIDs
 @property  NSArray *siriEndpointAccessoryModelUUIDs
 @property  NSString *changeTag

  // class methods
  +[HMDAssistantAccessControlModel properties]

  // instance methods
  -[HMDAssistantAccessControlModel dependentUUIDs]


HMDAccessorySetting : HMFObject <HMFLogging, HMDAccessorySettingUpdateProtocol, HMDAccessorySettingProtocol, NSSecureCoding, HMDSettingBaseProtocol>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  HMDAccessorySettingModel *model
 @property  NSArray *models
 @property  unsigned long configurationVersion
 @property  BOOL isCollectionType
 @property  NSUUID *identifier
 @property  unsigned long properties
 @property  NSString *keyPath
 @property  BOOL reflected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long type
 @property  NSString *name
 @property  NSArray *constraints
 @property  id value
 @property  NSUUID *parentIdentifier

  // class methods
  +[HMDAccessorySetting supportsSecureCoding]
  +[HMDAccessorySetting logCategory]
  +[HMDAccessorySetting supportedValueClasses]
  +[HMDAccessorySetting supportedConstraintClasses]
  +[HMDAccessorySetting decodedValue:error:]

  // instance methods
  -[HMDAccessorySetting parentIdentifier]
  -[HMDAccessorySetting initWithModel:]
  -[HMDAccessorySetting identifier]
  -[HMDAccessorySetting logIdentifier]
  -[HMDAccessorySetting models]
  -[HMDAccessorySetting properties]
  -[HMDAccessorySetting model]
  -[HMDAccessorySetting configurationVersion]
  -[HMDAccessorySetting _setType:]
  -[HMDAccessorySetting clientQueue]
  -[HMDAccessorySetting isValid:]
  -[HMDAccessorySetting encodeWithCoder:]
  -[HMDAccessorySetting type]
  -[HMDAccessorySetting setConstraints:]
  -[HMDAccessorySetting .cxx_destruct]
  -[HMDAccessorySetting keyPath]
  -[HMDAccessorySetting isCollectionType]
  -[HMDAccessorySetting setValue:]
  -[HMDAccessorySetting setConfigurationVersion:]
  -[HMDAccessorySetting initWithIdentifier:name:]
  -[HMDAccessorySetting copyWithZone:]
  -[HMDAccessorySetting value]
  -[HMDAccessorySetting name]
  -[HMDAccessorySetting messageDispatcher]
  -[HMDAccessorySetting isEqual:]
  -[HMDAccessorySetting constraints]
  -[HMDAccessorySetting init]
  -[HMDAccessorySetting setGroup:]
  -[HMDAccessorySetting initWithCoder:]
  -[HMDAccessorySetting addConstraint:]
  -[HMDAccessorySetting removeConstraint:]
  -[HMDAccessorySetting isReflected]
  -[HMDAccessorySetting setReflected:]
  -[HMDAccessorySetting description:indent:]
  -[HMDAccessorySetting setMessageDispatcher:]
  -[HMDAccessorySetting copyIdentical]
  -[HMDAccessorySetting copyReplica]
  -[HMDAccessorySetting isConstraintMergeStrategyReflection]
  -[HMDAccessorySetting mergeConstraintsFromOther:]
  -[HMDAccessorySetting compareConstraints:]
  -[HMDAccessorySetting canAddConstraint:error:]
  -[HMDAccessorySetting canRemoveConstraint:]
  -[HMDAccessorySetting counterpartConstraintFor:]
  -[HMDAccessorySetting constraintWithIdentifier:]
  -[HMDAccessorySetting inMemoryConstraintWithIdentifier:]
  -[HMDAccessorySetting replicatedMissingConstraintsFrom:]
  -[HMDAccessorySetting addConstraintsInMemory:]
  -[HMDAccessorySetting removeConstraintsInMemory:]
  -[HMDAccessorySetting _mergeConstraintsLocallyWithAdditions:removals:]
  -[HMDAccessorySetting modelsForConstraintsUpdate:]
  -[HMDAccessorySetting shouldBlockSettingUpdateFromVersion:isMultiUserEnabled:]
  -[HMDAccessorySetting shouldTurnOffPersonalRequestsOnLanguageChangeTo:supportedMultiUserLanguageCodes:isMultiUserEnabled:]
  -[HMDAccessorySetting _modelsForMergeStrategyConstraintsUpdate:]
  -[HMDAccessorySetting constraintsForCodingXPC]


HMDAccessorySettingModel : HMDBackingStoreModelObject
 @property  NSNumber *type
 @property  NSNumber *properties
 @property  NSString *name
 @property  NSData *value
 @property  NSNumber *configurationVersion

  // class methods
  +[HMDAccessorySettingModel properties]
  +[HMDAccessorySettingModel schemaHashRoot]


HMDMediaBrowserDataSource : HMFObject <HMDMediaBrowserDataSource>
 @property  NSString *currentAccessoryMediaRouteIdentifier
 @property  BOOL isAppleMediaAccessory
 @property  BOOL requiresHomePodMiniPairing
 @property  unsigned long supportedStereoPairVersions
 @property  HMFSystemInfo *systemInfo
 @property  HMFProductInfo *productInfo
 @property  HMDDevice *currentDevice
 @property  unsigned long appleMediaAccessoryVariant

  // class methods
  +[HMDMediaBrowserDataSource shortDescription]

  // instance methods
  -[HMDMediaBrowserDataSource currentDevice]
  -[HMDMediaBrowserDataSource productInfo]
  -[HMDMediaBrowserDataSource systemInfo]
  -[HMDMediaBrowserDataSource supportedStereoPairVersions]
  -[HMDMediaBrowserDataSource performOperation:]
  -[HMDMediaBrowserDataSource isAppleMediaAccessory]
  -[HMDMediaBrowserDataSource appleMediaAccessoryVariant]
  -[HMDMediaBrowserDataSource requiresHomePodMiniPairing]
  -[HMDMediaBrowserDataSource createUnassociatedAppleMediaAccessory:name:category:productColor:messageDispatcher:]
  -[HMDMediaBrowserDataSource createUnassociatedHomePodAccessory:name:category:productColor:requiredPairingCapabilities:minimumPairingSoftware:messageDispatcher:]
  -[HMDMediaBrowserDataSource currentAccessoryMediaRouteIdentifier]


HMDMediaBrowser : HMFObject <HMFLogging, HMFTimerDelegate>
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  <HMDMediaBrowserDelegate> *delegate
 @property  HMDHomeManager *homeManager
 @property  HMDUnassociatedMediaAccessory *currentAccessory
 @property  NSArray *accessoryAdvertisements
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaBrowser shortDescription]
  +[HMDMediaBrowser logCategory]
  +[HMDMediaBrowser advertisementsFromOutputDevices:]

  // instance methods
  -[HMDMediaBrowser dumpDescription]
  -[HMDMediaBrowser initWithHomeManager:]
  -[HMDMediaBrowser currentAccessory]
  -[HMDMediaBrowser timerDidFire:]
  -[HMDMediaBrowser clientQueue]
  -[HMDMediaBrowser setDelegate:]
  -[HMDMediaBrowser delegate]
  -[HMDMediaBrowser dealloc]
  -[HMDMediaBrowser .cxx_destruct]
  -[HMDMediaBrowser homeManager]
  -[HMDMediaBrowser initWithHomeManager:dataSource:]
  -[HMDMediaBrowser shortDescription]
  -[HMDMediaBrowser setHomeManager:]
  -[HMDMediaBrowser accessoryAdvertisements]
  -[HMDMediaBrowser startDiscoveringAssociatedAccessories]
  -[HMDMediaBrowser stopDiscoveringAssociatedAccessories]
  -[HMDMediaBrowser startDiscoveringUnassociatedAccessories]
  -[HMDMediaBrowser stopDiscoveringUnassociatedAccessories]
  -[HMDMediaBrowser unassociatedAccessoryFromAdvertisementData:]
  -[HMDMediaBrowser registerAccessories:]
  -[HMDMediaBrowser updateSessionsForAccessories:]
  -[HMDMediaBrowser deregisterAccessories:]


HMDCompositeSettingPrivileges : HMFObject
 @property  unsigned long minReadUserPrivilege

  // instance methods
  -[HMDCompositeSettingPrivileges initWithMinReadUserPrivilege:]
  -[HMDCompositeSettingPrivileges minReadUserPrivilege]


HMDGarageDoorLogEvent : HMMHomeLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  NSString *accessoryUUID
 @property  NSString *doorStatus
 @property  NSString *characteristicUUID
 @property  NSString *timeStamp
 @property  NSString *homePresence

  // instance methods
  -[HMDGarageDoorLogEvent accessoryUUID]
  -[HMDGarageDoorLogEvent eventName]
  -[HMDGarageDoorLogEvent .cxx_destruct]
  -[HMDGarageDoorLogEvent timeStamp]
  -[HMDGarageDoorLogEvent characteristicUUID]
  -[HMDGarageDoorLogEvent serializedEvent]
  -[HMDGarageDoorLogEvent homePresence]
  -[HMDGarageDoorLogEvent doorStatus]
  -[HMDGarageDoorLogEvent initWithGarageDoorStatus:accessoryUUID:characteristicUUID:timeStamp:homeUUID:homePresence:]


HMDTargetControllerErrorEvent : HMMLogEvent <HMDAWDLogEvent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long errorType
 @property  HMDHAPAccessory *accessory

  // class methods
  +[HMDTargetControllerErrorEvent errorEventWithErrorType:accessory:]

  // instance methods
  -[HMDTargetControllerErrorEvent accessory]
  -[HMDTargetControllerErrorEvent .cxx_destruct]
  -[HMDTargetControllerErrorEvent errorType]
  -[HMDTargetControllerErrorEvent AWDMessageType]
  -[HMDTargetControllerErrorEvent metricForAWD]
  -[HMDTargetControllerErrorEvent initWithErrorType:accessory:]


HMDRemoteLoginInitiatorAuthentication : HMDRemoteLoginAuthentication
 @property  <HMDRemoteLoginInitiatorAuthenticationDelegate> *delegate

  // class methods
  +[HMDRemoteLoginInitiatorAuthentication logCategory]

  // instance methods
  -[HMDRemoteLoginInitiatorAuthentication delegate]
  -[HMDRemoteLoginInitiatorAuthentication .cxx_destruct]
  -[HMDRemoteLoginInitiatorAuthentication initWithSessionID:remoteDevice:workQueue:remoteMessageSender:delegate:]
  -[HMDRemoteLoginInitiatorAuthentication loginType]
  -[HMDRemoteLoginInitiatorAuthentication authenticate]
  -[HMDRemoteLoginInitiatorAuthentication _handleAuthenticationResponse:error:]


HMDMediaGroupsAggregatorMessenger : NSObject <HMFLogging, HMFMessageReceiver>
 @property  NSUUID *identifier
 @property  <HMDMediaGroupsAggregatorMessengerDataSource> *dataSource
 @property  <HMDMediaGroupsAggregatorMessengerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDMediaGroupsAggregatorMessenger logCategory]

  // instance methods
  -[HMDMediaGroupsAggregatorMessenger identifier]
  -[HMDMediaGroupsAggregatorMessenger logIdentifier]
  -[HMDMediaGroupsAggregatorMessenger dataSource]
  -[HMDMediaGroupsAggregatorMessenger setDelegate:]
  -[HMDMediaGroupsAggregatorMessenger delegate]
  -[HMDMediaGroupsAggregatorMessenger .cxx_destruct]
  -[HMDMediaGroupsAggregatorMessenger messageTargetUUID]
  -[HMDMediaGroupsAggregatorMessenger setIdentifier:]
  -[HMDMediaGroupsAggregatorMessenger setDataSource:]
  -[HMDMediaGroupsAggregatorMessenger init]
  -[HMDMediaGroupsAggregatorMessenger router]
  -[HMDMediaGroupsAggregatorMessenger routeMessage:localHandler:]
  -[HMDMediaGroupsAggregatorMessenger configureWithMessageDispatcher:home:]
  -[HMDMediaGroupsAggregatorMessenger routeUpdateAssociatedGroupIdentifierRequestMessage:]
  -[HMDMediaGroupsAggregatorMessenger registerForMessagesWithMessageDispatcher:home:]
  -[HMDMediaGroupsAggregatorMessenger sendRequestToUpdateAssociatedGroupIdentifier:forGroupIdentifier:completion:]
  -[HMDMediaGroupsAggregatorMessenger locallyHandleUpdateAssociatedGroupIdentifierRequestMessage:]
  -[HMDMediaGroupsAggregatorMessenger notifyOfRequestToUpdateAssociatedGroupIdentifierWithPayload:message:]


HMDDurationEvent : HMDTimeEvent <NSSecureCoding, HMFDumpState, HMFLogging, HMDHomeMessageReceiver>
 @property  NSNumber *duration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDDurationEvent supportsSecureCoding]
  +[HMDDurationEvent logCategory]

  // instance methods
  -[HMDDurationEvent setDuration:]
  -[HMDDurationEvent encodeWithCoder:]
  -[HMDDurationEvent .cxx_destruct]
  -[HMDDurationEvent duration]
  -[HMDDurationEvent initWithCoder:]
  -[HMDDurationEvent createPayload]
  -[HMDDurationEvent initWithModel:home:]
  -[HMDDurationEvent _transactionObjectUpdated:newValues:message:]
  -[HMDDurationEvent _transactionObjectRemoved:message:]
  -[HMDDurationEvent modelObjectWithChangeType:]
  -[HMDDurationEvent emptyModelObject]
  -[HMDDurationEvent _handleUpdateRequest:]
  -[HMDDurationEvent _nextTimerDate]
  -[HMDDurationEvent analyticsTriggerEventData]


HMDDurationEventModel : HMDEventModel
 @property  NSNumber *duration

  // class methods
  +[HMDDurationEventModel properties]
  +[HMDDurationEventModel eventModelWithDictionary:home:eventTriggerUUID:message:]


HMDDataStreamMessageCoder : NSObject
  // class methods
  +[HMDDataStreamMessageCoder _decryptEncryptedOPACKFrame:sessionEncryption:receivedHeader:receivedPayload:error:]
  +[HMDDataStreamMessageCoder _decodeOPACKFrame:receivedHeader:receivedPayload:error:]
  +[HMDDataStreamMessageCoder _unpackUnencryptedOPACKFrame:receivedHeader:receivedPayload:error:]
  +[HMDDataStreamMessageCoder _encodeOPACKHeader:payload:error:]
  +[HMDDataStreamMessageCoder _encryptEncryptedOPACKHeader:payload:sessionEncryption:error:]
  +[HMDDataStreamMessageCoder _buildUnencryptedOPACKHeader:payload:error:]
  +[HMDDataStreamMessageCoder decryptEncryptedOPACKFrame:sessionEncryption:receivedHeader:receivedPayload:error:]
  +[HMDDataStreamMessageCoder encryptEncryptedOPACKHeader:payload:sessionEncryption:error:]
  +[HMDDataStreamMessageCoder unpackUnencryptedOPACKFrame:receivedHeader:receivedPayload:error:]
  +[HMDDataStreamMessageCoder buildUnencryptedOPACKHeader:payload:error:]
  +[HMDDataStreamMessageCoder readHeaderFromPartialData:frameType:payloadLength:]
  +[HMDDataStreamMessageCoder readHeaderFromPartialData:length:frameType:payloadLength:]
  +[HMDDataStreamMessageCoder eventHeaderForProtocol:topic:]
  +[HMDDataStreamMessageCoder requestHeaderForProtocol:topic:identifier:]
  +[HMDDataStreamMessageCoder responseHeaderForRequestHeader:status:]


HMDAccessoryBrowserXPCMessageSendPolicyParameters : HMDXPCMessageSendPolicyParameters
 @property  BOOL browsing

  // instance methods
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters signature]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters attributeDescriptions]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters copyWithZone:]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters setBrowsing:]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters isEqual:]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters isBrowsing]
  -[HMDAccessoryBrowserXPCMessageSendPolicyParameters initWithEntitlements:browsing:]


HMDRemoteLoginUtilities : NSObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginUtilities logCategory]
  +[HMDRemoteLoginUtilities serviceTypeForAccountService:]
  +[HMDRemoteLoginUtilities primaryITunesAccount]
  +[HMDRemoteLoginUtilities fetchIsTwoFactorAuthenticationEnabledForAccountWithReason:completionHandler:]


HMDEventTriggerExecutionSession : HMDEventTriggerSession <HMFDumpState, HMFLogging, HMDEventDelegate, HMFTimerDelegate>
 @property  NSMapTable *writeRequests
 @property  NSMutableSet *mediaProfiles
 @property  NSDate *executionStartTime
 @property  NSMutableArray *triggerEvents
 @property  NSMutableArray *causingDevices
 @property  NSArray *endEvents
 @property  NSArray *monitorEvents
 @property  unsigned long executionState
 @property  HMDPredicateUtilities *predicateUtilities
 @property  NSArray *actionSets
 @property  NSPredicate *evaluationCondition
 @property  NSArray *recurrences
 @property  HMDEventTriggerUserConfirmationSession *userConfirmationSession
 @property  HMDTriggerConfirmationTimer *secureTriggerConfirmationTimer
 @property  HMFTimer *startCharacteristicsMonitorTimer
 @property  BOOL actionSetExecutionInProgress
 @property  BOOL restoreInProgress
 @property  BOOL needsUserConfirmation
 @property  BOOL executionCompleteCalled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDEventTriggerExecutionSession logCategory]

  // instance methods
  -[HMDEventTriggerExecutionSession dumpState]
  -[HMDEventTriggerExecutionSession timerDidFire:]
  -[HMDEventTriggerExecutionSession logIdentifier]
  -[HMDEventTriggerExecutionSession setRestoreInProgress:]
  -[HMDEventTriggerExecutionSession dealloc]
  -[HMDEventTriggerExecutionSession .cxx_destruct]
  -[HMDEventTriggerExecutionSession restoreInProgress]
  -[HMDEventTriggerExecutionSession writeRequests]
  -[HMDEventTriggerExecutionSession _restoreState]
  -[HMDEventTriggerExecutionSession executionStartTime]
  -[HMDEventTriggerExecutionSession actionSets]
  -[HMDEventTriggerExecutionSession endEvents]
  -[HMDEventTriggerExecutionSession recurrences]
  -[HMDEventTriggerExecutionSession mediaProfiles]
  -[HMDEventTriggerExecutionSession executionState]
  -[HMDEventTriggerExecutionSession setExecutionState:]
  -[HMDEventTriggerExecutionSession didOccurEvent:causingDevice:]
  -[HMDEventTriggerExecutionSession triggerEvents]
  -[HMDEventTriggerExecutionSession _activateEvents:]
  -[HMDEventTriggerExecutionSession evaluationCondition]
  -[HMDEventTriggerExecutionSession predicateUtilities]
  -[HMDEventTriggerExecutionSession userConfirmationSession]
  -[HMDEventTriggerExecutionSession handleSessionPlaybackStateUpdatedNotification:]
  -[HMDEventTriggerExecutionSession initWithEventTrigger:predicateUtilities:triggerEvent:causingDevice:workQueue:actionSets:evaluationCondition:recurrences:endEvents:msgDispatcher:]
  -[HMDEventTriggerExecutionSession needsUserConfirmation]
  -[HMDEventTriggerExecutionSession evaluateFiringTrigger]
  -[HMDEventTriggerExecutionSession _evaluateFiringTrigger]
  -[HMDEventTriggerExecutionSession _executeTriggerAfterEvaluatingCondition:]
  -[HMDEventTriggerExecutionSession containsSecureActionSet]
  -[HMDEventTriggerExecutionSession cancelSessionIfWaitingForUserResponse]
  -[HMDEventTriggerExecutionSession postponeRestoreIfWaitingForEndEvent]
  -[HMDEventTriggerExecutionSession durationEndEvents]
  -[HMDEventTriggerExecutionSession userResponse:device:completionHandler:]
  -[HMDEventTriggerExecutionSession _userResponse:device:completionHandler:]
  -[HMDEventTriggerExecutionSession addEvent:causingDevice:]
  -[HMDEventTriggerExecutionSession _addEvent:causingDevice:]
  -[HMDEventTriggerExecutionSession _directlyExecuteActionSetsWithCompletionHandler:]
  -[HMDEventTriggerExecutionSession _handleActionSetExecutionResponse:actionSetError:completion:]
  -[HMDEventTriggerExecutionSession _activateDurationEvents]
  -[HMDEventTriggerExecutionSession _activateMonitoringEvents]
  -[HMDEventTriggerExecutionSession _monitoringEventsFromActionSetResponse:]
  -[HMDEventTriggerExecutionSession valueInActionSetWriteResponse:actionSetUUID:accUUID:serviceID:characteristicID:]
  -[HMDEventTriggerExecutionSession _callExecutionComplete:callDelegate:]
  -[HMDEventTriggerExecutionSession _submitAnalyticsData:]
  -[HMDEventTriggerExecutionSession _callExecutionComplete:]
  -[HMDEventTriggerExecutionSession _removeUserDialog]
  -[HMDEventTriggerExecutionSession _handleMonitoringEvent:]
  -[HMDEventTriggerExecutionSession _callExecutionCompleteIfNoMoreOutstandingRequests]
  -[HMDEventTriggerExecutionSession causingDevices]
  -[HMDEventTriggerExecutionSession monitorEvents]
  -[HMDEventTriggerExecutionSession setMonitorEvents:]
  -[HMDEventTriggerExecutionSession secureTriggerConfirmationTimer]
  -[HMDEventTriggerExecutionSession setSecureTriggerConfirmationTimer:]
  -[HMDEventTriggerExecutionSession startCharacteristicsMonitorTimer]
  -[HMDEventTriggerExecutionSession setStartCharacteristicsMonitorTimer:]
  -[HMDEventTriggerExecutionSession actionSetExecutionInProgress]
  -[HMDEventTriggerExecutionSession setActionSetExecutionInProgress:]
  -[HMDEventTriggerExecutionSession executionCompleteCalled]
  -[HMDEventTriggerExecutionSession setExecutionCompleteCalled:]


HMDRemoteLoginInitiatorSession : HMFObject
 @property  NSString *sessionID
 @property  HMMLogEvent<HomeKitEventRemoteLoginMetricProtocol> *metric

  // instance methods
  -[HMDRemoteLoginInitiatorSession sessionID]
  -[HMDRemoteLoginInitiatorSession metric]
  -[HMDRemoteLoginInitiatorSession dealloc]
  -[HMDRemoteLoginInitiatorSession .cxx_destruct]
  -[HMDRemoteLoginInitiatorSession setMetric:]
  -[HMDRemoteLoginInitiatorSession initWithSessionID:]


AWDHomeKitSiriSync : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  NSMutableArray *reasons
 @property  BOOL hasCurrentConfigurationVersion
 @property  unsigned int currentConfigurationVersion
 @property  BOOL hasLastSyncedConfigurationVersion
 @property  unsigned int lastSyncedConfigurationVersion
 @property  BOOL hasServerConfigurationVersion
 @property  unsigned int serverConfigurationVersion

  // class methods
  +[AWDHomeKitSiriSync reasonsType]

  // instance methods
  -[AWDHomeKitSiriSync setDuration:]
  -[AWDHomeKitSiriSync setTimestamp:]
  -[AWDHomeKitSiriSync hasDuration]
  -[AWDHomeKitSiriSync copyTo:]
  -[AWDHomeKitSiriSync .cxx_destruct]
  -[AWDHomeKitSiriSync duration]
  -[AWDHomeKitSiriSync mergeFrom:]
  -[AWDHomeKitSiriSync setHasTimestamp:]
  -[AWDHomeKitSiriSync dictionaryRepresentation]
  -[AWDHomeKitSiriSync reasons]
  -[AWDHomeKitSiriSync hasTimestamp]
  -[AWDHomeKitSiriSync copyWithZone:]
  -[AWDHomeKitSiriSync timestamp]
  -[AWDHomeKitSiriSync readFrom:]
  -[AWDHomeKitSiriSync setHasDuration:]
  -[AWDHomeKitSiriSync writeTo:]
  -[AWDHomeKitSiriSync isEqual:]
  -[AWDHomeKitSiriSync setReasons:]
  -[AWDHomeKitSiriSync addReasons:]
  -[AWDHomeKitSiriSync reasonsCount]
  -[AWDHomeKitSiriSync clearReasons]
  -[AWDHomeKitSiriSync lastSyncedConfigurationVersion]
  -[AWDHomeKitSiriSync setLastSyncedConfigurationVersion:]
  -[AWDHomeKitSiriSync serverConfigurationVersion]
  -[AWDHomeKitSiriSync setCurrentConfigurationVersion:]
  -[AWDHomeKitSiriSync setHasCurrentConfigurationVersion:]
  -[AWDHomeKitSiriSync hasCurrentConfigurationVersion]
  -[AWDHomeKitSiriSync setHasLastSyncedConfigurationVersion:]
  -[AWDHomeKitSiriSync hasLastSyncedConfigurationVersion]
  -[AWDHomeKitSiriSync setServerConfigurationVersion:]
  -[AWDHomeKitSiriSync setHasServerConfigurationVersion:]
  -[AWDHomeKitSiriSync hasServerConfigurationVersion]
  -[AWDHomeKitSiriSync currentConfigurationVersion]
  -[AWDHomeKitSiriSync reasonsAtIndex:]


HMDSharedHomeUpdateSession : NSObject <HMFLogging, HMFTimerDelegate, HMFDumpState>
 @property  NSString *homeIdentifier
 @property  NSUUID *sessionID
 @property  <HMDSharedHomeUpdateSessionDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSharedHomeUpdateSession logCategory]

  // instance methods
  -[HMDSharedHomeUpdateSession dumpState]
  -[HMDSharedHomeUpdateSession timerDidFire:]
  -[HMDSharedHomeUpdateSession logIdentifier]
  -[HMDSharedHomeUpdateSession sessionID]
  -[HMDSharedHomeUpdateSession delegate]
  -[HMDSharedHomeUpdateSession dealloc]
  -[HMDSharedHomeUpdateSession .cxx_destruct]
  -[HMDSharedHomeUpdateSession homeIdentifier]
  -[HMDSharedHomeUpdateSession initWithHome:delegate:workQueue:messagePayload:messageDispatcher:]
  -[HMDSharedHomeUpdateSession requestDataSync]


HMDRemotePersonDataMessenger : HMFObject <HMFLogging, HMFMessageReceiver, HMFTimerDelegate, HMDPersonDataInterface>
 @property  HMFMessageDispatcher *messageDispatcher
 @property  <HMDResidentDeviceManager> *residentDeviceManager
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDPersonDataSource> *dataSource
 @property  HMFTimer *notifyResidentsOfUpdatedDataDebounceTimer
 @property  @? notifyResidentsOfUpdatedDataDebounceTimerFactory
 @property  NSUUID *UUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  HMIHomePersonManager *homePersonManager
 @property  HMIExternalPersonManager *photosPersonManager

  // class methods
  +[HMDRemotePersonDataMessenger logCategory]

  // instance methods
  -[HMDRemotePersonDataMessenger timerDidFire:]
  -[HMDRemotePersonDataMessenger logIdentifier]
  -[HMDRemotePersonDataMessenger dataSource]
  -[HMDRemotePersonDataMessenger workQueue]
  -[HMDRemotePersonDataMessenger .cxx_destruct]
  -[HMDRemotePersonDataMessenger messageTargetUUID]
  -[HMDRemotePersonDataMessenger UUID]
  -[HMDRemotePersonDataMessenger setDataSource:]
  -[HMDRemotePersonDataMessenger messageReceiveQueue]
  -[HMDRemotePersonDataMessenger messageDispatcher]
  -[HMDRemotePersonDataMessenger configureWithDataSource:home:]
  -[HMDRemotePersonDataMessenger handleUpdatedPerson:mirrorOutputFuture:]
  -[HMDRemotePersonDataMessenger handleUpdatedPersonFaceCrop:mirrorOutputFuture:]
  -[HMDRemotePersonDataMessenger handleRemovedPersonWithUUID:mirrorOutputFuture:]
  -[HMDRemotePersonDataMessenger handleRemovedFaceCropWithUUID:mirrorOutputFuture:]
  -[HMDRemotePersonDataMessenger handleUpdatedSettings:mirrorOutputFuture:]
  -[HMDRemotePersonDataMessenger residentDeviceManager]
  -[HMDRemotePersonDataMessenger handlePerformCloudPullMessage:]
  -[HMDRemotePersonDataMessenger initWithUUID:home:workQueue:]
  -[HMDRemotePersonDataMessenger initWithUUID:messageDispatcher:residentDeviceManager:workQueue:]
  -[HMDRemotePersonDataMessenger _notifyResidentsOfUpdatedFaceClassificationDependentData]
  -[HMDRemotePersonDataMessenger _sendMessagesToNotifyResidentsOfUpdatedFaceClassificationDependentData]
  -[HMDRemotePersonDataMessenger notifyResidentsOfUpdatedDataDebounceTimer]
  -[HMDRemotePersonDataMessenger setNotifyResidentsOfUpdatedDataDebounceTimer:]
  -[HMDRemotePersonDataMessenger notifyResidentsOfUpdatedDataDebounceTimerFactory]
  -[HMDRemotePersonDataMessenger setNotifyResidentsOfUpdatedDataDebounceTimerFactory:]


HMDNaturalLightingContext : HMFObject <HMFLogging, NSSecureCoding, NSCopying>
 @property  HMDNaturalLightingCurve *curve
 @property  NSTimeZone *timeZone
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNaturalLightingContext supportsSecureCoding]
  +[HMDNaturalLightingContext logCategory]

  // instance methods
  -[HMDNaturalLightingContext timeZone]
  -[HMDNaturalLightingContext curve]
  -[HMDNaturalLightingContext encodeWithCoder:]
  -[HMDNaturalLightingContext attributeDescriptions]
  -[HMDNaturalLightingContext .cxx_destruct]
  -[HMDNaturalLightingContext copyWithZone:]
  -[HMDNaturalLightingContext isEqual:]
  -[HMDNaturalLightingContext initWithCoder:]
  -[HMDNaturalLightingContext initWithCurve:timeZone:]


HMDNaturalLightingEnabledRetryContext : HMFObject <NSCopying>
 @property  unsigned long retryCount
 @property  BOOL naturalLightingEnabled
 @property  @? completion

  // instance methods
  -[HMDNaturalLightingEnabledRetryContext completion]
  -[HMDNaturalLightingEnabledRetryContext retryCount]
  -[HMDNaturalLightingEnabledRetryContext setRetryCount:]
  -[HMDNaturalLightingEnabledRetryContext attributeDescriptions]
  -[HMDNaturalLightingEnabledRetryContext .cxx_destruct]
  -[HMDNaturalLightingEnabledRetryContext copyWithZone:]
  -[HMDNaturalLightingEnabledRetryContext naturalLightingEnabled]
  -[HMDNaturalLightingEnabledRetryContext initWithNaturalLightingEnabled:completion:retryCount:]


HMDLightProfile : HMDAccessoryProfile <HMDCharacteristicsAvailabilityListenerDelegate>
 @property  unsigned long supportedFeatures
 @property  HMDCharacteristicsAvailabilityListener *characteristicsAvailabilityListener
 @property  NSSet *notificationEnabledCharacteristics
 @property  HMDHAPAccessory *hapAccessory
 @property  NSString *clientIdentifier
 @property  HMDNaturalLightingCurveWriter *naturalLightingCurveWriter
 @property  NSDate *lastNaturalLightingEnabledDate
 @property  NSDate *lastNaturalLightingUsedDate
 @property  BOOL naturalLightingCapable
 @property  BOOL usingNaturalLighting
 @property  <HMDLightProfileDataSource> *dataSource
 @property  HMDCharacteristic *brightnessCharacteristic
 @property  HMDCharacteristic *colorTemperatureCharacteristic
 @property  NSDate *lastNaturalLightingCurveUpdateDate
 @property  HMDNaturalLightingCurve *naturalLightingCurve
 @property  HMDNaturalLightingActiveTransitionContext *naturalLightingActiveTransitionContext
 @property  NSSet *readCharacteristics
 @property  HMDNaturalLightingEnabledRetryContext *naturalLightingEnabledRetryContext
 @property  unsigned char activeTransitionsCount
 @property  NSHashTable *characteristicValueObservers
 @property  NSSet *availableCharacteristics
 @property  BOOL naturalLightingEnabled
 @property  HMLightProfileSettings *settings
 @property  NSDate *mostRecentNaturalLightingEnabledDate
 @property  NSDate *mostRecentNaturalLightingUsedDate
 @property  HMDService *service
 @property  NSSet *readCharacteristicRequests

  // class methods
  +[HMDLightProfile logCategory]

  // instance methods
  -[HMDLightProfile dataSource]
  -[HMDLightProfile clientIdentifier]
  -[HMDLightProfile encodeWithCoder:]
  -[HMDLightProfile dealloc]
  -[HMDLightProfile .cxx_destruct]
  -[HMDLightProfile settings]
  -[HMDLightProfile service]
  -[HMDLightProfile supportedFeatures]
  -[HMDLightProfile setSupportedFeatures:]
  -[HMDLightProfile isNaturalLightingEnabled]
  -[HMDLightProfile setNaturalLightingEnabled:]
  -[HMDLightProfile registerForMessages]
  -[HMDLightProfile setNaturalLightingEnabled:shouldRetryOnFailure:completion:]
  -[HMDLightProfile handleHomeDidEnableCharacteristicNotification:]
  -[HMDLightProfile handleHomeDidDisableCharacteristicNotification:]
  -[HMDLightProfile naturalLightingCurveWriter]
  -[HMDLightProfile handleAccessoryDisconnected:]
  -[HMDLightProfile hapAccessory]
  -[HMDLightProfile setHapAccessory:]
  -[HMDLightProfile handleAccessoryCharacteristicsChanged:]
  -[HMDLightProfile listener:didUpdateAvailableCharacteristics:]
  -[HMDLightProfile availableCharacteristics]
  -[HMDLightProfile characteristicsAvailabilityListener]
  -[HMDLightProfile handleSetNaturalLightingEnabledMessage:]
  -[HMDLightProfile handleFetchNaturalLightColorTemperatureForBrightnessMessage:]
  -[HMDLightProfile handleHomeNaturalLightingContextUpdated:]
  -[HMDLightProfile initWithWorkQueue:lightService:accessory:]
  -[HMDLightProfile initWithUUID:workQueue:lightService:accessory:characteristicsAvailabilityListener:naturalLightingCurveWriter:dataSource:]
  -[HMDLightProfile resetNaturalLightingEnabledRetryContext]
  -[HMDLightProfile handleSetNaturalLightingEnabled:]
  -[HMDLightProfile notifyClientsOfUpdatedSettingsWithPreviousSettings:]
  -[HMDLightProfile updateNaturalLightingEnabledForCharacteristic:]
  -[HMDLightProfile updateSupportedFeaturesWithCharacteristics:]
  -[HMDLightProfile _handleAccessoryCharacteristicsChanged:]
  -[HMDLightProfile availableCharacteristicWithType:fromChangedObjects:]
  -[HMDLightProfile isUsingNaturalLighting]
  -[HMDLightProfile updateLastNaturalLightingUsedState]
  -[HMDLightProfile updateNaturalLightingCurve]
  -[HMDLightProfile readNaturalLightingCharacteristicsWithReason:]
  -[HMDLightProfile readNaturalLightingCharacteristicsWithReason:completion:]
  -[HMDLightProfile updateActiveTransitionCountWithCharacteristic:]
  -[HMDLightProfile updateSettingsWithCharacteristics:]
  -[HMDLightProfile synchronizeCurveToAccessory]
  -[HMDLightProfile updateEnabledCharacteristicsNotifications]
  -[HMDLightProfile enableNaturalLightingCharacteristicNotificationsForObserver:]
  -[HMDLightProfile disableNaturalLightingCharacteristicNotificationsForObserver:]
  -[HMDLightProfile setNaturalLightingEnabled:completion:retryContext:]
  -[HMDLightProfile retrySetNaturalLightingEnabledWithContext:error:]
  -[HMDLightProfile shouldRetrySetNaturalLightingEnabledWithError:]
  -[HMDLightProfile callSetNaturalLightingEnabledCompletion:error:]
  -[HMDLightProfile updateSettingsWithReadCharacteristicResponsePayload:error:]
  -[HMDLightProfile readCharacteristicRequests]
  -[HMDLightProfile setNaturalLightingEnabled:completion:]
  -[HMDLightProfile mostRecentNaturalLightingEnabledDate]
  -[HMDLightProfile mostRecentNaturalLightingUsedDate]
  -[HMDLightProfile setNaturalLightingCharacteristicsNotificationEnabled:forObserver:]
  -[HMDLightProfile fetchNaturalLightingEnabledWithCompletion:]
  -[HMDLightProfile isNaturalLightingCapable]
  -[HMDLightProfile setNaturalLightingCapable:]
  -[HMDLightProfile naturalLightingCurve]
  -[HMDLightProfile setNaturalLightingCurve:]
  -[HMDLightProfile notificationEnabledCharacteristics]
  -[HMDLightProfile setNotificationEnabledCharacteristics:]
  -[HMDLightProfile lastNaturalLightingEnabledDate]
  -[HMDLightProfile setLastNaturalLightingEnabledDate:]
  -[HMDLightProfile lastNaturalLightingUsedDate]
  -[HMDLightProfile setLastNaturalLightingUsedDate:]
  -[HMDLightProfile brightnessCharacteristic]
  -[HMDLightProfile setBrightnessCharacteristic:]
  -[HMDLightProfile colorTemperatureCharacteristic]
  -[HMDLightProfile setColorTemperatureCharacteristic:]
  -[HMDLightProfile lastNaturalLightingCurveUpdateDate]
  -[HMDLightProfile setLastNaturalLightingCurveUpdateDate:]
  -[HMDLightProfile naturalLightingActiveTransitionContext]
  -[HMDLightProfile setNaturalLightingActiveTransitionContext:]
  -[HMDLightProfile readCharacteristics]
  -[HMDLightProfile setReadCharacteristics:]
  -[HMDLightProfile naturalLightingEnabledRetryContext]
  -[HMDLightProfile setNaturalLightingEnabledRetryContext:]
  -[HMDLightProfile activeTransitionsCount]
  -[HMDLightProfile setActiveTransitionsCount:]
  -[HMDLightProfile characteristicValueObservers]
  -[HMDLightProfile setCharacteristicValueObservers:]


HMDMemoryUtilizationTracker : NSObject <HMFLogging>
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMemoryUtilizationTracker logCategory]

  // instance methods
  -[HMDMemoryUtilizationTracker .cxx_destruct]
  -[HMDMemoryUtilizationTracker init]
  -[HMDMemoryUtilizationTracker logEventSubmitter]
  -[HMDMemoryUtilizationTracker initWithLogEventSubmitter:]
  -[HMDMemoryUtilizationTracker trackMemoryUsageWithReason:]


HMDNetworkRouterFirewallRuleConfiguration : HMFObject <HMFLogging>
 @property  HMDNetworkRouterFirewallRuleAccessoryIdentifier *accessoryIdentifier
 @property  NSDate *lastModifiedTime
 @property  NSArray *lanRules
 @property  BOOL fullAccessLAN
 @property  NSArray *wanRules
 @property  BOOL fullAccessWAN
 @property  NSDictionary *prettyJSONDictionary
 @property  BOOL hasAirplayRules
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNetworkRouterFirewallRuleConfiguration logCategory]
  +[HMDNetworkRouterFirewallRuleConfiguration __decodeNetworkDeclarationsFromJSONDictionary:networkDeclarations:]
  +[HMDNetworkRouterFirewallRuleConfiguration __decodeFullAccessFromNetworkDeclarations:key:fullAccess:]
  +[HMDNetworkRouterFirewallRuleConfiguration __decodeRulesFromNetworkDeclarations:key:class:required:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleConfiguration attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleConfiguration .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleConfiguration isEqual:]
  -[HMDNetworkRouterFirewallRuleConfiguration accessoryIdentifier]
  -[HMDNetworkRouterFirewallRuleConfiguration lastModifiedTime]
  -[HMDNetworkRouterFirewallRuleConfiguration prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleConfiguration initWithAccessoryIdentifier:lastModifiedTime:fullAccessLAN:lanRules:fullAccessWAN:wanRules:]
  -[HMDNetworkRouterFirewallRuleConfiguration initWithAccessoryIdentifier:jsonDictionary:]
  -[HMDNetworkRouterFirewallRuleConfiguration hasAirplayRules]
  -[HMDNetworkRouterFirewallRuleConfiguration lanRules]
  -[HMDNetworkRouterFirewallRuleConfiguration hasFullAccessToLAN]
  -[HMDNetworkRouterFirewallRuleConfiguration wanRules]
  -[HMDNetworkRouterFirewallRuleConfiguration hasFullAccessToWAN]


HMDRemoteEventRouterProtoMessage : PBCodable <NSCopying>
 @property  BOOL hasIdentifier
 @property  NSString *identifier
 @property  BOOL hasConnect
 @property  HMDRemoteEventRouterProtoConnectMessage *connect
 @property  BOOL hasChangeRegistrations
 @property  HMDRemoteEventRouterProtoChangeRegistrationsMessage *changeRegistrations
 @property  BOOL hasKeepAlive
 @property  HMDRemoteEventRouterProtoKeepAliveMessage *keepAlive
 @property  BOOL hasDisconnect
 @property  HMDRemoteEventRouterProtoDisconnectMessage *disconnect
 @property  BOOL hasFetchEvents
 @property  HMDRemoteEventRouterProtoFetchEventsMessage *fetchEvents
 @property  BOOL hasRequest
 @property  int request

  // instance methods
  -[HMDRemoteEventRouterProtoMessage hasRequest]
  -[HMDRemoteEventRouterProtoMessage disconnect]
  -[HMDRemoteEventRouterProtoMessage connect]
  -[HMDRemoteEventRouterProtoMessage identifier]
  -[HMDRemoteEventRouterProtoMessage copyTo:]
  -[HMDRemoteEventRouterProtoMessage setRequest:]
  -[HMDRemoteEventRouterProtoMessage setConnect:]
  -[HMDRemoteEventRouterProtoMessage hasIdentifier]
  -[HMDRemoteEventRouterProtoMessage .cxx_destruct]
  -[HMDRemoteEventRouterProtoMessage mergeFrom:]
  -[HMDRemoteEventRouterProtoMessage setIdentifier:]
  -[HMDRemoteEventRouterProtoMessage dictionaryRepresentation]
  -[HMDRemoteEventRouterProtoMessage copyWithZone:]
  -[HMDRemoteEventRouterProtoMessage keepAlive]
  -[HMDRemoteEventRouterProtoMessage setKeepAlive:]
  -[HMDRemoteEventRouterProtoMessage readFrom:]
  -[HMDRemoteEventRouterProtoMessage writeTo:]
  -[HMDRemoteEventRouterProtoMessage isEqual:]
  -[HMDRemoteEventRouterProtoMessage request]
  -[HMDRemoteEventRouterProtoMessage hasConnect]
  -[HMDRemoteEventRouterProtoMessage hasChangeRegistrations]
  -[HMDRemoteEventRouterProtoMessage setChangeRegistrations:]
  -[HMDRemoteEventRouterProtoMessage hasKeepAlive]
  -[HMDRemoteEventRouterProtoMessage hasDisconnect]
  -[HMDRemoteEventRouterProtoMessage setDisconnect:]
  -[HMDRemoteEventRouterProtoMessage hasFetchEvents]
  -[HMDRemoteEventRouterProtoMessage setFetchEvents:]
  -[HMDRemoteEventRouterProtoMessage setHasRequest:]
  -[HMDRemoteEventRouterProtoMessage requestAsString:]
  -[HMDRemoteEventRouterProtoMessage StringAsRequest:]
  -[HMDRemoteEventRouterProtoMessage clearOneofValuesForRequest]
  -[HMDRemoteEventRouterProtoMessage changeRegistrations]
  -[HMDRemoteEventRouterProtoMessage fetchEvents]


HMDIDSActivityObserverModel : HMBModel
 @property  NSData *pushToken

  // class methods
  +[HMDIDSActivityObserverModel hmbProperties]
  +[HMDIDSActivityObserverModel sentinelParentUUID]

  // instance methods
  -[HMDIDSActivityObserverModel initWithModelID:]


HMDIDSActivityRegistrationModel : HMBModel
 @property  NSUUID *subjectDeviceIdentifier
 @property  NSArray *subActivities

  // class methods
  +[HMDIDSActivityRegistrationModel hmbProperties]
  +[HMDIDSActivityRegistrationModel hmbQueries]
  +[HMDIDSActivityRegistrationModel registeredDevicesQuery]


HMDCharacteristicResponseNotificationContext : HMFObject
 @property  NSUUID *requestIdentifier
 @property  BOOL pendingMultiPartResponses
 @property  NSSet *changedCharacteristics
 @property  NSDictionary *notificationPayloadByAccessoryUUID
 @property  NSSet *responseCharacteristics

  // class methods
  +[HMDCharacteristicResponseNotificationContext responsePayloadForHome:changedAccessories:moreMessagesInMultipart:]
  +[HMDCharacteristicResponseNotificationContext notificationUpdateMessagePayloadForHome:notificationEnabled:characteristics:characteristicsErrorsMap:]
  +[HMDCharacteristicResponseNotificationContext updateMultipleCharacteristicReadWriteResponsePayload:withUnhandledRequests:]

  // instance methods
  -[HMDCharacteristicResponseNotificationContext requestIdentifier]
  -[HMDCharacteristicResponseNotificationContext attributeDescriptions]
  -[HMDCharacteristicResponseNotificationContext .cxx_destruct]
  -[HMDCharacteristicResponseNotificationContext changedCharacteristics]
  -[HMDCharacteristicResponseNotificationContext initWithRequestIdentifier:responses:pendingMultiPartResponses:]
  -[HMDCharacteristicResponseNotificationContext notificationWithHome:]
  -[HMDCharacteristicResponseNotificationContext notificationPayloadByAccessoryUUID]
  -[HMDCharacteristicResponseNotificationContext responseCharacteristics]
  -[HMDCharacteristicResponseNotificationContext hasPendingMultiPartResponses]


AWDHomeKitUserPresenceAuthorization : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasAuth
 @property  int auth

  // instance methods
  -[AWDHomeKitUserPresenceAuthorization setTimestamp:]
  -[AWDHomeKitUserPresenceAuthorization copyTo:]
  -[AWDHomeKitUserPresenceAuthorization mergeFrom:]
  -[AWDHomeKitUserPresenceAuthorization setHasTimestamp:]
  -[AWDHomeKitUserPresenceAuthorization dictionaryRepresentation]
  -[AWDHomeKitUserPresenceAuthorization hasTimestamp]
  -[AWDHomeKitUserPresenceAuthorization copyWithZone:]
  -[AWDHomeKitUserPresenceAuthorization timestamp]
  -[AWDHomeKitUserPresenceAuthorization readFrom:]
  -[AWDHomeKitUserPresenceAuthorization writeTo:]
  -[AWDHomeKitUserPresenceAuthorization isEqual:]
  -[AWDHomeKitUserPresenceAuthorization auth]
  -[AWDHomeKitUserPresenceAuthorization setAuth:]
  -[AWDHomeKitUserPresenceAuthorization setHasAuth:]
  -[AWDHomeKitUserPresenceAuthorization hasAuth]
  -[AWDHomeKitUserPresenceAuthorization authAsString:]
  -[AWDHomeKitUserPresenceAuthorization StringAsAuth:]


HMDNetworkRouterProfile : HMDAccessoryProfile
 @property  unsigned long networkStatus
 @property  unsigned long wanStatus
 @property  long long routerStatus

  // class methods
  +[HMDNetworkRouterProfile supportsSecureCoding]
  +[HMDNetworkRouterProfile logCategory]

  // instance methods
  -[HMDNetworkRouterProfile encodeWithCoder:]
  -[HMDNetworkRouterProfile dealloc]
  -[HMDNetworkRouterProfile setNetworkStatus:]
  -[HMDNetworkRouterProfile networkStatus]
  -[HMDNetworkRouterProfile isEqual:]
  -[HMDNetworkRouterProfile unconfigure]
  -[HMDNetworkRouterProfile registerForMessages]
  -[HMDNetworkRouterProfile runtimeState]
  -[HMDNetworkRouterProfile handleAccessoryConnected:]
  -[HMDNetworkRouterProfile handleCharacteristicsChangedNotification:]
  -[HMDNetworkRouterProfile handleInitialState]
  -[HMDNetworkRouterProfile handleAccessoryIsReachable:]
  -[HMDNetworkRouterProfile handleNetworkRouterSatelliteAddedOrRemoved:]
  -[HMDNetworkRouterProfile initWithRouterService:msgDispatcher:]
  -[HMDNetworkRouterProfile __notifyClientsOfNetworkStatus:]
  -[HMDNetworkRouterProfile _updateRouterStatus:]
  -[HMDNetworkRouterProfile _updateWANStatus:]
  -[HMDNetworkRouterProfile __handleNetworkAccessViolationUpdate:]
  -[HMDNetworkRouterProfile wanStatus]
  -[HMDNetworkRouterProfile setWanStatus:]
  -[HMDNetworkRouterProfile routerStatus]
  -[HMDNetworkRouterProfile setRouterStatus:]


HMDAccountHandleFormatter : NSFormatter <HMFPrivateDescriptionFormatter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccountHandleFormatter defaultFormatter]

  // instance methods
  -[HMDAccountHandleFormatter getObjectValue:forString:errorDescription:]
  -[HMDAccountHandleFormatter stringForObjectValue:]
  -[HMDAccountHandleFormatter privateStringForObjectValue:]
  -[HMDAccountHandleFormatter accountHandleFromString:]


HMDCameraMediaParameterSelection : HMDCameraParameterSelection
 @property  HMDCameraVideoParameterSelection *videoParameterSelection
 @property  HMDCameraAudioParameterSelection *audioParameterSelection

  // instance methods
  -[HMDCameraMediaParameterSelection .cxx_destruct]
  -[HMDCameraMediaParameterSelection findBestMatchWithProtocolParameters:streamingCapabilities:videoTierParameters:]
  -[HMDCameraMediaParameterSelection setSelectedEndPointSetupParameters:videoNetworkConfig:audioNetworkConfig:]
  -[HMDCameraMediaParameterSelection setSelectedConfigParameters:]
  -[HMDCameraMediaParameterSelection setReselectedConfigParameters:videoTier:]
  -[HMDCameraMediaParameterSelection audioParameterSelection]
  -[HMDCameraMediaParameterSelection setAudioParameterSelection:]
  -[HMDCameraMediaParameterSelection videoParameterSelection]
  -[HMDCameraMediaParameterSelection setVideoParameterSelection:]


HMDWiFiReconfigurationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  HMDAccessory *accessory
 @property  BOOL usingFailSafeUpdate
 @property  long long credentialType
 @property  HMDAccessory *routerAccessory

  // instance methods
  -[HMDWiFiReconfigurationLogEvent credentialType]
  -[HMDWiFiReconfigurationLogEvent accessory]
  -[HMDWiFiReconfigurationLogEvent eventName]
  -[HMDWiFiReconfigurationLogEvent setAccessory:]
  -[HMDWiFiReconfigurationLogEvent .cxx_destruct]
  -[HMDWiFiReconfigurationLogEvent setCredentialType:]
  -[HMDWiFiReconfigurationLogEvent init]
  -[HMDWiFiReconfigurationLogEvent serializedEvent]
  -[HMDWiFiReconfigurationLogEvent isUsingFailSafeUpdate]
  -[HMDWiFiReconfigurationLogEvent setUsingFailSafeUpdate:]
  -[HMDWiFiReconfigurationLogEvent routerAccessory]
  -[HMDWiFiReconfigurationLogEvent setRouterAccessory:]


HMDSecureRemoteStreamInternal : HMFObject <HMFLogging>
 @property  double requestTimeout
 @property  @? internalRequestHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? getLocalIdentityHandler
 @property  @? findPeerHandler
 @property  @? startedHandler
 @property  @? stoppedHandler
 @property  @? requestHandler
 @property  @? transportSendMessage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSecureRemoteStreamInternal logCategory]

  // instance methods
  -[HMDSecureRemoteStreamInternal setFindPeerHandler:]
  -[HMDSecureRemoteStreamInternal logIdentifier]
  -[HMDSecureRemoteStreamInternal dealloc]
  -[HMDSecureRemoteStreamInternal _start]
  -[HMDSecureRemoteStreamInternal .cxx_destruct]
  -[HMDSecureRemoteStreamInternal _stop:]
  -[HMDSecureRemoteStreamInternal stop]
  -[HMDSecureRemoteStreamInternal requestTimeout]
  -[HMDSecureRemoteStreamInternal setDispatchQueue:]
  -[HMDSecureRemoteStreamInternal dispatchQueue]
  -[HMDSecureRemoteStreamInternal requestHandler]
  -[HMDSecureRemoteStreamInternal findPeerHandler]
  -[HMDSecureRemoteStreamInternal start]
  -[HMDSecureRemoteStreamInternal setRequestHandler:]
  -[HMDSecureRemoteStreamInternal init]
  -[HMDSecureRemoteStreamInternal setStoppedHandler:]
  -[HMDSecureRemoteStreamInternal stoppedHandler]
  -[HMDSecureRemoteStreamInternal _runStateMachine]
  -[HMDSecureRemoteStreamInternal initWithType:commitTimeout:clientIdleTimeout:serverIdleTimeout:sendInternalTimeout:sendUserTimeout:]
  -[HMDSecureRemoteStreamInternal _setupEncryption]
  -[HMDSecureRemoteStreamInternal _updateIdleTimer]
  -[HMDSecureRemoteStreamInternal sendRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _sendUserRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _completeUserTransaction:response:options:status:]
  -[HMDSecureRemoteStreamInternal _sendRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _completeTransaction:response:options:status:]
  -[HMDSecureRemoteStreamInternal transportReceivedMessage:options:]
  -[HMDSecureRemoteStreamInternal _transportReceivedMessage:options:]
  -[HMDSecureRemoteStreamInternal _clientRunStateMachine]
  -[HMDSecureRemoteStreamInternal _clientPairVerifyExchange:]
  -[HMDSecureRemoteStreamInternal _clientSendPrepareRequest:]
  -[HMDSecureRemoteStreamInternal _clientHandlePrepareResponse:options:]
  -[HMDSecureRemoteStreamInternal _clientSendCommitRequest:]
  -[HMDSecureRemoteStreamInternal _clientHandleCommitResponse:options:]
  -[HMDSecureRemoteStreamInternal _serverRunStateMachine]
  -[HMDSecureRemoteStreamInternal _serverPairVerifyExchange:options:]
  -[HMDSecureRemoteStreamInternal _serverHandleEncryptedRequest:options:]
  -[HMDSecureRemoteStreamInternal _serverHandleDecryptedRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _serverHandlePrepareRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _serverHandleCommitRequest:options:responseHandler:]
  -[HMDSecureRemoteStreamInternal _serverCompletePrepareRequest:]
  -[HMDSecureRemoteStreamInternal internalRequestHandler]
  -[HMDSecureRemoteStreamInternal setInternalRequestHandler:]
  -[HMDSecureRemoteStreamInternal getLocalIdentityHandler]
  -[HMDSecureRemoteStreamInternal setGetLocalIdentityHandler:]
  -[HMDSecureRemoteStreamInternal startedHandler]
  -[HMDSecureRemoteStreamInternal setStartedHandler:]
  -[HMDSecureRemoteStreamInternal transportSendMessage]
  -[HMDSecureRemoteStreamInternal setTransportSendMessage:]


HMDSecureRemoteStream : HMFMessageTransport <HMFLogging, HMFObject>
 @property  HMDDevice *peerDevice
 @property  HMDUser *peer
 @property  HMFPairingIdentity *peerIdentity
 @property  HMDSecureRemoteStreamInternal *remoteSession
 @property  HMDDevice *currentDevice
 @property  BOOL supportsSharedIdentities
 @property  HMDAWDRemoteSessionMetric *metric
 @property  long long role
 @property  NSNumber *maximumRemoteStreams
 @property  long long qualityOfService
 @property  BOOL open
 @property  BOOL authenticated
 @property  BOOL idle
 @property  NSDate *lastActivity
 @property  NSUUID *sessionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *shortDescription
 @property  NSString *privateDescription
 @property  NSString *propertyDescription
 @property  NSArray *attributeDescriptions

  // class methods
  +[HMDSecureRemoteStream logCategory]

  // instance methods
  -[HMDSecureRemoteStream currentDevice]
  -[HMDSecureRemoteStream peerDevice]
  -[HMDSecureRemoteStream setQualityOfService:]
  -[HMDSecureRemoteStream _closeWithError:]
  -[HMDSecureRemoteStream logIdentifier]
  -[HMDSecureRemoteStream propertyDescription]
  -[HMDSecureRemoteStream setPeerDevice:]
  -[HMDSecureRemoteStream sendMessage:completionHandler:]
  -[HMDSecureRemoteStream role]
  -[HMDSecureRemoteStream sessionID]
  -[HMDSecureRemoteStream qualityOfService]
  -[HMDSecureRemoteStream metric]
  -[HMDSecureRemoteStream isAuthenticated]
  -[HMDSecureRemoteStream dealloc]
  -[HMDSecureRemoteStream .cxx_destruct]
  -[HMDSecureRemoteStream stop]
  -[HMDSecureRemoteStream setMetric:]
  -[HMDSecureRemoteStream peer]
  -[HMDSecureRemoteStream shortDescription]
  -[HMDSecureRemoteStream isIdle]
  -[HMDSecureRemoteStream isOpen]
  -[HMDSecureRemoteStream setOpen:]
  -[HMDSecureRemoteStream setPeer:]
  -[HMDSecureRemoteStream lastActivity]
  -[HMDSecureRemoteStream maximumRemoteStreams]
  -[HMDSecureRemoteStream setMaximumRemoteStreams:]
  -[HMDSecureRemoteStream __handleAccountRemovedFromRegistry:]
  -[HMDSecureRemoteStream __handleDeviceRemovedFromAccount:]
  -[HMDSecureRemoteStream __handleRemovedIdentity:]
  -[HMDSecureRemoteStream initWithCurrentDevice:peerDevice:clientMode:sessionID:]
  -[HMDSecureRemoteStream setIdle:]
  -[HMDSecureRemoteStream startAndInvokeOnQueue:completionHandler:]
  -[HMDSecureRemoteStream _configureWithCompletionQueue:completionHandler:]
  -[HMDSecureRemoteStream closedWithError:]
  -[HMDSecureRemoteStream handleCompletedMessage:options:responsePayload:error:completionHandler:]
  -[HMDSecureRemoteStream handleSecureMessage:fromDevice:fromTransport:]
  -[HMDSecureRemoteStream peerIdentity]
  -[HMDSecureRemoteStream setPeerIdentity:]
  -[HMDSecureRemoteStream remoteSession]
  -[HMDSecureRemoteStream setRemoteSession:]
  -[HMDSecureRemoteStream supportsSharedIdentities]
  -[HMDSecureRemoteStream setSupportsSharedIdentities:]


HMDMetricsDateProvider : NSObject
 @property  NSCalendar *calendar
 @property  NSDateFormatter *formatter
 @property  @? dateFactory

  // instance methods
  -[HMDMetricsDateProvider calendar]
  -[HMDMetricsDateProvider .cxx_destruct]
  -[HMDMetricsDateProvider formatter]
  -[HMDMetricsDateProvider init]
  -[HMDMetricsDateProvider dateFactory]
  -[HMDMetricsDateProvider initWithDateFactory:]
  -[HMDMetricsDateProvider startOfCurrentDay]
  -[HMDMetricsDateProvider startOfDayByAddingDayCount:]
  -[HMDMetricsDateProvider startOfDateByAddingDayCount:toDate:]
  -[HMDMetricsDateProvider daysFromDate:toDate:]
  -[HMDMetricsDateProvider dayNumberOfWeekForDate:]
  -[HMDMetricsDateProvider currentDayNumberOfWeek]
  -[HMDMetricsDateProvider startOfCurrentWeek]
  -[HMDMetricsDateProvider startOfCurrentMonth]
  -[HMDMetricsDateProvider startOfCurrentYear]


HMDDataStreamBulkSendSessionCandidate : NSObject <HMDDataStreamBulkSendSessionCandidate>
 @property  HMDDataStreamBulkSendProtocol *bulkSendProtocol
 @property  NSDictionary *requestHeader
 @property  NSMutableArray *pendingReads
 @property  NSError *receivedFailure
 @property  NSDictionary *metadata

  // instance methods
  -[HMDDataStreamBulkSendSessionCandidate .cxx_destruct]
  -[HMDDataStreamBulkSendSessionCandidate metadata]
  -[HMDDataStreamBulkSendSessionCandidate pendingReads]
  -[HMDDataStreamBulkSendSessionCandidate setPendingReads:]
  -[HMDDataStreamBulkSendSessionCandidate acceptBulkSendSessionOnQueue:callback:]
  -[HMDDataStreamBulkSendSessionCandidate rejectBulkSendSessionWithStatus:]
  -[HMDDataStreamBulkSendSessionCandidate initWithProtocol:requestHeader:metadata:]
  -[HMDDataStreamBulkSendSessionCandidate bulkSendProtocol]
  -[HMDDataStreamBulkSendSessionCandidate requestHeader]
  -[HMDDataStreamBulkSendSessionCandidate receivedFailure]
  -[HMDDataStreamBulkSendSessionCandidate setReceivedFailure:]


HMDDataStreamBulkSendSession : NSObject <HMFLogging, HMDDataStreamBulkSendSession>
 @property  @? activeReadHandler
 @property  NSMutableArray *pendingReads
 @property  NSError *pendingError
 @property  NSString *logIdentifier
 @property  HMDDataStreamBulkSendProtocol *bulkSendProtocol
 @property  NSNumber *sessionIdentifier
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL active

  // class methods
  +[HMDDataStreamBulkSendSession logCategory]

  // instance methods
  -[HMDDataStreamBulkSendSession sessionIdentifier]
  -[HMDDataStreamBulkSendSession logIdentifier]
  -[HMDDataStreamBulkSendSession dealloc]
  -[HMDDataStreamBulkSendSession isActive]
  -[HMDDataStreamBulkSendSession .cxx_destruct]
  -[HMDDataStreamBulkSendSession queue]
  -[HMDDataStreamBulkSendSession read:]
  -[HMDDataStreamBulkSendSession cancelWithReason:]
  -[HMDDataStreamBulkSendSession pendingReads]
  -[HMDDataStreamBulkSendSession setPendingReads:]
  -[HMDDataStreamBulkSendSession bulkSendProtocol]
  -[HMDDataStreamBulkSendSession initWithProtocol:sessionIdentifier:queue:logIdentifier:]
  -[HMDDataStreamBulkSendSession asyncHandleIncomingPackets:isEof:]
  -[HMDDataStreamBulkSendSession asyncHandleRemoteCloseWithError:]
  -[HMDDataStreamBulkSendSession _closeSession]
  -[HMDDataStreamBulkSendSession _pumpReadDataIfPossible]
  -[HMDDataStreamBulkSendSession activeReadHandler]
  -[HMDDataStreamBulkSendSession setActiveReadHandler:]
  -[HMDDataStreamBulkSendSession pendingError]
  -[HMDDataStreamBulkSendSession setPendingError:]


HMDWidgetConfigurationReader : NSObject
 @property  <HMDWidgetConfigurationReaderInterface> *interface

  // instance methods
  -[HMDWidgetConfigurationReader interface]
  -[HMDWidgetConfigurationReader .cxx_destruct]
  -[HMDWidgetConfigurationReader initWithInterface:]
  -[HMDWidgetConfigurationReader init]
  -[HMDWidgetConfigurationReader fetchedHomeWidgets]
  -[HMDWidgetConfigurationReader homeWidgetsEnabledCount]


HMDCameraRecordingLoadBalancer : HMFObject <HMFLogging, HMISystemResourceUsageMonitorDelegate>
 @property  HMDHomeManager *homeManager
 @property  HMISystemResourceUsageMonitor *systemResourceUsageMonitor
 @property  NSMutableDictionary *recordingSessionSummariesByCameraUUIDString
 @property  NSMutableDictionary *readyToRecordByCameraUUIDString
 @property  NSMutableDictionary *decisionsByCameraUUIDByDeviceUUID
 @property  NSMutableDictionary *lastDecisionByCameraUUID
 @property  unsigned long totalNumberOfStreams
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraRecordingLoadBalancer logCategory]

  // instance methods
  -[HMDCameraRecordingLoadBalancer .cxx_destruct]
  -[HMDCameraRecordingLoadBalancer homeManager]
  -[HMDCameraRecordingLoadBalancer start]
  -[HMDCameraRecordingLoadBalancer handleResidentMeshInitialized:]
  -[HMDCameraRecordingLoadBalancer systemResourceUsageDidChangeTo:]
  -[HMDCameraRecordingLoadBalancer initWithHomeManager:resourceUsageMonitor:]
  -[HMDCameraRecordingLoadBalancer recordingDidStartForCameraWithUUID:]
  -[HMDCameraRecordingLoadBalancer recordingDidEndForCameraWithUUID:]
  -[HMDCameraRecordingLoadBalancer isReadyToRecordForCameraWithUUID:]
  -[HMDCameraRecordingLoadBalancer setReadyToRecord:forCameraWithUUID:]
  -[HMDCameraRecordingLoadBalancer removeDataForCameraWithUUID:]
  -[HMDCameraRecordingLoadBalancer loadBalancingDecisionForCamera:deviceFilter:]
  -[HMDCameraRecordingLoadBalancer handleRecordingSessionForwardingSuccessForDecision:]
  -[HMDCameraRecordingLoadBalancer handleRecordingSessionForwardingFailureForDecision:]
  -[HMDCameraRecordingLoadBalancer _loadBalancingDecisionForCamera:deviceFilter:]
  -[HMDCameraRecordingLoadBalancer _loadBalancingDescriptionFromSortedNodes:]
  -[HMDCameraRecordingLoadBalancer _updateReadyToRecordMetric]
  -[HMDCameraRecordingLoadBalancer _updateActiveRecordingSessionsMetric]
  -[HMDCameraRecordingLoadBalancer _jobSlotsWithSystemResourceUsageLevel:]
  -[HMDCameraRecordingLoadBalancer _partialJobSlotsWithSystemResourceUsageLevel:]
  -[HMDCameraRecordingLoadBalancer systemResourceUsageMonitor]
  -[HMDCameraRecordingLoadBalancer recordingSessionSummariesByCameraUUIDString]
  -[HMDCameraRecordingLoadBalancer readyToRecordByCameraUUIDString]
  -[HMDCameraRecordingLoadBalancer decisionsByCameraUUIDByDeviceUUID]
  -[HMDCameraRecordingLoadBalancer lastDecisionByCameraUUID]
  -[HMDCameraRecordingLoadBalancer totalNumberOfStreams]
  -[HMDCameraRecordingLoadBalancer setTotalNumberOfStreams:]


HMDCloudManagerMetricsDispatcher : HMFObject <HMFLogging>
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCloudManagerMetricsDispatcher logCategory]

  // instance methods
  -[HMDCloudManagerMetricsDispatcher .cxx_destruct]
  -[HMDCloudManagerMetricsDispatcher logEventSubmitter]
  -[HMDCloudManagerMetricsDispatcher initWithLogEventDispatcher:]
  -[HMDCloudManagerMetricsDispatcher submitFailureEventWithModelType:failureCode:error:]


HMDAccessoryNetworkCredential : NSObject
 @property  NSUUID *networkRouterUUID
 @property  NSNumber *clientIdentifier
 @property  NSData *wiFiPSK

  // instance methods
  -[HMDAccessoryNetworkCredential clientIdentifier]
  -[HMDAccessoryNetworkCredential .cxx_destruct]
  -[HMDAccessoryNetworkCredential networkRouterUUID]
  -[HMDAccessoryNetworkCredential initWithNetworkRouterUUID:clientIdentifier:wiFiPSK:]
  -[HMDAccessoryNetworkCredential wiFiPSK]


HMDCameraClipsQuotaEnableCameraMessage : PBCodable <CKCodeOperationMessageMutation, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL hasZoneName
 @property  NSString *zoneName

  // instance methods
  -[HMDCameraClipsQuotaEnableCameraMessage copyTo:]
  -[HMDCameraClipsQuotaEnableCameraMessage zoneName]
  -[HMDCameraClipsQuotaEnableCameraMessage .cxx_destruct]
  -[HMDCameraClipsQuotaEnableCameraMessage mergeFrom:]
  -[HMDCameraClipsQuotaEnableCameraMessage dictionaryRepresentation]
  -[HMDCameraClipsQuotaEnableCameraMessage copyWithZone:]
  -[HMDCameraClipsQuotaEnableCameraMessage setZoneName:]
  -[HMDCameraClipsQuotaEnableCameraMessage hasZoneName]
  -[HMDCameraClipsQuotaEnableCameraMessage readFrom:]
  -[HMDCameraClipsQuotaEnableCameraMessage writeTo:]
  -[HMDCameraClipsQuotaEnableCameraMessage isEqual:]


HMRemoteLoginMessage : HMFObject <NSSecureCoding>
 @property  NSString *sessionID
 @property  NSError *error

  // class methods
  +[HMRemoteLoginMessage supportsSecureCoding]

  // instance methods
  -[HMRemoteLoginMessage sessionID]
  -[HMRemoteLoginMessage encodeWithCoder:]
  -[HMRemoteLoginMessage error]
  -[HMRemoteLoginMessage .cxx_destruct]
  -[HMRemoteLoginMessage setError:]
  -[HMRemoteLoginMessage initWithSessionID:]
  -[HMRemoteLoginMessage initWithCoder:]
  -[HMRemoteLoginMessage initNewMessage]


HMDAppleMediaAccessorySleepWakeStateController : HMFObject <HMFMessageReceiver>
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDAppleMediaAccessorySleepWakeStateController .cxx_destruct]
  -[HMDAppleMediaAccessorySleepWakeStateController messageTargetUUID]
  -[HMDAppleMediaAccessorySleepWakeStateController messageReceiveQueue]
  -[HMDAppleMediaAccessorySleepWakeStateController _handleFetchSleepWakeStateMessage:]
  -[HMDAppleMediaAccessorySleepWakeStateController initWithAccessoryUUID:dataSource:]
  -[HMDAppleMediaAccessorySleepWakeStateController configureWithHome:messageDispatcher:workQueue:]
  -[HMDAppleMediaAccessorySleepWakeStateController fetchSleepWakeStateWithCompletion:]


HMDMPCSessionControllerExecutionEvent : HMDMediaPlaybackActionEvent <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions
 @property  BOOL didPartiallySucceed
 @property  NSString *resultString

  // class methods
  +[HMDMPCSessionControllerExecutionEvent identifier]

  // instance methods
  -[HMDMPCSessionControllerExecutionEvent eventName]
  -[HMDMPCSessionControllerExecutionEvent resultString]
  -[HMDMPCSessionControllerExecutionEvent serializedEvent]
  -[HMDMPCSessionControllerExecutionEvent didPartiallySucceed]
  -[HMDMPCSessionControllerExecutionEvent setDidPartiallySucceed:]


HMDCameraAccessModeChangedBulletin : HMFObject
 @property  NSString *title
 @property  NSString *body
 @property  NSString *threadIdentifier
 @property  NSDate *dateOfOccurrence
 @property  NSDictionary *userInfo
 @property  BOOL timeSensitive

  // class methods
  +[HMDCameraAccessModeChangedBulletin localizedMessageForCameraAccessModeChange:changeReason:camera:]

  // instance methods
  -[HMDCameraAccessModeChangedBulletin userInfo]
  -[HMDCameraAccessModeChangedBulletin attributeDescriptions]
  -[HMDCameraAccessModeChangedBulletin .cxx_destruct]
  -[HMDCameraAccessModeChangedBulletin title]
  -[HMDCameraAccessModeChangedBulletin threadIdentifier]
  -[HMDCameraAccessModeChangedBulletin body]
  -[HMDCameraAccessModeChangedBulletin dateOfOccurrence]
  -[HMDCameraAccessModeChangedBulletin initWithTitle:body:threadIdentifier:dateOfOccurrence:userInfo:isTimeSensitive:]
  -[HMDCameraAccessModeChangedBulletin isTimeSensitive]
  -[HMDCameraAccessModeChangedBulletin initWithAccessMode:camera:home:changeReason:changeDate:]


HMDWakeConfiguration : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSData *reserved
 @property  HMDWakeConfigurationParameters *custom1
 @property  HMDWakeConfigurationParameters *custom2
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWakeConfiguration parsedFromData:error:]

  // instance methods
  -[HMDWakeConfiguration parseFromData:error:]
  -[HMDWakeConfiguration .cxx_destruct]
  -[HMDWakeConfiguration setReserved:]
  -[HMDWakeConfiguration copyWithZone:]
  -[HMDWakeConfiguration reserved]
  -[HMDWakeConfiguration isEqual:]
  -[HMDWakeConfiguration init]
  -[HMDWakeConfiguration serializeWithError:]
  -[HMDWakeConfiguration initWithReserved:custom1:custom2:]
  -[HMDWakeConfiguration custom1]
  -[HMDWakeConfiguration setCustom1:]
  -[HMDWakeConfiguration custom2]
  -[HMDWakeConfiguration setCustom2:]


HMDWakeConfigurationParameters : NSObject <NSCopying, HAPTLVProtocol>
 @property  NSData *delimiter
 @property  NSData *primaryIdentifier
 @property  NSMutableArray *secondaryIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDWakeConfigurationParameters parsedFromData:error:]

  // instance methods
  -[HMDWakeConfigurationParameters parseFromData:error:]
  -[HMDWakeConfigurationParameters .cxx_destruct]
  -[HMDWakeConfigurationParameters primaryIdentifier]
  -[HMDWakeConfigurationParameters copyWithZone:]
  -[HMDWakeConfigurationParameters isEqual:]
  -[HMDWakeConfigurationParameters init]
  -[HMDWakeConfigurationParameters secondaryIdentifier]
  -[HMDWakeConfigurationParameters setSecondaryIdentifier:]
  -[HMDWakeConfigurationParameters serializeWithError:]
  -[HMDWakeConfigurationParameters initWithDelimiter:primaryIdentifier:secondaryIdentifier:]
  -[HMDWakeConfigurationParameters delimiter]
  -[HMDWakeConfigurationParameters setDelimiter:]
  -[HMDWakeConfigurationParameters setPrimaryIdentifier:]


HMDAccessorySetupMetricDispatcher : HMFObject <HMFTimerDelegate, HMFLogging, HMEEventConsumer>
 @property  NSDate *firstSettingTime
 @property  NSDate *languageSettingTime
 @property  <HMDDeviceSetupTrackingInfo> *trackingInfo
 @property  BOOL submitted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAccessorySetupMetricDispatcher logCategory]

  // instance methods
  -[HMDAccessorySetupMetricDispatcher didReceiveEvent:topic:]
  -[HMDAccessorySetupMetricDispatcher timerDidFire:]
  -[HMDAccessorySetupMetricDispatcher logIdentifier]
  -[HMDAccessorySetupMetricDispatcher submit]
  -[HMDAccessorySetupMetricDispatcher .cxx_destruct]
  -[HMDAccessorySetupMetricDispatcher didReceiveCachedEvent:topic:source:]
  -[HMDAccessorySetupMetricDispatcher submitted]
  -[HMDAccessorySetupMetricDispatcher firstSettingTime]
  -[HMDAccessorySetupMetricDispatcher languageSettingTime]
  -[HMDAccessorySetupMetricDispatcher addHome:]
  -[HMDAccessorySetupMetricDispatcher initWithTrackingInfo:homeManager:logEventDispatcher:timerFactory:]
  -[HMDAccessorySetupMetricDispatcher initWithTrackingInfo:homeManager:]
  -[HMDAccessorySetupMetricDispatcher markFirstSettingObserved]
  -[HMDAccessorySetupMetricDispatcher markLanguageSettingObserved]
  -[HMDAccessorySetupMetricDispatcher trackingInfo]


HMDHomeLightBrightnessLogger : HMFObject <HMFLogging, HMDDevicePreferenceDataSource, HMMLogEventObserver, HMDLogEventDailyTaskRunner>
 @property  HMDHome *home
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  NSNotificationCenter *notificationCenter
 @property  NSMapTable *notificationEnabledCharacteristicsByAccessory
 @property  BOOL currentDevicePrimaryResident
 @property  NSString *clientIdentifier
 @property  BMStreamDatastorePruner *pruner
 @property  BMStoreConfig *biomeStoreConfig
 @property  unsigned long eventOrder
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  HMDLogEventDailyScheduler *dailyScheduler
 @property  BMSource *source
 @property  BMStoreStream *stream
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHomeLightBrightnessLogger logCategory]
  +[HMDHomeLightBrightnessLogger handleDifferentType:]

  // instance methods
  -[HMDHomeLightBrightnessLogger source]
  -[HMDHomeLightBrightnessLogger notificationCenter]
  -[HMDHomeLightBrightnessLogger pruner]
  -[HMDHomeLightBrightnessLogger home]
  -[HMDHomeLightBrightnessLogger logIdentifier]
  -[HMDHomeLightBrightnessLogger clientIdentifier]
  -[HMDHomeLightBrightnessLogger workQueue]
  -[HMDHomeLightBrightnessLogger stream]
  -[HMDHomeLightBrightnessLogger .cxx_destruct]
  -[HMDHomeLightBrightnessLogger eventOrder]
  -[HMDHomeLightBrightnessLogger setEventOrder:]
  -[HMDHomeLightBrightnessLogger didReceiveEventFromDispatcher:]
  -[HMDHomeLightBrightnessLogger logEventSubmitter]
  -[HMDHomeLightBrightnessLogger isCurrentDevicePrimaryResident]
  -[HMDHomeLightBrightnessLogger runDailyTask]
  -[HMDHomeLightBrightnessLogger dailyScheduler]
  -[HMDHomeLightBrightnessLogger handlePrimaryResidentUpdateNotification:]
  -[HMDHomeLightBrightnessLogger handleAccessoryRemovedNotification:]
  -[HMDHomeLightBrightnessLogger handleAccessoryAdded:]
  -[HMDHomeLightBrightnessLogger setCurrentDevicePrimaryResident:]
  -[HMDHomeLightBrightnessLogger handleCharacteristicsValueUpdated:]
  -[HMDHomeLightBrightnessLogger initWithHome:logEventSubmitter:dailyScheduler:workQueue:]
  -[HMDHomeLightBrightnessLogger configureLogger]
  -[HMDHomeLightBrightnessLogger handleCharacteristicWriteLogEvent:]
  -[HMDHomeLightBrightnessLogger handleCurrentDevicePrimaryResidentChangedWithReason:]
  -[HMDHomeLightBrightnessLogger submitCoreAnalyticsEventForDoors:accessoryUUID:characteristicUUID:homeUUID:homePresence:]
  -[HMDHomeLightBrightnessLogger submitCoreAnalyticsEventForMotionSensor:accessoryUUID:characteristicUUID:homeUUID:homePresence:]
  -[HMDHomeLightBrightnessLogger submitCoreAnalyticsEventForLocks:accessoryUUID:characteristicUUID:homeUUID:homePresence:]
  -[HMDHomeLightBrightnessLogger submitCoreAnalyticsEventForGarageDoorOpener:accessoryUUID:characteristicUUID:homeUUID:homePresence:]
  -[HMDHomeLightBrightnessLogger submitCoreAnalyticsEventForBrightness:accessoryUUID:characteristicUUID:homeUUID:eventOrder:homePresence:luxLevel:]
  -[HMDHomeLightBrightnessLogger processCharacteristicsAndSubmitCoreAnalyticsEvents:withLogMessage:]
  -[HMDHomeLightBrightnessLogger brightnessSensorsValue]
  -[HMDHomeLightBrightnessLogger generateTimeStampUpToMinute]
  -[HMDHomeLightBrightnessLogger generateTimeStampUpToSecond]
  -[HMDHomeLightBrightnessLogger readFromBiomeDatabase]
  -[HMDHomeLightBrightnessLogger notificationEnabledCharacteristicsByAccessory]
  -[HMDHomeLightBrightnessLogger biomeStoreConfig]


HMDAccessoryAdvertisement : NSObject
 @property  NSString *identifier
 @property  NSString *name
 @property  long long associationOptions
 @property  HMAccessoryCategory *category

  // instance methods
  -[HMDAccessoryAdvertisement setCategory:]
  -[HMDAccessoryAdvertisement identifier]
  -[HMDAccessoryAdvertisement category]
  -[HMDAccessoryAdvertisement .cxx_destruct]
  -[HMDAccessoryAdvertisement name]
  -[HMDAccessoryAdvertisement isEqual:]
  -[HMDAccessoryAdvertisement associationOptions]
  -[HMDAccessoryAdvertisement initWithIdentifier:name:category:]


HMDAppleMediaAccessoryInfoSubscriber : NSObject <HMEEventConsumer, HMFLogging>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  <HMDAppleMediaAccessoryInfoSubscriberDataSource> *dataSource
 @property  HMFWiFiNetworkInfo *receivedWifiInfo
 @property  <HMDAppleMediaAccessoryInfoSubscriberDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDAppleMediaAccessoryInfoSubscriber logCategory]

  // instance methods
  -[HMDAppleMediaAccessoryInfoSubscriber didReceiveEvent:topic:]
  -[HMDAppleMediaAccessoryInfoSubscriber dataSource]
  -[HMDAppleMediaAccessoryInfoSubscriber setDelegate:]
  -[HMDAppleMediaAccessoryInfoSubscriber initWithQueue:dataSource:]
  -[HMDAppleMediaAccessoryInfoSubscriber workQueue]
  -[HMDAppleMediaAccessoryInfoSubscriber delegate]
  -[HMDAppleMediaAccessoryInfoSubscriber .cxx_destruct]
  -[HMDAppleMediaAccessoryInfoSubscriber didReceiveCachedEvent:topic:source:]
  -[HMDAppleMediaAccessoryInfoSubscriber subscribeToWiFiInfoUpdate]
  -[HMDAppleMediaAccessoryInfoSubscriber receivedWifiInfo]
  -[HMDAppleMediaAccessoryInfoSubscriber setReceivedWifiInfo:]


AWDHomeKitCameraStreamReconfigure : PBCodable <NSCopying>
 @property  BOOL hasReconfigurationTimestamp
 @property  unsigned int reconfigurationTimestamp
 @property  BOOL hasResolution
 @property  int resolution

  // instance methods
  -[AWDHomeKitCameraStreamReconfigure copyTo:]
  -[AWDHomeKitCameraStreamReconfigure setResolution:]
  -[AWDHomeKitCameraStreamReconfigure resolution]
  -[AWDHomeKitCameraStreamReconfigure mergeFrom:]
  -[AWDHomeKitCameraStreamReconfigure dictionaryRepresentation]
  -[AWDHomeKitCameraStreamReconfigure copyWithZone:]
  -[AWDHomeKitCameraStreamReconfigure readFrom:]
  -[AWDHomeKitCameraStreamReconfigure writeTo:]
  -[AWDHomeKitCameraStreamReconfigure isEqual:]
  -[AWDHomeKitCameraStreamReconfigure hasResolution]
  -[AWDHomeKitCameraStreamReconfigure setHasResolution:]
  -[AWDHomeKitCameraStreamReconfigure resolutionAsString:]
  -[AWDHomeKitCameraStreamReconfigure StringAsResolution:]
  -[AWDHomeKitCameraStreamReconfigure setReconfigurationTimestamp:]
  -[AWDHomeKitCameraStreamReconfigure setHasReconfigurationTimestamp:]
  -[AWDHomeKitCameraStreamReconfigure hasReconfigurationTimestamp]
  -[AWDHomeKitCameraStreamReconfigure reconfigurationTimestamp]


HMDCameraRecordingAudioCodec : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long type

  // class methods
  +[HMDCameraRecordingAudioCodec supportsSecureCoding]
  +[HMDCameraRecordingAudioCodec arrayWithCodecTypes:]

  // instance methods
  -[HMDCameraRecordingAudioCodec encodeWithCoder:]
  -[HMDCameraRecordingAudioCodec type]
  -[HMDCameraRecordingAudioCodec copyWithZone:]
  -[HMDCameraRecordingAudioCodec isEqual:]
  -[HMDCameraRecordingAudioCodec initWithCoder:]
  -[HMDCameraRecordingAudioCodec description:indent:]
  -[HMDCameraRecordingAudioCodec initWithTLVData:]
  -[HMDCameraRecordingAudioCodec initWithCodec:]


HMDCameraRecordingAudioBitRateMode : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long type

  // class methods
  +[HMDCameraRecordingAudioBitRateMode supportsSecureCoding]
  +[HMDCameraRecordingAudioBitRateMode arrayWithBitRateModes:]

  // instance methods
  -[HMDCameraRecordingAudioBitRateMode encodeWithCoder:]
  -[HMDCameraRecordingAudioBitRateMode type]
  -[HMDCameraRecordingAudioBitRateMode copyWithZone:]
  -[HMDCameraRecordingAudioBitRateMode isEqual:]
  -[HMDCameraRecordingAudioBitRateMode initWithCoder:]
  -[HMDCameraRecordingAudioBitRateMode description:indent:]
  -[HMDCameraRecordingAudioBitRateMode initWithTLVData:]
  -[HMDCameraRecordingAudioBitRateMode initWithBitRateMode:]


HMDCameraRecordingAudioSampleRate : HAPNumberParser <NSCopying, NSSecureCoding>
 @property  long long type

  // class methods
  +[HMDCameraRecordingAudioSampleRate supportsSecureCoding]
  +[HMDCameraRecordingAudioSampleRate arrayWithAudioSampleRates:]

  // instance methods
  -[HMDCameraRecordingAudioSampleRate encodeWithCoder:]
  -[HMDCameraRecordingAudioSampleRate type]
  -[HMDCameraRecordingAudioSampleRate copyWithZone:]
  -[HMDCameraRecordingAudioSampleRate isEqual:]
  -[HMDCameraRecordingAudioSampleRate initWithCoder:]
  -[HMDCameraRecordingAudioSampleRate description:indent:]
  -[HMDCameraRecordingAudioSampleRate initWithTLVData:]
  -[HMDCameraRecordingAudioSampleRate initWithSampleRate:]


HMDCameraRecordingAudioCodecParameters : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSNumber *audioChannelCount
 @property  NSArray *bitRateModes
 @property  NSArray *audioSampleRates
 @property  NSNumber *maxAudioBitRate
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingAudioCodecParameters supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingAudioCodecParameters encodeWithCoder:]
  -[HMDCameraRecordingAudioCodecParameters .cxx_destruct]
  -[HMDCameraRecordingAudioCodecParameters initWithCoder:]
  -[HMDCameraRecordingAudioCodecParameters audioChannelCount]
  -[HMDCameraRecordingAudioCodecParameters description:indent:]
  -[HMDCameraRecordingAudioCodecParameters _parseFromTLVData]
  -[HMDCameraRecordingAudioCodecParameters tlvData]
  -[HMDCameraRecordingAudioCodecParameters audioSampleRates]
  -[HMDCameraRecordingAudioCodecParameters initWithChannelCount:bitRateModes:audioSampleRates:maxAudioBitRate:]
  -[HMDCameraRecordingAudioCodecParameters bitRateModes]
  -[HMDCameraRecordingAudioCodecParameters maxAudioBitRate]


HMDCameraRecordingAudioCodecConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  HMDCameraRecordingAudioCodec *codec
 @property  HMDCameraRecordingAudioCodecParameters *parameters
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingAudioCodecConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingAudioCodecConfiguration parameters]
  -[HMDCameraRecordingAudioCodecConfiguration encodeWithCoder:]
  -[HMDCameraRecordingAudioCodecConfiguration .cxx_destruct]
  -[HMDCameraRecordingAudioCodecConfiguration codec]
  -[HMDCameraRecordingAudioCodecConfiguration initWithCoder:]
  -[HMDCameraRecordingAudioCodecConfiguration description:indent:]
  -[HMDCameraRecordingAudioCodecConfiguration _parseFromTLVData]
  -[HMDCameraRecordingAudioCodecConfiguration tlvData]
  -[HMDCameraRecordingAudioCodecConfiguration initWithAudioCodec:codecParameters:]


HMDCameraRecordingSupportedAudioConfiguration : HAPTLVBase <HAPTLVCreateParse, NSSecureCoding>
 @property  NSArray *codecConfigurations
 @property  NSData *tlvData

  // class methods
  +[HMDCameraRecordingSupportedAudioConfiguration supportsSecureCoding]

  // instance methods
  -[HMDCameraRecordingSupportedAudioConfiguration encodeWithCoder:]
  -[HMDCameraRecordingSupportedAudioConfiguration .cxx_destruct]
  -[HMDCameraRecordingSupportedAudioConfiguration initWithCoder:]
  -[HMDCameraRecordingSupportedAudioConfiguration description:indent:]
  -[HMDCameraRecordingSupportedAudioConfiguration _parseFromTLVData]
  -[HMDCameraRecordingSupportedAudioConfiguration tlvData]
  -[HMDCameraRecordingSupportedAudioConfiguration initWithCodecConfigurations:]
  -[HMDCameraRecordingSupportedAudioConfiguration codecConfigurations]


HMDMicroLocationManager : HMFObject <HMFLogging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMicroLocationManager logCategory]

  // instance methods
  -[HMDMicroLocationManager .cxx_destruct]
  -[HMDMicroLocationManager initWithLocationManager:]
  -[HMDMicroLocationManager initWithLocationManager:dateFactory:]
  -[HMDMicroLocationManager triggerThrottledMicroLocationRecordingScanWithMetadata:triggerType:]
  -[HMDMicroLocationManager triggerThrottledMicroLocationLocalizationScanWithMetadata:triggerType:]


HMDDataStreamTargetControlProtocol : NSObject
  // class methods
  +[HMDDataStreamTargetControlProtocol sendTargetControlWhoAmIWithIdentifier:dataStreamProtocolDelegate:]


HMDUserListeningHistoryUpdateControlModel : HMBModel
 @property  NSArray *accessories

  // class methods
  +[HMDUserListeningHistoryUpdateControlModel hmbProperties]


HMDMediaStreamConfig : AVCMediaStreamConfig
 @property  unsigned int deviceLocalSSRC

  // instance methods
  -[HMDMediaStreamConfig addToDescription:]
  -[HMDMediaStreamConfig deviceLocalSSRC]
  -[HMDMediaStreamConfig setDeviceLocalSSRC:]


HMDVideoStreamConfig : HMDMediaStreamConfig
  // instance methods


HMDAudioStreamConfig : HMDMediaStreamConfig
  // instance methods


HMDHAPAccessoryTaskContext : NSObject
 @property  NSNumber *identifier
 @property  long long operationType
 @property  HMDHome *home
 @property  HMFMessage *requestMessage
 @property  unsigned long sourceType
 @property  HMFActivity *activity
 @property  HMDUser *user
 @property  BOOL supportsMultiPartResponse

  // instance methods
  -[HMDHAPAccessoryTaskContext operationType]
  -[HMDHAPAccessoryTaskContext sourceType]
  -[HMDHAPAccessoryTaskContext home]
  -[HMDHAPAccessoryTaskContext identifier]
  -[HMDHAPAccessoryTaskContext isComplete]
  -[HMDHAPAccessoryTaskContext clientBundleIdentifier]
  -[HMDHAPAccessoryTaskContext workQueue]
  -[HMDHAPAccessoryTaskContext qualityOfService]
  -[HMDHAPAccessoryTaskContext user]
  -[HMDHAPAccessoryTaskContext .cxx_destruct]
  -[HMDHAPAccessoryTaskContext activity]
  -[HMDHAPAccessoryTaskContext setActivity:]
  -[HMDHAPAccessoryTaskContext operationName]
  -[HMDHAPAccessoryTaskContext homeUniqueIdentifier]
  -[HMDHAPAccessoryTaskContext requestMessage]
  -[HMDHAPAccessoryTaskContext isRemoteAccessDeviceReachable]
  -[HMDHAPAccessoryTaskContext requestMessageName]
  -[HMDHAPAccessoryTaskContext initWithIdentifier:operationType:home:sourceType:requestMessage:name:]
  -[HMDHAPAccessoryTaskContext homeMessageDestination]
  -[HMDHAPAccessoryTaskContext requestMessageIdentifier]
  -[HMDHAPAccessoryTaskContext isShortActionOperation]
  -[HMDHAPAccessoryTaskContext supportsMultiPartResponse]
  -[HMDHAPAccessoryTaskContext dispatchMessage:delegateDevice:]
  -[HMDHAPAccessoryTaskContext residentMapForAccessories:]


HMDHAPAccessoryTask : NSObject <HMDHAPAccessoryTask>
 @property  HMDHAPAccessoryTaskContext *context
 @property  NSArray *requests
 @property  NSArray *characteristicResponses
 @property  NSMapTable *requestToResponseMap
 @property  @? completion
 @property  unsigned long completedRequestsCount
 @property  NSDate *executionTime
 @property  NSNumber *identifier
 @property  double executionTimeInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHAPAccessoryTask sourceType]
  -[HMDHAPAccessoryTask requests]
  -[HMDHAPAccessoryTask completion]
  -[HMDHAPAccessoryTask identifier]
  -[HMDHAPAccessoryTask requestIdentifier]
  -[HMDHAPAccessoryTask workQueue]
  -[HMDHAPAccessoryTask execute]
  -[HMDHAPAccessoryTask .cxx_destruct]
  -[HMDHAPAccessoryTask activity]
  -[HMDHAPAccessoryTask context]
  -[HMDHAPAccessoryTask operationName]
  -[HMDHAPAccessoryTask executionTime]
  -[HMDHAPAccessoryTask supportsMultiPartResponse]
  -[HMDHAPAccessoryTask executionTimeInterval]
  -[HMDHAPAccessoryTask initWithContext:requests:completion:]
  -[HMDHAPAccessoryTask characteristicResponses]
  -[HMDHAPAccessoryTask allResponsesReceived]
  -[HMDHAPAccessoryTask completedRequestsCount]
  -[HMDHAPAccessoryTask logEventsFromAccessoryRequestMap:accessoryList:]
  -[HMDHAPAccessoryTask sendCharacteristicNotificationsForTaskInProgress:completion:]
  -[HMDHAPAccessoryTask sendCharacteristicNotificationsForCompletedTask:completion:]
  -[HMDHAPAccessoryTask finishTaskWithCharacteristicResponses:completion:]
  -[HMDHAPAccessoryTask addCharacteristicResponses:]
  -[HMDHAPAccessoryTask _updatedCompletion:]
  -[HMDHAPAccessoryTask requestToResponseMap]
  -[HMDHAPAccessoryTask setExecutionTime:]


HMDHAPAccessoryLocalOperationTask : HMDHAPAccessoryTask
 @property  NSString *activityRequestEventName
 @property  NSString *activityResponseEventName
 @property  NSDictionary *logEvents

  // instance methods
  -[HMDHAPAccessoryLocalOperationTask execute]
  -[HMDHAPAccessoryLocalOperationTask .cxx_destruct]
  -[HMDHAPAccessoryLocalOperationTask _completionHandlerForAccessory:accessoryRequests:responseWaitGroup:]
  -[HMDHAPAccessoryLocalOperationTask activityRequestEventName]
  -[HMDHAPAccessoryLocalOperationTask activityResponseEventName]
  -[HMDHAPAccessoryLocalOperationTask _dispatchToAccessory:requests:logEvent:completion:]
  -[HMDHAPAccessoryLocalOperationTask logEvents]
  -[HMDHAPAccessoryLocalOperationTask setLogEvents:]


HMDHAPAccessoryLocalWriteTask : HMDHAPAccessoryLocalOperationTask
  // instance methods
  -[HMDHAPAccessoryLocalWriteTask _dispatchToAccessory:requests:logEvent:completion:]


HMDHAPAccessoryLocalReadTask : HMDHAPAccessoryLocalOperationTask
  // instance methods
  -[HMDHAPAccessoryLocalReadTask _dispatchToAccessory:requests:logEvent:completion:]


HMDHAPAccessoryRemoteOperationTask : HMDHAPAccessoryTask
 @property  NSString *remoteMessageName
 @property  HMDDevice *delegateDevice
 @property  NSDictionary *logEvents
 @property  BOOL finished
 @property  double remoteMessageTimeout

  // instance methods
  -[HMDHAPAccessoryRemoteOperationTask isFinished]
  -[HMDHAPAccessoryRemoteOperationTask setFinished:]
  -[HMDHAPAccessoryRemoteOperationTask execute]
  -[HMDHAPAccessoryRemoteOperationTask .cxx_destruct]
  -[HMDHAPAccessoryRemoteOperationTask activityRequestEventName]
  -[HMDHAPAccessoryRemoteOperationTask logEvents]
  -[HMDHAPAccessoryRemoteOperationTask initWithContext:remoteMessageName:requests:delegateDevice:timeout:completion:]
  -[HMDHAPAccessoryRemoteOperationTask _receivedRemotelyChangedCharacteristicResponses:message:]
  -[HMDHAPAccessoryRemoteOperationTask _remoteMessageFromAccessoryRequestMap:]
  -[HMDHAPAccessoryRemoteOperationTask _buildMessageAccessoryListFromAccessoryRequestMap:accessoryList:]
  -[HMDHAPAccessoryRemoteOperationTask _buildMessageAccessoryListFromRequests:accessoryList:]
  -[HMDHAPAccessoryRemoteOperationTask _appendServiceListWithRequest:serviceList:]
  -[HMDHAPAccessoryRemoteOperationTask remoteMessageName]
  -[HMDHAPAccessoryRemoteOperationTask delegateDevice]
  -[HMDHAPAccessoryRemoteOperationTask remoteMessageTimeout]


HMDHAPAccessoryRemoteReadTask : HMDHAPAccessoryRemoteOperationTask
  // instance methods
  -[HMDHAPAccessoryRemoteReadTask initWithContext:requests:completion:]
  -[HMDHAPAccessoryRemoteReadTask _appendServiceListWithRequest:serviceList:]
  -[HMDHAPAccessoryRemoteReadTask initWithContext:requests:delegateDevice:completion:]


HMDHAPAccessoryRemoteWriteTask : HMDHAPAccessoryRemoteOperationTask
  // instance methods
  -[HMDHAPAccessoryRemoteWriteTask initWithContext:requests:completion:]
  -[HMDHAPAccessoryRemoteWriteTask _appendServiceListWithRequest:serviceList:]
  -[HMDHAPAccessoryRemoteWriteTask initWithContext:requests:timeout:completion:]
  -[HMDHAPAccessoryRemoteWriteTask initWithContext:requests:delegateDevice:timeout:completion:]


HMDHAPAccessoryRemoteOperationWithLocalFallbackTask : HMDHAPAccessoryTask
 @property  HMDDevice *remoteTaskDelegateDevice
 @property  <HMDHAPAccessoryTask> *remoteTask
 @property  <HMDHAPAccessoryTask> *localTask
 @property  <HMDHAPAccessoryTask> *fallbackLocalTask

  // instance methods
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask completion]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask execute]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask .cxx_destruct]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask initWithContext:requests:delegateDevice:completion:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask _startScanningForSuspendedAccessoriesWithRequests:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask _shouldFallbackLocallyWithError:accessory:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask _remoteTaskCompletionHandler]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask _makeRemoteTaskWithRequests:delegateDevice:completion:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask _makeLocalTaskWithRequests:completion:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask remoteTaskDelegateDevice]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask remoteTask]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask setRemoteTask:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask localTask]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask setLocalTask:]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask fallbackLocalTask]
  -[HMDHAPAccessoryRemoteOperationWithLocalFallbackTask setFallbackLocalTask:]


HMDHAPAccessoryRemoteWriteWithLocalFallbackTask : HMDHAPAccessoryRemoteOperationWithLocalFallbackTask
  // instance methods
  -[HMDHAPAccessoryRemoteWriteWithLocalFallbackTask _makeRemoteTaskWithRequests:delegateDevice:completion:]
  -[HMDHAPAccessoryRemoteWriteWithLocalFallbackTask _makeLocalTaskWithRequests:completion:]


HMDHAPAccessoryRemoteReadWithLocalFallbackTask : HMDHAPAccessoryRemoteOperationWithLocalFallbackTask
  // instance methods
  -[HMDHAPAccessoryRemoteReadWithLocalFallbackTask _makeRemoteTaskWithRequests:delegateDevice:completion:]
  -[HMDHAPAccessoryRemoteReadWithLocalFallbackTask _makeLocalTaskWithRequests:completion:]


HMDHAPAccessoryPrimaryResidentOperationTask : HMDHAPAccessoryTask
 @property  NSMutableArray *remoteFallbackTasks
 @property  <HMDHAPAccessoryTask> *localTask

  // class methods
  +[HMDHAPAccessoryPrimaryResidentOperationTask filterAccessoriesByDevicesFromMap:currentDeviceAccessories:otherDeviceAccessories:]

  // instance methods
  -[HMDHAPAccessoryPrimaryResidentOperationTask execute]
  -[HMDHAPAccessoryPrimaryResidentOperationTask .cxx_destruct]
  -[HMDHAPAccessoryPrimaryResidentOperationTask initWithContext:requests:completion:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask _makeLocalTaskWithRequests:completion:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask localTask]
  -[HMDHAPAccessoryPrimaryResidentOperationTask setLocalTask:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask _fanOutRemoteRequests:residentToAccessoriesMap:responseWaitGroup:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask _processLocalRequests:responseWaitGroup:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask _fallbackTaskForDevice:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask _makeRemoteWithFallbackTaskWithRequests:delegateDevice:completion:]
  -[HMDHAPAccessoryPrimaryResidentOperationTask remoteFallbackTasks]
  -[HMDHAPAccessoryPrimaryResidentOperationTask setRemoteFallbackTasks:]


HMDHAPAccessoryPrimaryResidentReadTask : HMDHAPAccessoryPrimaryResidentOperationTask
  // instance methods
  -[HMDHAPAccessoryPrimaryResidentReadTask _makeLocalTaskWithRequests:completion:]
  -[HMDHAPAccessoryPrimaryResidentReadTask _makeRemoteWithFallbackTaskWithRequests:delegateDevice:completion:]


HMDHAPAccessoryPrimaryResidentWriteTask : HMDHAPAccessoryPrimaryResidentOperationTask
  // instance methods
  -[HMDHAPAccessoryPrimaryResidentWriteTask _makeLocalTaskWithRequests:completion:]
  -[HMDHAPAccessoryPrimaryResidentWriteTask _makeRemoteWithFallbackTaskWithRequests:delegateDevice:completion:]


HMDHAPAccessoryTaskTracker : NSObject
 @property  NSMutableDictionary *pendingTasks
 @property  unsigned long nextTaskIdentifier

  // instance methods
  -[HMDHAPAccessoryTaskTracker .cxx_destruct]
  -[HMDHAPAccessoryTaskTracker init]
  -[HMDHAPAccessoryTaskTracker executeTask:]
  -[HMDHAPAccessoryTaskTracker removePendingTaskWithIdentifier:]
  -[HMDHAPAccessoryTaskTracker nextTaskIdentifier]
  -[HMDHAPAccessoryTaskTracker pendingRemoteTasks]
  -[HMDHAPAccessoryTaskTracker pendingTasks]


HMDHAPAccessoryReaderWriterDataSource : HMFObject <HMDHAPAccessoryReaderWriterDataSource>
 @property  BOOL wholeHomeBluetoothSupported
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDHAPAccessoryReaderWriterDataSource isWholeHomeBluetoothSupported]


HMDHAPAccessoryReaderWriter : NSObject <HMFLogging, HMDHAPAccessoryReader, HMDHAPAccessoryWriter>
 @property  HMDHAPAccessoryTaskTracker *tracker
 @property  HMDHome *home
 @property  <HMDHAPAccessoryReaderWriterDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHAPAccessoryReaderWriter logCategory]

  // instance methods
  -[HMDHAPAccessoryReaderWriter home]
  -[HMDHAPAccessoryReaderWriter logIdentifier]
  -[HMDHAPAccessoryReaderWriter dataSource]
  -[HMDHAPAccessoryReaderWriter tracker]
  -[HMDHAPAccessoryReaderWriter .cxx_destruct]
  -[HMDHAPAccessoryReaderWriter initWithHome:]
  -[HMDHAPAccessoryReaderWriter initWithHome:dataSource:]
  -[HMDHAPAccessoryReaderWriter submitReadRequests:sourceType:requestMessage:]
  -[HMDHAPAccessoryReaderWriter submitWriteRequests:sourceType:requestMessage:]
  -[HMDHAPAccessoryReaderWriter handleRemotelyUpdatedCharacteristicsMessage:]
  -[HMDHAPAccessoryReaderWriter _defaultTaskForCurrentDeviceWithContext:requests:]
  -[HMDHAPAccessoryReaderWriter _cannotForwardMessage:]
  -[HMDHAPAccessoryReaderWriter _isNotResidentDevice]
  -[HMDHAPAccessoryReaderWriter _isSecondaryResidentDevice]
  -[HMDHAPAccessoryReaderWriter _isPrimaryResidentDevice]
  -[HMDHAPAccessoryReaderWriter _completionHandlerWithContext:]


HMDHTTPClientMessageTransport : HMFObject <HMFHTTPClientDelegate, HMFLogging, HMFNetServiceDelegate, HMFDumpState>
 @property  HMFHTTPClient *client
 @property  BOOL running
 @property  <HMDHTTPClientMessageTransportDelegate> *delegate
 @property  NSUUID *identifier
 @property  HMFNetService *netService
 @property  HMDHTTPDevice *remoteDevice
 @property  NSUUID *sessionIdentifier
 @property  BOOL reachable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDHTTPClientMessageTransport shortDescription]
  +[HMDHTTPClientMessageTransport logCategory]

  // instance methods
  -[HMDHTTPClientMessageTransport dumpState]
  -[HMDHTTPClientMessageTransport sessionIdentifier]
  -[HMDHTTPClientMessageTransport setRunning:]
  -[HMDHTTPClientMessageTransport remoteDevice]
  -[HMDHTTPClientMessageTransport identifier]
  -[HMDHTTPClientMessageTransport logIdentifier]
  -[HMDHTTPClientMessageTransport setDelegate:]
  -[HMDHTTPClientMessageTransport isReachable]
  -[HMDHTTPClientMessageTransport delegate]
  -[HMDHTTPClientMessageTransport dealloc]
  -[HMDHTTPClientMessageTransport isRunning]
  -[HMDHTTPClientMessageTransport .cxx_destruct]
  -[HMDHTTPClientMessageTransport stop]
  -[HMDHTTPClientMessageTransport client]
  -[HMDHTTPClientMessageTransport observeValueForKeyPath:ofObject:change:context:]
  -[HMDHTTPClientMessageTransport shortDescription]
  -[HMDHTTPClientMessageTransport startWithCompletionHandler:]
  -[HMDHTTPClientMessageTransport init]
  -[HMDHTTPClientMessageTransport netService]
  -[HMDHTTPClientMessageTransport descriptionWithPointer:]
  -[HMDHTTPClientMessageTransport client:didRequestPingWithCompletionHandler:]
  -[HMDHTTPClientMessageTransport clientDidBecomeUnreachable:]
  -[HMDHTTPClientMessageTransport _stopWithError:]
  -[HMDHTTPClientMessageTransport netService:didUpdateTXTRecord:]
  -[HMDHTTPClientMessageTransport sendMessage:timeout:completionHandler:]
  -[HMDHTTPClientMessageTransport initWithIdentifier:netService:]
  -[HMDHTTPClientMessageTransport _receiveMessage]
  -[HMDHTTPClientMessageTransport _sendResponseMessage:forTransactionIdentifier:]
  -[HMDHTTPClientMessageTransport sendPingWithCompletionHandler:]


HMDAccessorySettingMessageMapper : HMDSettingMessageMapper
 @property  BOOL shouldAllowSharedAdminToEditConstraints

  // instance methods
  -[HMDAccessorySettingMessageMapper initWithIdentifier:queue:allowSharedAdminEditConstraints:]
  -[HMDAccessorySettingMessageMapper shouldAllowSharedAdminToEditConstraints]
  -[HMDAccessorySettingMessageMapper setShouldAllowSharedAdminToEditConstraints:]


HMDAccessorySettingsMessageHandler : HMFObject <HMFLogging, HMFMessageReceiver, HMDAccessorySettingsMessageHandler>
 @property  <HMDAccessorySettingsMessageController> *messageController
 @property  NSMapTable *settingMessageMap
 @property  HMDUserMessagePolicy *onlyOwnerAllowedUserPolicy
 @property  HMDUserMessagePolicy *sharedAdminAllowedUserPolicy
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *messageDispatcher
 @property  NSUUID *messageTargetUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue

  // class methods
  +[HMDAccessorySettingsMessageHandler logCategory]

  // instance methods
  -[HMDAccessorySettingsMessageHandler workQueue]
  -[HMDAccessorySettingsMessageHandler .cxx_destruct]
  -[HMDAccessorySettingsMessageHandler messageTargetUUID]
  -[HMDAccessorySettingsMessageHandler initWithQueue:delegate:]
  -[HMDAccessorySettingsMessageHandler messageReceiveQueue]
  -[HMDAccessorySettingsMessageHandler messageDispatcher]
  -[HMDAccessorySettingsMessageHandler registerForMessages]
  -[HMDAccessorySettingsMessageHandler setMessageDispatcher:]
  -[HMDAccessorySettingsMessageHandler configureWithMessageDispatcher:home:]
  -[HMDAccessorySettingsMessageHandler _handleSettingUpdateValueByKeyPath:]
  -[HMDAccessorySettingsMessageHandler _handleReplaceConstraintsForKeyPath:]
  -[HMDAccessorySettingsMessageHandler _handleAddConstraint:]
  -[HMDAccessorySettingsMessageHandler _handleRemoveConstraint:]
  -[HMDAccessorySettingsMessageHandler _handleUpdatedConstraints:]
  -[HMDAccessorySettingsMessageHandler configureForSetting:allowSharedAdminEditConstraints:]
  -[HMDAccessorySettingsMessageHandler unconfigureFromSetting:]
  -[HMDAccessorySettingsMessageHandler relayUpdateValue:keyPath:destination:completion:]
  -[HMDAccessorySettingsMessageHandler relayReplaceConstraints:constraintIdsToRemove:keyPath:destination:completion:]
  -[HMDAccessorySettingsMessageHandler notifyOfUpdatedValue:settingKeyPath:]
  -[HMDAccessorySettingsMessageHandler registerForSettingMessages:]
  -[HMDAccessorySettingsMessageHandler messageMapperForSetting:]
  -[HMDAccessorySettingsMessageHandler _decodeUpdateValueMessagePayload:outValue:]
  -[HMDAccessorySettingsMessageHandler _handleSettingUpdateValue:]
  -[HMDAccessorySettingsMessageHandler processReplaceConstraintMessage:outConstraintsToAdd:outConstraintIdsToRemove:]
  -[HMDAccessorySettingsMessageHandler _handleReplaceConstraints:]
  -[HMDAccessorySettingsMessageHandler messageController]
  -[HMDAccessorySettingsMessageHandler settingMessageMap]
  -[HMDAccessorySettingsMessageHandler onlyOwnerAllowedUserPolicy]
  -[HMDAccessorySettingsMessageHandler setOnlyOwnerAllowedUserPolicy:]
  -[HMDAccessorySettingsMessageHandler sharedAdminAllowedUserPolicy]
  -[HMDAccessorySettingsMessageHandler setSharedAdminAllowedUserPolicy:]


HMDHouseholdMetricsRequestContributor : HMDHouseholdActivityLogEventContributor <HMDHouseholdMetricsRequestCountProvider>
  // instance methods
  -[HMDHouseholdMetricsRequestContributor populateLogEvent:forHomeWithUUID:associatedToDate:]
  -[HMDHouseholdMetricsRequestContributor contributeLogEvent:toSerializedMetric:]
  -[HMDHouseholdMetricsRequestContributor deserializeLogEvent:fromSerializedMetric:]
  -[HMDHouseholdMetricsRequestContributor contributeLogEvent:toCoreAnalyticsEvent:]
  -[HMDHouseholdMetricsRequestContributor coalesceLogEvent:fromSourceEvent:]
  -[HMDHouseholdMetricsRequestContributor incrementRequestCountForHomeUUID:date:]
  -[HMDHouseholdMetricsRequestContributor initWithCountersManager:dateProvider:]


HMDRemoteMessageSerialization : HMFObject
  // class methods
  +[HMDRemoteMessageSerialization legacyNotificationMessage:]
  +[HMDRemoteMessageSerialization remoteMessageWithDictionary:error:]
  +[HMDRemoteMessageSerialization logSessionContextFromData:]
  +[HMDRemoteMessageSerialization dictionaryForMessage:error:]


HMDRemoteMessage : HMFMessage
 @property  HMDHomeKitVersion *sourceVersion
 @property  long long type
 @property  NSUUID *transactionIdentifier
 @property  BOOL secure
 @property  unsigned long restriction
 @property  unsigned long responseRestriction
 @property  NSString *attributedMessageName
 @property  HMDRemoteMessageSenderContext *senderContext
 @property  NSString *toID
 @property  NSData *logEventSessionData
 @property  unsigned long sendOptions
 @property  NSString *collapseID

  // class methods
  +[HMDRemoteMessage secureMessageWithName:destination:messagePayload:]
  +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:]
  +[HMDRemoteMessage secureMessageWithName:qualityOfService:destination:messagePayload:restriction:]
  +[HMDRemoteMessage messageWithName:qualityOfService:destination:messagePayload:restriction:]

  // instance methods
  -[HMDRemoteMessage isRemote]
  -[HMDRemoteMessage setRestriction:]
  -[HMDRemoteMessage type]
  -[HMDRemoteMessage privateDescription]
  -[HMDRemoteMessage .cxx_destruct]
  -[HMDRemoteMessage sourceVersion]
  -[HMDRemoteMessage setType:]
  -[HMDRemoteMessage setSecure:]
  -[HMDRemoteMessage setResponseHandler:]
  -[HMDRemoteMessage isSecure]
  -[HMDRemoteMessage restriction]
  -[HMDRemoteMessage setSourceVersion:]
  -[HMDRemoteMessage transactionIdentifier]
  -[HMDRemoteMessage setTransactionIdentifier:]
  -[HMDRemoteMessage toID]
  -[HMDRemoteMessage sendOptions]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:]
  -[HMDRemoteMessage initWithName:destination:payload:]
  -[HMDRemoteMessage descriptionWithPointer:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:userInfo:headers:payload:]
  -[HMDRemoteMessage setToID:]
  -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:]
  -[HMDRemoteMessage initWithName:destination:payload:headers:type:timeout:secure:]
  -[HMDRemoteMessage initWithName:destination:payload:type:timeout:secure:restriction:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:headers:type:timeout:secure:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:restriction:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:restriction:sendOptions:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:headers:type:timeout:secure:restriction:sendOptions:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:type:timeout:secure:restriction:sendOptions:collapseID:]
  -[HMDRemoteMessage initWithName:qualityOfService:destination:payload:headers:type:timeout:secure:restriction:sendOptions:collapseID:]
  -[HMDRemoteMessage setInternalResponseHandler:]
  -[HMDRemoteMessage responseRestriction]
  -[HMDRemoteMessage setResponseRestriction:]
  -[HMDRemoteMessage attributedMessageName]
  -[HMDRemoteMessage setAttributedMessageName:]
  -[HMDRemoteMessage senderContext]
  -[HMDRemoteMessage setSenderContext:]
  -[HMDRemoteMessage collapseID]
  -[HMDRemoteMessage createActivityForLogSession]
  -[HMDRemoteMessage logEventSessionData]
  -[HMDRemoteMessage setLogEventSessionData:]


HMDRemoteMessageTransport : HMFMessageTransport <HMFLogging, HMFDumpState>
 @property  HMFFuture *startFuture
 @property  HMFPromise *startPromise
 @property  int transportType
 @property  HMDAccountRegistry *accountRegistry
 @property  BOOL secure
 @property  long long qualityOfService
 @property  <HMDRemoteMessageTransportReachabilityDelegate> *reachabilityDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteMessageTransport logCategory]
  +[HMDRemoteMessageTransport restriction]
  +[HMDRemoteMessageTransport remoteMessageTransportsForProductInfo:]
  +[HMDRemoteMessageTransport _createModernTransportForProductInfo:preferences:]
  +[HMDRemoteMessageTransport remoteMessageFromMessage:secure:accountRegistry:]

  // instance methods
  -[HMDRemoteMessageTransport dumpState]
  -[HMDRemoteMessageTransport qualityOfService]
  -[HMDRemoteMessageTransport .cxx_destruct]
  -[HMDRemoteMessageTransport transportType]
  -[HMDRemoteMessageTransport start]
  -[HMDRemoteMessageTransport isSecure]
  -[HMDRemoteMessageTransport init]
  -[HMDRemoteMessageTransport canSendMessage:]
  -[HMDRemoteMessageTransport initWithAccountRegistry:]
  -[HMDRemoteMessageTransport isValidMessage:]
  -[HMDRemoteMessageTransport accountRegistry]
  -[HMDRemoteMessageTransport startFuture]
  -[HMDRemoteMessageTransport startPromise]
  -[HMDRemoteMessageTransport reachabilityDelegate]
  -[HMDRemoteMessageTransport setReachabilityDelegate:]
  -[HMDRemoteMessageTransport remoteMessageFromMessage:]
  -[HMDRemoteMessageTransport postDidReceiveRemoteMessageWithNoListenerFromDevice:]
  -[HMDRemoteMessageTransport matchResponse:requestedCapabilities:]
  -[HMDRemoteMessageTransport doesResponse:matchAllCapabilities:]
  -[HMDRemoteMessageTransport compareCapability:key:withCapability:]


HMDDataStreamControlProtocol : NSObject <HMFLogging, HMDDataStreamProtocol>
 @property  NSString *logIdentifier
 @property  NSNumber *pendingHelloMessageIdentifier
 @property  BOOL helloMessageResponseReceived
 @property  BOOL controlHandshakeComplete
 @property  NSNumber *peerDataStreamProtocolVersion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL active

  // class methods
  +[HMDDataStreamControlProtocol logCategory]

  // instance methods
  -[HMDDataStreamControlProtocol logIdentifier]
  -[HMDDataStreamControlProtocol isActive]
  -[HMDDataStreamControlProtocol .cxx_destruct]
  -[HMDDataStreamControlProtocol initWithLogIdentifier:]
  -[HMDDataStreamControlProtocol dataStreamDidOpen:]
  -[HMDDataStreamControlProtocol dataStreamDidClose:]
  -[HMDDataStreamControlProtocol dataStream:didFailWithError:]
  -[HMDDataStreamControlProtocol dataStreamInitiatedClose:]
  -[HMDDataStreamControlProtocol dataStream:didReceiveEvent:header:payload:]
  -[HMDDataStreamControlProtocol dataStream:didReceiveRequest:header:payload:]
  -[HMDDataStreamControlProtocol dataStream:didReceiveResponse:header:payload:]
  -[HMDDataStreamControlProtocol isExpectedHelloControlMessage:header:]
  -[HMDDataStreamControlProtocol _sendHelloMessageOnDataStream:]
  -[HMDDataStreamControlProtocol _sendVersionRequestOnDataStream:]
  -[HMDDataStreamControlProtocol helloMessageResponseReceived]
  -[HMDDataStreamControlProtocol setHelloMessageResponseReceived:]
  -[HMDDataStreamControlProtocol peerDataStreamProtocolVersion]
  -[HMDDataStreamControlProtocol setPeerDataStreamProtocolVersion:]
  -[HMDDataStreamControlProtocol pendingHelloMessageIdentifier]
  -[HMDDataStreamControlProtocol setPendingHelloMessageIdentifier:]
  -[HMDDataStreamControlProtocol controlHandshakeComplete]
  -[HMDDataStreamControlProtocol setControlHandshakeComplete:]


HMDMediaDestinationManagerMetricsDispatcher : HMFObject <HMFLogging>
 @property  NSUUID *identifier
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationManagerMetricsDispatcher logCategory]

  // instance methods
  -[HMDMediaDestinationManagerMetricsDispatcher identifier]
  -[HMDMediaDestinationManagerMetricsDispatcher logIdentifier]
  -[HMDMediaDestinationManagerMetricsDispatcher .cxx_destruct]
  -[HMDMediaDestinationManagerMetricsDispatcher logEventSubmitter]
  -[HMDMediaDestinationManagerMetricsDispatcher initWithIdentifier:logEventSubmitter:]
  -[HMDMediaDestinationManagerMetricsDispatcher submitFailureEventWithFailureCode:error:]


HMDNaturalLightingCurveWriter : HMFObject <HMFMessageReceiver, HMFLogging, HMDDevicePreferenceDataSource, HMFTimerDelegate>
 @property  NSUUID *UUID
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSString *logIdentifier
 @property  @? timerFactory
 @property  HMDLightProfile *lightProfile
 @property  HMFTimer *periodicCharacteristicWriteTimer
 @property  double naturalLightingCurveUpdateInterval
 @property  double naturalLightingCurveUpdateAccessoryTimeDifferenceThreshold
 @property  <HMDLightProfileDataSource> *dataSource
 @property  NSNotificationCenter *notificationCenter
 @property  BOOL currentDevicePrimaryResident
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDNaturalLightingCurveWriter logCategory]

  // instance methods
  -[HMDNaturalLightingCurveWriter notificationCenter]
  -[HMDNaturalLightingCurveWriter timerDidFire:]
  -[HMDNaturalLightingCurveWriter logIdentifier]
  -[HMDNaturalLightingCurveWriter dataSource]
  -[HMDNaturalLightingCurveWriter workQueue]
  -[HMDNaturalLightingCurveWriter .cxx_destruct]
  -[HMDNaturalLightingCurveWriter messageTargetUUID]
  -[HMDNaturalLightingCurveWriter UUID]
  -[HMDNaturalLightingCurveWriter messageReceiveQueue]
  -[HMDNaturalLightingCurveWriter lightProfile]
  -[HMDNaturalLightingCurveWriter setLightProfile:]
  -[HMDNaturalLightingCurveWriter timerFactory]
  -[HMDNaturalLightingCurveWriter supportsDeviceWithCapabilities:]
  -[HMDNaturalLightingCurveWriter isCurrentDevicePrimaryResident]
  -[HMDNaturalLightingCurveWriter handlePrimaryResidentUpdateNotification:]
  -[HMDNaturalLightingCurveWriter setCurrentDevicePrimaryResident:]
  -[HMDNaturalLightingCurveWriter naturalLightingCurveUpdateInterval]
  -[HMDNaturalLightingCurveWriter naturalLightingCurveUpdateAccessoryTimeDifferenceThreshold]
  -[HMDNaturalLightingCurveWriter handleCurrentDevicePrimaryResidentChangedWithReason:]
  -[HMDNaturalLightingCurveWriter initWithUUID:workQueue:logIdentifier:]
  -[HMDNaturalLightingCurveWriter initWithUUID:workQueue:logIdentifier:dataSource:notificationCenter:timerFactory:]
  -[HMDNaturalLightingCurveWriter configureWithLightProfile:]
  -[HMDNaturalLightingCurveWriter handleActiveTransitionContextUpdated:]
  -[HMDNaturalLightingCurveWriter writeWithNaturalLightingEnabled:reason:completion:]
  -[HMDNaturalLightingCurveWriter synchronizeCurveWithActiveTransitionContext:]
  -[HMDNaturalLightingCurveWriter writeForNaturalLightingEnabledWithReason:]
  -[HMDNaturalLightingCurveWriter periodicCharacteristicWriteTimer]
  -[HMDNaturalLightingCurveWriter setPeriodicCharacteristicWriteTimer:]


HMDEventRouterTimer : NSObject <HMETimer, HMFTimerDelegate>
 @property  @? timerFireHandler
 @property  HMFTimer *timer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[HMDEventRouterTimer timerDidFire:]
  -[HMDEventRouterTimer suspend]
  -[HMDEventRouterTimer .cxx_destruct]
  -[HMDEventRouterTimer resume]
  -[HMDEventRouterTimer timer]
  -[HMDEventRouterTimer initWithQueue:interval:timerFireHandler:]
  -[HMDEventRouterTimer timerFireHandler]


HMDEventRouterTimerProvider : NSObject <HMETimerProvider>
  // instance methods
  -[HMDEventRouterTimerProvider currentDate]
  -[HMDEventRouterTimerProvider dateWithTimeIntervalSinceNow:]
  -[HMDEventRouterTimerProvider timerWithQueue:interval:timerFireHandler:]


AWDHomeKitDataModelMigration : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned long duration

  // instance methods
  -[AWDHomeKitDataModelMigration setDuration:]
  -[AWDHomeKitDataModelMigration setTimestamp:]
  -[AWDHomeKitDataModelMigration hasDuration]
  -[AWDHomeKitDataModelMigration copyTo:]
  -[AWDHomeKitDataModelMigration duration]
  -[AWDHomeKitDataModelMigration mergeFrom:]
  -[AWDHomeKitDataModelMigration setHasTimestamp:]
  -[AWDHomeKitDataModelMigration dictionaryRepresentation]
  -[AWDHomeKitDataModelMigration hasTimestamp]
  -[AWDHomeKitDataModelMigration copyWithZone:]
  -[AWDHomeKitDataModelMigration timestamp]
  -[AWDHomeKitDataModelMigration readFrom:]
  -[AWDHomeKitDataModelMigration setHasDuration:]
  -[AWDHomeKitDataModelMigration writeTo:]
  -[AWDHomeKitDataModelMigration isEqual:]


HMDCameraClipModel : HMBModel
 @property  NSNumber *feedbackStatusField
 @property  NSNumber *qualityField
 @property  NSDate *startDate
 @property  NSNumber *isComplete
 @property  unsigned long feedbackStatus
 @property  NSNumber *duration
 @property  NSNumber *targetFragmentDuration
 @property  NSNumber *maximumClipDuration
 @property  NSNumber *recordedLocally
 @property  NSString *streamingAssetVersion
 @property  NSData *encryptionKey
 @property  NSNumber *encryptionScheme
 @property  HMBStreamingAsset *videoStreamingAsset
 @property  NSArray *videoMetadata
 @property  NSArray *videoMetadataArray
 @property  long long quality

  // class methods
  +[HMDCameraClipModel hmbProperties]
  +[HMDCameraClipModel hmbExternalRecordType]
  +[HMDCameraClipModel hmbQueries]
  +[HMDCameraClipModel sentinelParentUUID]
  +[HMDCameraClipModel incompleteClipsQuery]
  +[HMDCameraClipModel clipsWithNeedsUploadFeedbackStatusQuery]
  +[HMDCameraClipModel clipsBeforeDateQuery]
  +[HMDCameraClipModel clipsWithQualityBetweenDatesAscendingQuery]
  +[HMDCameraClipModel clipsWithQualityBetweenDatesDescendingQuery]
  +[HMDCameraClipModel countOfClipsWithQualityBetweenDatesQuery]
  +[HMDCameraClipModel qualityPredicate]

  // instance methods
  -[HMDCameraClipModel setQuality:]
  -[HMDCameraClipModel quality]
  -[HMDCameraClipModel createClipWithSignificantEvents:]
  -[HMDCameraClipModel feedbackStatus]
  -[HMDCameraClipModel setFeedbackStatus:]


HMDHPSAPIConformanceProviding : NSObject <HMDHPSAPIConformanceProviding>
  // class methods
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSSiriAvailableLanguagesProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSLanguageValueProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSSettingProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSSiriLanguageSettingProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSStringSettingProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSBooleanSettingProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSNumberSettingProtocolMethods:]
  +[HMDHPSAPIConformanceProviding objectRespondsToHPSConstrainedNumberSettingProtocolMethods:]


HMDCharacteristicRequest : HMFObject <HMFLogging>
 @property  HMDCharacteristic *characteristic
 @property  HMDService *service
 @property  HMDHAPAccessory *accessory
 @property  id previousValue
 @property  BOOL completed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCharacteristicRequest logCategory]
  +[HMDCharacteristicRequest requestWithCharacteristic:]

  // instance methods
  -[HMDCharacteristicRequest accessory]
  -[HMDCharacteristicRequest attributeDescriptions]
  -[HMDCharacteristicRequest setCompleted:]
  -[HMDCharacteristicRequest isCompleted]
  -[HMDCharacteristicRequest .cxx_destruct]
  -[HMDCharacteristicRequest service]
  -[HMDCharacteristicRequest previousValue]
  -[HMDCharacteristicRequest isEqual:]
  -[HMDCharacteristicRequest characteristic]
  -[HMDCharacteristicRequest initWithCharacteristic:]


HMDCharacteristicWriteRequest : HMDCharacteristicRequest
 @property  id value
 @property  NSData *authorizationData
 @property  NSUUID *identifier
 @property  unsigned long requestType
 @property  BOOL includeResponseValue
 @property  NSData *contextData

  // class methods
  +[HMDCharacteristicWriteRequest logCategory]
  +[HMDCharacteristicWriteRequest writeRequestForTransitionStartWithLightProfile:naturalLightingEnabled:startDate:type:]
  +[HMDCharacteristicWriteRequest writeRequestForTransitionStartWithLightProfile:naturalLightingEnabled:startDate:type:dataSource:]
  +[HMDCharacteristicWriteRequest writeRequestForTransitionFetchWithLightProfile:]
  +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:type:]
  +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:]
  +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:]
  +[HMDCharacteristicWriteRequest writeRequestWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:]

  // instance methods
  -[HMDCharacteristicWriteRequest contextData]
  -[HMDCharacteristicWriteRequest identifier]
  -[HMDCharacteristicWriteRequest attributeDescriptions]
  -[HMDCharacteristicWriteRequest requestType]
  -[HMDCharacteristicWriteRequest .cxx_destruct]
  -[HMDCharacteristicWriteRequest value]
  -[HMDCharacteristicWriteRequest authorizationData]
  -[HMDCharacteristicWriteRequest includeResponseValue]
  -[HMDCharacteristicWriteRequest initWithCharacteristic:value:authorizationData:identifier:type:includeResponseValue:contextData:]


HMDCharacteristicResponse : HMFObject
 @property  HMDCharacteristicRequest *request
 @property  id value
 @property  NSError *error
 @property  NSNumber *stateNumber
 @property  NSDate *valueUpdatedTime
 @property  NSData *notificationContext

  // class methods
  +[HMDCharacteristicResponse responseWithRequest:error:]
  +[HMDCharacteristicResponse responsesWithRequests:error:]
  +[HMDCharacteristicResponse responseWithRequest:characteristicUpdateDictionary:]
  +[HMDCharacteristicResponse responsesWithRequests:characteristicUpdateDictionary:]

  // instance methods
  -[HMDCharacteristicResponse error]
  -[HMDCharacteristicResponse attributeDescriptions]
  -[HMDCharacteristicResponse .cxx_destruct]
  -[HMDCharacteristicResponse setValue:]
  -[HMDCharacteristicResponse value]
  -[HMDCharacteristicResponse notificationContext]
  -[HMDCharacteristicResponse request]
  -[HMDCharacteristicResponse valueUpdatedTime]
  -[HMDCharacteristicResponse initWithRequest:error:]
  -[HMDCharacteristicResponse stateNumber]
  -[HMDCharacteristicResponse setValue:updatedTime:stateNumber:notificationContext:]
  -[HMDCharacteristicResponse characteristicUpdateDictionary]


HMDErrorAggregationLogEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSDictionary *coreAnalyticsSerializedEvent
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // class methods
  +[HMDErrorAggregationLogEvent submitEventWithHistogrammedAggregateHomeDataCommonDimensions]
  +[HMDErrorAggregationLogEvent createSummaryEventForRequestGroup:totalErrorCount:totalEventCount:]
  +[HMDErrorAggregationLogEvent createErrorEventForRequestGroup:errorString:errorCount:]

  // instance methods
  -[HMDErrorAggregationLogEvent eventName]
  -[HMDErrorAggregationLogEvent .cxx_destruct]
  -[HMDErrorAggregationLogEvent serializedEvent]
  -[HMDErrorAggregationLogEvent initWithEventGroupName:errorString:errorCount:eventCount:]
  -[HMDErrorAggregationLogEvent coreAnalyticsSerializedEvent]


HMDLogEventErrorEventsAnalyzer : HMDLogEventAnalyzer <HMDLogEventDailyTaskRunner>
 @property  HMDEventCountersManager *eventCountersManager
 @property  <HMMLogEventSubmitting> *logEventSubmitter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDLogEventErrorEventsAnalyzer managedEventCounterRequestGroups]
  +[HMDLogEventErrorEventsAnalyzer errorEventsRequestGroupKeys]

  // instance methods
  -[HMDLogEventErrorEventsAnalyzer .cxx_destruct]
  -[HMDLogEventErrorEventsAnalyzer didReceiveEventFromDispatcher:]
  -[HMDLogEventErrorEventsAnalyzer logEventSubmitter]
  -[HMDLogEventErrorEventsAnalyzer runDailyTask]
  -[HMDLogEventErrorEventsAnalyzer eventCountersManager]
  -[HMDLogEventErrorEventsAnalyzer _handleAccessoryPairingLogEvent:]
  -[HMDLogEventErrorEventsAnalyzer initWithEventCountersManager:logEventSubmitter:dailyScheduler:]
  -[HMDLogEventErrorEventsAnalyzer eventCounterNameForError:]
  -[HMDLogEventErrorEventsAnalyzer eventCounterRequestGroupNameForLogEvent:]
  -[HMDLogEventErrorEventsAnalyzer eventCounterRequestGroupNameForLogEvent:underlyingError:]
  -[HMDLogEventErrorEventsAnalyzer _handleCloudShareTrustManagerFailureLogEvent:]
  -[HMDLogEventErrorEventsAnalyzer currentErrorEventsAnalyzedSummary]
  -[HMDLogEventErrorEventsAnalyzer submitAllFormattedErrorAggregationLogEvents]
  -[HMDLogEventErrorEventsAnalyzer submitErrorAggregationLogEventsForErrorEventGroup:]
  -[HMDLogEventErrorEventsAnalyzer resetEventCountersForAllErrorEventRequestGroups]


HMFObjectCacheHMDXPCBackgroundMessagePolicy : NSObject
  // class methods
  +[HMFObjectCacheHMDXPCBackgroundMessagePolicy cachedInstanceForXPCBackgroundMessagePolicy:]


HMDXPCBackgroundMessagePolicy : HMFMessagePolicy
 @property  BOOL requiresEntitlement

  // class methods
  +[HMDXPCBackgroundMessagePolicy defaultPolicy]
  +[HMDXPCBackgroundMessagePolicy policyWithEntitlementRequirement:]

  // instance methods
  -[HMDXPCBackgroundMessagePolicy copyWithZone:]
  -[HMDXPCBackgroundMessagePolicy isEqual:]
  -[HMDXPCBackgroundMessagePolicy init]
  -[HMDXPCBackgroundMessagePolicy __initWithEntitlementRequirement:]
  -[HMDXPCBackgroundMessagePolicy requiresEntitlement]


HMDDiagnosticReporterLogObserver : HMFObject <HMMLogEventObserver, HMFLogging>
 @property  <HMMLogEventDispatching> *logEventDispatcher
 @property  unsigned long memoryExceptionThreshold
 @property  NSObject<OS_dispatch_queue> *clientQueue
 @property  SDRDiagnosticReporter *reporter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDDiagnosticReporterLogObserver logCategory]
  +[HMDDiagnosticReporterLogObserver supportedEventClasses]
  +[HMDDiagnosticReporterLogObserver isSupportedEvent:]
  +[HMDDiagnosticReporterLogObserver domainForEvent:]
  +[HMDDiagnosticReporterLogObserver typeForEvent:]
  +[HMDDiagnosticReporterLogObserver subTypeForEvent:]

  // instance methods
  -[HMDDiagnosticReporterLogObserver reporter]
  -[HMDDiagnosticReporterLogObserver clientQueue]
  -[HMDDiagnosticReporterLogObserver .cxx_destruct]
  -[HMDDiagnosticReporterLogObserver stop]
  -[HMDDiagnosticReporterLogObserver start]
  -[HMDDiagnosticReporterLogObserver didReceiveEventFromDispatcher:]
  -[HMDDiagnosticReporterLogObserver logEventDispatcher]
  -[HMDDiagnosticReporterLogObserver initWithLogEventDispatcher:]
  -[HMDDiagnosticReporterLogObserver shouldSubmitEvent:]
  -[HMDDiagnosticReporterLogObserver memoryExceptionThreshold]


HMDHouseholdMetricsMessagingProvider : NSObject <HMDHouseholdMetricsMessaging>
 @property  <HMFMessageReceiver> *receiver
 @property  HMDMessageDispatcher *messageDispatcher

  // class methods
  +[HMDHouseholdMetricsMessagingProvider logCategory]

  // instance methods
  -[HMDHouseholdMetricsMessagingProvider .cxx_destruct]
  -[HMDHouseholdMetricsMessagingProvider receiver]
  -[HMDHouseholdMetricsMessagingProvider messageDispatcher]
  -[HMDHouseholdMetricsMessagingProvider initWithReceiver:]
  -[HMDHouseholdMetricsMessagingProvider sendMessage:toDevice:withPayload:responseHandler:]
  -[HMDHouseholdMetricsMessagingProvider registerForMessage:messageHandler:]
  -[HMDHouseholdMetricsMessagingProvider deregisterForMessage:]
  -[HMDHouseholdMetricsMessagingProvider initWithReceiver:messageDispatcher:]


HMDTriggerConfirmationTimer : HMFTimer
 @property  NSUUID *executionSessionID

  // instance methods
  -[HMDTriggerConfirmationTimer .cxx_destruct]
  -[HMDTriggerConfirmationTimer initWithExecutionSessionID:timeoutInterval:]
  -[HMDTriggerConfirmationTimer executionSessionID]


HMDRemovedUserAccessCodeModel : HMDBackingStoreModelObject
 @property  NSString *accessCode
 @property  NSData *removedUserInfoData
 @property  HMRemovedUserInfo *removedUserInfo

  // class methods
  +[HMDRemovedUserAccessCodeModel properties]
  +[HMDRemovedUserAccessCodeModel modelUUIDForHomeUUID:removedUserInfo:accessCode:]

  // instance methods
  -[HMDRemovedUserAccessCodeModel removedUserInfo]
  -[HMDRemovedUserAccessCodeModel initWithRemovedUserInfo:accessCode:homeUUID:]


HMDAccessoryBrowserXPCMessageSendPolicy : HMDXPCMessageSendPolicy
 @property  unsigned long requiredEntitlements

  // instance methods
  -[HMDAccessoryBrowserXPCMessageSendPolicy attributeDescriptions]
  -[HMDAccessoryBrowserXPCMessageSendPolicy copyWithZone:]
  -[HMDAccessoryBrowserXPCMessageSendPolicy requiredEntitlements]
  -[HMDAccessoryBrowserXPCMessageSendPolicy isEqual:]
  -[HMDAccessoryBrowserXPCMessageSendPolicy canSendWithPolicyParameters:]
  -[HMDAccessoryBrowserXPCMessageSendPolicy initWithRequiredEntitlements:]


HMDUserPresenceUpdateReason : NSObject
 @property  NSNumber *number
 @property  unsigned long value

  // class methods
  +[HMDUserPresenceUpdateReason reasonWithValue:]
  +[HMDUserPresenceUpdateReason reasonWithNumber:]
  +[HMDUserPresenceUpdateReason reasonWithMessage:]
  +[HMDUserPresenceUpdateReason reasonWithDict:]
  +[HMDUserPresenceUpdateReason reasonWithCoder:]

  // instance methods
  -[HMDUserPresenceUpdateReason number]
  -[HMDUserPresenceUpdateReason value]
  -[HMDUserPresenceUpdateReason isEqual:]
  -[HMDUserPresenceUpdateReason initWithNumber:]
  -[HMDUserPresenceUpdateReason addToCoder:]
  -[HMDUserPresenceUpdateReason addToPayload:]


HMDCameraSnapshotIDSStreamInitiator : HMDCameraSnapshotIDSStream <IDSServiceDelegate, HMFLogging>
 @property  NSString *destinationID
 @property  NSString *sendFileIdentifier
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  <HMDCameraSnapshotIDSStreamInitiatorDelegate> *delegate
 @property  HMDSnapshotFile *snapshotFile
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCameraSnapshotIDSStreamInitiator logCategory]

  // instance methods
  -[HMDCameraSnapshotIDSStreamInitiator service:account:identifier:didSendWithSuccess:error:]
  -[HMDCameraSnapshotIDSStreamInitiator logIdentifier]
  -[HMDCameraSnapshotIDSStreamInitiator delegate]
  -[HMDCameraSnapshotIDSStreamInitiator dealloc]
  -[HMDCameraSnapshotIDSStreamInitiator .cxx_destruct]
  -[HMDCameraSnapshotIDSStreamInitiator delegateQueue]
  -[HMDCameraSnapshotIDSStreamInitiator destinationID]
  -[HMDCameraSnapshotIDSStreamInitiator setDestinationID:]
  -[HMDCameraSnapshotIDSStreamInitiator snapshotFile]
  -[HMDCameraSnapshotIDSStreamInitiator setSnapshotFile:]
  -[HMDCameraSnapshotIDSStreamInitiator _callFileTransferFailed:]
  -[HMDCameraSnapshotIDSStreamInitiator initWithSessionID:workQueue:destinationID:delegate:delegateQueue:]
  -[HMDCameraSnapshotIDSStreamInitiator sendFile:]
  -[HMDCameraSnapshotIDSStreamInitiator _sendFile:]
  -[HMDCameraSnapshotIDSStreamInitiator sendFileIdentifier]
  -[HMDCameraSnapshotIDSStreamInitiator setSendFileIdentifier:]


HMDPersonSettingsModel : HMBModel
 @property  NSData *classificationNotificationSettingsData
 @property  NSDictionary *faceClassificationNotificationsEnabledByPersonUUID

  // class methods
  +[HMDPersonSettingsModel hmbProperties]
  +[HMDPersonSettingsModel hmbExcludeFromCloudStorage]
  +[HMDPersonSettingsModel sentinelParentUUID]
  +[HMDPersonSettingsModel sentinelModelUUID]

  // instance methods
  -[HMDPersonSettingsModel init]
  -[HMDPersonSettingsModel faceClassificationNotificationsEnabledByPersonUUID]
  -[HMDPersonSettingsModel classificationNotificationsEnabledForPersonUUID:]
  -[HMDPersonSettingsModel setClassificationNotificationsEnabled:forPersonUUID:]
  -[HMDPersonSettingsModel unarchivedClassificationNotificationsEnabledForPersonUUID]
  -[HMDPersonSettingsModel archiveClassificationNotificationsEnabledForPersonUUID:]


HMDMediaDestinationController : HMFObject <HMDMediaDestinationControllerMessageHandlerDataSource, HMFLogging, HMDMediaDestinationControllerBackingStoreHandlerDelegate, HMDMediaDestinationControllerMessageHandlerDelegate, HMFStagedValueDelegate>
 @property  NSString *urlString
 @property  <HMDMediaDestinationControllerDataSource> *dataSource
 @property  <HMDMediaDestinationControllerDelegate> *delegate
 @property  BOOL isTargetDevice
 @property  HMDMediaDestinationControllerMetricsEventDispatcher *metricsEventDispatcher
 @property  HMFStagedValue *stagedDestinationIdentifier
 @property  HMFStagedValue *stagedAvailableDestinationIdentifiers
 @property  NSUUID *identifier
 @property  HMMediaDestinationControllerData *data
 @property  HMMediaDestinationControllerData *committedData
 @property  HMDMediaDestinationControllerMessageHandler *messageHandler
 @property  HMDMediaDestinationControllerBackingStoreHandler *backingStoreHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDMediaDestinationController logCategory]

  // instance methods
  -[HMDMediaDestinationController identifier]
  -[HMDMediaDestinationController logIdentifier]
  -[HMDMediaDestinationController dataSource]
  -[HMDMediaDestinationController setDelegate:]
  -[HMDMediaDestinationController messageHandler]
  -[HMDMediaDestinationController delegate]
  -[HMDMediaDestinationController attributeDescriptions]
  -[HMDMediaDestinationController privateDescription]
  -[HMDMediaDestinationController .cxx_destruct]
  -[HMDMediaDestinationController setDataSource:]
  -[HMDMediaDestinationController urlString]
  -[HMDMediaDestinationController data]
  -[HMDMediaDestinationController stagedValue:didExpireValue:]
  -[HMDMediaDestinationController messageHandler:shouldRelayIncomingMessage:]
  -[HMDMediaDestinationController messageHandler:deviceForOutgoingMessage:]
  -[HMDMediaDestinationController configureWithHome:]
  -[HMDMediaDestinationController dataSourceTargetAccessory]
  -[HMDMediaDestinationController mergeData:]
  -[HMDMediaDestinationController migrateWithHome:cloudZone:migrationQueue:completion:]
  -[HMDMediaDestinationController updateDestinationIdentifier:]
  -[HMDMediaDestinationController updateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController metricsEventDispatcher]
  -[HMDMediaDestinationController setMetricsEventDispatcher:]
  -[HMDMediaDestinationController notifyDelegateDidUpdateStagedValues]
  -[HMDMediaDestinationController backingStoreHandler]
  -[HMDMediaDestinationController isTargetDevice]
  -[HMDMediaDestinationController mediaGroupParticipantDataLocalStorage]
  -[HMDMediaDestinationController stagedDestinationIdentifier]
  -[HMDMediaDestinationController assistantObjectWithHome:name:]
  -[HMDMediaDestinationController mediaDestinationControllerBackingStoreHandler:didUpdateDestinationIdentifier:]
  -[HMDMediaDestinationController mediaDestinationControllerBackingStoreHandler:didUpdateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaDestinationControllerUpdateDestinationRequestMessage:destinationIdentifier:updateOptions:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaDestinationUpdatedNotification:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveHomeAccessoryRemovedNotification:destination:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaSystemAddedNotification:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaSystemRemovedNotification:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveAccessoryChangedRoomNotification:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaDestinationControllerUpdatedDestinationNotification:destinationControllerIdentifier:destinationIdentifier:]
  -[HMDMediaDestinationController mediaDestinationControllerMessageHandler:didReceiveMediaGroupsAggregateConsumerUpdatedAggregateDataNotification:]
  -[HMDMediaDestinationController initWithData:backingStore:messageDispatcher:notificationCenter:logEventSubmitter:dailyScheduler:targetDevice:dataSource:delegate:]
  -[HMDMediaDestinationController initWithBackingStoreHandler:messageHandler:metricsEventDispatcher:targetDevice:dataSource:delegate:]
  -[HMDMediaDestinationController stageDestinationIdentifier:]
  -[HMDMediaDestinationController stageAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController _updateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController legacyUpdateAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController updateDestinationIdentifier:updateOptions:]
  -[HMDMediaDestinationController _updateDestinationIdentifier:]
  -[HMDMediaDestinationController legacyUpdateDestinationIdentifier:]
  -[HMDMediaDestinationController unsetAudioGroupForCurrentDestination]
  -[HMDMediaDestinationController updateDestinationWithIdentifier:audioGroupIdentifier:]
  -[HMDMediaDestinationController refreshDestinationController]
  -[HMDMediaDestinationController refeshAvailableDestinationIdentifiers]
  -[HMDMediaDestinationController refreshDestinationIdentifier]
  -[HMDMediaDestinationController hasSetDestinationRelatedToIdentifier:]
  -[HMDMediaDestinationController committedData]
  -[HMDMediaDestinationController filteredAvailableDestinationIdentifiers]
  -[HMDMediaDestinationController filteredDestinationIdentifierFilteredAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController dataSourceAvailableDestinationIdentifiers]
  -[HMDMediaDestinationController dataSourceDestinationManagerWithIdentifier:]
  -[HMDMediaDestinationController dataSourceDestinationWithIdentifier:]
  -[HMDMediaDestinationController dataSourceDestinationUsingRelatedIdentifier:]
  -[HMDMediaDestinationController triggerStageValueDidExpireValueForStagedDestinationIdentifier]
  -[HMDMediaDestinationController triggerStageValueDidExpireValueForStagedAvailableDestinationIdentifiers]
  -[HMDMediaDestinationController stagedValue:didExpireDestinationIdentifier:]
  -[HMDMediaDestinationController stagedValue:didExpireAvailableDestinationIdentifiers:]
  -[HMDMediaDestinationController stagedAvailableDestinationIdentifiers]


HMDRemoteLoginHandler : HMFObject <HMDHomeMessageReceiver, HMFLogging, NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMFMessageDispatcher *msgDispatcher
 @property  <HMELastEventStoreReadHandle> *eventStoreReadHandle
 @property  <HMEEventForwarder> *eventForwarder
 @property  NSUUID *uuid
 @property  HMDRemoteLoginInitiator *initiator
 @property  HMDRemoteLoginReceiver *receiver
 @property  HMDAppleMediaAccessory *accessory
 @property  HMDRemoteLoginAnisetteDataHandler *anisetteDataHandler
 @property  ACAccount *loggedInAccount
 @property  NSSet *messageReceiverChildren
 @property  NSUUID *messageTargetUUID
 @property  NSObject<OS_dispatch_queue> *messageReceiveQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDRemoteLoginHandler supportsSecureCoding]
  +[HMDRemoteLoginHandler logCategory]
  +[HMDRemoteLoginHandler hasMessageReceiverChildren]
  +[HMDRemoteLoginHandler remoteMessages]

  // instance methods
  -[HMDRemoteLoginHandler accessory]
  -[HMDRemoteLoginHandler eventSource]
  -[HMDRemoteLoginHandler eventStoreReadHandle]
  -[HMDRemoteLoginHandler logIdentifier]
  -[HMDRemoteLoginHandler _initialize]
  -[HMDRemoteLoginHandler encodeWithCoder:]
  -[HMDRemoteLoginHandler workQueue]
  -[HMDRemoteLoginHandler setWorkQueue:]
  -[HMDRemoteLoginHandler uuid]
  -[HMDRemoteLoginHandler .cxx_destruct]
  -[HMDRemoteLoginHandler messageTargetUUID]
  -[HMDRemoteLoginHandler receiver]
  -[HMDRemoteLoginHandler messageReceiveQueue]
  -[HMDRemoteLoginHandler msgDispatcher]
  -[HMDRemoteLoginHandler initiator]
  -[HMDRemoteLoginHandler initWithCoder:]
  -[HMDRemoteLoginHandler setMsgDispatcher:]
  -[HMDRemoteLoginHandler registerForMessages]
  -[HMDRemoteLoginHandler loggedInAccount]
  -[HMDRemoteLoginHandler setLoggedInAccount:]
  -[HMDRemoteLoginHandler messageReceiverChildren]
  -[HMDRemoteLoginHandler eventForwarder]
  -[HMDRemoteLoginHandler __handleUpdateLoggedInAccount:]
  -[HMDRemoteLoginHandler handleAccountUsernameUpdatedOnCurrentDevice:]
  -[HMDRemoteLoginHandler initWithAccessory:loggedInAccountData:]
  -[HMDRemoteLoginHandler configureWithWorkQueue:messageDispatcher:eventStoreReadHandle:eventForwarder:]
  -[HMDRemoteLoginHandler _handleRemoteLoginAccount:message:]
  -[HMDRemoteLoginHandler _sendAccountUpdateNotification:]
  -[HMDRemoteLoginHandler eventTimeStamp]
  -[HMDRemoteLoginHandler isAccount:equalTo:]
  -[HMDRemoteLoginHandler _postUpdateAccountInfoIfDifferent]
  -[HMDRemoteLoginHandler _postUpdatedAccountInfo:]
  -[HMDRemoteLoginHandler _updateLoggedInAccount:]
  -[HMDRemoteLoginHandler _registerForUsernameUpdates]
  -[HMDRemoteLoginHandler anisetteDataHandler]
  -[HMDRemoteLoginHandler setEventStoreReadHandle:]
  -[HMDRemoteLoginHandler setEventForwarder:]


HMDNetworkRouterFirewallRuleLANStatic : HMDNetworkRouterFirewallRuleLAN
 @property  unsigned char transportProtocol
 @property  HMFNetAddress *ipAddress
 @property  unsigned short portStart
 @property  unsigned short portEnd
 @property  NSArray *icmpTypes

  // class methods
  +[HMDNetworkRouterFirewallRuleLANStatic createWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:ruleDictionary:error:]

  // instance methods
  -[HMDNetworkRouterFirewallRuleLANStatic attributeDescriptions]
  -[HMDNetworkRouterFirewallRuleLANStatic .cxx_destruct]
  -[HMDNetworkRouterFirewallRuleLANStatic transportProtocol]
  -[HMDNetworkRouterFirewallRuleLANStatic isEqual:]
  -[HMDNetworkRouterFirewallRuleLANStatic ipAddress]
  -[HMDNetworkRouterFirewallRuleLANStatic prettyJSONDictionary]
  -[HMDNetworkRouterFirewallRuleLANStatic icmpTypes]
  -[HMDNetworkRouterFirewallRuleLANStatic portStart]
  -[HMDNetworkRouterFirewallRuleLANStatic portEnd]
  -[HMDNetworkRouterFirewallRuleLANStatic initWithJSONDictionary:name:critical:purpose:allowInterAccessoryConnections:direction:requiredForHAPFunctionality:transportProtocol:ipAddress:portStart:portEnd:icmpTypes:]


HMDCapabilityFlags : HMFObject <NSSecureCoding>
 @property  NSData *bytesData

  // class methods
  +[HMDCapabilityFlags supportsSecureCoding]
  +[HMDCapabilityFlags shortDescription]

  // instance methods
  -[HMDCapabilityFlags hasCapabilities:]
  -[HMDCapabilityFlags encodeWithCoder:]
  -[HMDCapabilityFlags .cxx_destruct]
  -[HMDCapabilityFlags initWithData:]
  -[HMDCapabilityFlags initWithCapabilities:]
  -[HMDCapabilityFlags initWithCoder:]
  -[HMDCapabilityFlags initWithCapabilityOptions:]
  -[HMDCapabilityFlags bytesData]


HMDMediaDestinationManagerFailureEvent : HMMLogEvent <HMMCoreAnalyticsLogging>
 @property  NSString *errorDomain
 @property  NSNumber *errorCode
 @property  NSNumber *failureCode
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDMediaDestinationManagerFailureEvent errorCode]
  -[HMDMediaDestinationManagerFailureEvent eventName]
  -[HMDMediaDestinationManagerFailureEvent attributeDescriptions]
  -[HMDMediaDestinationManagerFailureEvent errorDomain]
  -[HMDMediaDestinationManagerFailureEvent .cxx_destruct]
  -[HMDMediaDestinationManagerFailureEvent failureCode]
  -[HMDMediaDestinationManagerFailureEvent serializedEvent]
  -[HMDMediaDestinationManagerFailureEvent initWithFailureCode:error:]


HMDSnapshotRequestHandler : HMFObject <HMFLogging, HMFTimerDelegate, HMDCameraStreamSnapshotHandlerDelegate, HMDSnapshotRequestHandlerProtocol>
 @property  NSString *logIdentifier
 @property  NSSet *supportedResolutions
 @property  NSString *imageCacheDirectory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDSnapshotRequestHandler logCategory]

  // instance methods
  -[HMDSnapshotRequestHandler timerDidFire:]
  -[HMDSnapshotRequestHandler logIdentifier]
  -[HMDSnapshotRequestHandler .cxx_destruct]
  -[HMDSnapshotRequestHandler streamSnapshotHandler:didGetNewSnapshot:]
  -[HMDSnapshotRequestHandler streamSnapshotHandler:didGetLastSnapshot:]
  -[HMDSnapshotRequestHandler requestSnapshot:streamingTierType:completionHandler:]
  -[HMDSnapshotRequestHandler initWithAccessory:workQueue:streamSnapshotHandler:imageCacheDirectory:logID:]
  -[HMDSnapshotRequestHandler imageCacheDirectory]
  -[HMDSnapshotRequestHandler supportedResolutions]
  -[HMDSnapshotRequestHandler setSupportedResolutions:]


HMDDataStreamBulkSendOpenSessionResult : NSObject
 @property  <HMDDataStreamBulkSendSession> *session
 @property  NSDictionary *payload

  // instance methods
  -[HMDDataStreamBulkSendOpenSessionResult session]
  -[HMDDataStreamBulkSendOpenSessionResult attributeDescriptions]
  -[HMDDataStreamBulkSendOpenSessionResult payload]
  -[HMDDataStreamBulkSendOpenSessionResult .cxx_destruct]
  -[HMDDataStreamBulkSendOpenSessionResult initWithSession:payload:]


HMDDuetEventManager : HMFObject
 @property  <_CDAsyncLocalContext> *context
 @property  <_DKKnowledgeSaving> *saveStore
 @property  <_DKKnowledgeEventStreamDeleting> *deleteStore
 @property  <_DKKnowledgeQuerying> *queryStore
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  NSNotificationCenter *notificationCenter

  // class methods
  +[HMDDuetEventManager eventTypeAsString:]
  +[HMDDuetEventManager eventStreamForType:]
  +[HMDDuetEventManager identifierForType:eventValue:]

  // instance methods
  -[HMDDuetEventManager notificationCenter]
  -[HMDDuetEventManager workQueue]
  -[HMDDuetEventManager .cxx_destruct]
  -[HMDDuetEventManager context]
  -[HMDDuetEventManager deleteStore]
  -[HMDDuetEventManager init]
  -[HMDDuetEventManager _handleHomeRemovedNotification:]
  -[HMDDuetEventManager _handleAccessoryRemovedNotification:]
  -[HMDDuetEventManager _handleActionSetEmptiedNotification:]
  -[HMDDuetEventManager _handleServiceRemovedNotification:]
  -[HMDDuetEventManager initWithSaveStore:queryStore:deleteStore:clientContext:notificationCenter:workQueue:]
  -[HMDDuetEventManager queryEventsOfType:fromDate:offset:limit:]
  -[HMDDuetEventManager deleteEventsOfType:fromDate:]
  -[HMDDuetEventManager resetAllEvents]
  -[HMDDuetEventManager dumpEventsOfType:fromDate:offset:limit:]
  -[HMDDuetEventManager dumpAllEvents]
  -[HMDDuetEventManager saveStore]
  -[HMDDuetEventManager queryStore]


HMDMPCSessionController : HMFObject
 @property  NSOperationQueue *speakerGroupCommandOperationQueue
 @property  <HMMLogEventSubmitting> *logEventSubmitter

  // instance methods
  -[HMDMPCSessionController .cxx_destruct]
  -[HMDMPCSessionController logEventSubmitter]
  -[HMDMPCSessionController initWithLogEventSubmitter:]
  -[HMDMPCSessionController executeSessionWithSessionData:completion:]
  -[HMDMPCSessionController speakerGroupCommandOperationQueue]


HMDCharacteristicsAvailabilityListener : HMFObject <HMFLogging>
 @property  HMDHAPAccessory *accessory
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  HMDNotificationRegistration *notificationRegistration
 @property  NSSet *availableCharacteristics
 @property  NSString *logIdentifier
 @property  NSDictionary *interestedCharacteristicTypesByServiceType
 @property  <HMDCharacteristicsAvailabilityListenerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[HMDCharacteristicsAvailabilityListener logCategory]

  // instance methods
  -[HMDCharacteristicsAvailabilityListener accessory]
  -[HMDCharacteristicsAvailabilityListener _registerForNotifications]
  -[HMDCharacteristicsAvailabilityListener logIdentifier]
  -[HMDCharacteristicsAvailabilityListener setDelegate:]
  -[HMDCharacteristicsAvailabilityListener workQueue]
  -[HMDCharacteristicsAvailabilityListener delegate]
  -[HMDCharacteristicsAvailabilityListener .cxx_destruct]
  -[HMDCharacteristicsAvailabilityListener _notifyDelegate]
  -[HMDCharacteristicsAvailabilityListener start]
  -[HMDCharacteristicsAvailabilityListener notificationRegistration]
  -[HMDCharacteristicsAvailabilityListener availableCharacteristics]
  -[HMDCharacteristicsAvailabilityListener setAvailableCharacteristics:]
  -[HMDCharacteristicsAvailabilityListener handleCharacteristicsUpdated:]
  -[HMDCharacteristicsAvailabilityListener handleServicesUpdated:]
  -[HMDCharacteristicsAvailabilityListener initWithAccessory:workQueue:interestedCharacteristicTypesByServiceType:]
  -[HMDCharacteristicsAvailabilityListener _accessoryCharacteristicsToObserve]
  -[HMDCharacteristicsAvailabilityListener interestedCharacteristicTypesByServiceType]


HMDHAPMetricsStateNumberChangeEvent : HMDHAPMetrics <HMMCoreAnalyticsLogging>
 @property  NSString *eventName
 @property  NSDictionary *serializedEvent
 @property  NSString *accessoryIdentifier
 @property  BOOL logEventWithAppendedCommonDimensions

  // instance methods
  -[HMDHAPMetricsStateNumberChangeEvent eventName]
  -[HMDHAPMetricsStateNumberChangeEvent initWithAccessory:]


HMDFetchedSettingsUtilities : NSObject
  // class methods
  +[HMDFetchedSettingsUtilities _outputGenderFromString:]
  +[HMDFetchedSettingsUtilities _outputGenderStringFromAFVoiceGender:]
  +[HMDFetchedSettingsUtilities languageValueFromHPLanguageValue:]
  +[HMDFetchedSettingsUtilities transformHPLanguageItemsToLanguageListValue:]


AWDHomeKitCameraRecordingClipNotification : PBCodable <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned long duration
 @property  BOOL hasCameraUUID
 @property  NSString *cameraUUID
 @property  BOOL hasSessionUUID
 @property  NSString *sessionUUID
 @property  BOOL hasRecordingEventTriggers
 @property  unsigned long recordingEventTriggers
 @property  BOOL hasSequenceNumber
 @property  unsigned long sequenceNumber

  // instance methods
  -[AWDHomeKitCameraRecordingClipNotification setDuration:]
  -[AWDHomeKitCameraRecordingClipNotification hasSequenceNumber]
  -[AWDHomeKitCameraRecordingClipNotification setSessionUUID:]
  -[AWDHomeKitCameraRecordingClipNotification sessionUUID]
  -[AWDHomeKitCameraRecordingClipNotification setHasSequenceNumber:]
  -[AWDHomeKitCameraRecordingClipNotification setTimestamp:]
  -[AWDHomeKitCameraRecordingClipNotification hasDuration]
  -[AWDHomeKitCameraRecordingClipNotification copyTo:]
  -[AWDHomeKitCameraRecordingClipNotification setSequenceNumber:]
  -[AWDHomeKitCameraRecordingClipNotification .cxx_destruct]
  -[AWDHomeKitCameraRecordingClipNotification duration]
  -[AWDHomeKitCameraRecordingClipNotification mergeFrom:]
  -[AWDHomeKitCameraRecordingClipNotification setHasTimestamp:]
  -[AWDHomeKitCameraRecordingClipNotification dictionaryRepresentation]
  -[AWDHomeKitCameraRecordingClipNotification hasTimestamp]
  -[AWDHomeKitCameraRecordingClipNotification copyWithZone:]
  -[AWDHomeKitCameraRecordingClipNotification sequenceNumber]
  -[AWDHomeKitCameraRecordingClipNotification timestamp]
  -[AWDHomeKitCameraRecordingClipNotification readFrom:]
  -[AWDHomeKitCameraRecordingClipNotification setHasDuration:]
  -[AWDHomeKitCameraRecordingClipNotification writeTo:]
  -[AWDHomeKitCameraRecordingClipNotification isEqual:]
  -[AWDHomeKitCameraRecordingClipNotification recordingEventTriggers]
  -[AWDHomeKitCameraRecordingClipNotification setRecordingEventTriggers:]
  -[AWDHomeKitCameraRecordingClipNotification hasSessionUUID]
  -[AWDHomeKitCameraRecordingClipNotification cameraUUID]
  -[AWDHomeKitCameraRecordingClipNotification hasCameraUUID]
  -[AWDHomeKitCameraRecordingClipNotification setCameraUUID:]
  -[AWDHomeKitCameraRecordingClipNotification setHasRecordingEventTriggers:]
  -[AWDHomeKitCameraRecordingClipNotification hasRecordingEventTriggers]


HMDMediaPropertyRequest : HMFObject
 @property  NSString *property
 @property  HMDMediaProfile *mediaProfile
 @property  id previousValue

  // class methods
  +[HMDMediaPropertyRequest requestWithProperty:mediaProfile:]
  +[HMDMediaPropertyRequest serializeReadRequests:]
  +[HMDMediaPropertyRequest deserializeReadRequests:mediaProfile:]

  // instance methods
  -[HMDMediaPropertyRequest property]
  -[HMDMediaPropertyRequest .cxx_destruct]
  -[HMDMediaPropertyRequest previousValue]
  -[HMDMediaPropertyRequest mediaProfile]
  -[HMDMediaPropertyRequest initWithProperty:mediaProfile:]


HMDMediaPropertyWriteRequest : HMDMediaPropertyRequest
 @property  id value
 @property  NSUUID *identifier

  // class methods
  +[HMDMediaPropertyWriteRequest requestWithProperty:mediaProfile:]
  +[HMDMediaPropertyWriteRequest writeRequestWithProperty:value:mediaProfile:]
  +[HMDMediaPropertyWriteRequest writeRequestWithProperty:value:mediaProfile:identifier:]
  +[HMDMediaPropertyWriteRequest serializeWriteRequests:]
  +[HMDMediaPropertyWriteRequest deserializeWriteRequests:mediaProfile:]

  // instance methods
  -[HMDMediaPropertyWriteRequest identifier]
  -[HMDMediaPropertyWriteRequest .cxx_destruct]
  -[HMDMediaPropertyWriteRequest value]
  -[HMDMediaPropertyWriteRequest initWithProperty:value:mediaProfile:identifier:]


HMDMediaPropertyResponse : HMFObject
 @property  HMDMediaPropertyRequest *request
 @property  id value
 @property  NSError *error
 @property  NSDate *valueUpdatedTime

  // class methods
  +[HMDMediaPropertyResponse responseWithRequest:error:]
  +[HMDMediaPropertyResponse propertyResponsesFromRequests:error:]
  +[HMDMediaPropertyResponse groupedProfileResponses:]
  +[HMDMediaPropertyResponse serializeResponses:]
  +[HMDMediaPropertyResponse responsesFromSerializedResponse:requests:home:]
  +[HMDMediaPropertyResponse responseWithRequest:value:updatedTime:]

  // instance methods
  -[HMDMediaPropertyResponse error]
  -[HMDMediaPropertyResponse .cxx_destruct]
  -[HMDMediaPropertyResponse setValue:]
  -[HMDMediaPropertyResponse value]
  -[HMDMediaPropertyResponse request]
  -[HMDMediaPropertyResponse valueUpdatedTime]
  -[HMDMediaPropertyResponse initWithRequest:error:]
  -[HMDMediaPropertyResponse initWithRequest:value:updatedTime:]


HMDXPCClientConnectionFactory : HMFObject
  // instance methods
  -[HMDXPCClientConnectionFactory createXPCClientConnectionWithXPCConnection:counterTracker:]


IDSAccount(HMDAccounts)
	// instance methods
	-[IDSAccount(HMDAccounts) hmd_handles]

AVCAudioStream(HMDAudioStreamInterfaceDataSource)
HMFaceCrop(HMI)
	// instance methods
	-[HMFaceCrop(HMI) initWithHMIFaceCrop:]
	-[HMFaceCrop(HMI) createHMIFaceCrop]

HAPCharacteristicValueTransitionControllerContext(NaturalLighting)
	// instance methods
	-[HAPCharacteristicValueTransitionControllerContext(NaturalLighting) activeTransitionContext]
	-[HAPCharacteristicValueTransitionControllerContext(NaturalLighting) isNaturalLightingEnabled]

HAPCharacteristicValueTransitionState(NaturalLighting)
	// instance methods
	-[HAPCharacteristicValueTransitionState(NaturalLighting) isValid]
	-[HAPCharacteristicValueTransitionState(NaturalLighting) isNaturalLightingEnabledForCharacteristic:]
	-[HAPCharacteristicValueTransitionState(NaturalLighting) naturalLightingActiveTransitionContextForCharacteristic:]

IDSService(HMDIDSService)
	// instance methods
	-[IDSService(HMDIDSService) hmd_handles]
	-[IDSService(HMDIDSService) hmd_isActive]
	-[IDSService(HMDIDSService) hmd_preferredHandle]

HMFPreferences(MediaAccessories)
	// class methods
	+[HMFPreferences(MediaAccessories) loadEnableMediaAccessoriesPreferences]
	+[HMFPreferences(MediaAccessories) loadEnableAppleMediaAccessories]

MPCAssistantConnection(HMDMRSetEndpointVolumeOperation)
MPCAssistantDiscovery(HMDMRSetEndpointVolumeOperation)
NAFuture(FirewallRuleManager)
	// class methods
	+[NAFuture(FirewallRuleManager) futureWithRetries:timeInterval:workQueue:block:]

	// instance methods
	-[NAFuture(FirewallRuleManager) blockAndWaitForCompletionWithError:]

IDSSession(HMDDevice)
	// class methods
	+[IDSSession(HMDDevice) hmd_sessionWithAccount:device:options:]

(HMDCameraUtilities)
	// class methods
	+[(HMDCameraUtilities) hm_dayOfTheWeek]
	+[(HMDCameraUtilities) hm_iso8601dateFromString:]
	+[(HMDCameraUtilities) hmd_snapshotFileNameDateFormatter]
	+[(HMDCameraUtilities) hmd_dateFromSnapshotFileName:]

	// instance methods
	-[(HMDCameraUtilities) hmd_snapshotFileName]

HMAccessorySettingConstraint(Metadata)
	// class methods
	+[HMAccessorySettingConstraint(Metadata) constraintsWithArrayRepresenation:]
	+[HMAccessorySettingConstraint(Metadata) constraintWithDictonaryRepresentation:]
	+[HMAccessorySettingConstraint(Metadata) valueWithType:representation:]

	// instance methods
	-[HMAccessorySettingConstraint(Metadata) initWithModel:]
	-[HMAccessorySettingConstraint(Metadata) modelWithParentIdentifier:]

HMFMessage(HMDXPC)
	// class methods
	+[HMFMessage(HMDXPC) entitledMessageWithName:messagePayload:]
	+[HMFMessage(HMDXPC) entitledMessageWithName:identifier:messagePayload:]
	+[HMFMessage(HMDXPC) nonSPIEntitledMessageWithName:messagePayload:]
	+[HMFMessage(HMDXPC) internalMessageWithName:messagePayload:]
	+[HMFMessage(HMDXPC) internalMessageWithName:messagePayload:responseHandler:]
	+[HMFMessage(HMDXPC) internalMessageWithName:destination:messagePayload:]
	+[HMFMessage(HMDXPC) locationAuthorizedMessageWithName:messagePayload:]
	+[HMFMessage(HMDXPC) homeLocationAuthorizedAndEntitledMessageWithName:target:messagePayload:]

	// instance methods
	-[HMFMessage(HMDXPC) applicationBundleIdentifier]
	-[HMFMessage(HMDXPC) isRemote]
	-[HMFMessage(HMDXPC) isInternal]
	-[HMFMessage(HMDXPC) entitlements]
	-[HMFMessage(HMDXPC) proxyConnection]
	-[HMFMessage(HMDXPC) isBackground]
	-[HMFMessage(HMDXPC) clientName]
	-[HMFMessage(HMDXPC) isAuthorizedForHomeDataAccess]
	-[HMFMessage(HMDXPC) requiresSPIEntitlement]
	-[HMFMessage(HMDXPC) requiresNoSPIEntitlement]
	-[HMFMessage(HMDXPC) requiresSetupPayloadEntitlement]
	-[HMFMessage(HMDXPC) requiresMatterSetupPayloadEntitlement]
	-[HMFMessage(HMDXPC) requiresCameraClipsEntitlement]
	-[HMFMessage(HMDXPC) requiresMultiUserSetupEntitlement]
	-[HMFMessage(HMDXPC) requiresPersonManagerEntitlement]
	-[HMFMessage(HMDXPC) requiresWalletKeyEntitlement]
	-[HMFMessage(HMDXPC) isEntitledForAPIAccess]
	-[HMFMessage(HMDXPC) isEntitledForSPIAccess]
	-[HMFMessage(HMDXPC) isAuthorizedForMicrophoneAccess]
	-[HMFMessage(HMDXPC) isEntitledForBackgroundMode]
	-[HMFMessage(HMDXPC) isAuthorizedForLocationAccess]
	-[HMFMessage(HMDXPC) isEntitledForHomeLocationAccess]
	-[HMFMessage(HMDXPC) isEntitledToProvideAccessorySetupPayload]
	-[HMFMessage(HMDXPC) isEntitledToProvideMatterSetupPayload]
	-[HMFMessage(HMDXPC) isEntitledForShortcutsAutomationAccess]
	-[HMFMessage(HMDXPC) isEntitledForSecureAccess]
	-[HMFMessage(HMDXPC) isEntitledForStateDump]
	-[HMFMessage(HMDXPC) isEntitledForAssistantIdentifiers]
	-[HMFMessage(HMDXPC) isEntitledForHomeLocationFeedbackAccess]
	-[HMFMessage(HMDXPC) sourcePid]
	-[HMFMessage(HMDXPC) companionAppBundleIdentifier]
	-[HMFMessage(HMDXPC) sendPolicy]
	-[HMFMessage(HMDXPC) homeManagerOptions]
	-[HMFMessage(HMDXPC) transactionResult]
	-[HMFMessage(HMDXPC) supportsRequiredFeature:]
	-[HMFMessage(HMDXPC) supportsRequestedFeature:]
	-[HMFMessage(HMDXPC) _supportsFeature:forCapabilitiesKey:]
	-[HMFMessage(HMDXPC) remoteSourceDevice]
	-[HMFMessage(HMDXPC) isLocationAuthorized]
	-[HMFMessage(HMDXPC) requiresHomeLocationEntitlement]
	-[HMFMessage(HMDXPC) matchingRemoteIdentityUserForHome:]
	-[HMFMessage(HMDXPC) userForHome:]
	-[HMFMessage(HMDXPC) isSingleReadWriteRequest]
	-[HMFMessage(HMDXPC) isSecureRemote]
	-[HMFMessage(HMDXPC) remoteSourceID]
	-[HMFMessage(HMDXPC) remoteUserPairingIdentity]
	-[HMFMessage(HMDXPC) remoteToID]
	-[HMFMessage(HMDXPC) remoteRestriction]
	-[HMFMessage(HMDXPC) remoteResponseRestriction]
	-[HMFMessage(HMDXPC) remoteSenderContext]

HMFMutableMessage(XPC)
	// class methods
	+[HMFMutableMessage(XPC) internalMessageWithName:messagePayload:]
	+[HMFMutableMessage(XPC) internalMessageWithName:messagePayload:responseHandler:]
	+[HMFMutableMessage(XPC) internalMessageWithName:destination:messagePayload:]

	// instance methods
	-[HMFMutableMessage(XPC) setRemote:]
	-[HMFMutableMessage(XPC) setInternal:]
	-[HMFMutableMessage(XPC) setRequiresSPIEntitlement]
	-[HMFMutableMessage(XPC) setRequiresSPIEntitlement:]
	-[HMFMutableMessage(XPC) setRequiresNoSPIEntitlement]
	-[HMFMutableMessage(XPC) setRequiresNoSPIEntitlement:]
	-[HMFMutableMessage(XPC) setRequiresSetupPayloadEntitlement]
	-[HMFMutableMessage(XPC) setRequiresMatterSetupPayloadEntitlement]
	-[HMFMutableMessage(XPC) setRequiresCameraClipsEntitlement]
	-[HMFMutableMessage(XPC) setRequiresMultiUserSetupEntitlement]
	-[HMFMutableMessage(XPC) setRequiresPersonManagerEntitlement]
	-[HMFMutableMessage(XPC) setSendPolicy:]
	-[HMFMutableMessage(XPC) setRequiresWalletKeyEntitlement]
	-[HMFMutableMessage(XPC) setTransactionResult:]
	-[HMFMutableMessage(XPC) setSecureRemote:]
	-[HMFMutableMessage(XPC) setRemoteSourceID:]
	-[HMFMutableMessage(XPC) setRemoteToID:]
	-[HMFMutableMessage(XPC) setRemoteRestriction:]
	-[HMFMutableMessage(XPC) setRemoteResponseRestriction:]
	-[HMFMutableMessage(XPC) setRemoteSenderContext:]

PHPerson(HMDPhotoLibrary)
	// instance methods
	-[PHPerson(HMDPhotoLibrary) createPhotoLibraryPerson]

PHFetchResult(HMDPhotoLibrary)
	// instance methods
	-[PHFetchResult(HMDPhotoLibrary) objects]
	-[PHFetchResult(HMDPhotoLibrary) faceCropDataByUUID]

HMCHIPAccessorySetupPayload(HMD)
	// instance methods
	-[HMCHIPAccessorySetupPayload(HMD) initWithCHIPSetupPayload:]
	-[HMCHIPAccessorySetupPayload(HMD) chipSetupPayload]

NSCoder(RemoteTransport)
	// instance methods
	-[NSCoder(RemoteTransport) hm_encodeArrayOfConditionalObjects:forKey:]
	-[NSCoder(RemoteTransport) hm_decodeArrayOfConditionalObjects:forKey:]
	-[NSCoder(RemoteTransport) hm_encodeSetOfConditionalObjects:forKey:]
	-[NSCoder(RemoteTransport) hm_decodeSetOfConditionalObjects:forKey:]
	-[NSCoder(RemoteTransport) hmd_isForRemoteTransport]
	-[NSCoder(RemoteTransport) hmd_isForRemoteTransportOnSameAccount]
	-[NSCoder(RemoteTransport) hmd_isForRemoteGatewayCoder]
	-[NSCoder(RemoteTransport) hmd_isForRemoteUserAdministrator]
	-[NSCoder(RemoteTransport) hmd_isForNonAdminSharedUser]
	-[NSCoder(RemoteTransport) hmd_user]
	-[NSCoder(RemoteTransport) hmd_isForSharedUser]
	-[NSCoder(RemoteTransport) hmd_dataVersion]
	-[NSCoder(RemoteTransport) hmd_supportedFeatures]
	-[NSCoder(RemoteTransport) hmd_isForLocalStore]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransport]
	-[NSCoder(RemoteTransport) hmd_message]
	-[NSCoder(RemoteTransport) hmd_homeManagerOptions]
	-[NSCoder(RemoteTransport) hmd_entitlements]
	-[NSCoder(RemoteTransport) hmd_applicationBundleIdentifier]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransportEntitledForSPIAccess]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransportAuthorizedForLocationAccess]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransportEntitledForHomeLocationAccess]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransportEntitledForAssistantIdentifiers]
	-[NSCoder(RemoteTransport) hmd_isForXPCTransportEntitledForHomeLocationFeedbackAccess]

AVOutputDevice(HomeKit)
	// class methods
	+[AVOutputDevice(HomeKit) shouldRestrictConnectionWithUserPrivilege:]

SAHAEntity(Logging)
	// instance methods
	-[SAHAEntity(Logging) shortDescription]

SAHABooleanValue(Logging)
	// instance methods
	-[SAHABooleanValue(Logging) shortDescription]

SAHAIntegerValue(Logging)
	// instance methods
	-[SAHAIntegerValue(Logging) shortDescription]

SAHAFloatValue(Logging)
	// instance methods
	-[SAHAFloatValue(Logging) shortDescription]

SAHAStringValue(Logging)
	// instance methods
	-[SAHAStringValue(Logging) shortDescription]

SAHAAttributeValue(Logging)
	// instance methods
	-[SAHAAttributeValue(Logging) shortDescription]

SAHAFilter(Logging)
	// instance methods
	-[SAHAFilter(Logging) shortDescription]

SAHAIdentifierListFilter(Logging)
	// instance methods
	-[SAHAIdentifierListFilter(Logging) shortDescription]

SAHASearchCriteriaFilter(Logging)
	// instance methods
	-[SAHASearchCriteriaFilter(Logging) shortDescription]

SAHAAction(Logging)
	// instance methods
	-[SAHAAction(Logging) shortDescription]

SAHAActionRequest(Logging)
	// instance methods
	-[SAHAActionRequest(Logging) shortDescription]

SAHAActionResult(Logging)
	// instance methods
	-[SAHAActionResult(Logging) shortDescription]

SAHACommand(Logging)
	// instance methods
	-[SAHACommand(Logging) shortDescription]

SAHACommandCompleted(Logging)
	// instance methods
	-[SAHACommandCompleted(Logging) contentDescription]
	-[SAHACommandCompleted(Logging) shortDescription]
	-[SAHACommandCompleted(Logging) headerDescription]

SAHACurrentHome(Logging)
	// instance methods
	-[SAHACurrentHome(Logging) shortDescription]

SBSRemoteAlertHandle(HMD)
	// instance methods
	-[SBSRemoteAlertHandle(HMD) activate]

ACAccount(HMDRemoteLoginMessages)
	// instance methods
	-[ACAccount(HMDRemoteLoginMessages) messagePayload]
	-[ACAccount(HMDRemoteLoginMessages) description]

HMPerson(HMI)
	// instance methods
	-[HMPerson(HMI) initWithHMIPerson:]
	-[HMPerson(HMI) createHMIPerson]

CLLocationManager(HomeLocation)
	// class methods
	+[CLLocationManager(HomeLocation) hm_isLocationAllowedForAuthorizationStatus:]
	+[CLLocationManager(HomeLocation) hm_hmdLocationAuthorizationFromCLAuthorizationStatus:]
	+[CLLocationManager(HomeLocation) hm_hmdRegionStateFromCLRegionState:]

CLRegion(HomeLocation)
	// class methods
	+[CLRegion(HomeLocation) shortDescription]

	// instance methods
	-[CLRegion(HomeLocation) privateDescription]
	-[CLRegion(HomeLocation) shortDescription]
	-[CLRegion(HomeLocation) description]
	-[CLRegion(HomeLocation) hm_description]

(HomeLocation)
	// class methods
	+[(HomeLocation) dictionaryByCombiningNonOverlappingDictionaries:]
	+[(HomeLocation) hmd_dictionaryWithActionExecutionError:]

	// instance methods
	-[(HomeLocation) hm_locationFromDataForKey:]
	-[(HomeLocation) hm_regionFromDataForKey:]
	-[(HomeLocation) hmd_isValidResponseForWriteRequest:naturalLightingEnabled:error:]
	-[(HomeLocation) hmd_valueOfCharacteristic:error:]
	-[(HomeLocation) hmd_responseByRemovingEntriesForCharacteristics:]

NSError(HomeKitCKError)
	// class methods
	+[NSError(HomeKitCKError) hmErrorWithCode:description:reason:suggestion:underlyingError:]
	+[NSError(HomeKitCKError) hmErrorWithCode:description:reason:suggestion:]
	+[NSError(HomeKitCKError) hmErrorWithCode:]
	+[NSError(HomeKitCKError) hmErrorWithCode:userInfo:]
	+[NSError(HomeKitCKError) hmInternalErrorWithCode:]
	+[NSError(HomeKitCKError) hmInternalErrorWithCode:underlyingError:]
	+[NSError(HomeKitCKError) hmPrivateErrorWithCode:]
	+[NSError(HomeKitCKError) hmInternalErrorWithCode:userInfo:]
	+[NSError(HomeKitCKError) hmPrivateErrorWithCode:underlyingError:]
	+[NSError(HomeKitCKError) hmPrivateErrorWithCode:description:underlyingError:]
	+[NSError(HomeKitCKError) errorWithSQLite3Context:]
	+[NSError(HomeKitCKError) errorWithSQLite3Context:statement:]
	+[NSError(HomeKitCKError) errorWithSQLite3Statement:]
	+[NSError(HomeKitCKError) hmd_HTTPMessageTransportErrorWithCode:]

	// instance methods
	-[NSError(HomeKitCKError) isHMError]
	-[NSError(HomeKitCKError) hmPublicError]
	-[NSError(HomeKitCKError) hmd_actualCKErrorFromCKErrorPartialFailure:]
	-[NSError(HomeKitCKError) hmd_conciseCKError]
	-[NSError(HomeKitCKError) hmd_hmErrorFromCKError]
	-[NSError(HomeKitCKError) hmd_isCKError]
	-[NSError(HomeKitCKError) hmd_isNonRecoverableCKError]
	-[NSError(HomeKitCKError) hmd_convertedCKError]

(Compression)
	// class methods
	+[(Compression) dataWithSQLite3ColumnNoCopy:column:]
	+[(Compression) dataWithSQLite3Column:column:]

	// instance methods
	-[(Compression) hm_stringInHexFormat]
	-[(Compression) hm_generateSHA1]
	-[(Compression) hm_generateSHA256]
	-[(Compression) hmd_compressedData]
	-[(Compression) hmd_uncompressedData]

HMHomePersonManagerSettings(HMD)
	// instance methods
	-[HMHomePersonManagerSettings(HMD) requiresPersistentStorage]
	-[HMHomePersonManagerSettings(HMD) createHMIExternalPersonManagerSettings]
	-[HMHomePersonManagerSettings(HMD) createHMIHomePersonManagerSettings]
	-[HMHomePersonManagerSettings(HMD) createHMPhotosPersonManagerSettings]
	-[HMHomePersonManagerSettings(HMD) createHMHomePersonManagerSettings]

CLCircularRegion(HMFObject)
	// instance methods
	-[CLCircularRegion(HMFObject) attributeDescriptions]
	-[CLCircularRegion(HMFObject) description]

CLBeaconRegion(HMFObject)
	// instance methods
	-[CLBeaconRegion(HMFObject) attributeDescriptions]
	-[CLBeaconRegion(HMFObject) description]

HMAccessoryCategory(HMDHAPMetadata)
	// class methods
	+[HMAccessoryCategory(HMDHAPMetadata) categoryWithIdentifier:]
	+[HMAccessoryCategory(HMDHAPMetadata) categoryIdentifierForCategory:]
	+[HMAccessoryCategory(HMDHAPMetadata) categoryWithCategoryIdentifier:]
	+[HMAccessoryCategory(HMDHAPMetadata) categoryForProductInfo:]
	+[HMAccessoryCategory(HMDHAPMetadata) categoryForProductClass:]

HMPhotosPersonManagerSettings(HMD)
	// instance methods
	-[HMPhotosPersonManagerSettings(HMD) requiresPersistentStorage]
	-[HMPhotosPersonManagerSettings(HMD) createHMIExternalPersonManagerSettings]
	-[HMPhotosPersonManagerSettings(HMD) createHMIHomePersonManagerSettings]
	-[HMPhotosPersonManagerSettings(HMD) createHMPhotosPersonManagerSettings]
	-[HMPhotosPersonManagerSettings(HMD) createHMHomePersonManagerSettings]

BMStoreStream(HomeKit)
HAPCharacteristic(Demo)
	// instance methods
	-[HAPCharacteristic(Demo) responseDelay]
	-[HAPCharacteristic(Demo) setResponseDelay:]

UARPAccessory(HMDHAPAccessory)
	// instance methods
	-[UARPAccessory(HMDHAPAccessory) redactedDescription]
	-[UARPAccessory(HMDHAPAccessory) initWithHMDHAPAccessory:]
	-[UARPAccessory(HMDHAPAccessory) availableSoftwareVersion]

AVOutputDeviceAuthorizedPeer(HAPPairingIdentity)
	// instance methods
	-[AVOutputDeviceAuthorizedPeer(HAPPairingIdentity) hmd_pairingIdentity]

HAPCharacteristicValueTransitionControlResponse(NaturalLighting)
	// instance methods
	-[HAPCharacteristicValueTransitionControlResponse(NaturalLighting) isNaturalLightingEnabledForCharacteristic:]

HMMLogEvent(CoreAnalytics)
	// instance methods
	-[HMMLogEvent(CoreAnalytics) bucketedDurationWithRoundInterval:]

(HomeKit)
	// class methods
	+[(HomeKit) stringWithSQLite3Column:column:]

	// instance methods
	-[(HomeKit) hm_generateSHA1]
	-[(HomeKit) stringByTransformingFirstWordUsingBlock:]
	-[(HomeKit) stringByCapitalizingFirstWord]
	-[(HomeKit) hm_truncatedNameString]
	-[(HomeKit) hm_containsAnyTextCheckingTypeInTypes:]

NSMapTable(HomeKit)
	// instance methods
	-[NSMapTable(HomeKit) hm_allKeys]

NSUUID(HomeKitClient)
	// class methods
	+[NSUUID(HomeKitClient) hm_uuid:identifierSalt:withSalts:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDFromBaseUUID:identifierSalt:withSalts:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDFromBaseUUID:identifierSalt:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDFromBaseUUID:withSalts:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDFromBaseUUID:]
	+[NSUUID(HomeKitClient) hm_setIdentifierSalt:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDForAssistantFromBaseUUID:withSalts:]
	+[NSUUID(HomeKitClient) hm_deriveUUIDForAssistantFromBaseUUID:]
	+[NSUUID(HomeKitClient) hm_setAssistantIdentifierSalt:]

	// instance methods
	-[NSUUID(HomeKitClient) hm_convertToData]

(HMDPrimaryElectionCoordinationAddOn)
	// instance methods
	-[(HMDPrimaryElectionCoordinationAddOn) hmd_residentDeviceForMeshNode:]
	-[(HMDPrimaryElectionCoordinationAddOn) hmd_residentWithIdentifier:]

HMFPairingIdentity(AppleMediaAccessory)
	// instance methods
	-[HMFPairingIdentity(AppleMediaAccessory) pbData]
	-[HMFPairingIdentity(AppleMediaAccessory) initWithProtoData:]

HMCHIPAccessoryPairing(HMD)
	// instance methods
	-[HMCHIPAccessoryPairing(HMD) initWithCHIPPluginPairing:]
	-[HMCHIPAccessoryPairing(HMD) chipPluginPairing]

HMMediaGroup(Assistant)
	// instance methods
	-[HMMediaGroup(Assistant) urlString]
	-[HMMediaGroup(Assistant) assistantObjectWithHome:]

APSConnection(HMDAPSConnection)
CKRecordID(HMDBackingStoreLocal)
	// class methods
	+[CKRecordID(HMDBackingStoreLocal) parseFromString:]

	// instance methods
	-[CKRecordID(HMDBackingStoreLocal) encodeForKey]

SZExtractor(HMFDigest)
	// class methods
	+[SZExtractor(HMFDigest) optionsForArchiveURL:digest:]

HMSoftwareUpdateDocumentation(NSBundle)
	// class methods
	+[HMSoftwareUpdateDocumentation(NSBundle) localizationsForBundle:]

	// instance methods
	-[HMSoftwareUpdateDocumentation(NSBundle) initWithBundle:]

HMIVideoAnalyzer(HMDCameraRecordingSessionFactory)
HMBLocalZoneMirrorInput(FirewallRuleManager)
	// class methods
	+[HMBLocalZoneMirrorInput(FirewallRuleManager) frmSyncCommitWithMirrorInput:options:error:]

	// instance methods
	-[HMBLocalZoneMirrorInput(FirewallRuleManager) frmSyncCommitWithOptions:error:]

HAPCharacteristicValueLinearDerivedTransitionPoint(NaturalLighting)
	// class methods
	+[HAPCharacteristicValueLinearDerivedTransitionPoint(NaturalLighting) transitionPointWithMinimumBrightness:minimumBrightnessColorTemperature:maximumBrightness:maximumBrightnessColorTemperature:targetCompletionDuration:]
	+[HAPCharacteristicValueLinearDerivedTransitionPoint(NaturalLighting) transitionPointWithPreviousTransitionPoint:nextTransitionPoint:timeElapsedSincePreviousTransitionPoint:minimumBrightness:maximumBrightness:]

	// instance methods
	-[HAPCharacteristicValueLinearDerivedTransitionPoint(NaturalLighting) colorTemperatureForBrightness:]

HMFVersion(HMDBackingStoreLocal)
	// instance methods
	-[HMFVersion(HMDBackingStoreLocal) privateDescription]
	-[HMFVersion(HMDBackingStoreLocal) isGreaterThanOrEqualTo:]
	-[HMFVersion(HMDBackingStoreLocal) isGreaterThan:]
	-[HMFVersion(HMDBackingStoreLocal) isLessThan:]
	-[HMFVersion(HMDBackingStoreLocal) isLessThanOrEqualTo:]

HAPCharacteristicValueTransitionControl(NaturalLighting)
	// instance methods
	-[HAPCharacteristicValueTransitionControl(NaturalLighting) naturalLightingActiveTransitionContextForCharacteristic:]
	-[HAPCharacteristicValueTransitionControl(NaturalLighting) naturalLightingEnabledForCharacteristic:]

HMSetupAccessoryPayload(Internal)
	// instance methods
	-[HMSetupAccessoryPayload(Internal) debugDescription]
	-[HMSetupAccessoryPayload(Internal) flagsDescription]

HMSetupAccessoryDescription(Internal)
	// instance methods
	-[HMSetupAccessoryDescription(Internal) debugDescription]
	-[HMSetupAccessoryDescription(Internal) matchesSetupID:serverIdentifier:]
	-[HMSetupAccessoryDescription(Internal) matchesAccessoryServer:]

FLFollowUpController(HMDFollowUpController)
FLFollowUpItem(HMDFollowUpItem)
FLFollowUpAction(HMDFollowUpAction)
RPCompanionLinkDevice(HomeKitDaemon)
	// instance methods
	-[RPCompanionLinkDevice(HomeKitDaemon) redactedDescription]

HMFaceprint(HMI)
	// instance methods
	-[HMFaceprint(HMI) initWithHMIFaceprint:]
	-[HMFaceprint(HMI) createHMIFaceprint]

HAPPairingIdentity(HMDUser)
	// class methods
	+[HAPPairingIdentity(HMDUser) hmd_pairingIdentityWithDictionary:]

	// instance methods
	-[HAPPairingIdentity(HMDUser) hmd_dictionaryEncoding]

HAPCharacteristicValueActiveTransitionContext(Validator)
	// instance methods
	-[HAPCharacteristicValueActiveTransitionContext(Validator) isValid]

HMPersonFaceCrop(HMI)
	// instance methods
	-[HMPersonFaceCrop(HMI) initWithHMIPersonFaceCrop:]
	-[HMPersonFaceCrop(HMI) createHMIPersonFaceCrop]

HMCameraActivityZone(HMI)
	// instance methods
	-[HMCameraActivityZone(HMI) createHMIActivityZoneWithIsInclusion:]

UARPAssetID(HMDAccessoryFirmwareUpdate)
	// instance methods
	-[UARPAssetID(HMDAccessoryFirmwareUpdate) softwareVersion]

IDSDevice(HMDAccounts)
	// instance methods
	-[IDSDevice(HMDAccounts) hmd_productInfo]
	-[IDSDevice(HMDAccounts) hmd_version]
	-[IDSDevice(HMDAccounts) hmd_capabilities]
	-[IDSDevice(HMDAccounts) hmd_handlesForService:]
	-[IDSDevice(HMDAccounts) hmd_preferredHandleForService:]

HAPCharacteristicValueTransition(NaturalLighting)
	// class methods
	+[HAPCharacteristicValueTransition(NaturalLighting) naturalLightingValueTransitionWithLightProfile:naturalLightingEnabled:startDate:dataSource:]
	+[HAPCharacteristicValueTransition(NaturalLighting) transitionPointsByCoalescingTransitionPoints:ofCurve:]
	+[HAPCharacteristicValueTransition(NaturalLighting) updateTransition:withCurve:brightnessCharacteristic:millisecondsElapsedSinceStartOfDay:transitionStartTimeInMilliseconds:]
	+[HAPCharacteristicValueTransition(NaturalLighting) canCoalesceTransitionPoint1:transitionPoint2:ofCurve:]

	// instance methods
	-[HAPCharacteristicValueTransition(NaturalLighting) naturalLightingActiveTransitionContextForCharacteristic:]
	-[HAPCharacteristicValueTransition(NaturalLighting) naturalLightingActiveTransitionContextLightProfile:]

CLLocation(HMFObject)
	// class methods
	+[CLLocation(HMFObject) shortDescription]

	// instance methods
	-[CLLocation(HMFObject) attributeDescriptions]
	-[CLLocation(HMFObject) privateDescription]
	-[CLLocation(HMFObject) shortDescription]
	-[CLLocation(HMFObject) description]

HMFNetService(HMDHTTPClientMessageTransport)
	// instance methods
	-[HMFNetService(HMDHTTPClientMessageTransport) hmd_sessionIdentifier]

_DKEventStream(Logging)
	// instance methods
	-[_DKEventStream(Logging) shortDescription]

_DKEvent(Logging)
	// instance methods
	-[_DKEvent(Logging) shortDescription]

01 00 0800 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccount 
01 00 0800 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 0c00 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFPreferences 
01 00 0c00 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSecurityConnection 
01 00 0c00 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSettingsConnection 
01 00 0c00 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriHomeAutomationBackgroundRequest 
01 00 0c00 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriHomeAutomationRequestInfo 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAccountManager 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAnisetteData 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAnisetteProvisioningController 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAppleIDAuthenticationContext 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKAppleIDAuthenticationController 
01 00 0f00 /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit: AKDevice 
01 00 0a00 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSAuthenticateOptions 
01 00 0a00 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSAuthenticateRequest 
01 00 0a00 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSAuthenticateTask 
01 00 0b00 /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService: APSConnection 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVAudioClient 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCAudioStream 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCMediaStreamConfig 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCNetworkAddress 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCPacketFilterRTP 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCPacketRelay 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCPacketRelayConnection 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCRemoteVideoClient 
01 00 0d00 /System/Library/PrivateFrameworks/AVConference.framework/AVConference: AVCVideoStream 
01 00 0e00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputDevice 
01 00 0e00 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputDeviceAuthorizedPeer 
01 00 3c00 /System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience: AVSystemController 
01 00 5b00 /System/Library/PrivateFrameworks/WirelessDiagnostics.framework/WirelessDiagnostics: AWDServerConnection 
01 00 0700 /System/Library/PrivateFrameworks/BackgroundSystemTasks.framework/BackgroundSystemTasks: BGRepeatingSystemTaskRequest 
01 00 0700 /System/Library/PrivateFrameworks/BackgroundSystemTasks.framework/BackgroundSystemTasks: BGSystemTaskScheduler 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMEventBase 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientAccessoryControlEvent 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientAccessoryControlStream 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientActionSetEvent 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientActionSetStream 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientBase 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientMediaAccessoryControlEvent 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMHomeKitClientMediaAccessoryControlStream 
01 00 1100 /System/Library/PrivateFrameworks/BiomeFoundation.framework/BiomeFoundation: BMPublicStreamUtilities 
01 00 1200 /System/Library/PrivateFrameworks/BiomeStorage.framework/BiomeStorage: BMStoreConfig 
01 00 1300 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMStoreStream 
01 00 1200 /System/Library/PrivateFrameworks/BiomeStorage.framework/BiomeStorage: BMStreamDatastorePruner 
01 00 1000 /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard: BSPortDeathWatcher 
01 00 4a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAContext 
01 00 1500 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARSessionStatus 
01 00 4a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 1700 /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin: CHIPAccessoryServer 
01 00 1700 /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin: CHIPAccessoryServerBrowser 
01 00 1700 /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin: CHIPPluginAccessorySetupPayload 
01 00 1700 /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin: CHIPPluginMutableAccessorySetupPayload 
01 00 1700 /System/Library/PrivateFrameworks/CHIPPlugin.framework/CHIPPlugin: CHIPPluginPairing 
01 00 1800 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSTimelineController 
01 00 1800 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSWidgetConfigurationReader 
01 00 0200 /System/Library/PrivateFrameworks/CoreIDCredBuilder.framework/CoreIDCredBuilder: CIDCBuilderSignatureDetails 
01 00 0200 /System/Library/PrivateFrameworks/CoreIDCredBuilder.framework/CoreIDCredBuilder: CIDCElement 
01 00 0200 /System/Library/PrivateFrameworks/CoreIDCredBuilder.framework/CoreIDCredBuilder: CIDCPayloadBuilder 
01 00 0200 /System/Library/PrivateFrameworks/CoreIDCredBuilder.framework/CoreIDCredBuilder: CIDCPayloadBuilderDetails 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKAsset 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKContainer 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKContainerID 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKContainerOptions 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchDatabaseChangesOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchRecordZoneChangesConfiguration 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchRecordZoneChangesOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchRecordZonesOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchRecordsOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKFetchSubscriptionsOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKModifyRecordZonesOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKModifyRecordsOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKModifySubscriptionsOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKOperationConfiguration 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKOperationGroup 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKQuery 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKQueryOperation 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKRecord 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKRecordID 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKRecordZone 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKRecordZoneID 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKRecordZoneSubscription 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKServerChangeToken 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKStreamingAssetAppendContext 
01 00 1a00 /System/Library/Frameworks/CloudKit.framework/CloudKit: CKUserIdentityLookupInfo 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLBeaconRegion 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLCircularRegion 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocationManager 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLRegion 
01 00 1b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 1b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 1b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 1b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNPhoneNumber 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshAddOn 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshCommand 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshController 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshNotification 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshRequest 
01 00 1900 /System/Library/PrivateFrameworks/CoordinationCore.framework/CoordinationCore: COMeshResponse 
01 00 0300 /System/Library/PrivateFrameworks/CBORLibrary.framework/CBORLibrary: COSEKey 
01 00 2600 /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight: CSSearchableIndex 
01 00 2800 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBLEAdvertiser 
01 00 2800 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUBLEScanner 
01 00 2800 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CULiveAction 
01 00 2800 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWACSession 
01 00 2800 /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils: CUWiFiScanner 
01 00 1400 /System/Library/Frameworks/CallKit.framework/CallKit: CXCallObserver 
01 00 2a00 /System/Library/PrivateFrameworks/FamilyCircle.framework/FamilyCircle: FAFetchFamilyCircleRequest 
01 00 1f00 /System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp: FLFollowUpAction 
01 00 1f00 /System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp: FLFollowUpController 
01 00 1f00 /System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp: FLFollowUpItem 
01 00 2b00 /System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice: FMDFMIPManager 
01 00 2c00 /System/Library/PrivateFrameworks/FMF.framework/FMF: FMFSession 
01 00 2f00 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOAlmanac 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAP2TLVThreadControl 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAP2TLVThreadNetworkCredentials 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAP2TLVThreadOperationTypeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeCharacterSetWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeConfiguration 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeControl 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeControlRequest 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeControlResponse 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeFlagsWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeOperationTypeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessCodeResponseStatusWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessory 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryInfo 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryPairingRequest 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServer 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerBTLE 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerBrowser 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerBrowserBTLE 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerBrowserHAP2Adapter 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerBrowserIP 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerHAP2Adapter 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryServerIP 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPAccessoryWakeTuple 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPArrayWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPBTLECentralManager 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristic 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicConfigurationRequestTuple 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicContextData 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicNotificationContext 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicResponseTuple 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueActiveTransitionContext 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueLinearDerivedTransition 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueLinearDerivedTransitionPoint 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueRange 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransition 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionControl 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionControlResponse 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionControllerContext 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionEndBehaviorWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionFetch 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionStart 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicValueTransitionState 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPCharacteristicWriteRequestTuple 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamHAPAccessoryPayload 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamHAPControllerPayload 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportCommandWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportInterruptPayload 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportProtocolWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportSetup 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportSetupResponse 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataStreamTransportSupportedConfiguration 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDataWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPDeviceID 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPFirmwareUpdateReadiness 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPFirmwareUpdateStatus 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPFragmentationPacket 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPFragmentationStream 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPHardwareFinish 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPMetadata 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPMetadataTuple 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPMetricsDispatcher 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPMetricsPairVerifyEvent 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPMutableKeychainItem 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessControl 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessDeviceCredentialKeyRequest 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessKeyStateWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessKeyTypeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessOperationTypeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCAccessReaderKeyRequest 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNFCReaderNotification 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNotification 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNumberParser 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPNumberWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPOperatingStateResponse 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPPairSetupSession 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPPairingIdentity 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSelectedAudioStreamConfiguration 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPStringWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSupportedAudioStreamConfigurations 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSupportedCharacteristicValueTransitionConfiguration 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSupportedDiagnosticsSnapshot 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSuspendedAccessoryIP 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPSystemKeychainStore 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPTLVBase 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPTLVCreator 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPTLVFloatNumberValue 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPTLVSignedNumberValue 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPTLVUnsignedNumberValue 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPThreadNetworkMetadata 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPUUIDWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPWiFiConfigurationControl 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPWiFiConfigurationOperationTypeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPWiFiSecurityModeWrapper 
01 00 2100 /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP: HAPWiFiStationConfiguration 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeAddRequestValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeConstraints 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeModificationResponseValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeRemoveRequestValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeUpdateRequestValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeUserInformationValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessCodeValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryAccessCodeConstraintsFetchResponseValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryAccessCodeFetchResponseValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryAccessCodeValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryCapabilities 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryCategory 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryCollectionSettingItem 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryDiagnosticsMetadata 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryDiagnosticsOptions 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryEventTopic 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryInfoAccount 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryInfoPrimaryUser 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryInfoProtoPublicPairingIdentity 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryInfoSoftwareVersion 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessoryInfoWifiInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySelectionSettingItem 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingConstraint 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingFetchResult 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsAdapter 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsDataSource 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsFetchRequestMessagePayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsFetchResponseMessagePayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsMessenger 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySettingsUpdateRequestMessagePayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySetupCompletedInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySetupCoordinator 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySetupManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySetupRequest 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAccessorySetupResult 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAnnounceUserSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMAssistantAccessControl 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBAction 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudDatabase 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudDatabaseConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudPushHandler 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudZone 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudZoneConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudZoneID 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBCloudZoneStateModel 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBLocalDatabase 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBLocalZoneMirrorInput 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModel 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelCloudReference 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelContainer 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelCountMatchesQuery 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelField 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelFieldOption 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelInfiniteQuery 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelQueryArgument 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBModelReference 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableAction 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableCloudDatabaseConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableCloudZoneConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableLocalDatabaseConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableLocalZoneConfiguration 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableModelContainer 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBMutableModelField 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBProcessingOptions 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBShareInvitation 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBShareInvitationContext 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBShareUserID 
01 00 3200 /System/Library/PrivateFrameworks/HomeKitBackingStore.framework/HomeKitBackingStore: HMBStreamingAsset 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMBooleanSetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMBoundedIntegerSetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMBulletinObjectTuple 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCHIPAccessoryPairing 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCHIPAccessorySetupPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCHIPEcosystem 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCHIPHome 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraActivityZone 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraBulletinBoardNotificationCondition 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraBulletinBoardSmartNotification 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClip 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipAssetContext 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipEncryptionContext 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipEncryptionManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipSignificantEvent 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipVideoDataSegment 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraClipVideoInitSegment 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraObjectFetchServer 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraRecordingReachabilityEvent 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraSignificantEvent 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraSignificantEventReasonNotificationCondition 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraStreamPreferences 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCameraUserNotificationSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMCharacteristicWriteAction 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEDelegatingEventRouter 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEEvent 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEEventInfo 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEEventMetadata 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMELastEventStore 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEMemoryEventBus 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEMessageDatagramClient 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEMessageDatagramServer 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEPersistentConnectionServer 
01 00 3400 /System/Library/PrivateFrameworks/HomeKitEventRouter.framework/HomeKitEventRouter: HMEProtoEventInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMEventTopicHelper 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFActivity 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFAssertion 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFAttributeDescription 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFBlockOperation 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFBoolean 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFCache 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFDigest 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFDispatchContext 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFDumpCategory 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFExponentialBackoffTimer 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFFuture 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFHTTPClient 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFHTTPClientConfiguration 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFHTTPRequestHandler 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFHTTPServer 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFKey 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFLocationAuthorization 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFLogEventSession 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFLogEventSessionVoucher 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMACAddress 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMemoryMonitor 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessage 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessageDestination 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessageDispatcher 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessageFilter 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessagePolicy 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMessageTransport 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMutableHTTPRequest 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFMutableMessage 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFNetAddress 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFNetManager 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFNetMonitor 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFNetService 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFNetServiceBrowser 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFOSTransaction 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFObject 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMFObjectCacheHMAccessoryCategory 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFObjectCacheNSString 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFObjectCacheNSUUID 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFObjectObserver 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFOperation 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFOperationBudget 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPairingIdentity 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPairingKey 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPowerLogger 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPowerManager 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPreference 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPreferences 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFPrivateObjectFormatter 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFProcessInfo 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFProductInfo 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFScheduler 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFSoftwareVersion 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFStagedValue 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFStringIndentation 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFSystemInfo 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFSystemPreference 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFTimer 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFVersion 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFWiFiManager 
01 00 3000 /System/Library/PrivateFrameworks/HMFoundation.framework/HMFoundation: HMFWiFiNetworkInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMFaceClassification 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMFaceCrop 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMFaceprint 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHTMLDocument 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHome 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeAccessCodeValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeEventTopic 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeFetchLightProfileSettingsResult 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeInvitationData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomePersonManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomePersonManagerSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeWalletKey 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMHomeWalletKeyDeviceState 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIAnalysisStateManager 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIAnalysisStateUpdate 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMICamera 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMICameraActivityZone 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIExternalPersonManager 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIFaceCrop 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIFaceprint 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIFeedback 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIHomePersonManager 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIMutableExternalPersonManagerSettings 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIMutableHomePersonManagerSettings 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIPerson 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIPersonFaceCrop 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIPoint 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMISystemResourceUsageMonitor 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzer 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerConfiguration 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerDynamicConfiguration 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventFace 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventMotion 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventPackage 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventPerson 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventPet 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoAnalyzerEventVehicle 
01 00 3100 /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI: HMIVideoFragment 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMImmutableSettingChangeEvent 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMImmutableStringSetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMIncomingHomeInvitationData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMLanguageSetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMLanguageValueListSetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMLightProfileSettings 
01 00 3500 /System/Library/PrivateFrameworks/HomeKitMetrics.framework/HomeKitMetrics: HMMHomeLogEvent 
01 00 3500 /System/Library/PrivateFrameworks/HomeKitMetrics.framework/HomeKitMetrics: HMMIntervalMapper 
01 00 3500 /System/Library/PrivateFrameworks/HomeKitMetrics.framework/HomeKitMetrics: HMMLogEvent 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMManagedConfigurationProfileInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMatterTopology 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaDestination 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaDestinationControllerData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroup 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupCreateRequestPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupProtoMediaDestination 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupProtoMediaDestinationAggregateData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupProtoMediaDestinationControllerData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupProtoMediaGroupData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaGroupUpdateRequestPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaSystemBuilderPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaSystemData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMediaSystemRole 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMultiUserSettingsForMetrics 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableAccessorySettingsPartialFetchFailureInformation 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableCHIPVendor 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableCameraBulletinBoardNotificationCondition 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableCameraUserNotificationSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableHomePersonManagerSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutablePerson 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutablePersonFaceCrop 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutablePhotosPersonManagerSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableReportContext 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableSetupAccessoryPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableUserHomeAccessSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMMutableXPCMessageTransportConfiguration 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMOutgoingHomeInvitationData 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPBActionSet 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPBMetadataCategory 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPBMetadataCharacteristic 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPBMetadataService 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPerson 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPersonFaceCrop 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPersonLink 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPersonSettingsManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPhotosPersonManager 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPhotosPersonManagerSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPlainTextDocument 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMPresenceEventActivation 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMRemovedUserInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMResidentCapabilities 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingBooleanValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingIntegerValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingLanguageValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingStringValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSettingVersionValue 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSetupAccessoryDescription 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSetupAccessoryPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSiriEndpointApplyOnboardingSelectionsPayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSiriEndpointApplyOnboardingSelectionsResponsePayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSiriEndpointDeleteSiriHistoryMessagePayload 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSiriEndpointProfilesMessenger 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSoftwareUpdateDocumentation 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSoftwareUpdateDocumentationMetadata 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSupportedAccessoryDiagnostics 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMSymptom 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMThreadNetworkMetadata 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserActionPrediction 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserCloudShareRepairInfo 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserHomeAccessSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserInviteInformation 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserPresenceAuthorization 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMUserPresenceCompute 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMXPCEventRouterProtoChangeRegistrationsMessage 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: HMXPCEventRouterProtoEventsMessage 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSAccount 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSActivityMonitor 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSCurrentServerTime 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDevice 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSDeviceConnection 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSFirewallEntry 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSIDQueryController 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSServerBag 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSSession 
01 00 3600 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSURI 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INControlHomeIntent 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INHomeAction 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INHomeContent 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INHomeFilter 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INInteraction 
01 00 3a00 /System/Library/Frameworks/Intents.framework/Intents: INSpeakableString 
01 00 3900 /System/Library/PrivateFrameworks/InstallCoordination.framework/InstallCoordination: IXAppInstallCoordinator 
01 00 2500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationExtensionRecord 
01 00 2500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 2500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 2500 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 4100 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAsset 
01 00 4100 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAssetQuery 
01 00 4100 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MADownloadOptions 
01 00 3b00 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfile 
01 00 3b00 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 4000 /System/Library/PrivateFrameworks/MFAAuthentication.framework/MFAAuthentication: MFAACertificateManager 
01 00 4000 /System/Library/PrivateFrameworks/MFAAuthentication.framework/MFAAuthentication: MFAATokenManager 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCAssistantCommand 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCAssistantConnection 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCAssistantDiscovery 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCAssistantRemoteControlDestination 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerPath 
01 00 3d00 /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore: MPCPlayerRequest 
01 00 3e00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPPlaybackArchive 
01 00 3e00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRequestResponseController 
01 00 3f00 /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote: MRAVOutputDevice 
01 00 4400 /System/Library/PrivateFrameworks/NetAppsUtilities.framework/NetAppsUtilities: NAFuture 
01 00 4400 /System/Library/PrivateFrameworks/NetAppsUtilities.framework/NetAppsUtilities: NAPromise 
01 00 4400 /System/Library/PrivateFrameworks/NetAppsUtilities.framework/NetAppsUtilities: NAScheduler 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBackgroundActivityScheduler 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCoder 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSComparisonPredicate 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantFloatNumber 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDataDetector 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateInterval 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSExpression 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFormatter 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSListFormatter 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 6000 /usr/lib/libobjc.A.dylib: NSObject 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOutputStream 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCredential 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 6300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 2d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 4900 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 4800 /System/Library/Frameworks/Photos.framework/Photos: PHFace 
01 00 4800 /System/Library/Frameworks/Photos.framework/Photos: PHFaceCrop 
01 00 4800 /System/Library/Frameworks/Photos.framework/Photos: PHFetchResult 
01 00 4800 /System/Library/Frameworks/Photos.framework/Photos: PHPerson 
01 00 4800 /System/Library/Frameworks/Photos.framework/Photos: PHPhotoLibrary 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKAddHomeKeyPassConfiguration 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKAssertion 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKExpressPassInformation 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKFileDataAccessor 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPass 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPassLibrary 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPaymentPass 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPaymentService 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKSecureElement 
01 00 0100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKWalletVisibility 
01 00 4700 /System/Library/PrivateFrameworks/PairedSync.framework/PairedSync: PSYSyncCoordinator 
01 00 4c00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessHandle 
01 00 4c00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessIdentifier 
01 00 4c00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessMonitor 
01 00 4c00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessPredicate 
01 00 4c00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessStateDescriptor 
01 00 4b00 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPClient 
01 00 4b00 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkClient 
01 00 4b00 /System/Library/PrivateFrameworks/Rapport.framework/Rapport: RPCompanionLinkDevice 
01 00 2400 /System/Library/PrivateFrameworks/CoreRoutine.framework/CoreRoutine: RTRoutineManager 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAAction 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAActionRequest 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAActionResult 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAAttributeValue 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHABooleanValue 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHACommand 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHACommandCompleted 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHACurrentHome 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAEntity 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAFilter 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAFloatValue 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAIdentifierListFilter 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAIntegerValue 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHASceneAction 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHASearchCriteriaFilter 
01 00 4d00 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAHAStringValue 
01 00 5100 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertConfigurationContext 
01 00 5100 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertDefinition 
01 00 5100 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandle 
01 00 5300 /System/Library/PrivateFrameworks/SymptomDiagnosticReporter.framework/SymptomDiagnosticReporter: SDRDiagnosticReporter 
01 00 4f00 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFClient 
01 00 4f00 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFDeviceDiscovery 
01 00 5500 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STDynamicActivityAttributionPublisher 
01 00 5200 /System/Library/PrivateFrameworks/StreamingZip.framework/StreamingZip: SZExtractor 
01 00 5700 /System/Library/Frameworks/ThreadNetwork.framework/ThreadNetwork: THClient 
01 00 2700 /System/Library/PrivateFrameworks/CoreUARP.framework/CoreUARP: UARPAccessory 
01 00 2700 /System/Library/PrivateFrameworks/CoreUARP.framework/CoreUARP: UARPAssetID 
01 00 2700 /System/Library/PrivateFrameworks/CoreUARP.framework/CoreUARP: UARPController 
01 00 2700 /System/Library/PrivateFrameworks/CoreUARP.framework/CoreUARP: UARPSupportedAccessory 
01 00 5800 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserManager 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationAction 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationActionIcon 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationAttachment 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationCategory 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationSound 
01 00 5900 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
01 00 5a00 /System/Library/PrivateFrameworks/VoiceShortcutClient.framework/VoiceShortcutClient: VCVoiceShortcutClient 
01 00 1e00 /System/Library/PrivateFrameworks/CoreDuetContext.framework/CoreDuetContext: _CDClientContext 
01 00 2200 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: _CLSignificantRegion 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEvent 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEventQuery 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKEventStream 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKHomeKitAccessoryControlIdentifier 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKHomeKitSceneIdentifier 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKKnowledgeStore 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKMetadataHomeKitAccessoryControl 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKMetadataHomeKitScene 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKQuery 
01 00 1d00 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _DKSystemEventStreams 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: _HMAccessorySetting 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: _HMCameraUserSettings 
01 00 6400 /System/Library/Frameworks/HomeKit.framework/HomeKit: _HMMutableCameraUserSettings 
