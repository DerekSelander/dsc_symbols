|| __DATA.__data _VUIJSMediaPlayerName
|| __DATA.__data _VUIPlaybackManagerIsPIPingDidChange
|| __DATA.__data _VUIPlaybackManagerIsPlaybackUIBeingShownDidChange
|| __DATA.__data _VUIPlaybackManagerNotificationKeyDisplaySize
|| __DATA.__data _VUIPlaybackManagerNotificationKeyIsPIPing
|| __DATA.__data _VUIPlaybackManagerNotificationKeyPlayer
|| __DATA.__data _VUIPlaybackManagerSeekReasonKey
|| __DATA.__data _VUIPlaybackManagerVideoDisplaySizeDidChange
|| __DATA.__data _VUIPlaybackManagerWillSeekToTimeNotification
|| __DATA.__data _VUIPlistDatabaseItemDownloadStateDownloaded
|| __DATA.__data _VUIPlistDatabaseItemDownloadStateDownloading
|| __DATA.__data _VUIPlistDatabaseItemDownloadStateNotDownloaded
|| __DATA.__data _VUIPlistMediaEntityPropertyDidChange
|| __DATA.__data _VUIPlistMediaEntityPropertyDidChangePropertyNameKey
|| __DATA.__data _VUIPlistMediaEntityPropertyDidChangePropertyValueKey
|| __DATA.__objc_data _OBJC_CLASS_$_VUIAccessViewController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIAppIconImageService
|| __DATA.__objc_data _OBJC_CLASS_$_VUIAppInstallerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIApplicationViewController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIAppsGridViewController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIAuthenticationManager
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDebugViewController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextData
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextDataConfirmationDialog
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextDataMovie
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextDataMovieBundle
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextDataSiriSearch
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentContextDataTVShow
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentPreFetchedData
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentPreFetchedDataPostPlay
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentUIConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentUIConfigurationFormSheet
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentUIConfigurationModal
|| __DATA.__objc_data _OBJC_CLASS_$_VUIDocumentUIConfigurationPopover
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaCollection
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntitiesFetchController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntitiesFetchControllerResult
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntity
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityFetchRequest
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityFetchResponse
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityFetchResponseChanges
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityImageLoadParamsFactory
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityPreflightManager
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaEntityType
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaItemCredits
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaItemEntityTypesFetchController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaItemEntityTypesFetchControllerResult
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaItemEntityTypesFetchResponse
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaLibraryApplicationController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaLibraryFetchController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaLibraryFetchControllerQueue
|| __DATA.__objc_data _OBJC_CLASS_$_VUIMediaPlayerImageLoader
|| __DATA.__objc_data _OBJC_CLASS_$_VUIOfferUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_VUIOpenURLHandler
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPerfMetricsAppLaunchController
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPlistMediaDatabase
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPlistMediaDatabaseEntity
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPlistMediaDatabaseItem
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPlistMediaDatabaseSeason
|| __DATA.__objc_data _OBJC_CLASS_$_VUIPlistMediaDatabaseShow
|| __DATA.__objc_data _OBJC_CLASS_$_VUIRoundButton
|| __DATA.__objc_data _OBJC_CLASS_$_VUIStoreAcquisition
|| __DATA.__objc_data _OBJC_CLASS_$_VUIStoreAcquisitionProperties
|| __DATA.__objc_data _OBJC_CLASS_$_VUIStoreAuxMediaItem
|| __DATA.__objc_data _OBJC_CLASS_$_VUIUpNextRequestManager
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIAccessViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIAppIconImageService
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIAppInstallerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIApplicationViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIAppsGridViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIAuthenticationManager
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDebugViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextData
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextDataConfirmationDialog
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextDataMovie
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextDataMovieBundle
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextDataSiriSearch
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentContextDataTVShow
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentPreFetchedData
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentPreFetchedDataPostPlay
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentUIConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentUIConfigurationFormSheet
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentUIConfigurationModal
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIDocumentUIConfigurationPopover
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaCollection
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntitiesFetchController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntitiesFetchControllerResult
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityFetchRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityFetchResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityFetchResponseChanges
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityImageLoadParamsFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityPreflightManager
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaEntityType
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaItemCredits
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaItemEntityTypesFetchController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaItemEntityTypesFetchControllerResult
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaItemEntityTypesFetchResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaLibraryApplicationController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaLibraryFetchController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaLibraryFetchControllerQueue
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIMediaPlayerImageLoader
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIOfferUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPerfMetricsAppLaunchController
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPlistMediaDatabase
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPlistMediaDatabaseEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPlistMediaDatabaseItem
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPlistMediaDatabaseSeason
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIPlistMediaDatabaseShow
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIRoundButton
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIStoreAcquisition
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIStoreAcquisitionProperties
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIStoreAuxMediaItem
|| __DATA.__objc_data _OBJC_METACLASS_$_VUIUpNextRequestManager
|| __DATA_CONST.__const _VUIAccessOptionsAccountKey
|| __DATA_CONST.__const _VUIAccessOptionsBodyKey
|| __DATA_CONST.__const _VUIAccessOptionsFooterKey
|| __DATA_CONST.__const _VUIAccessOptionsNewVPPAConsentPromptKey
|| __DATA_CONST.__const _VUIAccessOptionsShouldDenyOnCancelKey
|| __DATA_CONST.__const _VUIAccessOptionsSuppressWelcomeVideoAddOnOptIn
|| __DATA_CONST.__const _VUIAccessOptionsTitleKey
|| __DATA_CONST.__const _VUIAccessOptionsUpdateVPPAStateRequired
|| __DATA_CONST.__const _VUIAcquireURLBagKey
|| __DATA_CONST.__const _VUIAttributeKeyChannelID
|| __DATA_CONST.__const _VUIAttributeKeyDebugIdentifier
|| __DATA_CONST.__const _VUIAttributeKeyDocumentRef
|| __DATA_CONST.__const _VUIAttributeKeyGroup
|| __DATA_CONST.__const _VUIAttributeKeyImg_AlignLogoToLeftIfRTL
|| __DATA_CONST.__const _VUIAttributeKeyImg_CropCode
|| __DATA_CONST.__const _VUIAttributeKeyImg_Format
|| __DATA_CONST.__const _VUIAttributeKeyImg_IsTemplated
|| __DATA_CONST.__const _VUIAttributeKeyIsFavorited
|| __DATA_CONST.__const _VUIAttributeKeySupportsProductBrowser
|| __DATA_CONST.__const _VUIAttributeKeyType
|| __DATA_CONST.__const _VUIAttributeKeyUpdateEvents
|| __DATA_CONST.__const _VUIAttributeKeyViewSource
|| __DATA_CONST.__const _VUIAttributeThemeValueDark
|| __DATA_CONST.__const _VUIAttributeThemeValueLight
|| __DATA_CONST.__const _VUIAttributeTypeTabItems
|| __DATA_CONST.__const _VUIAttributeTypeValueChannel
|| __DATA_CONST.__const _VUIAttributeTypeValueCheckmark
|| __DATA_CONST.__const _VUIAttributeTypeValueEqualPadding
|| __DATA_CONST.__const _VUIAttributeTypeValuePlay
|| __DATA_CONST.__const _VUIAttributeTypeValueRentalExpiration
|| __DATA_CONST.__const _VUIAttributeTypeValueTransaction
|| __DATA_CONST.__const _VUIAttributeTypeValueUpNext
|| __DATA_CONST.__const _VUIAuthenticationManagerAccountStoreDidChangeNotification
|| __DATA_CONST.__const _VUIBannerKeyAvailabilityImage
|| __DATA_CONST.__const _VUIBannerKeyAvailabilityText
|| __DATA_CONST.__const _VUIBannerKeyComingSoonText
|| __DATA_CONST.__const _VUIBannerKeyEpisodeNumberTitle
|| __DATA_CONST.__const _VUIBannerKeyEpisodeNumberTitleAbbreviated
|| __DATA_CONST.__const _VUIBannerKeyPadNarrow
|| __DATA_CONST.__const _VUIBannerKeyPadStandard
|| __DATA_CONST.__const _VUIBannerKeyPadUberImage
|| __DATA_CONST.__const _VUIBannerKeyPadWide
|| __DATA_CONST.__const _VUIBannerKeyPhoneNarrow
|| __DATA_CONST.__const _VUIBannerKeyPhoneStandard
|| __DATA_CONST.__const _VUIBannerKeyPhoneUberImage
|| __DATA_CONST.__const _VUIBannerKeyPhoneWide
|| __DATA_CONST.__const _VUIBannerKeyTVUberImage
|| __DATA_CONST.__const _VUIBannerKeyUberImage
|| __DATA_CONST.__const _VUIBannerKeyUberImageAspectRatios
|| __DATA_CONST.__const _VUIBannerKeyUberImageCropCodes
|| __DATA_CONST.__const _VUIBannerKeyUberImagePlaceHolder
|| __DATA_CONST.__const _VUICanvasPrefetchDataKeyDataItems
|| __DATA_CONST.__const _VUICanvasPrefetchDataKeyInheritParentDataSource
|| __DATA_CONST.__const _VUIConfirmationDialogTypeFavoritesAdded
|| __DATA_CONST.__const _VUIConfirmationDialogTypeFavoritesRemoved
|| __DATA_CONST.__const _VUIConfirmationDialogTypeSubscribed
|| __DATA_CONST.__const _VUIConfirmationDialogTypeUpNextAdded
|| __DATA_CONST.__const _VUIConfirmationDialogTypeUpNextRemoved
|| __DATA_CONST.__const _VUIContextDictionaryKeyDocumentRef
|| __DATA_CONST.__const _VUIContextDictionaryKeyDocumentRefContext
|| __DATA_CONST.__const _VUIContextDictionaryKeyDocumentRefData
|| __DATA_CONST.__const _VUIContextDictionaryKeyEventTimeStamp
|| __DATA_CONST.__const _VUIContextDictionaryKeyIsHandled
|| __DATA_CONST.__const _VUIContextDictionaryKeyLoadDocumentImmediately
|| __DATA_CONST.__const _VUIDataKeyDataSource
|| __DATA_CONST.__const _VUIDataKeyDisableInProductBrowser
|| __DATA_CONST.__const _VUIDataKeyImageColor
|| __DATA_CONST.__const _VUIDataKeyImageTheme
|| __DATA_CONST.__const _VUIDataKeyPadImage
|| __DATA_CONST.__const _VUIDataKeyPhoneImage
|| __DATA_CONST.__const _VUIDataKeyText
|| __DATA_CONST.__const _VUIDataKeyThemeValueDark
|| __DATA_CONST.__const _VUIDataKeyThemeValueLight
|| __DATA_CONST.__const _VUIDataKeyTitle
|| __DATA_CONST.__const _VUIDefaultsEnableDebugUI
|| __DATA_CONST.__const _VUIDefaultsEnableDemoMode
|| __DATA_CONST.__const _VUIDefaultsEnableMetricsExpandedLogging
|| __DATA_CONST.__const _VUIDefaultsEnableMetricsLogging
|| __DATA_CONST.__const _VUIDeviceMediaLibraryUpdateStateDidChangeNotification
|| __DATA_CONST.__const _VUIDeviceMediaLibraryUpdateStateDidChangeUserInfoKeyIsInitialUpdateInProgress
|| __DATA_CONST.__const _VUIDeviceMediaLibraryUpdateStateDidChangeUserInfoKeyIsUpdating
|| __DATA_CONST.__const _VUIDocumentOptionsKeyBackgroundImageDictionary
|| __DATA_CONST.__const _VUIDocumentOptionsKeyTabIdentifier
|| __DATA_CONST.__const _VUIDocumentPrefetchDataAppTypeName
|| __DATA_CONST.__const _VUIDocumentPrefetchDataSiriUIPluginName
|| __DATA_CONST.__const _VUIDocumentPrefetchDataTVAppName
|| __DATA_CONST.__const _VUIDocumentRefAccountSettings
|| __DATA_CONST.__const _VUIDocumentRefBrowseMain
|| __DATA_CONST.__const _VUIDocumentRefCanvas
|| __DATA_CONST.__const _VUIDocumentRefConfirmationDialog
|| __DATA_CONST.__const _VUIDocumentRefContextKeyUpdateEvents
|| __DATA_CONST.__const _VUIDocumentRefDataProductId
|| __DATA_CONST.__const _VUIDocumentRefDebugUIMain
|| __DATA_CONST.__const _VUIDocumentRefEpisodeCanonical
|| __DATA_CONST.__const _VUIDocumentRefGDPRConsent
|| __DATA_CONST.__const _VUIDocumentRefKidsMain
|| __DATA_CONST.__const _VUIDocumentRefLibrary
|| __DATA_CONST.__const _VUIDocumentRefMovieCanonical
|| __DATA_CONST.__const _VUIDocumentRefMoviesMain
|| __DATA_CONST.__const _VUIDocumentRefPostPlay
|| __DATA_CONST.__const _VUIDocumentRefSearch
|| __DATA_CONST.__const _VUIDocumentRefSiriSearchTVOS
|| __DATA_CONST.__const _VUIDocumentRefSportsCanonical
|| __DATA_CONST.__const _VUIDocumentRefSportsFavorites
|| __DATA_CONST.__const _VUIDocumentRefSportsMain
|| __DATA_CONST.__const _VUIDocumentRefTVShowCanonical
|| __DATA_CONST.__const _VUIDocumentRefTVShowsMain
|| __DATA_CONST.__const _VUIDocumentRefWatchNow
|| __DATA_CONST.__const _VUIElementEventAutoPlay
|| __DATA_CONST.__const _VUIElementKeyAccountSettingsButton
|| __DATA_CONST.__const _VUIElementKeyAppImage
|| __DATA_CONST.__const _VUIElementKeyCanvasTemplate
|| __DATA_CONST.__const _VUIElementKeyCastBanner
|| __DATA_CONST.__const _VUIElementKeyChannelBanner
|| __DATA_CONST.__const _VUIElementKeyColSpan
|| __DATA_CONST.__const _VUIElementKeyConfirmationCardTemplate
|| __DATA_CONST.__const _VUIElementKeyConfirmationDialogTemplate
|| __DATA_CONST.__const _VUIElementKeyConstrainRatio
|| __DATA_CONST.__const _VUIElementKeyContextMenuPopoverTemplate
|| __DATA_CONST.__const _VUIElementKeyContextMenuTemplate
|| __DATA_CONST.__const _VUIElementKeyDebugText
|| __DATA_CONST.__const _VUIElementKeyDescriptiveInfo
|| __DATA_CONST.__const _VUIElementKeyDisclaimerText
|| __DATA_CONST.__const _VUIElementKeyEditorialCard
|| __DATA_CONST.__const _VUIElementKeyEpisodeInfoCard
|| __DATA_CONST.__const _VUIElementKeyEpisodeLockup
|| __DATA_CONST.__const _VUIElementKeyEpisodeShelf
|| __DATA_CONST.__const _VUIElementKeyErrorTemplate
|| __DATA_CONST.__const _VUIElementKeyExtrasDescriptionCard
|| __DATA_CONST.__const _VUIElementKeyFeaturedCard
|| __DATA_CONST.__const _VUIElementKeyFeaturedLockup
|| __DATA_CONST.__const _VUIElementKeyGridStyle
|| __DATA_CONST.__const _VUIElementKeyGridStyleA
|| __DATA_CONST.__const _VUIElementKeyGridStyleB
|| __DATA_CONST.__const _VUIElementKeyGridStyleC
|| __DATA_CONST.__const _VUIElementKeyGridStyleD
|| __DATA_CONST.__const _VUIElementKeyGridStyleE
|| __DATA_CONST.__const _VUIElementKeyGridStyleEdgeToEdge
|| __DATA_CONST.__const _VUIElementKeyGridStyleF
|| __DATA_CONST.__const _VUIElementKeyGridStyleFullWidth
|| __DATA_CONST.__const _VUIElementKeyGridStylePP
|| __DATA_CONST.__const _VUIElementKeyGridType
|| __DATA_CONST.__const _VUIElementKeyGridTypeGrid
|| __DATA_CONST.__const _VUIElementKeyLogo
|| __DATA_CONST.__const _VUIElementKeyOffersTemplate
|| __DATA_CONST.__const _VUIElementKeyPopover
|| __DATA_CONST.__const _VUIElementKeyPopoverGroup
|| __DATA_CONST.__const _VUIElementKeyPopoverOption
|| __DATA_CONST.__const _VUIElementKeyPopoverTemplate
|| __DATA_CONST.__const _VUIElementKeyPostPlayBanner
|| __DATA_CONST.__const _VUIElementKeyPostPlayTemplate
|| __DATA_CONST.__const _VUIElementKeyProductShowcaseTemplate
|| __DATA_CONST.__const _VUIElementKeyRibbonLockup
|| __DATA_CONST.__const _VUIElementKeyRoomBanner
|| __DATA_CONST.__const _VUIElementKeyScore
|| __DATA_CONST.__const _VUIElementKeyScoreRow
|| __DATA_CONST.__const _VUIElementKeyScorecard
|| __DATA_CONST.__const _VUIElementKeyShareActivityTemplate
|| __DATA_CONST.__const _VUIElementKeyShareButton
|| __DATA_CONST.__const _VUIElementKeyShowcaseHeader
|| __DATA_CONST.__const _VUIElementKeySportFavoriteBanner
|| __DATA_CONST.__const _VUIElementKeySportsCard
|| __DATA_CONST.__const _VUIElementKeySportsFavoritesTemplate
|| __DATA_CONST.__const _VUIElementKeySportsFeaturedCard
|| __DATA_CONST.__const _VUIElementKeySportsLockup
|| __DATA_CONST.__const _VUIElementKeySportsProductTemplate
|| __DATA_CONST.__const _VUIElementKeySportsUpNextCard
|| __DATA_CONST.__const _VUIElementKeyTimeline
|| __DATA_CONST.__const _VUIElementKeyTimelineEvent
|| __DATA_CONST.__const _VUIElementKeyTypeAutoPostPlayDuration
|| __DATA_CONST.__const _VUIElementKeyUpNextCard
|| __DATA_CONST.__const _VUIElementKeyUpsellOfferTemplate
|| __DATA_CONST.__const _VUIElementKeyVideoAboutCard
|| __DATA_CONST.__const _VUIElementKeyVideoAvailableTitle
|| __DATA_CONST.__const _VUIElementKeyVideoBuyButton
|| __DATA_CONST.__const _VUIElementKeyVideoCastInfo
|| __DATA_CONST.__const _VUIElementKeyVideoDownloadButton
|| __DATA_CONST.__const _VUIElementKeyVideoFavoriteCell
|| __DATA_CONST.__const _VUIElementKeyVideoFavoriteDescriptionCell
|| __DATA_CONST.__const _VUIElementKeyVideoFavoriteSpacerCell
|| __DATA_CONST.__const _VUIElementKeyVideoFocusedText
|| __DATA_CONST.__const _VUIElementKeyVideoLeagueCell
|| __DATA_CONST.__const _VUIElementKeyVideoLeagueHeaderCell
|| __DATA_CONST.__const _VUIElementKeyVideoListLockup
|| __DATA_CONST.__const _VUIElementKeyVideoLockup
|| __DATA_CONST.__const _VUIElementKeyVideoMarkAsWatchedButton
|| __DATA_CONST.__const _VUIElementKeyVideoOfferCard
|| __DATA_CONST.__const _VUIElementKeyVideoOfferListLockup
|| __DATA_CONST.__const _VUIElementKeyVideoProductId
|| __DATA_CONST.__const _VUIElementKeyVideoProductMetadata
|| __DATA_CONST.__const _VUIElementKeyVideoRatingCard
|| __DATA_CONST.__const _VUIElementKeyVideoReviewCard
|| __DATA_CONST.__const _VUIElementKeyVideoTVShowEpisodeId
|| __DATA_CONST.__const _VUIElementKeyVideoTabItemCard
|| __DATA_CONST.__const _VUIElementKeyVideoTags
|| __DATA_CONST.__const _VUIElementKeyVideoTextBadge
|| __DATA_CONST.__const _VUIElementKeyVideoUpNextButton
|| __DATA_CONST.__const _VUIElementKeyVideoVersionListLockup
|| __DATA_CONST.__const _VUIElementKeyWatchNowBanner
|| __DATA_CONST.__const _VUIElementKeyWatchNowTemplate
|| __DATA_CONST.__const _VUIElementStyleKeyShelfStyle
|| __DATA_CONST.__const _VUIElementStyleValueShelfStylePlain
|| __DATA_CONST.__const _VUIImageDataKeyCropCode
|| __DATA_CONST.__const _VUIImageDataKeyFormat
|| __DATA_CONST.__const _VUIImageDataKeyUrl
|| __DATA_CONST.__const _VUIImageFormatJPEG
|| __DATA_CONST.__const _VUIImageFormatLCR
|| __DATA_CONST.__const _VUIJaliscoURLBagKey
|| __DATA_CONST.__const _VUIMediaEntityFetchRequestOptionForcePopulateProperties
|| __DATA_CONST.__const _VUIMediaEntityFetchRequestOptionIncludeGroupingSortIndexes
|| __DATA_CONST.__const _VUIMediaEntityFetchRequestOptionIncludeSortIndexes
|| __DATA_CONST.__const _VUIMediaLibraryConnectionStateDidChangeNotification
|| __DATA_CONST.__const _VUIMediaLibraryConnectionStateUserInfoKeyFromState
|| __DATA_CONST.__const _VUIMediaLibraryConnectionStateUserInfoKeyToState
|| __DATA_CONST.__const _VUIMediaLibraryContentsDidChangeNotification
|| __DATA_CONST.__const _VUIMediaLibraryContentsDidChangeUserInfoKeyContentsChange
|| __DATA_CONST.__const _VUIMediaLibraryManagerHomeSharesDidChangeNotification
|| __DATA_CONST.__const _VUIMediaLibraryManagerHomeSharesDidChangeUserInfoKeyChangeSet
|| __DATA_CONST.__const _VUIMediaLibraryManagerHomeSharesDidChangeUserInfoKeyMediaLibraries
|| __DATA_CONST.__const _VUIMetricsActionContextAlert
|| __DATA_CONST.__const _VUIMetricsActionContextKey
|| __DATA_CONST.__const _VUIMetricsActionDetailsButtonKey
|| __DATA_CONST.__const _VUIMetricsActionDetailsButtonMenu
|| __DATA_CONST.__const _VUIMetricsActionDetailsBuyParams
|| __DATA_CONST.__const _VUIMetricsActionDetailsKey
|| __DATA_CONST.__const _VUIMetricsActionDetailsResultFail
|| __DATA_CONST.__const _VUIMetricsActionDetailsResultKey
|| __DATA_CONST.__const _VUIMetricsActionDetailsResultSuccess
|| __DATA_CONST.__const _VUIMetricsActionTypeAdd
|| __DATA_CONST.__const _VUIMetricsActionTypeCancel
|| __DATA_CONST.__const _VUIMetricsActionTypeContinue
|| __DATA_CONST.__const _VUIMetricsActionTypeGdprConsent
|| __DATA_CONST.__const _VUIMetricsActionTypeKey
|| __DATA_CONST.__const _VUIMetricsActionTypeNavigate
|| __DATA_CONST.__const _VUIMetricsActionTypePlay
|| __DATA_CONST.__const _VUIMetricsActionTypeRemove
|| __DATA_CONST.__const _VUIMetricsActionTypeSubscribe
|| __DATA_CONST.__const _VUIMetricsActionUrlKey
|| __DATA_CONST.__const _VUIMetricsDialogKeyDetails
|| __DATA_CONST.__const _VUIMetricsDialogKeyDialogId
|| __DATA_CONST.__const _VUIMetricsDialogKeyDialogType
|| __DATA_CONST.__const _VUIMetricsDialogTypeGDPR
|| __DATA_CONST.__const _VUIMetricsKeyOfferType
|| __DATA_CONST.__const _VUIMetricsLogBuyParamsKey
|| __DATA_CONST.__const _VUIMetricsLogCodeKey
|| __DATA_CONST.__const _VUIMetricsLogMessageKey
|| __DATA_CONST.__const _VUIMetricsLogUserInfoKey
|| __DATA_CONST.__const _VUIMetricsTabBarItemNotificationKey
|| __DATA_CONST.__const _VUIMetricsTargetIdAllow
|| __DATA_CONST.__const _VUIMetricsTargetIdAppStore
|| __DATA_CONST.__const _VUIMetricsTargetIdCancel
|| __DATA_CONST.__const _VUIMetricsTargetIdContinue
|| __DATA_CONST.__const _VUIMetricsTargetIdDisallow
|| __DATA_CONST.__const _VUIMetricsTargetIdInstall
|| __DATA_CONST.__const _VUIMetricsTargetIdKey
|| __DATA_CONST.__const _VUIMetricsTargetIdSeeAll
|| __DATA_CONST.__const _VUIMetricsTargetTypeAlertButton
|| __DATA_CONST.__const _VUIMetricsTargetTypeButton
|| __DATA_CONST.__const _VUIMetricsTargetTypeKey
|| __DATA_CONST.__const _VUIMetricsTargetTypeLink
|| __DATA_CONST.__const _VUIMetricsTargetTypeSwitch
|| __DATA_CONST.__const _VUIMetricsTargetTypeUpNextButton
|| __DATA_CONST.__const _VUIPlaybackManagerDidEndPlaybackNotification
|| __DATA_CONST.__const _VUIPlaybackManagerWillStartPlaybackNotification
|| __DATA_CONST.__const _VUIPlistMediaDatabaseContentsDidChangeNotification
|| __DATA_CONST.__const _VUIPreferredVideoFormatDidChangeNotification
|| __DATA_CONST.__const _VUIRentalExpirationMonitorRentalDidExpireNotification
|| __DATA_CONST.__const _VUIRestrictionsDidChangeNotification
|| __DATA_CONST.__const _VUISportBannerPostMode
|| __DATA_CONST.__const _VUISportBannerPreMode
|| __DATA_CONST.__const _VUIStoreAcquisitionCrossProcessNotification
|| __DATA_CONST.__const _VUIStoreAcquisitionCrossProcessNotificationKeyBuyParams
|| __DATA_CONST.__const _VUIStoreAcquisitionCrossProcessNotificationKeyError
|| __DATA_CONST.__const _VUISystemRoundedFontFamily
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyBrowse
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyKids
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyLibrary
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyMovies
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyPPTSports
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyPPTStack
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeySearch
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeySports
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyTVShows
|| __DATA_CONST.__const _VUITabBarItemIdentifierKeyWatchNow
|| __DATA_CONST.__const _VUITellAppRemovalServiceThatSecureInvalidationDidCompleteNotification
|| __DATA_CONST.__const _VUIUnicodeKeyDotSeparator
|| __DATA_CONST.__const _VUIUpNextRequestActionKey
|| __DATA_CONST.__const _VUIUpNextRequestDidFinishCrossProcessNotification
|| __DATA_CONST.__const _VUIUpNextRequestDidFinishNotification
|| __DATA_CONST.__const _VUIUpNextRequestErrorKey
|| __DATA_CONST.__const _VUIUpdateEventAccountChanged
|| __DATA_CONST.__const _VUIUpdateEventAppDidBecomeActive
|| __DATA_CONST.__const _VUIUpdateEventAppRefresh
|| __DATA_CONST.__const _VUIUpdateEventClearPlayHistory
|| __DATA_CONST.__const _VUIUpdateEventEntitlements
|| __DATA_CONST.__const _VUIUpdateEventFavorites
|| __DATA_CONST.__const _VUIUpdateEventLocationAuthorizationChanged
|| __DATA_CONST.__const _VUIUpdateEventLocationRetrieved
|| __DATA_CONST.__const _VUIUpdateEventPlayActivity
|| __DATA_CONST.__const _VUIUpdateEventPlayHistoryUpdated
|| __DATA_CONST.__const _VUIUpdateEventPostPlay
|| __DATA_CONST.__const _VUIUpdateEventPreferredVideoFormat
|| __DATA_CONST.__const _VUIUpdateEventPurchase
|| __DATA_CONST.__const _VUIUpdateEventPurchases
|| __DATA_CONST.__const _VUIUpdateEventRefresh
|| __DATA_CONST.__const _VUIUpdateEventRemoveFromPlayHistory
|| __DATA_CONST.__const _VUIUpdateEventRestrictions
|| __DATA_CONST.__const _VUIUpdateEventSettings
|| __DATA_CONST.__const _VUIUpdateEventUTSK
|| __DATA_CONST.__const _VUIUpdateEventUpNext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIAppDocumentCanonicalServiceViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIAppDocumentServiceViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIAppNavigationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIAppScriptDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIApplicationRouter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIBootURLController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUICurrentSiriNavControllerContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIDebugDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIDeviceMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIDocumentDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIGDPRPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIImageLoader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIJSFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIJSMediaPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUILabel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUILocalizationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIMLFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIMediaLibraryContentsChange
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIMediaLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIMetricsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIPlaybackManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIPlaybackReporter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIPlaybackReporterUTS
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIPlaybackReporterVPAF
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIRentalExpirationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIRentalManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUISettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUIStoreFPSKeyLoader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_VUITextLayout
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIAppDocumentCanonicalServiceViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIAppDocumentServiceViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIAppNavigationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIAppScriptDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIApplicationRouter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIBootURLController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUICurrentSiriNavControllerContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIDebugDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIDeviceMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIDocumentDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIDownloadManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIGDPRPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIImageLoader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIJSFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIJSMediaPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUILabel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUILocalizationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIMLFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIMediaLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIMediaLibraryContentsChange
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIMediaLibraryManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIMetricsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIOpenURLHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIPlaybackManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIPlaybackReporter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIPlaybackReporterUTS
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIPlaybackReporterVPAF
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIRentalExpirationMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIRentalManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUISettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUIStoreFPSKeyLoader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_VUITextLayout
|| __TEXT.__const _VUICollectionViewApplyChangeSetSectionIndexSections
|| __TEXT.__const _VUIMediaLibraryRevisionInitialRevision
|| __TEXT.__const _VUIMediaLibraryRevisionInvalidRevision
|| __TEXT.__text _VUIImageTypeFromString
|| __TEXT.__text _VUIImageTypeLogString
|| __TEXT.__text _VUIImageTypeString
|| __TEXT.__text _VUIMediaCategoryTypeLogString
|| __TEXT.__text _VUIMediaCategoryTypesLogString
|| __TEXT.__text _VUIMediaCollectionTypeLogString
|| __TEXT.__text _VUIMediaCollectionTypesLogString
|| __TEXT.__text _VUIMediaEntityAssetTypeLogString
|| __TEXT.__text _VUIMediaEntityFetchRequestAllPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestIsAllPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalEpisodePropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalMovieRentalsPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalMoviesPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalSeasonPropertiesSet
|| __TEXT.__text _VUIMediaEntityFetchRequestMinimalShowPropertiesSet
|| __TEXT.__text _VUIMediaEntityPlayedStateLogString
|| __TEXT.__text _VUIMediaEntitySubtypeLogString
|| __TEXT.__text _VUIMediaLibraryConnectionStateLogString
|| __TEXT.__text _VUIMediaLibraryFetchReasonLogString
|| __TEXT.__text _VUIMediaLibraryTypeLogString
__ AMPCoreUI: _OBJC_CLASS_$_AMPOnboardingViewController
__ AMPCoreUI: _OBJC_METACLASS_$_AMPOnboardingViewController
__ AVFoundation: _AVMakeRectWithAspectRatioInsideRect
__ AVFoundation: _AVURLAssetAlternativeConfigurationContentProviderKey
__ AVFoundation: _AVURLAssetiTunesStoreContentDSIDKey
__ AVFoundation: _AVURLAssetiTunesStoreContentDownloadParametersKey
__ AVFoundation: _AVURLAssetiTunesStoreContentHLSAssetURLStringKey
__ AVFoundation: _AVURLAssetiTunesStoreContentIDKey
__ AVFoundation: _AVURLAssetiTunesStoreContentPurchasedMediaKindKey
__ AVFoundation: _AVURLAssetiTunesStoreContentRentalIDKey
__ AVFoundation: _AVURLAssetiTunesStoreContentTypeKey
__ AVFoundation: _AVURLAssetiTunesStoreContentUserAgentKey
__ AVKit: _OBJC_CLASS_$_AVBackgroundView
__ AVKit: _OBJC_CLASS_$_AVControlItem
__ AVKit: _OBJC_CLASS_$_AVExternalPlaybackController
__ AVKit: _OBJC_CLASS_$_AVPlayerViewController
__ Accounts: _ACAccountStoreDidChangeNotification
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ AirTraffic: _OBJC_CLASS_$_ATConnection
__ AppSupport: _CPSharedResourcesDirectory
__ AppSupport: _CRMaxRank
__ AppSupport: _OBJC_CLASS_$_CPMemoryPool
__ AppleAccountUI: _OBJC_CLASS_$_AAUIProfilePictureStore
__ AppleMediaServices: _OBJC_CLASS_$_AMSBag
__ AppleMediaServices: _OBJC_CLASS_$_AMSBagKeySet
__ AppleMediaServices: _OBJC_CLASS_$_AMSDevice
__ AppleMediaServices: _OBJC_CLASS_$_AMSDeviceOfferRegistrationTask
__ AppleMediaServices: _OBJC_CLASS_$_AMSMediaProtocolHandler
__ AppleMediaServices: _OBJC_CLASS_$_AMSMediaRequestEncoder
__ AppleMediaServices: _OBJC_CLASS_$_AMSMediaTokenService
__ AppleMediaServices: _OBJC_CLASS_$_AMSMutableBagKeySet
__ AppleMediaServices: _OBJC_CLASS_$_AMSProcessInfo
__ AppleMediaServices: _OBJC_CLASS_$_AMSURLParser
__ AppleMediaServices: _OBJC_CLASS_$_AMSURLSession
__ AppleMediaServices: _OBJC_CLASS_$_AMSUserAgent
__ AudioToolbox: _kMediaKind_HomeVideoValue
__ AudioToolbox: _kMediaKind_MovieValue
__ AudioToolbox: _kMediaKind_MusicValue
__ AudioToolbox: _kMediaKind_TVShowValue
__ Celestial: _AVFileProcessorAttribute_RentalPlaybackStartDate
__ CoreData: _NSDeletedObjectsKey
__ CoreData: _NSInsertedObjectsKey
__ CoreData: _NSManagedObjectContextDidSaveNotification
__ CoreData: _NSUpdatedObjectsKey
__ CoreData: _OBJC_CLASS_$_NSEntityDescription
__ CoreData: _OBJC_CLASS_$_NSFetchRequest
__ CoreData: _OBJC_CLASS_$_NSManagedObject
__ CoreData: _OBJC_CLASS_$_NSPersistentContainer
__ CoreData: _OBJC_METACLASS_$_NSManagedObject
__ CoreData: _OBJC_METACLASS_$_NSPersistentContainer
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCache
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGBitmapAllocateData
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGBitmapFreeData
__ CoreGraphics: _CGBitmapGetAlignedBytesPerRow
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextAddPath
__ CoreGraphics: _CGContextClearRect
__ CoreGraphics: _CGContextClip
__ CoreGraphics: _CGContextClipToMask
__ CoreGraphics: _CGContextDrawLinearGradient
__ CoreGraphics: _CGContextDrawRadialGradient
__ CoreGraphics: _CGContextGetCTM
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetBaseCTM
__ CoreGraphics: _CGContextSetBlendMode
__ CoreGraphics: _CGContextSetInterpolationQuality
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCreateWithCFData
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGGradientCreateWithColorComponents
__ CoreGraphics: _CGGradientCreateWithColors
__ CoreGraphics: _CGGradientRelease
__ CoreGraphics: _CGImageCreate
__ CoreGraphics: _CGImageCreateWithImageInRect
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntegral
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectStandardize
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeCreateDictionaryRepresentation
__ CoreGraphics: _CGSizeMakeWithDictionaryRepresentation
__ CoreGraphics: _CGSizeZero
__ CoreServices: _LSReferrerURLKey
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSBundleProxy
__ CoreServices: _OBJC_CLASS_$__LSOpenConfiguration
__ CoreText: _kCTUIFontTextStyleHeadline3
__ CoreText: _kCTUIFontTextStyleShortBody
__ CoreText: _kCTUIFontTextStyleShortCaption1
__ CoreText: _kCTUIFontTextStyleShortFootnote
__ CoreText: _kCTUIFontTextStyleShortHeadline
__ CoreText: _kCTUIFontTextStyleShortSubhead
__ CoreText: _kCTUIFontTextStyleTitle4
__ Foundation: _NSClassFromString
__ Foundation: _NSHTTPCookieDomain
__ Foundation: _NSHTTPCookieName
__ Foundation: _NSHTTPCookiePath
__ Foundation: _NSHTTPCookieValue
__ Foundation: _NSHTTPCookieVersion
__ Foundation: _NSHomeDirectory
__ Foundation: _NSIntersectionRange
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSComparisonPredicate
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDecimalNumber
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHTTPCookie
__ Foundation: _OBJC_CLASS_$_NSHTTPCookieStorage
__ Foundation: _OBJC_CLASS_$_NSHTTPURLResponse
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSItemProvider
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSMutableURLRequest
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLCache
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSURLRequest
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSValueTransformer
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ Foundation: _OBJC_METACLASS_$_NSValueTransformer
__ FrontBoardServices: _FBSOpenApplicationErrorDomain
__ FrontBoardServices: _FBSOpenApplicationOptionKeyPayloadAnnotation
__ FrontBoardServices: _FBSOpenApplicationOptionKeyPromptUnlockDevice
__ FrontBoardServices: _FBSOpenApplicationServiceErrorDomain
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionary
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionaryCoverURL
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionaryFullToken
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionaryFullURL
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionaryTemplateSupportsLayeredImage
__ HomeSharing: _HSArtworkInfoKeyArtworkDictionaryTemplateURL
__ HomeSharing: _HSArtworkInfoKeyPurchaseHistoryID
__ HomeSharing: _HSLibraryCacheDirectoryForIdentifier
__ HomeSharing: _OBJC_CLASS_$_HSCloudClient
__ HomeSharing: _OBJC_CLASS_$_HSGetAuthorizedAccountsTokenRequest
__ HomeSharing: _OBJC_CLASS_$_HSItemDataRequest
__ ITMLKit: _IKElementKeyActivityIndicator
__ ITMLKit: _IKElementKeyAsset
__ ITMLKit: _IKElementKeyAudio
__ ITMLKit: _IKElementKeyBackground
__ ITMLKit: _IKElementKeyBadge
__ ITMLKit: _IKElementKeyButton
__ ITMLKit: _IKElementKeyCarousel
__ ITMLKit: _IKElementKeyCheckMark
__ ITMLKit: _IKElementKeyCollectionList
__ ITMLKit: _IKElementKeyColumn
__ ITMLKit: _IKElementKeyColumnCollection
__ ITMLKit: _IKElementKeyColumnItemLockup
__ ITMLKit: _IKElementKeyColumnTemplate
__ ITMLKit: _IKElementKeyCopyright
__ ITMLKit: _IKElementKeyDecorationImage
__ ITMLKit: _IKElementKeyDecorationLabel
__ ITMLKit: _IKElementKeyDescription
__ ITMLKit: _IKElementKeyDialogTemplate
__ ITMLKit: _IKElementKeyDocumentBanner
__ ITMLKit: _IKElementKeyFullscreenImg
__ ITMLKit: _IKElementKeyGalleryTemplate
__ ITMLKit: _IKElementKeyGrid
__ ITMLKit: _IKElementKeyHead
__ ITMLKit: _IKElementKeyHeader
__ ITMLKit: _IKElementKeyImg
__ ITMLKit: _IKElementKeyList
__ ITMLKit: _IKElementKeyListItemLockup
__ ITMLKit: _IKElementKeyListTemplate
__ ITMLKit: _IKElementKeyLoadingTemplate
__ ITMLKit: _IKElementKeyLockup
__ ITMLKit: _IKElementKeyLogo
__ ITMLKit: _IKElementKeyMainTemplate
__ ITMLKit: _IKElementKeyMenuBar
__ ITMLKit: _IKElementKeyMenuBarTemplate
__ ITMLKit: _IKElementKeyMenuItem
__ ITMLKit: _IKElementKeyNavigationBar
__ ITMLKit: _IKElementKeyOrdinal
__ ITMLKit: _IKElementKeyOverlays
__ ITMLKit: _IKElementKeyPlaylist
__ ITMLKit: _IKElementKeyProgressIndicator
__ ITMLKit: _IKElementKeyRelatedContent
__ ITMLKit: _IKElementKeySection
__ ITMLKit: _IKElementKeyShelf
__ ITMLKit: _IKElementKeyShowcaseTemplate
__ ITMLKit: _IKElementKeySlideshow
__ ITMLKit: _IKElementKeyStackTemplate
__ ITMLKit: _IKElementKeySubtitle
__ ITMLKit: _IKElementKeyText
__ ITMLKit: _IKElementKeyTextBox
__ ITMLKit: _IKElementKeyTimeline
__ ITMLKit: _IKElementKeyTimelineEvent
__ ITMLKit: _IKElementKeyTitle
__ ITMLKit: _IKElementKeyVideo
__ ITMLKit: _IKImageDescriptor1080p
__ ITMLKit: _IKImageDescriptor1x
__ ITMLKit: _IKImageDescriptor2x
__ ITMLKit: _IKImageDescriptor720p
__ ITMLKit: _IKShowcaseModeOneup
__ ITMLKit: _IKShowcaseModeShowcase
__ ITMLKit: _IKViewElementStylePrototypeAbstract
__ ITMLKit: _ITMLKitErrorHTTPStatusKey
__ ITMLKit: _OBJC_CLASS_$_IKActivityIndicatorElement
__ ITMLKit: _OBJC_CLASS_$_IKAppContext
__ ITMLKit: _OBJC_CLASS_$_IKAppDataStorage
__ ITMLKit: _OBJC_CLASS_$_IKAppUserDefaults
__ ITMLKit: _OBJC_CLASS_$_IKAssetElement
__ ITMLKit: _OBJC_CLASS_$_IKAudioElement
__ ITMLKit: _OBJC_CLASS_$_IKBackgroundElement
__ ITMLKit: _OBJC_CLASS_$_IKBadgeElement
__ ITMLKit: _OBJC_CLASS_$_IKButtonElement
__ ITMLKit: _OBJC_CLASS_$_IKCarouselElement
__ ITMLKit: _OBJC_CLASS_$_IKCheckMarkElement
__ ITMLKit: _OBJC_CLASS_$_IKCollectionElement
__ ITMLKit: _OBJC_CLASS_$_IKCollectionListElement
__ ITMLKit: _OBJC_CLASS_$_IKColor
__ ITMLKit: _OBJC_CLASS_$_IKColumnCollectionElement
__ ITMLKit: _OBJC_CLASS_$_IKColumnElement
__ ITMLKit: _OBJC_CLASS_$_IKColumnItemLockupElement
__ ITMLKit: _OBJC_CLASS_$_IKColumnTemplate
__ ITMLKit: _OBJC_CLASS_$_IKDialogTemplate
__ ITMLKit: _OBJC_CLASS_$_IKDocumentBannerElement
__ ITMLKit: _OBJC_CLASS_$_IKDocumentServiceRequest
__ ITMLKit: _OBJC_CLASS_$_IKGalleryTemplate
__ ITMLKit: _OBJC_CLASS_$_IKGridElement
__ ITMLKit: _OBJC_CLASS_$_IKHeadElement
__ ITMLKit: _OBJC_CLASS_$_IKHeaderElement
__ ITMLKit: _OBJC_CLASS_$_IKImageElement
__ ITMLKit: _OBJC_CLASS_$_IKJSError
__ ITMLKit: _OBJC_CLASS_$_IKJSITunesStore
__ ITMLKit: _OBJC_CLASS_$_IKJSObject
__ ITMLKit: _OBJC_CLASS_$_IKListElement
__ ITMLKit: _OBJC_CLASS_$_IKListItemLockupElement
__ ITMLKit: _OBJC_CLASS_$_IKListTemplate
__ ITMLKit: _OBJC_CLASS_$_IKLoadingTemplate
__ ITMLKit: _OBJC_CLASS_$_IKLockupElement
__ ITMLKit: _OBJC_CLASS_$_IKMainTemplate
__ ITMLKit: _OBJC_CLASS_$_IKMenuBarElement
__ ITMLKit: _OBJC_CLASS_$_IKMenuBarTemplate
__ ITMLKit: _OBJC_CLASS_$_IKMenuItemElement
__ ITMLKit: _OBJC_CLASS_$_IKOrdinalElement
__ ITMLKit: _OBJC_CLASS_$_IKPlaylistElement
__ ITMLKit: _OBJC_CLASS_$_IKProgressIndicatorElement
__ ITMLKit: _OBJC_CLASS_$_IKSectionElement
__ ITMLKit: _OBJC_CLASS_$_IKServiceContext
__ ITMLKit: _OBJC_CLASS_$_IKShelfElement
__ ITMLKit: _OBJC_CLASS_$_IKShowcaseTemplate
__ ITMLKit: _OBJC_CLASS_$_IKSlideshowElement
__ ITMLKit: _OBJC_CLASS_$_IKStackTemplate
__ ITMLKit: _OBJC_CLASS_$_IKTextElement
__ ITMLKit: _OBJC_CLASS_$_IKTimelineElement
__ ITMLKit: _OBJC_CLASS_$_IKTimelineEventElement
__ ITMLKit: _OBJC_CLASS_$_IKUpdateServiceRequest
__ ITMLKit: _OBJC_CLASS_$_IKVideoElement
__ ITMLKit: _OBJC_CLASS_$_IKViewElement
__ ITMLKit: _OBJC_CLASS_$_IKViewElementRegistry
__ ITMLKit: _OBJC_CLASS_$_IKViewElementStyle
__ ITMLKit: _OBJC_METACLASS_$_IKJSITunesStore
__ ITMLKit: _OBJC_METACLASS_$_IKJSObject
__ JavaScriptCore: _OBJC_CLASS_$_JSManagedValue
__ JavaScriptCore: _OBJC_CLASS_$_JSValue
__ LinkPresentation: _OBJC_CLASS_$_LPAppleTVMetadata
__ LinkPresentation: _OBJC_CLASS_$_LPImage
__ LinkPresentation: _OBJC_CLASS_$_LPImageMetadata
__ LinkPresentation: _OBJC_CLASS_$_LPLinkMetadata
__ LinkPresentation: _OBJC_CLASS_$_LPMetadataProvider
__ LinkPresentation: _OBJC_CLASS_$_LPSharingMetadataWrapper
__ MPUFoundation: _MPUDataSourceDidInvalidateNotification
__ MPUFoundation: _MPUFloatLessThanOrEqualToFloat
__ MPUFoundation: _MPULayoutLinearRelationEvaluate
__ MPUFoundation: _MPULayoutLinearRelationMake
__ MPUFoundation: _OBJC_CLASS_$_MPUContentSizeLayoutConstraint
__ MPUFoundation: _OBJC_CLASS_$_MPUHTMLParser
__ MPUFoundation: _OBJC_CLASS_$_MPUQueryDataSource
__ MPUFoundation: _OBJC_METACLASS_$_MPUQueryDataSource
__ ManagedConfiguration: _MCFeatureMaximumMoviesRating
__ ManagedConfiguration: _MCFeatureMaximumTVShowsRating
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MediaPlayer: _MPArtworkCatalogOriginalSize
__ MediaPlayer: _MPCloudControllerIsUpdateInProgressDidChangeNotification
__ MediaPlayer: _MPMediaItemPropertyAlbumPersistentID
__ MediaPlayer: _MPMediaItemPropertyAlbumTrackCount
__ MediaPlayer: _MPMediaItemPropertyArtist
__ MediaPlayer: _MPMediaItemPropertyArtistPersistentID
__ MediaPlayer: _MPMediaItemPropertyAudioCapability
__ MediaPlayer: _MPMediaItemPropertyBookmarkTime
__ MediaPlayer: _MPMediaItemPropertyChapters
__ MediaPlayer: _MPMediaItemPropertyCollectionDescription
__ MediaPlayer: _MPMediaItemPropertyColorCapability
__ MediaPlayer: _MPMediaItemPropertyContentRating
__ MediaPlayer: _MPMediaItemPropertyDateAdded
__ MediaPlayer: _MPMediaItemPropertyDescriptionInfo
__ MediaPlayer: _MPMediaItemPropertyDownloadIdentifier
__ MediaPlayer: _MPMediaItemPropertyEpisodeNumber
__ MediaPlayer: _MPMediaItemPropertyGenre
__ MediaPlayer: _MPMediaItemPropertyHLSAudioCapability
__ MediaPlayer: _MPMediaItemPropertyHLSColorCapability
__ MediaPlayer: _MPMediaItemPropertyHLSVideoQuality
__ MediaPlayer: _MPMediaItemPropertyHasAppleMusicDRM
__ MediaPlayer: _MPMediaItemPropertyHasBeenPlayed
__ MediaPlayer: _MPMediaItemPropertyHasHLSVideo
__ MediaPlayer: _MPMediaItemPropertyHomeSharingID
__ MediaPlayer: _MPMediaItemPropertyIsHidden
__ MediaPlayer: _MPMediaItemPropertyIsITunesU
__ MediaPlayer: _MPMediaItemPropertyIsLocal
__ MediaPlayer: _MPMediaItemPropertyIsMusicShow
__ MediaPlayer: _MPMediaItemPropertyIsPendingSync
__ MediaPlayer: _MPMediaItemPropertyIsRental
__ MediaPlayer: _MPMediaItemPropertyIsTemporaryCloudDownload
__ MediaPlayer: _MPMediaItemPropertyMediaType
__ MediaPlayer: _MPMediaItemPropertyMovieInfo
__ MediaPlayer: _MPMediaItemPropertyPersistentID
__ MediaPlayer: _MPMediaItemPropertyPlayCount
__ MediaPlayer: _MPMediaItemPropertyPlaybackDuration
__ MediaPlayer: _MPMediaItemPropertyPurchaseHistoryID
__ MediaPlayer: _MPMediaItemPropertyReleaseDate
__ MediaPlayer: _MPMediaItemPropertyRentalDuration
__ MediaPlayer: _MPMediaItemPropertyRentalExpirationDate
__ MediaPlayer: _MPMediaItemPropertyRentalPlaybackDuration
__ MediaPlayer: _MPMediaItemPropertyRentalPlaybackStartTime
__ MediaPlayer: _MPMediaItemPropertyRentalStartTime
__ MediaPlayer: _MPMediaItemPropertySeasonName
__ MediaPlayer: _MPMediaItemPropertySeasonNumber
__ MediaPlayer: _MPMediaItemPropertySeriesName
__ MediaPlayer: _MPMediaItemPropertySortTitle
__ MediaPlayer: _MPMediaItemPropertyStoreAccountID
__ MediaPlayer: _MPMediaItemPropertyStoreExtrasURL
__ MediaPlayer: _MPMediaItemPropertyStoreID
__ MediaPlayer: _MPMediaItemPropertyStorePlaylistID
__ MediaPlayer: _MPMediaItemPropertyStoreRedownloadParameters
__ MediaPlayer: _MPMediaItemPropertyStoreRentalID
__ MediaPlayer: _MPMediaItemPropertyTitle
__ MediaPlayer: _MPMediaItemPropertyVideoQuality
__ MediaPlayer: _MPMediaItemPropertyYear
__ MediaPlayer: _MPMediaLibraryAvailableMediaLibrariesDidChangeNotification
__ MediaPlayer: _MPMediaLibraryDidChangeNotification
__ MediaPlayer: _MPMediaLibraryStatusDidChangeNotification
__ MediaPlayer: _MPMediaLibrarySyncGenerationDidChangeNotification
__ MediaPlayer: _MPStoreDownloadAttributeShouldDisableCellularRestrictionEnforcement
__ MediaPlayer: _MPStoreDownloadManagerDidFetchInitialDownloadsNotification
__ MediaPlayer: _MPStoreDownloadPhaseCanceled
__ MediaPlayer: _MPStoreDownloadPhaseDownloading
__ MediaPlayer: _MPStoreDownloadPhaseFailed
__ MediaPlayer: _MPStoreDownloadPhaseFinished
__ MediaPlayer: _MPStoreDownloadPhaseInstalling
__ MediaPlayer: _MPStoreDownloadPhasePaused
__ MediaPlayer: _MPStoreDownloadPhaseProcessing
__ MediaPlayer: _MPStoreDownloadPhaseWaiting
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPAbstractNetworkArtworkDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPArtworkCatalog
__ MediaPlayer: _OBJC_CLASS_$_MPCloudController
__ MediaPlayer: _OBJC_CLASS_$_MPHomeSharingML3DataProvider
__ MediaPlayer: _OBJC_CLASS_$_MPMediaChapter
__ MediaPlayer: _OBJC_CLASS_$_MPMediaCompoundAllPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaCompoundAnyPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaItem
__ MediaPlayer: _OBJC_CLASS_$_MPMediaItemCollection
__ MediaPlayer: _OBJC_CLASS_$_MPMediaLibrary
__ MediaPlayer: _OBJC_CLASS_$_MPMediaLibraryArtworkDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPMediaPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaPropertyPredicate
__ MediaPlayer: _OBJC_CLASS_$_MPMediaQuery
__ MediaPlayer: _OBJC_CLASS_$_MPRestrictionsMonitor
__ MediaPlayer: _OBJC_CLASS_$_MPStoreDownload
__ MediaPlayer: _OBJC_CLASS_$_MPStoreDownloadManager
__ MediaPlayer: _OBJC_METACLASS_$_MPAbstractNetworkArtworkDataSource
__ MediaPlayerUI: _OBJC_CLASS_$_MPUArtworkView
__ MediaPlayerUI: _OBJC_METACLASS_$_MPUArtworkView
__ MediaRemote: _MRMediaRemoteGetNowPlayingClient
__ MediaRemote: _MRMediaRemoteGetPlaybackStateForClient
__ MediaRemote: _MRMediaRemoteSetWantsNowPlayingNotifications
__ MediaRemote: _MRNowPlayingClientGetBundleIdentifier
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
__ MetricsKit: _MTFieldNameStartReasonType
__ MetricsKit: _MTFieldNameStopReasonType
__ MetricsKit: _MTMediaActivityPlayStartReasonFocus
__ MetricsKit: _MTMediaActivityPlayStartReasonPlay
__ MetricsKit: _MTMediaActivityPlayStartReasonSeek
__ MetricsKit: _MTMediaActivityPlayStartReasonTypeSkipIntro
__ MetricsKit: _MTMediaActivityPlayStartReasonUnknown
__ MetricsKit: _MTMediaActivityPlayStopReasonBuffering
__ MetricsKit: _MTMediaActivityPlayStopReasonComplete
__ MetricsKit: _MTMediaActivityPlayStopReasonError
__ MetricsKit: _MTMediaActivityPlayStopReasonInactivity
__ MetricsKit: _MTMediaActivityPlayStopReasonNext
__ MetricsKit: _MTMediaActivityPlayStopReasonPause
__ MetricsKit: _MTMediaActivityPlayStopReasonPlayOther
__ MetricsKit: _MTMediaActivityPlayStopReasonSeek
__ MetricsKit: _MTMediaActivityPlayStopReasonTypeSkipIntro
__ MetricsKit: _MTMediaActivityPlayStopReasonUnknown
__ MetricsKit: _MTMediaActivityTriggerTypeAutomatic
__ MetricsKit: _MTMediaActivityTriggerTypeManual
__ MetricsKit: _MTMediaActivityTriggerTypeUnknown
__ MetricsKit: _OBJC_CLASS_$_MTMediaActivityTracker
__ MetricsKit: _OBJC_CLASS_$_MTMetricsKit
__ MetricsKit: _OBJC_CLASS_$_MTUIKitStoreAMSBagDelegatePackage
__ MetricsKit: _OBJC_CLASS_$_MTVPAFKit
__ MobileIcons: _LIIconContinuousCornerRadiusForVariant
__ MusicLibrary: _ML3MusicLibraryContentsDidChangeNotification
__ MusicLibrary: _ML3TrackPropertyBookmarkTime
__ MusicLibrary: _ML3TrackPropertyFilePath
__ MusicLibrary: _ML3TrackPropertyHLSOfflinePlaybackKeys
__ MusicLibrary: _ML3TrackPropertyHLSPlaylistURL
__ MusicLibrary: _ML3TrackPropertyHasBeenPlayed
__ MusicLibrary: _ML3TrackPropertyHasHLSVideo
__ MusicLibrary: _ML3TrackPropertyHomeSharingID
__ MusicLibrary: _ML3TrackPropertyIsHD
__ MusicLibrary: _ML3TrackPropertyIsLocal
__ MusicLibrary: _ML3TrackPropertyIsRental
__ MusicLibrary: _ML3TrackPropertyIsTemporaryCloudDownload
__ MusicLibrary: _ML3TrackPropertyMediaType
__ MusicLibrary: _ML3TrackPropertyPlayCountUser
__ MusicLibrary: _ML3TrackPropertyRentalDuration
__ MusicLibrary: _ML3TrackPropertyRentalExpirationDate
__ MusicLibrary: _ML3TrackPropertyRentalPlaybackDuration
__ MusicLibrary: _ML3TrackPropertyRentalPlaybackStartDate
__ MusicLibrary: _ML3TrackPropertyRentalStartDate
__ MusicLibrary: _ML3TrackPropertyRentalWindowEndDate
__ MusicLibrary: _ML3TrackPropertyStoreAccountID
__ MusicLibrary: _ML3TrackPropertyStoreBookmarkMetadataIdentifier
__ MusicLibrary: _ML3TrackPropertyStoreDownloaderAccountID
__ MusicLibrary: _ML3TrackPropertyStoreExtrasURL
__ MusicLibrary: _ML3TrackPropertyStoreItemID
__ MusicLibrary: _ML3TrackPropertyStoreKeyID
__ MusicLibrary: _ML3TrackPropertyStoreRedownloadParameters
__ MusicLibrary: _ML3TrackPropertyTitle
__ MusicLibrary: _OBJC_CLASS_$_ML3AllCompoundPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3ComparisonPredicate
__ MusicLibrary: _OBJC_CLASS_$_ML3MusicLibrary
__ MusicLibrary: _OBJC_CLASS_$_ML3QueryResultSet
__ MusicLibrary: _OBJC_CLASS_$_ML3Track
__ OnBoardingKit: _OBJC_CLASS_$_OBBundle
__ OnBoardingKit: _OBJC_CLASS_$_OBPrivacyFlow
__ OnBoardingKit: _OBJC_CLASS_$_OBPrivacyLinkController
__ OnBoardingKit: _OBJC_CLASS_$_OBPrivacyPresenter
__ OnBoardingKit: _OBPrivacyTVAppIdentifier
__ Preferences: _OBJC_CLASS_$_PSEditableTableCell
__ Preferences: _OBJC_CLASS_$_PSFooterHyperlinkView
__ Preferences: _OBJC_CLASS_$_PSListController
__ Preferences: _OBJC_CLASS_$_PSListItemsController
__ Preferences: _OBJC_CLASS_$_PSSpecifier
__ Preferences: _OBJC_CLASS_$_PSTableCell
__ Preferences: _OBJC_CLASS_$_PSTextFieldSpecifier
__ Preferences: _OBJC_IVAR_$_PSListController._specifiers
__ Preferences: _OBJC_METACLASS_$_PSListController
__ Preferences: _OBJC_METACLASS_$_PSTableCell
__ Preferences: _PSCellClassKey
__ Preferences: _PSEnabledKey
__ Preferences: _PSFooterCellClassGroupKey
__ Preferences: _PSFooterHyperlinkViewActionKey
__ Preferences: _PSFooterHyperlinkViewLinkRangeKey
__ Preferences: _PSFooterHyperlinkViewTargetKey
__ Preferences: _PSFooterHyperlinkViewTitleKey
__ Preferences: _PSFooterTextGroupKey
__ Preferences: _PSHeaderCellClassGroupKey
__ Preferences: _PSHeaderViewKey
__ Preferences: _PSIDKey
__ Preferences: _PSIconImageKey
__ Preferences: _PSLazyIconAppID
__ Preferences: _PSLazyIconLoading
__ Preferences: _PSTableCellHeightKey
__ Preferences: _PSTableCellSubtitleColorKey
__ Preferences: _PSTableCellSubtitleTextKey
__ Preferences: _PSTitleKey
__ Preferences: _PreferencesTableViewCellLeftPad
__ QuartzCore: _OBJC_CLASS_$_CAAnimationGroup
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_METACLASS_$_CAGradientLayer
__ QuartzCore: _kCAFilterScreenBlendMode
__ QuartzCore: _kCAFilterSourceOver
__ QuartzCore: _kCAFilterXor
__ QuartzCore: _kCALineCapRound
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ StoreBookkeeperClient: _OBJC_CLASS_$_SBCPlaybackPositionDomain
__ StoreBookkeeperClient: _OBJC_CLASS_$_SBCPlaybackPositionEntity
__ StoreBookkeeperClient: _OBJC_CLASS_$_SBCPlaybackPositionService
__ StoreBookkeeperClient: _OBJC_CLASS_$_SBCPlaybackPositionSyncService
__ StoreKit: _OBJC_CLASS_$_SKAccountPageViewController
__ StoreKit: _OBJC_CLASS_$_SKStoreProductViewController
__ StoreKit: _SKAccountPageRedeemURLString
__ StoreKitUI: _OBJC_CLASS_$_SKUIItem
__ StoreKitUI: _SKUIItemDeviceFamilyIsTVOnly
__ StoreServices: _OBJC_CLASS_$_SSAccountStore
__ StoreServices: _OBJC_CLASS_$_SSAuthenticateRequest
__ StoreServices: _OBJC_CLASS_$_SSAuthorizationRequest
__ StoreServices: _OBJC_CLASS_$_SSDevice
__ StoreServices: _OBJC_CLASS_$_SSDownload
__ StoreServices: _OBJC_CLASS_$_SSDownloadManager
__ StoreServices: _OBJC_CLASS_$_SSDownloadManagerOptions
__ StoreServices: _OBJC_CLASS_$_SSEntity
__ StoreServices: _OBJC_CLASS_$_SSMutableAuthenticationContext
__ StoreServices: _OBJC_CLASS_$_SSMutableURLRequestProperties
__ StoreServices: _OBJC_CLASS_$_SSPrivacyController
__ StoreServices: _OBJC_CLASS_$_SSPurchase
__ StoreServices: _OBJC_CLASS_$_SSPurchaseRequest
__ StoreServices: _OBJC_CLASS_$_SSRentalCheckinRequest
__ StoreServices: _OBJC_CLASS_$_SSRentalCheckoutRequest
__ StoreServices: _OBJC_CLASS_$_SSRentalInformationRequest
__ StoreServices: _OBJC_CLASS_$_SSRentalSyncRequest
__ StoreServices: _OBJC_CLASS_$_SSURLBag
__ StoreServices: _OBJC_CLASS_$_SSURLBagContext
__ StoreServices: _OBJC_CLASS_$_SSVLoadURLOperation
__ StoreServices: _OBJC_CLASS_$_SSVPlatformRequestOperation
__ StoreServices: _OBJC_CLASS_$_SSVSAPSignatureComponent
__ StoreServices: _OBJC_CLASS_$_SSVSAPSignaturePolicy
__ StoreServices: _SSAVAssetDownloadTokenDownloadComplete
__ StoreServices: _SSAccountStoreActiveAccountChangedNotification
__ StoreServices: _SSDeviceIsHDRCapable
__ StoreServices: _SSDownloadAssetPropertyDownloadToken
__ StoreServices: _SSDownloadAssetPropertyIsHLS
__ StoreServices: _SSDownloadAssetPropertyLocalPath
__ StoreServices: _SSDownloadAssetPropertyURL
__ StoreServices: _SSDownloadAssetTypeMedia
__ StoreServices: _SSDownloadKindAudiobook
__ StoreServices: _SSDownloadKindEBook
__ StoreServices: _SSDownloadKindIsSoftwareKind
__ StoreServices: _SSDownloadKindMovie
__ StoreServices: _SSDownloadKindMusic
__ StoreServices: _SSDownloadKindMusicVideo
__ StoreServices: _SSDownloadKindOther
__ StoreServices: _SSDownloadKindPodcast
__ StoreServices: _SSDownloadKindSoftwareApplication
__ StoreServices: _SSDownloadKindTelevisionEpisode
__ StoreServices: _SSDownloadKindTone
__ StoreServices: _SSDownloadPhaseCanceled
__ StoreServices: _SSDownloadPhaseDownloading
__ StoreServices: _SSDownloadPhaseFailed
__ StoreServices: _SSDownloadPhaseFinished
__ StoreServices: _SSDownloadPhasePaused
__ StoreServices: _SSDownloadPropertyArtistName
__ StoreServices: _SSDownloadPropertyArtworkIsPrerendered
__ StoreServices: _SSDownloadPropertyBundleIdentifier
__ StoreServices: _SSDownloadPropertyIsHLS
__ StoreServices: _SSDownloadPropertyIsHighDefinition
__ StoreServices: _SSDownloadPropertyIsRental
__ StoreServices: _SSDownloadPropertyKind
__ StoreServices: _SSDownloadPropertyLibraryItemIdentifier
__ StoreServices: _SSDownloadPropertySoftwareType
__ StoreServices: _SSDownloadPropertyStoreItemIdentifier
__ StoreServices: _SSDownloadPropertyStorePreorderIdentifier
__ StoreServices: _SSDownloadPropertyTitle
__ StoreServices: _SSDownloadSoftwareTypeNewsstand
__ StoreServices: _SSLookupItemOfferTextTypeDownloading
__ StoreServices: _SSLookupKeyProfileProduct
__ StoreServices: _SSLookupParameterItemIdentifiers
__ StoreServices: _SSLookupParameterProtocolVersion
__ StoreServices: _SSLookupPropertyHasInAppPurchases
__ StoreServices: _SSNetworkTypeIsCellularType
__ StoreServices: _SSPrivacyIdentifierTVApp
__ StoreServices: _SSVFairPlayGetHardwareInfo
__ TVMLKit: _OBJC_CLASS_$_TVAppStyle
__ TVMLKit: _OBJC_CLASS_$_TVApplicationController
__ TVMLKit: _OBJC_CLASS_$_TVApplicationControllerContext
__ TVMLKit: _OBJC_CLASS_$_TVButton
__ TVMLKit: _OBJC_CLASS_$_TVCornerUtilities
__ TVMLKit: _OBJC_CLASS_$_TVElementFactory
__ TVMLKit: _OBJC_CLASS_$_TVFocusableTextView
__ TVMLKit: _OBJC_CLASS_$_TVImage
__ TVMLKit: _OBJC_CLASS_$_TVImageDescription
__ TVMLKit: _OBJC_CLASS_$_TVImageLayout
__ TVMLKit: _OBJC_CLASS_$_TVImageOutlineDecorator
__ TVMLKit: _OBJC_CLASS_$_TVImageProxy
__ TVMLKit: _OBJC_CLASS_$_TVImageScaleDecorator
__ TVMLKit: _OBJC_CLASS_$_TVInterfaceFactory
__ TVMLKit: _OBJC_CLASS_$_TVMLUtilities
__ TVMLKit: _OBJC_CLASS_$_TVMLViewFactory
__ TVMLKit: _OBJC_CLASS_$_TVMediaInfo
__ TVMLKit: _OBJC_CLASS_$_TVModalPresenter
__ TVMLKit: _OBJC_CLASS_$_TVObservableEventController
__ TVMLKit: _OBJC_CLASS_$_TVRatingBadgeLayout
__ TVMLKit: _OBJC_CLASS_$_TVRatingBadgeView
__ TVMLKit: _OBJC_CLASS_$_TVShelfViewLayoutInvalidationContext
__ TVMLKit: _OBJC_CLASS_$_TVStyleFactory
__ TVMLKit: _OBJC_CLASS_$_TVTemplateFeaturesManager
__ TVMLKit: _OBJC_CLASS_$_TVURLDescription
__ TVMLKit: _OBJC_CLASS_$_TVURLImageLoader
__ TVMLKit: _OBJC_CLASS_$_TVViewFactory
__ TVMLKit: _OBJC_CLASS_$_TVViewLayout
__ TVMLKit: _OBJC_CLASS_$__TVAppDocumentController
__ TVMLKit: _OBJC_CLASS_$__TVAppDocumentRequestController
__ TVMLKit: _OBJC_CLASS_$__TVAppLoadingView
__ TVMLKit: _OBJC_CLASS_$__TVAppNavigationController
__ TVMLKit: _OBJC_CLASS_$__TVAppNavigationController_iOS
__ TVMLKit: _OBJC_CLASS_$__TVBgImageLoadingViewController
__ TVMLKit: _OBJC_CLASS_$__TVCollectionView
__ TVMLKit: _OBJC_CLASS_$__TVCollectionViewFlowLayout
__ TVMLKit: _OBJC_CLASS_$__TVImageView
__ TVMLKit: _OBJC_CLASS_$__TVLabel
__ TVMLKit: _OBJC_CLASS_$__TVModalPresenter
__ TVMLKit: _OBJC_CLASS_$__TVProgressView
__ TVMLKit: _OBJC_CLASS_$__TVResourceImageLoader
__ TVMLKit: _OBJC_CLASS_$__TVShelfViewController
__ TVMLKit: _OBJC_CLASS_$__TVShelfViewLayout
__ TVMLKit: _OBJC_CLASS_$__TVStackScrollStop
__ TVMLKit: _OBJC_CLASS_$__TVStackTemplateController
__ TVMLKit: _OBJC_METACLASS_$_TVApplicationController
__ TVMLKit: _OBJC_METACLASS_$_TVFocusableTextView
__ TVMLKit: _OBJC_METACLASS_$_TVMediaInfo
__ TVMLKit: _OBJC_METACLASS_$_TVViewLayout
__ TVMLKit: _OBJC_METACLASS_$__TVAppDocumentRequestController
__ TVMLKit: _OBJC_METACLASS_$__TVAppNavigationController_iOS
__ TVMLKit: _OBJC_METACLASS_$__TVBgImageLoadingViewController
__ TVMLKit: _OBJC_METACLASS_$__TVLabel
__ TVMLKit: _OBJC_METACLASS_$__TVShelfViewController
__ TVMLKit: _OBJC_METACLASS_$__TVStackTemplateController
__ TVMLKit: _TVAppRootViewControllerCurrentNavigationControllerDidChangeNotification
__ TVMLKit: _TVAttributeKeyHandlesOverflow
__ TVMLKit: _TVAttributeKeyImg_AspectRatio
__ TVMLKit: _TVAttributeKeyImg_Format
__ TVMLKit: _TVAttributeKeyImg_Src
__ TVMLKit: _TVAttributeKeyImg_Srcset
__ TVMLKit: _TVAttributeKeyImg_Width
__ TVMLKit: _TVAttributeKeyMode
__ TVMLKit: _TVAttributeKeySupportsContextMenu
__ TVMLKit: _TVAttributeKeyTheme
__ TVMLKit: _TVAttributeKeyType
__ TVMLKit: _TVAttributeKeyValue
__ TVMLKit: _TVCornerRadiiZero
__ TVMLKit: _TVElementEventContextMenu
__ TVMLKit: _TVElementEventHighlight
__ TVMLKit: _TVElementEventHoldSelect
__ TVMLKit: _TVElementEventPlay
__ TVMLKit: _TVElementEventSelect
__ TVMLKit: _TVElementKeyAlertTemplate
__ TVMLKit: _TVElementKeyBaseTemplate
__ TVMLKit: _TVElementKeyCard
__ TVMLKit: _TVElementKeyDescription
__ TVMLKit: _TVElementKeyFooter
__ TVMLKit: _TVElementKeyHeader
__ TVMLKit: _TVElementKeyInfo
__ TVMLKit: _TVElementKeyInfoTable
__ TVMLKit: _TVElementKeyOverlay
__ TVMLKit: _TVElementKeyPlaylist
__ TVMLKit: _TVElementKeyRatingBadge
__ TVMLKit: _TVElementKeySearchTemplate
__ TVMLKit: _TVElementKeySection
__ TVMLKit: _TVElementKeySeparator
__ TVMLKit: _TVElementKeyStackTemplate
__ TVMLKit: _TVElementKeySubtitle
__ TVMLKit: _TVElementKeyText
__ TVMLKit: _TVElementKeyTitle
__ TVMLKit: _TVElementKeyTitleImage
__ TVMLKit: _TVHighlightStyleShowOnHighlight
__ TVMLKit: _TVMLImageViewImageDidLoadNotification
__ TVMLKit: _TVMLKitSignpostLogObject
__ TVMLKit: _TVRatingStyleStarLarge
__ TVMLKit: _TVRatingStyleStarMedium
__ TVMLKit: _TVRatingStyleStarSmall
__ TVMLKit: _TVSelectedMediaInfoDidChangeEvent
__ TVMLKit: _TVViewElementStyleHighlightStyle
__ TVMLKit: _TVViewElementStyleTextMaxLines
__ TVMLKit: _TVViewElementStyleWidth
__ TVMLKit: __TVAppTemplateImpressionableTestAndAddToMultableArray
__ TVPlayback: _OBJC_CLASS_$_TVPBaseMediaItem
__ TVPlayback: _OBJC_CLASS_$_TVPClipMediaItem
__ TVPlayback: _OBJC_CLASS_$_TVPContentKeyRequest
__ TVPlayback: _OBJC_CLASS_$_TVPContentKeySession
__ TVPlayback: _OBJC_CLASS_$_TVPDownloadSession
__ TVPlayback: _OBJC_CLASS_$_TVPMediaItemAdvisoryInfo
__ TVPlayback: _OBJC_CLASS_$_TVPMediaItemSkipInfo
__ TVPlayback: _OBJC_CLASS_$_TVPPlaybackReportingEventCollection
__ TVPlayback: _OBJC_CLASS_$_TVPPlaybackState
__ TVPlayback: _OBJC_CLASS_$_TVPPlaybackUtilities
__ TVPlayback: _OBJC_CLASS_$_TVPPlayer
__ TVPlayback: _OBJC_CLASS_$_TVPPlaylist
__ TVPlayback: _OBJC_CLASS_$_TVPStateMachine
__ TVPlayback: _OBJC_CLASS_$_TVPTimeRange
__ TVPlayback: _OBJC_METACLASS_$_TVPBaseMediaItem
__ TVPlayback: _OBJC_METACLASS_$_TVPPlayer
__ TVPlayback: _TVPDurationIndefinite
__ TVPlayback: _TVPErrorIsFatalSKDError
__ TVPlayback: _TVPErrorIsSKDError
__ TVPlayback: _TVPMediaItemCellularSettingsDidChange
__ TVPlayback: _TVPMediaItemMetadataAVURLAssetAlternativeConfigurationOptions
__ TVPlayback: _TVPMediaItemMetadataAcquisitionDictionary
__ TVPlayback: _TVPMediaItemMetadataAdvisoryInfo
__ TVPlayback: _TVPMediaItemMetadataArtworkImageProxy
__ TVPlayback: _TVPMediaItemMetadataArtworkURLString
__ TVPlayback: _TVPMediaItemMetadataBookmarkNetTime
__ TVPlayback: _TVPMediaItemMetadataBrandID
__ TVPlayback: _TVPMediaItemMetadataBrandName
__ TVPlayback: _TVPMediaItemMetadataBuyParams
__ TVPlayback: _TVPMediaItemMetadataCanonicalID
__ TVPlayback: _TVPMediaItemMetadataCommonSenseRating
__ TVPlayback: _TVPMediaItemMetadataContainsClosedCaptions
__ TVPlayback: _TVPMediaItemMetadataContentRating
__ TVPlayback: _TVPMediaItemMetadataContentRatingDomain
__ TVPlayback: _TVPMediaItemMetadataContentRatingDomainMovie
__ TVPlayback: _TVPMediaItemMetadataContentRatingDomainTVShow
__ TVPlayback: _TVPMediaItemMetadataContentRatingRanking
__ TVPlayback: _TVPMediaItemMetadataContentRatingSystem
__ TVPlayback: _TVPMediaItemMetadataDSID
__ TVPlayback: _TVPMediaItemMetadataDateReleased
__ TVPlayback: _TVPMediaItemMetadataDownloadDestinationURL
__ TVPlayback: _TVPMediaItemMetadataDownloadTaskIdentifier
__ TVPlayback: _TVPMediaItemMetadataDownloadToken
__ TVPlayback: _TVPMediaItemMetadataDuration
__ TVPlayback: _TVPMediaItemMetadataEpisodeNumber
__ TVPlayback: _TVPMediaItemMetadataExternalIdentifier
__ TVPlayback: _TVPMediaItemMetadataExternalProfileIdentifier
__ TVPlayback: _TVPMediaItemMetadataExternalServiceIdentifier
__ TVPlayback: _TVPMediaItemMetadataExtrasURL
__ TVPlayback: _TVPMediaItemMetadataFeatureStartTime
__ TVPlayback: _TVPMediaItemMetadataFileSize
__ TVPlayback: _TVPMediaItemMetadataForceStreaming
__ TVPlayback: _TVPMediaItemMetadataFrequencyOfConfirmationAlert
__ TVPlayback: _TVPMediaItemMetadataGenre
__ TVPlayback: _TVPMediaItemMetadataHTTPHeaders
__ TVPlayback: _TVPMediaItemMetadataHasAudioDescriptions
__ TVPlayback: _TVPMediaItemMetadataHasDolbyAtmos
__ TVPlayback: _TVPMediaItemMetadataHasSDH
__ TVPlayback: _TVPMediaItemMetadataIsAdultContent
__ TVPlayback: _TVPMediaItemMetadataKeyBagPathFileURL
__ TVPlayback: _TVPMediaItemMetadataLiveStreamServiceID
__ TVPlayback: _TVPMediaItemMetadataLongDescription
__ TVPlayback: _TVPMediaItemMetadataMaxHLSVideoResolution
__ TVPlayback: _TVPMediaItemMetadataMediaDownloadState
__ TVPlayback: _TVPMediaItemMetadataMediaMetrics
__ TVPlayback: _TVPMediaItemMetadataMediaType
__ TVPlayback: _TVPMediaItemMetadataOverrideStreamingQualityToForceHD
__ TVPlayback: _TVPMediaItemMetadataPostPlayStartTime
__ TVPlayback: _TVPMediaItemMetadataRatingImageURL
__ TVPlayback: _TVPMediaItemMetadataReferenceID
__ TVPlayback: _TVPMediaItemMetadataRentalExpirationDate
__ TVPlayback: _TVPMediaItemMetadataRentalID
__ TVPlayback: _TVPMediaItemMetadataRentalPlaybackDuration
__ TVPlayback: _TVPMediaItemMetadataRentalPlaybackStartDate
__ TVPlayback: _TVPMediaItemMetadataRequiredAgeForPlayback
__ TVPlayback: _TVPMediaItemMetadataRollInfo
__ TVPlayback: _TVPMediaItemMetadataScrubImageVideoMediaItem
__ TVPlayback: _TVPMediaItemMetadataScrubPlayerItem
__ TVPlayback: _TVPMediaItemMetadataSeasonCanonicalID
__ TVPlayback: _TVPMediaItemMetadataSeasonNumber
__ TVPlayback: _TVPMediaItemMetadataSeriesTitle
__ TVPlayback: _TVPMediaItemMetadataServiceIdentifier
__ TVPlayback: _TVPMediaItemMetadataShouldDisplayRatingOverlay
__ TVPlayback: _TVPMediaItemMetadataShowCanonicalID
__ TVPlayback: _TVPMediaItemMetadataSkipInfo
__ TVPlayback: _TVPMediaItemMetadataSoundCheckMediaKind
__ TVPlayback: _TVPMediaItemMetadataStartTime
__ TVPlayback: _TVPMediaItemMetadataStoreFrontIdentifier
__ TVPlayback: _TVPMediaItemMetadataStoreItemIdentifier
__ TVPlayback: _TVPMediaItemMetadataTitle
__ TVPlayback: _TVPMediaItemMetadataTomatoFreshness
__ TVPlayback: _TVPMediaItemMetadataTomatoPercentage
__ TVPlayback: _TVPMediaItemMetadataVPAFInfo
__ TVPlayback: _TVPMediaItemMetadataVideoRange
__ TVPlayback: _TVPMediaItemMetadataVideoResolutionClass
__ TVPlayback: _TVPMediaItemMetadataiTunesStoreContentInfo
__ TVPlayback: _TVPMediaItemPlaybackErrorDidOccurNotification
__ TVPlayback: _TVPMediaItemPlaybackErrorKey
__ TVPlayback: _TVPMediaItemPlaybackErrorShouldStopKey
__ TVPlayback: _TVPMediaItemPlaybackReportingEventCollection
__ TVPlayback: _TVPMediaItemTraitCellularPlaybackProhibited
__ TVPlayback: _TVPMediaItemTraitDisableResumeMenu
__ TVPlayback: _TVPMediaItemTraitDisableScrubbing
__ TVPlayback: _TVPMediaItemTraitHasHLS
__ TVPlayback: _TVPMediaItemTraitIncludeStoreCookiesInContentRequests
__ TVPlayback: _TVPMediaItemTraitInheritURIQueryComponentFromReferencingURI
__ TVPlayback: _TVPMediaItemTraitIsHD
__ TVPlayback: _TVPMediaItemTraitIsLocal
__ TVPlayback: _TVPMediaItemTraitIsRental
__ TVPlayback: _TVPMediaItemTraitIsStreaming
__ TVPlayback: _TVPMediaItemTraitPreventSpeculativeLoading
__ TVPlayback: _TVPMediaItemTraitStopWhenAppIsBackgrounded
__ TVPlayback: _TVPMediaItemTraitSupportsBookmarks
__ TVPlayback: _TVPMediaItemTraitSupportsPlayCounts
__ TVPlayback: _TVPMediaItemTraitSupportsReporting
__ TVPlayback: _TVPMediaItemTraitUseTempDownload
__ TVPlayback: _TVPMediaTypeHomeVideo
__ TVPlayback: _TVPMediaTypeMovie
__ TVPlayback: _TVPMediaTypeMoviePreview
__ TVPlayback: _TVPMediaTypeMovieRental
__ TVPlayback: _TVPMediaTypeTVEpisode
__ TVPlayback: _TVPMediaTypeTVEpisodePreview
__ TVPlayback: _TVPPerformBlockOnMainThreadIfNeeded
__ TVPlayback: _TVPPlaybackChangeReasonErrorDidOccur
__ TVPlayback: _TVPPlaybackChangeReasonPlaybackDidStall
__ TVPlayback: _TVPPlaybackChangeReasonPlayedToEndOfMediaItem
__ TVPlayback: _TVPPlaybackCurrentMediaItemChangeReasonKey
__ TVPlayback: _TVPPlaybackCurrentMediaItemDidChangeNotification
__ TVPlayback: _TVPPlaybackCurrentMediaItemWillChangeNotification
__ TVPlayback: _TVPPlaybackErrorKey
__ TVPlayback: _TVPPlaybackErrorNotification
__ TVPlayback: _TVPPlaybackReportingActionTypeExtras
__ TVPlayback: _TVPPlaybackReportingActionTypeLibrary
__ TVPlayback: _TVPPlaybackReportingActionTypeLink
__ TVPlayback: _TVPPlaybackReportingActionTypePostPlay
__ TVPlayback: _TVPPlaybackReportingActionTypeProductPage
__ TVPlayback: _TVPPlaybackReportingActionTypeUpNext
__ TVPlayback: _TVPPlaybackReportingEventBookmarkSync
__ TVPlayback: _TVPPlaybackReportingEventBookmarkSyncPerformed
__ TVPlayback: _TVPPlaybackReportingEventBuyProduct
__ TVPlayback: _TVPPlaybackReportingEventBuyProductBlockedPlaybackStartup
__ TVPlayback: _TVPPlaybackReportingEventError
__ TVPlayback: _TVPPlaybackReportingEventErrorEvent
__ TVPlayback: _TVPPlaybackReportingEventFPSCertFetch
__ TVPlayback: _TVPPlaybackReportingEventFPSOverallFetch
__ TVPlayback: _TVPPlaybackReportingEventFPSRequestDataGeneration
__ TVPlayback: _TVPPlaybackReportingEventFPSServerKeyFetch
__ TVPlayback: _TVPPlaybackReportingEventFPSServerProcessingTimeMS
__ TVPlayback: _TVPPlaybackReportingEventFPSURLBagFetch
__ TVPlayback: _TVPPlaybackReportingEventFPSUsingCachedCertData
__ TVPlayback: _TVPPlaybackReportingEventLinearTokenFetch
__ TVPlayback: _TVPPlaybackReportingEventOpenURLTime
__ TVPlayback: _TVPPlaybackReportingEventPlaybackInitiationAction
__ TVPlayback: _TVPPlaybackReportingEventPlaybackStartupResult
__ TVPlayback: _TVPPlaybackReportingEventRentalCheckout
__ TVPlayback: _TVPPlaybackReportingEventTotalStartupSequence
__ TVPlayback: _TVPPlaybackReportingEventUserPlayToLoadingInitiation
__ TVPlayback: _TVPPlaybackReportingEventValueCancelled
__ TVPlayback: _TVPPlaybackReportingEventValueError
__ TVPlayback: _TVPPlaybackReportingEventValueSuccess
__ TVPlayback: _TVPPlaybackStateChangeReasonKey
__ TVPlayback: _TVPPlaybackStateDidChangeNotification
__ TVPlayback: _TVPPlaybackStateNewStateKey
__ TVPlayback: _TVPPlaybackStateWillChangeNotification
__ TVPlayback: _TVPPlaybackWillStopDueToErrorKey
__ TVPlayback: _TVPPlayerExternalPlaybackTypeDidChangeNotification
__ TVPlayback: _TVPPlayerUnqueueudPlayerItemReadyNotification
__ TVPlayback: _TVPSKDDeviceLimitErrorUserInfoKey
__ TVPlayback: _TVPSKDErrorDomain
__ TVPlayback: _TVPSKDErrorWithCode
__ TVUIKit: _OBJC_CLASS_$__TVCarouselView
__ TVUIKit: _OBJC_CLASS_$__TVContentRating
__ TVUIKit: _OBJC_CLASS_$__TVContentRatingBadgeManager
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSKernAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSShadowAttributeName
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSParagraphStyle
__ UIKit: _OBJC_CLASS_$_NSShadow
__ UIKit: _OBJC_CLASS_$_UIAction
__ UIKit: _OBJC_CLASS_$_UIActivity
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIActivityViewController
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UICollectionReusableView
__ UIKit: _OBJC_CLASS_$_UICollectionView
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_CLASS_$_UICollectionViewLayout
__ UIKit: _OBJC_CLASS_$_UICollectionViewLayoutAttributes
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIContextMenuConfiguration
__ UIKit: _OBJC_CLASS_$_UIContextMenuInteraction
__ UIKit: _OBJC_CLASS_$_UIContextualAction
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILargeContentViewerInteraction
__ UIKit: _OBJC_CLASS_$_UILayoutGuide
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIMailActivity
__ UIKit: _OBJC_CLASS_$_UIMenu
__ UIKit: _OBJC_CLASS_$_UIMessageActivity
__ UIKit: _OBJC_CLASS_$_UINavigationBar
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UIPageViewController
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_CLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPresentationController
__ UIKit: _OBJC_CLASS_$_UIPreviewInteraction
__ UIKit: _OBJC_CLASS_$_UIResponder
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISplitViewController
__ UIKit: _OBJC_CLASS_$_UISpringTimingParameters
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UISwipeActionsConfiguration
__ UIKit: _OBJC_CLASS_$_UISwitch
__ UIKit: _OBJC_CLASS_$_UITabBarController
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UITextField
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIVibrancyEffect
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$__UIBackdropView
__ UIKit: _OBJC_CLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_CLASS_$__UIContextMenuStyle
__ UIKit: _OBJC_CLASS_$__UIRepeatingPressGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIActivity
__ UIKit: _OBJC_METACLASS_$_UIActivityViewController
__ UIKit: _OBJC_METACLASS_$_UIBlurEffect
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UICollectionReusableView
__ UIKit: _OBJC_METACLASS_$_UICollectionView
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UICollectionViewFlowLayout
__ UIKit: _OBJC_METACLASS_$_UICollectionViewLayout
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UINavigationBar
__ UIKit: _OBJC_METACLASS_$_UINavigationController
__ UIKit: _OBJC_METACLASS_$_UIPercentDrivenInteractiveTransition
__ UIKit: _OBJC_METACLASS_$_UIPresentationController
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UISplitViewController
__ UIKit: _OBJC_METACLASS_$_UIStackView
__ UIKit: _OBJC_METACLASS_$_UITableView
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIVisualEffectView
__ UIKit: _UIAccessibilityDarkerSystemColorsEnabled
__ UIKit: _UIAccessibilityIsBoldTextEnabled
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIActivityTypeAddToReadingList
__ UIKit: _UIActivityTypeAirDrop
__ UIKit: _UIActivityTypeAssignToContact
__ UIKit: _UIActivityTypeCopyToPasteboard
__ UIKit: _UIActivityTypeMail
__ UIKit: _UIActivityTypeMarkupAsPDF
__ UIKit: _UIActivityTypeMessage
__ UIKit: _UIActivityTypeOpenInIBooks
__ UIKit: _UIActivityTypePostToFacebook
__ UIKit: _UIActivityTypePostToFlickr
__ UIKit: _UIActivityTypePostToTencentWeibo
__ UIKit: _UIActivityTypePostToTwitter
__ UIKit: _UIActivityTypePostToVimeo
__ UIKit: _UIActivityTypePostToWeibo
__ UIKit: _UIActivityTypePrint
__ UIKit: _UIActivityTypeSaveToCameraRoll
__ UIKit: _UIApp
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationOpenURLOptionsAnnotationKey
__ UIKit: _UIApplicationOpenURLOptionsSourceApplicationKey
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIBackgroundTaskInvalid
__ UIKit: _UICollectionElementKindSectionFooter
__ UIKit: _UICollectionElementKindSectionHeader
__ UIKit: _UIContentSizeCategoryAccessibilityExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryAccessibilityExtraExtraLarge
__ UIKit: _UIContentSizeCategoryAccessibilityExtraLarge
__ UIKit: _UIContentSizeCategoryAccessibilityLarge
__ UIKit: _UIContentSizeCategoryAccessibilityMedium
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraLarge
__ UIKit: _UIContentSizeCategoryExtraSmall
__ UIKit: _UIContentSizeCategoryIsAccessibilityCategory
__ UIKit: _UIContentSizeCategoryLarge
__ UIKit: _UIContentSizeCategoryMedium
__ UIKit: _UIContentSizeCategorySmall
__ UIKit: _UIContentSizeCategoryUnspecified
__ UIKit: _UIDistanceBetweenPoints
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorFamilyAttribute
__ UIKit: _UIFontDescriptorFeatureSettingsAttribute
__ UIKit: _UIFontDescriptorNameAttribute
__ UIKit: _UIFontDescriptorTextStyleAttribute
__ UIKit: _UIFontDescriptorTraitsAttribute
__ UIKit: _UIFontFeatureSelectorIdentifierKey
__ UIKit: _UIFontFeatureTypeIdentifierKey
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCallout
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleHeadline2
__ UIKit: _UIFontTextStyleSubhead
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontTextStyleSubtitle1
__ UIKit: _UIFontTextStyleSubtitle2
__ UIKit: _UIFontTextStyleSubtitle3
__ UIKit: _UIFontTextStyleTitle0
__ UIKit: _UIFontTextStyleTitle1
__ UIKit: _UIFontTextStyleTitle2
__ UIKit: _UIFontTextStyleTitle3
__ UIKit: _UIFontWeightBlack
__ UIKit: _UIFontWeightBold
__ UIKit: _UIFontWeightHeavy
__ UIKit: _UIFontWeightLight
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIFontWeightSemibold
__ UIKit: _UIFontWeightThin
__ UIKit: _UIFontWeightTrait
__ UIKit: _UIFontWeightUltraLight
__ UIKit: _UIGraphicsBeginImageContext
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIGraphicsPopContext
__ UIKit: _UIGraphicsPushContext
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UILayoutFittingCompressedSize
__ UIKit: _UILayoutFittingExpandedSize
__ UIKit: _UIMenuDeferredMenuPlaceholder
__ UIKit: _UIOffsetZero
__ UIKit: _UIPageViewControllerOptionInterPageSpacingKey
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectFill
__ UIKit: _UIRectFillUsingBlendMode
__ UIKit: _UIRectGetCenter
__ UIKit: _UIScrollViewDecelerationRateFast
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewControllerKey
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ VideoSubscriberAccount: _OBJC_CLASS_$_VSAccountChannelsCenter
__ VideoSubscriberAccount: _OBJC_CLASS_$_VSAccountStore
__ VideoSubscriberAccount: _VSAccountStoreDidChangeNotification
__ VideosUICore: _OBJC_CLASS_$_VUIAsynchronousOperation
__ VideosUICore: _OBJC_CLASS_$_VUIAsynchronousWorkToken
__ VideosUICore: _OBJC_CLASS_$_VUICollectionChange
__ VideosUICore: _OBJC_CLASS_$_VUICollectionChangeSet
__ VideosUICore: _OBJC_CLASS_$_VUICollectionComparator
__ VideosUICore: _OBJC_CLASS_$_VUIDelayOperation
__ VideosUICore: _OBJC_CLASS_$_VUIEntitiesSortedByDateValueTransformer
__ VideosUICore: _OBJC_CLASS_$_VUIMobileGestaltLookup
__ VideosUICore: _OBJC_CLASS_$_VUINetworkReachabilityMonitor
__ VideosUICore: _OBJC_CLASS_$_VUIRestrictions
__ VideosUICore: _OBJC_CLASS_$_VUISortUtilities
__ VideosUICore: _OBJC_CLASS_$_VUITitleSortDescriptor
__ VideosUICore: _OBJC_METACLASS_$_VUIAsynchronousOperation
__ VideosUICore: _VUIBoolLogString
__ VideosUICore: _VUIDurationValueTransformerName
__ VideosUICore: _VUIErrorCancelled
__ VideosUICore: _VUINetworkReachabilityMonitorNetworkReachabilityDidChangeNotification
__ VideosUICore: _VUINetworkReachabilityMonitorNetworkReachabilityDidChangeUserInfoKeyNetworkReachable
__ VideosUICore: _VUIRequireMainThread
__ WatchListKit: _OBJC_CLASS_$_WLKAppInstaller
__ WatchListKit: _OBJC_CLASS_$_WLKAppLibrary
__ WatchListKit: _OBJC_CLASS_$_WLKChannelDetails
__ WatchListKit: _OBJC_CLASS_$_WLKChannelUtilities
__ WatchListKit: _OBJC_CLASS_$_WLKConfigurationManager
__ WatchListKit: _OBJC_CLASS_$_WLKContinueWatchingRequestOperation
__ WatchListKit: _OBJC_CLASS_$_WLKDictionaryResponseProcessor
__ WatchListKit: _OBJC_CLASS_$_WLKFavoritesModificationRequestOperation
__ WatchListKit: _OBJC_CLASS_$_WLKLocationManager
__ WatchListKit: _OBJC_CLASS_$_WLKMarkAsWatchedRequestOperation
__ WatchListKit: _OBJC_CLASS_$_WLKNotificationCenter
__ WatchListKit: _OBJC_CLASS_$_WLKOfferManager
__ WatchListKit: _OBJC_CLASS_$_WLKOnboarding
__ WatchListKit: _OBJC_CLASS_$_WLKPlaybackReporter
__ WatchListKit: _OBJC_CLASS_$_WLKPlaybackSummary
__ WatchListKit: _OBJC_CLASS_$_WLKRemoveFromPlayHistoryRequestOperation
__ WatchListKit: _OBJC_CLASS_$_WLKSettingsCloudUtilities
__ WatchListKit: _OBJC_CLASS_$_WLKSettingsStore
__ WatchListKit: _OBJC_CLASS_$_WLKStoreOffer
__ WatchListKit: _OBJC_CLASS_$_WLKURLBagUtilities
__ WatchListKit: _OBJC_CLASS_$_WLKURLRequestProperties
__ WatchListKit: _OBJC_CLASS_$_WLKUTSNetworkRequestOperation
__ WatchListKit: _OBJC_CLASS_$_WLKUserEnvironment
__ WatchListKit: _OBJC_CLASS_$_WLKWatchListModificationRequestOperation
__ WatchListKit: _WLKAppLibraryDidChangeNotification
__ WatchListKit: _WLKAppLibraryDidChangeNotificationInstalledChangesKey
__ WatchListKit: _WLKAppLibraryDidChangeNotificationSubscribedChangesKey
__ WatchListKit: _WLKAppLibraryDidChangeNotificationTestChangesKey
__ WatchListKit: _WLKBaseURLOverride
__ WatchListKit: _WLKChannelUtilitiesChannelIDiTunes
__ WatchListKit: _WLKConfigurationDidChangeNotification
__ WatchListKit: _WLKConfigurationUTSKDidChangeNotification
__ WatchListKit: _WLKConnectionClientInterface
__ WatchListKit: _WLKConnectionServerInterface
__ WatchListKit: _WLKDidReportPlaybackNotification
__ WatchListKit: _WLKFetchNowPlayingEnabled
__ WatchListKit: _WLKFetchNowPlayingEnabledReturningError
__ WatchListKit: _WLKFetchPrivacyAcknowledgementURLWithCompletionHandler
__ WatchListKit: _WLKIsRegulatedSKU
__ WatchListKit: _WLKIsTVApp
__ WatchListKit: _WLKLocationKeyLatitude
__ WatchListKit: _WLKLocationKeyLongitude
__ WatchListKit: _WLKLocationManagerAuthorizationStatusDidChangeNotification
__ WatchListKit: _WLKLocationManagerLocationDidChangeNotification
__ WatchListKit: _WLKLocationManagerNotificationUserInfoStatusKey
__ WatchListKit: _WLKNetworkSignpostLogObject
__ WatchListKit: _WLKNetworkingLogObject
__ WatchListKit: _WLKNotificationsKeyActionURL
__ WatchListKit: _WLKNotificationsKeySource
__ WatchListKit: _WLKProtocolVersionOverride
__ WatchListKit: _WLKRequireNonNilParameter
__ WatchListKit: _WLKSettingsDidChangeNotification
__ WatchListKit: _WLKStoreOfferPeriodTypeMonth
__ WatchListKit: _WLKStoreOfferPeriodTypeYear
__ WatchListKit: _WLKSubscriptionIdentifierForBundleID
__ WatchListKit: _WLKTVAppBundleID
__ iTunesStore: _ISErrorDomain
__ iTunesStore: _ISNetworkTypeChangedNotification
__ iTunesStore: _OBJC_CLASS_$_ISNetworkObserver
__ iTunesStore: _OBJC_CLASS_$_ISURLOperation
__ iTunesStore: _kISFailureTypeKey
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetProductType
__ libSystem.B.dylib: _CC_MD5
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __dispatch_source_type_vnode
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _abort
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _lround
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
VUILocalizationManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *overideLocDict

  // class methods
  +[VUILocalizationManager sharedInstance]

  // instance methods
  -[VUILocalizationManager .cxx_destruct]
  -[VUILocalizationManager localizedStringForKey:]
  -[VUILocalizationManager overideLocDict]
  -[VUILocalizationManager setOverideLocDict:]
  -[VUILocalizationManager localizedStringForKey:withCounts:]
  -[VUILocalizationManager updateWithJSDictionary:]


VUIAppDocumentAutomaticUpdateContext : NSObject /usr/lib/libSystem.B.dylib <VUIAppDocumentUpdateContext>
 @property  IKUpdateServiceRequest *currentUpdateRequest
 @property  NSArray *receivedEvents
 @property  NSMutableOrderedSet *remainingViewElements
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIAppDocumentAutomaticUpdateContext init]
  -[VUIAppDocumentAutomaticUpdateContext .cxx_destruct]
  -[VUIAppDocumentAutomaticUpdateContext receivedEvents]
  -[VUIAppDocumentAutomaticUpdateContext setReceivedEvents:]
  -[VUIAppDocumentAutomaticUpdateContext remainingViewElements]
  -[VUIAppDocumentAutomaticUpdateContext _documentUpdateRequestForViewElement:appContext:documentRef:]
  -[VUIAppDocumentAutomaticUpdateContext setCurrentUpdateRequest:]
  -[VUIAppDocumentAutomaticUpdateContext updateRequestCompletedWithViewElements:documentRef:]
  -[VUIAppDocumentAutomaticUpdateContext updateCurrentUpdateRequestWithAppContext:documentRef:]
  -[VUIAppDocumentAutomaticUpdateContext currentUpdateRequest]
  -[VUIAppDocumentAutomaticUpdateContext initWithEvents:viewElements:]
  -[VUIAppDocumentAutomaticUpdateContext setRemainingViewElements:]


VUIAppDocumentManualUpdateContext : NSObject /usr/lib/libSystem.B.dylib <VUIAppDocumentUpdateContext>
 @property  IKUpdateServiceRequest *currentUpdateRequest
 @property  NSDictionary *contextDictionary
 @property  IKViewElement *viewElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIAppDocumentManualUpdateContext init]
  -[VUIAppDocumentManualUpdateContext .cxx_destruct]
  -[VUIAppDocumentManualUpdateContext contextDictionary]
  -[VUIAppDocumentManualUpdateContext setContextDictionary:]
  -[VUIAppDocumentManualUpdateContext viewElement]
  -[VUIAppDocumentManualUpdateContext setViewElement:]
  -[VUIAppDocumentManualUpdateContext setCurrentUpdateRequest:]
  -[VUIAppDocumentManualUpdateContext updateRequestCompletedWithViewElements:documentRef:]
  -[VUIAppDocumentManualUpdateContext updateCurrentUpdateRequestWithAppContext:documentRef:]
  -[VUIAppDocumentManualUpdateContext currentUpdateRequest]
  -[VUIAppDocumentManualUpdateContext initWithContextDictionary:viewElement:]


VUIAppDocumentPurchaseEvent : VUIAppDocumentUpdateEvent <NSCopying>
 @property  NSString *canonicalID

  // instance methods
  -[VUIAppDocumentPurchaseEvent .cxx_destruct]
  -[VUIAppDocumentPurchaseEvent dictionaryRepresentation]
  -[VUIAppDocumentPurchaseEvent initWithDescriptor:]
  -[VUIAppDocumentPurchaseEvent canonicalID]
  -[VUIAppDocumentPurchaseEvent _purchaseEventDescriptor]
  -[VUIAppDocumentPurchaseEvent initWithPurchaseEventDescriptor:]
  -[VUIAppDocumentPurchaseEvent setCanonicalID:]


VUIUpsellOfferView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKImageElement *imageElement
 @property  IKViewElement *viewElement
 @property  VUIUpsellOfferViewLayout *layout
 @property  VUILabel *titleLabel
 @property  VUILabel *descriptionLabel
 @property  _TVImageView *imageView

  // class methods
  +[VUIUpsellOfferView upsellViewFromElement:existingView:]

  // instance methods
  -[VUIUpsellOfferView .cxx_destruct]
  -[VUIUpsellOfferView layout]
  -[VUIUpsellOfferView setLayout:]
  -[VUIUpsellOfferView titleLabel]
  -[VUIUpsellOfferView sizeThatFits:]
  -[VUIUpsellOfferView layoutSubviews]
  -[VUIUpsellOfferView imageView]
  -[VUIUpsellOfferView setTitleLabel:]
  -[VUIUpsellOfferView setDescriptionLabel:]
  -[VUIUpsellOfferView descriptionLabel]
  -[VUIUpsellOfferView setImageView:]
  -[VUIUpsellOfferView viewElement]
  -[VUIUpsellOfferView imageElement]
  -[VUIUpsellOfferView setViewElement:]
  -[VUIUpsellOfferView setImageElement:]
  -[VUIUpsellOfferView _iOS_layoutWithSize:metricsOnly:]


VUIMPMediaEntitiesFetchOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  NSArray *requests
 @property  NSArray *responses
 @property  NSError *error
 @property  NSOperationQueue *privateQueue
 @property  VUIMPMediaLibrary *mediaLibrary

  // instance methods
  -[VUIMPMediaEntitiesFetchOperation init]
  -[VUIMPMediaEntitiesFetchOperation .cxx_destruct]
  -[VUIMPMediaEntitiesFetchOperation error]
  -[VUIMPMediaEntitiesFetchOperation setError:]
  -[VUIMPMediaEntitiesFetchOperation requests]
  -[VUIMPMediaEntitiesFetchOperation setRequests:]
  -[VUIMPMediaEntitiesFetchOperation responses]
  -[VUIMPMediaEntitiesFetchOperation setResponses:]
  -[VUIMPMediaEntitiesFetchOperation mediaLibrary]
  -[VUIMPMediaEntitiesFetchOperation setMediaLibrary:]
  -[VUIMPMediaEntitiesFetchOperation privateQueue]
  -[VUIMPMediaEntitiesFetchOperation executionDidBegin]
  -[VUIMPMediaEntitiesFetchOperation setPrivateQueue:]
  -[VUIMPMediaEntitiesFetchOperation initWithMediaLibrary:requests:]


VUIFavoriteView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIFavoriteViewLayout *layout
 @property  VUILabel *titleLabel
 @property  _TVImageView *logoImageView
 @property  _TVImageView *accessoryImageView
 @property  IKViewElement *viewElement
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView

  // instance methods
  -[VUIFavoriteView .cxx_destruct]
  -[VUIFavoriteView layout]
  -[VUIFavoriteView setLayout:]
  -[VUIFavoriteView titleLabel]
  -[VUIFavoriteView sizeThatFits:]
  -[VUIFavoriteView layoutSubviews]
  -[VUIFavoriteView setTitleLabel:]
  -[VUIFavoriteView setSemanticContentAttribute:]
  -[VUIFavoriteView accessoryImageView]
  -[VUIFavoriteView topSeparatorView]
  -[VUIFavoriteView bottomSeparatorView]
  -[VUIFavoriteView viewElement]
  -[VUIFavoriteView setViewElement:]
  -[VUIFavoriteView logoImageView]
  -[VUIFavoriteView setLogoImageView:]
  -[VUIFavoriteView setTopSeparatorView:]
  -[VUIFavoriteView setBottomSeparatorView:]
  -[VUIFavoriteView setAccessoryImageView:]
  -[VUIFavoriteView prepareForCellReuse]


VUIAppInstallerViewController : UINavigationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  <WLKInstallable> *installable
 @property  NSString *localizedContentTitle
 @property  NSString *contentType
 @property  NSString *confirmationTitle
 @property  NSString *confirmationBody
 @property  NSString *updateBody
 @property  NSString *updateTitle
 @property  NSString *confirmationInstallButtonTitle
 @property  BOOL displayAppStoreLink
 @property  BOOL displaySecondaryLink
 @property  NSString *secondaryLinkTitle
 @property  @? secondaryLinkHandler

  // instance methods
  -[VUIAppInstallerViewController init]
  -[VUIAppInstallerViewController .cxx_destruct]
  -[VUIAppInstallerViewController contentType]
  -[VUIAppInstallerViewController setContentType:]
  -[VUIAppInstallerViewController loadView]
  -[VUIAppInstallerViewController supportedInterfaceOrientations]
  -[VUIAppInstallerViewController confirmationTitle]
  -[VUIAppInstallerViewController setConfirmationTitle:]
  -[VUIAppInstallerViewController updateTitle]
  -[VUIAppInstallerViewController initWithInstallable:]
  -[VUIAppInstallerViewController setConfirmationBody:]
  -[VUIAppInstallerViewController beginInstallingAppWithProgressHandler:completion:]
  -[VUIAppInstallerViewController setUpdateTitle:]
  -[VUIAppInstallerViewController _dismissAppInstallWithCompletion:]
  -[VUIAppInstallerViewController _beginInstallingApp]
  -[VUIAppInstallerViewController setSecondaryLinkTitle:]
  -[VUIAppInstallerViewController secondaryLinkHandler]
  -[VUIAppInstallerViewController setSecondaryLinkHandler:]
  -[VUIAppInstallerViewController _initConfirmation]
  -[VUIAppInstallerViewController _updateWithInstallProgress:]
  -[VUIAppInstallerViewController _finishInstallationWithCompletion:]
  -[VUIAppInstallerViewController installable]
  -[VUIAppInstallerViewController localizedContentTitle]
  -[VUIAppInstallerViewController setLocalizedContentTitle:]
  -[VUIAppInstallerViewController confirmationBody]
  -[VUIAppInstallerViewController updateBody]
  -[VUIAppInstallerViewController setUpdateBody:]
  -[VUIAppInstallerViewController confirmationInstallButtonTitle]
  -[VUIAppInstallerViewController setConfirmationInstallButtonTitle:]
  -[VUIAppInstallerViewController displayAppStoreLink]
  -[VUIAppInstallerViewController setDisplayAppStoreLink:]
  -[VUIAppInstallerViewController displaySecondaryLink]
  -[VUIAppInstallerViewController setDisplaySecondaryLink:]
  -[VUIAppInstallerViewController secondaryLinkTitle]


VideosExtrasActivityIndicator : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasActivityIndicator .cxx_destruct]
  -[VideosExtrasActivityIndicator intrinsicContentSize]
  -[VideosExtrasActivityIndicator setAlpha:]
  -[VideosExtrasActivityIndicator initWithElement:]


VUILibraryEpisodeShelfViewController : VUIShelfViewController <UICollectionViewDataSource, UICollectionViewDelegate, TVShelfViewLayoutDelegate, VUIEpisodeDetailViewControllerDelegate, VUIDialogInteractionControllerDelegate, VUILibraryDownloadPopoverViewControllerDelegate, VUILocalContentProtocol>
 @property  NSArray *episodeViewModels
 @property  VUIEpisodeDetailViewController *episodeDetailViewController
 @property  NSIndexPath *popoverIndexPath
 @property  BOOL shouldIgnoreSelectEvent
 @property  <VUILibraryEpisodeShelfViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL onlyShowLocalContent

  // instance methods
  -[VUILibraryEpisodeShelfViewController delegate]
  -[VUILibraryEpisodeShelfViewController setDelegate:]
  -[VUILibraryEpisodeShelfViewController .cxx_destruct]
  -[VUILibraryEpisodeShelfViewController traitCollectionDidChange:]
  -[VUILibraryEpisodeShelfViewController viewWillAppear:]
  -[VUILibraryEpisodeShelfViewController viewWillDisappear:]
  -[VUILibraryEpisodeShelfViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryEpisodeShelfViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryEpisodeShelfViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibraryEpisodeShelfViewController willMoveToParentViewController:]
  -[VUILibraryEpisodeShelfViewController collectionView:shouldSelectItemAtIndexPath:]
  -[VUILibraryEpisodeShelfViewController collectionView:didSelectItemAtIndexPath:]
  -[VUILibraryEpisodeShelfViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryEpisodeShelfViewController _updateHeaderView]
  -[VUILibraryEpisodeShelfViewController updateWithEpisodes:andChangeSet:]
  -[VUILibraryEpisodeShelfViewController setEpisodeDetailViewController:]
  -[VUILibraryEpisodeShelfViewController _updateViewWithFetchedEpisodes:andChangeSet:]
  -[VUILibraryEpisodeShelfViewController episodeDetailViewController]
  -[VUILibraryEpisodeShelfViewController _episodeWithIdentifier:]
  -[VUILibraryEpisodeShelfViewController _canRemoveEpisodeAtIndexPath:]
  -[VUILibraryEpisodeShelfViewController onlyShowLocalContent]
  -[VUILibraryEpisodeShelfViewController setOnlyShowLocalContent:]
  -[VUILibraryEpisodeShelfViewController _episodeViewModelsWithFetchedEpisodes:]
  -[VUILibraryEpisodeShelfViewController updateShelfLayout:]
  -[VUILibraryEpisodeShelfViewController episodeDetailViewControllerWasDismissed:]
  -[VUILibraryEpisodeShelfViewController dialogInteractionController:shouldBeginInteractionForIndexPath:]
  -[VUILibraryEpisodeShelfViewController dialogInteractionController:interactionDidBeginForIndexPath:]
  -[VUILibraryEpisodeShelfViewController dialogInteractionController:interactionDidEndForIndexPath:]
  -[VUILibraryEpisodeShelfViewController removeDownloadPressed]
  -[VUILibraryEpisodeShelfViewController removeDownloadDismissed]
  -[VUILibraryEpisodeShelfViewController initWithEpisodes:]
  -[VUILibraryEpisodeShelfViewController configureWithCollectionView:]
  -[VUILibraryEpisodeShelfViewController _configureShelfLayout:]
  -[VUILibraryEpisodeShelfViewController episodeViewModels]
  -[VUILibraryEpisodeShelfViewController setEpisodeViewModels:]
  -[VUILibraryEpisodeShelfViewController popoverIndexPath]
  -[VUILibraryEpisodeShelfViewController setPopoverIndexPath:]
  -[VUILibraryEpisodeShelfViewController shouldIgnoreSelectEvent]
  -[VUILibraryEpisodeShelfViewController setShouldIgnoreSelectEvent:]


VUILibraryEpisodeShelfEpisodeViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIMediaItem *episode
 @property  NSObject<VUIMediaEntityAssetController> *assetController

  // instance methods
  -[VUILibraryEpisodeShelfEpisodeViewModel .cxx_destruct]
  -[VUILibraryEpisodeShelfEpisodeViewModel setEpisode:]
  -[VUILibraryEpisodeShelfEpisodeViewModel episode]
  -[VUILibraryEpisodeShelfEpisodeViewModel assetController]
  -[VUILibraryEpisodeShelfEpisodeViewModel setAssetController:]


VUIOpenURLHandler : NSObject /usr/lib/libSystem.B.dylib
 @property  @? completionHandler
 @property  NSURL *deferredOpenURL
 @property  @? deferredOpenURLCompletion
 @property  BOOL openedByDeeplink

  // class methods
  +[VUIOpenURLHandler sharedInstance]
  +[VUIOpenURLHandler _getIDfromURLQueryParameters:idKeyName:]
  +[VUIOpenURLHandler _insertPageBehindTop:viewControllers:clearStack:]
  +[VUIOpenURLHandler _handleDeeplinkAction:completionHandler:]
  +[VUIOpenURLHandler _pushPageViewControllers:viewControllers:skipLastViewController:]

  // instance methods
  -[VUIOpenURLHandler .cxx_destruct]
  -[VUIOpenURLHandler completionHandler]
  -[VUIOpenURLHandler setCompletionHandler:]
  -[VUIOpenURLHandler _processLocalLink:appContext:completion:]
  -[VUIOpenURLHandler _processNonLocalLink:appContext:completion:]
  -[VUIOpenURLHandler _handleOpenURLRouterDataSource:appContext:clearStack:startDate:]
  -[VUIOpenURLHandler setDeferredOpenURL:]
  -[VUIOpenURLHandler setDeferredOpenURLCompletion:]
  -[VUIOpenURLHandler deferredOpenURL]
  -[VUIOpenURLHandler deferredOpenURLCompletion]
  -[VUIOpenURLHandler processURL:appContext:completion:]
  -[VUIOpenURLHandler _processLocalLibraryLink:playbackInitiationDate:openURLCompletionDate:]
  -[VUIOpenURLHandler _fetchLocalMediaWithAdamID:completionHandler:]
  -[VUIOpenURLHandler parseURL:appContext:completion:]
  -[VUIOpenURLHandler processEntityWithContextData:appContext:]
  -[VUIOpenURLHandler saveDeferredURL:completion:]
  -[VUIOpenURLHandler handleDeferredURLWithAppContext:]
  -[VUIOpenURLHandler openedByDeeplink]
  -[VUIOpenURLHandler setOpenedByDeeplink:]


VUIStoreFPSKeyLoader : NSObject /usr/lib/libSystem.B.dylib
 @property  NSURL *certificateURL
 @property  NSURL *keyServerURL
 @property  long long state
 @property  NSData *certificateData
 @property  NSMutableArray *requestsAwaitingCertFetch
 @property  TVPContentKeyRequest *savedRequestToUseForStopping
 @property  NSDate *keyExpirationDate
 @property  NSDate *rentalPlaybackStartDate
 @property  BOOL hasLoadedAnyStreamingKeyRequests
 @property  TVPContentKeySession *contentKeySession
 @property  NSMutableDictionary *keyIdentifierPenaltyBox
 @property  NSURL *secureInvalidationNonceURL
 @property  NSNumber *secureInvalidationDSID
 @property  NSObject<VUIStoreFPSKeyLoaderDelegate> *delegate
 @property  TVPPlaybackReportingEventCollection *eventCollection
 @property  NSNumber *rentalID
 @property  BOOL didSkipRentalCheckout
 @property  BOOL usesKeyIdentifierPenaltyBox

  // class methods
  +[VUIStoreFPSKeyLoader initialize]
  +[VUIStoreFPSKeyLoader preFetchFPSCertificate]
  +[VUIStoreFPSKeyLoader _loadAndCacheCertificateDataForValidURL:completion:]
  +[VUIStoreFPSKeyLoader _loadFPSURLsFromStoreBagWithCompletion:]

  // instance methods
  -[VUIStoreFPSKeyLoader delegate]
  -[VUIStoreFPSKeyLoader setDelegate:]
  -[VUIStoreFPSKeyLoader .cxx_destruct]
  -[VUIStoreFPSKeyLoader state]
  -[VUIStoreFPSKeyLoader setState:]
  -[VUIStoreFPSKeyLoader certificateData]
  -[VUIStoreFPSKeyLoader contentKeySession]
  -[VUIStoreFPSKeyLoader keyServerURL]
  -[VUIStoreFPSKeyLoader rentalID]
  -[VUIStoreFPSKeyLoader setRentalID:]
  -[VUIStoreFPSKeyLoader certificateURL]
  -[VUIStoreFPSKeyLoader setCertificateURL:]
  -[VUIStoreFPSKeyLoader setKeyServerURL:]
  -[VUIStoreFPSKeyLoader setCertificateData:]
  -[VUIStoreFPSKeyLoader rentalPlaybackStartDate]
  -[VUIStoreFPSKeyLoader setRentalPlaybackStartDate:]
  -[VUIStoreFPSKeyLoader sendStopRequest]
  -[VUIStoreFPSKeyLoader eventCollection]
  -[VUIStoreFPSKeyLoader setEventCollection:]
  -[VUIStoreFPSKeyLoader didSkipRentalCheckout]
  -[VUIStoreFPSKeyLoader savedRequestToUseForStopping]
  -[VUIStoreFPSKeyLoader setSavedRequestToUseForStopping:]
  -[VUIStoreFPSKeyLoader setDidSkipRentalCheckout:]
  -[VUIStoreFPSKeyLoader loadFairPlayStreamingKeyRequests:completion:]
  -[VUIStoreFPSKeyLoader requestsAwaitingCertFetch]
  -[VUIStoreFPSKeyLoader setRequestsAwaitingCertFetch:]
  -[VUIStoreFPSKeyLoader setContentKeySession:]
  -[VUIStoreFPSKeyLoader _startKeyRequestsInBatches:completion:]
  -[VUIStoreFPSKeyLoader _failKeyRequests:withError:]
  -[VUIStoreFPSKeyLoader _loadCertificateDataWithCompletion:]
  -[VUIStoreFPSKeyLoader secureInvalidationNonceURL]
  -[VUIStoreFPSKeyLoader secureInvalidationDSID]
  -[VUIStoreFPSKeyLoader _invalidateValidKeyRequestsInBatches:completion:]
  -[VUIStoreFPSKeyLoader _sendKeyRequestsToServer:isStopRequest:isSecureInvalidationRequest:completion:]
  -[VUIStoreFPSKeyLoader keyIdentifierPenaltyBox]
  -[VUIStoreFPSKeyLoader _generateSecureInvalidationDataForRequests:completion:]
  -[VUIStoreFPSKeyLoader _loadNonceDataForRequests:completion:]
  -[VUIStoreFPSKeyLoader _generateSecureInvalidationDataForFirstRequest:completion:]
  -[VUIStoreFPSKeyLoader _startKeyRequests:completion:]
  -[VUIStoreFPSKeyLoader _generateKeyRequestDataForKeyRequests:completion:]
  -[VUIStoreFPSKeyLoader setHasLoadedAnyStreamingKeyRequests:]
  -[VUIStoreFPSKeyLoader _bodyJSONDataForRequests:isStopRequest:]
  -[VUIStoreFPSKeyLoader _handleResponseForKeyRequests:responseData:URLResponse:error:]
  -[VUIStoreFPSKeyLoader _handleResponseDicts:forKeyRequests:]
  -[VUIStoreFPSKeyLoader _handleResponseDict:forKeyRequest:]
  -[VUIStoreFPSKeyLoader keyExpirationDate]
  -[VUIStoreFPSKeyLoader setKeyExpirationDate:]
  -[VUIStoreFPSKeyLoader _errorForStoreResponseStatus:deviceLimit:]
  -[VUIStoreFPSKeyLoader usesKeyIdentifierPenaltyBox]
  -[VUIStoreFPSKeyLoader _jsonDictionaryForRequest:isStopRequest:]
  -[VUIStoreFPSKeyLoader initWithCertificateURL:keyServerURL:]
  -[VUIStoreFPSKeyLoader invalidateKeysWithRequests:completion:]
  -[VUIStoreFPSKeyLoader removeAllEntriesFromKeyIdentifierPenaltyBox]
  -[VUIStoreFPSKeyLoader setSecureInvalidationNonceURL:]
  -[VUIStoreFPSKeyLoader setSecureInvalidationDSID:]
  -[VUIStoreFPSKeyLoader hasLoadedAnyStreamingKeyRequests]
  -[VUIStoreFPSKeyLoader setUsesKeyIdentifierPenaltyBox:]
  -[VUIStoreFPSKeyLoader setKeyIdentifierPenaltyBox:]


VUIMediaEntitiesFetchController : VUIMediaLibraryFetchController
 @property  NSArray *requests
 @property  NSArray *responses
 @property  <VUIMediaEntitiesFetchControllerDelegate> *delegate
 @property  VUIMediaEntityFetchResponse *response

  // instance methods
  -[VUIMediaEntitiesFetchController delegate]
  -[VUIMediaEntitiesFetchController setDelegate:]
  -[VUIMediaEntitiesFetchController .cxx_destruct]
  -[VUIMediaEntitiesFetchController response]
  -[VUIMediaEntitiesFetchController requests]
  -[VUIMediaEntitiesFetchController setRequests:]
  -[VUIMediaEntitiesFetchController responses]
  -[VUIMediaEntitiesFetchController setResponses:]
  -[VUIMediaEntitiesFetchController cancelFetch]
  -[VUIMediaEntitiesFetchController _notifyDelegateWithBlock:]
  -[VUIMediaEntitiesFetchController initWithMediaLibrary:]
  -[VUIMediaEntitiesFetchController _handleManualFetchControllerOperationDidComplete:]
  -[VUIMediaEntitiesFetchController _handleContentsChangeFetchControllerOperationDidComplete:]
  -[VUIMediaEntitiesFetchController _updateResponseWithResult:replaceContentsOnNilChanges:]
  -[VUIMediaEntitiesFetchController _notifyFetchRequests:didCompleteWithResult:]
  -[VUIMediaEntitiesFetchController _notifyFetchRequests:didFailWithError:]
  -[VUIMediaEntitiesFetchController initWithMediaLibrary:fetchRequests:]
  -[VUIMediaEntitiesFetchController _fetchOperationForFetchReason:]
  -[VUIMediaEntitiesFetchController _didCompleteFetchOperation:]


VUIContextMenuCardViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *titleTextViewLayout
 @property  VUITextLayout *subTitleTextViewLayout
 @property  TVImageLayout *coverImageViewLayout
 @property  TVImageLayout *badgeImageViewLayout

  // class methods
  +[VUIContextMenuCardViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIContextMenuCardViewLayout init]
  -[VUIContextMenuCardViewLayout .cxx_destruct]
  -[VUIContextMenuCardViewLayout titleTextViewLayout]
  -[VUIContextMenuCardViewLayout subTitleTextViewLayout]
  -[VUIContextMenuCardViewLayout coverImageViewLayout]
  -[VUIContextMenuCardViewLayout setCoverImageViewLayout:]
  -[VUIContextMenuCardViewLayout badgeImageViewLayout]
  -[VUIContextMenuCardViewLayout setBadgeImageViewLayout:]
  -[VUIContextMenuCardViewLayout setTitleTextViewLayout:]
  -[VUIContextMenuCardViewLayout setSubTitleTextViewLayout:]


VideosExtrasBorderedImageView : UIImageView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  {CGAffineTransform=dddddd} deferredTransform
 @property  BOOL shouldDeferSettingTransform
 @property  BOOL shouldUseTransformWhenReplicatingState
 @property  BOOL shouldSkipImageWhenReplicatingState
 @property  UIColor *borderColor
 @property  double borderWidth

  // instance methods
  -[VideosExtrasBorderedImageView setTransform:]
  -[VideosExtrasBorderedImageView setBorderColor:]
  -[VideosExtrasBorderedImageView _shouldAnimatePropertyWithKey:]
  -[VideosExtrasBorderedImageView borderWidth]
  -[VideosExtrasBorderedImageView setBorderWidth:]
  -[VideosExtrasBorderedImageView borderColor]
  -[VideosExtrasBorderedImageView shouldDeferSettingTransform]
  -[VideosExtrasBorderedImageView setDeferredTransform:]
  -[VideosExtrasBorderedImageView shouldSkipImageWhenReplicatingState]
  -[VideosExtrasBorderedImageView shouldUseTransformWhenReplicatingState]
  -[VideosExtrasBorderedImageView replicateStateFromImageView:]
  -[VideosExtrasBorderedImageView deferredTransform]
  -[VideosExtrasBorderedImageView setShouldDeferSettingTransform:]
  -[VideosExtrasBorderedImageView setShouldUseTransformWhenReplicatingState:]
  -[VideosExtrasBorderedImageView setShouldSkipImageWhenReplicatingState:]


VUIMediaLibraryManager : NSObject /usr/lib/libSystem.B.dylib <VUIHomeShareMediaLibraryManagerDelegate>
 @property  VUIDeviceMediaLibrary *deviceMediaLibrary
 @property  VUISidebandMediaLibrary *sidebandMediaLibrary
 @property  VUIAggregateMediaLibrary *aggregateMediaLibrary
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSObject<VUIHomeShareMediaLibraryManager> *homeShareManager
 @property  NSObject<OS_dispatch_queue> *completionDispatchQueue
 @property  NSArray *homeShareMediaLibraries
 @property  VUIMediaLibrary *activeMediaLibrary
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMediaLibraryManager defaultManager]
  +[VUIMediaLibraryManager setDeleteAllVideosAndKeysOnInitializationForAppRemoval:]

  // instance methods
  -[VUIMediaLibraryManager init]
  -[VUIMediaLibraryManager .cxx_destruct]
  -[VUIMediaLibraryManager deviceMediaLibrary]
  -[VUIMediaLibraryManager completionDispatchQueue]
  -[VUIMediaLibraryManager _deviceMediaLibrary]
  -[VUIMediaLibraryManager _homeShareMediaLibraryManager]
  -[VUIMediaLibraryManager serialProcessingDispatchQueue]
  -[VUIMediaLibraryManager homeShareManager]
  -[VUIMediaLibraryManager homeShareMediaLibraries]
  -[VUIMediaLibraryManager _mediaLibraryForIdentifier:]
  -[VUIMediaLibraryManager _postHomeShareMediaLibrariesDidChangeNotificationWithMediaLibraries:andChangeSet:]
  -[VUIMediaLibraryManager _enqueueStrongSelfCompletionQueueBlock:]
  -[VUIMediaLibraryManager _enqueueCompletionQueueBlock:]
  -[VUIMediaLibraryManager sidebandMediaLibrary]
  -[VUIMediaLibraryManager homeShareManager:mediaLibrariesDidUpdate:withChangeSet:]
  -[VUIMediaLibraryManager setCompletionDispatchQueue:]
  -[VUIMediaLibraryManager beginDiscoveringHomeShareMediaLibraries]
  -[VUIMediaLibraryManager endDiscoveringHomeShareMediaLibraries]
  -[VUIMediaLibraryManager mediaLibraryForIdentifier:]
  -[VUIMediaLibraryManager activeMediaLibrary]
  -[VUIMediaLibraryManager setActiveMediaLibrary:]
  -[VUIMediaLibraryManager setDeviceMediaLibrary:]
  -[VUIMediaLibraryManager setSidebandMediaLibrary:]
  -[VUIMediaLibraryManager aggregateMediaLibrary]
  -[VUIMediaLibraryManager setAggregateMediaLibrary:]
  -[VUIMediaLibraryManager setSerialProcessingDispatchQueue:]
  -[VUIMediaLibraryManager setHomeShareManager:]


VUIFavoritesRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *ongoingEntityIDOperationDictionary

  // class methods
  +[VUIFavoritesRequestManager sharedInstance]

  // instance methods
  -[VUIFavoritesRequestManager init]
  -[VUIFavoritesRequestManager .cxx_destruct]
  -[VUIFavoritesRequestManager _init]
  -[VUIFavoritesRequestManager ongoingEntityIDOperationDictionary]
  -[VUIFavoritesRequestManager sendRequestForEntityID:teamName:action:]
  -[VUIFavoritesRequestManager setOngoingEntityIDOperationDictionary:]


VUITopAlignedCollectionViewFlowLayout : UICollectionViewFlowLayout /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VUITopAlignedCollectionViewFlowLayout layoutAttributesForElementsInRect:]
  -[VUITopAlignedCollectionViewFlowLayout shouldInvalidateLayoutForBoundsChange:]


VUIAppNavigationController : _TVAppNavigationController_iOS /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
  // instance methods
  -[VUIAppNavigationController presentConfirmationDialogWithType:]
  -[VUIAppNavigationController _presentConfirmationViewController:preferredContentSize:]
  -[VUIAppNavigationController presentConfirmationDialogWithType:name:]


VUIMediaLibraryApplicationController : NSObject /usr/lib/libSystem.B.dylib
 @property  <VUIMediaLibraryApplicationControllerDelegate> *delegate

  // class methods
  +[VUIMediaLibraryApplicationController defaultController]

  // instance methods
  -[VUIMediaLibraryApplicationController delegate]
  -[VUIMediaLibraryApplicationController setDelegate:]
  -[VUIMediaLibraryApplicationController .cxx_destruct]
  -[VUIMediaLibraryApplicationController settingsURL]
  -[VUIMediaLibraryApplicationController isCellularDataForPlaybackEnabled]
  -[VUIMediaLibraryApplicationController shouldWarnAboutPlaybackQualityForRentalMediaItem:]
  -[VUIMediaLibraryApplicationController clearCellularPlaybackQualityOverrides]
  -[VUIMediaLibraryApplicationController overrideCellularPlaybackQuality:forMediaItem:]
  -[VUIMediaLibraryApplicationController assetTypeForRentalMediaItem:]
  -[VUIMediaLibraryApplicationController removeRentalMediaItem:withCompletion:]


VideosExtrasTableViewHeaderView : UITableViewHeaderFooterView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasTableViewHeaderView dealloc]
  -[VideosExtrasTableViewHeaderView intrinsicContentSize]
  -[VideosExtrasTableViewHeaderView initWithReuseIdentifier:]
  -[VideosExtrasTableViewHeaderView _dynamicTypeDidChange]
  -[VideosExtrasTableViewHeaderView configureForHeaderElement:]


VUIScopedBackgroundTask : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long taskIdentifier

  // instance methods
  -[VUIScopedBackgroundTask init]
  -[VUIScopedBackgroundTask dealloc]
  -[VUIScopedBackgroundTask taskIdentifier]
  -[VUIScopedBackgroundTask setTaskIdentifier:]
  -[VUIScopedBackgroundTask initWithIdentifier:expirationHandler:]


VUIMediaEntityFetchResponseChangesOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  NSArray *fetchResponseChanges
 @property  NSError *error
 @property  NSArray *latestFetchResponses
 @property  NSArray *currentFetchResponses

  // class methods
  +[VUIMediaEntityFetchResponseChangesOperation _changeSetFromCurrentMediaEntities:toLatestMediaEntities:]

  // instance methods
  -[VUIMediaEntityFetchResponseChangesOperation init]
  -[VUIMediaEntityFetchResponseChangesOperation .cxx_destruct]
  -[VUIMediaEntityFetchResponseChangesOperation error]
  -[VUIMediaEntityFetchResponseChangesOperation setError:]
  -[VUIMediaEntityFetchResponseChangesOperation executionDidBegin]
  -[VUIMediaEntityFetchResponseChangesOperation setCurrentFetchResponses:]
  -[VUIMediaEntityFetchResponseChangesOperation fetchResponseChanges]
  -[VUIMediaEntityFetchResponseChangesOperation _preloadMediaEntityMetadata]
  -[VUIMediaEntityFetchResponseChangesOperation currentFetchResponses]
  -[VUIMediaEntityFetchResponseChangesOperation latestFetchResponses]
  -[VUIMediaEntityFetchResponseChangesOperation _mediaEntitiesChangeSetWithLatestFetchResponse:currentFetchResponse:]
  -[VUIMediaEntityFetchResponseChangesOperation _groupingChangeSetWithLatestFetchResponse:currentFetchResponse:]
  -[VUIMediaEntityFetchResponseChangesOperation setFetchResponseChanges:]
  -[VUIMediaEntityFetchResponseChangesOperation _preloadMetadataForFetchResponse:]
  -[VUIMediaEntityFetchResponseChangesOperation _groupingChangeSetWithCurrentGrouping:latestGrouping:]
  -[VUIMediaEntityFetchResponseChangesOperation initWithLatestFetchResponses:currentFetchResponses:]
  -[VUIMediaEntityFetchResponseChangesOperation setLatestFetchResponses:]


VUILibraryCategoryMenuViewModel : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntitiesFetchControllerDelegate, VUIDownloadDataSourceDelegate>
 @property  VUIMediaLibrary *mediaLibrary
 @property  NSArray *homeShares
 @property  NSDictionary *categoryTypeByFetchRequestIdentifier
 @property  VUIMediaEntitiesFetchController *mediaEntitiesFetchController
 @property  NSArray *categoryTypes
 @property  BOOL hasMediaEntitiesFetchCompleted
 @property  BOOL hasStartedFetch
 @property  NSArray *genreGroupings
 @property  NSSet *validCategories
 @property  VUICloudClient *cloudClient
 @property  VUIMediaEntitiesFetchController *rentalsUpdateFetchController
 @property  VUIDownloadDataSource *downloadDataSource
 @property  BOOL hasDownloadDataSourceFetchCompleted
 @property  <VUILibraryCategoryMenuViewModelDelegate> *delegate
 @property  NSDictionary *mediaEntitiesByCategoryType
 @property  NSDictionary *mediaEntitiesByGenreIdentifier
 @property  NSDictionary *artworkInfoDictionaryByPurchaseID
 @property  VUIMenuDataSource *categories
 @property  BOOL hasContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryCategoryMenuViewModel init]
  -[VUILibraryCategoryMenuViewModel dealloc]
  -[VUILibraryCategoryMenuViewModel delegate]
  -[VUILibraryCategoryMenuViewModel setDelegate:]
  -[VUILibraryCategoryMenuViewModel .cxx_destruct]
  -[VUILibraryCategoryMenuViewModel categories]
  -[VUILibraryCategoryMenuViewModel hasContent]
  -[VUILibraryCategoryMenuViewModel setCategories:]
  -[VUILibraryCategoryMenuViewModel cloudClient]
  -[VUILibraryCategoryMenuViewModel mediaLibrary]
  -[VUILibraryCategoryMenuViewModel setMediaLibrary:]
  -[VUILibraryCategoryMenuViewModel downloadManager:downloadsDidChange:]
  -[VUILibraryCategoryMenuViewModel controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryCategoryMenuViewModel controller:fetchRequests:didFailWithError:]
  -[VUILibraryCategoryMenuViewModel _deviceMediaLibrary]
  -[VUILibraryCategoryMenuViewModel setHasMediaEntitiesFetchCompleted:]
  -[VUILibraryCategoryMenuViewModel setHasStartedFetch:]
  -[VUILibraryCategoryMenuViewModel setValidCategories:]
  -[VUILibraryCategoryMenuViewModel validCategories]
  -[VUILibraryCategoryMenuViewModel setHomeShares:]
  -[VUILibraryCategoryMenuViewModel _addMediaLibraryNotificationObservers]
  -[VUILibraryCategoryMenuViewModel setDownloadDataSource:]
  -[VUILibraryCategoryMenuViewModel downloadDataSource]
  -[VUILibraryCategoryMenuViewModel setHasDownloadDataSourceFetchCompleted:]
  -[VUILibraryCategoryMenuViewModel mediaEntitiesFetchController]
  -[VUILibraryCategoryMenuViewModel _removeMediaLibraryNotificationObservers]
  -[VUILibraryCategoryMenuViewModel categoryTypes]
  -[VUILibraryCategoryMenuViewModel hasStartedFetch]
  -[VUILibraryCategoryMenuViewModel _loadMediaEntityShelves]
  -[VUILibraryCategoryMenuViewModel _updateRentalShelf]
  -[VUILibraryCategoryMenuViewModel categoryTypeByFetchRequestIdentifier]
  -[VUILibraryCategoryMenuViewModel setGenreGroupings:]
  -[VUILibraryCategoryMenuViewModel _populateViewModel:]
  -[VUILibraryCategoryMenuViewModel hasMediaEntitiesFetchCompleted]
  -[VUILibraryCategoryMenuViewModel _addNotificationObserversWithDeviceLibrary:]
  -[VUILibraryCategoryMenuViewModel _homeShareMediaLibrariesDidChange:]
  -[VUILibraryCategoryMenuViewModel _removeNotificationObserversWithDeviceLibrary:]
  -[VUILibraryCategoryMenuViewModel homeShares]
  -[VUILibraryCategoryMenuViewModel setCategoryTypes:]
  -[VUILibraryCategoryMenuViewModel _constructCategoryList]
  -[VUILibraryCategoryMenuViewModel _addOrRemoveDownloadCategoryIfNeeded]
  -[VUILibraryCategoryMenuViewModel _fetchRequestsWithMediaLibrary:categoryTypeMap:]
  -[VUILibraryCategoryMenuViewModel setCategoryTypeByFetchRequestIdentifier:]
  -[VUILibraryCategoryMenuViewModel setMediaEntitiesFetchController:]
  -[VUILibraryCategoryMenuViewModel genreGroupings]
  -[VUILibraryCategoryMenuViewModel artworkInfoDictionaryByPurchaseID]
  -[VUILibraryCategoryMenuViewModel setArtworkInfoDictionaryByPurchaseID:]
  -[VUILibraryCategoryMenuViewModel setMediaEntitiesByGenreIdentifier:]
  -[VUILibraryCategoryMenuViewModel _categoryTypesSortComparator]
  -[VUILibraryCategoryMenuViewModel _categoryTypesWithMediaEntitiesMap:categoryTypeComparator:]
  -[VUILibraryCategoryMenuViewModel setMediaEntitiesByCategoryType:]
  -[VUILibraryCategoryMenuViewModel mediaEntitiesByCategoryType]
  -[VUILibraryCategoryMenuViewModel downloadManager:downloadedFetchDidFinishWithEntities:]
  -[VUILibraryCategoryMenuViewModel initWithMediaLibrary:validCategories:]
  -[VUILibraryCategoryMenuViewModel startFetch]
  -[VUILibraryCategoryMenuViewModel updateRentalShelf]
  -[VUILibraryCategoryMenuViewModel _loadImageUrls:]
  -[VUILibraryCategoryMenuViewModel mediaEntitiesByGenreIdentifier]
  -[VUILibraryCategoryMenuViewModel setCloudClient:]
  -[VUILibraryCategoryMenuViewModel rentalsUpdateFetchController]
  -[VUILibraryCategoryMenuViewModel setRentalsUpdateFetchController:]
  -[VUILibraryCategoryMenuViewModel hasDownloadDataSourceFetchCompleted]


VUIAction : NSObject /usr/lib/libSystem.B.dylib <VUIAction>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAction actionWithDictionary:viewElement:appContext:]

  // instance methods
  -[VUIAction isAccountRequired]
  -[VUIAction performWithTargetResponder:completionHandler:]


VUIMediaTagsViewHelper : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[VUIMediaTagsViewHelper .cxx_destruct]
  -[VUIMediaTagsViewHelper initWithMediaItem:]
  -[VUIMediaTagsViewHelper _releaseDateDescriptionFromDate:]
  -[VUIMediaTagsViewHelper _durationDescriptionFromDuration:]
  -[VUIMediaTagsViewHelper _isValidNumber:]
  -[VUIMediaTagsViewHelper _commonSenseString:]
  -[VUIMediaTagsViewHelper _mediaBagdesWithVUIMediaEntity:]
  -[VUIMediaTagsViewHelper initWithContentMetadata:additionalMetadata:]
  -[VUIMediaTagsViewHelper initWithVUIMediaItem:]
  -[VUIMediaTagsViewHelper initWithVUIMediaEntity:]
  -[VUIMediaTagsViewHelper tagsViewDictionary]
  -[VUIMediaTagsViewHelper addSeperatorKey:]


VUIShelfView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *headerView
 @property  UICollectionView *collectionView

  // instance methods
  -[VUIShelfView .cxx_destruct]
  -[VUIShelfView sizeThatFits:]
  -[VUIShelfView layoutSubviews]
  -[VUIShelfView collectionView]
  -[VUIShelfView headerView]
  -[VUIShelfView setHeaderView:]
  -[VUIShelfView setCollectionView:]


VUITextBadgeLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  unsigned long badgeKind
 @property  double cornerRadius
 @property  NSArray *gradientBgColors
 @property  VUITextLayout *textLayout
 @property  TVImageLayout *imageLayout

  // class methods
  +[VUITextBadgeLayout textBadgeTypeFromString:]
  +[VUITextBadgeLayout layoutWithViewElement:withTextBadgeType:]
  +[VUITextBadgeLayout _spotlightBadgeLayoutWithViewElement:]
  +[VUITextBadgeLayout _textBadgeLayoutWithViewElement:withBadgeType:]
  +[VUITextBadgeLayout _badgeSizeForElement:]
  +[VUITextBadgeLayout _glyphImageLayoutWithTintColor:viewElement:]
  +[VUITextBadgeLayout layoutWithViewElement:]

  // instance methods
  -[VUITextBadgeLayout copyWithZone:]
  -[VUITextBadgeLayout .cxx_destruct]
  -[VUITextBadgeLayout setCornerRadius:]
  -[VUITextBadgeLayout cornerRadius]
  -[VUITextBadgeLayout setTextLayout:]
  -[VUITextBadgeLayout textLayout]
  -[VUITextBadgeLayout imageLayout]
  -[VUITextBadgeLayout setImageLayout:]
  -[VUITextBadgeLayout setBadgeKind:]
  -[VUITextBadgeLayout _updateTextColorWithViewElement:defaultColor:]
  -[VUITextBadgeLayout _updateBgColorWithViewElement:defaultColor:]
  -[VUITextBadgeLayout setGradientBgColors:]
  -[VUITextBadgeLayout badgeKind]
  -[VUITextBadgeLayout gradientBgColors]


VUIJSVideosNativeInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSVideosNativeInterface>
  // instance methods
  -[VUIJSVideosNativeInterface locStringForKey:]
  -[VUIJSVideosNativeInterface locStringForKeyWithCounts::]
  -[VUIJSVideosNativeInterface setLocDictionary:]


VUISportsOverlayView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIScorecardViewDelegate, VUIOverlayWithMaterialRendering, VUISportsScoreboardManagerDelegate>
 @property  VUISportsOverlayLayout *overlayLayout
 @property  IKViewElement *viewElement
 @property  VUIScorecardView *scorecardView
 @property  VUISportsScoreboardViewModel *scoreboardViewModel
 @property  BOOL textBadgeHasMaterial
 @property  VUITextBadgeView *textBadge
 @property  _TVImageView *logoView
 @property  IKImageElement *logoElement
 @property  {CGSize=dd} logoSize
 @property  NSOperation *pendingOperation
 @property  UIImage *scorecardViewBackgroundImage
 @property  BOOL backgroundImageHasChanged
 @property  UICollectionReusableView *containingCell
 @property  BOOL isHostSetup
 @property  UIImage *backgroundImageForMaterialRendering
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUISportsOverlayView _sharedDrawQueue]
  +[VUISportsOverlayView _viewBackgroundImageNeedsUpdatingWithFrame:currentBackgroundImage:]
  +[VUISportsOverlayView sportsOverlayViewFromElement:overlayLayout:existingView:]

  // instance methods
  -[VUISportsOverlayView dealloc]
  -[VUISportsOverlayView .cxx_destruct]
  -[VUISportsOverlayView observeValueForKeyPath:ofObject:change:context:]
  -[VUISportsOverlayView reset]
  -[VUISportsOverlayView initWithFrame:]
  -[VUISportsOverlayView layoutSubviews]
  -[VUISportsOverlayView willMoveToWindow:]
  -[VUISportsOverlayView viewElement]
  -[VUISportsOverlayView setViewElement:]
  -[VUISportsOverlayView setLogoSize:]
  -[VUISportsOverlayView logoSize]
  -[VUISportsOverlayView logoView]
  -[VUISportsOverlayView setLogoView:]
  -[VUISportsOverlayView setOverlayLayout:]
  -[VUISportsOverlayView _updateTextBadge:]
  -[VUISportsOverlayView _updateScoreView:]
  -[VUISportsOverlayView _updateBackgroundMaterialImagesWithBackgroundImageSize:performSynchronously:]
  -[VUISportsOverlayView textBadge]
  -[VUISportsOverlayView _setupHosting]
  -[VUISportsOverlayView _updateBadgePosition]
  -[VUISportsOverlayView _registerOverlayView]
  -[VUISportsOverlayView _teardownHosting]
  -[VUISportsOverlayView _unregisterOverlayView]
  -[VUISportsOverlayView _cancelPendingOperation]
  -[VUISportsOverlayView _scorecardViewBackgroundImageNeedsUpdating]
  -[VUISportsOverlayView _redrawScorecardViewWithDuration:]
  -[VUISportsOverlayView _textBadgeBackgroundImageNeedsUpdating]
  -[VUISportsOverlayView _redrawTextBadgeWithDuration:]
  -[VUISportsOverlayView _updateBackgroundImagesWithCompletedOperation:]
  -[VUISportsOverlayView _scorecardViewRequiresBackgroundImage]
  -[VUISportsOverlayView _textBadgeRequiresBackgroundImage]
  -[VUISportsOverlayView _redrawView:withDuration:]
  -[VUISportsOverlayView styleForScorecardView:]
  -[VUISportsOverlayView numberOfRowsInScorecardView:]
  -[VUISportsOverlayView numberOfScoreValuesForScorecardView:inRow:]
  -[VUISportsOverlayView scoreValue:inRow:atIndex:]
  -[VUISportsOverlayView maximumWidthForScorecardView:]
  -[VUISportsOverlayView backgroundImageForScorecardViewMaterial:]
  -[VUISportsOverlayView backgroundBlendModeForScoreValueInRow:atIndex:]
  -[VUISportsOverlayView backgroundImageSizeDidChange:]
  -[VUISportsOverlayView backgroundImageForMaterialRendering]
  -[VUISportsOverlayView setBackgroundImageForMaterialRendering:]
  -[VUISportsOverlayView updateScoreboard:]
  -[VUISportsOverlayView getJSContextDictionary]
  -[VUISportsOverlayView overlayLayout]
  -[VUISportsOverlayView scoreboardViewModel]
  -[VUISportsOverlayView setScoreboardViewModel:]
  -[VUISportsOverlayView scorecardView]
  -[VUISportsOverlayView setScorecardView:]
  -[VUISportsOverlayView textBadgeHasMaterial]
  -[VUISportsOverlayView setTextBadgeHasMaterial:]
  -[VUISportsOverlayView setTextBadge:]
  -[VUISportsOverlayView logoElement]
  -[VUISportsOverlayView setLogoElement:]
  -[VUISportsOverlayView pendingOperation]
  -[VUISportsOverlayView setPendingOperation:]
  -[VUISportsOverlayView scorecardViewBackgroundImage]
  -[VUISportsOverlayView setScorecardViewBackgroundImage:]
  -[VUISportsOverlayView backgroundImageHasChanged]
  -[VUISportsOverlayView setBackgroundImageHasChanged:]
  -[VUISportsOverlayView containingCell]
  -[VUISportsOverlayView setContainingCell:]
  -[VUISportsOverlayView isHostSetup]
  -[VUISportsOverlayView setIsHostSetup:]


VUIActionUpdateUpNext : VUIAction
 @property  NSString *state
 @property  NSString *itemID

  // instance methods
  -[VUIActionUpdateUpNext .cxx_destruct]
  -[VUIActionUpdateUpNext state]
  -[VUIActionUpdateUpNext itemID]
  -[VUIActionUpdateUpNext setState:]
  -[VUIActionUpdateUpNext setItemID:]
  -[VUIActionUpdateUpNext isAccountRequired]
  -[VUIActionUpdateUpNext performWithTargetResponder:completionHandler:]
  -[VUIActionUpdateUpNext initWithContextData:]


VUIOfferCell : VUIFocusableCollectionViewCell <VUIRentalExpirationLabelDelegate>
 @property  IKViewElement *viewElement
 @property  VUIOfferView *offerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIOfferCell configureViewWithElement:existingCell:]

  // instance methods
  -[VUIOfferCell .cxx_destruct]
  -[VUIOfferCell prepareForReuse]
  -[VUIOfferCell initWithFrame:]
  -[VUIOfferCell sizeThatFits:]
  -[VUIOfferCell layoutSubviews]
  -[VUIOfferCell viewElement]
  -[VUIOfferCell setViewElement:]
  -[VUIOfferCell offerView]
  -[VUIOfferCell setOfferView:]
  -[VUIOfferCell rentalExpirationLabelNeedsRelayout:]


VUIMediaLibraryUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMediaLibraryUtilities _sortIndexesForObjects:titleForObjectBlock:]
  +[VUIMediaLibraryUtilities groupingForMediaEntities:groupingKeyPath:groupingSortComparator:performDefaultSort:sortIndexPropertyKey:]
  +[VUIMediaLibraryUtilities sortIndexesForGrouping:]
  +[VUIMediaLibraryUtilities sortIndexesForMediaEntities:sortIndexPropertyKey:]
  +[VUIMediaLibraryUtilities mediaItemEntityTypesSortComparator]


VUIAppsGridViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDataSource, UICollectionViewDelegate, UIViewControllerTransitioningDelegate>
 @property  NSArray *apps
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIAppsGridViewController init]
  -[VUIAppsGridViewController .cxx_destruct]
  -[VUIAppsGridViewController setTitle:]
  -[VUIAppsGridViewController collectionView:numberOfItemsInSection:]
  -[VUIAppsGridViewController collectionView:cellForItemAtIndexPath:]
  -[VUIAppsGridViewController viewDidAppear:]
  -[VUIAppsGridViewController apps]
  -[VUIAppsGridViewController setApps:]
  -[VUIAppsGridViewController _collectionViewClass]


VUIUpNextBannerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <__TVShelfViewControllerDelegate, TVMediaProviding, TVAppTemplateImpressionable>
 @property  IKViewElement *viewElement
 @property  _TVShelfViewController *shelfViewController
 @property  TVMediaInfo *selectedMediaInfo
 @property  TVObservableEventController *observableEventController
 @property  unsigned long host
 @property  UIView *visualEffectView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIUpNextBannerViewController init]
  -[VUIUpNextBannerViewController dealloc]
  -[VUIUpNextBannerViewController initWithCoder:]
  -[VUIUpNextBannerViewController host]
  -[VUIUpNextBannerViewController .cxx_destruct]
  -[VUIUpNextBannerViewController removeObserver:]
  -[VUIUpNextBannerViewController loadView]
  -[VUIUpNextBannerViewController preferredFocusEnvironments]
  -[VUIUpNextBannerViewController initWithNibName:bundle:]
  -[VUIUpNextBannerViewController initWithHost:]
  -[VUIUpNextBannerViewController visualEffectView]
  -[VUIUpNextBannerViewController viewElement]
  -[VUIUpNextBannerViewController setViewElement:]
  -[VUIUpNextBannerViewController impressionableElementsContainedInDocument:]
  -[VUIUpNextBannerViewController shelfViewController]
  -[VUIUpNextBannerViewController shelfViewController:didSettleOnItemAtIndexPath:]
  -[VUIUpNextBannerViewController shelfViewController:didSelectItemAtIndexPath:]
  -[VUIUpNextBannerViewController shelfViewController:didPlayItemAtIndexPath:]
  -[VUIUpNextBannerViewController setShelfViewController:]
  -[VUIUpNextBannerViewController addObserver:forEvent:]
  -[VUIUpNextBannerViewController removeObserver:forEvent:]
  -[VUIUpNextBannerViewController selectedMediaInfo]
  -[VUIUpNextBannerViewController observableEventController]
  -[VUIUpNextBannerViewController setSelectedMediaInfo:]
  -[VUIUpNextBannerViewController setObservableEventController:]
  -[VUIUpNextBannerViewController _selectedMediaInfoForEvent:forElementAtIndex:]
  -[VUIUpNextBannerViewController _focusedMediaInfoForElementAtIndex:]
  -[VUIUpNextBannerViewController updateWithElement:]


VUIUpNextBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <TVRowHosting>
 @property  UIView *shelfView
 @property  UIVisualEffectView *backgroundVisualEffectView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL shouldBindRowsTogether

  // instance methods
  -[VUIUpNextBannerView .cxx_destruct]
  -[VUIUpNextBannerView traitCollectionDidChange:]
  -[VUIUpNextBannerView sizeThatFits:]
  -[VUIUpNextBannerView layoutSubviews]
  -[VUIUpNextBannerView _updateAppearance]
  -[VUIUpNextBannerView backgroundVisualEffectView]
  -[VUIUpNextBannerView setBackgroundVisualEffectView:]
  -[VUIUpNextBannerView setShelfView:]
  -[VUIUpNextBannerView shelfView]
  -[VUIUpNextBannerView rowMetricsForExpectedWidth:firstItemRowIndex:]
  -[VUIUpNextBannerView shouldBindRowsTogether]
  -[VUIUpNextBannerView initWithFrame:addBlurBackground:]


VUIMPShowMediaCollection : VUIMPMediaCollection
  // instance methods
  -[VUIMPShowMediaCollection .cxx_destruct]
  -[VUIMPShowMediaCollection initWithMediaLibrary:mediaItemCollection:identifier:requestedProperties:kind:]
  -[VUIMPShowMediaCollection initWithMediaLibrary:mediaItemCollection:requestedProperties:]
  -[VUIMPShowMediaCollection seasonCount]


VUIErrorTemplateViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  VUIErrorView *errorView

  // instance methods
  -[VUIErrorTemplateViewController .cxx_destruct]
  -[VUIErrorTemplateViewController loadView]
  -[VUIErrorTemplateViewController viewElement]
  -[VUIErrorTemplateViewController setViewElement:]
  -[VUIErrorTemplateViewController errorView]
  -[VUIErrorTemplateViewController updateWithViewElement:]
  -[VUIErrorTemplateViewController updateWithTemplateElement:]


VUIPlayer : TVPPlayer /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices
  // class methods
  +[VUIPlayer savedPreferredAudioLanguageCode]
  +[VUIPlayer setSavedPreferredAudioLanguageCode:]

  // instance methods
  -[VUIPlayer dealloc]
  -[VUIPlayer initWithName:]
  -[VUIPlayer _currentMediaItemDidChange:]
  -[VUIPlayer _videoPlaybackSettingsOrNetworkConfigurationDidChange:]
  -[VUIPlayer _configurePlayerForCurrentNetworkSettingsAndMediaItem]


VUIDownloadShowTableViewController : VUILibraryFetchControllerViewController <UITableViewDataSource, UITableViewDelegate, VUIMediaEntitiesFetchControllerDelegate, VUIDownloadEntityTableViewCellDelegate>
 @property  VUIMediaEntity *showEntity
 @property  UITableView *downloadEntitiesTableView
 @property  VUIMediaEntitiesFetchController *fetchController
 @property  NSArray *episodesGroupedBySeason
 @property  VUIDownloadShowTableHeaderView *sizingHeader
 @property  NSMutableArray *episodesBySeason
 @property  UIBarButtonItem *rightBarButtonItem
 @property  UIBarButtonItem *leftBarButtonItem
 @property  UIBarButtonItem *backBarButtonItem
 @property  NSMutableArray *assetControllersToRemove
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDownloadShowTableViewController dealloc]
  -[VUIDownloadShowTableViewController .cxx_destruct]
  -[VUIDownloadShowTableViewController loadView]
  -[VUIDownloadShowTableViewController viewWillAppear:]
  -[VUIDownloadShowTableViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIDownloadShowTableViewController viewDidAppear:]
  -[VUIDownloadShowTableViewController backBarButtonItem]
  -[VUIDownloadShowTableViewController setBackBarButtonItem:]
  -[VUIDownloadShowTableViewController leftBarButtonItem]
  -[VUIDownloadShowTableViewController rightBarButtonItem]
  -[VUIDownloadShowTableViewController setLeftBarButtonItem:]
  -[VUIDownloadShowTableViewController setRightBarButtonItem:]
  -[VUIDownloadShowTableViewController tableView:numberOfRowsInSection:]
  -[VUIDownloadShowTableViewController tableView:cellForRowAtIndexPath:]
  -[VUIDownloadShowTableViewController numberOfSectionsInTableView:]
  -[VUIDownloadShowTableViewController tableView:heightForHeaderInSection:]
  -[VUIDownloadShowTableViewController tableView:viewForHeaderInSection:]
  -[VUIDownloadShowTableViewController tableView:didSelectRowAtIndexPath:]
  -[VUIDownloadShowTableViewController tableView:didDeselectRowAtIndexPath:]
  -[VUIDownloadShowTableViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]
  -[VUIDownloadShowTableViewController tableView:willBeginEditingRowAtIndexPath:]
  -[VUIDownloadShowTableViewController tableView:didEndEditingRowAtIndexPath:]
  -[VUIDownloadShowTableViewController _cancelPressed]
  -[VUIDownloadShowTableViewController fetchController]
  -[VUIDownloadShowTableViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUIDownloadShowTableViewController controller:fetchRequests:didFailWithError:]
  -[VUIDownloadShowTableViewController _loadDownloadedShows]
  -[VUIDownloadShowTableViewController downloadEntitiesTableView]
  -[VUIDownloadShowTableViewController _editToggled]
  -[VUIDownloadShowTableViewController _exitEditingMode]
  -[VUIDownloadShowTableViewController _popIfNeeded]
  -[VUIDownloadShowTableViewController _configureAlertControllerForIndexPath:]
  -[VUIDownloadShowTableViewController episodesBySeason]
  -[VUIDownloadShowTableViewController assetControllersToRemove]
  -[VUIDownloadShowTableViewController setEpisodesBySeason:]
  -[VUIDownloadShowTableViewController downloadCellDidRequestCancelDownload:]
  -[VUIDownloadShowTableViewController initWithMediaEntity:]
  -[VUIDownloadShowTableViewController showEntity]
  -[VUIDownloadShowTableViewController setShowEntity:]
  -[VUIDownloadShowTableViewController setDownloadEntitiesTableView:]
  -[VUIDownloadShowTableViewController setFetchController:]
  -[VUIDownloadShowTableViewController episodesGroupedBySeason]
  -[VUIDownloadShowTableViewController setEpisodesGroupedBySeason:]
  -[VUIDownloadShowTableViewController sizingHeader]
  -[VUIDownloadShowTableViewController setSizingHeader:]
  -[VUIDownloadShowTableViewController setAssetControllersToRemove:]


VUIIKPlaylistElementToMediaItemsMapper : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long resumeMenuBehavior

  // instance methods
  -[VUIIKPlaylistElementToMediaItemsMapper init]
  -[VUIIKPlaylistElementToMediaItemsMapper resumeMenuBehavior]
  -[VUIIKPlaylistElementToMediaItemsMapper _storeMediaItemsForAdamID:IKMediaElement:]
  -[VUIIKPlaylistElementToMediaItemsMapper _storeAuxMediaItemForIKMediaElement:isExtrasContent:]
  -[VUIIKPlaylistElementToMediaItemsMapper _clipMediaItemsMediaItem:fromTimelineElement:]
  -[VUIIKPlaylistElementToMediaItemsMapper _populateMediaItem:withMetadatafromTimelineEventElement:]
  -[VUIIKPlaylistElementToMediaItemsMapper _populateMediaItem:withMetadatafromRelatedContentElement:]
  -[VUIIKPlaylistElementToMediaItemsMapper _shouldDisableResumeMenuForAsset:]
  -[VUIIKPlaylistElementToMediaItemsMapper playlistForIKMediaElements:isExtrasContent:]
  -[VUIIKPlaylistElementToMediaItemsMapper _populateMediaItem:withMetadatafromVideoElement:]
  -[VUIIKPlaylistElementToMediaItemsMapper setResumeMenuBehavior:]


VUIErrorLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  VUITextLayout *debugTextLayout
 @property  VUITextLayout *debugTextLayout2

  // class methods
  +[VUIErrorLayout layoutWithLayout:element:]

  // instance methods
  -[VUIErrorLayout init]
  -[VUIErrorLayout .cxx_destruct]
  -[VUIErrorLayout titleTextLayout]
  -[VUIErrorLayout descriptionTextLayout]
  -[VUIErrorLayout debugTextLayout]
  -[VUIErrorLayout debugTextLayout2]


VUIBadgeViewWrapper : NSObject /usr/lib/libSystem.B.dylib
 @property  _TVImageView *badgeView
 @property  IKViewElement *badgeElement
 @property  {CGSize=dd} badgeSize
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} badgeFrame
 @property  NSString *badgeType

  // instance methods
  -[VUIBadgeViewWrapper .cxx_destruct]
  -[VUIBadgeViewWrapper badgeFrame]
  -[VUIBadgeViewWrapper badgeSize]
  -[VUIBadgeViewWrapper badgeView]
  -[VUIBadgeViewWrapper setBadgeView:]
  -[VUIBadgeViewWrapper setBadgeType:]
  -[VUIBadgeViewWrapper badgeType]
  -[VUIBadgeViewWrapper badgeElement]
  -[VUIBadgeViewWrapper setBadgeElement:]
  -[VUIBadgeViewWrapper setBadgeSize:]
  -[VUIBadgeViewWrapper setBadgeFrame:]


VUIOverlayView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIOverlayLayout *overlayLayout
 @property  IKViewElement *viewElement
 @property  VUILabel *titleLabel
 @property  IKViewElement *titleElement
 @property  VUITextBadgeView *textBadge
 @property  IKViewElement *textBadgeElement
 @property  NSArray *badgeViewWrappers
 @property  _TVProgressView *progressView
 @property  UIView *gradientView
 @property  CALayer *gradientLayer

  // class methods
  +[VUIOverlayView overlayViewFromElement:overlayLayout:existingView:]
  +[VUIOverlayView overlayViewFromMediaItem:overlayLayout:existingView:]

  // instance methods
  -[VUIOverlayView .cxx_destruct]
  -[VUIOverlayView reset]
  -[VUIOverlayView titleLabel]
  -[VUIOverlayView layoutSubviews]
  -[VUIOverlayView setTitleLabel:]
  -[VUIOverlayView gradientLayer]
  -[VUIOverlayView setGradientLayer:]
  -[VUIOverlayView gradientView]
  -[VUIOverlayView setGradientView:]
  -[VUIOverlayView progressView]
  -[VUIOverlayView setProgressView:]
  -[VUIOverlayView viewElement]
  -[VUIOverlayView titleElement]
  -[VUIOverlayView setViewElement:]
  -[VUIOverlayView setOverlayLayout:]
  -[VUIOverlayView textBadge]
  -[VUIOverlayView overlayLayout]
  -[VUIOverlayView setTextBadge:]
  -[VUIOverlayView badgeViewWrappers]
  -[VUIOverlayView setTitleElement:]
  -[VUIOverlayView setTextBadgeElement:]
  -[VUIOverlayView setBadgeViewWrappers:]
  -[VUIOverlayView textBadgeElement]


VUIProductUberBackgroundViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *imageLayout

  // class methods
  +[VUIProductUberBackgroundViewLayout uberImageAspectRatioForWindowWidth:]
  +[VUIProductUberBackgroundViewLayout layoutWithLayout:element:sizeClass:isSport:]
  +[VUIProductUberBackgroundViewLayout uberImageShouldUseVerticalLayoutForWindowWidth:]
  +[VUIProductUberBackgroundViewLayout uberImageShouldUsePhoneImageForSizeClass:]

  // instance methods
  -[VUIProductUberBackgroundViewLayout .cxx_destruct]
  -[VUIProductUberBackgroundViewLayout imageLayout]
  -[VUIProductUberBackgroundViewLayout initWithSizeClass:isSport:]
  -[VUIProductUberBackgroundViewLayout updateWithSizeClass:isSport:]


VUIPlaybackReporter : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableArray *sessions
 @property  BOOL enforceSinglePlaybackSession

  // instance methods
  -[VUIPlaybackReporter init]
  -[VUIPlaybackReporter dealloc]
  -[VUIPlaybackReporter .cxx_destruct]
  -[VUIPlaybackReporter sessions]
  -[VUIPlaybackReporter setSessions:]
  -[VUIPlaybackReporter _registerObservers]
  -[VUIPlaybackReporter _removeObservers]
  -[VUIPlaybackReporter _endSession:]
  -[VUIPlaybackReporter _playerStateWillChange:]
  -[VUIPlaybackReporter _playerCurrentMediaItemWillChange:]
  -[VUIPlaybackReporter _logWithFormat:]
  -[VUIPlaybackReporter _handlePlaybackChangeForPlayer:fromState:toState:reason:]
  -[VUIPlaybackReporter _sessionForPlayer:]
  -[VUIPlaybackReporter _isTransitionValidForPlayer:fromState:toState:]
  -[VUIPlaybackReporter enforceSinglePlaybackSession]
  -[VUIPlaybackReporter _reportForSession:state:reason:]
  -[VUIPlaybackReporter _endSessions:]
  -[VUIPlaybackReporter _createSessionForPlayer:]
  -[VUIPlaybackReporter _beginSession:]


VUIMPMediaItemEntityTypesOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  MPMediaLibrary *mediaLibrary
 @property  VUIMediaItemEntityTypesFetchResponse *response
 @property  NSError *error

  // instance methods
  -[VUIMPMediaItemEntityTypesOperation init]
  -[VUIMPMediaItemEntityTypesOperation .cxx_destruct]
  -[VUIMPMediaItemEntityTypesOperation error]
  -[VUIMPMediaItemEntityTypesOperation setError:]
  -[VUIMPMediaItemEntityTypesOperation response]
  -[VUIMPMediaItemEntityTypesOperation setResponse:]
  -[VUIMPMediaItemEntityTypesOperation mediaLibrary]
  -[VUIMPMediaItemEntityTypesOperation setMediaLibrary:]
  -[VUIMPMediaItemEntityTypesOperation executionDidBegin]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasEpisodes]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasHasHomeVideos]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasMovies]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasMovieRentals]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasLocalMediaItems]
  -[VUIMPMediaItemEntityTypesOperation _canUseCheapEntityCheckWithMediaEntityType:]
  -[VUIMPMediaItemEntityTypesOperation _mediaLibraryHasMediaItemsWithQuery:]
  -[VUIMPMediaItemEntityTypesOperation initWithMPMediaLibrary:]


VUIMediaEntityGroup : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSObject<NSCopying> *identifier
 @property  NSArray *mediaEntities
 @property  NSArray *sortIndexes

  // instance methods
  -[VUIMediaEntityGroup init]
  -[VUIMediaEntityGroup isEqual:]
  -[VUIMediaEntityGroup copyWithZone:]
  -[VUIMediaEntityGroup .cxx_destruct]
  -[VUIMediaEntityGroup identifier]
  -[VUIMediaEntityGroup setIdentifier:]
  -[VUIMediaEntityGroup initWithIdentifier:]
  -[VUIMediaEntityGroup mediaEntities]
  -[VUIMediaEntityGroup sortIndexes]
  -[VUIMediaEntityGroup setMediaEntities:]
  -[VUIMediaEntityGroup setSortIndexes:]


VUIDialogInteractionController : NSObject /usr/lib/libSystem.B.dylib <VUIPreviewInteractionControllerDelegate, UIGestureRecognizerDelegate, UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
 @property  UIViewController *presentingViewController
 @property  UIViewController *presentedViewController
 @property  VUIPreviewInteractionController *interactionController
 @property  <VUIDialogInteractionControllerDelegate> *delegate
 @property  NSIndexPath *currentIndexPath
 @property  BOOL isPresenting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDialogInteractionController delegate]
  -[VUIDialogInteractionController setDelegate:]
  -[VUIDialogInteractionController .cxx_destruct]
  -[VUIDialogInteractionController _cleanup]
  -[VUIDialogInteractionController presentingViewController]
  -[VUIDialogInteractionController presentedViewController]
  -[VUIDialogInteractionController transitionDuration:]
  -[VUIDialogInteractionController animateTransition:]
  -[VUIDialogInteractionController animationControllerForDismissedController:]
  -[VUIDialogInteractionController presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[VUIDialogInteractionController currentIndexPath]
  -[VUIDialogInteractionController isPresenting]
  -[VUIDialogInteractionController interactionController]
  -[VUIDialogInteractionController setInteractionController:]
  -[VUIDialogInteractionController presentViewController:]
  -[VUIDialogInteractionController setCurrentIndexPath:]
  -[VUIDialogInteractionController setIsPresenting:]
  -[VUIDialogInteractionController initWithPresentingViewController:collectionView:controllerToPresent:]
  -[VUIDialogInteractionController dismissConfirmation]
  -[VUIDialogInteractionController longPressGestureRecognizerPressed:]
  -[VUIDialogInteractionController interactionController:shouldInteractionControllerBeginForIndexPath:]
  -[VUIDialogInteractionController interactionController:didBeginForIndexPath:]
  -[VUIDialogInteractionController interactionController:didEndForIndexPath:]


VideosExtrasArtworkDataSource : MPAbstractNetworkArtworkDataSource /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote
  // instance methods
  -[VideosExtrasArtworkDataSource init]
  -[VideosExtrasArtworkDataSource areRepresentationsAvailableForCatalog:]
  -[VideosExtrasArtworkDataSource cacheKeyForCatalog:size:]
  -[VideosExtrasArtworkDataSource requestForCatalog:size:]
  -[VideosExtrasArtworkDataSource supportedSizesForCatalog:]
  -[VideosExtrasArtworkDataSource wantsBackgroundImageDecompression]


VUIDocumentPreFetchedData : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *prefetchedDataDict

  // instance methods
  -[VUIDocumentPreFetchedData .cxx_destruct]
  -[VUIDocumentPreFetchedData initWithDictionary:]
  -[VUIDocumentPreFetchedData jsonData]
  -[VUIDocumentPreFetchedData prefetchedDataDict]
  -[VUIDocumentPreFetchedData setPrefetchedDataDict:]


VUIDocumentPreFetchedDataPostPlay : VUIDocumentPreFetchedData
 @property  NSString *host
 @property  NSString *productID
 @property  NSString *showID
 @property  NSArray *excludedCanonicals
 @property  BOOL updateEvent
 @property  BOOL canAutoPlay

  // instance methods
  -[VUIDocumentPreFetchedDataPostPlay host]
  -[VUIDocumentPreFetchedDataPostPlay .cxx_destruct]
  -[VUIDocumentPreFetchedDataPostPlay setHost:]
  -[VUIDocumentPreFetchedDataPostPlay productID]
  -[VUIDocumentPreFetchedDataPostPlay setProductID:]
  -[VUIDocumentPreFetchedDataPostPlay jsonData]
  -[VUIDocumentPreFetchedDataPostPlay updateEvent]
  -[VUIDocumentPreFetchedDataPostPlay canAutoPlay]
  -[VUIDocumentPreFetchedDataPostPlay showID]
  -[VUIDocumentPreFetchedDataPostPlay excludedCanonicals]
  -[VUIDocumentPreFetchedDataPostPlay setShowID:]
  -[VUIDocumentPreFetchedDataPostPlay setExcludedCanonicals:]
  -[VUIDocumentPreFetchedDataPostPlay setUpdateEvent:]
  -[VUIDocumentPreFetchedDataPostPlay setCanAutoPlay:]


VideosExtrasGridCellStyle : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  {CGSize=dd} imageSize
 @property  double titleFirstBaselineHeight
 @property  double subtitleFirstBaselineHeight
 @property  NSString *titleTextStyle
 @property  NSString *subtitleTextStyle
 @property  NSDictionary *titleDefaultFontAttributes
 @property  NSDictionary *subtitleDefaultFontAttributes
 @property  UIColor *titleTextColor
 @property  UIColor *subtitleTextColor
 @property  double textFirstBaselineToBottom
 @property  double textLastBaselineToBottom
 @property  long long defaultTextAlignment

  // instance methods
  -[VideosExtrasGridCellStyle copyWithZone:]
  -[VideosExtrasGridCellStyle .cxx_destruct]
  -[VideosExtrasGridCellStyle imageSize]
  -[VideosExtrasGridCellStyle setImageSize:]
  -[VideosExtrasGridCellStyle titleTextColor]
  -[VideosExtrasGridCellStyle setTitleTextColor:]
  -[VideosExtrasGridCellStyle titleTextStyle]
  -[VideosExtrasGridCellStyle setSubtitleTextColor:]
  -[VideosExtrasGridCellStyle subtitleTextColor]
  -[VideosExtrasGridCellStyle defaultTextAlignment]
  -[VideosExtrasGridCellStyle setDefaultTextAlignment:]
  -[VideosExtrasGridCellStyle setTitleTextStyle:]
  -[VideosExtrasGridCellStyle subtitleTextStyle]
  -[VideosExtrasGridCellStyle setSubtitleTextStyle:]
  -[VideosExtrasGridCellStyle titleFirstBaselineHeight]
  -[VideosExtrasGridCellStyle setTitleFirstBaselineHeight:]
  -[VideosExtrasGridCellStyle subtitleFirstBaselineHeight]
  -[VideosExtrasGridCellStyle setSubtitleFirstBaselineHeight:]
  -[VideosExtrasGridCellStyle titleDefaultFontAttributes]
  -[VideosExtrasGridCellStyle setTitleDefaultFontAttributes:]
  -[VideosExtrasGridCellStyle subtitleDefaultFontAttributes]
  -[VideosExtrasGridCellStyle setSubtitleDefaultFontAttributes:]
  -[VideosExtrasGridCellStyle textFirstBaselineToBottom]
  -[VideosExtrasGridCellStyle setTextFirstBaselineToBottom:]
  -[VideosExtrasGridCellStyle textLastBaselineToBottom]
  -[VideosExtrasGridCellStyle setTextLastBaselineToBottom:]


VideosExtrasGridSectionHeaderStyle : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *textStyle
 @property  NSDictionary *defaultFontAttributes
 @property  UIColor *textColor
 @property  {UIEdgeInsets=dddd} insets
 @property  double textBaselineHeight
 @property  double textBaselineDescender

  // instance methods
  -[VideosExtrasGridSectionHeaderStyle .cxx_destruct]
  -[VideosExtrasGridSectionHeaderStyle setTextStyle:]
  -[VideosExtrasGridSectionHeaderStyle textStyle]
  -[VideosExtrasGridSectionHeaderStyle setTextColor:]
  -[VideosExtrasGridSectionHeaderStyle textColor]
  -[VideosExtrasGridSectionHeaderStyle insets]
  -[VideosExtrasGridSectionHeaderStyle setInsets:]
  -[VideosExtrasGridSectionHeaderStyle defaultFontAttributes]
  -[VideosExtrasGridSectionHeaderStyle setDefaultFontAttributes:]
  -[VideosExtrasGridSectionHeaderStyle textBaselineHeight]
  -[VideosExtrasGridSectionHeaderStyle setTextBaselineHeight:]
  -[VideosExtrasGridSectionHeaderStyle textBaselineDescender]
  -[VideosExtrasGridSectionHeaderStyle setTextBaselineDescender:]


VideosExtrasGridHeaderStyle : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL showsImage
 @property  {UIEdgeInsets=dddd} insets
 @property  NSString *titleTextStyle
 @property  double titleLineHeight
 @property  NSString *subtitleTextStyle
 @property  double subtitleLineHeight
 @property  double bottomLabelDescender
 @property  NSDictionary *titleDefaultFontAttributes
 @property  NSDictionary *subtitleDefaultFontAttributes
 @property  UIColor *titleColor
 @property  UIColor *subtitleColor

  // instance methods
  -[VideosExtrasGridHeaderStyle .cxx_destruct]
  -[VideosExtrasGridHeaderStyle titleColor]
  -[VideosExtrasGridHeaderStyle setTitleColor:]
  -[VideosExtrasGridHeaderStyle insets]
  -[VideosExtrasGridHeaderStyle setInsets:]
  -[VideosExtrasGridHeaderStyle subtitleColor]
  -[VideosExtrasGridHeaderStyle setSubtitleColor:]
  -[VideosExtrasGridHeaderStyle titleTextStyle]
  -[VideosExtrasGridHeaderStyle setTitleLineHeight:]
  -[VideosExtrasGridHeaderStyle titleLineHeight]
  -[VideosExtrasGridHeaderStyle subtitleLineHeight]
  -[VideosExtrasGridHeaderStyle setTitleTextStyle:]
  -[VideosExtrasGridHeaderStyle subtitleTextStyle]
  -[VideosExtrasGridHeaderStyle setSubtitleTextStyle:]
  -[VideosExtrasGridHeaderStyle titleDefaultFontAttributes]
  -[VideosExtrasGridHeaderStyle setTitleDefaultFontAttributes:]
  -[VideosExtrasGridHeaderStyle subtitleDefaultFontAttributes]
  -[VideosExtrasGridHeaderStyle setSubtitleDefaultFontAttributes:]
  -[VideosExtrasGridHeaderStyle showsImage]
  -[VideosExtrasGridHeaderStyle setShowsImage:]
  -[VideosExtrasGridHeaderStyle setSubtitleLineHeight:]
  -[VideosExtrasGridHeaderStyle bottomLabelDescender]
  -[VideosExtrasGridHeaderStyle setBottomLabelDescender:]


VideosExtrasGridViewControllerStyle : NSObject /usr/lib/libSystem.B.dylib
 @property  UIColor *backgroundColor
 @property  {UIEdgeInsets=dddd} collectionViewInsets
 @property  NSString *detailTextStyle
 @property  NSDictionary *detailDefaultFontAttributes
 @property  UIColor *detailTextColor
 @property  {UIEdgeInsets=dddd} detailInsets
 @property  VideosExtrasGridHeaderStyle *headerStyle
 @property  VideosExtrasGridSectionHeaderStyle *sectionHeaderStyle
 @property  VideosExtrasGridCellStyle *defaultCellStyle
 @property  VideosExtrasGridCellStyle *imageCellStyle
 @property  VideosExtrasGridCellStyle *videoCellStyle
 @property  VideosExtrasGridCellStyle *productCellStyle
 @property  double defaultSpacing
 @property  double imageSpacing
 @property  double videoSpacing
 @property  double productSpacing
 @property  {UIEdgeInsets=dddd} defaultCellSectionInsets
 @property  {UIEdgeInsets=dddd} imageCellSectionInsets
 @property  {UIEdgeInsets=dddd} videoCellSectionInsets
 @property  {UIEdgeInsets=dddd} productCellSectionInsets
 @property  double cellLineSpacing
 @property  BOOL showsScrollFade
 @property  BOOL adjustsContentInsetByBottomNavBar

  // instance methods
  -[VideosExtrasGridViewControllerStyle .cxx_destruct]
  -[VideosExtrasGridViewControllerStyle backgroundColor]
  -[VideosExtrasGridViewControllerStyle setBackgroundColor:]
  -[VideosExtrasGridViewControllerStyle defaultSpacing]
  -[VideosExtrasGridViewControllerStyle collectionViewInsets]
  -[VideosExtrasGridViewControllerStyle setCollectionViewInsets:]
  -[VideosExtrasGridViewControllerStyle setDetailTextColor:]
  -[VideosExtrasGridViewControllerStyle detailTextColor]
  -[VideosExtrasGridViewControllerStyle headerStyle]
  -[VideosExtrasGridViewControllerStyle setHeaderStyle:]
  -[VideosExtrasGridViewControllerStyle sectionHeaderStyle]
  -[VideosExtrasGridViewControllerStyle detailTextStyle]
  -[VideosExtrasGridViewControllerStyle setDetailTextStyle:]
  -[VideosExtrasGridViewControllerStyle detailDefaultFontAttributes]
  -[VideosExtrasGridViewControllerStyle setDetailDefaultFontAttributes:]
  -[VideosExtrasGridViewControllerStyle detailInsets]
  -[VideosExtrasGridViewControllerStyle setDetailInsets:]
  -[VideosExtrasGridViewControllerStyle setSectionHeaderStyle:]
  -[VideosExtrasGridViewControllerStyle defaultCellStyle]
  -[VideosExtrasGridViewControllerStyle setDefaultCellStyle:]
  -[VideosExtrasGridViewControllerStyle imageCellStyle]
  -[VideosExtrasGridViewControllerStyle setImageCellStyle:]
  -[VideosExtrasGridViewControllerStyle videoCellStyle]
  -[VideosExtrasGridViewControllerStyle setVideoCellStyle:]
  -[VideosExtrasGridViewControllerStyle productCellStyle]
  -[VideosExtrasGridViewControllerStyle setProductCellStyle:]
  -[VideosExtrasGridViewControllerStyle setDefaultSpacing:]
  -[VideosExtrasGridViewControllerStyle imageSpacing]
  -[VideosExtrasGridViewControllerStyle setImageSpacing:]
  -[VideosExtrasGridViewControllerStyle videoSpacing]
  -[VideosExtrasGridViewControllerStyle setVideoSpacing:]
  -[VideosExtrasGridViewControllerStyle productSpacing]
  -[VideosExtrasGridViewControllerStyle setProductSpacing:]
  -[VideosExtrasGridViewControllerStyle defaultCellSectionInsets]
  -[VideosExtrasGridViewControllerStyle setDefaultCellSectionInsets:]
  -[VideosExtrasGridViewControllerStyle imageCellSectionInsets]
  -[VideosExtrasGridViewControllerStyle setImageCellSectionInsets:]
  -[VideosExtrasGridViewControllerStyle videoCellSectionInsets]
  -[VideosExtrasGridViewControllerStyle setVideoCellSectionInsets:]
  -[VideosExtrasGridViewControllerStyle productCellSectionInsets]
  -[VideosExtrasGridViewControllerStyle setProductCellSectionInsets:]
  -[VideosExtrasGridViewControllerStyle cellLineSpacing]
  -[VideosExtrasGridViewControllerStyle setCellLineSpacing:]
  -[VideosExtrasGridViewControllerStyle showsScrollFade]
  -[VideosExtrasGridViewControllerStyle setShowsScrollFade:]
  -[VideosExtrasGridViewControllerStyle adjustsContentInsetByBottomNavBar]
  -[VideosExtrasGridViewControllerStyle setAdjustsContentInsetByBottomNavBar:]


VUIAppInstallConfirmationView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIAppInstallLockup *lockupView
 @property  NSString *title
 @property  NSString *message
 @property  UIButton *actionButton
 @property  UIButton *cancelButton
 @property  UIButton *appStoreButton
 @property  UIButton *secondaryLinkButton

  // class methods
  +[VUIAppInstallConfirmationView iconSize]

  // instance methods
  -[VUIAppInstallConfirmationView .cxx_destruct]
  -[VUIAppInstallConfirmationView title]
  -[VUIAppInstallConfirmationView setTitle:]
  -[VUIAppInstallConfirmationView message]
  -[VUIAppInstallConfirmationView setMessage:]
  -[VUIAppInstallConfirmationView initWithFrame:]
  -[VUIAppInstallConfirmationView didUpdateFocusInContext:withAnimationCoordinator:]
  -[VUIAppInstallConfirmationView preferredFocusEnvironments]
  -[VUIAppInstallConfirmationView layoutSubviews]
  -[VUIAppInstallConfirmationView cancelButton]
  -[VUIAppInstallConfirmationView setCancelButton:]
  -[VUIAppInstallConfirmationView setAppName:]
  -[VUIAppInstallConfirmationView actionButton]
  -[VUIAppInstallConfirmationView setActionButton:]
  -[VUIAppInstallConfirmationView setAppIcon:]
  -[VUIAppInstallConfirmationView setAppStoreButton:]
  -[VUIAppInstallConfirmationView appStoreButton]
  -[VUIAppInstallConfirmationView lockupView]
  -[VUIAppInstallConfirmationView _buttonWithTitleForTV:textStyle:]
  -[VUIAppInstallConfirmationView setAgeRating:]
  -[VUIAppInstallConfirmationView setIAP:]
  -[VUIAppInstallConfirmationView _layoutForTvos]
  -[VUIAppInstallConfirmationView _layoutForIos]
  -[VUIAppInstallConfirmationView setAppSubtitle:]
  -[VUIAppInstallConfirmationView setLockupView:]
  -[VUIAppInstallConfirmationView secondaryLinkButton]
  -[VUIAppInstallConfirmationView setSecondaryLinkButton:]


VUISportsProductBannerLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *rowTextLayout
 @property  VUITextLayout *scoreTextLayout
 @property  VUITextLayout *losingRowTextLayout
 @property  VUITextLayout *losingScoreTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  VUITextLayout *footerTextLayout
 @property  VUITextLayout *availabilityTextLayout
 @property  TVImageLayout *availabilityImageLayout

  // class methods
  +[VUISportsProductBannerLayout shouldUseVerticalLayout]
  +[VUISportsProductBannerLayout shouldDisplayScoresBelowLabels]
  +[VUISportsProductBannerLayout layoutWithLayout:element:sizeClass:]

  // instance methods
  -[VUISportsProductBannerLayout init]
  -[VUISportsProductBannerLayout .cxx_destruct]
  -[VUISportsProductBannerLayout initWithSizeClass:]
  -[VUISportsProductBannerLayout titleTextLayout]
  -[VUISportsProductBannerLayout descriptionTextLayout]
  -[VUISportsProductBannerLayout rowTextLayout]
  -[VUISportsProductBannerLayout losingRowTextLayout]
  -[VUISportsProductBannerLayout footerTextLayout]
  -[VUISportsProductBannerLayout scoreTextLayout]
  -[VUISportsProductBannerLayout losingScoreTextLayout]
  -[VUISportsProductBannerLayout availabilityTextLayout]
  -[VUISportsProductBannerLayout availabilityImageLayout]


VideosExtrasImageViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VideosExtrasZoomingImageTransitionParticipant>
 @property  UIActivityIndicatorView *activityIndicatorView
 @property  VideosExtrasZoomableImageView *zoomableImageView
 @property  NSArray *gestureRecognizers
 @property  VideosExtrasZoomingImageInteractiveTransitionSourceContext *interactiveTransitionSourceContext
 @property  UIView *textContainmentView
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  UILabel *descriptionLabel
 @property  MPUContentSizeLayoutConstraint *topLabelConstraint
 @property  MPUContentSizeLayoutConstraint *subtitleLeadingConstraint
 @property  MPUContentSizeLayoutConstraint *descriptionLeadingConstraint
 @property  MPUContentSizeLayoutConstraint *bottomLabelConstraint
 @property  BOOL overlayHidden
 @property  UIImage *image
 @property  NSAttributedString *titleString
 @property  NSAttributedString *subtitleString
 @property  NSAttributedString *descriptionString
 @property  unsigned long imageIndex
 @property  BOOL allowsPinchingImageForInteractiveZoomingImageTransition
 @property  NSString *zoomingImageTransitionIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasImageViewController dealloc]
  -[VideosExtrasImageViewController .cxx_destruct]
  -[VideosExtrasImageViewController image]
  -[VideosExtrasImageViewController setImage:]
  -[VideosExtrasImageViewController descriptionString]
  -[VideosExtrasImageViewController titleLabel]
  -[VideosExtrasImageViewController viewWillAppear:]
  -[VideosExtrasImageViewController viewDidLoad]
  -[VideosExtrasImageViewController setTitleLabel:]
  -[VideosExtrasImageViewController viewDidAppear:]
  -[VideosExtrasImageViewController gestureRecognizers]
  -[VideosExtrasImageViewController setDescriptionLabel:]
  -[VideosExtrasImageViewController descriptionLabel]
  -[VideosExtrasImageViewController prefersStatusBarHidden]
  -[VideosExtrasImageViewController updateViewConstraints]
  -[VideosExtrasImageViewController setSubtitleLabel:]
  -[VideosExtrasImageViewController subtitleLabel]
  -[VideosExtrasImageViewController setGestureRecognizers:]
  -[VideosExtrasImageViewController activityIndicatorView]
  -[VideosExtrasImageViewController setActivityIndicatorView:]
  -[VideosExtrasImageViewController setDescriptionString:]
  -[VideosExtrasImageViewController titleString]
  -[VideosExtrasImageViewController setTitleString:]
  -[VideosExtrasImageViewController _handlePinch:]
  -[VideosExtrasImageViewController setSubtitleString:]
  -[VideosExtrasImageViewController subtitleString]
  -[VideosExtrasImageViewController overlayHidden]
  -[VideosExtrasImageViewController setOverlayHidden:]
  -[VideosExtrasImageViewController _handleDoubleTap:]
  -[VideosExtrasImageViewController _handleSingleTap:]
  -[VideosExtrasImageViewController setImageIndex:]
  -[VideosExtrasImageViewController imageIndex]
  -[VideosExtrasImageViewController topLabelConstraint]
  -[VideosExtrasImageViewController setTopLabelConstraint:]
  -[VideosExtrasImageViewController bottomLabelConstraint]
  -[VideosExtrasImageViewController setBottomLabelConstraint:]
  -[VideosExtrasImageViewController allowsPinchingImageForInteractiveZoomingImageTransition]
  -[VideosExtrasImageViewController setZoomableImageView:]
  -[VideosExtrasImageViewController setTextContainmentView:]
  -[VideosExtrasImageViewController textContainmentView]
  -[VideosExtrasImageViewController subtitleLeadingConstraint]
  -[VideosExtrasImageViewController setSubtitleLeadingConstraint:]
  -[VideosExtrasImageViewController descriptionLeadingConstraint]
  -[VideosExtrasImageViewController setDescriptionLeadingConstraint:]
  -[VideosExtrasImageViewController zoomableImageView]
  -[VideosExtrasImageViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasImageViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasImageViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasImageViewController interactiveTransitionSourceContext]
  -[VideosExtrasImageViewController zoomingImageTransitionIdentifier]
  -[VideosExtrasImageViewController setInteractiveTransitionSourceContext:]
  -[VideosExtrasImageViewController setAllowsPinchingImageForInteractiveZoomingImageTransition:]
  -[VideosExtrasImageViewController setZoomingImageTransitionIdentifier:]


VideosExtrasActivityIndicatorElementViewController : VideosExtrasViewElementViewController
  // instance methods
  -[VideosExtrasActivityIndicatorElementViewController .cxx_destruct]
  -[VideosExtrasActivityIndicatorElementViewController viewDidLoad]
  -[VideosExtrasActivityIndicatorElementViewController _prepareLayout]
  -[VideosExtrasActivityIndicatorElementViewController matchParentHeight]


VUIListLockupCollectionViewCell : VUIListCollectionViewCell
 @property  IKViewElement *viewElement
 @property  IKViewElement *primaryButtonElement
 @property  IKViewElement *secondaryButtonElement
 @property  VUIListLockupCollectionViewCellView *listCellView
 @property  @? buttonSelectionHandler

  // class methods
  +[VUIListLockupCollectionViewCell configureWithElement:existingView:]

  // instance methods
  -[VUIListLockupCollectionViewCell .cxx_destruct]
  -[VUIListLockupCollectionViewCell prepareForReuse]
  -[VUIListLockupCollectionViewCell initWithFrame:]
  -[VUIListLockupCollectionViewCell sizeThatFits:]
  -[VUIListLockupCollectionViewCell layoutSubviews]
  -[VUIListLockupCollectionViewCell viewElement]
  -[VUIListLockupCollectionViewCell setViewElement:]
  -[VUIListLockupCollectionViewCell listCellView]
  -[VUIListLockupCollectionViewCell setListCellView:]
  -[VUIListLockupCollectionViewCell setPrimaryButtonElement:]
  -[VUIListLockupCollectionViewCell setSecondaryButtonElement:]
  -[VUIListLockupCollectionViewCell buttonSelectionHandler]
  -[VUIListLockupCollectionViewCell setButtonSelectionHandler:]
  -[VUIListLockupCollectionViewCell primaryButtonElement]
  -[VUIListLockupCollectionViewCell secondaryButtonElement]


VUIAppleTVChannelLogoLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *channelsTextLayout
 @property  TVImageLayout *channelLogoImageLayout

  // class methods
  +[VUIAppleTVChannelLogoLayout layoutWithLayout:]

  // instance methods
  -[VUIAppleTVChannelLogoLayout init]
  -[VUIAppleTVChannelLogoLayout .cxx_destruct]
  -[VUIAppleTVChannelLogoLayout channelLogoImageLayout]
  -[VUIAppleTVChannelLogoLayout setChannelLogoImageLayout:]
  -[VUIAppleTVChannelLogoLayout channelsTextLayout]
  -[VUIAppleTVChannelLogoLayout setChannelsTextLayout:]


VUIVisualEffectLabel : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIVisualEffectView *visualEffectView
 @property  VUILabel *label

  // class methods
  +[VUIVisualEffectLabel vibrantLabelWithLabel:]

  // instance methods
  -[VUIVisualEffectLabel .cxx_destruct]
  -[VUIVisualEffectLabel setLabel:]
  -[VUIVisualEffectLabel label]
  -[VUIVisualEffectLabel traitCollectionDidChange:]
  -[VUIVisualEffectLabel sizeThatFits:]
  -[VUIVisualEffectLabel initWithEffect:]
  -[VUIVisualEffectLabel layoutSubviews]
  -[VUIVisualEffectLabel visualEffectView]
  -[VUIVisualEffectLabel _updateContentWithNewLabel:oldLabel:]


VUIPopoverOption : NSObject /usr/lib/libSystem.B.dylib
 @property  IKViewElement *cardElement
 @property  IKImageElement *imageElement
 @property  TVImageProxy *imageProxy
 @property  IKViewElement *optionElement
 @property  IKTextElement *titleElement
 @property  unsigned long type
 @property  UIColor *highlightColor

  // instance methods
  -[VUIPopoverOption init]
  -[VUIPopoverOption type]
  -[VUIPopoverOption .cxx_destruct]
  -[VUIPopoverOption _init]
  -[VUIPopoverOption highlightColor]
  -[VUIPopoverOption titleElement]
  -[VUIPopoverOption imageElement]
  -[VUIPopoverOption initWithViewElement:]
  -[VUIPopoverOption imageProxy]
  -[VUIPopoverOption _populateWithElement:]
  -[VUIPopoverOption cardElement]
  -[VUIPopoverOption optionElement]


VUIMediaEntityImageLoadParamsFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMediaEntityImageLoadParamsFactory imageLoadParamsWithMediaEntity:imageType:]


VideosExtrasArtworkLayoutTriggeringView : MPUArtworkView /System/Library/PrivateFrameworks/Preferences.framework/Preferences
  // instance methods
  -[VideosExtrasArtworkLayoutTriggeringView _imageDidChange]


VideosExtrasConstrainedArtworkContainerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  MPUArtworkView *artworkView
 @property  UIImageView *overlayView
 @property  NSArray *overlaySizeConstraints
 @property  BOOL shouldAutoresizeMaskLayerToFillBounds
 @property  BOOL shouldBottomAlignArtwork
 @property  UIImage *overlayImage
 @property  double overlayScale

  // instance methods
  -[VideosExtrasConstrainedArtworkContainerView .cxx_destruct]
  -[VideosExtrasConstrainedArtworkContainerView initWithFrame:]
  -[VideosExtrasConstrainedArtworkContainerView layoutSubviews]
  -[VideosExtrasConstrainedArtworkContainerView setOverlayView:]
  -[VideosExtrasConstrainedArtworkContainerView overlayView]
  -[VideosExtrasConstrainedArtworkContainerView overlayImage]
  -[VideosExtrasConstrainedArtworkContainerView setOverlayImage:]
  -[VideosExtrasConstrainedArtworkContainerView artworkView]
  -[VideosExtrasConstrainedArtworkContainerView setArtworkView:]
  -[VideosExtrasConstrainedArtworkContainerView shouldBottomAlignArtwork]
  -[VideosExtrasConstrainedArtworkContainerView shouldAutoresizeMaskLayerToFillBounds]
  -[VideosExtrasConstrainedArtworkContainerView setOverlayScale:]
  -[VideosExtrasConstrainedArtworkContainerView setShouldAutoresizeMaskLayerToFillBounds:]
  -[VideosExtrasConstrainedArtworkContainerView setShouldBottomAlignArtwork:]
  -[VideosExtrasConstrainedArtworkContainerView overlayScale]
  -[VideosExtrasConstrainedArtworkContainerView overlaySizeConstraints]
  -[VideosExtrasConstrainedArtworkContainerView setOverlaySizeConstraints:]


VUIUpsellOfferViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  TVImageLayout *imageLayout

  // class methods
  +[VUIUpsellOfferViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIUpsellOfferViewLayout init]
  -[VUIUpsellOfferViewLayout .cxx_destruct]
  -[VUIUpsellOfferViewLayout safeAreaInsets]
  -[VUIUpsellOfferViewLayout imageLayout]
  -[VUIUpsellOfferViewLayout titleTextLayout]
  -[VUIUpsellOfferViewLayout descriptionTextLayout]
  -[VUIUpsellOfferViewLayout titleTopMarginPhone]
  -[VUIUpsellOfferViewLayout titleTopMarginPad]
  -[VUIUpsellOfferViewLayout descriptionTopMargin]
  -[VUIUpsellOfferViewLayout _configureLayout]


VideosExtrasZoomingImageInteractiveTransitionSourceContext : NSObject /usr/lib/libSystem.B.dylib
 @property  UIPinchGestureRecognizer *pinchGestureRecognizer
 @property  unsigned long itemIndex
 @property  unsigned long supportedZoomingImageTransitionDirections
 @property  NSString *identifier

  // instance methods
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext .cxx_destruct]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext identifier]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext setIdentifier:]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext itemIndex]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext setItemIndex:]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext pinchGestureRecognizer]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext setPinchGestureRecognizer:]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext setSupportedZoomingImageTransitionDirections:]
  -[VideosExtrasZoomingImageInteractiveTransitionSourceContext supportedZoomingImageTransitionDirections]


VUILibraryMetrics : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUILibraryMetrics recordPlayOfMediaEntity:isLaunchingExtras:]
  +[VUILibraryMetrics recordPlayOfMediaItem:]
  +[VUILibraryMetrics recordPageEventWithPageType:]
  +[VUILibraryMetrics getMediaEntityContentType:]
  +[VUILibraryMetrics getMediaItemContentType:]
  +[VUILibraryMetrics recordPageEventWithPageId:andPageType:]
  +[VUILibraryMetrics recordClickOnMediaEntity:]
  +[VUILibraryMetrics pageStringForEntityType:]
  +[VUILibraryMetrics pageStringForLibraryCellType:]
  +[VUILibraryMetrics pageStringForLibraryShelfType:]
  +[VUILibraryMetrics pageStringForLibraryCategoryType:]


VideosExtrasBookmarkController : NSObject /usr/lib/libSystem.B.dylib
 @property  double minimumBookmarkUpdateInterval

  // class methods
  +[VideosExtrasBookmarkController sharedInstance]

  // instance methods
  -[VideosExtrasBookmarkController init]
  -[VideosExtrasBookmarkController .cxx_destruct]
  -[VideosExtrasBookmarkController pullBookmarksForIdentifiers:completionBlock:]
  -[VideosExtrasBookmarkController _loadAllBookmarksWithRemainingIdentifiers:bookmarkTimes:completionBlock:]
  -[VideosExtrasBookmarkController pushBookmarkForIdentifier:bookmarkTime:playedToNominalLength:]
  -[VideosExtrasBookmarkController pullBookmarksForAssets:completionBlock:]
  -[VideosExtrasBookmarkController pushBookmarkForAsset:bookmarkTime:playedToNominalLength:]
  -[VideosExtrasBookmarkController minimumBookmarkUpdateInterval]
  -[VideosExtrasBookmarkController setMinimumBookmarkUpdateInterval:]


VUIDebugMetricsEventControllerGenerator : NSObject /usr/lib/libSystem.B.dylib
 @property  UIViewController *viewController

  // instance methods
  -[VUIDebugMetricsEventControllerGenerator .cxx_destruct]
  -[VUIDebugMetricsEventControllerGenerator setViewController:]
  -[VUIDebugMetricsEventControllerGenerator initWithMetrics:]
  -[VUIDebugMetricsEventControllerGenerator viewController]


VUIAppSpinnerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VUIAppSpinnerView .cxx_destruct]
  -[VUIAppSpinnerView layoutSubviews]


VUIMediaEntityFetchRequest : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *identifier
 @property  NSSet *mediaEntityTypes
 @property  BOOL _isItemsFetch
 @property  BOOL _isCollectionsFetch
 @property  BOOL _isShowsFetch
 @property  BOOL _isSeasonsFetch
 @property  NSPredicate *predicate
 @property  NSArray *sortDescriptors
 @property  NSSet *properties
 @property  {_NSRange=QQ} range
 @property  NSString *groupingKeyPath
 @property  @? groupingSortComparator
 @property  NSDictionary *options

  // class methods
  +[VUIMediaEntityFetchRequest movieRentalsFetchRequest]
  +[VUIMediaEntityFetchRequest homeVideosFetchRequest]
  +[VUIMediaEntityFetchRequest showsFetchRequest]
  +[VUIMediaEntityFetchRequest moviesFetchRequest]
  +[VUIMediaEntityFetchRequest episodesGroupedBySeasonIdentifierFetchRequestWithShowIdentifier:]
  +[VUIMediaEntityFetchRequest _finalizedSortDescriptorsFromSortDescriptors:mediaEntityKind:]
  +[VUIMediaEntityFetchRequest _finalizedSortDescriptorFromSortDescriptor:mediaEntityKind:]
  +[VUIMediaEntityFetchRequest mediaEntityFetchRequestWithIdentifier:]
  +[VUIMediaEntityFetchRequest _identifierPredicateWithIdentifier:]
  +[VUIMediaEntityFetchRequest _minimalPropertiesFetchRequestWithType:]
  +[VUIMediaEntityFetchRequest _minimalMoviesPropertiesFetchRequest]
  +[VUIMediaEntityFetchRequest _minimalMovieRentalsPropertiesFetchRequest]
  +[VUIMediaEntityFetchRequest _minimalShowsPropertiesFetchRequest]
  +[VUIMediaEntityFetchRequest _seasonsFetchRequestWithShowIdentifier:]
  +[VUIMediaEntityFetchRequest _seasonsFetchRequestWithSeasonIdentifier:]
  +[VUIMediaEntityFetchRequest _episodesFetchRequestWithSeasonIdentifier:showIdentifier:]
  +[VUIMediaEntityFetchRequest _addedDateSortDescriptor]
  +[VUIMediaEntityFetchRequest _addedToDateSortDescriptor]
  +[VUIMediaEntityFetchRequest _anyHDRColorCapabilityPredicate]
  +[VUIMediaEntityFetchRequest _any4KResolutionPredicate]
  +[VUIMediaEntityFetchRequest _predicateWithSubpredicates:compoundPredicateType:]
  +[VUIMediaEntityFetchRequest _isLocalPredicate]
  +[VUIMediaEntityFetchRequest _isInPredicateWithAdamId:]
  +[VUIMediaEntityFetchRequest _isEqualPredicateWithAdamId:]
  +[VUIMediaEntityFetchRequest _includeSortIndexesOptions]
  +[VUIMediaEntityFetchRequest _titleSortDescriptor]
  +[VUIMediaEntityFetchRequest _showIdentifierPredicateWithIdentifier:]
  +[VUIMediaEntityFetchRequest _seasonNumberSortDescriptor]
  +[VUIMediaEntityFetchRequest _seasonIdentifierPredicateWithIdentifier:]
  +[VUIMediaEntityFetchRequest _episodeNumberSortDescriptor]
  +[VUIMediaEntityFetchRequest _resolutionPredicateWithResolution:]
  +[VUIMediaEntityFetchRequest _HLSResolutionPredicateWithResolution:]
  +[VUIMediaEntityFetchRequest seasonsFetchRequest]
  +[VUIMediaEntityFetchRequest seasonsFetchRequestWithShowIdentifier:]
  +[VUIMediaEntityFetchRequest seasonsFetchRequestWithSeasonIdentifier:]
  +[VUIMediaEntityFetchRequest episodesFetchRequest]
  +[VUIMediaEntityFetchRequest episodesFetchRequestWithSeasonIdentifier:]
  +[VUIMediaEntityFetchRequest _releaseYearSortDescriptor]
  +[VUIMediaEntityFetchRequest _releaseDateSortDescriptor]
  +[VUIMediaEntityFetchRequest _showTitleSortDescriptor]

  // instance methods
  -[VUIMediaEntityFetchRequest init]
  -[VUIMediaEntityFetchRequest isEqual:]
  -[VUIMediaEntityFetchRequest copyWithZone:]
  -[VUIMediaEntityFetchRequest options]
  -[VUIMediaEntityFetchRequest .cxx_destruct]
  -[VUIMediaEntityFetchRequest identifier]
  -[VUIMediaEntityFetchRequest setPredicate:]
  -[VUIMediaEntityFetchRequest predicate]
  -[VUIMediaEntityFetchRequest sortDescriptors]
  -[VUIMediaEntityFetchRequest setSortDescriptors:]
  -[VUIMediaEntityFetchRequest setIdentifier:]
  -[VUIMediaEntityFetchRequest setOptions:]
  -[VUIMediaEntityFetchRequest range]
  -[VUIMediaEntityFetchRequest properties]
  -[VUIMediaEntityFetchRequest setProperties:]
  -[VUIMediaEntityFetchRequest setRange:]
  -[VUIMediaEntityFetchRequest initWithMediaEntityTypes:]
  -[VUIMediaEntityFetchRequest addAdamIdPredicate:]
  -[VUIMediaEntityFetchRequest addRecentlyAddedSortDescriptorWithLimit:]
  -[VUIMediaEntityFetchRequest addHDRColorCapabilityOr4KResolutionPredicate]
  -[VUIMediaEntityFetchRequest setGroupingKeyPath:]
  -[VUIMediaEntityFetchRequest _didUpdateRequestProperties]
  -[VUIMediaEntityFetchRequest mediaEntityTypes]
  -[VUIMediaEntityFetchRequest groupingKeyPath]
  -[VUIMediaEntityFetchRequest groupingSortComparator]
  -[VUIMediaEntityFetchRequest _isItemsFetch]
  -[VUIMediaEntityFetchRequest _shouldGenerateSortIndexes]
  -[VUIMediaEntityFetchRequest initWithMediaEntityType:]
  -[VUIMediaEntityFetchRequest setGroupingSortComparator:]
  -[VUIMediaEntityFetchRequest _isCollectionsFetch]
  -[VUIMediaEntityFetchRequest _isShowsFetch]
  -[VUIMediaEntityFetchRequest _isSeasonsFetch]
  -[VUIMediaEntityFetchRequest _sortIndexPropertyKeyWithMediaEntityKind:]
  -[VUIMediaEntityFetchRequest _shouldGenerateGroupingSortIndexes]
  -[VUIMediaEntityFetchRequest _manualSortDescriptorsWithMediaEntityKind:propertiesRequiredForSort:]
  -[VUIMediaEntityFetchRequest setMediaEntityTypes:]
  -[VUIMediaEntityFetchRequest addIsLocalPredicate]
  -[VUIMediaEntityFetchRequest _addPredicate:]
  -[VUIMediaEntityFetchRequest addSortIndexesOption]
  -[VUIMediaEntityFetchRequest addGroupingSortIndexesOption]
  -[VUIMediaEntityFetchRequest addHDRColorCapabilityPredicate]
  -[VUIMediaEntityFetchRequest add4KResolutionPredicate]
  -[VUIMediaEntityFetchRequest addDownloadStatePredicateForStates:]
  -[VUIMediaEntityFetchRequest addAdamIdsPredicate:]


VideosExtrasZoomingImageTransitionContext : NSObject /usr/lib/libSystem.B.dylib
 @property  VideosExtrasBorderedImageView *zoomingImageView
 @property  unsigned long itemIndex
 @property  unsigned long appearState
 @property  BOOL interactive

  // instance methods
  -[VideosExtrasZoomingImageTransitionContext .cxx_destruct]
  -[VideosExtrasZoomingImageTransitionContext isInteractive]
  -[VideosExtrasZoomingImageTransitionContext itemIndex]
  -[VideosExtrasZoomingImageTransitionContext setItemIndex:]
  -[VideosExtrasZoomingImageTransitionContext setInteractive:]
  -[VideosExtrasZoomingImageTransitionContext setAppearState:]
  -[VideosExtrasZoomingImageTransitionContext appearState]
  -[VideosExtrasZoomingImageTransitionContext setZoomingImageView:]
  -[VideosExtrasZoomingImageTransitionContext initWithZoomingImageView:itemIndex:appearState:isInteractive:]
  -[VideosExtrasZoomingImageTransitionContext zoomingImageView]


VUIMPMediaItemAssetControllerManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue

  // class methods
  +[VUIMPMediaItemAssetControllerManager defaultManager]

  // instance methods
  -[VUIMPMediaItemAssetControllerManager init]
  -[VUIMPMediaItemAssetControllerManager .cxx_destruct]
  -[VUIMPMediaItemAssetControllerManager serialProcessingDispatchQueue]
  -[VUIMPMediaItemAssetControllerManager setSerialProcessingDispatchQueue:]
  -[VUIMPMediaItemAssetControllerManager mediaItemAssetControllerWithMediaItem:mediaEntityIdentifier:]
  -[VUIMPMediaItemAssetControllerManager mediaItemCollectionAssetControllerWithMediaItemCollection:mediaEntityIdentifier:]
  -[VUIMPMediaItemAssetControllerManager mediaItemDownloadControllerWithMediaItem:]


VUISidebandLibraryIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaLibraryIdentifier>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUISidebandLibraryIdentifier copyWithZone:]


VUIPersistentContainer : NSPersistentContainer /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
  // class methods
  +[VUIPersistentContainer defaultDirectoryURL]


VUISidebandMediaLibrary : VUIDeviceMediaLibrary
 @property  NSPersistentContainer *persistentContainer
 @property  NSManagedObjectContext *backgroundManagedObjectContext
 @property  NSObject<OS_dispatch_queue> *serialQueue

  // class methods
  +[VUISidebandMediaLibrary initialize]
  +[VUISidebandMediaLibrary setDeleteAllVideosAndKeysOnInitializationForAppRemoval:]

  // instance methods
  -[VUISidebandMediaLibrary dealloc]
  -[VUISidebandMediaLibrary .cxx_destruct]
  -[VUISidebandMediaLibrary initWithManager:]
  -[VUISidebandMediaLibrary title]
  -[VUISidebandMediaLibrary serialQueue]
  -[VUISidebandMediaLibrary persistentContainer]
  -[VUISidebandMediaLibrary setSerialQueue:]
  -[VUISidebandMediaLibrary setPersistentContainer:]
  -[VUISidebandMediaLibrary backgroundManagedObjectContext]
  -[VUISidebandMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUISidebandMediaLibrary _dumpDatabaseToLogIfEnabled]
  -[VUISidebandMediaLibrary setBackgroundManagedObjectContext:]
  -[VUISidebandMediaLibrary _mainQueueManagedObjectContextDidSave:]
  -[VUISidebandMediaLibrary _activeAccountDidChange:]
  -[VUISidebandMediaLibrary _pruneVideosAtAppLaunchWithCompletion:]
  -[VUISidebandMediaLibrary _movieForCanonicalID:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary _tvEpisodeForCanonicalID:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary _tvSeriesForCanonicalID:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary imageInfoForSeries:imageType:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary _tvSeasonForCanonicalID:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary imageInfoForVideo:imageType:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary saveChangesToManagedObjects]
  -[VUISidebandMediaLibrary _managedObjectWithEntityName:predicate:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary deleteFPSKeyDeletionInfos:]
  -[VUISidebandMediaLibrary removeDownloadedMediaForVideoManagedObjects:]
  -[VUISidebandMediaLibrary mainContextVideoForVideo:]
  -[VUISidebandMediaLibrary _removeDownloadedMediaForVideoManagedObject:saveWhenDone:]
  -[VUISidebandMediaLibrary _mainContextManagedObjectsForObjects:]
  -[VUISidebandMediaLibrary _deleteVideoManagedObjects:]
  -[VUISidebandMediaLibrary videosWithDownloadState:]
  -[VUISidebandMediaLibrary _downloadedVideosForNonSignedInUsers]
  -[VUISidebandMediaLibrary _removeDownloadsForNonSignedInUsers]
  -[VUISidebandMediaLibrary videoForPlayable:]
  -[VUISidebandMediaLibrary videoForCanonicalID:]
  -[VUISidebandMediaLibrary fpsKeyInfoForVideo:keyURI:createIfNeeded:wasCreated:]
  -[VUISidebandMediaLibrary existingFpsKeyInfoForKeyURI:]
  -[VUISidebandMediaLibrary allFpsKeyDeletionInfos]
  -[VUISidebandMediaLibrary deleteFPSKeyDeletionInfo:]
  -[VUISidebandMediaLibrary removeDownloadedMediaForVideoManagedObject:]
  -[VUISidebandMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUISidebandMediaLibrary saveMediaEntity:completionHandler:]
  -[VUISidebandMediaLibrary _imageLoaderIdentifier]
  -[VUISidebandMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUISidebandMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]


VUIPlistMediaLibraryIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaLibraryIdentifier>
 @property  NSURL *libraryFileURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPlistMediaLibraryIdentifier init]
  -[VUIPlistMediaLibraryIdentifier copyWithZone:]
  -[VUIPlistMediaLibraryIdentifier initWithURL:]
  -[VUIPlistMediaLibraryIdentifier .cxx_destruct]
  -[VUIPlistMediaLibraryIdentifier libraryFileURL]
  -[VUIPlistMediaLibraryIdentifier setLibraryFileURL:]


VUILibraryProductInfoView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  long long maxLineCount
 @property  double interitemSpacing
 @property  {UIEdgeInsets=dddd} padding
 @property  NSArray *groupedInfos
 @property  NSArray *normalizedGroupedInfos
 @property  long long layoutType
 @property  double lineSpacing
 @property  UIView *headerView
 @property  {UIEdgeInsets=dddd} headerMargin
 @property  UIView *footerView
 @property  {UIEdgeInsets=dddd} footerMargin
 @property  NSArray *infos

  // instance methods
  -[VUILibraryProductInfoView .cxx_destruct]
  -[VUILibraryProductInfoView lineSpacing]
  -[VUILibraryProductInfoView intrinsicContentSize]
  -[VUILibraryProductInfoView initWithFrame:]
  -[VUILibraryProductInfoView traitCollectionDidChange:]
  -[VUILibraryProductInfoView sizeThatFits:]
  -[VUILibraryProductInfoView layoutSubviews]
  -[VUILibraryProductInfoView headerView]
  -[VUILibraryProductInfoView setHeaderView:]
  -[VUILibraryProductInfoView padding]
  -[VUILibraryProductInfoView footerView]
  -[VUILibraryProductInfoView setFooterView:]
  -[VUILibraryProductInfoView infos]
  -[VUILibraryProductInfoView setInfos:]
  -[VUILibraryProductInfoView _columnCount]
  -[VUILibraryProductInfoView layoutType]
  -[VUILibraryProductInfoView setLayoutType:]
  -[VUILibraryProductInfoView interitemSpacing]
  -[VUILibraryProductInfoView maxLineCount]
  -[VUILibraryProductInfoView headerMargin]
  -[VUILibraryProductInfoView setHeaderMargin:]
  -[VUILibraryProductInfoView setFooterMargin:]
  -[VUILibraryProductInfoView footerMargin]
  -[VUILibraryProductInfoView groupedInfos]
  -[VUILibraryProductInfoView _maxWidthForGroupInfos:]
  -[VUILibraryProductInfoView _layouCellContentView:inCellBounds:]
  -[VUILibraryProductInfoView setGroupedInfos:]
  -[VUILibraryProductInfoView _getNormalizedGroupedInfos]
  -[VUILibraryProductInfoView normalizedGroupedInfos]
  -[VUILibraryProductInfoView _sectionInfoWidth]
  -[VUILibraryProductInfoView setNormalizedGroupedInfos:]


VUILibraryProductInfoSection : NSObject /usr/lib/libSystem.B.dylib
 @property  double lineSpacing
 @property  {UIEdgeInsets=dddd} headerPadding
 @property  {UIEdgeInsets=dddd} headerMargin
 @property  long long layoutType
 @property  NSString *groupName
 @property  UIView *headerContentView
 @property  NSArray *dataViews

  // class methods
  +[VUILibraryProductInfoSection headerViewWithString:]
  +[VUILibraryProductInfoSection dataViewWithString:]

  // instance methods
  -[VUILibraryProductInfoSection .cxx_destruct]
  -[VUILibraryProductInfoSection lineSpacing]
  -[VUILibraryProductInfoSection setLineSpacing:]
  -[VUILibraryProductInfoSection groupName]
  -[VUILibraryProductInfoSection setGroupName:]
  -[VUILibraryProductInfoSection layoutType]
  -[VUILibraryProductInfoSection setLayoutType:]
  -[VUILibraryProductInfoSection headerPadding]
  -[VUILibraryProductInfoSection headerContentView]
  -[VUILibraryProductInfoSection headerMargin]
  -[VUILibraryProductInfoSection setHeaderPadding:]
  -[VUILibraryProductInfoSection setHeaderContentView:]
  -[VUILibraryProductInfoSection dataViews]
  -[VUILibraryProductInfoSection setDataViews:]


VideosExtrasTemplateViewController : VideosExtrasElementViewController <IKAppDocumentDelegate>
 @property  IKAppDocument *document
 @property  BOOL showsPlaceholder
 @property  VideosExtrasContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideosExtrasTemplateViewController templateViewControllerWithDocument:options:context:]

  // instance methods
  -[VideosExtrasTemplateViewController dealloc]
  -[VideosExtrasTemplateViewController .cxx_destruct]
  -[VideosExtrasTemplateViewController context]
  -[VideosExtrasTemplateViewController viewDidLoad]
  -[VideosExtrasTemplateViewController viewDidAppear:]
  -[VideosExtrasTemplateViewController viewDidDisappear:]
  -[VideosExtrasTemplateViewController document]
  -[VideosExtrasTemplateViewController documentNeedsUpdate:]
  -[VideosExtrasTemplateViewController documentDidUpdate:]
  -[VideosExtrasTemplateViewController _showPlaceholder]
  -[VideosExtrasTemplateViewController showsPlaceholder]
  -[VideosExtrasTemplateViewController _startBackgroundAudio]
  -[VideosExtrasTemplateViewController shouldUpdateByReplacingViewControllerWithTemplate:]
  -[VideosExtrasTemplateViewController configureBackgroundWithElements:]
  -[VideosExtrasTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasTemplateViewController documentDidFail:withError:]


VUIActionPromise : VUIAction
 @property  NSDictionary *contextDataDictionary
 @property  IKAppContext *appContext

  // instance methods
  -[VUIActionPromise .cxx_destruct]
  -[VUIActionPromise appContext]
  -[VUIActionPromise setAppContext:]
  -[VUIActionPromise performWithTargetResponder:completionHandler:]
  -[VUIActionPromise initWithContextData:appContext:]
  -[VUIActionPromise contextDataDictionary]


VUIAccessView_iOS : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <TVCarouselViewDataSource>
 @property  UIView *privacyView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAccessView_iOS iconSize]

  // instance methods
  -[VUIAccessView_iOS dealloc]
  -[VUIAccessView_iOS .cxx_destruct]
  -[VUIAccessView_iOS observeValueForKeyPath:ofObject:change:context:]
  -[VUIAccessView_iOS setTitle:]
  -[VUIAccessView_iOS layoutSubviews]
  -[VUIAccessView_iOS setBody:]
  -[VUIAccessView_iOS setFooter:]
  -[VUIAccessView_iOS allowButton]
  -[VUIAccessView_iOS numberOfItemsInCarouselView:]
  -[VUIAccessView_iOS carouselView:cellForItemAtIndex:]
  -[VUIAccessView_iOS _buildCarousel]
  -[VUIAccessView_iOS _buildLogoStack]
  -[VUIAccessView_iOS _imageViewForIndex:]
  -[VUIAccessView_iOS initWithApps:]
  -[VUIAccessView_iOS disallowButton]
  -[VUIAccessView_iOS seeAllButton]
  -[VUIAccessView_iOS nackButton]
  -[VUIAccessView_iOS bodyScroll]
  -[VUIAccessView_iOS showNackScreen]
  -[VUIAccessView_iOS privacyView]
  -[VUIAccessView_iOS setPrivacyView:]


VUIActionAlert : VUIAction
 @property  NSString *title
 @property  NSString *descriptionString
 @property  NSString *dismissButtonTitle

  // instance methods
  -[VUIActionAlert .cxx_destruct]
  -[VUIActionAlert title]
  -[VUIActionAlert setTitle:]
  -[VUIActionAlert descriptionString]
  -[VUIActionAlert setDescriptionString:]
  -[VUIActionAlert dismissButtonTitle]
  -[VUIActionAlert setDismissButtonTitle:]
  -[VUIActionAlert performWithTargetResponder:completionHandler:]
  -[VUIActionAlert initWithContextData:]


VUIRoomBannerViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIRoomBannerViewFactory configureViewWithElement:existingController:]


VUIAppDocumentUpdateEventDescriptor : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long type

  // class methods
  +[VUIAppDocumentUpdateEventDescriptor entitlements]
  +[VUIAppDocumentUpdateEventDescriptor settings]
  +[VUIAppDocumentUpdateEventDescriptor restrictions]
  +[VUIAppDocumentUpdateEventDescriptor favorites]
  +[VUIAppDocumentUpdateEventDescriptor purchases]
  +[VUIAppDocumentUpdateEventDescriptor preferredVideoFormat]
  +[VUIAppDocumentUpdateEventDescriptor accountChanged]
  +[VUIAppDocumentUpdateEventDescriptor appDidBecomeActive]
  +[VUIAppDocumentUpdateEventDescriptor playActivity]
  +[VUIAppDocumentUpdateEventDescriptor upNext]
  +[VUIAppDocumentUpdateEventDescriptor removeFromPlayHistory]
  +[VUIAppDocumentUpdateEventDescriptor utsk]
  +[VUIAppDocumentUpdateEventDescriptor postPlay]
  +[VUIAppDocumentUpdateEventDescriptor playHistoryUpdated]
  +[VUIAppDocumentUpdateEventDescriptor clearPlayHistory]
  +[VUIAppDocumentUpdateEventDescriptor appRefresh]
  +[VUIAppDocumentUpdateEventDescriptor locationAuthorizationChanged]
  +[VUIAppDocumentUpdateEventDescriptor locationRetrieved]

  // instance methods
  -[VUIAppDocumentUpdateEventDescriptor init]
  -[VUIAppDocumentUpdateEventDescriptor isEqual:]
  -[VUIAppDocumentUpdateEventDescriptor copyWithZone:]
  -[VUIAppDocumentUpdateEventDescriptor type]
  -[VUIAppDocumentUpdateEventDescriptor setType:]
  -[VUIAppDocumentUpdateEventDescriptor initWithEventType:]


VUISeasonPickerCollectionViewCell : VUIListCollectionViewCell
 @property  VUILabel *titleLabel
 @property  VUILabel *subtitleLabel
 @property  VUILabel *secondSubtitleLabel
 @property  _TVImageView *seasonImageView
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView

  // instance methods
  -[VUISeasonPickerCollectionViewCell .cxx_destruct]
  -[VUISeasonPickerCollectionViewCell initWithFrame:]
  -[VUISeasonPickerCollectionViewCell titleLabel]
  -[VUISeasonPickerCollectionViewCell sizeThatFits:]
  -[VUISeasonPickerCollectionViewCell layoutSubviews]
  -[VUISeasonPickerCollectionViewCell setTitleLabel:]
  -[VUISeasonPickerCollectionViewCell setSubtitleLabel:]
  -[VUISeasonPickerCollectionViewCell subtitleLabel]
  -[VUISeasonPickerCollectionViewCell topSeparatorView]
  -[VUISeasonPickerCollectionViewCell bottomSeparatorView]
  -[VUISeasonPickerCollectionViewCell setTopSeparatorView:]
  -[VUISeasonPickerCollectionViewCell setBottomSeparatorView:]
  -[VUISeasonPickerCollectionViewCell setSecondSubtitleLabel:]
  -[VUISeasonPickerCollectionViewCell setSeasonImageView:]
  -[VUISeasonPickerCollectionViewCell secondSubtitleLabel]
  -[VUISeasonPickerCollectionViewCell seasonImageView]


VUILibraryEpisodeListCell : VUIListCollectionViewCell
 @property  VUILibraryEpisodeFrameView *imageFrameView
 @property  VUISeparatorView *separatorView
 @property  UIStackView *episodeInfoStackView
 @property  VUILabel *titleLabel
 @property  VUILabel *releaseDateLabel
 @property  VUILabel *durationLabel
 @property  VUIDownloadButton *downloadButton
 @property  VUILabel *dotSeparatorLabel
 @property  NSObject<VUIMediaEntityAssetController> *assetController
 @property  NSString *title
 @property  NSString *releaseDate
 @property  NSString *duration

  // class methods
  +[VUILibraryEpisodeListCell configureVUILibraryEpisodeListCell:withMedia:andAssetController:]
  +[VUILibraryEpisodeListCell _metadataLabelWithString:existingLabel:]

  // instance methods
  -[VUILibraryEpisodeListCell .cxx_destruct]
  -[VUILibraryEpisodeListCell title]
  -[VUILibraryEpisodeListCell setTitle:]
  -[VUILibraryEpisodeListCell duration]
  -[VUILibraryEpisodeListCell setDuration:]
  -[VUILibraryEpisodeListCell initWithFrame:]
  -[VUILibraryEpisodeListCell titleLabel]
  -[VUILibraryEpisodeListCell traitCollectionDidChange:]
  -[VUILibraryEpisodeListCell sizeThatFits:]
  -[VUILibraryEpisodeListCell layoutSubviews]
  -[VUILibraryEpisodeListCell separatorView]
  -[VUILibraryEpisodeListCell setTitleLabel:]
  -[VUILibraryEpisodeListCell setSeparatorView:]
  -[VUILibraryEpisodeListCell releaseDate]
  -[VUILibraryEpisodeListCell setReleaseDate:]
  -[VUILibraryEpisodeListCell downloadButton]
  -[VUILibraryEpisodeListCell setDurationLabel:]
  -[VUILibraryEpisodeListCell durationLabel]
  -[VUILibraryEpisodeListCell assetController]
  -[VUILibraryEpisodeListCell setAssetController:]
  -[VUILibraryEpisodeListCell imageFrameView]
  -[VUILibraryEpisodeListCell setImageFrameView:]
  -[VUILibraryEpisodeListCell _addDownloadButtonIfRequired:]
  -[VUILibraryEpisodeListCell _configureDotSeparator]
  -[VUILibraryEpisodeListCell _contentSizeCategoryIsAccessibility]
  -[VUILibraryEpisodeListCell setDownloadButton:]
  -[VUILibraryEpisodeListCell _metadataHeightToBaselineNonAXContentSizeCategory]
  -[VUILibraryEpisodeListCell _metadataScaledTopMarginForNonAXContentSizeCategory]
  -[VUILibraryEpisodeListCell episodeInfoStackView]
  -[VUILibraryEpisodeListCell setEpisodeInfoStackView:]
  -[VUILibraryEpisodeListCell releaseDateLabel]
  -[VUILibraryEpisodeListCell setReleaseDateLabel:]
  -[VUILibraryEpisodeListCell dotSeparatorLabel]
  -[VUILibraryEpisodeListCell setDotSeparatorLabel:]


VUIMetricsMediaEvent : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMetricsMediaEvent recordPlay:isLaunchingExtras:]
  +[VUIMetricsMediaEvent recordPunchout:isUrlForPlay:]


VUILibraryPopoverViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDelegate, UICollectionViewDataSource>
 @property  NSString *popoverTitle
 @property  NSIndexPath *selectedItemIndexPath
 @property  <VUILibraryPopoverDataSource> *dataSource
 @property  <VUILibraryPopoverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryPopoverViewController delegate]
  -[VUILibraryPopoverViewController setDelegate:]
  -[VUILibraryPopoverViewController .cxx_destruct]
  -[VUILibraryPopoverViewController dataSource]
  -[VUILibraryPopoverViewController setDataSource:]
  -[VUILibraryPopoverViewController loadView]
  -[VUILibraryPopoverViewController traitCollectionDidChange:]
  -[VUILibraryPopoverViewController scrollViewWillBeginDecelerating:]
  -[VUILibraryPopoverViewController viewWillAppear:]
  -[VUILibraryPopoverViewController reloadData]
  -[VUILibraryPopoverViewController numberOfSectionsInCollectionView:]
  -[VUILibraryPopoverViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryPopoverViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryPopoverViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibraryPopoverViewController viewDidLayoutSubviews]
  -[VUILibraryPopoverViewController collectionView:didHighlightItemAtIndexPath:]
  -[VUILibraryPopoverViewController collectionView:didSelectItemAtIndexPath:]
  -[VUILibraryPopoverViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryPopoverViewController collectionView:layout:minimumLineSpacingForSectionAtIndex:]
  -[VUILibraryPopoverViewController _configureNavigationBar]
  -[VUILibraryPopoverViewController _dismissPopover]
  -[VUILibraryPopoverViewController initWithPopoverTitle:]
  -[VUILibraryPopoverViewController popoverTitle]
  -[VUILibraryPopoverViewController selectedItemIndexPath]
  -[VUILibraryPopoverViewController setSelectedItemIndexPath:]


VUIPlistMediaDatabaseItem : VUIPlistMediaDatabaseEntity <NSCopying>
 @property  VUIPlistMediaDatabaseSeason *season
 @property  NSNumber *playable
 @property  NSNumber *duration
 @property  NSDate *releaseDate
 @property  NSURL *previewFrameURL
 @property  _TVContentRating *contentRating
 @property  NSNumber *colorCapability
 @property  NSNumber *HLSColorCapability
 @property  NSNumber *episodeNumber
 @property  NSString *studio
 @property  VUIMediaItemCredits *credits
 @property  NSURL *playbackURL
 @property  NSURL *filePathURL
 @property  NSDictionary *offlineFPSKeys
 @property  NSString *downloadState

  // instance methods
  -[VUIPlistMediaDatabaseItem isEqual:]
  -[VUIPlistMediaDatabaseItem copyWithZone:]
  -[VUIPlistMediaDatabaseItem .cxx_destruct]
  -[VUIPlistMediaDatabaseItem initWithDictionary:]
  -[VUIPlistMediaDatabaseItem filePathURL]
  -[VUIPlistMediaDatabaseItem dictionaryRepresentation]
  -[VUIPlistMediaDatabaseItem duration]
  -[VUIPlistMediaDatabaseItem setDuration:]
  -[VUIPlistMediaDatabaseItem isLocal]
  -[VUIPlistMediaDatabaseItem isPlayable]
  -[VUIPlistMediaDatabaseItem releaseDate]
  -[VUIPlistMediaDatabaseItem setReleaseDate:]
  -[VUIPlistMediaDatabaseItem setSeason:]
  -[VUIPlistMediaDatabaseItem season]
  -[VUIPlistMediaDatabaseItem episodeNumber]
  -[VUIPlistMediaDatabaseItem setEpisodeNumber:]
  -[VUIPlistMediaDatabaseItem setContentRating:]
  -[VUIPlistMediaDatabaseItem contentRating]
  -[VUIPlistMediaDatabaseItem downloadState]
  -[VUIPlistMediaDatabaseItem setDownloadState:]
  -[VUIPlistMediaDatabaseItem initWithIdentifier:type:]
  -[VUIPlistMediaDatabaseItem credits]
  -[VUIPlistMediaDatabaseItem setCredits:]
  -[VUIPlistMediaDatabaseItem studio]
  -[VUIPlistMediaDatabaseItem setStudio:]
  -[VUIPlistMediaDatabaseItem HLSColorCapability]
  -[VUIPlistMediaDatabaseItem colorCapability]
  -[VUIPlistMediaDatabaseItem playbackURL]
  -[VUIPlistMediaDatabaseItem setPlaybackURL:]
  -[VUIPlistMediaDatabaseItem previewFrameURL]
  -[VUIPlistMediaDatabaseItem offlineFPSKeys]
  -[VUIPlistMediaDatabaseItem setPreviewFrameURL:]
  -[VUIPlistMediaDatabaseItem setColorCapability:]
  -[VUIPlistMediaDatabaseItem setHLSColorCapability:]
  -[VUIPlistMediaDatabaseItem setFilePathURL:]
  -[VUIPlistMediaDatabaseItem setOfflineFPSKeys:]


VUIPlaybackPositionInfo : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSNumber *bookmarkTime
 @property  NSNumber *playCount
 @property  NSNumber *hasBeenPlayed

  // instance methods
  -[VUIPlaybackPositionInfo copyWithZone:]
  -[VUIPlaybackPositionInfo .cxx_destruct]
  -[VUIPlaybackPositionInfo playCount]
  -[VUIPlaybackPositionInfo setPlayCount:]
  -[VUIPlaybackPositionInfo bookmarkTime]
  -[VUIPlaybackPositionInfo hasBeenPlayed]
  -[VUIPlaybackPositionInfo setHasBeenPlayed:]
  -[VUIPlaybackPositionInfo setBookmarkTime:]


VUIPlaybackPositionController : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL running

  // class methods
  +[VUIPlaybackPositionController sharedInstance]

  // instance methods
  -[VUIPlaybackPositionController init]
  -[VUIPlaybackPositionController .cxx_destruct]
  -[VUIPlaybackPositionController _init]
  -[VUIPlaybackPositionController isRunning]
  -[VUIPlaybackPositionController setRunning:]
  -[VUIPlaybackPositionController _onQueue_beginCapturingEvents]
  -[VUIPlaybackPositionController _onQueue_endCapturingEvents]
  -[VUIPlaybackPositionController _onQueue_updateEntityWithPlaybackPositionInfo:forTrack:]
  -[VUIPlaybackPositionController beginCapturingEvents]
  -[VUIPlaybackPositionController endCapturingEvents]
  -[VUIPlaybackPositionController persistPlaybackPositionInfo:forTrack:]


VUIPlistMediaEntitiesFetchOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  VUIPlistMediaLibrary *mediaLibrary
 @property  NSArray *requests
 @property  NSArray *responses
 @property  NSError *error

  // instance methods
  -[VUIPlistMediaEntitiesFetchOperation init]
  -[VUIPlistMediaEntitiesFetchOperation .cxx_destruct]
  -[VUIPlistMediaEntitiesFetchOperation error]
  -[VUIPlistMediaEntitiesFetchOperation setError:]
  -[VUIPlistMediaEntitiesFetchOperation requests]
  -[VUIPlistMediaEntitiesFetchOperation setRequests:]
  -[VUIPlistMediaEntitiesFetchOperation responses]
  -[VUIPlistMediaEntitiesFetchOperation setResponses:]
  -[VUIPlistMediaEntitiesFetchOperation mediaLibrary]
  -[VUIPlistMediaEntitiesFetchOperation setMediaLibrary:]
  -[VUIPlistMediaEntitiesFetchOperation executionDidBegin]
  -[VUIPlistMediaEntitiesFetchOperation initWithMediaLibrary:requests:]
  -[VUIPlistMediaEntitiesFetchOperation _itemsFetchResponseWithRequest:error:]
  -[VUIPlistMediaEntitiesFetchOperation _collectionsFetchResponseWithRequest:error:]
  -[VUIPlistMediaEntitiesFetchOperation _fetchResponseWithMediaEntities:request:]
  -[VUIPlistMediaEntitiesFetchOperation _mediaEntityKindForRequest:]


VUIMediaLibraryFetchControllerQueueOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  NSArray *fetchControllers
 @property  unsigned long mediaLibraryRevision

  // instance methods
  -[VUIMediaLibraryFetchControllerQueueOperation init]
  -[VUIMediaLibraryFetchControllerQueueOperation .cxx_destruct]
  -[VUIMediaLibraryFetchControllerQueueOperation executionDidBegin]
  -[VUIMediaLibraryFetchControllerQueueOperation fetchControllers]
  -[VUIMediaLibraryFetchControllerQueueOperation mediaLibraryRevision]
  -[VUIMediaLibraryFetchControllerQueueOperation initWithFetchControllers:mediaLibraryRevision:]
  -[VUIMediaLibraryFetchControllerQueueOperation setFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueueOperation setMediaLibraryRevision:]


VUIDebugMetricsEventCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *eventTypeLabel
 @property  VUITextLayout *eventTypeLabelLayout
 @property  VUILabel *subhead1Label
 @property  VUITextLayout *subhead1LabelLayout
 @property  VUILabel *subhead2Label
 @property  VUITextLayout *subhead2LabelLayout
 @property  VUILabel *tabNameLabel
 @property  VUITextLayout *tabNameLabelLayout
 @property  UIImageView *tabImageView
 @property  VUISeparatorView *separatorView
 @property  NSString *eventTypeLabelStr
 @property  NSString *subhead1LabelStr
 @property  NSString *subhead2LabelStr
 @property  UIImage *tabImage
 @property  NSString *tabName

  // instance methods
  -[VUIDebugMetricsEventCell .cxx_destruct]
  -[VUIDebugMetricsEventCell prepareForReuse]
  -[VUIDebugMetricsEventCell layoutSubviews]
  -[VUIDebugMetricsEventCell separatorView]
  -[VUIDebugMetricsEventCell initWithStyle:reuseIdentifier:]
  -[VUIDebugMetricsEventCell setSeparatorView:]
  -[VUIDebugMetricsEventCell setEventTypeLabelStr:]
  -[VUIDebugMetricsEventCell setSubhead1LabelStr:]
  -[VUIDebugMetricsEventCell setSubhead2LabelStr:]
  -[VUIDebugMetricsEventCell setTabName:]
  -[VUIDebugMetricsEventCell tabImage]
  -[VUIDebugMetricsEventCell setTabImage:]
  -[VUIDebugMetricsEventCell eventTypeLabelStr]
  -[VUIDebugMetricsEventCell subhead1LabelStr]
  -[VUIDebugMetricsEventCell subhead2LabelStr]
  -[VUIDebugMetricsEventCell tabName]
  -[VUIDebugMetricsEventCell eventTypeLabel]
  -[VUIDebugMetricsEventCell setEventTypeLabel:]
  -[VUIDebugMetricsEventCell eventTypeLabelLayout]
  -[VUIDebugMetricsEventCell setEventTypeLabelLayout:]
  -[VUIDebugMetricsEventCell subhead1Label]
  -[VUIDebugMetricsEventCell setSubhead1Label:]
  -[VUIDebugMetricsEventCell subhead1LabelLayout]
  -[VUIDebugMetricsEventCell setSubhead1LabelLayout:]
  -[VUIDebugMetricsEventCell subhead2Label]
  -[VUIDebugMetricsEventCell setSubhead2Label:]
  -[VUIDebugMetricsEventCell subhead2LabelLayout]
  -[VUIDebugMetricsEventCell setSubhead2LabelLayout:]
  -[VUIDebugMetricsEventCell tabNameLabel]
  -[VUIDebugMetricsEventCell setTabNameLabel:]
  -[VUIDebugMetricsEventCell tabNameLabelLayout]
  -[VUIDebugMetricsEventCell setTabNameLabelLayout:]
  -[VUIDebugMetricsEventCell tabImageView]
  -[VUIDebugMetricsEventCell setTabImageView:]


VUIMediaTagsViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  unsigned long type
 @property  VUITextLayout *textLayout
 @property  VUITextLayout *rentalExpirationTextLayout
 @property  NSArray *groupedKeys
 @property  {UIEdgeInsets=dddd} groupMargin
 @property  TVImageLayout *badgeImageLayout
 @property  {UIEdgeInsets=dddd} commonSenseMargin
 @property  {UIEdgeInsets=dddd} tomatoMeterMargin

  // class methods
  +[VUIMediaTagsViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIMediaTagsViewLayout init]
  -[VUIMediaTagsViewLayout type]
  -[VUIMediaTagsViewLayout setType:]
  -[VUIMediaTagsViewLayout .cxx_destruct]
  -[VUIMediaTagsViewLayout initWithType:]
  -[VUIMediaTagsViewLayout textLayout]
  -[VUIMediaTagsViewLayout rentalExpirationTextLayout]
  -[VUIMediaTagsViewLayout groupedKeys]
  -[VUIMediaTagsViewLayout groupMargin]
  -[VUIMediaTagsViewLayout badgeImageLayout]
  -[VUIMediaTagsViewLayout commonSenseMargin]
  -[VUIMediaTagsViewLayout tomatoMeterMargin]


VUIRoomBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  IKViewElement *viewElement
 @property  VUILabel *titleLabel
 @property  VUIFocusableTextView *descriptionLabel
 @property  VUIRoomBannerLayout *layout
 @property  _TVImageView *backgroundImage

  // instance methods
  -[VUIRoomBannerView .cxx_destruct]
  -[VUIRoomBannerView backgroundImage]
  -[VUIRoomBannerView setBackgroundImage:]
  -[VUIRoomBannerView layout]
  -[VUIRoomBannerView setLayout:]
  -[VUIRoomBannerView initWithFrame:]
  -[VUIRoomBannerView titleLabel]
  -[VUIRoomBannerView sizeThatFits:]
  -[VUIRoomBannerView layoutSubviews]
  -[VUIRoomBannerView separatorView]
  -[VUIRoomBannerView setTitleLabel:]
  -[VUIRoomBannerView setDescriptionLabel:]
  -[VUIRoomBannerView descriptionLabel]
  -[VUIRoomBannerView setSeparatorView:]
  -[VUIRoomBannerView viewElement]
  -[VUIRoomBannerView setViewElement:]
  -[VUIRoomBannerView _layoutSubviewsWithSize:computationOnly:]


VUIMediaItemEntityTypesFetchController : VUIMediaLibraryFetchController
 @property  VUIMediaItemEntityTypesFetchResponse *response
 @property  <VUIMediaItemEntityTypesFetchControllerDelegate> *delegate

  // instance methods
  -[VUIMediaItemEntityTypesFetchController delegate]
  -[VUIMediaItemEntityTypesFetchController setDelegate:]
  -[VUIMediaItemEntityTypesFetchController .cxx_destruct]
  -[VUIMediaItemEntityTypesFetchController response]
  -[VUIMediaItemEntityTypesFetchController setResponse:]
  -[VUIMediaItemEntityTypesFetchController cancelFetch]
  -[VUIMediaItemEntityTypesFetchController _notifyDelegateWithBlock:]
  -[VUIMediaItemEntityTypesFetchController initWithMediaLibrary:]
  -[VUIMediaItemEntityTypesFetchController _updateResponseWithResult:replaceContentsOnNilChanges:]
  -[VUIMediaItemEntityTypesFetchController _fetchOperationForFetchReason:]
  -[VUIMediaItemEntityTypesFetchController _didCompleteFetchOperation:]
  -[VUIMediaItemEntityTypesFetchController _handleInitialFetchControllerOperationDidCompleteWithResult:error:]
  -[VUIMediaItemEntityTypesFetchController _handleContentsChangeFetchControllerOperationDidCompleteWithResult:error:]
  -[VUIMediaItemEntityTypesFetchController _notifyFetchDidCompleteWithResult:]
  -[VUIMediaItemEntityTypesFetchController _notifyFetchDidFailWithError:]


VUIDebugMetricsDictionaryViewController : UITableViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSDictionary *dictionary

  // instance methods
  -[VUIDebugMetricsDictionaryViewController .cxx_destruct]
  -[VUIDebugMetricsDictionaryViewController dictionary]
  -[VUIDebugMetricsDictionaryViewController setDictionary:]
  -[VUIDebugMetricsDictionaryViewController viewDidLoad]
  -[VUIDebugMetricsDictionaryViewController tableView:numberOfRowsInSection:]
  -[VUIDebugMetricsDictionaryViewController tableView:cellForRowAtIndexPath:]
  -[VUIDebugMetricsDictionaryViewController numberOfSectionsInTableView:]
  -[VUIDebugMetricsDictionaryViewController sortedKeys]


VUIActionShareSheet : VUIAction
 @property  NSString *urlString
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *imageURLStr
 @property  UIView *sourceView

  // instance methods
  -[VUIActionShareSheet .cxx_destruct]
  -[VUIActionShareSheet title]
  -[VUIActionShareSheet setTitle:]
  -[VUIActionShareSheet subtitle]
  -[VUIActionShareSheet setSubtitle:]
  -[VUIActionShareSheet sourceView]
  -[VUIActionShareSheet setSourceView:]
  -[VUIActionShareSheet urlString]
  -[VUIActionShareSheet setUrlString:]
  -[VUIActionShareSheet performWithTargetResponder:completionHandler:]
  -[VUIActionShareSheet initWithContextData:viewElement:sourceView:]
  -[VUIActionShareSheet imageURLStr]
  -[VUIActionShareSheet setImageURLStr:]


VUIFeedbackTableLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *headerTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  double middleSpacing

  // class methods
  +[VUIFeedbackTableLayout layoutWithLayout:element:]

  // instance methods
  -[VUIFeedbackTableLayout init]
  -[VUIFeedbackTableLayout .cxx_destruct]
  -[VUIFeedbackTableLayout _setupLayout]
  -[VUIFeedbackTableLayout descriptionTextLayout]
  -[VUIFeedbackTableLayout headerTextLayout]
  -[VUIFeedbackTableLayout middleSpacing]


VUIFeedbackLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *headerTitleLayout
 @property  VUITextLayout *headerSubtitleLayout
 @property  VUITextLayout *sourceTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  TVImageLayout *headerBadgeLayout
 @property  TVImageLayout *sourceBadgeLayout
 @property  VUIFeedbackTableLayout *reviewTableLayout
 @property  TVRatingBadgeLayout *ratingBadgeLayout
 @property  {TVCornerRadii=dddd} borderRadii
 @property  UIColor *darkHighlightColor
 @property  {UIEdgeInsets=dddd} headerImagePadding
 @property  long long layoutType

  // class methods
  +[VUIFeedbackLayout layoutWithLayout:element:]

  // instance methods
  -[VUIFeedbackLayout .cxx_destruct]
  -[VUIFeedbackLayout borderRadii]
  -[VUIFeedbackLayout initWithLayoutType:]
  -[VUIFeedbackLayout layoutType]
  -[VUIFeedbackLayout setBorderRadii:]
  -[VUIFeedbackLayout ratingBadgeLayout]
  -[VUIFeedbackLayout descriptionTextLayout]
  -[VUIFeedbackLayout headerTitleLayout]
  -[VUIFeedbackLayout headerSubtitleLayout]
  -[VUIFeedbackLayout sourceTextLayout]
  -[VUIFeedbackLayout setDarkHighlightColor:]
  -[VUIFeedbackLayout reviewTableLayout]
  -[VUIFeedbackLayout _setupLayout:]
  -[VUIFeedbackLayout headerBadgeLayout]
  -[VUIFeedbackLayout sourceBadgeLayout]
  -[VUIFeedbackLayout darkHighlightColor]
  -[VUIFeedbackLayout headerImagePadding]


VideosExtrasPresenter : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerTransitioningDelegate>
 @property  VideosExtrasContext *extrasContext
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} extrasMenuBarFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasPresenter .cxx_destruct]
  -[VideosExtrasPresenter animationControllerForPresentedController:presentingController:sourceController:]
  -[VideosExtrasPresenter animationControllerForDismissedController:]
  -[VideosExtrasPresenter presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[VideosExtrasPresenter extrasContext]
  -[VideosExtrasPresenter extrasMenuBarFrame]
  -[VideosExtrasPresenter initWithExtrasContext:extrasMenuBarFrame:]
  -[VideosExtrasPresenter presentExtrasWith:animated:completion:]
  -[VideosExtrasPresenter dismissExtrasAnimated:completion:]
  -[VideosExtrasPresenter setExtrasContext:]
  -[VideosExtrasPresenter setExtrasMenuBarFrame:]


VUIEpisodeDetailViewController : VUILibraryFetchControllerViewController <UIGestureRecognizerDelegate, VUIEpisodeDetailViewDelegate, VUIMediaEntitiesFetchControllerDelegate>
 @property  VUIMediaItem *mediaItem
 @property  VUIEpisodeDetailView *detailView
 @property  UITapGestureRecognizer *tapGestureRecognizer
 @property  <VUIEpisodeDetailViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIEpisodeDetailViewController delegate]
  -[VUIEpisodeDetailViewController setDelegate:]
  -[VUIEpisodeDetailViewController .cxx_destruct]
  -[VUIEpisodeDetailViewController traitCollectionDidChange:]
  -[VUIEpisodeDetailViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[VUIEpisodeDetailViewController viewWillDisappear:]
  -[VUIEpisodeDetailViewController viewDidLoad]
  -[VUIEpisodeDetailViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIEpisodeDetailViewController viewDidAppear:]
  -[VUIEpisodeDetailViewController dismissPopover]
  -[VUIEpisodeDetailViewController mediaItem]
  -[VUIEpisodeDetailViewController setMediaItem:]
  -[VUIEpisodeDetailViewController tapGestureRecognizer]
  -[VUIEpisodeDetailViewController setTapGestureRecognizer:]
  -[VUIEpisodeDetailViewController initWithMediaItem:]
  -[VUIEpisodeDetailViewController detailView]
  -[VUIEpisodeDetailViewController setDetailView:]
  -[VUIEpisodeDetailViewController initWithMediaLibrary:]
  -[VUIEpisodeDetailViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUIEpisodeDetailViewController controller:fetchRequests:didFailWithError:]
  -[VUIEpisodeDetailViewController _configureNavigationBar]
  -[VUIEpisodeDetailViewController dismissTapped:]
  -[VUIEpisodeDetailViewController reportMetricsPageEvent]
  -[VUIEpisodeDetailViewController didTapPlay]


VUIListCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIColor *backgroundColor
 @property  UIColor *highlightedBackgroundColor
 @property  BOOL shouldAppearSelected

  // instance methods
  -[VUIListCollectionViewCell .cxx_destruct]
  -[VUIListCollectionViewCell prepareForReuse]
  -[VUIListCollectionViewCell backgroundColor]
  -[VUIListCollectionViewCell setBackgroundColor:]
  -[VUIListCollectionViewCell setHighlighted:]
  -[VUIListCollectionViewCell setSelected:]
  -[VUIListCollectionViewCell highlightedBackgroundColor]
  -[VUIListCollectionViewCell setHighlightedBackgroundColor:]
  -[VUIListCollectionViewCell setShouldAppearSelected:]
  -[VUIListCollectionViewCell shouldAppearSelected]


VUIListLockupCollectionViewCellView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  VUIListLockupCollectionViewCellLayout *layout
 @property  _TVImageView *imageView
 @property  _TVMonogramView *monogramView
 @property  TVImageLayout *imageLayout
 @property  VUILabel *titleLabel
 @property  VUILabel *subTitleLabel
 @property  VUIFocusableTextView *descriptionTextView
 @property  VUIButton *primaryButton
 @property  VUIButton *secondaryButton

  // instance methods
  -[VUIListLockupCollectionViewCellView .cxx_destruct]
  -[VUIListLockupCollectionViewCellView layout]
  -[VUIListLockupCollectionViewCellView setLayout:]
  -[VUIListLockupCollectionViewCellView initWithFrame:]
  -[VUIListLockupCollectionViewCellView titleLabel]
  -[VUIListLockupCollectionViewCellView sizeThatFits:]
  -[VUIListLockupCollectionViewCellView layoutSubviews]
  -[VUIListLockupCollectionViewCellView imageView]
  -[VUIListLockupCollectionViewCellView separatorView]
  -[VUIListLockupCollectionViewCellView setTitleLabel:]
  -[VUIListLockupCollectionViewCellView setSemanticContentAttribute:]
  -[VUIListLockupCollectionViewCellView setSeparatorView:]
  -[VUIListLockupCollectionViewCellView setImageView:]
  -[VUIListLockupCollectionViewCellView setPrimaryButton:]
  -[VUIListLockupCollectionViewCellView setSecondaryButton:]
  -[VUIListLockupCollectionViewCellView primaryButton]
  -[VUIListLockupCollectionViewCellView secondaryButton]
  -[VUIListLockupCollectionViewCellView imageLayout]
  -[VUIListLockupCollectionViewCellView descriptionTextView]
  -[VUIListLockupCollectionViewCellView setDescriptionTextView:]
  -[VUIListLockupCollectionViewCellView subTitleLabel]
  -[VUIListLockupCollectionViewCellView setSubTitleLabel:]
  -[VUIListLockupCollectionViewCellView prepareForCellReuse]
  -[VUIListLockupCollectionViewCellView setImageLayout:]
  -[VUIListLockupCollectionViewCellView monogramView]
  -[VUIListLockupCollectionViewCellView setMonogramView:]
  -[VUIListLockupCollectionViewCellView _layoutSubviewsWithSize:computationOnly:]


VUIDownloadEntityTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIRentalExpirationLabelDelegate, VUIDownloadEntityDelegate>
 @property  VUILabel *titleLabel
 @property  _TVImageView *posterImageView
 @property  VUILabel *metaDataHeaderFirstLabel
 @property  VUILabel *metaDataHeaderSecondLabel
 @property  VUILabel *dotSeparatorLabel
 @property  VUIImageView *rightImageView
 @property  VUIDownloadButton *downloadButton
 @property  _TVImageView *episodeImageView
 @property  VUIDownloadEntity *downloadEntity
 @property  <VUIDownloadEntityTableViewCellDelegate> *delegate
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIDownloadEntityTableViewCell configureVUIDownloadEntityTableViewCell:withDownloadEntity:]
  +[VUIDownloadEntityTableViewCell _generateMetaDataHeaderFirstLabelForDownloadEntity:]
  +[VUIDownloadEntityTableViewCell _entityPlaceholderImageForDownloadEntity:]

  // instance methods
  -[VUIDownloadEntityTableViewCell delegate]
  -[VUIDownloadEntityTableViewCell setDelegate:]
  -[VUIDownloadEntityTableViewCell .cxx_destruct]
  -[VUIDownloadEntityTableViewCell prepareForReuse]
  -[VUIDownloadEntityTableViewCell initWithFrame:]
  -[VUIDownloadEntityTableViewCell titleLabel]
  -[VUIDownloadEntityTableViewCell traitCollectionDidChange:]
  -[VUIDownloadEntityTableViewCell sizeThatFits:]
  -[VUIDownloadEntityTableViewCell layoutSubviews]
  -[VUIDownloadEntityTableViewCell setTitleLabel:]
  -[VUIDownloadEntityTableViewCell setSelected:animated:]
  -[VUIDownloadEntityTableViewCell willTransitionToState:]
  -[VUIDownloadEntityTableViewCell topSeparatorView]
  -[VUIDownloadEntityTableViewCell bottomSeparatorView]
  -[VUIDownloadEntityTableViewCell downloadButton]
  -[VUIDownloadEntityTableViewCell setTopSeparatorView:]
  -[VUIDownloadEntityTableViewCell setBottomSeparatorView:]
  -[VUIDownloadEntityTableViewCell rightImageView]
  -[VUIDownloadEntityTableViewCell setRightImageView:]
  -[VUIDownloadEntityTableViewCell rentalExpirationLabelNeedsRelayout:]
  -[VUIDownloadEntityTableViewCell _addDownloadButtonIfRequired:]
  -[VUIDownloadEntityTableViewCell setDownloadButton:]
  -[VUIDownloadEntityTableViewCell dotSeparatorLabel]
  -[VUIDownloadEntityTableViewCell setDotSeparatorLabel:]
  -[VUIDownloadEntityTableViewCell setDownloadEntity:]
  -[VUIDownloadEntityTableViewCell _imageHeightForCurrentSizeClass]
  -[VUIDownloadEntityTableViewCell posterImageView]
  -[VUIDownloadEntityTableViewCell _episodePlaceholderImage]
  -[VUIDownloadEntityTableViewCell setPosterImageView:]
  -[VUIDownloadEntityTableViewCell _expirationLabelWithMediaEntity:]
  -[VUIDownloadEntityTableViewCell setMetaDataHeaderFirstLabel:]
  -[VUIDownloadEntityTableViewCell setMetaDataHeaderSecondLabel:]
  -[VUIDownloadEntityTableViewCell metaDataHeaderFirstLabel]
  -[VUIDownloadEntityTableViewCell metaDataHeaderSecondLabel]
  -[VUIDownloadEntityTableViewCell episodeImageView]
  -[VUIDownloadEntityTableViewCell setEpisodeImageView:]
  -[VUIDownloadEntityTableViewCell _removeDownloadButtonIfRequired]
  -[VUIDownloadEntityTableViewCell downloadEntity]
  -[VUIDownloadEntityTableViewCell _layoutWithSize:metricsOnly:]
  -[VUIDownloadEntityTableViewCell _configureViewElementsForAX]
  -[VUIDownloadEntityTableViewCell _layoutForCategoryAccessibility:metricsOnly:]
  -[VUIDownloadEntityTableViewCell _layoutForCompact:metricsOnly:]
  -[VUIDownloadEntityTableViewCell _verticalPaddingForCurrentSizeClass]
  -[VUIDownloadEntityTableViewCell downloadEntity:numberOfItemsDidChange:]
  -[VUIDownloadEntityTableViewCell downloadEntity:numberOfItemsDownloadingDidChange:]


VUIPlistMediaEntityImageLoadOperation : VUIImageLoadParamsOperation
  // instance methods
  -[VUIPlistMediaEntityImageLoadOperation executionDidBegin]
  -[VUIPlistMediaEntityImageLoadOperation initWithParams:]
  -[VUIPlistMediaEntityImageLoadOperation initWithParams:scaleToSize:cropToFit:]
  -[VUIPlistMediaEntityImageLoadOperation _plistMediaEntityImageLoadParams]


VUIPopoverTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL imageLoaded
 @property  UIView *cardView
 @property  UIView *dimmingView
 @property  _TVImageView *tvImageView
 @property  _TVLabel *tvLabel
 @property  IKViewElement *cardElement
 @property  IKTextElement *textElement
 @property  IKImageElement *imageElement
 @property  double preferredHeight

  // instance methods
  -[VUIPopoverTableViewCell .cxx_destruct]
  -[VUIPopoverTableViewCell prepareForReuse]
  -[VUIPopoverTableViewCell setTextElement:]
  -[VUIPopoverTableViewCell textElement]
  -[VUIPopoverTableViewCell sizeThatFits:]
  -[VUIPopoverTableViewCell layoutSubviews]
  -[VUIPopoverTableViewCell preferredHeight]
  -[VUIPopoverTableViewCell setPreferredHeight:]
  -[VUIPopoverTableViewCell initWithStyle:reuseIdentifier:]
  -[VUIPopoverTableViewCell setDimmingView:]
  -[VUIPopoverTableViewCell dimmingView]
  -[VUIPopoverTableViewCell isImageLoaded]
  -[VUIPopoverTableViewCell cardView]
  -[VUIPopoverTableViewCell setCardView:]
  -[VUIPopoverTableViewCell imageElement]
  -[VUIPopoverTableViewCell setImageLoaded:]
  -[VUIPopoverTableViewCell setImageElement:]
  -[VUIPopoverTableViewCell cardElement]
  -[VUIPopoverTableViewCell tvLabel]
  -[VUIPopoverTableViewCell tvImageView]
  -[VUIPopoverTableViewCell setCardElement:]
  -[VUIPopoverTableViewCell setTvLabel:]
  -[VUIPopoverTableViewCell setTvImageView:]


VUIJSMediaEntity : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSMediaEntityExport>
 @property  VUIJSMediaEntityType *type
 @property  NSString *identifier
 @property  MPMediaEntity *mediaEntity

  // class methods
  +[VUIJSMediaEntity _mediaEntityTypeForMPMediaEntity:mediaCategory:mediaCollectionType:]
  +[VUIJSMediaEntity _numberForString:]
  +[VUIJSMediaEntity _stringForNumber:]
  +[VUIJSMediaEntity parseIdentifier:withBlock:]

  // instance methods
  -[VUIJSMediaEntity type]
  -[VUIJSMediaEntity setType:]
  -[VUIJSMediaEntity .cxx_destruct]
  -[VUIJSMediaEntity identifier]
  -[VUIJSMediaEntity setIdentifier:]
  -[VUIJSMediaEntity valuesForProperties:]
  -[VUIJSMediaEntity initWithAppContext:]
  -[VUIJSMediaEntity mediaEntity]
  -[VUIJSMediaEntity setMediaEntity:]
  -[VUIJSMediaEntity initWithMediaEntity:appContext:mediaCategory:mediaCollectionType:]


VUILoadingView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *loadingLabel
 @property  UIActivityIndicatorView *indicatorView

  // instance methods
  -[VUILoadingView .cxx_destruct]
  -[VUILoadingView layoutSubviews]
  -[VUILoadingView startTimer]
  -[VUILoadingView loadingLabel]
  -[VUILoadingView setLoadingLabel:]
  -[VUILoadingView indicatorView]
  -[VUILoadingView setIndicatorView:]
  -[VUILoadingView initWithFrame:loadingString:]


VUISettingsManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *restrictions
 @property  NSString *preferredVideoFormat
 @property  NSNumber *maxMovieRank
 @property  NSNumber *maxTVShowRank

  // class methods
  +[VUISettingsManager sharedInstance]

  // instance methods
  -[VUISettingsManager init]
  -[VUISettingsManager .cxx_destruct]
  -[VUISettingsManager _init]
  -[VUISettingsManager restrictions]
  -[VUISettingsManager maxMovieRank]
  -[VUISettingsManager maxTVShowRank]
  -[VUISettingsManager preferredVideoFormat]
  -[VUISettingsManager _formatStringForVideoFormat:]
  -[VUISettingsManager _restrictionsMaximumEffectiveMovieRanking]
  -[VUISettingsManager _restrictionsMaximumEffectiveTVShowRanking]
  -[VUISettingsManager _preferredVideoFormat]
  -[VUISettingsManager _hasRestrictionsChanged]
  -[VUISettingsManager _hasPreferredVideoFormatChanged]
  -[VUISettingsManager _sendSettingsValuesToJS]
  -[VUISettingsManager preferencesJSONData]
  -[VUISettingsManager checkAndUpdateSettings]
  -[VUISettingsManager setMaxMovieRank:]
  -[VUISettingsManager setMaxTVShowRank:]
  -[VUISettingsManager setPreferredVideoFormat:]


VUIListLockupCollectionViewCellLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  long long imagePosition
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *subtitleTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  TVImageLayout *imageLayout
 @property  TVImageLayout *appIconLayout
 @property  TVImageLayout *monogramImageLayout

  // class methods
  +[VUIListLockupCollectionViewCellLayout _defaultImageSize]
  +[VUIListLockupCollectionViewCellLayout layoutWithLayout:element:]
  +[VUIListLockupCollectionViewCellLayout _defaultAppIconSize]

  // instance methods
  -[VUIListLockupCollectionViewCellLayout init]
  -[VUIListLockupCollectionViewCellLayout .cxx_destruct]
  -[VUIListLockupCollectionViewCellLayout imagePosition]
  -[VUIListLockupCollectionViewCellLayout setImagePosition:]
  -[VUIListLockupCollectionViewCellLayout imageLayout]
  -[VUIListLockupCollectionViewCellLayout titleTextLayout]
  -[VUIListLockupCollectionViewCellLayout descriptionTextLayout]
  -[VUIListLockupCollectionViewCellLayout setImageLayout:]
  -[VUIListLockupCollectionViewCellLayout appIconLayout]
  -[VUIListLockupCollectionViewCellLayout setAppIconLayout:]
  -[VUIListLockupCollectionViewCellLayout subtitleTextLayout]
  -[VUIListLockupCollectionViewCellLayout monogramImageLayout]
  -[VUIListLockupCollectionViewCellLayout setTitleTextLayout:]
  -[VUIListLockupCollectionViewCellLayout setSubtitleTextLayout:]
  -[VUIListLockupCollectionViewCellLayout setDescriptionTextLayout:]
  -[VUIListLockupCollectionViewCellLayout setMonogramImageLayout:]


VUIOfferView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  VUIOfferLayout *layout
 @property  _TVImageView *imageView
 @property  _TVImageView *logoView
 @property  _TVImageView *appIconView
 @property  VUILabel *channelNameLabel
 @property  VUILabel *titleLabel
 @property  VUILabel *subtitleLabel
 @property  VUILabel *textLabel
 @property  UIView *badgeView
 @property  VUIMediaTagsView *tagsView
 @property  VUIButton *versionsButton
 @property  UIView *channelImageBackgroundView
 @property  BOOL isEntitled

  // instance methods
  -[VUIOfferView .cxx_destruct]
  -[VUIOfferView layout]
  -[VUIOfferView setLayout:]
  -[VUIOfferView titleLabel]
  -[VUIOfferView sizeThatFits:]
  -[VUIOfferView layoutSubviews]
  -[VUIOfferView imageView]
  -[VUIOfferView separatorView]
  -[VUIOfferView setTitleLabel:]
  -[VUIOfferView setSemanticContentAttribute:]
  -[VUIOfferView textLabel]
  -[VUIOfferView setSeparatorView:]
  -[VUIOfferView badgeView]
  -[VUIOfferView setImageView:]
  -[VUIOfferView setSubtitleLabel:]
  -[VUIOfferView subtitleLabel]
  -[VUIOfferView setTextLabel:]
  -[VUIOfferView setBadgeView:]
  -[VUIOfferView isEntitled]
  -[VUIOfferView appIconView]
  -[VUIOfferView tagsView]
  -[VUIOfferView logoView]
  -[VUIOfferView setSelected:animated:withAnimationCoordinator:]
  -[VUIOfferView setLogoView:]
  -[VUIOfferView prepareForCellReuse]
  -[VUIOfferView setIsEntitled:]
  -[VUIOfferView versionsButton]
  -[VUIOfferView channelImageBackgroundView]
  -[VUIOfferView setChannelNameLabel:]
  -[VUIOfferView setAppIconView:]
  -[VUIOfferView setTagsView:]
  -[VUIOfferView setVersionsButton:]
  -[VUIOfferView setChannelImageBackgroundView:]
  -[VUIOfferView _shouldDisplaySeparator]
  -[VUIOfferView _chinHeightForSize:]
  -[VUIOfferView channelNameLabel]


VUILibraryStackView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UICollectionView *collectionView

  // instance methods
  -[VUILibraryStackView .cxx_destruct]
  -[VUILibraryStackView initWithFrame:]
  -[VUILibraryStackView layoutSubviews]
  -[VUILibraryStackView collectionView]
  -[VUILibraryStackView setCollectionView:]


VUIConfirmationDocumentWrapperViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIConfirmationDocumentWrapperViewController loadView]
  -[VUIConfirmationDocumentWrapperViewController gestureRecognizer:shouldReceiveTouch:]
  -[VUIConfirmationDocumentWrapperViewController viewDidLayoutSubviews]
  -[VUIConfirmationDocumentWrapperViewController tapped]


VideosExtrasFeatureContainerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  double collectionViewHeight
 @property  VideosExtrasContext *context
 @property  UIViewController<VideosExtrasVideoPlaybackViewController> *videoPlaybackViewController
 @property  UIView *menuBarView

  // instance methods
  -[VideosExtrasFeatureContainerViewController dealloc]
  -[VideosExtrasFeatureContainerViewController .cxx_destruct]
  -[VideosExtrasFeatureContainerViewController context]
  -[VideosExtrasFeatureContainerViewController initWithContext:]
  -[VideosExtrasFeatureContainerViewController viewDidLoad]
  -[VideosExtrasFeatureContainerViewController childViewControllerForHomeIndicatorAutoHidden]
  -[VideosExtrasFeatureContainerViewController setCollectionViewHeight:]
  -[VideosExtrasFeatureContainerViewController collectionViewHeight]
  -[VideosExtrasFeatureContainerViewController _menuBarHeightChange:]
  -[VideosExtrasFeatureContainerViewController setVideoPlaybackViewController:]
  -[VideosExtrasFeatureContainerViewController setMenuBarView:]
  -[VideosExtrasFeatureContainerViewController videoPlaybackViewController]
  -[VideosExtrasFeatureContainerViewController menuBarView]


VUIUpNextOverlayLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *appImageLayout
 @property  TVImageLayout *logoImageLayout
 @property  VUIProgressBarLayout *progressBarLayout
 @property  TVImageLayout *badgeLayout
 @property  VUITextLayout *titleLayout
 @property  VUITextLayout *subtitleLayout
 @property  VUITextBadgeLayout *textBadgeLayout

  // class methods
  +[VUIUpNextOverlayLayout layoutWithLayout:element:]
  +[VUIUpNextOverlayLayout logoImageLayout]
  +[VUIUpNextOverlayLayout appImageLayout]
  +[VUIUpNextOverlayLayout _setAppImageDefaultSize:]
  +[VUIUpNextOverlayLayout _setLogoImageDefaultSize:]

  // instance methods
  -[VUIUpNextOverlayLayout init]
  -[VUIUpNextOverlayLayout .cxx_destruct]
  -[VUIUpNextOverlayLayout titleLayout]
  -[VUIUpNextOverlayLayout setTitleLayout:]
  -[VUIUpNextOverlayLayout logoImageLayout]
  -[VUIUpNextOverlayLayout appImageLayout]
  -[VUIUpNextOverlayLayout textBadgeLayout]
  -[VUIUpNextOverlayLayout badgeLayout]
  -[VUIUpNextOverlayLayout progressBarLayout]
  -[VUIUpNextOverlayLayout setTextBadgeLayout:]
  -[VUIUpNextOverlayLayout setAppImageLayout:]
  -[VUIUpNextOverlayLayout setLogoImageLayout:]
  -[VUIUpNextOverlayLayout setProgressBarLayout:]
  -[VUIUpNextOverlayLayout setBadgeLayout:]
  -[VUIUpNextOverlayLayout subtitleLayout]
  -[VUIUpNextOverlayLayout setSubtitleLayout:]


VideosExtrasZoomableImageView : UIScrollView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIScrollViewDelegate, VideosExtrasZoomingImageTransitionParticipant>
 @property  {CGSize=dd} imageSize
 @property  {CGPoint=dd} pointToCenterAfterResize
 @property  double scaleToRestoreAfterResize
 @property  UIImageView *zoomView
 @property  UIImage *image
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasZoomableImageView dealloc]
  -[VideosExtrasZoomableImageView .cxx_destruct]
  -[VideosExtrasZoomableImageView image]
  -[VideosExtrasZoomableImageView setImage:]
  -[VideosExtrasZoomableImageView setFrame:]
  -[VideosExtrasZoomableImageView initWithFrame:]
  -[VideosExtrasZoomableImageView layoutSubviews]
  -[VideosExtrasZoomableImageView viewForZoomingInScrollView:]
  -[VideosExtrasZoomableImageView imageSize]
  -[VideosExtrasZoomableImageView _minimumContentOffset]
  -[VideosExtrasZoomableImageView _maximumContentOffset]
  -[VideosExtrasZoomableImageView setImageSize:]
  -[VideosExtrasZoomableImageView _prepareToResize]
  -[VideosExtrasZoomableImageView zoomView]
  -[VideosExtrasZoomableImageView prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasZoomableImageView performZoomingImageTransitionWithContext:]
  -[VideosExtrasZoomableImageView finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasZoomableImageView zoomToPoint:animated:]
  -[VideosExtrasZoomableImageView _recoverFromResizing]
  -[VideosExtrasZoomableImageView setZoomView:]
  -[VideosExtrasZoomableImageView _updateMinimumAndMaximumZoomScalesForCurrentBounds]
  -[VideosExtrasZoomableImageView setPointToCenterAfterResize:]
  -[VideosExtrasZoomableImageView setScaleToRestoreAfterResize:]
  -[VideosExtrasZoomableImageView scaleToRestoreAfterResize]
  -[VideosExtrasZoomableImageView pointToCenterAfterResize]


VUIStillWatchingAlertPresenter : NSObject /usr/lib/libSystem.B.dylib
 @property  double timeoutInterval

  // class methods
  +[VUIStillWatchingAlertPresenter presentWithTitle:presentingController:timeout:responseHandler:]

  // instance methods
  -[VUIStillWatchingAlertPresenter setTimeoutInterval:]
  -[VUIStillWatchingAlertPresenter timeoutInterval]


VUILibraryStackViewController : VUILibraryFetchControllerViewController <UICollectionViewDelegate>
 @property  VUILibraryStackView *stackView
 @property  UICollectionView *stackCollectionView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryStackViewController .cxx_destruct]
  -[VUILibraryStackViewController traitCollectionDidChange:]
  -[VUILibraryStackViewController viewWillAppear:]
  -[VUILibraryStackViewController stackView]
  -[VUILibraryStackViewController viewDidLoad]
  -[VUILibraryStackViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibraryStackViewController viewDidLayoutSubviews]
  -[VUILibraryStackViewController viewDidDisappear:]
  -[VUILibraryStackViewController preferredStatusBarStyle]
  -[VUILibraryStackViewController collectionView:willDisplayCell:forItemAtIndexPath:]
  -[VUILibraryStackViewController collectionView:didEndDisplayingCell:forItemAtIndexPath:]
  -[VUILibraryStackViewController indexPathForPreferredFocusedViewInCollectionView:]
  -[VUILibraryStackViewController collectionView:layout:minimumLineSpacingForSectionAtIndex:]
  -[VUILibraryStackViewController scrollToTop]
  -[VUILibraryStackViewController _updateNavigationBarPadding]
  -[VUILibraryStackViewController stackCollectionView]
  -[VUILibraryStackViewController _invalidateLayouts]


VUITextLayout : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  long long textStyle
 @property  NSString *maximumContentSizeCategory
 @property  NSString *fontFamily
 @property  long long fontWeight
 @property  double fontSize
 @property  unsigned int fontTraits
 @property  long long fontFeature
 @property  {UIEdgeInsets=dddd} margin
 @property  UIColor *color
 @property  UIColor *darkColor
 @property  UIColor *highlightOrSelectedColor
 @property  UIColor *darkHighlightOrSelectedColor
 @property  UIColor *seeMoreTextColor
 @property  UIColor *darkSeeMoreTextColor
 @property  NSString *compositingFilter
 @property  NSString *darkCompositingFilter
 @property  long long textTransform
 @property  long long alignment
 @property  unsigned long numberOfLines
 @property  unsigned long numberOfLinesAXSmall
 @property  unsigned long numberOfLinesAXLarge
 @property  double minimumScaleFactor
 @property  NSShadow *shadow
 @property  NSNumber *letterSpacing
 @property  long long lineBreakMode
 @property  int blendMode
 @property  BOOL alwaysFocusable

  // instance methods
  -[VUITextLayout init]
  -[VUITextLayout copyWithZone:]
  -[VUITextLayout .cxx_destruct]
  -[VUITextLayout alignment]
  -[VUITextLayout lineBreakMode]
  -[VUITextLayout setAlignment:]
  -[VUITextLayout setLineBreakMode:]
  -[VUITextLayout color]
  -[VUITextLayout setColor:]
  -[VUITextLayout shadow]
  -[VUITextLayout fontSize]
  -[VUITextLayout setFontSize:]
  -[VUITextLayout minimumScaleFactor]
  -[VUITextLayout setMinimumScaleFactor:]
  -[VUITextLayout setTextStyle:]
  -[VUITextLayout textStyle]
  -[VUITextLayout setNumberOfLines:]
  -[VUITextLayout numberOfLines]
  -[VUITextLayout setCompositingFilter:]
  -[VUITextLayout setMargin:]
  -[VUITextLayout margin]
  -[VUITextLayout compositingFilter]
  -[VUITextLayout setShadow:]
  -[VUITextLayout setFontWeight:]
  -[VUITextLayout fontWeight]
  -[VUITextLayout blendMode]
  -[VUITextLayout setBlendMode:]
  -[VUITextLayout darkColor]
  -[VUITextLayout setDarkColor:]
  -[VUITextLayout fontFamily]
  -[VUITextLayout setFontFamily:]
  -[VUITextLayout letterSpacing]
  -[VUITextLayout setLetterSpacing:]
  -[VUITextLayout textTransform]
  -[VUITextLayout setTextTransform:]
  -[VUITextLayout _defaultParagraphStyle]
  -[VUITextLayout setAlwaysFocusable:]
  -[VUITextLayout setNumberOfLinesAXSmall:]
  -[VUITextLayout setNumberOfLinesAXLarge:]
  -[VUITextLayout setMaximumContentSizeCategory:]
  -[VUITextLayout setColorWithOpacityType:]
  -[VUITextLayout setSeeMoreTextColor:]
  -[VUITextLayout setDarkSeeMoreTextColor:]
  -[VUITextLayout setHighlightOrSelectedColor:]
  -[VUITextLayout setFontTraits:]
  -[VUITextLayout setFontFeature:]
  -[VUITextLayout setDarkHighlightOrSelectedColor:]
  -[VUITextLayout setDarkCompositingFilter:]
  -[VUITextLayout attributedStringWithString:view:]
  -[VUITextLayout attributedStringWithAttributedString:view:]
  -[VUITextLayout numberOfLinesAXSmall]
  -[VUITextLayout numberOfLinesAXLarge]
  -[VUITextLayout defaultAttributesForLabel:]
  -[VUITextLayout attributedStringWithString:]
  -[VUITextLayout numberOfLinesForTraitCollection:]
  -[VUITextLayout maximumContentSizeCategory]
  -[VUITextLayout fontTraits]
  -[VUITextLayout fontFeature]
  -[VUITextLayout highlightOrSelectedColor]
  -[VUITextLayout darkHighlightOrSelectedColor]
  -[VUITextLayout seeMoreTextColor]
  -[VUITextLayout darkSeeMoreTextColor]
  -[VUITextLayout darkCompositingFilter]
  -[VUITextLayout alwaysFocusable]


VUIDownloadEntity : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityAssetControllerDelegate, NSCopying>
 @property  <VUIDownloadEntityDelegate> *delegate
 @property  long long downloadType
 @property  NSObject<VUIMediaEntityIdentifier> *showIdentifier
 @property  NSArray *mediaEntities
 @property  NSString *title
 @property  NSNumber *releaseYear
 @property  NSNumber *duration
 @property  NSNumber *episodeNumber
 @property  NSNumber *numberOfMediaItems
 @property  NSNumber *numberOfMediaItemsDownloading
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDownloadEntity copyWithZone:]
  -[VUIDownloadEntity delegate]
  -[VUIDownloadEntity setDelegate:]
  -[VUIDownloadEntity .cxx_destruct]
  -[VUIDownloadEntity title]
  -[VUIDownloadEntity setTitle:]
  -[VUIDownloadEntity duration]
  -[VUIDownloadEntity setDuration:]
  -[VUIDownloadEntity episodeNumber]
  -[VUIDownloadEntity setEpisodeNumber:]
  -[VUIDownloadEntity setReleaseYear:]
  -[VUIDownloadEntity releaseYear]
  -[VUIDownloadEntity downloadType]
  -[VUIDownloadEntity setDownloadType:]
  -[VUIDownloadEntity numberOfMediaItems]
  -[VUIDownloadEntity mediaEntities]
  -[VUIDownloadEntity initWithMediaEntity:withDownloadType:]
  -[VUIDownloadEntity showIdentifier]
  -[VUIDownloadEntity setMediaEntities:]
  -[VUIDownloadEntity numberOfMediaItemsDownloading]
  -[VUIDownloadEntity initWithMediaEntities:withDownloadType:]
  -[VUIDownloadEntity _configureWithMediaEntities:]
  -[VUIDownloadEntity setNumberOfMediaItems:]
  -[VUIDownloadEntity mediaEntityAssetController:stateDidChange:]
  -[VUIDownloadEntity setShowIdentifier:]
  -[VUIDownloadEntity setNumberOfMediaItemsDownloading:]


VUIDebugDefaults : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL debugUIEnabled
 @property  BOOL metricsLoggingEnabled
 @property  BOOL metricsExpandedLoggingEnabled
 @property  BOOL enableDemoMode

  // class methods
  +[VUIDebugDefaults sharedInstance]

  // instance methods
  -[VUIDebugDefaults init]
  -[VUIDebugDefaults setDebugUIEnabled:]
  -[VUIDebugDefaults debugUIEnabled]
  -[VUIDebugDefaults metricsLoggingEnabled]
  -[VUIDebugDefaults setMetricsLoggingEnabled:]
  -[VUIDebugDefaults metricsExpandedLoggingEnabled]
  -[VUIDebugDefaults setMetricsExpandedLoggingEnabled:]
  -[VUIDebugDefaults enableDemoMode]
  -[VUIDebugDefaults setEnableDemoMode:]


VUIAuthenticationManager : NSObject /usr/lib/libSystem.B.dylib
 @property  SSAuthenticateRequest *_authRequest
 @property  BOOL _isObservingAccountStoreChange

  // class methods
  +[VUIAuthenticationManager sharedInstance]
  +[VUIAuthenticationManager userFullName]
  +[VUIAuthenticationManager allowsAccountModification]
  +[VUIAuthenticationManager userHasActiveAccount]
  +[VUIAuthenticationManager requestAuthenticationAlwaysPrompt:withCompletionHandler:]
  +[VUIAuthenticationManager _userAccount]
  +[VUIAuthenticationManager _performAuthenticationWithContext:completionHandler:]
  +[VUIAuthenticationManager userAccountName]
  +[VUIAuthenticationManager userFirstName]
  +[VUIAuthenticationManager userLastName]
  +[VUIAuthenticationManager signInUserWithAppleID:password:completionHandler:]
  +[VUIAuthenticationManager signOutUserWithCompletionHandler:]

  // instance methods
  -[VUIAuthenticationManager .cxx_destruct]
  -[VUIAuthenticationManager _accountStoreDidChange:]
  -[VUIAuthenticationManager _isObservingAccountStoreChange]
  -[VUIAuthenticationManager set_isObservingAccountStoreChange:]
  -[VUIAuthenticationManager _authRequest]
  -[VUIAuthenticationManager set_authRequest:]


VUIOpenURLRouterDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *documentDataSources
 @property  VUIAction *action
 @property  NSString *tabIdentifier
 @property  NSDictionary *localLibraryLink
 @property  NSString *nativePageName
 @property  BOOL actionFirst

  // class methods
  +[VUIOpenURLRouterDataSource routerDataSourceWithDict:appContext:]

  // instance methods
  -[VUIOpenURLRouterDataSource .cxx_destruct]
  -[VUIOpenURLRouterDataSource action]
  -[VUIOpenURLRouterDataSource setAction:]
  -[VUIOpenURLRouterDataSource setTabIdentifier:]
  -[VUIOpenURLRouterDataSource tabIdentifier]
  -[VUIOpenURLRouterDataSource documentDataSources]
  -[VUIOpenURLRouterDataSource nativePageName]
  -[VUIOpenURLRouterDataSource localLibraryLink]
  -[VUIOpenURLRouterDataSource actionFirst]
  -[VUIOpenURLRouterDataSource setDocumentDataSources:]
  -[VUIOpenURLRouterDataSource setNativePageName:]
  -[VUIOpenURLRouterDataSource setLocalLibraryLink:]
  -[VUIOpenURLRouterDataSource setActionFirst:]


VUILibraryMediaEntityShelvesViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  @? configureShelfViewControllerBlock
 @property  @? shelfTypeComparator
 @property  NSArray *shelfTypes
 @property  NSDictionary *shelfViewControllerByShelfType
 @property  NSDictionary *mediaEntitiesByShelfType
 @property  BOOL hasContent

  // class methods
  +[VUILibraryMediaEntityShelvesViewModel _shelfTypesWithMediaEntitiesMap:shelfTypeComparator:]

  // instance methods
  -[VUILibraryMediaEntityShelvesViewModel init]
  -[VUILibraryMediaEntityShelvesViewModel .cxx_destruct]
  -[VUILibraryMediaEntityShelvesViewModel hasContent]
  -[VUILibraryMediaEntityShelvesViewModel _updateWithMediaEntitiesMap:shelfTypes:]
  -[VUILibraryMediaEntityShelvesViewModel shelfTypes]
  -[VUILibraryMediaEntityShelvesViewModel shelfTypeComparator]
  -[VUILibraryMediaEntityShelvesViewModel shelfViewControllerByShelfType]
  -[VUILibraryMediaEntityShelvesViewModel _shelfCollectionViewControllerWithType:mediaEntities:]
  -[VUILibraryMediaEntityShelvesViewModel setShelfTypes:]
  -[VUILibraryMediaEntityShelvesViewModel setShelfViewControllerByShelfType:]
  -[VUILibraryMediaEntityShelvesViewModel configureShelfViewControllerBlock]
  -[VUILibraryMediaEntityShelvesViewModel initWithMediaEntitiesMap:shelfTypeComparator:configureShelfViewControllerBlock:]
  -[VUILibraryMediaEntityShelvesViewModel updateContainerCollectionView:section:mediaEntitiesMap:mediaEntitiesChangeSetMap:]
  -[VUILibraryMediaEntityShelvesViewModel shelfViewControllerForShelfTypeIndex:]
  -[VUILibraryMediaEntityShelvesViewModel mediaEntitiesByShelfType]
  -[VUILibraryMediaEntityShelvesViewModel setConfigureShelfViewControllerBlock:]
  -[VUILibraryMediaEntityShelvesViewModel setShelfTypeComparator:]


VUISearchAppDocumentServiceViewController : VUIAppDocumentServiceViewController

VUIDownloadedButton : UIButton /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUITextLayout *textLayout

  // class methods
  +[VUIDownloadedButton downloadedButton]

  // instance methods
  -[VUIDownloadedButton .cxx_destruct]
  -[VUIDownloadedButton traitCollectionDidChange:]
  -[VUIDownloadedButton sizeThatFits:]
  -[VUIDownloadedButton setTextLayout:]
  -[VUIDownloadedButton textLayout]


VUILibraryListPopoverView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  UIView *titleContainerView
 @property  NSString *title
 @property  UICollectionView *collectionView

  // instance methods
  -[VUILibraryListPopoverView .cxx_destruct]
  -[VUILibraryListPopoverView title]
  -[VUILibraryListPopoverView sizeThatFits:]
  -[VUILibraryListPopoverView layoutSubviews]
  -[VUILibraryListPopoverView separatorView]
  -[VUILibraryListPopoverView collectionView]
  -[VUILibraryListPopoverView setSeparatorView:]
  -[VUILibraryListPopoverView initWithFrame:title:]
  -[VUILibraryListPopoverView titleContainerView]
  -[VUILibraryListPopoverView setTitleContainerView:]


VUIStoreDownloadMonitor : NSObject /usr/lib/libSystem.B.dylib <SSDownloadManagerObserver>
 @property  SSDownloadManager *downloadManager
 @property  SSDownload *download
 @property  TVPStateMachine *stateMachine
 @property  NSMutableArray *completionHandlers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIStoreDownloadMonitor initialize]

  // instance methods
  -[VUIStoreDownloadMonitor dealloc]
  -[VUIStoreDownloadMonitor .cxx_destruct]
  -[VUIStoreDownloadMonitor download]
  -[VUIStoreDownloadMonitor downloadManager:downloadStatesDidChange:]
  -[VUIStoreDownloadMonitor downloadManagerDownloadsDidChange:]
  -[VUIStoreDownloadMonitor completionHandlers]
  -[VUIStoreDownloadMonitor stateMachine]
  -[VUIStoreDownloadMonitor setStateMachine:]
  -[VUIStoreDownloadMonitor setCompletionHandlers:]
  -[VUIStoreDownloadMonitor setDownload:]
  -[VUIStoreDownloadMonitor downloadManager]
  -[VUIStoreDownloadMonitor setDownloadManager:]
  -[VUIStoreDownloadMonitor _registerStateMachineHandlers]
  -[VUIStoreDownloadMonitor initWithDownload:downloadManager:]
  -[VUIStoreDownloadMonitor waitForDownloadToBecomePlayableWithCompletion:]


VUIDebugMetricsTermCollector : NSObject /usr/lib/libSystem.B.dylib <VUIDebugMetricsTermCollector>
 @property  NSMutableSet *mutableCommonTerms
 @property  NSMutableSet *mutableTimingTerms
 @property  NSSet *whitelistedTerms
 @property  NSSet *blacklistedTerms
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *timingTerms
 @property  NSSet *baseTerms
 @property  NSSet *commonTerms

  // instance methods
  -[VUIDebugMetricsTermCollector init]
  -[VUIDebugMetricsTermCollector .cxx_destruct]
  -[VUIDebugMetricsTermCollector collectTermsFrom:]
  -[VUIDebugMetricsTermCollector populateCommonTermsFrom:]
  -[VUIDebugMetricsTermCollector mutableCommonTerms]
  -[VUIDebugMetricsTermCollector blacklistedTerms]
  -[VUIDebugMetricsTermCollector baseTerms]
  -[VUIDebugMetricsTermCollector whitelistedTerms]
  -[VUIDebugMetricsTermCollector timingTerms]
  -[VUIDebugMetricsTermCollector commonTerms]
  -[VUIDebugMetricsTermCollector setMutableCommonTerms:]
  -[VUIDebugMetricsTermCollector mutableTimingTerms]
  -[VUIDebugMetricsTermCollector setMutableTimingTerms:]


VUIDebugCollectionHeaderView : UICollectionReusableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUITextLayout *titleLayout
 @property  VUILabel *titleLabel
 @property  VUISeparatorView *separatorView

  // instance methods
  -[VUIDebugCollectionHeaderView .cxx_destruct]
  -[VUIDebugCollectionHeaderView initWithFrame:]
  -[VUIDebugCollectionHeaderView titleLabel]
  -[VUIDebugCollectionHeaderView layoutSubviews]
  -[VUIDebugCollectionHeaderView separatorView]
  -[VUIDebugCollectionHeaderView setTitleLabel:]
  -[VUIDebugCollectionHeaderView setSeparatorView:]
  -[VUIDebugCollectionHeaderView titleLayout]
  -[VUIDebugCollectionHeaderView setTitleLayout:]
  -[VUIDebugCollectionHeaderView configureHeaderViewWithTitle:]


VUIDebugCollectionViewDefaultsCell : VUIListCollectionViewCell <UITextFieldDelegate>
 @property  VUITextLayout *titleLayout
 @property  VUILabel *titleLabel
 @property  VUITextLayout *subtitleLayout
 @property  VUILabel *subtitleLabel
 @property  UISwitch *defaultsSwitch
 @property  UITextField *textField
 @property  VUIDebugViewDefaults *defaults
 @property  VUISeparatorView *separatorView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDebugCollectionViewDefaultsCell .cxx_destruct]
  -[VUIDebugCollectionViewDefaultsCell defaults]
  -[VUIDebugCollectionViewDefaultsCell setDefaults:]
  -[VUIDebugCollectionViewDefaultsCell initWithFrame:]
  -[VUIDebugCollectionViewDefaultsCell titleLabel]
  -[VUIDebugCollectionViewDefaultsCell layoutSubviews]
  -[VUIDebugCollectionViewDefaultsCell textField]
  -[VUIDebugCollectionViewDefaultsCell separatorView]
  -[VUIDebugCollectionViewDefaultsCell setTitleLabel:]
  -[VUIDebugCollectionViewDefaultsCell setSeparatorView:]
  -[VUIDebugCollectionViewDefaultsCell setSubtitleLabel:]
  -[VUIDebugCollectionViewDefaultsCell subtitleLabel]
  -[VUIDebugCollectionViewDefaultsCell textFieldShouldReturn:]
  -[VUIDebugCollectionViewDefaultsCell textFieldDidEndEditing:]
  -[VUIDebugCollectionViewDefaultsCell setTextField:]
  -[VUIDebugCollectionViewDefaultsCell titleLayout]
  -[VUIDebugCollectionViewDefaultsCell setTitleLayout:]
  -[VUIDebugCollectionViewDefaultsCell subtitleLayout]
  -[VUIDebugCollectionViewDefaultsCell setSubtitleLayout:]
  -[VUIDebugCollectionViewDefaultsCell _defaultsSwitchPressed:]
  -[VUIDebugCollectionViewDefaultsCell configureCellWithDefaults:]
  -[VUIDebugCollectionViewDefaultsCell defaultsSwitch]
  -[VUIDebugCollectionViewDefaultsCell setDefaultsSwitch:]


VUIDebugCollectionViewNavigationCell : VUIListCollectionViewCell
 @property  VUITextLayout *titleLayout
 @property  VUILabel *titleLabel
 @property  UIImageView *accessoryView
 @property  VUISeparatorView *separatorView

  // instance methods
  -[VUIDebugCollectionViewNavigationCell .cxx_destruct]
  -[VUIDebugCollectionViewNavigationCell initWithFrame:]
  -[VUIDebugCollectionViewNavigationCell titleLabel]
  -[VUIDebugCollectionViewNavigationCell layoutSubviews]
  -[VUIDebugCollectionViewNavigationCell separatorView]
  -[VUIDebugCollectionViewNavigationCell setTitleLabel:]
  -[VUIDebugCollectionViewNavigationCell setAccessoryView:]
  -[VUIDebugCollectionViewNavigationCell accessoryView]
  -[VUIDebugCollectionViewNavigationCell setSeparatorView:]
  -[VUIDebugCollectionViewNavigationCell configureWithTitle:]
  -[VUIDebugCollectionViewNavigationCell titleLayout]
  -[VUIDebugCollectionViewNavigationCell setTitleLayout:]


VUIJSAccountChannels : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSAccountChannelsInterface>
 @property  VSAccountStore *accountStore

  // instance methods
  -[VUIJSAccountChannels dealloc]
  -[VUIJSAccountChannels .cxx_destruct]
  -[VUIJSAccountChannels setAccountStore:]
  -[VUIJSAccountChannels accountStore]
  -[VUIJSAccountChannels initWithAppContext:]
  -[VUIJSAccountChannels fetchMSOProviderStatus:]
  -[VUIJSAccountChannels _sendVideoSubscriberChangedNotificationToTheJavaScript]


VUISidebandSeasonMediaCollection : VUIMediaCollection
 @property  VUITVSeasonManagedObject *seasonManagedObject

  // instance methods
  -[VUISidebandSeasonMediaCollection .cxx_destruct]
  -[VUISidebandSeasonMediaCollection title]
  -[VUISidebandSeasonMediaCollection isLocal]
  -[VUISidebandSeasonMediaCollection seasonNumber]
  -[VUISidebandSeasonMediaCollection canonicalID]
  -[VUISidebandSeasonMediaCollection HLSColorCapability]
  -[VUISidebandSeasonMediaCollection colorCapability]
  -[VUISidebandSeasonMediaCollection showIdentifier]
  -[VUISidebandSeasonMediaCollection initWithMediaLibrary:seasonManagedObject:requestedProperties:]
  -[VUISidebandSeasonMediaCollection seasonManagedObject]
  -[VUISidebandSeasonMediaCollection setSeasonManagedObject:]


VUIImageLoadContext : NSObject /usr/lib/libSystem.B.dylib
 @property  NSOperation<VUIImageLoadingOperation> *imageLoadOperation
 @property  unsigned long requestCount

  // instance methods
  -[VUIImageLoadContext .cxx_destruct]
  -[VUIImageLoadContext requestCount]
  -[VUIImageLoadContext setRequestCount:]
  -[VUIImageLoadContext imageLoadOperation]
  -[VUIImageLoadContext setImageLoadOperation:]


VUIImageLoader : NSObject /usr/lib/libSystem.B.dylib <TVImageLoader>
 @property  NSMutableDictionary *imageLoadContextsByImageIdentifier
 @property  NSOperationQueue *imageLoadOperationQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIImageLoader _scaledImageIdentifierWithImageIdentifier:scaleToSize:cropToFit:]

  // instance methods
  -[VUIImageLoader init]
  -[VUIImageLoader dealloc]
  -[VUIImageLoader .cxx_destruct]
  -[VUIImageLoader imageKeyForObject:]
  -[VUIImageLoader loadImageForObject:scaleToSize:cropToFit:imageDirection:requestLoader:completionHandler:]
  -[VUIImageLoader cancelLoad:]
  -[VUIImageLoader _cancelAllImageLoads]
  -[VUIImageLoader _imageLoaderIdentifier]
  -[VUIImageLoader _imageLoadParamsForImageLoaderObject:]
  -[VUIImageLoader _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIImageLoader _imageIdentifierWithImageLoadParams:]
  -[VUIImageLoader imageLoadContextsByImageIdentifier]
  -[VUIImageLoader imageLoadOperationQueue]
  -[VUIImageLoader setImageLoadContextsByImageIdentifier:]
  -[VUIImageLoader setImageLoadOperationQueue:]


VideosExtrasZoomingImageTransitionController : UIPercentDrivenInteractiveTransition /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIViewControllerAnimatedTransitioning, VideosExtrasOptionallyInteractiveAnimationController>
 @property  {CGPoint=dd} initialPinchCenter
 @property  double initialPinchScale
 @property  unsigned long itemIndex
 @property  BOOL interactive
 @property  VideosExtrasBorderedImageView *zoomingImageView
 @property  BOOL shouldUseSpringAnimation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasZoomingImageTransitionController .cxx_destruct]
  -[VideosExtrasZoomingImageTransitionController isInteractive]
  -[VideosExtrasZoomingImageTransitionController transitionDuration:]
  -[VideosExtrasZoomingImageTransitionController animateTransition:]
  -[VideosExtrasZoomingImageTransitionController itemIndex]
  -[VideosExtrasZoomingImageTransitionController setItemIndex:]
  -[VideosExtrasZoomingImageTransitionController setInteractive:]
  -[VideosExtrasZoomingImageTransitionController _destinationScale]
  -[VideosExtrasZoomingImageTransitionController setZoomingImageView:]
  -[VideosExtrasZoomingImageTransitionController zoomingImageView]
  -[VideosExtrasZoomingImageTransitionController shouldUseSpringAnimation]
  -[VideosExtrasZoomingImageTransitionController setInitialPinchCenter:]
  -[VideosExtrasZoomingImageTransitionController setInitialPinchScale:]
  -[VideosExtrasZoomingImageTransitionController initialPinchScale]
  -[VideosExtrasZoomingImageTransitionController initialPinchCenter]
  -[VideosExtrasZoomingImageTransitionController _desiredSpeedForNonInteractiveAnimationWithDuration:deferredTransform:finalTransform:]
  -[VideosExtrasZoomingImageTransitionController _maximumDistanceTravelledForPoints:count:currentTransform:finalTransform:]
  -[VideosExtrasZoomingImageTransitionController initWithItemIndex:forInteractiveTransition:]
  -[VideosExtrasZoomingImageTransitionController prepareInteractiveTransitionWithPinchGestureRecognizer:]
  -[VideosExtrasZoomingImageTransitionController updateInteractiveTransitionWithPinchGestureRecognizer:]
  -[VideosExtrasZoomingImageTransitionController completeInteractiveTransitionWithPinchGestureRecognizer:]
  -[VideosExtrasZoomingImageTransitionController setShouldUseSpringAnimation:]


VUIAccountSettingsButton : VUIButton
  // instance methods
  -[VUIAccountSettingsButton _accountStoreDidChange:]
  -[VUIAccountSettingsButton _setup]
  -[VUIAccountSettingsButton sizeThatFits:]
  -[VUIAccountSettingsButton _setupAccountImageView]
  -[VUIAccountSettingsButton _updateAccountImage]
  -[VUIAccountSettingsButton _updateAccountButtonVisibility:]
  -[VUIAccountSettingsButton initWithButtonLayout:interfaceStyle:]


VideosExtrasImageBrowserViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIPageViewControllerDataSource, UIPageViewControllerDelegate, VideosExtrasZoomingImageInteractiveTransitionSource, VideosExtrasZoomingImageTransitionParticipant>
 @property  UIPageViewController *pageViewController
 @property  <VideosExtrasImageBrowserViewControllerDataSource> *dataSource
 @property  <VideosExtrasImageBrowserViewControllerDelegate> *delegate
 @property  <VideosExtrasZoomingImageInteractiveTransitionSource> *zoomingImageInteractiveTransitionSource
 @property  BOOL allowsPinchingImageForInteractiveZoomingImageTransition
 @property  unsigned long visibleImageIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasImageBrowserViewController dealloc]
  -[VideosExtrasImageBrowserViewController delegate]
  -[VideosExtrasImageBrowserViewController setDelegate:]
  -[VideosExtrasImageBrowserViewController .cxx_destruct]
  -[VideosExtrasImageBrowserViewController dataSource]
  -[VideosExtrasImageBrowserViewController setDataSource:]
  -[VideosExtrasImageBrowserViewController initWithNibName:bundle:]
  -[VideosExtrasImageBrowserViewController viewDidLoad]
  -[VideosExtrasImageBrowserViewController pageViewController:willTransitionToViewControllers:]
  -[VideosExtrasImageBrowserViewController pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:]
  -[VideosExtrasImageBrowserViewController pageViewController:viewControllerBeforeViewController:]
  -[VideosExtrasImageBrowserViewController pageViewController:viewControllerAfterViewController:]
  -[VideosExtrasImageBrowserViewController _updateTitle]
  -[VideosExtrasImageBrowserViewController _numberOfImages]
  -[VideosExtrasImageBrowserViewController pageViewController]
  -[VideosExtrasImageBrowserViewController setPageViewController:]
  -[VideosExtrasImageBrowserViewController allowsPinchingImageForInteractiveZoomingImageTransition]
  -[VideosExtrasImageBrowserViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasImageBrowserViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasImageBrowserViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasImageBrowserViewController handlePinchGestureForZoomingImageInteractiveTransitionWithContext:]
  -[VideosExtrasImageBrowserViewController setAllowsPinchingImageForInteractiveZoomingImageTransition:]
  -[VideosExtrasImageBrowserViewController _removePageViewController]
  -[VideosExtrasImageBrowserViewController _addPageViewForController:toView:]
  -[VideosExtrasImageBrowserViewController _imageViewControllerAtIndex:]
  -[VideosExtrasImageBrowserViewController setVisibleImageIndex:]
  -[VideosExtrasImageBrowserViewController _visibleImageViewController]
  -[VideosExtrasImageBrowserViewController zoomingImageInteractiveTransitionSource]
  -[VideosExtrasImageBrowserViewController _updatePageViewController]
  -[VideosExtrasImageBrowserViewController visibleImageIndex]
  -[VideosExtrasImageBrowserViewController setZoomingImageInteractiveTransitionSource:]


VUIMediaEntityPropertyDescriptor : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *name
 @property  NSString *sortAsName
 @property  unsigned long propertyType
 @property  NSString *propertyValueClassName
 @property  id defaultValue
 @property  BOOL allowsDefaultValue
 @property  NSSet *sourcePropertyNames
 @property  BOOL retrievesSourcePropertiesAtFetch
 @property  BOOL sourceSupportsFiltering
 @property  @? sourceFilterValueBlock
 @property  @? sourceFilterBlock

  // class methods
  +[VUIMediaEntityPropertyDescriptor _classNameFromPropertyType:]

  // instance methods
  -[VUIMediaEntityPropertyDescriptor init]
  -[VUIMediaEntityPropertyDescriptor name]
  -[VUIMediaEntityPropertyDescriptor copyWithZone:]
  -[VUIMediaEntityPropertyDescriptor .cxx_destruct]
  -[VUIMediaEntityPropertyDescriptor setName:]
  -[VUIMediaEntityPropertyDescriptor defaultValue]
  -[VUIMediaEntityPropertyDescriptor setDefaultValue:]
  -[VUIMediaEntityPropertyDescriptor propertyType]
  -[VUIMediaEntityPropertyDescriptor setPropertyType:]
  -[VUIMediaEntityPropertyDescriptor setSourcePropertyNames:]
  -[VUIMediaEntityPropertyDescriptor setSortAsName:]
  -[VUIMediaEntityPropertyDescriptor setRetrievesSourcePropertiesAtFetch:]
  -[VUIMediaEntityPropertyDescriptor sortAsName]
  -[VUIMediaEntityPropertyDescriptor allowsDefaultValue]
  -[VUIMediaEntityPropertyDescriptor propertyValueClassName]
  -[VUIMediaEntityPropertyDescriptor _updateSourceSupportsFiltering]
  -[VUIMediaEntityPropertyDescriptor sourcePropertyNames]
  -[VUIMediaEntityPropertyDescriptor retrievesSourcePropertiesAtFetch]
  -[VUIMediaEntityPropertyDescriptor sourceSupportsFiltering]
  -[VUIMediaEntityPropertyDescriptor sourceFilterValueBlock]
  -[VUIMediaEntityPropertyDescriptor sourceFilterBlock]
  -[VUIMediaEntityPropertyDescriptor setSourceSupportsFiltering:]
  -[VUIMediaEntityPropertyDescriptor setSourceFilterValueBlock:]
  -[VUIMediaEntityPropertyDescriptor setSourceFilterBlock:]
  -[VUIMediaEntityPropertyDescriptor setPropertyValueClassName:]
  -[VUIMediaEntityPropertyDescriptor setAllowsDefaultValue:]


VUIViewElementDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *dataDictionary
 @property  VUIRouterDataSource *routerDataSource
 @property  IKViewElement *viewElement

  // instance methods
  -[VUIViewElementDataSource .cxx_destruct]
  -[VUIViewElementDataSource viewElement]
  -[VUIViewElementDataSource dataDictionary]
  -[VUIViewElementDataSource setDataDictionary:]
  -[VUIViewElementDataSource setViewElement:]
  -[VUIViewElementDataSource initWithDataDictionary:viewElement:]
  -[VUIViewElementDataSource routerDataSource]
  -[VUIViewElementDataSource setRouterDataSource:]


VUILibraryListPopoverViewCell : VUIListCollectionViewCell
 @property  VUISeparatorView *separatorView
 @property  VUILabel *titleLabel

  // instance methods
  -[VUILibraryListPopoverViewCell .cxx_destruct]
  -[VUILibraryListPopoverViewCell initWithFrame:]
  -[VUILibraryListPopoverViewCell titleLabel]
  -[VUILibraryListPopoverViewCell sizeThatFits:]
  -[VUILibraryListPopoverViewCell layoutSubviews]
  -[VUILibraryListPopoverViewCell separatorView]
  -[VUILibraryListPopoverViewCell setSeparatorView:]


VideosExtrasSlideshowViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <CAAnimationDelegate, VideosExtrasZoomingImageTransitionParticipant>
 @property  BOOL animatingTransition
 @property  BOOL viewVisible
 @property  VideosExtrasConstrainedArtworkContainerView *disappearingImageContainerView
 @property  VideosExtrasConstrainedArtworkContainerView *imageContainerView
 @property  UIImage *nextImage
 @property  NSTimer *transitionTimer
 @property  <VideosExtrasSlideshowViewControllerDataSource> *dataSource
 @property  unsigned long transitionStyle
 @property  double transitionInterval
 @property  unsigned long visibleImageIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasSlideshowViewController dealloc]
  -[VideosExtrasSlideshowViewController .cxx_destruct]
  -[VideosExtrasSlideshowViewController dataSource]
  -[VideosExtrasSlideshowViewController setDataSource:]
  -[VideosExtrasSlideshowViewController initWithNibName:bundle:]
  -[VideosExtrasSlideshowViewController viewDidLoad]
  -[VideosExtrasSlideshowViewController viewDidAppear:]
  -[VideosExtrasSlideshowViewController viewDidDisappear:]
  -[VideosExtrasSlideshowViewController animationDidStop:finished:]
  -[VideosExtrasSlideshowViewController preferredStatusBarStyle]
  -[VideosExtrasSlideshowViewController setTransitionStyle:]
  -[VideosExtrasSlideshowViewController transitionStyle]
  -[VideosExtrasSlideshowViewController imageContainerView]
  -[VideosExtrasSlideshowViewController setImageContainerView:]
  -[VideosExtrasSlideshowViewController _reload]
  -[VideosExtrasSlideshowViewController transitionInterval]
  -[VideosExtrasSlideshowViewController _numberOfImages]
  -[VideosExtrasSlideshowViewController transitionTimer]
  -[VideosExtrasSlideshowViewController setTransitionTimer:]
  -[VideosExtrasSlideshowViewController isAnimatingTransition]
  -[VideosExtrasSlideshowViewController setAnimatingTransition:]
  -[VideosExtrasSlideshowViewController setViewVisible:]
  -[VideosExtrasSlideshowViewController isViewVisible]
  -[VideosExtrasSlideshowViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasSlideshowViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasSlideshowViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasSlideshowViewController setVisibleImageIndex:]
  -[VideosExtrasSlideshowViewController visibleImageIndex]
  -[VideosExtrasSlideshowViewController _invalidateTransitionTimer]
  -[VideosExtrasSlideshowViewController _prepareNextImageAndScheduleTransitionTimerIfAppropriate]
  -[VideosExtrasSlideshowViewController _loadImageContainerViewIfAppropriateWithImage:]
  -[VideosExtrasSlideshowViewController _transitionDidComplete]
  -[VideosExtrasSlideshowViewController _transitionTimerDidFire:]
  -[VideosExtrasSlideshowViewController _transitionToNextImageIfAppropriate]
  -[VideosExtrasSlideshowViewController setDisappearingImageContainerView:]
  -[VideosExtrasSlideshowViewController nextImage]
  -[VideosExtrasSlideshowViewController disappearingImageContainerView]
  -[VideosExtrasSlideshowViewController setNextImage:]
  -[VideosExtrasSlideshowViewController _scheduleTransitionTimer]
  -[VideosExtrasSlideshowViewController _performInstantaneousTransition]
  -[VideosExtrasSlideshowViewController _performDissolveTransition]
  -[VideosExtrasSlideshowViewController _performPushTransition]
  -[VideosExtrasSlideshowViewController _performWipeTransition]
  -[VideosExtrasSlideshowViewController setTransitionInterval:]


VUIMarkAsWatchedRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *ongoingItemIDOperationDictionary

  // class methods
  +[VUIMarkAsWatchedRequestManager sharedInstance]

  // instance methods
  -[VUIMarkAsWatchedRequestManager init]
  -[VUIMarkAsWatchedRequestManager .cxx_destruct]
  -[VUIMarkAsWatchedRequestManager _init]
  -[VUIMarkAsWatchedRequestManager ongoingItemIDOperationDictionary]
  -[VUIMarkAsWatchedRequestManager sendRequestForItemID:itemType:channelID:]
  -[VUIMarkAsWatchedRequestManager setOngoingItemIDOperationDictionary:]


VUICardView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUICardViewLayoutFactory *layoutFactory
 @property  {CGSize=dd} imageSize
 @property  _TVImageView *imageView
 @property  _TVImageView *appImageView
 @property  NSArray *labelViews
 @property  UIView *overlayView
 @property  VUIButton *button
 @property  NSString *debugString

  // instance methods
  -[VUICardView dealloc]
  -[VUICardView .cxx_destruct]
  -[VUICardView button]
  -[VUICardView sizeThatFits:]
  -[VUICardView layoutSubviews]
  -[VUICardView imageView]
  -[VUICardView setHighlighted:]
  -[VUICardView imageSize]
  -[VUICardView setOverlayView:]
  -[VUICardView setImageView:]
  -[VUICardView setButton:]
  -[VUICardView setImageSize:]
  -[VUICardView overlayView]
  -[VUICardView debugString]
  -[VUICardView setDebugString:]
  -[VUICardView labelViews]
  -[VUICardView setLabelViews:]
  -[VUICardView prepareForCellReuse]
  -[VUICardView layoutFactory]
  -[VUICardView _mainImageLoaded]
  -[VUICardView _maxTextWidthForImagePosition:width:appImageLayout:textLayout:]
  -[VUICardView initWithFrame:layoutFactory:]
  -[VUICardView setAppImageView:]
  -[VUICardView appImageView]


VUIJSMediaPlayer : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIOrderedItemsMapDelegate, VUIJSMediaPlayerLibraryExport>
 @property  MPUQueryDataSource *queryDataSource
 @property  VUIOrderedItemsMap *orderedItemsMap
 @property  NSOperationQueue *fetchOperationQueue
 @property  NSOperationQueue *fetchCompletionOperationQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIJSMediaPlayer dealloc]
  -[VUIJSMediaPlayer .cxx_destruct]
  -[VUIJSMediaPlayer _logObject]
  -[VUIJSMediaPlayer setFilter:]
  -[VUIJSMediaPlayer initWithAppContext:]
  -[VUIJSMediaPlayer getItems]
  -[VUIJSMediaPlayer _dataSourceType]
  -[VUIJSMediaPlayer queryDataSource]
  -[VUIJSMediaPlayer _mediaItemForIdentifier:]
  -[VUIJSMediaPlayer setFetchOperationQueue:]
  -[VUIJSMediaPlayer fetchOperationQueue]
  -[VUIJSMediaPlayer _numberForString:]
  -[VUIJSMediaPlayer _stringForNumber:]
  -[VUIJSMediaPlayer _onIsUpdateInProgressChangedNotification:]
  -[VUIJSMediaPlayer _onSyncGenerationChangedNotification:]
  -[VUIJSMediaPlayer _mediaLibraryChanged:]
  -[VUIJSMediaPlayer orderedItemsMap]
  -[VUIJSMediaPlayer _dataSourceWillChange]
  -[VUIJSMediaPlayer _dataSourceChanged:]
  -[VUIJSMediaPlayer _dataSourceDidChange]
  -[VUIJSMediaPlayer _getItem:includeChildren:additionalProperties:]
  -[VUIJSMediaPlayer _dataSourceForConfigurationOptions:]
  -[VUIJSMediaPlayer setQueryDataSource:]
  -[VUIJSMediaPlayer fetchCompletionOperationQueue]
  -[VUIJSMediaPlayer _dateFromConfigurationObject:]
  -[VUIJSMediaPlayer _identifierForMediaItem:withProperty:]
  -[VUIJSMediaPlayer itemsMapAddedKeys:andRemovedKeys:]
  -[VUIJSMediaPlayer findItemByPersistentIdentifier::]
  -[VUIJSMediaPlayer findItemByStoreIdentifier::]
  -[VUIJSMediaPlayer getIsUpdateInProgress]
  -[VUIJSMediaPlayer getIsInitialImport]
  -[VUIJSMediaPlayer getImageForItem:::]
  -[VUIJSMediaPlayer getItem::]
  -[VUIJSMediaPlayer getItemCount]
  -[VUIJSMediaPlayer getShowIdentifierForStoreIdentifier:]
  -[VUIJSMediaPlayer getItemWithChildren::]
  -[VUIJSMediaPlayer getUpdateProgress:]
  -[VUIJSMediaPlayer libraryHasMedia]
  -[VUIJSMediaPlayer setFilterAsync::]
  -[VUIJSMediaPlayer queryHasItemCount:]
  -[VUIJSMediaPlayer fetchMediaEntitiesWithOptions::]
  -[VUIJSMediaPlayer isHDRCapable]
  -[VUIJSMediaPlayer setOrderedItemsMap:]
  -[VUIJSMediaPlayer setFetchCompletionOperationQueue:]


VideosExtrasCarouselCollectionViewLayout : UICollectionViewLayout /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VideosExtrasCarouselCollectionViewLayout>
 @property  NSDictionary *cachedLayoutAttributes
 @property  {CGSize=dd} cachedCollectionViewContentSize
 @property  long long indexOfVisibleItemForBoundsChange

  // instance methods
  -[VideosExtrasCarouselCollectionViewLayout init]
  -[VideosExtrasCarouselCollectionViewLayout .cxx_destruct]
  -[VideosExtrasCarouselCollectionViewLayout itemWidth]
  -[VideosExtrasCarouselCollectionViewLayout prepareLayout]
  -[VideosExtrasCarouselCollectionViewLayout layoutAttributesForElementsInRect:]
  -[VideosExtrasCarouselCollectionViewLayout layoutAttributesForItemAtIndexPath:]
  -[VideosExtrasCarouselCollectionViewLayout collectionViewContentSize]
  -[VideosExtrasCarouselCollectionViewLayout shouldInvalidateLayoutForBoundsChange:]
  -[VideosExtrasCarouselCollectionViewLayout finalLayoutAttributesForDisappearingItemAtIndexPath:]
  -[VideosExtrasCarouselCollectionViewLayout prepareForAnimatedBoundsChange:]
  -[VideosExtrasCarouselCollectionViewLayout targetContentOffsetForProposedContentOffset:]
  -[VideosExtrasCarouselCollectionViewLayout initialLayoutAttributesForAppearingItemAtIndexPath:]
  -[VideosExtrasCarouselCollectionViewLayout finalizeAnimatedBoundsChange]
  -[VideosExtrasCarouselCollectionViewLayout targetContentOffsetForProposedContentOffset:withScrollingVelocity:]
  -[VideosExtrasCarouselCollectionViewLayout _spaceBetweenItems]
  -[VideosExtrasCarouselCollectionViewLayout _neighboringItemVisibleWidth]
  -[VideosExtrasCarouselCollectionViewLayout setCachedLayoutAttributes:]
  -[VideosExtrasCarouselCollectionViewLayout setCachedCollectionViewContentSize:]
  -[VideosExtrasCarouselCollectionViewLayout cachedCollectionViewContentSize]
  -[VideosExtrasCarouselCollectionViewLayout cachedLayoutAttributes]
  -[VideosExtrasCarouselCollectionViewLayout _indexOfVisibleItemForContentOffset:collectionViewBounds:]
  -[VideosExtrasCarouselCollectionViewLayout _contentOffsetForItemAtIndex:collectionViewBounds:]
  -[VideosExtrasCarouselCollectionViewLayout setIndexOfVisibleItemForBoundsChange:]
  -[VideosExtrasCarouselCollectionViewLayout indexOfVisibleItemForBoundsChange]
  -[VideosExtrasCarouselCollectionViewLayout setIndexOfVisibleItem:animated:]
  -[VideosExtrasCarouselCollectionViewLayout indexOfVisibleItem]
  -[VideosExtrasCarouselCollectionViewLayout _spaceBetweenItemsForCollectionViewBounds:]
  -[VideosExtrasCarouselCollectionViewLayout setIndexOfVisibleItem:]


VUIMediaEntityAssetControllerState : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long status
 @property  double downloadProgress
 @property  BOOL supportsCancellation
 @property  BOOL supportsPausing
 @property  unsigned long bytesToDownload
 @property  unsigned long bytesDownloaded
 @property  BOOL downloadInProgress

  // instance methods
  -[VUIMediaEntityAssetControllerState init]
  -[VUIMediaEntityAssetControllerState isEqual:]
  -[VUIMediaEntityAssetControllerState copyWithZone:]
  -[VUIMediaEntityAssetControllerState status]
  -[VUIMediaEntityAssetControllerState setStatus:]
  -[VUIMediaEntityAssetControllerState bytesDownloaded]
  -[VUIMediaEntityAssetControllerState setBytesDownloaded:]
  -[VUIMediaEntityAssetControllerState downloadProgress]
  -[VUIMediaEntityAssetControllerState setDownloadProgress:]
  -[VUIMediaEntityAssetControllerState bytesToDownload]
  -[VUIMediaEntityAssetControllerState supportsCancellation]
  -[VUIMediaEntityAssetControllerState supportsPausing]
  -[VUIMediaEntityAssetControllerState isDownloadInProgress]
  -[VUIMediaEntityAssetControllerState setSupportsCancellation:]
  -[VUIMediaEntityAssetControllerState setSupportsPausing:]
  -[VUIMediaEntityAssetControllerState setBytesToDownload:]


VUIProductShowcaseViewController : _TVStackTemplateController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  BOOL lightStatusBar
 @property  UIViewController<VUIProductUberBackgroundInterface> *productBanner
 @property  UIView *navBarGradientView
 @property  CAGradientLayer *gradientLayer
 @property  NSArray *navBarButtons
 @property  UIView *transitionBackgroundView

  // instance methods
  -[VUIProductShowcaseViewController .cxx_destruct]
  -[VUIProductShowcaseViewController traitCollectionDidChange:]
  -[VUIProductShowcaseViewController scrollViewDidScroll:]
  -[VUIProductShowcaseViewController willTransitionToTraitCollection:withTransitionCoordinator:]
  -[VUIProductShowcaseViewController viewDidLayoutSubviews]
  -[VUIProductShowcaseViewController preferredStatusBarUpdateAnimation]
  -[VUIProductShowcaseViewController preferredStatusBarStyle]
  -[VUIProductShowcaseViewController gradientLayer]
  -[VUIProductShowcaseViewController setGradientLayer:]
  -[VUIProductShowcaseViewController _gradientLayer]
  -[VUIProductShowcaseViewController updateWithViewElement:]
  -[VUIProductShowcaseViewController configureAppearanceTransition]
  -[VUIProductShowcaseViewController _overrideLargeTitleDisplayMode]
  -[VUIProductShowcaseViewController setNavBarButtons:]
  -[VUIProductShowcaseViewController _configureBannerView:]
  -[VUIProductShowcaseViewController _setupProductBanner]
  -[VUIProductShowcaseViewController _configureTransitionBackgroundView]
  -[VUIProductShowcaseViewController _configureNavigationBarGradient]
  -[VUIProductShowcaseViewController setProductBanner:]
  -[VUIProductShowcaseViewController navBarButtons]
  -[VUIProductShowcaseViewController productBanner]
  -[VUIProductShowcaseViewController navBarGradientView]
  -[VUIProductShowcaseViewController transitionBackgroundView]
  -[VUIProductShowcaseViewController setNavBarGradientView:]
  -[VUIProductShowcaseViewController lightStatusBar]
  -[VUIProductShowcaseViewController setLightStatusBar:]
  -[VUIProductShowcaseViewController setTransitionBackgroundView:]


VUIRentalExpirationLabel : VUILabel
 @property  NSString *formatString
 @property  NSTimer *expiryUpdateTimer
 @property  NSDate *expirationDate
 @property  <VUIRentalExpirationLabelDelegate> *delegate

  // class methods
  +[VUIRentalExpirationLabel labelWithExpirationDate:textLayout:existingLabel:formatString:]
  +[VUIRentalExpirationLabel _calculateExpirationStringForDate:displayWarningColor:updateInterval:formatString:]
  +[VUIRentalExpirationLabel calculateExpirationStringForDate:updateInterval:formatString:]

  // instance methods
  -[VUIRentalExpirationLabel dealloc]
  -[VUIRentalExpirationLabel delegate]
  -[VUIRentalExpirationLabel setDelegate:]
  -[VUIRentalExpirationLabel .cxx_destruct]
  -[VUIRentalExpirationLabel expirationDate]
  -[VUIRentalExpirationLabel setExpirationDate:]
  -[VUIRentalExpirationLabel willMoveToWindow:]
  -[VUIRentalExpirationLabel invalidateTimer]
  -[VUIRentalExpirationLabel formatString]
  -[VUIRentalExpirationLabel setFormatString:]
  -[VUIRentalExpirationLabel _computeExpirationLabel:]
  -[VUIRentalExpirationLabel expiryUpdateTimer]
  -[VUIRentalExpirationLabel setExpiryUpdateTimer:]


VUICanvasBrowserViewController : VUIProductShowcaseViewController
 @property  BOOL shouldNeverShowLargeTitle

  // instance methods
  -[VUICanvasBrowserViewController updateWithViewElement:]
  -[VUICanvasBrowserViewController _overrideLargeTitleDisplayMode]
  -[VUICanvasBrowserViewController setShouldNeverShowLargeTitle:]
  -[VUICanvasBrowserViewController shouldNeverShowLargeTitle]


VUIUpNextRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *ongoingCanonicalIDOperationDictionary

  // class methods
  +[VUIUpNextRequestManager sharedInstance]

  // instance methods
  -[VUIUpNextRequestManager init]
  -[VUIUpNextRequestManager .cxx_destruct]
  -[VUIUpNextRequestManager _init]
  -[VUIUpNextRequestManager sendRequestForCanonicalID:action:]
  -[VUIUpNextRequestManager ongoingCanonicalIDOperationDictionary]
  -[VUIUpNextRequestManager setOngoingCanonicalIDOperationDictionary:]


VUIPlaybackSettings : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL cellularDataEnabled
 @property  long long networkStatus
 @property  long long preferredWifiPlaybackQuality
 @property  long long preferredCellularPlaybackQuality
 @property  long long preferredPlaybackQualityForCurrentNetworkStatus
 @property  NSString *preferredAudioLanguageCode

  // class methods
  +[VUIPlaybackSettings sharedSettings]

  // instance methods
  -[VUIPlaybackSettings init]
  -[VUIPlaybackSettings dealloc]
  -[VUIPlaybackSettings .cxx_destruct]
  -[VUIPlaybackSettings setCellularDataEnabled:]
  -[VUIPlaybackSettings networkStatus]
  -[VUIPlaybackSettings setNetworkStatus:]
  -[VUIPlaybackSettings cellularDataEnabled]
  -[VUIPlaybackSettings _updateNetworkStatus]
  -[VUIPlaybackSettings _networkTypeDidChange:]
  -[VUIPlaybackSettings preferredAudioLanguageCode]
  -[VUIPlaybackSettings setPreferredAudioLanguageCode:]
  -[VUIPlaybackSettings preferredPlaybackQualityForCurrentNetworkStatus]
  -[VUIPlaybackSettings preferredCellularPlaybackQuality]
  -[VUIPlaybackSettings _updatePropertiesFromUserPrefs]
  -[VUIPlaybackSettings _registerObserverForUserPrefsChange]
  -[VUIPlaybackSettings preferredWifiPlaybackQuality]
  -[VUIPlaybackSettings _playbackQualityForString:]
  -[VUIPlaybackSettings setPreferredWifiPlaybackQuality:]
  -[VUIPlaybackSettings setPreferredCellularPlaybackQuality:]


VUIAppInstallConfirmationViewController : VUIAppLoadingViewController
 @property  UIBarButtonItem *barButtonItem
 @property  VUIAppInstallConfirmationView *confirmationView
 @property  <WLKInstallable> *installable
 @property  SSLookupItemOffer *itemOffer
 @property  @? cancelationHandler
 @property  @? actionHandler
 @property  @? appStoreHandler
 @property  @? secondaryLinkHandler
 @property  UIButton *actionButton
 @property  VUIAppInstallLockup *lockup
 @property  unsigned long state

  // instance methods
  -[VUIAppInstallConfirmationViewController init]
  -[VUIAppInstallConfirmationViewController .cxx_destruct]
  -[VUIAppInstallConfirmationViewController state]
  -[VUIAppInstallConfirmationViewController setTitle:]
  -[VUIAppInstallConfirmationViewController setState:]
  -[VUIAppInstallConfirmationViewController setMessage:]
  -[VUIAppInstallConfirmationViewController loadView]
  -[VUIAppInstallConfirmationViewController setActionHandler:]
  -[VUIAppInstallConfirmationViewController actionHandler]
  -[VUIAppInstallConfirmationViewController didUpdateFocusInContext:withAnimationCoordinator:]
  -[VUIAppInstallConfirmationViewController viewDidAppear:]
  -[VUIAppInstallConfirmationViewController barButtonItem]
  -[VUIAppInstallConfirmationViewController setBarButtonItem:]
  -[VUIAppInstallConfirmationViewController actionButton]
  -[VUIAppInstallConfirmationViewController itemOffer]
  -[VUIAppInstallConfirmationViewController _handleCancel]
  -[VUIAppInstallConfirmationViewController lockup]
  -[VUIAppInstallConfirmationViewController setItemOffer:]
  -[VUIAppInstallConfirmationViewController confirmationView]
  -[VUIAppInstallConfirmationViewController cancelationHandler]
  -[VUIAppInstallConfirmationViewController setCancelationHandler:]
  -[VUIAppInstallConfirmationViewController initWithInstallable:]
  -[VUIAppInstallConfirmationViewController setUpdateTitle:]
  -[VUIAppInstallConfirmationViewController setUpdateMessage:]
  -[VUIAppInstallConfirmationViewController setAppStoreHandler:]
  -[VUIAppInstallConfirmationViewController setSecondaryLinkTitle:]
  -[VUIAppInstallConfirmationViewController secondaryLinkHandler]
  -[VUIAppInstallConfirmationViewController setSecondaryLinkHandler:]
  -[VUIAppInstallConfirmationViewController setPreInstallState]
  -[VUIAppInstallConfirmationViewController setInstallingState]
  -[VUIAppInstallConfirmationViewController installable]
  -[VUIAppInstallConfirmationViewController _handleAppStore]
  -[VUIAppInstallConfirmationViewController _handleSecondaryLink]
  -[VUIAppInstallConfirmationViewController _handleAction]
  -[VUIAppInstallConfirmationViewController _fetchAppInfo]
  -[VUIAppInstallConfirmationViewController _namedRatingWithRatings:]
  -[VUIAppInstallConfirmationViewController _fetchStoreInfoForAdamID:completion:]
  -[VUIAppInstallConfirmationViewController _fileSizeWithDeviceSizes:]
  -[VUIAppInstallConfirmationViewController appStoreHandler]
  -[VUIAppInstallConfirmationViewController setConfirmationView:]
  -[VUIAppInstallConfirmationViewController setInstallable:]


VideosExtrasCarouselCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate, VideosExtrasCarouselCollectionViewCell>
 @property  VideosExtrasConstrainedArtworkContainerView *thumbnailImageContainerView
 @property  NSLayoutConstraint *thumbnailImageContainerViewHeightConstraint
 @property  NSArray *thumbnailImageContainerViewConstraints
 @property  MPUContentSizeLayoutConstraint *subtitleBaselineConstraint
 @property  MPUContentSizeLayoutConstraint *descriptionLabelBaselineConstraint
 @property  UIView *textContainer
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel
 @property  UILabel *descriptionLabel
 @property  unsigned long itemIndex
 @property  VideosExtrasZoomingImageInteractiveTransitionSourceContext *interactiveTransitionSourceContext
 @property  UIPinchGestureRecognizer *pinchGestureRecognizer
 @property  BOOL allowsPinchingThumbnailImageForInteractiveZoomingImageTransition
 @property  NSString *zoomingImageTransitionIdentifier
 @property  {CGSize=dd} windowSize
 @property  double thumbnailImageContainerHeight
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasCarouselCollectionViewCell dealloc]
  -[VideosExtrasCarouselCollectionViewCell .cxx_destruct]
  -[VideosExtrasCarouselCollectionViewCell prepareForReuse]
  -[VideosExtrasCarouselCollectionViewCell textContainer]
  -[VideosExtrasCarouselCollectionViewCell setTextContainer:]
  -[VideosExtrasCarouselCollectionViewCell titleLabel]
  -[VideosExtrasCarouselCollectionViewCell setHighlighted:]
  -[VideosExtrasCarouselCollectionViewCell updateConstraints]
  -[VideosExtrasCarouselCollectionViewCell setTitleLabel:]
  -[VideosExtrasCarouselCollectionViewCell setDescriptionLabel:]
  -[VideosExtrasCarouselCollectionViewCell descriptionLabel]
  -[VideosExtrasCarouselCollectionViewCell itemIndex]
  -[VideosExtrasCarouselCollectionViewCell setItemIndex:]
  -[VideosExtrasCarouselCollectionViewCell setTitleText:]
  -[VideosExtrasCarouselCollectionViewCell setSubtitleLabel:]
  -[VideosExtrasCarouselCollectionViewCell subtitleLabel]
  -[VideosExtrasCarouselCollectionViewCell pinchGestureRecognizer]
  -[VideosExtrasCarouselCollectionViewCell setPinchGestureRecognizer:]
  -[VideosExtrasCarouselCollectionViewCell titleText]
  -[VideosExtrasCarouselCollectionViewCell descriptionText]
  -[VideosExtrasCarouselCollectionViewCell setDescriptionText:]
  -[VideosExtrasCarouselCollectionViewCell subtitleText]
  -[VideosExtrasCarouselCollectionViewCell setSubtitleText:]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImage]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImage:]
  -[VideosExtrasCarouselCollectionViewCell _handlePinchGesture:]
  -[VideosExtrasCarouselCollectionViewCell titleTextStyle]
  -[VideosExtrasCarouselCollectionViewCell windowSize]
  -[VideosExtrasCarouselCollectionViewCell setWindowSize:]
  -[VideosExtrasCarouselCollectionViewCell setSubtitleBaselineConstraint:]
  -[VideosExtrasCarouselCollectionViewCell subtitleBaselineConstraint]
  -[VideosExtrasCarouselCollectionViewCell subtitleTextStyle]
  -[VideosExtrasCarouselCollectionViewCell prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasCarouselCollectionViewCell performZoomingImageTransitionWithContext:]
  -[VideosExtrasCarouselCollectionViewCell finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasCarouselCollectionViewCell interactiveTransitionSourceContext]
  -[VideosExtrasCarouselCollectionViewCell zoomingImageTransitionIdentifier]
  -[VideosExtrasCarouselCollectionViewCell setInteractiveTransitionSourceContext:]
  -[VideosExtrasCarouselCollectionViewCell setZoomingImageTransitionIdentifier:]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImageContainerViewHeightConstraint]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImageContainerHeight]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImageContainerView]
  -[VideosExtrasCarouselCollectionViewCell descriptionLabelBaselineConstraint]
  -[VideosExtrasCarouselCollectionViewCell setDescriptionLabelBaselineConstraint:]
  -[VideosExtrasCarouselCollectionViewCell descriptionTextStyle]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImageContainerViewConstraints]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImagePlaceholder:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailOverlayImage:]
  -[VideosExtrasCarouselCollectionViewCell _updateThumbnailArtworkViewBorder]
  -[VideosExtrasCarouselCollectionViewCell _setupThumbnailImageContainerViewWithConstraintsAccumulator:]
  -[VideosExtrasCarouselCollectionViewCell _setupTitleLabelWithConstraintsAccumulator:]
  -[VideosExtrasCarouselCollectionViewCell _setupSubtitleLabelWithConstraintsAccumulator:]
  -[VideosExtrasCarouselCollectionViewCell _setupDescriptionLabelWithConstraintsAccumulator:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImageContainerViewConstraints:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImageContainerViewHeightConstraint:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImageContainerView:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailMaxSize:]
  -[VideosExtrasCarouselCollectionViewCell thumbnailMaxSize]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailBorderColor:]
  -[VideosExtrasCarouselCollectionViewCell setThumbnailImageAccessibilityText:]
  -[VideosExtrasCarouselCollectionViewCell setAllowsPinchingThumbnailImageForInteractiveZoomingImageTransition:]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImagePlaceholder]
  -[VideosExtrasCarouselCollectionViewCell thumbnailImageAccessibilityText]
  -[VideosExtrasCarouselCollectionViewCell lockupElement]
  -[VideosExtrasCarouselCollectionViewCell _descriptionLabelTopInset]
  -[VideosExtrasCarouselCollectionViewCell allowsPinchingThumbnailImageForInteractiveZoomingImageTransition]


VUICategoryMenuViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDataSource, UICollectionViewDelegate>
 @property  VUICollectionView *menuCollectionView
 @property  VUILibraryMenuItemViewCell *sizingCell
 @property  VUIMenuSectionHeaderCollectionViewCell *sectionHeaderSizingCell
 @property  <VUICategoryMenuViewControllerDelegate> *delegate
 @property  BOOL shouldShowBackButton
 @property  VUIMenuDataSource *categories
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUICategoryMenuViewController delegate]
  -[VUICategoryMenuViewController setDelegate:]
  -[VUICategoryMenuViewController .cxx_destruct]
  -[VUICategoryMenuViewController loadView]
  -[VUICategoryMenuViewController viewWillAppear:]
  -[VUICategoryMenuViewController viewWillLayoutSubviews]
  -[VUICategoryMenuViewController numberOfSectionsInCollectionView:]
  -[VUICategoryMenuViewController collectionView:numberOfItemsInSection:]
  -[VUICategoryMenuViewController collectionView:cellForItemAtIndexPath:]
  -[VUICategoryMenuViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUICategoryMenuViewController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VUICategoryMenuViewController collectionView:didSelectItemAtIndexPath:]
  -[VUICategoryMenuViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUICategoryMenuViewController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VUICategoryMenuViewController collectionView:layout:minimumLineSpacingForSectionAtIndex:]
  -[VUICategoryMenuViewController categories]
  -[VUICategoryMenuViewController setCategories:]
  -[VUICategoryMenuViewController sizingCell]
  -[VUICategoryMenuViewController setSizingCell:]
  -[VUICategoryMenuViewController initWithCategories:]
  -[VUICategoryMenuViewController _updateNavigationBarPadding]
  -[VUICategoryMenuViewController setShouldShowBackButton:]
  -[VUICategoryMenuViewController _updateCollectionLayout]
  -[VUICategoryMenuViewController shouldShowBackButton]
  -[VUICategoryMenuViewController _backSelected:]
  -[VUICategoryMenuViewController menuCollectionView]
  -[VUICategoryMenuViewController updateWithCategories:updateEntitiesIfNecessaryBlock:]
  -[VUICategoryMenuViewController setMenuCollectionView:]
  -[VUICategoryMenuViewController sectionHeaderSizingCell]
  -[VUICategoryMenuViewController setSectionHeaderSizingCell:]


VUIConfirmationAnimatedTransitioning : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerAnimatedTransitioning>
 @property  BOOL presenting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIConfirmationAnimatedTransitioning init]
  -[VUIConfirmationAnimatedTransitioning transitionDuration:]
  -[VUIConfirmationAnimatedTransitioning animateTransition:]
  -[VUIConfirmationAnimatedTransitioning isPresenting]
  -[VUIConfirmationAnimatedTransitioning initWithPresenting:]


VUILibraryListItemView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIImageView *listImageView
 @property  VUILabel *titleLabel
 @property  UIImage *itemImage

  // instance methods
  -[VUILibraryListItemView .cxx_destruct]
  -[VUILibraryListItemView titleLabel]
  -[VUILibraryListItemView sizeThatFits:]
  -[VUILibraryListItemView layoutSubviews]
  -[VUILibraryListItemView setTitleLabel:]
  -[VUILibraryListItemView setItemImage:]
  -[VUILibraryListItemView itemImage]
  -[VUILibraryListItemView _layoutWithSize:metricsOnly:]
  -[VUILibraryListItemView listImageView]
  -[VUILibraryListItemView setListImageView:]


VUILibraryAlertView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *titleLabel
 @property  VUILabel *subtitleLabel

  // instance methods
  -[VUILibraryAlertView .cxx_destruct]
  -[VUILibraryAlertView initWithFrame:]
  -[VUILibraryAlertView titleLabel]
  -[VUILibraryAlertView layoutSubviews]
  -[VUILibraryAlertView subtitleLabel]


_VideosExtrasGridHeaderView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UILabel *titleLabel

  // instance methods
  -[_VideosExtrasGridHeaderView .cxx_destruct]
  -[_VideosExtrasGridHeaderView initWithFrame:]
  -[_VideosExtrasGridHeaderView titleLabel]
  -[_VideosExtrasGridHeaderView configureForImage:title:subtitle:style:]


VideosExtrasGridElementViewController : VideosExtrasViewElementViewController <UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout>
 @property  IKGridElement *viewElement
 @property  VideosExtrasGridViewControllerStyle *currentStyle
 @property  UICollectionView *collectionView
 @property  VideosExtrasGridViewControllerStyle *smallStyle
 @property  VideosExtrasGridViewControllerStyle *mediumStyle
 @property  VideosExtrasGridViewControllerStyle *largeStyle
 @property  VideosExtrasGridViewControllerStyle *extraLargeStyle
 @property  VideosExtrasGridViewControllerStyle *wideStyle
 @property  BOOL shelfStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideosExtrasGridElementViewController _defaultCellStyle]
  +[VideosExtrasGridElementViewController _fontAttributesForTextStyle:]
  +[VideosExtrasGridElementViewController smallGalleryStyle]
  +[VideosExtrasGridElementViewController smallDetailStyle]
  +[VideosExtrasGridElementViewController mediumDetailStyle]
  +[VideosExtrasGridElementViewController smallStackGridStyle]
  +[VideosExtrasGridElementViewController mediumStackGridStyle]
  +[VideosExtrasGridElementViewController largeStackGridStyle]
  +[VideosExtrasGridElementViewController keyPathsForValuesAffectingContentScrollView]
  +[VideosExtrasGridElementViewController wideGalleryStyle]
  +[VideosExtrasGridElementViewController mediumGalleryStyle]
  +[VideosExtrasGridElementViewController largeGalleryStyle]
  +[VideosExtrasGridElementViewController extraLargeGalleryStyle]
  +[VideosExtrasGridElementViewController wideDetailStyle]
  +[VideosExtrasGridElementViewController largeDetailStyle]
  +[VideosExtrasGridElementViewController extraLargeDetailStyle]
  +[VideosExtrasGridElementViewController wideStackGridStyle]
  +[VideosExtrasGridElementViewController extraLargeStackGridStyle]

  // instance methods
  -[VideosExtrasGridElementViewController dealloc]
  -[VideosExtrasGridElementViewController .cxx_destruct]
  -[VideosExtrasGridElementViewController loadView]
  -[VideosExtrasGridElementViewController preferredContentSize]
  -[VideosExtrasGridElementViewController viewWillAppear:]
  -[VideosExtrasGridElementViewController collectionView]
  -[VideosExtrasGridElementViewController numberOfSectionsInCollectionView:]
  -[VideosExtrasGridElementViewController collectionView:numberOfItemsInSection:]
  -[VideosExtrasGridElementViewController collectionView:cellForItemAtIndexPath:]
  -[VideosExtrasGridElementViewController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VideosExtrasGridElementViewController collectionView:didHighlightItemAtIndexPath:]
  -[VideosExtrasGridElementViewController collectionView:didSelectItemAtIndexPath:]
  -[VideosExtrasGridElementViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VideosExtrasGridElementViewController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VideosExtrasGridElementViewController collectionView:layout:insetForSectionAtIndex:]
  -[VideosExtrasGridElementViewController collectionView:layout:minimumInteritemSpacingForSectionAtIndex:]
  -[VideosExtrasGridElementViewController contentScrollView]
  -[VideosExtrasGridElementViewController currentStyle]
  -[VideosExtrasGridElementViewController initWithViewElement:]
  -[VideosExtrasGridElementViewController setViewElement:]
  -[VideosExtrasGridElementViewController _dynamicTypeDidChange]
  -[VideosExtrasGridElementViewController _prepareLayout]
  -[VideosExtrasGridElementViewController isShelfStyle]
  -[VideosExtrasGridElementViewController setShelfStyle:]
  -[VideosExtrasGridElementViewController _hasDescriptionText]
  -[VideosExtrasGridElementViewController _sectionIndexIsDescriptionSection:]
  -[VideosExtrasGridElementViewController _sectionElementForIndex:]
  -[VideosExtrasGridElementViewController _cellStyleForSection:]
  -[VideosExtrasGridElementViewController _lockupForIndexPath:]
  -[VideosExtrasGridElementViewController _sectionInsetsForSection:]
  -[VideosExtrasGridElementViewController _cellSpacingForSection:]
  -[VideosExtrasGridElementViewController _narrowStyle]
  -[VideosExtrasGridElementViewController smallStyle]
  -[VideosExtrasGridElementViewController mediumStyle]
  -[VideosExtrasGridElementViewController largeStyle]
  -[VideosExtrasGridElementViewController extraLargeStyle]
  -[VideosExtrasGridElementViewController preferredLayoutGuide]
  -[VideosExtrasGridElementViewController preferredLayoutAttribute]
  -[VideosExtrasGridElementViewController setSmallStyle:]
  -[VideosExtrasGridElementViewController setMediumStyle:]
  -[VideosExtrasGridElementViewController setLargeStyle:]
  -[VideosExtrasGridElementViewController setExtraLargeStyle:]
  -[VideosExtrasGridElementViewController wideStyle]
  -[VideosExtrasGridElementViewController setWideStyle:]


_VideosExtrasShelfCollectionViewLayout : UICollectionViewFlowLayout /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  {CGSize=dd} calculatedContentSize

  // instance methods
  -[_VideosExtrasShelfCollectionViewLayout .cxx_destruct]
  -[_VideosExtrasShelfCollectionViewLayout prepareLayout]
  -[_VideosExtrasShelfCollectionViewLayout layoutAttributesForElementsInRect:]
  -[_VideosExtrasShelfCollectionViewLayout collectionViewContentSize]
  -[_VideosExtrasShelfCollectionViewLayout calculatedContentSize]
  -[_VideosExtrasShelfCollectionViewLayout _calculateSizes]


VideosExtrasLoadingView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <IKAppDocumentDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasLoadingView .cxx_destruct]
  -[VideosExtrasLoadingView _show]
  -[VideosExtrasLoadingView documentNeedsUpdate:]
  -[VideosExtrasLoadingView documentDidUpdate:]
  -[VideosExtrasLoadingView initWithDocument:options:delegate:]
  -[VideosExtrasLoadingView startCountdownToVisibilityWithInterval:]
  -[VideosExtrasLoadingView cancelCountdownToVisibility]


VUIAppLoadingViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL loading

  // instance methods
  -[VUIAppLoadingViewController .cxx_destruct]
  -[VUIAppLoadingViewController setView:]
  -[VUIAppLoadingViewController loading]
  -[VUIAppLoadingViewController setLoading:]


AccountCell : PSTableCell /System/Library/PrivateFrameworks/AppleAccountUI.framework/AppleAccountUI
  // class methods
  +[AccountCell cellStyle]

  // instance methods
  -[AccountCell refreshCellContentsWithSpecifier:]


ButtonCell : PSTableCell /System/Library/PrivateFrameworks/AppleAccountUI.framework/AppleAccountUI
  // class methods
  +[ButtonCell cellStyle]

  // instance methods
  -[ButtonCell refreshCellContentsWithSpecifier:]


VUIAccountSettingsViewController : PSListController /System/Library/PrivateFrameworks/AppleAccountUI.framework/AppleAccountUI <UITableViewDataSource, UITextFieldDelegate>
 @property  BOOL authenticationInProgress
 @property  long long watchListAppsCount
 @property  PSSpecifier *credentialsAppleIDSpecifier
 @property  PSSpecifier *credentialsPasswordSpecifier
 @property  PSSpecifier *signInSpecifier
 @property  PSSpecifier *createAccountSpecifier
 @property  UITextField *credentialsAppleIDTextField
 @property  UITextField *credentialsPasswordTextField
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIAccountSettingsViewController init]
  -[VUIAccountSettingsViewController .cxx_destruct]
  -[VUIAccountSettingsViewController viewDidLoad]
  -[VUIAccountSettingsViewController tableView:cellForRowAtIndexPath:]
  -[VUIAccountSettingsViewController _dismissViewController]
  -[VUIAccountSettingsViewController textFieldShouldReturn:]
  -[VUIAccountSettingsViewController textField:shouldChangeCharactersInRange:replacementString:]
  -[VUIAccountSettingsViewController _alertStyle]
  -[VUIAccountSettingsViewController specifiers]
  -[VUIAccountSettingsViewController signInSpecifier]
  -[VUIAccountSettingsViewController setSignInSpecifier:]
  -[VUIAccountSettingsViewController setAuthenticationInProgress:]
  -[VUIAccountSettingsViewController authenticationInProgress]
  -[VUIAccountSettingsViewController _accountSpecifiers]
  -[VUIAccountSettingsViewController _sourcesSpecifiers]
  -[VUIAccountSettingsViewController _externalSpecifiers]
  -[VUIAccountSettingsViewController _clearHistorySpecifiers]
  -[VUIAccountSettingsViewController _signOutSpecifiers]
  -[VUIAccountSettingsViewController _credentialsSpecifiers]
  -[VUIAccountSettingsViewController _signInSpecifiers]
  -[VUIAccountSettingsViewController _createAccountSpecifiers]
  -[VUIAccountSettingsViewController _checkConnectedApps]
  -[VUIAccountSettingsViewController _didSelectSpecifier:]
  -[VUIAccountSettingsViewController _getConnectedAppsCountString]
  -[VUIAccountSettingsViewController _clearPlayHistory:]
  -[VUIAccountSettingsViewController _openiForgotAppleURL]
  -[VUIAccountSettingsViewController watchListAppsCount]
  -[VUIAccountSettingsViewController setWatchListAppsCount:]
  -[VUIAccountSettingsViewController credentialsAppleIDSpecifier]
  -[VUIAccountSettingsViewController setCredentialsAppleIDSpecifier:]
  -[VUIAccountSettingsViewController credentialsPasswordSpecifier]
  -[VUIAccountSettingsViewController setCredentialsPasswordSpecifier:]
  -[VUIAccountSettingsViewController createAccountSpecifier]
  -[VUIAccountSettingsViewController setCreateAccountSpecifier:]
  -[VUIAccountSettingsViewController credentialsAppleIDTextField]
  -[VUIAccountSettingsViewController setCredentialsAppleIDTextField:]
  -[VUIAccountSettingsViewController credentialsPasswordTextField]
  -[VUIAccountSettingsViewController setCredentialsPasswordTextField:]


VUIShareActivityViewController : UIActivityViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSURL *itemImageURL
 @property  NSString *itemTitle
 @property  NSString *itemSubtitle

  // class methods
  +[VUIShareActivityViewController shareMediaItem:title:subtitle:imageURLStr:sourceView:]
  +[VUIShareActivityViewController _prepareShareSheet:applicationActivities:inViewElement:]
  +[VUIShareActivityViewController shareMediaWithShareSheet:]
  +[VUIShareActivityViewController configureViewWithElement:]

  // instance methods
  -[VUIShareActivityViewController .cxx_destruct]
  -[VUIShareActivityViewController initWithActivityItems:applicationActivities:]
  -[VUIShareActivityViewController itemTitle]
  -[VUIShareActivityViewController _prepareActivity:completion:]
  -[VUIShareActivityViewController setItemTitle:]
  -[VUIShareActivityViewController updateWithViewElement:]
  -[VUIShareActivityViewController setItemSubtitle:]
  -[VUIShareActivityViewController setItemImageURL:]
  -[VUIShareActivityViewController itemSubtitle]
  -[VUIShareActivityViewController itemImageURL]


DetailCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[DetailCell initWithStyle:reuseIdentifier:]


VUIDebugMetricsArrayViewController : UITableViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSDictionary *cachedKeysOrder
 @property  NSArray *array

  // instance methods
  -[VUIDebugMetricsArrayViewController init]
  -[VUIDebugMetricsArrayViewController object]
  -[VUIDebugMetricsArrayViewController array]
  -[VUIDebugMetricsArrayViewController setObject:]
  -[VUIDebugMetricsArrayViewController setArray:]
  -[VUIDebugMetricsArrayViewController .cxx_destruct]
  -[VUIDebugMetricsArrayViewController viewDidLoad]
  -[VUIDebugMetricsArrayViewController tableView:numberOfRowsInSection:]
  -[VUIDebugMetricsArrayViewController tableView:cellForRowAtIndexPath:]
  -[VUIDebugMetricsArrayViewController numberOfSectionsInTableView:]
  -[VUIDebugMetricsArrayViewController tableView:didSelectRowAtIndexPath:]
  -[VUIDebugMetricsArrayViewController generateCachedKeys]
  -[VUIDebugMetricsArrayViewController setCachedKeysOrder:]
  -[VUIDebugMetricsArrayViewController cachedKeysOrder]


VUIApplicationRouter : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIApplicationRouter dismissPresentedViewController]
  +[VUIApplicationRouter currentNavigationController]
  +[VUIApplicationRouter handleEvent:targetResponder:viewElement:extraInfo:]
  +[VUIApplicationRouter handleAccountSettingsEvent:urlString:amsBagKey:]
  +[VUIApplicationRouter topPresentedViewController]
  +[VUIApplicationRouter topMostVisibleViewController]
  +[VUIApplicationRouter eventDataSourceForEvent:viewElement:]
  +[VUIApplicationRouter _performForType:targetResponder:viewElement:eventDataSource:]
  +[VUIApplicationRouter _handleDocumentDataSource:targetResponder:viewElement:completion:]
  +[VUIApplicationRouter _handleAccountSettingsPresentationWithViewController:]
  +[VUIApplicationRouter _amsBagURLForKey:withCompletion:]
  +[VUIApplicationRouter _dismissPresentedViewControllerWithCompletion:]
  +[VUIApplicationRouter _viewControllerWithIdentifier:]
  +[VUIApplicationRouter dismissOrPopViewControllerWithId:completion:]
  +[VUIApplicationRouter dismissOrPopLastViewControllerWithCompletion:]


VUIPlistMediaDatabaseShow : VUIPlistMediaDatabaseEntity <NSCopying>
 @property  NSArray *seasons

  // instance methods
  -[VUIPlistMediaDatabaseShow isEqual:]
  -[VUIPlistMediaDatabaseShow copyWithZone:]
  -[VUIPlistMediaDatabaseShow .cxx_destruct]
  -[VUIPlistMediaDatabaseShow initWithDictionary:]
  -[VUIPlistMediaDatabaseShow initWithIdentifier:]
  -[VUIPlistMediaDatabaseShow dictionaryRepresentation]
  -[VUIPlistMediaDatabaseShow isLocal]
  -[VUIPlistMediaDatabaseShow initWithIdentifier:type:]
  -[VUIPlistMediaDatabaseShow seasons]
  -[VUIPlistMediaDatabaseShow setSeasons:]
  -[VUIPlistMediaDatabaseShow seasonForIdentifier:]


VUIAppInstallLockup : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUITextBadge *ageRatingBadge
 @property  UILabel *ageRatingLabel
 @property  UIImage *icon
 @property  NSString *name
 @property  NSString *ageRating
 @property  NSString *iAP
 @property  NSString *subtitle
 @property  VUIAppInstallView *installView
 @property  UIStackView *metadataStackView
 @property  BOOL canFocus

  // instance methods
  -[VUIAppInstallLockup name]
  -[VUIAppInstallLockup .cxx_destruct]
  -[VUIAppInstallLockup setName:]
  -[VUIAppInstallLockup subtitle]
  -[VUIAppInstallLockup initWithFrame:]
  -[VUIAppInstallLockup canBecomeFocused]
  -[VUIAppInstallLockup setSubtitle:]
  -[VUIAppInstallLockup icon]
  -[VUIAppInstallLockup setIcon:]
  -[VUIAppInstallLockup _configureLabels]
  -[VUIAppInstallLockup installView]
  -[VUIAppInstallLockup metadataStackView]
  -[VUIAppInstallLockup setAgeRating:]
  -[VUIAppInstallLockup setIAP:]
  -[VUIAppInstallLockup _layoutForTvos]
  -[VUIAppInstallLockup _layoutForIos]
  -[VUIAppInstallLockup setCanFocus:]
  -[VUIAppInstallLockup ageRatingBadge]
  -[VUIAppInstallLockup ageRatingLabel]
  -[VUIAppInstallLockup _configureAgeRatingBadge]
  -[VUIAppInstallLockup _textColorForDarkMode]
  -[VUIAppInstallLockup ageRating]
  -[VUIAppInstallLockup iAP]
  -[VUIAppInstallLockup setMetadataStackView:]
  -[VUIAppInstallLockup canFocus]
  -[VUIAppInstallLockup setAgeRatingBadge:]
  -[VUIAppInstallLockup setAgeRatingLabel:]


VUIPopoverViewController : _TVBgImageLoadingViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <UITableViewDelegate, UITableViewDataSource>
 @property  long long expandedRow
 @property  NSArray *popoverEntries
 @property  UITableView *tableView
 @property  UIBarButtonItem *cancelButtonItem
 @property  {CGSize=dd} calculatedPreferredContentSize
 @property  VUIPopoverDescriptor *popoverDescriptor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPopoverViewController init]
  -[VUIPopoverViewController dealloc]
  -[VUIPopoverViewController .cxx_destruct]
  -[VUIPopoverViewController loadView]
  -[VUIPopoverViewController traitCollectionDidChange:]
  -[VUIPopoverViewController tableView]
  -[VUIPopoverViewController viewDidLoad]
  -[VUIPopoverViewController _updatePreferredContentSize]
  -[VUIPopoverViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIPopoverViewController tableView:numberOfRowsInSection:]
  -[VUIPopoverViewController tableView:cellForRowAtIndexPath:]
  -[VUIPopoverViewController tableView:estimatedHeightForRowAtIndexPath:]
  -[VUIPopoverViewController tableView:didSelectRowAtIndexPath:]
  -[VUIPopoverViewController _applicationDidEnterBackground:]
  -[VUIPopoverViewController _dismissViewControllerAnimated:]
  -[VUIPopoverViewController initWithViewElement:]
  -[VUIPopoverViewController cancelButtonItem]
  -[VUIPopoverViewController updateWithViewElement:]
  -[VUIPopoverViewController _modalPresenterPresentedViewController]
  -[VUIPopoverViewController _cancelButtonTouchUpInside:]
  -[VUIPopoverViewController setExpandedRow:]
  -[VUIPopoverViewController calculatedPreferredContentSize]
  -[VUIPopoverViewController popoverEntries]
  -[VUIPopoverViewController _heightForOptionAtRow:]
  -[VUIPopoverViewController setPopoverEntries:]
  -[VUIPopoverViewController expandedRow]
  -[VUIPopoverViewController popoverDescriptor]


VUIMenuSectionHeaderCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *titleLabel
 @property  NSString *title

  // instance methods
  -[VUIMenuSectionHeaderCollectionViewCell .cxx_destruct]
  -[VUIMenuSectionHeaderCollectionViewCell title]
  -[VUIMenuSectionHeaderCollectionViewCell setTitle:]
  -[VUIMenuSectionHeaderCollectionViewCell titleLabel]
  -[VUIMenuSectionHeaderCollectionViewCell sizeThatFits:]
  -[VUIMenuSectionHeaderCollectionViewCell layoutSubviews]
  -[VUIMenuSectionHeaderCollectionViewCell setTitleLabel:]
  -[VUIMenuSectionHeaderCollectionViewCell _layoutWithSize:metricsOnly:]


VUIMPMediaEntityIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityIdentifierInternal>
 @property  NSNumber *persistentID
 @property  VUIMediaEntityType *mediaEntityType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMPMediaEntityIdentifier showIdentifierWithMediaItem:]
  +[VUIMPMediaEntityIdentifier mediaItemIdentifierWithMediaItem:]

  // instance methods
  -[VUIMPMediaEntityIdentifier init]
  -[VUIMPMediaEntityIdentifier isEqual:]
  -[VUIMPMediaEntityIdentifier copyWithZone:]
  -[VUIMPMediaEntityIdentifier .cxx_destruct]
  -[VUIMPMediaEntityIdentifier persistentID]
  -[VUIMPMediaEntityIdentifier setPersistentID:]
  -[VUIMPMediaEntityIdentifier setMediaEntityType:]
  -[VUIMPMediaEntityIdentifier mediaEntityType]
  -[VUIMPMediaEntityIdentifier initWithPersistentID:mediaEntityType:]


VUIApplicationViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <_TVInterfaceCreatingPrivate, TVApplicationControllerDelegate, UIGestureRecognizerDelegate>
 @property  TVApplicationController *applicationController
 @property  VUIBootURLController *bootURLController
 @property  UINavigationController *navigationController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIApplicationViewController dealloc]
  -[VUIApplicationViewController .cxx_destruct]
  -[VUIApplicationViewController _launchOptions]
  -[VUIApplicationViewController preferredFocusEnvironments]
  -[VUIApplicationViewController viewDidLoad]
  -[VUIApplicationViewController navigationController]
  -[VUIApplicationViewController setNavigationController:]
  -[VUIApplicationViewController applicationController]
  -[VUIApplicationViewController imageForResource:]
  -[VUIApplicationViewController appController:evaluateAppJavaScriptInContext:]
  -[VUIApplicationViewController appController:didFinishLaunchingWithOptions:]
  -[VUIApplicationViewController appController:didFailWithError:]
  -[VUIApplicationViewController _styleSheetURLForTemplate:]
  -[VUIApplicationViewController URLForResource:]
  -[VUIApplicationViewController _viewForIKElement:existingView:]
  -[VUIApplicationViewController _viewControllerForIKElement:existingViewController:]
  -[VUIApplicationViewController _collectionViewCellClassForIKElement:]
  -[VUIApplicationViewController _parseAppConfigurationForIKElement:]
  -[VUIApplicationViewController _imageProxyForIKElement:withLayout:]
  -[VUIApplicationViewController setApplicationController:]
  -[VUIApplicationViewController setBootURLController:]
  -[VUIApplicationViewController bootURLController]
  -[VUIApplicationViewController _startApplicationControllerWithBootURL:]
  -[VUIApplicationViewController _exposeObjectsInJSContext:]
  -[VUIApplicationViewController _initialViewControllerWithAppContext:]
  -[VUIApplicationViewController _applicationControllerClass]


VUIMediaInfo : TVMediaInfo /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVPPlaylist *tvpPlaylist
 @property  BOOL overridesStartTimeWithResumeTime
 @property  unsigned long playbackStartReason
 @property  BOOL hasProgress
 @property  BOOL showsSecondaryVideoView
 @property  BOOL automaticPlaybackStart
 @property  BOOL automaticPlaybackStop
 @property  unsigned long playbackStopReason
 @property  BOOL restrictionsAlreadyUnlocked
 @property  BOOL shouldDelayLoadingImage
 @property  unsigned long playbackContext
 @property  IKAppContext *appContext
 @property  BOOL allowsPictureInPicture
 @property  double playbackDelayInterval

  // instance methods
  -[VUIMediaInfo init]
  -[VUIMediaInfo isEqual:]
  -[VUIMediaInfo copyWithZone:]
  -[VUIMediaInfo .cxx_destruct]
  -[VUIMediaInfo setAllowsPictureInPicture:]
  -[VUIMediaInfo allowsPictureInPicture]
  -[VUIMediaInfo appContext]
  -[VUIMediaInfo setAppContext:]
  -[VUIMediaInfo playbackContext]
  -[VUIMediaInfo setPlaybackContext:]
  -[VUIMediaInfo hasProgress]
  -[VUIMediaInfo initWithPlaybackContext:vuiMediaItems:]
  -[VUIMediaInfo setUserPlaybackInitiationDate:openURLCompletionDate:]
  -[VUIMediaInfo setAutomaticPlaybackStart:]
  -[VUIMediaInfo initWithPlaybackContext:mpMediaItems:]
  -[VUIMediaInfo initWithPlaybackContext:videosPlayables:imageProxies:storeDictionary:]
  -[VUIMediaInfo _playlistFromVideosPlayables:andStoreDictionary:]
  -[VUIMediaInfo setTvpPlaylist:]
  -[VUIMediaInfo _updatePlaybackStartReason]
  -[VUIMediaInfo tvpPlaylist]
  -[VUIMediaInfo showsSecondaryVideoView]
  -[VUIMediaInfo setShowsSecondaryVideoView:]
  -[VUIMediaInfo restrictionsAlreadyUnlocked]
  -[VUIMediaInfo setRestrictionsAlreadyUnlocked:]
  -[VUIMediaInfo shouldDelayLoadingImage]
  -[VUIMediaInfo setShouldDelayLoadingImage:]
  -[VUIMediaInfo playbackDelayInterval]
  -[VUIMediaInfo setPlaybackDelayInterval:]
  -[VUIMediaInfo setPlaybackStartReason:]
  -[VUIMediaInfo _playbackOverridesForURL:orAdamID:]
  -[VUIMediaInfo _storeMediaItemsFromVideosPlayable:andStoreDictionary:]
  -[VUIMediaInfo _tvpRatingDomainFromUTSRatingDomain:]
  -[VUIMediaInfo _populateMediaItem:withMetadataFromVideosPlayable:]
  -[VUIMediaInfo _auxMediaItemFromVideosPlayable:]
  -[VUIMediaInfo _tvpMediaTypeFromPlayableType:isRental:]
  -[VUIMediaInfo _populateMediaItem:withMetadataOverrides:]
  -[VUIMediaInfo isAutomaticPlaybackStart]
  -[VUIMediaInfo playbackStartReason]
  -[VUIMediaInfo isAutomaticPlaybackStop]
  -[VUIMediaInfo setAutomaticPlaybackStop:]
  -[VUIMediaInfo playbackStopReason]
  -[VUIMediaInfo setPlaybackStopReason:]
  -[VUIMediaInfo overridesStartTimeWithResumeTime]
  -[VUIMediaInfo setOverridesStartTimeWithResumeTime:]
  -[VUIMediaInfo _playlistFromMPMediaItems:]
  -[VUIMediaInfo _storeMediaItemFromMPMediaItem:]
  -[VUIMediaInfo _videoResolutionFromMPVideoQuality:]
  -[VUIMediaInfo _videoDynamimcRangeFromMPColorCapability:]
  -[VUIMediaInfo _playlistForVUIMediaItems:]
  -[VUIMediaInfo initWithBackgroundImageDictionary:]


VUIProductSectionInfoViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  UIView *headerView
 @property  NSArray *dataViews
 @property  VUIProductMetadataLayout *layout

  // class methods
  +[VUIProductSectionInfoViewModel headerViewWithString:layout:existingView:]
  +[VUIProductSectionInfoViewModel headerViewWithImage:layout:existingView:]
  +[VUIProductSectionInfoViewModel dataLabelViewWithString:layout:existingView:]
  +[VUIProductSectionInfoViewModel dataDescriptionViewWithString:maxLine:layout:existingView:]

  // instance methods
  -[VUIProductSectionInfoViewModel .cxx_destruct]
  -[VUIProductSectionInfoViewModel layout]
  -[VUIProductSectionInfoViewModel setLayout:]
  -[VUIProductSectionInfoViewModel headerView]
  -[VUIProductSectionInfoViewModel setHeaderView:]
  -[VUIProductSectionInfoViewModel dataViews]
  -[VUIProductSectionInfoViewModel setDataViews:]


VUIAppDocumentRemovePlayHistoryEvent : VUIAppDocumentUpdateEvent <NSCopying>
 @property  NSSet *removedCanonicalIDs

  // instance methods
  -[VUIAppDocumentRemovePlayHistoryEvent isEqual:]
  -[VUIAppDocumentRemovePlayHistoryEvent copyWithZone:]
  -[VUIAppDocumentRemovePlayHistoryEvent .cxx_destruct]
  -[VUIAppDocumentRemovePlayHistoryEvent dictionaryRepresentation]
  -[VUIAppDocumentRemovePlayHistoryEvent initWithDescriptor:]
  -[VUIAppDocumentRemovePlayHistoryEvent removedCanonicalIDs]
  -[VUIAppDocumentRemovePlayHistoryEvent initWithRemovedCanonicalIDs:]
  -[VUIAppDocumentRemovePlayHistoryEvent setRemovedCanonicalIDs:]


VUIPlistMediaEntityIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityIdentifierInternal>
 @property  NSString *identifier
 @property  VUIMediaEntityType *mediaEntityType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPlistMediaEntityIdentifier init]
  -[VUIPlistMediaEntityIdentifier isEqual:]
  -[VUIPlistMediaEntityIdentifier copyWithZone:]
  -[VUIPlistMediaEntityIdentifier .cxx_destruct]
  -[VUIPlistMediaEntityIdentifier identifier]
  -[VUIPlistMediaEntityIdentifier setIdentifier:]
  -[VUIPlistMediaEntityIdentifier setMediaEntityType:]
  -[VUIPlistMediaEntityIdentifier mediaEntityType]
  -[VUIPlistMediaEntityIdentifier initWithIdentifier:type:]


VUIAppDocumentRefreshEventDescriptor : VUIAppDocumentUpdateEventDescriptor
 @property  unsigned long delayInSeconds
 @property  NSString *name

  // instance methods
  -[VUIAppDocumentRefreshEventDescriptor isEqual:]
  -[VUIAppDocumentRefreshEventDescriptor name]
  -[VUIAppDocumentRefreshEventDescriptor copyWithZone:]
  -[VUIAppDocumentRefreshEventDescriptor .cxx_destruct]
  -[VUIAppDocumentRefreshEventDescriptor setName:]
  -[VUIAppDocumentRefreshEventDescriptor initWithEventType:]
  -[VUIAppDocumentRefreshEventDescriptor delayInSeconds]
  -[VUIAppDocumentRefreshEventDescriptor initWithDelayInSeconds:name:]
  -[VUIAppDocumentRefreshEventDescriptor setDelayInSeconds:]


VUIPlaybackManager : NSObject /usr/lib/libSystem.B.dylib <AVPlayerViewControllerDelegatePrivate, VideosExtrasContextDelegate, VUINowPlayingFeatureMonitorDelegate>
 @property  VUIPlayer *mainPlayer
 @property  VUIPlayer *backgroundAudioPlayer
 @property  VUIPlayer *extrasPlayer
 @property  VUIPlayer *activePlayer
 @property  TVPStateMachine *stateMachine
 @property  VideosExtrasContext *extrasContext
 @property  AVPlayerViewController *avPlayerViewController
 @property  AVPlayerViewController *mainAVPlayerViewController
 @property  AVPlayerViewController *extrasAVPlayerViewController
 @property  UIViewController *presentingViewController
 @property  long long dismissalOperation
 @property  MPAVRoutingController *routingController
 @property  BOOL requiresLinearPlayback
 @property  AVExternalPlaybackController *avExternalPlaybackController
 @property  VideosExtrasPresenter *extrasPresenter
 @property  VUINowPlayingFeatureMonitor *featureMonitor
 @property  UIButton *skipButton
 @property  VUIVideoAdvisoryLogoImageDownloader *logoImageDownloader
 @property  UIImage *ratingImage
 @property  VUIVideoAdvisoryView *ratingView
 @property  BOOL shouldDisplayTVRatingWhenVideoBoundsIsAvailable
 @property  BOOL shouldAnimateTVRatingView
 @property  BOOL isFullscreenPlaybackUIBeingShown
 @property  BOOL isPlaybackUIBeingShown
 @property  BOOL isPIPing
 @property  NSObject<TVPMediaItem> *currentMediaItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIPlaybackManager sharedInstance]
  +[VUIPlaybackManager _shouldWarnStartingRentalPlaybackWindowWithMediaItem:]
  +[VUIPlaybackManager _presentStartingPlaybackWindowWarningWithRentalMediaItem:presentingViewController:completionHandler:]
  +[VUIPlaybackManager _performRatingAndAgeVerificationWithMediaItem:presentingController:completion:]
  +[VUIPlaybackManager _presentCantPlaybackOverCellularAlertControllerWithMediaItem:presentingViewController:completionHandler:]
  +[VUIPlaybackManager _presentCellularPlaybackIsDisabledAlertControllerWithPresentingViewController:completionHandler:]
  +[VUIPlaybackManager _shouldWarnAboutPlaybackQualityForRentalMediaItem:]
  +[VUIPlaybackManager _verifyMediaItemIsPlayableOnCellular:presentingViewController:completionHandler:]
  +[VUIPlaybackManager _showCellularPlaybackQualityOptionsForRentalMediaItem:presentingViewController:completionHandler:]
  +[VUIPlaybackManager _rentalPlaybackStartDateWithMediaItem:]
  +[VUIPlaybackManager preflightPlaybackWithMediaItem:presentingViewController:completionHandler:]

  // instance methods
  -[VUIPlaybackManager init]
  -[VUIPlaybackManager .cxx_destruct]
  -[VUIPlaybackManager observeValueForKeyPath:ofObject:change:context:]
  -[VUIPlaybackManager presentingViewController]
  -[VUIPlaybackManager stateMachine]
  -[VUIPlaybackManager setStateMachine:]
  -[VUIPlaybackManager _handleTapGesture:]
  -[VUIPlaybackManager _applicationWillResignActive:]
  -[VUIPlaybackManager _applicationDidBecomeActive:]
  -[VUIPlaybackManager setPresentingViewController:]
  -[VUIPlaybackManager _applicationDidEnterBackground:]
  -[VUIPlaybackManager _applicationWillEnterForeground:]
  -[VUIPlaybackManager playerViewController:willEndFullScreenPresentationWithAnimationCoordinator:]
  -[VUIPlaybackManager playerViewControllerWillStartPictureInPicture:]
  -[VUIPlaybackManager playerViewControllerDidStartPictureInPicture:]
  -[VUIPlaybackManager playerViewController:failedToStartPictureInPictureWithError:]
  -[VUIPlaybackManager playerViewControllerWillStopPictureInPicture:]
  -[VUIPlaybackManager playerViewControllerDidStopPictureInPicture:]
  -[VUIPlaybackManager playerViewController:restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:]
  -[VUIPlaybackManager avPlayerViewController]
  -[VUIPlaybackManager routingController]
  -[VUIPlaybackManager setRequiresLinearPlayback:]
  -[VUIPlaybackManager requiresLinearPlayback]
  -[VUIPlaybackManager playerViewController:contentViewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIPlaybackManager currentMediaItem]
  -[VUIPlaybackManager ratingView]
  -[VUIPlaybackManager setRatingView:]
  -[VUIPlaybackManager setSkipButton:]
  -[VUIPlaybackManager skipButton]
  -[VUIPlaybackManager _skipButtonTapped:]
  -[VUIPlaybackManager activePlayer]
  -[VUIPlaybackManager setRoutingController:]
  -[VUIPlaybackManager _registerStateMachineHandlers]
  -[VUIPlaybackManager isPlaybackUIBeingShown]
  -[VUIPlaybackManager dismissPlaybackAnimated:completion:]
  -[VUIPlaybackManager _currentMediaItemDidChange:]
  -[VUIPlaybackManager extrasRequestsMediaPlayback:isBackground:]
  -[VUIPlaybackManager extrasContext]
  -[VUIPlaybackManager setExtrasContext:]
  -[VUIPlaybackManager extrasRequestReloadWithContext:]
  -[VUIPlaybackManager _registerApplicationNotifications]
  -[VUIPlaybackManager mainPlayer]
  -[VUIPlaybackManager mainAVPlayerViewController]
  -[VUIPlaybackManager extrasPlayer]
  -[VUIPlaybackManager extrasAVPlayerViewController]
  -[VUIPlaybackManager _notifyAVPlayerViewControllerDisplaySize]
  -[VUIPlaybackManager _showOrUpdateTVRatingIfNeeded]
  -[VUIPlaybackManager _configureStillWatchingFeatureMonitoringIfLivePlayback]
  -[VUIPlaybackManager avExternalPlaybackController]
  -[VUIPlaybackManager setAvExternalPlaybackController:]
  -[VUIPlaybackManager _setExtrasButtonVisible:]
  -[VUIPlaybackManager _updateRequiresLinearPlayback]
  -[VUIPlaybackManager featureMonitor]
  -[VUIPlaybackManager _updateTimeBoundFeature:animated:]
  -[VUIPlaybackManager _updateTimeTriggeredFeature:animated:]
  -[VUIPlaybackManager _downloadRatingImageIfAvailable:]
  -[VUIPlaybackManager _addRollsInfoFeaturesFromMediaItem:]
  -[VUIPlaybackManager _addSkipInfoFeaturesFromMediaItem:]
  -[VUIPlaybackManager ratingImage]
  -[VUIPlaybackManager logoImageDownloader]
  -[VUIPlaybackManager setRatingImage:]
  -[VUIPlaybackManager _addTVRatingFeatureFromMediaItem:]
  -[VUIPlaybackManager _showTVRating:withImage:animated:]
  -[VUIPlaybackManager _showSkipButtonWithTitle:show:animated:]
  -[VUIPlaybackManager shouldDisplayTVRatingWhenVideoBoundsIsAvailable]
  -[VUIPlaybackManager shouldAnimateTVRatingView]
  -[VUIPlaybackManager setShouldDisplayTVRatingWhenVideoBoundsIsAvailable:]
  -[VUIPlaybackManager setShouldAnimateTVRatingView:]
  -[VUIPlaybackManager _addTappableViewToRemoveSkipButton]
  -[VUIPlaybackManager _removeTappableViewForSkipButtonIfNeeded]
  -[VUIPlaybackManager _stillWatchingAlertDurationOverride]
  -[VUIPlaybackManager _showStillWatchingAlertFeature:]
  -[VUIPlaybackManager setAvPlayerViewController:]
  -[VUIPlaybackManager setExtrasAVPlayerViewController:]
  -[VUIPlaybackManager _playbackStateDidChange:]
  -[VUIPlaybackManager _playbackErrorDidOccur:]
  -[VUIPlaybackManager _externalPlaybackTypeDidChange:]
  -[VUIPlaybackManager _networkReachbilityDidChange:]
  -[VUIPlaybackManager backgroundAudioPlayer]
  -[VUIPlaybackManager setBackgroundAudioPlayer:]
  -[VUIPlaybackManager setActivePlayer:]
  -[VUIPlaybackManager setMainPlayer:]
  -[VUIPlaybackManager setExtrasPlayer:]
  -[VUIPlaybackManager dismissalOperation]
  -[VUIPlaybackManager setDismissalOperation:]
  -[VUIPlaybackManager extrasPresenter]
  -[VUIPlaybackManager setExtrasPresenter:]
  -[VUIPlaybackManager setFeatureMonitor:]
  -[VUIPlaybackManager setLogoImageDownloader:]
  -[VUIPlaybackManager _avPlayerViewControllerPresentationDidTimeout]
  -[VUIPlaybackManager setMainAVPlayerViewController:]
  -[VUIPlaybackManager _updateStopWhenBackgroundedFeatureForApplicationState:isFullScreen:]
  -[VUIPlaybackManager _updateRollsInfoFromMainPlayersCurrentMediaItem]
  -[VUIPlaybackManager extrasRequestsPlaybackStop]
  -[VUIPlaybackManager extrasDoneButtonPressed]
  -[VUIPlaybackManager extrasMenuItemSelected:atIndex:]
  -[VUIPlaybackManager extrasBackButtonPressed]
  -[VUIPlaybackManager extrasContext:hadFatalError:]
  -[VUIPlaybackManager extrasContextDidLoadMainMenuItems:]
  -[VUIPlaybackManager extrasContext:extrasVisibilityNeedsUpdate:]
  -[VUIPlaybackManager featureMonitor:featureDidChangeState:animated:]
  -[VUIPlaybackManager presentPlaylist:fromViewController:dismissalOperation:animated:completion:]
  -[VUIPlaybackManager presentExtrasWithURL:storeID:actionParams:fromViewController:completion:]
  -[VUIPlaybackManager isFullscreenPlaybackUIBeingShown]
  -[VUIPlaybackManager isPIPing]


VUIActionLocationPrompt : VUIAction
 @property  @? completionHandler
 @property  BOOL geoLocationEnforced
 @property  NSDictionary *dialogMetrics

  // instance methods
  -[VUIActionLocationPrompt .cxx_destruct]
  -[VUIActionLocationPrompt completionHandler]
  -[VUIActionLocationPrompt setCompletionHandler:]
  -[VUIActionLocationPrompt performWithTargetResponder:completionHandler:]
  -[VUIActionLocationPrompt initWithContextData:]
  -[VUIActionLocationPrompt _locationAuthorizationStatusDidChange:]
  -[VUIActionLocationPrompt dialogMetrics]
  -[VUIActionLocationPrompt geoLocationEnforced]
  -[VUIActionLocationPrompt setGeoLocationEnforced:]
  -[VUIActionLocationPrompt setDialogMetrics:]


VUIJSOfferInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSOfferManageInterface>
  // instance methods
  -[VUIJSOfferInterface clearOffers:]
  -[VUIJSOfferInterface saveOffer::]
  -[VUIJSOfferInterface fetchOffers::]


VUIMediaLibraryFetchControllerQueue : NSObject /usr/lib/libSystem.B.dylib <VUINowPlayingObserverDelegate>
 @property  NSMutableArray *mutableFetchControllers
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  VUIMediaLibrary *mediaLibrary
 @property  BOOL paused
 @property  BOOL shouldFetchOnResume
 @property  unsigned long mediaLibraryRevision
 @property  VUIMediaLibraryFetchControllerQueueOperation *currentFetchOperation
 @property  VUIDelayOperation *delayContentsChangeOperation
 @property  NSOperationQueue *serialFetchOperationQueue
 @property  VUINowPlayingObserver *nowPlayingObserver
 @property  <VUIMediaLibraryFetchControllerQueueDelegate> *delegate
 @property  NSArray *fetchControllers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMediaLibraryFetchControllerQueue defaultQueueWithMediaLibrary:]

  // instance methods
  -[VUIMediaLibraryFetchControllerQueue init]
  -[VUIMediaLibraryFetchControllerQueue dealloc]
  -[VUIMediaLibraryFetchControllerQueue delegate]
  -[VUIMediaLibraryFetchControllerQueue setDelegate:]
  -[VUIMediaLibraryFetchControllerQueue .cxx_destruct]
  -[VUIMediaLibraryFetchControllerQueue observeValueForKeyPath:ofObject:change:context:]
  -[VUIMediaLibraryFetchControllerQueue isPaused]
  -[VUIMediaLibraryFetchControllerQueue setPaused:]
  -[VUIMediaLibraryFetchControllerQueue mediaLibrary]
  -[VUIMediaLibraryFetchControllerQueue setMediaLibrary:]
  -[VUIMediaLibraryFetchControllerQueue pauseFetching]
  -[VUIMediaLibraryFetchControllerQueue resumeFetching]
  -[VUIMediaLibraryFetchControllerQueue initWithMediaLibrary:]
  -[VUIMediaLibraryFetchControllerQueue serialProcessingDispatchQueue]
  -[VUIMediaLibraryFetchControllerQueue setSerialProcessingDispatchQueue:]
  -[VUIMediaLibraryFetchControllerQueue removeFetchController:]
  -[VUIMediaLibraryFetchControllerQueue addFetchController:]
  -[VUIMediaLibraryFetchControllerQueue fetchControllers]
  -[VUIMediaLibraryFetchControllerQueue mediaLibraryRevision]
  -[VUIMediaLibraryFetchControllerQueue setMediaLibraryRevision:]
  -[VUIMediaLibraryFetchControllerQueue _handleMediaLibraryContentsDidChangeNotification:]
  -[VUIMediaLibraryFetchControllerQueue _removeStateObserverForFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueue mutableFetchControllers]
  -[VUIMediaLibraryFetchControllerQueue _enqueueSyncProcessingQueueBlock:]
  -[VUIMediaLibraryFetchControllerQueue addFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueue _addStateObserverForFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueue _enqueueControllerFetchOperation]
  -[VUIMediaLibraryFetchControllerQueue removeFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueue _enqueueAsyncProcessingQueueBlock:]
  -[VUIMediaLibraryFetchControllerQueue _handleMediaLibraryContentsChange]
  -[VUIMediaLibraryFetchControllerQueue delayContentsChangeOperation]
  -[VUIMediaLibraryFetchControllerQueue _delayContentsChangeOperationDidComplete:]
  -[VUIMediaLibraryFetchControllerQueue setDelayContentsChangeOperation:]
  -[VUIMediaLibraryFetchControllerQueue currentFetchOperation]
  -[VUIMediaLibraryFetchControllerQueue setCurrentFetchOperation:]
  -[VUIMediaLibraryFetchControllerQueue _notifyDelegateFetchDidComplete]
  -[VUIMediaLibraryFetchControllerQueue setShouldFetchOnResume:]
  -[VUIMediaLibraryFetchControllerQueue _queueOperationDidComplete:]
  -[VUIMediaLibraryFetchControllerQueue serialFetchOperationQueue]
  -[VUIMediaLibraryFetchControllerQueue shouldFetchOnResume]
  -[VUIMediaLibraryFetchControllerQueue nowPlayingObserver:latestObservationDidChange:]
  -[VUIMediaLibraryFetchControllerQueue _enqueueProcessingQueueBlock:synchronous:]
  -[VUIMediaLibraryFetchControllerQueue setMutableFetchControllers:]
  -[VUIMediaLibraryFetchControllerQueue setSerialFetchOperationQueue:]
  -[VUIMediaLibraryFetchControllerQueue nowPlayingObserver]
  -[VUIMediaLibraryFetchControllerQueue setNowPlayingObserver:]


VUIDebugMetricsImpression : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *mainValues
 @property  NSDictionary *otherValues
 @property  NSArray *orderedOtherKeys
 @property  NSString *name
 @property  NSString *type
 @property  NSString *identifier
 @property  NSString *idType
 @property  NSString *impressionId
 @property  NSString *impressionIndex
 @property  NSString *parentId

  // instance methods
  -[VUIDebugMetricsImpression name]
  -[VUIDebugMetricsImpression type]
  -[VUIDebugMetricsImpression objectForKeyedSubscript:]
  -[VUIDebugMetricsImpression .cxx_destruct]
  -[VUIDebugMetricsImpression initWithDictionary:]
  -[VUIDebugMetricsImpression identifier]
  -[VUIDebugMetricsImpression impressionId]
  -[VUIDebugMetricsImpression parentId]
  -[VUIDebugMetricsImpression idType]
  -[VUIDebugMetricsImpression impressionIndex]
  -[VUIDebugMetricsImpression orderedOtherKeys]
  -[VUIDebugMetricsImpression setOrderedOtherKeys:]
  -[VUIDebugMetricsImpression mainValues]
  -[VUIDebugMetricsImpression setMainValues:]
  -[VUIDebugMetricsImpression otherValues]
  -[VUIDebugMetricsImpression setOtherValues:]


VUIMPMediaLibraryIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaLibraryIdentifier>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIMPMediaLibraryIdentifier init]
  -[VUIMPMediaLibraryIdentifier isEqual:]
  -[VUIMPMediaLibraryIdentifier copyWithZone:]
  -[VUIMPMediaLibraryIdentifier .cxx_destruct]
  -[VUIMPMediaLibraryIdentifier identifier]
  -[VUIMPMediaLibraryIdentifier setIdentifier:]
  -[VUIMPMediaLibraryIdentifier initWithIdentifier:]


VUIProductSectionView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *defaultFocusView
 @property  VUILabel *prototypeInfoHeaderLabel
 @property  VUIProductMetadataLayout *layout
 @property  VUILabel *headerView
 @property  NSArray *infoViews
 @property  UIView *footerView

  // class methods
  +[VUIProductSectionView headerViewWithString:layout:existingView:]
  +[VUIProductSectionView footerLabelWithString:layout:existingView:]
  +[VUIProductSectionView footerDescriptionWithString:layout:maxLine:existingView:]

  // instance methods
  -[VUIProductSectionView .cxx_destruct]
  -[VUIProductSectionView layout]
  -[VUIProductSectionView setLayout:]
  -[VUIProductSectionView preferredFocusEnvironments]
  -[VUIProductSectionView canBecomeFocused]
  -[VUIProductSectionView sizeThatFits:]
  -[VUIProductSectionView layoutSubviews]
  -[VUIProductSectionView headerView]
  -[VUIProductSectionView setHeaderView:]
  -[VUIProductSectionView footerView]
  -[VUIProductSectionView setFooterView:]
  -[VUIProductSectionView infoViews]
  -[VUIProductSectionView setInfoViews:]
  -[VUIProductSectionView setDefaultFocusView:]
  -[VUIProductSectionView defaultFocusView]
  -[VUIProductSectionView prototypeInfoHeaderLabel]
  -[VUIProductSectionView setPrototypeInfoHeaderLabel:]


_VUIAccessViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  @? completionHandler

  // class methods
  +[_VUIAccessViewController _isHostedInRemoteViewService]

  // instance methods
  -[_VUIAccessViewController init]
  -[_VUIAccessViewController dealloc]
  -[_VUIAccessViewController .cxx_destruct]
  -[_VUIAccessViewController _init]
  -[_VUIAccessViewController completionHandler]
  -[_VUIAccessViewController setCompletionHandler:]
  -[_VUIAccessViewController preferredFocusEnvironments]
  -[_VUIAccessViewController viewDidLoad]
  -[_VUIAccessViewController viewDidAppear:]
  -[_VUIAccessViewController _handleMenuGesture:]
  -[_VUIAccessViewController cappedTraitCollection]
  -[_VUIAccessViewController _watchListAppIcon]
  -[_VUIAccessViewController _imageForBundleID:]
  -[_VUIAccessViewController _fetchRemoteAppInfo]
  -[_VUIAccessViewController _setupAccessViews]
  -[_VUIAccessViewController _toggleLoadingScreen]
  -[_VUIAccessViewController _presentGenericErrorWithCompletion:]
  -[_VUIAccessViewController _allow:]
  -[_VUIAccessViewController _disallow:]
  -[_VUIAccessViewController _handleSeeAllButton:]
  -[_VUIAccessViewController _handleNackButton:]
  -[_VUIAccessViewController initWithBundleIDs:channels:options:completionHandler:]


VUIAccessViewController : UINavigationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIViewControllerTransitioningDelegate>
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAccessViewController resolveBundleIDs:completionHandler:]
  +[VUIAccessViewController _grantAccessToChannelIDs:isReconsent:]
  +[VUIAccessViewController _grantAccessToBundleIDs:]
  +[VUIAccessViewController optInUser]
  +[VUIAccessViewController grantAccessToBundleIDs:]
  +[VUIAccessViewController eligibleBundleIDs]

  // instance methods
  -[VUIAccessViewController .cxx_destruct]
  -[VUIAccessViewController completionHandler]
  -[VUIAccessViewController setCompletionHandler:]
  -[VUIAccessViewController supportedInterfaceOrientations]
  -[VUIAccessViewController initWithBundleIDs:options:completionHandler:]
  -[VUIAccessViewController initWithChannels:options:completionHandler:]


VUISecureInvalidationManager : NSObject /usr/lib/libSystem.B.dylib <VUIStoreFPSKeyLoaderDelegate>
 @property  TVPStateMachine *stateMachine
 @property  NSMutableArray *keyLoaders
 @property  NSMutableSet *penaltyBox
 @property  BOOL networkErrorOccurredDuringInvalidation
 @property  unsigned long backgroundTaskIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUISecureInvalidationManager sharedInstance]

  // instance methods
  -[VUISecureInvalidationManager init]
  -[VUISecureInvalidationManager dealloc]
  -[VUISecureInvalidationManager .cxx_destruct]
  -[VUISecureInvalidationManager stateMachine]
  -[VUISecureInvalidationManager setStateMachine:]
  -[VUISecureInvalidationManager setBackgroundTaskIdentifier:]
  -[VUISecureInvalidationManager backgroundTaskIdentifier]
  -[VUISecureInvalidationManager penaltyBox]
  -[VUISecureInvalidationManager setPenaltyBox:]
  -[VUISecureInvalidationManager _registerStateMachineHandlers]
  -[VUISecureInvalidationManager storeFPSKeyLoader:shouldKeyRequestContinueInvalidationAfterLoadingNonce:]
  -[VUISecureInvalidationManager invalidateKeysForDeletedVideos]
  -[VUISecureInvalidationManager removeDeletionInfoFromPenaltyBox:]
  -[VUISecureInvalidationManager _networkReachbilityDidChange:]
  -[VUISecureInvalidationManager _validateParamsForDeletionInfo:]
  -[VUISecureInvalidationManager _sendInvalidationRequestsForDeletionInfoArrays:completion:]
  -[VUISecureInvalidationManager _sendInvalidationRequestsForFirstArray:completion:]
  -[VUISecureInvalidationManager _getParamsForDeletionInfo:keyServerURL:nonceURL:keyIdentifier:offlineKeyData:dsid:additionalRequestParams:contentID:]
  -[VUISecureInvalidationManager keyLoaders]
  -[VUISecureInvalidationManager _invalidateKeysForDeletedVideos]
  -[VUISecureInvalidationManager setNetworkErrorOccurredDuringInvalidation:]
  -[VUISecureInvalidationManager networkErrorOccurredDuringInvalidation]
  -[VUISecureInvalidationManager setKeyLoaders:]


VUIDebugMetricsImpressionTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *nameLabel
 @property  VUILabel *typeLabel
 @property  VUILabel *staticIDLabel
 @property  VUILabel *idLabel
 @property  VUILabel *idTypeLabel
 @property  VUILabel *staticImpressionIdLabel
 @property  VUILabel *impressionIdLabel
 @property  VUILabel *staticImpressionIndexLabel
 @property  VUILabel *impressionIndexLabel
 @property  VUILabel *staticImpressionParentLabel
 @property  VUILabel *impressionParentIdLabel
 @property  VUILabel *impressionParentNameLabel
 @property  NSString *name
 @property  NSString *type
 @property  NSString *idStr
 @property  NSString *idType
 @property  NSString *impressionId
 @property  NSString *impressionIndex
 @property  NSString *impressionParentId
 @property  NSString *impressionParentName

  // instance methods
  -[VUIDebugMetricsImpressionTableViewCell name]
  -[VUIDebugMetricsImpressionTableViewCell type]
  -[VUIDebugMetricsImpressionTableViewCell setType:]
  -[VUIDebugMetricsImpressionTableViewCell .cxx_destruct]
  -[VUIDebugMetricsImpressionTableViewCell setName:]
  -[VUIDebugMetricsImpressionTableViewCell prepareForReuse]
  -[VUIDebugMetricsImpressionTableViewCell layoutSubviews]
  -[VUIDebugMetricsImpressionTableViewCell initWithStyle:reuseIdentifier:]
  -[VUIDebugMetricsImpressionTableViewCell setNameLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setTypeLabel:]
  -[VUIDebugMetricsImpressionTableViewCell nameLabel]
  -[VUIDebugMetricsImpressionTableViewCell typeLabel]
  -[VUIDebugMetricsImpressionTableViewCell impressionId]
  -[VUIDebugMetricsImpressionTableViewCell idType]
  -[VUIDebugMetricsImpressionTableViewCell impressionIndex]
  -[VUIDebugMetricsImpressionTableViewCell idLabel]
  -[VUIDebugMetricsImpressionTableViewCell idTypeLabel]
  -[VUIDebugMetricsImpressionTableViewCell impressionIdLabel]
  -[VUIDebugMetricsImpressionTableViewCell impressionIndexLabel]
  -[VUIDebugMetricsImpressionTableViewCell impressionParentIdLabel]
  -[VUIDebugMetricsImpressionTableViewCell impressionParentNameLabel]
  -[VUIDebugMetricsImpressionTableViewCell idStr]
  -[VUIDebugMetricsImpressionTableViewCell setIdStr:]
  -[VUIDebugMetricsImpressionTableViewCell setIdType:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionId:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionIndex:]
  -[VUIDebugMetricsImpressionTableViewCell impressionParentId]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionParentId:]
  -[VUIDebugMetricsImpressionTableViewCell impressionParentName]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionParentName:]
  -[VUIDebugMetricsImpressionTableViewCell staticIDLabel]
  -[VUIDebugMetricsImpressionTableViewCell setStaticIDLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setIdLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setIdTypeLabel:]
  -[VUIDebugMetricsImpressionTableViewCell staticImpressionIdLabel]
  -[VUIDebugMetricsImpressionTableViewCell setStaticImpressionIdLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionIdLabel:]
  -[VUIDebugMetricsImpressionTableViewCell staticImpressionIndexLabel]
  -[VUIDebugMetricsImpressionTableViewCell setStaticImpressionIndexLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionIndexLabel:]
  -[VUIDebugMetricsImpressionTableViewCell staticImpressionParentLabel]
  -[VUIDebugMetricsImpressionTableViewCell setStaticImpressionParentLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionParentIdLabel:]
  -[VUIDebugMetricsImpressionTableViewCell setImpressionParentNameLabel:]


VideosExtrasDetailTextCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasDetailTextCell dealloc]
  -[VideosExtrasDetailTextCell .cxx_destruct]
  -[VideosExtrasDetailTextCell initWithFrame:]
  -[VideosExtrasDetailTextCell sizeThatFits:]
  -[VideosExtrasDetailTextCell _dynamicTypeDidChange]
  -[VideosExtrasDetailTextCell configureForTextElement:style:]


VUIMediaEntityPreflightManager : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMediaEntityPreflightManager defaultManager]

  // instance methods
  -[VUIMediaEntityPreflightManager _shouldWarnStartingRentalPlaybackWindowWithMediaItem:]
  -[VUIMediaEntityPreflightManager _presentStartingPlaybackWindowWarningWithRentalMediaItem:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _presentCantPlaybackOverCellularAlertControllerWithMediaItem:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _verifyMediaItemIsPlayableOnCellular:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _preflightPlaybackWithMediaItem:disableLocalAsset:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _isOnWiFi]
  -[VUIMediaEntityPreflightManager _isOnCellular]
  -[VUIMediaEntityPreflightManager _presentCellularPlaybackIsDisabledAlertControllerWithMediaItem:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _determineCellularPlaybackQualityForRentalMediaItem:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _isMediaItemPlayableOnCellular:]
  -[VUIMediaEntityPreflightManager _isRemainingTimeLeftWithinRentalPlaybackWindowWithMediaItem:]
  -[VUIMediaEntityPreflightManager preflightPlaybackWithMediaItem:disableLocalAsset:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _preflightDownloadWithMediaEntityType:presentingViewController:completionHandler:]
  -[VUIMediaEntityPreflightManager _preflightPlaybackWithMediaItem:presentingViewController:completionHandler:]


VUIScorecardView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL didCalculatedSize
 @property  {CGSize=dd} scorecardSize
 @property  double interitemSpacing
 @property  NSArray *rowScoreValueSizes
 @property  NSArray *columnWidths
 @property  NSArray *rowHeights
 @property  UIImage *darkMaterialImage
 @property  BOOL delegateRespondsToBackgroundImageForScorecardViewMaterial
 @property  BOOL delegateRespondsToBackgroundBlendModeForScoreValueInRowAtIndex
 @property  <VUIScorecardViewDelegate> *delegate
 @property  VUIScoreboardLayout *scoreboardLayout

  // instance methods
  -[VUIScorecardView delegate]
  -[VUIScorecardView setDelegate:]
  -[VUIScorecardView .cxx_destruct]
  -[VUIScorecardView sizeThatFits:]
  -[VUIScorecardView drawRect:]
  -[VUIScorecardView columnWidths]
  -[VUIScorecardView setColumnWidths:]
  -[VUIScorecardView interitemSpacing]
  -[VUIScorecardView setInteritemSpacing:]
  -[VUIScorecardView rowHeights]
  -[VUIScorecardView setRowHeights:]
  -[VUIScorecardView invalidateData]
  -[VUIScorecardView scoreboardLayout]
  -[VUIScorecardView setScoreboardLayout:]
  -[VUIScorecardView _calculateMetricsOfScorecard]
  -[VUIScorecardView _calculateColumnSpacing]
  -[VUIScorecardView didCalculatedSize]
  -[VUIScorecardView setDidCalculatedSize:]
  -[VUIScorecardView scorecardSize]
  -[VUIScorecardView setScorecardSize:]
  -[VUIScorecardView rowScoreValueSizes]
  -[VUIScorecardView setRowScoreValueSizes:]
  -[VUIScorecardView darkMaterialImage]
  -[VUIScorecardView setDarkMaterialImage:]
  -[VUIScorecardView delegateRespondsToBackgroundImageForScorecardViewMaterial]
  -[VUIScorecardView setDelegateRespondsToBackgroundImageForScorecardViewMaterial:]
  -[VUIScorecardView delegateRespondsToBackgroundBlendModeForScoreValueInRowAtIndex]
  -[VUIScorecardView setDelegateRespondsToBackgroundBlendModeForScoreValueInRowAtIndex:]


VUISportsScoreboardViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *canonicalId
 @property  NSDictionary *leagueContext
 @property  NSArray *scores
 @property  BOOL showScoreboard

  // instance methods
  -[VUISportsScoreboardViewModel .cxx_destruct]
  -[VUISportsScoreboardViewModel initWithDictionary:]
  -[VUISportsScoreboardViewModel canonicalId]
  -[VUISportsScoreboardViewModel scores]
  -[VUISportsScoreboardViewModel jsContextDictionary]
  -[VUISportsScoreboardViewModel showScoreboard]
  -[VUISportsScoreboardViewModel leagueContext]


VUIMediaItem : VUIMediaEntity
 @property  MPMediaItem *mediaPlayerMediaItem
 @property  NSNumber *assetType
 @property  NSNumber *isPlayable
 @property  NSNumber *duration
 @property  NSString *previewFrameImageIdentifier
 @property  NSURL *extrasURL
 @property  NSString *seasonTitle
 @property  NSObject<VUIMediaEntityIdentifier> *seasonIdentifier
 @property  NSNumber *episodeNumber
 @property  NSString *studio
 @property  VUIMediaItemCredits *credits
 @property  NSNumber *rentalPlaybackDuration
 @property  NSDate *rentalExpirationDate
 @property  NSDate *downloadExpirationDate
 @property  NSNumber *hasBeenPlayed
 @property  NSNumber *playCount
 @property  NSNumber *bookmark

  // class methods
  +[VUIMediaItem automaticallyNotifiesObserversForKey:]
  +[VUIMediaItem _mediaItemWithMPMediaItem:]
  +[VUIMediaItem keyPathsForValuesAffectingPlayedState]

  // instance methods
  -[VUIMediaItem .cxx_destruct]
  -[VUIMediaItem duration]
  -[VUIMediaItem creationDate]
  -[VUIMediaItem bookmark]
  -[VUIMediaItem setBookmark:]
  -[VUIMediaItem assetType]
  -[VUIMediaItem isPlayable]
  -[VUIMediaItem playCount]
  -[VUIMediaItem setPlayCount:]
  -[VUIMediaItem lastPlayedDate]
  -[VUIMediaItem hasBeenPlayed]
  -[VUIMediaItem setHasBeenPlayed:]
  -[VUIMediaItem episodeNumber]
  -[VUIMediaItem credits]
  -[VUIMediaItem modifiedDate]
  -[VUIMediaItem extrasURL]
  -[VUIMediaItem studio]
  -[VUIMediaItem rentalExpirationDate]
  -[VUIMediaItem rentalPlaybackDuration]
  -[VUIMediaItem mediaPlayerMediaItem]
  -[VUIMediaItem seasonTitle]
  -[VUIMediaItem downloadExpirationDate]
  -[VUIMediaItem previewFrameImageIdentifier]
  -[VUIMediaItem seasonIdentifier]


VUIAirTrafficController : NSObject /usr/lib/libSystem.B.dylib <ATConnectionDelegate>
 @property  ATConnection *connection
 @property  NSObject<OS_dispatch_queue> *connectionQueue
 @property  NSMutableSet *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAirTrafficController defaultController]

  // instance methods
  -[VUIAirTrafficController init]
  -[VUIAirTrafficController .cxx_destruct]
  -[VUIAirTrafficController addObserver:]
  -[VUIAirTrafficController removeObserver:]
  -[VUIAirTrafficController connection]
  -[VUIAirTrafficController setConnection:]
  -[VUIAirTrafficController connectionQueue]
  -[VUIAirTrafficController setObservers:]
  -[VUIAirTrafficController observers]
  -[VUIAirTrafficController removeAllObservers]
  -[VUIAirTrafficController setConnectionQueue:]
  -[VUIAirTrafficController connection:updatedProgress:]
  -[VUIAirTrafficController _onConnectionQueue_startObservingIfIdle]
  -[VUIAirTrafficController _onConnectionQueue_stopObservingIfIdle]


VideosExtrasLockupElementViewController : VideosExtrasViewElementViewController
 @property  IKLockupElement *viewElement
 @property  NSString *descriptionTextStyle

  // instance methods
  -[VideosExtrasLockupElementViewController .cxx_destruct]
  -[VideosExtrasLockupElementViewController viewWillAppear:]
  -[VideosExtrasLockupElementViewController viewDidLoad]
  -[VideosExtrasLockupElementViewController initWithViewElement:]
  -[VideosExtrasLockupElementViewController _handlePress:]
  -[VideosExtrasLockupElementViewController _prepareLayout]
  -[VideosExtrasLockupElementViewController descriptionTextStyle]
  -[VideosExtrasLockupElementViewController _configureTitleLabelForTextElement:]
  -[VideosExtrasLockupElementViewController _configureSubtitleLabelForTextElement:]
  -[VideosExtrasLockupElementViewController _configureDescriptionLabelForTextElement:]
  -[VideosExtrasLockupElementViewController _configureArtworkViewForImageElement:overlays:]


VUIFeedbackViewCell : VUIFocusableCollectionViewCell
 @property  IKViewElement *viewElement
 @property  VUIFeedbackView *cardView

  // class methods
  +[VUIFeedbackViewCell configureViewWithElement:existingCell:]

  // instance methods
  -[VUIFeedbackViewCell .cxx_destruct]
  -[VUIFeedbackViewCell prepareForReuse]
  -[VUIFeedbackViewCell initWithFrame:]
  -[VUIFeedbackViewCell sizeThatFits:]
  -[VUIFeedbackViewCell layoutSubviews]
  -[VUIFeedbackViewCell cardView]
  -[VUIFeedbackViewCell setCardView:]
  -[VUIFeedbackViewCell viewElement]
  -[VUIFeedbackViewCell setViewElement:]
  -[VUIFeedbackViewCell _setupElements:inCardView:]


VideosExtrasBackgroundViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSArray *backgroundElements
 @property  unsigned long vignetteType

  // class methods
  +[VideosExtrasBackgroundViewController vignetteImageForType:]

  // instance methods
  -[VideosExtrasBackgroundViewController dealloc]
  -[VideosExtrasBackgroundViewController .cxx_destruct]
  -[VideosExtrasBackgroundViewController _invalidateTimer]
  -[VideosExtrasBackgroundViewController viewWillDisappear:]
  -[VideosExtrasBackgroundViewController viewDidLoad]
  -[VideosExtrasBackgroundViewController viewDidAppear:]
  -[VideosExtrasBackgroundViewController _updateImage]
  -[VideosExtrasBackgroundViewController setVignetteType:]
  -[VideosExtrasBackgroundViewController _initVignette]
  -[VideosExtrasBackgroundViewController _scheduleTimerIfNeeded]
  -[VideosExtrasBackgroundViewController _didReceiveImage:]
  -[VideosExtrasBackgroundViewController _updateConstraintsForImageSize:position:]
  -[VideosExtrasBackgroundViewController initWithBackgroundElement:]
  -[VideosExtrasBackgroundViewController initWithBackgroundElements:]
  -[VideosExtrasBackgroundViewController backgroundElements]
  -[VideosExtrasBackgroundViewController vignetteType]


VUIProductView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VUIProductView sizeThatFits:]


VUIProductBannerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIProductUberBackgroundInterface, TVAppTemplateImpressionable>
 @property  VUIProductUberBackgroundView *uberBackgroundView
 @property  VUIProductBannerView *bannerView
 @property  IKViewElement *viewElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isUberLayoutActive
 @property  {CGSize=dd} size
 @property  double topThreshold

  // instance methods
  -[VUIProductBannerViewController .cxx_destruct]
  -[VUIProductBannerViewController size]
  -[VUIProductBannerViewController loadView]
  -[VUIProductBannerViewController initWithNibName:bundle:]
  -[VUIProductBannerViewController viewDidLoad]
  -[VUIProductBannerViewController viewDidLayoutSubviews]
  -[VUIProductBannerViewController bannerView]
  -[VUIProductBannerViewController setBannerView:]
  -[VUIProductBannerViewController viewElement]
  -[VUIProductBannerViewController setViewElement:]
  -[VUIProductBannerViewController impressionableElementsContainedInDocument:]
  -[VUIProductBannerViewController isUberLayoutActive]
  -[VUIProductBannerViewController setUberImageOffset:]
  -[VUIProductBannerViewController setBannerOpacity:]
  -[VUIProductBannerViewController topThreshold]
  -[VUIProductBannerViewController _configureViewSubviews]
  -[VUIProductBannerViewController uberBackgroundView]
  -[VUIProductBannerViewController setUberBackgroundView:]


VUIUpsellOfferViewController : _TVBgImageLoadingViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  IKViewElement *viewElement
 @property  VUIUpsellOfferView *upsellView
 @property  UIScrollView *scrollView
 @property  VUIUpsellOfferTransactionView *transactionView

  // instance methods
  -[VUIUpsellOfferViewController .cxx_destruct]
  -[VUIUpsellOfferViewController traitCollectionDidChange:]
  -[VUIUpsellOfferViewController viewDidLoad]
  -[VUIUpsellOfferViewController viewDidLayoutSubviews]
  -[VUIUpsellOfferViewController scrollView]
  -[VUIUpsellOfferViewController setScrollView:]
  -[VUIUpsellOfferViewController viewElement]
  -[VUIUpsellOfferViewController setViewElement:]
  -[VUIUpsellOfferViewController transactionView]
  -[VUIUpsellOfferViewController updateWithViewElement:]
  -[VUIUpsellOfferViewController upsellView]
  -[VUIUpsellOfferViewController setTransactionView:]
  -[VUIUpsellOfferViewController setUpsellView:]
  -[VUIUpsellOfferViewController _iOS_updateViews]


VideosExtrasSlideshowArtworkCatalogHelper : NSObject /usr/lib/libSystem.B.dylib
 @property  MPArtworkCatalog *artworkCatalog

  // instance methods
  -[VideosExtrasSlideshowArtworkCatalogHelper .cxx_destruct]
  -[VideosExtrasSlideshowArtworkCatalogHelper artworkCatalog]
  -[VideosExtrasSlideshowArtworkCatalogHelper setArtworkCatalog:]


VideosExtrasSlideshowTemplateViewController : VideosExtrasTemplateViewController <VideosExtrasSlideshowViewControllerDataSource, VideosExtrasZoomingImageTransitionParticipant>
 @property  NSArray *imageElements
 @property  VideosExtrasSlideshowViewController *slideshowViewController
 @property  UITapGestureRecognizer *tapGestureRecognizer
 @property  IKSlideshowElement *templateElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasSlideshowTemplateViewController dealloc]
  -[VideosExtrasSlideshowTemplateViewController .cxx_destruct]
  -[VideosExtrasSlideshowTemplateViewController viewWillAppear:]
  -[VideosExtrasSlideshowTemplateViewController viewWillDisappear:]
  -[VideosExtrasSlideshowTemplateViewController viewDidLoad]
  -[VideosExtrasSlideshowTemplateViewController viewDidAppear:]
  -[VideosExtrasSlideshowTemplateViewController viewDidDisappear:]
  -[VideosExtrasSlideshowTemplateViewController prefersStatusBarHidden]
  -[VideosExtrasSlideshowTemplateViewController tapGestureRecognizer]
  -[VideosExtrasSlideshowTemplateViewController setTapGestureRecognizer:]
  -[VideosExtrasSlideshowTemplateViewController _handleTap:]
  -[VideosExtrasSlideshowTemplateViewController templateElement]
  -[VideosExtrasSlideshowTemplateViewController imageElements]
  -[VideosExtrasSlideshowTemplateViewController showsPlaceholder]
  -[VideosExtrasSlideshowTemplateViewController setSlideshowViewController:]
  -[VideosExtrasSlideshowTemplateViewController slideshowViewController]
  -[VideosExtrasSlideshowTemplateViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasSlideshowTemplateViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasSlideshowTemplateViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasSlideshowTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasSlideshowTemplateViewController slideshowViewController:loadImageAtIndex:withCompletionHandler:]
  -[VideosExtrasSlideshowTemplateViewController numberOfImagesForSlideshowViewController:]
  -[VideosExtrasSlideshowTemplateViewController setImageElements:]
  -[VideosExtrasSlideshowTemplateViewController _toggleVisibilityOfNavigationBar]
  -[VideosExtrasSlideshowTemplateViewController _firstImageLoadedHideNavigationBar]
  -[VideosExtrasSlideshowTemplateViewController shouldPerformZoomingImageTransitionFromImageElement:toImageAtIndex:]


VUILibraryProductViewController : VUILibraryStackViewController <UICollectionViewDataSource, VUIMediaEntitiesFetchControllerDelegate, VUIProductLockupViewDelegate, VUIRoundButtonDelegate>
 @property  VUIDownloadButton *downloadButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryProductViewController .cxx_destruct]
  -[VUILibraryProductViewController start]
  -[VUILibraryProductViewController traitCollectionDidChange:]
  -[VUILibraryProductViewController viewDidLoad]
  -[VUILibraryProductViewController numberOfSectionsInCollectionView:]
  -[VUILibraryProductViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryProductViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryProductViewController viewDidAppear:]
  -[VUILibraryProductViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryProductViewController collectionView:layout:insetForSectionAtIndex:]
  -[VUILibraryProductViewController initWithMediaItem:]
  -[VUILibraryProductViewController downloadButton]
  -[VUILibraryProductViewController didSelectButton:]
  -[VUILibraryProductViewController configureWithCollectionView:]
  -[VUILibraryProductViewController initWithMediaLibrary:]
  -[VUILibraryProductViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryProductViewController controller:fetchRequests:didFailWithError:]
  -[VUILibraryProductViewController setDownloadButton:]
  -[VUILibraryProductViewController reportMetricsPageEvent]
  -[VUILibraryProductViewController _productLockupViewWithMediaItem:]
  -[VUILibraryProductViewController _productInfoViewWithMediaItem:]
  -[VUILibraryProductViewController _productSectionForHeader:data:group:maxItemCount:]
  -[VUILibraryProductViewController contentDescriptionExpanded]


VUIAppDocumentRefreshEvent : VUIAppDocumentUpdateEvent <NSCopying>
  // instance methods
  -[VUIAppDocumentRefreshEvent dictionaryRepresentation]
  -[VUIAppDocumentRefreshEvent initWithDescriptor:]
  -[VUIAppDocumentRefreshEvent _refreshEventDescriptor]
  -[VUIAppDocumentRefreshEvent initWithRefreshEventDescriptor:]


VUIOverlayLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  long long overlayType
 @property  VUITextLayout *titleLayout
 @property  VUITextBadgeLayout *textBadgeLayout
 @property  TVImageLayout *badgeLayout
 @property  VUIProgressBarLayout *progressBarLayout

  // class methods
  +[VUIOverlayLayout layoutWithLayout:overlayType:element:]
  +[VUIOverlayLayout layoutWithLayout:overlayType:mediaItem:]

  // instance methods
  -[VUIOverlayLayout .cxx_destruct]
  -[VUIOverlayLayout titleLayout]
  -[VUIOverlayLayout setTitleLayout:]
  -[VUIOverlayLayout overlayType]
  -[VUIOverlayLayout textBadgeLayout]
  -[VUIOverlayLayout badgeLayout]
  -[VUIOverlayLayout progressBarLayout]
  -[VUIOverlayLayout setTextBadgeLayout:]
  -[VUIOverlayLayout setProgressBarLayout:]
  -[VUIOverlayLayout setBadgeLayout:]
  -[VUIOverlayLayout _updateLayoutWithElement:andType:]
  -[VUIOverlayLayout _updateLayoutWithMediaItem:type:]
  -[VUIOverlayLayout _navBrickTitleLayout]
  -[VUIOverlayLayout _editorialTitleLayout]
  -[VUIOverlayLayout _spotlightTitleLayout]
  -[VUIOverlayLayout _ribbonTitleLayout]
  -[VUIOverlayLayout setOverlayType:]


VUIImageResourceMap : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIImageResourceMap imageForResourceName:]


VUIJSAMSBagInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSAMSBagDelegate>
 @property  NSDictionary *VUIAMSBagValueTypes

  // class methods
  +[VUIJSAMSBagInterface generateResponseDictionary:withError:]
  +[VUIJSAMSBagInterface convertNSErrorIntoDict:]

  // instance methods
  -[VUIJSAMSBagInterface boolForKey:]
  -[VUIJSAMSBagInterface stringForKey:]
  -[VUIJSAMSBagInterface arrayForKey:]
  -[VUIJSAMSBagInterface dictionaryForKey:]
  -[VUIJSAMSBagInterface integerForKey:]
  -[VUIJSAMSBagInterface doubleForKey:]
  -[VUIJSAMSBagInterface URLForKey:]
  -[VUIJSAMSBagInterface registerBagKey:withValueType:]
  -[VUIJSAMSBagInterface arrayForKeyWithCompletion::]
  -[VUIJSAMSBagInterface boolForKeyWithCompletion::]
  -[VUIJSAMSBagInterface doubleForKeyWithCompletion::]
  -[VUIJSAMSBagInterface integerForKeyWithCompletion::]
  -[VUIJSAMSBagInterface stringForKeyWithCompletion::]
  -[VUIJSAMSBagInterface URLForKeyWithCompletion::]
  -[VUIJSAMSBagInterface dictionaryForKeyWithCompletion::]
  -[VUIJSAMSBagInterface VUIAMSBagValueTypes]


VUIMPSeasonMediaCollection : VUIMPMediaCollection
  // instance methods
  -[VUIMPSeasonMediaCollection initWithMediaLibrary:mediaItemCollection:identifier:requestedProperties:kind:]
  -[VUIMPSeasonMediaCollection initWithMediaLibrary:mediaItemCollection:requestedProperties:]


VUIGDPRPresentationManager : NSObject /usr/lib/libSystem.B.dylib
 @property  UINavigationController *navigationController
 @property  IKAppContext *appContext

  // class methods
  +[VUIGDPRPresentationManager _sharedInstance]
  +[VUIGDPRPresentationManager shouldShowWelcomeScreen]
  +[VUIGDPRPresentationManager acceptGDPRAndSyncWithServers:]
  +[VUIGDPRPresentationManager showGDPRWelcomeScreen:]
  +[VUIGDPRPresentationManager showOfflineGDPRWelcomeScreen]

  // instance methods
  -[VUIGDPRPresentationManager .cxx_destruct]
  -[VUIGDPRPresentationManager navigationController]
  -[VUIGDPRPresentationManager isShowing]
  -[VUIGDPRPresentationManager setNavigationController:]
  -[VUIGDPRPresentationManager appContext]
  -[VUIGDPRPresentationManager setAppContext:]
  -[VUIGDPRPresentationManager _showIOSWelcomeControllerWithAppContext:offline:]
  -[VUIGDPRPresentationManager _handleOfflineContinueButton]
  -[VUIGDPRPresentationManager _handleContinueButton]
  -[VUIGDPRPresentationManager _dismissAllModalsIfPresent:]


_PortraitOnlyNavigationController : UINavigationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[_PortraitOnlyNavigationController dealloc]
  -[_PortraitOnlyNavigationController supportedInterfaceOrientations]
  -[_PortraitOnlyNavigationController preferredInterfaceOrientationForPresentation]
  -[_PortraitOnlyNavigationController viewWillMoveToWindow:]


_VUIGDPRViewController : AMPOnboardingViewController /usr/lib/libAccessibility.dylib
  // instance methods
  -[_VUIGDPRViewController viewDidAppear:]


VUISidebandMediaEntityImageLoadParams : NSObject /usr/lib/libSystem.B.dylib <VUIImageLoadParams>
 @property  unsigned long imageTypeInternal
 @property  NSString *imageIdentifierInternal
 @property  VUIImageInfoManagedObject *imageInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long imageType
 @property  NSString *imageIdentifier

  // instance methods
  -[VUISidebandMediaEntityImageLoadParams isEqual:]
  -[VUISidebandMediaEntityImageLoadParams .cxx_destruct]
  -[VUISidebandMediaEntityImageLoadParams imageType]
  -[VUISidebandMediaEntityImageLoadParams imageInfo]
  -[VUISidebandMediaEntityImageLoadParams imageIdentifier]
  -[VUISidebandMediaEntityImageLoadParams setImageInfo:]
  -[VUISidebandMediaEntityImageLoadParams imageIdentifierInternal]
  -[VUISidebandMediaEntityImageLoadParams initWithVideoManagedObject:imageType:]
  -[VUISidebandMediaEntityImageLoadParams imageTypeInternal]
  -[VUISidebandMediaEntityImageLoadParams setImageTypeInternal:]
  -[VUISidebandMediaEntityImageLoadParams setImageIdentifierInternal:]


VUIPlistMediaDatabase : NSObject /usr/lib/libSystem.B.dylib
 @property  NSURL *fileURL
 @property  NSObject<OS_dispatch_queue> *serialDispatchQueue
 @property  NSObject<OS_dispatch_source> *databaseFileDispatchSource
 @property  NSMutableDictionary *homeVideoByIdentifier
 @property  NSMutableDictionary *movieByIdentifier
 @property  NSMutableDictionary *movieRentalByIdentifier
 @property  NSMutableDictionary *showByIdentifier
 @property  NSArray *homeVideos
 @property  NSArray *movies
 @property  NSArray *movieRentals
 @property  NSArray *shows
 @property  NSArray *seasons
 @property  NSArray *episodes

  // class methods
  +[VUIPlistMediaDatabase _sortedEntitiesArray:]
  +[VUIPlistMediaDatabase _addItem:itemByIdentifier:]
  +[VUIPlistMediaDatabase _removeItem:itemByIdentifier:]

  // instance methods
  -[VUIPlistMediaDatabase init]
  -[VUIPlistMediaDatabase dealloc]
  -[VUIPlistMediaDatabase isEqual:]
  -[VUIPlistMediaDatabase initWithURL:]
  -[VUIPlistMediaDatabase .cxx_destruct]
  -[VUIPlistMediaDatabase fileURL]
  -[VUIPlistMediaDatabase setFileURL:]
  -[VUIPlistMediaDatabase _dictionaryRepresentation]
  -[VUIPlistMediaDatabase movies]
  -[VUIPlistMediaDatabase itemForIdentifier:]
  -[VUIPlistMediaDatabase serialDispatchQueue]
  -[VUIPlistMediaDatabase _saveWithError:]
  -[VUIPlistMediaDatabase setSerialDispatchQueue:]
  -[VUIPlistMediaDatabase episodes]
  -[VUIPlistMediaDatabase shows]
  -[VUIPlistMediaDatabase movieRentals]
  -[VUIPlistMediaDatabase homeVideos]
  -[VUIPlistMediaDatabase seasons]
  -[VUIPlistMediaDatabase _seasons]
  -[VUIPlistMediaDatabase _parseDatabase]
  -[VUIPlistMediaDatabase _startMonitoringDatabaseFile]
  -[VUIPlistMediaDatabase movieByIdentifier]
  -[VUIPlistMediaDatabase movieRentalByIdentifier]
  -[VUIPlistMediaDatabase homeVideoByIdentifier]
  -[VUIPlistMediaDatabase showByIdentifier]
  -[VUIPlistMediaDatabase _addShow:]
  -[VUIPlistMediaDatabase _addSeason:showIdentifier:]
  -[VUIPlistMediaDatabase _addEpisode:showIdentifier:seasonIdentifier:]
  -[VUIPlistMediaDatabase _addHomeVideo:]
  -[VUIPlistMediaDatabase _addMovie:]
  -[VUIPlistMediaDatabase _addMovieRental:]
  -[VUIPlistMediaDatabase removeDownloadedMediaForIdentifier:]
  -[VUIPlistMediaDatabase _removeEntityWithIdentifier:]
  -[VUIPlistMediaDatabase entityForIdentifier:]
  -[VUIPlistMediaDatabase updateEntity:propertyName:propertyValue:]
  -[VUIPlistMediaDatabase saveToFileURL:error:]
  -[VUIPlistMediaDatabase _removeMovie:]
  -[VUIPlistMediaDatabase _removeMovieRental:]
  -[VUIPlistMediaDatabase _removeHomeVideo:]
  -[VUIPlistMediaDatabase _removeShow:]
  -[VUIPlistMediaDatabase _removeSeason:fromShow:]
  -[VUIPlistMediaDatabase _removeEpisode:fromSeason:]
  -[VUIPlistMediaDatabase setDatabaseFileDispatchSource:]
  -[VUIPlistMediaDatabase _parseDatabaseAndSendNotification]
  -[VUIPlistMediaDatabase addEntity:showIdentifier:seasonIdentifier:]
  -[VUIPlistMediaDatabase removeEntityWithIdentifier:]
  -[VUIPlistMediaDatabase updateEntityWithIdentifier:propertyName:propertyValue:]
  -[VUIPlistMediaDatabase databaseFileDispatchSource]
  -[VUIPlistMediaDatabase setHomeVideoByIdentifier:]
  -[VUIPlistMediaDatabase setMovieByIdentifier:]
  -[VUIPlistMediaDatabase setMovieRentalByIdentifier:]
  -[VUIPlistMediaDatabase setShowByIdentifier:]


VUILabel : _TVLabel /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <VUILabelTopMarginCalculationProtocol>
 @property  VUITextLayout *textLayout
 @property  NSString *labelName

  // class methods
  +[VUILabel labelWithString:textLayout:existingLabel:]
  +[VUILabel labelWithAttributedString:textLayout:existingLabel:]

  // instance methods
  -[VUILabel .cxx_destruct]
  -[VUILabel traitCollectionDidChange:]
  -[VUILabel setHighlighted:]
  -[VUILabel setSelected:animated:]
  -[VUILabel setTextLayout:]
  -[VUILabel textLayout]
  -[VUILabel _updateTextColor]
  -[VUILabel topMarginWithBaselineMargin:]
  -[VUILabel bottomMarginWithBaselineMargin:]
  -[VUILabel topMarginToLabel:withBaselineMargin:]
  -[VUILabel baselineHeight]
  -[VUILabel _updateCompositingFilter]
  -[VUILabel topMarginWithBaselineMargin:maximumContentSizeCategory:]
  -[VUILabel bottomMarginWithBaselineMargin:maximumContentSizeCategory:]
  -[VUILabel _updateTextColor:]
  -[VUILabel requiresMoreThanOneLineForTextWidth:]
  -[VUILabel labelName]
  -[VUILabel setLabelName:]


VUIConfirmationBlurEffect : UIBlurEffect /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // class methods
  +[VUIConfirmationBlurEffect effectWithStyle:]

  // instance methods
  -[VUIConfirmationBlurEffect effectSettings]


VUIOfferLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *imageLayout
 @property  TVImageLayout *appIconLayout
 @property  TVImageLayout *logoLayout
 @property  VUITextLayout *channelNameTextLayout
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *subtitleTextLayout
 @property  VUITextLayout *textLayout
 @property  VUITextLayout *focusedTextLayout
 @property  TVImageLayout *badgeLayout
 @property  VUIMediaTagsViewLayout *tagsLayout
 @property  VUIButtonLayout *versionsButtonLayout
 @property  NSShadow *shadow
 @property  {TVCornerRadii=dddd} borderRadii
 @property  double borderWidth
 @property  UIColor *borderColor

  // class methods
  +[VUIOfferLayout layoutWithLayout:element:]
  +[VUIOfferLayout subtitleTextLayout]

  // instance methods
  -[VUIOfferLayout init]
  -[VUIOfferLayout .cxx_destruct]
  -[VUIOfferLayout shadow]
  -[VUIOfferLayout setBorderColor:]
  -[VUIOfferLayout borderWidth]
  -[VUIOfferLayout setBorderWidth:]
  -[VUIOfferLayout borderColor]
  -[VUIOfferLayout setShadow:]
  -[VUIOfferLayout setTextLayout:]
  -[VUIOfferLayout textLayout]
  -[VUIOfferLayout borderRadii]
  -[VUIOfferLayout imageLayout]
  -[VUIOfferLayout setBorderRadii:]
  -[VUIOfferLayout titleTextLayout]
  -[VUIOfferLayout setImageLayout:]
  -[VUIOfferLayout logoLayout]
  -[VUIOfferLayout appIconLayout]
  -[VUIOfferLayout setAppIconLayout:]
  -[VUIOfferLayout subtitleTextLayout]
  -[VUIOfferLayout badgeLayout]
  -[VUIOfferLayout tagsLayout]
  -[VUIOfferLayout versionsButtonLayout]
  -[VUIOfferLayout setTitleTextLayout:]
  -[VUIOfferLayout setSubtitleTextLayout:]
  -[VUIOfferLayout channelNameTextLayout]
  -[VUIOfferLayout setBadgeLayout:]
  -[VUIOfferLayout setLogoLayout:]
  -[VUIOfferLayout setChannelNameTextLayout:]
  -[VUIOfferLayout focusedTextLayout]
  -[VUIOfferLayout setFocusedTextLayout:]
  -[VUIOfferLayout setTagsLayout:]
  -[VUIOfferLayout setVersionsButtonLayout:]


VUISidebandMediaEntityIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityIdentifierInternal>
 @property  NSManagedObjectID *managedObjectID
 @property  VUIMediaEntityType *mediaEntityType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUISidebandMediaEntityIdentifier init]
  -[VUISidebandMediaEntityIdentifier isEqual:]
  -[VUISidebandMediaEntityIdentifier copyWithZone:]
  -[VUISidebandMediaEntityIdentifier .cxx_destruct]
  -[VUISidebandMediaEntityIdentifier managedObjectID]
  -[VUISidebandMediaEntityIdentifier setManagedObjectID:]
  -[VUISidebandMediaEntityIdentifier setMediaEntityType:]
  -[VUISidebandMediaEntityIdentifier mediaEntityType]
  -[VUISidebandMediaEntityIdentifier initWithManagedObjectID:mediaEntityType:]


VUIAppDocumentModifiedFavoritesEvent : VUIAppDocumentUpdateEvent <NSCopying>
 @property  NSSet *addedEntityIDs
 @property  NSSet *removedEntityIDs

  // instance methods
  -[VUIAppDocumentModifiedFavoritesEvent isEqual:]
  -[VUIAppDocumentModifiedFavoritesEvent copyWithZone:]
  -[VUIAppDocumentModifiedFavoritesEvent .cxx_destruct]
  -[VUIAppDocumentModifiedFavoritesEvent dictionaryRepresentation]
  -[VUIAppDocumentModifiedFavoritesEvent initWithDescriptor:]
  -[VUIAppDocumentModifiedFavoritesEvent initWithAddedEntityIDs:removedEntityIDs:]
  -[VUIAppDocumentModifiedFavoritesEvent addedEntityIDs]
  -[VUIAppDocumentModifiedFavoritesEvent removedEntityIDs]
  -[VUIAppDocumentModifiedFavoritesEvent initWithAction:entityID:]
  -[VUIAppDocumentModifiedFavoritesEvent coalescedEvent:]
  -[VUIAppDocumentModifiedFavoritesEvent setAddedEntityIDs:]
  -[VUIAppDocumentModifiedFavoritesEvent setRemovedEntityIDs:]


VideosExtrasGalleryTemplateViewController : VideosExtrasTemplateViewController
 @property  unsigned long selectedItemIndex

  // instance methods
  -[VideosExtrasGalleryTemplateViewController .cxx_destruct]
  -[VideosExtrasGalleryTemplateViewController viewDidLoad]
  -[VideosExtrasGalleryTemplateViewController contentScrollView]
  -[VideosExtrasGalleryTemplateViewController templateElement]
  -[VideosExtrasGalleryTemplateViewController selectedItemIndex]
  -[VideosExtrasGalleryTemplateViewController setSelectedItemIndex:]
  -[VideosExtrasGalleryTemplateViewController showsPlaceholder]
  -[VideosExtrasGalleryTemplateViewController _prepareLayout]


VUIBuyButtonLockup : VUIUIStackView
 @property  UIButton *button
 @property  BOOL hasIAP

  // instance methods
  -[VUIBuyButtonLockup dealloc]
  -[VUIBuyButtonLockup .cxx_destruct]
  -[VUIBuyButtonLockup initWithFrame:]
  -[VUIBuyButtonLockup button]
  -[VUIBuyButtonLockup setButton:]
  -[VUIBuyButtonLockup _contentSizeCategoryDidChange]
  -[VUIBuyButtonLockup setHasIAP:]
  -[VUIBuyButtonLockup _updateForPreferredContentSize]
  -[VUIBuyButtonLockup _isLargeContentSize]
  -[VUIBuyButtonLockup hasIAP]


VUIFavoriteBannerCollectionViewCell : VUIFocusableCollectionViewCell
 @property  VUIFavoriteBannerView *bannerView
 @property  VUIFavoriteBannerLayout *bannerLayout
 @property  double width

  // class methods
  +[VUIFavoriteBannerCollectionViewCell configureCellWithElement:existingCell:]

  // instance methods
  -[VUIFavoriteBannerCollectionViewCell .cxx_destruct]
  -[VUIFavoriteBannerCollectionViewCell prepareForReuse]
  -[VUIFavoriteBannerCollectionViewCell width]
  -[VUIFavoriteBannerCollectionViewCell setWidth:]
  -[VUIFavoriteBannerCollectionViewCell initWithFrame:]
  -[VUIFavoriteBannerCollectionViewCell sizeThatFits:]
  -[VUIFavoriteBannerCollectionViewCell layoutSubviews]
  -[VUIFavoriteBannerCollectionViewCell setHighlighted:]
  -[VUIFavoriteBannerCollectionViewCell bannerView]
  -[VUIFavoriteBannerCollectionViewCell setBannerView:]
  -[VUIFavoriteBannerCollectionViewCell setBannerLayout:]
  -[VUIFavoriteBannerCollectionViewCell bannerLayout]


VUIMPMediaItemCloudDownloadController : VUIMPMediaItemDownloadController <MPStoreDownloadManagerObserver>
 @property  MPStoreDownload *storeDownload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMPMediaItemCloudDownloadController _stateFromStoreDownload:]

  // instance methods
  -[VUIMPMediaItemCloudDownloadController dealloc]
  -[VUIMPMediaItemCloudDownloadController .cxx_destruct]
  -[VUIMPMediaItemCloudDownloadController downloadManager:downloadDidFinish:]
  -[VUIMPMediaItemCloudDownloadController downloadManager:downloadDidProgress:]
  -[VUIMPMediaItemCloudDownloadController initWithMediaItem:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemCloudDownloadController supportsPausing]
  -[VUIMPMediaItemCloudDownloadController initWithMediaItem:state:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemCloudDownloadController _addStoreObserver]
  -[VUIMPMediaItemCloudDownloadController _removeStoreObserver]
  -[VUIMPMediaItemCloudDownloadController storeDownload]
  -[VUIMPMediaItemCloudDownloadController _onProcessingQueue_invalidate]
  -[VUIMPMediaItemCloudDownloadController setStoreDownload:]
  -[VUIMPMediaItemCloudDownloadController isRestoreDownload]
  -[VUIMPMediaItemCloudDownloadController _onProcessingQueue_cancelDownload]
  -[VUIMPMediaItemCloudDownloadController _onProcessingQueue_pauseDownload]
  -[VUIMPMediaItemCloudDownloadController _onProcessingQueue_resumeDownload]


VUIConfirmationCardLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  {TVCornerRadii=dddd} borderRadii
 @property  TVImageLayout *badgeLayout
 @property  VUITextLayout *textLayout

  // class methods
  +[VUIConfirmationCardLayout layoutWithLayout:element:]

  // instance methods
  -[VUIConfirmationCardLayout init]
  -[VUIConfirmationCardLayout .cxx_destruct]
  -[VUIConfirmationCardLayout textLayout]
  -[VUIConfirmationCardLayout borderRadii]
  -[VUIConfirmationCardLayout setBorderRadii:]
  -[VUIConfirmationCardLayout badgeLayout]


VUISeasonPickerButton : UIControl /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  unsigned long currentIndex
 @property  VUILabel *currentLabel
 @property  VUILabel *altLabel
 @property  _TVImageView *chevronDownImageView
 @property  VUITextLayout *buttonTextLayout
 @property  NSArray *seasonTitles
 @property  <VUISeasonPickerButtonDelegate> *delegate

  // class methods
  +[VUISeasonPickerButton configureWithExistingView:]

  // instance methods
  -[VUISeasonPickerButton init]
  -[VUISeasonPickerButton delegate]
  -[VUISeasonPickerButton setDelegate:]
  -[VUISeasonPickerButton .cxx_destruct]
  -[VUISeasonPickerButton sizeThatFits:]
  -[VUISeasonPickerButton layoutSubviews]
  -[VUISeasonPickerButton currentIndex]
  -[VUISeasonPickerButton _buttonTapped:]
  -[VUISeasonPickerButton setCurrentIndex:]
  -[VUISeasonPickerButton currentLabel]
  -[VUISeasonPickerButton setCurrentLabel:]
  -[VUISeasonPickerButton altLabel]
  -[VUISeasonPickerButton setAltLabel:]
  -[VUISeasonPickerButton _layoutWithSize:metricsOnly:]
  -[VUISeasonPickerButton seasonTitles]
  -[VUISeasonPickerButton _updateLabelsWithSeasonTitles:]
  -[VUISeasonPickerButton setChevronDownImageView:]
  -[VUISeasonPickerButton setSeasonTitles:]
  -[VUISeasonPickerButton switchToIndex:]
  -[VUISeasonPickerButton chevronDownImageView]
  -[VUISeasonPickerButton buttonTextLayout]
  -[VUISeasonPickerButton setButtonTextLayout:]


VUIPopoverDescriptor : NSObject /usr/lib/libSystem.B.dylib
 @property  IKViewElement *buttonElement
 @property  IKViewElement *popoverElement
 @property  {CGSize=dd} popoverSize
 @property  UIColor *tintColor
 @property  NSString *title
 @property  unsigned long type
 @property  NSArray *popoverEntries

  // instance methods
  -[VUIPopoverDescriptor init]
  -[VUIPopoverDescriptor type]
  -[VUIPopoverDescriptor .cxx_destruct]
  -[VUIPopoverDescriptor _init]
  -[VUIPopoverDescriptor title]
  -[VUIPopoverDescriptor tintColor]
  -[VUIPopoverDescriptor initWithViewElement:]
  -[VUIPopoverDescriptor popoverSize]
  -[VUIPopoverDescriptor _populateWithElement:]
  -[VUIPopoverDescriptor popoverEntries]
  -[VUIPopoverDescriptor buttonElement]
  -[VUIPopoverDescriptor popoverElement]


VUIAppStyleFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIAppStyleFactory sharedInstance]

  // instance methods
  -[VUIAppStyleFactory init]
  -[VUIAppStyleFactory _cornerRadiusWithStyle:]
  -[VUIAppStyleFactory setAppStylesForElement:]


VUIMediaLibraryContentsChange : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long revision

  // instance methods
  -[VUIMediaLibraryContentsChange init]
  -[VUIMediaLibraryContentsChange isEqual:]
  -[VUIMediaLibraryContentsChange copyWithZone:]
  -[VUIMediaLibraryContentsChange setRevision:]
  -[VUIMediaLibraryContentsChange revision]
  -[VUIMediaLibraryContentsChange initWithRevision:]


VUIChannelBannerViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIChannelBannerViewFactory configureViewWithElement:existingController:]


VUIDownloadShowTableHeaderView : UITableViewHeaderFooterView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *titleLabel
 @property  VUISeparatorView *separatorView
 @property  NSString *headerTitle

  // instance methods
  -[VUIDownloadShowTableHeaderView .cxx_destruct]
  -[VUIDownloadShowTableHeaderView titleLabel]
  -[VUIDownloadShowTableHeaderView sizeThatFits:]
  -[VUIDownloadShowTableHeaderView layoutSubviews]
  -[VUIDownloadShowTableHeaderView separatorView]
  -[VUIDownloadShowTableHeaderView setTitleLabel:]
  -[VUIDownloadShowTableHeaderView initWithReuseIdentifier:]
  -[VUIDownloadShowTableHeaderView setSeparatorView:]
  -[VUIDownloadShowTableHeaderView headerTitle]
  -[VUIDownloadShowTableHeaderView setHeaderTitle:]
  -[VUIDownloadShowTableHeaderView _layoutWithSize:metricsOnly:]


VUICloudClient : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUICloudClient sharedInstance]

  // instance methods
  -[VUICloudClient loadArtworkURLsForPurchaseHistoryIDs:completionHandler:]


VUIDirectScrollCollectionView : UICollectionView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VUIDirectScrollCollectionView canBecomeFocused]
  -[VUIDirectScrollCollectionView initWithFrame:collectionViewLayout:]
  -[VUIDirectScrollCollectionView _downArrowAction:]
  -[VUIDirectScrollCollectionView _upArrowAction:]
  -[VUIDirectScrollCollectionView _tapScrollDelta]


VUIUpNextButton : VUIButton <VUIUpNextButtonProtocol>
 @property  NSLayoutConstraint *stackViewWidthConstraint
 @property  VUIUpNextButtonProperties *properties
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIUpNextButton .cxx_destruct]
  -[VUIUpNextButton properties]
  -[VUIUpNextButton setProperties:]
  -[VUIUpNextButton intrinsicContentSize]
  -[VUIUpNextButton largeContentTitle]
  -[VUIUpNextButton setTintColor:]
  -[VUIUpNextButton stackViewWidthConstraint]
  -[VUIUpNextButton setStackViewWidthConstraint:]
  -[VUIUpNextButton updateWithElement:]
  -[VUIUpNextButton initWithLayout:interfaceStyle:]
  -[VUIUpNextButton _selectButtonAction:eventType:]
  -[VUIUpNextButton _updateWidthConstraintsFromOldSize:toNewSize:]
  -[VUIUpNextButton upNextStateChangedToAdded]
  -[VUIUpNextButton upNextStateChangedToRemoved]


VUIActionAppPunchout : VUIAction
 @property  NSURL *punchoutURLWithoutAssociatedPlayable

  // instance methods
  -[VUIActionAppPunchout .cxx_destruct]
  -[VUIActionAppPunchout performWithTargetResponder:completionHandler:]
  -[VUIActionAppPunchout initWithContextData:]
  -[VUIActionAppPunchout _openPunchoutURL:isPlaybackURL:]
  -[VUIActionAppPunchout punchoutURLWithoutAssociatedPlayable]


VUIPlistMediaDatabaseEntity : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *identifier
 @property  unsigned long type
 @property  NSString *title
 @property  NSString *genreTitle
 @property  NSString *contentDescription
 @property  NSURL *coverArtURL
 @property  NSString *canonicalID
 @property  NSNumber *local

  // instance methods
  -[VUIPlistMediaDatabaseEntity init]
  -[VUIPlistMediaDatabaseEntity dealloc]
  -[VUIPlistMediaDatabaseEntity isEqual:]
  -[VUIPlistMediaDatabaseEntity copyWithZone:]
  -[VUIPlistMediaDatabaseEntity type]
  -[VUIPlistMediaDatabaseEntity setType:]
  -[VUIPlistMediaDatabaseEntity .cxx_destruct]
  -[VUIPlistMediaDatabaseEntity initWithDictionary:]
  -[VUIPlistMediaDatabaseEntity identifier]
  -[VUIPlistMediaDatabaseEntity setIdentifier:]
  -[VUIPlistMediaDatabaseEntity dictionaryRepresentation]
  -[VUIPlistMediaDatabaseEntity title]
  -[VUIPlistMediaDatabaseEntity setTitle:]
  -[VUIPlistMediaDatabaseEntity contentDescription]
  -[VUIPlistMediaDatabaseEntity isLocal]
  -[VUIPlistMediaDatabaseEntity setContentDescription:]
  -[VUIPlistMediaDatabaseEntity genreTitle]
  -[VUIPlistMediaDatabaseEntity initWithIdentifier:type:]
  -[VUIPlistMediaDatabaseEntity canonicalID]
  -[VUIPlistMediaDatabaseEntity setCanonicalID:]
  -[VUIPlistMediaDatabaseEntity _mediaEntityPropertyDidChange:]
  -[VUIPlistMediaDatabaseEntity coverArtURL]
  -[VUIPlistMediaDatabaseEntity setGenreTitle:]
  -[VUIPlistMediaDatabaseEntity setCoverArtURL:]


VUIRemoveFromPlayHistoryRequestManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *ongoingDeleteIDOperationDictionary

  // class methods
  +[VUIRemoveFromPlayHistoryRequestManager sharedInstance]

  // instance methods
  -[VUIRemoveFromPlayHistoryRequestManager init]
  -[VUIRemoveFromPlayHistoryRequestManager .cxx_destruct]
  -[VUIRemoveFromPlayHistoryRequestManager _init]
  -[VUIRemoveFromPlayHistoryRequestManager ongoingDeleteIDOperationDictionary]
  -[VUIRemoveFromPlayHistoryRequestManager sendRequestForDeleteID:canonicalID:isContinueWatching:]
  -[VUIRemoveFromPlayHistoryRequestManager setOngoingDeleteIDOperationDictionary:]


VUIJSSportsInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSSportsInterface>

VUIMPMediaLibraryConnectOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  BOOL success
 @property  NSError *error
 @property  MPMediaLibrary *mediaLibrary
 @property  NSObject<OS_dispatch_source> *progressTimer
 @property  @? progressBlock

  // instance methods
  -[VUIMPMediaLibraryConnectOperation init]
  -[VUIMPMediaLibraryConnectOperation .cxx_destruct]
  -[VUIMPMediaLibraryConnectOperation error]
  -[VUIMPMediaLibraryConnectOperation setError:]
  -[VUIMPMediaLibraryConnectOperation progressBlock]
  -[VUIMPMediaLibraryConnectOperation setProgressBlock:]
  -[VUIMPMediaLibraryConnectOperation success]
  -[VUIMPMediaLibraryConnectOperation setSuccess:]
  -[VUIMPMediaLibraryConnectOperation mediaLibrary]
  -[VUIMPMediaLibraryConnectOperation setMediaLibrary:]
  -[VUIMPMediaLibraryConnectOperation executionDidBegin]
  -[VUIMPMediaLibraryConnectOperation progressTimer]
  -[VUIMPMediaLibraryConnectOperation setProgressTimer:]
  -[VUIMPMediaLibraryConnectOperation initWithMediaLibrary:]
  -[VUIMPMediaLibraryConnectOperation _startProgressTimer]
  -[VUIMPMediaLibraryConnectOperation _stopProgressTimer]
  -[VUIMPMediaLibraryConnectOperation _notifyClientOfProgress:]


VUICardCollectionViewCell : VUIFocusableCollectionViewCell
 @property  IKViewElement *viewElement
 @property  VUICardView *cardView
 @property  VUICardViewLayoutFactory *layoutFactory

  // class methods
  +[VUICardCollectionViewCell _cardLayoutTypeForElement:]
  +[VUICardCollectionViewCell cardCellWithElement:existingCell:]

  // instance methods
  -[VUICardCollectionViewCell .cxx_destruct]
  -[VUICardCollectionViewCell prepareForReuse]
  -[VUICardCollectionViewCell initWithFrame:]
  -[VUICardCollectionViewCell sizeThatFits:]
  -[VUICardCollectionViewCell layoutSubviews]
  -[VUICardCollectionViewCell cardView]
  -[VUICardCollectionViewCell setCardView:]
  -[VUICardCollectionViewCell viewElement]
  -[VUICardCollectionViewCell setViewElement:]
  -[VUICardCollectionViewCell layoutFactory]
  -[VUICardCollectionViewCell setLayoutFactory:]
  -[VUICardCollectionViewCell setCardView:force:]


VUIViewInteractionController : NSObject /usr/lib/libSystem.B.dylib <UIContextMenuInteractionDelegate_Private, TVPreviewInteractionController>
 @property  UIContextMenuInteraction *interaction
 @property  UIView *presentingView
 @property  UIViewController *presentingViewController
 @property  IKViewElement *presentingElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIViewInteractionController updateContextMenuWithMenuItems:]
  +[VUIViewInteractionController getHighlightedView]
  +[VUIViewInteractionController setContextMenuTemplateInterface:]

  // instance methods
  -[VUIViewInteractionController .cxx_destruct]
  -[VUIViewInteractionController interaction]
  -[VUIViewInteractionController presentingViewController]
  -[VUIViewInteractionController contextMenuInteraction:configurationForMenuAtLocation:]
  -[VUIViewInteractionController contextMenuInteraction:previewForHighlightingMenuWithConfiguration:]
  -[VUIViewInteractionController contextMenuInteraction:willPerformPreviewActionForMenuWithConfiguration:animator:]
  -[VUIViewInteractionController _contextMenuInteraction:styleForMenuWithConfiguration:]
  -[VUIViewInteractionController setInteraction:]
  -[VUIViewInteractionController presentingView]
  -[VUIViewInteractionController collectionView:shouldHandleLongPressForItemAtIndexPath:]
  -[VUIViewInteractionController updatePresentingElement:]
  -[VUIViewInteractionController dismissInteractionView]
  -[VUIViewInteractionController setPresentingElement:]
  -[VUIViewInteractionController _getViewElementWithContextMenuAtLocation:]
  -[VUIViewInteractionController _getPreviewViewControllerWithElement:]
  -[VUIViewInteractionController _getViewAtLocation:]
  -[VUIViewInteractionController initWithPresentingViewController:presentingView:presentingElement:]
  -[VUIViewInteractionController presentingElement]


VUIActiveInteractionView : NSObject /usr/lib/libSystem.B.dylib
 @property  UIView *highlightedView
 @property  UIContextMenuInteraction *activeInteraction
 @property  <VUIContextMenuTemplateControllerInterface> *templateInterface

  // class methods
  +[VUIActiveInteractionView sharedInstance]

  // instance methods
  -[VUIActiveInteractionView .cxx_destruct]
  -[VUIActiveInteractionView setActiveInteraction:]
  -[VUIActiveInteractionView activeInteraction]
  -[VUIActiveInteractionView highlightedView]
  -[VUIActiveInteractionView setHighlightedView:]
  -[VUIActiveInteractionView setTemplateInterface:]
  -[VUIActiveInteractionView templateInterface]


VUICanvasAppDocumentServiceViewController : VUIAppDocumentServiceViewController

VUIMediaCollection : VUIMediaEntity
 @property  NSDate *addedToDate
 @property  NSNumber *mediaItemCount
 @property  NSNumber *seasonCount

  // instance methods
  -[VUIMediaCollection seasonCount]
  -[VUIMediaCollection addedToDate]
  -[VUIMediaCollection mediaItemCount]


VUITabItemCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  IKImageElement *imageElement
 @property  VUILabel *titleLabel
 @property  VUITextLayout *titleLayout
 @property  _TVImageView *imageView
 @property  TVImageLayout *imageLayout
 @property  NSShadow *shadow

  // class methods
  +[VUITabItemCollectionViewCell configureViewWithElement:existingCell:]
  +[VUITabItemCollectionViewCell tabItemSizeForElement:]
  +[VUITabItemCollectionViewCell tabItemTextLayout]

  // instance methods
  -[VUITabItemCollectionViewCell .cxx_destruct]
  -[VUITabItemCollectionViewCell prepareForReuse]
  -[VUITabItemCollectionViewCell shadow]
  -[VUITabItemCollectionViewCell initWithFrame:]
  -[VUITabItemCollectionViewCell titleLabel]
  -[VUITabItemCollectionViewCell sizeThatFits:]
  -[VUITabItemCollectionViewCell largeContentTitle]
  -[VUITabItemCollectionViewCell largeContentImage]
  -[VUITabItemCollectionViewCell scalesLargeContentImage]
  -[VUITabItemCollectionViewCell layoutSubviews]
  -[VUITabItemCollectionViewCell imageView]
  -[VUITabItemCollectionViewCell setTitleLabel:]
  -[VUITabItemCollectionViewCell setImageView:]
  -[VUITabItemCollectionViewCell setShadow:]
  -[VUITabItemCollectionViewCell viewElement]
  -[VUITabItemCollectionViewCell imageElement]
  -[VUITabItemCollectionViewCell setViewElement:]
  -[VUITabItemCollectionViewCell titleLayout]
  -[VUITabItemCollectionViewCell setTitleLayout:]
  -[VUITabItemCollectionViewCell imageLayout]
  -[VUITabItemCollectionViewCell setImageElement:]
  -[VUITabItemCollectionViewCell setImageLayout:]
  -[VUITabItemCollectionViewCell _imageLayout]
  -[VUITabItemCollectionViewCell _titleLayout]


VUIJSSettingsInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSSettingsInterface>
  // instance methods
  -[VUIJSSettingsInterface dealloc]
  -[VUIJSSettingsInterface userPreferences]
  -[VUIJSSettingsInterface initWithAppContext:]
  -[VUIJSSettingsInterface sportsScoreSpoilersAllowed]
  -[VUIJSSettingsInterface _handleSettingsDidChange:]
  -[VUIJSSettingsInterface privateModeEnabled]
  -[VUIJSSettingsInterface consentedBrands]
  -[VUIJSSettingsInterface deniedBrands]
  -[VUIJSSettingsInterface privacyFlowContentVersion]
  -[VUIJSSettingsInterface forceUpdateWithCallback:]
  -[VUIJSSettingsInterface appSettingsByChannelID]
  -[VUIJSSettingsInterface wlkOverrides]
  -[VUIJSSettingsInterface updateFeaturesConfiguration:]


VUIMediaEntitiesFetchControllerResult : NSObject /usr/lib/libSystem.B.dylib
 @property  long long fetchReason
 @property  NSArray *fetchResponses
 @property  NSArray *fetchResponseChanges

  // instance methods
  -[VUIMediaEntitiesFetchControllerResult init]
  -[VUIMediaEntitiesFetchControllerResult .cxx_destruct]
  -[VUIMediaEntitiesFetchControllerResult fetchResponses]
  -[VUIMediaEntitiesFetchControllerResult setFetchResponses:]
  -[VUIMediaEntitiesFetchControllerResult fetchReason]
  -[VUIMediaEntitiesFetchControllerResult fetchResponseChanges]
  -[VUIMediaEntitiesFetchControllerResult setFetchResponseChanges:]
  -[VUIMediaEntitiesFetchControllerResult initWithFetchReason:fetchResponses:]
  -[VUIMediaEntitiesFetchControllerResult setFetchReason:]


VUIPopoverView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate>
 @property  VUIButton *tvPopoverButton
 @property  BOOL imageLoaded
 @property  TVImageProxy *imageProxy
 @property  VUIPopoverDescriptor *popoverDescriptor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPopoverView .cxx_destruct]
  -[VUIPopoverView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[VUIPopoverView sizeThatFits:]
  -[VUIPopoverView layoutSubviews]
  -[VUIPopoverView isImageLoaded]
  -[VUIPopoverView setImageProxy:]
  -[VUIPopoverView imageProxy]
  -[VUIPopoverView setImageLoaded:]
  -[VUIPopoverView popoverDescriptor]
  -[VUIPopoverView _popoverButtonPressed:]
  -[VUIPopoverView setPopoverDescriptor:]
  -[VUIPopoverView tvPopoverButton]
  -[VUIPopoverView setTvPopoverButton:]


VUIJSNetworkInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSNetworkInterface>
 @property  BOOL suppressServerConfigNotifications

  // instance methods
  -[VUIJSNetworkInterface dealloc]
  -[VUIJSNetworkInterface _connection]
  -[VUIJSNetworkInterface .cxx_destruct]
  -[VUIJSNetworkInterface cancelRequest:]
  -[VUIJSNetworkInterface initWithAppContext:]
  -[VUIJSNetworkInterface _handleAppLibChange:]
  -[VUIJSNetworkInterface _handleServerConfigChange:]
  -[VUIJSNetworkInterface _handlePlaybackReport:]
  -[VUIJSNetworkInterface _requestOptionsFromJSOptions:]
  -[VUIJSNetworkInterface _enqueueNetworkOp:withJSCallback:]
  -[VUIJSNetworkInterface setSuppressServerConfigNotifications:]
  -[VUIJSNetworkInterface makeRequest::]
  -[VUIJSNetworkInterface makeUpNextRequest::]
  -[VUIJSNetworkInterface fetchConfiguration::]
  -[VUIJSNetworkInterface invalidateConfiguration]
  -[VUIJSNetworkInterface suppressServerConfigNotifications]


VUIJSURLRouterInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSURLRouterInterface>

VUIMPSeasonMediaCollectionIdentifier : VUIMPMediaEntityIdentifier
 @property  NSNumber *seasonNumber

  // class methods
  +[VUIMPSeasonMediaCollectionIdentifier requiredMPPropertyNames]
  +[VUIMPSeasonMediaCollectionIdentifier seasonIdentifierWithMediaItem:]

  // instance methods
  -[VUIMPSeasonMediaCollectionIdentifier isEqual:]
  -[VUIMPSeasonMediaCollectionIdentifier copyWithZone:]
  -[VUIMPSeasonMediaCollectionIdentifier .cxx_destruct]
  -[VUIMPSeasonMediaCollectionIdentifier seasonNumber]
  -[VUIMPSeasonMediaCollectionIdentifier setSeasonNumber:]
  -[VUIMPSeasonMediaCollectionIdentifier initWithPersistentID:mediaEntityType:]
  -[VUIMPSeasonMediaCollectionIdentifier initWithPersistentID:seasonNumber:]


VUIConfirmationDialogPresentationController : UIPresentationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIVisualEffectView *backdropView
 @property  {CGSize=dd} modalSize
 @property  @? completedAnimationBlock

  // instance methods
  -[VUIConfirmationDialogPresentationController dealloc]
  -[VUIConfirmationDialogPresentationController .cxx_destruct]
  -[VUIConfirmationDialogPresentationController presentationStyle]
  -[VUIConfirmationDialogPresentationController initWithPresentedViewController:presentingViewController:]
  -[VUIConfirmationDialogPresentationController presentationTransitionWillBegin]
  -[VUIConfirmationDialogPresentationController backdropView]
  -[VUIConfirmationDialogPresentationController dismissalTransitionWillBegin]
  -[VUIConfirmationDialogPresentationController _tapGesture:]
  -[VUIConfirmationDialogPresentationController setModalSize:]
  -[VUIConfirmationDialogPresentationController setCompletedAnimationBlock:]
  -[VUIConfirmationDialogPresentationController completedAnimationBlock]
  -[VUIConfirmationDialogPresentationController _layoutPresentedView]
  -[VUIConfirmationDialogPresentationController modalSize]


VUISportsFavoritesContainerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UICollectionView *collectionView

  // instance methods
  -[VUISportsFavoritesContainerView .cxx_destruct]
  -[VUISportsFavoritesContainerView layoutSubviews]
  -[VUISportsFavoritesContainerView collectionView]
  -[VUISportsFavoritesContainerView setCollectionView:]


VUISportsFavoritesTemplateController : _TVBgImageLoadingViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, _TVCollectionViewDelegate, UIGestureRecognizerDelegate>
 @property  UICollectionView *collectionView
 @property  IKViewElement *templateElement
 @property  NSArray *sectionElements
 @property  IKHeaderElement *headerElement
 @property  IKViewElement *footerElement
 @property  VUIFavoriteCollectionViewCell *computationCell
 @property  VUICollectionHeaderView *computationHeaderView
 @property  VUICollectionFooterView *computationFooterView
 @property  VUISportsFavoritesContainerView *containerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUISportsFavoritesTemplateController .cxx_destruct]
  -[VUISportsFavoritesTemplateController didCancel]
  -[VUISportsFavoritesTemplateController loadView]
  -[VUISportsFavoritesTemplateController traitCollectionDidChange:]
  -[VUISportsFavoritesTemplateController containerView]
  -[VUISportsFavoritesTemplateController setContainerView:]
  -[VUISportsFavoritesTemplateController collectionView]
  -[VUISportsFavoritesTemplateController numberOfSectionsInCollectionView:]
  -[VUISportsFavoritesTemplateController collectionView:numberOfItemsInSection:]
  -[VUISportsFavoritesTemplateController collectionView:cellForItemAtIndexPath:]
  -[VUISportsFavoritesTemplateController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUISportsFavoritesTemplateController viewDidLayoutSubviews]
  -[VUISportsFavoritesTemplateController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VUISportsFavoritesTemplateController setCollectionView:]
  -[VUISportsFavoritesTemplateController collectionView:shouldHighlightItemAtIndexPath:]
  -[VUISportsFavoritesTemplateController collectionView:didSelectItemAtIndexPath:]
  -[VUISportsFavoritesTemplateController collectionView:willDisplayCell:forItemAtIndexPath:]
  -[VUISportsFavoritesTemplateController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUISportsFavoritesTemplateController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VUISportsFavoritesTemplateController collectionView:layout:referenceSizeForFooterInSection:]
  -[VUISportsFavoritesTemplateController templateElement]
  -[VUISportsFavoritesTemplateController setTemplateElement:]
  -[VUISportsFavoritesTemplateController headerElement]
  -[VUISportsFavoritesTemplateController updateWithViewElement:]
  -[VUISportsFavoritesTemplateController footerElement]
  -[VUISportsFavoritesTemplateController _animateSectionElementsChanges]
  -[VUISportsFavoritesTemplateController _expectedCellSizeForElement:collectionView:atIndexPath:]
  -[VUISportsFavoritesTemplateController sectionElements]
  -[VUISportsFavoritesTemplateController setSectionElements:]
  -[VUISportsFavoritesTemplateController setHeaderElement:]
  -[VUISportsFavoritesTemplateController setFooterElement:]
  -[VUISportsFavoritesTemplateController computationCell]
  -[VUISportsFavoritesTemplateController setComputationCell:]
  -[VUISportsFavoritesTemplateController computationHeaderView]
  -[VUISportsFavoritesTemplateController setComputationHeaderView:]
  -[VUISportsFavoritesTemplateController computationFooterView]
  -[VUISportsFavoritesTemplateController setComputationFooterView:]


VUITransactionButton : VUIButton
 @property  BOOL waitingForTransactionToStart
 @property  BOOL monitorTransaction
 @property  VUICircularProgress *progressIndicator
 @property  NSString *textContentTitleBackup

  // instance methods
  -[VUITransactionButton dealloc]
  -[VUITransactionButton .cxx_destruct]
  -[VUITransactionButton traitCollectionDidChange:]
  -[VUITransactionButton didUpdateFocusInContext:withAnimationCoordinator:]
  -[VUITransactionButton layoutSubviews]
  -[VUITransactionButton progressIndicator]
  -[VUITransactionButton setProgressIndicator:]
  -[VUITransactionButton _carouselView]
  -[VUITransactionButton updateWithElement:]
  -[VUITransactionButton initWithLayout:interfaceStyle:]
  -[VUITransactionButton _buttonTapped:eventName:]
  -[VUITransactionButton _unregisterTransactionNotifications]
  -[VUITransactionButton _layoutProgressIndicatorIfNeeded]
  -[VUITransactionButton _transactionBuyParams]
  -[VUITransactionButton setMonitorTransaction:]
  -[VUITransactionButton _handleTransactionDidStartNotification:]
  -[VUITransactionButton _updateProgressIndicatorTintColor:]
  -[VUITransactionButton monitorTransaction]
  -[VUITransactionButton _addProgressIndicatorWithFrame:]
  -[VUITransactionButton _registerForTransactionNotification]
  -[VUITransactionButton isWaitingForTransactionToStart]
  -[VUITransactionButton setWaitingForTransactionToStart:]
  -[VUITransactionButton _handleTransactionDidFinishNotification:]
  -[VUITransactionButton textContentTitleBackup]
  -[VUITransactionButton setTextContentTitleBackup:]


VUIWatchNowTemplateController : _TVStackTemplateController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  UIImageView *backgroundImageView
 @property  VUIWatchNowTemplateBackgroundLayer *backgroundImageGradientLayer
 @property  UIImageView *gradientImageView
 @property  BOOL shouldFocusUpNext
 @property  BOOL upNextFocused

  // instance methods
  -[VUIWatchNowTemplateController .cxx_destruct]
  -[VUIWatchNowTemplateController traitCollectionDidChange:]
  -[VUIWatchNowTemplateController didUpdateFocusInContext:withAnimationCoordinator:]
  -[VUIWatchNowTemplateController preferredFocusEnvironments]
  -[VUIWatchNowTemplateController viewDidLoad]
  -[VUIWatchNowTemplateController backgroundImageView]
  -[VUIWatchNowTemplateController _updateBackgroundImage]
  -[VUIWatchNowTemplateController setBackgroundImageView:]
  -[VUIWatchNowTemplateController shouldAdjustForTabBarSafeAreaInsets]
  -[VUIWatchNowTemplateController showcaseFactorDidChange]
  -[VUIWatchNowTemplateController scrollStopForShowcaseTransition]
  -[VUIWatchNowTemplateController scrollStopForEnteringSectionAtIndex:fromEdge:]
  -[VUIWatchNowTemplateController shouldFocusUpNext]
  -[VUIWatchNowTemplateController _doesCollectionViewHasItems]
  -[VUIWatchNowTemplateController setShouldFocusUpNext:]
  -[VUIWatchNowTemplateController gradientImageView]
  -[VUIWatchNowTemplateController setUpNextFocused:]
  -[VUIWatchNowTemplateController _watchNowBannerScrollStop]
  -[VUIWatchNowTemplateController isUpNextFocused]
  -[VUIWatchNowTemplateController focusUpNextAnimated:]
  -[VUIWatchNowTemplateController backgroundImageGradientLayer]
  -[VUIWatchNowTemplateController setBackgroundImageGradientLayer:]
  -[VUIWatchNowTemplateController setGradientImageView:]


VUIPlaybackUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIPlaybackUtilities playedThresholdTimeForDuration:]
  +[VUIPlaybackUtilities suggestedBookmarkTimeForElapsedTime:duration:]
  +[VUIPlaybackUtilities playedStateForDuration:elapsedTime:hasBeenPlayed:playCount:]
  +[VUIPlaybackUtilities playedStateForDuration:elapsedTime:hasBeenPlayed:playCount:respectPlayCount:]
  +[VUIPlaybackUtilities playerIsLive:]


VUISidebandMediaItemAssetController : NSObject /usr/lib/libSystem.B.dylib <VUIDownloadManagerDelegate, TVPDownloadDelegate, VUIMediaEntityAssetController>
 @property  VUIVideoManagedObject *videoManagedObjectInternal
 @property  NSObject<VUIMediaEntityIdentifier> *mediaEntityIdentifierInternal
 @property  <VUIMediaEntityAssetControllerDelegate> *delegateInternal
 @property  NSObject<OS_dispatch_queue> *serialQueue
 @property  NSObject<OS_dispatch_queue> *completionDispatchQueueInternal
 @property  VUIMediaEntityAssetControllerState *stateInternal
 @property  TVPDownload *downloadInternal
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<VUIMediaEntityIdentifier> *mediaEntityIdentifier
 @property  VUIMediaEntityType *mediaEntityType
 @property  <VUIMediaEntityAssetControllerDelegate> *delegate
 @property  BOOL supportsStartingDownload
 @property  VUIMediaEntityAssetControllerState *state
 @property  NSObject<OS_dispatch_queue> *completionDispatchQueue

  // instance methods
  -[VUISidebandMediaItemAssetController dealloc]
  -[VUISidebandMediaItemAssetController invalidate]
  -[VUISidebandMediaItemAssetController delegate]
  -[VUISidebandMediaItemAssetController setDelegate:]
  -[VUISidebandMediaItemAssetController .cxx_destruct]
  -[VUISidebandMediaItemAssetController observeValueForKeyPath:ofObject:change:context:]
  -[VUISidebandMediaItemAssetController state]
  -[VUISidebandMediaItemAssetController serialQueue]
  -[VUISidebandMediaItemAssetController downloadManagerDownloadsDidChange:]
  -[VUISidebandMediaItemAssetController mediaEntityType]
  -[VUISidebandMediaItemAssetController setSerialQueue:]
  -[VUISidebandMediaItemAssetController completionDispatchQueue]
  -[VUISidebandMediaItemAssetController resumeDownload]
  -[VUISidebandMediaItemAssetController download:progressDidChange:]
  -[VUISidebandMediaItemAssetController download:didChangeStateTo:]
  -[VUISidebandMediaItemAssetController cancelAndRemoveDownload]
  -[VUISidebandMediaItemAssetController setCompletionDispatchQueue:]
  -[VUISidebandMediaItemAssetController supportsStartingDownload]
  -[VUISidebandMediaItemAssetController _updateObservedDownload]
  -[VUISidebandMediaItemAssetController _updateDownloadStateAndNotifyDelegates]
  -[VUISidebandMediaItemAssetController mediaEntityIdentifierInternal]
  -[VUISidebandMediaItemAssetController videoManagedObjectInternal]
  -[VUISidebandMediaItemAssetController setDelegateInternal:]
  -[VUISidebandMediaItemAssetController delegateInternal]
  -[VUISidebandMediaItemAssetController stateInternal]
  -[VUISidebandMediaItemAssetController setCompletionDispatchQueueInternal:]
  -[VUISidebandMediaItemAssetController completionDispatchQueueInternal]
  -[VUISidebandMediaItemAssetController downloadInternal]
  -[VUISidebandMediaItemAssetController setDownloadInternal:]
  -[VUISidebandMediaItemAssetController setStateInternal:]
  -[VUISidebandMediaItemAssetController startDownloadWithCompletion:]
  -[VUISidebandMediaItemAssetController pauseDownload]
  -[VUISidebandMediaItemAssetController mediaEntityIdentifier]
  -[VUISidebandMediaItemAssetController initWithVideoManagedObject:mediaEntityIdentifier:]
  -[VUISidebandMediaItemAssetController setVideoManagedObjectInternal:]
  -[VUISidebandMediaItemAssetController setMediaEntityIdentifierInternal:]


VUIDownloadViewController : VUILibraryFetchControllerViewController <UITableViewDataSource, UITableViewDelegate, VUIDownloadDataSourceDelegate, VUIDownloadEntityTableViewCellDelegate>
 @property  UITableView *downloadEntitiesTableView
 @property  VUIDownloadDataSource *downloadManager
 @property  NSMutableArray *downloadEntities
 @property  VUIDownloadEntityTableViewCell *sizingCell
 @property  UIBarButtonItem *rightBarButtonItem
 @property  UIBarButtonItem *leftBarButtonItem
 @property  UIBarButtonItem *backBarButtonItem
 @property  NSMutableArray *assetControllersToRemove
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDownloadViewController .cxx_destruct]
  -[VUIDownloadViewController loadView]
  -[VUIDownloadViewController viewWillAppear:]
  -[VUIDownloadViewController viewDidLoad]
  -[VUIDownloadViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIDownloadViewController viewDidAppear:]
  -[VUIDownloadViewController backBarButtonItem]
  -[VUIDownloadViewController setBackBarButtonItem:]
  -[VUIDownloadViewController leftBarButtonItem]
  -[VUIDownloadViewController rightBarButtonItem]
  -[VUIDownloadViewController setLeftBarButtonItem:]
  -[VUIDownloadViewController setRightBarButtonItem:]
  -[VUIDownloadViewController tableView:numberOfRowsInSection:]
  -[VUIDownloadViewController tableView:cellForRowAtIndexPath:]
  -[VUIDownloadViewController tableView:heightForRowAtIndexPath:]
  -[VUIDownloadViewController tableView:didSelectRowAtIndexPath:]
  -[VUIDownloadViewController tableView:didDeselectRowAtIndexPath:]
  -[VUIDownloadViewController tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:]
  -[VUIDownloadViewController tableView:willBeginEditingRowAtIndexPath:]
  -[VUIDownloadViewController tableView:didEndEditingRowAtIndexPath:]
  -[VUIDownloadViewController downloadManager:downloadsDidChange:]
  -[VUIDownloadViewController downloadManager]
  -[VUIDownloadViewController sizingCell]
  -[VUIDownloadViewController setSizingCell:]
  -[VUIDownloadViewController _cancelPressed]
  -[VUIDownloadViewController setDownloadManager:]
  -[VUIDownloadViewController initWithMediaLibrary:]
  -[VUIDownloadViewController downloadEntities]
  -[VUIDownloadViewController downloadManager:downloadedFetchDidFinishWithEntities:]
  -[VUIDownloadViewController downloadEntitiesTableView]
  -[VUIDownloadViewController _editToggled]
  -[VUIDownloadViewController _exitEditingMode]
  -[VUIDownloadViewController _configureAlertControllerForIndexPath:]
  -[VUIDownloadViewController assetControllersToRemove]
  -[VUIDownloadViewController downloadCellDidRequestCancelDownload:]
  -[VUIDownloadViewController setDownloadEntitiesTableView:]
  -[VUIDownloadViewController setAssetControllersToRemove:]
  -[VUIDownloadViewController _updateMediaEntitiesWithNewDownloads:]
  -[VUIDownloadViewController setDownloadEntities:]


VUIActionRemoveFromPlayHistory : VUIAction
 @property  NSString *deleteID
 @property  NSString *canonicalID
 @property  BOOL isContinueWatching

  // instance methods
  -[VUIActionRemoveFromPlayHistory .cxx_destruct]
  -[VUIActionRemoveFromPlayHistory canonicalID]
  -[VUIActionRemoveFromPlayHistory setCanonicalID:]
  -[VUIActionRemoveFromPlayHistory performWithTargetResponder:completionHandler:]
  -[VUIActionRemoveFromPlayHistory initWithContextData:isContinueWatching:]
  -[VUIActionRemoveFromPlayHistory deleteID]
  -[VUIActionRemoveFromPlayHistory setDeleteID:]
  -[VUIActionRemoveFromPlayHistory isContinueWatching]
  -[VUIActionRemoveFromPlayHistory setIsContinueWatching:]


VUIAccessView_tvOS : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <TVCarouselViewDataSource, TVCarouselViewDelegate>
 @property  UIView *privacyView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAccessView_tvOS iconSize]

  // instance methods
  -[VUIAccessView_tvOS dealloc]
  -[VUIAccessView_tvOS .cxx_destruct]
  -[VUIAccessView_tvOS setTitle:]
  -[VUIAccessView_tvOS layoutSubviews]
  -[VUIAccessView_tvOS setBody:]
  -[VUIAccessView_tvOS allowButton]
  -[VUIAccessView_tvOS numberOfItemsInCarouselView:]
  -[VUIAccessView_tvOS carouselView:cellForItemAtIndex:]
  -[VUIAccessView_tvOS _buttonWithTitleForTV:textStyle:]
  -[VUIAccessView_tvOS _buildCarousel]
  -[VUIAccessView_tvOS _buildLogoStack]
  -[VUIAccessView_tvOS _imageViewForIndex:]
  -[VUIAccessView_tvOS initWithApps:]
  -[VUIAccessView_tvOS disallowButton]
  -[VUIAccessView_tvOS seeAllButton]
  -[VUIAccessView_tvOS nackButton]
  -[VUIAccessView_tvOS bodyScroll]
  -[VUIAccessView_tvOS showNackScreen]
  -[VUIAccessView_tvOS privacyView]
  -[VUIAccessView_tvOS setPrivacyView:]
  -[VUIAccessView_tvOS _buildButtonStack]
  -[VUIAccessView_tvOS _buildSeeAllButtonStack]


VUIFavoriteViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  long long layoutType
 @property  VUITextLayout *titleTextLayout
 @property  TVImageLayout *logoImageLayout
 @property  TVImageLayout *accessoryImageLayout

  // class methods
  +[VUIFavoriteViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIFavoriteViewLayout .cxx_destruct]
  -[VUIFavoriteViewLayout initWithType:]
  -[VUIFavoriteViewLayout layoutType]
  -[VUIFavoriteViewLayout titleTextLayout]
  -[VUIFavoriteViewLayout logoImageLayout]
  -[VUIFavoriteViewLayout accessoryImageLayout]


VUIContentMetadata : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *type
 @property  unsigned long contentType
 @property  NSString *title
 @property  NSString *mediaDescription
 @property  NSString *artworkURLFormat
 @property  NSNumber *artworkWidth
 @property  NSNumber *artworkHeight
 @property  NSString *previewFrameURLFormat
 @property  NSNumber *previewFrameWidth
 @property  NSNumber *previewFrameHeight
 @property  NSString *showArtworkURLFormat
 @property  NSNumber *showArtworkWidth
 @property  NSNumber *showArtworkHeight
 @property  NSString *ratingName
 @property  NSString *ratingSystem
 @property  NSString *ratingDomain
 @property  NSDate *releasedDate
 @property  NSString *formattedReleaseDate
 @property  NSDate *rentalExpiration
 @property  NSString *genre
 @property  NSNumber *duration
 @property  NSNumber *tomatoPercentage
 @property  unsigned long tomatoFreshness
 @property  NSNumber *commonSenseRecommendedAge
 @property  NSNumber *videoResolutionClass
 @property  NSNumber *videoDynamicRange
 @property  NSNumber *hasClosedCaptions
 @property  NSNumber *hasADLocales
 @property  NSNumber *hasSDHLocales
 @property  NSNumber *hasDolbyAtmos
 @property  NSString *showTitle
 @property  NSString *seasonTitle
 @property  NSNumber *seasonNumber
 @property  NSNumber *episodeNumber
 @property  BOOL isAdultContent
 @property  NSNumber *ratingValue

  // instance methods
  -[VUIContentMetadata type]
  -[VUIContentMetadata .cxx_destruct]
  -[VUIContentMetadata initWithDictionary:]
  -[VUIContentMetadata title]
  -[VUIContentMetadata contentType]
  -[VUIContentMetadata duration]
  -[VUIContentMetadata genre]
  -[VUIContentMetadata videoDynamicRange]
  -[VUIContentMetadata showTitle]
  -[VUIContentMetadata seasonNumber]
  -[VUIContentMetadata episodeNumber]
  -[VUIContentMetadata ratingSystem]
  -[VUIContentMetadata ratingValue]
  -[VUIContentMetadata artworkWidth]
  -[VUIContentMetadata artworkHeight]
  -[VUIContentMetadata ratingName]
  -[VUIContentMetadata mediaDescription]
  -[VUIContentMetadata formattedReleaseDate]
  -[VUIContentMetadata releasedDate]
  -[VUIContentMetadata hasClosedCaptions]
  -[VUIContentMetadata hasADLocales]
  -[VUIContentMetadata hasSDHLocales]
  -[VUIContentMetadata tomatoPercentage]
  -[VUIContentMetadata commonSenseRecommendedAge]
  -[VUIContentMetadata tomatoFreshness]
  -[VUIContentMetadata videoResolutionClass]
  -[VUIContentMetadata hasDolbyAtmos]
  -[VUIContentMetadata rentalExpiration]
  -[VUIContentMetadata showArtworkURLFormat]
  -[VUIContentMetadata showArtworkWidth]
  -[VUIContentMetadata showArtworkHeight]
  -[VUIContentMetadata seasonTitle]
  -[VUIContentMetadata ratingDomain]
  -[VUIContentMetadata isAdultContent]
  -[VUIContentMetadata artworkURLFormat]
  -[VUIContentMetadata previewFrameURLFormat]
  -[VUIContentMetadata previewFrameWidth]
  -[VUIContentMetadata previewFrameHeight]


VUIMPDeviceMediaLibrary : VUIDeviceMediaLibrary
 @property  VUIMPMediaLibrary *mediaLibrary

  // class methods
  +[VUIMPDeviceMediaLibrary _isUpdateInProgress]
  +[VUIMPDeviceMediaLibrary _isInitialUpdateInProgress]

  // instance methods
  -[VUIMPDeviceMediaLibrary dealloc]
  -[VUIMPDeviceMediaLibrary .cxx_destruct]
  -[VUIMPDeviceMediaLibrary initWithManager:]
  -[VUIMPDeviceMediaLibrary title]
  -[VUIMPDeviceMediaLibrary isUpdating]
  -[VUIMPDeviceMediaLibrary mediaLibrary]
  -[VUIMPDeviceMediaLibrary setMediaLibrary:]
  -[VUIMPDeviceMediaLibrary _handleApplicationDidBecomeActiveNotification:]
  -[VUIMPDeviceMediaLibrary _handleApplicationWillResignActiveNotification:]
  -[VUIMPDeviceMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUIMPDeviceMediaLibrary initWithIdentifier:type:manager:]
  -[VUIMPDeviceMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUIMPDeviceMediaLibrary saveMediaEntity:completionHandler:]
  -[VUIMPDeviceMediaLibrary _imageLoaderIdentifier]
  -[VUIMPDeviceMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUIMPDeviceMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIMPDeviceMediaLibrary _handleMediaLibraryContentsDidChangeNotification:]
  -[VUIMPDeviceMediaLibrary _handleMediaLibraryIsUpdateInProgressDidChangeNotification:]
  -[VUIMPDeviceMediaLibrary isInitialUpdateInProgress]
  -[VUIMPDeviceMediaLibrary updateProgressWithCompletionHandler:]
  -[VUIMPDeviceMediaLibrary updateFromCloudWithReason:]


VUIAppDocumentUpdateEventStore : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *eventByEventDescriptor
 @property  NSArray *events

  // instance methods
  -[VUIAppDocumentUpdateEventStore init]
  -[VUIAppDocumentUpdateEventStore .cxx_destruct]
  -[VUIAppDocumentUpdateEventStore events]
  -[VUIAppDocumentUpdateEventStore addEvents:]
  -[VUIAppDocumentUpdateEventStore addEvent:]
  -[VUIAppDocumentUpdateEventStore removeAllEvents]
  -[VUIAppDocumentUpdateEventStore eventByEventDescriptor]
  -[VUIAppDocumentUpdateEventStore setEventByEventDescriptor:]


VUIFocusableTextView : TVFocusableTextView /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <VUILabelTopMarginCalculationProtocol>
 @property  VUITextLayout *textLayout
 @property  VUITextLayout *titleTextLayout
 @property  VUILabel *computationLabel

  // class methods
  +[VUIFocusableTextView textViewWithElement:textLayout:existingTextView:]
  +[VUIFocusableTextView textViewWithString:textLayout:existingTextView:]
  +[VUIFocusableTextView textViewWithString:textLayout:titleString:titleLayout:existingTextView:]
  +[VUIFocusableTextView textViewWithElement:textLayout:titleElement:titleLayout:existingTextView:]

  // instance methods
  -[VUIFocusableTextView .cxx_destruct]
  -[VUIFocusableTextView traitCollectionDidChange:]
  -[VUIFocusableTextView setTextLayout:]
  -[VUIFocusableTextView textLayout]
  -[VUIFocusableTextView _updateTextColor]
  -[VUIFocusableTextView titleTextLayout]
  -[VUIFocusableTextView topMarginWithBaselineMargin:]
  -[VUIFocusableTextView bottomMarginWithBaselineMargin:]
  -[VUIFocusableTextView topMarginToLabel:withBaselineMargin:]
  -[VUIFocusableTextView computationLabel]
  -[VUIFocusableTextView setTitleTextLayout:]
  -[VUIFocusableTextView setComputationLabel:]


VideosExtrasLockupCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VideosExtrasCarouselCollectionViewCell>
 @property  IKLockupElement *lockup
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasLockupCollectionViewCell .cxx_destruct]
  -[VideosExtrasLockupCollectionViewCell prepareForReuse]
  -[VideosExtrasLockupCollectionViewCell initWithFrame:]
  -[VideosExtrasLockupCollectionViewCell setHighlighted:]
  -[VideosExtrasLockupCollectionViewCell updateConstraints]
  -[VideosExtrasLockupCollectionViewCell itemIndex]
  -[VideosExtrasLockupCollectionViewCell setItemIndex:]
  -[VideosExtrasLockupCollectionViewCell setTitleText:]
  -[VideosExtrasLockupCollectionViewCell titleText]
  -[VideosExtrasLockupCollectionViewCell descriptionText]
  -[VideosExtrasLockupCollectionViewCell setDescriptionText:]
  -[VideosExtrasLockupCollectionViewCell subtitleText]
  -[VideosExtrasLockupCollectionViewCell setSubtitleText:]
  -[VideosExtrasLockupCollectionViewCell thumbnailImage]
  -[VideosExtrasLockupCollectionViewCell setThumbnailImage:]
  -[VideosExtrasLockupCollectionViewCell _handlePinchGesture:]
  -[VideosExtrasLockupCollectionViewCell lockup]
  -[VideosExtrasLockupCollectionViewCell setLockup:]
  -[VideosExtrasLockupCollectionViewCell titleTextStyle]
  -[VideosExtrasLockupCollectionViewCell subtitleTextStyle]
  -[VideosExtrasLockupCollectionViewCell prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasLockupCollectionViewCell performZoomingImageTransitionWithContext:]
  -[VideosExtrasLockupCollectionViewCell finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasLockupCollectionViewCell setZoomingImageTransitionIdentifier:]
  -[VideosExtrasLockupCollectionViewCell descriptionTextStyle]
  -[VideosExtrasLockupCollectionViewCell setThumbnailImagePlaceholder:]
  -[VideosExtrasLockupCollectionViewCell setThumbnailOverlayImage:]
  -[VideosExtrasLockupCollectionViewCell setThumbnailMaxSize:]
  -[VideosExtrasLockupCollectionViewCell thumbnailMaxSize]
  -[VideosExtrasLockupCollectionViewCell setThumbnailBorderColor:]
  -[VideosExtrasLockupCollectionViewCell setThumbnailImageAccessibilityText:]
  -[VideosExtrasLockupCollectionViewCell setAllowsPinchingThumbnailImageForInteractiveZoomingImageTransition:]


VUIHomeAppDocumentServiceViewController : VUICanvasAppDocumentServiceViewController
  // instance methods
  -[VUIHomeAppDocumentServiceViewController automaticallyProvidesMediaController]
  -[VUIHomeAppDocumentServiceViewController initWithDocumentServiceRequest:loadImmediately:documentRef:viewControllerIdentifier:]


VUIMediaEntitiesToGroupsValueTransformer : NSValueTransformer /usr/lib/libMobileGestalt.dylib
 @property  NSString *identifierKeyPath
 @property  NSString *sortIndexKeyPath
 @property  @? groupsSortComparator
 @property  BOOL performDefaultSort

  // class methods
  +[VUIMediaEntitiesToGroupsValueTransformer allowsReverseTransformation]
  +[VUIMediaEntitiesToGroupsValueTransformer transformedValueClass]

  // instance methods
  -[VUIMediaEntitiesToGroupsValueTransformer init]
  -[VUIMediaEntitiesToGroupsValueTransformer .cxx_destruct]
  -[VUIMediaEntitiesToGroupsValueTransformer transformedValue:]
  -[VUIMediaEntitiesToGroupsValueTransformer initWithIdentifierKeyPath:]
  -[VUIMediaEntitiesToGroupsValueTransformer setGroupsSortComparator:]
  -[VUIMediaEntitiesToGroupsValueTransformer setPerformDefaultSort:]
  -[VUIMediaEntitiesToGroupsValueTransformer setSortIndexKeyPath:]
  -[VUIMediaEntitiesToGroupsValueTransformer identifierKeyPath]
  -[VUIMediaEntitiesToGroupsValueTransformer sortIndexKeyPath]
  -[VUIMediaEntitiesToGroupsValueTransformer groupsSortComparator]
  -[VUIMediaEntitiesToGroupsValueTransformer performDefaultSort]
  -[VUIMediaEntitiesToGroupsValueTransformer setIdentifierKeyPath:]


VUIActionTypeGDPR : VUIAction
 @property  NSDictionary *contextData
 @property  IKAppContext *appContext

  // instance methods
  -[VUIActionTypeGDPR .cxx_destruct]
  -[VUIActionTypeGDPR setContextData:]
  -[VUIActionTypeGDPR contextData]
  -[VUIActionTypeGDPR appContext]
  -[VUIActionTypeGDPR setAppContext:]
  -[VUIActionTypeGDPR performWithTargetResponder:completionHandler:]
  -[VUIActionTypeGDPR initWithContextData:appContext:]


VUIMediaItemEntityTypesFetchResponse : NSObject /usr/lib/libSystem.B.dylib
 @property  NSOrderedSet *mediaItemEntityTypes
 @property  BOOL localMediaItemsAvailable

  // instance methods
  -[VUIMediaItemEntityTypesFetchResponse init]
  -[VUIMediaItemEntityTypesFetchResponse .cxx_destruct]
  -[VUIMediaItemEntityTypesFetchResponse _updateWithResponse:changes:replaceContentsOnNilChanges:]
  -[VUIMediaItemEntityTypesFetchResponse setMediaItemEntityTypes:]
  -[VUIMediaItemEntityTypesFetchResponse setLocalMediaItemsAvailable:]
  -[VUIMediaItemEntityTypesFetchResponse mediaItemEntityTypes]
  -[VUIMediaItemEntityTypesFetchResponse areLocalMediaItemsAvailable]


VUISportsProductBannerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIProductUberBackgroundInterface>
 @property  VUIProductUberBackgroundView *uberBackgroundView
 @property  UIView *whiteBackgroundView
 @property  VUISportsProductBannerView *bannerView
 @property  IKViewElement *viewElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isUberLayoutActive
 @property  {CGSize=dd} size
 @property  double topThreshold

  // instance methods
  -[VUISportsProductBannerViewController .cxx_destruct]
  -[VUISportsProductBannerViewController size]
  -[VUISportsProductBannerViewController preferredFocusEnvironments]
  -[VUISportsProductBannerViewController initWithNibName:bundle:]
  -[VUISportsProductBannerViewController viewDidLoad]
  -[VUISportsProductBannerViewController viewDidLayoutSubviews]
  -[VUISportsProductBannerViewController bannerView]
  -[VUISportsProductBannerViewController setBannerView:]
  -[VUISportsProductBannerViewController viewElement]
  -[VUISportsProductBannerViewController setViewElement:]
  -[VUISportsProductBannerViewController isUberLayoutActive]
  -[VUISportsProductBannerViewController setUberImageOffset:]
  -[VUISportsProductBannerViewController setBannerOpacity:]
  -[VUISportsProductBannerViewController topThreshold]
  -[VUISportsProductBannerViewController _configureViewSubviews]
  -[VUISportsProductBannerViewController uberBackgroundView]
  -[VUISportsProductBannerViewController setUberBackgroundView:]
  -[VUISportsProductBannerViewController setWhiteBannerOpacity:]
  -[VUISportsProductBannerViewController whiteBackgroundView]
  -[VUISportsProductBannerViewController setWhiteBackgroundView:]


VUIRouterDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIEventDataSource *selectEventDataSource
 @property  VUIEventDataSource *playEventDataSource
 @property  VUIEventDataSource *contextMenuEventDataSource

  // instance methods
  -[VUIRouterDataSource .cxx_destruct]
  -[VUIRouterDataSource initWithRouterData:viewElement:]
  -[VUIRouterDataSource playEventDataSource]
  -[VUIRouterDataSource selectEventDataSource]
  -[VUIRouterDataSource contextMenuEventDataSource]
  -[VUIRouterDataSource setSelectEventDataSource:]
  -[VUIRouterDataSource setPlayEventDataSource:]
  -[VUIRouterDataSource setContextMenuEventDataSource:]


VUILibraryLockupViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIRentalExpirationLabelDelegate>
 @property  _TVImageView *imageView
 @property  double imageAspectRatio
 @property  VUILabel *titleLabel
 @property  VUIRentalExpirationLabel *expirationLabel
 @property  BOOL hideTitleLabel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUILibraryLockupViewCell configureLockupCell:withMedia:width:forMetrics:]

  // instance methods
  -[VUILibraryLockupViewCell .cxx_destruct]
  -[VUILibraryLockupViewCell prepareForReuse]
  -[VUILibraryLockupViewCell initWithFrame:]
  -[VUILibraryLockupViewCell titleLabel]
  -[VUILibraryLockupViewCell sizeThatFits:]
  -[VUILibraryLockupViewCell layoutSubviews]
  -[VUILibraryLockupViewCell imageView]
  -[VUILibraryLockupViewCell setHighlighted:]
  -[VUILibraryLockupViewCell setTitleLabel:]
  -[VUILibraryLockupViewCell setImageView:]
  -[VUILibraryLockupViewCell imageAspectRatio]
  -[VUILibraryLockupViewCell setImageAspectRatio:]
  -[VUILibraryLockupViewCell bottomMarginWithBaselineMargin:]
  -[VUILibraryLockupViewCell rentalExpirationLabelNeedsRelayout:]
  -[VUILibraryLockupViewCell setExpirationLabel:]
  -[VUILibraryLockupViewCell setHideTitleLabel:]
  -[VUILibraryLockupViewCell hideTitleLabel]
  -[VUILibraryLockupViewCell expirationLabel]


VUIDebugMetricsImpressionViewController : UITableViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSArray *array

  // instance methods
  -[VUIDebugMetricsImpressionViewController init]
  -[VUIDebugMetricsImpressionViewController object]
  -[VUIDebugMetricsImpressionViewController array]
  -[VUIDebugMetricsImpressionViewController setObject:]
  -[VUIDebugMetricsImpressionViewController setArray:]
  -[VUIDebugMetricsImpressionViewController .cxx_destruct]
  -[VUIDebugMetricsImpressionViewController viewDidLoad]
  -[VUIDebugMetricsImpressionViewController tableView:numberOfRowsInSection:]
  -[VUIDebugMetricsImpressionViewController tableView:cellForRowAtIndexPath:]
  -[VUIDebugMetricsImpressionViewController numberOfSectionsInTableView:]
  -[VUIDebugMetricsImpressionViewController tableView:heightForRowAtIndexPath:]
  -[VUIDebugMetricsImpressionViewController tableView:didSelectRowAtIndexPath:]


VUIAppInstallCoordinator : NSObject /usr/lib/libSystem.B.dylib
 @property  WLKChannelDetails *channelDetails
 @property  NSString *contentTitle
 @property  VUIAppInstallerViewController *installerViewController
 @property  VUIAccessViewController *accessViewController
 @property  NSUUID *uuid

  // instance methods
  -[VUIAppInstallCoordinator isEqual:]
  -[VUIAppInstallCoordinator .cxx_destruct]
  -[VUIAppInstallCoordinator uuid]
  -[VUIAppInstallCoordinator setUuid:]
  -[VUIAppInstallCoordinator contentTitle]
  -[VUIAppInstallCoordinator channelDetails]
  -[VUIAppInstallCoordinator setChannelDetails:]
  -[VUIAppInstallCoordinator accessViewController]
  -[VUIAppInstallCoordinator _installAppWithChannel:completion:]
  -[VUIAppInstallCoordinator setInstallerViewController:]
  -[VUIAppInstallCoordinator initWithChannelDetails:contentTitle:]
  -[VUIAppInstallCoordinator installAppWithCompletion:]
  -[VUIAppInstallCoordinator setContentTitle:]
  -[VUIAppInstallCoordinator installerViewController]
  -[VUIAppInstallCoordinator setAccessViewController:]


VUIShareURLActivityItem : NSObject /usr/lib/libSystem.B.dylib <UIActivityItemSource, UIActivityItemLinkPresentationSource>
 @property  NSURL *shareURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIShareURLActivityItem .cxx_destruct]
  -[VUIShareURLActivityItem activityViewControllerPlaceholderItem:]
  -[VUIShareURLActivityItem activityViewController:itemForActivityType:]
  -[VUIShareURLActivityItem shareURL]
  -[VUIShareURLActivityItem activityViewControllerLinkPresentationMetadata:]
  -[VUIShareURLActivityItem initWithURL:title:subtitle:imageURL:]


VUIUpNextStateView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *label
 @property  _TVImageView *imageView

  // instance methods
  -[VUIUpNextStateView .cxx_destruct]
  -[VUIUpNextStateView setLabel:]
  -[VUIUpNextStateView label]
  -[VUIUpNextStateView imageView]
  -[VUIUpNextStateView setImageView:]


VUIUpNextButtonProperties : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *canonicalID
 @property  BOOL isWatchListed
 @property  BOOL dismissOnSelect
 @property  VUIUpNextStateView *addedStateView
 @property  VUIUpNextStateView *removedStateView
 @property  VUIButton<VUIUpNextButtonProtocol> *delegate

  // class methods
  +[VUIUpNextButtonProperties configureWithElement:existingButton:]

  // instance methods
  -[VUIUpNextButtonProperties init]
  -[VUIUpNextButtonProperties dealloc]
  -[VUIUpNextButtonProperties delegate]
  -[VUIUpNextButtonProperties setDelegate:]
  -[VUIUpNextButtonProperties .cxx_destruct]
  -[VUIUpNextButtonProperties isWatchListed]
  -[VUIUpNextButtonProperties canonicalID]
  -[VUIUpNextButtonProperties setIsWatchListed:]
  -[VUIUpNextButtonProperties setCanonicalID:]
  -[VUIUpNextButtonProperties addedStateView]
  -[VUIUpNextButtonProperties removedStateView]
  -[VUIUpNextButtonProperties updateButtonContentView]
  -[VUIUpNextButtonProperties callAPIAndToggleUpNextState]
  -[VUIUpNextButtonProperties dismissOnSelect]
  -[VUIUpNextButtonProperties _errorInUpdatingState:]
  -[VUIUpNextButtonProperties setDismissOnSelect:]
  -[VUIUpNextButtonProperties _toggleUpNextState]


VUIAppIconImageService : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIAppIconImageService _cachePath]
  +[VUIAppIconImageService iconCornerRadiusForSize:]
  +[VUIAppIconImageService fetchIconForInstallable:size:completion:]
  +[VUIAppIconImageService _keyForInstallable:size:]
  +[VUIAppIconImageService _cachedImageForKey:]
  +[VUIAppIconImageService _imageURLForInstallable:size:]
  +[VUIAppIconImageService _cacheImage:forKey:]
  +[VUIAppIconImageService _MD5StringForString:]


VUIPlistSeasonMediaCollection : VUIMediaCollection <VUIPlistMediaEntityImageLoadParamsCreating>
 @property  VUIPlistMediaDatabaseSeason *databaseSeason

  // instance methods
  -[VUIPlistSeasonMediaCollection .cxx_destruct]
  -[VUIPlistSeasonMediaCollection showTitle]
  -[VUIPlistSeasonMediaCollection seasonNumber]
  -[VUIPlistSeasonMediaCollection showIdentifier]
  -[VUIPlistSeasonMediaCollection playedState]
  -[VUIPlistSeasonMediaCollection imageLoadParamsWithImageType:]
  -[VUIPlistSeasonMediaCollection initWithMediaLibrary:databaseSeason:requestedProperties:]
  -[VUIPlistSeasonMediaCollection initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIPlistSeasonMediaCollection mediaItemCount]
  -[VUIPlistSeasonMediaCollection databaseSeason]
  -[VUIPlistSeasonMediaCollection coverArtImageIdentifier]
  -[VUIPlistSeasonMediaCollection _valueForPropertyDescriptor:]
  -[VUIPlistSeasonMediaCollection setDatabaseSeason:]


VUIFeedbackView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *prototypeSubtitleLabel
 @property  VUILabel *prototypeHeaderLabel
 @property  VUIFeedbackLayout *layout
 @property  UIView *headerView
 @property  VUILabel *headerSubtitleLabel
 @property  _TVImageView *headerBadgeView
 @property  VUILabel *sourceLabel
 @property  _TVImageView *sourceBadgeView
 @property  TVRatingBadgeView *ratingView
 @property  UIView *descriptionView
 @property  {CGSize=dd} headerBadgeSize
 @property  {CGSize=dd} sourceBadgeSize

  // class methods
  +[VUIFeedbackView headerBadgeViewWithImageElement:layout:existingView:]
  +[VUIFeedbackView headerImageViewWithString:layout:existingView:]
  +[VUIFeedbackView headerTitleViewWithString:layout:existingView:]
  +[VUIFeedbackView headerSubtitleLabelWithString:layout:existingView:]
  +[VUIFeedbackView sourceBadgeViewWithImageElement:layout:existingView:]
  +[VUIFeedbackView sourceLabelWithString:layout:existingView:]
  +[VUIFeedbackView descriptionViewWithElement:layout:existingView:]
  +[VUIFeedbackView _scaledBadgeSizeWithImageLayout:traitCollection:]

  // instance methods
  -[VUIFeedbackView .cxx_destruct]
  -[VUIFeedbackView layout]
  -[VUIFeedbackView setLayout:]
  -[VUIFeedbackView sizeThatFits:]
  -[VUIFeedbackView layoutSubviews]
  -[VUIFeedbackView headerView]
  -[VUIFeedbackView setHeaderView:]
  -[VUIFeedbackView setSemanticContentAttribute:]
  -[VUIFeedbackView sourceLabel]
  -[VUIFeedbackView setDescriptionView:]
  -[VUIFeedbackView descriptionView]
  -[VUIFeedbackView ratingView]
  -[VUIFeedbackView setRatingView:]
  -[VUIFeedbackView prepareForCellReuse]
  -[VUIFeedbackView headerBadgeView]
  -[VUIFeedbackView headerSubtitleLabel]
  -[VUIFeedbackView sourceBadgeView]
  -[VUIFeedbackView setHeaderBadgeView:]
  -[VUIFeedbackView setHeaderBadgeSize:]
  -[VUIFeedbackView setHeaderSubtitleLabel:]
  -[VUIFeedbackView setSourceLabel:]
  -[VUIFeedbackView setSourceBadgeView:]
  -[VUIFeedbackView setSourceBadgeSize:]
  -[VUIFeedbackView headerBadgeSize]
  -[VUIFeedbackView sourceBadgeSize]
  -[VUIFeedbackView prototypeSubtitleLabel]
  -[VUIFeedbackView setPrototypeSubtitleLabel:]
  -[VUIFeedbackView prototypeHeaderLabel]
  -[VUIFeedbackView setPrototypeHeaderLabel:]


VUIMPMediaCollection : VUIMediaCollection <VUIMPMediaEntityImageLoadParamsCreating>
 @property  MPMediaItemCollection *mediaItemCollection

  // instance methods
  -[VUIMPMediaCollection .cxx_destruct]
  -[VUIMPMediaCollection isLocal]
  -[VUIMPMediaCollection resolution]
  -[VUIMPMediaCollection contentRating]
  -[VUIMPMediaCollection assetController]
  -[VUIMPMediaCollection HLSResolution]
  -[VUIMPMediaCollection HLSColorCapability]
  -[VUIMPMediaCollection colorCapability]
  -[VUIMPMediaCollection HLSAudioCapability]
  -[VUIMPMediaCollection audioCapability]
  -[VUIMPMediaCollection initWithMediaLibrary:mediaItemCollection:identifier:requestedProperties:kind:]
  -[VUIMPMediaCollection mediaItemCollection]
  -[VUIMPMediaCollection showIdentifier]
  -[VUIMPMediaCollection playedState]
  -[VUIMPMediaCollection imageLoadParamsWithImageType:]
  -[VUIMPMediaCollection initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIMPMediaCollection coverArtImageIdentifier]
  -[VUIMPMediaCollection _valueForPropertyDescriptor:]
  -[VUIMPMediaCollection setMediaItemCollection:]


_VUIAppDocumentUpdateEventObserverContext : NSObject /usr/lib/libSystem.B.dylib
 @property  NSSet *eventDescriptors
 @property  NSMutableDictionary *refreshTimerByEventDescriptor
 @property  @? refreshTimerFiredBlock

  // instance methods
  -[_VUIAppDocumentUpdateEventObserverContext dealloc]
  -[_VUIAppDocumentUpdateEventObserverContext invalidate]
  -[_VUIAppDocumentUpdateEventObserverContext .cxx_destruct]
  -[_VUIAppDocumentUpdateEventObserverContext eventDescriptors]
  -[_VUIAppDocumentUpdateEventObserverContext setEventDescriptors:]
  -[_VUIAppDocumentUpdateEventObserverContext setRefreshTimerFiredBlock:]
  -[_VUIAppDocumentUpdateEventObserverContext _cancelAllRefreshTimers]
  -[_VUIAppDocumentUpdateEventObserverContext refreshTimerByEventDescriptor]
  -[_VUIAppDocumentUpdateEventObserverContext _refreshTimerWithRefreshTimeEventDescriptor:]
  -[_VUIAppDocumentUpdateEventObserverContext _startRefreshTimer:]
  -[_VUIAppDocumentUpdateEventObserverContext _cancelRefreshTimers:]
  -[_VUIAppDocumentUpdateEventObserverContext setRefreshTimerByEventDescriptor:]
  -[_VUIAppDocumentUpdateEventObserverContext refreshTimerFiredBlock]
  -[_VUIAppDocumentUpdateEventObserverContext _cancelRefreshTimer:]


VUIAppDocumentUpdateEventMonitor : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMapTable *observerMapTable
 @property  int playbackReportToken
 @property  NSDate *lastProcesssedPlayActivity

  // class methods
  +[VUIAppDocumentUpdateEventMonitor sharedMonitor]
  +[VUIAppDocumentUpdateEventMonitor _isAppRefreshEventType:]

  // instance methods
  -[VUIAppDocumentUpdateEventMonitor init]
  -[VUIAppDocumentUpdateEventMonitor dealloc]
  -[VUIAppDocumentUpdateEventMonitor .cxx_destruct]
  -[VUIAppDocumentUpdateEventMonitor _init]
  -[VUIAppDocumentUpdateEventMonitor removeObserver:]
  -[VUIAppDocumentUpdateEventMonitor _handleLocationDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _notifyObserversOfEvent:]
  -[VUIAppDocumentUpdateEventMonitor _handleAppWillEnterForegroundNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleMediaLibraryContentsDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleSettingsDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleAppLibraryDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleUpNextRequestDidFinishNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handlePurchaseFlowDidFinishNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleSubscriptionDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleFavoritesRequestDidFinishNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleRemoveFromPlayHistoryRequestDidFinishNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleClearFromPlayHistoryRequestDidFinishNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleAccountDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleRestrictionsDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleUTSKDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handlePreferredVideoFormatDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handlePlayHistoryUpdatedNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleLocationAuthorizationDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleAppDidEnterBackgroundNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleClearPlayHistoryNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleNowPlayingWillStartNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handleNowPlayingDidEndNotification:]
  -[VUIAppDocumentUpdateEventMonitor _handlePlaybackReportNotification]
  -[VUIAppDocumentUpdateEventMonitor observerMapTable]
  -[VUIAppDocumentUpdateEventMonitor _notifyObserver:ofRefreshEvent:]
  -[VUIAppDocumentUpdateEventMonitor lastProcesssedPlayActivity]
  -[VUIAppDocumentUpdateEventMonitor setLastProcesssedPlayActivity:]
  -[VUIAppDocumentUpdateEventMonitor addObserver:forEventDescriptors:]
  -[VUIAppDocumentUpdateEventMonitor _handleEntitlementsDidChangeNotification:]
  -[VUIAppDocumentUpdateEventMonitor setObserverMapTable:]
  -[VUIAppDocumentUpdateEventMonitor playbackReportToken]
  -[VUIAppDocumentUpdateEventMonitor setPlaybackReportToken:]


VUIVPPAManager : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIAccessViewController *accessViewController

  // class methods
  +[VUIVPPAManager sharedInstance]
  +[VUIVPPAManager _isReminderDue:reminderInterval:]
  +[VUIVPPAManager addUniqueChannels:channels:]
  +[VUIVPPAManager _getConsentedChannels]
  +[VUIVPPAManager _getDeniedChannels]
  +[VUIVPPAManager channelAlreadyExists:channelID:]

  // instance methods
  -[VUIVPPAManager .cxx_destruct]
  -[VUIVPPAManager _rootViewController]
  -[VUIVPPAManager accessViewController]
  -[VUIVPPAManager setAccessViewController:]
  -[VUIVPPAManager _isChannelVPPAPromptEligible:]
  -[VUIVPPAManager _isVPPAPromptDueForConfig:]
  -[VUIVPPAManager _presentVPPAConsentScreen:vppaState:completion:]
  -[VUIVPPAManager _getVPPABulkChannels:]
  -[VUIVPPAManager _getEligibleBulkChannels]
  -[VUIVPPAManager startVPPAConsentFlow:completion:]


VUIChannelBannerLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  BOOL isSubscribed
 @property  BOOL descriptionPreferredOnPhoneSizeClass
 @property  VUIAppleTVChannelLogoLayout *channelLogoLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  VUITextLayout *textLayout
 @property  VUITextLayout *disclaimerTextLayout
 @property  VUIButtonLayout *subscribeButtonLayout

  // class methods
  +[VUIChannelBannerLayout layoutWithLayout:element:]

  // instance methods
  -[VUIChannelBannerLayout init]
  -[VUIChannelBannerLayout .cxx_destruct]
  -[VUIChannelBannerLayout setTextLayout:]
  -[VUIChannelBannerLayout textLayout]
  -[VUIChannelBannerLayout isSubscribed]
  -[VUIChannelBannerLayout setIsSubscribed:]
  -[VUIChannelBannerLayout descriptionTextLayout]
  -[VUIChannelBannerLayout setDescriptionTextLayout:]
  -[VUIChannelBannerLayout setDescriptionPreferredOnPhoneSizeClass:]
  -[VUIChannelBannerLayout channelLogoLayout]
  -[VUIChannelBannerLayout disclaimerTextLayout]
  -[VUIChannelBannerLayout subscribeButtonLayout]
  -[VUIChannelBannerLayout descriptionPreferredOnPhoneSizeClass]
  -[VUIChannelBannerLayout setChannelLogoLayout:]
  -[VUIChannelBannerLayout setDisclaimerTextLayout:]
  -[VUIChannelBannerLayout setSubscribeButtonLayout:]


VUIDebugMetricsEventListViewController : UITableViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSArray *events

  // instance methods
  -[VUIDebugMetricsEventListViewController .cxx_destruct]
  -[VUIDebugMetricsEventListViewController events]
  -[VUIDebugMetricsEventListViewController setEvents:]
  -[VUIDebugMetricsEventListViewController viewDidLoad]
  -[VUIDebugMetricsEventListViewController tableView:numberOfRowsInSection:]
  -[VUIDebugMetricsEventListViewController tableView:cellForRowAtIndexPath:]
  -[VUIDebugMetricsEventListViewController numberOfSectionsInTableView:]
  -[VUIDebugMetricsEventListViewController tableView:heightForRowAtIndexPath:]
  -[VUIDebugMetricsEventListViewController tableView:didSelectRowAtIndexPath:]
  -[VUIDebugMetricsEventListViewController initWithEvents:]
  -[VUIDebugMetricsEventListViewController toggleValidationMode]
  -[VUIDebugMetricsEventListViewController finishValidation]
  -[VUIDebugMetricsEventListViewController _imageFromPageContext:]


VUIVideoAdvisoryImageInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long width
 @property  unsigned long height
 @property  NSString *format

  // instance methods
  -[VUIVideoAdvisoryImageInfo .cxx_destruct]
  -[VUIVideoAdvisoryImageInfo width]
  -[VUIVideoAdvisoryImageInfo height]
  -[VUIVideoAdvisoryImageInfo format]
  -[VUIVideoAdvisoryImageInfo setWidth:]
  -[VUIVideoAdvisoryImageInfo setHeight:]
  -[VUIVideoAdvisoryImageInfo setFormat:]


VUIVideoAdvisoryLogoImageDownloader : NSObject /usr/lib/libSystem.B.dylib
 @property  TVImageProxy *ratingImageProxy

  // instance methods
  -[VUIVideoAdvisoryLogoImageDownloader .cxx_destruct]
  -[VUIVideoAdvisoryLogoImageDownloader downloadImageWithURL:imageInfo:completion:]
  -[VUIVideoAdvisoryLogoImageDownloader ratingImageProxy]
  -[VUIVideoAdvisoryLogoImageDownloader setRatingImageProxy:]


VUIMediaTagsImageHelper : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMediaTagsImageHelper initialize]
  +[VUIMediaTagsImageHelper imageWithName:flatten:]


VUIMediaEntityKind : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSDictionary *propertyDescriptorsByName
 @property  NSString *mediaEntityClassName
 @property  NSArray *propertyDescriptors

  // instance methods
  -[VUIMediaEntityKind init]
  -[VUIMediaEntityKind copyWithZone:]
  -[VUIMediaEntityKind .cxx_destruct]
  -[VUIMediaEntityKind initWithMediaEntityClassName:]
  -[VUIMediaEntityKind setPropertyDescriptors:]
  -[VUIMediaEntityKind propertyDescriptorForName:]
  -[VUIMediaEntityKind sortingPropertyDescriptorForName:]
  -[VUIMediaEntityKind setPropertyDescriptorsByName:]
  -[VUIMediaEntityKind propertyDescriptors]
  -[VUIMediaEntityKind propertyDescriptorsByName]
  -[VUIMediaEntityKind mediaEntityClassName]


VUIUIStackView : UIStackView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  long long lastOrientation
 @property  BOOL axisFollowsDeviceOrientation
 @property  BOOL alignmentFollowsDeviceOrientation

  // instance methods
  -[VUIUIStackView initWithFrame:]
  -[VUIUIStackView lastOrientation]
  -[VUIUIStackView setLastOrientation:]
  -[VUIUIStackView setAxisFollowsDeviceOrientation:]
  -[VUIUIStackView setAlignmentFollowsDeviceOrientation:]
  -[VUIUIStackView axisFollowsDeviceOrientation]
  -[VUIUIStackView alignmentFollowsDeviceOrientation]


VUIMPMediaItemDownloadControllerState : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long status
 @property  double downloadProgress
 @property  unsigned long bytesToDownload
 @property  unsigned long bytesDownloaded
 @property  BOOL downloadInProgress
 @property  BOOL downloadSucceeded

  // instance methods
  -[VUIMPMediaItemDownloadControllerState init]
  -[VUIMPMediaItemDownloadControllerState isEqual:]
  -[VUIMPMediaItemDownloadControllerState copyWithZone:]
  -[VUIMPMediaItemDownloadControllerState status]
  -[VUIMPMediaItemDownloadControllerState setStatus:]
  -[VUIMPMediaItemDownloadControllerState bytesDownloaded]
  -[VUIMPMediaItemDownloadControllerState setBytesDownloaded:]
  -[VUIMPMediaItemDownloadControllerState downloadProgress]
  -[VUIMPMediaItemDownloadControllerState setDownloadProgress:]
  -[VUIMPMediaItemDownloadControllerState setDownloadInProgress:]
  -[VUIMPMediaItemDownloadControllerState bytesToDownload]
  -[VUIMPMediaItemDownloadControllerState isDownloadInProgress]
  -[VUIMPMediaItemDownloadControllerState setBytesToDownload:]
  -[VUIMPMediaItemDownloadControllerState setDownloadSucceeded:]
  -[VUIMPMediaItemDownloadControllerState downloadSucceeded]


VUIMPMediaEntityImageLoadOperation : VUIImageLoadParamsOperation
  // instance methods
  -[VUIMPMediaEntityImageLoadOperation executionDidBegin]
  -[VUIMPMediaEntityImageLoadOperation initWithParams:scaleToSize:cropToFit:]
  -[VUIMPMediaEntityImageLoadOperation _MPMediaEntityImageLoadParams]
  -[VUIMPMediaEntityImageLoadOperation _finishWithImage:]
  -[VUIMPMediaEntityImageLoadOperation initWithParams:scaleToSize:]


VUIHomeSharingMediaItem_iOS : VUILibraryMediaItem_iOS
 @property  HSHomeSharingLibrary *homeSharingLibrary
 @property  NSURL *mediaItemURLInternal
 @property  NSString *keyBagFilePath
 @property  BOOL needsKeyBagSyncPriorToPlayback
 @property  unsigned long loadingContext

  // class methods
  +[VUIHomeSharingMediaItem_iOS initialize]

  // instance methods
  -[VUIHomeSharingMediaItem_iOS .cxx_destruct]
  -[VUIHomeSharingMediaItem_iOS homeSharingLibrary]
  -[VUIHomeSharingMediaItem_iOS loadingContext]
  -[VUIHomeSharingMediaItem_iOS setLoadingContext:]
  -[VUIHomeSharingMediaItem_iOS imageLoader]
  -[VUIHomeSharingMediaItem_iOS mediaItemURL]
  -[VUIHomeSharingMediaItem_iOS initWithMPMediaItem:]
  -[VUIHomeSharingMediaItem_iOS mediaItemMetadataForProperty:]
  -[VUIHomeSharingMediaItem_iOS hasTrait:]
  -[VUIHomeSharingMediaItem_iOS prepareForLoadingWithCompletion:]
  -[VUIHomeSharingMediaItem_iOS shouldRetryPlaybackForError:]
  -[VUIHomeSharingMediaItem_iOS updateBookmarkWithSuggestedTime:forElapsedTime:duration:playbackOfMediaItemIsEnding:]
  -[VUIHomeSharingMediaItem_iOS updatePlayCountForElapsedTime:duration:]
  -[VUIHomeSharingMediaItem_iOS cleanUpMediaItem]
  -[VUIHomeSharingMediaItem_iOS mediaItemURLInternal]
  -[VUIHomeSharingMediaItem_iOS setMediaItemURLInternal:]
  -[VUIHomeSharingMediaItem_iOS keyBagFilePath]
  -[VUIHomeSharingMediaItem_iOS needsKeyBagSyncPriorToPlayback]
  -[VUIHomeSharingMediaItem_iOS setNeedsKeyBagSyncPriorToPlayback:]
  -[VUIHomeSharingMediaItem_iOS _loadingCancelled:]
  -[VUIHomeSharingMediaItem_iOS _fetchKeybagForDSID:isFamilyAccount:completion:]
  -[VUIHomeSharingMediaItem_iOS setHomeSharingLibrary:]
  -[VUIHomeSharingMediaItem_iOS setKeyBagFilePath:]


VUIPreviewInteractionController : NSObject /usr/lib/libSystem.B.dylib <UIPreviewInteractionDelegate, UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning>
 @property  UIViewController *presentingViewController
 @property  UIViewController *presentedViewController
 @property  NSIndexPath *currentIndexPath
 @property  <VUIPreviewInteractionControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPreviewInteractionController dealloc]
  -[VUIPreviewInteractionController delegate]
  -[VUIPreviewInteractionController setDelegate:]
  -[VUIPreviewInteractionController .cxx_destruct]
  -[VUIPreviewInteractionController presentingViewController]
  -[VUIPreviewInteractionController presentedViewController]
  -[VUIPreviewInteractionController transitionDuration:]
  -[VUIPreviewInteractionController animateTransition:]
  -[VUIPreviewInteractionController animationControllerForDismissedController:]
  -[VUIPreviewInteractionController presentationControllerForPresentedViewController:presentingViewController:sourceViewController:]
  -[VUIPreviewInteractionController currentIndexPath]
  -[VUIPreviewInteractionController previewInteractionShouldBegin:]
  -[VUIPreviewInteractionController previewInteraction:didUpdatePreviewTransition:ended:]
  -[VUIPreviewInteractionController previewInteractionDidCancel:]
  -[VUIPreviewInteractionController _applicationDidEnterBackground:]
  -[VUIPreviewInteractionController initWithPresentingViewController:collectionView:controllerToPresent:]
  -[VUIPreviewInteractionController dismissConfirmation]
  -[VUIPreviewInteractionController _cleanupPreviewInteraction]


VUIMediaLibraryFetchMediaEntitiesOperation : VUIMediaLibraryOperation
 @property  NSArray *responses
 @property  NSArray *requests

  // instance methods
  -[VUIMediaLibraryFetchMediaEntitiesOperation .cxx_destruct]
  -[VUIMediaLibraryFetchMediaEntitiesOperation requests]
  -[VUIMediaLibraryFetchMediaEntitiesOperation setRequests:]
  -[VUIMediaLibraryFetchMediaEntitiesOperation responses]
  -[VUIMediaLibraryFetchMediaEntitiesOperation setResponses:]
  -[VUIMediaLibraryFetchMediaEntitiesOperation executionDidBegin]
  -[VUIMediaLibraryFetchMediaEntitiesOperation initWithMediaLibrary:requests:]
  -[VUIMediaLibraryFetchMediaEntitiesOperation initWithMediaLibrary:]


VUINowPlayingMonitorBoundaryTimeObserverInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  double time
 @property  BOOL notifiedOfEntry
 @property  NSUUID *token
 @property  @? handler

  // instance methods
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo handler]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo token]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo .cxx_destruct]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo setHandler:]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo time]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo setTime:]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo setToken:]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo notifiedOfEntry]
  -[VUINowPlayingMonitorBoundaryTimeObserverInfo setNotifiedOfEntry:]


VUINowPlayingTimerFeatureInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  NSTimer *repeatingTimer
 @property  NSTimer *oneTimeTimer
 @property  NSDate *startDate
 @property  NSDate *backgroundedDate

  // instance methods
  -[VUINowPlayingTimerFeatureInfo .cxx_destruct]
  -[VUINowPlayingTimerFeatureInfo startDate]
  -[VUINowPlayingTimerFeatureInfo setStartDate:]
  -[VUINowPlayingTimerFeatureInfo repeatingTimer]
  -[VUINowPlayingTimerFeatureInfo setRepeatingTimer:]
  -[VUINowPlayingTimerFeatureInfo oneTimeTimer]
  -[VUINowPlayingTimerFeatureInfo setOneTimeTimer:]
  -[VUINowPlayingTimerFeatureInfo backgroundedDate]
  -[VUINowPlayingTimerFeatureInfo setBackgroundedDate:]


VUINowPlayingFeatureMonitor : NSObject /usr/lib/libSystem.B.dylib <TVMediaPlaybackManagerDelegate>
 @property  NSMutableSet *features
 @property  NSMapTable *featureDependencies
 @property  NSMapTable *featureTokens
 @property  NSMapTable *featureBoundaryInfos
 @property  NSMapTable *featureTimers
 @property  <VUINowPlayingFeature> *featureLastRequestedUI
 @property  NSMutableArray *enabledUIModes
 @property  BOOL observingElapsedTime
 @property  double lastProcessedElapsedTime
 @property  NSMutableDictionary *boundaryTimeObserverInfos
 @property  id elapsedTimeObserverToken
 @property  NSObject<OS_dispatch_queue> *elapsedTimeProcessingQueue
 @property  NSMutableArray *elapsedTimes
 @property  NSArray *allFeatures
 @property  <VUINowPlayingFeatureMonitorDelegate> *delegate
 @property  NSObject<TVPAVFPlayback> *player
 @property  TVMediaPlaybackManager *playbackManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINowPlayingFeatureMonitor init]
  -[VUINowPlayingFeatureMonitor dealloc]
  -[VUINowPlayingFeatureMonitor delegate]
  -[VUINowPlayingFeatureMonitor setDelegate:]
  -[VUINowPlayingFeatureMonitor .cxx_destruct]
  -[VUINowPlayingFeatureMonitor observeValueForKeyPath:ofObject:change:context:]
  -[VUINowPlayingFeatureMonitor features]
  -[VUINowPlayingFeatureMonitor _applicationDidEnterBackground:]
  -[VUINowPlayingFeatureMonitor _applicationWillEnterForeground:]
  -[VUINowPlayingFeatureMonitor addFeature:]
  -[VUINowPlayingFeatureMonitor setFeatures:]
  -[VUINowPlayingFeatureMonitor player]
  -[VUINowPlayingFeatureMonitor setPlayer:]
  -[VUINowPlayingFeatureMonitor playbackManager]
  -[VUINowPlayingFeatureMonitor removeFeature:]
  -[VUINowPlayingFeatureMonitor allFeatures]
  -[VUINowPlayingFeatureMonitor mediaPlaybackManager:shouldEnableUIModeImplicitly:]
  -[VUINowPlayingFeatureMonitor mediaPlaybackManager:shouldHideUI:animated:animations:completion:]
  -[VUINowPlayingFeatureMonitor boundaryTimeObserverInfos]
  -[VUINowPlayingFeatureMonitor setBoundaryTimeObserverInfos:]
  -[VUINowPlayingFeatureMonitor removeFeaturesMatching:]
  -[VUINowPlayingFeatureMonitor featuresForType:]
  -[VUINowPlayingFeatureMonitor activeFeatureForType:]
  -[VUINowPlayingFeatureMonitor _cleanUpEverything]
  -[VUINowPlayingFeatureMonitor _unregisterPlaybackStateNotification]
  -[VUINowPlayingFeatureMonitor _processAnyTimeBoundFeatures]
  -[VUINowPlayingFeatureMonitor _registerPlaybackStateChangeNotification]
  -[VUINowPlayingFeatureMonitor _updateBoundaryObserverForFeature:change:]
  -[VUINowPlayingFeatureMonitor _processFeature:]
  -[VUINowPlayingFeatureMonitor featureDependencies]
  -[VUINowPlayingFeatureMonitor featureLastRequestedUI]
  -[VUINowPlayingFeatureMonitor _shouldAnimateFeature:]
  -[VUINowPlayingFeatureMonitor _deactivateFeature:animated:]
  -[VUINowPlayingFeatureMonitor _cleanupFeature:]
  -[VUINowPlayingFeatureMonitor _cancelTimerForFeature:]
  -[VUINowPlayingFeatureMonitor _isTimerFeatureExpired:]
  -[VUINowPlayingFeatureMonitor featureTimers]
  -[VUINowPlayingFeatureMonitor _removeAllObservedTokensForFeature:]
  -[VUINowPlayingFeatureMonitor _isTimeBoundFeature:]
  -[VUINowPlayingFeatureMonitor enabledUIModes]
  -[VUINowPlayingFeatureMonitor _isHybridFeature:]
  -[VUINowPlayingFeatureMonitor _processUserTriggeredFeature:activate:animated:]
  -[VUINowPlayingFeatureMonitor observingElapsedTime]
  -[VUINowPlayingFeatureMonitor setObservingElapsedTime:]
  -[VUINowPlayingFeatureMonitor _startObservingElapsedTime]
  -[VUINowPlayingFeatureMonitor _activeFeatures]
  -[VUINowPlayingFeatureMonitor _processTimeBoundFeature:]
  -[VUINowPlayingFeatureMonitor _isTimerTriggeredFeature:]
  -[VUINowPlayingFeatureMonitor _processTimerTriggeredFeature:]
  -[VUINowPlayingFeatureMonitor _isUserTriggeredFeature:]
  -[VUINowPlayingFeatureMonitor _activeFeature]
  -[VUINowPlayingFeatureMonitor setFeatureLastRequestedUI:]
  -[VUINowPlayingFeatureMonitor _removeTimeObservingForFeature:withStartTime:]
  -[VUINowPlayingFeatureMonitor _playbackStateChangedNottificaiton:]
  -[VUINowPlayingFeatureMonitor _isTVAdvisoryFeature:]
  -[VUINowPlayingFeatureMonitor _processElapsedTime:]
  -[VUINowPlayingFeatureMonitor elapsedTimeObserverToken]
  -[VUINowPlayingFeatureMonitor setElapsedTimeObserverToken:]
  -[VUINowPlayingFeatureMonitor lastProcessedElapsedTime]
  -[VUINowPlayingFeatureMonitor setLastProcessedElapsedTime:]
  -[VUINowPlayingFeatureMonitor elapsedTimes]
  -[VUINowPlayingFeatureMonitor _processLastElapsedTime]
  -[VUINowPlayingFeatureMonitor _processElapsedTimeOnInternalQueue:withCompletion:]
  -[VUINowPlayingFeatureMonitor elapsedTimeProcessingQueue]
  -[VUINowPlayingFeatureMonitor _timeBoundFeatures]
  -[VUINowPlayingFeatureMonitor _observerInfoForFeature:matchingTime:]
  -[VUINowPlayingFeatureMonitor _isElapsedTimeWithinFeatureTimeWindow:]
  -[VUINowPlayingFeatureMonitor _hasActiveFeaturesInArray:]
  -[VUINowPlayingFeatureMonitor _scheduleDeactivationOfTimeBoundFeature:]
  -[VUINowPlayingFeatureMonitor _activateFeature:animated:completion:]
  -[VUINowPlayingFeatureMonitor _needsUIForFeature:]
  -[VUINowPlayingFeatureMonitor _addTimeObservingForFeature:withStartTime:andHandler:]
  -[VUINowPlayingFeatureMonitor deactivateFeature:animated:]
  -[VUINowPlayingFeatureMonitor featureTokens]
  -[VUINowPlayingFeatureMonitor featureBoundaryInfos]
  -[VUINowPlayingFeatureMonitor _addObservedToken:forFeature:]
  -[VUINowPlayingFeatureMonitor setFeatureTimers:]
  -[VUINowPlayingFeatureMonitor _setupTimerFeatureExpiration]
  -[VUINowPlayingFeatureMonitor _expireTimerFeaturesIfNeeded]
  -[VUINowPlayingFeatureMonitor setPlaybackManager:]
  -[VUINowPlayingFeatureMonitor addFeature:withDependencyToPreferredFeatures:]
  -[VUINowPlayingFeatureMonitor enableUIMode:enabled:]
  -[VUINowPlayingFeatureMonitor _hasAnyActiveFeature]
  -[VUINowPlayingFeatureMonitor _shouldActivateTimeBoundFeatureInitially:]
  -[VUINowPlayingFeatureMonitor setFeatureDependencies:]
  -[VUINowPlayingFeatureMonitor setFeatureTokens:]
  -[VUINowPlayingFeatureMonitor setFeatureBoundaryInfos:]
  -[VUINowPlayingFeatureMonitor setEnabledUIModes:]
  -[VUINowPlayingFeatureMonitor setElapsedTimeProcessingQueue:]
  -[VUINowPlayingFeatureMonitor setElapsedTimes:]


VUIRoundButton : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIButton *button
 @property  UIStackView *textLabelStackView
 @property  UIImage *buttonImage
 @property  NSArray *textLabels
 @property  <VUIRoundButtonDelegate> *delegate

  // instance methods
  -[VUIRoundButton delegate]
  -[VUIRoundButton setDelegate:]
  -[VUIRoundButton .cxx_destruct]
  -[VUIRoundButton intrinsicContentSize]
  -[VUIRoundButton initWithFrame:]
  -[VUIRoundButton button]
  -[VUIRoundButton sizeThatFits:]
  -[VUIRoundButton buttonPressed:]
  -[VUIRoundButton setButton:]
  -[VUIRoundButton buttonSelected:]
  -[VUIRoundButton buttonImage]
  -[VUIRoundButton textLabels]
  -[VUIRoundButton setTextLabels:]
  -[VUIRoundButton _setUpViews]
  -[VUIRoundButton configureTextStackView]
  -[VUIRoundButton buttonReleased:]
  -[VUIRoundButton textLabelStackView]
  -[VUIRoundButton setButtonImage:]
  -[VUIRoundButton setTextLabelStackView:]


VUILibraryCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIViewController *viewController
 @property  VUISeparatorView *topSeparatorView

  // instance methods
  -[VUILibraryCollectionViewCell .cxx_destruct]
  -[VUILibraryCollectionViewCell prepareForReuse]
  -[VUILibraryCollectionViewCell setViewController:]
  -[VUILibraryCollectionViewCell layoutSubviews]
  -[VUILibraryCollectionViewCell viewController]
  -[VUILibraryCollectionViewCell topSeparatorView]
  -[VUILibraryCollectionViewCell setTopSeparatorView:]


VUIISMediaItem : TVPBaseMediaItem /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices <TVPContentKeyLoading>
 @property  NSURL *url
 @property  NSURL *tokenServerURL
 @property  NSURL *stopServerURL
 @property  NSDictionary *tokenServerParameters
 @property  NSString *assetIDForStopping
 @property  long long state
 @property  NSData *certificateData
 @property  NSMutableArray *requestsAwaitingCertFetch
 @property  unsigned long loadingContext
 @property  BOOL disableScrubbing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIISMediaItem initialize]

  // instance methods
  -[VUIISMediaItem .cxx_destruct]
  -[VUIISMediaItem state]
  -[VUIISMediaItem url]
  -[VUIISMediaItem setState:]
  -[VUIISMediaItem setUrl:]
  -[VUIISMediaItem certificateData]
  -[VUIISMediaItem setCertificateData:]
  -[VUIISMediaItem loadingContext]
  -[VUIISMediaItem setLoadingContext:]
  -[VUIISMediaItem mediaItemURL]
  -[VUIISMediaItem mediaItemMetadataForProperty:]
  -[VUIISMediaItem isEqualToMediaItem:]
  -[VUIISMediaItem hasTrait:]
  -[VUIISMediaItem loadFairPlayStreamingKeyRequests:]
  -[VUIISMediaItem requestsAwaitingCertFetch]
  -[VUIISMediaItem setRequestsAwaitingCertFetch:]
  -[VUIISMediaItem cleanUpMediaItem]
  -[VUIISMediaItem _failKeyRequests:withError:]
  -[VUIISMediaItem _generateKeyRequestDataForKeyRequests:completion:]
  -[VUIISMediaItem tokenServerURL]
  -[VUIISMediaItem initWithURL:tokenServerURL:stopServerURL:tokenServerParameters:]
  -[VUIISMediaItem disableScrubbing]
  -[VUIISMediaItem setDisableScrubbing:]
  -[VUIISMediaItem _userPlaybackSettingsDidChange:]
  -[VUIISMediaItem assetIDForStopping]
  -[VUIISMediaItem _sendStopForAssetID:]
  -[VUIISMediaItem setAssetIDForStopping:]
  -[VUIISMediaItem _assetIDForKeyRequest:]
  -[VUIISMediaItem _certificateURLForKeyRequest:]
  -[VUIISMediaItem _startKeyRequests:token:]
  -[VUIISMediaItem _loadCertificateDataFromURL:loadingContext:attemptNumber:completion:]
  -[VUIISMediaItem _fetchTokenForAssetID:completion:]
  -[VUIISMediaItem _parseCertificateURL:keyServerURL:assetID:fromKeyRequest:]
  -[VUIISMediaItem _allowedToRetryRequestForError:response:]
  -[VUIISMediaItem _randomRetryDelayForFailedAttemptNumber:]
  -[VUIISMediaItem _sendKeyRequestsToServer:token:]
  -[VUIISMediaItem _assetIDDataForKeyRequest:]
  -[VUIISMediaItem tokenServerParameters]
  -[VUIISMediaItem stopServerURL]
  -[VUIISMediaItem _linearServiceRequestForURL:assetID:]
  -[VUIISMediaItem _keyServerURLForKeyRequest:]
  -[VUIISMediaItem _sendURLRequestToServer:forKeyRequest:attemptNumber:]
  -[VUIISMediaItem setTokenServerURL:]
  -[VUIISMediaItem setStopServerURL:]
  -[VUIISMediaItem setTokenServerParameters:]


VUIPlaybackReporterVPAF : VUIPlaybackReporter
  // class methods
  +[VUIPlaybackReporterVPAF sharedInstance]
  +[VUIPlaybackReporterVPAF _playHeadMillis:]

  // instance methods
  -[VUIPlaybackReporterVPAF init]
  -[VUIPlaybackReporterVPAF dealloc]
  -[VUIPlaybackReporterVPAF .cxx_destruct]
  -[VUIPlaybackReporterVPAF _connectionInfo]
  -[VUIPlaybackReporterVPAF _screenInfo]
  -[VUIPlaybackReporterVPAF flushUnreportedEvents]
  -[VUIPlaybackReporterVPAF enforceSinglePlaybackSession]
  -[VUIPlaybackReporterVPAF _reportForSession:state:reason:]
  -[VUIPlaybackReporterVPAF _createSessionForPlayer:]
  -[VUIPlaybackReporterVPAF _handleSeek:]
  -[VUIPlaybackReporterVPAF _handlePIPChange:]
  -[VUIPlaybackReporterVPAF _handleDisplaySizeChange:]
  -[VUIPlaybackReporterVPAF _metricsForSession:]
  -[VUIPlaybackReporterVPAF _videoDisplayInfoForSession:]
  -[VUIPlaybackReporterVPAF _focusInfoForSession:]
  -[VUIPlaybackReporterVPAF _metricsForPlayer:]
  -[VUIPlaybackReporterVPAF _delegatedInfoForPlayer:]
  -[VUIPlaybackReporterVPAF _colorRangeForPlayer:]
  -[VUIPlaybackReporterVPAF _sensitiveContentInfoForPlayer:]
  -[VUIPlaybackReporterVPAF _downloadInfoForPlayer:]
  -[VUIPlaybackReporterVPAF _setSessionMetadataValue:forKey:player:]
  -[VUIPlaybackReporterVPAF _isDelegatedForPlayer:]


VUICurrentSiriNavControllerContainer : NSObject /usr/lib/libSystem.B.dylib
 @property  UINavigationController *currentSiriNavController

  // class methods
  +[VUICurrentSiriNavControllerContainer sharedInstance]
  +[VUICurrentSiriNavControllerContainer isRunningInSiriPluggin]

  // instance methods
  -[VUICurrentSiriNavControllerContainer init]
  -[VUICurrentSiriNavControllerContainer .cxx_destruct]
  -[VUICurrentSiriNavControllerContainer currentSiriNavController]
  -[VUICurrentSiriNavControllerContainer setCurrentSiriNavController:]


VUIMediaEntitySortIndex : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *title
 @property  unsigned long startIndex
 @property  unsigned long count

  // instance methods
  -[VUIMediaEntitySortIndex init]
  -[VUIMediaEntitySortIndex count]
  -[VUIMediaEntitySortIndex .cxx_destruct]
  -[VUIMediaEntitySortIndex setCount:]
  -[VUIMediaEntitySortIndex title]
  -[VUIMediaEntitySortIndex setTitle:]
  -[VUIMediaEntitySortIndex startIndex]
  -[VUIMediaEntitySortIndex setStartIndex:]
  -[VUIMediaEntitySortIndex initWithTitle:startIndex:count:]


VideosTransitionFadeAnimator : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerAnimatedTransitioning>
 @property  long long transitionType
 @property  double animationDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosTransitionFadeAnimator transitionDuration:]
  -[VideosTransitionFadeAnimator animateTransition:]
  -[VideosTransitionFadeAnimator animationDuration]
  -[VideosTransitionFadeAnimator setAnimationDuration:]
  -[VideosTransitionFadeAnimator transitionType]
  -[VideosTransitionFadeAnimator setTransitionType:]
  -[VideosTransitionFadeAnimator initWithTransitionType:andDuration:]


VUIProductMetadataLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *headerTextLayout
 @property  VUITextLayout *infoHeaderTextLayout
 @property  VUITextLayout *infoBodyTextLayout
 @property  VUITextLayout *infoDescriptionTextLayout
 @property  VUITextLayout *footerTextLayout
 @property  double descriptionLineSpacing
 @property  double bottomPadding
 @property  double verticalSpacing
 @property  UIColor *seeMoreTextColor
 @property  UIColor *darkSeeMoreTextColor
 @property  UIColor *highlightedDescriptionText
 @property  UIColor *darkHighlightedDescriptionText
 @property  BOOL isHorizontal
 @property  BOOL isDynamicTextEnabled
 @property  BOOL isTVOS

  // class methods
  +[VUIProductMetadataLayout layoutWithLayout:element:]

  // instance methods
  -[VUIProductMetadataLayout init]
  -[VUIProductMetadataLayout .cxx_destruct]
  -[VUIProductMetadataLayout isHorizontal]
  -[VUIProductMetadataLayout bottomPadding]
  -[VUIProductMetadataLayout verticalSpacing]
  -[VUIProductMetadataLayout footerTextLayout]
  -[VUIProductMetadataLayout headerTextLayout]
  -[VUIProductMetadataLayout seeMoreTextColor]
  -[VUIProductMetadataLayout darkSeeMoreTextColor]
  -[VUIProductMetadataLayout infoHeaderTextLayout]
  -[VUIProductMetadataLayout infoBodyTextLayout]
  -[VUIProductMetadataLayout infoDescriptionTextLayout]
  -[VUIProductMetadataLayout descriptionLineSpacing]
  -[VUIProductMetadataLayout highlightedDescriptionText]
  -[VUIProductMetadataLayout darkHighlightedDescriptionText]
  -[VUIProductMetadataLayout _setupLayouts]
  -[VUIProductMetadataLayout isDynamicTextEnabled]
  -[VUIProductMetadataLayout isTVOS]


VUIProductInfoAiringLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *infoTextLayout
 @property  TVImageLayout *logoImageLayout

  // class methods
  +[VUIProductInfoAiringLayout layoutWithLayout:element:]

  // instance methods
  -[VUIProductInfoAiringLayout init]
  -[VUIProductInfoAiringLayout .cxx_destruct]
  -[VUIProductInfoAiringLayout logoImageLayout]
  -[VUIProductInfoAiringLayout infoTextLayout]


VUIPlistMediaItem : VUIMediaItem <VUIPlistMediaEntityImageLoadParamsCreating>
 @property  VUIPlistMediaDatabaseItem *databaseItem

  // instance methods
  -[VUIPlistMediaItem .cxx_destruct]
  -[VUIPlistMediaItem isLocal]
  -[VUIPlistMediaItem assetType]
  -[VUIPlistMediaItem showTitle]
  -[VUIPlistMediaItem seasonNumber]
  -[VUIPlistMediaItem showIdentifier]
  -[VUIPlistMediaItem playedState]
  -[VUIPlistMediaItem imageLoadParamsWithImageType:]
  -[VUIPlistMediaItem seasonTitle]
  -[VUIPlistMediaItem initWithMediaLibrary:databaseItem:requestedProperties:]
  -[VUIPlistMediaItem initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIPlistMediaItem previewFrameImageIdentifier]
  -[VUIPlistMediaItem seasonIdentifier]
  -[VUIPlistMediaItem coverArtImageIdentifier]
  -[VUIPlistMediaItem _valueForPropertyDescriptor:]
  -[VUIPlistMediaItem databaseItem]
  -[VUIPlistMediaItem setDatabaseItem:]


VUIJSNotificationCenter : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <WLKNotificationCenterDelegate, VUIJSNotificationCenter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIJSNotificationCenter showSignupAlertPushNotificationWithAppContext:]
  +[VUIJSNotificationCenter showAppInstallCompletePushNotificationWithAppContext:appName:contentName:punchoutURL:]

  // instance methods
  -[VUIJSNotificationCenter .cxx_destruct]
  -[VUIJSNotificationCenter setBadgeString:]
  -[VUIJSNotificationCenter initWithAppContext:]
  -[VUIJSNotificationCenter setBadgeNumber:]
  -[VUIJSNotificationCenter handleAction:]
  -[VUIJSNotificationCenter post::::]


VUIMediaTagsView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIRentalExpirationLabelDelegate, VUILabelTopMarginCalculationProtocol>
 @property  NSDictionary *viewsMap
 @property  NSArray *groupedSubviews
 @property  double totalSubviewsWidth
 @property  UIImage *commonSenseLightImage
 @property  UIImage *commonSenseDarkImage
 @property  VUIMediaTagsViewLayout *layout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMediaTagsView tagsViewWithMetadata:layout:element:existingView:]

  // instance methods
  -[VUIMediaTagsView .cxx_destruct]
  -[VUIMediaTagsView layout]
  -[VUIMediaTagsView traitCollectionDidChange:]
  -[VUIMediaTagsView sizeThatFits:]
  -[VUIMediaTagsView layoutSubviews]
  -[VUIMediaTagsView _updateAppearance]
  -[VUIMediaTagsView initWithFrame:layout:]
  -[VUIMediaTagsView topMarginWithBaselineMargin:]
  -[VUIMediaTagsView bottomMarginWithBaselineMargin:]
  -[VUIMediaTagsView rentalExpirationLabelNeedsRelayout:]
  -[VUIMediaTagsView topMarginToLabel:withBaselineMargin:]
  -[VUIMediaTagsView bottomMarginToLabel:withBaselineMargin:]
  -[VUIMediaTagsView updateWithMetadata:]
  -[VUIMediaTagsView _layoutSubviewsForSize:computationOnly:]
  -[VUIMediaTagsView _shouldPutTextOnSeparateLines]
  -[VUIMediaTagsView groupedSubviews]
  -[VUIMediaTagsView viewsMap]
  -[VUIMediaTagsView _removeSeparatorsFromGroupsIfNeeded:]
  -[VUIMediaTagsView _newLabelAsSubview:]
  -[VUIMediaTagsView _newImageViewAsSubview]
  -[VUIMediaTagsView _newRentalExpirationlabel:exisitingLabel:]
  -[VUIMediaTagsView setCommonSenseLightImage:]
  -[VUIMediaTagsView setCommonSenseDarkImage:]
  -[VUIMediaTagsView setViewsMap:]
  -[VUIMediaTagsView setGroupedSubviews:]
  -[VUIMediaTagsView _totalSubviewsWidth]
  -[VUIMediaTagsView setTotalSubviewsWidth:]
  -[VUIMediaTagsView commonSenseLightImage]
  -[VUIMediaTagsView commonSenseDarkImage]
  -[VUIMediaTagsView totalSubviewsWidth]
  -[VUIMediaTagsView _removeGenreLabelAndSeparator]


VUIMenuDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *mainMenuItems
 @property  NSArray *genreMenuItems

  // instance methods
  -[VUIMenuDataSource .cxx_destruct]
  -[VUIMenuDataSource initWithMainMenuItems:genreMenuItems:]
  -[VUIMenuDataSource mainMenuItems]
  -[VUIMenuDataSource genreMenuItems]
  -[VUIMenuDataSource setMainMenuItems:]
  -[VUIMenuDataSource setGenreMenuItems:]


VUISeparatorView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *line
 @property  UIColor *color
 @property  UIColor *darkColor
 @property  double lineHeight

  // instance methods
  -[VUISeparatorView .cxx_destruct]
  -[VUISeparatorView color]
  -[VUISeparatorView setColor:]
  -[VUISeparatorView intrinsicContentSize]
  -[VUISeparatorView lineHeight]
  -[VUISeparatorView initWithFrame:]
  -[VUISeparatorView traitCollectionDidChange:]
  -[VUISeparatorView sizeThatFits:]
  -[VUISeparatorView layoutSubviews]
  -[VUISeparatorView lineColor]
  -[VUISeparatorView line]
  -[VUISeparatorView setLine:]
  -[VUISeparatorView setLineHeight:]
  -[VUISeparatorView darkColor]
  -[VUISeparatorView setDarkColor:]
  -[VUISeparatorView initializeVUISeparatorView]
  -[VUISeparatorView _updateLineColor]


VUIUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIUtilities randomColor]
  +[VUIUtilities isAXSmallEnabled:]
  +[VUIUtilities isAXLargeEnabled:]
  +[VUIUtilities textAlignmentWithSemanticContentAttribute:]
  +[VUIUtilities placeholderImageResourceName:]
  +[VUIUtilities imageCornerRadiiWithStyle:]
  +[VUIUtilities imageCornerRadiusWithStyle:]
  +[VUIUtilities contentSizeCategoryIsAccessibility:]
  +[VUIUtilities shouldInvalidateLayoutWithPreviousTraitCollection:newTraitCollection:]
  +[VUIUtilities scaleContentSizeValue:forTraitCollection:]
  +[VUIUtilities imageSizeWithAspectRatio:scaleToSize:]
  +[VUIUtilities isIpadLayout]
  +[VUIUtilities scaleContentSizeValue:forTraitCollection:maximumContentSizeCategory:]
  +[VUIUtilities colorFromRGBStr:]
  +[VUIUtilities interfaceStyleFromTheme:defaultInterfaceStyle:]
  +[VUIUtilities VideosUIBundle]
  +[VUIUtilities libraryCategoryListWidth]
  +[VUIUtilities createImageProxyForResourceObject:imageSize:]
  +[VUIUtilities minimumNumberOfItemsToEnableSeeAllButton]
  +[VUIUtilities gradientConfigForCollection:gradientMask:properties:configuration:]
  +[VUIUtilities libraryListMarginToGrid]
  +[VUIUtilities colorFromHexStr:]


VUIViewSpacer : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIViewSpacer spacerA]
  +[VUIViewSpacer spacerB]
  +[VUIViewSpacer spacerC]


VUIGradientMaskProperties : NSObject /usr/lib/libSystem.B.dylib
 @property  {UIEdgeInsets=dddd} minPadding
 @property  {CGSize=dd} minLengths

  // class methods
  +[VUIGradientMaskProperties defaultGradientMaskProperties]

  // instance methods
  -[VUIGradientMaskProperties minPadding]
  -[VUIGradientMaskProperties setMinPadding:]
  -[VUIGradientMaskProperties minLengths]
  -[VUIGradientMaskProperties setMinLengths:]


VUIDocumentDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *documentRef
 @property  VUIDocumentContextData *contextData
 @property  VUIDocumentPreFetchedData *prefetchData
 @property  VUIDocumentUIConfiguration *uiConfiguration
 @property  BOOL shouldLoadPageImmediately

  // class methods
  +[VUIDocumentDataSource documentDataSourceWithDictionary:]

  // instance methods
  -[VUIDocumentDataSource .cxx_destruct]
  -[VUIDocumentDataSource setContextData:]
  -[VUIDocumentDataSource contextData]
  -[VUIDocumentDataSource jsonData]
  -[VUIDocumentDataSource documentRef]
  -[VUIDocumentDataSource initWithDocumentRef:]
  -[VUIDocumentDataSource viewControllerWithAppContext:]
  -[VUIDocumentDataSource uiConfiguration]
  -[VUIDocumentDataSource viewControllerWithAppContext:viewElement:documentOptions:]
  -[VUIDocumentDataSource initWithDataSourceDict:]
  -[VUIDocumentDataSource setDocumentRef:]
  -[VUIDocumentDataSource viewControllerWithAppContext:documentOptions:]
  -[VUIDocumentDataSource prefetchData]
  -[VUIDocumentDataSource setPrefetchData:]
  -[VUIDocumentDataSource setUiConfiguration:]
  -[VUIDocumentDataSource shouldLoadPageImmediately]
  -[VUIDocumentDataSource setShouldLoadPageImmediately:]


VUIDebugMetricsEvent : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *reliableUnderlyingDictionary
 @property  NSDictionary *elements
 @property  NSDictionary *timingElements
 @property  NSDictionary *commonElements
 @property  NSArray *sortedElementKeys
 @property  NSArray *sortedTimingKeys
 @property  NSArray *sortedCommonKeys
 @property  NSDate *eventDate
 @property  NSString *eventType
 @property  NSString *eventSubheader
 @property  NSString *eventTertiaryInformation
 @property  NSString *pageContext
 @property  NSDictionary *rawEvent

  // instance methods
  -[VUIDebugMetricsEvent objectForKeyedSubscript:]
  -[VUIDebugMetricsEvent .cxx_destruct]
  -[VUIDebugMetricsEvent elements]
  -[VUIDebugMetricsEvent eventType]
  -[VUIDebugMetricsEvent setElements:]
  -[VUIDebugMetricsEvent eventDate]
  -[VUIDebugMetricsEvent pageContext]
  -[VUIDebugMetricsEvent initWithEventDictionary:termCollater:]
  -[VUIDebugMetricsEvent eventSubheader]
  -[VUIDebugMetricsEvent eventTertiaryInformation]
  -[VUIDebugMetricsEvent commonElements]
  -[VUIDebugMetricsEvent timingElements]
  -[VUIDebugMetricsEvent reliableUnderlyingDictionary]
  -[VUIDebugMetricsEvent sortedElementKeys]
  -[VUIDebugMetricsEvent sortedCommonKeys]
  -[VUIDebugMetricsEvent sortedTimingKeys]
  -[VUIDebugMetricsEvent rawEvent]
  -[VUIDebugMetricsEvent setTimingElements:]
  -[VUIDebugMetricsEvent setCommonElements:]
  -[VUIDebugMetricsEvent setReliableUnderlyingDictionary:]


VUIMetricsPageEventData : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *pageId
 @property  NSString *pageType
 @property  NSDictionary *eventData

  // class methods
  +[VUIMetricsPageEventData createWithPageId:andPageType:andEventData:]
  +[VUIMetricsPageEventData createWithPageType:]
  +[VUIMetricsPageEventData createWithMetricsData:]

  // instance methods
  -[VUIMetricsPageEventData .cxx_destruct]
  -[VUIMetricsPageEventData eventData]
  -[VUIMetricsPageEventData setEventData:]
  -[VUIMetricsPageEventData pageType]
  -[VUIMetricsPageEventData setPageType:]
  -[VUIMetricsPageEventData setPageId:]
  -[VUIMetricsPageEventData pageId]
  -[VUIMetricsPageEventData generateMetricsDataDictionary]


VUILabelFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUILabelFactory labelWithElement:textLayout:existingLabel:]


VUIContextMenuTemplateController : _TVBgImageLoadingViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <VUIContextMenuTemplateControllerInterface>
 @property  VUIContextMenuCardView *cardView
 @property  IKViewElement *viewElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIContextMenuTemplateController init]
  -[VUIContextMenuTemplateController .cxx_destruct]
  -[VUIContextMenuTemplateController viewDidLoad]
  -[VUIContextMenuTemplateController cardView]
  -[VUIContextMenuTemplateController setCardView:]
  -[VUIContextMenuTemplateController viewElement]
  -[VUIContextMenuTemplateController setViewElement:]
  -[VUIContextMenuTemplateController updateWithViewElement:]
  -[VUIContextMenuTemplateController didSelectPreviewTemplateController]
  -[VUIContextMenuTemplateController _shareActionSheetFromViewElement:]
  -[VUIContextMenuTemplateController _updateInteractionMenuItems:]


VUIPlaybackReporterUTS : VUIPlaybackReporter
 @property  WLKPlaybackReporter *reporter

  // class methods
  +[VUIPlaybackReporterUTS sharedInstance]

  // instance methods
  -[VUIPlaybackReporterUTS .cxx_destruct]
  -[VUIPlaybackReporterUTS _endSession:]
  -[VUIPlaybackReporterUTS reporter]
  -[VUIPlaybackReporterUTS setReporter:]
  -[VUIPlaybackReporterUTS _isTransitionValidForPlayer:fromState:toState:]
  -[VUIPlaybackReporterUTS enforceSinglePlaybackSession]
  -[VUIPlaybackReporterUTS _reportForSession:state:reason:]
  -[VUIPlaybackReporterUTS _createSessionForPlayer:]
  -[VUIPlaybackReporterUTS _reportForPlayer:playerState:completionState:completionBlock:]
  -[VUIPlaybackReporterUTS _reportLinearForPlayer:playerState:completionState:completionBlock:]
  -[VUIPlaybackReporterUTS _reportVODForPlayer:playerState:completionState:completionBlock:]
  -[VUIPlaybackReporterUTS _wlkPlaybackStateForState:]
  -[VUIPlaybackReporterUTS _wlkPlaybackRateForState:player:]
  -[VUIPlaybackReporterUTS _completionFudgeFactor]
  -[VUIPlaybackReporterUTS _reportSummary:sessionID:completion:]
  -[VUIPlaybackReporterUTS reportForPlayer:completionState:completionBlock:]


VUIMediaEntityFetchResponseChanges : NSObject /usr/lib/libSystem.B.dylib
 @property  VUICollectionChangeSet *mediaEntitiesChangeSet
 @property  VUICollectionChangeSet *groupingChangeSet

  // instance methods
  -[VUIMediaEntityFetchResponseChanges init]
  -[VUIMediaEntityFetchResponseChanges .cxx_destruct]
  -[VUIMediaEntityFetchResponseChanges initWithMediaEntitiesChangeSet:]
  -[VUIMediaEntityFetchResponseChanges setGroupingChangeSet:]
  -[VUIMediaEntityFetchResponseChanges mediaEntitiesChangeSet]
  -[VUIMediaEntityFetchResponseChanges groupingChangeSet]
  -[VUIMediaEntityFetchResponseChanges setMediaEntitiesChangeSet:]


VUILibraryEpisodeFooterCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView
 @property  UIButton *titleButton
 @property  NSString *title
 @property  NSNumber *storeID
 @property  <VUILibraryEpisodeFooterCellDelegate> *delegate

  // instance methods
  -[VUILibraryEpisodeFooterCell delegate]
  -[VUILibraryEpisodeFooterCell setDelegate:]
  -[VUILibraryEpisodeFooterCell .cxx_destruct]
  -[VUILibraryEpisodeFooterCell title]
  -[VUILibraryEpisodeFooterCell setTitle:]
  -[VUILibraryEpisodeFooterCell initWithFrame:]
  -[VUILibraryEpisodeFooterCell sizeThatFits:]
  -[VUILibraryEpisodeFooterCell layoutSubviews]
  -[VUILibraryEpisodeFooterCell storeID]
  -[VUILibraryEpisodeFooterCell setStoreID:]
  -[VUILibraryEpisodeFooterCell topSeparatorView]
  -[VUILibraryEpisodeFooterCell bottomSeparatorView]
  -[VUILibraryEpisodeFooterCell setTopSeparatorView:]
  -[VUILibraryEpisodeFooterCell setBottomSeparatorView:]
  -[VUILibraryEpisodeFooterCell titleButton]
  -[VUILibraryEpisodeFooterCell setTitleButton:]
  -[VUILibraryEpisodeFooterCell _titleButtonPressed:]


VUIFeedbackTableView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUILabelTopMarginCalculationProtocol>
 @property  VUIFeedbackTableLayout *layout
 @property  NSArray *dataModels

  // instance methods
  -[VUIFeedbackTableView init]
  -[VUIFeedbackTableView .cxx_destruct]
  -[VUIFeedbackTableView layout]
  -[VUIFeedbackTableView setLayout:]
  -[VUIFeedbackTableView sizeThatFits:]
  -[VUIFeedbackTableView layoutSubviews]
  -[VUIFeedbackTableView bottomMarginWithBaselineMargin:]
  -[VUIFeedbackTableView prepareForCellReuse]
  -[VUIFeedbackTableView topMarginToLabel:withBaselineMargin:]
  -[VUIFeedbackTableView dataModels]
  -[VUIFeedbackTableView setDataModels:]
  -[VUIFeedbackTableView _calculateMaxDescriptionThatFit:]
  -[VUIFeedbackTableView _calculateMaxHeaderThatFits:]


VUIFeedbackTableViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  VUILabel *headerTextView
 @property  NSArray *descriptionTextView

  // class methods
  +[VUIFeedbackTableViewModel headerViewWithString:layout:existingView:]
  +[VUIFeedbackTableViewModel descriptionTextViewWithString:layout:existingView:]

  // instance methods
  -[VUIFeedbackTableViewModel .cxx_destruct]
  -[VUIFeedbackTableViewModel descriptionTextView]
  -[VUIFeedbackTableViewModel setDescriptionTextView:]
  -[VUIFeedbackTableViewModel headerTextView]
  -[VUIFeedbackTableViewModel setHeaderTextView:]


VUIMPMediaLibrary : VUIMediaLibrary
 @property  unsigned long connectionState
 @property  MPMediaLibrary *mediaLibrary
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSOperationQueue *serialOperationQueue

  // class methods
  +[VUIMPMediaLibrary initialize]
  +[VUIMPMediaLibrary automaticallyNotifiesObserversForKey:]
  +[VUIMPMediaLibrary _connectionStateFromMPMediaLibraryStatus:]

  // instance methods
  -[VUIMPMediaLibrary dealloc]
  -[VUIMPMediaLibrary .cxx_destruct]
  -[VUIMPMediaLibrary title]
  -[VUIMPMediaLibrary connectionState]
  -[VUIMPMediaLibrary serialOperationQueue]
  -[VUIMPMediaLibrary mediaLibrary]
  -[VUIMPMediaLibrary setMediaLibrary:]
  -[VUIMPMediaLibrary setConnectionState:]
  -[VUIMPMediaLibrary setSerialOperationQueue:]
  -[VUIMPMediaLibrary hasImageCache]
  -[VUIMPMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUIMPMediaLibrary serialProcessingDispatchQueue]
  -[VUIMPMediaLibrary setSerialProcessingDispatchQueue:]
  -[VUIMPMediaLibrary initWithIdentifier:type:manager:]
  -[VUIMPMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUIMPMediaLibrary saveMediaEntity:completionHandler:]
  -[VUIMPMediaLibrary _imageLoaderIdentifier]
  -[VUIMPMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUIMPMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIMPMediaLibrary _handleMediaLibraryContentsDidChangeNotification:]
  -[VUIMPMediaLibrary initWithMPMediaLibrary:type:manager:]
  -[VUIMPMediaLibrary _handleMediaLibraryStatusDidChangeNotification:]
  -[VUIMPMediaLibrary _enqueueProcessingBlock:]
  -[VUIMPMediaLibrary connectWithCompletionHandler:progressHandler:]


VideosExtrasCarouselViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDataSource, UICollectionViewDelegate, VideosExtrasCarouselCollectionViewDelegate, VideosExtrasZoomingImageTransitionParticipant>
 @property  VideosExtrasCarouselCollectionView *carouselCollectionView
 @property  UICollectionViewLayout<VideosExtrasCarouselCollectionViewLayout> *carouselCollectionViewLayout
 @property  BOOL revealingNavigationBarDuringTransition
 @property  <VideosExtrasCarouselViewControllerDataSource> *dataSource
 @property  <VideosExtrasCarouselViewControllerDelegate> *delegate
 @property  unsigned long indexOfVisibleItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasCarouselViewController dealloc]
  -[VideosExtrasCarouselViewController delegate]
  -[VideosExtrasCarouselViewController setDelegate:]
  -[VideosExtrasCarouselViewController .cxx_destruct]
  -[VideosExtrasCarouselViewController dataSource]
  -[VideosExtrasCarouselViewController setDataSource:]
  -[VideosExtrasCarouselViewController scrollViewDidScroll:]
  -[VideosExtrasCarouselViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[VideosExtrasCarouselViewController viewWillAppear:]
  -[VideosExtrasCarouselViewController viewDidLoad]
  -[VideosExtrasCarouselViewController numberOfSectionsInCollectionView:]
  -[VideosExtrasCarouselViewController collectionView:numberOfItemsInSection:]
  -[VideosExtrasCarouselViewController collectionView:cellForItemAtIndexPath:]
  -[VideosExtrasCarouselViewController didMoveToParentViewController:]
  -[VideosExtrasCarouselViewController collectionView:didHighlightItemAtIndexPath:]
  -[VideosExtrasCarouselViewController collectionView:didSelectItemAtIndexPath:]
  -[VideosExtrasCarouselViewController collectionView:willDisplayCell:forItemAtIndexPath:]
  -[VideosExtrasCarouselViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VideosExtrasCarouselViewController _numberOfItems]
  -[VideosExtrasCarouselViewController _isPhone]
  -[VideosExtrasCarouselViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasCarouselViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasCarouselViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasCarouselViewController setIndexOfVisibleItem:animated:]
  -[VideosExtrasCarouselViewController indexOfVisibleItem]
  -[VideosExtrasCarouselViewController setIndexOfVisibleItem:]
  -[VideosExtrasCarouselViewController carouselCollectionView]
  -[VideosExtrasCarouselViewController _ensureScrollViewSnaps]
  -[VideosExtrasCarouselViewController _loadCarouselCollectionViewInView:withContraintsAccumulator:]
  -[VideosExtrasCarouselViewController _updateOpacityOfTextInVisibleCells]
  -[VideosExtrasCarouselViewController _updateWindowSizeForVisibleCells]
  -[VideosExtrasCarouselViewController carouselCollectionViewLayout]
  -[VideosExtrasCarouselViewController _findSnappingItemFromContentOffset:withVelocity:]
  -[VideosExtrasCarouselViewController _snapTargetContentOffset:toItemIndexPath:atItemOffset:]
  -[VideosExtrasCarouselViewController setRevealingNavigationBarDuringTransition:]
  -[VideosExtrasCarouselViewController carouselCollectionViewCellForItemAtIndex:]
  -[VideosExtrasCarouselViewController isRevealingNavigationBarDuringTransition]
  -[VideosExtrasCarouselViewController setCarouselCollectionViewLayout:]
  -[VideosExtrasCarouselViewController setCarouselCollectionView:]
  -[VideosExtrasCarouselViewController subviewsDidChangeForCarouselCollectionView:]


VUIStoreMediaItem_iOS : VUILibraryMediaItem_iOS <TVPMediaItemReportingDelegate, TVPContentKeyLoading, VUIStoreFPSKeyLoaderDelegate>
 @property  unsigned long loadingContext
 @property  NSDictionary *sinfsDict
 @property  NSNumber *fileSize
 @property  NSURL *downloadDestinationURL
 @property  NSNumber *downloadToken
 @property  VUIStoreFPSKeyLoader *storeFPSKeyLoader
 @property  long long playbackType
 @property  NSURL *playbackURL
 @property  VUIStoreDownloadMonitor *downloadMonitor
 @property  BOOL needsRentalCheckin
 @property  NSObject *parentReportingToken
 @property  NSString *alternateAssetURLString
 @property  NSError *fpsKeyError
 @property  NSNumber *startTime
 @property  BOOL streamingHLS
 @property  NSURL *fpsCertificateURL
 @property  NSURL *fpsKeyServerURL
 @property  NSDictionary *fpsAdditionalServerParams
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIStoreMediaItem_iOS initialize]

  // instance methods
  -[VUIStoreMediaItem_iOS dealloc]
  -[VUIStoreMediaItem_iOS .cxx_destruct]
  -[VUIStoreMediaItem_iOS fileSize]
  -[VUIStoreMediaItem_iOS startTime]
  -[VUIStoreMediaItem_iOS downloadToken]
  -[VUIStoreMediaItem_iOS setStartTime:]
  -[VUIStoreMediaItem_iOS setFileSize:]
  -[VUIStoreMediaItem_iOS setDownloadToken:]
  -[VUIStoreMediaItem_iOS downloadDestinationURL]
  -[VUIStoreMediaItem_iOS _rentalExpirationDate]
  -[VUIStoreMediaItem_iOS playbackType]
  -[VUIStoreMediaItem_iOS setPlaybackType:]
  -[VUIStoreMediaItem_iOS loadingContext]
  -[VUIStoreMediaItem_iOS setLoadingContext:]
  -[VUIStoreMediaItem_iOS mediaItemURL]
  -[VUIStoreMediaItem_iOS initWithAdamID:]
  -[VUIStoreMediaItem_iOS initWithMPMediaItem:]
  -[VUIStoreMediaItem_iOS mediaItemMetadataForProperty:]
  -[VUIStoreMediaItem_iOS storeFPSKeyLoader:willFailWithError:forKeyRequest:]
  -[VUIStoreMediaItem_iOS storeFPSKeyLoader:didLoadOfflineKeyData:forKeyRequest:]
  -[VUIStoreMediaItem_iOS storeFPSKeyLoader:didReceiveUpdatedRentalExpirationDate:playbackStartDate:]
  -[VUIStoreMediaItem_iOS hasTrait:]
  -[VUIStoreMediaItem_iOS loadFairPlayStreamingKeyRequests:]
  -[VUIStoreMediaItem_iOS reportingDelegate]
  -[VUIStoreMediaItem_iOS prepareForLoadingWithCompletion:]
  -[VUIStoreMediaItem_iOS prepareForPlaybackInitiationWithCompletion:]
  -[VUIStoreMediaItem_iOS replacementErrorForPlaybackError:]
  -[VUIStoreMediaItem_iOS mediaItemAllInitialLoadingComplete:totalTime:player:]
  -[VUIStoreMediaItem_iOS cleanUpMediaItem]
  -[VUIStoreMediaItem_iOS setFpsCertificateURL:]
  -[VUIStoreMediaItem_iOS setFpsKeyServerURL:]
  -[VUIStoreMediaItem_iOS playbackURL]
  -[VUIStoreMediaItem_iOS fpsCertificateURL]
  -[VUIStoreMediaItem_iOS fpsKeyServerURL]
  -[VUIStoreMediaItem_iOS setPlaybackURL:]
  -[VUIStoreMediaItem_iOS fpsAdditionalServerParams]
  -[VUIStoreMediaItem_iOS setFpsAdditionalServerParams:]
  -[VUIStoreMediaItem_iOS _externalPlaybackTypeDidChange:]
  -[VUIStoreMediaItem_iOS _loadingCancelled:]
  -[VUIStoreMediaItem_iOS _userPlaybackSettingsDidChange:]
  -[VUIStoreMediaItem_iOS _allowedToPlayWhileOnCellularNetwork]
  -[VUIStoreMediaItem_iOS _adamIDString]
  -[VUIStoreMediaItem_iOS sinfsDict]
  -[VUIStoreMediaItem_iOS _iTunesStoreContentInfo]
  -[VUIStoreMediaItem_iOS setFpsKeyError:]
  -[VUIStoreMediaItem_iOS _videoPlaybackTypeDescription]
  -[VUIStoreMediaItem_iOS _configureForStreamingPlaybackWithCompletion:]
  -[VUIStoreMediaItem_iOS _configureForLocalPlaybackWithURL:completion:]
  -[VUIStoreMediaItem_iOS _downloadForThisMediaItemReturningDownloadManager:]
  -[VUIStoreMediaItem_iOS _configureForPlaybackFromExistingDownload:downloadManager:completion:]
  -[VUIStoreMediaItem_iOS setNeedsRentalCheckin:]
  -[VUIStoreMediaItem_iOS _checkoutRentalWithCheckoutType:startPlaybackClock:completion:]
  -[VUIStoreMediaItem_iOS fpsKeyError]
  -[VUIStoreMediaItem_iOS needsRentalCheckin]
  -[VUIStoreMediaItem_iOS _checkInRental]
  -[VUIStoreMediaItem_iOS _deleteDownloadKeyCookieForURL:]
  -[VUIStoreMediaItem_iOS setAlternateAssetURLString:]
  -[VUIStoreMediaItem_iOS setSinfsDict:]
  -[VUIStoreMediaItem_iOS setDownloadDestinationURL:]
  -[VUIStoreMediaItem_iOS setDownloadMonitor:]
  -[VUIStoreMediaItem_iOS setParentReportingToken:]
  -[VUIStoreMediaItem_iOS storeFPSKeyLoader]
  -[VUIStoreMediaItem_iOS setStoreFPSKeyLoader:]
  -[VUIStoreMediaItem_iOS _updateRentalPlaybackStartDate:]
  -[VUIStoreMediaItem_iOS _offlineKeyDataForKeyRequest:]
  -[VUIStoreMediaItem_iOS _persistOfflineKeyData:forKeyRequest:]
  -[VUIStoreMediaItem_iOS _setDownloadKeyCookieWithURL:downloadKey:]
  -[VUIStoreMediaItem_iOS _performStreamingRedownloadWithCompletion:]
  -[VUIStoreMediaItem_iOS _iTunesStoreContentPurchasedMediaKind]
  -[VUIStoreMediaItem_iOS _rentalPlaybackEndDate]
  -[VUIStoreMediaItem_iOS _rentalEndDate]
  -[VUIStoreMediaItem_iOS isStreamingHLS]
  -[VUIStoreMediaItem_iOS downloadMonitor]
  -[VUIStoreMediaItem_iOS parentReportingToken]
  -[VUIStoreMediaItem_iOS alternateAssetURLString]


VUIDownloadDataSource : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntitiesFetchControllerDelegate, VUIDownloadManagerDelegate, SSDownloadManagerObserver>
 @property  VUIMediaLibrary *mediaLibrary
 @property  VUIMediaEntitiesFetchController *downloadedEntitiesFetchController
 @property  VUIMediaEntitiesFetchController *activeDownloadingEntitiesFetchController
 @property  SSDownloadManager *sDownloadManager
 @property  BOOL hasFetchedAllDownloadEntities
 @property  BOOL hasFetchedAllDownloadedEntities
 @property  BOOL performingRentalExpirationFetch
 @property  NSArray *localMediaItems
 @property  NSArray *activelyDownloadingAdamIds
 @property  NSArray *activelyDownloadingMediaItems
 @property  NSMutableDictionary *episodesDownloadingForShow
 @property  NSMutableDictionary *groupingByShowIdentifier
 @property  <VUIDownloadDataSourceDelegate> *delegate
 @property  NSArray *downloadEntities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDownloadDataSource dealloc]
  -[VUIDownloadDataSource delegate]
  -[VUIDownloadDataSource setDelegate:]
  -[VUIDownloadDataSource .cxx_destruct]
  -[VUIDownloadDataSource downloadManager:downloadStatesDidChange:]
  -[VUIDownloadDataSource downloadManagerDownloadsDidChange:]
  -[VUIDownloadDataSource mediaLibrary]
  -[VUIDownloadDataSource initWithMediaLibrary:]
  -[VUIDownloadDataSource controller:fetchRequests:didCompleteWithResult:]
  -[VUIDownloadDataSource controller:fetchRequests:didFailWithError:]
  -[VUIDownloadDataSource loadDownloadData]
  -[VUIDownloadDataSource downloadEntities]
  -[VUIDownloadDataSource setDownloadEntities:]
  -[VUIDownloadDataSource _addNotificationObservers]
  -[VUIDownloadDataSource _loadDownloadedEntities]
  -[VUIDownloadDataSource _loadActiveDownloads]
  -[VUIDownloadDataSource setDownloadedEntitiesFetchController:]
  -[VUIDownloadDataSource setActiveDownloadingEntitiesFetchController:]
  -[VUIDownloadDataSource _removeNotifcationObservers]
  -[VUIDownloadDataSource sDownloadManager]
  -[VUIDownloadDataSource setHasFetchedAllDownloadEntities:]
  -[VUIDownloadDataSource setHasFetchedAllDownloadedEntities:]
  -[VUIDownloadDataSource setEpisodesDownloadingForShow:]
  -[VUIDownloadDataSource downloadedEntitiesFetchController]
  -[VUIDownloadDataSource setLocalMediaItems:]
  -[VUIDownloadDataSource _createGroupingByShowIdentifierWithLatestMediaEntityGroups:]
  -[VUIDownloadDataSource setGroupingByShowIdentifier:]
  -[VUIDownloadDataSource _coalesceActiveDownloadEntitiesAndDownloadedEntities]
  -[VUIDownloadDataSource _sortDownloadEntitiesByTitle]
  -[VUIDownloadDataSource _notifyDelegatesDownloadsFetchCompletedWithChanges:]
  -[VUIDownloadDataSource activeDownloadingEntitiesFetchController]
  -[VUIDownloadDataSource episodesDownloadingForShow]
  -[VUIDownloadDataSource activelyDownloadingAdamIds]
  -[VUIDownloadDataSource setActivelyDownloadingMediaItems:]
  -[VUIDownloadDataSource hasFetchedAllDownloadEntities]
  -[VUIDownloadDataSource hasFetchedAllDownloadedEntities]
  -[VUIDownloadDataSource setActivelyDownloadingAdamIds:]
  -[VUIDownloadDataSource localMediaItems]
  -[VUIDownloadDataSource _handleDownloadingStateDidChange]
  -[VUIDownloadDataSource _getActivelyDownloadingAdamIDs]
  -[VUIDownloadDataSource _rentalsDidExpire]
  -[VUIDownloadDataSource setPerformingRentalExpirationFetch:]
  -[VUIDownloadDataSource _doesEpisodeSet:containMediaEntity:]
  -[VUIDownloadDataSource groupingByShowIdentifier]
  -[VUIDownloadDataSource performingRentalExpirationFetch]
  -[VUIDownloadDataSource _createDownloadEntitiesFromLatestDownloads:]
  -[VUIDownloadDataSource activelyDownloadingMediaItems]
  -[VUIDownloadDataSource _upsertEpisodesDownloadingForShowWithMediaEntity:]
  -[VUIDownloadDataSource _getDownloadEntityInDownloadEntities:containingMediaEntity:]
  -[VUIDownloadDataSource _upsertDownloadEntities:withEpisodesDownloadingForShow:]
  -[VUIDownloadDataSource _updateDownloadEntity:withLatestMediaEntity:]
  -[VUIDownloadDataSource setSDownloadManager:]


VUIProductBannerViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIProductBannerViewFactory configureViewWithElement:existingController:]
  +[VUIProductBannerViewFactory _buttonViewsFromElements:existingButtons:prefersUberLayout:]
  +[VUIProductBannerViewFactory comingSoonInfoString:]
  +[VUIProductBannerViewFactory _infoTagsViewWithMetadata:additionalMetadata:layout:existingView:]
  +[VUIProductBannerViewFactory _tagsViewWithMetadata:layout:existingView:]


VUILibraryShelfCollectionViewController : VUIShelfViewController
 @property  NSArray *fetchResults
 @property  NSString *headerTitle
 @property  NSString *headerSubtitle
 @property  BOOL disableSeeAllButton
 @property  <VUILibraryShelfCollectionViewControllerDelegate> *delegate

  // instance methods
  -[VUILibraryShelfCollectionViewController delegate]
  -[VUILibraryShelfCollectionViewController setDelegate:]
  -[VUILibraryShelfCollectionViewController .cxx_destruct]
  -[VUILibraryShelfCollectionViewController numberOfSectionsInCollectionView:]
  -[VUILibraryShelfCollectionViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryShelfCollectionViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryShelfCollectionViewController collectionView:didSelectItemAtIndexPath:]
  -[VUILibraryShelfCollectionViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryShelfCollectionViewController collectionView:layout:insetForSectionAtIndex:]
  -[VUILibraryShelfCollectionViewController headerTitle]
  -[VUILibraryShelfCollectionViewController setHeaderTitle:]
  -[VUILibraryShelfCollectionViewController fetchResults]
  -[VUILibraryShelfCollectionViewController setFetchResults:]
  -[VUILibraryShelfCollectionViewController headerSubtitle]
  -[VUILibraryShelfCollectionViewController setHeaderSubtitle:]
  -[VUILibraryShelfCollectionViewController initWithFetchResults:]
  -[VUILibraryShelfCollectionViewController _updateHeaderView]
  -[VUILibraryShelfCollectionViewController configureWithCollectionView:]
  -[VUILibraryShelfCollectionViewController updateWithLatestMediaEntities:andChangeSet:]
  -[VUILibraryShelfCollectionViewController _computeBottomMargin]
  -[VUILibraryShelfCollectionViewController _configureSizingCellWithEntity:]
  -[VUILibraryShelfCollectionViewController _hideSeeAllButton]
  -[VUILibraryShelfCollectionViewController _didPressSeeAllButton:]
  -[VUILibraryShelfCollectionViewController setHeaderTitle:andSubtitle:]
  -[VUILibraryShelfCollectionViewController disableSeeAllButton]
  -[VUILibraryShelfCollectionViewController setDisableSeeAllButton:]


VideosExtrasViewElementViewController : VideosExtrasElementViewController
 @property  IKViewElement *viewElement
 @property  BOOL matchParentHeight
 @property  BOOL embedded
 @property  id preferredLayoutGuide
 @property  long long preferredLayoutAttribute

  // instance methods
  -[VideosExtrasViewElementViewController .cxx_destruct]
  -[VideosExtrasViewElementViewController viewDidLoad]
  -[VideosExtrasViewElementViewController setEmbedded:]
  -[VideosExtrasViewElementViewController viewElement]
  -[VideosExtrasViewElementViewController initWithViewElement:]
  -[VideosExtrasViewElementViewController setViewElement:]
  -[VideosExtrasViewElementViewController matchParentHeight]
  -[VideosExtrasViewElementViewController embedded]
  -[VideosExtrasViewElementViewController preferredLayoutGuide]
  -[VideosExtrasViewElementViewController preferredLayoutAttribute]


VUIMPMediaItem : VUIMediaItem <VUIMPMediaEntityImageLoadParamsCreating>
 @property  MPMediaItem *mediaItem

  // instance methods
  -[VUIMPMediaItem .cxx_destruct]
  -[VUIMPMediaItem isLocal]
  -[VUIMPMediaItem assetType]
  -[VUIMPMediaItem resolution]
  -[VUIMPMediaItem isPlayable]
  -[VUIMPMediaItem mediaItem]
  -[VUIMPMediaItem setMediaItem:]
  -[VUIMPMediaItem contentRating]
  -[VUIMPMediaItem credits]
  -[VUIMPMediaItem extrasURL]
  -[VUIMPMediaItem studio]
  -[VUIMPMediaItem rentalExpirationDate]
  -[VUIMPMediaItem assetController]
  -[VUIMPMediaItem mediaPlayerMediaItem]
  -[VUIMPMediaItem HLSResolution]
  -[VUIMPMediaItem HLSColorCapability]
  -[VUIMPMediaItem colorCapability]
  -[VUIMPMediaItem HLSAudioCapability]
  -[VUIMPMediaItem audioCapability]
  -[VUIMPMediaItem showIdentifier]
  -[VUIMPMediaItem playedState]
  -[VUIMPMediaItem imageLoadParamsWithImageType:]
  -[VUIMPMediaItem initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIMPMediaItem initWithMediaLibrary:mediaItem:requestedProperties:]
  -[VUIMPMediaItem previewFrameImageIdentifier]
  -[VUIMPMediaItem seasonIdentifier]
  -[VUIMPMediaItem coverArtImageIdentifier]
  -[VUIMPMediaItem _valueForPropertyDescriptor:]


VUIQueryDataSource : MPUQueryDataSource /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 @property  long long sourceType

  // instance methods
  -[VUIQueryDataSource sourceType]
  -[VUIQueryDataSource setSourceType:]


VUIAppScriptDownloadManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSURL *currentURL
 @property  NSMutableDictionary *appScriptDict
 @property  NSURLSessionDataTask *task

  // class methods
  +[VUIAppScriptDownloadManager sharedInstance]

  // instance methods
  -[VUIAppScriptDownloadManager .cxx_destruct]
  -[VUIAppScriptDownloadManager _init]
  -[VUIAppScriptDownloadManager task]
  -[VUIAppScriptDownloadManager setTask:]
  -[VUIAppScriptDownloadManager currentURL]
  -[VUIAppScriptDownloadManager setCurrentURL:]
  -[VUIAppScriptDownloadManager setAppScriptDict:]
  -[VUIAppScriptDownloadManager appScriptDict]
  -[VUIAppScriptDownloadManager fetchAppJavascript:cachePolicy:completionHandler:]


VUICollectionView : UICollectionView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate>
 @property  {UIEdgeInsets=dddd} gradientBoundsInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUICollectionView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[VUICollectionView gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[VUICollectionView layoutBelowIfNeeded]
  -[VUICollectionView setContentInset:]
  -[VUICollectionView _shouldFadeCellsForBoundChangeWhileRotating]
  -[VUICollectionView _getGradientMaskBounds:startInsets:endInsets:intensities:]
  -[VUICollectionView _performWithoutLayoutBelow:]
  -[VUICollectionView gradientBoundsInsets]
  -[VUICollectionView setGradientBoundsInsets:]


VUINowPlayingConfig : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL showsLozengeForLivePlayback
 @property  BOOL showsStillWatchingAlert
 @property  double stillWatchingAlertDuration
 @property  double alertIdleTimeout

  // instance methods
  -[VUINowPlayingConfig init]
  -[VUINowPlayingConfig showsStillWatchingAlert]
  -[VUINowPlayingConfig stillWatchingAlertDuration]
  -[VUINowPlayingConfig alertIdleTimeout]
  -[VUINowPlayingConfig showsLozengeForLivePlayback]
  -[VUINowPlayingConfig setShowsLozengeForLivePlayback:]
  -[VUINowPlayingConfig setShowsStillWatchingAlert:]
  -[VUINowPlayingConfig setStillWatchingAlertDuration:]
  -[VUINowPlayingConfig setAlertIdleTimeout:]


VUIPostPlayConfig : NSObject /usr/lib/libSystem.B.dylib
 @property  double bootstrapInterval
 @property  double documentUpdateOffsetInterval
 @property  unsigned long maximumAutoPlayableItems
 @property  double duration

  // instance methods
  -[VUIPostPlayConfig init]
  -[VUIPostPlayConfig duration]
  -[VUIPostPlayConfig setDuration:]
  -[VUIPostPlayConfig bootstrapInterval]
  -[VUIPostPlayConfig setBootstrapInterval:]
  -[VUIPostPlayConfig documentUpdateOffsetInterval]
  -[VUIPostPlayConfig setDocumentUpdateOffsetInterval:]
  -[VUIPostPlayConfig maximumAutoPlayableItems]
  -[VUIPostPlayConfig setMaximumAutoPlayableItems:]


VUIAutoPlayConfig : NSObject /usr/lib/libSystem.B.dylib
 @property  double autoPlayDelayInterval

  // instance methods
  -[VUIAutoPlayConfig init]
  -[VUIAutoPlayConfig autoPlayDelayInterval]
  -[VUIAutoPlayConfig setAutoPlayDelayInterval:]


VUIFeaturesConfiguration : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIPostPlayConfig *postPlayConfig
 @property  VUINowPlayingConfig *nowPlayingConfig
 @property  VUIAutoPlayConfig *autoPlayConfig

  // class methods
  +[VUIFeaturesConfiguration sharedInstance]

  // instance methods
  -[VUIFeaturesConfiguration init]
  -[VUIFeaturesConfiguration .cxx_destruct]
  -[VUIFeaturesConfiguration updateWithDictionary:]
  -[VUIFeaturesConfiguration nowPlayingConfig]
  -[VUIFeaturesConfiguration postPlayConfig]
  -[VUIFeaturesConfiguration autoPlayConfig]


VUIFavoriteCollectionViewCell : VUIListCollectionViewCell
 @property  IKViewElement *viewElement
 @property  VUIFavoriteView *favoriteView

  // class methods
  +[VUIFavoriteCollectionViewCell configureWithElement:existingView:]

  // instance methods
  -[VUIFavoriteCollectionViewCell .cxx_destruct]
  -[VUIFavoriteCollectionViewCell prepareForReuse]
  -[VUIFavoriteCollectionViewCell initWithFrame:]
  -[VUIFavoriteCollectionViewCell sizeThatFits:]
  -[VUIFavoriteCollectionViewCell layoutSubviews]
  -[VUIFavoriteCollectionViewCell setHighlighted:]
  -[VUIFavoriteCollectionViewCell viewElement]
  -[VUIFavoriteCollectionViewCell setViewElement:]
  -[VUIFavoriteCollectionViewCell favoriteView]
  -[VUIFavoriteCollectionViewCell setFavoriteView:]


VUIProductMetadataView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSArray *sectionViews
 @property  VUIProductMetadataLayout *viewLayout
 @property  UIView *defaultFocusView
 @property  VUIProductInfoAiringView *airingView
 @property  VUISeparatorView *separatorView
 @property  IKViewElement *viewElement

  // class methods
  +[VUIProductMetadataView configureViewWithElement:existingView:]

  // instance methods
  -[VUIProductMetadataView .cxx_destruct]
  -[VUIProductMetadataView preferredFocusEnvironments]
  -[VUIProductMetadataView canBecomeFocused]
  -[VUIProductMetadataView sizeThatFits:]
  -[VUIProductMetadataView layoutSubviews]
  -[VUIProductMetadataView separatorView]
  -[VUIProductMetadataView setSeparatorView:]
  -[VUIProductMetadataView viewLayout]
  -[VUIProductMetadataView sectionViews]
  -[VUIProductMetadataView setSectionViews:]
  -[VUIProductMetadataView viewElement]
  -[VUIProductMetadataView setViewElement:]
  -[VUIProductMetadataView setDefaultFocusView:]
  -[VUIProductMetadataView defaultFocusView]
  -[VUIProductMetadataView setViewLayout:]
  -[VUIProductMetadataView airingView]
  -[VUIProductMetadataView _generateSectionViewFromElement:]
  -[VUIProductMetadataView updateViewWithSections:]
  -[VUIProductMetadataView setAiringView:]


VUIConfirmationCardView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIConfirmationCardLayout *layout
 @property  VUILabel *textLabel
 @property  _TVImageView *badgeView
 @property  UIView *cardView
 @property  UIVisualEffectView *backdropView

  // instance methods
  -[VUIConfirmationCardView initWithCoder:]
  -[VUIConfirmationCardView .cxx_destruct]
  -[VUIConfirmationCardView layout]
  -[VUIConfirmationCardView setLayout:]
  -[VUIConfirmationCardView initWithFrame:]
  -[VUIConfirmationCardView layoutSubviews]
  -[VUIConfirmationCardView backdropView]
  -[VUIConfirmationCardView textLabel]
  -[VUIConfirmationCardView _configureSubviews]
  -[VUIConfirmationCardView badgeView]
  -[VUIConfirmationCardView setTextLabel:]
  -[VUIConfirmationCardView setBadgeView:]
  -[VUIConfirmationCardView cardView]
  -[VUIConfirmationCardView setCardView:]


VUIExtrasInfo : NSObject /usr/lib/libSystem.B.dylib
 @property  NSNumber *contentRating
 @property  NSString *adamID
 @property  NSString *extrasURLString
 @property  NSString *previewURLString
 @property  NSString *actionParams
 @property  NSString *loadingImage
 @property  BOOL isLightTheme
 @property  NSURL *tvAppDeeplinkURL
 @property  BOOL isEntitledToPlay

  // instance methods
  -[VUIExtrasInfo .cxx_destruct]
  -[VUIExtrasInfo initWithDictionary:]
  -[VUIExtrasInfo initWithMediaItem:]
  -[VUIExtrasInfo adamID]
  -[VUIExtrasInfo contentRating]
  -[VUIExtrasInfo actionParams]
  -[VUIExtrasInfo previewURLString]
  -[VUIExtrasInfo tvAppDeeplinkURL]
  -[VUIExtrasInfo isEntitledToPlay]
  -[VUIExtrasInfo extrasURLString]
  -[VUIExtrasInfo setActionParams:]
  -[VUIExtrasInfo loadingImage]
  -[VUIExtrasInfo isLightTheme]


VUIVideosPlayable : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *canonicalID
 @property  NSString *referenceID
 @property  NSString *showCanonicalID
 @property  NSString *seasonCanonicalID
 @property  NSString *adamID
 @property  BOOL isRental
 @property  NSNumber *rentalID
 @property  NSString *bookmarkID
 @property  BOOL isSubscription
 @property  NSString *externalID
 @property  NSString *channelID
 @property  NSString *channelName
 @property  NSString *mediaType
 @property  BOOL isMovie
 @property  NSURL *playbackURL
 @property  NSURL *hlsURL
 @property  NSURL *downloadURL
 @property  NSURL *fpsCertificateURL
 @property  NSURL *fpsKeyServerURL
 @property  NSDictionary *fpsAdditionalServerParams
 @property  NSURL *fpsNonceURL
 @property  NSURL *scrubVideoURL
 @property  NSString *buyParams
 @property  NSURL *previewArtwork
 @property  NSNumber *resumeTime
 @property  NSDate *resumeTimeTimeStamp
 @property  VUIContentMetadata *metadata
 @property  NSDictionary *vpafMetrics
 @property  NSDictionary *mediaMetrics
 @property  NSURL *tokenServerURL
 @property  NSURL *stopURL
 @property  NSDictionary *tokenServerParams
 @property  NSString *liveStreamServiceID
 @property  NSString *externalServiceID
 @property  BOOL disableScrubbing
 @property  NSString *rtcServiceIdentifier
 @property  VUIExtrasInfo *extrasInfo
 @property  NSURL *tvAppDeeplinkURL
 @property  NSNumber *requiredAgeForPlayback
 @property  NSNumber *frequencyOfAgeConfirmation
 @property  BOOL isiTunesPurchaseOrRental
 @property  BOOL sharedPurchase

  // class methods
  +[VUIVideosPlayable videosPlayablesFromDictionaries:andMetadataDictionary:]

  // instance methods
  -[VUIVideosPlayable .cxx_destruct]
  -[VUIVideosPlayable metadata]
  -[VUIVideosPlayable mediaType]
  -[VUIVideosPlayable buyParams]
  -[VUIVideosPlayable downloadURL]
  -[VUIVideosPlayable isMovie]
  -[VUIVideosPlayable externalID]
  -[VUIVideosPlayable isRental]
  -[VUIVideosPlayable hlsURL]
  -[VUIVideosPlayable adamID]
  -[VUIVideosPlayable channelName]
  -[VUIVideosPlayable rentalID]
  -[VUIVideosPlayable bookmarkID]
  -[VUIVideosPlayable resumeTime]
  -[VUIVideosPlayable channelID]
  -[VUIVideosPlayable canonicalID]
  -[VUIVideosPlayable tvAppDeeplinkURL]
  -[VUIVideosPlayable playbackURL]
  -[VUIVideosPlayable showCanonicalID]
  -[VUIVideosPlayable seasonCanonicalID]
  -[VUIVideosPlayable fpsCertificateURL]
  -[VUIVideosPlayable fpsKeyServerURL]
  -[VUIVideosPlayable fpsNonceURL]
  -[VUIVideosPlayable referenceID]
  -[VUIVideosPlayable requiredAgeForPlayback]
  -[VUIVideosPlayable frequencyOfAgeConfirmation]
  -[VUIVideosPlayable rtcServiceIdentifier]
  -[VUIVideosPlayable fpsAdditionalServerParams]
  -[VUIVideosPlayable vpafMetrics]
  -[VUIVideosPlayable mediaMetrics]
  -[VUIVideosPlayable liveStreamServiceID]
  -[VUIVideosPlayable tokenServerURL]
  -[VUIVideosPlayable isiTunesPurchaseOrRental]
  -[VUIVideosPlayable isSharedPurchase]
  -[VUIVideosPlayable tokenServerParams]
  -[VUIVideosPlayable stopURL]
  -[VUIVideosPlayable disableScrubbing]
  -[VUIVideosPlayable externalServiceID]
  -[VUIVideosPlayable resumeTimeTimeStamp]
  -[VUIVideosPlayable scrubVideoURL]
  -[VUIVideosPlayable extrasInfo]
  -[VUIVideosPlayable initWithDictionary:andMetadataDictionary:]
  -[VUIVideosPlayable isSubscription]
  -[VUIVideosPlayable previewArtwork]


VideosExtrasBannerController : NSObject /usr/lib/libSystem.B.dylib
 @property  UIView *installedView
 @property  UIScrollView *trackingScrollView
 @property  NSArray *installedConstraints
 @property  UIImageView *bannerImageView
 @property  UIImageView *vignetteImageView
 @property  NSLayoutConstraint *bannerImageViewHeightConstraint
 @property  UIView *maskView
 @property  IKDocumentBannerElement *bannerElement
 @property  unsigned long vignetteType

  // instance methods
  -[VideosExtrasBannerController .cxx_destruct]
  -[VideosExtrasBannerController setMaskView:]
  -[VideosExtrasBannerController maskView]
  -[VideosExtrasBannerController setVignetteType:]
  -[VideosExtrasBannerController vignetteType]
  -[VideosExtrasBannerController initWithBannerElement:]
  -[VideosExtrasBannerController installBannerOnView:anchoredToScrollView:]
  -[VideosExtrasBannerController trackingScrollView]
  -[VideosExtrasBannerController installedView]
  -[VideosExtrasBannerController _updateVignetteImage]
  -[VideosExtrasBannerController _configureBanner]
  -[VideosExtrasBannerController _doAllSetup]
  -[VideosExtrasBannerController bannerElement]
  -[VideosExtrasBannerController setInstalledView:]
  -[VideosExtrasBannerController setTrackingScrollView:]
  -[VideosExtrasBannerController installedConstraints]
  -[VideosExtrasBannerController setInstalledConstraints:]
  -[VideosExtrasBannerController bannerImageView]
  -[VideosExtrasBannerController setBannerImageView:]
  -[VideosExtrasBannerController vignetteImageView]
  -[VideosExtrasBannerController setVignetteImageView:]
  -[VideosExtrasBannerController bannerImageViewHeightConstraint]
  -[VideosExtrasBannerController setBannerImageViewHeightConstraint:]


VUIHomeShareViewController : VUILibraryStackViewController <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, UICollectionViewDelegate>
 @property  NSArray *homeShares
 @property  VUILibraryMenuItemViewCell *menuItemSizingCell
 @property  <VUIHomeShareViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIHomeShareViewController dealloc]
  -[VUIHomeShareViewController delegate]
  -[VUIHomeShareViewController setDelegate:]
  -[VUIHomeShareViewController .cxx_destruct]
  -[VUIHomeShareViewController start]
  -[VUIHomeShareViewController loadView]
  -[VUIHomeShareViewController viewWillAppear:]
  -[VUIHomeShareViewController collectionView:numberOfItemsInSection:]
  -[VUIHomeShareViewController collectionView:cellForItemAtIndexPath:]
  -[VUIHomeShareViewController collectionView:didSelectItemAtIndexPath:]
  -[VUIHomeShareViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUIHomeShareViewController configureWithCollectionView:]
  -[VUIHomeShareViewController initWithMediaLibrary:]
  -[VUIHomeShareViewController _deviceMediaLibrary]
  -[VUIHomeShareViewController setHomeShares:]
  -[VUIHomeShareViewController _addMediaLibraryNotificationObservers]
  -[VUIHomeShareViewController _removeMediaLibraryNotificationObservers]
  -[VUIHomeShareViewController _addNotificationObserversWithDeviceLibrary:]
  -[VUIHomeShareViewController _homeShareMediaLibrariesDidChange:]
  -[VUIHomeShareViewController _removeNotificationObserversWithDeviceLibrary:]
  -[VUIHomeShareViewController homeShares]
  -[VUIHomeShareViewController menuItemSizingCell]
  -[VUIHomeShareViewController setMenuItemSizingCell:]


VUIPresenterController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIPresenterController presentViewController:fromViewController:WithConfiguration:completion:]
  +[VUIPresenterController popOrDismissViewController:completion:]
  +[VUIPresenterController popViewController:completion:]
  +[VUIPresenterController dismissViewController:completion:]
  +[VUIPresenterController pushViewController:fromViewController:isAnimated:completion:]


VUINavigationController : VUIAppNavigationController <UIGestureRecognizerDelegate, UIPopoverPresentationControllerDelegate>
 @property  UITapGestureRecognizer *gesture
 @property  VUIDocumentUIConfiguration *configuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINavigationController .cxx_destruct]
  -[VUINavigationController setConfiguration:]
  -[VUINavigationController configuration]
  -[VUINavigationController viewDidLoad]
  -[VUINavigationController viewDidLayoutSubviews]
  -[VUINavigationController setGesture:]
  -[VUINavigationController gesture]


VUIMediaItemCredits : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSOrderedSet *cast
 @property  NSOrderedSet *directors
 @property  NSOrderedSet *producers
 @property  NSOrderedSet *screenwriters
 @property  BOOL hasCredits

  // class methods
  +[VUIMediaItemCredits _arrayFromStringRepresentation:]
  +[VUIMediaItemCredits _stringRepresentationFromArray:]

  // instance methods
  -[VUIMediaItemCredits isEqual:]
  -[VUIMediaItemCredits copyWithZone:]
  -[VUIMediaItemCredits .cxx_destruct]
  -[VUIMediaItemCredits stringRepresentation]
  -[VUIMediaItemCredits initWithStringRepresentation:]
  -[VUIMediaItemCredits producers]
  -[VUIMediaItemCredits setProducers:]
  -[VUIMediaItemCredits directors]
  -[VUIMediaItemCredits setDirectors:]
  -[VUIMediaItemCredits screenwriters]
  -[VUIMediaItemCredits setScreenwriters:]
  -[VUIMediaItemCredits setCast:]
  -[VUIMediaItemCredits cast]
  -[VUIMediaItemCredits hasCredits]


VUIRoomBannerLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *backgroundImageLayout
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *descriptionTextLayout

  // class methods
  +[VUIRoomBannerLayout layoutWithLayout:element:]

  // instance methods
  -[VUIRoomBannerLayout init]
  -[VUIRoomBannerLayout .cxx_destruct]
  -[VUIRoomBannerLayout titleTextLayout]
  -[VUIRoomBannerLayout descriptionTextLayout]
  -[VUIRoomBannerLayout backgroundImageLayout]
  -[VUIRoomBannerLayout setTitleTextLayout:]
  -[VUIRoomBannerLayout setDescriptionTextLayout:]
  -[VUIRoomBannerLayout setBackgroundImageLayout:]


VUILibraryEpisodeFrameView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  _TVImageView *imageView
 @property  _TVProgressView *progressView
 @property  TVButton *playButton
 @property  long long layout
 @property  UIImageView *fullyPlayedImageView
 @property  <VUILibraryEpisodeFrameViewDelegate> *delegate

  // class methods
  +[VUILibraryEpisodeFrameView configureEpisodeFrameView:withMedia:layout:imageSize:]

  // instance methods
  -[VUILibraryEpisodeFrameView delegate]
  -[VUILibraryEpisodeFrameView setDelegate:]
  -[VUILibraryEpisodeFrameView .cxx_destruct]
  -[VUILibraryEpisodeFrameView layout]
  -[VUILibraryEpisodeFrameView setLayout:]
  -[VUILibraryEpisodeFrameView sizeThatFits:]
  -[VUILibraryEpisodeFrameView layoutSubviews]
  -[VUILibraryEpisodeFrameView imageView]
  -[VUILibraryEpisodeFrameView setImageView:]
  -[VUILibraryEpisodeFrameView playButton]
  -[VUILibraryEpisodeFrameView setPlayButton:]
  -[VUILibraryEpisodeFrameView progressView]
  -[VUILibraryEpisodeFrameView setProgressView:]
  -[VUILibraryEpisodeFrameView setFullyPlayedImageView:]
  -[VUILibraryEpisodeFrameView fullyPlayedImageView]
  -[VUILibraryEpisodeFrameView _playButtonPressed]


VideosExtrasMainMenuSectionMetrics : NSObject /usr/lib/libSystem.B.dylib
 @property  <VideosExtrasMainMenuSectionMetricsDataSource> *dataSource
 @property  UIFontDescriptor *desiredFontDescriptor
 @property  UIFontDescriptor *minimumFontDescriptor
 @property  double desiredCellSpacing
 @property  double minimumCellSpacing
 @property  double desiredWidth
 @property  UIFontDescriptor *fittingFontDescriptor
 @property  double fittingCellSpacing
 @property  {CGSize=dd} totalFittingSize

  // instance methods
  -[VideosExtrasMainMenuSectionMetrics dealloc]
  -[VideosExtrasMainMenuSectionMetrics .cxx_destruct]
  -[VideosExtrasMainMenuSectionMetrics dataSource]
  -[VideosExtrasMainMenuSectionMetrics setDataSource:]
  -[VideosExtrasMainMenuSectionMetrics _setNeedsUpdate]
  -[VideosExtrasMainMenuSectionMetrics desiredWidth]
  -[VideosExtrasMainMenuSectionMetrics setDesiredWidth:]
  -[VideosExtrasMainMenuSectionMetrics sizeForCellAtIndex:]
  -[VideosExtrasMainMenuSectionMetrics _updateAllMetrics]
  -[VideosExtrasMainMenuSectionMetrics _recalculateSizes]
  -[VideosExtrasMainMenuSectionMetrics desiredCellSpacing]
  -[VideosExtrasMainMenuSectionMetrics desiredFontDescriptor]
  -[VideosExtrasMainMenuSectionMetrics _horizontalFittingSizeForFontDescriptor:gutterSize:itemCount:itemSizes:]
  -[VideosExtrasMainMenuSectionMetrics setDesiredFontDescriptor:]
  -[VideosExtrasMainMenuSectionMetrics setMinimumFontDescriptor:]
  -[VideosExtrasMainMenuSectionMetrics setDesiredCellSpacing:]
  -[VideosExtrasMainMenuSectionMetrics setMinimumCellSpacing:]
  -[VideosExtrasMainMenuSectionMetrics setFittingWidth:]
  -[VideosExtrasMainMenuSectionMetrics updateSizes]
  -[VideosExtrasMainMenuSectionMetrics minimumFontDescriptor]
  -[VideosExtrasMainMenuSectionMetrics minimumCellSpacing]
  -[VideosExtrasMainMenuSectionMetrics fittingFontDescriptor]
  -[VideosExtrasMainMenuSectionMetrics fittingCellSpacing]
  -[VideosExtrasMainMenuSectionMetrics totalFittingSize]


VUIOverlayViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIOverlayViewFactory overlayViewWithElement:cardlayoutType:existingView:canFallbackToInterfaceFactory:]
  +[VUIOverlayViewFactory _overlayTypeFromString:]
  +[VUIOverlayViewFactory _upnextOverlayWithElement:existingView:]
  +[VUIOverlayViewFactory _sportsOverlayWithElement:cardlayoutType:overlayType:existingView:]
  +[VUIOverlayViewFactory _overlayWithElement:overlayType:existingView:]
  +[VUIOverlayViewFactory _overlayWithMediaItem:overlayType:existingView:]
  +[VUIOverlayViewFactory _overlayPaddingWithElement:]
  +[VUIOverlayViewFactory _gradientLayerWithViewElement:overlayType:existingLayer:]
  +[VUIOverlayViewFactory _overlayPaddingWithMediaItem:]
  +[VUIOverlayViewFactory overlayTypeOfElement:]
  +[VUIOverlayViewFactory overlayViewWithMediaItem:overlayType:existingView:]


VUIPopoverViewControllerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UITableView *tableView
 @property  UIButton *cancelButton

  // instance methods
  -[VUIPopoverViewControllerView initWithCoder:]
  -[VUIPopoverViewControllerView .cxx_destruct]
  -[VUIPopoverViewControllerView initWithFrame:]
  -[VUIPopoverViewControllerView layoutSubviews]
  -[VUIPopoverViewControllerView tableView]
  -[VUIPopoverViewControllerView cancelButton]
  -[VUIPopoverViewControllerView setTableView:]
  -[VUIPopoverViewControllerView _configureSubviews]


VUIDownloadButtonProperties : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL hasBorder
 @property  BOOL enabled
 @property  BOOL hasImage
 @property  UIImage *image
 @property  BOOL hasTitle
 @property  NSString *title
 @property  BOOL indeterminate
 @property  double progress
 @property  unsigned long downloadState

  // instance methods
  -[VUIDownloadButtonProperties setEnabled:]
  -[VUIDownloadButtonProperties .cxx_destruct]
  -[VUIDownloadButtonProperties progress]
  -[VUIDownloadButtonProperties title]
  -[VUIDownloadButtonProperties setTitle:]
  -[VUIDownloadButtonProperties setIndeterminate:]
  -[VUIDownloadButtonProperties isEnabled]
  -[VUIDownloadButtonProperties image]
  -[VUIDownloadButtonProperties setImage:]
  -[VUIDownloadButtonProperties setProgress:]
  -[VUIDownloadButtonProperties setHasTitle:]
  -[VUIDownloadButtonProperties hasTitle]
  -[VUIDownloadButtonProperties hasImage]
  -[VUIDownloadButtonProperties setHasImage:]
  -[VUIDownloadButtonProperties downloadState]
  -[VUIDownloadButtonProperties setDownloadState:]
  -[VUIDownloadButtonProperties hasBorder]
  -[VUIDownloadButtonProperties setHasBorder:]
  -[VUIDownloadButtonProperties isInderminate]


VUIDownloadButtonViewModel : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityAssetControllerDelegate>
 @property  unsigned long downloadState
 @property  NSString *downloadStateStringValue
 @property  double downloadProgress
 @property  VUIVideosPlayable *videosPlayable
 @property  NSArray *downloadStateToString
 @property  NSObject<VUIMediaEntityAssetController> *assetController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDownloadButtonViewModel dealloc]
  -[VUIDownloadButtonViewModel .cxx_destruct]
  -[VUIDownloadButtonViewModel downloadProgress]
  -[VUIDownloadButtonViewModel setDownloadProgress:]
  -[VUIDownloadButtonViewModel downloadState]
  -[VUIDownloadButtonViewModel setDownloadState:]
  -[VUIDownloadButtonViewModel startDownload]
  -[VUIDownloadButtonViewModel resumeDownload]
  -[VUIDownloadButtonViewModel assetController]
  -[VUIDownloadButtonViewModel setAssetController:]
  -[VUIDownloadButtonViewModel mediaEntityAssetController:stateDidChange:]
  -[VUIDownloadButtonViewModel pauseDownload]
  -[VUIDownloadButtonViewModel _getAssetControllerCreatingMediaItem:completion:]
  -[VUIDownloadButtonViewModel _createDownloadStateToStringArrayMap]
  -[VUIDownloadButtonViewModel setDownloadStateToString:]
  -[VUIDownloadButtonViewModel _updateDownloadStateFromAssetControllerState:]
  -[VUIDownloadButtonViewModel videosPlayable]
  -[VUIDownloadButtonViewModel setVideosPlayable:]
  -[VUIDownloadButtonViewModel _downloadStateFromAssetsControllerStatus:]
  -[VUIDownloadButtonViewModel initWithVideosPlayable:]
  -[VUIDownloadButtonViewModel initWithAssetController:]
  -[VUIDownloadButtonViewModel stopDownload]
  -[VUIDownloadButtonViewModel deleteDownload]
  -[VUIDownloadButtonViewModel preflightPresentingViewController:completion:]
  -[VUIDownloadButtonViewModel downloadStateStringValue]
  -[VUIDownloadButtonViewModel setDownloadStateStringValue:]
  -[VUIDownloadButtonViewModel downloadStateToString]


VideosExtrasCollectionReusableView : UICollectionReusableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasCollectionReusableView .cxx_destruct]
  -[VideosExtrasCollectionReusableView initWithFrame:]
  -[VideosExtrasCollectionReusableView configureForHeaderElement:headerStyle:]
  -[VideosExtrasCollectionReusableView _configureConstraintsForInsets:]


VUILibraryIpadMainViewController : VUILibraryFetchControllerViewController <VUILibraryCategoryMenuViewModelDelegate, VUILibrarySplitViewControllerDelegate, UIGestureRecognizerDelegate>
 @property  BOOL areLocalMediaItemsAvailable
 @property  VUILibraryCategoryMenuViewModel *categoryViewModel
 @property  NSSet *validCategories
 @property  VUILibrarySplitViewController *librarySplitViewController
 @property  VUIDownloadViewController *downloadViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryIpadMainViewController dealloc]
  -[VUILibraryIpadMainViewController .cxx_destruct]
  -[VUILibraryIpadMainViewController loadView]
  -[VUILibraryIpadMainViewController gestureRecognizerShouldBegin:]
  -[VUILibraryIpadMainViewController viewDidLoad]
  -[VUILibraryIpadMainViewController viewDidAppear:]
  -[VUILibraryIpadMainViewController _networkReachabilityDidChange:]
  -[VUILibraryIpadMainViewController _accountsChanged:]
  -[VUILibraryIpadMainViewController initWithMediaLibrary:]
  -[VUILibraryIpadMainViewController _deviceMediaLibrary]
  -[VUILibraryIpadMainViewController setValidCategories:]
  -[VUILibraryIpadMainViewController validCategories]
  -[VUILibraryIpadMainViewController _addMediaLibraryNotificationObservers]
  -[VUILibraryIpadMainViewController _removeMediaLibraryNotificationObservers]
  -[VUILibraryIpadMainViewController categoryViewModel:fetchDidCompleteWithCategories:error:]
  -[VUILibraryIpadMainViewController categoryViewModel:categoriesDidChange:]
  -[VUILibraryIpadMainViewController _addNotificationObserversWithDeviceLibrary:]
  -[VUILibraryIpadMainViewController _removeNotificationObserversWithDeviceLibrary:]
  -[VUILibraryIpadMainViewController vui_ppt_isLoading]
  -[VUILibraryIpadMainViewController areLocalMediaItemsAvailable]
  -[VUILibraryIpadMainViewController setAreLocalMediaItemsAvailable:]
  -[VUILibraryIpadMainViewController setCategoryViewModel:]
  -[VUILibraryIpadMainViewController categoryViewModel]
  -[VUILibraryIpadMainViewController _updateVisibleViewControllerForCategories:error:]
  -[VUILibraryIpadMainViewController librarySplitViewController]
  -[VUILibraryIpadMainViewController _deviceMediaLibraryUpdateStateDidChange:]
  -[VUILibraryIpadMainViewController _isDeviceMediaLibraryInitialUpdateInProgress]
  -[VUILibraryIpadMainViewController _stopMonitoringDeviceMediaLibraryInitialUpdate]
  -[VUILibraryIpadMainViewController _startMonitoringDeviceMediaLibraryInitialUpdate]
  -[VUILibraryIpadMainViewController downloadViewController]
  -[VUILibraryIpadMainViewController setDownloadViewController:]
  -[VUILibraryIpadMainViewController _setupDownloadViewController]
  -[VUILibraryIpadMainViewController setLibrarySplitViewController:]
  -[VUILibraryIpadMainViewController librarySplitViewControllerShouldDismiss:]


VUIMediaLibraryOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  VUIMediaLibrary *mediaLibrary
 @property  NSError *error
 @property  VUIAsynchronousWorkToken *asyncWorkToken

  // instance methods
  -[VUIMediaLibraryOperation init]
  -[VUIMediaLibraryOperation .cxx_destruct]
  -[VUIMediaLibraryOperation error]
  -[VUIMediaLibraryOperation cancel]
  -[VUIMediaLibraryOperation setError:]
  -[VUIMediaLibraryOperation mediaLibrary]
  -[VUIMediaLibraryOperation setMediaLibrary:]
  -[VUIMediaLibraryOperation initWithMediaLibrary:]
  -[VUIMediaLibraryOperation setAsyncWorkToken:]
  -[VUIMediaLibraryOperation asyncWorkToken]


VUIMediaEntityType : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long subtype
 @property  unsigned long mediaCategoryType
 @property  unsigned long mediaCollectionType
 @property  BOOL rental

  // class methods
  +[VUIMediaEntityType show]
  +[VUIMediaEntityType movie]
  +[VUIMediaEntityType season]
  +[VUIMediaEntityType episode]
  +[VUIMediaEntityType movieRental]
  +[VUIMediaEntityType homeVideo]

  // instance methods
  -[VUIMediaEntityType init]
  -[VUIMediaEntityType isEqual:]
  -[VUIMediaEntityType copyWithZone:]
  -[VUIMediaEntityType subtype]
  -[VUIMediaEntityType setSubtype:]
  -[VUIMediaEntityType isRental]
  -[VUIMediaEntityType setRental:]
  -[VUIMediaEntityType stringDescription]
  -[VUIMediaEntityType mediaCategoryType]
  -[VUIMediaEntityType mediaCollectionType]
  -[VUIMediaEntityType _initWithMediaItemCategoryType:isRental:]
  -[VUIMediaEntityType _initWithMediaCollectionType:mediaCategoryType:]
  -[VUIMediaEntityType setMediaCategoryType:]
  -[VUIMediaEntityType setMediaCollectionType:]


VUISportsProductBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  VUISportsProductBannerLayout *layout
 @property  VUILabel *titleLabel
 @property  NSArray *rowLabels
 @property  NSArray *scoreLabels
 @property  NSArray *descriptionLabels
 @property  VUILabel *footerLabel
 @property  NSArray *buttonViews
 @property  VUILabel *availabilityTextView
 @property  _TVImageView *availabilityImageView

  // instance methods
  -[VUISportsProductBannerView .cxx_destruct]
  -[VUISportsProductBannerView layout]
  -[VUISportsProductBannerView setLayout:]
  -[VUISportsProductBannerView initWithFrame:]
  -[VUISportsProductBannerView titleLabel]
  -[VUISportsProductBannerView sizeThatFits:]
  -[VUISportsProductBannerView layoutSubviews]
  -[VUISportsProductBannerView separatorView]
  -[VUISportsProductBannerView setTitleLabel:]
  -[VUISportsProductBannerView setSeparatorView:]
  -[VUISportsProductBannerView buttonViews]
  -[VUISportsProductBannerView setButtonViews:]
  -[VUISportsProductBannerView setFooterLabel:]
  -[VUISportsProductBannerView footerLabel]
  -[VUISportsProductBannerView _iOS_layoutSubviewsWithSize:computationOnly:]
  -[VUISportsProductBannerView _totalMaxScoreWidthWithAvailableWidth:]
  -[VUISportsProductBannerView _maxScoreWidthForColumn:availableWidth:]
  -[VUISportsProductBannerView _layoutLabels:scoreLabels:withOrigin:maxWidth:]
  -[VUISportsProductBannerView _layoutLabels:withOrigin:maxWidth:]
  -[VUISportsProductBannerView _layoutScoresWithOrigin:availableWidth:padding:]
  -[VUISportsProductBannerView _layoutButtonsWithOrigin:buttonHeight:buttonWidth:spacing:]
  -[VUISportsProductBannerView setRowLabels:]
  -[VUISportsProductBannerView setScoreLabels:]
  -[VUISportsProductBannerView setDescriptionLabels:]
  -[VUISportsProductBannerView setAvailabilityTextView:]
  -[VUISportsProductBannerView setAvailabilityImageView:]
  -[VUISportsProductBannerView rowLabels]
  -[VUISportsProductBannerView scoreLabels]
  -[VUISportsProductBannerView descriptionLabels]
  -[VUISportsProductBannerView availabilityTextView]
  -[VUISportsProductBannerView availabilityImageView]


VUILibraryMenuItemViewCell : VUIListCollectionViewCell
 @property  VUILabel *titleLabel
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView
 @property  BOOL hideChevron

  // instance methods
  -[VUILibraryMenuItemViewCell .cxx_destruct]
  -[VUILibraryMenuItemViewCell initWithFrame:]
  -[VUILibraryMenuItemViewCell titleLabel]
  -[VUILibraryMenuItemViewCell sizeThatFits:]
  -[VUILibraryMenuItemViewCell layoutSubviews]
  -[VUILibraryMenuItemViewCell topSeparatorView]
  -[VUILibraryMenuItemViewCell bottomSeparatorView]
  -[VUILibraryMenuItemViewCell setTopSeparatorView:]
  -[VUILibraryMenuItemViewCell setHideChevron:]
  -[VUILibraryMenuItemViewCell hideChevron]


VUIMPMediaEntitiesSingleFetchOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  VUIMediaEntityFetchRequest *request
 @property  VUIMediaEntityFetchResponse *response
 @property  NSError *error
 @property  VUIMPMediaLibrary *mediaLibrary
 @property  VUIMediaEntityKind *mediaEntityKind
 @property  NSMutableSet *prefetchProperties
 @property  MPMediaPredicate *mediaQueryPredicate
 @property  NSArray *mediaQuerySortOrderingProperties
 @property  NSDictionary *mediaQuerySortOrderingDirectionMappings
 @property  NSArray *postFetchSortDescriptors
 @property  BOOL processPredicateAfterFetch
 @property  BOOL processRangeAfterFetch
 @property  VUIMediaEntityType *currentFetchMediaEntityType

  // class methods
  +[VUIMPMediaEntitiesSingleFetchOperation _sortIndexesWithMediaQuerySection:]

  // instance methods
  -[VUIMPMediaEntitiesSingleFetchOperation init]
  -[VUIMPMediaEntitiesSingleFetchOperation .cxx_destruct]
  -[VUIMPMediaEntitiesSingleFetchOperation error]
  -[VUIMPMediaEntitiesSingleFetchOperation setError:]
  -[VUIMPMediaEntitiesSingleFetchOperation setRequest:]
  -[VUIMPMediaEntitiesSingleFetchOperation request]
  -[VUIMPMediaEntitiesSingleFetchOperation response]
  -[VUIMPMediaEntitiesSingleFetchOperation setResponse:]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaQuery]
  -[VUIMPMediaEntitiesSingleFetchOperation mediaLibrary]
  -[VUIMPMediaEntitiesSingleFetchOperation setMediaLibrary:]
  -[VUIMPMediaEntitiesSingleFetchOperation prefetchProperties]
  -[VUIMPMediaEntitiesSingleFetchOperation setPrefetchProperties:]
  -[VUIMPMediaEntitiesSingleFetchOperation executionDidBegin]
  -[VUIMPMediaEntitiesSingleFetchOperation initWithMediaLibrary:request:]
  -[VUIMPMediaEntitiesSingleFetchOperation _coalesceResponses:]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaEntityKind]
  -[VUIMPMediaEntitiesSingleFetchOperation setMediaEntityKind:]
  -[VUIMPMediaEntitiesSingleFetchOperation _populatePrefetchProperties]
  -[VUIMPMediaEntitiesSingleFetchOperation _processRange]
  -[VUIMPMediaEntitiesSingleFetchOperation _processSortDescriptors]
  -[VUIMPMediaEntitiesSingleFetchOperation _processPredicate]
  -[VUIMPMediaEntitiesSingleFetchOperation _itemsFetchResponseWithMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation _collectionsFetchResponseWithMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation setProcessRangeAfterFetch:]
  -[VUIMPMediaEntitiesSingleFetchOperation mediaEntityKind]
  -[VUIMPMediaEntitiesSingleFetchOperation _shouldSortUsingMediaQuery]
  -[VUIMPMediaEntitiesSingleFetchOperation setMediaQuerySortOrderingProperties:]
  -[VUIMPMediaEntitiesSingleFetchOperation setMediaQuerySortOrderingDirectionMappings:]
  -[VUIMPMediaEntitiesSingleFetchOperation setPostFetchSortDescriptors:]
  -[VUIMPMediaEntitiesSingleFetchOperation postFetchSortDescriptors]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaQueryPredicateForPredicate:]
  -[VUIMPMediaEntitiesSingleFetchOperation setProcessPredicateAfterFetch:]
  -[VUIMPMediaEntitiesSingleFetchOperation setMediaQueryPredicate:]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaQueryPredicateForCompoundPredicate:]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaQueryPropertyPredicateForComparisonPredicate:]
  -[VUIMPMediaEntitiesSingleFetchOperation _keyPathMediaQueryPropertyPredicateWithKeyPathExpression:operatorType:constantExpression:]
  -[VUIMPMediaEntitiesSingleFetchOperation _bitTestMediaQueryPropertyPredicateWithKeyPathBitTestExpression:operatorType:constantExpression:]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaEntityPropertyDescriptorForFilteringWithKeyPath:]
  -[VUIMPMediaEntitiesSingleFetchOperation _baseMediaQuery]
  -[VUIMPMediaEntitiesSingleFetchOperation _addEntityLimitToMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation _addPredicateToMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation _addSortingPropertiesToMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation _addPrefetchPropertiesToMediaQuery:]
  -[VUIMPMediaEntitiesSingleFetchOperation processRangeAfterFetch]
  -[VUIMPMediaEntitiesSingleFetchOperation mediaQueryPredicate]
  -[VUIMPMediaEntitiesSingleFetchOperation _isSortingBeingPerformedByMediaQuery]
  -[VUIMPMediaEntitiesSingleFetchOperation mediaQuerySortOrderingProperties]
  -[VUIMPMediaEntitiesSingleFetchOperation mediaQuerySortOrderingDirectionMappings]
  -[VUIMPMediaEntitiesSingleFetchOperation processPredicateAfterFetch]
  -[VUIMPMediaEntitiesSingleFetchOperation _mediaEntities:subarrayWithRange:]
  -[VUIMPMediaEntitiesSingleFetchOperation _fetchResponseWithMediaEntities:mediaQuerySections:]
  -[VUIMPMediaEntitiesSingleFetchOperation _processFetchedMediaEntities:]
  -[VUIMPMediaEntitiesSingleFetchOperation currentFetchMediaEntityType]
  -[VUIMPMediaEntitiesSingleFetchOperation setCurrentFetchMediaEntityType:]


VUIMediaAPIClient : NSObject /usr/lib/libSystem.B.dylib
 @property  AMSURLSession *session
 @property  AMSMediaTokenService *tokenService
 @property  NSString *clientIdentifier

  // class methods
  +[VUIMediaAPIClient sharedInstance]
  +[VUIMediaAPIClient initializeWithClientIdentifier:]

  // instance methods
  -[VUIMediaAPIClient .cxx_destruct]
  -[VUIMediaAPIClient session]
  -[VUIMediaAPIClient setSession:]
  -[VUIMediaAPIClient _createSession]
  -[VUIMediaAPIClient setClientIdentifier:]
  -[VUIMediaAPIClient clientIdentifier]
  -[VUIMediaAPIClient initWithClientIdentifier:]
  -[VUIMediaAPIClient tokenService]
  -[VUIMediaAPIClient _createTokenServiceWithSession:]
  -[VUIMediaAPIClient setTokenService:]
  -[VUIMediaAPIClient fetchContentForUrl:completion:]


VUIButtonLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  unsigned long type
 @property  unsigned long titleStyle
 @property  double cornerRadius
 @property  VUITextLayout *titleLayout
 @property  TVImageLayout *imageLayout
 @property  NSShadow *shadow
 @property  {CGPoint=dd} contentMotionTranslation

  // class methods
  +[VUIButtonLayout standardTitleLayoutWithStyle:]

  // instance methods
  -[VUIButtonLayout type]
  -[VUIButtonLayout .cxx_destruct]
  -[VUIButtonLayout initWithType:]
  -[VUIButtonLayout shadow]
  -[VUIButtonLayout cornerRadius]
  -[VUIButtonLayout setShadow:]
  -[VUIButtonLayout titleStyle]
  -[VUIButtonLayout titleLayout]
  -[VUIButtonLayout setTitleLayout:]
  -[VUIButtonLayout imageLayout]
  -[VUIButtonLayout setImageLayout:]
  -[VUIButtonLayout initWithType:titleStyle:]
  -[VUIButtonLayout _configurePrimaryButton]
  -[VUIButtonLayout _configureTextualButton]
  -[VUIButtonLayout _configureProductSecondaryButton]
  -[VUIButtonLayout _configureImageButton]
  -[VUIButtonLayout _configureRoundButton]
  -[VUIButtonLayout _configureBarButtonItem]
  -[VUIButtonLayout contentMotionTranslation]


VUIMediaLibrary : VUIImageLoader
 @property  NSObject<VUIMediaLibraryIdentifier> *identifier
 @property  unsigned long type
 @property  unsigned long revision
 @property  VUIMediaLibraryManager *manager
 @property  NSString *title
 @property  BOOL connectable
 @property  BOOL supportsDRMContent
 @property  unsigned long connectionState

  // instance methods
  -[VUIMediaLibrary init]
  -[VUIMediaLibrary isEqual:]
  -[VUIMediaLibrary type]
  -[VUIMediaLibrary setType:]
  -[VUIMediaLibrary .cxx_destruct]
  -[VUIMediaLibrary identifier]
  -[VUIMediaLibrary setIdentifier:]
  -[VUIMediaLibrary title]
  -[VUIMediaLibrary manager]
  -[VUIMediaLibrary setRevision:]
  -[VUIMediaLibrary revision]
  -[VUIMediaLibrary connectionState]
  -[VUIMediaLibrary isConnectable]
  -[VUIMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUIMediaLibrary initWithIdentifier:type:manager:]
  -[VUIMediaLibrary _postContentsDidChangeNotification]
  -[VUIMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUIMediaLibrary saveMediaEntity:completionHandler:]
  -[VUIMediaLibrary _imageLoaderIdentifier]
  -[VUIMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUIMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIMediaLibrary connectWithCompletionHandler:progressHandler:]
  -[VUIMediaLibrary supportsDRMContent]
  -[VUIMediaLibrary _incrementRevision]
  -[VUIMediaLibrary _updateWithTitle:connectionState:]


VUIFeaturedCellOverlayLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  long long overlayType
 @property  VUIAppleTVChannelLogoLayout *channelLogoLayout
 @property  VUITextLayout *titleLayout
 @property  VUITextLayout *subtitleLayout
 @property  VUITextLayout *disclaimerLayout
 @property  VUIButtonLayout *buttonLayout
 @property  VUIButtonLayout *textButtonLayout

  // class methods
  +[VUIFeaturedCellOverlayLayout layoutWithLayout:overlayType:element:]

  // instance methods
  -[VUIFeaturedCellOverlayLayout .cxx_destruct]
  -[VUIFeaturedCellOverlayLayout titleLayout]
  -[VUIFeaturedCellOverlayLayout setTitleLayout:]
  -[VUIFeaturedCellOverlayLayout overlayType]
  -[VUIFeaturedCellOverlayLayout subtitleLayout]
  -[VUIFeaturedCellOverlayLayout setSubtitleLayout:]
  -[VUIFeaturedCellOverlayLayout setOverlayType:]
  -[VUIFeaturedCellOverlayLayout channelLogoLayout]
  -[VUIFeaturedCellOverlayLayout buttonLayout]
  -[VUIFeaturedCellOverlayLayout setChannelLogoLayout:]
  -[VUIFeaturedCellOverlayLayout _setupLayouts]
  -[VUIFeaturedCellOverlayLayout initWithOverlayType:]
  -[VUIFeaturedCellOverlayLayout disclaimerLayout]
  -[VUIFeaturedCellOverlayLayout setDisclaimerLayout:]
  -[VUIFeaturedCellOverlayLayout setButtonLayout:]
  -[VUIFeaturedCellOverlayLayout textButtonLayout]
  -[VUIFeaturedCellOverlayLayout setTextButtonLayout:]


VUIMediaCategory : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long type
 @property  NSSet *supportedMediaCollectionTypes
 @property  NSDictionary *supportedChildMediaCollectionTypes

  // class methods
  +[VUIMediaCategory mediaCatgeoryForType:]

  // instance methods
  -[VUIMediaCategory init]
  -[VUIMediaCategory type]
  -[VUIMediaCategory setType:]
  -[VUIMediaCategory .cxx_destruct]
  -[VUIMediaCategory _initWithType:]
  -[VUIMediaCategory supportedMediaCollectionTypes]
  -[VUIMediaCategory setSupportedMediaCollectionTypes:]
  -[VUIMediaCategory setSupportedChildMediaCollectionTypes:]
  -[VUIMediaCategory supportedChildMediaCollectionTypes]


VUIAppDocumentPurchaseEventDescriptor : VUIAppDocumentUpdateEventDescriptor
 @property  NSString *canonicalID

  // instance methods
  -[VUIAppDocumentPurchaseEventDescriptor isEqual:]
  -[VUIAppDocumentPurchaseEventDescriptor copyWithZone:]
  -[VUIAppDocumentPurchaseEventDescriptor .cxx_destruct]
  -[VUIAppDocumentPurchaseEventDescriptor initWithEventType:]
  -[VUIAppDocumentPurchaseEventDescriptor canonicalID]
  -[VUIAppDocumentPurchaseEventDescriptor initWithCanonicalID:]
  -[VUIAppDocumentPurchaseEventDescriptor setCanonicalID:]


VUIRentalExpirationMonitor : NSObject /usr/lib/libSystem.B.dylib
 @property  TVPStateMachine *stateMachine
 @property  NSDate *dateOfLastRentalExpirationHandling
 @property  NSTimer *earliestExpirationTimer

  // class methods
  +[VUIRentalExpirationMonitor sharedInstance]

  // instance methods
  -[VUIRentalExpirationMonitor init]
  -[VUIRentalExpirationMonitor dealloc]
  -[VUIRentalExpirationMonitor .cxx_destruct]
  -[VUIRentalExpirationMonitor startMonitoring]
  -[VUIRentalExpirationMonitor stateMachine]
  -[VUIRentalExpirationMonitor setStateMachine:]
  -[VUIRentalExpirationMonitor _applicationDidBecomeActive:]
  -[VUIRentalExpirationMonitor _libraryContentsDidChange:]
  -[VUIRentalExpirationMonitor _registerStateMachineHandlers]
  -[VUIRentalExpirationMonitor _isPlaybackUIBeingShownDidChange:]
  -[VUIRentalExpirationMonitor setEarliestExpirationTimer:]
  -[VUIRentalExpirationMonitor dateOfLastRentalExpirationHandling]
  -[VUIRentalExpirationMonitor setDateOfLastRentalExpirationHandling:]
  -[VUIRentalExpirationMonitor earliestExpirationTimer]
  -[VUIRentalExpirationMonitor _expirationTimerDidFire:]


VideosExtrasRootViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <IKApplication, IKAppContextDelegate, UINavigationControllerDelegate, UICollectionViewDelegate, IKAppDeviceConfig, MPVideoOverlayDelegate>
 @property  VideosExtrasFeatureContainerViewController *featureContainer
 @property  IKAppContext *applicationContext
 @property  NSArray *lastSelectedSnapshotViewControllers
 @property  UIView *extrasMenuBarView
 @property  UIStackView *extrasMenuButtonsStackView
 @property  UIButton *backButton
 @property  NSLayoutConstraint *extrasScrollViewLeadingConstraint
 @property  <IKAppDataStoring> *localStorage
 @property  <IKAppDataStoring> *vendorStorage
 @property  <IKAppUserDefaultsStoring> *userDefaultsStorage
 @property  VideosExtrasArtworkDataSource *artworkDataSource
 @property  UINavigationController *navigationController
 @property  VideosExtrasMainTemplateViewController *mainTemplateViewController
 @property  UIView *mainMenuBar
 @property  UITraitCollection *overrideTraitCollection
 @property  VideosExtrasContext *context
 @property  {CGSize=dd} initialPresentationSize
 @property  <VideosExtrasRootViewControllerDelegate> *delegate
 @property  NSArray *mainMenuItemElements
 @property  BOOL showsMenuBar
 @property  BOOL showsBuiltInNavigationControls
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideosExtrasRootViewController currentController]

  // instance methods
  -[VideosExtrasRootViewController dealloc]
  -[VideosExtrasRootViewController delegate]
  -[VideosExtrasRootViewController setDelegate:]
  -[VideosExtrasRootViewController .cxx_destruct]
  -[VideosExtrasRootViewController timeZone]
  -[VideosExtrasRootViewController start]
  -[VideosExtrasRootViewController context]
  -[VideosExtrasRootViewController initWithContext:]
  -[VideosExtrasRootViewController localStorage]
  -[VideosExtrasRootViewController setLocalStorage:]
  -[VideosExtrasRootViewController traitCollectionDidChange:]
  -[VideosExtrasRootViewController viewWillAppear:]
  -[VideosExtrasRootViewController viewDidLoad]
  -[VideosExtrasRootViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VideosExtrasRootViewController supportedInterfaceOrientations]
  -[VideosExtrasRootViewController viewDidLayoutSubviews]
  -[VideosExtrasRootViewController shouldAutorotate]
  -[VideosExtrasRootViewController backButton]
  -[VideosExtrasRootViewController setBackButton:]
  -[VideosExtrasRootViewController navigationController]
  -[VideosExtrasRootViewController collectionView:didSelectItemAtIndexPath:]
  -[VideosExtrasRootViewController childViewControllerForHomeIndicatorAutoHidden]
  -[VideosExtrasRootViewController navigationController:interactionControllerForAnimationController:]
  -[VideosExtrasRootViewController navigationController:animationControllerForOperation:fromViewController:toViewController:]
  -[VideosExtrasRootViewController prefersStatusBarHidden]
  -[VideosExtrasRootViewController _backButtonPressed:]
  -[VideosExtrasRootViewController appIdentifier]
  -[VideosExtrasRootViewController artworkDataSource]
  -[VideosExtrasRootViewController screenSize]
  -[VideosExtrasRootViewController vendorIdentifier]
  -[VideosExtrasRootViewController setArtworkDataSource:]
  -[VideosExtrasRootViewController overlayTappedBackButton:]
  -[VideosExtrasRootViewController setApplicationContext:]
  -[VideosExtrasRootViewController deviceConfigForContext:]
  -[VideosExtrasRootViewController navigationControllerForContext:]
  -[VideosExtrasRootViewController appIsTrusted]
  -[VideosExtrasRootViewController vendorStorage]
  -[VideosExtrasRootViewController userDefaultsStorage]
  -[VideosExtrasRootViewController appContext:evaluateAppJavaScriptInContext:]
  -[VideosExtrasRootViewController appJSURL]
  -[VideosExtrasRootViewController appContext:didStartWithOptions:]
  -[VideosExtrasRootViewController appContext:didFailWithError:]
  -[VideosExtrasRootViewController appContext:didStopWithOptions:]
  -[VideosExtrasRootViewController viewElementRegistry]
  -[VideosExtrasRootViewController appUsesDefaultStyleSheets]
  -[VideosExtrasRootViewController shouldIgnoreJSValidation]
  -[VideosExtrasRootViewController appLaunchParams]
  -[VideosExtrasRootViewController setUserDefaultsStorage:]
  -[VideosExtrasRootViewController preferredVideoFormat]
  -[VideosExtrasRootViewController preferredVideoPreviewFormat]
  -[VideosExtrasRootViewController systemLanguage]
  -[VideosExtrasRootViewController storeFrontCountryCode]
  -[VideosExtrasRootViewController isTimeZoneSet]
  -[VideosExtrasRootViewController applicationContext]
  -[VideosExtrasRootViewController extrasMenuBarView]
  -[VideosExtrasRootViewController mainTemplateViewController]
  -[VideosExtrasRootViewController mainMenuItemElements]
  -[VideosExtrasRootViewController setShowsMenuBar:]
  -[VideosExtrasRootViewController setShowsBuiltInNavigationControls:]
  -[VideosExtrasRootViewController setInitialPresentationSize:]
  -[VideosExtrasRootViewController showExtrasMenuBarInFrame:]
  -[VideosExtrasRootViewController setClearsStackOnNextPush]
  -[VideosExtrasRootViewController mainMenuBar]
  -[VideosExtrasRootViewController _stopOldContextIfNeeded]
  -[VideosExtrasRootViewController _createDataStorageForIdentifier:]
  -[VideosExtrasRootViewController showsBuiltInNavigationControls]
  -[VideosExtrasRootViewController _setNavigationController:]
  -[VideosExtrasRootViewController _playbackWillEndNotification:]
  -[VideosExtrasRootViewController _setUpForApplication]
  -[VideosExtrasRootViewController extrasMenuButtonsStackView]
  -[VideosExtrasRootViewController _attemptRestart]
  -[VideosExtrasRootViewController initialPresentationSize]
  -[VideosExtrasRootViewController _adjustExtrasVisibilityForViewSize:]
  -[VideosExtrasRootViewController extrasScrollViewLeadingConstraint]
  -[VideosExtrasRootViewController showsMenuBar]
  -[VideosExtrasRootViewController shouldExtrasBeVisibleForViewSize:]
  -[VideosExtrasRootViewController _areExtrasVisible]
  -[VideosExtrasRootViewController _showExtrasBar:]
  -[VideosExtrasRootViewController lastSelectedSnapshotViewControllers]
  -[VideosExtrasRootViewController setLastSelectedSnapshotViewControllers:]
  -[VideosExtrasRootViewController _extrasMenuItemSelected:]
  -[VideosExtrasRootViewController setExtrasScrollViewLeadingConstraint:]
  -[VideosExtrasRootViewController setExtrasMenuButtonsStackView:]
  -[VideosExtrasRootViewController _extrasMenuBarViewForElements:]
  -[VideosExtrasRootViewController setExtrasMenuBarView:]
  -[VideosExtrasRootViewController setMainTemplateViewController:]
  -[VideosExtrasRootViewController _setMainDocumentWithViewController:]
  -[VideosExtrasRootViewController popToFeatureOrMain]
  -[VideosExtrasRootViewController updateMenuButtonForSelectionAtIndex:deselectedIndex:]
  -[VideosExtrasRootViewController detectMainDocument:]
  -[VideosExtrasRootViewController featureContainer]
  -[VideosExtrasRootViewController setFeatureContainer:]
  -[VideosExtrasRootViewController setVendorStorage:]


VUILibraryMediaItem_iOS : TVPBaseMediaItem /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices
 @property  long long persistentID
 @property  ML3Track *ml3Track
 @property  MPMediaItem *mpMediaItem
 @property  VUIPlaybackPositionInfo *playbackPositionInfo
 @property  NSURL *mediaItemURLInternal
 @property  MPMediaLibrary *mpMediaLibrary
 @property  <TVImageLoader> *imageLoader
 @property  BOOL bookmarkDisabled

  // class methods
  +[VUILibraryMediaItem_iOS initialize]

  // instance methods
  -[VUILibraryMediaItem_iOS .cxx_destruct]
  -[VUILibraryMediaItem_iOS persistentID]
  -[VUILibraryMediaItem_iOS setPersistentID:]
  -[VUILibraryMediaItem_iOS imageLoader]
  -[VUILibraryMediaItem_iOS mediaItemURL]
  -[VUILibraryMediaItem_iOS initWithMPMediaItem:]
  -[VUILibraryMediaItem_iOS mediaItemMetadataForProperty:]
  -[VUILibraryMediaItem_iOS isEqualToMediaItem:]
  -[VUILibraryMediaItem_iOS hasTrait:]
  -[VUILibraryMediaItem_iOS updateBookmarkWithSuggestedTime:forElapsedTime:duration:playbackOfMediaItemIsEnding:]
  -[VUILibraryMediaItem_iOS updatePlayCountForElapsedTime:duration:]
  -[VUILibraryMediaItem_iOS cleanUpMediaItem]
  -[VUILibraryMediaItem_iOS setBookmarkDisabled:]
  -[VUILibraryMediaItem_iOS mpMediaLibrary]
  -[VUILibraryMediaItem_iOS mediaItemURLInternal]
  -[VUILibraryMediaItem_iOS ml3Track]
  -[VUILibraryMediaItem_iOS setMediaItemURLInternal:]
  -[VUILibraryMediaItem_iOS _localPlaybackFilePathURL]
  -[VUILibraryMediaItem_iOS mpMediaItem]
  -[VUILibraryMediaItem_iOS _supportsBookmarks]
  -[VUILibraryMediaItem_iOS playbackPositionInfo]
  -[VUILibraryMediaItem_iOS _schedulePlaybackPositionInfoPersistence]
  -[VUILibraryMediaItem_iOS setPlaybackPositionInfo:]
  -[VUILibraryMediaItem_iOS bookmarkDisabled]
  -[VUILibraryMediaItem_iOS setMpMediaItem:]
  -[VUILibraryMediaItem_iOS setMl3Track:]


VUIVideoAdvisoryLegendView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIVideoAdvisoryViewLayout *layout
 @property  VUILabel *legendNameLabel
 @property  VUILabel *legendDescriptionLabel
 @property  NSString *legendName
 @property  NSString *legendDescription

  // instance methods
  -[VUIVideoAdvisoryLegendView .cxx_destruct]
  -[VUIVideoAdvisoryLegendView layout]
  -[VUIVideoAdvisoryLegendView setLayout:]
  -[VUIVideoAdvisoryLegendView sizeThatFits:]
  -[VUIVideoAdvisoryLegendView layoutSubviews]
  -[VUIVideoAdvisoryLegendView initWithLayout:]
  -[VUIVideoAdvisoryLegendView legendNameLabel]
  -[VUIVideoAdvisoryLegendView legendDescriptionLabel]
  -[VUIVideoAdvisoryLegendView setLegendNameLabel:]
  -[VUIVideoAdvisoryLegendView setLegendDescriptionLabel:]
  -[VUIVideoAdvisoryLegendView legendName]
  -[VUIVideoAdvisoryLegendView setLegendName:]
  -[VUIVideoAdvisoryLegendView legendDescription]
  -[VUIVideoAdvisoryLegendView setLegendDescription:]


VUILibrarySplitViewController : UISplitViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUILibraryCategoryMenuViewModelDelegate, VUICategoryMenuViewControllerDelegate, VUILibraryGridCollectionViewControllerDelegate, VUIHomeShareViewControllerDelegate, UISplitViewControllerDelegate>
 @property  VUIMediaLibrary *mediaLibrary
 @property  UINavigationController *masterNavigationController
 @property  UINavigationController *detailNavigationController
 @property  VUILibraryCategoryMenuViewModel *categoryViewModel
 @property  VUILibraryGridCollectionViewController *currentGridCollectionViewController
 @property  NSIndexPath *currentlySelectedIndexPath
 @property  VUILibraryAlertView *alertView
 @property  BOOL shouldShowBackButton
 @property  VUIMediaLibrary *currentHomeShareMediaLibrary
 @property  BOOL hasLoaded
 @property  <VUILibrarySplitViewControllerDelegate> *librarySplitViewControllerDelegate
 @property  VUICategoryMenuViewController *menuViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibrarySplitViewController dealloc]
  -[VUILibrarySplitViewController .cxx_destruct]
  -[VUILibrarySplitViewController loadView]
  -[VUILibrarySplitViewController viewWillAppear:]
  -[VUILibrarySplitViewController viewWillDisappear:]
  -[VUILibrarySplitViewController viewDidLoad]
  -[VUILibrarySplitViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibrarySplitViewController showDetailViewController:sender:]
  -[VUILibrarySplitViewController splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:]
  -[VUILibrarySplitViewController splitViewController:separateSecondaryViewControllerFromPrimaryViewController:]
  -[VUILibrarySplitViewController mediaLibrary]
  -[VUILibrarySplitViewController setMediaLibrary:]
  -[VUILibrarySplitViewController hasLoaded]
  -[VUILibrarySplitViewController setHasLoaded:]
  -[VUILibrarySplitViewController alertView]
  -[VUILibrarySplitViewController setAlertView:]
  -[VUILibrarySplitViewController menuViewController]
  -[VUILibrarySplitViewController setMenuViewController:]
  -[VUILibrarySplitViewController initWithMediaLibrary:]
  -[VUILibrarySplitViewController _deviceMediaLibrary]
  -[VUILibrarySplitViewController _addMediaLibraryNotificationObservers]
  -[VUILibrarySplitViewController _removeMediaLibraryNotificationObservers]
  -[VUILibrarySplitViewController _addNotificationObserversWithDeviceLibrary:]
  -[VUILibrarySplitViewController _homeShareMediaLibrariesDidChange:]
  -[VUILibrarySplitViewController _removeNotificationObserversWithDeviceLibrary:]
  -[VUILibrarySplitViewController vui_ppt_isLoading]
  -[VUILibrarySplitViewController setShouldShowBackButton:]
  -[VUILibrarySplitViewController shouldShowBackButton]
  -[VUILibrarySplitViewController categoryMenuViewController:didSelectMenuItemAtIndexPath:]
  -[VUILibrarySplitViewController categoryMenuViewControllerShouldDismiss:]
  -[VUILibrarySplitViewController homeShareViewController:didSelectHomeShare:]
  -[VUILibrarySplitViewController setCategoryViewModel:]
  -[VUILibrarySplitViewController categoryViewModel]
  -[VUILibrarySplitViewController updateForViewModel:]
  -[VUILibrarySplitViewController fetchDidCompleteForViewModel:]
  -[VUILibrarySplitViewController setLibrarySplitViewControllerDelegate:]
  -[VUILibrarySplitViewController setMasterNavigationController:]
  -[VUILibrarySplitViewController masterNavigationController]
  -[VUILibrarySplitViewController setDetailNavigationController:]
  -[VUILibrarySplitViewController detailNavigationController]
  -[VUILibrarySplitViewController _removeRentalsUpdateNotificationObserver]
  -[VUILibrarySplitViewController _setDisplayModeForLayoutType:]
  -[VUILibrarySplitViewController _addRentalsUpdateNotificationObserver]
  -[VUILibrarySplitViewController _showOrHideNoContentView]
  -[VUILibrarySplitViewController setCurrentlySelectedIndexPath:]
  -[VUILibrarySplitViewController _getMediaEntitiesForIndexPath:]
  -[VUILibrarySplitViewController setPageMetricsForCategory:onLibraryGridCollectionViewController:]
  -[VUILibrarySplitViewController setCurrentGridCollectionViewController:]
  -[VUILibrarySplitViewController currentGridCollectionViewController]
  -[VUILibrarySplitViewController _viewControllerForIndexPath:]
  -[VUILibrarySplitViewController librarySplitViewControllerDelegate]
  -[VUILibrarySplitViewController _updateRentals]
  -[VUILibrarySplitViewController gridCollectionViewController:didSelectMediaEntity:]
  -[VUILibrarySplitViewController _createDetailNavigationViewControllerWithRootViewController:]
  -[VUILibrarySplitViewController currentlySelectedIndexPath]
  -[VUILibrarySplitViewController currentHomeShareMediaLibrary]
  -[VUILibrarySplitViewController setCurrentHomeShareMediaLibrary:]


VUINowPlayingObserver : NSObject /usr/lib/libSystem.B.dylib
 @property  VUINowPlayingObservation *latestObservation
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  BOOL observing
 @property  unsigned long updateObservationContext
 @property  <VUINowPlayingObserverDelegate> *delegate

  // instance methods
  -[VUINowPlayingObserver init]
  -[VUINowPlayingObserver dealloc]
  -[VUINowPlayingObserver delegate]
  -[VUINowPlayingObserver setDelegate:]
  -[VUINowPlayingObserver .cxx_destruct]
  -[VUINowPlayingObserver startObserving]
  -[VUINowPlayingObserver stopObserving]
  -[VUINowPlayingObserver _stopObserving]
  -[VUINowPlayingObserver _startObserving]
  -[VUINowPlayingObserver isObserving]
  -[VUINowPlayingObserver setObserving:]
  -[VUINowPlayingObserver latestObservation]
  -[VUINowPlayingObserver serialProcessingDispatchQueue]
  -[VUINowPlayingObserver setSerialProcessingDispatchQueue:]
  -[VUINowPlayingObserver _updateLatestObservation]
  -[VUINowPlayingObserver _notifyDelegateLatestObservationDidChange:]
  -[VUINowPlayingObserver _handleNowPlayingAppDidChangeNotification:]
  -[VUINowPlayingObserver _handleNowPlayingAppIsPlayingDidChangeNotification:]
  -[VUINowPlayingObserver setLatestObservation:]
  -[VUINowPlayingObserver updateObservationContext]
  -[VUINowPlayingObserver setUpdateObservationContext:]
  -[VUINowPlayingObserver _updateLatestObservationWithBundleIdentifier:playbackState:]


VUINowPlayingObservation : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL playing
 @property  NSString *nowPlayingAppBundleIdentifier

  // instance methods
  -[VUINowPlayingObservation isEqual:]
  -[VUINowPlayingObservation .cxx_destruct]
  -[VUINowPlayingObservation isPlaying]
  -[VUINowPlayingObservation setPlaying:]
  -[VUINowPlayingObservation nowPlayingAppBundleIdentifier]
  -[VUINowPlayingObservation initWithBundleIdentifier:isPlaying:]
  -[VUINowPlayingObservation setNowPlayingAppBundleIdentifier:]


VUIMediaCollectionsToRecentlyAddedToMediaCollectionsValueTransformer : NSValueTransformer /usr/lib/libMobileGestalt.dylib
  // class methods
  +[VUIMediaCollectionsToRecentlyAddedToMediaCollectionsValueTransformer allowsReverseTransformation]
  +[VUIMediaCollectionsToRecentlyAddedToMediaCollectionsValueTransformer transformedValueClass]

  // instance methods
  -[VUIMediaCollectionsToRecentlyAddedToMediaCollectionsValueTransformer transformedValue:]


VUICastInfoLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *headerTextLayout
 @property  VUITextLayout *textLayout

  // class methods
  +[VUICastInfoLayout layoutWithLayout:element:]

  // instance methods
  -[VUICastInfoLayout init]
  -[VUICastInfoLayout .cxx_destruct]
  -[VUICastInfoLayout textLayout]
  -[VUICastInfoLayout headerTextLayout]


VUIComingSoonCardLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *titleLayout
 @property  VUITextLayout *textLayout
 @property  {TVCornerRadii=dddd} borderRadii

  // class methods
  +[VUIComingSoonCardLayout layoutWithLayout:element:]

  // instance methods
  -[VUIComingSoonCardLayout init]
  -[VUIComingSoonCardLayout .cxx_destruct]
  -[VUIComingSoonCardLayout textLayout]
  -[VUIComingSoonCardLayout borderRadii]
  -[VUIComingSoonCardLayout titleLayout]
  -[VUIComingSoonCardLayout setBorderRadii:]


VUIProductBannerLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *logoImageLayout
 @property  VUITextLayout *logoTextLayout
 @property  TVImageLayout *coverArtImageLayout
 @property  unsigned long contentType
 @property  TVImageLayout *decorationImageLayout
 @property  VUITextLayout *subTextLayout
 @property  VUITextLayout *episodeInfoTextLayout
 @property  VUITextLayout *descriptionTextLayout
 @property  VUITextLayout *descriptionTitleTextLayout
 @property  VUIMediaTagsViewLayout *tagsLayout
 @property  VUIMediaTagsViewLayout *infoTagsLayout
 @property  double maxCoverArtImageHeight
 @property  VUITextLayout *disclaimerTextLayout
 @property  VUITextLayout *availabilityTextLayout
 @property  TVImageLayout *availabilityImageLayout

  // class methods
  +[VUIProductBannerLayout layoutWithLayout:element:sizeClass:contentType:]
  +[VUIProductBannerLayout _coverArtImageShadow]

  // instance methods
  -[VUIProductBannerLayout .cxx_destruct]
  -[VUIProductBannerLayout contentType]
  -[VUIProductBannerLayout descriptionTextLayout]
  -[VUIProductBannerLayout logoImageLayout]
  -[VUIProductBannerLayout tagsLayout]
  -[VUIProductBannerLayout availabilityTextLayout]
  -[VUIProductBannerLayout availabilityImageLayout]
  -[VUIProductBannerLayout setLogoImageLayout:]
  -[VUIProductBannerLayout disclaimerTextLayout]
  -[VUIProductBannerLayout updateWithSizeClass:contentSizeCategoryIsAccessibility:]
  -[VUIProductBannerLayout decorationImageLayout]
  -[VUIProductBannerLayout coverArtImageLayout]
  -[VUIProductBannerLayout descriptionTitleTextLayout]
  -[VUIProductBannerLayout infoTagsLayout]
  -[VUIProductBannerLayout logoTextLayout]
  -[VUIProductBannerLayout subTextLayout]
  -[VUIProductBannerLayout episodeInfoTextLayout]
  -[VUIProductBannerLayout initWithSizeClass:contentType:]
  -[VUIProductBannerLayout _createLayoutsWithSizeClass:contentType:]
  -[VUIProductBannerLayout setLogoTextLayout:]
  -[VUIProductBannerLayout setCoverArtImageLayout:]
  -[VUIProductBannerLayout maxCoverArtImageHeight]


VUISBIconProgressView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  double backgroundAlpha
 @property  double foregroundAlpha
 @property  double circleRadiusFraction
 @property  double pauseRadiusFraction
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} circleBoundingRect
 @property  long long displayedState
 @property  BOOL displayingPaused
 @property  double displayedFraction
 @property  <VUISBIconProgressViewDelegate> *delegate
 @property  UIImage *overlayImage
 @property  BOOL canAnimate

  // class methods
  +[VUISBIconProgressView _pieImagesMemoryPool]
  +[VUISBIconProgressView _pieImageAtFraction:]

  // instance methods
  -[VUISBIconProgressView dealloc]
  -[VUISBIconProgressView delegate]
  -[VUISBIconProgressView setDelegate:]
  -[VUISBIconProgressView initWithFrame:]
  -[VUISBIconProgressView _maskImage]
  -[VUISBIconProgressView drawRect:]
  -[VUISBIconProgressView backgroundAlpha]
  -[VUISBIconProgressView setBackgroundAlpha:]
  -[VUISBIconProgressView foregroundAlpha]
  -[VUISBIconProgressView setForegroundAlpha:]
  -[VUISBIconProgressView overlayImage]
  -[VUISBIconProgressView setOverlayImage:]
  -[VUISBIconProgressView _onDisplayLink:]
  -[VUISBIconProgressView _ensureDisplayLink]
  -[VUISBIconProgressView _updateTransitionsAnimated:]
  -[VUISBIconProgressView _clearDisplayLink]
  -[VUISBIconProgressView _updatePausedTransitionAnimated:]
  -[VUISBIconProgressView _updateStateTransitionAnimated:]
  -[VUISBIconProgressView _updateFractionTransitionAnimated:]
  -[VUISBIconProgressView _hasActiveTransitions]
  -[VUISBIconProgressView _drawPieWithCenter:]
  -[VUISBIconProgressView _drawOutgoingCircleWithCenter:]
  -[VUISBIconProgressView _drawIncomingCircleWithCenter:]
  -[VUISBIconProgressView _drawPauseUIWithCenter:]
  -[VUISBIconProgressView canAnimate]
  -[VUISBIconProgressView setState:paused:fractionLoaded:animated:]
  -[VUISBIconProgressView setCanAnimate:]
  -[VUISBIconProgressView circleBoundingRect]
  -[VUISBIconProgressView circleRadiusFraction]
  -[VUISBIconProgressView setCircleRadiusFraction:]
  -[VUISBIconProgressView pauseRadiusFraction]
  -[VUISBIconProgressView setPauseRadiusFraction:]
  -[VUISBIconProgressView displayedState]
  -[VUISBIconProgressView setDisplayedState:]
  -[VUISBIconProgressView displayingPaused]
  -[VUISBIconProgressView setDisplayingPaused:]
  -[VUISBIconProgressView displayedFraction]
  -[VUISBIconProgressView setDisplayedFraction:]
  -[VUISBIconProgressView _clearTransitionIfComplete:]


_VUISBIconProgressTransition : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[_VUISBIconProgressTransition isCompleteWithView:]
  -[_VUISBIconProgressTransition completeTransitionAndUpdateView:]
  -[_VUISBIconProgressTransition updateView:withElapsedTime:]


_VUISBInstallProgressStateTransition : _VUISBIconProgressTransition
  // class methods
  +[_VUISBInstallProgressStateTransition newTransitionFromState:toState:]
  +[_VUISBInstallProgressStateTransition _classForTransitionFromState:toState:]

  // instance methods
  -[_VUISBInstallProgressStateTransition dealloc]
  -[_VUISBInstallProgressStateTransition _updateView:]
  -[_VUISBInstallProgressStateTransition isCompleteWithView:]
  -[_VUISBInstallProgressStateTransition completeTransitionAndUpdateView:]
  -[_VUISBInstallProgressStateTransition updateView:withElapsedTime:]
  -[_VUISBInstallProgressStateTransition _initWithFromState:toState:]


_VUISBIconProgressNoneWaitingStateTransition : _VUISBInstallProgressStateTransition
  // instance methods
  -[_VUISBIconProgressNoneWaitingStateTransition _updateView:]


_VUISBIconProgressWaitingLoadingStateTransition : _VUISBInstallProgressStateTransition
  // instance methods
  -[_VUISBIconProgressWaitingLoadingStateTransition _updateView:]


_VUISBIconProgressLoadingNoneStateTransition : _VUISBInstallProgressStateTransition
  // instance methods
  -[_VUISBIconProgressLoadingNoneStateTransition _updateView:]


_VUISBIconProgressPausedTransition : _VUISBIconProgressTransition
  // class methods
  +[_VUISBIconProgressPausedTransition newTransitionToPaused:]

  // instance methods
  -[_VUISBIconProgressPausedTransition dealloc]
  -[_VUISBIconProgressPausedTransition _updateView:]
  -[_VUISBIconProgressPausedTransition isCompleteWithView:]
  -[_VUISBIconProgressPausedTransition completeTransitionAndUpdateView:]
  -[_VUISBIconProgressPausedTransition updateToPaused:]
  -[_VUISBIconProgressPausedTransition updateView:withElapsedTime:]
  -[_VUISBIconProgressPausedTransition _initToPaused:]
  -[_VUISBIconProgressPausedTransition _updateTimingFunction]
  -[_VUISBIconProgressPausedTransition _updateElapsedTimeFromFraction]


_VUISBIconProgressFractionTransition : _VUISBIconProgressTransition
  // class methods
  +[_VUISBIconProgressFractionTransition newTransitionToFraction:]

  // instance methods
  -[_VUISBIconProgressFractionTransition isCompleteWithView:]
  -[_VUISBIconProgressFractionTransition completeTransitionAndUpdateView:]
  -[_VUISBIconProgressFractionTransition updateToFraction:]
  -[_VUISBIconProgressFractionTransition updateView:withElapsedTime:]
  -[_VUISBIconProgressFractionTransition _updateView:forDisplayedFraction:]


VUISportsOverlayBackgroundMaterialImagesOperation : NSOperation /usr/lib/libMobileGestalt.dylib
 @property  UIImage *sourceBackgroundImage
 @property  UIImage *resizedSourceBackgroundImage
 @property  NSDictionary *overlayMaterialImageByIdentifier
 @property  {CGSize=dd} resizedBackgroundImageSize
 @property  NSArray *overlayMaterialRequests

  // instance methods
  -[VUISportsOverlayBackgroundMaterialImagesOperation init]
  -[VUISportsOverlayBackgroundMaterialImagesOperation .cxx_destruct]
  -[VUISportsOverlayBackgroundMaterialImagesOperation main]
  -[VUISportsOverlayBackgroundMaterialImagesOperation initWithSourceBackgroundImage:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation setResizedBackgroundImageSize:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation setOverlayMaterialRequests:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation resizedSourceBackgroundImage]
  -[VUISportsOverlayBackgroundMaterialImagesOperation overlayMaterialImageByIdentifier]
  -[VUISportsOverlayBackgroundMaterialImagesOperation sourceBackgroundImage]
  -[VUISportsOverlayBackgroundMaterialImagesOperation resizedBackgroundImageSize]
  -[VUISportsOverlayBackgroundMaterialImagesOperation setResizedSourceBackgroundImage:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation overlayMaterialRequests]
  -[VUISportsOverlayBackgroundMaterialImagesOperation _blurredMaterialImageWithSourceBackgroundImage:forRect:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation setOverlayMaterialImageByIdentifier:]
  -[VUISportsOverlayBackgroundMaterialImagesOperation setSourceBackgroundImage:]


VUIOverlayWithMaterialRendering : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *identifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} rect

  // instance methods
  -[VUIOverlayWithMaterialRendering init]
  -[VUIOverlayWithMaterialRendering .cxx_destruct]
  -[VUIOverlayWithMaterialRendering identifier]
  -[VUIOverlayWithMaterialRendering setIdentifier:]
  -[VUIOverlayWithMaterialRendering rect]
  -[VUIOverlayWithMaterialRendering setRect:]
  -[VUIOverlayWithMaterialRendering initWithIdentifier:rect:]


VUIPlistMediaDatabaseSeason : VUIPlistMediaDatabaseEntity <NSCopying>
 @property  VUIPlistMediaDatabaseShow *show
 @property  NSNumber *seasonNumber
 @property  NSArray *episodes

  // instance methods
  -[VUIPlistMediaDatabaseSeason isEqual:]
  -[VUIPlistMediaDatabaseSeason copyWithZone:]
  -[VUIPlistMediaDatabaseSeason .cxx_destruct]
  -[VUIPlistMediaDatabaseSeason dictionaryRepresentation]
  -[VUIPlistMediaDatabaseSeason show]
  -[VUIPlistMediaDatabaseSeason isLocal]
  -[VUIPlistMediaDatabaseSeason setShow:]
  -[VUIPlistMediaDatabaseSeason seasonNumber]
  -[VUIPlistMediaDatabaseSeason setSeasonNumber:]
  -[VUIPlistMediaDatabaseSeason initWithIdentifier:type:]
  -[VUIPlistMediaDatabaseSeason episodes]
  -[VUIPlistMediaDatabaseSeason initWithDictionary:show:]
  -[VUIPlistMediaDatabaseSeason episodeForIdentifier:]
  -[VUIPlistMediaDatabaseSeason setEpisodes:]
  -[VUIPlistMediaDatabaseSeason initWithIdentifier:show:]


VUIButton : UIControl /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUILabelTopMarginCalculationProtocol>
 @property  VUIButtonLayout *layout
 @property  UIView *backdropView
 @property  UILargeContentViewerInteraction *largeContentViewerInteraction
 @property  _TVImageView *imagesViewDefaultState
 @property  _TVImageView *imagesViewHighlightedState
 @property  _TVImageView *backgroundImagesViewDefaultState
 @property  _TVImageView *backgroundImagesViewHighlightedState
 @property  _TVImageView *backgroundImageView
 @property  BOOL imageTrailsTextContent
 @property  VUILabel *textContentView
 @property  _TVImageView *imageView
 @property  IKViewElement *viewElement
 @property  @? selectActionHandler

  // instance methods
  -[VUIButton .cxx_destruct]
  -[VUIButton prepareForReuse]
  -[VUIButton layout]
  -[VUIButton setLayout:]
  -[VUIButton intrinsicContentSize]
  -[VUIButton setCornerRadius:]
  -[VUIButton traitCollectionDidChange:]
  -[VUIButton sizeThatFits:]
  -[VUIButton largeContentTitle]
  -[VUIButton largeContentImage]
  -[VUIButton scalesLargeContentImage]
  -[VUIButton layoutSubviews]
  -[VUIButton imageView]
  -[VUIButton setTintColor:]
  -[VUIButton setHighlighted:]
  -[VUIButton _hasTitle]
  -[VUIButton _updateBackgroundColor]
  -[VUIButton backdropView]
  -[VUIButton setBackdropView:]
  -[VUIButton backgroundImageView]
  -[VUIButton hitTest:withEvent:]
  -[VUIButton setImageView:]
  -[VUIButton _updateLayout]
  -[VUIButton _hasImage]
  -[VUIButton _buttonTapped:]
  -[VUIButton setBackgroundImageView:]
  -[VUIButton _hasBackgroundImage]
  -[VUIButton viewElement]
  -[VUIButton setViewElement:]
  -[VUIButton textContentView]
  -[VUIButton setTextContentView:]
  -[VUIButton setImageTrailsTextContent:]
  -[VUIButton selectActionHandler]
  -[VUIButton setSelectActionHandler:]
  -[VUIButton imageTrailsTextContent]
  -[VUIButton topMarginWithBaselineMargin:]
  -[VUIButton bottomMarginWithBaselineMargin:]
  -[VUIButton updateWithElement:]
  -[VUIButton topMarginToLabel:withBaselineMargin:]
  -[VUIButton initWithLayout:interfaceStyle:]
  -[VUIButton setImageView:state:]
  -[VUIButton _configureWithLayout:]
  -[VUIButton setBackgroundImage:state:]
  -[VUIButton largeContentViewerInteraction]
  -[VUIButton setImagesViewHighlightedState:]
  -[VUIButton setBackgroundImagesViewHighlightedState:]
  -[VUIButton _imageSizeThatFits:]
  -[VUIButton _centerWithViewSize:withParentSize:]
  -[VUIButton setLargeContentViewerInteraction:]
  -[VUIButton imagesViewDefaultState]
  -[VUIButton setImagesViewDefaultState:]
  -[VUIButton imagesViewHighlightedState]
  -[VUIButton backgroundImagesViewDefaultState]
  -[VUIButton setBackgroundImagesViewDefaultState:]
  -[VUIButton backgroundImagesViewHighlightedState]


VUIConfirmationTransitioningDelegate : NSObject /usr/lib/libSystem.B.dylib <UIViewControllerTransitioningDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIConfirmationTransitioningDelegate sharedInstance]

  // instance methods
  -[VUIConfirmationTransitioningDelegate init]
  -[VUIConfirmationTransitioningDelegate .cxx_destruct]
  -[VUIConfirmationTransitioningDelegate _init]
  -[VUIConfirmationTransitioningDelegate animationControllerForPresentedController:presentingController:sourceController:]
  -[VUIConfirmationTransitioningDelegate animationControllerForDismissedController:]


VUIChannelBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUISeparatorView *separatorView
 @property  UIView *bgColorView
 @property  IKViewElement *viewElement
 @property  VUIChannelBannerLayout *layout
 @property  VUIAppleTVChannelLogoView *appleTVChannelLogoView
 @property  VUIButton *subscribeButton
 @property  VUILabel *disclaimerTextLabel
 @property  VUIFocusableTextView *descriptionTextView
 @property  NSArray *textLabels
 @property  double topThreshold

  // instance methods
  -[VUIChannelBannerView .cxx_destruct]
  -[VUIChannelBannerView layout]
  -[VUIChannelBannerView setLayout:]
  -[VUIChannelBannerView initWithFrame:]
  -[VUIChannelBannerView sizeThatFits:]
  -[VUIChannelBannerView layoutSubviews]
  -[VUIChannelBannerView separatorView]
  -[VUIChannelBannerView setSeparatorView:]
  -[VUIChannelBannerView viewElement]
  -[VUIChannelBannerView setViewElement:]
  -[VUIChannelBannerView descriptionTextView]
  -[VUIChannelBannerView setDescriptionTextView:]
  -[VUIChannelBannerView _layoutSubviewsWithSize:computationOnly:]
  -[VUIChannelBannerView topThreshold]
  -[VUIChannelBannerView textLabels]
  -[VUIChannelBannerView appleTVChannelLogoView]
  -[VUIChannelBannerView disclaimerTextLabel]
  -[VUIChannelBannerView subscribeButton]
  -[VUIChannelBannerView setAppleTVChannelLogoView:]
  -[VUIChannelBannerView setTextLabels:]
  -[VUIChannelBannerView setSubscribeButton:]
  -[VUIChannelBannerView setDisclaimerTextLabel:]
  -[VUIChannelBannerView _layoutLabels:withOrigin:maxWidth:]
  -[VUIChannelBannerView setBgColorView:]
  -[VUIChannelBannerView bgColorView]


VUIVideoAdvisoryViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  {CGSize=dd} logoSize
 @property  {UIEdgeInsets=dddd} logoMargin
 @property  {CGSize=dd} legendSize
 @property  double legendMaxWidth
 @property  {UIEdgeInsets=dddd} legendsMargin
 @property  UIColor *legendBackgroundColor
 @property  double legendCornerRadius
 @property  {UIEdgeInsets=dddd} dividerMargin
 @property  {CGSize=dd} dividerSize
 @property  UIColor *dividerColor
 @property  VUITextLayout *legendLayout
 @property  VUITextLayout *legendDescriptionLayout
 @property  {UIEdgeInsets=dddd} portraitMargin
 @property  {CGSize=dd} portraitLogoSize
 @property  {UIEdgeInsets=dddd} portraitLogoMargin
 @property  {CGSize=dd} portraitLegendSize
 @property  {UIEdgeInsets=dddd} portraitLegendsMargin
 @property  {UIEdgeInsets=dddd} portraitDividerMargin
 @property  {CGSize=dd} portraitDividerSize
 @property  VUITextLayout *portraitLegendLayout
 @property  VUITextLayout *portraitLegendDescriptionLayout

  // class methods
  +[VUIVideoAdvisoryViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIVideoAdvisoryViewLayout init]
  -[VUIVideoAdvisoryViewLayout .cxx_destruct]
  -[VUIVideoAdvisoryViewLayout dividerColor]
  -[VUIVideoAdvisoryViewLayout setDividerSize:]
  -[VUIVideoAdvisoryViewLayout dividerSize]
  -[VUIVideoAdvisoryViewLayout setLogoSize:]
  -[VUIVideoAdvisoryViewLayout logoSize]
  -[VUIVideoAdvisoryViewLayout legendsMargin]
  -[VUIVideoAdvisoryViewLayout legendDescriptionLayout]
  -[VUIVideoAdvisoryViewLayout legendLayout]
  -[VUIVideoAdvisoryViewLayout legendBackgroundColor]
  -[VUIVideoAdvisoryViewLayout legendCornerRadius]
  -[VUIVideoAdvisoryViewLayout setPortraitMargin:]
  -[VUIVideoAdvisoryViewLayout logoMargin]
  -[VUIVideoAdvisoryViewLayout setLogoMargin:]
  -[VUIVideoAdvisoryViewLayout legendSize]
  -[VUIVideoAdvisoryViewLayout setLegendSize:]
  -[VUIVideoAdvisoryViewLayout legendMaxWidth]
  -[VUIVideoAdvisoryViewLayout setLegendMaxWidth:]
  -[VUIVideoAdvisoryViewLayout setLegendsMargin:]
  -[VUIVideoAdvisoryViewLayout setLegendCornerRadius:]
  -[VUIVideoAdvisoryViewLayout dividerMargin]
  -[VUIVideoAdvisoryViewLayout setDividerMargin:]
  -[VUIVideoAdvisoryViewLayout portraitMargin]
  -[VUIVideoAdvisoryViewLayout portraitLogoSize]
  -[VUIVideoAdvisoryViewLayout setPortraitLogoSize:]
  -[VUIVideoAdvisoryViewLayout portraitLogoMargin]
  -[VUIVideoAdvisoryViewLayout setPortraitLogoMargin:]
  -[VUIVideoAdvisoryViewLayout portraitLegendSize]
  -[VUIVideoAdvisoryViewLayout setPortraitLegendSize:]
  -[VUIVideoAdvisoryViewLayout portraitLegendsMargin]
  -[VUIVideoAdvisoryViewLayout setPortraitLegendsMargin:]
  -[VUIVideoAdvisoryViewLayout portraitDividerMargin]
  -[VUIVideoAdvisoryViewLayout setPortraitDividerMargin:]
  -[VUIVideoAdvisoryViewLayout portraitDividerSize]
  -[VUIVideoAdvisoryViewLayout setPortraitDividerSize:]
  -[VUIVideoAdvisoryViewLayout portraitLegendLayout]
  -[VUIVideoAdvisoryViewLayout portraitLegendDescriptionLayout]


VideosExtrasGridCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VideosExtrasConstrainedArtworkContainerView *artworkContainer
 @property  IKLockupElement *lockupElement
 @property  UILabel *titleLabel
 @property  UILabel *subtitleLabel

  // instance methods
  -[VideosExtrasGridCollectionViewCell .cxx_destruct]
  -[VideosExtrasGridCollectionViewCell prepareForReuse]
  -[VideosExtrasGridCollectionViewCell initWithFrame:]
  -[VideosExtrasGridCollectionViewCell titleLabel]
  -[VideosExtrasGridCollectionViewCell setHighlighted:]
  -[VideosExtrasGridCollectionViewCell setTitleLabel:]
  -[VideosExtrasGridCollectionViewCell setSubtitleLabel:]
  -[VideosExtrasGridCollectionViewCell subtitleLabel]
  -[VideosExtrasGridCollectionViewCell lockupElement]
  -[VideosExtrasGridCollectionViewCell configureForLockup:cellStyle:withSizing:]
  -[VideosExtrasGridCollectionViewCell configureForLockup:cellStyle:]
  -[VideosExtrasGridCollectionViewCell setLockupElement:]
  -[VideosExtrasGridCollectionViewCell artworkContainer]


VUIMediaEntitiesFetchControllerOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  VUIMediaEntitiesFetchControllerResult *result
 @property  NSError *error
 @property  long long fetchReason
 @property  NSArray *requests
 @property  VUIMediaLibrary *mediaLibrary
 @property  NSOperation *currentSubOperation
 @property  NSArray *currentFetchResponses

  // instance methods
  -[VUIMediaEntitiesFetchControllerOperation .cxx_destruct]
  -[VUIMediaEntitiesFetchControllerOperation error]
  -[VUIMediaEntitiesFetchControllerOperation cancel]
  -[VUIMediaEntitiesFetchControllerOperation setError:]
  -[VUIMediaEntitiesFetchControllerOperation result]
  -[VUIMediaEntitiesFetchControllerOperation setResult:]
  -[VUIMediaEntitiesFetchControllerOperation requests]
  -[VUIMediaEntitiesFetchControllerOperation setRequests:]
  -[VUIMediaEntitiesFetchControllerOperation mediaLibrary]
  -[VUIMediaEntitiesFetchControllerOperation setMediaLibrary:]
  -[VUIMediaEntitiesFetchControllerOperation executionDidBegin]
  -[VUIMediaEntitiesFetchControllerOperation initWithMediaLibrary:fetchReason:requests:]
  -[VUIMediaEntitiesFetchControllerOperation setCurrentFetchResponses:]
  -[VUIMediaEntitiesFetchControllerOperation fetchReason]
  -[VUIMediaEntitiesFetchControllerOperation currentFetchResponses]
  -[VUIMediaEntitiesFetchControllerOperation setFetchReason:]
  -[VUIMediaEntitiesFetchControllerOperation _startMediaLibraryFetchOperation]
  -[VUIMediaEntitiesFetchControllerOperation currentSubOperation]
  -[VUIMediaEntitiesFetchControllerOperation _handleCompletdFetchWithResponses:error:]
  -[VUIMediaEntitiesFetchControllerOperation setCurrentSubOperation:]
  -[VUIMediaEntitiesFetchControllerOperation _startChangesOperationWithMediaEntityFetchResponses:currentFetchResponses:]
  -[VUIMediaEntitiesFetchControllerOperation _resultWithResponses:]


VUIActionPlay : VUIAction
 @property  NSDictionary *contextData
 @property  NSArray *videosPlayables
 @property  IKAppContext *appContext
 @property  BOOL upNextPlayback
 @property  NSDate *userPlaybackInitiationDate
 @property  NSDate *openURLCompletionDate

  // class methods
  +[VUIActionPlay playMediaInfo:isRentAndWatchNow:]
  +[VUIActionPlay _playPlayables:storeDictionary:appContext:isUpNextPlayback:userPlaybackInitiationDate:openURLCompletionDate:]
  +[VUIActionPlay _playMediaInfo:extrasInfo:isRentAndWatchNow:completion:]
  +[VUIActionPlay _presentPlaybackWithMediaInfo:extrasInfo:completion:]
  +[VUIActionPlay _preflightWithMediaInfo:isRentAndWatchNow:completion:]

  // instance methods
  -[VUIActionPlay .cxx_destruct]
  -[VUIActionPlay setContextData:]
  -[VUIActionPlay contextData]
  -[VUIActionPlay appContext]
  -[VUIActionPlay setAppContext:]
  -[VUIActionPlay setUserPlaybackInitiationDate:]
  -[VUIActionPlay setOpenURLCompletionDate:]
  -[VUIActionPlay isAccountRequired]
  -[VUIActionPlay performWithTargetResponder:completionHandler:]
  -[VUIActionPlay initWithContextData:appContext:]
  -[VUIActionPlay videosPlayables]
  -[VUIActionPlay isUpNextPlayback]
  -[VUIActionPlay userPlaybackInitiationDate]
  -[VUIActionPlay openURLCompletionDate]
  -[VUIActionPlay setVideosPlayables:]
  -[VUIActionPlay setUpNextPlayback:]


VUICollectionHeaderView : UICollectionReusableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  IKViewElement *buttonViewElement
 @property  IKViewElement *imageViewElement
 @property  VUICollectionHeaderViewLayout *layout
 @property  VUILabel *titleTextView
 @property  VUILabel *subtitleTextView
 @property  _TVImageView *imageView
 @property  UIButton *headerButton
 @property  VUISeparatorView *separatorView
 @property  {UIEdgeInsets=dddd} padding
 @property  @? selectionHandler

  // class methods
  +[VUICollectionHeaderView configureCollectionHeaderViewWithTitle:subtitle:buttonString:existingView:]
  +[VUICollectionHeaderView configureCollectionHeaderViewWithElement:existingView:]

  // instance methods
  -[VUICollectionHeaderView .cxx_destruct]
  -[VUICollectionHeaderView setPadding:]
  -[VUICollectionHeaderView layout]
  -[VUICollectionHeaderView setLayout:]
  -[VUICollectionHeaderView traitCollectionDidChange:]
  -[VUICollectionHeaderView sizeThatFits:]
  -[VUICollectionHeaderView layoutSubviews]
  -[VUICollectionHeaderView imageView]
  -[VUICollectionHeaderView separatorView]
  -[VUICollectionHeaderView padding]
  -[VUICollectionHeaderView setSeparatorView:]
  -[VUICollectionHeaderView setImageView:]
  -[VUICollectionHeaderView titleTextView]
  -[VUICollectionHeaderView setTitleTextView:]
  -[VUICollectionHeaderView headerButton]
  -[VUICollectionHeaderView viewElement]
  -[VUICollectionHeaderView setViewElement:]
  -[VUICollectionHeaderView setSelectionHandler:]
  -[VUICollectionHeaderView selectionHandler]
  -[VUICollectionHeaderView _selectButtonAction:]
  -[VUICollectionHeaderView _layoutWithSize:metricsOnly:]
  -[VUICollectionHeaderView subtitleTextView]
  -[VUICollectionHeaderView setButtonViewElement:]
  -[VUICollectionHeaderView _buttonWithString:existingButton:]
  -[VUICollectionHeaderView setImageViewElement:]
  -[VUICollectionHeaderView setSubtitleTextView:]
  -[VUICollectionHeaderView setHeaderButton:]
  -[VUICollectionHeaderView buttonViewElement]
  -[VUICollectionHeaderView imageViewElement]


VideosExtrasElementViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL wide

  // class methods
  +[VideosExtrasElementViewController _borderView]

  // instance methods
  -[VideosExtrasElementViewController init]
  -[VideosExtrasElementViewController dealloc]
  -[VideosExtrasElementViewController .cxx_destruct]
  -[VideosExtrasElementViewController viewWillAppear:]
  -[VideosExtrasElementViewController didRotateFromInterfaceOrientation:]
  -[VideosExtrasElementViewController backgroundViewController]
  -[VideosExtrasElementViewController _prepareLayout]
  -[VideosExtrasElementViewController _startBackgroundAudio]
  -[VideosExtrasElementViewController configureBackgroundWithElements:]
  -[VideosExtrasElementViewController isWide]
  -[VideosExtrasElementViewController extrasSize]
  -[VideosExtrasElementViewController _configureBannerWithElement:]
  -[VideosExtrasElementViewController _didActivateButtonWithItem:]
  -[VideosExtrasElementViewController _installBackdrop:]
  -[VideosExtrasElementViewController setWide:]


VUITextBadgeView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSAttributedString *attributedTitle
 @property  {CGSize=dd} glyphSize
 @property  IKViewElement *viewElement
 @property  NSTimer *expiryUpdateTimer
 @property  double strokeSize
 @property  UIImage *backgroundImage
 @property  _TVImageView *imageView
 @property  VUITextBadgeLayout *badgeLayout
 @property  <VUITextBadgeViewDelegate> *delegate

  // class methods
  +[VUITextBadgeView badgeElementHasContent:]

  // instance methods
  -[VUITextBadgeView dealloc]
  -[VUITextBadgeView delegate]
  -[VUITextBadgeView setDelegate:]
  -[VUITextBadgeView .cxx_destruct]
  -[VUITextBadgeView setAttributedTitle:]
  -[VUITextBadgeView attributedTitle]
  -[VUITextBadgeView reset]
  -[VUITextBadgeView backgroundImage]
  -[VUITextBadgeView setBackgroundImage:]
  -[VUITextBadgeView _invalidateTimer]
  -[VUITextBadgeView initWithFrame:]
  -[VUITextBadgeView sizeThatFits:]
  -[VUITextBadgeView imageView]
  -[VUITextBadgeView drawRect:]
  -[VUITextBadgeView glyphSize]
  -[VUITextBadgeView setImageView:]
  -[VUITextBadgeView _textSize]
  -[VUITextBadgeView _imageLoaded]
  -[VUITextBadgeView viewElement]
  -[VUITextBadgeView setViewElement:]
  -[VUITextBadgeView setGlyphSize:]
  -[VUITextBadgeView setElement:withBadgeLayout:]
  -[VUITextBadgeView badgeLayout]
  -[VUITextBadgeView setBadgeLayout:]
  -[VUITextBadgeView expiryUpdateTimer]
  -[VUITextBadgeView setExpiryUpdateTimer:]
  -[VUITextBadgeView setStrokeSize:]
  -[VUITextBadgeView strokeSize]


VUISportsOverlayLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUIScoreboardLayout *scoreboardLayout
 @property  VUITextBadgeLayout *textBadgeLayout
 @property  TVImageLayout *appImageLayout
 @property  TVImageLayout *logoImageLayout

  // class methods
  +[VUISportsOverlayLayout overlayLayoutForElement:cardLayoutType:]
  +[VUISportsOverlayLayout _scoreboardTypeForElement:]
  +[VUISportsOverlayLayout _sportsOverlayALayoutWithElement:]
  +[VUISportsOverlayLayout _sportsOverlayBLayoutWithElement:]
  +[VUISportsOverlayLayout _sportsOverlayCLayoutWithElement:]

  // instance methods
  -[VUISportsOverlayLayout .cxx_destruct]
  -[VUISportsOverlayLayout logoImageLayout]
  -[VUISportsOverlayLayout appImageLayout]
  -[VUISportsOverlayLayout scoreboardLayout]
  -[VUISportsOverlayLayout setScoreboardLayout:]
  -[VUISportsOverlayLayout textBadgeLayout]
  -[VUISportsOverlayLayout setTextBadgeLayout:]
  -[VUISportsOverlayLayout setAppImageLayout:]
  -[VUISportsOverlayLayout setLogoImageLayout:]


VUIProductBadgeResource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *name
 @property  BOOL templated

  // instance methods
  -[VUIProductBadgeResource init]
  -[VUIProductBadgeResource name]
  -[VUIProductBadgeResource .cxx_destruct]
  -[VUIProductBadgeResource setName:]
  -[VUIProductBadgeResource isTemplated]
  -[VUIProductBadgeResource setTemplated:]


VUIProductLockupView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIRentalExpirationLabelDelegate>
 @property  VUISeparatorView *topSeparatorView
 @property  VUISeparatorView *bottomSeparatorView
 @property  _TVImageView *coverArtImageView
 @property  VUILabel *subtitleLabel
 @property  TVFocusableTextView *descriptionTextView
 @property  BOOL contentDescriptionExpanded
 @property  BOOL didSetUpViews
 @property  VUIRentalExpirationLabel *expirationLabel
 @property  UIImage *contentRatingImage
 @property  VUIMediaTagsView *mediaInfoTagsView
 @property  VUIMediaTagsView *mediaBadgeTagsView
 @property  <VUILibraryProductLockupViewLayout> *layout
 @property  TVImageProxy *coverArtImageProxy
 @property  UIImage *coverArtPlaceholderImage
 @property  VUIRoundButton *leftButton
 @property  UIView *downloadView
 @property  NSString *subtitle
 @property  NSString *contentDescription
 @property  NSString *genre
 @property  NSNumber *duration
 @property  NSNumber *releaseYear
 @property  NSString *availabilityText
 @property  NSArray *badgeResources
 @property  <VUIProductLockupViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIProductLockupView productLockupViewWithMedia:]

  // instance methods
  -[VUIProductLockupView delegate]
  -[VUIProductLockupView setDelegate:]
  -[VUIProductLockupView .cxx_destruct]
  -[VUIProductLockupView duration]
  -[VUIProductLockupView genre]
  -[VUIProductLockupView subtitle]
  -[VUIProductLockupView contentDescription]
  -[VUIProductLockupView layout]
  -[VUIProductLockupView setLayout:]
  -[VUIProductLockupView setDuration:]
  -[VUIProductLockupView initWithFrame:]
  -[VUIProductLockupView traitCollectionDidChange:]
  -[VUIProductLockupView sizeThatFits:]
  -[VUIProductLockupView layoutSubviews]
  -[VUIProductLockupView setSubtitle:]
  -[VUIProductLockupView leftButton]
  -[VUIProductLockupView setLeftButton:]
  -[VUIProductLockupView setSubtitleLabel:]
  -[VUIProductLockupView subtitleLabel]
  -[VUIProductLockupView setContentDescription:]
  -[VUIProductLockupView setGenre:]
  -[VUIProductLockupView topSeparatorView]
  -[VUIProductLockupView bottomSeparatorView]
  -[VUIProductLockupView setReleaseYear:]
  -[VUIProductLockupView releaseYear]
  -[VUIProductLockupView setTopSeparatorView:]
  -[VUIProductLockupView setBottomSeparatorView:]
  -[VUIProductLockupView descriptionTextView]
  -[VUIProductLockupView setDescriptionTextView:]
  -[VUIProductLockupView rentalExpirationLabelNeedsRelayout:]
  -[VUIProductLockupView _layoutWithSize:metricsOnly:]
  -[VUIProductLockupView _layoutForCategoryAccessibility:metricsOnly:]
  -[VUIProductLockupView _layoutForCompact:metricsOnly:]
  -[VUIProductLockupView setDownloadView:]
  -[VUIProductLockupView contentDescriptionExpanded]
  -[VUIProductLockupView setExpirationLabel:]
  -[VUIProductLockupView expirationLabel]
  -[VUIProductLockupView coverArtImageView]
  -[VUIProductLockupView setCoverArtImageView:]
  -[VUIProductLockupView updateWithMediaEntity:]
  -[VUIProductLockupView setMediaInfoTagsView:]
  -[VUIProductLockupView setMediaBadgeTagsView:]
  -[VUIProductLockupView _contentDescriptionAttributedString]
  -[VUIProductLockupView setContentDescriptionExpanded:]
  -[VUIProductLockupView _layoutForStacked:metricsOnly:]
  -[VUIProductLockupView _sizeOfDescriptionLabel:]
  -[VUIProductLockupView _descriptionTopMarginWithBaselineMargin:otherFont:]
  -[VUIProductLockupView _descriptionBottomMarginWithBaselineMargin:]
  -[VUIProductLockupView setCoverArtImageProxy:placeholderImage:]
  -[VUIProductLockupView coverArtImageProxy]
  -[VUIProductLockupView coverArtPlaceholderImage]
  -[VUIProductLockupView downloadView]
  -[VUIProductLockupView availabilityText]
  -[VUIProductLockupView setAvailabilityText:]
  -[VUIProductLockupView badgeResources]
  -[VUIProductLockupView setBadgeResources:]
  -[VUIProductLockupView didSetUpViews]
  -[VUIProductLockupView setDidSetUpViews:]
  -[VUIProductLockupView contentRatingImage]
  -[VUIProductLockupView setContentRatingImage:]
  -[VUIProductLockupView mediaInfoTagsView]
  -[VUIProductLockupView mediaBadgeTagsView]


VUIMPMediaItemAssetController : NSObject /usr/lib/libSystem.B.dylib <VUIMPMediaItemDownloadControllerObserver, MPStoreDownloadManagerObserver, VUIMediaEntityAssetController>
 @property  NSObject<VUIMediaEntityIdentifier> *mediaEntityIdentifier
 @property  VUIMPMediaItemDownloadController *downloadController
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  BOOL requestingPermissionToDownload
 @property  MPMediaItem *mediaItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  VUIMediaEntityType *mediaEntityType
 @property  <VUIMediaEntityAssetControllerDelegate> *delegate
 @property  BOOL supportsStartingDownload
 @property  VUIMediaEntityAssetControllerState *state
 @property  NSObject<OS_dispatch_queue> *completionDispatchQueue

  // class methods
  +[VUIMPMediaItemAssetController _supportsStartingDownloadWithMediaItem:]
  +[VUIMPMediaItemAssetController _assetControllerStatusFromDownloadControllerState:]

  // instance methods
  -[VUIMPMediaItemAssetController init]
  -[VUIMPMediaItemAssetController dealloc]
  -[VUIMPMediaItemAssetController invalidate]
  -[VUIMPMediaItemAssetController delegate]
  -[VUIMPMediaItemAssetController setDelegate:]
  -[VUIMPMediaItemAssetController .cxx_destruct]
  -[VUIMPMediaItemAssetController state]
  -[VUIMPMediaItemAssetController _isDownloaded]
  -[VUIMPMediaItemAssetController mediaItem]
  -[VUIMPMediaItemAssetController mediaEntityType]
  -[VUIMPMediaItemAssetController downloadManager:didAddDownloads:removeDownloads:]
  -[VUIMPMediaItemAssetController completionDispatchQueue]
  -[VUIMPMediaItemAssetController resumeDownload]
  -[VUIMPMediaItemAssetController cancelAndRemoveDownload]
  -[VUIMPMediaItemAssetController serialProcessingDispatchQueue]
  -[VUIMPMediaItemAssetController _enqueueCompletionQueueBlock:]
  -[VUIMPMediaItemAssetController setCompletionDispatchQueue:]
  -[VUIMPMediaItemAssetController setSerialProcessingDispatchQueue:]
  -[VUIMPMediaItemAssetController initWithMediaItem:mediaEntityIdentifier:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemAssetController _handleMediaLibraryContentsDidChangeNotification:]
  -[VUIMPMediaItemAssetController supportsStartingDownload]
  -[VUIMPMediaItemAssetController _onProcessingQueue_invalidate]
  -[VUIMPMediaItemAssetController startDownloadWithCompletion:]
  -[VUIMPMediaItemAssetController pauseDownload]
  -[VUIMPMediaItemAssetController mediaEntityIdentifier]
  -[VUIMPMediaItemAssetController _onProcessingQueue_calculateStateAndNotify:]
  -[VUIMPMediaItemAssetController _onProcessingQueue_invalidateAndSetState]
  -[VUIMPMediaItemAssetController _enqueueAsyncProcessingQueueStrongSelfBlock:]
  -[VUIMPMediaItemAssetController _onProcessingQueue_startDownloadWithCompletion:]
  -[VUIMPMediaItemAssetController _onProcessingQueue_downloadController]
  -[VUIMPMediaItemAssetController _onProcessingQueue_cancelAndRemoveDownload]
  -[VUIMPMediaItemAssetController _onProcessingQueue_updateStateWithStatus:downloadProgress:bytesDownloaded:bytesToDownload:supportsPausing:supportsCancellation:notify:]
  -[VUIMPMediaItemAssetController _onProcessingQueue_startMonitoringDownload]
  -[VUIMPMediaItemAssetController _onProcessingQueue_updateStateWithStatus:notify:]
  -[VUIMPMediaItemAssetController _onProcessingQueue_setDownloadController:]
  -[VUIMPMediaItemAssetController _notifyDelegateStateDidChange:]
  -[VUIMPMediaItemAssetController mediaItemDownloadController:stateDidChange:]
  -[VUIMPMediaItemAssetController setMediaEntityIdentifier:]
  -[VUIMPMediaItemAssetController downloadController]
  -[VUIMPMediaItemAssetController setDownloadController:]
  -[VUIMPMediaItemAssetController isRequestingPermissionToDownload]
  -[VUIMPMediaItemAssetController setRequestingPermissionToDownload:]


VUIScoreboardRowLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  int backgroundBlendMode
 @property  UIColor *backgroundColor
 @property  int separatorBlendMode
 @property  UIColor *separatorColor

  // class methods
  +[VUIScoreboardRowLayout _backgroundColorForIdiom:]
  +[VUIScoreboardRowLayout _backgroundColorBlendMode]
  +[VUIScoreboardRowLayout _topRowLayoutForIdiom:]
  +[VUIScoreboardRowLayout _bottomLayoutForIdiom:]

  // instance methods
  -[VUIScoreboardRowLayout .cxx_destruct]
  -[VUIScoreboardRowLayout backgroundColor]
  -[VUIScoreboardRowLayout setBackgroundColor:]
  -[VUIScoreboardRowLayout separatorColor]
  -[VUIScoreboardRowLayout setSeparatorColor:]
  -[VUIScoreboardRowLayout backgroundBlendMode]
  -[VUIScoreboardRowLayout separatorBlendMode]
  -[VUIScoreboardRowLayout setSeparatorBlendMode:]
  -[VUIScoreboardRowLayout setBackgroundBlendMode:]


VUIScoreboardLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  {TVCornerRadii=dddd} borderRadii
 @property  double padding
 @property  VUITextLayout *textLayout
 @property  VUIScoreboardRowLayout *topRowLayout
 @property  VUIScoreboardRowLayout *bottomRowLayout

  // class methods
  +[VUIScoreboardLayout scoreboardALayout]
  +[VUIScoreboardLayout scoreboardBLayout]
  +[VUIScoreboardLayout scoreboardCLayoutWithInnerMargin:]
  +[VUIScoreboardLayout _textBlendMode]
  +[VUIScoreboardLayout _textColor:]

  // instance methods
  -[VUIScoreboardLayout .cxx_destruct]
  -[VUIScoreboardLayout setPadding:]
  -[VUIScoreboardLayout padding]
  -[VUIScoreboardLayout setTextLayout:]
  -[VUIScoreboardLayout textLayout]
  -[VUIScoreboardLayout borderRadii]
  -[VUIScoreboardLayout setBorderRadii:]
  -[VUIScoreboardLayout topRowLayout]
  -[VUIScoreboardLayout bottomRowLayout]
  -[VUIScoreboardLayout setTopRowLayout:]
  -[VUIScoreboardLayout setBottomRowLayout:]


VUITransactionOffer : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL playWhenDone
 @property  NSString *buyParams
 @property  NSString *title
 @property  NSArray *videosPlayables
 @property  NSDictionary *offer

  // instance methods
  -[VUITransactionOffer .cxx_destruct]
  -[VUITransactionOffer initWithDictionary:]
  -[VUITransactionOffer title]
  -[VUITransactionOffer buyParams]
  -[VUITransactionOffer offer]
  -[VUITransactionOffer notificationTitle]
  -[VUITransactionOffer videosPlayables]
  -[VUITransactionOffer playWhenDone]
  -[VUITransactionOffer notificationBody]


VUIActionCommerceTransaction : VUIAction
 @property  NSString *commerceActionRef
 @property  NSDictionary *contextData
 @property  IKAppContext *appContext

  // class methods
  +[VUIActionCommerceTransaction isTransactionInProgressForBuyParams:]
  +[VUIActionCommerceTransaction _skuDownloadKind:]
  +[VUIActionCommerceTransaction _addTransaction:forBuyParams:]
  +[VUIActionCommerceTransaction _removeTransactionForBuyParams:]

  // instance methods
  -[VUIActionCommerceTransaction .cxx_destruct]
  -[VUIActionCommerceTransaction setContextData:]
  -[VUIActionCommerceTransaction contextData]
  -[VUIActionCommerceTransaction appContext]
  -[VUIActionCommerceTransaction setAppContext:]
  -[VUIActionCommerceTransaction performWithTargetResponder:completionHandler:]
  -[VUIActionCommerceTransaction initWithActionRef:contextData:appContext:]
  -[VUIActionCommerceTransaction setCommerceActionRef:]
  -[VUIActionCommerceTransaction _startPurchaseFlowForOffer:playWhenDone:appContext:completionHandler:]
  -[VUIActionCommerceTransaction _startSubscribeFlowForOffer:completionHandler:]
  -[VUIActionCommerceTransaction _recordLog:withBuyParams:]
  -[VUIActionCommerceTransaction _postPurchaseNotification:error:]
  -[VUIActionCommerceTransaction _postTransactionDidStartNotificationWithBuyParams:]
  -[VUIActionCommerceTransaction _postSubscriptionNotificationWithChannelName:buyParams:error:]
  -[VUIActionCommerceTransaction _displayConfirmationNotificationWithTitle:andBody:forChannelName:]
  -[VUIActionCommerceTransaction commerceActionRef]


VUIPlistMediaEntityImageLoadParams : NSObject /usr/lib/libSystem.B.dylib <VUIImageLoadParams>
 @property  NSURL *imageURL
 @property  NSString *baseImageIdentifier
 @property  unsigned long imageType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *imageIdentifier

  // instance methods
  -[VUIPlistMediaEntityImageLoadParams init]
  -[VUIPlistMediaEntityImageLoadParams isEqual:]
  -[VUIPlistMediaEntityImageLoadParams .cxx_destruct]
  -[VUIPlistMediaEntityImageLoadParams setImageType:]
  -[VUIPlistMediaEntityImageLoadParams imageURL]
  -[VUIPlistMediaEntityImageLoadParams imageType]
  -[VUIPlistMediaEntityImageLoadParams setImageURL:]
  -[VUIPlistMediaEntityImageLoadParams imageIdentifier]
  -[VUIPlistMediaEntityImageLoadParams initWithImageURL:baseImageIdentifier:imageType:]
  -[VUIPlistMediaEntityImageLoadParams baseImageIdentifier]
  -[VUIPlistMediaEntityImageLoadParams setBaseImageIdentifier:]


_VUIDownloadSeeAllController : NSObject /usr/lib/libSystem.B.dylib
 @property  VUILibraryGridCollectionViewController *gridViewController
 @property  VUIMediaEntityType *mediaEntityType

  // instance methods
  -[_VUIDownloadSeeAllController .cxx_destruct]
  -[_VUIDownloadSeeAllController setMediaEntityType:]
  -[_VUIDownloadSeeAllController mediaEntityType]
  -[_VUIDownloadSeeAllController gridViewController]
  -[_VUIDownloadSeeAllController setGridViewController:]


VUILibraryDownloadViewController : VUILibraryStackViewController <UICollectionViewDataSource, VUIMediaEntitiesFetchControllerDelegate, VUILibraryShelfCollectionViewControllerDelegate>
 @property  VUILibraryMediaEntityShelvesViewModel *viewModel
 @property  UIBarButtonItem *currentNavBarButtonItem
 @property  _VUIDownloadSeeAllController *currentSeeAllController
 @property  UIBarButtonItem *libraryBarButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUILibraryDownloadViewController _localizedTitleForMediaEntityType:]

  // instance methods
  -[VUILibraryDownloadViewController .cxx_destruct]
  -[VUILibraryDownloadViewController start]
  -[VUILibraryDownloadViewController viewWillAppear:]
  -[VUILibraryDownloadViewController viewDidLoad]
  -[VUILibraryDownloadViewController viewWillLayoutSubviews]
  -[VUILibraryDownloadViewController numberOfSectionsInCollectionView:]
  -[VUILibraryDownloadViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryDownloadViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryDownloadViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryDownloadViewController viewModel]
  -[VUILibraryDownloadViewController setViewModel:]
  -[VUILibraryDownloadViewController configureWithCollectionView:]
  -[VUILibraryDownloadViewController initWithMediaLibrary:]
  -[VUILibraryDownloadViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryDownloadViewController controller:fetchRequests:didFailWithError:]
  -[VUILibraryDownloadViewController shelfCollectionViewController:collectionView:didSelectMediaEntity:atIndexPath:]
  -[VUILibraryDownloadViewController seeAllButtonPressed:]
  -[VUILibraryDownloadViewController _localizedBannerString]
  -[VUILibraryDownloadViewController setLibraryBarButton:]
  -[VUILibraryDownloadViewController libraryBarButton]
  -[VUILibraryDownloadViewController currentNavBarButtonItem]
  -[VUILibraryDownloadViewController setCurrentNavBarButtonItem:]
  -[VUILibraryDownloadViewController currentSeeAllController]
  -[VUILibraryDownloadViewController setCurrentSeeAllController:]


VUIEpisodeShelfViewController : _TVShelfViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <__TVShelfViewControllerDelegate, VUISeasonPickerButtonDelegate>
 @property  BOOL isInitialLoad
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIEpisodeShelfViewController scrollViewDidScroll:]
  -[VUIEpisodeShelfViewController scrollViewDidEndDecelerating:]
  -[VUIEpisodeShelfViewController scrollViewDidEndScrollingAnimation:]
  -[VUIEpisodeShelfViewController viewDidLoad]
  -[VUIEpisodeShelfViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIEpisodeShelfViewController viewDidLayoutSubviews]
  -[VUIEpisodeShelfViewController isInitialLoad]
  -[VUIEpisodeShelfViewController setIsInitialLoad:]
  -[VUIEpisodeShelfViewController seasonPickerButtonTapped:]
  -[VUIEpisodeShelfViewController _episodeHeaderView]
  -[VUIEpisodeShelfViewController _updateEpisodeHeaderWithLeftMostItem]
  -[VUIEpisodeShelfViewController selectedIndexTitleForItemIndexPath:]


VUIOverlayBlurVisualEffectView : UIVisualEffectView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // class methods
  +[VUIOverlayBlurVisualEffectView overlayVisualEffect]


_VUIBlurEffect : UIBlurEffect /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL isProgressBar

  // instance methods
  -[_VUIBlurEffect effectSettings]
  -[_VUIBlurEffect isProgressBar]
  -[_VUIBlurEffect setIsProgressBar:]


VUIBookmarkKey : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *identifier
 @property  long long keyType

  // instance methods
  -[VUIBookmarkKey init]
  -[VUIBookmarkKey .cxx_destruct]
  -[VUIBookmarkKey identifier]
  -[VUIBookmarkKey keyType]
  -[VUIBookmarkKey initWithIdentifier:keyType:]


VUIDebugContainerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UICollectionView *collectionView

  // instance methods
  -[VUIDebugContainerView .cxx_destruct]
  -[VUIDebugContainerView layoutSubviews]
  -[VUIDebugContainerView collectionView]
  -[VUIDebugContainerView setCollectionView:]


VUIDebugViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
 @property  VUIDebugContainerView *containerView
 @property  UICollectionView *collectionView
 @property  BOOL requiresRelayout
 @property  VUIDebugViewDataSource *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIDebugViewController init]
  -[VUIDebugViewController .cxx_destruct]
  -[VUIDebugViewController dataSource]
  -[VUIDebugViewController setDataSource:]
  -[VUIDebugViewController loadView]
  -[VUIDebugViewController traitCollectionDidChange:]
  -[VUIDebugViewController containerView]
  -[VUIDebugViewController setContainerView:]
  -[VUIDebugViewController preferredFocusEnvironments]
  -[VUIDebugViewController collectionView]
  -[VUIDebugViewController viewDidLoad]
  -[VUIDebugViewController numberOfSectionsInCollectionView:]
  -[VUIDebugViewController collectionView:numberOfItemsInSection:]
  -[VUIDebugViewController collectionView:cellForItemAtIndexPath:]
  -[VUIDebugViewController collectionView:canFocusItemAtIndexPath:]
  -[VUIDebugViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIDebugViewController viewDidLayoutSubviews]
  -[VUIDebugViewController preferredStatusBarStyle]
  -[VUIDebugViewController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VUIDebugViewController setCollectionView:]
  -[VUIDebugViewController collectionView:didSelectItemAtIndexPath:]
  -[VUIDebugViewController collectionView:didUpdateFocusInContext:withAnimationCoordinator:]
  -[VUIDebugViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUIDebugViewController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VUIDebugViewController _dismissViewController]
  -[VUIDebugViewController requiresRelayout]
  -[VUIDebugViewController setRequiresRelayout:]


VUIConfirmationDialogTemplateController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSTimer *dismissTimer
 @property  VUIConfirmationDialogTemplateView *templateView

  // instance methods
  -[VUIConfirmationDialogTemplateController dealloc]
  -[VUIConfirmationDialogTemplateController .cxx_destruct]
  -[VUIConfirmationDialogTemplateController loadView]
  -[VUIConfirmationDialogTemplateController viewWillAppear:]
  -[VUIConfirmationDialogTemplateController viewDidLoad]
  -[VUIConfirmationDialogTemplateController viewDidAppear:]
  -[VUIConfirmationDialogTemplateController viewDidDisappear:]
  -[VUIConfirmationDialogTemplateController _applicationDidEnterBackground:]
  -[VUIConfirmationDialogTemplateController _setupTimer]
  -[VUIConfirmationDialogTemplateController templateView]
  -[VUIConfirmationDialogTemplateController updateWithViewElement:]
  -[VUIConfirmationDialogTemplateController _dismissConfirmation:]
  -[VUIConfirmationDialogTemplateController dismissTimer]


VUIAppDocumentServiceViewController : _TVAppDocumentRequestController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <IKUpdateServiceRequestDelegate, VUIAppDocumentUpdateEventMonitorObserving, UIPopoverPresentationControllerDelegate>
 @property  IKAppContext *appContext
 @property  NSString *documentRef
 @property  <VUIAppDocumentUpdateContext> *documentUpdateContext
 @property  NSMutableOrderedSet *documentUpdateViewElements
 @property  VUIAppDocumentUpdateEventStore *deferredDocumentUpdateEventStore
 @property  BOOL deferDocumentUpdateEventProcessing
 @property  BOOL markDocumentDirtyForRefreshUpdate
 @property  NSString *viewControllerIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAppDocumentServiceViewController _findCollectionListChildElementsInViewElement:]

  // instance methods
  -[VUIAppDocumentServiceViewController init]
  -[VUIAppDocumentServiceViewController dealloc]
  -[VUIAppDocumentServiceViewController initWithCoder:]
  -[VUIAppDocumentServiceViewController .cxx_destruct]
  -[VUIAppDocumentServiceViewController initWithNibName:bundle:]
  -[VUIAppDocumentServiceViewController viewWillAppear:]
  -[VUIAppDocumentServiceViewController viewWillDisappear:]
  -[VUIAppDocumentServiceViewController adaptivePresentationStyleForPresentationController:traitCollection:]
  -[VUIAppDocumentServiceViewController popoverPresentationController:willRepositionPopoverToRect:inView:]
  -[VUIAppDocumentServiceViewController documentRef]
  -[VUIAppDocumentServiceViewController appContext]
  -[VUIAppDocumentServiceViewController initWithAppContext:]
  -[VUIAppDocumentServiceViewController serviceRequest:didCompleteWithStatus:errorDictionary:]
  -[VUIAppDocumentServiceViewController setAppContext:]
  -[VUIAppDocumentServiceViewController documentDidUpdate:]
  -[VUIAppDocumentServiceViewController updateServiceRequest:documentDidChange:]
  -[VUIAppDocumentServiceViewController initWithDocumentServiceRequest:]
  -[VUIAppDocumentServiceViewController initWithDocumentServiceRequest:loadImmediately:]
  -[VUIAppDocumentServiceViewController didCompleteDocumentCreationWithStatus:errorDictionary:]
  -[VUIAppDocumentServiceViewController handleEvent:targetResponder:viewElement:extraInfo:]
  -[VUIAppDocumentServiceViewController interactionPreviewControllerForViewController:presentingView:presentingElement:]
  -[VUIAppDocumentServiceViewController viewControllerIdentifier]
  -[VUIAppDocumentServiceViewController vui_handleEvent:forElement:sourceView:]
  -[VUIAppDocumentServiceViewController initWithDocumentServiceRequest:loadImmediately:documentRef:viewControllerIdentifier:]
  -[VUIAppDocumentServiceViewController appDocumentDidReceiveEvent:]
  -[VUIAppDocumentServiceViewController setDocumentRef:]
  -[VUIAppDocumentServiceViewController _cancelDocumentUpdates]
  -[VUIAppDocumentServiceViewController _unregisterDocumentUpdateEventDescriptors]
  -[VUIAppDocumentServiceViewController _cancelDocumentUpdatesAndPreserveUpdateEvents]
  -[VUIAppDocumentServiceViewController _startDocumentUpdatesWithContext:]
  -[VUIAppDocumentServiceViewController setDeferDocumentUpdateEventProcessing:]
  -[VUIAppDocumentServiceViewController _startDocumentUpdatesForDeferredEventsIfPossible]
  -[VUIAppDocumentServiceViewController deferredDocumentUpdateEventStore]
  -[VUIAppDocumentServiceViewController setMarkDocumentDirtyForRefreshUpdate:]
  -[VUIAppDocumentServiceViewController deferDocumentUpdateEventProcessing]
  -[VUIAppDocumentServiceViewController _registerDocumentUpdateEventDescriptorsWithServiceCompletionStatus:]
  -[VUIAppDocumentServiceViewController documentUpdateContext]
  -[VUIAppDocumentServiceViewController documentUpdateViewElements]
  -[VUIAppDocumentServiceViewController _performNextDocumentUpdateIfNeeded]
  -[VUIAppDocumentServiceViewController _cancelDocumentUpdateWithRequest:]
  -[VUIAppDocumentServiceViewController setDocumentUpdateContext:]
  -[VUIAppDocumentServiceViewController _startDocumentUpdateWithRequest:]
  -[VUIAppDocumentServiceViewController markDocumentDirtyForRefreshUpdate]
  -[VUIAppDocumentServiceViewController setDocumentUpdateViewElements:]
  -[VUIAppDocumentServiceViewController updateDocumentWithContextDictionary:element:]
  -[VUIAppDocumentServiceViewController setViewControllerIdentifier:]
  -[VUIAppDocumentServiceViewController setDeferredDocumentUpdateEventStore:]


VUIMediaItemEntityTypesFetchControllerResult : NSObject /usr/lib/libSystem.B.dylib
 @property  long long fetchReason
 @property  VUIMediaItemEntityTypesFetchResponse *fetchResponse
 @property  VUIMediaItemEntityTypesFetchResponseChanges *fetchChanges

  // instance methods
  -[VUIMediaItemEntityTypesFetchControllerResult init]
  -[VUIMediaItemEntityTypesFetchControllerResult .cxx_destruct]
  -[VUIMediaItemEntityTypesFetchControllerResult setFetchChanges:]
  -[VUIMediaItemEntityTypesFetchControllerResult fetchChanges]
  -[VUIMediaItemEntityTypesFetchControllerResult fetchReason]
  -[VUIMediaItemEntityTypesFetchControllerResult fetchResponse]
  -[VUIMediaItemEntityTypesFetchControllerResult setFetchReason:]
  -[VUIMediaItemEntityTypesFetchControllerResult initWithFetchReason:fetchResponse:]
  -[VUIMediaItemEntityTypesFetchControllerResult setFetchResponse:]


VUIOrderedItemsMap : NSObject /usr/lib/libSystem.B.dylib
 @property  long long dataSourceType
 @property  NSDictionary *mappingDictionary
 @property  NSOrderedSet *orderedKeys
 @property  <VUIOrderedItemsMapDelegate> *delegate

  // instance methods
  -[VUIOrderedItemsMap init]
  -[VUIOrderedItemsMap delegate]
  -[VUIOrderedItemsMap setDelegate:]
  -[VUIOrderedItemsMap objectForKeyedSubscript:]
  -[VUIOrderedItemsMap .cxx_destruct]
  -[VUIOrderedItemsMap removeAll]
  -[VUIOrderedItemsMap setOrderedKeys:]
  -[VUIOrderedItemsMap orderedKeys]
  -[VUIOrderedItemsMap dataSourceType]
  -[VUIOrderedItemsMap setDataSourceType:]
  -[VUIOrderedItemsMap processEntities:forDataSourceType:]
  -[VUIOrderedItemsMap updateEntities:]
  -[VUIOrderedItemsMap _identifierForMediaItem:withProperty:]
  -[VUIOrderedItemsMap setMappingDictionary:]
  -[VUIOrderedItemsMap mappingDictionary]
  -[VUIOrderedItemsMap _generateStoreIdentiferToIndexMapping:generatesDifferentials:]


VUIImageView : UIImageView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIImage *highlightOrSelectedImage

  // class methods
  +[VUIImageView imageWithImage:existingImageView:]

  // instance methods
  -[VUIImageView .cxx_destruct]
  -[VUIImageView setImage:]
  -[VUIImageView setHighlighted:]
  -[VUIImageView _updateImage]
  -[VUIImageView setSelected:animated:]
  -[VUIImageView setHighlightOrSelectedImage:]
  -[VUIImageView highlightOrSelectedImage]


VUIPlistMediaLibrary : VUIDeviceMediaLibrary
 @property  VUIPlistMediaDatabase *database
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSOperationQueue *serialOperationQueue

  // instance methods
  -[VUIPlistMediaLibrary dealloc]
  -[VUIPlistMediaLibrary .cxx_destruct]
  -[VUIPlistMediaLibrary title]
  -[VUIPlistMediaLibrary setDatabase:]
  -[VUIPlistMediaLibrary database]
  -[VUIPlistMediaLibrary serialOperationQueue]
  -[VUIPlistMediaLibrary setSerialOperationQueue:]
  -[VUIPlistMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUIPlistMediaLibrary serialProcessingDispatchQueue]
  -[VUIPlistMediaLibrary initWithURL:manager:]
  -[VUIPlistMediaLibrary setSerialProcessingDispatchQueue:]
  -[VUIPlistMediaLibrary initWithIdentifier:type:manager:]
  -[VUIPlistMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUIPlistMediaLibrary saveMediaEntity:completionHandler:]
  -[VUIPlistMediaLibrary _imageLoaderIdentifier]
  -[VUIPlistMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUIPlistMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIPlistMediaLibrary _enqueueProcessingBlock:]
  -[VUIPlistMediaLibrary _handleMediaDatabaseContentsDidChangeNotification:]


VUIPlistMediaItemEntityTypesOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox
 @property  VUIPlistMediaDatabase *database
 @property  VUIMediaItemEntityTypesFetchResponse *response
 @property  NSError *error

  // instance methods
  -[VUIPlistMediaItemEntityTypesOperation init]
  -[VUIPlistMediaItemEntityTypesOperation .cxx_destruct]
  -[VUIPlistMediaItemEntityTypesOperation error]
  -[VUIPlistMediaItemEntityTypesOperation setError:]
  -[VUIPlistMediaItemEntityTypesOperation setDatabase:]
  -[VUIPlistMediaItemEntityTypesOperation database]
  -[VUIPlistMediaItemEntityTypesOperation response]
  -[VUIPlistMediaItemEntityTypesOperation setResponse:]
  -[VUIPlistMediaItemEntityTypesOperation initWithDatabase:]
  -[VUIPlistMediaItemEntityTypesOperation executionDidBegin]


VUIFocusableCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  BOOL allowsFocus

  // instance methods
  -[VUIFocusableCollectionViewCell prepareForReuse]
  -[VUIFocusableCollectionViewCell initWithFrame:]
  -[VUIFocusableCollectionViewCell canBecomeFocused]
  -[VUIFocusableCollectionViewCell setHighlighted:]
  -[VUIFocusableCollectionViewCell allowsFocus]
  -[VUIFocusableCollectionViewCell setAllowsFocus:]


VUIMediaLibraryFetchController : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIMediaLibrary *mediaLibrary
 @property  long long state
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSOperationQueue *serialFetchOperationQueue
 @property  NSOperation *fetchOperation
 @property  unsigned long mediaLibraryRevision
 @property  unsigned long pauseCount
 @property  NSString *identifier
 @property  NSString *logName
 @property  NSString *logNameSuffix

  // class methods
  +[VUIMediaLibraryFetchController _logStringWithFetchControllers:]

  // instance methods
  -[VUIMediaLibraryFetchController init]
  -[VUIMediaLibraryFetchController .cxx_destruct]
  -[VUIMediaLibraryFetchController identifier]
  -[VUIMediaLibraryFetchController pause]
  -[VUIMediaLibraryFetchController resume]
  -[VUIMediaLibraryFetchController setIdentifier:]
  -[VUIMediaLibraryFetchController state]
  -[VUIMediaLibraryFetchController setState:]
  -[VUIMediaLibraryFetchController mediaLibrary]
  -[VUIMediaLibraryFetchController setMediaLibrary:]
  -[VUIMediaLibraryFetchController cancelFetch]
  -[VUIMediaLibraryFetchController logName]
  -[VUIMediaLibraryFetchController setLogName:]
  -[VUIMediaLibraryFetchController fetchOperation]
  -[VUIMediaLibraryFetchController setFetchOperation:]
  -[VUIMediaLibraryFetchController pauseCount]
  -[VUIMediaLibraryFetchController setPauseCount:]
  -[VUIMediaLibraryFetchController initWithMediaLibrary:]
  -[VUIMediaLibraryFetchController _fetchOperationForFetchReason:]
  -[VUIMediaLibraryFetchController _didCompleteFetchOperation:]
  -[VUIMediaLibraryFetchController serialProcessingDispatchQueue]
  -[VUIMediaLibraryFetchController setSerialProcessingDispatchQueue:]
  -[VUIMediaLibraryFetchController setLogNameSuffix:]
  -[VUIMediaLibraryFetchController mediaLibraryRevision]
  -[VUIMediaLibraryFetchController beginFetchWithMediaLibraryRevision:completionHandler:completionQueue:]
  -[VUIMediaLibraryFetchController setMediaLibraryRevision:]
  -[VUIMediaLibraryFetchController _enqueueSyncProcessingQueueBlock:]
  -[VUIMediaLibraryFetchController _enqueueAsyncProcessingQueueBlock:]
  -[VUIMediaLibraryFetchController serialFetchOperationQueue]
  -[VUIMediaLibraryFetchController _enqueueProcessingQueueBlock:synchronous:]
  -[VUIMediaLibraryFetchController setSerialFetchOperationQueue:]
  -[VUIMediaLibraryFetchController logNameSuffix]
  -[VUIMediaLibraryFetchController _cancelFetch]
  -[VUIMediaLibraryFetchController _moveToPausedState]
  -[VUIMediaLibraryFetchController _startFetchIfNeededWithMediaLibraryRevision:completionHandler:]
  -[VUIMediaLibraryFetchController _shouldFetchForMediaLibraryRevision:]
  -[VUIMediaLibraryFetchController _startFetchWithCompletionHandler:]
  -[VUIMediaLibraryFetchController _enqueueFetchWithReason:completionHandler:]
  -[VUIMediaLibraryFetchController _fetchOperationCompleted:withCompletionHandler:]
  -[VUIMediaLibraryFetchController _updateMutableArray:withLatestObjects:changeSet:updateOnNoChanges:]


VUIPlaybackReporterVPAFPlaylistItem : NSObject /usr/lib/libSystem.B.dylib <MTMediaPlaylistItem>
 @property  unsigned long overallPosition
 @property  NSArray *eventData
 @property  {_NSRange=QQ} timeRange
 @property  unsigned long duration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long startOverallPosition
 @property  long long startPosition

  // instance methods
  -[VUIPlaybackReporterVPAFPlaylistItem .cxx_destruct]
  -[VUIPlaybackReporterVPAFPlaylistItem duration]
  -[VUIPlaybackReporterVPAFPlaylistItem setDuration:]
  -[VUIPlaybackReporterVPAFPlaylistItem setTimeRange:]
  -[VUIPlaybackReporterVPAFPlaylistItem timeRange]
  -[VUIPlaybackReporterVPAFPlaylistItem eventData]
  -[VUIPlaybackReporterVPAFPlaylistItem setEventData:]
  -[VUIPlaybackReporterVPAFPlaylistItem overallPosition]
  -[VUIPlaybackReporterVPAFPlaylistItem initWithPosition:duration:eventData:]
  -[VUIPlaybackReporterVPAFPlaylistItem setOverallPosition:]


VUIPlaybackReporterVPAFPlaylist : NSObject /usr/lib/libSystem.B.dylib <MTMediaPlaylist>
 @property  NSObject<TVPPlayback> *player
 @property  NSArray *items
 @property  NSArray *eventData
 @property  BOOL isLive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPlaybackReporterVPAFPlaylist .cxx_destruct]
  -[VUIPlaybackReporterVPAFPlaylist items]
  -[VUIPlaybackReporterVPAFPlaylist setItems:]
  -[VUIPlaybackReporterVPAFPlaylist isLive]
  -[VUIPlaybackReporterVPAFPlaylist player]
  -[VUIPlaybackReporterVPAFPlaylist setPlayer:]
  -[VUIPlaybackReporterVPAFPlaylist initWithPlayer:]
  -[VUIPlaybackReporterVPAFPlaylist eventData]
  -[VUIPlaybackReporterVPAFPlaylist setEventData:]
  -[VUIPlaybackReporterVPAFPlaylist itemAtOverallPosition:rangeOptions:]
  -[VUIPlaybackReporterVPAFPlaylist itemsBetweenStartOverallPosition:endOverallPosition:]
  -[VUIPlaybackReporterVPAFPlaylist setIsLive:]


VUIAppDocumentCanonicalServiceViewController : VUIAppDocumentServiceViewController
  // instance methods
  -[VUIAppDocumentCanonicalServiceViewController handleEvent:targetResponder:viewElement:extraInfo:]
  -[VUIAppDocumentCanonicalServiceViewController automaticallyProvidesMediaController]
  -[VUIAppDocumentCanonicalServiceViewController initWithDocumentServiceRequest:loadImmediately:documentRef:viewControllerIdentifier:]


VideosExtrasMainTemplateViewController : VideosExtrasTemplateViewController <UICollectionViewDelegateFlowLayout, UICollectionViewDataSource, UICollectionViewDelegate, VideosExtrasMainMenuSectionMetricsDataSource>
 @property  double collectionViewHeight
 @property  NSIndexPath *indexPathOfFeaturedItem
 @property  UIView *menuBarView
 @property  <UICollectionViewDelegate> *didSelectDelegate
 @property  NSArray *mainMenuItemElements
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasMainTemplateViewController dealloc]
  -[VideosExtrasMainTemplateViewController .cxx_destruct]
  -[VideosExtrasMainTemplateViewController viewWillAppear:]
  -[VideosExtrasMainTemplateViewController viewDidLoad]
  -[VideosExtrasMainTemplateViewController collectionView:numberOfItemsInSection:]
  -[VideosExtrasMainTemplateViewController collectionView:cellForItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController collectionView:shouldSelectItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController collectionView:didSelectItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController collectionView:willDisplayCell:forItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController _menuItems]
  -[VideosExtrasMainTemplateViewController _configureCell:forIndexPath:]
  -[VideosExtrasMainTemplateViewController templateElement]
  -[VideosExtrasMainTemplateViewController showsPlaceholder]
  -[VideosExtrasMainTemplateViewController setCollectionViewHeight:]
  -[VideosExtrasMainTemplateViewController collectionViewHeight]
  -[VideosExtrasMainTemplateViewController _prepareLayout]
  -[VideosExtrasMainTemplateViewController _startBackgroundAudio]
  -[VideosExtrasMainTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasMainTemplateViewController menuBarView]
  -[VideosExtrasMainTemplateViewController mainMenuItemElements]
  -[VideosExtrasMainTemplateViewController numberOfItemsForSectionMetrics:]
  -[VideosExtrasMainTemplateViewController _recalculateSizes]
  -[VideosExtrasMainTemplateViewController sectionMetrics:sizeForItemAtIndex:withFontDescriptor:]
  -[VideosExtrasMainTemplateViewController setDidSelectDelegate:]
  -[VideosExtrasMainTemplateViewController indexPathOfFeaturedItem]
  -[VideosExtrasMainTemplateViewController _dynamicTypeChanged]
  -[VideosExtrasMainTemplateViewController _prepareCollectionView]
  -[VideosExtrasMainTemplateViewController _textElementAtIndex:]
  -[VideosExtrasMainTemplateViewController _isFeatureItemAtIndexPath:]
  -[VideosExtrasMainTemplateViewController _collectionView:indexPathShouldDisplayAsSelected:]
  -[VideosExtrasMainTemplateViewController didSelectDelegate]


_VideosExtrasMainMenuItemCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  NSLayoutConstraint *textLabelConstraint
 @property  UILabel *textLabel

  // class methods
  +[_VideosExtrasMainMenuItemCollectionViewCell _createLabelInCell:]

  // instance methods
  -[_VideosExtrasMainMenuItemCollectionViewCell dealloc]
  -[_VideosExtrasMainMenuItemCollectionViewCell .cxx_destruct]
  -[_VideosExtrasMainMenuItemCollectionViewCell initWithFrame:]
  -[_VideosExtrasMainMenuItemCollectionViewCell sizeThatFits:]
  -[_VideosExtrasMainMenuItemCollectionViewCell safeAreaInsetsDidChange]
  -[_VideosExtrasMainMenuItemCollectionViewCell setSelected:]
  -[_VideosExtrasMainMenuItemCollectionViewCell textLabel]
  -[_VideosExtrasMainMenuItemCollectionViewCell _dynamicTypeChanged]
  -[_VideosExtrasMainMenuItemCollectionViewCell setTextLabelConstraint:]
  -[_VideosExtrasMainMenuItemCollectionViewCell textLabelConstraint]


VideosExtrasStackTemplateViewController : VideosExtrasTemplateViewController <UICollectionViewDelegateFlowLayout, UICollectionViewDataSource, UICollectionViewDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasStackTemplateViewController dealloc]
  -[VideosExtrasStackTemplateViewController .cxx_destruct]
  -[VideosExtrasStackTemplateViewController viewWillAppear:]
  -[VideosExtrasStackTemplateViewController viewDidLoad]
  -[VideosExtrasStackTemplateViewController numberOfSectionsInCollectionView:]
  -[VideosExtrasStackTemplateViewController collectionView:numberOfItemsInSection:]
  -[VideosExtrasStackTemplateViewController collectionView:cellForItemAtIndexPath:]
  -[VideosExtrasStackTemplateViewController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VideosExtrasStackTemplateViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VideosExtrasStackTemplateViewController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VideosExtrasStackTemplateViewController contentScrollView]
  -[VideosExtrasStackTemplateViewController templateElement]
  -[VideosExtrasStackTemplateViewController showsPlaceholder]
  -[VideosExtrasStackTemplateViewController _dynamicTypeDidChange]
  -[VideosExtrasStackTemplateViewController _prepareLayout]
  -[VideosExtrasStackTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasStackTemplateViewController _viewControllerForIndexPath:]
  -[VideosExtrasStackTemplateViewController sectionStyle]


VideosExtrasStackCollectionCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VideosExtrasStackTemplateViewController *parentViewController
 @property  VideosExtrasGridElementViewController *viewController
 @property  VideosExtrasGridSectionHeaderStyle *sectionStyle

  // instance methods
  -[VideosExtrasStackCollectionCell .cxx_destruct]
  -[VideosExtrasStackCollectionCell setViewController:]
  -[VideosExtrasStackCollectionCell parentViewController]
  -[VideosExtrasStackCollectionCell viewController]
  -[VideosExtrasStackCollectionCell willMoveToSuperview:]
  -[VideosExtrasStackCollectionCell setParentViewController:]
  -[VideosExtrasStackCollectionCell sectionStyle]


VUIPerfMetricsAppLaunchController : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *appLaunchData

  // class methods
  +[VUIPerfMetricsAppLaunchController sharedInstance]

  // instance methods
  -[VUIPerfMetricsAppLaunchController init]
  -[VUIPerfMetricsAppLaunchController .cxx_destruct]
  -[VUIPerfMetricsAppLaunchController _setAppLaunchFieldWithData:]
  -[VUIPerfMetricsAppLaunchController appLaunchData]
  -[VUIPerfMetricsAppLaunchController setAppLaunchData:]
  -[VUIPerfMetricsAppLaunchController recordAppLaunchEventWithEventType:]


VUIMetricsController : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *baseFieldsForVPAF
 @property  NSDictionary *iTunesVPAF
 @property  NSDictionary *baseFields
 @property  VUIMetricsPageEventData *lastRecordedPageEventData
 @property  MTMetricsKit *activeMetricsKit
 @property  MTMetricsKit *metricsKitMain
 @property  MTMetricsKit *loggerKit
 @property  MTMetricsKit *metricsKitUnidentified
 @property  MTMetricsKit *perfMetricsKit
 @property  NSObject<OS_dispatch_queue> *metricsDataDispatchSQ
 @property  NSHashTable *savedRecentEvents
 @property  BOOL shouldPostAppLaunchData
 @property  NSDictionary *cachedOpenUrlData
 @property  NSString *currentTabIdentifier
 @property  NSString *exitEventDestinationUrl

  // class methods
  +[VUIMetricsController sharedInstance]
  +[VUIMetricsController _baseToVPAFMapping]

  // instance methods
  -[VUIMetricsController init]
  -[VUIMetricsController .cxx_destruct]
  -[VUIMetricsController setBaseFields:]
  -[VUIMetricsController baseFields]
  -[VUIMetricsController recordClick:]
  -[VUIMetricsController iTunesVPAF]
  -[VUIMetricsController recordMedia:]
  -[VUIMetricsController recordPage:]
  -[VUIMetricsController recordDialog:]
  -[VUIMetricsController forceGDPRConsentStatus:]
  -[VUIMetricsController setExitEventDestinationUrl:]
  -[VUIMetricsController _handleServerConfigChange:]
  -[VUIMetricsController baseFieldsForVPAF]
  -[VUIMetricsController currentTabIdentifier]
  -[VUIMetricsController recordLog:]
  -[VUIMetricsController getRecentEventsForDebuggerUI]
  -[VUIMetricsController setupMetricsController]
  -[VUIMetricsController _createMetricsKitForTopic:]
  -[VUIMetricsController _initializeBaseFields]
  -[VUIMetricsController registerForBaseFieldChanges]
  -[VUIMetricsController _recordEnter:]
  -[VUIMetricsController setCachedOpenUrlData:]
  -[VUIMetricsController cachedOpenUrlData]
  -[VUIMetricsController _recordEvent:withEventData:]
  -[VUIMetricsController _recordExit:]
  -[VUIMetricsController exitEventDestinationUrl]
  -[VUIMetricsController _flushMetricsOnExit]
  -[VUIMetricsController _flushUnreportedEvents:]
  -[VUIMetricsController activeMetricsKit]
  -[VUIMetricsController setLastRecordedPageEventData:]
  -[VUIMetricsController _createDataAddingBaseAndPageFieldsToEventData:]
  -[VUIMetricsController _saveRecentEvents:]
  -[VUIMetricsController shouldPostAppLaunchData]
  -[VUIMetricsController setShouldPostAppLaunchData:]
  -[VUIMetricsController _getLocationAuthorizationStatus]
  -[VUIMetricsController _handleTabBarChange:]
  -[VUIMetricsController _handleWLKSettingsDidChange:]
  -[VUIMetricsController _handleWLKAppLibChange:]
  -[VUIMetricsController _handleWLKLocationManagerChange:]
  -[VUIMetricsController _setGDPRConsentStatus:]
  -[VUIMetricsController _updateBaseFieldsWithData:]
  -[VUIMetricsController recordAppLaunched]
  -[VUIMetricsController recordAppBecameActive]
  -[VUIMetricsController recordOpenUrlLaunchWithExtURL:andOptions:]
  -[VUIMetricsController recordAppWillTerminate]
  -[VUIMetricsController recordAppWillBackground]
  -[VUIMetricsController jsDelegateRecordEvent:]
  -[VUIMetricsController jsDelegateRecordPerfEvent:]
  -[VUIMetricsController jsDelegateRecordLogEvent:]
  -[VUIMetricsController updateGDPRConsentStatus]
  -[VUIMetricsController flushMetrics]
  -[VUIMetricsController lastRecordedPageEventData]
  -[VUIMetricsController setActiveMetricsKit:]
  -[VUIMetricsController metricsKitMain]
  -[VUIMetricsController setMetricsKitMain:]
  -[VUIMetricsController loggerKit]
  -[VUIMetricsController setLoggerKit:]
  -[VUIMetricsController metricsKitUnidentified]
  -[VUIMetricsController setMetricsKitUnidentified:]
  -[VUIMetricsController perfMetricsKit]
  -[VUIMetricsController setPerfMetricsKit:]
  -[VUIMetricsController metricsDataDispatchSQ]
  -[VUIMetricsController setMetricsDataDispatchSQ:]
  -[VUIMetricsController savedRecentEvents]
  -[VUIMetricsController setSavedRecentEvents:]


VUIMPHomeShareMediaLibrary : VUIMPMediaLibrary <VUIHomeShareMediaLibrary>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIMPHomeShareMediaLibrary enqueueKeepAliveWithCompletion:]


VUIEpisodeDetailView : UIScrollView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUILibraryEpisodeFrameViewDelegate>
 @property  VUILibraryEpisodeFrameView *imageFrameView
 @property  VUILabel *episodeTitleLabel
 @property  VUILabel *seasonNumberLabel
 @property  VUILabel *episodeNumberLabel
 @property  VUILabel *releaseDateLabel
 @property  VUILabel *dotSeparatorLabel
 @property  VUIFocusableTextView *contentDescriptionView
 @property  UIFont *contentDescriptionFont
 @property  VUIMediaItem *mediaItem
 @property  VUIMediaTagsView *mediaBadgeTagsView
 @property  <VUIEpisodeDetailViewDelegate> *episodeViewDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIEpisodeDetailView configureEpisodeDetailView:withMedia:viewSize:]
  +[VUIEpisodeDetailView _episodeFrameImageSizeWithViewSize:]

  // instance methods
  -[VUIEpisodeDetailView .cxx_destruct]
  -[VUIEpisodeDetailView initWithFrame:]
  -[VUIEpisodeDetailView sizeThatFits:]
  -[VUIEpisodeDetailView layoutSubviews]
  -[VUIEpisodeDetailView mediaItem]
  -[VUIEpisodeDetailView setMediaItem:]
  -[VUIEpisodeDetailView imageFrameView]
  -[VUIEpisodeDetailView setImageFrameView:]
  -[VUIEpisodeDetailView _configureDotSeparator]
  -[VUIEpisodeDetailView releaseDateLabel]
  -[VUIEpisodeDetailView setReleaseDateLabel:]
  -[VUIEpisodeDetailView dotSeparatorLabel]
  -[VUIEpisodeDetailView setDotSeparatorLabel:]
  -[VUIEpisodeDetailView setEpisodeViewDelegate:]
  -[VUIEpisodeDetailView didTapButtonForEpisodeFrameView:]
  -[VUIEpisodeDetailView setMediaBadgeTagsView:]
  -[VUIEpisodeDetailView contentDescriptionFont]
  -[VUIEpisodeDetailView _descriptionTopMarginWithBaselineMargin:otherFont:]
  -[VUIEpisodeDetailView _descriptionBottomMarginWithBaselineMargin:]
  -[VUIEpisodeDetailView mediaBadgeTagsView]
  -[VUIEpisodeDetailView episodeTitleLabel]
  -[VUIEpisodeDetailView setEpisodeTitleLabel:]
  -[VUIEpisodeDetailView seasonNumberLabel]
  -[VUIEpisodeDetailView setSeasonNumberLabel:]
  -[VUIEpisodeDetailView episodeNumberLabel]
  -[VUIEpisodeDetailView setEpisodeNumberLabel:]
  -[VUIEpisodeDetailView contentDescriptionView]
  -[VUIEpisodeDetailView setContentDescriptionFont:]
  -[VUIEpisodeDetailView setContentDescriptionView:]
  -[VUIEpisodeDetailView episodeViewDelegate]


VUIConfirmationCardTemplateController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  NSTimer *dismissTimer
 @property  VUIConfirmationCardView *cardView

  // instance methods
  -[VUIConfirmationCardTemplateController dealloc]
  -[VUIConfirmationCardTemplateController .cxx_destruct]
  -[VUIConfirmationCardTemplateController loadView]
  -[VUIConfirmationCardTemplateController viewWillAppear:]
  -[VUIConfirmationCardTemplateController viewDidAppear:]
  -[VUIConfirmationCardTemplateController viewDidDisappear:]
  -[VUIConfirmationCardTemplateController _applicationDidEnterBackground:]
  -[VUIConfirmationCardTemplateController cardView]
  -[VUIConfirmationCardTemplateController viewElement]
  -[VUIConfirmationCardTemplateController setViewElement:]
  -[VUIConfirmationCardTemplateController _setupTimer]
  -[VUIConfirmationCardTemplateController updateWithViewElement:]
  -[VUIConfirmationCardTemplateController _dismissConfirmation:]
  -[VUIConfirmationCardTemplateController dismissTimer]


VideosExtrasShowcaseTemplateViewController : VideosExtrasTemplateViewController <VideosExtrasCarouselViewControllerDataSource, VideosExtrasCarouselViewControllerDelegate, VideosExtrasImageBrowserViewControllerDataSource, VideosExtrasNavigationAnimationControllerProvider, VideosExtrasZoomingImageInteractiveTransitionSource, VideosExtrasZoomingImageTransitionParticipant>
 @property  VideosExtrasZoomingImageTransitionController *activeZoomingImageInteractiveTransitionController
 @property  NSArray *bannerButtonElements
 @property  NSArray *carouselLockupElements
 @property  VideosExtrasCarouselViewController *carouselViewController
 @property  VideosExtrasImageBrowserViewController *imageBrowserViewController
 @property  NSDictionary *overriddenFullscreenImages
 @property  BOOL supportsOneupMode
 @property  unsigned long autohighlightIndex
 @property  IKShowcaseTemplate *templateElement
 @property  unsigned long indexOfVisibleItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasShowcaseTemplateViewController dealloc]
  -[VideosExtrasShowcaseTemplateViewController .cxx_destruct]
  -[VideosExtrasShowcaseTemplateViewController observeValueForKeyPath:ofObject:change:context:]
  -[VideosExtrasShowcaseTemplateViewController viewWillAppear:]
  -[VideosExtrasShowcaseTemplateViewController viewWillDisappear:]
  -[VideosExtrasShowcaseTemplateViewController viewDidLoad]
  -[VideosExtrasShowcaseTemplateViewController viewDidAppear:]
  -[VideosExtrasShowcaseTemplateViewController viewDidDisappear:]
  -[VideosExtrasShowcaseTemplateViewController carouselViewController]
  -[VideosExtrasShowcaseTemplateViewController setCarouselViewController:]
  -[VideosExtrasShowcaseTemplateViewController templateElement]
  -[VideosExtrasShowcaseTemplateViewController showsPlaceholder]
  -[VideosExtrasShowcaseTemplateViewController prepareZoomingImageTransitionWithContext:]
  -[VideosExtrasShowcaseTemplateViewController performZoomingImageTransitionWithContext:]
  -[VideosExtrasShowcaseTemplateViewController finalizeZoomingImageTransitionWithContext:transitionFinished:]
  -[VideosExtrasShowcaseTemplateViewController handlePinchGestureForZoomingImageInteractiveTransitionWithContext:]
  -[VideosExtrasShowcaseTemplateViewController _prepareLayout]
  -[VideosExtrasShowcaseTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasShowcaseTemplateViewController imageBrowserViewController:loadImageAtIndex:withCompletionHandler:]
  -[VideosExtrasShowcaseTemplateViewController imageBrowserViewController:loadTitleAtIndex:withCompletionHandler:]
  -[VideosExtrasShowcaseTemplateViewController imageBrowserViewController:loadSubtitleAtIndex:withCompletionHandler:]
  -[VideosExtrasShowcaseTemplateViewController imageBrowserViewController:loadDescriptionAtIndex:withCompletionHandler:]
  -[VideosExtrasShowcaseTemplateViewController numberOfImagesForBrowserViewController:]
  -[VideosExtrasShowcaseTemplateViewController indexOfVisibleItem]
  -[VideosExtrasShowcaseTemplateViewController carouselSize]
  -[VideosExtrasShowcaseTemplateViewController carouselViewController:configureCarouselCollectionViewCell:forItemAtIndex:withThumbnailImageContainerSize:]
  -[VideosExtrasShowcaseTemplateViewController carouselViewController:didHighlightItemAtIndex:]
  -[VideosExtrasShowcaseTemplateViewController carouselViewController:didSelectItemAtIndex:completionHandler:]
  -[VideosExtrasShowcaseTemplateViewController numberOfItemsInCarouselViewController:]
  -[VideosExtrasShowcaseTemplateViewController animationControllerForNavigationOperation:fromViewController:toViewController:]
  -[VideosExtrasShowcaseTemplateViewController setCarouselLockupElements:]
  -[VideosExtrasShowcaseTemplateViewController setSupportsOneupMode:]
  -[VideosExtrasShowcaseTemplateViewController setImageBrowserViewController:]
  -[VideosExtrasShowcaseTemplateViewController _mainChildViewController]
  -[VideosExtrasShowcaseTemplateViewController imageBrowserViewController]
  -[VideosExtrasShowcaseTemplateViewController setActiveZoomingImageInteractiveTransitionController:]
  -[VideosExtrasShowcaseTemplateViewController setOverriddenFullscreenImages:]
  -[VideosExtrasShowcaseTemplateViewController carouselLockupElements]
  -[VideosExtrasShowcaseTemplateViewController supportsOneupMode]
  -[VideosExtrasShowcaseTemplateViewController _pushImageBrowserWithVisibleItemIndex:]
  -[VideosExtrasShowcaseTemplateViewController overriddenFullscreenImages]
  -[VideosExtrasShowcaseTemplateViewController _loadTextElement:textAttributes:withCompletionHandler:]
  -[VideosExtrasShowcaseTemplateViewController activeZoomingImageInteractiveTransitionController]
  -[VideosExtrasShowcaseTemplateViewController bannerButtonElements]
  -[VideosExtrasShowcaseTemplateViewController setBannerButtonElements:]
  -[VideosExtrasShowcaseTemplateViewController autohighlightIndex]
  -[VideosExtrasShowcaseTemplateViewController setAutohighlightIndex:]


VUIRatingToResourceMapper : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *mappingDictionary

  // instance methods
  -[VUIRatingToResourceMapper init]
  -[VUIRatingToResourceMapper .cxx_destruct]
  -[VUIRatingToResourceMapper setMappingDictionary:]
  -[VUIRatingToResourceMapper mappingDictionary]
  -[VUIRatingToResourceMapper _cleanRatingName:]
  -[VUIRatingToResourceMapper resourceForRating:ratingSystem:]


VUIErrorView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIErrorLayout *layout
 @property  VUILabel *titleLabel
 @property  VUILabel *descriptionLabel
 @property  VUILabel *debugTextLabel
 @property  VUILabel *debugTextLabel2

  // instance methods
  -[VUIErrorView .cxx_destruct]
  -[VUIErrorView layout]
  -[VUIErrorView setLayout:]
  -[VUIErrorView titleLabel]
  -[VUIErrorView sizeThatFits:]
  -[VUIErrorView layoutSubviews]
  -[VUIErrorView setTitleLabel:]
  -[VUIErrorView setDescriptionLabel:]
  -[VUIErrorView descriptionLabel]
  -[VUIErrorView debugTextLabel]
  -[VUIErrorView setDebugTextLabel:]
  -[VUIErrorView setDebugTextLabel2:]
  -[VUIErrorView layoutSubviewsWithSize:computationOnly:]
  -[VUIErrorView debugTextLabel2]


VUIJSPPTInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIPPTDelegate>
  // instance methods
  -[VUIJSPPTInterface getStackScrollPage]
  -[VUIJSPPTInterface getSportsScrollPage]


VUIDownloadManager : NSObject /usr/lib/libSystem.B.dylib <TVPDownloadDelegate, TVPDownloadSessionDelegate>
 @property  NSMutableArray *mutableDownloads
 @property  NSMutableArray *failedDownloadsNeedingDialog
 @property  BOOL dialogBeingPresented
 @property  NSPointerArray *delegates
 @property  NSArray *downloads
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIDownloadManager sharedInstance]

  // instance methods
  -[VUIDownloadManager init]
  -[VUIDownloadManager dealloc]
  -[VUIDownloadManager .cxx_destruct]
  -[VUIDownloadManager addDelegate:]
  -[VUIDownloadManager removeDelegate:]
  -[VUIDownloadManager delegates]
  -[VUIDownloadManager setDelegates:]
  -[VUIDownloadManager downloads]
  -[VUIDownloadManager download:willDownloadToURL:]
  -[VUIDownloadManager download:didChangeStateTo:]
  -[VUIDownloadManager download:didReceiveTaskIdentifier:]
  -[VUIDownloadManager downloadSession:didAddRestoredDownloads:]
  -[VUIDownloadManager _activeAccountDidChange:]
  -[VUIDownloadManager initializeDownloadManager]
  -[VUIDownloadManager existingDownloadForCanonicalID:]
  -[VUIDownloadManager addDownloadForVideoManagedObject:]
  -[VUIDownloadManager cancelDownloadForCanonicalID:]
  -[VUIDownloadManager _isPlaybackUIBeingShownDidChange:]
  -[VUIDownloadManager mutableDownloads]
  -[VUIDownloadManager _notifyDelegatesThatDownloadsDidChange]
  -[VUIDownloadManager _loadImageForVideoManagedObject:imageType:]
  -[VUIDownloadManager _loadImageForSeriesManagedObject:imageType:]
  -[VUIDownloadManager failedDownloadsNeedingDialog]
  -[VUIDownloadManager dialogBeingPresented]
  -[VUIDownloadManager _showDownloadErrorDialogIfAppropriate]
  -[VUIDownloadManager _alertControllerForFailedDownloads:]
  -[VUIDownloadManager setDialogBeingPresented:]
  -[VUIDownloadManager _loadImageForImageInfoManagedObject:imageType:]
  -[VUIDownloadManager setMutableDownloads:]
  -[VUIDownloadManager setFailedDownloadsNeedingDialog:]


VUIMLFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMLFactory sharedInstance]
  +[VUIMLFactory _urlForStyleSheetName:]
  +[VUIMLFactory _registerElements]
  +[VUIMLFactory _registerStyles]
  +[VUIMLFactory _registerStylesheets]
  +[VUIMLFactory _registerIOStyleSheets]

  // instance methods
  -[VUIMLFactory init]
  -[VUIMLFactory imageForResource:]
  -[VUIMLFactory _styleSheetURLForTemplate:]
  -[VUIMLFactory viewForElement:existingView:]
  -[VUIMLFactory viewControllerForElement:existingViewController:]
  -[VUIMLFactory URLForResource:]
  -[VUIMLFactory collectionViewCellClassForElement:]
  -[VUIMLFactory parseAppConfigurationForElement:]
  -[VUIMLFactory imageProxyForElement:withLayout:]
  -[VUIMLFactory styleSheetURLForTemplate:]
  -[VUIMLFactory _URLForResource:inBundle:]
  -[VUIMLFactory navigationControllerForTabIdentifier:]


VUILibraryGridCollectionViewController : VUILibraryFetchControllerViewController <VUIMediaEntitiesFetchControllerDelegate, UICollectionViewDelegate, UICollectionViewDataSource, VUILocalContentProtocol>
 @property  VUIMediaEntityFetchRequest *fetchRequest
 @property  UICollectionView *collectionView
 @property  NSArray *totalResults
 @property  NSArray *genreGroupedResults
 @property  VUILibraryLockupViewCell *sizingCell
 @property  double cellWidth
 @property  UIBarButtonItem *currentNavBarButtonItem
 @property  <VUILibraryGridCollectionViewControllerDelegate> *delegate
 @property  long long gridFilter
 @property  long long gridStyle
 @property  long long gridType
 @property  BOOL hideLockupTitles
 @property  UIBarButtonItem *libraryBarButton
 @property  BOOL forceBackButton
 @property  NSString *pageType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL onlyShowLocalContent

  // instance methods
  -[VUILibraryGridCollectionViewController delegate]
  -[VUILibraryGridCollectionViewController setDelegate:]
  -[VUILibraryGridCollectionViewController .cxx_destruct]
  -[VUILibraryGridCollectionViewController fetchRequest]
  -[VUILibraryGridCollectionViewController traitCollectionDidChange:]
  -[VUILibraryGridCollectionViewController viewWillAppear:]
  -[VUILibraryGridCollectionViewController collectionView]
  -[VUILibraryGridCollectionViewController viewDidLoad]
  -[VUILibraryGridCollectionViewController viewWillLayoutSubviews]
  -[VUILibraryGridCollectionViewController numberOfSectionsInCollectionView:]
  -[VUILibraryGridCollectionViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryGridCollectionViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryGridCollectionViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibraryGridCollectionViewController viewDidLayoutSubviews]
  -[VUILibraryGridCollectionViewController viewDidAppear:]
  -[VUILibraryGridCollectionViewController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VUILibraryGridCollectionViewController setCollectionView:]
  -[VUILibraryGridCollectionViewController collectionView:didSelectItemAtIndexPath:]
  -[VUILibraryGridCollectionViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryGridCollectionViewController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VUILibraryGridCollectionViewController collectionView:layout:insetForSectionAtIndex:]
  -[VUILibraryGridCollectionViewController collectionView:layout:minimumLineSpacingForSectionAtIndex:]
  -[VUILibraryGridCollectionViewController _updateLayout]
  -[VUILibraryGridCollectionViewController setFetchRequest:]
  -[VUILibraryGridCollectionViewController pageType]
  -[VUILibraryGridCollectionViewController setPageType:]
  -[VUILibraryGridCollectionViewController sizingCell]
  -[VUILibraryGridCollectionViewController setSizingCell:]
  -[VUILibraryGridCollectionViewController gridType]
  -[VUILibraryGridCollectionViewController setTotalResults:]
  -[VUILibraryGridCollectionViewController totalResults]
  -[VUILibraryGridCollectionViewController setCellWidth:]
  -[VUILibraryGridCollectionViewController cellWidth]
  -[VUILibraryGridCollectionViewController _updateNavigationBarPadding]
  -[VUILibraryGridCollectionViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryGridCollectionViewController controller:fetchRequests:didFailWithError:]
  -[VUILibraryGridCollectionViewController updateWithLatestMediaEntities:andChangeSet:]
  -[VUILibraryGridCollectionViewController gridStyle]
  -[VUILibraryGridCollectionViewController _computeBottomMargin]
  -[VUILibraryGridCollectionViewController initWithMediaLibrary:mediaEntities:displaySortFilter:]
  -[VUILibraryGridCollectionViewController setTitle:withLargeTitleDisplayEnabled:]
  -[VUILibraryGridCollectionViewController setGridStyle:]
  -[VUILibraryGridCollectionViewController setGridType:]
  -[VUILibraryGridCollectionViewController updateWithLatestMediaEntities:]
  -[VUILibraryGridCollectionViewController setLibraryBarButton:]
  -[VUILibraryGridCollectionViewController setForceBackButton:]
  -[VUILibraryGridCollectionViewController libraryBarButton]
  -[VUILibraryGridCollectionViewController currentNavBarButtonItem]
  -[VUILibraryGridCollectionViewController setCurrentNavBarButtonItem:]
  -[VUILibraryGridCollectionViewController _updateWithMediaEntities:mediaEntitiesChangeSet:grouping:groupingChangeSet:]
  -[VUILibraryGridCollectionViewController _updateCurrentViewIfNeeded]
  -[VUILibraryGridCollectionViewController _getFilterTitleForEnum:]
  -[VUILibraryGridCollectionViewController _toggleSortFilter]
  -[VUILibraryGridCollectionViewController hideLockupTitles]
  -[VUILibraryGridCollectionViewController _configureSizingCellForItemAtIndexPath:]
  -[VUILibraryGridCollectionViewController initWithMediaLibrary:fetchRequest:displaySortFilter:]
  -[VUILibraryGridCollectionViewController gridFilter]
  -[VUILibraryGridCollectionViewController setGridFilter:]
  -[VUILibraryGridCollectionViewController setHideLockupTitles:]
  -[VUILibraryGridCollectionViewController forceBackButton]
  -[VUILibraryGridCollectionViewController genreGroupedResults]
  -[VUILibraryGridCollectionViewController setGenreGroupedResults:]


VUILibraryFetchControllerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUILocalContentProtocol>
 @property  VUIMediaLibrary *mediaLibrary
 @property  NSArray *fetchControllers
 @property  UIView *currentView
 @property  BOOL contentHasBeenDeleted
 @property  UIView *rootView
 @property  BOOL pausesFetchControllersAutomatically
 @property  unsigned long currentViewType
 @property  NSString *noContentErrorTitle
 @property  NSString *noContentErrorMessage
 @property  BOOL contentHasBeenManuallyDeleted
 @property  NSString *deletedContentErrorMessage
 @property  UIView *contentView
 @property  BOOL onlyShowLocalContent

  // instance methods
  -[VUILibraryFetchControllerViewController init]
  -[VUILibraryFetchControllerViewController initWithCoder:]
  -[VUILibraryFetchControllerViewController .cxx_destruct]
  -[VUILibraryFetchControllerViewController contentView]
  -[VUILibraryFetchControllerViewController setContentView:]
  -[VUILibraryFetchControllerViewController loadView]
  -[VUILibraryFetchControllerViewController initWithNibName:bundle:]
  -[VUILibraryFetchControllerViewController viewWillAppear:]
  -[VUILibraryFetchControllerViewController viewWillDisappear:]
  -[VUILibraryFetchControllerViewController viewWillLayoutSubviews]
  -[VUILibraryFetchControllerViewController rootView]
  -[VUILibraryFetchControllerViewController setRootView:]
  -[VUILibraryFetchControllerViewController mediaLibrary]
  -[VUILibraryFetchControllerViewController setMediaLibrary:]
  -[VUILibraryFetchControllerViewController currentView]
  -[VUILibraryFetchControllerViewController setCurrentView:]
  -[VUILibraryFetchControllerViewController onlyShowLocalContent]
  -[VUILibraryFetchControllerViewController setOnlyShowLocalContent:]
  -[VUILibraryFetchControllerViewController initWithMediaLibrary:]
  -[VUILibraryFetchControllerViewController setCurrentViewType:]
  -[VUILibraryFetchControllerViewController fetchControllers]
  -[VUILibraryFetchControllerViewController setFetchControllers:]
  -[VUILibraryFetchControllerViewController setNoContentErrorTitle:]
  -[VUILibraryFetchControllerViewController setDeletedContentErrorMessage:]
  -[VUILibraryFetchControllerViewController startFetchControllers:]
  -[VUILibraryFetchControllerViewController updateAfterContentWasManuallyDeleted:]
  -[VUILibraryFetchControllerViewController currentViewType]
  -[VUILibraryFetchControllerViewController setNoContentErrorMessage:]
  -[VUILibraryFetchControllerViewController noContentErrorTitle]
  -[VUILibraryFetchControllerViewController noContentErrorMessage]
  -[VUILibraryFetchControllerViewController _createAlertViewWithTitle:description:]
  -[VUILibraryFetchControllerViewController setContentHasBeenDeleted:]
  -[VUILibraryFetchControllerViewController setContentHasBeenManuallyDeleted:]
  -[VUILibraryFetchControllerViewController pausesFetchControllersAutomatically]
  -[VUILibraryFetchControllerViewController setPausesFetchControllersAutomatically:]
  -[VUILibraryFetchControllerViewController contentHasBeenDeleted]
  -[VUILibraryFetchControllerViewController contentHasBeenManuallyDeleted]
  -[VUILibraryFetchControllerViewController deletedContentErrorMessage]


VUIProductUberBackgroundView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  CAGradientLayer *maskGradientLayer
 @property  UIView *blurEffectView
 @property  double contentOffset
 @property  VUIProductUberBackgroundViewLayout *layout
 @property  _TVImageView *imageView

  // instance methods
  -[VUIProductUberBackgroundView .cxx_destruct]
  -[VUIProductUberBackgroundView layout]
  -[VUIProductUberBackgroundView setLayout:]
  -[VUIProductUberBackgroundView initWithFrame:]
  -[VUIProductUberBackgroundView layoutSubviews]
  -[VUIProductUberBackgroundView imageView]
  -[VUIProductUberBackgroundView contentOffset]
  -[VUIProductUberBackgroundView setContentOffset:]
  -[VUIProductUberBackgroundView setImageView:]
  -[VUIProductUberBackgroundView setBlurEffectView:]
  -[VUIProductUberBackgroundView blurEffectView]
  -[VUIProductUberBackgroundView setImageOffset:]
  -[VUIProductUberBackgroundView configureBlurWithInterfaceStyle:]
  -[VUIProductUberBackgroundView maskGradientLayer]
  -[VUIProductUberBackgroundView setMaskGradientLayer:]


VUIRoomBannerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIProductUberBackgroundInterface>
 @property  IKViewElement *viewElement
 @property  VUIRoomBannerView *bannerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isUberLayoutActive
 @property  {CGSize=dd} size
 @property  double topThreshold

  // instance methods
  -[VUIRoomBannerViewController .cxx_destruct]
  -[VUIRoomBannerViewController size]
  -[VUIRoomBannerViewController initWithNibName:bundle:]
  -[VUIRoomBannerViewController bannerView]
  -[VUIRoomBannerViewController setBannerView:]
  -[VUIRoomBannerViewController viewElement]
  -[VUIRoomBannerViewController setViewElement:]
  -[VUIRoomBannerViewController isUberLayoutActive]
  -[VUIRoomBannerViewController setUberImageOffset:]
  -[VUIRoomBannerViewController setBannerOpacity:]
  -[VUIRoomBannerViewController topThreshold]
  -[VUIRoomBannerViewController setWhiteBannerOpacity:]


VUIActionUpdateSportsFavorite : VUIAction
 @property  IKViewElement *viewElement
 @property  NSString *sportsLeagueID
 @property  NSString *sportsTeamName

  // instance methods
  -[VUIActionUpdateSportsFavorite .cxx_destruct]
  -[VUIActionUpdateSportsFavorite viewElement]
  -[VUIActionUpdateSportsFavorite setViewElement:]
  -[VUIActionUpdateSportsFavorite isAccountRequired]
  -[VUIActionUpdateSportsFavorite performWithTargetResponder:completionHandler:]
  -[VUIActionUpdateSportsFavorite initWithContextData:viewElement:]
  -[VUIActionUpdateSportsFavorite sportsLeagueID]
  -[VUIActionUpdateSportsFavorite setSportsLeagueID:]
  -[VUIActionUpdateSportsFavorite sportsTeamName]
  -[VUIActionUpdateSportsFavorite setSportsTeamName:]


VideosExtrasVideoTimelineEvent : NSObject /usr/lib/libSystem.B.dylib
 @property  VideosExtrasVideoTimelineEvent *next
 @property  BOOL isFirstEvent
 @property  double offset
 @property  double duration
 @property  NSString *title
 @property  NSString *subHeader
 @property  VideosExtrasVideoTimelineEvent *previous

  // instance methods
  -[VideosExtrasVideoTimelineEvent .cxx_destruct]
  -[VideosExtrasVideoTimelineEvent next]
  -[VideosExtrasVideoTimelineEvent previous]
  -[VideosExtrasVideoTimelineEvent title]
  -[VideosExtrasVideoTimelineEvent duration]
  -[VideosExtrasVideoTimelineEvent offset]
  -[VideosExtrasVideoTimelineEvent setNext:]
  -[VideosExtrasVideoTimelineEvent subHeader]
  -[VideosExtrasVideoTimelineEvent loadImage:]
  -[VideosExtrasVideoTimelineEvent initWithElement:prev:]
  -[VideosExtrasVideoTimelineEvent isFirstEvent]
  -[VideosExtrasVideoTimelineEvent setIsFirstEvent:]


VideosExtrasVideoTimeline : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *events

  // instance methods
  -[VideosExtrasVideoTimeline .cxx_destruct]
  -[VideosExtrasVideoTimeline events]
  -[VideosExtrasVideoTimeline initWithTimelineElements:]
  -[VideosExtrasVideoTimeline eventForTime:]


VUIAccountSettingsConnectedAppsViewController : PSListController /System/Library/PrivateFrameworks/AppleAccountUI.framework/AppleAccountUI
  // instance methods
  -[VUIAccountSettingsConnectedAppsViewController .cxx_destruct]
  -[VUIAccountSettingsConnectedAppsViewController viewDidLoad]
  -[VUIAccountSettingsConnectedAppsViewController _alertStyle]
  -[VUIAccountSettingsConnectedAppsViewController specifiers]
  -[VUIAccountSettingsConnectedAppsViewController _showPrivacySheet:]
  -[VUIAccountSettingsConnectedAppsViewController _appGroupSpecifier]
  -[VUIAccountSettingsConnectedAppsViewController _loadAppGroup]
  -[VUIAccountSettingsConnectedAppsViewController _addPrivacyFooterToGroup:]
  -[VUIAccountSettingsConnectedAppsViewController _toggleSpecifier:sender:]
  -[VUIAccountSettingsConnectedAppsViewController _accessStatusForSpecifier:]
  -[VUIAccountSettingsConnectedAppsViewController _stopAppSpinner]
  -[VUIAccountSettingsConnectedAppsViewController _promptToDisableChannel:withExternalID:]
  -[VUIAccountSettingsConnectedAppsViewController _showVppaExpiredPrompt:]
  -[VUIAccountSettingsConnectedAppsViewController _promptToEnableChannel:withExternalID:]
  -[VUIAccountSettingsConnectedAppsViewController _startAppSpinner]


VUILibraryViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUILibraryViewFactory viewControllerForMediaEntity:]
  +[VUILibraryViewFactory viewControllerForMediaEntity:onlyShowLocalContent:]
  +[VUILibraryViewFactory tvPlaceholderImage]
  +[VUILibraryViewFactory configureSeasonPickerCell:withMedia:traitCollection:]
  +[VUILibraryViewFactory moviePlaceholderImage]


VUIMLUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIMLUtilities gridStyleForCSSStyle:]
  +[VUIMLUtilities viewElementNeedsUpdate:]


VUICircularProgress : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  CAShapeLayer *indeterminateLayer
 @property  CAShapeLayer *centerLayer
 @property  CAShapeLayer *progressLayer
 @property  CAShapeLayer *progressBackgroundLayer
 @property  double progressWidth
 @property  double indeterminateWidth
 @property  BOOL indeterminate
 @property  UIColor *progressFillColor
 @property  double progress
 @property  double centerSquareWidth

  // instance methods
  -[VUICircularProgress dealloc]
  -[VUICircularProgress .cxx_destruct]
  -[VUICircularProgress progress]
  -[VUICircularProgress isIndeterminate]
  -[VUICircularProgress setIndeterminate:]
  -[VUICircularProgress setProgress:]
  -[VUICircularProgress initWithFrame:]
  -[VUICircularProgress sizeThatFits:]
  -[VUICircularProgress layoutSubviews]
  -[VUICircularProgress didMoveToWindow]
  -[VUICircularProgress _applicationWillEnterForeground:]
  -[VUICircularProgress _startIndeterminateAnimation]
  -[VUICircularProgress progressLayer]
  -[VUICircularProgress setProgressLayer:]
  -[VUICircularProgress _progressFrame]
  -[VUICircularProgress progressBackgroundLayer]
  -[VUICircularProgress _progressPath]
  -[VUICircularProgress centerSquareWidth]
  -[VUICircularProgress centerLayer]
  -[VUICircularProgress indeterminateLayer]
  -[VUICircularProgress indeterminateWidth]
  -[VUICircularProgress _indeterminatePath]
  -[VUICircularProgress _configureProgress:]
  -[VUICircularProgress _addProgressLayer]
  -[VUICircularProgress _addIndeterminateLayer]
  -[VUICircularProgress _removeProgressLayer]
  -[VUICircularProgress _removeIndeterminateLayer]
  -[VUICircularProgress progressWidth]
  -[VUICircularProgress progressFillColor]
  -[VUICircularProgress setCenterLayer:]
  -[VUICircularProgress setProgressBackgroundLayer:]
  -[VUICircularProgress setIndeterminateLayer:]
  -[VUICircularProgress setIndeterminateWidth:]
  -[VUICircularProgress setProgressFillColor:]
  -[VUICircularProgress setCenterSquareWidth:]
  -[VUICircularProgress setProgressWidth:]


VideosExtrasCarouselCollectionViewFlowLayout : UICollectionViewFlowLayout /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VideosExtrasCarouselCollectionViewLayout>
  // instance methods
  -[VideosExtrasCarouselCollectionViewFlowLayout itemWidth]
  -[VideosExtrasCarouselCollectionViewFlowLayout setIndexOfVisibleItem:animated:]
  -[VideosExtrasCarouselCollectionViewFlowLayout indexOfVisibleItem]
  -[VideosExtrasCarouselCollectionViewFlowLayout setIndexOfVisibleItem:]


VUILibraryProductLockupLayout : NSObject /usr/lib/libSystem.B.dylib <VUILibraryProductLockupViewLayout>
 @property  long long type
 @property  VUIMediaEntityType *entityType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryProductLockupLayout type]
  -[VUILibraryProductLockupLayout .cxx_destruct]
  -[VUILibraryProductLockupLayout entityType]
  -[VUILibraryProductLockupLayout layoutType]
  -[VUILibraryProductLockupLayout initWithLayoutType:entityType:]
  -[VUILibraryProductLockupLayout coverArtImageSize]
  -[VUILibraryProductLockupLayout contentDescriptionNumberOfLines]
  -[VUILibraryProductLockupLayout contentDescriptionFont]
  -[VUILibraryProductLockupLayout coverArtImageRightMargin]
  -[VUILibraryProductLockupLayout contentDescriptionTopMargin]
  -[VUILibraryProductLockupLayout buttonModuleTopMargin]
  -[VUILibraryProductLockupLayout subtitleTopMargin]
  -[VUILibraryProductLockupLayout contentDescriptionBottomMargin]
  -[VUILibraryProductLockupLayout metadataTopMargin]
  -[VUILibraryProductLockupLayout downloadButtonPosition]
  -[VUILibraryProductLockupLayout coverArtBottomPadding]
  -[VUILibraryProductLockupLayout titleTopMargin]
  -[VUILibraryProductLockupLayout shouldShowTitleLabel]


_VUILibrarySeeAllController : NSObject /usr/lib/libSystem.B.dylib
 @property  VUILibraryGridCollectionViewController *gridViewController
 @property  long long shelfType

  // instance methods
  -[_VUILibrarySeeAllController .cxx_destruct]
  -[_VUILibrarySeeAllController gridViewController]
  -[_VUILibrarySeeAllController setGridViewController:]
  -[_VUILibrarySeeAllController shelfType]
  -[_VUILibrarySeeAllController setShelfType:]


VUILibraryViewController : VUILibraryStackViewController <UICollectionViewDataSource, VUILibraryShelfCollectionViewControllerDelegate, VUIMediaItemEntityTypesFetchControllerDelegate, VUIMediaEntitiesFetchControllerDelegate, VUIMediaLibraryFetchControllerQueueDelegate, VUILibraryPopoverDataSource, VUILibraryPopoverDelegate, UIGestureRecognizerDelegate, VUIDownloadDataSourceDelegate>
 @property  BOOL appliedNavigationItem
 @property  UIBarButtonItem *libraryBarButton
 @property  BOOL hasMenuItemFetchCompleted
 @property  BOOL areLocalMediaItemsAvailable
 @property  NSArray *menuMediaItemEntityTypes
 @property  NSArray *menuCells
 @property  VUILibraryMenuItemViewCell *menuItemSizingCell
 @property  VUILibraryPopoverViewController *popoverViewController
 @property  NSArray *popoverDropdownCells
 @property  VUILibraryListPopoverViewCell *sizingPopoverCell
 @property  long long currentlySelectedPopoverCell
 @property  NSArray *homeShares
 @property  VUIMediaLibrary *currentHomeShareMediaLibrary
 @property  VUILibraryBannerCollectionViewCell *bannerViewSizingCell
 @property  VUILibraryMediaEntityShelvesViewModel *shelvesViewModel
 @property  BOOL hasMediaEntitiesFetchCompleted
 @property  NSDictionary *shelfTypeByFetchRequestIdentifier
 @property  _VUILibrarySeeAllController *currentSeeAllController
 @property  VUIMediaEntitiesFetchController *rentalsUpdateFetchController
 @property  VUIDownloadDataSource *downloadDataSource
 @property  BOOL hasDownloadFetchCompleted
 @property  BOOL doesDeviceSupportHDR
 @property  BOOL isIpad
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUILibraryViewController _localizedTitleForShelfType:]
  +[VUILibraryViewController shelfTypesSortComparator]

  // instance methods
  -[VUILibraryViewController dealloc]
  -[VUILibraryViewController .cxx_destruct]
  -[VUILibraryViewController start]
  -[VUILibraryViewController loadView]
  -[VUILibraryViewController traitCollectionDidChange:]
  -[VUILibraryViewController gestureRecognizerShouldBegin:]
  -[VUILibraryViewController viewWillAppear:]
  -[VUILibraryViewController viewDidLoad]
  -[VUILibraryViewController numberOfSectionsInCollectionView:]
  -[VUILibraryViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUILibraryViewController viewDidAppear:]
  -[VUILibraryViewController collectionView:didSelectItemAtIndexPath:]
  -[VUILibraryViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryViewController _networkReachabilityDidChange:]
  -[VUILibraryViewController downloadManager:downloadsDidChange:]
  -[VUILibraryViewController isIpad]
  -[VUILibraryViewController _accountsChanged:]
  -[VUILibraryViewController _updateNavigationTitle]
  -[VUILibraryViewController _reparentNavigationItem:]
  -[VUILibraryViewController appliedNavigationItem]
  -[VUILibraryViewController setAppliedNavigationItem:]
  -[VUILibraryViewController configureWithCollectionView:]
  -[VUILibraryViewController initWithMediaLibrary:]
  -[VUILibraryViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryViewController controller:fetchRequests:didFailWithError:]
  -[VUILibraryViewController _deviceMediaLibrary]
  -[VUILibraryViewController setHasMediaEntitiesFetchCompleted:]
  -[VUILibraryViewController setHomeShares:]
  -[VUILibraryViewController _addMediaLibraryNotificationObservers]
  -[VUILibraryViewController setDownloadDataSource:]
  -[VUILibraryViewController downloadDataSource]
  -[VUILibraryViewController _removeMediaLibraryNotificationObservers]
  -[VUILibraryViewController hasMediaEntitiesFetchCompleted]
  -[VUILibraryViewController _addNotificationObserversWithDeviceLibrary:]
  -[VUILibraryViewController _homeShareMediaLibrariesDidChange:]
  -[VUILibraryViewController _removeNotificationObserversWithDeviceLibrary:]
  -[VUILibraryViewController homeShares]
  -[VUILibraryViewController downloadManager:downloadedFetchDidFinishWithEntities:]
  -[VUILibraryViewController rentalsUpdateFetchController]
  -[VUILibraryViewController setRentalsUpdateFetchController:]
  -[VUILibraryViewController vui_ppt_isLoading]
  -[VUILibraryViewController popoverView:numberOfItemsInSection:]
  -[VUILibraryViewController numberOfSectionsInPopoverView:]
  -[VUILibraryViewController popoverView:cellForItemAtIndexPath:]
  -[VUILibraryViewController popoverView:sizeForItemAtIndexPath:]
  -[VUILibraryViewController popoverView:didSelectItemAtIndexPath:]
  -[VUILibraryViewController controller:fetchDidCompleteWithResult:]
  -[VUILibraryViewController controller:fetchDidFailWithError:]
  -[VUILibraryViewController fetchDidCompleteForMediaLibraryFetchControllerQueue:]
  -[VUILibraryViewController areLocalMediaItemsAvailable]
  -[VUILibraryViewController shelfCollectionViewController:collectionView:didSelectMediaEntity:atIndexPath:]
  -[VUILibraryViewController seeAllButtonPressed:]
  -[VUILibraryViewController menuItemSizingCell]
  -[VUILibraryViewController setMenuItemSizingCell:]
  -[VUILibraryViewController setAreLocalMediaItemsAvailable:]
  -[VUILibraryViewController _deviceMediaLibraryUpdateStateDidChange:]
  -[VUILibraryViewController _isDeviceMediaLibraryInitialUpdateInProgress]
  -[VUILibraryViewController _stopMonitoringDeviceMediaLibraryInitialUpdate]
  -[VUILibraryViewController _startMonitoringDeviceMediaLibraryInitialUpdate]
  -[VUILibraryViewController _removeRentalsUpdateNotificationObserver]
  -[VUILibraryViewController _addRentalsUpdateNotificationObserver]
  -[VUILibraryViewController _updateRentals]
  -[VUILibraryViewController currentHomeShareMediaLibrary]
  -[VUILibraryViewController setCurrentHomeShareMediaLibrary:]
  -[VUILibraryViewController setLibraryBarButton:]
  -[VUILibraryViewController libraryBarButton]
  -[VUILibraryViewController currentSeeAllController]
  -[VUILibraryViewController setCurrentSeeAllController:]
  -[VUILibraryViewController _showHomeVideosIfNoRecentlyAddedContent]
  -[VUILibraryViewController _updateViewIfFetchComplete]
  -[VUILibraryViewController shelvesViewModel]
  -[VUILibraryViewController _startFetchControllers]
  -[VUILibraryViewController _localizedTitleForCellType:]
  -[VUILibraryViewController _selectLibraryCellType:fromPopover:]
  -[VUILibraryViewController _menuItemsAndPopoverMenuItems:]
  -[VUILibraryViewController _reloadPopoverViewController]
  -[VUILibraryViewController _showContentOrNoContentView]
  -[VUILibraryViewController _configureShelfViewController:withShelfType:]
  -[VUILibraryViewController _popoverTitleForIndexPath:]
  -[VUILibraryViewController setHasDownloadFetchCompleted:]
  -[VUILibraryViewController _fetchRequestsWithMediaLibrary:shelfTypeMap:]
  -[VUILibraryViewController setShelfTypeByFetchRequestIdentifier:]
  -[VUILibraryViewController _haveAllInitialFetchesCompleted]
  -[VUILibraryViewController _constructLibraryDataSourceAndUpdateActiveView]
  -[VUILibraryViewController _shouldShowContentView]
  -[VUILibraryViewController _shouldAutomaticallySelectHomeVideos]
  -[VUILibraryViewController _leftNavigationButtonWithTitle:]
  -[VUILibraryViewController _libraryPopoverPressed]
  -[VUILibraryViewController _viewControllerWithCellType:forPopover:]
  -[VUILibraryViewController _updatePopoverStateWithCellType:]
  -[VUILibraryViewController _updatePopoverSelectedItem]
  -[VUILibraryViewController popoverViewController]
  -[VUILibraryViewController setHasMenuItemFetchCompleted:]
  -[VUILibraryViewController hasMenuItemFetchCompleted]
  -[VUILibraryViewController menuMediaItemEntityTypes]
  -[VUILibraryViewController setMenuMediaItemEntityTypes:]
  -[VUILibraryViewController menuCells]
  -[VUILibraryViewController setMenuCells:]
  -[VUILibraryViewController setPopoverViewController:]
  -[VUILibraryViewController popoverDropdownCells]
  -[VUILibraryViewController setPopoverDropdownCells:]
  -[VUILibraryViewController sizingPopoverCell]
  -[VUILibraryViewController setSizingPopoverCell:]
  -[VUILibraryViewController currentlySelectedPopoverCell]
  -[VUILibraryViewController setCurrentlySelectedPopoverCell:]
  -[VUILibraryViewController bannerViewSizingCell]
  -[VUILibraryViewController setBannerViewSizingCell:]
  -[VUILibraryViewController setShelvesViewModel:]
  -[VUILibraryViewController shelfTypeByFetchRequestIdentifier]
  -[VUILibraryViewController hasDownloadFetchCompleted]
  -[VUILibraryViewController doesDeviceSupportHDR]
  -[VUILibraryViewController setDoesDeviceSupportHDR:]
  -[VUILibraryViewController setIsIpad:]


VUIRentalCheckInContext : NSObject /usr/lib/libSystem.B.dylib
 @property  NSNumber *rentalID
 @property  NSNumber *dsid

  // instance methods
  -[VUIRentalCheckInContext isEqual:]
  -[VUIRentalCheckInContext .cxx_destruct]
  -[VUIRentalCheckInContext dsid]
  -[VUIRentalCheckInContext rentalID]
  -[VUIRentalCheckInContext initWithRentalID:dsid:]


VUIRentalManager : NSObject /usr/lib/libSystem.B.dylib <MPStoreDownloadManagerObserver>
 @property  BOOL needToSendPlaybackStartDatesToServer
 @property  NSMutableSet *rentalContextsNeedingCheckin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIRentalManager sharedInstance]

  // instance methods
  -[VUIRentalManager dealloc]
  -[VUIRentalManager .cxx_destruct]
  -[VUIRentalManager _init]
  -[VUIRentalManager downloadManager:downloadDidFinish:]
  -[VUIRentalManager _activeAccountDidChange:]
  -[VUIRentalManager _networkReachbilityDidChange:]
  -[VUIRentalManager checkOutRentalWithID:dsid:checkoutType:startPlaybackClock:completion:]
  -[VUIRentalManager checkInRentalWithID:dsid:completion:]
  -[VUIRentalManager _sendPlaybackStartDatesToServerIfNecessary]
  -[VUIRentalManager _checkInRentalsNeedingCheckInAtAppLaunch]
  -[VUIRentalManager _didFetchInitialDownloads:]
  -[VUIRentalManager setNeedToSendPlaybackStartDatesToServer:]
  -[VUIRentalManager rentalContextsNeedingCheckin]
  -[VUIRentalManager _checkInRentalsNeedingCheckIn]
  -[VUIRentalManager needToSendPlaybackStartDatesToServer]
  -[VUIRentalManager initializeRentals]
  -[VUIRentalManager setRentalContextsNeedingCheckin:]


VUISidebandMediaItem : VUIMediaItem <VUISidebandMediaEntityImageLoadParamsCreating>
 @property  VUIVideoManagedObject *videoManagedObject
 @property  VUISidebandMediaItemAssetController *assetController

  // instance methods
  -[VUISidebandMediaItem dealloc]
  -[VUISidebandMediaItem .cxx_destruct]
  -[VUISidebandMediaItem title]
  -[VUISidebandMediaItem duration]
  -[VUISidebandMediaItem isLocal]
  -[VUISidebandMediaItem storeID]
  -[VUISidebandMediaItem isPlayable]
  -[VUISidebandMediaItem addedDate]
  -[VUISidebandMediaItem showTitle]
  -[VUISidebandMediaItem releaseDate]
  -[VUISidebandMediaItem seasonNumber]
  -[VUISidebandMediaItem genreTitle]
  -[VUISidebandMediaItem episodeNumber]
  -[VUISidebandMediaItem canonicalID]
  -[VUISidebandMediaItem assetController]
  -[VUISidebandMediaItem setAssetController:]
  -[VUISidebandMediaItem HLSColorCapability]
  -[VUISidebandMediaItem colorCapability]
  -[VUISidebandMediaItem showIdentifier]
  -[VUISidebandMediaItem imageLoadParamsWithImageType:]
  -[VUISidebandMediaItem seasonTitle]
  -[VUISidebandMediaItem initWithMediaLibrary:videoManagedObject:requestedProperties:]
  -[VUISidebandMediaItem downloadExpirationDate]
  -[VUISidebandMediaItem seasonIdentifier]
  -[VUISidebandMediaItem _videoManagedObjectPlaybackExpirationWillChange:]
  -[VUISidebandMediaItem videoManagedObject]
  -[VUISidebandMediaItem setVideoManagedObject:]


VUIDebugViewDefaults : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *title
 @property  NSString *subtitle
 @property  NSString *domain
 @property  NSString *defaultName
 @property  BOOL defaultBoolValue
 @property  BOOL integerValueType
 @property  unsigned long defaultIntegerValue

  // instance methods
  -[VUIDebugViewDefaults domain]
  -[VUIDebugViewDefaults .cxx_destruct]
  -[VUIDebugViewDefaults title]
  -[VUIDebugViewDefaults subtitle]
  -[VUIDebugViewDefaults defaultName]
  -[VUIDebugViewDefaults integerValueType]
  -[VUIDebugViewDefaults defaultIntegerValue]
  -[VUIDebugViewDefaults defaultBoolValue]
  -[VUIDebugViewDefaults toggleDefaultBoolValue]
  -[VUIDebugViewDefaults setDefaultIntegerValue:]
  -[VUIDebugViewDefaults initWithTitle:subtitle:domain:defaultName:boolType:]
  -[VUIDebugViewDefaults setDefaultBoolValue:]
  -[VUIDebugViewDefaults setIntegerValueType:]


VUIDebugViewDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *defaultsDataSource

  // instance methods
  -[VUIDebugViewDataSource init]
  -[VUIDebugViewDataSource .cxx_destruct]
  -[VUIDebugViewDataSource defaultsDataSource]
  -[VUIDebugViewDataSource _createDefaultsDataSource]
  -[VUIDebugViewDataSource setDefaultsDataSource:]


VUIImageLoadParamsOperation : VUIAsynchronousOperation /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox <VUIImageLoadingOperation>
 @property  <VUIImageLoadParams> *params
 @property  {CGSize=dd} scaleToSize
 @property  BOOL cropToFit
 @property  TVImage *image
 @property  unsigned long scalingResult
 @property  NSError *error
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIImageLoadParamsOperation init]
  -[VUIImageLoadParamsOperation .cxx_destruct]
  -[VUIImageLoadParamsOperation error]
  -[VUIImageLoadParamsOperation setError:]
  -[VUIImageLoadParamsOperation image]
  -[VUIImageLoadParamsOperation setImage:]
  -[VUIImageLoadParamsOperation params]
  -[VUIImageLoadParamsOperation setParams:]
  -[VUIImageLoadParamsOperation scaleToSize]
  -[VUIImageLoadParamsOperation cropToFit]
  -[VUIImageLoadParamsOperation setCropToFit:]
  -[VUIImageLoadParamsOperation setScaleToSize:]
  -[VUIImageLoadParamsOperation initWithParams:scaleToSize:cropToFit:]
  -[VUIImageLoadParamsOperation setScalingResult:]
  -[VUIImageLoadParamsOperation scalingResult]


VUIApplicationController : TVApplicationController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <IKAppContextDelegatePrivate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIApplicationController appContext:scriptForURL:cachePolicy:completion:]


VUIStoreAcquisitionProperties : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *buyParams
 @property  NSString *urlBagKey
 @property  NSString *userAgent
 @property  NSNumber *dsid
 @property  NSString *strongToken
 @property  BOOL ignoresForcedPasswordRestriction

  // class methods
  +[VUIStoreAcquisitionProperties metricsAugumentedBuyParamsWithBuyParams:]
  +[VUIStoreAcquisitionProperties acquisitionPropertiesWithBuyParams:urlbagKey:]

  // instance methods
  -[VUIStoreAcquisitionProperties init]
  -[VUIStoreAcquisitionProperties copyWithZone:]
  -[VUIStoreAcquisitionProperties .cxx_destruct]
  -[VUIStoreAcquisitionProperties dsid]
  -[VUIStoreAcquisitionProperties setDsid:]
  -[VUIStoreAcquisitionProperties buyParams]
  -[VUIStoreAcquisitionProperties setBuyParams:]
  -[VUIStoreAcquisitionProperties userAgent]
  -[VUIStoreAcquisitionProperties setUserAgent:]
  -[VUIStoreAcquisitionProperties setIgnoresForcedPasswordRestriction:]
  -[VUIStoreAcquisitionProperties ignoresForcedPasswordRestriction]
  -[VUIStoreAcquisitionProperties urlBagKey]
  -[VUIStoreAcquisitionProperties setUrlBagKey:]
  -[VUIStoreAcquisitionProperties setStrongToken:]
  -[VUIStoreAcquisitionProperties strongToken]


VUIMediaEntity : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIMediaLibrary *mediaLibrary
 @property  NSObject<VUIMediaEntityIdentifierInternal> *identifierInternal
 @property  NSMutableDictionary *firstAccessPropertiesCache
 @property  BOOL cachesPropertiesOnFirstAccess
 @property  VUIMediaEntityKind *kind
 @property  NSSet *requestedProperties
 @property  NSString *sortTitle
 @property  VUIMediaEntityType *type
 @property  NSObject<VUIMediaEntityIdentifier> *identifier
 @property  NSNumber *isLocal
 @property  NSString *title
 @property  NSString *genreTitle
 @property  NSString *contentDescription
 @property  NSNumber *resolution
 @property  NSNumber *colorCapability
 @property  NSNumber *audioCapability
 @property  NSNumber *HLSResolution
 @property  NSNumber *HLSColorCapability
 @property  NSNumber *HLSAudioCapability
 @property  NSDate *addedDate
 @property  NSDate *releaseDate
 @property  NSNumber *releaseYear
 @property  _TVContentRating *contentRating
 @property  NSString *coverArtImageIdentifier
 @property  NSNumber *storeID
 @property  NSNumber *purchaseHistoryID
 @property  NSNumber *playedState
 @property  NSString *canonicalID
 @property  NSObject<VUIMediaEntityIdentifier> *showIdentifier
 @property  NSString *showTitle
 @property  NSNumber *seasonNumber
 @property  BOOL localChanges

  // instance methods
  -[VUIMediaEntity init]
  -[VUIMediaEntity isEqual:]
  -[VUIMediaEntity type]
  -[VUIMediaEntity .cxx_destruct]
  -[VUIMediaEntity identifier]
  -[VUIMediaEntity title]
  -[VUIMediaEntity kind]
  -[VUIMediaEntity contentDescription]
  -[VUIMediaEntity isLocal]
  -[VUIMediaEntity storeID]
  -[VUIMediaEntity resolution]
  -[VUIMediaEntity addedDate]
  -[VUIMediaEntity showTitle]
  -[VUIMediaEntity releaseDate]
  -[VUIMediaEntity seasonNumber]
  -[VUIMediaEntity mediaLibrary]
  -[VUIMediaEntity setMediaLibrary:]
  -[VUIMediaEntity genreTitle]
  -[VUIMediaEntity requestedProperties]
  -[VUIMediaEntity contentRating]
  -[VUIMediaEntity releaseYear]
  -[VUIMediaEntity sortTitle]
  -[VUIMediaEntity hasLocalChanges]
  -[VUIMediaEntity setIdentifierInternal:]
  -[VUIMediaEntity _propertyValueForKey:]
  -[VUIMediaEntity purchaseHistoryID]
  -[VUIMediaEntity canonicalID]
  -[VUIMediaEntity assetController]
  -[VUIMediaEntity populateMetadata]
  -[VUIMediaEntity isFetchedPropertiesEqualToFetchedMediaEntity:]
  -[VUIMediaEntity HLSResolution]
  -[VUIMediaEntity HLSColorCapability]
  -[VUIMediaEntity colorCapability]
  -[VUIMediaEntity HLSAudioCapability]
  -[VUIMediaEntity audioCapability]
  -[VUIMediaEntity _propertyValueWithBlock:forKey:]
  -[VUIMediaEntity showIdentifier]
  -[VUIMediaEntity playedState]
  -[VUIMediaEntity initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIMediaEntity coverArtImageIdentifier]
  -[VUIMediaEntity _valueForPropertyDescriptor:]
  -[VUIMediaEntity setCachesPropertiesOnFirstAccess:]
  -[VUIMediaEntity setLocalChanges:]
  -[VUIMediaEntity identifierInternal]
  -[VUIMediaEntity firstAccessPropertiesCache]
  -[VUIMediaEntity _defaultValueForPropertyDescriptor:]
  -[VUIMediaEntity cachesPropertiesOnFirstAccess]
  -[VUIMediaEntity setPlayedState:]
  -[VUIMediaEntity _didRequestPropertyWithKey:]
  -[VUIMediaEntity setFirstAccessPropertiesCache:]


VUIOfferUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIOfferUtilities registerDeviceForCommerceOffers]
  +[VUIOfferUtilities fetchAndPresentOffer:sourceEvent:]
  +[VUIOfferUtilities _handleOfferDataSource:appContext:]


VUIContextMenuCardView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIContextMenuCardViewLayout *layout
 @property  VUILabel *titleTextView
 @property  VUILabel *subtitleTextView
 @property  _TVImageView *badgeView
 @property  _TVImageView *coverImageView

  // class methods
  +[VUIContextMenuCardView configureViewWithElement:existingView:]

  // instance methods
  -[VUIContextMenuCardView .cxx_destruct]
  -[VUIContextMenuCardView layout]
  -[VUIContextMenuCardView setLayout:]
  -[VUIContextMenuCardView sizeThatFits:]
  -[VUIContextMenuCardView layoutSubviews]
  -[VUIContextMenuCardView setSemanticContentAttribute:]
  -[VUIContextMenuCardView badgeView]
  -[VUIContextMenuCardView setBadgeView:]
  -[VUIContextMenuCardView titleTextView]
  -[VUIContextMenuCardView setTitleTextView:]
  -[VUIContextMenuCardView _iOS_layoutSubviewsWithSize:computationOnly:]
  -[VUIContextMenuCardView subtitleTextView]
  -[VUIContextMenuCardView setSubtitleTextView:]
  -[VUIContextMenuCardView coverImageView]
  -[VUIContextMenuCardView setCoverImageView:]


VUIImageProxyAnimator : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long displayImageIndex
 @property  unsigned long indexOfFetchedImage
 @property  _TVImageView *imageView
 @property  NSTimer *transitionTimer
 @property  BOOL animating
 @property  BOOL cachingEnabled
 @property  NSArray *imageProxies
 @property  unsigned long animationOptions
 @property  double animationDuration
 @property  double transitionInterval

  // instance methods
  -[VUIImageProxyAnimator init]
  -[VUIImageProxyAnimator .cxx_destruct]
  -[VUIImageProxyAnimator imageView]
  -[VUIImageProxyAnimator isAnimating]
  -[VUIImageProxyAnimator startAnimation]
  -[VUIImageProxyAnimator stopAnimation]
  -[VUIImageProxyAnimator animationDuration]
  -[VUIImageProxyAnimator setAnimationDuration:]
  -[VUIImageProxyAnimator setAnimating:]
  -[VUIImageProxyAnimator animationOptions]
  -[VUIImageProxyAnimator setAnimationOptions:]
  -[VUIImageProxyAnimator setImageView:]
  -[VUIImageProxyAnimator isCachingEnabled]
  -[VUIImageProxyAnimator transitionInterval]
  -[VUIImageProxyAnimator setCachingEnabled:]
  -[VUIImageProxyAnimator _setImage:animated:]
  -[VUIImageProxyAnimator transitionTimer]
  -[VUIImageProxyAnimator setTransitionTimer:]
  -[VUIImageProxyAnimator setImageProxies:]
  -[VUIImageProxyAnimator imageProxies]
  -[VUIImageProxyAnimator setTransitionInterval:]
  -[VUIImageProxyAnimator initWithImageView:andProxies:]
  -[VUIImageProxyAnimator _fetchNext]
  -[VUIImageProxyAnimator _displayIntervalTimerFired:]
  -[VUIImageProxyAnimator setDisplayImageIndex:]
  -[VUIImageProxyAnimator _updateImageWithIndex:]
  -[VUIImageProxyAnimator loadImageProxy:withWeakObject:completionHandler:]
  -[VUIImageProxyAnimator indexOfFetchedImage]
  -[VUIImageProxyAnimator setIndexOfFetchedImage:]
  -[VUIImageProxyAnimator displayImageIndex]


VUINowPlayingUserTriggeredFeature : NSObject /usr/lib/libSystem.B.dylib <VUINowPlayingUserTriggeredFeature>
 @property  unsigned long type
 @property  BOOL active
 @property  BOOL autoRemove
 @property  id userInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINowPlayingUserTriggeredFeature init]
  -[VUINowPlayingUserTriggeredFeature isEqual:]
  -[VUINowPlayingUserTriggeredFeature type]
  -[VUINowPlayingUserTriggeredFeature setType:]
  -[VUINowPlayingUserTriggeredFeature userInfo]
  -[VUINowPlayingUserTriggeredFeature .cxx_destruct]
  -[VUINowPlayingUserTriggeredFeature isActive]
  -[VUINowPlayingUserTriggeredFeature setUserInfo:]
  -[VUINowPlayingUserTriggeredFeature setActive:]
  -[VUINowPlayingUserTriggeredFeature initWithType:]
  -[VUINowPlayingUserTriggeredFeature shouldAutoRemove]
  -[VUINowPlayingUserTriggeredFeature setAutoRemove:]


VUINowPlayingTimeBoundFeature : NSObject /usr/lib/libSystem.B.dylib <VUINowPlayingTimeBoundFeature>
 @property  unsigned long type
 @property  BOOL active
 @property  BOOL autoRemove
 @property  double startTime
 @property  double duration
 @property  BOOL skippable
 @property  id userInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINowPlayingTimeBoundFeature init]
  -[VUINowPlayingTimeBoundFeature isEqual:]
  -[VUINowPlayingTimeBoundFeature type]
  -[VUINowPlayingTimeBoundFeature setType:]
  -[VUINowPlayingTimeBoundFeature userInfo]
  -[VUINowPlayingTimeBoundFeature .cxx_destruct]
  -[VUINowPlayingTimeBoundFeature isActive]
  -[VUINowPlayingTimeBoundFeature setUserInfo:]
  -[VUINowPlayingTimeBoundFeature setActive:]
  -[VUINowPlayingTimeBoundFeature duration]
  -[VUINowPlayingTimeBoundFeature startTime]
  -[VUINowPlayingTimeBoundFeature setStartTime:]
  -[VUINowPlayingTimeBoundFeature isSkippable]
  -[VUINowPlayingTimeBoundFeature setSkippable:]
  -[VUINowPlayingTimeBoundFeature shouldAutoRemove]
  -[VUINowPlayingTimeBoundFeature setAutoRemove:]
  -[VUINowPlayingTimeBoundFeature initWithType:startTime:duration:]


VUINowPlayingHybridFeature : NSObject /usr/lib/libSystem.B.dylib <VUINowPlayingHybridFeature>
 @property  unsigned long type
 @property  BOOL active
 @property  BOOL autoRemove
 @property  double startTime
 @property  double duration
 @property  BOOL skippable
 @property  unsigned long activationType
 @property  id userInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINowPlayingHybridFeature init]
  -[VUINowPlayingHybridFeature isEqual:]
  -[VUINowPlayingHybridFeature type]
  -[VUINowPlayingHybridFeature setType:]
  -[VUINowPlayingHybridFeature userInfo]
  -[VUINowPlayingHybridFeature .cxx_destruct]
  -[VUINowPlayingHybridFeature isActive]
  -[VUINowPlayingHybridFeature setUserInfo:]
  -[VUINowPlayingHybridFeature setActive:]
  -[VUINowPlayingHybridFeature duration]
  -[VUINowPlayingHybridFeature startTime]
  -[VUINowPlayingHybridFeature setStartTime:]
  -[VUINowPlayingHybridFeature activationType]
  -[VUINowPlayingHybridFeature setActivationType:]
  -[VUINowPlayingHybridFeature isSkippable]
  -[VUINowPlayingHybridFeature setSkippable:]
  -[VUINowPlayingHybridFeature shouldAutoRemove]
  -[VUINowPlayingHybridFeature setAutoRemove:]
  -[VUINowPlayingHybridFeature initWithType:startTime:duration:]


VUINowPlayingTVAdvisoryFeature : VUINowPlayingTimeBoundFeature <VUINowPlayingTVAdvisoryFeature>
 @property  NSArray *advisoryDisabledTimeRanges
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long type
 @property  BOOL active
 @property  BOOL autoRemove
 @property  id userInfo
 @property  double startTime
 @property  double duration
 @property  BOOL skippable

  // instance methods
  -[VUINowPlayingTVAdvisoryFeature isEqual:]
  -[VUINowPlayingTVAdvisoryFeature .cxx_destruct]
  -[VUINowPlayingTVAdvisoryFeature isSkippable]
  -[VUINowPlayingTVAdvisoryFeature initWithType:startTime:duration:]
  -[VUINowPlayingTVAdvisoryFeature setAdvisoryDisabledTimeRanges:]
  -[VUINowPlayingTVAdvisoryFeature advisoryDisabledTimeRanges]


VUINowPlayingTimerTriggeredFeature : NSObject /usr/lib/libSystem.B.dylib <VUINowPlayingFeature>
 @property  unsigned long type
 @property  double duration
 @property  BOOL active
 @property  BOOL autoRemove
 @property  BOOL repeats
 @property  id userInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUINowPlayingTimerTriggeredFeature isEqual:]
  -[VUINowPlayingTimerTriggeredFeature type]
  -[VUINowPlayingTimerTriggeredFeature setType:]
  -[VUINowPlayingTimerTriggeredFeature userInfo]
  -[VUINowPlayingTimerTriggeredFeature .cxx_destruct]
  -[VUINowPlayingTimerTriggeredFeature isActive]
  -[VUINowPlayingTimerTriggeredFeature repeats]
  -[VUINowPlayingTimerTriggeredFeature setUserInfo:]
  -[VUINowPlayingTimerTriggeredFeature setActive:]
  -[VUINowPlayingTimerTriggeredFeature duration]
  -[VUINowPlayingTimerTriggeredFeature shouldAutoRemove]
  -[VUINowPlayingTimerTriggeredFeature setAutoRemove:]
  -[VUINowPlayingTimerTriggeredFeature initWithType:duration:repeats:]


VUICardViewLayoutFactory : NSObject /usr/lib/libSystem.B.dylib
 @property  long long cardLayoutType
 @property  long long gridStyle
 @property  long long gridType

  // class methods
  +[VUICardViewLayoutFactory cardViewFactoryForType:gridStyle:gridType:]

  // instance methods
  -[VUICardViewLayoutFactory .cxx_destruct]
  -[VUICardViewLayoutFactory activeLayout]
  -[VUICardViewLayoutFactory gridType]
  -[VUICardViewLayoutFactory cardLayoutType]
  -[VUICardViewLayoutFactory gridStyle]
  -[VUICardViewLayoutFactory initWithCardLayoutType:gridStyle:gridType:]
  -[VUICardViewLayoutFactory _layoutForCardLayoutType:interfaceIdiom:]
  -[VUICardViewLayoutFactory featuredCardViewLayoutForIdiom:]
  -[VUICardViewLayoutFactory upnextCardViewLayoutForIdiom:]
  -[VUICardViewLayoutFactory standardCardViewLayoutForIdiom:]
  -[VUICardViewLayoutFactory editorialCardViewLayout]
  -[VUICardViewLayoutFactory videoLockupCardViewLayout]
  -[VUICardViewLayoutFactory shadowForCardImageLayout]


VUICardViewLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL hideFloatingBackground
 @property  NSShadow *shadow
 @property  {TVCornerRadii=dddd} borderRadii
 @property  UIColor *backgroundColor
 @property  UIColor *darkBackgroundColor
 @property  UIColor *highlightColor
 @property  UIColor *darkHighlightColor
 @property  long long imagePosition
 @property  TVImageLayout *imageLayout
 @property  VUITextLayout *secondaryTextLayout
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *subtitleTextLayout
 @property  TVImageLayout *appImageLayout
 @property  VUIButtonLayout *buttonLayout

  // class methods
  +[VUICardViewLayout cardHeightForElementType:width:]
  +[VUICardViewLayout cardHeightForElementType:]

  // instance methods
  -[VUICardViewLayout init]
  -[VUICardViewLayout .cxx_destruct]
  -[VUICardViewLayout shadow]
  -[VUICardViewLayout backgroundColor]
  -[VUICardViewLayout setBackgroundColor:]
  -[VUICardViewLayout highlightColor]
  -[VUICardViewLayout setHighlightColor:]
  -[VUICardViewLayout setShadow:]
  -[VUICardViewLayout borderRadii]
  -[VUICardViewLayout imagePosition]
  -[VUICardViewLayout setImagePosition:]
  -[VUICardViewLayout imageLayout]
  -[VUICardViewLayout setDarkBackgroundColor:]
  -[VUICardViewLayout darkBackgroundColor]
  -[VUICardViewLayout setBorderRadii:]
  -[VUICardViewLayout titleTextLayout]
  -[VUICardViewLayout setImageLayout:]
  -[VUICardViewLayout appImageLayout]
  -[VUICardViewLayout subtitleTextLayout]
  -[VUICardViewLayout setDarkHighlightColor:]
  -[VUICardViewLayout darkHighlightColor]
  -[VUICardViewLayout setTitleTextLayout:]
  -[VUICardViewLayout setSubtitleTextLayout:]
  -[VUICardViewLayout setAppImageLayout:]
  -[VUICardViewLayout secondaryTextLayout]
  -[VUICardViewLayout buttonLayout]
  -[VUICardViewLayout hideFloatingBackground]
  -[VUICardViewLayout setButtonLayout:]
  -[VUICardViewLayout setSecondaryTextLayout:]
  -[VUICardViewLayout setHideFloatingBackground:]


VUICardViewLayoutRecord : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  long long layoutType
 @property  long long gridStyle
 @property  long long gridType

  // instance methods
  -[VUICardViewLayoutRecord isEqual:]
  -[VUICardViewLayoutRecord copyWithZone:]
  -[VUICardViewLayoutRecord layoutType]
  -[VUICardViewLayoutRecord setLayoutType:]
  -[VUICardViewLayoutRecord gridType]
  -[VUICardViewLayoutRecord gridStyle]
  -[VUICardViewLayoutRecord setGridStyle:]
  -[VUICardViewLayoutRecord setGridType:]


VUIJSFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIJSFactory exposeObjectsInJSContext:]


VUIContextActionActivity : UIActivity /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  NSString *activityTypeName
 @property  NSString *title
 @property  UIImage *resourceImage

  // class methods
  +[VUIContextActionActivity activityCategory]
  +[VUIContextActionActivity configureViewElement:]

  // instance methods
  -[VUIContextActionActivity .cxx_destruct]
  -[VUIContextActionActivity title]
  -[VUIContextActionActivity setTitle:]
  -[VUIContextActionActivity activityType]
  -[VUIContextActionActivity activityTitle]
  -[VUIContextActionActivity canPerformWithActivityItems:]
  -[VUIContextActionActivity activityImage]
  -[VUIContextActionActivity performActivity]
  -[VUIContextActionActivity viewElement]
  -[VUIContextActionActivity setViewElement:]
  -[VUIContextActionActivity resourceImage]
  -[VUIContextActionActivity setResourceImage:]
  -[VUIContextActionActivity setActivityTypeName:]
  -[VUIContextActionActivity activityTypeName]


VideosExtrasTableView : UITableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasTableView touchesBegan:withEvent:]


VideosExtrasListTemplateViewController : VideosExtrasTemplateViewController <UITableViewDataSource, UITableViewDelegate>
 @property  VideosExtrasViewElementViewController *relatedContentViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideosExtrasListTemplateViewController relatedContentViewControllerForElement:]

  // instance methods
  -[VideosExtrasListTemplateViewController dealloc]
  -[VideosExtrasListTemplateViewController .cxx_destruct]
  -[VideosExtrasListTemplateViewController viewDidLoad]
  -[VideosExtrasListTemplateViewController tableView:numberOfRowsInSection:]
  -[VideosExtrasListTemplateViewController tableView:cellForRowAtIndexPath:]
  -[VideosExtrasListTemplateViewController numberOfSectionsInTableView:]
  -[VideosExtrasListTemplateViewController tableView:willDisplayCell:forRowAtIndexPath:]
  -[VideosExtrasListTemplateViewController tableView:heightForHeaderInSection:]
  -[VideosExtrasListTemplateViewController tableView:viewForHeaderInSection:]
  -[VideosExtrasListTemplateViewController tableView:didHighlightRowAtIndexPath:]
  -[VideosExtrasListTemplateViewController tableView:didSelectRowAtIndexPath:]
  -[VideosExtrasListTemplateViewController templateElement]
  -[VideosExtrasListTemplateViewController showsPlaceholder]
  -[VideosExtrasListTemplateViewController _prepareLayout]
  -[VideosExtrasListTemplateViewController shouldUpdateByReplacingViewControllerWithTemplate:]
  -[VideosExtrasListTemplateViewController initWithDocument:options:context:]
  -[VideosExtrasListTemplateViewController _configureBannerWithElement:]
  -[VideosExtrasListTemplateViewController setRelatedContentViewController:]
  -[VideosExtrasListTemplateViewController _updateForTemplate:]
  -[VideosExtrasListTemplateViewController _updateRelatedContent:forListItem:]
  -[VideosExtrasListTemplateViewController relatedContentViewController]
  -[VideosExtrasListTemplateViewController _embedRelatedContentViewController]
  -[VideosExtrasListTemplateViewController _unembedRelatedContent]
  -[VideosExtrasListTemplateViewController _pushRelatedViewController:animated:]
  -[VideosExtrasListTemplateViewController _setDetailContraints]
  -[VideosExtrasListTemplateViewController _setRelatedContentEmbedded:]
  -[VideosExtrasListTemplateViewController _addConstraintsToTableView:]
  -[VideosExtrasListTemplateViewController _configureVignette:]
  -[VideosExtrasListTemplateViewController _setNavigationConstraints]


VideosExtrasPresentationController : UIPresentationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *extrasMenuBarView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} extrasMenuBarFrame

  // instance methods
  -[VideosExtrasPresentationController .cxx_destruct]
  -[VideosExtrasPresentationController presentationTransitionWillBegin]
  -[VideosExtrasPresentationController dismissalTransitionWillBegin]
  -[VideosExtrasPresentationController dismissalTransitionDidEnd:]
  -[VideosExtrasPresentationController presentationTransitionDidEnd:]
  -[VideosExtrasPresentationController extrasMenuBarView]
  -[VideosExtrasPresentationController extrasMenuBarFrame]
  -[VideosExtrasPresentationController initWithPresentedViewController:presentingViewController:extrasMenuBarView:extrasmenuBarFrame:]
  -[VideosExtrasPresentationController setExtrasMenuBarFrame:]
  -[VideosExtrasPresentationController setExtrasMenuBarView:]


VUIUpNextOverlayView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUITextBadgeViewDelegate>
 @property  VUIUpNextOverlayLayout *overlayLayout
 @property  IKViewElement *viewElement
 @property  _TVProgressView *progressView
 @property  IKViewElement *progressViewElement
 @property  _TVImageView *appImageView
 @property  IKViewElement *appImageElement
 @property  _TVImageView *logoImageView
 @property  IKViewElement *logoImageElement
 @property  VUILabel *textLabel
 @property  IKViewElement *textElement
 @property  VUILabel *subtitleLabel
 @property  IKViewElement *subtitleElement
 @property  _TVImageView *badgeView
 @property  IKViewElement *badgeElement
 @property  VUITextBadgeView *textBadge
 @property  IKViewElement *textBadgeElement
 @property  UIView *gradientView
 @property  CALayer *blurMaskLayer
 @property  BOOL progressViewShowOnlyOnFocus
 @property  BOOL appImageViewShowOnlyOnFocus
 @property  BOOL logoImageViewShowOnlyOnFocus
 @property  BOOL textLabelShowOnlyOnFocus
 @property  BOOL subtitleLabelShowOnlyOnFocus
 @property  BOOL badgeShowOnlyOnFocus
 @property  BOOL isFocused
 @property  NSNumber *autoPlayDuration
 @property  VUICountDownProgressIndicator *autoPlayIndicator
 @property  CALayer *gradientLayer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIUpNextOverlayView overlayViewFromElement:overlayLayout:existingView:]

  // instance methods
  -[VUIUpNextOverlayView dealloc]
  -[VUIUpNextOverlayView .cxx_destruct]
  -[VUIUpNextOverlayView reset]
  -[VUIUpNextOverlayView setTextElement:]
  -[VUIUpNextOverlayView textElement]
  -[VUIUpNextOverlayView layoutSubviews]
  -[VUIUpNextOverlayView isFocused]
  -[VUIUpNextOverlayView textLabel]
  -[VUIUpNextOverlayView badgeView]
  -[VUIUpNextOverlayView gradientLayer]
  -[VUIUpNextOverlayView setSubtitleLabel:]
  -[VUIUpNextOverlayView subtitleLabel]
  -[VUIUpNextOverlayView setGradientLayer:]
  -[VUIUpNextOverlayView setTextLabel:]
  -[VUIUpNextOverlayView setBadgeView:]
  -[VUIUpNextOverlayView gradientView]
  -[VUIUpNextOverlayView setGradientView:]
  -[VUIUpNextOverlayView progressView]
  -[VUIUpNextOverlayView setProgressView:]
  -[VUIUpNextOverlayView viewElement]
  -[VUIUpNextOverlayView subtitleElement]
  -[VUIUpNextOverlayView setViewElement:]
  -[VUIUpNextOverlayView logoImageView]
  -[VUIUpNextOverlayView setLogoImageView:]
  -[VUIUpNextOverlayView setOverlayLayout:]
  -[VUIUpNextOverlayView textBadge]
  -[VUIUpNextOverlayView overlayLayout]
  -[VUIUpNextOverlayView setTextBadge:]
  -[VUIUpNextOverlayView badgeElement]
  -[VUIUpNextOverlayView setBadgeElement:]
  -[VUIUpNextOverlayView setTextBadgeElement:]
  -[VUIUpNextOverlayView textBadgeElement]
  -[VUIUpNextOverlayView setAppImageView:]
  -[VUIUpNextOverlayView appImageView]
  -[VUIUpNextOverlayView textBadgeViewContentsUpdated:]
  -[VUIUpNextOverlayView setAppImageElement:]
  -[VUIUpNextOverlayView setLogoImageElement:]
  -[VUIUpNextOverlayView setProgressViewElement:]
  -[VUIUpNextOverlayView setSubtitleElement:]
  -[VUIUpNextOverlayView setProgressViewShowOnlyOnFocus:]
  -[VUIUpNextOverlayView setAppImageViewShowOnlyOnFocus:]
  -[VUIUpNextOverlayView setLogoImageViewShowOnlyOnFocus:]
  -[VUIUpNextOverlayView setTextLabelShowOnlyOnFocus:]
  -[VUIUpNextOverlayView setSubtitleLabelShowOnlyOnFocus:]
  -[VUIUpNextOverlayView setBadgeShowOnlyOnFocus:]
  -[VUIUpNextOverlayView progressViewElement]
  -[VUIUpNextOverlayView appImageElement]
  -[VUIUpNextOverlayView logoImageElement]
  -[VUIUpNextOverlayView blurMaskLayer]
  -[VUIUpNextOverlayView setBlurMaskLayer:]
  -[VUIUpNextOverlayView progressViewShowOnlyOnFocus]
  -[VUIUpNextOverlayView appImageViewShowOnlyOnFocus]
  -[VUIUpNextOverlayView logoImageViewShowOnlyOnFocus]
  -[VUIUpNextOverlayView textLabelShowOnlyOnFocus]
  -[VUIUpNextOverlayView subtitleLabelShowOnlyOnFocus]
  -[VUIUpNextOverlayView badgeShowOnlyOnFocus]
  -[VUIUpNextOverlayView setIsFocused:]
  -[VUIUpNextOverlayView autoPlayDuration]
  -[VUIUpNextOverlayView setAutoPlayDuration:]
  -[VUIUpNextOverlayView autoPlayIndicator]
  -[VUIUpNextOverlayView setAutoPlayIndicator:]


VUIDebugMetricsEventViewController : UITableViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIDebugMetricsEvent *event

  // instance methods
  -[VUIDebugMetricsEventViewController .cxx_destruct]
  -[VUIDebugMetricsEventViewController event]
  -[VUIDebugMetricsEventViewController setEvent:]
  -[VUIDebugMetricsEventViewController initWithEvent:]
  -[VUIDebugMetricsEventViewController viewDidLoad]
  -[VUIDebugMetricsEventViewController tableView:numberOfRowsInSection:]
  -[VUIDebugMetricsEventViewController tableView:cellForRowAtIndexPath:]
  -[VUIDebugMetricsEventViewController numberOfSectionsInTableView:]
  -[VUIDebugMetricsEventViewController tableView:titleForHeaderInSection:]
  -[VUIDebugMetricsEventViewController tableView:didSelectRowAtIndexPath:]
  -[VUIDebugMetricsEventViewController performValidation]


VUIPreflightManager : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIVideosPlayable *videosPlayable
 @property  NSObject<TVPMediaItem> *mediaItem
 @property  unsigned long restrictionsCheckType
 @property  UIViewController *presentingController

  // class methods
  +[VUIPreflightManager defaultPreflightManager]

  // instance methods
  -[VUIPreflightManager init]
  -[VUIPreflightManager .cxx_destruct]
  -[VUIPreflightManager mediaItem]
  -[VUIPreflightManager setMediaItem:]
  -[VUIPreflightManager _ratingValue]
  -[VUIPreflightManager setPresentingController:]
  -[VUIPreflightManager setRestrictionsCheckType:]
  -[VUIPreflightManager preflightWithOptions:completion:]
  -[VUIPreflightManager _isOnWiFi]
  -[VUIPreflightManager videosPlayable]
  -[VUIPreflightManager setVideosPlayable:]
  -[VUIPreflightManager presentingController]
  -[VUIPreflightManager _preflightWithOptions:completion:]
  -[VUIPreflightManager _performRestrictionsCheckWithCompletion:]
  -[VUIPreflightManager _performAgeGateVerificationWithCompletion:]
  -[VUIPreflightManager _preflightDownloadWithCompletion:]
  -[VUIPreflightManager _isAllowedToPlayOrPurchase]
  -[VUIPreflightManager _ratingDomain]
  -[VUIPreflightManager _showRestrictionsAlertForRatingDomain:completion:]
  -[VUIPreflightManager _isTrailer]
  -[VUIPreflightManager restrictionsCheckType]
  -[VUIPreflightManager _shouldShowAgeConfirmationAlert]
  -[VUIPreflightManager _requiredAgeForPlayback]
  -[VUIPreflightManager _setLastAgeConfirmationPrompted:]
  -[VUIPreflightManager _setLastConfirmedAge:]
  -[VUIPreflightManager _showAgeConfirmationWithPresentingViewController:completion:]
  -[VUIPreflightManager _lastConfirmedAge]
  -[VUIPreflightManager _lastAgeConfirmationPrompted]


VideosExtrasContext : NSObject /usr/lib/libSystem.B.dylib <VideosExtrasRootViewControllerDelegate, VideosExtrasPlaybackDelegate>
 @property  BOOL isStarted
 @property  <VideosExtrasContextDelegate> *delegate
 @property  UIViewController *featurePlaybackViewController
 @property  MPPlaybackContext *featurePlaybackContext
 @property  VideosExtrasRootViewController *extrasRootViewController
 @property  MPMediaItem *mediaItem
 @property  NSURL *javascriptURL
 @property  NSString *buyParameters
 @property  long long storeID
 @property  BOOL showsBuiltInNavigationControls
 @property  BOOL showsMenuBar
 @property  NSArray *mainMenuItemElements
 @property  unsigned long selectedMainMenuIndex
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VideosExtrasContext extrasRootViewControllerClass]
  +[VideosExtrasContext overriddenJavascriptURL]
  +[VideosExtrasContext overrideJavascriptURL:]

  // instance methods
  -[VideosExtrasContext init]
  -[VideosExtrasContext delegate]
  -[VideosExtrasContext setDelegate:]
  -[VideosExtrasContext .cxx_destruct]
  -[VideosExtrasContext failWithError:]
  -[VideosExtrasContext isStarted]
  -[VideosExtrasContext storeID]
  -[VideosExtrasContext mediaItem]
  -[VideosExtrasContext buyParameters]
  -[VideosExtrasContext initWithMediaItem:]
  -[VideosExtrasContext setIsStarted:]
  -[VideosExtrasContext extrasRequestsMediaPlayback:isBackground:]
  -[VideosExtrasContext extrasRootViewController]
  -[VideosExtrasContext extrasRequestReloadWithContext:]
  -[VideosExtrasContext shouldExtrasBeVisibleForSize:]
  -[VideosExtrasContext mainMenuItemElements]
  -[VideosExtrasContext initWithApplicationJavascriptURL:storeID:buyParameters:]
  -[VideosExtrasContext setShowsMenuBar:]
  -[VideosExtrasContext setShowsBuiltInNavigationControls:]
  -[VideosExtrasContext selectedMainMenuIndex]
  -[VideosExtrasContext isMenuItemElementMainFeature:]
  -[VideosExtrasContext setClearsStackOnNextPush]
  -[VideosExtrasContext setSelectedMainMenuIndex:]
  -[VideosExtrasContext startIfNecessary]
  -[VideosExtrasContext extrasRequestsPlaybackStop]
  -[VideosExtrasContext extrasDoneButtonPressed]
  -[VideosExtrasContext extrasMenuItemSelected:atIndex:]
  -[VideosExtrasContext extrasBackButtonPressed]
  -[VideosExtrasContext showsBuiltInNavigationControls]
  -[VideosExtrasContext featurePlaybackViewController]
  -[VideosExtrasContext javascriptURL]
  -[VideosExtrasContext showsMenuBar]
  -[VideosExtrasContext extrasRootViewControllerDidLoadMainMenuItems:]
  -[VideosExtrasContext extrasRootViewController:extrasVisibilityNeedsUpdate:]
  -[VideosExtrasContext _configureForMediaItem:]
  -[VideosExtrasContext featurePlaybackContext]
  -[VideosExtrasContext clearNavStack]
  -[VideosExtrasContext setFeaturePlaybackViewController:]
  -[VideosExtrasContext setFeaturePlaybackContext:]


VUIConfirmationDialogTemplateView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *cardView
 @property  UIVisualEffectView *backdropView

  // instance methods
  -[VUIConfirmationDialogTemplateView initWithCoder:]
  -[VUIConfirmationDialogTemplateView .cxx_destruct]
  -[VUIConfirmationDialogTemplateView initWithFrame:]
  -[VUIConfirmationDialogTemplateView layoutSubviews]
  -[VUIConfirmationDialogTemplateView backdropView]
  -[VUIConfirmationDialogTemplateView _configureSubviews]
  -[VUIConfirmationDialogTemplateView cardView]
  -[VUIConfirmationDialogTemplateView setCardView:]


VUIMPHomeShareMediaLibraryManager : NSObject /usr/lib/libSystem.B.dylib <VUIHomeShareMediaLibraryManager>
 @property  VUIMediaLibraryManager *manager
 @property  NSMutableArray *mutableHomeShareMediaLibraries
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <VUIHomeShareMediaLibraryManagerDelegate> *delegate
 @property  NSArray *homeShareMediaLibraries

  // class methods
  +[VUIMPHomeShareMediaLibraryManager _sharedMPMediaLibraries]

  // instance methods
  -[VUIMPHomeShareMediaLibraryManager dealloc]
  -[VUIMPHomeShareMediaLibraryManager delegate]
  -[VUIMPHomeShareMediaLibraryManager setDelegate:]
  -[VUIMPHomeShareMediaLibraryManager .cxx_destruct]
  -[VUIMPHomeShareMediaLibraryManager initWithManager:]
  -[VUIMPHomeShareMediaLibraryManager manager]
  -[VUIMPHomeShareMediaLibraryManager setManager:]
  -[VUIMPHomeShareMediaLibraryManager beginDiscoveringMediaLibraries]
  -[VUIMPHomeShareMediaLibraryManager endDiscoveringMediaLibraries]
  -[VUIMPHomeShareMediaLibraryManager serialProcessingDispatchQueue]
  -[VUIMPHomeShareMediaLibraryManager homeShareMediaLibraries]
  -[VUIMPHomeShareMediaLibraryManager setSerialProcessingDispatchQueue:]
  -[VUIMPHomeShareMediaLibraryManager _homeShareMediaLibraries]
  -[VUIMPHomeShareMediaLibraryManager _handleAvailableMediaLibrariesDidChange:]
  -[VUIMPHomeShareMediaLibraryManager mutableHomeShareMediaLibraries]
  -[VUIMPHomeShareMediaLibraryManager _updateMediaLibrariesWithSharedMPMediaLibraries:]
  -[VUIMPHomeShareMediaLibraryManager _notifyDelegateHomeShareMediaLibrariesDidUpdate:withChangeSet:]
  -[VUIMPHomeShareMediaLibraryManager setMutableHomeShareMediaLibraries:]


VUIActionPunchout : VUIAction
 @property  BOOL isPlaybackURL
 @property  NSString *contentTitle
 @property  IKAppContext *appContext
 @property  NSURL *punchoutURL
 @property  WLKChannelDetails *channelDetails
 @property  BOOL isEntitledToPlay
 @property  VUIContentMetadata *contentMetadata
 @property  NSString *externalID
 @property  NSString *referenceID
 @property  NSString *canonicalID

  // instance methods
  -[VUIActionPunchout .cxx_destruct]
  -[VUIActionPunchout externalID]
  -[VUIActionPunchout setExternalID:]
  -[VUIActionPunchout contentTitle]
  -[VUIActionPunchout appContext]
  -[VUIActionPunchout setAppContext:]
  -[VUIActionPunchout channelDetails]
  -[VUIActionPunchout setChannelDetails:]
  -[VUIActionPunchout canonicalID]
  -[VUIActionPunchout punchoutURL]
  -[VUIActionPunchout setCanonicalID:]
  -[VUIActionPunchout isAccountRequired]
  -[VUIActionPunchout performWithTargetResponder:completionHandler:]
  -[VUIActionPunchout initWithContextData:appContext:]
  -[VUIActionPunchout referenceID]
  -[VUIActionPunchout setReferenceID:]
  -[VUIActionPunchout isEntitledToPlay]
  -[VUIActionPunchout contentMetadata]
  -[VUIActionPunchout setContentTitle:]
  -[VUIActionPunchout _isValidAppInstalled]
  -[VUIActionPunchout _openAirplayPicker:]
  -[VUIActionPunchout _startAppInstallFlow:]
  -[VUIActionPunchout _openPunchoutURL:]
  -[VUIActionPunchout isPlaybackURL]
  -[VUIActionPunchout setPunchoutURL:]
  -[VUIActionPunchout setIsEntitledToPlay:]
  -[VUIActionPunchout setContentMetadata:]
  -[VUIActionPunchout setIsPlaybackURL:]


VUIOfflineKeyRenewalManager : NSObject /usr/lib/libSystem.B.dylib
 @property  TVPStateMachine *stateMachine
 @property  NSMutableArray *keyLoaders
 @property  BOOL networkErrorOccurredDuringInvalidation
 @property  NSTimer *keyRenewalTimer
 @property  NSTimer *expirationTimer
 @property  TVPContentKeySession *contentKeySession
 @property  unsigned long backgroundTaskIdentifier

  // class methods
  +[VUIOfflineKeyRenewalManager sharedInstance]

  // instance methods
  -[VUIOfflineKeyRenewalManager init]
  -[VUIOfflineKeyRenewalManager .cxx_destruct]
  -[VUIOfflineKeyRenewalManager stateMachine]
  -[VUIOfflineKeyRenewalManager setStateMachine:]
  -[VUIOfflineKeyRenewalManager _applicationDidEnterBackground:]
  -[VUIOfflineKeyRenewalManager _applicationWillEnterForeground:]
  -[VUIOfflineKeyRenewalManager contentKeySession]
  -[VUIOfflineKeyRenewalManager setBackgroundTaskIdentifier:]
  -[VUIOfflineKeyRenewalManager backgroundTaskIdentifier]
  -[VUIOfflineKeyRenewalManager expirationTimer]
  -[VUIOfflineKeyRenewalManager _registerStateMachineHandlers]
  -[VUIOfflineKeyRenewalManager setContentKeySession:]
  -[VUIOfflineKeyRenewalManager setExpirationTimer:]
  -[VUIOfflineKeyRenewalManager updateKeyRenewalAndExpiration]
  -[VUIOfflineKeyRenewalManager _networkReachbilityDidChange:]
  -[VUIOfflineKeyRenewalManager keyLoaders]
  -[VUIOfflineKeyRenewalManager setNetworkErrorOccurredDuringInvalidation:]
  -[VUIOfflineKeyRenewalManager networkErrorOccurredDuringInvalidation]
  -[VUIOfflineKeyRenewalManager setKeyLoaders:]
  -[VUIOfflineKeyRenewalManager _isPlaybackUIBeingShownDidChange:]
  -[VUIOfflineKeyRenewalManager _expirationTimerDidFire:]
  -[VUIOfflineKeyRenewalManager setKeyRenewalTimer:]
  -[VUIOfflineKeyRenewalManager _sendRenewalRequestForFirstArray:completion:]
  -[VUIOfflineKeyRenewalManager keyRenewalTimer]
  -[VUIOfflineKeyRenewalManager _renewalTimerDidFire:]


VUIDialogPresentationController : UIPresentationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIVisualEffectView *backdropView
 @property  {CGSize=dd} modalSize
 @property  @? completedAnimationBlock

  // instance methods
  -[VUIDialogPresentationController dealloc]
  -[VUIDialogPresentationController .cxx_destruct]
  -[VUIDialogPresentationController presentationStyle]
  -[VUIDialogPresentationController initWithPresentedViewController:presentingViewController:]
  -[VUIDialogPresentationController presentationTransitionWillBegin]
  -[VUIDialogPresentationController backdropView]
  -[VUIDialogPresentationController dismissalTransitionWillBegin]
  -[VUIDialogPresentationController _tapGesture:]
  -[VUIDialogPresentationController setModalSize:]
  -[VUIDialogPresentationController setCompletedAnimationBlock:]
  -[VUIDialogPresentationController completedAnimationBlock]
  -[VUIDialogPresentationController _layoutPresentedView]
  -[VUIDialogPresentationController modalSize]


VideosExtrasCarouselCollectionView : UICollectionView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  <VideosExtrasCarouselCollectionViewDelegate> *carouselCollectionViewDelegate

  // instance methods
  -[VideosExtrasCarouselCollectionView .cxx_destruct]
  -[VideosExtrasCarouselCollectionView didAddSubview:]
  -[VideosExtrasCarouselCollectionView setCarouselCollectionViewDelegate:]
  -[VideosExtrasCarouselCollectionView carouselCollectionViewDelegate]


VUILibraryBannerCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUILabel *titleLabel

  // instance methods
  -[VUILibraryBannerCollectionViewCell .cxx_destruct]
  -[VUILibraryBannerCollectionViewCell initWithFrame:]
  -[VUILibraryBannerCollectionViewCell titleLabel]
  -[VUILibraryBannerCollectionViewCell sizeThatFits:]
  -[VUILibraryBannerCollectionViewCell layoutSubviews]


VUIDeviceMediaLibrary : VUIMediaLibrary
 @property  BOOL updating
 @property  BOOL initialUpdateInProgress

  // instance methods
  -[VUIDeviceMediaLibrary isUpdating]
  -[VUIDeviceMediaLibrary isInitialUpdateInProgress]
  -[VUIDeviceMediaLibrary updateProgressWithCompletionHandler:]
  -[VUIDeviceMediaLibrary updateFromCloudWithReason:]


VUISidebandMediaEntityImageLoadOperation : VUIImageLoadParamsOperation
  // instance methods
  -[VUISidebandMediaEntityImageLoadOperation executionDidBegin]
  -[VUISidebandMediaEntityImageLoadOperation _finishWithImage:]


VUIAcquisitionRequest : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIStoreAcquisitionProperties *properties
 @property  @? completionBlock
 @property  BOOL cancelled

  // instance methods
  -[VUIAcquisitionRequest .cxx_destruct]
  -[VUIAcquisitionRequest isCancelled]
  -[VUIAcquisitionRequest completionBlock]
  -[VUIAcquisitionRequest setCompletionBlock:]
  -[VUIAcquisitionRequest properties]
  -[VUIAcquisitionRequest setProperties:]
  -[VUIAcquisitionRequest setCancelled:]


VUIStoreAcquisition : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIStoreAcquisition sharedInstance]

  // instance methods
  -[VUIStoreAcquisition init]
  -[VUIStoreAcquisition .cxx_destruct]
  -[VUIStoreAcquisition _processRequest:]
  -[VUIStoreAcquisition _handleRequest:]
  -[VUIStoreAcquisition acquireWithProperties:completionBlock:]
  -[VUIStoreAcquisition _processFirstRequest]
  -[VUIStoreAcquisition _handleCustomRequest:]
  -[VUIStoreAcquisition _handleResponse:responseDict:forRequest:error:cancelled:]
  -[VUIStoreAcquisition _postCrossProcessNotificationWithBuyParams:error:]
  -[VUIStoreAcquisition cancelAcquisition:]


VUIBootURLController : NSObject /usr/lib/libSystem.B.dylib
 @property  NSURL *localAppURL

  // instance methods
  -[VUIBootURLController init]
  -[VUIBootURLController .cxx_destruct]
  -[VUIBootURLController initWithLocalAppURL:]
  -[VUIBootURLController fetchBootURLWithCompletionHandler:]
  -[VUIBootURLController localAppURL]
  -[VUIBootURLController setLocalAppURL:]


VUICollectionViewFeaturedView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  _TVImageView *imageView
 @property  UIView *overlayView

  // instance methods
  -[VUICollectionViewFeaturedView .cxx_destruct]
  -[VUICollectionViewFeaturedView initWithFrame:]
  -[VUICollectionViewFeaturedView layoutSubviews]
  -[VUICollectionViewFeaturedView imageView]
  -[VUICollectionViewFeaturedView setOverlayView:]
  -[VUICollectionViewFeaturedView setImageView:]
  -[VUICollectionViewFeaturedView overlayView]


VUIUpsellOfferTransactionView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  VUIUpsellOfferTransactionViewLayout *layout
 @property  VUILabel *disclaimerLabel
 @property  NSArray *buttons

  // class methods
  +[VUIUpsellOfferTransactionView transactionViewFromElement:existingView:]

  // instance methods
  -[VUIUpsellOfferTransactionView .cxx_destruct]
  -[VUIUpsellOfferTransactionView layout]
  -[VUIUpsellOfferTransactionView setLayout:]
  -[VUIUpsellOfferTransactionView sizeThatFits:]
  -[VUIUpsellOfferTransactionView layoutSubviews]
  -[VUIUpsellOfferTransactionView setButtons:]
  -[VUIUpsellOfferTransactionView buttons]
  -[VUIUpsellOfferTransactionView viewElement]
  -[VUIUpsellOfferTransactionView setViewElement:]
  -[VUIUpsellOfferTransactionView disclaimerLabel]
  -[VUIUpsellOfferTransactionView setDisclaimerLabel:]
  -[VUIUpsellOfferTransactionView _layoutWithSize:metricsOnly:]


VUIVideoAdvisoryInfoDictionaryBuilder : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIVideoAdvisoryInfoDictionaryBuilder raitingInfoDictioanryWithRatingImage:andMediaItem:]


VUIMediaItemEntityTypesFetchResponseChanges : NSObject /usr/lib/libSystem.B.dylib
 @property  VUICollectionChangeSet *mediaItemEntityTypesChangeSet
 @property  BOOL localMediaItemsAvailableDidChange

  // instance methods
  -[VUIMediaItemEntityTypesFetchResponseChanges init]
  -[VUIMediaItemEntityTypesFetchResponseChanges .cxx_destruct]
  -[VUIMediaItemEntityTypesFetchResponseChanges mediaItemEntityTypesChangeSet]
  -[VUIMediaItemEntityTypesFetchResponseChanges localMediaItemsAvailableDidChange]
  -[VUIMediaItemEntityTypesFetchResponseChanges initWithMediaItemEntityTypesChangeSet:localMediaItemsAvailableDidChange:]


VUIDownloadButton : VUIButton
 @property  UIImage *notDownloadedImage
 @property  UIImage *connectingImage
 @property  UIImage *downloadingImage
 @property  UIImage *downloadedImage
 @property  VUIDownloadButtonViewModel *viewModel
 @property  VUICircularProgress *progressIndicator
 @property  BOOL observingDownloadProgress
 @property  BOOL wasDeleted
 @property  BOOL wasCanceled
 @property  BOOL isForLibrary
 @property  UIAlertController *deleteConfirmationAlertController
 @property  BOOL showsTextInDownloadedState
 @property  UIViewController *presentingViewController
 @property  @? downloadStateChangeHandler

  // class methods
  +[VUIDownloadButton defaultLayout]

  // instance methods
  -[VUIDownloadButton dealloc]
  -[VUIDownloadButton .cxx_destruct]
  -[VUIDownloadButton observeValueForKeyPath:ofObject:change:context:]
  -[VUIDownloadButton sizeThatFits:]
  -[VUIDownloadButton layoutSubviews]
  -[VUIDownloadButton presentingViewController]
  -[VUIDownloadButton setPresentingViewController:]
  -[VUIDownloadButton _setImage:]
  -[VUIDownloadButton viewModel]
  -[VUIDownloadButton setViewModel:]
  -[VUIDownloadButton progressIndicator]
  -[VUIDownloadButton _buttonPropertiesForState:]
  -[VUIDownloadButton setProgressIndicator:]
  -[VUIDownloadButton setWasDeleted:]
  -[VUIDownloadButton wasDeleted]
  -[VUIDownloadButton _startObservingViewModel:]
  -[VUIDownloadButton _stopObservingViewModel:]
  -[VUIDownloadButton updateWithElement:]
  -[VUIDownloadButton initWithAssetController:layout:]
  -[VUIDownloadButton updateWithAssetController:]
  -[VUIDownloadButton setDownloadStateChangeHandler:]
  -[VUIDownloadButton setShowsTextInDownloadedState:]
  -[VUIDownloadButton _handleAppDidEnterBackgroundNotification:]
  -[VUIDownloadButton _imageSizeThatFits:]
  -[VUIDownloadButton _downloadButtonTapped:]
  -[VUIDownloadButton setIsForLibrary:]
  -[VUIDownloadButton _layoutProgressIndicator]
  -[VUIDownloadButton _updateButtonToState:oldState:]
  -[VUIDownloadButton _updateDownloadProgress:animated:]
  -[VUIDownloadButton _stopObservingDownloadProgress:]
  -[VUIDownloadButton _updateButtonToState:]
  -[VUIDownloadButton _updateButtonToDownloadedWithProperties:]
  -[VUIDownloadButton _startDownloadIfPossible]
  -[VUIDownloadButton setWasCanceled:]
  -[VUIDownloadButton _askUserAndDeleteIfNeeded]
  -[VUIDownloadButton setDeleteConfirmationAlertController:]
  -[VUIDownloadButton _dismissConfirmationAlertController]
  -[VUIDownloadButton deleteConfirmationAlertController]
  -[VUIDownloadButton showsTextInDownloadedState]
  -[VUIDownloadButton _notDownloadedImage]
  -[VUIDownloadButton _connectingImage]
  -[VUIDownloadButton _downloadingImage]
  -[VUIDownloadButton _downloadedImage]
  -[VUIDownloadButton downloadStateChangeHandler]
  -[VUIDownloadButton wasCanceled]
  -[VUIDownloadButton _updateButtonToNotDownloadedWithProperties:]
  -[VUIDownloadButton _updateButtonToConnectingWithProperties:]
  -[VUIDownloadButton _updateButtonToDownloadingWithProperties:]
  -[VUIDownloadButton _setTitleWithProperties:]
  -[VUIDownloadButton _insertProgressIndicatorWithFrame:]
  -[VUIDownloadButton _configureProgressIndicatorWithProperties:]
  -[VUIDownloadButton _startObservingDownloadProgress:]
  -[VUIDownloadButton _imageForDownloadState:]
  -[VUIDownloadButton setObservingDownloadProgress:]
  -[VUIDownloadButton observingDownloadProgress]
  -[VUIDownloadButton initWithPlayable:layout:]
  -[VUIDownloadButton _pausedImage]
  -[VUIDownloadButton notDownloadedImage]
  -[VUIDownloadButton setNotDownloadedImage:]
  -[VUIDownloadButton connectingImage]
  -[VUIDownloadButton setConnectingImage:]
  -[VUIDownloadButton downloadingImage]
  -[VUIDownloadButton setDownloadingImage:]
  -[VUIDownloadButton downloadedImage]
  -[VUIDownloadButton setDownloadedImage:]
  -[VUIDownloadButton isForLibrary]


VUIPlistShowMediaCollection : VUIMediaCollection <VUIPlistMediaEntityImageLoadParamsCreating>
 @property  VUIPlistMediaDatabaseShow *databaseShow

  // instance methods
  -[VUIPlistShowMediaCollection .cxx_destruct]
  -[VUIPlistShowMediaCollection playedState]
  -[VUIPlistShowMediaCollection imageLoadParamsWithImageType:]
  -[VUIPlistShowMediaCollection initWithMediaLibrary:databaseShow:requestedProperties:]
  -[VUIPlistShowMediaCollection initWithMediaLibrary:identifier:requestedProperties:kind:]
  -[VUIPlistShowMediaCollection mediaItemCount]
  -[VUIPlistShowMediaCollection coverArtImageIdentifier]
  -[VUIPlistShowMediaCollection _valueForPropertyDescriptor:]
  -[VUIPlistShowMediaCollection databaseShow]
  -[VUIPlistShowMediaCollection setDatabaseShow:]


VUIActionMarkedAsWatched : VUIAction
 @property  NSString *itemID
 @property  NSString *itemType
 @property  NSString *channelID

  // instance methods
  -[VUIActionMarkedAsWatched .cxx_destruct]
  -[VUIActionMarkedAsWatched itemID]
  -[VUIActionMarkedAsWatched setItemID:]
  -[VUIActionMarkedAsWatched itemType]
  -[VUIActionMarkedAsWatched setItemType:]
  -[VUIActionMarkedAsWatched channelID]
  -[VUIActionMarkedAsWatched setChannelID:]
  -[VUIActionMarkedAsWatched performWithTargetResponder:completionHandler:]
  -[VUIActionMarkedAsWatched initWithContextData:]


VUISportsScoreboardManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *sportsEventsById
 @property  NSTimer *scoreboardUpdateTimer
 @property  long long scoreboardUpdateInterval
 @property  BOOL updateInProgress

  // class methods
  +[VUISportsScoreboardManager sharedInstance]
  +[VUISportsScoreboardManager registerDelegate:canonicalId:]
  +[VUISportsScoreboardManager unregisterDelegate:canonicalId:]

  // instance methods
  -[VUISportsScoreboardManager init]
  -[VUISportsScoreboardManager .cxx_destruct]
  -[VUISportsScoreboardManager _invalidateTimer]
  -[VUISportsScoreboardManager _updateTimer]
  -[VUISportsScoreboardManager setUpdateInProgress:]
  -[VUISportsScoreboardManager _resetTimer]
  -[VUISportsScoreboardManager updateInProgress]
  -[VUISportsScoreboardManager sportsEventsById]
  -[VUISportsScoreboardManager _prepareJSContextDictionaryArgument]
  -[VUISportsScoreboardManager _updateScores:]
  -[VUISportsScoreboardManager _getScoreboardUpdates]
  -[VUISportsScoreboardManager setSportsEventsById:]
  -[VUISportsScoreboardManager scoreboardUpdateTimer]
  -[VUISportsScoreboardManager setScoreboardUpdateTimer:]
  -[VUISportsScoreboardManager scoreboardUpdateInterval]
  -[VUISportsScoreboardManager setScoreboardUpdateInterval:]


VUIEventDataSource : NSObject /usr/lib/libSystem.B.dylib
 @property  VUIDocumentDataSource *preActionDocumentDataSource
 @property  VUIAction *preAction
 @property  VUIDocumentDataSource *documentDataSource
 @property  VUIAction *action
 @property  VUIDocumentDataSource *postActionDocumentDataSource
 @property  VUIAction *postAction

  // class methods
  +[VUIEventDataSource eventDataSourceWithEventDict:viewElement:]
  +[VUIEventDataSource _documentDataSourceWithDict:viewElement:]
  +[VUIEventDataSource _actionForKey:eventDict:viewElement:]

  // instance methods
  -[VUIEventDataSource .cxx_destruct]
  -[VUIEventDataSource action]
  -[VUIEventDataSource setAction:]
  -[VUIEventDataSource preActionDocumentDataSource]
  -[VUIEventDataSource preAction]
  -[VUIEventDataSource documentDataSource]
  -[VUIEventDataSource postActionDocumentDataSource]
  -[VUIEventDataSource postAction]
  -[VUIEventDataSource setPreActionDocumentDataSource:]
  -[VUIEventDataSource setPreAction:]
  -[VUIEventDataSource setDocumentDataSource:]
  -[VUIEventDataSource setPostActionDocumentDataSource:]
  -[VUIEventDataSource setPostAction:]


VUIMediaEntityFetchResponse : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long mediaEntitySubtype
 @property  NSArray *mediaEntities
 @property  NSArray *sortIndexes
 @property  NSArray *grouping
 @property  NSArray *groupingSortIndexes

  // instance methods
  -[VUIMediaEntityFetchResponse init]
  -[VUIMediaEntityFetchResponse isEqual:]
  -[VUIMediaEntityFetchResponse copyWithZone:]
  -[VUIMediaEntityFetchResponse .cxx_destruct]
  -[VUIMediaEntityFetchResponse setGrouping:]
  -[VUIMediaEntityFetchResponse grouping]
  -[VUIMediaEntityFetchResponse mediaEntities]
  -[VUIMediaEntityFetchResponse _updateWithResponse:changes:replaceContentsOnNilChanges:]
  -[VUIMediaEntityFetchResponse sortIndexes]
  -[VUIMediaEntityFetchResponse setMediaEntities:]
  -[VUIMediaEntityFetchResponse setSortIndexes:]
  -[VUIMediaEntityFetchResponse setGroupingSortIndexes:]
  -[VUIMediaEntityFetchResponse setMediaEntitySubtype:]
  -[VUIMediaEntityFetchResponse groupingSortIndexes]
  -[VUIMediaEntityFetchResponse mediaEntitySubtype]


VUIProductInfoAiringView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIProductInfoAiringLayout *layout
 @property  VUILabel *infoLabel
 @property  _TVImageView *logo

  // class methods
  +[VUIProductInfoAiringView configureViewWithElement:existingView:]
  +[VUIProductInfoAiringView airingTextWithString:layout:existingView:]
  +[VUIProductInfoAiringView _tintColorForDataSource:interfaceStyle:]
  +[VUIProductInfoAiringView airingLogoWithImageDictionary:layout:existingView:]

  // instance methods
  -[VUIProductInfoAiringView .cxx_destruct]
  -[VUIProductInfoAiringView layout]
  -[VUIProductInfoAiringView setLayout:]
  -[VUIProductInfoAiringView sizeThatFits:]
  -[VUIProductInfoAiringView layoutSubviews]
  -[VUIProductInfoAiringView logo]
  -[VUIProductInfoAiringView setLogo:]
  -[VUIProductInfoAiringView infoLabel]
  -[VUIProductInfoAiringView setInfoLabel:]
  -[VUIProductInfoAiringView layoutSubviewsWithSize:computationOnly:]


VideosExtrasTableViewCell : UITableViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKListItemLockupElement *element
 @property  VideosExtrasConstrainedArtworkContainerView *artworkContainerView

  // instance methods
  -[VideosExtrasTableViewCell element]
  -[VideosExtrasTableViewCell .cxx_destruct]
  -[VideosExtrasTableViewCell prepareForReuse]
  -[VideosExtrasTableViewCell initWithStyle:reuseIdentifier:]
  -[VideosExtrasTableViewCell setSelected:animated:]
  -[VideosExtrasTableViewCell setHighlighted:animated:]
  -[VideosExtrasTableViewCell setElement:]
  -[VideosExtrasTableViewCell configureForListItemLockupElement:wide:]
  -[VideosExtrasTableViewCell artworkContainerView]


VUIButtonFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUIButtonFactory buttonWithElement:layout:existingButton:]
  +[VUIButtonFactory buttonTypeOfButtonElement:]
  +[VUIButtonFactory buttonWithElement:existingButton:]
  +[VUIButtonFactory buttonWithElement:layout:interfaceStyle:existingButton:]
  +[VUIButtonFactory _buttonWithElement:layout:interfaceStyle:existingButton:]


VUIMediaEntitiesToRecentlyAddedMediaEntitiesValueTransformer : NSValueTransformer /usr/lib/libMobileGestalt.dylib
  // class methods
  +[VUIMediaEntitiesToRecentlyAddedMediaEntitiesValueTransformer allowsReverseTransformation]
  +[VUIMediaEntitiesToRecentlyAddedMediaEntitiesValueTransformer transformedValueClass]

  // instance methods
  -[VUIMediaEntitiesToRecentlyAddedMediaEntitiesValueTransformer transformedValue:]


VUICollectionViewFeaturedCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUICollectionViewFeaturedView *featuredView
 @property  TVImageLayout *imageLayout
 @property  IKViewElement *viewElement

  // class methods
  +[VUICollectionViewFeaturedCell lockupSizeForElement:]
  +[VUICollectionViewFeaturedCell featuredCellWithElement:existingCell:]

  // instance methods
  -[VUICollectionViewFeaturedCell .cxx_destruct]
  -[VUICollectionViewFeaturedCell initWithFrame:]
  -[VUICollectionViewFeaturedCell viewElement]
  -[VUICollectionViewFeaturedCell setViewElement:]
  -[VUICollectionViewFeaturedCell imageLayout]
  -[VUICollectionViewFeaturedCell setImageLayout:]
  -[VUICollectionViewFeaturedCell featuredView]
  -[VUICollectionViewFeaturedCell setFeaturedView:]


VUIStoreAuxMediaItem : TVPBaseMediaItem /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices <VUIStoreFPSKeyLoaderDelegate, TVPContentKeyLoading>
 @property  NSURL *url
 @property  VUIMutableBookmark *bookmark
 @property  TVPPlayer *scrubPlayer
 @property  VUIStoreFPSKeyLoader *storeFPSKeyLoader
 @property  NSError *fpsKeyError
 @property  NSObject *parentReportingToken
 @property  long long playbackType
 @property  BOOL isHLS
 @property  VUIVideoManagedObject *videoManagedObject
 @property  BOOL isForStartingDownload
 @property  NSURL *fpsCertificateURL
 @property  NSURL *fpsKeyServerURL
 @property  NSDictionary *fpsAdditionalServerParams
 @property  BOOL isAudioOnly
 @property  NSString *bookmarkID
 @property  NSNumber *bookmarkOverrideTime
 @property  BOOL disableResumeMenu
 @property  BOOL disableScrubbing
 @property  BOOL sharedPurchase
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIStoreAuxMediaItem initialize]

  // instance methods
  -[VUIStoreAuxMediaItem dealloc]
  -[VUIStoreAuxMediaItem initWithURL:]
  -[VUIStoreAuxMediaItem .cxx_destruct]
  -[VUIStoreAuxMediaItem url]
  -[VUIStoreAuxMediaItem setUrl:]
  -[VUIStoreAuxMediaItem bookmark]
  -[VUIStoreAuxMediaItem setBookmark:]
  -[VUIStoreAuxMediaItem playbackType]
  -[VUIStoreAuxMediaItem isHLS]
  -[VUIStoreAuxMediaItem setPlaybackType:]
  -[VUIStoreAuxMediaItem bookmarkID]
  -[VUIStoreAuxMediaItem isAudioOnly]
  -[VUIStoreAuxMediaItem setIsAudioOnly:]
  -[VUIStoreAuxMediaItem setBookmarkID:]
  -[VUIStoreAuxMediaItem mediaItemURL]
  -[VUIStoreAuxMediaItem mediaItemMetadataForProperty:]
  -[VUIStoreAuxMediaItem isEqualToMediaItem:]
  -[VUIStoreAuxMediaItem storeFPSKeyLoader:willFailWithError:forKeyRequest:]
  -[VUIStoreAuxMediaItem storeFPSKeyLoader:didLoadOfflineKeyData:forKeyRequest:]
  -[VUIStoreAuxMediaItem hasTrait:]
  -[VUIStoreAuxMediaItem loadFairPlayStreamingKeyRequests:]
  -[VUIStoreAuxMediaItem loadFairPlayStreamingKeyRequests:completion:]
  -[VUIStoreAuxMediaItem updateOfflineKeyWithIdentifier:updatedOfflineKeyData:]
  -[VUIStoreAuxMediaItem prepareForLoadingWithCompletion:]
  -[VUIStoreAuxMediaItem replacementErrorForPlaybackError:]
  -[VUIStoreAuxMediaItem updateBookmarkWithSuggestedTime:forElapsedTime:duration:playbackOfMediaItemIsEnding:]
  -[VUIStoreAuxMediaItem cleanUpMediaItem]
  -[VUIStoreAuxMediaItem setFpsCertificateURL:]
  -[VUIStoreAuxMediaItem setFpsKeyServerURL:]
  -[VUIStoreAuxMediaItem setBookmarkOverrideTime:]
  -[VUIStoreAuxMediaItem fpsCertificateURL]
  -[VUIStoreAuxMediaItem fpsKeyServerURL]
  -[VUIStoreAuxMediaItem fpsAdditionalServerParams]
  -[VUIStoreAuxMediaItem disableScrubbing]
  -[VUIStoreAuxMediaItem setDisableScrubbing:]
  -[VUIStoreAuxMediaItem _tvpRatingDomainFromUTSRatingDomain:]
  -[VUIStoreAuxMediaItem setFpsAdditionalServerParams:]
  -[VUIStoreAuxMediaItem initWithVideoManagedObject:isForStartingDownload:externalBookmarkTime:externalBookmarkTimeStamp:]
  -[VUIStoreAuxMediaItem setDisableResumeMenu:]
  -[VUIStoreAuxMediaItem setSharedPurchase:]
  -[VUIStoreAuxMediaItem _userPlaybackSettingsDidChange:]
  -[VUIStoreAuxMediaItem setFpsKeyError:]
  -[VUIStoreAuxMediaItem fpsKeyError]
  -[VUIStoreAuxMediaItem setParentReportingToken:]
  -[VUIStoreAuxMediaItem storeFPSKeyLoader]
  -[VUIStoreAuxMediaItem setStoreFPSKeyLoader:]
  -[VUIStoreAuxMediaItem _offlineKeyDataForKeyRequest:]
  -[VUIStoreAuxMediaItem parentReportingToken]
  -[VUIStoreAuxMediaItem videoManagedObject]
  -[VUIStoreAuxMediaItem setVideoManagedObject:]
  -[VUIStoreAuxMediaItem setIsForStartingDownload:]
  -[VUIStoreAuxMediaItem bookmarkOverrideTime]
  -[VUIStoreAuxMediaItem disableResumeMenu]
  -[VUIStoreAuxMediaItem isForStartingDownload]
  -[VUIStoreAuxMediaItem setScrubPlayer:]
  -[VUIStoreAuxMediaItem _scrubPlayerItemDidLoad:]
  -[VUIStoreAuxMediaItem sharedPurchase]
  -[VUIStoreAuxMediaItem _replacementErrorForSharedPurchasePlaybackError:]
  -[VUIStoreAuxMediaItem _replacementErrorForPlaybackError:]
  -[VUIStoreAuxMediaItem scrubPlayer]
  -[VUIStoreAuxMediaItem _keepKeyLoaderAlive:]
  -[VUIStoreAuxMediaItem setIsHLS:]


VUICollectionFooterView : UICollectionReusableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  IKViewElement *buttonViewElement
 @property  VUIButton *buttonView
 @property  {UIEdgeInsets=dddd} padding

  // class methods
  +[VUICollectionFooterView configureCollectionFooterViewWithElement:existingView:]

  // instance methods
  -[VUICollectionFooterView .cxx_destruct]
  -[VUICollectionFooterView setPadding:]
  -[VUICollectionFooterView sizeThatFits:]
  -[VUICollectionFooterView layoutSubviews]
  -[VUICollectionFooterView padding]
  -[VUICollectionFooterView viewElement]
  -[VUICollectionFooterView setViewElement:]
  -[VUICollectionFooterView buttonView]
  -[VUICollectionFooterView setButtonView:]
  -[VUICollectionFooterView _layoutWithSize:metricsOnly:]
  -[VUICollectionFooterView setButtonViewElement:]
  -[VUICollectionFooterView buttonViewElement]


VUIVideoAdvisoryView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIVideoAdvisoryViewLayout *layout
 @property  _TVImageView *logoImageView
 @property  UIView *dividerView
 @property  NSArray *legendViews

  // instance methods
  -[VUIVideoAdvisoryView .cxx_destruct]
  -[VUIVideoAdvisoryView layout]
  -[VUIVideoAdvisoryView setLayout:]
  -[VUIVideoAdvisoryView sizeThatFits:]
  -[VUIVideoAdvisoryView layoutSubviews]
  -[VUIVideoAdvisoryView _margin]
  -[VUIVideoAdvisoryView _isPortrait]
  -[VUIVideoAdvisoryView _dividerSize]
  -[VUIVideoAdvisoryView logoImageView]
  -[VUIVideoAdvisoryView setLogoImageView:]
  -[VUIVideoAdvisoryView dividerView]
  -[VUIVideoAdvisoryView setDividerView:]
  -[VUIVideoAdvisoryView _logoSize]
  -[VUIVideoAdvisoryView initWithRatingInfoDictionary:]
  -[VUIVideoAdvisoryView show:animated:completion:]
  -[VUIVideoAdvisoryView _legendSize]
  -[VUIVideoAdvisoryView _logoMargin]
  -[VUIVideoAdvisoryView _legendsMargin]
  -[VUIVideoAdvisoryView _dividerMargin]
  -[VUIVideoAdvisoryView _configureSubviewsWithDictionary:]
  -[VUIVideoAdvisoryView legendViews]
  -[VUIVideoAdvisoryView setLegendViews:]
  -[VUIVideoAdvisoryView _showAnimated:completion:]
  -[VUIVideoAdvisoryView _hideAnimated:completion:]
  -[VUIVideoAdvisoryView _showWithAnimationWithCompletion:]
  -[VUIVideoAdvisoryView _hideWithAnimationWithCompletion:]


VUIProductBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIRentalExpirationLabelDelegate>
 @property  VUISeparatorView *separatorView
 @property  VUILabel *descComputationLabel
 @property  VUILabel *tagsComputationLabel
 @property  double contentOffset
 @property  IKViewElement *viewElement
 @property  VUIProductBannerLayout *layout
 @property  _TVImageView *logoImageView
 @property  VUILabel *logoTextView
 @property  VUILabel *subTextView
 @property  VUILabel *episodeInfoView
 @property  _TVImageView *coverArtImageView
 @property  _TVImageView *decorationImageView
 @property  _TVImageView *decorationImageGradientView
 @property  NSArray *buttonViews
 @property  VUIComingSoonBannerCardView *comingSoonView
 @property  VUIFocusableTextView *descriptionTextView
 @property  VUIProductBannerCastInfoView *castInfoView
 @property  VUIMediaTagsView *tagsView
 @property  VUIMediaTagsView *infoTagsView
 @property  VUILabel *disclaimerTextView
 @property  VUILabel *availabilityTextView
 @property  _TVImageView *availabilityImageView
 @property  BOOL prefersUberLayout
 @property  double topThreshold
 @property  CAGradientLayer *gradientLayer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIProductBannerView .cxx_destruct]
  -[VUIProductBannerView layout]
  -[VUIProductBannerView setLayout:]
  -[VUIProductBannerView initWithFrame:]
  -[VUIProductBannerView preferredFocusEnvironments]
  -[VUIProductBannerView sizeThatFits:]
  -[VUIProductBannerView layoutSubviews]
  -[VUIProductBannerView separatorView]
  -[VUIProductBannerView contentOffset]
  -[VUIProductBannerView setSemanticContentAttribute:]
  -[VUIProductBannerView setContentOffset:]
  -[VUIProductBannerView setSeparatorView:]
  -[VUIProductBannerView gradientLayer]
  -[VUIProductBannerView setGradientLayer:]
  -[VUIProductBannerView buttonViews]
  -[VUIProductBannerView setButtonViews:]
  -[VUIProductBannerView viewElement]
  -[VUIProductBannerView setViewElement:]
  -[VUIProductBannerView logoImageView]
  -[VUIProductBannerView setLogoImageView:]
  -[VUIProductBannerView tagsView]
  -[VUIProductBannerView descriptionTextView]
  -[VUIProductBannerView setDescriptionTextView:]
  -[VUIProductBannerView setTagsView:]
  -[VUIProductBannerView rentalExpirationLabelNeedsRelayout:]
  -[VUIProductBannerView topThreshold]
  -[VUIProductBannerView prefersUberLayout]
  -[VUIProductBannerView decorationImageView]
  -[VUIProductBannerView coverArtImageView]
  -[VUIProductBannerView setCoverArtImageView:]
  -[VUIProductBannerView setDecorationImageView:]
  -[VUIProductBannerView setDecorationImageGradientView:]
  -[VUIProductBannerView setPrefersUberLayout:]
  -[VUIProductBannerView infoTagsView]
  -[VUIProductBannerView setInfoTagsView:]
  -[VUIProductBannerView disclaimerTextView]
  -[VUIProductBannerView setDisclaimerTextView:]
  -[VUIProductBannerView logoTextView]
  -[VUIProductBannerView subTextView]
  -[VUIProductBannerView episodeInfoView]
  -[VUIProductBannerView setLogoTextView:]
  -[VUIProductBannerView setSubTextView:]
  -[VUIProductBannerView setEpisodeInfoView:]
  -[VUIProductBannerView castInfoView]
  -[VUIProductBannerView setCastInfoView:]
  -[VUIProductBannerView _iOS_layoutSubviewsWithSize:computationOnly:]
  -[VUIProductBannerView setAvailabilityTextView:]
  -[VUIProductBannerView setAvailabilityImageView:]
  -[VUIProductBannerView availabilityTextView]
  -[VUIProductBannerView availabilityImageView]
  -[VUIProductBannerView _iOS_layoutButtonViewsWithWidth:origin:isVerticalLayout:computationOnly:]
  -[VUIProductBannerView setComingSoonView:]
  -[VUIProductBannerView decorationImageGradientView]
  -[VUIProductBannerView comingSoonView]
  -[VUIProductBannerView descComputationLabel]
  -[VUIProductBannerView setDescComputationLabel:]
  -[VUIProductBannerView tagsComputationLabel]
  -[VUIProductBannerView setTagsComputationLabel:]


VUIEpisodeShelfHeaderView : UICollectionReusableView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  IKViewElement *viewElement
 @property  VUISeasonPickerButton *button

  // class methods
  +[VUIEpisodeShelfHeaderView configureWithElement:existingView:]

  // instance methods
  -[VUIEpisodeShelfHeaderView .cxx_destruct]
  -[VUIEpisodeShelfHeaderView button]
  -[VUIEpisodeShelfHeaderView sizeThatFits:]
  -[VUIEpisodeShelfHeaderView layoutSubviews]
  -[VUIEpisodeShelfHeaderView setButton:]
  -[VUIEpisodeShelfHeaderView viewElement]
  -[VUIEpisodeShelfHeaderView setViewElement:]
  -[VUIEpisodeShelfHeaderView _layoutWithSize:metricsOnly:]
  -[VUIEpisodeShelfHeaderView switchToIndex:]


VUIUpsellOfferTransactionViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  VUITextLayout *disclaimerTextLayout
 @property  VUIButtonLayout *buttonLayout

  // class methods
  +[VUIUpsellOfferTransactionViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUIUpsellOfferTransactionViewLayout init]
  -[VUIUpsellOfferTransactionViewLayout .cxx_destruct]
  -[VUIUpsellOfferTransactionViewLayout safeAreaInsets]
  -[VUIUpsellOfferTransactionViewLayout buttonHeight]
  -[VUIUpsellOfferTransactionViewLayout buttonSpacing]
  -[VUIUpsellOfferTransactionViewLayout _configureLayout]
  -[VUIUpsellOfferTransactionViewLayout disclaimerTextLayout]
  -[VUIUpsellOfferTransactionViewLayout buttonLayout]
  -[VUIUpsellOfferTransactionViewLayout disclaimerBottomMargin]


VUISeasonPickerViewController : VUILibraryFetchControllerViewController <UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, VUIMediaEntitiesFetchControllerDelegate>
 @property  _VUISeasonPickerView *seasonPickerView
 @property  NSArray *seasons
 @property  NSObject<VUIMediaEntityIdentifier> *collectionIdentifier
 @property  VUILibraryFetchControllerViewController *currentSeasonViewController
 @property  BOOL lastViewedSeasonWasManuallyDeleted
 @property  NSString *pickerTitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUISeasonPickerViewController .cxx_destruct]
  -[VUISeasonPickerViewController viewWillAppear:]
  -[VUISeasonPickerViewController viewDidLoad]
  -[VUISeasonPickerViewController collectionView:numberOfItemsInSection:]
  -[VUISeasonPickerViewController collectionView:cellForItemAtIndexPath:]
  -[VUISeasonPickerViewController viewDidAppear:]
  -[VUISeasonPickerViewController collectionView:didSelectItemAtIndexPath:]
  -[VUISeasonPickerViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUISeasonPickerViewController collectionView:layout:insetForSectionAtIndex:]
  -[VUISeasonPickerViewController collectionIdentifier]
  -[VUISeasonPickerViewController setCollectionIdentifier:]
  -[VUISeasonPickerViewController pickerTitle]
  -[VUISeasonPickerViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUISeasonPickerViewController controller:fetchRequests:didFailWithError:]
  -[VUISeasonPickerViewController seasons]
  -[VUISeasonPickerViewController setSeasons:]
  -[VUISeasonPickerViewController initWithMediaLibrary:title:collectionIdentifier:]
  -[VUISeasonPickerViewController currentSeasonViewController]
  -[VUISeasonPickerViewController setLastViewedSeasonWasManuallyDeleted:]
  -[VUISeasonPickerViewController setCurrentSeasonViewController:]
  -[VUISeasonPickerViewController lastViewedSeasonWasManuallyDeleted]
  -[VUISeasonPickerViewController setPickerTitle:]
  -[VUISeasonPickerViewController seasonPickerView]
  -[VUISeasonPickerViewController setSeasonPickerView:]


_VUISeasonPickerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UICollectionView *collectionView

  // instance methods
  -[_VUISeasonPickerView .cxx_destruct]
  -[_VUISeasonPickerView initWithFrame:]
  -[_VUISeasonPickerView traitCollectionDidChange:]
  -[_VUISeasonPickerView layoutSubviews]
  -[_VUISeasonPickerView collectionView]


VUIProgressBarLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  UIColor *fillColor
 @property  UIColor *tintColor
 @property  UIColor *gradientStartColor
 @property  UIColor *gradientEndColor
 @property  double height
 @property  {UIEdgeInsets=dddd} margin
 @property  {UIEdgeInsets=dddd} padding
 @property  double cornerRadius
 @property  BOOL shouldProgressBarUseRoundCorner
 @property  BOOL useMaterial
 @property  UIVisualEffectView *materialView

  // class methods
  +[VUIProgressBarLayout defaultProgressBarLayout]

  // instance methods
  -[VUIProgressBarLayout .cxx_destruct]
  -[VUIProgressBarLayout height]
  -[VUIProgressBarLayout setHeight:]
  -[VUIProgressBarLayout setPadding:]
  -[VUIProgressBarLayout setCornerRadius:]
  -[VUIProgressBarLayout tintColor]
  -[VUIProgressBarLayout setTintColor:]
  -[VUIProgressBarLayout fillColor]
  -[VUIProgressBarLayout cornerRadius]
  -[VUIProgressBarLayout setMargin:]
  -[VUIProgressBarLayout margin]
  -[VUIProgressBarLayout padding]
  -[VUIProgressBarLayout setFillColor:]
  -[VUIProgressBarLayout setGradientEndColor:]
  -[VUIProgressBarLayout gradientEndColor]
  -[VUIProgressBarLayout materialView]
  -[VUIProgressBarLayout setGradientStartColor:]
  -[VUIProgressBarLayout gradientStartColor]
  -[VUIProgressBarLayout setMaterialView:]
  -[VUIProgressBarLayout setShouldProgressBarUseRoundCorner:]
  -[VUIProgressBarLayout setUseMaterial:]
  -[VUIProgressBarLayout useMaterial]
  -[VUIProgressBarLayout shouldProgressBarUseRoundCorner]


VUIFeaturedCellOverlayView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIFeaturedCellOverlayLayout *overlayLayout
 @property  IKViewElement *viewElement
 @property  _TVImageView *logoImageView
 @property  VUIAppleTVChannelLogoView *appleTVChannelLogoView
 @property  VUILabel *titleLabel
 @property  VUILabel *subtitleLabel
 @property  VUILabel *disclaimerLabel
 @property  NSArray *buttons

  // class methods
  +[VUIFeaturedCellOverlayView featuredCellOverViewFromElement:overlayType:existingView:]

  // instance methods
  -[VUIFeaturedCellOverlayView .cxx_destruct]
  -[VUIFeaturedCellOverlayView titleLabel]
  -[VUIFeaturedCellOverlayView layoutSubviews]
  -[VUIFeaturedCellOverlayView setTitleLabel:]
  -[VUIFeaturedCellOverlayView setSubtitleLabel:]
  -[VUIFeaturedCellOverlayView subtitleLabel]
  -[VUIFeaturedCellOverlayView setButtons:]
  -[VUIFeaturedCellOverlayView buttons]
  -[VUIFeaturedCellOverlayView viewElement]
  -[VUIFeaturedCellOverlayView setViewElement:]
  -[VUIFeaturedCellOverlayView logoImageView]
  -[VUIFeaturedCellOverlayView setLogoImageView:]
  -[VUIFeaturedCellOverlayView disclaimerLabel]
  -[VUIFeaturedCellOverlayView setDisclaimerLabel:]
  -[VUIFeaturedCellOverlayView setOverlayLayout:]
  -[VUIFeaturedCellOverlayView overlayLayout]
  -[VUIFeaturedCellOverlayView appleTVChannelLogoView]
  -[VUIFeaturedCellOverlayView setAppleTVChannelLogoView:]


VUIAppCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VUIAppCell .cxx_destruct]
  -[VUIAppCell setTitle:]
  -[VUIAppCell setImage:]
  -[VUIAppCell layoutSubviews]
  -[VUIAppCell updateConstraints]


VUIDocumentContextData : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDictionary *contextDataDict

  // instance methods
  -[VUIDocumentContextData .cxx_destruct]
  -[VUIDocumentContextData initWithDictionary:]
  -[VUIDocumentContextData jsonData]
  -[VUIDocumentContextData contextDataDict]
  -[VUIDocumentContextData setContextDataDict:]


VUIDocumentContextDataMovie : VUIDocumentContextData
 @property  NSString *movieID

  // instance methods
  -[VUIDocumentContextDataMovie .cxx_destruct]
  -[VUIDocumentContextDataMovie jsonData]
  -[VUIDocumentContextDataMovie initWithMovieID:]
  -[VUIDocumentContextDataMovie movieID]


VUIDocumentContextDataMovieBundle : VUIDocumentContextData
 @property  NSString *movieBundleID

  // instance methods
  -[VUIDocumentContextDataMovieBundle .cxx_destruct]
  -[VUIDocumentContextDataMovieBundle jsonData]
  -[VUIDocumentContextDataMovieBundle initWithMovieBundleID:]
  -[VUIDocumentContextDataMovieBundle movieBundleID]


VUIDocumentContextDataTVShow : VUIDocumentContextData
 @property  NSString *showID
 @property  NSString *episodeID

  // instance methods
  -[VUIDocumentContextDataTVShow .cxx_destruct]
  -[VUIDocumentContextDataTVShow jsonData]
  -[VUIDocumentContextDataTVShow showID]
  -[VUIDocumentContextDataTVShow initWithShowID:episodeID:]
  -[VUIDocumentContextDataTVShow episodeID]


VUIDocumentContextDataConfirmationDialog : VUIDocumentContextData
 @property  NSString *confirmationDialogType
 @property  NSString *name

  // instance methods
  -[VUIDocumentContextDataConfirmationDialog name]
  -[VUIDocumentContextDataConfirmationDialog .cxx_destruct]
  -[VUIDocumentContextDataConfirmationDialog setName:]
  -[VUIDocumentContextDataConfirmationDialog jsonData]
  -[VUIDocumentContextDataConfirmationDialog setConfirmationDialogType:]
  -[VUIDocumentContextDataConfirmationDialog confirmationDialogType]


VUIDocumentContextDataSiriSearch : VUIDocumentContextData
  // instance methods
  -[VUIDocumentContextDataSiriSearch jsonData]


VUIMPMediaItemAirTrafficDownloadController : VUIMPMediaItemDownloadController
  // instance methods
  -[VUIMPMediaItemAirTrafficDownloadController dealloc]
  -[VUIMPMediaItemAirTrafficDownloadController initWithMediaItem:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemAirTrafficDownloadController supportsCancellation]
  -[VUIMPMediaItemAirTrafficDownloadController supportsPausing]
  -[VUIMPMediaItemAirTrafficDownloadController initWithMediaItem:state:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemAirTrafficDownloadController _handleMediaLibraryDidChangeNotification:]


VideosExtrasNavigationController : UINavigationController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VideosExtrasLoadingViewDelegate, IKAppNavigationController>
 @property  VideosExtrasContext *context
 @property  VideosExtrasMainTemplateViewController *mainTemplateViewController
 @property  BOOL showsBuiltInNavControls
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasNavigationController .cxx_destruct]
  -[VideosExtrasNavigationController context]
  -[VideosExtrasNavigationController initWithContext:]
  -[VideosExtrasNavigationController viewDidLoad]
  -[VideosExtrasNavigationController pushViewController:animated:]
  -[VideosExtrasNavigationController setViewControllers:animated:]
  -[VideosExtrasNavigationController childViewControllerForHomeIndicatorAutoHidden]
  -[VideosExtrasNavigationController willShowViewController:animated:]
  -[VideosExtrasNavigationController pushDocument:options:]
  -[VideosExtrasNavigationController insertDocument:beforeDocument:options:]
  -[VideosExtrasNavigationController replaceDocument:withDocument:options:]
  -[VideosExtrasNavigationController popDocument]
  -[VideosExtrasNavigationController popToDocument:]
  -[VideosExtrasNavigationController popToRootDocument]
  -[VideosExtrasNavigationController removeDocument:]
  -[VideosExtrasNavigationController documents]
  -[VideosExtrasNavigationController _dismissViewController:]
  -[VideosExtrasNavigationController mainTemplateViewController]
  -[VideosExtrasNavigationController loadingView:documentDidUpdate:options:]
  -[VideosExtrasNavigationController setClearsStackOnNextPush]
  -[VideosExtrasNavigationController setShowsBuiltInNavControls:]
  -[VideosExtrasNavigationController _installDoneButtonOnNavigationItem:]
  -[VideosExtrasNavigationController _presentDialogTemplate:]
  -[VideosExtrasNavigationController _viewControllerForDocument:index:]
  -[VideosExtrasNavigationController _installBackButtonOnNavigationItem:withTitle:]
  -[VideosExtrasNavigationController _popViewControllerFromBackButton]
  -[VideosExtrasNavigationController applyMainTemplateOffset:animated:]
  -[VideosExtrasNavigationController finalizeMainTemplateOffset:]
  -[VideosExtrasNavigationController showsBuiltInNavControls]


VideosExtrasNavigationBar : UINavigationBar /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // instance methods
  -[VideosExtrasNavigationBar .cxx_destruct]
  -[VideosExtrasNavigationBar initWithFrame:]
  -[VideosExtrasNavigationBar hitTest:withEvent:]


VideosExtrasNavigationBarButton : UIButton /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
  // class methods
  +[VideosExtrasNavigationBarButton extrasNavigationButton:]
  +[VideosExtrasNavigationBarButton textDodgeColor]
  +[VideosExtrasNavigationBarButton textFilter]
  +[VideosExtrasNavigationBarButton extrasBackButton:]

  // instance methods
  -[VideosExtrasNavigationBarButton .cxx_destruct]
  -[VideosExtrasNavigationBarButton layoutSubviews]


VUILibraryMediaCollectionViewController : VUILibraryStackViewController <UICollectionViewDataSource, UICollectionViewDelegate, VUIMediaEntitiesFetchControllerDelegate, VUIProductLockupViewDelegate, TVShelfViewLayoutDelegate, VUILibraryEpisodeFooterCellDelegate, VUILibraryEpisodeShelfViewControllerDelegate>
 @property  NSArray *seasons
 @property  NSArray *episodes
 @property  NSArray *episodeGroups
 @property  VUILibraryMediaCollectionViewModel *mediaCollectionViewModel
 @property  NSMutableDictionary *downloadButtonBySeasonIdentifier
 @property  NSString *showTitle
 @property  BOOL canShowMultipleSeasons
 @property  VUIMediaCollection *mediaCollection
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryMediaCollectionViewController .cxx_destruct]
  -[VUILibraryMediaCollectionViewController start]
  -[VUILibraryMediaCollectionViewController traitCollectionDidChange:]
  -[VUILibraryMediaCollectionViewController collectionView:numberOfItemsInSection:]
  -[VUILibraryMediaCollectionViewController collectionView:cellForItemAtIndexPath:]
  -[VUILibraryMediaCollectionViewController viewDidAppear:]
  -[VUILibraryMediaCollectionViewController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUILibraryMediaCollectionViewController collectionView:layout:insetForSectionAtIndex:]
  -[VUILibraryMediaCollectionViewController collectionView:layout:minimumLineSpacingForSectionAtIndex:]
  -[VUILibraryMediaCollectionViewController setShowTitle:]
  -[VUILibraryMediaCollectionViewController showTitle]
  -[VUILibraryMediaCollectionViewController mediaCollection]
  -[VUILibraryMediaCollectionViewController episodes]
  -[VUILibraryMediaCollectionViewController libraryEpisodesShelfViewController:didRemoveDownloadForAssetController:]
  -[VUILibraryMediaCollectionViewController configureWithCollectionView:]
  -[VUILibraryMediaCollectionViewController controller:fetchRequests:didCompleteWithResult:]
  -[VUILibraryMediaCollectionViewController controller:fetchRequests:didFailWithError:]
  -[VUILibraryMediaCollectionViewController seasons]
  -[VUILibraryMediaCollectionViewController setSeasons:]
  -[VUILibraryMediaCollectionViewController contentDescriptionExpanded]
  -[VUILibraryMediaCollectionViewController setEpisodes:]
  -[VUILibraryMediaCollectionViewController titleButtonPressedForStoreId:]
  -[VUILibraryMediaCollectionViewController initWithMediaCollection:showMultipleSeasons:]
  -[VUILibraryMediaCollectionViewController _usingEpisodesGroupFetch]
  -[VUILibraryMediaCollectionViewController _buildMediaCollectionViewModel]
  -[VUILibraryMediaCollectionViewController _updateDeletedContentErrorMessage]
  -[VUILibraryMediaCollectionViewController _episodesChangeSetMapWithEpisodeGroups:changeSet:]
  -[VUILibraryMediaCollectionViewController _seasonViewModelsWithSeasons:]
  -[VUILibraryMediaCollectionViewController _updateMediaCollectionViewModelWithSeasonViewModels:]
  -[VUILibraryMediaCollectionViewController _updateProductLockupViewWithSeasonIdentifier:]
  -[VUILibraryMediaCollectionViewController canShowMultipleSeasons]
  -[VUILibraryMediaCollectionViewController _episodesBySeasonIdentifier]
  -[VUILibraryMediaCollectionViewController _productLockupViewWithSeason:]
  -[VUILibraryMediaCollectionViewController _episodeShelfViewControllerWithSeason:episodes:]
  -[VUILibraryMediaCollectionViewController _updateProductLockupView:withSeason:]
  -[VUILibraryMediaCollectionViewController addDownloadButtonToProductLockupView:forSeason:]
  -[VUILibraryMediaCollectionViewController episodeGroups]
  -[VUILibraryMediaCollectionViewController setEpisodeGroups:]
  -[VUILibraryMediaCollectionViewController mediaCollectionViewModel]
  -[VUILibraryMediaCollectionViewController setMediaCollectionViewModel:]
  -[VUILibraryMediaCollectionViewController downloadButtonBySeasonIdentifier]
  -[VUILibraryMediaCollectionViewController setDownloadButtonBySeasonIdentifier:]
  -[VUILibraryMediaCollectionViewController setCanShowMultipleSeasons:]


VUILibrarySeasonViewModel : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSObject<VUIMediaEntityIdentifier> *seasonIdentifier
 @property  unsigned long type

  // instance methods
  -[VUILibrarySeasonViewModel isEqual:]
  -[VUILibrarySeasonViewModel copyWithZone:]
  -[VUILibrarySeasonViewModel type]
  -[VUILibrarySeasonViewModel .cxx_destruct]
  -[VUILibrarySeasonViewModel seasonIdentifier]
  -[VUILibrarySeasonViewModel initWithSeasonIdentifier:type:]


VUILibraryMediaCollectionViewModel : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *seasonViewModels
 @property  NSDictionary *seasonBySeasonIdentifier
 @property  NSDictionary *episodeShelfViewControllerBySeasonIdentifier
 @property  NSDictionary *productLockupViewBySeasonIdentifier
 @property  NSDictionary *episodesBySeasonIdentifer
 @property  BOOL hasContent

  // instance methods
  -[VUILibraryMediaCollectionViewModel .cxx_destruct]
  -[VUILibraryMediaCollectionViewModel hasContent]
  -[VUILibraryMediaCollectionViewModel seasonViewModels]
  -[VUILibraryMediaCollectionViewModel productLockupViewBySeasonIdentifier]
  -[VUILibraryMediaCollectionViewModel episodeShelfViewControllerBySeasonIdentifier]
  -[VUILibraryMediaCollectionViewModel seasonBySeasonIdentifier]
  -[VUILibraryMediaCollectionViewModel episodesBySeasonIdentifer]
  -[VUILibraryMediaCollectionViewModel setSeasonViewModels:]
  -[VUILibraryMediaCollectionViewModel setSeasonBySeasonIdentifier:]
  -[VUILibraryMediaCollectionViewModel setProductLockupViewBySeasonIdentifier:]
  -[VUILibraryMediaCollectionViewModel setEpisodeShelfViewControllerBySeasonIdentifier:]
  -[VUILibraryMediaCollectionViewModel setEpisodesBySeasonIdentifer:]


VUIPresentationContainerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIPresentationContainerViewController loadView]
  -[VUIPresentationContainerViewController gestureRecognizer:shouldReceiveTouch:]
  -[VUIPresentationContainerViewController viewDidLayoutSubviews]
  -[VUIPresentationContainerViewController tapped]


VUIShelfViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UICollectionViewDelegate, UICollectionViewDataSource, TVShelfViewLayoutDelegate>
 @property  UICollectionView *collectionView
 @property  VUIShelfView *containerView
 @property  NSIndexPath *focusedIndexPath
 @property  UIView *headerView
 @property  long long gridStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIShelfViewController .cxx_destruct]
  -[VUIShelfViewController loadView]
  -[VUIShelfViewController traitCollectionDidChange:]
  -[VUIShelfViewController containerView]
  -[VUIShelfViewController setContainerView:]
  -[VUIShelfViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[VUIShelfViewController collectionView]
  -[VUIShelfViewController viewWillLayoutSubviews]
  -[VUIShelfViewController collectionView:numberOfItemsInSection:]
  -[VUIShelfViewController collectionView:cellForItemAtIndexPath:]
  -[VUIShelfViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIShelfViewController didMoveToParentViewController:]
  -[VUIShelfViewController headerView]
  -[VUIShelfViewController setHeaderView:]
  -[VUIShelfViewController setCollectionView:]
  -[VUIShelfViewController indexPathForPreferredFocusedViewInCollectionView:]
  -[VUIShelfViewController setFocusedIndexPath:]
  -[VUIShelfViewController focusedIndexPath]
  -[VUIShelfViewController initWithGridStyle:]
  -[VUIShelfViewController gridStyle]
  -[VUIShelfViewController _ensureScrollViewSnaps]
  -[VUIShelfViewController _findSnappingItemFromContentOffset:withVelocity:]
  -[VUIShelfViewController _snapTargetContentOffset:toItemIndexPath:atItemOffset:]
  -[VUIShelfViewController updateContentOffsetWithTransitionCoordinator:]
  -[VUIShelfViewController _updateCollectionViewLayout:]


VUIMPMediaItemDownloadController : NSObject /usr/lib/libSystem.B.dylib
 @property  MPMediaItem *mediaItem
 @property  VUIMPMediaItemDownloadControllerState *state
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSHashTable *observers
 @property  BOOL supportsCancellation
 @property  BOOL supportsPausing
 @property  BOOL restoreDownload
 @property  NSObject<OS_dispatch_queue> *observerDispatchQueue

  // instance methods
  -[VUIMPMediaItemDownloadController init]
  -[VUIMPMediaItemDownloadController invalidate]
  -[VUIMPMediaItemDownloadController .cxx_destruct]
  -[VUIMPMediaItemDownloadController addObserver:]
  -[VUIMPMediaItemDownloadController removeObserver:]
  -[VUIMPMediaItemDownloadController state]
  -[VUIMPMediaItemDownloadController setState:]
  -[VUIMPMediaItemDownloadController _setState:]
  -[VUIMPMediaItemDownloadController setObservers:]
  -[VUIMPMediaItemDownloadController observers]
  -[VUIMPMediaItemDownloadController cancelDownload]
  -[VUIMPMediaItemDownloadController mediaItem]
  -[VUIMPMediaItemDownloadController setMediaItem:]
  -[VUIMPMediaItemDownloadController resumeDownload]
  -[VUIMPMediaItemDownloadController serialProcessingDispatchQueue]
  -[VUIMPMediaItemDownloadController setSerialProcessingDispatchQueue:]
  -[VUIMPMediaItemDownloadController supportsCancellation]
  -[VUIMPMediaItemDownloadController supportsPausing]
  -[VUIMPMediaItemDownloadController _enqueueAsyncProcessingQueueBlock:]
  -[VUIMPMediaItemDownloadController initWithMediaItem:state:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemDownloadController _onProcessingQueue_invalidate]
  -[VUIMPMediaItemDownloadController isRestoreDownload]
  -[VUIMPMediaItemDownloadController _onProcessingQueue_cancelDownload]
  -[VUIMPMediaItemDownloadController _onProcessingQueue_pauseDownload]
  -[VUIMPMediaItemDownloadController _onProcessingQueue_resumeDownload]
  -[VUIMPMediaItemDownloadController pauseDownload]
  -[VUIMPMediaItemDownloadController setObserverDispatchQueue:]
  -[VUIMPMediaItemDownloadController _enqueueAsyncStrongSelfProcessingQueueBlock:]
  -[VUIMPMediaItemDownloadController _onProcessingQueue_setState:]
  -[VUIMPMediaItemDownloadController observerDispatchQueue]
  -[VUIMPMediaItemDownloadController _notifyObservers:stateDidChange:]
  -[VUIMPMediaItemDownloadController _enqueueObserverQueueBlock:]


VUILibraryDownloadPopoverViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <UIGestureRecognizerDelegate>
 @property  VUILibraryListItemView *listView
 @property  <VUILibraryDownloadPopoverViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUILibraryDownloadPopoverViewController delegate]
  -[VUILibraryDownloadPopoverViewController setDelegate:]
  -[VUILibraryDownloadPopoverViewController .cxx_destruct]
  -[VUILibraryDownloadPopoverViewController loadView]
  -[VUILibraryDownloadPopoverViewController viewWillDisappear:]
  -[VUILibraryDownloadPopoverViewController listView]
  -[VUILibraryDownloadPopoverViewController setListView:]
  -[VUILibraryDownloadPopoverViewController popoverPressed:]


VUIFavoriteBannerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIFavoriteBannerLayout *layout
 @property  UIView *backgroundView
 @property  NSArray *backgroundImageLogos
 @property  VUILabel *titleLabel
 @property  VUILabel *subtitleLabel

  // instance methods
  -[VUIFavoriteBannerView .cxx_destruct]
  -[VUIFavoriteBannerView layout]
  -[VUIFavoriteBannerView setLayout:]
  -[VUIFavoriteBannerView titleLabel]
  -[VUIFavoriteBannerView backgroundView]
  -[VUIFavoriteBannerView sizeThatFits:]
  -[VUIFavoriteBannerView layoutSubviews]
  -[VUIFavoriteBannerView setHighlighted:]
  -[VUIFavoriteBannerView setTitleLabel:]
  -[VUIFavoriteBannerView setBackgroundView:]
  -[VUIFavoriteBannerView setSubtitleLabel:]
  -[VUIFavoriteBannerView subtitleLabel]
  -[VUIFavoriteBannerView prepareForCellReuse]
  -[VUIFavoriteBannerView _layoutSubviewsWithSize:computationOnly:]
  -[VUIFavoriteBannerView backgroundImageLogos]
  -[VUIFavoriteBannerView imageSizeForBannerStyle:]
  -[VUIFavoriteBannerView setBackgroundImageLogos:]
  -[VUIFavoriteBannerView _generateSiderowImagePointsForSize:]
  -[VUIFavoriteBannerView _generateSingleRowImagePoints]
  -[VUIFavoriteBannerView _generatePlainWeaveImagePointsForSize:]
  -[VUIFavoriteBannerView _generatePointsForPlainWeaveSide:containerRect:imageSize:direction:]


VUIAggregateLibraryIdentifier : NSObject /usr/lib/libSystem.B.dylib <VUIMediaLibraryIdentifier>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIAggregateLibraryIdentifier copyWithZone:]


VUIAggregateMediaLibrary : VUIDeviceMediaLibrary
 @property  VUIDeviceMediaLibrary *deviceMediaLibrary
 @property  VUISidebandMediaLibrary *sidebandMediaLibrary

  // class methods
  +[VUIAggregateMediaLibrary keyPathsForValuesAffectingConnectionState]

  // instance methods
  -[VUIAggregateMediaLibrary dealloc]
  -[VUIAggregateMediaLibrary .cxx_destruct]
  -[VUIAggregateMediaLibrary title]
  -[VUIAggregateMediaLibrary isUpdating]
  -[VUIAggregateMediaLibrary connectionState]
  -[VUIAggregateMediaLibrary deviceMediaLibrary]
  -[VUIAggregateMediaLibrary enqueueFetchRequests:completionHandler:]
  -[VUIAggregateMediaLibrary initWithManager:deviceMediaLibrary:sidebandMediaLibrary:]
  -[VUIAggregateMediaLibrary sidebandMediaLibrary]
  -[VUIAggregateMediaLibrary enqueueMediaItemEntityTypesFetchWithCompletionHandler:]
  -[VUIAggregateMediaLibrary saveMediaEntity:completionHandler:]
  -[VUIAggregateMediaLibrary _imageLoaderIdentifier]
  -[VUIAggregateMediaLibrary _imageLoadParamsForImageLoaderObject:]
  -[VUIAggregateMediaLibrary _imageLoadOperationWithParams:scaleToSize:cropToFit:]
  -[VUIAggregateMediaLibrary isInitialUpdateInProgress]
  -[VUIAggregateMediaLibrary updateProgressWithCompletionHandler:]
  -[VUIAggregateMediaLibrary updateFromCloudWithReason:]
  -[VUIAggregateMediaLibrary connectWithCompletionHandler:progressHandler:]
  -[VUIAggregateMediaLibrary _deviceMediaLibraryContentsDidChange:]
  -[VUIAggregateMediaLibrary _sidebandMediaLibraryContentsDidChangeNotification:]


VUIMediaItemEntityTypesFetchControllerOperation : VUIMediaLibraryOperation
 @property  long long fetchReason
 @property  VUIMediaItemEntityTypesFetchControllerResult *result
 @property  VUIMediaItemEntityTypesFetchResponse *currentFetchResponse

  // class methods
  +[VUIMediaItemEntityTypesFetchControllerOperation _changeSetFromMediaItemEntityTypes:toMediaItemEntityTypes:]

  // instance methods
  -[VUIMediaItemEntityTypesFetchControllerOperation .cxx_destruct]
  -[VUIMediaItemEntityTypesFetchControllerOperation result]
  -[VUIMediaItemEntityTypesFetchControllerOperation setResult:]
  -[VUIMediaItemEntityTypesFetchControllerOperation executionDidBegin]
  -[VUIMediaItemEntityTypesFetchControllerOperation initWithMediaLibrary:]
  -[VUIMediaItemEntityTypesFetchControllerOperation fetchReason]
  -[VUIMediaItemEntityTypesFetchControllerOperation initWithMediaLibrary:fetchReason:]
  -[VUIMediaItemEntityTypesFetchControllerOperation setCurrentFetchResponse:]
  -[VUIMediaItemEntityTypesFetchControllerOperation setFetchReason:]
  -[VUIMediaItemEntityTypesFetchControllerOperation currentFetchResponse]


VUIJSMediaEntityType : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSMediaEntityTypeExport>
 @property  NSString *subtype
 @property  NSString *category
 @property  NSString *collectionType

  // class methods
  +[VUIJSMediaEntityType show]
  +[VUIJSMediaEntityType movie]
  +[VUIJSMediaEntityType season]
  +[VUIJSMediaEntityType episode]
  +[VUIJSMediaEntityType rental]
  +[VUIJSMediaEntityType homeVideo]

  // instance methods
  -[VUIJSMediaEntityType .cxx_destruct]
  -[VUIJSMediaEntityType category]
  -[VUIJSMediaEntityType setCategory:]
  -[VUIJSMediaEntityType subtype]
  -[VUIJSMediaEntityType setSubtype:]
  -[VUIJSMediaEntityType collectionType]
  -[VUIJSMediaEntityType setCollectionType:]
  -[VUIJSMediaEntityType initWithAppContext:]
  -[VUIJSMediaEntityType initWithMediaEntitySubtype:category:collectionType:appContext:]


VUIPopoverGroup : NSObject /usr/lib/libSystem.B.dylib
 @property  IKViewElement *groupElement
 @property  IKImageElement *downImageElement
 @property  IKImageElement *upImageElement
 @property  IKTextElement *titleElement
 @property  TVImageProxy *downImageProxy
 @property  TVImageProxy *upImageProxy
 @property  NSArray *groupOptions
 @property  UIColor *highlightColor

  // instance methods
  -[VUIPopoverGroup init]
  -[VUIPopoverGroup .cxx_destruct]
  -[VUIPopoverGroup _init]
  -[VUIPopoverGroup groupOptions]
  -[VUIPopoverGroup highlightColor]
  -[VUIPopoverGroup titleElement]
  -[VUIPopoverGroup initWithViewElement:]
  -[VUIPopoverGroup _populateWithElement:]
  -[VUIPopoverGroup groupElement]
  -[VUIPopoverGroup downImageElement]
  -[VUIPopoverGroup upImageElement]
  -[VUIPopoverGroup downImageProxy]
  -[VUIPopoverGroup upImageProxy]


VUISidebandSeriesMediaCollection : VUIMediaCollection
 @property  VUITVSeriesManagedObject *seriesManagedObject

  // instance methods
  -[VUISidebandSeriesMediaCollection .cxx_destruct]
  -[VUISidebandSeriesMediaCollection title]
  -[VUISidebandSeriesMediaCollection isLocal]
  -[VUISidebandSeriesMediaCollection canonicalID]
  -[VUISidebandSeriesMediaCollection HLSColorCapability]
  -[VUISidebandSeriesMediaCollection colorCapability]
  -[VUISidebandSeriesMediaCollection seasonCount]
  -[VUISidebandSeriesMediaCollection showIdentifier]
  -[VUISidebandSeriesMediaCollection initWithMediaLibrary:seriesManagedObject:requestedProperties:]
  -[VUISidebandSeriesMediaCollection seriesManagedObject]
  -[VUISidebandSeriesMediaCollection setSeriesManagedObject:]


VUIJSLocationInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSLocationInterface>
  // instance methods
  -[VUIJSLocationInterface dealloc]
  -[VUIJSLocationInterface authorizationStatus]
  -[VUIJSLocationInterface initWithAppContext:]
  -[VUIJSLocationInterface _authorizationStatusDidChange:]
  -[VUIJSLocationInterface _locationDidChange:]
  -[VUIJSLocationInterface requestAuthorization]
  -[VUIJSLocationInterface shouldUpdateUserLocation]


VUISpinnerHeaderView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <PSHeaderFooterView>
  // instance methods
  -[VUISpinnerHeaderView .cxx_destruct]
  -[VUISpinnerHeaderView layoutSubviews]
  -[VUISpinnerHeaderView initWithSpecifier:]
  -[VUISpinnerHeaderView preferredHeightForWidth:]
  -[VUISpinnerHeaderView showSpinner]
  -[VUISpinnerHeaderView hideText]
  -[VUISpinnerHeaderView hideSpinner]
  -[VUISpinnerHeaderView showText]


VideosExtrasJSITunesStore : IKJSITunesStore /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <SKStoreProductViewControllerDelegatePrivate, VideosExtrasJSITunesStore, IKJSITunesStore>
 @property  UIViewController *formPresentationViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VideosExtrasJSITunesStore .cxx_destruct]
  -[VideosExtrasJSITunesStore setFormPresentationViewController:]
  -[VideosExtrasJSITunesStore formPresentationViewController]
  -[VideosExtrasJSITunesStore loadStoreURL:playOnLaunch:]


VUIBookmark : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  BOOL hasFakeTimestamp
 @property  VUIBookmarkKey *key
 @property  double bookmarkTime
 @property  NSDate *bookmarkTimestamp
 @property  unsigned long playCount
 @property  BOOL hasBeenPlayed
 @property  BOOL hasBeenRented
 @property  BOOL isMarkedAsUnwatched

  // class methods
  +[VUIBookmark supportsSecureCoding]

  // instance methods
  -[VUIBookmark init]
  -[VUIBookmark copyWithZone:]
  -[VUIBookmark mutableCopyWithZone:]
  -[VUIBookmark key]
  -[VUIBookmark encodeWithCoder:]
  -[VUIBookmark initWithCoder:]
  -[VUIBookmark .cxx_destruct]
  -[VUIBookmark initWithKey:]
  -[VUIBookmark playCount]
  -[VUIBookmark bookmarkTime]
  -[VUIBookmark hasBeenPlayed]
  -[VUIBookmark bookmarkTimestamp]
  -[VUIBookmark hasBeenRented]
  -[VUIBookmark isMarkedAsUnwatched]
  -[VUIBookmark hasFakeTimestamp]
  -[VUIBookmark _copyWithResultClass:]
  -[VUIBookmark _setBookmarkTimeWithoutUpdatingTimestamp:]
  -[VUIBookmark _setBookmarkTimestamp:]
  -[VUIBookmark _setPlayCount:]
  -[VUIBookmark _setHasBeenPlayed:]
  -[VUIBookmark _setHasBeenRented:]
  -[VUIBookmark _setIsMarkedAsUnwatched:]
  -[VUIBookmark hasRemoteData]
  -[VUIBookmark setHasFakeTimestamp:]


VUIMutableBookmark : VUIBookmark
  // class methods
  +[VUIMutableBookmark supportsSecureCoding]

  // instance methods
  -[VUIMutableBookmark setPlayCount:]
  -[VUIMutableBookmark setHasBeenPlayed:]
  -[VUIMutableBookmark setBookmarkTimestamp:]
  -[VUIMutableBookmark setBookmarkTime:]
  -[VUIMutableBookmark setHasBeenRented:]
  -[VUIMutableBookmark setIsMarkedAsUnwatched:]


VUIAppleTVChannelLogoView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUIAppleTVChannelLogoLayout *layout
 @property  _TVImageView *appleTVImageView
 @property  VUILabel *channelsLabel
 @property  _TVImageView *channelLogoView

  // class methods
  +[VUIAppleTVChannelLogoView logoViewWithChannelImageElement:layout:existingView:]

  // instance methods
  -[VUIAppleTVChannelLogoView .cxx_destruct]
  -[VUIAppleTVChannelLogoView layout]
  -[VUIAppleTVChannelLogoView setLayout:]
  -[VUIAppleTVChannelLogoView sizeThatFits:]
  -[VUIAppleTVChannelLogoView layoutSubviews]
  -[VUIAppleTVChannelLogoView _layoutSubviewsWithSize:computationOnly:]
  -[VUIAppleTVChannelLogoView channelLogoView]
  -[VUIAppleTVChannelLogoView setChannelLogoView:]
  -[VUIAppleTVChannelLogoView setAppleTVImageView:]
  -[VUIAppleTVChannelLogoView setChannelsLabel:]
  -[VUIAppleTVChannelLogoView appleTVImageView]
  -[VUIAppleTVChannelLogoView channelsLabel]


VUIMPMediaEntityImageLoadParams : NSObject /usr/lib/libSystem.B.dylib <VUIImageLoadParams>
 @property  BOOL calculatedIdentifier
 @property  MPMediaItem *mediaItem
 @property  MPArtworkCatalog *artworkCatalog
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long imageType
 @property  NSString *imageIdentifier

  // instance methods
  -[VUIMPMediaEntityImageLoadParams init]
  -[VUIMPMediaEntityImageLoadParams isEqual:]
  -[VUIMPMediaEntityImageLoadParams .cxx_destruct]
  -[VUIMPMediaEntityImageLoadParams imageType]
  -[VUIMPMediaEntityImageLoadParams mediaItem]
  -[VUIMPMediaEntityImageLoadParams setMediaItem:]
  -[VUIMPMediaEntityImageLoadParams artworkCatalog]
  -[VUIMPMediaEntityImageLoadParams imageIdentifier]
  -[VUIMPMediaEntityImageLoadParams setArtworkCatalog:]
  -[VUIMPMediaEntityImageLoadParams initWithMediaItem:andImageType:]
  -[VUIMPMediaEntityImageLoadParams calculatedIdentifier]
  -[VUIMPMediaEntityImageLoadParams setCalculatedIdentifier:]


VUIAppDocumentModifiedUpNextEvent : VUIAppDocumentUpdateEvent <NSCopying>
 @property  NSSet *addedCanonicalIDs
 @property  NSSet *removedCanonicalIDs

  // instance methods
  -[VUIAppDocumentModifiedUpNextEvent isEqual:]
  -[VUIAppDocumentModifiedUpNextEvent copyWithZone:]
  -[VUIAppDocumentModifiedUpNextEvent .cxx_destruct]
  -[VUIAppDocumentModifiedUpNextEvent dictionaryRepresentation]
  -[VUIAppDocumentModifiedUpNextEvent initWithDescriptor:]
  -[VUIAppDocumentModifiedUpNextEvent removedCanonicalIDs]
  -[VUIAppDocumentModifiedUpNextEvent setRemovedCanonicalIDs:]
  -[VUIAppDocumentModifiedUpNextEvent coalescedEvent:]
  -[VUIAppDocumentModifiedUpNextEvent initWithAction:canonicalID:]
  -[VUIAppDocumentModifiedUpNextEvent initWithAddedCanonicalIDs:removedCanonicalIDs:]
  -[VUIAppDocumentModifiedUpNextEvent addedCanonicalIDs]
  -[VUIAppDocumentModifiedUpNextEvent setAddedCanonicalIDs:]


VUICollectionHeaderViewLayout : TVViewLayout /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit
 @property  TVImageLayout *imageViewLayout
 @property  VUITextLayout *titleTextLayout
 @property  VUITextLayout *subtitleTextLayout

  // class methods
  +[VUICollectionHeaderViewLayout layoutWithLayout:element:]

  // instance methods
  -[VUICollectionHeaderViewLayout init]
  -[VUICollectionHeaderViewLayout .cxx_destruct]
  -[VUICollectionHeaderViewLayout titleTextLayout]
  -[VUICollectionHeaderViewLayout subtitleTextLayout]
  -[VUICollectionHeaderViewLayout imageViewLayout]
  -[VUICollectionHeaderViewLayout setImageViewLayout:]


VUIAppDocumentUpdateEvent : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  VUIAppDocumentUpdateEventDescriptor *descriptor
 @property  NSDictionary *dictionaryRepresentation

  // class methods
  +[VUIAppDocumentUpdateEvent entitlements]
  +[VUIAppDocumentUpdateEvent settings]
  +[VUIAppDocumentUpdateEvent restrictions]
  +[VUIAppDocumentUpdateEvent favorites]
  +[VUIAppDocumentUpdateEvent purchases]
  +[VUIAppDocumentUpdateEvent preferredVideoFormat]
  +[VUIAppDocumentUpdateEvent accountChanged]
  +[VUIAppDocumentUpdateEvent appDidBecomeActive]
  +[VUIAppDocumentUpdateEvent playActivity]
  +[VUIAppDocumentUpdateEvent removeFromPlayHistory]
  +[VUIAppDocumentUpdateEvent utsk]
  +[VUIAppDocumentUpdateEvent playHistoryUpdated]
  +[VUIAppDocumentUpdateEvent clearPlayHistory]
  +[VUIAppDocumentUpdateEvent appRefresh]
  +[VUIAppDocumentUpdateEvent locationAuthorizationChanged]
  +[VUIAppDocumentUpdateEvent locationRetrieved]

  // instance methods
  -[VUIAppDocumentUpdateEvent init]
  -[VUIAppDocumentUpdateEvent isEqual:]
  -[VUIAppDocumentUpdateEvent copyWithZone:]
  -[VUIAppDocumentUpdateEvent .cxx_destruct]
  -[VUIAppDocumentUpdateEvent dictionaryRepresentation]
  -[VUIAppDocumentUpdateEvent descriptor]
  -[VUIAppDocumentUpdateEvent setDescriptor:]
  -[VUIAppDocumentUpdateEvent initWithDescriptor:]
  -[VUIAppDocumentUpdateEvent coalescedEvent:]


VUIOfferListContainerView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UICollectionView *collectionView

  // instance methods
  -[VUIOfferListContainerView .cxx_destruct]
  -[VUIOfferListContainerView layoutSubviews]
  -[VUIOfferListContainerView collectionView]
  -[VUIOfferListContainerView setCollectionView:]


VUIOfferListTemplateController : _TVBgImageLoadingViewController /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, _TVCollectionViewDelegate, UIGestureRecognizerDelegate>
 @property  UICollectionView *collectionView
 @property  IKSectionElement *sectionElement
 @property  IKHeaderElement *headerElement
 @property  IKViewElement *footerElement
 @property  VUIListLockupCollectionViewCell *computationCell
 @property  VUICollectionHeaderView *computationHeaderView
 @property  VUICollectionFooterView *computationFooterView
 @property  VUIOfferListContainerView *containerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[VUIOfferListTemplateController .cxx_destruct]
  -[VUIOfferListTemplateController didCancel]
  -[VUIOfferListTemplateController loadView]
  -[VUIOfferListTemplateController traitCollectionDidChange:]
  -[VUIOfferListTemplateController containerView]
  -[VUIOfferListTemplateController setContainerView:]
  -[VUIOfferListTemplateController collectionView]
  -[VUIOfferListTemplateController collectionView:numberOfItemsInSection:]
  -[VUIOfferListTemplateController collectionView:cellForItemAtIndexPath:]
  -[VUIOfferListTemplateController viewWillTransitionToSize:withTransitionCoordinator:]
  -[VUIOfferListTemplateController viewDidLayoutSubviews]
  -[VUIOfferListTemplateController collectionView:viewForSupplementaryElementOfKind:atIndexPath:]
  -[VUIOfferListTemplateController setCollectionView:]
  -[VUIOfferListTemplateController collectionView:shouldHighlightItemAtIndexPath:]
  -[VUIOfferListTemplateController collectionView:didSelectItemAtIndexPath:]
  -[VUIOfferListTemplateController collectionView:willDisplayCell:forItemAtIndexPath:]
  -[VUIOfferListTemplateController collectionView:layout:sizeForItemAtIndexPath:]
  -[VUIOfferListTemplateController collectionView:layout:referenceSizeForHeaderInSection:]
  -[VUIOfferListTemplateController collectionView:layout:referenceSizeForFooterInSection:]
  -[VUIOfferListTemplateController headerElement]
  -[VUIOfferListTemplateController updateWithViewElement:]
  -[VUIOfferListTemplateController footerElement]
  -[VUIOfferListTemplateController setHeaderElement:]
  -[VUIOfferListTemplateController setFooterElement:]
  -[VUIOfferListTemplateController computationCell]
  -[VUIOfferListTemplateController setComputationCell:]
  -[VUIOfferListTemplateController computationHeaderView]
  -[VUIOfferListTemplateController setComputationHeaderView:]
  -[VUIOfferListTemplateController computationFooterView]
  -[VUIOfferListTemplateController setComputationFooterView:]
  -[VUIOfferListTemplateController sectionElement]
  -[VUIOfferListTemplateController setSectionElement:]


VUIMediaPlayerImageLoader : NSObject /usr/lib/libSystem.B.dylib <TVImageLoader>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIMediaPlayerImageLoader sharedInstance]
  +[VUIMediaPlayerImageLoader isMediaPlayerImage:]

  // instance methods
  -[VUIMediaPlayerImageLoader init]
  -[VUIMediaPlayerImageLoader dealloc]
  -[VUIMediaPlayerImageLoader .cxx_destruct]
  -[VUIMediaPlayerImageLoader _init]
  -[VUIMediaPlayerImageLoader imageKeyForObject:]
  -[VUIMediaPlayerImageLoader loadImageForObject:scaleToSize:cropToFit:imageDirection:requestLoader:completionHandler:]
  -[VUIMediaPlayerImageLoader cancelLoad:]


_VUIMediaPlayerImageLoaderConfiguration : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL screenshot
 @property  {CGSize=dd} imageSize
 @property  NSNumber *persistentidentifier
 @property  NSURL *sourceURL
 @property  NSNumber *storeIdentifier

  // instance methods
  -[_VUIMediaPlayerImageLoaderConfiguration isEqual:]
  -[_VUIMediaPlayerImageLoaderConfiguration .cxx_destruct]
  -[_VUIMediaPlayerImageLoaderConfiguration initWithDictionary:]
  -[_VUIMediaPlayerImageLoaderConfiguration imageSize]
  -[_VUIMediaPlayerImageLoaderConfiguration setImageSize:]
  -[_VUIMediaPlayerImageLoaderConfiguration storeIdentifier]
  -[_VUIMediaPlayerImageLoaderConfiguration sourceURL]
  -[_VUIMediaPlayerImageLoaderConfiguration setSourceURL:]
  -[_VUIMediaPlayerImageLoaderConfiguration setStoreIdentifier:]
  -[_VUIMediaPlayerImageLoaderConfiguration isScreenshot]
  -[_VUIMediaPlayerImageLoaderConfiguration persistentidentifier]
  -[_VUIMediaPlayerImageLoaderConfiguration _populateValuesFromQueryItems]
  -[_VUIMediaPlayerImageLoaderConfiguration setPersistentidentifier:]
  -[_VUIMediaPlayerImageLoaderConfiguration setScreenshot:]


_VUIMediaPlayerImageLoaderOperationSet : NSObject /usr/lib/libSystem.B.dylib
 @property  <MPArtworkDataSource> *dataSource
 @property  MPArtworkCatalog *artworkCatalog

  // instance methods
  -[_VUIMediaPlayerImageLoaderOperationSet .cxx_destruct]
  -[_VUIMediaPlayerImageLoaderOperationSet dataSource]
  -[_VUIMediaPlayerImageLoaderOperationSet setDataSource:]
  -[_VUIMediaPlayerImageLoaderOperationSet artworkCatalog]
  -[_VUIMediaPlayerImageLoaderOperationSet setArtworkCatalog:]


VUIAppInstallView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUISBIconProgressViewDelegate>
 @property  UIImage *appIcon
 @property  double installProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[VUIAppInstallView _progressMaskImage]
  +[VUIAppInstallView _appIconSize]
  +[VUIAppInstallView _appIconRadius]

  // instance methods
  -[VUIAppInstallView dealloc]
  -[VUIAppInstallView .cxx_destruct]
  -[VUIAppInstallView installProgress]
  -[VUIAppInstallView intrinsicContentSize]
  -[VUIAppInstallView initWithFrame:]
  -[VUIAppInstallView layoutSubviews]
  -[VUIAppInstallView progressViewCanBeRemoved:]
  -[VUIAppInstallView appIcon]
  -[VUIAppInstallView setAppIcon:]
  -[VUIAppInstallView setInstallProgress:]
  -[VUIAppInstallView finishInstallationWithCompletion:]
  -[VUIAppInstallView setWaiting]


VUIMPMediaItemCollectionAssetController : NSObject /usr/lib/libSystem.B.dylib <VUIMediaEntityAssetControllerDelegate, VUIMediaEntityAssetController>
 @property  NSObject<VUIMediaEntityIdentifier> *mediaEntityIdentifier
 @property  VUIMediaEntityAssetControllerState *state
 @property  MPMediaItemCollection *mediaItemCollection
 @property  NSObject<OS_dispatch_queue> *serialProcessingDispatchQueue
 @property  NSArray *assetControllers
 @property  unsigned long fullyDownloadedAssetBytes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  VUIMediaEntityType *mediaEntityType
 @property  <VUIMediaEntityAssetControllerDelegate> *delegate
 @property  BOOL supportsStartingDownload
 @property  NSObject<OS_dispatch_queue> *completionDispatchQueue

  // class methods
  +[VUIMPMediaItemCollectionAssetController _downloadingAssetControllersWithAssetControllers:]
  +[VUIMPMediaItemCollectionAssetController _stateFromDownloadingAssetControllers:fullyDownloadedAssetBytes:]

  // instance methods
  -[VUIMPMediaItemCollectionAssetController init]
  -[VUIMPMediaItemCollectionAssetController dealloc]
  -[VUIMPMediaItemCollectionAssetController invalidate]
  -[VUIMPMediaItemCollectionAssetController delegate]
  -[VUIMPMediaItemCollectionAssetController setDelegate:]
  -[VUIMPMediaItemCollectionAssetController .cxx_destruct]
  -[VUIMPMediaItemCollectionAssetController state]
  -[VUIMPMediaItemCollectionAssetController setState:]
  -[VUIMPMediaItemCollectionAssetController mediaEntityType]
  -[VUIMPMediaItemCollectionAssetController completionDispatchQueue]
  -[VUIMPMediaItemCollectionAssetController resumeDownload]
  -[VUIMPMediaItemCollectionAssetController cancelAndRemoveDownload]
  -[VUIMPMediaItemCollectionAssetController serialProcessingDispatchQueue]
  -[VUIMPMediaItemCollectionAssetController _enqueueCompletionQueueBlock:]
  -[VUIMPMediaItemCollectionAssetController setCompletionDispatchQueue:]
  -[VUIMPMediaItemCollectionAssetController setSerialProcessingDispatchQueue:]
  -[VUIMPMediaItemCollectionAssetController mediaItemCollection]
  -[VUIMPMediaItemCollectionAssetController initWithMediaItemCollection:mediaEntityIdentifier:serialProcessingDispatchQueue:]
  -[VUIMPMediaItemCollectionAssetController mediaEntityAssetController:stateDidChange:]
  -[VUIMPMediaItemCollectionAssetController supportsStartingDownload]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_invalidate]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_pauseDownload]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_resumeDownload]
  -[VUIMPMediaItemCollectionAssetController startDownloadWithCompletion:]
  -[VUIMPMediaItemCollectionAssetController pauseDownload]
  -[VUIMPMediaItemCollectionAssetController mediaEntityIdentifier]
  -[VUIMPMediaItemCollectionAssetController setMediaItemCollection:]
  -[VUIMPMediaItemCollectionAssetController _enqueueAsyncProcessingQueueStrongSelfBlock:]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_startDownloadWithCompletion:]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_cancelAndRemoveDownload]
  -[VUIMPMediaItemCollectionAssetController _notifyDelegateStateDidChange:]
  -[VUIMPMediaItemCollectionAssetController setMediaEntityIdentifier:]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_updateStateAndNotifyDelegate:]
  -[VUIMPMediaItemCollectionAssetController fullyDownloadedAssetBytes]
  -[VUIMPMediaItemCollectionAssetController setFullyDownloadedAssetBytes:]
  -[VUIMPMediaItemCollectionAssetController assetControllers]
  -[VUIMPMediaItemCollectionAssetController setAssetControllers:]
  -[VUIMPMediaItemCollectionAssetController _onProcessingQueue_setState:andNotifyDelegate:]
  -[VUIMPMediaItemCollectionAssetController _allAssetsDownloaded]


VUIJSMetricsInterface : IKJSObject /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit <VUIJSMetricsInterface>
  // instance methods
  -[VUIJSMetricsInterface recordEvent:]
  -[VUIJSMetricsInterface initWithAppContext:]
  -[VUIJSMetricsInterface recordPerfEvent:]
  -[VUIJSMetricsInterface recordLogEvent:]


VUIMediaEntitiesFetchOperation : NSOperation /usr/lib/libMobileGestalt.dylib
 @property  IKAppContext *appContext
 @property  NSString *mediaEntitySubtype
 @property  NSDictionary *options
 @property  NSArray *mediaEntities
 @property  NSString *mediaCategory
 @property  NSString *mediaCollectionType

  // class methods
  +[VUIMediaEntitiesFetchOperation _numberForObject:]
  +[VUIMediaEntitiesFetchOperation _timeIntervalNumberForObject:]
  +[VUIMediaEntitiesFetchOperation _mpPropertiesForProperties:]
  +[VUIMediaEntitiesFetchOperation _mpOrderingDirectionMappingForSortDirectionMapping:]

  // instance methods
  -[VUIMediaEntitiesFetchOperation init]
  -[VUIMediaEntitiesFetchOperation options]
  -[VUIMediaEntitiesFetchOperation .cxx_destruct]
  -[VUIMediaEntitiesFetchOperation main]
  -[VUIMediaEntitiesFetchOperation setOptions:]
  -[VUIMediaEntitiesFetchOperation _prepare]
  -[VUIMediaEntitiesFetchOperation _mediaQuery]
  -[VUIMediaEntitiesFetchOperation appContext]
  -[VUIMediaEntitiesFetchOperation setAppContext:]
  -[VUIMediaEntitiesFetchOperation mediaCategory]
  -[VUIMediaEntitiesFetchOperation setMediaCategory:]
  -[VUIMediaEntitiesFetchOperation mediaEntities]
  -[VUIMediaEntitiesFetchOperation setMediaEntities:]
  -[VUIMediaEntitiesFetchOperation _isItemsFetch]
  -[VUIMediaEntitiesFetchOperation _isCollectionsFetch]
  -[VUIMediaEntitiesFetchOperation setMediaEntitySubtype:]
  -[VUIMediaEntitiesFetchOperation initWithAppContext:options:]
  -[VUIMediaEntitiesFetchOperation mediaCollectionType]
  -[VUIMediaEntitiesFetchOperation setMediaCollectionType:]
  -[VUIMediaEntitiesFetchOperation _baseMediaQuery]
  -[VUIMediaEntitiesFetchOperation mediaEntitySubtype]
  -[VUIMediaEntitiesFetchOperation _addPredicatesToMediaQuery:withFilters:]
  -[VUIMediaEntitiesFetchOperation _setSortOrderingForMediaQuery:withSortProperties:sortDirectionMapping:]
  -[VUIMediaEntitiesFetchOperation _addPrefetchPropertiesToMediaQuery:prefetchProperties:]


VUIChannelBannerViewController : UIViewController /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore <VUIProductUberBackgroundInterface>
 @property  IKViewElement *viewElement
 @property  VUIChannelBannerView *bannerView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isUberLayoutActive
 @property  {CGSize=dd} size
 @property  double topThreshold

  // instance methods
  -[VUIChannelBannerViewController .cxx_destruct]
  -[VUIChannelBannerViewController size]
  -[VUIChannelBannerViewController initWithNibName:bundle:]
  -[VUIChannelBannerViewController bannerView]
  -[VUIChannelBannerViewController viewElement]
  -[VUIChannelBannerViewController setViewElement:]
  -[VUIChannelBannerViewController isUberLayoutActive]
  -[VUIChannelBannerViewController setUberImageOffset:]
  -[VUIChannelBannerViewController setBannerOpacity:]
  -[VUIChannelBannerViewController topThreshold]


VUIWatchNowTemplateBackgroundLayer : CAGradientLayer /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices
 @property  long long uiStyle

  // instance methods
  -[VUIWatchNowTemplateBackgroundLayer drawInContext:]
  -[VUIWatchNowTemplateBackgroundLayer updateStyle:]
  -[VUIWatchNowTemplateBackgroundLayer initWithRect:withStyle:]
  -[VUIWatchNowTemplateBackgroundLayer uiStyle]
  -[VUIWatchNowTemplateBackgroundLayer setUiStyle:]


VUIFavoriteBannerLayout : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL isPreModeBanner
 @property  {TVCornerRadii=dddd} borderRadii
 @property  {UIEdgeInsets=dddd} margin
 @property  UIColor *backgroundColor
 @property  UIColor *highlightedBackgroundColor
 @property  double bannerMinHeight
 @property  double maxTextWidth
 @property  double subtitleBaseLine
 @property  VUITextLayout *titleLayout
 @property  VUITextLayout *subtitleLayout
 @property  TVImageLayout *imageLayout
 @property  unsigned long bannerStyle

  // class methods
  +[VUIFavoriteBannerLayout postModeBannerLayout]
  +[VUIFavoriteBannerLayout preModeBannerLayout]

  // instance methods
  -[VUIFavoriteBannerLayout .cxx_destruct]
  -[VUIFavoriteBannerLayout backgroundColor]
  -[VUIFavoriteBannerLayout margin]
  -[VUIFavoriteBannerLayout highlightedBackgroundColor]
  -[VUIFavoriteBannerLayout borderRadii]
  -[VUIFavoriteBannerLayout bannerStyle]
  -[VUIFavoriteBannerLayout titleLayout]
  -[VUIFavoriteBannerLayout imageLayout]
  -[VUIFavoriteBannerLayout maxTextWidth]
  -[VUIFavoriteBannerLayout subtitleLayout]
  -[VUIFavoriteBannerLayout isPreModeBanner]
  -[VUIFavoriteBannerLayout subtitleBaseLine]
  -[VUIFavoriteBannerLayout bannerMinHeight]
  -[VUIFavoriteBannerLayout initWithBannerType:]


VUIPlaybackReporterSession : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<TVPPlayback> *player
 @property  id context
 @property  NSString *UUID
 @property  BOOL reportingEnabled

  // class methods
  +[VUIPlaybackReporterSession transitionTypeForMediaControllerAutoStart:]
  +[VUIPlaybackReporterSession transitionReasonForMediaControllerStartReason:autoStart:]
  +[VUIPlaybackReporterSession transitionReasonForMediaControllerStopReason:autoStart:]

  // instance methods
  -[VUIPlaybackReporterSession .cxx_destruct]
  -[VUIPlaybackReporterSession UUID]
  -[VUIPlaybackReporterSession context]
  -[VUIPlaybackReporterSession setContext:]
  -[VUIPlaybackReporterSession player]
  -[VUIPlaybackReporterSession setPlayer:]
  -[VUIPlaybackReporterSession reportingEnabled]
  -[VUIPlaybackReporterSession consumeMetadataForKey:]
  -[VUIPlaybackReporterSession consumeStopType]
  -[VUIPlaybackReporterSession consumeStopReason]
  -[VUIPlaybackReporterSession consumeStartType]
  -[VUIPlaybackReporterSession consumeStartReason]
  -[VUIPlaybackReporterSession initWithPlayer:context:]
  -[VUIPlaybackReporterSession setReportingEnabled:]
  -[VUIPlaybackReporterSession setMetadata:forKey:]
  -[VUIPlaybackReporterSession metadataForKey:]


VUICollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIView *childView

  // instance methods
  -[VUICollectionViewCell .cxx_destruct]
  -[VUICollectionViewCell prepareForReuse]
  -[VUICollectionViewCell canBecomeFocused]
  -[VUICollectionViewCell sizeThatFits:]
  -[VUICollectionViewCell layoutSubviews]
  -[VUICollectionViewCell setChildView:]
  -[VUICollectionViewCell childView]


VUIProductBannerCastInfoView : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  VUICastInfoLayout *layout
 @property  IKViewElement *viewElement
 @property  NSArray *labels

  // class methods
  +[VUIProductBannerCastInfoView configureViewWithItems:existingView:]

  // instance methods
  -[VUIProductBannerCastInfoView .cxx_destruct]
  -[VUIProductBannerCastInfoView labels]
  -[VUIProductBannerCastInfoView setLabels:]
  -[VUIProductBannerCastInfoView layout]
  -[VUIProductBannerCastInfoView setLayout:]
  -[VUIProductBannerCastInfoView traitCollectionDidChange:]
  -[VUIProductBannerCastInfoView sizeThatFits:]
  -[VUIProductBannerCastInfoView layoutSubviews]
  -[VUIProductBannerCastInfoView _updateTextColor]
  -[VUIProductBannerCastInfoView viewElement]
  -[VUIProductBannerCastInfoView setViewElement:]
  -[VUIProductBannerCastInfoView _layoutSubviewsWithSize:computationOnly:]


VUITextBadge : UIView /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore
 @property  UIColor *tintColor
 @property  double fontSize
 @property  NSString *title
 @property  NSAttributedString *attributedTitle
 @property  int textBlendMode
 @property  double strokeSize
 @property  {UIEdgeInsets=dddd} badgeInsets
 @property  double cornerRadius
 @property  UIImage *backgroundImage
 @property  unsigned long badgeStyle

  // class methods
  +[VUITextBadge attributedTextFromString:fontColor:fontSize:]

  // instance methods
  -[VUITextBadge .cxx_destruct]
  -[VUITextBadge setAttributedTitle:]
  -[VUITextBadge attributedTitle]
  -[VUITextBadge title]
  -[VUITextBadge setTitle:]
  -[VUITextBadge backgroundImage]
  -[VUITextBadge setBackgroundImage:]
  -[VUITextBadge fontSize]
  -[VUITextBadge setFontSize:]
  -[VUITextBadge initWithFrame:]
  -[VUITextBadge setCornerRadius:]
  -[VUITextBadge sizeThatFits:]
  -[VUITextBadge tintColor]
  -[VUITextBadge setTintColor:]
  -[VUITextBadge cornerRadius]
  -[VUITextBadge drawRect:]
  -[VUITextBadge _textSize]
  -[VUITextBadge setBadgeStyle:]
  -[VUITextBadge badgeStyle]
  -[VUITextBadge initWithTitle:tintColor:fontSize:cornerRadius:]
  -[VUITextBadge setStrokeSize:]
  -[VUITextBadge setBadgeInsets:]
  -[VUITextBadge strokeSize]
  -[VUITextBadge initWithAttributedString:tintColor:cornerRadius:]
  -[VUITextBadge textBlendMode]
  -[VUITextBadge setTextBlendMode:]
  -[VUITextBadge badgeInsets]


VUIDocumentUIConfiguration : NSObject /usr/lib/libSystem.B.dylib
 @property  long long type
 @property  NSString *viewControllerIdentifier
 @property  BOOL animated
 @property  BOOL navigationBarHidden
 @property  BOOL navigationBarAdjustedToSizeClass

  // class methods
  +[VUIDocumentUIConfiguration uiConfigurationWithDict:]
  +[VUIDocumentUIConfiguration _presentationTypeFromString:]
  +[VUIDocumentUIConfiguration _preferredSizeFromConfig:]

  // instance methods
  -[VUIDocumentUIConfiguration type]
  -[VUIDocumentUIConfiguration setType:]
  -[VUIDocumentUIConfiguration .cxx_destruct]
  -[VUIDocumentUIConfiguration isAnimated]
  -[VUIDocumentUIConfiguration isNavigationBarHidden]
  -[VUIDocumentUIConfiguration setNavigationBarHidden:]
  -[VUIDocumentUIConfiguration setAnimated:]
  -[VUIDocumentUIConfiguration viewControllerIdentifier]
  -[VUIDocumentUIConfiguration isNavigationBarAdjustedToSizeClass]
  -[VUIDocumentUIConfiguration setViewControllerIdentifier:]
  -[VUIDocumentUIConfiguration setNavigationBarAdjustedToSizeClass:]


VUIDocumentUIConfigurationModal : VUIDocumentUIConfiguration
 @property  BOOL modalOverModalAllowed

  // instance methods
  -[VUIDocumentUIConfigurationModal isModalOverModalAllowed]
  -[VUIDocumentUIConfigurationModal setModalOverModalAllowed:]


VUIDocumentUIConfigurationFormSheet : VUIDocumentUIConfigurationModal
 @property  {CGSize=dd} preferredSize
 @property  BOOL tapDissmissable

  // instance methods
  -[VUIDocumentUIConfigurationFormSheet preferredSize]
  -[VUIDocumentUIConfigurationFormSheet setPreferredSize:]
  -[VUIDocumentUIConfigurationFormSheet isTapDissmissable]
  -[VUIDocumentUIConfigurationFormSheet setTapDissmissable:]


VUIDocumentUIConfigurationPopover : VUIDocumentUIConfigurationModal
 @property  {CGSize=dd} preferredSize
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceRect
 @property  unsigned long popOverArrowDirection
 @property  UIView *sourceView
 @property  UIBarButtonItem *popOverSourceBarButtonItem
 @property  BOOL presentationAdjustedToSizeClass

  // instance methods
  -[VUIDocumentUIConfigurationPopover .cxx_destruct]
  -[VUIDocumentUIConfigurationPopover preferredSize]
  -[VUIDocumentUIConfigurationPopover setPreferredSize:]
  -[VUIDocumentUIConfigurationPopover sourceView]
  -[VUIDocumentUIConfigurationPopover sourceRect]
  -[VUIDocumentUIConfigurationPopover setSourceView:]
  -[VUIDocumentUIConfigurationPopover setSourceRect:]
  -[VUIDocumentUIConfigurationPopover popOverSourceBarButtonItem]
  -[VUIDocumentUIConfigurationPopover popOverArrowDirection]
  -[VUIDocumentUIConfigurationPopover setPopOverSourceBarButtonItem:]
  -[VUIDocumentUIConfigurationPopover setPopOverArrowDirection:]
  -[VUIDocumentUIConfigurationPopover isPresentationAdjustedToSizeClass]
  -[VUIDocumentUIConfigurationPopover setPresentationAdjustedToSizeClass:]


VUISportsProductBannerViewFactory : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[VUISportsProductBannerViewFactory configureViewWithElement:existingController:]


VUIFPSKeyDeletionInfoManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  NSData *additionalFPSRequestParamsJSONData
 @property  NSString *contentID
 @property  NSNumber *dsid
 @property  NSDate *expirationDate
 @property  NSURL *fpsKeyServerURL
 @property  NSURL *fpsNonceURL
 @property  NSData *keyData
 @property  NSURL *keyURI
 @property  NSDate *playbackExpirationStartDate

  // class methods
  +[VUIFPSKeyDeletionInfoManagedObject fetchRequest]


VUIFPSKeyInfoManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  BOOL allowsManualRenewal
 @property  NSString *contentID
 @property  NSDate *expirationDate
 @property  BOOL isLowValue
 @property  NSData *keyData
 @property  NSURL *keyURI
 @property  NSNumber *playbackDuration
 @property  NSDate *playbackExpirationStartDate
 @property  NSDate *renewalDate
 @property  NSNumber *renewalInterval
 @property  NSDate *retrievalDate
 @property  VUIVideoManagedObject *video

  // class methods
  +[VUIFPSKeyInfoManagedObject fetchRequest]

  // instance methods
  -[VUIFPSKeyInfoManagedObject populateFromKeyRequest:video:]


VUIImageDataManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  NSData *data
 @property  VUIImageInfoManagedObject *imageInfo

  // class methods
  +[VUIImageDataManagedObject fetchRequest]


VUIImageInfoManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  double canonicalHeight
 @property  double canonicalWidth
 @property  long long imageType
 @property  NSString *urlFormat
 @property  VUIImageDataManagedObject *imageData

  // class methods
  +[VUIImageInfoManagedObject fetchRequest]


VUIMovieManagedObject : VUIVideoManagedObject
  // class methods
  +[VUIMovieManagedObject fetchRequest]


VUITVEpisodeManagedObject : VUIVideoManagedObject
 @property  NSNumber *episodeNumberInSeason
 @property  NSNumber *episodeNumberInSeries
 @property  VUITVSeasonManagedObject *season
 @property  VUITVSeriesManagedObject *series

  // class methods
  +[VUITVEpisodeManagedObject fetchRequest]


VUITVSeasonManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  NSString *canonicalID
 @property  NSNumber *seasonNumber
 @property  NSString *title
 @property  NSSet *episodes
 @property  VUITVSeriesManagedObject *series

  // class methods
  +[VUITVSeasonManagedObject fetchRequest]


VUITVSeriesManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  NSString *canonicalID
 @property  NSString *title
 @property  NSSet *episodes
 @property  NSSet *imageInfos
 @property  NSSet *seasons

  // class methods
  +[VUITVSeriesManagedObject fetchRequest]


VUITVSeriesImageInfoManagedObject : VUIImageInfoManagedObject
 @property  VUITVSeriesManagedObject *series

  // class methods
  +[VUITVSeriesImageInfoManagedObject fetchRequest]


VUIVideoManagedObject : NSManagedObject /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit
 @property  NSString *adamID
 @property  NSData *additionalFPSRequestParamsJSONData
 @property  NSNumber *bookmarkTime
 @property  NSDate *bookmarkTimeStamp
 @property  NSString *brandID
 @property  NSString *brandName
 @property  NSString *canonicalID
 @property  NSString *contentRatingDomain
 @property  NSNumber *contentRatingRank
 @property  NSDate *dateAdded
 @property  long long downloadState
 @property  NSNumber *downloadTaskIdentifier
 @property  NSURL *downloadURL
 @property  NSNumber *dsid
 @property  NSNumber *duration
 @property  NSString *externalID
 @property  NSURL *fpsCertificateURL
 @property  NSURL *fpsKeyServerURL
 @property  NSURL *fpsNonceURL
 @property  NSNumber *frequencyOfAgeConfirmation
 @property  NSString *genreName
 @property  BOOL isAdultContent
 @property  NSString *localPlaybackRelativeFilePath
 @property  NSURL *localPlaybackURL
 @property  NSData *mediaMetricsJSONData
 @property  NSURL *playbackURL
 @property  NSString *referenceID
 @property  NSDate *releaseDate
 @property  NSNumber *requiredAgeForPlayback
 @property  NSString *rtcServiceIdentifier
 @property  NSString *title
 @property  NSData *vpafMetricsJSONData
 @property  NSSet *fpsKeyInfo
 @property  NSSet *imageInfos

  // class methods
  +[VUIVideoManagedObject fetchRequest]
  +[VUIVideoManagedObject keyPathsForValuesAffectingLocalPlaybackURL]

  // instance methods
  -[VUIVideoManagedObject mediaMetrics]
  -[VUIVideoManagedObject localPlaybackURL]
  -[VUIVideoManagedObject setLocalPlaybackURL:]
  -[VUIVideoManagedObject additionalFPSRequestParams]


VUIVideoImageInfoManagedObject : VUIImageInfoManagedObject
 @property  VUIVideoManagedObject *video

  // class methods
  +[VUIVideoImageInfoManagedObject fetchRequest]


UIViewController(VideosUI)
	// class methods
	+[UIViewController(VideosUI) _vui_TVLoadingViewControllerClass]

	// instance methods
	-[UIViewController(VideosUI) vui_presentViewController:animated:completion:]
	-[UIViewController(VideosUI) vui_ppt_isLoading]

IKViewElementStyle(NSLayoutConstraint)
	// class methods
	+[IKViewElementStyle(NSLayoutConstraint) positionConstraintsForView:insets:position:]

NSAttributedString(VideosExtras)
	// class methods
	+[NSAttributedString(VideosExtras) attributedStringWithTextElement:baseFont:]

IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper)
	// instance methods
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_disableResumeMenu]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_rentalAdamIDString]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_persistentID]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_fpsCertificateURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_fpsKeyServerURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_resumeTime]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_disableLocalAsset]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_launchPlaybackURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_hlsPlaylistURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_contentRatingRank]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) vui_scrubVideoURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_disableLocalAsset]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_persistentID]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_resumeTime]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_rentalAdamIDString]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_fpsCertificateURL]
	-[IKAssetElement(VUIIKPlaylistElementToMediaItemsMapper) videos_fpsKeyServerURL]

MPMediaChapter(VideosJSAdditions)
	// instance methods
	-[MPMediaChapter(VideosJSAdditions) wlk_dictionaryRepresentation]

UIView(VUILibraryProductInfoView)
	// instance methods
	-[UIView(VUILibraryProductInfoView) topMarginWithBaselineMargin:]
	-[UIView(VUILibraryProductInfoView) bottomMarginWithBaselineMargin:]
	-[UIView(VUILibraryProductInfoView) vui_sizeThatFits:]
	-[UIView(VUILibraryProductInfoView) vui_sizeThatFits:layout:]
	-[UIView(VUILibraryProductInfoView) topMarginWithBaselineMargin:maximumContentSizeCategory:]
	-[UIView(VUILibraryProductInfoView) bottomMarginWithBaselineMargin:maximumContentSizeCategory:]
	-[UIView(VUILibraryProductInfoView) vui_sizeThatFits:layout:withSizeCalculation:]

MPMediaItem(VideosUI)
	// class methods
	+[MPMediaItem(VideosUI) wlk_mediaItemForPersistentIdentifier:]
	+[MPMediaItem(VideosUI) vui_VUIMediaEntityResolutionFromMPMediaItemVideoQuality:]
	+[MPMediaItem(VideosUI) vui_VUIMediaEntityColorCapabilityFromMPMediaItemColorCapability:]
	+[MPMediaItem(VideosUI) vui_VUIMediaEntityAudioCapabilityFromMPMediaItemAudioCapability:]
	+[MPMediaItem(VideosUI) _vui_isLocalWithPropertyValues:]
	+[MPMediaItem(VideosUI) _vui_isNetworkPlayableWithPropertyValues:]
	+[MPMediaItem(VideosUI) vui_MPMediaItemVideoQualityFromVUIMediaEntityResolution:]
	+[MPMediaItem(VideosUI) vui_MPMediaItemColorCapabilityFromVUIMediaEntityColorCapability:]
	+[MPMediaItem(VideosUI) vui_MPMediaItemAudioCapabilityFromVUIMediaEntityAudioCapability:]
	+[MPMediaItem(VideosUI) wlk_JSgenericProperties]
	+[MPMediaItem(VideosUI) wlk_mediaItemForStoreIdentifier:]
	+[MPMediaItem(VideosUI) wlk_JSmovieProperties]
	+[MPMediaItem(VideosUI) wlk_JStvShowProperties]

	// instance methods
	-[MPMediaItem(VideosUI) vui_mediaEntityType]
	-[MPMediaItem(VideosUI) _vui_imageIdentifierWithImageType:]
	-[MPMediaItem(VideosUI) vui_assetType]
	-[MPMediaItem(VideosUI) vui_rentalPlaybackEndDate]
	-[MPMediaItem(VideosUI) vui_rentalEndDate]
	-[MPMediaItem(VideosUI) vui_assetTypeIgnoringLocalAsset:]
	-[MPMediaItem(VideosUI) vui_homeSharingLibrary]
	-[MPMediaItem(VideosUI) vui_coverArtImageIdentifier]
	-[MPMediaItem(VideosUI) vui_previewFrameImageIdentifier]
	-[MPMediaItem(VideosUI) vui_artworkCatalogWithImageType:]
	-[MPMediaItem(VideosUI) vui_resolution]
	-[MPMediaItem(VideosUI) vui_colorCapability]
	-[MPMediaItem(VideosUI) vui_audioCapability]
	-[MPMediaItem(VideosUI) vui_HLSResolution]
	-[MPMediaItem(VideosUI) vui_HLSColorCapability]
	-[MPMediaItem(VideosUI) vui_HLSAudioCapability]
	-[MPMediaItem(VideosUI) vui_showIdentifier]
	-[MPMediaItem(VideosUI) vui_seasonIdentifier]
	-[MPMediaItem(VideosUI) vui_studio]
	-[MPMediaItem(VideosUI) vui_credits]
	-[MPMediaItem(VideosUI) vui_contentRating]
	-[MPMediaItem(VideosUI) vui_isPlayable]
	-[MPMediaItem(VideosUI) vui_isLocal]
	-[MPMediaItem(VideosUI) vui_extrasURL]
	-[MPMediaItem(VideosUI) vui_playedState]
	-[MPMediaItem(VideosUI) vui_rentalExpirationDate]
	-[MPMediaItem(VideosUI) vui_isHomeSharingMediaItem]
	-[MPMediaItem(VideosUI) vui_imageIdentifierWithImageType:]
	-[MPMediaItem(VideosUI) vui_imageLoadParamsWithImageType:]
	-[MPMediaItem(VideosUI) wlk_jsPropertyStrings]
	-[MPMediaItem(VideosUI) wlk_mediaTypeString]
	-[MPMediaItem(VideosUI) wlk_stringIdentifierForProperty:]
	-[MPMediaItem(VideosUI) wlk_stringIdentifierForSeason]
	-[MPMediaItem(VideosUI) wlk_playState]

MPMediaItemCollection(VideosJSAdditions)
	// class methods
	+[MPMediaItemCollection(VideosJSAdditions) wlk_JSgenericProperties]

	// instance methods
	-[MPMediaItemCollection(VideosJSAdditions) wlk_jsPropertyStrings]

UIFont(VideosUI)
	// class methods
	+[UIFont(VideosUI) vui_fontFromTextLayout:]
	+[UIFont(VideosUI) _fontFromTextStyle:maximumContentSizeCategory:fontWeight:fontSize:symbolicTraits:fontFeature:]
	+[UIFont(VideosUI) _uifontWeightFromFontWeight:]
	+[UIFont(VideosUI) _uiFontAttributesForFeature:]
	+[UIFont(VideosUI) vui_fontFromTextStyle:fontWeight:fontSize:symbolicTraits:]

	// instance methods
	-[UIFont(VideosUI) baselineHeight]
	-[UIFont(VideosUI) topMarginWithBaselineMargin:traitCollection:]
	-[UIFont(VideosUI) bottomMarginWithBaselineMargin:traitCollection:]
	-[UIFont(VideosUI) topMarginToFont:withBaselineMargin:traitCollection:]

IKTextElement(NSAttributedString)
	// instance methods
	-[IKTextElement(NSAttributedString) textAttributes]

IKImageElement(VideosExtrasAdditions)
	// instance methods
	-[IKImageElement(VideosExtrasAdditions) accessoryType]
	-[IKImageElement(VideosExtrasAdditions) cachePath]
	-[IKImageElement(VideosExtrasAdditions) bestURL]
	-[IKImageElement(VideosExtrasAdditions) artworkCatalog]
	-[IKImageElement(VideosExtrasAdditions) vui_hasValidImage]
	-[IKImageElement(VideosExtrasAdditions) resourceImage]

IKPlaylistElement(VideosUI)
	// instance methods
	-[IKPlaylistElement(VideosUI) vui_containsOnlyClips]
	-[IKPlaylistElement(VideosUI) vui_isNonPurchasedContent]

NSDistributedNotificationCenter(VideosUI)
	// class methods
	+[NSDistributedNotificationCenter(VideosUI) vui_defaultCenter]
	+[NSDistributedNotificationCenter(VideosUI) vui_wasSentByDifferentProcess:]

	// instance methods
	-[NSDistributedNotificationCenter(VideosUI) vui_postNotificationName:object:userInfo:]

NSBundle(VideosUI)
	// class methods
	+[NSBundle(VideosUI) vui_videosUIBundle]

MPMediaPredicate(VideosUI)
	// class methods
	+[MPMediaPredicate(VideosUI) vui_isLocalPredicate:comparison:]
	+[MPMediaPredicate(VideosUI) vui_showPersistentIDPredicate:comparison:]
	+[MPMediaPredicate(VideosUI) vui_seasonNumberPredicate:comparison:]
	+[MPMediaPredicate(VideosUI) _vui_isPlayablePredicate:]
	+[MPMediaPredicate(VideosUI) _vui_isNetworkPlayablePredicate:]
	+[MPMediaPredicate(VideosUI) vui_mediaEntityTypePredicate:comparison:]
	+[MPMediaPredicate(VideosUI) vui_seasonIdentifierPredicate:comparison:]
	+[MPMediaPredicate(VideosUI) vui_isPlayablePredicate:comparison:]
	+[MPMediaPredicate(VideosUI) vui_restrictionsPredicateWithMediaEntityType:mediaLibrary:]

MPMediaPropertyPredicate(VideosUI)
	// class methods
	+[MPMediaPropertyPredicate(VideosUI) vui_mediaPropertyPredicateComparisonWithPredicateOperatorType:]
	+[MPMediaPropertyPredicate(VideosUI) vui_mediaPropertyPredicateWithProperty:predicateOperatorType:value:]

WLKStoreOffer(VideosUI)
	// instance methods
	-[WLKStoreOffer(VideosUI) _localize:token:value:]
	-[WLKStoreOffer(VideosUI) _locKeyForPeriod:]
	-[WLKStoreOffer(VideosUI) vui_subscriptionOfferButtonText]
	-[WLKStoreOffer(VideosUI) vui_subscriptionOfferDisclaimerText]

UIWindow(VideosUI)
	// class methods
	+[UIWindow(VideosUI) vui_currentSizeClass]
	+[UIWindow(VideosUI) vui_keyWindow]
	+[UIWindow(VideosUI) vui_paddingForElement:]
	+[UIWindow(VideosUI) vui_itemWidthForGridStyle:gridType:]
	+[UIWindow(VideosUI) vui_layoutType]
	+[UIWindow(VideosUI) vui_padding]
	+[UIWindow(VideosUI) vui_itemWidthForGridStyle:gridType:numGridColumns:element:]
	+[UIWindow(VideosUI) vui_collectionInteritemSpace:gridType:withElement:]
	+[UIWindow(VideosUI) vui_currentSizeClassForElement:]
	+[UIWindow(VideosUI) _safeAreaInsetsForDeviceWithElement:]
	+[UIWindow(VideosUI) vui_itemWidthForGridStyle:gridType:numGridColumns:]
	+[UIWindow(VideosUI) _vui_interitemSpaceForSizeClass:gridType:]
	+[UIWindow(VideosUI) _adjustedWindowSizeFor:]
	+[UIWindow(VideosUI) vui_collectionInteritemSpace:gridType:]

MPMediaLibrary(VideosUI)
	// instance methods
	-[MPMediaLibrary(VideosUI) vui_isDeviceMediaLibrary]
	-[MPMediaLibrary(VideosUI) vui_isHomeShareMediaLibrary]

NSURL(VideosUI)
	// instance methods
	-[NSURL(VideosUI) vui_parsedQueryParametersDictionary]

IKViewElement(VideosUI)
	// class methods
	+[IKViewElement(VideosUI) _vui_updateEventDescriptorWithType:]

	// instance methods
	-[IKViewElement(VideosUI) vui_updateEventDescriptors]
	-[IKViewElement(VideosUI) mediaInfoForEvent:playbackContext:includingVideo:]
	-[IKViewElement(VideosUI) vui_title]
	-[IKViewElement(VideosUI) vui_imageURL]
	-[IKViewElement(VideosUI) vui_description]
	-[IKViewElement(VideosUI) vui_DataSource]
	-[IKViewElement(VideosUI) _parseElementIfNecessary]
	-[IKViewElement(VideosUI) _backgroundImageProxyFromImageElement:]

SSDownload(VideosUI)
	// instance methods
	-[SSDownload(VideosUI) vui_isEqualToDownload:]

NSString(VideosUI)
	// instance methods
	-[NSString(VideosUI) vui_stringWithFirstStrongDirectionalIsolates]

UICollectionView(VideosUI)
	// class methods
	+[UICollectionView(VideosUI) _vui_indexPathsWithIndexSet:andSection:]

	// instance methods
	-[UICollectionView(VideosUI) vui_applyChangeSet:inSection:updateDataSourceBlock:completionHandler:]
	-[UICollectionView(VideosUI) vui_applyChangeSet:inSection:updateDataSourceBlock:applyChangeBlock:completionHandler:]
	-[UICollectionView(VideosUI) vui_applyChangeSet:inSection:completionHandler:]
	-[UICollectionView(VideosUI) _vui_applyChangeSet:inSection:updateDataSourceBlock:applyChangeBlock:shouldWrapInUpdate:completionHandler:]
	-[UICollectionView(VideosUI) _vui_applyDeleteChange:inSection:applyChangeBlock:]
	-[UICollectionView(VideosUI) _vui_applyInsertChange:inSection:applyChangeBlock:]
	-[UICollectionView(VideosUI) _vui_applyMoveChanges:inSection:applyChangeBlock:]
	-[UICollectionView(VideosUI) _vui_applyUpdateChanges:inSection:applyChangeBlock:updateDataSourceBlock:]
	-[UICollectionView(VideosUI) _vui_applySectionUpdateChanges:applyChangeBlock:updateDataSourceBlock:]
	-[UICollectionView(VideosUI) _vui_applyItemUpdateChanges:inSection:applyChangeBlock:]
	-[UICollectionView(VideosUI) vui_applyChangeSet:completionHandler:]

NSNumber(VideosUI)
	// instance methods
	-[NSNumber(VideosUI) vui_languageAwareDescription]

SSEntity(VideosUI)
	// instance methods
	-[SSEntity(VideosUI) vui_valuesForProperties:]

UIImage(VUISBGraphics)
	// class methods
	+[UIImage(VUISBGraphics) imageWithColor:]
	+[UIImage(VUISBGraphics) vui_videosUIImageNamed:]
	+[UIImage(VUISBGraphics) imageForPlaceholderURL:]
	+[UIImage(VUISBGraphics) vui_imageFromContextWithSize:scale:type:pool:drawing:encapsulation:]
	+[UIImage(VUISBGraphics) vui_bytesNeededForSize:scale:withContextType:]
	+[UIImage(VUISBGraphics) vui_imageFromContextWithSize:scale:type:pool:drawing:]

	// instance methods
	-[UIImage(VUISBGraphics) vui_iconImageOfSize:radius:stroke:]
	-[UIImage(VUISBGraphics) vui_iconImageOfSize:]
	-[UIImage(VUISBGraphics) vui_imageWithColor:]

UIResponder(TVMLKitAdditions)
	// instance methods
	-[UIResponder(TVMLKitAdditions) vui_handleEvent:forElement:sourceView:]

UINavigationController(ReplaceViewController)
	// instance methods
	-[UINavigationController(ReplaceViewController) _VideosExtras_replaceViewController:withViewController:animated:]

UILabel(VideosUI)
	// instance methods
	-[UILabel(VideosUI) configureForIKTextElement:fontDescriptor:textStyle:]
	-[UILabel(VideosUI) configureForIKTextElement:fontDescriptor:textStyle:capitalize:]
	-[UILabel(VideosUI) vui_heightToBaseline]
	-[UILabel(VideosUI) configureForIKTextElement:fontDescriptor:textStyle:capitalize:overrideWithTraitCollection:]
	-[UILabel(VideosUI) _textAlignmentFromElementAlignment:]

MPMediaQuery(VideosUI)
	// class methods
	+[MPMediaQuery(VideosUI) vui_moviesQueryWithMediaLibrary:]
	+[MPMediaQuery(VideosUI) vui_movieRentalsQueryWithMediaLibrary:]
	+[MPMediaQuery(VideosUI) vui_episodesQueryWithMediaLibrary:]
	+[MPMediaQuery(VideosUI) vui_homeVideosQueryWithMediaLibrary:]
	+[MPMediaQuery(VideosUI) _vui_moviesQueryWithMediaLibrary:rentals:]

	// instance methods
	-[MPMediaQuery(VideosUI) _vui_configureMediaQueryWithMediaLibrary:]

NSDictionary(VUIStoreAcquisition)
	// instance methods
	-[NSDictionary(VUIStoreAcquisition) vui_appleTimingAppHeaderValue]

AMSBag(VUIAdditions)
	// class methods
	+[AMSBag(VUIAdditions) vui_defaultBag]
	+[AMSBag(VUIAdditions) vui_registerAdditionalBagKey:withValueType:]

NSArray(VideosExtras)
	// instance methods
	-[NSArray(VideosExtras) ikAssetAttributes]
	-[NSArray(VideosExtras) ikAssetArraysEqual:]

UIColor(VideosUI)
	// class methods
	+[UIColor(VideosUI) vui_primaryDynamicBackgroundColor]
	+[UIColor(VideosUI) vui_primaryTextColor]
	+[UIColor(VideosUI) vui_secondaryTextColor]
	+[UIColor(VideosUI) vui_keyBlueColor]
	+[UIColor(VideosUI) vui_tertiaryDynamicBackgroundColor]
	+[UIColor(VideosUI) vui_opacityColorWithType:userInterfaceStyle:]
	+[UIColor(VideosUI) vui_imageHighlightColor]
	+[UIColor(VideosUI) vui_imageBorderColor]
	+[UIColor(VideosUI) vui_secondaryDynamicBackgroundColor]
	+[UIColor(VideosUI) vui_backgroundGradientColors]
	+[UIColor(VideosUI) vui_secondaryFillColor]
	+[UIColor(VideosUI) vui_keyBlueHighlightedColor]
	+[UIColor(VideosUI) vui_separatorColor]
	+[UIColor(VideosUI) vui_tertiaryFillColor]
	+[UIColor(VideosUI) vui_opaqueSeparatorColor]
	+[UIColor(VideosUI) vui_progressBarFillColor]
	+[UIColor(VideosUI) vui_progressBarGradientColors]
	+[UIColor(VideosUI) _vui_darkModeKeyBlueColor]
	+[UIColor(VideosUI) _vui_lightModeKeyBlueColor]
	+[UIColor(VideosUI) vui_tertiaryTextColor]
	+[UIColor(VideosUI) vui_primaryFillColor]

	// instance methods
	-[UIColor(VideosUI) vui_blendWithColor:percentage:]

UITableView(VideosUI)
	// class methods
	+[UITableView(VideosUI) _vui_indexPathsWithIndexSet:andSection:]

	// instance methods
	-[UITableView(VideosUI) vui_applyChangeSet:inSection:rowAnimation:updateDataSourceBlock:completionHandler:]
	-[UITableView(VideosUI) vui_applyChangeSet:inSection:completionHandler:]
	-[UITableView(VideosUI) vui_applyChangeSet:completionHandler:]
	-[UITableView(VideosUI) _vui_applyDeleteChange:inSection:rowAnimation:]
	-[UITableView(VideosUI) _vui_applyInsertChange:inSection:rowAnimation:]
	-[UITableView(VideosUI) _vui_applyMoveChanges:inSection:rowAnimation:]
	-[UITableView(VideosUI) _vui_applyUpdateChanges:inSection:rowAnimation:]

UIApplication(VideosUI)
	// instance methods
	-[UIApplication(VideosUI) vui_delegate]

01 00 2e00 /System/Library/PrivateFrameworks/AppleAccountUI.framework/AppleAccountUI: AAUIProfilePictureStore 
01 00 2400 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 2600 /System/Library/PrivateFrameworks/AMPCoreUI.framework/AMPCoreUI: AMPOnboardingViewController 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSBag 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSBagKeySet 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSDevice 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSDeviceOfferRegistrationTask 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSMediaProtocolHandler 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSMediaRequestEncoder 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSMediaTokenService 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSMutableBagKeySet 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSProcessInfo 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSURLParser 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSURLSession 
01 00 1300 /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices: AMSUserAgent 
01 00 2f00 /System/Library/PrivateFrameworks/AirTraffic.framework/AirTraffic: ATConnection 
01 00 2500 /System/Library/Frameworks/AVKit.framework/AVKit: AVBackgroundView 
01 00 2500 /System/Library/Frameworks/AVKit.framework/AVKit: AVControlItem 
01 00 2500 /System/Library/Frameworks/AVKit.framework/AVKit: AVExternalPlaybackController 
01 00 2500 /System/Library/Frameworks/AVKit.framework/AVKit: AVPlayerViewController 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimationGroup 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 0a00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 1a00 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: CPMemoryPool 
01 00 2200 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSCloudClient 
01 00 2200 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSGetAuthorizedAccountsTokenRequest 
01 00 2200 /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing: HSItemDataRequest 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKActivityIndicatorElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKAppContext 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKAppDataStorage 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKAppUserDefaults 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKAssetElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKAudioElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKBackgroundElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKBadgeElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKButtonElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKCarouselElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKCheckMarkElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKCollectionElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKCollectionListElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKColor 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKColumnCollectionElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKColumnElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKColumnItemLockupElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKColumnTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKDialogTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKDocumentBannerElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKDocumentServiceRequest 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKGalleryTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKGridElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKHeadElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKHeaderElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKImageElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKJSError 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKJSITunesStore 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKJSObject 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKListElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKListItemLockupElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKListTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKLoadingTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKLockupElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKMainTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKMenuBarElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKMenuBarTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKMenuItemElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKOrdinalElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKPlaylistElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKProgressIndicatorElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKSectionElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKServiceContext 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKShelfElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKShowcaseTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKSlideshowElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKStackTemplate 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKTextElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKTimelineElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKTimelineEventElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKUpdateServiceRequest 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKVideoElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKViewElement 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKViewElementRegistry 
01 00 0c00 /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit: IKViewElementStyle 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISNetworkObserver 
01 00 0500 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore: ISURLOperation 
01 00 1500 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSManagedValue 
01 00 1500 /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore: JSValue 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPAppleTVMetadata 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPImage 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPImageMetadata 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPLinkMetadata 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPMetadataProvider 
01 00 2900 /System/Library/Frameworks/LinkPresentation.framework/LinkPresentation: LPSharingMetadataWrapper 
01 00 0800 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 0800 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSBundleProxy 
01 00 1600 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 2300 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3AllCompoundPredicate 
01 00 2300 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3ComparisonPredicate 
01 00 2300 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3MusicLibrary 
01 00 2300 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3QueryResultSet 
01 00 2300 /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary: ML3Track 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAbstractNetworkArtworkDataSource 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPArtworkCatalog 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPCloudController 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPHomeSharingML3DataProvider 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaChapter 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaCompoundAllPredicate 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaCompoundAnyPredicate 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaItem 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaItemCollection 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaLibrary 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaLibraryArtworkDataSource 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaPredicate 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaPropertyPredicate 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaQuery 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPRestrictionsMonitor 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreDownload 
01 00 0600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPStoreDownloadManager 
01 00 2c00 /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI: MPUArtworkView 
01 00 0900 /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation: MPUContentSizeLayoutConstraint 
01 00 0900 /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation: MPUHTMLParser 
01 00 0900 /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation: MPUQueryDataSource 
01 00 2000 /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit: MTMediaActivityTracker 
01 00 2000 /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit: MTMetricsKit 
01 00 2000 /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit: MTUIKitStoreAMSBagDelegatePackage 
01 00 2000 /System/Library/PrivateFrameworks/MetricsKit.framework/MetricsKit: MTVPAFKit 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCache 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSComparisonPredicate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDecimalNumber 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 1f00 /System/Library/Frameworks/CoreData.framework/CoreData: NSEntityDescription 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1f00 /System/Library/Frameworks/CoreData.framework/CoreData: NSFetchRequest 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPCookie 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPCookieStorage 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSHTTPURLResponse 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSItemProvider 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1f00 /System/Library/Frameworks/CoreData.framework/CoreData: NSManagedObject 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableURLRequest 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 3100 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: NSParagraphStyle 
01 00 1f00 /System/Library/Frameworks/CoreData.framework/CoreData: NSPersistentContainer 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: NSShadow 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLCache 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLRequest 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 3300 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSValueTransformer 
01 00 0100 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1800 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBBundle 
01 00 1800 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBPrivacyFlow 
01 00 1800 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBPrivacyLinkController 
01 00 1800 /System/Library/PrivateFrameworks/OnBoardingKit.framework/OnBoardingKit: OBPrivacyPresenter 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSEditableTableCell 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSFooterHyperlinkView 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSListController 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSListItemsController 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSSpecifier 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSTableCell 
01 00 2d00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSTextFieldSpecifier 
01 00 2a00 /System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient: SBCPlaybackPositionDomain 
01 00 2a00 /System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient: SBCPlaybackPositionEntity 
01 00 2a00 /System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient: SBCPlaybackPositionService 
01 00 2a00 /System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient: SBCPlaybackPositionSyncService 
01 00 1900 /System/Library/Frameworks/StoreKit.framework/StoreKit: SKAccountPageViewController 
01 00 1900 /System/Library/Frameworks/StoreKit.framework/StoreKit: SKStoreProductViewController 
01 00 2800 /System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI: SKUIItem 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSAccountStore 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSAuthenticateRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSAuthorizationRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDevice 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDownload 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDownloadManager 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDownloadManagerOptions 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSEntity 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSMutableAuthenticationContext 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSMutableURLRequestProperties 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSPrivacyController 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSPurchase 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSPurchaseRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSRentalCheckinRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSRentalCheckoutRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSRentalInformationRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSRentalSyncRequest 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSURLBag 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSURLBagContext 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSVLoadURLOperation 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSVPlatformRequestOperation 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSVSAPSignatureComponent 
01 00 0b00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSVSAPSignaturePolicy 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVAppStyle 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVApplicationController 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVApplicationControllerContext 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVButton 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVCornerUtilities 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVElementFactory 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVFocusableTextView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImage 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImageDescription 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImageLayout 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImageOutlineDecorator 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImageProxy 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVImageScaleDecorator 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVInterfaceFactory 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVMLUtilities 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVMLViewFactory 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVMediaInfo 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVModalPresenter 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVObservableEventController 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPBaseMediaItem 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPClipMediaItem 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPContentKeyRequest 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPContentKeySession 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPDownloadSession 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPMediaItemAdvisoryInfo 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPMediaItemSkipInfo 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPPlaybackReportingEventCollection 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPPlaybackState 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPPlaybackUtilities 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPPlayer 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPPlaylist 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPStateMachine 
01 00 1200 /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback: TVPTimeRange 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVRatingBadgeLayout 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVRatingBadgeView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVShelfViewLayoutInvalidationContext 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVStyleFactory 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVTemplateFeaturesManager 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVURLDescription 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVURLImageLoader 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVViewFactory 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: TVViewLayout 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivity 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionReusableView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewFlowLayout 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewLayout 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewLayoutAttributes 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextMenuConfiguration 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextMenuInteraction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIContextualAction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILargeContentViewerInteraction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILayoutGuide 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMailActivity 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenu 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMessageActivity 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationBar 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPageViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPercentDrivenInteractiveTransition 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPinchGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPresentationController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewInteraction 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIResponder 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreenEdgePanGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISplitViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringTimingParameters 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeActionsConfiguration 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UISwitch 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITabBarController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITextField 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIVibrancyEffect 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 1c00 /System/Library/Frameworks/VideoSubscriberAccount.framework/VideoSubscriberAccount: VSAccountChannelsCenter 
01 00 1c00 /System/Library/Frameworks/VideoSubscriberAccount.framework/VideoSubscriberAccount: VSAccountStore 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIAsynchronousOperation 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIAsynchronousWorkToken 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUICollectionChange 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUICollectionChangeSet 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUICollectionComparator 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIDelayOperation 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIEntitiesSortedByDateValueTransformer 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIMobileGestaltLookup 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUINetworkReachabilityMonitor 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUIRestrictions 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUISortUtilities 
01 00 1000 /System/Library/PrivateFrameworks/VideosUICore.framework/VideosUICore: VUITitleSortDescriptor 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKAppInstaller 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKAppLibrary 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKChannelDetails 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKChannelUtilities 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKConfigurationManager 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKContinueWatchingRequestOperation 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKDictionaryResponseProcessor 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKFavoritesModificationRequestOperation 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKLocationManager 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKMarkAsWatchedRequestOperation 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKNotificationCenter 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKOfferManager 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKOnboarding 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKPlaybackReporter 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKPlaybackSummary 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKRemoveFromPlayHistoryRequestOperation 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKSettingsCloudUtilities 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKSettingsStore 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKStoreOffer 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKURLBagUtilities 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKURLRequestProperties 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKUTSNetworkRequestOperation 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKUserEnvironment 
01 00 1b00 /System/Library/PrivateFrameworks/WatchListKit.framework/WatchListKit: WLKWatchListModificationRequestOperation 
01 00 0800 /System/Library/Frameworks/CoreServices.framework/CoreServices: _LSOpenConfiguration 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVAppDocumentController 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVAppDocumentRequestController 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVAppLoadingView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVAppNavigationController 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVAppNavigationController_iOS 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVBgImageLoadingViewController 
01 00 0e00 /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit: _TVCarouselView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVCollectionView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVCollectionViewFlowLayout 
01 00 0e00 /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit: _TVContentRating 
01 00 0e00 /System/Library/PrivateFrameworks/TVUIKit.framework/TVUIKit: _TVContentRatingBadgeManager 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVImageView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVLabel 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVModalPresenter 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVProgressView 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVResourceImageLoader 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVShelfViewController 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVShelfViewLayout 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVStackScrollStop 
01 00 0d00 /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit: _TVStackTemplateController 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropView 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropViewSettings 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIContextMenuStyle 
01 00 0f00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRepeatingPressGestureRecognizer 
