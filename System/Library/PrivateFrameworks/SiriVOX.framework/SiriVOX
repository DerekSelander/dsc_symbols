|| __DATA.__objc_data _OBJC_CLASS_$_SVXActivationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SVXAlarmAndTimerFiringContext
|| __DATA.__objc_data _OBJC_CLASS_$_SVXAnnouncer
|| __DATA.__objc_data _OBJC_CLASS_$_SVXButtonEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SVXClientInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SVXClientServiceConnection
|| __DATA.__objc_data _OBJC_CLASS_$_SVXClientServiceManager
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDaemon
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeactivationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeactivationOptions
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupContext
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupFlow
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupFlowDisplayKeyFrame
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupFlowScene
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupFlowSceneBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupFlowSiriCapabilitiesHint
|| __DATA.__objc_data _OBJC_CLASS_$_SVXDeviceSetupOptions
|| __DATA.__objc_data _OBJC_CLASS_$_SVXMyriadDeviceManager
|| __DATA.__objc_data _OBJC_CLASS_$_SVXMyriadHostDevice
|| __DATA.__objc_data _OBJC_CLASS_$_SVXMyriadWiFiAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SVXPlatformDependency
|| __DATA.__objc_data _OBJC_CLASS_$_SVXQueuePerformer
|| __DATA.__objc_data _OBJC_CLASS_$_SVXServiceCommandResult
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSpeechSynthesisConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSpeechSynthesisRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSpeechSynthesisResult
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSpeechSynthesisUtteranceInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSpeechSynthesisWordTiming
|| __DATA.__objc_data _OBJC_CLASS_$_SVXStoreDemo
|| __DATA.__objc_data _OBJC_CLASS_$_SVXSystemEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SVXTaskContext
|| __DATA.__objc_data _OBJC_CLASS_$_SVXUnderstandingOnDeviceAssetsStateObserver
|| __DATA.__objc_data _OBJC_CLASS_$__SVXAddViewsExpressionParser
|| __DATA.__objc_data _OBJC_CLASS_$__SVXRemoteExpressionParsingService
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXActivationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXAlarmAndTimerFiringContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXAnnouncer
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXButtonEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXClientInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXClientServiceConnection
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXClientServiceManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDaemon
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeactivationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeactivationOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupFlow
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupFlowDisplayKeyFrame
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupFlowScene
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupFlowSceneBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupFlowSiriCapabilitiesHint
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXDeviceSetupOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXMyriadDeviceManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXMyriadHostDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXMyriadWiFiAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXPlatformDependency
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXQueuePerformer
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXServiceCommandResult
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSpeechSynthesisConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSpeechSynthesisRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSpeechSynthesisResult
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSpeechSynthesisUtteranceInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSpeechSynthesisWordTiming
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXStoreDemo
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXSystemEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXTaskContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SVXUnderstandingOnDeviceAssetsStateObserver
|| __DATA.__objc_data _OBJC_METACLASS_$__SVXAddViewsExpressionParser
|| __DATA.__objc_data _OBJC_METACLASS_$__SVXRemoteExpressionParsingService
|| __DATA_CONST.__const _SVXActivationContextKey
|| __DATA_CONST.__const _SVXAlarmAndTimerFiringContextKey
|| __DATA_CONST.__const _SVXButtonEventKey
|| __DATA_CONST.__const _SVXClientInfoKey
|| __DATA_CONST.__const _SVXDeactivationContextKey
|| __DATA_CONST.__const _SVXDeactivationOptionsKey
|| __DATA_CONST.__const _SVXDeactivationSourceKey
|| __DATA_CONST.__const _SVXDeviceSetupContextKey
|| __DATA_CONST.__const _SVXDeviceSetupFlowDisplayKeyFrameKey
|| __DATA_CONST.__const _SVXDeviceSetupFlowKey
|| __DATA_CONST.__const _SVXDeviceSetupFlowSceneKey
|| __DATA_CONST.__const _SVXDeviceSetupFlowSiriCapabilitiesHintKey
|| __DATA_CONST.__const _SVXDeviceSetupOptionsKey
|| __DATA_CONST.__const _SVXLocalizationKeyAudioPasscodeInstruction
|| __DATA_CONST.__const _SVXLocalizationKeyDeviceProblemNetwork0
|| __DATA_CONST.__const _SVXLocalizationKeyDeviceProblemNetwork1
|| __DATA_CONST.__const _SVXLocalizationKeyDeviceProblemNetwork2
|| __DATA_CONST.__const _SVXLocalizationKeyFactoryResetConfirmation
|| __DATA_CONST.__const _SVXLocalizationKeyNetworkError0
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1IntroVersion1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1OutroVersion1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage1Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage1Version2
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage2Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage2Version2
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage3Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage3Version2
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle1Stage3Version3
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2IntroVersion1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2OutroVersion1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2Stage1Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2Stage2Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2Stage3Version1
|| __DATA_CONST.__const _SVXLocalizationKeyStoreDemoStyle2Stage4Version1
|| __DATA_CONST.__const _SVXLocalizationKeyWiFiError0
|| __DATA_CONST.__const _SVXLocalizationKeyWiFiError1
|| __DATA_CONST.__const _SVXLocalizationTableClock
|| __DATA_CONST.__const _SVXLocalizationTableDefault
|| __DATA_CONST.__const _SVXLocalizationTableDeviceSetup
|| __DATA_CONST.__const _SVXLocalizationTableErrors
|| __DATA_CONST.__const _SVXLocalizationTableInterstitials
|| __DATA_CONST.__const _SVXLocalizationTableStoreDemo
|| __DATA_CONST.__const _SVXSpeechSynthesisRequestKey
|| __DATA_CONST.__const _SVXSpeechSynthesisResultKey
|| __DATA_CONST.__const _SVXSpeechSynthesisUtteranceInfoKey
|| __DATA_CONST.__const _SVXSpeechSynthesisWordTimingKey
|| __DATA_CONST.__const _SVXStoreDemoKey
|| __DATA_CONST.__const _SVXSystemEventKey
|| __DATA_CONST.__const _SVXTaskContextKey
|| __DATA_CONST.__const _SiriVOXErrorDomain
|| __TEXT.__text _SVXActivationSourceGetFromName
|| __TEXT.__text _SVXActivationSourceGetIsValid
|| __TEXT.__text _SVXActivationSourceGetIsValidAndSpecified
|| __TEXT.__text _SVXActivationSourceGetName
|| __TEXT.__text _SVXAlarmAndTimerFiringContextCreateSpeechSynthesisRequest
|| __TEXT.__text _SVXAlarmAndTimerFiringContextGetIsSpeakable
|| __TEXT.__text _SVXAudioPowerTypeGetFromName
|| __TEXT.__text _SVXAudioPowerTypeGetIsValid
|| __TEXT.__text _SVXAudioPowerTypeGetIsValidAndSpecified
|| __TEXT.__text _SVXAudioPowerTypeGetName
|| __TEXT.__text _SVXAudioPowerUpdateFrequencyGetFromName
|| __TEXT.__text _SVXAudioPowerUpdateFrequencyGetIsValid
|| __TEXT.__text _SVXAudioPowerUpdateFrequencyGetIsValidAndSpecified
|| __TEXT.__text _SVXAudioPowerUpdateFrequencyGetName
|| __TEXT.__text _SVXBooleanGetFromName
|| __TEXT.__text _SVXBooleanGetIsValid
|| __TEXT.__text _SVXBooleanGetIsValidAndSpecified
|| __TEXT.__text _SVXBooleanGetName
|| __TEXT.__text _SVXButtonEventTypeGetFromName
|| __TEXT.__text _SVXButtonEventTypeGetIsValid
|| __TEXT.__text _SVXButtonEventTypeGetIsValidAndSpecified
|| __TEXT.__text _SVXButtonEventTypeGetName
|| __TEXT.__text _SVXClientInfoGetCurrent
|| __TEXT.__text _SVXClientInfoIsCurrent
|| __TEXT.__text _SVXDeactivationSourceGetFromName
|| __TEXT.__text _SVXDeactivationSourceGetIsValid
|| __TEXT.__text _SVXDeactivationSourceGetIsValidAndSpecified
|| __TEXT.__text _SVXDeactivationSourceGetName
|| __TEXT.__text _SVXDeviceSetupCreateOptionsArray
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForSceneWithID
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForSiriCapabilitiesScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForSiriIntroScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForSiriOutroScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForTryHeySiriCapabilitiesScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForTryHeySiriMusicScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForTryHeySiriNewsScene
|| __TEXT.__text _SVXDeviceSetupCreateSpeechSynthesisRequestForTryHeySiriWeatherScene
|| __TEXT.__text _SVXDeviceSetupFlowDisplayKeyFrameIDGetFromName
|| __TEXT.__text _SVXDeviceSetupFlowDisplayKeyFrameIDGetIsValid
|| __TEXT.__text _SVXDeviceSetupFlowDisplayKeyFrameIDGetIsValidAndSpecified
|| __TEXT.__text _SVXDeviceSetupFlowDisplayKeyFrameIDGetName
|| __TEXT.__text _SVXDeviceSetupFlowSceneIDGetFromName
|| __TEXT.__text _SVXDeviceSetupFlowSceneIDGetIsValid
|| __TEXT.__text _SVXDeviceSetupFlowSceneIDGetIsValidAndSpecified
|| __TEXT.__text _SVXDeviceSetupFlowSceneIDGetName
|| __TEXT.__text _SVXDeviceSetupFlowSiriCapabilitiesStyleGetFromName
|| __TEXT.__text _SVXDeviceSetupFlowSiriCapabilitiesStyleGetIsValid
|| __TEXT.__text _SVXDeviceSetupFlowSiriCapabilitiesStyleGetIsValidAndSpecified
|| __TEXT.__text _SVXDeviceSetupFlowSiriCapabilitiesStyleGetName
|| __TEXT.__text _SVXDeviceSetupGetLocalizationLanguageCodeOverride
|| __TEXT.__text _SVXLocalizationGetAllKeys
|| __TEXT.__text _SVXLocalizationGetAllTables
|| __TEXT.__text _SVXLocalizationGetKeysInTable
|| __TEXT.__text _SVXLocalizationGetLocalizedKey
|| __TEXT.__text _SVXLocalizationGetLocalizedOOBString
|| __TEXT.__text _SVXLocalizationGetLocalizedString
|| __TEXT.__text _SVXPerformingOptionsGetFromNames
|| __TEXT.__text _SVXPerformingOptionsGetNames
|| __TEXT.__text _SVXPerformingOptionsValidate
|| __TEXT.__text _SVXPlatformDependencyTypeGetFromName
|| __TEXT.__text _SVXPlatformDependencyTypeGetIsValid
|| __TEXT.__text _SVXPlatformDependencyTypeGetIsValidAndSpecified
|| __TEXT.__text _SVXPlatformDependencyTypeGetName
|| __TEXT.__text _SVXSessionResignActiveOptionsGetNames
|| __TEXT.__text _SVXSessionStateGetFromName
|| __TEXT.__text _SVXSessionStateGetIsValid
|| __TEXT.__text _SVXSessionStateGetIsValidAndSpecified
|| __TEXT.__text _SVXSessionStateGetName
|| __TEXT.__text _SVXSoundIDGetFromName
|| __TEXT.__text _SVXSoundIDGetIsValid
|| __TEXT.__text _SVXSoundIDGetIsValidAndSpecified
|| __TEXT.__text _SVXSoundIDGetName
|| __TEXT.__text _SVXSpeechSynthesisCreateAudioFromUIAudioData
|| __TEXT.__text _SVXSpeechSynthesisCreateLocaleFromLanguageCode
|| __TEXT.__text _SVXSpeechSynthesisGenderGetFromName
|| __TEXT.__text _SVXSpeechSynthesisGenderGetIsValid
|| __TEXT.__text _SVXSpeechSynthesisGenderGetIsValidAndSpecified
|| __TEXT.__text _SVXSpeechSynthesisGenderGetName
|| __TEXT.__text _SVXSpeechSynthesisGetGenderFromVoiceGender
|| __TEXT.__text _SVXSpeechSynthesisGetLocale
|| __TEXT.__text _SVXSpeechSynthesisGetOutputVoiceInfo
|| __TEXT.__text _SVXSpeechSynthesisOptionsGetFromNames
|| __TEXT.__text _SVXSpeechSynthesisOptionsGetNames
|| __TEXT.__text _SVXSpeechSynthesisOptionsValidate
|| __TEXT.__text _SVXSpeechSynthesisPriorityGetFromName
|| __TEXT.__text _SVXSpeechSynthesisPriorityGetIsValid
|| __TEXT.__text _SVXSpeechSynthesisPriorityGetIsValidAndSpecified
|| __TEXT.__text _SVXSpeechSynthesisPriorityGetName
|| __TEXT.__text _SVXSpeechSynthesisRequestCreatePhaticPrompt
|| __TEXT.__text _SVXSpeechSynthesisRequestHasSpeakableContents
|| __TEXT.__text _SVXSpeechSynthesisRequestIsPhaticPrompt
|| __TEXT.__text _SVXSpeechSynthesisResultTypeGetFromName
|| __TEXT.__text _SVXSpeechSynthesisResultTypeGetIsValid
|| __TEXT.__text _SVXSpeechSynthesisResultTypeGetIsValidAndSpecified
|| __TEXT.__text _SVXSpeechSynthesisResultTypeGetName
|| __TEXT.__text _SVXStoreDemoGetLocalizationKey
|| __TEXT.__text _SVXStoreDemoTranscriptIDGetFromName
|| __TEXT.__text _SVXStoreDemoTranscriptIDGetIsValid
|| __TEXT.__text _SVXStoreDemoTranscriptIDGetIsValidAndSpecified
|| __TEXT.__text _SVXStoreDemoTranscriptIDGetName
|| __TEXT.__text _SVXSystemEventTypeGetFromName
|| __TEXT.__text _SVXSystemEventTypeGetIsValid
|| __TEXT.__text _SVXSystemEventTypeGetIsValidAndSpecified
|| __TEXT.__text _SVXSystemEventTypeGetName
|| __TEXT.__text _SVXTaskOriginGetFromName
|| __TEXT.__text _SVXTaskOriginGetIsValid
|| __TEXT.__text _SVXTaskOriginGetIsValidAndSpecified
|| __TEXT.__text _SVXTaskOriginGetName
|| __TEXT.__text _SiriVOXErrorCodeGetFromName
|| __TEXT.__text _SiriVOXErrorCodeGetIsValid
|| __TEXT.__text _SiriVOXErrorCodeGetIsValidAndSpecified
|| __TEXT.__text _SiriVOXErrorCodeGetName
__ AssistantServices: _AFAnalyticsContextCreateWithError
__ AssistantServices: _AFAnalyticsContextsMerge
__ AssistantServices: _AFAudioSessionAssertionGetCurrentAcquisitionService
__ AssistantServices: _AFAudioSessionAssertionUserInfoKey
__ AssistantServices: _AFBuildVersion
__ AssistantServices: _AFDeviceSetupIsActive
__ AssistantServices: _AFDeviceSupportsSiriMUX
__ AssistantServices: _AFDispatchScheduleWithDelay
__ AssistantServices: _AFIsHorseman
__ AssistantServices: _AFIsInternalInstall
__ AssistantServices: _AFLanguageCodeDidChangeNotification
__ AssistantServices: _AFLogInitIfNeeded
__ AssistantServices: _AFMachAbsoluteTimeGetTimeInterval
__ AssistantServices: _AFOutputVoiceDidChangeNotification
__ AssistantServices: _AFOutputVoiceLanguageForRecognitionLanguage
__ AssistantServices: _AFPreferencesSupportedLanguages
__ AssistantServices: _AFRecordCoreDuetEvent
__ AssistantServices: _AFSiriDeactivationOptionsGetNames
__ AssistantServices: _AFSiriDeactivationReasonGetName
__ AssistantServices: _AFSiriLogContextClientFlow
__ AssistantServices: _AFSiriLogContextConnection
__ AssistantServices: _AFSiriLogContextDaemon
__ AssistantServices: _AFSiriLogContextMyriad
__ AssistantServices: _AFSiriLogContextPerformance
__ AssistantServices: _AFSiriLogContextUtility
__ AssistantServices: _AFSiriXAssetDidChangeDarwinNotification
__ AssistantServices: _AFSpeechEndpointerOperationModeGetName
__ AssistantServices: _AFSpeechEventGetDescription
__ AssistantServices: _AFSupportsWAPI
__ AssistantServices: _OBJC_CLASS_$_AFAnalytics
__ AssistantServices: _OBJC_CLASS_$_AFAnalyticsTurnBasedInstrumentationContext
__ AssistantServices: _OBJC_CLASS_$_AFAssertionContext
__ AssistantServices: _OBJC_CLASS_$_AFAudioPlaybackRequest
__ AssistantServices: _OBJC_CLASS_$_AFAudioPowerUpdater
__ AssistantServices: _OBJC_CLASS_$_AFAudioPowerXPCProvider
__ AssistantServices: _OBJC_CLASS_$_AFClientConfiguration
__ AssistantServices: _OBJC_CLASS_$_AFClientLite
__ AssistantServices: _OBJC_CLASS_$_AFClockAlarm
__ AssistantServices: _OBJC_CLASS_$_AFClockAlarmSnapshot
__ AssistantServices: _OBJC_CLASS_$_AFClockTimer
__ AssistantServices: _OBJC_CLASS_$_AFClockTimerSnapshot
__ AssistantServices: _OBJC_CLASS_$_AFConnection
__ AssistantServices: _OBJC_CLASS_$_AFDeviceContextConnection
__ AssistantServices: _OBJC_CLASS_$_AFError
__ AssistantServices: _OBJC_CLASS_$_AFFeatureFlags
__ AssistantServices: _OBJC_CLASS_$_AFInstanceContext
__ AssistantServices: _OBJC_CLASS_$_AFLocalization
__ AssistantServices: _OBJC_CLASS_$_AFMemoryPressureObserver
__ AssistantServices: _OBJC_CLASS_$_AFModesConfiguration
__ AssistantServices: _OBJC_CLASS_$_AFMyriadCoordinator
__ AssistantServices: _OBJC_CLASS_$_AFMyriadGoodnessScoreContext
__ AssistantServices: _OBJC_CLASS_$_AFOneArgumentSafetyBlock
__ AssistantServices: _OBJC_CLASS_$_AFPreferences
__ AssistantServices: _OBJC_CLASS_$_AFQueue
__ AssistantServices: _OBJC_CLASS_$_AFRequestInfo
__ AssistantServices: _OBJC_CLASS_$_AFSafetyBlock
__ AssistantServices: _OBJC_CLASS_$_AFSetAudioSessionActiveContext
__ AssistantServices: _OBJC_CLASS_$_AFSettingsConnection
__ AssistantServices: _OBJC_CLASS_$_AFSiriActivationListener
__ AssistantServices: _OBJC_CLASS_$_AFSiriTether
__ AssistantServices: _OBJC_CLASS_$_AFSpeakableUtteranceParser
__ AssistantServices: _OBJC_CLASS_$_AFSpeechRecordingAlertBehavior
__ AssistantServices: _OBJC_CLASS_$_AFSpeechRecordingAlertPolicy
__ AssistantServices: _OBJC_CLASS_$_AFSpeechRequestOptions
__ AssistantServices: _OBJC_CLASS_$_AFSpeechSynthesisRecord
__ AssistantServices: _OBJC_CLASS_$_AFVoiceInfo
__ AssistantServices: _OBJC_CLASS_$_AFWatchdogTimer
__ AssistantServices: __AFPreferencesBoolFromValueWithDefault
__ AssistantServices: __AFPreferencesValueForKey
__ AssistantServices: __AFSpeakableUtteranceParserObjDomain
__ AssistantServices: _kAFAssistantErrorDomain
__ AssistantServices: _kAFDisableTTSPlayback
__ AssistantServices: _kAFStereoPartnerMyriadDataDidChangeDarwinNotification
__ AudioToolbox: _AudioFileClose
__ AudioToolbox: _AudioFileGetProperty
__ AudioToolbox: _AudioFileOpenWithCallbacks
__ AudioToolbox: _AudioServicesSetProperty
__ CoreFoundation: _CFBundleCopyLocalizationsForPreferences
__ CoreFoundation: _CFDictionaryContainsKey
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMethodSignature
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ Foundation: _NSIntersectionRange
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ SAObjects: _OBJC_CLASS_$_AceObject
__ SAObjects: _OBJC_CLASS_$_SAARAlternativeResultsView
__ SAObjects: _OBJC_CLASS_$_SAAceView
__ SAObjects: _OBJC_CLASS_$_SAAcknowledgeAlert
__ SAObjects: _OBJC_CLASS_$_SAAppInfo
__ SAObjects: _OBJC_CLASS_$_SACommandFailed
__ SAObjects: _OBJC_CLASS_$_SACommandIgnored
__ SAObjects: _OBJC_CLASS_$_SACommandSucceeded
__ SAObjects: _OBJC_CLASS_$_SADeviceSetupContext
__ SAObjects: _OBJC_CLASS_$_SADomainObject
__ SAObjects: _OBJC_CLASS_$_SAExecuteOnRemoteRequest
__ SAObjects: _OBJC_CLASS_$_SAPhoneClientCoordinationPhoneCall
__ SAObjects: _OBJC_CLASS_$_SAPhonePlayVoiceMail
__ SAObjects: _OBJC_CLASS_$_SAPhoneVoiceMail
__ SAObjects: _OBJC_CLASS_$_SAPreSynthesizeTTS
__ SAObjects: _OBJC_CLASS_$_SASetApplicationContext
__ SAObjects: _OBJC_CLASS_$_SASmsPlayAudio
__ SAObjects: _OBJC_CLASS_$_SASmsSms
__ SAObjects: _OBJC_CLASS_$_SASyncAppIdentifyingInfo
__ SAObjects: _OBJC_CLASS_$_SAUIAddDialogs
__ SAObjects: _OBJC_CLASS_$_SAUIAddViews
__ SAObjects: _OBJC_CLASS_$_SAUIAssistantUtteranceView
__ SAObjects: _OBJC_CLASS_$_SAUICloseAssistant
__ SAObjects: _OBJC_CLASS_$_SAUIDelayedActionCancelCommand
__ SAObjects: _OBJC_CLASS_$_SAUIDelayedActionCommand
__ SAObjects: _OBJC_CLASS_$_SAUIDisambiguationList
__ SAObjects: _OBJC_CLASS_$_SAUILAttachmentExpression
__ SAObjects: _OBJC_CLASS_$_SAUILParseExpressions
__ SAObjects: _OBJC_CLASS_$_SAUILParseExpressionsCompleted
__ SAObjects: _OBJC_CLASS_$_SAUILParseableExpression
__ SAObjects: _OBJC_CLASS_$_SAUILParsedAttachmentExpression
__ SAObjects: _OBJC_CLASS_$_SAUIListenAfterSpeakingBehavior
__ SAObjects: _OBJC_CLASS_$_SAUIRepeatIt
__ SAObjects: _OBJC_CLASS_$_SAUISayIt
__ SAObjects: _OBJC_CLASS_$_SAUIShowRequestHandlingStatus
__ SAObjects: _SADeviceSetupSceneSiriCapabilitiesHomeNewsWeatherValue
__ SAObjects: _SADeviceSetupSceneSiriCapabilitiesHomeWeatherClockValue
__ SAObjects: _SADeviceSetupSceneSiriIntroValue
__ SAObjects: _SADeviceSetupSceneSiriOutroValue
__ SAObjects: _SADeviceSetupSceneTryHeySiriCapabilitiesValue
__ SAObjects: _SADeviceSetupSceneTryHeySiriMusicValue
__ SAObjects: _SADeviceSetupSceneTryHeySiriNewsValue
__ SAObjects: _SADeviceSetupSceneTryHeySiriWeatherValue
__ SAObjects: _SASmsGroupIdentifier
__ SAObjects: _SASmsSmsDeferredDateSentKeyValue
__ SAObjects: _SASmsSmsDeferredGroupNameKeyValue
__ SAObjects: _SASmsSmsDeferredMessageKeyValue
__ SAObjects: _SASmsSmsDeferredRecipientsKeyValue
__ SAObjects: _SASmsSmsDeferredSenderKeyValue
__ SAObjects: _SASmsSmsDeferredSubjectKeyValue
__ SAObjects: _SAUIResponseModeDisplayForwardValue
__ SAObjects: _SAUIResponseModeDisplayOnlyValue
__ SAObjects: _SAUIResponseModeVoiceForwardValue
__ SAObjects: _SAUIResponseModeVoiceOnlyValue
__ SAObjects: _SAUIShowRequestHandlingStatusRequestHandlingStatusASR_NL_ON_DEVICEValue
__ SAObjects: _SAUIShowRequestHandlingStatusRequestHandlingStatusASR_NL_ON_SERVERValue
__ SAObjects: _SAUIShowRequestHandlingStatusRequestHandlingStatusASR_ON_DEVICE_NL_ON_SERVERValue
__ SAObjects: _SAUISoundIDAnnouncementAudioRecordingStartValue
__ SiriAnalytics: _OBJC_CLASS_$_AssistantSiriAnalytics
__ SiriInstrumentation: _OBJC_CLASS_$_RFSchemaRFClientEvent
__ SiriInstrumentation: _OBJC_CLASS_$_RFSchemaRFClientEventMetadata
__ SiriInstrumentation: _OBJC_CLASS_$_RFSchemaRFPatternExecuted
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaInvocation
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaPNRTextToSpeechRequestReceived
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaSiriResponseContext
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaTextToSpeechBegin
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaTextToSpeechEnd
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUIStateDismissed
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUIStatePresenting
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUIStateTransition
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUUFRSaid
__ SiriInstrumentation: _OBJC_CLASS_$_SISchemaUUID
__ SiriModes: _MDModeGetName
__ SiriModes: _OBJC_CLASS_$_MDDialogTransformer
__ SiriModes: _OBJC_CLASS_$_MDFixedModeProvider
__ SiriStates: _OBJC_CLASS_$_SRSTClient
__ VoiceServices: _OBJC_CLASS_$_VSLocalizedString
__ VoiceServices: _OBJC_CLASS_$_VSPresynthesizedAudioRequest
__ VoiceServices: _OBJC_CLASS_$_VSSpeechRequest
__ VoiceServices: _OBJC_CLASS_$_VSSpeechSynthesizer
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriCapabilities
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriClock
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriClockPlankTimer
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriHome
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriMusic
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriNews
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriWeather
__ VoiceServices: _VSLocalizedStringKeyOOBHeySiriWeather2
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilities
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilityClock
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilityHome
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilityMusic
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilityNews
__ VoiceServices: _VSLocalizedStringKeyOOBSiriCapabilityWeather
__ VoiceServices: _VSLocalizedStringKeyOOBSiriIntro
__ VoiceServices: _VSLocalizedStringKeyOOBTrySay0
__ VoiceServices: _VSLocalizedStringKeyOOBTrySay1
__ libMobileGestalt.dylib: _MGGetProductType
__ libMobileGestalt.dylib: _MGGetStringAnswer
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue_not$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_pthread_root_queue_create
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _pthread_attr_destroy
__ libSystem.B.dylib: _pthread_attr_getschedparam
__ libSystem.B.dylib: _pthread_attr_init
__ libSystem.B.dylib: _pthread_attr_setinheritsched
__ libSystem.B.dylib: _pthread_attr_setschedparam
__ libSystem.B.dylib: _pthread_attr_setschedpolicy
__ libSystem.B.dylib: _pthread_main_np
__ libSystem.B.dylib: _pthread_set_fixedpriority_self
__ libSystem.B.dylib: _pthread_set_qos_class_self_np
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x2
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x10
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x27
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x5
__ libobjc.A.dylib: _objc_retain_x6
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
SVXSpeechSynthesisAnnouncer : SVXAnnouncer <SVXSpeechSynthesisListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXSpeechSynthesisAnnouncer protocol]


SVXDeviceSetupFlowDisplayKeyFrame : NSObject <NSCopying, NSSecureCoding>
 @property  long long keyFrameID
 @property  NSString *text
 @property  double offset
 @property  double duration

  // class methods
  +[SVXDeviceSetupFlowDisplayKeyFrame supportsSecureCoding]
  +[SVXDeviceSetupFlowDisplayKeyFrame newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupFlowDisplayKeyFrame text]
  -[SVXDeviceSetupFlowDisplayKeyFrame _descriptionWithIndent:]
  -[SVXDeviceSetupFlowDisplayKeyFrame encodeWithCoder:]
  -[SVXDeviceSetupFlowDisplayKeyFrame mutatedCopyWithMutator:]
  -[SVXDeviceSetupFlowDisplayKeyFrame .cxx_destruct]
  -[SVXDeviceSetupFlowDisplayKeyFrame duration]
  -[SVXDeviceSetupFlowDisplayKeyFrame copyWithZone:]
  -[SVXDeviceSetupFlowDisplayKeyFrame offset]
  -[SVXDeviceSetupFlowDisplayKeyFrame isEqual:]
  -[SVXDeviceSetupFlowDisplayKeyFrame initWithCoder:]
  -[SVXDeviceSetupFlowDisplayKeyFrame keyFrameID]
  -[SVXDeviceSetupFlowDisplayKeyFrame initWithKeyFrameID:text:offset:duration:]


_SVXDeviceSetupFlowDisplayKeyFrameMutation : NSObject <SVXDeviceSetupFlowDisplayKeyFrameMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation setDuration:]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation .cxx_destruct]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation setOffset:]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation generate]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation init]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation setText:]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation initWithBaseModel:]
  -[_SVXDeviceSetupFlowDisplayKeyFrameMutation setKeyFrameID:]


SVXServiceCommandHandlerUISayIt : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUISayIt supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUISayIt identifier]
  -[SVXServiceCommandHandlerUISayIt .cxx_destruct]
  -[SVXServiceCommandHandlerUISayIt isCommandUUFR:]
  -[SVXServiceCommandHandlerUISayIt handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUISayIt shouldDependOnCommand:]
  -[SVXServiceCommandHandlerUISayIt prepareToHandleCommand:completion:]
  -[SVXServiceCommandHandlerUISayIt initWithSpeechSynthesizer:module:]


SVXServiceCommandHandlerFallback : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerFallback supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerFallback identifier]
  -[SVXServiceCommandHandlerFallback initWithResult:]
  -[SVXServiceCommandHandlerFallback .cxx_destruct]
  -[SVXServiceCommandHandlerFallback isCommandUUFR:]
  -[SVXServiceCommandHandlerFallback handleCommand:withContext:taskTracker:completion:]


SVXServiceCommandHandlerUIRepeatIt : NSObject <SVXSpeechSynthesisListening, SVXServiceCommandHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *identifier

  // class methods
  +[SVXServiceCommandHandlerUIRepeatIt supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIRepeatIt identifier]
  -[SVXServiceCommandHandlerUIRepeatIt .cxx_destruct]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidBecomeBusy]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidBecomeIdle]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerWillEnqueueRequest:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerWillStartRequest:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidStartRequest:record:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidFinishRequest:utteranceInfo:record:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidCancelRequest:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidInterruptRequest:taskTracker:]
  -[SVXServiceCommandHandlerUIRepeatIt speechSynthesizerDidFailRequest:taskTracker:error:]
  -[SVXServiceCommandHandlerUIRepeatIt isCommandUUFR:]
  -[SVXServiceCommandHandlerUIRepeatIt handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIRepeatIt shouldDependOnCommand:]
  -[SVXServiceCommandHandlerUIRepeatIt initWithSpeechSynthesizer:performer:]


SVXServiceCommandResult : NSObject <NSCopying>
  // class methods
  +[SVXServiceCommandResult resultIgnored]
  +[SVXServiceCommandResult resultSuccess]
  +[SVXServiceCommandResult resultFailureWithErrorCode:reason:]
  +[SVXServiceCommandResult resultWithCommand:]
  +[SVXServiceCommandResult resultWithResults:]

  // instance methods
  -[SVXServiceCommandResult .cxx_destruct]
  -[SVXServiceCommandResult copyWithZone:]
  -[SVXServiceCommandResult handleResultUsingIgnoredBlock:successBlock:failureBlock:commandBlock:]
  -[SVXServiceCommandResult _initWithType:failureErrorCode:failureReason:command:results:]
  -[SVXServiceCommandResult _optimalResult]


_SVXRemoteExpressionParsingService : NSObject <SVXExpressionParsingServing>
 @property  <SVXAceCommandHandling> *aceHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXRemoteExpressionParsingService .cxx_destruct]
  -[_SVXRemoteExpressionParsingService parseExpressions:targetDevice:reply:]
  -[_SVXRemoteExpressionParsingService initWithAceHandler:]
  -[_SVXRemoteExpressionParsingService aceHandler]
  -[_SVXRemoteExpressionParsingService setAceHandler:]


SVXClientServiceConnection : NSObject <SVXClientService, SVXClientServiceDelegate, SVXClientServiceProviding>
 @property  <SVXClientKeepAliveServicing> *keepAliveService
 @property  <SVXPerforming> *performer
 @property  AFInstanceContext *instanceContext
 @property  <SVXClientActivationServicing> *activationService
 @property  <SVXClientAudioSystemServicing> *audioSystemService
 @property  <SVXClientDeviceServicing> *deviceService
 @property  <SVXClientAudioPowerServicing> *inputAudioPowerService
 @property  <SVXClientAudioPowerServicing> *outputAudioPowerService
 @property  <SVXClientSessionServicing> *sessionService
 @property  <SVXClientSpeechSynthesisServicing> *speechSynthesisService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientServiceConnection connectionInterrupted]
  -[SVXClientServiceConnection _invalidate]
  -[SVXClientServiceConnection _connection]
  -[SVXClientServiceConnection dealloc]
  -[SVXClientServiceConnection .cxx_destruct]
  -[SVXClientServiceConnection instanceContext]
  -[SVXClientServiceConnection pingWithReply:]
  -[SVXClientServiceConnection sessionService]
  -[SVXClientServiceConnection invalidate]
  -[SVXClientServiceConnection connectionInvalidated]
  -[SVXClientServiceConnection speechSynthesisService]
  -[SVXClientServiceConnection initWithComponents:delegate:]
  -[SVXClientServiceConnection activationService]
  -[SVXClientServiceConnection activateWithContext:completion:]
  -[SVXClientServiceConnection performer]
  -[SVXClientServiceConnection _clientServiceWithErrorHandler:]
  -[SVXClientServiceConnection _cleanUpConnection]
  -[SVXClientServiceConnection deviceService]
  -[SVXClientServiceConnection fetchSessionStateWithCompletion:]
  -[SVXClientServiceConnection fetchSessionActivityStateWithCompletion:]
  -[SVXClientServiceConnection fetchAlarmAndTimerFiringContextWithCompletion:]
  -[SVXClientServiceConnection preheatWithActivationSource:]
  -[SVXClientServiceConnection prewarmWithContext:completion:]
  -[SVXClientServiceConnection deactivateWithContext:completion:]
  -[SVXClientServiceConnection performManualEndpointing]
  -[SVXClientServiceConnection transitToAutomaticEndpointing]
  -[SVXClientServiceConnection fetchAudioPowerWithType:completion:]
  -[SVXClientServiceConnection prewarmRequest:]
  -[SVXClientServiceConnection synthesizeRequest:handlerUUID:completion:]
  -[SVXClientServiceConnection enqueueSpeechSynthesisRequest:completion:]
  -[SVXClientServiceConnection cancelPendingSpeechSynthesisRequest:]
  -[SVXClientServiceConnection stopSpeechSynthesisRequest:]
  -[SVXClientServiceConnection setDeviceSetupContext:]
  -[SVXClientServiceConnection prepareForDeviceSetupWithContext:completion:]
  -[SVXClientServiceConnection getInstanceInfoWithCompletion:]
  -[SVXClientServiceConnection requestPermissionToActivateWithContext:completion:]
  -[SVXClientServiceConnection notifyWillActivateWithContext:]
  -[SVXClientServiceConnection notifyDidActivateWithContext:]
  -[SVXClientServiceConnection notifyDidNotActivateWithContext:error:]
  -[SVXClientServiceConnection notifyWillDeactivateWithContext:]
  -[SVXClientServiceConnection notifyDidDeactivateWithContext:]
  -[SVXClientServiceConnection notifyWillChangeSessionStateFrom:to:]
  -[SVXClientServiceConnection notifyDidChangeSessionStateFrom:to:]
  -[SVXClientServiceConnection notifySessionWillPresentFeedbackWithDialogIdentifier:]
  -[SVXClientServiceConnection notifySessionWillStartSoundWithID:]
  -[SVXClientServiceConnection notifySessionDidStartSoundWithID:]
  -[SVXClientServiceConnection notifySessionDidStopSoundWithID:error:]
  -[SVXClientServiceConnection notifySessionWillBecomeActiveWithActivationContext:turnID:]
  -[SVXClientServiceConnection notifySessionDidBecomeActiveWithActivationContext:turnID:]
  -[SVXClientServiceConnection notifySessionWillResignActiveWithOptions:duration:]
  -[SVXClientServiceConnection notifySessionDidResignActiveWithDeactivationContext:]
  -[SVXClientServiceConnection notifyWillBeginUpdateAudioPowerWithType:wrapper:]
  -[SVXClientServiceConnection notifyDidEndUpdateAudioPowerWithType:]
  -[SVXClientServiceConnection notifyAudioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXClientServiceConnection notifyAudioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXClientServiceConnection handleSpeechSynthesisSynthesizedBufferForHandlerUUID:audioChunkData:audioChunkIndex:reply:]
  -[SVXClientServiceConnection getClientServiceUsingBlock:errorHandler:]
  -[SVXClientServiceConnection initWithComponents:instanceContext:delegate:]
  -[SVXClientServiceConnection initWithQueuePerformer:activationService:audioSystemService:deviceService:inputAudioPowerService:outputAudioPowerService:sessionService:speechSynthesisService:keepAliveService:instanceContext:delegate:]
  -[SVXClientServiceConnection inputAudioPowerService]
  -[SVXClientServiceConnection outputAudioPowerService]
  -[SVXClientServiceConnection audioSystemService]
  -[SVXClientServiceConnection keepAliveService]
  -[SVXClientServiceConnection _clientServiceDidChange:]
  -[SVXClientServiceConnection _cleanUpComponents]


SVXServiceCommandDelayedActionStore : NSObject
  // instance methods
  -[SVXServiceCommandDelayedActionStore actionForKey:]
  -[SVXServiceCommandDelayedActionStore .cxx_destruct]
  -[SVXServiceCommandDelayedActionStore removeAllActions]
  -[SVXServiceCommandDelayedActionStore init]
  -[SVXServiceCommandDelayedActionStore setAction:forKey:]
  -[SVXServiceCommandDelayedActionStore removeActionForKey:]


SVXActivationContext : NSObject <NSCopying, NSSecureCoding>
 @property  long long source
 @property  unsigned long timestamp
 @property  SVXButtonEvent *buttonEvent
 @property  SVXSystemEvent *systemEvent
 @property  SVXClientInfo *clientInfo
 @property  AFRequestInfo *requestInfo
 @property  NSDictionary *userInfo

  // class methods
  +[SVXActivationContext supportsSecureCoding]
  +[SVXActivationContext newWithBuilder:]

  // instance methods
  -[SVXActivationContext source]
  -[SVXActivationContext _descriptionWithIndent:]
  -[SVXActivationContext userInfo]
  -[SVXActivationContext encodeWithCoder:]
  -[SVXActivationContext clientInfo]
  -[SVXActivationContext mutatedCopyWithMutator:]
  -[SVXActivationContext .cxx_destruct]
  -[SVXActivationContext buttonEvent]
  -[SVXActivationContext copyWithZone:]
  -[SVXActivationContext timestamp]
  -[SVXActivationContext isEqual:]
  -[SVXActivationContext initWithCoder:]
  -[SVXActivationContext requestInfo]
  -[SVXActivationContext initWithSource:timestamp:buttonEvent:systemEvent:clientInfo:requestInfo:userInfo:]
  -[SVXActivationContext systemEvent]


_SVXActivationContextMutation : NSObject <SVXActivationContextMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXActivationContextMutation setSource:]
  -[_SVXActivationContextMutation setTimestamp:]
  -[_SVXActivationContextMutation setClientInfo:]
  -[_SVXActivationContextMutation setUserInfo:]
  -[_SVXActivationContextMutation .cxx_destruct]
  -[_SVXActivationContextMutation setButtonEvent:]
  -[_SVXActivationContextMutation generate]
  -[_SVXActivationContextMutation init]
  -[_SVXActivationContextMutation initWithBaseModel:]
  -[_SVXActivationContextMutation setRequestInfo:]
  -[_SVXActivationContextMutation setSystemEvent:]


SVXDeviceProblemsState : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL isFixingProblems
 @property  unsigned long problems

  // class methods
  +[SVXDeviceProblemsState supportsSecureCoding]
  +[SVXDeviceProblemsState newWithBuilder:]

  // instance methods
  -[SVXDeviceProblemsState _descriptionWithIndent:]
  -[SVXDeviceProblemsState encodeWithCoder:]
  -[SVXDeviceProblemsState mutatedCopyWithMutator:]
  -[SVXDeviceProblemsState copyWithZone:]
  -[SVXDeviceProblemsState isEqual:]
  -[SVXDeviceProblemsState initWithCoder:]
  -[SVXDeviceProblemsState initWithIsFixingProblems:problems:]
  -[SVXDeviceProblemsState isFixingProblems]
  -[SVXDeviceProblemsState problems]


_SVXDeviceProblemsStateMutation : NSObject <SVXDeviceProblemsStateMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceProblemsStateMutation .cxx_destruct]
  -[_SVXDeviceProblemsStateMutation generate]
  -[_SVXDeviceProblemsStateMutation init]
  -[_SVXDeviceProblemsStateMutation initWithBaseModel:]
  -[_SVXDeviceProblemsStateMutation setIsFixingProblems:]
  -[_SVXDeviceProblemsStateMutation setProblems:]


SVXUserFeedbackVoiceContent : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *text
 @property  BOOL isPhonetic

  // class methods
  +[SVXUserFeedbackVoiceContent supportsSecureCoding]
  +[SVXUserFeedbackVoiceContent newWithBuilder:]

  // instance methods
  -[SVXUserFeedbackVoiceContent text]
  -[SVXUserFeedbackVoiceContent _descriptionWithIndent:]
  -[SVXUserFeedbackVoiceContent isPhonetic]
  -[SVXUserFeedbackVoiceContent encodeWithCoder:]
  -[SVXUserFeedbackVoiceContent mutatedCopyWithMutator:]
  -[SVXUserFeedbackVoiceContent .cxx_destruct]
  -[SVXUserFeedbackVoiceContent copyWithZone:]
  -[SVXUserFeedbackVoiceContent isEqual:]
  -[SVXUserFeedbackVoiceContent initWithCoder:]
  -[SVXUserFeedbackVoiceContent initWithText:isPhonetic:]


_SVXUserFeedbackVoiceContentMutation : NSObject <SVXUserFeedbackVoiceContentMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXUserFeedbackVoiceContentMutation .cxx_destruct]
  -[_SVXUserFeedbackVoiceContentMutation generate]
  -[_SVXUserFeedbackVoiceContentMutation init]
  -[_SVXUserFeedbackVoiceContentMutation setText:]
  -[_SVXUserFeedbackVoiceContentMutation initWithBaseModel:]
  -[_SVXUserFeedbackVoiceContentMutation setIsPhonetic:]


SVXServiceCommandDelayedAction : NSObject
 @property  SAUIDelayedActionCommand *command
 @property  <SVXTaskTracking> *taskTracker

  // instance methods
  -[SVXServiceCommandDelayedAction command]
  -[SVXServiceCommandDelayedAction .cxx_destruct]
  -[SVXServiceCommandDelayedAction taskTracker]
  -[SVXServiceCommandDelayedAction initWithCommand:taskTracker:]


SVXServiceCommandHandler : NSObject <SVXModuleInstance>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXServiceCommandHandler _reset]
  -[SVXServiceCommandHandler reset]
  -[SVXServiceCommandHandler .cxx_destruct]
  -[SVXServiceCommandHandler initWithModule:]
  -[SVXServiceCommandHandler isCommandUUFR:]
  -[SVXServiceCommandHandler startWithModuleInstanceProvider:platformDependencies:]
  -[SVXServiceCommandHandler stopWithModuleInstanceProvider:]
  -[SVXServiceCommandHandler handleCommand:taskTracker:completion:]
  -[SVXServiceCommandHandler fallbackModeProvider]
  -[SVXServiceCommandHandler _handleCommand:taskTracker:completion:]
  -[SVXServiceCommandHandler handleResult:forCommand:completion:]


SVXSessionOperation : NSObject
  // instance methods
  -[SVXSessionOperation .cxx_destruct]
  -[SVXSessionOperation initWithActivationContext:completion:]
  -[SVXSessionOperation initWithDeactivationContext:completion:]
  -[SVXSessionOperation handleOperationUsingActivationBlock:deactivationBlock:]


SVXModule : NSObject
 @property  BOOL isActive
 @property  NSString *identifier
 @property  Class instanceClass
 @property  AFInstanceContext *instanceContext
 @property  AFPreferences *preferences
 @property  AFAnalytics *analytics
 @property  <SVXPerforming> *performer

  // instance methods
  -[SVXModule setIsActive:]
  -[SVXModule analytics]
  -[SVXModule identifier]
  -[SVXModule isActive]
  -[SVXModule .cxx_destruct]
  -[SVXModule preferences]
  -[SVXModule instanceContext]
  -[SVXModule performer]
  -[SVXModule initWithIdentifier:instanceClass:instanceContext:preferences:analytics:performer:]
  -[SVXModule instanceClass]


SVXModuleInstanceMap : NSObject <SVXModuleInstanceProviding>
 @property  NSDictionary *dictionaryRepresentation
 @property  SVXClientServiceServer *clientServiceServer
 @property  SVXServiceCommandHandler *serviceCommandHandler
 @property  SVXSessionManager *sessionManager
 @property  SVXSpeechSynthesizer *speechSynthesizer
 @property  SVXSystemObserver *systemObserver
 @property  SVXDeviceSetupManager *deviceSetupManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXModuleInstanceMap .cxx_destruct]
  -[SVXModuleInstanceMap initWithDictionaryRepresentation:]
  -[SVXModuleInstanceMap sessionManager]
  -[SVXModuleInstanceMap dictionaryRepresentation]
  -[SVXModuleInstanceMap speechSynthesizer]
  -[SVXModuleInstanceMap moduleInstanceWithIdentifier:]
  -[SVXModuleInstanceMap clientServiceServer]
  -[SVXModuleInstanceMap serviceCommandHandler]
  -[SVXModuleInstanceMap systemObserver]
  -[SVXModuleInstanceMap deviceSetupManager]


SVXSessionActivationAnnouncer : SVXAnnouncer <SVXSessionActivationListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXSessionActivationAnnouncer protocol]


SVXAnnouncer : NSObject
  // class methods
  +[SVXAnnouncer protocol]

  // instance methods
  -[SVXAnnouncer addListener:]
  -[SVXAnnouncer methodSignatureForSelector:]
  -[SVXAnnouncer removeListener:]
  -[SVXAnnouncer dealloc]
  -[SVXAnnouncer respondsToSelector:]
  -[SVXAnnouncer .cxx_destruct]
  -[SVXAnnouncer removeAllListeners]
  -[SVXAnnouncer forwardInvocation:]
  -[SVXAnnouncer init]
  -[SVXAnnouncer _accessListenersUsingBlock:]


SVXAudioSessionAssertion : NSObject
 @property  unsigned int audioSessionID
 @property  NSString *reason
 @property  <SVXTaskTracking> *taskTracker

  // instance methods
  -[SVXAudioSessionAssertion audioSessionID]
  -[SVXAudioSessionAssertion dealloc]
  -[SVXAudioSessionAssertion .cxx_destruct]
  -[SVXAudioSessionAssertion reason]
  -[SVXAudioSessionAssertion taskTracker]
  -[SVXAudioSessionAssertion relinquish]
  -[SVXAudioSessionAssertion initWithReason:audioSessionID:taskTracker:relinquishHandler:]


SVXSpeechSynthesisConfiguration : NSObject <NSCopying>
 @property  AFVoiceInfo *outputVoiceInfo
 @property  NSLocale *locale
 @property  unsigned int audioSessionID

  // class methods
  +[SVXSpeechSynthesisConfiguration configurationWithLocale:]
  +[SVXSpeechSynthesisConfiguration configurationWithOutputVoiceInfo:]
  +[SVXSpeechSynthesisConfiguration configurationWithAudioSessionID:]

  // instance methods
  -[SVXSpeechSynthesisConfiguration audioSessionID]
  -[SVXSpeechSynthesisConfiguration .cxx_destruct]
  -[SVXSpeechSynthesisConfiguration locale]
  -[SVXSpeechSynthesisConfiguration copyWithZone:]
  -[SVXSpeechSynthesisConfiguration initWithLocale:outputVoiceInfo:audioSessionID:]
  -[SVXSpeechSynthesisConfiguration outputVoiceInfo]


SVXSpeechSynthesizer : NSObject <VSSpeechSynthesizerDelegate, SVXModuleInstance>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXSpeechSynthesizer creationContextFromInstrumentMetrics:]

  // instance methods
  -[SVXSpeechSynthesizer prewarm]
  -[SVXSpeechSynthesizer addListener:]
  -[SVXSpeechSynthesizer removeListener:]
  -[SVXSpeechSynthesizer dealloc]
  -[SVXSpeechSynthesizer .cxx_destruct]
  -[SVXSpeechSynthesizer cancelRequest:]
  -[SVXSpeechSynthesizer initWithModule:]
  -[SVXSpeechSynthesizer _speechSynthesizer]
  -[SVXSpeechSynthesizer speechSynthesizer:didStartSpeakingRequest:]
  -[SVXSpeechSynthesizer speechSynthesizer:withRequest:didReceiveTimingInfo:]
  -[SVXSpeechSynthesizer speechSynthesizer:didFinishSpeakingRequest:successfully:phonemesSpoken:withError:]
  -[SVXSpeechSynthesizer speechSynthesizer:didFinishSpeakingRequest:withInstrumentMetrics:]
  -[SVXSpeechSynthesizer speechSynthesizer:withSynthesisRequest:didGenerateAudioChunk:]
  -[SVXSpeechSynthesizer speechSynthesizer:didFinishSynthesisRequest:withInstrumentMetrics:error:]
  -[SVXSpeechSynthesizer speechSynthesizer:didStartPresynthesizedAudioRequest:]
  -[SVXSpeechSynthesizer speechSynthesizer:didStopPresynthesizedAudioRequest:atEnd:error:]
  -[SVXSpeechSynthesizer speechSynthesizer:didFinishPresynthesizedAudioRequest:withInstrumentMetrics:error:]
  -[SVXSpeechSynthesizer updateWithConfiguration:]
  -[SVXSpeechSynthesizer cancelPendingRequests]
  -[SVXSpeechSynthesizer _prewarm]
  -[SVXSpeechSynthesizer prewarmRequest:]
  -[SVXSpeechSynthesizer startWithModuleInstanceProvider:platformDependencies:]
  -[SVXSpeechSynthesizer stopWithModuleInstanceProvider:]
  -[SVXSpeechSynthesizer outputVoiceChanged:]
  -[SVXSpeechSynthesizer languageCodeChanged:]
  -[SVXSpeechSynthesizer synthesizeRequest:audioChunkHandler:taskTracker:analyticsContext:completion:]
  -[SVXSpeechSynthesizer enqueueRequest:languageCode:voiceName:gender:audioSessionID:preparation:finalization:taskTracker:analyticsContext:]
  -[SVXSpeechSynthesizer stopRequest:withInterruptionBehavior:]
  -[SVXSpeechSynthesizer stopCurrentRequestWithInterruptionBehavior:]
  -[SVXSpeechSynthesizer beginUpdateAudioPowerWithCompletion:]
  -[SVXSpeechSynthesizer endUpdateAudioPower]
  -[SVXSpeechSynthesizer _useStreamingAudio]
  -[SVXSpeechSynthesizer _configuredSpeechRequestForContext:]
  -[SVXSpeechSynthesizer _prewarmWithContext:]
  -[SVXSpeechSynthesizer _configureWithConfiguration:]
  -[SVXSpeechSynthesizer _beginUpdateAudioPowerWithCompletion:]
  -[SVXSpeechSynthesizer _endUpdateAudioPower]
  -[SVXSpeechSynthesizer _handleDidStartSpeakingWithSpeechRequest:timestamp:]
  -[SVXSpeechSynthesizer _handleDidFinishSpeakingWithSpeechRequest:instrumentMetrics:]
  -[SVXSpeechSynthesizer _handleDidFinishSpeakingWithSpeechRequest:success:error:]
  -[SVXSpeechSynthesizer _handleDidStartPresynthesizedAudioRequest:timestamp:]
  -[SVXSpeechSynthesizer _handleDidStopPresynthesizedAudioRequest:success:error:]
  -[SVXSpeechSynthesizer _handleDidFinishPresynthesizedAudioRequest:instrumentMetrics:error:]
  -[SVXSpeechSynthesizer _handleDidReceiveSpeechWordTimingInfoArray:forSpeechRequest:]
  -[SVXSpeechSynthesizer _handleDidGenerateAudioChunkData:forSpeechRequest:]
  -[SVXSpeechSynthesizer _handleDidFinishSynthesizingForSpeechRequest:instrumentMetrics:error:]
  -[SVXSpeechSynthesizer _numberOfContexts]
  -[SVXSpeechSynthesizer _enqueueContext:]
  -[SVXSpeechSynthesizer _processPendingContexts]
  -[SVXSpeechSynthesizer _startContext:]
  -[SVXSpeechSynthesizer _continueContext:error:]
  -[SVXSpeechSynthesizer _startPresynthesizedAudioRequestForContext:error:]
  -[SVXSpeechSynthesizer _startSpeechRequestForContext:error:]
  -[SVXSpeechSynthesizer _cancelPendingContextsAtIndexes:]
  -[SVXSpeechSynthesizer _stopCurrentSpeakingContextWithInterruptionBehavior:]
  -[SVXSpeechSynthesizer _cancelPendingSpeakingContextWithRequest:]
  -[SVXSpeechSynthesizer _cancelPendingSpeakingContextsWithPriorityBelow:]
  -[SVXSpeechSynthesizer _cancelPendingContextsWithOperationType:]
  -[SVXSpeechSynthesizer _stopCurrentSpeakingContextWithRequest:withInterruptionBehavior:]
  -[SVXSpeechSynthesizer _finalizeContext:withResultType:utterance:error:]


SVXClientInfo : NSObject <NSCopying, NSSecureCoding>
 @property  int processIdentifier
 @property  NSString *processName

  // class methods
  +[SVXClientInfo supportsSecureCoding]
  +[SVXClientInfo newWithBuilder:]

  // instance methods
  -[SVXClientInfo _descriptionWithIndent:]
  -[SVXClientInfo processName]
  -[SVXClientInfo encodeWithCoder:]
  -[SVXClientInfo mutatedCopyWithMutator:]
  -[SVXClientInfo .cxx_destruct]
  -[SVXClientInfo processIdentifier]
  -[SVXClientInfo copyWithZone:]
  -[SVXClientInfo isEqual:]
  -[SVXClientInfo initWithCoder:]
  -[SVXClientInfo initWithProcessIdentifier:processName:]


_SVXClientInfoMutation : NSObject <SVXClientInfoMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXClientInfoMutation setProcessIdentifier:]
  -[_SVXClientInfoMutation setProcessName:]
  -[_SVXClientInfoMutation .cxx_destruct]
  -[_SVXClientInfoMutation generate]
  -[_SVXClientInfoMutation init]
  -[_SVXClientInfoMutation initWithBaseModel:]


SVXStoreDemo : NSObject <NSCopying, NSSecureCoding>
 @property  long long transcriptID
 @property  NSString *languageCode
 @property  long long gender
 @property  float outputVolume

  // class methods
  +[SVXStoreDemo supportsSecureCoding]
  +[SVXStoreDemo newWithBuilder:]

  // instance methods
  -[SVXStoreDemo _descriptionWithIndent:]
  -[SVXStoreDemo encodeWithCoder:]
  -[SVXStoreDemo gender]
  -[SVXStoreDemo mutatedCopyWithMutator:]
  -[SVXStoreDemo .cxx_destruct]
  -[SVXStoreDemo languageCode]
  -[SVXStoreDemo copyWithZone:]
  -[SVXStoreDemo outputVolume]
  -[SVXStoreDemo isEqual:]
  -[SVXStoreDemo initWithCoder:]
  -[SVXStoreDemo initWithTranscriptID:languageCode:gender:outputVolume:]
  -[SVXStoreDemo transcriptID]


_SVXStoreDemoMutation : NSObject <SVXStoreDemoMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXStoreDemoMutation setLanguageCode:]
  -[_SVXStoreDemoMutation .cxx_destruct]
  -[_SVXStoreDemoMutation setOutputVolume:]
  -[_SVXStoreDemoMutation setGender:]
  -[_SVXStoreDemoMutation generate]
  -[_SVXStoreDemoMutation init]
  -[_SVXStoreDemoMutation initWithBaseModel:]
  -[_SVXStoreDemoMutation setTranscriptID:]


SVXClientServiceManager : NSObject <SVXClientServiceConnectionDelegate, SVXClientServiceProviding>
 @property  <SVXClientKeepAliveServicing> *keepAliveService
 @property  <SVXClientActivationServicing> *activationService
 @property  <SVXClientSessionStateServicing> *sessionStateService
 @property  <SVXClientSessionServicing> *sessionService
 @property  <SVXClientAudioPowerServicing> *inputAudioPowerService
 @property  <SVXClientAudioPowerServicing> *outputAudioPowerService
 @property  <SVXClientSpeechSynthesisServicing> *speechSynthesisService
 @property  <SVXClientDeviceServicing> *deviceService
 @property  <SVXClientAudioSystemServicing> *audioSystemService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXClientServiceManager sharedManager]

  // instance methods
  -[SVXClientServiceManager _connect]
  -[SVXClientServiceManager _connection]
  -[SVXClientServiceManager .cxx_destruct]
  -[SVXClientServiceManager sessionService]
  -[SVXClientServiceManager init]
  -[SVXClientServiceManager speechSynthesisService]
  -[SVXClientServiceManager activationService]
  -[SVXClientServiceManager clientServiceConnectionDidInvalidate:]
  -[SVXClientServiceManager clientServiceConnection:performerForComponent:]
  -[SVXClientServiceManager deviceService]
  -[SVXClientServiceManager getClientServiceUsingBlock:errorHandler:]
  -[SVXClientServiceManager inputAudioPowerService]
  -[SVXClientServiceManager outputAudioPowerService]
  -[SVXClientServiceManager audioSystemService]
  -[SVXClientServiceManager keepAliveService]
  -[SVXClientServiceManager sessionStateService]


_SVXPlayAudioExpressionParser : _SVXExpressionParser
  // instance methods
  -[_SVXPlayAudioExpressionParser parsePlayAudio:reply:]


SVXMyriadWiFiAssertion : NSObject
 @property  AFWatchdogTimer *assertionWaitTimer
 @property  <SVXMyriadWiFiAssertionProtocol> *delegate
 @property  NSObject<OS_dispatch_queue> *workQueue
 @property  BOOL wifiAssertionAcquired

  // instance methods
  -[SVXMyriadWiFiAssertion _releaseAssertion]
  -[SVXMyriadWiFiAssertion workQueue]
  -[SVXMyriadWiFiAssertion delegate]
  -[SVXMyriadWiFiAssertion .cxx_destruct]
  -[SVXMyriadWiFiAssertion initWithQueue:delegate:]
  -[SVXMyriadWiFiAssertion acquireHomeKitAccessoryWiFiAssertionWithTimeout:]
  -[SVXMyriadWiFiAssertion releaseHomeKitAccessoryWiFiAssertion]
  -[SVXMyriadWiFiAssertion wifiAssertionAcquired]
  -[SVXMyriadWiFiAssertion assertionWaitTimer]
  -[SVXMyriadWiFiAssertion setAssertionWaitTimer:]


SVXSpeechSynthesisWordTiming : NSObject <NSCopying, NSSecureCoding>
 @property  {_NSRange=QQ} range
 @property  double timeInterval

  // class methods
  +[SVXSpeechSynthesisWordTiming supportsSecureCoding]
  +[SVXSpeechSynthesisWordTiming newWithBuilder:]

  // instance methods
  -[SVXSpeechSynthesisWordTiming _descriptionWithIndent:]
  -[SVXSpeechSynthesisWordTiming timeInterval]
  -[SVXSpeechSynthesisWordTiming encodeWithCoder:]
  -[SVXSpeechSynthesisWordTiming mutatedCopyWithMutator:]
  -[SVXSpeechSynthesisWordTiming copyWithZone:]
  -[SVXSpeechSynthesisWordTiming range]
  -[SVXSpeechSynthesisWordTiming isEqual:]
  -[SVXSpeechSynthesisWordTiming initWithCoder:]
  -[SVXSpeechSynthesisWordTiming initWithRange:timeInterval:]


_SVXSpeechSynthesisWordTimingMutation : NSObject <SVXSpeechSynthesisWordTimingMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSpeechSynthesisWordTimingMutation setTimeInterval:]
  -[_SVXSpeechSynthesisWordTimingMutation .cxx_destruct]
  -[_SVXSpeechSynthesisWordTimingMutation setRange:]
  -[_SVXSpeechSynthesisWordTimingMutation generate]
  -[_SVXSpeechSynthesisWordTimingMutation init]
  -[_SVXSpeechSynthesisWordTimingMutation initWithBaseModel:]


SVXDeviceSetupFlowScene : NSObject <NSCopying, NSSecureCoding>
 @property  long long sceneID
 @property  NSString *speakableText
 @property  NSArray *displayKeyFrames
 @property  SVXDeviceSetupFlowSiriCapabilitiesHint *siriCapabilitiesHint

  // class methods
  +[SVXDeviceSetupFlowScene supportsSecureCoding]
  +[SVXDeviceSetupFlowScene newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupFlowScene _descriptionWithIndent:]
  -[SVXDeviceSetupFlowScene encodeWithCoder:]
  -[SVXDeviceSetupFlowScene mutatedCopyWithMutator:]
  -[SVXDeviceSetupFlowScene .cxx_destruct]
  -[SVXDeviceSetupFlowScene sceneID]
  -[SVXDeviceSetupFlowScene copyWithZone:]
  -[SVXDeviceSetupFlowScene isEqual:]
  -[SVXDeviceSetupFlowScene initWithCoder:]
  -[SVXDeviceSetupFlowScene speakableText]
  -[SVXDeviceSetupFlowScene displayKeyFrames]
  -[SVXDeviceSetupFlowScene initWithSceneID:speakableText:displayKeyFrames:siriCapabilitiesHint:]
  -[SVXDeviceSetupFlowScene siriCapabilitiesHint]


_SVXDeviceSetupFlowSceneMutation : NSObject <SVXDeviceSetupFlowSceneMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupFlowSceneMutation setSceneID:]
  -[_SVXDeviceSetupFlowSceneMutation .cxx_destruct]
  -[_SVXDeviceSetupFlowSceneMutation generate]
  -[_SVXDeviceSetupFlowSceneMutation init]
  -[_SVXDeviceSetupFlowSceneMutation setSpeakableText:]
  -[_SVXDeviceSetupFlowSceneMutation initWithBaseModel:]
  -[_SVXDeviceSetupFlowSceneMutation setDisplayKeyFrames:]
  -[_SVXDeviceSetupFlowSceneMutation setSiriCapabilitiesHint:]


_SVXServiceCommandHandlerSmsPlayAudio : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SVXServiceCommandHandlerSmsPlayAudio supportedCommandClass]

  // instance methods
  -[_SVXServiceCommandHandlerSmsPlayAudio identifier]
  -[_SVXServiceCommandHandlerSmsPlayAudio .cxx_destruct]
  -[_SVXServiceCommandHandlerSmsPlayAudio isCommandUUFR:]
  -[_SVXServiceCommandHandlerSmsPlayAudio handleCommand:withContext:taskTracker:completion:]
  -[_SVXServiceCommandHandlerSmsPlayAudio initWithSessionManager:module:]


SVXSystemEvent : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  unsigned long timestamp
 @property  SVXDeviceSetupFlowScene *deviceSetupFlowScene
 @property  SVXStoreDemo *storeDemo
 @property  NSArray *orderedAlarmAndTimerIDs
 @property  SVXSpeechSynthesisRequest *speechSynthesisRequest
 @property  unsigned int audioSessionID

  // class methods
  +[SVXSystemEvent supportsSecureCoding]
  +[SVXSystemEvent newWithBuilder:]

  // instance methods
  -[SVXSystemEvent audioSessionID]
  -[SVXSystemEvent _descriptionWithIndent:]
  -[SVXSystemEvent encodeWithCoder:]
  -[SVXSystemEvent type]
  -[SVXSystemEvent mutatedCopyWithMutator:]
  -[SVXSystemEvent .cxx_destruct]
  -[SVXSystemEvent copyWithZone:]
  -[SVXSystemEvent timestamp]
  -[SVXSystemEvent isEqual:]
  -[SVXSystemEvent initWithCoder:]
  -[SVXSystemEvent initWithType:timestamp:]
  -[SVXSystemEvent initWithType:timestamp:alarm:deviceSetupFlowScene:]
  -[SVXSystemEvent speechSynthesisRequest]
  -[SVXSystemEvent initWithType:timestamp:deviceSetupFlowScene:storeDemo:orderedAlarmAndTimerIDs:speechSynthesisRequest:audioSessionID:]
  -[SVXSystemEvent deviceSetupFlowScene]
  -[SVXSystemEvent storeDemo]
  -[SVXSystemEvent orderedAlarmAndTimerIDs]
  -[SVXSystemEvent initWithType:timestamp:alarm:]
  -[SVXSystemEvent initWithType:timestamp:deviceSetupFlowScene:]
  -[SVXSystemEvent initWithType:timestamp:storeDemo:]
  -[SVXSystemEvent initWithType:timestamp:timer:]
  -[SVXSystemEvent initWithType:timestamp:deviceSetupFlowScene:storeDemo:orderedAlarmAndTimerIDs:]
  -[SVXSystemEvent initWithType:timestamp:deviceSetupFlowScene:storeDemo:orderedAlarmAndTimerIDs:audioSessionID:]


_SVXSystemEventMutation : NSObject <SVXSystemEventMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSystemEventMutation setTimestamp:]
  -[_SVXSystemEventMutation setAudioSessionID:]
  -[_SVXSystemEventMutation .cxx_destruct]
  -[_SVXSystemEventMutation setType:]
  -[_SVXSystemEventMutation generate]
  -[_SVXSystemEventMutation init]
  -[_SVXSystemEventMutation setSpeechSynthesisRequest:]
  -[_SVXSystemEventMutation initWithBaseModel:]
  -[_SVXSystemEventMutation setDeviceSetupFlowScene:]
  -[_SVXSystemEventMutation setStoreDemo:]
  -[_SVXSystemEventMutation setOrderedAlarmAndTimerIDs:]


SVXDeviceSetupContext : NSObject <NSCopying, NSSecureCoding>
 @property  unsigned long timestamp
 @property  SVXDeviceSetupOptions *options
 @property  SVXDeviceSetupFlowScene *flowScene
 @property  NSDate *beginDate
 @property  NSDate *endDate

  // class methods
  +[SVXDeviceSetupContext supportsSecureCoding]
  +[SVXDeviceSetupContext newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupContext beginDate]
  -[SVXDeviceSetupContext endDate]
  -[SVXDeviceSetupContext _descriptionWithIndent:]
  -[SVXDeviceSetupContext encodeWithCoder:]
  -[SVXDeviceSetupContext mutatedCopyWithMutator:]
  -[SVXDeviceSetupContext .cxx_destruct]
  -[SVXDeviceSetupContext options]
  -[SVXDeviceSetupContext copyWithZone:]
  -[SVXDeviceSetupContext initWithTimestamp:]
  -[SVXDeviceSetupContext timestamp]
  -[SVXDeviceSetupContext isEqual:]
  -[SVXDeviceSetupContext initWithCoder:]
  -[SVXDeviceSetupContext initWithTimestamp:presentsAlternativeFlowWhenStoreAccountIsUnavailable:]
  -[SVXDeviceSetupContext initWithTimestamp:options:]
  -[SVXDeviceSetupContext initWithTimestamp:options:flowScene:]
  -[SVXDeviceSetupContext initWithTimestamp:options:flowScene:beginDate:endDate:]
  -[SVXDeviceSetupContext flowScene]


_SVXDeviceSetupContextMutation : NSObject <SVXDeviceSetupContextMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupContextMutation setTimestamp:]
  -[_SVXDeviceSetupContextMutation .cxx_destruct]
  -[_SVXDeviceSetupContextMutation setEndDate:]
  -[_SVXDeviceSetupContextMutation setBeginDate:]
  -[_SVXDeviceSetupContextMutation setOptions:]
  -[_SVXDeviceSetupContextMutation generate]
  -[_SVXDeviceSetupContextMutation init]
  -[_SVXDeviceSetupContextMutation initWithBaseModel:]
  -[_SVXDeviceSetupContextMutation setFlowScene:]


SVXUserFeedback : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  long long contentType
 @property  SVXUserFeedbackAudioContent *audioContent
 @property  SVXUserFeedbackVoiceContent *voiceContent

  // class methods
  +[SVXUserFeedback supportsSecureCoding]
  +[SVXUserFeedback newWithBuilder:]

  // instance methods
  -[SVXUserFeedback contentType]
  -[SVXUserFeedback identifier]
  -[SVXUserFeedback _descriptionWithIndent:]
  -[SVXUserFeedback encodeWithCoder:]
  -[SVXUserFeedback mutatedCopyWithMutator:]
  -[SVXUserFeedback .cxx_destruct]
  -[SVXUserFeedback copyWithZone:]
  -[SVXUserFeedback isEqual:]
  -[SVXUserFeedback initWithCoder:]
  -[SVXUserFeedback initWithIdentifier:contentType:audioContent:voiceContent:]
  -[SVXUserFeedback audioContent]
  -[SVXUserFeedback voiceContent]


_SVXUserFeedbackMutation : NSObject <SVXUserFeedbackMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXUserFeedbackMutation .cxx_destruct]
  -[_SVXUserFeedbackMutation setIdentifier:]
  -[_SVXUserFeedbackMutation setContentType:]
  -[_SVXUserFeedbackMutation generate]
  -[_SVXUserFeedbackMutation init]
  -[_SVXUserFeedbackMutation initWithBaseModel:]
  -[_SVXUserFeedbackMutation setAudioContent:]
  -[_SVXUserFeedbackMutation setVoiceContent:]


_SVXExpressionParser : NSObject
 @property  <SVXExpressionParsingServing> *parsingService
 @property  AFPreferences *preferences

  // instance methods
  -[_SVXExpressionParser .cxx_destruct]
  -[_SVXExpressionParser preferences]
  -[_SVXExpressionParser initWithParsingService:preferences:]
  -[_SVXExpressionParser parsingService]


_SVXServiceCommandHandlerPlayVoiceMail : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SVXServiceCommandHandlerPlayVoiceMail supportedCommandClass]

  // instance methods
  -[_SVXServiceCommandHandlerPlayVoiceMail identifier]
  -[_SVXServiceCommandHandlerPlayVoiceMail .cxx_destruct]
  -[_SVXServiceCommandHandlerPlayVoiceMail isCommandUUFR:]
  -[_SVXServiceCommandHandlerPlayVoiceMail handleCommand:withContext:taskTracker:completion:]
  -[_SVXServiceCommandHandlerPlayVoiceMail initWithSessionManager:module:]
  -[_SVXServiceCommandHandlerPlayVoiceMail _audioPlaybackDuration:]
  -[_SVXServiceCommandHandlerPlayVoiceMail _markVoiceMailAsRead:forRemoteDevice:]


SVXDeviceSetupAnnouncer : SVXAnnouncer <SVXDeviceSetupListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXDeviceSetupAnnouncer protocol]


SVXDeactivationContext : NSObject <NSCopying, NSSecureCoding>
 @property  long long source
 @property  unsigned long timestamp
 @property  SVXButtonEvent *buttonEvent
 @property  SVXClientInfo *clientInfo
 @property  NSDictionary *userInfo
 @property  SVXDeactivationOptions *options

  // class methods
  +[SVXDeactivationContext supportsSecureCoding]
  +[SVXDeactivationContext newWithBuilder:]

  // instance methods
  -[SVXDeactivationContext source]
  -[SVXDeactivationContext _descriptionWithIndent:]
  -[SVXDeactivationContext userInfo]
  -[SVXDeactivationContext encodeWithCoder:]
  -[SVXDeactivationContext clientInfo]
  -[SVXDeactivationContext mutatedCopyWithMutator:]
  -[SVXDeactivationContext .cxx_destruct]
  -[SVXDeactivationContext options]
  -[SVXDeactivationContext buttonEvent]
  -[SVXDeactivationContext copyWithZone:]
  -[SVXDeactivationContext timestamp]
  -[SVXDeactivationContext isEqual:]
  -[SVXDeactivationContext initWithCoder:]
  -[SVXDeactivationContext initWithSource:timestamp:buttonEvent:clientInfo:userInfo:options:]


_SVXDeactivationContextMutation : NSObject <SVXDeactivationContextMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeactivationContextMutation setSource:]
  -[_SVXDeactivationContextMutation setTimestamp:]
  -[_SVXDeactivationContextMutation setClientInfo:]
  -[_SVXDeactivationContextMutation setUserInfo:]
  -[_SVXDeactivationContextMutation .cxx_destruct]
  -[_SVXDeactivationContextMutation setOptions:]
  -[_SVXDeactivationContextMutation setButtonEvent:]
  -[_SVXDeactivationContextMutation generate]
  -[_SVXDeactivationContextMutation init]
  -[_SVXDeactivationContextMutation initWithBaseModel:]


SVXClientSpeechSynthesisService : NSObject <SVXClientServiceConsuming, SVXClientSpeechSynthesisServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientSpeechSynthesisService .cxx_destruct]
  -[SVXClientSpeechSynthesisService synthesizeRequest:completion:]
  -[SVXClientSpeechSynthesisService prewarmRequest:]
  -[SVXClientSpeechSynthesisService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientSpeechSynthesisService clientServiceDidChange:]
  -[SVXClientSpeechSynthesisService synthesizeRequest:audioChunkHandler:completion:]
  -[SVXClientSpeechSynthesisService enqueueRequest:completion:]
  -[SVXClientSpeechSynthesisService cancelPendingRequest:]
  -[SVXClientSpeechSynthesisService stopRequest:]
  -[SVXClientSpeechSynthesisService handleSynthesizedBufferForHandlerUUID:audioChunkData:audioChunkIndex:reply:]
  -[SVXClientSpeechSynthesisService _addAudioChunkHandler:forUUID:]
  -[SVXClientSpeechSynthesisService _removeAudioChunkHandlerForUUID:]
  -[SVXClientSpeechSynthesisService _handleSynthesizedBufferForHandlerUUID:audioChunkData:audioChunkIndex:]


_SVXAddViewsExpressionParser : _SVXExpressionParser
 @property  BOOL ignoresLocallyParseableExpressions

  // instance methods
  -[_SVXAddViewsExpressionParser initWithParsingService:preferences:]
  -[_SVXAddViewsExpressionParser parseAddViews:reply:]
  -[_SVXAddViewsExpressionParser ignoresLocallyParseableExpressions]
  -[_SVXAddViewsExpressionParser setIgnoresLocallyParseableExpressions:]


SVXServiceCommandHandlerClientCoordinationPhoneCall : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerClientCoordinationPhoneCall supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerClientCoordinationPhoneCall identifier]
  -[SVXServiceCommandHandlerClientCoordinationPhoneCall initWithSessionManager:]
  -[SVXServiceCommandHandlerClientCoordinationPhoneCall .cxx_destruct]
  -[SVXServiceCommandHandlerClientCoordinationPhoneCall isCommandUUFR:]
  -[SVXServiceCommandHandlerClientCoordinationPhoneCall handleCommand:withContext:taskTracker:completion:]


SVXServiceCommandHandlerRegistry : NSObject
  // instance methods
  -[SVXServiceCommandHandlerRegistry .cxx_destruct]
  -[SVXServiceCommandHandlerRegistry initWithHandlers:]
  -[SVXServiceCommandHandlerRegistry handlersForCommand:]


SVXAudioPowerUpdateAnnouncer : SVXAnnouncer <SVXAudioPowerUpdateListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXAudioPowerUpdateAnnouncer protocol]


SVXClientServiceServer : NSObject <SVXModuleInstance>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientServiceServer _removeConnection:]
  -[SVXClientServiceServer _addConnection:]
  -[SVXClientServiceServer addConnection:]
  -[SVXClientServiceServer dealloc]
  -[SVXClientServiceServer .cxx_destruct]
  -[SVXClientServiceServer removeConnection:]
  -[SVXClientServiceServer initWithModule:]
  -[SVXClientServiceServer startWithModuleInstanceProvider:platformDependencies:]
  -[SVXClientServiceServer stopWithModuleInstanceProvider:]
  -[SVXClientServiceServer _removeAllConnections]


_AddDialogsContextPair : NSObject
 @property  <SAAceCommand> *command
 @property  <NSCopying> *context

  // instance methods
  -[_AddDialogsContextPair command]
  -[_AddDialogsContextPair .cxx_destruct]
  -[_AddDialogsContextPair context]
  -[_AddDialogsContextPair initWithCommand:context:]


SVXServiceCommandHandlerUIAddDialogs : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUIAddDialogs supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIAddDialogs identifier]
  -[SVXServiceCommandHandlerUIAddDialogs .cxx_destruct]
  -[SVXServiceCommandHandlerUIAddDialogs isCommandUUFR:]
  -[SVXServiceCommandHandlerUIAddDialogs handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIAddDialogs shouldDependOnCommand:]
  -[SVXServiceCommandHandlerUIAddDialogs prepareToHandleCommand:completion:]
  -[SVXServiceCommandHandlerUIAddDialogs initWithHandlers:modeProvider:]


SVXClientDeviceService : NSObject <SVXClientServiceConsuming, SVXClientDeviceServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientDeviceService .cxx_destruct]
  -[SVXClientDeviceService prepareForSetupWithContext:completion:]
  -[SVXClientDeviceService endSetup]
  -[SVXClientDeviceService beginSetupWithContext:]
  -[SVXClientDeviceService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientDeviceService clientServiceDidChange:]
  -[SVXClientDeviceService _prepareForSetupWithContext:completion:]
  -[SVXClientDeviceService _beginSetupWithContext:]
  -[SVXClientDeviceService _endSetup]
  -[SVXClientDeviceService _updateSetupContext]


SVXDeviceContextAnnouncer : SVXAnnouncer <SVXDeviceContextListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXDeviceContextAnnouncer protocol]


SVXUnderstandingOnDeviceAssetsStateObserver : NSObject
 @property  AFSettingsConnection *settingsConnection
 @property  NSObject<OS_dispatch_queue> *uodAssetsqueue
 @property  BOOL understandingOnDeviceAssetsAvailable

  // instance methods
  -[SVXUnderstandingOnDeviceAssetsStateObserver _updateState]
  -[SVXUnderstandingOnDeviceAssetsStateObserver dealloc]
  -[SVXUnderstandingOnDeviceAssetsStateObserver .cxx_destruct]
  -[SVXUnderstandingOnDeviceAssetsStateObserver settingsConnection]
  -[SVXUnderstandingOnDeviceAssetsStateObserver setUodAssetsqueue:]
  -[SVXUnderstandingOnDeviceAssetsStateObserver understandingOnDeviceAssetsAvailable]
  -[SVXUnderstandingOnDeviceAssetsStateObserver setSettingsConnection:]
  -[SVXUnderstandingOnDeviceAssetsStateObserver _setUODAssetsAvailable:]
  -[SVXUnderstandingOnDeviceAssetsStateObserver uodAssetsqueue]
  -[SVXUnderstandingOnDeviceAssetsStateObserver init]
  -[SVXUnderstandingOnDeviceAssetsStateObserver setUnderstandingOnDeviceAssetsAvailable:]


SVXPlatformDependency : NSObject
 @property  long long type
 @property  <SVXServiceCommandHandling> *serviceCommandHandler
 @property  <SVXSessionActivityListening> *activityListener
 @property  <SVXAudioPowerUpdateListening> *audioPowerUpdateListener
 @property  <SVXSiriModesManaging> *siriModesManager
 @property  <SVXAudioStreamingListening> *audioStreamingListener
 @property  <SVXSpeechSynthesisListening> *speechSynthesisListener
 @property  <SVXClientAudioSystemServicing> *clientAudioSystemService

  // instance methods
  -[SVXPlatformDependency type]
  -[SVXPlatformDependency .cxx_destruct]
  -[SVXPlatformDependency serviceCommandHandler]
  -[SVXPlatformDependency initWithServiceCommandHandler:]
  -[SVXPlatformDependency initWithSessionActivityListener:]
  -[SVXPlatformDependency initWithAudioPowerUpdateListener:]
  -[SVXPlatformDependency initWithSiriModesManager:]
  -[SVXPlatformDependency initWithAudioStreamingListener:]
  -[SVXPlatformDependency initWithSpeechSynthesisListener:]
  -[SVXPlatformDependency initWithClientAudioSystemService:]
  -[SVXPlatformDependency activityListener]
  -[SVXPlatformDependency audioPowerUpdateListener]
  -[SVXPlatformDependency siriModesManager]
  -[SVXPlatformDependency audioStreamingListener]
  -[SVXPlatformDependency speechSynthesisListener]
  -[SVXPlatformDependency clientAudioSystemService]


SVXClientActivationService : NSObject <SVXClientActivationServicing, SVXClientServiceConsuming>
 @property  <SVXClientActivationServiceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientActivationService setDelegate:]
  -[SVXClientActivationService delegate]
  -[SVXClientActivationService .cxx_destruct]
  -[SVXClientActivationService handleButtonEvent:]
  -[SVXClientActivationService activateWithSystemEvent:userInfo:completion:]
  -[SVXClientActivationService prewarmForSystemEvent:completion:]
  -[SVXClientActivationService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientActivationService clientServiceDidChange:]
  -[SVXClientActivationService enqueueButtonEvent:]
  -[SVXClientActivationService activateWithUserInfo:completion:]
  -[SVXClientActivationService activateWithText:completion:]
  -[SVXClientActivationService activateWithButtonEvent:userInfo:completion:]
  -[SVXClientActivationService deactivateWithUserInfo:completion:]
  -[SVXClientActivationService deactivateWithUserInfo:options:completion:]
  -[SVXClientActivationService deactivateWithButtonEvent:userInfo:options:completion:]
  -[SVXClientActivationService handleRequestPermissionToActivateWithContext:completion:]
  -[SVXClientActivationService handleWillActivateWithContext:]
  -[SVXClientActivationService handleDidActivateWithContext:]
  -[SVXClientActivationService handleDidNotActivateWithContext:error:]
  -[SVXClientActivationService handleWillDeactivateWithContext:]
  -[SVXClientActivationService handleDidDeactivateWithContext:]
  -[SVXClientActivationService _enqueueButtonEvent:]
  -[SVXClientActivationService _processLastButtonActivationContext]
  -[SVXClientActivationService _requestPermissionToActivateWithContext:]
  -[SVXClientActivationService _prewarmWithContext:completion:]
  -[SVXClientActivationService _activateWithContext:completion:]
  -[SVXClientActivationService _deactivateWithContext:completion:]
  -[SVXClientActivationService _performManualEndpointing]
  -[SVXClientActivationService _transitToAutomaticEndpointing]
  -[SVXClientActivationService _preheatWithActivationSource:]
  -[SVXClientActivationService _startPreheatTimer]
  -[SVXClientActivationService _stopPreheatTimer]
  -[SVXClientActivationService _preheatTimerArrivedWithToken:]


SVXClientKeepAliveService : NSObject <SVXClientServiceConsuming, SVXClientKeepAliveServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientKeepAliveService connectWithCompletion:]
  -[SVXClientKeepAliveService .cxx_destruct]
  -[SVXClientKeepAliveService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientKeepAliveService clientServiceDidChange:]
  -[SVXClientKeepAliveService _connectWithRetryCount:completion:]


SVXUserFeedbackNode : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  double duration
 @property  SVXUserFeedback *feedback
 @property  NSSet *dependentNodes

  // class methods
  +[SVXUserFeedbackNode supportsSecureCoding]
  +[SVXUserFeedbackNode newWithBuilder:]

  // instance methods
  -[SVXUserFeedbackNode identifier]
  -[SVXUserFeedbackNode _descriptionWithIndent:]
  -[SVXUserFeedbackNode feedback]
  -[SVXUserFeedbackNode encodeWithCoder:]
  -[SVXUserFeedbackNode mutatedCopyWithMutator:]
  -[SVXUserFeedbackNode .cxx_destruct]
  -[SVXUserFeedbackNode duration]
  -[SVXUserFeedbackNode copyWithZone:]
  -[SVXUserFeedbackNode isEqual:]
  -[SVXUserFeedbackNode initWithCoder:]
  -[SVXUserFeedbackNode initWithIdentifier:duration:feedback:dependentNodes:]
  -[SVXUserFeedbackNode dependentNodes]


_SVXUserFeedbackNodeMutation : NSObject <SVXUserFeedbackNodeMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXUserFeedbackNodeMutation setDuration:]
  -[_SVXUserFeedbackNodeMutation .cxx_destruct]
  -[_SVXUserFeedbackNodeMutation setIdentifier:]
  -[_SVXUserFeedbackNodeMutation generate]
  -[_SVXUserFeedbackNodeMutation init]
  -[_SVXUserFeedbackNodeMutation setFeedback:]
  -[_SVXUserFeedbackNodeMutation initWithBaseModel:]
  -[_SVXUserFeedbackNodeMutation setDependentNodes:]


SVXButtonEvent : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  unsigned long timestamp

  // class methods
  +[SVXButtonEvent supportsSecureCoding]
  +[SVXButtonEvent newWithBuilder:]

  // instance methods
  -[SVXButtonEvent _descriptionWithIndent:]
  -[SVXButtonEvent encodeWithCoder:]
  -[SVXButtonEvent type]
  -[SVXButtonEvent mutatedCopyWithMutator:]
  -[SVXButtonEvent copyWithZone:]
  -[SVXButtonEvent timestamp]
  -[SVXButtonEvent isEqual:]
  -[SVXButtonEvent initWithCoder:]
  -[SVXButtonEvent initWithType:timestamp:]


_SVXButtonEventMutation : NSObject <SVXButtonEventMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXButtonEventMutation setTimestamp:]
  -[_SVXButtonEventMutation .cxx_destruct]
  -[_SVXButtonEventMutation setType:]
  -[_SVXButtonEventMutation generate]
  -[_SVXButtonEventMutation init]
  -[_SVXButtonEventMutation initWithBaseModel:]


SVXDeviceSetupFlowSceneBuilder : NSObject
 @property  long long sceneID

  // instance methods
  -[SVXDeviceSetupFlowSceneBuilder setSceneID:]
  -[SVXDeviceSetupFlowSceneBuilder build]
  -[SVXDeviceSetupFlowSceneBuilder sceneID]


SVXQueuePerformer : NSObject <SVXPerforming>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXQueuePerformer sharedMainQueuePerformer]

  // instance methods
  -[SVXQueuePerformer performBlock:]
  -[SVXQueuePerformer performBlock:afterDelay:]
  -[SVXQueuePerformer .cxx_destruct]
  -[SVXQueuePerformer queue]
  -[SVXQueuePerformer performBlock:withOptions:]
  -[SVXQueuePerformer performBlock:afterGroup:]
  -[SVXQueuePerformer initWithIdentifier:qosClass:relativePriority:options:]
  -[SVXQueuePerformer _initWithIdentifier:queue:options:]
  -[SVXQueuePerformer _performBlock:withOptions:]
  -[SVXQueuePerformer _isExecutingInContext]


_SVXMainQueuePerformer : SVXQueuePerformer
  // instance methods
  -[_SVXMainQueuePerformer _isExecutingInContext]


SVXDeviceSetupFlowSiriCapabilitiesHint : NSObject <NSCopying, NSSecureCoding>
 @property  long long style

  // class methods
  +[SVXDeviceSetupFlowSiriCapabilitiesHint supportsSecureCoding]
  +[SVXDeviceSetupFlowSiriCapabilitiesHint newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupFlowSiriCapabilitiesHint _descriptionWithIndent:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint encodeWithCoder:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint style]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint mutatedCopyWithMutator:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint copyWithZone:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint initWithStyle:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint isEqual:]
  -[SVXDeviceSetupFlowSiriCapabilitiesHint initWithCoder:]


_SVXDeviceSetupFlowSiriCapabilitiesHintMutation : NSObject <SVXDeviceSetupFlowSiriCapabilitiesHintMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupFlowSiriCapabilitiesHintMutation .cxx_destruct]
  -[_SVXDeviceSetupFlowSiriCapabilitiesHintMutation setStyle:]
  -[_SVXDeviceSetupFlowSiriCapabilitiesHintMutation generate]
  -[_SVXDeviceSetupFlowSiriCapabilitiesHintMutation init]
  -[_SVXDeviceSetupFlowSiriCapabilitiesHintMutation initWithBaseModel:]


SVXServiceCommandHandlerUIDelayedActionCancelCommand : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUIDelayedActionCancelCommand supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIDelayedActionCancelCommand identifier]
  -[SVXServiceCommandHandlerUIDelayedActionCancelCommand .cxx_destruct]
  -[SVXServiceCommandHandlerUIDelayedActionCancelCommand isCommandUUFR:]
  -[SVXServiceCommandHandlerUIDelayedActionCancelCommand handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIDelayedActionCancelCommand initWithDelayedActionStore:performer:]


SVXUserFeedbackAudioContent : NSObject <NSCopying, NSSecureCoding>
 @property  NSURL *itemURL
 @property  unsigned long numberOfLoops
 @property  double fadeInDuration
 @property  double fadeOutDuration

  // class methods
  +[SVXUserFeedbackAudioContent supportsSecureCoding]
  +[SVXUserFeedbackAudioContent newWithBuilder:]

  // instance methods
  -[SVXUserFeedbackAudioContent _descriptionWithIndent:]
  -[SVXUserFeedbackAudioContent encodeWithCoder:]
  -[SVXUserFeedbackAudioContent mutatedCopyWithMutator:]
  -[SVXUserFeedbackAudioContent .cxx_destruct]
  -[SVXUserFeedbackAudioContent fadeInDuration]
  -[SVXUserFeedbackAudioContent copyWithZone:]
  -[SVXUserFeedbackAudioContent fadeOutDuration]
  -[SVXUserFeedbackAudioContent itemURL]
  -[SVXUserFeedbackAudioContent isEqual:]
  -[SVXUserFeedbackAudioContent initWithCoder:]
  -[SVXUserFeedbackAudioContent numberOfLoops]
  -[SVXUserFeedbackAudioContent initWithItemURL:numberOfLoops:fadeInDuration:fadeOutDuration:]


_SVXUserFeedbackAudioContentMutation : NSObject <SVXUserFeedbackAudioContentMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXUserFeedbackAudioContentMutation setFadeOutDuration:]
  -[_SVXUserFeedbackAudioContentMutation setFadeInDuration:]
  -[_SVXUserFeedbackAudioContentMutation .cxx_destruct]
  -[_SVXUserFeedbackAudioContentMutation setItemURL:]
  -[_SVXUserFeedbackAudioContentMutation generate]
  -[_SVXUserFeedbackAudioContentMutation init]
  -[_SVXUserFeedbackAudioContentMutation initWithBaseModel:]
  -[_SVXUserFeedbackAudioContentMutation setNumberOfLoops:]


SVXAlarmAndTimerFiringContext : NSObject <NSCopying, NSSecureCoding>
 @property  NSOrderedSet *orderedFiringAlarms
 @property  NSOrderedSet *orderedFiringTimers
 @property  BOOL hasOtherRunningTimers

  // class methods
  +[SVXAlarmAndTimerFiringContext supportsSecureCoding]
  +[SVXAlarmAndTimerFiringContext newWithBuilder:]

  // instance methods
  -[SVXAlarmAndTimerFiringContext _descriptionWithIndent:]
  -[SVXAlarmAndTimerFiringContext encodeWithCoder:]
  -[SVXAlarmAndTimerFiringContext mutatedCopyWithMutator:]
  -[SVXAlarmAndTimerFiringContext .cxx_destruct]
  -[SVXAlarmAndTimerFiringContext copyWithZone:]
  -[SVXAlarmAndTimerFiringContext isEqual:]
  -[SVXAlarmAndTimerFiringContext initWithCoder:]
  -[SVXAlarmAndTimerFiringContext initWithOrderedFiringAlarms:orderedFiringTimers:hasOtherRunningTimers:]
  -[SVXAlarmAndTimerFiringContext orderedFiringAlarms]
  -[SVXAlarmAndTimerFiringContext orderedFiringTimers]
  -[SVXAlarmAndTimerFiringContext hasOtherRunningTimers]


_SVXAlarmAndTimerFiringContextMutation : NSObject <SVXAlarmAndTimerFiringContextMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXAlarmAndTimerFiringContextMutation .cxx_destruct]
  -[_SVXAlarmAndTimerFiringContextMutation generate]
  -[_SVXAlarmAndTimerFiringContextMutation init]
  -[_SVXAlarmAndTimerFiringContextMutation initWithBaseModel:]
  -[_SVXAlarmAndTimerFiringContextMutation setOrderedFiringAlarms:]
  -[_SVXAlarmAndTimerFiringContextMutation setOrderedFiringTimers:]
  -[_SVXAlarmAndTimerFiringContextMutation setHasOtherRunningTimers:]


_SVXPlayVoicemailExpressionParser : _SVXExpressionParser
  // instance methods
  -[_SVXPlayVoicemailExpressionParser parsePlayVoicemail:reply:]


SVXSpeechSynthesisRequest : NSObject <NSCopying, NSSecureCoding>
 @property  long long priority
 @property  unsigned long options
 @property  NSString *speakableText
 @property  NSDictionary *speakableContext
 @property  NSString *localizationKey
 @property  SVXSpeechSynthesisAudio *presynthesizedAudio
 @property  NSString *streamID

  // class methods
  +[SVXSpeechSynthesisRequest supportsSecureCoding]
  +[SVXSpeechSynthesisRequest newWithBuilder:]

  // instance methods
  -[SVXSpeechSynthesisRequest localizationKey]
  -[SVXSpeechSynthesisRequest _descriptionWithIndent:]
  -[SVXSpeechSynthesisRequest encodeWithCoder:]
  -[SVXSpeechSynthesisRequest streamID]
  -[SVXSpeechSynthesisRequest mutatedCopyWithMutator:]
  -[SVXSpeechSynthesisRequest .cxx_destruct]
  -[SVXSpeechSynthesisRequest options]
  -[SVXSpeechSynthesisRequest copyWithZone:]
  -[SVXSpeechSynthesisRequest priority]
  -[SVXSpeechSynthesisRequest isEqual:]
  -[SVXSpeechSynthesisRequest initWithCoder:]
  -[SVXSpeechSynthesisRequest initWithPriority:options:speakableText:speakableContext:localizationKey:presynthesizedAudio:streamID:]
  -[SVXSpeechSynthesisRequest speakableText]
  -[SVXSpeechSynthesisRequest speakableContext]
  -[SVXSpeechSynthesisRequest presynthesizedAudio]


_SVXSpeechSynthesisRequestMutation : NSObject <SVXSpeechSynthesisRequestMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSpeechSynthesisRequestMutation setLocalizationKey:]
  -[_SVXSpeechSynthesisRequestMutation setPriority:]
  -[_SVXSpeechSynthesisRequestMutation .cxx_destruct]
  -[_SVXSpeechSynthesisRequestMutation setOptions:]
  -[_SVXSpeechSynthesisRequestMutation generate]
  -[_SVXSpeechSynthesisRequestMutation init]
  -[_SVXSpeechSynthesisRequestMutation setSpeakableText:]
  -[_SVXSpeechSynthesisRequestMutation setStreamID:]
  -[_SVXSpeechSynthesisRequestMutation initWithBaseModel:]
  -[_SVXSpeechSynthesisRequestMutation setSpeakableContext:]
  -[_SVXSpeechSynthesisRequestMutation setPresynthesizedAudio:]


SVXServiceCommandHandlerUIDelayedActionCommand : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUIDelayedActionCommand supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIDelayedActionCommand identifier]
  -[SVXServiceCommandHandlerUIDelayedActionCommand .cxx_destruct]
  -[SVXServiceCommandHandlerUIDelayedActionCommand isCommandUUFR:]
  -[SVXServiceCommandHandlerUIDelayedActionCommand handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIDelayedActionCommand initWithDelayedActionStore:sessionManager:performer:]
  -[SVXServiceCommandHandlerUIDelayedActionCommand _performDelayedAction:]


SVXServiceCommandHandlerUIAddViews : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUIAddViews supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIAddViews identifier]
  -[SVXServiceCommandHandlerUIAddViews .cxx_destruct]
  -[SVXServiceCommandHandlerUIAddViews isCommandUUFR:]
  -[SVXServiceCommandHandlerUIAddViews handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIAddViews shouldDependOnCommand:]
  -[SVXServiceCommandHandlerUIAddViews prepareToHandleCommand:completion:]
  -[SVXServiceCommandHandlerUIAddViews initWithSpeechSynthesizer:module:modeProvider:]
  -[SVXServiceCommandHandlerUIAddViews handleAceView:isExpository:taskTracker:completion:]


SVXClientAudioPowerService : NSObject <AFAudioPowerUpdaterDelegate, SVXClientServiceConsuming, SVXClientAudioPowerServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SVXClientAudioPowerServiceDelegate> *delegate
 @property  float averagePower
 @property  float peakPower

  // instance methods
  -[SVXClientAudioPowerService averagePower]
  -[SVXClientAudioPowerService _endUpdate]
  -[SVXClientAudioPowerService peakPower]
  -[SVXClientAudioPowerService setDelegate:]
  -[SVXClientAudioPowerService delegate]
  -[SVXClientAudioPowerService .cxx_destruct]
  -[SVXClientAudioPowerService endUpdate]
  -[SVXClientAudioPowerService _provider]
  -[SVXClientAudioPowerService audioPowerUpdaterDidUpdate:averagePower:peakPower:]
  -[SVXClientAudioPowerService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientAudioPowerService clientServiceDidChange:]
  -[SVXClientAudioPowerService beginUpdateWithFrequency:]
  -[SVXClientAudioPowerService initWithType:clientServiceProvider:analytics:performer:]
  -[SVXClientAudioPowerService handleWillBeginUpdateAudioPowerWithProvider:]
  -[SVXClientAudioPowerService handleDidEndUpdateAudioPower]
  -[SVXClientAudioPowerService _beginUpdateWithFrequency:]
  -[SVXClientAudioPowerService _handleWillBeginUpdateAudioPowerWithProvider:]
  -[SVXClientAudioPowerService _handleDidEndUpdateAudioPower]
  -[SVXClientAudioPowerService _createUpdater]
  -[SVXClientAudioPowerService _destroyUpdater]
  -[SVXClientAudioPowerService _setProvider:]


SVXDeviceSetupFlow : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  NSString *languageCode
 @property  long long gender
 @property  NSArray *scenes

  // class methods
  +[SVXDeviceSetupFlow supportsSecureCoding]
  +[SVXDeviceSetupFlow newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupFlow identifier]
  -[SVXDeviceSetupFlow _descriptionWithIndent:]
  -[SVXDeviceSetupFlow encodeWithCoder:]
  -[SVXDeviceSetupFlow gender]
  -[SVXDeviceSetupFlow mutatedCopyWithMutator:]
  -[SVXDeviceSetupFlow .cxx_destruct]
  -[SVXDeviceSetupFlow scenes]
  -[SVXDeviceSetupFlow languageCode]
  -[SVXDeviceSetupFlow copyWithZone:]
  -[SVXDeviceSetupFlow isEqual:]
  -[SVXDeviceSetupFlow initWithCoder:]
  -[SVXDeviceSetupFlow initWithIdentifier:languageCode:gender:scenes:]


_SVXDeviceSetupFlowMutation : NSObject <SVXDeviceSetupFlowMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupFlowMutation setLanguageCode:]
  -[_SVXDeviceSetupFlowMutation .cxx_destruct]
  -[_SVXDeviceSetupFlowMutation setScenes:]
  -[_SVXDeviceSetupFlowMutation setIdentifier:]
  -[_SVXDeviceSetupFlowMutation setGender:]
  -[_SVXDeviceSetupFlowMutation generate]
  -[_SVXDeviceSetupFlowMutation init]
  -[_SVXDeviceSetupFlowMutation initWithBaseModel:]


SVXSpeechSynthesisResult : NSObject <NSCopying, NSSecureCoding>
 @property  long long type
 @property  SVXSpeechSynthesisUtteranceInfo *utteranceInfo
 @property  NSError *error

  // class methods
  +[SVXSpeechSynthesisResult supportsSecureCoding]
  +[SVXSpeechSynthesisResult newWithBuilder:]

  // instance methods
  -[SVXSpeechSynthesisResult _descriptionWithIndent:]
  -[SVXSpeechSynthesisResult encodeWithCoder:]
  -[SVXSpeechSynthesisResult type]
  -[SVXSpeechSynthesisResult error]
  -[SVXSpeechSynthesisResult mutatedCopyWithMutator:]
  -[SVXSpeechSynthesisResult .cxx_destruct]
  -[SVXSpeechSynthesisResult copyWithZone:]
  -[SVXSpeechSynthesisResult isEqual:]
  -[SVXSpeechSynthesisResult initWithCoder:]
  -[SVXSpeechSynthesisResult initWithType:utteranceInfo:error:]
  -[SVXSpeechSynthesisResult utteranceInfo]


_SVXSpeechSynthesisResultMutation : NSObject <SVXSpeechSynthesisResultMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSpeechSynthesisResultMutation .cxx_destruct]
  -[_SVXSpeechSynthesisResultMutation setError:]
  -[_SVXSpeechSynthesisResultMutation setType:]
  -[_SVXSpeechSynthesisResultMutation generate]
  -[_SVXSpeechSynthesisResultMutation init]
  -[_SVXSpeechSynthesisResultMutation initWithBaseModel:]
  -[_SVXSpeechSynthesisResultMutation setUtteranceInfo:]


SVXSessionManager : NSObject <SVXMyriadResponseDelegate, SVXModuleInstance, AFNotifyObserverDelegate, AFQueueDelegate, SVXSessionDelegate, SVXSpeechSynthesisListening, SVXDeviceContextListening, SVXDeviceSetupListening, SVXPrewarmHandling, SVXActivationHandling, SVXDeactivationHandling, SVXMyriadEventHandling, SVXMyriadRequestHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXSessionManager stopSpeech]
  -[SVXSessionManager _attachToTether]
  -[SVXSessionManager sessionDidInvalidate:]
  -[SVXSessionManager .cxx_destruct]
  -[SVXSessionManager notifyObserver:didChangeStateFrom:to:]
  -[SVXSessionManager initWithModule:]
  -[SVXSessionManager activateWithContext:completion:]
  -[SVXSessionManager queue:didEnqueueObjects:]
  -[SVXSessionManager deviceWonMyriadElection]
  -[SVXSessionManager speechSynthesizerDidBecomeBusy]
  -[SVXSessionManager speechSynthesizerDidBecomeIdle]
  -[SVXSessionManager speechSynthesizerWillEnqueueRequest:taskTracker:]
  -[SVXSessionManager speechSynthesizerWillStartRequest:taskTracker:]
  -[SVXSessionManager speechSynthesizerDidStartRequest:record:taskTracker:]
  -[SVXSessionManager speechSynthesizerDidFinishRequest:utteranceInfo:record:taskTracker:]
  -[SVXSessionManager speechSynthesizerDidCancelRequest:taskTracker:]
  -[SVXSessionManager speechSynthesizerDidInterruptRequest:taskTracker:]
  -[SVXSessionManager speechSynthesizerDidFailRequest:taskTracker:error:]
  -[SVXSessionManager preheatWithActivationSource:]
  -[SVXSessionManager prewarmWithContext:completion:]
  -[SVXSessionManager deactivateWithContext:completion:]
  -[SVXSessionManager startWithModuleInstanceProvider:platformDependencies:]
  -[SVXSessionManager stopWithModuleInstanceProvider:]
  -[SVXSessionManager deviceSetupManager:didUpdateContext:]
  -[SVXSessionManager initiateEmergency:]
  -[SVXSessionManager localDeviceContextDidUpdate:]
  -[SVXSessionManager _prewarmWithContext:completion:]
  -[SVXSessionManager _deactivateWithContext:completion:]
  -[SVXSessionManager _preheatWithActivationSource:]
  -[SVXSessionManager deviceLostMyriadElection]
  -[SVXSessionManager unduckDevice]
  -[SVXSessionManager session:willChangeFromState:toState:]
  -[SVXSessionManager session:didChangeFromState:toState:]
  -[SVXSessionManager session:willBeginUpdateAudioPowerWithType:wrapper:]
  -[SVXSessionManager session:didEndUpdateAudioPowerWithType:]
  -[SVXSessionManager session:willStartSoundWithID:]
  -[SVXSessionManager session:didStartSoundWithID:]
  -[SVXSessionManager session:didStopSoundWithID:error:]
  -[SVXSessionManager session:willBecomeActiveWithActivationContext:activityUUID:turnID:]
  -[SVXSessionManager session:didBecomeActiveWithActivationContext:activityUUID:turnID:]
  -[SVXSessionManager session:willResignActiveWithOptions:duration:activityUUID:]
  -[SVXSessionManager session:didResignActiveWithDeactivationContext:activityUUID:]
  -[SVXSessionManager session:willActivateWithContext:]
  -[SVXSessionManager session:didActivateWithContext:]
  -[SVXSessionManager session:didNotActivateWithContext:error:]
  -[SVXSessionManager session:willDeactivateWithContext:]
  -[SVXSessionManager session:didDeactivateWithContext:]
  -[SVXSessionManager session:audioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXSessionManager session:audioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXSessionManager session:willProcessAppLaunchWithBundleIdentifier:]
  -[SVXSessionManager session:didFailAppLaunchWithBundleIdentifier:]
  -[SVXSessionManager transitionToAutomaticEndpointing]
  -[SVXSessionManager continuousVoiceTriggerDetectedWithCompletion:]
  -[SVXSessionManager fetchCurrentStateWithCompletion:]
  -[SVXSessionManager fetchCurrentActivityStateWithCompletion:]
  -[SVXSessionManager fetchCurrentAudioPowerWithType:completion:]
  -[SVXSessionManager fetchCurrentAlarmAndTimerFiringContextWithCompletion:]
  -[SVXSessionManager getCurrentSessionUsingBlock:]
  -[SVXSessionManager getAudioSessionProviderWithCompletion:]
  -[SVXSessionManager addActivationListener:]
  -[SVXSessionManager removeActivationListener:]
  -[SVXSessionManager addAudioPowerUpdateListener:]
  -[SVXSessionManager removeAudioPowerUpdateListener:]
  -[SVXSessionManager addActivityListener:]
  -[SVXSessionManager removeActivityListener:]
  -[SVXSessionManager _myriadStereoPartnerDataChanged]
  -[SVXSessionManager attachToTether]
  -[SVXSessionManager _currentSession:]
  -[SVXSessionManager _invalidateCurrentSession]
  -[SVXSessionManager _processNextOperations]
  -[SVXSessionManager _activateWithContext:activityState:completion:]
  -[SVXSessionManager _fetchCurrentStateWithCompletion:]
  -[SVXSessionManager _fetchCurrentActivityStateWithCompletion:]
  -[SVXSessionManager _fetchCurrentAudioPowerWithType:completion:]
  -[SVXSessionManager _handleSession:willChangeFromState:toState:]
  -[SVXSessionManager _handleSession:didChangeFromState:toState:]
  -[SVXSessionManager _handleSession:willBeginUpdateAudioPowerWithType:wrapper:]
  -[SVXSessionManager _handleSession:didEndUpdateAudioPowerWithType:]
  -[SVXSessionManager _handleSession:willStartSoundWithID:]
  -[SVXSessionManager _handleSession:didStartSoundWithID:]
  -[SVXSessionManager _handleSession:didStopSoundWithID:error:]
  -[SVXSessionManager _handleSession:willBecomeActiveWithActivationContext:activityUUID:turnID:]
  -[SVXSessionManager _handleSession:didBecomeActiveWithActivationContext:activityUUID:turnID:]
  -[SVXSessionManager _handleSession:willResignActiveWithOptions:duration:activityUUID:]
  -[SVXSessionManager _handleSession:didResignActiveWithDeactivationContext:activityUUID:]
  -[SVXSessionManager _handleSession:willActivateWithContext:]
  -[SVXSessionManager _handleSession:didActivateWithContext:]
  -[SVXSessionManager _handleSession:didNotActivateWithContext:error:]
  -[SVXSessionManager _handleSession:willDeactivateWithContext:]
  -[SVXSessionManager _handleSession:didDeactivateWithContext:]
  -[SVXSessionManager _handleSession:audioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXSessionManager _handleSession:audioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXSessionManager _fetchStereoPartnerLastMyriadWinDate]
  -[SVXSessionManager _handleFetchedStereoPartnerLastMyriadWinDate:]
  -[SVXSessionManager _fetchStereoPairStateWithCompletion:]
  -[SVXSessionManager _handleSessionDidInvalidate:]
  -[SVXSessionManager _handleWillProcessAppLaunchWithBundleIdentifier:]
  -[SVXSessionManager _handleDidFailAppLaunchWithBundleIdentifier:]
  -[SVXSessionManager _handleSpeechSynthesizerWillStartRequest:taskTracker:]
  -[SVXSessionManager _handleSpeechSynthesizerDidStartRequest:record:taskTracker:]
  -[SVXSessionManager _handleSpeechSynthesizerDidFinishRequest:utteranceInfo:record:taskTracker:]
  -[SVXSessionManager _handleSpeechSynthesizerDidCancelRequest:taskTracker:]
  -[SVXSessionManager _handleSpeechSynthesizerDidInterruptRequest:taskTracker:]
  -[SVXSessionManager _handleSpeechSynthesizerDidFailRequest:taskTracker:error:]
  -[SVXSessionManager _handleDeviceProblemsStateChanged:]
  -[SVXSessionManager _handleDeviceSetupContextChanged:]
  -[SVXSessionManager _handleLocalDeviceContextChanged:]
  -[SVXSessionManager _handleMyriadForActivationContext:]


SVXServiceCommandHandlerPreSynthesizeTTS : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerPreSynthesizeTTS supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerPreSynthesizeTTS identifier]
  -[SVXServiceCommandHandlerPreSynthesizeTTS .cxx_destruct]
  -[SVXServiceCommandHandlerPreSynthesizeTTS initWithSpeechSynthesizer:]
  -[SVXServiceCommandHandlerPreSynthesizeTTS isCommandUUFR:]
  -[SVXServiceCommandHandlerPreSynthesizeTTS handleCommand:withContext:taskTracker:completion:]


SVXSpeechSynthesisUtteranceInfo : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *utterance
 @property  NSArray *wordTimings

  // class methods
  +[SVXSpeechSynthesisUtteranceInfo supportsSecureCoding]
  +[SVXSpeechSynthesisUtteranceInfo newWithBuilder:]

  // instance methods
  -[SVXSpeechSynthesisUtteranceInfo _descriptionWithIndent:]
  -[SVXSpeechSynthesisUtteranceInfo encodeWithCoder:]
  -[SVXSpeechSynthesisUtteranceInfo mutatedCopyWithMutator:]
  -[SVXSpeechSynthesisUtteranceInfo .cxx_destruct]
  -[SVXSpeechSynthesisUtteranceInfo copyWithZone:]
  -[SVXSpeechSynthesisUtteranceInfo isEqual:]
  -[SVXSpeechSynthesisUtteranceInfo initWithCoder:]
  -[SVXSpeechSynthesisUtteranceInfo utterance]
  -[SVXSpeechSynthesisUtteranceInfo wordTimings]
  -[SVXSpeechSynthesisUtteranceInfo initWithUtterance:wordTimings:]


_SVXSpeechSynthesisUtteranceInfoMutation : NSObject <SVXSpeechSynthesisUtteranceInfoMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSpeechSynthesisUtteranceInfoMutation .cxx_destruct]
  -[_SVXSpeechSynthesisUtteranceInfoMutation generate]
  -[_SVXSpeechSynthesisUtteranceInfoMutation init]
  -[_SVXSpeechSynthesisUtteranceInfoMutation setUtterance:]
  -[_SVXSpeechSynthesisUtteranceInfoMutation initWithBaseModel:]
  -[_SVXSpeechSynthesisUtteranceInfoMutation setWordTimings:]


SVXServiceCommandHandlerUIShowRequestHandlingStatus : NSObject <SVXSessionActivityListening, SVXServiceCommandHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *identifier

  // class methods
  +[SVXServiceCommandHandlerUIShowRequestHandlingStatus supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus identifier]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus .cxx_destruct]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus isCommandUUFR:]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus handleCommand:withContext:taskTracker:completion:]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus sessionDidResignActiveWithDeactivationContext:]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus initWithSessionManager:performer:]
  -[SVXServiceCommandHandlerUIShowRequestHandlingStatus _clearLEDs]


SVXClientSessionService : NSObject <SVXClientServiceConsuming, SVXClientSessionServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long currentState
 @property  <SVXClientSessionServiceDelegate> *delegate

  // instance methods
  -[SVXClientSessionService setDelegate:]
  -[SVXClientSessionService delegate]
  -[SVXClientSessionService .cxx_destruct]
  -[SVXClientSessionService _setCurrentState:]
  -[SVXClientSessionService currentState]
  -[SVXClientSessionService fetchStateWithCompletion:]
  -[SVXClientSessionService fetchAlarmAndTimerFiringContextWithCompletion:]
  -[SVXClientSessionService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientSessionService clientServiceDidChange:]
  -[SVXClientSessionService handleWillChangeStateFrom:to:]
  -[SVXClientSessionService handleDidChangeStateFrom:to:]
  -[SVXClientSessionService handleWillPresentFeedbackWithDialogIdentifier:]
  -[SVXClientSessionService handleWillStartSoundWithID:]
  -[SVXClientSessionService handleDidStartSoundWithID:]
  -[SVXClientSessionService handleDidStopSoundWithID:error:]
  -[SVXClientSessionService handleWillBecomeActiveWithActivationContext:turnID:]
  -[SVXClientSessionService handleDidBecomeActiveWithActivationContext:turnID:]
  -[SVXClientSessionService handleWillResignActiveWithOptions:duration:]
  -[SVXClientSessionService handleDidResignActiveWithDeactivationContext:]


SVXDeactivationOptions : NSObject <NSCopying, NSSecureCoding>
 @property  double audioSessionDeactivationDelay

  // class methods
  +[SVXDeactivationOptions supportsSecureCoding]
  +[SVXDeactivationOptions newWithBuilder:]

  // instance methods
  -[SVXDeactivationOptions _descriptionWithIndent:]
  -[SVXDeactivationOptions encodeWithCoder:]
  -[SVXDeactivationOptions mutatedCopyWithMutator:]
  -[SVXDeactivationOptions copyWithZone:]
  -[SVXDeactivationOptions isEqual:]
  -[SVXDeactivationOptions initWithCoder:]
  -[SVXDeactivationOptions initWithAudioSessionDeactivationDelay:]
  -[SVXDeactivationOptions audioSessionDeactivationDelay]


_SVXDeactivationOptionsMutation : NSObject <SVXDeactivationOptionsMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeactivationOptionsMutation .cxx_destruct]
  -[_SVXDeactivationOptionsMutation generate]
  -[_SVXDeactivationOptionsMutation init]
  -[_SVXDeactivationOptionsMutation initWithBaseModel:]
  -[_SVXDeactivationOptionsMutation setAudioSessionDeactivationDelay:]


SVXTaskTracker : NSObject <SVXTaskTracking>
 @property  SVXTaskContext *context
 @property  <SVXTaskTracking> *parent
 @property  AFAnalyticsTurnBasedInstrumentationContext *instrumentationContext
 @property  long long origin
 @property  unsigned long timestamp
 @property  NSUUID *sessionUUID
 @property  NSUUID *requestUUID
 @property  NSString *aceId
 @property  NSString *refId
 @property  NSString *dialogIdentifier
 @property  NSString *dialogPhase
 @property  BOOL isUUFR
 @property  BOOL listensAfterSpeaking
 @property  SAUIListenAfterSpeakingBehavior *listenAfterSpeakingBehavior
 @property  SVXActivationContext *activationContext
 @property  SVXDeactivationContext *deactivationContext
 @property  NSError *error
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXTaskTracker activationContext]
  -[SVXTaskTracker requestUUID]
  -[SVXTaskTracker origin]
  -[SVXTaskTracker sessionUUID]
  -[SVXTaskTracker error]
  -[SVXTaskTracker dealloc]
  -[SVXTaskTracker .cxx_destruct]
  -[SVXTaskTracker timestamp]
  -[SVXTaskTracker context]
  -[SVXTaskTracker parent]
  -[SVXTaskTracker refId]
  -[SVXTaskTracker aceId]
  -[SVXTaskTracker dialogIdentifier]
  -[SVXTaskTracker dialogPhase]
  -[SVXTaskTracker listenAfterSpeakingBehavior]
  -[SVXTaskTracker beginChildWithContext:]
  -[SVXTaskTracker instrumentationContext]
  -[SVXTaskTracker isUUFR]
  -[SVXTaskTracker listensAfterSpeaking]
  -[SVXTaskTracker deactivationContext]
  -[SVXTaskTracker initWithContext:instrumentationContext:delegate:]


SVXTaskTrackingCenter : NSObject <SVXTaskTrackingDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXTaskTrackingCenter .cxx_destruct]
  -[SVXTaskTrackingCenter taskTracker:childWillBegin:]
  -[SVXTaskTrackingCenter taskTrackerDidEnd:]
  -[SVXTaskTrackingCenter initWithPerformer:delegate:]
  -[SVXTaskTrackingCenter beginTrackingTaskWithContext:instrumentationContext:]
  -[SVXTaskTrackingCenter endTrackingTaskWithContext:]
  -[SVXTaskTrackingCenter endTrackingTasksPassingTest:]
  -[SVXTaskTrackingCenter endTrackingAllTasks]
  -[SVXTaskTrackingCenter getContextsOfAllTrackedTasksUsingBlock:]
  -[SVXTaskTrackingCenter _beginContext:]
  -[SVXTaskTrackingCenter _endContext:]
  -[SVXTaskTrackingCenter _endContextsPassingTest:]


SVXMyriadDeviceManager : NSObject <SVXMyriadRequestDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXMyriadDeviceManager .cxx_destruct]
  -[SVXMyriadDeviceManager setupEnabled:]
  -[SVXMyriadDeviceManager preheatMyriad]
  -[SVXMyriadDeviceManager resetMyriad]
  -[SVXMyriadDeviceManager startAdvertising:withMyriadGoodnessScoreContext:withMyriadAudioContext:completion:]
  -[SVXMyriadDeviceManager initWithInstanceContext:analytics:preferences:delegate:]
  -[SVXMyriadDeviceManager _initializeMyriadDeviceWithInstanceContext:analytics:preferences:delegate:workQueue:analyticsQueue:]


SVXClientSessionStateService : NSObject <SVXClientServiceConsuming, SVXClientSessionStateServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long currentState
 @property  <SVXClientSessionStateServiceDelegate> *delegate

  // instance methods
  -[SVXClientSessionStateService setDelegate:]
  -[SVXClientSessionStateService delegate]
  -[SVXClientSessionStateService .cxx_destruct]
  -[SVXClientSessionStateService _setCurrentState:]
  -[SVXClientSessionStateService currentState]
  -[SVXClientSessionStateService fetchStateWithCompletion:]
  -[SVXClientSessionStateService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientSessionStateService clientServiceDidChange:]
  -[SVXClientSessionStateService handleWillChangeSessionStateFrom:to:]
  -[SVXClientSessionStateService handleDidChangeSessionStateFrom:to:]


SVXMyriadHostDevice : NSObject <AFMyriadDelegate, SVXMyriadRequestDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXMyriadHostDevice initWithDelegate:queue:]
  -[SVXMyriadHostDevice shouldContinue:]
  -[SVXMyriadHostDevice .cxx_destruct]
  -[SVXMyriadHostDevice setupEnabled:]
  -[SVXMyriadHostDevice shouldAbortAnotherDeviceBetter:]
  -[SVXMyriadHostDevice willStartWithSession:]
  -[SVXMyriadHostDevice willEndSession:]
  -[SVXMyriadHostDevice shouldUnduck:]
  -[SVXMyriadHostDevice myriadCoordinatorDidHandleEmergency:]
  -[SVXMyriadHostDevice preheatMyriad]
  -[SVXMyriadHostDevice resetMyriad]
  -[SVXMyriadHostDevice startAdvertising:withMyriadGoodnessScoreContext:withMyriadAudioContext:completion:]
  -[SVXMyriadHostDevice _initializeMyriadEmergencyTimer]
  -[SVXMyriadHostDevice _armEmergencyDispatchTimerFor:toExecute:]
  -[SVXMyriadHostDevice _disarmMyriadEmergencyTimer]
  -[SVXMyriadHostDevice _startAdvertisingEmergency:]
  -[SVXMyriadHostDevice _signalEmergencyCallHandledStatus:]
  -[SVXMyriadHostDevice _acquireWiFiAssertion]
  -[SVXMyriadHostDevice _releaseWiFiAssertion]


SVXUserFeedbackScene : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  double duration
 @property  NSSet *nodes

  // class methods
  +[SVXUserFeedbackScene supportsSecureCoding]
  +[SVXUserFeedbackScene newWithBuilder:]

  // instance methods
  -[SVXUserFeedbackScene nodes]
  -[SVXUserFeedbackScene identifier]
  -[SVXUserFeedbackScene _descriptionWithIndent:]
  -[SVXUserFeedbackScene encodeWithCoder:]
  -[SVXUserFeedbackScene mutatedCopyWithMutator:]
  -[SVXUserFeedbackScene .cxx_destruct]
  -[SVXUserFeedbackScene duration]
  -[SVXUserFeedbackScene copyWithZone:]
  -[SVXUserFeedbackScene isEqual:]
  -[SVXUserFeedbackScene initWithCoder:]
  -[SVXUserFeedbackScene initWithIdentifier:duration:nodes:]


_SVXUserFeedbackSceneMutation : NSObject <SVXUserFeedbackSceneMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXUserFeedbackSceneMutation setDuration:]
  -[_SVXUserFeedbackSceneMutation setNodes:]
  -[_SVXUserFeedbackSceneMutation .cxx_destruct]
  -[_SVXUserFeedbackSceneMutation setIdentifier:]
  -[_SVXUserFeedbackSceneMutation generate]
  -[_SVXUserFeedbackSceneMutation init]
  -[_SVXUserFeedbackSceneMutation initWithBaseModel:]


SVXAudioStreamingAnnouncer : SVXAnnouncer <SVXAudioStreamingListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXAudioStreamingAnnouncer protocol]


SVXTaskContext : NSObject <NSCopying, NSSecureCoding>
 @property  long long origin
 @property  unsigned long timestamp
 @property  NSUUID *sessionUUID
 @property  NSUUID *requestUUID
 @property  NSString *aceId
 @property  NSString *refId
 @property  NSString *dialogIdentifier
 @property  NSString *dialogPhase
 @property  BOOL isUUFR
 @property  BOOL listensAfterSpeaking
 @property  SAUIListenAfterSpeakingBehavior *listenAfterSpeakingBehavior
 @property  SVXActivationContext *activationContext
 @property  SVXDeactivationContext *deactivationContext
 @property  NSError *error

  // class methods
  +[SVXTaskContext supportsSecureCoding]
  +[SVXTaskContext newWithBuilder:]

  // instance methods
  -[SVXTaskContext activationContext]
  -[SVXTaskContext requestUUID]
  -[SVXTaskContext origin]
  -[SVXTaskContext sessionUUID]
  -[SVXTaskContext _descriptionWithIndent:]
  -[SVXTaskContext encodeWithCoder:]
  -[SVXTaskContext error]
  -[SVXTaskContext mutatedCopyWithMutator:]
  -[SVXTaskContext .cxx_destruct]
  -[SVXTaskContext copyWithZone:]
  -[SVXTaskContext timestamp]
  -[SVXTaskContext isEqual:]
  -[SVXTaskContext initWithCoder:]
  -[SVXTaskContext refId]
  -[SVXTaskContext aceId]
  -[SVXTaskContext dialogIdentifier]
  -[SVXTaskContext dialogPhase]
  -[SVXTaskContext listenAfterSpeakingBehavior]
  -[SVXTaskContext isUUFR]
  -[SVXTaskContext listensAfterSpeaking]
  -[SVXTaskContext deactivationContext]
  -[SVXTaskContext initWithOrigin:timestamp:sessionUUID:requestUUID:aceId:refId:dialogIdentifier:dialogPhase:isUUFR:listensAfterSpeaking:listenAfterSpeakingBehavior:activationContext:deactivationContext:error:]


_SVXTaskContextMutation : NSObject <SVXTaskContextMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXTaskContextMutation setOrigin:]
  -[_SVXTaskContextMutation setSessionUUID:]
  -[_SVXTaskContextMutation setTimestamp:]
  -[_SVXTaskContextMutation setRequestUUID:]
  -[_SVXTaskContextMutation .cxx_destruct]
  -[_SVXTaskContextMutation setError:]
  -[_SVXTaskContextMutation setActivationContext:]
  -[_SVXTaskContextMutation generate]
  -[_SVXTaskContextMutation init]
  -[_SVXTaskContextMutation setAceId:]
  -[_SVXTaskContextMutation setDialogIdentifier:]
  -[_SVXTaskContextMutation setRefId:]
  -[_SVXTaskContextMutation setDialogPhase:]
  -[_SVXTaskContextMutation initWithBaseModel:]
  -[_SVXTaskContextMutation setListenAfterSpeakingBehavior:]
  -[_SVXTaskContextMutation setIsUUFR:]
  -[_SVXTaskContextMutation setListensAfterSpeaking:]
  -[_SVXTaskContextMutation setDeactivationContext:]


SVXPlaybackRequestInfo : NSObject
 @property  BOOL didStart
 @property  BOOL didFinish
 @property  double start
 @property  double finish

  // instance methods
  -[SVXPlaybackRequestInfo duration]
  -[SVXPlaybackRequestInfo finish]
  -[SVXPlaybackRequestInfo setStart:]
  -[SVXPlaybackRequestInfo start]
  -[SVXPlaybackRequestInfo didFinish]
  -[SVXPlaybackRequestInfo setDidFinish:]
  -[SVXPlaybackRequestInfo didStart]
  -[SVXPlaybackRequestInfo setDidStart:]
  -[SVXPlaybackRequestInfo setFinish:]


SVXSessionIdleAssertion : NSObject
 @property  unsigned long timestamp
 @property  SVXSession *session

  // instance methods
  -[SVXSessionIdleAssertion session]
  -[SVXSessionIdleAssertion .cxx_destruct]
  -[SVXSessionIdleAssertion timestamp]
  -[SVXSessionIdleAssertion initWithTimestamp:session:]


SVXSession : NSObject <AFAssistantUIService, AFSpeechDelegate, SVXSpeechSynthesisListening, SVXTaskTrackingCenterDelegate, SVXAudioSessionProviding>
 @property  NSUUID *sessionUUID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXSession performBlock:]
  -[SVXSession _invalidateConnection]
  -[SVXSession _setAudioSessionID:]
  -[SVXSession sessionUUID]
  -[SVXSession dismiss]
  -[SVXSession _invalidate]
  -[SVXSession cancelRequest]
  -[SVXSession stopSpeech]
  -[SVXSession dealloc]
  -[SVXSession _dismiss]
  -[SVXSession .cxx_destruct]
  -[SVXSession _setCurrentState:]
  -[SVXSession _clearContext]
  -[SVXSession invalidate]
  -[SVXSession startAudioPlaybackRequest:options:completion:]
  -[SVXSession stopAudioPlaybackRequest:immediately:]
  -[SVXSession getStateWithCompletion:]
  -[SVXSession activateWithContext:completion:]
  -[SVXSession assistantConnection:startUIRequestWithInfo:completion:]
  -[SVXSession assistantConnection:startUIRequestWithText:completion:]
  -[SVXSession assistantConnection:receivedCommand:completion:]
  -[SVXSession assistantConnectionRequestWillStart:]
  -[SVXSession assistantConnection:requestFailedWithError:requestClass:]
  -[SVXSession assistantConnectionRequestFinished:]
  -[SVXSession assistantConnection:shouldSpeak:]
  -[SVXSession assistantConnection:didChangeAudioSessionID:]
  -[SVXSession assistantConnection:setUserActivtiyInfoAndMakeCurrent:webpageURL:]
  -[SVXSession assistantConnectionAudioSessionDidBeginInterruption:]
  -[SVXSession assistantConnectionAudioSessionDidEndInterruption:shouldResume:]
  -[SVXSession assistantConnection:willStartAudioPlaybackRequest:]
  -[SVXSession assistantConnection:didStartAudioPlaybackRequest:]
  -[SVXSession assistantConnection:didStopAudioPlaybackRequest:error:]
  -[SVXSession assistantConnection:willProcessStartPlayback:intent:completion:]
  -[SVXSession assistantConnection:startPlaybackDidFail:]
  -[SVXSession assistantConnection:audioSessionWillBecomeActive:]
  -[SVXSession assistantConnection:audioSessionDidBecomeActive:]
  -[SVXSession assistantConnection:willProcessAppLaunchWithBundleIdentifier:]
  -[SVXSession assistantConnection:appLaunchFailedWithBundleIdentifier:]
  -[SVXSession assistantConnection:speechRecordingWillBeginWithInputAudioPowerXPCWrapper:]
  -[SVXSession assistantConnectionSpeechRecordingWillBegin:]
  -[SVXSession assistantConnection:speechRecordingDidBeginOnAVRecordRoute:audioSessionID:]
  -[SVXSession assistantConnection:speechRecordingDidChangeAVRecordRoute:]
  -[SVXSession assistantConnectionSpeechRecordingDidDetectStartpoint:]
  -[SVXSession assistantConnection:speechRecordingPerformTwoShotPromptWithType:completion:]
  -[SVXSession assistantConnectionSpeechRecordingDidEnd:]
  -[SVXSession assistantConnectionSpeechRecordingDidCancel:]
  -[SVXSession assistantConnection:speechRecordingDidFail:]
  -[SVXSession assistantConnection:speechRecognized:]
  -[SVXSession assistantConnection:recognizedAdditionalSpeechInterpretation:refId:]
  -[SVXSession assistantConnection:recognitionUpdateWithPhrases:utterances:refId:]
  -[SVXSession assistantConnection:speechRecognizedPartialResult:]
  -[SVXSession assistantConnection:speechRecognitionDidFail:]
  -[SVXSession preheatWithStyle:]
  -[SVXSession assistantConnectionDismissAssistant:]
  -[SVXSession assistantConnection:didHandleQuickStopWithAction:]
  -[SVXSession updateLocalDeviceContext:]
  -[SVXSession _handleSpeechRecordingDidCancel]
  -[SVXSession speechSynthesizerDidBecomeBusy]
  -[SVXSession speechSynthesizerDidBecomeIdle]
  -[SVXSession speechSynthesizerWillEnqueueRequest:taskTracker:]
  -[SVXSession speechSynthesizerWillStartRequest:taskTracker:]
  -[SVXSession speechSynthesizerDidStartRequest:record:taskTracker:]
  -[SVXSession speechSynthesizerDidFinishRequest:utteranceInfo:record:taskTracker:]
  -[SVXSession speechSynthesizerDidCancelRequest:taskTracker:]
  -[SVXSession speechSynthesizerDidInterruptRequest:taskTracker:]
  -[SVXSession speechSynthesizerDidFailRequest:taskTracker:error:]
  -[SVXSession prewarmWithContext:completion:]
  -[SVXSession deactivateWithContext:completion:]
  -[SVXSession _handleCommand:taskTracker:completion:]
  -[SVXSession _deactivateWithContext:completion:]
  -[SVXSession _handleSpeechSynthesizerWillStartRequest:taskTracker:]
  -[SVXSession _handleSpeechSynthesizerDidStartRequest:record:taskTracker:]
  -[SVXSession _handleSpeechSynthesizerDidCancelRequest:taskTracker:]
  -[SVXSession _handleSpeechSynthesizerDidInterruptRequest:taskTracker:]
  -[SVXSession _handleSpeechSynthesizerDidFailRequest:taskTracker:error:]
  -[SVXSession taskTrackingCenterWillBecomeBusy:]
  -[SVXSession taskTrackingCenter:didBeginTrackingTaskWithContext:]
  -[SVXSession taskTrackingCenter:didEndTrackingTaskWithContext:]
  -[SVXSession taskTrackingCenterDidBecomeIdle:]
  -[SVXSession acquireAudioSessionForReason:completion:]
  -[SVXSession initWithPerformer:serviceCommandHandler:speechSynthesizer:instanceContext:preferences:analytics:delegate:]
  -[SVXSession activateWithContext:options:deviceSetupContext:deviceProblemsState:localDeviceContext:speechSynthesisRecord:speechSynthesisState:speechRecordingAlertPolicy:completion:]
  -[SVXSession transitSpeechToAutomaticEndpointing]
  -[SVXSession transitSpeechToManualEndpointing]
  -[SVXSession getActivityStateWithCompletion:]
  -[SVXSession getAudioPowerWithType:completion:]
  -[SVXSession getAlarmAndTimerFiringContextWithCompletion:]
  -[SVXSession addRequestBarrier:]
  -[SVXSession handleCommand:taskTracker:]
  -[SVXSession updateDeviceProblemsState:]
  -[SVXSession updateDeviceSetupContext:]
  -[SVXSession activateWithSpeechRequestOptions:options:deviceSetupContext:deviceProblemsState:localDeviceContext:completion:]
  -[SVXSession _activateWithContext:options:deviceSetupContext:deviceProblemsState:localDeviceContext:speechSynthesisRecord:speechSynthesisState:speechRecordingAlertPolicy:taskTracker:completion:]
  -[SVXSession _preheatWithStyle:]
  -[SVXSession _startSpeechRequestWithOptions:clearsContext:deviceSetupContext:deviceProblemsState:localDeviceContext:taskTracker:completion:]
  -[SVXSession _stopSpeech]
  -[SVXSession _stopSpeechWithCurrentSpeechRequestOptions]
  -[SVXSession _transitSpeechToManualEndpointing]
  -[SVXSession _transitSpeechToAutomaticEndpointing]
  -[SVXSession _updateSpeechEndpointerOperationMode:]
  -[SVXSession _startRequestWithInfo:clearsContext:deviceSetupContext:taskTracker:completion:]
  -[SVXSession _startSpeechSynthesisRequest:languageCode:voiceName:gender:audioSessionID:introductionSoundID:conclusionSoundID:taskTracker:postActivationHandler:completion:]
  -[SVXSession _startActiveAudioSessionRequestForType:taskTracker:completion:]
  -[SVXSession beginWaitingForMyriadDecision]
  -[SVXSession endWaitingForMyriadDecisionWithToken:result:]
  -[SVXSession _beginWaitingForMyriadDecisionWithToken:]
  -[SVXSession _endWaitingForMyriadDecisionWithToken:state:]
  -[SVXSession _resetMyriadDecision]
  -[SVXSession _waitForMyriadDecisionUsingHandler:]
  -[SVXSession _cancelRequestWithOptions:keepTaskTracker:]
  -[SVXSession _performBlockAfterContinueBlock:]
  -[SVXSession _continuePendingSpeechRequest:]
  -[SVXSession _setApplicationContext:]
  -[SVXSession _addRequestBarrier:]
  -[SVXSession _performNextPendingRequestBarrier]
  -[SVXSession _discardPendingRequestBarriers]
  -[SVXSession _setInputAudioPowerWrapper:]
  -[SVXSession _setOutputAudioPowerWrapper:]
  -[SVXSession _forceAudioSessionActiveWithOptions:reason:completion:]
  -[SVXSession _forceAudioSessionInactiveWithReason:completion:]
  -[SVXSession _getAlarmAndTimerFiringContextWithCompletion:]
  -[SVXSession _currentAccessoryInfo]
  -[SVXSession _checkIsActiveWithCompletion:]
  -[SVXSession _performBlockAfterResignActive:]
  -[SVXSession _resignActiveForReason:]
  -[SVXSession _requestWillBeginWithTaskTracker:]
  -[SVXSession _requestDidEndWithOptions:error:]
  -[SVXSession _handleSpeechRecordingWillBeginWithInputAudioPowerXPCWrapper:]
  -[SVXSession _handleSpeechRecordingDidBeginOnAVRecordRoute:]
  -[SVXSession _handleSpeechRecordingDidChangeAVRecordRoute:]
  -[SVXSession _handleSpeechRecordingDidDetectStartpoint]
  -[SVXSession _handleSpeechRecordingPerformTwoShotPromptWithType:completion:]
  -[SVXSession _handleSpeechRecordingDidEnd]
  -[SVXSession _handleSpeechRecordingDidFailWithError:]
  -[SVXSession _handleSpeechRecognitionDidFailWithError:]
  -[SVXSession _handleSpeechRecognized:]
  -[SVXSession _handleSpeechRecognizedPartialResult:]
  -[SVXSession _handleRequestWillStart]
  -[SVXSession _handleDismissAssistant]
  -[SVXSession _handleRequestFinished]
  -[SVXSession _handleReceivedCommand:completion:]
  -[SVXSession _handleRequestFailedWithError:]
  -[SVXSession _handleShouldSpeak:]
  -[SVXSession _handleDidChangeAudioSessionID:]
  -[SVXSession _handleAudioSessionDidBeginInterruption]
  -[SVXSession _handleAudioSessionDidEndInterruption:]
  -[SVXSession _handleWillStartAudioPlaybackRequest:]
  -[SVXSession _handleDidStartAudioPlaybackRequest:]
  -[SVXSession _handleDidStopAudioPlaybackRequest:error:]
  -[SVXSession _handleDidHandleQuickStopWithActions:]
  -[SVXSession _handleWillProcessStartPlaybackWithDestination:intent:completion:]
  -[SVXSession _handleDidFailStartPlaybackWithDestination:]
  -[SVXSession _handleAudioSessionWillBecomeActive:]
  -[SVXSession _handleAudioSessionDidBecomeActive:]
  -[SVXSession _willChangeFromState:toState:]
  -[SVXSession _didChangeFromState:toState:]
  -[SVXSession _beginThinking]
  -[SVXSession _endThinking]
  -[SVXSession _handleSpeechSynthesizerWillBecomeBusy]
  -[SVXSession _handleSpeechSynthesizerDidBecomeIdle]
  -[SVXSession _handleSpeechSynthesizerDidFinishRequest:record:taskTracker:]
  -[SVXSession _presentError:taskTracker:completion:]
  -[SVXSession _connection:]
  -[SVXSession _startSessionIdleTimerWithTimeInterval:]
  -[SVXSession _stopSessionIdleTimer]
  -[SVXSession _sessionIdleFiredWithAssertion:]


_SVXSpeakableNamespaceDomainOccurrenceProvider : NSObject <AFSpeakableNamespaceProvider>
 @property  NSString *domain
 @property  unsigned long count
 @property  NSSet *deferredMessageKeys
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SVXSpeakableNamespaceDomainOccurrenceProvider providerForDomain:]

  // instance methods
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider setCount:]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider domain]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider .cxx_destruct]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider count]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider setDomain:]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider stringForExpression:]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider deferredMessageKeys]
  -[_SVXSpeakableNamespaceDomainOccurrenceProvider setDeferredMessageKeys:]


SVXSessionActivityAnnouncer : SVXAnnouncer <SVXSessionActivityListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXSessionActivityAnnouncer protocol]


SVXVirtualDevice : NSObject
 @property  <SVXPrewarmHandling> *prewarmHandler
 @property  <SVXActivationHandling> *activationHandler
 @property  <SVXDeactivationHandling> *deactivationHandler
 @property  SVXDeviceSetupManager *deviceSetupManager
 @property  SVXSessionManager *sessionManager
 @property  SVXSpeechSynthesizer *speechSynthesizer
 @property  SVXClientServiceServer *clientServiceServer
 @property  <SVXMyriadEventHandling> *myriadEventHandler
 @property  AFPreferences *preferences

  // instance methods
  -[SVXVirtualDevice initWithInstanceContext:]
  -[SVXVirtualDevice .cxx_destruct]
  -[SVXVirtualDevice preferences]
  -[SVXVirtualDevice stop]
  -[SVXVirtualDevice sessionManager]
  -[SVXVirtualDevice speechSynthesizer]
  -[SVXVirtualDevice activationHandler]
  -[SVXVirtualDevice deactivationHandler]
  -[SVXVirtualDevice clientServiceServer]
  -[SVXVirtualDevice deviceSetupManager]
  -[SVXVirtualDevice startWithPlatformDependencies:]
  -[SVXVirtualDevice prewarmHandler]
  -[SVXVirtualDevice myriadEventHandler]
  -[SVXVirtualDevice _startWithModuleInstanceMap:platformDependencies:]
  -[SVXVirtualDevice _stopWithModuleInstanceMap:]


SVXSpeechSynthesisAudio : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *data
 @property  SVXAudioStreamBasicDescription *decoderASBD
 @property  SVXAudioStreamBasicDescription *playerASBD

  // class methods
  +[SVXSpeechSynthesisAudio supportsSecureCoding]
  +[SVXSpeechSynthesisAudio newWithBuilder:]

  // instance methods
  -[SVXSpeechSynthesisAudio _descriptionWithIndent:]
  -[SVXSpeechSynthesisAudio encodeWithCoder:]
  -[SVXSpeechSynthesisAudio mutatedCopyWithMutator:]
  -[SVXSpeechSynthesisAudio .cxx_destruct]
  -[SVXSpeechSynthesisAudio copyWithZone:]
  -[SVXSpeechSynthesisAudio isEqual:]
  -[SVXSpeechSynthesisAudio data]
  -[SVXSpeechSynthesisAudio initWithCoder:]
  -[SVXSpeechSynthesisAudio initWithData:decoderASBD:playerASBD:]
  -[SVXSpeechSynthesisAudio decoderASBD]
  -[SVXSpeechSynthesisAudio playerASBD]


_SVXSpeechSynthesisAudioMutation : NSObject <SVXSpeechSynthesisAudioMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXSpeechSynthesisAudioMutation .cxx_destruct]
  -[_SVXSpeechSynthesisAudioMutation setData:]
  -[_SVXSpeechSynthesisAudioMutation generate]
  -[_SVXSpeechSynthesisAudioMutation init]
  -[_SVXSpeechSynthesisAudioMutation initWithBaseModel:]
  -[_SVXSpeechSynthesisAudioMutation setDecoderASBD:]
  -[_SVXSpeechSynthesisAudioMutation setPlayerASBD:]


SVXServiceCommandHandlerUICloseAssistant : NSObject <SVXServiceCommandHandling>
 @property  NSString *identifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXServiceCommandHandlerUICloseAssistant supportedCommandClass]

  // instance methods
  -[SVXServiceCommandHandlerUICloseAssistant identifier]
  -[SVXServiceCommandHandlerUICloseAssistant initWithSessionManager:]
  -[SVXServiceCommandHandlerUICloseAssistant .cxx_destruct]
  -[SVXServiceCommandHandlerUICloseAssistant isCommandUUFR:]
  -[SVXServiceCommandHandlerUICloseAssistant handleCommand:withContext:taskTracker:completion:]


SVXDeviceSetupOptions : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *languageCode
 @property  long long gender
 @property  long long hasActiveAccount
 @property  long long isNewsRestricted

  // class methods
  +[SVXDeviceSetupOptions supportsSecureCoding]
  +[SVXDeviceSetupOptions newWithBuilder:]

  // instance methods
  -[SVXDeviceSetupOptions _descriptionWithIndent:]
  -[SVXDeviceSetupOptions encodeWithCoder:]
  -[SVXDeviceSetupOptions gender]
  -[SVXDeviceSetupOptions mutatedCopyWithMutator:]
  -[SVXDeviceSetupOptions .cxx_destruct]
  -[SVXDeviceSetupOptions languageCode]
  -[SVXDeviceSetupOptions copyWithZone:]
  -[SVXDeviceSetupOptions isEqual:]
  -[SVXDeviceSetupOptions initWithCoder:]
  -[SVXDeviceSetupOptions initWithLanguageCode:gender:hasActiveAccount:isNewsRestricted:]
  -[SVXDeviceSetupOptions hasActiveAccount]
  -[SVXDeviceSetupOptions isNewsRestricted]


_SVXDeviceSetupOptionsMutation : NSObject <SVXDeviceSetupOptionsMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXDeviceSetupOptionsMutation setLanguageCode:]
  -[_SVXDeviceSetupOptionsMutation .cxx_destruct]
  -[_SVXDeviceSetupOptionsMutation setGender:]
  -[_SVXDeviceSetupOptionsMutation generate]
  -[_SVXDeviceSetupOptionsMutation init]
  -[_SVXDeviceSetupOptionsMutation initWithBaseModel:]
  -[_SVXDeviceSetupOptionsMutation setHasActiveAccount:]
  -[_SVXDeviceSetupOptionsMutation setIsNewsRestricted:]


SVXDaemon : NSObject <NSXPCListenerDelegate, AFSiriActivationListenerDelegate, SVXClientServiceServerConnectionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SVXDaemon initialize]

  // instance methods
  -[SVXDaemon .cxx_destruct]
  -[SVXDaemon stop]
  -[SVXDaemon listener:shouldAcceptNewConnection:]
  -[SVXDaemon init]
  -[SVXDaemon siriActivationListener:prewarmWithRequestInfo:context:completion:]
  -[SVXDaemon siriActivationListener:activateWithRequestInfo:context:completion:]
  -[SVXDaemon siriActivationListener:deactivateForReason:options:context:completion:]
  -[SVXDaemon siriActivationListener:myriadEventWithRequestInfo:context:completion:]
  -[SVXDaemon startWithPlatformDependencies:]
  -[SVXDaemon clientServiceServerConnectionDidInvalidate:]
  -[SVXDaemon handleClientServiceXPCConnection:]
  -[SVXDaemon _getVirtualDeviceForActivationContext:completion:]
  -[SVXDaemon _getVirtualDeviceForInstanceInfo:completion:]
  -[SVXDaemon _enumerateVirtualDevicesUsingBlock:]


SVXClientServiceServerConnection : NSObject <SVXClientService, SVXSessionActivationListening, SVXAudioPowerUpdateListening, SVXSessionActivityListening>
 @property  NSUUID *uuid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXClientServiceServerConnection _connectionInvalidated]
  -[SVXClientServiceServerConnection uuid]
  -[SVXClientServiceServerConnection .cxx_destruct]
  -[SVXClientServiceServerConnection pingWithReply:]
  -[SVXClientServiceServerConnection invalidate]
  -[SVXClientServiceServerConnection _connectionInterrupted]
  -[SVXClientServiceServerConnection activateWithContext:completion:]
  -[SVXClientServiceServerConnection fetchSessionStateWithCompletion:]
  -[SVXClientServiceServerConnection fetchSessionActivityStateWithCompletion:]
  -[SVXClientServiceServerConnection fetchAlarmAndTimerFiringContextWithCompletion:]
  -[SVXClientServiceServerConnection preheatWithActivationSource:]
  -[SVXClientServiceServerConnection prewarmWithContext:completion:]
  -[SVXClientServiceServerConnection deactivateWithContext:completion:]
  -[SVXClientServiceServerConnection performManualEndpointing]
  -[SVXClientServiceServerConnection transitToAutomaticEndpointing]
  -[SVXClientServiceServerConnection fetchAudioPowerWithType:completion:]
  -[SVXClientServiceServerConnection prewarmRequest:]
  -[SVXClientServiceServerConnection synthesizeRequest:handlerUUID:completion:]
  -[SVXClientServiceServerConnection enqueueSpeechSynthesisRequest:completion:]
  -[SVXClientServiceServerConnection cancelPendingSpeechSynthesisRequest:]
  -[SVXClientServiceServerConnection stopSpeechSynthesisRequest:]
  -[SVXClientServiceServerConnection setDeviceSetupContext:]
  -[SVXClientServiceServerConnection prepareForDeviceSetupWithContext:completion:]
  -[SVXClientServiceServerConnection getInstanceInfoWithCompletion:]
  -[SVXClientServiceServerConnection sessionManager:willActivateWithContext:]
  -[SVXClientServiceServerConnection sessionManager:didActivateWithContext:]
  -[SVXClientServiceServerConnection sessionManager:didNotActivateWithContext:error:]
  -[SVXClientServiceServerConnection sessionManager:willDeactivateWithContext:]
  -[SVXClientServiceServerConnection sessionManager:didDeactivateWithContext:]
  -[SVXClientServiceServerConnection audioPowerWillBeginUpdateForType:wrapper:]
  -[SVXClientServiceServerConnection audioPowerDidEndUpdateForType:]
  -[SVXClientServiceServerConnection sessionWillChangeFromState:toState:]
  -[SVXClientServiceServerConnection sessionDidChangeFromState:toState:]
  -[SVXClientServiceServerConnection sessionWillPresentFeedbackWithDialogIdentifier:]
  -[SVXClientServiceServerConnection sessionWillStartSoundWithID:]
  -[SVXClientServiceServerConnection sessionDidStartSoundWithID:]
  -[SVXClientServiceServerConnection sessionDidStopSoundWithID:error:]
  -[SVXClientServiceServerConnection sessionWillBecomeActiveWithActivationContext:turnID:]
  -[SVXClientServiceServerConnection sessionDidBecomeActiveWithActivationContext:turnID:]
  -[SVXClientServiceServerConnection sessionWillResignActiveWithOptions:duration:]
  -[SVXClientServiceServerConnection sessionDidResignActiveWithDeactivationContext:]
  -[SVXClientServiceServerConnection audioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXClientServiceServerConnection audioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXClientServiceServerConnection sessionWillProcessAppLaunchWithBundleIdentifier:]
  -[SVXClientServiceServerConnection sessionDidFailAppLaunchWithBundleIdentifier:]
  -[SVXClientServiceServerConnection initWithXPCConnection:performer:delegate:]
  -[SVXClientServiceServerConnection configureWithDeviceSetupManager:sessionManager:speechSynthesizer:]
  -[SVXClientServiceServerConnection _performBlockAfterConfigure:]
  -[SVXClientServiceServerConnection _remoteServiceDelegateWithErrorHandler:]
  -[SVXClientServiceServerConnection _cleanUpXPCConnection]
  -[SVXClientServiceServerConnection _getInstanceInfoWithCompletion:]
  -[SVXClientServiceServerConnection _updateInstanceInfo:]


SVXSystemObserver : NSObject <SVXModuleInstance, SVXSessionActivityListening, AFDeviceContextConnectionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXSystemObserver dealloc]
  -[SVXSystemObserver .cxx_destruct]
  -[SVXSystemObserver initWithModule:]
  -[SVXSystemObserver _logSnapshot]
  -[SVXSystemObserver deviceContextConnection:didUpdateLocalDeviceContext:]
  -[SVXSystemObserver getLocalDeviceContextWithCompletion:]
  -[SVXSystemObserver deviceContextConnectionDidInvalidate:]
  -[SVXSystemObserver startWithModuleInstanceProvider:platformDependencies:]
  -[SVXSystemObserver stopWithModuleInstanceProvider:]
  -[SVXSystemObserver sessionWillChangeFromState:toState:]
  -[SVXSystemObserver sessionDidChangeFromState:toState:]
  -[SVXSystemObserver sessionWillPresentFeedbackWithDialogIdentifier:]
  -[SVXSystemObserver sessionWillStartSoundWithID:]
  -[SVXSystemObserver sessionDidStartSoundWithID:]
  -[SVXSystemObserver sessionDidStopSoundWithID:error:]
  -[SVXSystemObserver sessionWillBecomeActiveWithActivationContext:turnID:]
  -[SVXSystemObserver sessionDidBecomeActiveWithActivationContext:turnID:]
  -[SVXSystemObserver sessionWillResignActiveWithOptions:duration:]
  -[SVXSystemObserver sessionDidResignActiveWithDeactivationContext:]
  -[SVXSystemObserver audioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXSystemObserver audioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXSystemObserver sessionWillProcessAppLaunchWithBundleIdentifier:]
  -[SVXSystemObserver sessionDidFailAppLaunchWithBundleIdentifier:]
  -[SVXSystemObserver addDeviceContextListener:]
  -[SVXSystemObserver removeDeviceContextListener:]
  -[SVXSystemObserver _startObservingInfo]
  -[SVXSystemObserver _stopObservingInfo]
  -[SVXSystemObserver _startObservingDeviceContext]
  -[SVXSystemObserver _stopObservingDeviceContext]


SVXAudioStreamBasicDescription : NSObject <NSCopying, NSSecureCoding>
 @property  double sampleRate
 @property  unsigned int formatID
 @property  unsigned int formatFlags
 @property  unsigned int bytesPerPacket
 @property  unsigned int framesPerPacket
 @property  unsigned int bytesPerFrame
 @property  unsigned int channelsPerFrame
 @property  unsigned int bitsPerChannel
 @property  unsigned int reserved

  // class methods
  +[SVXAudioStreamBasicDescription supportsSecureCoding]
  +[SVXAudioStreamBasicDescription newWithBuilder:]

  // instance methods
  -[SVXAudioStreamBasicDescription _descriptionWithIndent:]
  -[SVXAudioStreamBasicDescription encodeWithCoder:]
  -[SVXAudioStreamBasicDescription mutatedCopyWithMutator:]
  -[SVXAudioStreamBasicDescription sampleRate]
  -[SVXAudioStreamBasicDescription copyWithZone:]
  -[SVXAudioStreamBasicDescription reserved]
  -[SVXAudioStreamBasicDescription isEqual:]
  -[SVXAudioStreamBasicDescription initWithCoder:]
  -[SVXAudioStreamBasicDescription formatID]
  -[SVXAudioStreamBasicDescription formatFlags]
  -[SVXAudioStreamBasicDescription bytesPerPacket]
  -[SVXAudioStreamBasicDescription framesPerPacket]
  -[SVXAudioStreamBasicDescription bytesPerFrame]
  -[SVXAudioStreamBasicDescription channelsPerFrame]
  -[SVXAudioStreamBasicDescription bitsPerChannel]
  -[SVXAudioStreamBasicDescription initWithSampleRate:formatID:formatFlags:bytesPerPacket:framesPerPacket:bytesPerFrame:channelsPerFrame:bitsPerChannel:reserved:]


_SVXAudioStreamBasicDescriptionMutation : NSObject <SVXAudioStreamBasicDescriptionMutating>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SVXAudioStreamBasicDescriptionMutation .cxx_destruct]
  -[_SVXAudioStreamBasicDescriptionMutation setReserved:]
  -[_SVXAudioStreamBasicDescriptionMutation generate]
  -[_SVXAudioStreamBasicDescriptionMutation init]
  -[_SVXAudioStreamBasicDescriptionMutation setSampleRate:]
  -[_SVXAudioStreamBasicDescriptionMutation setFormatID:]
  -[_SVXAudioStreamBasicDescriptionMutation initWithBaseModel:]
  -[_SVXAudioStreamBasicDescriptionMutation setBytesPerFrame:]
  -[_SVXAudioStreamBasicDescriptionMutation setBitsPerChannel:]
  -[_SVXAudioStreamBasicDescriptionMutation setBytesPerPacket:]
  -[_SVXAudioStreamBasicDescriptionMutation setChannelsPerFrame:]
  -[_SVXAudioStreamBasicDescriptionMutation setFormatFlags:]
  -[_SVXAudioStreamBasicDescriptionMutation setFramesPerPacket:]


SVXDeviceSetupManager : NSObject <SVXModuleInstance, SVXSessionActivationListening, AFMemoryPressureListening>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SVXDeviceSetupManager addListener:]
  -[SVXDeviceSetupManager removeListener:]
  -[SVXDeviceSetupManager .cxx_destruct]
  -[SVXDeviceSetupManager memoryPressureObserver:didChangeFromCondition:toCondition:]
  -[SVXDeviceSetupManager initWithModule:]
  -[SVXDeviceSetupManager getContextWithCompletion:]
  -[SVXDeviceSetupManager prepareForSetupWithContext:completion:]
  -[SVXDeviceSetupManager startWithModuleInstanceProvider:platformDependencies:]
  -[SVXDeviceSetupManager stopWithModuleInstanceProvider:]
  -[SVXDeviceSetupManager sessionManager:didActivateWithContext:]
  -[SVXDeviceSetupManager _prepareForSetupWithContext:completion:]
  -[SVXDeviceSetupManager setContext:forUUID:]
  -[SVXDeviceSetupManager _prepareSiriIntroSceneWithLanguageCode:gender:completion:]
  -[SVXDeviceSetupManager _prepareTryHeySiriCapabilitiesSceneWithLanguageCode:gender:completion:]
  -[SVXDeviceSetupManager _prepareSiriCapabilitiesSceneWithID:languageCode:gender:hint:completion:]
  -[SVXDeviceSetupManager _prepareTryHeySiriMusicSceneWithLanguageCode:gender:completion:]
  -[SVXDeviceSetupManager _prepareTryHeySiriNewsSceneWithLanguageCode:gender:completion:]
  -[SVXDeviceSetupManager _prepareTryHeySiriWeatherSceneWithLanguageCode:gender:completion:]
  -[SVXDeviceSetupManager _setContext:forUUID:]
  -[SVXDeviceSetupManager _updateEffectiveContext]
  -[SVXDeviceSetupManager _setEffectiveContext:]
  -[SVXDeviceSetupManager _evictCachedContents]
  -[SVXDeviceSetupManager _cachedSceneWithID:forLanguageCode:andGender:siriCapabilitiesHint:]
  -[SVXDeviceSetupManager _cacheScene:forLanguageCode:andGender:]


SVXServiceCommandTransaction : NSObject
  // instance methods
  -[SVXServiceCommandTransaction _invalidate]
  -[SVXServiceCommandTransaction dealloc]
  -[SVXServiceCommandTransaction .cxx_destruct]
  -[SVXServiceCommandTransaction _handle]
  -[SVXServiceCommandTransaction invalidate]
  -[SVXServiceCommandTransaction _prepare]
  -[SVXServiceCommandTransaction initWithPerformer:command:handlers:taskTracker:dependencies:completion:]
  -[SVXServiceCommandTransaction addBlockedTransaction:]
  -[SVXServiceCommandTransaction removeBlockingTransaction:]
  -[SVXServiceCommandTransaction handler:didPrepareSuccessfully:context:completion:]
  -[SVXServiceCommandTransaction handler:didHandleWithResult:completion:]
  -[SVXServiceCommandTransaction _addBlockedTransaction:]
  -[SVXServiceCommandTransaction _removeBlockingTransaction:]
  -[SVXServiceCommandTransaction _handler:didPrepareSuccessfully:context:completion:]
  -[SVXServiceCommandTransaction _didPrepareAll]
  -[SVXServiceCommandTransaction _handler:didHandleWithResult:completion:]
  -[SVXServiceCommandTransaction _didHandleAll]
  -[SVXServiceCommandTransaction _unblockDependentTransactions]
  -[SVXServiceCommandTransaction _dispatchCompletionWithResult:]


SVXClientAudioSystemService : NSObject <SVXClientServiceConsuming, SVXClientAudioSystemServicing>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SVXClientAudioSystemServiceDelegate> *delegate

  // instance methods
  -[SVXClientAudioSystemService setDelegate:]
  -[SVXClientAudioSystemService delegate]
  -[SVXClientAudioSystemService .cxx_destruct]
  -[SVXClientAudioSystemService initWithClientServiceProvider:analytics:performer:]
  -[SVXClientAudioSystemService clientServiceDidChange:]
  -[SVXClientAudioSystemService handleAudioSessionWillBecomeActive:activationContext:deactivationContext:]
  -[SVXClientAudioSystemService handleAudioSessionDidBecomeActive:activationContext:deactivationContext:]
  -[SVXClientAudioSystemService handleAudioSessionIDDidChange:]


SVXSpeechSynthesisContext : NSObject
 @property  long long operationType
 @property  SVXSpeechSynthesisRequest *request
 @property  NSString *languageCode
 @property  NSString *voiceName
 @property  long long gender
 @property  unsigned int audioSessionID
 @property  NSDictionary *analyticsContext
 @property  BOOL handledPresynthesizedAudioRequest
 @property  BOOL handledSpeechRequest
 @property  BOOL isStreamingSynthesisRequest
 @property  VSPresynthesizedAudioRequest *presynthesizedAudioRequest
 @property  VSSpeechRequest *speechRequest
 @property  VSInstrumentMetrics *instrumentMetrics
 @property  NSArray *speechWordTimingInfoArray
 @property  <SVXTaskTracking> *taskTracker
 @property  SVXAudioSessionAssertion *audioSessionAssertion

  // instance methods
  -[SVXSpeechSynthesisContext operationType]
  -[SVXSpeechSynthesisContext audioSessionID]
  -[SVXSpeechSynthesisContext gender]
  -[SVXSpeechSynthesisContext dealloc]
  -[SVXSpeechSynthesisContext .cxx_destruct]
  -[SVXSpeechSynthesisContext languageCode]
  -[SVXSpeechSynthesisContext taskTracker]
  -[SVXSpeechSynthesisContext prepare]
  -[SVXSpeechSynthesisContext request]
  -[SVXSpeechSynthesisContext voiceName]
  -[SVXSpeechSynthesisContext speechRequest]
  -[SVXSpeechSynthesisContext setSpeechRequest:]
  -[SVXSpeechSynthesisContext analyticsContext]
  -[SVXSpeechSynthesisContext initWithOperationType:request:languageCode:voiceName:gender:audioSessionID:preparation:audioChunkHandler:finalization:taskTracker:analyticsContext:]
  -[SVXSpeechSynthesisContext handleAudioChunkData:]
  -[SVXSpeechSynthesisContext finalizeWithResultType:utteranceInfo:error:]
  -[SVXSpeechSynthesisContext handledPresynthesizedAudioRequest]
  -[SVXSpeechSynthesisContext setHandledPresynthesizedAudioRequest:]
  -[SVXSpeechSynthesisContext handledSpeechRequest]
  -[SVXSpeechSynthesisContext setHandledSpeechRequest:]
  -[SVXSpeechSynthesisContext isStreamingSynthesisRequest]
  -[SVXSpeechSynthesisContext setIsStreamingSynthesisRequest:]
  -[SVXSpeechSynthesisContext presynthesizedAudioRequest]
  -[SVXSpeechSynthesisContext setPresynthesizedAudioRequest:]
  -[SVXSpeechSynthesisContext instrumentMetrics]
  -[SVXSpeechSynthesisContext setInstrumentMetrics:]
  -[SVXSpeechSynthesisContext speechWordTimingInfoArray]
  -[SVXSpeechSynthesisContext setSpeechWordTimingInfoArray:]
  -[SVXSpeechSynthesisContext audioSessionAssertion]
  -[SVXSpeechSynthesisContext setAudioSessionAssertion:]


AFClockAlarmSnapshot(SiriVOX)
	// instance methods
	-[AFClockAlarmSnapshot(SiriVOX) svx_notifiedFiringAlarms]

AFClockTimerSnapshot(SiriVOX)
	// instance methods
	-[AFClockTimerSnapshot(SiriVOX) svx_notifiedFiringTimers]

AFClientLite(SVXAceCommandHandling)
	// instance methods
	-[AFClientLite(SVXAceCommandHandling) handleAceCommand:reply:]

SAUIAssistantUtteranceView(SiriVOX)
	// instance methods
	-[SAUIAssistantUtteranceView(SiriVOX) svx_parseableExpression]
	-[SAUIAssistantUtteranceView(SiriVOX) svx_applyParsedExpression:]

AFClockTimer(SVXSpeechSynthesis)
	// instance methods
	-[AFClockTimer(SVXSpeechSynthesis) svx_speakableDurationStringWithLanguageCode:gender:]

SAAceView(SiriVOX)
	// instance methods
	-[SAAceView(SiriVOX) svx_parseableExpression]
	-[SAAceView(SiriVOX) svx_applyParsedExpression:]

SASmsSms(SiriVOX)
	// instance methods
	-[SASmsSms(SiriVOX) svx_isDeferredExpressionContextObject]

AceObject(SiriVOX)
	// instance methods
	-[AceObject(SiriVOX) svx_isDeferredExpressionContextObject]

01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAnalytics 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAnalyticsTurnBasedInstrumentationContext 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAssertionContext 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAudioPlaybackRequest 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAudioPowerUpdater 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFAudioPowerXPCProvider 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClientConfiguration 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClientLite 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClockAlarm 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClockAlarmSnapshot 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClockTimer 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFClockTimerSnapshot 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFConnection 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFDeviceContextConnection 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFError 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFFeatureFlags 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFInstanceContext 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFLocalization 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMemoryPressureObserver 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFModesConfiguration 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadCoordinator 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFMyriadGoodnessScoreContext 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFOneArgumentSafetyBlock 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFPreferences 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFQueue 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFRequestInfo 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSafetyBlock 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSetAudioSessionActiveContext 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSettingsConnection 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriActivationListener 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriTether 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeakableUtteranceParser 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeechRecordingAlertBehavior 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeechRecordingAlertPolicy 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeechRequestOptions 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSpeechSynthesisRecord 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFVoiceInfo 
01 00 0100 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFWatchdogTimer 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: AceObject 
01 00 0500 /System/Library/PrivateFrameworks/SiriAnalytics.framework/SiriAnalytics: AssistantSiriAnalytics 
01 00 0a00 /System/Library/PrivateFrameworks/SiriModes.framework/SiriModes: MDDialogTransformer 
01 00 0a00 /System/Library/PrivateFrameworks/SiriModes.framework/SiriModes: MDFixedModeProvider 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMethodSignature 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0c00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSUserActivity 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: RFSchemaRFClientEvent 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: RFSchemaRFClientEventMetadata 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: RFSchemaRFPatternExecuted 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAARAlternativeResultsView 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAAceView 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAAcknowledgeAlert 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAAppInfo 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SACommandFailed 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SACommandIgnored 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SACommandSucceeded 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SADeviceSetupContext 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SADomainObject 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAExecuteOnRemoteRequest 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAPhoneClientCoordinationPhoneCall 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAPhonePlayVoiceMail 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAPhoneVoiceMail 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAPreSynthesizeTTS 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SASetApplicationContext 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SASmsPlayAudio 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SASmsSms 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SASyncAppIdentifyingInfo 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIAddDialogs 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIAddViews 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIAssistantUtteranceView 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUICloseAssistant 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIDelayedActionCancelCommand 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIDelayedActionCommand 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIDisambiguationList 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUILAttachmentExpression 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUILParseExpressions 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUILParseExpressionsCompleted 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUILParseableExpression 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUILParsedAttachmentExpression 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIListenAfterSpeakingBehavior 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIRepeatIt 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUISayIt 
01 00 0400 /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects: SAUIShowRequestHandlingStatus 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaInvocation 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaPNRTextToSpeechRequestReceived 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaSiriResponseContext 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaTextToSpeechBegin 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaTextToSpeechEnd 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUIStateDismissed 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUIStatePresenting 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUIStateTransition 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUUFRSaid 
01 00 0700 /System/Library/PrivateFrameworks/SiriInstrumentation.framework/SiriInstrumentation: SISchemaUUID 
01 00 0b00 /System/Library/PrivateFrameworks/SiriStates.framework/SiriStates: SRSTClient 
01 00 0800 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSLocalizedString 
01 00 0800 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSPresynthesizedAudioRequest 
01 00 0800 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSSpeechRequest 
01 00 0800 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSSpeechSynthesizer 
