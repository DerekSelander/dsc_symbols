|| __DATA.__data _ClientQueueName
|| __DATA.__data _ErrorDomainv2
|| __DATA.__data _kContentPath
|| __DATA.__data _kContentType
|| __DATA.__data _kLocale
|| __DATA.__data _kRegion
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAnalytics
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssertDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssertionDataHandler
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssertionTracker
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssetDownloadAnalytic
|| __DATA.__objc_data _OBJC_CLASS_$_DDSAssetPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_DDSBackgroundActivityScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_DDSContentItem
|| __DATA.__objc_data _OBJC_CLASS_$_DDSContentItemMatcher
|| __DATA.__objc_data _OBJC_CLASS_$_DDSLinguisticAssetQuery
|| __DATA.__objc_data _OBJC_CLASS_$_DDSManager
|| __DATA.__objc_data _OBJC_CLASS_$_DDSMobileAssetv1PredicateAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_DDSRemoteSyncState
|| __DATA.__objc_data _OBJC_CLASS_$_DDSServer
|| __DATA.__objc_data _OBJC_CLASS_$_DDSTimedAnalytic
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAnalytics
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssertDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssertionDataHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssertionTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssetDownloadAnalytic
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSAssetPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSBackgroundActivityScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSContentItem
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSContentItemMatcher
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSLinguisticAssetQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSManager
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSMobileAssetv1PredicateAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSRemoteSyncState
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSServer
|| __DATA.__objc_data _OBJC_METACLASS_$_DDSTimedAnalytic
|| __DATA_CONST.__const _AggregatedDurationAnalyticKey
|| __DATA_CONST.__const _AnalyticKeyPrefix
|| __DATA_CONST.__const _AssetCenterQueueName
|| __DATA_CONST.__const _AssetDownloadAnalytic
|| __DATA_CONST.__const _AssetLocaleKey
|| __DATA_CONST.__const _AssetNameAnalyticKey
|| __DATA_CONST.__const _AssetUpdatedNotificationSuffix
|| __DATA_CONST.__const _CompatibilityVersionAnalyticKey
|| __DATA_CONST.__const _CompatibilityVersionKey
|| __DATA_CONST.__const _ContentVersionAnalyticKey
|| __DATA_CONST.__const _ContentVersionKey
|| __DATA_CONST.__const _DDSAssertionContentFile
|| __DATA_CONST.__const _DDSAssertionContentFolder
|| __DATA_CONST.__const _DDSAttributeAssetLocale
|| __DATA_CONST.__const _DDSAttributeAssetType
|| __DATA_CONST.__const _DDSAttributeAssetVersion
|| __DATA_CONST.__const _DDSAttributeCity
|| __DATA_CONST.__const _DDSAttributeCompatibilityVersion
|| __DATA_CONST.__const _DDSAttributeContentItemLocale
|| __DATA_CONST.__const _DDSAttributeContentType
|| __DATA_CONST.__const _DDSAttributeContentVersion
|| __DATA_CONST.__const _DDSAttributeCountry
|| __DATA_CONST.__const _DDSAttributeKeyContentPath
|| __DATA_CONST.__const _DDSAttributeKeyContentType
|| __DATA_CONST.__const _DDSAttributeKeyContents
|| __DATA_CONST.__const _DDSAttributeKeyInputLayout
|| __DATA_CONST.__const _DDSAttributeKeyLanguage
|| __DATA_CONST.__const _DDSAttributeKeyLocale
|| __DATA_CONST.__const _DDSAttributeKeyLocationCity
|| __DATA_CONST.__const _DDSAttributeKeyLocationCountry
|| __DATA_CONST.__const _DDSAttributeKeyLocationProvince
|| __DATA_CONST.__const _DDSAttributeKeyNeedType
|| __DATA_CONST.__const _DDSAttributeKeyProactiveLocation
|| __DATA_CONST.__const _DDSAttributeKeyRegion
|| __DATA_CONST.__const _DDSAttributeKeyScript
|| __DATA_CONST.__const _DDSAttributeProvince
|| __DATA_CONST.__const _DDSAttributeRegion
|| __DATA_CONST.__const _DDSAttributeUnarchivedSizeInBytes
|| __DATA_CONST.__const _DDSAttributeUnspecified
|| __DATA_CONST.__const _DDSAttributeValueContentTypeLanguageModel
|| __DATA_CONST.__const _DDSAttributeValueContentTypeLanguageModelDelta
|| __DATA_CONST.__const _DDSAttributeValueContentTypeLexicon
|| __DATA_CONST.__const _DDSAttributeValueContentTypeLexiconDelta
|| __DATA_CONST.__const _DDSAttributeValueContentTypePhrases
|| __DATA_CONST.__const _DDSAttributeValueContentTypeSpellChecker
|| __DATA_CONST.__const _DDSAttributeValueContentTypeSpellCheckerDelta
|| __DATA_CONST.__const _DDSAttributeValueNeedTypeDelta
|| __DATA_CONST.__const _DDSAttributeValueNeedTypeOptional
|| __DATA_CONST.__const _DDSAttributeValueNeedTypeRequired
|| __DATA_CONST.__const _DDSAttributeValueProactiveLocationHome
|| __DATA_CONST.__const _DDSAttributeValueProactiveLocationWork
|| __DATA_CONST.__const _DDSFilterValueUnspecified
|| __DATA_CONST.__const _DDSMachServiceName
|| __DATA_CONST.__const _DurationAnalyticKey
|| __DATA_CONST.__const _InstallDateKey
|| __DATA_CONST.__const _LanguageAssetType
|| __DATA_CONST.__const _LinguisticDataAssetType
|| __DATA_CONST.__const _LinguisticDataMobileAssetType
|| __DATA_CONST.__const _ProcessAnalyticKey
|| __DATA_CONST.__const _RetryAnalyticKey
|| __DATA_CONST.__const _ServerQueueName
|| __DATA_CONST.__const _SuccessAnalyticKey
|| __DATA_CONST.__const _UpdateCycleAnalytic
|| __DATA_CONST.__const _UpdateCycleAnalyticIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAssetCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAssetObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAssetQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAssetQueryResultCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSAttributeFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSLinguisticAttributeFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSMobileAssetv2Provider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_DDSMobileAssetv2QueryAdapter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAssetCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAssetObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAssetQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAssetQueryResultCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSAttributeFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSLinguisticAttributeFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSMobileAssetv2Provider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_DDSMobileAssetv2QueryAdapter
|| __TEXT.__const _AllowCellularOverride
|| __TEXT.__const _AllowExpensiveAccessOverride
|| __TEXT.__const _DataDeliveryServicesVersionNumber
|| __TEXT.__const _DataDeliveryServicesVersionString
|| __TEXT.__const _DesiredRegularUpdateDayIncrement
|| __TEXT.__const _DesiredRegularUpdateWindowStart
|| __TEXT.__const _DesiredUpdateWindowSize
|| __TEXT.__text _DDSGetPreferenceIntForKey
|| __TEXT.__text _DDSGetPreferenceObjectForKey
|| __TEXT.__text _DDSObjectsAreEqualOrNil
|| __TEXT.__text _DDSSetPreferenceObjectForKey
|| __TEXT.__text _DDS_BUILD_VERSION_STRING
|| __TEXT.__text _DDS_IS_INTERNAL_INSTALL
|| __TEXT.__text _DDS_LOG_REDACTED
|| __TEXT.__text _DDS_STRING_FROM_DATE
|| __TEXT.__text _DDS_USE_MA_V2
|| __TEXT.__text _DefaultLog
|| __TEXT.__text _QueryLog
|| __TEXT.__text _UpdateLog
|| __TEXT.__text __DDSBeginMocking
|| __TEXT.__text __DDSBeginMockingServices
|| __TEXT.__text __DDSEndMocking
|| __TEXT.__text __DDSEndMockingServices
|| __TEXT.__text __DDSIsMocking
|| __TEXT.__text __DDSIsMockingServices
|| __TEXT.__text _assetUpdatedNotificationCallback
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ Foundation: _NSHomeDirectory
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSBackgroundActivityScheduler
__ Foundation: _OBJC_CLASS_$_NSCompoundPredicate
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ MobileAsset: _ASAttributeCompatibilityVersion
__ MobileAsset: _MACleanV1Repository
__ MobileAsset: _OBJC_CLASS_$_MAAsset
__ MobileAsset: _OBJC_CLASS_$_MAAssetQuery
__ MobileAsset: _OBJC_CLASS_$_MADownloadOptions
__ libMobileGestalt.dylib: _MGCopyAnswerWithError
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _XPC_ACTIVITY_DELAY
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___exp10
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
DDSServer : NSObject <NSXPCListenerDelegate>
 @property  <DDSManaging> *manager
 @property  NSXPCListener *listener
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableSet *clientConnections
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[DDSServer sharedInstance]
  +[DDSServer interface]

  // instance methods
  -[DDSServer clientConnections]
  -[DDSServer .cxx_destruct]
  -[DDSServer handleEndedConnection:]
  -[DDSServer initWithManager:]
  -[DDSServer init]
  -[DDSServer listener]
  -[DDSServer manager]
  -[DDSServer queue]
  -[DDSServer dealloc]
  -[DDSServer listener:shouldAcceptNewConnection:]


DDSLinguisticAttributeFilter : DDSAttributeFilter
  // instance methods
  -[DDSLinguisticAttributeFilter addRegionWithCountry:province:city:]
  -[DDSLinguisticAttributeFilter addContentType:]
  -[DDSLinguisticAttributeFilter addContentItemLocale:]
  -[DDSLinguisticAttributeFilter addAssetLocale:]


DDSAssetQueryResultCache : NSObject <DDSCacheDelegate, DDSAssetQueryResultCaching>
 @property  DDSCache *cache
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DDSAssetQueryResultCache clearCache]
  -[DDSAssetQueryResultCache .cxx_destruct]
  -[DDSAssetQueryResultCache cache]
  -[DDSAssetQueryResultCache init]
  -[DDSAssetQueryResultCache cache:willEvictObjects:]
  -[DDSAssetQueryResultCache cachedAssetsForQuery:]
  -[DDSAssetQueryResultCache cacheAssets:forQuery:]


DDSAssetCenter : NSObject <DDSManagingDelegate, DDSAssetObservingDelegate>
 @property  <DDSAssetProviding> *provider
 @property  <DDSManaging> *managerInterface
 @property  NSMutableSet *delegates
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <DDSAssetObserving> *assetObserver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[DDSAssetCenter sharedInstance]

  // instance methods
  -[DDSAssetCenter triggerUpdate]
  -[DDSAssetCenter triggerDump]
  -[DDSAssetCenter unregisterDelegate:]
  -[DDSAssetCenter serverDidUpdateAssetsWithType:]
  -[DDSAssetCenter .cxx_destruct]
  -[DDSAssetCenter assertionIDsForClientID:]
  -[DDSAssetCenter initWithProvider:managerInterface:]
  -[DDSAssetCenter delegates]
  -[DDSAssetCenter registerDelegate:]
  -[DDSAssetCenter contentItemsFromAssets:matchingFilter:]
  -[DDSAssetCenter init]
  -[DDSAssetCenter allContentItemsMatchingQuery:error:]
  -[DDSAssetCenter managerInterface]
  -[DDSAssetCenter addAssertionForAssetsWithQuery:policy:assertionID:clientID:]
  -[DDSAssetCenter assetsForQuery:error:]
  -[DDSAssetCenter removeAssertionWithIdentifier:]
  -[DDSAssetCenter queue]
  -[DDSAssetCenter assetObserver]
  -[DDSAssetCenter provider]


DDSMobileAssetv2QueryAdapter : NSObject
  // class methods
  +[DDSMobileAssetv2QueryAdapter stringFromInteger:]
  +[DDSMobileAssetv2QueryAdapter maAssetQueryForddsAssetQuery:compatiblilityVersion:internalInstall:]


DDSAttributeFilter : NSObject <NSSecureCoding>
 @property  NSMutableDictionary *filters

  // class methods
  +[DDSAttributeFilter hashObject:]
  +[DDSAttributeFilter supportsSecureCoding]
  +[DDSAttributeFilter hashSet:]
  +[DDSAttributeFilter hashDictionary:]
  +[DDSAttributeFilter attributeFilter]
  +[DDSAttributeFilter attributeFilterWithDictionary:]

  // instance methods
  -[DDSAttributeFilter removeAllowedValues:forKey:]
  -[DDSAttributeFilter entriesMatchingAttributes:]
  -[DDSAttributeFilter setFilters:]
  -[DDSAttributeFilter isEqualToQueryFilter:]
  -[DDSAttributeFilter addEntriesFromFilter:]
  -[DDSAttributeFilter _setForKey:]
  -[DDSAttributeFilter initWithCoder:]
  -[DDSAttributeFilter removeAllowedValue:forKey:]
  -[DDSAttributeFilter filters]
  -[DDSAttributeFilter allowedValuesForKey:]
  -[DDSAttributeFilter addAllowedValue:forKey:]
  -[DDSAttributeFilter .cxx_destruct]
  -[DDSAttributeFilter doesContainAttributes:]
  -[DDSAttributeFilter addAllowedValues:forKey:]
  -[DDSAttributeFilter enumerateAllowedValuesAndKeys:]
  -[DDSAttributeFilter dumpDescription]
  -[DDSAttributeFilter init]
  -[DDSAttributeFilter isEqual:]
  -[DDSAttributeFilter initWithDictionary:]
  -[DDSAttributeFilter encodeWithCoder:]


DDSContentItemMatcher : NSObject
  // class methods
  +[DDSContentItemMatcher shouldLenientlyMatchWithContentItemsForRegion:]
  +[DDSContentItemMatcher _anyStringIn:matches:acceptUnspecifiedValue:]
  +[DDSContentItemMatcher _anyDictionaryIn:matches:shouldLenientlyMatch:]
  +[DDSContentItemMatcher _string:matches:acceptUnspecifiedValue:]
  +[DDSContentItemMatcher _dictionary:matches:acceptUnspecifiedAttribute:lenientMatch:]
  +[DDSContentItemMatcher assetContentItemsMatching:contentItems:parentAsset:]


DDSContentItem : NSObject
 @property  DDSAsset *parentAsset
 @property  NSDictionary *contents
 @property  NSURL *path
 @property  NSDictionary *region
 @property  NSString *type
 @property  NSString *fileName
 @property  NSString *locale

  // instance methods
  -[DDSContentItem region]
  -[DDSContentItem fileName]
  -[DDSContentItem contents]
  -[DDSContentItem .cxx_destruct]
  -[DDSContentItem setContents:]
  -[DDSContentItem init]
  -[DDSContentItem isEqual:]
  -[DDSContentItem locale]
  -[DDSContentItem type]
  -[DDSContentItem path]
  -[DDSContentItem initWithParentAsset:contents:]
  -[DDSContentItem parentAsset]
  -[DDSContentItem isEqualToContentItem:]
  -[DDSContentItem setParentAsset:]


DDSAsset : NSObject
 @property  MAAsset *maAsset
 @property  NSString *debuggingID
 @property  NSString *uniqueIdentifier
 @property  NSDictionary *attributes
 @property  unsigned long compatibilityVersion
 @property  unsigned long contentVersion
 @property  NSURL *localURL
 @property  unsigned long assetState
 @property  NSString *locale
 @property  NSString *dataType
 @property  NSString *assetType
 @property  NSString *installDate
 @property  NSString *shortName
 @property  NSString *assetUUID

  // class methods
  +[DDSAsset assetWithMAAsset:]
  +[DDSAsset uniqueIdentifierForMAAsset:]
  +[DDSAsset asset]
  +[DDSAsset debuggingIDsForAssets:]

  // instance methods
  -[DDSAsset assetUUID]
  -[DDSAsset setUniqueIdentifier:]
  -[DDSAsset assetType]
  -[DDSAsset shortName]
  -[DDSAsset uniqueIdentifier]
  -[DDSAsset installDate]
  -[DDSAsset .cxx_destruct]
  -[DDSAsset localURL]
  -[DDSAsset compatibilityVersion]
  -[DDSAsset init]
  -[DDSAsset dataType]
  -[DDSAsset isEqual:]
  -[DDSAsset contentVersion]
  -[DDSAsset locale]
  -[DDSAsset maAsset]
  -[DDSAsset attributes]
  -[DDSAsset assetState]
  -[DDSAsset setMaAsset:]
  -[DDSAsset debuggingID]
  -[DDSAsset isEqualToAsset:]
  -[DDSAsset _mergeAttributes:]
  -[DDSAsset setDebuggingID:]


DDSBackgroundActivityScheduler : NSObject
 @property  NSMutableDictionary *schedulerByIdentifier
 @property  <DDSBackgroundActivitySchedulerDelegate> *delegate

  // instance methods
  -[DDSBackgroundActivityScheduler cancelActivityWithIdentifier:]
  -[DDSBackgroundActivityScheduler .cxx_destruct]
  -[DDSBackgroundActivityScheduler setDelegate:]
  -[DDSBackgroundActivityScheduler init]
  -[DDSBackgroundActivityScheduler delegate]
  -[DDSBackgroundActivityScheduler setSchedulerByIdentifier:]
  -[DDSBackgroundActivityScheduler schedulerByIdentifier]
  -[DDSBackgroundActivityScheduler scheduleActivityWithIdentifier:interval:tolerance:]


DDSAssertion : NSObject <NSSecureCoding, NSCopying>
 @property  NSMutableSet *descriptors
 @property  NSDate *lastUpdated
 @property  DDSAssetQuery *query
 @property  DDSAssetPolicy *policy
 @property  NSSet *assertionIdentifiers
 @property  NSSet *clientIdentifiers

  // class methods
  +[DDSAssertion supportsSecureCoding]

  // instance methods
  -[DDSAssertion clientIdentifiers]
  -[DDSAssertion initWithQuery:]
  -[DDSAssertion initWithCoder:]
  -[DDSAssertion query]
  -[DDSAssertion invalidateDescription]
  -[DDSAssertion descriptors]
  -[DDSAssertion setDescriptors:]
  -[DDSAssertion .cxx_destruct]
  -[DDSAssertion assertionIDsForClientID:]
  -[DDSAssertion dumpDescription]
  -[DDSAssertion removeDescriptorWithAssertionID:]
  -[DDSAssertion policy]
  -[DDSAssertion init]
  -[DDSAssertion setLastUpdated:]
  -[DDSAssertion isEqual:]
  -[DDSAssertion lastUpdated]
  -[DDSAssertion isEqualToAssertion:]
  -[DDSAssertion addDescriptorWithAssertionID:clientID:policy:]
  -[DDSAssertion assertionIdentifiers]
  -[DDSAssertion copyWithZone:]
  -[DDSAssertion removeDescriptorWithClientID:]
  -[DDSAssertion encodeWithCoder:]


DDSRemoteSyncState : NSObject <DDSBackgroundActivitySchedulerDelegate>
 @property  NSDate *date
 @property  long long syncStatus
 @property  unsigned long attemptCount
 @property  NSString *buildVersion
 @property  DDSBackgroundActivityScheduler *scheduler
 @property  <DDSRemoteSyncStateDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[DDSRemoteSyncState buildVersionString]
  +[DDSRemoteSyncState timeIntervalUntilNextRegularUpdate]

  // instance methods
  -[DDSRemoteSyncState setBuildVersion:]
  -[DDSRemoteSyncState resetState]
  -[DDSRemoteSyncState syncStatus]
  -[DDSRemoteSyncState saveState]
  -[DDSRemoteSyncState setSyncStatus:]
  -[DDSRemoteSyncState buildVersion]
  -[DDSRemoteSyncState setScheduler:]
  -[DDSRemoteSyncState loadState]
  -[DDSRemoteSyncState .cxx_destruct]
  -[DDSRemoteSyncState scheduler]
  -[DDSRemoteSyncState setDelegate:]
  -[DDSRemoteSyncState init]
  -[DDSRemoteSyncState setAttemptCount:]
  -[DDSRemoteSyncState initWithDelegate:]
  -[DDSRemoteSyncState setDate:]
  -[DDSRemoteSyncState delegate]
  -[DDSRemoteSyncState attemptCount]
  -[DDSRemoteSyncState requestUpdate]
  -[DDSRemoteSyncState date]
  -[DDSRemoteSyncState performScheduledActivityWithIdentifier:]
  -[DDSRemoteSyncState shouldRequestCompleteRefresh]
  -[DDSRemoteSyncState requestCompleteRefresh]
  -[DDSRemoteSyncState shouldInitiateRegularUpdateCycle]
  -[DDSRemoteSyncState scheduleRegularUpdate]
  -[DDSRemoteSyncState timeBetweenSyncs]
  -[DDSRemoteSyncState nextUpdateTimeIntervalForAttemptCount:]
  -[DDSRemoteSyncState scheduleRetry]
  -[DDSRemoteSyncState requestRetry]
  -[DDSRemoteSyncState beganUpdateCycle]
  -[DDSRemoteSyncState completedUpdateCycleWithError:]


DDSAssetQuery : NSObject <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *assetType
 @property  DDSAttributeFilter *filter
 @property  NSString *cacheKey
 @property  BOOL localOnly
 @property  BOOL installedOnly
 @property  BOOL latestOnly
 @property  BOOL cachedOnly

  // class methods
  +[DDSAssetQuery supportsSecureCoding]

  // instance methods
  -[DDSAssetQuery installedOnly]
  -[DDSAssetQuery setLocalOnly:]
  -[DDSAssetQuery setLatestOnly:]
  -[DDSAssetQuery assetType]
  -[DDSAssetQuery latestOnly]
  -[DDSAssetQuery initWithCoder:]
  -[DDSAssetQuery initWithAssetType:filter:localOnly:installedOnly:latestOnly:cachedOnly:]
  -[DDSAssetQuery invalidateDescription]
  -[DDSAssetQuery cacheKey]
  -[DDSAssetQuery initWithAssetType:filter:]
  -[DDSAssetQuery assetType:]
  -[DDSAssetQuery localOnly]
  -[DDSAssetQuery isEqualToAssetQuery:]
  -[DDSAssetQuery .cxx_destruct]
  -[DDSAssetQuery cachedOnly]
  -[DDSAssetQuery setInstalledOnly:]
  -[DDSAssetQuery setCachedOnly:]
  -[DDSAssetQuery dumpDescription]
  -[DDSAssetQuery init]
  -[DDSAssetQuery isEqual:]
  -[DDSAssetQuery filter]
  -[DDSAssetQuery queue]
  -[DDSAssetQuery copyWithZone:]
  -[DDSAssetQuery encodeWithCoder:]


DDSInterface : NSObject <DDSManaging, DDSManagingDelegate>
 @property  <DDSManaging> *serverOverride
 @property  NSXPCConnection *remoteServer
 @property  DDSInterface *sharedInstance
 @property  <DDSManagingDelegate> *mDelegate
 @property  NSObject<OS_dispatch_queue> *connectionUsageQueue
 @property  <DDSManagingDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[DDSInterface sharedInstance]
  +[DDSInterface interface]
  +[DDSInterface xpcConnectionOptionsForServer]

  // instance methods
  -[DDSInterface setRemoteServer:]
  -[DDSInterface removeAssertionWithID:]
  -[DDSInterface addAssertionForQuery:policy:assertionID:clientID:]
  -[DDSInterface triggerUpdate]
  -[DDSInterface createConnectionIfNecessary]
  -[DDSInterface remoteServer]
  -[DDSInterface sharedInstance]
  -[DDSInterface triggerDump]
  -[DDSInterface assertionIDsForClientID:reply:]
  -[DDSInterface .cxx_destruct]
  -[DDSInterface setMDelegate:]
  -[DDSInterface setDelegate:]
  -[DDSInterface teardownXPCConnection]
  -[DDSInterface serverOverride]
  -[DDSInterface syncServer]
  -[DDSInterface init]
  -[DDSInterface mDelegate]
  -[DDSInterface setServerOverride:]
  -[DDSInterface server]
  -[DDSInterface delegate]
  -[DDSInterface serviceObjectProxy]
  -[DDSInterface dealloc]
  -[DDSInterface connectionUsageQueue]
  -[DDSInterface syncServiceObjectProxy]


DDSAnalytics : NSObject
 @property  NSMutableDictionary *analyticByIdentifier
 @property  NSObject<OS_dispatch_queue> *analyticQueue

  // class methods
  +[DDSAnalytics sharedInstance]
  +[DDSAnalytics roundNumber:toSignificantDigits:]
  +[DDSAnalytics isInteger:]
  +[DDSAnalytics assetDownloadDurationBuckets]

  // instance methods
  -[DDSAnalytics .cxx_destruct]
  -[DDSAnalytics processName]
  -[DDSAnalytics init]
  -[DDSAnalytics analyticQueue]
  -[DDSAnalytics analyticByIdentifier]
  -[DDSAnalytics stringForAction:]
  -[DDSAnalytics reportAssetDownloadAnalytic:]
  -[DDSAnalytics bucketForValue:fromBuckets:]
  -[DDSAnalytics cancelRecordingForAsset:]
  -[DDSAnalytics recordAssetAction:forAsset:]
  -[DDSAnalytics recordUpdateCycleState:]
  -[DDSAnalytics reportUpdateCycleAnalytic:]
  -[DDSAnalytics dumpAssetLogWithAssertions:installedAssets:]


DDSAssetObserver : NSObject <DDSAssetObserving>
 @property  <DDSAssetObservingDelegate> *delegate
 @property  NSSet *typesToObserve
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DDSAssetObserver .cxx_destruct]
  -[DDSAssetObserver setDelegate:]
  -[DDSAssetObserver beginObservingTypes:]
  -[DDSAssetObserver setTypesToObserve:]
  -[DDSAssetObserver endObservingTypes:]
  -[DDSAssetObserver delegate]
  -[DDSAssetObserver observeAssetTypes:]
  -[DDSAssetObserver dealloc]
  -[DDSAssetObserver typesToObserve]
  -[DDSAssetObserver notifyObserversAssetsUpdatedForType:]


DDSMobileAssetv1PredicateAdapter : NSObject
  // class methods
  +[DDSMobileAssetv1PredicateAdapter predicateForQuery:compatibilityVersion:internalInstall:]
  +[DDSMobileAssetv1PredicateAdapter predicateForKey:matchingAnyStringIn:]
  +[DDSMobileAssetv1PredicateAdapter predicateForKey:matchingAnyDictionaryIn:acceptUnspecifiedValue:acceptUnspecifiedAttribute:lenientMatch:]
  +[DDSMobileAssetv1PredicateAdapter compatibilityPredicateForCompatabilityVersion:internalInstall:]
  +[DDSMobileAssetv1PredicateAdapter regionKeys]
  +[DDSMobileAssetv1PredicateAdapter predicateForKey:matchingString:]
  +[DDSMobileAssetv1PredicateAdapter predicateForAssetQuery:compatiblilityVersion:]
  +[DDSMobileAssetv1PredicateAdapter extractRegionDictFromFilter:]


DDSLinguisticAssetQuery : DDSAssetQuery
 @property  DDSLinguisticAttributeFilter *filter

  // instance methods
  -[DDSLinguisticAssetQuery addRegionWithCountry:province:city:]
  -[DDSLinguisticAssetQuery initWithLanguageIdentifier:]


DDSTimedAnalytic : NSObject
 @property  unsigned long retries
 @property  BOOL success
 @property  double startTime
 @property  double endTime
 @property  int lastAction
 @property  NSString *identifier
 @property  unsigned long durationInSec

  // instance methods
  -[DDSTimedAnalytic setSuccess:]
  -[DDSTimedAnalytic success]
  -[DDSTimedAnalytic endTime]
  -[DDSTimedAnalytic setStartTime:]
  -[DDSTimedAnalytic initWithIdentifier:]
  -[DDSTimedAnalytic setEndTime:]
  -[DDSTimedAnalytic .cxx_destruct]
  -[DDSTimedAnalytic setRetries:]
  -[DDSTimedAnalytic init]
  -[DDSTimedAnalytic identifier]
  -[DDSTimedAnalytic startTime]
  -[DDSTimedAnalytic retries]
  -[DDSTimedAnalytic updateWithAction:]
  -[DDSTimedAnalytic durationInSec]
  -[DDSTimedAnalytic lastAction]
  -[DDSTimedAnalytic setLastAction:]


DDSAssetPolicy : NSObject <NSSecureCoding>
 @property  NSDateComponents *idleUsageEvictionPeriod
 @property  long long preferredDownloadFrequency
 @property  BOOL downloadOverCellular
 @property  BOOL downloadWithoutPower
 @property  NSSet *notificationDownloadTriggers
 @property  NSString *downloadCompletionNotification

  // class methods
  +[DDSAssetPolicy supportsSecureCoding]
  +[DDSAssetPolicy assetPolicy]

  // instance methods
  -[DDSAssetPolicy initWithCoder:]
  -[DDSAssetPolicy isEqualToAssetPolicy:]
  -[DDSAssetPolicy downloadOverCellular]
  -[DDSAssetPolicy setDownloadCompletionNotification:]
  -[DDSAssetPolicy setPreferredDownloadFrequency:]
  -[DDSAssetPolicy .cxx_destruct]
  -[DDSAssetPolicy dumpDescription]
  -[DDSAssetPolicy init]
  -[DDSAssetPolicy downloadCompletionNotification]
  -[DDSAssetPolicy isEqual:]
  -[DDSAssetPolicy stringForAssetDownloadFrequency:]
  -[DDSAssetPolicy setDownloadWithoutPower:]
  -[DDSAssetPolicy setNotificationDownloadTriggers:]
  -[DDSAssetPolicy setIdleUsageEvictionPeriod:]
  -[DDSAssetPolicy notificationDownloadTriggers]
  -[DDSAssetPolicy idleUsageEvictionPeriod]
  -[DDSAssetPolicy preferredDownloadFrequency]
  -[DDSAssetPolicy downloadWithoutPower]
  -[DDSAssetPolicy setDownloadOverCellular:]
  -[DDSAssetPolicy encodeWithCoder:]


DDSAssetDownloadAnalytic : DDSTimedAnalytic
 @property  DDSAsset *asset

  // instance methods
  -[DDSAssetDownloadAnalytic initWithAsset:]
  -[DDSAssetDownloadAnalytic .cxx_destruct]
  -[DDSAssetDownloadAnalytic setAsset:]
  -[DDSAssetDownloadAnalytic init]
  -[DDSAssetDownloadAnalytic asset]


DDSMobileAssetv2Provider : NSObject <DDSAssetProviding>
 @property  NSMutableDictionary *remainingAssetsByQueryId
 @property  BOOL encounteredAssertionUpdateError
 @property  <DDSAssetQueryResultCaching> *assetQueryResultsCache
 @property  NSMutableDictionary *downloadStateByAssetID
 @property  <DDSAssetProvidingDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[DDSMobileAssetv2Provider latestBetweenAssetA:AssetB:]
  +[DDSMobileAssetv2Provider latestAssetsOnlyFromAssets:]
  +[DDSMobileAssetv2Provider supportedCompatibilityVersion]

  // instance methods
  -[DDSMobileAssetv2Provider didCompleteDownloadForAssertion:error:]
  -[DDSMobileAssetv2Provider shouldMatchAttributeValue:givenValue:]
  -[DDSMobileAssetv2Provider serverDidUpdateAssetsWithType:]
  -[DDSMobileAssetv2Provider setEncounteredAssertionUpdateError:]
  -[DDSMobileAssetv2Provider remainingAssetsByQueryId]
  -[DDSMobileAssetv2Provider .cxx_destruct]
  -[DDSMobileAssetv2Provider removeOldAssetsForAssertions:]
  -[DDSMobileAssetv2Provider setDelegate:]
  -[DDSMobileAssetv2Provider contentItemsFromAssets:matchingFilter:]
  -[DDSMobileAssetv2Provider removeAssets:]
  -[DDSMobileAssetv2Provider init]
  -[DDSMobileAssetv2Provider allContentItemsMatchingQuery:error:]
  -[DDSMobileAssetv2Provider beginDownloadForAssertions:discretionaryDownload:]
  -[DDSMobileAssetv2Provider downloadStateByAssetID]
  -[DDSMobileAssetv2Provider beginDownloadForAssertion:discretionaryDownload:handler:]
  -[DDSMobileAssetv2Provider updateCatalogForAssetTypes:discretionaryDownload:withCompletion:]
  -[DDSMobileAssetv2Provider didChangeDownloadState:forAsset:]
  -[DDSMobileAssetv2Provider removeAssetsForAssertions:]
  -[DDSMobileAssetv2Provider delegate]
  -[DDSMobileAssetv2Provider assetsForQuery:errorPtr:]
  -[DDSMobileAssetv2Provider encounteredAssertionUpdateError]
  -[DDSMobileAssetv2Provider assetQueryResultsCache]
  -[DDSMobileAssetv2Provider didUpdateCatalogWithError:]
  -[DDSMobileAssetv2Provider performAssetsForQuery:errorPtr:]
  -[DDSMobileAssetv2Provider downloadOptionsForCatalogWithType:discretionaryDownload:]
  -[DDSMobileAssetv2Provider beginDownloadForAssets:withPolicy:discretionaryDownload:error:handler:]
  -[DDSMobileAssetv2Provider setDownloadStateByAssetID:]
  -[DDSMobileAssetv2Provider setAssetQueryResultsCache:]
  -[DDSMobileAssetv2Provider downloadOptionsForPolicy:discretionaryDownload:]


DDSAssertDescriptor : NSObject <NSSecureCoding>
 @property  NSString *clientIdentifier
 @property  NSString *assertionIdentifier
 @property  DDSAssetPolicy *policy

  // class methods
  +[DDSAssertDescriptor supportsSecureCoding]

  // instance methods
  -[DDSAssertDescriptor initWithPolicy:assertionID:clientID:]
  -[DDSAssertDescriptor isEqualToDescriptor:]
  -[DDSAssertDescriptor initWithCoder:]
  -[DDSAssertDescriptor assertionIdentifier]
  -[DDSAssertDescriptor setAssertionIdentifier:]
  -[DDSAssertDescriptor .cxx_destruct]
  -[DDSAssertDescriptor setPolicy:]
  -[DDSAssertDescriptor dumpDescription]
  -[DDSAssertDescriptor policy]
  -[DDSAssertDescriptor init]
  -[DDSAssertDescriptor isEqual:]
  -[DDSAssertDescriptor clientIdentifier]
  -[DDSAssertDescriptor encodeWithCoder:]
  -[DDSAssertDescriptor setClientIdentifier:]


DDSCache : NSObject
 @property  NSMutableDictionary *cache
 @property  NSMutableOrderedSet *order
 @property  unsigned long maxCount
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <DDSCacheDelegate> *delegate

  // instance methods
  -[DDSCache clearCache]
  -[DDSCache maxCount]
  -[DDSCache objectForKey:]
  -[DDSCache .cxx_destruct]
  -[DDSCache cache]
  -[DDSCache setDelegate:]
  -[DDSCache initWithMaxCount:]
  -[DDSCache delegate]
  -[DDSCache queue]
  -[DDSCache order]
  -[DDSCache cacheObject:forKey:]


DDSAssertionDataHandler : NSObject <DDSAssertionDataHandling>
  // instance methods
  -[DDSAssertionDataHandler loadAssertionData]
  -[DDSAssertionDataHandler saveAssertionData:]
  -[DDSAssertionDataHandler assertionContentDirectory]
  -[DDSAssertionDataHandler assertionContentURL]


DDSAssertionTracker : NSObject <DDSAssetTracking>
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableArray *trackedAssertions
 @property  NSMutableDictionary *trackedAssertionSets
 @property  <DDSAssertionDataHandling> *dataHandler
 @property  <DDSAssetTrackingDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[DDSAssertionTracker removeAssertionWithID:]
  -[DDSAssertionTracker addAssertionForQuery:policy:assertionID:clientID:]
  -[DDSAssertionTracker .cxx_destruct]
  -[DDSAssertionTracker assertionIDsForClientID:]
  -[DDSAssertionTracker dataHandler]
  -[DDSAssertionTracker assertionDueForUpdateFrom:SinceDate:]
  -[DDSAssertionTracker trackedAssertions]
  -[DDSAssertionTracker setDelegate:]
  -[DDSAssertionTracker init]
  -[DDSAssertionTracker initWithDataHandler:]
  -[DDSAssertionTracker didUpdateAssertion:atDate:]
  -[DDSAssertionTracker trackedAssertionSets]
  -[DDSAssertionTracker delegate]
  -[DDSAssertionTracker queue]
  -[DDSAssertionTracker resetAssertionDueDates]
  -[DDSAssertionTracker trackedAssetTypes]
  -[DDSAssertionTracker allAssertions]
  -[DDSAssertionTracker intervalForDownloadFrequency:]
  -[DDSAssertionTracker assertionDueForUpdateSinceDate:]


DDSManager : NSObject <DDSAssetProvidingDelegate, DDSAssetTrackingDelegate, DDSRemoteSyncStateDelegate, DDSAssetObservingDelegate, DDSManaging>
 @property  <DDSAssetTracking> *tracker
 @property  <DDSAssetProviding> *provider
 @property  <DDSAssetObserving> *assetObserver
 @property  DDSScheduledTimer *timer
 @property  DDSRemoteSyncState *remoteSyncState
 @property  NSMutableSet *pendingAssertionsToUpdate
 @property  NSObject<OS_dispatch_queue> *pendingAssertionsQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <DDSManagingDelegate> *delegate

  // instance methods
  -[DDSManager removeAssertionWithID:]
  -[DDSManager addAssertionForQuery:policy:assertionID:clientID:]
  -[DDSManager triggerUpdate]
  -[DDSManager triggerDump]
  -[DDSManager assertionIDsForClientID:reply:]
  -[DDSManager didStartUpdateCycle]
  -[DDSManager didCompleteDownloadForAssertion:error:]
  -[DDSManager serverDidUpdateAssetsWithType:]
  -[DDSManager handleRemovedAssertions:]
  -[DDSManager deleteV1AssetsIfNecessary]
  -[DDSManager didBeginUpdateCatalog]
  -[DDSManager willRetryUpdateCycle]
  -[DDSManager .cxx_destruct]
  -[DDSManager didEndUpdateCycleWithError:]
  -[DDSManager setDelegate:]
  -[DDSManager remoteSyncStateRequestsUpdate]
  -[DDSManager init]
  -[DDSManager setPendingAssertionsToUpdate:]
  -[DDSManager timer]
  -[DDSManager handleNewAssertions:]
  -[DDSManager remoteSyncState]
  -[DDSManager didCompleteDownloadForAssertions:error:]
  -[DDSManager pendingAssertionsQueue]
  -[DDSManager didChangeDownloadState:forAsset:]
  -[DDSManager remoteSyncStateRequestsReset]
  -[DDSManager remoteSyncStateRequestsRetry]
  -[DDSManager delegate]
  -[DDSManager assetObserver]
  -[DDSManager provider]
  -[DDSManager didUpdateCatalogWithError:]
  -[DDSManager initWithProvider:tracker:]
  -[DDSManager tracker]
  -[DDSManager beginUpdateCycleForced:discretionaryDownload:]
  -[DDSManager pendingAssertionsToUpdate]


01 00 0500 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAsset 
01 00 0500 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MAAssetQuery 
01 00 0500 /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset: MADownloadOptions 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBackgroundActivityScheduler 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCompoundPredicate 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0700 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
