|| __DATA.__common _sParticipatesInSTS
|| __DATA.__data _AVMediaStateWasPurgedNotification
|| __DATA.__data _AVOutputDeviceHeadTrackedSpatialAudioModeAlways
|| __DATA.__data _AVOutputDeviceHeadTrackedSpatialAudioModeAutomatic
|| __DATA.__data _AVOutputDeviceHeadTrackedSpatialAudioModeMultichannelOnly
|| __DATA.__data _AVOutputDeviceHeadTrackedSpatialAudioModeNever
|| __DATA.__data _kAVFCoreSCMVersion
|| __DATA.__objc_data _OBJC_CLASS_$_AVAggregateAssetDownloadTask
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetDownloadContentConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetDownloadSession
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetDownloadStorageManagementPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetDownloadStorageManager
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetExportSession
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetFragment
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetImageGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetPlaybackAssistant
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReader
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderAudioMixOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderOutputMetadataAdaptor
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderSampleReferenceOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderTrackOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetReaderVideoCompositionOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceLoaderRemoteHandlerContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceLoadingContentInformationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceLoadingDataRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceLoadingRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceLoadingRequestor
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetResourceRenewalRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetSegmentReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetSegmentReportSampleInformation
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetSegmentTrackReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetTrackGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetTrackSegment
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetVariantAudioAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetVariantAudioRenditionSpecificAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetVariantQualifier
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetVariantVideoAttributes
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriter
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriterInput
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriterInputGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriterInputMetadataAdaptor
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriterInputPassDescription
|| __DATA.__objc_data _OBJC_CLASS_$_AVAssetWriterInputPixelBufferAdaptor
|| __DATA.__objc_data _OBJC_CLASS_$_AVAsynchronousCIImageFilteringRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAsynchronousVideoCompositionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioMix
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioMixEffectParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioMixInputParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioMixSweepFilterEffectParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVAudioOutputSettings
|| __DATA.__objc_data _OBJC_CLASS_$_AVChapterMetadataItem
|| __DATA.__objc_data _OBJC_CLASS_$_AVCompositionTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVCompositionTrackFormatDescriptionReplacement
|| __DATA.__objc_data _OBJC_CLASS_$_AVCompositionTrackSegment
|| __DATA.__objc_data _OBJC_CLASS_$_AVContentKey
|| __DATA.__objc_data _OBJC_CLASS_$_AVContentKeyReportGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVContentKeyRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVContentKeyResponse
|| __DATA.__objc_data _OBJC_CLASS_$_AVContentKeySpecifier
|| __DATA.__objc_data _OBJC_CLASS_$_AVCoordinatedPlaybackParticipant
|| __DATA.__objc_data _OBJC_CLASS_$_AVCoordinatedPlaybackSuspension
|| __DATA.__objc_data _OBJC_CLASS_$_AVDateRangeMetadataGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinatorBufferingCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinatorPauseCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinatorPlayCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinatorPlaybackControlCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AVDelegatingPlaybackCoordinatorSeekCommand
|| __DATA.__objc_data _OBJC_CLASS_$_AVDisplayCriteria
|| __DATA.__objc_data _OBJC_CLASS_$_AVEventWaiter
|| __DATA.__objc_data _OBJC_CLASS_$_AVExternalDeviceHID
|| __DATA.__objc_data _OBJC_CLASS_$_AVExternalDeviceIcon
|| __DATA.__objc_data _OBJC_CLASS_$_AVExternalPlaybackMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_AVExternalProtectionMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_AVFigEndpointFigRoutingContextOutputDeviceTranslator
|| __DATA.__objc_data _OBJC_CLASS_$_AVFigEndpointOutputDeviceImpl
|| __DATA.__objc_data _OBJC_CLASS_$_AVFigEndpointUIAgentOutputContextManagerImpl
|| __DATA.__objc_data _OBJC_CLASS_$_AVFormatSpecification
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedAsset
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedAssetMinder
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedAssetTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedAssetsArray
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedMediaDataReport
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedMovie
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedMovieMinder
|| __DATA.__objc_data _OBJC_CLASS_$_AVFragmentedMovieTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVMediaDataStorage
|| __DATA.__objc_data _OBJC_CLASS_$_AVMetadataGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVMetadataItemFilter
|| __DATA.__objc_data _OBJC_CLASS_$_AVMetadataItemFilterForSharing
|| __DATA.__objc_data _OBJC_CLASS_$_AVMetadataItemValueRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVMovieTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableAssetDownloadStorageManagementPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableAudioMix
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableAudioMixInputParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableComposition
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableCompositionTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableDateRangeMetadataGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableMediaSelection
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableMovieTrack
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableScheduledAudioParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableTimedMetadataGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableVideoComposition
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableVideoCompositionInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_AVMutableVideoCompositionLayerInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_AVOnceTimebaseObserver
|| __DATA.__objc_data _OBJC_CLASS_$_AVOperationQueueWithFundamentalDependency
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputContextCommunicationChannel
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputContextDestinationChange
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputContextManager
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceAuthorizationRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceAuthorizationSession
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceAuthorizedPeer
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceClusterMember
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceCommunicationChannel
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputDeviceGroupMembershipChangeResult
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputSettings
|| __DATA.__objc_data _OBJC_CLASS_$_AVOutputSettingsAssistant
|| __DATA.__objc_data _OBJC_CLASS_$_AVPairedDevice
|| __DATA.__objc_data _OBJC_CLASS_$_AVPersistableContentKeyRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerCaptionLayer
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerInterstitialEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerInterstitialEventController
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerInterstitialEventMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemAccessLog
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemAccessLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemErrorLog
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemErrorLogEvent
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemLegibleOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemMetadataOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemSampleBufferOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemSampleBufferOutputConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerItemVideoOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerLooper
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerMediaSelectionCriteria
|| __DATA.__objc_data _OBJC_CLASS_$_AVPlayerSetRateOptions
|| __DATA.__objc_data _OBJC_CLASS_$_AVQueuePlayer
|| __DATA.__objc_data _OBJC_CLASS_$_AVRouteDetector
|| __DATA.__objc_data _OBJC_CLASS_$_AVRoutingSession
|| __DATA.__objc_data _OBJC_CLASS_$_AVRoutingSessionDestination
|| __DATA.__objc_data _OBJC_CLASS_$_AVRoutingSessionManager
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleBufferGenerator
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleBufferGeneratorBatch
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleBufferRequest
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleBufferVideoOutput
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleBufferVideoRenderer
|| __DATA.__objc_data _OBJC_CLASS_$_AVSampleCursor
|| __DATA.__objc_data _OBJC_CLASS_$_AVScheduledAudioParameters
|| __DATA.__objc_data _OBJC_CLASS_$_AVSynchronizedLayer
|| __DATA.__objc_data _OBJC_CLASS_$_AVTextStyleRule
|| __DATA.__objc_data _OBJC_CLASS_$_AVTimeFormatter
|| __DATA.__objc_data _OBJC_CLASS_$_AVTimedMetadataGroup
|| __DATA.__objc_data _OBJC_CLASS_$_AVUXMDisplayManager
|| __DATA.__objc_data _OBJC_CLASS_$_AVUnreachableAssetInspectorLoader
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoComposition
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoCompositionCoreAnimationTool
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoCompositionInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoCompositionLayerInstruction
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoCompositionRenderContext
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoCompositionRenderHint
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoOutputSettings
|| __DATA.__objc_data _OBJC_CLASS_$_AVVideoPerformanceMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_AVWaitForNotificationOrDeallocationOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAggregateAssetDownloadTask
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetDownloadContentConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetDownloadSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetDownloadStorageManagementPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetDownloadStorageManager
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetExportSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetFragment
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetImageGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetPlaybackAssistant
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReader
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderAudioMixOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderOutputMetadataAdaptor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderSampleReferenceOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderTrackOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetReaderVideoCompositionOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoaderRemoteHandlerContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoadingContentInformationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoadingDataRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoadingRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoadingRequestor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetResourceRenewalRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetSegmentReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetSegmentReportSampleInformation
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetSegmentTrackReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetTrackGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetTrackSegment
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetVariantAudioAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetVariantAudioRenditionSpecificAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetVariantQualifier
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetVariantVideoAttributes
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriterInput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriterInputGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriterInputMetadataAdaptor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriterInputPassDescription
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAssetWriterInputPixelBufferAdaptor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAsynchronousCIImageFilteringRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAsynchronousVideoCompositionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioMix
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioMixEffectParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioMixInputParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioMixSweepFilterEffectParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVAudioOutputSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_AVChapterMetadataItem
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCompositionTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCompositionTrackFormatDescriptionReplacement
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCompositionTrackSegment
|| __DATA.__objc_data _OBJC_METACLASS_$_AVContentKey
|| __DATA.__objc_data _OBJC_METACLASS_$_AVContentKeyReportGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVContentKeyRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVContentKeyResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_AVContentKeySpecifier
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCoordinatedPlaybackParticipant
|| __DATA.__objc_data _OBJC_METACLASS_$_AVCoordinatedPlaybackSuspension
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDateRangeMetadataGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinatorBufferingCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinatorPauseCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinatorPlayCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinatorPlaybackControlCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDelegatingPlaybackCoordinatorSeekCommand
|| __DATA.__objc_data _OBJC_METACLASS_$_AVDisplayCriteria
|| __DATA.__objc_data _OBJC_METACLASS_$_AVEventWaiter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVExternalDeviceHID
|| __DATA.__objc_data _OBJC_METACLASS_$_AVExternalDeviceIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_AVExternalPlaybackMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVExternalProtectionMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFigEndpointFigRoutingContextOutputDeviceTranslator
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFigEndpointOutputDeviceImpl
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFigEndpointUIAgentOutputContextManagerImpl
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFormatSpecification
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedAsset
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedAssetMinder
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedAssetTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedAssetsArray
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedMediaDataReport
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedMovie
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedMovieMinder
|| __DATA.__objc_data _OBJC_METACLASS_$_AVFragmentedMovieTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMediaDataStorage
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMetadataGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMetadataItemFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMetadataItemFilterForSharing
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMetadataItemValueRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMovieTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableAssetDownloadStorageManagementPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableAudioMix
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableAudioMixInputParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableComposition
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableCompositionTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableDateRangeMetadataGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableMediaSelection
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableMovieTrack
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableScheduledAudioParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableTimedMetadataGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableVideoComposition
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableVideoCompositionInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_AVMutableVideoCompositionLayerInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOnceTimebaseObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOperationQueueWithFundamentalDependency
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputContextCommunicationChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputContextDestinationChange
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputContextManager
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceAuthorizationRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceAuthorizationSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceAuthorizedPeer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceClusterMember
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceCommunicationChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputDeviceGroupMembershipChangeResult
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_AVOutputSettingsAssistant
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPairedDevice
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPersistableContentKeyRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerCaptionLayer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerInterstitialEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerInterstitialEventController
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerInterstitialEventMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemAccessLog
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemAccessLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemErrorLog
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemErrorLogEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemLegibleOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemMetadataOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemSampleBufferOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemSampleBufferOutputConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerItemVideoOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerLooper
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerMediaSelectionCriteria
|| __DATA.__objc_data _OBJC_METACLASS_$_AVPlayerSetRateOptions
|| __DATA.__objc_data _OBJC_METACLASS_$_AVQueuePlayer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVRouteDetector
|| __DATA.__objc_data _OBJC_METACLASS_$_AVRoutingSession
|| __DATA.__objc_data _OBJC_METACLASS_$_AVRoutingSessionDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_AVRoutingSessionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleBufferGenerator
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleBufferGeneratorBatch
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleBufferRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleBufferVideoOutput
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleBufferVideoRenderer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSampleCursor
|| __DATA.__objc_data _OBJC_METACLASS_$_AVScheduledAudioParameters
|| __DATA.__objc_data _OBJC_METACLASS_$_AVSynchronizedLayer
|| __DATA.__objc_data _OBJC_METACLASS_$_AVTextStyleRule
|| __DATA.__objc_data _OBJC_METACLASS_$_AVTimeFormatter
|| __DATA.__objc_data _OBJC_METACLASS_$_AVTimedMetadataGroup
|| __DATA.__objc_data _OBJC_METACLASS_$_AVUXMDisplayManager
|| __DATA.__objc_data _OBJC_METACLASS_$_AVUnreachableAssetInspectorLoader
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoComposition
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoCompositionCoreAnimationTool
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoCompositionInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoCompositionLayerInstruction
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoCompositionRenderContext
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoCompositionRenderHint
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoOutputSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_AVVideoPerformanceMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_AVWaitForNotificationOrDeallocationOperation
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVAssetWriterInputMetadataAdaptor._internal
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVChapterMetadataItem._privChapter
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVMetadataItem._priv
|| __DATA.__objc_ivar _OBJC_IVAR_$_AVMutableMetadataItem._mutablePriv
|| __DATA_CONST.__const _AVAssetAssociatedSubtitlesTrackReferencesKey
|| __DATA_CONST.__const _AVAssetChapterListTrackReferencesKey
|| __DATA_CONST.__const _AVAssetChapterMetadataGroupsDidChangeNotification
|| __DATA_CONST.__const _AVAssetContainsFragmentsDidChangeNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionAirPlayAuthorizationInfoKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAllowsCellularAccessKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAllowsConstrainedNetworkAccessKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAllowsExpensiveNetworkAccessKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAlternativeConfigurationHierarchyTokenKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAlternativeConfigurationOptionsKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAlternativeConfigurationServiceIdentifierKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAssetImageDataKey
|| __DATA_CONST.__const _AVAssetDownloadSessionAssetNameKey
|| __DATA_CONST.__const _AVAssetDownloadSessionCachePrimingDownloadTokenKey
|| __DATA_CONST.__const _AVAssetDownloadSessionClientAuditTokenKey
|| __DATA_CONST.__const _AVAssetDownloadSessionClientBundleIdentifierKey
|| __DATA_CONST.__const _AVAssetDownloadSessionCurrentLoadedTimeRangesKey
|| __DATA_CONST.__const _AVAssetDownloadSessionDebugIdentifierKey
|| __DATA_CONST.__const _AVAssetDownloadSessionDeleteDownloadWhenAssetFinalizesKey
|| __DATA_CONST.__const _AVAssetDownloadSessionDidResolveMediaSelectionNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionDownloadFailedNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionDownloadSucceededNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionFileSizeAvailableNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionHTTPCookiesKey
|| __DATA_CONST.__const _AVAssetDownloadSessionHTTPHeaderFieldsKey
|| __DATA_CONST.__const _AVAssetDownloadSessionLinkAssetURLToDestinationURLKey
|| __DATA_CONST.__const _AVAssetDownloadSessionLoadedTimeRangesChangedNotification
|| __DATA_CONST.__const _AVAssetDownloadSessionMaxSizeAllowedForCellularAccessKey
|| __DATA_CONST.__const _AVAssetDownloadSessionMediaSelectionKey
|| __DATA_CONST.__const _AVAssetDownloadSessionMediaSelectionPrefersMultichannelKey
|| __DATA_CONST.__const _AVAssetDownloadSessionMinimumRequiredMediaBitrateKey
|| __DATA_CONST.__const _AVAssetDownloadSessionNewlyLoadedTimeRangeKey
|| __DATA_CONST.__const _AVAssetDownloadSessionOptimizeAccessForLinearMoviePlaybackKey
|| __DATA_CONST.__const _AVAssetDownloadSessionPreferredAudibleMediaCharacteristicKey
|| __DATA_CONST.__const _AVAssetDownloadSessionPreferredLegibleMediaCharacteristicKey
|| __DATA_CONST.__const _AVAssetDownloadSessionPreferredVisualMediaCharacteristicKey
|| __DATA_CONST.__const _AVAssetDownloadSessionPriorityKey
|| __DATA_CONST.__const _AVAssetDownloadSessionProtectedContentSupportStorageURLKey
|| __DATA_CONST.__const _AVAssetDownloadSessionPurchaseBundleKey
|| __DATA_CONST.__const _AVAssetDownloadSessionRetryErrorKey
|| __DATA_CONST.__const _AVAssetDownloadSessionShouldStoreEligibleContentKeysKey
|| __DATA_CONST.__const _AVAssetDownloadSessionTimeRangeExpectedToLoadKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentDSIDKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentDownloadParametersKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentIDKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentInfoKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentPurchasedMediaKindKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentTypeKey
|| __DATA_CONST.__const _AVAssetDownloadSessioniTunesStoreContentUserAgentKey
|| __DATA_CONST.__const _AVAssetDownloadTaskAllowHighDynamicRangeKey
|| __DATA_CONST.__const _AVAssetDownloadTaskClientIsCatalyst
|| __DATA_CONST.__const _AVAssetDownloadTaskDestinationURLKey
|| __DATA_CONST.__const _AVAssetDownloadTaskDownloadConfigurationKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMaximumAudioSampleRateKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMediaSelectionKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMediaSelectionPrefersMultichannelForMostPreferredLanguageOnlyKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMediaSelectionPrefersMultichannelKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMediaSelectionPrefersMultichannelOnlyKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMediaSelectionsForMultichannelKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMinimumRequiredMediaBitrateForHEVCKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMinimumRequiredMediaBitrateKey
|| __DATA_CONST.__const _AVAssetDownloadTaskMinimumRequiredPresentationSizeKey
|| __DATA_CONST.__const _AVAssetDownloadTaskPrefersHDRKey
|| __DATA_CONST.__const _AVAssetDownloadTaskPrefersLosslessAudioKey
|| __DATA_CONST.__const _AVAssetDownloadTaskPrefersMostCompatibleRenditionKey
|| __DATA_CONST.__const _AVAssetDownloadTaskShouldStoreEligibleContentKeysKey
|| __DATA_CONST.__const _AVAssetDownloadedAssetEvictionPriorityDefault
|| __DATA_CONST.__const _AVAssetDownloadedAssetEvictionPriorityImportant
|| __DATA_CONST.__const _AVAssetDurationDidChangeNotification
|| __DATA_CONST.__const _AVAssetExportPreset1280x720
|| __DATA_CONST.__const _AVAssetExportPreset1920x1080
|| __DATA_CONST.__const _AVAssetExportPreset3840x2160
|| __DATA_CONST.__const _AVAssetExportPreset3GPRelease6MMS
|| __DATA_CONST.__const _AVAssetExportPreset640x480
|| __DATA_CONST.__const _AVAssetExportPreset960x540
|| __DATA_CONST.__const _AVAssetExportPresetAVCAnimoji
|| __DATA_CONST.__const _AVAssetExportPresetAppleM4A
|| __DATA_CONST.__const _AVAssetExportPresetAppleProRes422LPCM
|| __DATA_CONST.__const _AVAssetExportPresetAppleProRes4444LPCM
|| __DATA_CONST.__const _AVAssetExportPresetAudioOnlyMMS
|| __DATA_CONST.__const _AVAssetExportPresetAuxSmall
|| __DATA_CONST.__const _AVAssetExportPresetHEVC1920x1080
|| __DATA_CONST.__const _AVAssetExportPresetHEVC1920x1080WithAlpha
|| __DATA_CONST.__const _AVAssetExportPresetHEVC3840x2160
|| __DATA_CONST.__const _AVAssetExportPresetHEVC3840x2160WithAlpha
|| __DATA_CONST.__const _AVAssetExportPresetHEVC7680x4320
|| __DATA_CONST.__const _AVAssetExportPresetHEVCAnimojiWithAlpha
|| __DATA_CONST.__const _AVAssetExportPresetHEVCHighestQuality
|| __DATA_CONST.__const _AVAssetExportPresetHEVCHighestQualityWithAlpha
|| __DATA_CONST.__const _AVAssetExportPresetHighestQuality
|| __DATA_CONST.__const _AVAssetExportPresetICPL
|| __DATA_CONST.__const _AVAssetExportPresetICPL480x480
|| __DATA_CONST.__const _AVAssetExportPresetICPL960x960
|| __DATA_CONST.__const _AVAssetExportPresetICPLAux
|| __DATA_CONST.__const _AVAssetExportPresetICPLAuxHD
|| __DATA_CONST.__const _AVAssetExportPresetICPLHD
|| __DATA_CONST.__const _AVAssetExportPresetICPLHEVC1280x1280WithHDR
|| __DATA_CONST.__const _AVAssetExportPresetICPLHEVC1440x1440WithHDR
|| __DATA_CONST.__const _AVAssetExportPresetICPLHEVC1920x1080
|| __DATA_CONST.__const _AVAssetExportPresetICPLHEVC1920x1920WithHDR
|| __DATA_CONST.__const _AVAssetExportPresetICPLHEVC960x960WithHDR
|| __DATA_CONST.__const _AVAssetExportPresetLowQuality
|| __DATA_CONST.__const _AVAssetExportPresetMMS
|| __DATA_CONST.__const _AVAssetExportPresetMail
|| __DATA_CONST.__const _AVAssetExportPresetMediumQuality
|| __DATA_CONST.__const _AVAssetExportPresetMessage
|| __DATA_CONST.__const _AVAssetExportPresetMessageAudio
|| __DATA_CONST.__const _AVAssetExportPresetMessageAux
|| __DATA_CONST.__const _AVAssetExportPresetMessageHEVCWithHDR
|| __DATA_CONST.__const _AVAssetExportPresetPassthrough
|| __DATA_CONST.__const _AVAssetExportPresetPhotoStream
|| __DATA_CONST.__const _AVAssetExportPresetPhotoStreamHD
|| __DATA_CONST.__const _AVAssetExportPresetVoiceMemoALAC
|| __DATA_CONST.__const _AVAssetExportPresetYouTube
|| __DATA_CONST.__const _AVAssetExportPresetYouTubeHD
|| __DATA_CONST.__const _AVAssetForcedOnlySubtitlesTrackReferencesKey
|| __DATA_CONST.__const _AVAssetImageGeneratorApertureModeCleanAperture
|| __DATA_CONST.__const _AVAssetImageGeneratorApertureModeEncodedPixels
|| __DATA_CONST.__const _AVAssetImageGeneratorApertureModeProductionAperture
|| __DATA_CONST.__const _AVAssetMediaSelectionGroupsDidChangeNotification
|| __DATA_CONST.__const _AVAssetMediaServicesWereResetErrorKey
|| __DATA_CONST.__const _AVAssetMediaServicesWereResetNotification
|| __DATA_CONST.__const _AVAssetMetadataTrackReferencesKey
|| __DATA_CONST.__const _AVAssetModifierTrackReferencesKey
|| __DATA_CONST.__const _AVAssetPlaybackConfigurationOptionStereoMultiviewVideo
|| __DATA_CONST.__const _AVAssetPlaybackConfigurationOptionStereoVideo
|| __DATA_CONST.__const _AVAssetPreferPreciseDurationAndTimingKey
|| __DATA_CONST.__const _AVAssetPrefersSandboxedParsingOptionKey
|| __DATA_CONST.__const _AVAssetReferenceRestrictionsKey
|| __DATA_CONST.__const _AVAssetRequiresInProcessOperationKey
|| __DATA_CONST.__const _AVAssetResourceLoadingRequestStreamingContentKeyRequestRequiresPersistentKey
|| __DATA_CONST.__const _AVAssetResourceLoadingRequestStreamingContentKeyRequiresiTunesProvisioningKey
|| __DATA_CONST.__const _AVAssetSoundFallbackTrackReferencesKey
|| __DATA_CONST.__const _AVAssetTimecodeTrackReferencesKey
|| __DATA_CONST.__const _AVAssetTrackMetadataDidChangeNotification
|| __DATA_CONST.__const _AVAssetTrackSegmentsDidChangeNotification
|| __DATA_CONST.__const _AVAssetTrackTimeRangeDidChangeNotification
|| __DATA_CONST.__const _AVAssetTrackTrackAssociationsDidChangeNotification
|| __DATA_CONST.__const _AVAssetWasDefragmentedNotification
|| __DATA_CONST.__const _AVAssetWriterInputMediaDataLocationBeforeMainMediaDataNotInterleaved
|| __DATA_CONST.__const _AVAssetWriterInputMediaDataLocationInterleavedWithMainMediaData
|| __DATA_CONST.__const _AVAssetWriterInputMediaDataLocationSparselyInterleavedWithMainMediaData
|| __DATA_CONST.__const _AVAudioSessionCategoryAudioVideo
|| __DATA_CONST.__const _AVAudioSessionCategoryLiveAudio
|| __DATA_CONST.__const _AVAudioSessionCategoryUserInterfaceSoundEffects
|| __DATA_CONST.__const _AVAudioSessionMPOCanEnterPIPModeDidChangeNotification
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyCategoryPhoneCall
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyCategoryRingtone
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyCategoryRingtonePreview
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyCategoryTTYCall
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyModeFindMyPhone
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyModeMoviePlayback
|| __DATA_CONST.__const _AVAudioSessionMediaPlayerOnlyModeSpokenAudio
|| __DATA_CONST.__const _AVAudioSessionPickableRoutesDidChangeNotification
|| __DATA_CONST.__const _AVAudioTimePitchAlgorithmLowQualityZeroLatency
|| __DATA_CONST.__const _AVAudioTimePitchAlgorithmSpectral
|| __DATA_CONST.__const _AVAudioTimePitchAlgorithmTimeDomain
|| __DATA_CONST.__const _AVAudioTimePitchAlgorithmVarispeed
|| __DATA_CONST.__const _AVContentAuthorizationInfoPlayInfoKey
|| __DATA_CONST.__const _AVContentAuthorizationInfoSessionIDKey
|| __DATA_CONST.__const _AVContentKeyRequestProtocolVersionsKey
|| __DATA_CONST.__const _AVContentKeyRequestRequiresExtendedValidationDataInSecureTokenKey
|| __DATA_CONST.__const _AVContentKeyRequestRequiresValidationDataInSecureTokenKey
|| __DATA_CONST.__const _AVContentKeyRequestRetryReasonReceivedObsoleteContentKey
|| __DATA_CONST.__const _AVContentKeyRequestRetryReasonReceivedResponseWithExpiredLease
|| __DATA_CONST.__const _AVContentKeyRequestRetryReasonTimedOut
|| __DATA_CONST.__const _AVContentKeyRequestSupportsAirPlayDecryptionKey
|| __DATA_CONST.__const _AVContentKeySessionServerPlaybackContextOptionProtocolVersions
|| __DATA_CONST.__const _AVContentKeySessionServerPlaybackContextOptionServerChallenge
|| __DATA_CONST.__const _AVContentKeySystemAuthorizationToken
|| __DATA_CONST.__const _AVContentKeySystemClearKey
|| __DATA_CONST.__const _AVContentKeySystemFairPlayStreaming
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonAudioSessionInterrupted
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonCoordinatedPlaybackNotPossible
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonPlayingInterstitial
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonStallRecovery
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonUserActionRequired
|| __DATA_CONST.__const _AVCoordinatedPlaybackSuspensionReasonUserIsChangingCurrentTime
|| __DATA_CONST.__const _AVErrorDeviceKey
|| __DATA_CONST.__const _AVErrorExceptionKey
|| __DATA_CONST.__const _AVErrorFileSizeKey
|| __DATA_CONST.__const _AVErrorFileTypeKey
|| __DATA_CONST.__const _AVErrorFourCharCodeKey
|| __DATA_CONST.__const _AVErrorMediaSubTypeKey
|| __DATA_CONST.__const _AVErrorMediaTypeKey
|| __DATA_CONST.__const _AVErrorPIDKey
|| __DATA_CONST.__const _AVErrorPersistentTrackIDKey
|| __DATA_CONST.__const _AVErrorPresentationTimeStampKey
|| __DATA_CONST.__const _AVErrorRecordingFailureDomainKey
|| __DATA_CONST.__const _AVErrorRecordingSuccessfullyFinishedKey
|| __DATA_CONST.__const _AVErrorTimeKey
|| __DATA_CONST.__const _AVExternalDeviceElectronicTollCollectionStateChangedNotification
|| __DATA_CONST.__const _AVExternalDeviceFeatureEnhancedRequestCarUI
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIChangedNotification
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIElementJapanMaps
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIElementMusicLists
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIElementNonMusicLists
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIElementSoftKeyboard
|| __DATA_CONST.__const _AVExternalDeviceLimitedUIElementSoftPhoneKeypad
|| __DATA_CONST.__const _AVExternalDeviceMFiCertificateSerialNumberChangedNotification
|| __DATA_CONST.__const _AVExternalDeviceNavigationAidedDrivingStateChangedNotification
|| __DATA_CONST.__const _AVExternalDeviceNightModeChangedNotification
|| __DATA_CONST.__const _AVExternalDeviceOwnsTurnByTurnNavigationChangedNotification
|| __DATA_CONST.__const _AVExternalDevicePerformanceReportPostedNotification
|| __DATA_CONST.__const _AVExternalDeviceScreenBecameAvailableNotification
|| __DATA_CONST.__const _AVExternalDeviceScreenBecameUnavailableNotification
|| __DATA_CONST.__const _AVExternalDeviceScreenInputCapabilityHighFidelityTouch
|| __DATA_CONST.__const _AVExternalDeviceScreenInputCapabilityKnobs
|| __DATA_CONST.__const _AVExternalDeviceScreenInputCapabilityLowFidelityTouch
|| __DATA_CONST.__const _AVExternalDeviceScreenInputCapabilityTouchpad
|| __DATA_CONST.__const _AVExternalPlaybackMonitorAirPlayVideoActiveDidChangeNotification
|| __DATA_CONST.__const _AVExternalPlaybackMonitorAirPlayVideoPlayingDidChangeNotification
|| __DATA_CONST.__const _AVExternalProtectionMonitorExternalProtectionStateChangedNotification
|| __DATA_CONST.__const _AVFileType3GPP
|| __DATA_CONST.__const _AVFileType3GPP2
|| __DATA_CONST.__const _AVFileTypeAC3
|| __DATA_CONST.__const _AVFileTypeAIFC
|| __DATA_CONST.__const _AVFileTypeAIFF
|| __DATA_CONST.__const _AVFileTypeAMR
|| __DATA_CONST.__const _AVFileTypeAVCI
|| __DATA_CONST.__const _AVFileTypeAppleM4A
|| __DATA_CONST.__const _AVFileTypeAppleM4V
|| __DATA_CONST.__const _AVFileTypeCoreAudioFormat
|| __DATA_CONST.__const _AVFileTypeDNG
|| __DATA_CONST.__const _AVFileTypeEnhancedAC3
|| __DATA_CONST.__const _AVFileTypeHEIC
|| __DATA_CONST.__const _AVFileTypeHEIF
|| __DATA_CONST.__const _AVFileTypeJPEG
|| __DATA_CONST.__const _AVFileTypeMPEG2TransportStream
|| __DATA_CONST.__const _AVFileTypeMPEG4
|| __DATA_CONST.__const _AVFileTypeMPEGLayer3
|| __DATA_CONST.__const _AVFileTypeProfileMPEG4AppleHLS
|| __DATA_CONST.__const _AVFileTypeProfileMPEG4CMAFCompliant
|| __DATA_CONST.__const _AVFileTypeQuickTimeMovie
|| __DATA_CONST.__const _AVFileTypeSunAU
|| __DATA_CONST.__const _AVFileTypeTIFF
|| __DATA_CONST.__const _AVFileTypeWAVE
|| __DATA_CONST.__const _AVFileTypeWebVTT
|| __DATA_CONST.__const _AVFoundationErrorDomain
|| __DATA_CONST.__const _AVFragmentedMovieContainsMovieFragmentsDidChangeNotification
|| __DATA_CONST.__const _AVFragmentedMovieDurationDidChangeNotification
|| __DATA_CONST.__const _AVFragmentedMovieTrackSegmentsDidChangeNotification
|| __DATA_CONST.__const _AVFragmentedMovieTrackTimeRangeDidChangeNotification
|| __DATA_CONST.__const _AVFragmentedMovieWasDefragmentedNotification
|| __DATA_CONST.__const _AVInitializeProtectedContentPlaybackSupportExternalProtectionKey
|| __DATA_CONST.__const _AVInitializeProtectedContentPlaybackSupportStorageURLKey
|| __DATA_CONST.__const _AVInitializeProtectedContentPlaybackSupportVideoKey
|| __DATA_CONST.__const _AVLayerVideoGravityResize
|| __DATA_CONST.__const _AVLayerVideoGravityResizeAspect
|| __DATA_CONST.__const _AVLayerVideoGravityResizeAspectFill
|| __DATA_CONST.__const _AVMediaCharacteristicAudible
|| __DATA_CONST.__const _AVMediaCharacteristicBinauralForHeadphones
|| __DATA_CONST.__const _AVMediaCharacteristicContainsAlphaChannel
|| __DATA_CONST.__const _AVMediaCharacteristicContainsHDRVideo
|| __DATA_CONST.__const _AVMediaCharacteristicContainsOnlyForcedSubtitles
|| __DATA_CONST.__const _AVMediaCharacteristicDescribesMusicAndSoundForAccessibility
|| __DATA_CONST.__const _AVMediaCharacteristicDescribesVideoForAccessibility
|| __DATA_CONST.__const _AVMediaCharacteristicDubbedTranslation
|| __DATA_CONST.__const _AVMediaCharacteristicEasyToRead
|| __DATA_CONST.__const _AVMediaCharacteristicFrameBased
|| __DATA_CONST.__const _AVMediaCharacteristicHasLanguageDisplayNameAsName
|| __DATA_CONST.__const _AVMediaCharacteristicIsAudioDownmix
|| __DATA_CONST.__const _AVMediaCharacteristicIsAuxiliaryContent
|| __DATA_CONST.__const _AVMediaCharacteristicIsMainProgramContent
|| __DATA_CONST.__const _AVMediaCharacteristicIsOriginalContent
|| __DATA_CONST.__const _AVMediaCharacteristicIsVideoMap
|| __DATA_CONST.__const _AVMediaCharacteristicIsVideoMapDepth
|| __DATA_CONST.__const _AVMediaCharacteristicLanguageTranslation
|| __DATA_CONST.__const _AVMediaCharacteristicLegible
|| __DATA_CONST.__const _AVMediaCharacteristicTranscribesSpokenDialogForAccessibility
|| __DATA_CONST.__const _AVMediaCharacteristicUsesWideGamutColorSpace
|| __DATA_CONST.__const _AVMediaCharacteristicVisual
|| __DATA_CONST.__const _AVMediaCharacteristicVoiceOverTranslation
|| __DATA_CONST.__const _AVMediaStatePurgeIdentifierKey
|| __DATA_CONST.__const _AVMediaTypeAudio
|| __DATA_CONST.__const _AVMediaTypeAuxiliaryPicture
|| __DATA_CONST.__const _AVMediaTypeClosedCaption
|| __DATA_CONST.__const _AVMediaTypeDepthData
|| __DATA_CONST.__const _AVMediaTypeHaptic
|| __DATA_CONST.__const _AVMediaTypeMetadata
|| __DATA_CONST.__const _AVMediaTypeMetadataObject
|| __DATA_CONST.__const _AVMediaTypeMuxed
|| __DATA_CONST.__const _AVMediaTypeScene
|| __DATA_CONST.__const _AVMediaTypeSubtitle
|| __DATA_CONST.__const _AVMediaTypeText
|| __DATA_CONST.__const _AVMediaTypeTimecode
|| __DATA_CONST.__const _AVMediaTypeVideo
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyAlbumAndTrack
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyAuthor
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyCollection
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyCopyright
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyDescription
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyGenre
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyKeywordList
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyLocation
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyMediaClassification
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyMediaRating
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyPerformer
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyRecordingYear
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyThumbnail
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyTitle
|| __DATA_CONST.__const _AVMetadata3GPUserDataKeyUserRating
|| __DATA_CONST.__const _AVMetadataCommonIdentifierAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataCommonIdentifierAlbumName
|| __DATA_CONST.__const _AVMetadataCommonIdentifierArtist
|| __DATA_CONST.__const _AVMetadataCommonIdentifierArtwork
|| __DATA_CONST.__const _AVMetadataCommonIdentifierAssetIdentifier
|| __DATA_CONST.__const _AVMetadataCommonIdentifierAuthor
|| __DATA_CONST.__const _AVMetadataCommonIdentifierContributor
|| __DATA_CONST.__const _AVMetadataCommonIdentifierCopyrights
|| __DATA_CONST.__const _AVMetadataCommonIdentifierCreationDate
|| __DATA_CONST.__const _AVMetadataCommonIdentifierCreator
|| __DATA_CONST.__const _AVMetadataCommonIdentifierDescription
|| __DATA_CONST.__const _AVMetadataCommonIdentifierFormat
|| __DATA_CONST.__const _AVMetadataCommonIdentifierLanguage
|| __DATA_CONST.__const _AVMetadataCommonIdentifierLastModifiedDate
|| __DATA_CONST.__const _AVMetadataCommonIdentifierLocation
|| __DATA_CONST.__const _AVMetadataCommonIdentifierMake
|| __DATA_CONST.__const _AVMetadataCommonIdentifierModel
|| __DATA_CONST.__const _AVMetadataCommonIdentifierPublisher
|| __DATA_CONST.__const _AVMetadataCommonIdentifierRelation
|| __DATA_CONST.__const _AVMetadataCommonIdentifierSoftware
|| __DATA_CONST.__const _AVMetadataCommonIdentifierSource
|| __DATA_CONST.__const _AVMetadataCommonIdentifierSubject
|| __DATA_CONST.__const _AVMetadataCommonIdentifierTitle
|| __DATA_CONST.__const _AVMetadataCommonIdentifierType
|| __DATA_CONST.__const _AVMetadataCommonKeyAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataCommonKeyAlbumName
|| __DATA_CONST.__const _AVMetadataCommonKeyArtist
|| __DATA_CONST.__const _AVMetadataCommonKeyArtwork
|| __DATA_CONST.__const _AVMetadataCommonKeyAuthor
|| __DATA_CONST.__const _AVMetadataCommonKeyContributor
|| __DATA_CONST.__const _AVMetadataCommonKeyCopyrights
|| __DATA_CONST.__const _AVMetadataCommonKeyCreationDate
|| __DATA_CONST.__const _AVMetadataCommonKeyCreator
|| __DATA_CONST.__const _AVMetadataCommonKeyDescription
|| __DATA_CONST.__const _AVMetadataCommonKeyFormat
|| __DATA_CONST.__const _AVMetadataCommonKeyIdentifier
|| __DATA_CONST.__const _AVMetadataCommonKeyLanguage
|| __DATA_CONST.__const _AVMetadataCommonKeyLastModifiedDate
|| __DATA_CONST.__const _AVMetadataCommonKeyLocation
|| __DATA_CONST.__const _AVMetadataCommonKeyMake
|| __DATA_CONST.__const _AVMetadataCommonKeyModel
|| __DATA_CONST.__const _AVMetadataCommonKeyPublisher
|| __DATA_CONST.__const _AVMetadataCommonKeyRelation
|| __DATA_CONST.__const _AVMetadataCommonKeySoftware
|| __DATA_CONST.__const _AVMetadataCommonKeySource
|| __DATA_CONST.__const _AVMetadataCommonKeySubject
|| __DATA_CONST.__const _AVMetadataCommonKeyTitle
|| __DATA_CONST.__const _AVMetadataCommonKeyType
|| __DATA_CONST.__const _AVMetadataExtraAttributeBaseURIKey
|| __DATA_CONST.__const _AVMetadataExtraAttributeDataTypeKey
|| __DATA_CONST.__const _AVMetadataExtraAttributeDataTypeNamespaceKey
|| __DATA_CONST.__const _AVMetadataExtraAttributeHREFKey
|| __DATA_CONST.__const _AVMetadataExtraAttributeInfoKey
|| __DATA_CONST.__const _AVMetadataExtraAttributePictureTypeKey
|| __DATA_CONST.__const _AVMetadataExtraAttributeValueURIKey
|| __DATA_CONST.__const _AVMetadataFormatHLSMetadata
|| __DATA_CONST.__const _AVMetadataFormatID3Metadata
|| __DATA_CONST.__const _AVMetadataFormatISOUserData
|| __DATA_CONST.__const _AVMetadataFormatQuickTimeMetadata
|| __DATA_CONST.__const _AVMetadataFormatQuickTimeUserData
|| __DATA_CONST.__const _AVMetadataFormatUnknown
|| __DATA_CONST.__const _AVMetadataFormatiTunesMetadata
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyAlbumSortOrder
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyAlbumTitle
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyAttachedPicture
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyAudioEncryption
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyAudioSeekPointIndex
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyBand
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyBeatsPerMinute
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyComments
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyCommercial
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyCommercialInformation
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyCommerical
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyComposer
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyConductor
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyContentGroupDescription
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyContentType
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyCopyright
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyCopyrightInformation
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyDate
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEncodedBy
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEncodedWith
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEncodingTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEncryption
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEqualization
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEqualization2
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyEventTimingCodes
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyFileOwner
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyFileType
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyGeneralEncapsulatedObject
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyGroupIdentifier
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInitialKey
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInternationalStandardRecordingCode
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInternetRadioStationName
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInternetRadioStationOwner
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInvolvedPeopleList_v23
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyInvolvedPeopleList_v24
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyLanguage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyLeadPerformer
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyLength
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyLink
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyLyricist
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyMPEGLocationLookupTable
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyMediaType
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyModifiedBy
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyMood
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyMusicCDIdentifier
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyMusicianCreditsList
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOfficialArtistWebpage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOfficialAudioFileWebpage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOfficialAudioSourceWebpage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOfficialInternetRadioStationHomepage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOfficialPublisherWebpage
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalAlbumTitle
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalArtist
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalFilename
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalLyricist
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalReleaseTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOriginalReleaseYear
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyOwnership
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPartOfASet
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPayment
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPerformerSortOrder
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPlayCounter
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPlaylistDelay
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPopularimeter
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPositionSynchronization
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPrivate
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyProducedNotice
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyPublisher
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyRecommendedBufferSize
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyRecordingDates
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyRecordingTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyRelativeVolumeAdjustment
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyRelativeVolumeAdjustment2
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyReleaseTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyReverb
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySeek
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySetSubtitle
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySignature
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySize
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySubTitle
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySynchronizedLyric
|| __DATA_CONST.__const _AVMetadataID3MetadataKeySynchronizedTempoCodes
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTaggingTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTermsOfUse
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTime
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTitleDescription
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTitleSortOrder
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyTrackNumber
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyUniqueFileIdentifier
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyUnsynchronizedLyric
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyUserText
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyUserURL
|| __DATA_CONST.__const _AVMetadataID3MetadataKeyYear
|| __DATA_CONST.__const _AVMetadataISOUserDataKeyAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataISOUserDataKeyCopyright
|| __DATA_CONST.__const _AVMetadataISOUserDataKeyDate
|| __DATA_CONST.__const _AVMetadataISOUserDataKeyTaggedCharacteristic
|| __DATA_CONST.__const _AVMetadataIcyMetadataKeyStreamTitle
|| __DATA_CONST.__const _AVMetadataIcyMetadataKeyStreamURL
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataAlbumAndTrack
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataAuthor
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataCollection
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataDescription
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataGenre
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataKeywordList
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataLocation
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataMediaClassification
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataMediaRating
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataPerformer
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataRecordingYear
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataThumbnail
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataTitle
|| __DATA_CONST.__const _AVMetadataIdentifier3GPUserDataUserRating
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataAlbumSortOrder
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataAlbumTitle
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataAttachedPicture
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataAudioEncryption
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataAudioSeekPointIndex
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataBand
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataBeatsPerMinute
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataComments
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataCommercial
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataCommercialInformation
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataCommerical
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataComposer
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataConductor
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataContentGroupDescription
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataContentType
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataCopyrightInformation
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataDate
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEncodedBy
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEncodedWith
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEncodingTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEncryption
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEqualization
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEqualization2
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataEventTimingCodes
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataFileOwner
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataFileType
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataGeneralEncapsulatedObject
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataGroupIdentifier
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInitialKey
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInternationalStandardRecordingCode
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInternetRadioStationName
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInternetRadioStationOwner
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInvolvedPeopleList_v23
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataInvolvedPeopleList_v24
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataLanguage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataLeadPerformer
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataLength
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataLink
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataLyricist
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataMPEGLocationLookupTable
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataMediaType
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataModifiedBy
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataMood
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataMusicCDIdentifier
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataMusicianCreditsList
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOfficialArtistWebpage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOfficialAudioFileWebpage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOfficialAudioSourceWebpage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOfficialInternetRadioStationHomepage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOfficialPublisherWebpage
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalAlbumTitle
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalArtist
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalFilename
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalLyricist
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalReleaseTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOriginalReleaseYear
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataOwnership
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPartOfASet
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPayment
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPerformerSortOrder
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPlayCounter
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPlaylistDelay
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPopularimeter
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPositionSynchronization
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPrivate
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataProducedNotice
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataPublisher
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataRecommendedBufferSize
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataRecordingDates
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataRecordingTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataRelativeVolumeAdjustment
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataRelativeVolumeAdjustment2
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataReleaseTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataReverb
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSeek
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSetSubtitle
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSignature
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSize
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSubTitle
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSynchronizedLyric
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataSynchronizedTempoCodes
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTaggingTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTermsOfUse
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTime
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTitleDescription
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTitleSortOrder
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataTrackNumber
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataUniqueFileIdentifier
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataUnsynchronizedLyric
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataUserText
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataUserURL
|| __DATA_CONST.__const _AVMetadataIdentifierID3MetadataYear
|| __DATA_CONST.__const _AVMetadataIdentifierISOUserDataAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataIdentifierISOUserDataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifierISOUserDataDate
|| __DATA_CONST.__const _AVMetadataIdentifierISOUserDataTaggedCharacteristic
|| __DATA_CONST.__const _AVMetadataIdentifierIcyMetadataStreamTitle
|| __DATA_CONST.__const _AVMetadataIdentifierIcyMetadataStreamURL
|| __DATA_CONST.__const _AVMetadataIdentifierM3U8MetadataName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeCameraDebugInfo
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeCoreMotion
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataAlbum
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataArranger
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataArtist
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataArtwork
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataAuthor
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataAutoLivePhoto
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCameraFrameReadoutTime
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCameraIdentifier
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCollectionUser
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataComment
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataComposer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataContentIdentifier
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCreationDate
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataCredits
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDescription
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDetectedCatBody
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDetectedDogBody
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDetectedFace
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDetectedHumanBody
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDetectedSalientObject
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDirectionFacing
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDirectionMotion
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDirector
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataDisplayName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataEncodedBy
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataGenre
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataInformation
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataIsMontage
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataKeywords
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLivePhotoVideoStabilizationCropPercentageDenominator
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLivePhotoVideoStabilizationCropPercentageNumerator
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLivePhotoVitalityScore
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLivePhotoVitalityScoringVersion
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationBody
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationDate
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationHorizontalAccuracyInMeters
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationISO6709
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationNote
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataLocationRole
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataMake
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataModel
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataOriginalArtist
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataPerformer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataPhonogramRights
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataPreferredAffineTransform
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataProducer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataPublisher
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataRatingUser
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataSoftware
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataSpatialOverCaptureQualityScore
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataSpatialOverCaptureQualityScoringVersion
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataTitle
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataVideoOrientation
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataYear
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeMetadataiXML
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataAlbum
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataArranger
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataArtist
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataAuthor
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataChapter
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataClassicTrackName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataComment
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataComposer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataCreationDate
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataCredits
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataDescription
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataDirector
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataDisclaimer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataEncodedBy
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataFullName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataGenre
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataHostComputer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataInformation
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataKeywords
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataLocationISO6709
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataMake
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataModel
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataOriginalArtist
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataOriginalFormat
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataOriginalSource
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataPerformers
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataPhonogramRights
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataProducer
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataProduct
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataPublisher
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataSoftware
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataSpecialPlaybackRequirements
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataTaggedCharacteristic
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataTrack
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataTrackName
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataURLLink
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataWarning
|| __DATA_CONST.__const _AVMetadataIdentifierQuickTimeUserDataWriter
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAccountKind
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAcknowledgement
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAlbum
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAlbumArtist
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAppleID
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataArranger
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataArtDirector
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataArtist
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataArtistID
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataAuthor
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataBeatsPerMin
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataComposer
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataConductor
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataContentRating
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataCopyright
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataCoverArt
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataCredits
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataDescription
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataDirector
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataDiscCompilation
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataDiscNumber
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataEQ
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataEncodedBy
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataEncodingTool
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataExecProducer
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataGenreID
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataGrouping
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataLinerNotes
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataLyrics
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataOnlineExtras
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataOriginalArtist
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataPerformer
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataPhonogramRights
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataPlaylistID
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataPredefinedGenre
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataProducer
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataPublisher
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataRecordCompany
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataReleaseDate
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataSoloist
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataSongID
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataSongName
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataSoundEngineer
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataThanks
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataTrackNumber
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataTrackSubTitle
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataUserComment
|| __DATA_CONST.__const _AVMetadataIdentifieriTunesMetadataUserGenre
|| __DATA_CONST.__const _AVMetadataItemAttributeDataType
|| __DATA_CONST.__const _AVMetadataItemAttributeInfo
|| __DATA_CONST.__const _AVMetadataItemAttributeLanguageCode
|| __DATA_CONST.__const _AVMetadataItemAttributeMIMEType
|| __DATA_CONST.__const _AVMetadataItemAttributeName
|| __DATA_CONST.__const _AVMetadataKeySpaceAudioFile
|| __DATA_CONST.__const _AVMetadataKeySpaceCommon
|| __DATA_CONST.__const _AVMetadataKeySpaceHLSDateRange
|| __DATA_CONST.__const _AVMetadataKeySpaceID3
|| __DATA_CONST.__const _AVMetadataKeySpaceISOUserData
|| __DATA_CONST.__const _AVMetadataKeySpaceIcy
|| __DATA_CONST.__const _AVMetadataKeySpaceM3U8
|| __DATA_CONST.__const _AVMetadataKeySpaceQuickTimeMetadata
|| __DATA_CONST.__const _AVMetadataKeySpaceQuickTimeUserData
|| __DATA_CONST.__const _AVMetadataKeySpaceiTunes
|| __DATA_CONST.__const _AVMetadataKeySpaceiTunesLong
|| __DATA_CONST.__const _AVMetadataM3U8MetadataKeyName
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyAlbum
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyArranger
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyArtist
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyArtwork
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyAuthor
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCameraFrameReadoutTime
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCameraIdentifier
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCollectionUser
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyComment
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyComposer
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyContainsSpatialOverCaptureContent
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyContentIdentifier
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCopyright
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCreationDate
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyCredits
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyDescription
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyDirectionFacing
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyDirectionMotion
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyDirector
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyDisplayName
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyEncodedBy
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyGenre
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyInformation
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyIsMontage
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyKeywords
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLivePhotoVideoStabilizationCropPercentageDenominator
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLivePhotoVideoStabilizationCropPercentageNumerator
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLivePhotoVitalityDisabled
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationBody
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationDate
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationISO6709
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationName
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationNote
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyLocationRole
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyMake
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyModel
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyOriginalArtist
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyPerformer
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyPhonogramRights
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyProducer
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyPublisher
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyRatingUser
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeySoftware
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeySpatialOverCaptureGroupIdentifier
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyTitle
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyYear
|| __DATA_CONST.__const _AVMetadataQuickTimeMetadataKeyiXML
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyAccessibilityDescription
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyAlbum
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyArranger
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyArtist
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyAuthor
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyChapter
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyClassicTrackName
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyComment
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyComposer
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyCopyright
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyCreationDate
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyCredits
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyDescription
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyDirector
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyDisclaimer
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyEncodedBy
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyFullName
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyGenre
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyHostComputer
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyInformation
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyKeywords
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyLocationISO6709
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyMake
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyModel
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyOriginalArtist
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyOriginalFormat
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyOriginalSource
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyPerformers
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyPhonogramRights
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyProducer
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyProduct
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyPublisher
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeySoftware
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeySpecialPlaybackRequirements
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyTaggedCharacteristic
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyTrack
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyTrackName
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyURLLink
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyWarning
|| __DATA_CONST.__const _AVMetadataQuickTimeUserDataKeyWriter
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAccountKind
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAcknowledgement
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAlbum
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAlbumArtist
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAppleID
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyArranger
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyArtDirector
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyArtist
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyArtistID
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyAuthor
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyBeatsPerMin
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyComposer
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyConductor
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyContentRating
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyCopyright
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyCoverArt
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyCredits
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyDescription
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyDirector
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyDiscCompilation
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyDiscNumber
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyEQ
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyEncodedBy
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyEncodingTool
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyExecProducer
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyGenreID
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyGrouping
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyLinerNotes
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyLyrics
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyOnlineExtras
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyOriginalArtist
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyPerformer
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyPhonogramRights
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyPlaylistID
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyPredefinedGenre
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyProducer
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyPublisher
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyRecordCompany
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyReleaseDate
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeySoloist
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeySongID
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeySongName
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeySoundEngineer
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyThanks
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyTrackNumber
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyTrackSubTitle
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyUserComment
|| __DATA_CONST.__const _AVMetadataiTunesMetadataKeyUserGenre
|| __DATA_CONST.__const _AVMovieReferenceRestrictionsKey
|| __DATA_CONST.__const _AVMovieShouldPrepareToOptimizeForExclusivePlaybackKey
|| __DATA_CONST.__const _AVMovieShouldSupportAliasDataReferencesKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackDisplayNameKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackExtendedLanguageTagKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackIdentifierKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackIsDefaultKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackMediaCharactersticsKey
|| __DATA_CONST.__const _AVOutOfBandAlternateTrackSourceKey
|| __DATA_CONST.__const _AVOutputContextAddOutputDeviceOptionAuthorizationToken
|| __DATA_CONST.__const _AVOutputContextAddOutputDeviceOptionCancelIfAuthRequired
|| __DATA_CONST.__const _AVOutputContextAddOutputDeviceOptionFadePlayback
|| __DATA_CONST.__const _AVOutputContextAddOutputDeviceOptionInitiator
|| __DATA_CONST.__const _AVOutputContextCanSetVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextCommunicationChannelControlTypeDirect
|| __DATA_CONST.__const _AVOutputContextCommunicationChannelControlTypeRelayed
|| __DATA_CONST.__const _AVOutputContextCommunicationChannelOptionControlType
|| __DATA_CONST.__const _AVOutputContextDestinationChangeCancellationReasonAuthorizationSkipped
|| __DATA_CONST.__const _AVOutputContextDestinationChangeDeviceIDKey
|| __DATA_CONST.__const _AVOutputContextDestinationChangeInitiatedNotification
|| __DATA_CONST.__const _AVOutputContextDestinationChangeInitiatorKey
|| __DATA_CONST.__const _AVOutputContextDestinationChangeKey
|| __DATA_CONST.__const _AVOutputContextDestinationChangePreviousDeviceIDsKey
|| __DATA_CONST.__const _AVOutputContextDestinationChangeReasonIdleDisconnect
|| __DATA_CONST.__const _AVOutputContextDestinationChangeReasonKey
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonDeviceInUse
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonDeviceNotConnectedToInternet
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonDeviceNotMFiCertified
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonDeviceOutOfRange
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonInfraRelayFailed2GHzNetwork
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonInfraRelayFailedMultiDFSNetwork
|| __DATA_CONST.__const _AVOutputContextDeviceConnectionFailureReasonNotAPeerInHomeGroup
|| __DATA_CONST.__const _AVOutputContextDeviceGroupControlOptionCancelAddDeviceIfAuthRequired
|| __DATA_CONST.__const _AVOutputContextGlobalOutputDeviceConfigurationDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextManagerFailureReasonKey
|| __DATA_CONST.__const _AVOutputContextManagerOutputContextDidFailToConnectToOutputDeviceNotification
|| __DATA_CONST.__const _AVOutputContextManagerOutputDeviceKey
|| __DATA_CONST.__const _AVOutputContextOutputDeviceDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextOutputDevicesDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextPredictedOutputDeviceDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextProvidesControlForAllVolumeFeaturesDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved
|| __DATA_CONST.__const _AVOutputContextRemoveOutputDeviceOptionFadePlayback
|| __DATA_CONST.__const _AVOutputContextRemoveOutputDeviceOptionInitiator
|| __DATA_CONST.__const _AVOutputContextSetOutputDeviceCancelIfAuthRequiredKey
|| __DATA_CONST.__const _AVOutputContextSetOutputDeviceFadePlaybackKey
|| __DATA_CONST.__const _AVOutputContextSetOutputDeviceInitiatorKey
|| __DATA_CONST.__const _AVOutputContextSetOutputDevicePasswordKey
|| __DATA_CONST.__const _AVOutputContextSetOutputDeviceSuppressUserInteractionOnSenderOnlyKey
|| __DATA_CONST.__const _AVOutputContextSetOutputDevicesOptionFadePlayback
|| __DATA_CONST.__const _AVOutputContextSetOutputDevicesOptionInitiator
|| __DATA_CONST.__const _AVOutputContextTypeAudio
|| __DATA_CONST.__const _AVOutputContextTypeGroupControl
|| __DATA_CONST.__const _AVOutputContextTypeScreen
|| __DATA_CONST.__const _AVOutputContextTypeSharedAudioPresentation
|| __DATA_CONST.__const _AVOutputContextTypeSharedSystemAudio
|| __DATA_CONST.__const _AVOutputContextTypeSharedSystemScreen
|| __DATA_CONST.__const _AVOutputContextTypeVideo
|| __DATA_CONST.__const _AVOutputContextVolumeControlTypeDidChangeNotification
|| __DATA_CONST.__const _AVOutputContextVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceAuthorizationRequestRetryReasonIncorrectAuthorizationToken
|| __DATA_CONST.__const _AVOutputDeviceAuthorizationTokenTypePIN
|| __DATA_CONST.__const _AVOutputDeviceAuthorizationTokenTypePassword
|| __DATA_CONST.__const _AVOutputDeviceBatteryLevelCaseKey
|| __DATA_CONST.__const _AVOutputDeviceBatteryLevelLeftKey
|| __DATA_CONST.__const _AVOutputDeviceBatteryLevelRightKey
|| __DATA_CONST.__const _AVOutputDeviceBluetoothListeningModeActiveNoiseCancellation
|| __DATA_CONST.__const _AVOutputDeviceBluetoothListeningModeAudioTransparency
|| __DATA_CONST.__const _AVOutputDeviceBluetoothListeningModeNormal
|| __DATA_CONST.__const _AVOutputDeviceCanSetVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceClusterMemberVolumeControlTypeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceClusterMemberVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelControlTypeDirect
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelControlTypeRelayed
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelDataDestinationFitness
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelDataDestinationMediaRemote
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOpenCancellationReasonAuthorizationSkipped
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOptionCancelIfAuthRequired
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOptionControlType
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOptionCorrelationID
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOptionInitiator
|| __DATA_CONST.__const _AVOutputDeviceCommunicationChannelOptionUsePerCommChannelDelegate
|| __DATA_CONST.__const _AVOutputDeviceConfigurationCancellationReasonAuthorizationSkipped
|| __DATA_CONST.__const _AVOutputDeviceConfigurationOptionCancelConfigurationIfAuthRequired
|| __DATA_CONST.__const _AVOutputDeviceDiscoverySessionAvailableOutputDeviceGroupsDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceDiscoverySessionAvailableOutputDevicesDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceGroupAddOutputDeviceOptionAuthorizationToken
|| __DATA_CONST.__const _AVOutputDeviceGroupAddOutputDeviceOptionCancelIfAuthRequired
|| __DATA_CONST.__const _AVOutputDeviceGroupAddOutputDeviceOptionInitiator
|| __DATA_CONST.__const _AVOutputDeviceGroupMembershipChangeInitiatorKey
|| __DATA_CONST.__const _AVOutputDeviceGroupMembershipChangeResultCancellationReasonAuthorizationSkipped
|| __DATA_CONST.__const _AVOutputDeviceGroupOutputDevicesDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceGroupRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved
|| __DATA_CONST.__const _AVOutputDeviceGroupRemoveOutputDeviceOptionInitiator
|| __DATA_CONST.__const _AVOutputDeviceGroupVolumeControlTypeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceGroupVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceIsInEarKey
|| __DATA_CONST.__const _AVOutputDeviceLocalDeviceDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceProposedGroupIDDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceSecondDisplayModeDefault
|| __DATA_CONST.__const _AVOutputDeviceSecondDisplayModeMediaPresentation
|| __DATA_CONST.__const _AVOutputDeviceSupportsDataOverACLProtocolKey
|| __DATA_CONST.__const _AVOutputDeviceVolumeControlTypeDidChangeNotification
|| __DATA_CONST.__const _AVOutputDeviceVolumeDidChangeNotification
|| __DATA_CONST.__const _AVOutputSettingsPreset1280x720
|| __DATA_CONST.__const _AVOutputSettingsPreset1920x1080
|| __DATA_CONST.__const _AVOutputSettingsPreset3840x2160
|| __DATA_CONST.__const _AVOutputSettingsPreset640x480
|| __DATA_CONST.__const _AVOutputSettingsPreset960x540
|| __DATA_CONST.__const _AVOutputSettingsPresetHEVC1920x1080
|| __DATA_CONST.__const _AVOutputSettingsPresetHEVC1920x1080WithAlpha
|| __DATA_CONST.__const _AVOutputSettingsPresetHEVC3840x2160
|| __DATA_CONST.__const _AVOutputSettingsPresetHEVC3840x2160WithAlpha
|| __DATA_CONST.__const _AVOutputSettingsPresetHEVC7680x4320
|| __DATA_CONST.__const _AVPerceptualQualityOptimizationKey
|| __DATA_CONST.__const _AVPlatformIdentifierIOS
|| __DATA_CONST.__const _AVPlatformIdentifierMacOS
|| __DATA_CONST.__const _AVPlatformIdentifierTVOS
|| __DATA_CONST.__const _AVPlatformIdentifierWatchOS
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyCoordinatingStart
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyCurrentItemIdentifier
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyExpectedEndTime
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyNextItemIdentifier
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyProtocolVersion
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyReadyToSetNonZeroRate
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeySuspensionReasons
|| __DATA_CONST.__const _AVPlaybackCoordinationParticipantStateKeyUUID
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyIsAuthoritative
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyItemIdentifier
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyItemTime
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyLamportTimestamp
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyNetworkTime
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyOriginatorUUID
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyPrerollRate
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeyRate
|| __DATA_CONST.__const _AVPlaybackCoordinationTransportControlStateKeySeekPrecision
|| __DATA_CONST.__const _AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKeyCommand
|| __DATA_CONST.__const _AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKeyParticipantUUID
|| __DATA_CONST.__const _AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKeyRate
|| __DATA_CONST.__const _AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectKeyTime
|| __DATA_CONST.__const _AVPlaybackCoordinatorDidIssueCommandToPlaybackObjectNotification
|| __DATA_CONST.__const _AVPlaybackCoordinatorOtherParticipantsDidChangeNotification
|| __DATA_CONST.__const _AVPlaybackCoordinatorPlaybackObjectCommandSetRate
|| __DATA_CONST.__const _AVPlaybackCoordinatorPlaybackObjectCommandSetRateAndTime
|| __DATA_CONST.__const _AVPlaybackCoordinatorPlaybackObjectCommandSetTime
|| __DATA_CONST.__const _AVPlaybackCoordinatorSuspensionReasonsDidChangeNotification
|| __DATA_CONST.__const _AVPlayerAudiovisualBackgroundPlaybackPolicyDidChangeNotification
|| __DATA_CONST.__const _AVPlayerAvailableHDRModesDidChangeNotification
|| __DATA_CONST.__const _AVPlayerBackgroundPIPAuthorizationTokenDidChangeNotification
|| __DATA_CONST.__const _AVPlayerCaptionPipelineStrategyAttributedStrings
|| __DATA_CONST.__const _AVPlayerCaptionPipelineStrategyFigCaptions
|| __DATA_CONST.__const _AVPlayerCaptionRenderingStrategyCaptionDisplayService
|| __DATA_CONST.__const _AVPlayerCaptionRenderingStrategyCoreTextSubtitleRenderer
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeAdvancementAfterErrorReason
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeAdvancementAtItemEndTimeReason
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeAdvancementForOverlappedPlaybackReason
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeEnqueueingReason
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeNotification
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeReasonKey
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeRemovalReason
|| __DATA_CONST.__const _AVPlayerCurrentItemDidChangeUnknownReason
|| __DATA_CONST.__const _AVPlayerEligibleForHDRPlaybackDidChangeNotification
|| __DATA_CONST.__const _AVPlayerInterstitialEventJoinCue
|| __DATA_CONST.__const _AVPlayerInterstitialEventLeaveCue
|| __DATA_CONST.__const _AVPlayerInterstitialEventMonitorCurrentEventDidChangeNotification
|| __DATA_CONST.__const _AVPlayerInterstitialEventMonitorEventsDidChangeNotification
|| __DATA_CONST.__const _AVPlayerInterstitialEventNoCue
|| __DATA_CONST.__const _AVPlayerItemAudibleDRMInfoGroupID
|| __DATA_CONST.__const _AVPlayerItemBecameCurrentNotification
|| __DATA_CONST.__const _AVPlayerItemDidPlayToEndTimeNotification
|| __DATA_CONST.__const _AVPlayerItemFailedToPlayToEndTimeErrorKey
|| __DATA_CONST.__const _AVPlayerItemFailedToPlayToEndTimeNotification
|| __DATA_CONST.__const _AVPlayerItemGaplessInfoDurationInFramesKey
|| __DATA_CONST.__const _AVPlayerItemGaplessInfoEncodingDelayInFramesKey
|| __DATA_CONST.__const _AVPlayerItemGaplessInfoEncodingDrainInFramesKey
|| __DATA_CONST.__const _AVPlayerItemGaplessInfoHeuristicInfoKey
|| __DATA_CONST.__const _AVPlayerItemGaplessInfoLastPacketsResyncKey
|| __DATA_CONST.__const _AVPlayerItemHasEnqueuedVideoFrameDidChangeNotification
|| __DATA_CONST.__const _AVPlayerItemLegibleOutputTextStylingResolutionDefault
|| __DATA_CONST.__const _AVPlayerItemLegibleOutputTextStylingResolutionSourceAndRulesOnly
|| __DATA_CONST.__const _AVPlayerItemMediaSelectionDidChangeNotification
|| __DATA_CONST.__const _AVPlayerItemNewAccessLogEntryNotification
|| __DATA_CONST.__const _AVPlayerItemNewErrorLogEntryNotification
|| __DATA_CONST.__const _AVPlayerItemOverlappedPlaybackDidCompleteNotification
|| __DATA_CONST.__const _AVPlayerItemOverlappedPlaybackWillBeginNotification
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsBandwidthSlopFactorKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsBytesStillNeededToEndKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsCurrentMeasuredBytesPerSecondKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsDurationFromNowToEndKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsEstimatedTimeToLikelyToKeepUpKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsRawMeasuredBytesPerSecondKey
|| __DATA_CONST.__const _AVPlayerItemPlayabilityMetricsRemoteIPAddress
|| __DATA_CONST.__const _AVPlayerItemPlaybackStalledNotification
|| __DATA_CONST.__const _AVPlayerItemReachedTimeToPauseBufferingNotification
|| __DATA_CONST.__const _AVPlayerItemReachedTimeToPausePlaybackNotification
|| __DATA_CONST.__const _AVPlayerItemRecommendedTimeOffsetFromLiveDidChangeNotification
|| __DATA_CONST.__const _AVPlayerItemSeekDidCancelNotification
|| __DATA_CONST.__const _AVPlayerItemSeekDidCompleteNotification
|| __DATA_CONST.__const _AVPlayerItemSeekIDKey
|| __DATA_CONST.__const _AVPlayerItemSpatialAudioRenderingDidChangeNotification
|| __DATA_CONST.__const _AVPlayerItemStoppedBeingCurrentNotification
|| __DATA_CONST.__const _AVPlayerItemSuppressesVideoLayersDidChangeNotification
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedNotification
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedOriginatingParticipantKey
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonChangeInCoordinatedPlaybackTiming
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonClientInitiated
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonEndOfCoordinatedPlaybackSuspension
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonInterstitialResumptionOffset
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonJoiningCoordinatedPlayback
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonKey
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonRejoiningCoordinatedPlayback
|| __DATA_CONST.__const _AVPlayerItemTimeJumpedReasonUnknown
|| __DATA_CONST.__const _AVPlayerItemVariantChangedNotification
|| __DATA_CONST.__const _AVPlayerItemVideoEnhancementModeAdaptive
|| __DATA_CONST.__const _AVPlayerItemVideoEnhancementModeDigitalZoom
|| __DATA_CONST.__const _AVPlayerItemVideoEnhancementModeLivePhoto
|| __DATA_CONST.__const _AVPlayerItemVideoEnhancementModeNone
|| __DATA_CONST.__const _AVPlayerLayerIsPartOfForegroundSceneDidChangeNotification
|| __DATA_CONST.__const _AVPlayerLayerVisibilityDidChangeNotification
|| __DATA_CONST.__const _AVPlayerMultichannelAudioStrategyMatchMultichannelTrackPreferenceToAudioDevice
|| __DATA_CONST.__const _AVPlayerMultichannelAudioStrategyPreferAC3ViaExclusivePassthrough
|| __DATA_CONST.__const _AVPlayerMultichannelAudioStrategyPreferStereo
|| __DATA_CONST.__const _AVPlayerPlaybackWasInterruptedNotification
|| __DATA_CONST.__const _AVPlayerRateDidChangeAppBackgroundedReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeAudioSessionInterruptedReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeCoordinatedPlaybackReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeNotification
|| __DATA_CONST.__const _AVPlayerRateDidChangeOriginatingParticipantKey
|| __DATA_CONST.__const _AVPlayerRateDidChangePauseAtItemEndReason
|| __DATA_CONST.__const _AVPlayerRateDidChangePlaybackResumedReason
|| __DATA_CONST.__const _AVPlayerRateDidChangePlaybackStalledReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeRateChangeIdentifierKey
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonAppBackgrounded
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonAudioSessionInterrupted
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonCoordinatedPlayback
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonKey
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonPauseAtItemEnd
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonPlaybackResumed
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonPlaybackStalled
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonRouteChanged
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonSetRateCalled
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonSetRateFailed
|| __DATA_CONST.__const _AVPlayerRateDidChangeReasonStatusChanged
|| __DATA_CONST.__const _AVPlayerRateDidChangeRouteChangedReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeSetRateCalledReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeSetRateFailedReason
|| __DATA_CONST.__const _AVPlayerRateDidChangeStatusChangedReason
|| __DATA_CONST.__const _AVPlayerRolePIP
|| __DATA_CONST.__const _AVPlayerRoleScanning
|| __DATA_CONST.__const _AVPlayerWaitingDuringInterstitialEventReason
|| __DATA_CONST.__const _AVPlayerWaitingForCoordinatedPlaybackReason
|| __DATA_CONST.__const _AVPlayerWaitingToMinimizeStallsReason
|| __DATA_CONST.__const _AVPlayerWaitingWhileEvaluatingBufferingRateReason
|| __DATA_CONST.__const _AVPlayerWaitingWithNoItemToPlayReason
|| __DATA_CONST.__const _AVPropertyListForProxyCreationOption_ReduceMetadataForPhotoLibrary
|| __DATA_CONST.__const _AVProtectedContentProviderFairPlay
|| __DATA_CONST.__const _AVRouteDetectorMultipleRoutesDetectedDidChangeNotification
|| __DATA_CONST.__const _AVRoutingSessionManagerAllLikelyDestinationsDidChangeNotification
|| __DATA_CONST.__const _AVRoutingSessionManagerCurrentSessionDidChangeNotification
|| __DATA_CONST.__const _AVRoutingSessionManagerLikelyExternalDestinationsDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferAudioRendererFlushTimeKey
|| __DATA_CONST.__const _AVSampleBufferAudioRendererOutputConfigurationDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferAudioRendererWasFlushedAutomaticallyNotification
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerFailedToDecodeNotification
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerFailedToDecodeNotificationErrorKey
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerOutputObscuredDueToInsufficientExternalProtectionDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerRequiresFlushToResumeDecodingDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerVideoRectDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferDisplayLayerVisibilityDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferRenderSynchronizerRateDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferSTSLabelDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferVideoRendererDidFailToDecodeNotification
|| __DATA_CONST.__const _AVSampleBufferVideoRendererDidFailToDecodeNotificationErrorKey
|| __DATA_CONST.__const _AVSampleBufferVideoRendererOutputObscuredDueToInsufficientExternalProtectionDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferVideoRendererRequiresFlushToResumeDecodingDidChangeNotification
|| __DATA_CONST.__const _AVSampleBufferVideoRendererVisibilityDidChangeNotification
|| __DATA_CONST.__const _AVStreamDataParserContentKeyRequestProtocolVersionsKey
|| __DATA_CONST.__const _AVStreamingKeyDeliveryContentKeyType
|| __DATA_CONST.__const _AVStreamingKeyDeliveryPersistentContentKeyType
|| __DATA_CONST.__const _AVTrackAssociationTypeAudioFallback
|| __DATA_CONST.__const _AVTrackAssociationTypeChapterList
|| __DATA_CONST.__const _AVTrackAssociationTypeFallback
|| __DATA_CONST.__const _AVTrackAssociationTypeForcedSubtitlesOnly
|| __DATA_CONST.__const _AVTrackAssociationTypeMapDependency
|| __DATA_CONST.__const _AVTrackAssociationTypeMetadataReferent
|| __DATA_CONST.__const _AVTrackAssociationTypeSelectionFollower
|| __DATA_CONST.__const _AVTrackAssociationTypeTimecode
|| __DATA_CONST.__const _AVTrackAssociationTypeVideoMap
|| __DATA_CONST.__const _AVURLAssetAirPlayAuthorizationInfoKey
|| __DATA_CONST.__const _AVURLAssetAllowableAudioCodecTypesKey
|| __DATA_CONST.__const _AVURLAssetAllowableCaptionFormatsKey
|| __DATA_CONST.__const _AVURLAssetAllowableTypeCategoriesKey
|| __DATA_CONST.__const _AVURLAssetAllowableVideoCodecTypesKey
|| __DATA_CONST.__const _AVURLAssetAllowedHTTPProtocolTypesKey
|| __DATA_CONST.__const _AVURLAssetAllowsCellularAccessKey
|| __DATA_CONST.__const _AVURLAssetAllowsConstrainedNetworkAccessKey
|| __DATA_CONST.__const _AVURLAssetAllowsExpensiveNetworkAccessKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationContentProviderKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationHierarchyTokenKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationMediaIdentifierKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationOptionsKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationServiceIdentifierKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationServiceInformationKey
|| __DATA_CONST.__const _AVURLAssetAlternativeConfigurationiTunesServiceMonitoringKey
|| __DATA_CONST.__const _AVURLAssetApplicationTransportSecurityKey
|| __DATA_CONST.__const _AVURLAssetBoundNetworkInterfaceName
|| __DATA_CONST.__const _AVURLAssetCacheKey
|| __DATA_CONST.__const _AVURLAssetCacheNonPurgeableMemoryLimitKey
|| __DATA_CONST.__const _AVURLAssetCacheUseNonPurgeableMemoryKey
|| __DATA_CONST.__const _AVURLAssetClientAuditTokenKey
|| __DATA_CONST.__const _AVURLAssetClientBundleIdentifierKey
|| __DATA_CONST.__const _AVURLAssetDownloadCompleteFailedNotification
|| __DATA_CONST.__const _AVURLAssetDownloadCompleteNotificationErrorKey
|| __DATA_CONST.__const _AVURLAssetDownloadCompleteSuccessNotification
|| __DATA_CONST.__const _AVURLAssetDownloadDestinationURLKey
|| __DATA_CONST.__const _AVURLAssetDownloadIsLowPriorityKey
|| __DATA_CONST.__const _AVURLAssetDownloadTokenKey
|| __DATA_CONST.__const _AVURLAssetEnableMultiPath
|| __DATA_CONST.__const _AVURLAssetEnableQUICKey
|| __DATA_CONST.__const _AVURLAssetForceQUICKey
|| __DATA_CONST.__const _AVURLAssetHTTPCookiesKey
|| __DATA_CONST.__const _AVURLAssetHTTPHeaderFieldsKey
|| __DATA_CONST.__const _AVURLAssetHTTPUserAgentKey
|| __DATA_CONST.__const _AVURLAssetInheritURIQueryComponentFromReferencingURIKey
|| __DATA_CONST.__const _AVURLAssetLoggingIdentifier
|| __DATA_CONST.__const _AVURLAssetMaxSizeAllowedForCellularAccessKey
|| __DATA_CONST.__const _AVURLAssetNetworkLatencyMitigationKeyPodcastsOnly
|| __DATA_CONST.__const _AVURLAssetNetworkProbeRequestDisabledKey
|| __DATA_CONST.__const _AVURLAssetOptimizeAccessForLinearMoviePlaybackKey
|| __DATA_CONST.__const _AVURLAssetOutOfBandAlternateTracksKey
|| __DATA_CONST.__const _AVURLAssetOutOfBandMIMETypeKey
|| __DATA_CONST.__const _AVURLAssetParentNetworkActivityKey
|| __DATA_CONST.__const _AVURLAssetPreferLargeResourceRequests
|| __DATA_CONST.__const _AVURLAssetPreferPreciseDurationAndTimingKey
|| __DATA_CONST.__const _AVURLAssetPreloadDurationWhenNextItemKey
|| __DATA_CONST.__const _AVURLAssetPrimarySessionIdentifierKey
|| __DATA_CONST.__const _AVURLAssetProtectedContentSupportStorageURLKey
|| __DATA_CONST.__const _AVURLAssetPurchaseBundleKey
|| __DATA_CONST.__const _AVURLAssetReadAheadOnByteStreamCreationEnabledKey
|| __DATA_CONST.__const _AVURLAssetReferenceRestrictionsKey
|| __DATA_CONST.__const _AVURLAssetRemoteCustomURLHandlerContextKey
|| __DATA_CONST.__const _AVURLAssetRequiresCustomURLLoadingKey
|| __DATA_CONST.__const _AVURLAssetSSLPropertiesKey
|| __DATA_CONST.__const _AVURLAssetShouldMatchDataInCacheByURLPathComponentOnlyKey
|| __DATA_CONST.__const _AVURLAssetShouldMatchDataInCacheByURLWithoutQueryComponentKey
|| __DATA_CONST.__const _AVURLAssetTypeKey
|| __DATA_CONST.__const _AVURLAssetURLRequestAttributionKey
|| __DATA_CONST.__const _AVURLAssetUnitTestOptions
|| __DATA_CONST.__const _AVURLAssetUseAppleWirelessDirectLinkKey
|| __DATA_CONST.__const _AVURLAssetUseClientURLLoadingExclusively
|| __DATA_CONST.__const _AVURLAssetUsesNoPersistentCacheKey
|| __DATA_CONST.__const _AVURLAssetVideoNotEligibleForAppRecordingKey
|| __DATA_CONST.__const _AVURLAssetWhitelistQUICKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentAlternateContentInfoAssetURLStringKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentAlternateContentInfoKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentDSIDKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentDownloadParametersKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentHLSAssetURLStringKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentIDKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentInfoKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentPurchasedMediaKindKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentRentalIDKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentTypeKey
|| __DATA_CONST.__const _AVURLAssetiTunesStoreContentUserAgentKey
|| __DATA_CONST.__const _AVVideoAllowFrameReorderingKey
|| __DATA_CONST.__const _AVVideoAllowWideColorKey
|| __DATA_CONST.__const _AVVideoApertureModeCleanAperture
|| __DATA_CONST.__const _AVVideoApertureModeEncodedPixels
|| __DATA_CONST.__const _AVVideoApertureModeProductionAperture
|| __DATA_CONST.__const _AVVideoAppleProRAWBitDepthKey
|| __DATA_CONST.__const _AVVideoAverageBitRateKey
|| __DATA_CONST.__const _AVVideoAverageNonDroppableFrameRateKey
|| __DATA_CONST.__const _AVVideoCleanApertureHeightKey
|| __DATA_CONST.__const _AVVideoCleanApertureHorizontalOffsetKey
|| __DATA_CONST.__const _AVVideoCleanApertureKey
|| __DATA_CONST.__const _AVVideoCleanApertureVerticalOffsetKey
|| __DATA_CONST.__const _AVVideoCleanApertureWidthKey
|| __DATA_CONST.__const _AVVideoCodecH264
|| __DATA_CONST.__const _AVVideoCodecHEVC
|| __DATA_CONST.__const _AVVideoCodecJPEG
|| __DATA_CONST.__const _AVVideoCodecKey
|| __DATA_CONST.__const _AVVideoCodecTypeAppleProRes422
|| __DATA_CONST.__const _AVVideoCodecTypeAppleProRes422HQ
|| __DATA_CONST.__const _AVVideoCodecTypeAppleProRes422LT
|| __DATA_CONST.__const _AVVideoCodecTypeAppleProRes422Proxy
|| __DATA_CONST.__const _AVVideoCodecTypeAppleProRes4444
|| __DATA_CONST.__const _AVVideoCodecTypeH264
|| __DATA_CONST.__const _AVVideoCodecTypeHEVC
|| __DATA_CONST.__const _AVVideoCodecTypeHEVCWithAlpha
|| __DATA_CONST.__const _AVVideoCodecTypeJPEG
|| __DATA_CONST.__const _AVVideoColorPrimariesKey
|| __DATA_CONST.__const _AVVideoColorPrimaries_ITU_R_2020
|| __DATA_CONST.__const _AVVideoColorPrimaries_ITU_R_709_2
|| __DATA_CONST.__const _AVVideoColorPrimaries_P3_D65
|| __DATA_CONST.__const _AVVideoColorPrimaries_SMPTE_C
|| __DATA_CONST.__const _AVVideoColorPropertiesKey
|| __DATA_CONST.__const _AVVideoCompressionPropertiesKey
|| __DATA_CONST.__const _AVVideoDecompressionPropertiesKey
|| __DATA_CONST.__const _AVVideoEmitSequencesAtSyncFramesOnly
|| __DATA_CONST.__const _AVVideoExpectedSourceFrameRateKey
|| __DATA_CONST.__const _AVVideoFrameRateConversionAlgorithm
|| __DATA_CONST.__const _AVVideoFrameRateConversionAlgorithmFast
|| __DATA_CONST.__const _AVVideoFrameRateConversionAlgorithmPrecise
|| __DATA_CONST.__const _AVVideoH264EntropyModeCABAC
|| __DATA_CONST.__const _AVVideoH264EntropyModeCAVLC
|| __DATA_CONST.__const _AVVideoH264EntropyModeKey
|| __DATA_CONST.__const _AVVideoHeightKey
|| __DATA_CONST.__const _AVVideoMaxKeyFrameIntervalDurationKey
|| __DATA_CONST.__const _AVVideoMaxKeyFrameIntervalKey
|| __DATA_CONST.__const _AVVideoMinimumFrameDuration
|| __DATA_CONST.__const _AVVideoMinimumIntervalForSyncFrames
|| __DATA_CONST.__const _AVVideoPixelAspectRatioHorizontalSpacingKey
|| __DATA_CONST.__const _AVVideoPixelAspectRatioKey
|| __DATA_CONST.__const _AVVideoPixelAspectRatioVerticalSpacingKey
|| __DATA_CONST.__const _AVVideoProfileLevelH264Baseline30
|| __DATA_CONST.__const _AVVideoProfileLevelH264Baseline31
|| __DATA_CONST.__const _AVVideoProfileLevelH264Baseline41
|| __DATA_CONST.__const _AVVideoProfileLevelH264BaselineAutoLevel
|| __DATA_CONST.__const _AVVideoProfileLevelH264High40
|| __DATA_CONST.__const _AVVideoProfileLevelH264High41
|| __DATA_CONST.__const _AVVideoProfileLevelH264HighAutoLevel
|| __DATA_CONST.__const _AVVideoProfileLevelH264Main30
|| __DATA_CONST.__const _AVVideoProfileLevelH264Main31
|| __DATA_CONST.__const _AVVideoProfileLevelH264Main32
|| __DATA_CONST.__const _AVVideoProfileLevelH264Main41
|| __DATA_CONST.__const _AVVideoProfileLevelH264MainAutoLevel
|| __DATA_CONST.__const _AVVideoProfileLevelKey
|| __DATA_CONST.__const _AVVideoQualityKey
|| __DATA_CONST.__const _AVVideoRangeHLG
|| __DATA_CONST.__const _AVVideoRangePQ
|| __DATA_CONST.__const _AVVideoRangeSDR
|| __DATA_CONST.__const _AVVideoScalingModeFit
|| __DATA_CONST.__const _AVVideoScalingModeKey
|| __DATA_CONST.__const _AVVideoScalingModeResize
|| __DATA_CONST.__const _AVVideoScalingModeResizeAspect
|| __DATA_CONST.__const _AVVideoScalingModeResizeAspectFill
|| __DATA_CONST.__const _AVVideoTransferFunctionKey
|| __DATA_CONST.__const _AVVideoTransferFunction_ITU_R_2100_HLG
|| __DATA_CONST.__const _AVVideoTransferFunction_ITU_R_709_2
|| __DATA_CONST.__const _AVVideoTransferFunction_Linear
|| __DATA_CONST.__const _AVVideoTransferFunction_SMPTE_ST_2084_PQ
|| __DATA_CONST.__const _AVVideoWidthKey
|| __DATA_CONST.__const _AVVideoYCbCrMatrixKey
|| __DATA_CONST.__const _AVVideoYCbCrMatrix_ITU_R_2020
|| __DATA_CONST.__const _AVVideoYCbCrMatrix_ITU_R_601_4
|| __DATA_CONST.__const _AVVideoYCbCrMatrix_ITU_R_709_2
|| __DATA_CONST.__const _my_UIApplicationDidEnterBackgroundNotification
|| __DATA_CONST.__const _my_UIApplicationDidFinishSuspensionSnapshotNotification
|| __DATA_CONST.__const _my_UIApplicationWillEnterForegroundNotification
|| __DATA_CONST.__const _my_UIApplicationWillResignActiveNotification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAssetCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAssetDownloadConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAssetResourceLoader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAssetTrack
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAssetVariant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVAudioSessionMediaPlayerOnly
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCMNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVCallbackContextRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVComposition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVContentKeySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVDispatchOnce
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVExecutionEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVExternalDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigAssetInspectorLoader
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigRouteDescriptorOutputDeviceImpl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVFigRoutingContextOutputContextImpl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVKVODispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVKeyPathDependencyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMapPublisher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMediaFileType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMediaSelection
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMediaSelectionGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMediaSelectionOption
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMetadataItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMovie
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMutableMetadataItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVMutableMovie
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVObservationBlockFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVOccasionalTimebaseObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVOutputDeviceDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVOutputDeviceDiscoverySessionAvailableOutputDevices
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPeriodicTimebaseObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlaybackCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerItemMediaDataCollector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerItemMetadataCollector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerItemTrack
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerLayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPlayerPlaybackCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVPropertyValuePublisher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVRunLoopCondition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSampleBufferAudioRenderer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSampleBufferDisplayLayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSampleBufferRenderSynchronizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSinkSubscriber
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSpecifiedLoggingIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVStreamDataParser
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVSwitchToLatestPublisher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVTwoPartKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVURLAsset
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVWeakObservableCallbackCancellationHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVWeakObservationBlockFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVWeakReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AVWeakReferencingDelegateStorage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAssetCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAssetDownloadConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAssetResourceLoader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAssetTrack
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAssetVariant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVAudioSessionMediaPlayerOnly
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCMNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVCallbackContextRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVComposition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVContentKeySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVDispatchOnce
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVExecutionEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVExternalDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigAssetInspectorLoader
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigRouteDescriptorOutputDeviceImpl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVFigRoutingContextOutputContextImpl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVKVODispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVKeyPathDependencyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMapPublisher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMediaFileType
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMediaSelection
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMediaSelectionGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMediaSelectionOption
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMetadataItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMovie
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMutableMetadataItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVMutableMovie
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVObservationBlockFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVOccasionalTimebaseObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVOutputContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVOutputDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVOutputDeviceDiscoverySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVOutputDeviceDiscoverySessionAvailableOutputDevices
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPeriodicTimebaseObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlaybackCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerItemMediaDataCollector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerItemMetadataCollector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerItemTrack
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerLayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPlayerPlaybackCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVPropertyValuePublisher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVRunLoopCondition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSampleBufferAudioRenderer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSampleBufferDisplayLayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSampleBufferRenderSynchronizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSinkSubscriber
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSpecifiedLoggingIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVStreamDataParser
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVSwitchToLatestPublisher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVTwoPartKeyPath
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVURLAsset
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVWeakObservableCallbackCancellationHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVWeakObservationBlockFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVWeakReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AVWeakReferencingDelegateStorage
|| __TEXT.__const _AVCoreAnimationBeginTimeAtZero
|| __TEXT.__text _AVAllAvailableNSBundleCompatibleLanguageTagsForObjects
|| __TEXT.__text _AVCGPointFromNSValue
|| __TEXT.__text _AVCGRectFromNSValue
|| __TEXT.__text _AVCGSizeFromNSValue
|| __TEXT.__text _AVCopyBestAudioChannelLayoutFromFormatDescription
|| __TEXT.__text _AVDictionaryWithTimeRange
|| __TEXT.__text _AVEnsureNotOnMainThread
|| __TEXT.__text _AVErrorForClientProgrammingError
|| __TEXT.__text _AVErrorWithNSErrorAndOSStatus
|| __TEXT.__text _AVExtendedLanguageTagFromLocale
|| __TEXT.__text _AVFigRouteDiscovererFactorySetFactoryForQueue
|| __TEXT.__text _AVFileNameWithExtensionThatAccordsWithUTI
|| __TEXT.__text _AVFormatDescriptionFromSerializedAtomData
|| __TEXT.__text _AVFullMethodName
|| __TEXT.__text _AVFullMethodNameFromClass
|| __TEXT.__text _AVIsSpecialSpokenExtendedLanguageTag
|| __TEXT.__text _AVLanguageCodeFromExtendedLanguageTag
|| __TEXT.__text _AVLanguageCodeFromPackedLanguageCode
|| __TEXT.__text _AVLocalizedError
|| __TEXT.__text _AVLocalizedErrorWithUnderlyingOSStatus
|| __TEXT.__text _AVLocalizedErrorWithUnderlyingOSStatusAndUnderlyingError
|| __TEXT.__text _AVLocalizedStringFromTable
|| __TEXT.__text _AVLocalizedStringFromTableWithBundleIdentifier
|| __TEXT.__text _AVLocalizedStringFromTableWithLocale
|| __TEXT.__text _AVLocalizedStringFromTableWithLocaleWithBundleIdentifier
|| __TEXT.__text _AVMakeBlockSchedulerThatExecutesBlocksSynchronously
|| __TEXT.__text _AVMakeBlockSchedulerThatSerializesBlocksPrefersSynchronousExecutionAndAllowsReentrantExecution
|| __TEXT.__text _AVMakeRectWithAspectRatioInsideRect
|| __TEXT.__text _AVMediaSubtypeDescriptionStringForFormatDescription
|| __TEXT.__text _AVMediaSubtypesForAC3
|| __TEXT.__text _AVMediaSubtypesForEnhancedAC3
|| __TEXT.__text _AVMediaTypeFromCMMediaType
|| __TEXT.__text _AVMethodExceptionReasonWithClassAndSelector
|| __TEXT.__text _AVMethodExceptionReasonWithObjectAndSelector
|| __TEXT.__text _AVNSLanguageIdentifiersMatchAccordingToRFC4647FilteringRules
|| __TEXT.__text _AVNSLocalesMatchAccordingToRFC4647FilteringRules
|| __TEXT.__text _AVNSValueWithCGPoint
|| __TEXT.__text _AVNSValueWithCGRect
|| __TEXT.__text _AVNSValueWithCGSize
|| __TEXT.__text _AVOSTypeForString
|| __TEXT.__text _AVOutputDeviceGetFigRouteDescriptor
|| __TEXT.__text _AVPotentialRaceCondition
|| __TEXT.__text _AVRampsIncludesRampThatOverlapsTimeRange
|| __TEXT.__text _AVRequestConcreteImplementation
|| __TEXT.__text _AVRequireConcreteObject
|| __TEXT.__text _AVSampleBufferAttachContentKey
|| __TEXT.__text _AVSerializeOnQueueAsyncIfNecessary
|| __TEXT.__text _AVSerializedAtomDataFromFormatDescription
|| __TEXT.__text _AVStringForOSType
|| __TEXT.__text _AVSynthesizeAVMediaCharacteristicsFromFigValues
|| __TEXT.__text _AVTranslateAVMediaCharacteristicToFigMediaCharacteristic
|| __TEXT.__text _AVTranslateAVMediaCharacteristicsToFigMediaCharacteristics
|| __TEXT.__text _AVTranslateFigMediaCharacteristicToAVMediaCharacteristic
|| __TEXT.__text _AVTranslateFigMediaCharacteristicsToAVMediaCharacteristics
|| __TEXT.__text _AVTwoPartKeyPathMake
|| __TEXT.__text _AVUnsupportedOutputURLPathExtensions
|| __TEXT.__text _AVVideoCodecTypeFromCMVideoCodecType
|| __TEXT.__text _AVVideoOutputSettingsVTCLAPDictionaryForAVCLAPDictionary
|| __TEXT.__text _AVVideoOutputSettingsVTPASPDictionaryForAVPASPDictionary
|| __TEXT.__text _CMMediaTypeFromAVMediaType
|| __TEXT.__text _CMTimeHash
|| __TEXT.__text _CMVideoCodecTypeFromAVVideoCodecType
|| __TEXT.__text _ErrorIsAVFoundationError
|| __TEXT.__text _NSDictionaryFromCMTime
|| __TEXT.__text _audioChannelLayoutChannelCount
|| __TEXT.__text _av_readwrite_dispatch_queue_create
|| __TEXT.__text _av_readwrite_dispatch_queue_read
|| __TEXT.__text _av_readwrite_dispatch_queue_write
|| __TEXT.__text _av_readwrite_dispatch_queue_write_async
__ AVFAudio: _AVAudioBitRateStrategy_Constant
__ AVFAudio: _AVAudioBitRateStrategy_LongTermAverage
__ AVFAudio: _AVAudioBitRateStrategy_Variable
__ AVFAudio: _AVAudioBitRateStrategy_VariableConstrained
__ AVFAudio: _AVAudioSessionCategoryAmbient
__ AVFAudio: _AVAudioSessionCategoryAudioProcessing
__ AVFAudio: _AVAudioSessionCategoryPlayAndRecord
__ AVFAudio: _AVAudioSessionCategoryPlayback
__ AVFAudio: _AVAudioSessionCategoryPlaybackNoSpeaker
__ AVFAudio: _AVAudioSessionCategoryRecord
__ AVFAudio: _AVAudioSessionCategorySoloAmbient
__ AVFAudio: _AVAudioSessionModeDefault
__ AVFAudio: _AVAudioSessionModeGameChat
__ AVFAudio: _AVAudioSessionModeMeasurement
__ AVFAudio: _AVAudioSessionModeVideoRecording
__ AVFAudio: _AVAudioSessionModeVoiceChat
__ AVFAudio: _AVChannelLayoutKey
__ AVFAudio: _AVEncoderAudioQualityForVBRKey
__ AVFAudio: _AVEncoderAudioQualityKey
__ AVFAudio: _AVEncoderBitDepthHintKey
__ AVFAudio: _AVEncoderBitRateKey
__ AVFAudio: _AVEncoderBitRatePerChannelKey
__ AVFAudio: _AVEncoderBitRateStrategyKey
__ AVFAudio: _AVFormatIDKey
__ AVFAudio: _AVLinearPCMBitDepthKey
__ AVFAudio: _AVLinearPCMIsBigEndianKey
__ AVFAudio: _AVLinearPCMIsFloatKey
__ AVFAudio: _AVLinearPCMIsNonInterleaved
__ AVFAudio: _AVNumberOfChannelsKey
__ AVFAudio: _AVSampleRateConverterAlgorithmKey
__ AVFAudio: _AVSampleRateConverterAlgorithm_Mastering
__ AVFAudio: _AVSampleRateConverterAlgorithm_Normal
__ AVFAudio: _AVSampleRateConverterAudioQualityKey
__ AVFAudio: _AVSampleRateKey
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AirPlaySync: _APSyncControllerCloseSpeakerCommChannel
__ AirPlaySync: _APSyncControllerCopyProperty
__ AirPlaySync: _APSyncControllerGetLocalSpeakerUUIDWithCompletion
__ AirPlaySync: _APSyncControllerOpenSpeakerCommChannel
__ AirPlaySync: _APSyncControllerRemoteCopyShared
__ AirPlaySync: _APSyncControllerSendSpeakerData
__ AirPlaySync: _APSyncControllerSetProperty
__ AirPlaySync: _APSyncControllerSetSpeakerGroup
__ AirPlaySync: _kAPSyncControllerNotificationProperty_CommChannelUUID
__ AirPlaySync: _kAPSyncControllerNotificationProperty_Data
__ AirPlaySync: _kAPSyncControllerNotificationProperty_ID
__ AirPlaySync: _kAPSyncControllerNotification_GroupMembersChanged
__ AirPlaySync: _kAPSyncControllerNotification_GroupVolumeChanged
__ AirPlaySync: _kAPSyncControllerNotification_GroupVolumeControlSupportedChanged
__ AirPlaySync: _kAPSyncControllerNotification_GroupVolumeControlTypeChanged
__ AirPlaySync: _kAPSyncControllerNotification_GroupsAvailableChanged
__ AirPlaySync: _kAPSyncControllerNotification_LocalSpeakerChanged
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerCommChannelClosed
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerProposedGroupIDChanged
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerReceivedData
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerVolumeChanged
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerVolumeControlSupportedChanged
__ AirPlaySync: _kAPSyncControllerNotification_SpeakerVolumeControlTypeChanged
__ AirPlaySync: _kAPSyncControllerOpenFailureReason
__ AirPlaySync: _kAPSyncControllerOpenFailureReason_UserSkippedAuth
__ AirPlaySync: _kAPSyncControllerOpenSpeakerCommChannelOptionClientTypeUUID_MediaRemote
__ AirPlaySync: _kAPSyncControllerOpenSpeakerCommChannelOption_CancelIfAuthRequired
__ AirPlaySync: _kAPSyncControllerOpenSpeakerCommChannelOption_ClientTypeUUID
__ AirPlaySync: _kAPSyncControllerOpenSpeakerCommChannelOption_ControlType
__ AirPlaySync: _kAPSyncControllerProperty_DeviceCategory
__ AirPlaySync: _kAPSyncControllerProperty_DeviceName
__ AirPlaySync: _kAPSyncControllerProperty_DeviceUUIDListForSpeaker
__ AirPlaySync: _kAPSyncControllerProperty_GroupVolume
__ AirPlaySync: _kAPSyncControllerProperty_GroupVolumeControlSupported
__ AirPlaySync: _kAPSyncControllerProperty_GroupVolumeControlType
__ AirPlaySync: _kAPSyncControllerProperty_IsClusterLeader
__ AirPlaySync: _kAPSyncControllerProperty_IsSupportedSpeaker
__ AirPlaySync: _kAPSyncControllerProperty_MediaRemoteControllable
__ AirPlaySync: _kAPSyncControllerProperty_PrimarySpeakerID
__ AirPlaySync: _kAPSyncControllerProperty_RemoteGroupUUIDList
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerClustered
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerCurrentGroupID
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerIsSilentPrimary
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerProposedGroupID
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerRouteDescriptor
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerVolume
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerVolumeControlSupported
__ AirPlaySync: _kAPSyncControllerProperty_SpeakerVolumeControlType
__ AirPlaySync: _kAPSyncControllerProperty_SpeakersInGroup
__ AirPlaySync: _kAPSyncControllerSetSpeakerGroupOption_AuthorizationToken
__ AirPlaySync: _kAPSyncControllerSetSpeakerGroupOption_CancelIfAuthRequired
__ AirPlaySync: _kAPSyncControllerSetSpeakerGroupOption_ContinuePlayingAfterLastDeviceRemoved
__ AirPlaySync: _kAPSyncControllerSetSpeakerGroupOption_Initiator
__ AudioToolbox: _AudioConverterDispose
__ AudioToolbox: _AudioConverterGetProperty
__ AudioToolbox: _AudioConverterGetPropertyInfo
__ AudioToolbox: _AudioConverterNew
__ AudioToolbox: _AudioFileGetGlobalInfo
__ AudioToolbox: _AudioFileGetGlobalInfoSize
__ AudioToolbox: _AudioFormatGetProperty
__ AudioToolbox: _AudioFormatGetPropertyInfo
__ CFNetwork: _CFHTTPMessageCopyAllHeaderFields
__ CFNetwork: _CFHTTPMessageCopyHeaderFieldValue
__ CFNetwork: _CFHTTPMessageCreateRequest
__ CFNetwork: _CFHTTPMessageGetResponseStatusCode
__ CFNetwork: _CFHTTPMessageSetHeaderFieldValue
__ CFNetwork: _CFURLConnectionCancel
__ CFNetwork: _CFURLConnectionCreate
__ CFNetwork: _CFURLConnectionScheduleWithRunLoop
__ CFNetwork: _CFURLConnectionStart
__ CFNetwork: _CFURLRequestCopyAllHTTPHeaderFields
__ CFNetwork: _CFURLRequestCreateHTTPRequest
__ CFNetwork: _CFURLRequestGetURL
__ CFNetwork: _CFURLResponseGetHTTPResponse
__ CFNetwork: _CFURLResponseGetMIMEType
__ CFNetwork: _OBJC_CLASS_$_AVAssetDownloadTask
__ CFNetwork: _OBJC_CLASS_$_AVAssetDownloadURLSession
__ CFNetwork: _OBJC_CLASS_$_NSHTTPCookie
__ CFNetwork: _OBJC_CLASS_$_NSHTTPURLResponse
__ CFNetwork: _OBJC_CLASS_$_NSMutableURLRequest
__ CFNetwork: _OBJC_CLASS_$_NSURLAuthenticationChallenge
__ CFNetwork: _OBJC_CLASS_$_NSURLCredential
__ CFNetwork: _OBJC_CLASS_$_NSURLSession
__ CFNetwork: _OBJC_CLASS_$_NSURLSessionTask
__ CFNetwork: _OBJC_METACLASS_$_AVAssetDownloadTask
__ CFNetwork: _OBJC_METACLASS_$_AVAssetDownloadURLSession
__ CFNetwork: _OBJC_METACLASS_$_NSURLAuthenticationChallenge
__ CFNetwork: _OBJC_METACLASS_$_NSURLSessionTask
__ CFNetwork: _kCFHTTPVersion1_1
__ CoreFoundation: _CFAllocatorAllocate
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayCreate
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleCopyLocalizedStringForLocalization
__ CoreFoundation: _CFBundleGetBundleWithIdentifier
__ CoreFoundation: _CFCopyDescription
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDataGetTypeID
__ CoreFoundation: _CFDictionaryAddValue
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryCreateCopy
__ CoreFoundation: _CFDictionaryCreateMutable
__ CoreFoundation: _CFDictionaryCreateMutableCopy
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetKeysAndValues
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFDictionaryGetValueIfPresent
__ CoreFoundation: _CFDictionaryRemoveValue
__ CoreFoundation: _CFDictionarySetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFErrorGetDomain
__ CoreFoundation: _CFGetAllocator
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFHash
__ CoreFoundation: _CFLocaleCreate
__ CoreFoundation: _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes
__ CoreFoundation: _CFMakeCollectable
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFNumberGetByteSize
__ CoreFoundation: _CFNumberGetType
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFNumberIsFloatType
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyKeyList
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesGetAppIntegerValue
__ CoreFoundation: _CFPreferencesSetMultiple
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopRemoveSource
__ CoreFoundation: _CFRunLoopRunInMode
__ CoreFoundation: _CFRunLoopSourceCreate
__ CoreFoundation: _CFRunLoopSourceSignal
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFURLCopyAbsoluteURL
__ CoreFoundation: _CFURLGetBaseURL
__ CoreFoundation: _CFURLGetTypeID
__ CoreFoundation: _CFUUIDCreateFromString
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSLocaleLanguageCode
__ CoreFoundation: _NSRangeException
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSEnumerator
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableData
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: _OBJC_METACLASS_$_NSArray
__ CoreFoundation: _OBJC_METACLASS_$_NSEnumerator
__ CoreFoundation: __CFLocaleCopyNumberingSystemForLocaleIdentifier
__ CoreFoundation: __CFMZEnabled
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFCopyStringDictionaryKeyCallBacks
__ CoreFoundation: _kCFErrorDebugDescriptionKey
__ CoreFoundation: _kCFNull
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformEqualToTransform
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformIsIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGColorCreate
__ CoreGraphics: _CGColorEqualToColor
__ CoreGraphics: _CGColorGetColorSpace
__ CoreGraphics: _CGColorGetComponents
__ CoreGraphics: _CGColorGetTypeID
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCopyICCData
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceCreateWithICCData
__ CoreGraphics: _CGColorSpaceCreateWithName
__ CoreGraphics: _CGColorSpaceGetModel
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGPointCreateDictionaryRepresentation
__ CoreGraphics: _CGPointMakeWithDictionaryRepresentation
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectCreateDictionaryRepresentation
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectInfinite
__ CoreGraphics: _CGRectMakeWithDictionaryRepresentation
__ CoreGraphics: _CGRectStandardize
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeCreateDictionaryRepresentation
__ CoreGraphics: _CGSizeMakeWithDictionaryRepresentation
__ CoreGraphics: _CGSizeZero
__ CoreGraphics: _kCGColorSpaceSRGB
__ CoreImage: _OBJC_CLASS_$_CIColor
__ CoreImage: _OBJC_CLASS_$_CIContext
__ CoreImage: _OBJC_CLASS_$_CIImage
__ CoreMedia: _CMAudioFormatDescriptionCreateSummary
__ CoreMedia: _CMAudioFormatDescriptionGetChannelLayout
__ CoreMedia: _CMAudioFormatDescriptionGetRichestDecodableFormat
__ CoreMedia: _CMAudioFormatDescriptionGetStreamBasicDescription
__ CoreMedia: _CMBaseObjectGetVTable
__ CoreMedia: _CMBaseObjectIsMemberOfClass
__ CoreMedia: _CMBlockBufferAppendBufferReference
__ CoreMedia: _CMBlockBufferCopyDataBytes
__ CoreMedia: _CMBlockBufferCreateContiguous
__ CoreMedia: _CMBlockBufferCreateEmpty
__ CoreMedia: _CMBlockBufferCreateWithBufferReference
__ CoreMedia: _CMBlockBufferGetDataLength
__ CoreMedia: _CMBlockBufferGetDataPointer
__ CoreMedia: _CMBlockBufferIsRangeContiguous
__ CoreMedia: _CMByteStreamCreateForBlockBuffer
__ CoreMedia: _CMByteStreamGetCMBaseObject
__ CoreMedia: _CMClockGetHostTimeClock
__ CoreMedia: _CMClockGetTime
__ CoreMedia: _CMClockMakeHostTimeFromSystemUnits
__ CoreMedia: _CMFormatDescriptionEqual
__ CoreMedia: _CMFormatDescriptionEqualIgnoringExtensionKeys
__ CoreMedia: _CMFormatDescriptionGetExtension
__ CoreMedia: _CMFormatDescriptionGetExtensions
__ CoreMedia: _CMFormatDescriptionGetMediaSubType
__ CoreMedia: _CMFormatDescriptionGetMediaType
__ CoreMedia: _CMFormatDescriptionGetTypeID
__ CoreMedia: _CMFormatDescriptionGetWidestColorPropertiesFromFormatDescriptions
__ CoreMedia: _CMFormatDescriptionGetWidestGamutAndLargestDynamicRangeColorPropertiesFromFormatDescriptions
__ CoreMedia: _CMGetAttachment
__ CoreMedia: _CMMetadataCreateIdentifierForKeyAndKeySpace
__ CoreMedia: _CMMetadataCreateKeyFromIdentifier
__ CoreMedia: _CMMetadataCreateKeySpaceFromIdentifier
__ CoreMedia: _CMMetadataDataTypeRegistryDataTypeConformsToDataType
__ CoreMedia: _CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType
__ CoreMedia: _CMMetadataFormatDescriptionCreateWithMetadataSpecifications
__ CoreMedia: _CMNotificationCenterAddListener
__ CoreMedia: _CMNotificationCenterBarrier
__ CoreMedia: _CMNotificationCenterGetDefaultLocalCenter
__ CoreMedia: _CMNotificationCenterPostNotification
__ CoreMedia: _CMNotificationCenterRemoveListener
__ CoreMedia: _CMSampleBufferCallForEachSample
__ CoreMedia: _CMSampleBufferCreate
__ CoreMedia: _CMSampleBufferDataIsReady
__ CoreMedia: _CMSampleBufferGetDataBuffer
__ CoreMedia: _CMSampleBufferGetDuration
__ CoreMedia: _CMSampleBufferGetFormatDescription
__ CoreMedia: _CMSampleBufferGetImageBuffer
__ CoreMedia: _CMSampleBufferGetNumSamples
__ CoreMedia: _CMSampleBufferGetOutputDuration
__ CoreMedia: _CMSampleBufferGetOutputPresentationTimeStamp
__ CoreMedia: _CMSampleBufferGetSampleSize
__ CoreMedia: _CMSampleBufferGetSampleTimingInfo
__ CoreMedia: _CMSampleBufferGetTotalSampleSize
__ CoreMedia: _CMSampleBufferHasDataFailed
__ CoreMedia: _CMSampleBufferSetOutputPresentationTimeStamp
__ CoreMedia: _CMSetAttachment
__ CoreMedia: _CMSyncConvertTime
__ CoreMedia: _CMTextFormatDescriptionGetDisplayFlags
__ CoreMedia: _CMTimeAdd
__ CoreMedia: _CMTimeCompare
__ CoreMedia: _CMTimeConvertScale
__ CoreMedia: _CMTimeCopyAsDictionary
__ CoreMedia: _CMTimeCopyDescription
__ CoreMedia: _CMTimeFoldIntoRange
__ CoreMedia: _CMTimeGetSeconds
__ CoreMedia: _CMTimeMake
__ CoreMedia: _CMTimeMakeFromDictionary
__ CoreMedia: _CMTimeMakeWithSeconds
__ CoreMedia: _CMTimeMappingCopyAsDictionary
__ CoreMedia: _CMTimeMappingMake
__ CoreMedia: _CMTimeMappingMakeFromDictionary
__ CoreMedia: _CMTimeMaximum
__ CoreMedia: _CMTimeMinimum
__ CoreMedia: _CMTimeMultiplyByFloat64
__ CoreMedia: _CMTimeRangeContainsTime
__ CoreMedia: _CMTimeRangeCopyAsDictionary
__ CoreMedia: _CMTimeRangeCopyDescription
__ CoreMedia: _CMTimeRangeEqual
__ CoreMedia: _CMTimeRangeGetEnd
__ CoreMedia: _CMTimeRangeGetIntersection
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _CMTimeRangeMakeFromDictionary
__ CoreMedia: _CMTimeSubtract
__ CoreMedia: _CMTimebaseAddTimerDispatchSource
__ CoreMedia: _CMTimebaseCreateLoopingTimebase
__ CoreMedia: _CMTimebaseCreateReadOnlyTimebase
__ CoreMedia: _CMTimebaseCreateWithSourceClock
__ CoreMedia: _CMTimebaseGetRate
__ CoreMedia: _CMTimebaseGetTime
__ CoreMedia: _CMTimebaseGetTimeClampedAboveAnchorTime
__ CoreMedia: _CMTimebaseRemoveTimerDispatchSource
__ CoreMedia: _CMTimebaseSetRate
__ CoreMedia: _CMTimebaseSetTime
__ CoreMedia: _CMTimebaseSetTimerDispatchSourceNextFireTime
__ CoreMedia: _CMVideoFormatDescriptionGetDimensions
__ CoreMedia: _CMVideoFormatDescriptionGetPresentationDimensions
__ CoreMedia: _CMVideoFormatDescriptionGetVideoDynamicRange
__ CoreMedia: _FigAtomicAdd32
__ CoreMedia: _FigAtomicCompareAndSwap32
__ CoreMedia: _FigAtomicCompareAndSwapPtr
__ CoreMedia: _FigAtomicIncrement32
__ CoreMedia: _FigAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout
__ CoreMedia: _FigBoxedMetadataAppendCFTypedValue
__ CoreMedia: _FigBoxedMetadataAppendCGPoint
__ CoreMedia: _FigBoxedMetadataAppendCGRect
__ CoreMedia: _FigBoxedMetadataAppendCGSize
__ CoreMedia: _FigBoxedMetadataCreateForConstruction
__ CoreMedia: _FigBoxedMetadataEndConstruction
__ CoreMedia: _FigBoxedMetadataGetBlockBuffer
__ CoreMedia: _FigBoxedMetadataGetFormatDescription
__ CoreMedia: _FigBoxedMetadataGetTypeID
__ CoreMedia: _FigCFArrayAppendInt32
__ CoreMedia: _FigCFArrayCreateMutableCopy
__ CoreMedia: _FigCFArrayGetInt32AtIndex
__ CoreMedia: _FigCFCopyCompactDescription
__ CoreMedia: _FigCFDateCreateFromString
__ CoreMedia: _FigCFDictionaryCreateMutableCopy
__ CoreMedia: _FigCFDictionaryGetBooleanIfPresent
__ CoreMedia: _FigCFDictionaryGetCMTimeIfPresent
__ CoreMedia: _FigCFDictionaryGetFloatIfPresent
__ CoreMedia: _FigCFDictionaryGetInt32IfPresent
__ CoreMedia: _FigCFDictionaryGetInt64IfPresent
__ CoreMedia: _FigCFDictionarySetCGSize
__ CoreMedia: _FigCFDictionarySetCMTime
__ CoreMedia: _FigCFDictionarySetInt32
__ CoreMedia: _FigCFDictionarySetInt64
__ CoreMedia: _FigCFDictionarySetValue
__ CoreMedia: _FigCFEqual
__ CoreMedia: _FigCFNumberCreateSInt32
__ CoreMedia: _FigCFNumberCreateSInt64
__ CoreMedia: _FigCFNumberCreateUInt32
__ CoreMedia: _FigCFNumberCreateUInt64
__ CoreMedia: _FigCFNumberGetUInt64
__ CoreMedia: _FigCFStringCreateLoggingIdentifierOfLength
__ CoreMedia: _FigCFURLCreateCacheKey
__ CoreMedia: _FigCFURLIsLocalResource
__ CoreMedia: _FigCFWeakReferenceHolderCopyReferencedObject
__ CoreMedia: _FigCFWeakReferenceHolderCreateWithReferencedObject
__ CoreMedia: _FigConcurrentAccessDetectorBeginReading
__ CoreMedia: _FigConcurrentAccessDetectorBeginWriting
__ CoreMedia: _FigConcurrentAccessDetectorCreate
__ CoreMedia: _FigConcurrentAccessDetectorDestroy
__ CoreMedia: _FigConcurrentAccessDetectorEndReading
__ CoreMedia: _FigConcurrentAccessDetectorEndWriting
__ CoreMedia: _FigCopyCGColorSRGBAsArray
__ CoreMedia: _FigCopyRankedLanguagesAccordingToPreferredLanguages
__ CoreMedia: _FigCreateBlockBufferWithCFDataNoCopy
__ CoreMedia: _FigCreateCFDataWithBlockBufferNoCopy
__ CoreMedia: _FigCreateCGColorSRGBFromArray
__ CoreMedia: _FigCustomURLHandlerRemoteClientCreateWithXPCEndpoint
__ CoreMedia: _FigCustomURLHandlerRemoteCreateWithID
__ CoreMedia: _FigCustomURLHandlerServerAssociateObjectAndContentKeySessionByPID
__ CoreMedia: _FigCustomURLHandlerServerCopyXPCEndpoint
__ CoreMedia: _FigCustomURLHandlerServerEnsure
__ CoreMedia: _FigCustomURLRequestInfoCopyAllowedUniversalTypeIdentifiers
__ CoreMedia: _FigCustomURLRequestInfoCopyCryptKeyAttributes
__ CoreMedia: _FigCustomURLRequestInfoCopyCryptor
__ CoreMedia: _FigCustomURLRequestInfoCopyHTTPHeaders
__ CoreMedia: _FigCustomURLRequestInfoCopyNSURLAuthenticationChallenge
__ CoreMedia: _FigCustomURLRequestInfoCopyURL
__ CoreMedia: _FigCustomURLRequestInfoCopyUserAgent
__ CoreMedia: _FigCustomURLRequestInfoGetByteRange
__ CoreMedia: _FigCustomURLRequestInfoGetCryptorKeyRequestID
__ CoreMedia: _FigCustomURLRequestInfoGetIsPingRequest
__ CoreMedia: _FigCustomURLRequestInfoGetIsRenewalRequest
__ CoreMedia: _FigCustomURLRequestInfoGetIsSecureStopSupported
__ CoreMedia: _FigCustomURLResponseInfoCreateMutable
__ CoreMedia: _FigCustomURLResponseInfoSetContentLength
__ CoreMedia: _FigCustomURLResponseInfoSetContentRenewalDate
__ CoreMedia: _FigCustomURLResponseInfoSetFinalURL
__ CoreMedia: _FigCustomURLResponseInfoSetHTTPHeaders
__ CoreMedia: _FigCustomURLResponseInfoSetHTTPStatusCode
__ CoreMedia: _FigCustomURLResponseInfoSetIsByteRangeAccessSupported
__ CoreMedia: _FigCustomURLResponseInfoSetIsCachingDisabled
__ CoreMedia: _FigCustomURLResponseInfoSetIsEntireLengthAvailableOnDemand
__ CoreMedia: _FigCustomURLResponseInfoSetNSURLCredential
__ CoreMedia: _FigCustomURLResponseInfoSetNSURLSessionAuthChallengeDisposition
__ CoreMedia: _FigCustomURLResponseInfoSetRedirectLocation
__ CoreMedia: _FigCustomURLResponseInfoSetRedirectRequestHeaders
__ CoreMedia: _FigCustomURLResponseInfoSetResourceSize
__ CoreMedia: _FigCustomURLResponseInfoSetRoundTripTime
__ CoreMedia: _FigCustomURLResponseInfoSetUniversalTypeIdentifier
__ CoreMedia: _FigEndpointCopyActiveEndpointOfType
__ CoreMedia: _FigEndpointExtendedGetClassID
__ CoreMedia: _FigEndpointGetCMBaseObject
__ CoreMedia: _FigGeometryDimensionMake
__ CoreMedia: _FigGeometryMarginsCopyAsDictionary
__ CoreMedia: _FigGeometryMarginsMake
__ CoreMedia: _FigGetCFPreferenceNumberWithDefault
__ CoreMedia: _FigIsReferenceAllowedBySecurityPolicy
__ CoreMedia: _FigKTraceInit
__ CoreMedia: _FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors
__ CoreMedia: _FigNote_AllowInternalDefaultLogs
__ CoreMedia: _FigNotificationCenterAddWeakListener
__ CoreMedia: _FigNotificationCenterAddWeakListeners
__ CoreMedia: _FigNotificationCenterRemoveWeakListener
__ CoreMedia: _FigNotificationCenterRemoveWeakListeners
__ CoreMedia: _FigReadOnlyTimebaseSetTargetTimebase
__ CoreMedia: _FigReentrantMutexCreate
__ CoreMedia: _FigReentrantMutexDestroy
__ CoreMedia: _FigReentrantMutexLock
__ CoreMedia: _FigReentrantMutexTryLock
__ CoreMedia: _FigReentrantMutexUnlock
__ CoreMedia: _FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData
__ CoreMedia: _FigRemote_CreateSerializedAtomDataForFormatDescriptions
__ CoreMedia: _FigSampleBufferGetCaptionGroup
__ CoreMedia: _FigSampleBufferSetDecryptor
__ CoreMedia: _FigSignalErrorAt
__ CoreMedia: _FigSimpleMutexCreate
__ CoreMedia: _FigSimpleMutexDestroy
__ CoreMedia: _FigSimpleMutexLock
__ CoreMedia: _FigSimpleMutexUnlock
__ CoreMedia: _FigThreadGetGlobalNetworkBufferingRunloop
__ CoreMedia: _FigTimelineCoordinationParticipantSnapshotCopySuspensionReasons
__ CoreMedia: _FigTimelineCoordinationParticipantSnapshotIsReadyToSetNonZeroRate
__ CoreMedia: _FigTimelineCoordinatorBeginSuspension
__ CoreMedia: _FigTimelineCoordinatorCoordinateJumpToTime
__ CoreMedia: _FigTimelineCoordinatorCoordinateRateChange
__ CoreMedia: _FigTimelineCoordinatorCopyParticipantSnapshotForUUID
__ CoreMedia: _FigTimelineCoordinatorCreate
__ CoreMedia: _FigTimelineCoordinatorEndSuspension
__ CoreMedia: _FigTimelineCoordinatorEndSuspensionProposingNewTime
__ CoreMedia: _FigTimelineCoordinatorGetExpectedTimeAtHostTime
__ CoreMedia: _FigTimelineCoordinatorHandleAssignmentOfUUIDToLocalParticipantByMedium
__ CoreMedia: _FigTimelineCoordinatorHandleRemovalOfParticipantStateFromMedium
__ CoreMedia: _FigTimelineCoordinatorHandleReplacementOfAllParticipantStatesFromMedium
__ CoreMedia: _FigTimelineCoordinatorHandleTransitionToNewTimelineFromTimelineControl
__ CoreMedia: _FigTimelineCoordinatorHandleUpdatedParticipantStateFromMedium
__ CoreMedia: _FigTimelineCoordinatorHandleUpdatedTimelineStateFromMedium
__ CoreMedia: _FigTimelineCoordinatorReapplyGroupStateViaTimelineControl
__ CoreMedia: _FigTimelineCoordinatorSetProperty
__ CoreMedia: _FigTimelineCoordinatorSetWeakMediumAndCallbacks
__ CoreMedia: _FigTimelineCoordinatorSuspensionCreate
__ CoreMedia: _FigTimelineStateDictionaryGetStateLoggingIdentifier
__ CoreMedia: _FigXPCRelease
__ CoreMedia: _FigXPCRemoteClientDispose
__ CoreMedia: _FigXPCRetain
__ CoreMedia: __FigIsNotCurrentDispatchQueue
__ CoreMedia: _fig_log_emit
__ CoreMedia: _fig_note_initialize_logging
__ CoreMedia: _fig_note_initialize_with_default_work
__ CoreMedia: _gGMFigKTraceEnabled
__ CoreMedia: _kCMByteStreamProperty_URL
__ CoreMedia: _kCMFormatDescriptionExtension_SampleDescriptionExtensionAtoms
__ CoreMedia: _kCMFormatDescriptionExtension_VerbatimISOSampleEntry
__ CoreMedia: _kCMFormatDescriptionExtension_VerbatimSampleDescription
__ CoreMedia: _kCMMetadataBaseDataType_BMP
__ CoreMedia: _kCMMetadataBaseDataType_DimensionsF32
__ CoreMedia: _kCMMetadataBaseDataType_Float32
__ CoreMedia: _kCMMetadataBaseDataType_Float64
__ CoreMedia: _kCMMetadataBaseDataType_GIF
__ CoreMedia: _kCMMetadataBaseDataType_JPEG
__ CoreMedia: _kCMMetadataBaseDataType_JSON
__ CoreMedia: _kCMMetadataBaseDataType_PNG
__ CoreMedia: _kCMMetadataBaseDataType_PointF32
__ CoreMedia: _kCMMetadataBaseDataType_PolygonF32
__ CoreMedia: _kCMMetadataBaseDataType_PolylineF32
__ CoreMedia: _kCMMetadataBaseDataType_RawData
__ CoreMedia: _kCMMetadataBaseDataType_RectF32
__ CoreMedia: _kCMMetadataBaseDataType_SInt16
__ CoreMedia: _kCMMetadataBaseDataType_SInt32
__ CoreMedia: _kCMMetadataBaseDataType_SInt64
__ CoreMedia: _kCMMetadataBaseDataType_SInt8
__ CoreMedia: _kCMMetadataBaseDataType_UTF16
__ CoreMedia: _kCMMetadataBaseDataType_UTF8
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_DataType
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_ExtendedLanguageTag
__ CoreMedia: _kCMMetadataFormatDescriptionMetadataSpecificationKey_Identifier
__ CoreMedia: _kCMSampleAttachmentKey_AudioIndependentSampleDecoderRefreshCount
__ CoreMedia: _kCMSampleAttachmentKey_DependsOnOthers
__ CoreMedia: _kCMSampleAttachmentKey_HasRedundantCoding
__ CoreMedia: _kCMSampleAttachmentKey_IsDependedOnByOthers
__ CoreMedia: _kCMSampleBufferAttachmentKey_SampleReferenceURL
__ CoreMedia: _kCMSampleBufferNotificationParameter_OSStatus
__ CoreMedia: _kCMSampleBufferNotification_DataBecameReady
__ CoreMedia: _kCMSampleBufferNotification_DataFailed
__ CoreMedia: _kCMTextMarkupAttribute_BackgroundColorARGB
__ CoreMedia: _kCMTextMarkupAttribute_ForegroundColorARGB
__ CoreMedia: _kCMTextMarkupKey_TextSelector
__ CoreMedia: _kCMTextMarkupTextSelector_DefaultSelector
__ CoreMedia: _kCMTimeIndefinite
__ CoreMedia: _kCMTimeInvalid
__ CoreMedia: _kCMTimeMappingInvalid
__ CoreMedia: _kCMTimeNegativeInfinity
__ CoreMedia: _kCMTimePositiveInfinity
__ CoreMedia: _kCMTimeRangeInvalid
__ CoreMedia: _kCMTimeRangeZero
__ CoreMedia: _kCMTimeZero
__ CoreMedia: _kCMTimebaseNotification_EffectiveRateChanged
__ CoreMedia: _kCMTimebaseNotification_TimeJumped
__ CoreMedia: _kFigCKSCreationOption_SecureStopStorageLocation
__ CoreMedia: _kFigCKSCryptorCreationOption_CPERights
__ CoreMedia: _kFigCKSCryptorCreationOption_CryptKeyIdentifier
__ CoreMedia: _kFigCKSCryptorCreationOption_CryptorUsedByTransportStream
__ CoreMedia: _kFigCKSCryptorCreationOption_DecryptFormatType
__ CoreMedia: _kFigCKSCryptorCreationOption_ProtectionScheme
__ CoreMedia: _kFigCKSCryptorCreationOption_Sinfs
__ CoreMedia: _kFigCKSPropertyKey_AppIdentifier
__ CoreMedia: _kFigCKSPropertyKey_HasEstablishedProtector
__ CoreMedia: _kFigCKSPropertyKey_ProtectionSessionID
__ CoreMedia: _kFigCPECryptorProperty_AuthorizedToDecryptFormat
__ CoreMedia: _kFigCPECryptorProperty_CryptKeyAttributes
__ CoreMedia: _kFigCPECryptorProperty_IV
__ CoreMedia: _kFigCPECryptorProperty_Key
__ CoreMedia: _kFigCPECryptorProperty_KeyRequestError
__ CoreMedia: _kFigCPECryptorProperty_KeyRequestState
__ CoreMedia: _kFigCPECryptorProperty_PackagedPersistentKey
__ CoreMedia: _kFigCPECryptorProperty_ProtocolVersionList
__ CoreMedia: _kFigCPECryptorProperty_UUID
__ CoreMedia: _kFigCPECryptorProperty_UsePersistentKey
__ CoreMedia: _kFigCPENotification_ExternalProtectionStateChanged
__ CoreMedia: _kFigClientServerRunLoopMode
__ CoreMedia: _kFigCustomURLHandlerOption_ClientRequestsRepresentAccurateNetworkStatistics
__ CoreMedia: _kFigCustomURLLoaderFinalReportKey_NetworkProtocolName
__ CoreMedia: _kFigCustomURLLoaderFinalReportKey_PrivacyStance
__ CoreMedia: _kFigEndpointAuthenticationType_MFiSAP
__ CoreMedia: _kFigEndpointBatteryLevel_Case
__ CoreMedia: _kFigEndpointBatteryLevel_Left
__ CoreMedia: _kFigEndpointBatteryLevel_Right
__ CoreMedia: _kFigEndpointBatteryLevel_Single
__ CoreMedia: _kFigEndpointCentralNotification_ScreenBecameAvailable
__ CoreMedia: _kFigEndpointCentralNotification_ScreenBecameUnavailable
__ CoreMedia: _kFigEndpointCentralNotification_iOSEntityIsDoingTurnByTurnChanged
__ CoreMedia: _kFigEndpointClusterCompositionDeviceDescriptionKey_IsClusterLeader
__ CoreMedia: _kFigEndpointClusterCompositionDeviceDescriptionKey_Model
__ CoreMedia: _kFigEndpointClusterCompositionDeviceDescriptionKey_RouteName
__ CoreMedia: _kFigEndpointClusterCompositionDeviceDescriptionKey_RouteUID
__ CoreMedia: _kFigEndpointClusterCompositionDeviceDescriptionKey_SubType
__ CoreMedia: _kFigEndpointClusterHierarchyDeviceDescriptionKey_SubComponents
__ CoreMedia: _kFigEndpointClusterType_GenericAudio
__ CoreMedia: _kFigEndpointClusterType_HT
__ CoreMedia: _kFigEndpointClusterType_StereoPair
__ CoreMedia: _kFigEndpointCommChannelCreationOptionClientTypeUUID_MediaRemote
__ CoreMedia: _kFigEndpointCommChannelCreationOption_ChannelID
__ CoreMedia: _kFigEndpointCommChannelCreationOption_ClientTypeUUID
__ CoreMedia: _kFigEndpointCommChannelCreationOption_ControlType
__ CoreMedia: _kFigEndpointConfigurationPeerDescription_Identifier
__ CoreMedia: _kFigEndpointConfigurationPeerDescription_Permissions
__ CoreMedia: _kFigEndpointConfigurationPeerDescription_PublicKey
__ CoreMedia: _kFigEndpointConfigurationRequest_PeersToAdd
__ CoreMedia: _kFigEndpointConfigurationRequest_PeersToRemove
__ CoreMedia: _kFigEndpointConfigurationResponse_PeersList
__ CoreMedia: _kFigEndpointConfiguration_DeviceName
__ CoreMedia: _kFigEndpointConfiguration_EnableHKAccessControl
__ CoreMedia: _kFigEndpointConfiguration_HKAccessControlLevel
__ CoreMedia: _kFigEndpointConfiguration_Password
__ CoreMedia: _kFigEndpointHIDKey_ScreenID
__ CoreMedia: _kFigEndpointHIDKey_UUID
__ CoreMedia: _kFigEndpointNotification_AuthenticationSucceeded
__ CoreMedia: _kFigEndpointNotification_LimitedUIChanged
__ CoreMedia: _kFigEndpointNotification_NightModeChanged
__ CoreMedia: _kFigEndpointNotification_PerformanceReportPosted
__ CoreMedia: _kFigEndpointNotification_ServerConnectionDied
__ CoreMedia: _kFigEndpointNotification_SiriRequested
__ CoreMedia: _kFigEndpointNotification_VehicleInformationChanged
__ CoreMedia: _kFigEndpointNotification_ViewAreaChanged
__ CoreMedia: _kFigEndpointNotification_iOSUIRequested
__ CoreMedia: _kFigEndpointProperty_AdvertisesHAPSupport
__ CoreMedia: _kFigEndpointProperty_AirPlayEndpointProperties
__ CoreMedia: _kFigEndpointProperty_AirPlayFromCloudSupported
__ CoreMedia: _kFigEndpointProperty_AirPlaySecurity
__ CoreMedia: _kFigEndpointProperty_AllowsHeadTrackedSpatialAudio
__ CoreMedia: _kFigEndpointProperty_AuthenticationData
__ CoreMedia: _kFigEndpointProperty_AuthenticationType
__ CoreMedia: _kFigEndpointProperty_BatteryLevel
__ CoreMedia: _kFigEndpointProperty_CarEntityIsDoingTurnByTurn
__ CoreMedia: _kFigEndpointProperty_CarEntityIsDoingVoiceRecognition
__ CoreMedia: _kFigEndpointProperty_CarEntityOwnsScreen
__ CoreMedia: _kFigEndpointProperty_CloudLibraryIsOn
__ CoreMedia: _kFigEndpointProperty_ClusterActivatedComposition
__ CoreMedia: _kFigEndpointProperty_ClusterComposition
__ CoreMedia: _kFigEndpointProperty_ClusterHierarchy
__ CoreMedia: _kFigEndpointProperty_ClusterSize
__ CoreMedia: _kFigEndpointProperty_ClusterType
__ CoreMedia: _kFigEndpointProperty_ExtendedFeatures
__ CoreMedia: _kFigEndpointProperty_ExternalPlaybackCannotFetchMediaFromSender
__ CoreMedia: _kFigEndpointProperty_ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets
__ CoreMedia: _kFigEndpointProperty_ExternalPlaybackDoesNotSupportEncryptedCRABS
__ CoreMedia: _kFigEndpointProperty_FirmwareVersion
__ CoreMedia: _kFigEndpointProperty_GroupContainsGroupLeader
__ CoreMedia: _kFigEndpointProperty_GroupUUID
__ CoreMedia: _kFigEndpointProperty_HIDs
__ CoreMedia: _kFigEndpointProperty_HKAccessControlLevel
__ CoreMedia: _kFigEndpointProperty_HeadTrackedSpatialAudioIsActive
__ CoreMedia: _kFigEndpointProperty_HeadTrackedSpatialAudioMode
__ CoreMedia: _kFigEndpointProperty_ID
__ CoreMedia: _kFigEndpointProperty_IsAppleMusicSubscriber
__ CoreMedia: _kFigEndpointProperty_IsBluetoothShareable
__ CoreMedia: _kFigEndpointProperty_IsClusterLeader
__ CoreMedia: _kFigEndpointProperty_IsGroupLeader
__ CoreMedia: _kFigEndpointProperty_IsGroupable
__ CoreMedia: _kFigEndpointProperty_IsHKAccessControlEnabled
__ CoreMedia: _kFigEndpointProperty_IsLowFidelity
__ CoreMedia: _kFigEndpointProperty_LimitedUI
__ CoreMedia: _kFigEndpointProperty_LimitedUIElements
__ CoreMedia: _kFigEndpointProperty_ListeningMode
__ CoreMedia: _kFigEndpointProperty_MACAddress
__ CoreMedia: _kFigEndpointProperty_Manufacturer
__ CoreMedia: _kFigEndpointProperty_MediaRemoteControllable
__ CoreMedia: _kFigEndpointProperty_Model
__ CoreMedia: _kFigEndpointProperty_Name
__ CoreMedia: _kFigEndpointProperty_NightMode
__ CoreMedia: _kFigEndpointProperty_OEMIconLabel
__ CoreMedia: _kFigEndpointProperty_OEMIconVisible
__ CoreMedia: _kFigEndpointProperty_OEMIcons
__ CoreMedia: _kFigEndpointProperty_PersistentGroupUUID
__ CoreMedia: _kFigEndpointProperty_RightHandDrive
__ CoreMedia: _kFigEndpointProperty_ScreenInfo
__ CoreMedia: _kFigEndpointProperty_SerialNumber
__ CoreMedia: _kFigEndpointProperty_SilentPrimary
__ CoreMedia: _kFigEndpointProperty_SubType
__ CoreMedia: _kFigEndpointProperty_SupportedFeatures
__ CoreMedia: _kFigEndpointProperty_SupportedListeningModes
__ CoreMedia: _kFigEndpointProperty_SupportsExtendedWHAFeatures
__ CoreMedia: _kFigEndpointProperty_SupportsHeadTrackedSpatialAudio
__ CoreMedia: _kFigEndpointProperty_SupportsRelay
__ CoreMedia: _kFigEndpointProperty_TightSyncBuddyNotReachable
__ CoreMedia: _kFigEndpointProperty_TightSyncIsGroupLeader
__ CoreMedia: _kFigEndpointProperty_TightSyncUUID
__ CoreMedia: _kFigEndpointProperty_TransportType
__ CoreMedia: _kFigEndpointProperty_Type
__ CoreMedia: _kFigEndpointProperty_VehicleInformation
__ CoreMedia: _kFigEndpointProperty_iOSEntityIsDoingTurnByTurn
__ CoreMedia: _kFigEndpointRemoteControlSessionClientTypeUUIDKey
__ CoreMedia: _kFigEndpointRemoteControlSessionClientTypeUUIDKey_FitnessUIOverlay
__ CoreMedia: _kFigEndpointRemoteControlSessionClientTypeUUIDKey_MediaRemote
__ CoreMedia: _kFigEndpointRemoteControlSessionCreationOption_ControlType
__ CoreMedia: _kFigEndpointRemoteControlSessionEvent_IncomingMessage
__ CoreMedia: _kFigEndpointRemoteControlSessionEvent_Invalidated
__ CoreMedia: _kFigEndpointRemoteControlSessionKey_SessionType
__ CoreMedia: _kFigEndpointScreenInfoKey_ID
__ CoreMedia: _kFigEndpointScreenInfoKey_InputCapabilities
__ CoreMedia: _kFigEndpointScreenInfoKey_PrimaryInputDevice
__ CoreMedia: _kFigEndpointScreenInfoKey_ViewAreas
__ CoreMedia: _kFigEndpointScreenInfoViewAreaKey_SafeArea
__ CoreMedia: _kFigEndpointScreenInfoViewAreaKey_ViewArea
__ CoreMedia: _kFigEndpointSecondDisplayMode
__ CoreMedia: _kFigEndpointSendCommand_CommandType_Configure
__ CoreMedia: _kFigEndpointSendCommand_CommandType_SetSecondDisplayMode
__ CoreMedia: _kFigEndpointSiriRequestedAction_ButtonDown
__ CoreMedia: _kFigEndpointSiriRequestedAction_ButtonUp
__ CoreMedia: _kFigEndpointSiriRequestedAction_Prewarm
__ CoreMedia: _kFigEndpointSiriRequestedKey_Action
__ CoreMedia: _kFigEndpointSubType_AppleTV
__ CoreMedia: _kFigEndpointSubType_ClusterGeneric
__ CoreMedia: _kFigEndpointSubType_ClusterGenericAudio
__ CoreMedia: _kFigEndpointSubType_ClusterHomeTheater
__ CoreMedia: _kFigEndpointSubType_ClusterStereoPair
__ CoreMedia: _kFigEndpointSubType_HomePod
__ CoreMedia: _kFigEndpointSubType_Mac
__ CoreMedia: _kFigEndpointSubType_ThirdPartySetTopBox
__ CoreMedia: _kFigEndpointSubType_ThirdPartySpeaker
__ CoreMedia: _kFigEndpointSubType_ThirdPartyTV
__ CoreMedia: _kFigEndpointSubType_ThirdPartyTVStick
__ CoreMedia: _kFigEndpointSubType_iOS
__ CoreMedia: _kFigEndpointTransportType_AWDL
__ CoreMedia: _kFigEndpointTransportType_Ethernet
__ CoreMedia: _kFigEndpointTransportType_USB
__ CoreMedia: _kFigEndpointTransportType_WiFi
__ CoreMedia: _kFigEndpointType_Bluetooth
__ CoreMedia: _kFigEndpointType_CarPlay
__ CoreMedia: _kFigEndpointVehicleInformationChangedKey_NewVehicleInformation
__ CoreMedia: _kFigEndpointVehicleInformationEntry_ETC
__ CoreMedia: _kFigEndpointVehicleInformationEntry_NavigationAidedDriving
__ CoreMedia: _kFigEndpointiOSUIRequestedKey_ApplicationURL
__ CoreMedia: _kFigFormatDescriptionExtension_BitsPerComponent
__ CoreMedia: _kFigMetadataFormatDescriptionMetadataSpecificationKey_ConformingDataTypes
__ CoreMedia: _kFigMetadataFormatDescriptionMetadataSpecificationKey_DependentSpecifications
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataDetectedFace_Bounds
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataDetectedFace_FaceID
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataDetectedFace_RollAngle
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataDetectedFace_YawAngle
__ CoreMedia: _kFigMetadataIdentifier_QuickTimeMetadataStillImageTime
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_AirPlayPlaybackSessionID
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_ApplicationCertificate
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_AssetIdentifier
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_CustomURLRequestID
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_IsForAirPlay
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_KeyRequestID
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_PackagedPersistentKey
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_PurposeOfKeyRequest
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_RemoteContext
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_RequireiTunesProvision
__ CoreMedia: _kFigPKDCPECryptorKeyRequestDataKey_ServerChallenge
__ CoreMedia: _kFigPKDCPECryptorKeyResponseOptionsKey_KeyRenewalNeededNotificationDate
__ CoreMedia: _kFigPKDCPECryptorKeyResponseOptionsKey_SuppressKeyResponseNotification
__ CoreMedia: _kFigTimelineCoordinatorCreationOption_OnlySendFullyDefinedCommands
__ CoreMedia: _kFigTimelineCoordinatorDidIssueCommandToTimelineControlNotificationPayloadKey_Command
__ CoreMedia: _kFigTimelineCoordinatorDidIssueCommandToTimelineControlNotificationPayloadKey_ParticipantUUID
__ CoreMedia: _kFigTimelineCoordinatorDidIssueCommandToTimelineControlNotificationPayloadKey_Rate
__ CoreMedia: _kFigTimelineCoordinatorDidIssueCommandToTimelineControlNotificationPayloadKey_Time
__ CoreMedia: _kFigTimelineCoordinatorNotificationPayload_ParticipantUUIDs
__ CoreMedia: _kFigTimelineCoordinatorNotificationPayload_SuspensionReasons
__ CoreMedia: _kFigTimelineCoordinatorNotification_DidIssueCommandToTimelineControl
__ CoreMedia: _kFigTimelineCoordinatorNotification_ParticipantsDidChange
__ CoreMedia: _kFigTimelineCoordinatorNotification_SuspensionReasonsChanged
__ CoreMedia: _kFigTimelineCoordinatorProperty_PauseSnapsToMediaTimeOfOriginator
__ CoreMedia: _kFigTimelineCoordinatorProperty_SuspensionWaitingPolicies
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_AudioSessionInterrupted
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_ChangingCurrentTime
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_CoordinatedPlaybackNotPossible
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_PlayingInterstitial
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_StallRecovery
__ CoreMedia: _kFigTimelineCoordinatorSuspensionReason_UserActionRequired
__ CoreMedia: _kFigTimelineCoordinatorSuspensionWaitingPolicyKey_ParticipantLimit
__ CoreMedia: _kFigTimelineCoordinatorSuspensionWaitingPolicyKey_ShouldWait
__ CoreMedia: _kFigTimelineCoordinatorSuspensionWaitingPolicyKey_SuspensionReason
__ CoreMedia: _kFigTimelineCoordinatorTimelineControlCommand_SetRate
__ CoreMedia: _kFigTimelineCoordinatorTimelineControlCommand_SetRateAndTime
__ CoreMedia: _kFigTimelineCoordinatorTimelineControlCommand_SetTime
__ CoreMedia: _kFigTimelineCoordinatorTimelineStateKey_TimelineIdentifier
__ CoreVideo: _CVBufferCopyAttachments
__ CoreVideo: _CVBufferSetAttachment
__ CoreVideo: _CVPixelBufferGetPixelFormatType
__ CoreVideo: _CVPixelBufferPoolCreate
__ CoreVideo: _CVPixelBufferPoolCreatePixelBufferWithAuxAttributes
__ CoreVideo: _CVPixelBufferPoolRelease
__ CoreVideo: _CVPixelBufferPoolRetain
__ CoreVideo: _CVPixelBufferRelease
__ CoreVideo: _CVPixelFormatDescriptionCreateWithPixelFormatType
__ CoreVideo: _CVPixelFormatDescriptionGetDescriptionWithPixelFormatType
__ CoreVideo: _kCVImageBufferCleanApertureHeightKey
__ CoreVideo: _kCVImageBufferCleanApertureHorizontalOffsetKey
__ CoreVideo: _kCVImageBufferCleanApertureKey
__ CoreVideo: _kCVImageBufferCleanApertureVerticalOffsetKey
__ CoreVideo: _kCVImageBufferCleanApertureWidthKey
__ CoreVideo: _kCVImageBufferColorPrimariesKey
__ CoreVideo: _kCVImageBufferPixelAspectRatioHorizontalSpacingKey
__ CoreVideo: _kCVImageBufferPixelAspectRatioKey
__ CoreVideo: _kCVImageBufferPixelAspectRatioVerticalSpacingKey
__ CoreVideo: _kCVImageBufferTransferFunctionKey
__ CoreVideo: _kCVImageBufferYCbCrMatrixKey
__ CoreVideo: _kCVPixelBufferBytesPerRowAlignmentKey
__ CoreVideo: _kCVPixelBufferCGBitmapContextCompatibilityKey
__ CoreVideo: _kCVPixelBufferCGImageCompatibilityKey
__ CoreVideo: _kCVPixelBufferCacheModeKey
__ CoreVideo: _kCVPixelBufferCustomMemoryLayoutCallbacksKey
__ CoreVideo: _kCVPixelBufferExactBytesPerRowKey
__ CoreVideo: _kCVPixelBufferExtendedPixelsBottomKey
__ CoreVideo: _kCVPixelBufferExtendedPixelsLeftKey
__ CoreVideo: _kCVPixelBufferExtendedPixelsRightKey
__ CoreVideo: _kCVPixelBufferExtendedPixelsTopKey
__ CoreVideo: _kCVPixelBufferHeightKey
__ CoreVideo: _kCVPixelBufferIOSurfacePropertiesKey
__ CoreVideo: _kCVPixelBufferMemoryAllocatorKey
__ CoreVideo: _kCVPixelBufferMetalCompatibilityKey
__ CoreVideo: _kCVPixelBufferOpenGLCompatibilityKey
__ CoreVideo: _kCVPixelBufferOpenGLESCompatibilityKey
__ CoreVideo: _kCVPixelBufferPixelFormatDescriptionKey
__ CoreVideo: _kCVPixelBufferPixelFormatTypeKey
__ CoreVideo: _kCVPixelBufferPlaneAlignmentKey
__ CoreVideo: _kCVPixelBufferPreferRealTimeCacheModeIfEveryoneDoesKey
__ CoreVideo: _kCVPixelBufferQDCompatibilityKey
__ CoreVideo: _kCVPixelBufferWidthKey
__ CoreVideo: _kCVPixelFormatBitsPerComponent
__ CoreVideo: _kCVPixelFormatContainsYCbCr
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSEdgeInsetsZero
__ Foundation: _NSFilePathErrorKey
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeNotificationIsPriorKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSLog
__ Foundation: _NSOSStatusErrorDomain
__ Foundation: _NSObjectNotAvailableException
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSShouldRetainWithZone
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromSelector
__ Foundation: _NSURLErrorDomain
__ Foundation: _NSURLErrorKey
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAutoreleasePool
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCoder
__ Foundation: _OBJC_CLASS_$_NSCondition
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSFormatter
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSOrderedCollectionDifference
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPredicateOperator
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSecurityScopedURLWrapper
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCCoder
__ Foundation: _OBJC_IVAR_$_NSPredicate._predicateFlags
__ Foundation: _OBJC_METACLASS_$_NSBlockOperation
__ Foundation: _OBJC_METACLASS_$_NSCondition
__ Foundation: _OBJC_METACLASS_$_NSFormatter
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ Foundation: _OBJC_METACLASS_$_NSOperationQueue
__ Foundation: _OBJC_METACLASS_$_NSPredicate
__ Foundation: _OBJC_METACLASS_$_NSValue
__ FrontBoardServices: _FBSSceneVisibilityEndowmentNamespace
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceGetType
__ MediaExperience: _AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
__ MediaExperience: _FigEndpointUIAgentXPCRemoteCreate
__ MediaExperience: _FigRemoteRoutingContextFactoryGetCurrent
__ MediaExperience: _FigResilientRemoteRoutingContextFactoryGetCurrent
__ MediaExperience: _FigRouteDiscovererXPCRemoteCreate
__ MediaExperience: _FigRoutingSessionGetCMBaseObject
__ MediaExperience: _FigRoutingSessionManagerGetConfidenceThresholds
__ MediaExperience: _FigRoutingSessionManagerResilientRemoteCopyLongFormVideoManager
__ MediaExperience: _FigVolumeControllerCopySharedControllerRemote
__ MediaExperience: _OBJC_CLASS_$_AVSystemController
__ MediaExperience: _kFigEndpointDescriptorKey_AdvertisesHAPSupport
__ MediaExperience: _kFigEndpointDescriptorKey_AirPlayEndpointProperties
__ MediaExperience: _kFigEndpointDescriptorKey_AirPlaySecurity
__ MediaExperience: _kFigEndpointDescriptorKey_AllowsHeadTrackedSpatialAudio
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_AirTunes
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_BluetoothLEOutput
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_CarAudioOutput
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_HDMI
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_HDMIOutput
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_Headphone
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_HeadphonesBT
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_Headset
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_HeadsetBT
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_LineOut
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_PersistentLineOut
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_Receiver
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_SPDIF
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_Speaker
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteName_USB
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_AppleTV
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGeneric
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ClusterGenericAudio
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ClusterHomeTheater
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ClusterStereoPair
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_FirstPartySpeaker
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_HomePod
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_Mac
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySetTopBox
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartySpeaker
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTV
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_ThirdPartyTVStick
__ MediaExperience: _kFigEndpointDescriptorKey_AudioRouteSubType_iOS
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_BatteryLevelCase
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_BatteryLevelLeft
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_BatteryLevelRight
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_BatteryLevelSingle
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_EndpointType
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_IsBTManaged
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_ListeningMode
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_SupportedListeningModes
__ MediaExperience: _kFigEndpointDescriptorKey_BTDetails_SupportsDoAP
__ MediaExperience: _kFigEndpointDescriptorKey_CloudLibraryIsOn
__ MediaExperience: _kFigEndpointDescriptorKey_ClusterActivatedComposition
__ MediaExperience: _kFigEndpointDescriptorKey_ClusterComposition
__ MediaExperience: _kFigEndpointDescriptorKey_ClusterHierarchy
__ MediaExperience: _kFigEndpointDescriptorKey_ClusterSize
__ MediaExperience: _kFigEndpointDescriptorKey_ClusterType
__ MediaExperience: _kFigEndpointDescriptorKey_ExternalPlaybackCannotFetchMediaFromSender
__ MediaExperience: _kFigEndpointDescriptorKey_ExternalPlaybackDoesNotShowProperUIForAudioOnlyAssets
__ MediaExperience: _kFigEndpointDescriptorKey_ExternalPlaybackDoesNotSupportEncryptedCRABS
__ MediaExperience: _kFigEndpointDescriptorKey_FirmwareVersion
__ MediaExperience: _kFigEndpointDescriptorKey_GroupContainsGroupLeader
__ MediaExperience: _kFigEndpointDescriptorKey_GroupUUID
__ MediaExperience: _kFigEndpointDescriptorKey_HKAccessControlLevel
__ MediaExperience: _kFigEndpointDescriptorKey_HeadTrackedSpatialAudioIsActive
__ MediaExperience: _kFigEndpointDescriptorKey_HeadTrackedSpatialAudioMode
__ MediaExperience: _kFigEndpointDescriptorKey_IsAppleMusicSubscriber
__ MediaExperience: _kFigEndpointDescriptorKey_IsBluetoothShareable
__ MediaExperience: _kFigEndpointDescriptorKey_IsClusterLeader
__ MediaExperience: _kFigEndpointDescriptorKey_IsCurrentlyPickedOnPairedDevice
__ MediaExperience: _kFigEndpointDescriptorKey_IsGroupLeader
__ MediaExperience: _kFigEndpointDescriptorKey_IsGroupable
__ MediaExperience: _kFigEndpointDescriptorKey_IsHKAccessControlEnabled
__ MediaExperience: _kFigEndpointDescriptorKey_IsLowFidelity
__ MediaExperience: _kFigEndpointDescriptorKey_IsMediaRemoteControllable
__ MediaExperience: _kFigEndpointDescriptorKey_IsSilentPrimary
__ MediaExperience: _kFigEndpointDescriptorKey_MACAddress
__ MediaExperience: _kFigEndpointDescriptorKey_Manufacturer
__ MediaExperience: _kFigEndpointDescriptorKey_Model
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected_ModelIdentifier
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected_Name
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected_Playing
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected_ProductName
__ MediaExperience: _kFigEndpointDescriptorKey_OtherDevicesConnected_UniqueID
__ MediaExperience: _kFigEndpointDescriptorKey_PersistentGroupUUID
__ MediaExperience: _kFigEndpointDescriptorKey_PreferredExternalRouteDetails_IsActive
__ MediaExperience: _kFigEndpointDescriptorKey_RouteCurrentlyPicked
__ MediaExperience: _kFigEndpointDescriptorKey_RouteHasAirPlayCloudConnectivity
__ MediaExperience: _kFigEndpointDescriptorKey_RouteName
__ MediaExperience: _kFigEndpointDescriptorKey_RouteSubtype
__ MediaExperience: _kFigEndpointDescriptorKey_RouteSupportsAirPlayScreen
__ MediaExperience: _kFigEndpointDescriptorKey_RouteSupportsAirPlayVideo
__ MediaExperience: _kFigEndpointDescriptorKey_RouteSupportsAudio
__ MediaExperience: _kFigEndpointDescriptorKey_RouteUID
__ MediaExperience: _kFigEndpointDescriptorKey_SerialNumber
__ MediaExperience: _kFigEndpointDescriptorKey_SupportsExtendedWHAFeatures
__ MediaExperience: _kFigEndpointDescriptorKey_SupportsHeadTrackedSpatialAudio
__ MediaExperience: _kFigEndpointDescriptorKey_SupportsRelay
__ MediaExperience: _kFigEndpointDescriptorKey_TightSyncBuddyNotReachable
__ MediaExperience: _kFigEndpointDescriptorKey_TightSyncIsGroupLeader
__ MediaExperience: _kFigEndpointDescriptorKey_TightSyncUUID
__ MediaExperience: _kFigEndpointDescriptor_BTDetails_EndpointType_Speakers
__ MediaExperience: _kFigEndpointDescriptor_BTDetails_EndpointType_Vehicle
__ MediaExperience: _kFigEndpointDescriptor_ClusterType_HT
__ MediaExperience: _kFigEndpointDescriptor_ClusterType_StereoPair
__ MediaExperience: _kFigEndpointUIAgentNotificationPayloadKey_ShowAuthPromptInfo
__ MediaExperience: _kFigEndpointUIAgentNotificationPayloadKey_ShowErrorPromptInfo
__ MediaExperience: _kFigEndpointUIAgentNotification_FinishedWithPrompt
__ MediaExperience: _kFigEndpointUIAgentNotification_ServerConnectionDied
__ MediaExperience: _kFigEndpointUIAgentNotification_ShowAuthPrompt
__ MediaExperience: _kFigEndpointUIAgentNotification_ShowErrorPrompt
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_PINMode
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_Reason
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorAuthenticationFailed
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorHijackFailed
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailed2G
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorInfraRelayFailedMultiDFS
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorReceiverIsOffline
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonErrorUnauthorizedNotHomeUser
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonInitialPrompt
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonPromptForIncorrectAuthInfo
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_ReasonStartErrorLowSignal
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_RouteDescriptor
__ MediaExperience: _kFigEndpointUIAgentPromptInfo_UniqueID
__ MediaExperience: _kFigRouteDiscovererCreationOption_DiscovererType
__ MediaExperience: _kFigRouteDiscovererDiscoveryMode_AirPlayInfraOnly
__ MediaExperience: _kFigRouteDiscovererDiscoveryMode_DetailedDiscovery
__ MediaExperience: _kFigRouteDiscovererDiscoveryMode_None
__ MediaExperience: _kFigRouteDiscovererDiscoveryMode_PresenceScan
__ MediaExperience: _kFigRouteDiscovererNotification_AvailableRoutesChanged
__ MediaExperience: _kFigRouteDiscovererNotification_RoutePresentChanged
__ MediaExperience: _kFigRouteDiscovererNotification_ServerConnectionDied
__ MediaExperience: _kFigRouteDiscovererProperty_AudioSessionID
__ MediaExperience: _kFigRouteDiscovererProperty_AvailableRouteDescriptors
__ MediaExperience: _kFigRouteDiscovererProperty_AvailableRoutes
__ MediaExperience: _kFigRouteDiscovererProperty_DiscoveryMode
__ MediaExperience: _kFigRouteDiscovererProperty_UserSelectionAvailable
__ MediaExperience: _kFigRoutingContextCreateOption_AvoidAuthPrompt
__ MediaExperience: _kFigRoutingContextCreateOption_ContextType
__ MediaExperience: _kFigRoutingContextCreateOption_ContextUUID
__ MediaExperience: _kFigRoutingContextCreateOption_RemoteGroupID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_CommChannelUUID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_ConfigUpdateReasonEndedFailed_CurrentRoutes
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_ConfigUpdateReasonEndedFailed_DeviceID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_ConfigUpdateReasonEndedFailed_ErrorString
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_Data
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_DeviceID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_RouteChangeEndedReason
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_RouteChangeID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateID
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateInitiator
__ MediaExperience: _kFigRoutingContextNotificationPayloadKey_RouteConfigUpdateReason
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedApplicationStateChanged
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedBottomUpRouteChange
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedFailed_IdleDisconnect
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedNoOp
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedSuccess
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorized
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUnauthorizedNoPrompt
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndedUserCancelled
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonEndpointDescriptorChanged
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonGroupDevicesChanged
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_ConfigUpdateReasonStarted
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonAuthInfoFailed
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonClientRequest
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonFailed
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonSuccess
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonUnauthorizedNoPrompt
__ MediaExperience: _kFigRoutingContextNotificationPayloadValue_EndedReasonUserCancelled
__ MediaExperience: _kFigRoutingContextNotification_CommChannelDidClose
__ MediaExperience: _kFigRoutingContextNotification_CurrentGroupConfigurationChanged
__ MediaExperience: _kFigRoutingContextNotification_CurrentRouteChanged
__ MediaExperience: _kFigRoutingContextNotification_DidReceiveData
__ MediaExperience: _kFigRoutingContextNotification_PredictedSelectedRouteDescriptorChanged
__ MediaExperience: _kFigRoutingContextNotification_RemoteControlChannelAvailabilityChanged
__ MediaExperience: _kFigRoutingContextNotification_RouteChangeEnded
__ MediaExperience: _kFigRoutingContextNotification_RouteChangeStarted
__ MediaExperience: _kFigRoutingContextNotification_RouteConfigUpdated
__ MediaExperience: _kFigRoutingContextNotification_ServerConnectionDied
__ MediaExperience: _kFigRoutingContextNotification_SystemPickerVideoRouteChanged
__ MediaExperience: _kFigRoutingContextProperty_AssociatedAudioDevice
__ MediaExperience: _kFigRoutingContextProperty_ContextType
__ MediaExperience: _kFigRoutingContextProperty_ContextUUID
__ MediaExperience: _kFigRoutingContextProperty_RemoteControlChannelAvailable
__ MediaExperience: _kFigRoutingContextProperty_SupportsBluetoothMultiDeviceRouting
__ MediaExperience: _kFigRoutingContextProperty_SupportsWHAMultiDeviceRouting
__ MediaExperience: _kFigRoutingContextRemoveRouteOptionKey_ContinuePlaybackWhenLastRouteIsRemoved
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_AuthInfo
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_AvoidAuthPrompt
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_ClientCorrelationID
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_ClientPID
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_ClientRouteRequestID
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_CrossfadePlayback
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_Initiator
__ MediaExperience: _kFigRoutingContextSelectRouteOptionKey_SilentSender
__ MediaExperience: _kFigRoutingSessionDestinationKey_Probability
__ MediaExperience: _kFigRoutingSessionDestinationKey_ProvidesExternalVideoPlayback
__ MediaExperience: _kFigRoutingSessionDestinationKey_RouteDescriptors
__ MediaExperience: _kFigRoutingSessionManagerNotification_AirPlayVideoActiveChanged
__ MediaExperience: _kFigRoutingSessionManagerNotification_AirPlayVideoPlayingChanged
__ MediaExperience: _kFigRoutingSessionManagerNotification_CurrentSessionChanged
__ MediaExperience: _kFigRoutingSessionManagerNotification_LikelyDestinationsChanged
__ MediaExperience: _kFigRoutingSessionProperty_EstablishedAutomaticallyFromLikelyDestination
__ MediaExperience: _kFigVolumeControllerEndpointVolumeKey_EndpointID
__ MediaExperience: _kFigVolumeControllerEndpointVolumeKey_SubEndpointID
__ MediaExperience: _kFigVolumeControllerMasterVolumeKey_RoutingContextUUID
__ MediaExperience: _kFigVolumeControllerNotification_CanSetEndpointVolumeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_CanSetMasterVolumeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_CanUseForRoutingContextDidChange
__ MediaExperience: _kFigVolumeControllerNotification_EndpointVolumeControlTypeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_EndpointVolumeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_MasterVolumeControlTypeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_MasterVolumeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_SubEndpointVolumeControlTypeDidChange
__ MediaExperience: _kFigVolumeControllerNotification_SubEndpointVolumeDidChange
__ MediaToolbox: _FCSupport_CopyChapterTimeRangesForChapterGroup
__ MediaToolbox: _FPSupport_CreateAllVideoRangesSupportedByDisplays
__ MediaToolbox: _FPSupport_CreateDestinationPixelBufferAttributes
__ MediaToolbox: _FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate
__ MediaToolbox: _FPSupport_GetDisplayVideoRangeNotificationSingleton
__ MediaToolbox: _FPSupport_GetModeString
__ MediaToolbox: _FPSupport_IncrementSeekID
__ MediaToolbox: _FPSupport_InitialSeekIDForSource
__ MediaToolbox: _FPSupport_SeekIDGetSource
__ MediaToolbox: _FigAlternateCopySerializedRepresentation
__ MediaToolbox: _FigAlternateCreateWithSerializedRepresentation
__ MediaToolbox: _FigAssetCacheInspectorCreate_Remote
__ MediaToolbox: _FigAssetCacheInspectorGetCMBaseObject
__ MediaToolbox: _FigAssetCopyAssetWithDownloadToken
__ MediaToolbox: _FigAssetCreateWithBlockBuffer
__ MediaToolbox: _FigAssetCreateWithByteStream
__ MediaToolbox: _FigAssetCreateWithURL
__ MediaToolbox: _FigAssetDownloadStorageManagementCopyExpirationDateForAssetAtURL
__ MediaToolbox: _FigAssetDownloadStorageManagementCopyPriorityForAssetAtURL
__ MediaToolbox: _FigAssetDownloadStorageManagementSetExpirationDateForAssetAtURL
__ MediaToolbox: _FigAssetDownloadStorageManagementSetPriorityForAssetAtURL
__ MediaToolbox: _FigAssetDownloaderGetCMBaseObject
__ MediaToolbox: _FigAssetDownloaderRegisterDestinationLocation
__ MediaToolbox: _FigAssetExportSessionCancelExport
__ MediaToolbox: _FigAssetExportSessionCopyProperty
__ MediaToolbox: _FigAssetExportSessionCreateWithAsset
__ MediaToolbox: _FigAssetExportSessionDetermineCompatibilityOfExportPreset
__ MediaToolbox: _FigAssetExportSessionDetermineCompatibleFileTypes
__ MediaToolbox: _FigAssetExportSessionEstimateMaximumDurationWithCompletionHandler
__ MediaToolbox: _FigAssetExportSessionEstimateOutputFileLengthWithCompletionHandler
__ MediaToolbox: _FigAssetExportSessionExportAsynchronously
__ MediaToolbox: _FigAssetExportSessionExportGetPresetsCompatibleWithFigAsset
__ MediaToolbox: _FigAssetExportSessionGetAllPresets
__ MediaToolbox: _FigAssetExportSessionGetEstimatedOutputFileLength
__ MediaToolbox: _FigAssetExportSessionGetMaximumDuration
__ MediaToolbox: _FigAssetExportSessionProperty_GetAudioMix_CFDictionaryValueCallBacks
__ MediaToolbox: _FigAssetExportSessionSetProperty
__ MediaToolbox: _FigAssetExportSessionVideoCompositionCreate
__ MediaToolbox: _FigAssetGetCMBaseObject
__ MediaToolbox: _FigAssetImageGeneratorCreateFromAsset
__ MediaToolbox: _FigAssetImageGeneratorCreateFromAssetRemote
__ MediaToolbox: _FigAssetImageGeneratorGetFigBaseObject
__ MediaToolbox: _FigAssetReaderCreateWithURLAndFormatReader
__ MediaToolbox: _FigAssetReaderGetFigBaseObject
__ MediaToolbox: _FigAssetReaderRemoteCreateWithURLAndFormatReader
__ MediaToolbox: _FigAssetRemoteCopyAssetWithDownloadToken
__ MediaToolbox: _FigAssetRemoteCreateWithBlockBuffer
__ MediaToolbox: _FigAssetRemoteCreateWithFormatReader
__ MediaToolbox: _FigAssetRemoteCreateWithMovieProxyData
__ MediaToolbox: _FigAssetRemoteCreateWithURL
__ MediaToolbox: _FigAssetRemoteCreateWithURLAndRetry
__ MediaToolbox: _FigAssetTrackGetCMBaseObject
__ MediaToolbox: _FigAssetWriterGetFigBaseObject
__ MediaToolbox: _FigAssetWriterRemoteCreateForWritingFragmentedData
__ MediaToolbox: _FigAssetWriterRemoteCreateWithURL
__ MediaToolbox: _FigAssetWriterRemoteDoesSupportVirtualCaptureCard
__ MediaToolbox: _FigAudioCompressionOptionsGetPreset
__ MediaToolbox: _FigCPEIsSupportedFormatDescription
__ MediaToolbox: _FigCPEProtectorRemoteCreateForScheme
__ MediaToolbox: _FigCPERemoteInitializeWithOptions
__ MediaToolbox: _FigCPERemoteUninitialize
__ MediaToolbox: _FigContentKeyBossCreateRemote
__ MediaToolbox: _FigContentKeyRequestParamsCreate
__ MediaToolbox: _FigContentKeyResponseParamsCreate
__ MediaToolbox: _FigContentKeySecureTokenRequestParamsCreate
__ MediaToolbox: _FigContentKeySessionRemoteCreateSession
__ MediaToolbox: _FigContentKeySpecifierCreate
__ MediaToolbox: _FigContentKeySpecifierGetEncryptionMode
__ MediaToolbox: _FigContentKeySpecifierGetKeyIdentifier
__ MediaToolbox: _FigContentKeySpecifierGetKeySystem
__ MediaToolbox: _FigContentKeySpecifierGetSupportsOfflineKey
__ MediaToolbox: _FigCopyMPEGMIMETypes
__ MediaToolbox: _FigCopyQTMovieMIMETypes
__ MediaToolbox: _FigCopySetOfAudioSupportedMIMETypes
__ MediaToolbox: _FigCopySetOfFormatReaderSupportedFileExtensions
__ MediaToolbox: _FigCopySetOfFormatReaderSupportedFileTypes
__ MediaToolbox: _FigCopySetOfFormatReaderSupportedMIMETypes
__ MediaToolbox: _FigCopySetOfFormatReaderSupportedUTIs
__ MediaToolbox: _FigCopySetOfStreamingSupportedMIMETypes
__ MediaToolbox: _FigCopySetOfStreamingSupportedUTIs
__ MediaToolbox: _FigCopyWebVTTMIMETypes
__ MediaToolbox: _FigCreate3x2MatrixArrayFromCGAffineTransform
__ MediaToolbox: _FigCreate3x3MatrixArrayFromCGAffineTransform
__ MediaToolbox: _FigExportSettingsAverageBitRateForSourceAndExportPreset
__ MediaToolbox: _FigExportSettingsForExportPreset
__ MediaToolbox: _FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat
__ MediaToolbox: _FigExportSettings_GetMaximumBitsPerComponent
__ MediaToolbox: _FigFileTypeDoesSupportExternalSampleReferences
__ MediaToolbox: _FigFormatReaderGetFigBaseObject
__ MediaToolbox: _FigGetCGAffineTransformFrom3x2MatrixArray
__ MediaToolbox: _FigGetCGAffineTransformFrom3x3MatrixArray
__ MediaToolbox: _FigGetRotationAngleAndFlipsFromCGAffineTransform
__ MediaToolbox: _FigManifoldCreateForICY
__ MediaToolbox: _FigManifoldCreateForMPEG2
__ MediaToolbox: _FigManifoldCreateForMovieFragmentStream
__ MediaToolbox: _FigManifoldCreateForWebVTT
__ MediaToolbox: _FigManifoldGetFigBaseObject
__ MediaToolbox: _FigMediaSelectionOptionCopyDescription
__ MediaToolbox: _FigMediaValidatorCreateMediaValidatorPropertyList
__ MediaToolbox: _FigMediaValidatorValidateFormatDescription
__ MediaToolbox: _FigMediaValidatorValidateIndividualTrack
__ MediaToolbox: _FigMediaValidatorValidateIndividualTrackForDecoding
__ MediaToolbox: _FigMediaValidatorValidateRFC4281ExtendedMIMEType
__ MediaToolbox: _FigMediaValidatorValidateRFC4281ExtendedMIMETypeForStreaming
__ MediaToolbox: _FigMetadataCopyMovieCommonMetadata
__ MediaToolbox: _FigMetadataCopyTrackCommonMetadata
__ MediaToolbox: _FigMetadataCreateMetadataItemsFromSampleBuffer
__ MediaToolbox: _FigMetadataGetCommonKey
__ MediaToolbox: _FigMetadataGetCoreMediaDataType
__ MediaToolbox: _FigMetadataGetDataTypeWithNamespaceForCoreMediaDataType
__ MediaToolbox: _FigMetadataGetISO639_1FromISO639_2T
__ MediaToolbox: _FigMetadataGetPackedISO639_2TFromLocaleIdentifier
__ MediaToolbox: _FigMetadataReaderGetFigBaseObject
__ MediaToolbox: _FigMetadataStringKeyToOSTypeKeyWithKeySpace
__ MediaToolbox: _FigMovieFormatWriterCanFileTypeSupportFormatDescription
__ MediaToolbox: _FigMutableCompositionCreateRemote
__ MediaToolbox: _FigMutableCompositionGetFigBaseObject
__ MediaToolbox: _FigMutableMovieCreateFromData
__ MediaToolbox: _FigMutableMovieGetFigBaseObject
__ MediaToolbox: _FigMutableMovieRemoteCreateEmpty
__ MediaToolbox: _FigMutableMovieRemoteCreateFromData
__ MediaToolbox: _FigMutableMovieRemoteCreateFromFormatReader
__ MediaToolbox: _FigMutableMovieRemoteCreateWithURL
__ MediaToolbox: _FigNWActivityCreateToken
__ MediaToolbox: _FigPKDParsePSSHAndCopyContentKeyInfo
__ MediaToolbox: _FigPlaybackCoordinatorGetCMBaseObject
__ MediaToolbox: _FigPlaybackItemGetFigBaseObject
__ MediaToolbox: _FigPlaybackItemLogCreateW3CLogData
__ MediaToolbox: _FigPlayerGetFigBaseObject
__ MediaToolbox: _FigPlayerInterstitialCoordinatorCreate
__ MediaToolbox: _FigPlayerInterstitialCoordinatorIsRemote
__ MediaToolbox: _FigPlayerInterstitialEventCopyAsDictionary
__ MediaToolbox: _FigPlayerInterstitialEventCreate
__ MediaToolbox: _FigPlayerInterstitialEventCreateFromDictionary
__ MediaToolbox: _FigPlayerInterstitialEventCueOnce
__ MediaToolbox: _FigPlayerInterstitialEventGetExtraAttributes
__ MediaToolbox: _FigPlayerInterstitialEventGetIdentifier
__ MediaToolbox: _FigPlayerInterstitialEventGetInterstitialAssetURLs
__ MediaToolbox: _FigPlayerInterstitialEventGetPlayoutLimit
__ MediaToolbox: _FigPlayerInterstitialEventGetRestrictions
__ MediaToolbox: _FigPlayerInterstitialEventGetResumptionOffset
__ MediaToolbox: _FigPlayerInterstitialEventGetSnapOptions
__ MediaToolbox: _FigPlayerInterstitialEventGetStartDate
__ MediaToolbox: _FigPlayerInterstitialEventGetStartTime
__ MediaToolbox: _FigPlayerInterstitialEventIsImmutable
__ MediaToolbox: _FigPlayerInterstitialEventIsPostRoll
__ MediaToolbox: _FigPlayerInterstitialEventIsPreRoll
__ MediaToolbox: _FigPlayerInterstitialEventSetCueOnce
__ MediaToolbox: _FigPlayerInterstitialEventSetExtraAttributes
__ MediaToolbox: _FigPlayerInterstitialEventSetIdentifier
__ MediaToolbox: _FigPlayerInterstitialEventSetImmutable
__ MediaToolbox: _FigPlayerInterstitialEventSetInterstitialAssetURLs
__ MediaToolbox: _FigPlayerInterstitialEventSetIsPostRoll
__ MediaToolbox: _FigPlayerInterstitialEventSetIsPreRoll
__ MediaToolbox: _FigPlayerInterstitialEventSetPlayoutLimit
__ MediaToolbox: _FigPlayerInterstitialEventSetPrimaryItem
__ MediaToolbox: _FigPlayerInterstitialEventSetRestrictions
__ MediaToolbox: _FigPlayerInterstitialEventSetResumptionOffset
__ MediaToolbox: _FigPlayerInterstitialEventSetSnapOptions
__ MediaToolbox: _FigPlayerInterstitialEventSetStartDate
__ MediaToolbox: _FigPlayerInterstitialEventSetStartTime
__ MediaToolbox: _FigPlayerInterstitialEventValidate
__ MediaToolbox: _FigPlayerInterstitialEventsCreateFromTaggedRangeMetadata
__ MediaToolbox: _FigPlayerInterstitialRemoteCoordinatorCreate
__ MediaToolbox: _FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent
__ MediaToolbox: _FigPlayerInterstitialRemoteCoordinatorSetEvents
__ MediaToolbox: _FigRemakerCanFileTypeSupportFormatDescription
__ MediaToolbox: _FigRemoteStreamingAssetDownloadOrchestratorCreate
__ MediaToolbox: _FigSampleBufferAudioRendererCreateRemoteWithOptionsAndRetry
__ MediaToolbox: _FigSampleBufferAudioRendererGetFigBaseObject
__ MediaToolbox: _FigSampleBufferRenderSynchronizerCreateRemoteWithOptions
__ MediaToolbox: _FigSampleCursorGetFigBaseObject
__ MediaToolbox: _FigSampleGeneratorRemoteCreateForFormatReader
__ MediaToolbox: _FigSecureStopManagerRemoteCopyDefaultRuntimeInstance
__ MediaToolbox: _FigSharedPlayerCreate
__ MediaToolbox: _FigSharedPlayerCreateWithOptions
__ MediaToolbox: _FigSharedPlayerGetDefaultEngineTopology
__ MediaToolbox: _FigSharedRemote_CopyVideoCompressorSupportedPropertyDictionary
__ MediaToolbox: _FigShared_CopyCacheLastModifiedDate
__ MediaToolbox: _FigShared_CopyDiskCacheCheckedInIDs
__ MediaToolbox: _FigShared_CopyDiskCacheParams
__ MediaToolbox: _FigShared_DeleteFromDiskCache
__ MediaToolbox: _FigShared_GetCacheFileSize
__ MediaToolbox: _FigShared_SetDiskCacheParams
__ MediaToolbox: _FigStreamAssetImageGeneratorCreateFromAsset
__ MediaToolbox: _FigStreamingAssetDownloadConfigAddAuxConfig
__ MediaToolbox: _FigStreamingAssetDownloadConfigCreate
__ MediaToolbox: _FigStreamingAssetDownloadConfigSetOptimizesAuxiliaryContentConfigurations
__ MediaToolbox: _FigStreamingAssetDownloadConfigSetPrimaryContentConfig
__ MediaToolbox: _FigStreamingAssetDownloadContentConfigCreate
__ MediaToolbox: _FigStreamingAssetDownloadContentConfigSetAlternate
__ MediaToolbox: _FigStreamingAssetDownloadContentConfigSetAlternatePredicates
__ MediaToolbox: _FigStreamingAssetDownloadContentConfigSetMediaSelections
__ MediaToolbox: _FigTrackReaderGetFigBaseObject
__ MediaToolbox: _FigVideoCompositorCreateRemote
__ MediaToolbox: _FigVideoCompositorGetFigBaseObject
__ MediaToolbox: _FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture
__ MediaToolbox: _FigVideoQueueCreateRemote
__ MediaToolbox: _FigVideoQueueGetCMBaseObject
__ MediaToolbox: _FigVisualContextCreateRemote
__ MediaToolbox: _FigVisualContextGetEarliestSequentialImageTime
__ MediaToolbox: _MTCopyStringsForMediaTypeAndSubType
__ MediaToolbox: _OBJC_CLASS_$_FigAlternateObjC
__ MediaToolbox: _OBJC_CLASS_$_FigAlternatePredicateValidator
__ MediaToolbox: _OBJC_CLASS_$_FigBaseCABackdropLayer
__ MediaToolbox: _OBJC_CLASS_$_FigBaseCALayer
__ MediaToolbox: _OBJC_CLASS_$_FigBaseCALayerHost
__ MediaToolbox: _OBJC_CLASS_$_FigSubtitleCALayer
__ MediaToolbox: _OBJC_CLASS_$_FigVideoContainerLayer
__ MediaToolbox: _OBJC_METACLASS_$_FigBaseCALayer
__ MediaToolbox: _PKDCopyDecryptFormatTypeFromCodecType
__ MediaToolbox: _PKDCopyDecryptFormatTypeFromSinfArray
__ MediaToolbox: _PKDCopyDefaultKeyIDFromSinfArray
__ MediaToolbox: _PKDCopyIdentifierForFormatDescription
__ MediaToolbox: _PKDGetIdentifierForTransportStream
__ MediaToolbox: _PKDIsContentKeyBossEnabled
__ MediaToolbox: _PKDLogPrivateData
__ MediaToolbox: _PKDPersistentKeyIsForCTRModeDecryption
__ MediaToolbox: _kFPSupportNotification_DisplayVideoRangeChanged
__ MediaToolbox: _kFigAccessLogKey_AverageAudioBitrate
__ MediaToolbox: _kFigAccessLogKey_AverageVideoBitrate
__ MediaToolbox: _kFigAccessLogKey_BytesTransferred
__ MediaToolbox: _kFigAccessLogKey_CurrentObservedBitrate
__ MediaToolbox: _kFigAccessLogKey_DownloadOverdue
__ MediaToolbox: _kFigAccessLogKey_DownloadedDuration
__ MediaToolbox: _kFigAccessLogKey_DroppedVideoFrames
__ MediaToolbox: _kFigAccessLogKey_DurationWatched
__ MediaToolbox: _kFigAccessLogKey_EntryReasonCode
__ MediaToolbox: _kFigAccessLogKey_IndicatedAverageBitrate
__ MediaToolbox: _kFigAccessLogKey_IndicatedBitrate
__ MediaToolbox: _kFigAccessLogKey_MediaRequests
__ MediaToolbox: _kFigAccessLogKey_MediaRequestsWWAN
__ MediaToolbox: _kFigAccessLogKey_ObservedBitrate
__ MediaToolbox: _kFigAccessLogKey_ObservedBitrateStandardDeviation
__ MediaToolbox: _kFigAccessLogKey_ObservedMaxBitrate
__ MediaToolbox: _kFigAccessLogKey_ObservedMinBitrate
__ MediaToolbox: _kFigAccessLogKey_PlaybackSessionID
__ MediaToolbox: _kFigAccessLogKey_PlaybackStartDate
__ MediaToolbox: _kFigAccessLogKey_PlaybackStartOffset
__ MediaToolbox: _kFigAccessLogKey_PlaybackType
__ MediaToolbox: _kFigAccessLogKey_ServerAddress
__ MediaToolbox: _kFigAccessLogKey_ServerAddressChanges
__ MediaToolbox: _kFigAccessLogKey_ServiceIdentifier
__ MediaToolbox: _kFigAccessLogKey_Stalls
__ MediaToolbox: _kFigAccessLogKey_StartupTime
__ MediaToolbox: _kFigAccessLogKey_SwitchBitrate
__ MediaToolbox: _kFigAccessLogKey_TransferDuration
__ MediaToolbox: _kFigAccessLogKey_URI
__ MediaToolbox: _kFigAssetByteRange_Length
__ MediaToolbox: _kFigAssetByteRange_Offset
__ MediaToolbox: _kFigAssetCacheInspectorProperty_CacheURL
__ MediaToolbox: _kFigAssetCacheInspectorProperty_PlayableOffline
__ MediaToolbox: _kFigAssetContentProtectionOptionsKey_AirPlayAuthorizationInfo
__ MediaToolbox: _kFigAssetContentProtectionOptionsKey_ProtectedContentSupportStorageURL
__ MediaToolbox: _kFigAssetContentProtectionOptionsKey_PurchaseBundle
__ MediaToolbox: _kFigAssetDownloaderCreateOption_AllowHighDynamicRangeKey
__ MediaToolbox: _kFigAssetDownloaderCreateOption_AssetImage
__ MediaToolbox: _kFigAssetDownloaderCreateOption_AssetName
__ MediaToolbox: _kFigAssetDownloaderCreateOption_ClientBundleIdentifier
__ MediaToolbox: _kFigAssetDownloaderCreateOption_ClientIsCatalyst
__ MediaToolbox: _kFigAssetDownloaderCreateOption_DebugIdentifier
__ MediaToolbox: _kFigAssetDownloaderCreateOption_DeleteDownloadWhenAssetFinalizes
__ MediaToolbox: _kFigAssetDownloaderCreateOption_DisallowsConstrainedNetworkAccess
__ MediaToolbox: _kFigAssetDownloaderCreateOption_DisallowsExpensiveNetworkAccess
__ MediaToolbox: _kFigAssetDownloaderCreateOption_DownloadConfig
__ MediaToolbox: _kFigAssetDownloaderCreateOption_LinkAssetURLToDestinationURL
__ MediaToolbox: _kFigAssetDownloaderCreateOption_MaximumAudioSampleRate
__ MediaToolbox: _kFigAssetDownloaderCreateOption_MediaSelectionCriteria
__ MediaToolbox: _kFigAssetDownloaderCreateOption_MinimumMediaBitrate
__ MediaToolbox: _kFigAssetDownloaderCreateOption_MinimumMediaBitrateForHEVC
__ MediaToolbox: _kFigAssetDownloaderCreateOption_MinimumPresentationSizeKey
__ MediaToolbox: _kFigAssetDownloaderCreateOption_PrefersLosslessAudio
__ MediaToolbox: _kFigAssetDownloaderCreateOption_PrefersMostCompatibleRendition
__ MediaToolbox: _kFigAssetDownloaderCreateOption_PrefersMultichannel
__ MediaToolbox: _kFigAssetDownloaderCreateOption_PrefersMultichannelOnly
__ MediaToolbox: _kFigAssetDownloaderCreateOption_RetryError
__ MediaToolbox: _kFigAssetDownloaderCreateOption_StoreCryptKeys
__ MediaToolbox: _kFigAssetDownloaderProperty_DownloadedBytes
__ MediaToolbox: _kFigAssetExportSessionProperty_AudioMix
__ MediaToolbox: _kFigAssetExportSessionProperty_AudioTimePitchAlgorithm
__ MediaToolbox: _kFigAssetExportSessionProperty_AudioTrackGroupOutputHandling
__ MediaToolbox: _kFigAssetExportSessionProperty_CanPerformMultiplePassesOverSourceMediaData
__ MediaToolbox: _kFigAssetExportSessionProperty_DirectoryForTemporaryFiles
__ MediaToolbox: _kFigAssetExportSessionProperty_Error
__ MediaToolbox: _kFigAssetExportSessionProperty_EstimatedOutputFileLength
__ MediaToolbox: _kFigAssetExportSessionProperty_FileLengthLimit
__ MediaToolbox: _kFigAssetExportSessionProperty_MaxDuration
__ MediaToolbox: _kFigAssetExportSessionProperty_MaximizePowerEfficiency
__ MediaToolbox: _kFigAssetExportSessionProperty_Metadata
__ MediaToolbox: _kFigAssetExportSessionProperty_MetadataItemFilterWhitelist
__ MediaToolbox: _kFigAssetExportSessionProperty_MinVideoFrameDuration
__ MediaToolbox: _kFigAssetExportSessionProperty_OutputFileType
__ MediaToolbox: _kFigAssetExportSessionProperty_OutputURL
__ MediaToolbox: _kFigAssetExportSessionProperty_PreserveSyncFrames
__ MediaToolbox: _kFigAssetExportSessionProperty_PresetName
__ MediaToolbox: _kFigAssetExportSessionProperty_Progress
__ MediaToolbox: _kFigAssetExportSessionProperty_ShouldOptimizeForNetworkUse
__ MediaToolbox: _kFigAssetExportSessionProperty_Status
__ MediaToolbox: _kFigAssetExportSessionProperty_SupportedFileTypes
__ MediaToolbox: _kFigAssetExportSessionProperty_TimeRange
__ MediaToolbox: _kFigAssetExportSessionProperty_VideoComposition
__ MediaToolbox: _kFigAssetExportSessionProperty_VideoFrameRateConversionAlgorithm
__ MediaToolbox: _kFigAssetExportSession_ErrorDomain
__ MediaToolbox: _kFigAssetExportSession_VideoFrameRateConversionAlgorithmFast
__ MediaToolbox: _kFigAssetExportSession_VideoFrameRateConversionAlgorithmPrecise
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_ApertureMode
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_ApplyVideoTrackMatrix
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_MaxHeight
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_MaxWidth
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_PrefersStandardDynamicRange
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_RequestID
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_TimeFlags
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_TimeToleranceAfter
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_TimeToleranceBefore
__ MediaToolbox: _kFigAssetImageGeneratorImageOptionsKey_TimeoutInterval
__ MediaToolbox: _kFigAssetImageGeneratorNotification_DidGenerateCGImage
__ MediaToolbox: _kFigAssetImageGeneratorNotification_FailedToGenerateCGImage
__ MediaToolbox: _kFigAssetImageGeneratorNotification_ServerConnectionDied
__ MediaToolbox: _kFigAssetImageGeneratorParameter_CGImage
__ MediaToolbox: _kFigAssetImageGeneratorParameter_ImageTime
__ MediaToolbox: _kFigAssetImageGeneratorParameter_RequestID
__ MediaToolbox: _kFigAssetImageGeneratorParameter_Result
__ MediaToolbox: _kFigAssetNetworkCacheBackingValue_Disk
__ MediaToolbox: _kFigAssetNetworkCacheBackingValue_NonPurgeableMemory
__ MediaToolbox: _kFigAssetNotification_BatchPropertyLoadComplete
__ MediaToolbox: _kFigAssetNotification_ChapterDataFetchFailed
__ MediaToolbox: _kFigAssetNotification_ChapterDataFetched
__ MediaToolbox: _kFigAssetNotification_DownloadToDestinationFailed
__ MediaToolbox: _kFigAssetNotification_DownloadToDestinationSucceeded
__ MediaToolbox: _kFigAssetNotification_PropertyFailedToLoad
__ MediaToolbox: _kFigAssetNotification_PropertyLoaded
__ MediaToolbox: _kFigAssetNotification_PropertyRevised
__ MediaToolbox: _kFigAssetNotification_ServerConnectionDied
__ MediaToolbox: _kFigAssetNotification_ServerStatePurged
__ MediaToolbox: _kFigAssetOptionKey_AdditionalHTTPCookies
__ MediaToolbox: _kFigAssetOptionKey_AllowableAudioCodecTypes
__ MediaToolbox: _kFigAssetOptionKey_AllowableCaptionFormats
__ MediaToolbox: _kFigAssetOptionKey_AllowableTypes
__ MediaToolbox: _kFigAssetOptionKey_AllowableVideoCodecTypes
__ MediaToolbox: _kFigAssetOptionKey_AllowedHTTPProtocolTypes
__ MediaToolbox: _kFigAssetOptionKey_AlternativeConfigurationOptions
__ MediaToolbox: _kFigAssetOptionKey_AlwaysFollowRedirects
__ MediaToolbox: _kFigAssetOptionKey_AlwaysPerformDefaultTrustEvaluation
__ MediaToolbox: _kFigAssetOptionKey_ApplicationTransportSecurityContext
__ MediaToolbox: _kFigAssetOptionKey_BoundNetworkInterfaceName
__ MediaToolbox: _kFigAssetOptionKey_ByteRangeInFile
__ MediaToolbox: _kFigAssetOptionKey_CRABSNetworkCacheEnabled
__ MediaToolbox: _kFigAssetOptionKey_ClientAuditToken
__ MediaToolbox: _kFigAssetOptionKey_ClientBundleIdentifier
__ MediaToolbox: _kFigAssetOptionKey_ClientHandlesURLRequest
__ MediaToolbox: _kFigAssetOptionKey_ContentProtectionOptions
__ MediaToolbox: _kFigAssetOptionKey_DeclaredAssetType
__ MediaToolbox: _kFigAssetOptionKey_DelayByteStreamReadAheadUntilExplicitlyHinted
__ MediaToolbox: _kFigAssetOptionKey_DisableNetworkLargeDownload
__ MediaToolbox: _kFigAssetOptionKey_DisableNetworkProbeRequest
__ MediaToolbox: _kFigAssetOptionKey_DisallowsConstrainedNetworkAccess
__ MediaToolbox: _kFigAssetOptionKey_DisallowsExpensiveNetworkAccess
__ MediaToolbox: _kFigAssetOptionKey_DownloadDestinationURL
__ MediaToolbox: _kFigAssetOptionKey_DownloadIsLowPriority
__ MediaToolbox: _kFigAssetOptionKey_EnableMultiPath
__ MediaToolbox: _kFigAssetOptionKey_EnableQUIC
__ MediaToolbox: _kFigAssetOptionKey_ForceQUIC
__ MediaToolbox: _kFigAssetOptionKey_FormatReaderInstantiationOptions
__ MediaToolbox: _kFigAssetOptionKey_HLSNetworkCacheEnabled
__ MediaToolbox: _kFigAssetOptionKey_HTTPHeaders
__ MediaToolbox: _kFigAssetOptionKey_InheritURIQueryComponentFromReferencingURI
__ MediaToolbox: _kFigAssetOptionKey_InhibitReferenceMovieResolution
__ MediaToolbox: _kFigAssetOptionKey_LoggingIdentifier
__ MediaToolbox: _kFigAssetOptionKey_MakeReadAheadAssertionWhenCreatingByteStream
__ MediaToolbox: _kFigAssetOptionKey_MaxSizeAllowedForCellularAccess
__ MediaToolbox: _kFigAssetOptionKey_MovieFormatReaderOnly
__ MediaToolbox: _kFigAssetOptionKey_MovieProxyName
__ MediaToolbox: _kFigAssetOptionKey_NetworkCacheBacking
__ MediaToolbox: _kFigAssetOptionKey_NetworkCacheNonPurgeableMemoryLimit
__ MediaToolbox: _kFigAssetOptionKey_NetworkCacheURL
__ MediaToolbox: _kFigAssetOptionKey_NetworkCacheUsePathAsKey
__ MediaToolbox: _kFigAssetOptionKey_NetworkCacheUseURLWithoutQueryStringAsKey
__ MediaToolbox: _kFigAssetOptionKey_NoPersistentCache
__ MediaToolbox: _kFigAssetOptionKey_OutOfBandAlternateTracks
__ MediaToolbox: _kFigAssetOptionKey_OutOfBandMIMEType
__ MediaToolbox: _kFigAssetOptionKey_ParentNetworkActivityToken
__ MediaToolbox: _kFigAssetOptionKey_PreferLargeResourceRequests
__ MediaToolbox: _kFigAssetOptionKey_PreferPreciseDurationAndTiming
__ MediaToolbox: _kFigAssetOptionKey_PrefersSandboxedParsing
__ MediaToolbox: _kFigAssetOptionKey_PreloadDurationWhenNextItem
__ MediaToolbox: _kFigAssetOptionKey_PrepareForExclusivePlaybackMode
__ MediaToolbox: _kFigAssetOptionKey_PrepareForIncrementalFragments
__ MediaToolbox: _kFigAssetOptionKey_PrimaryPlaybackSessionID
__ MediaToolbox: _kFigAssetOptionKey_ReadEntireMoovAtom
__ MediaToolbox: _kFigAssetOptionKey_RequiresCustomURLLoading
__ MediaToolbox: _kFigAssetOptionKey_RequiresInProcessOperation
__ MediaToolbox: _kFigAssetOptionKey_SSLProperties
__ MediaToolbox: _kFigAssetOptionKey_SkipReadingMP3MetadataDuringFormatReaderCreation
__ MediaToolbox: _kFigAssetOptionKey_SupportAliasDataReferences
__ MediaToolbox: _kFigAssetOptionKey_URLRequestAttribution
__ MediaToolbox: _kFigAssetOptionKey_UnitTestOptions
__ MediaToolbox: _kFigAssetOptionKey_UseAWDL
__ MediaToolbox: _kFigAssetOptionKey_VideoNotEligibleForAppRecording
__ MediaToolbox: _kFigAssetOptionKey_WhitelistQUIC
__ MediaToolbox: _kFigAssetOptionKey_iTunesStoreContentInfo
__ MediaToolbox: _kFigAssetPayloadKey_BatchID
__ MediaToolbox: _kFigAssetPayloadKey_CFError
__ MediaToolbox: _kFigAssetPayloadKey_ChapterCount
__ MediaToolbox: _kFigAssetPayloadKey_ChapterData
__ MediaToolbox: _kFigAssetPayloadKey_ChapterGroupIndex
__ MediaToolbox: _kFigAssetPayloadKey_ChapterIndex
__ MediaToolbox: _kFigAssetPayloadKey_Property
__ MediaToolbox: _kFigAssetPayloadKey_Result
__ MediaToolbox: _kFigAssetProperty_AVCHDMetadata
__ MediaToolbox: _kFigAssetProperty_AlternateTrackGroups
__ MediaToolbox: _kFigAssetProperty_AssetType
__ MediaToolbox: _kFigAssetProperty_AvailableMetadataFormats
__ MediaToolbox: _kFigAssetProperty_AvailableVideoDynamicRanges
__ MediaToolbox: _kFigAssetProperty_CPEProtector
__ MediaToolbox: _kFigAssetProperty_CameraRollValidation
__ MediaToolbox: _kFigAssetProperty_ChapterGroupInfo
__ MediaToolbox: _kFigAssetProperty_CommonMetadata
__ MediaToolbox: _kFigAssetProperty_CompatibleWithAirPlayVideo
__ MediaToolbox: _kFigAssetProperty_CompatibleWithPhotosTranscodingService
__ MediaToolbox: _kFigAssetProperty_ContainsFragments
__ MediaToolbox: _kFigAssetProperty_ContentByteStream
__ MediaToolbox: _kFigAssetProperty_ContentKeyBoss
__ MediaToolbox: _kFigAssetProperty_CouldContainFragments
__ MediaToolbox: _kFigAssetProperty_CreationOptionsDictionary
__ MediaToolbox: _kFigAssetProperty_CreationURL
__ MediaToolbox: _kFigAssetProperty_CustomURLLoader
__ MediaToolbox: _kFigAssetProperty_DefaultContentKeySession
__ MediaToolbox: _kFigAssetProperty_DownloadToDestinationResult
__ MediaToolbox: _kFigAssetProperty_DownloadToken
__ MediaToolbox: _kFigAssetProperty_FirstFragmentSequenceNumber
__ MediaToolbox: _kFigAssetProperty_FormatReader
__ MediaToolbox: _kFigAssetProperty_FormatSpecificMetadata
__ MediaToolbox: _kFigAssetProperty_FragmentCount
__ MediaToolbox: _kFigAssetProperty_HLSAlternates
__ MediaToolbox: _kFigAssetProperty_HLSMetadata
__ MediaToolbox: _kFigAssetProperty_HLSSessionKeys
__ MediaToolbox: _kFigAssetProperty_ID3Metadata
__ MediaToolbox: _kFigAssetProperty_ID3MetadataWithBackwardCompatibility
__ MediaToolbox: _kFigAssetProperty_ISOUserData
__ MediaToolbox: _kFigAssetProperty_IncrementalFragmentParseInterval
__ MediaToolbox: _kFigAssetProperty_InstanceUUID
__ MediaToolbox: _kFigAssetProperty_MakeReadAheadAssertionWhenCreatingByteStream
__ MediaToolbox: _kFigAssetProperty_MatchingContainerLabel
__ MediaToolbox: _kFigAssetProperty_MatchingContainerLabelType
__ MediaToolbox: _kFigAssetProperty_MaximumVideoResolution
__ MediaToolbox: _kFigAssetProperty_MediaPlaybackValidation
__ MediaToolbox: _kFigAssetProperty_MovieExtendsDuration
__ MediaToolbox: _kFigAssetProperty_MovieProxy
__ MediaToolbox: _kFigAssetProperty_NominalVideoFrameRate
__ MediaToolbox: _kFigAssetProperty_OriginalNetworkContentURL
__ MediaToolbox: _kFigAssetProperty_ProtectedStatus
__ MediaToolbox: _kFigAssetProperty_ProvidesPreciseDurationAndTiming
__ MediaToolbox: _kFigAssetProperty_QuickTimeMetadata
__ MediaToolbox: _kFigAssetProperty_QuickTimeUserData
__ MediaToolbox: _kFigAssetProperty_ResolvedURL
__ MediaToolbox: _kFigAssetProperty_SHA1Digest
__ MediaToolbox: _kFigAssetProperty_ShouldPrefetchCryptKeys
__ MediaToolbox: _kFigAssetProperty_TrackReferences
__ MediaToolbox: _kFigAssetProperty_Tracks
__ MediaToolbox: _kFigAssetProperty_iTunesMetadata
__ MediaToolbox: _kFigAssetProperty_moovAtomSize
__ MediaToolbox: _kFigAssetReaderAudioProcessingOption_TimePitchAlgorithm
__ MediaToolbox: _kFigAssetReaderCreationOption_PermitNonLocalURLs
__ MediaToolbox: _kFigAssetReaderExtractionOption_CopyDataBuffers
__ MediaToolbox: _kFigAssetReaderExtractionOption_FieldMode
__ MediaToolbox: _kFigAssetReaderExtractionOption_MatrixHandling
__ MediaToolbox: _kFigAssetReaderExtractionOption_MaximizePowerEfficiency
__ MediaToolbox: _kFigAssetReaderExtractionOption_TrimSampleBufferDurations
__ MediaToolbox: _kFigAssetReaderMatrixHandling_ApplyRotation
__ MediaToolbox: _kFigAssetReaderMatrixHandling_PreserveMatrix
__ MediaToolbox: _kFigAssetReaderNotificationParameter_ExtractionID
__ MediaToolbox: _kFigAssetReaderNotification_DecodeError
__ MediaToolbox: _kFigAssetReaderNotification_Failed
__ MediaToolbox: _kFigAssetReaderNotification_SampleBufferNowAvailable
__ MediaToolbox: _kFigAssetReaderNotification_ServerConnectionDied
__ MediaToolbox: _kFigAssetReaderSourceTrackArrayKey_AudioProcessingTap
__ MediaToolbox: _kFigAssetReaderSourceTrackArrayKey_AudioVolumeCurve
__ MediaToolbox: _kFigAssetReaderSourceTrackArrayKey_TimePitchAlgorithm
__ MediaToolbox: _kFigAssetReaderSourceTrackArrayKey_TrackID
__ MediaToolbox: _kFigAssetReaderTimePitchAlgorithm_LowQualityZeroLatency
__ MediaToolbox: _kFigAssetReaderTimePitchAlgorithm_Spectral
__ MediaToolbox: _kFigAssetReaderTimePitchAlgorithm_TimeDomain
__ MediaToolbox: _kFigAssetReaderTimePitchAlgorithm_Varispeed
__ MediaToolbox: _kFigAssetSegmentReportKey_SegmentType
__ MediaToolbox: _kFigAssetSegmentReportKey_TrackReports
__ MediaToolbox: _kFigAssetSegmentReportSampleInformationKey_IsSyncSample
__ MediaToolbox: _kFigAssetSegmentReportSampleInformationKey_Length
__ MediaToolbox: _kFigAssetSegmentReportSampleInformationKey_Offset
__ MediaToolbox: _kFigAssetSegmentReportSampleInformationKey_PresentationTimeStamp
__ MediaToolbox: _kFigAssetSegmentTrackReportKey_Duration
__ MediaToolbox: _kFigAssetSegmentTrackReportKey_EarliestPresentationTimeStamp
__ MediaToolbox: _kFigAssetSegmentTrackReportKey_FirstVideoSampleInformation
__ MediaToolbox: _kFigAssetSegmentTrackReportKey_MediaType
__ MediaToolbox: _kFigAssetSegmentTrackReportKey_TrackID
__ MediaToolbox: _kFigAssetServerStatePurgedNotificationPayloadKey_PurgeIdentifier
__ MediaToolbox: _kFigAssetTrackNotification_BatchPropertyLoadComplete
__ MediaToolbox: _kFigAssetTrackNotification_PropertyRevised
__ MediaToolbox: _kFigAssetTrackProperty_AudibleContentIsAuthorized
__ MediaToolbox: _kFigAssetTrackProperty_EditSegmentData
__ MediaToolbox: _kFigAssetTrackProperty_EditsExcludeAudioPrimingAndRemainderDuration
__ MediaToolbox: _kFigAssetTrackProperty_FormatSpecificMetadata
__ MediaToolbox: _kFigAssetTrackProperty_GaplessSourceTimeRange
__ MediaToolbox: _kFigAssetTrackProperty_ISOUserData
__ MediaToolbox: _kFigAssetTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment
__ MediaToolbox: _kFigAssetTrackProperty_MediaDecodingValidation
__ MediaToolbox: _kFigAssetTrackProperty_MediaPlaybackValidation
__ MediaToolbox: _kFigAssetTrackProperty_PresentationSegmentData
__ MediaToolbox: _kFigAssetTrackProperty_ProtectedStatus
__ MediaToolbox: _kFigAssetTrackProperty_QuickTimeMetadata
__ MediaToolbox: _kFigAssetTrackProperty_QuickTimeUserData
__ MediaToolbox: _kFigAssetTrackProperty_TrackReferences
__ MediaToolbox: _kFigAssetTrackProperty_UsesAudibleDRM
__ MediaToolbox: _kFigAssetType_File
__ MediaToolbox: _kFigAssetType_Streaming
__ MediaToolbox: _kFigAssetWriterAudioTrackProcessingOption_SourceAudioFormatDescriptionHint
__ MediaToolbox: _kFigAssetWriterKey_NumBytesToEndOfFirstVideoFrame
__ MediaToolbox: _kFigAssetWriterNotificationParameter_FurtherPassesRequested
__ MediaToolbox: _kFigAssetWriterNotificationParameter_OSStatus
__ MediaToolbox: _kFigAssetWriterNotificationParameter_PassTimeRanges
__ MediaToolbox: _kFigAssetWriterNotificationParameter_WriterTrackID
__ MediaToolbox: _kFigAssetWriterNotification_Completed
__ MediaToolbox: _kFigAssetWriterNotification_Failed
__ MediaToolbox: _kFigAssetWriterNotification_PassFinished
__ MediaToolbox: _kFigAssetWriterNotification_ServerConnectionDied
__ MediaToolbox: _kFigAssetWriterNotification_TrackQueueNowBelowLowWaterLevel
__ MediaToolbox: _kFigAssetWriterOption_FastStart
__ MediaToolbox: _kFigAssetWriterOption_RealTime
__ MediaToolbox: _kFigAssetWriterOption_ShouldUseVirtualCaptureCard
__ MediaToolbox: _kFigAssetWriterProperty_InitialSegmentStartTime
__ MediaToolbox: _kFigAssetWriterProperty_MaximizePowerEfficiency
__ MediaToolbox: _kFigAssetWriterProperty_Metadata
__ MediaToolbox: _kFigAssetWriterProperty_PreferredOutputSegmentInterval
__ MediaToolbox: _kFigAssetWriterTrackProperty_EncoderSupportsMultiPass
__ MediaToolbox: _kFigAssetWriterTrackProperty_Metadata
__ MediaToolbox: _kFigAssetWriterTrackProperty_PixelBufferPool
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_AlternateContentInfo
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_AlternateContentInfoAssetURLString
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_DSID
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_DownloadParameters
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_HLSAssetURLString
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_ID
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_PurchasedMediaKind
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_RentalID
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_Type
__ MediaToolbox: _kFigAssetiTunesStoreContentOptionsKey_UserAgent
__ MediaToolbox: _kFigAudioCompressionOption_AudioConverterEncodeBitRate
__ MediaToolbox: _kFigAudioCompressionOption_AudioConverterSampleRateConverterComplexity
__ MediaToolbox: _kFigAudioCompressionOption_BitRateControlMode
__ MediaToolbox: _kFigAudioCompressionOption_CodecQuality
__ MediaToolbox: _kFigAudioCompressionOption_QualityForVBR
__ MediaToolbox: _kFigCPEOption_InitializeForHDCP
__ MediaToolbox: _kFigCPEOption_InitializeForVideoPlayback
__ MediaToolbox: _kFigCPEOption_StorageURL
__ MediaToolbox: _kFigCPEProtectionScheme_BasicAES
__ MediaToolbox: _kFigCPEProtectionScheme_FairPlay
__ MediaToolbox: _kFigCPEProtectionScheme_PKD
__ MediaToolbox: _kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE
__ MediaToolbox: _kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis
__ MediaToolbox: _kFigCPEProtectorCryptorCreationOption_DecryptFormatType
__ MediaToolbox: _kFigCPEProtectorNotification_ServerConnectionDied
__ MediaToolbox: _kFigCPEProtectorOption_MonitorExternalProtectionState
__ MediaToolbox: _kFigCPEProtectorProperty_ExternalProtectionRequiredForPlayback
__ MediaToolbox: _kFigCPEProtectorProperty_IsRental
__ MediaToolbox: _kFigCPEProtectorProperty_IsRentalPlaybackStarted
__ MediaToolbox: _kFigCPEProtectorProperty_RentalPeriodEndDate
__ MediaToolbox: _kFigCPEProtectorProperty_RentalPeriodStartDate
__ MediaToolbox: _kFigCPEProtectorProperty_RentalPlaybackPeriodEndDate
__ MediaToolbox: _kFigCPEProtectorProperty_RentalPlaybackPeriodStartDate
__ MediaToolbox: _kFigChapterArtworkDataKey_ImageData
__ MediaToolbox: _kFigChapterGroupKey_ExtendedLanguage
__ MediaToolbox: _kFigChapterGroupKey_Language
__ MediaToolbox: _kFigChapterGroupKey_PerChapterInfo
__ MediaToolbox: _kFigChapterGroupKey_Type
__ MediaToolbox: _kFigChapterKey_Duration
__ MediaToolbox: _kFigChapterKey_ImageMediaSubType
__ MediaToolbox: _kFigChapterKey_MetadataItems
__ MediaToolbox: _kFigChapterKey_Time
__ MediaToolbox: _kFigChapterTitleDataKey_HREF
__ MediaToolbox: _kFigChapterTitleDataKey_Text
__ MediaToolbox: _kFigEnvironmentalCondition_DefaultKey
__ MediaToolbox: _kFigErrorLogKey_Date
__ MediaToolbox: _kFigErrorLogKey_ErrorComment
__ MediaToolbox: _kFigErrorLogKey_ErrorDomain
__ MediaToolbox: _kFigErrorLogKey_ErrorStatusCode
__ MediaToolbox: _kFigErrorLogKey_PlaybackSessionID
__ MediaToolbox: _kFigErrorLogKey_ServerAddress
__ MediaToolbox: _kFigErrorLogKey_URI
__ MediaToolbox: _kFigExportSettingBitRateTableDefault
__ MediaToolbox: _kFigExportSettingsKey_AlphaEncoding
__ MediaToolbox: _kFigExportSettingsKey_AlphaQuality
__ MediaToolbox: _kFigExportSettingsKey_AudioDictionary
__ MediaToolbox: _kFigExportSettingsKey_AudioPreset
__ MediaToolbox: _kFigExportSettingsKey_ColorPrimaries
__ MediaToolbox: _kFigExportSettingsKey_ColorPropertyTiers
__ MediaToolbox: _kFigExportSettingsKey_EntropyMode
__ MediaToolbox: _kFigExportSettingsKey_FrameReordering
__ MediaToolbox: _kFigExportSettingsKey_Height
__ MediaToolbox: _kFigExportSettingsKey_KeyFrameInterval
__ MediaToolbox: _kFigExportSettingsKey_MaxHeight
__ MediaToolbox: _kFigExportSettingsKey_MaxWidth
__ MediaToolbox: _kFigExportSettingsKey_ProfileLevel
__ MediaToolbox: _kFigExportSettingsKey_TransferFunction
__ MediaToolbox: _kFigExportSettingsKey_VideoAverageBitRate
__ MediaToolbox: _kFigExportSettingsKey_VideoCodec
__ MediaToolbox: _kFigExportSettingsKey_VideoDictionary
__ MediaToolbox: _kFigExportSettingsKey_Width
__ MediaToolbox: _kFigExportSettingsKey_YCbCrMatrix
__ MediaToolbox: _kFigFileTypeProfile_MPEG4AppleHLS
__ MediaToolbox: _kFigFileTypeProfile_MPEG4CMAFCompliant
__ MediaToolbox: _kFigFormatReaderInstantiationOption_PrepareForCopying
__ MediaToolbox: _kFigFormatReaderProperty_AlternateGroupArray
__ MediaToolbox: _kFigFormatReaderProperty_ContainsFragments
__ MediaToolbox: _kFigFormatReaderProperty_CouldContainFragments
__ MediaToolbox: _kFigFormatReaderProperty_Duration
__ MediaToolbox: _kFigFormatReaderProperty_EstimatedDuration
__ MediaToolbox: _kFigFormatReaderProperty_Lyrics
__ MediaToolbox: _kFigFormatReaderProperty_MetadataReaders
__ MediaToolbox: _kFigFormatReaderProperty_MovieExtendsDuration
__ MediaToolbox: _kFigFormatReaderProperty_MovieMatrix
__ MediaToolbox: _kFigFormatReaderProperty_PreferredRate
__ MediaToolbox: _kFigFormatReaderProperty_PreferredVolume
__ MediaToolbox: _kFigFormatReaderProperty_SampleCursorTimeAccuracyIsExact
__ MediaToolbox: _kFigFormatReaderProperty_Timescale
__ MediaToolbox: _kFigFormatReaderProperty_TrackReferenceDictionary
__ MediaToolbox: _kFigFormatReaderProperty_iTunesSoundCheckVolumeNormalization
__ MediaToolbox: _kFigFormatRegistryNotification_SupportedFormatsChanged
__ MediaToolbox: _kFigFormatWriterOption_FileFormat
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_3GPFamily
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_AIFFAudioFile
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_AMRAudioFile
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_CAFAudioFile
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_MP4Family
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_QuickTimeMovie
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_WAVEAudioFile
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_iTunesAudioFamily
__ MediaToolbox: _kFigFormatWriterOption_FileFormat_iTunesVideoFamily
__ MediaToolbox: _kFigFormatWriterOption_FileTypeProfile
__ MediaToolbox: _kFigFormatWriterPredeterminedMediaDataSize
__ MediaToolbox: _kFigFormatWriterPredeterminedTotalFileSize
__ MediaToolbox: _kFigFormatWriterProperty_MovieExtendsHeaderFragmentDuration
__ MediaToolbox: _kFigFormatWriterProperty_MovieFragmentCheckpointInterval
__ MediaToolbox: _kFigFormatWriterProperty_MovieMatrix
__ MediaToolbox: _kFigFormatWriterProperty_MovieTimeScale
__ MediaToolbox: _kFigFormatWriterProperty_NextMovieFragmentSequenceNumber
__ MediaToolbox: _kFigFormatWriterProperty_PreferredVolume
__ MediaToolbox: _kFigFormatWriterProperty_ProduceCombinableMovieFragments
__ MediaToolbox: _kFigFormatWriterProperty_TrackReference
__ MediaToolbox: _kFigFormatWriterProperty_WriteInSinglePassUsingPredeterminedSizes
__ MediaToolbox: _kFigFormatWriterTrackProperty_DefaultAlternateGroupID
__ MediaToolbox: _kFigFormatWriterTrackProperty_EnableTrack
__ MediaToolbox: _kFigFormatWriterTrackProperty_ExcludeFromAutoSelection
__ MediaToolbox: _kFigFormatWriterTrackProperty_ExtendedLanguageTag
__ MediaToolbox: _kFigFormatWriterTrackProperty_FormatDescriptionArray
__ MediaToolbox: _kFigFormatWriterTrackProperty_InterleaveTrack
__ MediaToolbox: _kFigFormatWriterTrackProperty_LanguageTag
__ MediaToolbox: _kFigFormatWriterTrackProperty_MediaDataPrecedence
__ MediaToolbox: _kFigFormatWriterTrackProperty_MediaTimeScale
__ MediaToolbox: _kFigFormatWriterTrackProperty_PreferredChunkAlignment
__ MediaToolbox: _kFigFormatWriterTrackProperty_PreferredChunkDuration
__ MediaToolbox: _kFigFormatWriterTrackProperty_PreferredChunkSize
__ MediaToolbox: _kFigFormatWriterTrackProperty_ProvisionalAlternateGroupID
__ MediaToolbox: _kFigFormatWriterTrackProperty_QTLoadSettings
__ MediaToolbox: _kFigFormatWriterTrackProperty_ReplacementFormatDescriptionArray
__ MediaToolbox: _kFigFormatWriterTrackProperty_SampleReferenceBaseURL
__ MediaToolbox: _kFigFormatWriterTrackProperty_TrackDimensions
__ MediaToolbox: _kFigFormatWriterTrackProperty_TrackMatrix
__ MediaToolbox: _kFigFormatWriterTrackProperty_TrackVolume
__ MediaToolbox: _kFigManifoldBufferAttachmentKey_AudioDecryptor
__ MediaToolbox: _kFigManifoldBufferAttachmentKey_Decryptor
__ MediaToolbox: _kFigManifoldProperty_Asset
__ MediaToolbox: _kFigManifoldProperty_ParserState
__ MediaToolbox: _kFigManifoldProperty_UnconsumedData
__ MediaToolbox: _kFigMetadataCommonKey_Artwork
__ MediaToolbox: _kFigMetadataCommonKey_Title
__ MediaToolbox: _kFigMetadataCommonKeyspace
__ MediaToolbox: _kFigMetadataDataTypeNamespace_CoreMedia
__ MediaToolbox: _kFigMetadataDataTypeNamespace_MIME
__ MediaToolbox: _kFigMetadataDataTypeNamespace_UTI
__ MediaToolbox: _kFigMetadataItemProperty_ConformingDataTypes
__ MediaToolbox: _kFigMetadataItemProperty_DataLength
__ MediaToolbox: _kFigMetadataItemProperty_DataType
__ MediaToolbox: _kFigMetadataItemProperty_DataTypeNamespace
__ MediaToolbox: _kFigMetadataItemProperty_DiscoveryTimestamp
__ MediaToolbox: _kFigMetadataItemProperty_Duration
__ MediaToolbox: _kFigMetadataItemProperty_ExtendedLanguageTag
__ MediaToolbox: _kFigMetadataItemProperty_HREF
__ MediaToolbox: _kFigMetadataItemProperty_Key
__ MediaToolbox: _kFigMetadataItemProperty_Keyspace
__ MediaToolbox: _kFigMetadataItemProperty_LanguageCode
__ MediaToolbox: _kFigMetadataItemProperty_Locale
__ MediaToolbox: _kFigMetadataItemProperty_StartDate
__ MediaToolbox: _kFigMetadataItemProperty_Timestamp
__ MediaToolbox: _kFigMetadataItemProperty_URL
__ MediaToolbox: _kFigMetadataItemProperty_Value
__ MediaToolbox: _kFigMetadataProperty_Format
__ MediaToolbox: _kFigMetadataProperty_Items
__ MediaToolbox: _kFigMetadataReaderProperty_Format
__ MediaToolbox: _kFigMutableCompositionFormatDescriptionReplacementTableKey_NewFormatDescription
__ MediaToolbox: _kFigMutableCompositionFormatDescriptionReplacementTableKey_OldFormatDescription
__ MediaToolbox: _kFigMutableCompositionProperty_AssetCreationFlags
__ MediaToolbox: _kFigMutableCompositionProperty_AssetCreationOptions
__ MediaToolbox: _kFigMutableCompositionProperty_Metadata
__ MediaToolbox: _kFigMutableCompositionProperty_TrackReferenceDictionary
__ MediaToolbox: _kFigMutableCompositionTrackProperty_AlternateGroupID
__ MediaToolbox: _kFigMutableCompositionTrackProperty_Enabled
__ MediaToolbox: _kFigMutableCompositionTrackProperty_FormatDescriptionReplacementTable
__ MediaToolbox: _kFigMutableCompositionTrackProperty_Metadata
__ MediaToolbox: _kFigMutableMovieCreationOption_SynthesizeURLForMovieProxy
__ MediaToolbox: _kFigMutableMovieHeaderOption_SynthesizeURLForMovieProxy
__ MediaToolbox: _kFigMutableMovieProperty_AvailableMetadataFormats
__ MediaToolbox: _kFigMutableMovieProperty_DefaultMediaDataStorageURL
__ MediaToolbox: _kFigMutableMovieProperty_InterleavingPeriod
__ MediaToolbox: _kFigMutableMovieProperty_Metadata
__ MediaToolbox: _kFigMutableMovieProperty_Modified
__ MediaToolbox: _kFigMutableMovieProperty_MovieDuration
__ MediaToolbox: _kFigMutableMovieProperty_MovieMatrix
__ MediaToolbox: _kFigMutableMovieProperty_MovieTimeScale
__ MediaToolbox: _kFigMutableMovieProperty_PreferredRate
__ MediaToolbox: _kFigMutableMovieProperty_PreferredVolume
__ MediaToolbox: _kFigMutableMovieProperty_TrackReferenceDictionary
__ MediaToolbox: _kFigMutableMovieProperty_Tracks
__ MediaToolbox: _kFigMutableMovieTrackProperty_AlternateGroupID
__ MediaToolbox: _kFigMutableMovieTrackProperty_AvailableMetadataFormats
__ MediaToolbox: _kFigMutableMovieTrackProperty_CleanApertureDimensions
__ MediaToolbox: _kFigMutableMovieTrackProperty_Dimensions
__ MediaToolbox: _kFigMutableMovieTrackProperty_EncodedPixelsDimensions
__ MediaToolbox: _kFigMutableMovieTrackProperty_ExtendedLanguageTag
__ MediaToolbox: _kFigMutableMovieTrackProperty_FormatDescriptionArray
__ MediaToolbox: _kFigMutableMovieTrackProperty_IsEnabled
__ MediaToolbox: _kFigMutableMovieTrackProperty_LanguageCode
__ MediaToolbox: _kFigMutableMovieTrackProperty_Layer
__ MediaToolbox: _kFigMutableMovieTrackProperty_MediaDataStorageURL
__ MediaToolbox: _kFigMutableMovieTrackProperty_MediaDecodeTimeRange
__ MediaToolbox: _kFigMutableMovieTrackProperty_MediaPresentationTimeRange
__ MediaToolbox: _kFigMutableMovieTrackProperty_MediaTimeScale
__ MediaToolbox: _kFigMutableMovieTrackProperty_Metadata
__ MediaToolbox: _kFigMutableMovieTrackProperty_Modified
__ MediaToolbox: _kFigMutableMovieTrackProperty_PreferredChunkAlignment
__ MediaToolbox: _kFigMutableMovieTrackProperty_PreferredChunkDuration
__ MediaToolbox: _kFigMutableMovieTrackProperty_PreferredChunkSize
__ MediaToolbox: _kFigMutableMovieTrackProperty_ProductionApertureDimensions
__ MediaToolbox: _kFigMutableMovieTrackProperty_SampleReferenceBaseURL
__ MediaToolbox: _kFigMutableMovieTrackProperty_TrackMatrix
__ MediaToolbox: _kFigMutableMovieTrackProperty_Volume
__ MediaToolbox: _kFigPKDPSSH_ContentIdentifier
__ MediaToolbox: _kFigPKDPSSH_KeyID
__ MediaToolbox: _kFigPKDPSSH_VersionList
__ MediaToolbox: _kFigPlaybackCoordinatorNotificationPayload_ParticipantUUIDs
__ MediaToolbox: _kFigPlaybackCoordinatorNotificationPayload_SuspensionReasons
__ MediaToolbox: _kFigPlaybackCoordinatorNotification_DidIssueCommandToFigPlayer
__ MediaToolbox: _kFigPlaybackCoordinatorNotification_ParticipantsChanged
__ MediaToolbox: _kFigPlaybackCoordinatorNotification_SuspensionReasonsChanged
__ MediaToolbox: _kFigPlaybackItemAudioCurveVolumeRampStyle_EqualPower
__ MediaToolbox: _kFigPlaybackItemAudioCurveVolumeRampStyle_Linear
__ MediaToolbox: _kFigPlaybackItemAudioCurve_Volume
__ MediaToolbox: _kFigPlaybackItemBufferState_Full
__ MediaToolbox: _kFigPlaybackItemLegibleOutputKey_AdvanceInterval
__ MediaToolbox: _kFigPlaybackItemLegibleOutputKey_SubTypesForNativeSamples
__ MediaToolbox: _kFigPlaybackItemLegibleOutputKey_TextStylingResolution
__ MediaToolbox: _kFigPlaybackItemLegibleOutputTextStylingResolution_Default
__ MediaToolbox: _kFigPlaybackItemLegibleOutputTextStylingResolution_SourceAndRulesOnly
__ MediaToolbox: _kFigPlaybackItemLikelyToKeepUpTrigger_Default
__ MediaToolbox: _kFigPlaybackItemLikelyToKeepUpTrigger_Live
__ MediaToolbox: _kFigPlaybackItemMetadataOutputKey_AdvanceInterval
__ MediaToolbox: _kFigPlaybackItemMetadataOutputKey_MetadataIdentifiersToOutput
__ MediaToolbox: _kFigPlaybackItemNotification_AllowedSpatializationChanged
__ MediaToolbox: _kFigPlaybackItemNotification_AlternateStreamChanged
__ MediaToolbox: _kFigPlaybackItemNotification_CachePrimingCompleted
__ MediaToolbox: _kFigPlaybackItemNotification_ChosenTracksChanged
__ MediaToolbox: _kFigPlaybackItemNotification_DidPlayToTheEnd
__ MediaToolbox: _kFigPlaybackItemNotification_DidRemoveImageQueue
__ MediaToolbox: _kFigPlaybackItemNotification_DimensionsChanged
__ MediaToolbox: _kFigPlaybackItemNotification_DisplayNonForcedSubtitlesChanged
__ MediaToolbox: _kFigPlaybackItemNotification_DurationChanged
__ MediaToolbox: _kFigPlaybackItemNotification_FailedToBecomeReadyForInspection
__ MediaToolbox: _kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback
__ MediaToolbox: _kFigPlaybackItemNotification_FailedToPlayToEnd
__ MediaToolbox: _kFigPlaybackItemNotification_FirstVideoFrameEnqueued
__ MediaToolbox: _kFigPlaybackItemNotification_HasDiscoveredVideo
__ MediaToolbox: _kFigPlaybackItemNotification_HasEnabledAudioChanged
__ MediaToolbox: _kFigPlaybackItemNotification_HasEnabledVideoChanged
__ MediaToolbox: _kFigPlaybackItemNotification_ItemBecameCurrent
__ MediaToolbox: _kFigPlaybackItemNotification_ItemStoppedBeingCurrent
__ MediaToolbox: _kFigPlaybackItemNotification_ItemWasRemovedFromPlayQueue
__ MediaToolbox: _kFigPlaybackItemNotification_LegibleOutputChanged
__ MediaToolbox: _kFigPlaybackItemNotification_LegibleOutputWasFlushed
__ MediaToolbox: _kFigPlaybackItemNotification_MetadataOutputChanged
__ MediaToolbox: _kFigPlaybackItemNotification_MetadataOutputWasFlushed
__ MediaToolbox: _kFigPlaybackItemNotification_NewAccessLogEntry
__ MediaToolbox: _kFigPlaybackItemNotification_NewErrorLogEntry
__ MediaToolbox: _kFigPlaybackItemNotification_NewRecommendedTimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemNotification_PlayableRangeChanged
__ MediaToolbox: _kFigPlaybackItemNotification_PlaybackStalled
__ MediaToolbox: _kFigPlaybackItemNotification_ReachedTimeToPauseBuffering
__ MediaToolbox: _kFigPlaybackItemNotification_ReachedTimeToPausePlayback
__ MediaToolbox: _kFigPlaybackItemNotification_ReadyForInspection
__ MediaToolbox: _kFigPlaybackItemNotification_ReadyForPlayback
__ MediaToolbox: _kFigPlaybackItemNotification_RequiresExternalProtectionChanged
__ MediaToolbox: _kFigPlaybackItemNotification_ResetSampleBufferExtraction
__ MediaToolbox: _kFigPlaybackItemNotification_SampleBufferNowAvailable
__ MediaToolbox: _kFigPlaybackItemNotification_SeekDidComplete
__ MediaToolbox: _kFigPlaybackItemNotification_SeekWasCanceled
__ MediaToolbox: _kFigPlaybackItemNotification_SeekableRangeChanged
__ MediaToolbox: _kFigPlaybackItemNotification_SelectedMediaOptionsDidChange
__ MediaToolbox: _kFigPlaybackItemNotification_SpatialAudioRenderingChanged
__ MediaToolbox: _kFigPlaybackItemNotification_StatusChangedToError
__ MediaToolbox: _kFigPlaybackItemNotification_StreamBufferFull
__ MediaToolbox: _kFigPlaybackItemNotification_StreamLikelyToKeepUp
__ MediaToolbox: _kFigPlaybackItemNotification_StreamRanDry
__ MediaToolbox: _kFigPlaybackItemNotification_StreamUnlikelyToKeepUp
__ MediaToolbox: _kFigPlaybackItemNotification_TaggedRangeMetadataChanged
__ MediaToolbox: _kFigPlaybackItemNotification_TimeJumped
__ MediaToolbox: _kFigPlaybackItemNotification_TimebaseChanged
__ MediaToolbox: _kFigPlaybackItemNotification_TracksChanged
__ MediaToolbox: _kFigPlaybackItemOptionKey_LoggingIdentifier
__ MediaToolbox: _kFigPlaybackItemParameter_CFError
__ MediaToolbox: _kFigPlaybackItemParameter_CoordinatedPlaybackOriginator
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentBufferState
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentCanPlayFastForward
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentCanPlayFastReverse
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentCanPlayReverse
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentConfiguredTimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentDimensions
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentDisplayNonForcedSubtitles
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentDuration
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentPlayableTimeIntervals
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentRecommendedTimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentSeekableTimeIntervals
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentSelectedMediaArray
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentStableVariantID
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentSupportsFrameStepping
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentTaggedRangeMetadataArray
__ MediaToolbox: _kFigPlaybackItemParameter_CurrentTrackIDArray
__ MediaToolbox: _kFigPlaybackItemParameter_ErrorCode
__ MediaToolbox: _kFigPlaybackItemParameter_ExtractionID
__ MediaToolbox: _kFigPlaybackItemParameter_FigTime
__ MediaToolbox: _kFigPlaybackItemParameter_HasDiscoveredVideo
__ MediaToolbox: _kFigPlaybackItemParameter_HasEnabledAudio
__ MediaToolbox: _kFigPlaybackItemParameter_HasEnabledVideo
__ MediaToolbox: _kFigPlaybackItemParameter_LegibleOutputAttributedStrings
__ MediaToolbox: _kFigPlaybackItemParameter_LegibleOutputKey
__ MediaToolbox: _kFigPlaybackItemParameter_LegibleOutputNativeSamples
__ MediaToolbox: _kFigPlaybackItemParameter_MetadataOutputKey
__ MediaToolbox: _kFigPlaybackItemParameter_Properties
__ MediaToolbox: _kFigPlaybackItemParameter_RenderingSpatialAudio
__ MediaToolbox: _kFigPlaybackItemParameter_Result
__ MediaToolbox: _kFigPlaybackItemParameter_ResultIsFatal
__ MediaToolbox: _kFigPlaybackItemParameter_SampleBuffers
__ MediaToolbox: _kFigPlaybackItemParameter_SeekID
__ MediaToolbox: _kFigPlaybackItemParameter_SeekReason
__ MediaToolbox: _kFigPlaybackItemParameter_TrackID
__ MediaToolbox: _kFigPlaybackItemPlayableTimeInterval_EndTime
__ MediaToolbox: _kFigPlaybackItemPlayableTimeInterval_StartTime
__ MediaToolbox: _kFigPlaybackItemProperty_AccessLog
__ MediaToolbox: _kFigPlaybackItemProperty_AdvanceTimeForOverlappedPlayback
__ MediaToolbox: _kFigPlaybackItemProperty_AggressivelyCachesVideoFrames
__ MediaToolbox: _kFigPlaybackItemProperty_AllowProgressiveResume
__ MediaToolbox: _kFigPlaybackItemProperty_AllowProgressiveStartup
__ MediaToolbox: _kFigPlaybackItemProperty_AllowProgressiveSwitchUp
__ MediaToolbox: _kFigPlaybackItemProperty_AlwaysMonitorPlayability
__ MediaToolbox: _kFigPlaybackItemProperty_ApertureMode
__ MediaToolbox: _kFigPlaybackItemProperty_AudioProcessingTap
__ MediaToolbox: _kFigPlaybackItemProperty_AudioSampleRateCap
__ MediaToolbox: _kFigPlaybackItemProperty_AudioSpatializationAllowed
__ MediaToolbox: _kFigPlaybackItemProperty_AutoSwitchAtmosVariants
__ MediaToolbox: _kFigPlaybackItemProperty_AutomaticallyLoadedAssetProperties
__ MediaToolbox: _kFigPlaybackItemProperty_AutomaticallyLoadedAssetTrackProperties
__ MediaToolbox: _kFigPlaybackItemProperty_AutomaticallyPreservesTimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemProperty_AvailableFileSize
__ MediaToolbox: _kFigPlaybackItemProperty_BandwidthCap
__ MediaToolbox: _kFigPlaybackItemProperty_BandwidthCapForExpensiveNetwork
__ MediaToolbox: _kFigPlaybackItemProperty_BlendsVideoFrames
__ MediaToolbox: _kFigPlaybackItemProperty_CPEProtector
__ MediaToolbox: _kFigPlaybackItemProperty_CachePrimingDownloadToken
__ MediaToolbox: _kFigPlaybackItemProperty_CanPlayFastForward
__ MediaToolbox: _kFigPlaybackItemProperty_CanPlayFastReverse
__ MediaToolbox: _kFigPlaybackItemProperty_CanPlayReverse
__ MediaToolbox: _kFigPlaybackItemProperty_ConfigurationGroup
__ MediaToolbox: _kFigPlaybackItemProperty_ContinuePlayingDuringPrerollForRateChange
__ MediaToolbox: _kFigPlaybackItemProperty_ContinuePlayingDuringPrerollForSeek
__ MediaToolbox: _kFigPlaybackItemProperty_CoordinationIdentifier
__ MediaToolbox: _kFigPlaybackItemProperty_CountOfTaggedRangeMetadataArrayListeners
__ MediaToolbox: _kFigPlaybackItemProperty_CurrentDate
__ MediaToolbox: _kFigPlaybackItemProperty_DecodeAllFramesDuringOrdinaryPlayback
__ MediaToolbox: _kFigPlaybackItemProperty_DisplayNonForcedSubtitles
__ MediaToolbox: _kFigPlaybackItemProperty_EQPreset
__ MediaToolbox: _kFigPlaybackItemProperty_EnableDownloadWhenInPlayQueue
__ MediaToolbox: _kFigPlaybackItemProperty_EnableDownloadWhenNotInPlayQueue
__ MediaToolbox: _kFigPlaybackItemProperty_EndTime
__ MediaToolbox: _kFigPlaybackItemProperty_ErrorLog
__ MediaToolbox: _kFigPlaybackItemProperty_EstimatedCurrentDate
__ MediaToolbox: _kFigPlaybackItemProperty_FileSize
__ MediaToolbox: _kFigPlaybackItemProperty_ForceEnableAccessLog
__ MediaToolbox: _kFigPlaybackItemProperty_HasEnabledAudio
__ MediaToolbox: _kFigPlaybackItemProperty_HasEnabledVideo
__ MediaToolbox: _kFigPlaybackItemProperty_IFrameOnlySpeedThreshold
__ MediaToolbox: _kFigPlaybackItemProperty_IFramePrefetchTargetDimensions
__ MediaToolbox: _kFigPlaybackItemProperty_ImageQueueInterpolationCurve
__ MediaToolbox: _kFigPlaybackItemProperty_InitialSamples
__ MediaToolbox: _kFigPlaybackItemProperty_InterstitialTimeRanges
__ MediaToolbox: _kFigPlaybackItemProperty_LegibleOutputsDictionary
__ MediaToolbox: _kFigPlaybackItemProperty_LikelyToKeepUpTrigger
__ MediaToolbox: _kFigPlaybackItemProperty_LiveUpdateInterval
__ MediaToolbox: _kFigPlaybackItemProperty_LoopTimeRange
__ MediaToolbox: _kFigPlaybackItemProperty_LoudnessInfo
__ MediaToolbox: _kFigPlaybackItemProperty_Lyrics
__ MediaToolbox: _kFigPlaybackItemProperty_MaximumTimePlayedToSinceLastSeek
__ MediaToolbox: _kFigPlaybackItemProperty_MaximumTrailingBufferDuration
__ MediaToolbox: _kFigPlaybackItemProperty_MediaKind
__ MediaToolbox: _kFigPlaybackItemProperty_MetadataOutputsDictionary
__ MediaToolbox: _kFigPlaybackItemProperty_MinimizeNetworkingWhilePaused
__ MediaToolbox: _kFigPlaybackItemProperty_MinimumIntervalForIFrameOnlyPlayback
__ MediaToolbox: _kFigPlaybackItemProperty_NetworkUsuallyExceedsMaxBitRate
__ MediaToolbox: _kFigPlaybackItemProperty_PlayHapticTracks
__ MediaToolbox: _kFigPlaybackItemProperty_PlayabilityMetrics
__ MediaToolbox: _kFigPlaybackItemProperty_PlayableTimeIntervals
__ MediaToolbox: _kFigPlaybackItemProperty_PlaybackItemProperties
__ MediaToolbox: _kFigPlaybackItemProperty_PreferredMaximumBufferDuration
__ MediaToolbox: _kFigPlaybackItemProperty_PrefersOfflinePlayableVariants
__ MediaToolbox: _kFigPlaybackItemProperty_ProgressToPlayThrough
__ MediaToolbox: _kFigPlaybackItemProperty_PropagatePerFrameHDRDisplayMetadata
__ MediaToolbox: _kFigPlaybackItemProperty_QualityGear
__ MediaToolbox: _kFigPlaybackItemProperty_RTCReportingFlags
__ MediaToolbox: _kFigPlaybackItemProperty_ReadAheadAllowBackfill
__ MediaToolbox: _kFigPlaybackItemProperty_RecommendedTimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemProperty_RequiresExternalProtection
__ MediaToolbox: _kFigPlaybackItemProperty_ResetAudioBufferedAhead
__ MediaToolbox: _kFigPlaybackItemProperty_ResolutionCap
__ MediaToolbox: _kFigPlaybackItemProperty_ResolutionCapForExpensiveNetwork
__ MediaToolbox: _kFigPlaybackItemProperty_ResolutionFloor
__ MediaToolbox: _kFigPlaybackItemProperty_Restrictions
__ MediaToolbox: _kFigPlaybackItemProperty_RestrictsAutomaticMediaSelectionToAvailableOfflineOptions
__ MediaToolbox: _kFigPlaybackItemProperty_ReverseEndTime
__ MediaToolbox: _kFigPlaybackItemProperty_ReversesMoreVideoFramesInMemory
__ MediaToolbox: _kFigPlaybackItemProperty_SaveDownloadedDataToDiskWhenDone
__ MediaToolbox: _kFigPlaybackItemProperty_SeekableTimeIntervals
__ MediaToolbox: _kFigPlaybackItemProperty_SeekingWaitsForVideoCompositionRendering
__ MediaToolbox: _kFigPlaybackItemProperty_SelectedMediaArray
__ MediaToolbox: _kFigPlaybackItemProperty_ServiceIdentifier
__ MediaToolbox: _kFigPlaybackItemProperty_SnapTimeToPausePlayback
__ MediaToolbox: _kFigPlaybackItemProperty_SoundCheckVolumeNormalization
__ MediaToolbox: _kFigPlaybackItemProperty_StartsOnFirstEligibleVariant
__ MediaToolbox: _kFigPlaybackItemProperty_Status
__ MediaToolbox: _kFigPlaybackItemProperty_StereoAudioSpatializationAllowed
__ MediaToolbox: _kFigPlaybackItemProperty_SupportsFrameStepping
__ MediaToolbox: _kFigPlaybackItemProperty_SuppressLegibleRendering
__ MediaToolbox: _kFigPlaybackItemProperty_SuppressVideoLayers
__ MediaToolbox: _kFigPlaybackItemProperty_SuppressesAudioOnlyVariants
__ MediaToolbox: _kFigPlaybackItemProperty_SynchronizedLayers
__ MediaToolbox: _kFigPlaybackItemProperty_TextHighlightArray
__ MediaToolbox: _kFigPlaybackItemProperty_TextMarkupArray
__ MediaToolbox: _kFigPlaybackItemProperty_ThoroughlyRefreshClosedCaptionsWhenSeeking
__ MediaToolbox: _kFigPlaybackItemProperty_TimeOffsetFromLive
__ MediaToolbox: _kFigPlaybackItemProperty_TimePitchAlgorithm
__ MediaToolbox: _kFigPlaybackItemProperty_TimeToPauseBuffering
__ MediaToolbox: _kFigPlaybackItemProperty_TimeToPausePlayback
__ MediaToolbox: _kFigPlaybackItemProperty_Timebase
__ MediaToolbox: _kFigPlaybackItemProperty_TrackIDArray
__ MediaToolbox: _kFigPlaybackItemProperty_UseIFrameOnlyPlaybackForHighRateScaledEdits
__ MediaToolbox: _kFigPlaybackItemProperty_UsesMinimalLatencyForVideoCompositionRendering
__ MediaToolbox: _kFigPlaybackItemProperty_VariantPreferences
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositionInstructionArray
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositor
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorColorPrimaries
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorColorTransferFunction
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorColorYCbCrMatrix
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorFrameDuration
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorRenderDimensions
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorRenderScale
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorSourceSampleDataTrackIDs
__ MediaToolbox: _kFigPlaybackItemProperty_VideoCompositorSourceTrackIDForFrameTiming
__ MediaToolbox: _kFigPlaybackItemProperty_VideoEnhancementMode
__ MediaToolbox: _kFigPlaybackItemProperty_VisualContextArray
__ MediaToolbox: _kFigPlaybackItemProperty_Volume
__ MediaToolbox: _kFigPlaybackItemSeekableTimeInterval_EndTime
__ MediaToolbox: _kFigPlaybackItemSeekableTimeInterval_StartTime
__ MediaToolbox: _kFigPlaybackItemSeekableTimeInterval_UpdatedAt
__ MediaToolbox: _kFigPlaybackItemSelectedMediaOptionsKey_AutomaticSelection
__ MediaToolbox: _kFigPlaybackItemSelectedMediaOptionsKey_AutomaticallySelected
__ MediaToolbox: _kFigPlaybackItemSetTimeOption_MaxSnapTime
__ MediaToolbox: _kFigPlaybackItemSetTimeOption_MinSnapTime
__ MediaToolbox: _kFigPlaybackItemSetTimeOption_SeekID
__ MediaToolbox: _kFigPlaybackItemSetTimeOption_SeekReason
__ MediaToolbox: _kFigPlaybackItemSetTimeOption_SnapBehavior
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_Class
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_Cue
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_DiscoveryTimestamp
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_Duration
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_EndDate
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_ID
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_MetadataArray
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_ModificationTimestamp
__ MediaToolbox: _kFigPlaybackItemTaggedRangeMetadataKey_StartDate
__ MediaToolbox: _kFigPlaybackItemTrackProperty_AudioCurves
__ MediaToolbox: _kFigPlaybackItemTrackProperty_AudioProcessingTap
__ MediaToolbox: _kFigPlaybackItemTrackProperty_CurrentVideoFrameRate
__ MediaToolbox: _kFigPlaybackItemTrackProperty_Dimensions
__ MediaToolbox: _kFigPlaybackItemTrackProperty_EffectiveEQPreset
__ MediaToolbox: _kFigPlaybackItemTrackProperty_EffectiveLoudnessInfo
__ MediaToolbox: _kFigPlaybackItemTrackProperty_Enabled
__ MediaToolbox: _kFigPlaybackItemTrackProperty_EstimatedDataRate
__ MediaToolbox: _kFigPlaybackItemTrackProperty_ExtractionIDArray
__ MediaToolbox: _kFigPlaybackItemTrackProperty_ExtractionIDToPipelineLatencyDict
__ MediaToolbox: _kFigPlaybackItemTrackProperty_FormatDescriptionArray
__ MediaToolbox: _kFigPlaybackItemTrackProperty_LoudnessInfo
__ MediaToolbox: _kFigPlaybackItemTrackProperty_Matrix
__ MediaToolbox: _kFigPlaybackItemTrackProperty_MediaType
__ MediaToolbox: _kFigPlaybackItemTrackProperty_SweepFilterConfiguration
__ MediaToolbox: _kFigPlaybackItemTrackProperty_SweepFilterSweepValue
__ MediaToolbox: _kFigPlaybackItemTrackProperty_TimePitchAlgorithm
__ MediaToolbox: _kFigPlaybackItemTrackProperty_WillTrimShortDurationAudioSamples
__ MediaToolbox: _kFigPlaybackItemTrackSweepFilterConfigurationKey_BypassThreshold
__ MediaToolbox: _kFigPlaybackItemTrackSweepFilterConfigurationKey_Enabled
__ MediaToolbox: _kFigPlaybackItemTrackSweepFilterConfigurationKey_MaximumCutOffFrequency
__ MediaToolbox: _kFigPlaybackItemTrackSweepFilterConfigurationKey_MinimumCutOffFrequency
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_AudibleDRMGroupID
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_GaplessDurationInFrames
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_GaplessEncodingDelayInFrames
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_GaplessEncodingDrainInFrames
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_GaplessHeuristicInfo
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_GaplessLastPacketsResync
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_RampInDuration
__ MediaToolbox: _kFigPlaybackItem_PlaybackProperties_RampOutDuration
__ MediaToolbox: _kFigPlaybackPerformanceKey_AudioSpatializationMode
__ MediaToolbox: _kFigPlaybackPerformanceKey_MaxDisplaySize
__ MediaToolbox: _kFigPlaybackPerformanceKey_VideoTracks
__ MediaToolbox: _kFigPlayerAction_Advance
__ MediaToolbox: _kFigPlayerAction_None
__ MediaToolbox: _kFigPlayerAction_Stop
__ MediaToolbox: _kFigPlayerCaptionRenderingStrategy_CaptionDisplayService
__ MediaToolbox: _kFigPlayerCaptionRenderingStrategy_CoreTextSubtitleRenderer
__ MediaToolbox: _kFigPlayerClosedCaptionLayerBoundsUpdate_LayerBounds
__ MediaToolbox: _kFigPlayerClosedCaptionLayerBoundsUpdate_LayerCaptionsAvoidanceMargins
__ MediaToolbox: _kFigPlayerClosedCaptionLayerBoundsUpdate_LayerIndex
__ MediaToolbox: _kFigPlayerClosedCaptionLayerBoundsUpdate_LayerVideoRelativeToViewport
__ MediaToolbox: _kFigPlayerClosedCaptionLayerSetOptions_LayerIndex
__ MediaToolbox: _kFigPlayerClosedCaptionLayerSetSeparated_LayerIndex
__ MediaToolbox: _kFigPlayerClosedCaptionLayerSetSeparated_Value
__ MediaToolbox: _kFigPlayerCurrentItemDidChangeReason_AddToPlayQueue
__ MediaToolbox: _kFigPlayerCurrentItemDidChangeReason_RemoveFromPlayQueue
__ MediaToolbox: _kFigPlayerExternalProtectionStatus_Protected
__ MediaToolbox: _kFigPlayerInterstitialNotificationTransitionToRemote_RemoteCoord
__ MediaToolbox: _kFigPlayerInterstitialNotification_CurrentEventDidChange
__ MediaToolbox: _kFigPlayerInterstitialNotification_EventsDidChange
__ MediaToolbox: _kFigPlayerInterstitialNotification_TransitionToRemote
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_CaptionAppearanceDisplayType
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_FallbackPreferredCharacteristics
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_FallbackPreferredLanguages
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PrecludeMultichannelAudio
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PrecludedCharacteristics
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PrecludedSubTypes
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PreferMultichannelAudio
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PreferredCharacteristics
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PreferredLanguages
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_PreferredSubTypes
__ MediaToolbox: _kFigPlayerMediaSelectionCriteria_RequiredCharacteristics
__ MediaToolbox: _kFigPlayerNeroVideoGravity_Resize
__ MediaToolbox: _kFigPlayerNeroVideoGravity_ResizeAspect
__ MediaToolbox: _kFigPlayerNeroVideoGravity_ResizeAspectFill
__ MediaToolbox: _kFigPlayerNotification_ConflictMutedChanged
__ MediaToolbox: _kFigPlayerNotification_CurrentItemDidChange
__ MediaToolbox: _kFigPlayerNotification_DisplayingClosedCaptionsChanged
__ MediaToolbox: _kFigPlayerNotification_ExternalProtectionStatusChanged
__ MediaToolbox: _kFigPlayerNotification_IsAirPlayVideoActiveDidChange
__ MediaToolbox: _kFigPlayerNotification_IsNeroPlaybackActiveDidChange
__ MediaToolbox: _kFigPlayerNotification_MXSessionIDChanged
__ MediaToolbox: _kFigPlayerNotification_MutedDidChange
__ MediaToolbox: _kFigPlayerNotification_PiPIsPossibleDidChange
__ MediaToolbox: _kFigPlayerNotification_PickableRoutesDidChange
__ MediaToolbox: _kFigPlayerNotification_PlaybackInterruptionDidEnd
__ MediaToolbox: _kFigPlayerNotification_PlaybackStateDidChange
__ MediaToolbox: _kFigPlayerNotification_PlaybackWasInterrupted
__ MediaToolbox: _kFigPlayerNotification_PrerollDidComplete
__ MediaToolbox: _kFigPlayerNotification_PrerollWasCancelled
__ MediaToolbox: _kFigPlayerNotification_RateDidChange
__ MediaToolbox: _kFigPlayerNotification_ServerConnectionDied
__ MediaToolbox: _kFigPlayerNotification_ServerStatePurged
__ MediaToolbox: _kFigPlayerNotification_SetRateFailed
__ MediaToolbox: _kFigPlayerNotification_StatusChangedToError
__ MediaToolbox: _kFigPlayerNotification_TimedMetadata
__ MediaToolbox: _kFigPlayerNotification_UserVolumeDidChange
__ MediaToolbox: _kFigPlayerOptionKey_LoggingIdentifier
__ MediaToolbox: _kFigPlayerOptionKey_PreserveSessionSampleRate
__ MediaToolbox: _kFigPlayerOptionKey_PrimaryAirPlayIDForInterstitial
__ MediaToolbox: _kFigPlayerOptionKey_ShouldWaitForVideoTarget
__ MediaToolbox: _kFigPlayerParameter_CoordinatedPlaybackOriginator
__ MediaToolbox: _kFigPlayerParameter_CurrentConflictMuted
__ MediaToolbox: _kFigPlayerParameter_CurrentDisplayingClosedCaptions
__ MediaToolbox: _kFigPlayerParameter_CurrentExternalProtectionStatus
__ MediaToolbox: _kFigPlayerParameter_CurrentIsNeroPlaybackActive
__ MediaToolbox: _kFigPlayerParameter_CurrentMuted
__ MediaToolbox: _kFigPlayerParameter_CurrentPlaybackState
__ MediaToolbox: _kFigPlayerParameter_CurrentRate
__ MediaToolbox: _kFigPlayerParameter_ErrorCode
__ MediaToolbox: _kFigPlayerParameter_InterruptionStatus
__ MediaToolbox: _kFigPlayerParameter_InterruptorName
__ MediaToolbox: _kFigPlayerParameter_MXSessionID
__ MediaToolbox: _kFigPlayerParameter_PrerollID
__ MediaToolbox: _kFigPlayerParameter_RateChangeIdentifier
__ MediaToolbox: _kFigPlayerParameter_ReasonForCurrentItemDidChange
__ MediaToolbox: _kFigPlayerParameter_ReasonForRateChange
__ MediaToolbox: _kFigPlayerPreWiringPixelBufferOptions_Size
__ MediaToolbox: _kFigPlayerProperty_ActionAtEnd
__ MediaToolbox: _kFigPlayerProperty_ActivationContext
__ MediaToolbox: _kFigPlayerProperty_AllowGaplessTransitions
__ MediaToolbox: _kFigPlayerProperty_AllowOutOfBandTextTrackRendering
__ MediaToolbox: _kFigPlayerProperty_AllowPixelBufferPoolSharing
__ MediaToolbox: _kFigPlayerProperty_AllowsAirPlayVideo
__ MediaToolbox: _kFigPlayerProperty_AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections
__ MediaToolbox: _kFigPlayerProperty_AllowsNeroPlayback
__ MediaToolbox: _kFigPlayerProperty_AppliesMediaSelectionCriteriaAutomatically
__ MediaToolbox: _kFigPlayerProperty_ApplyVideoTrackMatrix
__ MediaToolbox: _kFigPlayerProperty_AssumeItemsWaitingToPlayWhilePlayerPaused
__ MediaToolbox: _kFigPlayerProperty_AudioCategory
__ MediaToolbox: _kFigPlayerProperty_AudioDeviceUID
__ MediaToolbox: _kFigPlayerProperty_AudioMode
__ MediaToolbox: _kFigPlayerProperty_AudioModeIsMoviePlayback
__ MediaToolbox: _kFigPlayerProperty_AudioModeIsSpokenAudio
__ MediaToolbox: _kFigPlayerProperty_AudioSessionID
__ MediaToolbox: _kFigPlayerProperty_AutoSwitchStreamQuality
__ MediaToolbox: _kFigPlayerProperty_AutomaticallyWaitsToMinimizeStalling
__ MediaToolbox: _kFigPlayerProperty_BandwidthCap
__ MediaToolbox: _kFigPlayerProperty_CaptionPipelineStrategy
__ MediaToolbox: _kFigPlayerProperty_CaptionRenderingStrategy
__ MediaToolbox: _kFigPlayerProperty_ClientName
__ MediaToolbox: _kFigPlayerProperty_ClientPriority
__ MediaToolbox: _kFigPlayerProperty_ClosedCaptionLayerArray
__ MediaToolbox: _kFigPlayerProperty_ClosedCaptionLayerBoundsUpdate
__ MediaToolbox: _kFigPlayerProperty_ClosedCaptionLayerSetOptions
__ MediaToolbox: _kFigPlayerProperty_ClosedCaptionLayerSetSeparated
__ MediaToolbox: _kFigPlayerProperty_CurrentlyDisplayedCVPixelBuffer
__ MediaToolbox: _kFigPlayerProperty_DecodeMultipleAudioTracks
__ MediaToolbox: _kFigPlayerProperty_DefaultMediaSelectionCriteria
__ MediaToolbox: _kFigPlayerProperty_DefaultMutingPolicy
__ MediaToolbox: _kFigPlayerProperty_DestinationPixelBufferAttributes
__ MediaToolbox: _kFigPlayerProperty_DisableAutoPauseOnRouteRemovalIfNoAudio
__ MediaToolbox: _kFigPlayerProperty_DisallowVideoLayerDisplayCompositing
__ MediaToolbox: _kFigPlayerProperty_DisplayClosedCaptions
__ MediaToolbox: _kFigPlayerProperty_DisplayList
__ MediaToolbox: _kFigPlayerProperty_DisplayNonForcedSubtitles
__ MediaToolbox: _kFigPlayerProperty_DisplayTimedMetadata
__ MediaToolbox: _kFigPlayerProperty_DisplayingClosedCaptions
__ MediaToolbox: _kFigPlayerProperty_DynamicallyChoosesInitialVariant
__ MediaToolbox: _kFigPlayerProperty_EQPreset
__ MediaToolbox: _kFigPlayerProperty_EnableHardwareAcceleratedVideoDecoder
__ MediaToolbox: _kFigPlayerProperty_EnsuresActiveAudioSessionWhenStartingPlayback
__ MediaToolbox: _kFigPlayerProperty_ExpectedAssetTypeHint
__ MediaToolbox: _kFigPlayerProperty_ExternalProtectionStatus
__ MediaToolbox: _kFigPlayerProperty_GatherPerformanceHistoryArray
__ MediaToolbox: _kFigPlayerProperty_InterstitialPrimaryAirPlayID
__ MediaToolbox: _kFigPlayerProperty_IsAirPlayVideoActive
__ MediaToolbox: _kFigPlayerProperty_IsLongFormAudio
__ MediaToolbox: _kFigPlayerProperty_IsNeroPlaybackActive
__ MediaToolbox: _kFigPlayerProperty_LegibleFallbackMediaSelectionCriteria
__ MediaToolbox: _kFigPlayerProperty_LimitsBandwidthForCellularAccess
__ MediaToolbox: _kFigPlayerProperty_MasterClock
__ MediaToolbox: _kFigPlayerProperty_MaxRateForAudioPlayback
__ MediaToolbox: _kFigPlayerProperty_MaximumTrailingBufferDuration
__ MediaToolbox: _kFigPlayerProperty_MediaSelectionCriteria
__ MediaToolbox: _kFigPlayerProperty_MinRateForAudioPlayback
__ MediaToolbox: _kFigPlayerProperty_MultichannelAudioStrategy
__ MediaToolbox: _kFigPlayerProperty_Muted
__ MediaToolbox: _kFigPlayerProperty_NeroVideoGravity
__ MediaToolbox: _kFigPlayerProperty_OptionsForPreWiringPixelBuffers
__ MediaToolbox: _kFigPlayerProperty_PIPMutingPolicy
__ MediaToolbox: _kFigPlayerProperty_PerformanceDictionary
__ MediaToolbox: _kFigPlayerProperty_PerformanceHistoryArray
__ MediaToolbox: _kFigPlayerProperty_PiPIsPossible
__ MediaToolbox: _kFigPlayerProperty_PickerContextUUID
__ MediaToolbox: _kFigPlayerProperty_PlaybackCoordinator
__ MediaToolbox: _kFigPlayerProperty_PlaybackState
__ MediaToolbox: _kFigPlayerProperty_PlayerRole
__ MediaToolbox: _kFigPlayerProperty_PreferredLanguageList
__ MediaToolbox: _kFigPlayerProperty_PreferredMaximumBufferDuration
__ MediaToolbox: _kFigPlayerProperty_PreferredVideoDecoderGPURegistryID
__ MediaToolbox: _kFigPlayerProperty_PrepareItemOnDispatchQueue
__ MediaToolbox: _kFigPlayerProperty_PreventDisplaySleepDuringVideoPlayback
__ MediaToolbox: _kFigPlayerProperty_PrimaryVideoOutputSize
__ MediaToolbox: _kFigPlayerProperty_ProhibitAMR
__ MediaToolbox: _kFigPlayerProperty_ReleaseResourcesWhenPaused
__ MediaToolbox: _kFigPlayerProperty_ResourceConservationLevelWhenPaused
__ MediaToolbox: _kFigPlayerProperty_STSLabel
__ MediaToolbox: _kFigPlayerProperty_SetVideoLayerBoundsAutomatically
__ MediaToolbox: _kFigPlayerProperty_ShouldWaitForVideoTarget
__ MediaToolbox: _kFigPlayerProperty_Status
__ MediaToolbox: _kFigPlayerProperty_StoppingFadeOutDuration
__ MediaToolbox: _kFigPlayerProperty_SuppressAudioRendering
__ MediaToolbox: _kFigPlayerProperty_SynchronizedNULL
__ MediaToolbox: _kFigPlayerProperty_UseAirPlayVideoAudioOnlyMode
__ MediaToolbox: _kFigPlayerProperty_UseApplicationAudioSession
__ MediaToolbox: _kFigPlayerProperty_UsePerPlayerRemoteNotificationQueue
__ MediaToolbox: _kFigPlayerProperty_UserVolume
__ MediaToolbox: _kFigPlayerProperty_UsesAirPlayVideoWhileAirPlayScreenIsActive
__ MediaToolbox: _kFigPlayerProperty_UsesNeroWhileNeroPlayIsActive
__ MediaToolbox: _kFigPlayerProperty_Vibrator
__ MediaToolbox: _kFigPlayerProperty_VideoLayerArray
__ MediaToolbox: _kFigPlayerProperty_VideoLayerDestinationIsTVOut
__ MediaToolbox: _kFigPlayerProperty_VideoTargetArray
__ MediaToolbox: _kFigPlayerProperty_Volume
__ MediaToolbox: _kFigPlayerProperty_WantsVolumeChangesWhenPausedOrInactive
__ MediaToolbox: _kFigPlayerRole_PIP
__ MediaToolbox: _kFigPlayerRole_Scanning
__ MediaToolbox: _kFigPlayerServerStatePurgedNotificationPayloadKey_PurgeIdentifier
__ MediaToolbox: _kFigPlayerSetRateOption_FadeDuration
__ MediaToolbox: _kFigPlayerSetRateOption_PauseAffectsCoordinatedPlayback
__ MediaToolbox: _kFigPlayerSetRateOption_PlayImmediately
__ MediaToolbox: _kFigPlayerSetRateOption_RateChangeIdentifier
__ MediaToolbox: _kFigPlayerSetRateOption_RateChangeReason
__ MediaToolbox: _kFigPlayerTimedMetadataNotificationKey_ValueArray
__ MediaToolbox: _kFigQTTrackLoadSettingsKey_DefaultHints
__ MediaToolbox: _kFigQTTrackLoadSettingsKey_PreloadFlags
__ MediaToolbox: _kFigRemakerMultiPass
__ MediaToolbox: _kFigRemakerTemporaryDirectoryURL
__ MediaToolbox: _kFigRemakerTimePitchAlgorithm_LowQualityZeroLatency
__ MediaToolbox: _kFigRemakerTimePitchAlgorithm_Spectral
__ MediaToolbox: _kFigRemakerTimePitchAlgorithm_TimeDomain
__ MediaToolbox: _kFigRemakerTimePitchAlgorithm_Varispeed
__ MediaToolbox: _kFigRemakerVideoCompositor_Basic
__ MediaToolbox: _kFigRemakerVideoCompositor_DeviceSpecific
__ MediaToolbox: _kFigRemakerVideoCompositor_OpenGL
__ MediaToolbox: _kFigRemakerVideoFrameRateConversionAlgorithm_Fast
__ MediaToolbox: _kFigRemakerVideoFrameRateConversionAlgorithm_Precise
__ MediaToolbox: _kFigRemakerVideoProcessingOption_EmitSequencesAtSyncFramesOnly
__ MediaToolbox: _kFigRemakerVideoProcessingOption_MinimumIntervalForSyncFrames
__ MediaToolbox: _kFigRemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm
__ MediaToolbox: _kFigSampleBufferAudioRendererNotificationParameter_FlushMediaTime
__ MediaToolbox: _kFigSampleBufferAudioRendererNotification_NowBelowLowWaterLevel
__ MediaToolbox: _kFigSampleBufferAudioRendererNotification_RebuildCouldBenefitFidelity
__ MediaToolbox: _kFigSampleBufferAudioRendererNotification_WasFlushedAutomatically
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_AudioOutputDeviceUniqueID
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_AudioProcessingTap
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_AudioSessionID
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_AudioTimePitchAlgorithm
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_IsBelowPrerollLevel
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_MultichannelAudioSpatializationAllowed
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_Muted
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_RoutingContextUUID
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_STSLabel
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_StereoAudioSpatializationAllowed
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_Volume
__ MediaToolbox: _kFigSampleBufferAudioRendererProperty_WillTrimShortDurationSamples
__ MediaToolbox: _kFigSampleBufferAudioRendererTimePitchAlgorithm_LowQualityZeroLatency
__ MediaToolbox: _kFigSampleBufferRenderSynchronizerProperty_ShouldAttemptImmediatePlaybackStart
__ MediaToolbox: _kFigSampleCursorProperty_GradualDecoderRefresh
__ MediaToolbox: _kFigSampleCursorProperty_SampleDependencyAttributes
__ MediaToolbox: _kFigSampleCursorProperty_SeamIdentifier
__ MediaToolbox: _kFigSampleGeneratorBatchNotification_BatchCompleted
__ MediaToolbox: _kFigStdAssetMediaCharacteristic_Audible
__ MediaToolbox: _kFigStdAssetMediaCharacteristic_Legible
__ MediaToolbox: _kFigStdAssetMediaCharacteristic_TaggedIsAuxiliaryContent
__ MediaToolbox: _kFigStdAssetMediaCharacteristic_Visual
__ MediaToolbox: _kFigStdAssetMediaSelectionGroupKey_AllowEmptySelection
__ MediaToolbox: _kFigStdAssetMediaSelectionGroupKey_ID
__ MediaToolbox: _kFigStdAssetMediaSelectionGroupKey_MediaCharacteristics
__ MediaToolbox: _kFigStdAssetMediaSelectionGroupKey_MediaType
__ MediaToolbox: _kFigStdAssetMediaSelectionGroupKey_OptionsArray
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_AssociatedExtendedLanguageTag
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_AssociatedPersistentIDs
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_AssociatedUnicodeLanguageIdentifier
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_ClientIdentifier
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_DisplaysNonForcedSubtitles
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_ExtendedLanguageTag
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_FallbackIDs
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_IsAuxiliaryContent
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_IsDefault
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_LanguageCode
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_MediaSubTypes
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_MediaType
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_Name
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_PersistentID
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_TaggedMediaCharacteristics
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_URL
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_UnicodeLanguageCode
__ MediaToolbox: _kFigStdAssetMediaSelectionOptionsKey_UnicodeLanguageIdentifier
__ MediaToolbox: _kFigStdAssetProperty_AssetAnalysisMessages
__ MediaToolbox: _kFigStdAssetProperty_Chapters
__ MediaToolbox: _kFigStdAssetProperty_CreationDate
__ MediaToolbox: _kFigStdAssetProperty_Duration
__ MediaToolbox: _kFigStdAssetProperty_IsAssetAnalysisActive
__ MediaToolbox: _kFigStdAssetProperty_Lyrics
__ MediaToolbox: _kFigStdAssetProperty_MediaSelectionArray
__ MediaToolbox: _kFigStdAssetProperty_MinimumTimeOffsetFromLive
__ MediaToolbox: _kFigStdAssetProperty_PreferredRate
__ MediaToolbox: _kFigStdAssetProperty_PreferredTransform
__ MediaToolbox: _kFigStdAssetProperty_PreferredVolume
__ MediaToolbox: _kFigStdAssetProperty_iTunesSoundCheckVolumeNormalization
__ MediaToolbox: _kFigStdTrackProperty_AlternateGroupID
__ MediaToolbox: _kFigStdTrackProperty_AvailableMetadataFormats
__ MediaToolbox: _kFigStdTrackProperty_CommonMetadata
__ MediaToolbox: _kFigStdTrackProperty_DefaultAlternateGroupID
__ MediaToolbox: _kFigStdTrackProperty_Dimensions
__ MediaToolbox: _kFigStdTrackProperty_EstimatedDataRate
__ MediaToolbox: _kFigStdTrackProperty_ExtendedLanguageTag
__ MediaToolbox: _kFigStdTrackProperty_FormatDescriptionArray
__ MediaToolbox: _kFigStdTrackProperty_IsEnabled
__ MediaToolbox: _kFigStdTrackProperty_IsExcludedFromAutoselection
__ MediaToolbox: _kFigStdTrackProperty_IsSelfContained
__ MediaToolbox: _kFigStdTrackProperty_LanguageCode
__ MediaToolbox: _kFigStdTrackProperty_Layer
__ MediaToolbox: _kFigStdTrackProperty_LoudnessInfo
__ MediaToolbox: _kFigStdTrackProperty_MediaCharacteristicArray
__ MediaToolbox: _kFigStdTrackProperty_MediaDecodeTimeRange
__ MediaToolbox: _kFigStdTrackProperty_MediaPresentationTimeRange
__ MediaToolbox: _kFigStdTrackProperty_MinSampleDuration
__ MediaToolbox: _kFigStdTrackProperty_NaturalSize
__ MediaToolbox: _kFigStdTrackProperty_NaturalTimeScale
__ MediaToolbox: _kFigStdTrackProperty_NominalFrameRate
__ MediaToolbox: _kFigStdTrackProperty_PeakDataRate
__ MediaToolbox: _kFigStdTrackProperty_PreferredTransform
__ MediaToolbox: _kFigStdTrackProperty_ProvisionalAlternateGroupID
__ MediaToolbox: _kFigStdTrackProperty_TimeRange
__ MediaToolbox: _kFigStdTrackProperty_TotalSampleDataLength
__ MediaToolbox: _kFigStdTrackProperty_Volume
__ MediaToolbox: _kFigTrackProperty_AlternateGroupID
__ MediaToolbox: _kFigTrackProperty_CleanApertureDimensions
__ MediaToolbox: _kFigTrackProperty_DefaultAlternateGroupID
__ MediaToolbox: _kFigTrackProperty_Dimensions
__ MediaToolbox: _kFigTrackProperty_EditCursorService
__ MediaToolbox: _kFigTrackProperty_Enabled
__ MediaToolbox: _kFigTrackProperty_EstimatedDataRate
__ MediaToolbox: _kFigTrackProperty_ExcludeFromAutoSelection
__ MediaToolbox: _kFigTrackProperty_ExtendedLanguageTagString
__ MediaToolbox: _kFigTrackProperty_FormatDescriptionArray
__ MediaToolbox: _kFigTrackProperty_FrameReorderingRequired
__ MediaToolbox: _kFigTrackProperty_HasAudioSampleDependencyInformation
__ MediaToolbox: _kFigTrackProperty_LanguageCode
__ MediaToolbox: _kFigTrackProperty_LatentBaseDecodeTimeStampOfFirstTrackFragment
__ MediaToolbox: _kFigTrackProperty_Layer
__ MediaToolbox: _kFigTrackProperty_LoudnessInfo
__ MediaToolbox: _kFigTrackProperty_Matrix
__ MediaToolbox: _kFigTrackProperty_MetadataReaders
__ MediaToolbox: _kFigTrackProperty_NominalFrameRate
__ MediaToolbox: _kFigTrackProperty_PeakDataRate
__ MediaToolbox: _kFigTrackProperty_ProvisionalAlternateGroupID
__ MediaToolbox: _kFigTrackProperty_SelfContained
__ MediaToolbox: _kFigTrackProperty_Timescale
__ MediaToolbox: _kFigTrackProperty_UneditedDuration
__ MediaToolbox: _kFigTrackProperty_UneditedNumDataBytes
__ MediaToolbox: _kFigTrackProperty_Volume
__ MediaToolbox: _kFigVideoCompositionProcessorProperty_CompositionColorPrimaries
__ MediaToolbox: _kFigVideoCompositionProcessorProperty_CompositionTransferFunction
__ MediaToolbox: _kFigVideoCompositionProcessorProperty_CompositionYCbCrMatrix
__ MediaToolbox: _kFigVideoCompositorNotification_PropertyChanged
__ MediaToolbox: _kFigVideoCompositorProperty_BlendingTransferFunction
__ MediaToolbox: _kFigVideoCompositorProperty_CompositorInstanceID
__ MediaToolbox: _kFigVideoCompositorProperty_DestinationPixelBufferDesiredAttributes
__ MediaToolbox: _kFigVideoCompositorProperty_DestinationPixelBufferDesiredColorPrimaries
__ MediaToolbox: _kFigVideoCompositorProperty_DestinationPixelBufferDesiredTransferFunction
__ MediaToolbox: _kFigVideoCompositorProperty_DestinationPixelBufferDesiredYCbCrMatrix
__ MediaToolbox: _kFigVideoCompositorProperty_HighQualityRendering
__ MediaToolbox: _kFigVideoCompositorProperty_RenderDimensions
__ MediaToolbox: _kFigVideoCompositorProperty_RenderEdgeProcessingPixels
__ MediaToolbox: _kFigVideoCompositorProperty_RenderPixelAspectRatio
__ MediaToolbox: _kFigVideoCompositorProperty_RenderScale
__ MediaToolbox: _kFigVideoCompositorProperty_SourceColorConformanceCapabilityLevel
__ MediaToolbox: _kFigVideoCompositorProperty_SourcePixelBufferAttributes
__ MediaToolbox: _kFigVideoPerformanceKey_ImageQueuePerformanceArray
__ MediaToolbox: _kFigVideoPerformanceKey_ImageQueueTarget
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfDecodeErrorsNotified
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfDisplayCompositedFrames
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDecodedByVideoDecoder
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDecodedForCatchup
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDroppedByVideoDecoder
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDroppedFromImageQueue
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesDroppedInFlushHandshake
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesEnqueuedForDisplay
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfFramesRejectedByImageQueue
__ MediaToolbox: _kFigVideoPerformanceKey_NumberOfNonDisplayCompositedFrames
__ MediaToolbox: _kFigVideoPerformanceKey_TotalFrameDelay
__ MediaToolbox: _kFigVideoQueueExternalProtectionStatusKey_Video
__ MediaToolbox: _kFigVideoQueueExternalProtectionStatus_NotProtected
__ MediaToolbox: _kFigVideoQueueMinUpcomingOutputPTS
__ MediaToolbox: _kFigVideoQueueNotificationParameter_CodecType
__ MediaToolbox: _kFigVideoQueueNotificationParameter_OSStatus
__ MediaToolbox: _kFigVideoQueueNotificationParameter_OutputPresentationTimeStamp
__ MediaToolbox: _kFigVideoQueueNotificationParameter_RequestID
__ MediaToolbox: _kFigVideoQueueNotification_CompletedDecodeForPreroll
__ MediaToolbox: _kFigVideoQueueNotification_DecodeError
__ MediaToolbox: _kFigVideoQueueNotification_ExternalProtectionStatusChanged
__ MediaToolbox: _kFigVideoQueueNotification_Failed
__ MediaToolbox: _kFigVideoQueueNotification_FlushComplete
__ MediaToolbox: _kFigVideoQueueNotification_NowBelowLowWaterLevel
__ MediaToolbox: _kFigVideoQueueNotification_ServerConnectionDied
__ MediaToolbox: _kFigVideoQueueProperty_ControlTimebase
__ MediaToolbox: _kFigVideoQueueProperty_CurrentlyDisplayedCVPixelBuffer
__ MediaToolbox: _kFigVideoQueueProperty_DisplayLayer
__ MediaToolbox: _kFigVideoQueueProperty_DisplayLayerVisibility
__ MediaToolbox: _kFigVideoQueueProperty_ExternalProtectionStatus
__ MediaToolbox: _kFigVideoQueueProperty_InhibitCATransactionCommitTime
__ MediaToolbox: _kFigVideoQueueProperty_PerformanceDictionary
__ MediaToolbox: _kFigVideoQueueProperty_PreventDisplaySleepDuringVideoPlayback
__ MediaToolbox: _kFigVideoQueueProperty_PreventsCapture
__ MediaToolbox: _kFigVideoQueueProperty_ToneMapToStandardDynamicRange
__ MediaToolbox: _kFigVideoQueueProperty_UpcomingOutputPTSRangeChanged
__ MediaToolbox: _kFigVideoQueueProperty_VideoTargetArray
__ MediaToolbox: _kFigVideoQueueProperty_VisualContextArray
__ MediaToolbox: _kFigVideoQueueProperty_VisualContextArrayOptions
__ MediaToolbox: _kFigVideoQueueUpcomingOutputPTSRangeMayOverlapQueuedOutputPTSRange
__ MediaToolbox: _kFigVisualContext_AutoPruneInterval
__ QuartzCore: _CATransform3DConcat
__ QuartzCore: _CATransform3DGetAffineTransform
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeTranslation
__ QuartzCore: _OBJC_CLASS_$_CAAnimationGroup
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAPropertyAnimation
__ QuartzCore: _OBJC_CLASS_$_CATextLayer
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_METACLASS_$_CALayer
__ QuartzCore: _OBJC_METACLASS_$_CATextLayer
__ QuartzCore: _kCAAlignmentLeft
__ QuartzCore: _kCAContextDisplayName
__ QuartzCore: _kCAFilterBox
__ QuartzCore: _kCATruncationNone
__ RunningBoardServices: _OBJC_CLASS_$_RBSAssertion
__ RunningBoardServices: _OBJC_CLASS_$_RBSDomainAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessHandle
__ RunningBoardServices: _OBJC_CLASS_$_RBSTarget
__ Security: _SecItemCopyMatching
__ Security: _SecTaskCopyValueForEntitlement
__ Security: _SecTaskCreateFromSelf
__ Security: _kSecAttrAccount
__ Security: _kSecAttrAuthenticationType
__ Security: _kSecAttrAuthenticationTypeHTTPBasic
__ Security: _kSecAttrPort
__ Security: _kSecAttrProtocol
__ Security: _kSecAttrProtocolHTTP
__ Security: _kSecAttrProtocolHTTPS
__ Security: _kSecAttrServer
__ Security: _kSecClass
__ Security: _kSecClassInternetPassword
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitOne
__ Security: _kSecReturnAttributes
__ Security: _kSecReturnData
__ Security: _kSecValueData
__ SpringBoardServices: _SBSGetScreenLockStatus
__ UniformTypeIdentifiers: _OBJC_CLASS_$_UTType
__ UniformTypeIdentifiers: _UTTagClassFilenameExtension
__ UniformTypeIdentifiers: _UTTagClassMIMEType
__ UniformTypeIdentifiers: _UTTypeAudiovisualContent
__ UniformTypeIdentifiers: _UTTypeImage
__ VideoToolbox: _FigCreatePixelBufferAttributesWithIOSurfaceSupport
__ VideoToolbox: _VTBuildPixelBufferPools
__ VideoToolbox: _VTCopyVideoEncoderList
__ VideoToolbox: _VTCreateCGImageFromCVPixelBuffer
__ VideoToolbox: _VTPixelBufferAttributesMediatorAddLayer
__ VideoToolbox: _VTPixelBufferAttributesMediatorCopyProperty
__ VideoToolbox: _VTPixelBufferAttributesMediatorCreate
__ VideoToolbox: _VTPixelBufferAttributesMediatorNotificationBarrier
__ VideoToolbox: _VTPixelBufferAttributesMediatorRemoveLayer
__ VideoToolbox: _VTPixelBufferAttributesMediatorRemoveRequestedPixelBufferAttributesForKey
__ VideoToolbox: _VTPixelBufferAttributesMediatorSetProperty
__ VideoToolbox: _VTPixelBufferAttributesMediatorSetRequestedPixelBufferAttributesForKey
__ VideoToolbox: _VTPixelBufferConformerCopyConformedPixelBuffer
__ VideoToolbox: _VTPixelBufferConformerCreateWithAttributes
__ VideoToolbox: _VTPixelBufferConformerGetAttributes
__ VideoToolbox: _VTPixelBufferConformerSetColorProperties
__ VideoToolbox: _kVTCompressionPropertyKey_CleanAperture
__ VideoToolbox: _kVTCompressionPropertyKey_PixelAspectRatio
__ VideoToolbox: _kVTCompressionPropertyKey_PixelTransferProperties
__ VideoToolbox: _kVTCompressionPropertyKey_Quality
__ VideoToolbox: _kVTCompressionPropertyKey_TargetQualityForAlpha
__ VideoToolbox: _kVTDecompressionPropertyKey_FieldMode
__ VideoToolbox: _kVTDecompressionPropertyKey_PropagatePerFrameHDRDisplayMetadata
__ VideoToolbox: _kVTDecompressionProperty_FieldMode_BothFields
__ VideoToolbox: _kVTDecompressionProperty_FieldMode_BottomFieldOnly
__ VideoToolbox: _kVTDecompressionProperty_FieldMode_DeinterlaceFields
__ VideoToolbox: _kVTDecompressionProperty_FieldMode_SingleField
__ VideoToolbox: _kVTDecompressionProperty_FieldMode_TopFieldOnly
__ VideoToolbox: _kVTPixelBufferAttributesMediatorNotification_MediatedPixelBufferAttributesChanged
__ VideoToolbox: _kVTPixelBufferAttributesMediatorProperty_AlwaysVendsNonNULLAttributes
__ VideoToolbox: _kVTPixelBufferAttributesMediatorProperty_LayersAreSuppressed
__ VideoToolbox: _kVTPixelBufferAttributesMediatorProperty_MediatedPixelBufferAttributes
__ VideoToolbox: _kVTPixelTransferPropertyKey_DestinationColorPrimaries
__ VideoToolbox: _kVTPixelTransferPropertyKey_DestinationTransferFunction
__ VideoToolbox: _kVTPixelTransferPropertyKey_DestinationYCbCrMatrix
__ VideoToolbox: _kVTPixelTransferPropertyKey_ScalingMode
__ VideoToolbox: _kVTProfileLevel_HEVC_Main10_AutoLevel
__ VideoToolbox: _kVTPropertyReadWriteStatusKey
__ VideoToolbox: _kVTPropertyReadWriteStatus_ReadOnly
__ VideoToolbox: _kVTPropertySupportedValueListKey
__ VideoToolbox: _kVTPropertySupportedValueMaximumKey
__ VideoToolbox: _kVTPropertySupportedValueMinimumKey
__ VideoToolbox: _kVTScalingMode_CropSourceToCleanAperture
__ VideoToolbox: _kVTScalingMode_Letterbox
__ VideoToolbox: _kVTScalingMode_Trim
__ VideoToolbox: _kVTVideoEncoderList_CodecType
__ VideoToolbox: _kVTVideoEncoderList_RevealHardwareAcceleratedEncoders
__ VideoToolbox: _kVTVideoEncoderList_RevealHiddenEncoders
__ VideoToolbox: _kVTVideoEncoderSpecification_EnableHardwareAcceleratedVideoEncoder
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strncpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_pack_fill
__ libSystem.B.dylib: __os_log_pack_size
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_barrier_sync
__ libSystem.B.dylib: _dispatch_get_current_queue
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_overcommit
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_target_queue
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_check
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _pthread_main_np
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _sysdir_get_next_search_path_enumeration
__ libSystem.B.dylib: _sysdir_start_search_path_enumeration_private
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _vm_deallocate
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_getClassMethod
__ libobjc.A.dylib: _class_getInstanceMethod
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_allocWithZone
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x28
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_release_x9
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x25
__ libobjc.A.dylib: _objc_retain_x26
__ libobjc.A.dylib: _objc_retain_x28
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x4
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_terminate
__ libobjc.A.dylib: _sel_isEqual
AVFigRemoteRouteDiscovererFactory : NSObject <AVFigRouteDiscovererFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigRemoteRouteDiscovererFactory createRouteDiscovererWithAllocator:options:]


AVPlayerLayerIntermediateLayer : FigBaseCALayer

AVPlayerLayerInternal : NSObject

AVPlayerLayer : CALayer <AVKeyPathDependencyHost, AVWeakObservable>
 @property  AVPlayer *player
 @property  NSString *videoGravity
 @property  BOOL readyForDisplay
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} videoRect
 @property  NSDictionary *pixelBufferAttributes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVPlayerLayer keyPathsForValuesAffectingVideoRect]
  +[AVPlayerLayer makeClosedCaptionLayer]
  +[AVPlayerLayer _swapSublayersBetweenPlayerLayer:andPlayerLayer:]
  +[AVPlayerLayer playerLayerWithPlayer:]

  // instance methods
  -[AVPlayerLayer setSublayers:]
  -[AVPlayerLayer isPIPModeEnabled]
  -[AVPlayerLayer setContentsScale:]
  -[AVPlayerLayer declareKeyPathDependenciesWithRegistry:]
  -[AVPlayerLayer addCallbackToCancelDuringDeallocation:]
  -[AVPlayerLayer videoGravity]
  -[AVPlayerLayer legibleContentInsets]
  -[AVPlayerLayer addAnimation:forKey:]
  -[AVPlayerLayer layerDidBecomeVisible:]
  -[AVPlayerLayer layoutSublayers]
  -[AVPlayerLayer isReadyForDisplay]
  -[AVPlayerLayer insertSublayer:above:]
  -[AVPlayerLayer replaceSublayer:with:]
  -[AVPlayerLayer dealloc]
  -[AVPlayerLayer initWithLayer:]
  -[AVPlayerLayer removeAllAnimations]
  -[AVPlayerLayer setVideoGravity:]
  -[AVPlayerLayer player]
  -[AVPlayerLayer setLegibleContentInsets:]
  -[AVPlayerLayer insertSublayer:below:]
  -[AVPlayerLayer setOverscanSubtitleSupportEnabled:]
  -[AVPlayerLayer isOverscanSubtitleSupportEnabled]
  -[AVPlayerLayer observeValueForKeyPath:ofObject:change:context:]
  -[AVPlayerLayer removeFromSuperlayer]
  -[AVPlayerLayer isForScrubbingOnly]
  -[AVPlayerLayer setBounds:]
  -[AVPlayerLayer pixelBufferAttributes]
  -[AVPlayerLayer addSublayer:]
  -[AVPlayerLayer setPixelBufferAttributes:]
  -[AVPlayerLayer setPlayer:]
  -[AVPlayerLayer _addPositionAnimationToLayer:usingAnimation:forKey:]
  -[AVPlayerLayer insertSublayer:atIndex:]
  -[AVPlayerLayer setForScrubbingOnly:]
  -[AVPlayerLayer setToneMapToStandardDynamicRange:]
  -[AVPlayerLayer _addBoundsAnimationToLayer:usingAnimation:forKey:]
  -[AVPlayerLayer init]
  -[AVPlayerLayer setPIPModeEnabled:]
  -[AVPlayerLayer removeAnimationForKey:]
  -[AVPlayerLayer _videoLayer]
  -[AVPlayerLayer _maskLayer]
  -[AVPlayerLayer _activeMode]
  -[AVPlayerLayer _preventsChangesToSublayerHierarchy]
  -[AVPlayerLayer isLegibleDisplayEnabled]
  -[AVPlayerLayer placeholderContentLayerDuringPIPMode]
  -[AVPlayerLayer _addSublayerTransformAnimationToLayer:fromTransform:usingAnimation:gravity:presentationSize:forKey:]
  -[AVPlayerLayer _addAnimationsForPIPPlaceholderLayer:forKey:]
  -[AVPlayerLayer _addAnimationsForMaskLayer:forKey:]
  -[AVPlayerLayer _addAnimationsForClosedCaptionLayer:gravity:forKey:]
  -[AVPlayerLayer _addAnimationsForVideoLayer:size:gravity:forKey:]
  -[AVPlayerLayer _forBoundsAnimations:applyBlock:]
  -[AVPlayerLayer _percentCoverageRelativeToRootLayer]
  -[AVPlayerLayer _displaySize]
  -[AVPlayerLayer _notifyPlayerOfDisplaySize]
  -[AVPlayerLayer _playerCurrentItemPresentationSize]
  -[AVPlayerLayer _applyCurrentItemPresentationSizeChangeAndForceUpdate:]
  -[AVPlayerLayer _startObservingPlayer:]
  -[AVPlayerLayer _stopObservingPlayer:]
  -[AVPlayerLayer _handleNonForcedSubtitleDisplayDidChange:player:]
  -[AVPlayerLayer _handlePlayerCurrentItemDidChangeForPlayer:]
  -[AVPlayerLayer _handleIsDisplayingClosedCaptionsDidChange:player:]
  -[AVPlayerLayer playerPublisher]
  -[AVPlayerLayer _setPlayer:forPIP:]
  -[AVPlayerLayer hasEnqueuedVideoFrameChanged:]
  -[AVPlayerLayer _updateReadyForDisplayForPlayerCurrentItem]
  -[AVPlayerLayer _getMaskLayer:videoLayer:subtitleLayer:closedCaptionLayer:interstitialLayer:]
  -[AVPlayerLayer _closedCaptionLayer]
  -[AVPlayerLayer _subtitleLayer]
  -[AVPlayerLayer _interstitialLayer]
  -[AVPlayerLayer _showInterstitialInstead]
  -[AVPlayerLayer _setShowInterstitialInstead:]
  -[AVPlayerLayer videoPerformanceMetrics]
  -[AVPlayerLayer _setIsConnectedToSecondScreen:]
  -[AVPlayerLayer _isConnectedToSecondScreen]
  -[AVPlayerLayer isLanczosFilterDownscalingEnabled]
  -[AVPlayerLayer setLanczosFilterDownscalingEnabled:]
  -[AVPlayerLayer lanczosFilterDownscaleFactor]
  -[AVPlayerLayer setLanczosFilterDownscaleFactor:]
  -[AVPlayerLayer videoRect]
  -[AVPlayerLayer _videoRectForBounds:]
  -[AVPlayerLayer setLegibleDisplayEnabled:]
  -[AVPlayerLayer copyDisplayedPixelBuffer]
  -[AVPlayerLayer _configurePlayerWhenEnteringPIP]
  -[AVPlayerLayer _configurePlayerWhenLeavingPIP]
  -[AVPlayerLayer _stashClientLayers]
  -[AVPlayerLayer _unstashClientLayers]
  -[AVPlayerLayer _associateWithLayer:forMode:]
  -[AVPlayerLayer _associatedRemoteModeLayer]
  -[AVPlayerLayer _disassociateWithLayerForMode:]
  -[AVPlayerLayer startRedirectingVideoToLayer:forMode:]
  -[AVPlayerLayer stopRedirectingVideoToLayer:]
  -[AVPlayerLayer _enterSecondScreenModeRedirectingVideoToLayer:]
  -[AVPlayerLayer _leaveSecondScreenModeForLayer:]
  -[AVPlayerLayer enterPIPModeRedirectingVideoToLayer:]
  -[AVPlayerLayer _enterPIPModeRedirectingVideoToLayer:]
  -[AVPlayerLayer leavePIPMode]
  -[AVPlayerLayer _leavePIPModeForLayer:]
  -[AVPlayerLayer _forceLayout]
  -[AVPlayerLayer _sublayersForPIP]
  -[AVPlayerLayer _mergeClientLayersIntoMaskLayer:]
  -[AVPlayerLayer _restoreClientLayers:intoMaskLayer:]
  -[AVPlayerLayer _setSublayersPreventChangesToSublayerHierarchy:]
  -[AVPlayerLayer _setSublayersForPIP:]
  -[AVPlayerLayer _willManageSublayersAsSwappedLayers]
  -[AVPlayerLayer _setWillManageSublayersAsSwappedLayers:]
  -[AVPlayerLayer _setPreventsChangesToSublayerHierarchy:]
  -[AVPlayerLayer setPlaceholderContentLayerDuringPIPMode:]
  -[AVPlayerLayer _currentWindowSceneIsForegroundDefault]
  -[AVPlayerLayer _currentWindowSceneIsForeground]
  -[AVPlayerLayer _windowSceneDidEnterBackground]
  -[AVPlayerLayer _windowSceneDidEnterBackground:]
  -[AVPlayerLayer _windowSceneWillEnterForeground]
  -[AVPlayerLayer _windowSceneWillEnterForeground:]
  -[AVPlayerLayer _forceWindowSceneEvent:]
  -[AVPlayerLayer _updateIsPartOfForegroundScene]
  -[AVPlayerLayer _notifyPlayerOfLayerForegroundStateChange]
  -[AVPlayerLayer _setIsPartOfForegroundScene:]
  -[AVPlayerLayer _isPartOfForegroundScene]


AVPlayerLooperInternal : NSObject

AVPlayerLooper : NSObject
 @property  long long status
 @property  NSError *error
 @property  long long loopCount
 @property  NSArray *loopingPlayerItems

  // class methods
  +[AVPlayerLooper initialize]
  +[AVPlayerLooper playerLooperWithPlayer:templateItem:]
  +[AVPlayerLooper playerLooperWithPlayer:templateItem:timeRange:]

  // instance methods
  -[AVPlayerLooper error]
  -[AVPlayerLooper status]
  -[AVPlayerLooper dealloc]
  -[AVPlayerLooper observeValueForKeyPath:ofObject:change:context:]
  -[AVPlayerLooper init]
  -[AVPlayerLooper disableLooping]
  -[AVPlayerLooper loopCount]
  -[AVPlayerLooper initWithPlayer:templateItem:timeRange:]
  -[AVPlayerLooper _changeStatusToFailedWithError:]
  -[AVPlayerLooper loopingPlayerItems]
  -[AVPlayerLooper _configureLoopingItem:]
  -[AVPlayerLooper _calculateNumberOfCopiesNeeded]
  -[AVPlayerLooper _setupLoopingReturningError:]
  -[AVPlayerLooper _turnOffLooping]
  -[AVPlayerLooper _isWaitingForLastCopyToFinishSet]
  -[AVPlayerLooper _cleanupAfterPlayingLastLoopingCopy]


CMTimeAsValue : NSValue
  // class methods
  +[CMTimeAsValue supportsSecureCoding]
  +[CMTimeAsValue valueWithCMTime:]

  // instance methods
  -[CMTimeAsValue objCType]
  -[CMTimeAsValue intValue]
  -[CMTimeAsValue shortValue]
  -[CMTimeAsValue isEqualToValue:]
  -[CMTimeAsValue charValue]
  -[CMTimeAsValue unsignedShortValue]
  -[CMTimeAsValue integerValue]
  -[CMTimeAsValue longLongValue]
  -[CMTimeAsValue floatValue]
  -[CMTimeAsValue unsignedCharValue]
  -[CMTimeAsValue longValue]
  -[CMTimeAsValue unsignedLongValue]
  -[CMTimeAsValue unsignedIntValue]
  -[CMTimeAsValue unsignedLongLongValue]
  -[CMTimeAsValue unsignedIntegerValue]
  -[CMTimeAsValue getValue:]
  -[CMTimeAsValue encodeWithCoder:]
  -[CMTimeAsValue doubleValue]
  -[CMTimeAsValue classForCoder]
  -[CMTimeAsValue copyWithZone:]
  -[CMTimeAsValue CMTimeValue]
  -[CMTimeAsValue boolValue]
  -[CMTimeAsValue initWithCoder:]


CMTimeRangeAsValue : NSValue
  // class methods
  +[CMTimeRangeAsValue supportsSecureCoding]
  +[CMTimeRangeAsValue valueWithCMTimeRange:]

  // instance methods
  -[CMTimeRangeAsValue objCType]
  -[CMTimeRangeAsValue isEqualToValue:]
  -[CMTimeRangeAsValue getValue:]
  -[CMTimeRangeAsValue encodeWithCoder:]
  -[CMTimeRangeAsValue classForCoder]
  -[CMTimeRangeAsValue copyWithZone:]
  -[CMTimeRangeAsValue initWithCoder:]
  -[CMTimeRangeAsValue CMTimeRangeValue]


CMTimeMappingAsValue : NSValue
  // class methods
  +[CMTimeMappingAsValue supportsSecureCoding]
  +[CMTimeMappingAsValue valueWithCMTimeMapping:]

  // instance methods
  -[CMTimeMappingAsValue objCType]
  -[CMTimeMappingAsValue isEqualToValue:]
  -[CMTimeMappingAsValue getValue:]
  -[CMTimeMappingAsValue encodeWithCoder:]
  -[CMTimeMappingAsValue classForCoder]
  -[CMTimeMappingAsValue copyWithZone:]
  -[CMTimeMappingAsValue initWithCoder:]
  -[CMTimeMappingAsValue CMTimeMappingValue]


AVAssetVariant : NSObject <NSSecureCoding>
 @property  double peakBitRate
 @property  double averageBitRate
 @property  AVAssetVariantVideoAttributes *videoAttributes
 @property  AVAssetVariantAudioAttributes *audioAttributes

  // class methods
  +[AVAssetVariant supportsSecureCoding]

  // instance methods
  -[AVAssetVariant encodeWithCoder:]
  -[AVAssetVariant dealloc]
  -[AVAssetVariant initWithCoder:]
  -[AVAssetVariant initWithFigAlternate:]
  -[AVAssetVariant videoAttributes]
  -[AVAssetVariant audioAttributes]
  -[AVAssetVariant peakBitRate]
  -[AVAssetVariant averageBitRate]
  -[AVAssetVariant _figAlternate]


AVAssetVariantVideoAttributes : NSObject
 @property  NSString *videoRange
 @property  NSArray *codecTypes
 @property  {CGSize=dd} presentationSize
 @property  double nominalFrameRate

  // instance methods
  -[AVAssetVariantVideoAttributes dealloc]
  -[AVAssetVariantVideoAttributes nominalFrameRate]
  -[AVAssetVariantVideoAttributes presentationSize]
  -[AVAssetVariantVideoAttributes videoRange]
  -[AVAssetVariantVideoAttributes codecTypes]
  -[AVAssetVariantVideoAttributes initWithFigAlternateObjC:]


AVAssetVariantAudioAttributes : NSObject
 @property  NSArray *formatIDs

  // instance methods
  -[AVAssetVariantAudioAttributes dealloc]
  -[AVAssetVariantAudioAttributes formatIDs]
  -[AVAssetVariantAudioAttributes initWithFigAlternateObjC:]
  -[AVAssetVariantAudioAttributes renditionSpecificAttributesForMediaOption:]


AVAssetVariantAudioRenditionSpecificAttributes : NSObject
 @property  long long channelCount

  // instance methods
  -[AVAssetVariantAudioRenditionSpecificAttributes channelCount]
  -[AVAssetVariantAudioRenditionSpecificAttributes dealloc]
  -[AVAssetVariantAudioRenditionSpecificAttributes sampleRate]
  -[AVAssetVariantAudioRenditionSpecificAttributes isBinaural]
  -[AVAssetVariantAudioRenditionSpecificAttributes isDownmix]
  -[AVAssetVariantAudioRenditionSpecificAttributes initWithFigAlternateObjC:mediaSelectionOption:]


AVAssetVariantQualifier : NSObject <NSSecureCoding, NSCopying>
 @property  long long environmentalConditions

  // class methods
  +[AVAssetVariantQualifier supportsSecureCoding]
  +[AVAssetVariantQualifier assetVariantQualifierWithPredicate:]
  +[AVAssetVariantQualifier assetVariantQualifierWithVariant:]
  +[AVAssetVariantQualifier predicateForChannelCount:mediaSelectionOption:operatorType:]
  +[AVAssetVariantQualifier predicateForPresentationWidth:operatorType:]
  +[AVAssetVariantQualifier predicateForPresentationHeight:operatorType:]

  // instance methods
  -[AVAssetVariantQualifier encodeWithCoder:]
  -[AVAssetVariantQualifier dealloc]
  -[AVAssetVariantQualifier copyWithZone:]
  -[AVAssetVariantQualifier initWithCoder:]
  -[AVAssetVariantQualifier _variant]
  -[AVAssetVariantQualifier _predicate]
  -[AVAssetVariantQualifier _validatePredicate:error:]
  -[AVAssetVariantQualifier initWithVariant:predicate:]
  -[AVAssetVariantQualifier environmentalConditions]
  -[AVAssetVariantQualifier setEnvironmentalConditions:]


AVAssetVariantChannelCountPredicate : NSPredicate
  // class methods
  +[AVAssetVariantChannelCountPredicate supportsSecureCoding]

  // instance methods
  -[AVAssetVariantChannelCountPredicate encodeWithCoder:]
  -[AVAssetVariantChannelCountPredicate evaluateWithObject:substitutionVariables:]
  -[AVAssetVariantChannelCountPredicate dealloc]
  -[AVAssetVariantChannelCountPredicate acceptVisitor:flags:]
  -[AVAssetVariantChannelCountPredicate predicateFormat]
  -[AVAssetVariantChannelCountPredicate copyWithZone:]
  -[AVAssetVariantChannelCountPredicate initWithCoder:]
  -[AVAssetVariantChannelCountPredicate initWithChannelCount:mediaSelectionOption:operatorType:]


AVAssetVariantPresentationWidthPredicate : NSPredicate
  // class methods
  +[AVAssetVariantPresentationWidthPredicate supportsSecureCoding]

  // instance methods
  -[AVAssetVariantPresentationWidthPredicate encodeWithCoder:]
  -[AVAssetVariantPresentationWidthPredicate evaluateWithObject:substitutionVariables:]
  -[AVAssetVariantPresentationWidthPredicate dealloc]
  -[AVAssetVariantPresentationWidthPredicate acceptVisitor:flags:]
  -[AVAssetVariantPresentationWidthPredicate predicateFormat]
  -[AVAssetVariantPresentationWidthPredicate copyWithZone:]
  -[AVAssetVariantPresentationWidthPredicate initWithCoder:]
  -[AVAssetVariantPresentationWidthPredicate initWithPresentationWidth:operatorType:]


AVAssetVariantPresentationHeightPredicate : NSPredicate
  // class methods
  +[AVAssetVariantPresentationHeightPredicate supportsSecureCoding]

  // instance methods
  -[AVAssetVariantPresentationHeightPredicate encodeWithCoder:]
  -[AVAssetVariantPresentationHeightPredicate evaluateWithObject:substitutionVariables:]
  -[AVAssetVariantPresentationHeightPredicate dealloc]
  -[AVAssetVariantPresentationHeightPredicate acceptVisitor:flags:]
  -[AVAssetVariantPresentationHeightPredicate predicateFormat]
  -[AVAssetVariantPresentationHeightPredicate copyWithZone:]
  -[AVAssetVariantPresentationHeightPredicate initWithCoder:]
  -[AVAssetVariantPresentationHeightPredicate initWithPresentationHeight:operatorType:]


AVMetadataItemInternal : NSObject

AVMetadataItem : NSObject <AVAsynchronousKeyValueLoading, NSCopying, NSMutableCopying>
 @property  NSString *stringValue
 @property  NSNumber *numberValue
 @property  NSDate *dateValue
 @property  NSData *dataValue
 @property  NSString *identifier
 @property  NSString *extendedLanguageTag
 @property  NSLocale *locale
 @property  {?=qiIq} time
 @property  {?=qiIq} duration
 @property  NSString *dataType
 @property  <NSObject><NSCopying> *value
 @property  NSDictionary *extraAttributes

  // class methods
  +[AVMetadataItem initialize]
  +[AVMetadataItem identifierForKey:keySpace:]
  +[AVMetadataItem metadataItemsFromArray:withLocale:]
  +[AVMetadataItem metadataItemsFromArray:filteredAndSortedAccordingToPreferredLanguages:]
  +[AVMetadataItem metadataItemsFromArray:filteredByIdentifier:]
  +[AVMetadataItem metadataItemsFromArray:withKey:keySpace:]
  +[AVMetadataItem metadataItemsFromArray:withStringValue:]
  +[AVMetadataItem metadataItemsFromArray:filteredByMetadataItemFilter:]
  +[AVMetadataItem keyForIdentifier:]
  +[AVMetadataItem keySpaceForIdentifier:]
  +[AVMetadataItem _metadataItemWithFigMetadataDictionary:]
  +[AVMetadataItem _metadataItemWithFigMetadataDictionary:containerURL:securityOptions:]
  +[AVMetadataItem _clientExpectsISOUserDataKeysInQuickTimeUserDataKeySpace]
  +[AVMetadataItem _isoUserDataKeysRequiringKeySpaceConversion]
  +[AVMetadataItem _replaceQuickTimeUserDataKeySpaceWithISOUserDataKeySpaceIfRequired:]
  +[AVMetadataItem _figMetadataPropertyFromMetadataItems:]
  +[AVMetadataItem dataTypeForValue:]
  +[AVMetadataItem metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:]
  +[AVMetadataItem metadataItemsFromArray:filteredByIdentifiers:]

  // instance methods
  -[AVMetadataItem loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVMetadataItem cancelLoading]
  -[AVMetadataItem dataValue]
  -[AVMetadataItem identifier]
  -[AVMetadataItem time]
  -[AVMetadataItem extraAttributes]
  -[AVMetadataItem statusOfValueForKey:error:]
  -[AVMetadataItem dateValue]
  -[AVMetadataItem stringValue]
  -[AVMetadataItem dealloc]
  -[AVMetadataItem extendedLanguageTag]
  -[AVMetadataItem numberValue]
  -[AVMetadataItem languageCode]
  -[AVMetadataItem duration]
  -[AVMetadataItem locale]
  -[AVMetadataItem keySpace]
  -[AVMetadataItem dataType]
  -[AVMetadataItem copyWithZone:]
  -[AVMetadataItem key]
  -[AVMetadataItem value]
  -[AVMetadataItem mutableCopyWithZone:]
  -[AVMetadataItem startDate]
  -[AVMetadataItem isEqual:]
  -[AVMetadataItem init]
  -[AVMetadataItem _updateIdentifier]
  -[AVMetadataItem commonKey]
  -[AVMetadataItem discoveryTimestamp]
  -[AVMetadataItem _makeValueReady]
  -[AVMetadataItem _valueFromCFType:]
  -[AVMetadataItem _makePropertiesReady]
  -[AVMetadataItem _updateCommonKey]
  -[AVMetadataItem _updateLanguageInformationFromLocale:]
  -[AVMetadataItem _updateLanguageInformationFromExtendedLanguageTag:]
  -[AVMetadataItem _extractPropertiesFromDictionary:]
  -[AVMetadataItem _keyAsString]
  -[AVMetadataItem imageValue]
  -[AVMetadataItem _initWithReader:itemIndex:]
  -[AVMetadataItem _initWithFigMetadataDictionary:]
  -[AVMetadataItem intrinsicAttributesOfExtraAttributes:]
  -[AVMetadataItem _areExtraAttributesOf:comparableToExtraAttributesOf:]
  -[AVMetadataItem _figMetadataDictionaryWithValue:diviningValueDataType:]
  -[AVMetadataItem _figMetadataDictionary]
  -[AVMetadataItem _figMetadataFormat]
  -[AVMetadataItem _figMetadataSpecificationReturningError:]
  -[AVMetadataItem _copyValueAsCFTypeWithFormatDescription:error:]
  -[AVMetadataItem _createJSONEncodedDataFromValue:error:]
  -[AVMetadataItem unicodeLanguageIdentifier]
  -[AVMetadataItem unicodeLanguageCode]
  -[AVMetadataItem _serializationDataType]
  -[AVMetadataItem _conformingDataTypes]


AVMutableMetadataItem : AVMetadataItem
 @property  NSString *identifier
 @property  NSString *extendedLanguageTag
 @property  NSLocale *locale
 @property  {?=qiIq} time
 @property  {?=qiIq} duration
 @property  NSString *dataType
 @property  <NSObject><NSCopying> *value
 @property  NSDictionary *extraAttributes

  // class methods
  +[AVMutableMetadataItem metadataItem]
  +[AVMutableMetadataItem keyPathsForValuesAffectingIdentifier]

  // instance methods
  -[AVMutableMetadataItem setDuration:]
  -[AVMutableMetadataItem identifier]
  -[AVMutableMetadataItem time]
  -[AVMutableMetadataItem extraAttributes]
  -[AVMutableMetadataItem setExtraAttributes:]
  -[AVMutableMetadataItem extendedLanguageTag]
  -[AVMutableMetadataItem setTime:]
  -[AVMutableMetadataItem setStartDate:]
  -[AVMutableMetadataItem setDataType:]
  -[AVMutableMetadataItem languageCode]
  -[AVMutableMetadataItem duration]
  -[AVMutableMetadataItem locale]
  -[AVMutableMetadataItem keySpace]
  -[AVMutableMetadataItem setKeySpace:]
  -[AVMutableMetadataItem setExtendedLanguageTag:]
  -[AVMutableMetadataItem setValue:]
  -[AVMutableMetadataItem setIdentifier:]
  -[AVMutableMetadataItem setLocale:]
  -[AVMutableMetadataItem dataType]
  -[AVMutableMetadataItem copyWithZone:]
  -[AVMutableMetadataItem key]
  -[AVMutableMetadataItem value]
  -[AVMutableMetadataItem setKey:]
  -[AVMutableMetadataItem startDate]


AVLazyValueLoadingMetadataItemInternal : NSObject

AVLazyValueLoadingMetadataItem : AVMetadataItem
  // class methods
  +[AVLazyValueLoadingMetadataItem metadataItemWithPropertiesOfMetadataItem:valueLoadingHandler:]

  // instance methods
  -[AVLazyValueLoadingMetadataItem loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVLazyValueLoadingMetadataItem statusOfValueForKey:error:]
  -[AVLazyValueLoadingMetadataItem dealloc]
  -[AVLazyValueLoadingMetadataItem dataType]
  -[AVLazyValueLoadingMetadataItem value]
  -[AVLazyValueLoadingMetadataItem _initWithFigMetadataDictionary:valueLoadingHandler:]
  -[AVLazyValueLoadingMetadataItem _valueRequestDidFinish]
  -[AVLazyValueLoadingMetadataItem _valueForKeyDependsOnMetadataValue:]
  -[AVLazyValueLoadingMetadataItem _valueStatus]
  -[AVLazyValueLoadingMetadataItem _waitForLoadingOfValueDependentKey:]


AVMetadataItemValueRequestInternal : NSObject

AVMetadataItemValueRequest : NSObject
 @property  AVMetadataItem *metadataItem

  // class methods
  +[AVMetadataItemValueRequest metadataItemValueRequestWithMetadataItem:]

  // instance methods
  -[AVMetadataItemValueRequest error]
  -[AVMetadataItemValueRequest dealloc]
  -[AVMetadataItemValueRequest dataType]
  -[AVMetadataItemValueRequest value]
  -[AVMetadataItemValueRequest metadataItem]
  -[AVMetadataItemValueRequest initWithMetadataItem:]
  -[AVMetadataItemValueRequest respondWithValue:dataType:]
  -[AVMetadataItemValueRequest respondWithValue:]
  -[AVMetadataItemValueRequest respondWithError:]


AVChapterMetadataItemInternal : NSObject

AVChapterMetadataItem : AVMetadataItem
  // instance methods
  -[AVChapterMetadataItem loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVChapterMetadataItem cancelLoading]
  -[AVChapterMetadataItem time]
  -[AVChapterMetadataItem extraAttributes]
  -[AVChapterMetadataItem statusOfValueForKey:error:]
  -[AVChapterMetadataItem dealloc]
  -[AVChapterMetadataItem extendedLanguageTag]
  -[AVChapterMetadataItem languageCode]
  -[AVChapterMetadataItem duration]
  -[AVChapterMetadataItem locale]
  -[AVChapterMetadataItem keySpace]
  -[AVChapterMetadataItem _addFigAssetNotifications]
  -[AVChapterMetadataItem dataType]
  -[AVChapterMetadataItem copyWithZone:]
  -[AVChapterMetadataItem key]
  -[AVChapterMetadataItem value]
  -[AVChapterMetadataItem _removeFigAssetNotifications]
  -[AVChapterMetadataItem mutableCopyWithZone:]
  -[AVChapterMetadataItem startDate]
  -[AVChapterMetadataItem init]
  -[AVChapterMetadataItem commonKey]
  -[AVChapterMetadataItem _valueForKeyDependsOnMetadataValue:]
  -[AVChapterMetadataItem _valueStatus]
  -[AVChapterMetadataItem _initWithAsset:chapterGroupIndex:chapterIndex:chapterType:extendedLanguageTag:languageCode:chapterDataType:time:duration:]
  -[AVChapterMetadataItem _takeValueFrom:]
  -[AVChapterMetadataItem _chapterGroupIndex]
  -[AVChapterMetadataItem _chapterIndex]
  -[AVChapterMetadataItem _setValueStatus:figErrorCode:]
  -[AVChapterMetadataItem _ensureValueLoadedSync]


AVMetadataItemFilterForSharing : AVMetadataItemFilter
  // class methods
  +[AVMetadataItemFilterForSharing addKeySpace:key:toWhitelistDictionary:]
  +[AVMetadataItemFilterForSharing addIdentifier:toWhitelistDictionary:]

  // instance methods
  -[AVMetadataItemFilterForSharing whitelist]


AVMetadataItemFilterInternal : NSObject

AVMetadataItemFilter : NSObject
 @property  NSDictionary *whitelist

  // class methods
  +[AVMetadataItemFilter metadataItemFilterForSharing]

  // instance methods
  -[AVMetadataItemFilter whitelist]


AVAssetInternal : NSObject

AVAsset : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
 @property  NSArray *availableChapterLocales
 @property  long long moovAtomSize
 @property  NSArray *fragments
 @property  <AVLoggingIdentifier> *loggingIdentifier
 @property  id propertyListForProxy
 @property  BOOL isProxy
 @property  {?=qiIq} duration
 @property  float preferredRate
 @property  float preferredVolume
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  {CGSize=dd} naturalSize
 @property  AVDisplayCriteria *preferredDisplayCriteria
 @property  {?=qiIq} minimumTimeOffsetFromLive

  // class methods
  +[AVAsset initialize]
  +[AVAsset assetWithURL:]
  +[AVAsset assetWithURL:figPlaybackItem:trackIDs:dynamicBehavior:]
  +[AVAsset assetWithData:contentType:options:]
  +[AVAsset _assetCreationOptionsRequiresInProcessOperation:]
  +[AVAsset _assetCreationOptionsPrefersSandboxedOption:]
  +[AVAsset expectsPropertyRevisedNotifications]
  +[AVAsset supportsPlayerItems]
  +[AVAsset makeAssetLoggingIdentifier]
  +[AVAsset assetProxyWithPropertyList:]
  +[AVAsset inspectionOnlyAssetWithFigAsset:]
  +[AVAsset inspectionOnlyAssetWithStreamDataParser:tracks:]

  // instance methods
  -[AVAsset lyrics]
  -[AVAsset naturalSize]
  -[AVAsset loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAsset makePropertyListForProxyWithOptions:]
  -[AVAsset valueForUndefinedKey:]
  -[AVAsset isReadable]
  -[AVAsset preferredVolume]
  -[AVAsset metadataForFormat:]
  -[AVAsset _playbackItem]
  -[AVAsset commonMetadata]
  -[AVAsset isPlayable]
  -[AVAsset cancelLoading]
  -[AVAsset _isStreaming]
  -[AVAsset _setFragmentMindingInterval:]
  -[AVAsset preferredTransform]
  -[AVAsset preferredDisplayCriteria]
  -[AVAsset tracksWithMediaType:]
  -[AVAsset isComposable]
  -[AVAsset supportsAnalysisReporting]
  -[AVAsset isCompatibleWithAirPlayVideo]
  -[AVAsset maximumVideoResolution]
  -[AVAsset alternateTrackGroups]
  -[AVAsset statusOfValueForKey:error:]
  -[AVAsset isCompatibleWithPhotosTranscodingServiceWithOptions:]
  -[AVAsset propertyListForProxy]
  -[AVAsset providesPreciseDurationAndTiming]
  -[AVAsset dealloc]
  -[AVAsset initWithURL:options:]
  -[AVAsset hasProtectedContent]
  -[AVAsset _fragmentMindingInterval]
  -[AVAsset trackReferences]
  -[AVAsset loadValuesAsynchronouslyForKeys:keysForCollectionKeys:completionHandler:]
  -[AVAsset creationDate]
  -[AVAsset duration]
  -[AVAsset mediaSelectionGroupForMediaCharacteristic:]
  -[AVAsset preferredSoundCheckVolumeNormalization]
  -[AVAsset availableMetadataFormats]
  -[AVAsset isProxy]
  -[AVAsset naturalTimeScale]
  -[AVAsset _formatReader]
  -[AVAsset tracksWithMediaCharacteristic:]
  -[AVAsset isExportable]
  -[AVAsset isCompatibleWithSavedPhotosAlbum]
  -[AVAsset preferredRate]
  -[AVAsset _weakReference]
  -[AVAsset _mediaSelectionGroupDictionaries]
  -[AVAsset tracks]
  -[AVAsset copyWithZone:]
  -[AVAsset minimumTimeOffsetFromLive]
  -[AVAsset trackWithTrackID:]
  -[AVAsset loggingIdentifier]
  -[AVAsset _classForTrackInspectors]
  -[AVAsset _assetAnalysisMessages]
  -[AVAsset overallDurationHint]
  -[AVAsset metadata]
  -[AVAsset availableVideoDynamicRanges]
  -[AVAsset _setIsAssociatedWithFragmentMinder:]
  -[AVAsset canContainFragments]
  -[AVAsset compatibleTrackForCompositionTrack:]
  -[AVAsset containsFragments]
  -[AVAsset _figAsset]
  -[AVAsset isEqual:]
  -[AVAsset init]
  -[AVAsset availableChapterLanguages]
  -[AVAsset availableChapterLocales]
  -[AVAsset initWithData:contentType:options:]
  -[AVAsset _setLoggingIdentifier:]
  -[AVAsset _nameForLogging]
  -[AVAsset _assetInspector]
  -[AVAsset _assetInspectorLoader]
  -[AVAsset _comparisonToken]
  -[AVAsset statusOfValueForKey:]
  -[AVAsset _loadValuesSynchronouslyForKeys:trackKeys:]
  -[AVAsset _absoluteURL]
  -[AVAsset _mutableComposition]
  -[AVAsset _mindsFragments]
  -[AVAsset _needsLegacyChangeNotifications]
  -[AVAsset referenceRestrictions]
  -[AVAsset trackGroups]
  -[AVAsset _firstTrackGroupWithMediaTypes:]
  -[AVAsset audioAlternatesTrackGroup]
  -[AVAsset subtitleAlternatesTrackGroup]
  -[AVAsset availableMediaCharacteristicsWithMediaSelectionOptions]
  -[AVAsset loadMediaSelectionGroupForMediaCharacteristic:completionHandler:]
  -[AVAsset mediaSelectionGroupForPropertyList:mediaSelectionOption:]
  -[AVAsset preferredMediaSelection]
  -[AVAsset allMediaSelections]
  -[AVAsset loadMetadataForFormat:completionHandler:]
  -[AVAsset _ID3Metadata]
  -[AVAsset _tracksWithClass:]
  -[AVAsset _tracksDidChange]
  -[AVAsset loadTrackWithTrackID:completionHandler:]
  -[AVAsset loadTracksWithMediaType:completionHandler:]
  -[AVAsset loadTracksWithMediaCharacteristic:completionHandler:]
  -[AVAsset tracksWithMediaCharacteristics:]
  -[AVAsset findCompatibleTrackForCompositionTrack:completionHandler:]
  -[AVAsset _requiresInProcessOperation]
  -[AVAsset _serverHasDied]
  -[AVAsset _hasResourceLoaderDelegate]
  -[AVAsset _handleURLRequest:]
  -[AVAsset _loadChapterInfo]
  -[AVAsset _availableCanonicalizedChapterLanguages]
  -[AVAsset _addChapterMetadataItem:timeRange:toChapters:fromIndex:]
  -[AVAsset _chapterDataTypeForMediaSubType:]
  -[AVAsset _chapterMetadataGroupsWithFigChapterGroups:titleLanguage:containingItemsWithCommonKeys:]
  -[AVAsset _chapterMetadataGroupsWithTitleLanguage:containingItemsWithCommonKeys:]
  -[AVAsset _chapterMetadataGroupsBestMatchingPreferredLanguages:containingItemsWithCommonKeys:]
  -[AVAsset chapterMetadataGroupsBestMatchingPreferredLanguages:]
  -[AVAsset loadChapterMetadataGroupsBestMatchingPreferredLanguages:completionHandler:]
  -[AVAsset chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:]
  -[AVAsset loadChapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:completionHandler:]
  -[AVAsset _chapterTracks]
  -[AVAsset moovAtomSize]
  -[AVAsset fragments]
  -[AVAsset unusedTrackID]
  -[AVAsset findUnusedTrackIDWithCompletionHandler:]


AVAssetFragmentInternal : NSObject

AVAssetFragment : NSObject
 @property  long long sequenceNumber

  // class methods
  +[AVAssetFragment fragmentWithSequenceNumber:]

  // instance methods
  -[AVAssetFragment dealloc]
  -[AVAssetFragment sequenceNumber]
  -[AVAssetFragment initWithSequenceNumber:]
  -[AVAssetFragment init]


AVFragmentedAssetsArray : NSArray
  // instance methods
  -[AVFragmentedAssetsArray dealloc]
  -[AVFragmentedAssetsArray count]
  -[AVFragmentedAssetsArray objectAtIndex:]
  -[AVFragmentedAssetsArray init]
  -[AVFragmentedAssetsArray initWithCount:firstSequenceNumber:]


AVURLAssetInternal : NSObject

AVURLAsset : AVAsset <AVContentKeyRecipient, AVContentKeyRecipientInternal>
 @property  BOOL shouldMatchDataInCacheByURLPathComponentOnly
 @property  BOOL shouldMatchDataInCacheByURLWithoutQueryComponent
 @property  NSString *cacheKey
 @property  NSArray *variants
 @property  AVAssetResourceLoader *resourceLoader
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  NSURL *URL
 @property  NSUUID *httpSessionIdentifier

  // class methods
  +[AVURLAsset writableTypeIdentifiersForItemProvider]
  +[AVURLAsset readableTypeIdentifiersForItemProvider]
  +[AVURLAsset itemProviderVisibilityForRepresentationWithTypeIdentifier:]
  +[AVURLAsset objectWithItemProviderData:typeIdentifier:error:]
  +[AVURLAsset _objectWithItemProviderFileURL:typeIdentifier:isInPlace:error:]
  +[AVURLAsset _preferredRepresentationForItemProviderWritableTypeIdentifier:]
  +[AVURLAsset _preferredRepresentationForItemProviderReadableTypeIdentifier:]
  +[AVURLAsset URLAssetWithURL:options:]
  +[AVURLAsset audiovisualTypes]
  +[AVURLAsset _avfValidationPlist]
  +[AVURLAsset _figStreamingUTIs]
  +[AVURLAsset _figStreamingMIMETypes]
  +[AVURLAsset _figFileMIMETypes]
  +[AVURLAsset _figFilePathExtensions]
  +[AVURLAsset _figHFSFileTypes]
  +[AVURLAsset _figFileUTIs]
  +[AVURLAsset _figMIMETypes]
  +[AVURLAsset UTTypeIDArrayFromUTTypeArray:]
  +[AVURLAsset _streamingUTTypes]
  +[AVURLAsset _fileUTTypes]
  +[AVURLAsset _UTTypes]
  +[AVURLAsset audiovisualMIMETypes]
  +[AVURLAsset isPlayableExtendedMIMEType:]
  +[AVURLAsset _getFigAssetiTunesStoreContentInfoFromURLAssetiTunesStoreContentInfo:]
  +[AVURLAsset _initializationOptionsClasses]
  +[AVURLAsset _getFigAssetCreationOptionsFromURLAssetInitializationOptions:assetLoggingIdentifier:figAssetCreationFlags:error:]
  +[AVURLAsset instanceIdentifierMapTable]
  +[AVURLAsset setUserInfoObject:forURLAsset:]
  +[AVURLAsset userInfoObjectForURLAsset:]
  +[AVURLAsset userInfoObjectForURLAssetInstanceIdentifier:]

  // instance methods
  -[AVURLAsset lyrics]
  -[AVURLAsset downloadToken]
  -[AVURLAsset cacheKey]
  -[AVURLAsset _playbackItem]
  -[AVURLAsset cancelLoading]
  -[AVURLAsset identifyingTagClass]
  -[AVURLAsset loadDataWithTypeIdentifier:forItemProviderCompletionHandler:]
  -[AVURLAsset expire]
  -[AVURLAsset dealloc]
  -[AVURLAsset variants]
  -[AVURLAsset httpSessionIdentifier]
  -[AVURLAsset initWithURL:options:]
  -[AVURLAsset identifyingTag]
  -[AVURLAsset _addFigAssetNotifications]
  -[AVURLAsset assetCache]
  -[AVURLAsset _formatReader]
  -[AVURLAsset contentKeySpecifiersEligibleForPreloading]
  -[AVURLAsset originalNetworkContentURL]
  -[AVURLAsset tracks]
  -[AVURLAsset _removeFigAssetNotifications]
  -[AVURLAsset _classForTrackInspectors]
  -[AVURLAsset SHA1Digest]
  -[AVURLAsset URL]
  -[AVURLAsset resourceLoader]
  -[AVURLAsset resolvedURL]
  -[AVURLAsset init]
  -[AVURLAsset _loadFileRepresentationOfTypeIdentifier:forItemProviderCompletionHandler:]
  -[AVURLAsset _assetInspector]
  -[AVURLAsset _assetInspectorLoader]
  -[AVURLAsset _absoluteURL]
  -[AVURLAsset referenceRestrictions]
  -[AVURLAsset _tracksDidChange]
  -[AVURLAsset _requiresInProcessOperation]
  -[AVURLAsset _hasResourceLoaderDelegate]
  -[AVURLAsset initWithFileURL:offset:length:options:]
  -[AVURLAsset _errorForFigNotificationPayload:key:]
  -[AVURLAsset _ensureAssetDownloadCache]
  -[AVURLAsset _setAssetInspectorLoader:]
  -[AVURLAsset _classForFigAssetInspectorLoader]
  -[AVURLAsset _classForAssetTracks]
  -[AVURLAsset creationOptions]
  -[AVURLAsset _managedAssetCache]
  -[AVURLAsset shouldMatchDataInCacheByURLPathComponentOnly]
  -[AVURLAsset shouldMatchDataInCacheByURLWithoutQueryComponent]
  -[AVURLAsset downloadDestinationURL]
  -[AVURLAsset _shouldOptimizeAccessForLinearMoviePlayback]
  -[AVURLAsset _clientURLLoadingRepresentsAccurateNetworkStatistics]
  -[AVURLAsset _resourceLoaderWithRemoteHandlerContext:]
  -[AVURLAsset _removeUserInfoObject]
  -[AVURLAsset _setUserInfoObject:]
  -[AVURLAsset mayRequireContentKeysForMediaDataProcessing]
  -[AVURLAsset _attachToContentKeySession:contentKeyBoss:failedSinceAlreadyAttachedToAnotherSession:]
  -[AVURLAsset contentKeySession]
  -[AVURLAsset _attachedToExternalContentKeySession]
  -[AVURLAsset _installHandlerForNSURLSessionConfiguration:queue:]
  -[AVURLAsset _serializableCreationOptions]


AVAssetClientURLRequestHelper : NSObject
 @property  @? figAssetProvider
 @property  AVAssetResourceLoader *resourceLoader
 @property  r^{OpaqueFigAsset=} figAsset

  // instance methods
  -[AVAssetClientURLRequestHelper initWithAsset:]
  -[AVAssetClientURLRequestHelper setFigAssetProvider:]
  -[AVAssetClientURLRequestHelper setResourceLoader:]
  -[AVAssetClientURLRequestHelper URLAsset]
  -[AVAssetClientURLRequestHelper dealloc]
  -[AVAssetClientURLRequestHelper figAssetProvider]
  -[AVAssetClientURLRequestHelper resourceLoader]
  -[AVAssetClientURLRequestHelper figAsset]


AVDataAsset : AVAsset
  // class methods
  +[AVDataAsset _dataLengthLimit]
  +[AVDataAsset _getFigAssetCreationOptionsFromDataAssetInitializationOptions:figAssetCreationFlags:]

  // instance methods
  -[AVDataAsset dealloc]
  -[AVDataAsset _formatReader]
  -[AVDataAsset tracks]
  -[AVDataAsset _classForTrackInspectors]
  -[AVDataAsset initWithData:contentType:]
  -[AVDataAsset initWithData:contentType:options:]
  -[AVDataAsset _assetInspector]
  -[AVDataAsset _assetInspectorLoader]
  -[AVDataAsset referenceRestrictions]
  -[AVDataAsset _requiresInProcessOperation]


AVAssetTrackEnumerator : NSEnumerator
  // class methods
  +[AVAssetTrackEnumerator trackEnumeratorWithAsset:]

  // instance methods
  -[AVAssetTrackEnumerator initWithAsset:]
  -[AVAssetTrackEnumerator setMediaType:]
  -[AVAssetTrackEnumerator initWithAsset:mediaType:]
  -[AVAssetTrackEnumerator setMediaCharacteristics:]
  -[AVAssetTrackEnumerator initWithAsset:mediaCharacteristics:]
  -[AVAssetTrackEnumerator dealloc]
  -[AVAssetTrackEnumerator nextObject]


AVURLAssetItemProviderData : NSObject <NSSecureCoding>
 @property  NSURL *securityScopedURL
 @property  NSDictionary *assetInitializationOptions

  // class methods
  +[AVURLAssetItemProviderData supportsSecureCoding]
  +[AVURLAssetItemProviderData itemProviderDataWithURL:assetInitializationOptions:]

  // instance methods
  -[AVURLAssetItemProviderData encodeWithCoder:]
  -[AVURLAssetItemProviderData dealloc]
  -[AVURLAssetItemProviderData initWithCoder:]
  -[AVURLAssetItemProviderData initWithURL:assetInitializationOptions:]
  -[AVURLAssetItemProviderData securityScopedURL]
  -[AVURLAssetItemProviderData assetInitializationOptions]


AVAssetSerializableCreationOptions : NSObject <NSSecureCoding>
  // class methods
  +[AVAssetSerializableCreationOptions supportsSecureCoding]

  // instance methods
  -[AVAssetSerializableCreationOptions encodeWithCoder:]
  -[AVAssetSerializableCreationOptions dealloc]
  -[AVAssetSerializableCreationOptions initWithCoder:]
  -[AVAssetSerializableCreationOptions creationOptions]
  -[AVAssetSerializableCreationOptions initWithCreationOptions:]


AVAssetImageGeneratorInternal : NSObject

AVAssetImageGenerator : NSObject
 @property  AVAsset *asset
 @property  BOOL appliesPreferredTrackTransform
 @property  {CGSize=dd} maximumSize
 @property  NSString *apertureMode
 @property  AVVideoComposition *videoComposition
 @property  <AVVideoCompositing> *customVideoCompositor
 @property  {?=qiIq} requestedTimeToleranceBefore
 @property  {?=qiIq} requestedTimeToleranceAfter

  // class methods
  +[AVAssetImageGenerator assetImageGeneratorWithAsset:]

  // instance methods
  -[AVAssetImageGenerator initWithAsset:]
  -[AVAssetImageGenerator dealloc]
  -[AVAssetImageGenerator asset]
  -[AVAssetImageGenerator setMaximumSize:]
  -[AVAssetImageGenerator _serverDied]
  -[AVAssetImageGenerator maximumSize]
  -[AVAssetImageGenerator init]
  -[AVAssetImageGenerator setAppliesPreferredTrackTransform:]
  -[AVAssetImageGenerator copyCGImageAtTime:actualTime:error:]
  -[AVAssetImageGenerator appliesPreferredTrackTransform]
  -[AVAssetImageGenerator apertureMode]
  -[AVAssetImageGenerator requestedTimeToleranceBefore]
  -[AVAssetImageGenerator requestedTimeToleranceAfter]
  -[AVAssetImageGenerator videoComposition]
  -[AVAssetImageGenerator prefersStandardDynamicRange]
  -[AVAssetImageGenerator _ensureFigAssetImageGeneratorAllowingSynchronousPropertyLoad:error:]
  -[AVAssetImageGenerator _videoSettingWithSize:]
  -[AVAssetImageGenerator _makeAutoreleasedAssetReader]
  -[AVAssetImageGenerator generateCGImagesAsynchronouslyForTimes:completionHandler:]
  -[AVAssetImageGenerator generateCGImageAsynchronouslyForTime:completionHandler:]
  -[AVAssetImageGenerator cancelAllCGImageGeneration]
  -[AVAssetImageGenerator setPrefersStandardDynamicRange:]
  -[AVAssetImageGenerator setApertureMode:]
  -[AVAssetImageGenerator setVideoComposition:]
  -[AVAssetImageGenerator customVideoCompositor]
  -[AVAssetImageGenerator setRequestedTimeToleranceBefore:]
  -[AVAssetImageGenerator setRequestedTimeToleranceAfter:]
  -[AVAssetImageGenerator _optionsDictionary]
  -[AVAssetImageGenerator _didGenerateCGImage:]
  -[AVAssetImageGenerator _failedToGenerateCGImage:]
  -[AVAssetImageGenerator _requestWithRequestID:]
  -[AVAssetImageGenerator _scaledSizeForRenderSize:]
  -[AVAssetImageGenerator _copyCGImageAtTime:usingAssetReader:error:]
  -[AVAssetImageGenerator _NSErrorForError:]


AVAssetReaderOutputMetadataAdaptorInternal : NSObject

AVAssetReaderOutputMetadataAdaptor : NSObject <AVAssetReaderOutputAdaptor>
 @property  AVAssetReaderTrackOutput *assetReaderTrackOutput

  // class methods
  +[AVAssetReaderOutputMetadataAdaptor assetReaderOutputMetadataAdaptorWithAssetReaderTrackOutput:]

  // instance methods
  -[AVAssetReaderOutputMetadataAdaptor dealloc]
  -[AVAssetReaderOutputMetadataAdaptor init]
  -[AVAssetReaderOutputMetadataAdaptor addExtractionForOutput:figAssetReader:options:withOutputExtactionID:]
  -[AVAssetReaderOutputMetadataAdaptor initWithAssetReaderTrackOutput:]
  -[AVAssetReaderOutputMetadataAdaptor assetReaderTrackOutput]
  -[AVAssetReaderOutputMetadataAdaptor nextTimedMetadataGroup]


AVAssetTrackInternal : NSObject

AVAssetTrack : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
 @property  AVAsset *asset
 @property  int trackID

  // class methods
  +[AVAssetTrack expectsPropertyRevisedNotifications]
  +[AVAssetTrack mediaCharacteristicsForMediaTypes]
  +[AVAssetTrack keyPathsForValuesAffectingTimeRange]

  // instance methods
  -[AVAssetTrack formatDescriptions]
  -[AVAssetTrack naturalSize]
  -[AVAssetTrack loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAssetTrack preferredVolume]
  -[AVAssetTrack metadataForFormat:]
  -[AVAssetTrack loudnessInfo]
  -[AVAssetTrack estimatedDataRate]
  -[AVAssetTrack commonMetadata]
  -[AVAssetTrack isPlayable]
  -[AVAssetTrack peakDataRate]
  -[AVAssetTrack preferredTransform]
  -[AVAssetTrack isDecodable]
  -[AVAssetTrack _initWithAsset:trackID:trackIndex:]
  -[AVAssetTrack latentBaseDecodeTimeStampOfFirstTrackFragment]
  -[AVAssetTrack trackID]
  -[AVAssetTrack segmentForTrackTime:]
  -[AVAssetTrack timeRange]
  -[AVAssetTrack layer]
  -[AVAssetTrack isExcludedFromAutoselectionInTrackGroup]
  -[AVAssetTrack alternateGroupID]
  -[AVAssetTrack mediaType]
  -[AVAssetTrack availableTrackAssociationTypes]
  -[AVAssetTrack statusOfValueForKey:error:]
  -[AVAssetTrack dealloc]
  -[AVAssetTrack segments]
  -[AVAssetTrack extendedLanguageTag]
  -[AVAssetTrack dimensions]
  -[AVAssetTrack hasProtectedContent]
  -[AVAssetTrack nominalFrameRate]
  -[AVAssetTrack languageCode]
  -[AVAssetTrack asset]
  -[AVAssetTrack _figAssetTrack]
  -[AVAssetTrack provisionalAlternateGroupID]
  -[AVAssetTrack locale]
  -[AVAssetTrack minFrameDuration]
  -[AVAssetTrack availableMetadataFormats]
  -[AVAssetTrack segmentsExcludeAudioPrimingAndRemainderDurations]
  -[AVAssetTrack totalSampleDataLength]
  -[AVAssetTrack naturalTimeScale]
  -[AVAssetTrack samplePresentationTimeForTrackTime:]
  -[AVAssetTrack segmentsAsPresented]
  -[AVAssetTrack _trackReferences]
  -[AVAssetTrack hasSeamSamples]
  -[AVAssetTrack _weakReference]
  -[AVAssetTrack copyWithZone:]
  -[AVAssetTrack gaplessSourceTimeRange]
  -[AVAssetTrack mediaPresentationTimeRange]
  -[AVAssetTrack hasAudibleBooksContent]
  -[AVAssetTrack isSelfContained]
  -[AVAssetTrack metadata]
  -[AVAssetTrack _figTrackReader]
  -[AVAssetTrack playabilityValidationResult]
  -[AVAssetTrack defaultAlternateGroupID]
  -[AVAssetTrack isEqual:]
  -[AVAssetTrack requiresFrameReordering]
  -[AVAssetTrack init]
  -[AVAssetTrack isEnabled]
  -[AVAssetTrack isAudibleBooksContentAuthorized]
  -[AVAssetTrack mediaDecodeTimeRange]
  -[AVAssetTrack statusOfValueForKey:]
  -[AVAssetTrack loadMetadataForFormat:completionHandler:]
  -[AVAssetTrack _startListeningToFigAssetTrackNotifications]
  -[AVAssetTrack _stopListeningToFigAssetTrackNotifications]
  -[AVAssetTrack _initWithAsset:trackID:]
  -[AVAssetTrack _initWithAsset:trackIndex:]
  -[AVAssetTrack _assetTrackInspector]
  -[AVAssetTrack _subtitleFormatDescriptionMatchesTextDisplayFlags:flagsMask:]
  -[AVAssetTrack hasMediaCharacteristic:]
  -[AVAssetTrack hasMediaCharacteristics:]
  -[AVAssetTrack mediaCharacteristics]
  -[AVAssetTrack hasAudioSampleDependencies]
  -[AVAssetTrack loadSegmentForTrackTime:completionHandler:]
  -[AVAssetTrack loadSamplePresentationTimeForTrackTime:completionHandler:]
  -[AVAssetTrack _firstAssociatedTrackWithAssociationType:]
  -[AVAssetTrack _fallbackTrack]
  -[AVAssetTrack _pairedForcedOnlySubtitlesTrack]
  -[AVAssetTrack associatedTracksOfType:]
  -[AVAssetTrack loadAssociatedTracksOfType:completionHandler:]
  -[AVAssetTrack canProvideSampleCursors]
  -[AVAssetTrack makeSampleCursorWithPresentationTimeStamp:]
  -[AVAssetTrack makeSampleCursorAtFirstSampleInDecodeOrder]
  -[AVAssetTrack makeSampleCursorAtLastSampleInDecodeOrder]
  -[AVAssetTrack _hasMultipleEdits]
  -[AVAssetTrack _hasScaledEdits]
  -[AVAssetTrack _hasEmptyEdits]
  -[AVAssetTrack _hasMultipleDistinctFormatDescriptions]
  -[AVAssetTrack _firstFormatDescriptionIsLPCM]


AVPlayerSetRateOptions : NSObject <NSCopying>
 @property  BOOL preferCoordinatedPlaybackBehavior

  // instance methods
  -[AVPlayerSetRateOptions copyWithZone:]
  -[AVPlayerSetRateOptions isEqual:]
  -[AVPlayerSetRateOptions init]
  -[AVPlayerSetRateOptions preferCoordinatedPlaybackBehavior]
  -[AVPlayerSetRateOptions setPreferCoordinatedPlaybackBehavior:]


AVPlayerInternal : NSObject
  // instance methods
  -[AVPlayerInternal .cxx_destruct]


AVPlayer : NSObject <AVAudioSessionParticipant>
 @property  BOOL preventsDisplaySleepDuringVideoPlayback
 @property  BOOL preventsAutomaticBackgroundingDuringVideoPlayback
 @property  NSArray *_displaysUsedForPlayback
 @property  long long _externalProtectionStatus
 @property  BOOL PIPModePossible
 @property  BOOL audioPlaybackEnabledAtAllRates
 @property  float minRateForAudioPlayback
 @property  float maxRateForAudioPlayback
 @property  BOOL allowsPixelBufferPoolSharing
 @property  BOOL disallowsAMRAudio
 @property  BOOL appliesMediaSelectionCriteriaAutomatically
 @property  NSString *audioOutputDeviceUniqueID
 @property  BOOL allowsOutOfBandTextTrackRendering
 @property  NSString *multichannelAudioStrategy
 @property  NSString *captionRenderingStrategy
 @property  NSString *captionPipelineStrategy
 @property  BOOL preservesAudioSessionSampleRate
 @property  AVAudioSession *audioSession
 @property  unsigned long preferredVideoDecoderGPURegistryID
 @property  <AVLoggingIdentifier> *loggingIdentifier
 @property  BOOL disallowsAutoPauseOnRouteRemovalIfNoAudio
 @property  NSString *STSLabel
 @property  BOOL prefersPlayingSilentlyWhenConflictingWithOtherPlayback
 @property  BOOL isSilencedDueToConflictWithOtherPlayback
 @property  BOOL silencesOtherPlaybackDuringPIP
 @property  NSNumber *mxSessionID
 @property  NSString *backgroundPIPAuthorizationToken
 @property  BOOL shouldWaitForVideoTarget
 @property  NSArray *videoTargets
 @property  AVPlayerPlaybackCoordinator *playbackCoordinator
 @property  BOOL allowsLegibleFallbackForAllAudibleMediaSelections
 @property  AVPlayerMediaSelectionCriteria *legibleFallbackMediaSelectionCriteria
 @property  long long status
 @property  NSError *error

  // class methods
  +[AVPlayer initialize]
  +[AVPlayer keyPathsForValuesAffectingVolume]
  +[AVPlayer playerWithPlayerItem:]
  +[AVPlayer playerWithURL:]
  +[AVPlayer worksAroundConcurrentKVOCrash]
  +[AVPlayer playerWithFigPlayer:]
  +[AVPlayer automaticallyNotifiesObserversOfCurrentItem]
  +[AVPlayer _createFigPlayerWithType:options:player:]
  +[AVPlayer automaticallyNotifiesObserversOfRate]
  +[AVPlayer automaticallyNotifiesObserversOfUsesLegacyAutomaticWaitingBehavior]
  +[AVPlayer automaticallyNotifiesObserversOfUserVolume]
  +[AVPlayer automaticallyNotifiesObserversOfVibrationPattern]
  +[AVPlayer keyPathsForValuesAffectingMuted]
  +[AVPlayer keyPathsForValuesAffectingActionAtItemEnd]
  +[AVPlayer keyPathsForValuesAffectingClosedCaptionDisplayEnabled]
  +[AVPlayer automaticallyNotifiesObserversOfExternalPlaybackActive]
  +[AVPlayer automaticallyNotifiesObserversOfUsesAudioOnlyModeForExternalPlayback]
  +[AVPlayer automaticallyNotifiesObserversOfAirPlayVideoActive]
  +[AVPlayer automaticallyNotifiesObserversOfUsesAirPlayVideoWhileAirPlayScreenIsActive]
  +[AVPlayer checkForAvailableHDRModesChanges]
  +[AVPlayer fireAvailableHDRModesDidChangeNotification]
  +[AVPlayer fireEligibleForHDRPlaybackDidChangeNotification]
  +[AVPlayer registerForScreenConnectionChanges]
  +[AVPlayer availableHDRModes]
  +[AVPlayer eligibleForHDRPlayback]
  +[AVPlayer isIAPDExtendedModeActive]
  +[AVPlayer automaticallyNotifiesObserversOfAutoSwitchStreamVariants]
  +[AVPlayer makePlayerLoggingIdentifier]

  // instance methods
  -[AVPlayer setValue:forUndefinedKey:]
  -[AVPlayer currentTime]
  -[AVPlayer _items]
  -[AVPlayer addObserver:forKeyPath:options:context:]
  -[AVPlayer valueForUndefinedKey:]
  -[AVPlayer usesExternalPlaybackWhileExternalScreenIsActive]
  -[AVPlayer vibrationPattern]
  -[AVPlayer rate]
  -[AVPlayer setSourceClock:]
  -[AVPlayer setOutputContext:]
  -[AVPlayer timeControlStatus]
  -[AVPlayer initWithURL:]
  -[AVPlayer currentItem]
  -[AVPlayer externalPlaybackType]
  -[AVPlayer _enumerateItemsUsingBlock:]
  -[AVPlayer setRate:]
  -[AVPlayer error]
  -[AVPlayer status]
  -[AVPlayer setAllowsExternalPlayback:]
  -[AVPlayer pause]
  -[AVPlayer dealloc]
  -[AVPlayer _removeFPListeners]
  -[AVPlayer seekToTime:]
  -[AVPlayer isMuted]
  -[AVPlayer reasonForWaitingToPlay]
  -[AVPlayer outputContext]
  -[AVPlayer seekToTime:toleranceBefore:toleranceAfter:]
  -[AVPlayer setVolume:]
  -[AVPlayer interstitialPlayer]
  -[AVPlayer allowsExternalPlayback]
  -[AVPlayer volume]
  -[AVPlayer masterClock]
  -[AVPlayer setMuted:]
  -[AVPlayer isExternalPlaybackActive]
  -[AVPlayer setMasterClock:]
  -[AVPlayer dispatchQueue]
  -[AVPlayer sourceClock]
  -[AVPlayer _weakReference]
  -[AVPlayer automaticallyWaitsToMinimizeStalling]
  -[AVPlayer initWithPlayerItem:]
  -[AVPlayer setCaptionRenderingStrategy:]
  -[AVPlayer loggingIdentifier]
  -[AVPlayer _addFPListeners]
  -[AVPlayer _removeAllItems]
  -[AVPlayer initWithDispatchQueue:]
  -[AVPlayer defaultRate]
  -[AVPlayer play]
  -[AVPlayer captionRenderingStrategy]
  -[AVPlayer setVibrationPattern:]
  -[AVPlayer init]
  -[AVPlayer setDefaultRate:]
  -[AVPlayer setPreventsDisplaySleepDuringVideoPlayback:]
  -[AVPlayer setAudioSession:]
  -[AVPlayer _removeItem:]
  -[AVPlayer _isMuted]
  -[AVPlayer _rate]
  -[AVPlayer _didEnterBackground:]
  -[AVPlayer _willEnterForeground:]
  -[AVPlayer audioSession]
  -[AVPlayer _clientName]
  -[AVPlayer seekToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[AVPlayer setActionAtItemEnd:]
  -[AVPlayer replaceCurrentItemWithPlayerItem:]
  -[AVPlayer _STSLabel]
  -[AVPlayer _changeStatusToFailedWithError:]
  -[AVPlayer _nameForLogging]
  -[AVPlayer audiovisualBackgroundPlaybackPolicy]
  -[AVPlayer shouldReduceResourceUsage]
  -[AVPlayer resourceConservationLevelWhilePaused]
  -[AVPlayer playerRole]
  -[AVPlayer usesDedicatedNotificationQueueForMediaServices]
  -[AVPlayer dimensionsOfReservedVideoMemory]
  -[AVPlayer externalPlaybackVideoGravity]
  -[AVPlayer actionAtItemEnd]
  -[AVPlayer minRateForAudioPlayback]
  -[AVPlayer maxRateForAudioPlayback]
  -[AVPlayer autoSwitchStreamVariants]
  -[AVPlayer preparesItemsForPlaybackAsynchronously]
  -[AVPlayer allowsOutOfBandTextTrackRendering]
  -[AVPlayer appliesMediaSelectionCriteriaAutomatically]
  -[AVPlayer usesAudioOnlyModeForExternalPlayback]
  -[AVPlayer allowsPixelBufferPoolSharing]
  -[AVPlayer disallowsAMRAudio]
  -[AVPlayer disallowsHardwareAcceleratedVideoDecoder]
  -[AVPlayer preventsDisplaySleepDuringVideoPlayback]
  -[AVPlayer preventsAutomaticBackgroundingDuringVideoPlayback]
  -[AVPlayer captionPipelineStrategy]
  -[AVPlayer audioOutputDeviceUniqueID]
  -[AVPlayer multichannelAudioStrategy]
  -[AVPlayer isDisplayingClosedCaptions]
  -[AVPlayer outputObscuredDueToInsufficientExternalProtection]
  -[AVPlayer preferredVideoDecoderGPURegistryID]
  -[AVPlayer prefersPlayingSilentlyWhenConflictingWithOtherPlayback]
  -[AVPlayer isSilencedDueToConflictWithOtherPlayback]
  -[AVPlayer mxSessionID]
  -[AVPlayer videoTargets]
  -[AVPlayer shouldWaitForVideoTarget]
  -[AVPlayer playbackCoordinator]
  -[AVPlayer backgroundPIPAuthorizationToken]
  -[AVPlayer allowsLegibleFallbackForAllAudibleMediaSelections]
  -[AVPlayer expectedAssetTypes]
  -[AVPlayer initWithFigPlayer:]
  -[AVPlayer _nameForLogging_fromIvarAccessQueue]
  -[AVPlayer _stateDispatchQueue]
  -[AVPlayer _copyFigPlayer]
  -[AVPlayer _updateDecoderPixelBufferAttributes:onFigPlayer:]
  -[AVPlayer currentItemPublisher]
  -[AVPlayer closedCaptionsDisplayPublisher]
  -[AVPlayer _updateCurrentItemPreferredPixelBufferAttributesAndVideoLayerSuppression]
  -[AVPlayer _setCurrentItem:]
  -[AVPlayer _synchronizeWithNewCurrentItem]
  -[AVPlayer _updateProxyTimebaseFromNewCurrentItem]
  -[AVPlayer _runOnIvarAccessQueueOperationThatMayChangeCurrentItemWithPreflightBlock:modificationBlock:error:]
  -[AVPlayer _cachedPresentationSizeOfCurrentItem]
  -[AVPlayer _noteNewPresentationSizeForPlayerItem:]
  -[AVPlayer _cachedNonForcedSubtitleDisplayEnabledForCurrentItem]
  -[AVPlayer _noteNewNonForcedSubtitleDisplayEnabledForPlayerItem:]
  -[AVPlayer _startObservingPropertiesOfCurrentItem:]
  -[AVPlayer _removePropertyObserversOfCurrentItemCalledOnStateDispatchQueueChecked:]
  -[AVPlayer _stopObservingPropertiesOfCurrentItem:]
  -[AVPlayer _itemIsReadyToPlay:]
  -[AVPlayer _advanceCurrentItemAccordingToFigPlaybackItem:]
  -[AVPlayer _advanceToNextItem]
  -[AVPlayer prepareItem:withCompletionHandler:]
  -[AVPlayer _insertItem:afterItem:]
  -[AVPlayer _pendingFigPlayerProperties]
  -[AVPlayer _pendingFigPlayerPropertyForKey:]
  -[AVPlayer _setPendingFigPlayerProperty:forKey:]
  -[AVPlayer linkInterstitialFigPlayersOnQueue]
  -[AVPlayer _createAndConfigureFigPlayerWithType:completionHandler:]
  -[AVPlayer setExpectedAssetTypes:]
  -[AVPlayer _setAncillaryPerformanceInformationForDisplay:]
  -[AVPlayer _ancillaryPerformanceInformationForDisplay]
  -[AVPlayer _addItemToLinkedList_invokeOnIvarAccessQueue:afterItem:]
  -[AVPlayer _applyLinkedListOfItemsToFigPlayerUsingBlock:]
  -[AVPlayer _applyPlayQueueChangesToFigPlayerWithCompletionHandler:]
  -[AVPlayer _enqueuePlayQueueModification_invokeOnIvarAccessQueue:]
  -[AVPlayer _removeItemFromLinkedList_invokeOnIvarAccessQueue:]
  -[AVPlayer _items_invokeOnIvarAccessQueue]
  -[AVPlayer _rateDidChangeNotificationPayloadForAVFRateChangeReason:reasonIsExtendedDiagnostic:rateChangeIdentifier:rateChangeOriginator:]
  -[AVPlayer _rateDidChangeNotificationPayloadForFigRateChangeReason:rateChangeIdentifier:rateChangeOriginator:]
  -[AVPlayer _rateState]
  -[AVPlayer _setRate:rateChangeReason:figPlayerSetRateHandler:]
  -[AVPlayer _setRate:withVolumeRampDuration:playImmediately:rateChangeReason:affectsCoordinatedPlayback:]
  -[AVPlayer setRate:withVolumeRampDuration:]
  -[AVPlayer playImmediatelyAtRate:]
  -[AVPlayer pauseWithoutAffectingCoordinatedPlayback]
  -[AVPlayer _rateDidChangeNotificationIncludesExtendedDiagnosticPayload]
  -[AVPlayer _setRateDidChangeNotificationIncludesExtendedDiagnosticPayload:]
  -[AVPlayer setAutomaticallyWaitsToMinimizeStalling:]
  -[AVPlayer _updateAutomaticallyWaitsToMinimizeStallingOnFigPlayer]
  -[AVPlayer _setUsesLegacyAutomaticWaitingBehavior:]
  -[AVPlayer _usesLegacyAutomaticWaitingBehavior]
  -[AVPlayer currentUnfoldedTime]
  -[AVPlayer seekToDate:]
  -[AVPlayer seekToDate:completionHandler:]
  -[AVPlayer seekToTime:completionHandler:]
  -[AVPlayer setRate:time:atHostTime:]
  -[AVPlayer setRate:time:atHostTime:options:]
  -[AVPlayer _createPrerollID]
  -[AVPlayer _cancelPendingPrerollAndRegisterPrerollCompletionHandler:]
  -[AVPlayer _unregisterAndReturnRetainedPrerollCompletionHandler]
  -[AVPlayer prerollAtRate:completionHandler:]
  -[AVPlayer cancelPendingPrerolls]
  -[AVPlayer prerollOperationDidComplete:notificationPayload:]
  -[AVPlayer _userVolume]
  -[AVPlayer _setUserVolume:]
  -[AVPlayer _playerVolume]
  -[AVPlayer figPlayerActionForActionAtItemEnd:]
  -[AVPlayer _setActionAtItemEnd:allowingAdvance:]
  -[AVPlayer isClosedCaptionDisplayEnabled]
  -[AVPlayer setClosedCaptionDisplayEnabled:]
  -[AVPlayer _isDisplayingClosedCaptions]
  -[AVPlayer setShouldReduceResourceUsage:]
  -[AVPlayer setResourceConservationLevelWhilePaused:]
  -[AVPlayer setPlayerRole:synchronously:]
  -[AVPlayer setPlayerRole:]
  -[AVPlayer setUsesExternalPlaybackWhileExternalScreenIsActive:]
  -[AVPlayer _externalPlaybackActive]
  -[AVPlayer setUsesDedicatedNotificationQueueForMediaServices:]
  -[AVPlayer _createDictionaryWithDimensionsOfReservedVideoMemory:]
  -[AVPlayer setDimensionsOfReservedVideoMemory:]
  -[AVPlayer setUsesAudioOnlyModeForExternalPlayback:]
  -[AVPlayer allowsAirPlayVideo]
  -[AVPlayer setAllowsAirPlayVideo:]
  -[AVPlayer _airPlayVideoActive]
  -[AVPlayer _isAirPlayVideoActive]
  -[AVPlayer isAirPlayVideoActive]
  -[AVPlayer usesAirPlayVideoWhileAirPlayScreenIsActive]
  -[AVPlayer setUsesAirPlayVideoWhileAirPlayScreenIsActive:]
  -[AVPlayer addPeriodicTimeObserverForInterval:queue:usingBlock:]
  -[AVPlayer addBoundaryTimeObserverForTimes:queue:usingBlock:]
  -[AVPlayer removeTimeObserver:]
  -[AVPlayer _removeAllLayers]
  -[AVPlayer _pixelBufferAttributeMediator]
  -[AVPlayer _subtitleLayers]
  -[AVPlayer _closedCaptionLayers]
  -[AVPlayer _videoLayers]
  -[AVPlayer _avPlayerLayers]
  -[AVPlayer _updateClosedCaptionLayerBounds:videoRelativeToViewport:captionsAvoidanceMargins:]
  -[AVPlayer _setOptions:onClosedCaptionLayer:]
  -[AVPlayer _setSeparated:onClosedCaptionLayer:]
  -[AVPlayer _addCaptionLayer:subtitleLayer:]
  -[AVPlayer _removeCaptionLayer:subtitleLayer:]
  -[AVPlayer _maximumAVPlayerLayerDisplaySize]
  -[AVPlayer _evaluateDisplaySizeOfAllAttachedLayers]
  -[AVPlayer _copyDisplayedPixelBuffer]
  -[AVPlayer _attachFigPlayerToSubtitleLayers]
  -[AVPlayer _detachFigPlayerFromSubtitleLayers]
  -[AVPlayer _attachVideoLayersToFigPlayer]
  -[AVPlayer _detachVideoLayersFromFigPlayer:]
  -[AVPlayer _attachClosedCaptionLayersToFigPlayer]
  -[AVPlayer _detachClosedCaptionLayersFromFigPlayer:]
  -[AVPlayer _removeLayer:]
  -[AVPlayer _removeLayer:videoLayer:closedCaptionLayer:subtitleLayer:interstitialLayer:]
  -[AVPlayer _addLayer:]
  -[AVPlayer _hasForegroundLayers]
  -[AVPlayer _pixelBufferAttributesDidChangeForLayer:]
  -[AVPlayer _updatePixelBufferAttributesForLayer:]
  -[AVPlayer _performanceDictionary]
  -[AVPlayer _externalPlaybackVideoGravity]
  -[AVPlayer setExternalPlaybackVideoGravity:]
  -[AVPlayer _setNeroVideoGravityOnFigPlayer]
  -[AVPlayer _fpNotificationNames]
  -[AVPlayer _addFPInterstitialCoordinatorListeners]
  -[AVPlayer _removeFPInterstitialCoordinatorListeners]
  -[AVPlayer _setFigPlaybackItemToMakeCurrent:]
  -[AVPlayer _getDisplayVideoRange:displaySize:refreshRate:]
  -[AVPlayer _shouldLogPerformanceData]
  -[AVPlayer _logPerformanceDataForPreviousItem]
  -[AVPlayer _copyPerformanceDataForCurrentItem]
  -[AVPlayer _logPerformanceDataForCurrentItem]
  -[AVPlayer _setDynamicallyChoosesInitialVariant:]
  -[AVPlayer _dynamicallyChoosesInitialVariant]
  -[AVPlayer _setLimitsBandwidthForCellularAccess:]
  -[AVPlayer _limitsBandwidthForCellularAccess]
  -[AVPlayer _isVideoPlaybackAllowedWhileInBackground]
  -[AVPlayer _setPausesAudioVisualPlaybackInBackground:]
  -[AVPlayer _pausesAudioVisualPlaybackInBackground]
  -[AVPlayer setAudiovisualBackgroundPlaybackPolicy:]
  -[AVPlayer _suppressesAudioRendering]
  -[AVPlayer _setSuppressesAudioRendering:]
  -[AVPlayer setPreventsAutomaticBackgroundingDuringVideoPlayback:]
  -[AVPlayer _playbackDisplaysForFigPlayer]
  -[AVPlayer _displaysUsedForPlayback]
  -[AVPlayer _setDisplaysUsedForPlayback:]
  -[AVPlayer _externalProtectionStatusCopiedFromFig]
  -[AVPlayer _externalProtectionStatus]
  -[AVPlayer _extractFPExternalProtectionStatus:]
  -[AVPlayer _isPIPModePossible]
  -[AVPlayer removeAudioPlaybackRateLimits]
  -[AVPlayer isAudioPlaybackEnabledAtAllRates]
  -[AVPlayer setMinRateForAudioPlayback:]
  -[AVPlayer setMaxRateForAudioPlayback:]
  -[AVPlayer _hasAssociatedAVPlayerLayerInPIPMode]
  -[AVPlayer _applicationHasExternallyDisplayedAVPlayerLayerAndIsUnderDeviceLock]
  -[AVPlayer _hasAssociatedOnscreenAVPlayerLayer]
  -[AVPlayer _isIAPDExtendedModeActive]
  -[AVPlayer _carplayIsActive]
  -[AVPlayer _hostApplicationHasForegroundExemption]
  -[AVPlayer _hostApplicationInForeground]
  -[AVPlayer _setHostApplicationInForeground:]
  -[AVPlayer _canContinuePlaybackInBackgrounBasedOnAudiovisualBackgroundPlaybackPolicy:]
  -[AVPlayer _forceHostApplicationInForeground:]
  -[AVPlayer _itemOkayToPlayWhileTransitioningToBackground:]
  -[AVPlayer _shouldDetachVideoLayersFromFigPlayer]
  -[AVPlayer _layerForegroundStateChanged:]
  -[AVPlayer _acquireBackgroundAssertion]
  -[AVPlayer _didFinishSuspension:]
  -[AVPlayer _detachVideoLayersForSuspension]
  -[AVPlayer _rateUpdateDuringTransitionDecided]
  -[AVPlayer _ensureVideoLayersAreAttached]
  -[AVPlayer _setWantsVolumeChangesWhenPausedOrInactive:]
  -[AVPlayer _setEQPreset:]
  -[AVPlayer _setStoppingFadeOutDuration:]
  -[AVPlayer _setClientName:]
  -[AVPlayer _clientPriority]
  -[AVPlayer _setClientPriority:]
  -[AVPlayer _setCALayerDestinationIsTVOut:]
  -[AVPlayer _CALayerDestinationIsTVOut]
  -[AVPlayer _updateConnectionToSecondScreen]
  -[AVPlayer _isConnectedToPhysicalSecondScreen]
  -[AVPlayer _setPreventsSleepDuringVideoPlayback:]
  -[AVPlayer _preventsSleepDuringVideoPlayback]
  -[AVPlayer _setDisallowsVideoLayerDisplayCompositing:]
  -[AVPlayer _disallowsVideoLayerDisplayCompositing]
  -[AVPlayer _setPreferredLanguageList:]
  -[AVPlayer _resumePlayback:error:]
  -[AVPlayer playerAVAudioSession]
  -[AVPlayer setAllowsPixelBufferPoolSharing:]
  -[AVPlayer setDisallowsAMRAudio:]
  -[AVPlayer setDisallowsHardwareAcceleratedVideoDecoder:]
  -[AVPlayer setAppliesMediaSelectionCriteriaAutomatically:]
  -[AVPlayer setMediaSelectionCriteria:forMediaCharacteristic:]
  -[AVPlayer _cachedMediaSelectionCriteria]
  -[AVPlayer mediaSelectionCriteriaForMediaCharacteristic:]
  -[AVPlayer defaultMediaSelectionCriteriaForMediaCharacteristic:]
  -[AVPlayer setAudioOutputDeviceUniqueID:]
  -[AVPlayer setAutoSwitchStreamVariants:]
  -[AVPlayer setPreparesItemsForPlaybackAsynchronously:]
  -[AVPlayer setAllowsOutOfBandTextTrackRendering:]
  -[AVPlayer setMultichannelAudioStrategy:]
  -[AVPlayer setCaptionPipelineStrategy:]
  -[AVPlayer _setPreservesAudioSessionSampleRate:]
  -[AVPlayer _preservesAudioSessionSampleRate]
  -[AVPlayer setPreferredVideoDecoderGPURegistryID:]
  -[AVPlayer setLoggingIdentifier:]
  -[AVPlayer _setDisallowsAutoPauseOnRouteRemovalIfNoAudio:]
  -[AVPlayer _disallowsAutoPauseOnRouteRemovalIfNoAudio]
  -[AVPlayer _setEnsuresActiveAudioSessionWhenStartingPlayback:]
  -[AVPlayer _ensuresActiveAudioSessionWhenStartingPlayback]
  -[AVPlayer _setSTSLabel:]
  -[AVPlayer setPrefersPlayingSilentlyWhenConflictingWithOtherPlayback:]
  -[AVPlayer _silencesOtherPlaybackDuringPIP]
  -[AVPlayer _setSilencesOtherPlaybackDuringPIP:]
  -[AVPlayer setBackgroundPIPAuthorizationToken:]
  -[AVPlayer _updateVideoTargetOnFigPlayer]
  -[AVPlayer addVideoTarget:]
  -[AVPlayer removeVideoTarget:]
  -[AVPlayer setShouldWaitForVideoTarget:]
  -[AVPlayer _isInterstitialPlayer]
  -[AVPlayer _setIsInterstitialPlayer:]
  -[AVPlayer syncAudioSessionToInterstitialPlayer:]
  -[AVPlayer _setInterstitialPlayerGuts:]
  -[AVPlayer _interstitialPlayerIfCreated]
  -[AVPlayer _retainInterstitialCoordinatorIfCreated]
  -[AVPlayer _hasCurrentInterstitialEvent]
  -[AVPlayer retainInterstitialEventCoordinator]
  -[AVPlayer _setInterstitialPlayer:]
  -[AVPlayer _noteRemoteInterstitialEvents:forItem:]
  -[AVPlayer _noteCurrentRemoteInterstitialEvent:]
  -[AVPlayer _clientRequestedPlaybackCoordinator]
  -[AVPlayer _playbackCoordinatorWithoutTriggeringFullSetup]
  -[AVPlayer _ensureFigPlaybackCoordinatorIsConnected]
  -[AVPlayer setAllowsLegibleFallbackForAllAudibleMediaSelections:]
  -[AVPlayer legibleFallbackMediaSelectionCriteria]
  -[AVPlayer setLegibleFallbackMediaSelectionCriteria:]
  -[AVPlayer _overlappedPlaybackWillBeginForItem:withID:]


AVPlayerQueueModificationDescription : NSObject
 @property  long long modificationType
 @property  AVPlayerItem *item
 @property  AVPlayerItem *afterItem

  // class methods
  +[AVPlayerQueueModificationDescription modificationForRemovingItem:]
  +[AVPlayerQueueModificationDescription modificationForInsertingItem:afterItem:]

  // instance methods
  -[AVPlayerQueueModificationDescription modificationType]
  -[AVPlayerQueueModificationDescription afterItem]
  -[AVPlayerQueueModificationDescription dealloc]
  -[AVPlayerQueueModificationDescription initWithModificationType:item:afterItem:]
  -[AVPlayerQueueModificationDescription item]
  -[AVPlayerQueueModificationDescription init]


AVPlayerRateState : NSObject <NSCopying>
 @property  float rate
 @property  BOOL automaticallyWaitsToMinimizeStalling
 @property  BOOL usesLegacyAutomaticWaitingBehavior
 @property  long long timeControlStatus
 @property  NSString *reasonForWaitingToPlay

  // instance methods
  -[AVPlayerRateState rate]
  -[AVPlayerRateState timeControlStatus]
  -[AVPlayerRateState rateStateByInferringTimeControlStatusAndWaitingReasonBasedOnPresenceOfCurrentItem:hasCurrentInterstitialEvent:nameForLogging:]
  -[AVPlayerRateState rateStateByUpdatingBasedOnPresenceOfCurrentInterstitialEvent:nameForLogging:]
  -[AVPlayerRateState initWithAutomaticallyWaitsToMinimizeStalling:usesLegacyAutomaticWaitingBehavior:timeControlStatus:]
  -[AVPlayerRateState rateStateBySettingRate:nameForLogging:]
  -[AVPlayerRateState rateStateBySettingTimeControlStatus:reasonForWaitingToPlay:nameForLogging:]
  -[AVPlayerRateState dealloc]
  -[AVPlayerRateState reasonForWaitingToPlay]
  -[AVPlayerRateState rateStateBySettingAutomaticallyWaitsToMinimizeStalling:]
  -[AVPlayerRateState rateStateByUpdatingBasedOnFigPlayerPlaybackState:hasCurrentInterstitialEvent:nameForLogging:]
  -[AVPlayerRateState automaticallyWaitsToMinimizeStalling]
  -[AVPlayerRateState copyWithZone:]
  -[AVPlayerRateState usesLegacyAutomaticWaitingBehavior]
  -[AVPlayerRateState rateStateByUpdatingBasedOnFigPlayer:hasCurrentItem:hasCurrentInterstitialEvent:nameForLogging:]
  -[AVPlayerRateState rateStateBySettingUsesLegacyAutomaticWaitingBehavior:]


AVPlayerInterstitialEvent : NSObject <NSCopying>
 @property  AVPlayerItem *primaryItem
 @property  NSString *identifier
 @property  {?=qiIq} time
 @property  NSDate *date
 @property  NSArray *templateItems
 @property  unsigned long restrictions
 @property  {?=qiIq} resumptionOffset
 @property  {?=qiIq} playoutLimit
 @property  BOOL alignsStartWithPrimarySegmentBoundary
 @property  BOOL alignsResumptionWithPrimarySegmentBoundary
 @property  NSString *cue
 @property  BOOL willPlayOnce
 @property  NSDictionary *userDefinedAttributes

  // class methods
  +[AVPlayerInterstitialEvent interstitialEventWithPrimaryItem:identifier:time:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:]
  +[AVPlayerInterstitialEvent interstitialEventWithPrimaryItem:identifier:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:]
  +[AVPlayerInterstitialEvent interstitialEventWithPrimaryItem:templateItems:figEvent:]
  +[AVPlayerInterstitialEvent newItemArrayWithCopiedItems:]
  +[AVPlayerInterstitialEvent interstitialEventWithPrimaryItem:time:]
  +[AVPlayerInterstitialEvent interstitialEventWithPrimaryItem:date:]

  // instance methods
  -[AVPlayerInterstitialEvent identifier]
  -[AVPlayerInterstitialEvent time]
  -[AVPlayerInterstitialEvent dealloc]
  -[AVPlayerInterstitialEvent setDate:]
  -[AVPlayerInterstitialEvent date]
  -[AVPlayerInterstitialEvent setTime:]
  -[AVPlayerInterstitialEvent validate:]
  -[AVPlayerInterstitialEvent .cxx_destruct]
  -[AVPlayerInterstitialEvent setIdentifier:]
  -[AVPlayerInterstitialEvent copyWithZone:]
  -[AVPlayerInterstitialEvent isEqual:]
  -[AVPlayerInterstitialEvent primaryItem]
  -[AVPlayerInterstitialEvent restrictions]
  -[AVPlayerInterstitialEvent setRestrictions:]
  -[AVPlayerInterstitialEvent assetURLsReturningError:]
  -[AVPlayerInterstitialEvent initWithPrimaryItem:identifier:time:date:templateItems:restrictions:resumptionOffset:playoutLimit:userDefinedAttributes:]
  -[AVPlayerInterstitialEvent initWithPrimaryItem:time:date:]
  -[AVPlayerInterstitialEvent initWithPrimaryItemAndFigEvent:templateItems:figEvent:]
  -[AVPlayerInterstitialEvent setImmutable]
  -[AVPlayerInterstitialEvent checkMutability]
  -[AVPlayerInterstitialEvent setPrimaryItem:]
  -[AVPlayerInterstitialEvent templateItems]
  -[AVPlayerInterstitialEvent setTemplateItems:]
  -[AVPlayerInterstitialEvent resumptionOffset]
  -[AVPlayerInterstitialEvent setResumptionOffset:]
  -[AVPlayerInterstitialEvent playoutLimit]
  -[AVPlayerInterstitialEvent setPlayoutLimit:]
  -[AVPlayerInterstitialEvent alignsStartWithPrimarySegmentBoundary]
  -[AVPlayerInterstitialEvent setAlignsStartWithPrimarySegmentBoundary:]
  -[AVPlayerInterstitialEvent alignsResumptionWithPrimarySegmentBoundary]
  -[AVPlayerInterstitialEvent setAlignsResumptionWithPrimarySegmentBoundary:]
  -[AVPlayerInterstitialEvent cue]
  -[AVPlayerInterstitialEvent setCue:]
  -[AVPlayerInterstitialEvent willPlayOnce]
  -[AVPlayerInterstitialEvent setWillPlayOnce:]
  -[AVPlayerInterstitialEvent userDefinedAttributes]
  -[AVPlayerInterstitialEvent setUserDefinedAttributes:]
  -[AVPlayerInterstitialEvent figEvent]


AVPlayerInterstitialEventMonitor : NSObject
 @property  AVPlayer *primaryPlayer
 @property  AVQueuePlayer *interstitialPlayer
 @property  NSArray *events
 @property  AVPlayerInterstitialEvent *currentEvent

  // class methods
  +[AVPlayerInterstitialEventMonitor interstitialEventMonitorWithPrimaryPlayer:]

  // instance methods
  -[AVPlayerInterstitialEventMonitor events]
  -[AVPlayerInterstitialEventMonitor makeCopyOf:immutable:]
  -[AVPlayerInterstitialEventMonitor dealloc]
  -[AVPlayerInterstitialEventMonitor _removeMonitorListeners]
  -[AVPlayerInterstitialEventMonitor .cxx_destruct]
  -[AVPlayerInterstitialEventMonitor interstitialPlayer]
  -[AVPlayerInterstitialEventMonitor currentEvent]
  -[AVPlayerInterstitialEventMonitor primaryPlayer]
  -[AVPlayerInterstitialEventMonitor initWithPrimaryPlayer:]
  -[AVPlayerInterstitialEventMonitor init]
  -[AVPlayerInterstitialEventMonitor _addMonitorListeners:]


AVPlayerInterstitialEventController : AVPlayerInterstitialEventMonitor
 @property  NSArray *events

  // class methods
  +[AVPlayerInterstitialEventController interstitialEventControllerWithPrimaryPlayer:]

  // instance methods
  -[AVPlayerInterstitialEventController cancelCurrentEventWithResumptionOffset:]
  -[AVPlayerInterstitialEventController dealloc]
  -[AVPlayerInterstitialEventController setEvents:]
  -[AVPlayerInterstitialEventController initWithPrimaryPlayer:]


AVOutputContextLocalOutputDeviceGroupImpl : NSObject <AVOutputDeviceGroupImpl>
 @property  AVOutputDeviceGroup *parentOutputDeviceGroup
 @property  BOOL receivesLongFormAudioFromLocalDevice
 @property  NSArray *outputDevices
 @property  AVOutputDevice *groupLeader
 @property  float volume
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVOutputContextLocalOutputDeviceGroupImpl groupLeader]
  -[AVOutputContextLocalOutputDeviceGroupImpl initWithOutputContext:]
  -[AVOutputContextLocalOutputDeviceGroupImpl dealloc]
  -[AVOutputContextLocalOutputDeviceGroupImpl outputDevices]
  -[AVOutputContextLocalOutputDeviceGroupImpl .cxx_destruct]
  -[AVOutputContextLocalOutputDeviceGroupImpl setVolume:]
  -[AVOutputContextLocalOutputDeviceGroupImpl volume]
  -[AVOutputContextLocalOutputDeviceGroupImpl volumeControlType]
  -[AVOutputContextLocalOutputDeviceGroupImpl addOutputDevice:withOptions:completionHandler:]
  -[AVOutputContextLocalOutputDeviceGroupImpl removeOutputDevice:withOptions:completionhandler:]
  -[AVOutputContextLocalOutputDeviceGroupImpl parentOutputDeviceGroup]
  -[AVOutputContextLocalOutputDeviceGroupImpl setParentOutputDeviceGroup:]
  -[AVOutputContextLocalOutputDeviceGroupImpl receivesLongFormAudioFromLocalDevice]
  -[AVOutputContextLocalOutputDeviceGroupImpl _contextOutputDevicesDidChange:]
  -[AVOutputContextLocalOutputDeviceGroupImpl _contextVolumeDidChange]
  -[AVOutputContextLocalOutputDeviceGroupImpl _contextCanSetVolumeDidChange]


AVPlayerItemInternal : NSObject

AVPlayerItem : NSObject <NSCopying>
 @property  BOOL authorizationRequiredForPlayback
 @property  BOOL applicationAuthorizedForPlayback
 @property  BOOL contentAuthorizedForPlayback
 @property  BOOL _externalProtectionRequiredForPlayback
 @property  BOOL _rental
 @property  NSDate *_rentalStartDate
 @property  NSDate *_rentalExpirationDate
 @property  BOOL _rentalPlaybackStarted
 @property  NSDate *_rentalPlaybackStartedDate
 @property  NSDate *_rentalPlaybackExpirationDate
 @property  NSArray *outputs
 @property  NSArray *mediaDataCollectors
 @property  NSString *serviceIdentifier
 @property  <NSObject><NSCopying> *AVKitData
 @property  BOOL playHapticTracks
 @property  BOOL automaticallyHandlesInterstitialEvents
 @property  AVPlayerItem *templatePlayerItem
 @property  long long status
 @property  NSError *error

  // class methods
  +[AVPlayerItem _copyTimebaseFromFigPlaybackItem:]
  +[AVPlayerItem automaticallyNotifiesObserversOfHasEnabledVideo]
  +[AVPlayerItem playerItemWithAsset:]
  +[AVPlayerItem automaticallyNotifiesObserversOfHasEnabledAudio]
  +[AVPlayerItem _forNonStreamingURLsFireKVOForAssetWhenReadyForInspection]
  +[AVPlayerItem _forStreamingItemsVendAssetWithFigPlaybackItem]
  +[AVPlayerItem playerItemWithAsset:automaticallyLoadedAssetKeys:]
  +[AVPlayerItem automaticallyNotifiesObserversOfAllowProgressiveResume]
  +[AVPlayerItem automaticallyNotifiesObserversOfSavesDownloadedDataToDiskWhenDone]
  +[AVPlayerItem automaticallyNotifiesObserversOfAsset]
  +[AVPlayerItem initialize]
  +[AVPlayerItem _initializeProtectedContentPlaybackSupportSessionAsynchronouslyForProvider:withOptions:]
  +[AVPlayerItem automaticallyNotifiesObserversOfTracks]
  +[AVPlayerItem _createFigPlaybackItemForFigPlayer:asset:URL:flags:options:playbackItem:]
  +[AVPlayerItem automaticallyNotifiesObserversOfUsesMinimalLatencyForVideoCompositionRendering]
  +[AVPlayerItem automaticallyNotifiesObserversOfPlaybackLikelyToKeepUp]
  +[AVPlayerItem automaticallyNotifiesObserversOfAllowProgressiveStartup]
  +[AVPlayerItem automaticallyNotifiesObserversOfSeekableTimeRanges]
  +[AVPlayerItem automaticallyNotifiesObserversOfNetworkUsuallyExceedsMaxBitRate]
  +[AVPlayerItem playerItemWithURL:]
  +[AVPlayerItem automaticallyNotifiesObserversOfPresentationSize]
  +[AVPlayerItem automaticallyNotifiesObserversOfAllowProgressiveSwitchUp]
  +[AVPlayerItem _hasOverrideForSelector:]
  +[AVPlayerItem automaticallyNotifiesObserversOfPlaybackBufferEmpty]
  +[AVPlayerItem automaticallyNotifiesObserversOfPlaybackBufferFull]
  +[AVPlayerItem automaticallyNotifiesObserversOfStatus]
  +[AVPlayerItem automaticallyNotifiesObserversOfLoadedTimeRanges]
  +[AVPlayerItem automaticallyNotifiesObserversOfVariantIndex]
  +[AVPlayerItem _uninitializeProtectedContentPlaybackSupportSession:]

  // instance methods
  -[AVPlayerItem currentTime]
  -[AVPlayerItem initWithAsset:]
  -[AVPlayerItem addObserver:forKeyPath:options:context:]
  -[AVPlayerItem hasEnabledAudio]
  -[AVPlayerItem _duration]
  -[AVPlayerItem mediaKind]
  -[AVPlayerItem setMediaKind:]
  -[AVPlayerItem valueForUndefinedKey:]
  -[AVPlayerItem loudnessInfo]
  -[AVPlayerItem setServiceIdentifier:]
  -[AVPlayerItem serviceIdentifier]
  -[AVPlayerItem initWithURL:]
  -[AVPlayerItem setAudioTimePitchAlgorithm:]
  -[AVPlayerItem setDelegate:]
  -[AVPlayerItem copy]
  -[AVPlayerItem currentDate]
  -[AVPlayerItem delegate]
  -[AVPlayerItem error]
  -[AVPlayerItem canUseNetworkResourcesForLiveStreamingWhilePaused]
  -[AVPlayerItem status]
  -[AVPlayerItem dealloc]
  -[AVPlayerItem _removeFPListeners]
  -[AVPlayerItem seekableTimeRanges]
  -[AVPlayerItem setReversePlaybackEndTime:]
  -[AVPlayerItem seekToTime:]
  -[AVPlayerItem loadedTimeRanges]
  -[AVPlayerItem setCanUseNetworkResourcesForLiveStreamingWhilePaused:]
  -[AVPlayerItem hasVideo]
  -[AVPlayerItem forwardPlaybackEndTime]
  -[AVPlayerItem seekToTime:toleranceBefore:toleranceAfter:]
  -[AVPlayerItem _setAsset:]
  -[AVPlayerItem selectMediaOption:inMediaSelectionGroup:]
  -[AVPlayerItem duration]
  -[AVPlayerItem reversePlaybackEndTime]
  -[AVPlayerItem asset]
  -[AVPlayerItem presentationSize]
  -[AVPlayerItem setForwardPlaybackEndTime:]
  -[AVPlayerItem selectedMediaOptionInMediaSelectionGroup:]
  -[AVPlayerItem outputs]
  -[AVPlayerItem audioTimePitchAlgorithm]
  -[AVPlayerItem _weakReference]
  -[AVPlayerItem tracks]
  -[AVPlayerItem copyWithZone:]
  -[AVPlayerItem setAudioMix:]
  -[AVPlayerItem _addFPListeners]
  -[AVPlayerItem hasEnabledVideo]
  -[AVPlayerItem audioMix]
  -[AVPlayerItem addOutput:]
  -[AVPlayerItem _attachToPlayer:]
  -[AVPlayerItem init]
  -[AVPlayerItem removeOutput:]
  -[AVPlayerItem setLoudnessInfo:]
  -[AVPlayerItem _URL]
  -[AVPlayerItem _fileSize]
  -[AVPlayerItem _loadedTimeRanges]
  -[AVPlayerItem _player]
  -[AVPlayerItem _previousItem]
  -[AVPlayerItem _nextItem]
  -[AVPlayerItem restrictions]
  -[AVPlayerItem setRestrictions:]
  -[AVPlayerItem initWithAsset:automaticallyLoadedAssetKeys:]
  -[AVPlayerItem seekToTime:toleranceBefore:toleranceAfter:completionHandler:]
  -[AVPlayerItem setPlayHapticTracks:]
  -[AVPlayerItem _presentationSize]
  -[AVPlayerItem _changeStatusToFailedWithError:]
  -[AVPlayerItem _nameForLogging]
  -[AVPlayerItem _tracks]
  -[AVPlayerItem videoComposition]
  -[AVPlayerItem setVideoComposition:]
  -[AVPlayerItem customVideoCompositor]
  -[AVPlayerItem _playerChangeStatusToFailedWithError:]
  -[AVPlayerItem currentUnfoldedTime]
  -[AVPlayerItem seekToDate:]
  -[AVPlayerItem seekToDate:completionHandler:]
  -[AVPlayerItem seekToTime:completionHandler:]
  -[AVPlayerItem _fpNotificationNames]
  -[AVPlayerItem _setEQPreset:]
  -[AVPlayerItem automaticallyLoadedAssetKeys]
  -[AVPlayerItem timeToPauseBuffering]
  -[AVPlayerItem timeToPausePlayback]
  -[AVPlayerItem advanceTimeForOverlappedPlayback]
  -[AVPlayerItem advanceTimeForOverlappedPlaybackWasSet]
  -[AVPlayerItem maximumTimePlayedToDuringOverlappedPlayback]
  -[AVPlayerItem snapTimeToPausePlayback]
  -[AVPlayerItem configuredTimeOffsetFromLive]
  -[AVPlayerItem recommendedTimeOffsetFromLive]
  -[AVPlayerItem seekingWaitsForVideoCompositionRendering]
  -[AVPlayerItem textStyleRules]
  -[AVPlayerItem textHighlightArray]
  -[AVPlayerItem maximumForwardBufferDuration]
  -[AVPlayerItem maximumTrailingBufferDuration]
  -[AVPlayerItem preferredPeakBitRate]
  -[AVPlayerItem preferredPeakBitRateForExpensiveNetworks]
  -[AVPlayerItem startsOnFirstEligibleVariant]
  -[AVPlayerItem RTCReportingFlags]
  -[AVPlayerItem gaplessInfo]
  -[AVPlayerItem soundCheckVolumeNormalization]
  -[AVPlayerItem volumeAdjustment]
  -[AVPlayerItem reversesMoreVideoFramesInMemory]
  -[AVPlayerItem reversesMoreVideoFramesInMemoryWasSet]
  -[AVPlayerItem aggressivelyCachesVideoFrames]
  -[AVPlayerItem aggressivelyCachesVideoFramesWasSet]
  -[AVPlayerItem decodesAllFramesDuringOrdinaryPlayback]
  -[AVPlayerItem decodesAllFramesDuringOrdinaryPlaybackWasSet]
  -[AVPlayerItem usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet]
  -[AVPlayerItem usesIFrameOnlyPlaybackForHighRateScaledEdits]
  -[AVPlayerItem minimumIntervalForIFrameOnlyPlayback]
  -[AVPlayerItem minimumIntervalForIFrameOnlyPlaybackWasSet]
  -[AVPlayerItem speedThresholdForIFrameOnlyPlayback]
  -[AVPlayerItem speedThresholdForIFrameOnlyPlaybackWasSet]
  -[AVPlayerItem refreshesClosedCaptionsImmediatelyAfterSeeking]
  -[AVPlayerItem initialDate]
  -[AVPlayerItem initialEstimatedDate]
  -[AVPlayerItem requiresAccessLog]
  -[AVPlayerItem suppressesAudioOnlyVariants]
  -[AVPlayerItem prefersOfflinePlayableVariants]
  -[AVPlayerItem autoSwitchAtmosStreamVariants]
  -[AVPlayerItem variantPreferences]
  -[AVPlayerItem preferredMaximumAudioSampleRate]
  -[AVPlayerItem imageQueueInterpolationCurve]
  -[AVPlayerItem imageQueueInterpolationCurveWasSet]
  -[AVPlayerItem blendsVideoFrames]
  -[AVPlayerItem blendsVideoFramesWasSet]
  -[AVPlayerItem appliesPerFrameHDRDisplayMetadata]
  -[AVPlayerItem appliesPerFrameHDRDisplayMetadataWasSet]
  -[AVPlayerItem videoApertureMode]
  -[AVPlayerItem usesMinimalLatencyForVideoCompositionRendering]
  -[AVPlayerItem savesDownloadedDataToDiskWhenDone]
  -[AVPlayerItem networkUsuallyExceedsMaxBitRate]
  -[AVPlayerItem allowProgressiveSwitchUp]
  -[AVPlayerItem allowProgressiveStartup]
  -[AVPlayerItem allowProgressiveResume]
  -[AVPlayerItem IFramePrefetchTargetDimensions]
  -[AVPlayerItem AVKitData]
  -[AVPlayerItem playHapticTracks]
  -[AVPlayerItem preferredMaximumResolution]
  -[AVPlayerItem preferredMaximumResolutionForExpensiveNetworks]
  -[AVPlayerItem preferredMinimumResolution]
  -[AVPlayerItem canPlayFastForward]
  -[AVPlayerItem canPlayFastReverse]
  -[AVPlayerItem canPlayReverse]
  -[AVPlayerItem canPlaySlowReverse]
  -[AVPlayerItem canPlaySlowForward]
  -[AVPlayerItem canStepForward]
  -[AVPlayerItem canStepBackward]
  -[AVPlayerItem restrictsAutomaticMediaSelectionToAvailableOfflineOptions]
  -[AVPlayerItem automaticallyHandlesInterstitialEvents]
  -[AVPlayerItem seekableTimeRangesLastModifiedTime]
  -[AVPlayerItem loopTimeRange]
  -[AVPlayerItem currentMediaSelection]
  -[AVPlayerItem videoEnhancementMode]
  -[AVPlayerItem isRenderingSpatialAudio]
  -[AVPlayerItem currentStableVariantID]
  -[AVPlayerItem timedMetadata]
  -[AVPlayerItem audioSpatializationAllowedWasSet]
  -[AVPlayerItem allowedAudioSpatializationFormats]
  -[AVPlayerItem allowedAudioSpatializationFormatsWasSet]
  -[AVPlayerItem copyWithZone:newAssetOptions:]
  -[AVPlayerItem _timeJumpedNotificationIncludesExtendedDiagnosticPayload]
  -[AVPlayerItem _setTimeJumpedNotificationIncludesExtendedDiagnosticPayload:]
  -[AVPlayerItem _copyStateDispatchQueue]
  -[AVPlayerItem _copyFigPlaybackItem]
  -[AVPlayerItem _copyFigPlaybackItemLocked:]
  -[AVPlayerItem _getCachedPresentationSize:]
  -[AVPlayerItem _getCachedNonForcedSubtitleEnabled:]
  -[AVPlayerItem _configurePlaybackItemAndReturnError:]
  -[AVPlayerItem _playerConnection]
  -[AVPlayerItem _attachToFigPlayer]
  -[AVPlayerItem _addToPlayQueueOfFigPlayerOfPlayer:afterFigPlaybackItemOfItem:]
  -[AVPlayerItem _removeFromPlayQueueOfFigPlayerOfAttachedPlayer]
  -[AVPlayerItem _insertAfterItem:]
  -[AVPlayerItem _removeFromItems]
  -[AVPlayerItem presentationSizePublisher]
  -[AVPlayerItem tracksPublisher]
  -[AVPlayerItem nonForcedSubtitleDisplayEnabledPublisher]
  -[AVPlayerItem _propertyListForMediaSelection:forGroup:]
  -[AVPlayerItem _setURL:]
  -[AVPlayerItem _ensureAssetWithFigPlaybackItemWithTrackIDs:]
  -[AVPlayerItem _markAsNeedingNewAssetWithFigPlaybackItem]
  -[AVPlayerItem _setAssetToAssetWithFigPlaybackItemIfAppropriate]
  -[AVPlayerItem _markAssetWithFigPlaybackItemAsNeedingNewTracks]
  -[AVPlayerItem _kickAssetObserversIfAppropriate]
  -[AVPlayerItem _informObserversAboutAvailabilityOfTracks:]
  -[AVPlayerItem _informObserversAboutAvailabilityOfPresentationSize]
  -[AVPlayerItem _informObserversAboutAvailabilityOfDuration:]
  -[AVPlayerItem _informObserversAboutAvailabilityOfCurrentMediaSelection]
  -[AVPlayerItem _isReadyForInspectionOfDuration]
  -[AVPlayerItem _markAsReadyForInspectionOfDuration]
  -[AVPlayerItem _tracksWithFPTrackIDArray:fromFigPlaybackItem:]
  -[AVPlayerItem _cachedTracks]
  -[AVPlayerItem _tracksFromAssetTrackIDs]
  -[AVPlayerItem _isReadyForInspectionOfTracks]
  -[AVPlayerItem _markAsReadyForInspectionOfTracks]
  -[AVPlayerItem _trackWithTrackID:]
  -[AVPlayerItem _enabledTrackFormatDescriptions]
  -[AVPlayerItem _addFAListeners]
  -[AVPlayerItem _removeFAListeners]
  -[AVPlayerItem _addFoldedTBListeners]
  -[AVPlayerItem _removeFoldedTBListeners]
  -[AVPlayerItem _respondToBecomingReadyForBasicInspection]
  -[AVPlayerItem _isReadyForBasicInspection]
  -[AVPlayerItem _markAsReadyForBasicInspection]
  -[AVPlayerItem _respondToBecomingReadyForBasicInspectionWithDuration:]
  -[AVPlayerItem _invokeReadyForEnqueueingHandlers]
  -[AVPlayerItem _makeReadyForEnqueueingWithCompletionHandler:]
  -[AVPlayerItem _canPlayFastForward]
  -[AVPlayerItem _canPlayFastReverse]
  -[AVPlayerItem _isAFileBasedItemThatsReadyToPlay]
  -[AVPlayerItem _canPlayReverse]
  -[AVPlayerItem _canStepForward]
  -[AVPlayerItem _canStepBackward]
  -[AVPlayerItem automaticallyPreservesTimeOffsetFromLive]
  -[AVPlayerItem _updatePreservesTimeOffsetFromLive]
  -[AVPlayerItem setAutomaticallyPreservesTimeOffsetFromLive:]
  -[AVPlayerItem _configuredTimeOffsetFromLive]
  -[AVPlayerItem _updateConfiguredTimeOffsetFromLiveOnFigPlaybackItem]
  -[AVPlayerItem setConfiguredTimeOffsetFromLive:]
  -[AVPlayerItem _isReadyForInspectionOfRecommendedTimeOffsetFromLive]
  -[AVPlayerItem _markAsReadyForInspectionOfRecommendedTimeOffsetFromLive]
  -[AVPlayerItem _recommendedTimeOffsetFromLive]
  -[AVPlayerItem _isReadyForInspectionOfPresentationSize]
  -[AVPlayerItem _markAsReadyForInspectionOfPresentationSize]
  -[AVPlayerItem _currentTimeWithOptionalFoldedTimebase:]
  -[AVPlayerItem makeSeekID]
  -[AVPlayerItem _CreateSeekID]
  -[AVPlayerItem _cancelPendingSeekAndRegisterSeekID:withCompletionHandler:]
  -[AVPlayerItem _unregisterInvokeAndReleasePendingSeekCompletionHandlerForSeekID:finished:]
  -[AVPlayerItem _postSeekCompletionNotificationWithSeekID:andResult:]
  -[AVPlayerItem seekToTime:toleranceBefore:toleranceAfter:seekID:]
  -[AVPlayerItem _seekToTime:toleranceBefore:toleranceAfter:seekID:completionHandler:]
  -[AVPlayerItem cancelPendingSeeks]
  -[AVPlayerItem setInitialDate:]
  -[AVPlayerItem currentEstimatedDate]
  -[AVPlayerItem setInitialEstimatedDate:]
  -[AVPlayerItem stepByCount:]
  -[AVPlayerItem _updateForwardPlaybackEndTimeOnFigPlaybackItem]
  -[AVPlayerItem _updateReversePlaybackEndTimeOnFigPlaybackItem]
  -[AVPlayerItem _timeToPauseBuffering]
  -[AVPlayerItem _updateTimeToPauseBufferingOnFigPlaybackItem]
  -[AVPlayerItem setTimeToPauseBuffering:]
  -[AVPlayerItem _timeToPausePlayback]
  -[AVPlayerItem _updateTimeToPausePlaybackOnFigPlaybackItem]
  -[AVPlayerItem setTimeToPausePlayback:]
  -[AVPlayerItem _snapTimeToPausePlayback]
  -[AVPlayerItem _updateSnapTimeToPausePlaybackOnFigPlaybackItem]
  -[AVPlayerItem setSnapTimeToPausePlayback:]
  -[AVPlayerItem _updateImageQueueInterpolationCurveOnFigPlaybackItem]
  -[AVPlayerItem setImageQueueInterpolationCurve:]
  -[AVPlayerItem _updateBlendsVideoFramesOnFigPlaybackItem]
  -[AVPlayerItem setBlendsVideoFrames:]
  -[AVPlayerItem _updateAppliesPerFrameHDRDisplayMetadataOnFigPlaybackItem]
  -[AVPlayerItem setAppliesPerFrameHDRDisplayMetadata:]
  -[AVPlayerItem _updateReversesMoreVideoFramesInMemoryOnFigPlaybackItem]
  -[AVPlayerItem setReversesMoreVideoFramesInMemory:]
  -[AVPlayerItem _updateAggressivelyCachesVideoFramesOnFigPlaybackItem]
  -[AVPlayerItem setAggressivelyCachesVideoFrames:]
  -[AVPlayerItem _updateDecodesAllFramesDuringOrdinaryPlaybackOnFigPlaybackItem]
  -[AVPlayerItem setDecodesAllFramesDuringOrdinaryPlayback:]
  -[AVPlayerItem _copyFoldedTimebase]
  -[AVPlayerItem _copyProxyUnfoldedTimebase]
  -[AVPlayerItem _copyProxyFoldedTimebase]
  -[AVPlayerItem _copyProxyTimebase]
  -[AVPlayerItem _copyUnfoldedFigTimebase]
  -[AVPlayerItem unfoldedTimebase]
  -[AVPlayerItem timebase]
  -[AVPlayerItem _updateTimebase]
  -[AVPlayerItem _updateRTCReportingFlagsOnFigPlaybackItem]
  -[AVPlayerItem setRTCReportingFlags:]
  -[AVPlayerItem limitReadAhead]
  -[AVPlayerItem _updateLimitReadAheadOnFigPlaybackItem]
  -[AVPlayerItem setLimitReadAhead:]
  -[AVPlayerItem allowsExtendedReadAhead]
  -[AVPlayerItem setAllowsExtendedReadAhead:]
  -[AVPlayerItem preferredForwardBufferDuration]
  -[AVPlayerItem setPreferredForwardBufferDuration:]
  -[AVPlayerItem _updateMaximumTrailingBufferDurationOnFigPlaybackItem]
  -[AVPlayerItem setMaximumTrailingBufferDuration:]
  -[AVPlayerItem _updateMaximumForwardBufferDurationOnFigPlaybackItem]
  -[AVPlayerItem setMaximumForwardBufferDuration:]
  -[AVPlayerItem alwaysMonitorsPlayability]
  -[AVPlayerItem _updateAlwaysMonitorsPlayabilityOnFigPlaybackItem]
  -[AVPlayerItem setAlwaysMonitorsPlayability:]
  -[AVPlayerItem playbackLikelyToKeepUpTrigger]
  -[AVPlayerItem _updatePlaybackLikelyToKeepUpTriggerOnFigPlaybackItem]
  -[AVPlayerItem setPlaybackLikelyToKeepUpTrigger:]
  -[AVPlayerItem willNeverSeekBackwardsHint]
  -[AVPlayerItem _updateWillNeverSeekBackwardsHintOnFigPlaybackItem]
  -[AVPlayerItem setWillNeverSeekBackwardsHint:]
  -[AVPlayerItem setSavesDownloadedDataToDiskWhenDone:]
  -[AVPlayerItem continuesPlayingDuringPrerollForSeek]
  -[AVPlayerItem _updateContinuesPlayingDuringPrerollForSeekOnFigPlaybackItem]
  -[AVPlayerItem setContinuesPlayingDuringPrerollForSeek:]
  -[AVPlayerItem continuesPlayingDuringPrerollForRateChange]
  -[AVPlayerItem _updateContinuesPlayingDuringPrerollForRateChangeOnFigPlaybackItem]
  -[AVPlayerItem setContinuesPlayingDuringPrerollForRateChange:]
  -[AVPlayerItem _updateUsesIFrameOnlyPlaybackForHighRateScaledEditsOnFigPlaybackItem]
  -[AVPlayerItem setUsesIFrameOnlyPlaybackForHighRateScaledEdits:]
  -[AVPlayerItem _updateMinimumIntervalForIFrameOnlyPlaybackOnFigPlaybackItem]
  -[AVPlayerItem setMinimumIntervalForIFrameOnlyPlayback:]
  -[AVPlayerItem _updateSpeedThresholdForIFrameOnlyPlaybackOnFigPlaybackItem]
  -[AVPlayerItem setSpeedThresholdForIFrameOnlyPlayback:]
  -[AVPlayerItem _updateRefreshesClosedCaptionsImmediatelyAfterSeekingOnFigPlaybackItem]
  -[AVPlayerItem setRefreshesClosedCaptionsImmediatelyAfterSeeking:]
  -[AVPlayerItem _setAudioCurvesAccordingToInputParameters:forTrackID:]
  -[AVPlayerItem _setAudioTapProcessor:forTrackID:]
  -[AVPlayerItem _setAudioTimePitchAlgorithm:forTrackID:]
  -[AVPlayerItem _setAudioEffectParameters:forTrackID:]
  -[AVPlayerItem _applyCurrentAudioMix]
  -[AVPlayerItem _getVideoComposition:customVideoCompositorSession:figVideoCompositor:]
  -[AVPlayerItem _applyCurrentVideoComposition]
  -[AVPlayerItem _setVideoCompositionFrameDuration:]
  -[AVPlayerItem _setVideoCompositionSourceTrackIDForFrameTiming:]
  -[AVPlayerItem _setVideoCompositionRenderSize:]
  -[AVPlayerItem _setVideoCompositionRenderScale:]
  -[AVPlayerItem _setVideoCompositionColorPrimaries:]
  -[AVPlayerItem _setVideoCompositionColorYCbCrMatrix:]
  -[AVPlayerItem _setVideoCompositionColorTransferFunction:]
  -[AVPlayerItem _setVideoCompositionInstructions:]
  -[AVPlayerItem _setVideoCompositionSourceSampleDataTrackIDs:]
  -[AVPlayerItem _setVideoCompositor:]
  -[AVPlayerItem _updateSeekingWaitsForVideoCompositionRenderingOnFigPlaybackItem]
  -[AVPlayerItem setSeekingWaitsForVideoCompositionRendering:]
  -[AVPlayerItem _updateUsesMinimalLatencyForVideoCompositionRenderingOnFigPlaybackItem]
  -[AVPlayerItem _updateRestrictsAutomaticMediaSelectionToAvailableOfflineOptions]
  -[AVPlayerItem setUsesMinimalLatencyForVideoCompositionRendering:]
  -[AVPlayerItem _updateTextStyleRulesOnFigPlaybackItem]
  -[AVPlayerItem _updateTextHighlightArrayOnFigPlaybackItem]
  -[AVPlayerItem setTextStyleRules:]
  -[AVPlayerItem setTextHighlightArray:]
  -[AVPlayerItem _updateFigTimePitchAlgorithmOnFigPlaybackItem]
  -[AVPlayerItem isPlaybackLikelyToKeepUp]
  -[AVPlayerItem isPlaybackBufferFull]
  -[AVPlayerItem isPlaybackBufferEmpty]
  -[AVPlayerItem progressTowardsPlaybackLikelyToKeepUp]
  -[AVPlayerItem _updateCanUseNetworkResourcesForLiveStreamingWhilePausedOnFigPlaybackItem]
  -[AVPlayerItem _updateStartsOnFirstEligibleVariantOnFigPlaybackItem]
  -[AVPlayerItem setStartsOnFirstEligibleVariant:]
  -[AVPlayerItem playabilityMetrics]
  -[AVPlayerItem _seekableTimeRangesFromFPSeekableTimeIntervals:]
  -[AVPlayerItem _updateLoopTimeRangeOnFigPlaybackItem]
  -[AVPlayerItem setLoopTimeRange:]
  -[AVPlayerItem _seekableTimeRanges]
  -[AVPlayerItem _loadedTimeRangesFromFPPlaybableTimeIntervals:]
  -[AVPlayerItem _playbackProperties]
  -[AVPlayerItem _updatePlaybackPropertiesOnFigPlaybackItem]
  -[AVPlayerItem setGaplessInfo:]
  -[AVPlayerItem configurationGroup]
  -[AVPlayerItem variantIndex]
  -[AVPlayerItem liveUpdateInterval]
  -[AVPlayerItem _quietlySetVariantIndex:]
  -[AVPlayerItem setVariantIndex:]
  -[AVPlayerItem _updateSoundCheckVolumeNormalizationOnFigPlaybackItem]
  -[AVPlayerItem setSoundCheckVolumeNormalization:]
  -[AVPlayerItem _updateVolumeAdjustmentOnFigPlaybackItem]
  -[AVPlayerItem setVolumeAdjustment:]
  -[AVPlayerItem _mediaOptionsSelectedByClient]
  -[AVPlayerItem _mediaOptionsSelectedByClientForKey:]
  -[AVPlayerItem _setMediaOptionsSelectedByClient:forKey:]
  -[AVPlayerItem _removeMediaOptionsSelectedByClient]
  -[AVPlayerItem _isFigAssetReadyForInspectionOfMediaSelectionOptionsAndFigPlaybackItemIsReadyForInspection]
  -[AVPlayerItem _isFigAssetReadyForInspectionOfMediaSelectionOptions]
  -[AVPlayerItem _markFigAssetAsReadyForInspectionOfMediaSelectionOptions]
  -[AVPlayerItem _applyMediaSelectionOptions]
  -[AVPlayerItem _cacheMediaSelectionOption:forMediaSelectionGroup:]
  -[AVPlayerItem _clearCachedMediaSelectionGroup:]
  -[AVPlayerItem _hasSelectionInCachedMediaSelectionGroup:]
  -[AVPlayerItem _propertyListForSelectedMediaOptionUsingFigSelectedMediaArrayObtainedFromGroup:]
  -[AVPlayerItem _selectMediaOption:inMediaSelectionGroup:]
  -[AVPlayerItem selectMediaOptionAutomaticallyInMediaSelectionGroup:]
  -[AVPlayerItem playerAppliesAutomaticMediaSelectionToGroup:]
  -[AVPlayerItem _figSelectedMediaArray]
  -[AVPlayerItem _currentMediaSelectionFromFigSelectedMediaArray:]
  -[AVPlayerItem _setCurrentMediaSelection:]
  -[AVPlayerItem setRestrictsAutomaticMediaSelectionToAvailableOfflineOptions:]
  -[AVPlayerItem _updateNonForcedSubtitleDisplayEnabledOnFigPlaybackItem]
  -[AVPlayerItem _isNonForcedSubtitleDisplayEnabled]
  -[AVPlayerItem isNonForcedSubtitleDisplayEnabled]
  -[AVPlayerItem setNonForcedSubtitleDisplayEnabled:]
  -[AVPlayerItem _copyFigCPEProtector]
  -[AVPlayerItem _setTimedMetadata:]
  -[AVPlayerItem _setSyncLayersOnFigPlaybackItem]
  -[AVPlayerItem _removeSyncLayer:]
  -[AVPlayerItem _addSyncLayer:]
  -[AVPlayerItem _playbackItemNotificationPayloadToError:]
  -[AVPlayerItem _hasEnabledVideo]
  -[AVPlayerItem _hasEnabledAudio]
  -[AVPlayerItem _suppressionForOutputs:]
  -[AVPlayerItem _suppressesVideoLayers]
  -[AVPlayerItem _setSuppressesVideoLayers:]
  -[AVPlayerItem _updateVideoSuppressionOnFigPlaybackItem:basedOnOutputs:]
  -[AVPlayerItem _updateLegibleSuppressionOnFigPlaybackItem:basedOnOutputs:]
  -[AVPlayerItem _hasEnqueuedVideoFrame]
  -[AVPlayerItem setNetworkUsuallyExceedsMaxBitRate:]
  -[AVPlayerItem setAllowProgressiveSwitchUp:]
  -[AVPlayerItem setAllowProgressiveStartup:]
  -[AVPlayerItem setAllowProgressiveResume:]
  -[AVPlayerItem _updateIFramePrefetchTargetDimensionsOnFigPlaybackItem]
  -[AVPlayerItem setIFramePrefetchTargetDimensions:]
  -[AVPlayerItem _updatePreferredPeakBitRateOnFigPlaybackItem]
  -[AVPlayerItem setPreferredPeakBitRate:]
  -[AVPlayerItem _updatePreferredPeakBitRateForExpensiveNetworksOnFigPlaybackItem]
  -[AVPlayerItem setPreferredPeakBitRateForExpensiveNetworks:]
  -[AVPlayerItem maximumBitRate]
  -[AVPlayerItem setMaximumBitRate:]
  -[AVPlayerItem preferredPeakPresentationSize]
  -[AVPlayerItem setPreferredPeakPresentationSize:]
  -[AVPlayerItem _updatePreferredMaximumResolutionOnFigPlaybackItem]
  -[AVPlayerItem setPreferredMaximumResolution:]
  -[AVPlayerItem _updatePreferredMaximumResolutionForExpensiveNetworksOnFigPlaybackItem]
  -[AVPlayerItem setPreferredMaximumResolutionForExpensiveNetworks:]
  -[AVPlayerItem _updatePreferredMinimumResolutionOnFigPlaybackItem]
  -[AVPlayerItem setPreferredMinimumResolution:]
  -[AVPlayerItem _renderingSuppressionDidChangeForOutput:]
  -[AVPlayerItem setRequiresAccessLog:]
  -[AVPlayerItem setSuppressesAudioOnlyVariants:]
  -[AVPlayerItem setPrefersOfflinePlayableVariants:]
  -[AVPlayerItem _updateVariantPreferencesOnFigPlaybackItem]
  -[AVPlayerItem setVariantPreferences:]
  -[AVPlayerItem _updatePreferredMaximumAudioSampleRateOnFigPlaybackItem]
  -[AVPlayerItem setPreferredMaximumAudioSampleRate:]
  -[AVPlayerItem _updateAutoSwitchAtmosStreamVariantsOnFigPlaybackItem]
  -[AVPlayerItem setAutoSwitchAtmosStreamVariants:]
  -[AVPlayerItem _updateVideoApertureModeOnFigPlaybackItem]
  -[AVPlayerItem setVideoApertureMode:]
  -[AVPlayerItem _updateRestrictionsOnFigPlaybackItem]
  -[AVPlayerItem _updateMediaKindOnFigPlaybackItem]
  -[AVPlayerItem _updateLoudnessInfoOnFigPlaybackItem]
  -[AVPlayerItem audioTapProcessor]
  -[AVPlayerItem _updateAudioTapProcessorOnFigPlaybackItem]
  -[AVPlayerItem setAudioTapProcessor:]
  -[AVPlayerItem resetAudioBufferedAhead]
  -[AVPlayerItem _addInterstitialEventCollector]
  -[AVPlayerItem _addInterstitialEventCollectorLocked:]
  -[AVPlayerItem _removeInterstitialEventCollector]
  -[AVPlayerItem _removeInterstitialEventCollectorLocked:]
  -[AVPlayerItem _updateCanPlayAndCanStepPropertiesWhenReadyToPlayWithNotificationPayload:updateStatusToReadyToPlay:]
  -[AVPlayerItem _updateAdvanceTimeForOverlappedPlaybackOnFigPlaybackItem]
  -[AVPlayerItem setAdvanceTimeForOverlappedPlayback:]
  -[AVPlayerItem setMaximumTimePlayedToDuringOverlappedPlayback:]
  -[AVPlayerItem maximumTimePlayedToSinceLastSeek]
  -[AVPlayerItem isAudioSpatializationAllowed]
  -[AVPlayerItem _updateAudioSpatializationAllowed]
  -[AVPlayerItem setAudioSpatializationAllowed:]
  -[AVPlayerItem _updateAllowedAudioSpatializationFormats]
  -[AVPlayerItem _updateAllowedAudioSpatializationFormatsFromFigItem]
  -[AVPlayerItem setAllowedAudioSpatializationFormats:]
  -[AVPlayerItem _updateItemIdentifierForCoordinatedPlayback]
  -[AVPlayerItem _playbackCoordinator]
  -[AVPlayerItem _setPlaybackCoordinator:]
  -[AVPlayerItem dispatchIVarWrite:locked:block:]
  -[AVPlayerItem isAuthorizationRequiredForPlayback]
  -[AVPlayerItem isApplicationAuthorizedForPlayback]
  -[AVPlayerItem isContentAuthorizedForPlayback]
  -[AVPlayerItem _isExternalProtectionRequiredForPlaybackInternal]
  -[AVPlayerItem _isExternalProtectionRequiredForPlayback]
  -[AVPlayerItem _setExternalProtectionRequiredForPlayback:]
  -[AVPlayerItem _isRental]
  -[AVPlayerItem _rentalStartDate]
  -[AVPlayerItem _rentalExpirationDate]
  -[AVPlayerItem _isRentalPlaybackStarted]
  -[AVPlayerItem _rentalPlaybackStartedDate]
  -[AVPlayerItem _rentalPlaybackExpirationDate]
  -[AVPlayerItem accessLog]
  -[AVPlayerItem errorLog]
  -[AVPlayerItem _quietlySetEQPreset:]
  -[AVPlayerItem _setRampInOutInfo:]
  -[AVPlayerItem _setAudibleDRMInfo:]
  -[AVPlayerItem _availableFileSize]
  -[AVPlayerItem _videoOutputs]
  -[AVPlayerItem _legibleOutputsForKeys]
  -[AVPlayerItem _metadataOutputsForKeys]
  -[AVPlayerItem _evaluateVideoOutputs]
  -[AVPlayerItem _evaluateLegibleOutputs]
  -[AVPlayerItem _evaluateMetadataOutputs]
  -[AVPlayerItem _configureVideoCompositionColorProperties]
  -[AVPlayerItem _preferredPixelBufferAttributes]
  -[AVPlayerItem _addVideoOutput:]
  -[AVPlayerItem _addLegibleOutput:]
  -[AVPlayerItem _addMetadataOutput:]
  -[AVPlayerItem _removeVideoOutput:]
  -[AVPlayerItem _removeLegibleOutput:]
  -[AVPlayerItem _removeMetadataOutput:]
  -[AVPlayerItem _addMetadataCollector:]
  -[AVPlayerItem _addMetadataCollector:locked:]
  -[AVPlayerItem _removeMetadataCollector:]
  -[AVPlayerItem _removeMetadataCollector:locked:]
  -[AVPlayerItem addMediaDataCollector:]
  -[AVPlayerItem addMediaDataCollector:locked:]
  -[AVPlayerItem removeMediaDataCollector:]
  -[AVPlayerItem removeMediaDataCollector:locked:]
  -[AVPlayerItem mediaDataCollectors]
  -[AVPlayerItem _metadataCollectors]
  -[AVPlayerItem _updateTaggedMetadataArray:]
  -[AVPlayerItem _quietlySetServiceIdentifier]
  -[AVPlayerItem _legibleOutputForKey:]
  -[AVPlayerItem _figPlaybackItem:didOutputAttributedStrings:nativeSampleBuffers:atItemTime:withLegibleOutputsDictionaryKey:]
  -[AVPlayerItem _figPlaybackItem:didFlushLegibleOutputWithDictionaryKey:]
  -[AVPlayerItem _metadataOutputForKey:]
  -[AVPlayerItem _figPlaybackItem:didOutputSampleBuffers:fromTrackWithID:forMetadataOutputWithDictionaryKey:]
  -[AVPlayerItem _figPlaybackItem:didFlushMetadataOutputWithDictionaryKey:]
  -[AVPlayerItem setAVKitData:]
  -[AVPlayerItem _updateVideoEnhancementModeOnFigPlaybackItem]
  -[AVPlayerItem setVideoEnhancementMode:]
  -[AVPlayerItem setAutomaticallyHandlesInterstitialEvents:]
  -[AVPlayerItem templatePlayerItem]
  -[AVPlayerItem _setTemplatePlayerItem:]


AVPlayerConnection : NSObject
 @property  long long status

  // instance methods
  -[AVPlayerConnection removeItemFromPlayQueue]
  -[AVPlayerConnection error]
  -[AVPlayerConnection status]
  -[AVPlayerConnection dealloc]
  -[AVPlayerConnection player]
  -[AVPlayerConnection addItemToPlayQueueAfterPlaybackItemOfItem:]
  -[AVPlayerConnection initWithWeakReferenceToPlayer:weakReferenceToPlayerItem:]
  -[AVPlayerConnection playerItem]


AVSpecifiedLoggingIdentifierInternal : NSObject

AVSpecifiedLoggingIdentifier : NSObject <AVLoggingIdentifier>
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVSpecifiedLoggingIdentifier dealloc]
  -[AVSpecifiedLoggingIdentifier name]
  -[AVSpecifiedLoggingIdentifier initWithSpecifiedName:]
  -[AVSpecifiedLoggingIdentifier makeDerivedIdentifier]


AVAssetLoggingIdentifierInternal : NSObject

AVAssetLoggingIdentifier : NSObject <AVLoggingIdentifier>
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAssetLoggingIdentifier dealloc]
  -[AVAssetLoggingIdentifier name]
  -[AVAssetLoggingIdentifier makeDerivedIdentifier]
  -[AVAssetLoggingIdentifier init]


AVPlayerLoggingIdentifierInternal : NSObject

AVPlayerLoggingIdentifier : NSObject <AVLoggingIdentifier>
 @property  NSString *name
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVPlayerLoggingIdentifier dealloc]
  -[AVPlayerLoggingIdentifier name]
  -[AVPlayerLoggingIdentifier init]


AVPlayerItemTrackInternal : NSObject

AVPlayerItemTrack : NSObject
 @property  NSArray *outputs
 @property  AVAssetTrack *assetTrack
 @property  BOOL enabled
 @property  float currentVideoFrameRate

  // class methods
  +[AVPlayerItemTrack playerItemTrackWithFigPlaybackItem:readyForInspection:trackID:asset:playerItem:]

  // instance methods
  -[AVPlayerItemTrack loudnessInfo]
  -[AVPlayerItemTrack trackID]
  -[AVPlayerItemTrack _initWithFigPlaybackItem:readyForInspection:trackID:asset:playerItem:]
  -[AVPlayerItemTrack _updateTrackExtractionIDArrayProperty]
  -[AVPlayerItemTrack setHapticVolume:]
  -[AVPlayerItemTrack videoEnhancementFilterOptions]
  -[AVPlayerItemTrack activeHapticChannelIndex]
  -[AVPlayerItemTrack effectiveEQPreset]
  -[AVPlayerItemTrack dealloc]
  -[AVPlayerItemTrack _playerItem]
  -[AVPlayerItemTrack assetTrack]
  -[AVPlayerItemTrack setEnabled:]
  -[AVPlayerItemTrack currentVideoFrameRate]
  -[AVPlayerItemTrack effectiveLoudnessInfo]
  -[AVPlayerItemTrack _transferHapticVolumeToFig]
  -[AVPlayerItemTrack _transferLoudnessInfoToFig]
  -[AVPlayerItemTrack setVideoEnhancementFilterOptions:]
  -[AVPlayerItemTrack _transferActiveHapticChannelIndexToFig]
  -[AVPlayerItemTrack willTrimShortDurationAudioSamples]
  -[AVPlayerItemTrack hapticVolume]
  -[AVPlayerItemTrack outputs]
  -[AVPlayerItemTrack _transferEnabledToFig]
  -[AVPlayerItemTrack _transferVideoEnhancementOptionsToFig]
  -[AVPlayerItemTrack disableColorMatching]
  -[AVPlayerItemTrack _respondToFigPlaybackItemBecomingReadyForInpection]
  -[AVPlayerItemTrack _figPlaybackItemIsReadyForInspection]
  -[AVPlayerItemTrack setActiveHapticChannelIndex:]
  -[AVPlayerItemTrack _weakReferenceToPlayerItem]
  -[AVPlayerItemTrack setDisableColorMatching:]
  -[AVPlayerItemTrack fallbackTrack]
  -[AVPlayerItemTrack _transferDisableColorMatchingToFig]
  -[AVPlayerItemTrack addOutput:]
  -[AVPlayerItemTrack _attachToFigPlaybackItemOfPlayerItem:]
  -[AVPlayerItemTrack isEqual:]
  -[AVPlayerItemTrack isEnabled]
  -[AVPlayerItemTrack removeOutput:]
  -[AVPlayerItemTrack setLoudnessInfo:]


AVAssetDownloadStorageManager : NSObject
  // class methods
  +[AVAssetDownloadStorageManager sharedDownloadStorageManager]

  // instance methods
  -[AVAssetDownloadStorageManager setStorageManagementPolicy:forURL:]
  -[AVAssetDownloadStorageManager storageManagementPolicyForURL:]


AVAssetDownloadStorageManagementPolicy : NSObject <NSCopying, NSMutableCopying>
 @property  NSString *priority
 @property  NSDate *expirationDate

  // instance methods
  -[AVAssetDownloadStorageManagementPolicy setPriority:]
  -[AVAssetDownloadStorageManagementPolicy expirationDate]
  -[AVAssetDownloadStorageManagementPolicy setExpirationDate:]
  -[AVAssetDownloadStorageManagementPolicy dealloc]
  -[AVAssetDownloadStorageManagementPolicy copyWithZone:]
  -[AVAssetDownloadStorageManagementPolicy priority]
  -[AVAssetDownloadStorageManagementPolicy mutableCopyWithZone:]
  -[AVAssetDownloadStorageManagementPolicy isEqual:]
  -[AVAssetDownloadStorageManagementPolicy init]
  -[AVAssetDownloadStorageManagementPolicy _policyDictionary]
  -[AVAssetDownloadStorageManagementPolicy _setPolicyDictionary:]


AVMutableAssetDownloadStorageManagementPolicy : AVAssetDownloadStorageManagementPolicy
 @property  NSString *priority
 @property  NSDate *expirationDate

  // instance methods
  -[AVMutableAssetDownloadStorageManagementPolicy setPriority:]
  -[AVMutableAssetDownloadStorageManagementPolicy expirationDate]
  -[AVMutableAssetDownloadStorageManagementPolicy setExpirationDate:]
  -[AVMutableAssetDownloadStorageManagementPolicy copyWithZone:]
  -[AVMutableAssetDownloadStorageManagementPolicy priority]


AVAssetDownloadStorageManagementPolicyInternal : NSObject

AVQueuePlayer : AVPlayer
  // class methods
  +[AVQueuePlayer queuePlayerWithItems:]
  +[AVQueuePlayer initialize]

  // instance methods
  -[AVQueuePlayer initWithItems:]
  -[AVQueuePlayer removeItem:]
  -[AVQueuePlayer dealloc]
  -[AVQueuePlayer items]
  -[AVQueuePlayer removeAllItems]
  -[AVQueuePlayer init]
  -[AVQueuePlayer advanceToNextItem]
  -[AVQueuePlayer setActionAtItemEnd:]
  -[AVQueuePlayer _defaultActionAtItemEnd]
  -[AVQueuePlayer canInsertItem:afterItem:]
  -[AVQueuePlayer insertItem:afterItem:]
  -[AVQueuePlayer canOverlapPlaybackFromPlayerItem:toPlayerItem:]


AVQueuePlayerInternal : NSObject

AVOutputDeviceDiscoverySessionInternal : NSObject

AVOutputDeviceDiscoverySessionAvailableOutputDevicesInternal : NSObject

AVOutputDeviceDiscoverySession : NSObject
 @property  ^{OpaqueFigRouteDiscoverer=} routeDiscoverer
 @property  long long discoveryMode
 @property  AVAudioSession *targetAudioSession
 @property  NSArray *availableOutputDevices
 @property  AVOutputDeviceDiscoverySessionAvailableOutputDevices *availableOutputDevicesObject
 @property  NSArray *availableOutputDeviceGroups
 @property  BOOL devicePresenceDetected

  // class methods
  +[AVOutputDeviceDiscoverySession outputDeviceDiscoverySessionFactory]
  +[AVOutputDeviceDiscoverySession initialize]

  // instance methods
  -[AVOutputDeviceDiscoverySession routeDiscoverer]
  -[AVOutputDeviceDiscoverySession devicePresenceDetected]
  -[AVOutputDeviceDiscoverySession setDiscoveryMode:]
  -[AVOutputDeviceDiscoverySession impl]
  -[AVOutputDeviceDiscoverySession discoveryMode]
  -[AVOutputDeviceDiscoverySession dealloc]
  -[AVOutputDeviceDiscoverySession setTargetAudioSession:]
  -[AVOutputDeviceDiscoverySession availableOutputDeviceGroups]
  -[AVOutputDeviceDiscoverySession availableOutputDevices]
  -[AVOutputDeviceDiscoverySession availableOutputDevicesObject]
  -[AVOutputDeviceDiscoverySession targetAudioSession]
  -[AVOutputDeviceDiscoverySession initWithDeviceFeatures:]
  -[AVOutputDeviceDiscoverySession init]
  -[AVOutputDeviceDiscoverySession initWithOutputDeviceDiscoverySessionImpl:]
  -[AVOutputDeviceDiscoverySession outputDeviceDiscoverySessionImplDidChangeAvailableOutputDevices:]
  -[AVOutputDeviceDiscoverySession outputDeviceDiscoverySessionImpl:didExpireWithReplacement:]
  -[AVOutputDeviceDiscoverySession outputDeviceDiscoverySessionImplDidChangeAvailableOutputDeviceGroups:]


AVEmptyOutputDeviceDiscoverySessionAvailableOutputDevices : NSObject <AVOutputDeviceDiscoverySessionAvailableOutputDevicesImpl>
 @property  NSArray *allDevices
 @property  NSArray *availableOutputDeviceGroups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVEmptyOutputDeviceDiscoverySessionAvailableOutputDevices allDevices]
  -[AVEmptyOutputDeviceDiscoverySessionAvailableOutputDevices availableOutputDeviceGroups]


AVOutputDeviceDiscoverySessionAvailableOutputDevices : NSObject
 @property  NSArray *recentlyUsedDevices
 @property  NSArray *otherDevices

  // class methods
  +[AVOutputDeviceDiscoverySessionAvailableOutputDevices outputDeviceDiscoverySessionAvailableOutputDevicesWithAvailableFigEndpoints:]

  // instance methods
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices impl]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices _loadOutputDevices]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices dealloc]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices otherDevices]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices recentlyUsedDevices]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices availableOutputDeviceGroups]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices initWithOutputDeviceDiscoverySessionAvailableOutputDevicesImpl:]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices isEqual:]
  -[AVOutputDeviceDiscoverySessionAvailableOutputDevices init]


AVCompositionInternal : NSObject

AVComposition : AVAsset <NSSecureCoding, NSMutableCopying>
 @property  NSArray *tracks
 @property  {CGSize=dd} naturalSize
 @property  NSDictionary *URLAssetInitializationOptions

  // class methods
  +[AVComposition supportsSecureCoding]
  +[AVComposition initialize]
  +[AVComposition expectsPropertyRevisedNotifications]

  // instance methods
  -[AVComposition naturalSize]
  -[AVComposition _mutableTracks]
  -[AVComposition tracksWithMediaType:]
  -[AVComposition encodeWithCoder:]
  -[AVComposition dealloc]
  -[AVComposition _formatReader]
  -[AVComposition tracksWithMediaCharacteristic:]
  -[AVComposition _mediaSelectionGroupDictionaries]
  -[AVComposition tracks]
  -[AVComposition trackWithTrackID:]
  -[AVComposition _classForTrackInspectors]
  -[AVComposition mutableCopyWithZone:]
  -[AVComposition _figAsset]
  -[AVComposition init]
  -[AVComposition initWithCoder:]
  -[AVComposition _assetInspector]
  -[AVComposition _assetInspectorLoader]
  -[AVComposition _mutableComposition]
  -[AVComposition URLAssetInitializationOptions]
  -[AVComposition _createEmptyMutableCompositionIfNeeded]
  -[AVComposition _initWithComposition:]
  -[AVComposition _loadAssetInspectorAndLoaderOnce]
  -[AVComposition _newTrackForIndex:]
  -[AVComposition _clientProvidesNaturalSize]
  -[AVComposition _setNaturalSize:]
  -[AVComposition _setURLAssetInitializationOptions:error:]


AVMutableCompositionInternal : NSObject

AVMutableComposition : AVComposition
 @property  NSArray *tracks
 @property  {CGSize=dd} naturalSize

  // class methods
  +[AVMutableComposition composition]
  +[AVMutableComposition compositionWithURLAssetInitializationOptions:]

  // instance methods
  -[AVMutableComposition naturalSize]
  -[AVMutableComposition removeTrack:]
  -[AVMutableComposition scaleTimeRange:toDuration:]
  -[AVMutableComposition tracksWithMediaType:]
  -[AVMutableComposition setNaturalSize:]
  -[AVMutableComposition setMetadata:]
  -[AVMutableComposition insertEmptyTimeRange:]
  -[AVMutableComposition tracksWithMediaCharacteristic:]
  -[AVMutableComposition tracks]
  -[AVMutableComposition copyWithZone:]
  -[AVMutableComposition trackWithTrackID:]
  -[AVMutableComposition removeTimeRange:]
  -[AVMutableComposition mutableTrackCompatibleWithTrack:]
  -[AVMutableComposition _initWithComposition:]
  -[AVMutableComposition _newTrackForIndex:]
  -[AVMutableComposition insertTimeRange:ofAsset:atTime:error:]
  -[AVMutableComposition insertTimeRange:ofAsset:atTime:completionHandler:]
  -[AVMutableComposition addMutableTrackWithMediaType:preferredTrackID:]
  -[AVMutableComposition _notifyTracksThatSegmentsWillChange:]
  -[AVMutableComposition _notifyTracksThatSegmentsDidChange:successfully:]


AVCompositionFormatReaderInspector : AVFormatReaderInspector
  // instance methods
  -[AVCompositionFormatReaderInspector isReadable]
  -[AVCompositionFormatReaderInspector isPlayable]
  -[AVCompositionFormatReaderInspector isComposable]
  -[AVCompositionFormatReaderInspector isCompatibleWithAirPlayVideo]
  -[AVCompositionFormatReaderInspector isCompatibleWithPhotosTranscodingServiceWithOptions:]
  -[AVCompositionFormatReaderInspector isExportable]
  -[AVCompositionFormatReaderInspector isCompatibleWithSavedPhotosAlbum]


AVCompositionTrackFormatDescriptionReplacement : NSObject <NSSecureCoding>
 @property  r^{opaqueCMFormatDescription=} originalFormatDescription
 @property  r^{opaqueCMFormatDescription=} replacementFormatDescription

  // class methods
  +[AVCompositionTrackFormatDescriptionReplacement supportsSecureCoding]

  // instance methods
  -[AVCompositionTrackFormatDescriptionReplacement encodeWithCoder:]
  -[AVCompositionTrackFormatDescriptionReplacement dealloc]
  -[AVCompositionTrackFormatDescriptionReplacement initWithCoder:]
  -[AVCompositionTrackFormatDescriptionReplacement initWithOriginalFormatDescription:andReplacementFormatDescription:]
  -[AVCompositionTrackFormatDescriptionReplacement originalFormatDescription]
  -[AVCompositionTrackFormatDescriptionReplacement replacementFormatDescription]


AVCompositionTrackInternal : NSObject

AVCompositionTrack : AVAssetTrack
 @property  NSArray *segments
 @property  NSArray *formatDescriptionReplacements

  // instance methods
  -[AVCompositionTrack _initWithAsset:trackID:trackIndex:]
  -[AVCompositionTrack segmentForTrackTime:]
  -[AVCompositionTrack dealloc]
  -[AVCompositionTrack segments]
  -[AVCompositionTrack isEnabled]
  -[AVCompositionTrack _mutableComposition]
  -[AVCompositionTrack formatDescriptionReplacements]


AVMutableCompositionTrackInternal : NSObject

AVMutableCompositionTrack : AVCompositionTrack
 @property  BOOL enabled
 @property  int naturalTimeScale
 @property  NSString *languageCode
 @property  NSString *extendedLanguageTag
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  float preferredVolume
 @property  NSArray *segments

  // class methods
  +[AVMutableCompositionTrack expectsPropertyRevisedNotifications]

  // instance methods
  -[AVMutableCompositionTrack preferredVolume]
  -[AVMutableCompositionTrack setLanguageCode:]
  -[AVMutableCompositionTrack preferredTransform]
  -[AVMutableCompositionTrack setAlternateGroupID:]
  -[AVMutableCompositionTrack scaleTimeRange:toDuration:]
  -[AVMutableCompositionTrack setPreferredVolume:]
  -[AVMutableCompositionTrack alternateGroupID]
  -[AVMutableCompositionTrack segments]
  -[AVMutableCompositionTrack extendedLanguageTag]
  -[AVMutableCompositionTrack setEnabled:]
  -[AVMutableCompositionTrack languageCode]
  -[AVMutableCompositionTrack setSegments:]
  -[AVMutableCompositionTrack setExtendedLanguageTag:]
  -[AVMutableCompositionTrack setMetadata:]
  -[AVMutableCompositionTrack insertEmptyTimeRange:]
  -[AVMutableCompositionTrack naturalTimeScale]
  -[AVMutableCompositionTrack setPreferredTransform:]
  -[AVMutableCompositionTrack removeTimeRange:]
  -[AVMutableCompositionTrack isEnabled]
  -[AVMutableCompositionTrack _notifyAssetThatDurationWillChange]
  -[AVMutableCompositionTrack _notifyAssetThatDurationDidChangeWithSuccess:]
  -[AVMutableCompositionTrack _notifySelfThatSegmentsWillChange]
  -[AVMutableCompositionTrack _notifySelfThatSegmentsDidChangeWithSuccess:]
  -[AVMutableCompositionTrack insertTimeRange:ofTrack:atTime:error:]
  -[AVMutableCompositionTrack insertTimeRanges:ofTracks:atTime:error:]
  -[AVMutableCompositionTrack validateTrackSegments:error:]
  -[AVMutableCompositionTrack _setTrackReaderPropertyValue:forKey:]
  -[AVMutableCompositionTrack setNaturalTimeScale:]
  -[AVMutableCompositionTrack _updateTrackAssociationToTrack:type:operation:]
  -[AVMutableCompositionTrack addTrackAssociationToTrack:type:]
  -[AVMutableCompositionTrack removeTrackAssociationToTrack:type:]
  -[AVMutableCompositionTrack replaceFormatDescription:withFormatDescription:]


AVCompositionTrackSegmentInternal : NSObject

AVCompositionTrackSegment : AVAssetTrackSegment <NSSecureCoding>
 @property  BOOL empty
 @property  NSURL *sourceURL
 @property  int sourceTrackID

  // class methods
  +[AVCompositionTrackSegment supportsSecureCoding]
  +[AVCompositionTrackSegment compositionTrackSegmentWithURL:trackID:sourceTimeRange:targetTimeRange:]
  +[AVCompositionTrackSegment compositionTrackSegmentWithTimeRange:]

  // instance methods
  -[AVCompositionTrackSegment encodeWithCoder:]
  -[AVCompositionTrackSegment dealloc]
  -[AVCompositionTrackSegment sourceURL]
  -[AVCompositionTrackSegment isEmpty]
  -[AVCompositionTrackSegment isEqual:]
  -[AVCompositionTrackSegment init]
  -[AVCompositionTrackSegment initWithCoder:]
  -[AVCompositionTrackSegment _initWithTimeMapping:]
  -[AVCompositionTrackSegment initWithURL:trackID:sourceTimeRange:targetTimeRange:]
  -[AVCompositionTrackSegment initWithTimeRange:]
  -[AVCompositionTrackSegment sourceTrackID]


AVAssetReaderInternal : NSObject

AVAssetReader : NSObject
 @property  ^{OpaqueFigAssetReader=} figAssetReader
 @property  BOOL readSingleSample
 @property  AVAsset *asset
 @property  long long status
 @property  NSError *error
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  NSArray *outputs

  // class methods
  +[AVAssetReader initialize]
  +[AVAssetReader assetReaderWithAsset:error:]
  +[AVAssetReader _errorForOSStatus:]

  // instance methods
  -[AVAssetReader cancelReading]
  -[AVAssetReader timeRange]
  -[AVAssetReader setTimeRange:]
  -[AVAssetReader _handleServerDiedNotification]
  -[AVAssetReader canAddOutput:]
  -[AVAssetReader error]
  -[AVAssetReader status]
  -[AVAssetReader dealloc]
  -[AVAssetReader initWithAsset:error:]
  -[AVAssetReader _outputDidFinish:]
  -[AVAssetReader asset]
  -[AVAssetReader outputs]
  -[AVAssetReader _setReadSingleSample:]
  -[AVAssetReader _readSingleSample]
  -[AVAssetReader _failWithError:]
  -[AVAssetReader _canAddOutput:exceptionReason:]
  -[AVAssetReader _transitionToStatus:failureError:]
  -[AVAssetReader addOutput:]
  -[AVAssetReader startReading]
  -[AVAssetReader _figAssetReader]
  -[AVAssetReader init]
  -[AVAssetReader _tearDownFigAssetReader]


AVSampleCursorInternal : NSObject

AVSampleCursor : NSObject <NSCopying>
  // class methods
  +[AVSampleCursor initialize]
  +[AVSampleCursor sampleCursorWithFigSampleCursor:]

  // instance methods
  -[AVSampleCursor dealloc]
  -[AVSampleCursor presentationTimeStamp]
  -[AVSampleCursor copyWithZone:]
  -[AVSampleCursor init]
  -[AVSampleCursor initWithFigSampleCursor:]
  -[AVSampleCursor _figSampleCursor]
  -[AVSampleCursor stepInDecodeOrderByCount:]
  -[AVSampleCursor stepInPresentationOrderByCount:]
  -[AVSampleCursor stepByDecodeTime:wasPinned:]
  -[AVSampleCursor stepByDecodeTime:]
  -[AVSampleCursor stepByPresentationTime:wasPinned:]
  -[AVSampleCursor stepByPresentationTime:]
  -[AVSampleCursor decodeTimeStamp]
  -[AVSampleCursor comparePositionInDecodeOrderWithPositionOfCursor:]
  -[AVSampleCursor samplesWithEarlierDecodeTimeStampsMayHaveLaterPresentationTimeStampsThanCursor:]
  -[AVSampleCursor samplesWithLaterDecodeTimeStampsMayHaveEarlierPresentationTimeStampsThanCursor:]
  -[AVSampleCursor canProvideSampleBuffers]
  -[AVSampleCursor createSampleBufferForCurrentSampleReturningError:]
  -[AVSampleCursor createSampleBufferFromCurrentSampleToEndCursor:error:]
  -[AVSampleCursor currentSampleDuration]
  -[AVSampleCursor copyCurrentSampleFormatDescription]
  -[AVSampleCursor currentSampleSyncInfo]
  -[AVSampleCursor currentSampleDependencyInfo]
  -[AVSampleCursor currentSampleAudioDependencyInfo]
  -[AVSampleCursor currentSampleDependencyAttachments]
  -[AVSampleCursor currentChunkStorageURL]
  -[AVSampleCursor currentChunkStorageRange]
  -[AVSampleCursor currentChunkInfo]
  -[AVSampleCursor currentSampleIndexInChunk]
  -[AVSampleCursor currentSampleStorageRange]
  -[AVSampleCursor samplesRequiredForDecoderRefresh]
  -[AVSampleCursor seamIdentifier]


AVNotificationSubscription : NSObject <AVCancellable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVNotificationSubscription dealloc]
  -[AVNotificationSubscription initWithObject:notificationName:callbackBlock:]
  -[AVNotificationSubscription cancel]


AVPublisher : NSObject
  // class methods
  +[AVPublisher initialize]

  // instance methods
  -[AVPublisher dealloc]
  -[AVPublisher init]
  -[AVPublisher subscribeRequestingInitialValue:block:]


AVPropertyValuePublisher : AVPublisher
  // class methods
  +[AVPropertyValuePublisher propertyValuePublisherWithObject:key:notificationName:]

  // instance methods
  -[AVPropertyValuePublisher dealloc]
  -[AVPropertyValuePublisher initWithObject:key:notificationName:]
  -[AVPropertyValuePublisher subscribeRequestingInitialValue:block:]


AVMapPublisher : AVPublisher
  // class methods
  +[AVMapPublisher mapPublisherWithUpstream:transform:]

  // instance methods
  -[AVMapPublisher dealloc]
  -[AVMapPublisher initWithUpstream:transform:]
  -[AVMapPublisher subscribeRequestingInitialValue:block:]


AVSwitchToLatestPublisher : AVPublisher
  // class methods
  +[AVSwitchToLatestPublisher switchToLatestPublisherWithUpstream:]

  // instance methods
  -[AVSwitchToLatestPublisher dealloc]
  -[AVSwitchToLatestPublisher subscribeRequestingInitialValue:block:]
  -[AVSwitchToLatestPublisher initWithUpstream:]


AVSinkSubscriber : NSObject <AVCancellable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVSinkSubscriber dealloc]
  -[AVSinkSubscriber initWithPublisher:requestingInitialValue:sink:]
  -[AVSinkSubscriber cancel]


AVAssetReaderOutputInternal : NSObject

AVAssetReaderOutput : NSObject
 @property  AVWeakReference *weakReferenceToAssetReader
 @property  int extractionID
 @property  NSDictionary *figAssetReaderExtractionOptions
 @property  BOOL trimsSampleDurations
 @property  NSString *mediaType
 @property  BOOL alwaysCopiesSampleData

  // class methods
  +[AVAssetReaderOutput initialize]
  +[AVAssetReaderOutput _figAssetReaderVideoScalingPropertiesFromVideoSettings:withFormatDescription:]

  // instance methods
  -[AVAssetReaderOutput _enableTrackExtractionReturningError:]
  -[AVAssetReaderOutput mediaType]
  -[AVAssetReaderOutput dealloc]
  -[AVAssetReaderOutput _status]
  -[AVAssetReaderOutput _isFinished]
  -[AVAssetReaderOutput setMaximizePowerEfficiency:]
  -[AVAssetReaderOutput _asset]
  -[AVAssetReaderOutput maximizePowerEfficiency]
  -[AVAssetReaderOutput _figAssetReader]
  -[AVAssetReaderOutput init]
  -[AVAssetReaderOutput copyNextSampleBuffer]
  -[AVAssetReaderOutput setAlwaysCopiesSampleData:]
  -[AVAssetReaderOutput _errorForOSStatus:]
  -[AVAssetReaderOutput alwaysCopiesSampleData]
  -[AVAssetReaderOutput supportsRandomAccess]
  -[AVAssetReaderOutput currentTimeRanges]
  -[AVAssetReaderOutput markConfigurationAsFinal]
  -[AVAssetReaderOutput setSupportsRandomAccess:]
  -[AVAssetReaderOutput _setFigAssetReader:]
  -[AVAssetReaderOutput _weakReferenceToAssetReader]
  -[AVAssetReaderOutput _attachToWeakReferenceToAssetReader:]
  -[AVAssetReaderOutput _extractionID]
  -[AVAssetReaderOutput _setExtractionID:]
  -[AVAssetReaderOutput _figAssetReaderExtractionOptions]
  -[AVAssetReaderOutput _trimsSampleDurations]
  -[AVAssetReaderOutput _updateTimeRangesOnFigAssetReaderReturningError:]
  -[AVAssetReaderOutput _prepareForReadingReturningError:]
  -[AVAssetReaderOutput _markAsFinished]
  -[AVAssetReaderOutput _cancelReading]
  -[AVAssetReaderOutput _figAssetReaderSampleBufferDidBecomeAvailableForExtractionID:]
  -[AVAssetReaderOutput resetForReadingTimeRanges:]
  -[AVAssetReaderOutput _figAssetReaderDecodeError]
  -[AVAssetReaderOutput _figAssetReaderFailed]
  -[AVAssetReaderOutput _figAssetReaderServerConnectionDied]


AVAssetReaderTrackOutputInternal : NSObject

AVAssetReaderTrackOutput : AVAssetReaderOutput
 @property  BOOL attachedToAdaptor
 @property  AVAssetTrack *track
 @property  NSDictionary *outputSettings
 @property  NSString *audioTimePitchAlgorithm

  // class methods
  +[AVAssetReaderTrackOutput assetReaderTrackOutputWithTrack:outputSettings:]

  // instance methods
  -[AVAssetReaderTrackOutput _enableTrackExtractionReturningError:]
  -[AVAssetReaderTrackOutput outputSettings]
  -[AVAssetReaderTrackOutput setAudioTimePitchAlgorithm:]
  -[AVAssetReaderTrackOutput mediaType]
  -[AVAssetReaderTrackOutput dealloc]
  -[AVAssetReaderTrackOutput _isAttachedToAdaptor]
  -[AVAssetReaderTrackOutput _asset]
  -[AVAssetReaderTrackOutput audioTimePitchAlgorithm]
  -[AVAssetReaderTrackOutput _attachedAdaptor]
  -[AVAssetReaderTrackOutput _setAttachedAdaptor:]
  -[AVAssetReaderTrackOutput init]
  -[AVAssetReaderTrackOutput setAppliesPreferredTrackTransform:]
  -[AVAssetReaderTrackOutput copyNextSampleBuffer]
  -[AVAssetReaderTrackOutput appliesPreferredTrackTransform]
  -[AVAssetReaderTrackOutput _figAssetReaderExtractionOptions]
  -[AVAssetReaderTrackOutput _trimsSampleDurations]
  -[AVAssetReaderTrackOutput track]
  -[AVAssetReaderTrackOutput initWithTrack:outputSettings:]
  -[AVAssetReaderTrackOutput _copyNextSampleBufferForAdaptor]
  -[AVAssetReaderTrackOutput _formatDescriptions]
  -[AVAssetReaderTrackOutput _getUniformMediaSubtypeIfExists]


AVAssetReaderAudioMixOutputInternal : NSObject

AVAssetReaderAudioMixOutput : AVAssetReaderOutput
 @property  NSArray *audioTracks
 @property  NSDictionary *audioSettings
 @property  AVAudioMix *audioMix
 @property  NSString *audioTimePitchAlgorithm

  // class methods
  +[AVAssetReaderAudioMixOutput assetReaderAudioMixOutputWithAudioTracks:audioSettings:]

  // instance methods
  -[AVAssetReaderAudioMixOutput _enableTrackExtractionReturningError:]
  -[AVAssetReaderAudioMixOutput _setAudioTapProcessor:forTrack:]
  -[AVAssetReaderAudioMixOutput setAudioTimePitchAlgorithm:]
  -[AVAssetReaderAudioMixOutput mediaType]
  -[AVAssetReaderAudioMixOutput _setAudioVolumeCurve:forTrack:]
  -[AVAssetReaderAudioMixOutput dealloc]
  -[AVAssetReaderAudioMixOutput _audioVolumeCurveForTrack:]
  -[AVAssetReaderAudioMixOutput _audioTapProcessorForTrack:]
  -[AVAssetReaderAudioMixOutput _audioTimePitchAlgorithmForTrack:]
  -[AVAssetReaderAudioMixOutput initWithAudioTracks:audioSettings:]
  -[AVAssetReaderAudioMixOutput _asset]
  -[AVAssetReaderAudioMixOutput audioTimePitchAlgorithm]
  -[AVAssetReaderAudioMixOutput setAudioMix:]
  -[AVAssetReaderAudioMixOutput audioMix]
  -[AVAssetReaderAudioMixOutput audioSettings]
  -[AVAssetReaderAudioMixOutput audioTracks]
  -[AVAssetReaderAudioMixOutput _setAudioTimePitchAlgorithm:forTrack:]
  -[AVAssetReaderAudioMixOutput init]


AVAssetReaderVideoCompositionOutputInternal : NSObject

AVAssetReaderVideoCompositionOutput : AVAssetReaderOutput
 @property  NSArray *videoTracks
 @property  NSDictionary *videoSettings
 @property  AVVideoComposition *videoComposition
 @property  <AVVideoCompositing> *customVideoCompositor

  // class methods
  +[AVAssetReaderVideoCompositionOutput assetReaderVideoCompositionOutputWithVideoTracks:videoSettings:]

  // instance methods
  -[AVAssetReaderVideoCompositionOutput _enableTrackExtractionReturningError:]
  -[AVAssetReaderVideoCompositionOutput mediaType]
  -[AVAssetReaderVideoCompositionOutput dealloc]
  -[AVAssetReaderVideoCompositionOutput _asset]
  -[AVAssetReaderVideoCompositionOutput init]
  -[AVAssetReaderVideoCompositionOutput videoComposition]
  -[AVAssetReaderVideoCompositionOutput setVideoComposition:]
  -[AVAssetReaderVideoCompositionOutput customVideoCompositor]
  -[AVAssetReaderVideoCompositionOutput _errorForOSStatus:]
  -[AVAssetReaderVideoCompositionOutput alwaysCopiesSampleData]
  -[AVAssetReaderVideoCompositionOutput _prepareForReadingReturningError:]
  -[AVAssetReaderVideoCompositionOutput _formatDescriptions]
  -[AVAssetReaderVideoCompositionOutput videoTracks]
  -[AVAssetReaderVideoCompositionOutput sampleDataTrackIDs]
  -[AVAssetReaderVideoCompositionOutput initWithVideoTracks:videoSettings:]
  -[AVAssetReaderVideoCompositionOutput videoSettings]
  -[AVAssetReaderVideoCompositionOutput _setVideoComposition:]
  -[AVAssetReaderVideoCompositionOutput _setVideoComposition:customVideoCompositorSession:]
  -[AVAssetReaderVideoCompositionOutput _videoCompositionProcessorColorProperties]


AVAssetReaderSampleReferenceOutputInternal : NSObject

AVAssetReaderSampleReferenceOutput : AVAssetReaderOutput
 @property  AVAssetTrack *track

  // class methods
  +[AVAssetReaderSampleReferenceOutput assetReaderSampleReferenceOutputWithTrack:]

  // instance methods
  -[AVAssetReaderSampleReferenceOutput _enableTrackExtractionReturningError:]
  -[AVAssetReaderSampleReferenceOutput mediaType]
  -[AVAssetReaderSampleReferenceOutput dealloc]
  -[AVAssetReaderSampleReferenceOutput _asset]
  -[AVAssetReaderSampleReferenceOutput init]
  -[AVAssetReaderSampleReferenceOutput _trimsSampleDurations]
  -[AVAssetReaderSampleReferenceOutput track]
  -[AVAssetReaderSampleReferenceOutput initWithTrack:]


AVAssetPlaybackAssistant : NSObject
  // class methods
  +[AVAssetPlaybackAssistant assetPlaybackAssistantWithAsset:]

  // instance methods
  -[AVAssetPlaybackAssistant initWithAsset:]
  -[AVAssetPlaybackAssistant dealloc]
  -[AVAssetPlaybackAssistant _playbackConfigurationOptions]
  -[AVAssetPlaybackAssistant loadPlaybackConfigurationOptionsWithCompletionHandler:]


AVAssetWriterConfigurationState : NSObject
 @property  NSURL *URL
 @property  <AVAssetWriterDelegate> *delegate
 @property  AVMediaFileType *mediaFileType
 @property  {?=qiIq} movieFragmentInterval
 @property  {?=qiIq} overallDurationHint
 @property  BOOL shouldOptimizeForNetworkUse
 @property  NSURL *directoryForTemporaryFiles
 @property  NSArray *metadataItems
 @property  int movieTimeScale
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  float preferredVolume
 @property  float preferredRate
 @property  long long singlePassFileSize
 @property  long long singlePassMediaDataSize
 @property  NSArray *inputs
 @property  NSArray *inputGroups
 @property  {?=qiIq} preferredOutputSegmentInterval
 @property  {?=qiIq} initialSegmentStartTime
 @property  NSString *outputFileTypeProfile
 @property  long long initialMovieFragmentSequenceNumber
 @property  BOOL producesCombinableFragments
 @property  BOOL usesVirtualCaptureCard

  // instance methods
  -[AVAssetWriterConfigurationState setShouldOptimizeForNetworkUse:]
  -[AVAssetWriterConfigurationState preferredVolume]
  -[AVAssetWriterConfigurationState preferredOutputSegmentInterval]
  -[AVAssetWriterConfigurationState preferredTransform]
  -[AVAssetWriterConfigurationState inputs]
  -[AVAssetWriterConfigurationState setPreferredVolume:]
  -[AVAssetWriterConfigurationState setInitialSegmentStartTime:]
  -[AVAssetWriterConfigurationState setSinglePassFileSize:]
  -[AVAssetWriterConfigurationState movieTimeScale]
  -[AVAssetWriterConfigurationState setDelegate:]
  -[AVAssetWriterConfigurationState setPreferredRate:]
  -[AVAssetWriterConfigurationState directoryForTemporaryFiles]
  -[AVAssetWriterConfigurationState delegate]
  -[AVAssetWriterConfigurationState producesCombinableFragments]
  -[AVAssetWriterConfigurationState setURL:]
  -[AVAssetWriterConfigurationState dealloc]
  -[AVAssetWriterConfigurationState singlePassFileSize]
  -[AVAssetWriterConfigurationState singlePassMediaDataSize]
  -[AVAssetWriterConfigurationState .cxx_destruct]
  -[AVAssetWriterConfigurationState shouldOptimizeForNetworkUse]
  -[AVAssetWriterConfigurationState movieFragmentInterval]
  -[AVAssetWriterConfigurationState usesVirtualCaptureCard]
  -[AVAssetWriterConfigurationState setInitialMovieFragmentSequenceNumber:]
  -[AVAssetWriterConfigurationState setMetadataItems:]
  -[AVAssetWriterConfigurationState initialSegmentStartTime]
  -[AVAssetWriterConfigurationState setMediaFileType:]
  -[AVAssetWriterConfigurationState initialMovieFragmentSequenceNumber]
  -[AVAssetWriterConfigurationState mediaFileType]
  -[AVAssetWriterConfigurationState setPreferredTransform:]
  -[AVAssetWriterConfigurationState inputGroups]
  -[AVAssetWriterConfigurationState preferredRate]
  -[AVAssetWriterConfigurationState setInputGroups:]
  -[AVAssetWriterConfigurationState outputFileTypeProfile]
  -[AVAssetWriterConfigurationState setSinglePassMediaDataSize:]
  -[AVAssetWriterConfigurationState setInputs:]
  -[AVAssetWriterConfigurationState setMovieTimeScale:]
  -[AVAssetWriterConfigurationState overallDurationHint]
  -[AVAssetWriterConfigurationState setOutputFileTypeProfile:]
  -[AVAssetWriterConfigurationState metadataItems]
  -[AVAssetWriterConfigurationState URL]
  -[AVAssetWriterConfigurationState setPreferredOutputSegmentInterval:]
  -[AVAssetWriterConfigurationState setMovieFragmentInterval:]
  -[AVAssetWriterConfigurationState setUsesVirtualCaptureCard:]
  -[AVAssetWriterConfigurationState setProducesCombinableFragments:]
  -[AVAssetWriterConfigurationState setOverallDurationHint:]
  -[AVAssetWriterConfigurationState setDirectoryForTemporaryFiles:]


AVAssetWriterInternal : NSObject
  // instance methods
  -[AVAssetWriterInternal .cxx_destruct]


AVAssetWriter : NSObject <AVWeakObservable, AVKeyPathDependencyHost>
 @property  AVAssetWriterHelper *helper
 @property  NSURL *outputURL
 @property  NSString *outputFileType
 @property  NSArray *availableMediaTypes
 @property  long long status
 @property  NSError *error
 @property  NSArray *metadata
 @property  BOOL shouldOptimizeForNetworkUse
 @property  NSURL *directoryForTemporaryFiles
 @property  NSArray *inputs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAssetWriter automaticallyNotifiesObserversForKey:]
  +[AVAssetWriter initialize]
  +[AVAssetWriter _errorForOSStatus:]
  +[AVAssetWriter assetWriterWithURL:fileType:error:]

  // instance methods
  -[AVAssetWriter setShouldOptimizeForNetworkUse:]
  -[AVAssetWriter preferredVolume]
  -[AVAssetWriter preferredOutputSegmentInterval]
  -[AVAssetWriter addInputGroup:]
  -[AVAssetWriter _helper]
  -[AVAssetWriter preferredTransform]
  -[AVAssetWriter inputs]
  -[AVAssetWriter declareKeyPathDependenciesWithRegistry:]
  -[AVAssetWriter addCallbackToCancelDuringDeallocation:]
  -[AVAssetWriter cancelWriting]
  -[AVAssetWriter setPreferredVolume:]
  -[AVAssetWriter setInitialSegmentStartTime:]
  -[AVAssetWriter flushSegment]
  -[AVAssetWriter movieTimeScale]
  -[AVAssetWriter setDelegate:]
  -[AVAssetWriter setPreferredRate:]
  -[AVAssetWriter directoryForTemporaryFiles]
  -[AVAssetWriter startSessionAtSourceTime:]
  -[AVAssetWriter delegate]
  -[AVAssetWriter error]
  -[AVAssetWriter producesCombinableFragments]
  -[AVAssetWriter startWriting]
  -[AVAssetWriter status]
  -[AVAssetWriter dealloc]
  -[AVAssetWriter canAddInputGroup:]
  -[AVAssetWriter shouldOptimizeForNetworkUse]
  -[AVAssetWriter movieFragmentInterval]
  -[AVAssetWriter usesVirtualCaptureCard]
  -[AVAssetWriter setInitialMovieFragmentSequenceNumber:]
  -[AVAssetWriter canAddInput:]
  -[AVAssetWriter addInput:]
  -[AVAssetWriter initialSegmentStartTime]
  -[AVAssetWriter initialMovieFragmentSequenceNumber]
  -[AVAssetWriter setMetadata:]
  -[AVAssetWriter setPreferredTransform:]
  -[AVAssetWriter endSessionAtSourceTime:]
  -[AVAssetWriter finishWriting]
  -[AVAssetWriter inputGroups]
  -[AVAssetWriter preferredRate]
  -[AVAssetWriter outputFileTypeProfile]
  -[AVAssetWriter setMovieTimeScale:]
  -[AVAssetWriter overallDurationHint]
  -[AVAssetWriter setOutputFileTypeProfile:]
  -[AVAssetWriter metadata]
  -[AVAssetWriter setPreferredOutputSegmentInterval:]
  -[AVAssetWriter finishWritingWithCompletionHandler:]
  -[AVAssetWriter setMovieFragmentInterval:]
  -[AVAssetWriter outputFileType]
  -[AVAssetWriter setUsesVirtualCaptureCard:]
  -[AVAssetWriter setProducesCombinableFragments:]
  -[AVAssetWriter setOverallDurationHint:]
  -[AVAssetWriter flush]
  -[AVAssetWriter setDirectoryForTemporaryFiles:]
  -[AVAssetWriter init]
  -[AVAssetWriter outputURL]
  -[AVAssetWriter initWithContentType:]
  -[AVAssetWriter finishWritingDelegate]
  -[AVAssetWriter initWithURL:fileType:error:]
  -[AVAssetWriter initWithFileType:error:]
  -[AVAssetWriter _initInternalObject]
  -[AVAssetWriter _setHelper:ifCurrentHelper:]
  -[AVAssetWriter _setHelper:ifCurrentHelper:withBlock:]
  -[AVAssetWriter availableMediaTypes]
  -[AVAssetWriter _supportsSampleReferencesReturningError:]
  -[AVAssetWriter isVirtualCaptureCardSupported]
  -[AVAssetWriter setWritesSinglePassUsingPredeterminedFileSize:mediaDataSize:]
  -[AVAssetWriter canApplyOutputSettings:forMediaType:]
  -[AVAssetWriter setFinishWritingDelegate:]
  -[AVAssetWriter _transitionToFailedStatusWithError:]


AVAssetWriterUnknownHelper : AVAssetWriterHelper
  // instance methods
  -[AVAssetWriterUnknownHelper setShouldOptimizeForNetworkUse:]
  -[AVAssetWriterUnknownHelper addInputGroup:]
  -[AVAssetWriterUnknownHelper cancelWriting]
  -[AVAssetWriterUnknownHelper initWithURL:fileType:]
  -[AVAssetWriterUnknownHelper setPreferredVolume:]
  -[AVAssetWriterUnknownHelper setInitialSegmentStartTime:]
  -[AVAssetWriterUnknownHelper setSinglePassFileSize:]
  -[AVAssetWriterUnknownHelper setDelegate:]
  -[AVAssetWriterUnknownHelper setPreferredRate:]
  -[AVAssetWriterUnknownHelper _canAddInputGroup:exceptionReason:]
  -[AVAssetWriterUnknownHelper initWithConfigurationState:]
  -[AVAssetWriterUnknownHelper startWriting]
  -[AVAssetWriterUnknownHelper status]
  -[AVAssetWriterUnknownHelper canAddInputGroup:]
  -[AVAssetWriterUnknownHelper setDefaultPropertyValuesToConfigurationState:outputURL:fileType:]
  -[AVAssetWriterUnknownHelper _canAddInput:exceptionReason:]
  -[AVAssetWriterUnknownHelper setInitialMovieFragmentSequenceNumber:]
  -[AVAssetWriterUnknownHelper canAddInput:]
  -[AVAssetWriterUnknownHelper addInput:]
  -[AVAssetWriterUnknownHelper setMetadata:]
  -[AVAssetWriterUnknownHelper setPreferredTransform:]
  -[AVAssetWriterUnknownHelper setSinglePassMediaDataSize:]
  -[AVAssetWriterUnknownHelper setMovieTimeScale:]
  -[AVAssetWriterUnknownHelper setOutputFileTypeProfile:]
  -[AVAssetWriterUnknownHelper setPreferredOutputSegmentInterval:]
  -[AVAssetWriterUnknownHelper setMovieFragmentInterval:]
  -[AVAssetWriterUnknownHelper setUsesVirtualCaptureCard:]
  -[AVAssetWriterUnknownHelper setProducesCombinableFragments:]
  -[AVAssetWriterUnknownHelper setOverallDurationHint:]
  -[AVAssetWriterUnknownHelper setDirectoryForTemporaryFiles:]


AVAssetWriterFigAssetWriterNotificationHandler : NSObject
 @property  AVWeakReference *weakReferenceToDelegate
 @property  <AVAssetWriterFigAssetWriterNotificationHandlerDelegate> *delegate

  // instance methods
  -[AVAssetWriterFigAssetWriterNotificationHandler _handleFailedNotificationWithError:]
  -[AVAssetWriterFigAssetWriterNotificationHandler _setWeakReferenceToDelegate:]
  -[AVAssetWriterFigAssetWriterNotificationHandler setDelegate:]
  -[AVAssetWriterFigAssetWriterNotificationHandler _handleServerDiedNotification]
  -[AVAssetWriterFigAssetWriterNotificationHandler _callDelegateIfNotCalledWithSuccess:error:]
  -[AVAssetWriterFigAssetWriterNotificationHandler delegate]
  -[AVAssetWriterFigAssetWriterNotificationHandler dealloc]
  -[AVAssetWriterFigAssetWriterNotificationHandler initWithFigAssetWriter:]
  -[AVAssetWriterFigAssetWriterNotificationHandler _weakReferenceToDelegate]
  -[AVAssetWriterFigAssetWriterNotificationHandler _handleCompletedWritingNotification]
  -[AVAssetWriterFigAssetWriterNotificationHandler _teardownNotificationHandlers]


AVFragmentedMediaDataReportInternal : NSObject

AVFragmentedMediaDataReport : NSObject
 @property  long long numberOfBytesToEndOfFirstVideoFrame

  // instance methods
  -[AVFragmentedMediaDataReport dealloc]
  -[AVFragmentedMediaDataReport init]
  -[AVFragmentedMediaDataReport initWithFigFragmentedMediaDataReportDictionary:]
  -[AVFragmentedMediaDataReport numberOfBytesToEndOfFirstVideoFrame]


AVAssetWriterWritingHelper : AVAssetWriterHelper <AVAssetWriterFigAssetWriterNotificationHandlerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAssetWriterWritingHelper finishWritingDelegateOperationWithAssetWriter:andFigAssetWriter:andDelegate:]
  +[AVAssetWriterWritingHelper finalStepWorkaroundOperationWithFigAssetWriter:]
  +[AVAssetWriterWritingHelper prepareInputsOperationsWithInputs:]

  // instance methods
  -[AVAssetWriterWritingHelper cancelWriting]
  -[AVAssetWriterWritingHelper checkAVAssetWriterInputConfigurationToOutputSegmentDataForOutputFileTypeProfile:preferredOutputSegmentInterval:returningDebugDescription:]
  -[AVAssetWriterWritingHelper flushSegment]
  -[AVAssetWriterWritingHelper initWithConfigurationState:assetWriter:error:]
  -[AVAssetWriterWritingHelper startSessionAtSourceTime:]
  -[AVAssetWriterWritingHelper status]
  -[AVAssetWriterWritingHelper dealloc]
  -[AVAssetWriterWritingHelper initWithConfigurationState:assetWriter:]
  -[AVAssetWriterWritingHelper checkConfigurationToOutputSegmentDataReturningDebugDescription:]
  -[AVAssetWriterWritingHelper transitionToFailedStatusWithError:]
  -[AVAssetWriterWritingHelper _retainedFigAssetWriter]
  -[AVAssetWriterWritingHelper endSessionAtSourceTime:]
  -[AVAssetWriterWritingHelper _transitionToFinishWritingHelperWithFinishWritingOperations:]
  -[AVAssetWriterWritingHelper finishWriting]
  -[AVAssetWriterWritingHelper _makeFinishWritingOperationsWithCustomFigAssetWriterFinishOperation:]
  -[AVAssetWriterWritingHelper finishWritingWithCompletionHandler:]
  -[AVAssetWriterWritingHelper flush]
  -[AVAssetWriterWritingHelper didReceiveFigAssetWriterNotificationWithSuccess:error:]
  -[AVAssetWriterWritingHelper figTrackReferences]


AVWorkaroundNSBlockOperation : NSBlockOperation
  // instance methods
  -[AVWorkaroundNSBlockOperation isReady]


AVAssetWriterFinishWritingHelper : AVAssetWriterHelper
 @property  NSOperation *transitionToTerminalStatusOperation

  // instance methods
  -[AVAssetWriterFinishWritingHelper cancelWriting]
  -[AVAssetWriterFinishWritingHelper status]
  -[AVAssetWriterFinishWritingHelper dealloc]
  -[AVAssetWriterFinishWritingHelper initWithConfigurationState:finishWritingOperations:figAssetWriterCallbackContextToken:]
  -[AVAssetWriterFinishWritingHelper _finishWritingOperationsDidFinish]
  -[AVAssetWriterFinishWritingHelper transitionToTerminalStatusOperation]


AVFigAssetWriterFinishWritingAsyncOperation : AVOperation <AVAssetWriterFigAssetWriterNotificationHandlerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigAssetWriterFinishWritingAsyncOperation dealloc]
  -[AVFigAssetWriterFinishWritingAsyncOperation initWithFigAssetWriter:]
  -[AVFigAssetWriterFinishWritingAsyncOperation didEnterTerminalState]
  -[AVFigAssetWriterFinishWritingAsyncOperation isAsynchronous]
  -[AVFigAssetWriterFinishWritingAsyncOperation start]
  -[AVFigAssetWriterFinishWritingAsyncOperation cancel]
  -[AVFigAssetWriterFinishWritingAsyncOperation init]
  -[AVFigAssetWriterFinishWritingAsyncOperation didReceiveFigAssetWriterNotificationWithSuccess:error:]


AVAssetWriterTerminalHelper : AVAssetWriterHelper
  // instance methods
  -[AVAssetWriterTerminalHelper initWithConfigurationState:]
  -[AVAssetWriterTerminalHelper transitionToFailedStatusWithError:]


AVAssetWriterFailedTerminalHelper : AVAssetWriterTerminalHelper
  // instance methods
  -[AVAssetWriterFailedTerminalHelper flushSegment]
  -[AVAssetWriterFailedTerminalHelper initWithConfigurationState:]
  -[AVAssetWriterFailedTerminalHelper startSessionAtSourceTime:]
  -[AVAssetWriterFailedTerminalHelper error]
  -[AVAssetWriterFailedTerminalHelper status]
  -[AVAssetWriterFailedTerminalHelper dealloc]
  -[AVAssetWriterFailedTerminalHelper endSessionAtSourceTime:]
  -[AVAssetWriterFailedTerminalHelper finishWriting]
  -[AVAssetWriterFailedTerminalHelper finishWritingWithCompletionHandler:]
  -[AVAssetWriterFailedTerminalHelper flush]
  -[AVAssetWriterFailedTerminalHelper setFinishWritingDelegate:]
  -[AVAssetWriterFailedTerminalHelper initWithConfigurationState:terminalError:]


AVAssetWriterClientInitiatedTerminalHelper : AVAssetWriterTerminalHelper
  // instance methods
  -[AVAssetWriterClientInitiatedTerminalHelper initWithConfigurationState:]
  -[AVAssetWriterClientInitiatedTerminalHelper status]
  -[AVAssetWriterClientInitiatedTerminalHelper initWithConfigurationState:terminalStatus:]


AVAssetWriterHelper : NSObject
 @property  AVAssetWriterConfigurationState *configurationState
 @property  AVWeakReference *weakReferenceToAssetWriter
 @property  NSURL *outputURL
 @property  AVMediaFileType *mediaFileType
 @property  NSArray *availableMediaTypes
 @property  long long status
 @property  NSError *error
 @property  <AVAssetWriterDelegate> *delegate
 @property  {?=qiIq} movieFragmentInterval
 @property  {?=qiIq} overallDurationHint
 @property  BOOL shouldOptimizeForNetworkUse
 @property  NSURL *directoryForTemporaryFiles
 @property  int movieTimeScale
 @property  NSArray *metadata
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  float preferredVolume
 @property  float preferredRate
 @property  long long singlePassFileSize
 @property  long long singlePassMediaDataSize
 @property  NSArray *inputs
 @property  NSArray *inputGroups
 @property  {?=qiIq} preferredOutputSegmentInterval
 @property  {?=qiIq} initialSegmentStartTime
 @property  NSString *outputFileTypeProfile
 @property  long long initialMovieFragmentSequenceNumber
 @property  BOOL producesCombinableFragments
 @property  BOOL virtualCaptureCardSupported
 @property  BOOL usesVirtualCaptureCard

  // instance methods
  -[AVAssetWriterHelper setShouldOptimizeForNetworkUse:]
  -[AVAssetWriterHelper preferredVolume]
  -[AVAssetWriterHelper preferredOutputSegmentInterval]
  -[AVAssetWriterHelper addInputGroup:]
  -[AVAssetWriterHelper preferredTransform]
  -[AVAssetWriterHelper inputs]
  -[AVAssetWriterHelper cancelWriting]
  -[AVAssetWriterHelper setPreferredVolume:]
  -[AVAssetWriterHelper setInitialSegmentStartTime:]
  -[AVAssetWriterHelper flushSegment]
  -[AVAssetWriterHelper setSinglePassFileSize:]
  -[AVAssetWriterHelper movieTimeScale]
  -[AVAssetWriterHelper setDelegate:]
  -[AVAssetWriterHelper setPreferredRate:]
  -[AVAssetWriterHelper initWithConfigurationState:]
  -[AVAssetWriterHelper directoryForTemporaryFiles]
  -[AVAssetWriterHelper startSessionAtSourceTime:]
  -[AVAssetWriterHelper delegate]
  -[AVAssetWriterHelper error]
  -[AVAssetWriterHelper producesCombinableFragments]
  -[AVAssetWriterHelper startWriting]
  -[AVAssetWriterHelper status]
  -[AVAssetWriterHelper dealloc]
  -[AVAssetWriterHelper canAddInputGroup:]
  -[AVAssetWriterHelper singlePassFileSize]
  -[AVAssetWriterHelper singlePassMediaDataSize]
  -[AVAssetWriterHelper shouldOptimizeForNetworkUse]
  -[AVAssetWriterHelper movieFragmentInterval]
  -[AVAssetWriterHelper usesVirtualCaptureCard]
  -[AVAssetWriterHelper setInitialMovieFragmentSequenceNumber:]
  -[AVAssetWriterHelper canAddInput:]
  -[AVAssetWriterHelper transitionToFailedStatusWithError:]
  -[AVAssetWriterHelper addInput:]
  -[AVAssetWriterHelper initialSegmentStartTime]
  -[AVAssetWriterHelper initialMovieFragmentSequenceNumber]
  -[AVAssetWriterHelper setMetadata:]
  -[AVAssetWriterHelper mediaFileType]
  -[AVAssetWriterHelper setPreferredTransform:]
  -[AVAssetWriterHelper endSessionAtSourceTime:]
  -[AVAssetWriterHelper finishWriting]
  -[AVAssetWriterHelper inputGroups]
  -[AVAssetWriterHelper preferredRate]
  -[AVAssetWriterHelper outputFileTypeProfile]
  -[AVAssetWriterHelper setSinglePassMediaDataSize:]
  -[AVAssetWriterHelper setMovieTimeScale:]
  -[AVAssetWriterHelper overallDurationHint]
  -[AVAssetWriterHelper setOutputFileTypeProfile:]
  -[AVAssetWriterHelper metadata]
  -[AVAssetWriterHelper setPreferredOutputSegmentInterval:]
  -[AVAssetWriterHelper finishWritingWithCompletionHandler:]
  -[AVAssetWriterHelper setMovieFragmentInterval:]
  -[AVAssetWriterHelper setUsesVirtualCaptureCard:]
  -[AVAssetWriterHelper setProducesCombinableFragments:]
  -[AVAssetWriterHelper setOverallDurationHint:]
  -[AVAssetWriterHelper flush]
  -[AVAssetWriterHelper setDirectoryForTemporaryFiles:]
  -[AVAssetWriterHelper init]
  -[AVAssetWriterHelper outputURL]
  -[AVAssetWriterHelper configurationState]
  -[AVAssetWriterHelper availableMediaTypes]
  -[AVAssetWriterHelper isVirtualCaptureCardSupported]
  -[AVAssetWriterHelper canApplyOutputSettings:forMediaType:]
  -[AVAssetWriterHelper _canApplyOutputSettings:forMediaType:sourceFormat:exceptionReason:]
  -[AVAssetWriterHelper _canApplyTrackReferences:exceptionReason:]
  -[AVAssetWriterHelper _transitionToClientInitiatedTerminalStatus:]
  -[AVAssetWriterHelper weakReferenceToAssetWriter]
  -[AVAssetWriterHelper setWeakReferenceToAssetWriter:]


AVAssetWriterInputGroupInternal : NSObject

AVAssetWriterInputGroup : AVMediaSelectionGroup
 @property  NSArray *provisionalInputs
 @property  NSArray *inputs
 @property  AVAssetWriterInput *defaultInput

  // class methods
  +[AVAssetWriterInputGroup assetWriterInputGroupWithInputs:defaultInput:]
  +[AVAssetWriterInputGroup assetWriterInputGroupWithInputs:provisionalInputs:defaultInput:]

  // instance methods
  -[AVAssetWriterInputGroup inputs]
  -[AVAssetWriterInputGroup dealloc]
  -[AVAssetWriterInputGroup mediaSelectionOptionWithPropertyList:]
  -[AVAssetWriterInputGroup options]
  -[AVAssetWriterInputGroup observeValueForKeyPath:ofObject:change:context:]
  -[AVAssetWriterInputGroup copyWithZone:]
  -[AVAssetWriterInputGroup init]
  -[AVAssetWriterInputGroup defaultInput]
  -[AVAssetWriterInputGroup provisionalInputs]
  -[AVAssetWriterInputGroup initWithInputs:defaultInput:]
  -[AVAssetWriterInputGroup _startObservingInputPropertiesThatMayChangeValueOfOptions]
  -[AVAssetWriterInputGroup _stopObservingInputPropertiesThatMayChangeValueOfOptions]
  -[AVAssetWriterInputGroup initWithInputs:provisionalInputs:defaultInput:]


AVAssetWriterInputSelectionOption : AVMediaSelectionOption
 @property  NSString *mediaType
 @property  NSDictionary *outputSettings
 @property  ^{opaqueCMFormatDescription=} sourceFormatHint
 @property  NSString *languageCode
 @property  NSString *extendedLanguageTag
 @property  NSArray *metadata
 @property  NSDictionary *trackReferences
 @property  BOOL displaysNonForcedSubtitles
 @property  AVAssetWriterInput *input

  // class methods
  +[AVAssetWriterInputSelectionOption assetWriterInputSelectionOptionWithAssetWriterInput:]
  +[AVAssetWriterInputSelectionOption assetWriterInputSelectionOptionWithAssetWriterInput:displaysNonForcedSubtitles:]

  // instance methods
  -[AVAssetWriterInputSelectionOption input]
  -[AVAssetWriterInputSelectionOption propertyList]
  -[AVAssetWriterInputSelectionOption metadataForFormat:]
  -[AVAssetWriterInputSelectionOption commonMetadata]
  -[AVAssetWriterInputSelectionOption isPlayable]
  -[AVAssetWriterInputSelectionOption outputSettings]
  -[AVAssetWriterInputSelectionOption mediaType]
  -[AVAssetWriterInputSelectionOption dealloc]
  -[AVAssetWriterInputSelectionOption extendedLanguageTag]
  -[AVAssetWriterInputSelectionOption trackReferences]
  -[AVAssetWriterInputSelectionOption languageCode]
  -[AVAssetWriterInputSelectionOption locale]
  -[AVAssetWriterInputSelectionOption availableMetadataFormats]
  -[AVAssetWriterInputSelectionOption sourceFormatHint]
  -[AVAssetWriterInputSelectionOption metadata]
  -[AVAssetWriterInputSelectionOption isEqual:]
  -[AVAssetWriterInputSelectionOption initWithAssetWriterInput:]
  -[AVAssetWriterInputSelectionOption initWithAssetWriterInput:displaysNonForcedSubtitles:]
  -[AVAssetWriterInputSelectionOption _hasEqualValueForKey:asObject:]
  -[AVAssetWriterInputSelectionOption _ancillaryDescription]
  -[AVAssetWriterInputSelectionOption mediaSubTypes]
  -[AVAssetWriterInputSelectionOption _taggedCharacteristics]
  -[AVAssetWriterInputSelectionOption _isAuxiliaryContent]
  -[AVAssetWriterInputSelectionOption _isDesignatedDefault]
  -[AVAssetWriterInputSelectionOption associatedMediaSelectionOptionInMediaSelectionGroup:]
  -[AVAssetWriterInputSelectionOption displaysNonForcedSubtitles]


AVTimebaseObserver : NSObject
 @property  AVWeakReference *weakReference
 @property  ^{OpaqueCMTimebase=} timebase
 @property  BOOL invalidated

  // instance methods
  -[AVTimebaseObserver _resetNextFireTime]
  -[AVTimebaseObserver invalidated]
  -[AVTimebaseObserver dealloc]
  -[AVTimebaseObserver _effectiveRateChanged]
  -[AVTimebaseObserver _handleTimeDiscontinuity]
  -[AVTimebaseObserver _weakReference]
  -[AVTimebaseObserver invalidate]
  -[AVTimebaseObserver timebase]
  -[AVTimebaseObserver initWithTimebase:queue:]
  -[AVTimebaseObserver _reallyInvalidate]
  -[AVTimebaseObserver _attachTimerSourceToTimebase]
  -[AVTimebaseObserver _finishInitializationWithTimerEventHandler:]
  -[AVTimebaseObserver _removeTimebaseFromTimerSource]
  -[AVTimebaseObserver _startObservingTimebaseNotifications]
  -[AVTimebaseObserver _stopObservingTimebaseNotifications]


AVPeriodicTimebaseObserver : AVTimebaseObserver
  // instance methods
  -[AVPeriodicTimebaseObserver _resetNextFireTime]
  -[AVPeriodicTimebaseObserver dealloc]
  -[AVPeriodicTimebaseObserver _effectiveRateChanged]
  -[AVPeriodicTimebaseObserver _handleTimeDiscontinuity]
  -[AVPeriodicTimebaseObserver initWithTimebase:interval:queue:block:]
  -[AVPeriodicTimebaseObserver _fireBlockForTime:]


AVOccasionalTimebaseObserver : AVTimebaseObserver
  // instance methods
  -[AVOccasionalTimebaseObserver _resetNextFireTime]
  -[AVOccasionalTimebaseObserver dealloc]
  -[AVOccasionalTimebaseObserver _effectiveRateChanged]
  -[AVOccasionalTimebaseObserver _handleTimeDiscontinuity]
  -[AVOccasionalTimebaseObserver initWithTimebase:times:queue:block:]
  -[AVOccasionalTimebaseObserver _previousFiringTimeBeforeTime:]
  -[AVOccasionalTimebaseObserver _nextFiringTimeAfterTime:]
  -[AVOccasionalTimebaseObserver _fireBlock]


AVOnceTimebaseObserver : AVTimebaseObserver
 @property  BOOL didFire

  // instance methods
  -[AVOnceTimebaseObserver _resetNextFireTime]
  -[AVOnceTimebaseObserver dealloc]
  -[AVOnceTimebaseObserver _effectiveRateChanged]
  -[AVOnceTimebaseObserver _handleTimeDiscontinuity]
  -[AVOnceTimebaseObserver invalidate]
  -[AVOnceTimebaseObserver _fireBlock]
  -[AVOnceTimebaseObserver initWithTimebase:fireTime:queue:block:]
  -[AVOnceTimebaseObserver didFire]


AVPlayerItemMetadataCollectorInternal : NSObject

AVPlayerItemMetadataCollector : AVPlayerItemMediaDataCollector
 @property  <AVPlayerItemMetadataCollectorPushDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue

  // instance methods
  -[AVPlayerItemMetadataCollector _updateTaggedRangeMetadataArray:]
  -[AVPlayerItemMetadataCollector delegate]
  -[AVPlayerItemMetadataCollector _detatchFromPlayerItem]
  -[AVPlayerItemMetadataCollector dealloc]
  -[AVPlayerItemMetadataCollector delegateQueue]
  -[AVPlayerItemMetadataCollector _attachToPlayerItem:]
  -[AVPlayerItemMetadataCollector setDelegate:queue:]
  -[AVPlayerItemMetadataCollector init]
  -[AVPlayerItemMetadataCollector initWithIdentifiers:classifyingLabels:]
  -[AVPlayerItemMetadataCollector _isAttachedToPlayerItem]
  -[AVPlayerItemMetadataCollector _getFilteredMetadataGroups:fromIdentifiers:andClassifyingLabels:modifiedIndexesOut:newIndexesOut:]


AVPlayerItemInterstitialEventCollector : AVPlayerItemMediaDataCollector
  // instance methods
  -[AVPlayerItemInterstitialEventCollector _updateTaggedRangeMetadataArray:]
  -[AVPlayerItemInterstitialEventCollector _detatchFromPlayerItem]
  -[AVPlayerItemInterstitialEventCollector dealloc]
  -[AVPlayerItemInterstitialEventCollector .cxx_destruct]
  -[AVPlayerItemInterstitialEventCollector _attachToPlayerItem:]
  -[AVPlayerItemInterstitialEventCollector initWithCoordinatorGenerator:]


AVRoutingSessionManagerInternal : NSObject

AVRoutingSessionManager : NSObject
 @property  AVRoutingSession *currentRoutingSession
 @property  NSArray *likelyExternalDestinations
 @property  NSArray *allLikelyDestinations
 @property  BOOL prefersLikelyDestinationsOverCurrentRoutingSession

  // class methods
  +[AVRoutingSessionManager initialize]
  +[AVRoutingSessionManager longFormVideoRoutingSessionManager]
  +[AVRoutingSessionManager longFormVideoManagerCanHaveCurrentSessionWithDestinationOfType:subType:]

  // instance methods
  -[AVRoutingSessionManager dealloc]
  -[AVRoutingSessionManager init]
  -[AVRoutingSessionManager initWithFigRoutingSessionManager:]
  -[AVRoutingSessionManager currentRoutingSession]
  -[AVRoutingSessionManager likelyExternalDestinations]
  -[AVRoutingSessionManager allLikelyDestinations]
  -[AVRoutingSessionManager prefersLikelyDestinationsOverCurrentRoutingSession]
  -[AVRoutingSessionManager updateCurrentRoutingSessionFromLikelyDestinationsWithCompletionHandler:]
  -[AVRoutingSessionManager startRoutingSessionForHighConfidenceExternalDestinationIfPresentWithCompletionHandler:]
  -[AVRoutingSessionManager startRoutingSessionWithOutputDeviceDescriptions:error:]
  -[AVRoutingSessionManager startSuppressingLikelyDestinationsUntilNextPlayEventAndReturnError:]
  -[AVRoutingSessionManager stopSuppressingLikelyDestinationsAndReturnError:]


AVRoutingSessionInternal : NSObject

AVRoutingSession : NSObject
 @property  AVRoutingSessionDestination *destination
 @property  BOOL establishedAutomaticallyFromLikelyDestination

  // instance methods
  -[AVRoutingSession destination]
  -[AVRoutingSession dealloc]
  -[AVRoutingSession init]
  -[AVRoutingSession initWithFigRoutingSession:]
  -[AVRoutingSession establishedAutomaticallyFromLikelyDestination]


AVRoutingSessionDestinationInternal : NSObject

AVRoutingSessionDestination : NSObject
 @property  NSArray *outputDeviceDescriptions
 @property  float probability
 @property  BOOL providesExternalVideoPlayback

  // instance methods
  -[AVRoutingSessionDestination dealloc]
  -[AVRoutingSessionDestination init]
  -[AVRoutingSessionDestination probability]
  -[AVRoutingSessionDestination initWithFigRoutingSessionDestination:]
  -[AVRoutingSessionDestination outputDeviceDescriptions]
  -[AVRoutingSessionDestination _canQueryOutputDeviceDescriptionsAndReturnCurrentValue:]
  -[AVRoutingSessionDestination providesExternalVideoPlayback]


AVAssetWriterInputConfigurationState : NSObject
 @property  NSString *mediaType
 @property  AVOutputSettings *outputSettings
 @property  ^{opaqueCMFormatDescription=} sourceFormatHint
 @property  int trackID
 @property  NSDictionary *sourcePixelBufferAttributes
 @property  NSArray *metadataItems
 @property  {CGAffineTransform=dddddd} transform
 @property  int mediaTimeScale
 @property  BOOL expectsMediaDataInRealTime
 @property  {CGSize=dd} naturalSize
 @property  NSString *languageCode
 @property  NSString *extendedLanguageTag
 @property  BOOL marksOutputTrackAsEnabled
 @property  float preferredVolume
 @property  long long layer
 @property  short alternateGroupID
 @property  short provisionalAlternateGroupID
 @property  NSDictionary *trackReferences
 @property  BOOL performsMultiPassEncodingIfSupported
 @property  {?=qiIq} preferredMediaChunkDuration
 @property  long long preferredMediaChunkAlignment
 @property  long long preferredMediaChunkSize
 @property  NSString *mediaDataLocation
 @property  NSURL *sampleReferenceBaseURL
 @property  BOOL maximizePowerEfficiency

  // instance methods
  -[AVAssetWriterInputConfigurationState naturalSize]
  -[AVAssetWriterInputConfigurationState setMediaType:]
  -[AVAssetWriterInputConfigurationState preferredVolume]
  -[AVAssetWriterInputConfigurationState mediaTimeScale]
  -[AVAssetWriterInputConfigurationState setOutputSettings:]
  -[AVAssetWriterInputConfigurationState setLanguageCode:]
  -[AVAssetWriterInputConfigurationState sampleReferenceBaseURL]
  -[AVAssetWriterInputConfigurationState setSourcePixelBufferAttributes:]
  -[AVAssetWriterInputConfigurationState setLayer:]
  -[AVAssetWriterInputConfigurationState setAlternateGroupID:]
  -[AVAssetWriterInputConfigurationState trackID]
  -[AVAssetWriterInputConfigurationState setMediaTimeScale:]
  -[AVAssetWriterInputConfigurationState layer]
  -[AVAssetWriterInputConfigurationState setPreferredMediaChunkDuration:]
  -[AVAssetWriterInputConfigurationState setPreferredVolume:]
  -[AVAssetWriterInputConfigurationState setSourceFormatHint:]
  -[AVAssetWriterInputConfigurationState setTrackID:]
  -[AVAssetWriterInputConfigurationState outputSettings]
  -[AVAssetWriterInputConfigurationState preferredMediaChunkAlignment]
  -[AVAssetWriterInputConfigurationState sourcePixelBufferAttributes]
  -[AVAssetWriterInputConfigurationState alternateGroupID]
  -[AVAssetWriterInputConfigurationState mediaType]
  -[AVAssetWriterInputConfigurationState setSampleReferenceBaseURL:]
  -[AVAssetWriterInputConfigurationState preferredMediaChunkSize]
  -[AVAssetWriterInputConfigurationState marksOutputTrackAsEnabled]
  -[AVAssetWriterInputConfigurationState setNaturalSize:]
  -[AVAssetWriterInputConfigurationState setMediaDataLocation:]
  -[AVAssetWriterInputConfigurationState dealloc]
  -[AVAssetWriterInputConfigurationState extendedLanguageTag]
  -[AVAssetWriterInputConfigurationState performsMultiPassEncodingIfSupported]
  -[AVAssetWriterInputConfigurationState setMarksOutputTrackAsEnabled:]
  -[AVAssetWriterInputConfigurationState trackReferences]
  -[AVAssetWriterInputConfigurationState setMetadataItems:]
  -[AVAssetWriterInputConfigurationState setExpectsMediaDataInRealTime:]
  -[AVAssetWriterInputConfigurationState languageCode]
  -[AVAssetWriterInputConfigurationState preferredMediaChunkDuration]
  -[AVAssetWriterInputConfigurationState provisionalAlternateGroupID]
  -[AVAssetWriterInputConfigurationState expectsMediaDataInRealTime]
  -[AVAssetWriterInputConfigurationState setTransform:]
  -[AVAssetWriterInputConfigurationState setExtendedLanguageTag:]
  -[AVAssetWriterInputConfigurationState setProvisionalAlternateGroupID:]
  -[AVAssetWriterInputConfigurationState setTrackReferences:]
  -[AVAssetWriterInputConfigurationState mediaDataLocation]
  -[AVAssetWriterInputConfigurationState setPreferredMediaChunkSize:]
  -[AVAssetWriterInputConfigurationState setMaximizePowerEfficiency:]
  -[AVAssetWriterInputConfigurationState sourceFormatHint]
  -[AVAssetWriterInputConfigurationState metadataItems]
  -[AVAssetWriterInputConfigurationState transform]
  -[AVAssetWriterInputConfigurationState setPerformsMultiPassEncodingIfSupported:]
  -[AVAssetWriterInputConfigurationState setPreferredMediaChunkAlignment:]
  -[AVAssetWriterInputConfigurationState maximizePowerEfficiency]


AVAssetWriterInputInternal : NSObject

AVAssetWriterInput : NSObject <AVWeakObservable, AVKeyPathDependencyHost>
 @property  long long numberOfAppendFailures
 @property  BOOL markAsFinishedCalled
 @property  AVAssetWriterInputHelper *helper
 @property  NSDictionary *sourcePixelBufferAttributes
 @property  ^{__CVPixelBufferPool=} pixelBufferPool
 @property  AVOutputSettings *outputSettingsObject
 @property  long long status
 @property  BOOL attachedToAdaptor
 @property  AVWeakReference *weakReferenceToAssetWriter
 @property  short alternateGroupID
 @property  short provisionalAlternateGroupID
 @property  NSDictionary *trackReferences
 @property  NSString *mediaType
 @property  NSDictionary *outputSettings
 @property  r^{opaqueCMFormatDescription=} sourceFormatHint
 @property  NSArray *metadata
 @property  BOOL readyForMoreMediaData
 @property  BOOL expectsMediaDataInRealTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAssetWriterInput assetWriterInputWithMediaType:outputSettings:]
  +[AVAssetWriterInput assetWriterInputWithMediaType:outputSettings:sourceFormatHint:]
  +[AVAssetWriterInput initialize]

  // instance methods
  -[AVAssetWriterInput markCurrentPassAsFinished]
  -[AVAssetWriterInput naturalSize]
  -[AVAssetWriterInput _sourcePixelBufferAttributes]
  -[AVAssetWriterInput preferredVolume]
  -[AVAssetWriterInput mediaTimeScale]
  -[AVAssetWriterInput _setSourcePixelBufferAttributes:]
  -[AVAssetWriterInput setLanguageCode:]
  -[AVAssetWriterInput _helper]
  -[AVAssetWriterInput sampleReferenceBaseURL]
  -[AVAssetWriterInput setLayer:]
  -[AVAssetWriterInput stopRequestingMediaData]
  -[AVAssetWriterInput setMediaTimeScale:]
  -[AVAssetWriterInput requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInput declareKeyPathDependenciesWithRegistry:]
  -[AVAssetWriterInput layer]
  -[AVAssetWriterInput addCallbackToCancelDuringDeallocation:]
  -[AVAssetWriterInput canAddTrackAssociationWithTrackOfInput:type:]
  -[AVAssetWriterInput setPreferredMediaChunkDuration:]
  -[AVAssetWriterInput setPreferredVolume:]
  -[AVAssetWriterInput setWritesMediaDataToBeginningOfFile:]
  -[AVAssetWriterInput outputSettings]
  -[AVAssetWriterInput preferredMediaChunkAlignment]
  -[AVAssetWriterInput canPerformMultiplePasses]
  -[AVAssetWriterInput _tellAssetWriterToTransitionToFailedStatusWithError:]
  -[AVAssetWriterInput mediaType]
  -[AVAssetWriterInput availableTrackAssociationTypes]
  -[AVAssetWriterInput initWithMediaType:outputSettings:]
  -[AVAssetWriterInput setSampleReferenceBaseURL:]
  -[AVAssetWriterInput isReadyForMoreMediaData]
  -[AVAssetWriterInput _alternateGroupID]
  -[AVAssetWriterInput markAsFinished]
  -[AVAssetWriterInput preferredMediaChunkSize]
  -[AVAssetWriterInput marksOutputTrackAsEnabled]
  -[AVAssetWriterInput _transitionToTerminalStatus:]
  -[AVAssetWriterInput setNaturalSize:]
  -[AVAssetWriterInput setMediaDataLocation:]
  -[AVAssetWriterInput dealloc]
  -[AVAssetWriterInput extendedLanguageTag]
  -[AVAssetWriterInput performsMultiPassEncodingIfSupported]
  -[AVAssetWriterInput respondToEachPassDescriptionOnQueue:usingBlock:]
  -[AVAssetWriterInput _pixelBufferPool]
  -[AVAssetWriterInput setMarksOutputTrackAsEnabled:]
  -[AVAssetWriterInput _status]
  -[AVAssetWriterInput setExpectsMediaDataInRealTime:]
  -[AVAssetWriterInput languageCode]
  -[AVAssetWriterInput preferredMediaChunkDuration]
  -[AVAssetWriterInput _isAttachedToAdaptor]
  -[AVAssetWriterInput writesMediaDataToBeginningOfFile]
  -[AVAssetWriterInput expectsMediaDataInRealTime]
  -[AVAssetWriterInput setTransform:]
  -[AVAssetWriterInput setExtendedLanguageTag:]
  -[AVAssetWriterInput observeValueForKeyPath:ofObject:change:context:]
  -[AVAssetWriterInput setMetadata:]
  -[AVAssetWriterInput mediaDataLocation]
  -[AVAssetWriterInput setPreferredMediaChunkSize:]
  -[AVAssetWriterInput associatedInputsWithTrackAssociationType:]
  -[AVAssetWriterInput setMaximizePowerEfficiency:]
  -[AVAssetWriterInput _trackReferences]
  -[AVAssetWriterInput _didStartInitialSession]
  -[AVAssetWriterInput _prepareToFinishWritingReturningError:]
  -[AVAssetWriterInput appendSampleBuffer:]
  -[AVAssetWriterInput _provisionalAlternateGroupID]
  -[AVAssetWriterInput currentPassDescription]
  -[AVAssetWriterInput _prepareToEndSession]
  -[AVAssetWriterInput sourceFormatHint]
  -[AVAssetWriterInput _appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInput _attachedAdaptor]
  -[AVAssetWriterInput _setAlternateGroupID:]
  -[AVAssetWriterInput metadata]
  -[AVAssetWriterInput numberOfAppendFailures]
  -[AVAssetWriterInput initWithMediaType:outputSettings:sourceFormatHint:]
  -[AVAssetWriterInput _setWeakReferenceToAssetWriter:]
  -[AVAssetWriterInput _markAsFinishedCalled]
  -[AVAssetWriterInput _setProvisionalAlternateGroupID:]
  -[AVAssetWriterInput _outputSettingsObject]
  -[AVAssetWriterInput _setAttachedAdaptor:]
  -[AVAssetWriterInput outputTrackID]
  -[AVAssetWriterInput _appendSampleBuffer:error:]
  -[AVAssetWriterInput transform]
  -[AVAssetWriterInput setPerformsMultiPassEncodingIfSupported:]
  -[AVAssetWriterInput setPreferredMediaChunkAlignment:]
  -[AVAssetWriterInput maximizePowerEfficiency]
  -[AVAssetWriterInput _prepareForWritingWithFigAssetWriter:mediaFileType:error:]
  -[AVAssetWriterInput addTrackAssociationWithTrackOfInput:type:]
  -[AVAssetWriterInput init]
  -[AVAssetWriterInput _setHelper:]
  -[AVAssetWriterInput _weakReferenceToAssetWriter]


AVAssetWriterInputUnknownHelper : AVAssetWriterInputHelper
  // class methods
  +[AVAssetWriterInputUnknownHelper keyPathsForValuesAffectingCanPerformMultiplePasses]

  // instance methods
  -[AVAssetWriterInputUnknownHelper setLanguageCode:]
  -[AVAssetWriterInputUnknownHelper setSourcePixelBufferAttributes:]
  -[AVAssetWriterInputUnknownHelper canStartRespondingToEachPassDescriptionReturningReason:]
  -[AVAssetWriterInputUnknownHelper setLayer:]
  -[AVAssetWriterInputUnknownHelper setAlternateGroupID:]
  -[AVAssetWriterInputUnknownHelper setMediaTimeScale:]
  -[AVAssetWriterInputUnknownHelper canAddTrackAssociationWithTrackOfInput:type:]
  -[AVAssetWriterInputUnknownHelper setPreferredMediaChunkDuration:]
  -[AVAssetWriterInputUnknownHelper setPreferredVolume:]
  -[AVAssetWriterInputUnknownHelper canPerformMultiplePasses]
  -[AVAssetWriterInputUnknownHelper initWithConfigurationState:]
  -[AVAssetWriterInputUnknownHelper setSampleReferenceBaseURL:]
  -[AVAssetWriterInputUnknownHelper status]
  -[AVAssetWriterInputUnknownHelper setNaturalSize:]
  -[AVAssetWriterInputUnknownHelper setMediaDataLocation:]
  -[AVAssetWriterInputUnknownHelper setMarksOutputTrackAsEnabled:]
  -[AVAssetWriterInputUnknownHelper setExpectsMediaDataInRealTime:]
  -[AVAssetWriterInputUnknownHelper setTransform:]
  -[AVAssetWriterInputUnknownHelper setExtendedLanguageTag:]
  -[AVAssetWriterInputUnknownHelper setProvisionalAlternateGroupID:]
  -[AVAssetWriterInputUnknownHelper setMetadata:]
  -[AVAssetWriterInputUnknownHelper setPreferredMediaChunkSize:]
  -[AVAssetWriterInputUnknownHelper setMaximizePowerEfficiency:]
  -[AVAssetWriterInputUnknownHelper _canAddTrackAssociationWithTrackOfInput:type:exceptionReason:]
  -[AVAssetWriterInputUnknownHelper initWithMediaType:outputSettings:sourceFormatHint:]
  -[AVAssetWriterInputUnknownHelper setPerformsMultiPassEncodingIfSupported:]
  -[AVAssetWriterInputUnknownHelper setPreferredMediaChunkAlignment:]
  -[AVAssetWriterInputUnknownHelper _validateLanguageCode:]
  -[AVAssetWriterInputUnknownHelper addTrackAssociationWithTrackOfInput:type:]


AVAssetWriterInputWritingHelper : AVAssetWriterInputHelper <AVAssetWriterInputMediaDataRequesterDelegate, AVWeakObservable, AVKeyPathDependencyHost>
 @property  AVFigAssetWriterTrack *assetWriterTrack
 @property  AVAssetWriterInputPassDescription *currentPassDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAssetWriterInputWritingHelper markCurrentPassAsFinished]
  -[AVAssetWriterInputWritingHelper stopRequestingMediaData]
  -[AVAssetWriterInputWritingHelper requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInputWritingHelper declareKeyPathDependenciesWithRegistry:]
  -[AVAssetWriterInputWritingHelper addCallbackToCancelDuringDeallocation:]
  -[AVAssetWriterInputWritingHelper _assetWriterTrack]
  -[AVAssetWriterInputWritingHelper canPerformMultiplePasses]
  -[AVAssetWriterInputWritingHelper initWithConfigurationState:]
  -[AVAssetWriterInputWritingHelper isReadyForMoreMediaData]
  -[AVAssetWriterInputWritingHelper markAsFinished]
  -[AVAssetWriterInputWritingHelper _stopObservingReadyForMoreMediaDataKeyPath]
  -[AVAssetWriterInputWritingHelper status]
  -[AVAssetWriterInputWritingHelper prepareToFinishWritingReturningError:]
  -[AVAssetWriterInputWritingHelper _startObservingReadyForMoreMediaDataKeyPath]
  -[AVAssetWriterInputWritingHelper dealloc]
  -[AVAssetWriterInputWritingHelper _nudgeMediaDataRequesterIfAppropriate:]
  -[AVAssetWriterInputWritingHelper appendSampleBuffer:error:]
  -[AVAssetWriterInputWritingHelper markAsFinishedAndTransitionCurrentHelper:]
  -[AVAssetWriterInputWritingHelper initWithConfigurationState:assetWriterTrack:error:]
  -[AVAssetWriterInputWritingHelper didStartInitialSession]
  -[AVAssetWriterInputWritingHelper observeValueForKeyPath:ofObject:change:context:]
  -[AVAssetWriterInputWritingHelper mediaDataRequesterShouldRequestMediaData]
  -[AVAssetWriterInputWritingHelper prepareToEndSession]
  -[AVAssetWriterInputWritingHelper currentPassDescription]
  -[AVAssetWriterInputWritingHelper pixelBufferPool]
  -[AVAssetWriterInputWritingHelper setCurrentPassDescription:]
  -[AVAssetWriterInputWritingHelper beginPassIfAppropriate]
  -[AVAssetWriterInputWritingHelper appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputWritingHelper transitionToAndReturnTerminalHelperWithTerminalStatus:]


AVAssetWriterInputInterPassAnalysisHelper : AVAssetWriterInputHelper
  // instance methods
  -[AVAssetWriterInputInterPassAnalysisHelper markCurrentPassAsFinished]
  -[AVAssetWriterInputInterPassAnalysisHelper stopRequestingMediaData]
  -[AVAssetWriterInputInterPassAnalysisHelper requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInputInterPassAnalysisHelper canPerformMultiplePasses]
  -[AVAssetWriterInputInterPassAnalysisHelper initWithConfigurationState:]
  -[AVAssetWriterInputInterPassAnalysisHelper isReadyForMoreMediaData]
  -[AVAssetWriterInputInterPassAnalysisHelper markAsFinished]
  -[AVAssetWriterInputInterPassAnalysisHelper status]
  -[AVAssetWriterInputInterPassAnalysisHelper dealloc]
  -[AVAssetWriterInputInterPassAnalysisHelper appendSampleBuffer:error:]
  -[AVAssetWriterInputInterPassAnalysisHelper currentPassDescription]
  -[AVAssetWriterInputInterPassAnalysisHelper pixelBufferPool]
  -[AVAssetWriterInputInterPassAnalysisHelper appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputInterPassAnalysisHelper initWithWritingHelper:]
  -[AVAssetWriterInputInterPassAnalysisHelper startPassAnalysis]
  -[AVAssetWriterInputInterPassAnalysisHelper shouldRespondToInitialPassDescription]


AVAssetWriterInputNoMorePassesHelper : AVAssetWriterInputHelper
  // instance methods
  -[AVAssetWriterInputNoMorePassesHelper markCurrentPassAsFinished]
  -[AVAssetWriterInputNoMorePassesHelper stopRequestingMediaData]
  -[AVAssetWriterInputNoMorePassesHelper requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInputNoMorePassesHelper canPerformMultiplePasses]
  -[AVAssetWriterInputNoMorePassesHelper initWithConfigurationState:]
  -[AVAssetWriterInputNoMorePassesHelper isReadyForMoreMediaData]
  -[AVAssetWriterInputNoMorePassesHelper markAsFinished]
  -[AVAssetWriterInputNoMorePassesHelper status]
  -[AVAssetWriterInputNoMorePassesHelper dealloc]
  -[AVAssetWriterInputNoMorePassesHelper appendSampleBuffer:error:]
  -[AVAssetWriterInputNoMorePassesHelper currentPassDescription]
  -[AVAssetWriterInputNoMorePassesHelper pixelBufferPool]
  -[AVAssetWriterInputNoMorePassesHelper appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputNoMorePassesHelper initWithWritingHelper:]


AVAssetWriterInputTerminalHelper : AVAssetWriterInputHelper <AVAssetWriterInputMediaDataRequesterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAssetWriterInputTerminalHelper markCurrentPassAsFinished]
  -[AVAssetWriterInputTerminalHelper canStartRespondingToEachPassDescriptionReturningReason:]
  -[AVAssetWriterInputTerminalHelper stopRequestingMediaData]
  -[AVAssetWriterInputTerminalHelper requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInputTerminalHelper initWithConfigurationState:]
  -[AVAssetWriterInputTerminalHelper requestMediaDataOnceIfNecessaryWithMediaDataRequester:]
  -[AVAssetWriterInputTerminalHelper isReadyForMoreMediaData]
  -[AVAssetWriterInputTerminalHelper markAsFinished]
  -[AVAssetWriterInputTerminalHelper status]
  -[AVAssetWriterInputTerminalHelper initWithConfigurationState:terminalStatus:]
  -[AVAssetWriterInputTerminalHelper appendSampleBuffer:error:]
  -[AVAssetWriterInputTerminalHelper mediaDataRequesterShouldRequestMediaData]
  -[AVAssetWriterInputTerminalHelper appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputTerminalHelper transitionToAndReturnTerminalHelperWithTerminalStatus:]


AVAssetWriterInputHelper : NSObject
 @property  AVAssetWriterInputConfigurationState *configurationState
 @property  AVWeakReference *weakReferenceToAssetWriterInput
 @property  long long status
 @property  int trackID
 @property  NSString *mediaType
 @property  AVOutputSettings *outputSettings
 @property  ^{opaqueCMFormatDescription=} sourceFormatHint
 @property  {CGAffineTransform=dddddd} transform
 @property  NSArray *metadata
 @property  int mediaTimeScale
 @property  BOOL readyForMoreMediaData
 @property  BOOL expectsMediaDataInRealTime
 @property  {CGSize=dd} naturalSize
 @property  NSString *languageCode
 @property  NSString *extendedLanguageTag
 @property  BOOL marksOutputTrackAsEnabled
 @property  float preferredVolume
 @property  long long layer
 @property  short alternateGroupID
 @property  short provisionalAlternateGroupID
 @property  NSDictionary *trackReferences
 @property  BOOL performsMultiPassEncodingIfSupported
 @property  BOOL canPerformMultiplePasses
 @property  AVAssetWriterInputPassDescription *currentPassDescription
 @property  BOOL shouldRespondToInitialPassDescription
 @property  {?=qiIq} preferredMediaChunkDuration
 @property  long long preferredMediaChunkAlignment
 @property  long long preferredMediaChunkSize
 @property  NSString *mediaDataLocation
 @property  NSURL *sampleReferenceBaseURL
 @property  BOOL maximizePowerEfficiency
 @property  NSDictionary *sourcePixelBufferAttributes
 @property  ^{__CVPixelBufferPool=} pixelBufferPool

  // instance methods
  -[AVAssetWriterInputHelper markCurrentPassAsFinished]
  -[AVAssetWriterInputHelper naturalSize]
  -[AVAssetWriterInputHelper preferredVolume]
  -[AVAssetWriterInputHelper mediaTimeScale]
  -[AVAssetWriterInputHelper setLanguageCode:]
  -[AVAssetWriterInputHelper sampleReferenceBaseURL]
  -[AVAssetWriterInputHelper setSourcePixelBufferAttributes:]
  -[AVAssetWriterInputHelper canStartRespondingToEachPassDescriptionReturningReason:]
  -[AVAssetWriterInputHelper setLayer:]
  -[AVAssetWriterInputHelper setAlternateGroupID:]
  -[AVAssetWriterInputHelper trackID]
  -[AVAssetWriterInputHelper stopRequestingMediaData]
  -[AVAssetWriterInputHelper setMediaTimeScale:]
  -[AVAssetWriterInputHelper requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVAssetWriterInputHelper layer]
  -[AVAssetWriterInputHelper canAddTrackAssociationWithTrackOfInput:type:]
  -[AVAssetWriterInputHelper setPreferredMediaChunkDuration:]
  -[AVAssetWriterInputHelper setPreferredVolume:]
  -[AVAssetWriterInputHelper outputSettings]
  -[AVAssetWriterInputHelper preferredMediaChunkAlignment]
  -[AVAssetWriterInputHelper sourcePixelBufferAttributes]
  -[AVAssetWriterInputHelper canPerformMultiplePasses]
  -[AVAssetWriterInputHelper alternateGroupID]
  -[AVAssetWriterInputHelper initWithConfigurationState:]
  -[AVAssetWriterInputHelper mediaType]
  -[AVAssetWriterInputHelper availableTrackAssociationTypes]
  -[AVAssetWriterInputHelper setSampleReferenceBaseURL:]
  -[AVAssetWriterInputHelper isReadyForMoreMediaData]
  -[AVAssetWriterInputHelper markAsFinished]
  -[AVAssetWriterInputHelper preferredMediaChunkSize]
  -[AVAssetWriterInputHelper marksOutputTrackAsEnabled]
  -[AVAssetWriterInputHelper status]
  -[AVAssetWriterInputHelper prepareToFinishWritingReturningError:]
  -[AVAssetWriterInputHelper setNaturalSize:]
  -[AVAssetWriterInputHelper setMediaDataLocation:]
  -[AVAssetWriterInputHelper dealloc]
  -[AVAssetWriterInputHelper extendedLanguageTag]
  -[AVAssetWriterInputHelper performsMultiPassEncodingIfSupported]
  -[AVAssetWriterInputHelper setMarksOutputTrackAsEnabled:]
  -[AVAssetWriterInputHelper trackReferences]
  -[AVAssetWriterInputHelper appendSampleBuffer:error:]
  -[AVAssetWriterInputHelper setExpectsMediaDataInRealTime:]
  -[AVAssetWriterInputHelper languageCode]
  -[AVAssetWriterInputHelper preferredMediaChunkDuration]
  -[AVAssetWriterInputHelper provisionalAlternateGroupID]
  -[AVAssetWriterInputHelper expectsMediaDataInRealTime]
  -[AVAssetWriterInputHelper setTransform:]
  -[AVAssetWriterInputHelper didStartInitialSession]
  -[AVAssetWriterInputHelper setExtendedLanguageTag:]
  -[AVAssetWriterInputHelper setProvisionalAlternateGroupID:]
  -[AVAssetWriterInputHelper setMetadata:]
  -[AVAssetWriterInputHelper mediaDataLocation]
  -[AVAssetWriterInputHelper setPreferredMediaChunkSize:]
  -[AVAssetWriterInputHelper associatedInputsWithTrackAssociationType:]
  -[AVAssetWriterInputHelper setMaximizePowerEfficiency:]
  -[AVAssetWriterInputHelper prepareToEndSession]
  -[AVAssetWriterInputHelper currentPassDescription]
  -[AVAssetWriterInputHelper pixelBufferPool]
  -[AVAssetWriterInputHelper sourceFormatHint]
  -[AVAssetWriterInputHelper metadata]
  -[AVAssetWriterInputHelper appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputHelper transitionToAndReturnTerminalHelperWithTerminalStatus:]
  -[AVAssetWriterInputHelper transform]
  -[AVAssetWriterInputHelper setPerformsMultiPassEncodingIfSupported:]
  -[AVAssetWriterInputHelper setPreferredMediaChunkAlignment:]
  -[AVAssetWriterInputHelper maximizePowerEfficiency]
  -[AVAssetWriterInputHelper addTrackAssociationWithTrackOfInput:type:]
  -[AVAssetWriterInputHelper configurationState]
  -[AVAssetWriterInputHelper shouldRespondToInitialPassDescription]
  -[AVAssetWriterInputHelper transitionAssetWriterAndAllInputsToFailedStatusWithError:]
  -[AVAssetWriterInputHelper weakReferenceToAssetWriterInput]
  -[AVAssetWriterInputHelper setWeakReferenceToAssetWriterInput:]


AVAssetWriterInputPixelBufferAdaptorInternal : NSObject

AVAssetWriterInputPixelBufferAdaptor : NSObject <AVWeakObservable, AVKeyPathDependencyHost>
 @property  AVAssetWriterInput *assetWriterInput
 @property  NSDictionary *sourcePixelBufferAttributes
 @property  ^{__CVPixelBufferPool=} pixelBufferPool
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAssetWriterInputPixelBufferAdaptor assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:]

  // instance methods
  -[AVAssetWriterInputPixelBufferAdaptor declareKeyPathDependenciesWithRegistry:]
  -[AVAssetWriterInputPixelBufferAdaptor addCallbackToCancelDuringDeallocation:]
  -[AVAssetWriterInputPixelBufferAdaptor sourcePixelBufferAttributes]
  -[AVAssetWriterInputPixelBufferAdaptor dealloc]
  -[AVAssetWriterInputPixelBufferAdaptor pixelBufferPool]
  -[AVAssetWriterInputPixelBufferAdaptor appendPixelBuffer:withPresentationTime:]
  -[AVAssetWriterInputPixelBufferAdaptor init]
  -[AVAssetWriterInputPixelBufferAdaptor initWithAssetWriterInput:sourcePixelBufferAttributes:]
  -[AVAssetWriterInputPixelBufferAdaptor assetWriterInput]


AVFigAssetWriterTrack : NSObject
 @property  ^{OpaqueFigAssetWriter=} figAssetWriter
 @property  NSString *mediaType
 @property  AVMediaFileType *mediaFileType
 @property  int trackID
 @property  ^{__CVPixelBufferPool=} pixelBufferPool
 @property  BOOL encoderSupportsMultiPass
 @property  BOOL aboveHighWaterLevel
 @property  {?=qiIq} sampleBufferCoalescingInterval

  // class methods
  +[AVFigAssetWriterTrack assetWriterTrackWithFigAssetWriter:mediaType:mediaFileType:formatSpecification:sourcePixelBufferAttributes:multiPass:attachedAdaptor:error:]

  // instance methods
  -[AVFigAssetWriterTrack setLanguageCode:]
  -[AVFigAssetWriterTrack setLayer:]
  -[AVFigAssetWriterTrack setAlternateGroupID:]
  -[AVFigAssetWriterTrack trackID]
  -[AVFigAssetWriterTrack setMediaTimeScale:]
  -[AVFigAssetWriterTrack initWithFigAssetWriter:mediaType:mediaFileType:formatSpecification:sourcePixelBufferAttributes:multiPass:error:]
  -[AVFigAssetWriterTrack mediaType]
  -[AVFigAssetWriterTrack setSampleReferenceBaseURL:]
  -[AVFigAssetWriterTrack setMediaDataLocation:]
  -[AVFigAssetWriterTrack dealloc]
  -[AVFigAssetWriterTrack setMarksOutputTrackAsEnabled:]
  -[AVFigAssetWriterTrack setExtendedLanguageTag:]
  -[AVFigAssetWriterTrack setProvisionalAlternateGroupID:]
  -[AVFigAssetWriterTrack mediaFileType]
  -[AVFigAssetWriterTrack prepareToEndSession]
  -[AVFigAssetWriterTrack markEndOfDataReturningError:]
  -[AVFigAssetWriterTrack pixelBufferPool]
  -[AVFigAssetWriterTrack _attachToFigAssetWriterUsingFormatSpecification:sourcePixelBufferAttributes:multiPass:error:]
  -[AVFigAssetWriterTrack init]
  -[AVFigAssetWriterTrack addSampleBuffer:error:]
  -[AVFigAssetWriterTrack _figAssetWriterDidDropBelowLowWaterLevelForTrackID:]
  -[AVFigAssetWriterTrack _refreshAboveHighWaterLevel]
  -[AVFigAssetWriterTrack encoderSupportsMultiPass]
  -[AVFigAssetWriterTrack isAboveHighWaterLevel]
  -[AVFigAssetWriterTrack beginPassReturningError:]
  -[AVFigAssetWriterTrack addPixelBuffer:atPresentationTime:error:]
  -[AVFigAssetWriterTrack endPassWithCompletionHandler:]
  -[AVFigAssetWriterTrack setFigMetadata:]
  -[AVFigAssetWriterTrack setFigTrackMatrix:]
  -[AVFigAssetWriterTrack setFigDimensions:]
  -[AVFigAssetWriterTrack setTrackVolume:]
  -[AVFigAssetWriterTrack setExcludeFromAutoSelection:]
  -[AVFigAssetWriterTrack setPreferredChunkDuration:]
  -[AVFigAssetWriterTrack setPreferredChunkAlignment:]
  -[AVFigAssetWriterTrack setPreferredChunkSize:]
  -[AVFigAssetWriterTrack setFormatDescriptions:]
  -[AVFigAssetWriterTrack sampleBufferCoalescingInterval]
  -[AVFigAssetWriterTrack setSampleBufferCoalescingInterval:]
  -[AVFigAssetWriterTrack figAssetWriter]


AVFigAssetWriterAudioTrack : AVFigAssetWriterTrack
  // instance methods
  -[AVFigAssetWriterAudioTrack initWithFigAssetWriter:mediaType:mediaFileType:formatSpecification:sourcePixelBufferAttributes:multiPass:error:]
  -[AVFigAssetWriterAudioTrack dealloc]
  -[AVFigAssetWriterAudioTrack _flushPendingSampleBuffersReturningError:]
  -[AVFigAssetWriterAudioTrack prepareToEndSession]
  -[AVFigAssetWriterAudioTrack markEndOfDataReturningError:]
  -[AVFigAssetWriterAudioTrack _attachToFigAssetWriterUsingFormatSpecification:sourcePixelBufferAttributes:multiPass:error:]
  -[AVFigAssetWriterAudioTrack addSampleBuffer:error:]


AVFigAssetWriterVideoTrack : AVFigAssetWriterTrack
  // instance methods
  -[AVFigAssetWriterVideoTrack _attachToFigAssetWriterUsingFormatSpecification:sourcePixelBufferAttributes:multiPass:error:]


AVFigAssetWriterGenericTrack : AVFigAssetWriterTrack

AVAssetWriterInputMediaDataRequester : NSObject
 @property  NSObject<OS_dispatch_queue> *requestQueue
 @property  <AVAssetWriterInputMediaDataRequesterDelegate> *delegate

  // instance methods
  -[AVAssetWriterInputMediaDataRequester requestQueue]
  -[AVAssetWriterInputMediaDataRequester setDelegate:]
  -[AVAssetWriterInputMediaDataRequester delegate]
  -[AVAssetWriterInputMediaDataRequester dealloc]
  -[AVAssetWriterInputMediaDataRequester init]
  -[AVAssetWriterInputMediaDataRequester initWithRequestQueue:requestBlock:]
  -[AVAssetWriterInputMediaDataRequester _collectUncollectables_invokedFromDeallocAndFinalize]
  -[AVAssetWriterInputMediaDataRequester requestMediaDataIfNecessary]


AVAssetWriterInputPassDescriptionResponder : NSObject
  // instance methods
  -[AVAssetWriterInputPassDescriptionResponder dealloc]
  -[AVAssetWriterInputPassDescriptionResponder init]
  -[AVAssetWriterInputPassDescriptionResponder initWithCallbackQueue:block:]
  -[AVAssetWriterInputPassDescriptionResponder respondToNewPassDescription:]
  -[AVAssetWriterInputPassDescriptionResponder _releaseAndClearCallbackBlock_invokeOnSerializationQueue]
  -[AVAssetWriterInputPassDescriptionResponder stopRespondingToPassDescriptions]
  -[AVAssetWriterInputPassDescriptionResponder _hasStoppedResponding]


AVAssetWriterInputFigAssetWriterEndPassOperation : AVOperation
 @property  AVAssetWriterInputPassDescription *descriptionForNextPass

  // instance methods
  -[AVAssetWriterInputFigAssetWriterEndPassOperation dealloc]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation isAsynchronous]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation start]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation init]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation initWithFigAssetWriter:trackID:]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation _notifyWhetherMorePassesAreNeeded:timeRanges:forTrackWithID:]
  -[AVAssetWriterInputFigAssetWriterEndPassOperation descriptionForNextPass]


AVAssetWriterInputPassDescriptionInternal : NSObject

AVAssetWriterInputPassDescription : NSObject
 @property  NSArray *sourceTimeRanges

  // instance methods
  -[AVAssetWriterInputPassDescription sourceTimeRanges]
  -[AVAssetWriterInputPassDescription dealloc]
  -[AVAssetWriterInputPassDescription initWithTimeRanges:]
  -[AVAssetWriterInputPassDescription init]


AVVideoCompositionInstructionInternal : NSObject

AVVideoCompositionInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying, AVVideoCompositionInstruction>
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  ^{CGColor=} backgroundColor
 @property  NSArray *layerInstructions
 @property  BOOL enablePostProcessing
 @property  NSArray *requiredSourceTrackIDs
 @property  int passthroughTrackID
 @property  NSArray *requiredSourceSampleDataTrackIDs
 @property  BOOL containsTweening
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVVideoCompositionInstruction supportsSecureCoding]
  +[AVVideoCompositionInstruction initialize]

  // instance methods
  -[AVVideoCompositionInstruction _deepCopy]
  -[AVVideoCompositionInstruction timeRange]
  -[AVVideoCompositionInstruction setTimeRange:]
  -[AVVideoCompositionInstruction encodeWithCoder:]
  -[AVVideoCompositionInstruction dealloc]
  -[AVVideoCompositionInstruction backgroundColor]
  -[AVVideoCompositionInstruction setBackgroundColor:]
  -[AVVideoCompositionInstruction dictionaryRepresentation]
  -[AVVideoCompositionInstruction copyWithZone:]
  -[AVVideoCompositionInstruction mutableCopyWithZone:]
  -[AVVideoCompositionInstruction isEqual:]
  -[AVVideoCompositionInstruction init]
  -[AVVideoCompositionInstruction initWithCoder:]
  -[AVVideoCompositionInstruction layerInstructions]
  -[AVVideoCompositionInstruction enablePostProcessing]
  -[AVVideoCompositionInstruction blendingTransferFunction]
  -[AVVideoCompositionInstruction requiredSourceSampleDataTrackIDs]
  -[AVVideoCompositionInstruction containsTweening]
  -[AVVideoCompositionInstruction requiredSourceTrackIDs]
  -[AVVideoCompositionInstruction passthroughTrackID]
  -[AVVideoCompositionInstruction setLayerInstructions:]
  -[AVVideoCompositionInstruction setEnablePostProcessing:]
  -[AVVideoCompositionInstruction setBlendingTransferFunction:]
  -[AVVideoCompositionInstruction setRequiredSourceSampleDataTrackIDs:]
  -[AVVideoCompositionInstruction _setValuesFromDictionary:]


AVMutableVideoCompositionInstruction : AVVideoCompositionInstruction
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  ^{CGColor=} backgroundColor
 @property  NSArray *layerInstructions
 @property  BOOL enablePostProcessing
 @property  NSArray *requiredSourceSampleDataTrackIDs

  // class methods
  +[AVMutableVideoCompositionInstruction videoCompositionInstruction]

  // instance methods
  -[AVMutableVideoCompositionInstruction timeRange]
  -[AVMutableVideoCompositionInstruction setTimeRange:]
  -[AVMutableVideoCompositionInstruction backgroundColor]
  -[AVMutableVideoCompositionInstruction setBackgroundColor:]
  -[AVMutableVideoCompositionInstruction layerInstructions]
  -[AVMutableVideoCompositionInstruction enablePostProcessing]
  -[AVMutableVideoCompositionInstruction requiredSourceSampleDataTrackIDs]
  -[AVMutableVideoCompositionInstruction setLayerInstructions:]
  -[AVMutableVideoCompositionInstruction setEnablePostProcessing:]
  -[AVMutableVideoCompositionInstruction setRequiredSourceSampleDataTrackIDs:]


AVVideoCompositionLayerInstructionInternal : NSObject

AVVideoCompositionLayerInstruction : NSObject <NSSecureCoding, NSCopying, NSMutableCopying>
 @property  int trackID

  // class methods
  +[AVVideoCompositionLayerInstruction supportsSecureCoding]
  +[AVVideoCompositionLayerInstruction initialize]

  // instance methods
  -[AVVideoCompositionLayerInstruction trackID]
  -[AVVideoCompositionLayerInstruction setTrackID:]
  -[AVVideoCompositionLayerInstruction encodeWithCoder:]
  -[AVVideoCompositionLayerInstruction dealloc]
  -[AVVideoCompositionLayerInstruction copyWithZone:]
  -[AVVideoCompositionLayerInstruction mutableCopyWithZone:]
  -[AVVideoCompositionLayerInstruction isEqual:]
  -[AVVideoCompositionLayerInstruction init]
  -[AVVideoCompositionLayerInstruction initWithCoder:]
  -[AVVideoCompositionLayerInstruction _setTransformRamps:]
  -[AVVideoCompositionLayerInstruction _setOpacityRamps:]
  -[AVVideoCompositionLayerInstruction _setCropRectangleRamps:]
  -[AVVideoCompositionLayerInstruction _setTransformRampFromStartTransform:toEndTransform:timeRange:selector:]
  -[AVVideoCompositionLayerInstruction setTransform:atTime:]
  -[AVVideoCompositionLayerInstruction setTransformRampFromStartTransform:toEndTransform:timeRange:]
  -[AVVideoCompositionLayerInstruction getTransformRampForTime:startTransform:endTransform:timeRange:]
  -[AVVideoCompositionLayerInstruction _setOpacityRampFromStartOpacity:toEndOpacity:timeRange:selector:]
  -[AVVideoCompositionLayerInstruction setOpacity:atTime:]
  -[AVVideoCompositionLayerInstruction setOpacityRampFromStartOpacity:toEndOpacity:timeRange:]
  -[AVVideoCompositionLayerInstruction getOpacityRampForTime:startOpacity:endOpacity:timeRange:]
  -[AVVideoCompositionLayerInstruction _setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:selector:]
  -[AVVideoCompositionLayerInstruction setCropRectangle:atTime:]
  -[AVVideoCompositionLayerInstruction setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:]
  -[AVVideoCompositionLayerInstruction getCropRectangleRampForTime:startCropRectangle:endCropRectangle:timeRange:]
  -[AVVideoCompositionLayerInstruction dictionaryRepresentationWithTimeRange:]
  -[AVVideoCompositionLayerInstruction _setValuesFromDictionary:timeRange:]


AVMutableVideoCompositionLayerInstruction : AVVideoCompositionLayerInstruction
 @property  int trackID

  // class methods
  +[AVMutableVideoCompositionLayerInstruction videoCompositionLayerInstructionWithAssetTrack:]
  +[AVMutableVideoCompositionLayerInstruction videoCompositionLayerInstruction]

  // instance methods
  -[AVMutableVideoCompositionLayerInstruction trackID]
  -[AVMutableVideoCompositionLayerInstruction setTrackID:]
  -[AVMutableVideoCompositionLayerInstruction setTransform:atTime:]
  -[AVMutableVideoCompositionLayerInstruction setTransformRampFromStartTransform:toEndTransform:timeRange:]
  -[AVMutableVideoCompositionLayerInstruction setOpacity:atTime:]
  -[AVMutableVideoCompositionLayerInstruction setOpacityRampFromStartOpacity:toEndOpacity:timeRange:]
  -[AVMutableVideoCompositionLayerInstruction setCropRectangle:atTime:]
  -[AVMutableVideoCompositionLayerInstruction setCropRectangleRampFromStartCropRectangle:toEndCropRectangle:timeRange:]


AVVideoCompositionInternal : NSObject

AVVideoComposition : NSObject <NSCopying, NSMutableCopying>
 @property  NSString *colorPrimaries
 @property  NSString *colorYCbCrMatrix
 @property  NSString *colorTransferFunction
 @property  Class customVideoCompositorClass
 @property  {?=qiIq} frameDuration
 @property  int sourceTrackIDForFrameTiming
 @property  {CGSize=dd} renderSize
 @property  float renderScale
 @property  NSArray *instructions
 @property  AVVideoCompositionCoreAnimationTool *animationTool
 @property  NSArray *sourceSampleDataTrackIDs

  // class methods
  +[AVVideoComposition initialize]
  +[AVVideoComposition videoCompositionWithPropertiesOfAsset:]
  +[AVVideoComposition videoCompositionWithPropertiesOfAsset:completionHandler:]
  +[AVVideoComposition videoCompositionWithPropertiesOfAsset:videoGravity:]
  +[AVVideoComposition _mutableVideoCompositionWithAsset:applyingCIFiltersWithHandler:]
  +[AVVideoComposition videoCompositionWithAsset:applyingCIFiltersWithHandler:]
  +[AVVideoComposition videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:]

  // instance methods
  -[AVVideoComposition _deepCopy]
  -[AVVideoComposition dealloc]
  -[AVVideoComposition copyWithZone:]
  -[AVVideoComposition renderSize]
  -[AVVideoComposition mutableCopyWithZone:]
  -[AVVideoComposition init]
  -[AVVideoComposition instructions]
  -[AVVideoComposition setInstructions:]
  -[AVVideoComposition builtInCompositorName]
  -[AVVideoComposition frameDuration]
  -[AVVideoComposition sourceTrackIDForFrameTiming]
  -[AVVideoComposition renderScale]
  -[AVVideoComposition colorPrimaries]
  -[AVVideoComposition colorYCbCrMatrix]
  -[AVVideoComposition colorTransferFunction]
  -[AVVideoComposition animationTool]
  -[AVVideoComposition _changeSeed]
  -[AVVideoComposition _bumpChangeSeed]
  -[AVVideoComposition setBuiltInCompositorName:]
  -[AVVideoComposition customVideoCompositorClass]
  -[AVVideoComposition setCustomVideoCompositorClass:]
  -[AVVideoComposition _copyFigVideoCompositor:andSession:recyclingSession:forFigRemaker:error:]
  -[AVVideoComposition setFrameDuration:]
  -[AVVideoComposition setSourceTrackIDForFrameTiming:]
  -[AVVideoComposition setRenderSize:]
  -[AVVideoComposition setRenderScale:]
  -[AVVideoComposition _hasLayerAsAuxiliaryTrack]
  -[AVVideoComposition _auxiliaryTrackLayer]
  -[AVVideoComposition _auxiliaryTrackID]
  -[AVVideoComposition _hasPostProcessingLayers]
  -[AVVideoComposition _postProcessingVideoLayer]
  -[AVVideoComposition _postProcessingVideoLayers]
  -[AVVideoComposition _postProcessingRootLayer]
  -[AVVideoComposition setAnimationTool:]
  -[AVVideoComposition sourceSampleDataTrackIDs]
  -[AVVideoComposition setSourceSampleDataTrackIDs:]
  -[AVVideoComposition _serializableInstructions]
  -[AVVideoComposition instructionForFigInstruction:]
  -[AVVideoComposition _isValidReturningExceptionReason:]
  -[AVVideoComposition isValidForAsset:timeRange:validationDelegate:]
  -[AVVideoComposition determineValidityForAsset:timeRange:validationDelegate:completionHandler:]
  -[AVVideoComposition _setFrameDurationForFrameRate:sourceTrackIDForFrameTiming:]
  -[AVVideoComposition setColorPrimaries:]
  -[AVVideoComposition setColorYCbCrMatrix:]
  -[AVVideoComposition setColorTransferFunction:]
  -[AVVideoComposition videoCompositionOutputColorPropertiesWithCustomCompositor:formatDescriptions:colorPrimaries:transferFunction:yCbCrMatrix:]


AVMutableVideoComposition : AVVideoComposition
 @property  Class customVideoCompositorClass
 @property  {?=qiIq} frameDuration
 @property  int sourceTrackIDForFrameTiming
 @property  {CGSize=dd} renderSize
 @property  float renderScale
 @property  NSArray *instructions
 @property  AVVideoCompositionCoreAnimationTool *animationTool
 @property  NSArray *sourceSampleDataTrackIDs

  // class methods
  +[AVMutableVideoComposition videoComposition]
  +[AVMutableVideoComposition videoCompositionWithPropertiesOfAsset:]
  +[AVMutableVideoComposition videoCompositionWithPropertiesOfAsset:completionHandler:]
  +[AVMutableVideoComposition videoCompositionWithPropertiesOfAsset:videoGravity:]
  +[AVMutableVideoComposition videoCompositionWithAsset:applyingCIFiltersWithHandler:]
  +[AVMutableVideoComposition videoCompositionWithAsset:applyingCIFiltersWithHandler:completionHandler:]
  +[AVMutableVideoComposition videoCompositionWithPropertiesOfAsset:prototypeInstruction:]
  +[AVMutableVideoComposition videoCompositionWithPropertiesOfAsset:prototypeInstruction:completionHandler:]

  // instance methods
  -[AVMutableVideoComposition renderSize]
  -[AVMutableVideoComposition instructions]
  -[AVMutableVideoComposition setInstructions:]
  -[AVMutableVideoComposition builtInCompositorName]
  -[AVMutableVideoComposition frameDuration]
  -[AVMutableVideoComposition sourceTrackIDForFrameTiming]
  -[AVMutableVideoComposition renderScale]
  -[AVMutableVideoComposition colorPrimaries]
  -[AVMutableVideoComposition colorYCbCrMatrix]
  -[AVMutableVideoComposition colorTransferFunction]
  -[AVMutableVideoComposition animationTool]
  -[AVMutableVideoComposition setBuiltInCompositorName:]
  -[AVMutableVideoComposition customVideoCompositorClass]
  -[AVMutableVideoComposition setCustomVideoCompositorClass:]
  -[AVMutableVideoComposition setFrameDuration:]
  -[AVMutableVideoComposition setSourceTrackIDForFrameTiming:]
  -[AVMutableVideoComposition setRenderSize:]
  -[AVMutableVideoComposition setRenderScale:]
  -[AVMutableVideoComposition setAnimationTool:]
  -[AVMutableVideoComposition sourceSampleDataTrackIDs]
  -[AVMutableVideoComposition setSourceSampleDataTrackIDs:]
  -[AVMutableVideoComposition setColorPrimaries:]
  -[AVMutableVideoComposition setColorYCbCrMatrix:]
  -[AVMutableVideoComposition setColorTransferFunction:]


AVVideoCompositionCoreAnimationTool : NSObject
  // class methods
  +[AVVideoCompositionCoreAnimationTool videoCompositionCoreAnimationToolWithAdditionalLayer:asTrackID:]
  +[AVVideoCompositionCoreAnimationTool videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayer:inLayer:]
  +[AVVideoCompositionCoreAnimationTool videoCompositionCoreAnimationToolWithPostProcessingAsVideoLayers:inLayer:]

  // instance methods
  -[AVVideoCompositionCoreAnimationTool dealloc]
  -[AVVideoCompositionCoreAnimationTool _hasLayerAsAuxiliaryTrack]
  -[AVVideoCompositionCoreAnimationTool _auxiliaryTrackLayer]
  -[AVVideoCompositionCoreAnimationTool _auxiliaryTrackID]
  -[AVVideoCompositionCoreAnimationTool _hasPostProcessingLayers]
  -[AVVideoCompositionCoreAnimationTool _postProcessingVideoLayers]
  -[AVVideoCompositionCoreAnimationTool _postProcessingRootLayer]
  -[AVVideoCompositionCoreAnimationTool initWithMagicTrackID:animationLayer:videoLayers:]


AVVideoCompositionCoreAnimationToolInternal : NSObject

AVAssetProxyInternal : NSObject

AVAssetProxy : AVAsset
  // class methods
  +[AVAssetProxy assetProxyWithPropertyList:]
  +[AVAssetProxy makePropertyListForMovieProxyHeader:name:]

  // instance methods
  -[AVAssetProxy initWithPropertyList:]
  -[AVAssetProxy _playbackItem]
  -[AVAssetProxy dealloc]
  -[AVAssetProxy isProxy]
  -[AVAssetProxy _formatReader]
  -[AVAssetProxy tracks]
  -[AVAssetProxy _classForTrackInspectors]
  -[AVAssetProxy _figAsset]
  -[AVAssetProxy _assetInspector]
  -[AVAssetProxy _assetInspectorLoader]


AVAssetExportSessionInternal : NSObject

AVAssetExportSession : NSObject
 @property  NSString *presetName
 @property  AVAsset *asset
 @property  NSString *outputFileType
 @property  NSURL *outputURL
 @property  BOOL shouldOptimizeForNetworkUse
 @property  long long status
 @property  NSError *error
 @property  float progress

  // class methods
  +[AVAssetExportSession maximumDurationForPreset:properties:]
  +[AVAssetExportSession allExportPresets]
  +[AVAssetExportSession exportPresetsCompatibleWithAsset:]
  +[AVAssetExportSession determineCompatibilityOfExportPreset:withAsset:outputFileType:completionHandler:]
  +[AVAssetExportSession exportSessionWithAsset:presetName:]
  +[AVAssetExportSession estimatedOutputFileLengthForPreset:duration:properties:]
  +[AVAssetExportSession keyPathsForValuesAffectingEstimatedOutputFileLength]

  // instance methods
  -[AVAssetExportSession progress]
  -[AVAssetExportSession setShouldOptimizeForNetworkUse:]
  -[AVAssetExportSession supportedFileTypes]
  -[AVAssetExportSession timeRange]
  -[AVAssetExportSession setTimeRange:]
  -[AVAssetExportSession setAudioTimePitchAlgorithm:]
  -[AVAssetExportSession directoryForTemporaryFiles]
  -[AVAssetExportSession error]
  -[AVAssetExportSession status]
  -[AVAssetExportSession dealloc]
  -[AVAssetExportSession shouldOptimizeForNetworkUse]
  -[AVAssetExportSession setOutputFileType:]
  -[AVAssetExportSession asset]
  -[AVAssetExportSession setMetadata:]
  -[AVAssetExportSession setMaximizePowerEfficiency:]
  -[AVAssetExportSession audioTimePitchAlgorithm]
  -[AVAssetExportSession setOutputURL:]
  -[AVAssetExportSession setAudioMix:]
  -[AVAssetExportSession metadata]
  -[AVAssetExportSession audioMix]
  -[AVAssetExportSession outputFileType]
  -[AVAssetExportSession maximizePowerEfficiency]
  -[AVAssetExportSession setDirectoryForTemporaryFiles:]
  -[AVAssetExportSession init]
  -[AVAssetExportSession outputURL]
  -[AVAssetExportSession videoComposition]
  -[AVAssetExportSession setVideoComposition:]
  -[AVAssetExportSession customVideoCompositor]
  -[AVAssetExportSession audioTrackGroupHandling]
  -[AVAssetExportSession metadataItemFilter]
  -[AVAssetExportSession estimateMaximumDurationWithCompletionHandler:]
  -[AVAssetExportSession estimateOutputFileLengthWithCompletionHandler:]
  -[AVAssetExportSession initWithAsset:presetName:]
  -[AVAssetExportSession presetName]
  -[AVAssetExportSession determineCompatibleFileTypesWithCompletionHandler:]
  -[AVAssetExportSession AVExportSessionExportAsynchronouslyCompletionHandler]
  -[AVAssetExportSession exportAsynchronouslyWithCompletionHandler:]
  -[AVAssetExportSession cancelExport]
  -[AVAssetExportSession maxDuration]
  -[AVAssetExportSession setMinVideoFrameDuration:]
  -[AVAssetExportSession minVideoFrameDuration]
  -[AVAssetExportSession setVideoFrameRateConversionAlgorithm:]
  -[AVAssetExportSession videoFrameRateConversionAlgorithm]
  -[AVAssetExportSession setPreserveSyncFrames:]
  -[AVAssetExportSession preserveSyncFrames]
  -[AVAssetExportSession estimatedOutputFileLength]
  -[AVAssetExportSession setMetadataItemFilter:]
  -[AVAssetExportSession fileLengthLimit]
  -[AVAssetExportSession setFileLengthLimit:]
  -[AVAssetExportSession setAudioTrackGroupHandling:]
  -[AVAssetExportSession canPerformMultiplePassesOverSourceMediaData]
  -[AVAssetExportSession setCanPerformMultiplePassesOverSourceMediaData:]


AVDelegatingPlaybackCoordinatorPlaybackControlCommand : NSObject
 @property  AVCoordinatedPlaybackParticipant *originator
 @property  NSString *expectedCurrentItemIdentifier

  // instance methods
  -[AVDelegatingPlaybackCoordinatorPlaybackControlCommand initInternal]
  -[AVDelegatingPlaybackCoordinatorPlaybackControlCommand originator]
  -[AVDelegatingPlaybackCoordinatorPlaybackControlCommand init]
  -[AVDelegatingPlaybackCoordinatorPlaybackControlCommand expectedCurrentItemIdentifier]


AVDelegatingPlaybackCoordinatorPlayCommand : AVDelegatingPlaybackCoordinatorPlaybackControlCommand
 @property  float rate
 @property  {?=qiIq} itemTime
 @property  {?=qiIq} hostClockTime

  // instance methods
  -[AVDelegatingPlaybackCoordinatorPlayCommand rate]
  -[AVDelegatingPlaybackCoordinatorPlayCommand dealloc]
  -[AVDelegatingPlaybackCoordinatorPlayCommand originator]
  -[AVDelegatingPlaybackCoordinatorPlayCommand init]
  -[AVDelegatingPlaybackCoordinatorPlayCommand expectedCurrentItemIdentifier]
  -[AVDelegatingPlaybackCoordinatorPlayCommand initWithCoordinator:originator:expectedCurrentItemIdentifier:commandOrderIndex:rate:itemTime:hostClockTime:]
  -[AVDelegatingPlaybackCoordinatorPlayCommand itemTime]
  -[AVDelegatingPlaybackCoordinatorPlayCommand hostClockTime]


AVDelegatingPlaybackCoordinatorBufferingCommand : AVDelegatingPlaybackCoordinatorPlaybackControlCommand
 @property  float anticipatedPlaybackRate
 @property  NSDate *completionDueDate

  // instance methods
  -[AVDelegatingPlaybackCoordinatorBufferingCommand dealloc]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand originator]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand init]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand expectedCurrentItemIdentifier]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand initWithCoordinator:originator:expectedCurrentItemIdentifier:commandOrderIndex:anticipatedPlaybackRate:completionDueDate:]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand anticipatedPlaybackRate]
  -[AVDelegatingPlaybackCoordinatorBufferingCommand completionDueDate]


AVDelegatingPlaybackCoordinatorPauseCommand : AVDelegatingPlaybackCoordinatorPlaybackControlCommand
 @property  BOOL shouldBufferInAnticipationOfPlayback
 @property  float anticipatedPlaybackRate

  // instance methods
  -[AVDelegatingPlaybackCoordinatorPauseCommand dealloc]
  -[AVDelegatingPlaybackCoordinatorPauseCommand originator]
  -[AVDelegatingPlaybackCoordinatorPauseCommand init]
  -[AVDelegatingPlaybackCoordinatorPauseCommand expectedCurrentItemIdentifier]
  -[AVDelegatingPlaybackCoordinatorPauseCommand anticipatedPlaybackRate]
  -[AVDelegatingPlaybackCoordinatorPauseCommand initWithCoordinator:originator:expectedCurrentItemIdentifier:commandOrderIndex:shouldBufferInAnticipationOfPlayback:anticipatedPlaybackRate:]
  -[AVDelegatingPlaybackCoordinatorPauseCommand shouldBufferInAnticipationOfPlayback]


AVDelegatingPlaybackCoordinatorSeekCommand : AVDelegatingPlaybackCoordinatorPlaybackControlCommand
 @property  {?=qiIq} itemTime
 @property  BOOL shouldBufferInAnticipationOfPlayback
 @property  float anticipatedPlaybackRate
 @property  NSDate *completionDueDate

  // instance methods
  -[AVDelegatingPlaybackCoordinatorSeekCommand dealloc]
  -[AVDelegatingPlaybackCoordinatorSeekCommand originator]
  -[AVDelegatingPlaybackCoordinatorSeekCommand init]
  -[AVDelegatingPlaybackCoordinatorSeekCommand expectedCurrentItemIdentifier]
  -[AVDelegatingPlaybackCoordinatorSeekCommand itemTime]
  -[AVDelegatingPlaybackCoordinatorSeekCommand anticipatedPlaybackRate]
  -[AVDelegatingPlaybackCoordinatorSeekCommand completionDueDate]
  -[AVDelegatingPlaybackCoordinatorSeekCommand shouldBufferInAnticipationOfPlayback]
  -[AVDelegatingPlaybackCoordinatorSeekCommand initWithCoordinator:originator:expectedCurrentItemIdentifier:commandOrderIndex:itemTime:shouldPause:shouldBufferInAnticipationOfPlayback:anticipatedPlaybackRate:completionDueDate:]


AVDelegatingPlaybackCoordinator : AVPlaybackCoordinator
 @property  <AVPlaybackCoordinatorPlaybackControlDelegate> *playbackControlDelegate
 @property  NSString *currentItemIdentifier

  // instance methods
  -[AVDelegatingPlaybackCoordinator _updateWaitingPoliciesArrayWithPolicies:]
  -[AVDelegatingPlaybackCoordinator _participantStateForIdentifier:]
  -[AVDelegatingPlaybackCoordinator _setIsInExpanseMediaPlaybackOnAVAudioSession]
  -[AVDelegatingPlaybackCoordinator setMediumLoggingIdentifier:]
  -[AVDelegatingPlaybackCoordinator _doesSuspensionReasonTriggerWaiting:]
  -[AVDelegatingPlaybackCoordinator avfParticipantsForFigParticipantsUUIDs:]
  -[AVDelegatingPlaybackCoordinator coordinationMediumDelegate]
  -[AVDelegatingPlaybackCoordinator suspensionReasons]
  -[AVDelegatingPlaybackCoordinator mediumLoggingIdentifier]
  -[AVDelegatingPlaybackCoordinator _currentWaitingPoliciesArray]
  -[AVDelegatingPlaybackCoordinator setSuspensionReasonsThatTriggerWaiting:]
  -[AVDelegatingPlaybackCoordinator participantForIdentifier:]
  -[AVDelegatingPlaybackCoordinator setParticipantLimit:forWaitingOutSuspensionsWithReason:]
  -[AVDelegatingPlaybackCoordinator _replaceParticipantStates:]
  -[AVDelegatingPlaybackCoordinator otherParticipants]
  -[AVDelegatingPlaybackCoordinator handleReplacementParticipantStateDictionaries:]
  -[AVDelegatingPlaybackCoordinator dealloc]
  -[AVDelegatingPlaybackCoordinator setCoordinationMediumDelegate:]
  -[AVDelegatingPlaybackCoordinator .cxx_destruct]
  -[AVDelegatingPlaybackCoordinator _removeAllParticipantStates]
  -[AVDelegatingPlaybackCoordinator _endSuspension:]
  -[AVDelegatingPlaybackCoordinator setPauseSnapsToMediaTimeOfOriginator:]
  -[AVDelegatingPlaybackCoordinator _removeUnusedTransportControlStates]
  -[AVDelegatingPlaybackCoordinator participantLimitForWaitingOutSuspensionsWithReason:]
  -[AVDelegatingPlaybackCoordinator _endSuspension:proposingNewTime:]
  -[AVDelegatingPlaybackCoordinator trackedTransportControlStateDictionaries]
  -[AVDelegatingPlaybackCoordinator handleRemovalOfParticipant:]
  -[AVDelegatingPlaybackCoordinator pauseSnapsToMediaTimeOfOriginator]
  -[AVDelegatingPlaybackCoordinator _updateOtherParticipantsUsingFigParticipantUUIDs:]
  -[AVDelegatingPlaybackCoordinator _removeParticipantStateWithIdentifier:]
  -[AVDelegatingPlaybackCoordinator expectedItemTimeAtHostTime:]
  -[AVDelegatingPlaybackCoordinator _updateTransportControlStateDictionaryWithTransportControlState:]
  -[AVDelegatingPlaybackCoordinator suspensionReasonsThatTriggerWaiting]
  -[AVDelegatingPlaybackCoordinator handleNewParticipantStateDictionary:]
  -[AVDelegatingPlaybackCoordinator _transportControlStateForItemIdentifier:]
  -[AVDelegatingPlaybackCoordinator _updateParticipantStateDictionaryWithParticipantState:]
  -[AVDelegatingPlaybackCoordinator handleNewTransportControlStateDictionary:]
  -[AVDelegatingPlaybackCoordinator _removeAllTransportControlStates]
  -[AVDelegatingPlaybackCoordinator _updateSuspensionReasons:]
  -[AVDelegatingPlaybackCoordinator beginSuspensionForReason:]
  -[AVDelegatingPlaybackCoordinator participantStates]
  -[AVDelegatingPlaybackCoordinator _prepareToInitiatePlayback]
  -[AVDelegatingPlaybackCoordinator initWithPlaybackControlDelegate:]
  -[AVDelegatingPlaybackCoordinator playbackControlDelegate]
  -[AVDelegatingPlaybackCoordinator figTimelineCoordinatorConfigQueue]
  -[AVDelegatingPlaybackCoordinator _latestRateCommandOrderIndex]
  -[AVDelegatingPlaybackCoordinator _latestSeekCommandOrderIndex]
  -[AVDelegatingPlaybackCoordinator coordinateRateChangeToRate:options:]
  -[AVDelegatingPlaybackCoordinator coordinateSeekToTime:options:]
  -[AVDelegatingPlaybackCoordinator currentItemIdentifier]
  -[AVDelegatingPlaybackCoordinator transitionToItemWithIdentifier:proposingInitialTimingBasedOnTimebase:]
  -[AVDelegatingPlaybackCoordinator reapplyCurrentItemStateToPlaybackControlDelegate]
  -[AVDelegatingPlaybackCoordinator _waitingPoliciesArray]
  -[AVDelegatingPlaybackCoordinator _setWaitingPolicies:]
  -[AVDelegatingPlaybackCoordinator applyFigPauseSnapsToMediaTimeOfOriginator]


AVAudioMixEffectParameters : NSObject <NSCopying>
  // instance methods
  -[AVAudioMixEffectParameters copyWithZone:]
  -[AVAudioMixEffectParameters init]


AVAudioMixSweepFilterEffectParameters : AVAudioMixEffectParameters
 @property  int minimumCutOffFrequency
 @property  int maximumCutOffFrequency
 @property  float bypassThreshold
 @property  float sweepValue

  // class methods
  +[AVAudioMixSweepFilterEffectParameters sweepFilterEffectParametersWithMinimumCutOffFrequency:maximumCutOffFrequency:bypassThreshold:sweepValue:]

  // instance methods
  -[AVAudioMixSweepFilterEffectParameters dealloc]
  -[AVAudioMixSweepFilterEffectParameters isEqual:]
  -[AVAudioMixSweepFilterEffectParameters init]
  -[AVAudioMixSweepFilterEffectParameters initWithMinimumCutOffFrequency:maximumCutOffFrequency:bypassThreshold:sweepValue:]
  -[AVAudioMixSweepFilterEffectParameters sweepFilterEffectWithSweepValue:]
  -[AVAudioMixSweepFilterEffectParameters minimumCutOffFrequency]
  -[AVAudioMixSweepFilterEffectParameters maximumCutOffFrequency]
  -[AVAudioMixSweepFilterEffectParameters bypassThreshold]
  -[AVAudioMixSweepFilterEffectParameters sweepValue]


AVAudioMixSweepFilterEffectParametersInternal : NSObject

AVSynchronizedLayerInternal : NSObject

AVSynchronizedLayer : CALayer
 @property  AVPlayerItem *playerItem

  // class methods
  +[AVSynchronizedLayer initialize]
  +[AVSynchronizedLayer synchronizedLayerWithPlayerItem:]

  // instance methods
  -[AVSynchronizedLayer _isVisible]
  -[AVSynchronizedLayer layerDidBecomeVisible:]
  -[AVSynchronizedLayer dealloc]
  -[AVSynchronizedLayer playerItem]
  -[AVSynchronizedLayer init]
  -[AVSynchronizedLayer _popAllOldPlayerItems]
  -[AVSynchronizedLayer _removeSelfFromPlayerItem:]
  -[AVSynchronizedLayer _updatePlayerItemState]
  -[AVSynchronizedLayer setPlayerItem:]


AVAssetWriterInputMetadataAdaptorInternal : NSObject

AVAssetWriterInputMetadataAdaptor : NSObject
 @property  AVAssetWriterInput *assetWriterInput

  // class methods
  +[AVAssetWriterInputMetadataAdaptor initialize]
  +[AVAssetWriterInputMetadataAdaptor assetWriterInputMetadataAdaptorWithAssetWriterInput:]

  // instance methods
  -[AVAssetWriterInputMetadataAdaptor dealloc]
  -[AVAssetWriterInputMetadataAdaptor init]
  -[AVAssetWriterInputMetadataAdaptor initWithAssetWriterInput:]
  -[AVAssetWriterInputMetadataAdaptor assetWriterInput]
  -[AVAssetWriterInputMetadataAdaptor appendTimedMetadataGroup:]


AVSampleBufferAudioRendererInternal : NSObject
  // instance methods
  -[AVSampleBufferAudioRendererInternal .cxx_destruct]


AVSampleBufferAudioRenderer : NSObject <AVContentKeyRecipient, AVContentKeyRecipientInternal, AVMediaDataRequesterConsumer, AVQueuedSampleBufferRenderingInternal, AVQueuedSampleBufferRendering>
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  long long status
 @property  NSError *error
 @property  NSString *audioOutputDeviceUniqueID
 @property  NSString *audioTimePitchAlgorithm
 @property  unsigned long allowedAudioSpatializationFormats
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  ^{OpaqueCMTimebase=} timebase
 @property  BOOL readyForMoreMediaData
 @property  BOOL hasSufficientMediaDataForReliablePlaybackStart

  // class methods
  +[AVSampleBufferAudioRenderer sampleBufferAudioRenderer]
  +[AVSampleBufferAudioRenderer currentFigAudioRendererFactory]
  +[AVSampleBufferAudioRenderer setFigAudioRendererFactory:forQueue:]

  // instance methods
  -[AVSampleBufferAudioRenderer stopRequestingMediaData]
  -[AVSampleBufferAudioRenderer requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVSampleBufferAudioRenderer setSTSLabel:]
  -[AVSampleBufferAudioRenderer setOutputContext:]
  -[AVSampleBufferAudioRenderer setAudioTimePitchAlgorithm:]
  -[AVSampleBufferAudioRenderer isReadyForMoreMediaData]
  -[AVSampleBufferAudioRenderer error]
  -[AVSampleBufferAudioRenderer expire]
  -[AVSampleBufferAudioRenderer status]
  -[AVSampleBufferAudioRenderer dealloc]
  -[AVSampleBufferAudioRenderer isMuted]
  -[AVSampleBufferAudioRenderer outputContext]
  -[AVSampleBufferAudioRenderer setVolume:]
  -[AVSampleBufferAudioRenderer volume]
  -[AVSampleBufferAudioRenderer setMuted:]
  -[AVSampleBufferAudioRenderer audioTimePitchAlgorithm]
  -[AVSampleBufferAudioRenderer flush]
  -[AVSampleBufferAudioRenderer init]
  -[AVSampleBufferAudioRenderer setAudioSession:]
  -[AVSampleBufferAudioRenderer audioSession]
  -[AVSampleBufferAudioRenderer mayRequireContentKeysForMediaDataProcessing]
  -[AVSampleBufferAudioRenderer _attachToContentKeySession:contentKeyBoss:failedSinceAlreadyAttachedToAnotherSession:]
  -[AVSampleBufferAudioRenderer contentKeySession]
  -[AVSampleBufferAudioRenderer _attachedToExternalContentKeySession]
  -[AVSampleBufferAudioRenderer audioOutputDeviceUniqueID]
  -[AVSampleBufferAudioRenderer setAudioOutputDeviceUniqueID:]
  -[AVSampleBufferAudioRenderer allowedAudioSpatializationFormats]
  -[AVSampleBufferAudioRenderer timebase]
  -[AVSampleBufferAudioRenderer audioTapProcessor]
  -[AVSampleBufferAudioRenderer setAudioTapProcessor:]
  -[AVSampleBufferAudioRenderer setAllowedAudioSpatializationFormats:]
  -[AVSampleBufferAudioRenderer copyFigSampleBufferAudioRenderer:]
  -[AVSampleBufferAudioRenderer setRenderSynchronizer:error:]
  -[AVSampleBufferAudioRenderer enqueueSampleBuffer:]
  -[AVSampleBufferAudioRenderer hasSufficientMediaDataForReliablePlaybackStart]
  -[AVSampleBufferAudioRenderer _initializeTimebase]
  -[AVSampleBufferAudioRenderer _triggerMediaRequestCallback]
  -[AVSampleBufferAudioRenderer _wasFlushedAutomaticallyAtTime:]
  -[AVSampleBufferAudioRenderer _installNotificationHandlers]
  -[AVSampleBufferAudioRenderer _uninstallNotificationHandlers]
  -[AVSampleBufferAudioRenderer _transitionToStatus:error:]
  -[AVSampleBufferAudioRenderer _transitionToFailedStatusWithOSStatus:]
  -[AVSampleBufferAudioRenderer willTrimShortDurationSamples]
  -[AVSampleBufferAudioRenderer flushFromSourceTime:completionHandler:]


AVFigSampleBufferAudioRendererFactory : NSObject <AVFigSampleBufferAudioRendererFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigSampleBufferAudioRendererFactory createAudioRendererWithAllocator:options:error:]


AVFragmentedAssetInternal : NSObject

AVFragmentedAsset : AVURLAsset <AVFragmentMinding>
 @property  NSArray *tracks
 @property  BOOL associatedWithFragmentMinder

  // class methods
  +[AVFragmentedAsset expectsPropertyRevisedNotifications]
  +[AVFragmentedAsset fragmentedAssetWithURL:options:]

  // instance methods
  -[AVFragmentedAsset tracksWithMediaType:]
  -[AVFragmentedAsset initWithURL:options:]
  -[AVFragmentedAsset tracksWithMediaCharacteristic:]
  -[AVFragmentedAsset tracks]
  -[AVFragmentedAsset trackWithTrackID:]
  -[AVFragmentedAsset _setIsAssociatedWithFragmentMinder:]
  -[AVFragmentedAsset isAssociatedWithFragmentMinder]
  -[AVFragmentedAsset _mindsFragments]
  -[AVFragmentedAsset _classForAssetTracks]


AVFragmentedAssetMinderInternal : NSObject

AVFragmentedAssetMinder : NSObject
 @property  double mindingInterval
 @property  NSArray *assets

  // class methods
  +[AVFragmentedAssetMinder fragmentedAssetMinderWithAsset:mindingInterval:]

  // instance methods
  -[AVFragmentedAssetMinder assets]
  -[AVFragmentedAssetMinder dealloc]
  -[AVFragmentedAssetMinder init]
  -[AVFragmentedAssetMinder mindingInterval]
  -[AVFragmentedAssetMinder initWithAsset:mindingInterval:]
  -[AVFragmentedAssetMinder _throwsWhenAlreadyMindedAssetIsAdded]
  -[AVFragmentedAssetMinder setMindingInterval:]
  -[AVFragmentedAssetMinder _setMindingInterval:removeAllAssets:]
  -[AVFragmentedAssetMinder addFragmentedAsset:]
  -[AVFragmentedAssetMinder removeFragmentedAsset:]


AVFragmentedAssetTrackInternal : NSObject

AVFragmentedAssetTrack : AVAssetTrack
  // class methods
  +[AVFragmentedAssetTrack expectsPropertyRevisedNotifications]


AVExternalProtectionMonitorInternal : NSObject

AVExternalProtectionMonitor : NSObject
 @property  long long externalProtectionState

  // instance methods
  -[AVExternalProtectionMonitor dealloc]
  -[AVExternalProtectionMonitor init]
  -[AVExternalProtectionMonitor externalProtectionState]


AVOutputDeviceGroup : NSObject
 @property  BOOL receivesLongFormAudioFromLocalDevice
 @property  NSArray *outputDevices
 @property  AVOutputDevice *groupLeader
 @property  float volume
 @property  long long volumeControlType

  // class methods
  +[AVOutputDeviceGroup initialize]
  +[AVOutputDeviceGroup sharedAudioPresentationOutputGroup]
  +[AVOutputDeviceGroup outputDeviceGroupWithRemoteGroupID:syncController:]

  // instance methods
  -[AVOutputDeviceGroup impl]
  -[AVOutputDeviceGroup groupLeader]
  -[AVOutputDeviceGroup dealloc]
  -[AVOutputDeviceGroup outputDevices]
  -[AVOutputDeviceGroup setVolume:]
  -[AVOutputDeviceGroup volume]
  -[AVOutputDeviceGroup volumeControlType]
  -[AVOutputDeviceGroup isEqual:]
  -[AVOutputDeviceGroup addOutputDevice:withOptions:completionHandler:]
  -[AVOutputDeviceGroup receivesLongFormAudioFromLocalDevice]
  -[AVOutputDeviceGroup initWithOutputDeviceGroupImpl:]
  -[AVOutputDeviceGroup outputDeviceGroupImpl:didChangeOutputDevicesWithInitiator:]
  -[AVOutputDeviceGroup removeOutputDevice:withOptions:completionHandler:]
  -[AVOutputDeviceGroup outputDeviceGroupImplDidChangeVolume:]
  -[AVOutputDeviceGroup outputDeviceGroupImplDidChangeVolumeControlType:]


AVOutputDeviceGroupMembershipChangeResult : NSObject
 @property  long long status
 @property  NSString *cancellationReason

  // instance methods
  -[AVOutputDeviceGroupMembershipChangeResult status]
  -[AVOutputDeviceGroupMembershipChangeResult dealloc]
  -[AVOutputDeviceGroupMembershipChangeResult cancellationReason]
  -[AVOutputDeviceGroupMembershipChangeResult initWithStatus:cancellationReason:]


AVPlayerItemMetadataOutputInternal : NSObject

AVPlayerItemMetadataOutput : AVPlayerItemOutput
 @property  NSDictionary *figMetadataOutputsDictionaryOptions
 @property  <AVPlayerItemMetadataOutputPushDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  double advanceIntervalForDelegateInvocation

  // class methods
  +[AVPlayerItemMetadataOutput initialize]

  // instance methods
  -[AVPlayerItemMetadataOutput delegate]
  -[AVPlayerItemMetadataOutput dealloc]
  -[AVPlayerItemMetadataOutput delegateQueue]
  -[AVPlayerItemMetadataOutput _collectUncollectables]
  -[AVPlayerItemMetadataOutput initWithIdentifiers:]
  -[AVPlayerItemMetadataOutput _attachToPlayerItem:]
  -[AVPlayerItemMetadataOutput setDelegate:queue:]
  -[AVPlayerItemMetadataOutput init]
  -[AVPlayerItemMetadataOutput _detachFromPlayerItem]
  -[AVPlayerItemMetadataOutput advanceIntervalForDelegateInvocation]
  -[AVPlayerItemMetadataOutput setAdvanceIntervalForDelegateInvocation:]
  -[AVPlayerItemMetadataOutput _signalFlush]
  -[AVPlayerItemMetadataOutput _figMetadataOutputsDictionaryOptions]
  -[AVPlayerItemMetadataOutput _pushTimedMetadataGroups:fromPlayerItemTrack:]


AVVideoCompositionRenderHintInternal : NSObject

AVVideoCompositionRenderHint : NSObject
 @property  {?=qiIq} startCompositionTime
 @property  {?=qiIq} endCompositionTime

  // instance methods
  -[AVVideoCompositionRenderHint dealloc]
  -[AVVideoCompositionRenderHint initWithStartCompositionTime:endCompositionTime:subsequentStartCompositionTime:subsequentEndCompositionTime:]
  -[AVVideoCompositionRenderHint startCompositionTime]
  -[AVVideoCompositionRenderHint endCompositionTime]
  -[AVVideoCompositionRenderHint subsequentStartCompositionTime]
  -[AVVideoCompositionRenderHint subsequentEndCompositionTime]


AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl : NSObject <AVOutputDeviceCommunicationChannelImpl>
 @property  AVOutputDeviceCommunicationChannel *parentChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl dealloc]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl close]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl .cxx_destruct]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl _didReceiveData:]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl sendData:completionHandler:]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl parentChannel]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl setParentChannel:]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl initWithRemoteControlSession:]
  -[AVFigEndpointRemoteControlSessionOutputDeviceCommunicationChannelImpl _didCloseCommunicationChannel]


AVOutputDeviceAuthorizationSessionInternal : NSObject
  // instance methods
  -[AVOutputDeviceAuthorizationSessionInternal .cxx_destruct]


AVOutputDeviceAuthorizationSession : NSObject
 @property  <AVOutputDeviceAuthorizationSessionDelegate> *delegate

  // class methods
  +[AVOutputDeviceAuthorizationSession initialize]
  +[AVOutputDeviceAuthorizationSession sharedAuthorizationSession]
  +[AVOutputDeviceAuthorizationSession outputDeviceAuthorizationSessionWithEndpointUIAgent:]

  // instance methods
  -[AVOutputDeviceAuthorizationSession outputDeviceAuthorizationSessionImplDidExpireWithReplacementImpl:]
  -[AVOutputDeviceAuthorizationSession setDelegate:]
  -[AVOutputDeviceAuthorizationSession impl]
  -[AVOutputDeviceAuthorizationSession delegate]
  -[AVOutputDeviceAuthorizationSession dealloc]
  -[AVOutputDeviceAuthorizationSession outputDeviceAuthorizationSessionImpl:didProvideAuthorizationRequest:]
  -[AVOutputDeviceAuthorizationSession outputDeviceAuthorizationSessionImpl:shouldRetryAuthorizationRequest:reason:]
  -[AVOutputDeviceAuthorizationSession initWithOutputDeviceAuthorizationSessionImpl:]


AVOutputDeviceAuthorizationRequestInternal : NSObject

AVOutputDeviceAuthorizationRequest : NSObject
 @property  long long status
 @property  NSError *error
 @property  NSString *ID
 @property  AVOutputDevice *outputDevice
 @property  NSString *authorizationTokenType

  // instance methods
  -[AVOutputDeviceAuthorizationRequest ID]
  -[AVOutputDeviceAuthorizationRequest impl]
  -[AVOutputDeviceAuthorizationRequest error]
  -[AVOutputDeviceAuthorizationRequest status]
  -[AVOutputDeviceAuthorizationRequest dealloc]
  -[AVOutputDeviceAuthorizationRequest outputDevice]
  -[AVOutputDeviceAuthorizationRequest cancel]
  -[AVOutputDeviceAuthorizationRequest initWithOutputDeviceAuthorizationRequestImpl:]
  -[AVOutputDeviceAuthorizationRequest authorizationTokenType]
  -[AVOutputDeviceAuthorizationRequest respondWithAuthorizationToken:completionHandler:]


AVTimeFormatterInternal : NSObject

AVTimeFormatter : NSFormatter
 @property  long long style
 @property  double formatTemplate
 @property  BOOL fullWidth

  // instance methods
  -[AVTimeFormatter isRightToLeft]
  -[AVTimeFormatter stringFromSeconds:]
  -[AVTimeFormatter setCachedDateFormatterTemplate:]
  -[AVTimeFormatter getObjectValue:forString:errorDescription:]
  -[AVTimeFormatter cachedDateFormatterFormat]
  -[AVTimeFormatter setCachedDateFormatterFormat:]
  -[AVTimeFormatter setNumberFormatterWithTwoMinimumIntegerDigits:]
  -[AVTimeFormatter encodeWithCoder:]
  -[AVTimeFormatter style]
  -[AVTimeFormatter isFullWidth]
  -[AVTimeFormatter dealloc]
  -[AVTimeFormatter numberFormatterWithTwoMinimumIntegerDigits]
  -[AVTimeFormatter stringFromTimeInterval:]
  -[AVTimeFormatter setIsRightToLeft:]
  -[AVTimeFormatter numberFormatterWithOneMinimumIntegerDigits]
  -[AVTimeFormatter locale]
  -[AVTimeFormatter setFormatTemplate:]
  -[AVTimeFormatter setLocale:]
  -[AVTimeFormatter copyWithZone:]
  -[AVTimeFormatter setFullWidth:]
  -[AVTimeFormatter setNumberFormatterWithOneMinimumIntegerDigits:]
  -[AVTimeFormatter formatTemplate]
  -[AVTimeFormatter stringForObjectValue:]
  -[AVTimeFormatter cachedDateFormatterTemplate]
  -[AVTimeFormatter setStyle:]
  -[AVTimeFormatter init]
  -[AVTimeFormatter stringFromCMTime:]
  -[AVTimeFormatter initWithCoder:]


AVExternalPlaybackMonitorInternal : NSObject

AVExternalPlaybackMonitor : NSObject
 @property  BOOL airPlayVideoActive
 @property  BOOL airPlayVideoPlaying

  // class methods
  +[AVExternalPlaybackMonitor initialize]
  +[AVExternalPlaybackMonitor longFormVideoExternalPlaybackMonitor]

  // instance methods
  -[AVExternalPlaybackMonitor dealloc]
  -[AVExternalPlaybackMonitor init]
  -[AVExternalPlaybackMonitor isAirPlayVideoActive]
  -[AVExternalPlaybackMonitor initWithFigRoutingSessionManager:]
  -[AVExternalPlaybackMonitor isAirPlayVideoPlaying]


AVSampleBufferVideoOutputInternal : NSObject

AVSampleBufferVideoOutput : NSObject
 @property  <AVSampleBufferVideoOutputPullDelegate> *outputDelegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue

  // instance methods
  -[AVSampleBufferVideoOutput dealloc]
  -[AVSampleBufferVideoOutput delegateQueue]
  -[AVSampleBufferVideoOutput _weakReference]
  -[AVSampleBufferVideoOutput init]
  -[AVSampleBufferVideoOutput setUpWithOutputSettings:outputSettingsArePixelBufferAttributes:withExceptionReason:]
  -[AVSampleBufferVideoOutput setOutputDelegate:queue:]
  -[AVSampleBufferVideoOutput outputDelegate]
  -[AVSampleBufferVideoOutput _copyPixelBufferForItemTimeWithOptions:itemTimeForDisplay:options:]
  -[AVSampleBufferVideoOutput hasNewPixelBufferForSourceTime:]
  -[AVSampleBufferVideoOutput copyPixelBufferForSourceTime:sourceTimeForDisplay:]
  -[AVSampleBufferVideoOutput copyLastPixelBuffer:]
  -[AVSampleBufferVideoOutput _configureWithVideoQueue:]
  -[AVSampleBufferVideoOutput _resetLastImageTime]
  -[AVSampleBufferVideoOutput _visualContext]
  -[AVSampleBufferVideoOutput _dispatchOutputSequenceWasFlushed]


AVUXMDisplayManager : NSObject
 @property  AVDisplayCriteria *preferredDisplayCriteria

  // class methods
  +[AVUXMDisplayManager sharedAVKitUXMDisplayManager]

  // instance methods
  -[AVUXMDisplayManager preferredDisplayCriteria]
  -[AVUXMDisplayManager initInternal]
  -[AVUXMDisplayManager dealloc]
  -[AVUXMDisplayManager init]
  -[AVUXMDisplayManager currentUXMDisplayCriteria]
  -[AVUXMDisplayManager _updateUXMWithDisplayCriteriaWithLock:]
  -[AVUXMDisplayManager _updateUXMWithDisplayCriteria:]
  -[AVUXMDisplayManager setPreferredDisplayCriteria:]


AVExecutionEnvironment : NSObject
 @property  NSString *platformIdentifier

  // class methods
  +[AVExecutionEnvironment resetPlatformIdentifierForQueue:]
  +[AVExecutionEnvironment setPlatformIdentifier:forQueue:]
  +[AVExecutionEnvironment initialize]
  +[AVExecutionEnvironment currentPlatformIdentifier]
  +[AVExecutionEnvironment sharedExecutionEnvironment]

  // instance methods
  -[AVExecutionEnvironment platformIdentifier]


AVFragmentedMovie : AVMovie <AVFragmentMinding>
 @property  NSArray *tracks
 @property  BOOL associatedWithFragmentMinder

  // class methods
  +[AVFragmentedMovie expectsPropertyRevisedNotifications]

  // instance methods
  -[AVFragmentedMovie tracksWithMediaType:]
  -[AVFragmentedMovie initWithURL:options:]
  -[AVFragmentedMovie tracksWithMediaCharacteristic:]
  -[AVFragmentedMovie tracks]
  -[AVFragmentedMovie trackWithTrackID:]
  -[AVFragmentedMovie _setIsAssociatedWithFragmentMinder:]
  -[AVFragmentedMovie isAssociatedWithFragmentMinder]
  -[AVFragmentedMovie _mindsFragments]
  -[AVFragmentedMovie _needsLegacyChangeNotifications]
  -[AVFragmentedMovie _classForMovieTracks]


AVFragmentedMovieMinder : AVFragmentedAssetMinder
 @property  double mindingInterval
 @property  NSArray *movies

  // class methods
  +[AVFragmentedMovieMinder fragmentedMovieMinderWithMovie:mindingInterval:]

  // instance methods
  -[AVFragmentedMovieMinder mindingInterval]
  -[AVFragmentedMovieMinder _throwsWhenAlreadyMindedAssetIsAdded]
  -[AVFragmentedMovieMinder setMindingInterval:]
  -[AVFragmentedMovieMinder initWithMovie:mindingInterval:]
  -[AVFragmentedMovieMinder movies]
  -[AVFragmentedMovieMinder addFragmentedMovie:]
  -[AVFragmentedMovieMinder removeFragmentedMovie:]


AVFragmentedMovieTrackInternal : NSObject

AVFragmentedMovieTrack : AVMovieTrack
  // class methods
  +[AVFragmentedMovieTrack expectsPropertyRevisedNotifications]

  // instance methods
  -[AVFragmentedMovieTrack .cxx_destruct]


AVSynchronousBlockScheduler : NSObject <AVBlockScheduler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVSynchronousBlockScheduler scheduleBlock:]


AVSerializedMostlySynchronousReentrantBlockScheduler : NSObject <AVBlockScheduler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVSerializedMostlySynchronousReentrantBlockScheduler initialize]

  // instance methods
  -[AVSerializedMostlySynchronousReentrantBlockScheduler dealloc]
  -[AVSerializedMostlySynchronousReentrantBlockScheduler scheduleBlock:]
  -[AVSerializedMostlySynchronousReentrantBlockScheduler init]


AVMediaDataRequester : NSObject
 @property  NSObject<OS_dispatch_queue> *requestQueue
 @property  @? requestBlock

  // instance methods
  -[AVMediaDataRequester requestQueue]
  -[AVMediaDataRequester dealloc]
  -[AVMediaDataRequester invalidate]
  -[AVMediaDataRequester init]
  -[AVMediaDataRequester initWithMediaDataConsumer:requestQueue:requestBlock:]
  -[AVMediaDataRequester startRequestingMediaData]
  -[AVMediaDataRequester _setInvalidatePending]
  -[AVMediaDataRequester _isInvalidatePending]
  -[AVMediaDataRequester _requestMediaDataIfReady]
  -[AVMediaDataRequester requestBlock]


AVOutputDeviceInternal : NSObject
  // instance methods
  -[AVOutputDeviceInternal .cxx_destruct]


AVOutputDevice : NSObject
  // class methods
  +[AVOutputDevice initialize]
  +[AVOutputDevice sharedLocalDevice]
  +[AVOutputDevice localDeviceWithCompletion:]
  +[AVOutputDevice localDeviceDidChange]
  +[AVOutputDevice prefersRouteDescriptors]
  +[AVOutputDevice canSyncController:supportRoute:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:volumeController:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:routeDiscoverer:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:routeDiscoverer:syncController:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:routingContextFactory:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:]
  +[AVOutputDevice outputDeviceWithRouteDescriptor:syncController:]
  +[AVOutputDevice outputDeviceWithFigEndpoint:]
  +[AVOutputDevice outputDeviceWithFigEndpoint:volumeController:]
  +[AVOutputDevice outputDeviceWithFigEndpoint:routingContextFactory:]

  // instance methods
  -[AVOutputDevice deviceSubType]
  -[AVOutputDevice serialNumber]
  -[AVOutputDevice logicalDeviceID]
  -[AVOutputDevice allowsHeadTrackedSpatialAudio]
  -[AVOutputDevice isAppleAccessory]
  -[AVOutputDevice increaseVolumeByCount:]
  -[AVOutputDevice setCurrentBluetoothListeningMode:]
  -[AVOutputDevice canSetVolume]
  -[AVOutputDevice deviceID]
  -[AVOutputDevice isGroupLeader]
  -[AVOutputDevice clusterType]
  -[AVOutputDevice currentBluetoothListeningMode]
  -[AVOutputDevice supportsBluetoothSharing]
  -[AVOutputDevice canAccessRemoteAssets]
  -[AVOutputDevice supportsBufferedAirPlay]
  -[AVOutputDevice airPlayProperties]
  -[AVOutputDevice isClusterLeader]
  -[AVOutputDevice hasBatteryLevel]
  -[AVOutputDevice updateFrecencyScore]
  -[AVOutputDevice batteryLevel]
  -[AVOutputDevice modelID]
  -[AVOutputDevice canRelayCommunicationChannel]
  -[AVOutputDevice availableBluetoothListeningModes]
  -[AVOutputDevice canFetchMediaDataFromSender]
  -[AVOutputDevice canCommunicateWithAllLogicalDeviceMembers]
  -[AVOutputDevice configuredClusterSize]
  -[AVOutputDevice groupContainsGroupLeader]
  -[AVOutputDevice canPlayEncryptedProgressiveDownloadAssets]
  -[AVOutputDevice canAccessiCloudMusicLibrary]
  -[AVOutputDevice firmwareVersion]
  -[AVOutputDevice connectedPairedDevices]
  -[AVOutputDevice requiresAuthorization]
  -[AVOutputDevice onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVOutputDevice ID]
  -[AVOutputDevice communicationChannelDelegate]
  -[AVOutputDevice openCommunicationChannelWithOptions:completionHandler:]
  -[AVOutputDevice canAccessAppleMusic]
  -[AVOutputDevice impl]
  -[AVOutputDevice groupID]
  -[AVOutputDevice setSecondDisplayMode:completionHandler:]
  -[AVOutputDevice allClusterMembers]
  -[AVOutputDevice clusterID]
  -[AVOutputDevice dealloc]
  -[AVOutputDevice decreaseVolumeByCount:]
  -[AVOutputDevice supportsFitnessDataDestination]
  -[AVOutputDevice headTrackedSpatialAudioMode]
  -[AVOutputDevice canBeGrouped]
  -[AVOutputDevice supportsHeadTrackedSpatialAudio]
  -[AVOutputDevice isHeadTrackedSpatialAudioActive]
  -[AVOutputDevice automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVOutputDevice outputDeviceImplDidChangeProposedGroupID:]
  -[AVOutputDevice outputDeviceImplDidChangeVolumeControlType:]
  -[AVOutputDevice producesLowFidelityAudio]
  -[AVOutputDevice participatesInGroupPlayback]
  -[AVOutputDevice setAllowsHeadTrackedSpatialAudio:error:]
  -[AVOutputDevice setVolume:]
  -[AVOutputDevice setCurrentBluetoothListeningMode:error:]
  -[AVOutputDevice deviceType]
  -[AVOutputDevice configureUsingBlock:completionHandler:]
  -[AVOutputDevice volume]
  -[AVOutputDevice HAPConformance]
  -[AVOutputDevice frecencyScore]
  -[AVOutputDevice clusteredDeviceDescriptions]
  -[AVOutputDevice proposedGroupID]
  -[AVOutputDevice outputDeviceImplDidChangeVolume:]
  -[AVOutputDevice deviceClusterMembers]
  -[AVOutputDevice identifyingMACAddress]
  -[AVOutputDevice configureUsingBlock:options:completionHandler:]
  -[AVOutputDevice isEligibleToBePredictedOutputDevice]
  -[AVOutputDevice openCommunicationChannelToDestination:options:completionHandler:]
  -[AVOutputDevice name]
  -[AVOutputDevice manufacturer]
  -[AVOutputDevice deviceName]
  -[AVOutputDevice canBeGroupLeader]
  -[AVOutputDevice communicationChannelManager:didReceiveData:fromCommunicationChannel:]
  -[AVOutputDevice isLogicalDeviceLeader]
  -[AVOutputDevice setCommunicationChannelDelegate:]
  -[AVOutputDevice setSecondDisplayEnabled:]
  -[AVOutputDevice deviceFeatures]
  -[AVOutputDevice setHeadTrackedSpatialAudioMode:error:]
  -[AVOutputDevice volumeControlType]
  -[AVOutputDevice outputDeviceImplDidChangeCanChangeVolume:]
  -[AVOutputDevice figEndpointOutputDeviceImpl]
  -[AVOutputDevice communicationChannelManager:didCloseCommunicationChannel:]
  -[AVOutputDevice isInUseByPairedDevice]
  -[AVOutputDevice isEqual:]
  -[AVOutputDevice initWithOutputDeviceImpl:commChannelManager:]
  -[AVOutputDevice activatedDeviceClusterMembers]
  -[AVOutputDevice init]
  -[AVOutputDevice presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[AVOutputDevice modelSpecificInformation]


AVOutputDeviceFrecencyManager : NSObject
  // class methods
  +[AVOutputDeviceFrecencyManager _frecentsWriter]
  +[AVOutputDeviceFrecencyManager _frecentsContainerPath]
  +[AVOutputDeviceFrecencyManager _frecentsFilePath]
  +[AVOutputDeviceFrecencyManager frecencyScoreForDeviceID:]
  +[AVOutputDeviceFrecencyManager updateFrecencyListForDeviceID:]
  +[AVOutputDeviceFrecencyManager _migrateFrecentsFromCFPreferencesToFrecentsFilePath:]
  +[AVOutputDeviceFrecencyManager _applicationSupportPath]
  +[AVOutputDeviceFrecencyManager _frecentsReaderAfterMigrationIfNecessary]


AVOutputDeviceFrecentsReader : NSObject <AVOutputDeviceFrecentsReading>
 @property  NSArray *deviceIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVOutputDeviceFrecentsReader dealloc]
  -[AVOutputDeviceFrecentsReader frecencyInfoForDeviceWithID:]
  -[AVOutputDeviceFrecentsReader deviceIDs]
  -[AVOutputDeviceFrecentsReader init]
  -[AVOutputDeviceFrecentsReader initWithFrecentsFilePath:error:]


AVOutputDeviceFrecentsWriter : NSObject <AVOutputDeviceFrecentsWriting>
 @property  long long numberOfKeysToBeSet
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVOutputDeviceFrecentsWriter dealloc]
  -[AVOutputDeviceFrecentsWriter init]
  -[AVOutputDeviceFrecentsWriter setFrecencyInfo:forDeviceID:]
  -[AVOutputDeviceFrecentsWriter removeFrecencyInfoForDeviceID:]
  -[AVOutputDeviceFrecentsWriter persistToDiskReturningError:]
  -[AVOutputDeviceFrecentsWriter numberOfKeysToBeSet]
  -[AVOutputDeviceFrecentsWriter initWithFrecentsFilePath:]


AVOutputDeviceLegacyFrecentsReader : NSObject <AVOutputDeviceFrecentsReading>
 @property  NSArray *deviceIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVOutputDeviceLegacyFrecentsReader defaultFrecentsReader]

  // instance methods
  -[AVOutputDeviceLegacyFrecentsReader frecencyInfoForDeviceWithID:]
  -[AVOutputDeviceLegacyFrecentsReader deviceIDs]


AVOutputDeviceLegacyFrecentsWriter : NSObject <AVOutputDeviceFrecentsWriting>
 @property  long long numberOfKeysToBeSet
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVOutputDeviceLegacyFrecentsWriter defaultFrecentsWriter]

  // instance methods
  -[AVOutputDeviceLegacyFrecentsWriter dealloc]
  -[AVOutputDeviceLegacyFrecentsWriter init]
  -[AVOutputDeviceLegacyFrecentsWriter setFrecencyInfo:forDeviceID:]
  -[AVOutputDeviceLegacyFrecentsWriter removeFrecencyInfoForDeviceID:]
  -[AVOutputDeviceLegacyFrecentsWriter persistToDiskReturningError:]
  -[AVOutputDeviceLegacyFrecentsWriter numberOfKeysToBeSet]


AVOutputDeviceAuthorizedPeerInternal : NSObject

AVOutputDeviceAuthorizedPeer : NSObject
 @property  NSString *peerID
 @property  NSData *publicKey
 @property  BOOL hasAdministratorPrivileges

  // instance methods
  -[AVOutputDeviceAuthorizedPeer peerID]
  -[AVOutputDeviceAuthorizedPeer publicKey]
  -[AVOutputDeviceAuthorizedPeer dealloc]
  -[AVOutputDeviceAuthorizedPeer isEqual:]
  -[AVOutputDeviceAuthorizedPeer init]
  -[AVOutputDeviceAuthorizedPeer initWithID:publicKey:hasAdministratorPrivileges:]
  -[AVOutputDeviceAuthorizedPeer hasAdministratorPrivileges]


AVPairedDeviceInternal : NSObject

AVPairedDevice : NSObject
 @property  NSString *name
 @property  NSString *pairedDeviceID
 @property  NSString *modelID
 @property  BOOL playing
 @property  NSString *productName

  // class methods
  +[AVPairedDevice pairedDevicesConnectedToOutputDevice:]

  // instance methods
  -[AVPairedDevice modelID]
  -[AVPairedDevice ID]
  -[AVPairedDevice dealloc]
  -[AVPairedDevice productName]
  -[AVPairedDevice isPlaying]
  -[AVPairedDevice name]
  -[AVPairedDevice initWithName:ID:modelID:playing:productName:]
  -[AVPairedDevice pairedDeviceID]


AVLocalOutputDeviceImpl : NSObject <AVOutputDeviceImpl>
 @property  <AVOutputDeviceImplSupport> *implEventListener
 @property  NSString *name
 @property  NSString *ID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  long long clusterType
 @property  long long configuredClusterSize
 @property  NSString *manufacturer
 @property  NSString *modelID
 @property  NSString *serialNumber
 @property  NSString *firmwareVersion
 @property  NSData *identifyingMACAddress
 @property  NSArray *clusteredDeviceDescriptions
 @property  NSArray *activatedDeviceClusterMembers
 @property  NSArray *allClusterMembers
 @property  BOOL isClusterLeader
 @property  NSString *clusterID
 @property  BOOL producesLowFidelityAudio
 @property  BOOL appleAccessory
 @property  BOOL eligibleToBePredictedOutputDevice
 @property  NSNumber *batteryLevel
 @property  NSNumber *caseBatteryLevel
 @property  NSNumber *leftBatteryLevel
 @property  NSNumber *rightBatteryLevel
 @property  NSNumber *supportsDataOverACLProtocol
 @property  NSNumber *isInEar
 @property  NSDictionary *airPlayProperties
 @property  BOOL inUseByPairedDevice
 @property  NSArray *connectedPairedDevices
 @property  unsigned long deviceFeatures
 @property  BOOL requiresAuthorization
 @property  BOOL automaticallyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL onlyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canAccessAppleMusic
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL supportsBufferedAirPlay
 @property  float volume
 @property  BOOL canSetVolume
 @property  long long volumeControlType
 @property  BOOL canBeGrouped
 @property  NSString *groupID
 @property  NSString *proposedGroupID
 @property  BOOL canBeGroupLeader
 @property  BOOL isGroupLeader
 @property  BOOL participatesInGroupPlayback
 @property  BOOL groupContainsGroupLeader
 @property  NSString *logicalDeviceID
 @property  BOOL isLogicalDeviceLeader
 @property  BOOL canCommunicateWithAllLogicalDeviceMembers
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL supportsBluetoothSharing
 @property  long long HAPConformance
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL allowsHeadTrackedSpatialAudio
 @property  NSString *headTrackedSpatialAudioMode
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSArray *availableBluetoothListeningModes
 @property  NSString *currentBluetoothListeningMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVLocalOutputDeviceImpl deviceSubType]
  -[AVLocalOutputDeviceImpl serialNumber]
  -[AVLocalOutputDeviceImpl logicalDeviceID]
  -[AVLocalOutputDeviceImpl allowsHeadTrackedSpatialAudio]
  -[AVLocalOutputDeviceImpl isInEar]
  -[AVLocalOutputDeviceImpl isAppleAccessory]
  -[AVLocalOutputDeviceImpl increaseVolumeByCount:]
  -[AVLocalOutputDeviceImpl canSetVolume]
  -[AVLocalOutputDeviceImpl isGroupLeader]
  -[AVLocalOutputDeviceImpl clusterType]
  -[AVLocalOutputDeviceImpl currentBluetoothListeningMode]
  -[AVLocalOutputDeviceImpl supportsBluetoothSharing]
  -[AVLocalOutputDeviceImpl canAccessRemoteAssets]
  -[AVLocalOutputDeviceImpl supportsBufferedAirPlay]
  -[AVLocalOutputDeviceImpl airPlayProperties]
  -[AVLocalOutputDeviceImpl isClusterLeader]
  -[AVLocalOutputDeviceImpl batteryLevel]
  -[AVLocalOutputDeviceImpl modelID]
  -[AVLocalOutputDeviceImpl canRelayCommunicationChannel]
  -[AVLocalOutputDeviceImpl availableBluetoothListeningModes]
  -[AVLocalOutputDeviceImpl canFetchMediaDataFromSender]
  -[AVLocalOutputDeviceImpl canCommunicateWithAllLogicalDeviceMembers]
  -[AVLocalOutputDeviceImpl configuredClusterSize]
  -[AVLocalOutputDeviceImpl groupContainsGroupLeader]
  -[AVLocalOutputDeviceImpl canPlayEncryptedProgressiveDownloadAssets]
  -[AVLocalOutputDeviceImpl canAccessiCloudMusicLibrary]
  -[AVLocalOutputDeviceImpl firmwareVersion]
  -[AVLocalOutputDeviceImpl caseBatteryLevel]
  -[AVLocalOutputDeviceImpl connectedPairedDevices]
  -[AVLocalOutputDeviceImpl requiresAuthorization]
  -[AVLocalOutputDeviceImpl onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVLocalOutputDeviceImpl ID]
  -[AVLocalOutputDeviceImpl canAccessAppleMusic]
  -[AVLocalOutputDeviceImpl implEventListener]
  -[AVLocalOutputDeviceImpl groupID]
  -[AVLocalOutputDeviceImpl setSecondDisplayMode:completionHandler:]
  -[AVLocalOutputDeviceImpl allClusterMembers]
  -[AVLocalOutputDeviceImpl clusterID]
  -[AVLocalOutputDeviceImpl rightBatteryLevel]
  -[AVLocalOutputDeviceImpl decreaseVolumeByCount:]
  -[AVLocalOutputDeviceImpl supportsFitnessDataDestination]
  -[AVLocalOutputDeviceImpl headTrackedSpatialAudioMode]
  -[AVLocalOutputDeviceImpl canBeGrouped]
  -[AVLocalOutputDeviceImpl supportsHeadTrackedSpatialAudio]
  -[AVLocalOutputDeviceImpl isHeadTrackedSpatialAudioActive]
  -[AVLocalOutputDeviceImpl .cxx_destruct]
  -[AVLocalOutputDeviceImpl automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVLocalOutputDeviceImpl producesLowFidelityAudio]
  -[AVLocalOutputDeviceImpl participatesInGroupPlayback]
  -[AVLocalOutputDeviceImpl setAllowsHeadTrackedSpatialAudio:error:]
  -[AVLocalOutputDeviceImpl setVolume:]
  -[AVLocalOutputDeviceImpl setCurrentBluetoothListeningMode:error:]
  -[AVLocalOutputDeviceImpl deviceType]
  -[AVLocalOutputDeviceImpl setImplEventListener:]
  -[AVLocalOutputDeviceImpl volume]
  -[AVLocalOutputDeviceImpl HAPConformance]
  -[AVLocalOutputDeviceImpl clusteredDeviceDescriptions]
  -[AVLocalOutputDeviceImpl proposedGroupID]
  -[AVLocalOutputDeviceImpl deviceClusterMembers]
  -[AVLocalOutputDeviceImpl identifyingMACAddress]
  -[AVLocalOutputDeviceImpl configureUsingBlock:options:completionHandler:]
  -[AVLocalOutputDeviceImpl isEligibleToBePredictedOutputDevice]
  -[AVLocalOutputDeviceImpl name]
  -[AVLocalOutputDeviceImpl manufacturer]
  -[AVLocalOutputDeviceImpl canBeGroupLeader]
  -[AVLocalOutputDeviceImpl supportsDataOverACLProtocol]
  -[AVLocalOutputDeviceImpl isLogicalDeviceLeader]
  -[AVLocalOutputDeviceImpl setSecondDisplayEnabled:]
  -[AVLocalOutputDeviceImpl deviceFeatures]
  -[AVLocalOutputDeviceImpl setHeadTrackedSpatialAudioMode:error:]
  -[AVLocalOutputDeviceImpl volumeControlType]
  -[AVLocalOutputDeviceImpl leftBatteryLevel]
  -[AVLocalOutputDeviceImpl isInUseByPairedDevice]
  -[AVLocalOutputDeviceImpl isEqual:]
  -[AVLocalOutputDeviceImpl activatedDeviceClusterMembers]
  -[AVLocalOutputDeviceImpl presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]


AVOutputDeviceCommunicationChannel : NSObject
 @property  <AVOutputDeviceCommunicationChannelDelegate> *delegate

  // instance methods
  -[AVOutputDeviceCommunicationChannel setDelegate:]
  -[AVOutputDeviceCommunicationChannel delegate]
  -[AVOutputDeviceCommunicationChannel dealloc]
  -[AVOutputDeviceCommunicationChannel close]
  -[AVOutputDeviceCommunicationChannel .cxx_destruct]
  -[AVOutputDeviceCommunicationChannel sendData:completionHandler:]
  -[AVOutputDeviceCommunicationChannel initWithOutputDeviceCommunicationChannelImpl:]
  -[AVOutputDeviceCommunicationChannel communicationChannelImpl:didReceiveData:]
  -[AVOutputDeviceCommunicationChannel communicationChannelImplDidClose:]


AVClusterComponentOutputDeviceDescription : NSObject <AVOutputDeviceDescription>
 @property  NSString *deviceName
 @property  NSString *deviceID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  BOOL isClusterLeader
 @property  NSString *modelID
 @property  long long clusterType
 @property  NSArray *subComponents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVClusterComponentOutputDeviceDescription deviceSubType]
  -[AVClusterComponentOutputDeviceDescription deviceID]
  -[AVClusterComponentOutputDeviceDescription clusterType]
  -[AVClusterComponentOutputDeviceDescription isClusterLeader]
  -[AVClusterComponentOutputDeviceDescription modelID]
  -[AVClusterComponentOutputDeviceDescription dealloc]
  -[AVClusterComponentOutputDeviceDescription deviceType]
  -[AVClusterComponentOutputDeviceDescription deviceName]
  -[AVClusterComponentOutputDeviceDescription subComponents]
  -[AVClusterComponentOutputDeviceDescription initWithDeviceID:deviceName:deviceSubType:isClusterLeader:modelID:]
  -[AVClusterComponentOutputDeviceDescription initWithDeviceID:deviceName:deviceSubType:isClusterLeader:modelID:clusterType:subComponents:]


AVFigRouteDescriptorOutputDeviceImpl : NSObject <AVOutputDeviceImpl>
 @property  ^{__CFDictionary=} routeDescriptor
 @property  <AVOutputDeviceImplSupport> *implEventListener
 @property  NSString *name
 @property  NSString *ID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  long long clusterType
 @property  long long configuredClusterSize
 @property  NSString *manufacturer
 @property  NSString *modelID
 @property  NSString *serialNumber
 @property  NSString *firmwareVersion
 @property  NSData *identifyingMACAddress
 @property  NSArray *clusteredDeviceDescriptions
 @property  NSArray *activatedDeviceClusterMembers
 @property  NSArray *allClusterMembers
 @property  BOOL isClusterLeader
 @property  NSString *clusterID
 @property  BOOL producesLowFidelityAudio
 @property  BOOL appleAccessory
 @property  BOOL eligibleToBePredictedOutputDevice
 @property  NSNumber *batteryLevel
 @property  NSNumber *caseBatteryLevel
 @property  NSNumber *leftBatteryLevel
 @property  NSNumber *rightBatteryLevel
 @property  NSNumber *supportsDataOverACLProtocol
 @property  NSNumber *isInEar
 @property  NSDictionary *airPlayProperties
 @property  BOOL inUseByPairedDevice
 @property  NSArray *connectedPairedDevices
 @property  unsigned long deviceFeatures
 @property  BOOL requiresAuthorization
 @property  BOOL automaticallyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL onlyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canAccessAppleMusic
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL supportsBufferedAirPlay
 @property  float volume
 @property  BOOL canSetVolume
 @property  long long volumeControlType
 @property  BOOL canBeGrouped
 @property  NSString *groupID
 @property  NSString *proposedGroupID
 @property  BOOL canBeGroupLeader
 @property  BOOL isGroupLeader
 @property  BOOL participatesInGroupPlayback
 @property  BOOL groupContainsGroupLeader
 @property  NSString *logicalDeviceID
 @property  BOOL isLogicalDeviceLeader
 @property  BOOL canCommunicateWithAllLogicalDeviceMembers
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL supportsBluetoothSharing
 @property  long long HAPConformance
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL allowsHeadTrackedSpatialAudio
 @property  NSString *headTrackedSpatialAudioMode
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSArray *availableBluetoothListeningModes
 @property  NSString *currentBluetoothListeningMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigRouteDescriptorOutputDeviceImpl deviceSubType]
  -[AVFigRouteDescriptorOutputDeviceImpl serialNumber]
  -[AVFigRouteDescriptorOutputDeviceImpl logicalDeviceID]
  -[AVFigRouteDescriptorOutputDeviceImpl allowsHeadTrackedSpatialAudio]
  -[AVFigRouteDescriptorOutputDeviceImpl isInEar]
  -[AVFigRouteDescriptorOutputDeviceImpl isAppleAccessory]
  -[AVFigRouteDescriptorOutputDeviceImpl increaseVolumeByCount:]
  -[AVFigRouteDescriptorOutputDeviceImpl canSetVolume]
  -[AVFigRouteDescriptorOutputDeviceImpl isGroupLeader]
  -[AVFigRouteDescriptorOutputDeviceImpl clusterType]
  -[AVFigRouteDescriptorOutputDeviceImpl currentBluetoothListeningMode]
  -[AVFigRouteDescriptorOutputDeviceImpl supportsBluetoothSharing]
  -[AVFigRouteDescriptorOutputDeviceImpl canAccessRemoteAssets]
  -[AVFigRouteDescriptorOutputDeviceImpl supportsBufferedAirPlay]
  -[AVFigRouteDescriptorOutputDeviceImpl airPlayProperties]
  -[AVFigRouteDescriptorOutputDeviceImpl isClusterLeader]
  -[AVFigRouteDescriptorOutputDeviceImpl batteryLevel]
  -[AVFigRouteDescriptorOutputDeviceImpl modelID]
  -[AVFigRouteDescriptorOutputDeviceImpl canRelayCommunicationChannel]
  -[AVFigRouteDescriptorOutputDeviceImpl availableBluetoothListeningModes]
  -[AVFigRouteDescriptorOutputDeviceImpl canFetchMediaDataFromSender]
  -[AVFigRouteDescriptorOutputDeviceImpl canCommunicateWithAllLogicalDeviceMembers]
  -[AVFigRouteDescriptorOutputDeviceImpl configuredClusterSize]
  -[AVFigRouteDescriptorOutputDeviceImpl groupContainsGroupLeader]
  -[AVFigRouteDescriptorOutputDeviceImpl canPlayEncryptedProgressiveDownloadAssets]
  -[AVFigRouteDescriptorOutputDeviceImpl canAccessiCloudMusicLibrary]
  -[AVFigRouteDescriptorOutputDeviceImpl firmwareVersion]
  -[AVFigRouteDescriptorOutputDeviceImpl caseBatteryLevel]
  -[AVFigRouteDescriptorOutputDeviceImpl connectedPairedDevices]
  -[AVFigRouteDescriptorOutputDeviceImpl requiresAuthorization]
  -[AVFigRouteDescriptorOutputDeviceImpl onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigRouteDescriptorOutputDeviceImpl ID]
  -[AVFigRouteDescriptorOutputDeviceImpl canAccessAppleMusic]
  -[AVFigRouteDescriptorOutputDeviceImpl implEventListener]
  -[AVFigRouteDescriptorOutputDeviceImpl groupID]
  -[AVFigRouteDescriptorOutputDeviceImpl setSecondDisplayMode:completionHandler:]
  -[AVFigRouteDescriptorOutputDeviceImpl allClusterMembers]
  -[AVFigRouteDescriptorOutputDeviceImpl clusterID]
  -[AVFigRouteDescriptorOutputDeviceImpl rightBatteryLevel]
  -[AVFigRouteDescriptorOutputDeviceImpl dealloc]
  -[AVFigRouteDescriptorOutputDeviceImpl decreaseVolumeByCount:]
  -[AVFigRouteDescriptorOutputDeviceImpl supportsFitnessDataDestination]
  -[AVFigRouteDescriptorOutputDeviceImpl routeDescriptor]
  -[AVFigRouteDescriptorOutputDeviceImpl headTrackedSpatialAudioMode]
  -[AVFigRouteDescriptorOutputDeviceImpl canBeGrouped]
  -[AVFigRouteDescriptorOutputDeviceImpl supportsHeadTrackedSpatialAudio]
  -[AVFigRouteDescriptorOutputDeviceImpl isHeadTrackedSpatialAudioActive]
  -[AVFigRouteDescriptorOutputDeviceImpl .cxx_destruct]
  -[AVFigRouteDescriptorOutputDeviceImpl automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigRouteDescriptorOutputDeviceImpl producesLowFidelityAudio]
  -[AVFigRouteDescriptorOutputDeviceImpl participatesInGroupPlayback]
  -[AVFigRouteDescriptorOutputDeviceImpl setAllowsHeadTrackedSpatialAudio:error:]
  -[AVFigRouteDescriptorOutputDeviceImpl setVolume:]
  -[AVFigRouteDescriptorOutputDeviceImpl setCurrentBluetoothListeningMode:error:]
  -[AVFigRouteDescriptorOutputDeviceImpl deviceType]
  -[AVFigRouteDescriptorOutputDeviceImpl setImplEventListener:]
  -[AVFigRouteDescriptorOutputDeviceImpl volume]
  -[AVFigRouteDescriptorOutputDeviceImpl HAPConformance]
  -[AVFigRouteDescriptorOutputDeviceImpl clusteredDeviceDescriptions]
  -[AVFigRouteDescriptorOutputDeviceImpl proposedGroupID]
  -[AVFigRouteDescriptorOutputDeviceImpl identifyingMACAddress]
  -[AVFigRouteDescriptorOutputDeviceImpl configureUsingBlock:options:completionHandler:]
  -[AVFigRouteDescriptorOutputDeviceImpl _withEndpoint:]
  -[AVFigRouteDescriptorOutputDeviceImpl isEligibleToBePredictedOutputDevice]
  -[AVFigRouteDescriptorOutputDeviceImpl _volumeDidChangeForEndpointWithID:]
  -[AVFigRouteDescriptorOutputDeviceImpl name]
  -[AVFigRouteDescriptorOutputDeviceImpl _endpointVolumeControlTypeDidChangeForEndpointWithID:]
  -[AVFigRouteDescriptorOutputDeviceImpl manufacturer]
  -[AVFigRouteDescriptorOutputDeviceImpl canBeGroupLeader]
  -[AVFigRouteDescriptorOutputDeviceImpl supportsDataOverACLProtocol]
  -[AVFigRouteDescriptorOutputDeviceImpl isLogicalDeviceLeader]
  -[AVFigRouteDescriptorOutputDeviceImpl setSecondDisplayEnabled:]
  -[AVFigRouteDescriptorOutputDeviceImpl deviceFeatures]
  -[AVFigRouteDescriptorOutputDeviceImpl setHeadTrackedSpatialAudioMode:error:]
  -[AVFigRouteDescriptorOutputDeviceImpl volumeControlType]
  -[AVFigRouteDescriptorOutputDeviceImpl leftBatteryLevel]
  -[AVFigRouteDescriptorOutputDeviceImpl _canSetEndpointVolumeDidChangeForEndpointWithID:]
  -[AVFigRouteDescriptorOutputDeviceImpl isInUseByPairedDevice]
  -[AVFigRouteDescriptorOutputDeviceImpl isEqual:]
  -[AVFigRouteDescriptorOutputDeviceImpl initWithRouteDescriptor:routeDiscoverer:volumeController:routingContextFactory:useRouteConfigUpdatedNotification:]
  -[AVFigRouteDescriptorOutputDeviceImpl activatedDeviceClusterMembers]
  -[AVFigRouteDescriptorOutputDeviceImpl init]
  -[AVFigRouteDescriptorOutputDeviceImpl presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]


AVMetadataEnumerator : NSEnumerator
  // class methods
  +[AVMetadataEnumerator metadataEnumeratorWithMetadataReader:]
  +[AVMetadataEnumerator metadataEnumeratorWithArray:key:keySpace:locale:]

  // instance methods
  -[AVMetadataEnumerator dealloc]
  -[AVMetadataEnumerator nextObject]
  -[AVMetadataEnumerator _setKey:]
  -[AVMetadataEnumerator initWithMetadataReader:]
  -[AVMetadataEnumerator initWithArray:key:keySpace:locale:]
  -[AVMetadataEnumerator initWithMetadataReader:array:key:keySpace:locale:]
  -[AVMetadataEnumerator _setMetadataReader:]
  -[AVMetadataEnumerator _setArrayEnumerator:]
  -[AVMetadataEnumerator _setKeySpace:]
  -[AVMetadataEnumerator _setLocale:]


AVAssetTrackSegment : NSObject <NSSecureCoding>
 @property  {?={?={?=qiIq}{?=qiIq}}{?={?=qiIq}{?=qiIq}}} timeMapping
 @property  BOOL empty

  // class methods
  +[AVAssetTrackSegment supportsSecureCoding]

  // instance methods
  -[AVAssetTrackSegment encodeWithCoder:]
  -[AVAssetTrackSegment isEmpty]
  -[AVAssetTrackSegment isEqual:]
  -[AVAssetTrackSegment init]
  -[AVAssetTrackSegment initWithCoder:]
  -[AVAssetTrackSegment _initWithTimeMapping:]
  -[AVAssetTrackSegment timeMapping]


AVPlayerItemSampleBufferOutputConfiguration : NSObject
 @property  double advanceIntervalForDataAvailability

  // instance methods
  -[AVPlayerItemSampleBufferOutputConfiguration advanceIntervalForDataAvailability]
  -[AVPlayerItemSampleBufferOutputConfiguration setAdvanceIntervalForDataAvailability:]


AVPlayerItemSampleBufferOutput : AVPlayerItemOutput
 @property  <AVPlayerItemSampleBufferOutputDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue

  // class methods
  +[AVPlayerItemSampleBufferOutput initialize]

  // instance methods
  -[AVPlayerItemSampleBufferOutput delegate]
  -[AVPlayerItemSampleBufferOutput dealloc]
  -[AVPlayerItemSampleBufferOutput delegateQueue]
  -[AVPlayerItemSampleBufferOutput _weakReference]
  -[AVPlayerItemSampleBufferOutput initWithConfiguration:]
  -[AVPlayerItemSampleBufferOutput setDelegate:queue:]
  -[AVPlayerItemSampleBufferOutput init]
  -[AVPlayerItemSampleBufferOutput _extractionID]
  -[AVPlayerItemSampleBufferOutput _setExtractionID:]
  -[AVPlayerItemSampleBufferOutput _trackID]
  -[AVPlayerItemSampleBufferOutput _addFigPlaybackItemListeners]
  -[AVPlayerItemSampleBufferOutput _removeFigPlaybackItemListeners]
  -[AVPlayerItemSampleBufferOutput _figPlaybackItem]
  -[AVPlayerItemSampleBufferOutput _setFigPlaybackItem:]
  -[AVPlayerItemSampleBufferOutput _weakReferenceToPlayerItemTrack]
  -[AVPlayerItemSampleBufferOutput copyNextSampleBufferForTrackID:flags:]
  -[AVPlayerItemSampleBufferOutput _figPlaybackItemTrackSampleBufferDidBecomeAvailableForTrackID:extractionID:]
  -[AVPlayerItemSampleBufferOutput _figPlaybackItemTrackOutputSequenceWasFlushedForTrackID:extractionID:]
  -[AVPlayerItemSampleBufferOutput _advanceInterval]
  -[AVPlayerItemSampleBufferOutput _attachToPlayerItemTrack:figPlaybackItem:]
  -[AVPlayerItemSampleBufferOutput _detachFromPlayerItemTrack]
  -[AVPlayerItemSampleBufferOutput _setTrackID:]


AVFigEndpointOutputDeviceImpl : NSObject <AVOutputDeviceImpl>
 @property  <AVOutputDeviceImplSupport> *implEventListener
 @property  NSString *name
 @property  NSString *ID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  long long clusterType
 @property  long long configuredClusterSize
 @property  NSString *manufacturer
 @property  NSString *modelID
 @property  NSString *serialNumber
 @property  NSString *firmwareVersion
 @property  NSData *identifyingMACAddress
 @property  NSArray *clusteredDeviceDescriptions
 @property  NSArray *activatedDeviceClusterMembers
 @property  NSArray *allClusterMembers
 @property  BOOL isClusterLeader
 @property  NSString *clusterID
 @property  BOOL producesLowFidelityAudio
 @property  BOOL appleAccessory
 @property  BOOL eligibleToBePredictedOutputDevice
 @property  NSNumber *batteryLevel
 @property  NSNumber *caseBatteryLevel
 @property  NSNumber *leftBatteryLevel
 @property  NSNumber *rightBatteryLevel
 @property  NSNumber *supportsDataOverACLProtocol
 @property  NSNumber *isInEar
 @property  NSDictionary *airPlayProperties
 @property  BOOL inUseByPairedDevice
 @property  NSArray *connectedPairedDevices
 @property  unsigned long deviceFeatures
 @property  BOOL requiresAuthorization
 @property  BOOL automaticallyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL onlyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canAccessAppleMusic
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL supportsBufferedAirPlay
 @property  float volume
 @property  BOOL canSetVolume
 @property  long long volumeControlType
 @property  BOOL canBeGrouped
 @property  NSString *groupID
 @property  NSString *proposedGroupID
 @property  BOOL canBeGroupLeader
 @property  BOOL isGroupLeader
 @property  BOOL participatesInGroupPlayback
 @property  BOOL groupContainsGroupLeader
 @property  NSString *logicalDeviceID
 @property  BOOL isLogicalDeviceLeader
 @property  BOOL canCommunicateWithAllLogicalDeviceMembers
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL supportsBluetoothSharing
 @property  long long HAPConformance
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL allowsHeadTrackedSpatialAudio
 @property  NSString *headTrackedSpatialAudioMode
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSArray *availableBluetoothListeningModes
 @property  NSString *currentBluetoothListeningMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigEndpointOutputDeviceImpl deviceSubType]
  -[AVFigEndpointOutputDeviceImpl serialNumber]
  -[AVFigEndpointOutputDeviceImpl logicalDeviceID]
  -[AVFigEndpointOutputDeviceImpl allowsHeadTrackedSpatialAudio]
  -[AVFigEndpointOutputDeviceImpl isInEar]
  -[AVFigEndpointOutputDeviceImpl isAppleAccessory]
  -[AVFigEndpointOutputDeviceImpl increaseVolumeByCount:]
  -[AVFigEndpointOutputDeviceImpl setCurrentBluetoothListeningMode:]
  -[AVFigEndpointOutputDeviceImpl canSetVolume]
  -[AVFigEndpointOutputDeviceImpl isGroupLeader]
  -[AVFigEndpointOutputDeviceImpl clusterType]
  -[AVFigEndpointOutputDeviceImpl currentBluetoothListeningMode]
  -[AVFigEndpointOutputDeviceImpl supportsBluetoothSharing]
  -[AVFigEndpointOutputDeviceImpl canAccessRemoteAssets]
  -[AVFigEndpointOutputDeviceImpl supportsBufferedAirPlay]
  -[AVFigEndpointOutputDeviceImpl airPlayProperties]
  -[AVFigEndpointOutputDeviceImpl isClusterLeader]
  -[AVFigEndpointOutputDeviceImpl batteryLevel]
  -[AVFigEndpointOutputDeviceImpl modelID]
  -[AVFigEndpointOutputDeviceImpl canRelayCommunicationChannel]
  -[AVFigEndpointOutputDeviceImpl availableBluetoothListeningModes]
  -[AVFigEndpointOutputDeviceImpl canFetchMediaDataFromSender]
  -[AVFigEndpointOutputDeviceImpl canCommunicateWithAllLogicalDeviceMembers]
  -[AVFigEndpointOutputDeviceImpl configuredClusterSize]
  -[AVFigEndpointOutputDeviceImpl groupContainsGroupLeader]
  -[AVFigEndpointOutputDeviceImpl canPlayEncryptedProgressiveDownloadAssets]
  -[AVFigEndpointOutputDeviceImpl canAccessiCloudMusicLibrary]
  -[AVFigEndpointOutputDeviceImpl firmwareVersion]
  -[AVFigEndpointOutputDeviceImpl caseBatteryLevel]
  -[AVFigEndpointOutputDeviceImpl connectedPairedDevices]
  -[AVFigEndpointOutputDeviceImpl requiresAuthorization]
  -[AVFigEndpointOutputDeviceImpl onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigEndpointOutputDeviceImpl ID]
  -[AVFigEndpointOutputDeviceImpl canAccessAppleMusic]
  -[AVFigEndpointOutputDeviceImpl implEventListener]
  -[AVFigEndpointOutputDeviceImpl groupID]
  -[AVFigEndpointOutputDeviceImpl setSecondDisplayMode:completionHandler:]
  -[AVFigEndpointOutputDeviceImpl allClusterMembers]
  -[AVFigEndpointOutputDeviceImpl clusterID]
  -[AVFigEndpointOutputDeviceImpl rightBatteryLevel]
  -[AVFigEndpointOutputDeviceImpl dealloc]
  -[AVFigEndpointOutputDeviceImpl decreaseVolumeByCount:]
  -[AVFigEndpointOutputDeviceImpl headTrackedSpatialAudioMode]
  -[AVFigEndpointOutputDeviceImpl canBeGrouped]
  -[AVFigEndpointOutputDeviceImpl supportsHeadTrackedSpatialAudio]
  -[AVFigEndpointOutputDeviceImpl isHeadTrackedSpatialAudioActive]
  -[AVFigEndpointOutputDeviceImpl .cxx_destruct]
  -[AVFigEndpointOutputDeviceImpl automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigEndpointOutputDeviceImpl producesLowFidelityAudio]
  -[AVFigEndpointOutputDeviceImpl participatesInGroupPlayback]
  -[AVFigEndpointOutputDeviceImpl setAllowsHeadTrackedSpatialAudio:error:]
  -[AVFigEndpointOutputDeviceImpl setVolume:]
  -[AVFigEndpointOutputDeviceImpl setCurrentBluetoothListeningMode:error:]
  -[AVFigEndpointOutputDeviceImpl deviceType]
  -[AVFigEndpointOutputDeviceImpl setImplEventListener:]
  -[AVFigEndpointOutputDeviceImpl volume]
  -[AVFigEndpointOutputDeviceImpl HAPConformance]
  -[AVFigEndpointOutputDeviceImpl clusteredDeviceDescriptions]
  -[AVFigEndpointOutputDeviceImpl proposedGroupID]
  -[AVFigEndpointOutputDeviceImpl identifyingMACAddress]
  -[AVFigEndpointOutputDeviceImpl configureUsingBlock:options:completionHandler:]
  -[AVFigEndpointOutputDeviceImpl _volumeDidChangeForEndpointWithID:]
  -[AVFigEndpointOutputDeviceImpl name]
  -[AVFigEndpointOutputDeviceImpl _endpointVolumeControlTypeDidChangeForEndpointWithID:]
  -[AVFigEndpointOutputDeviceImpl manufacturer]
  -[AVFigEndpointOutputDeviceImpl canBeGroupLeader]
  -[AVFigEndpointOutputDeviceImpl supportsDataOverACLProtocol]
  -[AVFigEndpointOutputDeviceImpl isLogicalDeviceLeader]
  -[AVFigEndpointOutputDeviceImpl setSecondDisplayEnabled:]
  -[AVFigEndpointOutputDeviceImpl deviceFeatures]
  -[AVFigEndpointOutputDeviceImpl setHeadTrackedSpatialAudioMode:error:]
  -[AVFigEndpointOutputDeviceImpl volumeControlType]
  -[AVFigEndpointOutputDeviceImpl leftBatteryLevel]
  -[AVFigEndpointOutputDeviceImpl _canSetEndpointVolumeDidChangeForEndpointWithID:]
  -[AVFigEndpointOutputDeviceImpl isInUseByPairedDevice]
  -[AVFigEndpointOutputDeviceImpl isEqual:]
  -[AVFigEndpointOutputDeviceImpl activatedDeviceClusterMembers]
  -[AVFigEndpointOutputDeviceImpl init]
  -[AVFigEndpointOutputDeviceImpl presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[AVFigEndpointOutputDeviceImpl initWithFigEndpoint:volumeController:routingContextFactory:useRouteConfigUpdatedNotification:]
  -[AVFigEndpointOutputDeviceImpl _figEndpointPropertyValueForKey:]
  -[AVFigEndpointOutputDeviceImpl figEndpoint]


AVFigEndpointSecondDisplayModeToken : NSObject
  // instance methods
  -[AVFigEndpointSecondDisplayModeToken initWithEndpoint:]
  -[AVFigEndpointSecondDisplayModeToken dealloc]
  -[AVFigEndpointSecondDisplayModeToken init]


AVAssetCustomURLRequest : NSObject
 @property  unsigned long requestID
 @property  NSURLSessionTaskMetrics *metrics

  // class methods
  +[AVAssetCustomURLRequest requestWithRequest:id:]

  // instance methods
  -[AVAssetCustomURLRequest dealloc]
  -[AVAssetCustomURLRequest requestID]
  -[AVAssetCustomURLRequest metrics]
  -[AVAssetCustomURLRequest setMetrics:]
  -[AVAssetCustomURLRequest init]
  -[AVAssetCustomURLRequest initWithRequest:id:]
  -[AVAssetCustomURLRequest customURLRequest]
  -[AVAssetCustomURLRequest setCustomURLRequest:]
  -[AVAssetCustomURLRequest customURLResponse]
  -[AVAssetCustomURLRequest setCustomURLResponse:]


AVAssetCustomURLBridgeForNSURLSession : NSObject <NSURLSessionDataDelegate>
 @property  NSURLSession *session
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAssetCustomURLBridgeForNSURLSession URLSession:dataTask:didReceiveResponse:completionHandler:]
  -[AVAssetCustomURLBridgeForNSURLSession URLSession:task:didCompleteWithError:]
  -[AVAssetCustomURLBridgeForNSURLSession session]
  -[AVAssetCustomURLBridgeForNSURLSession URLSession:dataTask:didReceiveData:]
  -[AVAssetCustomURLBridgeForNSURLSession URLSession:dataTask:willCacheResponse:completionHandler:]
  -[AVAssetCustomURLBridgeForNSURLSession initWithFigAsset:]
  -[AVAssetCustomURLBridgeForNSURLSession setSession:]
  -[AVAssetCustomURLBridgeForNSURLSession dealloc]
  -[AVAssetCustomURLBridgeForNSURLSession _unregisterRequestForDataTask:]
  -[AVAssetCustomURLBridgeForNSURLSession _lookupRequestForDataTask:]
  -[AVAssetCustomURLBridgeForNSURLSession _cancelRequestID:]
  -[AVAssetCustomURLBridgeForNSURLSession URLSession:task:didFinishCollectingMetrics:]
  -[AVAssetCustomURLBridgeForNSURLSession _handleRequest:requestID:canHandleRequestOut:]
  -[AVAssetCustomURLBridgeForNSURLSession init]
  -[AVAssetCustomURLBridgeForNSURLSession _registerRequest:id:forDataTask:]


AVNSURLProtocolRequest : AVAssetCustomURLRequest
 @property  AVAssetCustomURLBridgeForNSURLProtocol *bridge
 @property  ^{_CFURLConnection=} connection

  // instance methods
  -[AVNSURLProtocolRequest dealloc]
  -[AVNSURLProtocolRequest .cxx_destruct]
  -[AVNSURLProtocolRequest connection]
  -[AVNSURLProtocolRequest bridge]
  -[AVNSURLProtocolRequest setConnection:]
  -[AVNSURLProtocolRequest setBridge:]


AVAssetCustomURLBridgeForNSURLProtocol : NSObject
  // instance methods
  -[AVAssetCustomURLBridgeForNSURLProtocol _handleRequest:requestID:]
  -[AVAssetCustomURLBridgeForNSURLProtocol _cancelAndFinishRequest:error:]
  -[AVAssetCustomURLBridgeForNSURLProtocol initWithFigAsset:]
  -[AVAssetCustomURLBridgeForNSURLProtocol dealloc]
  -[AVAssetCustomURLBridgeForNSURLProtocol _didReceiveData:data:]
  -[AVAssetCustomURLBridgeForNSURLProtocol _cancelRequestID:]
  -[AVAssetCustomURLBridgeForNSURLProtocol _cancelPendingRequests]
  -[AVAssetCustomURLBridgeForNSURLProtocol _didReceiveResponse:response:]
  -[AVAssetCustomURLBridgeForNSURLProtocol _didFinish:error:]
  -[AVAssetCustomURLBridgeForNSURLProtocol _willSendRequest:request:redirectionResponse:]


AVAssetCustomURLAuthentication : NSObject
  // class methods
  +[AVAssetCustomURLAuthentication copyKeychainCredentialForUrl:]
  +[AVAssetCustomURLAuthentication sendAuthResponse:requestID:disposition:credential:authHandler:]

  // instance methods
  -[AVAssetCustomURLAuthentication _handleAuthChallenge:requestID:canHandleRequestOut:]
  -[AVAssetCustomURLAuthentication initWithFigAsset:]
  -[AVAssetCustomURLAuthentication dealloc]


AVAudioMix : NSObject <NSCopying, NSMutableCopying>
 @property  NSArray *inputParameters

  // instance methods
  -[AVAudioMix dealloc]
  -[AVAudioMix copyWithZone:]
  -[AVAudioMix mutableCopyWithZone:]
  -[AVAudioMix isEqual:]
  -[AVAudioMix init]
  -[AVAudioMix inputParameters]
  -[AVAudioMix setInputParameters:]
  -[AVAudioMix audioMixInputParametersForTrackID:]


AVMutableAudioMix : AVAudioMix
 @property  NSArray *inputParameters

  // class methods
  +[AVMutableAudioMix audioMix]

  // instance methods
  -[AVMutableAudioMix inputParameters]
  -[AVMutableAudioMix setInputParameters:]


AVAudioMixInternal : NSObject

AVAudioMixInputParameters : NSObject <NSCopying, NSMutableCopying>
 @property  int trackID
 @property  NSString *audioTimePitchAlgorithm
 @property  r^{opaqueMTAudioProcessingTap=} audioTapProcessor

  // instance methods
  -[AVAudioMixInputParameters trackID]
  -[AVAudioMixInputParameters setTrackID:]
  -[AVAudioMixInputParameters setAudioTimePitchAlgorithm:]
  -[AVAudioMixInputParameters dealloc]
  -[AVAudioMixInputParameters audioTimePitchAlgorithm]
  -[AVAudioMixInputParameters copyWithZone:]
  -[AVAudioMixInputParameters mutableCopyWithZone:]
  -[AVAudioMixInputParameters isEqual:]
  -[AVAudioMixInputParameters init]
  -[AVAudioMixInputParameters audioTapProcessor]
  -[AVAudioMixInputParameters setAudioTapProcessor:]
  -[AVAudioMixInputParameters effectParameters]
  -[AVAudioMixInputParameters setEffectParameters:]
  -[AVAudioMixInputParameters _setVolumeRampFromStartVolume:toEndVolume:timeRange:rampMode:]
  -[AVAudioMixInputParameters _setVolume:atTime:]
  -[AVAudioMixInputParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[AVAudioMixInputParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:rampMode:]
  -[AVAudioMixInputParameters setVolume:atTime:]
  -[AVAudioMixInputParameters getVolumeRampForTime:startVolume:endVolume:timeRange:]
  -[AVAudioMixInputParameters getVolumeRampForTime:startVolume:endVolume:timeRange:rampMode:]
  -[AVAudioMixInputParameters _setScheduledAudioParameters:]
  -[AVAudioMixInputParameters _audioVolumeCurve]
  -[AVAudioMixInputParameters _volumeCurveAsString]


AVAudioMixInputParametersInternal : NSObject

AVMutableAudioMixInputParameters : AVAudioMixInputParameters
 @property  int trackID
 @property  NSString *audioTimePitchAlgorithm
 @property  r^{opaqueMTAudioProcessingTap=} audioTapProcessor

  // class methods
  +[AVMutableAudioMixInputParameters audioMixInputParametersWithTrack:]
  +[AVMutableAudioMixInputParameters audioMixInputParameters]
  +[AVMutableAudioMixInputParameters audioMixInputParametersWithAssetTrack:introFadeDuration:fadeOutStart:fadeOutDuration:]

  // instance methods
  -[AVMutableAudioMixInputParameters trackID]
  -[AVMutableAudioMixInputParameters setTrackID:]
  -[AVMutableAudioMixInputParameters setAudioTimePitchAlgorithm:]
  -[AVMutableAudioMixInputParameters audioTimePitchAlgorithm]
  -[AVMutableAudioMixInputParameters audioTapProcessor]
  -[AVMutableAudioMixInputParameters setAudioTapProcessor:]
  -[AVMutableAudioMixInputParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[AVMutableAudioMixInputParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:rampMode:]
  -[AVMutableAudioMixInputParameters setVolume:atTime:]


AVRunLoopConditionRunLoopState : NSObject
 @property  ^{__CFRunLoop=} runLoop
 @property  ^{__CFRunLoopSource=} signalSource
 @property  BOOL signaled

  // class methods
  +[AVRunLoopConditionRunLoopState runLoopStateWithRunLoop:]

  // instance methods
  -[AVRunLoopConditionRunLoopState dealloc]
  -[AVRunLoopConditionRunLoopState setSignaled:]
  -[AVRunLoopConditionRunLoopState signaled]
  -[AVRunLoopConditionRunLoopState initWithRunLoop:]
  -[AVRunLoopConditionRunLoopState runLoop]
  -[AVRunLoopConditionRunLoopState signalSource]
  -[AVRunLoopConditionRunLoopState setSignalSource:]


AVRunLoopCondition : NSCondition
  // class methods
  +[AVRunLoopCondition initialize]

  // instance methods
  -[AVRunLoopCondition broadcast]
  -[AVRunLoopCondition _signalRunLoopWithState:]
  -[AVRunLoopCondition dealloc]
  -[AVRunLoopCondition waitUntilDate:inMode:]
  -[AVRunLoopCondition waitUntilDate:]
  -[AVRunLoopCondition waitInMode:]
  -[AVRunLoopCondition wait]
  -[AVRunLoopCondition _waitInMode:untilDate:]
  -[AVRunLoopCondition init]
  -[AVRunLoopCondition signal]


AVOutputContextInternal : NSObject
  // instance methods
  -[AVOutputContextInternal .cxx_destruct]


AVOutputContext : NSObject <NSSecureCoding>
 @property  ^{OpaqueFigRoutingContext=} figRoutingContext
 @property  NSString *deviceName

  // class methods
  +[AVOutputContext supportsSecureCoding]
  +[AVOutputContext commChannelUUIDCommunicationChannelManagerCreator]
  +[AVOutputContext outputContextWithFigRoutingContextCreator:outputDeviceTranslator:]
  +[AVOutputContext allSharedAudioOutputContexts]
  +[AVOutputContext sharedAudioPresentationOutputContext]
  +[AVOutputContext outputContextForControllingOutputDeviceGroupWithID:]
  +[AVOutputContext outputContextForID:]
  +[AVOutputContext outputContextWithFigRoutingContextCreator:communicationChannelManagerCreator:]
  +[AVOutputContext outputContext]
  +[AVOutputContext initialize]
  +[AVOutputContext outputContextExistsWithRemoteOutputDevice]
  +[AVOutputContext sharedSystemRemotePoolContext]
  +[AVOutputContext resetOutputDeviceForAllOutputContexts]
  +[AVOutputContext preferredOutputDevicesForAudioSession:]
  +[AVOutputContext iTunesAudioContext]
  +[AVOutputContext defaultOutputContextImplClass]
  +[AVOutputContext defaultSharedOutputContext]
  +[AVOutputContext outputContextForControllingOutputDeviceGroupWithID:options:]
  +[AVOutputContext sharedSystemScreenContext]
  +[AVOutputContext auxiliaryOutputContext]
  +[AVOutputContext defaultCommunicationChannelManagerCreator]
  +[AVOutputContext outputContextWithFigRoutingContextCreator:volumeController:]
  +[AVOutputContext addSharedAudioOutputContext]
  +[AVOutputContext outputContextWithFigRoutingContextCreator:]
  +[AVOutputContext sharedSystemAudioContext]

  // instance methods
  -[AVOutputContext increaseVolumeByCount:]
  -[AVOutputContext setOutputDevices:]
  -[AVOutputContext canSetVolume]
  -[AVOutputContext outputContextImplDidChangePredictedOutputDevice:]
  -[AVOutputContext ID]
  -[AVOutputContext communicationChannelDelegate]
  -[AVOutputContext addOutputDevice:]
  -[AVOutputContext encodeWithCoder:]
  -[AVOutputContext impl]
  -[AVOutputContext outputDeviceFeatures]
  -[AVOutputContext removeOutputDevice:]
  -[AVOutputContext outputContextImplDidChangeVolumeControlType:]
  -[AVOutputContext initWithOutputContextImpl:]
  -[AVOutputContext outputContextImpl:didExpireWithReplacement:]
  -[AVOutputContext removeOutputDevice:options:completionHandler:]
  -[AVOutputContext dealloc]
  -[AVOutputContext decreaseVolumeByCount:]
  -[AVOutputContext outputContextImplDidChangeProvidesControlForAllVolumeFeatures:]
  -[AVOutputContext outputContextImpl:didInitiateDestinationChange:]
  -[AVOutputContext outputDevices]
  -[AVOutputContext outputContextImplOutgoingCommunicationChannelDidBecomeAvailable:]
  -[AVOutputContext setApplicationProcessID:]
  -[AVOutputContext outputContextImpl:didCloseCommunicationChannel:]
  -[AVOutputContext supportsMultipleBluetoothOutputDevices]
  -[AVOutputContext outputDevice]
  -[AVOutputContext setVolume:]
  -[AVOutputContext setOutputDevice:forFeatures:]
  -[AVOutputContext applicationProcessID]
  -[AVOutputContext volume]
  -[AVOutputContext outputContextImplDidChangeVolume:]
  -[AVOutputContext outputContextImpl:didReceiveData:fromCommunicationChannel:]
  -[AVOutputContext supportsMultipleOutputDevices]
  -[AVOutputContext addOutputDevice:options:completionHandler:]
  -[AVOutputContext resetPredictedOutputDevice]
  -[AVOutputContext setOutputDevice:options:]
  -[AVOutputContext contextID]
  -[AVOutputContext outgoingCommunicationChannel]
  -[AVOutputContext outputContextImplDidChangeGlobalOutputDeviceConfiguration:]
  -[AVOutputContext setOutputDevice:options:completionHandler:]
  -[AVOutputContext outputContextImplDidChangeCanSetVolume:]
  -[AVOutputContext setOutputDevices:options:completionHandler:]
  -[AVOutputContext outputContextType]
  -[AVOutputContext providesControlForAllVolumeFeatures]
  -[AVOutputContext deviceName]
  -[AVOutputContext predictedOutputDevice]
  -[AVOutputContext openCommunicationChannelWithOptions:error:]
  -[AVOutputContext setCommunicationChannelDelegate:]
  -[AVOutputContext volumeControlType]
  -[AVOutputContext getApplicationProcessID:]
  -[AVOutputContext figRoutingContext]
  -[AVOutputContext isEqual:]
  -[AVOutputContext outputContextImpl:didChangeOutputDeviceWithInitiator:]
  -[AVOutputContext init]
  -[AVOutputContext initWithCoder:]
  -[AVOutputContext outputContextImpl:didChangeOutputDevicesWithInitiator:reason:deviceID:previousDeviceIDs:]


AVOutputContextCommunicationChannelInternal : NSObject

AVOutputContextCommunicationChannel : NSObject
 @property  r^{__CFString=} commChannelUUID
 @property  <AVOutputContextCommunicationChannelImpl> *impl

  // instance methods
  -[AVOutputContextCommunicationChannel impl]
  -[AVOutputContextCommunicationChannel dealloc]
  -[AVOutputContextCommunicationChannel init]
  -[AVOutputContextCommunicationChannel sendData:completionHandler:]
  -[AVOutputContextCommunicationChannel initWithOutputContextCommunicationChannelImpl:]
  -[AVOutputContextCommunicationChannel commChannelUUID]


AVOutputContextDestinationChangeInternal : NSObject

AVOutputContextDestinationChange : NSObject
 @property  long long status
 @property  NSString *cancellationReason

  // instance methods
  -[AVOutputContextDestinationChange markAsFinished]
  -[AVOutputContextDestinationChange status]
  -[AVOutputContextDestinationChange dealloc]
  -[AVOutputContextDestinationChange init]
  -[AVOutputContextDestinationChange cancellationReason]
  -[AVOutputContextDestinationChange markAsInProgress]
  -[AVOutputContextDestinationChange markAsFailed]
  -[AVOutputContextDestinationChange markAsCancelledWithReason:]
  -[AVOutputContextDestinationChange _setStatus:cancellationReason:]
  -[AVOutputContextDestinationChange changeToTerminalStatusBasedOnRouteChangeEndedReason:]
  -[AVOutputContextDestinationChange changeToTerminalStatusBasedOnRouteConfigUpdatedReason:]


AVOutputContextManagerInternal : NSObject

AVOutputContextManager : NSObject
  // class methods
  +[AVOutputContextManager outputContextManagerForAllOutputContexts]

  // instance methods
  -[AVOutputContextManager outputContextManagerImplDidExpireWithReplacementImpl:]
  -[AVOutputContextManager dealloc]
  -[AVOutputContextManager outputContextManagerImpl:observedFailureToConnectToOutputDevice:reason:]
  -[AVOutputContextManager initWithOutputContextManagerImpl:]


AVSystemRemotePoolOutputDeviceCommunicationChannelManager : NSObject <AVOutputDeviceCommunicationChannelManager>
 @property  AVOutputDevice *parentOutputDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVSystemRemotePoolOutputDeviceCommunicationChannelManager sharedSystemRemotePoolImpl]
  +[AVSystemRemotePoolOutputDeviceCommunicationChannelManager sharedSystemRemotePool]

  // instance methods
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager initWithDeviceID:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager openCommunicationChannelWithOptions:completionHandler:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager _initializeIfNeededAndGetSystemRemotePool]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager setParentOutputDevice:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager dealloc]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager parentOutputDevice]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager .cxx_destruct]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager _didCloseCommChannelWithUUID:forDeviceWithID:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelManager _didReceiveData:fromDeviceWithID:fromChannelWithUUID:]


AVSystemRemotePoolOutputDeviceCommunicationChannelImpl : NSObject <AVOutputDeviceCommunicationChannelImpl>
 @property  AVOutputDeviceCommunicationChannel *parentChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl dealloc]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl close]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl .cxx_destruct]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl sendData:completionHandler:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl parentChannel]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl setParentChannel:]
  -[AVSystemRemotePoolOutputDeviceCommunicationChannelImpl initWithDeviceID:channelUUID:outputContext:]


AVMovieTrackInternal : NSObject
  // instance methods
  -[AVMovieTrackInternal .cxx_destruct]


AVMovieTrack : AVAssetTrack
 @property  {?={?=qiIq}{?=qiIq}} mediaPresentationTimeRange
 @property  {?={?=qiIq}{?=qiIq}} mediaDecodeTimeRange
 @property  long long alternateGroupID

  // class methods
  +[AVMovieTrack expectsPropertyRevisedNotifications]

  // instance methods
  -[AVMovieTrack alternateGroupID]
  -[AVMovieTrack .cxx_destruct]
  -[AVMovieTrack mediaPresentationTimeRange]
  -[AVMovieTrack mediaDecodeTimeRange]
  -[AVMovieTrack mediaDataStorage]


AVMutableMovieTrackInternal : NSObject
  // instance methods
  -[AVMutableMovieTrackInternal .cxx_destruct]


AVMutableMovieTrack : AVMovieTrack
 @property  NSArray *formatDescriptions
 @property  NSArray *metadata
 @property  AVMediaDataStorage *mediaDataStorage
 @property  NSURL *sampleReferenceBaseURL
 @property  BOOL enabled
 @property  long long alternateGroupID
 @property  BOOL modified
 @property  BOOL hasProtectedContent
 @property  int timescale

  // class methods
  +[AVMutableMovieTrack expectsPropertyRevisedNotifications]
  +[AVMutableMovieTrack trackWithTrackID:forMovie:]

  // instance methods
  -[AVMutableMovieTrack formatDescriptions]
  -[AVMutableMovieTrack naturalSize]
  -[AVMutableMovieTrack loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVMutableMovieTrack _signalMetadataUpdated]
  -[AVMutableMovieTrack preferredVolume]
  -[AVMutableMovieTrack metadataForFormat:]
  -[AVMutableMovieTrack setLanguageCode:]
  -[AVMutableMovieTrack sampleReferenceBaseURL]
  -[AVMutableMovieTrack setTimescale:]
  -[AVMutableMovieTrack preferredTransform]
  -[AVMutableMovieTrack setLayer:]
  -[AVMutableMovieTrack setAlternateGroupID:]
  -[AVMutableMovieTrack trackID]
  -[AVMutableMovieTrack layer]
  -[AVMutableMovieTrack scaleTimeRange:toDuration:]
  -[AVMutableMovieTrack setPreferredMediaChunkDuration:]
  -[AVMutableMovieTrack setPreferredVolume:]
  -[AVMutableMovieTrack preferredMediaChunkAlignment]
  -[AVMutableMovieTrack alternateGroupID]
  -[AVMutableMovieTrack setSampleReferenceBaseURL:]
  -[AVMutableMovieTrack statusOfValueForKey:error:]
  -[AVMutableMovieTrack preferredMediaChunkSize]
  -[AVMutableMovieTrack setNaturalSize:]
  -[AVMutableMovieTrack dealloc]
  -[AVMutableMovieTrack extendedLanguageTag]
  -[AVMutableMovieTrack dimensions]
  -[AVMutableMovieTrack setModified:]
  -[AVMutableMovieTrack hasProtectedContent]
  -[AVMutableMovieTrack .cxx_destruct]
  -[AVMutableMovieTrack setEnabled:]
  -[AVMutableMovieTrack languageCode]
  -[AVMutableMovieTrack _figAssetTrack]
  -[AVMutableMovieTrack preferredMediaChunkDuration]
  -[AVMutableMovieTrack locale]
  -[AVMutableMovieTrack availableMetadataFormats]
  -[AVMutableMovieTrack setExtendedLanguageTag:]
  -[AVMutableMovieTrack setMetadata:]
  -[AVMutableMovieTrack insertEmptyTimeRange:]
  -[AVMutableMovieTrack setPreferredMediaChunkSize:]
  -[AVMutableMovieTrack setPreferredTransform:]
  -[AVMutableMovieTrack mediaPresentationTimeRange]
  -[AVMutableMovieTrack removeTimeRange:]
  -[AVMutableMovieTrack metadata]
  -[AVMutableMovieTrack isModified]
  -[AVMutableMovieTrack _figMutableMovie]
  -[AVMutableMovieTrack timescale]
  -[AVMutableMovieTrack setPreferredMediaChunkAlignment:]
  -[AVMutableMovieTrack isEnabled]
  -[AVMutableMovieTrack mediaDecodeTimeRange]
  -[AVMutableMovieTrack addTrackAssociationToTrack:type:]
  -[AVMutableMovieTrack removeTrackAssociationToTrack:type:]
  -[AVMutableMovieTrack replaceFormatDescription:withFormatDescription:]
  -[AVMutableMovieTrack mediaDataStorage]
  -[AVMutableMovieTrack initWithTrackID:forMovie:]
  -[AVMutableMovieTrack _addFigAssetTrackNotifications]
  -[AVMutableMovieTrack _removeFigAssetTrackNotifications]
  -[AVMutableMovieTrack cleanApertureDimensions]
  -[AVMutableMovieTrack productionApertureDimensions]
  -[AVMutableMovieTrack encodedPixelsDimensions]
  -[AVMutableMovieTrack _sizeForProperty:]
  -[AVMutableMovieTrack _setSize:forProperty:]
  -[AVMutableMovieTrack _stringForProperty:]
  -[AVMutableMovieTrack _setString:forProperty:]
  -[AVMutableMovieTrack setMediaDataStorage:]
  -[AVMutableMovieTrack setCleanApertureDimensions:]
  -[AVMutableMovieTrack setProductionApertureDimensions:]
  -[AVMutableMovieTrack setEncodedPixelsDimensions:]
  -[AVMutableMovieTrack isCompatibleWithFormatDescription:]
  -[AVMutableMovieTrack insertTimeRange:ofTrack:atTime:copySampleData:error:]
  -[AVMutableMovieTrack appendSampleBuffer:decodeTime:presentationTime:error:]
  -[AVMutableMovieTrack insertMediaTimeRange:intoTimeRange:]
  -[AVMutableMovieTrack appendMediaData:dataOffset:]


AVVideoPerformanceMetricsInternal : NSObject

AVVideoPerformanceMetrics : NSObject
 @property  unsigned long totalNumberOfVideoFrames
 @property  unsigned long numberOfDroppedVideoFrames
 @property  unsigned long numberOfCorruptedVideoFrames
 @property  unsigned long numberOfDisplayCompositedVideoFrames
 @property  unsigned long numberOfNonDisplayCompositedVideoFrames
 @property  double totalFrameDelay

  // instance methods
  -[AVVideoPerformanceMetrics initWithDictionary:]
  -[AVVideoPerformanceMetrics dealloc]
  -[AVVideoPerformanceMetrics init]
  -[AVVideoPerformanceMetrics totalNumberOfVideoFrames]
  -[AVVideoPerformanceMetrics numberOfDroppedVideoFrames]
  -[AVVideoPerformanceMetrics numberOfCorruptedVideoFrames]
  -[AVVideoPerformanceMetrics numberOfDisplayCompositedVideoFrames]
  -[AVVideoPerformanceMetrics numberOfNonDisplayCompositedVideoFrames]
  -[AVVideoPerformanceMetrics totalFrameDelay]


AVSampleBufferGeneratorInternal : NSObject

AVSampleBufferGenerator : NSObject
  // class methods
  +[AVSampleBufferGenerator initialize]
  +[AVSampleBufferGenerator notifyOfDataReadyForSampleBuffer:completionHandler:]

  // instance methods
  -[AVSampleBufferGenerator dealloc]
  -[AVSampleBufferGenerator copyWithZone:]
  -[AVSampleBufferGenerator init]
  -[AVSampleBufferGenerator initWithAsset:timebase:]
  -[AVSampleBufferGenerator _figSampleGenerator]
  -[AVSampleBufferGenerator makeBatch]
  -[AVSampleBufferGenerator createSampleBufferForRequest:error:]
  -[AVSampleBufferGenerator createSampleBufferForRequest:]
  -[AVSampleBufferGenerator createSampleBufferForRequest:addingToBatch:error:]


AVSampleBufferRequestInternal : NSObject

AVSampleBufferRequest : NSObject
 @property  AVSampleCursor *startCursor
 @property  long long direction
 @property  AVSampleCursor *limitCursor
 @property  long long preferredMinSampleCount
 @property  long long maxSampleCount
 @property  long long mode
 @property  {?=qiIq} overrideTime

  // class methods
  +[AVSampleBufferRequest sampleBufferRequestWithStartCursor:]

  // instance methods
  -[AVSampleBufferRequest setDirection:]
  -[AVSampleBufferRequest dealloc]
  -[AVSampleBufferRequest mode]
  -[AVSampleBufferRequest setMode:]
  -[AVSampleBufferRequest direction]
  -[AVSampleBufferRequest init]
  -[AVSampleBufferRequest maxSampleCount]
  -[AVSampleBufferRequest startCursor]
  -[AVSampleBufferRequest limitCursor]
  -[AVSampleBufferRequest preferredMinSampleCount]
  -[AVSampleBufferRequest overrideTime]
  -[AVSampleBufferRequest initWithStartCursor:]
  -[AVSampleBufferRequest setLimitCursor:]
  -[AVSampleBufferRequest setPreferredMinSampleCount:]
  -[AVSampleBufferRequest setMaxSampleCount:]
  -[AVSampleBufferRequest _figSampleGeneratorReadPolicy]
  -[AVSampleBufferRequest _figSampleGeneratorReadFlags]
  -[AVSampleBufferRequest setOverrideTime:]


AVSampleBufferGeneratorBatch : NSObject
 @property  AVSampleBufferGenerator *_generator

  // class methods
  +[AVSampleBufferGeneratorBatch initialize]

  // instance methods
  -[AVSampleBufferGeneratorBatch dealloc]
  -[AVSampleBufferGeneratorBatch _completionHandler]
  -[AVSampleBufferGeneratorBatch _generator]
  -[AVSampleBufferGeneratorBatch cancel]
  -[AVSampleBufferGeneratorBatch init]
  -[AVSampleBufferGeneratorBatch initWithGenerator:]
  -[AVSampleBufferGeneratorBatch isOpenToRequests]
  -[AVSampleBufferGeneratorBatch createAndAddSampleBufferForRequest:error:]
  -[AVSampleBufferGeneratorBatch makeDataReadyWithCompletionHandler:]


AVAssetInspector : AVFigObjectInspector <NSCopying>
 @property  {?=qiIq} duration
 @property  float preferredRate
 @property  float preferredVolume
 @property  float preferredSoundCheckVolumeNormalization
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  {?=qiIq} minimumTimeOffsetFromLive
 @property  {CGSize=dd} naturalSize
 @property  int naturalTimeScale
 @property  BOOL providesPreciseDurationAndTiming
 @property  long long trackCount
 @property  NSArray *trackIDs
 @property  NSArray *alternateTrackGroups
 @property  NSDictionary *trackReferences
 @property  NSArray *mediaSelectionGroupDictionaries
 @property  AVMetadataItem *creationDate
 @property  NSString *lyrics
 @property  NSArray *commonMetadata
 @property  NSArray *availableMetadataFormats
 @property  BOOL playable
 @property  BOOL exportable
 @property  BOOL readable
 @property  BOOL composable
 @property  BOOL compatibleWithSavedPhotosAlbum
 @property  BOOL compatibleWithAirPlayVideo
 @property  NSData *SHA1Digest
 @property  BOOL canContainFragments
 @property  BOOL containsFragments
 @property  {?=qiIq} overallDurationHint
 @property  long long firstFragmentSequenceNumber
 @property  long long fragmentCount
 @property  id propertyListForProxy
 @property  NSString *identifyingTagClass
 @property  NSString *identifyingTag
 @property  {CGSize=dd} maximumVideoResolution
 @property  NSArray *availableVideoDynamicRanges
 @property  AVDisplayCriteria *preferredDisplayCriteria
 @property  NSUUID *httpSessionIdentifier
 @property  BOOL supportsAnalysisReporting
 @property  NSArray *assetAnalysisMessages

  // instance methods
  -[AVAssetInspector lyrics]
  -[AVAssetInspector naturalSize]
  -[AVAssetInspector trackCount]
  -[AVAssetInspector makePropertyListForProxyWithOptions:]
  -[AVAssetInspector isReadable]
  -[AVAssetInspector preferredVolume]
  -[AVAssetInspector metadataForFormat:]
  -[AVAssetInspector commonMetadata]
  -[AVAssetInspector isPlayable]
  -[AVAssetInspector preferredTransform]
  -[AVAssetInspector identifyingTagClass]
  -[AVAssetInspector preferredDisplayCriteria]
  -[AVAssetInspector isComposable]
  -[AVAssetInspector supportsAnalysisReporting]
  -[AVAssetInspector isCompatibleWithAirPlayVideo]
  -[AVAssetInspector maximumVideoResolution]
  -[AVAssetInspector alternateTrackGroups]
  -[AVAssetInspector isCompatibleWithPhotosTranscodingServiceWithOptions:]
  -[AVAssetInspector firstFragmentSequenceNumber]
  -[AVAssetInspector propertyListForProxy]
  -[AVAssetInspector providesPreciseDurationAndTiming]
  -[AVAssetInspector httpSessionIdentifier]
  -[AVAssetInspector hasProtectedContent]
  -[AVAssetInspector trackReferences]
  -[AVAssetInspector identifyingTag]
  -[AVAssetInspector creationDate]
  -[AVAssetInspector duration]
  -[AVAssetInspector preferredSoundCheckVolumeNormalization]
  -[AVAssetInspector availableMetadataFormats]
  -[AVAssetInspector fragmentCount]
  -[AVAssetInspector naturalTimeScale]
  -[AVAssetInspector isExportable]
  -[AVAssetInspector isCompatibleWithSavedPhotosAlbum]
  -[AVAssetInspector preferredRate]
  -[AVAssetInspector _mediaSelectionGroupDictionaries]
  -[AVAssetInspector copyWithZone:]
  -[AVAssetInspector minimumTimeOffsetFromLive]
  -[AVAssetInspector _assetAnalysisMessages]
  -[AVAssetInspector SHA1Digest]
  -[AVAssetInspector overallDurationHint]
  -[AVAssetInspector availableVideoDynamicRanges]
  -[AVAssetInspector canContainFragments]
  -[AVAssetInspector containsFragments]
  -[AVAssetInspector trackIDs]


AVFormatReaderInspector : AVAssetInspector
 @property  ^{OpaqueFigFormatReader=} formatReader

  // instance methods
  -[AVFormatReaderInspector lyrics]
  -[AVFormatReaderInspector _valueAsCFTypeForProperty:]
  -[AVFormatReaderInspector naturalSize]
  -[AVFormatReaderInspector trackCount]
  -[AVFormatReaderInspector isReadable]
  -[AVFormatReaderInspector preferredVolume]
  -[AVFormatReaderInspector metadataForFormat:]
  -[AVFormatReaderInspector commonMetadata]
  -[AVFormatReaderInspector preferredTransform]
  -[AVFormatReaderInspector isComposable]
  -[AVFormatReaderInspector alternateTrackGroups]
  -[AVFormatReaderInspector firstFragmentSequenceNumber]
  -[AVFormatReaderInspector providesPreciseDurationAndTiming]
  -[AVFormatReaderInspector dealloc]
  -[AVFormatReaderInspector trackReferences]
  -[AVFormatReaderInspector duration]
  -[AVFormatReaderInspector preferredSoundCheckVolumeNormalization]
  -[AVFormatReaderInspector availableMetadataFormats]
  -[AVFormatReaderInspector fragmentCount]
  -[AVFormatReaderInspector naturalTimeScale]
  -[AVFormatReaderInspector _hasQTSaveRestriction]
  -[AVFormatReaderInspector _formatReader]
  -[AVFormatReaderInspector isExportable]
  -[AVFormatReaderInspector preferredRate]
  -[AVFormatReaderInspector minimumTimeOffsetFromLive]
  -[AVFormatReaderInspector overallDurationHint]
  -[AVFormatReaderInspector canContainFragments]
  -[AVFormatReaderInspector containsFragments]
  -[AVFormatReaderInspector isEqual:]
  -[AVFormatReaderInspector initWithFormatReader:]
  -[AVFormatReaderInspector _setFormatReader:]


AVPlaybackItemInspector : AVAssetInspector
 @property  ^{OpaqueFigPlaybackItem=} playbackItem

  // instance methods
  -[AVPlaybackItemInspector lyrics]
  -[AVPlaybackItemInspector _valueAsCFTypeForProperty:]
  -[AVPlaybackItemInspector naturalSize]
  -[AVPlaybackItemInspector trackCount]
  -[AVPlaybackItemInspector metadataForFormat:]
  -[AVPlaybackItemInspector _playbackItem]
  -[AVPlaybackItemInspector commonMetadata]
  -[AVPlaybackItemInspector _setPlaybackItem:]
  -[AVPlaybackItemInspector providesPreciseDurationAndTiming]
  -[AVPlaybackItemInspector dealloc]
  -[AVPlaybackItemInspector duration]
  -[AVPlaybackItemInspector availableMetadataFormats]
  -[AVPlaybackItemInspector initWithPlaybackItem:trackIDs:]
  -[AVPlaybackItemInspector compatibleTrackForCompositionTrack:]
  -[AVPlaybackItemInspector isEqual:]
  -[AVPlaybackItemInspector trackIDs]


AVStreamingResourceInspector : AVAssetInspector
  // instance methods
  -[AVStreamingResourceInspector duration]


AVFigAssetInspector : AVAssetInspector
 @property  ^{OpaqueFigAsset=} figAsset
 @property  ^{OpaqueFigFormatReader=} formatReader
 @property  NSURL *URL
 @property  NSArray *figChapterGroupInfo
 @property  NSArray *figChapters
 @property  NSURL *resolvedURL
 @property  NSURL *originalNetworkContentURL
 @property  BOOL hasProtectedContent
 @property  BOOL streaming
 @property  unsigned long downloadToken
 @property  NSArray *variants
 @property  NSArray *contentKeySpecifiersEligibleForPreloading

  // instance methods
  -[AVFigAssetInspector lyrics]
  -[AVFigAssetInspector _valueAsCFTypeForProperty:]
  -[AVFigAssetInspector naturalSize]
  -[AVFigAssetInspector trackCount]
  -[AVFigAssetInspector makePropertyListForProxyWithOptions:]
  -[AVFigAssetInspector downloadToken]
  -[AVFigAssetInspector isReadable]
  -[AVFigAssetInspector preferredVolume]
  -[AVFigAssetInspector metadataForFormat:]
  -[AVFigAssetInspector commonMetadata]
  -[AVFigAssetInspector isPlayable]
  -[AVFigAssetInspector _isStreaming]
  -[AVFigAssetInspector preferredTransform]
  -[AVFigAssetInspector identifyingTagClass]
  -[AVFigAssetInspector preferredDisplayCriteria]
  -[AVFigAssetInspector isComposable]
  -[AVFigAssetInspector supportsAnalysisReporting]
  -[AVFigAssetInspector isCompatibleWithAirPlayVideo]
  -[AVFigAssetInspector initWithFigAsset:]
  -[AVFigAssetInspector maximumVideoResolution]
  -[AVFigAssetInspector alternateTrackGroups]
  -[AVFigAssetInspector isCompatibleWithPhotosTranscodingServiceWithOptions:]
  -[AVFigAssetInspector firstFragmentSequenceNumber]
  -[AVFigAssetInspector propertyListForProxy]
  -[AVFigAssetInspector providesPreciseDurationAndTiming]
  -[AVFigAssetInspector dealloc]
  -[AVFigAssetInspector variants]
  -[AVFigAssetInspector httpSessionIdentifier]
  -[AVFigAssetInspector hasProtectedContent]
  -[AVFigAssetInspector trackReferences]
  -[AVFigAssetInspector identifyingTag]
  -[AVFigAssetInspector creationDate]
  -[AVFigAssetInspector duration]
  -[AVFigAssetInspector preferredSoundCheckVolumeNormalization]
  -[AVFigAssetInspector availableMetadataFormats]
  -[AVFigAssetInspector fragmentCount]
  -[AVFigAssetInspector _nameForProxy]
  -[AVFigAssetInspector naturalTimeScale]
  -[AVFigAssetInspector _hasQTSaveRestriction]
  -[AVFigAssetInspector _formatReader]
  -[AVFigAssetInspector isExportable]
  -[AVFigAssetInspector isCompatibleWithSavedPhotosAlbum]
  -[AVFigAssetInspector preferredRate]
  -[AVFigAssetInspector contentKeySpecifiersEligibleForPreloading]
  -[AVFigAssetInspector originalNetworkContentURL]
  -[AVFigAssetInspector _mediaSelectionGroupDictionaries]
  -[AVFigAssetInspector minimumTimeOffsetFromLive]
  -[AVFigAssetInspector _assetAnalysisMessages]
  -[AVFigAssetInspector SHA1Digest]
  -[AVFigAssetInspector overallDurationHint]
  -[AVFigAssetInspector URL]
  -[AVFigAssetInspector availableVideoDynamicRanges]
  -[AVFigAssetInspector canContainFragments]
  -[AVFigAssetInspector resolvedURL]
  -[AVFigAssetInspector containsFragments]
  -[AVFigAssetInspector _figAsset]
  -[AVFigAssetInspector isEqual:]
  -[AVFigAssetInspector figChapters]
  -[AVFigAssetInspector figChapterGroupInfo]


AVScheduledAudioParametersInternal : NSObject

AVScheduledAudioParameters : NSObject <NSCopying, NSMutableCopying>
 @property  NSArray *ramps

  // instance methods
  -[AVScheduledAudioParameters dealloc]
  -[AVScheduledAudioParameters copyWithZone:]
  -[AVScheduledAudioParameters mutableCopyWithZone:]
  -[AVScheduledAudioParameters isEqual:]
  -[AVScheduledAudioParameters init]
  -[AVScheduledAudioParameters _setVolumeRampFromStartVolume:toEndVolume:timeRange:rampMode:]
  -[AVScheduledAudioParameters getVolumeRampForTime:startVolume:endVolume:timeRange:]
  -[AVScheduledAudioParameters getVolumeRampForTime:startVolume:endVolume:timeRange:rampMode:]
  -[AVScheduledAudioParameters _audioVolumeCurve]
  -[AVScheduledAudioParameters _volumeCurveAsString]
  -[AVScheduledAudioParameters _ramps]
  -[AVScheduledAudioParameters _setRamps:]


AVMutableScheduledAudioParameters : AVScheduledAudioParameters
  // class methods
  +[AVMutableScheduledAudioParameters scheduledAudioParameters]

  // instance methods
  -[AVMutableScheduledAudioParameters copyWithZone:]
  -[AVMutableScheduledAudioParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:]
  -[AVMutableScheduledAudioParameters setVolumeRampFromStartVolume:toEndVolume:timeRange:rampMode:]
  -[AVMutableScheduledAudioParameters setVolume:atTime:]


AVWeakReferencingDelegateStorage : NSObject <AVDelegateStorage>
 @property  id delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVWeakReferencingDelegateStorage initialize]

  // instance methods
  -[AVWeakReferencingDelegateStorage _delegate]
  -[AVWeakReferencingDelegateStorage delegate]
  -[AVWeakReferencingDelegateStorage dealloc]
  -[AVWeakReferencingDelegateStorage delegateQueue]
  -[AVWeakReferencingDelegateStorage _collectUncollectables]
  -[AVWeakReferencingDelegateStorage _setDelegateViaWeakReference:]
  -[AVWeakReferencingDelegateStorage setDelegate:queue:]
  -[AVWeakReferencingDelegateStorage invokeDelegateCallbackWithBlock:]
  -[AVWeakReferencingDelegateStorage getRetainedDelegate:retainedDelegateQueue:]
  -[AVWeakReferencingDelegateStorage invokeDelegateCallbackWithBlock:synchronouslyIfDelegateQueueIsQueue:]
  -[AVWeakReferencingDelegateStorage init]


AVOperation : NSOperation
 @property  long long status
 @property  NSError *error

  // class methods
  +[AVOperation initialize]
  +[AVOperation statusOfOperations:error:]

  // instance methods
  -[AVOperation isReady]
  -[AVOperation isFinished]
  -[AVOperation markAsCompleted]
  -[AVOperation error]
  -[AVOperation status]
  -[AVOperation dealloc]
  -[AVOperation markAsFailedWithError:]
  -[AVOperation isExecuting]
  -[AVOperation didEnterTerminalState]
  -[AVOperation init]
  -[AVOperation evaluateDependenciesAndMarkAsExecuting]
  -[AVOperation _setStatus:error:resultingStatus:failureReason:]
  -[AVOperation markAsCancelled]


AVBlockOperation : AVOperation
  // instance methods
  -[AVBlockOperation dealloc]
  -[AVBlockOperation start]
  -[AVBlockOperation initWithBlock:]
  -[AVBlockOperation cancel]
  -[AVBlockOperation init]


AVGlobalOperationQueue : NSObject
 @property  NSArray *unfinishedOperations

  // class methods
  +[AVGlobalOperationQueue defaultQueue]

  // instance methods
  -[AVGlobalOperationQueue dealloc]
  -[AVGlobalOperationQueue unfinishedOperations]
  -[AVGlobalOperationQueue enqueueOperation:]
  -[AVGlobalOperationQueue init]


AVOperationQueueWithFundamentalDependency : NSOperationQueue
  // instance methods
  -[AVOperationQueueWithFundamentalDependency addOperation:]
  -[AVOperationQueueWithFundamentalDependency dealloc]
  -[AVOperationQueueWithFundamentalDependency addOperations:waitUntilFinished:]
  -[AVOperationQueueWithFundamentalDependency initWithFundamentalOperation:]


AVDepartureAnnouncingObjectMonitor : NSObject
  // class methods
  +[AVDepartureAnnouncingObjectMonitor attachDepartureAnnouncingObjectMonitorToObject:monitoringObject:]

  // instance methods
  -[AVDepartureAnnouncingObjectMonitor dealloc]
  -[AVDepartureAnnouncingObjectMonitor initWithMonitoringObject:]


AVWaitForNotificationOrDeallocationOperation : NSOperation <AVObjectMonitoring>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVWaitForNotificationOrDeallocationOperation dealloc]
  -[AVWaitForNotificationOrDeallocationOperation main]
  -[AVWaitForNotificationOrDeallocationOperation cancel]
  -[AVWaitForNotificationOrDeallocationOperation monitoredObjectHasDeparted]
  -[AVWaitForNotificationOrDeallocationOperation initWithObject:notificationNames:]
  -[AVWaitForNotificationOrDeallocationOperation _registerForObjectNotifications]
  -[AVWaitForNotificationOrDeallocationOperation _unregisterForObjectNotifications]
  -[AVWaitForNotificationOrDeallocationOperation _monitoredObject]
  -[AVWaitForNotificationOrDeallocationOperation _signalMonitoringIsFinishedIfNeeded]
  -[AVWaitForNotificationOrDeallocationOperation _waitUntilFinishedIfNeeded]
  -[AVWaitForNotificationOrDeallocationOperation _balanceMonitoringIsFinishedSemaphore]


AVAssetInspectorLoader : NSObject <NSCopying, AVAsynchronousKeyValueLoading>
 @property  AVWeakReference *weakReference
 @property  NSURL *URL
 @property  ^{OpaqueFigFormatReader=} formatReader
 @property  ^{OpaqueFigAsset=} figAsset
 @property  ^{OpaqueFigPlaybackItem=} playbackItem
 @property  Class classForTrackInspectors
 @property  {?=qiIq} duration
 @property  NSArray *variants
 @property  NSString *lyrics
 @property  BOOL playable
 @property  BOOL exportable
 @property  BOOL readable
 @property  BOOL composable
 @property  BOOL compatibleWithSavedPhotosAlbum
 @property  NSArray *figChapterGroupInfo
 @property  NSArray *figChapters
 @property  NSURL *resolvedURL
 @property  NSURL *originalNetworkContentURL
 @property  unsigned long downloadToken
 @property  NSArray *contentKeySpecifiersEligibleForPreloading
 @property  BOOL hasProtectedContent
 @property  BOOL streaming
 @property  long long firstFragmentSequenceNumber
 @property  long long fragmentCount
 @property  BOOL associatedWithFragmentMinder
 @property  double fragmentMindingInterval

  // class methods
  +[AVAssetInspectorLoader initialize]

  // instance methods
  -[AVAssetInspectorLoader lyrics]
  -[AVAssetInspectorLoader loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAssetInspectorLoader downloadToken]
  -[AVAssetInspectorLoader isReadable]
  -[AVAssetInspectorLoader _playbackItem]
  -[AVAssetInspectorLoader isPlayable]
  -[AVAssetInspectorLoader cancelLoading]
  -[AVAssetInspectorLoader _isStreaming]
  -[AVAssetInspectorLoader _setFragmentMindingInterval:]
  -[AVAssetInspectorLoader isComposable]
  -[AVAssetInspectorLoader statusOfValueForKey:error:]
  -[AVAssetInspectorLoader firstFragmentSequenceNumber]
  -[AVAssetInspectorLoader dealloc]
  -[AVAssetInspectorLoader variants]
  -[AVAssetInspectorLoader hasProtectedContent]
  -[AVAssetInspectorLoader _fragmentMindingInterval]
  -[AVAssetInspectorLoader loadValuesAsynchronouslyForKeys:keysForCollectionKeys:completionHandler:]
  -[AVAssetInspectorLoader _ensureAllDependenciesOfKeyAreLoaded:]
  -[AVAssetInspectorLoader duration]
  -[AVAssetInspectorLoader fragmentCount]
  -[AVAssetInspectorLoader _formatReader]
  -[AVAssetInspectorLoader isExportable]
  -[AVAssetInspectorLoader isCompatibleWithSavedPhotosAlbum]
  -[AVAssetInspectorLoader assetInspector]
  -[AVAssetInspectorLoader contentKeySpecifiersEligibleForPreloading]
  -[AVAssetInspectorLoader originalNetworkContentURL]
  -[AVAssetInspectorLoader _weakReference]
  -[AVAssetInspectorLoader copyWithZone:]
  -[AVAssetInspectorLoader _classForTrackInspectors]
  -[AVAssetInspectorLoader URL]
  -[AVAssetInspectorLoader _setIsAssociatedWithFragmentMinder:]
  -[AVAssetInspectorLoader resolvedURL]
  -[AVAssetInspectorLoader _figAsset]
  -[AVAssetInspectorLoader isAssociatedWithFragmentMinder]
  -[AVAssetInspectorLoader figChapters]
  -[AVAssetInspectorLoader init]
  -[AVAssetInspectorLoader figChapterGroupInfo]
  -[AVAssetInspectorLoader _serverHasDied]
  -[AVAssetInspectorLoader _createAVErrorForError:andFigErrorCode:]


AVAssetSynchronousInspectorLoader : AVAssetInspectorLoader
  // instance methods
  -[AVAssetSynchronousInspectorLoader lyrics]
  -[AVAssetSynchronousInspectorLoader loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAssetSynchronousInspectorLoader isReadable]
  -[AVAssetSynchronousInspectorLoader isPlayable]
  -[AVAssetSynchronousInspectorLoader isComposable]
  -[AVAssetSynchronousInspectorLoader statusOfValueForKey:error:]
  -[AVAssetSynchronousInspectorLoader dealloc]
  -[AVAssetSynchronousInspectorLoader loadValuesAsynchronouslyForKeys:keysForCollectionKeys:completionHandler:]
  -[AVAssetSynchronousInspectorLoader duration]
  -[AVAssetSynchronousInspectorLoader isExportable]
  -[AVAssetSynchronousInspectorLoader isCompatibleWithSavedPhotosAlbum]
  -[AVAssetSynchronousInspectorLoader assetInspector]
  -[AVAssetSynchronousInspectorLoader isEqual:]
  -[AVAssetSynchronousInspectorLoader initWithAssetInspector:]


AVAssetMakeReadyForInspectionLoader : AVAssetInspectorLoader
  // instance methods
  -[AVAssetMakeReadyForInspectionLoader lyrics]
  -[AVAssetMakeReadyForInspectionLoader loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAssetMakeReadyForInspectionLoader isReadable]
  -[AVAssetMakeReadyForInspectionLoader _playbackItem]
  -[AVAssetMakeReadyForInspectionLoader isPlayable]
  -[AVAssetMakeReadyForInspectionLoader cancelLoading]
  -[AVAssetMakeReadyForInspectionLoader _loadingMutex]
  -[AVAssetMakeReadyForInspectionLoader _isStreaming]
  -[AVAssetMakeReadyForInspectionLoader isComposable]
  -[AVAssetMakeReadyForInspectionLoader initWithURL:]
  -[AVAssetMakeReadyForInspectionLoader _dictionaryOfSpecialGettersForKeyValueStatus]
  -[AVAssetMakeReadyForInspectionLoader statusOfValueForKey:error:]
  -[AVAssetMakeReadyForInspectionLoader firstFragmentSequenceNumber]
  -[AVAssetMakeReadyForInspectionLoader dealloc]
  -[AVAssetMakeReadyForInspectionLoader hasProtectedContent]
  -[AVAssetMakeReadyForInspectionLoader _status]
  -[AVAssetMakeReadyForInspectionLoader duration]
  -[AVAssetMakeReadyForInspectionLoader fragmentCount]
  -[AVAssetMakeReadyForInspectionLoader _formatReader]
  -[AVAssetMakeReadyForInspectionLoader isExportable]
  -[AVAssetMakeReadyForInspectionLoader assetInspector]
  -[AVAssetMakeReadyForInspectionLoader copyWithZone:]
  -[AVAssetMakeReadyForInspectionLoader URL]
  -[AVAssetMakeReadyForInspectionLoader _loadValuesUsingDefaultLoadingMethodWhileMutexLockedForKeys:]
  -[AVAssetMakeReadyForInspectionLoader _copyFormatReaderFromFigObjectWithFigErrorCode:]
  -[AVAssetMakeReadyForInspectionLoader _inspectionRequiresAFormatReader]
  -[AVAssetMakeReadyForInspectionLoader figChapterGroupInfo]
  -[AVAssetMakeReadyForInspectionLoader _serverHasDied]
  -[AVAssetMakeReadyForInspectionLoader _providesAccurateTiming]
  -[AVAssetMakeReadyForInspectionLoader _statusOfValueForKeyThatIsAlwaysLoaded]
  -[AVAssetMakeReadyForInspectionLoader _statusOfValueWhileMutexLockedForKey:error:]
  -[AVAssetMakeReadyForInspectionLoader _statusOfValuesIsTerminalWhileMutexLockedForKeys:]
  -[AVAssetMakeReadyForInspectionLoader _getAndPruneCompletionsWhileMutexLocked]
  -[AVAssetMakeReadyForInspectionLoader _updateStatusWhileMutexLocked:figErrorCode:]
  -[AVAssetMakeReadyForInspectionLoader _setStatus:figErrorCode:]
  -[AVAssetMakeReadyForInspectionLoader _dictionaryOfSpecialLoadingMethodsForKeys]
  -[AVAssetMakeReadyForInspectionLoader _loadValuesWhileMutexLockedForKeys:]


AVPlaybackItemInspectorLoader : AVAssetMakeReadyForInspectionLoader
 @property  ^{OpaqueFigPlaybackItem=} playbackItem

  // instance methods
  -[AVPlaybackItemInspectorLoader _playbackItem]
  -[AVPlaybackItemInspectorLoader cancelLoading]
  -[AVPlaybackItemInspectorLoader _dictionaryOfSpecialGettersForKeyValueStatus]
  -[AVPlaybackItemInspectorLoader dealloc]
  -[AVPlaybackItemInspectorLoader _addFigObjectNotifications]
  -[AVPlaybackItemInspectorLoader duration]
  -[AVPlaybackItemInspectorLoader _removeFigObjectNotifications]
  -[AVPlaybackItemInspectorLoader assetInspector]
  -[AVPlaybackItemInspectorLoader _classForTrackInspectors]
  -[AVPlaybackItemInspectorLoader _loadValuesUsingDefaultLoadingMethodWhileMutexLockedForKeys:]
  -[AVPlaybackItemInspectorLoader _playbackItemPropertiesForKeys:]
  -[AVPlaybackItemInspectorLoader _copyFormatReaderFromFigObjectWithFigErrorCode:]
  -[AVPlaybackItemInspectorLoader _inspectionRequiresAFormatReader]
  -[AVPlaybackItemInspectorLoader isEqual:]
  -[AVPlaybackItemInspectorLoader initWithURL:playbackItem:trackIDs:dynamicBehavior:]


AVFigAssetInspectorLoader : AVAssetInspectorLoader
  // class methods
  +[AVFigAssetInspectorLoader _mapAssetKeys:toFigAssetPropertySet:figAssetTrackPropertySet:callerName:]
  +[AVFigAssetInspectorLoader _figAssetTrackMediaSelectionPropertiesArray]
  +[AVFigAssetInspectorLoader _figAssetMediaSelectionPropertiesArray]
  +[AVFigAssetInspectorLoader _figAssetPropertiesForKeys]
  +[AVFigAssetInspectorLoader _figAssetTrackPropertiesForKeys]

  // instance methods
  -[AVFigAssetInspectorLoader lyrics]
  -[AVFigAssetInspectorLoader loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVFigAssetInspectorLoader downloadToken]
  -[AVFigAssetInspectorLoader isReadable]
  -[AVFigAssetInspectorLoader isPlayable]
  -[AVFigAssetInspectorLoader cancelLoading]
  -[AVFigAssetInspectorLoader _loadingMutex]
  -[AVFigAssetInspectorLoader _isStreaming]
  -[AVFigAssetInspectorLoader _setFragmentMindingInterval:]
  -[AVFigAssetInspectorLoader _invokeCompletionHandlerForLoadingBatches:]
  -[AVFigAssetInspectorLoader isComposable]
  -[AVFigAssetInspectorLoader statusOfValueForKey:error:]
  -[AVFigAssetInspectorLoader firstFragmentSequenceNumber]
  -[AVFigAssetInspectorLoader dealloc]
  -[AVFigAssetInspectorLoader initWithFigAsset:forAsset:]
  -[AVFigAssetInspectorLoader variants]
  -[AVFigAssetInspectorLoader hasProtectedContent]
  -[AVFigAssetInspectorLoader _statusOfValueForKey:error:firstNonLoadedDependencyKey:]
  -[AVFigAssetInspectorLoader _fragmentMindingInterval]
  -[AVFigAssetInspectorLoader loadValuesAsynchronouslyForKeys:keysForCollectionKeys:completionHandler:]
  -[AVFigAssetInspectorLoader _ensureAllDependenciesOfKeyAreLoaded:]
  -[AVFigAssetInspectorLoader duration]
  -[AVFigAssetInspectorLoader asset]
  -[AVFigAssetInspectorLoader _loadStatusForProperty:figAsset:error:]
  -[AVFigAssetInspectorLoader _addFigAssetNotifications]
  -[AVFigAssetInspectorLoader fragmentCount]
  -[AVFigAssetInspectorLoader _formatReader]
  -[AVFigAssetInspectorLoader initWithURL:figAssetCreationFlags:figAssetCreationOptions:avAssetInitializationOptions:forAsset:]
  -[AVFigAssetInspectorLoader isExportable]
  -[AVFigAssetInspectorLoader isCompatibleWithSavedPhotosAlbum]
  -[AVFigAssetInspectorLoader assetInspector]
  -[AVFigAssetInspectorLoader contentKeySpecifiersEligibleForPreloading]
  -[AVFigAssetInspectorLoader originalNetworkContentURL]
  -[AVFigAssetInspectorLoader _removeFigAssetNotifications]
  -[AVFigAssetInspectorLoader _classForTrackInspectors]
  -[AVFigAssetInspectorLoader _loadingBatches]
  -[AVFigAssetInspectorLoader URL]
  -[AVFigAssetInspectorLoader _setIsAssociatedWithFragmentMinder:]
  -[AVFigAssetInspectorLoader resolvedURL]
  -[AVFigAssetInspectorLoader _completionHandlerQueue]
  -[AVFigAssetInspectorLoader _figAsset]
  -[AVFigAssetInspectorLoader isAssociatedWithFragmentMinder]
  -[AVFigAssetInspectorLoader figChapters]
  -[AVFigAssetInspectorLoader figChapterGroupInfo]


AVUnreachableAssetInspectorLoader : AVAssetInspectorLoader
  // instance methods
  -[AVUnreachableAssetInspectorLoader loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVUnreachableAssetInspectorLoader statusOfValueForKey:error:]
  -[AVUnreachableAssetInspectorLoader dealloc]
  -[AVUnreachableAssetInspectorLoader _classForTrackInspectors]
  -[AVUnreachableAssetInspectorLoader initWithFigError:userInfo:]
  -[AVUnreachableAssetInspectorLoader initForUnitTests]


AVAssetTrackInspector : AVFigObjectInspector <AVAsynchronousKeyValueLoading>
 @property  int trackID
 @property  unsigned int figMediaType
 @property  ^{OpaqueFigTrackReader=} figTrackReader
 @property  ^{OpaqueFigAssetTrack=} figAssetTrack
 @property  NSString *mediaType
 @property  NSArray *formatDescriptions
 @property  BOOL playable
 @property  BOOL decodable
 @property  BOOL enabled
 @property  BOOL selfContained
 @property  long long totalSampleDataLength
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  {?={?=qiIq}{?=qiIq}} mediaPresentationTimeRange
 @property  {?={?=qiIq}{?=qiIq}} mediaDecodeTimeRange
 @property  {?=qiIq} latentBaseDecodeTimeStampOfFirstTrackFragment
 @property  BOOL requiresFrameReordering
 @property  int naturalTimeScale
 @property  float estimatedDataRate
 @property  float peakDataRate
 @property  NSString *languageCode
 @property  NSArray *mediaCharacteristics
 @property  NSString *extendedLanguageTag
 @property  NSLocale *locale
 @property  {CGSize=dd} naturalSize
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  long long layer
 @property  float preferredVolume
 @property  BOOL hasAudioSampleDependencies
 @property  NSDictionary *loudnessInfo
 @property  float nominalFrameRate
 @property  {?=qiIq} minSampleDuration
 @property  NSArray *segments
 @property  NSArray *commonMetadata
 @property  NSArray *availableMetadataFormats
 @property  long long alternateGroupID
 @property  long long defaultAlternateGroupID
 @property  long long provisionalAlternateGroupID
 @property  BOOL excludedFromAutoselectionInTrackGroup
 @property  {CGSize=dd} dimensions
 @property  NSDictionary *trackReferences
 @property  BOOL hasProtectedContent
 @property  BOOL hasAudibleBooksContent
 @property  BOOL isAudibleBooksContentAuthorized
 @property  BOOL hasSeamSamples
 @property  int playabilityValidationResult
 @property  BOOL segmentsExcludeAudioPrimingAndRemainderDurations
 @property  {?={?=qiIq}{?=qiIq}} gaplessSourceTimeRange
 @property  NSArray *segmentsAsPresented
 @property  BOOL canProvideSampleCursors

  // class methods
  +[AVAssetTrackInspector assetTrackInspectorWithAsset:trackID:trackIndex:]

  // instance methods
  -[AVAssetTrackInspector formatDescriptions]
  -[AVAssetTrackInspector naturalSize]
  -[AVAssetTrackInspector loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVAssetTrackInspector preferredVolume]
  -[AVAssetTrackInspector metadataForFormat:]
  -[AVAssetTrackInspector loudnessInfo]
  -[AVAssetTrackInspector estimatedDataRate]
  -[AVAssetTrackInspector commonMetadata]
  -[AVAssetTrackInspector isPlayable]
  -[AVAssetTrackInspector _getFigSampleCursorServiceReportingTimeAccuracy:]
  -[AVAssetTrackInspector peakDataRate]
  -[AVAssetTrackInspector preferredTransform]
  -[AVAssetTrackInspector isDecodable]
  -[AVAssetTrackInspector _figMediaType]
  -[AVAssetTrackInspector _initWithAsset:trackID:trackIndex:]
  -[AVAssetTrackInspector latentBaseDecodeTimeStampOfFirstTrackFragment]
  -[AVAssetTrackInspector minSampleDuration]
  -[AVAssetTrackInspector trackID]
  -[AVAssetTrackInspector segmentForTrackTime:]
  -[AVAssetTrackInspector timeRange]
  -[AVAssetTrackInspector layer]
  -[AVAssetTrackInspector isExcludedFromAutoselectionInTrackGroup]
  -[AVAssetTrackInspector alternateGroupID]
  -[AVAssetTrackInspector mediaType]
  -[AVAssetTrackInspector statusOfValueForKey:error:]
  -[AVAssetTrackInspector dealloc]
  -[AVAssetTrackInspector segments]
  -[AVAssetTrackInspector extendedLanguageTag]
  -[AVAssetTrackInspector dimensions]
  -[AVAssetTrackInspector hasProtectedContent]
  -[AVAssetTrackInspector nominalFrameRate]
  -[AVAssetTrackInspector languageCode]
  -[AVAssetTrackInspector _figAssetTrack]
  -[AVAssetTrackInspector provisionalAlternateGroupID]
  -[AVAssetTrackInspector locale]
  -[AVAssetTrackInspector availableMetadataFormats]
  -[AVAssetTrackInspector segmentsExcludeAudioPrimingAndRemainderDurations]
  -[AVAssetTrackInspector totalSampleDataLength]
  -[AVAssetTrackInspector naturalTimeScale]
  -[AVAssetTrackInspector samplePresentationTimeForTrackTime:]
  -[AVAssetTrackInspector segmentsAsPresented]
  -[AVAssetTrackInspector _trackReferences]
  -[AVAssetTrackInspector hasSeamSamples]
  -[AVAssetTrackInspector _weakReference]
  -[AVAssetTrackInspector copyWithZone:]
  -[AVAssetTrackInspector gaplessSourceTimeRange]
  -[AVAssetTrackInspector mediaPresentationTimeRange]
  -[AVAssetTrackInspector hasAudibleBooksContent]
  -[AVAssetTrackInspector isSelfContained]
  -[AVAssetTrackInspector _figTrackReader]
  -[AVAssetTrackInspector playabilityValidationResult]
  -[AVAssetTrackInspector defaultAlternateGroupID]
  -[AVAssetTrackInspector requiresFrameReordering]
  -[AVAssetTrackInspector init]
  -[AVAssetTrackInspector isEnabled]
  -[AVAssetTrackInspector isAudibleBooksContentAuthorized]
  -[AVAssetTrackInspector mediaDecodeTimeRange]
  -[AVAssetTrackInspector _initWithAsset:trackID:]
  -[AVAssetTrackInspector _initWithAsset:trackIndex:]
  -[AVAssetTrackInspector mediaCharacteristics]
  -[AVAssetTrackInspector hasAudioSampleDependencies]
  -[AVAssetTrackInspector canProvideSampleCursors]
  -[AVAssetTrackInspector makeSampleCursorWithPresentationTimeStamp:]
  -[AVAssetTrackInspector makeSampleCursorAtFirstSampleInDecodeOrder]
  -[AVAssetTrackInspector makeSampleCursorAtLastSampleInDecodeOrder]


AVTrackReaderInspector : AVAssetTrackInspector
  // instance methods
  -[AVTrackReaderInspector formatDescriptions]
  -[AVTrackReaderInspector _valueAsCFTypeForProperty:]
  -[AVTrackReaderInspector naturalSize]
  -[AVTrackReaderInspector preferredVolume]
  -[AVTrackReaderInspector metadataForFormat:]
  -[AVTrackReaderInspector loudnessInfo]
  -[AVTrackReaderInspector estimatedDataRate]
  -[AVTrackReaderInspector commonMetadata]
  -[AVTrackReaderInspector isPlayable]
  -[AVTrackReaderInspector _getFigSampleCursorServiceReportingTimeAccuracy:]
  -[AVTrackReaderInspector peakDataRate]
  -[AVTrackReaderInspector preferredTransform]
  -[AVTrackReaderInspector isDecodable]
  -[AVTrackReaderInspector _figMediaType]
  -[AVTrackReaderInspector _initWithAsset:trackID:trackIndex:]
  -[AVTrackReaderInspector latentBaseDecodeTimeStampOfFirstTrackFragment]
  -[AVTrackReaderInspector minSampleDuration]
  -[AVTrackReaderInspector trackID]
  -[AVTrackReaderInspector segmentForTrackTime:]
  -[AVTrackReaderInspector timeRange]
  -[AVTrackReaderInspector layer]
  -[AVTrackReaderInspector isExcludedFromAutoselectionInTrackGroup]
  -[AVTrackReaderInspector alternateGroupID]
  -[AVTrackReaderInspector mediaType]
  -[AVTrackReaderInspector dealloc]
  -[AVTrackReaderInspector segments]
  -[AVTrackReaderInspector extendedLanguageTag]
  -[AVTrackReaderInspector dimensions]
  -[AVTrackReaderInspector nominalFrameRate]
  -[AVTrackReaderInspector languageCode]
  -[AVTrackReaderInspector asset]
  -[AVTrackReaderInspector decodabilityValidationResult]
  -[AVTrackReaderInspector provisionalAlternateGroupID]
  -[AVTrackReaderInspector availableMetadataFormats]
  -[AVTrackReaderInspector totalSampleDataLength]
  -[AVTrackReaderInspector naturalTimeScale]
  -[AVTrackReaderInspector _trackReferences]
  -[AVTrackReaderInspector isSelfContained]
  -[AVTrackReaderInspector _figTrackReader]
  -[AVTrackReaderInspector playabilityValidationResult]
  -[AVTrackReaderInspector defaultAlternateGroupID]
  -[AVTrackReaderInspector isEqual:]
  -[AVTrackReaderInspector requiresFrameReordering]
  -[AVTrackReaderInspector isEnabled]
  -[AVTrackReaderInspector mediaCharacteristics]
  -[AVTrackReaderInspector hasAudioSampleDependencies]


AVFigAssetTrackInspector : AVAssetTrackInspector
  // instance methods
  -[AVFigAssetTrackInspector formatDescriptions]
  -[AVFigAssetTrackInspector _valueAsCFTypeForProperty:]
  -[AVFigAssetTrackInspector naturalSize]
  -[AVFigAssetTrackInspector loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVFigAssetTrackInspector preferredVolume]
  -[AVFigAssetTrackInspector metadataForFormat:]
  -[AVFigAssetTrackInspector loudnessInfo]
  -[AVFigAssetTrackInspector estimatedDataRate]
  -[AVFigAssetTrackInspector commonMetadata]
  -[AVFigAssetTrackInspector isPlayable]
  -[AVFigAssetTrackInspector _loadingMutex]
  -[AVFigAssetTrackInspector _getFigSampleCursorServiceReportingTimeAccuracy:]
  -[AVFigAssetTrackInspector peakDataRate]
  -[AVFigAssetTrackInspector preferredTransform]
  -[AVFigAssetTrackInspector isDecodable]
  -[AVFigAssetTrackInspector _figMediaType]
  -[AVFigAssetTrackInspector _initWithAsset:trackID:trackIndex:]
  -[AVFigAssetTrackInspector latentBaseDecodeTimeStampOfFirstTrackFragment]
  -[AVFigAssetTrackInspector minSampleDuration]
  -[AVFigAssetTrackInspector trackID]
  -[AVFigAssetTrackInspector segmentForTrackTime:]
  -[AVFigAssetTrackInspector _invokeCompletionHandlerForLoadingBatches:]
  -[AVFigAssetTrackInspector timeRange]
  -[AVFigAssetTrackInspector layer]
  -[AVFigAssetTrackInspector _loadStatusForFigAssetTrackProperty:error:]
  -[AVFigAssetTrackInspector isExcludedFromAutoselectionInTrackGroup]
  -[AVFigAssetTrackInspector alternateGroupID]
  -[AVFigAssetTrackInspector mediaType]
  -[AVFigAssetTrackInspector statusOfValueForKey:error:]
  -[AVFigAssetTrackInspector dealloc]
  -[AVFigAssetTrackInspector segments]
  -[AVFigAssetTrackInspector extendedLanguageTag]
  -[AVFigAssetTrackInspector _addFigNotifications]
  -[AVFigAssetTrackInspector dimensions]
  -[AVFigAssetTrackInspector hasProtectedContent]
  -[AVFigAssetTrackInspector _removeFigNotifications]
  -[AVFigAssetTrackInspector _ensureAllDependenciesOfKeyAreLoaded:]
  -[AVFigAssetTrackInspector nominalFrameRate]
  -[AVFigAssetTrackInspector languageCode]
  -[AVFigAssetTrackInspector asset]
  -[AVFigAssetTrackInspector _figAssetTrack]
  -[AVFigAssetTrackInspector decodabilityValidationResult]
  -[AVFigAssetTrackInspector provisionalAlternateGroupID]
  -[AVFigAssetTrackInspector availableMetadataFormats]
  -[AVFigAssetTrackInspector segmentsExcludeAudioPrimingAndRemainderDurations]
  -[AVFigAssetTrackInspector totalSampleDataLength]
  -[AVFigAssetTrackInspector naturalTimeScale]
  -[AVFigAssetTrackInspector segmentsAsPresented]
  -[AVFigAssetTrackInspector _trackReferences]
  -[AVFigAssetTrackInspector hasSeamSamples]
  -[AVFigAssetTrackInspector _figFormatReader]
  -[AVFigAssetTrackInspector gaplessSourceTimeRange]
  -[AVFigAssetTrackInspector mediaPresentationTimeRange]
  -[AVFigAssetTrackInspector hasAudibleBooksContent]
  -[AVFigAssetTrackInspector isSelfContained]
  -[AVFigAssetTrackInspector _loadingBatches]
  -[AVFigAssetTrackInspector _figTrackReader]
  -[AVFigAssetTrackInspector playabilityValidationResult]
  -[AVFigAssetTrackInspector defaultAlternateGroupID]
  -[AVFigAssetTrackInspector _segmentsForProperty:]
  -[AVFigAssetTrackInspector isEqual:]
  -[AVFigAssetTrackInspector requiresFrameReordering]
  -[AVFigAssetTrackInspector isEnabled]
  -[AVFigAssetTrackInspector isAudibleBooksContentAuthorized]
  -[AVFigAssetTrackInspector mediaDecodeTimeRange]


AVCompositionTrackReaderInspector : AVTrackReaderInspector
 @property  ^{OpaqueFigMutableComposition=} mutableComposition

  // instance methods
  -[AVCompositionTrackReaderInspector isPlayable]
  -[AVCompositionTrackReaderInspector _getFigSampleCursorServiceReportingTimeAccuracy:]
  -[AVCompositionTrackReaderInspector isDecodable]
  -[AVCompositionTrackReaderInspector _initWithAsset:trackID:trackIndex:]
  -[AVCompositionTrackReaderInspector segmentForTrackTime:]
  -[AVCompositionTrackReaderInspector dealloc]
  -[AVCompositionTrackReaderInspector segments]
  -[AVCompositionTrackReaderInspector decodabilityValidationResult]
  -[AVCompositionTrackReaderInspector playabilityValidationResult]
  -[AVCompositionTrackReaderInspector _mutableComposition]


AVPlaybackItemTrackInspector : AVAssetTrackInspector
  // instance methods
  -[AVPlaybackItemTrackInspector formatDescriptions]
  -[AVPlaybackItemTrackInspector _valueAsCFTypeForProperty:]
  -[AVPlaybackItemTrackInspector naturalSize]
  -[AVPlaybackItemTrackInspector estimatedDataRate]
  -[AVPlaybackItemTrackInspector _playbackItem]
  -[AVPlaybackItemTrackInspector peakDataRate]
  -[AVPlaybackItemTrackInspector preferredTransform]
  -[AVPlaybackItemTrackInspector _figMediaType]
  -[AVPlaybackItemTrackInspector _initWithAsset:trackID:trackIndex:]
  -[AVPlaybackItemTrackInspector trackID]
  -[AVPlaybackItemTrackInspector timeRange]
  -[AVPlaybackItemTrackInspector mediaType]
  -[AVPlaybackItemTrackInspector dealloc]
  -[AVPlaybackItemTrackInspector dimensions]
  -[AVPlaybackItemTrackInspector asset]
  -[AVPlaybackItemTrackInspector samplePresentationTimeForTrackTime:]
  -[AVPlaybackItemTrackInspector isEqual:]
  -[AVPlaybackItemTrackInspector isEnabled]


AVResult : NSObject
 @property  BOOL failed

  // instance methods
  -[AVResult getStatus:error:]
  -[AVResult markAsCompleted]
  -[AVResult isFailed]
  -[AVResult dealloc]
  -[AVResult markAsFailedWithError:]
  -[AVResult init]


AVPlayerCaptionLayer : CALayer
 @property  AVPlayer *player
 @property  {NSEdgeInsets=dddd} captionContentInsets
 @property  BOOL overscanSubtitleSupportEnabled

  // class methods
  +[AVPlayerCaptionLayer captionLayerWithPlayer:]

  // instance methods
  -[AVPlayerCaptionLayer layoutSublayers]
  -[AVPlayerCaptionLayer dealloc]
  -[AVPlayerCaptionLayer player]
  -[AVPlayerCaptionLayer setOverscanSubtitleSupportEnabled:]
  -[AVPlayerCaptionLayer isOverscanSubtitleSupportEnabled]
  -[AVPlayerCaptionLayer observeValueForKeyPath:ofObject:change:context:]
  -[AVPlayerCaptionLayer setBounds:]
  -[AVPlayerCaptionLayer setPlayer:]
  -[AVPlayerCaptionLayer init]
  -[AVPlayerCaptionLayer _startObservingPlayer:]
  -[AVPlayerCaptionLayer _stopObservingPlayer:]
  -[AVPlayerCaptionLayer setCaptionContentInsets:]
  -[AVPlayerCaptionLayer captionContentInsets]


AVWeakReference : NSObject
 @property  id referencedObject

  // class methods
  +[AVWeakReference allocWithZone:]
  +[AVWeakReference initialize]

  // instance methods
  -[AVWeakReference referencedObject]
  -[AVWeakReference initWithReferencedObject:]


AVRetainReleaseWeakReference : AVWeakReference
  // instance methods
  -[AVRetainReleaseWeakReference dealloc]
  -[AVRetainReleaseWeakReference referencedObject]
  -[AVRetainReleaseWeakReference initWithReferencedObject:]
  -[AVRetainReleaseWeakReference init]


AVFigRoutingContextSendConfigureDeviceCommandOperation : AVOperation
 @property  <AVOutputDeviceConfigurationRetrieval> *finalConfiguration

  // class methods
  +[AVFigRoutingContextSendConfigureDeviceCommandOperation initialize]

  // instance methods
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation dealloc]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation isAsynchronous]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation start]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation init]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation initWithRoutingContext:configuratorBlock:]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation finalConfiguration]
  -[AVFigRoutingContextSendConfigureDeviceCommandOperation setFinalConfiguration:]


AVFigRoutingContextCommandOutputDeviceConfigurationModification : NSObject <AVOutputDeviceConfigurationModification>
 @property  ^{__CFDictionary=} routingContextCommandPayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigRoutingContextCommandOutputDeviceConfigurationModification initialize]

  // instance methods
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification setDeviceName:]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification dealloc]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification init]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification setDevicePassword:]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification startAutomaticallyAllowingConnectionsFromPeersInHomeGroupAndRejectOtherConnections:]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification stopAutomaticallyAllowingConnectionsFromPeersInHomeGroup]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification addPeerToHomeGroup:]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification removePeerWithIDFromHomeGroup:]
  -[AVFigRoutingContextCommandOutputDeviceConfigurationModification routingContextCommandPayload]


AVFigRoutingContextCommandOutputDeviceConfiguration : NSObject <AVOutputDeviceConfigurationRetrieval>
 @property  NSString *deviceName
 @property  NSString *devicePassword
 @property  NSString *deviceID
 @property  NSData *devicePublicKey
 @property  BOOL automaticallyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL onlyAllowsConnectionsFromPeersInHomeGroup
 @property  NSArray *peersInHomeGroup
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigRoutingContextCommandOutputDeviceConfiguration initialize]

  // instance methods
  -[AVFigRoutingContextCommandOutputDeviceConfiguration deviceID]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration dealloc]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration deviceName]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration init]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration devicePassword]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration devicePublicKey]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration peersInHomeGroup]
  -[AVFigRoutingContextCommandOutputDeviceConfiguration initWithRoutingContextComandResponse:]


AVFigRoutingContextRouteChangeOperation : AVOperation <AVDestinationChangeResultSource>
 @property  AVOutputContextDestinationChange *result
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigRoutingContextRouteChangeOperation initialize]

  // instance methods
  -[AVFigRoutingContextRouteChangeOperation dealloc]
  -[AVFigRoutingContextRouteChangeOperation result]
  -[AVFigRoutingContextRouteChangeOperation isAsynchronous]
  -[AVFigRoutingContextRouteChangeOperation start]
  -[AVFigRoutingContextRouteChangeOperation _routeChangeStartedWithID:]
  -[AVFigRoutingContextRouteChangeOperation init]
  -[AVFigRoutingContextRouteChangeOperation initWithRoutingContext:successNotification:routeChangeBlock:]
  -[AVFigRoutingContextRouteChangeOperation _setResultIfNotAlreadySet:]
  -[AVFigRoutingContextRouteChangeOperation _routeChangeWithID:endedWithReason:]
  -[AVFigRoutingContextRouteChangeOperation _routeChangeComplete]


AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation : AVOperation <AVDestinationChangeResultSource>
 @property  AVOutputContextDestinationChange *result
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation initialize]

  // instance methods
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation dealloc]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation result]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation isAsynchronous]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation start]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation init]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation _setResultIfNotAlreadySet:]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation initWithRoutingContext:routeChangeID:routeChangeBlock:]
  -[AVRouteConfigUpdatedFigRoutingContextRouteChangeOperation _routeConfigUpdateWithID:endedWithReason:]


AVCallbackContextRegistry : NSObject
  // class methods
  +[AVCallbackContextRegistry initialize]
  +[AVCallbackContextRegistry sharedCallbackContextRegistry]

  // instance methods
  -[AVCallbackContextRegistry dealloc]
  -[AVCallbackContextRegistry unregisterCallbackContextForToken:]
  -[AVCallbackContextRegistry registerCallbackContextObject:]
  -[AVCallbackContextRegistry callbackContextForToken:]
  -[AVCallbackContextRegistry init]


AVOutputDeviceClusterMember : NSObject
 @property  NSString *deviceName
 @property  NSString *clusterID
 @property  NSString *deviceID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  BOOL clusterLeader
 @property  NSString *modelID
 @property  long long volumeControlType
 @property  float volume

  // instance methods
  -[AVOutputDeviceClusterMember deviceSubType]
  -[AVOutputDeviceClusterMember deviceID]
  -[AVOutputDeviceClusterMember isClusterLeader]
  -[AVOutputDeviceClusterMember modelID]
  -[AVOutputDeviceClusterMember clusterID]
  -[AVOutputDeviceClusterMember dealloc]
  -[AVOutputDeviceClusterMember setVolume:]
  -[AVOutputDeviceClusterMember deviceType]
  -[AVOutputDeviceClusterMember volume]
  -[AVOutputDeviceClusterMember deviceName]
  -[AVOutputDeviceClusterMember volumeControlType]
  -[AVOutputDeviceClusterMember initWithClusterID:deviceID:deviceName:deviceSubType:clusterLeader:modelID:volumeController:]
  -[AVOutputDeviceClusterMember _clusterMemberDidChangeVolume:deviceID:]
  -[AVOutputDeviceClusterMember _clusterMemberDidChangeVolumeControlType:deviceID:]


AVAPSyncControllerRemoteOutputDeviceGroupImpl : NSObject <AVOutputDeviceGroupImpl>
 @property  AVOutputDeviceGroup *parentOutputDeviceGroup
 @property  BOOL receivesLongFormAudioFromLocalDevice
 @property  NSArray *outputDevices
 @property  AVOutputDevice *groupLeader
 @property  float volume
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl groupLeader]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl dealloc]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl outputDevices]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl .cxx_destruct]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl setVolume:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl volume]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl volumeControlType]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl addOutputDevice:withOptions:completionHandler:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl removeOutputDevice:withOptions:completionhandler:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl parentOutputDeviceGroup]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl setParentOutputDeviceGroup:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl receivesLongFormAudioFromLocalDevice]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl initWithRemoteGroupID:syncController:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl _outputDevicesFromProperty:withQualifier:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl _outputDeviceForID:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl _groupMembersChangedForGroupWithID:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl _volumeChangedForGroupWithID:]
  -[AVAPSyncControllerRemoteOutputDeviceGroupImpl _volumeControlTypeChangedForGroupWithID:]


AVCMNotificationDispatcher : NSObject
 @property  ^{opaqueCMNotificationCenter=} CMNotificationCenter

  // class methods
  +[AVCMNotificationDispatcher notificationDispatcherForCMNotificationCenter:]
  +[AVCMNotificationDispatcher initialize]

  // instance methods
  -[AVCMNotificationDispatcher removeListenerWithWeakReference:callback:name:object:]
  -[AVCMNotificationDispatcher addListenerWithWeakReference:callback:name:object:flags:]
  -[AVCMNotificationDispatcher dealloc]
  -[AVCMNotificationDispatcher _copyAndRemoveObserverForWeakReferenceToListener:callback:name:object:]
  -[AVCMNotificationDispatcher CMNotificationCenter]
  -[AVCMNotificationDispatcher initWithCMNotificationCenter:]
  -[AVCMNotificationDispatcher init]


AVCMNotificationDispatcherListenerKey : NSObject <NSCopying>
  // class methods
  +[AVCMNotificationDispatcherListenerKey listenerKeyWithWeakReferenceToListener:callback:name:object:]

  // instance methods
  -[AVCMNotificationDispatcherListenerKey dealloc]
  -[AVCMNotificationDispatcherListenerKey initWithWeakReferenceToListener:callback:name:object:]
  -[AVCMNotificationDispatcherListenerKey copyWithZone:]
  -[AVCMNotificationDispatcherListenerKey isEqual:]
  -[AVCMNotificationDispatcherListenerKey init]


AVPlayerItemMediaDataCollectorInternal : NSObject

AVPlayerItemMediaDataCollector : NSObject
  // instance methods
  -[AVPlayerItemMediaDataCollector _detatchFromPlayerItem]
  -[AVPlayerItemMediaDataCollector dealloc]
  -[AVPlayerItemMediaDataCollector _attachToPlayerItem:]
  -[AVPlayerItemMediaDataCollector _weakReference]
  -[AVPlayerItemMediaDataCollector init]


AVAssetTrackGroupInternal : NSObject

AVAssetTrackGroup : NSObject <NSCopying>
 @property  NSArray *trackIDs

  // instance methods
  -[AVAssetTrackGroup dealloc]
  -[AVAssetTrackGroup copyWithZone:]
  -[AVAssetTrackGroup isEqual:]
  -[AVAssetTrackGroup trackIDs]
  -[AVAssetTrackGroup init]
  -[AVAssetTrackGroup initWithAsset:trackIDs:]
  -[AVAssetTrackGroup _assetComparisonToken]


AVAPSyncOutputDeviceCommunicationChannelManager : NSObject <AVOutputDeviceCommunicationChannelManager>
 @property  AVOutputDevice *parentOutputDevice
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAPSyncOutputDeviceCommunicationChannelManager openCommunicationChannelWithOptions:completionHandler:]
  -[AVAPSyncOutputDeviceCommunicationChannelManager setParentOutputDevice:]
  -[AVAPSyncOutputDeviceCommunicationChannelManager dealloc]
  -[AVAPSyncOutputDeviceCommunicationChannelManager parentOutputDevice]
  -[AVAPSyncOutputDeviceCommunicationChannelManager .cxx_destruct]
  -[AVAPSyncOutputDeviceCommunicationChannelManager _didCloseCommChannelWithUUID:forDeviceWithID:]
  -[AVAPSyncOutputDeviceCommunicationChannelManager _didReceiveData:fromDeviceWithID:fromChannelWithUUID:]
  -[AVAPSyncOutputDeviceCommunicationChannelManager initWithDeviceID:syncController:]
  -[AVAPSyncOutputDeviceCommunicationChannelManager _saveCommChannel:forUUID:]


AVAPSyncOutputDeviceCommunicationChannelImpl : NSObject <AVOutputDeviceCommunicationChannelImpl>
 @property  AVOutputDeviceCommunicationChannel *parentChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVAPSyncOutputDeviceCommunicationChannelImpl dealloc]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl close]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl .cxx_destruct]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl sendData:completionHandler:]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl parentChannel]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl setParentChannel:]
  -[AVAPSyncOutputDeviceCommunicationChannelImpl initWithDeviceID:channelUUID:syncController:]


AVEventWaiter : NSObject
  // instance methods
  -[AVEventWaiter dealloc]
  -[AVEventWaiter init]
  -[AVEventWaiter markEventAsCompleted]
  -[AVEventWaiter waitUntilEventIsCompleted]


AVDispatchOnce : NSObject
  // instance methods
  -[AVDispatchOnce runBlockOnce:]
  -[AVDispatchOnce init]


AVMetadataGroup : NSObject
 @property  NSString *classifyingLabel
 @property  NSString *uniqueID
 @property  NSArray *items

  // class methods
  +[AVMetadataGroup initialize]

  // instance methods
  -[AVMetadataGroup uniqueID]
  -[AVMetadataGroup items]
  -[AVMetadataGroup copyFormatDescription]
  -[AVMetadataGroup classifyingLabel]


AVTimedMetadataGroupInternal : NSObject

AVTimedMetadataGroup : AVMetadataGroup <NSCopying, NSMutableCopying>
 @property  AVTimedMetadataGroupInternal *timedMetadataGroupInternal
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  NSArray *items

  // instance methods
  -[AVTimedMetadataGroup timeRange]
  -[AVTimedMetadataGroup dealloc]
  -[AVTimedMetadataGroup items]
  -[AVTimedMetadataGroup copyWithZone:]
  -[AVTimedMetadataGroup mutableCopyWithZone:]
  -[AVTimedMetadataGroup isEqual:]
  -[AVTimedMetadataGroup init]
  -[AVTimedMetadataGroup copyFormatDescription]
  -[AVTimedMetadataGroup initWithItems:timeRange:]
  -[AVTimedMetadataGroup initWithSampleBuffer:]
  -[AVTimedMetadataGroup _timedMetadataGroupInternal]
  -[AVTimedMetadataGroup _createSerializedRepresentationWithFormatDescription:error:]


AVMutableTimedMetadataGroup : AVTimedMetadataGroup
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  NSArray *items

  // instance methods
  -[AVMutableTimedMetadataGroup timeRange]
  -[AVMutableTimedMetadataGroup setTimeRange:]
  -[AVMutableTimedMetadataGroup setItems:]
  -[AVMutableTimedMetadataGroup items]
  -[AVMutableTimedMetadataGroup copyWithZone:]
  -[AVMutableTimedMetadataGroup initWithItems:timeRange:]


AVDateRangeMetadataGroupInternal : NSObject

AVDateRangeMetadataGroup : AVMetadataGroup <NSCopying, NSMutableCopying>
 @property  NSString *cueingOptions
 @property  NSDate *discoveryTimestamp
 @property  NSDate *modificationTimestamp
 @property  AVDateRangeMetadataGroupInternal *dateRangeMetadataGroupInternal
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  NSArray *items

  // class methods
  +[AVDateRangeMetadataGroup _figMetadataArrayForMetadataItems:]
  +[AVDateRangeMetadataGroup _metadataItemsForFigMetadataArray:]

  // instance methods
  -[AVDateRangeMetadataGroup propertyList]
  -[AVDateRangeMetadataGroup initWithPropertyList:]
  -[AVDateRangeMetadataGroup endDate]
  -[AVDateRangeMetadataGroup uniqueID]
  -[AVDateRangeMetadataGroup dealloc]
  -[AVDateRangeMetadataGroup items]
  -[AVDateRangeMetadataGroup copyWithZone:]
  -[AVDateRangeMetadataGroup mutableCopyWithZone:]
  -[AVDateRangeMetadataGroup startDate]
  -[AVDateRangeMetadataGroup isEqual:]
  -[AVDateRangeMetadataGroup init]
  -[AVDateRangeMetadataGroup discoveryTimestamp]
  -[AVDateRangeMetadataGroup classifyingLabel]
  -[AVDateRangeMetadataGroup cueingOptions]
  -[AVDateRangeMetadataGroup modificationTimestamp]
  -[AVDateRangeMetadataGroup initWithItems:startDate:endDate:]
  -[AVDateRangeMetadataGroup _initWithTaggedRangeMetadataDictionary:items:]
  -[AVDateRangeMetadataGroup _dateRangeMetadataGroupInternal]
  -[AVDateRangeMetadataGroup _taggedRangeMetadataDictionary]
  -[AVDateRangeMetadataGroup _extractPropertiesFromTaggedRangeMetadataDictionary:]


AVMutableDateRangeMetadataGroup : AVDateRangeMetadataGroup
 @property  NSDate *startDate
 @property  NSDate *endDate
 @property  NSArray *items

  // instance methods
  -[AVMutableDateRangeMetadataGroup endDate]
  -[AVMutableDateRangeMetadataGroup setItems:]
  -[AVMutableDateRangeMetadataGroup setStartDate:]
  -[AVMutableDateRangeMetadataGroup items]
  -[AVMutableDateRangeMetadataGroup setEndDate:]
  -[AVMutableDateRangeMetadataGroup copyWithZone:]
  -[AVMutableDateRangeMetadataGroup mutableCopyWithZone:]
  -[AVMutableDateRangeMetadataGroup startDate]
  -[AVMutableDateRangeMetadataGroup _initWithTaggedRangeMetadataDictionary:items:]


AVAssetCache : NSObject
 @property  BOOL playableOffline

  // class methods
  +[AVAssetCache assetCacheWithURL:]
  +[AVAssetCache assetCacheForHTTPLiveStreamingWithURL:]
  +[AVAssetCache assetCacheForProgressiveDownloadWithURL:]
  +[AVAssetCache assetCacheForProgressiveDownloadAndHTTPLiveStreamingWithURL:]

  // instance methods
  -[AVAssetCache maxSize]
  -[AVAssetCache isPlayableOffline]
  -[AVAssetCache initWithURL:]
  -[AVAssetCache currentSize]
  -[AVAssetCache URL]
  -[AVAssetCache allKeys]
  -[AVAssetCache mediaSelectionOptionsInMediaSelectionGroup:]
  -[AVAssetCache _init]
  -[AVAssetCache maxEntrySize]
  -[AVAssetCache removeEntryForKey:]
  -[AVAssetCache sizeOfEntryForKey:]
  -[AVAssetCache lastModifiedDateOfEntryForKey:]


AVManagedAssetCacheInternal : NSObject

AVManagedAssetCache : AVAssetCache
  // class methods
  +[AVManagedAssetCache assetCacheWithURL:]
  +[AVManagedAssetCache assetCacheForHTTPLiveStreamingWithURL:]
  +[AVManagedAssetCache assetCacheForProgressiveDownloadWithURL:]
  +[AVManagedAssetCache assetCacheForProgressiveDownloadAndHTTPLiveStreamingWithURL:]

  // instance methods
  -[AVManagedAssetCache maxSize]
  -[AVManagedAssetCache isPlayableOffline]
  -[AVManagedAssetCache initWithURL:]
  -[AVManagedAssetCache setMaxSize:]
  -[AVManagedAssetCache currentSize]
  -[AVManagedAssetCache dealloc]
  -[AVManagedAssetCache URL]
  -[AVManagedAssetCache allKeys]
  -[AVManagedAssetCache mediaSelectionOptionsInMediaSelectionGroup:]
  -[AVManagedAssetCache maxEntrySize]
  -[AVManagedAssetCache removeEntryForKey:]
  -[AVManagedAssetCache sizeOfEntryForKey:]
  -[AVManagedAssetCache lastModifiedDateOfEntryForKey:]
  -[AVManagedAssetCache initWithURL:enableCRABSCache:enableHLSCache:]
  -[AVManagedAssetCache setMaxEntrySize:]
  -[AVManagedAssetCache isProgressiveDownloadCacheEnabled]
  -[AVManagedAssetCache isHTTPLiveStreamingCacheEnabled]


AVAssetDownloadCacheInternal : NSObject
  // instance methods
  -[AVAssetDownloadCacheInternal .cxx_destruct]


AVAssetDownloadCache : AVAssetCache
  // instance methods
  -[AVAssetDownloadCache initWithAsset:]
  -[AVAssetDownloadCache isPlayableOffline]
  -[AVAssetDownloadCache dealloc]
  -[AVAssetDownloadCache _asset]
  -[AVAssetDownloadCache URL]
  -[AVAssetDownloadCache mediaSelectionOptionsInMediaSelectionGroup:]


AVPlayerItemAccessLogInternal : NSObject

AVPlayerItemAccessLog : NSObject <NSCopying>
 @property  unsigned long extendedLogDataStringEncoding
 @property  NSArray *events

  // instance methods
  -[AVPlayerItemAccessLog events]
  -[AVPlayerItemAccessLog dealloc]
  -[AVPlayerItemAccessLog copyWithZone:]
  -[AVPlayerItemAccessLog init]
  -[AVPlayerItemAccessLog _common_init]
  -[AVPlayerItemAccessLog initWithLogArray:]
  -[AVPlayerItemAccessLog extendedLogData]
  -[AVPlayerItemAccessLog extendedLogDataStringEncoding]
  -[AVPlayerItemAccessLog _accessLogArray]


AVPlayerItemAccessLogEventInternal : NSObject

AVPlayerItemAccessLogEvent : NSObject <NSCopying>
 @property  long long numberOfSegmentsDownloaded
 @property  long long numberOfMediaRequests
 @property  NSDate *playbackStartDate
 @property  NSString *URI
 @property  NSString *serverAddress
 @property  long long numberOfServerAddressChanges
 @property  NSString *playbackSessionID
 @property  double playbackStartOffset
 @property  double segmentsDownloadedDuration
 @property  double durationWatched
 @property  long long numberOfStalls
 @property  long long numberOfBytesTransferred
 @property  double transferDuration
 @property  double observedBitrate
 @property  double indicatedBitrate
 @property  double indicatedAverageBitrate
 @property  double averageVideoBitrate
 @property  double averageAudioBitrate
 @property  long long numberOfDroppedVideoFrames
 @property  double startupTime
 @property  long long downloadOverdue
 @property  double observedMaxBitrate
 @property  double observedMinBitrate
 @property  double observedBitrateStandardDeviation
 @property  NSString *playbackType
 @property  long long mediaRequestsWWAN
 @property  double switchBitrate

  // instance methods
  -[AVPlayerItemAccessLogEvent serviceIdentifier]
  -[AVPlayerItemAccessLogEvent playbackType]
  -[AVPlayerItemAccessLogEvent initWithDictionary:]
  -[AVPlayerItemAccessLogEvent dealloc]
  -[AVPlayerItemAccessLogEvent copyWithZone:]
  -[AVPlayerItemAccessLogEvent URI]
  -[AVPlayerItemAccessLogEvent init]
  -[AVPlayerItemAccessLogEvent numberOfDroppedVideoFrames]
  -[AVPlayerItemAccessLogEvent _common_init]
  -[AVPlayerItemAccessLogEvent numberOfMediaRequests]
  -[AVPlayerItemAccessLogEvent numberOfSegmentsDownloaded]
  -[AVPlayerItemAccessLogEvent playbackStartDate]
  -[AVPlayerItemAccessLogEvent serverAddress]
  -[AVPlayerItemAccessLogEvent numberOfServerAddressChanges]
  -[AVPlayerItemAccessLogEvent playbackSessionID]
  -[AVPlayerItemAccessLogEvent playbackStartOffset]
  -[AVPlayerItemAccessLogEvent segmentsDownloadedDuration]
  -[AVPlayerItemAccessLogEvent durationWatched]
  -[AVPlayerItemAccessLogEvent numberOfStalls]
  -[AVPlayerItemAccessLogEvent numberOfBytesTransferred]
  -[AVPlayerItemAccessLogEvent transferDuration]
  -[AVPlayerItemAccessLogEvent observedBitrate]
  -[AVPlayerItemAccessLogEvent currentObservedBitrate]
  -[AVPlayerItemAccessLogEvent indicatedBitrate]
  -[AVPlayerItemAccessLogEvent indicatedAverageBitrate]
  -[AVPlayerItemAccessLogEvent averageVideoBitrate]
  -[AVPlayerItemAccessLogEvent averageAudioBitrate]
  -[AVPlayerItemAccessLogEvent startupTime]
  -[AVPlayerItemAccessLogEvent downloadOverdue]
  -[AVPlayerItemAccessLogEvent entryReasonCode]
  -[AVPlayerItemAccessLogEvent observedMaxBitrate]
  -[AVPlayerItemAccessLogEvent observedMinBitrate]
  -[AVPlayerItemAccessLogEvent observedBitrateStandardDeviation]
  -[AVPlayerItemAccessLogEvent mediaRequestsWWAN]
  -[AVPlayerItemAccessLogEvent switchBitrate]


AVPlayerItemErrorLogInternal : NSObject

AVPlayerItemErrorLog : NSObject <NSCopying>
 @property  unsigned long extendedLogDataStringEncoding
 @property  NSArray *events

  // instance methods
  -[AVPlayerItemErrorLog events]
  -[AVPlayerItemErrorLog dealloc]
  -[AVPlayerItemErrorLog copyWithZone:]
  -[AVPlayerItemErrorLog init]
  -[AVPlayerItemErrorLog _common_init]
  -[AVPlayerItemErrorLog initWithLogArray:]
  -[AVPlayerItemErrorLog extendedLogData]
  -[AVPlayerItemErrorLog extendedLogDataStringEncoding]
  -[AVPlayerItemErrorLog _errorLogArray]


AVPlayerItemErrorLogEventInternal : NSObject

AVPlayerItemErrorLogEvent : NSObject <NSCopying>
 @property  NSDate *date
 @property  NSString *URI
 @property  NSString *serverAddress
 @property  NSString *playbackSessionID
 @property  long long errorStatusCode
 @property  NSString *errorDomain
 @property  NSString *errorComment

  // instance methods
  -[AVPlayerItemErrorLogEvent initWithDictionary:]
  -[AVPlayerItemErrorLogEvent dealloc]
  -[AVPlayerItemErrorLogEvent date]
  -[AVPlayerItemErrorLogEvent errorDomain]
  -[AVPlayerItemErrorLogEvent copyWithZone:]
  -[AVPlayerItemErrorLogEvent URI]
  -[AVPlayerItemErrorLogEvent init]
  -[AVPlayerItemErrorLogEvent _common_init]
  -[AVPlayerItemErrorLogEvent serverAddress]
  -[AVPlayerItemErrorLogEvent playbackSessionID]
  -[AVPlayerItemErrorLogEvent errorStatusCode]
  -[AVPlayerItemErrorLogEvent errorComment]


AVAudioSessionMediaPlayerOnlyInternal : NSObject

AVAudioSessionMediaPlayerOnly : NSObject
 @property  <AVAudioSessionDelegateMediaPlayerOnly> *delegate
 @property  NSString *category
 @property  NSString *mode
 @property  double preferredHardwareSampleRate
 @property  double preferredIOBufferDuration
 @property  BOOL inputIsAvailable
 @property  double currentHardwareSampleRate
 @property  long long currentHardwareInputNumberOfChannels
 @property  long long currentHardwareOutputNumberOfChannels
 @property  BOOL canEnterPIPMode

  // class methods
  +[AVAudioSessionMediaPlayerOnly initialize]

  // instance methods
  -[AVAudioSessionMediaPlayerOnly setUsingLongFormAudio:error:]
  -[AVAudioSessionMediaPlayerOnly setActive:error:]
  -[AVAudioSessionMediaPlayerOnly inputIsAvailable]
  -[AVAudioSessionMediaPlayerOnly currentHardwareSampleRate]
  -[AVAudioSessionMediaPlayerOnly setMode:error:]
  -[AVAudioSessionMediaPlayerOnly canEnterPIPMode]
  -[AVAudioSessionMediaPlayerOnly setPreferredHardwareSampleRate:error:]
  -[AVAudioSessionMediaPlayerOnly setDelegate:]
  -[AVAudioSessionMediaPlayerOnly setCategory:error:]
  -[AVAudioSessionMediaPlayerOnly setActive:withFlags:error:]
  -[AVAudioSessionMediaPlayerOnly delegate]
  -[AVAudioSessionMediaPlayerOnly currentHardwareOutputNumberOfChannels]
  -[AVAudioSessionMediaPlayerOnly dealloc]
  -[AVAudioSessionMediaPlayerOnly _removeFPListeners]
  -[AVAudioSessionMediaPlayerOnly setPreferredIOBufferDuration:error:]
  -[AVAudioSessionMediaPlayerOnly category]
  -[AVAudioSessionMediaPlayerOnly setActivationContext:error:]
  -[AVAudioSessionMediaPlayerOnly mode]
  -[AVAudioSessionMediaPlayerOnly preferredHardwareSampleRate]
  -[AVAudioSessionMediaPlayerOnly preferredIOBufferDuration]
  -[AVAudioSessionMediaPlayerOnly _weakReference]
  -[AVAudioSessionMediaPlayerOnly isApplicationAudioSession]
  -[AVAudioSessionMediaPlayerOnly currentHardwareInputNumberOfChannels]
  -[AVAudioSessionMediaPlayerOnly _addFPListeners]
  -[AVAudioSessionMediaPlayerOnly setApplicationAudioSession:]
  -[AVAudioSessionMediaPlayerOnly _attachToPlayer:]
  -[AVAudioSessionMediaPlayerOnly init]


AVMediaSelectionGroupInternal : NSObject

AVMediaSelectionGroup : NSObject <NSCopying>
 @property  NSArray *options
 @property  AVMediaSelectionOption *defaultOption
 @property  BOOL allowsEmptySelection

  // class methods
  +[AVMediaSelectionGroup mediaSelectionGroupWithAsset:dictionary:]
  +[AVMediaSelectionGroup playableMediaSelectionOptionsFromArray:]
  +[AVMediaSelectionGroup mediaSelectionOptionsFromArray:withLocale:]
  +[AVMediaSelectionGroup mediaSelectionOptionsFromArray:filteredAndSortedAccordingToPreferredLanguages:]
  +[AVMediaSelectionGroup mediaSelectionOptionsFromArray:withMediaCharacteristics:]
  +[AVMediaSelectionGroup mediaSelectionOptionsFromArray:withoutMediaCharacteristics:]

  // instance methods
  -[AVMediaSelectionGroup _groupMediaType]
  -[AVMediaSelectionGroup _groupID]
  -[AVMediaSelectionGroup dealloc]
  -[AVMediaSelectionGroup mediaSelectionOptionWithPropertyList:]
  -[AVMediaSelectionGroup _optionWithID:displaysNonForcedSubtitles:]
  -[AVMediaSelectionGroup asset]
  -[AVMediaSelectionGroup options]
  -[AVMediaSelectionGroup _weakReference]
  -[AVMediaSelectionGroup copyWithZone:]
  -[AVMediaSelectionGroup _groupMediaCharacteristics]
  -[AVMediaSelectionGroup defaultOption]
  -[AVMediaSelectionGroup _isStreamingGroup]
  -[AVMediaSelectionGroup init]
  -[AVMediaSelectionGroup dictionary]
  -[AVMediaSelectionGroup currentBundleIdentifier]
  -[AVMediaSelectionGroup allowsEmptySelection]
  -[AVMediaSelectionGroup _primaryMediaCharacteristic]
  -[AVMediaSelectionGroup _matchesGroupID:mediaType:]
  -[AVMediaSelectionGroup setCurrentBundleIdentifier:]


AVAssetMediaSelectionGroup : AVMediaSelectionGroup
  // instance methods
  -[AVAssetMediaSelectionGroup dealloc]
  -[AVAssetMediaSelectionGroup mediaSelectionOptionWithPropertyList:]
  -[AVAssetMediaSelectionGroup _optionWithID:displaysNonForcedSubtitles:]
  -[AVAssetMediaSelectionGroup asset]
  -[AVAssetMediaSelectionGroup options]
  -[AVAssetMediaSelectionGroup _optionWithID:identifier:source:displaysNonForcedSubtitles:]
  -[AVAssetMediaSelectionGroup _groupMediaCharacteristics]
  -[AVAssetMediaSelectionGroup defaultOption]
  -[AVAssetMediaSelectionGroup initWithAsset:dictionary:]
  -[AVAssetMediaSelectionGroup _isStreamingGroup]
  -[AVAssetMediaSelectionGroup isEqual:]
  -[AVAssetMediaSelectionGroup init]
  -[AVAssetMediaSelectionGroup dictionary]


AVMediaSelectionOptionInternal : NSObject

AVMediaSelectionOption : NSObject <NSCopying>
 @property  int trackID
 @property  NSString *unicodeLanguageIdentifier
 @property  NSString *unicodeLanguageCode
 @property  NSString *mediaType
 @property  NSArray *mediaSubTypes
 @property  BOOL playable
 @property  NSString *extendedLanguageTag
 @property  NSLocale *locale
 @property  NSArray *commonMetadata
 @property  NSArray *availableMetadataFormats
 @property  NSString *displayName

  // class methods
  +[AVMediaSelectionOption _plistHasOptionIdentifier:]
  +[AVMediaSelectionOption mediaSelectionOptionForAsset:group:dictionary:hasUnderlyingTrack:]
  +[AVMediaSelectionOption mediaSelectionNilOptionForGroup:]

  // instance methods
  -[AVMediaSelectionOption propertyList]
  -[AVMediaSelectionOption _title]
  -[AVMediaSelectionOption metadataForFormat:]
  -[AVMediaSelectionOption commonMetadata]
  -[AVMediaSelectionOption isPlayable]
  -[AVMediaSelectionOption trackID]
  -[AVMediaSelectionOption _groupMediaType]
  -[AVMediaSelectionOption _groupID]
  -[AVMediaSelectionOption mediaType]
  -[AVMediaSelectionOption dealloc]
  -[AVMediaSelectionOption extendedLanguageTag]
  -[AVMediaSelectionOption languageCode]
  -[AVMediaSelectionOption locale]
  -[AVMediaSelectionOption availableMetadataFormats]
  -[AVMediaSelectionOption copyWithZone:]
  -[AVMediaSelectionOption _groupMediaCharacteristics]
  -[AVMediaSelectionOption displayName]
  -[AVMediaSelectionOption group]
  -[AVMediaSelectionOption init]
  -[AVMediaSelectionOption dictionary]
  -[AVMediaSelectionOption initWithGroup:]
  -[AVMediaSelectionOption unicodeLanguageIdentifier]
  -[AVMediaSelectionOption unicodeLanguageCode]
  -[AVMediaSelectionOption hasMediaCharacteristic:]
  -[AVMediaSelectionOption mediaCharacteristics]
  -[AVMediaSelectionOption _track]
  -[AVMediaSelectionOption track]
  -[AVMediaSelectionOption _ancillaryDescription]
  -[AVMediaSelectionOption mediaSubTypes]
  -[AVMediaSelectionOption _isAuxiliaryContent]
  -[AVMediaSelectionOption _isDesignatedDefault]
  -[AVMediaSelectionOption associatedMediaSelectionOptionInMediaSelectionGroup:]
  -[AVMediaSelectionOption displaysNonForcedSubtitles]
  -[AVMediaSelectionOption optionID]
  -[AVMediaSelectionOption _isMainProgramContent]
  -[AVMediaSelectionOption _taggedMediaCharacteristics]
  -[AVMediaSelectionOption associatedExtendedLanguageTag]
  -[AVMediaSelectionOption associatedUnicodeLanguageIdentifier]
  -[AVMediaSelectionOption associatedPersistentIDs]
  -[AVMediaSelectionOption fallbackIDs]
  -[AVMediaSelectionOption _representsNilSelection]
  -[AVMediaSelectionOption _preferredMetadataTitleAccordingToPreferredLanguages:fallingBackToMatchingEmptyLocale:excludeM3U8Metadata:]
  -[AVMediaSelectionOption _languageDisplayNameFromMetadataAccordingToPreferredLanguages:fallingBackToMatchingEmptyLocale:]
  -[AVMediaSelectionOption _displayNameWithLocale:fallingBackToMatchingUndeterminedAndMultilingual:]
  -[AVMediaSelectionOption _updateDisplayNameWithLocale:fallingBackToMatchingUndeterminedAndMultilingual:context:]
  -[AVMediaSelectionOption displayNameWithLocale:]
  -[AVMediaSelectionOption outOfBandSource]
  -[AVMediaSelectionOption outOfBandIdentifier]


AVMediaSelectionTrackOption : AVMediaSelectionOption
  // instance methods
  -[AVMediaSelectionTrackOption metadataForFormat:]
  -[AVMediaSelectionTrackOption commonMetadata]
  -[AVMediaSelectionTrackOption isPlayable]
  -[AVMediaSelectionTrackOption trackID]
  -[AVMediaSelectionTrackOption _groupID]
  -[AVMediaSelectionTrackOption mediaType]
  -[AVMediaSelectionTrackOption dealloc]
  -[AVMediaSelectionTrackOption locale]
  -[AVMediaSelectionTrackOption availableMetadataFormats]
  -[AVMediaSelectionTrackOption group]
  -[AVMediaSelectionTrackOption isEqual:]
  -[AVMediaSelectionTrackOption initWithAsset:group:dictionary:]
  -[AVMediaSelectionTrackOption dictionary]
  -[AVMediaSelectionTrackOption _track]
  -[AVMediaSelectionTrackOption track]
  -[AVMediaSelectionTrackOption mediaSubTypes]
  -[AVMediaSelectionTrackOption associatedMediaSelectionOptionInMediaSelectionGroup:]
  -[AVMediaSelectionTrackOption displaysNonForcedSubtitles]


AVMediaSelectionKeyValueOption : AVMediaSelectionOption
  // instance methods
  -[AVMediaSelectionKeyValueOption metadataForFormat:]
  -[AVMediaSelectionKeyValueOption commonMetadata]
  -[AVMediaSelectionKeyValueOption isPlayable]
  -[AVMediaSelectionKeyValueOption _groupMediaType]
  -[AVMediaSelectionKeyValueOption _groupID]
  -[AVMediaSelectionKeyValueOption mediaType]
  -[AVMediaSelectionKeyValueOption dealloc]
  -[AVMediaSelectionKeyValueOption locale]
  -[AVMediaSelectionKeyValueOption availableMetadataFormats]
  -[AVMediaSelectionKeyValueOption group]
  -[AVMediaSelectionKeyValueOption isEqual:]
  -[AVMediaSelectionKeyValueOption initWithAsset:group:dictionary:]
  -[AVMediaSelectionKeyValueOption dictionary]


AVMediaSelectionNilOption : AVMediaSelectionOption
  // instance methods
  -[AVMediaSelectionNilOption isPlayable]
  -[AVMediaSelectionNilOption _groupMediaType]
  -[AVMediaSelectionNilOption _groupID]
  -[AVMediaSelectionNilOption dealloc]
  -[AVMediaSelectionNilOption group]
  -[AVMediaSelectionNilOption isEqual:]
  -[AVMediaSelectionNilOption dictionary]
  -[AVMediaSelectionNilOption initWithGroup:]
  -[AVMediaSelectionNilOption _representsNilSelection]


AVFigObjectInspector : NSObject
  // class methods
  +[AVFigObjectInspector initialize]

  // instance methods
  -[AVFigObjectInspector _valueAsCFTypeForProperty:]
  -[AVFigObjectInspector _sizeForProperty:]
  -[AVFigObjectInspector _stringForProperty:]
  -[AVFigObjectInspector _timeForProperty:defaultValue:]
  -[AVFigObjectInspector _timeForProperty:]
  -[AVFigObjectInspector _timeRangeForProperty:]
  -[AVFigObjectInspector _floatForProperty:defaultValue:]
  -[AVFigObjectInspector _floatForProperty:]
  -[AVFigObjectInspector _SInt16ForProperty:]
  -[AVFigObjectInspector _SInt32ForProperty:]
  -[AVFigObjectInspector _longLongForProperty:]
  -[AVFigObjectInspector _booleanForProperty:]
  -[AVFigObjectInspector _sizeForProperty:defaultValue:]
  -[AVFigObjectInspector _affineTransformForProperty:]
  -[AVFigObjectInspector _tollFreeBridgedObjectForProperty:]
  -[AVFigObjectInspector _arrayForProperty:]
  -[AVFigObjectInspector _nonNilArrayForProperty:]
  -[AVFigObjectInspector _dictionaryForProperty:]
  -[AVFigObjectInspector _nonNilDictionaryForProperty:]
  -[AVFigObjectInspector _dataForProperty:]


AVOutputSettings : NSObject <NSCopying>
 @property  NSSet *compatibleMediaTypes
 @property  BOOL willYieldCompressedSamples
 @property  NSDictionary *outputSettingsDictionary

  // class methods
  +[AVOutputSettings _outputSettingsWithOutputSettingsDictionary:mediaType:exceptionReason:]
  +[AVOutputSettings registeredOutputSettingsClasses]
  +[AVOutputSettings eligibleOutputSettingsDictionaryKeys]
  +[AVOutputSettings validateOutputSettingsDictionary:]
  +[AVOutputSettings _validateOutputSettingsDictionary:compatibilityDescription:]
  +[AVOutputSettings outputSettingsWithOutputSettingsDictionary:mediaType:]
  +[AVOutputSettings defaultOutputSettingsForMediaType:]
  +[AVOutputSettings supportsEmptyOutputSettingsDictionary]

  // instance methods
  -[AVOutputSettings encoderIsAvailableOnCurrentSystemReturningError:]
  -[AVOutputSettings dealloc]
  -[AVOutputSettings canFullySpecifyOutputFormatReturningReason:]
  -[AVOutputSettings copyWithZone:]
  -[AVOutputSettings init]
  -[AVOutputSettings willYieldCompressedSamples]
  -[AVOutputSettings initWithOutputSettingsDictionary:exceptionReason:]
  -[AVOutputSettings compatibleMediaTypes]
  -[AVOutputSettings validateUsingOutputSettingsValidator:reason:]
  -[AVOutputSettings outputSettingsDictionary]


AVFormatSpecification : NSObject
  // class methods
  +[AVFormatSpecification formatSpecificationWithOutputSettings:sourceFormatDescription:]

  // instance methods
  -[AVFormatSpecification outputSettings]
  -[AVFormatSpecification dealloc]
  -[AVFormatSpecification sourceFormatDescription]
  -[AVFormatSpecification initWithOutputSettings:sourceFormatDescription:]


AVAssetDownloadContentConfiguration : NSObject <NSSecureCoding, NSCopying>
 @property  NSArray *variantQualifiers
 @property  NSArray *mediaSelections

  // class methods
  +[AVAssetDownloadContentConfiguration supportsSecureCoding]

  // instance methods
  -[AVAssetDownloadContentConfiguration encodeWithCoder:]
  -[AVAssetDownloadContentConfiguration dealloc]
  -[AVAssetDownloadContentConfiguration copyWithZone:]
  -[AVAssetDownloadContentConfiguration init]
  -[AVAssetDownloadContentConfiguration initWithCoder:]
  -[AVAssetDownloadContentConfiguration _createFigContentConfigForEnvironmentalCondition:]
  -[AVAssetDownloadContentConfiguration _serializeIntoDownloadConfig:environmentalCondition:]
  -[AVAssetDownloadContentConfiguration _serializeIntoDownloadConfig:asset:]
  -[AVAssetDownloadContentConfiguration variantQualifiers]
  -[AVAssetDownloadContentConfiguration setVariantQualifiers:]
  -[AVAssetDownloadContentConfiguration mediaSelections]
  -[AVAssetDownloadContentConfiguration setMediaSelections:]


AVAssetDownloadDefaultPrimaryContentConfiguration : AVAssetDownloadContentConfiguration
  // class methods
  +[AVAssetDownloadDefaultPrimaryContentConfiguration supportsSecureCoding]

  // instance methods
  -[AVAssetDownloadDefaultPrimaryContentConfiguration _serializeIntoDownloadConfig:asset:]
  -[AVAssetDownloadDefaultPrimaryContentConfiguration _setupContentConfigWithDownloadConfig:asset:]


AVAssetDownloadDefaultAuxiliaryContentConfiguration : AVAssetDownloadContentConfiguration
  // class methods
  +[AVAssetDownloadDefaultAuxiliaryContentConfiguration supportsSecureCoding]

  // instance methods
  -[AVAssetDownloadDefaultAuxiliaryContentConfiguration _serializeIntoDownloadConfig:asset:]
  -[AVAssetDownloadDefaultAuxiliaryContentConfiguration _setupContentConfigWithDownloadConfig:asset:]


AVAssetDownloadConfiguration : NSObject <NSSecureCoding>
 @property  NSData *artworkData
 @property  AVAssetDownloadContentConfiguration *primaryContentConfiguration
 @property  NSArray *auxiliaryContentConfigurations
 @property  BOOL optimizesAuxiliaryContentConfigurations

  // class methods
  +[AVAssetDownloadConfiguration supportsSecureCoding]
  +[AVAssetDownloadConfiguration downloadConfigurationWithAsset:title:]

  // instance methods
  -[AVAssetDownloadConfiguration artworkData]
  -[AVAssetDownloadConfiguration setArtworkData:]
  -[AVAssetDownloadConfiguration encodeWithCoder:]
  -[AVAssetDownloadConfiguration dealloc]
  -[AVAssetDownloadConfiguration _asset]
  -[AVAssetDownloadConfiguration initWithCoder:]
  -[AVAssetDownloadConfiguration initWithAsset:title:]
  -[AVAssetDownloadConfiguration primaryContentConfiguration]
  -[AVAssetDownloadConfiguration auxiliaryContentConfigurations]
  -[AVAssetDownloadConfiguration setAuxiliaryContentConfigurations:]
  -[AVAssetDownloadConfiguration optimizesAuxiliaryContentConfigurations]
  -[AVAssetDownloadConfiguration setOptimizesAuxiliaryContentConfigurations:]
  -[AVAssetDownloadConfiguration _serializableRepresentation]


AVDisplayCriteriaInternal : NSObject
  // instance methods
  -[AVDisplayCriteriaInternal initWithRefreshRate:videoDynamicRange:]


AVDisplayCriteria : NSObject <NSCopying>
 @property  float refreshRate
 @property  int videoDynamicRange

  // instance methods
  -[AVDisplayCriteria refreshRate]
  -[AVDisplayCriteria dealloc]
  -[AVDisplayCriteria copyWithZone:]
  -[AVDisplayCriteria isEqual:]
  -[AVDisplayCriteria initWithRefreshRate:videoDynamicRange:]
  -[AVDisplayCriteria videoDynamicRange]


AVMediaFileType : NSObject <NSCopying>
 @property  NSString *defaultFileExtension
 @property  NSSet *supportedMediaTypes
 @property  BOOL supportsSampleReferences
 @property  NSString *UTI
 @property  NSString *figFormatReaderFileFormat
 @property  unsigned int audioFileTypeID

  // class methods
  +[AVMediaFileType isoFileTypes]
  +[AVMediaFileType allFileTypeIdentifiers]
  +[AVMediaFileType initialize]
  +[AVMediaFileType figFileTypeProfileFromAVFileTypeProfile:]
  +[AVMediaFileType _mediaFileTypeWithFileTypeIdentifier:exceptionReason:]
  +[AVMediaFileType mediaFileTypeWithFileTypeIdentifier:]

  // instance methods
  -[AVMediaFileType figFormatReaderFileFormat]
  -[AVMediaFileType defaultFileExtension]
  -[AVMediaFileType dealloc]
  -[AVMediaFileType initWithFileTypeIdentifier:exceptionReason:]
  -[AVMediaFileType copyWithZone:]
  -[AVMediaFileType supportsSampleReferences]
  -[AVMediaFileType audioFileTypeID]
  -[AVMediaFileType supportsFormat:]
  -[AVMediaFileType UTI]
  -[AVMediaFileType supportedMediaTypes]
  -[AVMediaFileType supportsOutputSettings:reason:]


AVMediaFileOutputSettingsValidator : NSObject <AVOutputSettingsValidation>
 @property  AVMediaFileType *fileType

  // class methods
  +[AVMediaFileOutputSettingsValidator initialize]
  +[AVMediaFileOutputSettingsValidator mediaFileOutputSettingsValidatorForFileType:]

  // instance methods
  -[AVMediaFileOutputSettingsValidator fileType]
  -[AVMediaFileOutputSettingsValidator validateAudioOutputSettings:reason:]
  -[AVMediaFileOutputSettingsValidator dealloc]
  -[AVMediaFileOutputSettingsValidator validateVideoOutputSettings:reason:]
  -[AVMediaFileOutputSettingsValidator init]
  -[AVMediaFileOutputSettingsValidator initWithFileType:]


AVWAVEOutputSettingsValidator : AVMediaFileOutputSettingsValidator
  // instance methods
  -[AVWAVEOutputSettingsValidator validateAudioOutputSettings:reason:]
  -[AVWAVEOutputSettingsValidator initWithFileType:]


AVAIFFOutputSettingsValidator : AVMediaFileOutputSettingsValidator
  // instance methods
  -[AVAIFFOutputSettingsValidator validateAudioOutputSettings:reason:]
  -[AVAIFFOutputSettingsValidator initWithFileType:]


AVAIFCOutputSettingsValidator : AVMediaFileOutputSettingsValidator
  // instance methods
  -[AVAIFCOutputSettingsValidator validateAudioOutputSettings:reason:]
  -[AVAIFCOutputSettingsValidator initWithFileType:]


AVISOOutputSettingsValidator : AVMediaFileOutputSettingsValidator
  // instance methods
  -[AVISOOutputSettingsValidator validateAudioOutputSettings:reason:]
  -[AVISOOutputSettingsValidator validateVideoOutputSettings:reason:]


AVGenericMediaFileOutputSettingsValidator : AVMediaFileOutputSettingsValidator

AVAssetSegmentReportSampleInformation : NSObject
 @property  {?=qiIq} presentationTimeStamp
 @property  long long offset
 @property  long long length
 @property  BOOL isSyncSample

  // instance methods
  -[AVAssetSegmentReportSampleInformation dealloc]
  -[AVAssetSegmentReportSampleInformation length]
  -[AVAssetSegmentReportSampleInformation presentationTimeStamp]
  -[AVAssetSegmentReportSampleInformation offset]
  -[AVAssetSegmentReportSampleInformation initWithFigSegmentReportSampleInformationDictionary:]
  -[AVAssetSegmentReportSampleInformation isSyncSample]


AVAssetSegmentTrackReport : NSObject
 @property  int trackID
 @property  NSString *mediaType
 @property  {?=qiIq} earliestPresentationTimeStamp
 @property  {?=qiIq} duration
 @property  AVAssetSegmentReportSampleInformation *firstVideoSampleInformation

  // instance methods
  -[AVAssetSegmentTrackReport trackID]
  -[AVAssetSegmentTrackReport mediaType]
  -[AVAssetSegmentTrackReport dealloc]
  -[AVAssetSegmentTrackReport duration]
  -[AVAssetSegmentTrackReport initWithFigSegmentTrackReportDictionary:]
  -[AVAssetSegmentTrackReport earliestPresentationTimeStamp]
  -[AVAssetSegmentTrackReport firstVideoSampleInformation]


AVAssetSegmentReport : NSObject
 @property  long long segmentType
 @property  NSArray *trackReports

  // instance methods
  -[AVAssetSegmentReport dealloc]
  -[AVAssetSegmentReport initWithFigSegmentReportDictionary:]
  -[AVAssetSegmentReport segmentType]
  -[AVAssetSegmentReport trackReports]


AVAudioOutputSettings : AVOutputSettings
 @property  NSDictionary *audioSettingsDictionary

  // class methods
  +[AVAudioOutputSettings audioOutputSettingsWithAudioSettingsDictionary:]
  +[AVAudioOutputSettings _audioOutputSettingsWithAudioSettingsDictionary:exceptionReason:]
  +[AVAudioOutputSettings audioOutputSettingsWithTrustedAudioSettingsDictionary:]
  +[AVAudioOutputSettings _outputSettingsWithOutputSettingsDictionary:mediaType:exceptionReason:]
  +[AVAudioOutputSettings defaultAudioOutputSettings]
  +[AVAudioOutputSettings registeredOutputSettingsClasses]
  +[AVAudioOutputSettings audioConverterPropertiesForAudioSettingsDictionary:]

  // instance methods
  -[AVAudioOutputSettings compatibleMediaTypes]
  -[AVAudioOutputSettings validateUsingOutputSettingsValidator:reason:]
  -[AVAudioOutputSettings initWithAudioSettingsDictionary:exceptionReason:]
  -[AVAudioOutputSettings audioSettingsDictionary]


AVAVAudioSettingsAudioOutputSettings : AVAudioOutputSettings <AVReencodedAudioSettingsForFig, AVDecodedAudioSettingsForFig>
  // class methods
  +[AVAVAudioSettingsAudioOutputSettings _audioOutputSettingsWithAudioSettingsDictionary:exceptionReason:]
  +[AVAVAudioSettingsAudioOutputSettings eligibleOutputSettingsDictionaryKeys]

  // instance methods
  -[AVAVAudioSettingsAudioOutputSettings encoderIsAvailableOnCurrentSystemReturningError:]
  -[AVAVAudioSettingsAudioOutputSettings initWithTrustedAVAudioSettingsDictionary:]
  -[AVAVAudioSettingsAudioOutputSettings audioOptions]
  -[AVAVAudioSettingsAudioOutputSettings copyAudioChannelLayoutForSourceFormatDescription:audioChannelLayoutSize:]
  -[AVAVAudioSettingsAudioOutputSettings canFullySpecifyOutputFormatReturningReason:]
  -[AVAVAudioSettingsAudioOutputSettings initWithAVAudioSettingsDictionary:exceptionReason:]
  -[AVAVAudioSettingsAudioOutputSettings getAudioStreamBasicDescription:forAudioFileTypeID:sourceFormatDescription:]
  -[AVAVAudioSettingsAudioOutputSettings willYieldCompressedSamples]


AVVideoOutputSettings : AVOutputSettings
 @property  int width
 @property  int height
 @property  NSDictionary *cleanApertureDictionary
 @property  NSDictionary *pixelAspectRatioDictionary
 @property  NSDictionary *pixelTransferProperties
 @property  NSDictionary *videoScalingProperties
 @property  BOOL dimensionsAreBoundingBox
 @property  {?=qiIq} minimumFrameDuration
 @property  NSString *frameRateConversionAlgorithm
 @property  BOOL allowWideColor
 @property  NSDictionary *videoSettingsDictionary

  // class methods
  +[AVVideoOutputSettings _outputSettingsWithOutputSettingsDictionary:mediaType:exceptionReason:]
  +[AVVideoOutputSettings _videoOutputSettingsWithVideoSettingsDictionary:exceptionReason:]
  +[AVVideoOutputSettings registeredOutputSettingsClasses]
  +[AVVideoOutputSettings _validValuesForScalingMode]
  +[AVVideoOutputSettings videoOutputSettingsWithVideoSettingsDictionary:]
  +[AVVideoOutputSettings videoOutputSettingsWithTrustedVideoSettingsDictionary:]
  +[AVVideoOutputSettings defaultVideoOutputSettings]

  // instance methods
  -[AVVideoOutputSettings minimumFrameDuration]
  -[AVVideoOutputSettings pixelAspectRatioDictionary]
  -[AVVideoOutputSettings width]
  -[AVVideoOutputSettings height]
  -[AVVideoOutputSettings cleanApertureDictionary]
  -[AVVideoOutputSettings compatibleMediaTypes]
  -[AVVideoOutputSettings validateUsingOutputSettingsValidator:reason:]
  -[AVVideoOutputSettings initWithVideoSettingsDictionary:exceptionReason:]
  -[AVVideoOutputSettings videoSettingsDictionary]
  -[AVVideoOutputSettings videoScalingProperties]
  -[AVVideoOutputSettings pixelTransferProperties]
  -[AVVideoOutputSettings colorPropertiesConsideringFormatDescriptions:colorPrimaries:transferFunction:ycbcrMatrix:]
  -[AVVideoOutputSettings dimensionsAreBoundingBox]
  -[AVVideoOutputSettings frameRateConversionAlgorithm]
  -[AVVideoOutputSettings allowWideColor]


AVPixelBufferAttributesVideoOutputSettings : AVVideoOutputSettings <AVDecodedVideoSettingsForFig>
 @property  NSDictionary *pixelBufferAttributes
 @property  NSString *fieldMode

  // class methods
  +[AVPixelBufferAttributesVideoOutputSettings _videoOutputSettingsWithVideoSettingsDictionary:exceptionReason:]
  +[AVPixelBufferAttributesVideoOutputSettings eligibleOutputSettingsDictionaryKeys]

  // instance methods
  -[AVPixelBufferAttributesVideoOutputSettings pixelAspectRatioDictionary]
  -[AVPixelBufferAttributesVideoOutputSettings width]
  -[AVPixelBufferAttributesVideoOutputSettings encoderIsAvailableOnCurrentSystemReturningError:]
  -[AVPixelBufferAttributesVideoOutputSettings height]
  -[AVPixelBufferAttributesVideoOutputSettings dealloc]
  -[AVPixelBufferAttributesVideoOutputSettings fieldMode]
  -[AVPixelBufferAttributesVideoOutputSettings canFullySpecifyOutputFormatReturningReason:]
  -[AVPixelBufferAttributesVideoOutputSettings cleanApertureDictionary]
  -[AVPixelBufferAttributesVideoOutputSettings pixelBufferAttributes]
  -[AVPixelBufferAttributesVideoOutputSettings initWithTrustedPixelBufferAttributes:]
  -[AVPixelBufferAttributesVideoOutputSettings willYieldCompressedSamples]
  -[AVPixelBufferAttributesVideoOutputSettings initWithPixelBufferAttributes:exceptionReason:]


AVAVVideoSettingsVideoOutputSettings : AVVideoOutputSettings <AVReencodedVideoSettingsForFig>
 @property  unsigned int videoCodecType
 @property  NSDictionary *videoEncoderSpecification
 @property  NSDictionary *videoCompressionProperties

  // class methods
  +[AVAVVideoSettingsVideoOutputSettings _validateVideoCompressionProperties:againstSupportedPropertyDictionary:forCodecType:exceptionReason:]
  +[AVAVVideoSettingsVideoOutputSettings _videoOutputSettingsWithVideoSettingsDictionary:exceptionReason:]
  +[AVAVVideoSettingsVideoOutputSettings eligibleOutputSettingsDictionaryKeys]

  // instance methods
  -[AVAVVideoSettingsVideoOutputSettings pixelAspectRatioDictionary]
  -[AVAVVideoSettingsVideoOutputSettings width]
  -[AVAVVideoSettingsVideoOutputSettings encoderIsAvailableOnCurrentSystemReturningError:]
  -[AVAVVideoSettingsVideoOutputSettings height]
  -[AVAVVideoSettingsVideoOutputSettings dealloc]
  -[AVAVVideoSettingsVideoOutputSettings canFullySpecifyOutputFormatReturningReason:]
  -[AVAVVideoSettingsVideoOutputSettings cleanApertureDictionary]
  -[AVAVVideoSettingsVideoOutputSettings willYieldCompressedSamples]
  -[AVAVVideoSettingsVideoOutputSettings videoCodecType]
  -[AVAVVideoSettingsVideoOutputSettings videoEncoderSpecification]
  -[AVAVVideoSettingsVideoOutputSettings videoCompressionProperties]
  -[AVAVVideoSettingsVideoOutputSettings initWithAVVideoSettingsDictionary:exceptionReason:]
  -[AVAVVideoSettingsVideoOutputSettings initWithTrustedAVVideoSettingsDictionary:]


AVCoordinatedPlaybackSuspension : NSObject
 @property  NSString *reason
 @property  NSDate *beginDate

  // instance methods
  -[AVCoordinatedPlaybackSuspension beginDate]
  -[AVCoordinatedPlaybackSuspension end]
  -[AVCoordinatedPlaybackSuspension dealloc]
  -[AVCoordinatedPlaybackSuspension reason]
  -[AVCoordinatedPlaybackSuspension initWithCoordinator:reason:]
  -[AVCoordinatedPlaybackSuspension _figSuspension]
  -[AVCoordinatedPlaybackSuspension endProposingNewTime:]


AVCoordinatedPlaybackParticipant : NSObject
 @property  NSArray *suspensionReasons
 @property  BOOL readyToPlay
 @property  NSUUID *identifier

  // instance methods
  -[AVCoordinatedPlaybackParticipant identifier]
  -[AVCoordinatedPlaybackParticipant suspensionReasons]
  -[AVCoordinatedPlaybackParticipant isReadyToPlay]
  -[AVCoordinatedPlaybackParticipant dealloc]
  -[AVCoordinatedPlaybackParticipant isEqual:]
  -[AVCoordinatedPlaybackParticipant initWithParticipantIdentifier:readyToPlay:suspensionReasons:]


AVPlaybackCoordinator : NSObject
 @property  NSArray *otherParticipants
 @property  NSArray *suspensionReasons

  // class methods
  +[AVPlaybackCoordinator initialize]

  // instance methods
  -[AVPlaybackCoordinator initInternal]
  -[AVPlaybackCoordinator suspensionReasons]
  -[AVPlaybackCoordinator _currentWaitingPoliciesArray]
  -[AVPlaybackCoordinator setSuspensionReasonsThatTriggerWaiting:]
  -[AVPlaybackCoordinator setParticipantLimit:forWaitingOutSuspensionsWithReason:]
  -[AVPlaybackCoordinator otherParticipants]
  -[AVPlaybackCoordinator _endSuspension:]
  -[AVPlaybackCoordinator setPauseSnapsToMediaTimeOfOriginator:]
  -[AVPlaybackCoordinator participantLimitForWaitingOutSuspensionsWithReason:]
  -[AVPlaybackCoordinator _endSuspension:proposingNewTime:]
  -[AVPlaybackCoordinator pauseSnapsToMediaTimeOfOriginator]
  -[AVPlaybackCoordinator expectedItemTimeAtHostTime:]
  -[AVPlaybackCoordinator suspensionReasonsThatTriggerWaiting]
  -[AVPlaybackCoordinator init]
  -[AVPlaybackCoordinator beginSuspensionForReason:]


AVPlayerPlaybackCoordinator : AVPlaybackCoordinator
 @property  AVPlayer *player
 @property  <AVPlayerPlaybackCoordinatorDelegate> *delegate

  // instance methods
  -[AVPlayerPlaybackCoordinator _updateWaitingPoliciesArrayWithPolicies:]
  -[AVPlayerPlaybackCoordinator _participantStateForIdentifier:]
  -[AVPlayerPlaybackCoordinator _setIsInExpanseMediaPlaybackOnAVAudioSession]
  -[AVPlayerPlaybackCoordinator _setLocalParticipantUUID:onFigPlaybackCoordinator:]
  -[AVPlayerPlaybackCoordinator identifierForPlayerItem:]
  -[AVPlayerPlaybackCoordinator setMediumLoggingIdentifier:]
  -[AVPlayerPlaybackCoordinator _removeFigPlaybackCoordinatorListeners]
  -[AVPlayerPlaybackCoordinator setDelegate:]
  -[AVPlayerPlaybackCoordinator _addFigPlaybackCoordinatorListeners:]
  -[AVPlayerPlaybackCoordinator _doesSuspensionReasonTriggerWaiting:]
  -[AVPlayerPlaybackCoordinator avfParticipantsForFigParticipantsUUIDs:]
  -[AVPlayerPlaybackCoordinator coordinationMediumDelegate]
  -[AVPlayerPlaybackCoordinator suspensionReasons]
  -[AVPlayerPlaybackCoordinator delegate]
  -[AVPlayerPlaybackCoordinator mediumLoggingIdentifier]
  -[AVPlayerPlaybackCoordinator _currentWaitingPoliciesArray]
  -[AVPlayerPlaybackCoordinator setSuspensionReasonsThatTriggerWaiting:]
  -[AVPlayerPlaybackCoordinator participantForIdentifier:]
  -[AVPlayerPlaybackCoordinator setParticipantLimit:forWaitingOutSuspensionsWithReason:]
  -[AVPlayerPlaybackCoordinator _replaceParticipantStates:]
  -[AVPlayerPlaybackCoordinator otherParticipants]
  -[AVPlayerPlaybackCoordinator handleReplacementParticipantStateDictionaries:]
  -[AVPlayerPlaybackCoordinator dealloc]
  -[AVPlayerPlaybackCoordinator currentSuspensions]
  -[AVPlayerPlaybackCoordinator setCoordinationMediumDelegate:]
  -[AVPlayerPlaybackCoordinator .cxx_destruct]
  -[AVPlayerPlaybackCoordinator _removeAllParticipantStates]
  -[AVPlayerPlaybackCoordinator _endSuspension:]
  -[AVPlayerPlaybackCoordinator _synchronizeFigPlayerEvents]
  -[AVPlayerPlaybackCoordinator setPauseSnapsToMediaTimeOfOriginator:]
  -[AVPlayerPlaybackCoordinator player]
  -[AVPlayerPlaybackCoordinator _copyFigPlaybackCoordinator]
  -[AVPlayerPlaybackCoordinator _removeUnusedTransportControlStates]
  -[AVPlayerPlaybackCoordinator participantLimitForWaitingOutSuspensionsWithReason:]
  -[AVPlayerPlaybackCoordinator initWithPlayer:]
  -[AVPlayerPlaybackCoordinator _endSuspension:proposingNewTime:]
  -[AVPlayerPlaybackCoordinator trackedTransportControlStateDictionaries]
  -[AVPlayerPlaybackCoordinator handleRemovalOfParticipant:]
  -[AVPlayerPlaybackCoordinator pauseSnapsToMediaTimeOfOriginator]
  -[AVPlayerPlaybackCoordinator _updateOtherParticipantsUsingFigParticipantUUIDs:]
  -[AVPlayerPlaybackCoordinator interstitialTimeRangesForPlayerItem:]
  -[AVPlayerPlaybackCoordinator _removeParticipantStateWithIdentifier:]
  -[AVPlayerPlaybackCoordinator expectedItemTimeAtHostTime:]
  -[AVPlayerPlaybackCoordinator _setWaitingPolicies:onFigPlaybackCoordinator:]
  -[AVPlayerPlaybackCoordinator _updateTransportControlStateDictionaryWithTransportControlState:]
  -[AVPlayerPlaybackCoordinator suspensionReasonsThatTriggerWaiting]
  -[AVPlayerPlaybackCoordinator handleNewParticipantStateDictionary:]
  -[AVPlayerPlaybackCoordinator _transportControlStateForItemIdentifier:]
  -[AVPlayerPlaybackCoordinator _setMediumCallbacksOnFigPlaybackCoordinator:]
  -[AVPlayerPlaybackCoordinator _updateParticipantStateDictionaryWithParticipantState:]
  -[AVPlayerPlaybackCoordinator setFigPlaybackCoordinator:]
  -[AVPlayerPlaybackCoordinator figPlaybackCoordinatorConfigQueue]
  -[AVPlayerPlaybackCoordinator handleNewTransportControlStateDictionary:]
  -[AVPlayerPlaybackCoordinator _removeAllTransportControlStates]
  -[AVPlayerPlaybackCoordinator _updateSuspensionReasons:]
  -[AVPlayerPlaybackCoordinator beginSuspensionForReason:]
  -[AVPlayerPlaybackCoordinator participantStates]


AVAudioSettingsValueConstrainer : NSObject
 @property  float outputSampleRate
 @property  unsigned int outputFormat
 @property  unsigned int outputFormatFlags
 @property  unsigned int outputBitsPerChannel
 @property  unsigned int outputChannelCount
 @property  unsigned int outputDataRate

  // instance methods
  -[AVAudioSettingsValueConstrainer outputFormat]
  -[AVAudioSettingsValueConstrainer setOutputFormatFlags:]
  -[AVAudioSettingsValueConstrainer outputDataRate]
  -[AVAudioSettingsValueConstrainer setOutputDataRate:]
  -[AVAudioSettingsValueConstrainer setOutputBitsPerChannel:]
  -[AVAudioSettingsValueConstrainer _buildAudioConverter]
  -[AVAudioSettingsValueConstrainer outputSampleRate]
  -[AVAudioSettingsValueConstrainer dealloc]
  -[AVAudioSettingsValueConstrainer setInputPropertiesFromASBD:]
  -[AVAudioSettingsValueConstrainer _buildApplicableDataRatesForSampleRates]
  -[AVAudioSettingsValueConstrainer setOutputSampleRate:]
  -[AVAudioSettingsValueConstrainer outputChannelCount]
  -[AVAudioSettingsValueConstrainer availableOutputChannelCountForDesiredChannelCount:rounding:]
  -[AVAudioSettingsValueConstrainer setOutputChannelCount:]
  -[AVAudioSettingsValueConstrainer _fetchApplicableOutputDataRates]
  -[AVAudioSettingsValueConstrainer applicableOutputSampleRateForDesiredSampleRate:rounding:]
  -[AVAudioSettingsValueConstrainer setOutputFormat:]
  -[AVAudioSettingsValueConstrainer outputFormatFlags]
  -[AVAudioSettingsValueConstrainer _bringUpToDate]
  -[AVAudioSettingsValueConstrainer _buildAvailableSampleRates]
  -[AVAudioSettingsValueConstrainer _getAvailableOutputSampleRateFor:rounding:]
  -[AVAudioSettingsValueConstrainer outputBitsPerChannel]
  -[AVAudioSettingsValueConstrainer init]


AVFloat64Range : NSObject <NSCopying>
 @property  double minimum
 @property  double maximum

  // class methods
  +[AVFloat64Range float64RangeWithMinimum:maximum:]
  +[AVFloat64Range float64RangeWithAudioValueRange:]

  // instance methods
  -[AVFloat64Range maximum]
  -[AVFloat64Range minimum]
  -[AVFloat64Range copyWithZone:]
  -[AVFloat64Range initWithMinimum:maximum:]
  -[AVFloat64Range isEqual:]
  -[AVFloat64Range initWithAudioValueRange:]


AVAggregateAssetDownloadTask : NSURLSessionTask
 @property  AVURLAsset *URLAsset
 @property  NSURLRequest *originalRequest
 @property  NSURLRequest *currentRequest
 @property  NSURLResponse *response

  // instance methods
  -[AVAggregateAssetDownloadTask originalRequest]
  -[AVAggregateAssetDownloadTask currentRequest]
  -[AVAggregateAssetDownloadTask URLAsset]
  -[AVAggregateAssetDownloadTask response]


AVAssetDownloadSessionInternal : NSObject

AVAssetDownloadSession : NSObject
 @property  long long status
 @property  NSError *error
 @property  NSURL *URL
 @property  NSURL *destinationURL
 @property  long long priority
 @property  unsigned long fileSize
 @property  unsigned long availableFileSize
 @property  unsigned long countOfBytesReceived
 @property  unsigned long downloadToken
 @property  NSArray *loadedTimeRanges
 @property  AVMediaSelection *resolvedMediaSelection

  // class methods
  +[AVAssetDownloadSession registerDownloadLocation:forURLAsset:]
  +[AVAssetDownloadSession assetDownloadSessionWithAsset:mediaSelections:destinationURL:options:]
  +[AVAssetDownloadSession assetDownloadSessionWithURL:destinationURL:options:]
  +[AVAssetDownloadSession assetDownloadSessionWithDownloadToken:]
  +[AVAssetDownloadSession assetDownloadSessionWithAsset:destinationURL:options:]

  // instance methods
  -[AVAssetDownloadSession downloadToken]
  -[AVAssetDownloadSession _playbackItem]
  -[AVAssetDownloadSession _startOnQueue]
  -[AVAssetDownloadSession fileSize]
  -[AVAssetDownloadSession error]
  -[AVAssetDownloadSession status]
  -[AVAssetDownloadSession pause]
  -[AVAssetDownloadSession dealloc]
  -[AVAssetDownloadSession loadedTimeRanges]
  -[AVAssetDownloadSession stop]
  -[AVAssetDownloadSession countOfBytesReceived]
  -[AVAssetDownloadSession _weakReference]
  -[AVAssetDownloadSession setDelegate:queue:]
  -[AVAssetDownloadSession priority]
  -[AVAssetDownloadSession start]
  -[AVAssetDownloadSession URL]
  -[AVAssetDownloadSession destinationURL]
  -[AVAssetDownloadSession _figAsset]
  -[AVAssetDownloadSession init]
  -[AVAssetDownloadSession _errorForFigNotificationPayload:key:]
  -[AVAssetDownloadSession _addFigPlaybackItemListeners]
  -[AVAssetDownloadSession _removeFigPlaybackItemListeners]
  -[AVAssetDownloadSession _common_init]
  -[AVAssetDownloadSession initWithURL:destinationURL:options:]
  -[AVAssetDownloadSession initWithDownloadToken:]
  -[AVAssetDownloadSession initWithAsset:mediaSelections:destinationURL:options:]
  -[AVAssetDownloadSession startLoadingMetadata]
  -[AVAssetDownloadSession availableFileSize]
  -[AVAssetDownloadSession resolvedMediaSelection]
  -[AVAssetDownloadSession _sendDownloadSuccessToDelegate]
  -[AVAssetDownloadSession _sendDownloadFailureToDelegateWithError:]
  -[AVAssetDownloadSession _sendLoadedTimeRangesChangedToDelegateWithNewlyLoadedTimeRange:currentLoadedTimeRanges:timeRangeExpectedToLoad:selectedMediaArray:]
  -[AVAssetDownloadSession _sendDidResolveMediaSelectionWithMediaSelection:]
  -[AVAssetDownloadSession _sendDidFinishDownloadForMediaSelectionWithMediaSelection:]
  -[AVAssetDownloadSession _sendProgessUpdateWithExpectedBytesToDownload:bytesDownloaded:]
  -[AVAssetDownloadSession _sendWillDownloadVariants:]
  -[AVAssetDownloadSession _downloadSuccessCallback]
  -[AVAssetDownloadSession _downloadFailureCallbackWithError:]
  -[AVAssetDownloadSession startProgressTimerOnQueueWithError:]
  -[AVAssetDownloadSession cancelAndReleaseProgressTimerOnQueue]
  -[AVAssetDownloadSession _setupFigClientObjectForFileDownload:]
  -[AVAssetDownloadSession _setupFigClientObjectForStreaming:]
  -[AVAssetDownloadSession _setupFigClientObjectAsync:]
  -[AVAssetDownloadSession _setFileFigAsset:]
  -[AVAssetDownloadSession _startLoadingMetadataOnQueue]
  -[AVAssetDownloadSession _startOnQueueFirstTime]
  -[AVAssetDownloadSession _transitionToTerminalStatus:error:]
  -[AVAssetDownloadSession _primeCacheOnDispatchQueue]
  -[AVAssetDownloadSession _primeCache]
  -[AVAssetDownloadSession _readyForInspection]
  -[AVAssetDownloadSession _verifyDownloadConfigurationForAssetType]
  -[AVAssetDownloadSession _createDuplicateFigAssetFromAVAsset:]
  -[AVAssetDownloadSession _errorFromAssetNotificationPayload:]
  -[AVAssetDownloadSession _figAssetNotificationNames]
  -[AVAssetDownloadSession _addFigAssetListeners]
  -[AVAssetDownloadSession _removeFigAssetListeners]
  -[AVAssetDownloadSession _figPlaybackItemNotificationNames]


AVPlayerItemOutputInternal : NSObject

AVPlayerItemOutput : NSObject
 @property  BOOL suppressesPlayerRendering

  // instance methods
  -[AVPlayerItemOutput dealloc]
  -[AVPlayerItemOutput _attachToPlayerItem:]
  -[AVPlayerItemOutput _weakReference]
  -[AVPlayerItemOutput init]
  -[AVPlayerItemOutput _detachFromPlayerItem]
  -[AVPlayerItemOutput _itemTimeForHostTimeAsCMTime:]
  -[AVPlayerItemOutput itemTimeForHostTime:]
  -[AVPlayerItemOutput itemTimeForMachAbsoluteTime:]
  -[AVPlayerItemOutput setSuppressesPlayerRendering:]
  -[AVPlayerItemOutput suppressesPlayerRendering]
  -[AVPlayerItemOutput _copyTimebase]
  -[AVPlayerItemOutput _setTimebase:]


AVPlayerItemVideoOutputInternal : NSObject

AVPlayerItemVideoOutput : AVPlayerItemOutput
 @property  <AVPlayerItemOutputPullDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue

  // instance methods
  -[AVPlayerItemVideoOutput delegate]
  -[AVPlayerItemVideoOutput dealloc]
  -[AVPlayerItemVideoOutput delegateQueue]
  -[AVPlayerItemVideoOutput initWithPixelBufferAttributes:]
  -[AVPlayerItemVideoOutput _attachToPlayerItem:]
  -[AVPlayerItemVideoOutput setDelegate:queue:]
  -[AVPlayerItemVideoOutput init]
  -[AVPlayerItemVideoOutput hasNewPixelBufferForItemTime:]
  -[AVPlayerItemVideoOutput copyPixelBufferForItemTime:itemTimeForDisplay:]
  -[AVPlayerItemVideoOutput _detachFromPlayerItem]
  -[AVPlayerItemVideoOutput setUpWithOutputSettings:outputSettingsArePixelBufferAttributes:withExceptionReason:]
  -[AVPlayerItemVideoOutput _copyPixelBufferForItemTimeWithOptions:itemTimeForDisplay:options:]
  -[AVPlayerItemVideoOutput _visualContext]
  -[AVPlayerItemVideoOutput _dispatchOutputSequenceWasFlushed]
  -[AVPlayerItemVideoOutput setSuppressesPlayerRendering:]
  -[AVPlayerItemVideoOutput suppressesPlayerRendering]
  -[AVPlayerItemVideoOutput _setTimebase:]
  -[AVPlayerItemVideoOutput clientStateOnRequestedMediaDataChangeNotification]
  -[AVPlayerItemVideoOutput initWithOutputSettings:]
  -[AVPlayerItemVideoOutput _pixelBufferAttributes]
  -[AVPlayerItemVideoOutput earliestAvailablePixelBufferItemTime]
  -[AVPlayerItemVideoOutput requestNotificationOfMediaDataChangeWithAdvanceInterval:]
  -[AVPlayerItemVideoOutput requestNotificationOfMediaDataChangeAsSoonAsPossible]
  -[AVPlayerItemVideoOutput copyPixelBufferForItemTime:remove:itemTimeForDisplay:]
  -[AVPlayerItemVideoOutput _respondToPlayerItemFormatDescriptionsChange]
  -[AVPlayerItemVideoOutput _setTagBuffersWithConversionInformation]
  -[AVPlayerItemVideoOutput _stopObservingTimebaseNotificationsForTimebase:]
  -[AVPlayerItemVideoOutput _startObservingTimebaseNotificationsForTimebase:]
  -[AVPlayerItemVideoOutput _dispatchOutputMediaDataWillChange]


AVSampleBufferVideoRenderer : NSObject <AVMediaDataRequesterConsumer, AVFigVideoQueueFactory, AVQueuedSampleBufferRenderingInternal>
 @property  BOOL outputObscuredDueToInsufficientExternalProtection
 @property  BOOL preventsCapture
 @property  BOOL preventsDisplaySleepDuringVideoPlayback
 @property  NSArray *outputs
 @property  NSString *STSLabel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVSampleBufferVideoRenderer automaticallyNotifiesObserversForKey:]
  +[AVSampleBufferVideoRenderer initialize]

  // instance methods
  -[AVSampleBufferVideoRenderer stopRequestingMediaData]
  -[AVSampleBufferVideoRenderer requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVSampleBufferVideoRenderer setSTSLabel:]
  -[AVSampleBufferVideoRenderer isReadyForMoreMediaData]
  -[AVSampleBufferVideoRenderer error]
  -[AVSampleBufferVideoRenderer status]
  -[AVSampleBufferVideoRenderer dealloc]
  -[AVSampleBufferVideoRenderer .cxx_destruct]
  -[AVSampleBufferVideoRenderer outputs]
  -[AVSampleBufferVideoRenderer setToneMapToStandardDynamicRange:]
  -[AVSampleBufferVideoRenderer addOutput:]
  -[AVSampleBufferVideoRenderer flush]
  -[AVSampleBufferVideoRenderer init]
  -[AVSampleBufferVideoRenderer removeOutput:]
  -[AVSampleBufferVideoRenderer setPreventsDisplaySleepDuringVideoPlayback:]
  -[AVSampleBufferVideoRenderer _displayLayer]
  -[AVSampleBufferVideoRenderer _STSLabel]
  -[AVSampleBufferVideoRenderer videoPerformanceMetrics]
  -[AVSampleBufferVideoRenderer copyDisplayedPixelBuffer]
  -[AVSampleBufferVideoRenderer contentKeySession]
  -[AVSampleBufferVideoRenderer preventsDisplaySleepDuringVideoPlayback]
  -[AVSampleBufferVideoRenderer outputObscuredDueToInsufficientExternalProtection]
  -[AVSampleBufferVideoRenderer _didFinishSuspension:]
  -[AVSampleBufferVideoRenderer addVideoTarget:]
  -[AVSampleBufferVideoRenderer timebase]
  -[AVSampleBufferVideoRenderer _refreshAboveHighWaterLevel]
  -[AVSampleBufferVideoRenderer copyFigSampleBufferAudioRenderer:]
  -[AVSampleBufferVideoRenderer setRenderSynchronizer:error:]
  -[AVSampleBufferVideoRenderer enqueueSampleBuffer:]
  -[AVSampleBufferVideoRenderer hasSufficientMediaDataForReliablePlaybackStart]
  -[AVSampleBufferVideoRenderer createVideoQueue:]
  -[AVSampleBufferVideoRenderer setControlTimebase:]
  -[AVSampleBufferVideoRenderer _setSynchronizerTimebase:error:]
  -[AVSampleBufferVideoRenderer _readOnlyVideoQueueTimebase]
  -[AVSampleBufferVideoRenderer _initializeTimebases]
  -[AVSampleBufferVideoRenderer _createVideoQueue:errorStep:]
  -[AVSampleBufferVideoRenderer _isCreateVideoQueueErrorRetryable:]
  -[AVSampleBufferVideoRenderer _copyVideoQueue]
  -[AVSampleBufferVideoRenderer _hasEverEnqueued]
  -[AVSampleBufferVideoRenderer _setStatus:error:]
  -[AVSampleBufferVideoRenderer _resetStatusWithOSStatus:]
  -[AVSampleBufferVideoRenderer _setOutputObscuredDueToInsufficientExternalProtection:]
  -[AVSampleBufferVideoRenderer currentFigVideoQueueFactory]
  -[AVSampleBufferVideoRenderer _addFigVideoQueueListeners]
  -[AVSampleBufferVideoRenderer _removeFigVideoQueueListeners]
  -[AVSampleBufferVideoRenderer _setRequiresFlushToResumeDecoding:]
  -[AVSampleBufferVideoRenderer _setCreateVideoQueueFailedWithOSStatus:]
  -[AVSampleBufferVideoRenderer _createVideoQueueFailed]
  -[AVSampleBufferVideoRenderer controlTimebase]
  -[AVSampleBufferVideoRenderer setDisplayLayerVisibility:]
  -[AVSampleBufferVideoRenderer _STSLabelPublisher]
  -[AVSampleBufferVideoRenderer setContentKeySession:]
  -[AVSampleBufferVideoRenderer attachToContentKeySession:contentKeyBoss:failedSinceAlreadyAttachedToAnotherSession:]
  -[AVSampleBufferVideoRenderer attachedToExternalContentKeySession]
  -[AVSampleBufferVideoRenderer _enqueueSingleSampleBuffer:bufferEnqueueingInfo:]
  -[AVSampleBufferVideoRenderer enqueueSampleBuffer:bufferEnqueueingInfo:]
  -[AVSampleBufferVideoRenderer flushAndRemoveImage]
  -[AVSampleBufferVideoRenderer flushWithRemovalOfDisplayedImage:completionHandler:]
  -[AVSampleBufferVideoRenderer _flushComplete]
  -[AVSampleBufferVideoRenderer _callOldPrerollCompletionHandlerWithSuccess:andSetNewPrerollCompletionHandler:forRequestID:]
  -[AVSampleBufferVideoRenderer _completedDecodeForPrerollForRequestID:]
  -[AVSampleBufferVideoRenderer prerollDecodeWithCompletionHandler:]
  -[AVSampleBufferVideoRenderer requiresFlushToResumeDecoding]
  -[AVSampleBufferVideoRenderer addSampleBufferDisplayLayer:]
  -[AVSampleBufferVideoRenderer _updateVideoTargetsOnVideoQueue]
  -[AVSampleBufferVideoRenderer _setContentLayerOnFigVideoQueue:]
  -[AVSampleBufferVideoRenderer setPreventsCapture:]
  -[AVSampleBufferVideoRenderer preventsCapture]
  -[AVSampleBufferVideoRenderer _setUpcomingPresentationTimeExpectations:minimumPresentationTime:]
  -[AVSampleBufferVideoRenderer expectMinimumUpcomingSampleBufferPresentationTime:]
  -[AVSampleBufferVideoRenderer expectMonotonicallyIncreasingUpcomingSampleBufferPresentationTimes]
  -[AVSampleBufferVideoRenderer resetUpcomingSampleBufferPresentationTimeExpectations]
  -[AVSampleBufferVideoRenderer _updateVideoOutputs]


AVAPSyncControllerOutputDeviceImpl : NSObject <AVOutputDeviceImpl>
 @property  <AVOutputDeviceImpl> *secondaryImpl
 @property  <AVOutputDeviceImplSupport> *implEventListener
 @property  NSString *name
 @property  NSString *ID
 @property  long long deviceType
 @property  long long deviceSubType
 @property  long long clusterType
 @property  long long configuredClusterSize
 @property  NSString *manufacturer
 @property  NSString *modelID
 @property  NSString *serialNumber
 @property  NSString *firmwareVersion
 @property  NSData *identifyingMACAddress
 @property  NSArray *clusteredDeviceDescriptions
 @property  NSArray *activatedDeviceClusterMembers
 @property  NSArray *allClusterMembers
 @property  BOOL isClusterLeader
 @property  NSString *clusterID
 @property  BOOL producesLowFidelityAudio
 @property  BOOL appleAccessory
 @property  BOOL eligibleToBePredictedOutputDevice
 @property  NSNumber *batteryLevel
 @property  NSNumber *caseBatteryLevel
 @property  NSNumber *leftBatteryLevel
 @property  NSNumber *rightBatteryLevel
 @property  NSNumber *supportsDataOverACLProtocol
 @property  NSNumber *isInEar
 @property  NSDictionary *airPlayProperties
 @property  BOOL inUseByPairedDevice
 @property  NSArray *connectedPairedDevices
 @property  unsigned long deviceFeatures
 @property  BOOL requiresAuthorization
 @property  BOOL automaticallyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL onlyAllowsConnectionsFromPeersInHomeGroup
 @property  BOOL canAccessRemoteAssets
 @property  BOOL canAccessAppleMusic
 @property  BOOL canAccessiCloudMusicLibrary
 @property  BOOL supportsBufferedAirPlay
 @property  float volume
 @property  BOOL canSetVolume
 @property  long long volumeControlType
 @property  BOOL canBeGrouped
 @property  NSString *groupID
 @property  NSString *proposedGroupID
 @property  BOOL canBeGroupLeader
 @property  BOOL isGroupLeader
 @property  BOOL participatesInGroupPlayback
 @property  BOOL groupContainsGroupLeader
 @property  NSString *logicalDeviceID
 @property  BOOL isLogicalDeviceLeader
 @property  BOOL canCommunicateWithAllLogicalDeviceMembers
 @property  BOOL canRelayCommunicationChannel
 @property  BOOL canPlayEncryptedProgressiveDownloadAssets
 @property  BOOL canFetchMediaDataFromSender
 @property  BOOL presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets
 @property  BOOL supportsBluetoothSharing
 @property  long long HAPConformance
 @property  BOOL supportsHeadTrackedSpatialAudio
 @property  BOOL allowsHeadTrackedSpatialAudio
 @property  NSString *headTrackedSpatialAudioMode
 @property  BOOL headTrackedSpatialAudioActive
 @property  NSArray *availableBluetoothListeningModes
 @property  NSString *currentBluetoothListeningMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAPSyncControllerOutputDeviceImpl localDeviceWithCompletion:]
  +[AVAPSyncControllerOutputDeviceImpl registerLocalDeviceDidChangeListener:]

  // instance methods
  -[AVAPSyncControllerOutputDeviceImpl deviceSubType]
  -[AVAPSyncControllerOutputDeviceImpl serialNumber]
  -[AVAPSyncControllerOutputDeviceImpl logicalDeviceID]
  -[AVAPSyncControllerOutputDeviceImpl allowsHeadTrackedSpatialAudio]
  -[AVAPSyncControllerOutputDeviceImpl isInEar]
  -[AVAPSyncControllerOutputDeviceImpl isAppleAccessory]
  -[AVAPSyncControllerOutputDeviceImpl increaseVolumeByCount:]
  -[AVAPSyncControllerOutputDeviceImpl canSetVolume]
  -[AVAPSyncControllerOutputDeviceImpl isGroupLeader]
  -[AVAPSyncControllerOutputDeviceImpl clusterType]
  -[AVAPSyncControllerOutputDeviceImpl currentBluetoothListeningMode]
  -[AVAPSyncControllerOutputDeviceImpl supportsBluetoothSharing]
  -[AVAPSyncControllerOutputDeviceImpl canAccessRemoteAssets]
  -[AVAPSyncControllerOutputDeviceImpl supportsBufferedAirPlay]
  -[AVAPSyncControllerOutputDeviceImpl airPlayProperties]
  -[AVAPSyncControllerOutputDeviceImpl isClusterLeader]
  -[AVAPSyncControllerOutputDeviceImpl batteryLevel]
  -[AVAPSyncControllerOutputDeviceImpl modelID]
  -[AVAPSyncControllerOutputDeviceImpl canRelayCommunicationChannel]
  -[AVAPSyncControllerOutputDeviceImpl availableBluetoothListeningModes]
  -[AVAPSyncControllerOutputDeviceImpl canFetchMediaDataFromSender]
  -[AVAPSyncControllerOutputDeviceImpl canCommunicateWithAllLogicalDeviceMembers]
  -[AVAPSyncControllerOutputDeviceImpl configuredClusterSize]
  -[AVAPSyncControllerOutputDeviceImpl groupContainsGroupLeader]
  -[AVAPSyncControllerOutputDeviceImpl canPlayEncryptedProgressiveDownloadAssets]
  -[AVAPSyncControllerOutputDeviceImpl canAccessiCloudMusicLibrary]
  -[AVAPSyncControllerOutputDeviceImpl firmwareVersion]
  -[AVAPSyncControllerOutputDeviceImpl caseBatteryLevel]
  -[AVAPSyncControllerOutputDeviceImpl connectedPairedDevices]
  -[AVAPSyncControllerOutputDeviceImpl requiresAuthorization]
  -[AVAPSyncControllerOutputDeviceImpl onlyAllowsConnectionsFromPeersInHomeGroup]
  -[AVAPSyncControllerOutputDeviceImpl ID]
  -[AVAPSyncControllerOutputDeviceImpl canAccessAppleMusic]
  -[AVAPSyncControllerOutputDeviceImpl implEventListener]
  -[AVAPSyncControllerOutputDeviceImpl groupID]
  -[AVAPSyncControllerOutputDeviceImpl setSecondDisplayMode:completionHandler:]
  -[AVAPSyncControllerOutputDeviceImpl allClusterMembers]
  -[AVAPSyncControllerOutputDeviceImpl clusterID]
  -[AVAPSyncControllerOutputDeviceImpl rightBatteryLevel]
  -[AVAPSyncControllerOutputDeviceImpl dealloc]
  -[AVAPSyncControllerOutputDeviceImpl decreaseVolumeByCount:]
  -[AVAPSyncControllerOutputDeviceImpl supportsFitnessDataDestination]
  -[AVAPSyncControllerOutputDeviceImpl headTrackedSpatialAudioMode]
  -[AVAPSyncControllerOutputDeviceImpl canBeGrouped]
  -[AVAPSyncControllerOutputDeviceImpl supportsHeadTrackedSpatialAudio]
  -[AVAPSyncControllerOutputDeviceImpl isHeadTrackedSpatialAudioActive]
  -[AVAPSyncControllerOutputDeviceImpl .cxx_destruct]
  -[AVAPSyncControllerOutputDeviceImpl automaticallyAllowsConnectionsFromPeersInHomeGroup]
  -[AVAPSyncControllerOutputDeviceImpl producesLowFidelityAudio]
  -[AVAPSyncControllerOutputDeviceImpl participatesInGroupPlayback]
  -[AVAPSyncControllerOutputDeviceImpl setAllowsHeadTrackedSpatialAudio:error:]
  -[AVAPSyncControllerOutputDeviceImpl setVolume:]
  -[AVAPSyncControllerOutputDeviceImpl setCurrentBluetoothListeningMode:error:]
  -[AVAPSyncControllerOutputDeviceImpl deviceType]
  -[AVAPSyncControllerOutputDeviceImpl setImplEventListener:]
  -[AVAPSyncControllerOutputDeviceImpl volume]
  -[AVAPSyncControllerOutputDeviceImpl HAPConformance]
  -[AVAPSyncControllerOutputDeviceImpl clusteredDeviceDescriptions]
  -[AVAPSyncControllerOutputDeviceImpl proposedGroupID]
  -[AVAPSyncControllerOutputDeviceImpl identifyingMACAddress]
  -[AVAPSyncControllerOutputDeviceImpl configureUsingBlock:options:completionHandler:]
  -[AVAPSyncControllerOutputDeviceImpl isEligibleToBePredictedOutputDevice]
  -[AVAPSyncControllerOutputDeviceImpl _volumeDidChangeForEndpointWithID:]
  -[AVAPSyncControllerOutputDeviceImpl name]
  -[AVAPSyncControllerOutputDeviceImpl manufacturer]
  -[AVAPSyncControllerOutputDeviceImpl canBeGroupLeader]
  -[AVAPSyncControllerOutputDeviceImpl supportsDataOverACLProtocol]
  -[AVAPSyncControllerOutputDeviceImpl isLogicalDeviceLeader]
  -[AVAPSyncControllerOutputDeviceImpl setSecondDisplayEnabled:]
  -[AVAPSyncControllerOutputDeviceImpl deviceFeatures]
  -[AVAPSyncControllerOutputDeviceImpl setHeadTrackedSpatialAudioMode:error:]
  -[AVAPSyncControllerOutputDeviceImpl volumeControlType]
  -[AVAPSyncControllerOutputDeviceImpl leftBatteryLevel]
  -[AVAPSyncControllerOutputDeviceImpl isInUseByPairedDevice]
  -[AVAPSyncControllerOutputDeviceImpl isEqual:]
  -[AVAPSyncControllerOutputDeviceImpl activatedDeviceClusterMembers]
  -[AVAPSyncControllerOutputDeviceImpl presentsOptimizedUserInterfaceWhenPlayingFetchedAudioOnlyAssets]
  -[AVAPSyncControllerOutputDeviceImpl initWithSyncController:secondaryImpl:]
  -[AVAPSyncControllerOutputDeviceImpl _volumeControlSupportedDidChangeForEndpointWithID:]
  -[AVAPSyncControllerOutputDeviceImpl _volumeControlTypeDidChangeForEndpointWithID:]
  -[AVAPSyncControllerOutputDeviceImpl _proposedGroupIDDidChangeForEndpointWithID:]
  -[AVAPSyncControllerOutputDeviceImpl secondaryImpl]


AVSampleBufferDisplayLayerContentLayer : CALayer
  // class methods
  +[AVSampleBufferDisplayLayerContentLayer defaultActionForKey:]

  // instance methods
  -[AVSampleBufferDisplayLayerContentLayer actionForKey:]


AVSampleBufferDisplayLayer : CALayer <AVContentKeyRecipient, AVContentKeyRecipientInternal, AVQueuedSampleBufferRendering, AVMediaDataRequesterConsumer, AVQueuedSampleBufferRenderingInternal>
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  long long status
 @property  NSError *error
 @property  BOOL requiresFlushToResumeDecoding
 @property  BOOL readyForMoreMediaData
 @property  ^{OpaqueCMTimebase=} timebase
 @property  BOOL hasSufficientMediaDataForReliablePlaybackStart
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL outputObscuredDueToInsufficientExternalProtection
 @property  BOOL preventsCapture
 @property  BOOL preventsDisplaySleepDuringVideoPlayback
 @property  AVSampleBufferVideoOutput *output
 @property  AVSampleBufferVideoRenderer *sampleBufferVideoRenderer
 @property  ^{OpaqueCMTimebase=} controlTimebase
 @property  NSString *videoGravity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVSampleBufferDisplayLayer keyPathsForValuesAffectingStatus]
  +[AVSampleBufferDisplayLayer keyPathsForValuesAffectingError]
  +[AVSampleBufferDisplayLayer keyPathsForValuesAffectingOutputObscuredDueToInsufficientExternalProtection]

  // instance methods
  -[AVSampleBufferDisplayLayer stopRequestingMediaData]
  -[AVSampleBufferDisplayLayer requestMediaDataWhenReadyOnQueue:usingBlock:]
  -[AVSampleBufferDisplayLayer videoGravity]
  -[AVSampleBufferDisplayLayer setSTSLabel:]
  -[AVSampleBufferDisplayLayer layerDidBecomeVisible:]
  -[AVSampleBufferDisplayLayer layoutSublayers]
  -[AVSampleBufferDisplayLayer isReadyForMoreMediaData]
  -[AVSampleBufferDisplayLayer error]
  -[AVSampleBufferDisplayLayer expire]
  -[AVSampleBufferDisplayLayer status]
  -[AVSampleBufferDisplayLayer dealloc]
  -[AVSampleBufferDisplayLayer setVideoGravity:]
  -[AVSampleBufferDisplayLayer setOutput:]
  -[AVSampleBufferDisplayLayer setBounds:]
  -[AVSampleBufferDisplayLayer setToneMapToStandardDynamicRange:]
  -[AVSampleBufferDisplayLayer flush]
  -[AVSampleBufferDisplayLayer init]
  -[AVSampleBufferDisplayLayer output]
  -[AVSampleBufferDisplayLayer setPreventsDisplaySleepDuringVideoPlayback:]
  -[AVSampleBufferDisplayLayer _contentLayer]
  -[AVSampleBufferDisplayLayer _STSLabel]
  -[AVSampleBufferDisplayLayer videoPerformanceMetrics]
  -[AVSampleBufferDisplayLayer videoRect]
  -[AVSampleBufferDisplayLayer copyDisplayedPixelBuffer]
  -[AVSampleBufferDisplayLayer mayRequireContentKeysForMediaDataProcessing]
  -[AVSampleBufferDisplayLayer _attachToContentKeySession:contentKeyBoss:failedSinceAlreadyAttachedToAnotherSession:]
  -[AVSampleBufferDisplayLayer contentKeySession]
  -[AVSampleBufferDisplayLayer _attachedToExternalContentKeySession]
  -[AVSampleBufferDisplayLayer preventsDisplaySleepDuringVideoPlayback]
  -[AVSampleBufferDisplayLayer outputObscuredDueToInsufficientExternalProtection]
  -[AVSampleBufferDisplayLayer timebase]
  -[AVSampleBufferDisplayLayer copyFigSampleBufferAudioRenderer:]
  -[AVSampleBufferDisplayLayer setRenderSynchronizer:error:]
  -[AVSampleBufferDisplayLayer enqueueSampleBuffer:]
  -[AVSampleBufferDisplayLayer hasSufficientMediaDataForReliablePlaybackStart]
  -[AVSampleBufferDisplayLayer setControlTimebase:]
  -[AVSampleBufferDisplayLayer controlTimebase]
  -[AVSampleBufferDisplayLayer flushAndRemoveImage]
  -[AVSampleBufferDisplayLayer flushWithRemovalOfDisplayedImage:completionHandler:]
  -[AVSampleBufferDisplayLayer prerollDecodeWithCompletionHandler:]
  -[AVSampleBufferDisplayLayer requiresFlushToResumeDecoding]
  -[AVSampleBufferDisplayLayer setPreventsCapture:]
  -[AVSampleBufferDisplayLayer preventsCapture]
  -[AVSampleBufferDisplayLayer expectMinimumUpcomingSampleBufferPresentationTime:]
  -[AVSampleBufferDisplayLayer expectMonotonicallyIncreasingUpcomingSampleBufferPresentationTimes]
  -[AVSampleBufferDisplayLayer resetUpcomingSampleBufferPresentationTimeExpectations]
  -[AVSampleBufferDisplayLayer _updateLayerTreeGeometryWithVideoGravity:presentationSize:videoGravityShouldTriggerAnimation:]
  -[AVSampleBufferDisplayLayer _updatePresentationSize:]
  -[AVSampleBufferDisplayLayer _destRectForAspectRatio:]
  -[AVSampleBufferDisplayLayer postVideoRectDidChangeNotification]
  -[AVSampleBufferDisplayLayer makeVideoRenderer]
  -[AVSampleBufferDisplayLayer _sampleBufferVideoRenderer]


AVPixelBufferAttributeMediator : NSObject
  // instance methods
  -[AVPixelBufferAttributeMediator setRequestedPixelBufferAttributes:forKey:]
  -[AVPixelBufferAttributeMediator dealloc]
  -[AVPixelBufferAttributeMediator removeRequestedPixelBufferAttributesAttributesForKey:]
  -[AVPixelBufferAttributeMediator mediatedPixelBufferAttributes]
  -[AVPixelBufferAttributeMediator setLayersAreSuppressed:]
  -[AVPixelBufferAttributeMediator init]


AVAssetResourceLoaderRemoteHandlerContext : NSObject <NSSecureCoding>
 @property  NSObject<OS_xpc_object> *endpoint
 @property  unsigned long customURLHandlerObjectID
 @property  unsigned long authHandlerObjectID
 @property  unsigned long contentKeySessionHandlerObjectID

  // class methods
  +[AVAssetResourceLoaderRemoteHandlerContext supportsSecureCoding]

  // instance methods
  -[AVAssetResourceLoaderRemoteHandlerContext encodeWithCoder:]
  -[AVAssetResourceLoaderRemoteHandlerContext endpoint]
  -[AVAssetResourceLoaderRemoteHandlerContext dealloc]
  -[AVAssetResourceLoaderRemoteHandlerContext initWithCoder:]
  -[AVAssetResourceLoaderRemoteHandlerContext initWithEndpoint:customURLHandlerObjectID:authHandlerObjectID:contentKeySessionHandlerObjectID:]
  -[AVAssetResourceLoaderRemoteHandlerContext customURLHandlerObjectID]
  -[AVAssetResourceLoaderRemoteHandlerContext authHandlerObjectID]
  -[AVAssetResourceLoaderRemoteHandlerContext contentKeySessionHandlerObjectID]


AVURLAuthenticationChallenge : NSURLAuthenticationChallenge <AVAssetResourceLoaderRequest>
 @property  unsigned long _requestID
 @property  ^{__CFDictionary=} _requestInfo
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVURLAuthenticationChallenge _selectorForInformingDelegateOfCancellationByFig]

  // instance methods
  -[AVURLAuthenticationChallenge initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:]
  -[AVURLAuthenticationChallenge _requestInfo]
  -[AVURLAuthenticationChallenge dealloc]
  -[AVURLAuthenticationChallenge initWithAuthenticationChallenge:sender:requestInfo:requestID:]
  -[AVURLAuthenticationChallenge _weakReference]
  -[AVURLAuthenticationChallenge initWithAuthenticationChallenge:sender:]
  -[AVURLAuthenticationChallenge _shouldInformDelegateOfFigCancellation]
  -[AVURLAuthenticationChallenge _performCancellationByClient]
  -[AVURLAuthenticationChallenge _requestID]
  -[AVURLAuthenticationChallenge init]


AVAssetResourceLoaderInternal : NSObject

AVAssetResourceLoader : NSObject <NSURLAuthenticationChallengeSender>
 @property  BOOL preloadsEligibleContentKeys
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NSURLSessionDataDelegate> *URLSessionDataDelegate
 @property  NSOperationQueue *URLSessionDataDelegateQueue
 @property  NSURLSession *URLSession
 @property  <AVAssetResourceLoaderDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue

  // instance methods
  -[AVAssetResourceLoader URLSession]
  -[AVAssetResourceLoader setURLSession:]
  -[AVAssetResourceLoader continueWithoutCredentialForAuthenticationChallenge:]
  -[AVAssetResourceLoader cancelAuthenticationChallenge:]
  -[AVAssetResourceLoader rejectProtectionSpaceAndContinueWithChallenge:]
  -[AVAssetResourceLoader cancelLoading]
  -[AVAssetResourceLoader useCredential:forAuthenticationChallenge:]
  -[AVAssetResourceLoader _sendAuthResponseForChallenge:disposition:credential:error:]
  -[AVAssetResourceLoader performDefaultHandlingForAuthenticationChallenge:]
  -[AVAssetResourceLoader _performDelegateCallbackSynchronouslyIfCurrentDelegateQueueIsQueue:delegateCallbackBlock:]
  -[AVAssetResourceLoader preloadsEligibleContentKeys]
  -[AVAssetResourceLoader delegate]
  -[AVAssetResourceLoader initWithURLRequestHelper:asset:]
  -[AVAssetResourceLoader dealloc]
  -[AVAssetResourceLoader delegateQueue]
  -[AVAssetResourceLoader URLSessionDataDelegateQueue]
  -[AVAssetResourceLoader _cancelRequestWithKey:fallbackHandler:]
  -[AVAssetResourceLoader _poseAuthenticationChallengeWithRequestInfo:requestID:challenge:]
  -[AVAssetResourceLoader cachedContentInformationForURL:]
  -[AVAssetResourceLoader _customURLHandler]
  -[AVAssetResourceLoader asset]
  -[AVAssetResourceLoader _getDelegateOnStateQueue]
  -[AVAssetResourceLoader _cancelRequest:requestID:]
  -[AVAssetResourceLoader cacheContentInformation:forURL:]
  -[AVAssetResourceLoader _performDelegateSelector:withObject:representingNewRequest:key:fallbackHandler:]
  -[AVAssetResourceLoader _setDelegateOnStateQueue:]
  -[AVAssetResourceLoader _setContentKeySessionCustomURLHandler:]
  -[AVAssetResourceLoader _authHandler]
  -[AVAssetResourceLoader _customURLLoader]
  -[AVAssetResourceLoader URLSessionDataDelegate]
  -[AVAssetResourceLoader _poseAuthenticationChallengeWithKey:challenge:fallbackHandler:]
  -[AVAssetResourceLoader remoteCustomURLHandlerContextForPID:]
  -[AVAssetResourceLoader setDelegate:queue:]
  -[AVAssetResourceLoader _handleRequest:requestID:willHandleRequest:]
  -[AVAssetResourceLoader _issueLoadingRequestWithKey:loadingRequest:isRenewalRequest:fallbackHandler:]
  -[AVAssetResourceLoader initWithURLRequestHelper:asset:remoteCustomURLHandlerContext:]
  -[AVAssetResourceLoader URLRequestHelper]
  -[AVAssetResourceLoader stateQueue]
  -[AVAssetResourceLoader _contentKeySessionCustomURLHandler]
  -[AVAssetResourceLoader _noteFinishingOfRequest:]
  -[AVAssetResourceLoader setPreloadsEligibleContentKeys:]
  -[AVAssetResourceLoader init]


AVAssetResourceLoadingContentInformationRequestInternal : NSObject

AVAssetResourceLoadingContentInformationRequest : NSObject
 @property  NSString *contentType
 @property  NSArray *allowedContentTypes
 @property  long long contentLength
 @property  BOOL byteRangeAccessSupported
 @property  NSDate *renewalDate
 @property  BOOL entireLengthAvailableOnDemand

  // instance methods
  -[AVAssetResourceLoadingContentInformationRequest propertyList]
  -[AVAssetResourceLoadingContentInformationRequest contentLength]
  -[AVAssetResourceLoadingContentInformationRequest contentType]
  -[AVAssetResourceLoadingContentInformationRequest setEntireLengthAvailableOnDemand:]
  -[AVAssetResourceLoadingContentInformationRequest allowedContentTypes]
  -[AVAssetResourceLoadingContentInformationRequest renewalDate]
  -[AVAssetResourceLoadingContentInformationRequest isDiskCachingPermitted]
  -[AVAssetResourceLoadingContentInformationRequest dealloc]
  -[AVAssetResourceLoadingContentInformationRequest isEntireLengthAvailableOnDemand]
  -[AVAssetResourceLoadingContentInformationRequest setRenewalDate:]
  -[AVAssetResourceLoadingContentInformationRequest initWithLoadingRequest:allowedContentTypes:]
  -[AVAssetResourceLoadingContentInformationRequest isByteRangeAccessSupported]
  -[AVAssetResourceLoadingContentInformationRequest setContentLength:]
  -[AVAssetResourceLoadingContentInformationRequest setDiskCachingPermitted:]
  -[AVAssetResourceLoadingContentInformationRequest setContentType:]
  -[AVAssetResourceLoadingContentInformationRequest setByteRangeAccessSupported:]
  -[AVAssetResourceLoadingContentInformationRequest init]


AVAssetResourceLoadingDataRequestInternal : NSObject

AVAssetResourceLoadingDataRequest : NSObject
 @property  long long requestedOffset
 @property  long long requestedLength
 @property  BOOL requestsAllDataToEndOfResource
 @property  long long currentOffset

  // instance methods
  -[AVAssetResourceLoadingDataRequest initWithLoadingRequest:requestedOffset:requestedLength:requestsAllDataToEndOfResource:canSupplyIncrementalDataImmediately:]
  -[AVAssetResourceLoadingDataRequest requestedOffset]
  -[AVAssetResourceLoadingDataRequest _requestInfo]
  -[AVAssetResourceLoadingDataRequest requestedLength]
  -[AVAssetResourceLoadingDataRequest dealloc]
  -[AVAssetResourceLoadingDataRequest requestsAllDataToEndOfResource]
  -[AVAssetResourceLoadingDataRequest _loadingRequest]
  -[AVAssetResourceLoadingDataRequest currentOffset]
  -[AVAssetResourceLoadingDataRequest respondWithData:]
  -[AVAssetResourceLoadingDataRequest init]


AVAssetResourceLoadingRequestInternal : NSObject

AVAssetResourceLoadingRequest : NSObject <AVAssetResourceLoaderRequest>
 @property  NSURLRequest *request
 @property  BOOL finished
 @property  BOOL cancelled
 @property  AVAssetResourceLoadingContentInformationRequest *contentInformationRequest
 @property  AVAssetResourceLoadingDataRequest *dataRequest
 @property  NSURLResponse *response
 @property  NSURLRequest *redirect
 @property  AVAssetResourceLoadingRequestor *requestor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVAssetResourceLoadingRequest _selectorForInformingDelegateOfCancellationByFig]

  // instance methods
  -[AVAssetResourceLoadingRequest requestor]
  -[AVAssetResourceLoadingRequest isFinished]
  -[AVAssetResourceLoadingRequest _requestInfo]
  -[AVAssetResourceLoadingRequest dealloc]
  -[AVAssetResourceLoadingRequest finished]
  -[AVAssetResourceLoadingRequest _customURLHandler]
  -[AVAssetResourceLoadingRequest setResponse:]
  -[AVAssetResourceLoadingRequest _customURLLoader]
  -[AVAssetResourceLoadingRequest _weakReference]
  -[AVAssetResourceLoadingRequest response]
  -[AVAssetResourceLoadingRequest isCancelled]
  -[AVAssetResourceLoadingRequest _contentKeySessionCustomURLHandler]
  -[AVAssetResourceLoadingRequest _shouldInformDelegateOfFigCancellation]
  -[AVAssetResourceLoadingRequest _performCancellationByClient]
  -[AVAssetResourceLoadingRequest request]
  -[AVAssetResourceLoadingRequest _requestID]
  -[AVAssetResourceLoadingRequest init]
  -[AVAssetResourceLoadingRequest _resourceLoader]
  -[AVAssetResourceLoadingRequest finishLoading]
  -[AVAssetResourceLoadingRequest contentInformationRequest]
  -[AVAssetResourceLoadingRequest dataRequest]
  -[AVAssetResourceLoadingRequest finishLoadingWithError:]
  -[AVAssetResourceLoadingRequest redirect]
  -[AVAssetResourceLoadingRequest initWithResourceLoader:requestInfo:requestID:]
  -[AVAssetResourceLoadingRequest initWithResourceLoader:URL:httpRequestHeaders:requestOffset:requestLength:allowedContentTypes:figCryptor:cryptorKeyRequestID:]
  -[AVAssetResourceLoadingRequest _tryToMarkAsCancelled]
  -[AVAssetResourceLoadingRequest _setContentInformationRequest:]
  -[AVAssetResourceLoadingRequest _setDataRequest:]
  -[AVAssetResourceLoadingRequest setRedirect:]
  -[AVAssetResourceLoadingRequest _getAndClearCachedData]
  -[AVAssetResourceLoadingRequest _appendToCachedData:]
  -[AVAssetResourceLoadingRequest _canSetOrUseCachedContentInformation]
  -[AVAssetResourceLoadingRequest _cacheContentInformation:]
  -[AVAssetResourceLoadingRequest _isRequestForContentKey]
  -[AVAssetResourceLoadingRequest serializableRepresentation]
  -[AVAssetResourceLoadingRequest _sendResponseInfoToCustomURLHandler]
  -[AVAssetResourceLoadingRequest _ensureResponseInfoSentToCustomURLHandler]
  -[AVAssetResourceLoadingRequest _sendDataToCustomURLHandler:]
  -[AVAssetResourceLoadingRequest _sendFinishLoadingToCustomURLHandlerWithError:]
  -[AVAssetResourceLoadingRequest _sendFinishLoadingToCustomURLHandler]
  -[AVAssetResourceLoadingRequest forwardRequestToContentKeySession]
  -[AVAssetResourceLoadingRequest finishLoadingWithResponse:data:redirect:]
  -[AVAssetResourceLoadingRequest keyRequestDataUsingCryptorForApp:contentIdentifier:options:performAsync:error:]
  -[AVAssetResourceLoadingRequest _contentKeySessionIsAttached]
  -[AVAssetResourceLoadingRequest streamingContentKeyRequestDataForApp:contentIdentifier:options:error:]
  -[AVAssetResourceLoadingRequest generateStreamingContentKeyRequestDataAsynchronouslyForApp:contentIdentifier:options:completionHandler:]
  -[AVAssetResourceLoadingRequest persistentContentKeyFromKeyVendorResponse:options:error:]


AVAssetResourceLoadingRequestorInternal : NSObject

AVAssetResourceRenewalRequest : AVAssetResourceLoadingRequest

AVAssetResourceLoadingRequestor : NSObject
 @property  BOOL providesExpiredSessionReports

  // instance methods
  -[AVAssetResourceLoadingRequestor dealloc]
  -[AVAssetResourceLoadingRequestor providesExpiredSessionReports]
  -[AVAssetResourceLoadingRequestor initWithRequestInfo:]


AVSampleBufferRenderSynchronizerInternal : NSObject

AVSampleBufferRenderSynchronizer : NSObject
 @property  NSArray *renderers
 @property  ^{OpaqueCMTimebase=} timebase
 @property  float rate
 @property  BOOL delaysRateChangeUntilHasSufficientMediaData

  // class methods
  +[AVSampleBufferRenderSynchronizer enableSTSLabels]
  +[AVSampleBufferRenderSynchronizer _makeSTSLabel]
  +[AVSampleBufferRenderSynchronizer _videoRendererForRenderer:]
  +[AVSampleBufferRenderSynchronizer currentFigRenderSynchronizerFactory]
  +[AVSampleBufferRenderSynchronizer setFigRenderSynchronizerFactory:forQueue:]

  // instance methods
  -[AVSampleBufferRenderSynchronizer currentTime]
  -[AVSampleBufferRenderSynchronizer rate]
  -[AVSampleBufferRenderSynchronizer setRate:]
  -[AVSampleBufferRenderSynchronizer dealloc]
  -[AVSampleBufferRenderSynchronizer renderers]
  -[AVSampleBufferRenderSynchronizer init]
  -[AVSampleBufferRenderSynchronizer setRate:time:atHostTime:]
  -[AVSampleBufferRenderSynchronizer addPeriodicTimeObserverForInterval:queue:usingBlock:]
  -[AVSampleBufferRenderSynchronizer addBoundaryTimeObserverForTimes:queue:usingBlock:]
  -[AVSampleBufferRenderSynchronizer removeTimeObserver:]
  -[AVSampleBufferRenderSynchronizer timebase]
  -[AVSampleBufferRenderSynchronizer _initializeTimebase]
  -[AVSampleBufferRenderSynchronizer setRate:time:]
  -[AVSampleBufferRenderSynchronizer setRate:time:atHostTime:error:]
  -[AVSampleBufferRenderSynchronizer _setRate:time:atHostTime:]
  -[AVSampleBufferRenderSynchronizer delaysRateChangeUntilHasSufficientMediaData]
  -[AVSampleBufferRenderSynchronizer setDelaysRateChangeUntilHasSufficientMediaData:]
  -[AVSampleBufferRenderSynchronizer _updateRateFromTimebase]
  -[AVSampleBufferRenderSynchronizer _addRenderer:error:]
  -[AVSampleBufferRenderSynchronizer addRenderer:]
  -[AVSampleBufferRenderSynchronizer _getTimebaseObserverForRenderer:]
  -[AVSampleBufferRenderSynchronizer _getClientCompletionHandlerForRenderer:]
  -[AVSampleBufferRenderSynchronizer _removeTimebaseObserverForRenderer:]
  -[AVSampleBufferRenderSynchronizer _storeObserver:clientCompletionHandler:forRenderer:]
  -[AVSampleBufferRenderSynchronizer _createOnceTimebaseObserverForRemovalOfRenderer:atTime:]
  -[AVSampleBufferRenderSynchronizer _scheduleTimedRendererRemovalAtTime:atTime:withClientCompletionHandler:]
  -[AVSampleBufferRenderSynchronizer removeRenderer:atTime:withCompletionHandler:]
  -[AVSampleBufferRenderSynchronizer removeRenderer:atTime:completionHandler:]
  -[AVSampleBufferRenderSynchronizer _performRendererRemoval:]
  -[AVSampleBufferRenderSynchronizer _canAddRendererInternal:error:]
  -[AVSampleBufferRenderSynchronizer _rendererConfigurationIsValid:]
  -[AVSampleBufferRenderSynchronizer _multipleAudioRenderersDisallowed]
  -[AVSampleBufferRenderSynchronizer _addedAudioRendererCount]
  -[AVSampleBufferRenderSynchronizer _addedAudioRendererCountInternal]


AVRemoteFigSampleBufferRenderSynchronizerFactory : NSObject <AVFigSampleBufferRenderSynchronizerFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVRemoteFigSampleBufferRenderSynchronizerFactory createRenderSynchronizerWithAllocator:options:error:]


AVTextStyleRuleInternal : NSObject

AVTextStyleRule : NSObject <NSCopying>
 @property  NSDictionary *textMarkupAttributes
 @property  NSString *textSelector

  // class methods
  +[AVTextStyleRule propertyListForTextStyleRules:]
  +[AVTextStyleRule textStyleRulesFromPropertyList:]
  +[AVTextStyleRule textStyleRuleWithTextMarkupAttributes:]
  +[AVTextStyleRule textStyleRuleWithTextMarkupAttributes:textSelector:]

  // instance methods
  -[AVTextStyleRule dealloc]
  -[AVTextStyleRule copyWithZone:]
  -[AVTextStyleRule isEqual:]
  -[AVTextStyleRule init]
  -[AVTextStyleRule textSelector]
  -[AVTextStyleRule textMarkupAttributes]
  -[AVTextStyleRule initWithTextMarkupAttributes:textSelector:]
  -[AVTextStyleRule initWithTextMarkupAttributes:]
  -[AVTextStyleRule _dictionaryPlistRepresentation]


AVPlayerMediaSelectionCriteria : NSObject
 @property  NSArray *preferredLanguages
 @property  NSArray *preferredMediaCharacteristics
 @property  NSArray *principalMediaCharacteristics

  // instance methods
  -[AVPlayerMediaSelectionCriteria dealloc]
  -[AVPlayerMediaSelectionCriteria preferredLanguages]
  -[AVPlayerMediaSelectionCriteria init]
  -[AVPlayerMediaSelectionCriteria initWithPreferredLanguages:preferredMediaCharacteristics:]
  -[AVPlayerMediaSelectionCriteria initWithPrincipalMediaCharacteristics:preferredLanguages:preferredMediaCharacteristics:]
  -[AVPlayerMediaSelectionCriteria initWithPreferredLanguages:preferredMediaCharacteristics:preferredMediaSubTypes:precludedMediaSubTypes:]
  -[AVPlayerMediaSelectionCriteria initWithPreferredLanguages:preferredMediaCharacteristics:preferredMediaSubTypes:precludedMediaSubTypes:preferMultichannelAudio:precludeMultichannelAudio:]
  -[AVPlayerMediaSelectionCriteria initWithPreferredLanguages:preferredMediaCharacteristics:fallbackPreferredLanguages:fallbackPreferredMediaCharacteristics:captionDisplayType:]
  -[AVPlayerMediaSelectionCriteria preferredMediaCharacteristics]
  -[AVPlayerMediaSelectionCriteria principalMediaCharacteristics]
  -[AVPlayerMediaSelectionCriteria preferredMediaSubTypes]
  -[AVPlayerMediaSelectionCriteria precludedMediaSubTypes]
  -[AVPlayerMediaSelectionCriteria preferMultichannelAudio]
  -[AVPlayerMediaSelectionCriteria precludeMultichannelAudio]
  -[AVPlayerMediaSelectionCriteria figDictionary]
  -[AVPlayerMediaSelectionCriteria initWithFigDictionary:]


AVPlayerItemLegibleOutputRealDependencyFactory : NSObject <AVPlayerItemLegibleOutputDependencyFactory>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVPlayerItemLegibleOutputRealDependencyFactory playerItemOutputHostForPlayerItem:]


AVPlayerItemLegibleOutputInternal : NSObject

AVPlayerItemLegibleOutput : AVPlayerItemOutput
 @property  <AVPlayerItemLegibleOutputPushDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  double advanceIntervalForDelegateInvocation

  // class methods
  +[AVPlayerItemLegibleOutput initialize]

  // instance methods
  -[AVPlayerItemLegibleOutput delegate]
  -[AVPlayerItemLegibleOutput dealloc]
  -[AVPlayerItemLegibleOutput delegateQueue]
  -[AVPlayerItemLegibleOutput _collectUncollectables]
  -[AVPlayerItemLegibleOutput _attachToPlayerItem:]
  -[AVPlayerItemLegibleOutput setDelegate:queue:]
  -[AVPlayerItemLegibleOutput init]
  -[AVPlayerItemLegibleOutput _detachFromPlayerItem]
  -[AVPlayerItemLegibleOutput advanceIntervalForDelegateInvocation]
  -[AVPlayerItemLegibleOutput setAdvanceIntervalForDelegateInvocation:]
  -[AVPlayerItemLegibleOutput _signalFlush]
  -[AVPlayerItemLegibleOutput setSuppressesPlayerRendering:]
  -[AVPlayerItemLegibleOutput suppressesPlayerRendering]
  -[AVPlayerItemLegibleOutput textStylingResolution]
  -[AVPlayerItemLegibleOutput initWithMediaSubtypesForNativeRepresentation:]
  -[AVPlayerItemLegibleOutput initWithDependencyFactory:mediaSubtypesForNativeRepresentation:]
  -[AVPlayerItemLegibleOutput _pushAttributedStrings:andSampleBuffers:atItemTime:]
  -[AVPlayerItemLegibleOutput _figLegibleOutputsDictionaryOptions]
  -[AVPlayerItemLegibleOutput setTextStylingResolution:]


AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory : NSObject <AVOutputDeviceDiscoverySessionFactory>
 @property  <AVFigRouteDiscovererFactory> *routeDiscovererFactory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory outputDeviceDiscoverySessionOfClass:withDeviceFeatures:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory dealloc]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory routeDiscovererFactory]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory initWithRouteDiscovererFactory:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionFactory init]


AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl : NSObject <AVOutputDeviceDiscoverySessionImpl>
 @property  ^{OpaqueFigRouteDiscoverer=} routeDiscoverer
 @property  AVOutputDeviceDiscoverySession *parentOutputDeviceDiscoverySession
 @property  AVAudioSession *targetAudioSession
 @property  AVOutputDeviceDiscoverySessionAvailableOutputDevices *availableOutputDevicesObject
 @property  BOOL devicePresenceDetected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl routeDiscoverer]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl devicePresenceDetected]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl _availableRoutesChanged]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl _routePresentChanged]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl _availableGroupsChanged]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl dealloc]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl .cxx_destruct]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl setTargetAudioSession:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl _endpointDescriptorChanged]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl parentOutputDeviceDiscoverySession]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl _serverDied]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl outputDeviceDiscoverySessionDidChangeDiscoveryMode:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl setParentOutputDeviceDiscoverySession:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl initWithFigRouteDiscovererCreator:syncController:]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl availableOutputDevicesObject]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl targetAudioSession]
  -[AVFigRouteDiscovererOutputDeviceDiscoverySessionImpl init]


AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl : NSObject <AVOutputDeviceDiscoverySessionAvailableOutputDevicesImpl>
 @property  NSArray *allDevices
 @property  NSArray *availableOutputDeviceGroups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl dealloc]
  -[AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl allDevices]
  -[AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl availableOutputDeviceGroups]
  -[AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl initWithRouteDescriptors:routeDiscoverer:syncController:]
  -[AVFigRouteDescriptorOutputDeviceDiscoverySessionAvailableOutputDevicesImpl init]


AVAsynchronousCIImageFilteringRequestInternal : NSObject
 @property  AVAsynchronousVideoCompositionRequest *compositingRequest
 @property  @? cancellationTest
 @property  @? defaultCIContextProvider
 @property  @? completionHandler
 @property  CIImage *sourceCIImage
 @property  ^{__CVBuffer=} sourcePBuf

  // instance methods
  -[AVAsynchronousCIImageFilteringRequestInternal dealloc]
  -[AVAsynchronousCIImageFilteringRequestInternal setCompletionHandler:]
  -[AVAsynchronousCIImageFilteringRequestInternal completionHandler]
  -[AVAsynchronousCIImageFilteringRequestInternal _willDeallocOrFinalize]
  -[AVAsynchronousCIImageFilteringRequestInternal compositingRequest]
  -[AVAsynchronousCIImageFilteringRequestInternal setCompositingRequest:]
  -[AVAsynchronousCIImageFilteringRequestInternal cancellationTest]
  -[AVAsynchronousCIImageFilteringRequestInternal setCancellationTest:]
  -[AVAsynchronousCIImageFilteringRequestInternal defaultCIContextProvider]
  -[AVAsynchronousCIImageFilteringRequestInternal setDefaultCIContextProvider:]
  -[AVAsynchronousCIImageFilteringRequestInternal sourceCIImage]
  -[AVAsynchronousCIImageFilteringRequestInternal setSourceCIImage:]
  -[AVAsynchronousCIImageFilteringRequestInternal sourcePBuf]
  -[AVAsynchronousCIImageFilteringRequestInternal setSourcePBuf:]


AVAsynchronousCIImageFilteringRequest : NSObject <NSCopying>
 @property  {CGSize=dd} renderSize
 @property  {?=qiIq} compositionTime
 @property  CIImage *sourceImage

  // instance methods
  -[AVAsynchronousCIImageFilteringRequest finishWithError:]
  -[AVAsynchronousCIImageFilteringRequest dealloc]
  -[AVAsynchronousCIImageFilteringRequest copyWithZone:]
  -[AVAsynchronousCIImageFilteringRequest renderSize]
  -[AVAsynchronousCIImageFilteringRequest sourceImage]
  -[AVAsynchronousCIImageFilteringRequest _willDeallocOrFinalize]
  -[AVAsynchronousCIImageFilteringRequest initUsingCompositingRequest:sourceFrame:cancellationTest:defaultCIContextProvider:completionHandler:]
  -[AVAsynchronousCIImageFilteringRequest compositionTime]
  -[AVAsynchronousCIImageFilteringRequest finishWithImage:context:]


AVCoreImageFilterVideoCompositionInstruction : NSObject <AVVideoCompositionInstruction>
 @property  @? handler
 @property  {CGAffineTransform=dddddd} sourceTrackPreferredTransform
 @property  {?={?=qiIq}{?=qiIq}} timeRange
 @property  BOOL enablePostProcessing
 @property  BOOL containsTweening
 @property  NSArray *requiredSourceTrackIDs
 @property  int passthroughTrackID
 @property  NSArray *requiredSourceSampleDataTrackIDs
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVCoreImageFilterVideoCompositionInstruction timeRange]
  -[AVCoreImageFilterVideoCompositionInstruction dealloc]
  -[AVCoreImageFilterVideoCompositionInstruction handler]
  -[AVCoreImageFilterVideoCompositionInstruction init]
  -[AVCoreImageFilterVideoCompositionInstruction enablePostProcessing]
  -[AVCoreImageFilterVideoCompositionInstruction containsTweening]
  -[AVCoreImageFilterVideoCompositionInstruction requiredSourceTrackIDs]
  -[AVCoreImageFilterVideoCompositionInstruction passthroughTrackID]
  -[AVCoreImageFilterVideoCompositionInstruction initWithTimeRange:sourceTrackIDs:handler:]
  -[AVCoreImageFilterVideoCompositionInstruction sourceTrackPreferredTransform]
  -[AVCoreImageFilterVideoCompositionInstruction setSourceTrackPreferredTransform:]


AVCoreImageFilterCustomVideoCompositor : NSObject <AVVideoCompositing>
 @property  BOOL shouldCancelAllRequests
 @property  NSObject<OS_dispatch_group> *filteringRequestsInFlight
 @property  NSDictionary *sourcePixelBufferAttributes
 @property  NSDictionary *requiredPixelBufferAttributesForRenderContext
 @property  BOOL supportsWideColorSourceFrames
 @property  BOOL supportsHDRSourceFrames
 @property  BOOL canConformColorOfSourceFrames
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVCoreImageFilterCustomVideoCompositor initialize]

  // instance methods
  -[AVCoreImageFilterCustomVideoCompositor sourcePixelBufferAttributes]
  -[AVCoreImageFilterCustomVideoCompositor dealloc]
  -[AVCoreImageFilterCustomVideoCompositor init]
  -[AVCoreImageFilterCustomVideoCompositor renderContextChanged:]
  -[AVCoreImageFilterCustomVideoCompositor startVideoCompositionRequest:]
  -[AVCoreImageFilterCustomVideoCompositor requiredPixelBufferAttributesForRenderContext]
  -[AVCoreImageFilterCustomVideoCompositor cancelAllPendingVideoCompositionRequests]
  -[AVCoreImageFilterCustomVideoCompositor supportsWideColorSourceFrames]
  -[AVCoreImageFilterCustomVideoCompositor supportsHDRSourceFrames]
  -[AVCoreImageFilterCustomVideoCompositor _willDeallocOrFinalize]
  -[AVCoreImageFilterCustomVideoCompositor filteringRequestsInFlight]
  -[AVCoreImageFilterCustomVideoCompositor defaultCIContext]
  -[AVCoreImageFilterCustomVideoCompositor shouldCancelAllRequests]
  -[AVCoreImageFilterCustomVideoCompositor setShouldCancelAllRequests:]


AVOutputSettingsAssistantInternal : NSObject

AVOutputSettingsAssistant : NSObject
 @property  NSDictionary *audioSettings
 @property  NSDictionary *videoSettings
 @property  NSString *outputFileType

  // class methods
  +[AVOutputSettingsAssistant _allOutputSettingsPresets]
  +[AVOutputSettingsAssistant availableOutputSettingsPresets]
  +[AVOutputSettingsAssistant outputSettingsAssistantWithPreset:]
  +[AVOutputSettingsAssistant baseSettingsProviderForPreset:]
  +[AVOutputSettingsAssistant videoSettingsAdjusterForPreset:]
  +[AVOutputSettingsAssistant videoEncoderCapabilities]
  +[AVOutputSettingsAssistant validatesSourceVideoMinFrameDuration]

  // instance methods
  -[AVOutputSettingsAssistant dealloc]
  -[AVOutputSettingsAssistant outputFileType]
  -[AVOutputSettingsAssistant audioSettings]
  -[AVOutputSettingsAssistant initWithPreset:]
  -[AVOutputSettingsAssistant init]
  -[AVOutputSettingsAssistant videoSettings]
  -[AVOutputSettingsAssistant videoEncoderSpecification]
  -[AVOutputSettingsAssistant sourceVideoFormat]
  -[AVOutputSettingsAssistant sourceAudioFormat]
  -[AVOutputSettingsAssistant sourceVideoAverageFrameDuration]
  -[AVOutputSettingsAssistant sourceVideoMinFrameDuration]
  -[AVOutputSettingsAssistant setSourceAudioFormat:]
  -[AVOutputSettingsAssistant setSourceVideoFormat:]
  -[AVOutputSettingsAssistant setSourceVideoAverageFrameDuration:]
  -[AVOutputSettingsAssistant setSourceVideoMinFrameDuration:]
  -[AVOutputSettingsAssistant setVideoEncoderSpecification:]


AVExportSettingsOutputSettingsAssistantBaseSettings : NSObject <AVOutputSettingsAssistantBaseSettingsProvider>
 @property  NSDictionary *baseAudioSettings
 @property  NSDictionary *baseVideoSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVExportSettingsOutputSettingsAssistantBaseSettings dealloc]
  -[AVExportSettingsOutputSettingsAssistantBaseSettings init]
  -[AVExportSettingsOutputSettingsAssistantBaseSettings baseAudioSettings]
  -[AVExportSettingsOutputSettingsAssistantBaseSettings baseVideoSettings]
  -[AVExportSettingsOutputSettingsAssistantBaseSettings initWithOutputSettingsPreset:]


AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster : NSObject <AVOutputSettingsAssistantVideoSettingsAdjuster>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster dealloc]
  -[AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster initWithOutputSettingsPreset:]
  -[AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster averageBitRateForSourceFormatDescription:andTargetFrameRate:andEncoderSpecification:]
  -[AVExportSettingsOutputSettingsAssistantVideoSettingsAdjuster colorSpaceFromSourceFormatDescriptions:andRendererColorSpace:]


AVIOKitOutputSettingsAssistantVideoEncoderCapabilities : NSObject <AVOutputSettingsAssistantVideoEncoderCapabilities>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVIOKitOutputSettingsAssistantVideoEncoderCapabilities averageNonDroppableFrameIntervalIsSupportedByDefaultEncoderForVideoCodec:]


AVMediaSelectionInternal : NSObject

AVMediaSelection : NSObject <NSCopying, NSMutableCopying>
 @property  AVAsset *asset

  // instance methods
  -[AVMediaSelection propertyList]
  -[AVMediaSelection _selectedMediaArray]
  -[AVMediaSelection mediaSelectionCriteriaCanBeAppliedAutomaticallyToMediaSelectionGroup:]
  -[AVMediaSelection _dictionaryGroupsWithSelectedOption]
  -[AVMediaSelection _createDefaultMediaSelectionOptions]
  -[AVMediaSelection _propertyListForSelectedMediaOptionInMediaSelectionGroup:]
  -[AVMediaSelection _initWithAsset:]
  -[AVMediaSelection _initWithAssetWithoutGroupDictionaries:]
  -[AVMediaSelection dealloc]
  -[AVMediaSelection _internal]
  -[AVMediaSelection initWithAsset:propertyList:]
  -[AVMediaSelection _groupDictionaries]
  -[AVMediaSelection asset]
  -[AVMediaSelection selectedMediaOptionInMediaSelectionGroup:]
  -[AVMediaSelection _loadiVarsIfNeeded]
  -[AVMediaSelection copyWithZone:]
  -[AVMediaSelection _initWithAsset:selectedMediaArray:]
  -[AVMediaSelection mutableCopyWithZone:]
  -[AVMediaSelection _initWithDeferredLoadingOfAsset:selectedMediaArray:]
  -[AVMediaSelection isEqual:]


AVMutableMediaSelection : AVMediaSelection
  // instance methods
  -[AVMutableMediaSelection selectMediaOption:inMediaSelectionGroup:]
  -[AVMutableMediaSelection _validatedGroupIdentifierKey:]
  -[AVMutableMediaSelection copyWithZone:]
  -[AVMutableMediaSelection _isValidMediaSelectionOption:forMediaSelectionGroup:]


AVExternalDeviceHIDInternal : NSObject

AVExternalDeviceHID : NSObject
 @property  NSString *UUID
 @property  NSString *screenID
 @property  long long inputMode

  // instance methods
  -[AVExternalDeviceHID setInputMode:]
  -[AVExternalDeviceHID inputMode]
  -[AVExternalDeviceHID dealloc]
  -[AVExternalDeviceHID UUID]
  -[AVExternalDeviceHID _externalDevice]
  -[AVExternalDeviceHID screenID]
  -[AVExternalDeviceHID _figEndpointHIDInputMode]
  -[AVExternalDeviceHID initWithExternalDeviceAndHIDDictionary:hidDictionary:]


AVExternalDeviceIconInternal : NSObject

AVExternalDeviceIcon : NSObject
 @property  {CGSize=dd} pixelSize
 @property  NSData *imageData
 @property  BOOL prerendered

  // instance methods
  -[AVExternalDeviceIcon pixelSize]
  -[AVExternalDeviceIcon initWithDictionary:]
  -[AVExternalDeviceIcon dealloc]
  -[AVExternalDeviceIcon imageData]
  -[AVExternalDeviceIcon isPrerendered]


AVExternalDeviceInternal : NSObject

AVExternalDeviceScreenBorrowToken : NSObject
 @property  NSString *client
 @property  NSString *reason

  // instance methods
  -[AVExternalDeviceScreenBorrowToken dealloc]
  -[AVExternalDeviceScreenBorrowToken client]
  -[AVExternalDeviceScreenBorrowToken reason]
  -[AVExternalDeviceScreenBorrowToken init]
  -[AVExternalDeviceScreenBorrowToken initWithExternalDevice:client:reason:]


AVExternalDeviceTurnByTurnToken : NSObject
  // instance methods
  -[AVExternalDeviceTurnByTurnToken dealloc]
  -[AVExternalDeviceTurnByTurnToken init]
  -[AVExternalDeviceTurnByTurnToken initWithExternalDevice:]


AVExternalDevice : NSObject
 @property  <AVExternalDeviceDelegate> *delegate
 @property  NSArray *screenIDs
 @property  NSDictionary *screenInputCapabilities
 @property  NSDictionary *screenPrimaryInputDevices
 @property  NSDictionary *screenViewAreas
 @property  NSDictionary *screenSafeAreas
 @property  NSData *OEMIcon
 @property  NSArray *OEMIcons
 @property  NSString *OEMIconLabel
 @property  BOOL OEMIconVisible
 @property  NSString *modelName
 @property  NSArray *externalDeviceHIDs
 @property  BOOL nightMode
 @property  BOOL nightModeSupported
 @property  BOOL rightHandDrive
 @property  NSArray *limitedUIElements
 @property  BOOL limitedUI
 @property  BOOL ownsScreen
 @property  BOOL ownsTurnByTurnNavigation
 @property  BOOL recognizingSpeech
 @property  NSArray *supportedFeatures
 @property  long long electronicTollCollection
 @property  long long navigationAidedDriving
 @property  NSString *name
 @property  NSString *ID
 @property  long long transportType
 @property  NSData *MFiCertificateSerialNumber

  // class methods
  +[AVExternalDevice currentCarPlayExternalDevice]
  +[AVExternalDevice currentExternalDevice]
  +[AVExternalDevice sharedLocalDevice]

  // instance methods
  -[AVExternalDevice ID]
  -[AVExternalDevice setDelegate:]
  -[AVExternalDevice modelName]
  -[AVExternalDevice delegate]
  -[AVExternalDevice dealloc]
  -[AVExternalDevice transportType]
  -[AVExternalDevice OEMIconLabel]
  -[AVExternalDevice _weakReference]
  -[AVExternalDevice limitedUI]
  -[AVExternalDevice nightMode]
  -[AVExternalDevice name]
  -[AVExternalDevice rightHandDrive]
  -[AVExternalDevice init]
  -[AVExternalDevice limitedUIElements]
  -[AVExternalDevice supportedFeatures]
  -[AVExternalDevice _figEndpointPropertyValueForKey:]
  -[AVExternalDevice figEndpoint]
  -[AVExternalDevice _screenInfo]
  -[AVExternalDevice initWithFigEndpoint:]
  -[AVExternalDevice screenIDs]
  -[AVExternalDevice screenViewAreas]
  -[AVExternalDevice screenSafeAreas]
  -[AVExternalDevice screenInputCapabilities]
  -[AVExternalDevice screenPrimaryInputDevices]
  -[AVExternalDevice externalDeviceHIDs]
  -[AVExternalDevice externalDeviceHIDWithUUID:]
  -[AVExternalDevice OEMIcon]
  -[AVExternalDevice OEMIcons]
  -[AVExternalDevice OEMIconVisible]
  -[AVExternalDevice nightModeSupported]
  -[AVExternalDevice ownsTurnByTurnNavigation]
  -[AVExternalDevice ownsScreen]
  -[AVExternalDevice recognizingSpeech]
  -[AVExternalDevice electronicTollCollection]
  -[AVExternalDevice navigationAidedDriving]
  -[AVExternalDevice MFiCertificateSerialNumber]
  -[AVExternalDevice requestCarUI]
  -[AVExternalDevice requestCarUIForURL:]
  -[AVExternalDevice requestCarUIForURL:withUUID:]
  -[AVExternalDevice requestViewArea:forScreenID:]
  -[AVExternalDevice requestTurnByTurnNavigationOwnership]
  -[AVExternalDevice borrowScreenForClient:reason:]
  -[AVExternalDevice takeScreenForClient:reason:]
  -[AVExternalDevice takeScreenForConnection]
  -[AVExternalDevice sendCommand:withParameters:]
  -[AVExternalDevice _triggerFakeNotificationNamed:withPayload:]


AVCustomVideoCompositorSession : NSObject
 @property  BOOL supportsWideColorSourceFrames
 @property  BOOL supportsHDRSourceFrames

  // class methods
  +[AVCustomVideoCompositorSession sessionWithVideoComposition:recyclingSession:]
  +[AVCustomVideoCompositorSession _colorPropertiesAreSetInVideoComposition:]

  // instance methods
  -[AVCustomVideoCompositorSession dealloc]
  -[AVCustomVideoCompositorSession setVideoComposition:]
  -[AVCustomVideoCompositorSession customVideoCompositor]
  -[AVCustomVideoCompositorSession supportsWideColorSourceFrames]
  -[AVCustomVideoCompositorSession supportsHDRSourceFrames]
  -[AVCustomVideoCompositorSession _willDeallocOrFinalize]
  -[AVCustomVideoCompositorSession initWithVideoComposition:]
  -[AVCustomVideoCompositorSession _validateSourcePixelBufferAttributes:andReturnException:]
  -[AVCustomVideoCompositorSession _validateRequiredPixelBufferAttributesForRenderContext:andReturnException:]
  -[AVCustomVideoCompositorSession commitCustomVideoCompositorPropertiesAndReturnError:]
  -[AVCustomVideoCompositorSession detachVideoComposition]
  -[AVCustomVideoCompositorSession _copyFigVideoCompositor]
  -[AVCustomVideoCompositorSession getAndClearClientError]
  -[AVCustomVideoCompositorSession compositionFrame:didFinishWithComposedPixelBuffer:]
  -[AVCustomVideoCompositorSession compositionFrame:didFinishWithError:]
  -[AVCustomVideoCompositorSession compositionFrameDidCancel:]
  -[AVCustomVideoCompositorSession _compositionFrame:atTime:requiresRenderUsingSources:requiresSampleBuffersUsingSources:withInstruction:]
  -[AVCustomVideoCompositorSession _customCompositorShouldAnticipateRenderingFromTime:toTime:andThenFromTime:toTime:]
  -[AVCustomVideoCompositorSession _customCompositorShouldPrerollForRenderingFromTime:toTime:andThenFromTime:toTime:requestID:]
  -[AVCustomVideoCompositorSession _customCompositorShouldCancelPendingFrames]
  -[AVCustomVideoCompositorSession _customCompositorFigPropertyDidChange]
  -[AVCustomVideoCompositorSession _setupFigCallbacks]
  -[AVCustomVideoCompositorSession _cleanupFigCallbacks]


AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl : NSObject <AVOutputDeviceDiscoverySessionAvailableOutputDevicesImpl>
 @property  NSArray *allDevices
 @property  NSArray *availableOutputDeviceGroups
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl dealloc]
  -[AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl allDevices]
  -[AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl availableOutputDeviceGroups]
  -[AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl init]
  -[AVFigEndpointOutputDeviceDiscoverySessionAvailableOutputDevicesImpl initWithAvailableFigEndpoints:]


AVAsynchronousVideoCompositionRequestInternal : NSObject
 @property  AVWeakReference *session
 @property  AVVideoCompositionRenderContext *renderContext
 @property  ^{OpaqueFigVideoCompositorFrame=} compositionFrame
 @property  {?=qiIq} compositionTime
 @property  NSDictionary *sourcesByTrackID
 @property  NSArray *sourceTrackIDsInClientOrder
 @property  NSDictionary *sampleBufferSourcesByTrackID
 @property  NSArray *sourceSampleBufferTrackIDsInClientOrder
 @property  <AVVideoCompositionInstruction> *instruction
 @property  BOOL isFinished

  // instance methods
  -[AVAsynchronousVideoCompositionRequestInternal renderContext]
  -[AVAsynchronousVideoCompositionRequestInternal isFinished]
  -[AVAsynchronousVideoCompositionRequestInternal session]
  -[AVAsynchronousVideoCompositionRequestInternal setSession:]
  -[AVAsynchronousVideoCompositionRequestInternal dealloc]
  -[AVAsynchronousVideoCompositionRequestInternal instruction]
  -[AVAsynchronousVideoCompositionRequestInternal setInstruction:]
  -[AVAsynchronousVideoCompositionRequestInternal setIsFinished:]
  -[AVAsynchronousVideoCompositionRequestInternal compositionTime]
  -[AVAsynchronousVideoCompositionRequestInternal setRenderContext:]
  -[AVAsynchronousVideoCompositionRequestInternal compositionFrame]
  -[AVAsynchronousVideoCompositionRequestInternal setCompositionFrame:]
  -[AVAsynchronousVideoCompositionRequestInternal setCompositionTime:]
  -[AVAsynchronousVideoCompositionRequestInternal sourcesByTrackID]
  -[AVAsynchronousVideoCompositionRequestInternal setSourcesByTrackID:]
  -[AVAsynchronousVideoCompositionRequestInternal sourceTrackIDsInClientOrder]
  -[AVAsynchronousVideoCompositionRequestInternal setSourceTrackIDsInClientOrder:]
  -[AVAsynchronousVideoCompositionRequestInternal sampleBufferSourcesByTrackID]
  -[AVAsynchronousVideoCompositionRequestInternal setSampleBufferSourcesByTrackID:]
  -[AVAsynchronousVideoCompositionRequestInternal sourceSampleBufferTrackIDsInClientOrder]
  -[AVAsynchronousVideoCompositionRequestInternal setSourceSampleBufferTrackIDsInClientOrder:]


AVAsynchronousVideoCompositionRequest : NSObject <NSCopying>
 @property  AVVideoCompositionRenderContext *renderContext
 @property  {?=qiIq} compositionTime
 @property  NSArray *sourceTrackIDs
 @property  NSArray *sourceSampleDataTrackIDs
 @property  <AVVideoCompositionInstruction> *videoCompositionInstruction

  // instance methods
  -[AVAsynchronousVideoCompositionRequest renderContext]
  -[AVAsynchronousVideoCompositionRequest finishWithError:]
  -[AVAsynchronousVideoCompositionRequest dealloc]
  -[AVAsynchronousVideoCompositionRequest copyWithZone:]
  -[AVAsynchronousVideoCompositionRequest videoCompositionInstruction]
  -[AVAsynchronousVideoCompositionRequest sourceSampleDataTrackIDs]
  -[AVAsynchronousVideoCompositionRequest _willDeallocOrFinalize]
  -[AVAsynchronousVideoCompositionRequest compositionTime]
  -[AVAsynchronousVideoCompositionRequest compositionFrame]
  -[AVAsynchronousVideoCompositionRequest sourceTrackIDs]
  -[AVAsynchronousVideoCompositionRequest sourceFrameByTrackID:]
  -[AVAsynchronousVideoCompositionRequest sourceSampleBufferByTrackID:]
  -[AVAsynchronousVideoCompositionRequest sourceTimedMetadataByTrackID:]
  -[AVAsynchronousVideoCompositionRequest finishWithComposedVideoFrame:]
  -[AVAsynchronousVideoCompositionRequest finishCancelledRequest]
  -[AVAsynchronousVideoCompositionRequest initUsingSession:withRenderContext:compositionFrame:atTime:usingSources:instruction:withSampleBuffers:]


AVKVODispatcher : NSObject
  // class methods
  +[AVKVODispatcher sharedKVODispatcher]

  // instance methods
  -[AVKVODispatcher startObservingValueAtKeyPath:withoutKeepingAliveObservedObject:options:usingBlock:]
  -[AVKVODispatcher startObservingObject:weakObserver:forTwoPartKeyPath:options:context:]
  -[AVKVODispatcher startObservingObject:weakObserver:forKeyPath:options:context:]
  -[AVKVODispatcher dealloc]
  -[AVKVODispatcher startObservingValueAtKeyPath:ofObject:options:usingBlock:]
  -[AVKVODispatcher startObservingValueAtTwoPartKeyPath:ofObject:options:usingBlock:]
  -[AVKVODispatcher observeValueForKeyPath:ofObject:change:context:]
  -[AVKVODispatcher initWithDescriptionOfHowAllObservedPropertyChangesAreSerializedWithDispatcherDeallocation:]


AVObservationBlockFactory : NSObject
  // class methods
  +[AVObservationBlockFactory observationBlockForWeakObserver:passedToBlock:]


AVWeakObservationBlockFactory : NSObject
  // class methods
  +[AVWeakObservationBlockFactory weakObservationBlockForWeakObserver:passedToBlock:]


AVClientBlockKVONotifier : NSObject <AVKVONotifier, AVKVOIntrospection>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject *observedObject

  // instance methods
  -[AVClientBlockKVONotifier cancelCallbacks]
  -[AVClientBlockKVONotifier dealloc]
  -[AVClientBlockKVONotifier observedObject]
  -[AVClientBlockKVONotifier start]
  -[AVClientBlockKVONotifier callbackDidFireWithChangeDictionary:]
  -[AVClientBlockKVONotifier initWithCallbackContextRegistry:observer:object:keyPath:options:block:]


AVWeaklyObservedObjectClientBlockKVONotifier : NSObject <AVKVONotifier>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVWeaklyObservedObjectClientBlockKVONotifier cancelCallbacks]
  -[AVWeaklyObservedObjectClientBlockKVONotifier dealloc]
  -[AVWeaklyObservedObjectClientBlockKVONotifier start]
  -[AVWeaklyObservedObjectClientBlockKVONotifier callbackDidFireWithChangeDictionary:]
  -[AVWeaklyObservedObjectClientBlockKVONotifier initWithCallbackContextRegistry:observer:object:keyPath:options:block:]


AVWeakObservableCallbackCancellationHelper : NSObject
  // instance methods
  -[AVWeakObservableCallbackCancellationHelper dealloc]
  -[AVWeakObservableCallbackCancellationHelper cancelAllCallbacks]
  -[AVWeakObservableCallbackCancellationHelper addCallbackToCancel:]
  -[AVWeakObservableCallbackCancellationHelper init]


AVKeyPathDependencyManager : NSObject <AVKeyPathDependencyRegistration>
  // instance methods
  -[AVKeyPathDependencyManager initWithDependencyHost:]
  -[AVKeyPathDependencyManager valueForKey:dependsOnValueAtKeyPath:]
  -[AVKeyPathDependencyManager dealloc]
  -[AVKeyPathDependencyManager dependencyHostIsFullyInitialized]
  -[AVKeyPathDependencyManager cancelAllCallbacks]
  -[AVKeyPathDependencyManager addCallbackToCancel:]


AVKeyPathDependency : NSObject
  // class methods
  +[AVKeyPathDependency initialize]

  // instance methods
  -[AVKeyPathDependency _reactToSecondLevelPropertyChange:]
  -[AVKeyPathDependency dealloc]
  -[AVKeyPathDependency initWithObject:thatHasPropertyWithKey:whoseValueDependsOnValueAtKeyPath:]
  -[AVKeyPathDependency _startObservingSecondLevelPropertyOnNewCurrentValueForTopLevelDependencyProperty:]
  -[AVKeyPathDependency _reactToTopLevelPropertyChange:]
  -[AVKeyPathDependency initializationIsCompleteForObject:]


AVTwoPartKeyPath : NSObject <AVKeyPath, NSCopying>
 @property  NSString *topLevelPropertyKey
 @property  NSString *secondLevelPropertyKey
 @property  NSString *keyPathString
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVTwoPartKeyPath secondLevelPropertyKey]
  -[AVTwoPartKeyPath dealloc]
  -[AVTwoPartKeyPath keyPathString]
  -[AVTwoPartKeyPath copyWithZone:]
  -[AVTwoPartKeyPath topLevelPropertyKey]
  -[AVTwoPartKeyPath initWithTopLevelPropertyKey:secondLevelPropertyKey:]


AVKeyPathFlattener : NSObject <AVKeyPathDependencyHost, AVWeakObservable>
 @property  id dependentProperty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVKeyPathFlattener declareKeyPathDependenciesWithRegistry:]
  -[AVKeyPathFlattener addCallbackToCancelDuringDeallocation:]
  -[AVKeyPathFlattener dealloc]
  -[AVKeyPathFlattener observedObject]
  -[AVKeyPathFlattener init]
  -[AVKeyPathFlattener initForObservingValueAtKeyPath:onObject:]
  -[AVKeyPathFlattener topLevelDependencyProperty]
  -[AVKeyPathFlattener dependentProperty]


AVKeyPathFlattenerKVOIntrospectionShim : NSObject <AVKVOIntrospection, AVCallbackCancellation>
 @property  NSObject *observedObject
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVKeyPathFlattenerKVOIntrospectionShim cancelCallbacks]
  -[AVKeyPathFlattenerKVOIntrospectionShim dealloc]
  -[AVKeyPathFlattenerKVOIntrospectionShim observedObject]
  -[AVKeyPathFlattenerKVOIntrospectionShim initWithObservedObject:realNotifier:]


AVVideoCompositionRenderContextInternal : NSObject
  // instance methods
  -[AVVideoCompositionRenderContextInternal dealloc]
  -[AVVideoCompositionRenderContextInternal _willDeallocOrFinalize]


AVVideoCompositionRenderContext : NSObject
 @property  {CGSize=dd} size
 @property  {CGAffineTransform=dddddd} renderTransform
 @property  float renderScale
 @property  {?=qq} pixelAspectRatio
 @property  {?=dddd} edgeWidths
 @property  BOOL highQualityRendering
 @property  AVVideoComposition *videoComposition

  // class methods
  +[AVVideoCompositionRenderContext renderContextPropertiesFromFigCompositor:]

  // instance methods
  -[AVVideoCompositionRenderContext pixelAspectRatio]
  -[AVVideoCompositionRenderContext newPixelBuffer]
  -[AVVideoCompositionRenderContext dealloc]
  -[AVVideoCompositionRenderContext size]
  -[AVVideoCompositionRenderContext pixelBufferPool]
  -[AVVideoCompositionRenderContext videoComposition]
  -[AVVideoCompositionRenderContext renderScale]
  -[AVVideoCompositionRenderContext _willDeallocOrFinalize]
  -[AVVideoCompositionRenderContext renderTransform]
  -[AVVideoCompositionRenderContext edgeWidths]
  -[AVVideoCompositionRenderContext highQualityRendering]
  -[AVVideoCompositionRenderContext initWithFigVideoCompositor:clientRequiredPixelBufferAttributes:videoComposition:pixelBufferPool:]
  -[AVVideoCompositionRenderContext hasEqualPropertiesToFigVideoCompositor:]
  -[AVVideoCompositionRenderContext isBufferYCbCr:]


AVFigRoutingContextOutputContextImpl : NSObject <AVOutputContextImpl>
 @property  ^{OpaqueFigRoutingContext=} figRoutingContext
 @property  AVOutputContext *parentOutputContext
 @property  NSString *ID
 @property  NSString *outputContextType
 @property  AVOutputDevice *outputDevice
 @property  NSString *associatedAudioDeviceID
 @property  BOOL supportsMultipleOutputDevices
 @property  BOOL supportsMultipleBluetoothOutputDevices
 @property  NSArray *outputDevices
 @property  AVOutputDevice *predictedOutputDevice
 @property  BOOL providesControlForAllVolumeFeatures
 @property  float volume
 @property  BOOL canSetVolume
 @property  long long volumeControlType
 @property  AVOutputContextCommunicationChannel *outgoingCommunicationChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigRoutingContextOutputContextImpl defaultSharedOutputContextImpl]
  +[AVFigRoutingContextOutputContextImpl sharedAudioPresentationOutputContext]
  +[AVFigRoutingContextOutputContextImpl outputContextImplForID:type:]
  +[AVFigRoutingContextOutputContextImpl addSharedAudioOutputContextImpl]
  +[AVFigRoutingContextOutputContextImpl outputContextExistsWithRemoteOutputDevice]
  +[AVFigRoutingContextOutputContextImpl sharedSystemRemotePoolContext]
  +[AVFigRoutingContextOutputContextImpl allSharedAudioOutputContextImpls]
  +[AVFigRoutingContextOutputContextImpl resetOutputDeviceForAllOutputContexts]
  +[AVFigRoutingContextOutputContextImpl iTunesAudioContext]
  +[AVFigRoutingContextOutputContextImpl outputContextImplForControllingOutputDeviceGroupWithID:options:]
  +[AVFigRoutingContextOutputContextImpl platformDependentScreenOrVideoContext]
  +[AVFigRoutingContextOutputContextImpl routingContextFactory]
  +[AVFigRoutingContextOutputContextImpl copySystemVideoRoutingContext]
  +[AVFigRoutingContextOutputContextImpl sharedSystemScreenContext]
  +[AVFigRoutingContextOutputContextImpl auxiliaryOutputContext]
  +[AVFigRoutingContextOutputContextImpl sharedSystemAudioContext]

  // instance methods
  -[AVFigRoutingContextOutputContextImpl increaseVolumeByCount:]
  -[AVFigRoutingContextOutputContextImpl canSetVolume]
  -[AVFigRoutingContextOutputContextImpl _masterVolumeControlTypeDidChangeForRoutingContextWithID:]
  -[AVFigRoutingContextOutputContextImpl ID]
  -[AVFigRoutingContextOutputContextImpl initWithFigRoutingContext:routingContextReplacementBlock:]
  -[AVFigRoutingContextOutputContextImpl _routeConfigUpdatedWithID:reason:initiator:endedError:deviceID:previousDeviceIDs:]
  -[AVFigRoutingContextOutputContextImpl routingContextUUID]
  -[AVFigRoutingContextOutputContextImpl _createSelectRouteOptionsForSetOutputDeviceOptions:]
  -[AVFigRoutingContextOutputContextImpl removeOutputDevice:options:completionHandler:]
  -[AVFigRoutingContextOutputContextImpl dealloc]
  -[AVFigRoutingContextOutputContextImpl outputContextDidChangeApplicationProcessID:]
  -[AVFigRoutingContextOutputContextImpl decreaseVolumeByCount:]
  -[AVFigRoutingContextOutputContextImpl _currentRouteChanged]
  -[AVFigRoutingContextOutputContextImpl outputDevices]
  -[AVFigRoutingContextOutputContextImpl .cxx_destruct]
  -[AVFigRoutingContextOutputContextImpl parentOutputContext]
  -[AVFigRoutingContextOutputContextImpl supportsMultipleBluetoothOutputDevices]
  -[AVFigRoutingContextOutputContextImpl outputDevice]
  -[AVFigRoutingContextOutputContextImpl setParentOutputContext:]
  -[AVFigRoutingContextOutputContextImpl setVolume:]
  -[AVFigRoutingContextOutputContextImpl _predictedSelectedRouteDescriptorChanged]
  -[AVFigRoutingContextOutputContextImpl initWithFigRoutingContext:routingContextReplacementBlock:outputDeviceTranslator:volumeController:communicationChannelManagerCreator:]
  -[AVFigRoutingContextOutputContextImpl _canSetMasterVolumeDidChangeForRoutingContextWithID:]
  -[AVFigRoutingContextOutputContextImpl volume]
  -[AVFigRoutingContextOutputContextImpl _masterVolumeDidChangeForRoutingContextWithID:]
  -[AVFigRoutingContextOutputContextImpl supportsMultipleOutputDevices]
  -[AVFigRoutingContextOutputContextImpl addOutputDevice:options:completionHandler:]
  -[AVFigRoutingContextOutputContextImpl resetPredictedOutputDevice]
  -[AVFigRoutingContextOutputContextImpl outgoingCommunicationChannel]
  -[AVFigRoutingContextOutputContextImpl setOutputDevice:options:completionHandler:]
  -[AVFigRoutingContextOutputContextImpl _routeChangeEndedWithID:reason:]
  -[AVFigRoutingContextOutputContextImpl setOutputDevices:options:completionHandler:]
  -[AVFigRoutingContextOutputContextImpl _remoteControlChannelAvailabilityChanged]
  -[AVFigRoutingContextOutputContextImpl outputContextType]
  -[AVFigRoutingContextOutputContextImpl providesControlForAllVolumeFeatures]
  -[AVFigRoutingContextOutputContextImpl _serverConnectionDied]
  -[AVFigRoutingContextOutputContextImpl _canUseForRoutingContextDidChangeForRoutingContextWIthID:]
  -[AVFigRoutingContextOutputContextImpl _groupConfigurationChanged]
  -[AVFigRoutingContextOutputContextImpl _systemPickerVideoRouteChanged]
  -[AVFigRoutingContextOutputContextImpl _routeChangeStartedWithID:]
  -[AVFigRoutingContextOutputContextImpl _routeConfigUpdateEndedWithID:reason:]
  -[AVFigRoutingContextOutputContextImpl communicationChannelManager:didReceiveData:fromCommunicationChannel:]
  -[AVFigRoutingContextOutputContextImpl predictedOutputDevice]
  -[AVFigRoutingContextOutputContextImpl _sendCommand:completionHandler:]
  -[AVFigRoutingContextOutputContextImpl openCommunicationChannelWithOptions:error:]
  -[AVFigRoutingContextOutputContextImpl initWithFigRoutingContextCreator:]
  -[AVFigRoutingContextOutputContextImpl associatedAudioDeviceID]
  -[AVFigRoutingContextOutputContextImpl volumeControlType]
  -[AVFigRoutingContextOutputContextImpl _routeConfigUpdateStartedWithID:]
  -[AVFigRoutingContextOutputContextImpl communicationChannelManager:didCloseCommunicationChannel:]
  -[AVFigRoutingContextOutputContextImpl figRoutingContext]
  -[AVFigRoutingContextOutputContextImpl isEqual:]
  -[AVFigRoutingContextOutputContextImpl init]
  -[AVFigRoutingContextOutputContextImpl initWithRoutingContextUUID:type:]


AVFigCommChannelUUIDCommunicationChannelManager : NSObject <AVFigRoutingContextCommunicationChannelManager>
 @property  AVFigRoutingContextOutputContextImpl *parentOutputContextImpl
 @property  AVOutputContextCommunicationChannel *outgoingCommunicationChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigCommChannelUUIDCommunicationChannelManager _didReceiveData:fromCommChannelUUID:]
  -[AVFigCommChannelUUIDCommunicationChannelManager initWithRoutingContext:]
  -[AVFigCommChannelUUIDCommunicationChannelManager dealloc]
  -[AVFigCommChannelUUIDCommunicationChannelManager .cxx_destruct]
  -[AVFigCommChannelUUIDCommunicationChannelManager parentOutputContextImpl]
  -[AVFigCommChannelUUIDCommunicationChannelManager outgoingCommunicationChannel]
  -[AVFigCommChannelUUIDCommunicationChannelManager setParentOutputContextImpl:]
  -[AVFigCommChannelUUIDCommunicationChannelManager openCommunicationChannelWithOptions:error:]
  -[AVFigCommChannelUUIDCommunicationChannelManager didCloseCommChannelUUID:]
  -[AVFigCommChannelUUIDCommunicationChannelManager init]


AVFigEndpointFigRoutingContextOutputDeviceTranslator : NSObject <AVFigRoutingContextOutputDeviceTranslator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigEndpointFigRoutingContextOutputDeviceTranslator sharedOutputDeviceTranslator]

  // instance methods
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator outputDeviceFromRoutingContext:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator setOutputDevices:withOptions:onRoutingContext:completionHandler:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator setOutputDevice:withOptions:onRoutingContext:completionHandler:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator predictedOutputDeviceFromRoutingContext:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator addOutputDevice:withOptions:toRoutingContext:completionHandler:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator removeOutputDevice:withOptions:fromRoutingContext:completionHandler:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator outputDevicesFromRoutingContext:]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator init]
  -[AVFigEndpointFigRoutingContextOutputDeviceTranslator initForUsingRouteConfigUpdatedNotification:]


AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator : NSObject <AVFigRoutingContextOutputDeviceTranslator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator sharedOutputDeviceTranslator]

  // instance methods
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator outputDeviceFromRoutingContext:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator initForUsingRouteConfigUpdatedNotification:syncController:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator setOutputDevices:withOptions:onRoutingContext:completionHandler:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator dealloc]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator setOutputDevice:withOptions:onRoutingContext:completionHandler:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator predictedOutputDeviceFromRoutingContext:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator addOutputDevice:withOptions:toRoutingContext:completionHandler:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator removeOutputDevice:withOptions:fromRoutingContext:completionHandler:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator outputDevicesFromRoutingContext:]
  -[AVFigRouteDescriptorFigRoutingContextOutputDeviceTranslator init]


AVFigCommChannelUUIDOutputContextCommunicationChannelImpl : NSObject <AVOutputContextCommunicationChannelImpl>
 @property  ^{__CFString=} commChannelUUID
 @property  AVOutputContextCommunicationChannel *parentCommunicationChannel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl dealloc]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl .cxx_destruct]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl init]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl sendData:completionHandler:]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl parentCommunicationChannel]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl setParentCommunicationChannel:]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl initWithRoutingContext:commChannelUUID:]
  -[AVFigCommChannelUUIDOutputContextCommunicationChannelImpl commChannelUUID]


AVFigEndpointUIAgentOutputContextManagerImpl : NSObject <AVOutputContextManagerImpl>
 @property  AVOutputContextManager *parentOutputContextManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AVFigEndpointUIAgentOutputContextManagerImpl copySharedEndpointUIAgent]

  // instance methods
  -[AVFigEndpointUIAgentOutputContextManagerImpl dealloc]
  -[AVFigEndpointUIAgentOutputContextManagerImpl .cxx_destruct]
  -[AVFigEndpointUIAgentOutputContextManagerImpl setParentOutputContextManager:]
  -[AVFigEndpointUIAgentOutputContextManagerImpl parentOutputContextManager]
  -[AVFigEndpointUIAgentOutputContextManagerImpl _showErrorPromptForRouteDescriptor:reason:]
  -[AVFigEndpointUIAgentOutputContextManagerImpl initWithEndpointUIAgent:]


AVMediaDataStorageInternal : NSObject
  // instance methods
  -[AVMediaDataStorageInternal .cxx_destruct]


AVMediaDataStorage : NSObject
  // instance methods
  -[AVMediaDataStorage initWithURL:options:]
  -[AVMediaDataStorage .cxx_destruct]
  -[AVMediaDataStorage URL]
  -[AVMediaDataStorage isEqual:]
  -[AVMediaDataStorage init]


AVMovieInternal : NSObject
  // instance methods
  -[AVMovieInternal .cxx_destruct]


AVMovie : AVAsset <NSCopying, NSMutableCopying>
 @property  NSURL *URL
 @property  NSData *data
 @property  AVMediaDataStorage *defaultMediaDataStorage
 @property  NSArray *tracks
 @property  BOOL canContainMovieFragments
 @property  BOOL containsMovieFragments

  // class methods
  +[AVMovie initialize]
  +[AVMovie expectsPropertyRevisedNotifications]
  +[AVMovie movieTypes]
  +[AVMovie movieWithURL:options:]
  +[AVMovie movieWithData:options:]

  // instance methods
  -[AVMovie tracksWithMediaType:]
  -[AVMovie dealloc]
  -[AVMovie initWithURL:options:]
  -[AVMovie hasProtectedContent]
  -[AVMovie .cxx_destruct]
  -[AVMovie initWithData:options:]
  -[AVMovie trackReferences]
  -[AVMovie _formatReader]
  -[AVMovie tracksWithMediaCharacteristic:]
  -[AVMovie _initializationOptions]
  -[AVMovie tracks]
  -[AVMovie copyWithZone:]
  -[AVMovie defaultMediaDataStorage]
  -[AVMovie trackWithTrackID:]
  -[AVMovie _classForTrackInspectors]
  -[AVMovie URL]
  -[AVMovie mutableCopyWithZone:]
  -[AVMovie _figMutableMovie]
  -[AVMovie _initWithFigAsset:]
  -[AVMovie _initWithFigError:userInfo:]
  -[AVMovie init]
  -[AVMovie _initWithFormatReader:URL:data:options:]
  -[AVMovie data]
  -[AVMovie initWithData:contentType:options:]
  -[AVMovie _assetInspector]
  -[AVMovie _assetInspectorLoader]
  -[AVMovie _absoluteURL]
  -[AVMovie referenceRestrictions]
  -[AVMovie _classForMovieTracks]
  -[AVMovie _startListeningToLoaderNotifications]
  -[AVMovie _stopListeningToLoaderNotifications]
  -[AVMovie _figMutableMovieFromFormatReader:]
  -[AVMovie canContainMovieFragments]
  -[AVMovie containsMovieFragments]
  -[AVMovie _mutableMovieForFileType:]
  -[AVMovie movieHeaderWithFileType:error:]
  -[AVMovie writeMovieHeaderToURL:fileType:options:error:]
  -[AVMovie isCompatibleWithFileType:]


AVMutableMovieInternal : NSObject
  // instance methods
  -[AVMutableMovieInternal .cxx_destruct]


AVMutableMovie : AVMovie
 @property  BOOL modified
 @property  AVMediaDataStorage *defaultMediaDataStorage
 @property  {?=qiIq} interleavingPeriod
 @property  NSArray *metadata
 @property  float preferredRate
 @property  float preferredVolume
 @property  {CGAffineTransform=dddddd} preferredTransform
 @property  int timescale
 @property  NSArray *tracks

  // class methods
  +[AVMutableMovie expectsPropertyRevisedNotifications]
  +[AVMutableMovie movieWithURL:options:error:]
  +[AVMutableMovie movieWithData:options:error:]
  +[AVMutableMovie movieWithSettingsFromMovie:options:error:]

  // instance methods
  -[AVMutableMovie fileType]
  -[AVMutableMovie loadValuesAsynchronouslyForKeys:completionHandler:]
  -[AVMutableMovie _signalMetadataUpdated]
  -[AVMutableMovie preferredVolume]
  -[AVMutableMovie metadataForFormat:]
  -[AVMutableMovie _mutableTracks]
  -[AVMutableMovie removeTrack:]
  -[AVMutableMovie setTimescale:]
  -[AVMutableMovie preferredTransform]
  -[AVMutableMovie scaleTimeRange:toDuration:]
  -[AVMutableMovie tracksWithMediaType:]
  -[AVMutableMovie setPreferredVolume:]
  -[AVMutableMovie setPreferredRate:]
  -[AVMutableMovie statusOfValueForKey:error:]
  -[AVMutableMovie dealloc]
  -[AVMutableMovie initWithURL:options:]
  -[AVMutableMovie setModified:]
  -[AVMutableMovie .cxx_destruct]
  -[AVMutableMovie initWithData:options:]
  -[AVMutableMovie trackReferences]
  -[AVMutableMovie setDefaultMediaDataStorage:]
  -[AVMutableMovie addMutableTracksCopyingSettingsFromTracks:options:]
  -[AVMutableMovie duration]
  -[AVMutableMovie _addFigAssetNotifications]
  -[AVMutableMovie availableMetadataFormats]
  -[AVMutableMovie initWithSettingsFromMovie:options:]
  -[AVMutableMovie setMetadata:]
  -[AVMutableMovie insertEmptyTimeRange:]
  -[AVMutableMovie setPreferredTransform:]
  -[AVMutableMovie _formatReader]
  -[AVMutableMovie tracksWithMediaCharacteristic:]
  -[AVMutableMovie _addMutableTrackWithMediaType:copySettingsFromTrack:options:]
  -[AVMutableMovie preferredRate]
  -[AVMutableMovie _initializationOptions]
  -[AVMutableMovie tracks]
  -[AVMutableMovie copyWithZone:]
  -[AVMutableMovie initWithURL:options:error:]
  -[AVMutableMovie defaultMediaDataStorage]
  -[AVMutableMovie trackWithTrackID:]
  -[AVMutableMovie initWithData:options:error:]
  -[AVMutableMovie _removeFigAssetNotifications]
  -[AVMutableMovie _classForTrackInspectors]
  -[AVMutableMovie removeTimeRange:]
  -[AVMutableMovie interleavingPeriod]
  -[AVMutableMovie insertTimeRange:ofAsset:atTime:copySampleData:error:]
  -[AVMutableMovie metadata]
  -[AVMutableMovie URL]
  -[AVMutableMovie addMutableTrackWithMediaType:copySettingsFromTrack:options:]
  -[AVMutableMovie mutableTrackCompatibleWithTrack:]
  -[AVMutableMovie isModified]
  -[AVMutableMovie setInterleavingPeriod:]
  -[AVMutableMovie _figMutableMovie]
  -[AVMutableMovie initWithSettingsFromMovie:options:error:]
  -[AVMutableMovie _signalTracksUpdated]
  -[AVMutableMovie _initWithFigAsset:]
  -[AVMutableMovie timescale]
  -[AVMutableMovie _initWithFigError:userInfo:]
  -[AVMutableMovie initWithFileType:copySettingsFromMovie:options:]
  -[AVMutableMovie init]
  -[AVMutableMovie _initWithFormatReader:URL:data:options:]
  -[AVMutableMovie data]


AVHUDStringGenerator : NSObject
 @property  AVPlayer *player
 @property  BOOL spatialDiagnostics
 @property  BOOL captureCompleteURI
 @property  long long prevVariantIdx
 @property  long long prevStallCount
 @property  long long totalStallCount
 @property  NSString *formattedDisplayString
 @property  NSNumber *displayResolutionHeight
 @property  NSNumber *displayResolutionWidth
 @property  NSNumber *audioSpatializationMode

  // class methods
  +[AVHUDStringGenerator descriptionStringForFormatOfTrack:]
  +[AVHUDStringGenerator descriptionStringForBitRate:]
  +[AVHUDStringGenerator descriptionStringForVideoRangeOfFormatDescription:]
  +[AVHUDStringGenerator descriptionStringForTracksOfPlayerItem:]

  // instance methods
  -[AVHUDStringGenerator dealloc]
  -[AVHUDStringGenerator .cxx_destruct]
  -[AVHUDStringGenerator update]
  -[AVHUDStringGenerator player]
  -[AVHUDStringGenerator setPlayer:]
  -[AVHUDStringGenerator updateFromPlayer]
  -[AVHUDStringGenerator updateFromPlayerItem]
  -[AVHUDStringGenerator formattedDisplayString]
  -[AVHUDStringGenerator spatialDiagnostics]
  -[AVHUDStringGenerator setSpatialDiagnostics:]
  -[AVHUDStringGenerator captureCompleteURI]
  -[AVHUDStringGenerator setCaptureCompleteURI:]
  -[AVHUDStringGenerator prevVariantIdx]
  -[AVHUDStringGenerator setPrevVariantIdx:]
  -[AVHUDStringGenerator prevStallCount]
  -[AVHUDStringGenerator setPrevStallCount:]
  -[AVHUDStringGenerator totalStallCount]
  -[AVHUDStringGenerator setTotalStallCount:]
  -[AVHUDStringGenerator displayResolutionWidth]
  -[AVHUDStringGenerator displayResolutionHeight]
  -[AVHUDStringGenerator audioSpatializationMode]


AVNetworkPlaybackPerfHUDLayer : CATextLayer
 @property  AVPlayer *player
 @property  AVPlayerLayer *playerLayer

  // instance methods
  -[AVNetworkPlaybackPerfHUDLayer playerLayer]
  -[AVNetworkPlaybackPerfHUDLayer updateBounds:]
  -[AVNetworkPlaybackPerfHUDLayer readHudSettingsAndCallCompletionHandler:]
  -[AVNetworkPlaybackPerfHUDLayer startDispatchTimer]
  -[AVNetworkPlaybackPerfHUDLayer getScaleFactorForDisplaySize:]
  -[AVNetworkPlaybackPerfHUDLayer currentItemChanged]
  -[AVNetworkPlaybackPerfHUDLayer dealloc]
  -[AVNetworkPlaybackPerfHUDLayer .cxx_destruct]
  -[AVNetworkPlaybackPerfHUDLayer displayStringGenerator]
  -[AVNetworkPlaybackPerfHUDLayer _hudUpdateTrigger]
  -[AVNetworkPlaybackPerfHUDLayer player]
  -[AVNetworkPlaybackPerfHUDLayer currentItemTracksChanged]
  -[AVNetworkPlaybackPerfHUDLayer valueLoadedForKey:onObject:]
  -[AVNetworkPlaybackPerfHUDLayer copyPropertiesFromStringGenerator:]
  -[AVNetworkPlaybackPerfHUDLayer setPlayerLayer:]
  -[AVNetworkPlaybackPerfHUDLayer setPlayer:]
  -[AVNetworkPlaybackPerfHUDLayer setColor:]
  -[AVNetworkPlaybackPerfHUDLayer getHudSetting]
  -[AVNetworkPlaybackPerfHUDLayer updateHudWithDisplayString:]
  -[AVNetworkPlaybackPerfHUDLayer init]
  -[AVNetworkPlaybackPerfHUDLayer hudEnabled]


AVContentKeyRequestInternal : NSObject
  // instance methods
  -[AVContentKeyRequestInternal .cxx_destruct]


AVContentKeyRequest : NSObject
 @property  long long status
 @property  NSError *error
 @property  id identifier
 @property  NSData *initializationData
 @property  NSDictionary *options
 @property  BOOL canProvidePersistableContentKey
 @property  AVContentKeySpecifier *contentKeySpecifier
 @property  AVContentKey *contentKey

  // class methods
  +[AVContentKeyRequest _prepareCryptor:forRenewal:andReturnKeyRequestID:isInchargeOfKeyRequest:error:]
  +[AVContentKeyRequest _mergePreloadingRequestOptions:withCreateKeyRequestOptions:]
  +[AVContentKeyRequest _validateProtocolVersionList:]
  +[AVContentKeyRequest _validateHLSEncryptionMethod:]
  +[AVContentKeyRequest _validateServerChallenge:]
  +[AVContentKeyRequest _ensureProtocolVersionList:]
  +[AVContentKeyRequest _createKeyRequestDictionaryForApp:persistentKey:serverChallenge:cryptorKeyRequestID:purpose:]

  // instance methods
  -[AVContentKeyRequest _setStatus:]
  -[AVContentKeyRequest identifier]
  -[AVContentKeyRequest session]
  -[AVContentKeyRequest error]
  -[AVContentKeyRequest status]
  -[AVContentKeyRequest dealloc]
  -[AVContentKeyRequest options]
  -[AVContentKeyRequest _clearContext]
  -[AVContentKeyRequest _setError:]
  -[AVContentKeyRequest contentKey]
  -[AVContentKeyRequest _requestID]
  -[AVContentKeyRequest figCryptor]
  -[AVContentKeyRequest initializationData]
  -[AVContentKeyRequest contentKeySpecifier]
  -[AVContentKeyRequest initWithContentKeySession:reportGroup:identifier:contentIdentifier:keyIDFromInitializationData:initializationData:preloadingRequestOptions:providesPersistableKey:]
  -[AVContentKeyRequest _copyAndStoreCryptorUUID]
  -[AVContentKeyRequest initWithContentKeySession:reportGroup:customURLHandler:identifier:requestInfo:requestID:providesPersistableKey:isRenewalRequest:]
  -[AVContentKeyRequest initWithContentKeySession:contentKeyBoss:keySpecifier:initializationData:keyIDFromInitializationData:contentIdentifier:isRenewalRequest:requestID:providesPersistableKey:preloadingRequestOptions:identifier:]
  -[AVContentKeyRequest _keySystem]
  -[AVContentKeyRequest _copyContentKeyBoss]
  -[AVContentKeyRequest _encryptionMode]
  -[AVContentKeyRequest _prepareForKeyRenewalReturningError:]
  -[AVContentKeyRequest renewsExpiringResponseData]
  -[AVContentKeyRequest canProvidePersistableContentKey]
  -[AVContentKeyRequest _getRetryReasonForError:]
  -[AVContentKeyRequest _handleKeyResponseError:]
  -[AVContentKeyRequest _handleKeyResponseSuccessWithCryptor:]
  -[AVContentKeyRequest ensureCryptorWithFormatDescription:error:]
  -[AVContentKeyRequest contentKeyRequestDataForApp:contentIdentifier:options:error:]
  -[AVContentKeyRequest _makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:error:]
  -[AVContentKeyRequest makeStreamingContentKeyRequestDataForApp:contentIdentifier:options:completionHandler:]
  -[AVContentKeyRequest processContentKeyResponseData:]
  -[AVContentKeyRequest processContentKeyResponseData:renewalDate:error:]
  -[AVContentKeyRequest _processContentKeyResponse:renewalDate:initalizationVector:error:]
  -[AVContentKeyRequest processContentKeyResponse:]
  -[AVContentKeyRequest _processContentKeyResponseError:]
  -[AVContentKeyRequest processContentKeyResponseError:]
  -[AVContentKeyRequest renewExpiringContentKeyResponseData]
  -[AVContentKeyRequest _canRespondByRequestingPersistableContentKeyRequest]
  -[AVContentKeyRequest respondByRequestingPersistableContentKeyRequestAndReturnError:]
  -[AVContentKeyRequest respondByRequestingPersistableContentKeyRequest]
  -[AVContentKeyRequest _sendResponseInfoToCustomURLHandlerWithRenewalDate:]
  -[AVContentKeyRequest _finishLoadingCustomURLRequestWithResponseData:renewalDate:]
  -[AVContentKeyRequest _finishLoadingCustomURLRequestWithError:]
  -[AVContentKeyRequest willOutputBeObscuredDueToInsufficientExternalProtectionForDisplays:]
  -[AVContentKeyRequest externalContentProtectionStatus]
  -[AVContentKeyRequest setReportGroup:]


AVPersistableContentKeyRequest : AVContentKeyRequest
  // instance methods
  -[AVPersistableContentKeyRequest persistableContentKeyFromKeyVendorResponse:options:error:]


AVContentKeyResponseFairPlayStreaming : AVContentKeyResponse
  // instance methods
  -[AVContentKeyResponseFairPlayStreaming dealloc]
  -[AVContentKeyResponseFairPlayStreaming initWithKeyData:renewalDate:]


AVContentKeyResponseClearKey : AVContentKeyResponse
  // instance methods
  -[AVContentKeyResponseClearKey dealloc]
  -[AVContentKeyResponseClearKey initWithKeyData:initializationVector:]


AVContentKeyResponseAuthorizationToken : AVContentKeyResponse
  // instance methods
  -[AVContentKeyResponseAuthorizationToken dealloc]
  -[AVContentKeyResponseAuthorizationToken initWithAuthorizationTokenData:]


AVContentKeyResponseInternal : NSObject

AVContentKeyPSSHRequestTracker : NSObject
  // instance methods
  -[AVContentKeyPSSHRequestTracker requests]
  -[AVContentKeyPSSHRequestTracker dealloc]
  -[AVContentKeyPSSHRequestTracker addRequest:]
  -[AVContentKeyPSSHRequestTracker initWithRequestCount:]
  -[AVContentKeyPSSHRequestTracker haveAllRequestsBeenReceived]


AVContentKeyRequestParams : NSObject
 @property  NSData *initializationData
 @property  NSData *contentIdentifier
 @property  NSData *keyIDFromInitializationData
 @property  NSDictionary *options
 @property  id identifier

  // instance methods
  -[AVContentKeyRequestParams identifier]
  -[AVContentKeyRequestParams contentIdentifier]
  -[AVContentKeyRequestParams dealloc]
  -[AVContentKeyRequestParams options]
  -[AVContentKeyRequestParams setIdentifier:]
  -[AVContentKeyRequestParams setOptions:]
  -[AVContentKeyRequestParams setContentIdentifier:]
  -[AVContentKeyRequestParams keyIDFromInitializationData]
  -[AVContentKeyRequestParams initializationData]
  -[AVContentKeyRequestParams initWithInitializationData:contentIdentifier:keyIDFromInitializationData:options:identifier:]
  -[AVContentKeyRequestParams setInitializationData:]
  -[AVContentKeyRequestParams setKeyIDFromInitializationData:]


AVContentKeyResponse : NSObject
  // class methods
  +[AVContentKeyResponse contentKeyResponseWithFairPlayStreamingKeyResponseData:]
  +[AVContentKeyResponse contentKeyResponseWithFairPlayStreamingKeyResponseData:renewalDate:]
  +[AVContentKeyResponse contentKeyResponseWithClearKeyData:initializationVector:]
  +[AVContentKeyResponse contentKeyResponseWithAuthorizationTokenData:]

  // instance methods
  -[AVContentKeyResponse dealloc]
  -[AVContentKeyResponse initWithKeySystem:]
  -[AVContentKeyResponse keySystem]


AVContentKeySessionInternal : NSObject

AVContentKeySession : NSObject
 @property  BOOL internal
 @property  AVContentKeyReportGroup *defaultContentKeyGroup
 @property  <AVContentKeySessionDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *delegateQueue
 @property  NSURL *storageURL
 @property  NSString *keySystem
 @property  NSData *contentProtectionSessionIdentifier

  // class methods
  +[AVContentKeySession initialize]
  +[AVContentKeySession contentKeySessionWithKeySystem:]
  +[AVContentKeySession copyDefaultSecureStopManagerForAppIdentifier:storageDirectoryAtURL:]
  +[AVContentKeySession contentKeySessionWithKeySystem:storageDirectoryAtURL:]
  +[AVContentKeySession pendingExpiredSessionReportsWithAppIdentifier:storageDirectoryAtURL:]
  +[AVContentKeySession removePendingExpiredSessionReports:withAppIdentifier:storageDirectoryAtURL:]
  +[AVContentKeySession _uniqueIDForCyptorUUID:cryptorKeyRequestID:]

  // instance methods
  -[AVContentKeySession isInternal]
  -[AVContentKeySession setDelegate:]
  -[AVContentKeySession delegate]
  -[AVContentKeySession expire]
  -[AVContentKeySession dealloc]
  -[AVContentKeySession delegateQueue]
  -[AVContentKeySession _internalQueue]
  -[AVContentKeySession _weakReference]
  -[AVContentKeySession setDelegate:queue:]
  -[AVContentKeySession storageURL]
  -[AVContentKeySession init]
  -[AVContentKeySession setAppIdentifier:]
  -[AVContentKeySession _willDeallocOrFinalize]
  -[AVContentKeySession keySystem]
  -[AVContentKeySession _contentKeyGroups]
  -[AVContentKeySession initWithStorageDirectoryAtURL:]
  -[AVContentKeySession didProvideKeyRequestWithBoss:keySpecifier:requestID:renewalRequest:]
  -[AVContentKeySession removeResourcesForID:]
  -[AVContentKeySession contentKeyRequestDidSucceedWithBoss:keySpecifier:requestID:cryptor:]
  -[AVContentKeySession externalProtectionStateChangedCallbackWithBoss:keySpecifier:]
  -[AVContentKeySession defaultGroupID]
  -[AVContentKeySession initWithKeySystem:storageDirectoryAtURL:]
  -[AVContentKeySession addContentKeyRecipient:]
  -[AVContentKeySession removeContentKeyRecipient:]
  -[AVContentKeySession contentKeyRecipients]
  -[AVContentKeySession contentProtectionSessionIdentifier]
  -[AVContentKeySession processContentKeyRequestForSinf:initializationData:groupID:options:]
  -[AVContentKeySession processContentKeyRequestForPSSHEntries:initializationData:groupID:options:]
  -[AVContentKeySession processContentKeyRequestForTransportStreamWithCodecType:initializationData:groupID:options:]
  -[AVContentKeySession _processContentKeyRequestWithIdentifier:initializationData:options:groupID:]
  -[AVContentKeySession processContentKeyRequestWithIdentifier:initializationData:options:]
  -[AVContentKeySession renewExpiringResponseDataForContentKeyRequest:]
  -[AVContentKeySession makeSecureTokenForExpirationDateOfPersistableContentKey:completionHandler:]
  -[AVContentKeySession invalidatePersistableContentKey:options:completionHandler:]
  -[AVContentKeySession invalidateAllPersistableContentKeysForApp:options:completionHandler:]
  -[AVContentKeySession _handleSecureStopDidFinalizeRecordCallback]
  -[AVContentKeySession _handleExternalProtectionStateChangedCallbackForCryptKeyIdentifier:]
  -[AVContentKeySession _setContentKeyRequest:forCryptorUUID:cryptorKeyRequestID:]
  -[AVContentKeySession _contentKeyRequestForCryptorUUID:cryptorKeyRequestID:]
  -[AVContentKeySession _removeContentKeyRequestForCryptorUUID:cryptorKeyRequestID:]
  -[AVContentKeySession _setWeakReferenceForContentKeyRequest:withCryptorUUID:]
  -[AVContentKeySession _invokeDelegateCallbackWithBlock:synchronouslyWhenDelegateQueueIsNULL:]
  -[AVContentKeySession _handleKeyResponseError:forCryptorUUID:andCryptorKeyRequestID:]
  -[AVContentKeySession _handleKeyResponseSuccessfullyProcessedForCryptorUUID:andCryptorKeyRequestID:]
  -[AVContentKeySession _handleUpdateToPersistentKey:forKeyIdentifier:]
  -[AVContentKeySession _handleContentProtectionSessionIdentifierDidChange:]
  -[AVContentKeySession clientCanReceivePersistableContentKeyRequest]
  -[AVContentKeySession issueContentKeyRequests:forInitializationData:]
  -[AVContentKeySession issueContentKeyRequest:toDelegateWithCallbackSelector:]
  -[AVContentKeySession issueContentKeyRequest:]
  -[AVContentKeySession issuePersistableContentKeyRequest:]
  -[AVContentKeySession issueRenewableContentKeyRequest:]
  -[AVContentKeySession issueContentKeyRequestWithCustomURLHandler:identifier:requestInfo:requestID:providesPersistableKey:]
  -[AVContentKeySession issueContentKeyRequestWithPreloadingRequestOptions:identifier:initializationData:providesPersistableKey:]
  -[AVContentKeySession contentKeyRequestDidProduceContentKey:]
  -[AVContentKeySession issuePersistableContentKeyRequestForKeySpecifier:initializationData:keyIDFromInitializationData:contentIdentifier:requestID:preloadingRequestOptions:identifier:]
  -[AVContentKeySession keyRequestByID:]
  -[AVContentKeySession trackRequest:byRequestID:]
  -[AVContentKeySession initWithKeySystem:storageDirectoryAtURL:internal:]
  -[AVContentKeySession hasProtector]
  -[AVContentKeySession issueContentKeyRequestForInitializationData:]
  -[AVContentKeySession _sendFinishLoadingForPreloadedKeyRequest:withRequestID:fromHandler:error:]
  -[AVContentKeySession copyCryptorForInitializationData:]
  -[AVContentKeySession copyCryptorForFormatDescription:cryptorOut:errorOut:]
  -[AVContentKeySession createCryptorIfNecessaryForInitializationData:formatDescription:error:]
  -[AVContentKeySession copyCryptorForCryptKeyAttributes:]
  -[AVContentKeySession _handleRequest:withRequestID:fromHandler:willHandleRequest:]
  -[AVContentKeySession createAndInstallCustomURLHandlerForAsset:outHandler:]
  -[AVContentKeySession defaultContentKeyGroup]
  -[AVContentKeySession makeContentKeyGroup]
  -[AVContentKeySession _processContentKeyRequestWithIdentifier:encryptionMode:supportedProtocolVersions:groupID:error:]
  -[AVContentKeySession _renewKeyWithIdentifier:encryptionMode:error:]
  -[AVContentKeySession _makeContentKeyGroupWithIDOut:error:]


AVContentKeyReportGroup : NSObject
 @property  NSData *contentProtectionSessionIdentifier

  // instance methods
  -[AVContentKeyReportGroup expire]
  -[AVContentKeyReportGroup dealloc]
  -[AVContentKeyReportGroup _contentKeyBoss]
  -[AVContentKeyReportGroup contentProtectionSessionIdentifier]
  -[AVContentKeyReportGroup processContentKeyRequestWithIdentifier:initializationData:options:]
  -[AVContentKeyReportGroup hasProtector]
  -[AVContentKeyReportGroup copyCryptorForCryptKeyAttributes:]
  -[AVContentKeyReportGroup _contentKeySession]
  -[AVContentKeyReportGroup cryptorOptionsForIdentifier:initializationData:formatDescription:hlsMethod:]
  -[AVContentKeyReportGroup failProcessingContentKeyRequestWithIdentifier:initializationData:error:]
  -[AVContentKeyReportGroup _processContentKeyRequestWithIdentifier:contentIdentifier:keyIDFromInitializationData:initializationData:options:]
  -[AVContentKeyReportGroup _processContentKeyRequestWithKeyRequestFromPSSH:decryptFormatType:initializationData:options:]
  -[AVContentKeyReportGroup _associateRequestWithGroupWithRequestID:error:]
  -[AVContentKeyReportGroup associateContentKeyRequest:]
  -[AVContentKeyReportGroup _destroyContentKeyGroupWithError:]
  -[AVContentKeyReportGroup _figContentKeySession]
  -[AVContentKeyReportGroup createCryptorIfNecessaryForIdentifier:initializationData:formatDescription:hlsMethod:error:]
  -[AVContentKeyReportGroup copyCryptorForIdentifier:initializationData:]
  -[AVContentKeyReportGroup initWithKeySystem:keySession:contentKeyBoss:groupID:storageDirectoryAtURL:]
  -[AVContentKeyReportGroup createProtectorSessionIdentifierIfNecessary]
  -[AVContentKeyReportGroup configureAppIdentifier:]
  -[AVContentKeyReportGroup _setAuthorizationToken:forIdentifier:error:]
  -[AVContentKeyReportGroup externalProtectionStatusForCryptor:withDisplays:]


AVContentKeySpecifier : NSObject
 @property  NSData *initializationData
 @property  NSString *keySystem
 @property  id identifier
 @property  NSDictionary *options

  // class methods
  +[AVContentKeySpecifier contentKeySpecifierForKeySystem:identifier:options:]

  // instance methods
  -[AVContentKeySpecifier identifier]
  -[AVContentKeySpecifier dealloc]
  -[AVContentKeySpecifier options]
  -[AVContentKeySpecifier copyWithZone:]
  -[AVContentKeySpecifier initializationData]
  -[AVContentKeySpecifier keySystem]
  -[AVContentKeySpecifier initForKeySystem:identifier:initializationData:options:]
  -[AVContentKeySpecifier initForKeySystem:identifier:options:]
  -[AVContentKeySpecifier initForKeySystem:initializationData:]


AVContentKey : NSObject
 @property  AVContentKeySpecifier *contentKeySpecifier

  // class methods
  +[AVContentKey contentKeyWithSpecifier:andCryptor:]

  // instance methods
  -[AVContentKey dealloc]
  -[AVContentKey cryptor]
  -[AVContentKey contentKeySpecifier]
  -[AVContentKey initWithSpecifier:andCryptor:]


AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl : NSObject <AVOutputDeviceAuthorizationSessionImpl>
 @property  ^{OpaqueFigEndpointUIAgent=} figEndpointUIAgent
 @property  AVOutputDeviceAuthorizationSession *parentAuthorizationSession
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl outputDeviceAuthorizationRequestImplDidCancel:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl setParentAuthorizationSession:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl _startNewRequest:impl:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl dealloc]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl .cxx_destruct]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl parentAuthorizationSession]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl outputDeviceAuthorizationRequestImpl:didRespondWithAuthorizationToken:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl figEndpointUIAgent]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl _notifyCurrentRequestOfTerminalStatus:error:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl _showAuthPromptWithUniqueID:routeDescriptor:pinMode:reason:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl _finishedWithPrompt]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl initWithFigEndpointUIAgent:]


AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl : NSObject <AVOutputDeviceAuthorizationRequestImpl>
 @property  AVFigEndpointUIAgentOutputDeviceAuthorizationSessionImpl *parentAuthorizationSessionImpl
 @property  NSString *ID
 @property  AVOutputDevice *outputDevice
 @property  NSString *authorizationTokenType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl ID]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl dealloc]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl .cxx_destruct]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl outputDevice]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl cancel]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl authorizationTokenType]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl respondWithAuthorizationToken:completionHandler:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl initWithID:outputDevice:authorizationTokenType:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl enterTerminalStatus:error:]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl parentAuthorizationSessionImpl]
  -[AVFigEndpointUIAgentOutputDeviceAuthorizationRequestImpl setParentAuthorizationSessionImpl:]


AVRouteDetectorInternal : NSObject

AVRouteDetector : NSObject
 @property  BOOL routeDetectionEnabled
 @property  BOOL multipleRoutesDetected
 @property  BOOL detectsCustomRoutes

  // class methods
  +[AVRouteDetector initialize]

  // instance methods
  -[AVRouteDetector dealloc]
  -[AVRouteDetector _didEnterBackground]
  -[AVRouteDetector init]
  -[AVRouteDetector multipleRoutesDetected]
  -[AVRouteDetector detectsCustomRoutes]
  -[AVRouteDetector isRouteDetectionEnabled]
  -[AVRouteDetector setRouteDetectionEnabled:]
  -[AVRouteDetector setDetectsCustomRoutes:]
  -[AVRouteDetector _updateMultipleRoutesDetected]
  -[AVRouteDetector _updateRouteDetectionEnabled]
  -[AVRouteDetector _isAirPlayDevicePresenceDetected]
  -[AVRouteDetector _isCustomRoutePresenceDetected]
  -[AVRouteDetector _didEnterForeground]


AVStreamDataParserInternal : NSObject

AVStreamDataParser : NSObject <AVContentKeySessionDelegate, AVContentKeyRecipient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSData *contentProtectionSessionIdentifier
 @property  BOOL mayRequireContentKeysForMediaDataProcessing
 @property  <AVStreamDataParserOutputHandling> *delegate
 @property  long long status
 @property  long long status2
 @property  NSError *error
 @property  NSArray *allowableMIMETypes
 @property  NSArray *fullListOfAllowableMIMETypes
 @property  AVAsset *asset

  // class methods
  +[AVStreamDataParser audiovisualMIMETypes]
  +[AVStreamDataParser canParseExtendedMIMEType:]
  +[AVStreamDataParser outputMIMECodecParameterForInputMIMECodecParameter:]
  +[AVStreamDataParser _createBlockBufferUsingNSData:withOffset:withLength:]
  +[AVStreamDataParser _createNSDataWithBlockBuffer:]

  // instance methods
  -[AVStreamDataParser setDelegate:]
  -[AVStreamDataParser setSession:]
  -[AVStreamDataParser delegate]
  -[AVStreamDataParser error]
  -[AVStreamDataParser expire]
  -[AVStreamDataParser status]
  -[AVStreamDataParser dealloc]
  -[AVStreamDataParser setStatus:]
  -[AVStreamDataParser contentKeySession:didProvideContentKeyRequest:]
  -[AVStreamDataParser asset]
  -[AVStreamDataParser _setError:]
  -[AVStreamDataParser init]
  -[AVStreamDataParser mayRequireContentKeysForMediaDataProcessing]
  -[AVStreamDataParser _attachToContentKeySession:contentKeyBoss:failedSinceAlreadyAttachedToAnotherSession:]
  -[AVStreamDataParser contentKeySession]
  -[AVStreamDataParser _attachedToExternalContentKeySession]
  -[AVStreamDataParser _willDeallocOrFinalize]
  -[AVStreamDataParser contentProtectionSessionIdentifier]
  -[AVStreamDataParser contentKeySessionContentProtectionSessionIdentifierDidChange:]
  -[AVStreamDataParser hasProtector]
  -[AVStreamDataParser status2]
  -[AVStreamDataParser appendStreamData:]
  -[AVStreamDataParser setAllowableMIMETypes:]
  -[AVStreamDataParser allowableMIMETypes]
  -[AVStreamDataParser fullListOfAllowableMIMETypes]
  -[AVStreamDataParser _appendStreamData:withFlags:]
  -[AVStreamDataParser appendStreamData:withFlags:]
  -[AVStreamDataParser providePendingMediaData]
  -[AVStreamDataParser setShouldProvideMediaData:forTrackID:]
  -[AVStreamDataParser shouldProvideMediaDataForTrackID:]
  -[AVStreamDataParser _createAssetIfNecessary]
  -[AVStreamDataParser _figManifold:pushedSampleBuffer:trackID:flags:]
  -[AVStreamDataParser _figManifold:trackDidEnd:]
  -[AVStreamDataParser _figManifold:formatDescription:orDecryptorDidChange:forTrackID:]
  -[AVStreamDataParser _registerForFigManifoldCallbacksForTrackID:]
  -[AVStreamDataParser _unregisterForFigManifoldCallbacksForTrackID:]
  -[AVStreamDataParser _figManifoldAllNewTracksReady:]
  -[AVStreamDataParser _figManifold:discoveredNewTrackID:mediaType:]
  -[AVStreamDataParser _WebVTTIsAllowed]
  -[AVStreamDataParser _MPEG2TSIsAllowed]
  -[AVStreamDataParser _MovieFragmentStreamIsAllowed]
  -[AVStreamDataParser _ICYIsAllowed]
  -[AVStreamDataParser _fullListOfAllowableMIMETypes]
  -[AVStreamDataParser _createFigManifoldWithBlockBuffer:manifold:]
  -[AVStreamDataParser contentKeySession:didProvideContentKeyRenewalRequest:]
  -[AVStreamDataParser processContentKeyResponseData:forTrackID:]
  -[AVStreamDataParser processContentKeyResponseError:forTrackID:]
  -[AVStreamDataParser renewExpiringContentKeyResponseDataForTrackID:]
  -[AVStreamDataParser streamingContentKeyRequestDataForApp:contentIdentifier:trackID:options:error:]


AVStreamDataAssetTrackInspector : AVAssetTrackInspector
  // instance methods
  -[AVStreamDataAssetTrackInspector formatDescriptions]
  -[AVStreamDataAssetTrackInspector naturalSize]
  -[AVStreamDataAssetTrackInspector _initWithAsset:trackID:trackIndex:]
  -[AVStreamDataAssetTrackInspector trackID]
  -[AVStreamDataAssetTrackInspector timeRange]
  -[AVStreamDataAssetTrackInspector mediaType]
  -[AVStreamDataAssetTrackInspector dealloc]
  -[AVStreamDataAssetTrackInspector dimensions]
  -[AVStreamDataAssetTrackInspector isEnabled]
  -[AVStreamDataAssetTrackInspector mediaCharacteristics]
  -[AVStreamDataAssetTrackInspector figMediaType]


AVStreamDataAssetInspector : AVAssetInspector
  // instance methods
  -[AVStreamDataAssetInspector trackCount]
  -[AVStreamDataAssetInspector providesPreciseDurationAndTiming]
  -[AVStreamDataAssetInspector dealloc]
  -[AVStreamDataAssetInspector duration]
  -[AVStreamDataAssetInspector isEqual:]
  -[AVStreamDataAssetInspector trackIDs]
  -[AVStreamDataAssetInspector initWithTrackIDs:]


AVStreamDataInspectionOnlyAsset : AVURLAsset
  // instance methods
  -[AVStreamDataInspectionOnlyAsset isReadable]
  -[AVStreamDataInspectionOnlyAsset isPlayable]
  -[AVStreamDataInspectionOnlyAsset isComposable]
  -[AVStreamDataInspectionOnlyAsset isCompatibleWithAirPlayVideo]
  -[AVStreamDataInspectionOnlyAsset initWithFigAsset:]
  -[AVStreamDataInspectionOnlyAsset isCompatibleWithPhotosTranscodingServiceWithOptions:]
  -[AVStreamDataInspectionOnlyAsset isExportable]
  -[AVStreamDataInspectionOnlyAsset isCompatibleWithSavedPhotosAlbum]


AVStreamDataAsset : AVAsset
  // instance methods
  -[AVStreamDataAsset parser]
  -[AVStreamDataAsset dealloc]
  -[AVStreamDataAsset .cxx_destruct]
  -[AVStreamDataAsset _formatReader]
  -[AVStreamDataAsset tracks]
  -[AVStreamDataAsset _classForTrackInspectors]
  -[AVStreamDataAsset _assetInspector]
  -[AVStreamDataAsset _assetInspectorLoader]
  -[AVStreamDataAsset initWithParser:tracks:]
  -[AVStreamDataAsset copyAssetWithAdditionalTrackID:mediaType:]
  -[AVStreamDataAsset copyAssetWithReplacementFormatDescription:forTrackID:]
  -[AVStreamDataAsset copyAssetRemovingTrackID:]
  -[AVStreamDataAsset mediaTypeForTrackID:]
  -[AVStreamDataAsset formatDescriptionsForTrackID:]


NSValue(NSValueCMTimeExtensions)
	// class methods
	+[NSValue(NSValueCMTimeExtensions) valueWithCMTime:]
	+[NSValue(NSValueCMTimeExtensions) valueWithCMTimeRange:]
	+[NSValue(NSValueCMTimeExtensions) valueWithCMTimeMapping:]
	+[NSValue(NSValueCMTimeExtensions) valueWithCMVideoDimensions:]

	// instance methods
	-[NSValue(NSValueCMTimeExtensions) CMTimeValue]
	-[NSValue(NSValueCMTimeExtensions) CMTimeRangeValue]
	-[NSValue(NSValueCMTimeExtensions) CMTimeMappingValue]
	-[NSValue(NSValueCMTimeExtensions) CMVideoDimensionsValue]

NSCoder(AVTimeCoding)
	// instance methods
	-[NSCoder(AVTimeCoding) encodeCMTime:forKey:]
	-[NSCoder(AVTimeCoding) decodeCMTimeForKey:]
	-[NSCoder(AVTimeCoding) encodeCMTimeRange:forKey:]
	-[NSCoder(AVTimeCoding) decodeCMTimeRangeForKey:]
	-[NSCoder(AVTimeCoding) encodeCMTimeMapping:forKey:]
	-[NSCoder(AVTimeCoding) decodeCMTimeMappingForKey:]

01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: AVAssetDownloadTask 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: AVAssetDownloadURLSession 
01 00 0100 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0c00 /System/Library/PrivateFrameworks/MediaExperience.framework/MediaExperience: AVSystemController 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimationGroup 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPropertyAnimation 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATextLayer 
01 00 1400 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 0600 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIColor 
01 00 0600 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIContext 
01 00 0600 /System/Library/Frameworks/CoreImage.framework/CoreImage: CIImage 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigAlternateObjC 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigAlternatePredicateValidator 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigBaseCABackdropLayer 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigBaseCALayer 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigBaseCALayerHost 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigSubtitleCALayer 
01 00 0e00 /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox: FigVideoContainerLayer 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSAutoreleasePool 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSCoder 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSCondition 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSEnumerator 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSFormatter 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPCookie 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSHTTPURLResponse 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableData 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSMutableURLRequest 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 1a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSOrderedCollectionDifference 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicateOperator 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSSecurityScopedURLWrapper 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0d00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLAuthenticationChallenge 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredential 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSession 
01 00 0500 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLSessionTask 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCCoder 
01 00 0200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAssertion 
01 00 0200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSDomainAttribute 
01 00 0200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessHandle 
01 00 0200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTarget 
01 00 0f00 /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers: UTType 
