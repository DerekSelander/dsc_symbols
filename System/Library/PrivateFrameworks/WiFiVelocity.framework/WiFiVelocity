|| __DATA.__objc_data _OBJC_CLASS_$_W5Client
|| __DATA.__objc_data _OBJC_METACLASS_$_W5Client
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5AWDLStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5BluetoothDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5BluetoothStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5DebugConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5DiagnosticsTestRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5DiagnosticsTestResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5Event
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5LogItemReceipt
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5LogItemRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5NetworkStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5Peer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5PerfConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5PerfResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5PerfUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5PingResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5PowerStatus
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5SpeedTestResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5Status
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5WiFiChannel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5WiFiLinkQualityUpdate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5WiFiPreferredNetwork
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5WiFiScanResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_W5WiFiStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5AWDLStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5BluetoothDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5BluetoothStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5DebugConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5DiagnosticsTestRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5DiagnosticsTestResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5Event
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5LogItemReceipt
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5LogItemRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5NetworkStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5Peer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5PerfConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5PerfResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5PerfUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5PingResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5PowerStatus
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5SpeedTestResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5Status
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5WiFiChannel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5WiFiLinkQualityUpdate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5WiFiPreferredNetwork
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5WiFiScanResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_W5WiFiStatus
|| __TEXT.__text _W5DebugDescriptionForAWDLSyncChannelSequence
|| __TEXT.__text _W5DebugDescriptionForAWDLSyncState
|| __TEXT.__text _W5DescriptionForAWDLElectionParameters
|| __TEXT.__text _W5DescriptionForAWDLOpMode
|| __TEXT.__text _W5DescriptionForAWDLScheduleState
|| __TEXT.__text _W5DescriptionForAWDLSyncChannelSequence
|| __TEXT.__text _W5DescriptionForAWDLSyncParameters
|| __TEXT.__text _W5DescriptionForAWDLSyncState
|| __TEXT.__text _W5DescriptionForAirDropDiscoverableMode
|| __TEXT.__text _W5DescriptionForBTCMode
|| __TEXT.__text _W5DescriptionForBTCProfile
|| __TEXT.__text _W5DescriptionForBatteryWarningLevel
|| __TEXT.__text _W5DescriptionForBluetoothDeviceConnectionMode
|| __TEXT.__text _W5DescriptionForBluetoothDeviceManufacturer
|| __TEXT.__text _W5DescriptionForBluetoothDeviceRole
|| __TEXT.__text _W5DescriptionForBluetoothDeviceType
|| __TEXT.__text _W5DescriptionForChainAck
|| __TEXT.__text _W5DescriptionForChainPowerState
|| __TEXT.__text _W5DescriptionForChannel
|| __TEXT.__text _W5DescriptionForChannelWidth
|| __TEXT.__text _W5DescriptionForDesense
|| __TEXT.__text _W5DescriptionForDesenseFlags
|| __TEXT.__text _W5DescriptionForDeviceType
|| __TEXT.__text _W5DescriptionForDiagnosticsTestID
|| __TEXT.__text _W5DescriptionForDiagnosticsTestResult
|| __TEXT.__text _W5DescriptionForEAPOLControlMode
|| __TEXT.__text _W5DescriptionForEAPOLControlState
|| __TEXT.__text _W5DescriptionForEAPOLSupplicantState
|| __TEXT.__text _W5DescriptionForEventID
|| __TEXT.__text _W5DescriptionForIPv4ConfigMethod
|| __TEXT.__text _W5DescriptionForIPv6ConfigMethod
|| __TEXT.__text _W5DescriptionForLogItemID
|| __TEXT.__text _W5DescriptionForLogState
|| __TEXT.__text _W5DescriptionForOpMode
|| __TEXT.__text _W5DescriptionForPHYMode
|| __TEXT.__text _W5DescriptionForPerfConfiguration
|| __TEXT.__text _W5DescriptionForPingTrafficClass
|| __TEXT.__text _W5DescriptionForPower
|| __TEXT.__text _W5DescriptionForPowerSourceType
|| __TEXT.__text _W5DescriptionForPowerStateCaps
|| __TEXT.__text _W5DescriptionForReachabilityFlags
|| __TEXT.__text _W5DescriptionForSecurity
|| __TEXT.__text _W5DescriptionForTxChainPower
|| __TEXT.__text _W5DescriptionForWiFiDropReason
|| __TEXT.__text _W5ExtendedDescriptionForDiagnosticsTestID
|| __TEXT.__text _W5FormattedDescriptionForDebugConfiguration
|| __TEXT.__text _W5FormattedDescriptionForDiagnosticsTestResult
|| __TEXT.__text _W5FormattedDescriptionForDiagnosticsTestResult2
|| __TEXT.__text _W5FormattedDescriptionForStatus
|| __TEXT.__text _W5FormattedHeaderForDiagnosticsTestResults
|| __TEXT.__text _W5FormattedHeaderForDiagnosticsTestResults2
|| __TEXT.__text _W5IsSelfAssignedIPv4
|| __TEXT.__text _W5IsSelfAssignedIPv6
|| __TEXT.__text _W5MachineSerialNumber
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFRelease
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: _kCFAllocatorDefault
__ CoreLocation: _OBJC_CLASS_$_CLLocation
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSTaskDidTerminateNotification
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSTask
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ IOKit: _IOObjectRelease
__ IOKit: _IOPMGetCapabilitiesDescription
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _kIOMasterPortDefault
__ MobileWiFi: _WiFiManagerClientCopyNetworks
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiNetworkCopyHS20Account
__ MobileWiFi: _WiFiNetworkCopyRecord
__ MobileWiFi: _WiFiNetworkCreate
__ MobileWiFi: _WiFiNetworkGetLastAssociationDate
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _WiFiNetworkGetSSIDData
__ MobileWiFi: _WiFiNetworkIsAPLeaky
__ MobileWiFi: _WiFiNetworkIsCaptive
__ MobileWiFi: _WiFiNetworkIsEAP
__ MobileWiFi: _WiFiNetworkIsEnabled
__ MobileWiFi: _WiFiNetworkIsHidden
__ MobileWiFi: _WiFiNetworkIsMultiAPEnvironment
__ MobileWiFi: _WiFiNetworkIsProvisionedHS20Network
__ MobileWiFi: _WiFiNetworkIsSAE
__ MobileWiFi: _WiFiNetworkIsWEP
__ MobileWiFi: _WiFiNetworkIsWPA
__ MobileWiFi: _WiFiNetworkIsWPAWPA2PSK
__ MobileWiFi: _kWiFiDomainName
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_read
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_get_specific
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_set_specific
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _ether_aton
__ libSystem.B.dylib: _fcntl
__ libSystem.B.dylib: _kill
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _openpty
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _read
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: dyld_stub_binder
__ libarchive.2.dylib: _archive_entry_copy_stat
__ libarchive.2.dylib: _archive_entry_free
__ libarchive.2.dylib: _archive_entry_new
__ libarchive.2.dylib: _archive_entry_set_pathname
__ libarchive.2.dylib: _archive_entry_set_perm
__ libarchive.2.dylib: _archive_error_string
__ libarchive.2.dylib: _archive_write_add_filter_gzip
__ libarchive.2.dylib: _archive_write_data
__ libarchive.2.dylib: _archive_write_free
__ libarchive.2.dylib: _archive_write_header
__ libarchive.2.dylib: _archive_write_new
__ libarchive.2.dylib: _archive_write_open_filename
__ libarchive.2.dylib: _archive_write_set_format_ustar
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_rethrow
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_terminate
W5BluetoothDevice : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *name
 @property  NSString *address
 @property  BOOL isPaired
 @property  BOOL isCloudPaired
 @property  BOOL isConnected
 @property  unsigned long majorClass
 @property  unsigned long minorClass
 @property  BOOL isLowEnergy
 @property  long long rssi
 @property  NSString *afhMap
 @property  long long connectionMode
 @property  unsigned long connectionModeInterval
 @property  long long manufacturer
 @property  unsigned long lmpVersion
 @property  unsigned long lmpSubversion
 @property  long long role
 @property  BOOL isAppleDevice

  // class methods
  +[W5BluetoothDevice supportsSecureCoding]

  // instance methods
  -[W5BluetoothDevice dealloc]
  -[W5BluetoothDevice isEqual:]
  -[W5BluetoothDevice conformsToProtocol:]
  -[W5BluetoothDevice name]
  -[W5BluetoothDevice copyWithZone:]
  -[W5BluetoothDevice encodeWithCoder:]
  -[W5BluetoothDevice initWithCoder:]
  -[W5BluetoothDevice role]
  -[W5BluetoothDevice setName:]
  -[W5BluetoothDevice address]
  -[W5BluetoothDevice rssi]
  -[W5BluetoothDevice setAddress:]
  -[W5BluetoothDevice setRssi:]
  -[W5BluetoothDevice setRole:]
  -[W5BluetoothDevice isConnected]
  -[W5BluetoothDevice connectionMode]
  -[W5BluetoothDevice setConnectionMode:]
  -[W5BluetoothDevice manufacturer]
  -[W5BluetoothDevice setManufacturer:]
  -[W5BluetoothDevice setIsConnected:]
  -[W5BluetoothDevice isAppleDevice]
  -[W5BluetoothDevice isPaired]
  -[W5BluetoothDevice majorClass]
  -[W5BluetoothDevice minorClass]
  -[W5BluetoothDevice setIsAppleDevice:]
  -[W5BluetoothDevice setIsPaired:]
  -[W5BluetoothDevice isCloudPaired]
  -[W5BluetoothDevice afhMap]
  -[W5BluetoothDevice connectionModeInterval]
  -[W5BluetoothDevice lmpVersion]
  -[W5BluetoothDevice lmpSubversion]
  -[W5BluetoothDevice isLowEnergy]
  -[W5BluetoothDevice isEqualToBluetoothDevice:]
  -[W5BluetoothDevice setIsCloudPaired:]
  -[W5BluetoothDevice setMajorClass:]
  -[W5BluetoothDevice setMinorClass:]
  -[W5BluetoothDevice setAfhMap:]
  -[W5BluetoothDevice setConnectionModeInterval:]
  -[W5BluetoothDevice setLmpVersion:]
  -[W5BluetoothDevice setLmpSubversion:]
  -[W5BluetoothDevice setIsLowEnergy:]


W5DiagnosticsTestRequest : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *uuid
 @property  long long testID
 @property  NSDictionary *configuration

  // class methods
  +[W5DiagnosticsTestRequest supportsSecureCoding]
  +[W5DiagnosticsTestRequest requestWithTestID:configuration:]

  // instance methods
  -[W5DiagnosticsTestRequest init]
  -[W5DiagnosticsTestRequest dealloc]
  -[W5DiagnosticsTestRequest isEqual:]
  -[W5DiagnosticsTestRequest conformsToProtocol:]
  -[W5DiagnosticsTestRequest copyWithZone:]
  -[W5DiagnosticsTestRequest encodeWithCoder:]
  -[W5DiagnosticsTestRequest initWithCoder:]
  -[W5DiagnosticsTestRequest uuid]
  -[W5DiagnosticsTestRequest setUuid:]
  -[W5DiagnosticsTestRequest setConfiguration:]
  -[W5DiagnosticsTestRequest configuration]
  -[W5DiagnosticsTestRequest setTestID:]
  -[W5DiagnosticsTestRequest isEqualToDiagnosticsTestRequest:]
  -[W5DiagnosticsTestRequest testID]


W5PowerStatus : NSObject <NSCopying, NSSecureCoding>
 @property  long long powerSourceType
 @property  int batteryWarningLevel
 @property  double internalBatteryLevel
 @property  unsigned int powerStateCaps

  // class methods
  +[W5PowerStatus supportsSecureCoding]

  // instance methods
  -[W5PowerStatus isEqual:]
  -[W5PowerStatus conformsToProtocol:]
  -[W5PowerStatus copyWithZone:]
  -[W5PowerStatus encodeWithCoder:]
  -[W5PowerStatus initWithCoder:]
  -[W5PowerStatus powerSourceType]
  -[W5PowerStatus batteryWarningLevel]
  -[W5PowerStatus powerStateCaps]
  -[W5PowerStatus internalBatteryLevel]
  -[W5PowerStatus isEqualToPowerStatus:]
  -[W5PowerStatus setPowerSourceType:]
  -[W5PowerStatus setBatteryWarningLevel:]
  -[W5PowerStatus setPowerStateCaps:]
  -[W5PowerStatus setInternalBatteryLevel:]


W5Status : NSObject <NSCopying, NSSecureCoding>
 @property  W5WiFiStatus *wifi
 @property  W5AWDLStatus *awdl
 @property  W5BluetoothStatus *bluetooth
 @property  W5NetworkStatus *network
 @property  W5PowerStatus *power

  // class methods
  +[W5Status supportsSecureCoding]

  // instance methods
  -[W5Status dealloc]
  -[W5Status isEqual:]
  -[W5Status conformsToProtocol:]
  -[W5Status copyWithZone:]
  -[W5Status encodeWithCoder:]
  -[W5Status initWithCoder:]
  -[W5Status power]
  -[W5Status setPower:]
  -[W5Status network]
  -[W5Status setNetwork:]
  -[W5Status wifi]
  -[W5Status setWifi:]
  -[W5Status isEqualToStatus:]
  -[W5Status setBluetooth:]
  -[W5Status awdl]
  -[W5Status bluetooth]
  -[W5Status setAwdl:]


W5Event : NSObject <NSCopying, NSSecureCoding>
 @property  long long eventID
 @property  double timestamp
 @property  NSDictionary *info

  // class methods
  +[W5Event supportsSecureCoding]

  // instance methods
  -[W5Event dealloc]
  -[W5Event conformsToProtocol:]
  -[W5Event copyWithZone:]
  -[W5Event encodeWithCoder:]
  -[W5Event initWithCoder:]
  -[W5Event timestamp]
  -[W5Event setTimestamp:]
  -[W5Event info]
  -[W5Event setInfo:]
  -[W5Event eventID]
  -[W5Event setEventID:]


W5WiFiChannel : NSObject <NSCopying, NSSecureCoding>
 @property  long long channel
 @property  int flags

  // class methods
  +[W5WiFiChannel supportsSecureCoding]

  // instance methods
  -[W5WiFiChannel init]
  -[W5WiFiChannel isEqual:]
  -[W5WiFiChannel conformsToProtocol:]
  -[W5WiFiChannel copyWithZone:]
  -[W5WiFiChannel encodeWithCoder:]
  -[W5WiFiChannel initWithCoder:]
  -[W5WiFiChannel flags]
  -[W5WiFiChannel channel]
  -[W5WiFiChannel isEqualToChannel:]
  -[W5WiFiChannel initWithChannel:flags:]


W5SpeedTestResult : NSObject <NSCopying, NSSecureCoding>
 @property  long long direction
 @property  long long size
 @property  CLLocation *location
 @property  NSError *error
 @property  double speed

  // class methods
  +[W5SpeedTestResult supportsSecureCoding]

  // instance methods
  -[W5SpeedTestResult dealloc]
  -[W5SpeedTestResult conformsToProtocol:]
  -[W5SpeedTestResult copyWithZone:]
  -[W5SpeedTestResult encodeWithCoder:]
  -[W5SpeedTestResult initWithCoder:]
  -[W5SpeedTestResult size]
  -[W5SpeedTestResult error]
  -[W5SpeedTestResult setError:]
  -[W5SpeedTestResult location]
  -[W5SpeedTestResult setSize:]
  -[W5SpeedTestResult direction]
  -[W5SpeedTestResult setDirection:]
  -[W5SpeedTestResult speed]
  -[W5SpeedTestResult setSpeed:]
  -[W5SpeedTestResult setLocation:]


W5LogItemReceipt : NSObject <NSCopying, NSSecureCoding>
 @property  W5LogItemRequest *request
 @property  NSArray *relativeURLs
 @property  NSDictionary *info
 @property  double startedAt
 @property  double completedAt

  // class methods
  +[W5LogItemReceipt supportsSecureCoding]

  // instance methods
  -[W5LogItemReceipt dealloc]
  -[W5LogItemReceipt isEqual:]
  -[W5LogItemReceipt conformsToProtocol:]
  -[W5LogItemReceipt copyWithZone:]
  -[W5LogItemReceipt encodeWithCoder:]
  -[W5LogItemReceipt initWithCoder:]
  -[W5LogItemReceipt info]
  -[W5LogItemReceipt setRequest:]
  -[W5LogItemReceipt request]
  -[W5LogItemReceipt setInfo:]
  -[W5LogItemReceipt startedAt]
  -[W5LogItemReceipt setStartedAt:]
  -[W5LogItemReceipt isEqualToLogItemReceipt:]
  -[W5LogItemReceipt setRelativeURLs:]
  -[W5LogItemReceipt setCompletedAt:]
  -[W5LogItemReceipt relativeURLs]
  -[W5LogItemReceipt completedAt]


W5WiFiStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *macAddress
 @property  NSString *interfaceName
 @property  BOOL powerOn
 @property  NSData *power
 @property  int opMode
 @property  NSString *ssidString
 @property  NSData *ssid
 @property  NSString *bssid
 @property  long long rssi
 @property  long long noise
 @property  double txRate
 @property  long long security
 @property  unsigned int eapolControlMode
 @property  unsigned int eapolSupplicantState
 @property  int phyMode
 @property  unsigned long mcsIndex
 @property  unsigned long guardInterval
 @property  unsigned long numberOfSpacialStreams
 @property  W5WiFiChannel *channel
 @property  NSArray *linkQualityUpdates
 @property  NSArray *supportedChannels
 @property  NSString *countryCode
 @property  NSString *networkServiceID
 @property  long long ipv4ConfigMethod
 @property  long long ipv6ConfigMethod
 @property  NSArray *ipv4Addresses
 @property  NSArray *ipv6Addresses
 @property  NSString *ipv4RouterAddress
 @property  NSString *ipv6RouterAddress
 @property  NSArray *dnsAddresses
 @property  int btcMode
 @property  NSData *chainAck
 @property  NSData *txChainPower
 @property  NSData *desense
 @property  NSData *desenseLevel
 @property  NSData *btcConfig
 @property  NSData *btcProfiles2GHz
 @property  NSData *btcProfiles5GHz
 @property  W5WiFiScanResult *lastJoinedScanResult
 @property  W5WiFiPreferredNetwork *lastJoinedPreferredNetwork
 @property  NSArray *cachedScanResults

  // class methods
  +[W5WiFiStatus supportsSecureCoding]

  // instance methods
  -[W5WiFiStatus dealloc]
  -[W5WiFiStatus isEqual:]
  -[W5WiFiStatus conformsToProtocol:]
  -[W5WiFiStatus copyWithZone:]
  -[W5WiFiStatus encodeWithCoder:]
  -[W5WiFiStatus initWithCoder:]
  -[W5WiFiStatus countryCode]
  -[W5WiFiStatus power]
  -[W5WiFiStatus setPower:]
  -[W5WiFiStatus channel]
  -[W5WiFiStatus ssid]
  -[W5WiFiStatus setSsid:]
  -[W5WiFiStatus rssi]
  -[W5WiFiStatus macAddress]
  -[W5WiFiStatus interfaceName]
  -[W5WiFiStatus setInterfaceName:]
  -[W5WiFiStatus setCountryCode:]
  -[W5WiFiStatus setRssi:]
  -[W5WiFiStatus setChannel:]
  -[W5WiFiStatus phyMode]
  -[W5WiFiStatus setPhyMode:]
  -[W5WiFiStatus setBssid:]
  -[W5WiFiStatus bssid]
  -[W5WiFiStatus setMacAddress:]
  -[W5WiFiStatus security]
  -[W5WiFiStatus setSecurity:]
  -[W5WiFiStatus setIpv4Addresses:]
  -[W5WiFiStatus setIpv6Addresses:]
  -[W5WiFiStatus ipv4Addresses]
  -[W5WiFiStatus ipv6Addresses]
  -[W5WiFiStatus setIpv4RouterAddress:]
  -[W5WiFiStatus setIpv6RouterAddress:]
  -[W5WiFiStatus ipv4ConfigMethod]
  -[W5WiFiStatus ipv6ConfigMethod]
  -[W5WiFiStatus ipv4RouterAddress]
  -[W5WiFiStatus ipv6RouterAddress]
  -[W5WiFiStatus setNoise:]
  -[W5WiFiStatus noise]
  -[W5WiFiStatus setTxRate:]
  -[W5WiFiStatus powerOn]
  -[W5WiFiStatus txRate]
  -[W5WiFiStatus opMode]
  -[W5WiFiStatus guardInterval]
  -[W5WiFiStatus networkServiceID]
  -[W5WiFiStatus setSsidString:]
  -[W5WiFiStatus ssidString]
  -[W5WiFiStatus eapolControlMode]
  -[W5WiFiStatus eapolSupplicantState]
  -[W5WiFiStatus mcsIndex]
  -[W5WiFiStatus numberOfSpacialStreams]
  -[W5WiFiStatus supportedChannels]
  -[W5WiFiStatus dnsAddresses]
  -[W5WiFiStatus chainAck]
  -[W5WiFiStatus txChainPower]
  -[W5WiFiStatus desense]
  -[W5WiFiStatus desenseLevel]
  -[W5WiFiStatus btcConfig]
  -[W5WiFiStatus btcProfiles2GHz]
  -[W5WiFiStatus btcProfiles5GHz]
  -[W5WiFiStatus btcMode]
  -[W5WiFiStatus linkQualityUpdates]
  -[W5WiFiStatus lastJoinedScanResult]
  -[W5WiFiStatus lastJoinedPreferredNetwork]
  -[W5WiFiStatus cachedScanResults]
  -[W5WiFiStatus isEqualToWiFiStatus:]
  -[W5WiFiStatus setPowerOn:]
  -[W5WiFiStatus setOpMode:]
  -[W5WiFiStatus setMcsIndex:]
  -[W5WiFiStatus setGuardInterval:]
  -[W5WiFiStatus setNumberOfSpacialStreams:]
  -[W5WiFiStatus setEapolControlMode:]
  -[W5WiFiStatus setEapolSupplicantState:]
  -[W5WiFiStatus setSupportedChannels:]
  -[W5WiFiStatus setNetworkServiceID:]
  -[W5WiFiStatus setIpv4ConfigMethod:]
  -[W5WiFiStatus setIpv6ConfigMethod:]
  -[W5WiFiStatus setDnsAddresses:]
  -[W5WiFiStatus setChainAck:]
  -[W5WiFiStatus setTxChainPower:]
  -[W5WiFiStatus setDesense:]
  -[W5WiFiStatus setDesenseLevel:]
  -[W5WiFiStatus setBtcConfig:]
  -[W5WiFiStatus setBtcMode:]
  -[W5WiFiStatus setBtcProfiles2GHz:]
  -[W5WiFiStatus setBtcProfiles5GHz:]
  -[W5WiFiStatus setLinkQualityUpdates:]
  -[W5WiFiStatus setLastJoinedScanResult:]
  -[W5WiFiStatus setLastJoinedPreferredNetwork:]
  -[W5WiFiStatus setCachedScanResults:]


W5BluetoothStatus : NSObject <NSCopying, NSSecureCoding>
 @property  BOOL powerOn
 @property  NSString *address
 @property  BOOL isDiscoverable
 @property  BOOL isConnectable
 @property  BOOL isScanning
 @property  NSArray *devices

  // class methods
  +[W5BluetoothStatus supportsSecureCoding]

  // instance methods
  -[W5BluetoothStatus dealloc]
  -[W5BluetoothStatus isEqual:]
  -[W5BluetoothStatus conformsToProtocol:]
  -[W5BluetoothStatus copyWithZone:]
  -[W5BluetoothStatus encodeWithCoder:]
  -[W5BluetoothStatus initWithCoder:]
  -[W5BluetoothStatus address]
  -[W5BluetoothStatus devices]
  -[W5BluetoothStatus setAddress:]
  -[W5BluetoothStatus setDevices:]
  -[W5BluetoothStatus isDiscoverable]
  -[W5BluetoothStatus setIsScanning:]
  -[W5BluetoothStatus isScanning]
  -[W5BluetoothStatus isConnectable]
  -[W5BluetoothStatus powerOn]
  -[W5BluetoothStatus setPowerOn:]
  -[W5BluetoothStatus isEqualToBluetoothStatus:]
  -[W5BluetoothStatus setIsDiscoverable:]
  -[W5BluetoothStatus setIsConnectable:]


W5WiFiLinkQualityUpdate : NSObject <NSCopying, NSSecureCoding>
 @property  long long rssi
 @property  long long txRate
 @property  float cca
 @property  double timestamp

  // class methods
  +[W5WiFiLinkQualityUpdate supportsSecureCoding]

  // instance methods
  -[W5WiFiLinkQualityUpdate conformsToProtocol:]
  -[W5WiFiLinkQualityUpdate copyWithZone:]
  -[W5WiFiLinkQualityUpdate encodeWithCoder:]
  -[W5WiFiLinkQualityUpdate initWithCoder:]
  -[W5WiFiLinkQualityUpdate timestamp]
  -[W5WiFiLinkQualityUpdate setTimestamp:]
  -[W5WiFiLinkQualityUpdate rssi]
  -[W5WiFiLinkQualityUpdate setRssi:]
  -[W5WiFiLinkQualityUpdate cca]
  -[W5WiFiLinkQualityUpdate setCca:]
  -[W5WiFiLinkQualityUpdate setTxRate:]
  -[W5WiFiLinkQualityUpdate txRate]


W5PerfResult : NSObject <NSCopying, NSSecureCoding>
 @property  W5PerfConfiguration *configuration
 @property  NSData *standardOut
 @property  NSData *standardErr
 @property  NSNumber *bandwidth
 @property  NSNumber *jitter
 @property  NSNumber *loss
 @property  double start
 @property  double end

  // class methods
  +[W5PerfResult supportsSecureCoding]
  +[W5PerfResult parseCompletedOutput:configuration:]

  // instance methods
  -[W5PerfResult dealloc]
  -[W5PerfResult conformsToProtocol:]
  -[W5PerfResult copyWithZone:]
  -[W5PerfResult encodeWithCoder:]
  -[W5PerfResult initWithCoder:]
  -[W5PerfResult start]
  -[W5PerfResult end]
  -[W5PerfResult setConfiguration:]
  -[W5PerfResult configuration]
  -[W5PerfResult setStart:]
  -[W5PerfResult setEnd:]
  -[W5PerfResult setBandwidth:]
  -[W5PerfResult bandwidth]
  -[W5PerfResult jitter]
  -[W5PerfResult setJitter:]
  -[W5PerfResult setStandardOut:]
  -[W5PerfResult setStandardErr:]
  -[W5PerfResult setLoss:]
  -[W5PerfResult standardOut]
  -[W5PerfResult standardErr]
  -[W5PerfResult loss]


W5Peer : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *peerID
 @property  NSString *name
 @property  NSString *model
 @property  NSString *build
 @property  NSString *os
 @property  NSString *version
 @property  long long type
 @property  BOOL nearby

  // class methods
  +[W5Peer supportsSecureCoding]

  // instance methods
  -[W5Peer dealloc]
  -[W5Peer isEqual:]
  -[W5Peer conformsToProtocol:]
  -[W5Peer name]
  -[W5Peer copyWithZone:]
  -[W5Peer type]
  -[W5Peer encodeWithCoder:]
  -[W5Peer initWithCoder:]
  -[W5Peer setName:]
  -[W5Peer version]
  -[W5Peer setVersion:]
  -[W5Peer model]
  -[W5Peer setModel:]
  -[W5Peer build]
  -[W5Peer isEqualToPeer:]
  -[W5Peer peerID]
  -[W5Peer setPeerID:]
  -[W5Peer setOs:]
  -[W5Peer os]
  -[W5Peer setBuild:]
  -[W5Peer nearby]
  -[W5Peer setNearby:]


W5WiFiPreferredNetwork : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *identifier
 @property  NSString *ssidString
 @property  NSData *ssid
 @property  long long security
 @property  BOOL isEnabled
 @property  BOOL isPasspoint
 @property  NSString *domainName
 @property  BOOL isCaptive
 @property  BOOL isHidden
 @property  BOOL isMultiAP
 @property  NSDate *lastJoinedTimestamp

  // class methods
  +[W5WiFiPreferredNetwork supportsSecureCoding]
  +[W5WiFiPreferredNetwork preferredNetworksList]

  // instance methods
  -[W5WiFiPreferredNetwork dealloc]
  -[W5WiFiPreferredNetwork isEqual:]
  -[W5WiFiPreferredNetwork conformsToProtocol:]
  -[W5WiFiPreferredNetwork copyWithZone:]
  -[W5WiFiPreferredNetwork encodeWithCoder:]
  -[W5WiFiPreferredNetwork initWithCoder:]
  -[W5WiFiPreferredNetwork identifier]
  -[W5WiFiPreferredNetwork setIdentifier:]
  -[W5WiFiPreferredNetwork isEnabled]
  -[W5WiFiPreferredNetwork isHidden]
  -[W5WiFiPreferredNetwork domainName]
  -[W5WiFiPreferredNetwork ssid]
  -[W5WiFiPreferredNetwork setSsid:]
  -[W5WiFiPreferredNetwork setIsHidden:]
  -[W5WiFiPreferredNetwork setDomainName:]
  -[W5WiFiPreferredNetwork setIsEnabled:]
  -[W5WiFiPreferredNetwork security]
  -[W5WiFiPreferredNetwork setSecurity:]
  -[W5WiFiPreferredNetwork isCaptive]
  -[W5WiFiPreferredNetwork isPasspoint]
  -[W5WiFiPreferredNetwork setIsCaptive:]
  -[W5WiFiPreferredNetwork setSsidString:]
  -[W5WiFiPreferredNetwork setLastJoinedTimestamp:]
  -[W5WiFiPreferredNetwork setIsPasspoint:]
  -[W5WiFiPreferredNetwork setIsMultiAP:]
  -[W5WiFiPreferredNetwork ssidString]
  -[W5WiFiPreferredNetwork isEqualToPreferredNetwork:]
  -[W5WiFiPreferredNetwork isMultiAP]
  -[W5WiFiPreferredNetwork lastJoinedTimestamp]


W5DebugConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  long long wifi
 @property  long long megaWiFiProfile
 @property  long long noLoggingWiFiProfile
 @property  long long eapol
 @property  long long bluetooth

  // class methods
  +[W5DebugConfiguration supportsSecureCoding]

  // instance methods
  -[W5DebugConfiguration isEqual:]
  -[W5DebugConfiguration conformsToProtocol:]
  -[W5DebugConfiguration copyWithZone:]
  -[W5DebugConfiguration encodeWithCoder:]
  -[W5DebugConfiguration initWithCoder:]
  -[W5DebugConfiguration wifi]
  -[W5DebugConfiguration setWifi:]
  -[W5DebugConfiguration setBluetooth:]
  -[W5DebugConfiguration bluetooth]
  -[W5DebugConfiguration megaWiFiProfile]
  -[W5DebugConfiguration noLoggingWiFiProfile]
  -[W5DebugConfiguration eapol]
  -[W5DebugConfiguration isEqualToDebugConfiguration:]
  -[W5DebugConfiguration setMegaWiFiProfile:]
  -[W5DebugConfiguration setNoLoggingWiFiProfile:]
  -[W5DebugConfiguration setEapol:]


W5WiFiScanResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSDictionary *scanRecord

  // class methods
  +[W5WiFiScanResult supportsSecureCoding]

  // instance methods
  -[W5WiFiScanResult init]
  -[W5WiFiScanResult dealloc]
  -[W5WiFiScanResult isEqual:]
  -[W5WiFiScanResult conformsToProtocol:]
  -[W5WiFiScanResult copyWithZone:]
  -[W5WiFiScanResult encodeWithCoder:]
  -[W5WiFiScanResult initWithCoder:]
  -[W5WiFiScanResult countryCode]
  -[W5WiFiScanResult channel]
  -[W5WiFiScanResult ssid]
  -[W5WiFiScanResult rssi]
  -[W5WiFiScanResult bssid]
  -[W5WiFiScanResult stationCount]
  -[W5WiFiScanResult isPersonalHotspot]
  -[W5WiFiScanResult isPasspoint]
  -[W5WiFiScanResult noise]
  -[W5WiFiScanResult scanRecord]
  -[W5WiFiScanResult beaconInterval]
  -[W5WiFiScanResult isAppleSWAP]
  -[W5WiFiScanResult isIBSS]
  -[W5WiFiScanResult isEqualToScanResult:]
  -[W5WiFiScanResult fastestSupportedPHYMode]
  -[W5WiFiScanResult initWithScanRecord:]
  -[W5WiFiScanResult supportsSecurity:]
  -[W5WiFiScanResult ssidString]
  -[W5WiFiScanResult __supportsWEP]
  -[W5WiFiScanResult __supportsWPAPersonal]
  -[W5WiFiScanResult __supportsWPAEnterprise]
  -[W5WiFiScanResult __supportsWPA2Personal]
  -[W5WiFiScanResult __supportsWPA3Personal]
  -[W5WiFiScanResult __supportsWPA2Enterprise]
  -[W5WiFiScanResult __supportsWPA3Enterprise]
  -[W5WiFiScanResult supportsPHYMode:]
  -[W5WiFiScanResult __correctEthernetAddressFormat:]
  -[W5WiFiScanResult __appleProductNameForProductID:]
  -[W5WiFiScanResult strongestSupportedSecurity]
  -[W5WiFiScanResult isAirPortBaseStation:modelID:]
  -[W5WiFiScanResult isLeakyAP]
  -[W5WiFiScanResult channelUtilization]
  -[W5WiFiScanResult fastBSSTransitionEnabled]
  -[W5WiFiScanResult fastBSSTransitionOverDS]
  -[W5WiFiScanResult fastBSSTransitionRequestResourceProtocol]


W5NetworkStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *primaryIPv4InterfaceName
 @property  NSString *primaryIPv4ServiceName
 @property  NSString *primaryIPv6InterfaceName
 @property  NSString *primaryIPv6ServiceName
 @property  NSString *primaryIPv4ServiceID
 @property  NSString *primaryIPv6ServiceID
 @property  NSArray *primaryIPv4Addresses
 @property  NSArray *primaryIPv6Addresses
 @property  NSString *primaryIPv4Router
 @property  NSString *primaryIPv6Router
 @property  NSArray *primaryDNSAddresses
 @property  unsigned int isAppleReachable

  // class methods
  +[W5NetworkStatus supportsSecureCoding]

  // instance methods
  -[W5NetworkStatus dealloc]
  -[W5NetworkStatus isEqual:]
  -[W5NetworkStatus conformsToProtocol:]
  -[W5NetworkStatus copyWithZone:]
  -[W5NetworkStatus encodeWithCoder:]
  -[W5NetworkStatus initWithCoder:]
  -[W5NetworkStatus primaryIPv4InterfaceName]
  -[W5NetworkStatus primaryIPv4ServiceName]
  -[W5NetworkStatus primaryIPv6InterfaceName]
  -[W5NetworkStatus primaryIPv6ServiceName]
  -[W5NetworkStatus primaryIPv4ServiceID]
  -[W5NetworkStatus primaryIPv6ServiceID]
  -[W5NetworkStatus primaryIPv4Addresses]
  -[W5NetworkStatus primaryIPv6Addresses]
  -[W5NetworkStatus primaryIPv4Router]
  -[W5NetworkStatus primaryIPv6Router]
  -[W5NetworkStatus primaryDNSAddresses]
  -[W5NetworkStatus isAppleReachable]
  -[W5NetworkStatus isEqualToNetworkStatus:]
  -[W5NetworkStatus setPrimaryIPv4InterfaceName:]
  -[W5NetworkStatus setPrimaryIPv4ServiceName:]
  -[W5NetworkStatus setPrimaryIPv6InterfaceName:]
  -[W5NetworkStatus setPrimaryIPv6ServiceName:]
  -[W5NetworkStatus setPrimaryIPv4ServiceID:]
  -[W5NetworkStatus setPrimaryIPv6ServiceID:]
  -[W5NetworkStatus setPrimaryIPv4Addresses:]
  -[W5NetworkStatus setPrimaryIPv6Addresses:]
  -[W5NetworkStatus setPrimaryIPv4Router:]
  -[W5NetworkStatus setPrimaryIPv6Router:]
  -[W5NetworkStatus setPrimaryDNSAddresses:]
  -[W5NetworkStatus setIsAppleReachable:]


W5PerfUpdate : NSObject <NSCopying, NSSecureCoding>
 @property  W5PerfConfiguration *configuration
 @property  NSData *standardOut
 @property  NSData *standardErr
 @property  NSNumber *bandwidth
 @property  NSNumber *jitter
 @property  NSNumber *loss
 @property  double start
 @property  double update

  // class methods
  +[W5PerfUpdate supportsSecureCoding]
  +[W5PerfUpdate parseUpdateOutput:configuration:]

  // instance methods
  -[W5PerfUpdate dealloc]
  -[W5PerfUpdate conformsToProtocol:]
  -[W5PerfUpdate copyWithZone:]
  -[W5PerfUpdate encodeWithCoder:]
  -[W5PerfUpdate initWithCoder:]
  -[W5PerfUpdate start]
  -[W5PerfUpdate setConfiguration:]
  -[W5PerfUpdate configuration]
  -[W5PerfUpdate update]
  -[W5PerfUpdate setStart:]
  -[W5PerfUpdate setBandwidth:]
  -[W5PerfUpdate bandwidth]
  -[W5PerfUpdate jitter]
  -[W5PerfUpdate setJitter:]
  -[W5PerfUpdate setUpdate:]
  -[W5PerfUpdate setStandardOut:]
  -[W5PerfUpdate setStandardErr:]
  -[W5PerfUpdate setLoss:]
  -[W5PerfUpdate standardOut]
  -[W5PerfUpdate standardErr]
  -[W5PerfUpdate loss]


W5PingResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *address
 @property  NSString *interfaceName
 @property  double timeout
 @property  double wait
 @property  double interval
 @property  long long count
 @property  long long trafficClass
 @property  unsigned long dataLength
 @property  double packetLoss
 @property  double min
 @property  double max
 @property  double avg
 @property  double stddev
 @property  NSString *command
 @property  NSString *output
 @property  double timestamp
 @property  double startedAt
 @property  double endedAt

  // class methods
  +[W5PingResult supportsSecureCoding]

  // instance methods
  -[W5PingResult dealloc]
  -[W5PingResult conformsToProtocol:]
  -[W5PingResult copyWithZone:]
  -[W5PingResult count]
  -[W5PingResult encodeWithCoder:]
  -[W5PingResult initWithCoder:]
  -[W5PingResult setCount:]
  -[W5PingResult interval]
  -[W5PingResult setInterval:]
  -[W5PingResult wait]
  -[W5PingResult address]
  -[W5PingResult timestamp]
  -[W5PingResult setMax:]
  -[W5PingResult max]
  -[W5PingResult timeout]
  -[W5PingResult setTimeout:]
  -[W5PingResult setMin:]
  -[W5PingResult min]
  -[W5PingResult interfaceName]
  -[W5PingResult setInterfaceName:]
  -[W5PingResult setAddress:]
  -[W5PingResult setCommand:]
  -[W5PingResult setTrafficClass:]
  -[W5PingResult trafficClass]
  -[W5PingResult command]
  -[W5PingResult dataLength]
  -[W5PingResult output]
  -[W5PingResult setDataLength:]
  -[W5PingResult setOutput:]
  -[W5PingResult avg]
  -[W5PingResult setAvg:]
  -[W5PingResult setStddev:]
  -[W5PingResult stddev]
  -[W5PingResult startedAt]
  -[W5PingResult endedAt]
  -[W5PingResult setStartedAt:]
  -[W5PingResult setEndedAt:]
  -[W5PingResult setWait:]
  -[W5PingResult setPacketLoss:]
  -[W5PingResult packetLoss]


W5PerfConfiguration : NSObject <NSCopying, NSSecureCoding>
 @property  W5Peer *client
 @property  W5Peer *server
 @property  BOOL overAWDL
 @property  BOOL usingUDP
 @property  BOOL upload
 @property  long long bandwidth
 @property  long long numberOfClientStreams
 @property  long long duration
 @property  NSString *additionalClientParameters
 @property  NSString *additionalServerParameters

  // class methods
  +[W5PerfConfiguration supportsSecureCoding]

  // instance methods
  -[W5PerfConfiguration dealloc]
  -[W5PerfConfiguration conformsToProtocol:]
  -[W5PerfConfiguration copyWithZone:]
  -[W5PerfConfiguration encodeWithCoder:]
  -[W5PerfConfiguration initWithCoder:]
  -[W5PerfConfiguration duration]
  -[W5PerfConfiguration client]
  -[W5PerfConfiguration setClient:]
  -[W5PerfConfiguration setServer:]
  -[W5PerfConfiguration server]
  -[W5PerfConfiguration setDuration:]
  -[W5PerfConfiguration setBandwidth:]
  -[W5PerfConfiguration bandwidth]
  -[W5PerfConfiguration numberOfClientStreams]
  -[W5PerfConfiguration setAdditionalClientParameters:]
  -[W5PerfConfiguration setAdditionalServerParameters:]
  -[W5PerfConfiguration setOverAWDL:]
  -[W5PerfConfiguration setUsingUDP:]
  -[W5PerfConfiguration setNumberOfClientStreams:]
  -[W5PerfConfiguration setUpload:]
  -[W5PerfConfiguration overAWDL]
  -[W5PerfConfiguration usingUDP]
  -[W5PerfConfiguration upload]
  -[W5PerfConfiguration additionalClientParameters]
  -[W5PerfConfiguration additionalServerParameters]


W5LogItemRequest : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *uuid
 @property  long long itemID
 @property  NSDictionary *configuration

  // class methods
  +[W5LogItemRequest supportsSecureCoding]
  +[W5LogItemRequest requestWithItemID:configuration:]

  // instance methods
  -[W5LogItemRequest init]
  -[W5LogItemRequest dealloc]
  -[W5LogItemRequest isEqual:]
  -[W5LogItemRequest conformsToProtocol:]
  -[W5LogItemRequest copyWithZone:]
  -[W5LogItemRequest encodeWithCoder:]
  -[W5LogItemRequest initWithCoder:]
  -[W5LogItemRequest uuid]
  -[W5LogItemRequest setUuid:]
  -[W5LogItemRequest itemID]
  -[W5LogItemRequest setConfiguration:]
  -[W5LogItemRequest configuration]
  -[W5LogItemRequest setItemID:]
  -[W5LogItemRequest isEqualToLogItemRequest:]


W5Client : NSObject
 @property  @? eventCallback

  // class methods
  +[W5Client sharedClient]

  // instance methods
  -[W5Client init]
  -[W5Client dealloc]
  -[W5Client cancelAllRequests]
  -[W5Client peers]
  -[W5Client stopAdvertising]
  -[W5Client stopBrowsing]
  -[W5Client startBrowsing]
  -[W5Client startAdvertising]
  -[W5Client localPeer]
  -[W5Client queryStatusForPeer:reply:]
  -[W5Client queryDebugConfigurationForPeer:reply:]
  -[W5Client setDebugConfiguration:peer:reply:]
  -[W5Client receivedEvent:]
  -[W5Client __startBrowsingAndReply:]
  -[W5Client __startMonitoringEvents:reply:]
  -[W5Client __stopBrowsingAndReply:]
  -[W5Client __startAdvertisingAndReply:]
  -[W5Client __stopAdvertisingAndReply:]
  -[W5Client __stopMonitoringEvents:reply:]
  -[W5Client __queryPeerCacheAndReply:]
  -[W5Client __queryLocalPeerAndReply:]
  -[W5Client runDiagnostics:configuration:update:reply:]
  -[W5Client __tarballWithSource:destination:error:]
  -[W5Client __mostRecentInDirectories:include:exclude:maxAge:]
  -[W5Client __purgeFilesInDirectory:matching:maxAge:maxCount:]
  -[W5Client runDiagnosticsTests:peer:update:reply:]
  -[W5Client __collectJetsamFallbackLogsWithReason:compress:]
  -[W5Client __logsCollectedWithTemporaryURL:outputURL:keepParent:compress:reply:]
  -[W5Client __collectBusyFallbackLogsWithReason:compress:]
  -[W5Client collectLogs:configuration:update:reply:]
  -[W5Client collectLogs:compress:peer:update:diagnostics:reply:]
  -[W5Client collectLogItems:outputURL:compress:peer:update:diagnostics:reply:]
  -[W5Client runWiFiSnifferOnChannel:duration:peer:reply:]
  -[W5Client runPerformanceTestWithConfiguration:update:reply:]
  -[W5Client runPerformanceTest:update:reply:]
  -[W5Client runWiFiPerformanceLoggingWithConfiguration:reply:]
  -[W5Client __cancelRequestWithUUID:reply:]
  -[W5Client __cancelAllRequestsAndReply:]
  -[W5Client __log:timestamp:reply:]
  -[W5Client setEventCallback:]
  -[W5Client startMonitoringEvents:]
  -[W5Client stopMonitoringEvents:]
  -[W5Client queryStatusForPeer:error:]
  -[W5Client queryDebugConfigurationForPeer:error:]
  -[W5Client setDebugConfiguration:peer:error:]
  -[W5Client runDiagnostics:configuration:update:error:]
  -[W5Client runDiagnosticsTests:peer:update:error:]
  -[W5Client collectLogs:configuration:update:receipts:error:]
  -[W5Client collectLogs:compress:peer:update:diagnostics:error:]
  -[W5Client collectLogItems:outputURL:compress:peer:update:diagnostics:receipts:error:]
  -[W5Client runWiFiSnifferOnChannel:duration:peer:error:]
  -[W5Client runPerformanceTestWithConfiguration:update:error:]
  -[W5Client runPerformanceTest:update:error:]
  -[W5Client runWiFiPerformanceLoggingWithConfiguration:error:]
  -[W5Client cancelRequestWithUUID:]
  -[W5Client log:timestamp:]
  -[W5Client eventCallback]


W5DiagnosticsTestResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSUUID *uuid
 @property  long long testID
 @property  BOOL result
 @property  BOOL didPass
 @property  NSDictionary *configuration
 @property  NSDictionary *info
 @property  NSError *error
 @property  double testStarted
 @property  double testCompleted

  // class methods
  +[W5DiagnosticsTestResult supportsSecureCoding]

  // instance methods
  -[W5DiagnosticsTestResult dealloc]
  -[W5DiagnosticsTestResult isEqual:]
  -[W5DiagnosticsTestResult conformsToProtocol:]
  -[W5DiagnosticsTestResult copyWithZone:]
  -[W5DiagnosticsTestResult encodeWithCoder:]
  -[W5DiagnosticsTestResult initWithCoder:]
  -[W5DiagnosticsTestResult error]
  -[W5DiagnosticsTestResult setError:]
  -[W5DiagnosticsTestResult result]
  -[W5DiagnosticsTestResult uuid]
  -[W5DiagnosticsTestResult setResult:]
  -[W5DiagnosticsTestResult setUuid:]
  -[W5DiagnosticsTestResult info]
  -[W5DiagnosticsTestResult setConfiguration:]
  -[W5DiagnosticsTestResult configuration]
  -[W5DiagnosticsTestResult setInfo:]
  -[W5DiagnosticsTestResult setTestID:]
  -[W5DiagnosticsTestResult testID]
  -[W5DiagnosticsTestResult testStarted]
  -[W5DiagnosticsTestResult testCompleted]
  -[W5DiagnosticsTestResult didPass]
  -[W5DiagnosticsTestResult isEqualToDiagnosticsTestResult:]
  -[W5DiagnosticsTestResult setDidPass:]
  -[W5DiagnosticsTestResult setTestStarted:]
  -[W5DiagnosticsTestResult setTestCompleted:]


W5AWDLStatus : NSObject <NSCopying, NSSecureCoding>
 @property  NSString *interfaceName
 @property  NSArray *ipv6Addresses
 @property  BOOL power
 @property  NSData *awdlSyncEnabled
 @property  NSData *awdlSyncState
 @property  NSData *awdlSyncChannelSequence
 @property  NSData *awdlStrategy
 @property  NSData *awdlElectionParameters
 @property  NSData *awdlMasterChannel
 @property  NSData *awdlSecondaryMasterChannel
 @property  NSData *awdlOpMode
 @property  NSData *awdlSyncParameters
 @property  NSData *awdlPeerDatabase
 @property  NSData *awdlSidecarDiagnostics
 @property  BOOL isAWDLRealTimeMode
 @property  long long airDropDiscoverableMode

  // class methods
  +[W5AWDLStatus supportsSecureCoding]

  // instance methods
  -[W5AWDLStatus dealloc]
  -[W5AWDLStatus isEqual:]
  -[W5AWDLStatus conformsToProtocol:]
  -[W5AWDLStatus copyWithZone:]
  -[W5AWDLStatus encodeWithCoder:]
  -[W5AWDLStatus initWithCoder:]
  -[W5AWDLStatus power]
  -[W5AWDLStatus setPower:]
  -[W5AWDLStatus interfaceName]
  -[W5AWDLStatus setInterfaceName:]
  -[W5AWDLStatus setIpv6Addresses:]
  -[W5AWDLStatus ipv6Addresses]
  -[W5AWDLStatus airDropDiscoverableMode]
  -[W5AWDLStatus awdlSyncEnabled]
  -[W5AWDLStatus awdlStrategy]
  -[W5AWDLStatus awdlSyncChannelSequence]
  -[W5AWDLStatus awdlOpMode]
  -[W5AWDLStatus awdlSyncState]
  -[W5AWDLStatus awdlSyncParameters]
  -[W5AWDLStatus awdlMasterChannel]
  -[W5AWDLStatus awdlSecondaryMasterChannel]
  -[W5AWDLStatus awdlElectionParameters]
  -[W5AWDLStatus awdlPeerDatabase]
  -[W5AWDLStatus awdlSidecarDiagnostics]
  -[W5AWDLStatus isAWDLRealTimeMode]
  -[W5AWDLStatus isEqualToAWDLStatus:]
  -[W5AWDLStatus setAwdlSecondaryMasterChannel:]
  -[W5AWDLStatus setAwdlOpMode:]
  -[W5AWDLStatus setAwdlMasterChannel:]
  -[W5AWDLStatus setAwdlElectionParameters:]
  -[W5AWDLStatus setAwdlSyncState:]
  -[W5AWDLStatus setAwdlSyncParameters:]
  -[W5AWDLStatus setAwdlSyncEnabled:]
  -[W5AWDLStatus setAwdlSyncChannelSequence:]
  -[W5AWDLStatus setAwdlStrategy:]
  -[W5AWDLStatus setIsAWDLRealTimeMode:]
  -[W5AWDLStatus setAirDropDiscoverableMode:]
  -[W5AWDLStatus setAwdlPeerDatabase:]
  -[W5AWDLStatus setAwdlSidecarDiagnostics:]


NSTask(WiFiVelocity)
	// class methods
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputData:errorData:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:startBlock:updateBlock:endBlock:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputFilePath:errorFilePath:redirectErrorToOutput:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputFileHandle:errorFileHandle:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputData:errorData:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputFilePath:errorFilePath:redirectErrorToOutput:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:timeout:outputFileHandle:errorFileHandle:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputData:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputData:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFilePath:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFilePath:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFileHandle:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFileHandle:launchHandler:reply:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputData:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputData:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFilePath:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFilePath:launchHandler:didLaunch:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFileHandle:error:]
	+[NSTask(WiFiVelocity) runTaskWithLaunchPath:arguments:outputFileHandle:launchHandler:didLaunch:error:]

01 00 0140 /System/Library/Frameworks/CoreLocation.framework/CoreLocation: CLLocation 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSTask 
01 00 0900 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0300 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
