|| __DATA.__objc_data _OBJC_CLASS_$_NACAudioRoute
|| __DATA.__objc_data _OBJC_CLASS_$_NACDaemonServer
|| __DATA.__objc_data _OBJC_CLASS_$_NACProxyVolumeControlTarget
|| __DATA.__objc_data _OBJC_CLASS_$_NACRoutingController
|| __DATA.__objc_data _OBJC_CLASS_$_NACVolumeController
|| __DATA.__objc_data _OBJC_CLASS_$_NACXPCServer
|| __DATA.__objc_data _OBJC_METACLASS_$_NACAudioRoute
|| __DATA.__objc_data _OBJC_METACLASS_$_NACDaemonServer
|| __DATA.__objc_data _OBJC_METACLASS_$_NACProxyVolumeControlTarget
|| __DATA.__objc_data _OBJC_METACLASS_$_NACRoutingController
|| __DATA.__objc_data _OBJC_METACLASS_$_NACVolumeController
|| __DATA.__objc_data _OBJC_METACLASS_$_NACXPCServer
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AudioToolbox: _AudioServicesSetProperty
__ Celestial: _AVSystemController_VibeIntensityDidChangeNotification
__ Celestial: _AVSystemController_VibeIntensityNotificationParameter
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSDictionary0__
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ IDS: _IDSDefaultPairedDevice
__ IDS: _IDSMaxMessageTimeout
__ IDS: _IDSSendMessageOptionBypassDuetKey
__ IDS: _IDSSendMessageOptionFireAndForgetKey
__ IDS: _IDSSendMessageOptionForceLocalDeliveryKey
__ IDS: _IDSSendMessageOptionNonWakingKey
__ IDS: _IDSSendMessageOptionQueueOneIdentifierKey
__ IDS: _IDSSendMessageOptionTimeoutKey
__ IDS: _OBJC_CLASS_$_IDSProtobuf
__ IDS: _OBJC_CLASS_$_IDSService
__ MediaPlayer: _MPAVRouteDidChangeNotification
__ MediaPlayer: _OBJC_CLASS_$_MPAVEndpointRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVOutputDeviceRoute
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeController
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerRouteDataSource
__ MediaPlayer: _OBJC_CLASS_$_MPVolumeControllerSystemDataSource
__ MediaPlayer: __MPAVRouteConnectionDidInvalidateNotification
__ MediaRemote: _MRAVEndpointCopyOutputDevices
__ MediaRemote: _MRAVEndpointGetExternalDevice
__ MediaRemote: _MRAVOutputDeviceCopyAvailableBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyCurrentBluetoothListeningMode
__ MediaRemote: _MRAVOutputDeviceCopyUniqueIdentifier
__ MediaRemote: _MRAVOutputDeviceSetCurrentBluetoothListeningMode
__ MediaRemote: _MRAVRoutingDiscoverySessionAddEndpointsChangedCallback
__ MediaRemote: _MRAVRoutingDiscoverySessionCopyAvailableEndpoints
__ MediaRemote: _MRAVRoutingDiscoverySessionCreate
__ MediaRemote: _MRAVRoutingDiscoverySessionRemoveEndpointsChangedCallback
__ MediaRemote: _MRAVRoutingDiscoverySessionSetAlwaysAllowUpdates
__ MediaRemote: _MRExternalDeviceCopyCustomOrigin
__ MediaRemote: _MROriginGetUniqueIdentifier
__ NanoPreferencesSync: _OBJC_CLASS_$_NPSDomainAccessor
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteDataField
__ ProtocolBuffer: _PBDataWriterWriteFloatField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadData
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ QuartzCore: _CACurrentMediaTime
__ ToneLibrary: _OBJC_CLASS_$_TLAlert
__ ToneLibrary: __TLAlertWatchPrefersSalientToneAndVibrationDidChangeNotification
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
NACMutedMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasMuted
 @property  BOOL muted
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[NACMutedMessage isEqual:]
  -[NACMutedMessage copyWithZone:]
  -[NACMutedMessage .cxx_destruct]
  -[NACMutedMessage category]
  -[NACMutedMessage setCategory:]
  -[NACMutedMessage dictionaryRepresentation]
  -[NACMutedMessage writeTo:]
  -[NACMutedMessage mergeFrom:]
  -[NACMutedMessage readFrom:]
  -[NACMutedMessage copyTo:]
  -[NACMutedMessage hasCategory]
  -[NACMutedMessage originIdentifier]
  -[NACMutedMessage muted]
  -[NACMutedMessage setMuted:]
  -[NACMutedMessage setHasMuted:]
  -[NACMutedMessage hasMuted]
  -[NACMutedMessage setOriginIdentifier:]
  -[NACMutedMessage setHasOriginIdentifier:]
  -[NACMutedMessage hasOriginIdentifier]


NACRoutingControllerLocal : NSObject /usr/lib/libSystem.B.dylib <MPAVRoutingControllerDelegate, NACRoutingController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NACAudioRoute *pickedRoute
 @property  NSArray *availableAudioRoutes
 @property  <NACRoutingControllerDelegate> *delegate

  // instance methods
  -[NACRoutingControllerLocal delegate]
  -[NACRoutingControllerLocal setDelegate:]
  -[NACRoutingControllerLocal .cxx_destruct]
  -[NACRoutingControllerLocal routingControllerAvailableRoutesDidChange:]
  -[NACRoutingControllerLocal routingController:didFailToPickRouteWithError:]
  -[NACRoutingControllerLocal initWithAudioCategory:]
  -[NACRoutingControllerLocal pickedRoute]
  -[NACRoutingControllerLocal beginObservingRoutes]
  -[NACRoutingControllerLocal endObservingRoutes]
  -[NACRoutingControllerLocal pickAudioRoute:]
  -[NACRoutingControllerLocal availableAudioRoutes]


NACProminentHapticStateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasEnabled
 @property  BOOL enabled

  // instance methods
  -[NACProminentHapticStateMessage isEqual:]
  -[NACProminentHapticStateMessage copyWithZone:]
  -[NACProminentHapticStateMessage enabled]
  -[NACProminentHapticStateMessage setEnabled:]
  -[NACProminentHapticStateMessage dictionaryRepresentation]
  -[NACProminentHapticStateMessage writeTo:]
  -[NACProminentHapticStateMessage mergeFrom:]
  -[NACProminentHapticStateMessage readFrom:]
  -[NACProminentHapticStateMessage copyTo:]
  -[NACProminentHapticStateMessage setHasEnabled:]
  -[NACProminentHapticStateMessage hasEnabled]


NACVolumeController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[NACVolumeController localVolumeControllerWithAudioCategory:]
  +[NACVolumeController localVolumeControllerWithRoute:]
  +[NACVolumeController proxyVolumeControllerWithAudioCategory:]
  +[NACVolumeController proxyVolumeControllerWithTarget:]
  +[NACVolumeController demoVolumeControllerWithAudioCategory:]


NACVolumeWarningMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasVolumeWarningEnabled
 @property  BOOL volumeWarningEnabled
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier
 @property  BOOL hasVolumeWarningState
 @property  int volumeWarningState

  // instance methods
  -[NACVolumeWarningMessage isEqual:]
  -[NACVolumeWarningMessage copyWithZone:]
  -[NACVolumeWarningMessage .cxx_destruct]
  -[NACVolumeWarningMessage category]
  -[NACVolumeWarningMessage setCategory:]
  -[NACVolumeWarningMessage dictionaryRepresentation]
  -[NACVolumeWarningMessage writeTo:]
  -[NACVolumeWarningMessage mergeFrom:]
  -[NACVolumeWarningMessage readFrom:]
  -[NACVolumeWarningMessage copyTo:]
  -[NACVolumeWarningMessage hasCategory]
  -[NACVolumeWarningMessage originIdentifier]
  -[NACVolumeWarningMessage volumeWarningEnabled]
  -[NACVolumeWarningMessage volumeWarningState]
  -[NACVolumeWarningMessage setOriginIdentifier:]
  -[NACVolumeWarningMessage setHasOriginIdentifier:]
  -[NACVolumeWarningMessage hasOriginIdentifier]
  -[NACVolumeWarningMessage setVolumeWarningEnabled:]
  -[NACVolumeWarningMessage setHasVolumeWarningEnabled:]
  -[NACVolumeWarningMessage hasVolumeWarningEnabled]
  -[NACVolumeWarningMessage setVolumeWarningState:]
  -[NACVolumeWarningMessage setHasVolumeWarningState:]
  -[NACVolumeWarningMessage hasVolumeWarningState]


NACProxyVolumeControlTarget : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding>
 @property  NSNumber *originIdentifier
 @property  NSString *category
 @property  BOOL pairedDevice

  // class methods
  +[NACProxyVolumeControlTarget supportsSecureCoding]
  +[NACProxyVolumeControlTarget volumeControlTargetWithCategory:]
  +[NACProxyVolumeControlTarget volumeControlTargetWithOriginIdentifier:]
  +[NACProxyVolumeControlTarget _isValidOriginIdentifier:]

  // instance methods
  -[NACProxyVolumeControlTarget isEqual:]
  -[NACProxyVolumeControlTarget copyWithZone:]
  -[NACProxyVolumeControlTarget encodeWithCoder:]
  -[NACProxyVolumeControlTarget initWithCoder:]
  -[NACProxyVolumeControlTarget .cxx_destruct]
  -[NACProxyVolumeControlTarget category]
  -[NACProxyVolumeControlTarget setCategory:]
  -[NACProxyVolumeControlTarget originIdentifier]
  -[NACProxyVolumeControlTarget setOriginIdentifier:]
  -[NACProxyVolumeControlTarget isPairedDevice]
  -[NACProxyVolumeControlTarget initWithOriginIdentifier:category:]


NACCategoryMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasCategory
 @property  NSString *category

  // instance methods
  -[NACCategoryMessage isEqual:]
  -[NACCategoryMessage copyWithZone:]
  -[NACCategoryMessage .cxx_destruct]
  -[NACCategoryMessage category]
  -[NACCategoryMessage setCategory:]
  -[NACCategoryMessage dictionaryRepresentation]
  -[NACCategoryMessage writeTo:]
  -[NACCategoryMessage mergeFrom:]
  -[NACCategoryMessage readFrom:]
  -[NACCategoryMessage copyTo:]
  -[NACCategoryMessage hasCategory]


NACXPCClient : NSObject /usr/lib/libSystem.B.dylib <NACXPCInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NACXPCClient sharedClient]

  // instance methods
  -[NACXPCClient init]
  -[NACXPCClient .cxx_destruct]
  -[NACXPCClient _proxy]
  -[NACXPCClient setHapticIntensity:]
  -[NACXPCClient _createConnection]
  -[NACXPCClient beginObservingVolumeForTarget:]
  -[NACXPCClient beginObservingListeningModesForTarget:]
  -[NACXPCClient beginObservingAudioRoutesForCategory:]
  -[NACXPCClient endObservingVolumeForTarget:]
  -[NACXPCClient endObservingListeningModesForTarget:]
  -[NACXPCClient volumeValueForTarget:result:]
  -[NACXPCClient volumeControlAvailabilityForTarget:result:]
  -[NACXPCClient mutedStateForTarget:result:]
  -[NACXPCClient hapticState:]
  -[NACXPCClient hapticIntensity:]
  -[NACXPCClient prominentHapticEnabled:]
  -[NACXPCClient systemMutedState:]
  -[NACXPCClient EULimitForTarget:result:]
  -[NACXPCClient volumeWarningForTarget:result:]
  -[NACXPCClient setVolumeValue:forTarget:]
  -[NACXPCClient setMuted:forTarget:]
  -[NACXPCClient setProminentHapticEnabled:]
  -[NACXPCClient setHapticState:]
  -[NACXPCClient setSystemMuted:]
  -[NACXPCClient availableListeningModesForTarget:result:]
  -[NACXPCClient currentListeningModeForTarget:result:]
  -[NACXPCClient setCurrentListeningMode:forTarget:]
  -[NACXPCClient audioRoutesForCategory:result:]
  -[NACXPCClient endObservingAudioRoutesForCategory:]
  -[NACXPCClient pickAudioRouteWithIdentifier:category:]
  -[NACXPCClient playAudioAndHapticPreview]
  -[NACXPCClient playDefaultHapticPreview]
  -[NACXPCClient playProminentHapticPreview]
  -[NACXPCClient _resumeVolumeObservingIfNecessary]
  -[NACXPCClient _resumeListeningModesObservingIfNecessary]
  -[NACXPCClient _resumeRouteObservingIfNecessary]


NACDaemonServer : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[NACDaemonServer gizmoServer]
  +[NACDaemonServer companionServer]

  // instance methods
  -[NACDaemonServer .cxx_destruct]


_NACVolumeObserverRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL volumeControlAvailable
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  BOOL muted
 @property  float EUVolumeLimit
 @property  NACEventThrottler *throttler
 @property  MPVolumeController *volumeController
 @property  MPAVRoutingController *routingController
 @property  <NACVolumeController> *nacVolumeController

  // instance methods
  -[_NACVolumeObserverRecord .cxx_destruct]
  -[_NACVolumeObserverRecord setMuted:]
  -[_NACVolumeObserverRecord isMuted]
  -[_NACVolumeObserverRecord routingController]
  -[_NACVolumeObserverRecord setVolumeController:]
  -[_NACVolumeObserverRecord volumeController]
  -[_NACVolumeObserverRecord isVolumeControlAvailable]
  -[_NACVolumeObserverRecord volumeWarningState]
  -[_NACVolumeObserverRecord EUVolumeLimit]
  -[_NACVolumeObserverRecord throttler]
  -[_NACVolumeObserverRecord setEUVolumeLimit:]
  -[_NACVolumeObserverRecord setVolumeControlAvailable:]
  -[_NACVolumeObserverRecord setRoutingController:]
  -[_NACVolumeObserverRecord setVolumeWarningEnabled:]
  -[_NACVolumeObserverRecord setVolumeWarningState:]
  -[_NACVolumeObserverRecord isVolumeWarningEnabled]
  -[_NACVolumeObserverRecord setThrottler:]
  -[_NACVolumeObserverRecord nacVolumeController]
  -[_NACVolumeObserverRecord setNacVolumeController:]


_NACRoutesObserverRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  MPAVRoutingController *routingController
 @property  NACRunAssertion *runAssertion

  // instance methods
  -[_NACRoutesObserverRecord .cxx_destruct]
  -[_NACRoutesObserverRecord routingController]
  -[_NACRoutesObserverRecord setRoutingController:]
  -[_NACRoutesObserverRecord runAssertion]
  -[_NACRoutesObserverRecord setRunAssertion:]


_NACIDSMessageRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  PBCodable *message
 @property  long long type
 @property  double timeout
 @property  NSString *queueOne

  // instance methods
  -[_NACIDSMessageRecord type]
  -[_NACIDSMessageRecord setType:]
  -[_NACIDSMessageRecord .cxx_destruct]
  -[_NACIDSMessageRecord timeout]
  -[_NACIDSMessageRecord setTimeout:]
  -[_NACIDSMessageRecord message]
  -[_NACIDSMessageRecord setMessage:]
  -[_NACIDSMessageRecord queueOne]
  -[_NACIDSMessageRecord setQueueOne:]


NACIDSServer : NSObject /usr/lib/libSystem.B.dylib <NACVolumeControllerDelegate, IDSServiceDelegate, MPVolumeControllerDelegate, MPAVRoutingControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NACIDSServer dealloc]
  -[NACIDSServer .cxx_destruct]
  -[NACIDSServer service:account:identifier:didSendWithSuccess:error:]
  -[NACIDSServer routingControllerAvailableRoutesDidChange:]
  -[NACIDSServer volumeController:volumeControlAvailableDidChange:]
  -[NACIDSServer volumeController:volumeValueDidChange:]
  -[NACIDSServer volumeController:mutedStateDidChange:]
  -[NACIDSServer volumeController:volumeWarningStateDidChange:]
  -[NACIDSServer volumeController:EUVolumeLimitDidChange:]
  -[NACIDSServer _handlePickAudioRoute:]
  -[NACIDSServer _handleSetVolume:]
  -[NACIDSServer initWithVolumeAudioCategories:]
  -[NACIDSServer beginObservingHapticState]
  -[NACIDSServer beginObservingSystemMutedState]
  -[NACIDSServer _handleSetMuted:]
  -[NACIDSServer _handleBeginObservingVolume:]
  -[NACIDSServer _handleEndObservingVolume:]
  -[NACIDSServer _handleBeginObservingAudioRoutes:]
  -[NACIDSServer _handleEndObservingAudioRoutes:]
  -[NACIDSServer _handleSetSystemMuted:]
  -[NACIDSServer _handleSetHapticState:]
  -[NACIDSServer _handleSetCurrentListeningMode:]
  -[NACIDSServer _handleBeginObservingListeningModes:]
  -[NACIDSServer _handleEndObservingListeningModes:]
  -[NACIDSServer _handleSetHapticIntensity:]
  -[NACIDSServer _handleSetProminentHapticEnabled:]
  -[NACIDSServer _beginObservingSystemVolume]
  -[NACIDSServer _beginObservingHapticState]
  -[NACIDSServer _beginObservingSystemMutedState]
  -[NACIDSServer _handleBeginObservingSystemVolume]
  -[NACIDSServer _handleBeginObservingProxyVolumeForTarget:]
  -[NACIDSServer _updateProminentHapticState]
  -[NACIDSServer _nacVolumeControllerForTarget:createIfNeeded:]
  -[NACIDSServer _sendAvailableListeningModes:currentListeningMode:error:forTarget:]
  -[NACIDSServer _updateHapticState]
  -[NACIDSServer _cancelRouteObservationForCategory:]
  -[NACIDSServer _hasRequestedVolumeAtLeastOnce]
  -[NACIDSServer _setRequestedVolumeAtLeastOnce]
  -[NACIDSServer _sendCurrentObservingSystemVolumeValues]
  -[NACIDSServer _cancelSystemVolumeObservation]
  -[NACIDSServer _sendVolumeValue:forTarget:]
  -[NACIDSServer _sendVolumeControlAvailability:forTarget:]
  -[NACIDSServer _sendVolumeWarningEnabled:volumeWarningState:forTarget:]
  -[NACIDSServer _sendEUVolumeLimit:forTarget:]
  -[NACIDSServer _hapticIntensityDidChangeNotification:]
  -[NACIDSServer updateProminentHapticState]
  -[NACIDSServer _updateHapticIntensityValue]
  -[NACIDSServer _updateSystemMutedState]
  -[NACIDSServer _sendSystemMutedState:]
  -[NACIDSServer _sendHapticState:]
  -[NACIDSServer _beginObservingProxyVolumeForTarget:withEndpointRoute:]
  -[NACIDSServer _cancelProxyVolumeObservationForTarget:]
  -[NACIDSServer _sendMessage:type:timeout:queueOne:retry:]
  -[NACIDSServer _targetForVolumeController:]
  -[NACIDSServer _sendMutedState:forTarget:]
  -[NACIDSServer _targetForNACVolumeController:]
  -[NACIDSServer _shouldForceVolumeWarning]
  -[NACIDSServer volumeControllerDidUpdateAvailableListeningModes:]
  -[NACIDSServer volumeControllerDidUpdateCurrentListeningMode:]
  -[NACIDSServer volumeController:didFailToSetCurrentListeningModeWithError:]


NACVolumeControlAvailabilityMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasVolumeControlAvailable
 @property  BOOL volumeControlAvailable
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[NACVolumeControlAvailabilityMessage isEqual:]
  -[NACVolumeControlAvailabilityMessage copyWithZone:]
  -[NACVolumeControlAvailabilityMessage .cxx_destruct]
  -[NACVolumeControlAvailabilityMessage category]
  -[NACVolumeControlAvailabilityMessage setCategory:]
  -[NACVolumeControlAvailabilityMessage dictionaryRepresentation]
  -[NACVolumeControlAvailabilityMessage writeTo:]
  -[NACVolumeControlAvailabilityMessage mergeFrom:]
  -[NACVolumeControlAvailabilityMessage readFrom:]
  -[NACVolumeControlAvailabilityMessage copyTo:]
  -[NACVolumeControlAvailabilityMessage hasCategory]
  -[NACVolumeControlAvailabilityMessage originIdentifier]
  -[NACVolumeControlAvailabilityMessage setVolumeControlAvailable:]
  -[NACVolumeControlAvailabilityMessage hasVolumeControlAvailable]
  -[NACVolumeControlAvailabilityMessage volumeControlAvailable]
  -[NACVolumeControlAvailabilityMessage setHasVolumeControlAvailable:]
  -[NACVolumeControlAvailabilityMessage setOriginIdentifier:]
  -[NACVolumeControlAvailabilityMessage setHasOriginIdentifier:]
  -[NACVolumeControlAvailabilityMessage hasOriginIdentifier]


NACPickAudioRouteMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasIdentifier
 @property  NSString *identifier

  // instance methods
  -[NACPickAudioRouteMessage isEqual:]
  -[NACPickAudioRouteMessage copyWithZone:]
  -[NACPickAudioRouteMessage .cxx_destruct]
  -[NACPickAudioRouteMessage identifier]
  -[NACPickAudioRouteMessage category]
  -[NACPickAudioRouteMessage setCategory:]
  -[NACPickAudioRouteMessage setIdentifier:]
  -[NACPickAudioRouteMessage dictionaryRepresentation]
  -[NACPickAudioRouteMessage writeTo:]
  -[NACPickAudioRouteMessage mergeFrom:]
  -[NACPickAudioRouteMessage readFrom:]
  -[NACPickAudioRouteMessage copyTo:]
  -[NACPickAudioRouteMessage hasCategory]
  -[NACPickAudioRouteMessage hasIdentifier]


_NACVolumeRecord : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  float volumeValue
 @property  BOOL volumeControlAvailable
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  BOOL muted
 @property  float EUVolumeLimit
 @property  NSMutableSet *observers

  // class methods
  +[_NACVolumeRecord supportsSecureCoding]

  // instance methods
  -[_NACVolumeRecord encodeWithCoder:]
  -[_NACVolumeRecord initWithCoder:]
  -[_NACVolumeRecord .cxx_destruct]
  -[_NACVolumeRecord observers]
  -[_NACVolumeRecord setMuted:]
  -[_NACVolumeRecord isMuted]
  -[_NACVolumeRecord isVolumeControlAvailable]
  -[_NACVolumeRecord volumeWarningState]
  -[_NACVolumeRecord EUVolumeLimit]
  -[_NACVolumeRecord volumeValue]
  -[_NACVolumeRecord setVolumeValue:]
  -[_NACVolumeRecord setEUVolumeLimit:]
  -[_NACVolumeRecord setVolumeControlAvailable:]
  -[_NACVolumeRecord setVolumeWarningEnabled:]
  -[_NACVolumeRecord setVolumeWarningState:]
  -[_NACVolumeRecord isVolumeWarningEnabled]


_NACListeningModesRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  NSOrderedSet *availableListeningModes
 @property  NSString *currentListeningMode
 @property  NSMutableSet *observers

  // instance methods
  -[_NACListeningModesRecord .cxx_destruct]
  -[_NACListeningModesRecord setObservers:]
  -[_NACListeningModesRecord observers]
  -[_NACListeningModesRecord setAvailableListeningModes:]
  -[_NACListeningModesRecord availableListeningModes]
  -[_NACListeningModesRecord currentListeningMode]
  -[_NACListeningModesRecord setCurrentListeningMode:]


_NACAudioRoutesRecord : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *audioRoutes
 @property  NSArray *deferredAudioRoutes
 @property  NSMutableSet *observers
 @property  double timestamp

  // instance methods
  -[_NACAudioRoutesRecord .cxx_destruct]
  -[_NACAudioRoutesRecord timestamp]
  -[_NACAudioRoutesRecord setTimestamp:]
  -[_NACAudioRoutesRecord setObservers:]
  -[_NACAudioRoutesRecord observers]
  -[_NACAudioRoutesRecord audioRoutes]
  -[_NACAudioRoutesRecord setAudioRoutes:]
  -[_NACAudioRoutesRecord deferredAudioRoutes]
  -[_NACAudioRoutesRecord setDeferredAudioRoutes:]


NACXPCServer : NSObject /usr/lib/libSystem.B.dylib <NSXPCListenerDelegate, NACXPCInterface, NACIDSClientDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[NACXPCServer server]

  // instance methods
  -[NACXPCServer init]
  -[NACXPCServer .cxx_destruct]
  -[NACXPCServer listener:shouldAcceptNewConnection:]
  -[NACXPCServer setHapticIntensity:]
  -[NACXPCServer beginObservingVolumeForTarget:]
  -[NACXPCServer beginObservingListeningModesForTarget:]
  -[NACXPCServer beginObservingAudioRoutesForCategory:]
  -[NACXPCServer endObservingVolumeForTarget:]
  -[NACXPCServer endObservingListeningModesForTarget:]
  -[NACXPCServer volumeValueForTarget:result:]
  -[NACXPCServer volumeControlAvailabilityForTarget:result:]
  -[NACXPCServer mutedStateForTarget:result:]
  -[NACXPCServer hapticState:]
  -[NACXPCServer hapticIntensity:]
  -[NACXPCServer prominentHapticEnabled:]
  -[NACXPCServer systemMutedState:]
  -[NACXPCServer EULimitForTarget:result:]
  -[NACXPCServer volumeWarningForTarget:result:]
  -[NACXPCServer setVolumeValue:forTarget:]
  -[NACXPCServer setMuted:forTarget:]
  -[NACXPCServer setProminentHapticEnabled:]
  -[NACXPCServer setHapticState:]
  -[NACXPCServer setSystemMuted:]
  -[NACXPCServer availableListeningModesForTarget:result:]
  -[NACXPCServer currentListeningModeForTarget:result:]
  -[NACXPCServer setCurrentListeningMode:forTarget:]
  -[NACXPCServer audioRoutesForCategory:result:]
  -[NACXPCServer endObservingAudioRoutesForCategory:]
  -[NACXPCServer pickAudioRouteWithIdentifier:category:]
  -[NACXPCServer playAudioAndHapticPreview]
  -[NACXPCServer playDefaultHapticPreview]
  -[NACXPCServer playProminentHapticPreview]
  -[NACXPCServer _cachedVolumeRecords]
  -[NACXPCServer _cachedHapticIntensity]
  -[NACXPCServer _cachedSystemMutedState]
  -[NACXPCServer _cachedProminentHapticState]
  -[NACXPCServer _cachedHapticState]
  -[NACXPCServer _cleanupConnection:]
  -[NACXPCServer _beginObservingVolumeForTarget:connection:]
  -[NACXPCServer _volumeRecordForTarget:]
  -[NACXPCServer _aggregatedCountOfObserversForTarget:inRecords:]
  -[NACXPCServer _endObservingVolumeForTarget:connection:]
  -[NACXPCServer _beginObservingListeningModesForTarget:connection:]
  -[NACXPCServer _endObservingListeningModesForTarget:connection:]
  -[NACXPCServer _listeningModesRecordForTarget:]
  -[NACXPCServer _audioRoutesRecordForCategory:]
  -[NACXPCServer _endObservingAudioRoutesForCategory:connection:]
  -[NACXPCServer _persistVolumeRecords]
  -[NACXPCServer _persistHapticIntensity]
  -[NACXPCServer _persistProminentHapticState]
  -[NACXPCServer _persistHapticState]
  -[NACXPCServer _persistSystemMutedState]
  -[NACXPCServer _scheduleDeferredAudioRoutesUpdate:category:]
  -[NACXPCServer _updateAudioRoutes:category:]
  -[NACXPCServer _cancelDeferredAudioRoutesUpdate]
  -[NACXPCServer _routeObservationCategoriesForConnection:]
  -[NACXPCServer client:volumeValue:didChangeForTarget:]
  -[NACXPCServer client:volumeControlAvailable:didChangeForTarget:]
  -[NACXPCServer client:mutedState:didChangeForTarget:]
  -[NACXPCServer client:EULimit:didChangeForTarget:]
  -[NACXPCServer client:volumeWarningEnabled:volumeWarningState:didChangeForTarget:]
  -[NACXPCServer client:volumeObservationCancelledForTarget:]
  -[NACXPCServer client:availableListeningModes:didChangeForTarget:]
  -[NACXPCServer client:currentListeningMode:didChangeForTarget:]
  -[NACXPCServer client:didFailToSetCurrentListeningModeForTarget:error:]
  -[NACXPCServer client:audioRoutes:didChangeForCategory:]
  -[NACXPCServer client:routeObservationCancelledForCategory:]
  -[NACXPCServer client:systemMutedStateDidChange:]
  -[NACXPCServer client:hapticStateDidChange:]
  -[NACXPCServer client:hapticIntensityDidChange:]
  -[NACXPCServer client:prominentHapticStateDidChange:]


NACRoutingControllerProxy : NSObject /usr/lib/libSystem.B.dylib <NACRoutingController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NACAudioRoute *pickedRoute
 @property  NSArray *availableAudioRoutes
 @property  <NACRoutingControllerDelegate> *delegate

  // instance methods
  -[NACRoutingControllerProxy dealloc]
  -[NACRoutingControllerProxy delegate]
  -[NACRoutingControllerProxy setDelegate:]
  -[NACRoutingControllerProxy .cxx_destruct]
  -[NACRoutingControllerProxy _applicationDidBecomeActiveNotification:]
  -[NACRoutingControllerProxy _applicationWillResignActiveNotification:]
  -[NACRoutingControllerProxy initWithAudioCategory:]
  -[NACRoutingControllerProxy pickedRoute]
  -[NACRoutingControllerProxy beginObservingRoutes]
  -[NACRoutingControllerProxy endObservingRoutes]
  -[NACRoutingControllerProxy pickAudioRoute:]
  -[NACRoutingControllerProxy availableAudioRoutes]
  -[NACRoutingControllerProxy _audioRoutesDidChange]


NACVolumeControllerProxy : NSObject /usr/lib/libSystem.B.dylib <NACVolumeController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NACVolumeControllerDelegate> *delegate
 @property  BOOL volumeControlAvailable
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  BOOL muted
 @property  float volumeValue
 @property  float EUVolumeLimit
 @property  BOOL systemMuted
 @property  long long hapticState
 @property  NSOrderedSet *availableListeningModes
 @property  NSString *currentListeningMode
 @property  float hapticIntensity
 @property  BOOL prominentHapticEnabled

  // instance methods
  -[NACVolumeControllerProxy dealloc]
  -[NACVolumeControllerProxy delegate]
  -[NACVolumeControllerProxy setDelegate:]
  -[NACVolumeControllerProxy .cxx_destruct]
  -[NACVolumeControllerProxy _applicationDidBecomeActiveNotification:]
  -[NACVolumeControllerProxy _applicationWillResignActiveNotification:]
  -[NACVolumeControllerProxy setMuted:]
  -[NACVolumeControllerProxy isMuted]
  -[NACVolumeControllerProxy setHapticIntensity:]
  -[NACVolumeControllerProxy hapticIntensity]
  -[NACVolumeControllerProxy allowUserToExceedEUVolumeLimit]
  -[NACVolumeControllerProxy isVolumeControlAvailable]
  -[NACVolumeControllerProxy volumeWarningState]
  -[NACVolumeControllerProxy EUVolumeLimit]
  -[NACVolumeControllerProxy volumeValue]
  -[NACVolumeControllerProxy setVolumeValue:]
  -[NACVolumeControllerProxy availableListeningModes]
  -[NACVolumeControllerProxy initWithVolumeControlTarget:]
  -[NACVolumeControllerProxy setProminentHapticEnabled:]
  -[NACVolumeControllerProxy setHapticState:]
  -[NACVolumeControllerProxy setSystemMuted:]
  -[NACVolumeControllerProxy isVolumeWarningEnabled]
  -[NACVolumeControllerProxy currentListeningMode]
  -[NACVolumeControllerProxy setCurrentListeningMode:]
  -[NACVolumeControllerProxy beginObservingListeningModes]
  -[NACVolumeControllerProxy endObservingListeningModes]
  -[NACVolumeControllerProxy _setVolumeValue:]
  -[NACVolumeControllerProxy _setHapticIntensity:]
  -[NACVolumeControllerProxy endObservingVolume]
  -[NACVolumeControllerProxy _handleFailedToSetCurrentListeningModeNotification:]
  -[NACVolumeControllerProxy _volumeControlAvailabilityDidChange]
  -[NACVolumeControllerProxy _volumeValueDidChange]
  -[NACVolumeControllerProxy _mutedStateDidChange]
  -[NACVolumeControllerProxy _systemMutedStateDidChange]
  -[NACVolumeControllerProxy _hapticStateDidChange]
  -[NACVolumeControllerProxy _volumeWarningDidChange]
  -[NACVolumeControllerProxy _EUVolumeLimitDidChange]
  -[NACVolumeControllerProxy _availableListeningModesDidChange]
  -[NACVolumeControllerProxy _currentListeningModeDidChange]
  -[NACVolumeControllerProxy _prominentHapticStateDidChange]
  -[NACVolumeControllerProxy _hapticIntensityDidChange]
  -[NACVolumeControllerProxy _cancelSetVolumeTimer]
  -[NACVolumeControllerProxy _volumeTimout]
  -[NACVolumeControllerProxy _scheduleTimeoutWithBlock:]
  -[NACVolumeControllerProxy _notifyDelegateVolumeChanged]
  -[NACVolumeControllerProxy _prominentHapticTimeout]
  -[NACVolumeControllerProxy _notifyDelegateProminentHapticStateChanged]
  -[NACVolumeControllerProxy _cancelSetProminentHapticTimer]
  -[NACVolumeControllerProxy _hapticTimeout]
  -[NACVolumeControllerProxy _notifyDelegateHapticChanged]
  -[NACVolumeControllerProxy _cancelSetHapticTimer]
  -[NACVolumeControllerProxy _hapticStateTimeout]
  -[NACVolumeControllerProxy _notifyDelegateHapticStateChanged]
  -[NACVolumeControllerProxy _cancelSetHapticStateTimer]
  -[NACVolumeControllerProxy _notifyDelegateSystemMutedStateChanged]
  -[NACVolumeControllerProxy beginObservingVolume]
  -[NACVolumeControllerProxy beginObservingHaptics]
  -[NACVolumeControllerProxy endObservingHaptics]
  -[NACVolumeControllerProxy isSystemMuted]
  -[NACVolumeControllerProxy hapticState]
  -[NACVolumeControllerProxy isProminentHapticEnabled]
  -[NACVolumeControllerProxy setVolumeValue:muted:overrideEULimit:]


NACAudioRoutesMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasCategory
 @property  NSString *category
 @property  NSMutableArray *audioRoutes

  // class methods
  +[NACAudioRoutesMessage audioRoutesType]

  // instance methods
  -[NACAudioRoutesMessage isEqual:]
  -[NACAudioRoutesMessage copyWithZone:]
  -[NACAudioRoutesMessage .cxx_destruct]
  -[NACAudioRoutesMessage category]
  -[NACAudioRoutesMessage setCategory:]
  -[NACAudioRoutesMessage dictionaryRepresentation]
  -[NACAudioRoutesMessage writeTo:]
  -[NACAudioRoutesMessage mergeFrom:]
  -[NACAudioRoutesMessage readFrom:]
  -[NACAudioRoutesMessage copyTo:]
  -[NACAudioRoutesMessage hasCategory]
  -[NACAudioRoutesMessage clearAudioRoutes]
  -[NACAudioRoutesMessage audioRoutes]
  -[NACAudioRoutesMessage setAudioRoutes:]
  -[NACAudioRoutesMessage addAudioRoutes:]
  -[NACAudioRoutesMessage audioRoutesCount]
  -[NACAudioRoutesMessage audioRoutesAtIndex:]


NACIDSClient : NSObject /usr/lib/libSystem.B.dylib <IDSServiceDelegate>
 @property  <NACIDSClientDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NACIDSClient init]
  -[NACIDSClient delegate]
  -[NACIDSClient setDelegate:]
  -[NACIDSClient .cxx_destruct]
  -[NACIDSClient service:account:identifier:didSendWithSuccess:error:]
  -[NACIDSClient setHapticIntensity:]
  -[NACIDSClient beginObservingVolumeForTarget:]
  -[NACIDSClient beginObservingListeningModesForTarget:]
  -[NACIDSClient beginObservingAudioRoutesForCategory:]
  -[NACIDSClient endObservingVolumeForTarget:]
  -[NACIDSClient endObservingListeningModesForTarget:]
  -[NACIDSClient setVolumeValue:forTarget:]
  -[NACIDSClient setMuted:forTarget:]
  -[NACIDSClient setProminentHapticEnabled:]
  -[NACIDSClient setHapticState:]
  -[NACIDSClient setSystemMuted:]
  -[NACIDSClient setCurrentListeningMode:forTarget:]
  -[NACIDSClient endObservingAudioRoutesForCategory:]
  -[NACIDSClient pickAudioRouteWithIdentifier:category:]
  -[NACIDSClient _handleVolumeValueDidChange:]
  -[NACIDSClient _handleVolumeControlAvailabilityDidChange:]
  -[NACIDSClient _handleMutedStateDidChange:]
  -[NACIDSClient _handleEUVolumeLimitDidChange:]
  -[NACIDSClient _handleVolumeWarningDidChange:]
  -[NACIDSClient _handleAudioRoutesDidChange:]
  -[NACIDSClient _handleVolumeObservationCancelled:]
  -[NACIDSClient _handleRouteObservationCancelled:]
  -[NACIDSClient _handleSystemMutedStatedDidChange:]
  -[NACIDSClient _handleHapticStateDidChange:]
  -[NACIDSClient _handleListeningModesDidChange:]
  -[NACIDSClient _handleHapticIntensityDidChange:]
  -[NACIDSClient _handleProminentHapticStateDidChange:]
  -[NACIDSClient _sendMessage:type:timeout:queueOne:priority:]


_NACAVRoutingDiscoverySession : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[_NACAVRoutingDiscoverySession init]
  -[_NACAVRoutingDiscoverySession dealloc]
  -[_NACAVRoutingDiscoverySession .cxx_destruct]
  -[_NACAVRoutingDiscoverySession fetchRouteForOriginIdentifier:completion:]


NACEndpointObserver : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[NACEndpointObserver sharedObserver]

  // instance methods
  -[NACEndpointObserver init]
  -[NACEndpointObserver .cxx_destruct]
  -[NACEndpointObserver fetchRouteForOriginIdentifier:completion:]
  -[NACEndpointObserver invalidateDiscoverySession]


NACRoutingController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[NACRoutingController localRoutingControllerWithAudioCategory:]
  +[NACRoutingController proxyRoutingControllerWithAudioCategory:]


NACHapticStateMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasState
 @property  int state

  // instance methods
  -[NACHapticStateMessage isEqual:]
  -[NACHapticStateMessage copyWithZone:]
  -[NACHapticStateMessage dictionaryRepresentation]
  -[NACHapticStateMessage state]
  -[NACHapticStateMessage setState:]
  -[NACHapticStateMessage writeTo:]
  -[NACHapticStateMessage mergeFrom:]
  -[NACHapticStateMessage readFrom:]
  -[NACHapticStateMessage copyTo:]
  -[NACHapticStateMessage hasState]
  -[NACHapticStateMessage setHasState:]


NACAudioRouteBuffer : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasUniqueIdentifier
 @property  NSString *uniqueIdentifier
 @property  BOOL hasRouteName
 @property  NSString *routeName
 @property  BOOL hasSupportsVolumeControl
 @property  BOOL supportsVolumeControl
 @property  BOOL hasPicked
 @property  BOOL picked
 @property  BOOL hasRouteType
 @property  int routeType

  // instance methods
  -[NACAudioRouteBuffer isEqual:]
  -[NACAudioRouteBuffer copyWithZone:]
  -[NACAudioRouteBuffer .cxx_destruct]
  -[NACAudioRouteBuffer dictionaryRepresentation]
  -[NACAudioRouteBuffer uniqueIdentifier]
  -[NACAudioRouteBuffer writeTo:]
  -[NACAudioRouteBuffer mergeFrom:]
  -[NACAudioRouteBuffer readFrom:]
  -[NACAudioRouteBuffer copyTo:]
  -[NACAudioRouteBuffer setUniqueIdentifier:]
  -[NACAudioRouteBuffer routeType]
  -[NACAudioRouteBuffer setRouteType:]
  -[NACAudioRouteBuffer setHasRouteType:]
  -[NACAudioRouteBuffer hasRouteType]
  -[NACAudioRouteBuffer routeTypeAsString:]
  -[NACAudioRouteBuffer StringAsRouteType:]
  -[NACAudioRouteBuffer hasUniqueIdentifier]
  -[NACAudioRouteBuffer routeName]
  -[NACAudioRouteBuffer setRouteName:]
  -[NACAudioRouteBuffer setPicked:]
  -[NACAudioRouteBuffer supportsVolumeControl]
  -[NACAudioRouteBuffer picked]
  -[NACAudioRouteBuffer setSupportsVolumeControl:]
  -[NACAudioRouteBuffer setHasSupportsVolumeControl:]
  -[NACAudioRouteBuffer hasSupportsVolumeControl]
  -[NACAudioRouteBuffer hasRouteName]
  -[NACAudioRouteBuffer setHasPicked:]
  -[NACAudioRouteBuffer hasPicked]


NACRunAssertion : NSObject /usr/lib/libSystem.B.dylib
  // instance methods
  -[NACRunAssertion init]
  -[NACRunAssertion .cxx_destruct]


NACEventThrottler : NSObject /usr/lib/libSystem.B.dylib
 @property  @? eventBlock
 @property  double minimumDelay
 @property  id value

  // instance methods
  -[NACEventThrottler init]
  -[NACEventThrottler .cxx_destruct]
  -[NACEventThrottler cancel]
  -[NACEventThrottler value]
  -[NACEventThrottler setValue:]
  -[NACEventThrottler initWithQueue:]
  -[NACEventThrottler eventBlock]
  -[NACEventThrottler setEventBlock:]
  -[NACEventThrottler _fire]
  -[NACEventThrottler setMinimumDelay:]
  -[NACEventThrottler minimumDelay]


NACListeningModesMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  NSMutableArray *availableListeningModes
 @property  BOOL hasCurrentListeningMode
 @property  NSString *currentListeningMode
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier
 @property  BOOL hasError
 @property  NSData *error

  // class methods
  +[NACListeningModesMessage availableListeningModeType]

  // instance methods
  -[NACListeningModesMessage isEqual:]
  -[NACListeningModesMessage copyWithZone:]
  -[NACListeningModesMessage .cxx_destruct]
  -[NACListeningModesMessage error]
  -[NACListeningModesMessage category]
  -[NACListeningModesMessage setCategory:]
  -[NACListeningModesMessage setError:]
  -[NACListeningModesMessage dictionaryRepresentation]
  -[NACListeningModesMessage writeTo:]
  -[NACListeningModesMessage mergeFrom:]
  -[NACListeningModesMessage readFrom:]
  -[NACListeningModesMessage copyTo:]
  -[NACListeningModesMessage hasCategory]
  -[NACListeningModesMessage hasError]
  -[NACListeningModesMessage originIdentifier]
  -[NACListeningModesMessage setAvailableListeningModes:]
  -[NACListeningModesMessage availableListeningModes]
  -[NACListeningModesMessage setOriginIdentifier:]
  -[NACListeningModesMessage setHasOriginIdentifier:]
  -[NACListeningModesMessage hasOriginIdentifier]
  -[NACListeningModesMessage currentListeningMode]
  -[NACListeningModesMessage setCurrentListeningMode:]
  -[NACListeningModesMessage addAvailableListeningMode:]
  -[NACListeningModesMessage availableListeningModesCount]
  -[NACListeningModesMessage hasCurrentListeningMode]
  -[NACListeningModesMessage clearAvailableListeningModes]
  -[NACListeningModesMessage availableListeningModeAtIndex:]


NACOriginIdentifierMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[NACOriginIdentifierMessage isEqual:]
  -[NACOriginIdentifierMessage copyWithZone:]
  -[NACOriginIdentifierMessage dictionaryRepresentation]
  -[NACOriginIdentifierMessage writeTo:]
  -[NACOriginIdentifierMessage mergeFrom:]
  -[NACOriginIdentifierMessage readFrom:]
  -[NACOriginIdentifierMessage copyTo:]
  -[NACOriginIdentifierMessage originIdentifier]
  -[NACOriginIdentifierMessage setOriginIdentifier:]
  -[NACOriginIdentifierMessage setHasOriginIdentifier:]
  -[NACOriginIdentifierMessage hasOriginIdentifier]


NACVolumeControllerLocal : NSObject /usr/lib/libSystem.B.dylib <MPVolumeControllerDelegate, MPAVRoutingControllerDelegate, MediaControlsVolumeControllerObserver, NACVolumeController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NACVolumeControllerDelegate> *delegate
 @property  BOOL volumeControlAvailable
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  BOOL muted
 @property  float volumeValue
 @property  float EUVolumeLimit
 @property  BOOL systemMuted
 @property  long long hapticState
 @property  NSOrderedSet *availableListeningModes
 @property  NSString *currentListeningMode
 @property  float hapticIntensity
 @property  BOOL prominentHapticEnabled

  // instance methods
  -[NACVolumeControllerLocal init]
  -[NACVolumeControllerLocal delegate]
  -[NACVolumeControllerLocal setDelegate:]
  -[NACVolumeControllerLocal .cxx_destruct]
  -[NACVolumeControllerLocal _init]
  -[NACVolumeControllerLocal initWithRoute:]
  -[NACVolumeControllerLocal setMuted:]
  -[NACVolumeControllerLocal isMuted]
  -[NACVolumeControllerLocal _volumeController]
  -[NACVolumeControllerLocal setHapticIntensity:]
  -[NACVolumeControllerLocal hapticIntensity]
  -[NACVolumeControllerLocal routingControllerAvailableRoutesDidChange:]
  -[NACVolumeControllerLocal volumeController:volumeControlAvailableDidChange:]
  -[NACVolumeControllerLocal volumeController:volumeValueDidChange:]
  -[NACVolumeControllerLocal volumeController:mutedStateDidChange:]
  -[NACVolumeControllerLocal volumeController:volumeWarningStateDidChange:]
  -[NACVolumeControllerLocal volumeController:EUVolumeLimitDidChange:]
  -[NACVolumeControllerLocal allowUserToExceedEUVolumeLimit]
  -[NACVolumeControllerLocal initWithAudioCategory:]
  -[NACVolumeControllerLocal isVolumeControlAvailable]
  -[NACVolumeControllerLocal volumeWarningState]
  -[NACVolumeControllerLocal EUVolumeLimit]
  -[NACVolumeControllerLocal volumeValue]
  -[NACVolumeControllerLocal setVolumeValue:]
  -[NACVolumeControllerLocal mediaControlsVolumeController:didUpdateSplitRoute:]
  -[NACVolumeControllerLocal availableListeningModes]
  -[NACVolumeControllerLocal setProminentHapticEnabled:]
  -[NACVolumeControllerLocal setHapticState:]
  -[NACVolumeControllerLocal setSystemMuted:]
  -[NACVolumeControllerLocal playDefaultHapticPreview]
  -[NACVolumeControllerLocal playProminentHapticPreview]
  -[NACVolumeControllerLocal beginObservingHapticState]
  -[NACVolumeControllerLocal isVolumeWarningEnabled]
  -[NACVolumeControllerLocal currentListeningMode]
  -[NACVolumeControllerLocal setCurrentListeningMode:]
  -[NACVolumeControllerLocal beginObservingListeningModes]
  -[NACVolumeControllerLocal endObservingListeningModes]
  -[NACVolumeControllerLocal _setVolumeValue:]
  -[NACVolumeControllerLocal _setHapticIntensity:]
  -[NACVolumeControllerLocal endObservingVolume]
  -[NACVolumeControllerLocal beginObservingVolume]
  -[NACVolumeControllerLocal beginObservingHaptics]
  -[NACVolumeControllerLocal endObservingHaptics]
  -[NACVolumeControllerLocal isSystemMuted]
  -[NACVolumeControllerLocal hapticState]
  -[NACVolumeControllerLocal isProminentHapticEnabled]
  -[NACVolumeControllerLocal _ignoreHapticObservation]
  -[NACVolumeControllerLocal setVolumeValue:muted:overrideEULimit:]
  -[NACVolumeControllerLocal _updateMutedStateFromVolumeController:]
  -[NACVolumeControllerLocal _updateVolumeState]
  -[NACVolumeControllerLocal updateCachedHapticState]
  -[NACVolumeControllerLocal endObservingHapticState]
  -[NACVolumeControllerLocal _mediaControlsVolumeController]
  -[NACVolumeControllerLocal playPreview]


NACVolumeControllerDemo : NSObject /usr/lib/libSystem.B.dylib <NACVolumeController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NACVolumeControllerDelegate> *delegate
 @property  BOOL volumeControlAvailable
 @property  BOOL volumeWarningEnabled
 @property  long long volumeWarningState
 @property  BOOL muted
 @property  float volumeValue
 @property  float EUVolumeLimit
 @property  BOOL systemMuted
 @property  long long hapticState
 @property  NSOrderedSet *availableListeningModes
 @property  NSString *currentListeningMode
 @property  float hapticIntensity
 @property  BOOL prominentHapticEnabled

  // instance methods
  -[NACVolumeControllerDemo init]
  -[NACVolumeControllerDemo dealloc]
  -[NACVolumeControllerDemo delegate]
  -[NACVolumeControllerDemo setDelegate:]
  -[NACVolumeControllerDemo .cxx_destruct]
  -[NACVolumeControllerDemo _applicationDidBecomeActiveNotification:]
  -[NACVolumeControllerDemo setMuted:]
  -[NACVolumeControllerDemo isMuted]
  -[NACVolumeControllerDemo setHapticIntensity:]
  -[NACVolumeControllerDemo hapticIntensity]
  -[NACVolumeControllerDemo allowUserToExceedEUVolumeLimit]
  -[NACVolumeControllerDemo initWithAudioCategory:]
  -[NACVolumeControllerDemo isVolumeControlAvailable]
  -[NACVolumeControllerDemo volumeWarningState]
  -[NACVolumeControllerDemo EUVolumeLimit]
  -[NACVolumeControllerDemo volumeValue]
  -[NACVolumeControllerDemo setVolumeValue:]
  -[NACVolumeControllerDemo availableListeningModes]
  -[NACVolumeControllerDemo setProminentHapticEnabled:]
  -[NACVolumeControllerDemo setHapticState:]
  -[NACVolumeControllerDemo setSystemMuted:]
  -[NACVolumeControllerDemo isVolumeWarningEnabled]
  -[NACVolumeControllerDemo currentListeningMode]
  -[NACVolumeControllerDemo setCurrentListeningMode:]
  -[NACVolumeControllerDemo beginObservingListeningModes]
  -[NACVolumeControllerDemo endObservingListeningModes]
  -[NACVolumeControllerDemo endObservingVolume]
  -[NACVolumeControllerDemo beginObservingVolume]
  -[NACVolumeControllerDemo isSystemMuted]
  -[NACVolumeControllerDemo hapticState]
  -[NACVolumeControllerDemo isProminentHapticEnabled]
  -[NACVolumeControllerDemo setVolumeValue:muted:overrideEULimit:]
  -[NACVolumeControllerDemo _persistVolumeValue:]
  -[NACVolumeControllerDemo _setNeedsVolumeReload]
  -[NACVolumeControllerDemo _volumeDictionary]


NACHapticIntensityMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasIntensity
 @property  float intensity

  // instance methods
  -[NACHapticIntensityMessage isEqual:]
  -[NACHapticIntensityMessage copyWithZone:]
  -[NACHapticIntensityMessage dictionaryRepresentation]
  -[NACHapticIntensityMessage writeTo:]
  -[NACHapticIntensityMessage intensity]
  -[NACHapticIntensityMessage setIntensity:]
  -[NACHapticIntensityMessage mergeFrom:]
  -[NACHapticIntensityMessage readFrom:]
  -[NACHapticIntensityMessage copyTo:]
  -[NACHapticIntensityMessage setHasIntensity:]
  -[NACHapticIntensityMessage hasIntensity]


NACEUVolumeLimitMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasEUVolumeLimit
 @property  float eUVolumeLimit
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[NACEUVolumeLimitMessage isEqual:]
  -[NACEUVolumeLimitMessage copyWithZone:]
  -[NACEUVolumeLimitMessage .cxx_destruct]
  -[NACEUVolumeLimitMessage category]
  -[NACEUVolumeLimitMessage setCategory:]
  -[NACEUVolumeLimitMessage dictionaryRepresentation]
  -[NACEUVolumeLimitMessage writeTo:]
  -[NACEUVolumeLimitMessage mergeFrom:]
  -[NACEUVolumeLimitMessage readFrom:]
  -[NACEUVolumeLimitMessage copyTo:]
  -[NACEUVolumeLimitMessage hasCategory]
  -[NACEUVolumeLimitMessage originIdentifier]
  -[NACEUVolumeLimitMessage setEUVolumeLimit:]
  -[NACEUVolumeLimitMessage setOriginIdentifier:]
  -[NACEUVolumeLimitMessage setHasOriginIdentifier:]
  -[NACEUVolumeLimitMessage hasOriginIdentifier]
  -[NACEUVolumeLimitMessage eUVolumeLimit]
  -[NACEUVolumeLimitMessage setHasEUVolumeLimit:]
  -[NACEUVolumeLimitMessage hasEUVolumeLimit]


NACAudioRoute : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *uniqueIdentifier
 @property  NSString *routeName
 @property  long long routeType
 @property  BOOL supportsVolumeControl
 @property  BOOL picked

  // class methods
  +[NACAudioRoute audioRouteWithMPAVRoute:]
  +[NACAudioRoute buffersFromAudioRoutes:]
  +[NACAudioRoute audioRoutesFromBuffers:]
  +[NACAudioRoute _routeTypeFromMPAVRoute:]
  +[NACAudioRoute _routeTypeFromRouteBufferType:]
  +[NACAudioRoute audioRouteFromBuffer:]
  +[NACAudioRoute _routeBufferTypeFromRouteType:]

  // instance methods
  -[NACAudioRoute isEqual:]
  -[NACAudioRoute .cxx_destruct]
  -[NACAudioRoute uniqueIdentifier]
  -[NACAudioRoute buffer]
  -[NACAudioRoute routeType]
  -[NACAudioRoute routeName]
  -[NACAudioRoute isPicked]
  -[NACAudioRoute supportsVolumeControl]
  -[NACAudioRoute setSupportsVolumeControl:]
  -[NACAudioRoute isEqualToAudioRoute:]
  -[NACAudioRoute initWithMPAVRoute:]


MediaControlsVolumeController : NSObject /usr/lib/libSystem.B.dylib <MPVolumeControllerDelegate>
 @property  MPAVEndpointRoute *systemRoute
 @property  NSHashTable *observers
 @property  MPVolumeController *systemVolumeController
 @property  MPVolumeController *primaryVolumeController
 @property  MPVolumeController *secondaryVolumeController
 @property  MPAVOutputDeviceRoute *systemOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *primaryOutputDeviceRoute
 @property  MPAVOutputDeviceRoute *secondaryOutputDeviceRoute
 @property  BOOL isSplitRoute
 @property  NSString *volumeAudioCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[MediaControlsVolumeController init]
  -[MediaControlsVolumeController .cxx_destruct]
  -[MediaControlsVolumeController addObserver:]
  -[MediaControlsVolumeController removeObserver:]
  -[MediaControlsVolumeController setObservers:]
  -[MediaControlsVolumeController observers]
  -[MediaControlsVolumeController volumeController:volumeControlAvailableDidChange:]
  -[MediaControlsVolumeController volumeController:volumeValueDidChange:]
  -[MediaControlsVolumeController volumeAudioCategory]
  -[MediaControlsVolumeController systemRoute]
  -[MediaControlsVolumeController setVolumeAudioCategory:]
  -[MediaControlsVolumeController isSplitRoute]
  -[MediaControlsVolumeController volumeForRouteType:]
  -[MediaControlsVolumeController routeNameForRouteType:]
  -[MediaControlsVolumeController availableBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController currentBluetoothListeningModeForRouteType:]
  -[MediaControlsVolumeController routeDidChangeNotification]
  -[MediaControlsVolumeController _setupOutputDevicesAndVolumeControllersIfNeeded]
  -[MediaControlsVolumeController _notifyVolumeChangedForVolumeController:volumeControlAvailable:effectiveVolume:]
  -[MediaControlsVolumeController _routeForVolumeController:]
  -[MediaControlsVolumeController volumeControlAvailableForRouteType:]
  -[MediaControlsVolumeController setVolume:forRouteType:]
  -[MediaControlsVolumeController setSystemRoute:]
  -[MediaControlsVolumeController systemVolumeController]
  -[MediaControlsVolumeController setSystemVolumeController:]
  -[MediaControlsVolumeController primaryVolumeController]
  -[MediaControlsVolumeController setPrimaryVolumeController:]
  -[MediaControlsVolumeController secondaryVolumeController]
  -[MediaControlsVolumeController setSecondaryVolumeController:]
  -[MediaControlsVolumeController systemOutputDeviceRoute]
  -[MediaControlsVolumeController setSystemOutputDeviceRoute:]
  -[MediaControlsVolumeController primaryOutputDeviceRoute]
  -[MediaControlsVolumeController setPrimaryOutputDeviceRoute:]
  -[MediaControlsVolumeController secondaryOutputDeviceRoute]
  -[MediaControlsVolumeController setSecondaryOutputDeviceRoute:]
  -[MediaControlsVolumeController setCurrentBluetoothListeningModeForRouteType:bluetoothListeningMode:error:]
  -[MediaControlsVolumeController imageForRouteType:]


NACVolumeValueMessage : PBCodable /System/Library/Frameworks/Foundation.framework/Foundation <NSCopying>
 @property  BOOL hasVolumeValue
 @property  float volumeValue
 @property  BOOL hasCategory
 @property  NSString *category
 @property  BOOL hasOriginIdentifier
 @property  int originIdentifier

  // instance methods
  -[NACVolumeValueMessage isEqual:]
  -[NACVolumeValueMessage copyWithZone:]
  -[NACVolumeValueMessage .cxx_destruct]
  -[NACVolumeValueMessage category]
  -[NACVolumeValueMessage setCategory:]
  -[NACVolumeValueMessage dictionaryRepresentation]
  -[NACVolumeValueMessage writeTo:]
  -[NACVolumeValueMessage mergeFrom:]
  -[NACVolumeValueMessage readFrom:]
  -[NACVolumeValueMessage copyTo:]
  -[NACVolumeValueMessage hasCategory]
  -[NACVolumeValueMessage originIdentifier]
  -[NACVolumeValueMessage volumeValue]
  -[NACVolumeValueMessage setVolumeValue:]
  -[NACVolumeValueMessage setOriginIdentifier:]
  -[NACVolumeValueMessage setHasOriginIdentifier:]
  -[NACVolumeValueMessage hasOriginIdentifier]
  -[NACVolumeValueMessage setHasVolumeValue:]
  -[NACVolumeValueMessage hasVolumeValue]


01 00 0800 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 0900 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSProtobuf 
01 00 0900 /System/Library/PrivateFrameworks/IDS.framework/IDS: IDSService 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVEndpointRoute 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVOutputDeviceRoute 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeController 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerRouteDataSource 
01 00 0a00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPVolumeControllerSystemDataSource 
01 00 0300 /System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync: NPSDomainAccessor 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0d00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0f00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0c00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 0b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 0200 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLAlert 
01 00 0400 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
