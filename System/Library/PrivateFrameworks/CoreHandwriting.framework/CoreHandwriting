|| __DATA.__data _CHRecognitionOptionDrawingAnchorPoint
|| __DATA.__data _CHRecognitionOptionFrameContext
|| __DATA.__data _CHRecognitionOptionPrecedingSpaceBehavior
|| __DATA.__data _CHRecognitionOptionShouldPreserveCaseVariantCandidates
|| __DATA.__data _CHRecognitionOptionShouldRefineCandidates
|| __DATA.__data _CHRecognitionOptionTextAfter
|| __DATA.__data _CHRecognitionOptionTextBefore
|| __DATA.__objc_data _OBJC_CLASS_$_CHBoxcarFilterPointFIFO
|| __DATA.__objc_data _OBJC_CLASS_$_CHDataDetectorQueryItem
|| __DATA.__objc_data _OBJC_CLASS_$_CHIndexableContentQuery
|| __DATA.__objc_data _OBJC_CLASS_$_CHLanguageUtilities
|| __DATA.__objc_data _OBJC_CLASS_$_CHMutableTextInputTargetContentInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CHPointFIFO
|| __DATA.__objc_data _OBJC_CLASS_$_CHPointStrokeFIFO
|| __DATA.__objc_data _OBJC_CLASS_$_CHQuadCurvePointFIFO
|| __DATA.__objc_data _OBJC_CLASS_$_CHRecognitionInsight
|| __DATA.__objc_data _OBJC_CLASS_$_CHRecognitionInsightRequest
|| __DATA.__objc_data _OBJC_CLASS_$_CHRecognitionSessionIndexableContent
|| __DATA.__objc_data _OBJC_CLASS_$_CHSearchQuery
|| __DATA.__objc_data _OBJC_CLASS_$_CHSearchQueryItem
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextCorrectionResult
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextInputProtoSettings
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextInputQuery
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextInputQueryItem
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextInputTarget
|| __DATA.__objc_data _OBJC_CLASS_$_CHTextInputTargetContentInfo
|| __DATA.__objc_data _OBJC_CLASS_$_CHTokenizedStrokeResult
|| __DATA.__objc_data _OBJC_CLASS_$_CHTopDownStrokeGroupingStrategy
|| __DATA.__objc_data _OBJC_CLASS_$_CHTranscriptionQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_CHBoxcarFilterPointFIFO
|| __DATA.__objc_data _OBJC_METACLASS_$_CHDataDetectorQueryItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CHIndexableContentQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_CHLanguageUtilities
|| __DATA.__objc_data _OBJC_METACLASS_$_CHMutableTextInputTargetContentInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CHPointFIFO
|| __DATA.__objc_data _OBJC_METACLASS_$_CHPointStrokeFIFO
|| __DATA.__objc_data _OBJC_METACLASS_$_CHQuadCurvePointFIFO
|| __DATA.__objc_data _OBJC_METACLASS_$_CHRecognitionInsight
|| __DATA.__objc_data _OBJC_METACLASS_$_CHRecognitionInsightRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_CHRecognitionSessionIndexableContent
|| __DATA.__objc_data _OBJC_METACLASS_$_CHSearchQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_CHSearchQueryItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTextCorrectionResult
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTextInputQuery
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTextInputQueryItem
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTextInputTarget
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTextInputTargetContentInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTokenizedStrokeResult
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTopDownStrokeGroupingStrategy
|| __DATA.__objc_data _OBJC_METACLASS_$_CHTranscriptionQuery
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHNonTextCandidateStroke._support
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHNonTextCandidateStroke._supportByStrokeIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._activePreviewRange
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._autoCapitalizationMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._characterRectsInReferenceSubstring
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._containsCommittedStrokes
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._contentType
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._isCursorStrong
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._isSingleLine
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._lastCharacterLevelPosition
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._protectedCharacterIndexes
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._referenceSubstring
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._referenceSubstringRange
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._selectedTextRange
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._strokeCoveredTextRange
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._supportsAutoLineBreaks
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._textContentLength
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTextInputTargetContentInfo._textInputTarget
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._changeableCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._precedingLineBreaks
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._recognizerGenerationIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._tokenColumns
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._transcriptionPathScores
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._transcriptionPaths
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultColumn._tokenRows
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._alignmentScore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._combinedScore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._properties
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._recognitionScore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._string
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._strokeIndexes
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._substrokeCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._wordID
|| __DATA_CONST.__const _CHPKCopyAsTextUsedKey
|| __DATA_CONST.__const _CHPKDataDetectorUsedKey
|| __DATA_CONST.__const _CHPKInsertSpaceUsedKey
|| __DATA_CONST.__const _CHPKSmartSelectionUsedKey
|| __DATA_CONST.__const _CHPKSmartShapesUsedKey
|| __DATA_CONST.__const _CHPKStrokesDrawnKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHBottomUpStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHContextualTextResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHContextualTextResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHDataDetectorQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHDrawing
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHEncodedStrokeIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHFastStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHMutableTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHNonTextCandidateStroke
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionSessionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognizerOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRemoteRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClassificationModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClassificationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClutterFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupTextCorrectionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTitleQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResultToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHVisualizationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHBottomUpStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHContextualTextResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHContextualTextResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHDataDetectorQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHDrawing
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHEncodedStrokeIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHFastStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHMutableTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHNonTextCandidateStroke
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionSessionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognizerOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRemoteRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClassificationModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClassificationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClutterFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupTextCorrectionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTextInputProtoSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTitleQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResultToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHVisualizationManager
|| __TEXT.__text _CHDescriptionForCorrectionResultType
__ Accelerate: _cblas_daxpy
__ Accelerate: _cblas_ddot
__ Accelerate: _cblas_dgemm
__ Accelerate: _dgeev_
__ Accelerate: _dgetrf_
__ Accelerate: _dgetri_
__ CVNLP: _CVNLPLanguageModelCreate
__ CVNLP: _CVNLPLanguageModelLogJointProbability
__ CVNLP: _OBJC_CLASS_$_CVNLPActivationMatrix
__ CVNLP: _OBJC_CLASS_$_CVNLPCTCTextDecoder
__ CVNLP: _OBJC_CLASS_$_CVNLPDecodingLanguageModel
__ CVNLP: _OBJC_CLASS_$_CVNLPDecodingLexicon
__ CVNLP: _OBJC_CLASS_$_CVNLPDecodingLexicons
__ CVNLP: _OBJC_CLASS_$_CVNLPLanguageResourceBundle
__ CVNLP: _OBJC_CLASS_$_CVNLPTextDecodingBeamSearchConfiguration
__ CVNLP: _OBJC_CLASS_$_CVNLPTextDecodingConfiguration
__ CVNLP: _OBJC_CLASS_$_CVNLPTextDecodingContext
__ CVNLP: _OBJC_CLASS_$_CVNLPTextDecodingPath
__ CVNLP: _kCVNLPLanguageModelLocaleKey
__ CVNLP: _kCVNLPLanguageModelTokenTypeKey
__ CoreFoundation: _CFBundleCopyResourceURL
__ CoreFoundation: _CFBundleGetBundleWithIdentifier
__ CoreFoundation: _CFBurstTrieContains
__ CoreFoundation: _CFBurstTrieCreateFromFile
__ CoreFoundation: _CFBurstTrieRelease
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringTokenizerAdvanceToNextToken
__ CoreFoundation: _CFStringTokenizerCreate
__ CoreFoundation: _CFStringTokenizerGetCurrentTokenRange
__ CoreFoundation: _CFStringTokenizerGoToTokenAtIndex
__ CoreFoundation: _CFURLGetFileSystemRepresentation
__ CoreFoundation: _NSStringTransformFullwidthToHalfwidth
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: _kCFAllocatorDefault
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGColorCreate
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextAddPath
__ CoreGraphics: _CGContextFillEllipseInRect
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetAlpha
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetLineCap
__ CoreGraphics: _CGContextSetLineDash
__ CoreGraphics: _CGContextSetLineJoin
__ CoreGraphics: _CGContextSetLineWidth
__ CoreGraphics: _CGContextSetStrokeColorWithColor
__ CoreGraphics: _CGContextStrokePath
__ CoreGraphics: _CGContextStrokeRect
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPathAddLineToPoint
__ CoreGraphics: _CGPathAddPath
__ CoreGraphics: _CGPathAddQuadCurveToPoint
__ CoreGraphics: _CGPathCloseSubpath
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGPathCreateWithRect
__ CoreGraphics: _CGPathIsEmpty
__ CoreGraphics: _CGPathMoveToPoint
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPathRetain
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreML: _OBJC_CLASS_$_MLDictionaryFeatureProvider
__ CoreML: _OBJC_CLASS_$_MLModel
__ CoreML: _OBJC_CLASS_$_MLModelConfiguration
__ CoreML: _OBJC_CLASS_$_MLMultiArray
__ CoreML: _OBJC_CLASS_$_MLPredictionOptions
__ CrashReporterSupport: _DiagnosticLogSubmissionEnabled
__ DataDetectorsCore: _OBJC_CLASS_$_DDScannerService
__ DataDetectorsCore: _OBJC_CLASS_$_DDScannerServiceConfiguration
__ Foundation: _NSIntersectionRange
__ Foundation: _NSLinguisticTagPunctuation
__ Foundation: _NSLinguisticTagSchemeLexicalClass
__ Foundation: _NSLinguisticTagSentenceTerminator
__ Foundation: _NSLinguisticTagWhitespace
__ Foundation: _NSRangeFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOrthography
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProgress
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ LanguageModeling: _LMLanguageModelAddTransientVocabulary
__ LanguageModeling: _LMLanguageModelConditionalProbability
__ LanguageModeling: _LMLanguageModelConditionalProbabilityVector
__ LanguageModeling: _LMLanguageModelCreate
__ LanguageModeling: _LMLanguageModelEnumeratePredictionsWithBlock
__ LanguageModeling: _LMLanguageModelGetTokenIDForString
__ LanguageModeling: _LMLanguageModelRelease
__ LanguageModeling: _LMLexiconCreate
__ LanguageModeling: _LMLexiconCursorFirstTokenID
__ LanguageModeling: _LMLexiconCursorGetTraversedCharacters
__ LanguageModeling: _LMLexiconCursorHasChildren
__ LanguageModeling: _LMLexiconCursorHasEntries
__ LanguageModeling: _LMLexiconCursorHash
__ LanguageModeling: _LMLexiconCursorTraversedLength
__ LanguageModeling: _LMLexiconGetCursorByAdvancingWithCharacters
__ LanguageModeling: _LMLexiconGetFirstTokenIDForString
__ LanguageModeling: _LMLexiconGetRootCursor
__ LanguageModeling: _LMLexiconRelease
__ LanguageModeling: _LMLexiconResetCursors
__ LanguageModeling: _LMStreamTokenizerCreate
__ LanguageModeling: _LMStreamTokenizerPushBytes
__ LanguageModeling: _LMStreamTokenizerRelease
__ LanguageModeling: _LMVocabularyGetTokenIDForLemma
__ LanguageModeling: _kLMLanguageModelAdaptationEnabledKey
__ LanguageModeling: _kLMLanguageModelBundleNameKey
__ LanguageModeling: _kLMLanguageModelCustomResourceDirectoryKey
__ LanguageModeling: _kLMLanguageModelCustomWordsKey
__ LanguageModeling: _kLMLanguageModelLocaleKey
__ LanguageModeling: _kLMLanguageModelMontrealFullCacheSize
__ LanguageModeling: _kLMLanguageModelUseMontrealKey
__ Lexicon: _LXCursorConditionalProbability
__ Lexicon: _LXCursorCreateByAdvancing
__ Lexicon: _LXCursorEnumerateEntries
__ Lexicon: _LXCursorHasChildren
__ Lexicon: _LXCursorHasEntries
__ Lexicon: _LXCursorIsRoot
__ Lexicon: _LXCursorTerminationProbability
__ Lexicon: _LXEntryCopyString
__ Lexicon: _LXEntryGetMetaFlags
__ Lexicon: _LXEntryGetPartialProbability
__ Lexicon: _LXEntryGetProbability
__ Lexicon: _LXEntryGetTokenID
__ Lexicon: _LXEntryGetUserBitfield
__ Lexicon: _LXLexiconCreate
__ Lexicon: _LXLexiconCreateRootCursor
__ Lexicon: _LXLexiconEnumerateEntriesForString
__ Lexicon: _kLXLexiconLocaleKey
__ Lexicon: _kLXLexiconTypeKey
__ Lexicon: _kLXLexiconTypeValuePhrases
__ LinguisticData: _LDEnumerateAssetDataItems
__ LinguisticData: _kLDAssetTypeCharacterLanguageModel
__ Montreal: _MRLNeuralNetworkClear
__ Montreal: _MRLNeuralNetworkCreate
__ Montreal: _MRLNeuralNetworkGetOutput
__ Montreal: _MRLNeuralNetworkPredict
__ Montreal: _MRLNeuralNetworkSetInput
__ Montreal: _kMRLNeuralNetworkOptionModelURLKey
__ ProofReader: _OBJC_CLASS_$_AppleSpell
__ ProofReader: _OBJC_CLASS_$_PRErrorModel
__ ProofReader: _OBJC_METACLASS_$_PRErrorModel
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___cxa_atexit
__ libSystem.B.dylib: ___isinfd
__ libSystem.B.dylib: ___isnand
__ libSystem.B.dylib: ___isnanf
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___sincosf_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _acosf
__ libSystem.B.dylib: _atan
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _atan2f
__ libSystem.B.dylib: _atanf
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _cbrt
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _cos
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _exp2
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _feof
__ libSystem.B.dylib: _fgets
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _madvise
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _memset_pattern16
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_generate
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _setxattr
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _sscanf
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strtok
__ libSystem.B.dylib: _strtok_r
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__16locale9use_facetERNS0_2idE
__ libc++.1.dylib: __ZNKSt3__18ios_base6getlocEv
__ libc++.1.dylib: __ZNSt11logic_errorC1EPKc
__ libc++.1.dylib: __ZNSt11logic_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt11logic_errorD1Ev
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt13runtime_errorD1Ev
__ libc++.1.dylib: __ZNSt3__112__next_primeEm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERm
__ libc++.1.dylib: __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__113random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt3__113random_deviceD1Ev
__ libc++.1.dylib: __ZNSt3__113random_deviceclEv
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__15ctypeIcE2idE
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIddEEPdEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIffEEPfEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16localeD1Ev
__ libc++.1.dylib: __ZNSt3__18ios_base4initEPv
__ libc++.1.dylib: __ZNSt3__18ios_base5clearEj
__ libc++.1.dylib: __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__113basic_istreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__113basic_ostreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__115basic_streambufIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTISt11logic_error
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTISt13runtime_error
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_rethrow
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___dynamic_cast
__ libc++.1.dylib: ___gxx_personality_v0
__ libicucore.A.dylib: _u_getIntPropertyValue
__ libicucore.A.dylib: _uscript_getScript
__ libicucore.A.dylib: _uscript_isRightToLeft
__ libicucore.A.dylib: _utrans_close
__ libicucore.A.dylib: _utrans_openU
__ libicucore.A.dylib: _utrans_transUChars
__ libmecabra.dylib: _MecabraAcceptCandidate
__ libmecabra.dylib: _MecabraCandidateGetSurface
__ libmecabra.dylib: _MecabraCandidateIsPredictionCandidate
__ libmecabra.dylib: _MecabraCreateHandwritingCandidate
__ libmecabra.dylib: _MecabraCreateWithOptions
__ libmecabra.dylib: _MecabraPredictionAcceptCandidate
__ libmecabra.dylib: _MecabraPredictionAnalyze
__ libmecabra.dylib: _MecabraPredictionGetNextCandidate
__ libmecabra.dylib: _MecabraRelease
__ libmecabra.dylib: _MecabraSetAddressBookNamePhoneticPairs
__ libmecabra.dylib: _MecabraSetAssetDataItemsForType
__ libmecabra.dylib: _MecabraSetUserWordKeyPairs
__ libmecabra.dylib: _MecabraWorkingSetAddString
__ libmecabra.dylib: _MecabraWorkingSetContainsString
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
CHClassifiableDrawing : NSObject
 @property  CHDrawing *drawing
 @property  NSCharacterSet *characterSet
 @property  BOOL expandCodePoints
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} normalizationContext
 @property  BOOL firstPointIsSubstrokeCut
 @property  BOOL lastPointIsSubstrokeCut
 @property  unsigned long maxCandidateCount

  // instance methods
  -[CHClassifiableDrawing characterSet]
  -[CHClassifiableDrawing dealloc]
  -[CHClassifiableDrawing drawing]
  -[CHClassifiableDrawing initWithDrawing:characterSet:expandCodePoints:normalizationContext:firstPointIsSubstrokeCut:lastPointIsSubstrokeCut:maxCandidateCount:]
  -[CHClassifiableDrawing expandCodePoints]
  -[CHClassifiableDrawing normalizationContext]
  -[CHClassifiableDrawing firstPointIsSubstrokeCut]
  -[CHClassifiableDrawing lastPointIsSubstrokeCut]
  -[CHClassifiableDrawing maxCandidateCount]


CHLanguageUtilities : NSObject
  // class methods
  +[CHLanguageUtilities normalizeLMTokenIDForWord:tokenID:isFromPattern:score:languageModel:]
  +[CHLanguageUtilities tokensRangesForString:outTokenIDs:languageModel:]
  +[CHLanguageUtilities splitStringIntoSubtokensForLexicon:minLength:]
  +[CHLanguageUtilities findPartialMatchInPhraseLexicon:token:contextBeforeToken:]
  +[CHLanguageUtilities transliterateStringUsingICUTransliterator:_icuTransliterator:]


CHStrokeGroupQuery : CHQuery
 @property  NSArray *strokeGroupItems
 @property  NSDictionary *strokeGroupItemsByID

  // instance methods
  -[CHStrokeGroupQuery debugName]
  -[CHStrokeGroupQuery dealloc]
  -[CHStrokeGroupQuery strokeGroupItems]
  -[CHStrokeGroupQuery tokenizedStrokeResultForInitialStrokes:point:tokenizationLevel:completion:shouldCancel:]
  -[CHStrokeGroupQuery q_updateQueryResult]
  -[CHStrokeGroupQuery q_strokeGroupItemsFromSessionResult:]
  -[CHStrokeGroupQuery _setStrokeGroupItems:]
  -[CHStrokeGroupQuery q_itemTypeForStrokeGroup:recognitionResult:]
  -[CHStrokeGroupQuery tokenizedStrokeResultForInitialStrokes:point:tokenizationLevel:]
  -[CHStrokeGroupQuery strokeGroupItemsByID]
  -[CHStrokeGroupQuery _setStrokeGroupItemsByID:]


CHStrokeGroupQueryItem : NSObject
 @property  NSDictionary *_tokenizedTextResultsByLocale
 @property  NSDictionary *_errorsByLocale
 @property  NSNumber *strokeGroupIdentifier
 @property  NSNumber *strokeGroupStableIdentifier
 @property  NSArray *strokeIdentifiers
 @property  long long strokeGroupType
 @property  NSLocale *preferredLocale

  // class methods
  +[CHStrokeGroupQueryItem descriptionForStrokeGroupQueryItemType:]

  // instance methods
  -[CHStrokeGroupQueryItem dealloc]
  -[CHStrokeGroupQueryItem preferredLocale]
  -[CHStrokeGroupQueryItem strokeGroupType]
  -[CHStrokeGroupQueryItem strokeIdentifiers]
  -[CHStrokeGroupQueryItem initWithStrokeGroupIdentifier:stableIdentifier:strokeIdentifiers:type:preferredLocale:tokenizedTextResultsByLocale:errorsByLocale:]
  -[CHStrokeGroupQueryItem strokeGroupIdentifier]
  -[CHStrokeGroupQueryItem _tokenizedTextResultsByLocale]
  -[CHStrokeGroupQueryItem _errorsByLocale]
  -[CHStrokeGroupQueryItem textRecognitionResultForLocale:error:]
  -[CHStrokeGroupQueryItem strokeGroupStableIdentifier]


CHStrokeGroupingStrategy : NSObject
 @property  <CHStrokeProvider> *strokeProvider
 @property  NSString *strategyIdentifier

  // instance methods
  -[CHStrokeGroupingStrategy dealloc]
  -[CHStrokeGroupingStrategy strokeProvider]
  -[CHStrokeGroupingStrategy getFirstStrokeIdentifier:lastStrokeIdentifier:inGroup:addingStrokeIdentifiers:removingStrokeIdentifiers:]
  -[CHStrokeGroupingStrategy initWithStrokeProvider:]
  -[CHStrokeGroupingStrategy strategyIdentifier]
  -[CHStrokeGroupingStrategy strokesForIdentifiers:]
  -[CHStrokeGroupingStrategy strokeGroupFromGroup:addingStrokes:]
  -[CHStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]


CHEncodedStrokeIdentifier : NSObject <NSCopying, NSSecureCoding>
 @property  NSData *encodedStrokeIdentifier

  // class methods
  +[CHEncodedStrokeIdentifier supportsSecureCoding]

  // instance methods
  -[CHEncodedStrokeIdentifier copyWithZone:]
  -[CHEncodedStrokeIdentifier dealloc]
  -[CHEncodedStrokeIdentifier initWithData:]
  -[CHEncodedStrokeIdentifier encodeWithCoder:]
  -[CHEncodedStrokeIdentifier isEqual:]
  -[CHEncodedStrokeIdentifier initWithCoder:]
  -[CHEncodedStrokeIdentifier encodedStrokeIdentifier]
  -[CHEncodedStrokeIdentifier isEqualToCHEncodedStrokeIdentifier:]


CHTokenizedTextResultToken : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  double recognitionScore
 @property  double combinedScore
 @property  double alignmentScore
 @property  unsigned long properties
 @property  long long substrokeCount
 @property  unsigned int wordID
 @property  NSString *string
 @property  NSIndexSet *strokeIndexes

  // class methods
  +[CHTokenizedTextResultToken supportsSecureCoding]
  +[CHTokenizedTextResultToken tokenWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:]

  // instance methods
  -[CHTokenizedTextResultToken copyWithZone:]
  -[CHTokenizedTextResultToken init]
  -[CHTokenizedTextResultToken dealloc]
  -[CHTokenizedTextResultToken wordID]
  -[CHTokenizedTextResultToken encodeWithCoder:]
  -[CHTokenizedTextResultToken isEqual:]
  -[CHTokenizedTextResultToken string]
  -[CHTokenizedTextResultToken combinedScore]
  -[CHTokenizedTextResultToken properties]
  -[CHTokenizedTextResultToken mutableCopyWithZone:]
  -[CHTokenizedTextResultToken initWithCoder:]
  -[CHTokenizedTextResultToken alignmentScore]
  -[CHTokenizedTextResultToken initWithString:strokeIndexes:wordID:recognitionScore:combinedScore:alignmentScore:properties:substrokeCount:]
  -[CHTokenizedTextResultToken strokeIndexes]
  -[CHTokenizedTextResultToken substrokeCount]
  -[CHTokenizedTextResultToken recognitionScore]
  -[CHTokenizedTextResultToken isEqualToTokenizedTextResultToken:]
  -[CHTokenizedTextResultToken isEquivalentToToken:]


CHMutableTokenizedTextResultToken : CHTokenizedTextResultToken
 @property  NSString *string
 @property  NSIndexSet *strokeIndexes
 @property  unsigned int wordID
 @property  double recognitionScore
 @property  double combinedScore
 @property  double alignmentScore
 @property  unsigned long properties
 @property  long long substrokeCount

  // instance methods
  -[CHMutableTokenizedTextResultToken copyWithZone:]
  -[CHMutableTokenizedTextResultToken setProperties:]
  -[CHMutableTokenizedTextResultToken setString:]
  -[CHMutableTokenizedTextResultToken setWordID:]
  -[CHMutableTokenizedTextResultToken setCombinedScore:]
  -[CHMutableTokenizedTextResultToken setStrokeIndexes:]
  -[CHMutableTokenizedTextResultToken setRecognitionScore:]
  -[CHMutableTokenizedTextResultToken setAlignmentScore:]
  -[CHMutableTokenizedTextResultToken setSubstrokeCount:]


CHTokenizedStrokeResult : NSObject
 @property  long long resultLevel
 @property  NSSet *strokeIdentifiers

  // instance methods
  -[CHTokenizedStrokeResult dealloc]
  -[CHTokenizedStrokeResult strokeIdentifiers]
  -[CHTokenizedStrokeResult resultLevel]
  -[CHTokenizedStrokeResult initWithStrokeIdentifiers:resultLevel:]


CHRecognizerOptions : NSObject
 @property  BOOL enableCachingIfAvailable
 @property  BOOL enableGen2ModelIfAvailable
 @property  BOOL enableGen2CharacterLMIfAvailable

  // instance methods
  -[CHRecognizerOptions init]
  -[CHRecognizerOptions enableCachingIfAvailable]
  -[CHRecognizerOptions setEnableCachingIfAvailable:]
  -[CHRecognizerOptions enableGen2ModelIfAvailable]
  -[CHRecognizerOptions setEnableGen2ModelIfAvailable:]
  -[CHRecognizerOptions enableGen2CharacterLMIfAvailable]
  -[CHRecognizerOptions setEnableGen2CharacterLMIfAvailable:]


CHRecognizer : NSObject <CHRecognizing>
 @property  CHRecognitionInsight *recordedInsightFromLastRequest
 @property  ^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}} engine
 @property  ^{CHNeuralNetwork=^?B^{CHCodeMap}IIII@@{CGRect={CGPoint=dd}{CGSize=dd}}} freeformEngine
 @property  CHStrokeTransitionModel *strokeTransitionModel
 @property  CHCutpointModel *cutpointModel
 @property  CHCTCRecognitionModel *recognitionModel
 @property  CVNLPCTCTextDecoder *textDecoder
 @property  NSObject<OS_dispatch_queue> *recognitionQueue
 @property  ^{Network={basic_string<char radicalClusterFST
 @property  ^{Network={basic_string<char formatGrammarFST
 @property  CHPatternNetwork *patternFST
 @property  CHPatternNetwork *postProcessingFST
 @property  CHRecognizerConfiguration *configuration
 @property  ^v languageModel
 @property  ^v lmVocabulary
 @property  ^v characterLanguageModel
 @property  ^{__Mecabra=} mecabra
 @property  ^v cjkStaticLexicon
 @property  ^v cjkDynamicLexicon
 @property  ^{_LXLexicon=} staticLexicon
 @property  ^{_LXLexicon=} phraseLexicon
 @property  ^{_LXLexicon=} customLexicon
 @property  ^{_LXLexicon=} customPhraseLexicon
 @property  NSDictionary *textReplacements
 @property  NSMutableDictionary *textReplacementLowercasedKeyMapping
 @property  CHSpellChecker *spellChecker
 @property  ^{_CFBurstTrie=} ovsTrie
 @property  NSURL *learningDictionaryURL
 @property  CHDrawing *savedDrawing
 @property  NSString *savedTop1CandidateString
 @property  BOOL saveDrawingUntilNextCandidateAccepted
 @property  CHDrawing *cachedDrawing
 @property  {map<std::__1::set<long cachedResults
 @property  {map<unsigned int characterIDMap
 @property  ^{VariantMap=^i^i^ii^iQ} transliterationVariantMap
 @property  ^^v icuTransliterator
 @property  unsigned long lastCharacterSegmentCount
 @property  NSMutableIndexSet *lastCharacterSegmentIndexes
 @property  CHPostProcessingManager *postProcessor
 @property  int recognitionMode
 @property  NSLocale *locale
 @property  int recognitionType
 @property  BOOL enableCachingIfAvailable
 @property  BOOL enableGen2ModelIfAvailable
 @property  BOOL enableGen2CharacterLMIfAvailable
 @property  int contentType
 @property  int autoCapitalizationMode
 @property  unsigned long maxRecognitionResultCount
 @property  NSCharacterSet *activeCharacterSet
 @property  {CGSize=dd} minimumDrawingSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHRecognizer isLocaleSupported:withMode:]
  +[CHRecognizer _encodeTempDelayedSegmentID:]
  +[CHRecognizer _computeEditPenalizationFromString:toReferenceString:withSuffix:withCaseSensitivity:withFirstLetterCaseSensitivity:withDiacriticSensitivity:withDiacriticsCharSet:withConsumableStrokesCharSet:outputSuffix:lexiconExtraCharacters:firstLetterCaseFlipped:]
  +[CHRecognizer _decodeTempDelayedSegmentID:]
  +[CHRecognizer _updatePrecedingAndTrailingSeparatorsForTopCandidate:history:textAfter:locale:outTrailingSeparator:inFirstTokenHasPrecedingSpace:outFirstTokenHasPrecedingSpace:]

  // instance methods
  -[CHRecognizer setContentType:]
  -[CHRecognizer _setConfiguration:]
  -[CHRecognizer setEngine:]
  -[CHRecognizer engine]
  -[CHRecognizer setLocale:]
  -[CHRecognizer locale]
  -[CHRecognizer .cxx_construct]
  -[CHRecognizer contentType]
  -[CHRecognizer dealloc]
  -[CHRecognizer .cxx_destruct]
  -[CHRecognizer languageModel]
  -[CHRecognizer mecabra]
  -[CHRecognizer configuration]
  -[CHRecognizer ovsTrie]
  -[CHRecognizer obfuscateString:]
  -[CHRecognizer setCachedResults:]
  -[CHRecognizer cachedResults]
  -[CHRecognizer spellChecker]
  -[CHRecognizer setAutoCapitalizationMode:]
  -[CHRecognizer setCachedDrawing:]
  -[CHRecognizer cachedDrawing]
  -[CHRecognizer initWithMode:locale:]
  -[CHRecognizer characterSetForStrings:]
  -[CHRecognizer setActiveCharacterSet:]
  -[CHRecognizer setMinimumDrawingSize:]
  -[CHRecognizer recognitionResultsForDrawing:options:]
  -[CHRecognizer autoCapitalizationMode]
  -[CHRecognizer characterLanguageModel]
  -[CHRecognizer supportedCharacterSet]
  -[CHRecognizer updateMecabraWithRegionalOTAAssets:nonRegionalOTAAssets:]
  -[CHRecognizer setTextDecoder:]
  -[CHRecognizer textDecoder]
  -[CHRecognizer setCharacterLanguageModel:]
  -[CHRecognizer staticLexicon]
  -[CHRecognizer setStaticLexicon:]
  -[CHRecognizer patternFST]
  -[CHRecognizer setPatternFST:]
  -[CHRecognizer enableCachingIfAvailable]
  -[CHRecognizer setEnableCachingIfAvailable:]
  -[CHRecognizer enableGen2ModelIfAvailable]
  -[CHRecognizer setEnableGen2ModelIfAvailable:]
  -[CHRecognizer enableGen2CharacterLMIfAvailable]
  -[CHRecognizer setEnableGen2CharacterLMIfAvailable:]
  -[CHRecognizer initWithMode:locale:learningDictionaryURL:recognizerOptions:]
  -[CHRecognizer _reloadEngineAndResources]
  -[CHRecognizer initWithType:mode:locale:learningDictionaryURL:]
  -[CHRecognizer _defaultPunctuationStringsOutputScores:maxCandidateCount:]
  -[CHRecognizer _isInappropriateString:]
  -[CHRecognizer _isInappropriateLexiconEntry:]
  -[CHRecognizer _isInappropriateString:withLexicon:]
  -[CHRecognizer _isInappropriateString:withTrie:]
  -[CHRecognizer _transliterationVariantsForString:]
  -[CHRecognizer _alternativeInterpretationsForString:]
  -[CHRecognizer _unloadEngineAndResources]
  -[CHRecognizer whitelistMecabraRareCharacters]
  -[CHRecognizer _initializeTextDecoder]
  -[CHRecognizer _initializePostProcessor]
  -[CHRecognizer _loadMecabraIfNeeded]
  -[CHRecognizer logCandidateIfAppropriate:]
  -[CHRecognizer initWithType:mode:locale:]
  -[CHRecognizer sketchDescriptionForCode:]
  -[CHRecognizer sketchCodeForDescription:]
  -[CHRecognizer _effectiveMaxRecognitionResultCount]
  -[CHRecognizer chatBubbleCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer ellipseCandidateResultForDrawing:candidate:]
  -[CHRecognizer rectangleCandidateResultForDrawing:candidate:]
  -[CHRecognizer triangleCandidateResultForDrawing:candidate:]
  -[CHRecognizer starCandidateResultForDrawing:candidate:]
  -[CHRecognizer lineCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer heartCandidateResultForDrawing:candidate:]
  -[CHRecognizer pentagonCandidateResultForDrawing:candidate:]
  -[CHRecognizer outlineArrowCandidateResultForDrawing:candidate:]
  -[CHRecognizer manhattanLineCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer cloudCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer _initialContextRectFromRecognizerOptions:]
  -[CHRecognizer _refineChineseCharacterCandidates:drawing:]
  -[CHRecognizer _rescoreCandidatesWithLanguageModel:history:]
  -[CHRecognizer _applyTransliterationAndSyntheticCandidates:]
  -[CHRecognizer isRareChineseEntry:]
  -[CHRecognizer _resolvedStrokeIndexes:segmentGroup:segmentOffset:substrokeCount:]
  -[CHRecognizer mecabraRareWordIndexes:wordRanges:]
  -[CHRecognizer _textReplacementResultForLegacyRecognitionResult:]
  -[CHRecognizer _removeOVSResults:withHistory:]
  -[CHRecognizer _calculateJointWordLMScoreForString:wordRanges:wordIDs:patternEntries:history:historyLength:]
  -[CHRecognizer _tokensUsingLMTokenizerForString:wordRanges:nonWordPatterns:outTokenIDs:]
  -[CHRecognizer tokenizedTextResultForRomanLatticePaths:history:activeHistoryRange:isMultiWordsPath:isNoSpacePath:maximumPathCount:startNode:segmentGroup:precedingSpaceBehavior:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer tokenizedTextResultForChineseLatticePaths:maximumPathCount:network:mecabraIDs:startNode:endNode:segmentGroup:]
  -[CHRecognizer tokenizedTextResultForRomanNoSpaceLatticePaths:maximumResultCount:activeHistoryRange:precedingSpaceBehavior:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer tokenizedTextResultForRomanMultiWordsLatticePaths:maximumResultCount:history:activeHistoryRange:startNode:segmentGroup:precedingSpaceBehavior:]
  -[CHRecognizer tokenizedTextResultForRomanSingleWordLatticePaths:history:activeHistoryRange:startNode:segmentGroup:]
  -[CHRecognizer _lexiconCorrectionsForToken:withLexicon:textReplacements:consumableStrokesSet:minimumTokenScore:activeHistoryRange:outBestTokenScore:shouldCapitalizeWord:shouldSkipEntryCorrection:allowFullCapsCorrections:minimalLengthForLowConfidenceCorrections:lowConfidenceThreshold:minimalLengthForCustomCapitalizationCorrections:outBestTokenIndex:outFoundTokenInLexicon:outFoundCaseMatchingTokenInLexicon:outCorrectionFromOutOfContextEntry:]
  -[CHRecognizer _applySentenceTransliterationCandidates:codesLen:codesMax:]
  -[CHRecognizer _tokenizedTextResultFromResults:segmentGroup:offsetSegment:decodedStrokeSets:spaceBehavior:]
  -[CHRecognizer _spellCheckerCorrectionsForToken:]
  -[CHRecognizer _shouldCapitalizeGivenHistory:]
  -[CHRecognizer _updateResults:string:score:recognitionScore:lexicalEntry:patternEntry:isInappropriateWord:wordID:wordStrokeSet:]
  -[CHRecognizer _filterNonHumanFriendlyCandidates:]
  -[CHRecognizer _adjustResultsForConfusableCharacters:]
  -[CHRecognizer _historyStringFromRecognizerOptions:]
  -[CHRecognizer _precedingSpaceBehaviorFromRecognizerOptions:]
  -[CHRecognizer recognitionResultsForSingleCharacterDrawing:segmentGroup:options:history:]
  -[CHRecognizer _cachingWithMatchingStrokeRange:drawing:]
  -[CHRecognizer _sortedIndexesForSegmentGroup:drawing:]
  -[CHRecognizer _candidateNetworkFromSegmentationNetwork:segmentGroup:drawing:boundsAtNode:matchingStrokeRange:sortedSegmentIndexes:shouldCancel:]
  -[CHRecognizer _textResultWithNetworkComposeFromCandidateNetwork:segmentGroup:drawing:maxRecognitionResultCount:history:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer _textResultWithLexiconExpansionFromCandidateNetwork:history:prefix:activeHistoryRange:rootStaticCursor:rootCustomCursor:rootPatternCursor:segmentGroup:maxRecognitionResultCount:precedingSpaceBehavior:shouldPerformNoSpaceRecognition:inLatticePaths:outLatticePaths:totalStrokeCount:totalSubstrokeCount:shouldCancel:]
  -[CHRecognizer _calculateBestTranscriptionPaths:scores:fromTokenizedResult:pathCount:history:skipLMRescoring:]
  -[CHRecognizer _addAlternativeCandidatesForTokenizedResult:]
  -[CHRecognizer _contextTokenIDsFromHistory:maxCharacterLength:maxTokenCount:]
  -[CHRecognizer _createNetworkTruncatedPrefixStringUsingPrefix:fullHistoryStringLength:hasLexiconCursor:prefixStringLength:hasComplexChars:activeHistoryRange:]
  -[CHRecognizer _mininmumPathCount]
  -[CHRecognizer bestPathsFromNetwork:pathCount:staticLexiconCursor:customLexiconCursor:patternCursor:history:activeHistoryRange:mecabraIDs:segmentGroup:precedingSpaceBehavior:effectiveContentType:shouldAllowSpaceInsertion:inLatticePaths:outLatticePaths:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer _adjustCandidatesForConfusableCharacters:]
  -[CHRecognizer _adjustCandidatesForChinesePunctuation:segmentDrawing:completeDrawing:]
  -[CHRecognizer _adjustCandidatesForRomanPunctuation:segmentDrawing:]
  -[CHRecognizer _addEdgesFromCandidates:toEdges:referenceEdge:network:consumedSegmentCount:delayedSegmentIDs:numSubstrokes:]
  -[CHRecognizer _candidateLatticePruningThresholdForEdgeType:]
  -[CHRecognizer _computeLocalFrameWithLeftBounds:rightBounds:delayedStrokeDrawingsLocalBounds:delayedStrokeDrawings:]
  -[CHRecognizer _classifyEdgeDrawingsFromContexts:allEdges:segmentationNetwork:candidateNetwork:cachedEdgeSet:completeDrawing:allowSmallerFinalBatch:shouldCancel:]
  -[CHRecognizer _stringForCode:]
  -[CHRecognizer _calculateJointWordLMScoreForTokenPath:tokenizedResult:history:historyLength:pathTranscription:]
  -[CHRecognizer _lmRescoringWeightForPath:]
  -[CHRecognizer _tokenFromLegacyResult:wordIndex:strokeSet:substrokeCount:]
  -[CHRecognizer _drawingAnchorPointFromRecognizerOptions:]
  -[CHRecognizer recognitionModel]
  -[CHRecognizer _tokenizedTextResultFromTextDecodingResult:options:strokeEndings:drawing:]
  -[CHRecognizer _textAfterFromRecognizerOptions:]
  -[CHRecognizer setSavedTop1CandidateString:]
  -[CHRecognizer shouldHavePrecedingSpace:history:]
  -[CHRecognizer savedTop1CandidateString]
  -[CHRecognizer _tokenIDForString:withLexicon:outIsInappropriate:]
  -[CHRecognizer strokeTransitionModel]
  -[CHRecognizer cutpointModel]
  -[CHRecognizer _correctedDelayedStrokeIDs:inDrawing:segmentationPoints:correctedSegmentationPoints:]
  -[CHRecognizer _segmentWordRangesForSegments:]
  -[CHRecognizer _recognitionResultsForMultipleCharacterDrawing:segmentGroups:options:shouldCancel:]
  -[CHRecognizer _resultUsingNextGenerationPipelineWithDrawing:options:]
  -[CHRecognizer _resultUsingSegmentAndDecodePipelineWithDrawing:insight:options:shouldCancel:]
  -[CHRecognizer setSavedDrawing:]
  -[CHRecognizer _setupRecognitionInsightRecording]
  -[CHRecognizer setSaveDrawingUntilNextCandidateAccepted:]
  -[CHRecognizer _shouldReturnDefaultResultsForDrawing:]
  -[CHRecognizer _defaultPunctuationResultWithStrokeCount:]
  -[CHRecognizer _tokenizedTextRecognitionResultForDrawing:options:shouldCancel:]
  -[CHRecognizer _defaultLegacyPunctuationResultsWithStrokeCount:]
  -[CHRecognizer recognitionResultsForSketchDrawing:options:]
  -[CHRecognizer _legacyTextRecognitionResultsForDrawing:options:shouldCancel:]
  -[CHRecognizer recognitionResultsForDrawing:options:shouldCancel:]
  -[CHRecognizer _refineCandidates:withAllowedCandidateCodes:]
  -[CHRecognizer _penalizeCandidatesForRomanPunctuation:punctuationStrokeCount:]
  -[CHRecognizer _tokenIDForUNKCharacterString:]
  -[CHRecognizer recognitionMode]
  -[CHRecognizer maxRecognitionResultCount]
  -[CHRecognizer setMaxRecognitionResultCount:]
  -[CHRecognizer activeCharacterSet]
  -[CHRecognizer minimumDrawingSize]
  -[CHRecognizer initWithMode:locale:recognizerOptions:]
  -[CHRecognizer initWithMode:locale:learningDictionaryURL:]
  -[CHRecognizer initWithType:mode:learningDictionaryURL:]
  -[CHRecognizer isOVSString:]
  -[CHRecognizer transliterationVariantsForString:]
  -[CHRecognizer _isLocaleSupported:]
  -[CHRecognizer updateAddressBookLexicon:]
  -[CHRecognizer updateUserDictionaryLexicon:]
  -[CHRecognizer setCustomLexicon:customVocabulary:]
  -[CHRecognizer setCustomPhraseLexicon:]
  -[CHRecognizer setTextReplacements:]
  -[CHRecognizer candidatesCleared]
  -[CHRecognizer candidateAccepted:]
  -[CHRecognizer completionsForCandidate:prefix:option:]
  -[CHRecognizer completionsForCandidate:candidateContext:prefix:option:]
  -[CHRecognizer strokeIndexesForLastCharacter]
  -[CHRecognizer initWithType:mode:]
  -[CHRecognizer supportedStrings]
  -[CHRecognizer endpointsForDrawing:startLocation:endLocation:]
  -[CHRecognizer bestTranscriptionPathsForTokenizedResult:scores:history:]
  -[CHRecognizer inGraphite]
  -[CHRecognizer segmentationPointsForDrawing:]
  -[CHRecognizer textRecognitionResultForDrawing:options:shouldCancel:]
  -[CHRecognizer setRecognitionType:]
  -[CHRecognizer setRecognitionMode:]
  -[CHRecognizer recognitionType]
  -[CHRecognizer freeformEngine]
  -[CHRecognizer setFreeformEngine:]
  -[CHRecognizer setStrokeTransitionModel:]
  -[CHRecognizer setCutpointModel:]
  -[CHRecognizer setRecognitionModel:]
  -[CHRecognizer recognitionQueue]
  -[CHRecognizer setRecognitionQueue:]
  -[CHRecognizer radicalClusterFST]
  -[CHRecognizer setRadicalClusterFST:]
  -[CHRecognizer formatGrammarFST]
  -[CHRecognizer setFormatGrammarFST:]
  -[CHRecognizer postProcessingFST]
  -[CHRecognizer setPostProcessingFST:]
  -[CHRecognizer setLanguageModel:]
  -[CHRecognizer lmVocabulary]
  -[CHRecognizer setLmVocabulary:]
  -[CHRecognizer setMecabra:]
  -[CHRecognizer cjkStaticLexicon]
  -[CHRecognizer setCjkStaticLexicon:]
  -[CHRecognizer cjkDynamicLexicon]
  -[CHRecognizer setCjkDynamicLexicon:]
  -[CHRecognizer phraseLexicon]
  -[CHRecognizer setPhraseLexicon:]
  -[CHRecognizer customLexicon]
  -[CHRecognizer setCustomLexicon:]
  -[CHRecognizer customPhraseLexicon]
  -[CHRecognizer textReplacements]
  -[CHRecognizer textReplacementLowercasedKeyMapping]
  -[CHRecognizer setTextReplacementLowercasedKeyMapping:]
  -[CHRecognizer setSpellChecker:]
  -[CHRecognizer setOvsTrie:]
  -[CHRecognizer learningDictionaryURL]
  -[CHRecognizer setLearningDictionaryURL:]
  -[CHRecognizer savedDrawing]
  -[CHRecognizer saveDrawingUntilNextCandidateAccepted]
  -[CHRecognizer characterIDMap]
  -[CHRecognizer setCharacterIDMap:]
  -[CHRecognizer transliterationVariantMap]
  -[CHRecognizer setTransliterationVariantMap:]
  -[CHRecognizer icuTransliterator]
  -[CHRecognizer setIcuTransliterator:]
  -[CHRecognizer lastCharacterSegmentCount]
  -[CHRecognizer setLastCharacterSegmentCount:]
  -[CHRecognizer lastCharacterSegmentIndexes]
  -[CHRecognizer setLastCharacterSegmentIndexes:]
  -[CHRecognizer postProcessor]
  -[CHRecognizer setPostProcessor:]
  -[CHRecognizer recordInsightWithRequest:]
  -[CHRecognizer recordedInsightFromLastRequest]


CHDrawingContext : NSObject
 @property  unsigned long edgeIndex
 @property  long long numberOfSubstrokes
 @property  long long numberOfSegments
 @property  CHClassifiableDrawing *classifiableDrawing
 @property  {set<long strokeGroup
 @property  {vector<long delayedSegmentIDs

  // instance methods
  -[CHDrawingContext numberOfSegments]
  -[CHDrawingContext .cxx_construct]
  -[CHDrawingContext dealloc]
  -[CHDrawingContext .cxx_destruct]
  -[CHDrawingContext edgeIndex]
  -[CHDrawingContext classifiableDrawing]
  -[CHDrawingContext strokeGroup]
  -[CHDrawingContext delayedSegmentIDs]
  -[CHDrawingContext numberOfSubstrokes]
  -[CHDrawingContext initWithEdgeIndex:numberOfSubstrokes:numberOfSegments:classifiableDrawing:strokeGroup:delayedSegmentIDs:]


CHStrokeUtilities : NSObject
  // class methods
  +[CHStrokeUtilities convexHullForStrokes:inDrawing:]
  +[CHStrokeUtilities enlargedConvexHull:withMargin:]
  +[CHStrokeUtilities threePointsOrientationWithOrigin:pointA:pointB:]
  +[CHStrokeUtilities distanceFromPoint:toRectangle:]
  +[CHStrokeUtilities distanceFromPoint:toSegmentFromPoint:toPoint:]
  +[CHStrokeUtilities isPointEnumerationSupportedForStroke:]
  +[CHStrokeUtilities enumeratePointsForStroke:interpolationType:resolution:usingBlock:]
  +[CHStrokeUtilities convexHullForPoints:]
  +[CHStrokeUtilities getAddedStrokes:removedStrokeIdentifiers:inStrokeProvider:lastGroupingResult:]
  +[CHStrokeUtilities strokeForIdentifier:inStrokeProvider:]
  +[CHStrokeUtilities durationOfStrokesInStrokeGroup:strokeProvider:]
  +[CHStrokeUtilities speedForFinalTimeRange:stroke:]
  +[CHStrokeUtilities arcLengthForStroke:]
  +[CHStrokeUtilities boundingBoxOfPoints:rotatedAroundPoint:byAngle:]
  +[CHStrokeUtilities unionStrokeBounds:usingStrokeCountLimit:reverseOrder:]
  +[CHStrokeUtilities unionStrokeBounds:aroundXPosition:usingOneSideStrokeCountLimit:]
  +[CHStrokeUtilities convexHullForStroke:]
  +[CHStrokeUtilities circumferenceRatioOfCircleFittedToPoints:circleCenter:circleRadius:]
  +[CHStrokeUtilities vectorMeanWithoutOutliers:]
  +[CHStrokeUtilities lineOrientationForStrokePoints:error:]
  +[CHStrokeUtilities regularizedPathFromPoints:delta:gamma:outError:]


CHRecognitionInsightRequest : NSObject

CHRecognitionInsight : NSObject
 @property  CHRecognitionInsightRequest *insightRequest
 @property  NSLocale *recognizerLocale
 @property  int recognizerRecognitionMode
 @property  int recognizerContentType
 @property  int autoCapitalizationMode
 @property  NSCharacterSet *recognizerActiveCharacterSet
 @property  NSDictionary *recognizerOptions
 @property  unsigned long recognizerMaxRecognitionResultCount
 @property  {CGSize=dd} recognizerMinimumDrawingSize
 @property  CHDrawing *inputDrawing
 @property  NSArray *inputDrawingCutPoints
 @property  NSArray *spaceProbabilities
 @property  NSArray *charBoundaryProbabilities
 @property  NSArray *delayedStrokeProbabilities
 @property  CHTokenizedTextResult *textResult
 @property  NSError *recognitionError
 @property  NSString *recognizerRecognitionModeDescription
 @property  NSString *recognizerContentTypeDescription
 @property  NSString *autoCapitalizationModeDescription

  // instance methods
  -[CHRecognitionInsight dealloc]
  -[CHRecognitionInsight inputDrawing]
  -[CHRecognitionInsight setAutoCapitalizationMode:]
  -[CHRecognitionInsight textResult]
  -[CHRecognitionInsight setInputDrawing:]
  -[CHRecognitionInsight autoCapitalizationMode]
  -[CHRecognitionInsight recognitionError]
  -[CHRecognitionInsight recordSpaceProbabilities:]
  -[CHRecognitionInsight recordCharBoundaryProbabilities:]
  -[CHRecognitionInsight recordDelayedStrokeProbabilities:]
  -[CHRecognitionInsight recordConfigurationForRecognizer:options:]
  -[CHRecognitionInsight recordTextResult:recognitionError:]
  -[CHRecognitionInsight recordInsightRequest:]
  -[CHRecognitionInsight insightRequest]
  -[CHRecognitionInsight recognizerActiveCharacterSet]
  -[CHRecognitionInsight recognizerLocale]
  -[CHRecognitionInsight recognizerRecognitionModeDescription]
  -[CHRecognitionInsight recognizerContentTypeDescription]
  -[CHRecognitionInsight autoCapitalizationModeDescription]
  -[CHRecognitionInsight recognizerMaxRecognitionResultCount]
  -[CHRecognitionInsight recognizerMinimumDrawingSize]
  -[CHRecognitionInsight recognizerOptions]
  -[CHRecognitionInsight inputDrawingCutPoints]
  -[CHRecognitionInsight spaceProbabilities]
  -[CHRecognitionInsight delayedStrokeProbabilities]
  -[CHRecognitionInsight charBoundaryProbabilities]
  -[CHRecognitionInsight recognizerRecognitionMode]
  -[CHRecognitionInsight recognizerContentType]
  -[CHRecognitionInsight setInsightRequest:]
  -[CHRecognitionInsight setRecognizerLocale:]
  -[CHRecognitionInsight setRecognizerRecognitionMode:]
  -[CHRecognitionInsight setRecognizerContentType:]
  -[CHRecognitionInsight setRecognizerActiveCharacterSet:]
  -[CHRecognitionInsight setRecognizerOptions:]
  -[CHRecognitionInsight setRecognizerMaxRecognitionResultCount:]
  -[CHRecognitionInsight setRecognizerMinimumDrawingSize:]
  -[CHRecognitionInsight setInputDrawingCutPoints:]
  -[CHRecognitionInsight setSpaceProbabilities:]
  -[CHRecognitionInsight setCharBoundaryProbabilities:]
  -[CHRecognitionInsight setDelayedStrokeProbabilities:]
  -[CHRecognitionInsight setTextResult:]
  -[CHRecognitionInsight setRecognitionError:]
  -[CHRecognitionInsight recordInputDrawing:]
  -[CHRecognitionInsight recordInputDrawingCutPoints:]


CHDrawing : NSObject <NSCopying, NSSecureCoding>
 @property  {CHDrawingStrokes={vector<std::__1::vector<double drawing

  // class methods
  +[CHDrawing supportsSecureCoding]

  // instance methods
  -[CHDrawing copyWithZone:]
  -[CHDrawing initWithContentsOfFile:]
  -[CHDrawing debugQuickLookObject]
  -[CHDrawing clear]
  -[CHDrawing .cxx_construct]
  -[CHDrawing endStroke]
  -[CHDrawing .cxx_destruct]
  -[CHDrawing addPoint:]
  -[CHDrawing encodeWithCoder:]
  -[CHDrawing drawing]
  -[CHDrawing bounds]
  -[CHDrawing setDrawing:]
  -[CHDrawing strokeCount]
  -[CHDrawing isEqual:]
  -[CHDrawing setLineHeight:]
  -[CHDrawing initWithCoder:]
  -[CHDrawing pointCount]
  -[CHDrawing pointCountForStrokeIndex:]
  -[CHDrawing pointForStrokeIndex:pointIndex:]
  -[CHDrawing bitmapRepresentationForSize:]
  -[CHDrawing xyRepresentation]
  -[CHDrawing orientationRepresentationForSampling:convolutionWidth:]
  -[CHDrawing cumulativePointToPointDistance]
  -[CHDrawing distanceBetweenFirstAndLastPoint]
  -[CHDrawing strokeIndicesSortedByMinXCoordinate]
  -[CHDrawing sortedDrawingUsingMinXCoordinate]
  -[CHDrawing matchingStrokePrefixRangeForDrawing:]
  -[CHDrawing appendSegment:fromDrawing:]
  -[CHDrawing strokeBoundsAtIndex:]
  -[CHDrawing indexesOfStrokesSmallerThanSize:]
  -[CHDrawing isEqualToDrawing:]
  -[CHDrawing drawingTransformedWithTranslation:scaleFactor:]
  -[CHDrawing findLocalYMaximaWithWindowSize:excludingStrokes:]
  -[CHDrawing initialSegmentationPointIndicesForDrawing]
  -[CHDrawing filterPointsWithProximity:fixedPoints:points:]
  -[CHDrawing initWithContentsOfXYString:]
  -[CHDrawing drawingWithStrokesFromIndexSet:]
  -[CHDrawing centroidForStrokeIndexes:]
  -[CHDrawing isPrefixForDrawing:]
  -[CHDrawing drawingScaledByFactor:]
  -[CHDrawing drawingSpatiallyResampled:outputPointMap:]
  -[CHDrawing findSignalCutPointsExcludingStrokes:]
  -[CHDrawing boundingBoxForDrawingSegmentFromCutPoint:toCutPoint:]
  -[CHDrawing averageCharacterHeightEstimation:minChunkHeight:]


CHCutPoint : NSObject
 @property  long long strokeIndex
 @property  long long pointIndex
 @property  BOOL isEndOfStroke

  // class methods
  +[CHCutPoint sortedCHCutPointArray:]

  // instance methods
  -[CHCutPoint pointIndex]
  -[CHCutPoint compare:]
  -[CHCutPoint isEqual:]
  -[CHCutPoint strokeIndex]
  -[CHCutPoint isEndOfStroke]
  -[CHCutPoint isStartOfStroke]
  -[CHCutPoint initWithStrokeIndex:pointIndex:isEndOfStroke:]


CHSegmentDescriptor : NSObject
 @property  NSNumber *segmentID
 @property  CHCutPoint *startCutPoint
 @property  CHCutPoint *endCutPoint
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} segmentBounds
 @property  NSArray *relatedSegmentIDs
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contextBounds
 @property  double trailingSpaceRatio
 @property  double trailingSpaceProbability
 @property  double trailingCharBoundaryProbability

  // class methods
  +[CHSegmentDescriptor indexForSegmentID:fromSegments:]
  +[CHSegmentDescriptor generateSegmentsFromDrawing:withSegmentationPoints:buildingContextBoundsWithRadius:spaceProbabilities:charBoundaryProbabilities:extractDelayedStrokeIDs:extractedDelayedSegments:]
  +[CHSegmentDescriptor generateSegmentsFromDrawing:]
  +[CHSegmentDescriptor resolvedCutPoint:withReferenceDrawing:]
  +[CHSegmentDescriptor computeRelatedSegments:withDelayedSegments:]
  +[CHSegmentDescriptor _computeLocalContextForSegments:withContextSizeRadius:]
  +[CHSegmentDescriptor _resassignSpaceProbabilitiesFromDelayedSegments:toSegments:]
  +[CHSegmentDescriptor boundingBoxFromSegmentID:toSegmentID:withSegments:withSourceDrawing:]

  // instance methods
  -[CHSegmentDescriptor dealloc]
  -[CHSegmentDescriptor strokeCount]
  -[CHSegmentDescriptor segmentBounds]
  -[CHSegmentDescriptor segmentID]
  -[CHSegmentDescriptor relatedSegmentIDs]
  -[CHSegmentDescriptor strokeIndexSet]
  -[CHSegmentDescriptor trailingSpaceProbability]
  -[CHSegmentDescriptor trailingCharBoundaryProbability]
  -[CHSegmentDescriptor startCutPoint]
  -[CHSegmentDescriptor endCutPoint]
  -[CHSegmentDescriptor contextBounds]
  -[CHSegmentDescriptor trailingSpaceRatio]
  -[CHSegmentDescriptor isSinglePointSegment]
  -[CHSegmentDescriptor initWithSegmentID:startCutPoint:endCutPoint:trailingSpaceProbability:trailingCharBoundaryProbability:referenceDrawing:]
  -[CHSegmentDescriptor _addRelatedSegmentID:]
  -[CHSegmentDescriptor setContextBounds:]
  -[CHSegmentDescriptor setTrailingSpaceRatio:]
  -[CHSegmentDescriptor setTrailingSpaceProbability:]
  -[CHSegmentDescriptor setTrailingCharBoundaryProbability:]


CHDrawingSegmentGroup : NSObject
 @property  long long segmentGroupIndex
 @property  NSArray *segments
 @property  NSArray *delayedSegments
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  long long totalSegmentCount

  // class methods
  +[CHDrawingSegmentGroup segmentGroupsFromSegments:delayedSegments:segmentGroupRanges:]

  // instance methods
  -[CHDrawingSegmentGroup segments]
  -[CHDrawingSegmentGroup dealloc]
  -[CHDrawingSegmentGroup bounds]
  -[CHDrawingSegmentGroup delayedSegments]
  -[CHDrawingSegmentGroup segmentGroupIndex]
  -[CHDrawingSegmentGroup totalSegmentCount]
  -[CHDrawingSegmentGroup initWithSegmentGroupIndex:segments:delayedSegments:]


CHStrokeGroupBaselineVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHStrokeGroupBaselineVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupBaselineVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupBaselineVisualization layeringPriority]


CHTextInputScriptSpec : NSObject
  // class methods
  +[CHTextInputScriptSpec isSkippableScriptCode:]
  +[CHTextInputScriptSpec singleScriptCodeForString:]
  +[CHTextInputScriptSpec shouldCorrectionGesturesSnapToTokensForScriptCode:]
  +[CHTextInputScriptSpec isCharacterFullWidth:]
  +[CHTextInputScriptSpec isRightToLeftScriptForCharacter:]
  +[CHTextInputScriptSpec shouldRelaxCharacterBoundsPercentageOverlapForScript:]


CHTextInputTargetContentInfo : NSObject <NSMutableCopying>
 @property  CHTextInputTarget *textInputTarget
 @property  long long textContentLength
 @property  NSString *referenceSubstring
 @property  {_NSRange=QQ} referenceSubstringRange
 @property  {_NSRange=QQ} strokeCoveredTextRange
 @property  {_NSRange=QQ} selectedTextRange
 @property  BOOL isCursorStrong
 @property  BOOL containsCommittedStrokes
 @property  {_NSRange=QQ} activePreviewRange
 @property  int contentType
 @property  int autoCapitalizationMode
 @property  BOOL isSingleLine
 @property  BOOL supportsAutoLineBreaks
 @property  long long lastCharacterLevelPosition
 @property  ^{CGRect={CGPoint=dd}{CGSize=dd}} characterRectsInReferenceSubstring
 @property  NSIndexSet *protectedCharacterIndexes

  // instance methods
  -[CHTextInputTargetContentInfo selectedTextRange]
  -[CHTextInputTargetContentInfo contentType]
  -[CHTextInputTargetContentInfo dealloc]
  -[CHTextInputTargetContentInfo isSingleLine]
  -[CHTextInputTargetContentInfo mutableCopyWithZone:]
  -[CHTextInputTargetContentInfo textInputTarget]
  -[CHTextInputTargetContentInfo activePreviewRange]
  -[CHTextInputTargetContentInfo supportsAutoLineBreaks]
  -[CHTextInputTargetContentInfo strokeCoveredTextRange]
  -[CHTextInputTargetContentInfo textContentLength]
  -[CHTextInputTargetContentInfo referenceSubstring]
  -[CHTextInputTargetContentInfo referenceSubstringRange]
  -[CHTextInputTargetContentInfo lastCharacterLevelPosition]
  -[CHTextInputTargetContentInfo protectedCharacterIndexes]
  -[CHTextInputTargetContentInfo autoCapitalizationMode]
  -[CHTextInputTargetContentInfo isCursorStrong]
  -[CHTextInputTargetContentInfo containsCommittedStrokes]
  -[CHTextInputTargetContentInfo characterRectsInReferenceSubstring]
  -[CHTextInputTargetContentInfo _initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:isSingleLine:lastCharacterLevelPosition:protectedCharacterIndexes:]
  -[CHTextInputTargetContentInfo initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:isSingleLine:lastCharacterLevelPosition:]
  -[CHTextInputTargetContentInfo characterRectForCharacterIndex:]
  -[CHTextInputTargetContentInfo enumerateCharacterRectsInRange:reverse:block:]
  -[CHTextInputTargetContentInfo enumerateCharacterRectsInRange:block:]
  -[CHTextInputTargetContentInfo initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:isCursorStrong:activePreviewRange:contentType:autoCapitalizationMode:isSingleLine:lastCharacterLevelPosition:]
  -[CHTextInputTargetContentInfo initWithTextInputTarget:contentLength:referenceSubstring:referenceSubstringRange:charRectsInReferenceSubstring:strokeCoveredTextRange:selectedTextRange:activePreviewRange:contentType:lastCharacterLevelPosition:]
  -[CHTextInputTargetContentInfo absoluteLocationFromRelativeLocation:]
  -[CHTextInputTargetContentInfo relativeLocationFromAbsoluteLocation:]
  -[CHTextInputTargetContentInfo visualCharacterRectForCharacterIndex:]
  -[CHTextInputTargetContentInfo referenceSubstringInRange:]
  -[CHTextInputTargetContentInfo referenceSubstringRangeOfComposedCharacterAtIndex:]
  -[CHTextInputTargetContentInfo unionCharacterRects]


CHMutableTextInputTargetContentInfo : CHTextInputTargetContentInfo <NSCopying>
 @property  CHTextInputTarget *textInputTarget
 @property  long long textContentLength
 @property  {_NSRange=QQ} strokeCoveredTextRange
 @property  {_NSRange=QQ} selectedTextRange
 @property  BOOL isCursorStrong
 @property  BOOL containsCommittedStrokes
 @property  {_NSRange=QQ} activePreviewRange
 @property  int contentType
 @property  int autoCapitalizationMode
 @property  BOOL isSingleLine
 @property  BOOL supportsAutoLineBreaks
 @property  long long lastCharacterLevelPosition
 @property  NSIndexSet *protectedCharacterIndexes

  // instance methods
  -[CHMutableTextInputTargetContentInfo setContentType:]
  -[CHMutableTextInputTargetContentInfo copyWithZone:]
  -[CHMutableTextInputTargetContentInfo setSelectedTextRange:]
  -[CHMutableTextInputTargetContentInfo setTextInputTarget:]
  -[CHMutableTextInputTargetContentInfo setTextContentLength:]
  -[CHMutableTextInputTargetContentInfo setActivePreviewRange:]
  -[CHMutableTextInputTargetContentInfo setLastCharacterLevelPosition:]
  -[CHMutableTextInputTargetContentInfo setIsSingleLine:]
  -[CHMutableTextInputTargetContentInfo setSupportsAutoLineBreaks:]
  -[CHMutableTextInputTargetContentInfo setIsCursorStrong:]
  -[CHMutableTextInputTargetContentInfo setAutoCapitalizationMode:]
  -[CHMutableTextInputTargetContentInfo setStrokeCoveredTextRange:]
  -[CHMutableTextInputTargetContentInfo setReferenceSubstring:range:characterRects:]
  -[CHMutableTextInputTargetContentInfo setProtectedCharacterIndexes:]
  -[CHMutableTextInputTargetContentInfo setContainsCommittedStrokes:]
  -[CHMutableTextInputTargetContentInfo referenceSubstring]
  -[CHMutableTextInputTargetContentInfo referenceSubstringRange]
  -[CHMutableTextInputTargetContentInfo characterRectsInReferenceSubstring]


CHNonTextCandidateStroke : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  long long classificationAsNonText
 @property  long long substrokesCount
 @property  NSDictionary *supportByStrokeIdentifier
 @property  double lineError
 @property  double containerScore
 @property  double lineOrientationAngle
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  double boundsDiagonal
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} enlargedBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} rotatedBounds
 @property  CHEncodedStrokeIdentifier *strokeIdentifier
 @property  long long effectiveClassification
 @property  double support

  // class methods
  +[CHNonTextCandidateStroke supportsSecureCoding]

  // instance methods
  -[CHNonTextCandidateStroke copyWithZone:]
  -[CHNonTextCandidateStroke dealloc]
  -[CHNonTextCandidateStroke encodeWithCoder:]
  -[CHNonTextCandidateStroke support]
  -[CHNonTextCandidateStroke bounds]
  -[CHNonTextCandidateStroke isEqual:]
  -[CHNonTextCandidateStroke mutableCopyWithZone:]
  -[CHNonTextCandidateStroke initWithCoder:]
  -[CHNonTextCandidateStroke strokeIdentifier]
  -[CHNonTextCandidateStroke initWithStrokeIdentifier:substrokesCount:classificationAsNonText:lineOrientation:lineError:containerScore:bounds:boundsDiagonal:enlargedBounds:rotatedBounds:supportByStrokeIdentifier:support:]
  -[CHNonTextCandidateStroke substrokesCount]
  -[CHNonTextCandidateStroke classificationAsNonText]
  -[CHNonTextCandidateStroke lineOrientationAngle]
  -[CHNonTextCandidateStroke lineError]
  -[CHNonTextCandidateStroke containerScore]
  -[CHNonTextCandidateStroke boundsDiagonal]
  -[CHNonTextCandidateStroke supportByStrokeIdentifier]
  -[CHNonTextCandidateStroke enlargedBounds]
  -[CHNonTextCandidateStroke rotatedBounds]
  -[CHNonTextCandidateStroke isEqualToNonTextCandidateStroke:]
  -[CHNonTextCandidateStroke initWithStroke:consistingOfSubstrokes:classificationAsNonText:lineOrientation:lineError:containerScore:]
  -[CHNonTextCandidateStroke effectiveClassification]


CHMutableNonTextCandidateStroke : CHNonTextCandidateStroke
 @property  NSDictionary *supportByStrokeIdentifier

  // instance methods
  -[CHMutableNonTextCandidateStroke _removeSupportForStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke _adjustSupportForLineClassificationByAddingStroke:consistingOfSubstrokes:]
  -[CHMutableNonTextCandidateStroke _adjustSupportForContainerClassificationByAddingStroke:consistingOfSubstrokes:]
  -[CHMutableNonTextCandidateStroke _setSupportForStrokeIdentifier:support:]
  -[CHMutableNonTextCandidateStroke setSupportByStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke adjustSupportByRemovingStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke adjustSupportByAddingStroke:consistingOfSubstrokes:]


CHCornerDetector : NSObject
 @property  unsigned long _strawSize
 @property  NSMutableIndexSet *_cornerIndexSet
 @property  NSMutableIndexSet *_directionChangeCornerIndexes
 @property  {vector<std::__1::map<long _resampledDrawingPointMap
 @property  BOOL shouldUseDynamicSampling
 @property  double minimumSignificantSegmentLength
 @property  CHDrawing *drawing
 @property  CHDrawing *resampledDrawing
 @property  unsigned long directionChangeCount
 @property  unsigned long highestDirectionChangeCount

  // instance methods
  -[CHCornerDetector init]
  -[CHCornerDetector .cxx_construct]
  -[CHCornerDetector dealloc]
  -[CHCornerDetector .cxx_destruct]
  -[CHCornerDetector drawing]
  -[CHCornerDetector setDrawing:]
  -[CHCornerDetector _detectCorners]
  -[CHCornerDetector cornerIndexes]
  -[CHCornerDetector resampledDrawing]
  -[CHCornerDetector _distance:p1:p2:]
  -[CHCornerDetector minimumSignificantSegmentLength]
  -[CHCornerDetector _resolveResampledDirectionChangePointIndexes:]
  -[CHCornerDetector _resampleDrawing:outputPointMap:]
  -[CHCornerDetector _cornerIndexSet]
  -[CHCornerDetector _strawSize]
  -[CHCornerDetector _postProcessCorners:corners:straws:]
  -[CHCornerDetector _detectDirectionalChanges]
  -[CHCornerDetector _resamplingDistance:]
  -[CHCornerDetector shouldUseDynamicSampling]
  -[CHCornerDetector _isLine:usingThreshold:p1:p2:]
  -[CHCornerDetector _strokeHalfwayCorner:p1:p2:]
  -[CHCornerDetector _removeColinearCorners:usingThreshold:corners:]
  -[CHCornerDetector _removeColinearCorners:usingDistanceThreshold:usingLowerThreshold:usingUpperThreshold:corners:]
  -[CHCornerDetector _removeAdjacentCorners:corners:straws:]
  -[CHCornerDetector _pathDistance:p1:p2:]
  -[CHCornerDetector directionChangeCornerIndexes]
  -[CHCornerDetector setMinimumSignificantSegmentLength:]
  -[CHCornerDetector setShouldUseDynamicSampling:]
  -[CHCornerDetector directionChangeCount]
  -[CHCornerDetector highestDirectionChangeCount]
  -[CHCornerDetector _directionChangeCornerIndexes]
  -[CHCornerDetector _resampledDrawingPointMap]


CHMergedStrokeGroupingResults : CHStrokeGroupingResult
 @property  NSDictionary *groupingResultsByStrategyIdentifier

  // class methods
  +[CHMergedStrokeGroupingResults supportsSecureCoding]

  // instance methods
  -[CHMergedStrokeGroupingResults dealloc]
  -[CHMergedStrokeGroupingResults encodeWithCoder:]
  -[CHMergedStrokeGroupingResults initWithCoder:]
  -[CHMergedStrokeGroupingResults initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:groupingResultsByStrategyIdentifier:]
  -[CHMergedStrokeGroupingResults groupingResultsByStrategyIdentifier]


CHStrokeGroupingManager : NSObject
 @property  NSDictionary *groupingStrategiesByIdentifier
 @property  <CHStrokeProvider> *strokeProvider
 @property  CHRecognitionSessionResult *sessionLastResult
 @property  NSArray *locales
 @property  BOOL isInlineContinuousMode
 @property  NSArray *textInputTargets

  // class methods
  +[CHStrokeGroupingManager _isGroupableNonTextForStrokeClassification:]

  // instance methods
  -[CHStrokeGroupingManager dealloc]
  -[CHStrokeGroupingManager locales]
  -[CHStrokeGroupingManager strokeProvider]
  -[CHStrokeGroupingManager textInputTargets]
  -[CHStrokeGroupingManager strokesForIdentifiers:]
  -[CHStrokeGroupingManager recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHStrokeGroupingManager sessionLastResult]
  -[CHStrokeGroupingManager groupingStrategiesByIdentifier]
  -[CHStrokeGroupingManager _groupsFromClusterResult:strokes:strokeClassificationsByStrokeIdentifier:]
  -[CHStrokeGroupingManager _greedyCombinationOfGroupingResults:stableStrokeIdentifiers:withCancellationBlock:]
  -[CHStrokeGroupingManager _simpleDrawingForStrokeGroup:originalDrawing:orderedStrokeIDs:]
  -[CHStrokeGroupingManager initWithStrokeProvider:sessionLastResult:locales:isInlineContinuousMode:inlineContinuousModeTargets:]
  -[CHStrokeGroupingManager updatedGroupingResultByAddingStrokes:removingStrokeIdentifiers:orderedStrokeIdentifiers:strokeClassificationResult:cancellationBlock:]
  -[CHStrokeGroupingManager isInlineContinuousMode]


CHTextInputProtoSettings : NSObject
 @property  NSString *recognitionLocaleIdentifier
 @property  BOOL autoLineBreakEnabled
 @property  BOOL autoLineBreakRequireWeakCursor
 @property  double autoLineBreakMinVerticalDistance
 @property  double autoLineBreakDualBreakVerticalDistance
 @property  double autoLineBreakAreaWidthFactor
 @property  BOOL lineBreakVerticalBarGestureEnabled
 @property  BOOL lineBreakVerticalBarUpToDelete
 @property  double subwordGestureEndingSpeedRange
 @property  double subwordGestureSpeedThreshold
 @property  BOOL preventLeftoverCharsInSubwordGestures

  // class methods
  +[CHTextInputProtoSettings sharedSettings]

  // instance methods
  -[CHTextInputProtoSettings recognitionLocaleIdentifier]
  -[CHTextInputProtoSettings subwordGestureEndingSpeedRange]
  -[CHTextInputProtoSettings subwordGestureSpeedThreshold]
  -[CHTextInputProtoSettings preventLeftoverCharsInSubwordGestures]
  -[CHTextInputProtoSettings lineBreakVerticalBarGestureEnabled]
  -[CHTextInputProtoSettings lineBreakVerticalBarUpToDelete]
  -[CHTextInputProtoSettings autoLineBreakEnabled]
  -[CHTextInputProtoSettings autoLineBreakRequireWeakCursor]
  -[CHTextInputProtoSettings autoLineBreakAreaWidthFactor]
  -[CHTextInputProtoSettings autoLineBreakMinVerticalDistance]
  -[CHTextInputProtoSettings autoLineBreakDualBreakVerticalDistance]


CHNormalizedDrawingVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHNormalizedDrawingVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHNormalizedDrawingVisualization dirtyRectForStrokeGroup:]
  -[CHNormalizedDrawingVisualization layeringPriority]
  -[CHNormalizedDrawingVisualization shouldDrawStrokeGroup:]
  -[CHNormalizedDrawingVisualization _transformForInputDrawingBounds:referenceBounds:viewBounds:]
  -[CHNormalizedDrawingVisualization _drawGroupBrackgroundInRect:context:]
  -[CHNormalizedDrawingVisualization drawInputDrawing:inContext:transform:]
  -[CHNormalizedDrawingVisualization _drawCutPoints:inputDrawing:inContext:transform:]
  -[CHNormalizedDrawingVisualization wantsInputDrawings]


CHNormalizedDrawingAllVisualization : CHNormalizedDrawingVisualization
  // instance methods
  -[CHNormalizedDrawingAllVisualization shouldDrawStrokeGroup:]


CHRecognitionSessionResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSDictionary *_recognitionResultsByGroupID
 @property  NSDictionary *_textCorrectionResultsByGroupID
 @property  long long _transcriptionCapability
 @property  <CHStrokeProviderVersion> *strokeProviderVersion
 @property  NSArray *orderedStrokeIdentifiers
 @property  long long sessionMode
 @property  NSArray *locales
 @property  NSArray *preferredLocales
 @property  CHStrokeClutterFilter *clutterFilter
 @property  long long recognitionEnvironment
 @property  CHStrokeClassificationResult *strokeClassificationResult
 @property  CHStrokeGroupingResult *strokeGroupingResult
 @property  {?=ddddd} generationDuration
 @property  NSString *highConfidenceDebugDescription
 @property  NSString *allResultsDebugDescription
 @property  NSArray *allResultsDebugDescriptionByGroup

  // class methods
  +[CHRecognitionSessionResult supportsSecureCoding]

  // instance methods
  -[CHRecognitionSessionResult copyWithZone:]
  -[CHRecognitionSessionResult init]
  -[CHRecognitionSessionResult dealloc]
  -[CHRecognitionSessionResult encodeWithCoder:]
  -[CHRecognitionSessionResult locales]
  -[CHRecognitionSessionResult isEqual:]
  -[CHRecognitionSessionResult initWithCoder:]
  -[CHRecognitionSessionResult preferredLocales]
  -[CHRecognitionSessionResult strokeProviderVersion]
  -[CHRecognitionSessionResult sessionMode]
  -[CHRecognitionSessionResult strokeGroupingResult]
  -[CHRecognitionSessionResult recognitionResultForStrokeGroupIdentifier:]
  -[CHRecognitionSessionResult strokeClassificationResult]
  -[CHRecognitionSessionResult orderedStrokeIdentifiers]
  -[CHRecognitionSessionResult _recognitionResultsByGroupID]
  -[CHRecognitionSessionResult _textCorrectionResultsByGroupID]
  -[CHRecognitionSessionResult _resultsDebugDescriptionIntoGroupsArray:groupHeaderBlock:]
  -[CHRecognitionSessionResult textCorrectionResultForStrokeGroupIdentifier:]
  -[CHRecognitionSessionResult encodedStrokeProviderVersion]
  -[CHRecognitionSessionResult recognitionEnvironment]
  -[CHRecognitionSessionResult initWithStrokeProviderVersion:encodedStrokeProviderVersion:orderedStrokeIdentifiers:sessionMode:locales:preferredLocales:clutterFilter:strokeClassificationResult:strokeGroupingResult:recognitionResults:inlineContinuousModeResults:generationDuration:recognitionEnvironment:]
  -[CHRecognitionSessionResult generationDuration]
  -[CHRecognitionSessionResult isEqualToSerializableRecognitionSessionResult:]
  -[CHRecognitionSessionResult clutterFilter]
  -[CHRecognitionSessionResult isEqualToRecognitionSessionResult:]
  -[CHRecognitionSessionResult initWithResult:validStrokes:]
  -[CHRecognitionSessionResult _transcriptionCapability]
  -[CHRecognitionSessionResult highConfidenceDebugDescription]
  -[CHRecognitionSessionResult allResultsDebugDescription]
  -[CHRecognitionSessionResult allResultsDebugDescriptionByGroup]
  -[CHRecognitionSessionResult allResultsDebugDescriptionWithGroupHeaderBlock:]
  -[CHRecognitionSessionResult fullyCoveredStrokeGroupsForContextStrokes:partiallyCoveredStrokeGroups:]
  -[CHRecognitionSessionResult contextualResultsWithFullyCoveredStrokeGroups:partiallyCoveredStrokeGroups:drawingCanvasSize:]
  -[CHRecognitionSessionResult hasCompleteRecognitionResults]


CHStrokeClassificationResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSDictionary *strokeClassificationsByStrokeIdentifier
 @property  NSDictionary *substrokesByStrokeIdentifier
 @property  NSSet *textStrokeIdentifiers
 @property  NSSet *nontextCandidates

  // class methods
  +[CHStrokeClassificationResult supportsSecureCoding]

  // instance methods
  -[CHStrokeClassificationResult copyWithZone:]
  -[CHStrokeClassificationResult init]
  -[CHStrokeClassificationResult dealloc]
  -[CHStrokeClassificationResult encodeWithCoder:]
  -[CHStrokeClassificationResult isEqual:]
  -[CHStrokeClassificationResult mutableCopyWithZone:]
  -[CHStrokeClassificationResult initWithCoder:]
  -[CHStrokeClassificationResult strokeClassificationsByStrokeIdentifier]
  -[CHStrokeClassificationResult substrokesByStrokeIdentifier]
  -[CHStrokeClassificationResult textStrokeIdentifiers]
  -[CHStrokeClassificationResult nontextCandidates]
  -[CHStrokeClassificationResult initWithStrokeClassificationsByStrokeIdentifier:substrokesByStrokeIdentifier:nontextCandidates:]
  -[CHStrokeClassificationResult isEqualToStrokeClassificationResult:]
  -[CHStrokeClassificationResult isEquivalentToStrokeClassificationResult:]


CHStrokeGroupingResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSSet *strokeGroups
 @property  NSSet *createdStrokeGroups
 @property  NSSet *deletedStrokeGroups
 @property  NSArray *textStrokeGroupsSortedTopBottomLeftRight
 @property  NSArray *textStrokeGroupsSortedByWritingOrientation
 @property  NSArray *strokeGroupsSortedByWritingOrientation
 @property  NSArray *strokeGroupClusters
 @property  NSArray *textStrokeGroupClusters
 @property  NSSet *textStrokeGroups

  // class methods
  +[CHStrokeGroupingResult supportsSecureCoding]

  // instance methods
  -[CHStrokeGroupingResult copyWithZone:]
  -[CHStrokeGroupingResult init]
  -[CHStrokeGroupingResult dealloc]
  -[CHStrokeGroupingResult encodeWithCoder:]
  -[CHStrokeGroupingResult isEqual:]
  -[CHStrokeGroupingResult initWithCoder:]
  -[CHStrokeGroupingResult strokeGroups]
  -[CHStrokeGroupingResult strokeGroupsSortedByWritingOrientation]
  -[CHStrokeGroupingResult initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:]
  -[CHStrokeGroupingResult textStrokeGroupsSortedTopBottomLeftRight]
  -[CHStrokeGroupingResult textStrokeGroups]
  -[CHStrokeGroupingResult textStrokeGroupsSortedByWritingOrientation]
  -[CHStrokeGroupingResult textStrokeGroupClusters]
  -[CHStrokeGroupingResult createdStrokeGroups]
  -[CHStrokeGroupingResult deletedStrokeGroups]
  -[CHStrokeGroupingResult _sortedStrokeGroupsByWritingOrientationTextOnly:]
  -[CHStrokeGroupingResult isEqualToStrokeGroupingResult:]
  -[CHStrokeGroupingResult strokeGroupClusters]


CHStrokeGroupRecognitionResult : NSObject <NSCopying, NSSecureCoding>
 @property  CHDrawing *inputDrawing
 @property  NSArray *inputDrawingCutPoints
 @property  NSDictionary *languageFitnessByLocale
 @property  NSArray *inputStrokeIdentifiers
 @property  NSDictionary *recognitionResultsByLocale
 @property  NSDictionary *errorsByLocale

  // class methods
  +[CHStrokeGroupRecognitionResult supportsSecureCoding]
  +[CHStrokeGroupRecognitionResult sortedLocales:usingLanguageFitness:]
  +[CHStrokeGroupRecognitionResult filteredResultsByLocale:usingLanguageFitness:]

  // instance methods
  -[CHStrokeGroupRecognitionResult copyWithZone:]
  -[CHStrokeGroupRecognitionResult init]
  -[CHStrokeGroupRecognitionResult dealloc]
  -[CHStrokeGroupRecognitionResult encodeWithCoder:]
  -[CHStrokeGroupRecognitionResult isEqual:]
  -[CHStrokeGroupRecognitionResult initWithCoder:]
  -[CHStrokeGroupRecognitionResult inputDrawing]
  -[CHStrokeGroupRecognitionResult inputStrokeIdentifiers]
  -[CHStrokeGroupRecognitionResult recognitionResultsByLocale]
  -[CHStrokeGroupRecognitionResult errorsByLocale]
  -[CHStrokeGroupRecognitionResult localesSortedByLanguageFitness:]
  -[CHStrokeGroupRecognitionResult inputDrawingCutPoints]
  -[CHStrokeGroupRecognitionResult highConfidenceTextForSessionResult:rejectionRate:doesContainUnfilteredMultiLocaleResults:]
  -[CHStrokeGroupRecognitionResult languageFitnessForLocale:]
  -[CHStrokeGroupRecognitionResult initWithResultsByLocale:errorsByLocale:languageFitnessByLocale:inputStrokeIdentifiers:inputDrawing:inputDrawingCutPoints:]
  -[CHStrokeGroupRecognitionResult languageFitnessByLocale]
  -[CHStrokeGroupRecognitionResult initWithResultsByLocale:errorsByLocale:languageFitnessByLocale:inputStrokeIdentifiers:]
  -[CHStrokeGroupRecognitionResult isEqualToStrokeGroupRecognitionResult:]


CHStrokeGroupTextCorrectionResult : NSObject <NSCopying, NSSecureCoding>
 @property  NSArray *inputStrokeIdentifiers
 @property  CHTextCorrectionResult *textCorrectionResult

  // class methods
  +[CHStrokeGroupTextCorrectionResult supportsSecureCoding]

  // instance methods
  -[CHStrokeGroupTextCorrectionResult copyWithZone:]
  -[CHStrokeGroupTextCorrectionResult init]
  -[CHStrokeGroupTextCorrectionResult dealloc]
  -[CHStrokeGroupTextCorrectionResult encodeWithCoder:]
  -[CHStrokeGroupTextCorrectionResult isEqual:]
  -[CHStrokeGroupTextCorrectionResult initWithCoder:]
  -[CHStrokeGroupTextCorrectionResult inputStrokeIdentifiers]
  -[CHStrokeGroupTextCorrectionResult textCorrectionResult]
  -[CHStrokeGroupTextCorrectionResult initWithTextCorrectionResult:inputStrokeIdentifiers:]
  -[CHStrokeGroupTextCorrectionResult isEqualToStrokeGroupTextCorrectionResult:]


CHRemoteRecognitionRequest : NSObject <NSSecureCoding>
 @property  NSLocale *locale
 @property  int recognitionMode
 @property  {CGSize=dd} minimumDrawingSize
 @property  int contentType
 @property  int autoCapitalizationMode
 @property  NSCharacterSet *activeCharacterSet
 @property  unsigned long maxRecognitionResultCount
 @property  NSDictionary *options
 @property  CHDrawing *drawing
 @property  BOOL shouldUseTextReplacements
 @property  BOOL enableCachingIfAvailable
 @property  BOOL enableGen2ModelIfAvailable
 @property  BOOL enableGen2CharacterLMIfAvailable
 @property  BOOL hasBeenSubmitted
 @property  long long priority

  // class methods
  +[CHRemoteRecognitionRequest supportsSecureCoding]

  // instance methods
  -[CHRemoteRecognitionRequest setContentType:]
  -[CHRemoteRecognitionRequest setLocale:]
  -[CHRemoteRecognitionRequest locale]
  -[CHRemoteRecognitionRequest contentType]
  -[CHRemoteRecognitionRequest dealloc]
  -[CHRemoteRecognitionRequest options]
  -[CHRemoteRecognitionRequest encodeWithCoder:]
  -[CHRemoteRecognitionRequest drawing]
  -[CHRemoteRecognitionRequest setOptions:]
  -[CHRemoteRecognitionRequest setHasBeenSubmitted:]
  -[CHRemoteRecognitionRequest setDrawing:]
  -[CHRemoteRecognitionRequest hasBeenSubmitted]
  -[CHRemoteRecognitionRequest isEqual:]
  -[CHRemoteRecognitionRequest setPriority:]
  -[CHRemoteRecognitionRequest priority]
  -[CHRemoteRecognitionRequest initWithCoder:]
  -[CHRemoteRecognitionRequest setAutoCapitalizationMode:]
  -[CHRemoteRecognitionRequest setActiveCharacterSet:]
  -[CHRemoteRecognitionRequest setMinimumDrawingSize:]
  -[CHRemoteRecognitionRequest autoCapitalizationMode]
  -[CHRemoteRecognitionRequest enableCachingIfAvailable]
  -[CHRemoteRecognitionRequest setEnableCachingIfAvailable:]
  -[CHRemoteRecognitionRequest enableGen2ModelIfAvailable]
  -[CHRemoteRecognitionRequest setEnableGen2ModelIfAvailable:]
  -[CHRemoteRecognitionRequest enableGen2CharacterLMIfAvailable]
  -[CHRemoteRecognitionRequest setEnableGen2CharacterLMIfAvailable:]
  -[CHRemoteRecognitionRequest recognitionMode]
  -[CHRemoteRecognitionRequest maxRecognitionResultCount]
  -[CHRemoteRecognitionRequest setMaxRecognitionResultCount:]
  -[CHRemoteRecognitionRequest activeCharacterSet]
  -[CHRemoteRecognitionRequest minimumDrawingSize]
  -[CHRemoteRecognitionRequest setRecognitionMode:]
  -[CHRemoteRecognitionRequest initWithLocale:recognitionMode:drawing:options:priority:]
  -[CHRemoteRecognitionRequest setShouldUseTextReplacements:]
  -[CHRemoteRecognitionRequest shouldUseTextReplacements]
  -[CHRemoteRecognitionRequest isEqualToRemoteRecognitionRequest:]
  -[CHRemoteRecognitionRequest recognizerConfigurationKey]


CHTokenizedTextResultColumn : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSArray *tokenRows
 @property  NSIndexSet *strokeIndexes

  // class methods
  +[CHTokenizedTextResultColumn supportsSecureCoding]

  // instance methods
  -[CHTokenizedTextResultColumn copyWithZone:]
  -[CHTokenizedTextResultColumn init]
  -[CHTokenizedTextResultColumn dealloc]
  -[CHTokenizedTextResultColumn encodeWithCoder:]
  -[CHTokenizedTextResultColumn isEqual:]
  -[CHTokenizedTextResultColumn mutableCopyWithZone:]
  -[CHTokenizedTextResultColumn initWithCoder:]
  -[CHTokenizedTextResultColumn strokeIndexes]
  -[CHTokenizedTextResultColumn initWithTokenRows:]
  -[CHTokenizedTextResultColumn tokenRows]
  -[CHTokenizedTextResultColumn isEqualToTokenizedTextResultColumn:]
  -[CHTokenizedTextResultColumn indexOfEquivalentTokenRow:tokenRange:]
  -[CHTokenizedTextResultColumn containsStartingTokenEquivalentToToken:]


CHMutableTokenizedTextResultColumn : CHTokenizedTextResultColumn
 @property  NSArray *tokenRows

  // instance methods
  -[CHMutableTokenizedTextResultColumn copyWithZone:]
  -[CHMutableTokenizedTextResultColumn initWithTokenRows:]
  -[CHMutableTokenizedTextResultColumn addTokenRowWithTokens:]
  -[CHMutableTokenizedTextResultColumn sortTokenRows]
  -[CHMutableTokenizedTextResultColumn _mutableTokenRows]
  -[CHMutableTokenizedTextResultColumn setTokenRows:]
  -[CHMutableTokenizedTextResultColumn setTokenRowWithTokens:atIndex:]
  -[CHMutableTokenizedTextResultColumn removeTokenRowAtIndex:]


CHStrokeGroup : NSObject <NSSecureCoding>
 @property  long long uniqueIdentifier
 @property  long long ancestorIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  {CGPoint=dd} firstStrokeOrigin
 @property  {CGVector=dd} averageWritingOrientation
 @property  NSSet *strokeIdentifiers
 @property  CHEncodedStrokeIdentifier *firstStrokeIdentifier
 @property  CHEncodedStrokeIdentifier *lastStrokeIdentifier
 @property  long long classification
 @property  double groupingConfidence
 @property  NSString *strategyIdentifier

  // class methods
  +[CHStrokeGroup supportsSecureCoding]
  +[CHStrokeGroup strokeIdentifierToGroupIndexMappingForStrokeIdentifiers:orderedStrokeGroups:]
  +[CHStrokeGroup strokeGroupsClusteredByProximity:]
  +[CHStrokeGroup _newStrokeGroupUniqueIdentifier]
  +[CHStrokeGroup _averageInterStrokeGroupDistanceForSortedStrokeGroups:outStdDev:]
  +[CHStrokeGroup strokeGroupContainingStrokeIdentifier:strokeGroups:foundStrokeGroupIndex:]
  +[CHStrokeGroup isStrokeGroupSet:equivalentToStrokeGroupSet:]
  +[CHStrokeGroup strokeGroupContainingStrokeIdentifier:strokeGroups:]

  // instance methods
  -[CHStrokeGroup ancestorIdentifier]
  -[CHStrokeGroup init]
  -[CHStrokeGroup dealloc]
  -[CHStrokeGroup encodeWithCoder:]
  -[CHStrokeGroup uniqueIdentifier]
  -[CHStrokeGroup classification]
  -[CHStrokeGroup bounds]
  -[CHStrokeGroup isEqual:]
  -[CHStrokeGroup initWithCoder:]
  -[CHStrokeGroup strokeIdentifiers]
  -[CHStrokeGroup firstStrokeIdentifier]
  -[CHStrokeGroup lastStrokeIdentifier]
  -[CHStrokeGroup firstStrokeOrigin]
  -[CHStrokeGroup groupingConfidence]
  -[CHStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:firstStrokeOrigin:]
  -[CHStrokeGroup strategyIdentifier]
  -[CHStrokeGroup newEstimatedBaselineForStrokesWithIdentifiers:estimatedDescenderLocations:]
  -[CHStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:]
  -[CHStrokeGroup isEquivalentToStrokeGroup:]
  -[CHStrokeGroup averageWritingOrientation]
  -[CHStrokeGroup initWithAncestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:]
  -[CHStrokeGroup initWithUniqueIdentifier:ancestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:]
  -[CHStrokeGroup isEqualToStrokeGroup:]


CHRecognitionSessionTextInputTask : CHRecognitionSessionTask
 @property  <CHRecognitionSessionTextInputTaskDelegate> *delegate
 @property  NSLocale *locale
 @property  NSArray *initialTextInputTargets
 @property  CHTextInputQuery *activeTextInputQuery

  // class methods
  +[CHRecognitionSessionTextInputTask _contextBoundsForTargetContentInfo:]
  +[CHRecognitionSessionTextInputTask lastStrokeInGroup:strokeProvider:]

  // instance methods
  -[CHRecognitionSessionTextInputTask locale]
  -[CHRecognitionSessionTextInputTask dealloc]
  -[CHRecognitionSessionTextInputTask clutterFilter]
  -[CHRecognitionSessionTextInputTask activeTextInputQuery]
  -[CHRecognitionSessionTextInputTask _dataSource:inputTargetContentInfoForStrokeGroups:locale:groupingManager:]
  -[CHRecognitionSessionTextInputTask _textCorrectionResultForStrokeGroup:groupingManager:targetContentInfo:locale:previousCorrectionResult:]
  -[CHRecognitionSessionTextInputTask initialTextInputTargets]
  -[CHRecognitionSessionTextInputTask _dataSource:textInputTargetForStrokeGroup:simultaneousGroups:]
  -[CHRecognitionSessionTextInputTask initWithLocale:strokeProvider:initialTextInputTargets:inputResult:recognitionEnvironment:]
  -[CHRecognitionSessionTextInputTask initWithLocales:preferredLocales:strokeProvider:inputResult:recognitionQOSClass:]
  -[CHRecognitionSessionTextInputTask recognitionResultsForGroupingResult:groupingManager:]
  -[CHRecognitionSessionTextInputTask textCorrectionResultsForGroupingResult:groupingManager:]
  -[CHRecognitionSessionTextInputTask newStrokeClassifier]
  -[CHRecognitionSessionTextInputTask newGroupingManager]
  -[CHRecognitionSessionTextInputTask setActiveTextInputQuery:]


CHTextInputTarget : NSObject <NSSecureCoding>
 @property  NSNumber *inputTargetIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} frame

  // class methods
  +[CHTextInputTarget supportsSecureCoding]

  // instance methods
  -[CHTextInputTarget frame]
  -[CHTextInputTarget dealloc]
  -[CHTextInputTarget encodeWithCoder:]
  -[CHTextInputTarget isEqual:]
  -[CHTextInputTarget initWithCoder:]
  -[CHTextInputTarget inputTargetIdentifier]
  -[CHTextInputTarget initWithIdentifier:frame:]
  -[CHTextInputTarget isEqualToInputTarget:]


CHTextLineStrokeGroup : CHStrokeGroup
 @property  NSArray *writingDirectionSortedStrokeIdentifiers

  // class methods
  +[CHTextLineStrokeGroup supportsSecureCoding]

  // instance methods
  -[CHTextLineStrokeGroup .cxx_construct]
  -[CHTextLineStrokeGroup dealloc]
  -[CHTextLineStrokeGroup .cxx_destruct]
  -[CHTextLineStrokeGroup encodeWithCoder:]
  -[CHTextLineStrokeGroup initWithCoder:]
  -[CHTextLineStrokeGroup newEstimatedBaselineForStrokesWithIdentifiers:estimatedDescenderLocations:]
  -[CHTextLineStrokeGroup averageWritingOrientation]
  -[CHTextLineStrokeGroup initWithAncestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:strategyIdentifier:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup writingDirectionSortedSubstrokes]
  -[CHTextLineStrokeGroup newEstimatedBaselineForSubStrokes:estimatedDescenderLocations:]
  -[CHTextLineStrokeGroup localStrokeWritingOrientations]
  -[CHTextLineStrokeGroup initWithUniqueIdentifier:ancestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:strategyIdentifier:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:strategyIdentifier:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:lastSubstrokeIndexBeforeMerge:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup localWritingOrientationAtStrokeIndex:]
  -[CHTextLineStrokeGroup averageStrokeDeviation]
  -[CHTextLineStrokeGroup lastSubstrokeIndexBeforeMerge]
  -[CHTextLineStrokeGroup coalescedLastSubstrokes]
  -[CHTextLineStrokeGroup writingDirectionSortedStrokeIdentifiers]


CHTitleQuery : CHQuery
 @property  NSString *transcribedTitle
 @property  NSSet *titleStrokeIdentifiers

  // instance methods
  -[CHTitleQuery debugName]
  -[CHTitleQuery dealloc]
  -[CHTitleQuery initWithRecognitionSession:]
  -[CHTitleQuery transcribedTitle]
  -[CHTitleQuery titleStrokeIdentifiers]
  -[CHTitleQuery q_updateQueryResult]
  -[CHTitleQuery _setTranscribedTitle:strokeIdentifiers:]


CHRecognitionResult : NSObject
 @property  double score

  // instance methods
  -[CHRecognitionResult setScore:]
  -[CHRecognitionResult score]
  -[CHRecognitionResult initWithScore:]


CHTextRecognitionResult : CHRecognitionResult
 @property  NSString *string
 @property  NSArray *wordRanges
 @property  NSArray *wordIDs
 @property  NSArray *wordRecognitionScores
 @property  NSArray *wordCombinedScores
 @property  NSArray *wordStrokeSets
 @property  NSArray *wordLexicalEntries
 @property  NSArray *wordPatternEntries
 @property  NSIndexSet *rareWordIndexes
 @property  NSIndexSet *inappropriateWordIndexes
 @property  BOOL isTextReplacement

  // instance methods
  -[CHTextRecognitionResult dealloc]
  -[CHTextRecognitionResult string]
  -[CHTextRecognitionResult wordIDs]
  -[CHTextRecognitionResult initWithString:score:wordRanges:wordIDs:wordRecognitionScores:wordCombinedScores:wordStrokeSets:wordLexicalEntries:wordPatternEntries:rareWordIndexes:inappropriateWordIndexes:isTextReplacement:]
  -[CHTextRecognitionResult inappropriateWordIndexes]
  -[CHTextRecognitionResult wordStrokeSets]
  -[CHTextRecognitionResult rareWordIndexes]
  -[CHTextRecognitionResult wordCombinedScores]
  -[CHTextRecognitionResult wordLexicalEntries]
  -[CHTextRecognitionResult wordPatternEntries]
  -[CHTextRecognitionResult wordRanges]
  -[CHTextRecognitionResult wordRecognitionScores]
  -[CHTextRecognitionResult isTextReplacement]
  -[CHTextRecognitionResult mecabraCandidate]


CHSketchRecognitionResult : CHRecognitionResult
 @property  NSString *string
 @property  double rotation

  // instance methods
  -[CHSketchRecognitionResult rotation]
  -[CHSketchRecognitionResult dealloc]
  -[CHSketchRecognitionResult string]
  -[CHSketchRecognitionResult initWithString:score:rotation:]


CHLineSketchRecognitionResult : CHSketchRecognitionResult
 @property  int startEndpointType
 @property  int endEndpointType
 @property  {CGPoint=dd} startLocation
 @property  {CGPoint=dd} endLocation
 @property  {CGPoint=dd} midpointLocation
 @property  {CGPoint=dd} controlPoint
 @property  NSArray *pathPoints
 @property  BOOL cornerLine

  // instance methods
  -[CHLineSketchRecognitionResult dealloc]
  -[CHLineSketchRecognitionResult endLocation]
  -[CHLineSketchRecognitionResult startLocation]
  -[CHLineSketchRecognitionResult controlPoint]
  -[CHLineSketchRecognitionResult startEndpointType]
  -[CHLineSketchRecognitionResult endEndpointType]
  -[CHLineSketchRecognitionResult pathPoints]
  -[CHLineSketchRecognitionResult initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:]
  -[CHLineSketchRecognitionResult initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:]
  -[CHLineSketchRecognitionResult midpointLocation]
  -[CHLineSketchRecognitionResult cornerLine]


CHManhattanLineSketchRecognitionResult : CHLineSketchRecognitionResult

CHOutlinedArrowSketchRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size
 @property  {CGPoint=dd} controlPoint

  // instance methods
  -[CHOutlinedArrowSketchRecognitionResult size]
  -[CHOutlinedArrowSketchRecognitionResult center]
  -[CHOutlinedArrowSketchRecognitionResult controlPoint]
  -[CHOutlinedArrowSketchRecognitionResult initWithString:score:rotation:center:size:controlPointLocation:]


CHRectangleSketchRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} upperLeftPoint
 @property  {CGPoint=dd} upperRightPoint
 @property  {CGPoint=dd} lowerLeftPoint
 @property  {CGPoint=dd} lowerRightPoint

  // instance methods
  -[CHRectangleSketchRecognitionResult lowerLeftPoint]
  -[CHRectangleSketchRecognitionResult lowerRightPoint]
  -[CHRectangleSketchRecognitionResult upperRightPoint]
  -[CHRectangleSketchRecognitionResult upperLeftPoint]
  -[CHRectangleSketchRecognitionResult initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:]


CHTriangleRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} vertex1
 @property  {CGPoint=dd} vertex2
 @property  {CGPoint=dd} vertex3

  // instance methods
  -[CHTriangleRecognitionResult vertex1]
  -[CHTriangleRecognitionResult vertex2]
  -[CHTriangleRecognitionResult vertex3]
  -[CHTriangleRecognitionResult initWithString:score:rotation:vertex1:vertex2:vertex3:]


CHEllipseRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHEllipseRecognitionResult size]
  -[CHEllipseRecognitionResult center]
  -[CHEllipseRecognitionResult initWithString:score:rotation:center:size:]


CHChatBubbleRecognitionResult : CHEllipseRecognitionResult
 @property  {CGPoint=dd} stemLocation
 @property  double stemWidth

  // instance methods
  -[CHChatBubbleRecognitionResult stemLocation]
  -[CHChatBubbleRecognitionResult stemWidth]
  -[CHChatBubbleRecognitionResult initWithString:score:rotation:center:size:stemLocation:stemWidth:]


CHStarRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHStarRecognitionResult size]
  -[CHStarRecognitionResult center]
  -[CHStarRecognitionResult initWithString:score:rotation:center:size:]


CHPentagonRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHPentagonRecognitionResult size]
  -[CHPentagonRecognitionResult center]
  -[CHPentagonRecognitionResult initWithString:score:rotation:center:size:]


CHScribbleRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHScribbleRecognitionResult size]
  -[CHScribbleRecognitionResult center]
  -[CHScribbleRecognitionResult initWithString:score:rotation:center:size:]


CHHeartRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHHeartRecognitionResult size]
  -[CHHeartRecognitionResult center]
  -[CHHeartRecognitionResult initWithString:score:rotation:center:size:]


CHCloudRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHCloudRecognitionResult size]
  -[CHCloudRecognitionResult center]
  -[CHCloudRecognitionResult initWithString:score:rotation:center:size:]


CHFreeformRecognitionResult : CHSketchRecognitionResult
  // instance methods
  -[CHFreeformRecognitionResult initWithScore:]


CHSubstrokeBoundsVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHSubstrokeBoundsVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHSubstrokeBoundsVisualization dirtyRectForStrokeGroup:]


CHStrokeGroupingVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHStrokeGroupingVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupingVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupingVisualization _newColorForStroke:inGroup:]


CHSearchQuery : CHQuery
 @property  NSArray *foundItems
 @property  NSString *queryString

  // instance methods
  -[CHSearchQuery debugName]
  -[CHSearchQuery setQueryString:]
  -[CHSearchQuery dealloc]
  -[CHSearchQuery queryString]
  -[CHSearchQuery stop]
  -[CHSearchQuery foundItems]
  -[CHSearchQuery initWithRecognitionSession:]
  -[CHSearchQuery q_updateQueryResult]
  -[CHSearchQuery q_foundItemsForSearchString:sessionResult:]
  -[CHSearchQuery _setFoundItems:]
  -[CHSearchQuery _enumerateMatchesForStrokeGroupResult:locales:queryString:usingBlock:]
  -[CHSearchQuery _findMatchingTokenPathInResult:initialTokenLocation:queryString:fromIndex:coveredStrokeIndexes:reverseMatchedTokens:]
  -[CHSearchQuery _isMatchSeparatorBeforeToken:atLocation:inResult:queryString:fromIndex:matchedLength:]
  -[CHSearchQuery _isMatchStringForToken:queryString:fromIndex:requirePrefixMatch:matchedLength:]


CHSearchQueryItem : NSObject
 @property  NSSet *strokeIdentifiers

  // instance methods
  -[CHSearchQueryItem dealloc]
  -[CHSearchQueryItem isEqual:]
  -[CHSearchQueryItem strokeIdentifiers]
  -[CHSearchQueryItem initWithStrokeIdentifiers:]
  -[CHSearchQueryItem isEqualToSearchQueryItem:]


CHVisualization : NSObject
 @property  long long layeringPriority
 @property  BOOL wantsInputDrawings
 @property  CHRecognitionSession *recognitionSession
 @property  <CHVisualizationDelegate> *delegate

  // instance methods
  -[CHVisualization dealloc]
  -[CHVisualization setDelegate:]
  -[CHVisualization delegate]
  -[CHVisualization initWithRecognitionSession:]
  -[CHVisualization recognitionSession]
  -[CHVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHVisualization layeringPriority]
  -[CHVisualization wantsInputDrawings]
  -[CHVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHVisualization toggleVisualizationRegionAtPoint:]


CHPointFIFO : NSObject
 @property  CHPointFIFO *nextFIFO

  // instance methods
  -[CHPointFIFO clear]
  -[CHPointFIFO flush]
  -[CHPointFIFO dealloc]
  -[CHPointFIFO emitPoint:]
  -[CHPointFIFO addPoint:]
  -[CHPointFIFO nextFIFO]
  -[CHPointFIFO setNextFIFO:]
  -[CHPointFIFO initWithFIFO:]


CHPointStrokeFIFO : CHPointFIFO
 @property  CHDrawing *strokes
 @property  CHDrawing *drawing

  // instance methods
  -[CHPointStrokeFIFO clear]
  -[CHPointStrokeFIFO strokes]
  -[CHPointStrokeFIFO flush]
  -[CHPointStrokeFIFO dealloc]
  -[CHPointStrokeFIFO addPoint:]
  -[CHPointStrokeFIFO drawing]
  -[CHPointStrokeFIFO setDrawing:]
  -[CHPointStrokeFIFO setStrokes:]
  -[CHPointStrokeFIFO initWithFIFO:]


CHBoxcarFilterPointFIFO : CHPointFIFO
 @property  {vector<float __attribute__((ext_vector_type(4))) prevPoints
 @property  unsigned long width
 @property  float spacing

  // instance methods
  -[CHBoxcarFilterPointFIFO clear]
  -[CHBoxcarFilterPointFIFO setSpacing:]
  -[CHBoxcarFilterPointFIFO initWithFIFO:width:spacing:]
  -[CHBoxcarFilterPointFIFO setWidth:]
  -[CHBoxcarFilterPointFIFO flush]
  -[CHBoxcarFilterPointFIFO .cxx_construct]
  -[CHBoxcarFilterPointFIFO setPrevPoints:]
  -[CHBoxcarFilterPointFIFO width]
  -[CHBoxcarFilterPointFIFO emitAveragedPoint]
  -[CHBoxcarFilterPointFIFO initWithFIFO:width:]
  -[CHBoxcarFilterPointFIFO .cxx_destruct]
  -[CHBoxcarFilterPointFIFO addPoint:]
  -[CHBoxcarFilterPointFIFO spacing]
  -[CHBoxcarFilterPointFIFO prevPoints]


CHQuadCurvePointFIFO : CHPointFIFO
 @property  {vector<float __attribute__((ext_vector_type(4))) prevPoints
 @property  {vector<float __attribute__((ext_vector_type(4))) points
 @property  {vector<float __attribute__((ext_vector_type(4))) controlPoints
 @property  void lastPoint
 @property  <CHPointFIFODrawingTarget> *drawingTarget
 @property  float unitScale
 @property  BOOL emitInterpolatedPoints
 @property  @? emissionHandler
 @property  ^{CGPath=} path
 @property  double lineWidth

  // class methods
  +[CHQuadCurvePointFIFO interpolateFromPoint:toPoint:controlPoint:time:]

  // instance methods
  -[CHQuadCurvePointFIFO setLineWidth:]
  -[CHQuadCurvePointFIFO lineWidth]
  -[CHQuadCurvePointFIFO clear]
  -[CHQuadCurvePointFIFO path]
  -[CHQuadCurvePointFIFO setUnitScale:]
  -[CHQuadCurvePointFIFO setUnitScaleForViewSize:normalizedSize:contentScaleFactor:]
  -[CHQuadCurvePointFIFO setControlPoints:]
  -[CHQuadCurvePointFIFO emitInterpolatedPoints]
  -[CHQuadCurvePointFIFO setEmitInterpolatedPoints:]
  -[CHQuadCurvePointFIFO flush]
  -[CHQuadCurvePointFIFO .cxx_construct]
  -[CHQuadCurvePointFIFO dealloc]
  -[CHQuadCurvePointFIFO setPrevPoints:]
  -[CHQuadCurvePointFIFO emissionHandler]
  -[CHQuadCurvePointFIFO setEmissionHandler:]
  -[CHQuadCurvePointFIFO .cxx_destruct]
  -[CHQuadCurvePointFIFO addPoint:]
  -[CHQuadCurvePointFIFO points]
  -[CHQuadCurvePointFIFO setPoints:]
  -[CHQuadCurvePointFIFO lastPoint]
  -[CHQuadCurvePointFIFO setPath:]
  -[CHQuadCurvePointFIFO prevPoints]
  -[CHQuadCurvePointFIFO controlPoints]
  -[CHQuadCurvePointFIFO unitScale]
  -[CHQuadCurvePointFIFO initWithFIFO:]
  -[CHQuadCurvePointFIFO setLastPoint:]
  -[CHQuadCurvePointFIFO drawingTarget]
  -[CHQuadCurvePointFIFO setDrawingTarget:]
  -[CHQuadCurvePointFIFO initWithFIFO:drawingTarget:]


CHStrokePointsVisualization : CHStrokeVisualization
  // instance methods
  -[CHStrokePointsVisualization drawStrokesFromStrokeProvider:inRect:context:]


CHTextInputGesture : NSObject
 @property  CHTokenizedTextResult *_textResult
 @property  {_NSRange=QQ} _storedAffectedRange
 @property  long long gestureType
 @property  CHTextInputTargetContentInfo *targetContentInfo
 @property  NSLocale *locale
 @property  CHDrawing *normalizedDrawing
 @property  CHDrawing *originalDrawing
 @property  BOOL preferCharacterLevel
 @property  <CHStroke> *lastStroke

  // class methods
  +[CHTextInputGesture _affectedRangeByRefiningShapeBasedGesture:resultType:drawing:targetContentInfo:]
  +[CHTextInputGesture _isShapeBasedRangeRefinementSupportedForResultType:]
  +[CHTextInputGesture _shouldExpandToFullTokensForScriptInString:withRange:shouldExpandStart:shouldExpandEnd:]
  +[CHTextInputGesture rangeOfTokenAtCharacterIndex:inString:locale:]
  +[CHTextInputGesture isVerticalBarShapeFromLineResult:originalDrawing:isDirectionDownward:]
  +[CHTextInputGesture _cursorPositionForPoint:referenceString:referenceCharRects:searchingRange:]
  +[CHTextInputGesture verticalBarGestureFromLineResult:currentGesture:]
  +[CHTextInputGesture isEditGestureForDrawing:targetContentInfo:tentativeResultType:]
  +[CHTextInputGesture shouldReclassifyGestureType:]
  +[CHTextInputGesture isDrawingCenterOnBlank:targetContentInfo:insertionLocation:]

  // instance methods
  -[CHTextInputGesture locale]
  -[CHTextInputGesture setGestureType:]
  -[CHTextInputGesture dealloc]
  -[CHTextInputGesture gestureType]
  -[CHTextInputGesture textResult]
  -[CHTextInputGesture _textResult]
  -[CHTextInputGesture targetContentInfo]
  -[CHTextInputGesture _affectedRangeByAdjustingForProtectedCharacters:]
  -[CHTextInputGesture _affectedRangeByRemovingTerminatingNewLines:]
  -[CHTextInputGesture _affectedRangeByTrimmingSpaces:]
  -[CHTextInputGesture _affectedRangeByAdjustingToTokensIfNeeded:allowSubtoken:didExpand:]
  -[CHTextInputGesture originalDrawing]
  -[CHTextInputGesture lastStroke]
  -[CHTextInputGesture preferCharacterLevel]
  -[CHTextInputGesture normalizedDrawing]
  -[CHTextInputGesture initWithGestureType:targetContentInfo:locale:normalizedDrawing:originalDrawing:lastStroke:preferCharacterLevel:]
  -[CHTextInputGesture set_textResult:]
  -[CHTextInputGesture set_storedAffectedRange:]
  -[CHTextInputGesture getAffectedRange:expandedToFullTokens:]
  -[CHTextInputGesture _storedAffectedRange]


CHTextInputInsertionCaretGesture : CHTextInputGesture
 @property  {CGPoint=dd} caretTipPoint

  // instance methods
  -[CHTextInputInsertionCaretGesture getAffectedRange:expandedToFullTokens:]
  -[CHTextInputInsertionCaretGesture initWithCaretTipPoint:targetContentInfo:locale:normalizedDrawing:originalDrawing:]
  -[CHTextInputInsertionCaretGesture caretDirection]
  -[CHTextInputInsertionCaretGesture caretTipPoint]


CHCTCRecognitionModel : CHRecurrentNeuralNetworkCoreML
 @property  {CVNLPTextDecodingPruningPolicy=qBfI} decodingPruningPolicy
 @property  long long _activationsDomain
 @property  double _distMean
 @property  double _distStd
 @property  NSOrderedSet *_stringCodeMap
 @property  double _interpointDistance
 @property  BOOL _hasBatchFirstFeatureArrayShape
 @property  long long sequenceCompression
 @property  long long distanceFeatureIndex
 @property  long long sinAlphaFeatureIndex
 @property  long long cosAlphaFeatureIndex
 @property  long long gapFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *characterProbabilityOutputName
 @property  ^{CHCodeMap=*Q^II} codeMap
 @property  long long blankIndex
 @property  long long spaceIndex

  // instance methods
  -[CHCTCRecognitionModel dealloc]
  -[CHCTCRecognitionModel codeMap]
  -[CHCTCRecognitionModel blankIndex]
  -[CHCTCRecognitionModel recognizeDrawing:minimumDrawingSize:initialVectorAnchorPoint:activeCharacterSet:outStrokeEndings:]
  -[CHCTCRecognitionModel directionalFeaturesInputName]
  -[CHCTCRecognitionModel _extractFeaturesFromDrawing:inputName:interpointDistance:initialVectorAnchorPoint:error:]
  -[CHCTCRecognitionModel sequenceCompression]
  -[CHCTCRecognitionModel gapFeatureIndex]
  -[CHCTCRecognitionModel distanceFeatureIndex]
  -[CHCTCRecognitionModel sinAlphaFeatureIndex]
  -[CHCTCRecognitionModel cosAlphaFeatureIndex]
  -[CHCTCRecognitionModel _distMean]
  -[CHCTCRecognitionModel _distStd]
  -[CHCTCRecognitionModel initWithModelName:decodingPruningPolicy:]
  -[CHCTCRecognitionModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHCTCRecognitionModel characterProbabilityOutputName]
  -[CHCTCRecognitionModel spaceIndex]
  -[CHCTCRecognitionModel decodingPruningPolicy]
  -[CHCTCRecognitionModel _activationsDomain]
  -[CHCTCRecognitionModel _stringCodeMap]
  -[CHCTCRecognitionModel _interpointDistance]
  -[CHCTCRecognitionModel _hasBatchFirstFeatureArrayShape]


CHTokenizedTextResult : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  long long tokenColumnCount
 @property  long long changeableTokenColumnCount
 @property  NSString *trailingSeparator
 @property  NSArray *transcriptionPaths
 @property  NSArray *transcriptionPathScores
 @property  NSString *topTranscription
 @property  NSString *recognizerDebugDescription

  // class methods
  +[CHTokenizedTextResult supportsSecureCoding]
  +[CHTokenizedTextResult extendedToken:withStrokeIndexSet:alignmentScore:]
  +[CHTokenizedTextResult tokenizedTextResultWithString:strokeIndexes:trailingSeparator:recognizerGenerationIdentifier:]
  +[CHTokenizedTextResult mergeTokenRow:intoUniqueRows:]
  +[CHTokenizedTextResult _scoreMeanAndStdForToken:forLocale:]
  +[CHTokenizedTextResult _characterCountInToken:filteringCharacterSet:filteredCharacterCount:]
  +[CHTokenizedTextResult areTokenRowsEquivalent:otherRow:]

  // instance methods
  -[CHTokenizedTextResult copyWithZone:]
  -[CHTokenizedTextResult init]
  -[CHTokenizedTextResult dealloc]
  -[CHTokenizedTextResult encodeWithCoder:]
  -[CHTokenizedTextResult isValid]
  -[CHTokenizedTextResult isEqual:]
  -[CHTokenizedTextResult mutableCopyWithZone:]
  -[CHTokenizedTextResult initWithCoder:]
  -[CHTokenizedTextResult strokeIndexesForColumnsInRange:]
  -[CHTokenizedTextResult tokenColumnCount]
  -[CHTokenizedTextResult changeableTokenColumnCount]
  -[CHTokenizedTextResult transcriptionPaths]
  -[CHTokenizedTextResult tokenRowsAtColumnIndex:]
  -[CHTokenizedTextResult precedingSeparatorForToken:]
  -[CHTokenizedTextResult trailingSeparator]
  -[CHTokenizedTextResult tokensInTranscriptionPath:atColumnIndex:]
  -[CHTokenizedTextResult enumerateTokensInTranscriptionPath:columnRange:tokenProcessingBlock:]
  -[CHTokenizedTextResult topTranscription]
  -[CHTokenizedTextResult recognizerDebugDescription]
  -[CHTokenizedTextResult transcriptionWithPath:columnRange:filterLowConfidence:excludeGibberish:rejectionRate:tokenProcessingBlock:]
  -[CHTokenizedTextResult initWithTokenColumns:transcriptionPaths:scores:recognizerGenerationIdentifier:]
  -[CHTokenizedTextResult transcriptionPathScores]
  -[CHTokenizedTextResult tokenColumns]
  -[CHTokenizedTextResult recognizerGenerationIdentifier]
  -[CHTokenizedTextResult initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:]
  -[CHTokenizedTextResult initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:]
  -[CHTokenizedTextResult legacyTextRecognitionResults]
  -[CHTokenizedTextResult transcriptionWithPath:columnRange:filterLowConfidence:]
  -[CHTokenizedTextResult tokenAtLocation:]
  -[CHTokenizedTextResult initWithTokenColumns:transcriptionPaths:scores:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:]
  -[CHTokenizedTextResult initWithBestPathTokens:pathProbabilities:trailingSeparator:recognizerGenerationIdentifier:changeableColumnCount:]
  -[CHTokenizedTextResult shouldFilterOutStringForToken:isGibberish:]
  -[CHTokenizedTextResult _isGibberishToken:]
  -[CHTokenizedTextResult precedingLineBreaks]
  -[CHTokenizedTextResult languageFitnessForTranscriptionPath:locale:recognitionMode:]
  -[CHTokenizedTextResult _tokenCountInTranscriptionPath:columnRange:]
  -[CHTokenizedTextResult _normalizedLanguageFitness:]
  -[CHTokenizedTextResult _legacyTextRecognitionResultForTranscriptionIndex:]
  -[CHTokenizedTextResult isEqualToTokenizedTextResult:]
  -[CHTokenizedTextResult precedingSeparatorForTopTranscriptionPath]
  -[CHTokenizedTextResult tokensFromTopTranscriptionWithCharacterRange:]
  -[CHTokenizedTextResult tokenizedResultWithFilteredPaths:]
  -[CHTokenizedTextResult languageFitnessForLocale:recognitionMode:]
  -[CHTokenizedTextResult phraseCaseCorrectedResultWithHistory:phraseLexicon:maxPhraseLength:]


CHMutableTokenizedTextResult : CHTokenizedTextResult
 @property  NSArray *tokenColumns
 @property  long long changeableTokenColumnCount
 @property  long long precedingLineBreaks

  // class methods
  +[CHMutableTokenizedTextResult refineAlternativeTokens:historyTokenIDs:languageModel:]

  // instance methods
  -[CHMutableTokenizedTextResult copyWithZone:]
  -[CHMutableTokenizedTextResult adjustColumns]
  -[CHMutableTokenizedTextResult appendTokenColumns:]
  -[CHMutableTokenizedTextResult setTranscriptionPaths:scores:]
  -[CHMutableTokenizedTextResult trimTokensToTranscriptionPathCount:]
  -[CHMutableTokenizedTextResult filterCandidatesWithOutOfPattern:duplicateTokenIDs:shouldKeepOriginalSpelling:]
  -[CHMutableTokenizedTextResult setTokenColumns:]
  -[CHMutableTokenizedTextResult setPrecedingLineBreaks:]
  -[CHMutableTokenizedTextResult commonStrokeSetsFromSets:tokenRow:]
  -[CHMutableTokenizedTextResult _columnStrokeSetsFromTokenRows:]
  -[CHMutableTokenizedTextResult setChangeableTokenColumnCount:]


CHSpellCheckerErrorModel : PRErrorModel /System/Library/PrivateFrameworks/Montreal.framework/Montreal
  // instance methods
  -[CHSpellCheckerErrorModel replacementErrorScoreForIntendedCharacter:actualCharacter:]
  -[CHSpellCheckerErrorModel transpositionErrorScoreForIntendedFirstCharacter:intendedSecondCharacter:]
  -[CHSpellCheckerErrorModel getCharIndex:]


CHSpellChecker : NSObject
 @property  CHSpellCheckerErrorModel *errorModel

  // class methods
  +[CHSpellChecker sharedSpellServer]
  +[CHSpellChecker newErrorModel]

  // instance methods
  -[CHSpellChecker init]
  -[CHSpellChecker dealloc]
  -[CHSpellChecker isWordInUserDictionaries:caseSensitive:]
  -[CHSpellChecker correctionsForString:shouldUseErrorModel:forLocale:]
  -[CHSpellChecker topCorrectionForString:contextBeforeToken:contextSeparator:shouldUseErrorModel:forLanguage:]
  -[CHSpellChecker errorModel]
  -[CHSpellChecker setErrorModel:]


CHStrokeClutterFilter : NSObject <NSCopying>
 @property  long long highDensityStrokeCount

  // instance methods
  -[CHStrokeClutterFilter copyWithZone:]
  -[CHStrokeClutterFilter debugQuickLookObject]
  -[CHStrokeClutterFilter init]
  -[CHStrokeClutterFilter dealloc]
  -[CHStrokeClutterFilter isEmpty]
  -[CHStrokeClutterFilter initWithCanvasHeatmap:stroke2ItemMapping:item2StrokeMapping:]
  -[CHStrokeClutterFilter clutterFilterByAddingStrokes:removingStrokeIdentifiers:affectedStrokeIdentifiers:]
  -[CHStrokeClutterFilter isHighDensityStroke:]
  -[CHStrokeClutterFilter highDensityStrokeCount]
  -[CHStrokeClutterFilter strokeIDsWithinRectangleRegion:]


CHRecurrentNeuralNetwork : NSObject
 @property  NSString *modelName

  // instance methods
  -[CHRecurrentNeuralNetwork dealloc]
  -[CHRecurrentNeuralNetwork modelName]
  -[CHRecurrentNeuralNetwork normalizedDrawing:targetHeight:minimumDrawingSize:interpolationDistance:outScaleFactor:outputPointMap:]
  -[CHRecurrentNeuralNetwork initWithModelName:]


CHRecurrentNeuralNetworkMontreal : CHRecurrentNeuralNetwork
 @property  ^{MontrealNeuralNetwork=} _model
 @property  NSArray *inputNames
 @property  NSDictionary *featureCounts
 @property  NSArray *outputNames
 @property  NSDictionary *classCounts

  // instance methods
  -[CHRecurrentNeuralNetworkMontreal dealloc]
  -[CHRecurrentNeuralNetworkMontreal _model]
  -[CHRecurrentNeuralNetworkMontreal inputNames]
  -[CHRecurrentNeuralNetworkMontreal outputNames]
  -[CHRecurrentNeuralNetworkMontreal featureCounts]
  -[CHRecurrentNeuralNetworkMontreal _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHRecurrentNeuralNetworkMontreal initWithModelName:]
  -[CHRecurrentNeuralNetworkMontreal _recursivelyPredictProbabilitiesForDrawing:features:pointRange:modelInputName:modelOutputNames:probabilities:probabilityPredictionBlock:error:cancellationBlock:]
  -[CHRecurrentNeuralNetworkMontreal classCounts]


CHRecurrentNeuralNetworkCoreML : CHRecurrentNeuralNetwork
 @property  MLModel *model
 @property  NSString *resourcePath
 @property  NSArray *inputNames
 @property  NSDictionary *featureCounts
 @property  NSArray *outputNames
 @property  NSDictionary *classCounts

  // instance methods
  -[CHRecurrentNeuralNetworkCoreML resourcePath]
  -[CHRecurrentNeuralNetworkCoreML dealloc]
  -[CHRecurrentNeuralNetworkCoreML model]
  -[CHRecurrentNeuralNetworkCoreML inputNames]
  -[CHRecurrentNeuralNetworkCoreML outputNames]
  -[CHRecurrentNeuralNetworkCoreML initWithModelName:featureIndex:]
  -[CHRecurrentNeuralNetworkCoreML featureCounts]
  -[CHRecurrentNeuralNetworkCoreML initWithModelName:]
  -[CHRecurrentNeuralNetworkCoreML classCounts]


CHStrokeTransitionModel : CHRecurrentNeuralNetworkMontreal
 @property  long long distanceFeatureIndex
 @property  long long sinAlphaFeatureIndex
 @property  long long cosAlphaFeatureIndex
 @property  long long gapFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *spaceProbabilityOutputName
 @property  NSString *charBoundaryProbabilityOutputName
 @property  NSString *delayedStrokeProbabilityOutputName

  // instance methods
  -[CHStrokeTransitionModel dealloc]
  -[CHStrokeTransitionModel maxSequenceLength]
  -[CHStrokeTransitionModel classifyStrokesInDrawing:minimumDrawingSize:outDelayedStrokeProbabilities:outSpaceProbabilities:outCharBoundaryProbabilities:]
  -[CHStrokeTransitionModel detectedDelayedStrokes:]
  -[CHStrokeTransitionModel directionalFeaturesInputName]
  -[CHStrokeTransitionModel gapFeatureIndex]
  -[CHStrokeTransitionModel distanceFeatureIndex]
  -[CHStrokeTransitionModel sinAlphaFeatureIndex]
  -[CHStrokeTransitionModel cosAlphaFeatureIndex]
  -[CHStrokeTransitionModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHStrokeTransitionModel initWithModelName:]
  -[CHStrokeTransitionModel windowOverlap]
  -[CHStrokeTransitionModel spaceProbabilityOutputName]
  -[CHStrokeTransitionModel charBoundaryProbabilityOutputName]
  -[CHStrokeTransitionModel delayedStrokeProbabilityOutputName]


CHCutpointModel : CHRecurrentNeuralNetworkMontreal
 @property  long long distanceLeftFeatureIndex
 @property  long long distanceRightFeatureIndex
 @property  long long sinAngleLeftFeatureIndex
 @property  long long cosAngleLeftFeatureIndex
 @property  long long sinAngleRightFeatureIndex
 @property  long long cosAngleRightFeatureIndex
 @property  long long endpointFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *cutpointProbabilityOutputName

  // instance methods
  -[CHCutpointModel dealloc]
  -[CHCutpointModel maxSequenceLength]
  -[CHCutpointModel detectCutpointsInDrawing:minimumDrawingSize:excludingStrokeIDs:]
  -[CHCutpointModel directionalFeaturesInputName]
  -[CHCutpointModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHCutpointModel initWithModelName:]
  -[CHCutpointModel windowOverlap]
  -[CHCutpointModel cutpointProbabilityOutputName]
  -[CHCutpointModel _detectedCutpoints:resampledDrawing:]
  -[CHCutpointModel _remappedCutpoints:pointMap:originalDrawing:excludingStrokeIDs:]
  -[CHCutpointModel distanceLeftFeatureIndex]
  -[CHCutpointModel distanceRightFeatureIndex]
  -[CHCutpointModel sinAngleLeftFeatureIndex]
  -[CHCutpointModel cosAngleLeftFeatureIndex]
  -[CHCutpointModel sinAngleRightFeatureIndex]
  -[CHCutpointModel cosAngleRightFeatureIndex]
  -[CHCutpointModel endpointFeatureIndex]


CHStrokeClassificationModel : CHRecurrentNeuralNetworkMontreal
 @property  long long distanceFeatureIndex
 @property  long long sinAngleFeatureIndex
 @property  long long cosAngleFeatureIndex
 @property  long long endpointFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *textStrokeProbabilityOutputName

  // instance methods
  -[CHStrokeClassificationModel dealloc]
  -[CHStrokeClassificationModel maxSequenceLength]
  -[CHStrokeClassificationModel directionalFeaturesInputName]
  -[CHStrokeClassificationModel distanceFeatureIndex]
  -[CHStrokeClassificationModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHStrokeClassificationModel initWithModelName:]
  -[CHStrokeClassificationModel windowOverlap]
  -[CHStrokeClassificationModel endpointFeatureIndex]
  -[CHStrokeClassificationModel normalizedDrawing:targetHeight:interpolationDistance:outputPointMap:]
  -[CHStrokeClassificationModel textStrokeProbabilityOutputName]
  -[CHStrokeClassificationModel classifyStrokesInDrawing:outTextStrokeProbabilities:cancellationBlock:]
  -[CHStrokeClassificationModel sinAngleFeatureIndex]
  -[CHStrokeClassificationModel cosAngleFeatureIndex]


CHTopDownStrokeSplit : NSObject
 @property  NSArray *strokeGroup1
 @property  NSArray *strokeGroup2
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} groupBounds1
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} groupBounds2
 @property  double transitionTime
 @property  NSArray *orderedStrokes
 @property  NSArray *orderedStrokesGroup1
 @property  NSArray *orderedStrokesGroup2
 @property  long long substrokeCount1
 @property  long long substrokeCount2

  // class methods
  +[CHTopDownStrokeSplit writingDirectionOrderedStrokes:substrokesByStrokeIdentifier:]

  // instance methods
  -[CHTopDownStrokeSplit dealloc]
  -[CHTopDownStrokeSplit orderedStrokes]
  -[CHTopDownStrokeSplit _substrokeCountForStrokes:substrokesByStrokeIdentifier:]
  -[CHTopDownStrokeSplit initWithStrokes:substrokesByStrokeIdentifier:splitIndex:]
  -[CHTopDownStrokeSplit strokeGroup1]
  -[CHTopDownStrokeSplit strokeGroup2]
  -[CHTopDownStrokeSplit groupBounds1]
  -[CHTopDownStrokeSplit groupBounds2]
  -[CHTopDownStrokeSplit transitionTime]
  -[CHTopDownStrokeSplit orderedStrokesGroup1]
  -[CHTopDownStrokeSplit orderedStrokesGroup2]
  -[CHTopDownStrokeSplit substrokeCount1]
  -[CHTopDownStrokeSplit substrokeCount2]


CHOrderedStrokeGroup : CHStrokeGroup
 @property  NSArray *orderedStrokeIdentifiers

  // instance methods
  -[CHOrderedStrokeGroup dealloc]
  -[CHOrderedStrokeGroup orderedStrokeIdentifiers]
  -[CHOrderedStrokeGroup initWithAncestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:orderedStrokeIdentifiers:]
  -[CHOrderedStrokeGroup initWithUniqueIdentifier:ancestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:orderedStrokeIdentifiers:]


CHTopDownStrokeGroupingStrategy : CHStrokeGroupingStrategy
 @property  NSArray *textInputTargets

  // instance methods
  -[CHTopDownStrokeGroupingStrategy dealloc]
  -[CHTopDownStrokeGroupingStrategy textInputTargets]
  -[CHTopDownStrokeGroupingStrategy strategyIdentifier]
  -[CHTopDownStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHTopDownStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHTopDownStrokeGroupingStrategy initWithStrokeProvider:locale:textInputTargets:]
  -[CHTopDownStrokeGroupingStrategy _estimateSplitScore:withTextInputTargets:arcLengthsByStrokeIdentifier:]
  -[CHTopDownStrokeGroupingStrategy _strokeIdentifersFromStrokes:]
  -[CHTopDownStrokeGroupingStrategy _strokeGroupWithStrokes:orderedStrokeIdentifiers:previousGroups:shouldSearchForStableIdentifier:]
  -[CHTopDownStrokeGroupingStrategy _accumulatedTimeDifferences:]
  -[CHTopDownStrokeGroupingStrategy _findMostProbableTextInputTarget:forGroupBounds:outOverlap:outDistance:]


CHTimeWindowStrokeGroup : CHStrokeGroup
 @property  double startTimestamp
 @property  double endTimestamp

  // instance methods
  -[CHTimeWindowStrokeGroup startTimestamp]
  -[CHTimeWindowStrokeGroup endTimestamp]
  -[CHTimeWindowStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:startTimestamp:endTimestamp:]
  -[CHTimeWindowStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:startTimestamp:endTimestamp:]


CHTimeWindowStrokeGroupingStrategy : CHStrokeGroupingStrategy
  // instance methods
  -[CHTimeWindowStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHTimeWindowStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHTimeWindowStrokeGroupingStrategy _timeSortedStrokesForIdentifiers:]


CHRecognitionSessionTask : NSObject
 @property  CHRecognitionSessionResult *outputResult
 @property  long long status
 @property  NSObject<OS_dispatch_queue> *_recognizersQueue
 @property  CHStrokeClassificationModel *strokeClassificationModel
 @property  NSArray *subjectStrokeIdentifiers
 @property  BOOL cancelled
 @property  @? partialResultBlock
 @property  CHRecognitionSessionResult *inputResult
 @property  <CHRecognitionSessionTaskDelegate> *delegate
 @property  NSArray *recognitionLocales
 @property  NSArray *preferredLocales
 @property  <CHStrokeProvider> *strokeProvider
 @property  long long recognitionEnvironment
 @property  long long strokeGroupingRequirement
 @property  BOOL isHighResponsivenessTask
 @property  BOOL saveInputDrawings
 @property  NSSet *forceRecognitionStrokeGroupIdentifiers
 @property  BOOL strokeGroupingOnly

  // instance methods
  -[CHRecognitionSessionTask setCancelled:]
  -[CHRecognitionSessionTask init]
  -[CHRecognitionSessionTask main]
  -[CHRecognitionSessionTask dealloc]
  -[CHRecognitionSessionTask cancel]
  -[CHRecognitionSessionTask cancelled]
  -[CHRecognitionSessionTask _setStatus:]
  -[CHRecognitionSessionTask setDelegate:]
  -[CHRecognitionSessionTask delegate]
  -[CHRecognitionSessionTask status]
  -[CHRecognitionSessionTask preferredLocales]
  -[CHRecognitionSessionTask strokeProvider]
  -[CHRecognitionSessionTask recognitionEnvironment]
  -[CHRecognitionSessionTask clutterFilter]
  -[CHRecognitionSessionTask initWithLocales:preferredLocales:strokeProvider:inputResult:recognitionQOSClass:recognitionEnvironment:]
  -[CHRecognitionSessionTask recognitionLocales]
  -[CHRecognitionSessionTask inputResult]
  -[CHRecognitionSessionTask recognitionResultsForGroupingResult:groupingManager:]
  -[CHRecognitionSessionTask textCorrectionResultsForGroupingResult:groupingManager:]
  -[CHRecognitionSessionTask newStrokeClassifier]
  -[CHRecognitionSessionTask newGroupingManager]
  -[CHRecognitionSessionTask initWithLocales:preferredLocales:strokeProvider:inputResult:recognitionQOSClass:recognitionEnvironment:isHighResponsivenessTask:strokeClassificationModel:strokeGroupingRequirement:partialResultBlock:]
  -[CHRecognitionSessionTask outputResult]
  -[CHRecognitionSessionTask partialResultBlock]
  -[CHRecognitionSessionTask strokeGroupingRequirement]
  -[CHRecognitionSessionTask strokeClassificationModel]
  -[CHRecognitionSessionTask _setOutputResult:]
  -[CHRecognitionSessionTask _logResultsIfAppropriateWithStrokeProvider:]
  -[CHRecognitionSessionTask _isTransitionValidFromStatus:toStatus:]
  -[CHRecognitionSessionTask forceRecognitionStrokeGroupIdentifiers]
  -[CHRecognitionSessionTask _textRecognitionResultsForTextStrokeGroup:groupingManager:]
  -[CHRecognitionSessionTask _recognitionResultsForNonTextStrokeGroup:groupingManager:]
  -[CHRecognitionSessionTask strokeGroupingOnly]
  -[CHRecognitionSessionTask saveInputDrawings]
  -[CHRecognitionSessionTask _recognizersQueue]
  -[CHRecognitionSessionTask _tokenizedTextResultForDrawing:usingRecognizer:isRemoteRecognizer:locale:strokeLimit:recognitionError:]
  -[CHRecognitionSessionTask initWithLocales:preferredLocales:strokeProvider:inputResult:recognitionQOSClass:recognitionEnvironment:isHighResponsivenessTask:strokeClassificationModel:strokeGroupingRequirement:subjectStrokeIdentifiers:partialResultBlock:]
  -[CHRecognitionSessionTask isHighResponsivenessTask]
  -[CHRecognitionSessionTask setSaveInputDrawings:]
  -[CHRecognitionSessionTask setForceRecognitionStrokeGroupIdentifiers:]
  -[CHRecognitionSessionTask setStrokeGroupingOnly:]
  -[CHRecognitionSessionTask subjectStrokeIdentifiers]
  -[CHRecognitionSessionTask setPartialResultBlock:]


CHTextInputQuery : CHQuery
 @property  NSArray *availableItems
 @property  double totalDuration
 @property  <CHTextInputQueryTargetDataSource> *textInputTargetsDataSource

  // class methods
  +[CHTextInputQuery queryItemStableIdentifierForStrokeGroup:]

  // instance methods
  -[CHTextInputQuery debugName]
  -[CHTextInputQuery setTotalDuration:]
  -[CHTextInputQuery dealloc]
  -[CHTextInputQuery totalDuration]
  -[CHTextInputQuery availableItems]
  -[CHTextInputQuery initWithRecognitionSession:]
  -[CHTextInputQuery setTextInputTargetsDataSource:]
  -[CHTextInputQuery q_updateQueryResult]
  -[CHTextInputQuery textInputTargetsDataSource]
  -[CHTextInputQuery q_textInputItemsFromSessionResult:]
  -[CHTextInputQuery _setAvailableItems:]


CHTextInputQueryItem : NSObject
 @property  NSNumber *itemIdentifier
 @property  NSNumber *itemStableIdentifier
 @property  NSArray *strokeIdentifiers
 @property  CHTextCorrectionResult *correctionResult

  // instance methods
  -[CHTextInputQueryItem itemIdentifier]
  -[CHTextInputQueryItem dealloc]
  -[CHTextInputQueryItem isEqual:]
  -[CHTextInputQueryItem strokeIdentifiers]
  -[CHTextInputQueryItem itemStableIdentifier]
  -[CHTextInputQueryItem correctionResult]
  -[CHTextInputQueryItem initWithIdentifier:stableIdentifier:strokeIdentifiers:correctionResult:]
  -[CHTextInputQueryItem isEqualToTextInputQueryItem:]


CHDataDetectorQuery : CHQuery
 @property  NSArray *foundItems

  // instance methods
  -[CHDataDetectorQuery debugName]
  -[CHDataDetectorQuery dealloc]
  -[CHDataDetectorQuery stop]
  -[CHDataDetectorQuery foundItems]
  -[CHDataDetectorQuery initWithRecognitionSession:]
  -[CHDataDetectorQuery q_updateQueryResult]
  -[CHDataDetectorQuery _setFoundItems:]
  -[CHDataDetectorQuery _dataDetectorResultsForSessionResult:]
  -[CHDataDetectorQuery _enumerateDetectedRangesForContextualTextResults:usingBlock:]


CHDataDetectorQueryItem : NSObject
 @property  NSSet *strokeIdentifiers
 @property  DDScannerResult *dataDetectorResult
 @property  r^{CGPath=} estimatedBaseline

  // instance methods
  -[CHDataDetectorQueryItem dealloc]
  -[CHDataDetectorQueryItem dataDetectorResult]
  -[CHDataDetectorQueryItem isEqual:]
  -[CHDataDetectorQueryItem strokeIdentifiers]
  -[CHDataDetectorQueryItem estimatedBaseline]
  -[CHDataDetectorQueryItem isEqualToDataDetectorQueryItem:]
  -[CHDataDetectorQueryItem initWithStrokeIdentifiers:detectedResult:estimatedBaseline:]


CHSubstroke : NSObject <NSSecureCoding>
 @property  CHEncodedStrokeIdentifier *strokeIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  double startTimestamp
 @property  double endTimestamp
 @property  double curvature

  // class methods
  +[CHSubstroke supportsSecureCoding]
  +[CHSubstroke substrokesForStroke:]

  // instance methods
  -[CHSubstroke .cxx_construct]
  -[CHSubstroke dealloc]
  -[CHSubstroke .cxx_destruct]
  -[CHSubstroke encodeWithCoder:]
  -[CHSubstroke bounds]
  -[CHSubstroke convexHull]
  -[CHSubstroke isEqual:]
  -[CHSubstroke startTimestamp]
  -[CHSubstroke endTimestamp]
  -[CHSubstroke initWithCoder:]
  -[CHSubstroke strokeIdentifier]
  -[CHSubstroke initWithStrokeIdentifier:bounds:startTimestamp:endTimestamp:convexHull:curvature:]
  -[CHSubstroke curvature]
  -[CHSubstroke isEqualToSubstroke:]


CHSubstrokePlacement : NSObject <NSCopying, NSSecureCoding>
 @property  CHSubstroke *substroke
 @property  {CGVector=dd} writingOrientation
 @property  {CGVector=dd} strokeDeviation
 @property  long long originalWritingDirectionIndex
 @property  {CGPoint=dd} coalescedCenter
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} rotatedBounds

  // class methods
  +[CHSubstrokePlacement supportsSecureCoding]

  // instance methods
  -[CHSubstrokePlacement copyWithZone:]
  -[CHSubstrokePlacement dealloc]
  -[CHSubstrokePlacement encodeWithCoder:]
  -[CHSubstrokePlacement orientationTransform]
  -[CHSubstrokePlacement initWithCoder:]
  -[CHSubstrokePlacement rotatedBounds]
  -[CHSubstrokePlacement substroke]
  -[CHSubstrokePlacement orientedBounds]
  -[CHSubstrokePlacement writingOrientation]
  -[CHSubstrokePlacement initWithSubstroke:]
  -[CHSubstrokePlacement setWritingOrientation:]
  -[CHSubstrokePlacement strokeDeviation]
  -[CHSubstrokePlacement setStrokeDeviation:]
  -[CHSubstrokePlacement originalWritingDirectionIndex]
  -[CHSubstrokePlacement setOriginalWritingDirectionIndex:]
  -[CHSubstrokePlacement coalescedCenter]
  -[CHSubstrokePlacement setCoalescedCenter:]


CHStrokeGroupClassificationVisualization : CHStrokeGroupingVisualization
  // instance methods
  -[CHStrokeGroupClassificationVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupClassificationVisualization layeringPriority]
  -[CHStrokeGroupClassificationVisualization _newColorForStroke:inGroup:]
  -[CHStrokeGroupClassificationVisualization _attributedStringFromString:withColor:font:paragraphStyle:]


CHPolygon : NSObject
 @property  double area
 @property  long long vertexCount
 @property  ^{CGPoint=dd} vertices

  // class methods
  +[CHPolygon _sutherlandHodgmanClipForSubjectPolygon:usingClipPolygon:]
  +[CHPolygon _createClippedPolygonForPolygon:clippingLine:clippedPolygonVertexCount:]

  // instance methods
  -[CHPolygon area]
  -[CHPolygon vertexCount]
  -[CHPolygon dealloc]
  -[CHPolygon enumerateEdgesWithBlock:]
  -[CHPolygon setArea:]
  -[CHPolygon vertices]
  -[CHPolygon initWithVertices:vertexCount:]
  -[CHPolygon initWithRect:]
  -[CHPolygon polygonByIntersectingWithClipPolygon:]
  -[CHPolygon edgeCountIntersectingLineSegment:]
  -[CHPolygon polygonDrawing]


CHStrokeGroupBasedVisualization : CHVisualization
 @property  CHRecognitionSessionResult *resultDrawn
 @property  NSSet *activeStrokeGroupAncestorIdentifiers
 @property  <CHStrokeGroupBasedVisualizationDelegate> *delegate
 @property  BOOL newGroupsDefaultToActive

  // instance methods
  -[CHStrokeGroupBasedVisualization dealloc]
  -[CHStrokeGroupBasedVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupBasedVisualization resultDrawn]
  -[CHStrokeGroupBasedVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupBasedVisualization activeStrokeGroupAncestorIdentifiers]
  -[CHStrokeGroupBasedVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHStrokeGroupBasedVisualization toggleVisualizationRegionAtPoint:]
  -[CHStrokeGroupBasedVisualization setResultDrawn:]
  -[CHStrokeGroupBasedVisualization newGroupsDefaultToActive]
  -[CHStrokeGroupBasedVisualization _markStrokeGroupsAsActive:]
  -[CHStrokeGroupBasedVisualization setActiveStrokeGroupAncestorIdentifiers:]


CHRemoteRecognizer : NSObject <CHRecognizing>
 @property  NSXPCConnection *_connection
 @property  BOOL shouldUseTextReplacements
 @property  long long priority
 @property  int recognitionMode
 @property  int contentType
 @property  int autoCapitalizationMode
 @property  NSLocale *locale
 @property  unsigned long maxRecognitionResultCount
 @property  NSCharacterSet *activeCharacterSet
 @property  {CGSize=dd} minimumDrawingSize
 @property  BOOL enableCachingIfAvailable
 @property  BOOL enableGen2ModelIfAvailable
 @property  BOOL enableGen2CharacterLMIfAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHRemoteRecognizer maxRequestStrokeCountForLocale:]
  +[CHRemoteRecognizer absoluteMaxStrokeCountPerRequest]

  // instance methods
  -[CHRemoteRecognizer setContentType:]
  -[CHRemoteRecognizer _connection]
  -[CHRemoteRecognizer locale]
  -[CHRemoteRecognizer contentType]
  -[CHRemoteRecognizer dealloc]
  -[CHRemoteRecognizer isEqual:]
  -[CHRemoteRecognizer setPriority:]
  -[CHRemoteRecognizer priority]
  -[CHRemoteRecognizer setAutoCapitalizationMode:]
  -[CHRemoteRecognizer initWithMode:locale:]
  -[CHRemoteRecognizer setActiveCharacterSet:]
  -[CHRemoteRecognizer setMinimumDrawingSize:]
  -[CHRemoteRecognizer autoCapitalizationMode]
  -[CHRemoteRecognizer enableCachingIfAvailable]
  -[CHRemoteRecognizer enableGen2ModelIfAvailable]
  -[CHRemoteRecognizer enableGen2CharacterLMIfAvailable]
  -[CHRemoteRecognizer recognitionMode]
  -[CHRemoteRecognizer maxRecognitionResultCount]
  -[CHRemoteRecognizer setMaxRecognitionResultCount:]
  -[CHRemoteRecognizer activeCharacterSet]
  -[CHRemoteRecognizer minimumDrawingSize]
  -[CHRemoteRecognizer initWithMode:locale:recognizerOptions:]
  -[CHRemoteRecognizer setShouldUseTextReplacements:]
  -[CHRemoteRecognizer shouldUseTextReplacements]
  -[CHRemoteRecognizer textRecognitionResultForDrawing:options:error:]
  -[CHRemoteRecognizer transcriptionPathsForTokenizedTextResult:withHistory:scores:error:]
  -[CHRemoteRecognizer _teardownXPCConnection]
  -[CHRemoteRecognizer _recognitionRequestWithDrawing:options:]
  -[CHRemoteRecognizer _recognitionResultForRequest:error:]
  -[CHRemoteRecognizer _setupXPCConnectionIfNeeded]
  -[CHRemoteRecognizer isEqualToRemoteRecognizer:]


CHVisualizationManager : NSObject <CHStrokeGroupBasedVisualizationDelegate, CHRecognitionSessionObserver>
 @property  NSMutableSet *_enabledVisualizationIDs
 @property  NSMutableArray *_activeVisualizationIDs
 @property  NSMutableDictionary *_activeVisualizationsByID
 @property  NSMutableDictionary *_strokeGroupIndexByAncestorID
 @property  BOOL _registeredAsChangeObserver
 @property  BOOL _registeredAsInputDrawingsClient
 @property  CHRecognitionSession *recognitionSession
 @property  <CHVisualizationManagerDelegate> *delegate
 @property  BOOL statusReportingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHVisualizationManager availableRecognitionSessionStatusKeys]
  +[CHVisualizationManager localizedNameForRecognitionSessionStatusKey:]
  +[CHVisualizationManager newColorForVisualizedItemAtIndex:]
  +[CHVisualizationManager availableVisualizationIdentifiers]
  +[CHVisualizationManager _classForVisualizationIdentifier:]
  +[CHVisualizationManager localizedNameForVisualizationIdentifier:]
  +[CHVisualizationManager variableHeightForRecognitionSessionStatusKey:]

  // instance methods
  -[CHVisualizationManager init]
  -[CHVisualizationManager dealloc]
  -[CHVisualizationManager setDelegate:]
  -[CHVisualizationManager delegate]
  -[CHVisualizationManager initWithRecognitionSession:]
  -[CHVisualizationManager recognitionSession]
  -[CHVisualizationManager drawVisualizationInRect:context:viewBounds:]
  -[CHVisualizationManager statusReportingEnabled]
  -[CHVisualizationManager setStatusReportingEnabled:]
  -[CHVisualizationManager valueForRecognitionStatusKey:]
  -[CHVisualizationManager recognitionSessionDidUpdateRecognitionResult:]
  -[CHVisualizationManager recognitionSessionDidChangeStatus:]
  -[CHVisualizationManager visualizationIndexForStrokeGroup:]
  -[CHVisualizationManager visualizationNeedsDisplay:]
  -[CHVisualizationManager visualization:needsDisplayInRect:]
  -[CHVisualizationManager isEnabledVisualizationForIdentifier:]
  -[CHVisualizationManager _enabledVisualizationIDs]
  -[CHVisualizationManager _updateInstalledVisualizations]
  -[CHVisualizationManager _activeVisualizationIDs]
  -[CHVisualizationManager _updateSessionRegistration]
  -[CHVisualizationManager _activeVisualizationsByID]
  -[CHVisualizationManager _isActiveVisualizationForIdentifier:]
  -[CHVisualizationManager _addVisualizationForIdentifier:]
  -[CHVisualizationManager _removeVisualizationForIdentifier:]
  -[CHVisualizationManager _registeredAsChangeObserver]
  -[CHVisualizationManager set_registeredAsChangeObserver:]
  -[CHVisualizationManager _registeredAsInputDrawingsClient]
  -[CHVisualizationManager set_registeredAsInputDrawingsClient:]
  -[CHVisualizationManager _strokeGroupIndexByAncestorID]
  -[CHVisualizationManager _updateKnownStrokeGroupIndexes]
  -[CHVisualizationManager setEnabled:forVisualizationIdentifier:]
  -[CHVisualizationManager toggleSelectiveVisualizationsAtPoint:]


CHTranscriptionQuery : CHQuery
  // instance methods
  -[CHTranscriptionQuery debugName]
  -[CHTranscriptionQuery contextualTextResultsForContextStrokes:completion:shouldCancel:]


CHQuery : NSObject <CHRecognitionSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *processingQueue
 @property  NSString *debugName
 @property  BOOL _queryActive
 @property  <CHStrokeProviderVersion> *lastProcessedStrokeProviderVersion
 @property  <CHQueryDelegate> *delegate
 @property  CHRecognitionSession *recognitionSession
 @property  double preferredUpdatesInterval

  // instance methods
  -[CHQuery debugName]
  -[CHQuery processingQueue]
  -[CHQuery pause]
  -[CHQuery init]
  -[CHQuery dealloc]
  -[CHQuery setDelegate:]
  -[CHQuery delegate]
  -[CHQuery start]
  -[CHQuery initWithRecognitionSession:]
  -[CHQuery recognitionSession]
  -[CHQuery waitForPendingUpdates]
  -[CHQuery setPreferredUpdatesInterval:]
  -[CHQuery lastProcessedStrokeProviderVersion]
  -[CHQuery recognitionSessionDidUpdateRecognitionResult:]
  -[CHQuery preferredRecognitionResultUpdatesInterval]
  -[CHQuery q_updateQueryResult]
  -[CHQuery q_sessionResult]
  -[CHQuery strokeIdentifiersForData:withStrokeProvider:]
  -[CHQuery encodedStrokeIdentifiers:withStrokeProvider:]
  -[CHQuery q_queryResultDidChange]
  -[CHQuery q_setNeedsQueryResultUpdating]
  -[CHQuery _queryActive]
  -[CHQuery set_queryActive:]
  -[CHQuery _updateForRecognitionSessionResultChangeIfNeeded]
  -[CHQuery preferredUpdatesInterval]
  -[CHQuery setLastProcessedStrokeProviderVersion:]


CHContextualTextResult : NSObject
 @property  CHTokenizedTextResult *textResult
 @property  NSString *terminatingSpecialCharacter

  // class methods
  +[CHContextualTextResult defaultWordTerminationCharacterForLocale:]

  // instance methods
  -[CHContextualTextResult dealloc]
  -[CHContextualTextResult textResult]
  -[CHContextualTextResult setTextResult:]
  -[CHContextualTextResult initWithTextResult:terminatingSpecialCharacter:]
  -[CHContextualTextResult terminatingSpecialCharacter]
  -[CHContextualTextResult setTerminatingSpecialCharacter:]


CHContextualTextResults : NSObject
 @property  NSArray *textResults

  // instance methods
  -[CHContextualTextResults dealloc]
  -[CHContextualTextResults topTranscription]
  -[CHContextualTextResults initWithTextResults:]
  -[CHContextualTextResults textResultToIndexMappingFromTopTranscriptionWithCharacterRange:intersectionRanges:]
  -[CHContextualTextResults textResults]
  -[CHContextualTextResults setTextResults:]


CHTextCorrectionResult : NSObject <NSSecureCoding>
 @property  CHTextInputTarget *inputTarget
 @property  {_NSRange=QQ} affectedRange
 @property  CHTokenizedTextResult *textResult
 @property  long long resultType
 @property  BOOL characterLevel
 @property  NSError *error

  // class methods
  +[CHTextCorrectionResult supportsSecureCoding]

  // instance methods
  -[CHTextCorrectionResult resultType]
  -[CHTextCorrectionResult dealloc]
  -[CHTextCorrectionResult encodeWithCoder:]
  -[CHTextCorrectionResult error]
  -[CHTextCorrectionResult affectedRange]
  -[CHTextCorrectionResult isEqual:]
  -[CHTextCorrectionResult initWithCoder:]
  -[CHTextCorrectionResult inputTarget]
  -[CHTextCorrectionResult textResult]
  -[CHTextCorrectionResult isCharacterLevel]
  -[CHTextCorrectionResult initWithInputTarget:affectedRange:textResult:resultType:isCharacterLevel:error:]
  -[CHTextCorrectionResult isEqualToTextCorrectionResult:]


CHRecognizerConfiguration : NSObject
 @property  int mode
 @property  NSLocale *locale
 @property  int contentType
 @property  int contentTypeForNoSpaceRecognition
 @property  int autoCapitalizationMode
 @property  BOOL enableCachingIfAvailable
 @property  BOOL enableGen2ModelIfAvailable
 @property  BOOL enableGen2CharacterLMIfAvailable

  // class methods
  +[CHRecognizerConfiguration isLocaleSupported:withMode:]
  +[CHRecognizerConfiguration defaultLocaleForRecognitionType:withMode:]
  +[CHRecognizerConfiguration validateRecognitionMode:]
  +[CHRecognizerConfiguration stringForRecognitionMode:]
  +[CHRecognizerConfiguration defaultMinimumDrawingSize]
  +[CHRecognizerConfiguration shouldApplyLatinSpacingForLocale:]
  +[CHRecognizerConfiguration stringForRecognitionContentType:]
  +[CHRecognizerConfiguration stringForAutoCapitalizationMode:]
  +[CHRecognizerConfiguration _decodeLocale:supportedLanguage:supportedScript:]
  +[CHRecognizerConfiguration _stringForRecognitionLanguage:]
  +[CHRecognizerConfiguration _stringForRecognitionScript:]
  +[CHRecognizerConfiguration supportedScriptForLocale:]
  +[CHRecognizerConfiguration supportedLanguageForLocale:]
  +[CHRecognizerConfiguration isLanguageSupported:withMode:]
  +[CHRecognizerConfiguration forcedGen2ModelLocaleForLocale:]
  +[CHRecognizerConfiguration spellCheckingLocaleForRecognitionLocale:string:]

  // instance methods
  -[CHRecognizerConfiguration mode]
  -[CHRecognizerConfiguration locale]
  -[CHRecognizerConfiguration contentType]
  -[CHRecognizerConfiguration dealloc]
  -[CHRecognizerConfiguration configurationKey]
  -[CHRecognizerConfiguration autoCapitalizationMode]
  -[CHRecognizerConfiguration newLanguageModel]
  -[CHRecognizerConfiguration mecabraInputMethodType]
  -[CHRecognizerConfiguration enableCachingIfAvailable]
  -[CHRecognizerConfiguration enableGen2ModelIfAvailable]
  -[CHRecognizerConfiguration enableGen2CharacterLMIfAvailable]
  -[CHRecognizerConfiguration initWithMode:locale:contentType:autoCapitalizationMode:enableCachingIfAvailable:enableGen2ModelIfAvailable:enableGen2CharacterLMIfAvailable:]
  -[CHRecognizerConfiguration requiredInappropriateFilteringFlags]
  -[CHRecognizerConfiguration shouldGenerateDigitLetterAlternatives]
  -[CHRecognizerConfiguration shouldEnforceGrammarOnTransliterations]
  -[CHRecognizerConfiguration newRecognitionEngine]
  -[CHRecognizerConfiguration newFreeFormEngine]
  -[CHRecognizerConfiguration newSpellChecker]
  -[CHRecognizerConfiguration newStaticLexicon:]
  -[CHRecognizerConfiguration newPhraseLexicon:]
  -[CHRecognizerConfiguration newCJKStaticLexicon]
  -[CHRecognizerConfiguration newOVSTrie]
  -[CHRecognizerConfiguration newPatternFST]
  -[CHRecognizerConfiguration newPostProcessingFST]
  -[CHRecognizerConfiguration newGrammarFST]
  -[CHRecognizerConfiguration newRadicalClusterFST]
  -[CHRecognizerConfiguration newTransliterationVariantMap]
  -[CHRecognizerConfiguration newCharacterLanguageModelAndMap:]
  -[CHRecognizerConfiguration newStrokeTransitionModel]
  -[CHRecognizerConfiguration newCutpointModel]
  -[CHRecognizerConfiguration newCTCRecognitionModel]
  -[CHRecognizerConfiguration newPostProcessorWithStaticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:recognizer:textReplacements:postProcessingFST:languageModel:]
  -[CHRecognizerConfiguration newCTCTextDecoderWithStaticLexicon:customLexicon:wordLanguageModel:]
  -[CHRecognizerConfiguration shouldForwardMecabraOTAAssetsUpdate]
  -[CHRecognizerConfiguration shouldRefineChineseCharacterCandidates]
  -[CHRecognizerConfiguration shouldApplyLMRescoring]
  -[CHRecognizerConfiguration shouldTransliterateAndSynthetizeCandidates]
  -[CHRecognizerConfiguration shouldPromoteChineseCommonCharacters]
  -[CHRecognizerConfiguration shouldTransformCharacterProbabilitiesIntoLogScores]
  -[CHRecognizerConfiguration shouldPerformGlobalBestSearch]
  -[CHRecognizerConfiguration shouldPerformGlobalBestSearchWithSmallLattice]
  -[CHRecognizerConfiguration shouldPerformIntegratedLexiconExpansion]
  -[CHRecognizerConfiguration shouldPenalizeLetterInsertion]
  -[CHRecognizerConfiguration shouldPerformMultiWordsExpansion]
  -[CHRecognizerConfiguration shouldApplyLexicalPenalty]
  -[CHRecognizerConfiguration shouldExpandNonSpaceSeparators]
  -[CHRecognizerConfiguration shouldComputeStrokePenalties]
  -[CHRecognizerConfiguration shouldExpandCodePoints]
  -[CHRecognizerConfiguration shouldPenalizePrefixes]
  -[CHRecognizerConfiguration shouldApplyRomanPostProcessing]
  -[CHRecognizerConfiguration shouldApplyChinesePostProcessing]
  -[CHRecognizerConfiguration shouldAutoCapitalize]
  -[CHRecognizerConfiguration shouldUseTokenPrecedingSpaces]
  -[CHRecognizerConfiguration shouldTransliterateSentences]
  -[CHRecognizerConfiguration shouldApplyDiacriticSensitivity]
  -[CHRecognizerConfiguration shouldUseCaching]
  -[CHRecognizerConfiguration supportedSegmentationStrategy]
  -[CHRecognizerConfiguration shouldPerformRegularSpaceRecognition]
  -[CHRecognizerConfiguration shouldPerformNoSpaceRecognition]
  -[CHRecognizerConfiguration shouldFallbackOnSingleCharacterExpansion]
  -[CHRecognizerConfiguration shouldComposeLexiconWithNetwork]
  -[CHRecognizerConfiguration shouldExpandLexiconInNetwork]
  -[CHRecognizerConfiguration contentTypeForNoSpaceRecognition]
  -[CHRecognizerConfiguration shouldKeepDuplicateTokenIDs]
  -[CHRecognizerConfiguration shouldKeepOutOfPatternCandidates]
  -[CHRecognizerConfiguration shouldDetectChinesePunctuation]
  -[CHRecognizerConfiguration shouldDetectRomanPunctuation]
  -[CHRecognizerConfiguration engineCandidateCount]
  -[CHRecognizerConfiguration shouldApplyCandidatesThresholding]
  -[CHRecognizerConfiguration shouldRelaxFinalCandidatesThresholding]
  -[CHRecognizerConfiguration shouldApplyLMSorting]
  -[CHRecognizerConfiguration decodingCommitActionBlock]
  -[CHRecognizerConfiguration shouldRunNextGenRecognizer]
  -[CHRecognizerConfiguration shouldTreatAllSmallStrokesAsPunctuation]
  -[CHRecognizerConfiguration shouldApplyCharacterLMRescoring]
  -[CHRecognizerConfiguration shouldReplaceInvalidTokenIDs]
  -[CHRecognizerConfiguration precedingSpaceDefaultBehavior]
  -[CHRecognizerConfiguration maxRecognitionResultDefaultCount]
  -[CHRecognizerConfiguration isEqualToRecognizerConfiguration:]
  -[CHRecognizerConfiguration hasSameResourcesAsConfiguration:]
  -[CHRecognizerConfiguration hasSamePostProcessingAsConfiguration:]
  -[CHRecognizerConfiguration shouldRunNextGenCharacterLM]
  -[CHRecognizerConfiguration effectiveEngineLanguage]
  -[CHRecognizerConfiguration shouldTransliterateHalfWidthPunctuations]
  -[CHRecognizerConfiguration shouldApplySemanticTokenization]
  -[CHRecognizerConfiguration shouldIdentifyChangeableColumns]
  -[CHRecognizerConfiguration shouldMergeNoPrecedingWhiteSpaceColumns]
  -[CHRecognizerConfiguration linguisticResourcesFallbackLocale]
  -[CHRecognizerConfiguration shouldReorderSCTCConfusion]
  -[CHRecognizerConfiguration shouldRefineCandidates]
  -[CHRecognizerConfiguration shouldMarkMultiWordOVS]
  -[CHRecognizerConfiguration languageResourceBundleWithStaticLexicon:customLexicon:wordLanguageModel:]
  -[CHRecognizerConfiguration decodingLexiconWeight]
  -[CHRecognizerConfiguration decodingCharacterLMWeight]
  -[CHRecognizerConfiguration characterLMLowerBoundLogProbability]
  -[CHRecognizerConfiguration decodingWordLMWeight]
  -[CHRecognizerConfiguration shouldPreserveLegacyTranscriptionPaths]


CHStrokeVisualization : CHVisualization
 @property  <CHStrokeProvider> *_strokeProviderDrawn

  // instance methods
  -[CHStrokeVisualization dealloc]
  -[CHStrokeVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHStrokeVisualization drawStrokesFromStrokeProvider:inRect:context:]
  -[CHStrokeVisualization _strokeProviderDrawn]
  -[CHStrokeVisualization set_strokeProviderDrawn:]


CHGroupBoundsVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHGroupBoundsVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHGroupBoundsVisualization dirtyRectForStrokeGroup:]


CHRecognitionSessionVersion : NSObject <NSSecureCoding>
 @property  long long sessionVersion
 @property  long long sessionResultVersion

  // class methods
  +[CHRecognitionSessionVersion supportsSecureCoding]

  // instance methods
  -[CHRecognitionSessionVersion encodeWithCoder:]
  -[CHRecognitionSessionVersion initWithCoder:]
  -[CHRecognitionSessionVersion initWithSessionVersion:sessionResultVersion:]
  -[CHRecognitionSessionVersion isValidSessionVersion]
  -[CHRecognitionSessionVersion isValidSessionResultVersion]
  -[CHRecognitionSessionVersion sessionVersion]
  -[CHRecognitionSessionVersion sessionResultVersion]


CHRecognitionSession : NSObject <CHRecognitionSessionTextInputTaskDelegate, NSSecureCoding>
 @property  BOOL strokeGroupingOnly
 @property  int autoCapitalizationMode
 @property  CHRecognitionSessionVersion *sessionVersion
 @property  CHRecognitionSessionResult *lastRecognitionResult
 @property  long long status
 @property  <CHStrokeProvider> *latestStrokeProvider
 @property  CHTextInputQuery *activeTextInputQuery
 @property  BOOL shouldForceFastGrouping
 @property  NSArray *_textRecognitionLocales
 @property  CHRecognitionSessionResult *lastRecognitionResult
 @property  long long status
 @property  <CHStrokeProvider> *latestStrokeProvider
 @property  BOOL _hasUnprocessedChanges
 @property  NSMutableDictionary *_recognizersByLocaleID
 @property  NSArray *_latestTextInputTargets
 @property  NSMutableDictionary *_correctionRecognizersByLocaleID
 @property  unsigned long _changeCoalescingIndex
 @property  NSMutableArray *_changeObservers
 @property  NSMutableArray *_inputDrawingClients
 @property  NSObject<OS_dispatch_queue> *_tasksWorkQueue
 @property  NSObject<OS_dispatch_queue> *_sessionQueue
 @property  NSObject<OS_dispatch_queue> *_highResponsivenessQueue
 @property  unsigned int _taskQueueQoSClass
 @property  NSMutableArray *_activeTasks
 @property  CHStrokeClassificationModel *strokeClassificationModel
 @property  BOOL _shouldForceFastGrouping
 @property  long long mode
 @property  NSArray *preferredLocales
 @property  NSArray *locales
 @property  <CHRecognitionSessionDataSource> *dataSource
 @property  long long recognitionEnvironment
 @property  long long priority
 @property  NSData *sessionData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHRecognitionSession supportsSecureCoding]
  +[CHRecognitionSession _isLocaleSupported:]
  +[CHRecognitionSession effectiveLocalesFromLocales:]
  +[CHRecognitionSession createRecognizerForLocale:sessionMode:remote:priority:]
  +[CHRecognitionSession strokeIdentifiersInProximalGroupsForStrokeIdentifiers:sortedStrokeGroups:clusteredStrokeGroups:unusedStrokeIdentifiers:]
  +[CHRecognitionSession _strokeGroupsInProximityOfSubjectStrokeGroups:clusteredStrokeGroups:]

  // instance methods
  -[CHRecognitionSession unregisterChangeObserver:]
  -[CHRecognitionSession initWithMode:]
  -[CHRecognitionSession registerChangeObserver:]
  -[CHRecognitionSession mode]
  -[CHRecognitionSession setDataSource:]
  -[CHRecognitionSession init]
  -[CHRecognitionSession _notifyObserversWithBlock:]
  -[CHRecognitionSession dealloc]
  -[CHRecognitionSession encodeWithCoder:]
  -[CHRecognitionSession setLocales:]
  -[CHRecognitionSession locales]
  -[CHRecognitionSession dataSource]
  -[CHRecognitionSession _setStatus:]
  -[CHRecognitionSession setPriority:]
  -[CHRecognitionSession sessionData]
  -[CHRecognitionSession priority]
  -[CHRecognitionSession _changeObservers]
  -[CHRecognitionSession status]
  -[CHRecognitionSession _sessionQueue]
  -[CHRecognitionSession initWithCoder:]
  -[CHRecognitionSession _activeTasks]
  -[CHRecognitionSession setShouldForceFastGrouping:]
  -[CHRecognitionSession preferredLocales]
  -[CHRecognitionSession setAutoCapitalizationMode:]
  -[CHRecognitionSession setNeedsRecognitionUpdate]
  -[CHRecognitionSession setPreferredLocales:]
  -[CHRecognitionSession cancelOngoingRequests]
  -[CHRecognitionSession indexableContent]
  -[CHRecognitionSession setRecognitionEnvironment:]
  -[CHRecognitionSession contextualTextResultsForContextStrokes:completion:shouldCancel:]
  -[CHRecognitionSession autoCapitalizationMode]
  -[CHRecognitionSession latestStrokeProvider]
  -[CHRecognitionSession tokenStrokeIdentifiersForContextStrokes:point:tokenizationLevel:completion:shouldCancel:]
  -[CHRecognitionSession recognitionEnvironment]
  -[CHRecognitionSession activeTextInputQuery]
  -[CHRecognitionSession textCorrectionRecognizerForLocale:]
  -[CHRecognitionSession setActiveTextInputQuery:]
  -[CHRecognitionSession strokeClassificationModel]
  -[CHRecognitionSession strokeGroupingOnly]
  -[CHRecognitionSession recognizerForLocale:]
  -[CHRecognitionSession setStrokeGroupingOnly:]
  -[CHRecognitionSession lastRecognitionResult]
  -[CHRecognitionSession registerInputDrawingClient:]
  -[CHRecognitionSession unregisterInputDrawingClient:]
  -[CHRecognitionSession waitForPendingRecognitionTasks]
  -[CHRecognitionSession sessionVersion]
  -[CHRecognitionSession _setupExecutionQueuesForMode:]
  -[CHRecognitionSession _setLatestStrokeProvider:]
  -[CHRecognitionSession _updateLatestStrokeProviderVisibleStrokes]
  -[CHRecognitionSession _invalidateCachedResults]
  -[CHRecognitionSession _setTextRecognitionLocales:]
  -[CHRecognitionSession _cleanupCachedRecognizers]
  -[CHRecognitionSession _isReadyToProcessChanges]
  -[CHRecognitionSession rebuildRecognitionResults]
  -[CHRecognitionSession _setCachedFastGroupingRecognitionResult:]
  -[CHRecognitionSession _setPartialRecognitionResult:]
  -[CHRecognitionSession _hasPendingRecognitionTasks]
  -[CHRecognitionSession _hasUnprocessedChanges]
  -[CHRecognitionSession _setLatestTextInputTargets:]
  -[CHRecognitionSession _setHasUnprocessedChanges:]
  -[CHRecognitionSession _scheduleProcessStrokeProviderChangesImmediately:]
  -[CHRecognitionSession _updateRecognitionSessionStatus]
  -[CHRecognitionSession _cancelOngoingRequests]
  -[CHRecognitionSession _changeCoalescingIndex]
  -[CHRecognitionSession set_changeCoalescingIndex:]
  -[CHRecognitionSession _setLastRecognitionResult:]
  -[CHRecognitionSession _processPendingStrokeChangesIfAvailable]
  -[CHRecognitionSession _preferredCoalescingInterval]
  -[CHRecognitionSession _newRecognitionSessionTaskWithStrokeGroupingRequirement:isHighResponsivenessTask:strokeGroupingOnly:subjectStrokeIdentifiers:partialResultBlock:]
  -[CHRecognitionSession _tasksWorkQueue]
  -[CHRecognitionSession _inputDrawingClients]
  -[CHRecognitionSession _recognizersByLocaleID]
  -[CHRecognitionSession _shouldRunRecognitionLocally]
  -[CHRecognitionSession _correctionRecognizersByLocaleID]
  -[CHRecognitionSession initWithMode:withVersion:]
  -[CHRecognitionSession initWithMode:recognitionSessionResult:dataSource:]
  -[CHRecognitionSession _validateLastRecognitionResult:visibleStrokeIdentifiers:]
  -[CHRecognitionSession _cachedFastGroupingResult]
  -[CHRecognitionSession _cachedClutterFilter]
  -[CHRecognitionSession _cancelAllHighResponsivenessTasks]
  -[CHRecognitionSession loadSessionData:error:]
  -[CHRecognitionSession _textRecognitionLocales]
  -[CHRecognitionSession _latestTextInputTargets]
  -[CHRecognitionSession _highResponsivenessQueue]
  -[CHRecognitionSession _taskQueueQoSClass]
  -[CHRecognitionSession _shouldForceFastGrouping]
  -[CHRecognitionSession _setShouldForceFastGrouping:]
  -[CHRecognitionSession recognizableDrawingForStrokeGroupQueryItem:]
  -[CHRecognitionSession _strokeIdentifiersFromCachedResultUsingContextStrokes:tokenizationLevel:]
  -[CHRecognitionSession shouldForceFastGrouping]
  -[CHRecognitionSession _strokeGroupsContainingStrokeIdentifiers:]
  -[CHRecognitionSession _strokeIdentifiersInWordsContainingStrokeIdentifiers:]
  -[CHRecognitionSession _strokeIdentifiersInGroupsContainingStrokeIdentifiers:]
  -[CHRecognitionSession _strokeIdentifiersInProximalGroupsForStrokeIdentifiers:]
  -[CHRecognitionSession _drawingCanvasSizeForLatestStrokeProviderSnapshot]
  -[CHRecognitionSession _recognitionSessionResultOnDemandUsingContextStrokes:shouldCancel:]
  -[CHRecognitionSession _contextualTextResultsFromCachedResultUsingContextStrokes:shouldCancel:]
  -[CHRecognitionSession lastRecognitionResultWaitingForPendingTasks]


CHTextCorrectionRecognizer : NSObject
 @property  <CHRecognizing> *_textRecognizer
 @property  CHRecognizer *_shapeRecognizer
 @property  CHCornerDetector *_cornerDetector
 @property  NSLocale *locale
 @property  BOOL isRemoteRecognition

  // class methods
  +[CHTextCorrectionRecognizer defaultTextAffectedRangeForTargetContentInfo:]
  +[CHTextCorrectionRecognizer _modifiedTextResult:replacingString:]
  +[CHTextCorrectionRecognizer _improvedSingleCharacterOneColumnTextResult:targetContentInfo:insertionRange:locale:affectedRange:]
  +[CHTextCorrectionRecognizer _relativeRangeOfPreviousCharacterFromTargetContentInfo:absoluteInsertionRange:]

  // instance methods
  -[CHTextCorrectionRecognizer locale]
  -[CHTextCorrectionRecognizer dealloc]
  -[CHTextCorrectionRecognizer _shapeRecognizer]
  -[CHTextCorrectionRecognizer textCorrectionResultForDrawing:targetContentInfo:originalDrawing:lastStroke:localTypedContextBounds:normalizedDrawingScaleFactor:previousCorrectionResult:]
  -[CHTextCorrectionRecognizer isRemoteRecognition]
  -[CHTextCorrectionRecognizer initWithLocale:remoteRecognition:priority:]
  -[CHTextCorrectionRecognizer _gestureOnBlankAreaResultForDrawing:originalDrawing:targetContentInfo:]
  -[CHTextCorrectionRecognizer _editingGestureResultForDrawing:originalDrawing:lastStroke:targetContentInfo:previousResult:]
  -[CHTextCorrectionRecognizer _refinedGestureResultForPreviousResult:originalDrawing:lastStroke:targetContentInfo:]
  -[CHTextCorrectionRecognizer _textInsertionResultForDrawing:targetContentInfo:originalDrawing:localTypedContextBounds:normalizedDrawingScaleFactor:insertionRange:]
  -[CHTextCorrectionRecognizer _cornerDetector]
  -[CHTextCorrectionRecognizer _textBeforeStringForTargetContentInfo:insertionRange:]
  -[CHTextCorrectionRecognizer _precedingLineBreakCountForAutoLineBreak:targetContentInfo:]
  -[CHTextCorrectionRecognizer _precedingSpaceBehaviorFromTargetContentInfo:drawingBounds:localTypedContextBounds:insertionRange:lastCharacterBefore:]
  -[CHTextCorrectionRecognizer _textAfterStringForTargetContentInfo:insertionRange:]
  -[CHTextCorrectionRecognizer _textRecognizer]
  -[CHTextCorrectionRecognizer _verticalBarGestureOnBlankAreaResultForDrawing:originalDrawing:targetContentInfo:]


CHCharacterSetRules : NSObject
 @property  NSCharacterSet *lowercaseCharSet
 @property  NSCharacterSet *uppercaseCharSet
 @property  NSCharacterSet *digitCharSet
 @property  NSCharacterSet *startPunctuationCharSet
 @property  NSCharacterSet *middlePunctuationCharSet
 @property  NSCharacterSet *endOfWordPunctuationCharSet
 @property  NSCharacterSet *endOfSentencePunctuationCharSet
 @property  NSCharacterSet *digitStartPunctuationCharSet
 @property  NSCharacterSet *digitEndPunctuationCharSet
 @property  NSCharacterSet *arithmeticOperatorCharSet
 @property  NSCharacterSet *dateTimeSeparatorCharSet
 @property  NSCharacterSet *dateTimeEndLetterCharSet
 @property  NSCharacterSet *numeralEndLetterCharSet
 @property  NSCharacterSet *lexiconSkipCharSet
 @property  NSCharacterSet *containsDotCharSet
 @property  NSCharacterSet *containsTwoDotsCharSet
 @property  NSCharacterSet *prefixCapitalizationExceptionCharSet
 @property  NSCharacterSet *selfLoopPunctuationCharSet
 @property  NSCharacterSet *emoticonTopCharSet
 @property  NSCharacterSet *emoticonMiddleCharSet
 @property  NSCharacterSet *emoticonBottomCharSet
 @property  NSCharacterSet *emailAtCharSet
 @property  NSCharacterSet *emailPunctuationCharSet
 @property  NSCharacterSet *urlPunctuationCharSet
 @property  NSCharacterSet *nonSpaceSeparatorCharSet
 @property  {map<unsigned int strokeMaxPenalties
 @property  {map<unsigned int signatureUniChar
 @property  NSObject<OS_dispatch_queue> *_charSetRulesQueue

  // class methods
  +[CHCharacterSetRules sharedCharacterSetRules]
  +[CHCharacterSetRules expectedMaxStrokeCount:]
  +[CHCharacterSetRules expectedMinStrokeCount:]
  +[CHCharacterSetRules characterType:]
  +[CHCharacterSetRules expectedMaxDotCount:]
  +[CHCharacterSetRules characterTypeFromString:]

  // instance methods
  -[CHCharacterSetRules init]
  -[CHCharacterSetRules .cxx_construct]
  -[CHCharacterSetRules dealloc]
  -[CHCharacterSetRules .cxx_destruct]
  -[CHCharacterSetRules _charSetRulesQueue]
  -[CHCharacterSetRules _expectedMaxStrokeCount:]
  -[CHCharacterSetRules _expectedMinStrokeCount:]
  -[CHCharacterSetRules _characterType:]
  -[CHCharacterSetRules lowercaseCharSet]
  -[CHCharacterSetRules setLowercaseCharSet:]
  -[CHCharacterSetRules uppercaseCharSet]
  -[CHCharacterSetRules setUppercaseCharSet:]
  -[CHCharacterSetRules digitCharSet]
  -[CHCharacterSetRules setDigitCharSet:]
  -[CHCharacterSetRules startPunctuationCharSet]
  -[CHCharacterSetRules setStartPunctuationCharSet:]
  -[CHCharacterSetRules middlePunctuationCharSet]
  -[CHCharacterSetRules setMiddlePunctuationCharSet:]
  -[CHCharacterSetRules digitStartPunctuationCharSet]
  -[CHCharacterSetRules setDigitStartPunctuationCharSet:]
  -[CHCharacterSetRules digitEndPunctuationCharSet]
  -[CHCharacterSetRules setDigitEndPunctuationCharSet:]
  -[CHCharacterSetRules arithmeticOperatorCharSet]
  -[CHCharacterSetRules setArithmeticOperatorCharSet:]
  -[CHCharacterSetRules dateTimeSeparatorCharSet]
  -[CHCharacterSetRules setDateTimeSeparatorCharSet:]
  -[CHCharacterSetRules dateTimeEndLetterCharSet]
  -[CHCharacterSetRules setDateTimeEndLetterCharSet:]
  -[CHCharacterSetRules numeralEndLetterCharSet]
  -[CHCharacterSetRules setNumeralEndLetterCharSet:]
  -[CHCharacterSetRules lexiconSkipCharSet]
  -[CHCharacterSetRules setLexiconSkipCharSet:]
  -[CHCharacterSetRules containsDotCharSet]
  -[CHCharacterSetRules setContainsDotCharSet:]
  -[CHCharacterSetRules prefixCapitalizationExceptionCharSet]
  -[CHCharacterSetRules setPrefixCapitalizationExceptionCharSet:]
  -[CHCharacterSetRules selfLoopPunctuationCharSet]
  -[CHCharacterSetRules setSelfLoopPunctuationCharSet:]
  -[CHCharacterSetRules emoticonTopCharSet]
  -[CHCharacterSetRules setEmoticonTopCharSet:]
  -[CHCharacterSetRules emoticonMiddleCharSet]
  -[CHCharacterSetRules setEmoticonMiddleCharSet:]
  -[CHCharacterSetRules emoticonBottomCharSet]
  -[CHCharacterSetRules setEmoticonBottomCharSet:]
  -[CHCharacterSetRules emailAtCharSet]
  -[CHCharacterSetRules setEmailAtCharSet:]
  -[CHCharacterSetRules emailPunctuationCharSet]
  -[CHCharacterSetRules setEmailPunctuationCharSet:]
  -[CHCharacterSetRules urlPunctuationCharSet]
  -[CHCharacterSetRules setUrlPunctuationCharSet:]
  -[CHCharacterSetRules strokeMaxPenalties]
  -[CHCharacterSetRules setStrokeMaxPenalties:]
  -[CHCharacterSetRules signatureUniChar]
  -[CHCharacterSetRules setSignatureUniChar:]
  -[CHCharacterSetRules _expectedMaxDotCount:]
  -[CHCharacterSetRules endOfWordPunctuationCharSet]
  -[CHCharacterSetRules setEndOfWordPunctuationCharSet:]
  -[CHCharacterSetRules endOfSentencePunctuationCharSet]
  -[CHCharacterSetRules setEndOfSentencePunctuationCharSet:]
  -[CHCharacterSetRules containsTwoDotsCharSet]
  -[CHCharacterSetRules setContainsTwoDotsCharSet:]
  -[CHCharacterSetRules nonSpaceSeparatorCharSet]
  -[CHCharacterSetRules setNonSpaceSeparatorCharSet:]


CHBottomUpStrokeGroupingResult : CHStrokeGroupingResult
 @property  NSDictionary *substrokePlacementsByStrokeIdentifier

  // class methods
  +[CHBottomUpStrokeGroupingResult supportsSecureCoding]

  // instance methods
  -[CHBottomUpStrokeGroupingResult copyWithZone:]
  -[CHBottomUpStrokeGroupingResult dealloc]
  -[CHBottomUpStrokeGroupingResult encodeWithCoder:]
  -[CHBottomUpStrokeGroupingResult initWithCoder:]
  -[CHBottomUpStrokeGroupingResult substrokePlacementsByStrokeIdentifier]
  -[CHBottomUpStrokeGroupingResult initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:substrokePlacementsByStrokeIdentifier:]


CHBottomUpStrokeGroupingStrategy : CHStrokeGroupingStrategy
 @property  BOOL isInlineContinuousMode
 @property  NSArray *textInputTargets

  // class methods
  +[CHBottomUpStrokeGroupingStrategy _boundingBoxesOfStrokesInGroup:rotatedAroundPoint:byAngle:]

  // instance methods
  -[CHBottomUpStrokeGroupingStrategy dealloc]
  -[CHBottomUpStrokeGroupingStrategy textInputTargets]
  -[CHBottomUpStrokeGroupingStrategy strategyIdentifier]
  -[CHBottomUpStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHBottomUpStrokeGroupingStrategy initWithStrokeProvider:defaultWritingOrientation:locales:isInlineContinuousMode:inlineContinuousModeTargets:]
  -[CHBottomUpStrokeGroupingStrategy isInlineContinuousMode]
  -[CHBottomUpStrokeGroupingStrategy _updateGroups:createdGroups:deletedGroups:forAddedStroke:substrokePlacementsByStrokeIdentifier:reusableIDRemovedGroups:trySplit:cancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy mergeGroupsPostProcessing:createdGroups:deletedGroups:]
  -[CHBottomUpStrokeGroupingStrategy _applyDefaultGroupingParameters]
  -[CHBottomUpStrokeGroupingStrategy _applyStrictGroupingParameters]
  -[CHBottomUpStrokeGroupingStrategy _getMergingLowerBoundCost:withStrokeBounds:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy getMergingEndOfLineCost:mergingEndOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy compareDistanceInWritingSequenceOfStroke:andStroke:toReferenceStroke:]
  -[CHBottomUpStrokeGroupingStrategy getMergingMiddleOfLineCost:mergingMiddleOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy _textLineStrokeGroupByAddingStroke:withSubstrokePlacements:intoStrokeGroup:mergingEndSubgroup:bestStrokeMergeEnd:]
  -[CHBottomUpStrokeGroupingStrategy tryRegroupingStrokesInGroup:substrokePlacementsByStrokeIdentifier:cancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy _newTextLineStrokeGroupWithStroke:withSubstrokePlacements:reusableIDRemovedGroups:]
  -[CHBottomUpStrokeGroupingStrategy estimateWritingDirectionAndSortSubstrokesAccordingly:averageWritingOrientation:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _writingDirectionSortedStrokeIdentifiersFromSubstrokes:localWritingOrientations:]
  -[CHBottomUpStrokeGroupingStrategy _lastSubstrokeCoalescedWithOverlappingSubstrokes:strokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _strokeGroupConfidenceForSortedSubstrokes:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:averageWritingOrientation:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _normalizedBoundsForWritingDirectionSortedStrokes:strokeWritingOrientations:firstStrokeDeviation:originalDrawing:rotatedSortedStrokes:]
  -[CHBottomUpStrokeGroupingStrategy _scaleFactorForBoundsHeight:]
  -[CHBottomUpStrokeGroupingStrategy _getMergingEndOfLineCost:mergingEndOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:refSubstrokeIndex:]
  -[CHBottomUpStrokeGroupingStrategy clippedWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy _averageVectorFromCoalescedSubstrokes:toSubstroke:withOrientation:strokeRef:strokeDest:]
  -[CHBottomUpStrokeGroupingStrategy updateLocalWritingOrientationsForSubstrokes:useCoalescedCenter:]
  -[CHBottomUpStrokeGroupingStrategy sortSubstrokesByWritingDirection:averageWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy refineLocalWritingOrientationsForSubstrokes:useCoalescedCenter:]
  -[CHBottomUpStrokeGroupingStrategy refineWritingOrientationAndResortSubstrokes:averageWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy updateLocalStrokeDeviationsForSubstrokes:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy smoothLocalWritingOrientations:]
  -[CHBottomUpStrokeGroupingStrategy flippedCenters:ofSubstrokes:maxStrokesGap:begnning:]
  -[CHBottomUpStrokeGroupingStrategy _averageAngleAndReliabilityForStrokeGroup:]
  -[CHBottomUpStrokeGroupingStrategy _verticalOffsetForBoundsHeight:andScaleFactor:]


CHMutableStrokeClassificationResult : CHStrokeClassificationResult
  // instance methods
  -[CHMutableStrokeClassificationResult copyWithZone:]
  -[CHMutableStrokeClassificationResult init]
  -[CHMutableStrokeClassificationResult dealloc]
  -[CHMutableStrokeClassificationResult initWithStrokeClassificationsByStrokeIdentifier:substrokesByStrokeIdentifier:nontextCandidates:]
  -[CHMutableStrokeClassificationResult updateNonTextCandidatesByRemovingSupportFromStrokeIdentifier:skippingCandidatesWithStrokeIdentifier:]
  -[CHMutableStrokeClassificationResult updateByRemovingStrokeIdentifier:withRemovedAndClutterStrokeIDs:]
  -[CHMutableStrokeClassificationResult updateByTransitionedClutterStrokeIdentifier:withRemovedAndClutterStrokeIDs:]
  -[CHMutableStrokeClassificationResult updateByAddingNonClutterStroke:withAllStrokes:forceText:]
  -[CHMutableStrokeClassificationResult updateByAddingNonClutterStroke:withClassification:]
  -[CHMutableStrokeClassificationResult updateByAddingClutterStroke:]


CHStrokeClassifier : NSObject
 @property  <CHStrokeProvider> *strokeProvider
 @property  CHStrokeClassificationResult *strokeClassificationLastResult
 @property  BOOL textOnly

  // class methods
  +[CHStrokeClassifier nonTextCandidateForStroke:withSubstrokes:]
  +[CHStrokeClassifier containerSupportForPoints:withBounds:]

  // instance methods
  -[CHStrokeClassifier dealloc]
  -[CHStrokeClassifier strokeProvider]
  -[CHStrokeClassifier initWithStrokeProvider:strokeClassificationLastResult:textOnly:]
  -[CHStrokeClassifier updatedStrokeClassificationResultByAddingStrokes:removingStrokeIdentifiers:clutterFilter:affectedClutterStrokeIDs:cancellationBlock:]
  -[CHStrokeClassifier refineStrokeClassificationResultUsingClassificationResult:strokeClassificationModel:sortedAddedStrokes:removedStrokeIdentifiers:cancellationBlock:]
  -[CHStrokeClassifier strokeClassificationLastResult]
  -[CHStrokeClassifier textOnly]
  -[CHStrokeClassifier changeableClassificationByRefinement:stroke:]
  -[CHStrokeClassifier _tileIndexForYPosition:tileHeight:]


CHFastStrokeGroupingStrategy : CHStrokeGroupingStrategy
  // instance methods
  -[CHFastStrokeGroupingStrategy dealloc]
  -[CHFastStrokeGroupingStrategy strategyIdentifier]
  -[CHFastStrokeGroupingStrategy initWithStrokeProvider:locales:clutterFilter:]
  -[CHFastStrokeGroupingStrategy groupingResultUsingStrokes:distanceMetric:mergingDistanceThreshold:shouldCancel:]
  -[CHFastStrokeGroupingStrategy lineGroupingResultUsingStrokes:shouldCancel:]
  -[CHFastStrokeGroupingStrategy groupingResultForContextStrokes:clusteredStrokes:fastGroupingResult:point:tokenizationLevel:]
  -[CHFastStrokeGroupingStrategy clustersForStrokes:shouldMakeSingleCluster:]
  -[CHFastStrokeGroupingStrategy fastGroupingResultWithFastGroupingClusters:clusteredStrokes:]
  -[CHFastStrokeGroupingStrategy _agglomerativeClusteringUsingInitialClusters:distanceMetric:maxDistanceThreshold:shouldCancel:]
  -[CHFastStrokeGroupingStrategy _maxDistanceThresholdForTokenizationLevel:]
  -[CHFastStrokeGroupingStrategy _filterClusters:usingContextStrokes:clusteredStrokes:]
  -[CHFastStrokeGroupingStrategy _wordClustersForInitialClusters:]
  -[CHFastStrokeGroupingStrategy _strokeIdentifiersForContextStrokes:clusters:clusteredStrokes:tokenizationLevel:fastGroupingResult:]


CHStrokeGroupBaselineLegacyVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHStrokeGroupBaselineLegacyVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupBaselineLegacyVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupBaselineLegacyVisualization layeringPriority]
  -[CHStrokeGroupBaselineLegacyVisualization _labelBoundsForAnchorPoint:]
  -[CHStrokeGroupBaselineLegacyVisualization _newBaselinePathForStrokeGroup:outFirstPoint:strokeProvider:]
  -[CHStrokeGroupBaselineLegacyVisualization _getOrientedBounds:length:forStroke:atWritingDirectionIndex:inGroup:]
  -[CHStrokeGroupBaselineLegacyVisualization _orientationTransformForStrokeBounds:atWritingDirectionIndex:inGroup:]


CHIndexableContentQuery : CHQuery
 @property  CHRecognitionSessionIndexableContent *indexableContent

  // instance methods
  -[CHIndexableContentQuery debugName]
  -[CHIndexableContentQuery dealloc]
  -[CHIndexableContentQuery initWithRecognitionSession:]
  -[CHIndexableContentQuery indexableContent]
  -[CHIndexableContentQuery q_updateQueryResult]
  -[CHIndexableContentQuery _setIndexableContent:]


CHRecognitionSessionIndexableContent : NSObject
 @property  NSString *indexableTextRepresentation
 @property  NSString *presentableTextRepresentation

  // instance methods
  -[CHRecognitionSessionIndexableContent dealloc]
  -[CHRecognitionSessionIndexableContent indexableTextRepresentation]
  -[CHRecognitionSessionIndexableContent presentableTextRepresentation]
  -[CHRecognitionSessionIndexableContent initWithIndexableTextRepresentation:presentableTextRepresentation:]


CHStrokeFastGroupingResult : CHStrokeGroupingResult
 @property  {vector<CHFastGroupingCluster fastGroupingClusters

  // class methods
  +[CHStrokeFastGroupingResult _strokeGroupsFromFastGroupingClusters:clusteredStrokes:strokeProvider:strategyIdentifier:clutterFilter:]
  +[CHStrokeFastGroupingResult _strokeGroupFromSortedStrokeIdentifiers:strokeProvider:strategyIdentifier:]
  +[CHStrokeFastGroupingResult _strokeGroupFromFastGroupingCluster:strokeProvider:strategyIdentifier:]

  // instance methods
  -[CHStrokeFastGroupingResult .cxx_construct]
  -[CHStrokeFastGroupingResult .cxx_destruct]
  -[CHStrokeFastGroupingResult fastGroupingClusters]
  -[CHStrokeFastGroupingResult initWithFastGroupingClusters:clusteredStrokes:strokeProvider:strategyIdentifier:clutterFilter:]


NetworkCursor : NSObject
 @property  unsigned long stateType

  // class methods
  +[NetworkCursor cursorByAddingNodeIndex:toCursor:]

  // instance methods
  -[NetworkCursor init]
  -[NetworkCursor .cxx_construct]
  -[NetworkCursor .cxx_destruct]
  -[NetworkCursor stateType]
  -[NetworkCursor setStateType:]
  -[NetworkCursor isCompletePattern]
  -[NetworkCursor nodeIndexCount]
  -[NetworkCursor nodeIndexAtPosition:]
  -[NetworkCursor addNodeIndex:withStateType:]


CHPatternNetwork : NSObject
  // class methods
  +[CHPatternNetwork patternToSymbolMap]
  +[CHPatternNetwork rootCursorForContentType:inNetwork:forFirstSegmentGroup:]
  +[CHPatternNetwork newCursorByAdvancingWithString:fromCursor:inNetwork:]
  +[CHPatternNetwork newCursorByAdvancingWithSymbol:fromCursor:inNetwork:]
  +[CHPatternNetwork rootCursorForPatternType:inNetwork:forFirstSegmentGroup:]
  +[CHPatternNetwork contentTypesToPatternsMapping]
  +[CHPatternNetwork isString:fullPattern:inNetwork:]

  // instance methods
  -[CHPatternNetwork dealloc]
  -[CHPatternNetwork initWithFile:]
  -[CHPatternNetwork newCursorByAdvancingCursor:withSymbol:]
  -[CHPatternNetwork stateTypeForNodeIndex:]


CHResultWithContext : NSObject
 @property  NSString *leftContext
 @property  int contentType
 @property  CHMutableTokenizedTextResult *result

  // instance methods
  -[CHResultWithContext setContentType:]
  -[CHResultWithContext result]
  -[CHResultWithContext contentType]
  -[CHResultWithContext dealloc]
  -[CHResultWithContext setResult:]
  -[CHResultWithContext setLeftContext:]
  -[CHResultWithContext leftContext]
  -[CHResultWithContext initWithResult:leftContext:contentType:]


CHPostProcessingManager : NSObject
 @property  NSArray *sequence

  // instance methods
  -[CHPostProcessingManager init]
  -[CHPostProcessingManager dealloc]
  -[CHPostProcessingManager setSequence:]
  -[CHPostProcessingManager process:]
  -[CHPostProcessingManager initWithStep:]
  -[CHPostProcessingManager sequence]
  -[CHPostProcessingManager initWithSequence:]


CHPostprocessingStep : NSObject
  // class methods
  +[CHPostprocessingStep applyTransform:toAllTokens:]

  // instance methods
  -[CHPostprocessingStep process:]


CHTextFieldTypeSwitchStep : CHPostprocessingStep
 @property  CHPostProcessingManager *defaultProcessor
 @property  CHPostProcessingManager *digitProcessor
 @property  CHPostProcessingManager *phoneProcessor
 @property  CHPostProcessingManager *usernameProcessor
 @property  CHPostProcessingManager *emailProcessor
 @property  CHPostProcessingManager *urlProcessor
 @property  CHPostProcessingManager *asciiProcessor
 @property  CHPostProcessingManager *equationProcessor

  // instance methods
  -[CHTextFieldTypeSwitchStep dealloc]
  -[CHTextFieldTypeSwitchStep process:]
  -[CHTextFieldTypeSwitchStep initProcessorDefault:processorDigits:processorPhone:processorUsername:processorEmail:processorURL:processorASCII:processorEquation:]
  -[CHTextFieldTypeSwitchStep defaultProcessor]
  -[CHTextFieldTypeSwitchStep process:withProcessor:]
  -[CHTextFieldTypeSwitchStep digitProcessor]
  -[CHTextFieldTypeSwitchStep phoneProcessor]
  -[CHTextFieldTypeSwitchStep usernameProcessor]
  -[CHTextFieldTypeSwitchStep emailProcessor]
  -[CHTextFieldTypeSwitchStep urlProcessor]
  -[CHTextFieldTypeSwitchStep asciiProcessor]
  -[CHTextFieldTypeSwitchStep equationProcessor]
  -[CHTextFieldTypeSwitchStep setDefaultProcessor:]
  -[CHTextFieldTypeSwitchStep setDigitProcessor:]
  -[CHTextFieldTypeSwitchStep setPhoneProcessor:]
  -[CHTextFieldTypeSwitchStep setUsernameProcessor:]
  -[CHTextFieldTypeSwitchStep setEmailProcessor:]
  -[CHTextFieldTypeSwitchStep setUrlProcessor:]
  -[CHTextFieldTypeSwitchStep setAsciiProcessor:]
  -[CHTextFieldTypeSwitchStep setEquationProcessor:]


CHLexiconCorrectionStep : CHPostprocessingStep
 @property  BOOL shouldAutocapitalize
 @property  CHRecognizer *recognizer
 @property  NSLocale *locale
 @property  r^{_LXLexicon=} staticLexicon
 @property  r^{_LXLexicon=} customLexicon
 @property  r^{_LXLexicon=} phraseLexicon
 @property  r^{_LXLexicon=} customPhraseLexicon
 @property  int autoCapitalizationMode
 @property  NSDictionary *textReplacements
 @property  NSCharacterSet *consumableStrokesCharSet
 @property  NSCharacterSet *fullWidthPunctuationThatExpectsUppercaseAfter

  // instance methods
  -[CHLexiconCorrectionStep setLocale:]
  -[CHLexiconCorrectionStep locale]
  -[CHLexiconCorrectionStep dealloc]
  -[CHLexiconCorrectionStep process:]
  -[CHLexiconCorrectionStep recognizer]
  -[CHLexiconCorrectionStep setRecognizer:]
  -[CHLexiconCorrectionStep autoCapitalizationMode]
  -[CHLexiconCorrectionStep staticLexicon]
  -[CHLexiconCorrectionStep setStaticLexicon:]
  -[CHLexiconCorrectionStep setCustomPhraseLexicon:]
  -[CHLexiconCorrectionStep setTextReplacements:]
  -[CHLexiconCorrectionStep phraseLexicon]
  -[CHLexiconCorrectionStep setPhraseLexicon:]
  -[CHLexiconCorrectionStep customLexicon]
  -[CHLexiconCorrectionStep setCustomLexicon:]
  -[CHLexiconCorrectionStep customPhraseLexicon]
  -[CHLexiconCorrectionStep textReplacements]
  -[CHLexiconCorrectionStep initWithAutoCapitalizationMode:locale:staticLexicon:customLexicon:phraseLexicon:customPhraseLexicon:recognizer:textReplacements:]
  -[CHLexiconCorrectionStep getSpellCorrectedToken:contextBeforeToken:]
  -[CHLexiconCorrectionStep capitalizeString:]
  -[CHLexiconCorrectionStep applyLexiconCorrections:shouldCapitalizeWord:shouldSkipEntryCorrection:outBestTokenIndex:bestLexiconTokenScore:textReplacements:contextBeforeToken:]
  -[CHLexiconCorrectionStep capitalizeToken:]
  -[CHLexiconCorrectionStep tokenIsExemptFromCorrection:inPath:withTokensInRow:]
  -[CHLexiconCorrectionStep applyLexiconCorrectionOnToken:hasEmptyContext:history:historyEndsAlphabetic:historyEndsWithLineBreak:prevToken:shouldCapitalizeGivenHistory:tokenIndex:textReplacements:shouldEntrySkipCorrection:contextBeforeToken:]
  -[CHLexiconCorrectionStep shouldAutocapitalize]
  -[CHLexiconCorrectionStep setShouldAutocapitalize:]
  -[CHLexiconCorrectionStep consumableStrokesCharSet]
  -[CHLexiconCorrectionStep setConsumableStrokesCharSet:]
  -[CHLexiconCorrectionStep fullWidthPunctuationThatExpectsUppercaseAfter]
  -[CHLexiconCorrectionStep setFullWidthPunctuationThatExpectsUppercaseAfter:]


CHTransliterateHalfWidthPunctuationStep : CHPostprocessingStep
  // instance methods
  -[CHTransliterateHalfWidthPunctuationStep dealloc]
  -[CHTransliterateHalfWidthPunctuationStep process:]


CHSemanticTokenizerStep : CHPostprocessingStep
 @property  CHRecognizer *recognizer
 @property  ^v languageModel

  // instance methods
  -[CHSemanticTokenizerStep languageModel]
  -[CHSemanticTokenizerStep process:]
  -[CHSemanticTokenizerStep recognizer]
  -[CHSemanticTokenizerStep setRecognizer:]
  -[CHSemanticTokenizerStep setLanguageModel:]
  -[CHSemanticTokenizerStep initWithRecognizer:languageModel:]
  -[CHSemanticTokenizerStep _updateTokenInappropriateFlag:]


CHIdentifyLowAlignmentConfidenceColumnsStep : CHPostprocessingStep
  // instance methods
  -[CHIdentifyLowAlignmentConfidenceColumnsStep process:]


CHDropSpaceBeforePunctuationMarksStep : CHPostprocessingStep
  // instance methods
  -[CHDropSpaceBeforePunctuationMarksStep process:]


CHCandidateRefinementStep : CHPostprocessingStep
 @property  CHRecognizer *recognizer
 @property  BOOL shouldKeepOutOfPatternCandidates
 @property  BOOL shouldKeepDuplicateTokenIDs
 @property  BOOL shouldKeepOriginalSpelling

  // instance methods
  -[CHCandidateRefinementStep process:]
  -[CHCandidateRefinementStep recognizer]
  -[CHCandidateRefinementStep setRecognizer:]
  -[CHCandidateRefinementStep shouldKeepDuplicateTokenIDs]
  -[CHCandidateRefinementStep shouldKeepOutOfPatternCandidates]
  -[CHCandidateRefinementStep initWithRecognizer:shouldKeepOutOfPatternCandidates:shouldKeepDuplicateTokenIDs:]
  -[CHCandidateRefinementStep setShouldKeepOutOfPatternCandidates:]
  -[CHCandidateRefinementStep setShouldKeepDuplicateTokenIDs:]
  -[CHCandidateRefinementStep shouldKeepOriginalSpelling]
  -[CHCandidateRefinementStep setShouldKeepOriginalSpelling:]


CHRemoveSpacesFromStrongURLsAndEmailsStep : CHPostprocessingStep
 @property  CHPatternNetwork *patternFST

  // instance methods
  -[CHRemoveSpacesFromStrongURLsAndEmailsStep dealloc]
  -[CHRemoveSpacesFromStrongURLsAndEmailsStep process:]
  -[CHRemoveSpacesFromStrongURLsAndEmailsStep patternFST]
  -[CHRemoveSpacesFromStrongURLsAndEmailsStep setPatternFST:]
  -[CHRemoveSpacesFromStrongURLsAndEmailsStep initWithPatternFst:]


CHRemoveSpacesFromSpecialFieldsStep : CHPostprocessingStep
 @property  CHPatternNetwork *patternFST
 @property  long long patternType
 @property  BOOL capitalizationToSplit
 @property  BOOL convertToLowercase

  // instance methods
  -[CHRemoveSpacesFromSpecialFieldsStep dealloc]
  -[CHRemoveSpacesFromSpecialFieldsStep patternType]
  -[CHRemoveSpacesFromSpecialFieldsStep setPatternType:]
  -[CHRemoveSpacesFromSpecialFieldsStep process:]
  -[CHRemoveSpacesFromSpecialFieldsStep patternFST]
  -[CHRemoveSpacesFromSpecialFieldsStep setPatternFST:]
  -[CHRemoveSpacesFromSpecialFieldsStep initWithPatternFst:patternType:capitalizationToSplit:convertToLowercase:]
  -[CHRemoveSpacesFromSpecialFieldsStep capitalizationToSplit]
  -[CHRemoveSpacesFromSpecialFieldsStep setCapitalizationToSplit:]
  -[CHRemoveSpacesFromSpecialFieldsStep convertToLowercase]
  -[CHRemoveSpacesFromSpecialFieldsStep setConvertToLowercase:]


CHTransliterateChineseStep : CHPostprocessingStep
 @property  ^^v icuTransliterator

  // instance methods
  -[CHTransliterateChineseStep init]
  -[CHTransliterateChineseStep dealloc]
  -[CHTransliterateChineseStep process:]
  -[CHTransliterateChineseStep icuTransliterator]
  -[CHTransliterateChineseStep setIcuTransliterator:]


CHReorderSCTCConfusionStep : CHPostprocessingStep
 @property  ^^v icuTransliterator
 @property  CHRecognizer *recognizer

  // instance methods
  -[CHReorderSCTCConfusionStep dealloc]
  -[CHReorderSCTCConfusionStep process:]
  -[CHReorderSCTCConfusionStep recognizer]
  -[CHReorderSCTCConfusionStep setRecognizer:]
  -[CHReorderSCTCConfusionStep icuTransliterator]
  -[CHReorderSCTCConfusionStep setIcuTransliterator:]
  -[CHReorderSCTCConfusionStep initWithRecognizer:]


CHMultiWordOVSFilteringStep : CHPostprocessingStep
 @property  CHRecognizer *recognizer

  // instance methods
  -[CHMultiWordOVSFilteringStep process:]
  -[CHMultiWordOVSFilteringStep recognizer]
  -[CHMultiWordOVSFilteringStep setRecognizer:]
  -[CHMultiWordOVSFilteringStep initWithRecognizer:]


CHNumberFieldResultReorderingStep : CHPostprocessingStep
 @property  NSCharacterSet *allowedCharacters
 @property  NSDictionary *characterReplacements

  // class methods
  +[CHNumberFieldResultReorderingStep tokenRowAsString:]

  // instance methods
  -[CHNumberFieldResultReorderingStep dealloc]
  -[CHNumberFieldResultReorderingStep allowedCharacters]
  -[CHNumberFieldResultReorderingStep setAllowedCharacters:]
  -[CHNumberFieldResultReorderingStep process:]
  -[CHNumberFieldResultReorderingStep initForPhoneNumberFields]
  -[CHNumberFieldResultReorderingStep initForDigitFields]
  -[CHNumberFieldResultReorderingStep countUnallowedCharactersInString:]
  -[CHNumberFieldResultReorderingStep compareStringForPhoneNumberCompatibility:with:]
  -[CHNumberFieldResultReorderingStep characterReplacements]
  -[CHNumberFieldResultReorderingStep setCharacterReplacements:]


CHMergeColumnsNoWhiteSpaceStep : CHPostprocessingStep
  // instance methods
  -[CHMergeColumnsNoWhiteSpaceStep process:]


(CoreHandwriting)
	// instance methods
	-[(CoreHandwriting) ch_occurrencesOfCharactersInSet:maxCount:]

(CHExtensions)
	// instance methods
	-[(CHExtensions) ch_descriptionWithSeparator:filterBlock:]
	-[(CHExtensions) ch_mappedArrayWithBlock:]

NSCharacterSet(CHExtensions)
	// class methods
	+[NSCharacterSet(CHExtensions) ch_sentenceEndPunctuationCharacterSet]

01 00 0200 /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader: AppleSpell 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPActivationMatrix 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPCTCTextDecoder 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPDecodingLanguageModel 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPDecodingLexicon 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPDecodingLexicons 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPLanguageResourceBundle 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPTextDecodingBeamSearchConfiguration 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPTextDecodingConfiguration 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPTextDecodingContext 
01 00 0b00 /System/Library/PrivateFrameworks/CVNLP.framework/CVNLP: CVNLPTextDecodingPath 
01 00 0700 /System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore: DDScannerService 
01 00 0700 /System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore: DDScannerServiceConfiguration 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLDictionaryFeatureProvider 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLModel 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLModelConfiguration 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLMultiArray 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLPredictionOptions 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1300 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOrthography 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProgress 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0e00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0200 /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader: PRErrorModel 
