|| __DATA.__data _CHRecognitionOptionFrameContext
|| __DATA.__data _CHRecognitionOptionPrecedingSpaceBehavior
|| __DATA.__data _CHRecognitionOptionShouldPreserveCaseVariantCandidates
|| __DATA.__data _CHRecognitionOptionShouldRefineCandidates
|| __DATA.__data _CHRecognitionOptionTextBefore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHNonTextCandidateStroke._support
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHNonTextCandidateStroke._supportByStrokeIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._tokenColumns
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._transcriptionPathScores
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResult._transcriptionPaths
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultColumn._tokenRows
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._combinedScore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._properties
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._recognitionScore
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._string
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._strokeIndexes
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._substrokeCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_CHTokenizedTextResultToken._wordID
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHBottomUpStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHBoxcarFilterPointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHDrawing
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHIndexableContentQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHMutableTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHNonTextCandidateStroke
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHPointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHPointStrokeFIFO
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHQuadCurvePointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionInsight
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionInsightRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionSessionIndexableContent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognitionSessionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHRemoteRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHSearchQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHSearchQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClassificationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeClutterFilter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHStrokeUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTitleQuery
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHTokenizedTextResultToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_CHVisualizationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHBottomUpStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHBoxcarFilterPointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHDrawing
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHIndexableContentQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHMutableTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHNonTextCandidateStroke
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHPointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHPointStrokeFIFO
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHQuadCurvePointFIFO
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionInsight
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionInsightRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionSessionIndexableContent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognitionSessionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHRemoteRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHSearchQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHSearchQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClassificationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClassifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeClutterFilter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupQueryItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupRecognitionResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeGroupingStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHStrokeUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTitleQuery
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResultColumn
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHTokenizedTextResultToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_CHVisualizationManager
__ Accelerate: _cblas_daxpy
__ Accelerate: _cblas_ddot
__ Accelerate: _cblas_dgemm
__ Accelerate: _dgeev_
__ Accelerate: _dgetrf_
__ Accelerate: _dgetri_
__ CoreFoundation: _CFBundleCopyResourceURL
__ CoreFoundation: _CFBundleGetBundleWithIdentifier
__ CoreFoundation: _CFBurstTrieContains
__ CoreFoundation: _CFBurstTrieCreateFromFile
__ CoreFoundation: _CFBurstTrieRelease
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFURLGetFileSystemRepresentation
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: _kCFAllocatorDefault
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGColorCreate
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGContextAddPath
__ CoreGraphics: _CGContextFillEllipseInRect
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextRestoreGState
__ CoreGraphics: _CGContextSaveGState
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetAlpha
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetLineCap
__ CoreGraphics: _CGContextSetLineDash
__ CoreGraphics: _CGContextSetLineJoin
__ CoreGraphics: _CGContextSetLineWidth
__ CoreGraphics: _CGContextSetStrokeColorWithColor
__ CoreGraphics: _CGContextStrokePath
__ CoreGraphics: _CGContextStrokeRect
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPathAddLineToPoint
__ CoreGraphics: _CGPathAddQuadCurveToPoint
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGPathCreateWithRect
__ CoreGraphics: _CGPathIsEmpty
__ CoreGraphics: _CGPathMoveToPoint
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPathRetain
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreML: _OBJC_CLASS_$_MLDictionaryFeatureProvider
__ CoreML: _OBJC_CLASS_$_MLModel
__ CoreML: _OBJC_CLASS_$_MLModelConfiguration
__ CoreML: _OBJC_CLASS_$_MLMultiArray
__ CoreML: _OBJC_CLASS_$_MLPredictionOptions
__ CrashReporterSupport: _DiagnosticLogSubmissionEnabled
__ Foundation: _NSLinguisticTagPunctuation
__ Foundation: _NSLinguisticTagSchemeLexicalClass
__ Foundation: _NSLinguisticTagSentenceTerminator
__ Foundation: _NSLinguisticTagWhitespace
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromSelector
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableCharacterSet
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOrthography
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ LanguageModeling: _LMLanguageModelAddTransientVocabulary
__ LanguageModeling: _LMLanguageModelConditionalProbability
__ LanguageModeling: _LMLanguageModelConditionalProbabilityVector
__ LanguageModeling: _LMLanguageModelCreate
__ LanguageModeling: _LMLanguageModelEnumeratePredictionsWithBlock
__ LanguageModeling: _LMLanguageModelGetTokenIDForString
__ LanguageModeling: _LMLanguageModelRelease
__ LanguageModeling: _LMLexiconCreate
__ LanguageModeling: _LMLexiconCursorFirstTokenID
__ LanguageModeling: _LMLexiconCursorGetTraversedCharacters
__ LanguageModeling: _LMLexiconCursorHasChildren
__ LanguageModeling: _LMLexiconCursorHasEntries
__ LanguageModeling: _LMLexiconCursorHash
__ LanguageModeling: _LMLexiconCursorTraversedLength
__ LanguageModeling: _LMLexiconGetCursorByAdvancingWithCharacters
__ LanguageModeling: _LMLexiconGetFirstTokenIDForString
__ LanguageModeling: _LMLexiconGetRootCursor
__ LanguageModeling: _LMLexiconRelease
__ LanguageModeling: _LMLexiconResetCursors
__ LanguageModeling: _LMStreamTokenizerCreate
__ LanguageModeling: _LMStreamTokenizerPushBytes
__ LanguageModeling: _LMStreamTokenizerRelease
__ LanguageModeling: _LMVocabularyGetTokenIDForLemma
__ LanguageModeling: _kLMLanguageModelAdaptationEnabledKey
__ LanguageModeling: _kLMLanguageModelBundleNameKey
__ LanguageModeling: _kLMLanguageModelCustomResourceDirectoryKey
__ LanguageModeling: _kLMLanguageModelCustomWordsKey
__ LanguageModeling: _kLMLanguageModelLocaleKey
__ LanguageModeling: _kLMLanguageModelMontrealFullCacheSize
__ LanguageModeling: _kLMLanguageModelUseMontrealKey
__ Lexicon: _LXCursorConditionalProbability
__ Lexicon: _LXCursorCreateByAdvancing
__ Lexicon: _LXCursorCreateByAdvancingWithUTF8
__ Lexicon: _LXCursorHasChildren
__ Lexicon: _LXCursorHasEntries
__ Lexicon: _LXCursorIsRoot
__ Lexicon: _LXCursorTerminationProbability
__ Lexicon: _LXEntryCopyString
__ Lexicon: _LXEntryGetMetaFlags
__ Lexicon: _LXEntryGetPartialProbability
__ Lexicon: _LXEntryGetTokenID
__ Lexicon: _LXLexiconCreate
__ Lexicon: _LXLexiconCreateMutable
__ Lexicon: _LXLexiconCreateRootCursor
__ Lexicon: _LXLexiconEnumerateEntriesForString
__ Lexicon: _kLXLexiconLocaleKey
__ Lexicon: _kLXLexiconNameKey
__ LinguisticData: _LDEnumerateAssetDataItems
__ LinguisticData: _kLDAssetTypeCharacterLanguageModel
__ Montreal: _MRLNeuralNetworkClear
__ Montreal: _MRLNeuralNetworkCreate
__ Montreal: _MRLNeuralNetworkGetOutput
__ Montreal: _MRLNeuralNetworkPredict
__ Montreal: _MRLNeuralNetworkSetInput
__ Montreal: _kMRLNeuralNetworkOptionModelURLKey
__ ProofReader: _OBJC_CLASS_$_AppleSpell
__ ProofReader: _OBJC_CLASS_$_PRErrorModel
__ ProofReader: _OBJC_METACLASS_$_PRErrorModel
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___cxa_atexit
__ libSystem.B.dylib: ___isinfd
__ libSystem.B.dylib: ___isnand
__ libSystem.B.dylib: ___isnanf
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___sincosf_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _acosf
__ libSystem.B.dylib: _atan
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _atan2f
__ libSystem.B.dylib: _atanf
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _cbrt
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _cos
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_group_async
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fclose
__ libSystem.B.dylib: _feof
__ libSystem.B.dylib: _fgets
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _fmodf
__ libSystem.B.dylib: _fopen
__ libSystem.B.dylib: _fprintf
__ libSystem.B.dylib: _fread
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _fstat
__ libSystem.B.dylib: _fwrite
__ libSystem.B.dylib: _log10
__ libSystem.B.dylib: _log10f
__ libSystem.B.dylib: _madvise
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memchr
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _memset_pattern16
__ libSystem.B.dylib: _mmap
__ libSystem.B.dylib: _munmap
__ libSystem.B.dylib: _open
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _setxattr
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _snprintf
__ libSystem.B.dylib: _sprintf
__ libSystem.B.dylib: _sscanf
__ libSystem.B.dylib: _strdup
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strtok
__ libSystem.B.dylib: _strtok_r
__ libSystem.B.dylib: dyld_stub_binder
__ libc++.1.dylib: __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv
__ libc++.1.dylib: __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
__ libc++.1.dylib: __ZNKSt3__16locale9use_facetERNS0_2idE
__ libc++.1.dylib: __ZNKSt3__18ios_base6getlocEv
__ libc++.1.dylib: __ZNSt11logic_errorC1EPKc
__ libc++.1.dylib: __ZNSt11logic_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt11logic_errorC2EPKc
__ libc++.1.dylib: __ZNSt11logic_errorD1Ev
__ libc++.1.dylib: __ZNSt12length_errorD1Ev
__ libc++.1.dylib: __ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt13runtime_errorD1Ev
__ libc++.1.dylib: __ZNSt3__112__next_primeEm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_mmRKS4_
__ libc++.1.dylib: __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERd
__ libc++.1.dylib: __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERm
__ libc++.1.dylib: __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__113random_deviceC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
__ libc++.1.dylib: __ZNSt3__113random_deviceD1Ev
__ libc++.1.dylib: __ZNSt3__113random_deviceclEv
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev
__ libc++.1.dylib: __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__15ctypeIcE2idE
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIddEEPdEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIffEEPfEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_
__ libc++.1.dylib: __ZNSt3__16localeD1Ev
__ libc++.1.dylib: __ZNSt3__18ios_base4initEPv
__ libc++.1.dylib: __ZNSt3__18ios_base5clearEj
__ libc++.1.dylib: __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev
__ libc++.1.dylib: __ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_
__ libc++.1.dylib: __ZSt9terminatev
__ libc++.1.dylib: __ZTINSt3__113basic_istreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__113basic_ostreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTINSt3__115basic_streambufIcNS_11char_traitsIcEEEE
__ libc++.1.dylib: __ZTISt11logic_error
__ libc++.1.dylib: __ZTISt12length_error
__ libc++.1.dylib: __ZTISt13runtime_error
__ libc++.1.dylib: __ZTVN10__cxxabiv117__class_type_infoE
__ libc++.1.dylib: __ZTVN10__cxxabiv120__si_class_type_infoE
__ libc++.1.dylib: __ZTVSt12length_error
__ libc++.1.dylib: __ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
__ libc++.1.dylib: __ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
__ libc++.1.dylib: __ZdaPv
__ libc++.1.dylib: __ZdlPv
__ libc++.1.dylib: __Znam
__ libc++.1.dylib: __Znwm
__ libc++.1.dylib: ___cxa_allocate_exception
__ libc++.1.dylib: ___cxa_begin_catch
__ libc++.1.dylib: ___cxa_end_catch
__ libc++.1.dylib: ___cxa_free_exception
__ libc++.1.dylib: ___cxa_guard_abort
__ libc++.1.dylib: ___cxa_guard_acquire
__ libc++.1.dylib: ___cxa_guard_release
__ libc++.1.dylib: ___cxa_rethrow
__ libc++.1.dylib: ___cxa_throw
__ libc++.1.dylib: ___dynamic_cast
__ libc++.1.dylib: ___gxx_personality_v0
__ libicucore.A.dylib: _utrans_close
__ libicucore.A.dylib: _utrans_openU
__ libicucore.A.dylib: _utrans_transUChars
__ libmecabra.dylib: _MecabraAcceptCandidate
__ libmecabra.dylib: _MecabraCandidateGetSurface
__ libmecabra.dylib: _MecabraCandidateIsPredictionCandidate
__ libmecabra.dylib: _MecabraCreateHandwritingCandidate
__ libmecabra.dylib: _MecabraCreateWithOptions
__ libmecabra.dylib: _MecabraPredictionAcceptCandidate
__ libmecabra.dylib: _MecabraPredictionAnalyze
__ libmecabra.dylib: _MecabraPredictionGetNextCandidate
__ libmecabra.dylib: _MecabraRelease
__ libmecabra.dylib: _MecabraSetAddressBookNamePhoneticPairs
__ libmecabra.dylib: _MecabraSetAssetDataItemsForType
__ libmecabra.dylib: _MecabraSetUserWordKeyPairs
__ libmecabra.dylib: _MecabraWorkingSetAddString
__ libmecabra.dylib: _MecabraWorkingSetContainsString
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
CHClassifiableDrawing : NSObject
 @property  CHDrawing *drawing
 @property  NSCharacterSet *characterSet
 @property  BOOL expandCodePoints
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} normalizationContext
 @property  BOOL firstPointIsSubstrokeCut
 @property  BOOL lastPointIsSubstrokeCut
 @property  unsigned long maxCandidateCount

  // instance methods
  -[CHClassifiableDrawing dealloc]
  -[CHClassifiableDrawing characterSet]
  -[CHClassifiableDrawing drawing]
  -[CHClassifiableDrawing initWithDrawing:characterSet:expandCodePoints:normalizationContext:firstPointIsSubstrokeCut:lastPointIsSubstrokeCut:maxCandidateCount:]
  -[CHClassifiableDrawing expandCodePoints]
  -[CHClassifiableDrawing normalizationContext]
  -[CHClassifiableDrawing firstPointIsSubstrokeCut]
  -[CHClassifiableDrawing lastPointIsSubstrokeCut]
  -[CHClassifiableDrawing maxCandidateCount]


CHStrokeGroupQuery : CHQuery
 @property  NSArray *strokeGroupItems
 @property  NSDictionary *strokeGroupItemsByID

  // instance methods
  -[CHStrokeGroupQuery dealloc]
  -[CHStrokeGroupQuery debugName]
  -[CHStrokeGroupQuery q_updateQueryResult]
  -[CHStrokeGroupQuery q_strokeGroupItemsFromSessionResult:]
  -[CHStrokeGroupQuery _setStrokeGroupItems:]
  -[CHStrokeGroupQuery q_itemTypeForStrokeGroup:recognitionResult:]
  -[CHStrokeGroupQuery strokeGroupItems]
  -[CHStrokeGroupQuery strokeGroupItemsByID]
  -[CHStrokeGroupQuery _setStrokeGroupItemsByID:]


CHStrokeGroupQueryItem : NSObject
 @property  NSDictionary *_tokenizedTextResultsByLocale
 @property  NSDictionary *_errorsByLocale
 @property  NSNumber *strokeGroupIdentifier
 @property  NSNumber *strokeGroupStableIdentifier
 @property  NSArray *strokeIdentifiers
 @property  long long strokeGroupType
 @property  NSLocale *preferredLocale

  // class methods
  +[CHStrokeGroupQueryItem descriptionForStrokeGroupQueryItemType:]

  // instance methods
  -[CHStrokeGroupQueryItem dealloc]
  -[CHStrokeGroupQueryItem preferredLocale]
  -[CHStrokeGroupQueryItem strokeIdentifiers]
  -[CHStrokeGroupQueryItem initWithStrokeGroupIdentifier:stableIdentifier:strokeIdentifiers:type:preferredLocale:tokenizedTextResultsByLocale:errorsByLocale:]
  -[CHStrokeGroupQueryItem strokeGroupIdentifier]
  -[CHStrokeGroupQueryItem _tokenizedTextResultsByLocale]
  -[CHStrokeGroupQueryItem _errorsByLocale]
  -[CHStrokeGroupQueryItem textRecognitionResultForLocale:error:]
  -[CHStrokeGroupQueryItem strokeGroupStableIdentifier]
  -[CHStrokeGroupQueryItem strokeGroupType]


CHStrokeGroupingStrategy : NSObject
 @property  <CHStrokeProvider> *strokeProvider
 @property  NSString *strategyIdentifier

  // instance methods
  -[CHStrokeGroupingStrategy dealloc]
  -[CHStrokeGroupingStrategy strokeProvider]
  -[CHStrokeGroupingStrategy getFirstStrokeIdentifier:lastStrokeIdentifier:inGroup:addingStrokeIdentifiers:removingStrokeIdentifiers:]
  -[CHStrokeGroupingStrategy initWithStrokeProvider:]
  -[CHStrokeGroupingStrategy strategyIdentifier]
  -[CHStrokeGroupingStrategy strokesForIdentifiers:]
  -[CHStrokeGroupingStrategy strokeGroupFromGroup:addingStrokes:]
  -[CHStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]


CHTokenizedTextResultToken : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  double recognitionScore
 @property  double combinedScore
 @property  unsigned long properties
 @property  long long substrokeCount
 @property  unsigned int wordID
 @property  NSString *string
 @property  NSIndexSet *strokeIndexes

  // class methods
  +[CHTokenizedTextResultToken supportsSecureCoding]
  +[CHTokenizedTextResultToken tokenWithString:strokeIndexes:wordID:recognitionScore:combinedScore:properties:substrokeCount:]

  // instance methods
  -[CHTokenizedTextResultToken init]
  -[CHTokenizedTextResultToken string]
  -[CHTokenizedTextResultToken dealloc]
  -[CHTokenizedTextResultToken isEqual:]
  -[CHTokenizedTextResultToken copyWithZone:]
  -[CHTokenizedTextResultToken mutableCopyWithZone:]
  -[CHTokenizedTextResultToken encodeWithCoder:]
  -[CHTokenizedTextResultToken initWithCoder:]
  -[CHTokenizedTextResultToken properties]
  -[CHTokenizedTextResultToken wordID]
  -[CHTokenizedTextResultToken combinedScore]
  -[CHTokenizedTextResultToken initWithString:strokeIndexes:wordID:recognitionScore:combinedScore:properties:substrokeCount:]
  -[CHTokenizedTextResultToken strokeIndexes]
  -[CHTokenizedTextResultToken substrokeCount]
  -[CHTokenizedTextResultToken recognitionScore]
  -[CHTokenizedTextResultToken isEqualToTokenizedTextResultToken:]
  -[CHTokenizedTextResultToken isEquivalentToToken:]


CHMutableTokenizedTextResultToken : CHTokenizedTextResultToken
 @property  NSString *string
 @property  NSIndexSet *strokeIndexes
 @property  unsigned int wordID
 @property  double recognitionScore
 @property  double combinedScore
 @property  unsigned long properties
 @property  long long substrokeCount

  // instance methods
  -[CHMutableTokenizedTextResultToken copyWithZone:]
  -[CHMutableTokenizedTextResultToken setString:]
  -[CHMutableTokenizedTextResultToken setProperties:]
  -[CHMutableTokenizedTextResultToken setWordID:]
  -[CHMutableTokenizedTextResultToken setCombinedScore:]
  -[CHMutableTokenizedTextResultToken setStrokeIndexes:]
  -[CHMutableTokenizedTextResultToken setRecognitionScore:]
  -[CHMutableTokenizedTextResultToken setSubstrokeCount:]


CHRecognizer : NSObject <CHRecognizing>
 @property  CHRecognitionInsight *recordedInsightFromLastRequest
 @property  ^{CHNeuralNetwork=^?B*Q^IIIIII@@{CGRect={CGPoint=dd}{CGSize=dd}}} engine
 @property  ^{CHNeuralNetwork=^?B*Q^IIIIII@@{CGRect={CGPoint=dd}{CGSize=dd}}} freeformEngine
 @property  CHStrokeTransitionModel *strokeTransitionModel
 @property  CHCutpointModel *cutpointModel
 @property  NSObject<OS_dispatch_queue> *recognitionQueue
 @property  ^{Network={basic_string<char radicalClusterFST
 @property  ^{Network={basic_string<char formatGrammarFST
 @property  CHPatternNetwork *patternFST
 @property  CHRecognizerConfiguration *configuration
 @property  ^v languageModel
 @property  ^v lmVocabulary
 @property  ^v characterLanguageModel
 @property  ^{__Mecabra=} mecabra
 @property  ^v cjkStaticLexicon
 @property  ^v cjkDynamicLexicon
 @property  ^{_LXLexicon=} staticLexicon
 @property  ^{_LXLexicon=} customLexicon
 @property  NSDictionary *textReplacements
 @property  NSMutableDictionary *textReplacementLowercasedKeyMapping
 @property  CHSpellChecker *spellChecker
 @property  ^{_CFBurstTrie=} ovsTrie
 @property  NSURL *learningDictionaryURL
 @property  CHDrawing *savedDrawing
 @property  NSString *savedTop1CandidateString
 @property  BOOL saveDrawingUntilNextCandidateAccepted
 @property  CHDrawing *cachedDrawing
 @property  {map<std::__1::set<long cachedResults
 @property  {map<unsigned int characterIDMap
 @property  ^{VariantMap=^i^i^ii^iQ} transliterationVariantMap
 @property  ^^v icuTransliterator
 @property  unsigned long lastCharacterSegmentCount
 @property  NSMutableIndexSet *lastCharacterSegmentIndexes
 @property  int recognitionMode
 @property  NSLocale *locale
 @property  int recognitionType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int contentType
 @property  unsigned long maxRecognitionResultCount
 @property  NSCharacterSet *activeCharacterSet
 @property  {CGSize=dd} minimumDrawingSize
 @property  BOOL shouldEnableCachingIfAvailable

  // class methods
  +[CHRecognizer _isLocaleSupported:withMode:]
  +[CHRecognizer _encodeTempDelayedSegmentID:]
  +[CHRecognizer _computeEditPenalizationFromString:toReferenceString:withSuffix:withCaseSensitivity:withFirstLetterCaseSensitivity:withDiacriticSensitivity:withDiacriticsCharSet:withConsumableStrokesCharSet:outputSuffix:lexiconExtraCharacters:firstLetterCaseFlipped:]
  +[CHRecognizer _decodeTempDelayedSegmentID:]

  // instance methods
  -[CHRecognizer dealloc]
  -[CHRecognizer setLocale:]
  -[CHRecognizer .cxx_destruct]
  -[CHRecognizer locale]
  -[CHRecognizer engine]
  -[CHRecognizer contentType]
  -[CHRecognizer setContentType:]
  -[CHRecognizer .cxx_construct]
  -[CHRecognizer configuration]
  -[CHRecognizer setEngine:]
  -[CHRecognizer _setConfiguration:]
  -[CHRecognizer spellChecker]
  -[CHRecognizer setSpellChecker:]
  -[CHRecognizer initWithType:mode:]
  -[CHRecognizer supportedStrings]
  -[CHRecognizer characterSetForStrings:]
  -[CHRecognizer setActiveCharacterSet:]
  -[CHRecognizer recognitionResultsForDrawing:options:]
  -[CHRecognizer obfuscateString:]
  -[CHRecognizer cachedResults]
  -[CHRecognizer setCachedResults:]
  -[CHRecognizer recognitionQueue]
  -[CHRecognizer setRecognitionQueue:]
  -[CHRecognizer mecabra]
  -[CHRecognizer updateMecabraWithRegionalOTAAssets:nonRegionalOTAAssets:]
  -[CHRecognizer _isLocaleSupported:]
  -[CHRecognizer initWithMode:locale:learningDictionaryURL:]
  -[CHRecognizer _reloadEngineAndResources]
  -[CHRecognizer initWithType:mode:locale:learningDictionaryURL:]
  -[CHRecognizer _defaultPunctuationStringsOutputScores:maxCandidateCount:]
  -[CHRecognizer _isInappropriateString:]
  -[CHRecognizer _isInappropriateLexiconEntry:]
  -[CHRecognizer _isInappropriateString:withLexicon:]
  -[CHRecognizer _isInappropriateString:withTrie:]
  -[CHRecognizer _transliterationVariantsForString:]
  -[CHRecognizer _alternativeInterpretationsForString:]
  -[CHRecognizer _unloadEngineAndResources]
  -[CHRecognizer whitelistMecabraRareCharacters]
  -[CHRecognizer _loadMecabraIfNeeded]
  -[CHRecognizer logCandidateIfAppropriate:]
  -[CHRecognizer initWithType:mode:locale:]
  -[CHRecognizer sketchDescriptionForCode:]
  -[CHRecognizer sketchCodeForDescription:]
  -[CHRecognizer manhattanLineCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer _effectiveMaxRecognitionResultCount]
  -[CHRecognizer chatBubbleCandidateResultForDrawing:candidate:]
  -[CHRecognizer ellipseCandidateResultForDrawing:candidate:]
  -[CHRecognizer rectangleCandidateResultForDrawing:candidate:]
  -[CHRecognizer triangleCandidateResultForDrawing:candidate:]
  -[CHRecognizer starCandidateResultForDrawing:candidate:]
  -[CHRecognizer lineCandidateResultForDrawing:candidate:rejectionResult:]
  -[CHRecognizer pentagonCandidateResultForDrawing:candidate:]
  -[CHRecognizer outlineArrowCandidateResultForDrawing:candidate:]
  -[CHRecognizer _initialContextRectFromRecognizerOptions:]
  -[CHRecognizer _refineChineseCharacterCandidates:drawing:]
  -[CHRecognizer _rescoreCandidatesWithLanguageModel:history:]
  -[CHRecognizer _applyTransliterationAndSyntheticCandidates:]
  -[CHRecognizer isRareChineseEntry:]
  -[CHRecognizer _resolvedStrokeIndexes:segmentGroup:segmentOffset:substrokeCount:]
  -[CHRecognizer mecabraRareWordIndexes:wordRanges:]
  -[CHRecognizer _textReplacementResultForLegacyRecognitionResult:]
  -[CHRecognizer _removeOVSResults:withHistory:]
  -[CHRecognizer _calculateJointWordLMScoreForString:wordRanges:wordIDs:patternEntries:history:historyLength:]
  -[CHRecognizer _tokensUsingLMTokenizerForString:wordRanges:nonWordPatterns:outTokenIDs:]
  -[CHRecognizer normalizeLMTokenIDForWord:withTokenID:isFromPattern:outScore:]
  -[CHRecognizer tokenizedTextResultForRomanLatticePaths:history:activeHistoryRange:isMultiWordsPath:isNoSpacePath:maximumPathCount:startNode:segmentGroup:precedingSpaceBehavior:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer tokenizedTextResultForChineseLatticePaths:maximumPathCount:network:mecabraIDs:startNode:endNode:segmentGroup:]
  -[CHRecognizer tokenizedTextResultForRomanNoSpaceLatticePaths:maximumResultCount:activeHistoryRange:precedingSpaceBehavior:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer tokenizedTextResultForRomanMultiWordsLatticePaths:maximumResultCount:history:activeHistoryRange:startNode:segmentGroup:precedingSpaceBehavior:]
  -[CHRecognizer tokenizedTextResultForRomanSingleWordLatticePaths:history:activeHistoryRange:startNode:segmentGroup:]
  -[CHRecognizer _lexiconCorrectionsForToken:withLexicon:textReplacements:consumableStrokesSet:minimumTokenScore:activeHistoryRange:outBestTokenScore:shouldCapitalizeWord:]
  -[CHRecognizer _applySentenceTransliterationCandidates:codesLen:codesMax:]
  -[CHRecognizer _tokenizedTextResultFromResults:segmentGroup:offsetSegment:decodedStrokeSets:spaceBehavior:]
  -[CHRecognizer _spellCheckerCorrectionsForToken:]
  -[CHRecognizer _shouldCapitalizeGivenHistory:]
  -[CHRecognizer _updateResults:string:score:recognitionScore:lexicalEntry:patternEntry:isInappropriateWord:wordID:wordStrokeSet:]
  -[CHRecognizer _filterNonHumanFriendlyCandidates:]
  -[CHRecognizer _adjustResultsForConfusableCharacters:]
  -[CHRecognizer setCachedDrawing:]
  -[CHRecognizer _historyStringFromRecognizerOptions:]
  -[CHRecognizer _precedingSpaceBehaviorFromRecognizerOptions:]
  -[CHRecognizer recognitionResultsForSingleCharacterDrawing:segmentGroup:options:history:]
  -[CHRecognizer _cachingWithMatchingStrokeRange:drawing:]
  -[CHRecognizer _sortedIndexesForSegmentGroup:drawing:]
  -[CHRecognizer _candidateNetworkFromSegmentationNetwork:segmentGroup:drawing:boundsAtNode:matchingStrokeRange:sortedSegmentIndexes:shouldCancel:]
  -[CHRecognizer _textResultWithNetworkComposeFromCandidateNetwork:segmentGroup:drawing:maxRecognitionResultCount:history:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer _textResultWithLexiconExpansionFromCandidateNetwork:history:prefix:activeHistoryRange:rootStaticCursor:rootCustomCursor:rootPatternCursor:segmentGroup:maxRecognitionResultCount:precedingSpaceBehavior:shouldPerformNoSpaceRecognition:inLatticePaths:outLatticePaths:totalStrokeCount:totalSubstrokeCount:shouldCancel:]
  -[CHRecognizer _calculateBestTranscriptionPaths:scores:fromTokenizedResult:pathCount:history:skipLMRescoring:]
  -[CHRecognizer _addAlternativeCandidatesForTokenizedResult:]
  -[CHRecognizer _contextTokenIDsFromHistory:maxCharacterLength:maxTokenCount:]
  -[CHRecognizer _createNetworkTruncatedPrefixStringUsingPrefix:fullHistoryStringLength:hasLexiconCursor:prefixStringLength:hasComplexChars:activeHistoryRange:]
  -[CHRecognizer _mininmumPathCount]
  -[CHRecognizer bestPathsFromNetwork:pathCount:staticLexiconCursor:customLexiconCursor:patternCursor:history:activeHistoryRange:mecabraIDs:segmentGroup:precedingSpaceBehavior:effectiveContentType:shouldAllowSpaceInsertion:inLatticePaths:outLatticePaths:totalStrokeCount:totalSubstrokeCount:]
  -[CHRecognizer _adjustCandidatesForConfusableCharacters:]
  -[CHRecognizer _adjustCandidatesForChinesePunctuation:segmentDrawing:completeDrawing:]
  -[CHRecognizer _adjustCandidatesForRomanPunctuation:segmentDrawing:]
  -[CHRecognizer _addEdgesFromCandidates:toEdges:referenceEdge:network:consumedSegmentCount:delayedSegmentIDs:numSubstrokes:]
  -[CHRecognizer _candidateLatticePruningThresholdForEdgeType:]
  -[CHRecognizer _computeLocalFrameWithLeftBounds:rightBounds:delayedStrokeDrawingsLocalBounds:delayedStrokeDrawings:]
  -[CHRecognizer _classifyEdgeDrawingsFromContexts:allEdges:segmentationNetwork:candidateNetwork:cachedEdgeSet:completeDrawing:allowSmallerFinalBatch:shouldCancel:]
  -[CHRecognizer _stringForCode:]
  -[CHRecognizer _calculateJointWordLMScoreForTokenPath:tokenizedResult:history:historyLength:pathTranscription:]
  -[CHRecognizer _lmRescoringWeightForPath:]
  -[CHRecognizer _tokenFromLegacyResult:wordIndex:strokeSet:substrokeCount:]
  -[CHRecognizer strokeTransitionModel]
  -[CHRecognizer cutpointModel]
  -[CHRecognizer _correctedDelayedStrokeIDs:inDrawing:segmentationPoints:correctedSegmentationPoints:]
  -[CHRecognizer _segmentWordRangesForSegments:]
  -[CHRecognizer _recognitionResultsForMultipleCharacterDrawing:segmentGroups:options:shouldCancel:]
  -[CHRecognizer setSavedDrawing:]
  -[CHRecognizer setSavedTop1CandidateString:]
  -[CHRecognizer _setupRecognitionInsightRecording]
  -[CHRecognizer setSaveDrawingUntilNextCandidateAccepted:]
  -[CHRecognizer _shouldReturnDefaultResultsForDrawing:]
  -[CHRecognizer _defaultPunctuationResultWithStrokeCount:]
  -[CHRecognizer _tokenizedTextRecognitionResultForDrawing:options:shouldCancel:]
  -[CHRecognizer segmentationPointsForDrawing:]
  -[CHRecognizer _defaultLegacyPunctuationResultsWithStrokeCount:]
  -[CHRecognizer recognitionResultsForSketchDrawing:options:]
  -[CHRecognizer _legacyTextRecognitionResultsForDrawing:options:shouldCancel:]
  -[CHRecognizer recognitionResultsForDrawing:options:shouldCancel:]
  -[CHRecognizer _refineCandidates:withAllowedCandidateCodes:]
  -[CHRecognizer _penalizeCandidatesForRomanPunctuation:punctuationStrokeCount:]
  -[CHRecognizer _tokenIDForUNKCharacterString:]
  -[CHRecognizer shouldEnableCachingIfAvailable]
  -[CHRecognizer initWithMode:locale:]
  -[CHRecognizer recognitionMode]
  -[CHRecognizer maxRecognitionResultCount]
  -[CHRecognizer setMaxRecognitionResultCount:]
  -[CHRecognizer activeCharacterSet]
  -[CHRecognizer minimumDrawingSize]
  -[CHRecognizer setMinimumDrawingSize:]
  -[CHRecognizer setShouldEnableCachingIfAvailable:]
  -[CHRecognizer initWithType:mode:learningDictionaryURL:]
  -[CHRecognizer isOVSString:]
  -[CHRecognizer transliterationVariantsForString:]
  -[CHRecognizer updateAddressBookLexicon:]
  -[CHRecognizer updateUserDictionaryLexicon:]
  -[CHRecognizer setCustomLexicon:customVocabulary:]
  -[CHRecognizer setTextReplacements:]
  -[CHRecognizer candidatesCleared]
  -[CHRecognizer candidateAccepted:]
  -[CHRecognizer completionsForCandidate:prefix:option:]
  -[CHRecognizer completionsForCandidate:candidateContext:prefix:option:]
  -[CHRecognizer strokeIndexesForLastCharacter]
  -[CHRecognizer supportedCharacterSet]
  -[CHRecognizer endpointsForDrawing:startLocation:endLocation:]
  -[CHRecognizer bestTranscriptionPathsForTokenizedResult:scores:history:]
  -[CHRecognizer textRecognitionResultForDrawing:options:shouldCancel:]
  -[CHRecognizer setRecognitionType:]
  -[CHRecognizer setRecognitionMode:]
  -[CHRecognizer recognitionType]
  -[CHRecognizer freeformEngine]
  -[CHRecognizer setFreeformEngine:]
  -[CHRecognizer setStrokeTransitionModel:]
  -[CHRecognizer setCutpointModel:]
  -[CHRecognizer radicalClusterFST]
  -[CHRecognizer setRadicalClusterFST:]
  -[CHRecognizer formatGrammarFST]
  -[CHRecognizer setFormatGrammarFST:]
  -[CHRecognizer patternFST]
  -[CHRecognizer setPatternFST:]
  -[CHRecognizer languageModel]
  -[CHRecognizer setLanguageModel:]
  -[CHRecognizer lmVocabulary]
  -[CHRecognizer setLmVocabulary:]
  -[CHRecognizer characterLanguageModel]
  -[CHRecognizer setCharacterLanguageModel:]
  -[CHRecognizer setMecabra:]
  -[CHRecognizer cjkStaticLexicon]
  -[CHRecognizer setCjkStaticLexicon:]
  -[CHRecognizer cjkDynamicLexicon]
  -[CHRecognizer setCjkDynamicLexicon:]
  -[CHRecognizer staticLexicon]
  -[CHRecognizer setStaticLexicon:]
  -[CHRecognizer customLexicon]
  -[CHRecognizer setCustomLexicon:]
  -[CHRecognizer textReplacements]
  -[CHRecognizer textReplacementLowercasedKeyMapping]
  -[CHRecognizer setTextReplacementLowercasedKeyMapping:]
  -[CHRecognizer ovsTrie]
  -[CHRecognizer setOvsTrie:]
  -[CHRecognizer learningDictionaryURL]
  -[CHRecognizer setLearningDictionaryURL:]
  -[CHRecognizer savedDrawing]
  -[CHRecognizer savedTop1CandidateString]
  -[CHRecognizer saveDrawingUntilNextCandidateAccepted]
  -[CHRecognizer cachedDrawing]
  -[CHRecognizer characterIDMap]
  -[CHRecognizer setCharacterIDMap:]
  -[CHRecognizer transliterationVariantMap]
  -[CHRecognizer setTransliterationVariantMap:]
  -[CHRecognizer icuTransliterator]
  -[CHRecognizer setIcuTransliterator:]
  -[CHRecognizer lastCharacterSegmentCount]
  -[CHRecognizer setLastCharacterSegmentCount:]
  -[CHRecognizer lastCharacterSegmentIndexes]
  -[CHRecognizer setLastCharacterSegmentIndexes:]
  -[CHRecognizer recordInsightWithRequest:]
  -[CHRecognizer recordedInsightFromLastRequest]


CHDrawingContext : NSObject
 @property  unsigned long edgeIndex
 @property  long long numberOfSubstrokes
 @property  long long numberOfSegments
 @property  CHClassifiableDrawing *classifiableDrawing
 @property  {set<long strokeGroup
 @property  {vector<long delayedSegmentIDs

  // instance methods
  -[CHDrawingContext dealloc]
  -[CHDrawingContext .cxx_destruct]
  -[CHDrawingContext .cxx_construct]
  -[CHDrawingContext numberOfSegments]
  -[CHDrawingContext edgeIndex]
  -[CHDrawingContext classifiableDrawing]
  -[CHDrawingContext strokeGroup]
  -[CHDrawingContext delayedSegmentIDs]
  -[CHDrawingContext numberOfSubstrokes]
  -[CHDrawingContext initWithEdgeIndex:numberOfSubstrokes:numberOfSegments:classifiableDrawing:strokeGroup:delayedSegmentIDs:]


CHStrokeUtilities : NSObject
  // class methods
  +[CHStrokeUtilities convexHullForStrokes:inDrawing:]
  +[CHStrokeUtilities enlargedConvexHull:withMargin:]
  +[CHStrokeUtilities threePointsOrientationWithOrigin:pointA:pointB:]
  +[CHStrokeUtilities distanceFromPoint:toRectangle:]
  +[CHStrokeUtilities distanceFromPoint:toSegmentFromPoint:toPoint:]
  +[CHStrokeUtilities isPointEnumerationSupportedForStroke:]
  +[CHStrokeUtilities enumeratePointsForStroke:interpolationType:resolution:usingBlock:]
  +[CHStrokeUtilities convexHullForPoints:]
  +[CHStrokeUtilities getAddedStrokes:removedStrokeIdentifiers:inStrokeProvider:lastGroupingResult:]
  +[CHStrokeUtilities strokeForIdentifier:inStrokeProvider:]
  +[CHStrokeUtilities boundingBoxOfPoints:rotatedAroundPoint:byAngle:]
  +[CHStrokeUtilities unionStrokeBounds:usingStrokeCountLimit:reverseOrder:]
  +[CHStrokeUtilities unionStrokeBounds:aroundXPosition:usingOneSideStrokeCountLimit:]
  +[CHStrokeUtilities convexHullForStroke:]
  +[CHStrokeUtilities circumferenceRatioOfCircleFittedToPoints:circleCenter:circleRadius:]
  +[CHStrokeUtilities vectorMeanWithoutOutliers:]
  +[CHStrokeUtilities lineOrientationForStrokePoints:error:]


CHRecognitionInsightRequest : NSObject

CHRecognitionInsight : NSObject
 @property  CHRecognitionInsightRequest *insightRequest
 @property  NSLocale *recognizerLocale
 @property  int recognizerRecognitionMode
 @property  int recognizerContentType
 @property  NSCharacterSet *recognizerActiveCharacterSet
 @property  NSDictionary *recognizerOptions
 @property  unsigned long recognizerMaxRecognitionResultCount
 @property  {CGSize=dd} recognizerMinimumDrawingSize
 @property  CHDrawing *inputDrawing
 @property  NSArray *inputDrawingCutPoints
 @property  NSArray *spaceProbabilities
 @property  NSArray *charBoundaryProbabilities
 @property  NSArray *delayedStrokeProbabilities
 @property  CHTokenizedTextResult *textResult
 @property  NSError *recognitionError
 @property  NSString *recognizerRecognitionModeDescription
 @property  NSString *recognizerContentTypeDescription

  // instance methods
  -[CHRecognitionInsight dealloc]
  -[CHRecognitionInsight recognitionError]
  -[CHRecognitionInsight recordSpaceProbabilities:]
  -[CHRecognitionInsight recordCharBoundaryProbabilities:]
  -[CHRecognitionInsight recordDelayedStrokeProbabilities:]
  -[CHRecognitionInsight recordConfigurationForRecognizer:options:]
  -[CHRecognitionInsight recordInputDrawing:]
  -[CHRecognitionInsight recordInputDrawingCutPoints:]
  -[CHRecognitionInsight recordTextResult:recognitionError:]
  -[CHRecognitionInsight recordInsightRequest:]
  -[CHRecognitionInsight insightRequest]
  -[CHRecognitionInsight recognizerActiveCharacterSet]
  -[CHRecognitionInsight recognizerLocale]
  -[CHRecognitionInsight recognizerRecognitionModeDescription]
  -[CHRecognitionInsight recognizerContentTypeDescription]
  -[CHRecognitionInsight recognizerMaxRecognitionResultCount]
  -[CHRecognitionInsight recognizerMinimumDrawingSize]
  -[CHRecognitionInsight recognizerOptions]
  -[CHRecognitionInsight inputDrawing]
  -[CHRecognitionInsight inputDrawingCutPoints]
  -[CHRecognitionInsight spaceProbabilities]
  -[CHRecognitionInsight delayedStrokeProbabilities]
  -[CHRecognitionInsight charBoundaryProbabilities]
  -[CHRecognitionInsight textResult]
  -[CHRecognitionInsight recognizerRecognitionMode]
  -[CHRecognitionInsight recognizerContentType]
  -[CHRecognitionInsight setInsightRequest:]
  -[CHRecognitionInsight setRecognizerLocale:]
  -[CHRecognitionInsight setRecognizerRecognitionMode:]
  -[CHRecognitionInsight setRecognizerContentType:]
  -[CHRecognitionInsight setRecognizerActiveCharacterSet:]
  -[CHRecognitionInsight setRecognizerOptions:]
  -[CHRecognitionInsight setRecognizerMaxRecognitionResultCount:]
  -[CHRecognitionInsight setRecognizerMinimumDrawingSize:]
  -[CHRecognitionInsight setInputDrawing:]
  -[CHRecognitionInsight setInputDrawingCutPoints:]
  -[CHRecognitionInsight setSpaceProbabilities:]
  -[CHRecognitionInsight setCharBoundaryProbabilities:]
  -[CHRecognitionInsight setDelayedStrokeProbabilities:]
  -[CHRecognitionInsight setTextResult:]
  -[CHRecognitionInsight setRecognitionError:]


CHDrawing : NSObject <NSCopying, NSSecureCoding>
 @property  {CHDrawingStrokes={vector<std::__1::vector<double drawing

  // class methods
  +[CHDrawing supportsSecureCoding]

  // instance methods
  -[CHDrawing isEqual:]
  -[CHDrawing copyWithZone:]
  -[CHDrawing clear]
  -[CHDrawing encodeWithCoder:]
  -[CHDrawing initWithCoder:]
  -[CHDrawing initWithContentsOfFile:]
  -[CHDrawing .cxx_destruct]
  -[CHDrawing .cxx_construct]
  -[CHDrawing bounds]
  -[CHDrawing debugQuickLookObject]
  -[CHDrawing pointCount]
  -[CHDrawing addPoint:]
  -[CHDrawing endStroke]
  -[CHDrawing setLineHeight:]
  -[CHDrawing strokeCount]
  -[CHDrawing drawing]
  -[CHDrawing pointCountForStrokeIndex:]
  -[CHDrawing pointForStrokeIndex:pointIndex:]
  -[CHDrawing setDrawing:]
  -[CHDrawing xyRepresentation]
  -[CHDrawing bitmapRepresentationForSize:]
  -[CHDrawing orientationRepresentationForSampling:convolutionWidth:]
  -[CHDrawing strokeIndicesSortedByMinXCoordinate]
  -[CHDrawing sortedDrawingUsingMinXCoordinate]
  -[CHDrawing matchingStrokePrefixRangeForDrawing:]
  -[CHDrawing appendSegment:fromDrawing:]
  -[CHDrawing strokeBoundsAtIndex:]
  -[CHDrawing indexesOfStrokesSmallerThanSize:]
  -[CHDrawing isEqualToDrawing:]
  -[CHDrawing findLocalYMaximaWithWindowSize:excludingStrokes:]
  -[CHDrawing initialSegmentationPointIndicesForDrawing]
  -[CHDrawing filterPointsWithProximity:fixedPoints:points:]
  -[CHDrawing initWithContentsOfXYString:]
  -[CHDrawing drawingWithStrokesFromIndexSet:]
  -[CHDrawing isPrefixForDrawing:]
  -[CHDrawing drawingScaledByFactor:]
  -[CHDrawing drawingSpatiallyResampled:outputPointMap:]
  -[CHDrawing findSignalCutPointsExcludingStrokes:]
  -[CHDrawing boundingBoxForDrawingSegmentFromCutPoint:toCutPoint:]
  -[CHDrawing averageCharacterHeightEstimation:minChunkHeight:]


CHCutPoint : NSObject
 @property  long long strokeIndex
 @property  long long pointIndex
 @property  BOOL isEndOfStroke

  // class methods
  +[CHCutPoint sortedCHCutPointArray:]

  // instance methods
  -[CHCutPoint isEqual:]
  -[CHCutPoint compare:]
  -[CHCutPoint strokeIndex]
  -[CHCutPoint pointIndex]
  -[CHCutPoint isEndOfStroke]
  -[CHCutPoint isStartOfStroke]
  -[CHCutPoint initWithStrokeIndex:pointIndex:isEndOfStroke:]


CHSegmentDescriptor : NSObject
 @property  NSNumber *segmentID
 @property  CHCutPoint *startCutPoint
 @property  CHCutPoint *endCutPoint
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} segmentBounds
 @property  NSArray *relatedSegmentIDs
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contextBounds
 @property  double trailingSpaceRatio
 @property  double trailingSpaceProbability
 @property  double trailingCharBoundaryProbability

  // class methods
  +[CHSegmentDescriptor indexForSegmentID:fromSegments:]
  +[CHSegmentDescriptor generateSegmentsFromDrawing:withSegmentationPoints:buildingContextBoundsWithRadius:spaceProbabilities:charBoundaryProbabilities:extractDelayedStrokeIDs:extractedDelayedSegments:]
  +[CHSegmentDescriptor generateSegmentsFromDrawing:]
  +[CHSegmentDescriptor resolvedCutPoint:withReferenceDrawing:]
  +[CHSegmentDescriptor computeRelatedSegments:withDelayedSegments:]
  +[CHSegmentDescriptor _computeLocalContextForSegments:withContextSizeRadius:]
  +[CHSegmentDescriptor _resassignSpaceProbabilitiesFromDelayedSegments:toSegments:]
  +[CHSegmentDescriptor boundingBoxFromSegmentID:toSegmentID:withSegments:withSourceDrawing:]

  // instance methods
  -[CHSegmentDescriptor dealloc]
  -[CHSegmentDescriptor strokeCount]
  -[CHSegmentDescriptor segmentBounds]
  -[CHSegmentDescriptor segmentID]
  -[CHSegmentDescriptor relatedSegmentIDs]
  -[CHSegmentDescriptor strokeIndexSet]
  -[CHSegmentDescriptor trailingSpaceProbability]
  -[CHSegmentDescriptor trailingCharBoundaryProbability]
  -[CHSegmentDescriptor startCutPoint]
  -[CHSegmentDescriptor endCutPoint]
  -[CHSegmentDescriptor contextBounds]
  -[CHSegmentDescriptor trailingSpaceRatio]
  -[CHSegmentDescriptor isSinglePointSegment]
  -[CHSegmentDescriptor initWithSegmentID:startCutPoint:endCutPoint:trailingSpaceProbability:trailingCharBoundaryProbability:referenceDrawing:]
  -[CHSegmentDescriptor _addRelatedSegmentID:]
  -[CHSegmentDescriptor setContextBounds:]
  -[CHSegmentDescriptor setTrailingSpaceRatio:]
  -[CHSegmentDescriptor setTrailingSpaceProbability:]
  -[CHSegmentDescriptor setTrailingCharBoundaryProbability:]


CHDrawingSegmentGroup : NSObject
 @property  long long segmentGroupIndex
 @property  NSArray *segments
 @property  NSArray *delayedSegments
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  long long totalSegmentCount

  // class methods
  +[CHDrawingSegmentGroup segmentGroupsFromSegments:delayedSegments:segmentGroupRanges:]

  // instance methods
  -[CHDrawingSegmentGroup dealloc]
  -[CHDrawingSegmentGroup bounds]
  -[CHDrawingSegmentGroup segments]
  -[CHDrawingSegmentGroup delayedSegments]
  -[CHDrawingSegmentGroup segmentGroupIndex]
  -[CHDrawingSegmentGroup totalSegmentCount]
  -[CHDrawingSegmentGroup initWithSegmentGroupIndex:segments:delayedSegments:]


CHNonTextCandidateStroke : NSObject <NSCopying, NSMutableCopying>
 @property  long long classificationAsNonText
 @property  long long substrokesCount
 @property  NSDictionary *supportByStrokeIdentifier
 @property  double lineError
 @property  double containerScore
 @property  double lineOrientationAngle
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  double boundsDiagonal
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} enlargedBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} rotatedBounds
 @property  <CHStrokeIdentifier> *strokeIdentifier
 @property  long long effectiveClassification
 @property  double support

  // instance methods
  -[CHNonTextCandidateStroke dealloc]
  -[CHNonTextCandidateStroke copyWithZone:]
  -[CHNonTextCandidateStroke mutableCopyWithZone:]
  -[CHNonTextCandidateStroke bounds]
  -[CHNonTextCandidateStroke strokeIdentifier]
  -[CHNonTextCandidateStroke support]
  -[CHNonTextCandidateStroke initWithStrokeIdentifier:substrokesCount:classificationAsNonText:lineOrientation:lineError:containerScore:bounds:boundsDiagonal:enlargedBounds:rotatedBounds:supportByStrokeIdentifier:support:]
  -[CHNonTextCandidateStroke initWithStroke:consistingOfSubstrokes:classificationAsNonText:lineOrientation:lineError:containerScore:]
  -[CHNonTextCandidateStroke effectiveClassification]
  -[CHNonTextCandidateStroke classificationAsNonText]
  -[CHNonTextCandidateStroke substrokesCount]
  -[CHNonTextCandidateStroke supportByStrokeIdentifier]
  -[CHNonTextCandidateStroke lineError]
  -[CHNonTextCandidateStroke containerScore]
  -[CHNonTextCandidateStroke lineOrientationAngle]
  -[CHNonTextCandidateStroke boundsDiagonal]
  -[CHNonTextCandidateStroke enlargedBounds]
  -[CHNonTextCandidateStroke rotatedBounds]


CHMutableNonTextCandidateStroke : CHNonTextCandidateStroke
 @property  NSDictionary *supportByStrokeIdentifier

  // instance methods
  -[CHMutableNonTextCandidateStroke _removeSupportForStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke _adjustSupportForLineClassificationByAddingStroke:consistingOfSubstrokes:]
  -[CHMutableNonTextCandidateStroke _adjustSupportForContainerClassificationByAddingStroke:consistingOfSubstrokes:]
  -[CHMutableNonTextCandidateStroke _setSupportForStrokeIdentifier:support:]
  -[CHMutableNonTextCandidateStroke setSupportByStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke adjustSupportByRemovingStrokeIdentifier:]
  -[CHMutableNonTextCandidateStroke adjustSupportByAddingStroke:consistingOfSubstrokes:]


CHCornerDetector : NSObject
 @property  unsigned long _strawSize
 @property  NSMutableIndexSet *_cornerIndexSet
 @property  NSMutableIndexSet *_directionChangeCornerIndexes
 @property  {vector<std::__1::map<long _resampledDrawingPointMap
 @property  BOOL shouldUseDynamicSampling
 @property  double minimumSignificantSegmentLength
 @property  CHDrawing *drawing
 @property  CHDrawing *resampledDrawing
 @property  unsigned long directionChangeCount
 @property  unsigned long highestDirectionChangeCount

  // instance methods
  -[CHCornerDetector init]
  -[CHCornerDetector dealloc]
  -[CHCornerDetector .cxx_destruct]
  -[CHCornerDetector .cxx_construct]
  -[CHCornerDetector drawing]
  -[CHCornerDetector setDrawing:]
  -[CHCornerDetector _detectCorners]
  -[CHCornerDetector cornerIndexes]
  -[CHCornerDetector resampledDrawing]
  -[CHCornerDetector _distance:p1:p2:]
  -[CHCornerDetector minimumSignificantSegmentLength]
  -[CHCornerDetector _resolveResampledDirectionChangePointIndexes:]
  -[CHCornerDetector _resampleDrawing:outputPointMap:]
  -[CHCornerDetector _cornerIndexSet]
  -[CHCornerDetector _strawSize]
  -[CHCornerDetector _postProcessCorners:corners:straws:]
  -[CHCornerDetector _detectDirectionalChanges]
  -[CHCornerDetector _resamplingDistance:]
  -[CHCornerDetector shouldUseDynamicSampling]
  -[CHCornerDetector _isLine:usingThreshold:p1:p2:]
  -[CHCornerDetector _strokeHalfwayCorner:p1:p2:]
  -[CHCornerDetector _removeColinearCorners:usingThreshold:corners:]
  -[CHCornerDetector _removeColinearCorners:usingDistanceThreshold:usingLowerThreshold:usingUpperThreshold:corners:]
  -[CHCornerDetector _removeAdjacentCorners:corners:straws:]
  -[CHCornerDetector _pathDistance:p1:p2:]
  -[CHCornerDetector directionChangeCornerIndexes]
  -[CHCornerDetector setMinimumSignificantSegmentLength:]
  -[CHCornerDetector setShouldUseDynamicSampling:]
  -[CHCornerDetector directionChangeCount]
  -[CHCornerDetector highestDirectionChangeCount]
  -[CHCornerDetector _directionChangeCornerIndexes]
  -[CHCornerDetector _resampledDrawingPointMap]


CHMergedStrokeGroupingResults : CHStrokeGroupingResult
 @property  NSDictionary *groupingResultsByStrategyIdentifier

  // instance methods
  -[CHMergedStrokeGroupingResults dealloc]
  -[CHMergedStrokeGroupingResults initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:groupingResultsByStrategyIdentifier:]
  -[CHMergedStrokeGroupingResults groupingResultsByStrategyIdentifier]


CHStrokeGroupingManager : NSObject
 @property  NSDictionary *groupingStrategiesByIdentifier
 @property  <CHStrokeProvider> *strokeProvider
 @property  CHRecognitionSessionResult *sessionLastResult
 @property  NSArray *locales
 @property  BOOL isInlineContinuousMode

  // instance methods
  -[CHStrokeGroupingManager dealloc]
  -[CHStrokeGroupingManager locales]
  -[CHStrokeGroupingManager strokeProvider]
  -[CHStrokeGroupingManager strokesForIdentifiers:]
  -[CHStrokeGroupingManager recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHStrokeGroupingManager sessionLastResult]
  -[CHStrokeGroupingManager groupingStrategiesByIdentifier]
  -[CHStrokeGroupingManager _greedyCombinationOfGroupingResults:stableStrokeIdentifiers:withCancellationBlock:]
  -[CHStrokeGroupingManager _simpleDrawingForStrokeGroup:originalDrawing:orderedStrokeIDs:]
  -[CHStrokeGroupingManager initWithStrokeProvider:sessionLastResult:locales:isInlineContinuousMode:inlineContinuousModeTargets:]
  -[CHStrokeGroupingManager updatedGroupingResultByAddingStrokes:removingStrokeIdentifiers:orderedStrokeIdentifiers:strokeClassificationResult:cancellationBlock:]
  -[CHStrokeGroupingManager isInlineContinuousMode]


CHNormalizedDrawingVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHNormalizedDrawingVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHNormalizedDrawingVisualization dirtyRectForStrokeGroup:]
  -[CHNormalizedDrawingVisualization shouldDrawStrokeGroup:]
  -[CHNormalizedDrawingVisualization _transformForInputDrawingBounds:referenceBounds:viewBounds:]
  -[CHNormalizedDrawingVisualization _drawGroupBrackgroundInRect:context:]
  -[CHNormalizedDrawingVisualization drawInputDrawing:inContext:transform:]
  -[CHNormalizedDrawingVisualization _drawCutPoints:inputDrawing:inContext:transform:]
  -[CHNormalizedDrawingVisualization layeringPriority]
  -[CHNormalizedDrawingVisualization wantsInputDrawings]


CHNormalizedDrawingAllVisualization : CHNormalizedDrawingVisualization
  // instance methods
  -[CHNormalizedDrawingAllVisualization shouldDrawStrokeGroup:]


CHRecognitionSessionResult : NSObject <NSCopying>
 @property  NSDictionary *_recognitionResultsByGroupID
 @property  long long _transcriptionCapability
 @property  <CHStrokeProviderVersion> *strokeProviderVersion
 @property  NSArray *orderedStrokeIdentifiers
 @property  NSArray *locales
 @property  NSArray *preferredLocales
 @property  CHStrokeClutterFilter *clutterFilter
 @property  long long recognitionEnvironment
 @property  CHStrokeClassificationResult *strokeClassificationResult
 @property  CHStrokeGroupingResult *strokeGroupingResult
 @property  {?=ddddd} generationDuration
 @property  NSString *highConfidenceDebugDescription
 @property  NSString *allResultsDebugDescription
 @property  NSArray *allResultsDebugDescriptionByGroup

  // instance methods
  -[CHRecognitionSessionResult init]
  -[CHRecognitionSessionResult dealloc]
  -[CHRecognitionSessionResult copyWithZone:]
  -[CHRecognitionSessionResult preferredLocales]
  -[CHRecognitionSessionResult strokeProviderVersion]
  -[CHRecognitionSessionResult locales]
  -[CHRecognitionSessionResult strokeGroupingResult]
  -[CHRecognitionSessionResult recognitionResultForStrokeGroupIdentifier:]
  -[CHRecognitionSessionResult strokeClassificationResult]
  -[CHRecognitionSessionResult orderedStrokeIdentifiers]
  -[CHRecognitionSessionResult _recognitionResultsByGroupID]
  -[CHRecognitionSessionResult _resultsDebugDescriptionIntoGroupsArray:groupHeaderBlock:]
  -[CHRecognitionSessionResult initWithStrokeProviderVersion:orderedStrokeIdentifiers:locales:preferredLocales:clutterFilter:strokeClassificationResult:strokeGroupingResult:recognitionResults:inlineContinuousModeResults:generationDuration:recognitionEnvironment:]
  -[CHRecognitionSessionResult _transcriptionCapability]
  -[CHRecognitionSessionResult highConfidenceDebugDescription]
  -[CHRecognitionSessionResult allResultsDebugDescription]
  -[CHRecognitionSessionResult allResultsDebugDescriptionByGroup]
  -[CHRecognitionSessionResult allResultsDebugDescriptionWithGroupHeaderBlock:]
  -[CHRecognitionSessionResult clutterFilter]
  -[CHRecognitionSessionResult recognitionEnvironment]
  -[CHRecognitionSessionResult generationDuration]


CHStrokeClassificationResult : NSObject <NSCopying>
 @property  NSDictionary *strokeClassificationsByStrokeIdentifier
 @property  NSDictionary *substrokesByStrokeIdentifier
 @property  NSSet *textStrokeIdentifiers
 @property  NSSet *nontextCandidates

  // instance methods
  -[CHStrokeClassificationResult init]
  -[CHStrokeClassificationResult dealloc]
  -[CHStrokeClassificationResult copyWithZone:]
  -[CHStrokeClassificationResult mutableCopyWithZone:]
  -[CHStrokeClassificationResult strokeClassificationsByStrokeIdentifier]
  -[CHStrokeClassificationResult substrokesByStrokeIdentifier]
  -[CHStrokeClassificationResult textStrokeIdentifiers]
  -[CHStrokeClassificationResult initWithStrokeClassificationsByStrokeIdentifier:substrokesByStrokeIdentifier:nontextCandidates:]
  -[CHStrokeClassificationResult isEquivalentToStrokeClassificationResult:]
  -[CHStrokeClassificationResult nontextCandidates]


CHStrokeGroupingResult : NSObject <NSCopying>
 @property  NSSet *strokeGroups
 @property  NSSet *createdStrokeGroups
 @property  NSSet *deletedStrokeGroups
 @property  NSArray *textStrokeGroupsSortedTopBottomLeftRight
 @property  NSArray *textStrokeGroupsSortedByWritingOrientation
 @property  NSArray *strokeGroupsSortedByWritingOrientation
 @property  NSSet *textStrokeGroups

  // instance methods
  -[CHStrokeGroupingResult init]
  -[CHStrokeGroupingResult dealloc]
  -[CHStrokeGroupingResult copyWithZone:]
  -[CHStrokeGroupingResult strokeGroups]
  -[CHStrokeGroupingResult strokeGroupsSortedByWritingOrientation]
  -[CHStrokeGroupingResult initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:]
  -[CHStrokeGroupingResult textStrokeGroups]
  -[CHStrokeGroupingResult textStrokeGroupsSortedByWritingOrientation]
  -[CHStrokeGroupingResult createdStrokeGroups]
  -[CHStrokeGroupingResult deletedStrokeGroups]
  -[CHStrokeGroupingResult _sortedStrokeGroupsByWritingOrientationTextOnly:]
  -[CHStrokeGroupingResult textStrokeGroupsSortedTopBottomLeftRight]


CHStrokeGroupRecognitionResult : NSObject <NSCopying>
 @property  CHDrawing *inputDrawing
 @property  NSArray *inputDrawingCutPoints
 @property  NSDictionary *languageFitnessByLocale
 @property  NSArray *inputStrokeIdentifiers
 @property  NSDictionary *recognitionResultsByLocale
 @property  NSDictionary *errorsByLocale

  // class methods
  +[CHStrokeGroupRecognitionResult sortedLocales:usingLanguageFitness:]
  +[CHStrokeGroupRecognitionResult filteredResultsByLocale:usingLanguageFitness:]

  // instance methods
  -[CHStrokeGroupRecognitionResult init]
  -[CHStrokeGroupRecognitionResult dealloc]
  -[CHStrokeGroupRecognitionResult copyWithZone:]
  -[CHStrokeGroupRecognitionResult inputStrokeIdentifiers]
  -[CHStrokeGroupRecognitionResult recognitionResultsByLocale]
  -[CHStrokeGroupRecognitionResult errorsByLocale]
  -[CHStrokeGroupRecognitionResult localesSortedByLanguageFitness:]
  -[CHStrokeGroupRecognitionResult inputDrawing]
  -[CHStrokeGroupRecognitionResult inputDrawingCutPoints]
  -[CHStrokeGroupRecognitionResult highConfidenceTextForSessionResult:rejectionRate:doesContainUnfilteredMultiLocaleResults:]
  -[CHStrokeGroupRecognitionResult languageFitnessForLocale:]
  -[CHStrokeGroupRecognitionResult initWithResultsByLocale:errorsByLocale:languageFitnessByLocale:inputStrokeIdentifiers:inputDrawing:inputDrawingCutPoints:]
  -[CHStrokeGroupRecognitionResult languageFitnessByLocale]
  -[CHStrokeGroupRecognitionResult initWithResultsByLocale:errorsByLocale:languageFitnessByLocale:inputStrokeIdentifiers:]


CHRemoteRecognitionRequest : NSObject <NSSecureCoding>
 @property  NSLocale *locale
 @property  int recognitionMode
 @property  {CGSize=dd} minimumDrawingSize
 @property  int contentType
 @property  NSCharacterSet *activeCharacterSet
 @property  unsigned long maxRecognitionResultCount
 @property  NSDictionary *options
 @property  CHDrawing *drawing
 @property  BOOL shouldUseTextReplacements
 @property  BOOL shouldEnableCachingIfAvailable
 @property  BOOL hasBeenSubmitted
 @property  long long priority

  // class methods
  +[CHRemoteRecognitionRequest supportsSecureCoding]

  // instance methods
  -[CHRemoteRecognitionRequest dealloc]
  -[CHRemoteRecognitionRequest isEqual:]
  -[CHRemoteRecognitionRequest options]
  -[CHRemoteRecognitionRequest encodeWithCoder:]
  -[CHRemoteRecognitionRequest initWithCoder:]
  -[CHRemoteRecognitionRequest setLocale:]
  -[CHRemoteRecognitionRequest locale]
  -[CHRemoteRecognitionRequest contentType]
  -[CHRemoteRecognitionRequest setContentType:]
  -[CHRemoteRecognitionRequest setOptions:]
  -[CHRemoteRecognitionRequest priority]
  -[CHRemoteRecognitionRequest setPriority:]
  -[CHRemoteRecognitionRequest hasBeenSubmitted]
  -[CHRemoteRecognitionRequest setHasBeenSubmitted:]
  -[CHRemoteRecognitionRequest drawing]
  -[CHRemoteRecognitionRequest setActiveCharacterSet:]
  -[CHRemoteRecognitionRequest setDrawing:]
  -[CHRemoteRecognitionRequest shouldEnableCachingIfAvailable]
  -[CHRemoteRecognitionRequest recognitionMode]
  -[CHRemoteRecognitionRequest maxRecognitionResultCount]
  -[CHRemoteRecognitionRequest setMaxRecognitionResultCount:]
  -[CHRemoteRecognitionRequest activeCharacterSet]
  -[CHRemoteRecognitionRequest minimumDrawingSize]
  -[CHRemoteRecognitionRequest setMinimumDrawingSize:]
  -[CHRemoteRecognitionRequest setShouldEnableCachingIfAvailable:]
  -[CHRemoteRecognitionRequest setRecognitionMode:]
  -[CHRemoteRecognitionRequest initWithLocale:recognitionMode:drawing:options:priority:]
  -[CHRemoteRecognitionRequest setShouldUseTextReplacements:]
  -[CHRemoteRecognitionRequest shouldUseTextReplacements]
  -[CHRemoteRecognitionRequest isEqualToRemoteRecognitionRequest:]
  -[CHRemoteRecognitionRequest recognizerConfigurationKey]


CHTokenizedTextResultColumn : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  NSArray *tokenRows
 @property  NSIndexSet *strokeIndexes

  // class methods
  +[CHTokenizedTextResultColumn supportsSecureCoding]

  // instance methods
  -[CHTokenizedTextResultColumn init]
  -[CHTokenizedTextResultColumn dealloc]
  -[CHTokenizedTextResultColumn isEqual:]
  -[CHTokenizedTextResultColumn copyWithZone:]
  -[CHTokenizedTextResultColumn mutableCopyWithZone:]
  -[CHTokenizedTextResultColumn encodeWithCoder:]
  -[CHTokenizedTextResultColumn initWithCoder:]
  -[CHTokenizedTextResultColumn strokeIndexes]
  -[CHTokenizedTextResultColumn initWithTokenRows:]
  -[CHTokenizedTextResultColumn tokenRows]
  -[CHTokenizedTextResultColumn isEqualToTokenizedTextResultColumn:]
  -[CHTokenizedTextResultColumn indexOfEquivalentTokenRow:tokenRange:]


CHMutableTokenizedTextResultColumn : CHTokenizedTextResultColumn
 @property  NSArray *tokenRows

  // instance methods
  -[CHMutableTokenizedTextResultColumn copyWithZone:]
  -[CHMutableTokenizedTextResultColumn initWithTokenRows:]
  -[CHMutableTokenizedTextResultColumn addTokenRowWithTokens:]
  -[CHMutableTokenizedTextResultColumn sortTokenRows]
  -[CHMutableTokenizedTextResultColumn _mutableTokenRows]
  -[CHMutableTokenizedTextResultColumn setTokenRows:]
  -[CHMutableTokenizedTextResultColumn removeTokenRowAtIndex:]


CHStrokeGroup : NSObject
 @property  long long uniqueIdentifier
 @property  long long ancestorIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  {CGPoint=dd} firstStrokeOrigin
 @property  {CGVector=dd} averageWritingOrientation
 @property  NSSet *strokeIdentifiers
 @property  <CHStrokeIdentifier> *firstStrokeIdentifier
 @property  <CHStrokeIdentifier> *lastStrokeIdentifier
 @property  long long classification
 @property  double groupingConfidence
 @property  NSString *strategyIdentifier

  // class methods
  +[CHStrokeGroup _newStrokeGroupUniqueIdentifier]
  +[CHStrokeGroup isStrokeGroupSet:equivalentToStrokeGroupSet:]

  // instance methods
  -[CHStrokeGroup init]
  -[CHStrokeGroup dealloc]
  -[CHStrokeGroup uniqueIdentifier]
  -[CHStrokeGroup bounds]
  -[CHStrokeGroup classification]
  -[CHStrokeGroup strokeIdentifiers]
  -[CHStrokeGroup ancestorIdentifier]
  -[CHStrokeGroup firstStrokeIdentifier]
  -[CHStrokeGroup lastStrokeIdentifier]
  -[CHStrokeGroup firstStrokeOrigin]
  -[CHStrokeGroup groupingConfidence]
  -[CHStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:firstStrokeOrigin:]
  -[CHStrokeGroup strategyIdentifier]
  -[CHStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:]
  -[CHStrokeGroup averageWritingOrientation]
  -[CHStrokeGroup initWithAncestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:classification:groupingConfidence:strategyIdentifier:firstStrokeOrigin:]
  -[CHStrokeGroup isEquivalentToStrokeGroup:]


CHTitleQuery : CHQuery
 @property  NSString *transcribedTitle
 @property  NSSet *titleStrokeIdentifiers

  // instance methods
  -[CHTitleQuery dealloc]
  -[CHTitleQuery debugName]
  -[CHTitleQuery initWithRecognitionSession:]
  -[CHTitleQuery transcribedTitle]
  -[CHTitleQuery titleStrokeIdentifiers]
  -[CHTitleQuery q_updateQueryResult]
  -[CHTitleQuery _setTranscribedTitle:strokeIdentifiers:]


CHRecognitionResult : NSObject
 @property  double score

  // instance methods
  -[CHRecognitionResult score]
  -[CHRecognitionResult initWithScore:]
  -[CHRecognitionResult setScore:]


CHTextRecognitionResult : CHRecognitionResult
 @property  NSString *string
 @property  NSArray *wordRanges
 @property  NSArray *wordIDs
 @property  NSArray *wordRecognitionScores
 @property  NSArray *wordCombinedScores
 @property  NSArray *wordStrokeSets
 @property  NSArray *wordLexicalEntries
 @property  NSArray *wordPatternEntries
 @property  NSIndexSet *rareWordIndexes
 @property  NSIndexSet *inappropriateWordIndexes
 @property  BOOL isTextReplacement

  // instance methods
  -[CHTextRecognitionResult string]
  -[CHTextRecognitionResult dealloc]
  -[CHTextRecognitionResult wordIDs]
  -[CHTextRecognitionResult initWithString:score:wordRanges:wordIDs:wordRecognitionScores:wordCombinedScores:wordStrokeSets:wordLexicalEntries:wordPatternEntries:rareWordIndexes:inappropriateWordIndexes:isTextReplacement:]
  -[CHTextRecognitionResult inappropriateWordIndexes]
  -[CHTextRecognitionResult wordStrokeSets]
  -[CHTextRecognitionResult rareWordIndexes]
  -[CHTextRecognitionResult wordCombinedScores]
  -[CHTextRecognitionResult wordLexicalEntries]
  -[CHTextRecognitionResult wordPatternEntries]
  -[CHTextRecognitionResult wordRanges]
  -[CHTextRecognitionResult wordRecognitionScores]
  -[CHTextRecognitionResult isTextReplacement]
  -[CHTextRecognitionResult mecabraCandidate]


CHSketchRecognitionResult : CHRecognitionResult
 @property  NSString *string
 @property  double rotation

  // instance methods
  -[CHSketchRecognitionResult string]
  -[CHSketchRecognitionResult dealloc]
  -[CHSketchRecognitionResult rotation]
  -[CHSketchRecognitionResult initWithString:score:rotation:]


CHLineSketchRecognitionResult : CHSketchRecognitionResult
 @property  int startEndpointType
 @property  int endEndpointType
 @property  {CGPoint=dd} startLocation
 @property  {CGPoint=dd} endLocation
 @property  {CGPoint=dd} midpointLocation
 @property  {CGPoint=dd} controlPoint
 @property  NSArray *pathPoints
 @property  BOOL cornerLine

  // instance methods
  -[CHLineSketchRecognitionResult dealloc]
  -[CHLineSketchRecognitionResult startLocation]
  -[CHLineSketchRecognitionResult endLocation]
  -[CHLineSketchRecognitionResult midpointLocation]
  -[CHLineSketchRecognitionResult startEndpointType]
  -[CHLineSketchRecognitionResult endEndpointType]
  -[CHLineSketchRecognitionResult controlPoint]
  -[CHLineSketchRecognitionResult initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:]
  -[CHLineSketchRecognitionResult initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:]
  -[CHLineSketchRecognitionResult pathPoints]
  -[CHLineSketchRecognitionResult cornerLine]


CHManhattanLineSketchRecognitionResult : CHLineSketchRecognitionResult

CHOutlinedArrowSketchRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size
 @property  {CGPoint=dd} controlPoint

  // instance methods
  -[CHOutlinedArrowSketchRecognitionResult size]
  -[CHOutlinedArrowSketchRecognitionResult center]
  -[CHOutlinedArrowSketchRecognitionResult controlPoint]
  -[CHOutlinedArrowSketchRecognitionResult initWithString:score:rotation:center:size:controlPointLocation:]


CHRectangleSketchRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} upperLeftPoint
 @property  {CGPoint=dd} upperRightPoint
 @property  {CGPoint=dd} lowerLeftPoint
 @property  {CGPoint=dd} lowerRightPoint

  // instance methods
  -[CHRectangleSketchRecognitionResult lowerLeftPoint]
  -[CHRectangleSketchRecognitionResult lowerRightPoint]
  -[CHRectangleSketchRecognitionResult upperRightPoint]
  -[CHRectangleSketchRecognitionResult initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:]
  -[CHRectangleSketchRecognitionResult upperLeftPoint]


CHTriangleRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} vertex1
 @property  {CGPoint=dd} vertex2
 @property  {CGPoint=dd} vertex3

  // instance methods
  -[CHTriangleRecognitionResult vertex1]
  -[CHTriangleRecognitionResult vertex2]
  -[CHTriangleRecognitionResult vertex3]
  -[CHTriangleRecognitionResult initWithString:score:rotation:vertex1:vertex2:vertex3:]


CHEllipseRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHEllipseRecognitionResult size]
  -[CHEllipseRecognitionResult center]
  -[CHEllipseRecognitionResult initWithString:score:rotation:center:size:]


CHChatBubbleRecognitionResult : CHEllipseRecognitionResult
 @property  {CGPoint=dd} stemLocation
 @property  double stemWidth

  // instance methods
  -[CHChatBubbleRecognitionResult stemWidth]
  -[CHChatBubbleRecognitionResult stemLocation]
  -[CHChatBubbleRecognitionResult initWithString:score:rotation:center:size:stemLocation:stemWidth:]


CHStarRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHStarRecognitionResult size]
  -[CHStarRecognitionResult center]
  -[CHStarRecognitionResult initWithString:score:rotation:center:size:]


CHPentagonRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHPentagonRecognitionResult size]
  -[CHPentagonRecognitionResult center]
  -[CHPentagonRecognitionResult initWithString:score:rotation:center:size:]


CHScribbleRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHScribbleRecognitionResult size]
  -[CHScribbleRecognitionResult center]
  -[CHScribbleRecognitionResult initWithString:score:rotation:center:size:]


CHHeartRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHHeartRecognitionResult size]
  -[CHHeartRecognitionResult center]
  -[CHHeartRecognitionResult initWithString:score:rotation:center:size:]


CHCloudRecognitionResult : CHSketchRecognitionResult
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[CHCloudRecognitionResult size]
  -[CHCloudRecognitionResult center]
  -[CHCloudRecognitionResult initWithString:score:rotation:center:size:]


CHFreeformRecognitionResult : CHSketchRecognitionResult
  // instance methods
  -[CHFreeformRecognitionResult initWithScore:]


CHStrokeGroupingVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHStrokeGroupingVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupingVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupingVisualization _newColorForStroke:inGroup:]


CHSearchQuery : CHQuery
 @property  NSArray *foundItems
 @property  NSString *queryString

  // instance methods
  -[CHSearchQuery dealloc]
  -[CHSearchQuery stop]
  -[CHSearchQuery debugName]
  -[CHSearchQuery queryString]
  -[CHSearchQuery setQueryString:]
  -[CHSearchQuery initWithRecognitionSession:]
  -[CHSearchQuery foundItems]
  -[CHSearchQuery q_updateQueryResult]
  -[CHSearchQuery q_foundItemsForSearchString:sessionResult:]
  -[CHSearchQuery _setFoundItems:]
  -[CHSearchQuery _enumerateMatchesForStrokeGroupResult:locales:queryString:usingBlock:]
  -[CHSearchQuery _findMatchingTokenPathInResult:initialTokenLocation:queryString:fromIndex:coveredStrokeIndexes:reverseMatchedTokens:]
  -[CHSearchQuery _isMatchSeparatorBeforeToken:atLocation:inResult:queryString:fromIndex:matchedLength:]
  -[CHSearchQuery _isMatchStringForToken:queryString:fromIndex:requirePrefixMatch:matchedLength:]


CHSearchQueryItem : NSObject
 @property  NSSet *strokeIdentifiers

  // instance methods
  -[CHSearchQueryItem dealloc]
  -[CHSearchQueryItem isEqual:]
  -[CHSearchQueryItem strokeIdentifiers]
  -[CHSearchQueryItem initWithStrokeIdentifiers:]
  -[CHSearchQueryItem isEqualToSearchQueryItem:]


CHVisualization : NSObject
 @property  long long layeringPriority
 @property  BOOL wantsInputDrawings
 @property  CHRecognitionSession *recognitionSession
 @property  <CHVisualizationDelegate> *delegate

  // instance methods
  -[CHVisualization dealloc]
  -[CHVisualization delegate]
  -[CHVisualization setDelegate:]
  -[CHVisualization recognitionSession]
  -[CHVisualization initWithRecognitionSession:]
  -[CHVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHVisualization layeringPriority]
  -[CHVisualization wantsInputDrawings]
  -[CHVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHVisualization toggleVisualizationRegionAtPoint:]


CHPointFIFO : NSObject
 @property  CHPointFIFO *nextFIFO

  // instance methods
  -[CHPointFIFO dealloc]
  -[CHPointFIFO clear]
  -[CHPointFIFO flush]
  -[CHPointFIFO nextFIFO]
  -[CHPointFIFO addPoint:]
  -[CHPointFIFO emitPoint:]
  -[CHPointFIFO initWithFIFO:]
  -[CHPointFIFO setNextFIFO:]


CHPointStrokeFIFO : CHPointFIFO
 @property  CHDrawing *strokes
 @property  CHDrawing *drawing

  // instance methods
  -[CHPointStrokeFIFO dealloc]
  -[CHPointStrokeFIFO clear]
  -[CHPointStrokeFIFO flush]
  -[CHPointStrokeFIFO addPoint:]
  -[CHPointStrokeFIFO initWithFIFO:]
  -[CHPointStrokeFIFO setStrokes:]
  -[CHPointStrokeFIFO strokes]
  -[CHPointStrokeFIFO drawing]
  -[CHPointStrokeFIFO setDrawing:]


CHBoxcarFilterPointFIFO : CHPointFIFO
 @property  {vector<float __attribute__((ext_vector_type(4))) prevPoints
 @property  unsigned long width
 @property  float spacing

  // instance methods
  -[CHBoxcarFilterPointFIFO clear]
  -[CHBoxcarFilterPointFIFO .cxx_destruct]
  -[CHBoxcarFilterPointFIFO spacing]
  -[CHBoxcarFilterPointFIFO .cxx_construct]
  -[CHBoxcarFilterPointFIFO width]
  -[CHBoxcarFilterPointFIFO setWidth:]
  -[CHBoxcarFilterPointFIFO flush]
  -[CHBoxcarFilterPointFIFO addPoint:]
  -[CHBoxcarFilterPointFIFO initWithFIFO:width:spacing:]
  -[CHBoxcarFilterPointFIFO prevPoints]
  -[CHBoxcarFilterPointFIFO emitAveragedPoint]
  -[CHBoxcarFilterPointFIFO initWithFIFO:width:]
  -[CHBoxcarFilterPointFIFO setSpacing:]
  -[CHBoxcarFilterPointFIFO setPrevPoints:]


CHQuadCurvePointFIFO : CHPointFIFO
 @property  {vector<float __attribute__((ext_vector_type(4))) prevPoints
 @property  {vector<float __attribute__((ext_vector_type(4))) points
 @property  {vector<float __attribute__((ext_vector_type(4))) controlPoints
 @property  void lastPoint
 @property  <CHPointFIFODrawingTarget> *drawingTarget
 @property  float unitScale
 @property  BOOL emitInterpolatedPoints
 @property  @? emissionHandler
 @property  ^{CGPath=} path
 @property  double lineWidth

  // class methods
  +[CHQuadCurvePointFIFO interpolateFromPoint:toPoint:controlPoint:time:]

  // instance methods
  -[CHQuadCurvePointFIFO dealloc]
  -[CHQuadCurvePointFIFO clear]
  -[CHQuadCurvePointFIFO .cxx_destruct]
  -[CHQuadCurvePointFIFO path]
  -[CHQuadCurvePointFIFO setPath:]
  -[CHQuadCurvePointFIFO .cxx_construct]
  -[CHQuadCurvePointFIFO flush]
  -[CHQuadCurvePointFIFO setLineWidth:]
  -[CHQuadCurvePointFIFO lineWidth]
  -[CHQuadCurvePointFIFO addPoint:]
  -[CHQuadCurvePointFIFO initWithFIFO:]
  -[CHQuadCurvePointFIFO prevPoints]
  -[CHQuadCurvePointFIFO setPrevPoints:]
  -[CHQuadCurvePointFIFO unitScale]
  -[CHQuadCurvePointFIFO setUnitScale:]
  -[CHQuadCurvePointFIFO points]
  -[CHQuadCurvePointFIFO setLastPoint:]
  -[CHQuadCurvePointFIFO lastPoint]
  -[CHQuadCurvePointFIFO controlPoints]
  -[CHQuadCurvePointFIFO setUnitScaleForViewSize:normalizedSize:contentScaleFactor:]
  -[CHQuadCurvePointFIFO emissionHandler]
  -[CHQuadCurvePointFIFO setEmissionHandler:]
  -[CHQuadCurvePointFIFO setPoints:]
  -[CHQuadCurvePointFIFO setControlPoints:]
  -[CHQuadCurvePointFIFO emitInterpolatedPoints]
  -[CHQuadCurvePointFIFO setEmitInterpolatedPoints:]
  -[CHQuadCurvePointFIFO initWithFIFO:drawingTarget:]
  -[CHQuadCurvePointFIFO drawingTarget]
  -[CHQuadCurvePointFIFO setDrawingTarget:]


CHStrokePointsVisualization : CHStrokeVisualization
  // instance methods
  -[CHStrokePointsVisualization drawStrokesFromStrokeProvider:inRect:context:]


CHTokenizedTextResult : NSObject <NSCopying, NSMutableCopying, NSSecureCoding>
 @property  long long tokenColumnCount
 @property  NSArray *transcriptionPaths
 @property  NSArray *transcriptionPathScores
 @property  NSString *topTranscription

  // class methods
  +[CHTokenizedTextResult supportsSecureCoding]
  +[CHTokenizedTextResult _scoreMeanAndStdForToken:forLocale:]
  +[CHTokenizedTextResult _characterCountInToken:filteringCharacterSet:filteredCharacterCount:]
  +[CHTokenizedTextResult tokenizedTextResultWithString:strokeIndexes:]

  // instance methods
  -[CHTokenizedTextResult init]
  -[CHTokenizedTextResult dealloc]
  -[CHTokenizedTextResult isEqual:]
  -[CHTokenizedTextResult copyWithZone:]
  -[CHTokenizedTextResult mutableCopyWithZone:]
  -[CHTokenizedTextResult isValid]
  -[CHTokenizedTextResult encodeWithCoder:]
  -[CHTokenizedTextResult initWithCoder:]
  -[CHTokenizedTextResult transcriptionPaths]
  -[CHTokenizedTextResult transcriptionWithPath:columnRange:filterLowConfidence:excludeGibberish:rejectionRate:tokenProcessingBlock:]
  -[CHTokenizedTextResult initWithTokenColumns:transcriptionPaths:scores:]
  -[CHTokenizedTextResult tokenColumnCount]
  -[CHTokenizedTextResult tokenColumns]
  -[CHTokenizedTextResult tokensInTranscriptionPath:atColumnIndex:]
  -[CHTokenizedTextResult transcriptionPathScores]
  -[CHTokenizedTextResult enumerateTokensInTranscriptionPath:columnRange:tokenProcessingBlock:]
  -[CHTokenizedTextResult topTranscription]
  -[CHTokenizedTextResult legacyTextRecognitionResults]
  -[CHTokenizedTextResult transcriptionWithPath:columnRange:filterLowConfidence:]
  -[CHTokenizedTextResult tokenRowsAtColumnIndex:]
  -[CHTokenizedTextResult tokenAtLocation:]
  -[CHTokenizedTextResult precedingSeparatorForToken:]
  -[CHTokenizedTextResult _shouldFilterOutStringForToken:isGibberish:]
  -[CHTokenizedTextResult _isGibberishToken:]
  -[CHTokenizedTextResult languageFitnessForTranscriptionPath:locale:recognitionMode:]
  -[CHTokenizedTextResult _tokenCountInTranscriptionPath:columnRange:]
  -[CHTokenizedTextResult _normalizedLanguageFitness:]
  -[CHTokenizedTextResult _legacyTextRecognitionResultForTranscriptionIndex:]
  -[CHTokenizedTextResult isEqualToTokenizedTextResult:]
  -[CHTokenizedTextResult precedingSeparatorForTopTranscriptionPath]
  -[CHTokenizedTextResult strokeIndexesForColumnsInRange:]
  -[CHTokenizedTextResult languageFitnessForLocale:recognitionMode:]


CHMutableTokenizedTextResult : CHTokenizedTextResult
 @property  NSArray *tokenColumns

  // class methods
  +[CHMutableTokenizedTextResult refineAlternativeTokens:historyTokenIDs:languageModel:]

  // instance methods
  -[CHMutableTokenizedTextResult copyWithZone:]
  -[CHMutableTokenizedTextResult adjustColumns]
  -[CHMutableTokenizedTextResult appendTokenColumns:]
  -[CHMutableTokenizedTextResult setTranscriptionPaths:scores:]
  -[CHMutableTokenizedTextResult trimTokensToTranscriptionPathCount:]
  -[CHMutableTokenizedTextResult filterCandidatesWithOutOfPattern:duplicateTokenIDs:]
  -[CHMutableTokenizedTextResult setTokenColumns:]
  -[CHMutableTokenizedTextResult commonStrokeSetsFromSets:tokenRow:]
  -[CHMutableTokenizedTextResult _columnStrokeSetsFromTokenRows:]


CHSpellCheckerErrorModel : PRErrorModel /System/Library/PrivateFrameworks/Montreal.framework/Montreal
  // instance methods
  -[CHSpellCheckerErrorModel replacementErrorScoreForIntendedCharacter:actualCharacter:]
  -[CHSpellCheckerErrorModel transpositionErrorScoreForIntendedFirstCharacter:intendedSecondCharacter:]


CHSpellChecker : NSObject
 @property  CHSpellCheckerErrorModel *errorModel

  // class methods
  +[CHSpellChecker sharedSpellServer]
  +[CHSpellChecker newErrorModel]

  // instance methods
  -[CHSpellChecker init]
  -[CHSpellChecker dealloc]
  -[CHSpellChecker isWordInUserDictionaries:caseSensitive:]
  -[CHSpellChecker correctionsForString:shouldUseErrorModel:forLocale:]
  -[CHSpellChecker errorModel]
  -[CHSpellChecker setErrorModel:]


CHStrokeClutterFilter : NSObject
 @property  long long highDensityStrokeCount

  // instance methods
  -[CHStrokeClutterFilter init]
  -[CHStrokeClutterFilter dealloc]
  -[CHStrokeClutterFilter debugQuickLookObject]
  -[CHStrokeClutterFilter initWithCanvasHeatmap:stroke2ItemMapping:item2StrokeMapping:]
  -[CHStrokeClutterFilter clutterFilterByAddingStrokes:removingStrokeIdentifiers:affectedStrokeIdentifiers:]
  -[CHStrokeClutterFilter isHighDensityStroke:]
  -[CHStrokeClutterFilter highDensityStrokeCount]


CHRecurrentNeuralNetwork : NSObject
 @property  ^{MontrealNeuralNetwork=} _model
 @property  NSString *modelName
 @property  NSArray *inputNames
 @property  NSDictionary *featureCounts
 @property  NSArray *outputNames
 @property  NSDictionary *classCounts

  // instance methods
  -[CHRecurrentNeuralNetwork dealloc]
  -[CHRecurrentNeuralNetwork _model]
  -[CHRecurrentNeuralNetwork modelName]
  -[CHRecurrentNeuralNetwork initWithModelName:]
  -[CHRecurrentNeuralNetwork inputNames]
  -[CHRecurrentNeuralNetwork featureCounts]
  -[CHRecurrentNeuralNetwork _recursivelyPredictProbabilitiesForDrawing:features:pointRange:modelInputName:modelOutputNames:probabilities:probabilityPredictionBlock:error:]
  -[CHRecurrentNeuralNetwork normalizedDrawing:minimumDrawingSize:interpolationDistance:outputPointMap:]
  -[CHRecurrentNeuralNetwork _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHRecurrentNeuralNetwork outputNames]
  -[CHRecurrentNeuralNetwork classCounts]


CHStrokeTransitionModel : CHRecurrentNeuralNetwork
 @property  long long distanceFeatureIndex
 @property  long long sinAlphaFeatureIndex
 @property  long long cosAlphaFeatureIndex
 @property  long long gapFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *spaceProbabilityOutputName
 @property  NSString *charBoundaryProbabilityOutputName
 @property  NSString *delayedStrokeProbabilityOutputName

  // instance methods
  -[CHStrokeTransitionModel dealloc]
  -[CHStrokeTransitionModel maxSequenceLength]
  -[CHStrokeTransitionModel initWithModelName:]
  -[CHStrokeTransitionModel classifyStrokesInDrawing:minimumDrawingSize:outDelayedStrokeProbabilities:outSpaceProbabilities:outCharBoundaryProbabilities:]
  -[CHStrokeTransitionModel detectedDelayedStrokes:]
  -[CHStrokeTransitionModel windowOverlap]
  -[CHStrokeTransitionModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHStrokeTransitionModel directionalFeaturesInputName]
  -[CHStrokeTransitionModel spaceProbabilityOutputName]
  -[CHStrokeTransitionModel charBoundaryProbabilityOutputName]
  -[CHStrokeTransitionModel delayedStrokeProbabilityOutputName]
  -[CHStrokeTransitionModel distanceFeatureIndex]
  -[CHStrokeTransitionModel sinAlphaFeatureIndex]
  -[CHStrokeTransitionModel cosAlphaFeatureIndex]
  -[CHStrokeTransitionModel gapFeatureIndex]


CHCutpointModel : CHRecurrentNeuralNetwork
 @property  long long distanceLeftFeatureIndex
 @property  long long distanceRightFeatureIndex
 @property  long long sinAngleLeftFeatureIndex
 @property  long long cosAngleLeftFeatureIndex
 @property  long long sinAngleRightFeatureIndex
 @property  long long cosAngleRightFeatureIndex
 @property  long long endpointFeatureIndex
 @property  NSString *directionalFeaturesInputName
 @property  NSString *cutpointProbabilityOutputName

  // instance methods
  -[CHCutpointModel dealloc]
  -[CHCutpointModel maxSequenceLength]
  -[CHCutpointModel initWithModelName:]
  -[CHCutpointModel detectCutpointsInDrawing:minimumDrawingSize:excludingStrokeIDs:]
  -[CHCutpointModel windowOverlap]
  -[CHCutpointModel _extractFeaturesFromDrawing:inputName:interpointDistance:error:]
  -[CHCutpointModel directionalFeaturesInputName]
  -[CHCutpointModel cutpointProbabilityOutputName]
  -[CHCutpointModel _detectedCutpoints:resampledDrawing:]
  -[CHCutpointModel _remappedCutpoints:pointMap:originalDrawing:excludingStrokeIDs:]
  -[CHCutpointModel distanceLeftFeatureIndex]
  -[CHCutpointModel distanceRightFeatureIndex]
  -[CHCutpointModel sinAngleLeftFeatureIndex]
  -[CHCutpointModel cosAngleLeftFeatureIndex]
  -[CHCutpointModel sinAngleRightFeatureIndex]
  -[CHCutpointModel cosAngleRightFeatureIndex]
  -[CHCutpointModel endpointFeatureIndex]


CHTimeWindowStrokeGroup : CHStrokeGroup
 @property  double startTimestamp
 @property  double endTimestamp

  // instance methods
  -[CHTimeWindowStrokeGroup startTimestamp]
  -[CHTimeWindowStrokeGroup endTimestamp]
  -[CHTimeWindowStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:startTimestamp:endTimestamp:]
  -[CHTimeWindowStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:startTimestamp:endTimestamp:]


CHTimeWindowStrokeGroupingStrategy : CHStrokeGroupingStrategy
  // instance methods
  -[CHTimeWindowStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHTimeWindowStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHTimeWindowStrokeGroupingStrategy _timeSortedStrokesForIdentifiers:]


CHRecognitionSessionTask : NSObject
 @property  CHRecognitionSessionResult *outputResult
 @property  long long status
 @property  NSObject<OS_dispatch_queue> *_recognizersQueue
 @property  BOOL cancelled
 @property  CHRecognitionSessionResult *inputResult
 @property  <CHRecognitionSessionTaskDelegate> *delegate
 @property  NSArray *locales
 @property  NSArray *preferredLocales
 @property  <CHStrokeProvider> *strokeProvider
 @property  long long recognitionEnvironment
 @property  BOOL saveInputDrawings
 @property  NSSet *forceRecognitionStrokeGroupIdentifiers
 @property  BOOL strokeGroupingOnly

  // instance methods
  -[CHRecognitionSessionTask init]
  -[CHRecognitionSessionTask dealloc]
  -[CHRecognitionSessionTask delegate]
  -[CHRecognitionSessionTask setDelegate:]
  -[CHRecognitionSessionTask cancel]
  -[CHRecognitionSessionTask main]
  -[CHRecognitionSessionTask status]
  -[CHRecognitionSessionTask cancelled]
  -[CHRecognitionSessionTask setCancelled:]
  -[CHRecognitionSessionTask _setStatus:]
  -[CHRecognitionSessionTask preferredLocales]
  -[CHRecognitionSessionTask locales]
  -[CHRecognitionSessionTask strokeProvider]
  -[CHRecognitionSessionTask clutterFilter]
  -[CHRecognitionSessionTask recognitionEnvironment]
  -[CHRecognitionSessionTask outputResult]
  -[CHRecognitionSessionTask inputResult]
  -[CHRecognitionSessionTask newStrokeClassifier]
  -[CHRecognitionSessionTask newGroupingManager]
  -[CHRecognitionSessionTask recognitionResultsForGroupingResult:groupingManager:]
  -[CHRecognitionSessionTask _setOutputResult:]
  -[CHRecognitionSessionTask _logResultsIfAppropriateWithStrokeProvider:]
  -[CHRecognitionSessionTask _isTransitionValidFromStatus:toStatus:]
  -[CHRecognitionSessionTask forceRecognitionStrokeGroupIdentifiers]
  -[CHRecognitionSessionTask _textRecognitionResultsForTextStrokeGroup:groupingManager:]
  -[CHRecognitionSessionTask _recognitionResultsForNonTextStrokeGroup:groupingManager:]
  -[CHRecognitionSessionTask strokeGroupingOnly]
  -[CHRecognitionSessionTask saveInputDrawings]
  -[CHRecognitionSessionTask _recognizersQueue]
  -[CHRecognitionSessionTask _tokenizedTextResultForDrawing:usingRecognizer:isRemoteRecognizer:locale:strokeLimit:recognitionError:]
  -[CHRecognitionSessionTask initWithLocales:preferredLocales:strokeProvider:inputResult:recognitionQOSClass:recognitionEnvironment:]
  -[CHRecognitionSessionTask setSaveInputDrawings:]
  -[CHRecognitionSessionTask setForceRecognitionStrokeGroupIdentifiers:]
  -[CHRecognitionSessionTask setStrokeGroupingOnly:]


CHSubstroke : NSObject
 @property  <CHStrokeIdentifier> *strokeIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds
 @property  double startTimestamp
 @property  double endTimestamp
 @property  ^{vector<CGPoint convexHull
 @property  double curvature

  // class methods
  +[CHSubstroke substrokesForStroke:]

  // instance methods
  -[CHSubstroke dealloc]
  -[CHSubstroke .cxx_destruct]
  -[CHSubstroke .cxx_construct]
  -[CHSubstroke bounds]
  -[CHSubstroke startTimestamp]
  -[CHSubstroke endTimestamp]
  -[CHSubstroke convexHull]
  -[CHSubstroke strokeIdentifier]
  -[CHSubstroke initWithStrokeIdentifier:bounds:startTimestamp:endTimestamp:convexHull:curvature:]
  -[CHSubstroke curvature]


CHSubstrokePlacement : NSObject <NSCopying>
 @property  CHSubstroke *substroke
 @property  {CGVector=dd} writingOrientation
 @property  {CGVector=dd} strokeDeviation
 @property  long long originalWritingDirectionIndex
 @property  {CGPoint=dd} coalescedCenter
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} rotatedBounds

  // instance methods
  -[CHSubstrokePlacement dealloc]
  -[CHSubstrokePlacement copyWithZone:]
  -[CHSubstrokePlacement rotatedBounds]
  -[CHSubstrokePlacement substroke]
  -[CHSubstrokePlacement initWithSubstroke:]
  -[CHSubstrokePlacement writingOrientation]
  -[CHSubstrokePlacement setWritingOrientation:]
  -[CHSubstrokePlacement strokeDeviation]
  -[CHSubstrokePlacement setStrokeDeviation:]
  -[CHSubstrokePlacement originalWritingDirectionIndex]
  -[CHSubstrokePlacement setOriginalWritingDirectionIndex:]
  -[CHSubstrokePlacement coalescedCenter]
  -[CHSubstrokePlacement setCoalescedCenter:]


CHStrokeGroupClassificationVisualization : CHStrokeGroupingVisualization
  // instance methods
  -[CHStrokeGroupClassificationVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupClassificationVisualization layeringPriority]
  -[CHStrokeGroupClassificationVisualization _newColorForStroke:inGroup:]
  -[CHStrokeGroupClassificationVisualization _attributedStringFromString:withColor:font:paragraphStyle:]


CHPolygon : NSObject
 @property  double area
 @property  long long vertexCount
 @property  ^{CGPoint=dd} vertices

  // class methods
  +[CHPolygon _sutherlandHodgmanClipForSubjectPolygon:usingClipPolygon:]
  +[CHPolygon _clipForPolygon:clippingEdge:clippedPolygonVertexCount:]
  +[CHPolygon _intersectionPointWithClippingEdge:withPolygonEdge:]

  // instance methods
  -[CHPolygon vertices]
  -[CHPolygon area]
  -[CHPolygon setArea:]
  -[CHPolygon vertexCount]
  -[CHPolygon initWithVertices:vertexCount:]
  -[CHPolygon polygonDrawing]
  -[CHPolygon polygonByIntersectingWithClipPolygon:]


CHStrokeGroupBasedVisualization : CHVisualization
 @property  CHRecognitionSessionResult *resultDrawn
 @property  NSSet *activeStrokeGroupAncestorIdentifiers
 @property  <CHStrokeGroupBasedVisualizationDelegate> *delegate
 @property  BOOL newGroupsDefaultToActive

  // instance methods
  -[CHStrokeGroupBasedVisualization dealloc]
  -[CHStrokeGroupBasedVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupBasedVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupBasedVisualization resultDrawn]
  -[CHStrokeGroupBasedVisualization activeStrokeGroupAncestorIdentifiers]
  -[CHStrokeGroupBasedVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHStrokeGroupBasedVisualization toggleVisualizationRegionAtPoint:]
  -[CHStrokeGroupBasedVisualization setResultDrawn:]
  -[CHStrokeGroupBasedVisualization newGroupsDefaultToActive]
  -[CHStrokeGroupBasedVisualization _markStrokeGroupsAsActive:]
  -[CHStrokeGroupBasedVisualization setActiveStrokeGroupAncestorIdentifiers:]


CHRemoteRecognizer : NSObject <CHRecognizing>
 @property  NSXPCConnection *_connection
 @property  BOOL shouldUseTextReplacements
 @property  long long priority
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  int recognitionMode
 @property  int contentType
 @property  NSLocale *locale
 @property  unsigned long maxRecognitionResultCount
 @property  NSCharacterSet *activeCharacterSet
 @property  {CGSize=dd} minimumDrawingSize
 @property  BOOL shouldEnableCachingIfAvailable

  // class methods
  +[CHRemoteRecognizer maxRequestStrokeCountForLocale:]

  // instance methods
  -[CHRemoteRecognizer dealloc]
  -[CHRemoteRecognizer isEqual:]
  -[CHRemoteRecognizer _connection]
  -[CHRemoteRecognizer locale]
  -[CHRemoteRecognizer contentType]
  -[CHRemoteRecognizer setContentType:]
  -[CHRemoteRecognizer priority]
  -[CHRemoteRecognizer setPriority:]
  -[CHRemoteRecognizer setActiveCharacterSet:]
  -[CHRemoteRecognizer shouldEnableCachingIfAvailable]
  -[CHRemoteRecognizer initWithMode:locale:]
  -[CHRemoteRecognizer recognitionMode]
  -[CHRemoteRecognizer maxRecognitionResultCount]
  -[CHRemoteRecognizer setMaxRecognitionResultCount:]
  -[CHRemoteRecognizer activeCharacterSet]
  -[CHRemoteRecognizer minimumDrawingSize]
  -[CHRemoteRecognizer setMinimumDrawingSize:]
  -[CHRemoteRecognizer setShouldEnableCachingIfAvailable:]
  -[CHRemoteRecognizer setShouldUseTextReplacements:]
  -[CHRemoteRecognizer shouldUseTextReplacements]
  -[CHRemoteRecognizer textRecognitionResultForDrawing:options:error:]
  -[CHRemoteRecognizer transcriptionPathsForTokenizedTextResult:withHistory:scores:error:]
  -[CHRemoteRecognizer _teardownXPCConnection]
  -[CHRemoteRecognizer _recognitionRequestWithDrawing:options:]
  -[CHRemoteRecognizer _recognitionResultForRequest:error:]
  -[CHRemoteRecognizer _setupXPCConnectionIfNeeded]
  -[CHRemoteRecognizer isEqualToRemoteRecognizer:]


CHVisualizationManager : NSObject <CHStrokeGroupBasedVisualizationDelegate, CHRecognitionSessionObserver>
 @property  NSMutableSet *_enabledVisualizationIDs
 @property  NSMutableArray *_activeVisualizationIDs
 @property  NSMutableDictionary *_activeVisualizationsByID
 @property  NSMutableDictionary *_strokeGroupIndexByAncestorID
 @property  BOOL _registeredAsChangeObserver
 @property  BOOL _registeredAsInputDrawingsClient
 @property  CHRecognitionSession *recognitionSession
 @property  <CHVisualizationManagerDelegate> *delegate
 @property  BOOL statusReportingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHVisualizationManager availableRecognitionSessionStatusKeys]
  +[CHVisualizationManager localizedNameForRecognitionSessionStatusKey:]
  +[CHVisualizationManager newColorForVisualizedItemAtIndex:]
  +[CHVisualizationManager availableVisualizationIdentifiers]
  +[CHVisualizationManager _classForVisualizationIdentifier:]
  +[CHVisualizationManager localizedNameForVisualizationIdentifier:]
  +[CHVisualizationManager variableHeightForRecognitionSessionStatusKey:]

  // instance methods
  -[CHVisualizationManager init]
  -[CHVisualizationManager dealloc]
  -[CHVisualizationManager delegate]
  -[CHVisualizationManager setDelegate:]
  -[CHVisualizationManager recognitionSession]
  -[CHVisualizationManager initWithRecognitionSession:]
  -[CHVisualizationManager drawVisualizationInRect:context:viewBounds:]
  -[CHVisualizationManager statusReportingEnabled]
  -[CHVisualizationManager setStatusReportingEnabled:]
  -[CHVisualizationManager valueForRecognitionStatusKey:]
  -[CHVisualizationManager visualizationIndexForStrokeGroup:]
  -[CHVisualizationManager visualizationNeedsDisplay:]
  -[CHVisualizationManager visualization:needsDisplayInRect:]
  -[CHVisualizationManager isEnabledVisualizationForIdentifier:]
  -[CHVisualizationManager _enabledVisualizationIDs]
  -[CHVisualizationManager _updateInstalledVisualizations]
  -[CHVisualizationManager _activeVisualizationIDs]
  -[CHVisualizationManager _updateSessionRegistration]
  -[CHVisualizationManager _activeVisualizationsByID]
  -[CHVisualizationManager _isActiveVisualizationForIdentifier:]
  -[CHVisualizationManager _addVisualizationForIdentifier:]
  -[CHVisualizationManager _removeVisualizationForIdentifier:]
  -[CHVisualizationManager _registeredAsChangeObserver]
  -[CHVisualizationManager set_registeredAsChangeObserver:]
  -[CHVisualizationManager _registeredAsInputDrawingsClient]
  -[CHVisualizationManager set_registeredAsInputDrawingsClient:]
  -[CHVisualizationManager _strokeGroupIndexByAncestorID]
  -[CHVisualizationManager _updateKnownStrokeGroupIndexes]
  -[CHVisualizationManager recognitionSessionDidUpdateRecognitionResult:]
  -[CHVisualizationManager recognitionSessionDidChangeStatus:]
  -[CHVisualizationManager setEnabled:forVisualizationIdentifier:]
  -[CHVisualizationManager toggleSelectiveVisualizationsAtPoint:]


CHQuery : NSObject <CHRecognitionSessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSObject<OS_dispatch_queue> *processingQueue
 @property  NSString *debugName
 @property  BOOL _queryActive
 @property  <CHStrokeProviderVersion> *lastProcessedStrokeProviderVersion
 @property  <CHQueryDelegate> *delegate
 @property  CHRecognitionSession *recognitionSession
 @property  double preferredUpdatesInterval

  // instance methods
  -[CHQuery init]
  -[CHQuery dealloc]
  -[CHQuery delegate]
  -[CHQuery setDelegate:]
  -[CHQuery pause]
  -[CHQuery start]
  -[CHQuery debugName]
  -[CHQuery processingQueue]
  -[CHQuery recognitionSession]
  -[CHQuery initWithRecognitionSession:]
  -[CHQuery waitForPendingUpdates]
  -[CHQuery q_updateQueryResult]
  -[CHQuery q_sessionResult]
  -[CHQuery q_queryResultDidChange]
  -[CHQuery setPreferredUpdatesInterval:]
  -[CHQuery q_setNeedsQueryResultUpdating]
  -[CHQuery recognitionSessionDidUpdateRecognitionResult:]
  -[CHQuery preferredRecognitionResultUpdatesInterval]
  -[CHQuery _queryActive]
  -[CHQuery set_queryActive:]
  -[CHQuery _updateForRecognitionSessionResultChangeIfNeeded]
  -[CHQuery preferredUpdatesInterval]
  -[CHQuery lastProcessedStrokeProviderVersion]
  -[CHQuery setLastProcessedStrokeProviderVersion:]


CHRecognizerConfiguration : NSObject
 @property  int mode
 @property  NSLocale *locale
 @property  int contentType
 @property  int contentTypeForNoSpaceRecognition
 @property  BOOL shouldEnableCachingIfAvailable

  // class methods
  +[CHRecognizerConfiguration defaultLocaleForRecognitionType:withMode:]
  +[CHRecognizerConfiguration validateRecognitionMode:]
  +[CHRecognizerConfiguration isLocaleSupported:withMode:]
  +[CHRecognizerConfiguration stringForRecognitionMode:]
  +[CHRecognizerConfiguration defaultMinimumDrawingSize]
  +[CHRecognizerConfiguration stringForRecognitionContentType:]
  +[CHRecognizerConfiguration configurationKeyForLocale:mode:]
  +[CHRecognizerConfiguration _decodeLocale:supportedLanguage:supportedScript:]
  +[CHRecognizerConfiguration _stringForRecognitionLanguage:]
  +[CHRecognizerConfiguration _stringForRecognitionScript:]
  +[CHRecognizerConfiguration supportedScriptForLocale:]
  +[CHRecognizerConfiguration supportedLanguageForLocale:]
  +[CHRecognizerConfiguration isLanguageSupported:withMode:]

  // instance methods
  -[CHRecognizerConfiguration dealloc]
  -[CHRecognizerConfiguration locale]
  -[CHRecognizerConfiguration contentType]
  -[CHRecognizerConfiguration mode]
  -[CHRecognizerConfiguration newLanguageModel]
  -[CHRecognizerConfiguration mecabraInputMethodType]
  -[CHRecognizerConfiguration initWithMode:locale:contentType:shouldEnableCachingIfAvailable:]
  -[CHRecognizerConfiguration requiredInappropriateFilteringFlags]
  -[CHRecognizerConfiguration shouldGenerateDigitLetterAlternatives]
  -[CHRecognizerConfiguration shouldEnforceGrammarOnTransliterations]
  -[CHRecognizerConfiguration newRecognitionEngine]
  -[CHRecognizerConfiguration newFreeFormEngine]
  -[CHRecognizerConfiguration newSpellChecker]
  -[CHRecognizerConfiguration newStaticLexicon:]
  -[CHRecognizerConfiguration newCJKStaticLexicon]
  -[CHRecognizerConfiguration newOVSTrie]
  -[CHRecognizerConfiguration newPatternFST]
  -[CHRecognizerConfiguration newGrammarFST]
  -[CHRecognizerConfiguration newRadicalClusterFST]
  -[CHRecognizerConfiguration newTransliterationVariantMap]
  -[CHRecognizerConfiguration newCharacterLanguageModelAndMap:]
  -[CHRecognizerConfiguration newStrokeTransitionModel]
  -[CHRecognizerConfiguration newCutpointModel]
  -[CHRecognizerConfiguration shouldForwardMecabraOTAAssetsUpdate]
  -[CHRecognizerConfiguration shouldRefineChineseCharacterCandidates]
  -[CHRecognizerConfiguration shouldApplyLMRescoring]
  -[CHRecognizerConfiguration shouldTransliterateAndSynthetizeCandidates]
  -[CHRecognizerConfiguration shouldPromoteChineseCommonCharacters]
  -[CHRecognizerConfiguration shouldTransformCharacterProbabilitiesIntoLogScores]
  -[CHRecognizerConfiguration shouldPerformGlobalBestSearch]
  -[CHRecognizerConfiguration shouldPerformGlobalBestSearchWithSmallLattice]
  -[CHRecognizerConfiguration shouldPerformIntegratedLexiconExpansion]
  -[CHRecognizerConfiguration shouldPenalizeLetterInsertion]
  -[CHRecognizerConfiguration shouldPerformMultiWordsExpansion]
  -[CHRecognizerConfiguration shouldApplyLexicalPenalty]
  -[CHRecognizerConfiguration shouldExpandNonSpaceSeparators]
  -[CHRecognizerConfiguration shouldComputeStrokePenalties]
  -[CHRecognizerConfiguration shouldExpandCodePoints]
  -[CHRecognizerConfiguration shouldPenalizePrefixes]
  -[CHRecognizerConfiguration shouldApplyRomanPostProcessing]
  -[CHRecognizerConfiguration shouldApplyChinesePostProcessing]
  -[CHRecognizerConfiguration shouldAutoCapitalize]
  -[CHRecognizerConfiguration shouldUseTokenPrecedingSpaces]
  -[CHRecognizerConfiguration shouldTransliterateSentences]
  -[CHRecognizerConfiguration shouldApplyDiacriticSensitivity]
  -[CHRecognizerConfiguration shouldUseCaching]
  -[CHRecognizerConfiguration supportedSegmentationStrategy]
  -[CHRecognizerConfiguration shouldPerformRegularSpaceRecognition]
  -[CHRecognizerConfiguration shouldPerformNoSpaceRecognition]
  -[CHRecognizerConfiguration shouldFallbackOnSingleCharacterExpansion]
  -[CHRecognizerConfiguration shouldComposeLexiconWithNetwork]
  -[CHRecognizerConfiguration shouldExpandLexiconInNetwork]
  -[CHRecognizerConfiguration contentTypeForNoSpaceRecognition]
  -[CHRecognizerConfiguration shouldKeepOutOfPatternCandidates]
  -[CHRecognizerConfiguration shouldDetectChinesePunctuation]
  -[CHRecognizerConfiguration shouldDetectRomanPunctuation]
  -[CHRecognizerConfiguration engineCandidateCount]
  -[CHRecognizerConfiguration shouldApplyCandidatesThresholding]
  -[CHRecognizerConfiguration shouldRelaxFinalCandidatesThresholding]
  -[CHRecognizerConfiguration shouldApplyLMSorting]
  -[CHRecognizerConfiguration shouldTreatAllSmallStrokesAsPunctuation]
  -[CHRecognizerConfiguration shouldApplyCharacterLMRescoring]
  -[CHRecognizerConfiguration shouldReplaceInvalidTokenIDs]
  -[CHRecognizerConfiguration maxRecognitionResultDefaultCount]
  -[CHRecognizerConfiguration shouldEnableCachingIfAvailable]
  -[CHRecognizerConfiguration isEqualToRecognizerConfiguration:]
  -[CHRecognizerConfiguration linguisticResourcesFallbackLocale]
  -[CHRecognizerConfiguration configurationKey]
  -[CHRecognizerConfiguration shouldPreserveLegacyTranscriptionPaths]
  -[CHRecognizerConfiguration newCustomLexicon:]


CHStrokeVisualization : CHVisualization
 @property  <CHStrokeProvider> *_strokeProviderDrawn

  // instance methods
  -[CHStrokeVisualization dealloc]
  -[CHStrokeVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeVisualization recognitionSessionDidUpdateRecognitionResult]
  -[CHStrokeVisualization drawStrokesFromStrokeProvider:inRect:context:]
  -[CHStrokeVisualization _strokeProviderDrawn]
  -[CHStrokeVisualization set_strokeProviderDrawn:]


CHGroupBoundsVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHGroupBoundsVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHGroupBoundsVisualization dirtyRectForStrokeGroup:]


CHRecognitionSession : NSObject <CHRecognitionSessionTaskDelegate>
 @property  BOOL strokeGroupingOnly
 @property  CHRecognitionSessionResult *lastRecognitionResult
 @property  long long status
 @property  <CHStrokeProvider> *latestStrokeProvider
 @property  NSArray *_effectiveLocales
 @property  CHRecognitionSessionResult *lastRecognitionResult
 @property  long long status
 @property  <CHStrokeProvider> *latestStrokeProvider
 @property  BOOL _hasUnprocessedChanges
 @property  NSMutableDictionary *_recognizersByLocaleID
 @property  unsigned long _changeCoalescingIndex
 @property  NSMutableArray *_changeObservers
 @property  NSMutableArray *_inputDrawingClients
 @property  NSObject<OS_dispatch_queue> *_tasksWorkQueue
 @property  NSObject<OS_dispatch_queue> *_sessionQueue
 @property  unsigned int _taskQueueQoSClass
 @property  NSMutableArray *_activeTasks
 @property  long long mode
 @property  NSArray *preferredLocales
 @property  NSArray *locales
 @property  <CHRecognitionSessionDataSource> *dataSource
 @property  long long recognitionEnvironment
 @property  long long priority
 @property  NSData *sessionData
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[CHRecognitionSession _isLocaleSupported:]
  +[CHRecognitionSession effectiveLocalesFromLocales:]
  +[CHRecognitionSession createRecognizerForLocale:remote:priority:]

  // instance methods
  -[CHRecognitionSession init]
  -[CHRecognitionSession dealloc]
  -[CHRecognitionSession status]
  -[CHRecognitionSession priority]
  -[CHRecognitionSession mode]
  -[CHRecognitionSession setPriority:]
  -[CHRecognitionSession _sessionQueue]
  -[CHRecognitionSession dataSource]
  -[CHRecognitionSession setDataSource:]
  -[CHRecognitionSession initWithMode:]
  -[CHRecognitionSession sessionData]
  -[CHRecognitionSession _setStatus:]
  -[CHRecognitionSession registerChangeObserver:]
  -[CHRecognitionSession unregisterChangeObserver:]
  -[CHRecognitionSession _notifyObserversWithBlock:]
  -[CHRecognitionSession preferredLocales]
  -[CHRecognitionSession setNeedsRecognitionUpdate]
  -[CHRecognitionSession setPreferredLocales:]
  -[CHRecognitionSession cancelOngoingRequests]
  -[CHRecognitionSession indexableContent]
  -[CHRecognitionSession locales]
  -[CHRecognitionSession setLocales:]
  -[CHRecognitionSession _changeObservers]
  -[CHRecognitionSession recognitionEnvironment]
  -[CHRecognitionSession latestStrokeProvider]
  -[CHRecognitionSession strokeGroupingOnly]
  -[CHRecognitionSession recognizerForLocale:]
  -[CHRecognitionSession setStrokeGroupingOnly:]
  -[CHRecognitionSession lastRecognitionResult]
  -[CHRecognitionSession registerInputDrawingClient:]
  -[CHRecognitionSession unregisterInputDrawingClient:]
  -[CHRecognitionSession waitForPendingRecognitionTasks]
  -[CHRecognitionSession _setupExecutionQueuesForMode:]
  -[CHRecognitionSession _setEffectiveLocales:]
  -[CHRecognitionSession _cleanupCachedRecognizers]
  -[CHRecognitionSession _isReadyToProcessChanges]
  -[CHRecognitionSession rebuildRecognitionResults]
  -[CHRecognitionSession _hasPendingRecognitionTasks]
  -[CHRecognitionSession _hasUnprocessedChanges]
  -[CHRecognitionSession _activeTasks]
  -[CHRecognitionSession _setLatestStrokeProvider:]
  -[CHRecognitionSession _setHasUnprocessedChanges:]
  -[CHRecognitionSession _scheduleProcessStrokeProviderChangesImmediately:]
  -[CHRecognitionSession _updateRecognitionSessionStatus]
  -[CHRecognitionSession _cancelOngoingRequests]
  -[CHRecognitionSession _changeCoalescingIndex]
  -[CHRecognitionSession set_changeCoalescingIndex:]
  -[CHRecognitionSession _setLastRecognitionResult:]
  -[CHRecognitionSession _processPendingStrokeChangesIfAvailable]
  -[CHRecognitionSession _preferredCoalescingInterval]
  -[CHRecognitionSession _newRecognitionSessionTask]
  -[CHRecognitionSession _tasksWorkQueue]
  -[CHRecognitionSession _inputDrawingClients]
  -[CHRecognitionSession _recognizersByLocaleID]
  -[CHRecognitionSession _shouldRunRecognitionLocally]
  -[CHRecognitionSession loadSessionData:error:]
  -[CHRecognitionSession setRecognitionEnvironment:]
  -[CHRecognitionSession _effectiveLocales]
  -[CHRecognitionSession _taskQueueQoSClass]
  -[CHRecognitionSession recognizableDrawingForStrokeGroupQueryItem:]
  -[CHRecognitionSession lastRecognitionResultWaitingForPendingTasks]


CHCharacterSetRules : NSObject
 @property  NSCharacterSet *lowercaseCharSet
 @property  NSCharacterSet *uppercaseCharSet
 @property  NSCharacterSet *digitCharSet
 @property  NSCharacterSet *startPunctuationCharSet
 @property  NSCharacterSet *middlePunctuationCharSet
 @property  NSCharacterSet *endOfWordPunctuationCharSet
 @property  NSCharacterSet *endOfSentencePunctuationCharSet
 @property  NSCharacterSet *digitStartPunctuationCharSet
 @property  NSCharacterSet *digitEndPunctuationCharSet
 @property  NSCharacterSet *arithmeticOperatorCharSet
 @property  NSCharacterSet *dateTimeSeparatorCharSet
 @property  NSCharacterSet *dateTimeEndLetterCharSet
 @property  NSCharacterSet *numeralEndLetterCharSet
 @property  NSCharacterSet *lexiconSkipCharSet
 @property  NSCharacterSet *containsDotCharSet
 @property  NSCharacterSet *containsTwoDotsCharSet
 @property  NSCharacterSet *prefixCapitalizationExceptionCharSet
 @property  NSCharacterSet *selfLoopPunctuationCharSet
 @property  NSCharacterSet *emoticonTopCharSet
 @property  NSCharacterSet *emoticonMiddleCharSet
 @property  NSCharacterSet *emoticonBottomCharSet
 @property  NSCharacterSet *emailAtCharSet
 @property  NSCharacterSet *emailPunctuationCharSet
 @property  NSCharacterSet *urlPunctuationCharSet
 @property  NSCharacterSet *nonSpaceSeparatorCharSet
 @property  {map<unsigned int strokeMaxPenalties
 @property  {map<unsigned int signatureUniChar
 @property  NSObject<OS_dispatch_queue> *_charSetRulesQueue

  // class methods
  +[CHCharacterSetRules expectedMinStrokeCount:]
  +[CHCharacterSetRules characterType:]
  +[CHCharacterSetRules expectedMaxDotCount:]
  +[CHCharacterSetRules characterTypeFromString:]
  +[CHCharacterSetRules expectedMaxStrokeCount:]
  +[CHCharacterSetRules sharedCharacterSetRules]

  // instance methods
  -[CHCharacterSetRules init]
  -[CHCharacterSetRules dealloc]
  -[CHCharacterSetRules .cxx_destruct]
  -[CHCharacterSetRules .cxx_construct]
  -[CHCharacterSetRules _charSetRulesQueue]
  -[CHCharacterSetRules _expectedMaxStrokeCount:]
  -[CHCharacterSetRules _expectedMinStrokeCount:]
  -[CHCharacterSetRules _expectedMaxDotCount:]
  -[CHCharacterSetRules _characterType:]
  -[CHCharacterSetRules lowercaseCharSet]
  -[CHCharacterSetRules setLowercaseCharSet:]
  -[CHCharacterSetRules uppercaseCharSet]
  -[CHCharacterSetRules setUppercaseCharSet:]
  -[CHCharacterSetRules digitCharSet]
  -[CHCharacterSetRules setDigitCharSet:]
  -[CHCharacterSetRules startPunctuationCharSet]
  -[CHCharacterSetRules setStartPunctuationCharSet:]
  -[CHCharacterSetRules middlePunctuationCharSet]
  -[CHCharacterSetRules setMiddlePunctuationCharSet:]
  -[CHCharacterSetRules endOfWordPunctuationCharSet]
  -[CHCharacterSetRules setEndOfWordPunctuationCharSet:]
  -[CHCharacterSetRules endOfSentencePunctuationCharSet]
  -[CHCharacterSetRules setEndOfSentencePunctuationCharSet:]
  -[CHCharacterSetRules digitStartPunctuationCharSet]
  -[CHCharacterSetRules setDigitStartPunctuationCharSet:]
  -[CHCharacterSetRules digitEndPunctuationCharSet]
  -[CHCharacterSetRules setDigitEndPunctuationCharSet:]
  -[CHCharacterSetRules arithmeticOperatorCharSet]
  -[CHCharacterSetRules setArithmeticOperatorCharSet:]
  -[CHCharacterSetRules dateTimeSeparatorCharSet]
  -[CHCharacterSetRules setDateTimeSeparatorCharSet:]
  -[CHCharacterSetRules dateTimeEndLetterCharSet]
  -[CHCharacterSetRules setDateTimeEndLetterCharSet:]
  -[CHCharacterSetRules numeralEndLetterCharSet]
  -[CHCharacterSetRules setNumeralEndLetterCharSet:]
  -[CHCharacterSetRules lexiconSkipCharSet]
  -[CHCharacterSetRules setLexiconSkipCharSet:]
  -[CHCharacterSetRules containsDotCharSet]
  -[CHCharacterSetRules setContainsDotCharSet:]
  -[CHCharacterSetRules containsTwoDotsCharSet]
  -[CHCharacterSetRules setContainsTwoDotsCharSet:]
  -[CHCharacterSetRules prefixCapitalizationExceptionCharSet]
  -[CHCharacterSetRules setPrefixCapitalizationExceptionCharSet:]
  -[CHCharacterSetRules selfLoopPunctuationCharSet]
  -[CHCharacterSetRules setSelfLoopPunctuationCharSet:]
  -[CHCharacterSetRules emoticonTopCharSet]
  -[CHCharacterSetRules setEmoticonTopCharSet:]
  -[CHCharacterSetRules emoticonMiddleCharSet]
  -[CHCharacterSetRules setEmoticonMiddleCharSet:]
  -[CHCharacterSetRules emoticonBottomCharSet]
  -[CHCharacterSetRules setEmoticonBottomCharSet:]
  -[CHCharacterSetRules emailAtCharSet]
  -[CHCharacterSetRules setEmailAtCharSet:]
  -[CHCharacterSetRules emailPunctuationCharSet]
  -[CHCharacterSetRules setEmailPunctuationCharSet:]
  -[CHCharacterSetRules urlPunctuationCharSet]
  -[CHCharacterSetRules setUrlPunctuationCharSet:]
  -[CHCharacterSetRules nonSpaceSeparatorCharSet]
  -[CHCharacterSetRules setNonSpaceSeparatorCharSet:]
  -[CHCharacterSetRules strokeMaxPenalties]
  -[CHCharacterSetRules setStrokeMaxPenalties:]
  -[CHCharacterSetRules signatureUniChar]
  -[CHCharacterSetRules setSignatureUniChar:]


CHTextLineStrokeGroup : CHStrokeGroup
 @property  NSArray *writingDirectionSortedStrokeIdentifiers

  // instance methods
  -[CHTextLineStrokeGroup dealloc]
  -[CHTextLineStrokeGroup .cxx_destruct]
  -[CHTextLineStrokeGroup .cxx_construct]
  -[CHTextLineStrokeGroup averageWritingOrientation]
  -[CHTextLineStrokeGroup initWithAncestorIdentifier:strokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:strategyIdentifier:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup initWithStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:strategyIdentifier:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup groupByAddingStrokeIdentifiers:removingStrokeIdentifiers:firstStrokeIdentifier:lastStrokeIdentifier:bounds:writingDirectionSortedSubstrokes:averageWritingOrientation:averageStrokeDeviation:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:coalescedLastSubstrokes:groupingConfidence:lastSubstrokeIndexBeforeMerge:firstStrokeOrigin:]
  -[CHTextLineStrokeGroup writingDirectionSortedSubstrokes]
  -[CHTextLineStrokeGroup localStrokeWritingOrientations]
  -[CHTextLineStrokeGroup localWritingOrientationAtStrokeIndex:]
  -[CHTextLineStrokeGroup averageStrokeDeviation]
  -[CHTextLineStrokeGroup lastSubstrokeIndexBeforeMerge]
  -[CHTextLineStrokeGroup coalescedLastSubstrokes]
  -[CHTextLineStrokeGroup writingDirectionSortedStrokeIdentifiers]


CHBottomUpStrokeGroupingResult : CHStrokeGroupingResult
 @property  NSDictionary *substrokePlacementsByStrokeIdentifier

  // instance methods
  -[CHBottomUpStrokeGroupingResult dealloc]
  -[CHBottomUpStrokeGroupingResult copyWithZone:]
  -[CHBottomUpStrokeGroupingResult substrokePlacementsByStrokeIdentifier]
  -[CHBottomUpStrokeGroupingResult initWithStrokeGroups:createdStrokeGroups:deletedStrokeGroups:substrokePlacementsByStrokeIdentifier:]


CHBottomUpStrokeGroupingStrategy : CHStrokeGroupingStrategy
 @property  BOOL isInlineContinuousMode

  // class methods
  +[CHBottomUpStrokeGroupingStrategy _boundingBoxesOfStrokesInGroup:rotatedAroundPoint:byAngle:]

  // instance methods
  -[CHBottomUpStrokeGroupingStrategy dealloc]
  -[CHBottomUpStrokeGroupingStrategy strategyIdentifier]
  -[CHBottomUpStrokeGroupingStrategy updatedGroupingResult:byAddingStrokes:removingStrokeIdentifiers:stableStrokeIdentifiers:allSubstrokesByStrokeIdentifier:withCancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy recognizableDrawingForStrokeGroup:translationVector:originalDrawing:orderedStrokesIDs:rescalingFactor:]
  -[CHBottomUpStrokeGroupingStrategy initWithStrokeProvider:defaultWritingOrientation:locales:isInlineContinuousMode:inlineContinuousModeTargets:]
  -[CHBottomUpStrokeGroupingStrategy isInlineContinuousMode]
  -[CHBottomUpStrokeGroupingStrategy _updateGroups:createdGroups:deletedGroups:forAddedStroke:substrokePlacementsByStrokeIdentifier:reusableIDRemovedGroups:trySplit:cancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy mergeGroupsPostProcessing:createdGroups:deletedGroups:]
  -[CHBottomUpStrokeGroupingStrategy _applyDefaultGroupingParameters]
  -[CHBottomUpStrokeGroupingStrategy _applyStrictGroupingParameters]
  -[CHBottomUpStrokeGroupingStrategy _getMergingLowerBoundCost:withStrokeBounds:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy getMergingEndOfLineCost:mergingEndOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy compareDistanceInWritingSequenceOfStroke:andStroke:toReferenceStroke:]
  -[CHBottomUpStrokeGroupingStrategy getMergingMiddleOfLineCost:mergingMiddleOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:]
  -[CHBottomUpStrokeGroupingStrategy _textLineStrokeGroupByAddingStroke:withSubstrokePlacements:intoStrokeGroup:mergingEndSubgroup:bestStrokeMergeEnd:]
  -[CHBottomUpStrokeGroupingStrategy tryRegroupingStrokesInGroup:substrokePlacementsByStrokeIdentifier:cancellationBlock:]
  -[CHBottomUpStrokeGroupingStrategy _newTextLineStrokeGroupWithStroke:withSubstrokePlacements:reusableIDRemovedGroups:]
  -[CHBottomUpStrokeGroupingStrategy estimateWritingDirectionAndSortSubstrokesAccordingly:averageWritingOrientation:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _writingDirectionSortedStrokeIdentifiersFromSubstrokes:localWritingOrientations:]
  -[CHBottomUpStrokeGroupingStrategy _lastSubstrokeCoalescedWithOverlappingSubstrokes:strokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _strokeGroupConfidenceForSortedSubstrokes:writingDirectionSortedStrokeIdentifiers:localStrokeWritingOrientations:averageWritingOrientation:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy _normalizedBoundsForWritingDirectionSortedStrokes:strokeWritingOrientations:firstStrokeDeviation:originalDrawing:rotatedSortedStrokes:]
  -[CHBottomUpStrokeGroupingStrategy _scaleFactorForBoundsHeight:]
  -[CHBottomUpStrokeGroupingStrategy _getMergingEndOfLineCost:mergingEndOfLineStroke:forStroke:consistingOfSubstrokes:toLineGroup:refSubstrokeIndex:]
  -[CHBottomUpStrokeGroupingStrategy clippedWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy _averageVectorFromCoalescedSubstrokes:toSubstroke:withOrientation:strokeRef:strokeDest:]
  -[CHBottomUpStrokeGroupingStrategy updateLocalWritingOrientationsForSubstrokes:useCoalescedCenter:]
  -[CHBottomUpStrokeGroupingStrategy sortSubstrokesByWritingDirection:averageWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy refineLocalWritingOrientationsForSubstrokes:useCoalescedCenter:]
  -[CHBottomUpStrokeGroupingStrategy refineWritingOrientationAndResortSubstrokes:averageWritingOrientation:]
  -[CHBottomUpStrokeGroupingStrategy updateLocalStrokeDeviationsForSubstrokes:averageStrokeDeviation:]
  -[CHBottomUpStrokeGroupingStrategy smoothLocalWritingOrientations:]
  -[CHBottomUpStrokeGroupingStrategy flippedCenters:ofSubstrokes:maxStrokesGap:begnning:]
  -[CHBottomUpStrokeGroupingStrategy _averageAngleAndReliabilityForStrokeGroup:]
  -[CHBottomUpStrokeGroupingStrategy _verticalOffsetForBoundsHeight:andScaleFactor:]


CHMutableStrokeClassificationResult : CHStrokeClassificationResult
  // instance methods
  -[CHMutableStrokeClassificationResult init]
  -[CHMutableStrokeClassificationResult dealloc]
  -[CHMutableStrokeClassificationResult copyWithZone:]
  -[CHMutableStrokeClassificationResult initWithStrokeClassificationsByStrokeIdentifier:substrokesByStrokeIdentifier:nontextCandidates:]
  -[CHMutableStrokeClassificationResult updateNonTextCandidatesByRemovingSupportFromStrokeIdentifier:skippingCandidatesWithStrokeIdentifier:]
  -[CHMutableStrokeClassificationResult updateByRemovingStrokeIdentifier:withRemovedAndClutterStrokeIDs:]
  -[CHMutableStrokeClassificationResult updateByTransitionedClutterStrokeIdentifier:withRemovedAndClutterStrokeIDs:]
  -[CHMutableStrokeClassificationResult updateByAddingNonClutterStroke:withAllStrokes:forceText:]
  -[CHMutableStrokeClassificationResult updateByAddingClutterStroke:]


CHStrokeClassifier : NSObject
 @property  <CHStrokeProvider> *strokeProvider
 @property  CHStrokeClassificationResult *strokeClassificationLastResult
 @property  BOOL textOnly

  // class methods
  +[CHStrokeClassifier nonTextCandidateForStroke:withSubstrokes:]
  +[CHStrokeClassifier containerSupportForPoints:withBounds:]

  // instance methods
  -[CHStrokeClassifier dealloc]
  -[CHStrokeClassifier strokeProvider]
  -[CHStrokeClassifier updatedStrokeClassificationResultByAddingStrokes:removingStrokeIdentifiers:clutterFilter:affectedClutterStrokeIDs:cancellationBlock:]
  -[CHStrokeClassifier initWithStrokeProvider:strokeClassificationLastResult:textOnly:]
  -[CHStrokeClassifier strokeClassificationLastResult]
  -[CHStrokeClassifier textOnly]


CHStrokeGroupBaselineVisualization : CHStrokeGroupBasedVisualization
  // instance methods
  -[CHStrokeGroupBaselineVisualization drawVisualizationInRect:context:viewBounds:]
  -[CHStrokeGroupBaselineVisualization dirtyRectForStrokeGroup:]
  -[CHStrokeGroupBaselineVisualization layeringPriority]
  -[CHStrokeGroupBaselineVisualization _labelBoundsForAnchorPoint:]
  -[CHStrokeGroupBaselineVisualization _newBaselinePathForStrokeGroup:outFirstPoint:strokeProvider:]
  -[CHStrokeGroupBaselineVisualization _getOrientedBounds:length:forStroke:atWritingDirectionIndex:inGroup:]
  -[CHStrokeGroupBaselineVisualization _orientationTransformForStrokeBounds:atWritingDirectionIndex:inGroup:]


CHIndexableContentQuery : CHQuery
 @property  CHRecognitionSessionIndexableContent *indexableContent

  // instance methods
  -[CHIndexableContentQuery dealloc]
  -[CHIndexableContentQuery debugName]
  -[CHIndexableContentQuery initWithRecognitionSession:]
  -[CHIndexableContentQuery indexableContent]
  -[CHIndexableContentQuery q_updateQueryResult]
  -[CHIndexableContentQuery _setIndexableContent:]


CHRecognitionSessionIndexableContent : NSObject
 @property  NSString *indexableTextRepresentation
 @property  NSString *presentableTextRepresentation

  // instance methods
  -[CHRecognitionSessionIndexableContent dealloc]
  -[CHRecognitionSessionIndexableContent indexableTextRepresentation]
  -[CHRecognitionSessionIndexableContent presentableTextRepresentation]
  -[CHRecognitionSessionIndexableContent initWithIndexableTextRepresentation:presentableTextRepresentation:]


NetworkCursor : NSObject
 @property  unsigned long stateType

  // class methods
  +[NetworkCursor cursorByAddingNodeIndex:toCursor:]

  // instance methods
  -[NetworkCursor init]
  -[NetworkCursor .cxx_destruct]
  -[NetworkCursor .cxx_construct]
  -[NetworkCursor stateType]
  -[NetworkCursor setStateType:]
  -[NetworkCursor isCompletePattern]
  -[NetworkCursor nodeIndexCount]
  -[NetworkCursor nodeIndexAtPosition:]
  -[NetworkCursor addNodeIndex:withStateType:]


CHPatternNetwork : NSObject
  // class methods
  +[CHPatternNetwork rootCursorForContentType:inNetwork:forFirstSegmentGroup:]
  +[CHPatternNetwork cursorByAdvancingWithString:fromCursor:inNetwork:]
  +[CHPatternNetwork cursorByAdvancingWithSymbol:fromCursor:inNetwork:]
  +[CHPatternNetwork patternToSymbolMap]
  +[CHPatternNetwork contentTypesToPatternsMapping]

  // instance methods
  -[CHPatternNetwork dealloc]
  -[CHPatternNetwork initWithFile:]
  -[CHPatternNetwork advanceCursor:withSymbol:]
  -[CHPatternNetwork stateTypeForNodeIndex:]


NSString(CoreHandwriting)
	// instance methods
	-[NSString(CoreHandwriting) ch_occurrencesOfCharactersInSet:maxCount:]

NSArray(CHExtensions)
	// instance methods
	-[NSArray(CHExtensions) ch_descriptionWithSeparator:filterBlock:]
	-[NSArray(CHExtensions) ch_mappedArrayWithBlock:]

01 00 0200 /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader: AppleSpell 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLDictionaryFeatureProvider 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLModel 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLModelConfiguration 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLMultiArray 
01 00 0600 /System/Library/Frameworks/CoreML.framework/CoreML: MLPredictionOptions 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableCharacterSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1100 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOrthography 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0b00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0200 /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader: PRErrorModel 
